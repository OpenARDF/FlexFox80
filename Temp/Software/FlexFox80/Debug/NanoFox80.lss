
NanoFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000048e  00804000  0000609a  0000614e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000609a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a5  0080448e  0080448e  000065dc  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  000065dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00006611  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006670  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a00  00000000  00000000  000066b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00013e7b  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005e52  00000000  00000000  0001af2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000857e  00000000  00000000  00020d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000203c  00000000  00000000  000292fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006245  00000000  00000000  0002b338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b5ec  00000000  00000000  0003157d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a10  00000000  00000000  0003cb69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__dtors_end>
       4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
       8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
       c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      10:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      14:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      18:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__vector_6>
      1c:	0c 94 61 26 	jmp	0x4cc2	; 0x4cc2 <__vector_7>
      20:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      24:	0c 94 19 26 	jmp	0x4c32	; 0x4c32 <__vector_9>
      28:	0c 94 43 26 	jmp	0x4c86	; 0x4c86 <__vector_10>
      2c:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <__vector_11>
      30:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_12>
      34:	0c 94 8b 26 	jmp	0x4d16	; 0x4d16 <__vector_13>
      38:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      3c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      40:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      44:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      48:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      4c:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_19>
      50:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_20>
      54:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      58:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      5c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      60:	0c 94 86 12 	jmp	0x250c	; 0x250c <__vector_24>
      64:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      68:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      6c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      70:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      74:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__vector_29>
      78:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_30>
      7c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__vector_31>
      80:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_32>
      84:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      88:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      8c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      90:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      94:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      98:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      9c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a4:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__vector_41>
      a8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      ac:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      bc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      cc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      dc:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__vector_55>
      e0:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_56>
      e4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      e8:	16 0c       	add	r1, r6
      ea:	14 0c       	add	r1, r4
      ec:	12 0c       	add	r1, r2
      ee:	17 0c       	add	r1, r7
      f0:	17 0c       	add	r1, r7
      f2:	17 0c       	add	r1, r7
      f4:	17 0c       	add	r1, r7
      f6:	17 0c       	add	r1, r7
      f8:	17 0c       	add	r1, r7
      fa:	0a 0c       	add	r0, r10
      fc:	17 0c       	add	r1, r7
      fe:	17 0c       	add	r1, r7
     100:	17 0c       	add	r1, r7
     102:	17 0c       	add	r1, r7
     104:	17 0c       	add	r1, r7
     106:	17 0c       	add	r1, r7
     108:	17 0c       	add	r1, r7
     10a:	17 0c       	add	r1, r7
     10c:	17 0c       	add	r1, r7
     10e:	04 0c       	add	r0, r4
     110:	17 0c       	add	r1, r7
     112:	17 0c       	add	r1, r7
     114:	17 0c       	add	r1, r7
     116:	17 0c       	add	r1, r7
     118:	17 0c       	add	r1, r7
     11a:	17 0c       	add	r1, r7
     11c:	17 0c       	add	r1, r7
     11e:	17 0c       	add	r1, r7
     120:	17 0c       	add	r1, r7
     122:	fd 0b       	sbc	r31, r29
     124:	17 0c       	add	r1, r7
     126:	17 0c       	add	r1, r7
     128:	17 0c       	add	r1, r7
     12a:	17 0c       	add	r1, r7
     12c:	17 0c       	add	r1, r7
     12e:	17 0c       	add	r1, r7
     130:	17 0c       	add	r1, r7
     132:	17 0c       	add	r1, r7
     134:	17 0c       	add	r1, r7
     136:	f5 0b       	sbc	r31, r21
     138:	17 0c       	add	r1, r7
     13a:	17 0c       	add	r1, r7
     13c:	17 0c       	add	r1, r7
     13e:	17 0c       	add	r1, r7
     140:	17 0c       	add	r1, r7
     142:	17 0c       	add	r1, r7
     144:	17 0c       	add	r1, r7
     146:	17 0c       	add	r1, r7
     148:	17 0c       	add	r1, r7
     14a:	ec 0b       	sbc	r30, r28
     14c:	59 0f       	add	r21, r25
     14e:	69 0f       	add	r22, r25
     150:	7e 0f       	add	r23, r30
     152:	93 0f       	add	r25, r19
     154:	a8 0f       	add	r26, r24
     156:	e3 10       	cpse	r14, r3
     158:	d7 10       	cpse	r13, r7
     15a:	df 0f       	add	r29, r31
     15c:	ec 0f       	add	r30, r28
     15e:	fe 0f       	add	r31, r30
     160:	10 10       	cpse	r1, r0
     162:	22 10       	cpse	r2, r2
     164:	5b 10       	cpse	r5, r11
     166:	68 10       	cpse	r6, r8
     168:	7a 10       	cpse	r7, r10
     16a:	8c 10       	cpse	r8, r12
     16c:	9e 10       	cpse	r9, r14
     16e:	30 1c       	adc	r3, r0
     170:	f4 1b       	sub	r31, r20
     172:	20 1c       	adc	r2, r0
     174:	38 1c       	adc	r3, r8
     176:	24 1c       	adc	r2, r4
     178:	38 1c       	adc	r3, r8
     17a:	04 1c       	adc	r0, r4
     17c:	f0 1b       	sub	r31, r16
     17e:	fc 1b       	sub	r31, r28
     180:	00 1c       	adc	r0, r0
     182:	38 1c       	adc	r3, r8
     184:	14 1c       	adc	r1, r4
     186:	e8 1b       	sub	r30, r24
     188:	18 1c       	adc	r1, r8
     18a:	e4 1b       	sub	r30, r20
     18c:	f8 1b       	sub	r31, r24
     18e:	bc 1b       	sub	r27, r28
     190:	c0 1b       	sub	r28, r16
     192:	c4 1b       	sub	r28, r20
     194:	c8 1b       	sub	r28, r24
     196:	cc 1b       	sub	r28, r28
     198:	d0 1b       	sub	r29, r16
     19a:	d4 1b       	sub	r29, r20
     19c:	d8 1b       	sub	r29, r24
     19e:	dc 1b       	sub	r29, r28
     1a0:	e0 1b       	sub	r30, r16
     1a2:	08 1c       	adc	r0, r8
     1a4:	0c 1c       	adc	r0, r12
     1a6:	34 1c       	adc	r3, r4
     1a8:	10 1c       	adc	r1, r0
     1aa:	38 1c       	adc	r3, r8
     1ac:	ec 1b       	sub	r30, r28
     1ae:	28 1c       	adc	r2, r8
     1b0:	54 1b       	sub	r21, r20
     1b2:	58 1b       	sub	r21, r24
     1b4:	5c 1b       	sub	r21, r28
     1b6:	60 1b       	sub	r22, r16
     1b8:	64 1b       	sub	r22, r20
     1ba:	68 1b       	sub	r22, r24
     1bc:	6c 1b       	sub	r22, r28
     1be:	70 1b       	sub	r23, r16
     1c0:	74 1b       	sub	r23, r20
     1c2:	78 1b       	sub	r23, r24
     1c4:	7c 1b       	sub	r23, r28
     1c6:	80 1b       	sub	r24, r16
     1c8:	84 1b       	sub	r24, r20
     1ca:	88 1b       	sub	r24, r24
     1cc:	8c 1b       	sub	r24, r28
     1ce:	90 1b       	sub	r25, r16
     1d0:	94 1b       	sub	r25, r20
     1d2:	98 1b       	sub	r25, r24
     1d4:	9c 1b       	sub	r25, r28
     1d6:	a0 1b       	sub	r26, r16
     1d8:	a4 1b       	sub	r26, r20
     1da:	a8 1b       	sub	r26, r24
     1dc:	ac 1b       	sub	r26, r28
     1de:	b0 1b       	sub	r27, r16
     1e0:	b4 1b       	sub	r27, r20
     1e2:	b8 1b       	sub	r27, r24
     1e4:	38 1c       	adc	r3, r8
     1e6:	38 1c       	adc	r3, r8
     1e8:	38 1c       	adc	r3, r8
     1ea:	38 1c       	adc	r3, r8
     1ec:	1c 1c       	adc	r1, r12
     1ee:	38 1c       	adc	r3, r8
     1f0:	38 1c       	adc	r3, r8
     1f2:	38 1c       	adc	r3, r8
     1f4:	38 1c       	adc	r3, r8
     1f6:	38 1c       	adc	r3, r8
     1f8:	38 1c       	adc	r3, r8
     1fa:	38 1c       	adc	r3, r8
     1fc:	38 1c       	adc	r3, r8
     1fe:	38 1c       	adc	r3, r8
     200:	38 1c       	adc	r3, r8
     202:	38 1c       	adc	r3, r8
     204:	38 1c       	adc	r3, r8
     206:	38 1c       	adc	r3, r8
     208:	38 1c       	adc	r3, r8
     20a:	38 1c       	adc	r3, r8
     20c:	38 1c       	adc	r3, r8
     20e:	38 1c       	adc	r3, r8
     210:	38 1c       	adc	r3, r8
     212:	38 1c       	adc	r3, r8
     214:	38 1c       	adc	r3, r8
     216:	38 1c       	adc	r3, r8
     218:	38 1c       	adc	r3, r8
     21a:	38 1c       	adc	r3, r8
     21c:	38 1c       	adc	r3, r8
     21e:	38 1c       	adc	r3, r8
     220:	38 1c       	adc	r3, r8
     222:	38 1c       	adc	r3, r8
     224:	38 1c       	adc	r3, r8
     226:	2c 1c       	adc	r2, r12

00000228 <__ctors_start>:
     228:	4a 12       	cpse	r4, r26
     22a:	b6 12       	cpse	r11, r22

0000022c <__ctors_end>:
     22c:	51 12       	cpse	r5, r17
     22e:	bd 12       	cpse	r11, r29

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	cd bf       	out	0x3d, r28	; 61
     238:	df e7       	ldi	r29, 0x7F	; 127
     23a:	de bf       	out	0x3e, r29	; 62

0000023c <__do_copy_data>:
     23c:	14 e4       	ldi	r17, 0x44	; 68
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e4       	ldi	r27, 0x40	; 64
     242:	ea e9       	ldi	r30, 0x9A	; 154
     244:	f0 e6       	ldi	r31, 0x60	; 96
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	ae 38       	cpi	r26, 0x8E	; 142
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	28 e4       	ldi	r18, 0x48	; 72
     258:	ae e8       	ldi	r26, 0x8E	; 142
     25a:	b4 e4       	ldi	r27, 0x44	; 68
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a3 33       	cpi	r26, 0x33	; 51
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>

00000266 <__do_global_ctors>:
     266:	11 e0       	ldi	r17, 0x01	; 1
     268:	c6 e1       	ldi	r28, 0x16	; 22
     26a:	d1 e0       	ldi	r29, 0x01	; 1
     26c:	04 c0       	rjmp	.+8      	; 0x276 <__do_global_ctors+0x10>
     26e:	21 97       	sbiw	r28, 0x01	; 1
     270:	fe 01       	movw	r30, r28
     272:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__tablejump2__>
     276:	c4 31       	cpi	r28, 0x14	; 20
     278:	d1 07       	cpc	r29, r17
     27a:	c9 f7       	brne	.-14     	; 0x26e <__do_global_ctors+0x8>
     27c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <main>
     280:	0c 94 40 30 	jmp	0x6080	; 0x6080 <__do_global_dtors>

00000284 <__bad_interrupt>:
     284:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000288 <is_leap_year>:
     288:	9c 01       	movw	r18, r24
     28a:	23 70       	andi	r18, 0x03	; 3
     28c:	33 27       	eor	r19, r19
     28e:	23 2b       	or	r18, r19
     290:	59 f4       	brne	.+22     	; 0x2a8 <is_leap_year+0x20>
     292:	64 e6       	ldi	r22, 0x64	; 100
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	0e 94 90 2b 	call	0x5720	; 0x5720 <__divmodhi4>
     29a:	89 2b       	or	r24, r25
     29c:	39 f4       	brne	.+14     	; 0x2ac <is_leap_year+0x24>
     29e:	63 70       	andi	r22, 0x03	; 3
     2a0:	77 27       	eor	r23, r23
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	67 2b       	or	r22, r23
     2a6:	19 f0       	breq	.+6      	; 0x2ae <is_leap_year+0x26>
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	08 95       	ret

000002b0 <month_length>:
     2b0:	62 30       	cpi	r22, 0x02	; 2
     2b2:	21 f4       	brne	.+8      	; 0x2bc <month_length+0xc>
     2b4:	0e 94 44 01 	call	0x288	; 0x288 <is_leap_year>
     2b8:	84 5e       	subi	r24, 0xE4	; 228
     2ba:	08 95       	ret
     2bc:	68 30       	cpi	r22, 0x08	; 8
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <month_length+0x12>
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	61 70       	andi	r22, 0x01	; 1
     2c4:	8e e1       	ldi	r24, 0x1E	; 30
     2c6:	86 0f       	add	r24, r22
     2c8:	08 95       	ret

000002ca <set_system_time>:
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	60 93 2f 48 	sts	0x482F, r22	; 0x80482f <__system_time>
     2d2:	70 93 30 48 	sts	0x4830, r23	; 0x804830 <__system_time+0x1>
     2d6:	80 93 31 48 	sts	0x4831, r24	; 0x804831 <__system_time+0x2>
     2da:	90 93 32 48 	sts	0x4832, r25	; 0x804832 <__system_time+0x3>
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	08 95       	ret

000002e2 <time>:
     2e2:	fc 01       	movw	r30, r24
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	60 91 2f 48 	lds	r22, 0x482F	; 0x80482f <__system_time>
     2ec:	70 91 30 48 	lds	r23, 0x4830	; 0x804830 <__system_time+0x1>
     2f0:	80 91 31 48 	lds	r24, 0x4831	; 0x804831 <__system_time+0x2>
     2f4:	90 91 32 48 	lds	r25, 0x4832	; 0x804832 <__system_time+0x3>
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	30 97       	sbiw	r30, 0x00	; 0
     2fc:	21 f0       	breq	.+8      	; 0x306 <time+0x24>
     2fe:	60 83       	st	Z, r22
     300:	71 83       	std	Z+1, r23	; 0x01
     302:	82 83       	std	Z+2, r24	; 0x02
     304:	93 83       	std	Z+3, r25	; 0x03
     306:	08 95       	ret

00000308 <system_tick>:
     308:	8f 93       	push	r24
     30a:	8f b7       	in	r24, 0x3f	; 63
     30c:	8f 93       	push	r24
     30e:	f8 94       	cli
     310:	80 91 2f 48 	lds	r24, 0x482F	; 0x80482f <__system_time>
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	80 93 2f 48 	sts	0x482F, r24	; 0x80482f <__system_time>
     31a:	80 91 30 48 	lds	r24, 0x4830	; 0x804830 <__system_time+0x1>
     31e:	8f 4f       	sbci	r24, 0xFF	; 255
     320:	80 93 30 48 	sts	0x4830, r24	; 0x804830 <__system_time+0x1>
     324:	80 91 31 48 	lds	r24, 0x4831	; 0x804831 <__system_time+0x2>
     328:	8f 4f       	sbci	r24, 0xFF	; 255
     32a:	80 93 31 48 	sts	0x4831, r24	; 0x804831 <__system_time+0x2>
     32e:	80 91 32 48 	lds	r24, 0x4832	; 0x804832 <__system_time+0x3>
     332:	8f 4f       	sbci	r24, 0xFF	; 255
     334:	80 93 32 48 	sts	0x4832, r24	; 0x804832 <__system_time+0x3>
     338:	8f 91       	pop	r24
     33a:	8f bf       	out	0x3f, r24	; 63
     33c:	8f 91       	pop	r24
     33e:	08 95       	ret

00000340 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     340:	0e 94 4f 14 	call	0x289e	; 0x289e <system_init>
     344:	08 95       	ret

00000346 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     352:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     356:	80 ff       	sbrs	r24, 0
     358:	03 c0       	rjmp	.+6      	; 0x360 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     360:	8f 91       	pop	r24
     362:	0f 90       	pop	r0
     364:	0f be       	out	0x3f, r0	; 63
     366:	0f 90       	pop	r0
     368:	1f 90       	pop	r1
     36a:	18 95       	reti

0000036c <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     374:	80 91 e3 44 	lds	r24, 0x44E3	; 0x8044e3 <_ZZ9serial_RxhE4buff>
     378:	90 91 e4 44 	lds	r25, 0x44E4	; 0x8044e4 <_ZZ9serial_RxhE4buff+0x1>
     37c:	89 2b       	or	r24, r25
     37e:	31 f4       	brne	.+12     	; 0x38c <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
     380:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <nextEmptySBRxBuffer>
     384:	80 93 e3 44 	sts	0x44E3, r24	; 0x8044e3 <_ZZ9serial_RxhE4buff>
     388:	90 93 e4 44 	sts	0x44E4, r25	; 0x8044e4 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
     38c:	c0 91 e3 44 	lds	r28, 0x44E3	; 0x8044e3 <_ZZ9serial_RxhE4buff>
     390:	d0 91 e4 44 	lds	r29, 0x44E4	; 0x8044e4 <_ZZ9serial_RxhE4buff+0x1>
     394:	20 97       	sbiw	r28, 0x00	; 0
     396:	09 f4       	brne	.+2      	; 0x39a <_Z9serial_Rxh+0x2e>
     398:	73 c1       	rjmp	.+742    	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
     39a:	81 2f       	mov	r24, r17
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <toupper>
     3a2:	ac 01       	movw	r20, r24
     3a4:	28 2f       	mov	r18, r24

		if(ignoreCount)
     3a6:	90 91 e2 44 	lds	r25, 0x44E2	; 0x8044e2 <_ZZ9serial_RxhE11ignoreCount>
     3aa:	99 23       	and	r25, r25
     3ac:	21 f0       	breq	.+8      	; 0x3b6 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
     3ae:	91 50       	subi	r25, 0x01	; 1
     3b0:	90 93 e2 44 	sts	0x44E2, r25	; 0x8044e2 <_ZZ9serial_RxhE11ignoreCount>
     3b4:	65 c1       	rjmp	.+714    	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
     3b6:	4b 31       	cpi	r20, 0x1B	; 27
     3b8:	21 f4       	brne	.+8      	; 0x3c2 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	80 93 e2 44 	sts	0x44E2, r24	; 0x8044e2 <_ZZ9serial_RxhE11ignoreCount>
     3c0:	5f c1       	rjmp	.+702    	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     3c2:	4d 30       	cpi	r20, 0x0D	; 13
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <_Z9serial_Rxh+0x5c>
     3c6:	3f c0       	rjmp	.+126    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		{
			if(receiving_msg)
     3c8:	80 91 ae 44 	lds	r24, 0x44AE	; 0x8044ae <_ZZ9serial_RxhE13receiving_msg>
     3cc:	88 23       	and	r24, r24
     3ce:	31 f1       	breq	.+76     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			{
				if(charIndex > 0)
     3d0:	e0 91 e1 44 	lds	r30, 0x44E1	; 0x8044e1 <_ZZ9serial_RxhE9charIndex>
     3d4:	ee 23       	and	r30, r30
     3d6:	f9 f0       	breq	.+62     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				{
					buff->type = SERIALBUS_MSG_QUERY;
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
     3dc:	80 91 ac 44 	lds	r24, 0x44AC	; 0x8044ac <_ZZ9serial_RxhE6msg_ID>
     3e0:	90 91 ad 44 	lds	r25, 0x44AD	; 0x8044ad <_ZZ9serial_RxhE6msg_ID+0x1>
     3e4:	89 83       	std	Y+1, r24	; 0x01
     3e6:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
     3e8:	80 91 ab 44 	lds	r24, 0x44AB	; 0x8044ab <_ZZ9serial_RxhE11field_index>
     3ec:	88 23       	and	r24, r24
     3ee:	79 f0       	breq	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
					{
						buff->fields[field_index - 1][field_len] = 0;
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	40 91 aa 44 	lds	r20, 0x44AA	; 0x8044aa <_ZZ9serial_RxhE9field_len>
     3f8:	54 e1       	ldi	r21, 0x14	; 20
     3fa:	58 9f       	mul	r21, r24
     3fc:	90 01       	movw	r18, r0
     3fe:	59 9f       	mul	r21, r25
     400:	30 0d       	add	r19, r0
     402:	11 24       	eor	r1, r1
     404:	c2 0f       	add	r28, r18
     406:	d3 1f       	adc	r29, r19
     408:	c4 0f       	add	r28, r20
     40a:	d1 1d       	adc	r29, r1
     40c:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	e1 55       	subi	r30, 0x51	; 81
     412:	fb 4b       	sbci	r31, 0xBB	; 187
     414:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
     416:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <sb_send_NewLine>
     41a:	04 c0       	rjmp	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	9f ef       	ldi	r25, 0xFF	; 255
     420:	89 83       	std	Y+1, r24	; 0x01
     422:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
     424:	10 92 e1 44 	sts	0x44E1, r1	; 0x8044e1 <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
     428:	10 92 aa 44 	sts	0x44AA, r1	; 0x8044aa <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
     42c:	10 92 ac 44 	sts	0x44AC, r1	; 0x8044ac <_ZZ9serial_RxhE6msg_ID>
     430:	10 92 ad 44 	sts	0x44AD, r1	; 0x8044ad <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
     434:	10 92 ab 44 	sts	0x44AB, r1	; 0x8044ab <_ZZ9serial_RxhE11field_index>
			buff = NULL;
     438:	10 92 e3 44 	sts	0x44E3, r1	; 0x8044e3 <_ZZ9serial_RxhE4buff>
     43c:	10 92 e4 44 	sts	0x44E4, r1	; 0x8044e4 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = false;
     440:	10 92 ae 44 	sts	0x44AE, r1	; 0x8044ae <_ZZ9serial_RxhE13receiving_msg>
     444:	1d c1       	rjmp	.+570    	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
		}
		else if(rx_char)
     446:	44 23       	and	r20, r20
     448:	09 f4       	brne	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     44a:	1a c1       	rjmp	.+564    	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
     44c:	e0 91 e1 44 	lds	r30, 0x44E1	; 0x8044e1 <_ZZ9serial_RxhE9charIndex>
     450:	8e 2f       	mov	r24, r30
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	dc 01       	movw	r26, r24
     456:	a1 55       	subi	r26, 0x51	; 81
     458:	bb 4b       	sbci	r27, 0xBB	; 187
     45a:	4c 93       	st	X, r20

			if(charIndex)
     45c:	ee 23       	and	r30, r30
     45e:	09 f4       	brne	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     460:	d7 c0       	rjmp	.+430    	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
     462:	4f 37       	cpi	r20, 0x7F	; 127
     464:	09 f0       	breq	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	5f c0       	rjmp	.+190    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				{
					charIndex--;
     468:	e1 50       	subi	r30, 0x01	; 1
     46a:	e0 93 e1 44 	sts	0x44E1, r30	; 0x8044e1 <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
     46e:	80 91 ab 44 	lds	r24, 0x44AB	; 0x8044ab <_ZZ9serial_RxhE11field_index>
     472:	81 11       	cpse	r24, r1
     474:	13 c0       	rjmp	.+38     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
					{
						msg_ID -= textBuff[charIndex];
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	e1 55       	subi	r30, 0x51	; 81
     47a:	fb 4b       	sbci	r31, 0xBB	; 187
     47c:	30 81       	ld	r19, Z
     47e:	80 91 ac 44 	lds	r24, 0x44AC	; 0x8044ac <_ZZ9serial_RxhE6msg_ID>
     482:	90 91 ad 44 	lds	r25, 0x44AD	; 0x8044ad <_ZZ9serial_RxhE6msg_ID+0x1>
     486:	83 1b       	sub	r24, r19
     488:	91 09       	sbc	r25, r1
						msg_ID /= 10;
     48a:	6a e0       	ldi	r22, 0x0A	; 10
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	0e 94 90 2b 	call	0x5720	; 0x5720 <__divmodhi4>
     492:	60 93 ac 44 	sts	0x44AC, r22	; 0x8044ac <_ZZ9serial_RxhE6msg_ID>
     496:	70 93 ad 44 	sts	0x44AD, r23	; 0x8044ad <_ZZ9serial_RxhE6msg_ID+0x1>
     49a:	39 c0       	rjmp	.+114    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
					}
					else if(field_len)
     49c:	90 91 aa 44 	lds	r25, 0x44AA	; 0x8044aa <_ZZ9serial_RxhE9field_len>
     4a0:	99 23       	and	r25, r25
     4a2:	91 f0       	breq	.+36     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
					{
						field_len--;
     4a4:	3f ef       	ldi	r19, 0xFF	; 255
     4a6:	39 0f       	add	r19, r25
     4a8:	30 93 aa 44 	sts	0x44AA, r19	; 0x8044aa <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	64 e1       	ldi	r22, 0x14	; 20
     4b2:	68 9f       	mul	r22, r24
     4b4:	a0 01       	movw	r20, r0
     4b6:	69 9f       	mul	r22, r25
     4b8:	50 0d       	add	r21, r0
     4ba:	11 24       	eor	r1, r1
     4bc:	c4 0f       	add	r28, r20
     4be:	d5 1f       	adc	r29, r21
     4c0:	c3 0f       	add	r28, r19
     4c2:	d1 1d       	adc	r29, r1
     4c4:	1b 82       	std	Y+3, r1	; 0x03
     4c6:	23 c0       	rjmp	.+70     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
					}
					else if(textBuff[charIndex] == ' ')
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	e1 55       	subi	r30, 0x51	; 81
     4cc:	fb 4b       	sbci	r31, 0xBB	; 187
     4ce:	90 81       	ld	r25, Z
     4d0:	90 32       	cpi	r25, 0x20	; 32
     4d2:	a1 f4       	brne	.+40     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
					{
						field_index--;
     4d4:	81 50       	subi	r24, 0x01	; 1
     4d6:	80 93 ab 44 	sts	0x44AB, r24	; 0x8044ab <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
     4da:	34 e1       	ldi	r19, 0x14	; 20
     4dc:	83 9f       	mul	r24, r19
     4de:	c0 01       	movw	r24, r0
     4e0:	11 24       	eor	r1, r1
     4e2:	03 96       	adiw	r24, 0x03	; 3
     4e4:	c8 0f       	add	r28, r24
     4e6:	d9 1f       	adc	r29, r25
     4e8:	fe 01       	movw	r30, r28
     4ea:	01 90       	ld	r0, Z+
     4ec:	00 20       	and	r0, r0
     4ee:	e9 f7       	brne	.-6      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f0:	31 97       	sbiw	r30, 0x01	; 1
     4f2:	ec 1b       	sub	r30, r28
     4f4:	fd 0b       	sbc	r31, r29
     4f6:	e0 93 aa 44 	sts	0x44AA, r30	; 0x8044aa <_ZZ9serial_RxhE9field_len>
     4fa:	09 c0       	rjmp	.+18     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
     4fc:	94 e1       	ldi	r25, 0x14	; 20
     4fe:	89 9f       	mul	r24, r25
     500:	c0 0d       	add	r28, r0
     502:	d1 1d       	adc	r29, r1
     504:	11 24       	eor	r1, r1
     506:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
     508:	81 50       	subi	r24, 0x01	; 1
     50a:	80 93 ab 44 	sts	0x44AB, r24	; 0x8044ab <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
     50e:	80 91 e1 44 	lds	r24, 0x44E1	; 0x8044e1 <_ZZ9serial_RxhE9charIndex>
     512:	e8 2f       	mov	r30, r24
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	e1 55       	subi	r30, 0x51	; 81
     518:	fb 4b       	sbci	r31, 0xBB	; 187
     51a:	10 82       	st	Z, r1

					if(charIndex == 0)
     51c:	81 11       	cpse	r24, r1
     51e:	ab c0       	rjmp	.+342    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
					{
						receiving_msg = false;
     520:	10 92 ae 44 	sts	0x44AE, r1	; 0x8044ae <_ZZ9serial_RxhE13receiving_msg>
     524:	a8 c0       	rjmp	.+336    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
					}
				}
				else
				{
					if(rx_char == ' ')
     526:	40 32       	cpi	r20, 0x20	; 32
     528:	81 f5       	brne	.+96     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
     52a:	fc 01       	movw	r30, r24
     52c:	e2 55       	subi	r30, 0x52	; 82
     52e:	fb 4b       	sbci	r31, 0xBB	; 187
     530:	30 81       	ld	r19, Z
     532:	30 32       	cpi	r19, 0x20	; 32
     534:	09 f4       	brne	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     536:	98 c0       	rjmp	.+304    	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     538:	30 91 ab 44 	lds	r19, 0x44AB	; 0x8044ab <_ZZ9serial_RxhE11field_index>
     53c:	43 2f       	mov	r20, r19
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	ba 01       	movw	r22, r20
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	63 30       	cpi	r22, 0x03	; 3
     548:	71 05       	cpc	r23, r1
     54a:	0c f0       	brlt	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     54c:	8f c0       	rjmp	.+286    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
     54e:	33 23       	and	r19, r19
     550:	79 f0       	breq	.+30     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
							{
								buff->fields[field_index - 1][field_len] = '\0';
     552:	41 50       	subi	r20, 0x01	; 1
     554:	51 09       	sbc	r21, r1
     556:	e0 91 aa 44 	lds	r30, 0x44AA	; 0x8044aa <_ZZ9serial_RxhE9field_len>
     55a:	f4 e1       	ldi	r31, 0x14	; 20
     55c:	f4 9f       	mul	r31, r20
     55e:	b0 01       	movw	r22, r0
     560:	f5 9f       	mul	r31, r21
     562:	70 0d       	add	r23, r0
     564:	11 24       	eor	r1, r1
     566:	c6 0f       	add	r28, r22
     568:	d7 1f       	adc	r29, r23
     56a:	ce 0f       	add	r28, r30
     56c:	d1 1d       	adc	r29, r1
     56e:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
     570:	3f 5f       	subi	r19, 0xFF	; 255
     572:	30 93 ab 44 	sts	0x44AB, r19	; 0x8044ab <_ZZ9serial_RxhE11field_index>
							field_len = 0;
     576:	10 92 aa 44 	sts	0x44AA, r1	; 0x8044aa <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	81 33       	cpi	r24, 0x31	; 49
     57e:	91 05       	cpc	r25, r1
     580:	0c f0       	brlt	.+2      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     582:	81 e3       	ldi	r24, 0x31	; 49
     584:	80 93 e1 44 	sts	0x44E1, r24	; 0x8044e1 <_ZZ9serial_RxhE9charIndex>
     588:	76 c0       	rjmp	.+236    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
     58a:	80 91 aa 44 	lds	r24, 0x44AA	; 0x8044aa <_ZZ9serial_RxhE9field_len>
     58e:	85 31       	cpi	r24, 0x15	; 21
     590:	08 f0       	brcs	.+2      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     592:	6e c0       	rjmp	.+220    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
					{
						if(field_index == 0)    /* message ID received */
     594:	60 91 ab 44 	lds	r22, 0x44AB	; 0x8044ab <_ZZ9serial_RxhE11field_index>
     598:	61 11       	cpse	r22, r1
     59a:	19 c0       	rjmp	.+50     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
						{
							msg_ID = msg_ID * 10 + rx_char;
     59c:	60 91 ac 44 	lds	r22, 0x44AC	; 0x8044ac <_ZZ9serial_RxhE6msg_ID>
     5a0:	70 91 ad 44 	lds	r23, 0x44AD	; 0x8044ad <_ZZ9serial_RxhE6msg_ID+0x1>
     5a4:	fb 01       	movw	r30, r22
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	66 0f       	add	r22, r22
     5ac:	77 1f       	adc	r23, r23
     5ae:	66 0f       	add	r22, r22
     5b0:	77 1f       	adc	r23, r23
     5b2:	66 0f       	add	r22, r22
     5b4:	77 1f       	adc	r23, r23
     5b6:	6e 0f       	add	r22, r30
     5b8:	7f 1f       	adc	r23, r31
     5ba:	64 0f       	add	r22, r20
     5bc:	71 1d       	adc	r23, r1
     5be:	60 93 ac 44 	sts	0x44AC, r22	; 0x8044ac <_ZZ9serial_RxhE6msg_ID>
     5c2:	70 93 ad 44 	sts	0x44AD, r23	; 0x8044ad <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
     5c6:	8f 5f       	subi	r24, 0xFF	; 255
     5c8:	80 93 aa 44 	sts	0x44AA, r24	; 0x8044aa <_ZZ9serial_RxhE9field_len>
     5cc:	16 c0       	rjmp	.+44     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	61 50       	subi	r22, 0x01	; 1
     5d2:	71 09       	sbc	r23, r1
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	98 0f       	add	r25, r24
     5d8:	90 93 aa 44 	sts	0x44AA, r25	; 0x8044aa <_ZZ9serial_RxhE9field_len>
     5dc:	34 e1       	ldi	r19, 0x14	; 20
     5de:	36 9f       	mul	r19, r22
     5e0:	f0 01       	movw	r30, r0
     5e2:	37 9f       	mul	r19, r23
     5e4:	f0 0d       	add	r31, r0
     5e6:	11 24       	eor	r1, r1
     5e8:	ce 0f       	add	r28, r30
     5ea:	df 1f       	adc	r29, r31
     5ec:	fe 01       	movw	r30, r28
     5ee:	e8 0f       	add	r30, r24
     5f0:	f1 1d       	adc	r31, r1
     5f2:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
     5f4:	c9 0f       	add	r28, r25
     5f6:	d1 1d       	adc	r29, r1
     5f8:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
     5fa:	80 91 e1 44 	lds	r24, 0x44E1	; 0x8044e1 <_ZZ9serial_RxhE9charIndex>
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	81 33       	cpi	r24, 0x31	; 49
     604:	91 05       	cpc	r25, r1
     606:	0c f0       	brlt	.+2      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     608:	81 e3       	ldi	r24, 0x31	; 49
     60a:	80 93 e1 44 	sts	0x44E1, r24	; 0x8044e1 <_ZZ9serial_RxhE9charIndex>
     60e:	33 c0       	rjmp	.+102    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
     610:	4f 37       	cpi	r20, 0x7F	; 127
     612:	69 f4       	brne	.+26     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
				{
					if(msg_ID <= 0)
     614:	80 91 ac 44 	lds	r24, 0x44AC	; 0x8044ac <_ZZ9serial_RxhE6msg_ID>
     618:	90 91 ad 44 	lds	r25, 0x44AD	; 0x8044ad <_ZZ9serial_RxhE6msg_ID+0x1>
     61c:	18 16       	cp	r1, r24
     61e:	19 06       	cpc	r1, r25
     620:	0c f0       	brlt	.+2      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
					{
						rx_char = '\0';
     622:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
     624:	10 92 ac 44 	sts	0x44AC, r1	; 0x8044ac <_ZZ9serial_RxhE6msg_ID>
     628:	10 92 ad 44 	sts	0x44AD, r1	; 0x8044ad <_ZZ9serial_RxhE6msg_ID+0x1>
     62c:	24 c0       	rjmp	.+72     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
				}
				else if(rx_char == ' ') /* Handle Space */
     62e:	40 32       	cpi	r20, 0x20	; 32
     630:	09 f1       	breq	.+66     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
     632:	10 92 ab 44 	sts	0x44AB, r1	; 0x8044ab <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
     636:	55 27       	eor	r21, r21
     638:	40 93 ac 44 	sts	0x44AC, r20	; 0x8044ac <_ZZ9serial_RxhE6msg_ID>
     63c:	50 93 ad 44 	sts	0x44AD, r21	; 0x8044ad <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	83 30       	cpi	r24, 0x03	; 3
     644:	50 f4       	brcc	.+20     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
					{
						buff->fields[i][0] = '\0';
     646:	de 01       	movw	r26, r28
     648:	34 e1       	ldi	r19, 0x14	; 20
     64a:	83 9f       	mul	r24, r19
     64c:	a0 0d       	add	r26, r0
     64e:	b1 1d       	adc	r27, r1
     650:	11 24       	eor	r1, r1
     652:	13 96       	adiw	r26, 0x03	; 3
     654:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
     656:	8f 5f       	subi	r24, 0xFF	; 255
     658:	f4 cf       	rjmp	.-24     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = true;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	80 93 ae 44 	sts	0x44AE, r24	; 0x8044ae <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
     660:	ef 5f       	subi	r30, 0xFF	; 255
     662:	e0 93 e1 44 	sts	0x44E1, r30	; 0x8044e1 <_ZZ9serial_RxhE9charIndex>
     666:	07 c0       	rjmp	.+14     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	05 c0       	rjmp	.+10     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	03 c0       	rjmp	.+6      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	01 c0       	rjmp	.+2      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
     674:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = true;
					charIndex++;
				}
			}

			if(rx_char)
     676:	22 23       	and	r18, r18
     678:	19 f0       	breq	.+6      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
			{
				sb_echo_char(rx_char);
     67a:	82 2f       	mov	r24, r18
     67c:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <sb_echo_char>
			}
		}
	}	
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	08 95       	ret

00000688 <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
     688:	1f 92       	push	r1
     68a:	0f 92       	push	r0
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	0b b6       	in	r0, 0x3b	; 59
     694:	0f 92       	push	r0
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
     6ae:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     6b2:	81 11       	cpse	r24, r1
     6b4:	2b c0       	rjmp	.+86     	; 0x70c <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     6b6:	80 91 a8 44 	lds	r24, 0x44A8	; 0x8044a8 <_ZZ11__vector_20E4buff>
     6ba:	90 91 a9 44 	lds	r25, 0x44A9	; 0x8044a9 <_ZZ11__vector_20E4buff+0x1>
     6be:	89 2b       	or	r24, r25
     6c0:	31 f4       	brne	.+12     	; 0x6ce <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
     6c2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z18nextFullLBTxBufferv>
     6c6:	80 93 a8 44 	sts	0x44A8, r24	; 0x8044a8 <_ZZ11__vector_20E4buff>
     6ca:	90 93 a9 44 	sts	0x44A9, r25	; 0x8044a9 <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
     6ce:	e0 91 a8 44 	lds	r30, 0x44A8	; 0x8044a8 <_ZZ11__vector_20E4buff>
     6d2:	f0 91 a9 44 	lds	r31, 0x44A9	; 0x8044a9 <_ZZ11__vector_20E4buff+0x1>
     6d6:	80 91 a7 44 	lds	r24, 0x44A7	; 0x8044a7 <_ZZ11__vector_20E9charIndex>
     6da:	df 01       	movw	r26, r30
     6dc:	a8 0f       	add	r26, r24
     6de:	b1 1d       	adc	r27, r1
     6e0:	9c 91       	ld	r25, X
     6e2:	99 23       	and	r25, r25
     6e4:	31 f0       	breq	.+12     	; 0x6f2 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	80 93 a7 44 	sts	0x44A7, r24	; 0x8044a7 <_ZZ11__vector_20E9charIndex>
     6ec:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
     6f0:	0d c0       	rjmp	.+26     	; 0x70c <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
     6f2:	10 92 a7 44 	sts	0x44A7, r1	; 0x8044a7 <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
     6f6:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     6f8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z18nextFullLBTxBufferv>
     6fc:	80 93 a8 44 	sts	0x44A8, r24	; 0x8044a8 <_ZZ11__vector_20E4buff>
     700:	90 93 a9 44 	sts	0x44A9, r25	; 0x8044a9 <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
     704:	89 2b       	or	r24, r25
     706:	11 f4       	brne	.+4      	; 0x70c <__vector_20+0x84>
			{
				linkbus_end_tx();
     708:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
     70c:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     710:	81 11       	cpse	r24, r1
     712:	2b c0       	rjmp	.+86     	; 0x76a <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     714:	80 91 a5 44 	lds	r24, 0x44A5	; 0x8044a5 <_ZZ11__vector_20E4buff_0>
     718:	90 91 a6 44 	lds	r25, 0x44A6	; 0x8044a6 <_ZZ11__vector_20E4buff_0+0x1>
     71c:	89 2b       	or	r24, r25
     71e:	31 f4       	brne	.+12     	; 0x72c <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
     720:	0e 94 66 1d 	call	0x3acc	; 0x3acc <nextFullSBTxBuffer>
     724:	80 93 a5 44 	sts	0x44A5, r24	; 0x8044a5 <_ZZ11__vector_20E4buff_0>
     728:	90 93 a6 44 	sts	0x44A6, r25	; 0x8044a6 <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     72c:	e0 91 a5 44 	lds	r30, 0x44A5	; 0x8044a5 <_ZZ11__vector_20E4buff_0>
     730:	f0 91 a6 44 	lds	r31, 0x44A6	; 0x8044a6 <_ZZ11__vector_20E4buff_0+0x1>
     734:	80 91 a4 44 	lds	r24, 0x44A4	; 0x8044a4 <_ZZ11__vector_20E9charIndex_0>
     738:	df 01       	movw	r26, r30
     73a:	a8 0f       	add	r26, r24
     73c:	b1 1d       	adc	r27, r1
     73e:	9c 91       	ld	r25, X
     740:	99 23       	and	r25, r25
     742:	31 f0       	breq	.+12     	; 0x750 <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	80 93 a4 44 	sts	0x44A4, r24	; 0x8044a4 <_ZZ11__vector_20E9charIndex_0>
     74a:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
     74e:	0d c0       	rjmp	.+26     	; 0x76a <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
     750:	10 92 a4 44 	sts	0x44A4, r1	; 0x8044a4 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
     754:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     756:	0e 94 66 1d 	call	0x3acc	; 0x3acc <nextFullSBTxBuffer>
     75a:	80 93 a5 44 	sts	0x44A5, r24	; 0x8044a5 <_ZZ11__vector_20E4buff_0>
     75e:	90 93 a6 44 	sts	0x44A6, r25	; 0x8044a6 <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
     762:	89 2b       	or	r24, r25
     764:	11 f4       	brne	.+4      	; 0x76a <__vector_20+0xe2>
			{
				serialbus_end_tx();
     766:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <serialbus_end_tx>
			}
		}
	}
}
     76a:	ff 91       	pop	r31
     76c:	ef 91       	pop	r30
     76e:	bf 91       	pop	r27
     770:	af 91       	pop	r26
     772:	9f 91       	pop	r25
     774:	8f 91       	pop	r24
     776:	7f 91       	pop	r23
     778:	6f 91       	pop	r22
     77a:	5f 91       	pop	r21
     77c:	4f 91       	pop	r20
     77e:	3f 91       	pop	r19
     780:	2f 91       	pop	r18
     782:	0f 90       	pop	r0
     784:	0b be       	out	0x3b, r0	; 59
     786:	0f 90       	pop	r0
     788:	0f be       	out	0x3f, r0	; 63
     78a:	0f 90       	pop	r0
     78c:	1f 90       	pop	r1
     78e:	18 95       	reti

00000790 <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
     790:	1f 92       	push	r1
     792:	0f 92       	push	r0
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	0f 92       	push	r0
     798:	11 24       	eor	r1, r1
     79a:	0b b6       	in	r0, 0x3b	; 59
     79c:	0f 92       	push	r0
     79e:	2f 93       	push	r18
     7a0:	3f 93       	push	r19
     7a2:	4f 93       	push	r20
     7a4:	5f 93       	push	r21
     7a6:	6f 93       	push	r22
     7a8:	7f 93       	push	r23
     7aa:	8f 93       	push	r24
     7ac:	9f 93       	push	r25
     7ae:	af 93       	push	r26
     7b0:	bf 93       	push	r27
     7b2:	ef 93       	push	r30
     7b4:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
     7b6:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	59 f5       	brne	.+86     	; 0x814 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     7be:	80 91 a2 44 	lds	r24, 0x44A2	; 0x8044a2 <_ZZ11__vector_56E4buff>
     7c2:	90 91 a3 44 	lds	r25, 0x44A3	; 0x8044a3 <_ZZ11__vector_56E4buff+0x1>
     7c6:	89 2b       	or	r24, r25
     7c8:	31 f4       	brne	.+12     	; 0x7d6 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
     7ca:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z18nextFullLBTxBufferv>
     7ce:	80 93 a2 44 	sts	0x44A2, r24	; 0x8044a2 <_ZZ11__vector_56E4buff>
     7d2:	90 93 a3 44 	sts	0x44A3, r25	; 0x8044a3 <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
     7d6:	e0 91 a2 44 	lds	r30, 0x44A2	; 0x8044a2 <_ZZ11__vector_56E4buff>
     7da:	f0 91 a3 44 	lds	r31, 0x44A3	; 0x8044a3 <_ZZ11__vector_56E4buff+0x1>
     7de:	80 91 a1 44 	lds	r24, 0x44A1	; 0x8044a1 <_ZZ11__vector_56E9charIndex>
     7e2:	df 01       	movw	r26, r30
     7e4:	a8 0f       	add	r26, r24
     7e6:	b1 1d       	adc	r27, r1
     7e8:	9c 91       	ld	r25, X
     7ea:	99 23       	and	r25, r25
     7ec:	31 f0       	breq	.+12     	; 0x7fa <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	80 93 a1 44 	sts	0x44A1, r24	; 0x8044a1 <_ZZ11__vector_56E9charIndex>
     7f4:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
     7f8:	0d c0       	rjmp	.+26     	; 0x814 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
     7fa:	10 92 a1 44 	sts	0x44A1, r1	; 0x8044a1 <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
     7fe:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     800:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z18nextFullLBTxBufferv>
     804:	80 93 a2 44 	sts	0x44A2, r24	; 0x8044a2 <_ZZ11__vector_56E4buff>
     808:	90 93 a3 44 	sts	0x44A3, r25	; 0x8044a3 <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
     80c:	89 2b       	or	r24, r25
     80e:	11 f4       	brne	.+4      	; 0x814 <__vector_56+0x84>
			{
				linkbus_end_tx();
     810:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
     814:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	59 f5       	brne	.+86     	; 0x872 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     81c:	80 91 9f 44 	lds	r24, 0x449F	; 0x80449f <_ZZ11__vector_56E4buff_0>
     820:	90 91 a0 44 	lds	r25, 0x44A0	; 0x8044a0 <_ZZ11__vector_56E4buff_0+0x1>
     824:	89 2b       	or	r24, r25
     826:	31 f4       	brne	.+12     	; 0x834 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
     828:	0e 94 66 1d 	call	0x3acc	; 0x3acc <nextFullSBTxBuffer>
     82c:	80 93 9f 44 	sts	0x449F, r24	; 0x80449f <_ZZ11__vector_56E4buff_0>
     830:	90 93 a0 44 	sts	0x44A0, r25	; 0x8044a0 <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     834:	e0 91 9f 44 	lds	r30, 0x449F	; 0x80449f <_ZZ11__vector_56E4buff_0>
     838:	f0 91 a0 44 	lds	r31, 0x44A0	; 0x8044a0 <_ZZ11__vector_56E4buff_0+0x1>
     83c:	80 91 9e 44 	lds	r24, 0x449E	; 0x80449e <_ZZ11__vector_56E9charIndex_0>
     840:	df 01       	movw	r26, r30
     842:	a8 0f       	add	r26, r24
     844:	b1 1d       	adc	r27, r1
     846:	9c 91       	ld	r25, X
     848:	99 23       	and	r25, r25
     84a:	31 f0       	breq	.+12     	; 0x858 <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
     84c:	8f 5f       	subi	r24, 0xFF	; 255
     84e:	80 93 9e 44 	sts	0x449E, r24	; 0x80449e <_ZZ11__vector_56E9charIndex_0>
     852:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
     856:	0d c0       	rjmp	.+26     	; 0x872 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
     858:	10 92 9e 44 	sts	0x449E, r1	; 0x80449e <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
     85c:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     85e:	0e 94 66 1d 	call	0x3acc	; 0x3acc <nextFullSBTxBuffer>
     862:	80 93 9f 44 	sts	0x449F, r24	; 0x80449f <_ZZ11__vector_56E4buff_0>
     866:	90 93 a0 44 	sts	0x44A0, r25	; 0x8044a0 <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
     86a:	89 2b       	or	r24, r25
     86c:	11 f4       	brne	.+4      	; 0x872 <__vector_56+0xe2>
			{
				serialbus_end_tx();
     86e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <serialbus_end_tx>
			}
		}
	}
}
     872:	ff 91       	pop	r31
     874:	ef 91       	pop	r30
     876:	bf 91       	pop	r27
     878:	af 91       	pop	r26
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	7f 91       	pop	r23
     880:	6f 91       	pop	r22
     882:	5f 91       	pop	r21
     884:	4f 91       	pop	r20
     886:	3f 91       	pop	r19
     888:	2f 91       	pop	r18
     88a:	0f 90       	pop	r0
     88c:	0b be       	out	0x3b, r0	; 59
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     8a2:	80 91 9c 44 	lds	r24, 0x449C	; 0x80449c <_ZZ10linkbus_RxhE4buff>
     8a6:	90 91 9d 44 	lds	r25, 0x449D	; 0x80449d <_ZZ10linkbus_RxhE4buff+0x1>
     8aa:	89 2b       	or	r24, r25
     8ac:	31 f4       	brne	.+12     	; 0x8ba <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
     8ae:	0e 94 ce 1a 	call	0x359c	; 0x359c <_Z19nextEmptyLBRxBufferv>
     8b2:	80 93 9c 44 	sts	0x449C, r24	; 0x80449c <_ZZ10linkbus_RxhE4buff>
     8b6:	90 93 9d 44 	sts	0x449D, r25	; 0x80449d <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
     8ba:	c0 91 9c 44 	lds	r28, 0x449C	; 0x80449c <_ZZ10linkbus_RxhE4buff>
     8be:	d0 91 9d 44 	lds	r29, 0x449D	; 0x80449d <_ZZ10linkbus_RxhE4buff+0x1>
     8c2:	20 97       	sbiw	r28, 0x00	; 0
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <_Z10linkbus_Rxh+0x30>
     8c6:	e3 c0       	rjmp	.+454    	; 0xa8e <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
     8c8:	81 2f       	mov	r24, r17
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
     8d0:	84 32       	cpi	r24, 0x24	; 36
     8d2:	11 f0       	breq	.+4      	; 0x8d8 <_Z10linkbus_Rxh+0x40>
     8d4:	81 32       	cpi	r24, 0x21	; 33
     8d6:	49 f5       	brne	.+82     	; 0x92a <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
     8d8:	10 92 9b 44 	sts	0x449B, r1	; 0x80449b <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
     8dc:	81 32       	cpi	r24, 0x21	; 33
     8de:	11 f4       	brne	.+4      	; 0x8e4 <_Z10linkbus_Rxh+0x4c>
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <_Z10linkbus_Rxh+0x4e>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	88 83       	st	Y, r24
			field_len = 0;
     8e8:	10 92 9a 44 	sts	0x449A, r1	; 0x80449a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
     8ec:	10 92 96 44 	sts	0x4496, r1	; 0x804496 <_ZZ10linkbus_RxhE10tempMsg_ID>
     8f0:	10 92 97 44 	sts	0x4497, r1	; 0x804497 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     8f4:	10 92 98 44 	sts	0x4498, r1	; 0x804498 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     8f8:	10 92 99 44 	sts	0x4499, r1	; 0x804499 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = true;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 95 44 	sts	0x4495, r24	; 0x804495 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     902:	10 92 94 44 	sts	0x4494, r1	; 0x804494 <_ZZ10linkbus_RxhE11field_index>
     906:	80 91 94 44 	lds	r24, 0x4494	; 0x804494 <_ZZ10linkbus_RxhE11field_index>
     90a:	83 30       	cpi	r24, 0x03	; 3
     90c:	58 f4       	brcc	.+22     	; 0x924 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
     90e:	fe 01       	movw	r30, r28
     910:	05 e1       	ldi	r16, 0x15	; 21
     912:	80 9f       	mul	r24, r16
     914:	e0 0d       	add	r30, r0
     916:	f1 1d       	adc	r31, r1
     918:	11 24       	eor	r1, r1
     91a:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = true;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	80 93 94 44 	sts	0x4494, r24	; 0x804494 <_ZZ10linkbus_RxhE11field_index>
     922:	f1 cf       	rjmp	.-30     	; 0x906 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
     924:	10 92 94 44 	sts	0x4494, r1	; 0x804494 <_ZZ10linkbus_RxhE11field_index>
     928:	a7 c0       	rjmp	.+334    	; 0xa78 <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
     92a:	90 91 95 44 	lds	r25, 0x4495	; 0x804495 <_ZZ10linkbus_RxhE13receiving_msg>
     92e:	99 23       	and	r25, r25
     930:	09 f4       	brne	.+2      	; 0x934 <_Z10linkbus_Rxh+0x9c>
     932:	8b c0       	rjmp	.+278    	; 0xa4a <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
     934:	8c 32       	cpi	r24, 0x2C	; 44
     936:	29 f0       	breq	.+10     	; 0x942 <_Z10linkbus_Rxh+0xaa>
     938:	8b 33       	cpi	r24, 0x3B	; 59
     93a:	19 f0       	breq	.+6      	; 0x942 <_Z10linkbus_Rxh+0xaa>
     93c:	8f 33       	cpi	r24, 0x3F	; 63
     93e:	09 f0       	breq	.+2      	; 0x942 <_Z10linkbus_Rxh+0xaa>
     940:	42 c0       	rjmp	.+132    	; 0x9c6 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
     942:	90 91 94 44 	lds	r25, 0x4494	; 0x804494 <_ZZ10linkbus_RxhE11field_index>
     946:	99 23       	and	r25, r25
     948:	89 f0       	breq	.+34     	; 0x96c <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
     94a:	29 2f       	mov	r18, r25
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	31 09       	sbc	r19, r1
     952:	40 91 9a 44 	lds	r20, 0x449A	; 0x80449a <_ZZ10linkbus_RxhE9field_len>
     956:	55 e1       	ldi	r21, 0x15	; 21
     958:	52 9f       	mul	r21, r18
     95a:	f0 01       	movw	r30, r0
     95c:	53 9f       	mul	r21, r19
     95e:	f0 0d       	add	r31, r0
     960:	11 24       	eor	r1, r1
     962:	ec 0f       	add	r30, r28
     964:	fd 1f       	adc	r31, r29
     966:	e4 0f       	add	r30, r20
     968:	f1 1d       	adc	r31, r1
     96a:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
     96c:	9f 5f       	subi	r25, 0xFF	; 255
     96e:	90 93 94 44 	sts	0x4494, r25	; 0x804494 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
     972:	10 92 9a 44 	sts	0x449A, r1	; 0x80449a <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
     976:	8b 33       	cpi	r24, 0x3B	; 59
     978:	69 f4       	brne	.+26     	; 0x994 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     97a:	80 91 9b 44 	lds	r24, 0x449B	; 0x80449b <_ZZ10linkbus_RxhE9charIndex>
     97e:	84 30       	cpi	r24, 0x04	; 4
     980:	30 f0       	brcs	.+12     	; 0x98e <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     982:	80 91 96 44 	lds	r24, 0x4496	; 0x804496 <_ZZ10linkbus_RxhE10tempMsg_ID>
     986:	90 91 97 44 	lds	r25, 0x4497	; 0x804497 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     98a:	89 83       	std	Y+1, r24	; 0x01
     98c:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
     98e:	10 92 95 44 	sts	0x4495, r1	; 0x804495 <_ZZ10linkbus_RxhE13receiving_msg>
     992:	10 c0       	rjmp	.+32     	; 0x9b4 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
     994:	8f 33       	cpi	r24, 0x3F	; 63
     996:	71 f4       	brne	.+28     	; 0x9b4 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
     99c:	80 91 9b 44 	lds	r24, 0x449B	; 0x80449b <_ZZ10linkbus_RxhE9charIndex>
     9a0:	83 30       	cpi	r24, 0x03	; 3
     9a2:	30 f0       	brcs	.+12     	; 0x9b0 <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     9a4:	80 91 96 44 	lds	r24, 0x4496	; 0x804496 <_ZZ10linkbus_RxhE10tempMsg_ID>
     9a8:	90 91 97 44 	lds	r25, 0x4497	; 0x804497 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     9ac:	89 83       	std	Y+1, r24	; 0x01
     9ae:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
     9b0:	10 92 95 44 	sts	0x4495, r1	; 0x804495 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
     9b4:	80 91 95 44 	lds	r24, 0x4495	; 0x804495 <_ZZ10linkbus_RxhE13receiving_msg>
     9b8:	81 11       	cpse	r24, r1
     9ba:	5e c0       	rjmp	.+188    	; 0xa78 <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
     9bc:	10 92 9c 44 	sts	0x449C, r1	; 0x80449c <_ZZ10linkbus_RxhE4buff>
     9c0:	10 92 9d 44 	sts	0x449D, r1	; 0x80449d <_ZZ10linkbus_RxhE4buff+0x1>
     9c4:	59 c0       	rjmp	.+178    	; 0xa78 <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
     9c6:	20 91 94 44 	lds	r18, 0x4494	; 0x804494 <_ZZ10linkbus_RxhE11field_index>
     9ca:	21 11       	cpse	r18, r1
     9cc:	29 c0       	rjmp	.+82     	; 0xa20 <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
     9ce:	40 91 96 44 	lds	r20, 0x4496	; 0x804496 <_ZZ10linkbus_RxhE10tempMsg_ID>
     9d2:	50 91 97 44 	lds	r21, 0x4497	; 0x804497 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     9d6:	60 91 98 44 	lds	r22, 0x4498	; 0x804498 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     9da:	70 91 99 44 	lds	r23, 0x4499	; 0x804499 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     9de:	44 0f       	add	r20, r20
     9e0:	55 1f       	adc	r21, r21
     9e2:	66 1f       	adc	r22, r22
     9e4:	77 1f       	adc	r23, r23
     9e6:	8a 01       	movw	r16, r20
     9e8:	9b 01       	movw	r18, r22
     9ea:	00 0f       	add	r16, r16
     9ec:	11 1f       	adc	r17, r17
     9ee:	22 1f       	adc	r18, r18
     9f0:	33 1f       	adc	r19, r19
     9f2:	00 0f       	add	r16, r16
     9f4:	11 1f       	adc	r17, r17
     9f6:	22 1f       	adc	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	40 0f       	add	r20, r16
     9fc:	51 1f       	adc	r21, r17
     9fe:	62 1f       	adc	r22, r18
     a00:	73 1f       	adc	r23, r19
     a02:	8a 01       	movw	r16, r20
     a04:	9b 01       	movw	r18, r22
     a06:	08 0f       	add	r16, r24
     a08:	11 1d       	adc	r17, r1
     a0a:	21 1d       	adc	r18, r1
     a0c:	31 1d       	adc	r19, r1
     a0e:	00 93 96 44 	sts	0x4496, r16	; 0x804496 <_ZZ10linkbus_RxhE10tempMsg_ID>
     a12:	10 93 97 44 	sts	0x4497, r17	; 0x804497 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     a16:	20 93 98 44 	sts	0x4498, r18	; 0x804498 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     a1a:	30 93 99 44 	sts	0x4499, r19	; 0x804499 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     a1e:	2c c0       	rjmp	.+88     	; 0xa78 <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	21 50       	subi	r18, 0x01	; 1
     a24:	31 09       	sbc	r19, r1
     a26:	90 91 9a 44 	lds	r25, 0x449A	; 0x80449a <_ZZ10linkbus_RxhE9field_len>
     a2a:	41 e0       	ldi	r20, 0x01	; 1
     a2c:	49 0f       	add	r20, r25
     a2e:	40 93 9a 44 	sts	0x449A, r20	; 0x80449a <_ZZ10linkbus_RxhE9field_len>
     a32:	65 e1       	ldi	r22, 0x15	; 21
     a34:	62 9f       	mul	r22, r18
     a36:	a0 01       	movw	r20, r0
     a38:	63 9f       	mul	r22, r19
     a3a:	50 0d       	add	r21, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	c4 0f       	add	r28, r20
     a40:	d5 1f       	adc	r29, r21
     a42:	c9 0f       	add	r28, r25
     a44:	d1 1d       	adc	r29, r1
     a46:	8b 83       	std	Y+3, r24	; 0x03
     a48:	17 c0       	rjmp	.+46     	; 0xa78 <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
     a4a:	8d 30       	cpi	r24, 0x0D	; 13
     a4c:	a9 f4       	brne	.+42     	; 0xa78 <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
     a4e:	19 82       	std	Y+1, r1	; 0x01
     a50:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
     a52:	82 e3       	ldi	r24, 0x32	; 50
     a54:	80 93 9b 44 	sts	0x449B, r24	; 0x80449b <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
     a58:	10 92 9a 44 	sts	0x449A, r1	; 0x80449a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
     a5c:	10 92 96 44 	sts	0x4496, r1	; 0x804496 <_ZZ10linkbus_RxhE10tempMsg_ID>
     a60:	10 92 97 44 	sts	0x4497, r1	; 0x804497 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     a64:	10 92 98 44 	sts	0x4498, r1	; 0x804498 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     a68:	10 92 99 44 	sts	0x4499, r1	; 0x804499 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
     a6c:	10 92 94 44 	sts	0x4494, r1	; 0x804494 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
     a70:	10 92 9c 44 	sts	0x449C, r1	; 0x80449c <_ZZ10linkbus_RxhE4buff>
     a74:	10 92 9d 44 	sts	0x449D, r1	; 0x80449d <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
     a78:	80 91 9b 44 	lds	r24, 0x449B	; 0x80449b <_ZZ10linkbus_RxhE9charIndex>
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	80 93 9b 44 	sts	0x449B, r24	; 0x80449b <_ZZ10linkbus_RxhE9charIndex>
     a82:	82 33       	cpi	r24, 0x32	; 50
     a84:	20 f0       	brcs	.+8      	; 0xa8e <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = false;
     a86:	10 92 95 44 	sts	0x4495, r1	; 0x804495 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
     a8a:	10 92 9b 44 	sts	0x449B, r1	; 0x80449b <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	0b b6       	in	r0, 0x3b	; 59
     aa4:	0f 92       	push	r0
     aa6:	2f 93       	push	r18
     aa8:	3f 93       	push	r19
     aaa:	4f 93       	push	r20
     aac:	5f 93       	push	r21
     aae:	6f 93       	push	r22
     ab0:	7f 93       	push	r23
     ab2:	8f 93       	push	r24
     ab4:	9f 93       	push	r25
     ab6:	af 93       	push	r26
     ab8:	bf 93       	push	r27
     aba:	cf 93       	push	r28
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
     ac0:	0e 94 c0 28 	call	0x5180	; 0x5180 <USART0_get_data>
     ac4:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
     ac6:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     aca:	81 11       	cpse	r24, r1
     acc:	03 c0       	rjmp	.+6      	; 0xad4 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
     ace:	8c 2f       	mov	r24, r28
     ad0:	0e 94 4c 04 	call	0x898	; 0x898 <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
     ad4:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     ad8:	81 11       	cpse	r24, r1
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
     adc:	8c 2f       	mov	r24, r28
     ade:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z9serial_Rxh>
	}
}
     ae2:	ff 91       	pop	r31
     ae4:	ef 91       	pop	r30
     ae6:	cf 91       	pop	r28
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <__vector_55>:

ISR(USART4_RXC_vect)
{
     b0a:	1f 92       	push	r1
     b0c:	0f 92       	push	r0
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	0f 92       	push	r0
     b12:	11 24       	eor	r1, r1
     b14:	0b b6       	in	r0, 0x3b	; 59
     b16:	0f 92       	push	r0
     b18:	2f 93       	push	r18
     b1a:	3f 93       	push	r19
     b1c:	4f 93       	push	r20
     b1e:	5f 93       	push	r21
     b20:	6f 93       	push	r22
     b22:	7f 93       	push	r23
     b24:	8f 93       	push	r24
     b26:	9f 93       	push	r25
     b28:	af 93       	push	r26
     b2a:	bf 93       	push	r27
     b2c:	cf 93       	push	r28
     b2e:	ef 93       	push	r30
     b30:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
     b32:	0e 94 1c 29 	call	0x5238	; 0x5238 <USART4_get_data>
     b36:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
     b38:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     b3c:	84 30       	cpi	r24, 0x04	; 4
     b3e:	19 f4       	brne	.+6      	; 0xb46 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
     b40:	8c 2f       	mov	r24, r28
     b42:	0e 94 4c 04 	call	0x898	; 0x898 <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
     b46:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	19 f4       	brne	.+6      	; 0xb54 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
     b4e:	8c 2f       	mov	r24, r28
     b50:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z9serial_Rxh>
	}
}
     b54:	ff 91       	pop	r31
     b56:	ef 91       	pop	r30
     b58:	cf 91       	pop	r28
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	0f 90       	pop	r0
     b70:	0b be       	out	0x3b, r0	; 59
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	0b b6       	in	r0, 0x3b	; 59
     b88:	0f 92       	push	r0
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	cf 93       	push	r28
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
     ba4:	0e 94 ee 28 	call	0x51dc	; 0x51dc <USART1_get_data>
     ba8:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
     baa:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	19 f4       	brne	.+6      	; 0xbb8 <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
     bb2:	8c 2f       	mov	r24, r28
     bb4:	0e 94 4c 04 	call	0x898	; 0x898 <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
     bb8:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	19 f4       	brne	.+6      	; 0xbc6 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
     bc0:	8c 2f       	mov	r24, r28
     bc2:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z9serial_Rxh>
	}
}
     bc6:	ff 91       	pop	r31
     bc8:	ef 91       	pop	r30
     bca:	cf 91       	pop	r28
     bcc:	bf 91       	pop	r27
     bce:	af 91       	pop	r26
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	7f 91       	pop	r23
     bd6:	6f 91       	pop	r22
     bd8:	5f 91       	pop	r21
     bda:	4f 91       	pop	r20
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	0f 90       	pop	r0
     be2:	0b be       	out	0x3b, r0	; 59
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	0b b6       	in	r0, 0x3b	; 59
     bfa:	0f 92       	push	r0
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	4f 93       	push	r20
     c02:	5f 93       	push	r21
     c04:	6f 93       	push	r22
     c06:	7f 93       	push	r23
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	af 93       	push	r26
     c0e:	bf 93       	push	r27
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
     c14:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	59 f5       	brne	.+86     	; 0xc72 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     c1c:	80 91 92 44 	lds	r24, 0x4492	; 0x804492 <_ZZ11__vector_32E4buff>
     c20:	90 91 93 44 	lds	r25, 0x4493	; 0x804493 <_ZZ11__vector_32E4buff+0x1>
     c24:	89 2b       	or	r24, r25
     c26:	31 f4       	brne	.+12     	; 0xc34 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
     c28:	0e 94 66 1d 	call	0x3acc	; 0x3acc <nextFullSBTxBuffer>
     c2c:	80 93 92 44 	sts	0x4492, r24	; 0x804492 <_ZZ11__vector_32E4buff>
     c30:	90 93 93 44 	sts	0x4493, r25	; 0x804493 <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
     c34:	e0 91 92 44 	lds	r30, 0x4492	; 0x804492 <_ZZ11__vector_32E4buff>
     c38:	f0 91 93 44 	lds	r31, 0x4493	; 0x804493 <_ZZ11__vector_32E4buff+0x1>
     c3c:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ11__vector_32E9charIndex>
     c40:	df 01       	movw	r26, r30
     c42:	a8 0f       	add	r26, r24
     c44:	b1 1d       	adc	r27, r1
     c46:	9c 91       	ld	r25, X
     c48:	99 23       	and	r25, r25
     c4a:	31 f0       	breq	.+12     	; 0xc58 <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
     c4c:	8f 5f       	subi	r24, 0xFF	; 255
     c4e:	80 93 91 44 	sts	0x4491, r24	; 0x804491 <_ZZ11__vector_32E9charIndex>
     c52:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     c56:	0d c0       	rjmp	.+26     	; 0xc72 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
     c58:	10 92 91 44 	sts	0x4491, r1	; 0x804491 <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
     c5c:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     c5e:	0e 94 66 1d 	call	0x3acc	; 0x3acc <nextFullSBTxBuffer>
     c62:	80 93 92 44 	sts	0x4492, r24	; 0x804492 <_ZZ11__vector_32E4buff>
     c66:	90 93 93 44 	sts	0x4493, r25	; 0x804493 <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
     c6a:	89 2b       	or	r24, r25
     c6c:	11 f4       	brne	.+4      	; 0xc72 <__vector_32+0x84>
			{
				serialbus_end_tx();
     c6e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
     c72:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	59 f5       	brne	.+86     	; 0xcd0 <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     c7a:	80 91 8f 44 	lds	r24, 0x448F	; 0x80448f <_ZZ11__vector_32E4buff_0>
     c7e:	90 91 90 44 	lds	r25, 0x4490	; 0x804490 <_ZZ11__vector_32E4buff_0+0x1>
     c82:	89 2b       	or	r24, r25
     c84:	31 f4       	brne	.+12     	; 0xc92 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
     c86:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z18nextFullLBTxBufferv>
     c8a:	80 93 8f 44 	sts	0x448F, r24	; 0x80448f <_ZZ11__vector_32E4buff_0>
     c8e:	90 93 90 44 	sts	0x4490, r25	; 0x804490 <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     c92:	e0 91 8f 44 	lds	r30, 0x448F	; 0x80448f <_ZZ11__vector_32E4buff_0>
     c96:	f0 91 90 44 	lds	r31, 0x4490	; 0x804490 <_ZZ11__vector_32E4buff_0+0x1>
     c9a:	80 91 8e 44 	lds	r24, 0x448E	; 0x80448e <__data_end>
     c9e:	df 01       	movw	r26, r30
     ca0:	a8 0f       	add	r26, r24
     ca2:	b1 1d       	adc	r27, r1
     ca4:	9c 91       	ld	r25, X
     ca6:	99 23       	and	r25, r25
     ca8:	31 f0       	breq	.+12     	; 0xcb6 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 8e 44 	sts	0x448E, r24	; 0x80448e <__data_end>
     cb0:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
     cb6:	10 92 8e 44 	sts	0x448E, r1	; 0x80448e <__data_end>
			(*buff)[0] = '\0';
     cba:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     cbc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z18nextFullLBTxBufferv>
     cc0:	80 93 8f 44 	sts	0x448F, r24	; 0x80448f <_ZZ11__vector_32E4buff_0>
     cc4:	90 93 90 44 	sts	0x4490, r25	; 0x804490 <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
     cc8:	89 2b       	or	r24, r25
     cca:	11 f4       	brne	.+4      	; 0xcd0 <__vector_32+0xe2>
			{
				linkbus_end_tx();
     ccc:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_Z14linkbus_end_txv>
			}
		}
	}
}
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	7f 91       	pop	r23
     cde:	6f 91       	pop	r22
     ce0:	5f 91       	pop	r21
     ce2:	4f 91       	pop	r20
     ce4:	3f 91       	pop	r19
     ce6:	2f 91       	pop	r18
     ce8:	0f 90       	pop	r0
     cea:	0b be       	out	0x3b, r0	; 59
     cec:	0f 90       	pop	r0
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	0f 90       	pop	r0
     cf2:	1f 90       	pop	r1
     cf4:	18 95       	reti

00000cf6 <__vector_41>:
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	0b b6       	in	r0, 0x3b	; 59
     d02:	0f 92       	push	r0
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	25 97       	sbiw	r28, 0x05	; 5
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     d32:	80 ff       	sbrs	r24, 0
     d34:	a9 c3       	rjmp	.+1874   	; 0x1488 <__vector_41+0x792>
     d36:	80 91 70 45 	lds	r24, 0x4570	; 0x804570 <_ZZ11__vector_41E3cnt>
     d3a:	90 91 71 45 	lds	r25, 0x4571	; 0x804571 <_ZZ11__vector_41E3cnt+0x1>
     d3e:	9c 01       	movw	r18, r24
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	20 93 70 45 	sts	0x4570, r18	; 0x804570 <_ZZ11__vector_41E3cnt>
     d48:	30 93 71 45 	sts	0x4571, r19	; 0x804571 <_ZZ11__vector_41E3cnt+0x1>
     d4c:	8b 32       	cpi	r24, 0x2B	; 43
     d4e:	91 40       	sbci	r25, 0x01	; 1
     d50:	09 f0       	breq	.+2      	; 0xd54 <__vector_41+0x5e>
     d52:	97 c3       	rjmp	.+1838   	; 0x1482 <__vector_41+0x78c>
     d54:	10 92 70 45 	sts	0x4570, r1	; 0x804570 <_ZZ11__vector_41E3cnt>
     d58:	10 92 71 45 	sts	0x4571, r1	; 0x804571 <_ZZ11__vector_41E3cnt+0x1>
     d5c:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
     d60:	81 11       	cpse	r24, r1
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <__vector_41+0x74>
     d64:	8a b1       	in	r24, 0x0a	; 10
     d66:	80 64       	ori	r24, 0x40	; 64
     d68:	8a b9       	out	0x0a, r24	; 10
     d6a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_Z18antennaIsConnectedv>
     d6e:	81 11       	cpse	r24, r1
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <__vector_41+0x90>
     d72:	90 91 1b 45 	lds	r25, 0x451B	; 0x80451b <g_antenna_connect_state>
     d76:	91 30       	cpi	r25, 0x01	; 1
     d78:	19 f1       	breq	.+70     	; 0xdc0 <__vector_41+0xca>
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	90 93 1b 45 	sts	0x451B, r25	; 0x80451b <g_antenna_connect_state>
     d80:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
     d84:	1d c0       	rjmp	.+58     	; 0xdc0 <__vector_41+0xca>
     d86:	90 91 1b 45 	lds	r25, 0x451B	; 0x80451b <g_antenna_connect_state>
     d8a:	91 30       	cpi	r25, 0x01	; 1
     d8c:	c9 f4       	brne	.+50     	; 0xdc0 <__vector_41+0xca>
     d8e:	90 91 72 45 	lds	r25, 0x4572	; 0x804572 <_ZZ11__vector_41E26lastAntennaConnectionState>
     d92:	89 13       	cpse	r24, r25
     d94:	12 c0       	rjmp	.+36     	; 0xdba <__vector_41+0xc4>
     d96:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
     d9a:	99 23       	and	r25, r25
     d9c:	89 f0       	breq	.+34     	; 0xdc0 <__vector_41+0xca>
     d9e:	91 50       	subi	r25, 0x01	; 1
     da0:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
     da4:	91 11       	cpse	r25, r1
     da6:	0c c0       	rjmp	.+24     	; 0xdc0 <__vector_41+0xca>
     da8:	10 92 1b 45 	sts	0x451B, r1	; 0x80451b <g_antenna_connect_state>
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <__vector_41+0xca>
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
     dc0:	80 93 72 45 	sts	0x4572, r24	; 0x804572 <_ZZ11__vector_41E26lastAntennaConnectionState>
     dc4:	0e 94 84 01 	call	0x308	; 0x308 <system_tick>
     dc8:	10 91 61 45 	lds	r17, 0x4561	; 0x804561 <_ZL10g_sleeping>
     dcc:	11 23       	and	r17, r17
     dce:	a9 f1       	breq	.+106    	; 0xe3a <__vector_41+0x144>
     dd0:	80 91 62 45 	lds	r24, 0x4562	; 0x804562 <_ZL23g_seconds_left_to_sleep>
     dd4:	90 91 63 45 	lds	r25, 0x4563	; 0x804563 <_ZL23g_seconds_left_to_sleep+0x1>
     dd8:	a0 91 64 45 	lds	r26, 0x4564	; 0x804564 <_ZL23g_seconds_left_to_sleep+0x2>
     ddc:	b0 91 65 45 	lds	r27, 0x4565	; 0x804565 <_ZL23g_seconds_left_to_sleep+0x3>
     de0:	89 2b       	or	r24, r25
     de2:	8a 2b       	or	r24, r26
     de4:	8b 2b       	or	r24, r27
     de6:	99 f0       	breq	.+38     	; 0xe0e <__vector_41+0x118>
     de8:	80 91 62 45 	lds	r24, 0x4562	; 0x804562 <_ZL23g_seconds_left_to_sleep>
     dec:	90 91 63 45 	lds	r25, 0x4563	; 0x804563 <_ZL23g_seconds_left_to_sleep+0x1>
     df0:	a0 91 64 45 	lds	r26, 0x4564	; 0x804564 <_ZL23g_seconds_left_to_sleep+0x2>
     df4:	b0 91 65 45 	lds	r27, 0x4565	; 0x804565 <_ZL23g_seconds_left_to_sleep+0x3>
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	a1 09       	sbc	r26, r1
     dfc:	b1 09       	sbc	r27, r1
     dfe:	80 93 62 45 	sts	0x4562, r24	; 0x804562 <_ZL23g_seconds_left_to_sleep>
     e02:	90 93 63 45 	sts	0x4563, r25	; 0x804563 <_ZL23g_seconds_left_to_sleep+0x1>
     e06:	a0 93 64 45 	sts	0x4564, r26	; 0x804564 <_ZL23g_seconds_left_to_sleep+0x2>
     e0a:	b0 93 65 45 	sts	0x4565, r27	; 0x804565 <_ZL23g_seconds_left_to_sleep+0x3>
     e0e:	80 91 62 45 	lds	r24, 0x4562	; 0x804562 <_ZL23g_seconds_left_to_sleep>
     e12:	90 91 63 45 	lds	r25, 0x4563	; 0x804563 <_ZL23g_seconds_left_to_sleep+0x1>
     e16:	a0 91 64 45 	lds	r26, 0x4564	; 0x804564 <_ZL23g_seconds_left_to_sleep+0x2>
     e1a:	b0 91 65 45 	lds	r27, 0x4565	; 0x804565 <_ZL23g_seconds_left_to_sleep+0x3>
     e1e:	89 2b       	or	r24, r25
     e20:	8a 2b       	or	r24, r26
     e22:	8b 2b       	or	r24, r27
     e24:	11 f0       	breq	.+4      	; 0xe2a <__vector_41+0x134>
     e26:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
     e2a:	11 23       	and	r17, r17
     e2c:	09 f4       	brne	.+2      	; 0xe30 <__vector_41+0x13a>
     e2e:	29 c3       	rjmp	.+1618   	; 0x1482 <__vector_41+0x78c>
     e30:	10 92 60 45 	sts	0x4560, r1	; 0x804560 <_ZL13g_go_to_sleep>
     e34:	10 92 61 45 	sts	0x4561, r1	; 0x804561 <_ZL10g_sleeping>
     e38:	24 c3       	rjmp	.+1608   	; 0x1482 <__vector_41+0x78c>
     e3a:	19 82       	std	Y+1, r1	; 0x01
     e3c:	1a 82       	std	Y+2, r1	; 0x02
     e3e:	1b 82       	std	Y+3, r1	; 0x03
     e40:	1c 82       	std	Y+4, r1	; 0x04
     e42:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_update_timeout_seconds>
     e46:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_update_timeout_seconds+0x1>
     e4a:	89 2b       	or	r24, r25
     e4c:	49 f0       	breq	.+18     	; 0xe60 <__vector_41+0x16a>
     e4e:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_update_timeout_seconds>
     e52:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_update_timeout_seconds+0x1>
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_update_timeout_seconds>
     e5c:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_update_timeout_seconds+0x1>
     e60:	80 91 5d 45 	lds	r24, 0x455D	; 0x80455d <g_event_commenced>
     e64:	88 23       	and	r24, r24
     e66:	09 f4       	brne	.+2      	; 0xe6a <__vector_41+0x174>
     e68:	5b c0       	rjmp	.+182    	; 0xf20 <__vector_41+0x22a>
     e6a:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_use_rtc_to_time_event>
     e6e:	88 23       	and	r24, r24
     e70:	b1 f0       	breq	.+44     	; 0xe9e <__vector_41+0x1a8>
     e72:	40 91 58 45 	lds	r20, 0x4558	; 0x804558 <g_event_finish_epoch>
     e76:	50 91 59 45 	lds	r21, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
     e7a:	60 91 5a 45 	lds	r22, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
     e7e:	70 91 5b 45 	lds	r23, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
     e82:	45 2b       	or	r20, r21
     e84:	46 2b       	or	r20, r22
     e86:	47 2b       	or	r20, r23
     e88:	61 f0       	breq	.+24     	; 0xea2 <__vector_41+0x1ac>
     e8a:	90 91 5e 45 	lds	r25, 0x455E	; 0x80455e <g_check_for_next_event>
     e8e:	91 11       	cpse	r25, r1
     e90:	0a c0       	rjmp	.+20     	; 0xea6 <__vector_41+0x1b0>
     e92:	90 91 24 45 	lds	r25, 0x4524	; 0x804524 <_ZL20g_shutting_down_wifi>
     e96:	99 23       	and	r25, r25
     e98:	39 f0       	breq	.+14     	; 0xea8 <__vector_41+0x1b2>
     e9a:	81 2f       	mov	r24, r17
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <__vector_41+0x1b2>
     e9e:	81 2f       	mov	r24, r17
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <__vector_41+0x1b2>
     ea2:	81 2f       	mov	r24, r17
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <__vector_41+0x1b2>
     ea6:	81 2f       	mov	r24, r17
     ea8:	88 23       	and	r24, r24
     eaa:	d1 f1       	breq	.+116    	; 0xf20 <__vector_41+0x22a>
     eac:	ce 01       	movw	r24, r28
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
     eb4:	49 81       	ldd	r20, Y+1	; 0x01
     eb6:	5a 81       	ldd	r21, Y+2	; 0x02
     eb8:	6b 81       	ldd	r22, Y+3	; 0x03
     eba:	7c 81       	ldd	r23, Y+4	; 0x04
     ebc:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
     ec0:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
     ec4:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
     ec8:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
     ecc:	48 17       	cp	r20, r24
     ece:	59 07       	cpc	r21, r25
     ed0:	6a 07       	cpc	r22, r26
     ed2:	7b 07       	cpc	r23, r27
     ed4:	28 f1       	brcs	.+74     	; 0xf20 <__vector_41+0x22a>
     ed6:	8c ef       	ldi	r24, 0xFC	; 252
     ed8:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
     edc:	10 92 1c 45 	sts	0x451C, r1	; 0x80451c <_ZL12g_on_the_air>
     ee0:	10 92 1d 45 	sts	0x451D, r1	; 0x80451d <_ZL12g_on_the_air+0x1>
     ee4:	10 92 1e 45 	sts	0x451E, r1	; 0x80451e <_ZL12g_on_the_air+0x2>
     ee8:	10 92 1f 45 	sts	0x451F, r1	; 0x80451f <_ZL12g_on_the_air+0x3>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <_Z14keyTransmitterb>
     ef2:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <g_event_enabled>
     ef6:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <g_event_commenced>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 5e 45 	sts	0x455E, r24	; 0x80455e <g_check_for_next_event>
     f00:	8a e5       	ldi	r24, 0x5A	; 90
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_update_timeout_seconds>
     f08:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_update_timeout_seconds+0x1>
     f0c:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
     f10:	88 23       	and	r24, r24
     f12:	19 f0       	breq	.+6      	; 0xf1a <__vector_41+0x224>
     f14:	8c e3       	ldi	r24, 0x3C	; 60
     f16:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
     f1a:	89 b1       	in	r24, 0x09	; 9
     f1c:	80 64       	ori	r24, 0x40	; 64
     f1e:	89 b9       	out	0x09, r24	; 9
     f20:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
     f24:	88 23       	and	r24, r24
     f26:	09 f4       	brne	.+2      	; 0xf2a <__vector_41+0x234>
     f28:	3a c2       	rjmp	.+1140   	; 0x139e <__vector_41+0x6a8>
     f2a:	00 91 5d 45 	lds	r16, 0x455D	; 0x80455d <g_event_commenced>
     f2e:	00 23       	and	r16, r16
     f30:	09 f4       	brne	.+2      	; 0xf34 <__vector_41+0x23e>
     f32:	a5 c1       	rjmp	.+842    	; 0x127e <__vector_41+0x588>
     f34:	80 91 20 45 	lds	r24, 0x4520	; 0x804520 <_ZL26g_sendID_seconds_countdown>
     f38:	90 91 21 45 	lds	r25, 0x4521	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
     f3c:	89 2b       	or	r24, r25
     f3e:	49 f0       	breq	.+18     	; 0xf52 <__vector_41+0x25c>
     f40:	80 91 20 45 	lds	r24, 0x4520	; 0x804520 <_ZL26g_sendID_seconds_countdown>
     f44:	90 91 21 45 	lds	r25, 0x4521	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
     f4e:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
     f52:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
     f56:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
     f5a:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
     f5e:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
     f62:	89 2b       	or	r24, r25
     f64:	8a 2b       	or	r24, r26
     f66:	8b 2b       	or	r24, r27
     f68:	09 f4       	brne	.+2      	; 0xf6c <__vector_41+0x276>
     f6a:	19 c2       	rjmp	.+1074   	; 0x139e <__vector_41+0x6a8>
     f6c:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
     f70:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
     f74:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
     f78:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
     f7c:	18 16       	cp	r1, r24
     f7e:	19 06       	cpc	r1, r25
     f80:	1a 06       	cpc	r1, r26
     f82:	1b 06       	cpc	r1, r27
     f84:	0c f0       	brlt	.+2      	; 0xf88 <__vector_41+0x292>
     f86:	29 c1       	rjmp	.+594    	; 0x11da <__vector_41+0x4e4>
     f88:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
     f8c:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
     f90:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
     f94:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	a1 09       	sbc	r26, r1
     f9c:	b1 09       	sbc	r27, r1
     f9e:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
     fa2:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
     fa6:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
     faa:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
     fae:	80 91 20 45 	lds	r24, 0x4520	; 0x804520 <_ZL26g_sendID_seconds_countdown>
     fb2:	90 91 21 45 	lds	r25, 0x4521	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
     fb6:	89 2b       	or	r24, r25
     fb8:	41 f4       	brne	.+16     	; 0xfca <__vector_41+0x2d4>
     fba:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
     fbe:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
     fc2:	89 2b       	or	r24, r25
     fc4:	21 f4       	brne	.+8      	; 0xfce <__vector_41+0x2d8>
     fc6:	81 2f       	mov	r24, r17
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <__vector_41+0x2da>
     fca:	81 2f       	mov	r24, r17
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <__vector_41+0x2da>
     fce:	80 2f       	mov	r24, r16
     fd0:	88 23       	and	r24, r24
     fd2:	81 f1       	breq	.+96     	; 0x1034 <__vector_41+0x33e>
     fd4:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
     fd8:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	40 91 1c 45 	lds	r20, 0x451C	; 0x80451c <_ZL12g_on_the_air>
     fe4:	50 91 1d 45 	lds	r21, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
     fe8:	60 91 1e 45 	lds	r22, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
     fec:	70 91 1f 45 	lds	r23, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
     ff0:	84 17       	cp	r24, r20
     ff2:	95 07       	cpc	r25, r21
     ff4:	a6 07       	cpc	r26, r22
     ff6:	b7 07       	cpc	r27, r23
     ff8:	e9 f4       	brne	.+58     	; 0x1034 <__vector_41+0x33e>
     ffa:	8f ee       	ldi	r24, 0xEF	; 239
     ffc:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    1000:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1004:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1008:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    100c:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1010:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1014:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    1018:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    101c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1020:	1d 82       	std	Y+5, r1	; 0x05
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	be 01       	movw	r22, r28
    1028:	6b 5f       	subi	r22, 0xFB	; 251
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8b e3       	ldi	r24, 0x3B	; 59
    102e:	95 e4       	ldi	r25, 0x45	; 69
    1030:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    1034:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    1038:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    103c:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1040:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1044:	89 2b       	or	r24, r25
    1046:	8a 2b       	or	r24, r26
    1048:	8b 2b       	or	r24, r27
    104a:	09 f0       	breq	.+2      	; 0x104e <__vector_41+0x358>
    104c:	a8 c1       	rjmp	.+848    	; 0x139e <__vector_41+0x6a8>
    104e:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1052:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1056:	89 2b       	or	r24, r25
    1058:	09 f4       	brne	.+2      	; 0x105c <__vector_41+0x366>
    105a:	a6 c0       	rjmp	.+332    	; 0x11a8 <__vector_41+0x4b2>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <_Z14keyTransmitterb>
    1062:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1066:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    106a:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    106e:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    1072:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1076:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    107a:	05 2e       	mov	r0, r21
    107c:	00 0c       	add	r0, r0
    107e:	66 0b       	sbc	r22, r22
    1080:	77 0b       	sbc	r23, r23
    1082:	84 1b       	sub	r24, r20
    1084:	95 0b       	sbc	r25, r21
    1086:	a6 0b       	sbc	r26, r22
    1088:	b7 0b       	sbc	r27, r23
    108a:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    108e:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    1092:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1096:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	8d 83       	std	Y+5, r24	; 0x05
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	be 01       	movw	r22, r28
    10a4:	6b 5f       	subi	r22, 0xFB	; 251
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	86 e2       	ldi	r24, 0x26	; 38
    10aa:	95 e4       	ldi	r25, 0x45	; 69
    10ac:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    10b0:	8e ef       	ldi	r24, 0xFE	; 254
    10b2:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    10b6:	89 b1       	in	r24, 0x09	; 9
    10b8:	80 64       	ori	r24, 0x40	; 64
    10ba:	89 b9       	out	0x09, r24	; 9
    10bc:	ce 01       	movw	r24, r28
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    10c4:	29 81       	ldd	r18, Y+1	; 0x01
    10c6:	3a 81       	ldd	r19, Y+2	; 0x02
    10c8:	4b 81       	ldd	r20, Y+3	; 0x03
    10ca:	5c 81       	ldd	r21, Y+4	; 0x04
    10cc:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    10d0:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    10d4:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    10d8:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    10dc:	28 17       	cp	r18, r24
    10de:	39 07       	cpc	r19, r25
    10e0:	4a 07       	cpc	r20, r26
    10e2:	5b 07       	cpc	r21, r27
    10e4:	58 f4       	brcc	.+22     	; 0x10fc <__vector_41+0x406>
    10e6:	60 91 58 45 	lds	r22, 0x4558	; 0x804558 <g_event_finish_epoch>
    10ea:	70 91 59 45 	lds	r23, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    10ee:	80 91 5a 45 	lds	r24, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    10f2:	90 91 5b 45 	lds	r25, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    10f6:	0e 94 1f 29 	call	0x523e	; 0x523e <_Z7timeDifmm>
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <__vector_41+0x40c>
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	cb 01       	movw	r24, r22
    1102:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    1106:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    110a:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    110e:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1112:	24 0f       	add	r18, r20
    1114:	35 1f       	adc	r19, r21
    1116:	21 5f       	subi	r18, 0xF1	; 241
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	03 2e       	mov	r0, r19
    111c:	00 0c       	add	r0, r0
    111e:	44 0b       	sbc	r20, r20
    1120:	55 0b       	sbc	r21, r21
    1122:	26 17       	cp	r18, r22
    1124:	37 07       	cpc	r19, r23
    1126:	48 07       	cpc	r20, r24
    1128:	59 07       	cpc	r21, r25
    112a:	0c f0       	brlt	.+2      	; 0x112e <__vector_41+0x438>
    112c:	38 c1       	rjmp	.+624    	; 0x139e <__vector_41+0x6a8>
    112e:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1132:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1136:	40 97       	sbiw	r24, 0x10	; 16
    1138:	2c f0       	brlt	.+10     	; 0x1144 <__vector_41+0x44e>
    113a:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    113e:	81 11       	cpse	r24, r1
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <__vector_41+0x44e>
    1142:	10 2f       	mov	r17, r16
    1144:	11 23       	and	r17, r17
    1146:	09 f4       	brne	.+2      	; 0x114a <__vector_41+0x454>
    1148:	2a c1       	rjmp	.+596    	; 0x139e <__vector_41+0x6a8>
    114a:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    114e:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1152:	0a 97       	sbiw	r24, 0x0a	; 10
    1154:	09 2e       	mov	r0, r25
    1156:	00 0c       	add	r0, r0
    1158:	aa 0b       	sbc	r26, r26
    115a:	bb 0b       	sbc	r27, r27
    115c:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL18g_seconds_to_sleep>
    1160:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    1164:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    1168:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 60 45 	sts	0x4560, r24	; 0x804560 <_ZL13g_go_to_sleep>
    1178:	80 91 20 45 	lds	r24, 0x4520	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    117c:	90 91 21 45 	lds	r25, 0x4521	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1180:	40 91 16 40 	lds	r20, 0x4016	; 0x804016 <_ZL18g_seconds_to_sleep>
    1184:	50 91 17 40 	lds	r21, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    1188:	60 91 18 40 	lds	r22, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    118c:	70 91 19 40 	lds	r23, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    1190:	84 1b       	sub	r24, r20
    1192:	95 0b       	sbc	r25, r21
    1194:	18 16       	cp	r1, r24
    1196:	19 06       	cpc	r1, r25
    1198:	14 f0       	brlt	.+4      	; 0x119e <__vector_41+0x4a8>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    11a2:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    11a6:	fb c0       	rjmp	.+502    	; 0x139e <__vector_41+0x6a8>
    11a8:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    11ac:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    11b0:	09 2e       	mov	r0, r25
    11b2:	00 0c       	add	r0, r0
    11b4:	aa 0b       	sbc	r26, r26
    11b6:	bb 0b       	sbc	r27, r27
    11b8:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    11bc:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    11c0:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    11c4:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    11c8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    11cc:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    11d0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    11d4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    11d8:	e2 c0       	rjmp	.+452    	; 0x139e <__vector_41+0x6a8>
    11da:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    11de:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    11e2:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    11e6:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    11ea:	bb 23       	and	r27, r27
    11ec:	0c f0       	brlt	.+2      	; 0x11f0 <__vector_41+0x4fa>
    11ee:	d7 c0       	rjmp	.+430    	; 0x139e <__vector_41+0x6a8>
    11f0:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    11f4:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    11f8:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    11fc:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	a1 1d       	adc	r26, r1
    1204:	b1 1d       	adc	r27, r1
    1206:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    120a:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    120e:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1212:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    1216:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    121a:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    121e:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1222:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1226:	89 2b       	or	r24, r25
    1228:	8a 2b       	or	r24, r26
    122a:	8b 2b       	or	r24, r27
    122c:	09 f0       	breq	.+2      	; 0x1230 <__vector_41+0x53a>
    122e:	b7 c0       	rjmp	.+366    	; 0x139e <__vector_41+0x6a8>
    1230:	8d ef       	ldi	r24, 0xFD	; 253
    1232:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    1236:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    123a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    123e:	09 2e       	mov	r0, r25
    1240:	00 0c       	add	r0, r0
    1242:	aa 0b       	sbc	r26, r26
    1244:	bb 0b       	sbc	r27, r27
    1246:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    124a:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    124e:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1252:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    1256:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    125a:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    125e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1262:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	be 01       	movw	r22, r28
    1270:	6b 5f       	subi	r22, 0xFB	; 251
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	86 e2       	ldi	r24, 0x26	; 38
    1276:	95 e4       	ldi	r25, 0x45	; 69
    1278:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    127c:	90 c0       	rjmp	.+288    	; 0x139e <__vector_41+0x6a8>
    127e:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_use_rtc_to_time_event>
    1282:	88 23       	and	r24, r24
    1284:	09 f4       	brne	.+2      	; 0x1288 <__vector_41+0x592>
    1286:	8b c0       	rjmp	.+278    	; 0x139e <__vector_41+0x6a8>
    1288:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    128c:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    1290:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    1294:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    1298:	89 2b       	or	r24, r25
    129a:	8a 2b       	or	r24, r26
    129c:	8b 2b       	or	r24, r27
    129e:	09 f4       	brne	.+2      	; 0x12a2 <__vector_41+0x5ac>
    12a0:	7e c0       	rjmp	.+252    	; 0x139e <__vector_41+0x6a8>
    12a2:	ce 01       	movw	r24, r28
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    12aa:	49 81       	ldd	r20, Y+1	; 0x01
    12ac:	5a 81       	ldd	r21, Y+2	; 0x02
    12ae:	6b 81       	ldd	r22, Y+3	; 0x03
    12b0:	7c 81       	ldd	r23, Y+4	; 0x04
    12b2:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    12b6:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    12ba:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    12be:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    12c2:	48 17       	cp	r20, r24
    12c4:	59 07       	cpc	r21, r25
    12c6:	6a 07       	cpc	r22, r26
    12c8:	7b 07       	cpc	r23, r27
    12ca:	08 f4       	brcc	.+2      	; 0x12ce <__vector_41+0x5d8>
    12cc:	68 c0       	rjmp	.+208    	; 0x139e <__vector_41+0x6a8>
    12ce:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    12d2:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    12d6:	89 2b       	or	r24, r25
    12d8:	59 f1       	breq	.+86     	; 0x1330 <__vector_41+0x63a>
    12da:	8e ef       	ldi	r24, 0xFE	; 254
    12dc:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    12e0:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    12e4:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    12e8:	91 95       	neg	r25
    12ea:	81 95       	neg	r24
    12ec:	91 09       	sbc	r25, r1
    12ee:	09 2e       	mov	r0, r25
    12f0:	00 0c       	add	r0, r0
    12f2:	aa 0b       	sbc	r26, r26
    12f4:	bb 0b       	sbc	r27, r27
    12f6:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    12fa:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    12fe:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1302:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    1306:	20 91 52 45 	lds	r18, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    130a:	30 91 53 45 	lds	r19, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    130e:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1312:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1316:	82 0f       	add	r24, r18
    1318:	93 1f       	adc	r25, r19
    131a:	20 91 50 45 	lds	r18, 0x4550	; 0x804550 <g_time_needed_for_ID>
    131e:	30 91 51 45 	lds	r19, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    1322:	82 1b       	sub	r24, r18
    1324:	93 0b       	sbc	r25, r19
    1326:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    132a:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    132e:	34 c0       	rjmp	.+104    	; 0x1398 <__vector_41+0x6a2>
    1330:	8d ef       	ldi	r24, 0xFD	; 253
    1332:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    1336:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    133a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    133e:	09 2e       	mov	r0, r25
    1340:	00 0c       	add	r0, r0
    1342:	aa 0b       	sbc	r26, r26
    1344:	bb 0b       	sbc	r27, r27
    1346:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    134a:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    134e:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1352:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    1356:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    135a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    135e:	20 91 50 45 	lds	r18, 0x4550	; 0x804550 <g_time_needed_for_ID>
    1362:	30 91 51 45 	lds	r19, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    1366:	82 1b       	sub	r24, r18
    1368:	93 0b       	sbc	r25, r19
    136a:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    136e:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1372:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1376:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    137a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    137e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	8d 83       	std	Y+5, r24	; 0x05
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	be 01       	movw	r22, r28
    138c:	6b 5f       	subi	r22, 0xFB	; 251
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	86 e2       	ldi	r24, 0x26	; 38
    1392:	95 e4       	ldi	r25, 0x45	; 69
    1394:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <g_event_commenced>
    139e:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <_ZL19g_wifi_enable_delay>
    13a2:	88 23       	and	r24, r24
    13a4:	e1 f0       	breq	.+56     	; 0x13de <__vector_41+0x6e8>
    13a6:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <_ZL19g_wifi_enable_delay>
    13aa:	81 50       	subi	r24, 0x01	; 1
    13ac:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <_ZL19g_wifi_enable_delay>
    13b0:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <_ZL19g_wifi_enable_delay>
    13b4:	85 30       	cpi	r24, 0x05	; 5
    13b6:	39 f4       	brne	.+14     	; 0x13c6 <__vector_41+0x6d0>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	0e 94 ce 12 	call	0x259c	; 0x259c <_Z10wifi_powerb>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_Z10wifi_resetb>
    13c4:	5e c0       	rjmp	.+188    	; 0x1482 <__vector_41+0x78c>
    13c6:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <_ZL19g_wifi_enable_delay>
    13ca:	81 11       	cpse	r24, r1
    13cc:	5a c0       	rjmp	.+180    	; 0x1482 <__vector_41+0x78c>
    13ce:	46 e0       	ldi	r20, 0x06	; 6
    13d0:	60 e8       	ldi	r22, 0x80	; 128
    13d2:	75 e2       	ldi	r23, 0x25	; 37
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 11 1b 	call	0x3622	; 0x3622 <_Z12linkbus_initm14USART_Number_t>
    13dc:	52 c0       	rjmp	.+164    	; 0x1482 <__vector_41+0x78c>
    13de:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_update_timeout_seconds>
    13e2:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_update_timeout_seconds+0x1>
    13e6:	89 2b       	or	r24, r25
    13e8:	69 f0       	breq	.+26     	; 0x1404 <__vector_41+0x70e>
    13ea:	80 91 24 45 	lds	r24, 0x4524	; 0x804524 <_ZL20g_shutting_down_wifi>
    13ee:	81 11       	cpse	r24, r1
    13f0:	0c c0       	rjmp	.+24     	; 0x140a <__vector_41+0x714>
    13f2:	90 91 5e 45 	lds	r25, 0x455E	; 0x80455e <g_check_for_next_event>
    13f6:	91 11       	cpse	r25, r1
    13f8:	08 c0       	rjmp	.+16     	; 0x140a <__vector_41+0x714>
    13fa:	90 91 5f 45 	lds	r25, 0x455F	; 0x80455f <g_waiting_for_next_event>
    13fe:	99 23       	and	r25, r25
    1400:	19 f0       	breq	.+6      	; 0x1408 <__vector_41+0x712>
    1402:	03 c0       	rjmp	.+6      	; 0x140a <__vector_41+0x714>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	01 c0       	rjmp	.+2      	; 0x140a <__vector_41+0x714>
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	88 23       	and	r24, r24
    140c:	99 f1       	breq	.+102    	; 0x1474 <__vector_41+0x77e>
    140e:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1412:	88 23       	and	r24, r24
    1414:	79 f1       	breq	.+94     	; 0x1474 <__vector_41+0x77e>
    1416:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    141a:	81 50       	subi	r24, 0x01	; 1
    141c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1420:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1424:	81 11       	cpse	r24, r1
    1426:	26 c0       	rjmp	.+76     	; 0x1474 <__vector_41+0x77e>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_Z10wifi_resetb>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	0e 94 ce 12 	call	0x259c	; 0x259c <_Z10wifi_powerb>
    1434:	10 92 24 45 	sts	0x4524, r1	; 0x804524 <_ZL20g_shutting_down_wifi>
    1438:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
    143c:	81 11       	cpse	r24, r1
    143e:	12 c0       	rjmp	.+36     	; 0x1464 <__vector_41+0x76e>
    1440:	84 e0       	ldi	r24, 0x04	; 4
    1442:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	80 93 60 45 	sts	0x4560, r24	; 0x804560 <_ZL13g_go_to_sleep>
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	9f ef       	ldi	r25, 0xFF	; 255
    1450:	dc 01       	movw	r26, r24
    1452:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL18g_seconds_to_sleep>
    1456:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    145a:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    145e:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <__vector_41+0x77a>
    1464:	80 91 25 45 	lds	r24, 0x4525	; 0x804525 <_ZL11g_sleepType>
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	11 f4       	brne	.+4      	; 0x1470 <__vector_41+0x77a>
    146c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_Z12eventEnabledv>
    1470:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    1474:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1478:	88 23       	and	r24, r24
    147a:	19 f0       	breq	.+6      	; 0x1482 <__vector_41+0x78c>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 93 22 45 	sts	0x4522, r24	; 0x804522 <_ZL16g_report_seconds>
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    1488:	25 96       	adiw	r28, 0x05	; 5
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	0f 90       	pop	r0
    14b0:	0b be       	out	0x3b, r0	; 59
    14b2:	0f 90       	pop	r0
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	0f 90       	pop	r0
    14b8:	1f 90       	pop	r1
    14ba:	18 95       	reti

000014bc <__vector_12>:
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	0b b6       	in	r0, 0x3b	; 59
    14c8:	0f 92       	push	r0
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <__vector_12+0x2c>
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    14f0:	80 ff       	sbrs	r24, 0
    14f2:	ca c0       	rjmp	.+404    	; 0x1688 <__vector_12+0x1cc>
    14f4:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    14f8:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    14fc:	89 2b       	or	r24, r25
    14fe:	49 f0       	breq	.+18     	; 0x1512 <__vector_12+0x56>
    1500:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    1504:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    150e:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    1512:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    1516:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    151a:	89 2b       	or	r24, r25
    151c:	49 f0       	breq	.+18     	; 0x1530 <__vector_12+0x74>
    151e:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    1522:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    152c:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    1530:	80 91 19 45 	lds	r24, 0x4519	; 0x804519 <_ZL21g_util_tick_countdown>
    1534:	90 91 1a 45 	lds	r25, 0x451A	; 0x80451a <_ZL21g_util_tick_countdown+0x1>
    1538:	89 2b       	or	r24, r25
    153a:	49 f0       	breq	.+18     	; 0x154e <__vector_12+0x92>
    153c:	80 91 19 45 	lds	r24, 0x4519	; 0x804519 <_ZL21g_util_tick_countdown>
    1540:	90 91 1a 45 	lds	r25, 0x451A	; 0x80451a <_ZL21g_util_tick_countdown+0x1>
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	80 93 19 45 	sts	0x4519, r24	; 0x804519 <_ZL21g_util_tick_countdown>
    154a:	90 93 1a 45 	sts	0x451A, r25	; 0x80451a <_ZL21g_util_tick_countdown+0x1>
    154e:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
    1552:	88 23       	and	r24, r24
    1554:	19 f0       	breq	.+6      	; 0x155c <__vector_12+0xa0>
    1556:	80 91 5d 45 	lds	r24, 0x455D	; 0x80455d <g_event_commenced>
    155a:	01 c0       	rjmp	.+2      	; 0x155e <__vector_12+0xa2>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	88 23       	and	r24, r24
    1560:	09 f4       	brne	.+2      	; 0x1564 <__vector_12+0xa8>
    1562:	92 c0       	rjmp	.+292    	; 0x1688 <__vector_12+0x1cc>
    1564:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    1568:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    156c:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1570:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1574:	18 16       	cp	r1, r24
    1576:	19 06       	cpc	r1, r25
    1578:	1a 06       	cpc	r1, r26
    157a:	1b 06       	cpc	r1, r27
    157c:	0c f0       	brlt	.+2      	; 0x1580 <__vector_12+0xc4>
    157e:	66 c0       	rjmp	.+204    	; 0x164c <__vector_12+0x190>
    1580:	80 91 73 45 	lds	r24, 0x4573	; 0x804573 <_ZZ11__vector_12E7codeInc>
    1584:	90 91 74 45 	lds	r25, 0x4574	; 0x804574 <_ZZ11__vector_12E7codeInc+0x1>
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	09 f4       	brne	.+2      	; 0x158e <__vector_12+0xd2>
    158c:	47 c0       	rjmp	.+142    	; 0x161c <__vector_12+0x160>
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	80 93 73 45 	sts	0x4573, r24	; 0x804573 <_ZZ11__vector_12E7codeInc>
    1594:	90 93 74 45 	sts	0x4574, r25	; 0x804574 <_ZZ11__vector_12E7codeInc+0x1>
    1598:	89 2b       	or	r24, r25
    159a:	09 f0       	breq	.+2      	; 0x159e <__vector_12+0xe2>
    159c:	75 c0       	rjmp	.+234    	; 0x1688 <__vector_12+0x1cc>
    159e:	ae 01       	movw	r20, r28
    15a0:	4f 5f       	subi	r20, 0xFF	; 255
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	be 01       	movw	r22, r28
    15a6:	6e 5f       	subi	r22, 0xFE	; 254
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    15b2:	80 93 75 45 	sts	0x4575, r24	; 0x804575 <_ZZ11__vector_12E3key>
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	81 11       	cpse	r24, r1
    15ba:	25 c0       	rjmp	.+74     	; 0x1606 <__vector_12+0x14a>
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	88 23       	and	r24, r24
    15c0:	11 f1       	breq	.+68     	; 0x1606 <__vector_12+0x14a>
    15c2:	8d ef       	ldi	r24, 0xFD	; 253
    15c4:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    15c8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    15cc:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    15d0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    15d4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	8a 83       	std	Y+2, r24	; 0x02
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	be 01       	movw	r22, r28
    15e2:	6e 5f       	subi	r22, 0xFE	; 254
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	86 e2       	ldi	r24, 0x26	; 38
    15e8:	95 e4       	ldi	r25, 0x45	; 69
    15ea:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    15ee:	ae 01       	movw	r20, r28
    15f0:	4f 5f       	subi	r20, 0xFF	; 255
    15f2:	5f 4f       	sbci	r21, 0xFF	; 255
    15f4:	be 01       	movw	r22, r28
    15f6:	6e 5f       	subi	r22, 0xFE	; 254
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    1602:	80 93 75 45 	sts	0x4575, r24	; 0x804575 <_ZZ11__vector_12E3key>
    1606:	80 91 75 45 	lds	r24, 0x4575	; 0x804575 <_ZZ11__vector_12E3key>
    160a:	88 23       	and	r24, r24
    160c:	e9 f1       	breq	.+122    	; 0x1688 <__vector_12+0x1cc>
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_Z18powerToTransmitterb>
    1614:	89 b1       	in	r24, 0x09	; 9
    1616:	8f 7b       	andi	r24, 0xBF	; 191
    1618:	89 b9       	out	0x09, r24	; 9
    161a:	36 c0       	rjmp	.+108    	; 0x1688 <__vector_12+0x1cc>
    161c:	80 91 75 45 	lds	r24, 0x4575	; 0x804575 <_ZZ11__vector_12E3key>
    1620:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <_Z14keyTransmitterb>
    1624:	80 91 75 45 	lds	r24, 0x4575	; 0x804575 <_ZZ11__vector_12E3key>
    1628:	81 11       	cpse	r24, r1
    162a:	04 c0       	rjmp	.+8      	; 0x1634 <__vector_12+0x178>
    162c:	89 b1       	in	r24, 0x09	; 9
    162e:	80 64       	ori	r24, 0x40	; 64
    1630:	89 b9       	out	0x09, r24	; 9
    1632:	03 c0       	rjmp	.+6      	; 0x163a <__vector_12+0x17e>
    1634:	89 b1       	in	r24, 0x09	; 9
    1636:	8f 7b       	andi	r24, 0xBF	; 191
    1638:	89 b9       	out	0x09, r24	; 9
    163a:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    163e:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    1642:	80 93 73 45 	sts	0x4573, r24	; 0x804573 <_ZZ11__vector_12E7codeInc>
    1646:	90 93 74 45 	sts	0x4574, r25	; 0x804574 <_ZZ11__vector_12E7codeInc+0x1>
    164a:	1e c0       	rjmp	.+60     	; 0x1688 <__vector_12+0x1cc>
    164c:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    1650:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    1654:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1658:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    165c:	89 2b       	or	r24, r25
    165e:	8a 2b       	or	r24, r26
    1660:	8b 2b       	or	r24, r27
    1662:	91 f4       	brne	.+36     	; 0x1688 <__vector_12+0x1cc>
    1664:	80 91 75 45 	lds	r24, 0x4575	; 0x804575 <_ZZ11__vector_12E3key>
    1668:	88 23       	and	r24, r24
    166a:	71 f0       	breq	.+28     	; 0x1688 <__vector_12+0x1cc>
    166c:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <_ZZ11__vector_12E3key>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <_Z14keyTransmitterb>
    1676:	89 b1       	in	r24, 0x09	; 9
    1678:	80 64       	ori	r24, 0x40	; 64
    167a:	89 b9       	out	0x09, r24	; 9
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_Z18powerToTransmitterb>
    1682:	8e ef       	ldi	r24, 0xFE	; 254
    1684:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0b be       	out	0x3b, r0	; 59
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	0f 90       	pop	r0
    16b8:	1f 90       	pop	r1
    16ba:	18 95       	reti

000016bc <main>:
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	1f 92       	push	r1
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	0e 94 a0 01 	call	0x340	; 0x340 <atmel_start_init>
    16ca:	89 b1       	in	r24, 0x09	; 9
    16cc:	80 64       	ori	r24, 0x40	; 64
    16ce:	89 b9       	out	0x09, r24	; 9
    16d0:	86 e6       	ldi	r24, 0x66	; 102
    16d2:	95 e4       	ldi	r25, 0x45	; 69
    16d4:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN13EepromManager20initializeEEPROMVarsEv>
    16d8:	86 e6       	ldi	r24, 0x66	; 102
    16da:	95 e4       	ldi	r25, 0x45	; 69
    16dc:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN13EepromManager11readNonVolsEv>
    16e0:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <_Z16init_transmitterv>
    16e4:	82 3d       	cpi	r24, 0xD2	; 210
    16e6:	39 f4       	brne	.+14     	; 0x16f6 <main+0x3a>
    16e8:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <sb_send_NewLine>
    16ec:	88 e4       	ldi	r24, 0x48	; 72
    16ee:	90 e4       	ldi	r25, 0x40	; 64
    16f0:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <sb_send_string>
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <main+0x42>
    16f6:	83 e7       	ldi	r24, 0x73	; 115
    16f8:	90 e4       	ldi	r25, 0x40	; 64
    16fa:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <sb_send_string>
    16fe:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_Z8rtc_initv>
    1702:	8c 3f       	cpi	r24, 0xFC	; 252
    1704:	39 f4       	brne	.+14     	; 0x1714 <main+0x58>
    1706:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <sb_send_NewLine>
    170a:	8b e7       	ldi	r24, 0x7B	; 123
    170c:	90 e4       	ldi	r25, 0x40	; 64
    170e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <sb_send_string>
    1712:	14 c0       	rjmp	.+40     	; 0x173c <main+0x80>
    1714:	ce 01       	movw	r24, r28
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	0e 94 64 14 	call	0x28c8	; 0x28c8 <ds3231_get_epoch>
    171c:	29 81       	ldd	r18, Y+1	; 0x01
    171e:	21 11       	cpse	r18, r1
    1720:	07 c0       	rjmp	.+14     	; 0x1730 <main+0x74>
    1722:	0e 94 65 01 	call	0x2ca	; 0x2ca <set_system_time>
    1726:	83 ea       	ldi	r24, 0xA3	; 163
    1728:	90 e4       	ldi	r25, 0x40	; 64
    172a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <sb_send_string>
    172e:	06 c0       	rjmp	.+12     	; 0x173c <main+0x80>
    1730:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <sb_send_NewLine>
    1734:	8b e7       	ldi	r24, 0x7B	; 123
    1736:	90 e4       	ldi	r25, 0x40	; 64
    1738:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <sb_send_string>
    173c:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <sb_send_NewLine>
    1740:	8b ea       	ldi	r24, 0xAB	; 171
    1742:	90 e4       	ldi	r25, 0x40	; 64
    1744:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <sb_send_string>
    1748:	88 ec       	ldi	r24, 0xC8	; 200
    174a:	90 e4       	ldi	r25, 0x40	; 64
    174c:	9f 93       	push	r25
    174e:	8f 93       	push	r24
    1750:	8c ec       	ldi	r24, 0xCC	; 204
    1752:	90 e4       	ldi	r25, 0x40	; 64
    1754:	9f 93       	push	r25
    1756:	8f 93       	push	r24
    1758:	85 ee       	ldi	r24, 0xE5	; 229
    175a:	94 e4       	ldi	r25, 0x44	; 68
    175c:	9f 93       	push	r25
    175e:	8f 93       	push	r24
    1760:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <sprintf>
    1764:	85 ee       	ldi	r24, 0xE5	; 229
    1766:	94 e4       	ldi	r25, 0x44	; 68
    1768:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <sb_send_string>
    176c:	89 ed       	ldi	r24, 0xD9	; 217
    176e:	90 e4       	ldi	r25, 0x40	; 64
    1770:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <sb_send_string>
    1774:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <_Z11wifiPresentv>
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	81 11       	cpse	r24, r1
    1786:	08 c0       	rjmp	.+16     	; 0x1798 <main+0xdc>
    1788:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <sb_send_NewLine>
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	92 e4       	ldi	r25, 0x42	; 66
    1790:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <sb_send_string>
    1794:	10 92 23 45 	sts	0x4523, r1	; 0x804523 <_ZL19g_wifi_enable_delay>
    1798:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <sb_send_NewLine>
    179c:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <sb_send_NewPrompt>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <_Z13startEventNow19EventActionSource_t>
    17a6:	f8 94       	cli
    17a8:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <_ZZ4mainE3val>
    17ac:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ4mainE3val+0x1>
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <main+0xf8>
    17b2:	c9 01       	movw	r24, r18
    17b4:	9c 01       	movw	r18, r24
    17b6:	21 50       	subi	r18, 0x01	; 1
    17b8:	31 09       	sbc	r19, r1
    17ba:	89 2b       	or	r24, r25
    17bc:	d1 f7       	brne	.-12     	; 0x17b2 <main+0xf6>
    17be:	e0 91 24 48 	lds	r30, 0x4824	; 0x804824 <g_fine_freq_adj>
    17c2:	f0 91 25 48 	lds	r31, 0x4825	; 0x804825 <_ZL12g_ms_counter>
    17c6:	31 97       	sbiw	r30, 0x01	; 1
    17c8:	e2 33       	cpi	r30, 0x32	; 50
    17ca:	f1 05       	cpc	r31, r1
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <main+0x114>
    17ce:	2f c0       	rjmp	.+94     	; 0x182e <main+0x172>
    17d0:	ec 58       	subi	r30, 0x8C	; 140
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <__tablejump2__>
	...
    1824:	00 00       	nop
    1826:	03 c0       	rjmp	.+6      	; 0x182e <main+0x172>
    1828:	00 00       	nop
    182a:	01 c0       	rjmp	.+2      	; 0x182e <main+0x172>
    182c:	00 00       	nop
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <__TEXT_REGION_LENGTH__+0x7e0407>
    1834:	b9 cf       	rjmp	.-142    	; 0x17a8 <main+0xec>

00001836 <_Z12eventEnabledv>:
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	29 97       	sbiw	r28, 0x09	; 9
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	20 91 54 45 	lds	r18, 0x4554	; 0x804554 <g_event_start_epoch>
    1850:	30 91 55 45 	lds	r19, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    1854:	40 91 56 45 	lds	r20, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    1858:	50 91 57 45 	lds	r21, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    185c:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    1860:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    1864:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    1868:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 1f 29 	call	0x523e	; 0x523e <_Z7timeDifmm>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	ab 83       	std	Y+3, r26	; 0x03
    187e:	bc 83       	std	Y+4, r27	; 0x04
    1880:	21 e0       	ldi	r18, 0x01	; 1
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	ab 81       	ldd	r26, Y+3	; 0x03
    1888:	bc 81       	ldd	r27, Y+4	; 0x04
    188a:	18 16       	cp	r1, r24
    188c:	19 06       	cpc	r1, r25
    188e:	1a 06       	cpc	r1, r26
    1890:	1b 06       	cpc	r1, r27
    1892:	0c f0       	brlt	.+2      	; 0x1896 <_Z12eventEnabledv+0x60>
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	2d 83       	std	Y+5, r18	; 0x05
    1898:	ce 01       	movw	r24, r28
    189a:	06 96       	adiw	r24, 0x06	; 6
    189c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    18a0:	20 91 58 45 	lds	r18, 0x4558	; 0x804558 <g_event_finish_epoch>
    18a4:	30 91 59 45 	lds	r19, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    18a8:	40 91 5a 45 	lds	r20, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    18ac:	50 91 5b 45 	lds	r21, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    18b0:	8e 81       	ldd	r24, Y+6	; 0x06
    18b2:	9f 81       	ldd	r25, Y+7	; 0x07
    18b4:	a8 85       	ldd	r26, Y+8	; 0x08
    18b6:	b9 85       	ldd	r27, Y+9	; 0x09
    18b8:	bc 01       	movw	r22, r24
    18ba:	cd 01       	movw	r24, r26
    18bc:	0e 94 1f 29 	call	0x523e	; 0x523e <_Z7timeDifmm>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	ab 83       	std	Y+3, r26	; 0x03
    18ca:	bc 83       	std	Y+4, r27	; 0x04
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	ab 81       	ldd	r26, Y+3	; 0x03
    18d2:	bc 81       	ldd	r27, Y+4	; 0x04
    18d4:	bb 23       	and	r27, r27
    18d6:	2c f0       	brlt	.+10     	; 0x18e2 <_Z12eventEnabledv+0xac>
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	88 23       	and	r24, r24
    18dc:	11 f0       	breq	.+4      	; 0x18e2 <_Z12eventEnabledv+0xac>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	4a c0       	rjmp	.+148    	; 0x1976 <_Z12eventEnabledv+0x140>
    18e2:	20 91 54 45 	lds	r18, 0x4554	; 0x804554 <g_event_start_epoch>
    18e6:	30 91 55 45 	lds	r19, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    18ea:	40 91 56 45 	lds	r20, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    18ee:	50 91 57 45 	lds	r21, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    18f2:	8e 81       	ldd	r24, Y+6	; 0x06
    18f4:	9f 81       	ldd	r25, Y+7	; 0x07
    18f6:	a8 85       	ldd	r26, Y+8	; 0x08
    18f8:	b9 85       	ldd	r27, Y+9	; 0x09
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 1f 29 	call	0x523e	; 0x523e <_Z7timeDifmm>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	ab 83       	std	Y+3, r26	; 0x03
    190c:	bc 83       	std	Y+4, r27	; 0x04
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	ab 81       	ldd	r26, Y+3	; 0x03
    1914:	bc 81       	ldd	r27, Y+4	; 0x04
    1916:	84 3c       	cpi	r24, 0xC4	; 196
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	af 4f       	sbci	r26, 0xFF	; 255
    191c:	bf 4f       	sbci	r27, 0xFF	; 255
    191e:	64 f0       	brlt	.+24     	; 0x1938 <_Z12eventEnabledv+0x102>
    1920:	10 92 25 45 	sts	0x4525, r1	; 0x804525 <_ZL11g_sleepType>
    1924:	10 92 16 40 	sts	0x4016, r1	; 0x804016 <_ZL18g_seconds_to_sleep>
    1928:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    192c:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    1930:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	1f c0       	rjmp	.+62     	; 0x1976 <_Z12eventEnabledv+0x140>
    1938:	24 ec       	ldi	r18, 0xC4	; 196
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f ef       	ldi	r20, 0xFF	; 255
    193e:	5f ef       	ldi	r21, 0xFF	; 255
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	ab 81       	ldd	r26, Y+3	; 0x03
    1946:	bc 81       	ldd	r27, Y+4	; 0x04
    1948:	79 01       	movw	r14, r18
    194a:	8a 01       	movw	r16, r20
    194c:	e8 1a       	sub	r14, r24
    194e:	f9 0a       	sbc	r15, r25
    1950:	0a 0b       	sbc	r16, r26
    1952:	1b 0b       	sbc	r17, r27
    1954:	d8 01       	movw	r26, r16
    1956:	c7 01       	movw	r24, r14
    1958:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL18g_seconds_to_sleep>
    195c:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    1960:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    1964:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 60 45 	sts	0x4560, r24	; 0x804560 <_ZL13g_go_to_sleep>
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	29 96       	adiw	r28, 0x09	; 9
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	08 95       	ret

0000198a <_Z13throttleValueh>:
    198a:	85 31       	cpi	r24, 0x15	; 21
    198c:	4c f4       	brge	.+18     	; 0x19a0 <_Z13throttleValueh+0x16>
    198e:	28 2f       	mov	r18, r24
    1990:	88 0f       	add	r24, r24
    1992:	33 0b       	sbc	r19, r19
    1994:	25 30       	cpi	r18, 0x05	; 5
    1996:	31 05       	cpc	r19, r1
    1998:	2c f4       	brge	.+10     	; 0x19a4 <_Z13throttleValueh+0x1a>
    199a:	25 e0       	ldi	r18, 0x05	; 5
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <_Z13throttleValueh+0x1a>
    19a0:	24 e1       	ldi	r18, 0x14	; 20
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	62 ec       	ldi	r22, 0xC2	; 194
    19ac:	71 e0       	ldi	r23, 0x01	; 1
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 c6 2b 	call	0x578c	; 0x578c <__divmodsi4>
    19b6:	ca 01       	movw	r24, r20
    19b8:	b9 01       	movw	r22, r18
    19ba:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__floatsisf>
    19be:	0e 94 19 2a 	call	0x5432	; 0x5432 <__fixunssfsi>
    19c2:	cb 01       	movw	r24, r22
    19c4:	08 95       	ret

000019c6 <_Z11launchEventP2SC>:
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <_Z11launchEventP2SC+0x6>
    19cc:	1f 92       	push	r1
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	9b 83       	std	Y+3, r25	; 0x03
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_Z33activateEventUsingCurrentSettingsP2SC>
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	9b 81       	ldd	r25, Y+3	; 0x03
    19e4:	fc 01       	movw	r30, r24
    19e6:	80 81       	ld	r24, Z
    19e8:	88 23       	and	r24, r24
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <_Z11launchEventP2SC+0x32>
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	9b 81       	ldd	r25, Y+3	; 0x03
    19f0:	fc 01       	movw	r30, r24
    19f2:	80 81       	ld	r24, Z
    19f4:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	88 23       	and	r24, r24
    19fc:	21 f0       	breq	.+8      	; 0x1a06 <_Z11launchEventP2SC+0x40>
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	80 93 17 45 	sts	0x4517, r24	; 0x804517 <_ZL17g_last_error_code>
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <_Z11launchEventP2SC+0x48>
    1a06:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_Z12eventEnabledv>
    1a0a:	80 93 5c 45 	sts	0x455C, r24	; 0x80455c <g_event_enabled>
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	23 96       	adiw	r28, 0x03	; 3
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <_Z33activateEventUsingCurrentSettingsP2SC>:
    1a1c:	cf 92       	push	r12
    1a1e:	df 92       	push	r13
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	1f 92       	push	r1
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	40 91 54 45 	lds	r20, 0x4554	; 0x804554 <g_event_start_epoch>
    1a36:	50 91 55 45 	lds	r21, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    1a3a:	60 91 56 45 	lds	r22, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    1a3e:	70 91 57 45 	lds	r23, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    1a42:	45 2b       	or	r20, r21
    1a44:	46 2b       	or	r20, r22
    1a46:	47 2b       	or	r20, r23
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <_Z33activateEventUsingCurrentSettingsP2SC+0x30>
    1a4a:	91 c1       	rjmp	.+802    	; 0x1d6e <_Z33activateEventUsingCurrentSettingsP2SC+0x352>
    1a4c:	00 91 54 45 	lds	r16, 0x4554	; 0x804554 <g_event_start_epoch>
    1a50:	10 91 55 45 	lds	r17, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    1a54:	20 91 56 45 	lds	r18, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    1a58:	30 91 57 45 	lds	r19, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    1a5c:	40 91 58 45 	lds	r20, 0x4558	; 0x804558 <g_event_finish_epoch>
    1a60:	50 91 59 45 	lds	r21, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    1a64:	60 91 5a 45 	lds	r22, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    1a68:	70 91 5b 45 	lds	r23, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    1a6c:	04 17       	cp	r16, r20
    1a6e:	15 07       	cpc	r17, r21
    1a70:	26 07       	cpc	r18, r22
    1a72:	37 07       	cpc	r19, r23
    1a74:	08 f0       	brcs	.+2      	; 0x1a78 <_Z33activateEventUsingCurrentSettingsP2SC+0x5c>
    1a76:	7d c1       	rjmp	.+762    	; 0x1d72 <_Z33activateEventUsingCurrentSettingsP2SC+0x356>
    1a78:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    1a7c:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1a80:	23 2b       	or	r18, r19
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <_Z33activateEventUsingCurrentSettingsP2SC+0x6a>
    1a84:	78 c1       	rjmp	.+752    	; 0x1d76 <_Z33activateEventUsingCurrentSettingsP2SC+0x35a>
    1a86:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1a8a:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1a8e:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    1a92:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1a96:	24 0f       	add	r18, r20
    1a98:	35 1f       	adc	r19, r21
    1a9a:	40 91 52 45 	lds	r20, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    1a9e:	50 91 53 45 	lds	r21, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    1aa2:	24 17       	cp	r18, r20
    1aa4:	35 07       	cpc	r19, r21
    1aa6:	0c f4       	brge	.+2      	; 0x1aaa <_Z33activateEventUsingCurrentSettingsP2SC+0x8e>
    1aa8:	68 c1       	rjmp	.+720    	; 0x1d7a <_Z33activateEventUsingCurrentSettingsP2SC+0x35e>
    1aaa:	20 91 26 45 	lds	r18, 0x4526	; 0x804526 <g_messages_text>
    1aae:	22 23       	and	r18, r18
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <_Z33activateEventUsingCurrentSettingsP2SC+0x98>
    1ab2:	65 c1       	rjmp	.+714    	; 0x1d7e <_Z33activateEventUsingCurrentSettingsP2SC+0x362>
    1ab4:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    1ab8:	22 23       	and	r18, r18
    1aba:	09 f4       	brne	.+2      	; 0x1abe <_Z33activateEventUsingCurrentSettingsP2SC+0xa2>
    1abc:	62 c1       	rjmp	.+708    	; 0x1d82 <_Z33activateEventUsingCurrentSettingsP2SC+0x366>
    1abe:	8c 01       	movw	r16, r24
    1ac0:	80 91 3b 45 	lds	r24, 0x453B	; 0x80453b <g_messages_text+0x15>
    1ac4:	88 23       	and	r24, r24
    1ac6:	19 f1       	breq	.+70     	; 0x1b0e <_Z33activateEventUsingCurrentSettingsP2SC+0xf2>
    1ac8:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1acc:	88 23       	and	r24, r24
    1ace:	41 f0       	breq	.+16     	; 0x1ae0 <_Z33activateEventUsingCurrentSettingsP2SC+0xc4>
    1ad0:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1ad4:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1ad8:	89 2b       	or	r24, r25
    1ada:	21 f4       	brne	.+8      	; 0x1ae4 <_Z33activateEventUsingCurrentSettingsP2SC+0xc8>
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	4e c1       	rjmp	.+668    	; 0x1d86 <_Z33activateEventUsingCurrentSettingsP2SC+0x36a>
    1aea:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	8b e3       	ldi	r24, 0x3B	; 59
    1af2:	95 e4       	ldi	r25, 0x45	; 69
    1af4:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <_Z26timeRequiredToSendStrAtWPMPcj>
    1af8:	8c 50       	subi	r24, 0x0C	; 12
    1afa:	9e 4f       	sbci	r25, 0xFE	; 254
    1afc:	68 ee       	ldi	r22, 0xE8	; 232
    1afe:	73 e0       	ldi	r23, 0x03	; 3
    1b00:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <__udivmodhi4>
    1b04:	60 93 50 45 	sts	0x4550, r22	; 0x804550 <g_time_needed_for_ID>
    1b08:	70 93 51 45 	sts	0x4551, r23	; 0x804551 <g_time_needed_for_ID+0x1>
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <_Z33activateEventUsingCurrentSettingsP2SC+0xfa>
    1b0e:	10 92 50 45 	sts	0x4550, r1	; 0x804550 <g_time_needed_for_ID>
    1b12:	10 92 51 45 	sts	0x4551, r1	; 0x804551 <g_time_needed_for_ID+0x1>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    1b1e:	c0 90 58 45 	lds	r12, 0x4558	; 0x804558 <g_event_finish_epoch>
    1b22:	d0 90 59 45 	lds	r13, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    1b26:	e0 90 5a 45 	lds	r14, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    1b2a:	f0 90 5b 45 	lds	r15, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    1b2e:	c6 16       	cp	r12, r22
    1b30:	d7 06       	cpc	r13, r23
    1b32:	e8 06       	cpc	r14, r24
    1b34:	f9 06       	cpc	r15, r25
    1b36:	48 f4       	brcc	.+18     	; 0x1b4a <_Z33activateEventUsingCurrentSettingsP2SC+0x12e>
    1b38:	01 15       	cp	r16, r1
    1b3a:	11 05       	cpc	r17, r1
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <_Z33activateEventUsingCurrentSettingsP2SC+0x124>
    1b3e:	25 c1       	rjmp	.+586    	; 0x1d8a <_Z33activateEventUsingCurrentSettingsP2SC+0x36e>
    1b40:	8a ef       	ldi	r24, 0xFA	; 250
    1b42:	f8 01       	movw	r30, r16
    1b44:	80 83       	st	Z, r24
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	21 c1       	rjmp	.+578    	; 0x1d8c <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    1b4a:	20 91 54 45 	lds	r18, 0x4554	; 0x804554 <g_event_start_epoch>
    1b4e:	30 91 55 45 	lds	r19, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    1b52:	40 91 56 45 	lds	r20, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    1b56:	50 91 57 45 	lds	r21, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    1b5a:	0e 94 1f 29 	call	0x523e	; 0x523e <_Z7timeDifmm>
    1b5e:	99 23       	and	r25, r25
    1b60:	0c f4       	brge	.+2      	; 0x1b64 <_Z33activateEventUsingCurrentSettingsP2SC+0x148>
    1b62:	f2 c0       	rjmp	.+484    	; 0x1d48 <_Z33activateEventUsingCurrentSettingsP2SC+0x32c>
    1b64:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    1b68:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1b6c:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    1b70:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1b74:	e2 0e       	add	r14, r18
    1b76:	f3 1e       	adc	r15, r19
    1b78:	97 01       	movw	r18, r14
    1b7a:	0f 2c       	mov	r0, r15
    1b7c:	00 0c       	add	r0, r0
    1b7e:	44 0b       	sbc	r20, r20
    1b80:	55 0b       	sbc	r21, r21
    1b82:	0e 94 c6 2b 	call	0x578c	; 0x578c <__divmodsi4>
    1b86:	20 91 52 45 	lds	r18, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    1b8a:	30 91 53 45 	lds	r19, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    1b8e:	c9 01       	movw	r24, r18
    1b90:	86 1b       	sub	r24, r22
    1b92:	97 0b       	sbc	r25, r23
    1b94:	18 16       	cp	r1, r24
    1b96:	19 06       	cpc	r1, r25
    1b98:	0c f4       	brge	.+2      	; 0x1b9c <_Z33activateEventUsingCurrentSettingsP2SC+0x180>
    1b9a:	84 c0       	rjmp	.+264    	; 0x1ca4 <_Z33activateEventUsingCurrentSettingsP2SC+0x288>
    1b9c:	22 27       	eor	r18, r18
    1b9e:	33 27       	eor	r19, r19
    1ba0:	28 1b       	sub	r18, r24
    1ba2:	39 0b       	sbc	r19, r25
    1ba4:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    1ba8:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1bac:	24 17       	cp	r18, r20
    1bae:	35 07       	cpc	r19, r21
    1bb0:	ac f1       	brlt	.+106    	; 0x1c1c <_Z33activateEventUsingCurrentSettingsP2SC+0x200>
    1bb2:	8e 0d       	add	r24, r14
    1bb4:	9f 1d       	adc	r25, r15
    1bb6:	91 95       	neg	r25
    1bb8:	81 95       	neg	r24
    1bba:	91 09       	sbc	r25, r1
    1bbc:	09 2e       	mov	r0, r25
    1bbe:	00 0c       	add	r0, r0
    1bc0:	aa 0b       	sbc	r26, r26
    1bc2:	bb 0b       	sbc	r27, r27
    1bc4:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    1bc8:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    1bcc:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1bd0:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    1bd4:	01 15       	cp	r16, r1
    1bd6:	11 05       	cpc	r17, r1
    1bd8:	19 f0       	breq	.+6      	; 0x1be0 <_Z33activateEventUsingCurrentSettingsP2SC+0x1c4>
    1bda:	8e ef       	ldi	r24, 0xFE	; 254
    1bdc:	f8 01       	movw	r30, r16
    1bde:	80 83       	st	Z, r24
    1be0:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
    1be4:	81 11       	cpse	r24, r1
    1be6:	8a c0       	rjmp	.+276    	; 0x1cfc <_Z33activateEventUsingCurrentSettingsP2SC+0x2e0>
    1be8:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1bec:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1bf0:	40 91 1c 45 	lds	r20, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    1bf4:	50 91 1d 45 	lds	r21, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    1bf8:	60 91 1e 45 	lds	r22, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1bfc:	70 91 1f 45 	lds	r23, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1c00:	20 91 50 45 	lds	r18, 0x4550	; 0x804550 <g_time_needed_for_ID>
    1c04:	30 91 51 45 	lds	r19, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    1c08:	84 1b       	sub	r24, r20
    1c0a:	95 0b       	sbc	r25, r21
    1c0c:	82 1b       	sub	r24, r18
    1c0e:	93 0b       	sbc	r25, r19
    1c10:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    1c14:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	77 c0       	rjmp	.+238    	; 0x1d0a <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    1c1c:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    1c20:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1c24:	82 0f       	add	r24, r18
    1c26:	93 1f       	adc	r25, r19
    1c28:	09 2e       	mov	r0, r25
    1c2a:	00 0c       	add	r0, r0
    1c2c:	aa 0b       	sbc	r26, r26
    1c2e:	bb 0b       	sbc	r27, r27
    1c30:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    1c34:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    1c38:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1c3c:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    1c40:	01 15       	cp	r16, r1
    1c42:	11 05       	cpc	r17, r1
    1c44:	19 f0       	breq	.+6      	; 0x1c4c <_Z33activateEventUsingCurrentSettingsP2SC+0x230>
    1c46:	8d ef       	ldi	r24, 0xFD	; 253
    1c48:	f8 01       	movw	r30, r16
    1c4a:	80 83       	st	Z, r24
    1c4c:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
    1c50:	81 11       	cpse	r24, r1
    1c52:	56 c0       	rjmp	.+172    	; 0x1d00 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e4>
    1c54:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
    1c58:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    1c5c:	a0 e0       	ldi	r26, 0x00	; 0
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	40 91 1c 45 	lds	r20, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    1c64:	50 91 1d 45 	lds	r21, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    1c68:	60 91 1e 45 	lds	r22, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1c6c:	70 91 1f 45 	lds	r23, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1c70:	84 17       	cp	r24, r20
    1c72:	95 07       	cpc	r25, r21
    1c74:	a6 07       	cpc	r26, r22
    1c76:	b7 07       	cpc	r27, r23
    1c78:	0c f0       	brlt	.+2      	; 0x1c7c <_Z33activateEventUsingCurrentSettingsP2SC+0x260>
    1c7a:	44 c0       	rjmp	.+136    	; 0x1d04 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e8>
    1c7c:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    1c80:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    1c84:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1c88:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1c8c:	20 91 50 45 	lds	r18, 0x4550	; 0x804550 <g_time_needed_for_ID>
    1c90:	30 91 51 45 	lds	r19, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    1c94:	82 1b       	sub	r24, r18
    1c96:	93 0b       	sbc	r25, r19
    1c98:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    1c9c:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	33 c0       	rjmp	.+102    	; 0x1d0a <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    1ca4:	44 27       	eor	r20, r20
    1ca6:	55 27       	eor	r21, r21
    1ca8:	48 1b       	sub	r20, r24
    1caa:	59 0b       	sbc	r21, r25
    1cac:	05 2e       	mov	r0, r21
    1cae:	00 0c       	add	r0, r0
    1cb0:	66 0b       	sbc	r22, r22
    1cb2:	77 0b       	sbc	r23, r23
    1cb4:	40 93 1c 45 	sts	0x451C, r20	; 0x80451c <_ZL12g_on_the_air>
    1cb8:	50 93 1d 45 	sts	0x451D, r21	; 0x80451d <_ZL12g_on_the_air+0x1>
    1cbc:	60 93 1e 45 	sts	0x451E, r22	; 0x80451e <_ZL12g_on_the_air+0x2>
    1cc0:	70 93 1f 45 	sts	0x451F, r23	; 0x80451f <_ZL12g_on_the_air+0x3>
    1cc4:	01 15       	cp	r16, r1
    1cc6:	11 05       	cpc	r17, r1
    1cc8:	19 f0       	breq	.+6      	; 0x1cd0 <_Z33activateEventUsingCurrentSettingsP2SC+0x2b4>
    1cca:	2e ef       	ldi	r18, 0xFE	; 254
    1ccc:	f8 01       	movw	r30, r16
    1cce:	20 83       	st	Z, r18
    1cd0:	20 91 5c 45 	lds	r18, 0x455C	; 0x80455c <g_event_enabled>
    1cd4:	21 11       	cpse	r18, r1
    1cd6:	18 c0       	rjmp	.+48     	; 0x1d08 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ec>
    1cd8:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    1cdc:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1ce0:	82 0f       	add	r24, r18
    1ce2:	93 1f       	adc	r25, r19
    1ce4:	20 91 50 45 	lds	r18, 0x4550	; 0x804550 <g_time_needed_for_ID>
    1ce8:	30 91 51 45 	lds	r19, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    1cec:	82 1b       	sub	r24, r18
    1cee:	93 0b       	sbc	r25, r19
    1cf0:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    1cf4:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	07 c0       	rjmp	.+14     	; 0x1d0a <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	05 c0       	rjmp	.+10     	; 0x1d0a <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	88 23       	and	r24, r24
    1d0c:	b1 f0       	breq	.+44     	; 0x1d3a <_Z33activateEventUsingCurrentSettingsP2SC+0x31e>
    1d0e:	f8 94       	cli
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	be 01       	movw	r22, r28
    1d1a:	6f 5f       	subi	r22, 0xFF	; 255
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	86 e2       	ldi	r24, 0x26	; 38
    1d20:	95 e4       	ldi	r25, 0x45	; 69
    1d22:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    1d26:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1d2a:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    1d2e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1d32:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1d36:	78 94       	sei
    1d38:	03 c0       	rjmp	.+6      	; 0x1d40 <_Z33activateEventUsingCurrentSettingsP2SC+0x324>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <_Z14keyTransmitterb>
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <g_event_commenced>
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <_Z33activateEventUsingCurrentSettingsP2SC+0x33e>
    1d48:	01 15       	cp	r16, r1
    1d4a:	11 05       	cpc	r17, r1
    1d4c:	19 f0       	breq	.+6      	; 0x1d54 <_Z33activateEventUsingCurrentSettingsP2SC+0x338>
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	f8 01       	movw	r30, r16
    1d52:	80 83       	st	Z, r24
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <_Z14keyTransmitterb>
    1d5a:	10 92 5f 45 	sts	0x455F, r1	; 0x80455f <g_waiting_for_next_event>
    1d5e:	8a e5       	ldi	r24, 0x5A	; 90
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_update_timeout_seconds>
    1d66:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_update_timeout_seconds+0x1>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    1d6e:	8c ec       	ldi	r24, 0xCC	; 204
    1d70:	0d c0       	rjmp	.+26     	; 0x1d8c <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    1d72:	8d ec       	ldi	r24, 0xCD	; 205
    1d74:	0b c0       	rjmp	.+22     	; 0x1d8c <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    1d76:	8b ec       	ldi	r24, 0xCB	; 203
    1d78:	09 c0       	rjmp	.+18     	; 0x1d8c <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    1d7a:	8a ec       	ldi	r24, 0xCA	; 202
    1d7c:	07 c0       	rjmp	.+14     	; 0x1d8c <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    1d7e:	89 ec       	ldi	r24, 0xC9	; 201
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    1d82:	88 ec       	ldi	r24, 0xC8	; 200
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    1d86:	87 ec       	ldi	r24, 0xC7	; 199
    1d88:	01 c0       	rjmp	.+2      	; 0x1d8c <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	0f 90       	pop	r0
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
    1d9e:	08 95       	ret

00001da0 <_Z8rtc_initv>:
    1da0:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <ds3231_init>
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <ds3231_1s_sqw>
    1daa:	88 23       	and	r24, r24
    1dac:	11 f0       	breq	.+4      	; 0x1db2 <_Z8rtc_initv+0x12>
    1dae:	8c ef       	ldi	r24, 0xFC	; 252
    1db0:	08 95       	ret
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	08 95       	ret

00001db6 <_Z18antennaIsConnectedv>:
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	08 95       	ret

00001dba <_Z13startEventNow19EventActionSource_t>:
    1dba:	cf 93       	push	r28
    1dbc:	c8 2f       	mov	r28, r24
    1dbe:	0e 94 ad 11 	call	0x235a	; 0x235a <_Z23clockConfigurationCheckv>
    1dc2:	c1 11       	cpse	r28, r1
    1dc4:	0e c0       	rjmp	.+28     	; 0x1de2 <_Z13startEventNow19EventActionSource_t+0x28>
    1dc6:	82 30       	cpi	r24, 0x02	; 2
    1dc8:	31 f4       	brne	.+12     	; 0x1dd6 <_Z13startEventNow19EventActionSource_t+0x1c>
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z11setupForFoxP5Fox_t13EventAction_t>
    1dd4:	3f c0       	rjmp	.+126    	; 0x1e54 <_Z13startEventNow19EventActionSource_t+0x9a>
    1dd6:	63 e0       	ldi	r22, 0x03	; 3
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z11setupForFoxP5Fox_t13EventAction_t>
    1de0:	39 c0       	rjmp	.+114    	; 0x1e54 <_Z13startEventNow19EventActionSource_t+0x9a>
    1de2:	c2 30       	cpi	r28, 0x02	; 2
    1de4:	d1 f4       	brne	.+52     	; 0x1e1a <_Z13startEventNow19EventActionSource_t+0x60>
    1de6:	82 30       	cpi	r24, 0x02	; 2
    1de8:	31 f4       	brne	.+12     	; 0x1df6 <_Z13startEventNow19EventActionSource_t+0x3c>
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z11setupForFoxP5Fox_t13EventAction_t>
    1df4:	2f c0       	rjmp	.+94     	; 0x1e54 <_Z13startEventNow19EventActionSource_t+0x9a>
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	21 f0       	breq	.+8      	; 0x1e02 <_Z13startEventNow19EventActionSource_t+0x48>
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <_Z13startEventNow19EventActionSource_t+0x48>
    1dfe:	83 30       	cpi	r24, 0x03	; 3
    1e00:	31 f4       	brne	.+12     	; 0x1e0e <_Z13startEventNow19EventActionSource_t+0x54>
    1e02:	61 e0       	ldi	r22, 0x01	; 1
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z11setupForFoxP5Fox_t13EventAction_t>
    1e0c:	23 c0       	rjmp	.+70     	; 0x1e54 <_Z13startEventNow19EventActionSource_t+0x9a>
    1e0e:	63 e0       	ldi	r22, 0x03	; 3
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z11setupForFoxP5Fox_t13EventAction_t>
    1e18:	1d c0       	rjmp	.+58     	; 0x1e54 <_Z13startEventNow19EventActionSource_t+0x9a>
    1e1a:	82 30       	cpi	r24, 0x02	; 2
    1e1c:	31 f4       	brne	.+12     	; 0x1e2a <_Z13startEventNow19EventActionSource_t+0x70>
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z11setupForFoxP5Fox_t13EventAction_t>
    1e28:	15 c0       	rjmp	.+42     	; 0x1e54 <_Z13startEventNow19EventActionSource_t+0x9a>
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	31 f4       	brne	.+12     	; 0x1e3a <_Z13startEventNow19EventActionSource_t+0x80>
    1e2e:	62 e0       	ldi	r22, 0x02	; 2
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z11setupForFoxP5Fox_t13EventAction_t>
    1e38:	0d c0       	rjmp	.+26     	; 0x1e54 <_Z13startEventNow19EventActionSource_t+0x9a>
    1e3a:	84 30       	cpi	r24, 0x04	; 4
    1e3c:	31 f4       	brne	.+12     	; 0x1e4a <_Z13startEventNow19EventActionSource_t+0x90>
    1e3e:	63 e0       	ldi	r22, 0x03	; 3
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z11setupForFoxP5Fox_t13EventAction_t>
    1e48:	05 c0       	rjmp	.+10     	; 0x1e54 <_Z13startEventNow19EventActionSource_t+0x9a>
    1e4a:	63 e0       	ldi	r22, 0x03	; 3
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_Z11setupForFoxP5Fox_t13EventAction_t>
    1e54:	cf 91       	pop	r28
    1e56:	08 95       	ret

00001e58 <_Z11setupForFoxP5Fox_t13EventAction_t>:
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <_Z11setupForFoxP5Fox_t13EventAction_t+0x8>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	16 2f       	mov	r17, r22
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	31 f0       	breq	.+12     	; 0x1e76 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	80 81       	ld	r24, Z
    1e6e:	82 31       	cpi	r24, 0x12	; 18
    1e70:	11 f0       	breq	.+4      	; 0x1e76 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
    1e72:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <g_fox>
    1e76:	ce 01       	movw	r24, r28
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	0e 94 64 14 	call	0x28c8	; 0x28c8 <ds3231_get_epoch>
    1e7e:	29 81       	ldd	r18, Y+1	; 0x01
    1e80:	21 11       	cpse	r18, r1
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <_Z11setupForFoxP5Fox_t13EventAction_t+0x30>
    1e84:	0e 94 65 01 	call	0x2ca	; 0x2ca <set_system_time>
    1e88:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <g_event_commenced>
    1e8c:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <g_event_enabled>
    1e90:	89 b1       	in	r24, 0x09	; 9
    1e92:	80 64       	ori	r24, 0x40	; 64
    1e94:	89 b9       	out	0x09, r24	; 9
    1e96:	e0 91 1a 40 	lds	r30, 0x401A	; 0x80401a <g_fox>
    1e9a:	8e 2f       	mov	r24, r30
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	31 97       	sbiw	r30, 0x01	; 1
    1ea2:	e1 31       	cpi	r30, 0x11	; 17
    1ea4:	f1 05       	cpc	r31, r1
    1ea6:	08 f0       	brcs	.+2      	; 0x1eaa <_Z11setupForFoxP5Fox_t13EventAction_t+0x52>
    1ea8:	8e c1       	rjmp	.+796    	; 0x21c6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x36e>
    1eaa:	ea 55       	subi	r30, 0x5A	; 90
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <__tablejump2__>
    1eb2:	e6 e2       	ldi	r30, 0x26	; 38
    1eb4:	f5 e4       	ldi	r31, 0x45	; 69
    1eb6:	8d e4       	ldi	r24, 0x4D	; 77
    1eb8:	9f e4       	ldi	r25, 0x4F	; 79
    1eba:	80 83       	st	Z, r24
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	85 e4       	ldi	r24, 0x45	; 69
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	82 83       	std	Z+2, r24	; 0x02
    1ec4:	93 83       	std	Z+3, r25	; 0x03
    1ec6:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    1eca:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	01 c0       	rjmp	.+2      	; 0x1ed4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x7c>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	88 23       	and	r24, r24
    1ed6:	99 f0       	breq	.+38     	; 0x1efe <_Z11setupForFoxP5Fox_t13EventAction_t+0xa6>
    1ed8:	e6 e2       	ldi	r30, 0x26	; 38
    1eda:	f5 e4       	ldi	r31, 0x45	; 69
    1edc:	8d e4       	ldi	r24, 0x4D	; 77
    1ede:	9f e4       	ldi	r25, 0x4F	; 79
    1ee0:	80 83       	st	Z, r24
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	89 e4       	ldi	r24, 0x49	; 73
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	82 83       	std	Z+2, r24	; 0x02
    1eea:	93 83       	std	Z+3, r25	; 0x03
    1eec:	8c e3       	ldi	r24, 0x3C	; 60
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    1ef4:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <_Z11setupForFoxP5Fox_t13EventAction_t+0xa6>
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	88 23       	and	r24, r24
    1f00:	99 f0       	breq	.+38     	; 0x1f28 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>
    1f02:	e6 e2       	ldi	r30, 0x26	; 38
    1f04:	f5 e4       	ldi	r31, 0x45	; 69
    1f06:	8d e4       	ldi	r24, 0x4D	; 77
    1f08:	9f e4       	ldi	r25, 0x4F	; 79
    1f0a:	80 83       	st	Z, r24
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	83 e5       	ldi	r24, 0x53	; 83
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	82 83       	std	Z+2, r24	; 0x02
    1f14:	93 83       	std	Z+3, r25	; 0x03
    1f16:	88 e7       	ldi	r24, 0x78	; 120
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    1f1e:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	88 23       	and	r24, r24
    1f2a:	99 f0       	breq	.+38     	; 0x1f52 <_Z11setupForFoxP5Fox_t13EventAction_t+0xfa>
    1f2c:	e6 e2       	ldi	r30, 0x26	; 38
    1f2e:	f5 e4       	ldi	r31, 0x45	; 69
    1f30:	8d e4       	ldi	r24, 0x4D	; 77
    1f32:	9f e4       	ldi	r25, 0x4F	; 79
    1f34:	80 83       	st	Z, r24
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	88 e4       	ldi	r24, 0x48	; 72
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	82 83       	std	Z+2, r24	; 0x02
    1f3e:	93 83       	std	Z+3, r25	; 0x03
    1f40:	84 eb       	ldi	r24, 0xB4	; 180
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    1f48:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	01 c0       	rjmp	.+2      	; 0x1f52 <_Z11setupForFoxP5Fox_t13EventAction_t+0xfa>
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	88 23       	and	r24, r24
    1f54:	81 f0       	breq	.+32     	; 0x1f76 <_Z11setupForFoxP5Fox_t13EventAction_t+0x11e>
    1f56:	e6 e2       	ldi	r30, 0x26	; 38
    1f58:	f5 e4       	ldi	r31, 0x45	; 69
    1f5a:	8d e4       	ldi	r24, 0x4D	; 77
    1f5c:	9f e4       	ldi	r25, 0x4F	; 79
    1f5e:	80 83       	st	Z, r24
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	85 e3       	ldi	r24, 0x35	; 53
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	82 83       	std	Z+2, r24	; 0x02
    1f68:	93 83       	std	Z+3, r25	; 0x03
    1f6a:	80 ef       	ldi	r24, 0xF0	; 240
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    1f72:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	be 01       	movw	r22, r28
    1f80:	6e 5f       	subi	r22, 0xFE	; 254
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	86 e2       	ldi	r24, 0x26	; 38
    1f86:	95 e4       	ldi	r25, 0x45	; 69
    1f88:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    1f8c:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1f90:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    1f94:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1f98:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1f9c:	8c e3       	ldi	r24, 0x3C	; 60
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    1fa4:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1fa8:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    1fac:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    1fb0:	80 ef       	ldi	r24, 0xF0	; 240
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    1fb8:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    1fbc:	38 c1       	rjmp	.+624    	; 0x222e <_Z11setupForFoxP5Fox_t13EventAction_t+0x3d6>
    1fbe:	e6 e2       	ldi	r30, 0x26	; 38
    1fc0:	f5 e4       	ldi	r31, 0x45	; 69
    1fc2:	8d e4       	ldi	r24, 0x4D	; 77
    1fc4:	95 e4       	ldi	r25, 0x45	; 69
    1fc6:	80 83       	st	Z, r24
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	12 82       	std	Z+2, r1	; 0x02
    1fcc:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    1fd0:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	01 c0       	rjmp	.+2      	; 0x1fda <_Z11setupForFoxP5Fox_t13EventAction_t+0x182>
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	88 23       	and	r24, r24
    1fdc:	81 f0       	breq	.+32     	; 0x1ffe <_Z11setupForFoxP5Fox_t13EventAction_t+0x1a6>
    1fde:	e6 e2       	ldi	r30, 0x26	; 38
    1fe0:	f5 e4       	ldi	r31, 0x45	; 69
    1fe2:	8d e4       	ldi	r24, 0x4D	; 77
    1fe4:	99 e4       	ldi	r25, 0x49	; 73
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	12 82       	std	Z+2, r1	; 0x02
    1fec:	8c e0       	ldi	r24, 0x0C	; 12
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    1ff4:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <_Z11setupForFoxP5Fox_t13EventAction_t+0x1a6>
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	88 23       	and	r24, r24
    2000:	81 f0       	breq	.+32     	; 0x2022 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ca>
    2002:	e6 e2       	ldi	r30, 0x26	; 38
    2004:	f5 e4       	ldi	r31, 0x45	; 69
    2006:	8d e4       	ldi	r24, 0x4D	; 77
    2008:	93 e5       	ldi	r25, 0x53	; 83
    200a:	80 83       	st	Z, r24
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	12 82       	std	Z+2, r1	; 0x02
    2010:	88 e1       	ldi	r24, 0x18	; 24
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2018:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ca>
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	88 23       	and	r24, r24
    2024:	81 f0       	breq	.+32     	; 0x2046 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ee>
    2026:	e6 e2       	ldi	r30, 0x26	; 38
    2028:	f5 e4       	ldi	r31, 0x45	; 69
    202a:	8d e4       	ldi	r24, 0x4D	; 77
    202c:	98 e4       	ldi	r25, 0x48	; 72
    202e:	80 83       	st	Z, r24
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	12 82       	std	Z+2, r1	; 0x02
    2034:	84 e2       	ldi	r24, 0x24	; 36
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    203c:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ee>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	88 23       	and	r24, r24
    2048:	69 f0       	breq	.+26     	; 0x2064 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20c>
    204a:	e6 e2       	ldi	r30, 0x26	; 38
    204c:	f5 e4       	ldi	r31, 0x45	; 69
    204e:	8d e4       	ldi	r24, 0x4D	; 77
    2050:	95 e3       	ldi	r25, 0x35	; 53
    2052:	80 83       	st	Z, r24
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	12 82       	std	Z+2, r1	; 0x02
    2058:	80 e3       	ldi	r24, 0x30	; 48
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2060:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	8a 83       	std	Y+2, r24	; 0x02
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	be 01       	movw	r22, r28
    206e:	6e 5f       	subi	r22, 0xFE	; 254
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	86 e2       	ldi	r24, 0x26	; 38
    2074:	95 e4       	ldi	r25, 0x45	; 69
    2076:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    207a:	88 e0       	ldi	r24, 0x08	; 8
    207c:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    2080:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2084:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    2088:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    208c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2090:	88 e5       	ldi	r24, 0x58	; 88
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    2098:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    209c:	8c e0       	ldi	r24, 0x0C	; 12
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    20a4:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    20a8:	80 e3       	ldi	r24, 0x30	; 48
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    20b0:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    20b4:	bc c0       	rjmp	.+376    	; 0x222e <_Z11setupForFoxP5Fox_t13EventAction_t+0x3d6>
    20b6:	e6 e2       	ldi	r30, 0x26	; 38
    20b8:	f5 e4       	ldi	r31, 0x45	; 69
    20ba:	8f e4       	ldi	r24, 0x4F	; 79
    20bc:	95 e4       	ldi	r25, 0x45	; 69
    20be:	80 83       	st	Z, r24
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	12 82       	std	Z+2, r1	; 0x02
    20c4:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    20c8:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x27a>
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	88 23       	and	r24, r24
    20d4:	81 f0       	breq	.+32     	; 0x20f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x29e>
    20d6:	e6 e2       	ldi	r30, 0x26	; 38
    20d8:	f5 e4       	ldi	r31, 0x45	; 69
    20da:	8f e4       	ldi	r24, 0x4F	; 79
    20dc:	99 e4       	ldi	r25, 0x49	; 73
    20de:	80 83       	st	Z, r24
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	12 82       	std	Z+2, r1	; 0x02
    20e4:	8c e0       	ldi	r24, 0x0C	; 12
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    20ec:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x29e>
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	88 23       	and	r24, r24
    20f8:	81 f0       	breq	.+32     	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c2>
    20fa:	e6 e2       	ldi	r30, 0x26	; 38
    20fc:	f5 e4       	ldi	r31, 0x45	; 69
    20fe:	8f e4       	ldi	r24, 0x4F	; 79
    2100:	93 e5       	ldi	r25, 0x53	; 83
    2102:	80 83       	st	Z, r24
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	12 82       	std	Z+2, r1	; 0x02
    2108:	88 e1       	ldi	r24, 0x18	; 24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2110:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	01 c0       	rjmp	.+2      	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c2>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	88 23       	and	r24, r24
    211c:	81 f0       	breq	.+32     	; 0x213e <_Z11setupForFoxP5Fox_t13EventAction_t+0x2e6>
    211e:	e6 e2       	ldi	r30, 0x26	; 38
    2120:	f5 e4       	ldi	r31, 0x45	; 69
    2122:	8f e4       	ldi	r24, 0x4F	; 79
    2124:	98 e4       	ldi	r25, 0x48	; 72
    2126:	80 83       	st	Z, r24
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	12 82       	std	Z+2, r1	; 0x02
    212c:	84 e2       	ldi	r24, 0x24	; 36
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2134:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	01 c0       	rjmp	.+2      	; 0x213e <_Z11setupForFoxP5Fox_t13EventAction_t+0x2e6>
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	88 23       	and	r24, r24
    2140:	69 f0       	breq	.+26     	; 0x215c <_Z11setupForFoxP5Fox_t13EventAction_t+0x304>
    2142:	e6 e2       	ldi	r30, 0x26	; 38
    2144:	f5 e4       	ldi	r31, 0x45	; 69
    2146:	8f e4       	ldi	r24, 0x4F	; 79
    2148:	95 e3       	ldi	r25, 0x35	; 53
    214a:	80 83       	st	Z, r24
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	12 82       	std	Z+2, r1	; 0x02
    2150:	80 e3       	ldi	r24, 0x30	; 48
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2158:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	8a 83       	std	Y+2, r24	; 0x02
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	be 01       	movw	r22, r28
    2166:	6e 5f       	subi	r22, 0xFE	; 254
    2168:	7f 4f       	sbci	r23, 0xFF	; 255
    216a:	86 e2       	ldi	r24, 0x26	; 38
    216c:	95 e4       	ldi	r25, 0x45	; 69
    216e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    2172:	8f e0       	ldi	r24, 0x0F	; 15
    2174:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    2178:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    217c:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    2180:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2184:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2188:	88 e5       	ldi	r24, 0x58	; 88
    218a:	92 e0       	ldi	r25, 0x02	; 2
    218c:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    2190:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    2194:	8c e0       	ldi	r24, 0x0C	; 12
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    219c:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    21a0:	80 e3       	ldi	r24, 0x30	; 48
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    21a8:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    21ac:	40 c0       	rjmp	.+128    	; 0x222e <_Z11setupForFoxP5Fox_t13EventAction_t+0x3d6>
    21ae:	83 e5       	ldi	r24, 0x53	; 83
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    21b6:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    21ba:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    21be:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x370>
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	88 23       	and	r24, r24
    21ca:	39 f0       	breq	.+14     	; 0x21da <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
    21cc:	e6 e2       	ldi	r30, 0x26	; 38
    21ce:	f5 e4       	ldi	r31, 0x45	; 69
    21d0:	8d e4       	ldi	r24, 0x4D	; 77
    21d2:	9f e4       	ldi	r25, 0x4F	; 79
    21d4:	80 83       	st	Z, r24
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	12 82       	std	Z+2, r1	; 0x02
    21da:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    21de:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	8a 83       	std	Y+2, r24	; 0x02
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	be 01       	movw	r22, r28
    21ec:	6e 5f       	subi	r22, 0xFE	; 254
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	86 e2       	ldi	r24, 0x26	; 38
    21f2:	95 e4       	ldi	r25, 0x45	; 69
    21f4:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z9makeMorsePcPbS0_>
    21f8:	88 e0       	ldi	r24, 0x08	; 8
    21fa:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    21fe:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2202:	0e 94 c5 0c 	call	0x198a	; 0x198a <_Z13throttleValueh>
    2206:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    220a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    220e:	88 e5       	ldi	r24, 0x58	; 88
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    2216:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    221a:	8c e3       	ldi	r24, 0x3C	; 60
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    2222:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    2226:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    222a:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    222e:	11 11       	cpse	r17, r1
    2230:	0e c0       	rjmp	.+28     	; 0x224e <_Z11setupForFoxP5Fox_t13EventAction_t+0x3f6>
    2232:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <g_event_commenced>
    2236:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <g_event_enabled>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <_Z14keyTransmitterb>
    2240:	89 b1       	in	r24, 0x09	; 9
    2242:	80 64       	ori	r24, 0x40	; 64
    2244:	89 b9       	out	0x09, r24	; 9
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_Z18powerToTransmitterb>
    224c:	80 c0       	rjmp	.+256    	; 0x234e <_Z11setupForFoxP5Fox_t13EventAction_t+0x4f6>
    224e:	11 30       	cpi	r17, 0x01	; 1
    2250:	09 f0       	breq	.+2      	; 0x2254 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3fc>
    2252:	42 c0       	rjmp	.+132    	; 0x22d8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x480>
    2254:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    2258:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    225c:	89 2b       	or	r24, r25
    225e:	61 f0       	breq	.+24     	; 0x2278 <_Z11setupForFoxP5Fox_t13EventAction_t+0x420>
    2260:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    2264:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2268:	91 95       	neg	r25
    226a:	81 95       	neg	r24
    226c:	91 09       	sbc	r25, r1
    226e:	09 2e       	mov	r0, r25
    2270:	00 0c       	add	r0, r0
    2272:	aa 0b       	sbc	r26, r26
    2274:	bb 0b       	sbc	r27, r27
    2276:	08 c0       	rjmp	.+16     	; 0x2288 <_Z11setupForFoxP5Fox_t13EventAction_t+0x430>
    2278:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    227c:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    2280:	09 2e       	mov	r0, r25
    2282:	00 0c       	add	r0, r0
    2284:	aa 0b       	sbc	r26, r26
    2286:	bb 0b       	sbc	r27, r27
    2288:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    228c:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    2290:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    2294:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    2298:	10 92 13 40 	sts	0x4013, r1	; 0x804013 <g_use_rtc_to_time_event>
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <g_event_commenced>
    22a2:	80 93 5c 45 	sts	0x455C, r24	; 0x80455c <g_event_enabled>
    22a6:	8e ef       	ldi	r24, 0xFE	; 254
    22a8:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    22ac:	80 91 60 45 	lds	r24, 0x4560	; 0x804560 <_ZL13g_go_to_sleep>
    22b0:	88 23       	and	r24, r24
    22b2:	31 f0       	breq	.+12     	; 0x22c0 <_Z11setupForFoxP5Fox_t13EventAction_t+0x468>
    22b4:	90 91 25 45 	lds	r25, 0x4525	; 0x804525 <_ZL11g_sleepType>
    22b8:	91 11       	cpse	r25, r1
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x46a>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	01 c0       	rjmp	.+2      	; 0x22c2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x46a>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	88 23       	and	r24, r24
    22c4:	29 f0       	breq	.+10     	; 0x22d0 <_Z11setupForFoxP5Fox_t13EventAction_t+0x478>
    22c6:	83 e0       	ldi	r24, 0x03	; 3
    22c8:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    22cc:	10 92 60 45 	sts	0x4560, r1	; 0x804560 <_ZL13g_go_to_sleep>
    22d0:	8c e3       	ldi	r24, 0x3C	; 60
    22d2:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    22d6:	3b c0       	rjmp	.+118    	; 0x234e <_Z11setupForFoxP5Fox_t13EventAction_t+0x4f6>
    22d8:	12 30       	cpi	r17, 0x02	; 2
    22da:	81 f5       	brne	.+96     	; 0x233c <_Z11setupForFoxP5Fox_t13EventAction_t+0x4e4>
    22dc:	10 92 13 40 	sts	0x4013, r1	; 0x804013 <g_use_rtc_to_time_event>
    22e0:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    22e4:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    22e8:	09 2e       	mov	r0, r25
    22ea:	00 0c       	add	r0, r0
    22ec:	aa 0b       	sbc	r26, r26
    22ee:	bb 0b       	sbc	r27, r27
    22f0:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    22f4:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    22f8:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    22fc:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <g_event_commenced>
    2306:	80 93 5c 45 	sts	0x455C, r24	; 0x80455c <g_event_enabled>
    230a:	8d ef       	ldi	r24, 0xFD	; 253
    230c:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    2310:	80 91 60 45 	lds	r24, 0x4560	; 0x804560 <_ZL13g_go_to_sleep>
    2314:	88 23       	and	r24, r24
    2316:	31 f0       	breq	.+12     	; 0x2324 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4cc>
    2318:	90 91 25 45 	lds	r25, 0x4525	; 0x804525 <_ZL11g_sleepType>
    231c:	91 11       	cpse	r25, r1
    231e:	03 c0       	rjmp	.+6      	; 0x2326 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4ce>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	01 c0       	rjmp	.+2      	; 0x2326 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4ce>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	88 23       	and	r24, r24
    2328:	29 f0       	breq	.+10     	; 0x2334 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4dc>
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    2330:	10 92 60 45 	sts	0x4560, r1	; 0x804560 <_ZL13g_go_to_sleep>
    2334:	8c e3       	ldi	r24, 0x3C	; 60
    2336:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    233a:	09 c0       	rjmp	.+18     	; 0x234e <_Z11setupForFoxP5Fox_t13EventAction_t+0x4f6>
    233c:	ce 01       	movw	r24, r28
    233e:	02 96       	adiw	r24, 0x02	; 2
    2340:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_Z11launchEventP2SC>
    2344:	81 11       	cpse	r24, r1
    2346:	03 c0       	rjmp	.+6      	; 0x234e <_Z11setupForFoxP5Fox_t13EventAction_t+0x4f6>
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_use_rtc_to_time_event>
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	08 95       	ret

0000235a <_Z23clockConfigurationCheckv>:
    235a:	cf 92       	push	r12
    235c:	df 92       	push	r13
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    236e:	00 91 58 45 	lds	r16, 0x4558	; 0x804558 <g_event_finish_epoch>
    2372:	10 91 59 45 	lds	r17, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    2376:	20 91 5a 45 	lds	r18, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    237a:	30 91 5b 45 	lds	r19, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    237e:	01 15       	cp	r16, r1
    2380:	16 46       	sbci	r17, 0x66	; 102
    2382:	2e 4e       	sbci	r18, 0xEE	; 238
    2384:	3f 45       	sbci	r19, 0x5F	; 95
    2386:	b8 f0       	brcs	.+46     	; 0x23b6 <_Z23clockConfigurationCheckv+0x5c>
    2388:	00 91 54 45 	lds	r16, 0x4554	; 0x804554 <g_event_start_epoch>
    238c:	10 91 55 45 	lds	r17, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2390:	20 91 56 45 	lds	r18, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2394:	30 91 57 45 	lds	r19, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2398:	01 15       	cp	r16, r1
    239a:	16 46       	sbci	r17, 0x66	; 102
    239c:	2e 4e       	sbci	r18, 0xEE	; 238
    239e:	3f 45       	sbci	r19, 0x5F	; 95
    23a0:	60 f0       	brcs	.+24     	; 0x23ba <_Z23clockConfigurationCheckv+0x60>
    23a2:	61 15       	cp	r22, r1
    23a4:	26 e6       	ldi	r18, 0x66	; 102
    23a6:	72 07       	cpc	r23, r18
    23a8:	2e ee       	ldi	r18, 0xEE	; 238
    23aa:	82 07       	cpc	r24, r18
    23ac:	2f e5       	ldi	r18, 0x5F	; 95
    23ae:	92 07       	cpc	r25, r18
    23b0:	30 f4       	brcc	.+12     	; 0x23be <_Z23clockConfigurationCheckv+0x64>
    23b2:	21 e0       	ldi	r18, 0x01	; 1
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <_Z23clockConfigurationCheckv+0x66>
    23b6:	21 e0       	ldi	r18, 0x01	; 1
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <_Z23clockConfigurationCheckv+0x66>
    23ba:	21 e0       	ldi	r18, 0x01	; 1
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <_Z23clockConfigurationCheckv+0x66>
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	21 11       	cpse	r18, r1
    23c2:	3b c0       	rjmp	.+118    	; 0x243a <_Z23clockConfigurationCheckv+0xe0>
    23c4:	00 91 58 45 	lds	r16, 0x4558	; 0x804558 <g_event_finish_epoch>
    23c8:	10 91 59 45 	lds	r17, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    23cc:	20 91 5a 45 	lds	r18, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    23d0:	30 91 5b 45 	lds	r19, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    23d4:	c0 90 54 45 	lds	r12, 0x4554	; 0x804554 <g_event_start_epoch>
    23d8:	d0 90 55 45 	lds	r13, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    23dc:	e0 90 56 45 	lds	r14, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    23e0:	f0 90 57 45 	lds	r15, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    23e4:	c0 16       	cp	r12, r16
    23e6:	d1 06       	cpc	r13, r17
    23e8:	e2 06       	cpc	r14, r18
    23ea:	f3 06       	cpc	r15, r19
    23ec:	40 f5       	brcc	.+80     	; 0x243e <_Z23clockConfigurationCheckv+0xe4>
    23ee:	00 91 58 45 	lds	r16, 0x4558	; 0x804558 <g_event_finish_epoch>
    23f2:	10 91 59 45 	lds	r17, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    23f6:	20 91 5a 45 	lds	r18, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    23fa:	30 91 5b 45 	lds	r19, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    23fe:	06 17       	cp	r16, r22
    2400:	17 07       	cpc	r17, r23
    2402:	28 07       	cpc	r18, r24
    2404:	39 07       	cpc	r19, r25
    2406:	e8 f0       	brcs	.+58     	; 0x2442 <_Z23clockConfigurationCheckv+0xe8>
    2408:	00 91 54 45 	lds	r16, 0x4554	; 0x804554 <g_event_start_epoch>
    240c:	10 91 55 45 	lds	r17, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2410:	20 91 56 45 	lds	r18, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2414:	30 91 57 45 	lds	r19, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2418:	06 17       	cp	r16, r22
    241a:	17 07       	cpc	r17, r23
    241c:	28 07       	cpc	r18, r24
    241e:	39 07       	cpc	r19, r25
    2420:	30 f4       	brcc	.+12     	; 0x242e <_Z23clockConfigurationCheckv+0xd4>
    2422:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
    2426:	81 11       	cpse	r24, r1
    2428:	0e c0       	rjmp	.+28     	; 0x2446 <_Z23clockConfigurationCheckv+0xec>
    242a:	83 e0       	ldi	r24, 0x03	; 3
    242c:	0f c0       	rjmp	.+30     	; 0x244c <_Z23clockConfigurationCheckv+0xf2>
    242e:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
    2432:	81 11       	cpse	r24, r1
    2434:	0a c0       	rjmp	.+20     	; 0x244a <_Z23clockConfigurationCheckv+0xf0>
    2436:	84 e0       	ldi	r24, 0x04	; 4
    2438:	09 c0       	rjmp	.+18     	; 0x244c <_Z23clockConfigurationCheckv+0xf2>
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	07 c0       	rjmp	.+14     	; 0x244c <_Z23clockConfigurationCheckv+0xf2>
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	05 c0       	rjmp	.+10     	; 0x244c <_Z23clockConfigurationCheckv+0xf2>
    2442:	82 e0       	ldi	r24, 0x02	; 2
    2444:	03 c0       	rjmp	.+6      	; 0x244c <_Z23clockConfigurationCheckv+0xf2>
    2446:	85 e0       	ldi	r24, 0x05	; 5
    2448:	01 c0       	rjmp	.+2      	; 0x244c <_Z23clockConfigurationCheckv+0xf2>
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	ff 90       	pop	r15
    2452:	ef 90       	pop	r14
    2454:	df 90       	pop	r13
    2456:	cf 90       	pop	r12
    2458:	08 95       	ret

0000245a <_Z41__static_initialization_and_destruction_0ii>:
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	ec 01       	movw	r28, r24
    2464:	8b 01       	movw	r16, r22
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	39 f4       	brne	.+14     	; 0x2478 <_Z41__static_initialization_and_destruction_0ii+0x1e>
    246a:	6f 3f       	cpi	r22, 0xFF	; 255
    246c:	7f 4f       	sbci	r23, 0xFF	; 255
    246e:	21 f4       	brne	.+8      	; 0x2478 <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile bool g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { false, false, false, false, false };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    2470:	86 e6       	ldi	r24, 0x66	; 102
    2472:	95 e4       	ldi	r25, 0x45	; 69
    2474:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN13EepromManagerC1Ev>
    2478:	cd 2b       	or	r28, r29
    247a:	39 f4       	brne	.+14     	; 0x248a <_Z41__static_initialization_and_destruction_0ii+0x30>
    247c:	0f 3f       	cpi	r16, 0xFF	; 255
    247e:	1f 4f       	sbci	r17, 0xFF	; 255
    2480:	21 f4       	brne	.+8      	; 0x248a <_Z41__static_initialization_and_destruction_0ii+0x30>
    2482:	86 e6       	ldi	r24, 0x66	; 102
    2484:	95 e4       	ldi	r25, 0x45	; 69
    2486:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	0f 91       	pop	r16
    2492:	08 95       	ret

00002494 <_GLOBAL__sub_I_g_battery_type>:
    2494:	6f ef       	ldi	r22, 0xFF	; 255
    2496:	7f ef       	ldi	r23, 0xFF	; 255
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z41__static_initialization_and_destruction_0ii>
    24a0:	08 95       	ret

000024a2 <_GLOBAL__sub_D_g_battery_type>:
    24a2:	6f ef       	ldi	r22, 0xFF	; 255
    24a4:	7f ef       	ldi	r23, 0xFF	; 255
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z41__static_initialization_and_destruction_0ii>
    24ae:	08 95       	ret

000024b0 <_Z41__static_initialization_and_destruction_0ii>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	ec 01       	movw	r28, r24
    24be:	7b 01       	movw	r14, r22
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	79 f4       	brne	.+30     	; 0x24e2 <_Z41__static_initialization_and_destruction_0ii+0x32>
    24c4:	6f 3f       	cpi	r22, 0xFF	; 255
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	61 f4       	brne	.+24     	; 0x24e2 <_Z41__static_initialization_and_destruction_0ii+0x32>
    24ca:	00 e0       	ldi	r16, 0x00	; 0
    24cc:	10 e4       	ldi	r17, 0x40	; 64
    24ce:	2c eb       	ldi	r18, 0xBC	; 188
    24d0:	36 e4       	ldi	r19, 0x46	; 70
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	50 e0       	ldi	r21, 0x00	; 0
    24d6:	69 e4       	ldi	r22, 0x49	; 73
    24d8:	73 e4       	ldi	r23, 0x43	; 67
    24da:	86 e7       	ldi	r24, 0x76	; 118
    24dc:	95 e4       	ldi	r25, 0x45	; 69
    24de:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN8GoertzelC1Eff>
    24e2:	cd 2b       	or	r28, r29
    24e4:	39 f4       	brne	.+14     	; 0x24f4 <_Z41__static_initialization_and_destruction_0ii+0x44>
    24e6:	ef 20       	and	r14, r15
    24e8:	e0 94       	com	r14
    24ea:	21 f4       	brne	.+8      	; 0x24f4 <_Z41__static_initialization_and_destruction_0ii+0x44>
    24ec:	86 e7       	ldi	r24, 0x76	; 118
    24ee:	95 e4       	ldi	r25, 0x45	; 69
    24f0:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN8GoertzelD1Ev>
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	ff 90       	pop	r15
    24fe:	ef 90       	pop	r14
    2500:	08 95       	ret

00002502 <_Z9ADC0_readv>:
    2502:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    2506:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    250a:	08 95       	ret

0000250c <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    250c:	1f 92       	push	r1
    250e:	0f 92       	push	r0
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	0f 92       	push	r0
    2514:	11 24       	eor	r1, r1
    2516:	0b b6       	in	r0, 0x3b	; 59
    2518:	0f 92       	push	r0
    251a:	2f 93       	push	r18
    251c:	3f 93       	push	r19
    251e:	4f 93       	push	r20
    2520:	5f 93       	push	r21
    2522:	6f 93       	push	r22
    2524:	7f 93       	push	r23
    2526:	8f 93       	push	r24
    2528:	9f 93       	push	r25
    252a:	af 93       	push	r26
    252c:	bf 93       	push	r27
    252e:	ef 93       	push	r30
    2530:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    2532:	0e 94 81 12 	call	0x2502	; 0x2502 <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    2536:	bc 01       	movw	r22, r24
    2538:	86 e7       	ldi	r24, 0x76	; 118
    253a:	95 e4       	ldi	r25, 0x45	; 69
    253c:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN8Goertzel9DataPointEi>
    2540:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    2542:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    2546:	ff 91       	pop	r31
    2548:	ef 91       	pop	r30
    254a:	bf 91       	pop	r27
    254c:	af 91       	pop	r26
    254e:	9f 91       	pop	r25
    2550:	8f 91       	pop	r24
    2552:	7f 91       	pop	r23
    2554:	6f 91       	pop	r22
    2556:	5f 91       	pop	r21
    2558:	4f 91       	pop	r20
    255a:	3f 91       	pop	r19
    255c:	2f 91       	pop	r18
    255e:	0f 90       	pop	r0
    2560:	0b be       	out	0x3b, r0	; 59
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	0f 90       	pop	r0
    2568:	1f 90       	pop	r1
    256a:	18 95       	reti

0000256c <_GLOBAL__sub_I_g_activeADCChannel>:
    256c:	6f ef       	ldi	r22, 0xFF	; 255
    256e:	7f ef       	ldi	r23, 0xFF	; 255
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 58 12 	call	0x24b0	; 0x24b0 <_Z41__static_initialization_and_destruction_0ii>
    2578:	08 95       	ret

0000257a <_GLOBAL__sub_D_g_activeADCChannel>:
    257a:	6f ef       	ldi	r22, 0xFF	; 255
    257c:	7f ef       	ldi	r23, 0xFF	; 255
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 58 12 	call	0x24b0	; 0x24b0 <_Z41__static_initialization_and_destruction_0ii>
    2586:	08 95       	ret

00002588 <_Z10fet_driverb>:
{
} //~binio

void fet_driver(bool state)
{
	if(state == ON)
    2588:	88 23       	and	r24, r24
    258a:	21 f0       	breq	.+8      	; 0x2594 <_Z10fet_driverb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    258c:	81 b1       	in	r24, 0x01	; 1
    258e:	88 60       	ori	r24, 0x08	; 8
    2590:	81 b9       	out	0x01, r24	; 1
    2592:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2594:	81 b1       	in	r24, 0x01	; 1
    2596:	87 7f       	andi	r24, 0xF7	; 247
    2598:	81 b9       	out	0x01, r24	; 1
    259a:	08 95       	ret

0000259c <_Z10wifi_powerb>:
}


void wifi_power(bool state)
{
	if(state == ON)
    259c:	88 23       	and	r24, r24
    259e:	21 f0       	breq	.+8      	; 0x25a8 <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    25a0:	81 b1       	in	r24, 0x01	; 1
    25a2:	80 62       	ori	r24, 0x20	; 32
    25a4:	81 b9       	out	0x01, r24	; 1
    25a6:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    25a8:	81 b1       	in	r24, 0x01	; 1
    25aa:	8f 7d       	andi	r24, 0xDF	; 223
    25ac:	81 b9       	out	0x01, r24	; 1
    25ae:	08 95       	ret

000025b0 <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    25b0:	88 23       	and	r24, r24
    25b2:	21 f0       	breq	.+8      	; 0x25bc <_Z10wifi_resetb+0xc>
    25b4:	81 b1       	in	r24, 0x01	; 1
    25b6:	8f 7b       	andi	r24, 0xBF	; 191
    25b8:	81 b9       	out	0x01, r24	; 1
    25ba:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    25bc:	81 b1       	in	r24, 0x01	; 1
    25be:	80 64       	ori	r24, 0x40	; 64
    25c0:	81 b9       	out	0x01, r24	; 1
    25c2:	08 95       	ret

000025c4 <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    25c4:	2e b1       	in	r18, 0x0e	; 14
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	22 0f       	add	r18, r18
    25ca:	23 2f       	mov	r18, r19
    25cc:	22 1f       	adc	r18, r18
    25ce:	33 0b       	sbc	r19, r19
    25d0:	31 95       	neg	r19
	}
}

bool wifiPresent(void)
{
	return(!PORTD_get_pin_level(WIFI_MODULE_DETECT));
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	23 2b       	or	r18, r19
    25d6:	09 f0       	breq	.+2      	; 0x25da <_Z11wifiPresentv+0x16>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
}
    25da:	08 95       	ret

000025dc <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    25dc:	1f 92       	push	r1
    25de:	0f 92       	push	r0
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	0f 92       	push	r0
    25e4:	11 24       	eor	r1, r1
    25e6:	8f 93       	push	r24
    25e8:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    25ea:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    25ee:	88 23       	and	r24, r24
    25f0:	4c f4       	brge	.+18     	; 0x2604 <__vector_29+0x28>
	{
		count++;
    25f2:	80 91 79 45 	lds	r24, 0x4579	; 0x804579 <_ZZ11__vector_29E5count>
    25f6:	90 91 7a 45 	lds	r25, 0x457A	; 0x80457a <_ZZ11__vector_29E5count+0x1>
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	80 93 79 45 	sts	0x4579, r24	; 0x804579 <_ZZ11__vector_29E5count>
    2600:	90 93 7a 45 	sts	0x457A, r25	; 0x80457a <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    2604:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    2608:	84 ff       	sbrs	r24, 4
    260a:	09 c0       	rjmp	.+18     	; 0x261e <__vector_29+0x42>
	{
		count++;
    260c:	80 91 79 45 	lds	r24, 0x4579	; 0x804579 <_ZZ11__vector_29E5count>
    2610:	90 91 7a 45 	lds	r25, 0x457A	; 0x80457a <_ZZ11__vector_29E5count+0x1>
    2614:	01 96       	adiw	r24, 0x01	; 1
    2616:	80 93 79 45 	sts	0x4579, r24	; 0x804579 <_ZZ11__vector_29E5count>
    261a:	90 93 7a 45 	sts	0x457A, r25	; 0x80457a <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    261e:	8f ef       	ldi	r24, 0xFF	; 255
    2620:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    2624:	9f 91       	pop	r25
    2626:	8f 91       	pop	r24
    2628:	0f 90       	pop	r0
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	0f 90       	pop	r0
    262e:	1f 90       	pop	r1
    2630:	18 95       	reti

00002632 <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    2632:	1f 92       	push	r1
    2634:	0f 92       	push	r0
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	0f 92       	push	r0
    263a:	11 24       	eor	r1, r1
    263c:	8f 93       	push	r24
    263e:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    2640:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    2644:	82 ff       	sbrs	r24, 2
    2646:	09 c0       	rjmp	.+18     	; 0x265a <__vector_6+0x28>
	{
		count++;
    2648:	80 91 77 45 	lds	r24, 0x4577	; 0x804577 <_ZZ10__vector_6E5count>
    264c:	90 91 78 45 	lds	r25, 0x4578	; 0x804578 <_ZZ10__vector_6E5count+0x1>
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	80 93 77 45 	sts	0x4577, r24	; 0x804577 <_ZZ10__vector_6E5count>
    2656:	90 93 78 45 	sts	0x4578, r25	; 0x804578 <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    265a:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    265e:	84 ff       	sbrs	r24, 4
    2660:	09 c0       	rjmp	.+18     	; 0x2674 <__vector_6+0x42>
	{
		count++;
    2662:	80 91 77 45 	lds	r24, 0x4577	; 0x804577 <_ZZ10__vector_6E5count>
    2666:	90 91 78 45 	lds	r25, 0x4578	; 0x804578 <_ZZ10__vector_6E5count+0x1>
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	80 93 77 45 	sts	0x4577, r24	; 0x804577 <_ZZ10__vector_6E5count>
    2670:	90 93 78 45 	sts	0x4578, r25	; 0x804578 <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    2674:	8f ef       	ldi	r24, 0xFF	; 255
    2676:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    267a:	9f 91       	pop	r25
    267c:	8f 91       	pop	r24
    267e:	0f 90       	pop	r0
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	0f 90       	pop	r0
    2684:	1f 90       	pop	r1
    2686:	18 95       	reti

00002688 <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    2688:	80 b1       	in	r24, 0x00	; 0
    268a:	8b 7f       	andi	r24, 0xFB	; 251
    268c:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    268e:	e2 e1       	ldi	r30, 0x12	; 18
    2690:	f4 e0       	ldi	r31, 0x04	; 4
    2692:	80 81       	ld	r24, Z
    2694:	88 7f       	andi	r24, 0xF8	; 248
    2696:	82 60       	ori	r24, 0x02	; 2
    2698:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    269a:	80 b1       	in	r24, 0x00	; 0
    269c:	88 60       	ori	r24, 0x08	; 8
    269e:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    26a0:	81 b1       	in	r24, 0x01	; 1
    26a2:	87 7f       	andi	r24, 0xF7	; 247
    26a4:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    26a6:	80 b1       	in	r24, 0x00	; 0
    26a8:	8f 7e       	andi	r24, 0xEF	; 239
    26aa:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    26ac:	e4 e1       	ldi	r30, 0x14	; 20
    26ae:	f4 e0       	ldi	r31, 0x04	; 4
    26b0:	80 81       	ld	r24, Z
    26b2:	88 60       	ori	r24, 0x08	; 8
    26b4:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    26b6:	80 81       	ld	r24, Z
    26b8:	88 7f       	andi	r24, 0xF8	; 248
    26ba:	83 60       	ori	r24, 0x03	; 3
    26bc:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    26be:	80 b1       	in	r24, 0x00	; 0
    26c0:	80 62       	ori	r24, 0x20	; 32
    26c2:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    26c4:	81 b1       	in	r24, 0x01	; 1
    26c6:	8f 7d       	andi	r24, 0xDF	; 223
    26c8:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    26ca:	80 b1       	in	r24, 0x00	; 0
    26cc:	80 64       	ori	r24, 0x40	; 64
    26ce:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    26d0:	81 b1       	in	r24, 0x01	; 1
    26d2:	8f 7b       	andi	r24, 0xBF	; 191
    26d4:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    26d6:	80 b1       	in	r24, 0x00	; 0
    26d8:	80 68       	ori	r24, 0x80	; 128
    26da:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    26dc:	81 b1       	in	r24, 0x01	; 1
    26de:	8f 77       	andi	r24, 0x7F	; 127
    26e0:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    26e2:	84 b1       	in	r24, 0x04	; 4
    26e4:	81 60       	ori	r24, 0x01	; 1
    26e6:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    26e8:	85 b1       	in	r24, 0x05	; 5
    26ea:	8e 7f       	andi	r24, 0xFE	; 254
    26ec:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    26ee:	84 b1       	in	r24, 0x04	; 4
    26f0:	82 60       	ori	r24, 0x02	; 2
    26f2:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    26f4:	85 b1       	in	r24, 0x05	; 5
    26f6:	8d 7f       	andi	r24, 0xFD	; 253
    26f8:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    26fa:	84 b1       	in	r24, 0x04	; 4
    26fc:	80 61       	ori	r24, 0x10	; 16
    26fe:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    2700:	85 b1       	in	r24, 0x05	; 5
    2702:	8f 7e       	andi	r24, 0xEF	; 239
    2704:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    2706:	84 b1       	in	r24, 0x04	; 4
    2708:	80 62       	ori	r24, 0x20	; 32
    270a:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    270c:	85 b1       	in	r24, 0x05	; 5
    270e:	8f 7d       	andi	r24, 0xDF	; 223
    2710:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    2712:	88 b1       	in	r24, 0x08	; 8
    2714:	8f 7e       	andi	r24, 0xEF	; 239
    2716:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    2718:	88 b1       	in	r24, 0x08	; 8
    271a:	80 62       	ori	r24, 0x20	; 32
    271c:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    271e:	89 b1       	in	r24, 0x09	; 9
    2720:	8f 7d       	andi	r24, 0xDF	; 223
    2722:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    2724:	88 b1       	in	r24, 0x08	; 8
    2726:	80 64       	ori	r24, 0x40	; 64
    2728:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    272a:	89 b1       	in	r24, 0x09	; 9
    272c:	8f 7b       	andi	r24, 0xBF	; 191
    272e:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    2730:	88 b1       	in	r24, 0x08	; 8
    2732:	8f 77       	andi	r24, 0x7F	; 127
    2734:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    2736:	e7 e5       	ldi	r30, 0x57	; 87
    2738:	f4 e0       	ldi	r31, 0x04	; 4
    273a:	80 81       	ld	r24, Z
    273c:	88 60       	ori	r24, 0x08	; 8
    273e:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    2740:	80 81       	ld	r24, Z
    2742:	88 7f       	andi	r24, 0xF8	; 248
    2744:	83 60       	ori	r24, 0x03	; 3
    2746:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    2748:	80 81       	ld	r24, Z
    274a:	87 7f       	andi	r24, 0xF7	; 247
    274c:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    274e:	e0 e9       	ldi	r30, 0x90	; 144
    2750:	f4 e0       	ldi	r31, 0x04	; 4
    2752:	80 81       	ld	r24, Z
    2754:	88 60       	ori	r24, 0x08	; 8
    2756:	80 83       	st	Z, r24
    2758:	e1 e9       	ldi	r30, 0x91	; 145
    275a:	f4 e0       	ldi	r31, 0x04	; 4
    275c:	80 81       	ld	r24, Z
    275e:	88 60       	ori	r24, 0x08	; 8
    2760:	80 83       	st	Z, r24
    2762:	e2 e9       	ldi	r30, 0x92	; 146
    2764:	f4 e0       	ldi	r31, 0x04	; 4
    2766:	80 81       	ld	r24, Z
    2768:	88 60       	ori	r24, 0x08	; 8
    276a:	80 83       	st	Z, r24
    276c:	e3 e9       	ldi	r30, 0x93	; 147
    276e:	f4 e0       	ldi	r31, 0x04	; 4
    2770:	80 81       	ld	r24, Z
    2772:	88 60       	ori	r24, 0x08	; 8
    2774:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    2776:	e2 eb       	ldi	r30, 0xB2	; 178
    2778:	f4 e0       	ldi	r31, 0x04	; 4
    277a:	80 81       	ld	r24, Z
    277c:	88 60       	ori	r24, 0x08	; 8
    277e:	80 83       	st	Z, r24
    2780:	e3 eb       	ldi	r30, 0xB3	; 179
    2782:	f4 e0       	ldi	r31, 0x04	; 4
    2784:	80 81       	ld	r24, Z
    2786:	88 60       	ori	r24, 0x08	; 8
    2788:	80 83       	st	Z, r24
    278a:	e4 eb       	ldi	r30, 0xB4	; 180
    278c:	f4 e0       	ldi	r31, 0x04	; 4
    278e:	80 81       	ld	r24, Z
    2790:	88 60       	ori	r24, 0x08	; 8
    2792:	80 83       	st	Z, r24
    2794:	e5 eb       	ldi	r30, 0xB5	; 181
    2796:	f4 e0       	ldi	r31, 0x04	; 4
    2798:	80 81       	ld	r24, Z
    279a:	88 60       	ori	r24, 0x08	; 8
    279c:	80 83       	st	Z, r24
    279e:	08 95       	ret

000027a0 <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    27a0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	08 95       	ret

000027a8 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    27a8:	40 e2       	ldi	r20, 0x20	; 32
    27aa:	68 ed       	ldi	r22, 0xD8	; 216
    27ac:	88 e6       	ldi	r24, 0x68	; 104
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	08 95       	ret

000027b8 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    27b8:	78 94       	sei

	return 0;
}
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	08 95       	ret

000027be <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    27be:	83 e0       	ldi	r24, 0x03	; 3
    27c0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    27c4:	08 95       	ret

000027c6 <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    27c6:	28 2f       	mov	r18, r24
    27c8:	22 95       	swap	r18
    27ca:	22 0f       	add	r18, r18
    27cc:	22 0f       	add	r18, r18
    27ce:	20 7c       	andi	r18, 0xC0	; 192
    27d0:	e0 ea       	ldi	r30, 0xA0	; 160
    27d2:	f6 e0       	ldi	r31, 0x06	; 6
    27d4:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    27d6:	96 95       	lsr	r25
    27d8:	87 95       	ror	r24
    27da:	96 95       	lsr	r25
    27dc:	87 95       	ror	r24
    27de:	83 83       	std	Z+3, r24	; 0x03
    27e0:	08 95       	ret

000027e2 <_Z9DAC0_initv>:
//	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    27e2:	0e 94 df 13 	call	0x27be	; 0x27be <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    27e6:	e0 e6       	ldi	r30, 0x60	; 96
    27e8:	f4 e0       	ldi	r31, 0x04	; 4
    27ea:	86 89       	ldd	r24, Z+22	; 0x16
    27ec:	88 7f       	andi	r24, 0xF8	; 248
    27ee:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    27f0:	86 89       	ldd	r24, Z+22	; 0x16
    27f2:	84 60       	ori	r24, 0x04	; 4
    27f4:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    27f6:	86 89       	ldd	r24, Z+22	; 0x16
    27f8:	87 7f       	andi	r24, 0xF7	; 247
    27fa:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    27fc:	81 ec       	ldi	r24, 0xC1	; 193
    27fe:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <_Z11DAC0_setValj>
    280a:	08 95       	ret

0000280c <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	88 30       	cpi	r24, 0x08	; 8
    2810:	48 f4       	brcc	.+18     	; 0x2824 <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2812:	e8 2f       	mov	r30, r24
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	e0 5f       	subi	r30, 0xF0	; 240
    2818:	fb 4f       	sbci	r31, 0xFB	; 251
    281a:	90 81       	ld	r25, Z
    281c:	98 60       	ori	r25, 0x08	; 8
    281e:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    2820:	8f 5f       	subi	r24, 0xFF	; 255
    2822:	f5 cf       	rjmp	.-22     	; 0x280e <mcu_init+0x2>
    2824:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2826:	88 30       	cpi	r24, 0x08	; 8
    2828:	48 f4       	brcc	.+18     	; 0x283c <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    282a:	e8 2f       	mov	r30, r24
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	e0 5d       	subi	r30, 0xD0	; 208
    2830:	fb 4f       	sbci	r31, 0xFB	; 251
    2832:	90 81       	ld	r25, Z
    2834:	98 60       	ori	r25, 0x08	; 8
    2836:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2838:	8f 5f       	subi	r24, 0xFF	; 255
    283a:	f5 cf       	rjmp	.-22     	; 0x2826 <mcu_init+0x1a>
    283c:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    283e:	88 30       	cpi	r24, 0x08	; 8
    2840:	48 f4       	brcc	.+18     	; 0x2854 <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2842:	e8 2f       	mov	r30, r24
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	e0 5b       	subi	r30, 0xB0	; 176
    2848:	fb 4f       	sbci	r31, 0xFB	; 251
    284a:	90 81       	ld	r25, Z
    284c:	98 60       	ori	r25, 0x08	; 8
    284e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2850:	8f 5f       	subi	r24, 0xFF	; 255
    2852:	f5 cf       	rjmp	.-22     	; 0x283e <mcu_init+0x32>
    2854:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2856:	88 30       	cpi	r24, 0x08	; 8
    2858:	48 f4       	brcc	.+18     	; 0x286c <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    285a:	e8 2f       	mov	r30, r24
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	e0 59       	subi	r30, 0x90	; 144
    2860:	fb 4f       	sbci	r31, 0xFB	; 251
    2862:	90 81       	ld	r25, Z
    2864:	98 60       	ori	r25, 0x08	; 8
    2866:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	f5 cf       	rjmp	.-22     	; 0x2856 <mcu_init+0x4a>
    286c:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    286e:	88 30       	cpi	r24, 0x08	; 8
    2870:	48 f4       	brcc	.+18     	; 0x2884 <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2872:	e8 2f       	mov	r30, r24
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	e0 57       	subi	r30, 0x70	; 112
    2878:	fb 4f       	sbci	r31, 0xFB	; 251
    287a:	90 81       	ld	r25, Z
    287c:	98 60       	ori	r25, 0x08	; 8
    287e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2880:	8f 5f       	subi	r24, 0xFF	; 255
    2882:	f5 cf       	rjmp	.-22     	; 0x286e <mcu_init+0x62>
    2884:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2886:	88 30       	cpi	r24, 0x08	; 8
    2888:	48 f4       	brcc	.+18     	; 0x289c <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    288a:	e8 2f       	mov	r30, r24
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	e0 55       	subi	r30, 0x50	; 80
    2890:	fb 4f       	sbci	r31, 0xFB	; 251
    2892:	90 81       	ld	r25, Z
    2894:	98 60       	ori	r25, 0x08	; 8
    2896:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	f5 cf       	rjmp	.-22     	; 0x2886 <mcu_init+0x7a>
    289c:	08 95       	ret

0000289e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    289e:	0e 94 06 14 	call	0x280c	; 0x280c <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    28a2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <CLKCTRL_init>
	TIMERA_init(); /* Timers must be initialized before utility_delay functions will work */
    28a6:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <TIMERA_init>
//	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    28aa:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <CPUINT_init>
	BINIO_init();
    28ae:	0e 94 44 13 	call	0x2688	; 0x2688 <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    28b2:	88 b1       	in	r24, 0x08	; 8
    28b4:	80 64       	ori	r24, 0x40	; 64
    28b6:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    28b8:	89 b1       	in	r24, 0x09	; 9
    28ba:	80 64       	ori	r24, 0x40	; 64
    28bc:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    28be:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <SLPCTRL_init>
//	DAC0_init();

//	linkbus_init(LB_BAUD, LINKBUS_USART);
//	serialbus_init(SB_BAUD, SERIALBUS_USART);

	BOD_init();
    28c2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <BOD_init>
    28c6:	08 95       	ret

000028c8 <ds3231_get_epoch>:
		bool failure;
		int8_t data[1];
		
		while(tries-- && (failure = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
		return(data[0]);
	}
    28c8:	4f 92       	push	r4
    28ca:	5f 92       	push	r5
    28cc:	6f 92       	push	r6
    28ce:	7f 92       	push	r7
    28d0:	8f 92       	push	r8
    28d2:	9f 92       	push	r9
    28d4:	af 92       	push	r10
    28d6:	bf 92       	push	r11
    28d8:	cf 92       	push	r12
    28da:	df 92       	push	r13
    28dc:	ef 92       	push	r14
    28de:	ff 92       	push	r15
    28e0:	0f 93       	push	r16
    28e2:	1f 93       	push	r17
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	63 97       	sbiw	r28, 0x13	; 19
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	7c 01       	movw	r14, r24
    28f4:	fe 01       	movw	r30, r28
    28f6:	31 96       	adiw	r30, 0x01	; 1
    28f8:	87 e0       	ldi	r24, 0x07	; 7
    28fa:	df 01       	movw	r26, r30
    28fc:	1d 92       	st	X+, r1
    28fe:	8a 95       	dec	r24
    2900:	e9 f7       	brne	.-6      	; 0x28fc <ds3231_get_epoch+0x34>
    2902:	8a e0       	ldi	r24, 0x0A	; 10
    2904:	1f ef       	ldi	r17, 0xFF	; 255
    2906:	18 0f       	add	r17, r24
    2908:	88 23       	and	r24, r24
    290a:	81 f0       	breq	.+32     	; 0x292c <ds3231_get_epoch+0x64>
    290c:	27 e0       	ldi	r18, 0x07	; 7
    290e:	ae 01       	movw	r20, r28
    2910:	4f 5f       	subi	r20, 0xFF	; 255
    2912:	5f 4f       	sbci	r21, 0xFF	; 255
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	80 ed       	ldi	r24, 0xD0	; 208
    2918:	0e 94 3b 19 	call	0x3276	; 0x3276 <I2C_0_GetData>
    291c:	01 e0       	ldi	r16, 0x01	; 1
    291e:	87 30       	cpi	r24, 0x07	; 7
    2920:	09 f4       	brne	.+2      	; 0x2924 <ds3231_get_epoch+0x5c>
    2922:	00 e0       	ldi	r16, 0x00	; 0
    2924:	87 30       	cpi	r24, 0x07	; 7
    2926:	21 f0       	breq	.+8      	; 0x2930 <ds3231_get_epoch+0x68>
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	03 c0       	rjmp	.+6      	; 0x2932 <ds3231_get_epoch+0x6a>
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <ds3231_get_epoch+0x6a>
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	81 2f       	mov	r24, r17
    2934:	91 11       	cpse	r25, r1
    2936:	e6 cf       	rjmp	.-52     	; 0x2904 <ds3231_get_epoch+0x3c>
    2938:	01 11       	cpse	r16, r1
    293a:	f3 c0       	rjmp	.+486    	; 0x2b22 <ds3231_get_epoch+0x25a>
    293c:	fe 01       	movw	r30, r28
    293e:	38 96       	adiw	r30, 0x08	; 8
    2940:	8c e0       	ldi	r24, 0x0C	; 12
    2942:	df 01       	movw	r26, r30
    2944:	1d 92       	st	X+, r1
    2946:	8a 95       	dec	r24
    2948:	e9 f7       	brne	.-6      	; 0x2944 <ds3231_get_epoch+0x7c>
    294a:	2f 81       	ldd	r18, Y+7	; 0x07
    294c:	82 2f       	mov	r24, r18
    294e:	8f 70       	andi	r24, 0x0F	; 15
    2950:	a8 2e       	mov	r10, r24
    2952:	b1 2c       	mov	r11, r1
    2954:	c5 01       	movw	r24, r10
    2956:	8c 59       	subi	r24, 0x9C	; 156
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	22 95       	swap	r18
    295c:	2f 70       	andi	r18, 0x0F	; 15
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	59 01       	movw	r10, r18
    2962:	aa 0c       	add	r10, r10
    2964:	bb 1c       	adc	r11, r11
    2966:	22 0f       	add	r18, r18
    2968:	33 1f       	adc	r19, r19
    296a:	22 0f       	add	r18, r18
    296c:	33 1f       	adc	r19, r19
    296e:	22 0f       	add	r18, r18
    2970:	33 1f       	adc	r19, r19
    2972:	2a 0d       	add	r18, r10
    2974:	3b 1d       	adc	r19, r11
    2976:	5c 01       	movw	r10, r24
    2978:	a2 0e       	add	r10, r18
    297a:	b3 1e       	adc	r11, r19
    297c:	65 01       	movw	r12, r10
    297e:	b4 e9       	ldi	r27, 0x94	; 148
    2980:	cb 1a       	sub	r12, r27
    2982:	b8 ef       	ldi	r27, 0xF8	; 248
    2984:	db 0a       	sbc	r13, r27
    2986:	8e 81       	ldd	r24, Y+6	; 0x06
    2988:	98 2f       	mov	r25, r24
    298a:	9f 70       	andi	r25, 0x0F	; 15
    298c:	82 95       	swap	r24
    298e:	8f 70       	andi	r24, 0x0F	; 15
    2990:	88 0f       	add	r24, r24
    2992:	98 2e       	mov	r9, r24
    2994:	99 0c       	add	r9, r9
    2996:	99 0c       	add	r9, r9
    2998:	89 0d       	add	r24, r9
    299a:	98 2e       	mov	r9, r24
    299c:	99 0e       	add	r9, r25
    299e:	ed 81       	ldd	r30, Y+5	; 0x05
    29a0:	8e 2f       	mov	r24, r30
    29a2:	8f 70       	andi	r24, 0x0F	; 15
    29a4:	e2 95       	swap	r30
    29a6:	ef 70       	andi	r30, 0x0F	; 15
    29a8:	ee 0f       	add	r30, r30
    29aa:	8e 2e       	mov	r8, r30
    29ac:	88 0c       	add	r8, r8
    29ae:	88 0c       	add	r8, r8
    29b0:	e8 0d       	add	r30, r8
    29b2:	8e 2e       	mov	r8, r30
    29b4:	88 0e       	add	r8, r24
    29b6:	11 e0       	ldi	r17, 0x01	; 1
    29b8:	19 15       	cp	r17, r9
    29ba:	60 f4       	brcc	.+24     	; 0x29d4 <ds3231_get_epoch+0x10c>
    29bc:	61 2f       	mov	r22, r17
    29be:	c6 01       	movw	r24, r12
    29c0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <month_length>
    29c4:	28 89       	ldd	r18, Y+16	; 0x10
    29c6:	39 89       	ldd	r19, Y+17	; 0x11
    29c8:	28 0f       	add	r18, r24
    29ca:	31 1d       	adc	r19, r1
    29cc:	28 8b       	std	Y+16, r18	; 0x10
    29ce:	39 8b       	std	Y+17, r19	; 0x11
    29d0:	1f 5f       	subi	r17, 0xFF	; 255
    29d2:	f2 cf       	rjmp	.-28     	; 0x29b8 <ds3231_get_epoch+0xf0>
    29d4:	e8 2d       	mov	r30, r8
    29d6:	88 0c       	add	r8, r8
    29d8:	ff 0b       	sbc	r31, r31
    29da:	31 97       	sbiw	r30, 0x01	; 1
    29dc:	88 89       	ldd	r24, Y+16	; 0x10
    29de:	99 89       	ldd	r25, Y+17	; 0x11
    29e0:	e8 0f       	add	r30, r24
    29e2:	f9 1f       	adc	r31, r25
    29e4:	29 81       	ldd	r18, Y+1	; 0x01
    29e6:	42 2f       	mov	r20, r18
    29e8:	42 95       	swap	r20
    29ea:	4f 70       	andi	r20, 0x0F	; 15
    29ec:	44 0f       	add	r20, r20
    29ee:	94 2f       	mov	r25, r20
    29f0:	99 0f       	add	r25, r25
    29f2:	99 0f       	add	r25, r25
    29f4:	84 2f       	mov	r24, r20
    29f6:	89 0f       	add	r24, r25
    29f8:	42 2f       	mov	r20, r18
    29fa:	4f 70       	andi	r20, 0x0F	; 15
    29fc:	48 0f       	add	r20, r24
    29fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2a00:	23 2f       	mov	r18, r19
    2a02:	22 95       	swap	r18
    2a04:	2f 70       	andi	r18, 0x0F	; 15
    2a06:	22 0f       	add	r18, r18
    2a08:	92 2f       	mov	r25, r18
    2a0a:	99 0f       	add	r25, r25
    2a0c:	99 0f       	add	r25, r25
    2a0e:	82 2f       	mov	r24, r18
    2a10:	89 0f       	add	r24, r25
    2a12:	23 2f       	mov	r18, r19
    2a14:	2f 70       	andi	r18, 0x0F	; 15
    2a16:	28 0f       	add	r18, r24
    2a18:	3b 81       	ldd	r19, Y+3	; 0x03
    2a1a:	53 2f       	mov	r21, r19
    2a1c:	50 72       	andi	r21, 0x20	; 32
    2a1e:	83 2f       	mov	r24, r19
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	95 95       	asr	r25
    2a24:	87 95       	ror	r24
    2a26:	95 95       	asr	r25
    2a28:	87 95       	ror	r24
    2a2a:	95 95       	asr	r25
    2a2c:	87 95       	ror	r24
    2a2e:	95 95       	asr	r25
    2a30:	87 95       	ror	r24
    2a32:	81 70       	andi	r24, 0x01	; 1
    2a34:	88 0f       	add	r24, r24
    2a36:	a8 2f       	mov	r26, r24
    2a38:	aa 0f       	add	r26, r26
    2a3a:	aa 0f       	add	r26, r26
    2a3c:	8a 0f       	add	r24, r26
    2a3e:	a3 2f       	mov	r26, r19
    2a40:	af 70       	andi	r26, 0x0F	; 15
    2a42:	a8 0f       	add	r26, r24
    2a44:	36 ff       	sbrs	r19, 6
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <ds3231_get_epoch+0x188>
    2a48:	55 23       	and	r21, r21
    2a4a:	21 f0       	breq	.+8      	; 0x2a54 <ds3231_get_epoch+0x18c>
    2a4c:	a4 5f       	subi	r26, 0xF4	; 244
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <ds3231_get_epoch+0x18c>
    2a50:	51 11       	cpse	r21, r1
    2a52:	ac 5e       	subi	r26, 0xEC	; 236
    2a54:	04 2e       	mov	r0, r20
    2a56:	00 0c       	add	r0, r0
    2a58:	55 0b       	sbc	r21, r21
    2a5a:	8c e3       	ldi	r24, 0x3C	; 60
    2a5c:	28 02       	muls	r18, r24
    2a5e:	40 0d       	add	r20, r0
    2a60:	51 1d       	adc	r21, r1
    2a62:	11 24       	eor	r1, r1
    2a64:	0a 2e       	mov	r0, r26
    2a66:	00 0c       	add	r0, r0
    2a68:	bb 0b       	sbc	r27, r27
    2a6a:	20 e1       	ldi	r18, 0x10	; 16
    2a6c:	3e e0       	ldi	r19, 0x0E	; 14
    2a6e:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__usmulhisi3>
    2a72:	2a 01       	movw	r4, r20
    2a74:	55 0f       	add	r21, r21
    2a76:	66 08       	sbc	r6, r6
    2a78:	77 08       	sbc	r7, r7
    2a7a:	46 0e       	add	r4, r22
    2a7c:	57 1e       	adc	r5, r23
    2a7e:	68 1e       	adc	r6, r24
    2a80:	79 1e       	adc	r7, r25
    2a82:	df 01       	movw	r26, r30
    2a84:	20 e8       	ldi	r18, 0x80	; 128
    2a86:	31 e5       	ldi	r19, 0x51	; 81
    2a88:	41 e0       	ldi	r20, 0x01	; 1
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	0e 94 0f 2c 	call	0x581e	; 0x581e <__mulshisi3>
    2a90:	46 0e       	add	r4, r22
    2a92:	57 1e       	adc	r5, r23
    2a94:	68 1e       	adc	r6, r24
    2a96:	79 1e       	adc	r7, r25
    2a98:	d5 01       	movw	r26, r10
    2a9a:	a6 54       	subi	r26, 0x46	; 70
    2a9c:	b1 09       	sbc	r27, r1
    2a9e:	20 e8       	ldi	r18, 0x80	; 128
    2aa0:	33 e3       	ldi	r19, 0x33	; 51
    2aa2:	41 ee       	ldi	r20, 0xE1	; 225
    2aa4:	51 e0       	ldi	r21, 0x01	; 1
    2aa6:	0e 94 0f 2c 	call	0x581e	; 0x581e <__mulshisi3>
    2aaa:	46 0e       	add	r4, r22
    2aac:	57 1e       	adc	r5, r23
    2aae:	68 1e       	adc	r6, r24
    2ab0:	79 1e       	adc	r7, r25
    2ab2:	c5 01       	movw	r24, r10
    2ab4:	85 54       	subi	r24, 0x45	; 69
    2ab6:	91 09       	sbc	r25, r1
    2ab8:	dc 01       	movw	r26, r24
    2aba:	0a f4       	brpl	.+2      	; 0x2abe <ds3231_get_epoch+0x1f6>
    2abc:	13 96       	adiw	r26, 0x03	; 3
    2abe:	b5 95       	asr	r27
    2ac0:	a7 95       	ror	r26
    2ac2:	b5 95       	asr	r27
    2ac4:	a7 95       	ror	r26
    2ac6:	20 e8       	ldi	r18, 0x80	; 128
    2ac8:	31 e5       	ldi	r19, 0x51	; 81
    2aca:	41 e0       	ldi	r20, 0x01	; 1
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	0e 94 0f 2c 	call	0x581e	; 0x581e <__mulshisi3>
    2ad2:	46 0e       	add	r4, r22
    2ad4:	57 1e       	adc	r5, r23
    2ad6:	68 1e       	adc	r6, r24
    2ad8:	79 1e       	adc	r7, r25
    2ada:	c5 01       	movw	r24, r10
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	64 e6       	ldi	r22, 0x64	; 100
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	0e 94 90 2b 	call	0x5720	; 0x5720 <__divmodhi4>
    2ae6:	db 01       	movw	r26, r22
    2ae8:	20 e8       	ldi	r18, 0x80	; 128
    2aea:	3e ea       	ldi	r19, 0xAE	; 174
    2aec:	4e ef       	ldi	r20, 0xFE	; 254
    2aee:	5f ef       	ldi	r21, 0xFF	; 255
    2af0:	0e 94 0f 2c 	call	0x581e	; 0x581e <__mulshisi3>
    2af4:	46 0e       	add	r4, r22
    2af6:	57 1e       	adc	r5, r23
    2af8:	68 1e       	adc	r6, r24
    2afa:	79 1e       	adc	r7, r25
    2afc:	c5 01       	movw	r24, r10
    2afe:	85 5d       	subi	r24, 0xD5	; 213
    2b00:	9e 4f       	sbci	r25, 0xFE	; 254
    2b02:	60 e9       	ldi	r22, 0x90	; 144
    2b04:	71 e0       	ldi	r23, 0x01	; 1
    2b06:	0e 94 90 2b 	call	0x5720	; 0x5720 <__divmodhi4>
    2b0a:	db 01       	movw	r26, r22
    2b0c:	20 e8       	ldi	r18, 0x80	; 128
    2b0e:	31 e5       	ldi	r19, 0x51	; 81
    2b10:	41 e0       	ldi	r20, 0x01	; 1
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	0e 94 0f 2c 	call	0x581e	; 0x581e <__mulshisi3>
    2b18:	64 0d       	add	r22, r4
    2b1a:	75 1d       	adc	r23, r5
    2b1c:	86 1d       	adc	r24, r6
    2b1e:	97 1d       	adc	r25, r7
    2b20:	03 c0       	rjmp	.+6      	; 0x2b28 <ds3231_get_epoch+0x260>
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	cb 01       	movw	r24, r22
    2b28:	e1 14       	cp	r14, r1
    2b2a:	f1 04       	cpc	r15, r1
    2b2c:	39 f0       	breq	.+14     	; 0x2b3c <ds3231_get_epoch+0x274>
    2b2e:	00 23       	and	r16, r16
    2b30:	11 f0       	breq	.+4      	; 0x2b36 <ds3231_get_epoch+0x26e>
    2b32:	2c ef       	ldi	r18, 0xFC	; 252
    2b34:	01 c0       	rjmp	.+2      	; 0x2b38 <ds3231_get_epoch+0x270>
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	d7 01       	movw	r26, r14
    2b3a:	2c 93       	st	X, r18
    2b3c:	63 96       	adiw	r28, 0x13	; 19
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	1f 91       	pop	r17
    2b48:	0f 91       	pop	r16
    2b4a:	ff 90       	pop	r15
    2b4c:	ef 90       	pop	r14
    2b4e:	df 90       	pop	r13
    2b50:	cf 90       	pop	r12
    2b52:	bf 90       	pop	r11
    2b54:	af 90       	pop	r10
    2b56:	9f 90       	pop	r9
    2b58:	8f 90       	pop	r8
    2b5a:	7f 90       	pop	r7
    2b5c:	6f 90       	pop	r6
    2b5e:	5f 90       	pop	r5
    2b60:	4f 90       	pop	r4
    2b62:	08 95       	ret

00002b64 <ds3231_1s_sqw>:
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	1f 92       	push	r1
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	88 23       	and	r24, r24
    2b72:	11 f0       	breq	.+4      	; 0x2b78 <ds3231_1s_sqw+0x14>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	01 c0       	rjmp	.+2      	; 0x2b7a <ds3231_1s_sqw+0x16>
    2b78:	84 e0       	ldi	r24, 0x04	; 4
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    2b7c:	8a e0       	ldi	r24, 0x0A	; 10
    2b7e:	1f ef       	ldi	r17, 0xFF	; 255
    2b80:	18 0f       	add	r17, r24
    2b82:	88 23       	and	r24, r24
    2b84:	81 f0       	breq	.+32     	; 0x2ba6 <ds3231_1s_sqw+0x42>
    2b86:	21 e0       	ldi	r18, 0x01	; 1
    2b88:	ae 01       	movw	r20, r28
    2b8a:	4f 5f       	subi	r20, 0xFF	; 255
    2b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8e:	6e e0       	ldi	r22, 0x0E	; 14
    2b90:	80 ed       	ldi	r24, 0xD0	; 208
    2b92:	0e 94 8d 19 	call	0x331a	; 0x331a <I2C_0_SendData>
    2b96:	21 e0       	ldi	r18, 0x01	; 1
    2b98:	81 30       	cpi	r24, 0x01	; 1
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <ds3231_1s_sqw+0x3a>
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	81 30       	cpi	r24, 0x01	; 1
    2ba0:	21 f0       	breq	.+8      	; 0x2baa <ds3231_1s_sqw+0x46>
    2ba2:	91 e0       	ldi	r25, 0x01	; 1
    2ba4:	03 c0       	rjmp	.+6      	; 0x2bac <ds3231_1s_sqw+0x48>
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	01 c0       	rjmp	.+2      	; 0x2bac <ds3231_1s_sqw+0x48>
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	81 2f       	mov	r24, r17
    2bae:	91 11       	cpse	r25, r1
    2bb0:	e6 cf       	rjmp	.-52     	; 0x2b7e <ds3231_1s_sqw+0x1a>
    2bb2:	82 2f       	mov	r24, r18
    2bb4:	0f 90       	pop	r0
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	1f 91       	pop	r17
    2bbc:	08 95       	ret

00002bbe <ds3231_responding>:

	bool ds3231_responding()
	{
    2bbe:	1f 93       	push	r17
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	1f 92       	push	r1
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
		uint8_t tries = 10;
    2bca:	9a e0       	ldi	r25, 0x0A	; 10
		return(data[0]);
	}

	bool ds3231_responding()
	{
		bool responseReceived = false;
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t tries = 10;
		int8_t data[1];		
		while(tries-- && !(responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1)));
    2bce:	1f ef       	ldi	r17, 0xFF	; 255
    2bd0:	19 0f       	add	r17, r25
    2bd2:	99 23       	and	r25, r25
    2bd4:	81 f0       	breq	.+32     	; 0x2bf6 <ds3231_responding+0x38>
    2bd6:	21 e0       	ldi	r18, 0x01	; 1
    2bd8:	ae 01       	movw	r20, r28
    2bda:	4f 5f       	subi	r20, 0xFF	; 255
    2bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bde:	60 e1       	ldi	r22, 0x10	; 16
    2be0:	80 ed       	ldi	r24, 0xD0	; 208
    2be2:	0e 94 3b 19 	call	0x3276	; 0x3276 <I2C_0_GetData>
    2be6:	31 e0       	ldi	r19, 0x01	; 1
    2be8:	81 30       	cpi	r24, 0x01	; 1
    2bea:	09 f0       	breq	.+2      	; 0x2bee <ds3231_responding+0x30>
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	21 f0       	breq	.+8      	; 0x2bfa <ds3231_responding+0x3c>
    2bf2:	21 e0       	ldi	r18, 0x01	; 1
    2bf4:	03 c0       	rjmp	.+6      	; 0x2bfc <ds3231_responding+0x3e>
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	01 c0       	rjmp	.+2      	; 0x2bfc <ds3231_responding+0x3e>
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	91 2f       	mov	r25, r17
    2bfe:	21 11       	cpse	r18, r1
    2c00:	e6 cf       	rjmp	.-52     	; 0x2bce <ds3231_responding+0x10>
		return(responseReceived);
	}
    2c02:	83 2f       	mov	r24, r19
    2c04:	0f 90       	pop	r0
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	1f 91       	pop	r17
    2c0c:	08 95       	ret

00002c0e <ds3231_init>:

time_t epoch_from_ltm(tm *ltm);

bool ds3231_init()
{
	I2C_0_Init();
    2c0e:	0e 94 1c 19 	call	0x3238	; 0x3238 <I2C_0_Init>
// 		while(util_delay_ms(20));		
// 	}
// 
// 	PORTC_set_pin_level(3, ON);
// 	PORTC_set_pin_level(2, ON);
	return (!ds3231_responding());
    2c12:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <ds3231_responding>
}
    2c16:	91 e0       	ldi	r25, 0x01	; 1
    2c18:	89 27       	eor	r24, r25
    2c1a:	08 95       	ret

00002c1c <_ZN13EepromManagerC1Ev>:
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
	}
}
    2c1c:	08 95       	ret

00002c1e <_ZN13EepromManagerD1Ev>:
    2c1e:	08 95       	ret

00002c20 <_Z21avr_eeprom_write_bytejh>:
    2c20:	9c 01       	movw	r18, r24
    2c22:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    2c26:	91 fd       	sbrc	r25, 1
    2c28:	fc cf       	rjmp	.-8      	; 0x2c22 <_Z21avr_eeprom_write_bytejh+0x2>
    2c2a:	8d e9       	ldi	r24, 0x9D	; 157
    2c2c:	93 e1       	ldi	r25, 0x13	; 19
    2c2e:	84 bf       	out	0x34, r24	; 52
    2c30:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    2c34:	f9 01       	movw	r30, r18
    2c36:	fc 5e       	subi	r31, 0xEC	; 236
    2c38:	60 83       	st	Z, r22
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	84 bf       	out	0x34, r24	; 52
    2c3e:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    2c42:	08 95       	ret

00002c44 <_Z21avr_eeprom_write_wordjj>:
    2c44:	9c 01       	movw	r18, r24
    2c46:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    2c4a:	91 fd       	sbrc	r25, 1
    2c4c:	fc cf       	rjmp	.-8      	; 0x2c46 <_Z21avr_eeprom_write_wordjj+0x2>
    2c4e:	8d e9       	ldi	r24, 0x9D	; 157
    2c50:	93 e1       	ldi	r25, 0x13	; 19
    2c52:	84 bf       	out	0x34, r24	; 52
    2c54:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    2c58:	f9 01       	movw	r30, r18
    2c5a:	fc 5e       	subi	r31, 0xEC	; 236
    2c5c:	60 83       	st	Z, r22
    2c5e:	71 83       	std	Z+1, r23	; 0x01
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	84 bf       	out	0x34, r24	; 52
    2c64:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    2c68:	08 95       	ret

00002c6a <_Z22avr_eeprom_write_dwordjm>:
    2c6a:	9c 01       	movw	r18, r24
    2c6c:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    2c70:	91 fd       	sbrc	r25, 1
    2c72:	fc cf       	rjmp	.-8      	; 0x2c6c <_Z22avr_eeprom_write_dwordjm+0x2>
    2c74:	8d e9       	ldi	r24, 0x9D	; 157
    2c76:	93 e1       	ldi	r25, 0x13	; 19
    2c78:	84 bf       	out	0x34, r24	; 52
    2c7a:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    2c7e:	f9 01       	movw	r30, r18
    2c80:	fc 5e       	subi	r31, 0xEC	; 236
    2c82:	40 83       	st	Z, r20
    2c84:	51 83       	std	Z+1, r21	; 0x01
    2c86:	62 83       	std	Z+2, r22	; 0x02
    2c88:	73 83       	std	Z+3, r23	; 0x03
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	84 bf       	out	0x34, r24	; 52
    2c8e:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    2c92:	08 95       	ret

00002c94 <_ZN13EepromManager11readNonVolsEv>:


bool EepromManager::readNonVols(void)
{
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
	bool failure = true;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 94 3b 30 	call	0x6076	; 0x6076 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    2ca0:	8e 3c       	cpi	r24, 0xCE	; 206
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <_ZN13EepromManager11readNonVolsEv+0x14>
    2ca6:	dc c0       	rjmp	.+440    	; 0x2e60 <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    2ca8:	88 e2       	ldi	r24, 0x28	; 40
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	0e 94 2c 30 	call	0x6058	; 0x6058 <eeprom_read_byte>
    2cb0:	85 31       	cpi	r24, 0x15	; 21
    2cb2:	20 f4       	brcc	.+8      	; 0x2cbc <_ZN13EepromManager11readNonVolsEv+0x28>
    2cb4:	85 30       	cpi	r24, 0x05	; 5
    2cb6:	18 f4       	brcc	.+6      	; 0x2cbe <_ZN13EepromManager11readNonVolsEv+0x2a>
    2cb8:	85 e0       	ldi	r24, 0x05	; 5
    2cba:	01 c0       	rjmp	.+2      	; 0x2cbe <_ZN13EepromManager11readNonVolsEv+0x2a>
    2cbc:	84 e1       	ldi	r24, 0x14	; 20
    2cbe:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    2cc2:	89 e2       	ldi	r24, 0x29	; 41
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 2c 30 	call	0x6058	; 0x6058 <eeprom_read_byte>
    2cca:	82 31       	cpi	r24, 0x12	; 18
    2ccc:	08 f0       	brcs	.+2      	; 0x2cd0 <_ZN13EepromManager11readNonVolsEv+0x3c>
    2cce:	81 e1       	ldi	r24, 0x11	; 17
    2cd0:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 34 30 	call	0x6068	; 0x6068 <eeprom_read_dword>
    2cdc:	60 93 54 45 	sts	0x4554, r22	; 0x804554 <g_event_start_epoch>
    2ce0:	70 93 55 45 	sts	0x4555, r23	; 0x804555 <g_event_start_epoch+0x1>
    2ce4:	80 93 56 45 	sts	0x4556, r24	; 0x804556 <g_event_start_epoch+0x2>
    2ce8:	90 93 57 45 	sts	0x4557, r25	; 0x804557 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    2cec:	86 e0       	ldi	r24, 0x06	; 6
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	0e 94 34 30 	call	0x6068	; 0x6068 <eeprom_read_dword>
    2cf4:	60 93 58 45 	sts	0x4558, r22	; 0x804558 <g_event_finish_epoch>
    2cf8:	70 93 59 45 	sts	0x4559, r23	; 0x804559 <g_event_finish_epoch+0x1>
    2cfc:	80 93 5a 45 	sts	0x455A, r24	; 0x80455a <g_event_finish_epoch+0x2>
    2d00:	90 93 5b 45 	sts	0x455B, r25	; 0x80455b <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    2d04:	8a e2       	ldi	r24, 0x2A	; 42
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	0e 94 2c 30 	call	0x6058	; 0x6058 <eeprom_read_byte>
    2d0c:	80 93 67 45 	sts	0x4567, r24	; 0x804567 <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    2d10:	c0 e0       	ldi	r28, 0x00	; 0
    2d12:	d0 e0       	ldi	r29, 0x00	; 0
    2d14:	c4 31       	cpi	r28, 0x14	; 20
    2d16:	d1 05       	cpc	r29, r1
    2d18:	58 f4       	brcc	.+22     	; 0x2d30 <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	86 5f       	subi	r24, 0xF6	; 246
    2d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d20:	0e 94 2c 30 	call	0x6058	; 0x6058 <eeprom_read_byte>
    2d24:	fe 01       	movw	r30, r28
    2d26:	ea 5d       	subi	r30, 0xDA	; 218
    2d28:	fa 4b       	sbci	r31, 0xBA	; 186
    2d2a:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    2d2c:	81 11       	cpse	r24, r1
    2d2e:	03 c0       	rjmp	.+6      	; 0x2d36 <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    2d30:	c0 e0       	ldi	r28, 0x00	; 0
    2d32:	d0 e0       	ldi	r29, 0x00	; 0
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <_ZN13EepromManager11readNonVolsEv+0xa6>
    2d36:	21 96       	adiw	r28, 0x01	; 1
    2d38:	ed cf       	rjmp	.-38     	; 0x2d14 <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    2d3a:	c8 30       	cpi	r28, 0x08	; 8
    2d3c:	d1 05       	cpc	r29, r1
    2d3e:	68 f4       	brcc	.+26     	; 0x2d5a <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    2d40:	ce 01       	movw	r24, r28
    2d42:	81 5e       	subi	r24, 0xE1	; 225
    2d44:	9f 4f       	sbci	r25, 0xFF	; 255
    2d46:	0e 94 2c 30 	call	0x6058	; 0x6058 <eeprom_read_byte>
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e8 59       	subi	r30, 0x98	; 152
    2d4e:	fa 4b       	sbci	r31, 0xBA	; 186
    2d50:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    2d52:	88 23       	and	r24, r24
    2d54:	11 f0       	breq	.+4      	; 0x2d5a <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    2d56:	21 96       	adiw	r28, 0x01	; 1
    2d58:	f0 cf       	rjmp	.-32     	; 0x2d3a <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    2d5a:	8b e2       	ldi	r24, 0x2B	; 43
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0e 94 34 30 	call	0x6068	; 0x6068 <eeprom_read_dword>
    2d62:	61 30       	cpi	r22, 0x01	; 1
    2d64:	29 e0       	ldi	r18, 0x09	; 9
    2d66:	72 07       	cpc	r23, r18
    2d68:	2d e3       	ldi	r18, 0x3D	; 61
    2d6a:	82 07       	cpc	r24, r18
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	60 f4       	brcc	.+24     	; 0x2d88 <_ZN13EepromManager11readNonVolsEv+0xf4>
    2d70:	60 3e       	cpi	r22, 0xE0	; 224
    2d72:	27 e6       	ldi	r18, 0x67	; 103
    2d74:	72 07       	cpc	r23, r18
    2d76:	25 e3       	ldi	r18, 0x35	; 53
    2d78:	82 07       	cpc	r24, r18
    2d7a:	91 05       	cpc	r25, r1
    2d7c:	50 f4       	brcc	.+20     	; 0x2d92 <_ZN13EepromManager11readNonVolsEv+0xfe>
    2d7e:	40 ee       	ldi	r20, 0xE0	; 224
    2d80:	37 e6       	ldi	r19, 0x67	; 103
    2d82:	25 e3       	ldi	r18, 0x35	; 53
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	09 c0       	rjmp	.+18     	; 0x2d9a <_ZN13EepromManager11readNonVolsEv+0x106>
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	39 e0       	ldi	r19, 0x09	; 9
    2d8c:	2d e3       	ldi	r18, 0x3D	; 61
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	04 c0       	rjmp	.+8      	; 0x2d9a <_ZN13EepromManager11readNonVolsEv+0x106>
    2d92:	46 2f       	mov	r20, r22
    2d94:	37 2f       	mov	r19, r23
    2d96:	28 2f       	mov	r18, r24
    2d98:	89 2f       	mov	r24, r25
    2d9a:	40 93 2d 40 	sts	0x402D, r20	; 0x80402d <g_80m_frequency>
    2d9e:	30 93 2e 40 	sts	0x402E, r19	; 0x80402e <g_80m_frequency+0x1>
    2da2:	20 93 2f 40 	sts	0x402F, r18	; 0x80402f <g_80m_frequency+0x2>
    2da6:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    2daa:	8f e2       	ldi	r24, 0x2F	; 47
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 34 30 	call	0x6068	; 0x6068 <eeprom_read_dword>
    2db2:	60 93 33 40 	sts	0x4033, r22	; 0x804033 <g_rtty_offset>
    2db6:	70 93 34 40 	sts	0x4034, r23	; 0x804034 <g_rtty_offset+0x1>
    2dba:	80 93 35 40 	sts	0x4035, r24	; 0x804035 <g_rtty_offset+0x2>
    2dbe:	90 93 36 40 	sts	0x4036, r25	; 0x804036 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    2dc2:	83 e3       	ldi	r24, 0x33	; 51
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 3b 30 	call	0x6076	; 0x6076 <eeprom_read_word>
    2dca:	89 38       	cpi	r24, 0x89	; 137
    2dcc:	23 e1       	ldi	r18, 0x13	; 19
    2dce:	92 07       	cpc	r25, r18
    2dd0:	18 f0       	brcs	.+6      	; 0x2dd8 <_ZN13EepromManager11readNonVolsEv+0x144>
    2dd2:	28 e8       	ldi	r18, 0x88	; 136
    2dd4:	83 e1       	ldi	r24, 0x13	; 19
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <_ZN13EepromManager11readNonVolsEv+0x148>
    2dd8:	28 2f       	mov	r18, r24
    2dda:	89 2f       	mov	r24, r25
    2ddc:	20 93 31 40 	sts	0x4031, r18	; 0x804031 <g_80m_power_level_mW>
    2de0:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    2de4:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    2de8:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2dec:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2df0:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2df4:	89 2b       	or	r24, r25
    2df6:	8a 2b       	or	r24, r26
    2df8:	8b 2b       	or	r24, r27
    2dfa:	b9 f0       	breq	.+46     	; 0x2e2a <_ZN13EepromManager11readNonVolsEv+0x196>
    2dfc:	40 91 58 45 	lds	r20, 0x4558	; 0x804558 <g_event_finish_epoch>
    2e00:	50 91 59 45 	lds	r21, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    2e04:	60 91 5a 45 	lds	r22, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    2e08:	70 91 5b 45 	lds	r23, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    2e0c:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    2e10:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2e14:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2e18:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2e1c:	84 17       	cp	r24, r20
    2e1e:	95 07       	cpc	r25, r21
    2e20:	a6 07       	cpc	r26, r22
    2e22:	b7 07       	cpc	r27, r23
    2e24:	20 f4       	brcc	.+8      	; 0x2e2e <_ZN13EepromManager11readNonVolsEv+0x19a>
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	03 c0       	rjmp	.+6      	; 0x2e30 <_ZN13EepromManager11readNonVolsEv+0x19c>
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	01 c0       	rjmp	.+2      	; 0x2e30 <_ZN13EepromManager11readNonVolsEv+0x19c>
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	88 23       	and	r24, r24
    2e32:	c1 f0       	breq	.+48     	; 0x2e64 <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    2e34:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    2e38:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2e3c:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2e40:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2e44:	80 58       	subi	r24, 0x80	; 128
    2e46:	9e 4a       	sbci	r25, 0xAE	; 174
    2e48:	ae 4f       	sbci	r26, 0xFE	; 254
    2e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4c:	80 93 58 45 	sts	0x4558, r24	; 0x804558 <g_event_finish_epoch>
    2e50:	90 93 59 45 	sts	0x4559, r25	; 0x804559 <g_event_finish_epoch+0x1>
    2e54:	a0 93 5a 45 	sts	0x455A, r26	; 0x80455a <g_event_finish_epoch+0x2>
    2e58:	b0 93 5b 45 	sts	0x455B, r27	; 0x80455b <g_event_finish_epoch+0x3>
		}

		failure = false;
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	03 c0       	rjmp	.+6      	; 0x2e66 <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


bool EepromManager::readNonVols(void)
{
	bool failure = true;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	01 c0       	rjmp	.+2      	; 0x2e66 <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = false;
    2e64:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret

00002e6c <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	bool EepromManager::initializeEEPROMVars(void)
	{
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
		bool err = false;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 3b 30 	call	0x6076	; 0x6076 <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    2e80:	8e 3c       	cpi	r24, 0xCE	; 206
    2e82:	91 05       	cpc	r25, r1
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    2e86:	aa c0       	rjmp	.+340    	; 0x2fdc <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    2e88:	84 e1       	ldi	r24, 0x14	; 20
    2e8a:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    2e8e:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    2e92:	88 e2       	ldi	r24, 0x28	; 40
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    2ea0:	60 91 1a 40 	lds	r22, 0x401A	; 0x80401a <g_fox>
    2ea4:	89 e2       	ldi	r24, 0x29	; 41
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    2eac:	10 92 54 45 	sts	0x4554, r1	; 0x804554 <g_event_start_epoch>
    2eb0:	10 92 55 45 	sts	0x4555, r1	; 0x804555 <g_event_start_epoch+0x1>
    2eb4:	10 92 56 45 	sts	0x4556, r1	; 0x804556 <g_event_start_epoch+0x2>
    2eb8:	10 92 57 45 	sts	0x4557, r1	; 0x804557 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    2ebc:	40 91 54 45 	lds	r20, 0x4554	; 0x804554 <g_event_start_epoch>
    2ec0:	50 91 55 45 	lds	r21, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2ec4:	60 91 56 45 	lds	r22, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2ec8:	70 91 57 45 	lds	r23, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2ecc:	82 e0       	ldi	r24, 0x02	; 2
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    2ed4:	10 92 58 45 	sts	0x4558, r1	; 0x804558 <g_event_finish_epoch>
    2ed8:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <g_event_finish_epoch+0x1>
    2edc:	10 92 5a 45 	sts	0x455A, r1	; 0x80455a <g_event_finish_epoch+0x2>
    2ee0:	10 92 5b 45 	sts	0x455B, r1	; 0x80455b <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    2ee4:	40 91 58 45 	lds	r20, 0x4558	; 0x804558 <g_event_finish_epoch>
    2ee8:	50 91 59 45 	lds	r21, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    2eec:	60 91 5a 45 	lds	r22, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    2ef0:	70 91 5b 45 	lds	r23, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    2ef4:	86 e0       	ldi	r24, 0x06	; 6
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    2efc:	10 92 67 45 	sts	0x4567, r1	; 0x804567 <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    2f00:	60 91 67 45 	lds	r22, 0x4567	; 0x804567 <g_utc_offset>
    2f04:	8a e2       	ldi	r24, 0x2A	; 42
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    2f0c:	10 92 3b 45 	sts	0x453B, r1	; 0x80453b <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    2f10:	60 e0       	ldi	r22, 0x00	; 0
    2f12:	8a e0       	ldi	r24, 0x0A	; 10
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    2f1a:	e4 e8       	ldi	r30, 0x84	; 132
    2f1c:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    2f1e:	c0 e0       	ldi	r28, 0x00	; 0
    2f20:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    2f22:	8f e1       	ldi	r24, 0x1F	; 31
    2f24:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    2f26:	c4 30       	cpi	r28, 0x04	; 4
    2f28:	d1 05       	cpc	r29, r1
    2f2a:	90 f4       	brcc	.+36     	; 0x2f50 <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    2f2c:	df 01       	movw	r26, r30
    2f2e:	2d 91       	ld	r18, X+
    2f30:	8d 01       	movw	r16, r26
    2f32:	de 01       	movw	r26, r28
    2f34:	a8 59       	subi	r26, 0x98	; 152
    2f36:	ba 4b       	sbci	r27, 0xBA	; 186
    2f38:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    2f3a:	60 81       	ld	r22, Z
    2f3c:	7c 01       	movw	r14, r24
    2f3e:	bf ef       	ldi	r27, 0xFF	; 255
    2f40:	eb 1a       	sub	r14, r27
    2f42:	fb 0a       	sbc	r15, r27
    2f44:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    2f48:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    2f4e:	eb cf       	rjmp	.-42     	; 0x2f26 <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    2f56:	c8 59       	subi	r28, 0x98	; 152
    2f58:	da 4b       	sbci	r29, 0xBA	; 186
    2f5a:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    2f5c:	80 e2       	ldi	r24, 0x20	; 32
    2f5e:	94 e0       	ldi	r25, 0x04	; 4
    2f60:	a6 e3       	ldi	r26, 0x36	; 54
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	80 93 2d 40 	sts	0x402D, r24	; 0x80402d <g_80m_frequency>
    2f68:	90 93 2e 40 	sts	0x402E, r25	; 0x80402e <g_80m_frequency+0x1>
    2f6c:	a0 93 2f 40 	sts	0x402F, r26	; 0x80402f <g_80m_frequency+0x2>
    2f70:	b0 93 30 40 	sts	0x4030, r27	; 0x804030 <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    2f74:	40 e2       	ldi	r20, 0x20	; 32
    2f76:	54 e0       	ldi	r21, 0x04	; 4
    2f78:	66 e3       	ldi	r22, 0x36	; 54
    2f7a:	70 e0       	ldi	r23, 0x00	; 0
    2f7c:	8b e2       	ldi	r24, 0x2B	; 43
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    2f84:	8a ea       	ldi	r24, 0xAA	; 170
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	a0 e0       	ldi	r26, 0x00	; 0
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	80 93 33 40 	sts	0x4033, r24	; 0x804033 <g_rtty_offset>
    2f90:	90 93 34 40 	sts	0x4034, r25	; 0x804034 <g_rtty_offset+0x1>
    2f94:	a0 93 35 40 	sts	0x4035, r26	; 0x804035 <g_rtty_offset+0x2>
    2f98:	b0 93 36 40 	sts	0x4036, r27	; 0x804036 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    2f9c:	40 91 2d 40 	lds	r20, 0x402D	; 0x80402d <g_80m_frequency>
    2fa0:	50 91 2e 40 	lds	r21, 0x402E	; 0x80402e <g_80m_frequency+0x1>
    2fa4:	60 91 2f 40 	lds	r22, 0x402F	; 0x80402f <g_80m_frequency+0x2>
    2fa8:	70 91 30 40 	lds	r23, 0x4030	; 0x804030 <g_80m_frequency+0x3>
    2fac:	8b e2       	ldi	r24, 0x2B	; 43
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    2fb4:	84 ef       	ldi	r24, 0xF4	; 244
    2fb6:	91 e0       	ldi	r25, 0x01	; 1
    2fb8:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW>
    2fbc:	90 93 32 40 	sts	0x4032, r25	; 0x804032 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    2fc0:	44 ef       	ldi	r20, 0xF4	; 244
    2fc2:	51 e0       	ldi	r21, 0x01	; 1
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	83 e3       	ldi	r24, 0x33	; 51
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    2fd0:	6e ec       	ldi	r22, 0xCE	; 206
    2fd2:	70 e0       	ldi	r23, 0x00	; 0
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	ff 90       	pop	r15
    2fe8:	ef 90       	pop	r14
    2fea:	08 95       	ret

00002fec <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	e4 2e       	mov	r14, r20
    2ffa:	f5 2e       	mov	r15, r21
    2ffc:	d6 2f       	mov	r29, r22
    2ffe:	c7 2f       	mov	r28, r23
    3000:	00 93 82 45 	sts	0x4582, r16	; 0x804582 <_SAMPLING_FREQUENCY>
    3004:	10 93 83 45 	sts	0x4583, r17	; 0x804583 <_SAMPLING_FREQUENCY+0x1>
    3008:	20 93 84 45 	sts	0x4584, r18	; 0x804584 <_SAMPLING_FREQUENCY+0x2>
    300c:	30 93 85 45 	sts	0x4585, r19	; 0x804585 <_SAMPLING_FREQUENCY+0x3>
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	41 e5       	ldi	r20, 0x51	; 81
    3016:	53 e4       	ldi	r21, 0x43	; 67
    3018:	6e 2d       	mov	r22, r14
    301a:	7f 2d       	mov	r23, r15
    301c:	8d 2f       	mov	r24, r29
    301e:	9c 2f       	mov	r25, r28
    3020:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <__gesf2>
    3024:	18 16       	cp	r1, r24
    3026:	8c f0       	brlt	.+34     	; 0x304a <_ZN8GoertzelC1Eff+0x5e>
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	48 ec       	ldi	r20, 0xC8	; 200
    302e:	52 e4       	ldi	r21, 0x42	; 66
    3030:	6e 2d       	mov	r22, r14
    3032:	7f 2d       	mov	r23, r15
    3034:	8d 2f       	mov	r24, r29
    3036:	9c 2f       	mov	r25, r28
    3038:	0e 94 9b 29 	call	0x5336	; 0x5336 <__cmpsf2>
    303c:	88 23       	and	r24, r24
    303e:	4c f4       	brge	.+18     	; 0x3052 <_ZN8GoertzelC1Eff+0x66>
    3040:	e1 2c       	mov	r14, r1
    3042:	f1 2c       	mov	r15, r1
    3044:	d8 ec       	ldi	r29, 0xC8	; 200
    3046:	c2 e4       	ldi	r28, 0x42	; 66
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <_ZN8GoertzelC1Eff+0x66>
    304a:	e1 2c       	mov	r14, r1
    304c:	f1 2c       	mov	r15, r1
    304e:	d1 e5       	ldi	r29, 0x51	; 81
    3050:	c3 e4       	ldi	r28, 0x43	; 67
    3052:	6e 2d       	mov	r22, r14
    3054:	7f 2d       	mov	r23, r15
    3056:	8d 2f       	mov	r24, r29
    3058:	9c 2f       	mov	r25, r28
    305a:	0e 94 12 2a 	call	0x5424	; 0x5424 <__fixsfsi>
    305e:	60 93 80 45 	sts	0x4580, r22	; 0x804580 <_N>
    3062:	70 93 81 45 	sts	0x4581, r23	; 0x804581 <_N+0x1>
    3066:	80 91 80 45 	lds	r24, 0x4580	; 0x804580 <_N>
    306a:	90 91 81 45 	lds	r25, 0x4581	; 0x804581 <_N+0x1>
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	0e 94 17 2c 	call	0x582e	; 0x582e <malloc>
    3076:	80 93 7b 45 	sts	0x457B, r24	; 0x80457b <testData>
    307a:	90 93 7c 45 	sts	0x457C, r25	; 0x80457c <testData+0x1>
    307e:	df 91       	pop	r29
    3080:	cf 91       	pop	r28
    3082:	1f 91       	pop	r17
    3084:	0f 91       	pop	r16
    3086:	ff 90       	pop	r15
    3088:	ef 90       	pop	r14
    308a:	08 95       	ret

0000308c <_ZN8GoertzelD1Ev>:
    308c:	80 91 7b 45 	lds	r24, 0x457B	; 0x80457b <testData>
    3090:	90 91 7c 45 	lds	r25, 0x457C	; 0x80457c <testData+0x1>
    3094:	0e 94 af 2c 	call	0x595e	; 0x595e <free>
    3098:	08 95       	ret

0000309a <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    309a:	80 91 7d 45 	lds	r24, 0x457D	; 0x80457d <_samplesReady>
    309e:	88 23       	and	r24, r24
    30a0:	19 f0       	breq	.+6      	; 0x30a8 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    30a2:	80 91 7d 45 	lds	r24, 0x457D	; 0x80457d <_samplesReady>
    30a6:	08 95       	ret
	}

	testData[_index] = data;
    30a8:	e0 91 7e 45 	lds	r30, 0x457E	; 0x80457e <_index>
    30ac:	f0 91 7f 45 	lds	r31, 0x457F	; 0x80457f <_index+0x1>
    30b0:	ee 0f       	add	r30, r30
    30b2:	ff 1f       	adc	r31, r31
    30b4:	80 91 7b 45 	lds	r24, 0x457B	; 0x80457b <testData>
    30b8:	90 91 7c 45 	lds	r25, 0x457C	; 0x80457c <testData+0x1>
    30bc:	e8 0f       	add	r30, r24
    30be:	f9 1f       	adc	r31, r25
    30c0:	60 83       	st	Z, r22
    30c2:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    30c4:	80 91 7e 45 	lds	r24, 0x457E	; 0x80457e <_index>
    30c8:	90 91 7f 45 	lds	r25, 0x457F	; 0x80457f <_index+0x1>
    30cc:	01 96       	adiw	r24, 0x01	; 1
    30ce:	80 93 7e 45 	sts	0x457E, r24	; 0x80457e <_index>
    30d2:	90 93 7f 45 	sts	0x457F, r25	; 0x80457f <_index+0x1>
	if(_index >= _N)
    30d6:	20 91 7e 45 	lds	r18, 0x457E	; 0x80457e <_index>
    30da:	30 91 7f 45 	lds	r19, 0x457F	; 0x80457f <_index+0x1>
    30de:	80 91 80 45 	lds	r24, 0x4580	; 0x804580 <_N>
    30e2:	90 91 81 45 	lds	r25, 0x4581	; 0x804581 <_N+0x1>
    30e6:	28 17       	cp	r18, r24
    30e8:	39 07       	cpc	r19, r25
    30ea:	3c f0       	brlt	.+14     	; 0x30fa <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    30ec:	10 92 7e 45 	sts	0x457E, r1	; 0x80457e <_index>
    30f0:	10 92 7f 45 	sts	0x457F, r1	; 0x80457f <_index+0x1>
		_samplesReady = true;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	80 93 7d 45 	sts	0x457D, r24	; 0x80457d <_samplesReady>
	}

	return(_samplesReady);
    30fa:	80 91 7d 45 	lds	r24, 0x457D	; 0x80457d <_samplesReady>
}
    30fe:	08 95       	ret

00003100 <_ZL11i2c_0_WaitWv>:

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
    3100:	8c e2       	ldi	r24, 0x2C	; 44
    3102:	91 e0       	ldi	r25, 0x01	; 1
    3104:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    3108:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	/* Select I2C pins PC2/PC3 */
}

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
    310c:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 300;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    310e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    3112:	90 7c       	andi	r25, 0xC0	; 192
    3114:	31 f0       	breq	.+12     	; 0x3122 <_ZL11i2c_0_WaitWv+0x22>
		{
			if(!(TWI0.MSTATUS & TWI_RXACK_bm))
    3116:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    311a:	84 fd       	sbrc	r24, 4
    311c:	07 c0       	rjmp	.+14     	; 0x312c <_ZL11i2c_0_WaitWv+0x2c>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	08 c0       	rjmp	.+16     	; 0x3132 <_ZL11i2c_0_WaitWv+0x32>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    3122:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    3126:	9c 70       	andi	r25, 0x0C	; 12
    3128:	19 f4       	brne	.+6      	; 0x3130 <_ZL11i2c_0_WaitWv+0x30>
    312a:	03 c0       	rjmp	.+6      	; 0x3132 <_ZL11i2c_0_WaitWv+0x32>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    312c:	82 e0       	ldi	r24, 0x02	; 2
    312e:	01 c0       	rjmp	.+2      	; 0x3132 <_ZL11i2c_0_WaitWv+0x32>
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    3130:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    3132:	81 11       	cpse	r24, r1
    3134:	08 c0       	rjmp	.+16     	; 0x3146 <_ZL11i2c_0_WaitWv+0x46>
    3136:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    313a:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    313e:	23 2b       	or	r18, r19
    3140:	21 f4       	brne	.+8      	; 0x314a <_ZL11i2c_0_WaitWv+0x4a>
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	03 c0       	rjmp	.+6      	; 0x314c <_ZL11i2c_0_WaitWv+0x4c>
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	01 c0       	rjmp	.+2      	; 0x314c <_ZL11i2c_0_WaitWv+0x4c>
    314a:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
	
	do
    314c:	91 11       	cpse	r25, r1
    314e:	df cf       	rjmp	.-66     	; 0x310e <_ZL11i2c_0_WaitWv+0xe>
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	if(!g_i2c0_timeout_ticks) 
    3150:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    3154:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    3158:	23 2b       	or	r18, r19
    315a:	09 f4       	brne	.+2      	; 0x315e <_ZL11i2c_0_WaitWv+0x5e>
	{
		state = I2C_ERROR;
    315c:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	return state;
}
    315e:	08 95       	ret

00003160 <_ZL11i2c_0_WaitRv>:

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    3160:	88 ec       	ldi	r24, 0xC8	; 200
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    3168:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
    316c:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    316e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    3172:	90 7c       	andi	r25, 0xC0	; 192
    3174:	29 f4       	brne	.+10     	; 0x3180 <_ZL11i2c_0_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    3176:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    317a:	9c 70       	andi	r25, 0x0C	; 12
    317c:	19 f4       	brne	.+6      	; 0x3184 <_ZL11i2c_0_WaitRv+0x24>
    317e:	03 c0       	rjmp	.+6      	; 0x3186 <_ZL11i2c_0_WaitRv+0x26>
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    3180:	83 e0       	ldi	r24, 0x03	; 3
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <_ZL11i2c_0_WaitRv+0x26>
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    3184:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    3186:	81 11       	cpse	r24, r1
    3188:	08 c0       	rjmp	.+16     	; 0x319a <_ZL11i2c_0_WaitRv+0x3a>
    318a:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    318e:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    3192:	23 2b       	or	r18, r19
    3194:	21 f4       	brne	.+8      	; 0x319e <_ZL11i2c_0_WaitRv+0x3e>
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	03 c0       	rjmp	.+6      	; 0x31a0 <_ZL11i2c_0_WaitRv+0x40>
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	01 c0       	rjmp	.+2      	; 0x31a0 <_ZL11i2c_0_WaitRv+0x40>
    319e:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    31a0:	91 11       	cpse	r25, r1
    31a2:	e5 cf       	rjmp	.-54     	; 0x316e <_ZL11i2c_0_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    31a4:	08 95       	ret

000031a6 <_ZL11i2c_1_WaitWv>:

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
    31a6:	88 ec       	ldi	r24, 0xC8	; 200
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    31ae:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
	PORTB_set_pin_pull_mode(3, PORT_PULL_UP);
}

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
    31b2:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c1_timeout_ticks = 200;
	
	do
	{
		uint8_t stat = TWI1.MSTATUS;
    31b4:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
		if(stat & (TWI_WIF_bm | TWI_RIF_bm))
    31b8:	29 2f       	mov	r18, r25
    31ba:	20 7c       	andi	r18, 0xC0	; 192
    31bc:	21 f0       	breq	.+8      	; 0x31c6 <_ZL11i2c_1_WaitWv+0x20>
		{
			if(!(stat & TWI_RXACK_bm))
    31be:	94 fd       	sbrc	r25, 4
    31c0:	05 c0       	rjmp	.+10     	; 0x31cc <_ZL11i2c_1_WaitWv+0x26>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	06 c0       	rjmp	.+12     	; 0x31d2 <_ZL11i2c_1_WaitWv+0x2c>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    31c6:	9c 70       	andi	r25, 0x0C	; 12
    31c8:	19 f4       	brne	.+6      	; 0x31d0 <_ZL11i2c_1_WaitWv+0x2a>
    31ca:	03 c0       	rjmp	.+6      	; 0x31d2 <_ZL11i2c_1_WaitWv+0x2c>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	01 c0       	rjmp	.+2      	; 0x31d2 <_ZL11i2c_1_WaitWv+0x2c>
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    31d0:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c1_timeout_ticks);
    31d2:	81 11       	cpse	r24, r1
    31d4:	08 c0       	rjmp	.+16     	; 0x31e6 <_ZL11i2c_1_WaitWv+0x40>
    31d6:	20 91 1e 40 	lds	r18, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    31da:	30 91 1f 40 	lds	r19, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    31de:	23 2b       	or	r18, r19
    31e0:	21 f4       	brne	.+8      	; 0x31ea <_ZL11i2c_1_WaitWv+0x44>
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	03 c0       	rjmp	.+6      	; 0x31ec <_ZL11i2c_1_WaitWv+0x46>
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	01 c0       	rjmp	.+2      	; 0x31ec <_ZL11i2c_1_WaitWv+0x46>
    31ea:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
	
	do
    31ec:	91 11       	cpse	r25, r1
    31ee:	e2 cf       	rjmp	.-60     	; 0x31b4 <_ZL11i2c_1_WaitWv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c1_timeout_ticks);
	
	return state;
}
    31f0:	08 95       	ret

000031f2 <_ZL11I2C_1_WaitRv>:

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    31f2:	88 ec       	ldi	r24, 0xC8	; 200
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    31fa:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
    31fe:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    3200:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    3204:	90 7c       	andi	r25, 0xC0	; 192
    3206:	29 f4       	brne	.+10     	; 0x3212 <_ZL11I2C_1_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    3208:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    320c:	9c 70       	andi	r25, 0x0C	; 12
    320e:	19 f4       	brne	.+6      	; 0x3216 <_ZL11I2C_1_WaitRv+0x24>
    3210:	03 c0       	rjmp	.+6      	; 0x3218 <_ZL11I2C_1_WaitRv+0x26>
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    3212:	83 e0       	ldi	r24, 0x03	; 3
    3214:	01 c0       	rjmp	.+2      	; 0x3218 <_ZL11I2C_1_WaitRv+0x26>
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    3216:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    3218:	81 11       	cpse	r24, r1
    321a:	08 c0       	rjmp	.+16     	; 0x322c <_ZL11I2C_1_WaitRv+0x3a>
    321c:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    3220:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    3224:	23 2b       	or	r18, r19
    3226:	21 f4       	brne	.+8      	; 0x3230 <_ZL11I2C_1_WaitRv+0x3e>
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	03 c0       	rjmp	.+6      	; 0x3232 <_ZL11I2C_1_WaitRv+0x40>
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	01 c0       	rjmp	.+2      	; 0x3232 <_ZL11I2C_1_WaitRv+0x40>
    3230:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    3232:	91 11       	cpse	r25, r1
    3234:	e5 cf       	rjmp	.-54     	; 0x3200 <_ZL11I2C_1_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    3236:	08 95       	ret

00003238 <I2C_0_Init>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    3238:	88 b1       	in	r24, 0x08	; 8
    323a:	88 60       	ori	r24, 0x08	; 8
    323c:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    323e:	e3 e5       	ldi	r30, 0x53	; 83
    3240:	f4 e0       	ldi	r31, 0x04	; 4
    3242:	80 81       	ld	r24, Z
    3244:	88 60       	ori	r24, 0x08	; 8
    3246:	80 83       	st	Z, r24
    3248:	e2 e5       	ldi	r30, 0x52	; 82
    324a:	f4 e0       	ldi	r31, 0x04	; 4
    324c:	80 81       	ld	r24, Z
    324e:	88 60       	ori	r24, 0x08	; 8
    3250:	80 83       	st	Z, r24
	PORTC_set_pin_dir(3, PORT_DIR_OUT);	
	PORTC_set_pin_pull_mode(3, PORT_PULL_UP);
	PORTC_set_pin_pull_mode(2, PORT_PULL_UP);

	/* Select I2C pins PC2/PC3 */
	PORTMUX.TWIROUTEA &= 0x0A;
    3252:	e0 ee       	ldi	r30, 0xE0	; 224
    3254:	f5 e0       	ldi	r31, 0x05	; 5
    3256:	85 81       	ldd	r24, Z+5	; 0x05
    3258:	8a 70       	andi	r24, 0x0A	; 10
    325a:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x02;
    325c:	85 81       	ldd	r24, Z+5	; 0x05
    325e:	82 60       	ori	r24, 0x02	; 2
    3260:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI0.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    3262:	e0 e0       	ldi	r30, 0x00	; 0
    3264:	f9 e0       	ldi	r31, 0x09	; 9
    3266:	8f e6       	ldi	r24, 0x6F	; 111
    3268:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI0.MCTRLA = TWI_ENABLE_bm;
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI0.MADDR = 0x00;
    326e:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI0.MDATA = 0x00;
    3270:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    3272:	85 83       	std	Z+5, r24	; 0x05
    3274:	08 95       	ret

00003276 <I2C_0_GetData>:
	return retVal;
}

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_0_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    3276:	ef 92       	push	r14
    3278:	ff 92       	push	r15
    327a:	1f 93       	push	r17
    327c:	cf 93       	push	r28
    327e:	df 93       	push	r29
    3280:	c8 2f       	mov	r28, r24
    3282:	d6 2f       	mov	r29, r22
    3284:	7a 01       	movw	r14, r20
    3286:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
    3288:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    328c:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZL11i2c_0_WaitWv>
    3290:	81 30       	cpi	r24, 0x01	; 1
    3292:	61 f5       	brne	.+88     	; 0x32ec <I2C_0_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    3294:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    3298:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZL11i2c_0_WaitWv>
    329c:	81 30       	cpi	r24, 0x01	; 1
    329e:	41 f5       	brne	.+80     	; 0x32f0 <I2C_0_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
    32a0:	c1 60       	ori	r28, 0x01	; 1
    32a2:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    32a6:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZL11i2c_0_WaitWv>
    32aa:	81 30       	cpi	r24, 0x01	; 1
    32ac:	19 f5       	brne	.+70     	; 0x32f4 <I2C_0_GetData+0x7e>
	{
		return retVal;
	}
	
	retVal = 0;
	if((len != 0) && (pData !=NULL ))
    32ae:	11 23       	and	r17, r17
    32b0:	19 f1       	breq	.+70     	; 0x32f8 <I2C_0_GetData+0x82>
    32b2:	e1 14       	cp	r14, r1
    32b4:	f1 04       	cpc	r15, r1
    32b6:	11 f1       	breq	.+68     	; 0x32fc <I2C_0_GetData+0x86>
    32b8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    32ba:	df ef       	ldi	r29, 0xFF	; 255
    32bc:	d1 0f       	add	r29, r17
    32be:	11 23       	and	r17, r17
    32c0:	f9 f0       	breq	.+62     	; 0x3300 <I2C_0_GetData+0x8a>
		{
			if(i2c_0_WaitR() == I2C_READY)
    32c2:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZL11i2c_0_WaitRv>
    32c6:	83 30       	cpi	r24, 0x03	; 3
    32c8:	e9 f4       	brne	.+58     	; 0x3304 <I2C_0_GetData+0x8e>
			{
				*pData = TWI0.MDATA;
    32ca:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    32ce:	f7 01       	movw	r30, r14
    32d0:	80 83       	st	Z, r24
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    32d2:	d1 11       	cpse	r29, r1
    32d4:	02 c0       	rjmp	.+4      	; 0x32da <I2C_0_GetData+0x64>
    32d6:	87 e0       	ldi	r24, 0x07	; 7
    32d8:	01 c0       	rjmp	.+2      	; 0x32dc <I2C_0_GetData+0x66>
    32da:	82 e0       	ldi	r24, 0x02	; 2
    32dc:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
				retVal++;
    32e0:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    32e2:	ff ef       	ldi	r31, 0xFF	; 255
    32e4:	ef 1a       	sub	r14, r31
    32e6:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
    32e8:	1d 2f       	mov	r17, r29
    32ea:	e7 cf       	rjmp	.-50     	; 0x32ba <I2C_0_GetData+0x44>
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    32ec:	8f ef       	ldi	r24, 0xFF	; 255
    32ee:	0b c0       	rjmp	.+22     	; 0x3306 <I2C_0_GetData+0x90>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    32f0:	8f ef       	ldi	r24, 0xFF	; 255
    32f2:	09 c0       	rjmp	.+18     	; 0x3306 <I2C_0_GetData+0x90>
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    32f4:	8f ef       	ldi	r24, 0xFF	; 255
    32f6:	07 c0       	rjmp	.+14     	; 0x3306 <I2C_0_GetData+0x90>
	}
	
	retVal = 0;
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	05 c0       	rjmp	.+10     	; 0x3306 <I2C_0_GetData+0x90>
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	03 c0       	rjmp	.+6      	; 0x3306 <I2C_0_GetData+0x90>
    3300:	8c 2f       	mov	r24, r28
    3302:	01 c0       	rjmp	.+2      	; 0x3306 <I2C_0_GetData+0x90>
    3304:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	1f 91       	pop	r17
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	08 95       	ret

00003312 <I2C_0_EndSession>:

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    3312:	83 e0       	ldi	r24, 0x03	; 3
    3314:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    3318:	08 95       	ret

0000331a <I2C_0_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_0_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    331a:	ff 92       	push	r15
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	c6 2f       	mov	r28, r22
    3326:	8a 01       	movw	r16, r20
    3328:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
    332a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    332e:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZL11i2c_0_WaitWv>
    3332:	81 30       	cpi	r24, 0x01	; 1
    3334:	29 f5       	brne	.+74     	; 0x3380 <I2C_0_SendData+0x66>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    3336:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    333a:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZL11i2c_0_WaitWv>
    333e:	81 30       	cpi	r24, 0x01	; 1
    3340:	09 f5       	brne	.+66     	; 0x3384 <I2C_0_SendData+0x6a>
	{
		return retVal;
	}

	retVal = 0;
	if((len != 0) && (pData != NULL))
    3342:	dd 23       	and	r29, r29
    3344:	09 f1       	breq	.+66     	; 0x3388 <I2C_0_SendData+0x6e>
    3346:	01 15       	cp	r16, r1
    3348:	11 05       	cpc	r17, r1
    334a:	21 f4       	brne	.+8      	; 0x3354 <I2C_0_SendData+0x3a>
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}

	retVal = 0;
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	21 c0       	rjmp	.+66     	; 0x3392 <I2C_0_SendData+0x78>
    3350:	df 2d       	mov	r29, r15
    3352:	01 c0       	rjmp	.+2      	; 0x3356 <I2C_0_SendData+0x3c>
    3354:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != NULL))
	{
		while(len--)
    3356:	ff 24       	eor	r15, r15
    3358:	fa 94       	dec	r15
    335a:	fd 0e       	add	r15, r29
    335c:	dd 23       	and	r29, r29
    335e:	b1 f0       	breq	.+44     	; 0x338c <I2C_0_SendData+0x72>
		{
			TWI0.MDATA = *pData;
    3360:	f8 01       	movw	r30, r16
    3362:	80 81       	ld	r24, Z
    3364:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
			if(i2c_0_WaitW() == I2C_ACKED)
    3368:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZL11i2c_0_WaitWv>
    336c:	81 30       	cpi	r24, 0x01	; 1
    336e:	81 f4       	brne	.+32     	; 0x3390 <I2C_0_SendData+0x76>
			{
				retVal++;
    3370:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    3372:	0f 5f       	subi	r16, 0xFF	; 255
    3374:	1f 4f       	sbci	r17, 0xFF	; 255
				if(!len) I2C_0_EndSession();
    3376:	f1 10       	cpse	r15, r1
    3378:	eb cf       	rjmp	.-42     	; 0x3350 <I2C_0_SendData+0x36>
    337a:	0e 94 89 19 	call	0x3312	; 0x3312 <I2C_0_EndSession>
    337e:	e8 cf       	rjmp	.-48     	; 0x3350 <I2C_0_SendData+0x36>
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    3380:	8f ef       	ldi	r24, 0xFF	; 255
    3382:	07 c0       	rjmp	.+14     	; 0x3392 <I2C_0_SendData+0x78>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    3384:	8f ef       	ldi	r24, 0xFF	; 255
    3386:	05 c0       	rjmp	.+10     	; 0x3392 <I2C_0_SendData+0x78>
	}

	retVal = 0;
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	03 c0       	rjmp	.+6      	; 0x3392 <I2C_0_SendData+0x78>
    338c:	8c 2f       	mov	r24, r28
    338e:	01 c0       	rjmp	.+2      	; 0x3392 <I2C_0_SendData+0x78>
    3390:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	ff 90       	pop	r15
    339c:	08 95       	ret

0000339e <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    339e:	e0 ee       	ldi	r30, 0xE0	; 224
    33a0:	f5 e0       	ldi	r31, 0x05	; 5
    33a2:	85 81       	ldd	r24, Z+5	; 0x05
    33a4:	83 70       	andi	r24, 0x03	; 3
    33a6:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    33a8:	85 81       	ldd	r24, Z+5	; 0x05
    33aa:	88 60       	ori	r24, 0x08	; 8
    33ac:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    33ae:	e0 e2       	ldi	r30, 0x20	; 32
    33b0:	f9 e0       	ldi	r31, 0x09	; 9
    33b2:	8f e6       	ldi	r24, 0x6F	; 111
    33b4:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    33ba:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    33bc:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    33be:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    33c0:	e2 e3       	ldi	r30, 0x32	; 50
    33c2:	f4 e0       	ldi	r31, 0x04	; 4
    33c4:	80 81       	ld	r24, Z
    33c6:	88 60       	ori	r24, 0x08	; 8
    33c8:	80 83       	st	Z, r24
    33ca:	e3 e3       	ldi	r30, 0x33	; 51
    33cc:	f4 e0       	ldi	r31, 0x04	; 4
    33ce:	80 81       	ld	r24, Z
    33d0:	88 60       	ori	r24, 0x08	; 8
    33d2:	80 83       	st	Z, r24
    33d4:	08 95       	ret

000033d6 <I2C_1_GetData>:
}


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    33d6:	ef 92       	push	r14
    33d8:	ff 92       	push	r15
    33da:	1f 93       	push	r17
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
    33e0:	c8 2f       	mov	r28, r24
    33e2:	d6 2f       	mov	r29, r22
    33e4:	7a 01       	movw	r14, r20
    33e6:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    33e8:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    33ec:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZL11i2c_1_WaitWv>
    33f0:	81 30       	cpi	r24, 0x01	; 1
    33f2:	61 f5       	brne	.+88     	; 0x344c <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    33f4:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    33f8:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZL11i2c_1_WaitWv>
    33fc:	81 30       	cpi	r24, 0x01	; 1
    33fe:	41 f5       	brne	.+80     	; 0x3450 <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    3400:	c1 60       	ori	r28, 0x01	; 1
    3402:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    3406:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZL11i2c_1_WaitWv>
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	19 f5       	brne	.+70     	; 0x3454 <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=NULL ))
    340e:	11 23       	and	r17, r17
    3410:	19 f1       	breq	.+70     	; 0x3458 <I2C_1_GetData+0x82>
    3412:	e1 14       	cp	r14, r1
    3414:	f1 04       	cpc	r15, r1
    3416:	11 f1       	breq	.+68     	; 0x345c <I2C_1_GetData+0x86>
    3418:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    341a:	df ef       	ldi	r29, 0xFF	; 255
    341c:	d1 0f       	add	r29, r17
    341e:	11 23       	and	r17, r17
    3420:	f9 f0       	breq	.+62     	; 0x3460 <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    3422:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZL11I2C_1_WaitRv>
    3426:	83 30       	cpi	r24, 0x03	; 3
    3428:	e9 f4       	brne	.+58     	; 0x3464 <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    342a:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    342e:	f7 01       	movw	r30, r14
    3430:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    3432:	d1 11       	cpse	r29, r1
    3434:	02 c0       	rjmp	.+4      	; 0x343a <I2C_1_GetData+0x64>
    3436:	87 e0       	ldi	r24, 0x07	; 7
    3438:	01 c0       	rjmp	.+2      	; 0x343c <I2C_1_GetData+0x66>
    343a:	82 e0       	ldi	r24, 0x02	; 2
    343c:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    3440:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    3442:	ff ef       	ldi	r31, 0xFF	; 255
    3444:	ef 1a       	sub	r14, r31
    3446:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
    3448:	1d 2f       	mov	r17, r29
    344a:	e7 cf       	rjmp	.-50     	; 0x341a <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    344c:	8f ef       	ldi	r24, 0xFF	; 255
    344e:	0b c0       	rjmp	.+22     	; 0x3466 <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    3450:	8f ef       	ldi	r24, 0xFF	; 255
    3452:	09 c0       	rjmp	.+18     	; 0x3466 <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    3454:	8f ef       	ldi	r24, 0xFF	; 255
    3456:	07 c0       	rjmp	.+14     	; 0x3466 <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	05 c0       	rjmp	.+10     	; 0x3466 <I2C_1_GetData+0x90>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	03 c0       	rjmp	.+6      	; 0x3466 <I2C_1_GetData+0x90>
    3460:	8c 2f       	mov	r24, r28
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <I2C_1_GetData+0x90>
    3464:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    3466:	df 91       	pop	r29
    3468:	cf 91       	pop	r28
    346a:	1f 91       	pop	r17
    346c:	ff 90       	pop	r15
    346e:	ef 90       	pop	r14
    3470:	08 95       	ret

00003472 <I2C_1_EndSession>:

void I2C_1_EndSession(void)
{
	TWI1.MCTRLB = TWI_MCMD_STOP_gc;
    3472:	83 e0       	ldi	r24, 0x03	; 3
    3474:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
    3478:	08 95       	ret

0000347a <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    347a:	ff 92       	push	r15
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	c6 2f       	mov	r28, r22
    3486:	8a 01       	movw	r16, r20
    3488:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    348a:	8e 7f       	andi	r24, 0xFE	; 254
    348c:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    3490:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZL11i2c_1_WaitWv>
    3494:	81 30       	cpi	r24, 0x01	; 1
    3496:	29 f5       	brne	.+74     	; 0x34e2 <I2C_1_SendData+0x68>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    3498:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    349c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZL11i2c_1_WaitWv>
    34a0:	81 30       	cpi	r24, 0x01	; 1
    34a2:	09 f5       	brne	.+66     	; 0x34e6 <I2C_1_SendData+0x6c>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != NULL))
    34a4:	dd 23       	and	r29, r29
    34a6:	09 f1       	breq	.+66     	; 0x34ea <I2C_1_SendData+0x70>
    34a8:	01 15       	cp	r16, r1
    34aa:	11 05       	cpc	r17, r1
    34ac:	21 f4       	brne	.+8      	; 0x34b6 <I2C_1_SendData+0x3c>
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
	}	

	retVal = 0;
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	21 c0       	rjmp	.+66     	; 0x34f4 <I2C_1_SendData+0x7a>
    34b2:	df 2d       	mov	r29, r15
    34b4:	01 c0       	rjmp	.+2      	; 0x34b8 <I2C_1_SendData+0x3e>
    34b6:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != NULL))
	{
		while(len--)
    34b8:	ff 24       	eor	r15, r15
    34ba:	fa 94       	dec	r15
    34bc:	fd 0e       	add	r15, r29
    34be:	dd 23       	and	r29, r29
    34c0:	b1 f0       	breq	.+44     	; 0x34ee <I2C_1_SendData+0x74>
		{
			TWI1.MDATA = *pData;
    34c2:	f8 01       	movw	r30, r16
    34c4:	80 81       	ld	r24, Z
    34c6:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    34ca:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZL11i2c_1_WaitWv>
    34ce:	81 30       	cpi	r24, 0x01	; 1
    34d0:	81 f4       	brne	.+32     	; 0x34f2 <I2C_1_SendData+0x78>
			{
				retVal++;
    34d2:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    34d4:	0f 5f       	subi	r16, 0xFF	; 255
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
				if(!len) I2C_1_EndSession();
    34d8:	f1 10       	cpse	r15, r1
    34da:	eb cf       	rjmp	.-42     	; 0x34b2 <I2C_1_SendData+0x38>
    34dc:	0e 94 39 1a 	call	0x3472	; 0x3472 <I2C_1_EndSession>
    34e0:	e8 cf       	rjmp	.-48     	; 0x34b2 <I2C_1_SendData+0x38>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    34e2:	8f ef       	ldi	r24, 0xFF	; 255
    34e4:	07 c0       	rjmp	.+14     	; 0x34f4 <I2C_1_SendData+0x7a>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    34e6:	8f ef       	ldi	r24, 0xFF	; 255
    34e8:	05 c0       	rjmp	.+10     	; 0x34f4 <I2C_1_SendData+0x7a>
	}	

	retVal = 0;
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	03 c0       	rjmp	.+6      	; 0x34f4 <I2C_1_SendData+0x7a>
    34ee:	8c 2f       	mov	r24, r28
    34f0:	01 c0       	rjmp	.+2      	; 0x34f4 <I2C_1_SendData+0x7a>
    34f2:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	08 95       	ret

00003500 <_ZL21USART4_initializationm>:
				USART1.CTRLB &= ~(1 << USART_RXEN_bp);
				memset(rx_buffer, 0, sizeof(rx_buffer));
				USART1.CTRLB |= (1 << USART_RXEN_bp);
			}
		}
}
    3500:	20 b3       	in	r18, 0x10	; 16
    3502:	2d 7f       	andi	r18, 0xFD	; 253
    3504:	20 bb       	out	0x10, r18	; 16
    3506:	e1 e9       	ldi	r30, 0x91	; 145
    3508:	f4 e0       	ldi	r31, 0x04	; 4
    350a:	20 81       	ld	r18, Z
    350c:	27 7f       	andi	r18, 0xF7	; 247
    350e:	20 83       	st	Z, r18
    3510:	20 b3       	in	r18, 0x10	; 16
    3512:	21 60       	ori	r18, 0x01	; 1
    3514:	20 bb       	out	0x10, r18	; 16
    3516:	21 b3       	in	r18, 0x11	; 17
    3518:	21 60       	ori	r18, 0x01	; 1
    351a:	21 bb       	out	0x11, r18	; 17
    351c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <USART4_init>
    3520:	08 95       	ret

00003522 <_ZL21USART1_initializationm>:
    3522:	28 b1       	in	r18, 0x08	; 8
    3524:	2d 7f       	andi	r18, 0xFD	; 253
    3526:	28 b9       	out	0x08, r18	; 8
    3528:	e1 e5       	ldi	r30, 0x51	; 81
    352a:	f4 e0       	ldi	r31, 0x04	; 4
    352c:	20 81       	ld	r18, Z
    352e:	27 7f       	andi	r18, 0xF7	; 247
    3530:	20 83       	st	Z, r18
    3532:	28 b1       	in	r18, 0x08	; 8
    3534:	21 60       	ori	r18, 0x01	; 1
    3536:	28 b9       	out	0x08, r18	; 8
    3538:	29 b1       	in	r18, 0x09	; 9
    353a:	21 60       	ori	r18, 0x01	; 1
    353c:	29 b9       	out	0x09, r18	; 9
    353e:	0e 94 c3 28 	call	0x5186	; 0x5186 <USART1_init>
    3542:	08 95       	ret

00003544 <_Z18nextFullLBTxBufferv>:
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	80 91 87 45 	lds	r24, 0x4587	; 0x804587 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    354a:	28 2f       	mov	r18, r24
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	42 e3       	ldi	r20, 0x32	; 50
    3550:	42 9f       	mul	r20, r18
    3552:	f0 01       	movw	r30, r0
    3554:	43 9f       	mul	r20, r19
    3556:	f0 0d       	add	r31, r0
    3558:	11 24       	eor	r1, r1
    355a:	e4 5f       	subi	r30, 0xF4	; 244
    355c:	f9 4b       	sbci	r31, 0xB9	; 185
    355e:	40 81       	ld	r20, Z
    3560:	41 11       	cpse	r20, r1
    3562:	0b c0       	rjmp	.+22     	; 0x357a <_Z18nextFullLBTxBufferv+0x36>
    3564:	9f 5f       	subi	r25, 0xFF	; 255
    3566:	94 30       	cpi	r25, 0x04	; 4
    3568:	50 f4       	brcc	.+20     	; 0x357e <_Z18nextFullLBTxBufferv+0x3a>
    356a:	8f 5f       	subi	r24, 0xFF	; 255
    356c:	80 93 87 45 	sts	0x4587, r24	; 0x804587 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    3570:	84 30       	cpi	r24, 0x04	; 4
    3572:	48 f3       	brcs	.-46     	; 0x3546 <_Z18nextFullLBTxBufferv+0x2>
    3574:	10 92 87 45 	sts	0x4587, r1	; 0x804587 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    3578:	e6 cf       	rjmp	.-52     	; 0x3546 <_Z18nextFullLBTxBufferv+0x2>
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <_Z18nextFullLBTxBufferv+0x3c>
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	88 23       	and	r24, r24
    3582:	49 f0       	breq	.+18     	; 0x3596 <_Z18nextFullLBTxBufferv+0x52>
    3584:	42 e3       	ldi	r20, 0x32	; 50
    3586:	42 9f       	mul	r20, r18
    3588:	c0 01       	movw	r24, r0
    358a:	43 9f       	mul	r20, r19
    358c:	90 0d       	add	r25, r0
    358e:	11 24       	eor	r1, r1
    3590:	84 5f       	subi	r24, 0xF4	; 244
    3592:	99 4b       	sbci	r25, 0xB9	; 185
    3594:	08 95       	ret
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	08 95       	ret

0000359c <_Z19nextEmptyLBRxBufferv>:
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	80 91 86 45 	lds	r24, 0x4586	; 0x804586 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    35a2:	28 2f       	mov	r18, r24
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	42 e4       	ldi	r20, 0x42	; 66
    35a8:	42 9f       	mul	r20, r18
    35aa:	f0 01       	movw	r30, r0
    35ac:	43 9f       	mul	r20, r19
    35ae:	f0 0d       	add	r31, r0
    35b0:	11 24       	eor	r1, r1
    35b2:	e8 57       	subi	r30, 0x78	; 120
    35b4:	fa 4b       	sbci	r31, 0xBA	; 186
    35b6:	41 81       	ldd	r20, Z+1	; 0x01
    35b8:	52 81       	ldd	r21, Z+2	; 0x02
    35ba:	45 2b       	or	r20, r21
    35bc:	59 f0       	breq	.+22     	; 0x35d4 <_Z19nextEmptyLBRxBufferv+0x38>
    35be:	9f 5f       	subi	r25, 0xFF	; 255
    35c0:	92 30       	cpi	r25, 0x02	; 2
    35c2:	50 f4       	brcc	.+20     	; 0x35d8 <_Z19nextEmptyLBRxBufferv+0x3c>
    35c4:	8f 5f       	subi	r24, 0xFF	; 255
    35c6:	80 93 86 45 	sts	0x4586, r24	; 0x804586 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    35ca:	82 30       	cpi	r24, 0x02	; 2
    35cc:	40 f3       	brcs	.-48     	; 0x359e <_Z19nextEmptyLBRxBufferv+0x2>
    35ce:	10 92 86 45 	sts	0x4586, r1	; 0x804586 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    35d2:	e5 cf       	rjmp	.-54     	; 0x359e <_Z19nextEmptyLBRxBufferv+0x2>
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	01 c0       	rjmp	.+2      	; 0x35da <_Z19nextEmptyLBRxBufferv+0x3e>
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	88 23       	and	r24, r24
    35dc:	49 f0       	breq	.+18     	; 0x35f0 <_Z19nextEmptyLBRxBufferv+0x54>
    35de:	42 e4       	ldi	r20, 0x42	; 66
    35e0:	42 9f       	mul	r20, r18
    35e2:	c0 01       	movw	r24, r0
    35e4:	43 9f       	mul	r20, r19
    35e6:	90 0d       	add	r25, r0
    35e8:	11 24       	eor	r1, r1
    35ea:	88 57       	subi	r24, 0x78	; 120
    35ec:	9a 4b       	sbci	r25, 0xBA	; 186
    35ee:	08 95       	ret
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	08 95       	ret

000035f6 <_Z14linkbus_end_txv>:
    35f6:	80 91 d4 46 	lds	r24, 0x46D4	; 0x8046d4 <_ZL17linkbus_tx_active>
    35fa:	88 23       	and	r24, r24
    35fc:	89 f0       	breq	.+34     	; 0x3620 <_Z14linkbus_end_txv+0x2a>
    35fe:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    3602:	81 11       	cpse	r24, r1
    3604:	06 c0       	rjmp	.+12     	; 0x3612 <_Z14linkbus_end_txv+0x1c>
    3606:	e0 e8       	ldi	r30, 0x80	; 128
    3608:	f8 e0       	ldi	r31, 0x08	; 8
    360a:	85 81       	ldd	r24, Z+5	; 0x05
    360c:	8f 7d       	andi	r24, 0xDF	; 223
    360e:	85 83       	std	Z+5, r24	; 0x05
    3610:	05 c0       	rjmp	.+10     	; 0x361c <_Z14linkbus_end_txv+0x26>
    3612:	e0 e2       	ldi	r30, 0x20	; 32
    3614:	f8 e0       	ldi	r31, 0x08	; 8
    3616:	85 81       	ldd	r24, Z+5	; 0x05
    3618:	8f 7d       	andi	r24, 0xDF	; 223
    361a:	85 83       	std	Z+5, r24	; 0x05
    361c:	10 92 d4 46 	sts	0x46D4, r1	; 0x8046d4 <_ZL17linkbus_tx_active>
    3620:	08 95       	ret

00003622 <_Z12linkbus_initm14USART_Number_t>:

	USART4_init(baud);
}

void linkbus_init(uint32_t baud, USART_Number_t usart)
{
    3622:	cf 92       	push	r12
    3624:	df 92       	push	r13
    3626:	ef 92       	push	r14
    3628:	ff 92       	push	r15
    362a:	cf 93       	push	r28
    362c:	6b 01       	movw	r12, r22
    362e:	7c 01       	movw	r14, r24
	memset(rx_buffer, 0, sizeof(rx_buffer));
    3630:	84 e8       	ldi	r24, 0x84	; 132
    3632:	e8 e8       	ldi	r30, 0x88	; 136
    3634:	f5 e4       	ldi	r31, 0x45	; 69
    3636:	df 01       	movw	r26, r30
    3638:	1d 92       	st	X+, r1
    363a:	8a 95       	dec	r24
    363c:	e9 f7       	brne	.-6      	; 0x3638 <_Z12linkbus_initm14USART_Number_t+0x16>

	for(int bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	84 30       	cpi	r24, 0x04	; 4
    3644:	91 05       	cpc	r25, r1
    3646:	5c f4       	brge	.+22     	; 0x365e <_Z12linkbus_initm14USART_Number_t+0x3c>
	{
		tx_buffer[bufferIndex][0] = '\0';
    3648:	22 e3       	ldi	r18, 0x32	; 50
    364a:	28 9f       	mul	r18, r24
    364c:	f0 01       	movw	r30, r0
    364e:	29 9f       	mul	r18, r25
    3650:	f0 0d       	add	r31, r0
    3652:	11 24       	eor	r1, r1
    3654:	e4 5f       	subi	r30, 0xF4	; 244
    3656:	f9 4b       	sbci	r31, 0xB9	; 185
    3658:	10 82       	st	Z, r1

void linkbus_init(uint32_t baud, USART_Number_t usart)
{
	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(int bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    365a:	01 96       	adiw	r24, 0x01	; 1
    365c:	f2 cf       	rjmp	.-28     	; 0x3642 <_Z12linkbus_initm14USART_Number_t+0x20>
	{
		tx_buffer[bufferIndex][0] = '\0';
	}

	if((usart != USART_DO_NOT_CHANGE) || (g_linkbus_usart_number == USART_NOT_SET))
    365e:	46 30       	cpi	r20, 0x06	; 6
    3660:	21 f4       	brne	.+8      	; 0x366a <_Z12linkbus_initm14USART_Number_t+0x48>
    3662:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    3666:	87 30       	cpi	r24, 0x07	; 7
    3668:	61 f4       	brne	.+24     	; 0x3682 <_Z12linkbus_initm14USART_Number_t+0x60>
    366a:	c4 2f       	mov	r28, r20
    366c:	c7 01       	movw	r24, r14
    366e:	b6 01       	movw	r22, r12
	{
		if(usart == USART_0)
    3670:	41 11       	cpse	r20, r1
    3672:	03 c0       	rjmp	.+6      	; 0x367a <_Z12linkbus_initm14USART_Number_t+0x58>
		{
			USART4_initialization(baud);
    3674:	0e 94 80 1a 	call	0x3500	; 0x3500 <_ZL21USART4_initializationm>
    3678:	02 c0       	rjmp	.+4      	; 0x367e <_Z12linkbus_initm14USART_Number_t+0x5c>
		}
		else
		{
			USART1_initialization(baud);
    367a:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZL21USART1_initializationm>
		}
		
		g_linkbus_usart_number = usart;
    367e:	c0 93 22 40 	sts	0x4022, r28	; 0x804022 <g_linkbus_usart_number>
	}

	g_bus_disabled = false;
    3682:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <_ZL14g_bus_disabled>
}
    3686:	cf 91       	pop	r28
    3688:	ff 90       	pop	r15
    368a:	ef 90       	pop	r14
    368c:	df 90       	pop	r13
    368e:	cf 90       	pop	r12
    3690:	08 95       	ret

00003692 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	fc 01       	movw	r30, r24
    3696:	b0 97       	sbiw	r30, 0x20	; 32
    3698:	ed 35       	cpi	r30, 0x5D	; 93
    369a:	f1 05       	cpc	r31, r1
    369c:	08 f0       	brcs	.+2      	; 0x36a0 <_Z12getMorseCharc+0xe>
    369e:	e8 c0       	rjmp	.+464    	; 0x3870 <_Z12getMorseCharc+0x1de>
    36a0:	e9 54       	subi	r30, 0x49	; 73
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    36a8:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    36aa:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    36ac:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    36ae:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    36b0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    36b2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    36b4:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    36b6:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    36b8:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    36ba:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    36bc:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    36be:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    36c0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    36c2:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    36c4:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    36c6:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    36c8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    36ca:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    36ce:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    36d0:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    36d2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    36d4:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    36d6:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    36d8:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    36da:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    36dc:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    36de:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    36e0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    36e2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    36e4:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    36e6:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    36e8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    36ea:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    36ec:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    36ee:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    36f0:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    36f2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    36f4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    36f6:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    36f8:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    36fa:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    36fc:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    36fe:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    3700:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    3702:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    3704:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    3706:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3708:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    370a:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    370c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    370e:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3710:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    3712:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    3714:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    3716:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    3718:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    371a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    371c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    371e:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    3720:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    3722:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    3724:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    3726:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    3728:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    372a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    372c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    372e:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    3730:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    3732:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    3734:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    3736:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3738:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    373a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    373c:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    373e:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3740:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    3742:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    3744:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    3746:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    3748:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    374a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    374c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    374e:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    3750:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    3752:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    3754:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    3756:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    3758:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    375a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    375c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    375e:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    3760:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    3762:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    3764:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    3766:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    3768:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    376a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    376c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    376e:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3770:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    3772:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    3774:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    3776:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    3778:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    377a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    377c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    377e:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    3780:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    3782:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    3784:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    3786:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    3788:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    378a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    378c:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    378e:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    3790:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    3792:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    3794:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    3796:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    3798:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    379a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    379c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    379e:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    37a0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    37a2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    37a4:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    37a6:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    37a8:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    37aa:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    37ac:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    37ae:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    37b0:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    37b2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    37b4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    37b6:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    37b8:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    37ba:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    37bc:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    37be:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    37c0:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    37c2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    37c4:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    37c6:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    37c8:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    37ca:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    37cc:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    37ce:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    37d0:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    37d2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    37d4:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    37d6:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    37d8:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    37da:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    37dc:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    37de:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    37e0:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    37e2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    37e4:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    37e6:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    37e8:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    37ea:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    37ec:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    37ee:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    37f0:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    37f2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    37f4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    37f6:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    37f8:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    37fa:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    37fc:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    37fe:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    3800:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    3802:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    3804:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    3806:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    3808:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    380a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    380c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    380e:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    3810:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    3812:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    3814:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    3816:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    3818:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    381a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    381c:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    381e:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    3820:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    3822:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    3824:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    3826:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    3828:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    382a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    382c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    382e:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    3830:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    3832:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    3834:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    3836:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    3838:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    383a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    383c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    383e:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    3840:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    3842:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    3844:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    3846:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    3848:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    384a:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    384c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    384e:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    3850:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    3852:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    3854:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    3856:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    3858:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    385a:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    385c:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    385e:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    3860:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    3862:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    3864:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    3866:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    3868:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    386a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    386c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    386e:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    3870:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    3872:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    3874:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    3876:	08 95       	ret

00003878 <_Z9makeMorsePcPbS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a bool indicating whether a CW carrier should be sent
 *  Pass in a pointer to a bool in the second and third arguments:
 */
bool makeMorse(char* s, bool* repeating, bool* finished)
{
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
    387c:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static bool completedString = false;
	static bool carrierOn = false;
	static bool holdKeyDown = false;

	if(s)   /* load a new NULL-terminated string to send */
    387e:	00 97       	sbiw	r24, 0x00	; 0
    3880:	b1 f1       	breq	.+108    	; 0x38ee <_Z9makeMorsePcPbS0_+0x76>
	{
		holdKeyDown = false;
    3882:	10 92 e0 46 	sts	0x46E0, r1	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>

		if(repeating)
    3886:	61 15       	cp	r22, r1
    3888:	71 05       	cpc	r23, r1
    388a:	21 f0       	breq	.+8      	; 0x3894 <_Z9makeMorsePcPbS0_+0x1c>
		{
			repeat = *repeating;
    388c:	db 01       	movw	r26, r22
    388e:	2c 91       	ld	r18, X
    3890:	20 93 25 40 	sts	0x4025, r18	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
		}

		if(*s)
    3894:	fc 01       	movw	r30, r24
    3896:	20 81       	ld	r18, Z
    3898:	22 23       	and	r18, r18
    389a:	d9 f0       	breq	.+54     	; 0x38d2 <_Z9makeMorsePcPbS0_+0x5a>
		{
			str = s;
    389c:	80 93 de 46 	sts	0x46DE, r24	; 0x8046de <_ZZ9makeMorsePcPbS0_E3str>
    38a0:	90 93 df 46 	sts	0x46DF, r25	; 0x8046df <_ZZ9makeMorsePcPbS0_E3str+0x1>
			c = ' ';
    38a4:	80 e2       	ldi	r24, 0x20	; 32
    38a6:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
			morseInProgress = getMorseChar(*str);
    38aa:	82 2f       	mov	r24, r18
    38ac:	0e 94 49 1b 	call	0x3692	; 0x3692 <_Z12getMorseCharc>
    38b0:	60 93 db 46 	sts	0x46DB, r22	; 0x8046db <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    38b4:	70 93 dc 46 	sts	0x46DC, r23	; 0x8046dc <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    38b8:	80 93 dd 46 	sts	0x46DD, r24	; 0x8046dd <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
			charIndex = 0;
    38bc:	10 92 da 46 	sts	0x46DA, r1	; 0x8046da <_ZZ9makeMorsePcPbS0_E9charIndex>
			symbolIndex = 0;
    38c0:	10 92 d9 46 	sts	0x46D9, r1	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			elementIndex = 0;
    38c4:	10 92 d8 46 	sts	0x46D8, r1	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E12elementIndex>
			addedSpace = 0;
    38c8:	10 92 d7 46 	sts	0x46D7, r1	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E10addedSpace>
			completedString = false;
    38cc:	10 92 d6 46 	sts	0x46D6, r1	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E15completedString>
    38d0:	0a c0       	rjmp	.+20     	; 0x38e6 <_Z9makeMorsePcPbS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    38d2:	10 92 de 46 	sts	0x46DE, r1	; 0x8046de <_ZZ9makeMorsePcPbS0_E3str>
    38d6:	10 92 df 46 	sts	0x46DF, r1	; 0x8046df <_ZZ9makeMorsePcPbS0_E3str+0x1>
			completedString = true;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	80 93 d6 46 	sts	0x46D6, r24	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E15completedString>
			if(finished)
    38e0:	20 97       	sbiw	r28, 0x00	; 0
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <_Z9makeMorsePcPbS0_+0x6e>
			{
				*finished = true;
    38e4:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    38e6:	10 92 d5 46 	sts	0x46D5, r1	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E9carrierOn>
		return( OFF);
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	b8 c0       	rjmp	.+368    	; 0x3a5e <_Z9makeMorsePcPbS0_+0x1e6>
	}
	else if(str)
    38ee:	e0 91 de 46 	lds	r30, 0x46DE	; 0x8046de <_ZZ9makeMorsePcPbS0_E3str>
    38f2:	f0 91 df 46 	lds	r31, 0x46DF	; 0x8046df <_ZZ9makeMorsePcPbS0_E3str+0x1>
    38f6:	30 97       	sbiw	r30, 0x00	; 0
    38f8:	09 f4       	brne	.+2      	; 0x38fc <_Z9makeMorsePcPbS0_+0x84>
    38fa:	a4 c0       	rjmp	.+328    	; 0x3a44 <_Z9makeMorsePcPbS0_+0x1cc>
	{
		if(repeating)
    38fc:	61 15       	cp	r22, r1
    38fe:	71 05       	cpc	r23, r1
    3900:	21 f0       	breq	.+8      	; 0x390a <_Z9makeMorsePcPbS0_+0x92>
		{
			*repeating = repeat;
    3902:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    3906:	db 01       	movw	r26, r22
    3908:	8c 93       	st	X, r24
		}

		if(completedString)
    390a:	80 91 d6 46 	lds	r24, 0x46D6	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E15completedString>
    390e:	88 23       	and	r24, r24
    3910:	49 f0       	breq	.+18     	; 0x3924 <_Z9makeMorsePcPbS0_+0xac>
		{
			if(finished)
    3912:	20 97       	sbiw	r28, 0x00	; 0
    3914:	09 f4       	brne	.+2      	; 0x3918 <_Z9makeMorsePcPbS0_+0xa0>
    3916:	a2 c0       	rjmp	.+324    	; 0x3a5c <_Z9makeMorsePcPbS0_+0x1e4>
			{
				*finished = true;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	88 83       	st	Y, r24
				holdKeyDown = false;
    391c:	10 92 e0 46 	sts	0x46E0, r1	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
			}
			return( OFF);
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	9d c0       	rjmp	.+314    	; 0x3a5e <_Z9makeMorsePcPbS0_+0x1e6>
		}

		if(elementIndex)
    3924:	80 91 d8 46 	lds	r24, 0x46D8	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    3928:	88 23       	and	r24, r24
    392a:	21 f0       	breq	.+8      	; 0x3934 <_Z9makeMorsePcPbS0_+0xbc>
		{
			elementIndex--;
    392c:	81 50       	subi	r24, 0x01	; 1
    392e:	80 93 d8 46 	sts	0x46D8, r24	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    3932:	7e c0       	rjmp	.+252    	; 0x3a30 <_Z9makeMorsePcPbS0_+0x1b8>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    3934:	80 91 d5 46 	lds	r24, 0x46D5	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E9carrierOn>
    3938:	88 23       	and	r24, r24
    393a:	81 f0       	breq	.+32     	; 0x395c <_Z9makeMorsePcPbS0_+0xe4>
    393c:	80 91 e0 46 	lds	r24, 0x46E0	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    3940:	81 11       	cpse	r24, r1
    3942:	0c c0       	rjmp	.+24     	; 0x395c <_Z9makeMorsePcPbS0_+0xe4>
		{
			carrierOn = false;
    3944:	10 92 d5 46 	sts	0x46D5, r1	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    3948:	80 91 d7 46 	lds	r24, 0x46D7	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E10addedSpace>
    394c:	88 23       	and	r24, r24
    394e:	09 f4       	brne	.+2      	; 0x3952 <_Z9makeMorsePcPbS0_+0xda>
    3950:	6f c0       	rjmp	.+222    	; 0x3a30 <_Z9makeMorsePcPbS0_+0x1b8>
			{
				elementIndex = addedSpace;
    3952:	80 93 d8 46 	sts	0x46D8, r24	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				addedSpace = 0;
    3956:	10 92 d7 46 	sts	0x46D7, r1	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E10addedSpace>
    395a:	6a c0       	rjmp	.+212    	; 0x3a30 <_Z9makeMorsePcPbS0_+0x1b8>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    395c:	90 91 dc 46 	lds	r25, 0x46DC	; 0x8046dc <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    3960:	80 91 d9 46 	lds	r24, 0x46D9	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    3964:	89 17       	cp	r24, r25
    3966:	90 f1       	brcs	.+100    	; 0x39cc <_Z9makeMorsePcPbS0_+0x154>
			{
				c = (*(str + ++charIndex));
    3968:	80 91 da 46 	lds	r24, 0x46DA	; 0x8046da <_ZZ9makeMorsePcPbS0_E9charIndex>
    396c:	8f 5f       	subi	r24, 0xFF	; 255
    396e:	80 93 da 46 	sts	0x46DA, r24	; 0x8046da <_ZZ9makeMorsePcPbS0_E9charIndex>
    3972:	df 01       	movw	r26, r30
    3974:	a8 0f       	add	r26, r24
    3976:	b1 1d       	adc	r27, r1
    3978:	8c 91       	ld	r24, X
    397a:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>

				if(!c)  /* wrap to beginning of text */
    397e:	81 11       	cpse	r24, r1
    3980:	19 c0       	rjmp	.+50     	; 0x39b4 <_Z9makeMorsePcPbS0_+0x13c>
				{
					if(repeat)
    3982:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    3986:	88 23       	and	r24, r24
    3988:	31 f0       	breq	.+12     	; 0x3996 <_Z9makeMorsePcPbS0_+0x11e>
					{
						c = *str;
    398a:	80 81       	ld	r24, Z
    398c:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
						charIndex = 0;
    3990:	10 92 da 46 	sts	0x46DA, r1	; 0x8046da <_ZZ9makeMorsePcPbS0_E9charIndex>
    3994:	0f c0       	rjmp	.+30     	; 0x39b4 <_Z9makeMorsePcPbS0_+0x13c>
					}
					else
					{
						str = NULL;
    3996:	10 92 de 46 	sts	0x46DE, r1	; 0x8046de <_ZZ9makeMorsePcPbS0_E3str>
    399a:	10 92 df 46 	sts	0x46DF, r1	; 0x8046df <_ZZ9makeMorsePcPbS0_E3str+0x1>
						carrierOn = OFF;
    399e:	10 92 d5 46 	sts	0x46D5, r1	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E9carrierOn>
						completedString = true;
    39a2:	91 e0       	ldi	r25, 0x01	; 1
    39a4:	90 93 d6 46 	sts	0x46D6, r25	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E15completedString>
						if(finished)
    39a8:	20 97       	sbiw	r28, 0x00	; 0
    39aa:	09 f0       	breq	.+2      	; 0x39ae <_Z9makeMorsePcPbS0_+0x136>
						{
							*finished = true;
    39ac:	98 83       	st	Y, r25
						}
						holdKeyDown = false;
    39ae:	10 92 e0 46 	sts	0x46E0, r1	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
						return( OFF );
    39b2:	55 c0       	rjmp	.+170    	; 0x3a5e <_Z9makeMorsePcPbS0_+0x1e6>
					}
				}

				morseInProgress = getMorseChar(c);
    39b4:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    39b8:	0e 94 49 1b 	call	0x3692	; 0x3692 <_Z12getMorseCharc>
    39bc:	60 93 db 46 	sts	0x46DB, r22	; 0x8046db <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    39c0:	70 93 dc 46 	sts	0x46DC, r23	; 0x8046dc <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    39c4:	80 93 dd 46 	sts	0x46DD, r24	; 0x8046dd <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    39c8:	10 92 d9 46 	sts	0x46D9, r1	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    39cc:	80 91 db 46 	lds	r24, 0x46DB	; 0x8046db <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    39d0:	8d 3f       	cpi	r24, 0xFD	; 253
    39d2:	f8 f4       	brcc	.+62     	; 0x3a12 <_Z9makeMorsePcPbS0_+0x19a>
			{
				bool isDah = morseInProgress.pattern & (1 << symbolIndex++);
    39d4:	30 91 d9 46 	lds	r19, 0x46D9	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    39d8:	21 e0       	ldi	r18, 0x01	; 1
    39da:	23 0f       	add	r18, r19
    39dc:	20 93 d9 46 	sts	0x46D9, r18	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	02 c0       	rjmp	.+4      	; 0x39e8 <_Z9makeMorsePcPbS0_+0x170>
    39e4:	95 95       	asr	r25
    39e6:	87 95       	ror	r24
    39e8:	3a 95       	dec	r19
    39ea:	e2 f7       	brpl	.-8      	; 0x39e4 <_Z9makeMorsePcPbS0_+0x16c>

				if(isDah)
    39ec:	80 ff       	sbrs	r24, 0
    39ee:	04 c0       	rjmp	.+8      	; 0x39f8 <_Z9makeMorsePcPbS0_+0x180>
				{
					elementIndex = 2;
    39f0:	82 e0       	ldi	r24, 0x02	; 2
    39f2:	80 93 d8 46 	sts	0x46D8, r24	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    39f6:	02 c0       	rjmp	.+4      	; 0x39fc <_Z9makeMorsePcPbS0_+0x184>
				}
				else
				{
					elementIndex = 0;
    39f8:	10 92 d8 46 	sts	0x46D8, r1	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}

				carrierOn = true;
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	80 93 d5 46 	sts	0x46D5, r24	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    3a02:	80 91 dc 46 	lds	r24, 0x46DC	; 0x8046dc <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    3a06:	28 17       	cp	r18, r24
    3a08:	98 f0       	brcs	.+38     	; 0x3a30 <_Z9makeMorsePcPbS0_+0x1b8>
				{
					addedSpace = 2;
    3a0a:	82 e0       	ldi	r24, 0x02	; 2
    3a0c:	80 93 d7 46 	sts	0x46D7, r24	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E10addedSpace>
    3a10:	0f c0       	rjmp	.+30     	; 0x3a30 <_Z9makeMorsePcPbS0_+0x1b8>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    3a12:	80 91 dc 46 	lds	r24, 0x46DC	; 0x8046dc <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    3a16:	9f ef       	ldi	r25, 0xFF	; 255
    3a18:	90 93 d9 46 	sts	0x46D9, r25	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
				carrierOn = false;
    3a1c:	10 92 d5 46 	sts	0x46D5, r1	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E9carrierOn>
				if(sym >= 4 )
    3a20:	84 30       	cpi	r24, 0x04	; 4
    3a22:	20 f0       	brcs	.+8      	; 0x3a2c <_Z9makeMorsePcPbS0_+0x1b4>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    3a24:	84 50       	subi	r24, 0x04	; 4
    3a26:	80 93 d8 46 	sts	0x46D8, r24	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <_Z9makeMorsePcPbS0_+0x1b8>
				}
				else
				{
					elementIndex = 0;
    3a2c:	10 92 d8 46 	sts	0x46D8, r1	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    3a30:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    3a34:	8c 33       	cpi	r24, 0x3C	; 60
    3a36:	21 f4       	brne	.+8      	; 0x3a40 <_Z9makeMorsePcPbS0_+0x1c8>
		{
			holdKeyDown = true;
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	80 93 e0 46 	sts	0x46E0, r24	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    3a3e:	02 c0       	rjmp	.+4      	; 0x3a44 <_Z9makeMorsePcPbS0_+0x1cc>
		}
		else
		{
			holdKeyDown = false;
    3a40:	10 92 e0 46 	sts	0x46E0, r1	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
		}
	}

	if(finished)
    3a44:	20 97       	sbiw	r28, 0x00	; 0
    3a46:	19 f0       	breq	.+6      	; 0x3a4e <_Z9makeMorsePcPbS0_+0x1d6>
	{
		*finished = completedString;
    3a48:	80 91 d6 46 	lds	r24, 0x46D6	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E15completedString>
    3a4c:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    3a4e:	80 91 e0 46 	lds	r24, 0x46E0	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    3a52:	81 11       	cpse	r24, r1
    3a54:	04 c0       	rjmp	.+8      	; 0x3a5e <_Z9makeMorsePcPbS0_+0x1e6>
	{
		return(true);
	}
	else
	{
		return( carrierOn);
    3a56:	80 91 d5 46 	lds	r24, 0x46D5	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E9carrierOn>
    3a5a:	01 c0       	rjmp	.+2      	; 0x3a5e <_Z9makeMorsePcPbS0_+0x1e6>
			if(finished)
			{
				*finished = true;
				holdKeyDown = false;
			}
			return( OFF);
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return( carrierOn);
	}
}
    3a5e:	df 91       	pop	r29
    3a60:	cf 91       	pop	r28
    3a62:	08 95       	ret

00003a64 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    3a64:	cf 92       	push	r12
    3a66:	df 92       	push	r13
    3a68:	ef 92       	push	r14
    3a6a:	ff 92       	push	r15
    3a6c:	1f 93       	push	r17
    3a6e:	cf 93       	push	r28
    3a70:	df 93       	push	r29
    3a72:	6c 01       	movw	r12, r24
    3a74:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    3a76:	c0 e0       	ldi	r28, 0x00	; 0
    3a78:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    3a7a:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    3a7c:	c4 31       	cpi	r28, 0x14	; 20
    3a7e:	d1 05       	cpc	r29, r1
    3a80:	74 f4       	brge	.+28     	; 0x3a9e <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    3a82:	f6 01       	movw	r30, r12
    3a84:	ec 0f       	add	r30, r28
    3a86:	fd 1f       	adc	r31, r29
    3a88:	80 81       	ld	r24, Z
		if(!c)
    3a8a:	88 23       	and	r24, r24
    3a8c:	41 f0       	breq	.+16     	; 0x3a9e <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    3a8e:	0e 94 49 1b 	call	0x3692	; 0x3692 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    3a92:	6d 3f       	cpi	r22, 0xFD	; 253
    3a94:	08 f4       	brcc	.+2      	; 0x3a98 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    3a96:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    3a98:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    3a9a:	21 96       	adiw	r28, 0x01	; 1
    3a9c:	ef cf       	rjmp	.-34     	; 0x3a7c <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    3a9e:	80 eb       	ldi	r24, 0xB0	; 176
    3aa0:	94 e0       	ldi	r25, 0x04	; 4
    3aa2:	b7 01       	movw	r22, r14
    3aa4:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <__udivmodhi4>
}
    3aa8:	16 9f       	mul	r17, r22
    3aaa:	c0 01       	movw	r24, r0
    3aac:	17 9f       	mul	r17, r23
    3aae:	90 0d       	add	r25, r0
    3ab0:	11 24       	eor	r1, r1
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	1f 91       	pop	r17
    3ab8:	ff 90       	pop	r15
    3aba:	ef 90       	pop	r14
    3abc:	df 90       	pop	r13
    3abe:	cf 90       	pop	r12
    3ac0:	08 95       	ret

00003ac2 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    3ac2:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    3ac4:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    3ac6:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    3ac8:	40 83       	st	Z, r20
	ret                             // Return to caller
    3aca:	08 95       	ret

00003acc <nextFullSBTxBuffer>:
	}
	
	serialbus_end_tx();
	memset((SerialbusRxBuffer*)rx_buffer, 0, sizeof(*(SerialbusRxBuffer*)rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	80 91 e3 46 	lds	r24, 0x46E3	; 0x8046e3 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    3ad2:	28 2f       	mov	r18, r24
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	49 e2       	ldi	r20, 0x29	; 41
    3ad8:	42 9f       	mul	r20, r18
    3ada:	f0 01       	movw	r30, r0
    3adc:	43 9f       	mul	r20, r19
    3ade:	f0 0d       	add	r31, r0
    3ae0:	11 24       	eor	r1, r1
    3ae2:	ee 59       	subi	r30, 0x9E	; 158
    3ae4:	f8 4b       	sbci	r31, 0xB8	; 184
    3ae6:	40 81       	ld	r20, Z
    3ae8:	41 11       	cpse	r20, r1
    3aea:	0b c0       	rjmp	.+22     	; 0x3b02 <nextFullSBTxBuffer+0x36>
    3aec:	9f 5f       	subi	r25, 0xFF	; 255
    3aee:	93 30       	cpi	r25, 0x03	; 3
    3af0:	50 f4       	brcc	.+20     	; 0x3b06 <nextFullSBTxBuffer+0x3a>
    3af2:	8f 5f       	subi	r24, 0xFF	; 255
    3af4:	80 93 e3 46 	sts	0x46E3, r24	; 0x8046e3 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    3af8:	83 30       	cpi	r24, 0x03	; 3
    3afa:	48 f3       	brcs	.-46     	; 0x3ace <nextFullSBTxBuffer+0x2>
    3afc:	10 92 e3 46 	sts	0x46E3, r1	; 0x8046e3 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    3b00:	e6 cf       	rjmp	.-52     	; 0x3ace <nextFullSBTxBuffer+0x2>
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	01 c0       	rjmp	.+2      	; 0x3b08 <nextFullSBTxBuffer+0x3c>
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	88 23       	and	r24, r24
    3b0a:	49 f0       	breq	.+18     	; 0x3b1e <nextFullSBTxBuffer+0x52>
    3b0c:	49 e2       	ldi	r20, 0x29	; 41
    3b0e:	42 9f       	mul	r20, r18
    3b10:	c0 01       	movw	r24, r0
    3b12:	43 9f       	mul	r20, r19
    3b14:	90 0d       	add	r25, r0
    3b16:	11 24       	eor	r1, r1
    3b18:	8e 59       	subi	r24, 0x9E	; 158
    3b1a:	98 4b       	sbci	r25, 0xB8	; 184
    3b1c:	08 95       	ret
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	08 95       	ret

00003b24 <nextEmptySBTxBuffer>:
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	80 91 e2 46 	lds	r24, 0x46E2	; 0x8046e2 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    3b2a:	28 2f       	mov	r18, r24
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	49 e2       	ldi	r20, 0x29	; 41
    3b30:	42 9f       	mul	r20, r18
    3b32:	f0 01       	movw	r30, r0
    3b34:	43 9f       	mul	r20, r19
    3b36:	f0 0d       	add	r31, r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	ee 59       	subi	r30, 0x9E	; 158
    3b3c:	f8 4b       	sbci	r31, 0xB8	; 184
    3b3e:	40 81       	ld	r20, Z
    3b40:	44 23       	and	r20, r20
    3b42:	59 f0       	breq	.+22     	; 0x3b5a <nextEmptySBTxBuffer+0x36>
    3b44:	9f 5f       	subi	r25, 0xFF	; 255
    3b46:	93 30       	cpi	r25, 0x03	; 3
    3b48:	50 f4       	brcc	.+20     	; 0x3b5e <nextEmptySBTxBuffer+0x3a>
    3b4a:	8f 5f       	subi	r24, 0xFF	; 255
    3b4c:	80 93 e2 46 	sts	0x46E2, r24	; 0x8046e2 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    3b50:	83 30       	cpi	r24, 0x03	; 3
    3b52:	48 f3       	brcs	.-46     	; 0x3b26 <nextEmptySBTxBuffer+0x2>
    3b54:	10 92 e2 46 	sts	0x46E2, r1	; 0x8046e2 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    3b58:	e6 cf       	rjmp	.-52     	; 0x3b26 <nextEmptySBTxBuffer+0x2>
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	01 c0       	rjmp	.+2      	; 0x3b60 <nextEmptySBTxBuffer+0x3c>
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	88 23       	and	r24, r24
    3b62:	49 f0       	breq	.+18     	; 0x3b76 <nextEmptySBTxBuffer+0x52>
    3b64:	49 e2       	ldi	r20, 0x29	; 41
    3b66:	42 9f       	mul	r20, r18
    3b68:	c0 01       	movw	r24, r0
    3b6a:	43 9f       	mul	r20, r19
    3b6c:	90 0d       	add	r25, r0
    3b6e:	11 24       	eor	r1, r1
    3b70:	8e 59       	subi	r24, 0x9E	; 158
    3b72:	98 4b       	sbci	r25, 0xB8	; 184
    3b74:	08 95       	ret
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	08 95       	ret

00003b7c <nextEmptySBRxBuffer>:
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	80 91 e1 46 	lds	r24, 0x46E1	; 0x8046e1 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    3b82:	28 2f       	mov	r18, r24
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	4f e3       	ldi	r20, 0x3F	; 63
    3b88:	42 9f       	mul	r20, r18
    3b8a:	f0 01       	movw	r30, r0
    3b8c:	43 9f       	mul	r20, r19
    3b8e:	f0 0d       	add	r31, r0
    3b90:	11 24       	eor	r1, r1
    3b92:	ec 51       	subi	r30, 0x1C	; 28
    3b94:	f9 4b       	sbci	r31, 0xB9	; 185
    3b96:	41 81       	ldd	r20, Z+1	; 0x01
    3b98:	52 81       	ldd	r21, Z+2	; 0x02
    3b9a:	45 2b       	or	r20, r21
    3b9c:	59 f0       	breq	.+22     	; 0x3bb4 <nextEmptySBRxBuffer+0x38>
    3b9e:	9f 5f       	subi	r25, 0xFF	; 255
    3ba0:	92 30       	cpi	r25, 0x02	; 2
    3ba2:	50 f4       	brcc	.+20     	; 0x3bb8 <nextEmptySBRxBuffer+0x3c>
    3ba4:	8f 5f       	subi	r24, 0xFF	; 255
    3ba6:	80 93 e1 46 	sts	0x46E1, r24	; 0x8046e1 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    3baa:	82 30       	cpi	r24, 0x02	; 2
    3bac:	40 f3       	brcs	.-48     	; 0x3b7e <nextEmptySBRxBuffer+0x2>
    3bae:	10 92 e1 46 	sts	0x46E1, r1	; 0x8046e1 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    3bb2:	e5 cf       	rjmp	.-54     	; 0x3b7e <nextEmptySBRxBuffer+0x2>
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	01 c0       	rjmp	.+2      	; 0x3bba <nextEmptySBRxBuffer+0x3e>
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	88 23       	and	r24, r24
    3bbc:	49 f0       	breq	.+18     	; 0x3bd0 <nextEmptySBRxBuffer+0x54>
    3bbe:	4f e3       	ldi	r20, 0x3F	; 63
    3bc0:	42 9f       	mul	r20, r18
    3bc2:	c0 01       	movw	r24, r0
    3bc4:	43 9f       	mul	r20, r19
    3bc6:	90 0d       	add	r25, r0
    3bc8:	11 24       	eor	r1, r1
    3bca:	8c 51       	subi	r24, 0x1C	; 28
    3bcc:	99 4b       	sbci	r25, 0xB9	; 185
    3bce:	08 95       	ret
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	08 95       	ret

00003bd6 <serialbusTxInProgress>:
    3bd6:	80 91 dd 47 	lds	r24, 0x47DD	; 0x8047dd <_ZL19serialbus_tx_active>
    3bda:	08 95       	ret

00003bdc <_Z18serialbus_start_txv>:
    3bdc:	cf 93       	push	r28
    3bde:	c0 91 dd 47 	lds	r28, 0x47DD	; 0x8047dd <_ZL19serialbus_tx_active>
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	c8 27       	eor	r28, r24
    3be6:	59 f0       	breq	.+22     	; 0x3bfe <_Z18serialbus_start_txv+0x22>
    3be8:	80 93 dd 47 	sts	0x47DD, r24	; 0x8047dd <_ZL19serialbus_tx_active>
    3bec:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    3bf0:	81 11       	cpse	r24, r1
    3bf2:	03 c0       	rjmp	.+6      	; 0x3bfa <_Z18serialbus_start_txv+0x1e>
    3bf4:	0e 94 13 29 	call	0x5226	; 0x5226 <USART4_enable_tx>
    3bf8:	02 c0       	rjmp	.+4      	; 0x3bfe <_Z18serialbus_start_txv+0x22>
    3bfa:	0e 94 e5 28 	call	0x51ca	; 0x51ca <USART1_enable_tx>
    3bfe:	8c 2f       	mov	r24, r28
    3c00:	cf 91       	pop	r28
    3c02:	08 95       	ret

00003c04 <serialbus_end_tx>:
    3c04:	80 91 dd 47 	lds	r24, 0x47DD	; 0x8047dd <_ZL19serialbus_tx_active>
    3c08:	88 23       	and	r24, r24
    3c0a:	89 f0       	breq	.+34     	; 0x3c2e <serialbus_end_tx+0x2a>
    3c0c:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    3c10:	84 30       	cpi	r24, 0x04	; 4
    3c12:	31 f4       	brne	.+12     	; 0x3c20 <serialbus_end_tx+0x1c>
    3c14:	e0 e8       	ldi	r30, 0x80	; 128
    3c16:	f8 e0       	ldi	r31, 0x08	; 8
    3c18:	85 81       	ldd	r24, Z+5	; 0x05
    3c1a:	8f 7d       	andi	r24, 0xDF	; 223
    3c1c:	85 83       	std	Z+5, r24	; 0x05
    3c1e:	05 c0       	rjmp	.+10     	; 0x3c2a <serialbus_end_tx+0x26>
    3c20:	e0 e2       	ldi	r30, 0x20	; 32
    3c22:	f8 e0       	ldi	r31, 0x08	; 8
    3c24:	85 81       	ldd	r24, Z+5	; 0x05
    3c26:	8f 7d       	andi	r24, 0xDF	; 223
    3c28:	85 83       	std	Z+5, r24	; 0x05
    3c2a:	10 92 dd 47 	sts	0x47DD, r1	; 0x8047dd <_ZL19serialbus_tx_active>
    3c2e:	08 95       	ret

00003c30 <_Z19serialbus_send_textPc>:
	}
}


bool serialbus_send_text(char* text)
{
    3c30:	ef 92       	push	r14
    3c32:	ff 92       	push	r15
    3c34:	1f 93       	push	r17
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
    3c3a:	10 91 26 40 	lds	r17, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    3c3e:	11 11       	cpse	r17, r1
    3c40:	2d c0       	rjmp	.+90     	; 0x3c9c <_Z19serialbus_send_textPc+0x6c>
	{
		return( err);
	}

	if(text)
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	69 f1       	breq	.+90     	; 0x3ca0 <_Z19serialbus_send_textPc+0x70>
    3c46:	7c 01       	movw	r14, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    3c48:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <nextEmptySBTxBuffer>


bool serialbus_send_text(char* text)
{
	bool err = true;
	uint16_t tries = 200;
    3c4c:	c8 ec       	ldi	r28, 0xC8	; 200
    3c4e:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	a1 f4       	brne	.+40     	; 0x3c7c <_Z19serialbus_send_textPc+0x4c>
    3c54:	20 97       	sbiw	r28, 0x00	; 0
    3c56:	91 f0       	breq	.+36     	; 0x3c7c <_Z19serialbus_send_textPc+0x4c>
		{
			while(serialbusTxInProgress() && tries)
    3c58:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <serialbusTxInProgress>
    3c5c:	88 23       	and	r24, r24
    3c5e:	21 f0       	breq	.+8      	; 0x3c68 <_Z19serialbus_send_textPc+0x38>
    3c60:	20 97       	sbiw	r28, 0x00	; 0
    3c62:	19 f4       	brne	.+6      	; 0x3c6a <_Z19serialbus_send_textPc+0x3a>
    3c64:	81 2f       	mov	r24, r17
    3c66:	01 c0       	rjmp	.+2      	; 0x3c6a <_Z19serialbus_send_textPc+0x3a>
    3c68:	81 2f       	mov	r24, r17
    3c6a:	88 23       	and	r24, r24
    3c6c:	21 f0       	breq	.+8      	; 0x3c76 <_Z19serialbus_send_textPc+0x46>
			{
				if(tries)
    3c6e:	20 97       	sbiw	r28, 0x00	; 0
    3c70:	99 f3       	breq	.-26     	; 0x3c58 <_Z19serialbus_send_textPc+0x28>
				{
					tries--;    /* wait until transmit finishes */
    3c72:	21 97       	sbiw	r28, 0x01	; 1
    3c74:	f1 cf       	rjmp	.-30     	; 0x3c58 <_Z19serialbus_send_textPc+0x28>
				}
			}
			buff = nextEmptySBTxBuffer();
    3c76:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    3c7a:	ea cf       	rjmp	.-44     	; 0x3c50 <_Z19serialbus_send_textPc+0x20>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    3c7c:	00 97       	sbiw	r24, 0x00	; 0
    3c7e:	91 f0       	breq	.+36     	; 0x3ca4 <_Z19serialbus_send_textPc+0x74>
		{
			sprintf(*buff, text);
    3c80:	ff 92       	push	r15
    3c82:	ef 92       	push	r14
    3c84:	9f 93       	push	r25
    3c86:	8f 93       	push	r24
    3c88:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <sprintf>

			serialbus_start_tx();
    3c8c:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_Z18serialbus_start_txv>
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
			err = false;
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	05 c0       	rjmp	.+10     	; 0x3ca6 <_Z19serialbus_send_textPc+0x76>
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	03 c0       	rjmp	.+6      	; 0x3ca6 <_Z19serialbus_send_textPc+0x76>
}


bool serialbus_send_text(char* text)
{
	bool err = true;
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	01 c0       	rjmp	.+2      	; 0x3ca6 <_Z19serialbus_send_textPc+0x76>
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
			err = false;
		}
	}

	return(err);
}
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	1f 91       	pop	r17
    3cac:	ff 90       	pop	r15
    3cae:	ef 90       	pop	r14
    3cb0:	08 95       	ret

00003cb2 <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    3cb2:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    3cb6:	81 11       	cpse	r24, r1
    3cb8:	06 c0       	rjmp	.+12     	; 0x3cc6 <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    3cba:	89 e8       	ldi	r24, 0x89	; 137
    3cbc:	94 e4       	ldi	r25, 0x44	; 68
    3cbe:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <_Z19serialbus_send_textPc>
    3cc2:	81 11       	cpse	r24, r1
    3cc4:	fa cf       	rjmp	.-12     	; 0x3cba <sb_send_NewPrompt+0x8>
    3cc6:	08 95       	ret

00003cc8 <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    3cc8:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    3ccc:	81 11       	cpse	r24, r1
    3cce:	04 c0       	rjmp	.+8      	; 0x3cd8 <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    3cd0:	8c e8       	ldi	r24, 0x8C	; 140
    3cd2:	94 e4       	ldi	r25, 0x44	; 68
    3cd4:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <_Z19serialbus_send_textPc>
    3cd8:	08 95       	ret

00003cda <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    3cda:	90 91 26 40 	lds	r25, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    3cde:	91 11       	cpse	r25, r1
    3ce0:	07 c0       	rjmp	.+14     	; 0x3cf0 <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    3ce2:	ee ed       	ldi	r30, 0xDE	; 222
    3ce4:	f7 e4       	ldi	r31, 0x47	; 71
    3ce6:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    3ce8:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    3cea:	cf 01       	movw	r24, r30
    3cec:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <_Z19serialbus_send_textPc>
    3cf0:	08 95       	ret

00003cf2 <sb_send_string>:
}

bool sb_send_string(char* str)
{
    3cf2:	8f 92       	push	r8
    3cf4:	9f 92       	push	r9
    3cf6:	af 92       	push	r10
    3cf8:	bf 92       	push	r11
    3cfa:	df 92       	push	r13
    3cfc:	ef 92       	push	r14
    3cfe:	ff 92       	push	r15
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	cd b7       	in	r28, 0x3d	; 61
    3d0a:	de b7       	in	r29, 0x3e	; 62
    3d0c:	aa 97       	sbiw	r28, 0x2a	; 42
    3d0e:	cd bf       	out	0x3d, r28	; 61
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	fc 01       	movw	r30, r24
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    3d14:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    3d18:	81 11       	cpse	r24, r1
    3d1a:	45 c0       	rjmp	.+138    	; 0x3da6 <sb_send_string+0xb4>
	{
		return( true);
	}

	if(str == NULL)
    3d1c:	30 97       	sbiw	r30, 0x00	; 0
    3d1e:	09 f4       	brne	.+2      	; 0x3d22 <sb_send_string+0x30>
    3d20:	3f c0       	rjmp	.+126    	; 0x3da0 <sb_send_string+0xae>
	{
		return( true);
	}

	if(!*str)
    3d22:	80 81       	ld	r24, Z
    3d24:	88 23       	and	r24, r24
    3d26:	f1 f1       	breq	.+124    	; 0x3da4 <sb_send_string+0xb2>
    3d28:	4f 01       	movw	r8, r30
	{
		return(true);
	}

	length = strlen(str);
    3d2a:	01 90       	ld	r0, Z+
    3d2c:	00 20       	and	r0, r0
    3d2e:	e9 f7       	brne	.-6      	; 0x3d2a <sb_send_string+0x38>
    3d30:	31 97       	sbiw	r30, 0x01	; 1
    3d32:	5f 01       	movw	r10, r30
    3d34:	a8 18       	sub	r10, r8
    3d36:	b9 08       	sbc	r11, r9

bool sb_send_string(char* str)
{
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
    3d38:	e1 2c       	mov	r14, r1
    3d3a:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH-1);
    3d3c:	85 01       	movw	r16, r10
    3d3e:	0e 19       	sub	r16, r14
    3d40:	1f 09       	sbc	r17, r15
    3d42:	08 32       	cpi	r16, 0x28	; 40
    3d44:	11 05       	cpc	r17, r1
    3d46:	10 f0       	brcs	.+4      	; 0x3d4c <sb_send_string+0x5a>
    3d48:	08 e2       	ldi	r16, 0x28	; 40
    3d4a:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(buf, &str[lengthSent], lengthToSend);
    3d4c:	a8 01       	movw	r20, r16
    3d4e:	b4 01       	movw	r22, r8
    3d50:	6e 0d       	add	r22, r14
    3d52:	7f 1d       	adc	r23, r15
    3d54:	ce 01       	movw	r24, r28
    3d56:	01 96       	adiw	r24, 0x01	; 1
    3d58:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <strncpy>

		buf[lengthToSend] = '\0';
    3d5c:	e1 e0       	ldi	r30, 0x01	; 1
    3d5e:	f0 e0       	ldi	r31, 0x00	; 0
    3d60:	ec 0f       	add	r30, r28
    3d62:	fd 1f       	adc	r31, r29
    3d64:	e0 0f       	add	r30, r16
    3d66:	f1 1f       	adc	r31, r17
    3d68:	10 82       	st	Z, r1
		err = serialbus_send_text(buf);
    3d6a:	ce 01       	movw	r24, r28
    3d6c:	01 96       	adiw	r24, 0x01	; 1
    3d6e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <_Z19serialbus_send_textPc>
    3d72:	d8 2e       	mov	r13, r24
		
		if(!err)
    3d74:	81 11       	cpse	r24, r1
    3d76:	04 c0       	rjmp	.+8      	; 0x3d80 <sb_send_string+0x8e>
		{
			while(serialbusTxInProgress())
    3d78:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <serialbusTxInProgress>
    3d7c:	81 11       	cpse	r24, r1
    3d7e:	fc cf       	rjmp	.-8      	; 0x3d78 <sb_send_string+0x86>
			{
				;
			}
		}

		lengthSent += lengthToSend;
    3d80:	e0 0e       	add	r14, r16
    3d82:	f1 1e       	adc	r15, r17
		done = err || (lengthSent >= length);
    3d84:	d1 10       	cpse	r13, r1
    3d86:	05 c0       	rjmp	.+10     	; 0x3d92 <sb_send_string+0xa0>
    3d88:	ea 14       	cp	r14, r10
    3d8a:	fb 04       	cpc	r15, r11
    3d8c:	20 f0       	brcs	.+8      	; 0x3d96 <sb_send_string+0xa4>
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	03 c0       	rjmp	.+6      	; 0x3d98 <sb_send_string+0xa6>
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	01 c0       	rjmp	.+2      	; 0x3d98 <sb_send_string+0xa6>
    3d96:	80 e0       	ldi	r24, 0x00	; 0
	}while(!done);
    3d98:	88 23       	and	r24, r24
    3d9a:	81 f2       	breq	.-96     	; 0x3d3c <sb_send_string+0x4a>

	return( err);
    3d9c:	8d 2d       	mov	r24, r13
    3d9e:	03 c0       	rjmp	.+6      	; 0x3da6 <sb_send_string+0xb4>
		return( true);
	}

	if(str == NULL)
	{
		return( true);
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	01 c0       	rjmp	.+2      	; 0x3da6 <sb_send_string+0xb4>
	}

	if(!*str)
	{
		return(true);
    3da4:	81 e0       	ldi	r24, 0x01	; 1
		lengthSent += lengthToSend;
		done = err || (lengthSent >= length);
	}while(!done);

	return( err);
}
    3da6:	aa 96       	adiw	r28, 0x2a	; 42
    3da8:	cd bf       	out	0x3d, r28	; 61
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	df 91       	pop	r29
    3dae:	cf 91       	pop	r28
    3db0:	1f 91       	pop	r17
    3db2:	0f 91       	pop	r16
    3db4:	ff 90       	pop	r15
    3db6:	ef 90       	pop	r14
    3db8:	df 90       	pop	r13
    3dba:	bf 90       	pop	r11
    3dbc:	af 90       	pop	r10
    3dbe:	9f 90       	pop	r9
    3dc0:	8f 90       	pop	r8
    3dc2:	08 95       	ret

00003dc4 <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    3dc4:	4f 92       	push	r4
    3dc6:	5f 92       	push	r5
    3dc8:	6f 92       	push	r6
    3dca:	7f 92       	push	r7
    3dcc:	8f 92       	push	r8
    3dce:	9f 92       	push	r9
    3dd0:	af 92       	push	r10
    3dd2:	bf 92       	push	r11
    3dd4:	cf 92       	push	r12
    3dd6:	df 92       	push	r13
    3dd8:	ef 92       	push	r14
    3dda:	ff 92       	push	r15
    3ddc:	0f 93       	push	r16
    3dde:	1f 93       	push	r17
    3de0:	cf 93       	push	r28
    3de2:	df 93       	push	r29
    3de4:	8c 01       	movw	r16, r24
    3de6:	eb 01       	movw	r28, r22
    3de8:	fc 01       	movw	r30, r24
    3dea:	40 80       	ld	r4, Z
    3dec:	51 80       	ldd	r5, Z+1	; 0x01
    3dee:	62 80       	ldd	r6, Z+2	; 0x02
    3df0:	73 80       	ldd	r7, Z+3	; 0x03
    3df2:	88 80       	ld	r8, Y
    3df4:	99 80       	ldd	r9, Y+1	; 0x01
    3df6:	aa 80       	ldd	r10, Y+2	; 0x02
    3df8:	bb 80       	ldd	r11, Y+3	; 0x03
    3dfa:	41 14       	cp	r4, r1
    3dfc:	51 04       	cpc	r5, r1
    3dfe:	61 04       	cpc	r6, r1
    3e00:	71 04       	cpc	r7, r1
    3e02:	e1 f1       	breq	.+120    	; 0x3e7c <_Z13reduce_by_gcdPmS_+0xb8>
    3e04:	81 14       	cp	r8, r1
    3e06:	91 04       	cpc	r9, r1
    3e08:	a1 04       	cpc	r10, r1
    3e0a:	b1 04       	cpc	r11, r1
    3e0c:	b9 f1       	breq	.+110    	; 0x3e7c <_Z13reduce_by_gcdPmS_+0xb8>
    3e0e:	c3 01       	movw	r24, r6
    3e10:	b2 01       	movw	r22, r4
    3e12:	a5 01       	movw	r20, r10
    3e14:	94 01       	movw	r18, r8
    3e16:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    3e1a:	6b 01       	movw	r12, r22
    3e1c:	7c 01       	movw	r14, r24
    3e1e:	c1 14       	cp	r12, r1
    3e20:	d1 04       	cpc	r13, r1
    3e22:	e1 04       	cpc	r14, r1
    3e24:	f1 04       	cpc	r15, r1
    3e26:	69 f0       	breq	.+26     	; 0x3e42 <_Z13reduce_by_gcdPmS_+0x7e>
    3e28:	c5 01       	movw	r24, r10
    3e2a:	b4 01       	movw	r22, r8
    3e2c:	a7 01       	movw	r20, r14
    3e2e:	96 01       	movw	r18, r12
    3e30:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    3e34:	46 01       	movw	r8, r12
    3e36:	57 01       	movw	r10, r14
    3e38:	c6 2e       	mov	r12, r22
    3e3a:	d7 2e       	mov	r13, r23
    3e3c:	e8 2e       	mov	r14, r24
    3e3e:	f9 2e       	mov	r15, r25
    3e40:	ee cf       	rjmp	.-36     	; 0x3e1e <_Z13reduce_by_gcdPmS_+0x5a>
    3e42:	f2 e0       	ldi	r31, 0x02	; 2
    3e44:	8f 16       	cp	r8, r31
    3e46:	91 04       	cpc	r9, r1
    3e48:	a1 04       	cpc	r10, r1
    3e4a:	b1 04       	cpc	r11, r1
    3e4c:	b8 f0       	brcs	.+46     	; 0x3e7c <_Z13reduce_by_gcdPmS_+0xb8>
    3e4e:	c3 01       	movw	r24, r6
    3e50:	b2 01       	movw	r22, r4
    3e52:	a5 01       	movw	r20, r10
    3e54:	94 01       	movw	r18, r8
    3e56:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    3e5a:	f8 01       	movw	r30, r16
    3e5c:	20 83       	st	Z, r18
    3e5e:	31 83       	std	Z+1, r19	; 0x01
    3e60:	42 83       	std	Z+2, r20	; 0x02
    3e62:	53 83       	std	Z+3, r21	; 0x03
    3e64:	68 81       	ld	r22, Y
    3e66:	79 81       	ldd	r23, Y+1	; 0x01
    3e68:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e6c:	a5 01       	movw	r20, r10
    3e6e:	94 01       	movw	r18, r8
    3e70:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    3e74:	28 83       	st	Y, r18
    3e76:	39 83       	std	Y+1, r19	; 0x01
    3e78:	4a 83       	std	Y+2, r20	; 0x02
    3e7a:	5b 83       	std	Y+3, r21	; 0x03
    3e7c:	df 91       	pop	r29
    3e7e:	cf 91       	pop	r28
    3e80:	1f 91       	pop	r17
    3e82:	0f 91       	pop	r16
    3e84:	ff 90       	pop	r15
    3e86:	ef 90       	pop	r14
    3e88:	df 90       	pop	r13
    3e8a:	cf 90       	pop	r12
    3e8c:	bf 90       	pop	r11
    3e8e:	af 90       	pop	r10
    3e90:	9f 90       	pop	r9
    3e92:	8f 90       	pop	r8
    3e94:	7f 90       	pop	r7
    3e96:	6f 90       	pop	r6
    3e98:	5f 90       	pop	r5
    3e9a:	4f 90       	pop	r4
    3e9c:	08 95       	ret

00003e9e <_Z8pll_calcmP13u_si5351_regs>:
    3e9e:	4f 92       	push	r4
    3ea0:	5f 92       	push	r5
    3ea2:	6f 92       	push	r6
    3ea4:	7f 92       	push	r7
    3ea6:	8f 92       	push	r8
    3ea8:	9f 92       	push	r9
    3eaa:	af 92       	push	r10
    3eac:	bf 92       	push	r11
    3eae:	cf 92       	push	r12
    3eb0:	df 92       	push	r13
    3eb2:	ef 92       	push	r14
    3eb4:	ff 92       	push	r15
    3eb6:	0f 93       	push	r16
    3eb8:	1f 93       	push	r17
    3eba:	cf 93       	push	r28
    3ebc:	df 93       	push	r29
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	28 97       	sbiw	r28, 0x08	; 8
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	8a 01       	movw	r16, r20
    3eca:	80 90 28 40 	lds	r8, 0x4028	; 0x804028 <_ZL9xtal_freq>
    3ece:	90 90 29 40 	lds	r9, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    3ed2:	a0 90 2a 40 	lds	r10, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    3ed6:	b0 90 2b 40 	lds	r11, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    3eda:	a5 01       	movw	r20, r10
    3edc:	94 01       	movw	r18, r8
    3ede:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    3ee2:	69 01       	movw	r12, r18
    3ee4:	7a 01       	movw	r14, r20
    3ee6:	69 83       	std	Y+1, r22	; 0x01
    3ee8:	7a 83       	std	Y+2, r23	; 0x02
    3eea:	8b 83       	std	Y+3, r24	; 0x03
    3eec:	9c 83       	std	Y+4, r25	; 0x04
    3eee:	8d 82       	std	Y+5, r8	; 0x05
    3ef0:	9e 82       	std	Y+6, r9	; 0x06
    3ef2:	af 82       	std	Y+7, r10	; 0x07
    3ef4:	b8 86       	std	Y+8, r11	; 0x08
    3ef6:	be 01       	movw	r22, r28
    3ef8:	6b 5f       	subi	r22, 0xFB	; 251
    3efa:	7f 4f       	sbci	r23, 0xFF	; 255
    3efc:	ce 01       	movw	r24, r28
    3efe:	01 96       	adiw	r24, 0x01	; 1
    3f00:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <_Z13reduce_by_gcdPmS_>
    3f04:	89 80       	ldd	r8, Y+1	; 0x01
    3f06:	9a 80       	ldd	r9, Y+2	; 0x02
    3f08:	ab 80       	ldd	r10, Y+3	; 0x03
    3f0a:	bc 80       	ldd	r11, Y+4	; 0x04
    3f0c:	88 0c       	add	r8, r8
    3f0e:	99 1c       	adc	r9, r9
    3f10:	aa 1c       	adc	r10, r10
    3f12:	bb 1c       	adc	r11, r11
    3f14:	88 0c       	add	r8, r8
    3f16:	99 1c       	adc	r9, r9
    3f18:	aa 1c       	adc	r10, r10
    3f1a:	bb 1c       	adc	r11, r11
    3f1c:	88 0c       	add	r8, r8
    3f1e:	99 1c       	adc	r9, r9
    3f20:	aa 1c       	adc	r10, r10
    3f22:	bb 1c       	adc	r11, r11
    3f24:	88 0c       	add	r8, r8
    3f26:	99 1c       	adc	r9, r9
    3f28:	aa 1c       	adc	r10, r10
    3f2a:	bb 1c       	adc	r11, r11
    3f2c:	88 0c       	add	r8, r8
    3f2e:	99 1c       	adc	r9, r9
    3f30:	aa 1c       	adc	r10, r10
    3f32:	bb 1c       	adc	r11, r11
    3f34:	88 0c       	add	r8, r8
    3f36:	99 1c       	adc	r9, r9
    3f38:	aa 1c       	adc	r10, r10
    3f3a:	bb 1c       	adc	r11, r11
    3f3c:	88 0c       	add	r8, r8
    3f3e:	99 1c       	adc	r9, r9
    3f40:	aa 1c       	adc	r10, r10
    3f42:	bb 1c       	adc	r11, r11
    3f44:	4d 80       	ldd	r4, Y+5	; 0x05
    3f46:	5e 80       	ldd	r5, Y+6	; 0x06
    3f48:	6f 80       	ldd	r6, Y+7	; 0x07
    3f4a:	78 84       	ldd	r7, Y+8	; 0x08
    3f4c:	c5 01       	movw	r24, r10
    3f4e:	b4 01       	movw	r22, r8
    3f50:	a3 01       	movw	r20, r6
    3f52:	92 01       	movw	r18, r4
    3f54:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    3f58:	cc 0c       	add	r12, r12
    3f5a:	dd 1c       	adc	r13, r13
    3f5c:	ee 1c       	adc	r14, r14
    3f5e:	ff 1c       	adc	r15, r15
    3f60:	cc 0c       	add	r12, r12
    3f62:	dd 1c       	adc	r13, r13
    3f64:	ee 1c       	adc	r14, r14
    3f66:	ff 1c       	adc	r15, r15
    3f68:	cc 0c       	add	r12, r12
    3f6a:	dd 1c       	adc	r13, r13
    3f6c:	ee 1c       	adc	r14, r14
    3f6e:	ff 1c       	adc	r15, r15
    3f70:	cc 0c       	add	r12, r12
    3f72:	dd 1c       	adc	r13, r13
    3f74:	ee 1c       	adc	r14, r14
    3f76:	ff 1c       	adc	r15, r15
    3f78:	cc 0c       	add	r12, r12
    3f7a:	dd 1c       	adc	r13, r13
    3f7c:	ee 1c       	adc	r14, r14
    3f7e:	ff 1c       	adc	r15, r15
    3f80:	cc 0c       	add	r12, r12
    3f82:	dd 1c       	adc	r13, r13
    3f84:	ee 1c       	adc	r14, r14
    3f86:	ff 1c       	adc	r15, r15
    3f88:	cc 0c       	add	r12, r12
    3f8a:	dd 1c       	adc	r13, r13
    3f8c:	ee 1c       	adc	r14, r14
    3f8e:	ff 1c       	adc	r15, r15
    3f90:	c2 0e       	add	r12, r18
    3f92:	d3 1e       	adc	r13, r19
    3f94:	e4 1e       	adc	r14, r20
    3f96:	f5 1e       	adc	r15, r21
    3f98:	82 e0       	ldi	r24, 0x02	; 2
    3f9a:	d8 1a       	sub	r13, r24
    3f9c:	e1 08       	sbc	r14, r1
    3f9e:	f1 08       	sbc	r15, r1
    3fa0:	f8 01       	movw	r30, r16
    3fa2:	c0 82       	st	Z, r12
    3fa4:	d1 82       	std	Z+1, r13	; 0x01
    3fa6:	e2 82       	std	Z+2, r14	; 0x02
    3fa8:	f3 82       	std	Z+3, r15	; 0x03
    3faa:	c3 01       	movw	r24, r6
    3fac:	b2 01       	movw	r22, r4
    3fae:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__mulsi3>
    3fb2:	86 1a       	sub	r8, r22
    3fb4:	97 0a       	sbc	r9, r23
    3fb6:	a8 0a       	sbc	r10, r24
    3fb8:	b9 0a       	sbc	r11, r25
    3fba:	84 82       	std	Z+4, r8	; 0x04
    3fbc:	95 82       	std	Z+5, r9	; 0x05
    3fbe:	a6 82       	std	Z+6, r10	; 0x06
    3fc0:	b7 82       	std	Z+7, r11	; 0x07
    3fc2:	40 86       	std	Z+8, r4	; 0x08
    3fc4:	51 86       	std	Z+9, r5	; 0x09
    3fc6:	62 86       	std	Z+10, r6	; 0x0a
    3fc8:	73 86       	std	Z+11, r7	; 0x0b
    3fca:	80 e0       	ldi	r24, 0x00	; 0
    3fcc:	28 96       	adiw	r28, 0x08	; 8
    3fce:	cd bf       	out	0x3d, r28	; 61
    3fd0:	de bf       	out	0x3e, r29	; 62
    3fd2:	df 91       	pop	r29
    3fd4:	cf 91       	pop	r28
    3fd6:	1f 91       	pop	r17
    3fd8:	0f 91       	pop	r16
    3fda:	ff 90       	pop	r15
    3fdc:	ef 90       	pop	r14
    3fde:	df 90       	pop	r13
    3fe0:	cf 90       	pop	r12
    3fe2:	bf 90       	pop	r11
    3fe4:	af 90       	pop	r10
    3fe6:	9f 90       	pop	r9
    3fe8:	8f 90       	pop	r8
    3fea:	7f 90       	pop	r7
    3fec:	6f 90       	pop	r6
    3fee:	5f 90       	pop	r5
    3ff0:	4f 90       	pop	r4
    3ff2:	08 95       	ret

00003ff4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    3ff4:	2f 92       	push	r2
    3ff6:	3f 92       	push	r3
    3ff8:	4f 92       	push	r4
    3ffa:	5f 92       	push	r5
    3ffc:	6f 92       	push	r6
    3ffe:	7f 92       	push	r7
    4000:	8f 92       	push	r8
    4002:	9f 92       	push	r9
    4004:	af 92       	push	r10
    4006:	bf 92       	push	r11
    4008:	cf 92       	push	r12
    400a:	df 92       	push	r13
    400c:	ef 92       	push	r14
    400e:	ff 92       	push	r15
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
    401c:	25 97       	sbiw	r28, 0x05	; 5
    401e:	cd bf       	out	0x3d, r28	; 61
    4020:	de bf       	out	0x3e, r29	; 62
    4022:	2b 01       	movw	r4, r22
    4024:	3c 01       	movw	r6, r24
    4026:	4a 83       	std	Y+2, r20	; 0x02
    4028:	5b 83       	std	Y+3, r21	; 0x03
    402a:	18 01       	movw	r2, r16
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	f9 01       	movw	r30, r18
    4030:	80 83       	st	Z, r24
    4032:	f0 e8       	ldi	r31, 0x80	; 128
    4034:	4f 16       	cp	r4, r31
    4036:	f1 ed       	ldi	r31, 0xD1	; 209
    4038:	5f 06       	cpc	r5, r31
    403a:	f0 ef       	ldi	r31, 0xF0	; 240
    403c:	6f 06       	cpc	r6, r31
    403e:	f8 e0       	ldi	r31, 0x08	; 8
    4040:	7f 06       	cpc	r7, r31
    4042:	d0 f0       	brcs	.+52     	; 0x4078 <__DATA_REGION_LENGTH__+0x78>
    4044:	c3 01       	movw	r24, r6
    4046:	b2 01       	movw	r22, r4
    4048:	66 0f       	add	r22, r22
    404a:	77 1f       	adc	r23, r23
    404c:	88 1f       	adc	r24, r24
    404e:	99 1f       	adc	r25, r25
    4050:	66 0f       	add	r22, r22
    4052:	77 1f       	adc	r23, r23
    4054:	88 1f       	adc	r24, r24
    4056:	99 1f       	adc	r25, r25
    4058:	c1 2c       	mov	r12, r1
    405a:	d1 2c       	mov	r13, r1
    405c:	76 01       	movw	r14, r12
    405e:	68 94       	set
    4060:	c2 f8       	bld	r12, 2
    4062:	48 c0       	rjmp	.+144    	; 0x40f4 <__DATA_REGION_LENGTH__+0xf4>
    4064:	21 e0       	ldi	r18, 0x01	; 1
    4066:	2d 83       	std	Y+5, r18	; 0x05
    4068:	0d c0       	rjmp	.+26     	; 0x4084 <__DATA_REGION_LENGTH__+0x84>
    406a:	69 01       	movw	r12, r18
    406c:	7a 01       	movw	r14, r20
    406e:	31 e0       	ldi	r19, 0x01	; 1
    4070:	39 83       	std	Y+1, r19	; 0x01
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	8d 83       	std	Y+5, r24	; 0x05
    4076:	06 c0       	rjmp	.+12     	; 0x4084 <__DATA_REGION_LENGTH__+0x84>
    4078:	1c 82       	std	Y+4, r1	; 0x04
    407a:	19 82       	std	Y+1, r1	; 0x01
    407c:	1d 82       	std	Y+5, r1	; 0x05
    407e:	c1 2c       	mov	r12, r1
    4080:	d1 2c       	mov	r13, r1
    4082:	76 01       	movw	r14, r12
    4084:	8d 80       	ldd	r8, Y+5	; 0x05
    4086:	81 10       	cpse	r8, r1
    4088:	28 c0       	rjmp	.+80     	; 0x40da <__DATA_REGION_LENGTH__+0xda>
    408a:	9c 80       	ldd	r9, Y+4	; 0x04
    408c:	a9 2d       	mov	r26, r9
    408e:	b0 e0       	ldi	r27, 0x00	; 0
    4090:	a3 01       	movw	r20, r6
    4092:	92 01       	movw	r18, r4
    4094:	0e 94 04 2c 	call	0x5808	; 0x5808 <__muluhisi3>
    4098:	00 e0       	ldi	r16, 0x00	; 0
    409a:	19 ee       	ldi	r17, 0xE9	; 233
    409c:	24 ea       	ldi	r18, 0xA4	; 164
    409e:	35 e3       	ldi	r19, 0x35	; 53
    40a0:	48 01       	movw	r8, r16
    40a2:	59 01       	movw	r10, r18
    40a4:	86 1a       	sub	r8, r22
    40a6:	97 0a       	sbc	r9, r23
    40a8:	a8 0a       	sbc	r10, r24
    40aa:	b9 0a       	sbc	r11, r25
    40ac:	c5 01       	movw	r24, r10
    40ae:	b4 01       	movw	r22, r8
    40b0:	2c 81       	ldd	r18, Y+4	; 0x04
    40b2:	2e 5f       	subi	r18, 0xFE	; 254
    40b4:	2c 83       	std	Y+4, r18	; 0x04
    40b6:	81 14       	cp	r8, r1
    40b8:	36 e4       	ldi	r19, 0x46	; 70
    40ba:	93 06       	cpc	r9, r19
    40bc:	33 ec       	ldi	r19, 0xC3	; 195
    40be:	a3 06       	cpc	r10, r19
    40c0:	33 e2       	ldi	r19, 0x23	; 35
    40c2:	b3 06       	cpc	r11, r19
    40c4:	78 f2       	brcs	.-98     	; 0x4064 <__DATA_REGION_LENGTH__+0x64>
    40c6:	a3 01       	movw	r20, r6
    40c8:	92 01       	movw	r18, r4
    40ca:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    40ce:	24 30       	cpi	r18, 0x04	; 4
    40d0:	31 05       	cpc	r19, r1
    40d2:	41 05       	cpc	r20, r1
    40d4:	51 05       	cpc	r21, r1
    40d6:	48 f6       	brcc	.-110    	; 0x406a <__DATA_REGION_LENGTH__+0x6a>
    40d8:	d5 cf       	rjmp	.-86     	; 0x4084 <__DATA_REGION_LENGTH__+0x84>
    40da:	89 80       	ldd	r8, Y+1	; 0x01
    40dc:	88 20       	and	r8, r8
    40de:	39 f0       	breq	.+14     	; 0x40ee <__DATA_REGION_LENGTH__+0xee>
    40e0:	a7 01       	movw	r20, r14
    40e2:	96 01       	movw	r18, r12
    40e4:	c3 01       	movw	r24, r6
    40e6:	b2 01       	movw	r22, r4
    40e8:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__mulsi3>
    40ec:	03 c0       	rjmp	.+6      	; 0x40f4 <__DATA_REGION_LENGTH__+0xf4>
    40ee:	60 e0       	ldi	r22, 0x00	; 0
    40f0:	70 e0       	ldi	r23, 0x00	; 0
    40f2:	cb 01       	movw	r24, r22
    40f4:	21 e0       	ldi	r18, 0x01	; 1
    40f6:	34 e0       	ldi	r19, 0x04	; 4
    40f8:	c3 16       	cp	r12, r19
    40fa:	d1 04       	cpc	r13, r1
    40fc:	e1 04       	cpc	r14, r1
    40fe:	f1 04       	cpc	r15, r1
    4100:	09 f0       	breq	.+2      	; 0x4104 <__DATA_REGION_LENGTH__+0x104>
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	f1 01       	movw	r30, r2
    4106:	20 83       	st	Z, r18
    4108:	cc 0c       	add	r12, r12
    410a:	dd 1c       	adc	r13, r13
    410c:	ee 1c       	adc	r14, r14
    410e:	ff 1c       	adc	r15, r15
    4110:	cc 0c       	add	r12, r12
    4112:	dd 1c       	adc	r13, r13
    4114:	ee 1c       	adc	r14, r14
    4116:	ff 1c       	adc	r15, r15
    4118:	cc 0c       	add	r12, r12
    411a:	dd 1c       	adc	r13, r13
    411c:	ee 1c       	adc	r14, r14
    411e:	ff 1c       	adc	r15, r15
    4120:	cc 0c       	add	r12, r12
    4122:	dd 1c       	adc	r13, r13
    4124:	ee 1c       	adc	r14, r14
    4126:	ff 1c       	adc	r15, r15
    4128:	cc 0c       	add	r12, r12
    412a:	dd 1c       	adc	r13, r13
    412c:	ee 1c       	adc	r14, r14
    412e:	ff 1c       	adc	r15, r15
    4130:	cc 0c       	add	r12, r12
    4132:	dd 1c       	adc	r13, r13
    4134:	ee 1c       	adc	r14, r14
    4136:	ff 1c       	adc	r15, r15
    4138:	cc 0c       	add	r12, r12
    413a:	dd 1c       	adc	r13, r13
    413c:	ee 1c       	adc	r14, r14
    413e:	ff 1c       	adc	r15, r15
    4140:	f2 e0       	ldi	r31, 0x02	; 2
    4142:	df 1a       	sub	r13, r31
    4144:	e1 08       	sbc	r14, r1
    4146:	f1 08       	sbc	r15, r1
    4148:	ea 81       	ldd	r30, Y+2	; 0x02
    414a:	fb 81       	ldd	r31, Y+3	; 0x03
    414c:	c0 82       	st	Z, r12
    414e:	d1 82       	std	Z+1, r13	; 0x01
    4150:	e2 82       	std	Z+2, r14	; 0x02
    4152:	f3 82       	std	Z+3, r15	; 0x03
    4154:	14 82       	std	Z+4, r1	; 0x04
    4156:	15 82       	std	Z+5, r1	; 0x05
    4158:	16 82       	std	Z+6, r1	; 0x06
    415a:	17 82       	std	Z+7, r1	; 0x07
    415c:	01 e0       	ldi	r16, 0x01	; 1
    415e:	10 e0       	ldi	r17, 0x00	; 0
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	00 87       	std	Z+8, r16	; 0x08
    4166:	11 87       	std	Z+9, r17	; 0x09
    4168:	22 87       	std	Z+10, r18	; 0x0a
    416a:	33 87       	std	Z+11, r19	; 0x0b
    416c:	25 96       	adiw	r28, 0x05	; 5
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	de bf       	out	0x3e, r29	; 62
    4172:	df 91       	pop	r29
    4174:	cf 91       	pop	r28
    4176:	1f 91       	pop	r17
    4178:	0f 91       	pop	r16
    417a:	ff 90       	pop	r15
    417c:	ef 90       	pop	r14
    417e:	df 90       	pop	r13
    4180:	cf 90       	pop	r12
    4182:	bf 90       	pop	r11
    4184:	af 90       	pop	r10
    4186:	9f 90       	pop	r9
    4188:	8f 90       	pop	r8
    418a:	7f 90       	pop	r7
    418c:	6f 90       	pop	r6
    418e:	5f 90       	pop	r5
    4190:	4f 90       	pop	r4
    4192:	3f 90       	pop	r3
    4194:	2f 90       	pop	r2
    4196:	08 95       	ret

00004198 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
    4198:	2f 92       	push	r2
    419a:	3f 92       	push	r3
    419c:	4f 92       	push	r4
    419e:	5f 92       	push	r5
    41a0:	6f 92       	push	r6
    41a2:	7f 92       	push	r7
    41a4:	8f 92       	push	r8
    41a6:	9f 92       	push	r9
    41a8:	af 92       	push	r10
    41aa:	bf 92       	push	r11
    41ac:	cf 92       	push	r12
    41ae:	df 92       	push	r13
    41b0:	ef 92       	push	r14
    41b2:	ff 92       	push	r15
    41b4:	0f 93       	push	r16
    41b6:	1f 93       	push	r17
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62
    41c0:	62 97       	sbiw	r28, 0x12	; 18
    41c2:	cd bf       	out	0x3d, r28	; 61
    41c4:	de bf       	out	0x3e, r29	; 62
    41c6:	4b 01       	movw	r8, r22
    41c8:	5c 01       	movw	r10, r24
    41ca:	1a 01       	movw	r2, r20
    41cc:	29 8b       	std	Y+17, r18	; 0x11
    41ce:	3a 8b       	std	Y+18, r19	; 0x12
    41d0:	60 91 1f 48 	lds	r22, 0x481F	; 0x80481f <_ZL8freqVCOB>
    41d4:	70 91 20 48 	lds	r23, 0x4820	; 0x804820 <_ZL8freqVCOB+0x1>
    41d8:	80 91 21 48 	lds	r24, 0x4821	; 0x804821 <_ZL8freqVCOB+0x2>
    41dc:	90 91 22 48 	lds	r25, 0x4822	; 0x804822 <_ZL8freqVCOB+0x3>
    41e0:	a5 01       	movw	r20, r10
    41e2:	94 01       	movw	r18, r8
    41e4:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    41e8:	29 87       	std	Y+9, r18	; 0x09
    41ea:	3a 87       	std	Y+10, r19	; 0x0a
    41ec:	4b 87       	std	Y+11, r20	; 0x0b
    41ee:	5c 87       	std	Y+12, r21	; 0x0c
    41f0:	69 01       	movw	r12, r18
    41f2:	7a 01       	movw	r14, r20
    41f4:	69 83       	std	Y+1, r22	; 0x01
    41f6:	7a 83       	std	Y+2, r23	; 0x02
    41f8:	8b 83       	std	Y+3, r24	; 0x03
    41fa:	9c 83       	std	Y+4, r25	; 0x04
    41fc:	8d 82       	std	Y+5, r8	; 0x05
    41fe:	9e 82       	std	Y+6, r9	; 0x06
    4200:	af 82       	std	Y+7, r10	; 0x07
    4202:	b8 86       	std	Y+8, r11	; 0x08
    4204:	be 01       	movw	r22, r28
    4206:	6b 5f       	subi	r22, 0xFB	; 251
    4208:	7f 4f       	sbci	r23, 0xFF	; 255
    420a:	ce 01       	movw	r24, r28
    420c:	01 96       	adiw	r24, 0x01	; 1
    420e:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <_Z13reduce_by_gcdPmS_>
    4212:	80 91 1f 48 	lds	r24, 0x481F	; 0x80481f <_ZL8freqVCOB>
    4216:	90 91 20 48 	lds	r25, 0x4820	; 0x804820 <_ZL8freqVCOB+0x1>
    421a:	a0 91 21 48 	lds	r26, 0x4821	; 0x804821 <_ZL8freqVCOB+0x2>
    421e:	b0 91 22 48 	lds	r27, 0x4822	; 0x804822 <_ZL8freqVCOB+0x3>
    4222:	8d 87       	std	Y+13, r24	; 0x0d
    4224:	9e 87       	std	Y+14, r25	; 0x0e
    4226:	af 87       	std	Y+15, r26	; 0x0f
    4228:	b8 8b       	std	Y+16, r27	; 0x10
    422a:	4d 80       	ldd	r4, Y+5	; 0x05
    422c:	5e 80       	ldd	r5, Y+6	; 0x06
    422e:	6f 80       	ldd	r6, Y+7	; 0x07
    4230:	78 84       	ldd	r7, Y+8	; 0x08
    4232:	29 85       	ldd	r18, Y+9	; 0x09
    4234:	3a 85       	ldd	r19, Y+10	; 0x0a
    4236:	4b 85       	ldd	r20, Y+11	; 0x0b
    4238:	5c 85       	ldd	r21, Y+12	; 0x0c
    423a:	c3 01       	movw	r24, r6
    423c:	b2 01       	movw	r22, r4
    423e:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__mulsi3>
    4242:	89 80       	ldd	r8, Y+1	; 0x01
    4244:	9a 80       	ldd	r9, Y+2	; 0x02
    4246:	ab 80       	ldd	r10, Y+3	; 0x03
    4248:	bc 80       	ldd	r11, Y+4	; 0x04
    424a:	9b 01       	movw	r18, r22
    424c:	ac 01       	movw	r20, r24
    424e:	28 0d       	add	r18, r8
    4250:	39 1d       	adc	r19, r9
    4252:	4a 1d       	adc	r20, r10
    4254:	5b 1d       	adc	r21, r11
    4256:	6d 85       	ldd	r22, Y+13	; 0x0d
    4258:	7e 85       	ldd	r23, Y+14	; 0x0e
    425a:	8f 85       	ldd	r24, Y+15	; 0x0f
    425c:	98 89       	ldd	r25, Y+16	; 0x10
    425e:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    4262:	ca 01       	movw	r24, r20
    4264:	b9 01       	movw	r22, r18
    4266:	a3 01       	movw	r20, r6
    4268:	92 01       	movw	r18, r4
    426a:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__mulsi3>
    426e:	6d 87       	std	Y+13, r22	; 0x0d
    4270:	7e 87       	std	Y+14, r23	; 0x0e
    4272:	8f 87       	std	Y+15, r24	; 0x0f
    4274:	98 8b       	std	Y+16, r25	; 0x10
    4276:	89 28       	or	r8, r9
    4278:	8a 28       	or	r8, r10
    427a:	8b 28       	or	r8, r11
    427c:	29 f4       	brne	.+10     	; 0x4288 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf0>
    427e:	99 85       	ldd	r25, Y+9	; 0x09
    4280:	90 ff       	sbrs	r25, 0
    4282:	04 c0       	rjmp	.+8      	; 0x428c <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf4>
    4284:	80 e0       	ldi	r24, 0x00	; 0
    4286:	03 c0       	rjmp	.+6      	; 0x428e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	01 c0       	rjmp	.+2      	; 0x428e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	a9 89       	ldd	r26, Y+17	; 0x11
    4290:	ba 89       	ldd	r27, Y+18	; 0x12
    4292:	8c 93       	st	X, r24
    4294:	b4 e0       	ldi	r27, 0x04	; 4
    4296:	cb 16       	cp	r12, r27
    4298:	d1 04       	cpc	r13, r1
    429a:	e1 04       	cpc	r14, r1
    429c:	f1 04       	cpc	r15, r1
    429e:	09 f0       	breq	.+2      	; 0x42a2 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x10a>
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    42a2:	f8 01       	movw	r30, r16
    42a4:	80 83       	st	Z, r24
    42a6:	88 23       	and	r24, r24
    42a8:	a1 f0       	breq	.+40     	; 0x42d2 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x13a>
    42aa:	d1 01       	movw	r26, r2
    42ac:	1d 92       	st	X+, r1
    42ae:	1d 92       	st	X+, r1
    42b0:	1d 92       	st	X+, r1
    42b2:	1c 92       	st	X, r1
    42b4:	13 97       	sbiw	r26, 0x03	; 3
    42b6:	f1 01       	movw	r30, r2
    42b8:	14 82       	std	Z+4, r1	; 0x04
    42ba:	15 82       	std	Z+5, r1	; 0x05
    42bc:	16 82       	std	Z+6, r1	; 0x06
    42be:	17 82       	std	Z+7, r1	; 0x07
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	a0 e0       	ldi	r26, 0x00	; 0
    42c6:	b0 e0       	ldi	r27, 0x00	; 0
    42c8:	80 87       	std	Z+8, r24	; 0x08
    42ca:	91 87       	std	Z+9, r25	; 0x09
    42cc:	a2 87       	std	Z+10, r26	; 0x0a
    42ce:	b3 87       	std	Z+11, r27	; 0x0b
    42d0:	69 c0       	rjmp	.+210    	; 0x43a4 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x20c>
    42d2:	89 80       	ldd	r8, Y+1	; 0x01
    42d4:	9a 80       	ldd	r9, Y+2	; 0x02
    42d6:	ab 80       	ldd	r10, Y+3	; 0x03
    42d8:	bc 80       	ldd	r11, Y+4	; 0x04
    42da:	88 0c       	add	r8, r8
    42dc:	99 1c       	adc	r9, r9
    42de:	aa 1c       	adc	r10, r10
    42e0:	bb 1c       	adc	r11, r11
    42e2:	88 0c       	add	r8, r8
    42e4:	99 1c       	adc	r9, r9
    42e6:	aa 1c       	adc	r10, r10
    42e8:	bb 1c       	adc	r11, r11
    42ea:	88 0c       	add	r8, r8
    42ec:	99 1c       	adc	r9, r9
    42ee:	aa 1c       	adc	r10, r10
    42f0:	bb 1c       	adc	r11, r11
    42f2:	88 0c       	add	r8, r8
    42f4:	99 1c       	adc	r9, r9
    42f6:	aa 1c       	adc	r10, r10
    42f8:	bb 1c       	adc	r11, r11
    42fa:	88 0c       	add	r8, r8
    42fc:	99 1c       	adc	r9, r9
    42fe:	aa 1c       	adc	r10, r10
    4300:	bb 1c       	adc	r11, r11
    4302:	88 0c       	add	r8, r8
    4304:	99 1c       	adc	r9, r9
    4306:	aa 1c       	adc	r10, r10
    4308:	bb 1c       	adc	r11, r11
    430a:	88 0c       	add	r8, r8
    430c:	99 1c       	adc	r9, r9
    430e:	aa 1c       	adc	r10, r10
    4310:	bb 1c       	adc	r11, r11
    4312:	4d 80       	ldd	r4, Y+5	; 0x05
    4314:	5e 80       	ldd	r5, Y+6	; 0x06
    4316:	6f 80       	ldd	r6, Y+7	; 0x07
    4318:	78 84       	ldd	r7, Y+8	; 0x08
    431a:	c5 01       	movw	r24, r10
    431c:	b4 01       	movw	r22, r8
    431e:	a3 01       	movw	r20, r6
    4320:	92 01       	movw	r18, r4
    4322:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    4326:	c9 84       	ldd	r12, Y+9	; 0x09
    4328:	da 84       	ldd	r13, Y+10	; 0x0a
    432a:	eb 84       	ldd	r14, Y+11	; 0x0b
    432c:	fc 84       	ldd	r15, Y+12	; 0x0c
    432e:	cc 0c       	add	r12, r12
    4330:	dd 1c       	adc	r13, r13
    4332:	ee 1c       	adc	r14, r14
    4334:	ff 1c       	adc	r15, r15
    4336:	cc 0c       	add	r12, r12
    4338:	dd 1c       	adc	r13, r13
    433a:	ee 1c       	adc	r14, r14
    433c:	ff 1c       	adc	r15, r15
    433e:	cc 0c       	add	r12, r12
    4340:	dd 1c       	adc	r13, r13
    4342:	ee 1c       	adc	r14, r14
    4344:	ff 1c       	adc	r15, r15
    4346:	cc 0c       	add	r12, r12
    4348:	dd 1c       	adc	r13, r13
    434a:	ee 1c       	adc	r14, r14
    434c:	ff 1c       	adc	r15, r15
    434e:	cc 0c       	add	r12, r12
    4350:	dd 1c       	adc	r13, r13
    4352:	ee 1c       	adc	r14, r14
    4354:	ff 1c       	adc	r15, r15
    4356:	cc 0c       	add	r12, r12
    4358:	dd 1c       	adc	r13, r13
    435a:	ee 1c       	adc	r14, r14
    435c:	ff 1c       	adc	r15, r15
    435e:	cc 0c       	add	r12, r12
    4360:	dd 1c       	adc	r13, r13
    4362:	ee 1c       	adc	r14, r14
    4364:	ff 1c       	adc	r15, r15
    4366:	c2 0e       	add	r12, r18
    4368:	d3 1e       	adc	r13, r19
    436a:	e4 1e       	adc	r14, r20
    436c:	f5 1e       	adc	r15, r21
    436e:	f2 e0       	ldi	r31, 0x02	; 2
    4370:	df 1a       	sub	r13, r31
    4372:	e1 08       	sbc	r14, r1
    4374:	f1 08       	sbc	r15, r1
    4376:	d1 01       	movw	r26, r2
    4378:	cd 92       	st	X+, r12
    437a:	dd 92       	st	X+, r13
    437c:	ed 92       	st	X+, r14
    437e:	fc 92       	st	X, r15
    4380:	13 97       	sbiw	r26, 0x03	; 3
    4382:	c3 01       	movw	r24, r6
    4384:	b2 01       	movw	r22, r4
    4386:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__mulsi3>
    438a:	86 1a       	sub	r8, r22
    438c:	97 0a       	sbc	r9, r23
    438e:	a8 0a       	sbc	r10, r24
    4390:	b9 0a       	sbc	r11, r25
    4392:	f1 01       	movw	r30, r2
    4394:	84 82       	std	Z+4, r8	; 0x04
    4396:	95 82       	std	Z+5, r9	; 0x05
    4398:	a6 82       	std	Z+6, r10	; 0x06
    439a:	b7 82       	std	Z+7, r11	; 0x07
    439c:	40 86       	std	Z+8, r4	; 0x08
    439e:	51 86       	std	Z+9, r5	; 0x09
    43a0:	62 86       	std	Z+10, r6	; 0x0a
    43a2:	73 86       	std	Z+11, r7	; 0x0b
    43a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    43a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    43a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    43aa:	98 89       	ldd	r25, Y+16	; 0x10
    43ac:	62 96       	adiw	r28, 0x12	; 18
    43ae:	cd bf       	out	0x3d, r28	; 61
    43b0:	de bf       	out	0x3e, r29	; 62
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	1f 91       	pop	r17
    43b8:	0f 91       	pop	r16
    43ba:	ff 90       	pop	r15
    43bc:	ef 90       	pop	r14
    43be:	df 90       	pop	r13
    43c0:	cf 90       	pop	r12
    43c2:	bf 90       	pop	r11
    43c4:	af 90       	pop	r10
    43c6:	9f 90       	pop	r9
    43c8:	8f 90       	pop	r8
    43ca:	7f 90       	pop	r7
    43cc:	6f 90       	pop	r6
    43ce:	5f 90       	pop	r5
    43d0:	4f 90       	pop	r4
    43d2:	3f 90       	pop	r3
    43d4:	2f 90       	pop	r2
    43d6:	08 95       	ret

000043d8 <_Z17si5351_write_bulkhPhh>:
    43d8:	ff 92       	push	r15
    43da:	0f 93       	push	r16
    43dc:	1f 93       	push	r17
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    43e2:	f8 2e       	mov	r15, r24
    43e4:	8b 01       	movw	r16, r22
    43e6:	d4 2f       	mov	r29, r20
    43e8:	8a e0       	ldi	r24, 0x0A	; 10
    43ea:	cf ef       	ldi	r28, 0xFF	; 255
    43ec:	c8 0f       	add	r28, r24
    43ee:	88 23       	and	r24, r24
    43f0:	71 f0       	breq	.+28     	; 0x440e <_Z17si5351_write_bulkhPhh+0x36>
    43f2:	2d 2f       	mov	r18, r29
    43f4:	a8 01       	movw	r20, r16
    43f6:	6f 2d       	mov	r22, r15
    43f8:	80 ec       	ldi	r24, 0xC0	; 192
    43fa:	0e 94 3d 1a 	call	0x347a	; 0x347a <I2C_1_SendData>
    43fe:	21 e0       	ldi	r18, 0x01	; 1
    4400:	d8 13       	cpse	r29, r24
    4402:	01 c0       	rjmp	.+2      	; 0x4406 <_Z17si5351_write_bulkhPhh+0x2e>
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	d8 17       	cp	r29, r24
    4408:	21 f0       	breq	.+8      	; 0x4412 <_Z17si5351_write_bulkhPhh+0x3a>
    440a:	91 e0       	ldi	r25, 0x01	; 1
    440c:	03 c0       	rjmp	.+6      	; 0x4414 <_Z17si5351_write_bulkhPhh+0x3c>
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	01 c0       	rjmp	.+2      	; 0x4414 <_Z17si5351_write_bulkhPhh+0x3c>
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	8c 2f       	mov	r24, r28
    4416:	91 11       	cpse	r25, r1
    4418:	e8 cf       	rjmp	.-48     	; 0x43ea <_Z17si5351_write_bulkhPhh+0x12>
    441a:	82 2f       	mov	r24, r18
    441c:	df 91       	pop	r29
    441e:	cf 91       	pop	r28
    4420:	1f 91       	pop	r17
    4422:	0f 91       	pop	r16
    4424:	ff 90       	pop	r15
    4426:	08 95       	ret

00004428 <_Z7set_pllm10si5351_pll>:
    4428:	1f 93       	push	r17
    442a:	cf 93       	push	r28
    442c:	df 93       	push	r29
    442e:	cd b7       	in	r28, 0x3d	; 61
    4430:	de b7       	in	r29, 0x3e	; 62
    4432:	66 97       	sbiw	r28, 0x16	; 22
    4434:	cd bf       	out	0x3d, r28	; 61
    4436:	de bf       	out	0x3e, r29	; 62
    4438:	14 2f       	mov	r17, r20
    443a:	ae 01       	movw	r20, r28
    443c:	4f 5f       	subi	r20, 0xFF	; 255
    443e:	5f 4f       	sbci	r21, 0xFF	; 255
    4440:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_Z8pll_calcmP13u_si5351_regs>
    4444:	81 11       	cpse	r24, r1
    4446:	28 c0       	rjmp	.+80     	; 0x4498 <_Z7set_pllm10si5351_pll+0x70>
    4448:	8a 85       	ldd	r24, Y+10	; 0x0a
    444a:	8d 87       	std	Y+13, r24	; 0x0d
    444c:	89 85       	ldd	r24, Y+9	; 0x09
    444e:	8e 87       	std	Y+14, r24	; 0x0e
    4450:	8b 81       	ldd	r24, Y+3	; 0x03
    4452:	83 70       	andi	r24, 0x03	; 3
    4454:	8f 87       	std	Y+15, r24	; 0x0f
    4456:	8a 81       	ldd	r24, Y+2	; 0x02
    4458:	88 8b       	std	Y+16, r24	; 0x10
    445a:	89 81       	ldd	r24, Y+1	; 0x01
    445c:	89 8b       	std	Y+17, r24	; 0x11
    445e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4460:	8f 81       	ldd	r24, Y+7	; 0x07
    4462:	8f 70       	andi	r24, 0x0F	; 15
    4464:	20 e1       	ldi	r18, 0x10	; 16
    4466:	92 9f       	mul	r25, r18
    4468:	80 0d       	add	r24, r0
    446a:	11 24       	eor	r1, r1
    446c:	8a 8b       	std	Y+18, r24	; 0x12
    446e:	8e 81       	ldd	r24, Y+6	; 0x06
    4470:	8b 8b       	std	Y+19, r24	; 0x13
    4472:	8d 81       	ldd	r24, Y+5	; 0x05
    4474:	8c 8b       	std	Y+20, r24	; 0x14
    4476:	11 30       	cpi	r17, 0x01	; 1
    4478:	41 f4       	brne	.+16     	; 0x448a <_Z7set_pllm10si5351_pll+0x62>
    447a:	48 e0       	ldi	r20, 0x08	; 8
    447c:	be 01       	movw	r22, r28
    447e:	63 5f       	subi	r22, 0xF3	; 243
    4480:	7f 4f       	sbci	r23, 0xFF	; 255
    4482:	8a e1       	ldi	r24, 0x1A	; 26
    4484:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4488:	07 c0       	rjmp	.+14     	; 0x4498 <_Z7set_pllm10si5351_pll+0x70>
    448a:	48 e0       	ldi	r20, 0x08	; 8
    448c:	be 01       	movw	r22, r28
    448e:	63 5f       	subi	r22, 0xF3	; 243
    4490:	7f 4f       	sbci	r23, 0xFF	; 255
    4492:	82 e2       	ldi	r24, 0x22	; 34
    4494:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4498:	66 96       	adiw	r28, 0x16	; 22
    449a:	cd bf       	out	0x3d, r28	; 61
    449c:	de bf       	out	0x3e, r29	; 62
    449e:	df 91       	pop	r29
    44a0:	cf 91       	pop	r28
    44a2:	1f 91       	pop	r17
    44a4:	08 95       	ret

000044a6 <_Z16si5351_read_bulkhPhh>:
		while(tries-- && (fail = I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
		return(fail);
	}

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    44a6:	ff 92       	push	r15
    44a8:	0f 93       	push	r16
    44aa:	1f 93       	push	r17
    44ac:	cf 93       	push	r28
    44ae:	df 93       	push	r29
    44b0:	f8 2e       	mov	r15, r24
    44b2:	8b 01       	movw	r16, r22
    44b4:	d4 2f       	mov	r29, r20
		uint8_t tries = 10;
    44b6:	8a e0       	ldi	r24, 0x0A	; 10
		bool fail;
		while(tries-- && (fail = I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    44b8:	cf ef       	ldi	r28, 0xFF	; 255
    44ba:	c8 0f       	add	r28, r24
    44bc:	88 23       	and	r24, r24
    44be:	71 f0       	breq	.+28     	; 0x44dc <_Z16si5351_read_bulkhPhh+0x36>
    44c0:	2d 2f       	mov	r18, r29
    44c2:	a8 01       	movw	r20, r16
    44c4:	6f 2d       	mov	r22, r15
    44c6:	80 ec       	ldi	r24, 0xC0	; 192
    44c8:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <I2C_1_GetData>
    44cc:	21 e0       	ldi	r18, 0x01	; 1
    44ce:	d8 13       	cpse	r29, r24
    44d0:	01 c0       	rjmp	.+2      	; 0x44d4 <_Z16si5351_read_bulkhPhh+0x2e>
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	d8 17       	cp	r29, r24
    44d6:	21 f0       	breq	.+8      	; 0x44e0 <_Z16si5351_read_bulkhPhh+0x3a>
    44d8:	91 e0       	ldi	r25, 0x01	; 1
    44da:	03 c0       	rjmp	.+6      	; 0x44e2 <_Z16si5351_read_bulkhPhh+0x3c>
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	01 c0       	rjmp	.+2      	; 0x44e2 <_Z16si5351_read_bulkhPhh+0x3c>
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	8c 2f       	mov	r24, r28
    44e4:	91 11       	cpse	r25, r1
    44e6:	e8 cf       	rjmp	.-48     	; 0x44b8 <_Z16si5351_read_bulkhPhh+0x12>
		return(fail);
	}
    44e8:	82 2f       	mov	r24, r18
    44ea:	df 91       	pop	r29
    44ec:	cf 91       	pop	r28
    44ee:	1f 91       	pop	r17
    44f0:	0f 91       	pop	r16
    44f2:	ff 90       	pop	r15
    44f4:	08 95       	ret

000044f6 <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	bool si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    44f6:	cf 92       	push	r12
    44f8:	df 92       	push	r13
    44fa:	ef 92       	push	r14
    44fc:	ff 92       	push	r15
    44fe:	1f 93       	push	r17
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	00 d0       	rcall	.+0      	; 0x4506 <si5351_init+0x10>
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	18 2f       	mov	r17, r24
    450c:	6a 01       	movw	r12, r20
    450e:	7b 01       	movw	r14, r22
		static bool err = false;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    4510:	0e 94 cf 19 	call	0x339e	; 0x339e <I2C_1_Init>
			uint8_t result_val = 0x00;
			bool result = false;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    4514:	10 92 1f 48 	sts	0x481F, r1	; 0x80481f <_ZL8freqVCOB>
    4518:	10 92 20 48 	sts	0x4820, r1	; 0x804820 <_ZL8freqVCOB+0x1>
    451c:	10 92 21 48 	sts	0x4821, r1	; 0x804821 <_ZL8freqVCOB+0x2>
    4520:	10 92 22 48 	sts	0x4822, r1	; 0x804822 <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    4524:	80 e4       	ldi	r24, 0x40	; 64
    4526:	98 e7       	ldi	r25, 0x78	; 120
    4528:	ad e7       	ldi	r26, 0x7D	; 125
    452a:	b1 e0       	ldi	r27, 0x01	; 1
    452c:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    4530:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    4534:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    4538:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    453c:	10 92 1e 48 	sts	0x481E, r1	; 0x80481e <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    4540:	8f ef       	ldi	r24, 0xFF	; 255
    4542:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    4544:	41 e0       	ldi	r20, 0x01	; 1
    4546:	be 01       	movw	r22, r28
    4548:	6f 5f       	subi	r22, 0xFF	; 255
    454a:	7f 4f       	sbci	r23, 0xFF	; 255
    454c:	83 e0       	ldi	r24, 0x03	; 3
    454e:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4552:	80 93 10 48 	sts	0x4810, r24	; 0x804810 <_ZZ11si5351_initE3err>
		
		if(err) return err;
    4556:	81 11       	cpse	r24, r1
    4558:	76 c0       	rjmp	.+236    	; 0x4646 <si5351_init+0x150>
		/* Power down clocks */
		data[0] = 0xCC;
    455a:	8c ec       	ldi	r24, 0xCC	; 204
    455c:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    455e:	41 e0       	ldi	r20, 0x01	; 1
    4560:	be 01       	movw	r22, r28
    4562:	6f 5f       	subi	r22, 0xFF	; 255
    4564:	7f 4f       	sbci	r23, 0xFF	; 255
    4566:	80 e1       	ldi	r24, 0x10	; 16
    4568:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    456c:	90 91 10 48 	lds	r25, 0x4810	; 0x804810 <_ZZ11si5351_initE3err>
    4570:	89 2b       	or	r24, r25
    4572:	80 93 10 48 	sts	0x4810, r24	; 0x804810 <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x11, data, 1);
    4576:	41 e0       	ldi	r20, 0x01	; 1
    4578:	be 01       	movw	r22, r28
    457a:	6f 5f       	subi	r22, 0xFF	; 255
    457c:	7f 4f       	sbci	r23, 0xFF	; 255
    457e:	81 e1       	ldi	r24, 0x11	; 17
    4580:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4584:	90 91 10 48 	lds	r25, 0x4810	; 0x804810 <_ZZ11si5351_initE3err>
    4588:	89 2b       	or	r24, r25
    458a:	80 93 10 48 	sts	0x4810, r24	; 0x804810 <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x12, data, 1);
    458e:	41 e0       	ldi	r20, 0x01	; 1
    4590:	be 01       	movw	r22, r28
    4592:	6f 5f       	subi	r22, 0xFF	; 255
    4594:	7f 4f       	sbci	r23, 0xFF	; 255
    4596:	82 e1       	ldi	r24, 0x12	; 18
    4598:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    459c:	90 91 10 48 	lds	r25, 0x4810	; 0x804810 <_ZZ11si5351_initE3err>
    45a0:	89 2b       	or	r24, r25
    45a2:	80 93 10 48 	sts	0x4810, r24	; 0x804810 <_ZZ11si5351_initE3err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    45a6:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    45a8:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    45aa:	41 e0       	ldi	r20, 0x01	; 1
    45ac:	be 01       	movw	r22, r28
    45ae:	6f 5f       	subi	r22, 0xFF	; 255
    45b0:	7f 4f       	sbci	r23, 0xFF	; 255
    45b2:	87 eb       	ldi	r24, 0xB7	; 183
    45b4:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    45b8:	90 91 10 48 	lds	r25, 0x4810	; 0x804810 <_ZZ11si5351_initE3err>
    45bc:	89 2b       	or	r24, r25
    45be:	80 93 10 48 	sts	0x4810, r24	; 0x804810 <_ZZ11si5351_initE3err>

		if(!ref_osc_freq)
    45c2:	c1 14       	cp	r12, r1
    45c4:	d1 04       	cpc	r13, r1
    45c6:	e1 04       	cpc	r14, r1
    45c8:	f1 04       	cpc	r15, r1
    45ca:	51 f4       	brne	.+20     	; 0x45e0 <si5351_init+0xea>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    45cc:	0f 2e       	mov	r0, r31
    45ce:	f0 e4       	ldi	r31, 0x40	; 64
    45d0:	cf 2e       	mov	r12, r31
    45d2:	f8 e7       	ldi	r31, 0x78	; 120
    45d4:	df 2e       	mov	r13, r31
    45d6:	fd e7       	ldi	r31, 0x7D	; 125
    45d8:	ef 2e       	mov	r14, r31
    45da:	ff 24       	eor	r15, r15
    45dc:	f3 94       	inc	r15
    45de:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    45e0:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    45e4:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    45e8:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    45ec:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    45f0:	c8 16       	cp	r12, r24
    45f2:	d9 06       	cpc	r13, r25
    45f4:	ea 06       	cpc	r14, r26
    45f6:	fb 06       	cpc	r15, r27
    45f8:	01 f1       	breq	.+64     	; 0x463a <si5351_init+0x144>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    45fa:	41 e0       	ldi	r20, 0x01	; 1
    45fc:	be 01       	movw	r22, r28
    45fe:	6f 5f       	subi	r22, 0xFF	; 255
    4600:	7f 4f       	sbci	r23, 0xFF	; 255
    4602:	8f e0       	ldi	r24, 0x0F	; 15
    4604:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_Z16si5351_read_bulkhPhh>
    4608:	81 11       	cpse	r24, r1
    460a:	1d c0       	rjmp	.+58     	; 0x4646 <si5351_init+0x150>
			{
				return true;
			}
			
			reg_val = data[0];
    460c:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    460e:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    4610:	c0 92 28 40 	sts	0x4028, r12	; 0x804028 <_ZL9xtal_freq>
    4614:	d0 92 29 40 	sts	0x4029, r13	; 0x804029 <_ZL9xtal_freq+0x1>
    4618:	e0 92 2a 40 	sts	0x402A, r14	; 0x80402a <_ZL9xtal_freq+0x2>
    461c:	f0 92 2b 40 	sts	0x402B, r15	; 0x80402b <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    4620:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    4622:	41 e0       	ldi	r20, 0x01	; 1
    4624:	be 01       	movw	r22, r28
    4626:	6f 5f       	subi	r22, 0xFF	; 255
    4628:	7f 4f       	sbci	r23, 0xFF	; 255
    462a:	8f e0       	ldi	r24, 0x0F	; 15
    462c:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4630:	90 91 10 48 	lds	r25, 0x4810	; 0x804810 <_ZZ11si5351_initE3err>
    4634:	89 2b       	or	r24, r25
    4636:	80 93 10 48 	sts	0x4810, r24	; 0x804810 <_ZZ11si5351_initE3err>
		}
		
		g_si5351_initialized = !err;
    463a:	80 91 10 48 	lds	r24, 0x4810	; 0x804810 <_ZZ11si5351_initE3err>
    463e:	91 e0       	ldi	r25, 0x01	; 1
    4640:	98 27       	eor	r25, r24
    4642:	90 93 11 48 	sts	0x4811, r25	; 0x804811 <g_si5351_initialized>

		return err;
	}
    4646:	0f 90       	pop	r0
    4648:	0f 90       	pop	r0
    464a:	df 91       	pop	r29
    464c:	cf 91       	pop	r28
    464e:	1f 91       	pop	r17
    4650:	ff 90       	pop	r15
    4652:	ef 90       	pop	r14
    4654:	df 90       	pop	r13
    4656:	cf 90       	pop	r12
    4658:	08 95       	ret

0000465a <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, bool enable)
	{
    465a:	0f 93       	push	r16
    465c:	1f 93       	push	r17
    465e:	cf 93       	push	r28
    4660:	df 93       	push	r29
    4662:	00 d0       	rcall	.+0      	; 0x4664 <si5351_clock_enable+0xa>
    4664:	cd b7       	in	r28, 0x3d	; 61
    4666:	de b7       	in	r29, 0x3e	; 62
    4668:	18 2f       	mov	r17, r24
    466a:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    466c:	41 e0       	ldi	r20, 0x01	; 1
    466e:	be 01       	movw	r22, r28
    4670:	6f 5f       	subi	r22, 0xFF	; 255
    4672:	7f 4f       	sbci	r23, 0xFF	; 255
    4674:	83 e0       	ldi	r24, 0x03	; 3
    4676:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_Z16si5351_read_bulkhPhh>
    467a:	81 11       	cpse	r24, r1
    467c:	23 c0       	rjmp	.+70     	; 0x46c4 <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    467e:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    4680:	00 23       	and	r16, r16
    4682:	59 f0       	breq	.+22     	; 0x469a <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    4684:	21 e0       	ldi	r18, 0x01	; 1
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	02 c0       	rjmp	.+4      	; 0x468e <si5351_clock_enable+0x34>
    468a:	22 0f       	add	r18, r18
    468c:	33 1f       	adc	r19, r19
    468e:	1a 95       	dec	r17
    4690:	e2 f7       	brpl	.-8      	; 0x468a <si5351_clock_enable+0x30>
    4692:	82 2f       	mov	r24, r18
    4694:	80 95       	com	r24
    4696:	89 23       	and	r24, r25
    4698:	09 c0       	rjmp	.+18     	; 0x46ac <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    469a:	21 e0       	ldi	r18, 0x01	; 1
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	02 c0       	rjmp	.+4      	; 0x46a4 <si5351_clock_enable+0x4a>
    46a0:	22 0f       	add	r18, r18
    46a2:	33 1f       	adc	r19, r19
    46a4:	1a 95       	dec	r17
    46a6:	e2 f7       	brpl	.-8      	; 0x46a0 <si5351_clock_enable+0x46>
    46a8:	89 2f       	mov	r24, r25
    46aa:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    46ac:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    46ae:	41 e0       	ldi	r20, 0x01	; 1
    46b0:	be 01       	movw	r22, r28
    46b2:	6f 5f       	subi	r22, 0xFF	; 255
    46b4:	7f 4f       	sbci	r23, 0xFF	; 255
    46b6:	83 e0       	ldi	r24, 0x03	; 3
    46b8:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    46bc:	88 23       	and	r24, r24
    46be:	21 f0       	breq	.+8      	; 0x46c8 <si5351_clock_enable+0x6e>
    46c0:	8c ef       	ldi	r24, 0xFC	; 252
    46c2:	03 c0       	rjmp	.+6      	; 0x46ca <si5351_clock_enable+0x70>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    46c4:	8c ef       	ldi	r24, 0xFC	; 252
    46c6:	01 c0       	rjmp	.+2      	; 0x46ca <si5351_clock_enable+0x70>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    46c8:	80 e0       	ldi	r24, 0x00	; 0
	}
    46ca:	0f 90       	pop	r0
    46cc:	0f 90       	pop	r0
    46ce:	df 91       	pop	r29
    46d0:	cf 91       	pop	r28
    46d2:	1f 91       	pop	r17
    46d4:	0f 91       	pop	r16
    46d6:	08 95       	ret

000046d8 <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    46d8:	0f 93       	push	r16
    46da:	1f 93       	push	r17
    46dc:	cf 93       	push	r28
    46de:	df 93       	push	r29
    46e0:	00 d0       	rcall	.+0      	; 0x46e2 <si5351_drive_strength+0xa>
    46e2:	cd b7       	in	r28, 0x3d	; 61
    46e4:	de b7       	in	r29, 0x3e	; 62
    46e6:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    46e8:	10 e1       	ldi	r17, 0x10	; 16
    46ea:	18 0f       	add	r17, r24
    46ec:	41 e0       	ldi	r20, 0x01	; 1
    46ee:	be 01       	movw	r22, r28
    46f0:	6f 5f       	subi	r22, 0xFF	; 255
    46f2:	7f 4f       	sbci	r23, 0xFF	; 255
    46f4:	81 2f       	mov	r24, r17
    46f6:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_Z16si5351_read_bulkhPhh>
    46fa:	81 11       	cpse	r24, r1
    46fc:	1e c0       	rjmp	.+60     	; 0x473a <si5351_drive_strength+0x62>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    46fe:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    4700:	01 30       	cpi	r16, 0x01	; 1
    4702:	41 f0       	breq	.+16     	; 0x4714 <si5351_drive_strength+0x3c>
    4704:	28 f0       	brcs	.+10     	; 0x4710 <si5351_drive_strength+0x38>
    4706:	02 30       	cpi	r16, 0x02	; 2
    4708:	41 f0       	breq	.+16     	; 0x471a <si5351_drive_strength+0x42>
    470a:	03 30       	cpi	r16, 0x03	; 3
    470c:	49 f0       	breq	.+18     	; 0x4720 <si5351_drive_strength+0x48>
    470e:	09 c0       	rjmp	.+18     	; 0x4722 <si5351_drive_strength+0x4a>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    4710:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    4712:	07 c0       	rjmp	.+14     	; 0x4722 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    4714:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    4716:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    4718:	04 c0       	rjmp	.+8      	; 0x4722 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    471a:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    471c:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    471e:	01 c0       	rjmp	.+2      	; 0x4722 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    4720:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    4722:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    4724:	41 e0       	ldi	r20, 0x01	; 1
    4726:	be 01       	movw	r22, r28
    4728:	6f 5f       	subi	r22, 0xFF	; 255
    472a:	7f 4f       	sbci	r23, 0xFF	; 255
    472c:	81 2f       	mov	r24, r17
    472e:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4732:	88 23       	and	r24, r24
    4734:	21 f0       	breq	.+8      	; 0x473e <si5351_drive_strength+0x66>
    4736:	8b ef       	ldi	r24, 0xFB	; 251
    4738:	03 c0       	rjmp	.+6      	; 0x4740 <si5351_drive_strength+0x68>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    473a:	8b ef       	ldi	r24, 0xFB	; 251
    473c:	01 c0       	rjmp	.+2      	; 0x4740 <si5351_drive_strength+0x68>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    473e:	80 e0       	ldi	r24, 0x00	; 0
	}
    4740:	0f 90       	pop	r0
    4742:	0f 90       	pop	r0
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	1f 91       	pop	r17
    474a:	0f 91       	pop	r16
    474c:	08 95       	ret

0000474e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    474e:	0f 93       	push	r16
    4750:	1f 93       	push	r17
    4752:	cf 93       	push	r28
    4754:	df 93       	push	r29
    4756:	00 d0       	rcall	.+0      	; 0x4758 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
    475c:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    475e:	10 e1       	ldi	r17, 0x10	; 16
    4760:	18 0f       	add	r17, r24
    4762:	41 e0       	ldi	r20, 0x01	; 1
    4764:	be 01       	movw	r22, r28
    4766:	6f 5f       	subi	r22, 0xFF	; 255
    4768:	7f 4f       	sbci	r23, 0xFF	; 255
    476a:	81 2f       	mov	r24, r17
    476c:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_Z16si5351_read_bulkhPhh>
    4770:	81 11       	cpse	r24, r1
    4772:	10 c0       	rjmp	.+32     	; 0x4794 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x46>
		{
			return(true);
		}
		
		reg_val = data[0];
    4774:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    4776:	01 30       	cpi	r16, 0x01	; 1
    4778:	11 f4       	brne	.+4      	; 0x477e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    477a:	8f 7d       	andi	r24, 0xDF	; 223
    477c:	03 c0       	rjmp	.+6      	; 0x4784 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    477e:	02 30       	cpi	r16, 0x02	; 2
    4780:	09 f4       	brne	.+2      	; 0x4784 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    4782:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    4784:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    4786:	41 e0       	ldi	r20, 0x01	; 1
    4788:	be 01       	movw	r22, r28
    478a:	6f 5f       	subi	r22, 0xFF	; 255
    478c:	7f 4f       	sbci	r23, 0xFF	; 255
    478e:	81 2f       	mov	r24, r17
    4790:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
		{
			return(true);
		}
		
		return(false);
	}
    4794:	0f 90       	pop	r0
    4796:	0f 90       	pop	r0
    4798:	df 91       	pop	r29
    479a:	cf 91       	pop	r28
    479c:	1f 91       	pop	r17
    479e:	0f 91       	pop	r16
    47a0:	08 95       	ret

000047a2 <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    47a2:	0f 93       	push	r16
    47a4:	1f 93       	push	r17
    47a6:	cf 93       	push	r28
    47a8:	df 93       	push	r29
    47aa:	00 d0       	rcall	.+0      	; 0x47ac <_Z16set_integer_mode12si5351_clockb+0xa>
    47ac:	cd b7       	in	r28, 0x3d	; 61
    47ae:	de b7       	in	r29, 0x3e	; 62
    47b0:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    47b2:	10 e1       	ldi	r17, 0x10	; 16
    47b4:	18 0f       	add	r17, r24
    47b6:	41 e0       	ldi	r20, 0x01	; 1
    47b8:	be 01       	movw	r22, r28
    47ba:	6f 5f       	subi	r22, 0xFF	; 255
    47bc:	7f 4f       	sbci	r23, 0xFF	; 255
    47be:	81 2f       	mov	r24, r17
    47c0:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_Z16si5351_read_bulkhPhh>
    47c4:	81 11       	cpse	r24, r1
    47c6:	0e c0       	rjmp	.+28     	; 0x47e4 <_Z16set_integer_mode12si5351_clockb+0x42>
		{
			return(true);
		}
		
		reg_val = data[0];
    47c8:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    47ca:	00 23       	and	r16, r16
    47cc:	11 f0       	breq	.+4      	; 0x47d2 <_Z16set_integer_mode12si5351_clockb+0x30>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    47ce:	80 64       	ori	r24, 0x40	; 64
    47d0:	01 c0       	rjmp	.+2      	; 0x47d4 <_Z16set_integer_mode12si5351_clockb+0x32>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    47d2:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    47d4:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    47d6:	41 e0       	ldi	r20, 0x01	; 1
    47d8:	be 01       	movw	r22, r28
    47da:	6f 5f       	subi	r22, 0xFF	; 255
    47dc:	7f 4f       	sbci	r23, 0xFF	; 255
    47de:	81 2f       	mov	r24, r17
    47e0:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
	}
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	df 91       	pop	r29
    47ea:	cf 91       	pop	r28
    47ec:	1f 91       	pop	r17
    47ee:	0f 91       	pop	r16
    47f0:	08 95       	ret

000047f2 <_Z6ms_div12si5351_clockhb>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    47f2:	ff 92       	push	r15
    47f4:	0f 93       	push	r16
    47f6:	1f 93       	push	r17
    47f8:	cf 93       	push	r28
    47fa:	df 93       	push	r29
    47fc:	00 d0       	rcall	.+0      	; 0x47fe <_Z6ms_div12si5351_clockhb+0xc>
    47fe:	cd b7       	in	r28, 0x3d	; 61
    4800:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    4802:	81 30       	cpi	r24, 0x01	; 1
    4804:	71 f0       	breq	.+28     	; 0x4822 <_Z6ms_div12si5351_clockhb+0x30>
    4806:	18 f0       	brcs	.+6      	; 0x480e <_Z6ms_div12si5351_clockhb+0x1c>
    4808:	82 30       	cpi	r24, 0x02	; 2
    480a:	31 f0       	breq	.+12     	; 0x4818 <_Z6ms_div12si5351_clockhb+0x26>
    480c:	2c c0       	rjmp	.+88     	; 0x4866 <_Z6ms_div12si5351_clockhb+0x74>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    480e:	0f 2e       	mov	r0, r31
    4810:	fc e2       	ldi	r31, 0x2C	; 44
    4812:	ff 2e       	mov	r15, r31
    4814:	f0 2d       	mov	r31, r0
    4816:	09 c0       	rjmp	.+18     	; 0x482a <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    4818:	0f 2e       	mov	r0, r31
    481a:	fc e3       	ldi	r31, 0x3C	; 60
    481c:	ff 2e       	mov	r15, r31
    481e:	f0 2d       	mov	r31, r0
			}
			break;
    4820:	04 c0       	rjmp	.+8      	; 0x482a <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    4822:	0f 2e       	mov	r0, r31
    4824:	f4 e3       	ldi	r31, 0x34	; 52
    4826:	ff 2e       	mov	r15, r31
    4828:	f0 2d       	mov	r31, r0
    482a:	04 2f       	mov	r16, r20
    482c:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    482e:	41 e0       	ldi	r20, 0x01	; 1
    4830:	be 01       	movw	r22, r28
    4832:	6f 5f       	subi	r22, 0xFF	; 255
    4834:	7f 4f       	sbci	r23, 0xFF	; 255
    4836:	8f 2d       	mov	r24, r15
    4838:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_Z16si5351_read_bulkhPhh>
    483c:	81 11       	cpse	r24, r1
    483e:	14 c0       	rjmp	.+40     	; 0x4868 <_Z6ms_div12si5351_clockhb+0x76>
		{
			return(true);
		}
		
		reg_val = data[0];
    4840:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    4842:	86 2f       	mov	r24, r22
    4844:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    4846:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    4848:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    484a:	90 e1       	ldi	r25, 0x10	; 16
    484c:	19 9f       	mul	r17, r25
    484e:	b0 01       	movw	r22, r0
    4850:	11 24       	eor	r1, r1
    4852:	68 2b       	or	r22, r24

		data[0] = reg_val;
    4854:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    4856:	41 e0       	ldi	r20, 0x01	; 1
    4858:	be 01       	movw	r22, r28
    485a:	6f 5f       	subi	r22, 0xFF	; 255
    485c:	7f 4f       	sbci	r23, 0xFF	; 255
    485e:	8f 2d       	mov	r24, r15
    4860:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4864:	01 c0       	rjmp	.+2      	; 0x4868 <_Z6ms_div12si5351_clockhb+0x76>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    4866:	81 e0       	ldi	r24, 0x01	; 1

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		data[0] = reg_val;
		return(si5351_write_bulk(reg_addr, data, 1));
	}
    4868:	0f 90       	pop	r0
    486a:	0f 90       	pop	r0
    486c:	df 91       	pop	r29
    486e:	cf 91       	pop	r28
    4870:	1f 91       	pop	r17
    4872:	0f 91       	pop	r16
    4874:	ff 90       	pop	r15
    4876:	08 95       	ret

00004878 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    4878:	8f 92       	push	r8
    487a:	af 92       	push	r10
    487c:	cf 92       	push	r12
    487e:	df 92       	push	r13
    4880:	ef 92       	push	r14
    4882:	ff 92       	push	r15
    4884:	0f 93       	push	r16
    4886:	1f 93       	push	r17
    4888:	cf 93       	push	r28
    488a:	df 93       	push	r29
    488c:	cd b7       	in	r28, 0x3d	; 61
    488e:	de b7       	in	r29, 0x3e	; 62
    4890:	69 97       	sbiw	r28, 0x19	; 25
    4892:	cd bf       	out	0x3d, r28	; 61
    4894:	de bf       	out	0x3e, r29	; 62
    4896:	f8 2e       	mov	r15, r24
    4898:	ce 86       	std	Y+14, r12	; 0x0e
    489a:	df 86       	std	Y+15, r13	; 0x0f
    489c:	e8 8a       	std	Y+16, r14	; 0x10
    489e:	0a 8b       	std	Y+18, r16	; 0x12
    48a0:	1b 8b       	std	Y+19, r17	; 0x13
    48a2:	2c 8b       	std	Y+20, r18	; 0x14
    48a4:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    48a6:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    48a8:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    48aa:	88 0f       	add	r24, r24
    48ac:	88 0f       	add	r24, r24
    48ae:	88 0f       	add	r24, r24
    48b0:	41 e0       	ldi	r20, 0x01	; 1
    48b2:	be 01       	movw	r22, r28
    48b4:	64 5f       	subi	r22, 0xF4	; 244
    48b6:	7f 4f       	sbci	r23, 0xFF	; 255
    48b8:	84 5d       	subi	r24, 0xD4	; 212
    48ba:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_Z16si5351_read_bulkhPhh>
    48be:	81 11       	cpse	r24, r1
    48c0:	48 c0       	rjmp	.+144    	; 0x4952 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		reg_val = data[0];
    48c2:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    48c4:	98 2f       	mov	r25, r24
    48c6:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    48c8:	88 89       	ldd	r24, Y+16	; 0x10
    48ca:	83 70       	andi	r24, 0x03	; 3
    48cc:	89 2b       	or	r24, r25
    48ce:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    48d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    48d2:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    48d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    48d6:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    48d8:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    48da:	8c 89       	ldd	r24, Y+20	; 0x14
    48dc:	8f 70       	andi	r24, 0x0F	; 15
    48de:	20 e1       	ldi	r18, 0x10	; 16
    48e0:	92 9f       	mul	r25, r18
    48e2:	80 0d       	add	r24, r0
    48e4:	11 24       	eor	r1, r1
    48e6:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    48e8:	8b 89       	ldd	r24, Y+19	; 0x13
    48ea:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    48ec:	8a 89       	ldd	r24, Y+18	; 0x12
    48ee:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    48f0:	81 e0       	ldi	r24, 0x01	; 1
    48f2:	f8 16       	cp	r15, r24
    48f4:	81 f0       	breq	.+32     	; 0x4916 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x9e>
    48f6:	f8 16       	cp	r15, r24
    48f8:	20 f0       	brcs	.+8      	; 0x4902 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    48fa:	22 e0       	ldi	r18, 0x02	; 2
    48fc:	f2 16       	cp	r15, r18
    48fe:	a9 f0       	breq	.+42     	; 0x492a <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xb2>
    4900:	1d c0       	rjmp	.+58     	; 0x493c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    4902:	48 e0       	ldi	r20, 0x08	; 8
    4904:	be 01       	movw	r22, r28
    4906:	6f 5f       	subi	r22, 0xFF	; 255
    4908:	7f 4f       	sbci	r23, 0xFF	; 255
    490a:	8a e2       	ldi	r24, 0x2A	; 42
    490c:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4910:	88 23       	and	r24, r24
    4912:	a1 f0       	breq	.+40     	; 0x493c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    4914:	1e c0       	rjmp	.+60     	; 0x4952 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    4916:	48 e0       	ldi	r20, 0x08	; 8
    4918:	be 01       	movw	r22, r28
    491a:	6f 5f       	subi	r22, 0xFF	; 255
    491c:	7f 4f       	sbci	r23, 0xFF	; 255
    491e:	82 e3       	ldi	r24, 0x32	; 50
    4920:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4924:	88 23       	and	r24, r24
    4926:	51 f0       	breq	.+20     	; 0x493c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    4928:	14 c0       	rjmp	.+40     	; 0x4952 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    492a:	48 e0       	ldi	r20, 0x08	; 8
    492c:	be 01       	movw	r22, r28
    492e:	6f 5f       	subi	r22, 0xFF	; 255
    4930:	7f 4f       	sbci	r23, 0xFF	; 255
    4932:	8a e3       	ldi	r24, 0x3A	; 58
    4934:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4938:	81 11       	cpse	r24, r1
    493a:	0b c0       	rjmp	.+22     	; 0x4952 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    493c:	6a 2d       	mov	r22, r10
    493e:	8f 2d       	mov	r24, r15
    4940:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <_Z16set_integer_mode12si5351_clockb>
    4944:	81 11       	cpse	r24, r1
    4946:	05 c0       	rjmp	.+10     	; 0x4952 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    4948:	4e a1       	ldd	r20, Y+38	; 0x26
    494a:	68 2d       	mov	r22, r8
    494c:	8f 2d       	mov	r24, r15
    494e:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <_Z6ms_div12si5351_clockhb>
		{
			return(true);
		}
		
		return(false);
	}
    4952:	69 96       	adiw	r28, 0x19	; 25
    4954:	cd bf       	out	0x3d, r28	; 61
    4956:	de bf       	out	0x3e, r29	; 62
    4958:	df 91       	pop	r29
    495a:	cf 91       	pop	r28
    495c:	1f 91       	pop	r17
    495e:	0f 91       	pop	r16
    4960:	ff 90       	pop	r15
    4962:	ef 90       	pop	r14
    4964:	df 90       	pop	r13
    4966:	cf 90       	pop	r12
    4968:	af 90       	pop	r10
    496a:	8f 90       	pop	r8
    496c:	08 95       	ret

0000496e <si5351_set_freq>:
 *
 * Returns true on failure
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
    496e:	2f 92       	push	r2
    4970:	3f 92       	push	r3
    4972:	4f 92       	push	r4
    4974:	5f 92       	push	r5
    4976:	6f 92       	push	r6
    4978:	7f 92       	push	r7
    497a:	8f 92       	push	r8
    497c:	9f 92       	push	r9
    497e:	af 92       	push	r10
    4980:	bf 92       	push	r11
    4982:	cf 92       	push	r12
    4984:	df 92       	push	r13
    4986:	ef 92       	push	r14
    4988:	ff 92       	push	r15
    498a:	0f 93       	push	r16
    498c:	1f 93       	push	r17
    498e:	cf 93       	push	r28
    4990:	df 93       	push	r29
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
    4996:	60 97       	sbiw	r28, 0x10	; 16
    4998:	cd bf       	out	0x3d, r28	; 61
    499a:	de bf       	out	0x3e, r29	; 62
    499c:	6b 01       	movw	r12, r22
    499e:	7c 01       	movw	r14, r24
    49a0:	b4 2e       	mov	r11, r20
    49a2:	72 2e       	mov	r7, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		bool int_mode = false;
    49a4:	1d 86       	std	Y+13, r1	; 0x0d
		bool div_by_4 = false;
    49a6:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    49a8:	10 91 11 48 	lds	r17, 0x4811	; 0x804811 <g_si5351_initialized>
    49ac:	11 23       	and	r17, r17
    49ae:	09 f4       	brne	.+2      	; 0x49b2 <si5351_set_freq+0x44>
    49b0:	1e c1       	rjmp	.+572    	; 0x4bee <si5351_set_freq+0x280>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    49b2:	80 e4       	ldi	r24, 0x40	; 64
    49b4:	c8 16       	cp	r12, r24
    49b6:	82 e4       	ldi	r24, 0x42	; 66
    49b8:	d8 06       	cpc	r13, r24
    49ba:	8f e0       	ldi	r24, 0x0F	; 15
    49bc:	e8 06       	cpc	r14, r24
    49be:	f1 04       	cpc	r15, r1
    49c0:	70 f0       	brcs	.+28     	; 0x49de <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    49c2:	c7 01       	movw	r24, r14
    49c4:	b6 01       	movw	r22, r12
    49c6:	24 e6       	ldi	r18, 0x64	; 100
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	40 e0       	ldi	r20, 0x00	; 0
    49cc:	50 e0       	ldi	r21, 0x00	; 0
    49ce:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
				freq_Fout *= 100;
    49d2:	a4 e6       	ldi	r26, 0x64	; 100
    49d4:	b0 e0       	ldi	r27, 0x00	; 0
    49d6:	0e 94 04 2c 	call	0x5808	; 0x5808 <__muluhisi3>
    49da:	6b 01       	movw	r12, r22
    49dc:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	b8 16       	cp	r11, r24
    49e2:	c9 f0       	breq	.+50     	; 0x4a16 <si5351_set_freq+0xa8>
    49e4:	b8 16       	cp	r11, r24
    49e6:	20 f0       	brcs	.+8      	; 0x49f0 <si5351_set_freq+0x82>
    49e8:	82 e0       	ldi	r24, 0x02	; 2
    49ea:	b8 16       	cp	r11, r24
    49ec:	b1 f1       	breq	.+108    	; 0x4a5a <si5351_set_freq+0xec>
    49ee:	08 c1       	rjmp	.+528    	; 0x4c00 <si5351_set_freq+0x292>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    49f0:	80 91 1e 48 	lds	r24, 0x481E	; 0x80481e <_ZL17enabledClocksMask>
    49f4:	81 60       	ori	r24, 0x01	; 1
    49f6:	80 93 1e 48 	sts	0x481E, r24	; 0x80481e <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    49fa:	c0 92 12 48 	sts	0x4812, r12	; 0x804812 <_ZL9clock_out>
    49fe:	d0 92 13 48 	sts	0x4813, r13	; 0x804813 <_ZL9clock_out+0x1>
    4a02:	e0 92 14 48 	sts	0x4814, r14	; 0x804814 <_ZL9clock_out+0x2>
    4a06:	f0 92 15 48 	sts	0x4815, r15	; 0x804815 <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    4a0a:	68 94       	set
    4a0c:	66 24       	eor	r6, r6
    4a0e:	64 f8       	bld	r6, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    4a10:	99 24       	eor	r9, r9
    4a12:	93 94       	inc	r9
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    4a14:	43 c0       	rjmp	.+134    	; 0x4a9c <si5351_set_freq+0x12e>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    4a16:	80 91 1e 48 	lds	r24, 0x481E	; 0x80481e <_ZL17enabledClocksMask>
    4a1a:	82 60       	ori	r24, 0x02	; 2
    4a1c:	80 93 1e 48 	sts	0x481E, r24	; 0x80481e <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    4a20:	80 95       	com	r24
    4a22:	8a 6f       	ori	r24, 0xFA	; 250
    4a24:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    4a26:	41 e0       	ldi	r20, 0x01	; 1
    4a28:	be 01       	movw	r22, r28
    4a2a:	61 5f       	subi	r22, 0xF1	; 241
    4a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a2e:	83 e0       	ldi	r24, 0x03	; 3
    4a30:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4a34:	18 2f       	mov	r17, r24
    4a36:	81 11       	cpse	r24, r1
    4a38:	e3 c0       	rjmp	.+454    	; 0x4c00 <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    4a3a:	c0 92 16 48 	sts	0x4816, r12	; 0x804816 <_ZL9clock_out+0x4>
    4a3e:	d0 92 17 48 	sts	0x4817, r13	; 0x804817 <_ZL9clock_out+0x5>
    4a42:	e0 92 18 48 	sts	0x4818, r14	; 0x804818 <_ZL9clock_out+0x6>
    4a46:	f0 92 19 48 	sts	0x4819, r15	; 0x804819 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    4a4a:	0f 2e       	mov	r0, r31
    4a4c:	f1 e1       	ldi	r31, 0x11	; 17
    4a4e:	6f 2e       	mov	r6, r31
    4a50:	f0 2d       	mov	r31, r0
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    4a52:	68 94       	set
    4a54:	99 24       	eor	r9, r9
    4a56:	91 f8       	bld	r9, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    4a58:	21 c0       	rjmp	.+66     	; 0x4a9c <si5351_set_freq+0x12e>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    4a5a:	80 91 1e 48 	lds	r24, 0x481E	; 0x80481e <_ZL17enabledClocksMask>
    4a5e:	84 60       	ori	r24, 0x04	; 4
    4a60:	80 93 1e 48 	sts	0x481E, r24	; 0x80481e <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    4a64:	80 95       	com	r24
    4a66:	8c 6f       	ori	r24, 0xFC	; 252
    4a68:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    4a6a:	41 e0       	ldi	r20, 0x01	; 1
    4a6c:	be 01       	movw	r22, r28
    4a6e:	61 5f       	subi	r22, 0xF1	; 241
    4a70:	7f 4f       	sbci	r23, 0xFF	; 255
    4a72:	83 e0       	ldi	r24, 0x03	; 3
    4a74:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4a78:	18 2f       	mov	r17, r24
    4a7a:	81 11       	cpse	r24, r1
    4a7c:	c1 c0       	rjmp	.+386    	; 0x4c00 <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    4a7e:	c0 92 1a 48 	sts	0x481A, r12	; 0x80481a <_ZL9clock_out+0x8>
    4a82:	d0 92 1b 48 	sts	0x481B, r13	; 0x80481b <_ZL9clock_out+0x9>
    4a86:	e0 92 1c 48 	sts	0x481C, r14	; 0x80481c <_ZL9clock_out+0xa>
    4a8a:	f0 92 1d 48 	sts	0x481D, r15	; 0x80481d <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    4a8e:	0f 2e       	mov	r0, r31
    4a90:	f2 e1       	ldi	r31, 0x12	; 18
    4a92:	6f 2e       	mov	r6, r31
    4a94:	f0 2d       	mov	r31, r0
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    4a96:	68 94       	set
    4a98:	99 24       	eor	r9, r9
    4a9a:	91 f8       	bld	r9, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    4a9c:	81 e0       	ldi	r24, 0x01	; 1
    4a9e:	98 16       	cp	r9, r24
    4aa0:	61 f0       	breq	.+24     	; 0x4aba <si5351_set_freq+0x14c>
    4aa2:	80 91 1f 48 	lds	r24, 0x481F	; 0x80481f <_ZL8freqVCOB>
    4aa6:	90 91 20 48 	lds	r25, 0x4820	; 0x804820 <_ZL8freqVCOB+0x1>
    4aaa:	a0 91 21 48 	lds	r26, 0x4821	; 0x804821 <_ZL8freqVCOB+0x2>
    4aae:	b0 91 22 48 	lds	r27, 0x4822	; 0x804822 <_ZL8freqVCOB+0x3>
    4ab2:	89 2b       	or	r24, r25
    4ab4:	8a 2b       	or	r24, r26
    4ab6:	8b 2b       	or	r24, r27
    4ab8:	81 f4       	brne	.+32     	; 0x4ada <si5351_set_freq+0x16c>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    4aba:	8e 01       	movw	r16, r28
    4abc:	02 5f       	subi	r16, 0xF2	; 242
    4abe:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac0:	9e 01       	movw	r18, r28
    4ac2:	23 5f       	subi	r18, 0xF3	; 243
    4ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ac6:	ae 01       	movw	r20, r28
    4ac8:	4f 5f       	subi	r20, 0xFF	; 255
    4aca:	5f 4f       	sbci	r21, 0xFF	; 255
    4acc:	c7 01       	movw	r24, r14
    4ace:	b6 01       	movw	r22, r12
    4ad0:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    4ad4:	1b 01       	movw	r2, r22
    4ad6:	2c 01       	movw	r4, r24
    4ad8:	10 c0       	rjmp	.+32     	; 0x4afa <si5351_set_freq+0x18c>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    4ada:	8e 01       	movw	r16, r28
    4adc:	02 5f       	subi	r16, 0xF2	; 242
    4ade:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae0:	9e 01       	movw	r18, r28
    4ae2:	23 5f       	subi	r18, 0xF3	; 243
    4ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae6:	ae 01       	movw	r20, r28
    4ae8:	4f 5f       	subi	r20, 0xFF	; 255
    4aea:	5f 4f       	sbci	r21, 0xFF	; 255
    4aec:	c7 01       	movw	r24, r14
    4aee:	b6 01       	movw	r22, r12
    4af0:	0e 94 cc 20 	call	0x4198	; 0x4198 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    4af4:	21 2c       	mov	r2, r1
    4af6:	31 2c       	mov	r3, r1
    4af8:	21 01       	movw	r4, r2
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    4afa:	69 2d       	mov	r22, r9
    4afc:	8b 2d       	mov	r24, r11
    4afe:	0e 94 a7 23 	call	0x474e	; 0x474e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    4b02:	18 2f       	mov	r17, r24
    4b04:	81 11       	cpse	r24, r1
    4b06:	7c c0       	rjmp	.+248    	; 0x4c00 <si5351_set_freq+0x292>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    4b08:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b0a:	ad 84       	ldd	r10, Y+13	; 0x0d
    4b0c:	8f 93       	push	r24
    4b0e:	81 2c       	mov	r8, r1
    4b10:	c9 80       	ldd	r12, Y+1	; 0x01
    4b12:	da 80       	ldd	r13, Y+2	; 0x02
    4b14:	eb 80       	ldd	r14, Y+3	; 0x03
    4b16:	fc 80       	ldd	r15, Y+4	; 0x04
    4b18:	0d 81       	ldd	r16, Y+5	; 0x05
    4b1a:	1e 81       	ldd	r17, Y+6	; 0x06
    4b1c:	2f 81       	ldd	r18, Y+7	; 0x07
    4b1e:	38 85       	ldd	r19, Y+8	; 0x08
    4b20:	49 85       	ldd	r20, Y+9	; 0x09
    4b22:	5a 85       	ldd	r21, Y+10	; 0x0a
    4b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b28:	8b 2d       	mov	r24, r11
    4b2a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    4b2e:	18 2f       	mov	r17, r24
    4b30:	0f 90       	pop	r0
    4b32:	81 11       	cpse	r24, r1
    4b34:	65 c0       	rjmp	.+202    	; 0x4c00 <si5351_set_freq+0x292>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    4b36:	21 14       	cp	r2, r1
    4b38:	31 04       	cpc	r3, r1
    4b3a:	41 04       	cpc	r4, r1
    4b3c:	51 04       	cpc	r5, r1
    4b3e:	29 f0       	breq	.+10     	; 0x4b4a <si5351_set_freq+0x1dc>
			{
				set_pll(freq_VCO, target_pll);
    4b40:	49 2d       	mov	r20, r9
    4b42:	c2 01       	movw	r24, r4
    4b44:	b1 01       	movw	r22, r2
    4b46:	0e 94 14 22 	call	0x4428	; 0x4428 <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    4b4a:	77 20       	and	r7, r7
    4b4c:	69 f0       	breq	.+26     	; 0x4b68 <si5351_set_freq+0x1fa>
		{
 			data[0] = enabledClocksMask;
    4b4e:	80 91 1e 48 	lds	r24, 0x481E	; 0x80481e <_ZL17enabledClocksMask>
    4b52:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    4b54:	41 e0       	ldi	r20, 0x01	; 1
    4b56:	be 01       	movw	r22, r28
    4b58:	61 5f       	subi	r22, 0xF1	; 241
    4b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b5c:	83 e0       	ldi	r24, 0x03	; 3
    4b5e:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4b62:	88 23       	and	r24, r24
    4b64:	71 f0       	breq	.+28     	; 0x4b82 <si5351_set_freq+0x214>
    4b66:	45 c0       	rjmp	.+138    	; 0x4bf2 <si5351_set_freq+0x284>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    4b68:	80 91 1e 48 	lds	r24, 0x481E	; 0x80481e <_ZL17enabledClocksMask>
    4b6c:	80 95       	com	r24
    4b6e:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    4b70:	41 e0       	ldi	r20, 0x01	; 1
    4b72:	be 01       	movw	r22, r28
    4b74:	61 5f       	subi	r22, 0xF1	; 241
    4b76:	7f 4f       	sbci	r23, 0xFF	; 255
    4b78:	83 e0       	ldi	r24, 0x03	; 3
    4b7a:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4b7e:	81 11       	cpse	r24, r1
    4b80:	3a c0       	rjmp	.+116    	; 0x4bf6 <si5351_set_freq+0x288>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	98 12       	cpse	r9, r24
    4b86:	0b c0       	rjmp	.+22     	; 0x4b9e <si5351_set_freq+0x230>
		{
 			data[0] = 0x4C;
    4b88:	8c e4       	ldi	r24, 0x4C	; 76
    4b8a:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    4b8c:	41 e0       	ldi	r20, 0x01	; 1
    4b8e:	be 01       	movw	r22, r28
    4b90:	61 5f       	subi	r22, 0xF1	; 241
    4b92:	7f 4f       	sbci	r23, 0xFF	; 255
    4b94:	86 2d       	mov	r24, r6
    4b96:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4b9a:	18 2f       	mov	r17, r24
    4b9c:	31 c0       	rjmp	.+98     	; 0x4c00 <si5351_set_freq+0x292>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    4b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ba0:	88 23       	and	r24, r24
    4ba2:	61 f0       	breq	.+24     	; 0x4bbc <si5351_set_freq+0x24e>
			{
 				data[0] = 0x6C;
    4ba4:	8c e6       	ldi	r24, 0x6C	; 108
    4ba6:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    4ba8:	41 e0       	ldi	r20, 0x01	; 1
    4baa:	be 01       	movw	r22, r28
    4bac:	61 5f       	subi	r22, 0xF1	; 241
    4bae:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb0:	86 2d       	mov	r24, r6
    4bb2:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4bb6:	88 23       	and	r24, r24
    4bb8:	61 f0       	breq	.+24     	; 0x4bd2 <si5351_set_freq+0x264>
    4bba:	1f c0       	rjmp	.+62     	; 0x4bfa <si5351_set_freq+0x28c>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    4bbc:	8c e2       	ldi	r24, 0x2C	; 44
    4bbe:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    4bc0:	41 e0       	ldi	r20, 0x01	; 1
    4bc2:	be 01       	movw	r22, r28
    4bc4:	61 5f       	subi	r22, 0xF1	; 241
    4bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc8:	86 2d       	mov	r24, r6
    4bca:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_Z17si5351_write_bulkhPhh>
    4bce:	81 11       	cpse	r24, r1
    4bd0:	16 c0       	rjmp	.+44     	; 0x4bfe <si5351_set_freq+0x290>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    4bd2:	21 14       	cp	r2, r1
    4bd4:	31 04       	cpc	r3, r1
    4bd6:	41 04       	cpc	r4, r1
    4bd8:	51 04       	cpc	r5, r1
    4bda:	91 f0       	breq	.+36     	; 0x4c00 <si5351_set_freq+0x292>
			{
				freqVCOB = freq_VCO;
    4bdc:	20 92 1f 48 	sts	0x481F, r2	; 0x80481f <_ZL8freqVCOB>
    4be0:	30 92 20 48 	sts	0x4820, r3	; 0x804820 <_ZL8freqVCOB+0x1>
    4be4:	40 92 21 48 	sts	0x4821, r4	; 0x804821 <_ZL8freqVCOB+0x2>
    4be8:	50 92 22 48 	sts	0x4822, r5	; 0x804822 <_ZL8freqVCOB+0x3>
    4bec:	09 c0       	rjmp	.+18     	; 0x4c00 <si5351_set_freq+0x292>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    4bee:	11 e0       	ldi	r17, 0x01	; 1
    4bf0:	07 c0       	rjmp	.+14     	; 0x4c00 <si5351_set_freq+0x292>
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    4bf2:	18 2f       	mov	r17, r24
    4bf4:	05 c0       	rjmp	.+10     	; 0x4c00 <si5351_set_freq+0x292>
		else
		{
 			data[0] = ~enabledClocksMask;
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
			{
				return true;
    4bf6:	18 2f       	mov	r17, r24
    4bf8:	03 c0       	rjmp	.+6      	; 0x4c00 <si5351_set_freq+0x292>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    4bfa:	18 2f       	mov	r17, r24
    4bfc:	01 c0       	rjmp	.+2      	; 0x4c00 <si5351_set_freq+0x292>
			else
			{
 				data[0] = 0x2C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    4bfe:	18 2f       	mov	r17, r24
				freqVCOB = freq_VCO;
			}
		}

		return(false);
	}
    4c00:	81 2f       	mov	r24, r17
    4c02:	60 96       	adiw	r28, 0x10	; 16
    4c04:	cd bf       	out	0x3d, r28	; 61
    4c06:	de bf       	out	0x3e, r29	; 62
    4c08:	df 91       	pop	r29
    4c0a:	cf 91       	pop	r28
    4c0c:	1f 91       	pop	r17
    4c0e:	0f 91       	pop	r16
    4c10:	ff 90       	pop	r15
    4c12:	ef 90       	pop	r14
    4c14:	df 90       	pop	r13
    4c16:	cf 90       	pop	r12
    4c18:	bf 90       	pop	r11
    4c1a:	af 90       	pop	r10
    4c1c:	9f 90       	pop	r9
    4c1e:	8f 90       	pop	r8
    4c20:	7f 90       	pop	r7
    4c22:	6f 90       	pop	r6
    4c24:	5f 90       	pop	r5
    4c26:	4f 90       	pop	r4
    4c28:	3f 90       	pop	r3
    4c2a:	2f 90       	pop	r2
    4c2c:	08 95       	ret

00004c2e <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	08 95       	ret

00004c32 <__vector_9>:

uint8_t g_fine_freq_adj = 0;
uint8_t g_x;

ISR(TCA0_CMP0_vect)
{
    4c32:	1f 92       	push	r1
    4c34:	0f 92       	push	r0
    4c36:	0f b6       	in	r0, 0x3f	; 63
    4c38:	0f 92       	push	r0
    4c3a:	11 24       	eor	r1, r1
    4c3c:	8f 93       	push	r24
	#define div 67
	
	static uint8_t cnt = div;
	
	if(!cnt) 
    4c3e:	80 91 2c 40 	lds	r24, 0x402C	; 0x80402c <_ZZ10__vector_9E3cnt>
    4c42:	81 11       	cpse	r24, r1
    4c44:	12 c0       	rjmp	.+36     	; 0x4c6a <__vector_9+0x38>
	{
		for(g_x=g_fine_freq_adj; g_x; g_x--)
    4c46:	80 91 24 48 	lds	r24, 0x4824	; 0x804824 <g_fine_freq_adj>
    4c4a:	80 93 23 48 	sts	0x4823, r24	; 0x804823 <g_x>
    4c4e:	80 91 23 48 	lds	r24, 0x4823	; 0x804823 <g_x>
    4c52:	88 23       	and	r24, r24
    4c54:	21 f0       	breq	.+8      	; 0x4c5e <__vector_9+0x2c>
    4c56:	81 50       	subi	r24, 0x01	; 1
    4c58:	80 93 23 48 	sts	0x4823, r24	; 0x804823 <g_x>
    4c5c:	f8 cf       	rjmp	.-16     	; 0x4c4e <__vector_9+0x1c>
 * \param[in] mask  Bit mask where 1 means toggle pin level to the corresponding
 *                  pin
 */
static inline void PORTA_toggle_port_level(const uint8_t mask)
{
	PORTA.OUTTGL = mask;
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <__TEXT_REGION_LENGTH__+0x7e0407>
// 			default: // 3.57 kHz
// 			break;
// 		}
		
		PORTA_toggle_port_level(0x01);
		cnt = div;
    4c64:	83 e4       	ldi	r24, 0x43	; 67
    4c66:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <_ZZ10__vector_9E3cnt>
	}
	
	cnt--;
    4c6a:	80 91 2c 40 	lds	r24, 0x402C	; 0x80402c <_ZZ10__vector_9E3cnt>
    4c6e:	81 50       	subi	r24, 0x01	; 1
    4c70:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <_ZZ10__vector_9E3cnt>
	
// 	PORTA_toggle_port_level(0x01);
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
    4c74:	80 e1       	ldi	r24, 0x10	; 16
    4c76:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
}
    4c7a:	8f 91       	pop	r24
    4c7c:	0f 90       	pop	r0
    4c7e:	0f be       	out	0x3f, r0	; 63
    4c80:	0f 90       	pop	r0
    4c82:	1f 90       	pop	r1
    4c84:	18 95       	reti

00004c86 <__vector_10>:

ISR(TCA0_CMP1_vect)
{
    4c86:	1f 92       	push	r1
    4c88:	0f 92       	push	r0
    4c8a:	0f b6       	in	r0, 0x3f	; 63
    4c8c:	0f 92       	push	r0
    4c8e:	11 24       	eor	r1, r1
    4c90:	8f 93       	push	r24
// 	if (TCA0_CMP1_isr_cb != NULL)
// 	(*TCA0_CMP1_isr_cb)();
	
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP1_bm;
    4c92:	80 e2       	ldi	r24, 0x20	; 32
    4c94:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
}
    4c98:	8f 91       	pop	r24
    4c9a:	0f 90       	pop	r0
    4c9c:	0f be       	out	0x3f, r0	; 63
    4c9e:	0f 90       	pop	r0
    4ca0:	1f 90       	pop	r1
    4ca2:	18 95       	reti

00004ca4 <__vector_11>:

ISR(TCA0_CMP2_vect)
{
    4ca4:	1f 92       	push	r1
    4ca6:	0f 92       	push	r0
    4ca8:	0f b6       	in	r0, 0x3f	; 63
    4caa:	0f 92       	push	r0
    4cac:	11 24       	eor	r1, r1
    4cae:	8f 93       	push	r24
// 	if (TCA0_CMP2_isr_cb != NULL)
// 	(*TCA0_CMP2_isr_cb)();
	
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP2_bm;
    4cb0:	80 e4       	ldi	r24, 0x40	; 64
    4cb2:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
}
    4cb6:	8f 91       	pop	r24
    4cb8:	0f 90       	pop	r0
    4cba:	0f be       	out	0x3f, r0	; 63
    4cbc:	0f 90       	pop	r0
    4cbe:	1f 90       	pop	r1
    4cc0:	18 95       	reti

00004cc2 <__vector_7>:

ISR(TCA0_OVF_vect)
{
    4cc2:	1f 92       	push	r1
    4cc4:	0f 92       	push	r0
    4cc6:	0f b6       	in	r0, 0x3f	; 63
    4cc8:	0f 92       	push	r0
    4cca:	11 24       	eor	r1, r1
    4ccc:	8f 93       	push	r24
// 	if (TCA0_OVF_isr_cb != NULL)
// 	(*TCA0_OVF_isr_cb)();
	
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
    4cce:	81 e0       	ldi	r24, 0x01	; 1
    4cd0:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
}
    4cd4:	8f 91       	pop	r24
    4cd6:	0f 90       	pop	r0
    4cd8:	0f be       	out	0x3f, r0	; 63
    4cda:	0f 90       	pop	r0
    4cdc:	1f 90       	pop	r1
    4cde:	18 95       	reti

00004ce0 <TIMERA_init>:


int8_t TIMERA_init()
{
    //Count
    TCA0.SINGLE.CNT = 0x00;
    4ce0:	e0 e0       	ldi	r30, 0x00	; 0
    4ce2:	fa e0       	ldi	r31, 0x0A	; 10
    4ce4:	10 a2       	std	Z+32, r1	; 0x20
    4ce6:	11 a2       	std	Z+33, r1	; 0x21

    //CMD NONE; LUPD disabled; DIR UP;
    TCA0.SINGLE.CTRLESET = 0x00;
    4ce8:	15 82       	std	Z+5, r1	; 0x05

    //CMP2BV disabled; CMP1BV disabled; CMP0BV disabled; PERBV disabled;
    TCA0.SINGLE.CTRLFCLR = 0x00;
    4cea:	16 82       	std	Z+6, r1	; 0x06

    //CMP2BV disabled; CMP1BV disabled; CMP0BV disabled; PERBV disabled;
    TCA0.SINGLE.CTRLFSET = 0x00;
    4cec:	17 82       	std	Z+7, r1	; 0x07

    //DBGRUN disabled;
    TCA0.SINGLE.DBGCTRL = 0x00;
    4cee:	16 86       	std	Z+14, r1	; 0x0e

    //Temporary data for 16-bit Access
    TCA0.SINGLE.TEMP = 0x00;
    4cf0:	17 86       	std	Z+15, r1	; 0x0f
    TCA0.SINGLE.CMP0 = 0x0000; // Sets frequency on WOn
	// WGMode = FRQ; 
	TCA0.SINGLE.CTRLB = 0x11;
#else
    //Period
    TCA0.SINGLE.PER = 0x0000;
    4cf2:	16 a2       	std	Z+38, r1	; 0x26
    4cf4:	17 a2       	std	Z+39, r1	; 0x27
    //CMP2 disabled; CMP1 disabled; CMP0 enabled; OVF disabled;
    TCA0.SINGLE.INTCTRL = 0x10;
    4cf6:	80 e1       	ldi	r24, 0x10	; 16
    4cf8:	82 87       	std	Z+10, r24	; 0x0a
	//CMP2EN disabled; CMP1EN disabled; CMP0EN disabled; ALUPD disabled; WGMODE NORMAL; 
	TCA0.SINGLE.CTRLB = 0x0;
    4cfa:	11 82       	std	Z+1, r1	; 0x01
    //Clear all interrupt flags
    TCA0.SINGLE.INTFLAGS = 0x71;
    4cfc:	81 e7       	ldi	r24, 0x71	; 113
    4cfe:	83 87       	std	Z+11, r24	; 0x0b
	CPUINT.LVL1VEC = 9;
    4d00:	89 e0       	ldi	r24, 0x09	; 9
    4d02:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7e0113>
#endif
	
    //CMP2OV disabled; CMP1OV disabled; CMP0OV disabled;
    TCA0.SINGLE.CTRLC = 0x00;
    4d06:	12 82       	std	Z+2, r1	; 0x02

    //SPLITM disabled;
    TCA0.SINGLE.CTRLD = 0x00;
    4d08:	13 82       	std	Z+3, r1	; 0x03

    //CMD NONE; LUPD disabled; DIR disabled;
    TCA0.SINGLE.CTRLECLR = 0x00;
    4d0a:	14 82       	std	Z+4, r1	; 0x04
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    4d0c:	80 b1       	in	r24, 0x00	; 0
    4d0e:	81 60       	ori	r24, 0x01	; 1
    4d10:	80 b9       	out	0x00, r24	; 0
	
	// PD0 is WO0 output
	PORTA_set_pin_dir(0, PORT_DIR_OUT);

    return 0;
}
    4d12:	80 e0       	ldi	r24, 0x00	; 0
    4d14:	08 95       	ret

00004d16 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    4d16:	1f 92       	push	r1
    4d18:	0f 92       	push	r0
    4d1a:	0f b6       	in	r0, 0x3f	; 63
    4d1c:	0f 92       	push	r0
    4d1e:	11 24       	eor	r1, r1
    4d20:	8f 93       	push	r24
    4d22:	9f 93       	push	r25
    4d24:	af 93       	push	r26
    4d26:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    4d28:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    4d2c:	80 ff       	sbrs	r24, 0
    4d2e:	1d c0       	rjmp	.+58     	; 0x4d6a <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    4d30:	80 91 25 48 	lds	r24, 0x4825	; 0x804825 <_ZL12g_ms_counter>
    4d34:	90 91 26 48 	lds	r25, 0x4826	; 0x804826 <_ZL12g_ms_counter+0x1>
    4d38:	a0 91 27 48 	lds	r26, 0x4827	; 0x804827 <_ZL12g_ms_counter+0x2>
    4d3c:	b0 91 28 48 	lds	r27, 0x4828	; 0x804828 <_ZL12g_ms_counter+0x3>
    4d40:	00 97       	sbiw	r24, 0x00	; 0
    4d42:	a1 05       	cpc	r26, r1
    4d44:	b1 05       	cpc	r27, r1
    4d46:	61 f0       	breq	.+24     	; 0x4d60 <__vector_13+0x4a>
		{
			g_ms_counter--;	
    4d48:	01 97       	sbiw	r24, 0x01	; 1
    4d4a:	a1 09       	sbc	r26, r1
    4d4c:	b1 09       	sbc	r27, r1
    4d4e:	80 93 25 48 	sts	0x4825, r24	; 0x804825 <_ZL12g_ms_counter>
    4d52:	90 93 26 48 	sts	0x4826, r25	; 0x804826 <_ZL12g_ms_counter+0x1>
    4d56:	a0 93 27 48 	sts	0x4827, r26	; 0x804827 <_ZL12g_ms_counter+0x2>
    4d5a:	b0 93 28 48 	sts	0x4828, r27	; 0x804828 <_ZL12g_ms_counter+0x3>
    4d5e:	02 c0       	rjmp	.+4      	; 0x4d64 <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    4d60:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    4d64:	81 e0       	ldi	r24, 0x01	; 1
    4d66:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    4d6a:	bf 91       	pop	r27
    4d6c:	af 91       	pop	r26
    4d6e:	9f 91       	pop	r25
    4d70:	8f 91       	pop	r24
    4d72:	0f 90       	pop	r0
    4d74:	0f be       	out	0x3f, r0	; 63
    4d76:	0f 90       	pop	r0
    4d78:	1f 90       	pop	r1
    4d7a:	18 95       	reti

00004d7c <_Z14txSetFrequencyPmb>:
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
	}
    4d7c:	0f 93       	push	r16
    4d7e:	1f 93       	push	r17
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	fc 01       	movw	r30, r24
    4d86:	46 2f       	mov	r20, r22
    4d88:	60 81       	ld	r22, Z
    4d8a:	71 81       	ldd	r23, Z+1	; 0x01
    4d8c:	82 81       	ldd	r24, Z+2	; 0x02
    4d8e:	93 81       	ldd	r25, Z+3	; 0x03
    4d90:	8b 01       	movw	r16, r22
    4d92:	9c 01       	movw	r18, r24
    4d94:	01 5e       	subi	r16, 0xE1	; 225
    4d96:	17 46       	sbci	r17, 0x67	; 103
    4d98:	25 43       	sbci	r18, 0x35	; 53
    4d9a:	31 09       	sbc	r19, r1
    4d9c:	0f 31       	cpi	r16, 0x1F	; 31
    4d9e:	11 4a       	sbci	r17, 0xA1	; 161
    4da0:	27 40       	sbci	r18, 0x07	; 7
    4da2:	31 05       	cpc	r19, r1
    4da4:	a8 f4       	brcc	.+42     	; 0x4dd0 <_Z14txSetFrequencyPmb+0x54>
    4da6:	24 2f       	mov	r18, r20
    4da8:	ef 01       	movw	r28, r30
    4daa:	41 e0       	ldi	r20, 0x01	; 1
    4dac:	0e 94 b7 24 	call	0x496e	; 0x496e <si5351_set_freq>
    4db0:	81 11       	cpse	r24, r1
    4db2:	10 c0       	rjmp	.+32     	; 0x4dd4 <_Z14txSetFrequencyPmb+0x58>
    4db4:	88 81       	ld	r24, Y
    4db6:	99 81       	ldd	r25, Y+1	; 0x01
    4db8:	aa 81       	ldd	r26, Y+2	; 0x02
    4dba:	bb 81       	ldd	r27, Y+3	; 0x03
    4dbc:	80 93 2d 40 	sts	0x402D, r24	; 0x80402d <g_80m_frequency>
    4dc0:	90 93 2e 40 	sts	0x402E, r25	; 0x80402e <g_80m_frequency+0x1>
    4dc4:	a0 93 2f 40 	sts	0x402F, r26	; 0x80402f <g_80m_frequency+0x2>
    4dc8:	b0 93 30 40 	sts	0x4030, r27	; 0x804030 <g_80m_frequency+0x3>
    4dcc:	80 e0       	ldi	r24, 0x00	; 0
    4dce:	03 c0       	rjmp	.+6      	; 0x4dd6 <_Z14txSetFrequencyPmb+0x5a>
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	01 c0       	rjmp	.+2      	; 0x4dd6 <_Z14txSetFrequencyPmb+0x5a>
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	df 91       	pop	r29
    4dd8:	cf 91       	pop	r28
    4dda:	1f 91       	pop	r17
    4ddc:	0f 91       	pop	r16
    4dde:	08 95       	ret

00004de0 <_Z18powerToTransmitterb>:
    4de0:	0e 94 c4 12 	call	0x2588	; 0x2588 <_Z10fet_driverb>
    4de4:	80 e0       	ldi	r24, 0x00	; 0
    4de6:	08 95       	ret

00004de8 <_Z14keyTransmitterb>:
    4de8:	90 91 29 48 	lds	r25, 0x4829	; 0x804829 <_ZL16g_tx_initialized>
    4dec:	99 23       	and	r25, r25
    4dee:	c1 f0       	breq	.+48     	; 0x4e20 <_Z14keyTransmitterb+0x38>
    4df0:	88 23       	and	r24, r24
    4df2:	71 f0       	breq	.+28     	; 0x4e10 <_Z14keyTransmitterb+0x28>
    4df4:	80 91 2a 48 	lds	r24, 0x482A	; 0x80482a <_ZL19g_transmitter_keyed>
    4df8:	81 11       	cpse	r24, r1
    4dfa:	12 c0       	rjmp	.+36     	; 0x4e20 <_Z14keyTransmitterb+0x38>
    4dfc:	61 e0       	ldi	r22, 0x01	; 1
    4dfe:	81 e0       	ldi	r24, 0x01	; 1
    4e00:	0e 94 2d 23 	call	0x465a	; 0x465a <si5351_clock_enable>
    4e04:	81 11       	cpse	r24, r1
    4e06:	0c c0       	rjmp	.+24     	; 0x4e20 <_Z14keyTransmitterb+0x38>
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	80 93 2a 48 	sts	0x482A, r24	; 0x80482a <_ZL19g_transmitter_keyed>
    4e0e:	08 95       	ret
    4e10:	60 e0       	ldi	r22, 0x00	; 0
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	0e 94 2d 23 	call	0x465a	; 0x465a <si5351_clock_enable>
    4e18:	81 11       	cpse	r24, r1
    4e1a:	02 c0       	rjmp	.+4      	; 0x4e20 <_Z14keyTransmitterb+0x38>
    4e1c:	10 92 2a 48 	sts	0x482A, r1	; 0x80482a <_ZL19g_transmitter_keyed>
    4e20:	08 95       	ret

00004e22 <_Z15txSetParametersPjPb>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, bool* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, bool* enableDriverPwr) */
	{
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
    4e26:	cd b7       	in	r28, 0x3d	; 61
    4e28:	de b7       	in	r29, 0x3e	; 62
    4e2a:	2b 97       	sbiw	r28, 0x0b	; 11
    4e2c:	cd bf       	out	0x3d, r28	; 61
    4e2e:	de bf       	out	0x3e, r29	; 62
    4e30:	88 87       	std	Y+8, r24	; 0x08
    4e32:	99 87       	std	Y+9, r25	; 0x09
    4e34:	6a 87       	std	Y+10, r22	; 0x0a
    4e36:	7b 87       	std	Y+11, r23	; 0x0b
		bool err = false;
    4e38:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    4e3a:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    4e3c:	1b 82       	std	Y+3, r1	; 0x03
    4e3e:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW != NULL)
    4e40:	88 85       	ldd	r24, Y+8	; 0x08
    4e42:	99 85       	ldd	r25, Y+9	; 0x09
    4e44:	89 2b       	or	r24, r25
    4e46:	09 f4       	brne	.+2      	; 0x4e4a <_Z15txSetParametersPjPb+0x28>
    4e48:	64 c0       	rjmp	.+200    	; 0x4f12 <_Z15txSetParametersPjPb+0xf0>
		{
			power = *power_mW;
    4e4a:	88 85       	ldd	r24, Y+8	; 0x08
    4e4c:	99 85       	ldd	r25, Y+9	; 0x09
    4e4e:	fc 01       	movw	r30, r24
    4e50:	80 81       	ld	r24, Z
    4e52:	91 81       	ldd	r25, Z+1	; 0x01
    4e54:	8b 83       	std	Y+3, r24	; 0x03
    4e56:	9c 83       	std	Y+4, r25	; 0x04

			if(power <= MAX_TX_POWER_80M_MW)
    4e58:	8b 81       	ldd	r24, Y+3	; 0x03
    4e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e5c:	89 38       	cpi	r24, 0x89	; 137
    4e5e:	93 41       	sbci	r25, 0x13	; 19
    4e60:	08 f0       	brcs	.+2      	; 0x4e64 <_Z15txSetParametersPjPb+0x42>
    4e62:	53 c0       	rjmp	.+166    	; 0x4f0a <_Z15txSetParametersPjPb+0xe8>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    4e64:	9e 01       	movw	r18, r28
    4e66:	29 5f       	subi	r18, 0xF9	; 249
    4e68:	3f 4f       	sbci	r19, 0xFF	; 255
    4e6a:	ae 01       	movw	r20, r28
    4e6c:	4a 5f       	subi	r20, 0xFA	; 250
    4e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e70:	be 01       	movw	r22, r28
    4e72:	6b 5f       	subi	r22, 0xFB	; 251
    4e74:	7f 4f       	sbci	r23, 0xFF	; 255
    4e76:	ce 01       	movw	r24, r28
    4e78:	03 96       	adiw	r24, 0x03	; 3
    4e7a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    4e7e:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    4e80:	81 e0       	ldi	r24, 0x01	; 1
    4e82:	9a 81       	ldd	r25, Y+2	; 0x02
    4e84:	9f 3c       	cpi	r25, 0xCF	; 207
    4e86:	09 f0       	breq	.+2      	; 0x4e8a <_Z15txSetParametersPjPb+0x68>
    4e88:	80 e0       	ldi	r24, 0x00	; 0
    4e8a:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    4e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e90:	21 e0       	ldi	r18, 0x01	; 1
    4e92:	89 2b       	or	r24, r25
    4e94:	09 f0       	breq	.+2      	; 0x4e98 <_Z15txSetParametersPjPb+0x76>
    4e96:	20 e0       	ldi	r18, 0x00	; 0
    4e98:	20 93 37 40 	sts	0x4037, r18	; 0x804037 <g_tx_power_is_zero>

				if(!err)
    4e9c:	99 81       	ldd	r25, Y+1	; 0x01
    4e9e:	81 e0       	ldi	r24, 0x01	; 1
    4ea0:	89 27       	eor	r24, r25
    4ea2:	88 23       	and	r24, r24
    4ea4:	51 f1       	breq	.+84     	; 0x4efa <_Z15txSetParametersPjPb+0xd8>
				{
					g_80m_power_level_mW = power;
    4ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    4eaa:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW>
    4eae:	90 93 32 40 	sts	0x4032, r25	; 0x804032 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    4eb2:	0e 94 ab 28 	call	0x5156	; 0x5156 <_Z18txIsAntennaForBandv>
    4eb6:	88 23       	and	r24, r24
    4eb8:	31 f0       	breq	.+12     	; 0x4ec6 <_Z15txSetParametersPjPb+0xa4>
					{
						DAC0_setVal(drainVoltageDAC);
    4eba:	8d 81       	ldd	r24, Y+5	; 0x05
    4ebc:	88 2f       	mov	r24, r24
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <_Z11DAC0_setValj>
    4ec4:	07 c0       	rjmp	.+14     	; 0x4ed4 <_Z15txSetParametersPjPb+0xb2>
					}
					else
					{
						g_tx_power_is_zero = true;
    4ec6:	81 e0       	ldi	r24, 0x01	; 1
    4ec8:	80 93 37 40 	sts	0x4037, r24	; 0x804037 <g_tx_power_is_zero>
						err = true;
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    4ed0:	86 ef       	ldi	r24, 0xF6	; 246
    4ed2:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || (drainVoltageDAC == 0))
    4ed4:	80 91 37 40 	lds	r24, 0x4037	; 0x804037 <g_tx_power_is_zero>
    4ed8:	88 23       	and	r24, r24
    4eda:	19 f4       	brne	.+6      	; 0x4ee2 <_Z15txSetParametersPjPb+0xc0>
    4edc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ede:	88 23       	and	r24, r24
    4ee0:	11 f4       	brne	.+4      	; 0x4ee6 <_Z15txSetParametersPjPb+0xc4>
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	01 c0       	rjmp	.+2      	; 0x4ee8 <_Z15txSetParametersPjPb+0xc6>
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	88 23       	and	r24, r24
    4eea:	21 f0       	breq	.+8      	; 0x4ef4 <_Z15txSetParametersPjPb+0xd2>
					{
						powerToTransmitter(OFF); /* Turn off FET driver */
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_Z18powerToTransmitterb>
    4ef2:	03 c0       	rjmp	.+6      	; 0x4efa <_Z15txSetParametersPjPb+0xd8>
					}
					else
					{
						powerToTransmitter(ON); /* Turn on FET driver */
    4ef4:	81 e0       	ldi	r24, 0x01	; 1
    4ef6:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_Z18powerToTransmitterb>
					}
				}

				*power_mW = power;
    4efa:	2b 81       	ldd	r18, Y+3	; 0x03
    4efc:	3c 81       	ldd	r19, Y+4	; 0x04
    4efe:	88 85       	ldd	r24, Y+8	; 0x08
    4f00:	99 85       	ldd	r25, Y+9	; 0x09
    4f02:	fc 01       	movw	r30, r24
    4f04:	20 83       	st	Z, r18
    4f06:	31 83       	std	Z+1, r19	; 0x01
    4f08:	04 c0       	rjmp	.+8      	; 0x4f12 <_Z15txSetParametersPjPb+0xf0>
			}
			else
			{
				err = true;
    4f0a:	81 e0       	ldi	r24, 0x01	; 1
    4f0c:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    4f0e:	85 ef       	ldi	r24, 0xF5	; 245
    4f10:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    4f12:	99 81       	ldd	r25, Y+1	; 0x01
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	89 27       	eor	r24, r25
    4f18:	88 23       	and	r24, r24
    4f1a:	51 f0       	breq	.+20     	; 0x4f30 <_Z15txSetParametersPjPb+0x10e>
		{
			if(enableDriverPwr != NULL)
    4f1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f20:	89 2b       	or	r24, r25
    4f22:	31 f0       	breq	.+12     	; 0x4f30 <_Z15txSetParametersPjPb+0x10e>
			{
				powerToTransmitter(*enableDriverPwr);
    4f24:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f26:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f28:	fc 01       	movw	r30, r24
    4f2a:	80 81       	ld	r24, Z
    4f2c:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_Z18powerToTransmitterb>
			}
		}

		return(code);
    4f30:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    4f32:	2b 96       	adiw	r28, 0x0b	; 11
    4f34:	cd bf       	out	0x3d, r28	; 61
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	df 91       	pop	r29
    4f3a:	cf 91       	pop	r28
    4f3c:	08 95       	ret

00004f3e <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    4f3e:	1f 93       	push	r17
    4f40:	cf 93       	push	r28
    4f42:	df 93       	push	r29
    4f44:	00 d0       	rcall	.+0      	; 0x4f46 <_Z16init_transmitterv+0x8>
    4f46:	cd b7       	in	r28, 0x3d	; 61
    4f48:	de b7       	in	r29, 0x3e	; 62
		EC code;
		bool err;
		
		DAC0_init();
    4f4a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_Z9DAC0_initv>

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    4f4e:	40 e0       	ldi	r20, 0x00	; 0
    4f50:	50 e0       	ldi	r21, 0x00	; 0
    4f52:	ba 01       	movw	r22, r20
    4f54:	80 e4       	ldi	r24, 0x40	; 64
    4f56:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <si5351_init>
    4f5a:	81 11       	cpse	r24, r1
    4f5c:	30 c0       	rjmp	.+96     	; 0x4fbe <_Z16init_transmitterv+0x80>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
		}

		if((code = txSetParameters(NULL, NULL)))
    4f5e:	60 e0       	ldi	r22, 0x00	; 0
    4f60:	70 e0       	ldi	r23, 0x00	; 0
    4f62:	80 e0       	ldi	r24, 0x00	; 0
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	0e 94 11 27 	call	0x4e22	; 0x4e22 <_Z15txSetParametersPjPb>
    4f6a:	81 11       	cpse	r24, r1
    4f6c:	2c c0       	rjmp	.+88     	; 0x4fc6 <_Z16init_transmitterv+0x88>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    4f6e:	63 e0       	ldi	r22, 0x03	; 3
    4f70:	81 e0       	ldi	r24, 0x01	; 1
    4f72:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <si5351_drive_strength>
    4f76:	81 11       	cpse	r24, r1
    4f78:	26 c0       	rjmp	.+76     	; 0x4fc6 <_Z16init_transmitterv+0x88>
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    4f7a:	60 e0       	ldi	r22, 0x00	; 0
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	0e 94 2d 23 	call	0x465a	; 0x465a <si5351_clock_enable>
    4f82:	18 2f       	mov	r17, r24
    4f84:	81 11       	cpse	r24, r1
    4f86:	1d c0       	rjmp	.+58     	; 0x4fc2 <_Z16init_transmitterv+0x84>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    4f88:	80 91 31 40 	lds	r24, 0x4031	; 0x804031 <g_80m_power_level_mW>
    4f8c:	90 91 32 40 	lds	r25, 0x4032	; 0x804032 <g_80m_power_level_mW+0x1>
    4f90:	89 83       	std	Y+1, r24	; 0x01
    4f92:	9a 83       	std	Y+2, r25	; 0x02
		
		err = txSetFrequency((Frequency_Hz*)&g_80m_frequency, true);
    4f94:	61 e0       	ldi	r22, 0x01	; 1
    4f96:	8d e2       	ldi	r24, 0x2D	; 45
    4f98:	90 e4       	ldi	r25, 0x40	; 64
    4f9a:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z14txSetFrequencyPmb>
		if(!err)
    4f9e:	81 11       	cpse	r24, r1
    4fa0:	11 c0       	rjmp	.+34     	; 0x4fc4 <_Z16init_transmitterv+0x86>
		{
			code = txSetParameters(&pwr_mW, NULL);
    4fa2:	60 e0       	ldi	r22, 0x00	; 0
    4fa4:	70 e0       	ldi	r23, 0x00	; 0
    4fa6:	ce 01       	movw	r24, r28
    4fa8:	01 96       	adiw	r24, 0x01	; 1
    4faa:	0e 94 11 27 	call	0x4e22	; 0x4e22 <_Z15txSetParametersPjPb>
			if((code == ERROR_CODE_NO_ERROR) || (code == ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING))
    4fae:	88 23       	and	r24, r24
    4fb0:	11 f0       	breq	.+4      	; 0x4fb6 <_Z16init_transmitterv+0x78>
    4fb2:	86 3f       	cpi	r24, 0xF6	; 246
    4fb4:	41 f4       	brne	.+16     	; 0x4fc6 <_Z16init_transmitterv+0x88>
			{
				g_tx_initialized = true;
    4fb6:	91 e0       	ldi	r25, 0x01	; 1
    4fb8:	90 93 29 48 	sts	0x4829, r25	; 0x804829 <_ZL16g_tx_initialized>
    4fbc:	04 c0       	rjmp	.+8      	; 0x4fc6 <_Z16init_transmitterv+0x88>
		
		DAC0_init();

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
    4fbe:	82 ed       	ldi	r24, 0xD2	; 210
    4fc0:	02 c0       	rjmp	.+4      	; 0x4fc6 <_Z16init_transmitterv+0x88>
    4fc2:	01 c0       	rjmp	.+2      	; 0x4fc6 <_Z16init_transmitterv+0x88>
		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    4fc4:	81 2f       	mov	r24, r17
				g_tx_initialized = true;
			}
		}

		return( code);
	}
    4fc6:	0f 90       	pop	r0
    4fc8:	0f 90       	pop	r0
    4fca:	df 91       	pop	r29
    4fcc:	cf 91       	pop	r28
    4fce:	1f 91       	pop	r17
    4fd0:	08 95       	ret

00004fd2 <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    4fd2:	cf 93       	push	r28
    4fd4:	df 93       	push	r29
    4fd6:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    4fd8:	89 2b       	or	r24, r25
    4fda:	09 f4       	brne	.+2      	; 0x4fde <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    4fdc:	b8 c0       	rjmp	.+368    	; 0x514e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    4fde:	ed 91       	ld	r30, X+
    4fe0:	fc 91       	ld	r31, X
    4fe2:	11 97       	sbiw	r26, 0x01	; 1
    4fe4:	e9 38       	cpi	r30, 0x89	; 137
    4fe6:	83 e1       	ldi	r24, 0x13	; 19
    4fe8:	f8 07       	cpc	r31, r24
    4fea:	14 f4       	brge	.+4      	; 0x4ff0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    4fec:	80 e0       	ldi	r24, 0x00	; 0
    4fee:	01 c0       	rjmp	.+2      	; 0x4ff2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    4ff0:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    4ff2:	e9 38       	cpi	r30, 0x89	; 137
    4ff4:	93 e1       	ldi	r25, 0x13	; 19
    4ff6:	f9 07       	cpc	r31, r25
    4ff8:	2c f4       	brge	.+10     	; 0x5004 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    4ffa:	ff 23       	and	r31, r31
    4ffc:	2c f4       	brge	.+10     	; 0x5008 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    4ffe:	e0 e0       	ldi	r30, 0x00	; 0
    5000:	f0 e0       	ldi	r31, 0x00	; 0
    5002:	02 c0       	rjmp	.+4      	; 0x5008 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    5004:	e8 e8       	ldi	r30, 0x88	; 136
    5006:	f3 e1       	ldi	r31, 0x13	; 19
    5008:	ef 01       	movw	r28, r30
    500a:	ed 93       	st	X+, r30
    500c:	fc 93       	st	X, r31
    500e:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    5010:	e5 30       	cpi	r30, 0x05	; 5
    5012:	f1 05       	cpc	r31, r1
    5014:	20 f4       	brcc	.+8      	; 0x501e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    5016:	1d 92       	st	X+, r1
    5018:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    501a:	e0 e0       	ldi	r30, 0x00	; 0
    501c:	8d c0       	rjmp	.+282    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    501e:	e2 33       	cpi	r30, 0x32	; 50
    5020:	f1 05       	cpc	r31, r1
    5022:	30 f4       	brcc	.+12     	; 0x5030 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    5024:	ea e0       	ldi	r30, 0x0A	; 10
    5026:	f0 e0       	ldi	r31, 0x00	; 0
    5028:	ed 93       	st	X+, r30
    502a:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    502c:	e1 e0       	ldi	r30, 0x01	; 1
    502e:	84 c0       	rjmp	.+264    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    5030:	e6 39       	cpi	r30, 0x96	; 150
    5032:	f1 05       	cpc	r31, r1
    5034:	30 f4       	brcc	.+12     	; 0x5042 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    5036:	e4 e6       	ldi	r30, 0x64	; 100
    5038:	f0 e0       	ldi	r31, 0x00	; 0
    503a:	ed 93       	st	X+, r30
    503c:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    503e:	e2 e0       	ldi	r30, 0x02	; 2
    5040:	7b c0       	rjmp	.+246    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    5042:	ea 3f       	cpi	r30, 0xFA	; 250
    5044:	f1 05       	cpc	r31, r1
    5046:	30 f4       	brcc	.+12     	; 0x5054 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    5048:	e8 ec       	ldi	r30, 0xC8	; 200
    504a:	f0 e0       	ldi	r31, 0x00	; 0
    504c:	ed 93       	st	X+, r30
    504e:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    5050:	e3 e0       	ldi	r30, 0x03	; 3
    5052:	72 c0       	rjmp	.+228    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    5054:	ce 35       	cpi	r28, 0x5E	; 94
    5056:	e1 e0       	ldi	r30, 0x01	; 1
    5058:	de 07       	cpc	r29, r30
    505a:	30 f4       	brcc	.+12     	; 0x5068 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    505c:	ec e2       	ldi	r30, 0x2C	; 44
    505e:	f1 e0       	ldi	r31, 0x01	; 1
    5060:	ed 93       	st	X+, r30
    5062:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    5064:	e4 e0       	ldi	r30, 0x04	; 4
    5066:	68 c0       	rjmp	.+208    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    5068:	c2 3c       	cpi	r28, 0xC2	; 194
    506a:	f1 e0       	ldi	r31, 0x01	; 1
    506c:	df 07       	cpc	r29, r31
    506e:	30 f4       	brcc	.+12     	; 0x507c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    5070:	e0 e9       	ldi	r30, 0x90	; 144
    5072:	f1 e0       	ldi	r31, 0x01	; 1
    5074:	ed 93       	st	X+, r30
    5076:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    5078:	e5 e0       	ldi	r30, 0x05	; 5
    507a:	5e c0       	rjmp	.+188    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    507c:	c6 32       	cpi	r28, 0x26	; 38
    507e:	92 e0       	ldi	r25, 0x02	; 2
    5080:	d9 07       	cpc	r29, r25
    5082:	30 f4       	brcc	.+12     	; 0x5090 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    5084:	e4 ef       	ldi	r30, 0xF4	; 244
    5086:	f1 e0       	ldi	r31, 0x01	; 1
    5088:	ed 93       	st	X+, r30
    508a:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    508c:	e6 e0       	ldi	r30, 0x06	; 6
    508e:	54 c0       	rjmp	.+168    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    5090:	ca 38       	cpi	r28, 0x8A	; 138
    5092:	e2 e0       	ldi	r30, 0x02	; 2
    5094:	de 07       	cpc	r29, r30
    5096:	30 f4       	brcc	.+12     	; 0x50a4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    5098:	e8 e5       	ldi	r30, 0x58	; 88
    509a:	f2 e0       	ldi	r31, 0x02	; 2
    509c:	ed 93       	st	X+, r30
    509e:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    50a0:	e7 e0       	ldi	r30, 0x07	; 7
    50a2:	4a c0       	rjmp	.+148    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    50a4:	c4 38       	cpi	r28, 0x84	; 132
    50a6:	f3 e0       	ldi	r31, 0x03	; 3
    50a8:	df 07       	cpc	r29, r31
    50aa:	30 f4       	brcc	.+12     	; 0x50b8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    50ac:	e0 e2       	ldi	r30, 0x20	; 32
    50ae:	f3 e0       	ldi	r31, 0x03	; 3
    50b0:	ed 93       	st	X+, r30
    50b2:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    50b4:	e8 e0       	ldi	r30, 0x08	; 8
    50b6:	40 c0       	rjmp	.+128    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    50b8:	c2 3e       	cpi	r28, 0xE2	; 226
    50ba:	94 e0       	ldi	r25, 0x04	; 4
    50bc:	d9 07       	cpc	r29, r25
    50be:	30 f4       	brcc	.+12     	; 0x50cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    50c0:	e8 ee       	ldi	r30, 0xE8	; 232
    50c2:	f3 e0       	ldi	r31, 0x03	; 3
    50c4:	ed 93       	st	X+, r30
    50c6:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    50c8:	e9 e0       	ldi	r30, 0x09	; 9
    50ca:	36 c0       	rjmp	.+108    	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    50cc:	c6 3d       	cpi	r28, 0xD6	; 214
    50ce:	e6 e0       	ldi	r30, 0x06	; 6
    50d0:	de 07       	cpc	r29, r30
    50d2:	30 f4       	brcc	.+12     	; 0x50e0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    50d4:	ec ed       	ldi	r30, 0xDC	; 220
    50d6:	f5 e0       	ldi	r31, 0x05	; 5
    50d8:	ed 93       	st	X+, r30
    50da:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    50dc:	ea e0       	ldi	r30, 0x0A	; 10
    50de:	2c c0       	rjmp	.+88     	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    50e0:	ca 3c       	cpi	r28, 0xCA	; 202
    50e2:	f8 e0       	ldi	r31, 0x08	; 8
    50e4:	df 07       	cpc	r29, r31
    50e6:	30 f4       	brcc	.+12     	; 0x50f4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    50e8:	e0 ed       	ldi	r30, 0xD0	; 208
    50ea:	f7 e0       	ldi	r31, 0x07	; 7
    50ec:	ed 93       	st	X+, r30
    50ee:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    50f0:	eb e0       	ldi	r30, 0x0B	; 11
    50f2:	22 c0       	rjmp	.+68     	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    50f4:	ce 3b       	cpi	r28, 0xBE	; 190
    50f6:	9a e0       	ldi	r25, 0x0A	; 10
    50f8:	d9 07       	cpc	r29, r25
    50fa:	30 f4       	brcc	.+12     	; 0x5108 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    50fc:	e4 ec       	ldi	r30, 0xC4	; 196
    50fe:	f9 e0       	ldi	r31, 0x09	; 9
    5100:	ed 93       	st	X+, r30
    5102:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    5104:	ec e0       	ldi	r30, 0x0C	; 12
    5106:	18 c0       	rjmp	.+48     	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    5108:	cc 3a       	cpi	r28, 0xAC	; 172
    510a:	ed e0       	ldi	r30, 0x0D	; 13
    510c:	de 07       	cpc	r29, r30
    510e:	30 f4       	brcc	.+12     	; 0x511c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    5110:	e8 eb       	ldi	r30, 0xB8	; 184
    5112:	fb e0       	ldi	r31, 0x0B	; 11
    5114:	ed 93       	st	X+, r30
    5116:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    5118:	ed e0       	ldi	r30, 0x0D	; 13
    511a:	0e c0       	rjmp	.+28     	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    511c:	c4 39       	cpi	r28, 0x94	; 148
    511e:	d1 41       	sbci	r29, 0x11	; 17
    5120:	30 f4       	brcc	.+12     	; 0x512e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    5122:	e0 ea       	ldi	r30, 0xA0	; 160
    5124:	ff e0       	ldi	r31, 0x0F	; 15
    5126:	ed 93       	st	X+, r30
    5128:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    512a:	ee e0       	ldi	r30, 0x0E	; 14
    512c:	05 c0       	rjmp	.+10     	; 0x5138 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    512e:	e8 e8       	ldi	r30, 0x88	; 136
    5130:	f3 e1       	ldi	r31, 0x13	; 19
    5132:	ed 93       	st	X+, r30
    5134:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    5136:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    5138:	f0 e0       	ldi	r31, 0x00	; 0
    513a:	e8 5c       	subi	r30, 0xC8	; 200
    513c:	ff 4b       	sbci	r31, 0xBF	; 191
    513e:	90 81       	ld	r25, Z
    5140:	fb 01       	movw	r30, r22
    5142:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    5144:	fa 01       	movw	r30, r20
    5146:	10 82       	st	Z, r1
	*modLevelLow = 0;
    5148:	f9 01       	movw	r30, r18
    514a:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    514c:	01 c0       	rjmp	.+2      	; 0x5150 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    514e:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    5150:	df 91       	pop	r29
    5152:	cf 91       	pop	r28
    5154:	08 95       	ret

00005156 <_Z18txIsAntennaForBandv>:

/**
 */
bool __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    5156:	cf 93       	push	r28
    5158:	df 93       	push	r29
    515a:	1f 92       	push	r1
    515c:	cd b7       	in	r28, 0x3d	; 61
    515e:	de b7       	in	r29, 0x3e	; 62
	bool result = false;
    5160:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    5162:	80 91 1b 45 	lds	r24, 0x451B	; 0x80451b <g_antenna_connect_state>
    5166:	88 2f       	mov	r24, r24
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	02 97       	sbiw	r24, 0x02	; 2
    516c:	09 f0       	breq	.+2      	; 0x5170 <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    516e:	03 c0       	rjmp	.+6      	; 0x5176 <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = true;
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    5174:	00 00       	nop

		}
		break;
	}

	return( result);
    5176:	89 81       	ldd	r24, Y+1	; 0x01
}
    5178:	0f 90       	pop	r0
    517a:	df 91       	pop	r29
    517c:	cf 91       	pop	r28
    517e:	08 95       	ret

00005180 <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    5180:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    5184:	08 95       	ret

00005186 <USART1_init>:
    5186:	0e 94 48 2a 	call	0x5490	; 0x5490 <__floatunsisf>
    518a:	20 e0       	ldi	r18, 0x00	; 0
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	40 e8       	ldi	r20, 0x80	; 128
    5190:	51 e4       	ldi	r21, 0x41	; 65
    5192:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__mulsf3>
    5196:	9b 01       	movw	r18, r22
    5198:	ac 01       	movw	r20, r24
    519a:	60 e0       	ldi	r22, 0x00	; 0
    519c:	74 e2       	ldi	r23, 0x24	; 36
    519e:	84 e7       	ldi	r24, 0x74	; 116
    51a0:	9d e4       	ldi	r25, 0x4D	; 77
    51a2:	0e 94 a0 29 	call	0x5340	; 0x5340 <__divsf3>
    51a6:	20 e0       	ldi	r18, 0x00	; 0
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	40 e0       	ldi	r20, 0x00	; 0
    51ac:	5f e3       	ldi	r21, 0x3F	; 63
    51ae:	0e 94 2f 29 	call	0x525e	; 0x525e <__addsf3>
    51b2:	0e 94 19 2a 	call	0x5432	; 0x5432 <__fixunssfsi>
    51b6:	e0 e2       	ldi	r30, 0x20	; 32
    51b8:	f8 e0       	ldi	r31, 0x08	; 8
    51ba:	60 87       	std	Z+8, r22	; 0x08
    51bc:	71 87       	std	Z+9, r23	; 0x09
    51be:	80 e8       	ldi	r24, 0x80	; 128
    51c0:	85 83       	std	Z+5, r24	; 0x05
    51c2:	80 ec       	ldi	r24, 0xC0	; 192
    51c4:	86 83       	std	Z+6, r24	; 0x06
    51c6:	80 e0       	ldi	r24, 0x00	; 0
    51c8:	08 95       	ret

000051ca <USART1_enable_tx>:
    51ca:	e0 e2       	ldi	r30, 0x20	; 32
    51cc:	f8 e0       	ldi	r31, 0x08	; 8
    51ce:	86 81       	ldd	r24, Z+6	; 0x06
    51d0:	80 64       	ori	r24, 0x40	; 64
    51d2:	86 83       	std	Z+6, r24	; 0x06
    51d4:	85 81       	ldd	r24, Z+5	; 0x05
    51d6:	80 62       	ori	r24, 0x20	; 32
    51d8:	85 83       	std	Z+5, r24	; 0x05
    51da:	08 95       	ret

000051dc <USART1_get_data>:
    51dc:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    51e0:	08 95       	ret

000051e2 <USART4_init>:
    51e2:	0e 94 48 2a 	call	0x5490	; 0x5490 <__floatunsisf>
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	40 e8       	ldi	r20, 0x80	; 128
    51ec:	51 e4       	ldi	r21, 0x41	; 65
    51ee:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__mulsf3>
    51f2:	9b 01       	movw	r18, r22
    51f4:	ac 01       	movw	r20, r24
    51f6:	60 e0       	ldi	r22, 0x00	; 0
    51f8:	74 e2       	ldi	r23, 0x24	; 36
    51fa:	84 e7       	ldi	r24, 0x74	; 116
    51fc:	9d e4       	ldi	r25, 0x4D	; 77
    51fe:	0e 94 a0 29 	call	0x5340	; 0x5340 <__divsf3>
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	40 e0       	ldi	r20, 0x00	; 0
    5208:	5f e3       	ldi	r21, 0x3F	; 63
    520a:	0e 94 2f 29 	call	0x525e	; 0x525e <__addsf3>
    520e:	0e 94 19 2a 	call	0x5432	; 0x5432 <__fixunssfsi>
    5212:	e0 e8       	ldi	r30, 0x80	; 128
    5214:	f8 e0       	ldi	r31, 0x08	; 8
    5216:	60 87       	std	Z+8, r22	; 0x08
    5218:	71 87       	std	Z+9, r23	; 0x09
    521a:	80 e8       	ldi	r24, 0x80	; 128
    521c:	85 83       	std	Z+5, r24	; 0x05
    521e:	80 ec       	ldi	r24, 0xC0	; 192
    5220:	86 83       	std	Z+6, r24	; 0x06
    5222:	80 e0       	ldi	r24, 0x00	; 0
    5224:	08 95       	ret

00005226 <USART4_enable_tx>:
    5226:	e0 e8       	ldi	r30, 0x80	; 128
    5228:	f8 e0       	ldi	r31, 0x08	; 8
    522a:	86 81       	ldd	r24, Z+6	; 0x06
    522c:	80 64       	ori	r24, 0x40	; 64
    522e:	86 83       	std	Z+6, r24	; 0x06
    5230:	85 81       	ldd	r24, Z+5	; 0x05
    5232:	80 62       	ori	r24, 0x20	; 32
    5234:	85 83       	std	Z+5, r24	; 0x05
    5236:	08 95       	ret

00005238 <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    5238:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    523c:	08 95       	ret

0000523e <_Z7timeDifmm>:
 * It appears difftime might not be handling subtraction of unsigned arguments correctly with current compiler. This function avoids any problems.
 */
int32_t timeDif(time_t a, time_t b)
{
	int32_t dif; // = difftime(now, g_event_start_epoch); // returns arg1 - arg2
	if(a > b)
    523e:	26 17       	cp	r18, r22
    5240:	37 07       	cpc	r19, r23
    5242:	48 07       	cpc	r20, r24
    5244:	59 07       	cpc	r21, r25
    5246:	28 f4       	brcc	.+10     	; 0x5252 <_Z7timeDifmm+0x14>
		dif = a - b;
    5248:	62 1b       	sub	r22, r18
    524a:	73 0b       	sbc	r23, r19
    524c:	84 0b       	sbc	r24, r20
    524e:	95 0b       	sbc	r25, r21
    5250:	08 95       	ret
	else
		dif = -(b - a);
    5252:	62 1b       	sub	r22, r18
    5254:	73 0b       	sbc	r23, r19
    5256:	84 0b       	sbc	r24, r20
    5258:	95 0b       	sbc	r25, r21

	return dif;
}
    525a:	08 95       	ret

0000525c <__subsf3>:
    525c:	50 58       	subi	r21, 0x80	; 128

0000525e <__addsf3>:
    525e:	bb 27       	eor	r27, r27
    5260:	aa 27       	eor	r26, r26
    5262:	0e 94 46 29 	call	0x528c	; 0x528c <__addsf3x>
    5266:	0c 94 c0 2a 	jmp	0x5580	; 0x5580 <__fp_round>
    526a:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__fp_pscA>
    526e:	38 f0       	brcs	.+14     	; 0x527e <__addsf3+0x20>
    5270:	0e 94 b9 2a 	call	0x5572	; 0x5572 <__fp_pscB>
    5274:	20 f0       	brcs	.+8      	; 0x527e <__addsf3+0x20>
    5276:	39 f4       	brne	.+14     	; 0x5286 <__addsf3+0x28>
    5278:	9f 3f       	cpi	r25, 0xFF	; 255
    527a:	19 f4       	brne	.+6      	; 0x5282 <__addsf3+0x24>
    527c:	26 f4       	brtc	.+8      	; 0x5286 <__addsf3+0x28>
    527e:	0c 94 af 2a 	jmp	0x555e	; 0x555e <__fp_nan>
    5282:	0e f4       	brtc	.+2      	; 0x5286 <__addsf3+0x28>
    5284:	e0 95       	com	r30
    5286:	e7 fb       	bst	r30, 7
    5288:	0c 94 a9 2a 	jmp	0x5552	; 0x5552 <__fp_inf>

0000528c <__addsf3x>:
    528c:	e9 2f       	mov	r30, r25
    528e:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <__fp_split3>
    5292:	58 f3       	brcs	.-42     	; 0x526a <__addsf3+0xc>
    5294:	ba 17       	cp	r27, r26
    5296:	62 07       	cpc	r22, r18
    5298:	73 07       	cpc	r23, r19
    529a:	84 07       	cpc	r24, r20
    529c:	95 07       	cpc	r25, r21
    529e:	20 f0       	brcs	.+8      	; 0x52a8 <__addsf3x+0x1c>
    52a0:	79 f4       	brne	.+30     	; 0x52c0 <__addsf3x+0x34>
    52a2:	a6 f5       	brtc	.+104    	; 0x530c <__addsf3x+0x80>
    52a4:	0c 94 f3 2a 	jmp	0x55e6	; 0x55e6 <__fp_zero>
    52a8:	0e f4       	brtc	.+2      	; 0x52ac <__addsf3x+0x20>
    52aa:	e0 95       	com	r30
    52ac:	0b 2e       	mov	r0, r27
    52ae:	ba 2f       	mov	r27, r26
    52b0:	a0 2d       	mov	r26, r0
    52b2:	0b 01       	movw	r0, r22
    52b4:	b9 01       	movw	r22, r18
    52b6:	90 01       	movw	r18, r0
    52b8:	0c 01       	movw	r0, r24
    52ba:	ca 01       	movw	r24, r20
    52bc:	a0 01       	movw	r20, r0
    52be:	11 24       	eor	r1, r1
    52c0:	ff 27       	eor	r31, r31
    52c2:	59 1b       	sub	r21, r25
    52c4:	99 f0       	breq	.+38     	; 0x52ec <__addsf3x+0x60>
    52c6:	59 3f       	cpi	r21, 0xF9	; 249
    52c8:	50 f4       	brcc	.+20     	; 0x52de <__addsf3x+0x52>
    52ca:	50 3e       	cpi	r21, 0xE0	; 224
    52cc:	68 f1       	brcs	.+90     	; 0x5328 <__addsf3x+0x9c>
    52ce:	1a 16       	cp	r1, r26
    52d0:	f0 40       	sbci	r31, 0x00	; 0
    52d2:	a2 2f       	mov	r26, r18
    52d4:	23 2f       	mov	r18, r19
    52d6:	34 2f       	mov	r19, r20
    52d8:	44 27       	eor	r20, r20
    52da:	58 5f       	subi	r21, 0xF8	; 248
    52dc:	f3 cf       	rjmp	.-26     	; 0x52c4 <__addsf3x+0x38>
    52de:	46 95       	lsr	r20
    52e0:	37 95       	ror	r19
    52e2:	27 95       	ror	r18
    52e4:	a7 95       	ror	r26
    52e6:	f0 40       	sbci	r31, 0x00	; 0
    52e8:	53 95       	inc	r21
    52ea:	c9 f7       	brne	.-14     	; 0x52de <__addsf3x+0x52>
    52ec:	7e f4       	brtc	.+30     	; 0x530c <__addsf3x+0x80>
    52ee:	1f 16       	cp	r1, r31
    52f0:	ba 0b       	sbc	r27, r26
    52f2:	62 0b       	sbc	r22, r18
    52f4:	73 0b       	sbc	r23, r19
    52f6:	84 0b       	sbc	r24, r20
    52f8:	ba f0       	brmi	.+46     	; 0x5328 <__addsf3x+0x9c>
    52fa:	91 50       	subi	r25, 0x01	; 1
    52fc:	a1 f0       	breq	.+40     	; 0x5326 <__addsf3x+0x9a>
    52fe:	ff 0f       	add	r31, r31
    5300:	bb 1f       	adc	r27, r27
    5302:	66 1f       	adc	r22, r22
    5304:	77 1f       	adc	r23, r23
    5306:	88 1f       	adc	r24, r24
    5308:	c2 f7       	brpl	.-16     	; 0x52fa <__addsf3x+0x6e>
    530a:	0e c0       	rjmp	.+28     	; 0x5328 <__addsf3x+0x9c>
    530c:	ba 0f       	add	r27, r26
    530e:	62 1f       	adc	r22, r18
    5310:	73 1f       	adc	r23, r19
    5312:	84 1f       	adc	r24, r20
    5314:	48 f4       	brcc	.+18     	; 0x5328 <__addsf3x+0x9c>
    5316:	87 95       	ror	r24
    5318:	77 95       	ror	r23
    531a:	67 95       	ror	r22
    531c:	b7 95       	ror	r27
    531e:	f7 95       	ror	r31
    5320:	9e 3f       	cpi	r25, 0xFE	; 254
    5322:	08 f0       	brcs	.+2      	; 0x5326 <__addsf3x+0x9a>
    5324:	b0 cf       	rjmp	.-160    	; 0x5286 <__addsf3+0x28>
    5326:	93 95       	inc	r25
    5328:	88 0f       	add	r24, r24
    532a:	08 f0       	brcs	.+2      	; 0x532e <__addsf3x+0xa2>
    532c:	99 27       	eor	r25, r25
    532e:	ee 0f       	add	r30, r30
    5330:	97 95       	ror	r25
    5332:	87 95       	ror	r24
    5334:	08 95       	ret

00005336 <__cmpsf2>:
    5336:	0e 94 85 2a 	call	0x550a	; 0x550a <__fp_cmp>
    533a:	08 f4       	brcc	.+2      	; 0x533e <__cmpsf2+0x8>
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	08 95       	ret

00005340 <__divsf3>:
    5340:	0e 94 b4 29 	call	0x5368	; 0x5368 <__divsf3x>
    5344:	0c 94 c0 2a 	jmp	0x5580	; 0x5580 <__fp_round>
    5348:	0e 94 b9 2a 	call	0x5572	; 0x5572 <__fp_pscB>
    534c:	58 f0       	brcs	.+22     	; 0x5364 <__divsf3+0x24>
    534e:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__fp_pscA>
    5352:	40 f0       	brcs	.+16     	; 0x5364 <__divsf3+0x24>
    5354:	29 f4       	brne	.+10     	; 0x5360 <__divsf3+0x20>
    5356:	5f 3f       	cpi	r21, 0xFF	; 255
    5358:	29 f0       	breq	.+10     	; 0x5364 <__divsf3+0x24>
    535a:	0c 94 a9 2a 	jmp	0x5552	; 0x5552 <__fp_inf>
    535e:	51 11       	cpse	r21, r1
    5360:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__fp_szero>
    5364:	0c 94 af 2a 	jmp	0x555e	; 0x555e <__fp_nan>

00005368 <__divsf3x>:
    5368:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <__fp_split3>
    536c:	68 f3       	brcs	.-38     	; 0x5348 <__divsf3+0x8>

0000536e <__divsf3_pse>:
    536e:	99 23       	and	r25, r25
    5370:	b1 f3       	breq	.-20     	; 0x535e <__divsf3+0x1e>
    5372:	55 23       	and	r21, r21
    5374:	91 f3       	breq	.-28     	; 0x535a <__divsf3+0x1a>
    5376:	95 1b       	sub	r25, r21
    5378:	55 0b       	sbc	r21, r21
    537a:	bb 27       	eor	r27, r27
    537c:	aa 27       	eor	r26, r26
    537e:	62 17       	cp	r22, r18
    5380:	73 07       	cpc	r23, r19
    5382:	84 07       	cpc	r24, r20
    5384:	38 f0       	brcs	.+14     	; 0x5394 <__divsf3_pse+0x26>
    5386:	9f 5f       	subi	r25, 0xFF	; 255
    5388:	5f 4f       	sbci	r21, 0xFF	; 255
    538a:	22 0f       	add	r18, r18
    538c:	33 1f       	adc	r19, r19
    538e:	44 1f       	adc	r20, r20
    5390:	aa 1f       	adc	r26, r26
    5392:	a9 f3       	breq	.-22     	; 0x537e <__divsf3_pse+0x10>
    5394:	35 d0       	rcall	.+106    	; 0x5400 <__divsf3_pse+0x92>
    5396:	0e 2e       	mov	r0, r30
    5398:	3a f0       	brmi	.+14     	; 0x53a8 <__divsf3_pse+0x3a>
    539a:	e0 e8       	ldi	r30, 0x80	; 128
    539c:	32 d0       	rcall	.+100    	; 0x5402 <__divsf3_pse+0x94>
    539e:	91 50       	subi	r25, 0x01	; 1
    53a0:	50 40       	sbci	r21, 0x00	; 0
    53a2:	e6 95       	lsr	r30
    53a4:	00 1c       	adc	r0, r0
    53a6:	ca f7       	brpl	.-14     	; 0x539a <__divsf3_pse+0x2c>
    53a8:	2b d0       	rcall	.+86     	; 0x5400 <__divsf3_pse+0x92>
    53aa:	fe 2f       	mov	r31, r30
    53ac:	29 d0       	rcall	.+82     	; 0x5400 <__divsf3_pse+0x92>
    53ae:	66 0f       	add	r22, r22
    53b0:	77 1f       	adc	r23, r23
    53b2:	88 1f       	adc	r24, r24
    53b4:	bb 1f       	adc	r27, r27
    53b6:	26 17       	cp	r18, r22
    53b8:	37 07       	cpc	r19, r23
    53ba:	48 07       	cpc	r20, r24
    53bc:	ab 07       	cpc	r26, r27
    53be:	b0 e8       	ldi	r27, 0x80	; 128
    53c0:	09 f0       	breq	.+2      	; 0x53c4 <__divsf3_pse+0x56>
    53c2:	bb 0b       	sbc	r27, r27
    53c4:	80 2d       	mov	r24, r0
    53c6:	bf 01       	movw	r22, r30
    53c8:	ff 27       	eor	r31, r31
    53ca:	93 58       	subi	r25, 0x83	; 131
    53cc:	5f 4f       	sbci	r21, 0xFF	; 255
    53ce:	3a f0       	brmi	.+14     	; 0x53de <__divsf3_pse+0x70>
    53d0:	9e 3f       	cpi	r25, 0xFE	; 254
    53d2:	51 05       	cpc	r21, r1
    53d4:	78 f0       	brcs	.+30     	; 0x53f4 <__divsf3_pse+0x86>
    53d6:	0c 94 a9 2a 	jmp	0x5552	; 0x5552 <__fp_inf>
    53da:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__fp_szero>
    53de:	5f 3f       	cpi	r21, 0xFF	; 255
    53e0:	e4 f3       	brlt	.-8      	; 0x53da <__divsf3_pse+0x6c>
    53e2:	98 3e       	cpi	r25, 0xE8	; 232
    53e4:	d4 f3       	brlt	.-12     	; 0x53da <__divsf3_pse+0x6c>
    53e6:	86 95       	lsr	r24
    53e8:	77 95       	ror	r23
    53ea:	67 95       	ror	r22
    53ec:	b7 95       	ror	r27
    53ee:	f7 95       	ror	r31
    53f0:	9f 5f       	subi	r25, 0xFF	; 255
    53f2:	c9 f7       	brne	.-14     	; 0x53e6 <__divsf3_pse+0x78>
    53f4:	88 0f       	add	r24, r24
    53f6:	91 1d       	adc	r25, r1
    53f8:	96 95       	lsr	r25
    53fa:	87 95       	ror	r24
    53fc:	97 f9       	bld	r25, 7
    53fe:	08 95       	ret
    5400:	e1 e0       	ldi	r30, 0x01	; 1
    5402:	66 0f       	add	r22, r22
    5404:	77 1f       	adc	r23, r23
    5406:	88 1f       	adc	r24, r24
    5408:	bb 1f       	adc	r27, r27
    540a:	62 17       	cp	r22, r18
    540c:	73 07       	cpc	r23, r19
    540e:	84 07       	cpc	r24, r20
    5410:	ba 07       	cpc	r27, r26
    5412:	20 f0       	brcs	.+8      	; 0x541c <__divsf3_pse+0xae>
    5414:	62 1b       	sub	r22, r18
    5416:	73 0b       	sbc	r23, r19
    5418:	84 0b       	sbc	r24, r20
    541a:	ba 0b       	sbc	r27, r26
    541c:	ee 1f       	adc	r30, r30
    541e:	88 f7       	brcc	.-30     	; 0x5402 <__divsf3_pse+0x94>
    5420:	e0 95       	com	r30
    5422:	08 95       	ret

00005424 <__fixsfsi>:
    5424:	0e 94 19 2a 	call	0x5432	; 0x5432 <__fixunssfsi>
    5428:	68 94       	set
    542a:	b1 11       	cpse	r27, r1
    542c:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__fp_szero>
    5430:	08 95       	ret

00005432 <__fixunssfsi>:
    5432:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__fp_splitA>
    5436:	88 f0       	brcs	.+34     	; 0x545a <__fixunssfsi+0x28>
    5438:	9f 57       	subi	r25, 0x7F	; 127
    543a:	98 f0       	brcs	.+38     	; 0x5462 <__fixunssfsi+0x30>
    543c:	b9 2f       	mov	r27, r25
    543e:	99 27       	eor	r25, r25
    5440:	b7 51       	subi	r27, 0x17	; 23
    5442:	b0 f0       	brcs	.+44     	; 0x5470 <__fixunssfsi+0x3e>
    5444:	e1 f0       	breq	.+56     	; 0x547e <__fixunssfsi+0x4c>
    5446:	66 0f       	add	r22, r22
    5448:	77 1f       	adc	r23, r23
    544a:	88 1f       	adc	r24, r24
    544c:	99 1f       	adc	r25, r25
    544e:	1a f0       	brmi	.+6      	; 0x5456 <__fixunssfsi+0x24>
    5450:	ba 95       	dec	r27
    5452:	c9 f7       	brne	.-14     	; 0x5446 <__fixunssfsi+0x14>
    5454:	14 c0       	rjmp	.+40     	; 0x547e <__fixunssfsi+0x4c>
    5456:	b1 30       	cpi	r27, 0x01	; 1
    5458:	91 f0       	breq	.+36     	; 0x547e <__fixunssfsi+0x4c>
    545a:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <__fp_zero>
    545e:	b1 e0       	ldi	r27, 0x01	; 1
    5460:	08 95       	ret
    5462:	0c 94 f3 2a 	jmp	0x55e6	; 0x55e6 <__fp_zero>
    5466:	67 2f       	mov	r22, r23
    5468:	78 2f       	mov	r23, r24
    546a:	88 27       	eor	r24, r24
    546c:	b8 5f       	subi	r27, 0xF8	; 248
    546e:	39 f0       	breq	.+14     	; 0x547e <__fixunssfsi+0x4c>
    5470:	b9 3f       	cpi	r27, 0xF9	; 249
    5472:	cc f3       	brlt	.-14     	; 0x5466 <__fixunssfsi+0x34>
    5474:	86 95       	lsr	r24
    5476:	77 95       	ror	r23
    5478:	67 95       	ror	r22
    547a:	b3 95       	inc	r27
    547c:	d9 f7       	brne	.-10     	; 0x5474 <__fixunssfsi+0x42>
    547e:	3e f4       	brtc	.+14     	; 0x548e <__fixunssfsi+0x5c>
    5480:	90 95       	com	r25
    5482:	80 95       	com	r24
    5484:	70 95       	com	r23
    5486:	61 95       	neg	r22
    5488:	7f 4f       	sbci	r23, 0xFF	; 255
    548a:	8f 4f       	sbci	r24, 0xFF	; 255
    548c:	9f 4f       	sbci	r25, 0xFF	; 255
    548e:	08 95       	ret

00005490 <__floatunsisf>:
    5490:	e8 94       	clt
    5492:	09 c0       	rjmp	.+18     	; 0x54a6 <__floatsisf+0x12>

00005494 <__floatsisf>:
    5494:	97 fb       	bst	r25, 7
    5496:	3e f4       	brtc	.+14     	; 0x54a6 <__floatsisf+0x12>
    5498:	90 95       	com	r25
    549a:	80 95       	com	r24
    549c:	70 95       	com	r23
    549e:	61 95       	neg	r22
    54a0:	7f 4f       	sbci	r23, 0xFF	; 255
    54a2:	8f 4f       	sbci	r24, 0xFF	; 255
    54a4:	9f 4f       	sbci	r25, 0xFF	; 255
    54a6:	99 23       	and	r25, r25
    54a8:	a9 f0       	breq	.+42     	; 0x54d4 <__floatsisf+0x40>
    54aa:	f9 2f       	mov	r31, r25
    54ac:	96 e9       	ldi	r25, 0x96	; 150
    54ae:	bb 27       	eor	r27, r27
    54b0:	93 95       	inc	r25
    54b2:	f6 95       	lsr	r31
    54b4:	87 95       	ror	r24
    54b6:	77 95       	ror	r23
    54b8:	67 95       	ror	r22
    54ba:	b7 95       	ror	r27
    54bc:	f1 11       	cpse	r31, r1
    54be:	f8 cf       	rjmp	.-16     	; 0x54b0 <__floatsisf+0x1c>
    54c0:	fa f4       	brpl	.+62     	; 0x5500 <__floatsisf+0x6c>
    54c2:	bb 0f       	add	r27, r27
    54c4:	11 f4       	brne	.+4      	; 0x54ca <__floatsisf+0x36>
    54c6:	60 ff       	sbrs	r22, 0
    54c8:	1b c0       	rjmp	.+54     	; 0x5500 <__floatsisf+0x6c>
    54ca:	6f 5f       	subi	r22, 0xFF	; 255
    54cc:	7f 4f       	sbci	r23, 0xFF	; 255
    54ce:	8f 4f       	sbci	r24, 0xFF	; 255
    54d0:	9f 4f       	sbci	r25, 0xFF	; 255
    54d2:	16 c0       	rjmp	.+44     	; 0x5500 <__floatsisf+0x6c>
    54d4:	88 23       	and	r24, r24
    54d6:	11 f0       	breq	.+4      	; 0x54dc <__floatsisf+0x48>
    54d8:	96 e9       	ldi	r25, 0x96	; 150
    54da:	11 c0       	rjmp	.+34     	; 0x54fe <__floatsisf+0x6a>
    54dc:	77 23       	and	r23, r23
    54de:	21 f0       	breq	.+8      	; 0x54e8 <__floatsisf+0x54>
    54e0:	9e e8       	ldi	r25, 0x8E	; 142
    54e2:	87 2f       	mov	r24, r23
    54e4:	76 2f       	mov	r23, r22
    54e6:	05 c0       	rjmp	.+10     	; 0x54f2 <__floatsisf+0x5e>
    54e8:	66 23       	and	r22, r22
    54ea:	71 f0       	breq	.+28     	; 0x5508 <__floatsisf+0x74>
    54ec:	96 e8       	ldi	r25, 0x86	; 134
    54ee:	86 2f       	mov	r24, r22
    54f0:	70 e0       	ldi	r23, 0x00	; 0
    54f2:	60 e0       	ldi	r22, 0x00	; 0
    54f4:	2a f0       	brmi	.+10     	; 0x5500 <__floatsisf+0x6c>
    54f6:	9a 95       	dec	r25
    54f8:	66 0f       	add	r22, r22
    54fa:	77 1f       	adc	r23, r23
    54fc:	88 1f       	adc	r24, r24
    54fe:	da f7       	brpl	.-10     	; 0x54f6 <__floatsisf+0x62>
    5500:	88 0f       	add	r24, r24
    5502:	96 95       	lsr	r25
    5504:	87 95       	ror	r24
    5506:	97 f9       	bld	r25, 7
    5508:	08 95       	ret

0000550a <__fp_cmp>:
    550a:	99 0f       	add	r25, r25
    550c:	00 08       	sbc	r0, r0
    550e:	55 0f       	add	r21, r21
    5510:	aa 0b       	sbc	r26, r26
    5512:	e0 e8       	ldi	r30, 0x80	; 128
    5514:	fe ef       	ldi	r31, 0xFE	; 254
    5516:	16 16       	cp	r1, r22
    5518:	17 06       	cpc	r1, r23
    551a:	e8 07       	cpc	r30, r24
    551c:	f9 07       	cpc	r31, r25
    551e:	c0 f0       	brcs	.+48     	; 0x5550 <__fp_cmp+0x46>
    5520:	12 16       	cp	r1, r18
    5522:	13 06       	cpc	r1, r19
    5524:	e4 07       	cpc	r30, r20
    5526:	f5 07       	cpc	r31, r21
    5528:	98 f0       	brcs	.+38     	; 0x5550 <__fp_cmp+0x46>
    552a:	62 1b       	sub	r22, r18
    552c:	73 0b       	sbc	r23, r19
    552e:	84 0b       	sbc	r24, r20
    5530:	95 0b       	sbc	r25, r21
    5532:	39 f4       	brne	.+14     	; 0x5542 <__fp_cmp+0x38>
    5534:	0a 26       	eor	r0, r26
    5536:	61 f0       	breq	.+24     	; 0x5550 <__fp_cmp+0x46>
    5538:	23 2b       	or	r18, r19
    553a:	24 2b       	or	r18, r20
    553c:	25 2b       	or	r18, r21
    553e:	21 f4       	brne	.+8      	; 0x5548 <__fp_cmp+0x3e>
    5540:	08 95       	ret
    5542:	0a 26       	eor	r0, r26
    5544:	09 f4       	brne	.+2      	; 0x5548 <__fp_cmp+0x3e>
    5546:	a1 40       	sbci	r26, 0x01	; 1
    5548:	a6 95       	lsr	r26
    554a:	8f ef       	ldi	r24, 0xFF	; 255
    554c:	81 1d       	adc	r24, r1
    554e:	81 1d       	adc	r24, r1
    5550:	08 95       	ret

00005552 <__fp_inf>:
    5552:	97 f9       	bld	r25, 7
    5554:	9f 67       	ori	r25, 0x7F	; 127
    5556:	80 e8       	ldi	r24, 0x80	; 128
    5558:	70 e0       	ldi	r23, 0x00	; 0
    555a:	60 e0       	ldi	r22, 0x00	; 0
    555c:	08 95       	ret

0000555e <__fp_nan>:
    555e:	9f ef       	ldi	r25, 0xFF	; 255
    5560:	80 ec       	ldi	r24, 0xC0	; 192
    5562:	08 95       	ret

00005564 <__fp_pscA>:
    5564:	00 24       	eor	r0, r0
    5566:	0a 94       	dec	r0
    5568:	16 16       	cp	r1, r22
    556a:	17 06       	cpc	r1, r23
    556c:	18 06       	cpc	r1, r24
    556e:	09 06       	cpc	r0, r25
    5570:	08 95       	ret

00005572 <__fp_pscB>:
    5572:	00 24       	eor	r0, r0
    5574:	0a 94       	dec	r0
    5576:	12 16       	cp	r1, r18
    5578:	13 06       	cpc	r1, r19
    557a:	14 06       	cpc	r1, r20
    557c:	05 06       	cpc	r0, r21
    557e:	08 95       	ret

00005580 <__fp_round>:
    5580:	09 2e       	mov	r0, r25
    5582:	03 94       	inc	r0
    5584:	00 0c       	add	r0, r0
    5586:	11 f4       	brne	.+4      	; 0x558c <__fp_round+0xc>
    5588:	88 23       	and	r24, r24
    558a:	52 f0       	brmi	.+20     	; 0x55a0 <__fp_round+0x20>
    558c:	bb 0f       	add	r27, r27
    558e:	40 f4       	brcc	.+16     	; 0x55a0 <__fp_round+0x20>
    5590:	bf 2b       	or	r27, r31
    5592:	11 f4       	brne	.+4      	; 0x5598 <__fp_round+0x18>
    5594:	60 ff       	sbrs	r22, 0
    5596:	04 c0       	rjmp	.+8      	; 0x55a0 <__fp_round+0x20>
    5598:	6f 5f       	subi	r22, 0xFF	; 255
    559a:	7f 4f       	sbci	r23, 0xFF	; 255
    559c:	8f 4f       	sbci	r24, 0xFF	; 255
    559e:	9f 4f       	sbci	r25, 0xFF	; 255
    55a0:	08 95       	ret

000055a2 <__fp_split3>:
    55a2:	57 fd       	sbrc	r21, 7
    55a4:	90 58       	subi	r25, 0x80	; 128
    55a6:	44 0f       	add	r20, r20
    55a8:	55 1f       	adc	r21, r21
    55aa:	59 f0       	breq	.+22     	; 0x55c2 <__fp_splitA+0x10>
    55ac:	5f 3f       	cpi	r21, 0xFF	; 255
    55ae:	71 f0       	breq	.+28     	; 0x55cc <__fp_splitA+0x1a>
    55b0:	47 95       	ror	r20

000055b2 <__fp_splitA>:
    55b2:	88 0f       	add	r24, r24
    55b4:	97 fb       	bst	r25, 7
    55b6:	99 1f       	adc	r25, r25
    55b8:	61 f0       	breq	.+24     	; 0x55d2 <__fp_splitA+0x20>
    55ba:	9f 3f       	cpi	r25, 0xFF	; 255
    55bc:	79 f0       	breq	.+30     	; 0x55dc <__fp_splitA+0x2a>
    55be:	87 95       	ror	r24
    55c0:	08 95       	ret
    55c2:	12 16       	cp	r1, r18
    55c4:	13 06       	cpc	r1, r19
    55c6:	14 06       	cpc	r1, r20
    55c8:	55 1f       	adc	r21, r21
    55ca:	f2 cf       	rjmp	.-28     	; 0x55b0 <__fp_split3+0xe>
    55cc:	46 95       	lsr	r20
    55ce:	f1 df       	rcall	.-30     	; 0x55b2 <__fp_splitA>
    55d0:	08 c0       	rjmp	.+16     	; 0x55e2 <__fp_splitA+0x30>
    55d2:	16 16       	cp	r1, r22
    55d4:	17 06       	cpc	r1, r23
    55d6:	18 06       	cpc	r1, r24
    55d8:	99 1f       	adc	r25, r25
    55da:	f1 cf       	rjmp	.-30     	; 0x55be <__fp_splitA+0xc>
    55dc:	86 95       	lsr	r24
    55de:	71 05       	cpc	r23, r1
    55e0:	61 05       	cpc	r22, r1
    55e2:	08 94       	sec
    55e4:	08 95       	ret

000055e6 <__fp_zero>:
    55e6:	e8 94       	clt

000055e8 <__fp_szero>:
    55e8:	bb 27       	eor	r27, r27
    55ea:	66 27       	eor	r22, r22
    55ec:	77 27       	eor	r23, r23
    55ee:	cb 01       	movw	r24, r22
    55f0:	97 f9       	bld	r25, 7
    55f2:	08 95       	ret

000055f4 <__gesf2>:
    55f4:	0e 94 85 2a 	call	0x550a	; 0x550a <__fp_cmp>
    55f8:	08 f4       	brcc	.+2      	; 0x55fc <__gesf2+0x8>
    55fa:	8f ef       	ldi	r24, 0xFF	; 255
    55fc:	08 95       	ret

000055fe <__mulsf3>:
    55fe:	0e 94 12 2b 	call	0x5624	; 0x5624 <__mulsf3x>
    5602:	0c 94 c0 2a 	jmp	0x5580	; 0x5580 <__fp_round>
    5606:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__fp_pscA>
    560a:	38 f0       	brcs	.+14     	; 0x561a <__mulsf3+0x1c>
    560c:	0e 94 b9 2a 	call	0x5572	; 0x5572 <__fp_pscB>
    5610:	20 f0       	brcs	.+8      	; 0x561a <__mulsf3+0x1c>
    5612:	95 23       	and	r25, r21
    5614:	11 f0       	breq	.+4      	; 0x561a <__mulsf3+0x1c>
    5616:	0c 94 a9 2a 	jmp	0x5552	; 0x5552 <__fp_inf>
    561a:	0c 94 af 2a 	jmp	0x555e	; 0x555e <__fp_nan>
    561e:	11 24       	eor	r1, r1
    5620:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__fp_szero>

00005624 <__mulsf3x>:
    5624:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <__fp_split3>
    5628:	70 f3       	brcs	.-36     	; 0x5606 <__mulsf3+0x8>

0000562a <__mulsf3_pse>:
    562a:	95 9f       	mul	r25, r21
    562c:	c1 f3       	breq	.-16     	; 0x561e <__mulsf3+0x20>
    562e:	95 0f       	add	r25, r21
    5630:	50 e0       	ldi	r21, 0x00	; 0
    5632:	55 1f       	adc	r21, r21
    5634:	62 9f       	mul	r22, r18
    5636:	f0 01       	movw	r30, r0
    5638:	72 9f       	mul	r23, r18
    563a:	bb 27       	eor	r27, r27
    563c:	f0 0d       	add	r31, r0
    563e:	b1 1d       	adc	r27, r1
    5640:	63 9f       	mul	r22, r19
    5642:	aa 27       	eor	r26, r26
    5644:	f0 0d       	add	r31, r0
    5646:	b1 1d       	adc	r27, r1
    5648:	aa 1f       	adc	r26, r26
    564a:	64 9f       	mul	r22, r20
    564c:	66 27       	eor	r22, r22
    564e:	b0 0d       	add	r27, r0
    5650:	a1 1d       	adc	r26, r1
    5652:	66 1f       	adc	r22, r22
    5654:	82 9f       	mul	r24, r18
    5656:	22 27       	eor	r18, r18
    5658:	b0 0d       	add	r27, r0
    565a:	a1 1d       	adc	r26, r1
    565c:	62 1f       	adc	r22, r18
    565e:	73 9f       	mul	r23, r19
    5660:	b0 0d       	add	r27, r0
    5662:	a1 1d       	adc	r26, r1
    5664:	62 1f       	adc	r22, r18
    5666:	83 9f       	mul	r24, r19
    5668:	a0 0d       	add	r26, r0
    566a:	61 1d       	adc	r22, r1
    566c:	22 1f       	adc	r18, r18
    566e:	74 9f       	mul	r23, r20
    5670:	33 27       	eor	r19, r19
    5672:	a0 0d       	add	r26, r0
    5674:	61 1d       	adc	r22, r1
    5676:	23 1f       	adc	r18, r19
    5678:	84 9f       	mul	r24, r20
    567a:	60 0d       	add	r22, r0
    567c:	21 1d       	adc	r18, r1
    567e:	82 2f       	mov	r24, r18
    5680:	76 2f       	mov	r23, r22
    5682:	6a 2f       	mov	r22, r26
    5684:	11 24       	eor	r1, r1
    5686:	9f 57       	subi	r25, 0x7F	; 127
    5688:	50 40       	sbci	r21, 0x00	; 0
    568a:	9a f0       	brmi	.+38     	; 0x56b2 <__mulsf3_pse+0x88>
    568c:	f1 f0       	breq	.+60     	; 0x56ca <__mulsf3_pse+0xa0>
    568e:	88 23       	and	r24, r24
    5690:	4a f0       	brmi	.+18     	; 0x56a4 <__mulsf3_pse+0x7a>
    5692:	ee 0f       	add	r30, r30
    5694:	ff 1f       	adc	r31, r31
    5696:	bb 1f       	adc	r27, r27
    5698:	66 1f       	adc	r22, r22
    569a:	77 1f       	adc	r23, r23
    569c:	88 1f       	adc	r24, r24
    569e:	91 50       	subi	r25, 0x01	; 1
    56a0:	50 40       	sbci	r21, 0x00	; 0
    56a2:	a9 f7       	brne	.-22     	; 0x568e <__mulsf3_pse+0x64>
    56a4:	9e 3f       	cpi	r25, 0xFE	; 254
    56a6:	51 05       	cpc	r21, r1
    56a8:	80 f0       	brcs	.+32     	; 0x56ca <__mulsf3_pse+0xa0>
    56aa:	0c 94 a9 2a 	jmp	0x5552	; 0x5552 <__fp_inf>
    56ae:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__fp_szero>
    56b2:	5f 3f       	cpi	r21, 0xFF	; 255
    56b4:	e4 f3       	brlt	.-8      	; 0x56ae <__mulsf3_pse+0x84>
    56b6:	98 3e       	cpi	r25, 0xE8	; 232
    56b8:	d4 f3       	brlt	.-12     	; 0x56ae <__mulsf3_pse+0x84>
    56ba:	86 95       	lsr	r24
    56bc:	77 95       	ror	r23
    56be:	67 95       	ror	r22
    56c0:	b7 95       	ror	r27
    56c2:	f7 95       	ror	r31
    56c4:	e7 95       	ror	r30
    56c6:	9f 5f       	subi	r25, 0xFF	; 255
    56c8:	c1 f7       	brne	.-16     	; 0x56ba <__mulsf3_pse+0x90>
    56ca:	fe 2b       	or	r31, r30
    56cc:	88 0f       	add	r24, r24
    56ce:	91 1d       	adc	r25, r1
    56d0:	96 95       	lsr	r25
    56d2:	87 95       	ror	r24
    56d4:	97 f9       	bld	r25, 7
    56d6:	08 95       	ret

000056d8 <__mulsi3>:
    56d8:	db 01       	movw	r26, r22
    56da:	8f 93       	push	r24
    56dc:	9f 93       	push	r25
    56de:	0e 94 04 2c 	call	0x5808	; 0x5808 <__muluhisi3>
    56e2:	bf 91       	pop	r27
    56e4:	af 91       	pop	r26
    56e6:	a2 9f       	mul	r26, r18
    56e8:	80 0d       	add	r24, r0
    56ea:	91 1d       	adc	r25, r1
    56ec:	a3 9f       	mul	r26, r19
    56ee:	90 0d       	add	r25, r0
    56f0:	b2 9f       	mul	r27, r18
    56f2:	90 0d       	add	r25, r0
    56f4:	11 24       	eor	r1, r1
    56f6:	08 95       	ret

000056f8 <__udivmodhi4>:
    56f8:	aa 1b       	sub	r26, r26
    56fa:	bb 1b       	sub	r27, r27
    56fc:	51 e1       	ldi	r21, 0x11	; 17
    56fe:	07 c0       	rjmp	.+14     	; 0x570e <__udivmodhi4_ep>

00005700 <__udivmodhi4_loop>:
    5700:	aa 1f       	adc	r26, r26
    5702:	bb 1f       	adc	r27, r27
    5704:	a6 17       	cp	r26, r22
    5706:	b7 07       	cpc	r27, r23
    5708:	10 f0       	brcs	.+4      	; 0x570e <__udivmodhi4_ep>
    570a:	a6 1b       	sub	r26, r22
    570c:	b7 0b       	sbc	r27, r23

0000570e <__udivmodhi4_ep>:
    570e:	88 1f       	adc	r24, r24
    5710:	99 1f       	adc	r25, r25
    5712:	5a 95       	dec	r21
    5714:	a9 f7       	brne	.-22     	; 0x5700 <__udivmodhi4_loop>
    5716:	80 95       	com	r24
    5718:	90 95       	com	r25
    571a:	bc 01       	movw	r22, r24
    571c:	cd 01       	movw	r24, r26
    571e:	08 95       	ret

00005720 <__divmodhi4>:
    5720:	97 fb       	bst	r25, 7
    5722:	07 2e       	mov	r0, r23
    5724:	16 f4       	brtc	.+4      	; 0x572a <__divmodhi4+0xa>
    5726:	00 94       	com	r0
    5728:	07 d0       	rcall	.+14     	; 0x5738 <__divmodhi4_neg1>
    572a:	77 fd       	sbrc	r23, 7
    572c:	09 d0       	rcall	.+18     	; 0x5740 <__divmodhi4_neg2>
    572e:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <__udivmodhi4>
    5732:	07 fc       	sbrc	r0, 7
    5734:	05 d0       	rcall	.+10     	; 0x5740 <__divmodhi4_neg2>
    5736:	3e f4       	brtc	.+14     	; 0x5746 <__divmodhi4_exit>

00005738 <__divmodhi4_neg1>:
    5738:	90 95       	com	r25
    573a:	81 95       	neg	r24
    573c:	9f 4f       	sbci	r25, 0xFF	; 255
    573e:	08 95       	ret

00005740 <__divmodhi4_neg2>:
    5740:	70 95       	com	r23
    5742:	61 95       	neg	r22
    5744:	7f 4f       	sbci	r23, 0xFF	; 255

00005746 <__divmodhi4_exit>:
    5746:	08 95       	ret

00005748 <__udivmodsi4>:
    5748:	a1 e2       	ldi	r26, 0x21	; 33
    574a:	1a 2e       	mov	r1, r26
    574c:	aa 1b       	sub	r26, r26
    574e:	bb 1b       	sub	r27, r27
    5750:	fd 01       	movw	r30, r26
    5752:	0d c0       	rjmp	.+26     	; 0x576e <__udivmodsi4_ep>

00005754 <__udivmodsi4_loop>:
    5754:	aa 1f       	adc	r26, r26
    5756:	bb 1f       	adc	r27, r27
    5758:	ee 1f       	adc	r30, r30
    575a:	ff 1f       	adc	r31, r31
    575c:	a2 17       	cp	r26, r18
    575e:	b3 07       	cpc	r27, r19
    5760:	e4 07       	cpc	r30, r20
    5762:	f5 07       	cpc	r31, r21
    5764:	20 f0       	brcs	.+8      	; 0x576e <__udivmodsi4_ep>
    5766:	a2 1b       	sub	r26, r18
    5768:	b3 0b       	sbc	r27, r19
    576a:	e4 0b       	sbc	r30, r20
    576c:	f5 0b       	sbc	r31, r21

0000576e <__udivmodsi4_ep>:
    576e:	66 1f       	adc	r22, r22
    5770:	77 1f       	adc	r23, r23
    5772:	88 1f       	adc	r24, r24
    5774:	99 1f       	adc	r25, r25
    5776:	1a 94       	dec	r1
    5778:	69 f7       	brne	.-38     	; 0x5754 <__udivmodsi4_loop>
    577a:	60 95       	com	r22
    577c:	70 95       	com	r23
    577e:	80 95       	com	r24
    5780:	90 95       	com	r25
    5782:	9b 01       	movw	r18, r22
    5784:	ac 01       	movw	r20, r24
    5786:	bd 01       	movw	r22, r26
    5788:	cf 01       	movw	r24, r30
    578a:	08 95       	ret

0000578c <__divmodsi4>:
    578c:	05 2e       	mov	r0, r21
    578e:	97 fb       	bst	r25, 7
    5790:	1e f4       	brtc	.+6      	; 0x5798 <__divmodsi4+0xc>
    5792:	00 94       	com	r0
    5794:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <__negsi2>
    5798:	57 fd       	sbrc	r21, 7
    579a:	07 d0       	rcall	.+14     	; 0x57aa <__divmodsi4_neg2>
    579c:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__udivmodsi4>
    57a0:	07 fc       	sbrc	r0, 7
    57a2:	03 d0       	rcall	.+6      	; 0x57aa <__divmodsi4_neg2>
    57a4:	4e f4       	brtc	.+18     	; 0x57b8 <__divmodsi4_exit>
    57a6:	0c 94 dd 2b 	jmp	0x57ba	; 0x57ba <__negsi2>

000057aa <__divmodsi4_neg2>:
    57aa:	50 95       	com	r21
    57ac:	40 95       	com	r20
    57ae:	30 95       	com	r19
    57b0:	21 95       	neg	r18
    57b2:	3f 4f       	sbci	r19, 0xFF	; 255
    57b4:	4f 4f       	sbci	r20, 0xFF	; 255
    57b6:	5f 4f       	sbci	r21, 0xFF	; 255

000057b8 <__divmodsi4_exit>:
    57b8:	08 95       	ret

000057ba <__negsi2>:
    57ba:	90 95       	com	r25
    57bc:	80 95       	com	r24
    57be:	70 95       	com	r23
    57c0:	61 95       	neg	r22
    57c2:	7f 4f       	sbci	r23, 0xFF	; 255
    57c4:	8f 4f       	sbci	r24, 0xFF	; 255
    57c6:	9f 4f       	sbci	r25, 0xFF	; 255
    57c8:	08 95       	ret

000057ca <__tablejump2__>:
    57ca:	ee 0f       	add	r30, r30
    57cc:	ff 1f       	adc	r31, r31
    57ce:	00 24       	eor	r0, r0
    57d0:	00 1c       	adc	r0, r0
    57d2:	0b be       	out	0x3b, r0	; 59
    57d4:	07 90       	elpm	r0, Z+
    57d6:	f6 91       	elpm	r31, Z
    57d8:	e0 2d       	mov	r30, r0
    57da:	09 94       	ijmp

000057dc <__umulhisi3>:
    57dc:	a2 9f       	mul	r26, r18
    57de:	b0 01       	movw	r22, r0
    57e0:	b3 9f       	mul	r27, r19
    57e2:	c0 01       	movw	r24, r0
    57e4:	a3 9f       	mul	r26, r19
    57e6:	70 0d       	add	r23, r0
    57e8:	81 1d       	adc	r24, r1
    57ea:	11 24       	eor	r1, r1
    57ec:	91 1d       	adc	r25, r1
    57ee:	b2 9f       	mul	r27, r18
    57f0:	70 0d       	add	r23, r0
    57f2:	81 1d       	adc	r24, r1
    57f4:	11 24       	eor	r1, r1
    57f6:	91 1d       	adc	r25, r1
    57f8:	08 95       	ret

000057fa <__usmulhisi3>:
    57fa:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <__umulhisi3>

000057fe <__usmulhisi3_tail>:
    57fe:	b7 ff       	sbrs	r27, 7
    5800:	08 95       	ret
    5802:	82 1b       	sub	r24, r18
    5804:	93 0b       	sbc	r25, r19
    5806:	08 95       	ret

00005808 <__muluhisi3>:
    5808:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <__umulhisi3>
    580c:	a5 9f       	mul	r26, r21
    580e:	90 0d       	add	r25, r0
    5810:	b4 9f       	mul	r27, r20
    5812:	90 0d       	add	r25, r0
    5814:	a4 9f       	mul	r26, r20
    5816:	80 0d       	add	r24, r0
    5818:	91 1d       	adc	r25, r1
    581a:	11 24       	eor	r1, r1
    581c:	08 95       	ret

0000581e <__mulshisi3>:
    581e:	b7 ff       	sbrs	r27, 7
    5820:	0c 94 04 2c 	jmp	0x5808	; 0x5808 <__muluhisi3>

00005824 <__mulohisi3>:
    5824:	0e 94 04 2c 	call	0x5808	; 0x5808 <__muluhisi3>
    5828:	82 1b       	sub	r24, r18
    582a:	93 0b       	sbc	r25, r19
    582c:	08 95       	ret

0000582e <malloc>:
    582e:	0f 93       	push	r16
    5830:	1f 93       	push	r17
    5832:	cf 93       	push	r28
    5834:	df 93       	push	r29
    5836:	82 30       	cpi	r24, 0x02	; 2
    5838:	91 05       	cpc	r25, r1
    583a:	10 f4       	brcc	.+4      	; 0x5840 <malloc+0x12>
    583c:	82 e0       	ldi	r24, 0x02	; 2
    583e:	90 e0       	ldi	r25, 0x00	; 0
    5840:	e0 91 2d 48 	lds	r30, 0x482D	; 0x80482d <__flp>
    5844:	f0 91 2e 48 	lds	r31, 0x482E	; 0x80482e <__flp+0x1>
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	a0 e0       	ldi	r26, 0x00	; 0
    584e:	b0 e0       	ldi	r27, 0x00	; 0
    5850:	30 97       	sbiw	r30, 0x00	; 0
    5852:	19 f1       	breq	.+70     	; 0x589a <malloc+0x6c>
    5854:	40 81       	ld	r20, Z
    5856:	51 81       	ldd	r21, Z+1	; 0x01
    5858:	02 81       	ldd	r16, Z+2	; 0x02
    585a:	13 81       	ldd	r17, Z+3	; 0x03
    585c:	48 17       	cp	r20, r24
    585e:	59 07       	cpc	r21, r25
    5860:	c8 f0       	brcs	.+50     	; 0x5894 <malloc+0x66>
    5862:	84 17       	cp	r24, r20
    5864:	95 07       	cpc	r25, r21
    5866:	69 f4       	brne	.+26     	; 0x5882 <malloc+0x54>
    5868:	10 97       	sbiw	r26, 0x00	; 0
    586a:	31 f0       	breq	.+12     	; 0x5878 <malloc+0x4a>
    586c:	12 96       	adiw	r26, 0x02	; 2
    586e:	0c 93       	st	X, r16
    5870:	12 97       	sbiw	r26, 0x02	; 2
    5872:	13 96       	adiw	r26, 0x03	; 3
    5874:	1c 93       	st	X, r17
    5876:	27 c0       	rjmp	.+78     	; 0x58c6 <malloc+0x98>
    5878:	00 93 2d 48 	sts	0x482D, r16	; 0x80482d <__flp>
    587c:	10 93 2e 48 	sts	0x482E, r17	; 0x80482e <__flp+0x1>
    5880:	22 c0       	rjmp	.+68     	; 0x58c6 <malloc+0x98>
    5882:	21 15       	cp	r18, r1
    5884:	31 05       	cpc	r19, r1
    5886:	19 f0       	breq	.+6      	; 0x588e <malloc+0x60>
    5888:	42 17       	cp	r20, r18
    588a:	53 07       	cpc	r21, r19
    588c:	18 f4       	brcc	.+6      	; 0x5894 <malloc+0x66>
    588e:	9a 01       	movw	r18, r20
    5890:	bd 01       	movw	r22, r26
    5892:	ef 01       	movw	r28, r30
    5894:	df 01       	movw	r26, r30
    5896:	f8 01       	movw	r30, r16
    5898:	db cf       	rjmp	.-74     	; 0x5850 <malloc+0x22>
    589a:	21 15       	cp	r18, r1
    589c:	31 05       	cpc	r19, r1
    589e:	f9 f0       	breq	.+62     	; 0x58de <malloc+0xb0>
    58a0:	28 1b       	sub	r18, r24
    58a2:	39 0b       	sbc	r19, r25
    58a4:	24 30       	cpi	r18, 0x04	; 4
    58a6:	31 05       	cpc	r19, r1
    58a8:	80 f4       	brcc	.+32     	; 0x58ca <malloc+0x9c>
    58aa:	8a 81       	ldd	r24, Y+2	; 0x02
    58ac:	9b 81       	ldd	r25, Y+3	; 0x03
    58ae:	61 15       	cp	r22, r1
    58b0:	71 05       	cpc	r23, r1
    58b2:	21 f0       	breq	.+8      	; 0x58bc <malloc+0x8e>
    58b4:	fb 01       	movw	r30, r22
    58b6:	82 83       	std	Z+2, r24	; 0x02
    58b8:	93 83       	std	Z+3, r25	; 0x03
    58ba:	04 c0       	rjmp	.+8      	; 0x58c4 <malloc+0x96>
    58bc:	80 93 2d 48 	sts	0x482D, r24	; 0x80482d <__flp>
    58c0:	90 93 2e 48 	sts	0x482E, r25	; 0x80482e <__flp+0x1>
    58c4:	fe 01       	movw	r30, r28
    58c6:	32 96       	adiw	r30, 0x02	; 2
    58c8:	44 c0       	rjmp	.+136    	; 0x5952 <malloc+0x124>
    58ca:	fe 01       	movw	r30, r28
    58cc:	e2 0f       	add	r30, r18
    58ce:	f3 1f       	adc	r31, r19
    58d0:	81 93       	st	Z+, r24
    58d2:	91 93       	st	Z+, r25
    58d4:	22 50       	subi	r18, 0x02	; 2
    58d6:	31 09       	sbc	r19, r1
    58d8:	28 83       	st	Y, r18
    58da:	39 83       	std	Y+1, r19	; 0x01
    58dc:	3a c0       	rjmp	.+116    	; 0x5952 <malloc+0x124>
    58de:	20 91 2b 48 	lds	r18, 0x482B	; 0x80482b <__brkval>
    58e2:	30 91 2c 48 	lds	r19, 0x482C	; 0x80482c <__brkval+0x1>
    58e6:	23 2b       	or	r18, r19
    58e8:	41 f4       	brne	.+16     	; 0x58fa <malloc+0xcc>
    58ea:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    58ee:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    58f2:	20 93 2b 48 	sts	0x482B, r18	; 0x80482b <__brkval>
    58f6:	30 93 2c 48 	sts	0x482C, r19	; 0x80482c <__brkval+0x1>
    58fa:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    58fe:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    5902:	21 15       	cp	r18, r1
    5904:	31 05       	cpc	r19, r1
    5906:	41 f4       	brne	.+16     	; 0x5918 <malloc+0xea>
    5908:	2d b7       	in	r18, 0x3d	; 61
    590a:	3e b7       	in	r19, 0x3e	; 62
    590c:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    5910:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    5914:	24 1b       	sub	r18, r20
    5916:	35 0b       	sbc	r19, r21
    5918:	e0 91 2b 48 	lds	r30, 0x482B	; 0x80482b <__brkval>
    591c:	f0 91 2c 48 	lds	r31, 0x482C	; 0x80482c <__brkval+0x1>
    5920:	e2 17       	cp	r30, r18
    5922:	f3 07       	cpc	r31, r19
    5924:	a0 f4       	brcc	.+40     	; 0x594e <malloc+0x120>
    5926:	2e 1b       	sub	r18, r30
    5928:	3f 0b       	sbc	r19, r31
    592a:	28 17       	cp	r18, r24
    592c:	39 07       	cpc	r19, r25
    592e:	78 f0       	brcs	.+30     	; 0x594e <malloc+0x120>
    5930:	ac 01       	movw	r20, r24
    5932:	4e 5f       	subi	r20, 0xFE	; 254
    5934:	5f 4f       	sbci	r21, 0xFF	; 255
    5936:	24 17       	cp	r18, r20
    5938:	35 07       	cpc	r19, r21
    593a:	48 f0       	brcs	.+18     	; 0x594e <malloc+0x120>
    593c:	4e 0f       	add	r20, r30
    593e:	5f 1f       	adc	r21, r31
    5940:	40 93 2b 48 	sts	0x482B, r20	; 0x80482b <__brkval>
    5944:	50 93 2c 48 	sts	0x482C, r21	; 0x80482c <__brkval+0x1>
    5948:	81 93       	st	Z+, r24
    594a:	91 93       	st	Z+, r25
    594c:	02 c0       	rjmp	.+4      	; 0x5952 <malloc+0x124>
    594e:	e0 e0       	ldi	r30, 0x00	; 0
    5950:	f0 e0       	ldi	r31, 0x00	; 0
    5952:	cf 01       	movw	r24, r30
    5954:	df 91       	pop	r29
    5956:	cf 91       	pop	r28
    5958:	1f 91       	pop	r17
    595a:	0f 91       	pop	r16
    595c:	08 95       	ret

0000595e <free>:
    595e:	cf 93       	push	r28
    5960:	df 93       	push	r29
    5962:	00 97       	sbiw	r24, 0x00	; 0
    5964:	09 f4       	brne	.+2      	; 0x5968 <free+0xa>
    5966:	81 c0       	rjmp	.+258    	; 0x5a6a <free+0x10c>
    5968:	fc 01       	movw	r30, r24
    596a:	32 97       	sbiw	r30, 0x02	; 2
    596c:	12 82       	std	Z+2, r1	; 0x02
    596e:	13 82       	std	Z+3, r1	; 0x03
    5970:	a0 91 2d 48 	lds	r26, 0x482D	; 0x80482d <__flp>
    5974:	b0 91 2e 48 	lds	r27, 0x482E	; 0x80482e <__flp+0x1>
    5978:	10 97       	sbiw	r26, 0x00	; 0
    597a:	81 f4       	brne	.+32     	; 0x599c <free+0x3e>
    597c:	20 81       	ld	r18, Z
    597e:	31 81       	ldd	r19, Z+1	; 0x01
    5980:	82 0f       	add	r24, r18
    5982:	93 1f       	adc	r25, r19
    5984:	20 91 2b 48 	lds	r18, 0x482B	; 0x80482b <__brkval>
    5988:	30 91 2c 48 	lds	r19, 0x482C	; 0x80482c <__brkval+0x1>
    598c:	28 17       	cp	r18, r24
    598e:	39 07       	cpc	r19, r25
    5990:	51 f5       	brne	.+84     	; 0x59e6 <free+0x88>
    5992:	e0 93 2b 48 	sts	0x482B, r30	; 0x80482b <__brkval>
    5996:	f0 93 2c 48 	sts	0x482C, r31	; 0x80482c <__brkval+0x1>
    599a:	67 c0       	rjmp	.+206    	; 0x5a6a <free+0x10c>
    599c:	ed 01       	movw	r28, r26
    599e:	20 e0       	ldi	r18, 0x00	; 0
    59a0:	30 e0       	ldi	r19, 0x00	; 0
    59a2:	ce 17       	cp	r28, r30
    59a4:	df 07       	cpc	r29, r31
    59a6:	40 f4       	brcc	.+16     	; 0x59b8 <free+0x5a>
    59a8:	4a 81       	ldd	r20, Y+2	; 0x02
    59aa:	5b 81       	ldd	r21, Y+3	; 0x03
    59ac:	9e 01       	movw	r18, r28
    59ae:	41 15       	cp	r20, r1
    59b0:	51 05       	cpc	r21, r1
    59b2:	f1 f0       	breq	.+60     	; 0x59f0 <free+0x92>
    59b4:	ea 01       	movw	r28, r20
    59b6:	f5 cf       	rjmp	.-22     	; 0x59a2 <free+0x44>
    59b8:	c2 83       	std	Z+2, r28	; 0x02
    59ba:	d3 83       	std	Z+3, r29	; 0x03
    59bc:	40 81       	ld	r20, Z
    59be:	51 81       	ldd	r21, Z+1	; 0x01
    59c0:	84 0f       	add	r24, r20
    59c2:	95 1f       	adc	r25, r21
    59c4:	c8 17       	cp	r28, r24
    59c6:	d9 07       	cpc	r29, r25
    59c8:	59 f4       	brne	.+22     	; 0x59e0 <free+0x82>
    59ca:	88 81       	ld	r24, Y
    59cc:	99 81       	ldd	r25, Y+1	; 0x01
    59ce:	84 0f       	add	r24, r20
    59d0:	95 1f       	adc	r25, r21
    59d2:	02 96       	adiw	r24, 0x02	; 2
    59d4:	80 83       	st	Z, r24
    59d6:	91 83       	std	Z+1, r25	; 0x01
    59d8:	8a 81       	ldd	r24, Y+2	; 0x02
    59da:	9b 81       	ldd	r25, Y+3	; 0x03
    59dc:	82 83       	std	Z+2, r24	; 0x02
    59de:	93 83       	std	Z+3, r25	; 0x03
    59e0:	21 15       	cp	r18, r1
    59e2:	31 05       	cpc	r19, r1
    59e4:	29 f4       	brne	.+10     	; 0x59f0 <free+0x92>
    59e6:	e0 93 2d 48 	sts	0x482D, r30	; 0x80482d <__flp>
    59ea:	f0 93 2e 48 	sts	0x482E, r31	; 0x80482e <__flp+0x1>
    59ee:	3d c0       	rjmp	.+122    	; 0x5a6a <free+0x10c>
    59f0:	e9 01       	movw	r28, r18
    59f2:	ea 83       	std	Y+2, r30	; 0x02
    59f4:	fb 83       	std	Y+3, r31	; 0x03
    59f6:	49 91       	ld	r20, Y+
    59f8:	59 91       	ld	r21, Y+
    59fa:	c4 0f       	add	r28, r20
    59fc:	d5 1f       	adc	r29, r21
    59fe:	ec 17       	cp	r30, r28
    5a00:	fd 07       	cpc	r31, r29
    5a02:	61 f4       	brne	.+24     	; 0x5a1c <free+0xbe>
    5a04:	80 81       	ld	r24, Z
    5a06:	91 81       	ldd	r25, Z+1	; 0x01
    5a08:	84 0f       	add	r24, r20
    5a0a:	95 1f       	adc	r25, r21
    5a0c:	02 96       	adiw	r24, 0x02	; 2
    5a0e:	e9 01       	movw	r28, r18
    5a10:	88 83       	st	Y, r24
    5a12:	99 83       	std	Y+1, r25	; 0x01
    5a14:	82 81       	ldd	r24, Z+2	; 0x02
    5a16:	93 81       	ldd	r25, Z+3	; 0x03
    5a18:	8a 83       	std	Y+2, r24	; 0x02
    5a1a:	9b 83       	std	Y+3, r25	; 0x03
    5a1c:	e0 e0       	ldi	r30, 0x00	; 0
    5a1e:	f0 e0       	ldi	r31, 0x00	; 0
    5a20:	12 96       	adiw	r26, 0x02	; 2
    5a22:	8d 91       	ld	r24, X+
    5a24:	9c 91       	ld	r25, X
    5a26:	13 97       	sbiw	r26, 0x03	; 3
    5a28:	00 97       	sbiw	r24, 0x00	; 0
    5a2a:	19 f0       	breq	.+6      	; 0x5a32 <free+0xd4>
    5a2c:	fd 01       	movw	r30, r26
    5a2e:	dc 01       	movw	r26, r24
    5a30:	f7 cf       	rjmp	.-18     	; 0x5a20 <free+0xc2>
    5a32:	8d 91       	ld	r24, X+
    5a34:	9c 91       	ld	r25, X
    5a36:	11 97       	sbiw	r26, 0x01	; 1
    5a38:	9d 01       	movw	r18, r26
    5a3a:	2e 5f       	subi	r18, 0xFE	; 254
    5a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a3e:	82 0f       	add	r24, r18
    5a40:	93 1f       	adc	r25, r19
    5a42:	20 91 2b 48 	lds	r18, 0x482B	; 0x80482b <__brkval>
    5a46:	30 91 2c 48 	lds	r19, 0x482C	; 0x80482c <__brkval+0x1>
    5a4a:	28 17       	cp	r18, r24
    5a4c:	39 07       	cpc	r19, r25
    5a4e:	69 f4       	brne	.+26     	; 0x5a6a <free+0x10c>
    5a50:	30 97       	sbiw	r30, 0x00	; 0
    5a52:	29 f4       	brne	.+10     	; 0x5a5e <free+0x100>
    5a54:	10 92 2d 48 	sts	0x482D, r1	; 0x80482d <__flp>
    5a58:	10 92 2e 48 	sts	0x482E, r1	; 0x80482e <__flp+0x1>
    5a5c:	02 c0       	rjmp	.+4      	; 0x5a62 <free+0x104>
    5a5e:	12 82       	std	Z+2, r1	; 0x02
    5a60:	13 82       	std	Z+3, r1	; 0x03
    5a62:	a0 93 2b 48 	sts	0x482B, r26	; 0x80482b <__brkval>
    5a66:	b0 93 2c 48 	sts	0x482C, r27	; 0x80482c <__brkval+0x1>
    5a6a:	df 91       	pop	r29
    5a6c:	cf 91       	pop	r28
    5a6e:	08 95       	ret

00005a70 <toupper>:
    5a70:	91 11       	cpse	r25, r1
    5a72:	08 95       	ret
    5a74:	81 56       	subi	r24, 0x61	; 97
    5a76:	8a 51       	subi	r24, 0x1A	; 26
    5a78:	08 f4       	brcc	.+2      	; 0x5a7c <toupper+0xc>
    5a7a:	80 52       	subi	r24, 0x20	; 32
    5a7c:	85 58       	subi	r24, 0x85	; 133
    5a7e:	08 95       	ret

00005a80 <strncpy>:
    5a80:	fb 01       	movw	r30, r22
    5a82:	dc 01       	movw	r26, r24
    5a84:	41 50       	subi	r20, 0x01	; 1
    5a86:	50 40       	sbci	r21, 0x00	; 0
    5a88:	48 f0       	brcs	.+18     	; 0x5a9c <strncpy+0x1c>
    5a8a:	01 90       	ld	r0, Z+
    5a8c:	0d 92       	st	X+, r0
    5a8e:	00 20       	and	r0, r0
    5a90:	c9 f7       	brne	.-14     	; 0x5a84 <strncpy+0x4>
    5a92:	01 c0       	rjmp	.+2      	; 0x5a96 <strncpy+0x16>
    5a94:	1d 92       	st	X+, r1
    5a96:	41 50       	subi	r20, 0x01	; 1
    5a98:	50 40       	sbci	r21, 0x00	; 0
    5a9a:	e0 f7       	brcc	.-8      	; 0x5a94 <strncpy+0x14>
    5a9c:	08 95       	ret

00005a9e <sprintf>:
    5a9e:	0f 93       	push	r16
    5aa0:	1f 93       	push	r17
    5aa2:	cf 93       	push	r28
    5aa4:	df 93       	push	r29
    5aa6:	cd b7       	in	r28, 0x3d	; 61
    5aa8:	de b7       	in	r29, 0x3e	; 62
    5aaa:	2e 97       	sbiw	r28, 0x0e	; 14
    5aac:	cd bf       	out	0x3d, r28	; 61
    5aae:	de bf       	out	0x3e, r29	; 62
    5ab0:	0d 89       	ldd	r16, Y+21	; 0x15
    5ab2:	1e 89       	ldd	r17, Y+22	; 0x16
    5ab4:	86 e0       	ldi	r24, 0x06	; 6
    5ab6:	8c 83       	std	Y+4, r24	; 0x04
    5ab8:	09 83       	std	Y+1, r16	; 0x01
    5aba:	1a 83       	std	Y+2, r17	; 0x02
    5abc:	8f ef       	ldi	r24, 0xFF	; 255
    5abe:	9f e7       	ldi	r25, 0x7F	; 127
    5ac0:	8d 83       	std	Y+5, r24	; 0x05
    5ac2:	9e 83       	std	Y+6, r25	; 0x06
    5ac4:	ae 01       	movw	r20, r28
    5ac6:	47 5e       	subi	r20, 0xE7	; 231
    5ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    5aca:	6f 89       	ldd	r22, Y+23	; 0x17
    5acc:	78 8d       	ldd	r23, Y+24	; 0x18
    5ace:	ce 01       	movw	r24, r28
    5ad0:	01 96       	adiw	r24, 0x01	; 1
    5ad2:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <vfprintf>
    5ad6:	ef 81       	ldd	r30, Y+7	; 0x07
    5ad8:	f8 85       	ldd	r31, Y+8	; 0x08
    5ada:	e0 0f       	add	r30, r16
    5adc:	f1 1f       	adc	r31, r17
    5ade:	10 82       	st	Z, r1
    5ae0:	2e 96       	adiw	r28, 0x0e	; 14
    5ae2:	cd bf       	out	0x3d, r28	; 61
    5ae4:	de bf       	out	0x3e, r29	; 62
    5ae6:	df 91       	pop	r29
    5ae8:	cf 91       	pop	r28
    5aea:	1f 91       	pop	r17
    5aec:	0f 91       	pop	r16
    5aee:	08 95       	ret

00005af0 <vfprintf>:
    5af0:	2f 92       	push	r2
    5af2:	3f 92       	push	r3
    5af4:	4f 92       	push	r4
    5af6:	5f 92       	push	r5
    5af8:	6f 92       	push	r6
    5afa:	7f 92       	push	r7
    5afc:	8f 92       	push	r8
    5afe:	9f 92       	push	r9
    5b00:	af 92       	push	r10
    5b02:	bf 92       	push	r11
    5b04:	cf 92       	push	r12
    5b06:	df 92       	push	r13
    5b08:	ef 92       	push	r14
    5b0a:	ff 92       	push	r15
    5b0c:	0f 93       	push	r16
    5b0e:	1f 93       	push	r17
    5b10:	cf 93       	push	r28
    5b12:	df 93       	push	r29
    5b14:	cd b7       	in	r28, 0x3d	; 61
    5b16:	de b7       	in	r29, 0x3e	; 62
    5b18:	2b 97       	sbiw	r28, 0x0b	; 11
    5b1a:	cd bf       	out	0x3d, r28	; 61
    5b1c:	de bf       	out	0x3e, r29	; 62
    5b1e:	6c 01       	movw	r12, r24
    5b20:	7b 01       	movw	r14, r22
    5b22:	8a 01       	movw	r16, r20
    5b24:	fc 01       	movw	r30, r24
    5b26:	16 82       	std	Z+6, r1	; 0x06
    5b28:	17 82       	std	Z+7, r1	; 0x07
    5b2a:	83 81       	ldd	r24, Z+3	; 0x03
    5b2c:	81 ff       	sbrs	r24, 1
    5b2e:	cc c1       	rjmp	.+920    	; 0x5ec8 <vfprintf+0x3d8>
    5b30:	ce 01       	movw	r24, r28
    5b32:	01 96       	adiw	r24, 0x01	; 1
    5b34:	3c 01       	movw	r6, r24
    5b36:	f6 01       	movw	r30, r12
    5b38:	93 81       	ldd	r25, Z+3	; 0x03
    5b3a:	f7 01       	movw	r30, r14
    5b3c:	93 fd       	sbrc	r25, 3
    5b3e:	85 91       	lpm	r24, Z+
    5b40:	93 ff       	sbrs	r25, 3
    5b42:	81 91       	ld	r24, Z+
    5b44:	7f 01       	movw	r14, r30
    5b46:	88 23       	and	r24, r24
    5b48:	09 f4       	brne	.+2      	; 0x5b4c <vfprintf+0x5c>
    5b4a:	ba c1       	rjmp	.+884    	; 0x5ec0 <vfprintf+0x3d0>
    5b4c:	85 32       	cpi	r24, 0x25	; 37
    5b4e:	39 f4       	brne	.+14     	; 0x5b5e <vfprintf+0x6e>
    5b50:	93 fd       	sbrc	r25, 3
    5b52:	85 91       	lpm	r24, Z+
    5b54:	93 ff       	sbrs	r25, 3
    5b56:	81 91       	ld	r24, Z+
    5b58:	7f 01       	movw	r14, r30
    5b5a:	85 32       	cpi	r24, 0x25	; 37
    5b5c:	29 f4       	brne	.+10     	; 0x5b68 <vfprintf+0x78>
    5b5e:	b6 01       	movw	r22, r12
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <fputc>
    5b66:	e7 cf       	rjmp	.-50     	; 0x5b36 <vfprintf+0x46>
    5b68:	91 2c       	mov	r9, r1
    5b6a:	21 2c       	mov	r2, r1
    5b6c:	31 2c       	mov	r3, r1
    5b6e:	ff e1       	ldi	r31, 0x1F	; 31
    5b70:	f3 15       	cp	r31, r3
    5b72:	d8 f0       	brcs	.+54     	; 0x5baa <vfprintf+0xba>
    5b74:	8b 32       	cpi	r24, 0x2B	; 43
    5b76:	79 f0       	breq	.+30     	; 0x5b96 <vfprintf+0xa6>
    5b78:	38 f4       	brcc	.+14     	; 0x5b88 <vfprintf+0x98>
    5b7a:	80 32       	cpi	r24, 0x20	; 32
    5b7c:	79 f0       	breq	.+30     	; 0x5b9c <vfprintf+0xac>
    5b7e:	83 32       	cpi	r24, 0x23	; 35
    5b80:	a1 f4       	brne	.+40     	; 0x5baa <vfprintf+0xba>
    5b82:	23 2d       	mov	r18, r3
    5b84:	20 61       	ori	r18, 0x10	; 16
    5b86:	1d c0       	rjmp	.+58     	; 0x5bc2 <vfprintf+0xd2>
    5b88:	8d 32       	cpi	r24, 0x2D	; 45
    5b8a:	61 f0       	breq	.+24     	; 0x5ba4 <vfprintf+0xb4>
    5b8c:	80 33       	cpi	r24, 0x30	; 48
    5b8e:	69 f4       	brne	.+26     	; 0x5baa <vfprintf+0xba>
    5b90:	23 2d       	mov	r18, r3
    5b92:	21 60       	ori	r18, 0x01	; 1
    5b94:	16 c0       	rjmp	.+44     	; 0x5bc2 <vfprintf+0xd2>
    5b96:	83 2d       	mov	r24, r3
    5b98:	82 60       	ori	r24, 0x02	; 2
    5b9a:	38 2e       	mov	r3, r24
    5b9c:	e3 2d       	mov	r30, r3
    5b9e:	e4 60       	ori	r30, 0x04	; 4
    5ba0:	3e 2e       	mov	r3, r30
    5ba2:	2a c0       	rjmp	.+84     	; 0x5bf8 <vfprintf+0x108>
    5ba4:	f3 2d       	mov	r31, r3
    5ba6:	f8 60       	ori	r31, 0x08	; 8
    5ba8:	1d c0       	rjmp	.+58     	; 0x5be4 <vfprintf+0xf4>
    5baa:	37 fc       	sbrc	r3, 7
    5bac:	2d c0       	rjmp	.+90     	; 0x5c08 <vfprintf+0x118>
    5bae:	20 ed       	ldi	r18, 0xD0	; 208
    5bb0:	28 0f       	add	r18, r24
    5bb2:	2a 30       	cpi	r18, 0x0A	; 10
    5bb4:	40 f0       	brcs	.+16     	; 0x5bc6 <vfprintf+0xd6>
    5bb6:	8e 32       	cpi	r24, 0x2E	; 46
    5bb8:	b9 f4       	brne	.+46     	; 0x5be8 <vfprintf+0xf8>
    5bba:	36 fc       	sbrc	r3, 6
    5bbc:	81 c1       	rjmp	.+770    	; 0x5ec0 <vfprintf+0x3d0>
    5bbe:	23 2d       	mov	r18, r3
    5bc0:	20 64       	ori	r18, 0x40	; 64
    5bc2:	32 2e       	mov	r3, r18
    5bc4:	19 c0       	rjmp	.+50     	; 0x5bf8 <vfprintf+0x108>
    5bc6:	36 fe       	sbrs	r3, 6
    5bc8:	06 c0       	rjmp	.+12     	; 0x5bd6 <vfprintf+0xe6>
    5bca:	8a e0       	ldi	r24, 0x0A	; 10
    5bcc:	98 9e       	mul	r9, r24
    5bce:	20 0d       	add	r18, r0
    5bd0:	11 24       	eor	r1, r1
    5bd2:	92 2e       	mov	r9, r18
    5bd4:	11 c0       	rjmp	.+34     	; 0x5bf8 <vfprintf+0x108>
    5bd6:	ea e0       	ldi	r30, 0x0A	; 10
    5bd8:	2e 9e       	mul	r2, r30
    5bda:	20 0d       	add	r18, r0
    5bdc:	11 24       	eor	r1, r1
    5bde:	22 2e       	mov	r2, r18
    5be0:	f3 2d       	mov	r31, r3
    5be2:	f0 62       	ori	r31, 0x20	; 32
    5be4:	3f 2e       	mov	r3, r31
    5be6:	08 c0       	rjmp	.+16     	; 0x5bf8 <vfprintf+0x108>
    5be8:	8c 36       	cpi	r24, 0x6C	; 108
    5bea:	21 f4       	brne	.+8      	; 0x5bf4 <vfprintf+0x104>
    5bec:	83 2d       	mov	r24, r3
    5bee:	80 68       	ori	r24, 0x80	; 128
    5bf0:	38 2e       	mov	r3, r24
    5bf2:	02 c0       	rjmp	.+4      	; 0x5bf8 <vfprintf+0x108>
    5bf4:	88 36       	cpi	r24, 0x68	; 104
    5bf6:	41 f4       	brne	.+16     	; 0x5c08 <vfprintf+0x118>
    5bf8:	f7 01       	movw	r30, r14
    5bfa:	93 fd       	sbrc	r25, 3
    5bfc:	85 91       	lpm	r24, Z+
    5bfe:	93 ff       	sbrs	r25, 3
    5c00:	81 91       	ld	r24, Z+
    5c02:	7f 01       	movw	r14, r30
    5c04:	81 11       	cpse	r24, r1
    5c06:	b3 cf       	rjmp	.-154    	; 0x5b6e <vfprintf+0x7e>
    5c08:	98 2f       	mov	r25, r24
    5c0a:	9f 7d       	andi	r25, 0xDF	; 223
    5c0c:	95 54       	subi	r25, 0x45	; 69
    5c0e:	93 30       	cpi	r25, 0x03	; 3
    5c10:	28 f4       	brcc	.+10     	; 0x5c1c <vfprintf+0x12c>
    5c12:	0c 5f       	subi	r16, 0xFC	; 252
    5c14:	1f 4f       	sbci	r17, 0xFF	; 255
    5c16:	9f e3       	ldi	r25, 0x3F	; 63
    5c18:	99 83       	std	Y+1, r25	; 0x01
    5c1a:	0d c0       	rjmp	.+26     	; 0x5c36 <vfprintf+0x146>
    5c1c:	83 36       	cpi	r24, 0x63	; 99
    5c1e:	31 f0       	breq	.+12     	; 0x5c2c <vfprintf+0x13c>
    5c20:	83 37       	cpi	r24, 0x73	; 115
    5c22:	71 f0       	breq	.+28     	; 0x5c40 <vfprintf+0x150>
    5c24:	83 35       	cpi	r24, 0x53	; 83
    5c26:	09 f0       	breq	.+2      	; 0x5c2a <vfprintf+0x13a>
    5c28:	59 c0       	rjmp	.+178    	; 0x5cdc <vfprintf+0x1ec>
    5c2a:	21 c0       	rjmp	.+66     	; 0x5c6e <vfprintf+0x17e>
    5c2c:	f8 01       	movw	r30, r16
    5c2e:	80 81       	ld	r24, Z
    5c30:	89 83       	std	Y+1, r24	; 0x01
    5c32:	0e 5f       	subi	r16, 0xFE	; 254
    5c34:	1f 4f       	sbci	r17, 0xFF	; 255
    5c36:	88 24       	eor	r8, r8
    5c38:	83 94       	inc	r8
    5c3a:	91 2c       	mov	r9, r1
    5c3c:	53 01       	movw	r10, r6
    5c3e:	13 c0       	rjmp	.+38     	; 0x5c66 <vfprintf+0x176>
    5c40:	28 01       	movw	r4, r16
    5c42:	f2 e0       	ldi	r31, 0x02	; 2
    5c44:	4f 0e       	add	r4, r31
    5c46:	51 1c       	adc	r5, r1
    5c48:	f8 01       	movw	r30, r16
    5c4a:	a0 80       	ld	r10, Z
    5c4c:	b1 80       	ldd	r11, Z+1	; 0x01
    5c4e:	36 fe       	sbrs	r3, 6
    5c50:	03 c0       	rjmp	.+6      	; 0x5c58 <vfprintf+0x168>
    5c52:	69 2d       	mov	r22, r9
    5c54:	70 e0       	ldi	r23, 0x00	; 0
    5c56:	02 c0       	rjmp	.+4      	; 0x5c5c <vfprintf+0x16c>
    5c58:	6f ef       	ldi	r22, 0xFF	; 255
    5c5a:	7f ef       	ldi	r23, 0xFF	; 255
    5c5c:	c5 01       	movw	r24, r10
    5c5e:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <strnlen>
    5c62:	4c 01       	movw	r8, r24
    5c64:	82 01       	movw	r16, r4
    5c66:	f3 2d       	mov	r31, r3
    5c68:	ff 77       	andi	r31, 0x7F	; 127
    5c6a:	3f 2e       	mov	r3, r31
    5c6c:	16 c0       	rjmp	.+44     	; 0x5c9a <vfprintf+0x1aa>
    5c6e:	28 01       	movw	r4, r16
    5c70:	22 e0       	ldi	r18, 0x02	; 2
    5c72:	42 0e       	add	r4, r18
    5c74:	51 1c       	adc	r5, r1
    5c76:	f8 01       	movw	r30, r16
    5c78:	a0 80       	ld	r10, Z
    5c7a:	b1 80       	ldd	r11, Z+1	; 0x01
    5c7c:	36 fe       	sbrs	r3, 6
    5c7e:	03 c0       	rjmp	.+6      	; 0x5c86 <vfprintf+0x196>
    5c80:	69 2d       	mov	r22, r9
    5c82:	70 e0       	ldi	r23, 0x00	; 0
    5c84:	02 c0       	rjmp	.+4      	; 0x5c8a <vfprintf+0x19a>
    5c86:	6f ef       	ldi	r22, 0xFF	; 255
    5c88:	7f ef       	ldi	r23, 0xFF	; 255
    5c8a:	c5 01       	movw	r24, r10
    5c8c:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <strnlen_P>
    5c90:	4c 01       	movw	r8, r24
    5c92:	f3 2d       	mov	r31, r3
    5c94:	f0 68       	ori	r31, 0x80	; 128
    5c96:	3f 2e       	mov	r3, r31
    5c98:	82 01       	movw	r16, r4
    5c9a:	33 fc       	sbrc	r3, 3
    5c9c:	1b c0       	rjmp	.+54     	; 0x5cd4 <vfprintf+0x1e4>
    5c9e:	82 2d       	mov	r24, r2
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	88 16       	cp	r8, r24
    5ca4:	99 06       	cpc	r9, r25
    5ca6:	b0 f4       	brcc	.+44     	; 0x5cd4 <vfprintf+0x1e4>
    5ca8:	b6 01       	movw	r22, r12
    5caa:	80 e2       	ldi	r24, 0x20	; 32
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <fputc>
    5cb2:	2a 94       	dec	r2
    5cb4:	f4 cf       	rjmp	.-24     	; 0x5c9e <vfprintf+0x1ae>
    5cb6:	f5 01       	movw	r30, r10
    5cb8:	37 fc       	sbrc	r3, 7
    5cba:	85 91       	lpm	r24, Z+
    5cbc:	37 fe       	sbrs	r3, 7
    5cbe:	81 91       	ld	r24, Z+
    5cc0:	5f 01       	movw	r10, r30
    5cc2:	b6 01       	movw	r22, r12
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <fputc>
    5cca:	21 10       	cpse	r2, r1
    5ccc:	2a 94       	dec	r2
    5cce:	21 e0       	ldi	r18, 0x01	; 1
    5cd0:	82 1a       	sub	r8, r18
    5cd2:	91 08       	sbc	r9, r1
    5cd4:	81 14       	cp	r8, r1
    5cd6:	91 04       	cpc	r9, r1
    5cd8:	71 f7       	brne	.-36     	; 0x5cb6 <vfprintf+0x1c6>
    5cda:	e8 c0       	rjmp	.+464    	; 0x5eac <vfprintf+0x3bc>
    5cdc:	84 36       	cpi	r24, 0x64	; 100
    5cde:	11 f0       	breq	.+4      	; 0x5ce4 <vfprintf+0x1f4>
    5ce0:	89 36       	cpi	r24, 0x69	; 105
    5ce2:	41 f5       	brne	.+80     	; 0x5d34 <vfprintf+0x244>
    5ce4:	f8 01       	movw	r30, r16
    5ce6:	37 fe       	sbrs	r3, 7
    5ce8:	07 c0       	rjmp	.+14     	; 0x5cf8 <vfprintf+0x208>
    5cea:	60 81       	ld	r22, Z
    5cec:	71 81       	ldd	r23, Z+1	; 0x01
    5cee:	82 81       	ldd	r24, Z+2	; 0x02
    5cf0:	93 81       	ldd	r25, Z+3	; 0x03
    5cf2:	0c 5f       	subi	r16, 0xFC	; 252
    5cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    5cf6:	08 c0       	rjmp	.+16     	; 0x5d08 <vfprintf+0x218>
    5cf8:	60 81       	ld	r22, Z
    5cfa:	71 81       	ldd	r23, Z+1	; 0x01
    5cfc:	07 2e       	mov	r0, r23
    5cfe:	00 0c       	add	r0, r0
    5d00:	88 0b       	sbc	r24, r24
    5d02:	99 0b       	sbc	r25, r25
    5d04:	0e 5f       	subi	r16, 0xFE	; 254
    5d06:	1f 4f       	sbci	r17, 0xFF	; 255
    5d08:	f3 2d       	mov	r31, r3
    5d0a:	ff 76       	andi	r31, 0x6F	; 111
    5d0c:	3f 2e       	mov	r3, r31
    5d0e:	97 ff       	sbrs	r25, 7
    5d10:	09 c0       	rjmp	.+18     	; 0x5d24 <vfprintf+0x234>
    5d12:	90 95       	com	r25
    5d14:	80 95       	com	r24
    5d16:	70 95       	com	r23
    5d18:	61 95       	neg	r22
    5d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d20:	f0 68       	ori	r31, 0x80	; 128
    5d22:	3f 2e       	mov	r3, r31
    5d24:	2a e0       	ldi	r18, 0x0A	; 10
    5d26:	30 e0       	ldi	r19, 0x00	; 0
    5d28:	a3 01       	movw	r20, r6
    5d2a:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <__ultoa_invert>
    5d2e:	88 2e       	mov	r8, r24
    5d30:	86 18       	sub	r8, r6
    5d32:	45 c0       	rjmp	.+138    	; 0x5dbe <vfprintf+0x2ce>
    5d34:	85 37       	cpi	r24, 0x75	; 117
    5d36:	31 f4       	brne	.+12     	; 0x5d44 <vfprintf+0x254>
    5d38:	23 2d       	mov	r18, r3
    5d3a:	2f 7e       	andi	r18, 0xEF	; 239
    5d3c:	b2 2e       	mov	r11, r18
    5d3e:	2a e0       	ldi	r18, 0x0A	; 10
    5d40:	30 e0       	ldi	r19, 0x00	; 0
    5d42:	25 c0       	rjmp	.+74     	; 0x5d8e <vfprintf+0x29e>
    5d44:	93 2d       	mov	r25, r3
    5d46:	99 7f       	andi	r25, 0xF9	; 249
    5d48:	b9 2e       	mov	r11, r25
    5d4a:	8f 36       	cpi	r24, 0x6F	; 111
    5d4c:	c1 f0       	breq	.+48     	; 0x5d7e <vfprintf+0x28e>
    5d4e:	18 f4       	brcc	.+6      	; 0x5d56 <vfprintf+0x266>
    5d50:	88 35       	cpi	r24, 0x58	; 88
    5d52:	79 f0       	breq	.+30     	; 0x5d72 <vfprintf+0x282>
    5d54:	b5 c0       	rjmp	.+362    	; 0x5ec0 <vfprintf+0x3d0>
    5d56:	80 37       	cpi	r24, 0x70	; 112
    5d58:	19 f0       	breq	.+6      	; 0x5d60 <vfprintf+0x270>
    5d5a:	88 37       	cpi	r24, 0x78	; 120
    5d5c:	21 f0       	breq	.+8      	; 0x5d66 <vfprintf+0x276>
    5d5e:	b0 c0       	rjmp	.+352    	; 0x5ec0 <vfprintf+0x3d0>
    5d60:	e9 2f       	mov	r30, r25
    5d62:	e0 61       	ori	r30, 0x10	; 16
    5d64:	be 2e       	mov	r11, r30
    5d66:	b4 fe       	sbrs	r11, 4
    5d68:	0d c0       	rjmp	.+26     	; 0x5d84 <vfprintf+0x294>
    5d6a:	fb 2d       	mov	r31, r11
    5d6c:	f4 60       	ori	r31, 0x04	; 4
    5d6e:	bf 2e       	mov	r11, r31
    5d70:	09 c0       	rjmp	.+18     	; 0x5d84 <vfprintf+0x294>
    5d72:	34 fe       	sbrs	r3, 4
    5d74:	0a c0       	rjmp	.+20     	; 0x5d8a <vfprintf+0x29a>
    5d76:	29 2f       	mov	r18, r25
    5d78:	26 60       	ori	r18, 0x06	; 6
    5d7a:	b2 2e       	mov	r11, r18
    5d7c:	06 c0       	rjmp	.+12     	; 0x5d8a <vfprintf+0x29a>
    5d7e:	28 e0       	ldi	r18, 0x08	; 8
    5d80:	30 e0       	ldi	r19, 0x00	; 0
    5d82:	05 c0       	rjmp	.+10     	; 0x5d8e <vfprintf+0x29e>
    5d84:	20 e1       	ldi	r18, 0x10	; 16
    5d86:	30 e0       	ldi	r19, 0x00	; 0
    5d88:	02 c0       	rjmp	.+4      	; 0x5d8e <vfprintf+0x29e>
    5d8a:	20 e1       	ldi	r18, 0x10	; 16
    5d8c:	32 e0       	ldi	r19, 0x02	; 2
    5d8e:	f8 01       	movw	r30, r16
    5d90:	b7 fe       	sbrs	r11, 7
    5d92:	07 c0       	rjmp	.+14     	; 0x5da2 <vfprintf+0x2b2>
    5d94:	60 81       	ld	r22, Z
    5d96:	71 81       	ldd	r23, Z+1	; 0x01
    5d98:	82 81       	ldd	r24, Z+2	; 0x02
    5d9a:	93 81       	ldd	r25, Z+3	; 0x03
    5d9c:	0c 5f       	subi	r16, 0xFC	; 252
    5d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5da0:	06 c0       	rjmp	.+12     	; 0x5dae <vfprintf+0x2be>
    5da2:	60 81       	ld	r22, Z
    5da4:	71 81       	ldd	r23, Z+1	; 0x01
    5da6:	80 e0       	ldi	r24, 0x00	; 0
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	0e 5f       	subi	r16, 0xFE	; 254
    5dac:	1f 4f       	sbci	r17, 0xFF	; 255
    5dae:	a3 01       	movw	r20, r6
    5db0:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <__ultoa_invert>
    5db4:	88 2e       	mov	r8, r24
    5db6:	86 18       	sub	r8, r6
    5db8:	fb 2d       	mov	r31, r11
    5dba:	ff 77       	andi	r31, 0x7F	; 127
    5dbc:	3f 2e       	mov	r3, r31
    5dbe:	36 fe       	sbrs	r3, 6
    5dc0:	0d c0       	rjmp	.+26     	; 0x5ddc <vfprintf+0x2ec>
    5dc2:	23 2d       	mov	r18, r3
    5dc4:	2e 7f       	andi	r18, 0xFE	; 254
    5dc6:	a2 2e       	mov	r10, r18
    5dc8:	89 14       	cp	r8, r9
    5dca:	58 f4       	brcc	.+22     	; 0x5de2 <vfprintf+0x2f2>
    5dcc:	34 fe       	sbrs	r3, 4
    5dce:	0b c0       	rjmp	.+22     	; 0x5de6 <vfprintf+0x2f6>
    5dd0:	32 fc       	sbrc	r3, 2
    5dd2:	09 c0       	rjmp	.+18     	; 0x5de6 <vfprintf+0x2f6>
    5dd4:	83 2d       	mov	r24, r3
    5dd6:	8e 7e       	andi	r24, 0xEE	; 238
    5dd8:	a8 2e       	mov	r10, r24
    5dda:	05 c0       	rjmp	.+10     	; 0x5de6 <vfprintf+0x2f6>
    5ddc:	b8 2c       	mov	r11, r8
    5dde:	a3 2c       	mov	r10, r3
    5de0:	03 c0       	rjmp	.+6      	; 0x5de8 <vfprintf+0x2f8>
    5de2:	b8 2c       	mov	r11, r8
    5de4:	01 c0       	rjmp	.+2      	; 0x5de8 <vfprintf+0x2f8>
    5de6:	b9 2c       	mov	r11, r9
    5de8:	a4 fe       	sbrs	r10, 4
    5dea:	0f c0       	rjmp	.+30     	; 0x5e0a <vfprintf+0x31a>
    5dec:	fe 01       	movw	r30, r28
    5dee:	e8 0d       	add	r30, r8
    5df0:	f1 1d       	adc	r31, r1
    5df2:	80 81       	ld	r24, Z
    5df4:	80 33       	cpi	r24, 0x30	; 48
    5df6:	21 f4       	brne	.+8      	; 0x5e00 <vfprintf+0x310>
    5df8:	9a 2d       	mov	r25, r10
    5dfa:	99 7e       	andi	r25, 0xE9	; 233
    5dfc:	a9 2e       	mov	r10, r25
    5dfe:	09 c0       	rjmp	.+18     	; 0x5e12 <vfprintf+0x322>
    5e00:	a2 fe       	sbrs	r10, 2
    5e02:	06 c0       	rjmp	.+12     	; 0x5e10 <vfprintf+0x320>
    5e04:	b3 94       	inc	r11
    5e06:	b3 94       	inc	r11
    5e08:	04 c0       	rjmp	.+8      	; 0x5e12 <vfprintf+0x322>
    5e0a:	8a 2d       	mov	r24, r10
    5e0c:	86 78       	andi	r24, 0x86	; 134
    5e0e:	09 f0       	breq	.+2      	; 0x5e12 <vfprintf+0x322>
    5e10:	b3 94       	inc	r11
    5e12:	a3 fc       	sbrc	r10, 3
    5e14:	11 c0       	rjmp	.+34     	; 0x5e38 <vfprintf+0x348>
    5e16:	a0 fe       	sbrs	r10, 0
    5e18:	06 c0       	rjmp	.+12     	; 0x5e26 <vfprintf+0x336>
    5e1a:	b2 14       	cp	r11, r2
    5e1c:	88 f4       	brcc	.+34     	; 0x5e40 <vfprintf+0x350>
    5e1e:	28 0c       	add	r2, r8
    5e20:	92 2c       	mov	r9, r2
    5e22:	9b 18       	sub	r9, r11
    5e24:	0e c0       	rjmp	.+28     	; 0x5e42 <vfprintf+0x352>
    5e26:	b2 14       	cp	r11, r2
    5e28:	60 f4       	brcc	.+24     	; 0x5e42 <vfprintf+0x352>
    5e2a:	b6 01       	movw	r22, r12
    5e2c:	80 e2       	ldi	r24, 0x20	; 32
    5e2e:	90 e0       	ldi	r25, 0x00	; 0
    5e30:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <fputc>
    5e34:	b3 94       	inc	r11
    5e36:	f7 cf       	rjmp	.-18     	; 0x5e26 <vfprintf+0x336>
    5e38:	b2 14       	cp	r11, r2
    5e3a:	18 f4       	brcc	.+6      	; 0x5e42 <vfprintf+0x352>
    5e3c:	2b 18       	sub	r2, r11
    5e3e:	02 c0       	rjmp	.+4      	; 0x5e44 <vfprintf+0x354>
    5e40:	98 2c       	mov	r9, r8
    5e42:	21 2c       	mov	r2, r1
    5e44:	a4 fe       	sbrs	r10, 4
    5e46:	10 c0       	rjmp	.+32     	; 0x5e68 <vfprintf+0x378>
    5e48:	b6 01       	movw	r22, r12
    5e4a:	80 e3       	ldi	r24, 0x30	; 48
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <fputc>
    5e52:	a2 fe       	sbrs	r10, 2
    5e54:	17 c0       	rjmp	.+46     	; 0x5e84 <vfprintf+0x394>
    5e56:	a1 fc       	sbrc	r10, 1
    5e58:	03 c0       	rjmp	.+6      	; 0x5e60 <vfprintf+0x370>
    5e5a:	88 e7       	ldi	r24, 0x78	; 120
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	02 c0       	rjmp	.+4      	; 0x5e64 <vfprintf+0x374>
    5e60:	88 e5       	ldi	r24, 0x58	; 88
    5e62:	90 e0       	ldi	r25, 0x00	; 0
    5e64:	b6 01       	movw	r22, r12
    5e66:	0c c0       	rjmp	.+24     	; 0x5e80 <vfprintf+0x390>
    5e68:	8a 2d       	mov	r24, r10
    5e6a:	86 78       	andi	r24, 0x86	; 134
    5e6c:	59 f0       	breq	.+22     	; 0x5e84 <vfprintf+0x394>
    5e6e:	a1 fe       	sbrs	r10, 1
    5e70:	02 c0       	rjmp	.+4      	; 0x5e76 <vfprintf+0x386>
    5e72:	8b e2       	ldi	r24, 0x2B	; 43
    5e74:	01 c0       	rjmp	.+2      	; 0x5e78 <vfprintf+0x388>
    5e76:	80 e2       	ldi	r24, 0x20	; 32
    5e78:	a7 fc       	sbrc	r10, 7
    5e7a:	8d e2       	ldi	r24, 0x2D	; 45
    5e7c:	b6 01       	movw	r22, r12
    5e7e:	90 e0       	ldi	r25, 0x00	; 0
    5e80:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <fputc>
    5e84:	89 14       	cp	r8, r9
    5e86:	38 f4       	brcc	.+14     	; 0x5e96 <vfprintf+0x3a6>
    5e88:	b6 01       	movw	r22, r12
    5e8a:	80 e3       	ldi	r24, 0x30	; 48
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <fputc>
    5e92:	9a 94       	dec	r9
    5e94:	f7 cf       	rjmp	.-18     	; 0x5e84 <vfprintf+0x394>
    5e96:	8a 94       	dec	r8
    5e98:	f3 01       	movw	r30, r6
    5e9a:	e8 0d       	add	r30, r8
    5e9c:	f1 1d       	adc	r31, r1
    5e9e:	80 81       	ld	r24, Z
    5ea0:	b6 01       	movw	r22, r12
    5ea2:	90 e0       	ldi	r25, 0x00	; 0
    5ea4:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <fputc>
    5ea8:	81 10       	cpse	r8, r1
    5eaa:	f5 cf       	rjmp	.-22     	; 0x5e96 <vfprintf+0x3a6>
    5eac:	22 20       	and	r2, r2
    5eae:	09 f4       	brne	.+2      	; 0x5eb2 <vfprintf+0x3c2>
    5eb0:	42 ce       	rjmp	.-892    	; 0x5b36 <vfprintf+0x46>
    5eb2:	b6 01       	movw	r22, r12
    5eb4:	80 e2       	ldi	r24, 0x20	; 32
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <fputc>
    5ebc:	2a 94       	dec	r2
    5ebe:	f6 cf       	rjmp	.-20     	; 0x5eac <vfprintf+0x3bc>
    5ec0:	f6 01       	movw	r30, r12
    5ec2:	86 81       	ldd	r24, Z+6	; 0x06
    5ec4:	97 81       	ldd	r25, Z+7	; 0x07
    5ec6:	02 c0       	rjmp	.+4      	; 0x5ecc <vfprintf+0x3dc>
    5ec8:	8f ef       	ldi	r24, 0xFF	; 255
    5eca:	9f ef       	ldi	r25, 0xFF	; 255
    5ecc:	2b 96       	adiw	r28, 0x0b	; 11
    5ece:	cd bf       	out	0x3d, r28	; 61
    5ed0:	de bf       	out	0x3e, r29	; 62
    5ed2:	df 91       	pop	r29
    5ed4:	cf 91       	pop	r28
    5ed6:	1f 91       	pop	r17
    5ed8:	0f 91       	pop	r16
    5eda:	ff 90       	pop	r15
    5edc:	ef 90       	pop	r14
    5ede:	df 90       	pop	r13
    5ee0:	cf 90       	pop	r12
    5ee2:	bf 90       	pop	r11
    5ee4:	af 90       	pop	r10
    5ee6:	9f 90       	pop	r9
    5ee8:	8f 90       	pop	r8
    5eea:	7f 90       	pop	r7
    5eec:	6f 90       	pop	r6
    5eee:	5f 90       	pop	r5
    5ef0:	4f 90       	pop	r4
    5ef2:	3f 90       	pop	r3
    5ef4:	2f 90       	pop	r2
    5ef6:	08 95       	ret

00005ef8 <strnlen_P>:
    5ef8:	fc 01       	movw	r30, r24
    5efa:	05 90       	lpm	r0, Z+
    5efc:	61 50       	subi	r22, 0x01	; 1
    5efe:	70 40       	sbci	r23, 0x00	; 0
    5f00:	01 10       	cpse	r0, r1
    5f02:	d8 f7       	brcc	.-10     	; 0x5efa <strnlen_P+0x2>
    5f04:	80 95       	com	r24
    5f06:	90 95       	com	r25
    5f08:	8e 0f       	add	r24, r30
    5f0a:	9f 1f       	adc	r25, r31
    5f0c:	08 95       	ret

00005f0e <strnlen>:
    5f0e:	fc 01       	movw	r30, r24
    5f10:	61 50       	subi	r22, 0x01	; 1
    5f12:	70 40       	sbci	r23, 0x00	; 0
    5f14:	01 90       	ld	r0, Z+
    5f16:	01 10       	cpse	r0, r1
    5f18:	d8 f7       	brcc	.-10     	; 0x5f10 <strnlen+0x2>
    5f1a:	80 95       	com	r24
    5f1c:	90 95       	com	r25
    5f1e:	8e 0f       	add	r24, r30
    5f20:	9f 1f       	adc	r25, r31
    5f22:	08 95       	ret

00005f24 <fputc>:
    5f24:	0f 93       	push	r16
    5f26:	1f 93       	push	r17
    5f28:	cf 93       	push	r28
    5f2a:	df 93       	push	r29
    5f2c:	fb 01       	movw	r30, r22
    5f2e:	23 81       	ldd	r18, Z+3	; 0x03
    5f30:	21 fd       	sbrc	r18, 1
    5f32:	03 c0       	rjmp	.+6      	; 0x5f3a <fputc+0x16>
    5f34:	8f ef       	ldi	r24, 0xFF	; 255
    5f36:	9f ef       	ldi	r25, 0xFF	; 255
    5f38:	2c c0       	rjmp	.+88     	; 0x5f92 <fputc+0x6e>
    5f3a:	22 ff       	sbrs	r18, 2
    5f3c:	16 c0       	rjmp	.+44     	; 0x5f6a <fputc+0x46>
    5f3e:	46 81       	ldd	r20, Z+6	; 0x06
    5f40:	57 81       	ldd	r21, Z+7	; 0x07
    5f42:	24 81       	ldd	r18, Z+4	; 0x04
    5f44:	35 81       	ldd	r19, Z+5	; 0x05
    5f46:	42 17       	cp	r20, r18
    5f48:	53 07       	cpc	r21, r19
    5f4a:	44 f4       	brge	.+16     	; 0x5f5c <fputc+0x38>
    5f4c:	a0 81       	ld	r26, Z
    5f4e:	b1 81       	ldd	r27, Z+1	; 0x01
    5f50:	9d 01       	movw	r18, r26
    5f52:	2f 5f       	subi	r18, 0xFF	; 255
    5f54:	3f 4f       	sbci	r19, 0xFF	; 255
    5f56:	20 83       	st	Z, r18
    5f58:	31 83       	std	Z+1, r19	; 0x01
    5f5a:	8c 93       	st	X, r24
    5f5c:	26 81       	ldd	r18, Z+6	; 0x06
    5f5e:	37 81       	ldd	r19, Z+7	; 0x07
    5f60:	2f 5f       	subi	r18, 0xFF	; 255
    5f62:	3f 4f       	sbci	r19, 0xFF	; 255
    5f64:	26 83       	std	Z+6, r18	; 0x06
    5f66:	37 83       	std	Z+7, r19	; 0x07
    5f68:	14 c0       	rjmp	.+40     	; 0x5f92 <fputc+0x6e>
    5f6a:	8b 01       	movw	r16, r22
    5f6c:	ec 01       	movw	r28, r24
    5f6e:	fb 01       	movw	r30, r22
    5f70:	00 84       	ldd	r0, Z+8	; 0x08
    5f72:	f1 85       	ldd	r31, Z+9	; 0x09
    5f74:	e0 2d       	mov	r30, r0
    5f76:	09 95       	icall
    5f78:	89 2b       	or	r24, r25
    5f7a:	e1 f6       	brne	.-72     	; 0x5f34 <fputc+0x10>
    5f7c:	d8 01       	movw	r26, r16
    5f7e:	16 96       	adiw	r26, 0x06	; 6
    5f80:	8d 91       	ld	r24, X+
    5f82:	9c 91       	ld	r25, X
    5f84:	17 97       	sbiw	r26, 0x07	; 7
    5f86:	01 96       	adiw	r24, 0x01	; 1
    5f88:	16 96       	adiw	r26, 0x06	; 6
    5f8a:	8d 93       	st	X+, r24
    5f8c:	9c 93       	st	X, r25
    5f8e:	17 97       	sbiw	r26, 0x07	; 7
    5f90:	ce 01       	movw	r24, r28
    5f92:	df 91       	pop	r29
    5f94:	cf 91       	pop	r28
    5f96:	1f 91       	pop	r17
    5f98:	0f 91       	pop	r16
    5f9a:	08 95       	ret

00005f9c <__ultoa_invert>:
    5f9c:	fa 01       	movw	r30, r20
    5f9e:	aa 27       	eor	r26, r26
    5fa0:	28 30       	cpi	r18, 0x08	; 8
    5fa2:	51 f1       	breq	.+84     	; 0x5ff8 <__ultoa_invert+0x5c>
    5fa4:	20 31       	cpi	r18, 0x10	; 16
    5fa6:	81 f1       	breq	.+96     	; 0x6008 <__ultoa_invert+0x6c>
    5fa8:	e8 94       	clt
    5faa:	6f 93       	push	r22
    5fac:	6e 7f       	andi	r22, 0xFE	; 254
    5fae:	6e 5f       	subi	r22, 0xFE	; 254
    5fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    5fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb6:	af 4f       	sbci	r26, 0xFF	; 255
    5fb8:	b1 e0       	ldi	r27, 0x01	; 1
    5fba:	3e d0       	rcall	.+124    	; 0x6038 <__ultoa_invert+0x9c>
    5fbc:	b4 e0       	ldi	r27, 0x04	; 4
    5fbe:	3c d0       	rcall	.+120    	; 0x6038 <__ultoa_invert+0x9c>
    5fc0:	67 0f       	add	r22, r23
    5fc2:	78 1f       	adc	r23, r24
    5fc4:	89 1f       	adc	r24, r25
    5fc6:	9a 1f       	adc	r25, r26
    5fc8:	a1 1d       	adc	r26, r1
    5fca:	68 0f       	add	r22, r24
    5fcc:	79 1f       	adc	r23, r25
    5fce:	8a 1f       	adc	r24, r26
    5fd0:	91 1d       	adc	r25, r1
    5fd2:	a1 1d       	adc	r26, r1
    5fd4:	6a 0f       	add	r22, r26
    5fd6:	71 1d       	adc	r23, r1
    5fd8:	81 1d       	adc	r24, r1
    5fda:	91 1d       	adc	r25, r1
    5fdc:	a1 1d       	adc	r26, r1
    5fde:	20 d0       	rcall	.+64     	; 0x6020 <__ultoa_invert+0x84>
    5fe0:	09 f4       	brne	.+2      	; 0x5fe4 <__ultoa_invert+0x48>
    5fe2:	68 94       	set
    5fe4:	3f 91       	pop	r19
    5fe6:	2a e0       	ldi	r18, 0x0A	; 10
    5fe8:	26 9f       	mul	r18, r22
    5fea:	11 24       	eor	r1, r1
    5fec:	30 19       	sub	r19, r0
    5fee:	30 5d       	subi	r19, 0xD0	; 208
    5ff0:	31 93       	st	Z+, r19
    5ff2:	de f6       	brtc	.-74     	; 0x5faa <__ultoa_invert+0xe>
    5ff4:	cf 01       	movw	r24, r30
    5ff6:	08 95       	ret
    5ff8:	46 2f       	mov	r20, r22
    5ffa:	47 70       	andi	r20, 0x07	; 7
    5ffc:	40 5d       	subi	r20, 0xD0	; 208
    5ffe:	41 93       	st	Z+, r20
    6000:	b3 e0       	ldi	r27, 0x03	; 3
    6002:	0f d0       	rcall	.+30     	; 0x6022 <__ultoa_invert+0x86>
    6004:	c9 f7       	brne	.-14     	; 0x5ff8 <__ultoa_invert+0x5c>
    6006:	f6 cf       	rjmp	.-20     	; 0x5ff4 <__ultoa_invert+0x58>
    6008:	46 2f       	mov	r20, r22
    600a:	4f 70       	andi	r20, 0x0F	; 15
    600c:	40 5d       	subi	r20, 0xD0	; 208
    600e:	4a 33       	cpi	r20, 0x3A	; 58
    6010:	18 f0       	brcs	.+6      	; 0x6018 <__ultoa_invert+0x7c>
    6012:	49 5d       	subi	r20, 0xD9	; 217
    6014:	31 fd       	sbrc	r19, 1
    6016:	40 52       	subi	r20, 0x20	; 32
    6018:	41 93       	st	Z+, r20
    601a:	02 d0       	rcall	.+4      	; 0x6020 <__ultoa_invert+0x84>
    601c:	a9 f7       	brne	.-22     	; 0x6008 <__ultoa_invert+0x6c>
    601e:	ea cf       	rjmp	.-44     	; 0x5ff4 <__ultoa_invert+0x58>
    6020:	b4 e0       	ldi	r27, 0x04	; 4
    6022:	a6 95       	lsr	r26
    6024:	97 95       	ror	r25
    6026:	87 95       	ror	r24
    6028:	77 95       	ror	r23
    602a:	67 95       	ror	r22
    602c:	ba 95       	dec	r27
    602e:	c9 f7       	brne	.-14     	; 0x6022 <__ultoa_invert+0x86>
    6030:	00 97       	sbiw	r24, 0x00	; 0
    6032:	61 05       	cpc	r22, r1
    6034:	71 05       	cpc	r23, r1
    6036:	08 95       	ret
    6038:	9b 01       	movw	r18, r22
    603a:	ac 01       	movw	r20, r24
    603c:	0a 2e       	mov	r0, r26
    603e:	06 94       	lsr	r0
    6040:	57 95       	ror	r21
    6042:	47 95       	ror	r20
    6044:	37 95       	ror	r19
    6046:	27 95       	ror	r18
    6048:	ba 95       	dec	r27
    604a:	c9 f7       	brne	.-14     	; 0x603e <__ultoa_invert+0xa2>
    604c:	62 0f       	add	r22, r18
    604e:	73 1f       	adc	r23, r19
    6050:	84 1f       	adc	r24, r20
    6052:	95 1f       	adc	r25, r21
    6054:	a0 1d       	adc	r26, r0
    6056:	08 95       	ret

00006058 <eeprom_read_byte>:
    6058:	03 d0       	rcall	.+6      	; 0x6060 <eeprom_mapen>
    605a:	80 81       	ld	r24, Z
    605c:	99 27       	eor	r25, r25
    605e:	08 95       	ret

00006060 <eeprom_mapen>:
    6060:	fc 01       	movw	r30, r24
    6062:	e0 50       	subi	r30, 0x00	; 0
    6064:	fc 4e       	sbci	r31, 0xEC	; 236
    6066:	08 95       	ret

00006068 <eeprom_read_dword>:
    6068:	0e 94 30 30 	call	0x6060	; 0x6060 <eeprom_mapen>
    606c:	60 81       	ld	r22, Z
    606e:	71 81       	ldd	r23, Z+1	; 0x01
    6070:	82 81       	ldd	r24, Z+2	; 0x02
    6072:	93 81       	ldd	r25, Z+3	; 0x03
    6074:	08 95       	ret

00006076 <eeprom_read_word>:
    6076:	0e 94 30 30 	call	0x6060	; 0x6060 <eeprom_mapen>
    607a:	80 81       	ld	r24, Z
    607c:	91 81       	ldd	r25, Z+1	; 0x01
    607e:	08 95       	ret

00006080 <__do_global_dtors>:
    6080:	11 e0       	ldi	r17, 0x01	; 1
    6082:	c6 e1       	ldi	r28, 0x16	; 22
    6084:	d1 e0       	ldi	r29, 0x01	; 1
    6086:	04 c0       	rjmp	.+8      	; 0x6090 <__do_global_dtors+0x10>
    6088:	fe 01       	movw	r30, r28
    608a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__tablejump2__>
    608e:	21 96       	adiw	r28, 0x01	; 1
    6090:	c8 31       	cpi	r28, 0x18	; 24
    6092:	d1 07       	cpc	r29, r17
    6094:	c9 f7       	brne	.-14     	; 0x6088 <__do_global_dtors+0x8>
    6096:	f8 94       	cli

00006098 <__stop_program>:
    6098:	ff cf       	rjmp	.-2      	; 0x6098 <__stop_program>
