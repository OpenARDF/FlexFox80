
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000048e  00804000  00009444  000094f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009444  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a5  0080448e  0080448e  00009986  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  00009986  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  000099bb  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009a18  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000bc0  00000000  00000000  00009a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ef77  00000000  00000000  0000a618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000054f7  00000000  00000000  0001958f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000099df  00000000  00000000  0001ea86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002b94  00000000  00000000  00028468  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000616b  00000000  00000000  0002affc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005b4f  00000000  00000000  00031167  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b58  00000000  00000000  00036cb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__dtors_end>
       4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
       8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
       c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      10:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      14:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      18:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <__vector_6>
      1c:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__vector_7>
      20:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      24:	0c 94 18 3d 	jmp	0x7a30	; 0x7a30 <__vector_9>
      28:	0c 94 6b 3d 	jmp	0x7ad6	; 0x7ad6 <__vector_10>
      2c:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <__vector_11>
      30:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <__vector_12>
      34:	0c 94 2c 3e 	jmp	0x7c58	; 0x7c58 <__vector_13>
      38:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      3c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      40:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      44:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      48:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_19>
      50:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_20>
      54:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      58:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      5c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      60:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__vector_24>
      64:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      68:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      6c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      70:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      74:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__vector_29>
      78:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_30>
      7c:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_31>
      80:	0c 94 17 08 	jmp	0x102e	; 0x102e <__vector_32>
      84:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      88:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      8c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      90:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      94:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      98:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      9c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a4:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_41>
      a8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      ac:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      bc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      cc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      dc:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_55>
      e0:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__vector_56>
      e4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      e8:	1c 10       	cpse	r1, r12
      ea:	1a 10       	cpse	r1, r10
      ec:	18 10       	cpse	r1, r8
      ee:	1e 10       	cpse	r1, r14
      f0:	1e 10       	cpse	r1, r14
      f2:	1e 10       	cpse	r1, r14
      f4:	1e 10       	cpse	r1, r14
      f6:	1e 10       	cpse	r1, r14
      f8:	1e 10       	cpse	r1, r14
      fa:	10 10       	cpse	r1, r0
      fc:	1e 10       	cpse	r1, r14
      fe:	1e 10       	cpse	r1, r14
     100:	1e 10       	cpse	r1, r14
     102:	1e 10       	cpse	r1, r14
     104:	1e 10       	cpse	r1, r14
     106:	1e 10       	cpse	r1, r14
     108:	1e 10       	cpse	r1, r14
     10a:	1e 10       	cpse	r1, r14
     10c:	1e 10       	cpse	r1, r14
     10e:	0a 10       	cpse	r0, r10
     110:	1e 10       	cpse	r1, r14
     112:	1e 10       	cpse	r1, r14
     114:	1e 10       	cpse	r1, r14
     116:	1e 10       	cpse	r1, r14
     118:	1e 10       	cpse	r1, r14
     11a:	1e 10       	cpse	r1, r14
     11c:	1e 10       	cpse	r1, r14
     11e:	1e 10       	cpse	r1, r14
     120:	1e 10       	cpse	r1, r14
     122:	03 10       	cpse	r0, r3
     124:	1e 10       	cpse	r1, r14
     126:	1e 10       	cpse	r1, r14
     128:	1e 10       	cpse	r1, r14
     12a:	1e 10       	cpse	r1, r14
     12c:	1e 10       	cpse	r1, r14
     12e:	1e 10       	cpse	r1, r14
     130:	1e 10       	cpse	r1, r14
     132:	1e 10       	cpse	r1, r14
     134:	1e 10       	cpse	r1, r14
     136:	fb 0f       	add	r31, r27
     138:	1e 10       	cpse	r1, r14
     13a:	1e 10       	cpse	r1, r14
     13c:	1e 10       	cpse	r1, r14
     13e:	1e 10       	cpse	r1, r14
     140:	1e 10       	cpse	r1, r14
     142:	1e 10       	cpse	r1, r14
     144:	1e 10       	cpse	r1, r14
     146:	1e 10       	cpse	r1, r14
     148:	1e 10       	cpse	r1, r14
     14a:	f2 0f       	add	r31, r18
     14c:	45 14       	cp	r4, r5
     14e:	59 14       	cp	r5, r9
     150:	6f 14       	cp	r6, r15
     152:	85 14       	cp	r8, r5
     154:	9b 14       	cp	r9, r11
     156:	e1 15       	cp	r30, r1
     158:	d6 15       	cp	r29, r6
     15a:	d6 14       	cp	r13, r6
     15c:	e6 14       	cp	r14, r6
     15e:	f8 14       	cp	r15, r8
     160:	0a 15       	cp	r16, r10
     162:	1c 15       	cp	r17, r12
     164:	56 15       	cp	r21, r6
     166:	66 15       	cp	r22, r6
     168:	78 15       	cp	r23, r8
     16a:	8a 15       	cp	r24, r10
     16c:	9c 15       	cp	r25, r12
     16e:	f3 2f       	mov	r31, r19
     170:	8a 2f       	mov	r24, r26
     172:	d7 2f       	mov	r29, r23
     174:	01 30       	cpi	r16, 0x01	; 1
     176:	de 2f       	mov	r29, r30
     178:	01 30       	cpi	r16, 0x01	; 1
     17a:	a6 2f       	mov	r26, r22
     17c:	83 2f       	mov	r24, r19
     17e:	98 2f       	mov	r25, r24
     180:	9f 2f       	mov	r25, r31
     182:	01 30       	cpi	r16, 0x01	; 1
     184:	c2 2f       	mov	r28, r18
     186:	75 2f       	mov	r23, r21
     188:	c9 2f       	mov	r28, r25
     18a:	6e 2f       	mov	r22, r30
     18c:	91 2f       	mov	r25, r17
     18e:	29 2f       	mov	r18, r25
     190:	30 2f       	mov	r19, r16
     192:	37 2f       	mov	r19, r23
     194:	3e 2f       	mov	r19, r30
     196:	45 2f       	mov	r20, r21
     198:	4c 2f       	mov	r20, r28
     19a:	52 2f       	mov	r21, r18
     19c:	59 2f       	mov	r21, r25
     19e:	60 2f       	mov	r22, r16
     1a0:	67 2f       	mov	r22, r23
     1a2:	ad 2f       	mov	r26, r29
     1a4:	b4 2f       	mov	r27, r20
     1a6:	fa 2f       	mov	r31, r26
     1a8:	bb 2f       	mov	r27, r27
     1aa:	01 30       	cpi	r16, 0x01	; 1
     1ac:	7c 2f       	mov	r23, r28
     1ae:	e5 2f       	mov	r30, r21
     1b0:	77 2e       	mov	r7, r23
     1b2:	7e 2e       	mov	r7, r30
     1b4:	85 2e       	mov	r8, r21
     1b6:	8c 2e       	mov	r8, r28
     1b8:	93 2e       	mov	r9, r19
     1ba:	99 2e       	mov	r9, r25
     1bc:	a0 2e       	mov	r10, r16
     1be:	a7 2e       	mov	r10, r23
     1c0:	ad 2e       	mov	r10, r29
     1c2:	b3 2e       	mov	r11, r19
     1c4:	ba 2e       	mov	r11, r26
     1c6:	c1 2e       	mov	r12, r17
     1c8:	c8 2e       	mov	r12, r24
     1ca:	cf 2e       	mov	r12, r31
     1cc:	d6 2e       	mov	r13, r22
     1ce:	dd 2e       	mov	r13, r29
     1d0:	e4 2e       	mov	r14, r20
     1d2:	eb 2e       	mov	r14, r27
     1d4:	f2 2e       	mov	r15, r18
     1d6:	f8 2e       	mov	r15, r24
     1d8:	ff 2e       	mov	r15, r31
     1da:	06 2f       	mov	r16, r22
     1dc:	0d 2f       	mov	r16, r29
     1de:	14 2f       	mov	r17, r20
     1e0:	1b 2f       	mov	r17, r27
     1e2:	22 2f       	mov	r18, r18
     1e4:	01 30       	cpi	r16, 0x01	; 1
     1e6:	01 30       	cpi	r16, 0x01	; 1
     1e8:	01 30       	cpi	r16, 0x01	; 1
     1ea:	01 30       	cpi	r16, 0x01	; 1
     1ec:	d0 2f       	mov	r29, r16
     1ee:	01 30       	cpi	r16, 0x01	; 1
     1f0:	01 30       	cpi	r16, 0x01	; 1
     1f2:	01 30       	cpi	r16, 0x01	; 1
     1f4:	01 30       	cpi	r16, 0x01	; 1
     1f6:	01 30       	cpi	r16, 0x01	; 1
     1f8:	01 30       	cpi	r16, 0x01	; 1
     1fa:	01 30       	cpi	r16, 0x01	; 1
     1fc:	01 30       	cpi	r16, 0x01	; 1
     1fe:	01 30       	cpi	r16, 0x01	; 1
     200:	01 30       	cpi	r16, 0x01	; 1
     202:	01 30       	cpi	r16, 0x01	; 1
     204:	01 30       	cpi	r16, 0x01	; 1
     206:	01 30       	cpi	r16, 0x01	; 1
     208:	01 30       	cpi	r16, 0x01	; 1
     20a:	01 30       	cpi	r16, 0x01	; 1
     20c:	01 30       	cpi	r16, 0x01	; 1
     20e:	01 30       	cpi	r16, 0x01	; 1
     210:	01 30       	cpi	r16, 0x01	; 1
     212:	01 30       	cpi	r16, 0x01	; 1
     214:	01 30       	cpi	r16, 0x01	; 1
     216:	01 30       	cpi	r16, 0x01	; 1
     218:	01 30       	cpi	r16, 0x01	; 1
     21a:	01 30       	cpi	r16, 0x01	; 1
     21c:	01 30       	cpi	r16, 0x01	; 1
     21e:	01 30       	cpi	r16, 0x01	; 1
     220:	01 30       	cpi	r16, 0x01	; 1
     222:	01 30       	cpi	r16, 0x01	; 1
     224:	01 30       	cpi	r16, 0x01	; 1
     226:	ec 2f       	mov	r30, r28

00000228 <__ctors_start>:
     228:	78 17       	cp	r23, r24
     22a:	1a 18       	sub	r1, r10

0000022c <__ctors_end>:
     22c:	85 17       	cp	r24, r21
     22e:	27 18       	sub	r2, r7

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	cd bf       	out	0x3d, r28	; 61
     238:	df e7       	ldi	r29, 0x7F	; 127
     23a:	de bf       	out	0x3e, r29	; 62

0000023c <__do_copy_data>:
     23c:	14 e4       	ldi	r17, 0x44	; 68
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e4       	ldi	r27, 0x40	; 64
     242:	e4 e4       	ldi	r30, 0x44	; 68
     244:	f4 e9       	ldi	r31, 0x94	; 148
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	ae 38       	cpi	r26, 0x8E	; 142
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	28 e4       	ldi	r18, 0x48	; 72
     258:	ae e8       	ldi	r26, 0x8E	; 142
     25a:	b4 e4       	ldi	r27, 0x44	; 68
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a3 33       	cpi	r26, 0x33	; 51
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>

00000266 <__do_global_ctors>:
     266:	11 e0       	ldi	r17, 0x01	; 1
     268:	c6 e1       	ldi	r28, 0x16	; 22
     26a:	d1 e0       	ldi	r29, 0x01	; 1
     26c:	04 c0       	rjmp	.+8      	; 0x276 <__do_global_ctors+0x10>
     26e:	21 97       	sbiw	r28, 0x01	; 1
     270:	fe 01       	movw	r30, r28
     272:	0e 94 b9 45 	call	0x8b72	; 0x8b72 <__tablejump2__>
     276:	c4 31       	cpi	r28, 0x14	; 20
     278:	d1 07       	cpc	r29, r17
     27a:	c9 f7       	brne	.-14     	; 0x26e <__do_global_ctors+0x8>
     27c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <main>
     280:	0c 94 15 4a 	jmp	0x942a	; 0x942a <__do_global_dtors>

00000284 <__bad_interrupt>:
     284:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000288 <is_leap_year>:
     288:	9c 01       	movw	r18, r24
     28a:	23 70       	andi	r18, 0x03	; 3
     28c:	33 27       	eor	r19, r19
     28e:	23 2b       	or	r18, r19
     290:	59 f4       	brne	.+22     	; 0x2a8 <is_leap_year+0x20>
     292:	64 e6       	ldi	r22, 0x64	; 100
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <__divmodhi4>
     29a:	89 2b       	or	r24, r25
     29c:	39 f4       	brne	.+14     	; 0x2ac <is_leap_year+0x24>
     29e:	63 70       	andi	r22, 0x03	; 3
     2a0:	77 27       	eor	r23, r23
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	67 2b       	or	r22, r23
     2a6:	19 f0       	breq	.+6      	; 0x2ae <is_leap_year+0x26>
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	08 95       	ret

000002b0 <month_length>:
     2b0:	62 30       	cpi	r22, 0x02	; 2
     2b2:	21 f4       	brne	.+8      	; 0x2bc <month_length+0xc>
     2b4:	0e 94 44 01 	call	0x288	; 0x288 <is_leap_year>
     2b8:	84 5e       	subi	r24, 0xE4	; 228
     2ba:	08 95       	ret
     2bc:	68 30       	cpi	r22, 0x08	; 8
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <month_length+0x12>
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	61 70       	andi	r22, 0x01	; 1
     2c4:	8e e1       	ldi	r24, 0x1E	; 30
     2c6:	86 0f       	add	r24, r22
     2c8:	08 95       	ret

000002ca <set_system_time>:
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	60 93 2f 48 	sts	0x482F, r22	; 0x80482f <__system_time>
     2d2:	70 93 30 48 	sts	0x4830, r23	; 0x804830 <__system_time+0x1>
     2d6:	80 93 31 48 	sts	0x4831, r24	; 0x804831 <__system_time+0x2>
     2da:	90 93 32 48 	sts	0x4832, r25	; 0x804832 <__system_time+0x3>
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	08 95       	ret

000002e2 <time>:
     2e2:	fc 01       	movw	r30, r24
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	60 91 2f 48 	lds	r22, 0x482F	; 0x80482f <__system_time>
     2ec:	70 91 30 48 	lds	r23, 0x4830	; 0x804830 <__system_time+0x1>
     2f0:	80 91 31 48 	lds	r24, 0x4831	; 0x804831 <__system_time+0x2>
     2f4:	90 91 32 48 	lds	r25, 0x4832	; 0x804832 <__system_time+0x3>
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	30 97       	sbiw	r30, 0x00	; 0
     2fc:	21 f0       	breq	.+8      	; 0x306 <time+0x24>
     2fe:	60 83       	st	Z, r22
     300:	71 83       	std	Z+1, r23	; 0x01
     302:	82 83       	std	Z+2, r24	; 0x02
     304:	93 83       	std	Z+3, r25	; 0x03
     306:	08 95       	ret

00000308 <system_tick>:
     308:	8f 93       	push	r24
     30a:	8f b7       	in	r24, 0x3f	; 63
     30c:	8f 93       	push	r24
     30e:	f8 94       	cli
     310:	80 91 2f 48 	lds	r24, 0x482F	; 0x80482f <__system_time>
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	80 93 2f 48 	sts	0x482F, r24	; 0x80482f <__system_time>
     31a:	80 91 30 48 	lds	r24, 0x4830	; 0x804830 <__system_time+0x1>
     31e:	8f 4f       	sbci	r24, 0xFF	; 255
     320:	80 93 30 48 	sts	0x4830, r24	; 0x804830 <__system_time+0x1>
     324:	80 91 31 48 	lds	r24, 0x4831	; 0x804831 <__system_time+0x2>
     328:	8f 4f       	sbci	r24, 0xFF	; 255
     32a:	80 93 31 48 	sts	0x4831, r24	; 0x804831 <__system_time+0x2>
     32e:	80 91 32 48 	lds	r24, 0x4832	; 0x804832 <__system_time+0x3>
     332:	8f 4f       	sbci	r24, 0xFF	; 255
     334:	80 93 32 48 	sts	0x4832, r24	; 0x804832 <__system_time+0x3>
     338:	8f 91       	pop	r24
     33a:	8f bf       	out	0x3f, r24	; 63
     33c:	8f 91       	pop	r24
     33e:	08 95       	ret

00000340 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
	system_init();
     348:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <system_init>
}
     34c:	00 00       	nop
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	08 95       	ret

00000354 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     364:	0f 92       	push	r0
     366:	2f 93       	push	r18
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     378:	80 e2       	ldi	r24, 0x20	; 32
     37a:	9b e0       	ldi	r25, 0x0B	; 11
     37c:	fc 01       	movw	r30, r24
     37e:	86 81       	ldd	r24, Z+6	; 0x06
     380:	88 2f       	mov	r24, r24
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	81 70       	andi	r24, 0x01	; 1
     386:	99 27       	eor	r25, r25
     388:	21 e0       	ldi	r18, 0x01	; 1
     38a:	89 2b       	or	r24, r25
     38c:	09 f4       	brne	.+2      	; 0x390 <__vector_30+0x3c>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	22 23       	and	r18, r18
     392:	29 f0       	breq	.+10     	; 0x39e <__vector_30+0x4a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     394:	80 e2       	ldi	r24, 0x20	; 32
     396:	9b e0       	ldi	r25, 0x0B	; 11
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	fc 01       	movw	r30, r24
     39c:	26 83       	std	Z+6, r18	; 0x06
    }
}
     39e:	00 00       	nop
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	ff 91       	pop	r31
     3a6:	ef 91       	pop	r30
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     3b4:	0f 90       	pop	r0
     3b6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_19>:

ISR(USART0_RXC_vect)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     3c8:	0f 92       	push	r0
     3ca:	11 24       	eor	r1, r1
     3cc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     3d0:	0f 92       	push	r0
     3d2:	2f 93       	push	r18
     3d4:	3f 93       	push	r19
     3d6:	4f 93       	push	r20
     3d8:	5f 93       	push	r21
     3da:	6f 93       	push	r22
     3dc:	7f 93       	push	r23
     3de:	8f 93       	push	r24
     3e0:	9f 93       	push	r25
     3e2:	af 93       	push	r26
     3e4:	bf 93       	push	r27
     3e6:	ef 93       	push	r30
     3e8:	ff 93       	push	r31
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	1f 92       	push	r1
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
	uint8_t rx_char = USART0_get_data();
     3f4:	0e 94 b4 41 	call	0x8368	; 0x8368 <USART0_get_data>
     3f8:	89 83       	std	Y+1, r24	; 0x01
	
	if(g_linkbus_usart_number == USART_0)
     3fa:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <g_linkbus_usart_number>
     3fe:	88 23       	and	r24, r24
     400:	19 f4       	brne	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		linkbus_Rx(rx_char);
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
     408:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
     40c:	88 23       	and	r24, r24
     40e:	19 f4       	brne	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	{
		serial_Rx(rx_char);
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z9serial_Rxh>
	}
}
     416:	00 00       	nop
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	5f 91       	pop	r21
     430:	4f 91       	pop	r20
     432:	3f 91       	pop	r19
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     43c:	0f 90       	pop	r0
     43e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_55>:

ISR(USART4_RXC_vect)
{
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     458:	0f 92       	push	r0
     45a:	2f 93       	push	r18
     45c:	3f 93       	push	r19
     45e:	4f 93       	push	r20
     460:	5f 93       	push	r21
     462:	6f 93       	push	r22
     464:	7f 93       	push	r23
     466:	8f 93       	push	r24
     468:	9f 93       	push	r25
     46a:	af 93       	push	r26
     46c:	bf 93       	push	r27
     46e:	ef 93       	push	r30
     470:	ff 93       	push	r31
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	1f 92       	push	r1
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	uint8_t rx_char = USART4_get_data();
     47c:	0e 94 9e 42 	call	0x853c	; 0x853c <USART4_get_data>
     480:	89 83       	std	Y+1, r24	; 0x01
	
	if(g_linkbus_usart_number == USART_4)
     482:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <g_linkbus_usart_number>
     486:	84 30       	cpi	r24, 0x04	; 4
     488:	19 f4       	brne	.+6      	; 0x490 <__vector_55+0x48>
	{
		linkbus_Rx(rx_char);
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
     490:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
     494:	84 30       	cpi	r24, 0x04	; 4
     496:	19 f4       	brne	.+6      	; 0x49e <__vector_55+0x56>
	{
		serial_Rx(rx_char);
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z9serial_Rxh>
	}
}
     49e:	00 00       	nop
     4a0:	0f 90       	pop	r0
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	ff 91       	pop	r31
     4a8:	ef 91       	pop	r30
     4aa:	bf 91       	pop	r27
     4ac:	af 91       	pop	r26
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	7f 91       	pop	r23
     4b4:	6f 91       	pop	r22
     4b6:	5f 91       	pop	r21
     4b8:	4f 91       	pop	r20
     4ba:	3f 91       	pop	r19
     4bc:	2f 91       	pop	r18
     4be:	0f 90       	pop	r0
     4c0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     4c4:	0f 90       	pop	r0
     4c6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <_Z9serial_Rxh>:

void serial_Rx(uint8_t rx_char)
{
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	2a 97       	sbiw	r28, 0x0a	; 10
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	8a 87       	std	Y+10, r24	; 0x0a
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     4e0:	80 91 8e 44 	lds	r24, 0x448E	; 0x80448e <__data_end>
     4e4:	90 91 8f 44 	lds	r25, 0x448F	; 0x80448f <__data_end+0x1>
     4e8:	89 2b       	or	r24, r25
     4ea:	31 f4       	brne	.+12     	; 0x4f8 <_Z9serial_Rxh+0x28>
	{
		buff = nextEmptySBRxBuffer();
     4ec:	0e 94 ab 30 	call	0x6156	; 0x6156 <nextEmptySBRxBuffer>
     4f0:	80 93 8e 44 	sts	0x448E, r24	; 0x80448e <__data_end>
     4f4:	90 93 8f 44 	sts	0x448F, r25	; 0x80448f <__data_end+0x1>
	}

	if(buff)
     4f8:	80 91 8e 44 	lds	r24, 0x448E	; 0x80448e <__data_end>
     4fc:	90 91 8f 44 	lds	r25, 0x448F	; 0x80448f <__data_end+0x1>
     500:	89 2b       	or	r24, r25
     502:	09 f4       	brne	.+2      	; 0x506 <_Z9serial_Rxh+0x36>
     504:	5e c2       	rjmp	.+1212   	; 0x9c2 <_Z9serial_Rxh+0x4f2>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
     506:	8a 85       	ldd	r24, Y+10	; 0x0a
     508:	88 2f       	mov	r24, r24
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <toupper>
     510:	8a 87       	std	Y+10, r24	; 0x0a

		if(ignoreCount)
     512:	80 91 90 44 	lds	r24, 0x4490	; 0x804490 <_ZZ9serial_RxhE11ignoreCount>
     516:	88 23       	and	r24, r24
     518:	39 f0       	breq	.+14     	; 0x528 <_Z9serial_Rxh+0x58>
		{
			rx_char = '\0';
     51a:	1a 86       	std	Y+10, r1	; 0x0a
			ignoreCount--;
     51c:	80 91 90 44 	lds	r24, 0x4490	; 0x804490 <_ZZ9serial_RxhE11ignoreCount>
     520:	81 50       	subi	r24, 0x01	; 1
     522:	80 93 90 44 	sts	0x4490, r24	; 0x804490 <_ZZ9serial_RxhE11ignoreCount>
			{
				sb_echo_char(rx_char);
			}
		}
	}	
}
     526:	4d c2       	rjmp	.+1178   	; 0x9c2 <_Z9serial_Rxh+0x4f2>
		if(ignoreCount)
		{
			rx_char = '\0';
			ignoreCount--;
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
     528:	8a 85       	ldd	r24, Y+10	; 0x0a
     52a:	8b 31       	cpi	r24, 0x1B	; 27
     52c:	91 f4       	brne	.+36     	; 0x552 <_Z9serial_Rxh+0x82>
		{
			rx_char = '\0';
     52e:	1a 86       	std	Y+10, r1	; 0x0a

			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
     530:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     534:	84 31       	cpi	r24, 0x14	; 20
     536:	48 f4       	brcc	.+18     	; 0x54a <_Z9serial_Rxh+0x7a>
			{
				rx_char = textBuff[charIndex];
     538:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     53c:	88 2f       	mov	r24, r24
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	8e 56       	subi	r24, 0x6E	; 110
     542:	9b 4b       	sbci	r25, 0xBB	; 187
     544:	fc 01       	movw	r30, r24
     546:	80 81       	ld	r24, Z
     548:	8a 87       	std	Y+10, r24	; 0x0a
			}

			ignoreCount = 2;        /* throw out the next two characters */
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	80 93 90 44 	sts	0x4490, r24	; 0x804490 <_ZZ9serial_RxhE11ignoreCount>
			{
				sb_echo_char(rx_char);
			}
		}
	}	
}
     550:	38 c2       	rjmp	.+1136   	; 0x9c2 <_Z9serial_Rxh+0x4f2>
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     552:	8a 85       	ldd	r24, Y+10	; 0x0a
     554:	8d 30       	cpi	r24, 0x0D	; 13
     556:	09 f0       	breq	.+2      	; 0x55a <_Z9serial_Rxh+0x8a>
     558:	60 c0       	rjmp	.+192    	; 0x61a <_Z9serial_Rxh+0x14a>
		{
			if(receiving_msg)
     55a:	80 91 c4 44 	lds	r24, 0x44C4	; 0x8044c4 <_ZZ9serial_RxhE13receiving_msg>
     55e:	88 23       	and	r24, r24
     560:	09 f4       	brne	.+2      	; 0x564 <_Z9serial_Rxh+0x94>
     562:	41 c0       	rjmp	.+130    	; 0x5e6 <_Z9serial_Rxh+0x116>
			{
				if(charIndex > 0)
     564:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     568:	88 23       	and	r24, r24
     56a:	d1 f1       	breq	.+116    	; 0x5e0 <_Z9serial_Rxh+0x110>
				{
					buff->type = SERIALBUS_MSG_QUERY;
     56c:	80 91 8e 44 	lds	r24, 0x448E	; 0x80448e <__data_end>
     570:	90 91 8f 44 	lds	r25, 0x448F	; 0x80448f <__data_end+0x1>
     574:	22 e0       	ldi	r18, 0x02	; 2
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
					buff->id = (SBMessageID)msg_ID;
     57a:	80 91 8e 44 	lds	r24, 0x448E	; 0x80448e <__data_end>
     57e:	90 91 8f 44 	lds	r25, 0x448F	; 0x80448f <__data_end+0x1>
     582:	20 91 c5 44 	lds	r18, 0x44C5	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     586:	30 91 c6 44 	lds	r19, 0x44C6	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>
     58a:	fc 01       	movw	r30, r24
     58c:	21 83       	std	Z+1, r18	; 0x01
     58e:	32 83       	std	Z+2, r19	; 0x02

					if(field_index > 0) /* terminate the last field */
     590:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     594:	88 23       	and	r24, r24
     596:	e1 f0       	breq	.+56     	; 0x5d0 <_Z9serial_Rxh+0x100>
					{
						buff->fields[field_index - 1][field_len] = 0;
     598:	40 91 8e 44 	lds	r20, 0x448E	; 0x80448e <__data_end>
     59c:	50 91 8f 44 	lds	r21, 0x448F	; 0x80448f <__data_end+0x1>
     5a0:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     5a4:	88 2f       	mov	r24, r24
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	bc 01       	movw	r22, r24
     5aa:	61 50       	subi	r22, 0x01	; 1
     5ac:	71 09       	sbc	r23, r1
     5ae:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	e4 e1       	ldi	r30, 0x14	; 20
     5b8:	e6 9f       	mul	r30, r22
     5ba:	90 01       	movw	r18, r0
     5bc:	e7 9f       	mul	r30, r23
     5be:	30 0d       	add	r19, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	24 0f       	add	r18, r20
     5c4:	35 1f       	adc	r19, r21
     5c6:	82 0f       	add	r24, r18
     5c8:	93 1f       	adc	r25, r19
     5ca:	03 96       	adiw	r24, 0x03	; 3
     5cc:	fc 01       	movw	r30, r24
     5ce:	10 82       	st	Z, r1
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
     5d0:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     5d4:	88 2f       	mov	r24, r24
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	8e 56       	subi	r24, 0x6E	; 110
     5da:	9b 4b       	sbci	r25, 0xBB	; 187
     5dc:	fc 01       	movw	r30, r24
     5de:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
     5e0:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_NewLine>
     5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <_Z9serial_Rxh+0x128>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
     5e6:	80 91 8e 44 	lds	r24, 0x448E	; 0x80448e <__data_end>
     5ea:	90 91 8f 44 	lds	r25, 0x448F	; 0x80448f <__data_end+0x1>
     5ee:	2f ef       	ldi	r18, 0xFF	; 255
     5f0:	3f ef       	ldi	r19, 0xFF	; 255
     5f2:	fc 01       	movw	r30, r24
     5f4:	21 83       	std	Z+1, r18	; 0x01
     5f6:	32 83       	std	Z+2, r19	; 0x02
			}

			charIndex = 0;
     5f8:	10 92 91 44 	sts	0x4491, r1	; 0x804491 <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
     5fc:	10 92 c8 44 	sts	0x44C8, r1	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
     600:	10 92 c5 44 	sts	0x44C5, r1	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     604:	10 92 c6 44 	sts	0x44C6, r1	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
     608:	10 92 c7 44 	sts	0x44C7, r1	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
			buff = NULL;
     60c:	10 92 8e 44 	sts	0x448E, r1	; 0x80448e <__data_end>
     610:	10 92 8f 44 	sts	0x448F, r1	; 0x80448f <__data_end+0x1>

			receiving_msg = false;
     614:	10 92 c4 44 	sts	0x44C4, r1	; 0x8044c4 <_ZZ9serial_RxhE13receiving_msg>
			{
				sb_echo_char(rx_char);
			}
		}
	}	
}
     618:	d4 c1       	rjmp	.+936    	; 0x9c2 <_Z9serial_Rxh+0x4f2>
			field_index = 0;
			buff = NULL;

			receiving_msg = false;
		}
		else if(rx_char)
     61a:	8a 85       	ldd	r24, Y+10	; 0x0a
     61c:	88 23       	and	r24, r24
     61e:	09 f4       	brne	.+2      	; 0x622 <_Z9serial_Rxh+0x152>
     620:	d0 c1       	rjmp	.+928    	; 0x9c2 <_Z9serial_Rxh+0x4f2>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
     622:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     626:	88 2f       	mov	r24, r24
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	8e 56       	subi	r24, 0x6E	; 110
     62c:	9b 4b       	sbci	r25, 0xBB	; 187
     62e:	2a 85       	ldd	r18, Y+10	; 0x0a
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18

			if(charIndex)
     634:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     638:	88 23       	and	r24, r24
     63a:	09 f4       	brne	.+2      	; 0x63e <_Z9serial_Rxh+0x16e>
     63c:	7c c1       	rjmp	.+760    	; 0x936 <_Z9serial_Rxh+0x466>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
     63e:	8a 85       	ldd	r24, Y+10	; 0x0a
     640:	8f 37       	cpi	r24, 0x7F	; 127
     642:	09 f0       	breq	.+2      	; 0x646 <_Z9serial_Rxh+0x176>
     644:	a1 c0       	rjmp	.+322    	; 0x788 <_Z9serial_Rxh+0x2b8>
				{
					charIndex--;
     646:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     64a:	81 50       	subi	r24, 0x01	; 1
     64c:	80 93 91 44 	sts	0x4491, r24	; 0x804491 <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
     650:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     654:	88 23       	and	r24, r24
     656:	29 f5       	brne	.+74     	; 0x6a2 <_Z9serial_Rxh+0x1d2>
					{
						msg_ID -= textBuff[charIndex];
     658:	20 91 c5 44 	lds	r18, 0x44C5	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     65c:	30 91 c6 44 	lds	r19, 0x44C6	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>
     660:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     664:	88 2f       	mov	r24, r24
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	8e 56       	subi	r24, 0x6E	; 110
     66a:	9b 4b       	sbci	r25, 0xBB	; 187
     66c:	fc 01       	movw	r30, r24
     66e:	80 81       	ld	r24, Z
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a9 01       	movw	r20, r18
     676:	48 1b       	sub	r20, r24
     678:	59 0b       	sbc	r21, r25
     67a:	ca 01       	movw	r24, r20
     67c:	80 93 c5 44 	sts	0x44C5, r24	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     680:	90 93 c6 44 	sts	0x44C6, r25	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>
						msg_ID /= 10;
     684:	80 91 c5 44 	lds	r24, 0x44C5	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     688:	90 91 c6 44 	lds	r25, 0x44C6	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>
     68c:	2a e0       	ldi	r18, 0x0A	; 10
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	b9 01       	movw	r22, r18
     692:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <__divmodhi4>
     696:	cb 01       	movw	r24, r22
     698:	80 93 c5 44 	sts	0x44C5, r24	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     69c:	90 93 c6 44 	sts	0x44C6, r25	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>
     6a0:	63 c0       	rjmp	.+198    	; 0x768 <_Z9serial_Rxh+0x298>
					}
					else if(field_len)
     6a2:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     6a6:	88 23       	and	r24, r24
     6a8:	11 f1       	breq	.+68     	; 0x6ee <_Z9serial_Rxh+0x21e>
					{
						field_len--;
     6aa:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     6ae:	81 50       	subi	r24, 0x01	; 1
     6b0:	80 93 c8 44 	sts	0x44C8, r24	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
     6b4:	40 91 8e 44 	lds	r20, 0x448E	; 0x80448e <__data_end>
     6b8:	50 91 8f 44 	lds	r21, 0x448F	; 0x80448f <__data_end+0x1>
     6bc:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     6c0:	88 2f       	mov	r24, r24
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	bc 01       	movw	r22, r24
     6c6:	61 50       	subi	r22, 0x01	; 1
     6c8:	71 09       	sbc	r23, r1
     6ca:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     6ce:	88 2f       	mov	r24, r24
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	e4 e1       	ldi	r30, 0x14	; 20
     6d4:	e6 9f       	mul	r30, r22
     6d6:	90 01       	movw	r18, r0
     6d8:	e7 9f       	mul	r30, r23
     6da:	30 0d       	add	r19, r0
     6dc:	11 24       	eor	r1, r1
     6de:	24 0f       	add	r18, r20
     6e0:	35 1f       	adc	r19, r21
     6e2:	82 0f       	add	r24, r18
     6e4:	93 1f       	adc	r25, r19
     6e6:	03 96       	adiw	r24, 0x03	; 3
     6e8:	fc 01       	movw	r30, r24
     6ea:	10 82       	st	Z, r1
     6ec:	3d c0       	rjmp	.+122    	; 0x768 <_Z9serial_Rxh+0x298>
					}
					else if(textBuff[charIndex] == ' ')
     6ee:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	8e 56       	subi	r24, 0x6E	; 110
     6f8:	9b 4b       	sbci	r25, 0xBB	; 187
     6fa:	fc 01       	movw	r30, r24
     6fc:	80 81       	ld	r24, Z
     6fe:	80 32       	cpi	r24, 0x20	; 32
     700:	d9 f4       	brne	.+54     	; 0x738 <_Z9serial_Rxh+0x268>
					{
						field_index--;
     702:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     706:	81 50       	subi	r24, 0x01	; 1
     708:	80 93 c7 44 	sts	0x44C7, r24	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
     70c:	20 91 8e 44 	lds	r18, 0x448E	; 0x80448e <__data_end>
     710:	30 91 8f 44 	lds	r19, 0x448F	; 0x80448f <__data_end+0x1>
     714:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     718:	48 2f       	mov	r20, r24
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	64 e1       	ldi	r22, 0x14	; 20
     71e:	64 9f       	mul	r22, r20
     720:	c0 01       	movw	r24, r0
     722:	65 9f       	mul	r22, r21
     724:	90 0d       	add	r25, r0
     726:	11 24       	eor	r1, r1
     728:	03 96       	adiw	r24, 0x03	; 3
     72a:	82 0f       	add	r24, r18
     72c:	93 1f       	adc	r25, r19
     72e:	0e 94 0c 47 	call	0x8e18	; 0x8e18 <strlen>
     732:	80 93 c8 44 	sts	0x44C8, r24	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     736:	18 c0       	rjmp	.+48     	; 0x768 <_Z9serial_Rxh+0x298>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
     738:	20 91 8e 44 	lds	r18, 0x448E	; 0x80448e <__data_end>
     73c:	30 91 8f 44 	lds	r19, 0x448F	; 0x80448f <__data_end+0x1>
     740:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     744:	48 2f       	mov	r20, r24
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	64 e1       	ldi	r22, 0x14	; 20
     74a:	64 9f       	mul	r22, r20
     74c:	c0 01       	movw	r24, r0
     74e:	65 9f       	mul	r22, r21
     750:	90 0d       	add	r25, r0
     752:	11 24       	eor	r1, r1
     754:	82 0f       	add	r24, r18
     756:	93 1f       	adc	r25, r19
     758:	03 96       	adiw	r24, 0x03	; 3
     75a:	fc 01       	movw	r30, r24
     75c:	10 82       	st	Z, r1
						field_index--;
     75e:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     762:	81 50       	subi	r24, 0x01	; 1
     764:	80 93 c7 44 	sts	0x44C7, r24	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
     768:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	8e 56       	subi	r24, 0x6E	; 110
     772:	9b 4b       	sbci	r25, 0xBB	; 187
     774:	fc 01       	movw	r30, r24
     776:	10 82       	st	Z, r1

					if(charIndex == 0)
     778:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     77c:	88 23       	and	r24, r24
     77e:	09 f0       	breq	.+2      	; 0x782 <_Z9serial_Rxh+0x2b2>
     780:	1a c1       	rjmp	.+564    	; 0x9b6 <_Z9serial_Rxh+0x4e6>
					{
						receiving_msg = false;
     782:	10 92 c4 44 	sts	0x44C4, r1	; 0x8044c4 <_ZZ9serial_RxhE13receiving_msg>
     786:	17 c1       	rjmp	.+558    	; 0x9b6 <_Z9serial_Rxh+0x4e6>
					}
				}
				else
				{
					if(rx_char == ' ')
     788:	8a 85       	ldd	r24, Y+10	; 0x0a
     78a:	80 32       	cpi	r24, 0x20	; 32
     78c:	09 f0       	breq	.+2      	; 0x790 <_Z9serial_Rxh+0x2c0>
     78e:	55 c0       	rjmp	.+170    	; 0x83a <_Z9serial_Rxh+0x36a>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
     790:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     794:	88 2f       	mov	r24, r24
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	8e 56       	subi	r24, 0x6E	; 110
     79c:	9b 4b       	sbci	r25, 0xBB	; 187
     79e:	fc 01       	movw	r30, r24
     7a0:	80 81       	ld	r24, Z
     7a2:	80 32       	cpi	r24, 0x20	; 32
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <_Z9serial_Rxh+0x2e4>
     7a6:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     7aa:	88 2f       	mov	r24, r24
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	03 97       	sbiw	r24, 0x03	; 3
     7b2:	14 f0       	brlt	.+4      	; 0x7b8 <_Z9serial_Rxh+0x2e8>
						{
							rx_char = '\0';
     7b4:	1a 86       	std	Y+10, r1	; 0x0a
     7b6:	ff c0       	rjmp	.+510    	; 0x9b6 <_Z9serial_Rxh+0x4e6>
						}
						else
						{
							if(field_index > 0)
     7b8:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     7bc:	88 23       	and	r24, r24
     7be:	e1 f0       	breq	.+56     	; 0x7f8 <_Z9serial_Rxh+0x328>
							{
								buff->fields[field_index - 1][field_len] = '\0';
     7c0:	40 91 8e 44 	lds	r20, 0x448E	; 0x80448e <__data_end>
     7c4:	50 91 8f 44 	lds	r21, 0x448F	; 0x80448f <__data_end+0x1>
     7c8:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	bc 01       	movw	r22, r24
     7d2:	61 50       	subi	r22, 0x01	; 1
     7d4:	71 09       	sbc	r23, r1
     7d6:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     7da:	88 2f       	mov	r24, r24
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	e4 e1       	ldi	r30, 0x14	; 20
     7e0:	e6 9f       	mul	r30, r22
     7e2:	90 01       	movw	r18, r0
     7e4:	e7 9f       	mul	r30, r23
     7e6:	30 0d       	add	r19, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	24 0f       	add	r18, r20
     7ec:	35 1f       	adc	r19, r21
     7ee:	82 0f       	add	r24, r18
     7f0:	93 1f       	adc	r25, r19
     7f2:	03 96       	adiw	r24, 0x03	; 3
     7f4:	fc 01       	movw	r30, r24
     7f6:	10 82       	st	Z, r1
							}

							field_index++;
     7f8:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	80 93 c7 44 	sts	0x44C7, r24	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
							field_len = 0;
     802:	10 92 c8 44 	sts	0x44C8, r1	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
     806:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     80a:	88 2f       	mov	r24, r24
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	8a 83       	std	Y+2, r24	; 0x02
     812:	9b 83       	std	Y+3, r25	; 0x03
     814:	81 e3       	ldi	r24, 0x31	; 49
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	8c 83       	std	Y+4, r24	; 0x04
     81a:	9d 83       	std	Y+5, r25	; 0x05
     81c:	2a 81       	ldd	r18, Y+2	; 0x02
     81e:	3b 81       	ldd	r19, Y+3	; 0x03
     820:	8c 81       	ldd	r24, Y+4	; 0x04
     822:	9d 81       	ldd	r25, Y+5	; 0x05
     824:	28 17       	cp	r18, r24
     826:	39 07       	cpc	r19, r25
     828:	1c f4       	brge	.+6      	; 0x830 <_Z9serial_Rxh+0x360>
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	9b 81       	ldd	r25, Y+3	; 0x03
     82e:	02 c0       	rjmp	.+4      	; 0x834 <_Z9serial_Rxh+0x364>
     830:	8c 81       	ldd	r24, Y+4	; 0x04
     832:	9d 81       	ldd	r25, Y+5	; 0x05
     834:	80 93 91 44 	sts	0x4491, r24	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     838:	be c0       	rjmp	.+380    	; 0x9b6 <_Z9serial_Rxh+0x4e6>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
     83a:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     83e:	85 31       	cpi	r24, 0x15	; 21
     840:	08 f0       	brcs	.+2      	; 0x844 <_Z9serial_Rxh+0x374>
     842:	77 c0       	rjmp	.+238    	; 0x932 <_Z9serial_Rxh+0x462>
					{
						if(field_index == 0)    /* message ID received */
     844:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     848:	88 23       	and	r24, r24
     84a:	e1 f4       	brne	.+56     	; 0x884 <_Z9serial_Rxh+0x3b4>
						{
							msg_ID = msg_ID * 10 + rx_char;
     84c:	80 91 c5 44 	lds	r24, 0x44C5	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     850:	90 91 c6 44 	lds	r25, 0x44C6	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	9c 01       	movw	r18, r24
     85a:	22 0f       	add	r18, r18
     85c:	33 1f       	adc	r19, r19
     85e:	22 0f       	add	r18, r18
     860:	33 1f       	adc	r19, r19
     862:	28 0f       	add	r18, r24
     864:	39 1f       	adc	r19, r25
     866:	8a 85       	ldd	r24, Y+10	; 0x0a
     868:	88 2f       	mov	r24, r24
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	82 0f       	add	r24, r18
     86e:	93 1f       	adc	r25, r19
     870:	80 93 c5 44 	sts	0x44C5, r24	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     874:	90 93 c6 44 	sts	0x44C6, r25	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
     878:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     87c:	8f 5f       	subi	r24, 0xFF	; 255
     87e:	80 93 c8 44 	sts	0x44C8, r24	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     882:	3d c0       	rjmp	.+122    	; 0x8fe <_Z9serial_Rxh+0x42e>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
     884:	40 91 8e 44 	lds	r20, 0x448E	; 0x80448e <__data_end>
     888:	50 91 8f 44 	lds	r21, 0x448F	; 0x80448f <__data_end+0x1>
     88c:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	bc 01       	movw	r22, r24
     896:	61 50       	subi	r22, 0x01	; 1
     898:	71 09       	sbc	r23, r1
     89a:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	98 0f       	add	r25, r24
     8a2:	90 93 c8 44 	sts	0x44C8, r25	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     8a6:	88 2f       	mov	r24, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	e4 e1       	ldi	r30, 0x14	; 20
     8ac:	e6 9f       	mul	r30, r22
     8ae:	90 01       	movw	r18, r0
     8b0:	e7 9f       	mul	r30, r23
     8b2:	30 0d       	add	r19, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	24 0f       	add	r18, r20
     8b8:	35 1f       	adc	r19, r21
     8ba:	82 0f       	add	r24, r18
     8bc:	93 1f       	adc	r25, r19
     8be:	03 96       	adiw	r24, 0x03	; 3
     8c0:	2a 85       	ldd	r18, Y+10	; 0x0a
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
							buff->fields[field_index - 1][field_len] = '\0';
     8c6:	40 91 8e 44 	lds	r20, 0x448E	; 0x80448e <__data_end>
     8ca:	50 91 8f 44 	lds	r21, 0x448F	; 0x80448f <__data_end+0x1>
     8ce:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
     8d2:	88 2f       	mov	r24, r24
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	bc 01       	movw	r22, r24
     8d8:	61 50       	subi	r22, 0x01	; 1
     8da:	71 09       	sbc	r23, r1
     8dc:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <_ZZ9serial_RxhE9field_len>
     8e0:	88 2f       	mov	r24, r24
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	e4 e1       	ldi	r30, 0x14	; 20
     8e6:	e6 9f       	mul	r30, r22
     8e8:	90 01       	movw	r18, r0
     8ea:	e7 9f       	mul	r30, r23
     8ec:	30 0d       	add	r19, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	24 0f       	add	r18, r20
     8f2:	35 1f       	adc	r19, r21
     8f4:	82 0f       	add	r24, r18
     8f6:	93 1f       	adc	r25, r19
     8f8:	03 96       	adiw	r24, 0x03	; 3
     8fa:	fc 01       	movw	r30, r24
     8fc:	10 82       	st	Z, r1
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
     8fe:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     902:	88 2f       	mov	r24, r24
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	8e 83       	std	Y+6, r24	; 0x06
     90a:	9f 83       	std	Y+7, r25	; 0x07
     90c:	81 e3       	ldi	r24, 0x31	; 49
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	88 87       	std	Y+8, r24	; 0x08
     912:	99 87       	std	Y+9, r25	; 0x09
     914:	2e 81       	ldd	r18, Y+6	; 0x06
     916:	3f 81       	ldd	r19, Y+7	; 0x07
     918:	88 85       	ldd	r24, Y+8	; 0x08
     91a:	99 85       	ldd	r25, Y+9	; 0x09
     91c:	28 17       	cp	r18, r24
     91e:	39 07       	cpc	r19, r25
     920:	1c f4       	brge	.+6      	; 0x928 <_Z9serial_Rxh+0x458>
     922:	8e 81       	ldd	r24, Y+6	; 0x06
     924:	9f 81       	ldd	r25, Y+7	; 0x07
     926:	02 c0       	rjmp	.+4      	; 0x92c <_Z9serial_Rxh+0x45c>
     928:	88 85       	ldd	r24, Y+8	; 0x08
     92a:	99 85       	ldd	r25, Y+9	; 0x09
     92c:	80 93 91 44 	sts	0x4491, r24	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     930:	42 c0       	rjmp	.+132    	; 0x9b6 <_Z9serial_Rxh+0x4e6>
					}
					else
					{
						rx_char = '\0';
     932:	1a 86       	std	Y+10, r1	; 0x0a
     934:	40 c0       	rjmp	.+128    	; 0x9b6 <_Z9serial_Rxh+0x4e6>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
     936:	8a 85       	ldd	r24, Y+10	; 0x0a
     938:	8f 37       	cpi	r24, 0x7F	; 127
     93a:	69 f4       	brne	.+26     	; 0x956 <_Z9serial_Rxh+0x486>
				{
					if(msg_ID <= 0)
     93c:	80 91 c5 44 	lds	r24, 0x44C5	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     940:	90 91 c6 44 	lds	r25, 0x44C6	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>
     944:	18 16       	cp	r1, r24
     946:	19 06       	cpc	r1, r25
     948:	0c f0       	brlt	.+2      	; 0x94c <_Z9serial_Rxh+0x47c>
					{
						rx_char = '\0';
     94a:	1a 86       	std	Y+10, r1	; 0x0a
					}

					msg_ID = 0;
     94c:	10 92 c5 44 	sts	0x44C5, r1	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     950:	10 92 c6 44 	sts	0x44C6, r1	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>
     954:	30 c0       	rjmp	.+96     	; 0x9b6 <_Z9serial_Rxh+0x4e6>
				}
				else if(rx_char == ' ') /* Handle Space */
     956:	8a 85       	ldd	r24, Y+10	; 0x0a
     958:	80 32       	cpi	r24, 0x20	; 32
     95a:	11 f4       	brne	.+4      	; 0x960 <_Z9serial_Rxh+0x490>
				{
					rx_char = '\0';
     95c:	1a 86       	std	Y+10, r1	; 0x0a
     95e:	2b c0       	rjmp	.+86     	; 0x9b6 <_Z9serial_Rxh+0x4e6>
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
     960:	10 92 c7 44 	sts	0x44C7, r1	; 0x8044c7 <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
     964:	8a 85       	ldd	r24, Y+10	; 0x0a
     966:	88 2f       	mov	r24, r24
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	80 93 c5 44 	sts	0x44C5, r24	; 0x8044c5 <_ZZ9serial_RxhE6msg_ID>
     96e:	90 93 c6 44 	sts	0x44C6, r25	; 0x8044c6 <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
     972:	19 82       	std	Y+1, r1	; 0x01
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	83 30       	cpi	r24, 0x03	; 3
     978:	b0 f4       	brcc	.+44     	; 0x9a6 <_Z9serial_Rxh+0x4d6>
					{
						buff->fields[i][0] = '\0';
     97a:	20 91 8e 44 	lds	r18, 0x448E	; 0x80448e <__data_end>
     97e:	30 91 8f 44 	lds	r19, 0x448F	; 0x80448f <__data_end+0x1>
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	48 2f       	mov	r20, r24
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	64 e1       	ldi	r22, 0x14	; 20
     98a:	64 9f       	mul	r22, r20
     98c:	c0 01       	movw	r24, r0
     98e:	65 9f       	mul	r22, r21
     990:	90 0d       	add	r25, r0
     992:	11 24       	eor	r1, r1
     994:	82 0f       	add	r24, r18
     996:	93 1f       	adc	r25, r19
     998:	03 96       	adiw	r24, 0x03	; 3
     99a:	fc 01       	movw	r30, r24
     99c:	10 82       	st	Z, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	8f 5f       	subi	r24, 0xFF	; 255
     9a2:	89 83       	std	Y+1, r24	; 0x01
     9a4:	e7 cf       	rjmp	.-50     	; 0x974 <_Z9serial_Rxh+0x4a4>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = true;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	80 93 c4 44 	sts	0x44C4, r24	; 0x8044c4 <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
     9ac:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ9serial_RxhE9charIndex>
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
     9b2:	80 93 91 44 	sts	0x4491, r24	; 0x804491 <_ZZ9serial_RxhE9charIndex>
				}
			}

			if(rx_char)
     9b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     9b8:	88 23       	and	r24, r24
     9ba:	19 f0       	breq	.+6      	; 0x9c2 <_Z9serial_Rxh+0x4f2>
			{
				sb_echo_char(rx_char);
     9bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     9be:	0e 94 c4 31 	call	0x6388	; 0x6388 <sb_echo_char>
			}
		}
	}	
}
     9c2:	00 00       	nop
     9c4:	2a 96       	adiw	r28, 0x0a	; 10
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     9e0:	0f 92       	push	r0
     9e2:	2f 93       	push	r18
     9e4:	3f 93       	push	r19
     9e6:	4f 93       	push	r20
     9e8:	5f 93       	push	r21
     9ea:	6f 93       	push	r22
     9ec:	7f 93       	push	r23
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
     9f2:	af 93       	push	r26
     9f4:	bf 93       	push	r27
     9f6:	ef 93       	push	r30
     9f8:	ff 93       	push	r31
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
	if(g_linkbus_usart_number == USART_0)
     a02:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <g_linkbus_usart_number>
     a06:	88 23       	and	r24, r24
     a08:	09 f0       	breq	.+2      	; 0xa0c <__vector_20+0x3c>
     a0a:	45 c0       	rjmp	.+138    	; 0xa96 <__vector_20+0xc6>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     a0c:	80 91 c9 44 	lds	r24, 0x44C9	; 0x8044c9 <_ZZ11__vector_20E4buff>
     a10:	90 91 ca 44 	lds	r25, 0x44CA	; 0x8044ca <_ZZ11__vector_20E4buff+0x1>
     a14:	89 2b       	or	r24, r25
     a16:	31 f4       	brne	.+12     	; 0xa24 <__vector_20+0x54>
		{
			buff = nextFullLBTxBuffer();
     a18:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_Z18nextFullLBTxBufferv>
     a1c:	80 93 c9 44 	sts	0x44C9, r24	; 0x8044c9 <_ZZ11__vector_20E4buff>
     a20:	90 93 ca 44 	sts	0x44CA, r25	; 0x8044ca <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
     a24:	20 91 c9 44 	lds	r18, 0x44C9	; 0x8044c9 <_ZZ11__vector_20E4buff>
     a28:	30 91 ca 44 	lds	r19, 0x44CA	; 0x8044ca <_ZZ11__vector_20E4buff+0x1>
     a2c:	80 91 cb 44 	lds	r24, 0x44CB	; 0x8044cb <_ZZ11__vector_20E9charIndex>
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	82 0f       	add	r24, r18
     a36:	93 1f       	adc	r25, r19
     a38:	fc 01       	movw	r30, r24
     a3a:	80 81       	ld	r24, Z
     a3c:	88 23       	and	r24, r24
     a3e:	a9 f0       	breq	.+42     	; 0xa6a <__vector_20+0x9a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	98 e0       	ldi	r25, 0x08	; 8
     a44:	40 91 c9 44 	lds	r20, 0x44C9	; 0x8044c9 <_ZZ11__vector_20E4buff>
     a48:	50 91 ca 44 	lds	r21, 0x44CA	; 0x8044ca <_ZZ11__vector_20E4buff+0x1>
     a4c:	20 91 cb 44 	lds	r18, 0x44CB	; 0x8044cb <_ZZ11__vector_20E9charIndex>
     a50:	31 e0       	ldi	r19, 0x01	; 1
     a52:	32 0f       	add	r19, r18
     a54:	30 93 cb 44 	sts	0x44CB, r19	; 0x8044cb <_ZZ11__vector_20E9charIndex>
     a58:	22 2f       	mov	r18, r18
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	24 0f       	add	r18, r20
     a5e:	35 1f       	adc	r19, r21
     a60:	f9 01       	movw	r30, r18
     a62:	20 81       	ld	r18, Z
     a64:	fc 01       	movw	r30, r24
     a66:	22 83       	std	Z+2, r18	; 0x02
     a68:	16 c0       	rjmp	.+44     	; 0xa96 <__vector_20+0xc6>
		}
		else
		{
			charIndex = 0;
     a6a:	10 92 cb 44 	sts	0x44CB, r1	; 0x8044cb <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
     a6e:	80 91 c9 44 	lds	r24, 0x44C9	; 0x8044c9 <_ZZ11__vector_20E4buff>
     a72:	90 91 ca 44 	lds	r25, 0x44CA	; 0x8044ca <_ZZ11__vector_20E4buff+0x1>
     a76:	fc 01       	movw	r30, r24
     a78:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     a7a:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_Z18nextFullLBTxBufferv>
     a7e:	80 93 c9 44 	sts	0x44C9, r24	; 0x8044c9 <_ZZ11__vector_20E4buff>
     a82:	90 93 ca 44 	sts	0x44CA, r25	; 0x8044ca <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
     a86:	80 91 c9 44 	lds	r24, 0x44C9	; 0x8044c9 <_ZZ11__vector_20E4buff>
     a8a:	90 91 ca 44 	lds	r25, 0x44CA	; 0x8044ca <_ZZ11__vector_20E4buff+0x1>
     a8e:	89 2b       	or	r24, r25
     a90:	11 f4       	brne	.+4      	; 0xa96 <__vector_20+0xc6>
			{
				linkbus_end_tx();
     a92:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
     a96:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
     a9a:	88 23       	and	r24, r24
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <__vector_20+0xd0>
     a9e:	45 c0       	rjmp	.+138    	; 0xb2a <__vector_20+0x15a>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     aa0:	80 91 cc 44 	lds	r24, 0x44CC	; 0x8044cc <_ZZ11__vector_20E4buff_0>
     aa4:	90 91 cd 44 	lds	r25, 0x44CD	; 0x8044cd <_ZZ11__vector_20E4buff_0+0x1>
     aa8:	89 2b       	or	r24, r25
     aaa:	31 f4       	brne	.+12     	; 0xab8 <__vector_20+0xe8>
		{
			buff = nextFullSBTxBuffer();
     aac:	0e 94 15 30 	call	0x602a	; 0x602a <nextFullSBTxBuffer>
     ab0:	80 93 cc 44 	sts	0x44CC, r24	; 0x8044cc <_ZZ11__vector_20E4buff_0>
     ab4:	90 93 cd 44 	sts	0x44CD, r25	; 0x8044cd <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     ab8:	20 91 cc 44 	lds	r18, 0x44CC	; 0x8044cc <_ZZ11__vector_20E4buff_0>
     abc:	30 91 cd 44 	lds	r19, 0x44CD	; 0x8044cd <_ZZ11__vector_20E4buff_0+0x1>
     ac0:	80 91 ce 44 	lds	r24, 0x44CE	; 0x8044ce <_ZZ11__vector_20E9charIndex_0>
     ac4:	88 2f       	mov	r24, r24
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	82 0f       	add	r24, r18
     aca:	93 1f       	adc	r25, r19
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	88 23       	and	r24, r24
     ad2:	a9 f0       	breq	.+42     	; 0xafe <__vector_20+0x12e>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	98 e0       	ldi	r25, 0x08	; 8
     ad8:	40 91 cc 44 	lds	r20, 0x44CC	; 0x8044cc <_ZZ11__vector_20E4buff_0>
     adc:	50 91 cd 44 	lds	r21, 0x44CD	; 0x8044cd <_ZZ11__vector_20E4buff_0+0x1>
     ae0:	20 91 ce 44 	lds	r18, 0x44CE	; 0x8044ce <_ZZ11__vector_20E9charIndex_0>
     ae4:	31 e0       	ldi	r19, 0x01	; 1
     ae6:	32 0f       	add	r19, r18
     ae8:	30 93 ce 44 	sts	0x44CE, r19	; 0x8044ce <_ZZ11__vector_20E9charIndex_0>
     aec:	22 2f       	mov	r18, r18
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	24 0f       	add	r18, r20
     af2:	35 1f       	adc	r19, r21
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	fc 01       	movw	r30, r24
     afa:	22 83       	std	Z+2, r18	; 0x02
			{
				serialbus_end_tx();
			}
		}
	}
}
     afc:	16 c0       	rjmp	.+44     	; 0xb2a <__vector_20+0x15a>
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
		}
		else
		{
			charIndex = 0;
     afe:	10 92 ce 44 	sts	0x44CE, r1	; 0x8044ce <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
     b02:	80 91 cc 44 	lds	r24, 0x44CC	; 0x8044cc <_ZZ11__vector_20E4buff_0>
     b06:	90 91 cd 44 	lds	r25, 0x44CD	; 0x8044cd <_ZZ11__vector_20E4buff_0+0x1>
     b0a:	fc 01       	movw	r30, r24
     b0c:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     b0e:	0e 94 15 30 	call	0x602a	; 0x602a <nextFullSBTxBuffer>
     b12:	80 93 cc 44 	sts	0x44CC, r24	; 0x8044cc <_ZZ11__vector_20E4buff_0>
     b16:	90 93 cd 44 	sts	0x44CD, r25	; 0x8044cd <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
     b1a:	80 91 cc 44 	lds	r24, 0x44CC	; 0x8044cc <_ZZ11__vector_20E4buff_0>
     b1e:	90 91 cd 44 	lds	r25, 0x44CD	; 0x8044cd <_ZZ11__vector_20E4buff_0+0x1>
     b22:	89 2b       	or	r24, r25
     b24:	11 f4       	brne	.+4      	; 0xb2a <__vector_20+0x15a>
			{
				serialbus_end_tx();
     b26:	0e 94 1e 31 	call	0x623c	; 0x623c <serialbus_end_tx>
			}
		}
	}
}
     b2a:	00 00       	nop
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	0f 90       	pop	r0
     b4a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     b4e:	0f 90       	pop	r0
     b50:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     b54:	0f 90       	pop	r0
     b56:	1f 90       	pop	r1
     b58:	18 95       	reti

00000b5a <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
     b5a:	1f 92       	push	r1
     b5c:	0f 92       	push	r0
     b5e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     b6a:	0f 92       	push	r0
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	ef 93       	push	r30
     b82:	ff 93       	push	r31
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
	if(g_linkbus_usart_number == USART_4)
     b8c:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <g_linkbus_usart_number>
     b90:	84 30       	cpi	r24, 0x04	; 4
     b92:	09 f0       	breq	.+2      	; 0xb96 <__vector_56+0x3c>
     b94:	45 c0       	rjmp	.+138    	; 0xc20 <__vector_56+0xc6>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     b96:	80 91 cf 44 	lds	r24, 0x44CF	; 0x8044cf <_ZZ11__vector_56E4buff>
     b9a:	90 91 d0 44 	lds	r25, 0x44D0	; 0x8044d0 <_ZZ11__vector_56E4buff+0x1>
     b9e:	89 2b       	or	r24, r25
     ba0:	31 f4       	brne	.+12     	; 0xbae <__vector_56+0x54>
		{
			buff = nextFullLBTxBuffer();
     ba2:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_Z18nextFullLBTxBufferv>
     ba6:	80 93 cf 44 	sts	0x44CF, r24	; 0x8044cf <_ZZ11__vector_56E4buff>
     baa:	90 93 d0 44 	sts	0x44D0, r25	; 0x8044d0 <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
     bae:	20 91 cf 44 	lds	r18, 0x44CF	; 0x8044cf <_ZZ11__vector_56E4buff>
     bb2:	30 91 d0 44 	lds	r19, 0x44D0	; 0x8044d0 <_ZZ11__vector_56E4buff+0x1>
     bb6:	80 91 d1 44 	lds	r24, 0x44D1	; 0x8044d1 <_ZZ11__vector_56E9charIndex>
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	82 0f       	add	r24, r18
     bc0:	93 1f       	adc	r25, r19
     bc2:	fc 01       	movw	r30, r24
     bc4:	80 81       	ld	r24, Z
     bc6:	88 23       	and	r24, r24
     bc8:	a9 f0       	breq	.+42     	; 0xbf4 <__vector_56+0x9a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
     bca:	80 e8       	ldi	r24, 0x80	; 128
     bcc:	98 e0       	ldi	r25, 0x08	; 8
     bce:	40 91 cf 44 	lds	r20, 0x44CF	; 0x8044cf <_ZZ11__vector_56E4buff>
     bd2:	50 91 d0 44 	lds	r21, 0x44D0	; 0x8044d0 <_ZZ11__vector_56E4buff+0x1>
     bd6:	20 91 d1 44 	lds	r18, 0x44D1	; 0x8044d1 <_ZZ11__vector_56E9charIndex>
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	32 0f       	add	r19, r18
     bde:	30 93 d1 44 	sts	0x44D1, r19	; 0x8044d1 <_ZZ11__vector_56E9charIndex>
     be2:	22 2f       	mov	r18, r18
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	24 0f       	add	r18, r20
     be8:	35 1f       	adc	r19, r21
     bea:	f9 01       	movw	r30, r18
     bec:	20 81       	ld	r18, Z
     bee:	fc 01       	movw	r30, r24
     bf0:	22 83       	std	Z+2, r18	; 0x02
     bf2:	16 c0       	rjmp	.+44     	; 0xc20 <__vector_56+0xc6>
		}
		else
		{
			charIndex = 0;
     bf4:	10 92 d1 44 	sts	0x44D1, r1	; 0x8044d1 <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
     bf8:	80 91 cf 44 	lds	r24, 0x44CF	; 0x8044cf <_ZZ11__vector_56E4buff>
     bfc:	90 91 d0 44 	lds	r25, 0x44D0	; 0x8044d0 <_ZZ11__vector_56E4buff+0x1>
     c00:	fc 01       	movw	r30, r24
     c02:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     c04:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_Z18nextFullLBTxBufferv>
     c08:	80 93 cf 44 	sts	0x44CF, r24	; 0x8044cf <_ZZ11__vector_56E4buff>
     c0c:	90 93 d0 44 	sts	0x44D0, r25	; 0x8044d0 <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
     c10:	80 91 cf 44 	lds	r24, 0x44CF	; 0x8044cf <_ZZ11__vector_56E4buff>
     c14:	90 91 d0 44 	lds	r25, 0x44D0	; 0x8044d0 <_ZZ11__vector_56E4buff+0x1>
     c18:	89 2b       	or	r24, r25
     c1a:	11 f4       	brne	.+4      	; 0xc20 <__vector_56+0xc6>
			{
				linkbus_end_tx();
     c1c:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
     c20:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
     c24:	84 30       	cpi	r24, 0x04	; 4
     c26:	09 f0       	breq	.+2      	; 0xc2a <__vector_56+0xd0>
     c28:	45 c0       	rjmp	.+138    	; 0xcb4 <__vector_56+0x15a>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     c2a:	80 91 d2 44 	lds	r24, 0x44D2	; 0x8044d2 <_ZZ11__vector_56E4buff_0>
     c2e:	90 91 d3 44 	lds	r25, 0x44D3	; 0x8044d3 <_ZZ11__vector_56E4buff_0+0x1>
     c32:	89 2b       	or	r24, r25
     c34:	31 f4       	brne	.+12     	; 0xc42 <__vector_56+0xe8>
		{
			buff = nextFullSBTxBuffer();
     c36:	0e 94 15 30 	call	0x602a	; 0x602a <nextFullSBTxBuffer>
     c3a:	80 93 d2 44 	sts	0x44D2, r24	; 0x8044d2 <_ZZ11__vector_56E4buff_0>
     c3e:	90 93 d3 44 	sts	0x44D3, r25	; 0x8044d3 <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     c42:	20 91 d2 44 	lds	r18, 0x44D2	; 0x8044d2 <_ZZ11__vector_56E4buff_0>
     c46:	30 91 d3 44 	lds	r19, 0x44D3	; 0x8044d3 <_ZZ11__vector_56E4buff_0+0x1>
     c4a:	80 91 d4 44 	lds	r24, 0x44D4	; 0x8044d4 <_ZZ11__vector_56E9charIndex_0>
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	82 0f       	add	r24, r18
     c54:	93 1f       	adc	r25, r19
     c56:	fc 01       	movw	r30, r24
     c58:	80 81       	ld	r24, Z
     c5a:	88 23       	and	r24, r24
     c5c:	a9 f0       	breq	.+42     	; 0xc88 <__vector_56+0x12e>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
     c5e:	80 e8       	ldi	r24, 0x80	; 128
     c60:	98 e0       	ldi	r25, 0x08	; 8
     c62:	40 91 d2 44 	lds	r20, 0x44D2	; 0x8044d2 <_ZZ11__vector_56E4buff_0>
     c66:	50 91 d3 44 	lds	r21, 0x44D3	; 0x8044d3 <_ZZ11__vector_56E4buff_0+0x1>
     c6a:	20 91 d4 44 	lds	r18, 0x44D4	; 0x8044d4 <_ZZ11__vector_56E9charIndex_0>
     c6e:	31 e0       	ldi	r19, 0x01	; 1
     c70:	32 0f       	add	r19, r18
     c72:	30 93 d4 44 	sts	0x44D4, r19	; 0x8044d4 <_ZZ11__vector_56E9charIndex_0>
     c76:	22 2f       	mov	r18, r18
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	24 0f       	add	r18, r20
     c7c:	35 1f       	adc	r19, r21
     c7e:	f9 01       	movw	r30, r18
     c80:	20 81       	ld	r18, Z
     c82:	fc 01       	movw	r30, r24
     c84:	22 83       	std	Z+2, r18	; 0x02
			{
				serialbus_end_tx();
			}
		}
	}
}
     c86:	16 c0       	rjmp	.+44     	; 0xcb4 <__vector_56+0x15a>
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
		}
		else
		{
			charIndex = 0;
     c88:	10 92 d4 44 	sts	0x44D4, r1	; 0x8044d4 <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
     c8c:	80 91 d2 44 	lds	r24, 0x44D2	; 0x8044d2 <_ZZ11__vector_56E4buff_0>
     c90:	90 91 d3 44 	lds	r25, 0x44D3	; 0x8044d3 <_ZZ11__vector_56E4buff_0+0x1>
     c94:	fc 01       	movw	r30, r24
     c96:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     c98:	0e 94 15 30 	call	0x602a	; 0x602a <nextFullSBTxBuffer>
     c9c:	80 93 d2 44 	sts	0x44D2, r24	; 0x8044d2 <_ZZ11__vector_56E4buff_0>
     ca0:	90 93 d3 44 	sts	0x44D3, r25	; 0x8044d3 <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
     ca4:	80 91 d2 44 	lds	r24, 0x44D2	; 0x8044d2 <_ZZ11__vector_56E4buff_0>
     ca8:	90 91 d3 44 	lds	r25, 0x44D3	; 0x8044d3 <_ZZ11__vector_56E4buff_0+0x1>
     cac:	89 2b       	or	r24, r25
     cae:	11 f4       	brne	.+4      	; 0xcb4 <__vector_56+0x15a>
			{
				serialbus_end_tx();
     cb0:	0e 94 1e 31 	call	0x623c	; 0x623c <serialbus_end_tx>
			}
		}
	}
}
     cb4:	00 00       	nop
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     cd8:	0f 90       	pop	r0
     cda:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     cf4:	0f 92       	push	r0
     cf6:	2f 93       	push	r18
     cf8:	3f 93       	push	r19
     cfa:	4f 93       	push	r20
     cfc:	5f 93       	push	r21
     cfe:	6f 93       	push	r22
     d00:	7f 93       	push	r23
     d02:	8f 93       	push	r24
     d04:	9f 93       	push	r25
     d06:	af 93       	push	r26
     d08:	bf 93       	push	r27
     d0a:	ef 93       	push	r30
     d0c:	ff 93       	push	r31
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	1f 92       	push	r1
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
	uint8_t rx_char = USART1_get_data();	
     d18:	0e 94 29 42 	call	0x8452	; 0x8452 <USART1_get_data>
     d1c:	89 83       	std	Y+1, r24	; 0x01
	
	if(g_linkbus_usart_number == USART_1)
     d1e:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <g_linkbus_usart_number>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	19 f4       	brne	.+6      	; 0xd2c <__vector_31+0x48>
	{
		linkbus_Rx(rx_char);
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
     d2c:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	19 f4       	brne	.+6      	; 0xd3a <__vector_31+0x56>
	{
		serial_Rx(rx_char);
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z9serial_Rxh>
	}
}
     d3a:	00 00       	nop
     d3c:	0f 90       	pop	r0
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	0f 90       	pop	r0
     d5c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     d60:	0f 90       	pop	r0
     d62:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     d66:	0f 90       	pop	r0
     d68:	1f 90       	pop	r1
     d6a:	18 95       	reti

00000d6c <_Z10linkbus_Rxh>:

void linkbus_Rx(uint8_t rx_char)
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	1f 92       	push	r1
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     d78:	80 91 d5 44 	lds	r24, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     d7c:	90 91 d6 44 	lds	r25, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     d80:	89 2b       	or	r24, r25
     d82:	31 f4       	brne	.+12     	; 0xd90 <_Z10linkbus_Rxh+0x24>
	{
		buff = nextEmptyLBRxBuffer();
     d84:	0e 94 a8 2b 	call	0x5750	; 0x5750 <_Z19nextEmptyLBRxBufferv>
     d88:	80 93 d5 44 	sts	0x44D5, r24	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     d8c:	90 93 d6 44 	sts	0x44D6, r25	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
     d90:	80 91 d5 44 	lds	r24, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     d94:	90 91 d6 44 	lds	r25, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     d98:	89 2b       	or	r24, r25
     d9a:	09 f4       	brne	.+2      	; 0xd9e <_Z10linkbus_Rxh+0x32>
     d9c:	43 c1       	rjmp	.+646    	; 0x1024 <_Z10linkbus_Rxh+0x2b8>
	{
		rx_char = toupper(rx_char);
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <toupper>
     da8:	89 83       	std	Y+1, r24	; 0x01

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	84 32       	cpi	r24, 0x24	; 36
     dae:	19 f0       	breq	.+6      	; 0xdb6 <_Z10linkbus_Rxh+0x4a>
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	81 32       	cpi	r24, 0x21	; 33
     db4:	e9 f5       	brne	.+122    	; 0xe30 <_Z10linkbus_Rxh+0xc4>
		{
			charIndex = 0;
     db6:	10 92 d7 44 	sts	0x44D7, r1	; 0x8044d7 <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
     dba:	80 91 d5 44 	lds	r24, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     dbe:	90 91 d6 44 	lds	r25, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     dc2:	29 81       	ldd	r18, Y+1	; 0x01
     dc4:	21 32       	cpi	r18, 0x21	; 33
     dc6:	11 f4       	brne	.+4      	; 0xdcc <_Z10linkbus_Rxh+0x60>
     dc8:	23 e0       	ldi	r18, 0x03	; 3
     dca:	01 c0       	rjmp	.+2      	; 0xdce <_Z10linkbus_Rxh+0x62>
     dcc:	21 e0       	ldi	r18, 0x01	; 1
     dce:	fc 01       	movw	r30, r24
     dd0:	20 83       	st	Z, r18
			field_len = 0;
     dd2:	10 92 d8 44 	sts	0x44D8, r1	; 0x8044d8 <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
     dd6:	10 92 d9 44 	sts	0x44D9, r1	; 0x8044d9 <_ZZ10linkbus_RxhE10tempMsg_ID>
     dda:	10 92 da 44 	sts	0x44DA, r1	; 0x8044da <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     dde:	10 92 db 44 	sts	0x44DB, r1	; 0x8044db <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     de2:	10 92 dc 44 	sts	0x44DC, r1	; 0x8044dc <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = true;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 dd 44 	sts	0x44DD, r24	; 0x8044dd <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     dec:	10 92 de 44 	sts	0x44DE, r1	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     df0:	80 91 de 44 	lds	r24, 0x44DE	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	c8 f4       	brcc	.+50     	; 0xe2a <_Z10linkbus_Rxh+0xbe>
			{
				buff->fields[field_index][0] = '\0';
     df8:	20 91 d5 44 	lds	r18, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     dfc:	30 91 d6 44 	lds	r19, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     e00:	80 91 de 44 	lds	r24, 0x44DE	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     e04:	48 2f       	mov	r20, r24
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	65 e1       	ldi	r22, 0x15	; 21
     e0a:	64 9f       	mul	r22, r20
     e0c:	c0 01       	movw	r24, r0
     e0e:	65 9f       	mul	r22, r21
     e10:	90 0d       	add	r25, r0
     e12:	11 24       	eor	r1, r1
     e14:	82 0f       	add	r24, r18
     e16:	93 1f       	adc	r25, r19
     e18:	03 96       	adiw	r24, 0x03	; 3
     e1a:	fc 01       	movw	r30, r24
     e1c:	10 82       	st	Z, r1
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = true;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     e1e:	80 91 de 44 	lds	r24, 0x44DE	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	80 93 de 44 	sts	0x44DE, r24	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     e28:	e3 cf       	rjmp	.-58     	; 0xdf0 <_Z10linkbus_Rxh+0x84>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
     e2a:	10 92 de 44 	sts	0x44DE, r1	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     e2e:	e9 c0       	rjmp	.+466    	; 0x1002 <_Z10linkbus_Rxh+0x296>
		}
		else if(receiving_msg)
     e30:	80 91 dd 44 	lds	r24, 0x44DD	; 0x8044dd <_ZZ10linkbus_RxhE13receiving_msg>
     e34:	88 23       	and	r24, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <_Z10linkbus_Rxh+0xce>
     e38:	c7 c0       	rjmp	.+398    	; 0xfc8 <_Z10linkbus_Rxh+0x25c>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	8c 32       	cpi	r24, 0x2C	; 44
     e3e:	39 f0       	breq	.+14     	; 0xe4e <_Z10linkbus_Rxh+0xe2>
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	8b 33       	cpi	r24, 0x3B	; 59
     e44:	21 f0       	breq	.+8      	; 0xe4e <_Z10linkbus_Rxh+0xe2>
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	8f 33       	cpi	r24, 0x3F	; 63
     e4a:	09 f0       	breq	.+2      	; 0xe4e <_Z10linkbus_Rxh+0xe2>
     e4c:	6b c0       	rjmp	.+214    	; 0xf24 <_Z10linkbus_Rxh+0x1b8>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
     e4e:	80 91 de 44 	lds	r24, 0x44DE	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     e52:	88 23       	and	r24, r24
     e54:	e1 f0       	breq	.+56     	; 0xe8e <_Z10linkbus_Rxh+0x122>
				{
					buff->fields[field_index - 1][field_len] = 0;
     e56:	40 91 d5 44 	lds	r20, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     e5a:	50 91 d6 44 	lds	r21, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     e5e:	80 91 de 44 	lds	r24, 0x44DE	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	bc 01       	movw	r22, r24
     e68:	61 50       	subi	r22, 0x01	; 1
     e6a:	71 09       	sbc	r23, r1
     e6c:	80 91 d8 44 	lds	r24, 0x44D8	; 0x8044d8 <_ZZ10linkbus_RxhE9field_len>
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	e5 e1       	ldi	r30, 0x15	; 21
     e76:	e6 9f       	mul	r30, r22
     e78:	90 01       	movw	r18, r0
     e7a:	e7 9f       	mul	r30, r23
     e7c:	30 0d       	add	r19, r0
     e7e:	11 24       	eor	r1, r1
     e80:	24 0f       	add	r18, r20
     e82:	35 1f       	adc	r19, r21
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	03 96       	adiw	r24, 0x03	; 3
     e8a:	fc 01       	movw	r30, r24
     e8c:	10 82       	st	Z, r1
				}

				field_index++;
     e8e:	80 91 de 44 	lds	r24, 0x44DE	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     e92:	8f 5f       	subi	r24, 0xFF	; 255
     e94:	80 93 de 44 	sts	0x44DE, r24	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
     e98:	10 92 d8 44 	sts	0x44D8, r1	; 0x8044d8 <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	8b 33       	cpi	r24, 0x3B	; 59
     ea0:	b1 f4       	brne	.+44     	; 0xece <_Z10linkbus_Rxh+0x162>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     ea2:	80 91 d7 44 	lds	r24, 0x44D7	; 0x8044d7 <_ZZ10linkbus_RxhE9charIndex>
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	78 f0       	brcs	.+30     	; 0xec8 <_Z10linkbus_Rxh+0x15c>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     eaa:	20 91 d5 44 	lds	r18, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     eae:	30 91 d6 44 	lds	r19, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     eb2:	80 91 d9 44 	lds	r24, 0x44D9	; 0x8044d9 <_ZZ10linkbus_RxhE10tempMsg_ID>
     eb6:	90 91 da 44 	lds	r25, 0x44DA	; 0x8044da <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     eba:	a0 91 db 44 	lds	r26, 0x44DB	; 0x8044db <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     ebe:	b0 91 dc 44 	lds	r27, 0x44DC	; 0x8044dc <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     ec2:	f9 01       	movw	r30, r18
     ec4:	81 83       	std	Z+1, r24	; 0x01
     ec6:	92 83       	std	Z+2, r25	; 0x02
					}
					receiving_msg = false;
     ec8:	10 92 dd 44 	sts	0x44DD, r1	; 0x8044dd <_ZZ10linkbus_RxhE13receiving_msg>
     ecc:	1f c0       	rjmp	.+62     	; 0xf0c <_Z10linkbus_Rxh+0x1a0>
				}
				else if(rx_char == '?')
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	8f 33       	cpi	r24, 0x3F	; 63
     ed2:	e1 f4       	brne	.+56     	; 0xf0c <_Z10linkbus_Rxh+0x1a0>
				{
					buff->type = LINKBUS_MSG_QUERY;
     ed4:	80 91 d5 44 	lds	r24, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     ed8:	90 91 d6 44 	lds	r25, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     edc:	22 e0       	ldi	r18, 0x02	; 2
     ede:	fc 01       	movw	r30, r24
     ee0:	20 83       	st	Z, r18
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
     ee2:	80 91 d7 44 	lds	r24, 0x44D7	; 0x8044d7 <_ZZ10linkbus_RxhE9charIndex>
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	78 f0       	brcs	.+30     	; 0xf08 <_Z10linkbus_Rxh+0x19c>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     eea:	20 91 d5 44 	lds	r18, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     eee:	30 91 d6 44 	lds	r19, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     ef2:	80 91 d9 44 	lds	r24, 0x44D9	; 0x8044d9 <_ZZ10linkbus_RxhE10tempMsg_ID>
     ef6:	90 91 da 44 	lds	r25, 0x44DA	; 0x8044da <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     efa:	a0 91 db 44 	lds	r26, 0x44DB	; 0x8044db <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     efe:	b0 91 dc 44 	lds	r27, 0x44DC	; 0x8044dc <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     f02:	f9 01       	movw	r30, r18
     f04:	81 83       	std	Z+1, r24	; 0x01
     f06:	92 83       	std	Z+2, r25	; 0x02
					}
					receiving_msg = false;
     f08:	10 92 dd 44 	sts	0x44DD, r1	; 0x8044dd <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
     f0c:	90 91 dd 44 	lds	r25, 0x44DD	; 0x8044dd <_ZZ10linkbus_RxhE13receiving_msg>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	89 27       	eor	r24, r25
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <_Z10linkbus_Rxh+0x1ae>
     f18:	74 c0       	rjmp	.+232    	; 0x1002 <_Z10linkbus_Rxh+0x296>
				{
					buff = 0;
     f1a:	10 92 d5 44 	sts	0x44D5, r1	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     f1e:	10 92 d6 44 	sts	0x44D6, r1	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
						buff->id = (LBMessageID)tempMsg_ID;
					}
					receiving_msg = false;
				}

				if(!receiving_msg)
     f22:	6f c0       	rjmp	.+222    	; 0x1002 <_Z10linkbus_Rxh+0x296>
					buff = 0;
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
     f24:	80 91 de 44 	lds	r24, 0x44DE	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     f28:	88 23       	and	r24, r24
     f2a:	61 f5       	brne	.+88     	; 0xf84 <_Z10linkbus_Rxh+0x218>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
     f2c:	80 91 d9 44 	lds	r24, 0x44D9	; 0x8044d9 <_ZZ10linkbus_RxhE10tempMsg_ID>
     f30:	90 91 da 44 	lds	r25, 0x44DA	; 0x8044da <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     f34:	a0 91 db 44 	lds	r26, 0x44DB	; 0x8044db <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     f38:	b0 91 dc 44 	lds	r27, 0x44DC	; 0x8044dc <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	aa 1f       	adc	r26, r26
     f42:	bb 1f       	adc	r27, r27
     f44:	9c 01       	movw	r18, r24
     f46:	ad 01       	movw	r20, r26
     f48:	22 0f       	add	r18, r18
     f4a:	33 1f       	adc	r19, r19
     f4c:	44 1f       	adc	r20, r20
     f4e:	55 1f       	adc	r21, r21
     f50:	22 0f       	add	r18, r18
     f52:	33 1f       	adc	r19, r19
     f54:	44 1f       	adc	r20, r20
     f56:	55 1f       	adc	r21, r21
     f58:	28 0f       	add	r18, r24
     f5a:	39 1f       	adc	r19, r25
     f5c:	4a 1f       	adc	r20, r26
     f5e:	5b 1f       	adc	r21, r27
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	82 0f       	add	r24, r18
     f6c:	93 1f       	adc	r25, r19
     f6e:	a4 1f       	adc	r26, r20
     f70:	b5 1f       	adc	r27, r21
     f72:	80 93 d9 44 	sts	0x44D9, r24	; 0x8044d9 <_ZZ10linkbus_RxhE10tempMsg_ID>
     f76:	90 93 da 44 	sts	0x44DA, r25	; 0x8044da <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     f7a:	a0 93 db 44 	sts	0x44DB, r26	; 0x8044db <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     f7e:	b0 93 dc 44 	sts	0x44DC, r27	; 0x8044dc <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     f82:	3f c0       	rjmp	.+126    	; 0x1002 <_Z10linkbus_Rxh+0x296>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
     f84:	40 91 d5 44 	lds	r20, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     f88:	50 91 d6 44 	lds	r21, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     f8c:	80 91 de 44 	lds	r24, 0x44DE	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	bc 01       	movw	r22, r24
     f96:	61 50       	subi	r22, 0x01	; 1
     f98:	71 09       	sbc	r23, r1
     f9a:	80 91 d8 44 	lds	r24, 0x44D8	; 0x8044d8 <_ZZ10linkbus_RxhE9field_len>
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	98 0f       	add	r25, r24
     fa2:	90 93 d8 44 	sts	0x44D8, r25	; 0x8044d8 <_ZZ10linkbus_RxhE9field_len>
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	e5 e1       	ldi	r30, 0x15	; 21
     fac:	e6 9f       	mul	r30, r22
     fae:	90 01       	movw	r18, r0
     fb0:	e7 9f       	mul	r30, r23
     fb2:	30 0d       	add	r19, r0
     fb4:	11 24       	eor	r1, r1
     fb6:	24 0f       	add	r18, r20
     fb8:	35 1f       	adc	r19, r21
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	03 96       	adiw	r24, 0x03	; 3
     fc0:	29 81       	ldd	r18, Y+1	; 0x01
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 83       	st	Z, r18
     fc6:	1d c0       	rjmp	.+58     	; 0x1002 <_Z10linkbus_Rxh+0x296>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	8d 30       	cpi	r24, 0x0D	; 13
     fcc:	d1 f4       	brne	.+52     	; 0x1002 <_Z10linkbus_Rxh+0x296>
		{
			buff->id = LB_MESSAGE_EMPTY;
     fce:	80 91 d5 44 	lds	r24, 0x44D5	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     fd2:	90 91 d6 44 	lds	r25, 0x44D6	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
     fd6:	fc 01       	movw	r30, r24
     fd8:	11 82       	std	Z+1, r1	; 0x01
     fda:	12 82       	std	Z+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
     fdc:	82 e3       	ldi	r24, 0x32	; 50
     fde:	80 93 d7 44 	sts	0x44D7, r24	; 0x8044d7 <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
     fe2:	10 92 d8 44 	sts	0x44D8, r1	; 0x8044d8 <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
     fe6:	10 92 d9 44 	sts	0x44D9, r1	; 0x8044d9 <_ZZ10linkbus_RxhE10tempMsg_ID>
     fea:	10 92 da 44 	sts	0x44DA, r1	; 0x8044da <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     fee:	10 92 db 44 	sts	0x44DB, r1	; 0x8044db <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     ff2:	10 92 dc 44 	sts	0x44DC, r1	; 0x8044dc <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
     ff6:	10 92 de 44 	sts	0x44DE, r1	; 0x8044de <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
     ffa:	10 92 d5 44 	sts	0x44D5, r1	; 0x8044d5 <_ZZ10linkbus_RxhE4buff>
     ffe:	10 92 d6 44 	sts	0x44D6, r1	; 0x8044d6 <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    1002:	80 91 d7 44 	lds	r24, 0x44D7	; 0x8044d7 <_ZZ10linkbus_RxhE9charIndex>
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	80 93 d7 44 	sts	0x44D7, r24	; 0x8044d7 <_ZZ10linkbus_RxhE9charIndex>
    100c:	90 91 d7 44 	lds	r25, 0x44D7	; 0x8044d7 <_ZZ10linkbus_RxhE9charIndex>
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	92 33       	cpi	r25, 0x32	; 50
    1014:	08 f4       	brcc	.+2      	; 0x1018 <_Z10linkbus_Rxh+0x2ac>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	88 23       	and	r24, r24
    101a:	21 f0       	breq	.+8      	; 0x1024 <_Z10linkbus_Rxh+0x2b8>
		{
			receiving_msg = false;
    101c:	10 92 dd 44 	sts	0x44DD, r1	; 0x8044dd <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
    1020:	10 92 d7 44 	sts	0x44D7, r1	; 0x8044d7 <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
    1024:	00 00       	nop
    1026:	0f 90       	pop	r0
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
    102e:	1f 92       	push	r1
    1030:	0f 92       	push	r0
    1032:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    103e:	0f 92       	push	r0
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	if(g_serialbus_usart_number == USART_1)
    1060:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	09 f0       	breq	.+2      	; 0x106a <__vector_32+0x3c>
    1068:	45 c0       	rjmp	.+138    	; 0x10f4 <__vector_32+0xc6>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    106a:	80 91 df 44 	lds	r24, 0x44DF	; 0x8044df <_ZZ11__vector_32E4buff>
    106e:	90 91 e0 44 	lds	r25, 0x44E0	; 0x8044e0 <_ZZ11__vector_32E4buff+0x1>
    1072:	89 2b       	or	r24, r25
    1074:	31 f4       	brne	.+12     	; 0x1082 <__vector_32+0x54>
		{
			buff = nextFullSBTxBuffer();
    1076:	0e 94 15 30 	call	0x602a	; 0x602a <nextFullSBTxBuffer>
    107a:	80 93 df 44 	sts	0x44DF, r24	; 0x8044df <_ZZ11__vector_32E4buff>
    107e:	90 93 e0 44 	sts	0x44E0, r25	; 0x8044e0 <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
    1082:	20 91 df 44 	lds	r18, 0x44DF	; 0x8044df <_ZZ11__vector_32E4buff>
    1086:	30 91 e0 44 	lds	r19, 0x44E0	; 0x8044e0 <_ZZ11__vector_32E4buff+0x1>
    108a:	80 91 e1 44 	lds	r24, 0x44E1	; 0x8044e1 <_ZZ11__vector_32E9charIndex>
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	82 0f       	add	r24, r18
    1094:	93 1f       	adc	r25, r19
    1096:	fc 01       	movw	r30, r24
    1098:	80 81       	ld	r24, Z
    109a:	88 23       	and	r24, r24
    109c:	a9 f0       	breq	.+42     	; 0x10c8 <__vector_32+0x9a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    109e:	80 e2       	ldi	r24, 0x20	; 32
    10a0:	98 e0       	ldi	r25, 0x08	; 8
    10a2:	40 91 df 44 	lds	r20, 0x44DF	; 0x8044df <_ZZ11__vector_32E4buff>
    10a6:	50 91 e0 44 	lds	r21, 0x44E0	; 0x8044e0 <_ZZ11__vector_32E4buff+0x1>
    10aa:	20 91 e1 44 	lds	r18, 0x44E1	; 0x8044e1 <_ZZ11__vector_32E9charIndex>
    10ae:	31 e0       	ldi	r19, 0x01	; 1
    10b0:	32 0f       	add	r19, r18
    10b2:	30 93 e1 44 	sts	0x44E1, r19	; 0x8044e1 <_ZZ11__vector_32E9charIndex>
    10b6:	22 2f       	mov	r18, r18
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	24 0f       	add	r18, r20
    10bc:	35 1f       	adc	r19, r21
    10be:	f9 01       	movw	r30, r18
    10c0:	20 81       	ld	r18, Z
    10c2:	fc 01       	movw	r30, r24
    10c4:	22 83       	std	Z+2, r18	; 0x02
    10c6:	16 c0       	rjmp	.+44     	; 0x10f4 <__vector_32+0xc6>
		}
		else
		{
			charIndex = 0;
    10c8:	10 92 e1 44 	sts	0x44E1, r1	; 0x8044e1 <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
    10cc:	80 91 df 44 	lds	r24, 0x44DF	; 0x8044df <_ZZ11__vector_32E4buff>
    10d0:	90 91 e0 44 	lds	r25, 0x44E0	; 0x8044e0 <_ZZ11__vector_32E4buff+0x1>
    10d4:	fc 01       	movw	r30, r24
    10d6:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    10d8:	0e 94 15 30 	call	0x602a	; 0x602a <nextFullSBTxBuffer>
    10dc:	80 93 df 44 	sts	0x44DF, r24	; 0x8044df <_ZZ11__vector_32E4buff>
    10e0:	90 93 e0 44 	sts	0x44E0, r25	; 0x8044e0 <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
    10e4:	80 91 df 44 	lds	r24, 0x44DF	; 0x8044df <_ZZ11__vector_32E4buff>
    10e8:	90 91 e0 44 	lds	r25, 0x44E0	; 0x8044e0 <_ZZ11__vector_32E4buff+0x1>
    10ec:	89 2b       	or	r24, r25
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__vector_32+0xc6>
			{
				serialbus_end_tx();
    10f0:	0e 94 1e 31 	call	0x623c	; 0x623c <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
    10f4:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <g_linkbus_usart_number>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	09 f0       	breq	.+2      	; 0x10fe <__vector_32+0xd0>
    10fc:	45 c0       	rjmp	.+138    	; 0x1188 <__vector_32+0x15a>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    10fe:	80 91 e2 44 	lds	r24, 0x44E2	; 0x8044e2 <_ZZ11__vector_32E4buff_0>
    1102:	90 91 e3 44 	lds	r25, 0x44E3	; 0x8044e3 <_ZZ11__vector_32E4buff_0+0x1>
    1106:	89 2b       	or	r24, r25
    1108:	31 f4       	brne	.+12     	; 0x1116 <__vector_32+0xe8>
		{
			buff = nextFullLBTxBuffer();
    110a:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_Z18nextFullLBTxBufferv>
    110e:	80 93 e2 44 	sts	0x44E2, r24	; 0x8044e2 <_ZZ11__vector_32E4buff_0>
    1112:	90 93 e3 44 	sts	0x44E3, r25	; 0x8044e3 <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    1116:	20 91 e2 44 	lds	r18, 0x44E2	; 0x8044e2 <_ZZ11__vector_32E4buff_0>
    111a:	30 91 e3 44 	lds	r19, 0x44E3	; 0x8044e3 <_ZZ11__vector_32E4buff_0+0x1>
    111e:	80 91 e4 44 	lds	r24, 0x44E4	; 0x8044e4 <_ZZ11__vector_32E9charIndex_0>
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	82 0f       	add	r24, r18
    1128:	93 1f       	adc	r25, r19
    112a:	fc 01       	movw	r30, r24
    112c:	80 81       	ld	r24, Z
    112e:	88 23       	and	r24, r24
    1130:	a9 f0       	breq	.+42     	; 0x115c <__vector_32+0x12e>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    1132:	80 e2       	ldi	r24, 0x20	; 32
    1134:	98 e0       	ldi	r25, 0x08	; 8
    1136:	40 91 e2 44 	lds	r20, 0x44E2	; 0x8044e2 <_ZZ11__vector_32E4buff_0>
    113a:	50 91 e3 44 	lds	r21, 0x44E3	; 0x8044e3 <_ZZ11__vector_32E4buff_0+0x1>
    113e:	20 91 e4 44 	lds	r18, 0x44E4	; 0x8044e4 <_ZZ11__vector_32E9charIndex_0>
    1142:	31 e0       	ldi	r19, 0x01	; 1
    1144:	32 0f       	add	r19, r18
    1146:	30 93 e4 44 	sts	0x44E4, r19	; 0x8044e4 <_ZZ11__vector_32E9charIndex_0>
    114a:	22 2f       	mov	r18, r18
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	24 0f       	add	r18, r20
    1150:	35 1f       	adc	r19, r21
    1152:	f9 01       	movw	r30, r18
    1154:	20 81       	ld	r18, Z
    1156:	fc 01       	movw	r30, r24
    1158:	22 83       	std	Z+2, r18	; 0x02
			{
				linkbus_end_tx();
			}
		}
	}
}
    115a:	16 c0       	rjmp	.+44     	; 0x1188 <__vector_32+0x15a>
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
		}
		else
		{
			charIndex = 0;
    115c:	10 92 e4 44 	sts	0x44E4, r1	; 0x8044e4 <_ZZ11__vector_32E9charIndex_0>
			(*buff)[0] = '\0';
    1160:	80 91 e2 44 	lds	r24, 0x44E2	; 0x8044e2 <_ZZ11__vector_32E4buff_0>
    1164:	90 91 e3 44 	lds	r25, 0x44E3	; 0x8044e3 <_ZZ11__vector_32E4buff_0+0x1>
    1168:	fc 01       	movw	r30, r24
    116a:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    116c:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_Z18nextFullLBTxBufferv>
    1170:	80 93 e2 44 	sts	0x44E2, r24	; 0x8044e2 <_ZZ11__vector_32E4buff_0>
    1174:	90 93 e3 44 	sts	0x44E3, r25	; 0x8044e3 <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
    1178:	80 91 e2 44 	lds	r24, 0x44E2	; 0x8044e2 <_ZZ11__vector_32E4buff_0>
    117c:	90 91 e3 44 	lds	r25, 0x44E3	; 0x8044e3 <_ZZ11__vector_32E4buff_0+0x1>
    1180:	89 2b       	or	r24, r25
    1182:	11 f4       	brne	.+4      	; 0x1188 <__vector_32+0x15a>
			{
				linkbus_end_tx();
    1184:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <_Z14linkbus_end_txv>
			}
		}
	}
}
    1188:	00 00       	nop
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    11ac:	0f 90       	pop	r0
    11ae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    11b2:	0f 90       	pop	r0
    11b4:	1f 90       	pop	r1
    11b6:	18 95       	reti

000011b8 <PORTA_toggle_port_level>:
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	1f 92       	push	r1
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	94 e0       	ldi	r25, 0x04	; 4
    11c8:	29 81       	ldd	r18, Y+1	; 0x01
    11ca:	fc 01       	movw	r30, r24
    11cc:	27 83       	std	Z+7, r18	; 0x07
    11ce:	00 00       	nop
    11d0:	0f 90       	pop	r0
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <PORTC_set_pin_level>:
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	00 d0       	rcall	.+0      	; 0x11de <PORTC_set_pin_level+0x6>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	6a 83       	std	Y+2, r22	; 0x02
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	88 23       	and	r24, r24
    11ea:	a9 f0       	breq	.+42     	; 0x1216 <PORTC_set_pin_level+0x3e>
    11ec:	88 e0       	ldi	r24, 0x08	; 8
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	28 e0       	ldi	r18, 0x08	; 8
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	f9 01       	movw	r30, r18
    11f6:	21 81       	ldd	r18, Z+1	; 0x01
    11f8:	62 2f       	mov	r22, r18
    11fa:	29 81       	ldd	r18, Y+1	; 0x01
    11fc:	42 2f       	mov	r20, r18
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	21 e0       	ldi	r18, 0x01	; 1
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	02 c0       	rjmp	.+4      	; 0x120a <PORTC_set_pin_level+0x32>
    1206:	22 0f       	add	r18, r18
    1208:	33 1f       	adc	r19, r19
    120a:	4a 95       	dec	r20
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <PORTC_set_pin_level+0x2e>
    120e:	26 2b       	or	r18, r22
    1210:	fc 01       	movw	r30, r24
    1212:	21 83       	std	Z+1, r18	; 0x01
    1214:	15 c0       	rjmp	.+42     	; 0x1240 <PORTC_set_pin_level+0x68>
    1216:	88 e0       	ldi	r24, 0x08	; 8
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	28 e0       	ldi	r18, 0x08	; 8
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	f9 01       	movw	r30, r18
    1220:	21 81       	ldd	r18, Z+1	; 0x01
    1222:	62 2f       	mov	r22, r18
    1224:	29 81       	ldd	r18, Y+1	; 0x01
    1226:	42 2f       	mov	r20, r18
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	21 e0       	ldi	r18, 0x01	; 1
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <PORTC_set_pin_level+0x5c>
    1230:	22 0f       	add	r18, r18
    1232:	33 1f       	adc	r19, r19
    1234:	4a 95       	dec	r20
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <PORTC_set_pin_level+0x58>
    1238:	20 95       	com	r18
    123a:	26 23       	and	r18, r22
    123c:	fc 01       	movw	r30, r24
    123e:	21 83       	std	Z+1, r18	; 0x01
    1240:	00 00       	nop
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <PORTC_toggle_pin_level>:
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	1f 92       	push	r1
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	88 e0       	ldi	r24, 0x08	; 8
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	28 e0       	ldi	r18, 0x08	; 8
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	f9 01       	movw	r30, r18
    1262:	22 81       	ldd	r18, Z+2	; 0x02
    1264:	62 2f       	mov	r22, r18
    1266:	29 81       	ldd	r18, Y+1	; 0x01
    1268:	42 2f       	mov	r20, r18
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <PORTC_toggle_pin_level+0x2a>
    1272:	22 0f       	add	r18, r18
    1274:	33 1f       	adc	r19, r19
    1276:	4a 95       	dec	r20
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <PORTC_toggle_pin_level+0x26>
    127a:	26 2b       	or	r18, r22
    127c:	fc 01       	movw	r30, r24
    127e:	22 83       	std	Z+2, r18	; 0x02
    1280:	00 00       	nop
    1282:	0f 90       	pop	r0
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <LED_set_level>:
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	1f 92       	push	r1
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	99 81       	ldd	r25, Y+1	; 0x01
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	89 27       	eor	r24, r25
    129c:	68 2f       	mov	r22, r24
    129e:	86 e0       	ldi	r24, 0x06	; 6
    12a0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <PORTC_set_pin_level>
    12a4:	00 00       	nop
    12a6:	0f 90       	pop	r0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <LED_toggle_level>:
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	86 e0       	ldi	r24, 0x06	; 6
    12b8:	0e 94 26 09 	call	0x124c	; 0x124c <PORTC_toggle_pin_level>
    12bc:	00 00       	nop
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <__vector_41>:
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    12cc:	0f 92       	push	r0
    12ce:	11 24       	eor	r1, r1
    12d0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    12d4:	0f 92       	push	r0
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	60 97       	sbiw	r28, 0x10	; 16
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	80 e3       	ldi	r24, 0x30	; 48
    1306:	9b e0       	ldi	r25, 0x0B	; 11
    1308:	fc 01       	movw	r30, r24
    130a:	86 81       	ldd	r24, Z+6	; 0x06
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	81 70       	andi	r24, 0x01	; 1
    1312:	99 27       	eor	r25, r25
    1314:	21 e0       	ldi	r18, 0x01	; 1
    1316:	89 2b       	or	r24, r25
    1318:	09 f4       	brne	.+2      	; 0x131c <__vector_41+0x58>
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	22 23       	and	r18, r18
    131e:	09 f4       	brne	.+2      	; 0x1322 <__vector_41+0x5e>
    1320:	52 c4       	rjmp	.+2212   	; 0x1bc6 <__vector_41+0x902>
    1322:	80 91 70 45 	lds	r24, 0x4570	; 0x804570 <_ZZ11__vector_41E3cnt>
    1326:	90 91 71 45 	lds	r25, 0x4571	; 0x804571 <_ZZ11__vector_41E3cnt+0x1>
    132a:	9c 01       	movw	r18, r24
    132c:	2f 5f       	subi	r18, 0xFF	; 255
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	20 93 70 45 	sts	0x4570, r18	; 0x804570 <_ZZ11__vector_41E3cnt>
    1334:	30 93 71 45 	sts	0x4571, r19	; 0x804571 <_ZZ11__vector_41E3cnt+0x1>
    1338:	21 e0       	ldi	r18, 0x01	; 1
    133a:	8b 32       	cpi	r24, 0x2B	; 43
    133c:	91 40       	sbci	r25, 0x01	; 1
    133e:	09 f0       	breq	.+2      	; 0x1342 <__vector_41+0x7e>
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	22 23       	and	r18, r18
    1344:	09 f4       	brne	.+2      	; 0x1348 <__vector_41+0x84>
    1346:	3a c4       	rjmp	.+2164   	; 0x1bbc <__vector_41+0x8f8>
    1348:	10 92 70 45 	sts	0x4570, r1	; 0x804570 <_ZZ11__vector_41E3cnt>
    134c:	10 92 71 45 	sts	0x4571, r1	; 0x804571 <_ZZ11__vector_41E3cnt+0x1>
    1350:	90 91 5c 45 	lds	r25, 0x455C	; 0x80455c <g_event_enabled>
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	89 27       	eor	r24, r25
    1358:	88 23       	and	r24, r24
    135a:	11 f0       	breq	.+4      	; 0x1360 <__vector_41+0x9c>
    135c:	0e 94 57 09 	call	0x12ae	; 0x12ae <LED_toggle_level>
    1360:	0e 94 8c 13 	call	0x2718	; 0x2718 <_Z18antennaIsConnectedv>
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	89 27       	eor	r24, r25
    136c:	88 23       	and	r24, r24
    136e:	79 f0       	breq	.+30     	; 0x138e <__vector_41+0xca>
    1370:	90 91 1b 45 	lds	r25, 0x451B	; 0x80451b <g_antenna_connect_state>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	91 30       	cpi	r25, 0x01	; 1
    1378:	09 f4       	brne	.+2      	; 0x137c <__vector_41+0xb8>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	88 23       	and	r24, r24
    137e:	69 f1       	breq	.+90     	; 0x13da <__vector_41+0x116>
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	80 93 1b 45 	sts	0x451B, r24	; 0x80451b <g_antenna_connect_state>
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <_ZL28g_antenna_connection_changed>
    138c:	26 c0       	rjmp	.+76     	; 0x13da <__vector_41+0x116>
    138e:	90 91 1b 45 	lds	r25, 0x451B	; 0x80451b <g_antenna_connect_state>
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	91 30       	cpi	r25, 0x01	; 1
    1396:	09 f0       	breq	.+2      	; 0x139a <__vector_41+0xd6>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	88 23       	and	r24, r24
    139c:	f1 f0       	breq	.+60     	; 0x13da <__vector_41+0x116>
    139e:	80 91 72 45 	lds	r24, 0x4572	; 0x804572 <_ZZ11__vector_41E26lastAntennaConnectionState>
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	98 17       	cp	r25, r24
    13a6:	b1 f4       	brne	.+44     	; 0x13d4 <__vector_41+0x110>
    13a8:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
    13ac:	88 23       	and	r24, r24
    13ae:	a9 f0       	breq	.+42     	; 0x13da <__vector_41+0x116>
    13b0:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
    13b4:	81 50       	subi	r24, 0x01	; 1
    13b6:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
    13ba:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
    13be:	88 23       	and	r24, r24
    13c0:	61 f4       	brne	.+24     	; 0x13da <__vector_41+0x116>
    13c2:	10 92 1b 45 	sts	0x451B, r1	; 0x80451b <g_antenna_connect_state>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <_ZL28g_antenna_connection_changed>
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <__vector_41+0x116>
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <_ZZ11__vector_41E16antennaReadCount>
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	80 93 72 45 	sts	0x4572, r24	; 0x804572 <_ZZ11__vector_41E26lastAntennaConnectionState>
    13e0:	0e 94 84 01 	call	0x308	; 0x308 <system_tick>
    13e4:	80 91 61 45 	lds	r24, 0x4561	; 0x804561 <_ZL10g_sleeping>
    13e8:	88 23       	and	r24, r24
    13ea:	09 f4       	brne	.+2      	; 0x13ee <__vector_41+0x12a>
    13ec:	3e c0       	rjmp	.+124    	; 0x146a <__vector_41+0x1a6>
    13ee:	80 91 62 45 	lds	r24, 0x4562	; 0x804562 <_ZL23g_seconds_left_to_sleep>
    13f2:	90 91 63 45 	lds	r25, 0x4563	; 0x804563 <_ZL23g_seconds_left_to_sleep+0x1>
    13f6:	a0 91 64 45 	lds	r26, 0x4564	; 0x804564 <_ZL23g_seconds_left_to_sleep+0x2>
    13fa:	b0 91 65 45 	lds	r27, 0x4565	; 0x804565 <_ZL23g_seconds_left_to_sleep+0x3>
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	89 2b       	or	r24, r25
    1402:	8a 2b       	or	r24, r26
    1404:	8b 2b       	or	r24, r27
    1406:	09 f4       	brne	.+2      	; 0x140a <__vector_41+0x146>
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	22 23       	and	r18, r18
    140c:	99 f0       	breq	.+38     	; 0x1434 <__vector_41+0x170>
    140e:	80 91 62 45 	lds	r24, 0x4562	; 0x804562 <_ZL23g_seconds_left_to_sleep>
    1412:	90 91 63 45 	lds	r25, 0x4563	; 0x804563 <_ZL23g_seconds_left_to_sleep+0x1>
    1416:	a0 91 64 45 	lds	r26, 0x4564	; 0x804564 <_ZL23g_seconds_left_to_sleep+0x2>
    141a:	b0 91 65 45 	lds	r27, 0x4565	; 0x804565 <_ZL23g_seconds_left_to_sleep+0x3>
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	a1 09       	sbc	r26, r1
    1422:	b1 09       	sbc	r27, r1
    1424:	80 93 62 45 	sts	0x4562, r24	; 0x804562 <_ZL23g_seconds_left_to_sleep>
    1428:	90 93 63 45 	sts	0x4563, r25	; 0x804563 <_ZL23g_seconds_left_to_sleep+0x1>
    142c:	a0 93 64 45 	sts	0x4564, r26	; 0x804564 <_ZL23g_seconds_left_to_sleep+0x2>
    1430:	b0 93 65 45 	sts	0x4565, r27	; 0x804565 <_ZL23g_seconds_left_to_sleep+0x3>
    1434:	80 91 62 45 	lds	r24, 0x4562	; 0x804562 <_ZL23g_seconds_left_to_sleep>
    1438:	90 91 63 45 	lds	r25, 0x4563	; 0x804563 <_ZL23g_seconds_left_to_sleep+0x1>
    143c:	a0 91 64 45 	lds	r26, 0x4564	; 0x804564 <_ZL23g_seconds_left_to_sleep+0x2>
    1440:	b0 91 65 45 	lds	r27, 0x4565	; 0x804565 <_ZL23g_seconds_left_to_sleep+0x3>
    1444:	89 2b       	or	r24, r25
    1446:	8a 2b       	or	r24, r26
    1448:	8b 2b       	or	r24, r27
    144a:	21 f0       	breq	.+8      	; 0x1454 <__vector_41+0x190>
    144c:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
    1450:	88 23       	and	r24, r24
    1452:	11 f0       	breq	.+4      	; 0x1458 <__vector_41+0x194>
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	01 c0       	rjmp	.+2      	; 0x145a <__vector_41+0x196>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	88 23       	and	r24, r24
    145c:	09 f4       	brne	.+2      	; 0x1460 <__vector_41+0x19c>
    145e:	ae c3       	rjmp	.+1884   	; 0x1bbc <__vector_41+0x8f8>
    1460:	10 92 60 45 	sts	0x4560, r1	; 0x804560 <_ZL13g_go_to_sleep>
    1464:	10 92 61 45 	sts	0x4561, r1	; 0x804561 <_ZL10g_sleeping>
    1468:	a9 c3       	rjmp	.+1874   	; 0x1bbc <__vector_41+0x8f8>
    146a:	1a 86       	std	Y+10, r1	; 0x0a
    146c:	1b 86       	std	Y+11, r1	; 0x0b
    146e:	1c 86       	std	Y+12, r1	; 0x0c
    1470:	1d 86       	std	Y+13, r1	; 0x0d
    1472:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_update_timeout_seconds>
    1476:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_update_timeout_seconds+0x1>
    147a:	21 e0       	ldi	r18, 0x01	; 1
    147c:	89 2b       	or	r24, r25
    147e:	09 f4       	brne	.+2      	; 0x1482 <__vector_41+0x1be>
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	22 23       	and	r18, r18
    1484:	49 f0       	breq	.+18     	; 0x1498 <__vector_41+0x1d4>
    1486:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_update_timeout_seconds>
    148a:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_update_timeout_seconds+0x1>
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_update_timeout_seconds>
    1494:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_update_timeout_seconds+0x1>
    1498:	80 91 5d 45 	lds	r24, 0x455D	; 0x80455d <g_event_commenced>
    149c:	88 23       	and	r24, r24
    149e:	09 f4       	brne	.+2      	; 0x14a2 <__vector_41+0x1de>
    14a0:	60 c0       	rjmp	.+192    	; 0x1562 <__vector_41+0x29e>
    14a2:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_use_rtc_to_time_event>
    14a6:	88 23       	and	r24, r24
    14a8:	d1 f0       	breq	.+52     	; 0x14de <__vector_41+0x21a>
    14aa:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    14ae:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    14b2:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    14b6:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    14ba:	89 2b       	or	r24, r25
    14bc:	8a 2b       	or	r24, r26
    14be:	8b 2b       	or	r24, r27
    14c0:	71 f0       	breq	.+28     	; 0x14de <__vector_41+0x21a>
    14c2:	90 91 5e 45 	lds	r25, 0x455E	; 0x80455e <g_check_for_next_event>
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	89 27       	eor	r24, r25
    14ca:	88 23       	and	r24, r24
    14cc:	41 f0       	breq	.+16     	; 0x14de <__vector_41+0x21a>
    14ce:	90 91 24 45 	lds	r25, 0x4524	; 0x804524 <_ZL20g_shutting_down_wifi>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 27       	eor	r24, r25
    14d6:	88 23       	and	r24, r24
    14d8:	11 f0       	breq	.+4      	; 0x14de <__vector_41+0x21a>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <__vector_41+0x21c>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	88 23       	and	r24, r24
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <__vector_41+0x222>
    14e4:	3e c0       	rjmp	.+124    	; 0x1562 <__vector_41+0x29e>
    14e6:	ce 01       	movw	r24, r28
    14e8:	0a 96       	adiw	r24, 0x0a	; 10
    14ea:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    14ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    14f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    14f2:	4c 85       	ldd	r20, Y+12	; 0x0c
    14f4:	5d 85       	ldd	r21, Y+13	; 0x0d
    14f6:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    14fa:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    14fe:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    1502:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	28 17       	cp	r18, r24
    150a:	39 07       	cpc	r19, r25
    150c:	4a 07       	cpc	r20, r26
    150e:	5b 07       	cpc	r21, r27
    1510:	08 f4       	brcc	.+2      	; 0x1514 <__vector_41+0x250>
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	66 23       	and	r22, r22
    1516:	29 f1       	breq	.+74     	; 0x1562 <__vector_41+0x29e>
    1518:	8c ef       	ldi	r24, 0xFC	; 252
    151a:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    151e:	10 92 1c 45 	sts	0x451C, r1	; 0x80451c <_ZL12g_on_the_air>
    1522:	10 92 1d 45 	sts	0x451D, r1	; 0x80451d <_ZL12g_on_the_air+0x1>
    1526:	10 92 1e 45 	sts	0x451E, r1	; 0x80451e <_ZL12g_on_the_air+0x2>
    152a:	10 92 1f 45 	sts	0x451F, r1	; 0x80451f <_ZL12g_on_the_air+0x3>
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <_Z14keyTransmitterb>
    1534:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <g_event_enabled>
    1538:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <g_event_commenced>
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	80 93 5e 45 	sts	0x455E, r24	; 0x80455e <g_check_for_next_event>
    1542:	8a e5       	ldi	r24, 0x5A	; 90
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_update_timeout_seconds>
    154a:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_update_timeout_seconds+0x1>
    154e:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1552:	88 23       	and	r24, r24
    1554:	19 f0       	breq	.+6      	; 0x155c <__vector_41+0x298>
    1556:	8c e3       	ldi	r24, 0x3C	; 60
    1558:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	0e 94 45 09 	call	0x128a	; 0x128a <LED_set_level>
    1562:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
    1566:	88 23       	and	r24, r24
    1568:	09 f4       	brne	.+2      	; 0x156c <__vector_41+0x2a8>
    156a:	97 c2       	rjmp	.+1326   	; 0x1a9a <__vector_41+0x7d6>
    156c:	80 91 5d 45 	lds	r24, 0x455D	; 0x80455d <g_event_commenced>
    1570:	88 23       	and	r24, r24
    1572:	09 f4       	brne	.+2      	; 0x1576 <__vector_41+0x2b2>
    1574:	f0 c1       	rjmp	.+992    	; 0x1956 <__vector_41+0x692>
    1576:	80 91 20 45 	lds	r24, 0x4520	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    157a:	90 91 21 45 	lds	r25, 0x4521	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    157e:	21 e0       	ldi	r18, 0x01	; 1
    1580:	89 2b       	or	r24, r25
    1582:	09 f4       	brne	.+2      	; 0x1586 <__vector_41+0x2c2>
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	22 23       	and	r18, r18
    1588:	49 f0       	breq	.+18     	; 0x159c <__vector_41+0x2d8>
    158a:	80 91 20 45 	lds	r24, 0x4520	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    158e:	90 91 21 45 	lds	r25, 0x4521	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    1598:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    159c:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    15a0:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    15a4:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    15a8:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    15ac:	21 e0       	ldi	r18, 0x01	; 1
    15ae:	89 2b       	or	r24, r25
    15b0:	8a 2b       	or	r24, r26
    15b2:	8b 2b       	or	r24, r27
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <__vector_41+0x2f4>
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	22 23       	and	r18, r18
    15ba:	09 f4       	brne	.+2      	; 0x15be <__vector_41+0x2fa>
    15bc:	6e c2       	rjmp	.+1244   	; 0x1a9a <__vector_41+0x7d6>
    15be:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    15c2:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    15c6:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    15ca:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    15ce:	21 e0       	ldi	r18, 0x01	; 1
    15d0:	18 16       	cp	r1, r24
    15d2:	19 06       	cpc	r1, r25
    15d4:	1a 06       	cpc	r1, r26
    15d6:	1b 06       	cpc	r1, r27
    15d8:	0c f0       	brlt	.+2      	; 0x15dc <__vector_41+0x318>
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	22 23       	and	r18, r18
    15de:	09 f4       	brne	.+2      	; 0x15e2 <__vector_41+0x31e>
    15e0:	5e c1       	rjmp	.+700    	; 0x189e <__vector_41+0x5da>
    15e2:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    15e6:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    15ea:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    15ee:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	a1 09       	sbc	r26, r1
    15f6:	b1 09       	sbc	r27, r1
    15f8:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    15fc:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    1600:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1604:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    1608:	80 91 20 45 	lds	r24, 0x4520	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    160c:	90 91 21 45 	lds	r25, 0x4521	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1610:	89 2b       	or	r24, r25
    1612:	41 f4       	brne	.+16     	; 0x1624 <__vector_41+0x360>
    1614:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
    1618:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    161c:	89 2b       	or	r24, r25
    161e:	11 f0       	breq	.+4      	; 0x1624 <__vector_41+0x360>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <__vector_41+0x362>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	88 23       	and	r24, r24
    1628:	a9 f1       	breq	.+106    	; 0x1694 <__vector_41+0x3d0>
    162a:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
    162e:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    1632:	9c 01       	movw	r18, r24
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    163c:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    1640:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1644:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	28 17       	cp	r18, r24
    164c:	39 07       	cpc	r19, r25
    164e:	4a 07       	cpc	r20, r26
    1650:	5b 07       	cpc	r21, r27
    1652:	09 f0       	breq	.+2      	; 0x1656 <__vector_41+0x392>
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	66 23       	and	r22, r22
    1658:	e9 f0       	breq	.+58     	; 0x1694 <__vector_41+0x3d0>
    165a:	8f ee       	ldi	r24, 0xEF	; 239
    165c:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    1660:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1664:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1668:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    166c:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1670:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1674:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    1678:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    167c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1680:	1e 86       	std	Y+14, r1	; 0x0e
    1682:	ce 01       	movw	r24, r28
    1684:	0e 96       	adiw	r24, 0x0e	; 14
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	bc 01       	movw	r22, r24
    168c:	8b e3       	ldi	r24, 0x3B	; 59
    168e:	95 e4       	ldi	r25, 0x45	; 69
    1690:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    1694:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    1698:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    169c:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    16a0:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    16a4:	21 e0       	ldi	r18, 0x01	; 1
    16a6:	89 2b       	or	r24, r25
    16a8:	8a 2b       	or	r24, r26
    16aa:	8b 2b       	or	r24, r27
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <__vector_41+0x3ec>
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	22 23       	and	r18, r18
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <__vector_41+0x3f2>
    16b4:	f2 c1       	rjmp	.+996    	; 0x1a9a <__vector_41+0x7d6>
    16b6:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    16ba:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	89 2b       	or	r24, r25
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <__vector_41+0x402>
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	22 23       	and	r18, r18
    16c8:	09 f4       	brne	.+2      	; 0x16cc <__vector_41+0x408>
    16ca:	d0 c0       	rjmp	.+416    	; 0x186c <__vector_41+0x5a8>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <_Z14keyTransmitterb>
    16d2:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    16d6:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    16da:	20 91 1c 45 	lds	r18, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    16de:	30 91 1d 45 	lds	r19, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    16e2:	40 91 1e 45 	lds	r20, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    16e6:	50 91 1f 45 	lds	r21, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    16ea:	09 2e       	mov	r0, r25
    16ec:	00 0c       	add	r0, r0
    16ee:	aa 0b       	sbc	r26, r26
    16f0:	bb 0b       	sbc	r27, r27
    16f2:	79 01       	movw	r14, r18
    16f4:	8a 01       	movw	r16, r20
    16f6:	e8 1a       	sub	r14, r24
    16f8:	f9 0a       	sbc	r15, r25
    16fa:	0a 0b       	sbc	r16, r26
    16fc:	1b 0b       	sbc	r17, r27
    16fe:	d8 01       	movw	r26, r16
    1700:	c7 01       	movw	r24, r14
    1702:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    1706:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    170a:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    170e:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	8e 87       	std	Y+14, r24	; 0x0e
    1716:	ce 01       	movw	r24, r28
    1718:	0e 96       	adiw	r24, 0x0e	; 14
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	bc 01       	movw	r22, r24
    1720:	86 e2       	ldi	r24, 0x26	; 38
    1722:	95 e4       	ldi	r25, 0x45	; 69
    1724:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    1728:	8e ef       	ldi	r24, 0xFE	; 254
    172a:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	0e 94 45 09 	call	0x128a	; 0x128a <LED_set_level>
    1734:	19 82       	std	Y+1, r1	; 0x01
    1736:	1a 82       	std	Y+2, r1	; 0x02
    1738:	1b 82       	std	Y+3, r1	; 0x03
    173a:	1c 82       	std	Y+4, r1	; 0x04
    173c:	ce 01       	movw	r24, r28
    173e:	0a 96       	adiw	r24, 0x0a	; 10
    1740:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    1744:	2a 85       	ldd	r18, Y+10	; 0x0a
    1746:	3b 85       	ldd	r19, Y+11	; 0x0b
    1748:	4c 85       	ldd	r20, Y+12	; 0x0c
    174a:	5d 85       	ldd	r21, Y+13	; 0x0d
    174c:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    1750:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    1754:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    1758:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	28 17       	cp	r18, r24
    1760:	39 07       	cpc	r19, r25
    1762:	4a 07       	cpc	r20, r26
    1764:	5b 07       	cpc	r21, r27
    1766:	08 f0       	brcs	.+2      	; 0x176a <__vector_41+0x4a6>
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	66 23       	and	r22, r22
    176c:	b1 f0       	breq	.+44     	; 0x179a <__vector_41+0x4d6>
    176e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1770:	3b 85       	ldd	r19, Y+11	; 0x0b
    1772:	4c 85       	ldd	r20, Y+12	; 0x0c
    1774:	5d 85       	ldd	r21, Y+13	; 0x0d
    1776:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    177a:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    177e:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    1782:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	0e 94 a9 42 	call	0x8552	; 0x8552 <_Z7timeDifmm>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	ab 83       	std	Y+3, r26	; 0x03
    1798:	bc 83       	std	Y+4, r27	; 0x04
    179a:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    179e:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    17a2:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    17a6:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    17aa:	82 0f       	add	r24, r18
    17ac:	93 1f       	adc	r25, r19
    17ae:	0f 96       	adiw	r24, 0x0f	; 15
    17b0:	9c 01       	movw	r18, r24
    17b2:	99 0f       	add	r25, r25
    17b4:	44 0b       	sbc	r20, r20
    17b6:	55 0b       	sbc	r21, r21
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	ab 81       	ldd	r26, Y+3	; 0x03
    17c0:	bc 81       	ldd	r27, Y+4	; 0x04
    17c2:	28 17       	cp	r18, r24
    17c4:	39 07       	cpc	r19, r25
    17c6:	4a 07       	cpc	r20, r26
    17c8:	5b 07       	cpc	r21, r27
    17ca:	0c f0       	brlt	.+2      	; 0x17ce <__vector_41+0x50a>
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	66 23       	and	r22, r22
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <__vector_41+0x510>
    17d2:	63 c1       	rjmp	.+710    	; 0x1a9a <__vector_41+0x7d6>
    17d4:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    17d8:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    17dc:	40 97       	sbiw	r24, 0x10	; 16
    17de:	34 f0       	brlt	.+12     	; 0x17ec <__vector_41+0x528>
    17e0:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    17e4:	88 23       	and	r24, r24
    17e6:	11 f4       	brne	.+4      	; 0x17ec <__vector_41+0x528>
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <__vector_41+0x52a>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	88 23       	and	r24, r24
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <__vector_41+0x530>
    17f2:	53 c1       	rjmp	.+678    	; 0x1a9a <__vector_41+0x7d6>
    17f4:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    17f8:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    17fc:	0a 97       	sbiw	r24, 0x0a	; 10
    17fe:	09 2e       	mov	r0, r25
    1800:	00 0c       	add	r0, r0
    1802:	aa 0b       	sbc	r26, r26
    1804:	bb 0b       	sbc	r27, r27
    1806:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL18g_seconds_to_sleep>
    180a:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    180e:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    1812:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	80 93 60 45 	sts	0x4560, r24	; 0x804560 <_ZL13g_go_to_sleep>
    1822:	1e 82       	std	Y+6, r1	; 0x06
    1824:	1f 82       	std	Y+7, r1	; 0x07
    1826:	20 91 20 45 	lds	r18, 0x4520	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    182a:	30 91 21 45 	lds	r19, 0x4521	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    182e:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL18g_seconds_to_sleep>
    1832:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    1836:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    183a:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    183e:	89 01       	movw	r16, r18
    1840:	08 1b       	sub	r16, r24
    1842:	19 0b       	sbc	r17, r25
    1844:	c8 01       	movw	r24, r16
    1846:	88 87       	std	Y+8, r24	; 0x08
    1848:	99 87       	std	Y+9, r25	; 0x09
    184a:	2e 81       	ldd	r18, Y+6	; 0x06
    184c:	3f 81       	ldd	r19, Y+7	; 0x07
    184e:	88 85       	ldd	r24, Y+8	; 0x08
    1850:	99 85       	ldd	r25, Y+9	; 0x09
    1852:	28 17       	cp	r18, r24
    1854:	39 07       	cpc	r19, r25
    1856:	1c f4       	brge	.+6      	; 0x185e <__vector_41+0x59a>
    1858:	88 85       	ldd	r24, Y+8	; 0x08
    185a:	99 85       	ldd	r25, Y+9	; 0x09
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <__vector_41+0x59e>
    185e:	8e 81       	ldd	r24, Y+6	; 0x06
    1860:	9f 81       	ldd	r25, Y+7	; 0x07
    1862:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    1866:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    186a:	17 c1       	rjmp	.+558    	; 0x1a9a <__vector_41+0x7d6>
    186c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1870:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1874:	09 2e       	mov	r0, r25
    1876:	00 0c       	add	r0, r0
    1878:	aa 0b       	sbc	r26, r26
    187a:	bb 0b       	sbc	r27, r27
    187c:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    1880:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    1884:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1888:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    188c:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1890:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    1894:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1898:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    189c:	fe c0       	rjmp	.+508    	; 0x1a9a <__vector_41+0x7d6>
    189e:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    18a2:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    18a6:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    18aa:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    18ae:	88 27       	eor	r24, r24
    18b0:	b7 fd       	sbrc	r27, 7
    18b2:	83 95       	inc	r24
    18b4:	99 27       	eor	r25, r25
    18b6:	aa 27       	eor	r26, r26
    18b8:	bb 27       	eor	r27, r27
    18ba:	88 23       	and	r24, r24
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <__vector_41+0x5fc>
    18be:	ed c0       	rjmp	.+474    	; 0x1a9a <__vector_41+0x7d6>
    18c0:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    18c4:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    18c8:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    18cc:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	a1 1d       	adc	r26, r1
    18d4:	b1 1d       	adc	r27, r1
    18d6:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    18da:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    18de:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    18e2:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    18e6:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    18ea:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    18ee:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    18f2:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	89 2b       	or	r24, r25
    18fa:	8a 2b       	or	r24, r26
    18fc:	8b 2b       	or	r24, r27
    18fe:	09 f0       	breq	.+2      	; 0x1902 <__vector_41+0x63e>
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	22 23       	and	r18, r18
    1904:	09 f4       	brne	.+2      	; 0x1908 <__vector_41+0x644>
    1906:	c9 c0       	rjmp	.+402    	; 0x1a9a <__vector_41+0x7d6>
    1908:	8d ef       	ldi	r24, 0xFD	; 253
    190a:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    190e:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1912:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1916:	09 2e       	mov	r0, r25
    1918:	00 0c       	add	r0, r0
    191a:	aa 0b       	sbc	r26, r26
    191c:	bb 0b       	sbc	r27, r27
    191e:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    1922:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    1926:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    192a:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    192e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1932:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    1936:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    193a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	8f 87       	std	Y+15, r24	; 0x0f
    1942:	ce 01       	movw	r24, r28
    1944:	0f 96       	adiw	r24, 0x0f	; 15
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	bc 01       	movw	r22, r24
    194c:	86 e2       	ldi	r24, 0x26	; 38
    194e:	95 e4       	ldi	r25, 0x45	; 69
    1950:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    1954:	a2 c0       	rjmp	.+324    	; 0x1a9a <__vector_41+0x7d6>
    1956:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_use_rtc_to_time_event>
    195a:	88 23       	and	r24, r24
    195c:	09 f4       	brne	.+2      	; 0x1960 <__vector_41+0x69c>
    195e:	9d c0       	rjmp	.+314    	; 0x1a9a <__vector_41+0x7d6>
    1960:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    1964:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    1968:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    196c:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    1970:	21 e0       	ldi	r18, 0x01	; 1
    1972:	89 2b       	or	r24, r25
    1974:	8a 2b       	or	r24, r26
    1976:	8b 2b       	or	r24, r27
    1978:	09 f4       	brne	.+2      	; 0x197c <__vector_41+0x6b8>
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	22 23       	and	r18, r18
    197e:	09 f4       	brne	.+2      	; 0x1982 <__vector_41+0x6be>
    1980:	8c c0       	rjmp	.+280    	; 0x1a9a <__vector_41+0x7d6>
    1982:	ce 01       	movw	r24, r28
    1984:	0a 96       	adiw	r24, 0x0a	; 10
    1986:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    198a:	2a 85       	ldd	r18, Y+10	; 0x0a
    198c:	3b 85       	ldd	r19, Y+11	; 0x0b
    198e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1990:	5d 85       	ldd	r21, Y+13	; 0x0d
    1992:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    1996:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    199a:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    199e:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	28 17       	cp	r18, r24
    19a6:	39 07       	cpc	r19, r25
    19a8:	4a 07       	cpc	r20, r26
    19aa:	5b 07       	cpc	r21, r27
    19ac:	08 f4       	brcc	.+2      	; 0x19b0 <__vector_41+0x6ec>
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	66 23       	and	r22, r22
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <__vector_41+0x6f2>
    19b4:	72 c0       	rjmp	.+228    	; 0x1a9a <__vector_41+0x7d6>
    19b6:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    19ba:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	89 2b       	or	r24, r25
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <__vector_41+0x702>
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	22 23       	and	r18, r18
    19c8:	71 f1       	breq	.+92     	; 0x1a26 <__vector_41+0x762>
    19ca:	8e ef       	ldi	r24, 0xFE	; 254
    19cc:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    19d0:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    19d4:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    19d8:	91 95       	neg	r25
    19da:	81 95       	neg	r24
    19dc:	91 09       	sbc	r25, r1
    19de:	09 2e       	mov	r0, r25
    19e0:	00 0c       	add	r0, r0
    19e2:	aa 0b       	sbc	r26, r26
    19e4:	bb 0b       	sbc	r27, r27
    19e6:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    19ea:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    19ee:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    19f2:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    19f6:	20 91 52 45 	lds	r18, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    19fa:	30 91 53 45 	lds	r19, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    19fe:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1a02:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1a06:	82 0f       	add	r24, r18
    1a08:	93 1f       	adc	r25, r19
    1a0a:	9c 01       	movw	r18, r24
    1a0c:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
    1a10:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    1a14:	a9 01       	movw	r20, r18
    1a16:	48 1b       	sub	r20, r24
    1a18:	59 0b       	sbc	r21, r25
    1a1a:	ca 01       	movw	r24, r20
    1a1c:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    1a20:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1a24:	37 c0       	rjmp	.+110    	; 0x1a94 <__vector_41+0x7d0>
    1a26:	8d ef       	ldi	r24, 0xFD	; 253
    1a28:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    1a2c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1a30:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1a34:	09 2e       	mov	r0, r25
    1a36:	00 0c       	add	r0, r0
    1a38:	aa 0b       	sbc	r26, r26
    1a3a:	bb 0b       	sbc	r27, r27
    1a3c:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    1a40:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    1a44:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    1a48:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    1a4c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1a50:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1a54:	9c 01       	movw	r18, r24
    1a56:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
    1a5a:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    1a5e:	f9 01       	movw	r30, r18
    1a60:	e8 1b       	sub	r30, r24
    1a62:	f9 0b       	sbc	r31, r25
    1a64:	cf 01       	movw	r24, r30
    1a66:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    1a6a:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    1a6e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1a72:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    1a76:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1a7a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	88 8b       	std	Y+16, r24	; 0x10
    1a82:	ce 01       	movw	r24, r28
    1a84:	40 96       	adiw	r24, 0x10	; 16
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	86 e2       	ldi	r24, 0x26	; 38
    1a8e:	95 e4       	ldi	r25, 0x45	; 69
    1a90:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <g_event_commenced>
    1a9a:	90 91 23 45 	lds	r25, 0x4523	; 0x804523 <_ZL19g_wifi_enable_delay>
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	99 23       	and	r25, r25
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <__vector_41+0x7e2>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	88 23       	and	r24, r24
    1aa8:	29 f1       	breq	.+74     	; 0x1af4 <__vector_41+0x830>
    1aaa:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <_ZL19g_wifi_enable_delay>
    1aae:	81 50       	subi	r24, 0x01	; 1
    1ab0:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <_ZL19g_wifi_enable_delay>
    1ab4:	90 91 23 45 	lds	r25, 0x4523	; 0x804523 <_ZL19g_wifi_enable_delay>
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	95 30       	cpi	r25, 0x05	; 5
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <__vector_41+0x7fc>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	88 23       	and	r24, r24
    1ac2:	39 f0       	breq	.+14     	; 0x1ad2 <__vector_41+0x80e>
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <_Z10wifi_powerb>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <_Z10wifi_resetb>
    1ad0:	75 c0       	rjmp	.+234    	; 0x1bbc <__vector_41+0x8f8>
    1ad2:	90 91 23 45 	lds	r25, 0x4523	; 0x804523 <_ZL19g_wifi_enable_delay>
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	99 23       	and	r25, r25
    1ada:	09 f0       	breq	.+2      	; 0x1ade <__vector_41+0x81a>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <__vector_41+0x820>
    1ae2:	6c c0       	rjmp	.+216    	; 0x1bbc <__vector_41+0x8f8>
    1ae4:	46 e0       	ldi	r20, 0x06	; 6
    1ae6:	60 e8       	ldi	r22, 0x80	; 128
    1ae8:	75 e2       	ldi	r23, 0x25	; 37
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 5f 2c 	call	0x58be	; 0x58be <_Z12linkbus_initm14USART_Number_t>
    1af2:	64 c0       	rjmp	.+200    	; 0x1bbc <__vector_41+0x8f8>
    1af4:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_update_timeout_seconds>
    1af8:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_update_timeout_seconds+0x1>
    1afc:	89 2b       	or	r24, r25
    1afe:	81 f0       	breq	.+32     	; 0x1b20 <__vector_41+0x85c>
    1b00:	80 91 24 45 	lds	r24, 0x4524	; 0x804524 <_ZL20g_shutting_down_wifi>
    1b04:	88 23       	and	r24, r24
    1b06:	61 f4       	brne	.+24     	; 0x1b20 <__vector_41+0x85c>
    1b08:	90 91 5e 45 	lds	r25, 0x455E	; 0x80455e <g_check_for_next_event>
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	89 27       	eor	r24, r25
    1b10:	88 23       	and	r24, r24
    1b12:	41 f0       	breq	.+16     	; 0x1b24 <__vector_41+0x860>
    1b14:	90 91 5f 45 	lds	r25, 0x455F	; 0x80455f <g_waiting_for_next_event>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	89 27       	eor	r24, r25
    1b1c:	88 23       	and	r24, r24
    1b1e:	11 f0       	breq	.+4      	; 0x1b24 <__vector_41+0x860>
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <__vector_41+0x862>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	88 23       	and	r24, r24
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <__vector_41+0x868>
    1b2a:	41 c0       	rjmp	.+130    	; 0x1bae <__vector_41+0x8ea>
    1b2c:	90 91 09 40 	lds	r25, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	99 23       	and	r25, r25
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <__vector_41+0x874>
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	88 23       	and	r24, r24
    1b3a:	c9 f1       	breq	.+114    	; 0x1bae <__vector_41+0x8ea>
    1b3c:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b40:	81 50       	subi	r24, 0x01	; 1
    1b42:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b46:	90 91 09 40 	lds	r25, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	99 23       	and	r25, r25
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <__vector_41+0x88e>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	88 23       	and	r24, r24
    1b54:	61 f1       	breq	.+88     	; 0x1bae <__vector_41+0x8ea>
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <_Z10wifi_resetb>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <_Z10wifi_powerb>
    1b62:	10 92 24 45 	sts	0x4524, r1	; 0x804524 <_ZL20g_shutting_down_wifi>
    1b66:	90 91 5c 45 	lds	r25, 0x455C	; 0x80455c <g_event_enabled>
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 27       	eor	r24, r25
    1b6e:	88 23       	and	r24, r24
    1b70:	91 f0       	breq	.+36     	; 0x1b96 <__vector_41+0x8d2>
    1b72:	84 e0       	ldi	r24, 0x04	; 4
    1b74:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	80 93 60 45 	sts	0x4560, r24	; 0x804560 <_ZL13g_go_to_sleep>
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	9f ef       	ldi	r25, 0xFF	; 255
    1b82:	dc 01       	movw	r26, r24
    1b84:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL18g_seconds_to_sleep>
    1b88:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    1b8c:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    1b90:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    1b94:	0a c0       	rjmp	.+20     	; 0x1baa <__vector_41+0x8e6>
    1b96:	90 91 25 45 	lds	r25, 0x4525	; 0x804525 <_ZL11g_sleepType>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	93 30       	cpi	r25, 0x03	; 3
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <__vector_41+0x8de>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	88 23       	and	r24, r24
    1ba4:	11 f0       	breq	.+4      	; 0x1baa <__vector_41+0x8e6>
    1ba6:	0e 94 23 10 	call	0x2046	; 0x2046 <_Z12eventEnabledv>
    1baa:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    1bae:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1bb2:	88 23       	and	r24, r24
    1bb4:	19 f0       	breq	.+6      	; 0x1bbc <__vector_41+0x8f8>
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	80 93 22 45 	sts	0x4522, r24	; 0x804522 <_ZL16g_report_seconds>
    1bbc:	80 e3       	ldi	r24, 0x30	; 48
    1bbe:	9b e0       	ldi	r25, 0x0B	; 11
    1bc0:	21 e0       	ldi	r18, 0x01	; 1
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	26 83       	std	Z+6, r18	; 0x06
    1bc6:	00 00       	nop
    1bc8:	60 96       	adiw	r28, 0x10	; 16
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	ff 91       	pop	r31
    1bd4:	ef 91       	pop	r30
    1bd6:	bf 91       	pop	r27
    1bd8:	af 91       	pop	r26
    1bda:	9f 91       	pop	r25
    1bdc:	8f 91       	pop	r24
    1bde:	7f 91       	pop	r23
    1be0:	6f 91       	pop	r22
    1be2:	5f 91       	pop	r21
    1be4:	4f 91       	pop	r20
    1be6:	3f 91       	pop	r19
    1be8:	2f 91       	pop	r18
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	0f 90       	pop	r0
    1bf4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    1bf8:	0f 90       	pop	r0
    1bfa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    1bfe:	0f 90       	pop	r0
    1c00:	1f 90       	pop	r1
    1c02:	18 95       	reti

00001c04 <__vector_12>:
    1c04:	1f 92       	push	r1
    1c06:	0f 92       	push	r0
    1c08:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    1c14:	0f 92       	push	r0
    1c16:	2f 93       	push	r18
    1c18:	3f 93       	push	r19
    1c1a:	4f 93       	push	r20
    1c1c:	5f 93       	push	r21
    1c1e:	6f 93       	push	r22
    1c20:	7f 93       	push	r23
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	af 93       	push	r26
    1c28:	bf 93       	push	r27
    1c2a:	ef 93       	push	r30
    1c2c:	ff 93       	push	r31
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <__vector_12+0x30>
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	9b e0       	ldi	r25, 0x0B	; 11
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	86 81       	ldd	r24, Z+6	; 0x06
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	81 70       	andi	r24, 0x01	; 1
    1c46:	99 27       	eor	r25, r25
    1c48:	21 e0       	ldi	r18, 0x01	; 1
    1c4a:	89 2b       	or	r24, r25
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <__vector_12+0x4c>
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	22 23       	and	r18, r18
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <__vector_12+0x52>
    1c54:	e4 c0       	rjmp	.+456    	; 0x1e1e <__vector_12+0x21a>
    1c56:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c0_timeout_ticks>
    1c5a:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c0_timeout_ticks+0x1>
    1c5e:	21 e0       	ldi	r18, 0x01	; 1
    1c60:	89 2b       	or	r24, r25
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <__vector_12+0x62>
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	22 23       	and	r18, r18
    1c68:	49 f0       	breq	.+18     	; 0x1c7c <__vector_12+0x78>
    1c6a:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c0_timeout_ticks>
    1c6e:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c0_timeout_ticks+0x1>
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c0_timeout_ticks>
    1c78:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c0_timeout_ticks+0x1>
    1c7c:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c1_timeout_ticks>
    1c80:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c1_timeout_ticks+0x1>
    1c84:	21 e0       	ldi	r18, 0x01	; 1
    1c86:	89 2b       	or	r24, r25
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <__vector_12+0x88>
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	22 23       	and	r18, r18
    1c8e:	49 f0       	breq	.+18     	; 0x1ca2 <__vector_12+0x9e>
    1c90:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c1_timeout_ticks>
    1c94:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c1_timeout_ticks+0x1>
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c1_timeout_ticks>
    1c9e:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c1_timeout_ticks+0x1>
    1ca2:	80 91 19 45 	lds	r24, 0x4519	; 0x804519 <_ZL21g_util_tick_countdown>
    1ca6:	90 91 1a 45 	lds	r25, 0x451A	; 0x80451a <_ZL21g_util_tick_countdown+0x1>
    1caa:	21 e0       	ldi	r18, 0x01	; 1
    1cac:	89 2b       	or	r24, r25
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <__vector_12+0xae>
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	22 23       	and	r18, r18
    1cb4:	49 f0       	breq	.+18     	; 0x1cc8 <__vector_12+0xc4>
    1cb6:	80 91 19 45 	lds	r24, 0x4519	; 0x804519 <_ZL21g_util_tick_countdown>
    1cba:	90 91 1a 45 	lds	r25, 0x451A	; 0x80451a <_ZL21g_util_tick_countdown+0x1>
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	80 93 19 45 	sts	0x4519, r24	; 0x804519 <_ZL21g_util_tick_countdown>
    1cc4:	90 93 1a 45 	sts	0x451A, r25	; 0x80451a <_ZL21g_util_tick_countdown+0x1>
    1cc8:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <g_event_enabled>
    1ccc:	88 23       	and	r24, r24
    1cce:	31 f0       	breq	.+12     	; 0x1cdc <__vector_12+0xd8>
    1cd0:	80 91 5d 45 	lds	r24, 0x455D	; 0x80455d <g_event_commenced>
    1cd4:	88 23       	and	r24, r24
    1cd6:	11 f0       	breq	.+4      	; 0x1cdc <__vector_12+0xd8>
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <__vector_12+0xda>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	88 23       	and	r24, r24
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <__vector_12+0xe0>
    1ce2:	9d c0       	rjmp	.+314    	; 0x1e1e <__vector_12+0x21a>
    1ce4:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    1ce8:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    1cec:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1cf0:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	18 16       	cp	r1, r24
    1cf8:	19 06       	cpc	r1, r25
    1cfa:	1a 06       	cpc	r1, r26
    1cfc:	1b 06       	cpc	r1, r27
    1cfe:	0c f0       	brlt	.+2      	; 0x1d02 <__vector_12+0xfe>
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	22 23       	and	r18, r18
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <__vector_12+0x104>
    1d06:	69 c0       	rjmp	.+210    	; 0x1dda <__vector_12+0x1d6>
    1d08:	80 91 73 45 	lds	r24, 0x4573	; 0x804573 <_ZZ11__vector_12E7codeInc>
    1d0c:	90 91 74 45 	lds	r25, 0x4574	; 0x804574 <_ZZ11__vector_12E7codeInc+0x1>
    1d10:	89 2b       	or	r24, r25
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <__vector_12+0x112>
    1d14:	51 c0       	rjmp	.+162    	; 0x1db8 <__vector_12+0x1b4>
    1d16:	80 91 73 45 	lds	r24, 0x4573	; 0x804573 <_ZZ11__vector_12E7codeInc>
    1d1a:	90 91 74 45 	lds	r25, 0x4574	; 0x804574 <_ZZ11__vector_12E7codeInc+0x1>
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	80 93 73 45 	sts	0x4573, r24	; 0x804573 <_ZZ11__vector_12E7codeInc>
    1d24:	90 93 74 45 	sts	0x4574, r25	; 0x804574 <_ZZ11__vector_12E7codeInc+0x1>
    1d28:	80 91 73 45 	lds	r24, 0x4573	; 0x804573 <_ZZ11__vector_12E7codeInc>
    1d2c:	90 91 74 45 	lds	r25, 0x4574	; 0x804574 <_ZZ11__vector_12E7codeInc+0x1>
    1d30:	89 2b       	or	r24, r25
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <__vector_12+0x132>
    1d34:	74 c0       	rjmp	.+232    	; 0x1e1e <__vector_12+0x21a>
    1d36:	ce 01       	movw	r24, r28
    1d38:	02 96       	adiw	r24, 0x02	; 2
    1d3a:	ac 01       	movw	r20, r24
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	bc 01       	movw	r22, r24
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    1d4a:	80 93 75 45 	sts	0x4575, r24	; 0x804575 <_ZZ11__vector_12E3key>
    1d4e:	99 81       	ldd	r25, Y+1	; 0x01
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	89 27       	eor	r24, r25
    1d54:	88 23       	and	r24, r24
    1d56:	29 f1       	breq	.+74     	; 0x1da2 <__vector_12+0x19e>
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	88 23       	and	r24, r24
    1d5c:	11 f1       	breq	.+68     	; 0x1da2 <__vector_12+0x19e>
    1d5e:	8d ef       	ldi	r24, 0xFD	; 253
    1d60:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    1d64:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1d68:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    1d6c:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1d70:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	bc 01       	movw	r22, r24
    1d82:	86 e2       	ldi	r24, 0x26	; 38
    1d84:	95 e4       	ldi	r25, 0x45	; 69
    1d86:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	02 96       	adiw	r24, 0x02	; 2
    1d8e:	ac 01       	movw	r20, r24
    1d90:	ce 01       	movw	r24, r28
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	bc 01       	movw	r22, r24
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    1d9e:	80 93 75 45 	sts	0x4575, r24	; 0x804575 <_ZZ11__vector_12E3key>
    1da2:	80 91 75 45 	lds	r24, 0x4575	; 0x804575 <_ZZ11__vector_12E3key>
    1da6:	88 23       	and	r24, r24
    1da8:	d1 f1       	breq	.+116    	; 0x1e1e <__vector_12+0x21a>
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	0e 94 d4 3e 	call	0x7da8	; 0x7da8 <_Z18powerToTransmitterb>
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	0e 94 45 09 	call	0x128a	; 0x128a <LED_set_level>
    1db6:	33 c0       	rjmp	.+102    	; 0x1e1e <__vector_12+0x21a>
    1db8:	80 91 75 45 	lds	r24, 0x4575	; 0x804575 <_ZZ11__vector_12E3key>
    1dbc:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <_Z14keyTransmitterb>
    1dc0:	80 91 75 45 	lds	r24, 0x4575	; 0x804575 <_ZZ11__vector_12E3key>
    1dc4:	0e 94 45 09 	call	0x128a	; 0x128a <LED_set_level>
    1dc8:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    1dcc:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    1dd0:	80 93 73 45 	sts	0x4573, r24	; 0x804573 <_ZZ11__vector_12E7codeInc>
    1dd4:	90 93 74 45 	sts	0x4574, r25	; 0x804574 <_ZZ11__vector_12E7codeInc+0x1>
    1dd8:	22 c0       	rjmp	.+68     	; 0x1e1e <__vector_12+0x21a>
    1dda:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    1dde:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    1de2:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    1de6:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    1dea:	21 e0       	ldi	r18, 0x01	; 1
    1dec:	89 2b       	or	r24, r25
    1dee:	8a 2b       	or	r24, r26
    1df0:	8b 2b       	or	r24, r27
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <__vector_12+0x1f2>
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	22 23       	and	r18, r18
    1df8:	91 f0       	breq	.+36     	; 0x1e1e <__vector_12+0x21a>
    1dfa:	80 91 75 45 	lds	r24, 0x4575	; 0x804575 <_ZZ11__vector_12E3key>
    1dfe:	88 23       	and	r24, r24
    1e00:	71 f0       	breq	.+28     	; 0x1e1e <__vector_12+0x21a>
    1e02:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <_ZZ11__vector_12E3key>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <_Z14keyTransmitterb>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	0e 94 45 09 	call	0x128a	; 0x128a <LED_set_level>
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	0e 94 d4 3e 	call	0x7da8	; 0x7da8 <_Z18powerToTransmitterb>
    1e18:	8e ef       	ldi	r24, 0xFE	; 254
    1e1a:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	9b e0       	ldi	r25, 0x0B	; 11
    1e22:	21 e0       	ldi	r18, 0x01	; 1
    1e24:	fc 01       	movw	r30, r24
    1e26:	26 83       	std	Z+6, r18	; 0x06
    1e28:	00 00       	nop
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	ff 91       	pop	r31
    1e34:	ef 91       	pop	r30
    1e36:	bf 91       	pop	r27
    1e38:	af 91       	pop	r26
    1e3a:	9f 91       	pop	r25
    1e3c:	8f 91       	pop	r24
    1e3e:	7f 91       	pop	r23
    1e40:	6f 91       	pop	r22
    1e42:	5f 91       	pop	r21
    1e44:	4f 91       	pop	r20
    1e46:	3f 91       	pop	r19
    1e48:	2f 91       	pop	r18
    1e4a:	0f 90       	pop	r0
    1e4c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    1e50:	0f 90       	pop	r0
    1e52:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    1e56:	0f 90       	pop	r0
    1e58:	1f 90       	pop	r1
    1e5a:	18 95       	reti

00001e5c <main>:
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	27 97       	sbiw	r28, 0x07	; 7
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0e 94 a0 01 	call	0x340	; 0x340 <atmel_start_init>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	0e 94 45 09 	call	0x128a	; 0x128a <LED_set_level>
    1e74:	86 e6       	ldi	r24, 0x66	; 102
    1e76:	95 e4       	ldi	r25, 0x45	; 69
    1e78:	0e 94 4b 23 	call	0x4696	; 0x4696 <_ZN13EepromManager20initializeEEPROMVarsEv>
    1e7c:	86 e6       	ldi	r24, 0x66	; 102
    1e7e:	95 e4       	ldi	r25, 0x45	; 69
    1e80:	0e 94 dd 21 	call	0x43ba	; 0x43ba <_ZN13EepromManager11readNonVolsEv>
    1e84:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <_Z16init_transmitterv>
    1e88:	98 2f       	mov	r25, r24
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	92 3d       	cpi	r25, 0xD2	; 210
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <main+0x36>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	88 23       	and	r24, r24
    1e94:	39 f0       	breq	.+14     	; 0x1ea4 <main+0x48>
    1e96:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_NewLine>
    1e9a:	88 e4       	ldi	r24, 0x48	; 72
    1e9c:	90 e4       	ldi	r25, 0x40	; 64
    1e9e:	0e 94 dd 31 	call	0x63ba	; 0x63ba <sb_send_string>
    1ea2:	04 c0       	rjmp	.+8      	; 0x1eac <main+0x50>
    1ea4:	83 e7       	ldi	r24, 0x73	; 115
    1ea6:	90 e4       	ldi	r25, 0x40	; 64
    1ea8:	0e 94 dd 31 	call	0x63ba	; 0x63ba <sb_send_string>
    1eac:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_Z8rtc_initv>
    1eb0:	98 2f       	mov	r25, r24
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	9c 3f       	cpi	r25, 0xFC	; 252
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <main+0x5e>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	88 23       	and	r24, r24
    1ebc:	39 f0       	breq	.+14     	; 0x1ecc <main+0x70>
    1ebe:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_NewLine>
    1ec2:	8b e7       	ldi	r24, 0x7B	; 123
    1ec4:	90 e4       	ldi	r25, 0x40	; 64
    1ec6:	0e 94 dd 31 	call	0x63ba	; 0x63ba <sb_send_string>
    1eca:	20 c0       	rjmp	.+64     	; 0x1f0c <main+0xb0>
    1ecc:	ce 01       	movw	r24, r28
    1ece:	07 96       	adiw	r24, 0x07	; 7
    1ed0:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <ds3231_get_epoch>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	ad 83       	std	Y+5, r26	; 0x05
    1ede:	be 83       	std	Y+6, r27	; 0x06
    1ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee2:	88 23       	and	r24, r24
    1ee4:	69 f4       	brne	.+26     	; 0x1f00 <main+0xa4>
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	ad 81       	ldd	r26, Y+5	; 0x05
    1eec:	be 81       	ldd	r27, Y+6	; 0x06
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 65 01 	call	0x2ca	; 0x2ca <set_system_time>
    1ef6:	83 ea       	ldi	r24, 0xA3	; 163
    1ef8:	90 e4       	ldi	r25, 0x40	; 64
    1efa:	0e 94 dd 31 	call	0x63ba	; 0x63ba <sb_send_string>
    1efe:	06 c0       	rjmp	.+12     	; 0x1f0c <main+0xb0>
    1f00:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_NewLine>
    1f04:	8b e7       	ldi	r24, 0x7B	; 123
    1f06:	90 e4       	ldi	r25, 0x40	; 64
    1f08:	0e 94 dd 31 	call	0x63ba	; 0x63ba <sb_send_string>
    1f0c:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_NewLine>
    1f10:	8b ea       	ldi	r24, 0xAB	; 171
    1f12:	90 e4       	ldi	r25, 0x40	; 64
    1f14:	0e 94 dd 31 	call	0x63ba	; 0x63ba <sb_send_string>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e4       	ldi	r25, 0x40	; 64
    1f1c:	89 2f       	mov	r24, r25
    1f1e:	8f 93       	push	r24
    1f20:	88 ec       	ldi	r24, 0xC8	; 200
    1f22:	90 e4       	ldi	r25, 0x40	; 64
    1f24:	8f 93       	push	r24
    1f26:	8c ec       	ldi	r24, 0xCC	; 204
    1f28:	90 e4       	ldi	r25, 0x40	; 64
    1f2a:	89 2f       	mov	r24, r25
    1f2c:	8f 93       	push	r24
    1f2e:	8c ec       	ldi	r24, 0xCC	; 204
    1f30:	90 e4       	ldi	r25, 0x40	; 64
    1f32:	8f 93       	push	r24
    1f34:	85 ee       	ldi	r24, 0xE5	; 229
    1f36:	94 e4       	ldi	r25, 0x44	; 68
    1f38:	89 2f       	mov	r24, r25
    1f3a:	8f 93       	push	r24
    1f3c:	85 ee       	ldi	r24, 0xE5	; 229
    1f3e:	94 e4       	ldi	r25, 0x44	; 68
    1f40:	8f 93       	push	r24
    1f42:	0e 94 24 47 	call	0x8e48	; 0x8e48 <sprintf>
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	85 ee       	ldi	r24, 0xE5	; 229
    1f54:	94 e4       	ldi	r25, 0x44	; 68
    1f56:	0e 94 dd 31 	call	0x63ba	; 0x63ba <sb_send_string>
    1f5a:	89 ed       	ldi	r24, 0xD9	; 217
    1f5c:	90 e4       	ldi	r25, 0x40	; 64
    1f5e:	0e 94 dd 31 	call	0x63ba	; 0x63ba <sb_send_string>
    1f62:	0e 94 92 1b 	call	0x3724	; 0x3724 <_Z11wifiPresentv>
    1f66:	98 2f       	mov	r25, r24
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	89 27       	eor	r24, r25
    1f6c:	88 23       	and	r24, r24
    1f6e:	41 f0       	breq	.+16     	; 0x1f80 <main+0x124>
    1f70:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_NewLine>
    1f74:	80 e2       	ldi	r24, 0x20	; 32
    1f76:	92 e4       	ldi	r25, 0x42	; 66
    1f78:	0e 94 dd 31 	call	0x63ba	; 0x63ba <sb_send_string>
    1f7c:	10 92 23 45 	sts	0x4523, r1	; 0x804523 <_ZL19g_wifi_enable_delay>
    1f80:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_NewLine>
    1f84:	0e 94 a0 31 	call	0x6340	; 0x6340 <sb_send_NewPrompt>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z13startEventNow19EventActionSource_t>
    1f8e:	f8 94       	cli
    1f90:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <_ZZ4mainE3val>
    1f94:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ4mainE3val+0x1>
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	9c 01       	movw	r18, r24
    1fa2:	21 50       	subi	r18, 0x01	; 1
    1fa4:	31 09       	sbc	r19, r1
    1fa6:	29 83       	std	Y+1, r18	; 0x01
    1fa8:	3a 83       	std	Y+2, r19	; 0x02
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	89 2b       	or	r24, r25
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <main+0x156>
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	22 23       	and	r18, r18
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <main+0x15c>
    1fb6:	f2 cf       	rjmp	.-28     	; 0x1f9c <main+0x140>
    1fb8:	80 91 23 48 	lds	r24, 0x4823	; 0x804823 <g_fine_freq_adj>
    1fbc:	90 91 24 48 	lds	r25, 0x4824	; 0x804824 <g_x>
    1fc0:	cc 01       	movw	r24, r24
    1fc2:	a0 e0       	ldi	r26, 0x00	; 0
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	50 e0       	ldi	r21, 0x00	; 0
    1fca:	21 e3       	ldi	r18, 0x31	; 49
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	84 1b       	sub	r24, r20
    1fd0:	95 0b       	sbc	r25, r21
    1fd2:	28 17       	cp	r18, r24
    1fd4:	39 07       	cpc	r19, r25
    1fd6:	08 f4       	brcc	.+2      	; 0x1fda <main+0x17e>
    1fd8:	31 c0       	rjmp	.+98     	; 0x203c <main+0x1e0>
    1fda:	8c 58       	subi	r24, 0x8C	; 140
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	fc 01       	movw	r30, r24
    1fe0:	0c 94 b9 45 	jmp	0x8b72	; 0x8b72 <__tablejump2__>
	...
    2030:	00 00       	nop
    2032:	05 c0       	rjmp	.+10     	; 0x203e <main+0x1e2>
    2034:	00 00       	nop
    2036:	03 c0       	rjmp	.+6      	; 0x203e <main+0x1e2>
    2038:	00 00       	nop
    203a:	01 c0       	rjmp	.+2      	; 0x203e <main+0x1e2>
    203c:	00 00       	nop
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <PORTA_toggle_port_level>
    2044:	a5 cf       	rjmp	.-182    	; 0x1f90 <main+0x134>

00002046 <_Z12eventEnabledv>:
    2046:	ef 92       	push	r14
    2048:	ff 92       	push	r15
    204a:	0f 93       	push	r16
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	29 97       	sbiw	r28, 0x09	; 9
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	20 91 54 45 	lds	r18, 0x4554	; 0x804554 <g_event_start_epoch>
    2060:	30 91 55 45 	lds	r19, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2064:	40 91 56 45 	lds	r20, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2068:	50 91 57 45 	lds	r21, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    206c:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    2070:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    2074:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    2078:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 a9 42 	call	0x8552	; 0x8552 <_Z7timeDifmm>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	89 83       	std	Y+1, r24	; 0x01
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	ab 83       	std	Y+3, r26	; 0x03
    208e:	bc 83       	std	Y+4, r27	; 0x04
    2090:	21 e0       	ldi	r18, 0x01	; 1
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	ab 81       	ldd	r26, Y+3	; 0x03
    2098:	bc 81       	ldd	r27, Y+4	; 0x04
    209a:	18 16       	cp	r1, r24
    209c:	19 06       	cpc	r1, r25
    209e:	1a 06       	cpc	r1, r26
    20a0:	1b 06       	cpc	r1, r27
    20a2:	0c f0       	brlt	.+2      	; 0x20a6 <_Z12eventEnabledv+0x60>
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	2d 83       	std	Y+5, r18	; 0x05
    20a8:	ce 01       	movw	r24, r28
    20aa:	06 96       	adiw	r24, 0x06	; 6
    20ac:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    20b0:	20 91 58 45 	lds	r18, 0x4558	; 0x804558 <g_event_finish_epoch>
    20b4:	30 91 59 45 	lds	r19, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    20b8:	40 91 5a 45 	lds	r20, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    20bc:	50 91 5b 45 	lds	r21, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    20c0:	8e 81       	ldd	r24, Y+6	; 0x06
    20c2:	9f 81       	ldd	r25, Y+7	; 0x07
    20c4:	a8 85       	ldd	r26, Y+8	; 0x08
    20c6:	b9 85       	ldd	r27, Y+9	; 0x09
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 a9 42 	call	0x8552	; 0x8552 <_Z7timeDifmm>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	ab 83       	std	Y+3, r26	; 0x03
    20da:	bc 83       	std	Y+4, r27	; 0x04
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	ab 81       	ldd	r26, Y+3	; 0x03
    20e2:	bc 81       	ldd	r27, Y+4	; 0x04
    20e4:	bb 23       	and	r27, r27
    20e6:	2c f0       	brlt	.+10     	; 0x20f2 <_Z12eventEnabledv+0xac>
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	88 23       	and	r24, r24
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <_Z12eventEnabledv+0xac>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	4a c0       	rjmp	.+148    	; 0x2186 <_Z12eventEnabledv+0x140>
    20f2:	20 91 54 45 	lds	r18, 0x4554	; 0x804554 <g_event_start_epoch>
    20f6:	30 91 55 45 	lds	r19, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    20fa:	40 91 56 45 	lds	r20, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    20fe:	50 91 57 45 	lds	r21, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2102:	8e 81       	ldd	r24, Y+6	; 0x06
    2104:	9f 81       	ldd	r25, Y+7	; 0x07
    2106:	a8 85       	ldd	r26, Y+8	; 0x08
    2108:	b9 85       	ldd	r27, Y+9	; 0x09
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 a9 42 	call	0x8552	; 0x8552 <_Z7timeDifmm>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	ab 83       	std	Y+3, r26	; 0x03
    211c:	bc 83       	std	Y+4, r27	; 0x04
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	9a 81       	ldd	r25, Y+2	; 0x02
    2122:	ab 81       	ldd	r26, Y+3	; 0x03
    2124:	bc 81       	ldd	r27, Y+4	; 0x04
    2126:	84 3c       	cpi	r24, 0xC4	; 196
    2128:	9f 4f       	sbci	r25, 0xFF	; 255
    212a:	af 4f       	sbci	r26, 0xFF	; 255
    212c:	bf 4f       	sbci	r27, 0xFF	; 255
    212e:	64 f0       	brlt	.+24     	; 0x2148 <_Z12eventEnabledv+0x102>
    2130:	10 92 25 45 	sts	0x4525, r1	; 0x804525 <_ZL11g_sleepType>
    2134:	10 92 16 40 	sts	0x4016, r1	; 0x804016 <_ZL18g_seconds_to_sleep>
    2138:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    213c:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    2140:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	1f c0       	rjmp	.+62     	; 0x2186 <_Z12eventEnabledv+0x140>
    2148:	24 ec       	ldi	r18, 0xC4	; 196
    214a:	3f ef       	ldi	r19, 0xFF	; 255
    214c:	4f ef       	ldi	r20, 0xFF	; 255
    214e:	5f ef       	ldi	r21, 0xFF	; 255
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	ab 81       	ldd	r26, Y+3	; 0x03
    2156:	bc 81       	ldd	r27, Y+4	; 0x04
    2158:	79 01       	movw	r14, r18
    215a:	8a 01       	movw	r16, r20
    215c:	e8 1a       	sub	r14, r24
    215e:	f9 0a       	sbc	r15, r25
    2160:	0a 0b       	sbc	r16, r26
    2162:	1b 0b       	sbc	r17, r27
    2164:	d8 01       	movw	r26, r16
    2166:	c7 01       	movw	r24, r14
    2168:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL18g_seconds_to_sleep>
    216c:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL18g_seconds_to_sleep+0x1>
    2170:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL18g_seconds_to_sleep+0x2>
    2174:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL18g_seconds_to_sleep+0x3>
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	80 93 60 45 	sts	0x4560, r24	; 0x804560 <_ZL13g_go_to_sleep>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	29 96       	adiw	r28, 0x09	; 9
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	08 95       	ret

0000219a <_Z13throttleValueh>:
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	2a 97       	sbiw	r28, 0x0a	; 10
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	8a 87       	std	Y+10, r24	; 0x0a
    21aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	85 e0       	ldi	r24, 0x05	; 5
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	8a 83       	std	Y+2, r24	; 0x02
    21b4:	9b 83       	std	Y+3, r25	; 0x03
    21b6:	84 e1       	ldi	r24, 0x14	; 20
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	8c 83       	std	Y+4, r24	; 0x04
    21bc:	9d 83       	std	Y+5, r25	; 0x05
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	28 2f       	mov	r18, r24
    21c2:	88 0f       	add	r24, r24
    21c4:	33 0b       	sbc	r19, r19
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ca:	82 17       	cp	r24, r18
    21cc:	93 07       	cpc	r25, r19
    21ce:	5c f0       	brlt	.+22     	; 0x21e6 <_Z13throttleValueh+0x4c>
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	08 2e       	mov	r0, r24
    21d4:	00 0c       	add	r0, r0
    21d6:	99 0b       	sbc	r25, r25
    21d8:	2a 81       	ldd	r18, Y+2	; 0x02
    21da:	3b 81       	ldd	r19, Y+3	; 0x03
    21dc:	82 17       	cp	r24, r18
    21de:	93 07       	cpc	r25, r19
    21e0:	24 f4       	brge	.+8      	; 0x21ea <_Z13throttleValueh+0x50>
    21e2:	c9 01       	movw	r24, r18
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <_Z13throttleValueh+0x50>
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ea:	8a 87       	std	Y+10, r24	; 0x0a
    21ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	82 ec       	ldi	r24, 0xC2	; 194
    21f8:	91 e0       	ldi	r25, 0x01	; 1
    21fa:	a0 e0       	ldi	r26, 0x00	; 0
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__divmodsi4>
    2206:	da 01       	movw	r26, r20
    2208:	c9 01       	movw	r24, r18
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 1e 44 	call	0x883c	; 0x883c <__floatsisf>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8e 83       	std	Y+6, r24	; 0x06
    2218:	9f 83       	std	Y+7, r25	; 0x07
    221a:	a8 87       	std	Y+8, r26	; 0x08
    221c:	b9 87       	std	Y+9, r27	; 0x09
    221e:	6e 81       	ldd	r22, Y+6	; 0x06
    2220:	7f 81       	ldd	r23, Y+7	; 0x07
    2222:	88 85       	ldd	r24, Y+8	; 0x08
    2224:	99 85       	ldd	r25, Y+9	; 0x09
    2226:	0e 94 ed 43 	call	0x87da	; 0x87da <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	2a 96       	adiw	r28, 0x0a	; 10
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	08 95       	ret

0000223a <_Z11launchEventP2SC>:
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	00 d0       	rcall	.+0      	; 0x2240 <_Z11launchEventP2SC+0x6>
    2240:	1f 92       	push	r1
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	8a 83       	std	Y+2, r24	; 0x02
    2248:	9b 83       	std	Y+3, r25	; 0x03
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	9b 81       	ldd	r25, Y+3	; 0x03
    224e:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z33activateEventUsingCurrentSettingsP2SC>
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	fc 01       	movw	r30, r24
    225a:	80 81       	ld	r24, Z
    225c:	88 23       	and	r24, r24
    225e:	31 f0       	breq	.+12     	; 0x226c <_Z11launchEventP2SC+0x32>
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	fc 01       	movw	r30, r24
    2266:	80 81       	ld	r24, Z
    2268:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	88 23       	and	r24, r24
    2270:	21 f0       	breq	.+8      	; 0x227a <_Z11launchEventP2SC+0x40>
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	80 93 17 45 	sts	0x4517, r24	; 0x804517 <_ZL17g_last_error_code>
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <_Z11launchEventP2SC+0x48>
    227a:	0e 94 23 10 	call	0x2046	; 0x2046 <_Z12eventEnabledv>
    227e:	80 93 5c 45 	sts	0x455C, r24	; 0x80455c <g_event_enabled>
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	23 96       	adiw	r28, 0x03	; 3
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	08 95       	ret

00002290 <_Z33activateEventUsingCurrentSettingsP2SC>:
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	62 97       	sbiw	r28, 0x12	; 18
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	89 8b       	std	Y+17, r24	; 0x11
    22a0:	9a 8b       	std	Y+18, r25	; 0x12
    22a2:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    22a6:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    22aa:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    22ae:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    22b2:	21 e0       	ldi	r18, 0x01	; 1
    22b4:	89 2b       	or	r24, r25
    22b6:	8a 2b       	or	r24, r26
    22b8:	8b 2b       	or	r24, r27
    22ba:	09 f0       	breq	.+2      	; 0x22be <_Z33activateEventUsingCurrentSettingsP2SC+0x2e>
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	22 23       	and	r18, r18
    22c0:	11 f0       	breq	.+4      	; 0x22c6 <_Z33activateEventUsingCurrentSettingsP2SC+0x36>
    22c2:	8c ec       	ldi	r24, 0xCC	; 204
    22c4:	12 c2       	rjmp	.+1060   	; 0x26ea <_Z33activateEventUsingCurrentSettingsP2SC+0x45a>
    22c6:	20 91 54 45 	lds	r18, 0x4554	; 0x804554 <g_event_start_epoch>
    22ca:	30 91 55 45 	lds	r19, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    22ce:	40 91 56 45 	lds	r20, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    22d2:	50 91 57 45 	lds	r21, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    22d6:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    22da:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    22de:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    22e2:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    22e6:	61 e0       	ldi	r22, 0x01	; 1
    22e8:	28 17       	cp	r18, r24
    22ea:	39 07       	cpc	r19, r25
    22ec:	4a 07       	cpc	r20, r26
    22ee:	5b 07       	cpc	r21, r27
    22f0:	08 f4       	brcc	.+2      	; 0x22f4 <_Z33activateEventUsingCurrentSettingsP2SC+0x64>
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	66 23       	and	r22, r22
    22f6:	11 f0       	breq	.+4      	; 0x22fc <_Z33activateEventUsingCurrentSettingsP2SC+0x6c>
    22f8:	8d ec       	ldi	r24, 0xCD	; 205
    22fa:	f7 c1       	rjmp	.+1006   	; 0x26ea <_Z33activateEventUsingCurrentSettingsP2SC+0x45a>
    22fc:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    2300:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    2304:	21 e0       	ldi	r18, 0x01	; 1
    2306:	89 2b       	or	r24, r25
    2308:	09 f0       	breq	.+2      	; 0x230c <_Z33activateEventUsingCurrentSettingsP2SC+0x7c>
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	22 23       	and	r18, r18
    230e:	11 f0       	breq	.+4      	; 0x2314 <_Z33activateEventUsingCurrentSettingsP2SC+0x84>
    2310:	8b ec       	ldi	r24, 0xCB	; 203
    2312:	eb c1       	rjmp	.+982    	; 0x26ea <_Z33activateEventUsingCurrentSettingsP2SC+0x45a>
    2314:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    2318:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    231c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    2320:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    2324:	28 0f       	add	r18, r24
    2326:	39 1f       	adc	r19, r25
    2328:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    232c:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	28 17       	cp	r18, r24
    2334:	39 07       	cpc	r19, r25
    2336:	0c f0       	brlt	.+2      	; 0x233a <_Z33activateEventUsingCurrentSettingsP2SC+0xaa>
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	44 23       	and	r20, r20
    233c:	11 f0       	breq	.+4      	; 0x2342 <_Z33activateEventUsingCurrentSettingsP2SC+0xb2>
    233e:	8a ec       	ldi	r24, 0xCA	; 202
    2340:	d4 c1       	rjmp	.+936    	; 0x26ea <_Z33activateEventUsingCurrentSettingsP2SC+0x45a>
    2342:	80 91 26 45 	lds	r24, 0x4526	; 0x804526 <g_messages_text>
    2346:	88 23       	and	r24, r24
    2348:	11 f4       	brne	.+4      	; 0x234e <_Z33activateEventUsingCurrentSettingsP2SC+0xbe>
    234a:	89 ec       	ldi	r24, 0xC9	; 201
    234c:	ce c1       	rjmp	.+924    	; 0x26ea <_Z33activateEventUsingCurrentSettingsP2SC+0x45a>
    234e:	90 91 0c 40 	lds	r25, 0x400C	; 0x80400c <g_pattern_codespeed>
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	99 23       	and	r25, r25
    2356:	09 f0       	breq	.+2      	; 0x235a <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	88 23       	and	r24, r24
    235c:	11 f0       	breq	.+4      	; 0x2362 <_Z33activateEventUsingCurrentSettingsP2SC+0xd2>
    235e:	88 ec       	ldi	r24, 0xC8	; 200
    2360:	c4 c1       	rjmp	.+904    	; 0x26ea <_Z33activateEventUsingCurrentSettingsP2SC+0x45a>
    2362:	80 91 3b 45 	lds	r24, 0x453B	; 0x80453b <g_messages_text+0x15>
    2366:	88 23       	and	r24, r24
    2368:	91 f1       	breq	.+100    	; 0x23ce <_Z33activateEventUsingCurrentSettingsP2SC+0x13e>
    236a:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    236e:	88 23       	and	r24, r24
    2370:	31 f0       	breq	.+12     	; 0x237e <_Z33activateEventUsingCurrentSettingsP2SC+0xee>
    2372:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    2376:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    237a:	89 2b       	or	r24, r25
    237c:	11 f4       	brne	.+4      	; 0x2382 <_Z33activateEventUsingCurrentSettingsP2SC+0xf2>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <_Z33activateEventUsingCurrentSettingsP2SC+0xf4>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	88 23       	and	r24, r24
    2386:	11 f0       	breq	.+4      	; 0x238c <_Z33activateEventUsingCurrentSettingsP2SC+0xfc>
    2388:	87 ec       	ldi	r24, 0xC7	; 199
    238a:	af c1       	rjmp	.+862    	; 0x26ea <_Z33activateEventUsingCurrentSettingsP2SC+0x45a>
    238c:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	bc 01       	movw	r22, r24
    2396:	8b e3       	ldi	r24, 0x3B	; 59
    2398:	95 e4       	ldi	r25, 0x45	; 69
    239a:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <_Z26timeRequiredToSendStrAtWPMPcj>
    239e:	8c 50       	subi	r24, 0x0C	; 12
    23a0:	9e 4f       	sbci	r25, 0xFE	; 254
    23a2:	96 95       	lsr	r25
    23a4:	87 95       	ror	r24
    23a6:	96 95       	lsr	r25
    23a8:	87 95       	ror	r24
    23aa:	96 95       	lsr	r25
    23ac:	87 95       	ror	r24
    23ae:	9c 01       	movw	r18, r24
    23b0:	a5 ec       	ldi	r26, 0xC5	; 197
    23b2:	b0 e2       	ldi	r27, 0x20	; 32
    23b4:	0e 94 c2 45 	call	0x8b84	; 0x8b84 <__umulhisi3>
    23b8:	92 95       	swap	r25
    23ba:	82 95       	swap	r24
    23bc:	8f 70       	andi	r24, 0x0F	; 15
    23be:	89 27       	eor	r24, r25
    23c0:	9f 70       	andi	r25, 0x0F	; 15
    23c2:	89 27       	eor	r24, r25
    23c4:	80 93 50 45 	sts	0x4550, r24	; 0x804550 <g_time_needed_for_ID>
    23c8:	90 93 51 45 	sts	0x4551, r25	; 0x804551 <g_time_needed_for_ID+0x1>
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <_Z33activateEventUsingCurrentSettingsP2SC+0x146>
    23ce:	10 92 50 45 	sts	0x4550, r1	; 0x804550 <g_time_needed_for_ID>
    23d2:	10 92 51 45 	sts	0x4551, r1	; 0x804551 <g_time_needed_for_ID+0x1>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8a 83       	std	Y+2, r24	; 0x02
    23e4:	9b 83       	std	Y+3, r25	; 0x03
    23e6:	ac 83       	std	Y+4, r26	; 0x04
    23e8:	bd 83       	std	Y+5, r27	; 0x05
    23ea:	20 91 58 45 	lds	r18, 0x4558	; 0x804558 <g_event_finish_epoch>
    23ee:	30 91 59 45 	lds	r19, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    23f2:	40 91 5a 45 	lds	r20, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    23f6:	50 91 5b 45 	lds	r21, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    23fa:	61 e0       	ldi	r22, 0x01	; 1
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	ac 81       	ldd	r26, Y+4	; 0x04
    2402:	bd 81       	ldd	r27, Y+5	; 0x05
    2404:	28 17       	cp	r18, r24
    2406:	39 07       	cpc	r19, r25
    2408:	4a 07       	cpc	r20, r26
    240a:	5b 07       	cpc	r21, r27
    240c:	08 f0       	brcs	.+2      	; 0x2410 <_Z33activateEventUsingCurrentSettingsP2SC+0x180>
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	66 23       	and	r22, r22
    2412:	59 f0       	breq	.+22     	; 0x242a <_Z33activateEventUsingCurrentSettingsP2SC+0x19a>
    2414:	89 89       	ldd	r24, Y+17	; 0x11
    2416:	9a 89       	ldd	r25, Y+18	; 0x12
    2418:	89 2b       	or	r24, r25
    241a:	09 f4       	brne	.+2      	; 0x241e <_Z33activateEventUsingCurrentSettingsP2SC+0x18e>
    241c:	65 c1       	rjmp	.+714    	; 0x26e8 <_Z33activateEventUsingCurrentSettingsP2SC+0x458>
    241e:	89 89       	ldd	r24, Y+17	; 0x11
    2420:	9a 89       	ldd	r25, Y+18	; 0x12
    2422:	2a ef       	ldi	r18, 0xFA	; 250
    2424:	fc 01       	movw	r30, r24
    2426:	20 83       	st	Z, r18
    2428:	5f c1       	rjmp	.+702    	; 0x26e8 <_Z33activateEventUsingCurrentSettingsP2SC+0x458>
    242a:	20 91 54 45 	lds	r18, 0x4554	; 0x804554 <g_event_start_epoch>
    242e:	30 91 55 45 	lds	r19, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2432:	40 91 56 45 	lds	r20, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2436:	50 91 57 45 	lds	r21, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	ac 81       	ldd	r26, Y+4	; 0x04
    2440:	bd 81       	ldd	r27, Y+5	; 0x05
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 a9 42 	call	0x8552	; 0x8552 <_Z7timeDifmm>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	8e 83       	std	Y+6, r24	; 0x06
    2450:	9f 83       	std	Y+7, r25	; 0x07
    2452:	a8 87       	std	Y+8, r26	; 0x08
    2454:	b9 87       	std	Y+9, r27	; 0x09
    2456:	8e 81       	ldd	r24, Y+6	; 0x06
    2458:	9f 81       	ldd	r25, Y+7	; 0x07
    245a:	a8 85       	ldd	r26, Y+8	; 0x08
    245c:	b9 85       	ldd	r27, Y+9	; 0x09
    245e:	bb 23       	and	r27, r27
    2460:	0c f4       	brge	.+2      	; 0x2464 <_Z33activateEventUsingCurrentSettingsP2SC+0x1d4>
    2462:	2e c1       	rjmp	.+604    	; 0x26c0 <_Z33activateEventUsingCurrentSettingsP2SC+0x430>
    2464:	19 82       	std	Y+1, r1	; 0x01
    2466:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    246a:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    246e:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    2472:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    2476:	82 0f       	add	r24, r18
    2478:	93 1f       	adc	r25, r19
    247a:	8a 87       	std	Y+10, r24	; 0x0a
    247c:	9b 87       	std	Y+11, r25	; 0x0b
    247e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2480:	9b 85       	ldd	r25, Y+11	; 0x0b
    2482:	9c 01       	movw	r18, r24
    2484:	99 0f       	add	r25, r25
    2486:	44 0b       	sbc	r20, r20
    2488:	55 0b       	sbc	r21, r21
    248a:	8e 81       	ldd	r24, Y+6	; 0x06
    248c:	9f 81       	ldd	r25, Y+7	; 0x07
    248e:	a8 85       	ldd	r26, Y+8	; 0x08
    2490:	b9 85       	ldd	r27, Y+9	; 0x09
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__divmodsi4>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8c 87       	std	Y+12, r24	; 0x0c
    24a0:	9d 87       	std	Y+13, r25	; 0x0d
    24a2:	20 91 52 45 	lds	r18, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    24a6:	30 91 53 45 	lds	r19, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    24aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    24ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    24ae:	a9 01       	movw	r20, r18
    24b0:	48 1b       	sub	r20, r24
    24b2:	59 0b       	sbc	r21, r25
    24b4:	ca 01       	movw	r24, r20
    24b6:	8e 87       	std	Y+14, r24	; 0x0e
    24b8:	9f 87       	std	Y+15, r25	; 0x0f
    24ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    24bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    24be:	18 16       	cp	r1, r24
    24c0:	19 06       	cpc	r1, r25
    24c2:	0c f4       	brge	.+2      	; 0x24c6 <_Z33activateEventUsingCurrentSettingsP2SC+0x236>
    24c4:	a8 c0       	rjmp	.+336    	; 0x2616 <_Z33activateEventUsingCurrentSettingsP2SC+0x386>
    24c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ca:	22 27       	eor	r18, r18
    24cc:	33 27       	eor	r19, r19
    24ce:	28 1b       	sub	r18, r24
    24d0:	39 0b       	sbc	r19, r25
    24d2:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    24d6:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	0c f4       	brge	.+2      	; 0x24e4 <_Z33activateEventUsingCurrentSettingsP2SC+0x254>
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	44 23       	and	r20, r20
    24e6:	09 f4       	brne	.+2      	; 0x24ea <_Z33activateEventUsingCurrentSettingsP2SC+0x25a>
    24e8:	41 c0       	rjmp	.+130    	; 0x256c <_Z33activateEventUsingCurrentSettingsP2SC+0x2dc>
    24ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    24ec:	3b 85       	ldd	r19, Y+11	; 0x0b
    24ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    24f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24f2:	82 0f       	add	r24, r18
    24f4:	93 1f       	adc	r25, r19
    24f6:	91 95       	neg	r25
    24f8:	81 95       	neg	r24
    24fa:	91 09       	sbc	r25, r1
    24fc:	09 2e       	mov	r0, r25
    24fe:	00 0c       	add	r0, r0
    2500:	aa 0b       	sbc	r26, r26
    2502:	bb 0b       	sbc	r27, r27
    2504:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    2508:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    250c:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    2510:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    2514:	89 89       	ldd	r24, Y+17	; 0x11
    2516:	9a 89       	ldd	r25, Y+18	; 0x12
    2518:	89 2b       	or	r24, r25
    251a:	29 f0       	breq	.+10     	; 0x2526 <_Z33activateEventUsingCurrentSettingsP2SC+0x296>
    251c:	89 89       	ldd	r24, Y+17	; 0x11
    251e:	9a 89       	ldd	r25, Y+18	; 0x12
    2520:	2e ef       	ldi	r18, 0xFE	; 254
    2522:	fc 01       	movw	r30, r24
    2524:	20 83       	st	Z, r18
    2526:	90 91 5c 45 	lds	r25, 0x455C	; 0x80455c <g_event_enabled>
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	89 27       	eor	r24, r25
    252e:	88 23       	and	r24, r24
    2530:	09 f4       	brne	.+2      	; 0x2534 <_Z33activateEventUsingCurrentSettingsP2SC+0x2a4>
    2532:	a6 c0       	rjmp	.+332    	; 0x2680 <_Z33activateEventUsingCurrentSettingsP2SC+0x3f0>
    2534:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    2538:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    253c:	9c 01       	movw	r18, r24
    253e:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    2542:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    2546:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    254a:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    254e:	28 1b       	sub	r18, r24
    2550:	39 0b       	sbc	r19, r25
    2552:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
    2556:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    255a:	a9 01       	movw	r20, r18
    255c:	48 1b       	sub	r20, r24
    255e:	59 0b       	sbc	r21, r25
    2560:	ca 01       	movw	r24, r20
    2562:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    2566:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    256a:	8a c0       	rjmp	.+276    	; 0x2680 <_Z33activateEventUsingCurrentSettingsP2SC+0x3f0>
    256c:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    2570:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    2574:	8e 85       	ldd	r24, Y+14	; 0x0e
    2576:	9f 85       	ldd	r25, Y+15	; 0x0f
    2578:	82 0f       	add	r24, r18
    257a:	93 1f       	adc	r25, r19
    257c:	09 2e       	mov	r0, r25
    257e:	00 0c       	add	r0, r0
    2580:	aa 0b       	sbc	r26, r26
    2582:	bb 0b       	sbc	r27, r27
    2584:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    2588:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    258c:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    2590:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	89 89       	ldd	r24, Y+17	; 0x11
    259a:	9a 89       	ldd	r25, Y+18	; 0x12
    259c:	89 2b       	or	r24, r25
    259e:	29 f0       	breq	.+10     	; 0x25aa <_Z33activateEventUsingCurrentSettingsP2SC+0x31a>
    25a0:	89 89       	ldd	r24, Y+17	; 0x11
    25a2:	9a 89       	ldd	r25, Y+18	; 0x12
    25a4:	2d ef       	ldi	r18, 0xFD	; 253
    25a6:	fc 01       	movw	r30, r24
    25a8:	20 83       	st	Z, r18
    25aa:	90 91 5c 45 	lds	r25, 0x455C	; 0x80455c <g_event_enabled>
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	89 27       	eor	r24, r25
    25b2:	88 23       	and	r24, r24
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <_Z33activateEventUsingCurrentSettingsP2SC+0x328>
    25b6:	64 c0       	rjmp	.+200    	; 0x2680 <_Z33activateEventUsingCurrentSettingsP2SC+0x3f0>
    25b8:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
    25bc:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    25c0:	9c 01       	movw	r18, r24
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    25ca:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    25ce:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    25d2:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    25d6:	61 e0       	ldi	r22, 0x01	; 1
    25d8:	28 17       	cp	r18, r24
    25da:	39 07       	cpc	r19, r25
    25dc:	4a 07       	cpc	r20, r26
    25de:	5b 07       	cpc	r21, r27
    25e0:	0c f0       	brlt	.+2      	; 0x25e4 <_Z33activateEventUsingCurrentSettingsP2SC+0x354>
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	66 23       	and	r22, r22
    25e6:	09 f4       	brne	.+2      	; 0x25ea <_Z33activateEventUsingCurrentSettingsP2SC+0x35a>
    25e8:	4b c0       	rjmp	.+150    	; 0x2680 <_Z33activateEventUsingCurrentSettingsP2SC+0x3f0>
    25ea:	80 91 1c 45 	lds	r24, 0x451C	; 0x80451c <_ZL12g_on_the_air>
    25ee:	90 91 1d 45 	lds	r25, 0x451D	; 0x80451d <_ZL12g_on_the_air+0x1>
    25f2:	a0 91 1e 45 	lds	r26, 0x451E	; 0x80451e <_ZL12g_on_the_air+0x2>
    25f6:	b0 91 1f 45 	lds	r27, 0x451F	; 0x80451f <_ZL12g_on_the_air+0x3>
    25fa:	9c 01       	movw	r18, r24
    25fc:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
    2600:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    2604:	a9 01       	movw	r20, r18
    2606:	48 1b       	sub	r20, r24
    2608:	59 0b       	sbc	r21, r25
    260a:	ca 01       	movw	r24, r20
    260c:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    2610:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    2614:	35 c0       	rjmp	.+106    	; 0x2680 <_Z33activateEventUsingCurrentSettingsP2SC+0x3f0>
    2616:	8e 85       	ldd	r24, Y+14	; 0x0e
    2618:	9f 85       	ldd	r25, Y+15	; 0x0f
    261a:	91 95       	neg	r25
    261c:	81 95       	neg	r24
    261e:	91 09       	sbc	r25, r1
    2620:	09 2e       	mov	r0, r25
    2622:	00 0c       	add	r0, r0
    2624:	aa 0b       	sbc	r26, r26
    2626:	bb 0b       	sbc	r27, r27
    2628:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    262c:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    2630:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    2634:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    2638:	89 89       	ldd	r24, Y+17	; 0x11
    263a:	9a 89       	ldd	r25, Y+18	; 0x12
    263c:	89 2b       	or	r24, r25
    263e:	29 f0       	breq	.+10     	; 0x264a <_Z33activateEventUsingCurrentSettingsP2SC+0x3ba>
    2640:	89 89       	ldd	r24, Y+17	; 0x11
    2642:	9a 89       	ldd	r25, Y+18	; 0x12
    2644:	2e ef       	ldi	r18, 0xFE	; 254
    2646:	fc 01       	movw	r30, r24
    2648:	20 83       	st	Z, r18
    264a:	90 91 5c 45 	lds	r25, 0x455C	; 0x80455c <g_event_enabled>
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	89 27       	eor	r24, r25
    2652:	88 23       	and	r24, r24
    2654:	a9 f0       	breq	.+42     	; 0x2680 <_Z33activateEventUsingCurrentSettingsP2SC+0x3f0>
    2656:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    265a:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    265e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2660:	9f 85       	ldd	r25, Y+15	; 0x0f
    2662:	82 0f       	add	r24, r18
    2664:	93 1f       	adc	r25, r19
    2666:	9c 01       	movw	r18, r24
    2668:	80 91 50 45 	lds	r24, 0x4550	; 0x804550 <g_time_needed_for_ID>
    266c:	90 91 51 45 	lds	r25, 0x4551	; 0x804551 <g_time_needed_for_ID+0x1>
    2670:	a9 01       	movw	r20, r18
    2672:	48 1b       	sub	r20, r24
    2674:	59 0b       	sbc	r21, r25
    2676:	ca 01       	movw	r24, r20
    2678:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    267c:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	88 23       	and	r24, r24
    2684:	b1 f0       	breq	.+44     	; 0x26b2 <_Z33activateEventUsingCurrentSettingsP2SC+0x422>
    2686:	f8 94       	cli
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	88 8b       	std	Y+16, r24	; 0x10
    268c:	ce 01       	movw	r24, r28
    268e:	40 96       	adiw	r24, 0x10	; 16
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	bc 01       	movw	r22, r24
    2696:	86 e2       	ldi	r24, 0x26	; 38
    2698:	95 e4       	ldi	r25, 0x45	; 69
    269a:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    269e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    26a2:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    26a6:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    26aa:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    26ae:	78 94       	sei
    26b0:	03 c0       	rjmp	.+6      	; 0x26b8 <_Z33activateEventUsingCurrentSettingsP2SC+0x428>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <_Z14keyTransmitterb>
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <g_event_commenced>
    26be:	0c c0       	rjmp	.+24     	; 0x26d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x448>
    26c0:	89 89       	ldd	r24, Y+17	; 0x11
    26c2:	9a 89       	ldd	r25, Y+18	; 0x12
    26c4:	89 2b       	or	r24, r25
    26c6:	29 f0       	breq	.+10     	; 0x26d2 <_Z33activateEventUsingCurrentSettingsP2SC+0x442>
    26c8:	89 89       	ldd	r24, Y+17	; 0x11
    26ca:	9a 89       	ldd	r25, Y+18	; 0x12
    26cc:	2f ef       	ldi	r18, 0xFF	; 255
    26ce:	fc 01       	movw	r30, r24
    26d0:	20 83       	st	Z, r18
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <_Z14keyTransmitterb>
    26d8:	10 92 5f 45 	sts	0x455F, r1	; 0x80455f <g_waiting_for_next_event>
    26dc:	8a e5       	ldi	r24, 0x5A	; 90
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_update_timeout_seconds>
    26e4:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_update_timeout_seconds+0x1>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	62 96       	adiw	r28, 0x12	; 18
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <_Z8rtc_initv>:
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <ds3231_init>
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	0e 94 c4 20 	call	0x4188	; 0x4188 <ds3231_1s_sqw>
    2708:	88 23       	and	r24, r24
    270a:	11 f0       	breq	.+4      	; 0x2710 <_Z8rtc_initv+0x1a>
    270c:	8c ef       	ldi	r24, 0xFC	; 252
    270e:	01 c0       	rjmp	.+2      	; 0x2712 <_Z8rtc_initv+0x1c>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <_Z18antennaIsConnectedv>:
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	08 95       	ret

00002728 <_Z13startEventNow19EventActionSource_t>:
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	00 d0       	rcall	.+0      	; 0x272e <_Z13startEventNow19EventActionSource_t+0x6>
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	8a 83       	std	Y+2, r24	; 0x02
    2734:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <_Z23clockConfigurationCheckv>
    2738:	89 83       	std	Y+1, r24	; 0x01
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	88 23       	and	r24, r24
    273e:	79 f4       	brne	.+30     	; 0x275e <_Z13startEventNow19EventActionSource_t+0x36>
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	31 f4       	brne	.+12     	; 0x2752 <_Z13startEventNow19EventActionSource_t+0x2a>
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z11setupForFoxP5Fox_t13EventAction_t>
    2750:	47 c0       	rjmp	.+142    	; 0x27e0 <_Z13startEventNow19EventActionSource_t+0xb8>
    2752:	63 e0       	ldi	r22, 0x03	; 3
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z11setupForFoxP5Fox_t13EventAction_t>
    275c:	41 c0       	rjmp	.+130    	; 0x27e0 <_Z13startEventNow19EventActionSource_t+0xb8>
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	82 30       	cpi	r24, 0x02	; 2
    2762:	f1 f4       	brne	.+60     	; 0x27a0 <_Z13startEventNow19EventActionSource_t+0x78>
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	82 30       	cpi	r24, 0x02	; 2
    2768:	31 f4       	brne	.+12     	; 0x2776 <_Z13startEventNow19EventActionSource_t+0x4e>
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z11setupForFoxP5Fox_t13EventAction_t>
    2774:	35 c0       	rjmp	.+106    	; 0x27e0 <_Z13startEventNow19EventActionSource_t+0xb8>
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	81 30       	cpi	r24, 0x01	; 1
    277a:	31 f0       	breq	.+12     	; 0x2788 <_Z13startEventNow19EventActionSource_t+0x60>
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	84 30       	cpi	r24, 0x04	; 4
    2780:	19 f0       	breq	.+6      	; 0x2788 <_Z13startEventNow19EventActionSource_t+0x60>
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	83 30       	cpi	r24, 0x03	; 3
    2786:	31 f4       	brne	.+12     	; 0x2794 <_Z13startEventNow19EventActionSource_t+0x6c>
    2788:	61 e0       	ldi	r22, 0x01	; 1
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z11setupForFoxP5Fox_t13EventAction_t>
    2792:	26 c0       	rjmp	.+76     	; 0x27e0 <_Z13startEventNow19EventActionSource_t+0xb8>
    2794:	63 e0       	ldi	r22, 0x03	; 3
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z11setupForFoxP5Fox_t13EventAction_t>
    279e:	20 c0       	rjmp	.+64     	; 0x27e0 <_Z13startEventNow19EventActionSource_t+0xb8>
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	82 30       	cpi	r24, 0x02	; 2
    27a4:	31 f4       	brne	.+12     	; 0x27b2 <_Z13startEventNow19EventActionSource_t+0x8a>
    27a6:	61 e0       	ldi	r22, 0x01	; 1
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z11setupForFoxP5Fox_t13EventAction_t>
    27b0:	17 c0       	rjmp	.+46     	; 0x27e0 <_Z13startEventNow19EventActionSource_t+0xb8>
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	31 f4       	brne	.+12     	; 0x27c4 <_Z13startEventNow19EventActionSource_t+0x9c>
    27b8:	62 e0       	ldi	r22, 0x02	; 2
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z11setupForFoxP5Fox_t13EventAction_t>
    27c2:	0e c0       	rjmp	.+28     	; 0x27e0 <_Z13startEventNow19EventActionSource_t+0xb8>
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	84 30       	cpi	r24, 0x04	; 4
    27c8:	31 f4       	brne	.+12     	; 0x27d6 <_Z13startEventNow19EventActionSource_t+0xae>
    27ca:	63 e0       	ldi	r22, 0x03	; 3
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z11setupForFoxP5Fox_t13EventAction_t>
    27d4:	05 c0       	rjmp	.+10     	; 0x27e0 <_Z13startEventNow19EventActionSource_t+0xb8>
    27d6:	63 e0       	ldi	r22, 0x03	; 3
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z11setupForFoxP5Fox_t13EventAction_t>
    27e0:	00 00       	nop
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	08 95       	ret

000027ec <_Z11setupForFoxP5Fox_t13EventAction_t>:
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	2f 97       	sbiw	r28, 0x0f	; 15
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	8d 87       	std	Y+13, r24	; 0x0d
    27fc:	9e 87       	std	Y+14, r25	; 0x0e
    27fe:	6f 87       	std	Y+15, r22	; 0x0f
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	8d 85       	ldd	r24, Y+13	; 0x0d
    2806:	9e 85       	ldd	r25, Y+14	; 0x0e
    2808:	89 2b       	or	r24, r25
    280a:	61 f0       	breq	.+24     	; 0x2824 <_Z11setupForFoxP5Fox_t13EventAction_t+0x38>
    280c:	8d 85       	ldd	r24, Y+13	; 0x0d
    280e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2810:	fc 01       	movw	r30, r24
    2812:	80 81       	ld	r24, Z
    2814:	82 31       	cpi	r24, 0x12	; 18
    2816:	31 f0       	breq	.+12     	; 0x2824 <_Z11setupForFoxP5Fox_t13EventAction_t+0x38>
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	fc 01       	movw	r30, r24
    281e:	80 81       	ld	r24, Z
    2820:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <g_fox>
    2824:	ce 01       	movw	r24, r28
    2826:	07 96       	adiw	r24, 0x07	; 7
    2828:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <ds3231_get_epoch>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8a 83       	std	Y+2, r24	; 0x02
    2832:	9b 83       	std	Y+3, r25	; 0x03
    2834:	ac 83       	std	Y+4, r26	; 0x04
    2836:	bd 83       	std	Y+5, r27	; 0x05
    2838:	8f 81       	ldd	r24, Y+7	; 0x07
    283a:	88 23       	and	r24, r24
    283c:	41 f4       	brne	.+16     	; 0x284e <_Z11setupForFoxP5Fox_t13EventAction_t+0x62>
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	9b 81       	ldd	r25, Y+3	; 0x03
    2842:	ac 81       	ldd	r26, Y+4	; 0x04
    2844:	bd 81       	ldd	r27, Y+5	; 0x05
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 65 01 	call	0x2ca	; 0x2ca <set_system_time>
    284e:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <g_event_commenced>
    2852:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <g_event_enabled>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	0e 94 45 09 	call	0x128a	; 0x128a <LED_set_level>
    285c:	80 91 1a 40 	lds	r24, 0x401A	; 0x80401a <g_fox>
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	09 2e       	mov	r0, r25
    2866:	00 0c       	add	r0, r0
    2868:	aa 0b       	sbc	r26, r26
    286a:	bb 0b       	sbc	r27, r27
    286c:	41 e0       	ldi	r20, 0x01	; 1
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	20 e1       	ldi	r18, 0x10	; 16
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	84 1b       	sub	r24, r20
    2876:	95 0b       	sbc	r25, r21
    2878:	28 17       	cp	r18, r24
    287a:	39 07       	cpc	r19, r25
    287c:	08 f4       	brcc	.+2      	; 0x2880 <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>
    287e:	a1 c1       	rjmp	.+834    	; 0x2bc2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3d6>
    2880:	8a 55       	subi	r24, 0x5A	; 90
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	fc 01       	movw	r30, r24
    2886:	0c 94 b9 45 	jmp	0x8b72	; 0x8b72 <__tablejump2__>
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	88 23       	and	r24, r24
    288e:	89 f0       	breq	.+34     	; 0x28b2 <_Z11setupForFoxP5Fox_t13EventAction_t+0xc6>
    2890:	8d e4       	ldi	r24, 0x4D	; 77
    2892:	9f e4       	ldi	r25, 0x4F	; 79
    2894:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2898:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    289c:	85 e4       	ldi	r24, 0x45	; 69
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	80 93 28 45 	sts	0x4528, r24	; 0x804528 <g_messages_text+0x2>
    28a4:	90 93 29 45 	sts	0x4529, r25	; 0x804529 <g_messages_text+0x3>
    28a8:	19 82       	std	Y+1, r1	; 0x01
    28aa:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    28ae:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	88 23       	and	r24, r24
    28b6:	99 f0       	breq	.+38     	; 0x28de <_Z11setupForFoxP5Fox_t13EventAction_t+0xf2>
    28b8:	8d e4       	ldi	r24, 0x4D	; 77
    28ba:	9f e4       	ldi	r25, 0x4F	; 79
    28bc:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    28c0:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    28c4:	89 e4       	ldi	r24, 0x49	; 73
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	80 93 28 45 	sts	0x4528, r24	; 0x804528 <g_messages_text+0x2>
    28cc:	90 93 29 45 	sts	0x4529, r25	; 0x804529 <g_messages_text+0x3>
    28d0:	19 82       	std	Y+1, r1	; 0x01
    28d2:	8c e3       	ldi	r24, 0x3C	; 60
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    28da:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	88 23       	and	r24, r24
    28e2:	99 f0       	breq	.+38     	; 0x290a <_Z11setupForFoxP5Fox_t13EventAction_t+0x11e>
    28e4:	8d e4       	ldi	r24, 0x4D	; 77
    28e6:	9f e4       	ldi	r25, 0x4F	; 79
    28e8:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    28ec:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    28f0:	83 e5       	ldi	r24, 0x53	; 83
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	80 93 28 45 	sts	0x4528, r24	; 0x804528 <g_messages_text+0x2>
    28f8:	90 93 29 45 	sts	0x4529, r25	; 0x804529 <g_messages_text+0x3>
    28fc:	19 82       	std	Y+1, r1	; 0x01
    28fe:	88 e7       	ldi	r24, 0x78	; 120
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2906:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	88 23       	and	r24, r24
    290e:	99 f0       	breq	.+38     	; 0x2936 <_Z11setupForFoxP5Fox_t13EventAction_t+0x14a>
    2910:	8d e4       	ldi	r24, 0x4D	; 77
    2912:	9f e4       	ldi	r25, 0x4F	; 79
    2914:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2918:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    291c:	88 e4       	ldi	r24, 0x48	; 72
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	80 93 28 45 	sts	0x4528, r24	; 0x804528 <g_messages_text+0x2>
    2924:	90 93 29 45 	sts	0x4529, r25	; 0x804529 <g_messages_text+0x3>
    2928:	19 82       	std	Y+1, r1	; 0x01
    292a:	84 eb       	ldi	r24, 0xB4	; 180
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2932:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	88 23       	and	r24, r24
    293a:	91 f0       	breq	.+36     	; 0x2960 <_Z11setupForFoxP5Fox_t13EventAction_t+0x174>
    293c:	8d e4       	ldi	r24, 0x4D	; 77
    293e:	9f e4       	ldi	r25, 0x4F	; 79
    2940:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2944:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2948:	85 e3       	ldi	r24, 0x35	; 53
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	80 93 28 45 	sts	0x4528, r24	; 0x804528 <g_messages_text+0x2>
    2950:	90 93 29 45 	sts	0x4529, r25	; 0x804529 <g_messages_text+0x3>
    2954:	80 ef       	ldi	r24, 0xF0	; 240
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    295c:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	88 87       	std	Y+8, r24	; 0x08
    2964:	ce 01       	movw	r24, r28
    2966:	08 96       	adiw	r24, 0x08	; 8
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	bc 01       	movw	r22, r24
    296e:	86 e2       	ldi	r24, 0x26	; 38
    2970:	95 e4       	ldi	r25, 0x45	; 69
    2972:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    2976:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    297a:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    297e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2982:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2986:	8c e3       	ldi	r24, 0x3C	; 60
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    298e:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    2992:	8c e3       	ldi	r24, 0x3C	; 60
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    299a:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    299e:	80 ef       	ldi	r24, 0xF0	; 240
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    29a6:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    29aa:	41 c1       	rjmp	.+642    	; 0x2c2e <_Z11setupForFoxP5Fox_t13EventAction_t+0x442>
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	88 23       	and	r24, r24
    29b0:	69 f0       	breq	.+26     	; 0x29cc <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e0>
    29b2:	8d e4       	ldi	r24, 0x4D	; 77
    29b4:	95 e4       	ldi	r25, 0x45	; 69
    29b6:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    29ba:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    29be:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    29c2:	19 82       	std	Y+1, r1	; 0x01
    29c4:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    29c8:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	88 23       	and	r24, r24
    29d0:	79 f0       	breq	.+30     	; 0x29f0 <_Z11setupForFoxP5Fox_t13EventAction_t+0x204>
    29d2:	8d e4       	ldi	r24, 0x4D	; 77
    29d4:	99 e4       	ldi	r25, 0x49	; 73
    29d6:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    29da:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    29de:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    29e2:	19 82       	std	Y+1, r1	; 0x01
    29e4:	8c e0       	ldi	r24, 0x0C	; 12
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    29ec:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	88 23       	and	r24, r24
    29f4:	79 f0       	breq	.+30     	; 0x2a14 <_Z11setupForFoxP5Fox_t13EventAction_t+0x228>
    29f6:	8d e4       	ldi	r24, 0x4D	; 77
    29f8:	93 e5       	ldi	r25, 0x53	; 83
    29fa:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    29fe:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2a02:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    2a06:	19 82       	std	Y+1, r1	; 0x01
    2a08:	88 e1       	ldi	r24, 0x18	; 24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2a10:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	88 23       	and	r24, r24
    2a18:	79 f0       	breq	.+30     	; 0x2a38 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24c>
    2a1a:	8d e4       	ldi	r24, 0x4D	; 77
    2a1c:	98 e4       	ldi	r25, 0x48	; 72
    2a1e:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2a22:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2a26:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    2a2a:	19 82       	std	Y+1, r1	; 0x01
    2a2c:	84 e2       	ldi	r24, 0x24	; 36
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2a34:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	88 23       	and	r24, r24
    2a3c:	71 f0       	breq	.+28     	; 0x2a5a <_Z11setupForFoxP5Fox_t13EventAction_t+0x26e>
    2a3e:	8d e4       	ldi	r24, 0x4D	; 77
    2a40:	95 e3       	ldi	r25, 0x35	; 53
    2a42:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2a46:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2a4a:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    2a4e:	80 e3       	ldi	r24, 0x30	; 48
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2a56:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	89 87       	std	Y+9, r24	; 0x09
    2a5e:	ce 01       	movw	r24, r28
    2a60:	09 96       	adiw	r24, 0x09	; 9
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	bc 01       	movw	r22, r24
    2a68:	86 e2       	ldi	r24, 0x26	; 38
    2a6a:	95 e4       	ldi	r25, 0x45	; 69
    2a6c:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    2a70:	88 e0       	ldi	r24, 0x08	; 8
    2a72:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    2a76:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2a7a:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    2a7e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2a82:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2a86:	88 e5       	ldi	r24, 0x58	; 88
    2a88:	92 e0       	ldi	r25, 0x02	; 2
    2a8a:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    2a8e:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    2a92:	8c e0       	ldi	r24, 0x0C	; 12
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    2a9a:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    2a9e:	80 e3       	ldi	r24, 0x30	; 48
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    2aa6:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    2aaa:	c1 c0       	rjmp	.+386    	; 0x2c2e <_Z11setupForFoxP5Fox_t13EventAction_t+0x442>
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	88 23       	and	r24, r24
    2ab0:	69 f0       	breq	.+26     	; 0x2acc <_Z11setupForFoxP5Fox_t13EventAction_t+0x2e0>
    2ab2:	8f e4       	ldi	r24, 0x4F	; 79
    2ab4:	95 e4       	ldi	r25, 0x45	; 69
    2ab6:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2aba:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2abe:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    2ac2:	19 82       	std	Y+1, r1	; 0x01
    2ac4:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    2ac8:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	88 23       	and	r24, r24
    2ad0:	79 f0       	breq	.+30     	; 0x2af0 <_Z11setupForFoxP5Fox_t13EventAction_t+0x304>
    2ad2:	8f e4       	ldi	r24, 0x4F	; 79
    2ad4:	99 e4       	ldi	r25, 0x49	; 73
    2ad6:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2ada:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2ade:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    2ae2:	19 82       	std	Y+1, r1	; 0x01
    2ae4:	8c e0       	ldi	r24, 0x0C	; 12
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2aec:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	88 23       	and	r24, r24
    2af4:	79 f0       	breq	.+30     	; 0x2b14 <_Z11setupForFoxP5Fox_t13EventAction_t+0x328>
    2af6:	8f e4       	ldi	r24, 0x4F	; 79
    2af8:	93 e5       	ldi	r25, 0x53	; 83
    2afa:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2afe:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2b02:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    2b06:	19 82       	std	Y+1, r1	; 0x01
    2b08:	88 e1       	ldi	r24, 0x18	; 24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2b10:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	88 23       	and	r24, r24
    2b18:	79 f0       	breq	.+30     	; 0x2b38 <_Z11setupForFoxP5Fox_t13EventAction_t+0x34c>
    2b1a:	8f e4       	ldi	r24, 0x4F	; 79
    2b1c:	98 e4       	ldi	r25, 0x48	; 72
    2b1e:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2b22:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2b26:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    2b2a:	19 82       	std	Y+1, r1	; 0x01
    2b2c:	84 e2       	ldi	r24, 0x24	; 36
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2b34:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	88 23       	and	r24, r24
    2b3c:	71 f0       	breq	.+28     	; 0x2b5a <_Z11setupForFoxP5Fox_t13EventAction_t+0x36e>
    2b3e:	8f e4       	ldi	r24, 0x4F	; 79
    2b40:	95 e3       	ldi	r25, 0x35	; 53
    2b42:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2b46:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2b4a:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    2b4e:	80 e3       	ldi	r24, 0x30	; 48
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <g_intra_cycle_delay_time>
    2b56:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	8a 87       	std	Y+10, r24	; 0x0a
    2b5e:	ce 01       	movw	r24, r28
    2b60:	0a 96       	adiw	r24, 0x0a	; 10
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	bc 01       	movw	r22, r24
    2b68:	86 e2       	ldi	r24, 0x26	; 38
    2b6a:	95 e4       	ldi	r25, 0x45	; 69
    2b6c:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    2b70:	8f e0       	ldi	r24, 0x0F	; 15
    2b72:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    2b76:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2b7a:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    2b7e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2b82:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2b86:	88 e5       	ldi	r24, 0x58	; 88
    2b88:	92 e0       	ldi	r25, 0x02	; 2
    2b8a:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    2b8e:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    2b92:	8c e0       	ldi	r24, 0x0C	; 12
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    2b9a:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    2b9e:	80 e3       	ldi	r24, 0x30	; 48
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    2ba6:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    2baa:	41 c0       	rjmp	.+130    	; 0x2c2e <_Z11setupForFoxP5Fox_t13EventAction_t+0x442>
    2bac:	83 e5       	ldi	r24, 0x53	; 83
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2bb4:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2bb8:	19 82       	std	Y+1, r1	; 0x01
    2bba:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    2bbe:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	88 23       	and	r24, r24
    2bc6:	41 f0       	breq	.+16     	; 0x2bd8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3ec>
    2bc8:	8d e4       	ldi	r24, 0x4D	; 77
    2bca:	9f e4       	ldi	r25, 0x4F	; 79
    2bcc:	80 93 26 45 	sts	0x4526, r24	; 0x804526 <g_messages_text>
    2bd0:	90 93 27 45 	sts	0x4527, r25	; 0x804527 <g_messages_text+0x1>
    2bd4:	10 92 28 45 	sts	0x4528, r1	; 0x804528 <g_messages_text+0x2>
    2bd8:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <g_intra_cycle_delay_time>
    2bdc:	10 92 53 45 	sts	0x4553, r1	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	8b 87       	std	Y+11, r24	; 0x0b
    2be4:	ce 01       	movw	r24, r28
    2be6:	0b 96       	adiw	r24, 0x0b	; 11
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	bc 01       	movw	r22, r24
    2bee:	86 e2       	ldi	r24, 0x26	; 38
    2bf0:	95 e4       	ldi	r25, 0x45	; 69
    2bf2:	0e 94 b2 2c 	call	0x5964	; 0x5964 <_Z9makeMorsePcPbS0_>
    2bf6:	88 e0       	ldi	r24, 0x08	; 8
    2bf8:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    2bfc:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2c00:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z13throttleValueh>
    2c04:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2c08:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2c0c:	88 e5       	ldi	r24, 0x58	; 88
    2c0e:	92 e0       	ldi	r25, 0x02	; 2
    2c10:	80 93 20 45 	sts	0x4520, r24	; 0x804520 <_ZL26g_sendID_seconds_countdown>
    2c14:	90 93 21 45 	sts	0x4521, r25	; 0x804521 <_ZL26g_sendID_seconds_countdown+0x1>
    2c18:	8c e3       	ldi	r24, 0x3C	; 60
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    2c20:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    2c24:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    2c28:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    2c2c:	00 00       	nop
    2c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c30:	88 23       	and	r24, r24
    2c32:	71 f4       	brne	.+28     	; 0x2c50 <_Z11setupForFoxP5Fox_t13EventAction_t+0x464>
    2c34:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <g_event_commenced>
    2c38:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <g_event_enabled>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <_Z14keyTransmitterb>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	0e 94 45 09 	call	0x128a	; 0x128a <LED_set_level>
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	0e 94 d4 3e 	call	0x7da8	; 0x7da8 <_Z18powerToTransmitterb>
    2c4e:	86 c0       	rjmp	.+268    	; 0x2d5c <_Z11setupForFoxP5Fox_t13EventAction_t+0x570>
    2c50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c52:	81 30       	cpi	r24, 0x01	; 1
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <_Z11setupForFoxP5Fox_t13EventAction_t+0x46c>
    2c56:	43 c0       	rjmp	.+134    	; 0x2cde <_Z11setupForFoxP5Fox_t13EventAction_t+0x4f2>
    2c58:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    2c5c:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2c60:	89 2b       	or	r24, r25
    2c62:	61 f0       	breq	.+24     	; 0x2c7c <_Z11setupForFoxP5Fox_t13EventAction_t+0x490>
    2c64:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <g_intra_cycle_delay_time>
    2c68:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <g_intra_cycle_delay_time+0x1>
    2c6c:	91 95       	neg	r25
    2c6e:	81 95       	neg	r24
    2c70:	91 09       	sbc	r25, r1
    2c72:	09 2e       	mov	r0, r25
    2c74:	00 0c       	add	r0, r0
    2c76:	aa 0b       	sbc	r26, r26
    2c78:	bb 0b       	sbc	r27, r27
    2c7a:	08 c0       	rjmp	.+16     	; 0x2c8c <_Z11setupForFoxP5Fox_t13EventAction_t+0x4a0>
    2c7c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    2c80:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    2c84:	09 2e       	mov	r0, r25
    2c86:	00 0c       	add	r0, r0
    2c88:	aa 0b       	sbc	r26, r26
    2c8a:	bb 0b       	sbc	r27, r27
    2c8c:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    2c90:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    2c94:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    2c98:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    2c9c:	10 92 13 40 	sts	0x4013, r1	; 0x804013 <g_use_rtc_to_time_event>
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <g_event_commenced>
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 5c 45 	sts	0x455C, r24	; 0x80455c <g_event_enabled>
    2cac:	8e ef       	ldi	r24, 0xFE	; 254
    2cae:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    2cb2:	80 91 60 45 	lds	r24, 0x4560	; 0x804560 <_ZL13g_go_to_sleep>
    2cb6:	88 23       	and	r24, r24
    2cb8:	31 f0       	breq	.+12     	; 0x2cc6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4da>
    2cba:	80 91 25 45 	lds	r24, 0x4525	; 0x804525 <_ZL11g_sleepType>
    2cbe:	88 23       	and	r24, r24
    2cc0:	11 f0       	breq	.+4      	; 0x2cc6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4da>
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	01 c0       	rjmp	.+2      	; 0x2cc8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4dc>
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	88 23       	and	r24, r24
    2cca:	29 f0       	breq	.+10     	; 0x2cd6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4ea>
    2ccc:	83 e0       	ldi	r24, 0x03	; 3
    2cce:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    2cd2:	10 92 60 45 	sts	0x4560, r1	; 0x804560 <_ZL13g_go_to_sleep>
    2cd6:	8c e3       	ldi	r24, 0x3C	; 60
    2cd8:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <_Z11setupForFoxP5Fox_t13EventAction_t+0x570>
    2cde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce0:	82 30       	cpi	r24, 0x02	; 2
    2ce2:	89 f5       	brne	.+98     	; 0x2d46 <_Z11setupForFoxP5Fox_t13EventAction_t+0x55a>
    2ce4:	10 92 13 40 	sts	0x4013, r1	; 0x804013 <g_use_rtc_to_time_event>
    2ce8:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    2cec:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    2cf0:	09 2e       	mov	r0, r25
    2cf2:	00 0c       	add	r0, r0
    2cf4:	aa 0b       	sbc	r26, r26
    2cf6:	bb 0b       	sbc	r27, r27
    2cf8:	80 93 1c 45 	sts	0x451C, r24	; 0x80451c <_ZL12g_on_the_air>
    2cfc:	90 93 1d 45 	sts	0x451D, r25	; 0x80451d <_ZL12g_on_the_air+0x1>
    2d00:	a0 93 1e 45 	sts	0x451E, r26	; 0x80451e <_ZL12g_on_the_air+0x2>
    2d04:	b0 93 1f 45 	sts	0x451F, r27	; 0x80451f <_ZL12g_on_the_air+0x3>
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <g_event_commenced>
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	80 93 5c 45 	sts	0x455C, r24	; 0x80455c <g_event_enabled>
    2d14:	8d ef       	ldi	r24, 0xFD	; 253
    2d16:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <_ZL18g_last_status_code>
    2d1a:	80 91 60 45 	lds	r24, 0x4560	; 0x804560 <_ZL13g_go_to_sleep>
    2d1e:	88 23       	and	r24, r24
    2d20:	31 f0       	breq	.+12     	; 0x2d2e <_Z11setupForFoxP5Fox_t13EventAction_t+0x542>
    2d22:	80 91 25 45 	lds	r24, 0x4525	; 0x804525 <_ZL11g_sleepType>
    2d26:	88 23       	and	r24, r24
    2d28:	11 f0       	breq	.+4      	; 0x2d2e <_Z11setupForFoxP5Fox_t13EventAction_t+0x542>
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	01 c0       	rjmp	.+2      	; 0x2d30 <_Z11setupForFoxP5Fox_t13EventAction_t+0x544>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	88 23       	and	r24, r24
    2d32:	29 f0       	breq	.+10     	; 0x2d3e <_Z11setupForFoxP5Fox_t13EventAction_t+0x552>
    2d34:	83 e0       	ldi	r24, 0x03	; 3
    2d36:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <_ZL11g_sleepType>
    2d3a:	10 92 60 45 	sts	0x4560, r1	; 0x804560 <_ZL13g_go_to_sleep>
    2d3e:	8c e3       	ldi	r24, 0x3C	; 60
    2d40:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2d44:	0b c0       	rjmp	.+22     	; 0x2d5c <_Z11setupForFoxP5Fox_t13EventAction_t+0x570>
    2d46:	ce 01       	movw	r24, r28
    2d48:	0c 96       	adiw	r24, 0x0c	; 12
    2d4a:	0e 94 1d 11 	call	0x223a	; 0x223a <_Z11launchEventP2SC>
    2d4e:	8e 83       	std	Y+6, r24	; 0x06
    2d50:	8e 81       	ldd	r24, Y+6	; 0x06
    2d52:	88 23       	and	r24, r24
    2d54:	19 f4       	brne	.+6      	; 0x2d5c <_Z11setupForFoxP5Fox_t13EventAction_t+0x570>
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_use_rtc_to_time_event>
    2d5c:	00 00       	nop
    2d5e:	2f 96       	adiw	r28, 0x0f	; 15
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	08 95       	ret

00002d6a <_Z23clockConfigurationCheckv>:
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <_Z23clockConfigurationCheckv+0x6>
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <_Z23clockConfigurationCheckv+0x8>
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <time>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	9a 83       	std	Y+2, r25	; 0x02
    2d86:	ab 83       	std	Y+3, r26	; 0x03
    2d88:	bc 83       	std	Y+4, r27	; 0x04
    2d8a:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    2d8e:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    2d92:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    2d96:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    2d9a:	81 15       	cp	r24, r1
    2d9c:	96 46       	sbci	r25, 0x66	; 102
    2d9e:	ae 4e       	sbci	r26, 0xEE	; 238
    2da0:	bf 45       	sbci	r27, 0x5F	; 95
    2da2:	b0 f0       	brcs	.+44     	; 0x2dd0 <_Z23clockConfigurationCheckv+0x66>
    2da4:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    2da8:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2dac:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2db0:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2db4:	81 15       	cp	r24, r1
    2db6:	96 46       	sbci	r25, 0x66	; 102
    2db8:	ae 4e       	sbci	r26, 0xEE	; 238
    2dba:	bf 45       	sbci	r27, 0x5F	; 95
    2dbc:	48 f0       	brcs	.+18     	; 0x2dd0 <_Z23clockConfigurationCheckv+0x66>
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc2:	ab 81       	ldd	r26, Y+3	; 0x03
    2dc4:	bc 81       	ldd	r27, Y+4	; 0x04
    2dc6:	81 15       	cp	r24, r1
    2dc8:	96 46       	sbci	r25, 0x66	; 102
    2dca:	ae 4e       	sbci	r26, 0xEE	; 238
    2dcc:	bf 45       	sbci	r27, 0x5F	; 95
    2dce:	10 f4       	brcc	.+4      	; 0x2dd4 <_Z23clockConfigurationCheckv+0x6a>
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	01 c0       	rjmp	.+2      	; 0x2dd6 <_Z23clockConfigurationCheckv+0x6c>
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	88 23       	and	r24, r24
    2dd8:	11 f0       	breq	.+4      	; 0x2dde <_Z23clockConfigurationCheckv+0x74>
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	5a c0       	rjmp	.+180    	; 0x2e92 <_Z23clockConfigurationCheckv+0x128>
    2dde:	20 91 58 45 	lds	r18, 0x4558	; 0x804558 <g_event_finish_epoch>
    2de2:	30 91 59 45 	lds	r19, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    2de6:	40 91 5a 45 	lds	r20, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    2dea:	50 91 5b 45 	lds	r21, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    2dee:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    2df2:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2df6:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2dfa:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2dfe:	61 e0       	ldi	r22, 0x01	; 1
    2e00:	82 17       	cp	r24, r18
    2e02:	93 07       	cpc	r25, r19
    2e04:	a4 07       	cpc	r26, r20
    2e06:	b5 07       	cpc	r27, r21
    2e08:	08 f4       	brcc	.+2      	; 0x2e0c <_Z23clockConfigurationCheckv+0xa2>
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	66 23       	and	r22, r22
    2e0e:	11 f0       	breq	.+4      	; 0x2e14 <_Z23clockConfigurationCheckv+0xaa>
    2e10:	82 e0       	ldi	r24, 0x02	; 2
    2e12:	3f c0       	rjmp	.+126    	; 0x2e92 <_Z23clockConfigurationCheckv+0x128>
    2e14:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    2e18:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    2e1c:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    2e20:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    2e24:	61 e0       	ldi	r22, 0x01	; 1
    2e26:	29 81       	ldd	r18, Y+1	; 0x01
    2e28:	3a 81       	ldd	r19, Y+2	; 0x02
    2e2a:	4b 81       	ldd	r20, Y+3	; 0x03
    2e2c:	5c 81       	ldd	r21, Y+4	; 0x04
    2e2e:	82 17       	cp	r24, r18
    2e30:	93 07       	cpc	r25, r19
    2e32:	a4 07       	cpc	r26, r20
    2e34:	b5 07       	cpc	r27, r21
    2e36:	08 f0       	brcs	.+2      	; 0x2e3a <_Z23clockConfigurationCheckv+0xd0>
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	66 23       	and	r22, r22
    2e3c:	11 f0       	breq	.+4      	; 0x2e42 <_Z23clockConfigurationCheckv+0xd8>
    2e3e:	82 e0       	ldi	r24, 0x02	; 2
    2e40:	28 c0       	rjmp	.+80     	; 0x2e92 <_Z23clockConfigurationCheckv+0x128>
    2e42:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    2e46:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    2e4a:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    2e4e:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    2e52:	61 e0       	ldi	r22, 0x01	; 1
    2e54:	29 81       	ldd	r18, Y+1	; 0x01
    2e56:	3a 81       	ldd	r19, Y+2	; 0x02
    2e58:	4b 81       	ldd	r20, Y+3	; 0x03
    2e5a:	5c 81       	ldd	r21, Y+4	; 0x04
    2e5c:	82 17       	cp	r24, r18
    2e5e:	93 07       	cpc	r25, r19
    2e60:	a4 07       	cpc	r26, r20
    2e62:	b5 07       	cpc	r27, r21
    2e64:	08 f0       	brcs	.+2      	; 0x2e68 <_Z23clockConfigurationCheckv+0xfe>
    2e66:	60 e0       	ldi	r22, 0x00	; 0
    2e68:	66 23       	and	r22, r22
    2e6a:	51 f0       	breq	.+20     	; 0x2e80 <_Z23clockConfigurationCheckv+0x116>
    2e6c:	90 91 5c 45 	lds	r25, 0x455C	; 0x80455c <g_event_enabled>
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	89 27       	eor	r24, r25
    2e74:	88 23       	and	r24, r24
    2e76:	11 f0       	breq	.+4      	; 0x2e7c <_Z23clockConfigurationCheckv+0x112>
    2e78:	83 e0       	ldi	r24, 0x03	; 3
    2e7a:	0b c0       	rjmp	.+22     	; 0x2e92 <_Z23clockConfigurationCheckv+0x128>
    2e7c:	85 e0       	ldi	r24, 0x05	; 5
    2e7e:	09 c0       	rjmp	.+18     	; 0x2e92 <_Z23clockConfigurationCheckv+0x128>
    2e80:	90 91 5c 45 	lds	r25, 0x455C	; 0x80455c <g_event_enabled>
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	89 27       	eor	r24, r25
    2e88:	88 23       	and	r24, r24
    2e8a:	11 f0       	breq	.+4      	; 0x2e90 <_Z23clockConfigurationCheckv+0x126>
    2e8c:	84 e0       	ldi	r24, 0x04	; 4
    2e8e:	01 c0       	rjmp	.+2      	; 0x2e92 <_Z23clockConfigurationCheckv+0x128>
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	24 96       	adiw	r28, 0x04	; 4
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	08 95       	ret

00002e9e <_Z41__static_initialization_and_destruction_0ii>:
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <_Z41__static_initialization_and_destruction_0ii+0x6>
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    2eac:	9a 83       	std	Y+2, r25	; 0x02
    2eae:	6b 83       	std	Y+3, r22	; 0x03
    2eb0:	7c 83       	std	Y+4, r23	; 0x04
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	41 f4       	brne	.+16     	; 0x2eca <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2eba:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebe:	01 96       	adiw	r24, 0x01	; 1
    2ec0:	21 f4       	brne	.+8      	; 0x2eca <_Z41__static_initialization_and_destruction_0ii+0x2c>
//static volatile bool g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { false, false, false, false, false };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    2ec2:	86 e6       	ldi	r24, 0x66	; 102
    2ec4:	95 e4       	ldi	r25, 0x45	; 69
    2ec6:	0e 94 27 21 	call	0x424e	; 0x424e <_ZN13EepromManagerC1Ev>
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	89 2b       	or	r24, r25
    2ed0:	41 f4       	brne	.+16     	; 0x2ee2 <_Z41__static_initialization_and_destruction_0ii+0x44>
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	01 96       	adiw	r24, 0x01	; 1
    2ed8:	21 f4       	brne	.+8      	; 0x2ee2 <_Z41__static_initialization_and_destruction_0ii+0x44>
    2eda:	86 e6       	ldi	r24, 0x66	; 102
    2edc:	95 e4       	ldi	r25, 0x45	; 69
    2ede:	0e 94 34 21 	call	0x4268	; 0x4268 <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    2ee2:	00 00       	nop
    2ee4:	24 96       	adiw	r28, 0x04	; 4
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	08 95       	ret

00002ef0 <_GLOBAL__sub_I_g_battery_type>:
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    2ef8:	6f ef       	ldi	r22, 0xFF	; 255
    2efa:	7f ef       	ldi	r23, 0xFF	; 255
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <_Z41__static_initialization_and_destruction_0ii>
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	08 95       	ret

00002f0a <_GLOBAL__sub_D_g_battery_type>:
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	6f ef       	ldi	r22, 0xFF	; 255
    2f14:	7f ef       	ldi	r23, 0xFF	; 255
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <_Z41__static_initialization_and_destruction_0ii>
    2f1e:	df 91       	pop	r29
    2f20:	cf 91       	pop	r28
    2f22:	08 95       	ret

00002f24 <_Z9ADC0_readv>:
static void ADC0_SYSTEM_shutdown(void)
{
	ADC0.INTCTRL = 0x00; /* Disable interrupt */
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	96 e0       	ldi	r25, 0x06	; 6
    2f30:	fc 01       	movw	r30, r24
    2f32:	80 89       	ldd	r24, Z+16	; 0x10
    2f34:	91 89       	ldd	r25, Z+17	; 0x11
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	08 95       	ret

00002f3c <__vector_24>:

ISR(ADC0_RESRDY_vect)
{
    2f3c:	1f 92       	push	r1
    2f3e:	0f 92       	push	r0
    2f40:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2f44:	0f 92       	push	r0
    2f46:	11 24       	eor	r1, r1
    2f48:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2f4c:	0f 92       	push	r0
    2f4e:	2f 93       	push	r18
    2f50:	3f 93       	push	r19
    2f52:	4f 93       	push	r20
    2f54:	5f 93       	push	r21
    2f56:	6f 93       	push	r22
    2f58:	7f 93       	push	r23
    2f5a:	8f 93       	push	r24
    2f5c:	9f 93       	push	r25
    2f5e:	af 93       	push	r26
    2f60:	bf 93       	push	r27
    2f62:	ef 93       	push	r30
    2f64:	ff 93       	push	r31
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	00 d0       	rcall	.+0      	; 0x2f6c <__vector_24+0x30>
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    2f70:	0e 94 92 17 	call	0x2f24	; 0x2f24 <_Z9ADC0_readv>
    2f74:	89 83       	std	Y+1, r24	; 0x01
    2f76:	9a 83       	std	Y+2, r25	; 0x02
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	86 e7       	ldi	r24, 0x76	; 118
    2f80:	95 e4       	ldi	r25, 0x45	; 69
    2f82:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <_ZN8Goertzel9DataPointEi>
    2f86:	88 23       	and	r24, r24
    2f88:	21 f0       	breq	.+8      	; 0x2f92 <__vector_24+0x56>
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	96 e0       	ldi	r25, 0x06	; 6
    2f8e:	fc 01       	movw	r30, r24
    2f90:	14 86       	std	Z+12, r1	; 0x0c
	}
    2f92:	00 00       	nop
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	ff 91       	pop	r31
    2f9e:	ef 91       	pop	r30
    2fa0:	bf 91       	pop	r27
    2fa2:	af 91       	pop	r26
    2fa4:	9f 91       	pop	r25
    2fa6:	8f 91       	pop	r24
    2fa8:	7f 91       	pop	r23
    2faa:	6f 91       	pop	r22
    2fac:	5f 91       	pop	r21
    2fae:	4f 91       	pop	r20
    2fb0:	3f 91       	pop	r19
    2fb2:	2f 91       	pop	r18
    2fb4:	0f 90       	pop	r0
    2fb6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2fba:	0f 90       	pop	r0
    2fbc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2fc0:	0f 90       	pop	r0
    2fc2:	1f 90       	pop	r1
    2fc4:	18 95       	reti

00002fc6 <_Z41__static_initialization_and_destruction_0ii>:
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <_Z41__static_initialization_and_destruction_0ii+0xa>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <_Z41__static_initialization_and_destruction_0ii+0xc>
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	9a 83       	std	Y+2, r25	; 0x02
    2fda:	6b 83       	std	Y+3, r22	; 0x03
    2fdc:	7c 83       	std	Y+4, r23	; 0x04
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	91 f4       	brne	.+36     	; 0x300a <_Z41__static_initialization_and_destruction_0ii+0x44>
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	01 96       	adiw	r24, 0x01	; 1
    2fec:	71 f4       	brne	.+28     	; 0x300a <_Z41__static_initialization_and_destruction_0ii+0x44>
#define FREE_RUNNING true
#define SINGLE_CONVERSION false
	
volatile ADC_Active_Channel_t g_activeADCChannel = ADCDisable;
volatile int16_t g_adcVal;
Goertzel g_goertzel(N, sampling_freq);
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	90 e4       	ldi	r25, 0x40	; 64
    2ff2:	ac eb       	ldi	r26, 0xBC	; 188
    2ff4:	b6 e4       	ldi	r27, 0x46	; 70
    2ff6:	8c 01       	movw	r16, r24
    2ff8:	9d 01       	movw	r18, r26
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	69 e4       	ldi	r22, 0x49	; 73
    3000:	73 e4       	ldi	r23, 0x43	; 67
    3002:	86 e7       	ldi	r24, 0x76	; 118
    3004:	95 e4       	ldi	r25, 0x45	; 69
    3006:	0e 94 41 24 	call	0x4882	; 0x4882 <_ZN8GoertzelC1Eff>
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	9a 81       	ldd	r25, Y+2	; 0x02
    300e:	89 2b       	or	r24, r25
    3010:	41 f4       	brne	.+16     	; 0x3022 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	9c 81       	ldd	r25, Y+4	; 0x04
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	21 f4       	brne	.+8      	; 0x3022 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    301a:	86 e7       	ldi	r24, 0x76	; 118
    301c:	95 e4       	ldi	r25, 0x45	; 69
    301e:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <_ZN8GoertzelD1Ev>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
	}
    3022:	00 00       	nop
    3024:	24 96       	adiw	r28, 0x04	; 4
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	df 91       	pop	r29
    302c:	cf 91       	pop	r28
    302e:	1f 91       	pop	r17
    3030:	0f 91       	pop	r16
    3032:	08 95       	ret

00003034 <_GLOBAL__sub_I_g_activeADCChannel>:
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	6f ef       	ldi	r22, 0xFF	; 255
    303e:	7f ef       	ldi	r23, 0xFF	; 255
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_Z41__static_initialization_and_destruction_0ii>
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	08 95       	ret

0000304e <_GLOBAL__sub_D_g_activeADCChannel>:
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	6f ef       	ldi	r22, 0xFF	; 255
    3058:	7f ef       	ldi	r23, 0xFF	; 255
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_Z41__static_initialization_and_destruction_0ii>
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	08 95       	ret

00003068 <PORTA_set_pin_pull_mode>:
} //binio

// default destructor
binio::~binio()
{
} //~binio
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	00 d0       	rcall	.+0      	; 0x306e <PORTA_set_pin_pull_mode+0x6>
    306e:	00 d0       	rcall	.+0      	; 0x3070 <PORTA_set_pin_pull_mode+0x8>
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	8b 83       	std	Y+3, r24	; 0x03
    3076:	6c 83       	std	Y+4, r22	; 0x04
    3078:	8b 81       	ldd	r24, Y+3	; 0x03
    307a:	88 2f       	mov	r24, r24
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	80 5f       	subi	r24, 0xF0	; 240
    3080:	9b 4f       	sbci	r25, 0xFB	; 251
    3082:	89 83       	std	Y+1, r24	; 0x01
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	8c 81       	ldd	r24, Y+4	; 0x04
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	59 f4       	brne	.+22     	; 0x30a2 <PORTA_set_pin_pull_mode+0x3a>
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	9a 81       	ldd	r25, Y+2	; 0x02
    3090:	fc 01       	movw	r30, r24
    3092:	80 81       	ld	r24, Z
    3094:	28 2f       	mov	r18, r24
    3096:	28 60       	ori	r18, 0x08	; 8
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	9a 81       	ldd	r25, Y+2	; 0x02
    309c:	fc 01       	movw	r30, r24
    309e:	20 83       	st	Z, r18
    30a0:	0d c0       	rjmp	.+26     	; 0x30bc <PORTA_set_pin_pull_mode+0x54>
    30a2:	8c 81       	ldd	r24, Y+4	; 0x04
    30a4:	88 23       	and	r24, r24
    30a6:	51 f4       	brne	.+20     	; 0x30bc <PORTA_set_pin_pull_mode+0x54>
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	9a 81       	ldd	r25, Y+2	; 0x02
    30ac:	fc 01       	movw	r30, r24
    30ae:	80 81       	ld	r24, Z
    30b0:	28 2f       	mov	r18, r24
    30b2:	27 7f       	andi	r18, 0xF7	; 247
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	9a 81       	ldd	r25, Y+2	; 0x02
    30b8:	fc 01       	movw	r30, r24
    30ba:	20 83       	st	Z, r18
    30bc:	00 00       	nop
    30be:	24 96       	adiw	r28, 0x04	; 4
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	08 95       	ret

000030ca <PORTA_pin_set_isc>:
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	00 d0       	rcall	.+0      	; 0x30d0 <PORTA_pin_set_isc+0x6>
    30d0:	00 d0       	rcall	.+0      	; 0x30d2 <PORTA_pin_set_isc+0x8>
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	8b 83       	std	Y+3, r24	; 0x03
    30d8:	6c 83       	std	Y+4, r22	; 0x04
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	88 2f       	mov	r24, r24
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	80 5f       	subi	r24, 0xF0	; 240
    30e2:	9b 4f       	sbci	r25, 0xFB	; 251
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	9a 83       	std	Y+2, r25	; 0x02
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	9a 81       	ldd	r25, Y+2	; 0x02
    30ec:	fc 01       	movw	r30, r24
    30ee:	80 81       	ld	r24, Z
    30f0:	98 2f       	mov	r25, r24
    30f2:	98 7f       	andi	r25, 0xF8	; 248
    30f4:	8c 81       	ldd	r24, Y+4	; 0x04
    30f6:	89 2b       	or	r24, r25
    30f8:	28 2f       	mov	r18, r24
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
    30fc:	9a 81       	ldd	r25, Y+2	; 0x02
    30fe:	fc 01       	movw	r30, r24
    3100:	20 83       	st	Z, r18
    3102:	00 00       	nop
    3104:	24 96       	adiw	r28, 0x04	; 4
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	08 95       	ret

00003110 <PORTA_set_pin_dir>:
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	00 d0       	rcall	.+0      	; 0x3116 <PORTA_set_pin_dir+0x6>
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	6a 83       	std	Y+2, r22	; 0x02
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	88 2f       	mov	r24, r24
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	81 30       	cpi	r24, 0x01	; 1
    3126:	91 05       	cpc	r25, r1
    3128:	e1 f0       	breq	.+56     	; 0x3162 <PORTA_set_pin_dir+0x52>
    312a:	82 30       	cpi	r24, 0x02	; 2
    312c:	91 05       	cpc	r25, r1
    312e:	71 f1       	breq	.+92     	; 0x318c <PORTA_set_pin_dir+0x7c>
    3130:	89 2b       	or	r24, r25
    3132:	09 f0       	breq	.+2      	; 0x3136 <PORTA_set_pin_dir+0x26>
    3134:	3b c0       	rjmp	.+118    	; 0x31ac <PORTA_set_pin_dir+0x9c>
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	fc 01       	movw	r30, r24
    3140:	80 81       	ld	r24, Z
    3142:	68 2f       	mov	r22, r24
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	48 2f       	mov	r20, r24
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <PORTA_set_pin_dir+0x44>
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	4a 95       	dec	r20
    3156:	e2 f7       	brpl	.-8      	; 0x3150 <PORTA_set_pin_dir+0x40>
    3158:	80 95       	com	r24
    315a:	86 23       	and	r24, r22
    315c:	f9 01       	movw	r30, r18
    315e:	80 83       	st	Z, r24
    3160:	25 c0       	rjmp	.+74     	; 0x31ac <PORTA_set_pin_dir+0x9c>
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	fc 01       	movw	r30, r24
    316c:	80 81       	ld	r24, Z
    316e:	68 2f       	mov	r22, r24
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	48 2f       	mov	r20, r24
    3174:	50 e0       	ldi	r21, 0x00	; 0
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <PORTA_set_pin_dir+0x70>
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	4a 95       	dec	r20
    3182:	e2 f7       	brpl	.-8      	; 0x317c <PORTA_set_pin_dir+0x6c>
    3184:	86 2b       	or	r24, r22
    3186:	f9 01       	movw	r30, r18
    3188:	80 83       	st	Z, r24
    318a:	10 c0       	rjmp	.+32     	; 0x31ac <PORTA_set_pin_dir+0x9c>
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	88 2f       	mov	r24, r24
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	80 5f       	subi	r24, 0xF0	; 240
    3194:	9b 4f       	sbci	r25, 0xFB	; 251
    3196:	29 81       	ldd	r18, Y+1	; 0x01
    3198:	22 2f       	mov	r18, r18
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	20 5f       	subi	r18, 0xF0	; 240
    319e:	3b 4f       	sbci	r19, 0xFB	; 251
    31a0:	f9 01       	movw	r30, r18
    31a2:	20 81       	ld	r18, Z
    31a4:	28 60       	ori	r18, 0x08	; 8
    31a6:	fc 01       	movw	r30, r24
    31a8:	20 83       	st	Z, r18
    31aa:	00 00       	nop
    31ac:	00 00       	nop
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	08 95       	ret

000031b8 <PORTA_set_pin_level>:
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	00 d0       	rcall	.+0      	; 0x31be <PORTA_set_pin_level+0x6>
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	6a 83       	std	Y+2, r22	; 0x02
    31c6:	8a 81       	ldd	r24, Y+2	; 0x02
    31c8:	88 23       	and	r24, r24
    31ca:	a9 f0       	breq	.+42     	; 0x31f6 <PORTA_set_pin_level+0x3e>
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	fc 01       	movw	r30, r24
    31d6:	81 81       	ldd	r24, Z+1	; 0x01
    31d8:	68 2f       	mov	r22, r24
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	48 2f       	mov	r20, r24
    31de:	50 e0       	ldi	r21, 0x00	; 0
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	02 c0       	rjmp	.+4      	; 0x31ea <PORTA_set_pin_level+0x32>
    31e6:	88 0f       	add	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	4a 95       	dec	r20
    31ec:	e2 f7       	brpl	.-8      	; 0x31e6 <PORTA_set_pin_level+0x2e>
    31ee:	86 2b       	or	r24, r22
    31f0:	f9 01       	movw	r30, r18
    31f2:	81 83       	std	Z+1, r24	; 0x01
    31f4:	15 c0       	rjmp	.+42     	; 0x3220 <PORTA_set_pin_level+0x68>
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	fc 01       	movw	r30, r24
    3200:	81 81       	ldd	r24, Z+1	; 0x01
    3202:	68 2f       	mov	r22, r24
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	48 2f       	mov	r20, r24
    3208:	50 e0       	ldi	r21, 0x00	; 0
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <PORTA_set_pin_level+0x5c>
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	4a 95       	dec	r20
    3216:	e2 f7       	brpl	.-8      	; 0x3210 <PORTA_set_pin_level+0x58>
    3218:	80 95       	com	r24
    321a:	86 23       	and	r24, r22
    321c:	f9 01       	movw	r30, r18
    321e:	81 83       	std	Z+1, r24	; 0x01
    3220:	00 00       	nop
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	df 91       	pop	r29
    3228:	cf 91       	pop	r28
    322a:	08 95       	ret

0000322c <PORTB_set_pin_dir>:
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	00 d0       	rcall	.+0      	; 0x3232 <PORTB_set_pin_dir+0x6>
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	89 83       	std	Y+1, r24	; 0x01
    3238:	6a 83       	std	Y+2, r22	; 0x02
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	88 2f       	mov	r24, r24
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	81 30       	cpi	r24, 0x01	; 1
    3242:	91 05       	cpc	r25, r1
    3244:	e1 f0       	breq	.+56     	; 0x327e <PORTB_set_pin_dir+0x52>
    3246:	82 30       	cpi	r24, 0x02	; 2
    3248:	91 05       	cpc	r25, r1
    324a:	71 f1       	breq	.+92     	; 0x32a8 <PORTB_set_pin_dir+0x7c>
    324c:	89 2b       	or	r24, r25
    324e:	09 f0       	breq	.+2      	; 0x3252 <PORTB_set_pin_dir+0x26>
    3250:	3b c0       	rjmp	.+118    	; 0x32c8 <PORTB_set_pin_dir+0x9c>
    3252:	84 e0       	ldi	r24, 0x04	; 4
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	24 e0       	ldi	r18, 0x04	; 4
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	f9 01       	movw	r30, r18
    325c:	20 81       	ld	r18, Z
    325e:	62 2f       	mov	r22, r18
    3260:	29 81       	ldd	r18, Y+1	; 0x01
    3262:	42 2f       	mov	r20, r18
    3264:	50 e0       	ldi	r21, 0x00	; 0
    3266:	21 e0       	ldi	r18, 0x01	; 1
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <PORTB_set_pin_dir+0x44>
    326c:	22 0f       	add	r18, r18
    326e:	33 1f       	adc	r19, r19
    3270:	4a 95       	dec	r20
    3272:	e2 f7       	brpl	.-8      	; 0x326c <PORTB_set_pin_dir+0x40>
    3274:	20 95       	com	r18
    3276:	26 23       	and	r18, r22
    3278:	fc 01       	movw	r30, r24
    327a:	20 83       	st	Z, r18
    327c:	25 c0       	rjmp	.+74     	; 0x32c8 <PORTB_set_pin_dir+0x9c>
    327e:	84 e0       	ldi	r24, 0x04	; 4
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	24 e0       	ldi	r18, 0x04	; 4
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	f9 01       	movw	r30, r18
    3288:	20 81       	ld	r18, Z
    328a:	62 2f       	mov	r22, r18
    328c:	29 81       	ldd	r18, Y+1	; 0x01
    328e:	42 2f       	mov	r20, r18
    3290:	50 e0       	ldi	r21, 0x00	; 0
    3292:	21 e0       	ldi	r18, 0x01	; 1
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	02 c0       	rjmp	.+4      	; 0x329c <PORTB_set_pin_dir+0x70>
    3298:	22 0f       	add	r18, r18
    329a:	33 1f       	adc	r19, r19
    329c:	4a 95       	dec	r20
    329e:	e2 f7       	brpl	.-8      	; 0x3298 <PORTB_set_pin_dir+0x6c>
    32a0:	26 2b       	or	r18, r22
    32a2:	fc 01       	movw	r30, r24
    32a4:	20 83       	st	Z, r18
    32a6:	10 c0       	rjmp	.+32     	; 0x32c8 <PORTB_set_pin_dir+0x9c>
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	80 5d       	subi	r24, 0xD0	; 208
    32b0:	9b 4f       	sbci	r25, 0xFB	; 251
    32b2:	29 81       	ldd	r18, Y+1	; 0x01
    32b4:	22 2f       	mov	r18, r18
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	20 5d       	subi	r18, 0xD0	; 208
    32ba:	3b 4f       	sbci	r19, 0xFB	; 251
    32bc:	f9 01       	movw	r30, r18
    32be:	20 81       	ld	r18, Z
    32c0:	28 60       	ori	r18, 0x08	; 8
    32c2:	fc 01       	movw	r30, r24
    32c4:	20 83       	st	Z, r18
    32c6:	00 00       	nop
    32c8:	00 00       	nop
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	08 95       	ret

000032d4 <PORTB_set_pin_level>:
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
    32d8:	00 d0       	rcall	.+0      	; 0x32da <PORTB_set_pin_level+0x6>
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	6a 83       	std	Y+2, r22	; 0x02
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	88 23       	and	r24, r24
    32e6:	a9 f0       	breq	.+42     	; 0x3312 <PORTB_set_pin_level+0x3e>
    32e8:	84 e0       	ldi	r24, 0x04	; 4
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	24 e0       	ldi	r18, 0x04	; 4
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	f9 01       	movw	r30, r18
    32f2:	21 81       	ldd	r18, Z+1	; 0x01
    32f4:	62 2f       	mov	r22, r18
    32f6:	29 81       	ldd	r18, Y+1	; 0x01
    32f8:	42 2f       	mov	r20, r18
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	21 e0       	ldi	r18, 0x01	; 1
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <PORTB_set_pin_level+0x32>
    3302:	22 0f       	add	r18, r18
    3304:	33 1f       	adc	r19, r19
    3306:	4a 95       	dec	r20
    3308:	e2 f7       	brpl	.-8      	; 0x3302 <PORTB_set_pin_level+0x2e>
    330a:	26 2b       	or	r18, r22
    330c:	fc 01       	movw	r30, r24
    330e:	21 83       	std	Z+1, r18	; 0x01
    3310:	15 c0       	rjmp	.+42     	; 0x333c <PORTB_set_pin_level+0x68>
    3312:	84 e0       	ldi	r24, 0x04	; 4
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	24 e0       	ldi	r18, 0x04	; 4
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	f9 01       	movw	r30, r18
    331c:	21 81       	ldd	r18, Z+1	; 0x01
    331e:	62 2f       	mov	r22, r18
    3320:	29 81       	ldd	r18, Y+1	; 0x01
    3322:	42 2f       	mov	r20, r18
    3324:	50 e0       	ldi	r21, 0x00	; 0
    3326:	21 e0       	ldi	r18, 0x01	; 1
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	02 c0       	rjmp	.+4      	; 0x3330 <PORTB_set_pin_level+0x5c>
    332c:	22 0f       	add	r18, r18
    332e:	33 1f       	adc	r19, r19
    3330:	4a 95       	dec	r20
    3332:	e2 f7       	brpl	.-8      	; 0x332c <PORTB_set_pin_level+0x58>
    3334:	20 95       	com	r18
    3336:	26 23       	and	r18, r22
    3338:	fc 01       	movw	r30, r24
    333a:	21 83       	std	Z+1, r18	; 0x01
    333c:	00 00       	nop
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	08 95       	ret

00003348 <PORTC_set_pin_pull_mode>:
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	00 d0       	rcall	.+0      	; 0x334e <PORTC_set_pin_pull_mode+0x6>
    334e:	00 d0       	rcall	.+0      	; 0x3350 <PORTC_set_pin_pull_mode+0x8>
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	8b 83       	std	Y+3, r24	; 0x03
    3356:	6c 83       	std	Y+4, r22	; 0x04
    3358:	8b 81       	ldd	r24, Y+3	; 0x03
    335a:	88 2f       	mov	r24, r24
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	80 5b       	subi	r24, 0xB0	; 176
    3360:	9b 4f       	sbci	r25, 0xFB	; 251
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	9a 83       	std	Y+2, r25	; 0x02
    3366:	8c 81       	ldd	r24, Y+4	; 0x04
    3368:	81 30       	cpi	r24, 0x01	; 1
    336a:	59 f4       	brne	.+22     	; 0x3382 <PORTC_set_pin_pull_mode+0x3a>
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	9a 81       	ldd	r25, Y+2	; 0x02
    3370:	fc 01       	movw	r30, r24
    3372:	80 81       	ld	r24, Z
    3374:	28 2f       	mov	r18, r24
    3376:	28 60       	ori	r18, 0x08	; 8
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	9a 81       	ldd	r25, Y+2	; 0x02
    337c:	fc 01       	movw	r30, r24
    337e:	20 83       	st	Z, r18
    3380:	0d c0       	rjmp	.+26     	; 0x339c <PORTC_set_pin_pull_mode+0x54>
    3382:	8c 81       	ldd	r24, Y+4	; 0x04
    3384:	88 23       	and	r24, r24
    3386:	51 f4       	brne	.+20     	; 0x339c <PORTC_set_pin_pull_mode+0x54>
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	9a 81       	ldd	r25, Y+2	; 0x02
    338c:	fc 01       	movw	r30, r24
    338e:	80 81       	ld	r24, Z
    3390:	28 2f       	mov	r18, r24
    3392:	27 7f       	andi	r18, 0xF7	; 247
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	9a 81       	ldd	r25, Y+2	; 0x02
    3398:	fc 01       	movw	r30, r24
    339a:	20 83       	st	Z, r18
    339c:	00 00       	nop
    339e:	24 96       	adiw	r28, 0x04	; 4
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	08 95       	ret

000033aa <PORTC_pin_set_isc>:
    33aa:	cf 93       	push	r28
    33ac:	df 93       	push	r29
    33ae:	00 d0       	rcall	.+0      	; 0x33b0 <PORTC_pin_set_isc+0x6>
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <PORTC_pin_set_isc+0x8>
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	8b 83       	std	Y+3, r24	; 0x03
    33b8:	6c 83       	std	Y+4, r22	; 0x04
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	88 2f       	mov	r24, r24
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	80 5b       	subi	r24, 0xB0	; 176
    33c2:	9b 4f       	sbci	r25, 0xFB	; 251
    33c4:	89 83       	std	Y+1, r24	; 0x01
    33c6:	9a 83       	std	Y+2, r25	; 0x02
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	9a 81       	ldd	r25, Y+2	; 0x02
    33cc:	fc 01       	movw	r30, r24
    33ce:	80 81       	ld	r24, Z
    33d0:	98 2f       	mov	r25, r24
    33d2:	98 7f       	andi	r25, 0xF8	; 248
    33d4:	8c 81       	ldd	r24, Y+4	; 0x04
    33d6:	89 2b       	or	r24, r25
    33d8:	28 2f       	mov	r18, r24
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	9a 81       	ldd	r25, Y+2	; 0x02
    33de:	fc 01       	movw	r30, r24
    33e0:	20 83       	st	Z, r18
    33e2:	00 00       	nop
    33e4:	24 96       	adiw	r28, 0x04	; 4
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	08 95       	ret

000033f0 <PORTC_set_pin_dir>:
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	00 d0       	rcall	.+0      	; 0x33f6 <PORTC_set_pin_dir+0x6>
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	89 83       	std	Y+1, r24	; 0x01
    33fc:	6a 83       	std	Y+2, r22	; 0x02
    33fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3400:	88 2f       	mov	r24, r24
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	81 30       	cpi	r24, 0x01	; 1
    3406:	91 05       	cpc	r25, r1
    3408:	e1 f0       	breq	.+56     	; 0x3442 <PORTC_set_pin_dir+0x52>
    340a:	82 30       	cpi	r24, 0x02	; 2
    340c:	91 05       	cpc	r25, r1
    340e:	71 f1       	breq	.+92     	; 0x346c <PORTC_set_pin_dir+0x7c>
    3410:	89 2b       	or	r24, r25
    3412:	09 f0       	breq	.+2      	; 0x3416 <PORTC_set_pin_dir+0x26>
    3414:	3b c0       	rjmp	.+118    	; 0x348c <PORTC_set_pin_dir+0x9c>
    3416:	88 e0       	ldi	r24, 0x08	; 8
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	28 e0       	ldi	r18, 0x08	; 8
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	f9 01       	movw	r30, r18
    3420:	20 81       	ld	r18, Z
    3422:	62 2f       	mov	r22, r18
    3424:	29 81       	ldd	r18, Y+1	; 0x01
    3426:	42 2f       	mov	r20, r18
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	21 e0       	ldi	r18, 0x01	; 1
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <PORTC_set_pin_dir+0x44>
    3430:	22 0f       	add	r18, r18
    3432:	33 1f       	adc	r19, r19
    3434:	4a 95       	dec	r20
    3436:	e2 f7       	brpl	.-8      	; 0x3430 <PORTC_set_pin_dir+0x40>
    3438:	20 95       	com	r18
    343a:	26 23       	and	r18, r22
    343c:	fc 01       	movw	r30, r24
    343e:	20 83       	st	Z, r18
    3440:	25 c0       	rjmp	.+74     	; 0x348c <PORTC_set_pin_dir+0x9c>
    3442:	88 e0       	ldi	r24, 0x08	; 8
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	28 e0       	ldi	r18, 0x08	; 8
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	f9 01       	movw	r30, r18
    344c:	20 81       	ld	r18, Z
    344e:	62 2f       	mov	r22, r18
    3450:	29 81       	ldd	r18, Y+1	; 0x01
    3452:	42 2f       	mov	r20, r18
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	21 e0       	ldi	r18, 0x01	; 1
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	02 c0       	rjmp	.+4      	; 0x3460 <PORTC_set_pin_dir+0x70>
    345c:	22 0f       	add	r18, r18
    345e:	33 1f       	adc	r19, r19
    3460:	4a 95       	dec	r20
    3462:	e2 f7       	brpl	.-8      	; 0x345c <PORTC_set_pin_dir+0x6c>
    3464:	26 2b       	or	r18, r22
    3466:	fc 01       	movw	r30, r24
    3468:	20 83       	st	Z, r18
    346a:	10 c0       	rjmp	.+32     	; 0x348c <PORTC_set_pin_dir+0x9c>
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	88 2f       	mov	r24, r24
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	80 5b       	subi	r24, 0xB0	; 176
    3474:	9b 4f       	sbci	r25, 0xFB	; 251
    3476:	29 81       	ldd	r18, Y+1	; 0x01
    3478:	22 2f       	mov	r18, r18
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	20 5b       	subi	r18, 0xB0	; 176
    347e:	3b 4f       	sbci	r19, 0xFB	; 251
    3480:	f9 01       	movw	r30, r18
    3482:	20 81       	ld	r18, Z
    3484:	28 60       	ori	r18, 0x08	; 8
    3486:	fc 01       	movw	r30, r24
    3488:	20 83       	st	Z, r18
    348a:	00 00       	nop
    348c:	00 00       	nop
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	08 95       	ret

00003498 <PORTC_set_pin_level>:
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	00 d0       	rcall	.+0      	; 0x349e <PORTC_set_pin_level+0x6>
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	6a 83       	std	Y+2, r22	; 0x02
    34a6:	8a 81       	ldd	r24, Y+2	; 0x02
    34a8:	88 23       	and	r24, r24
    34aa:	a9 f0       	breq	.+42     	; 0x34d6 <PORTC_set_pin_level+0x3e>
    34ac:	88 e0       	ldi	r24, 0x08	; 8
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	28 e0       	ldi	r18, 0x08	; 8
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	f9 01       	movw	r30, r18
    34b6:	21 81       	ldd	r18, Z+1	; 0x01
    34b8:	62 2f       	mov	r22, r18
    34ba:	29 81       	ldd	r18, Y+1	; 0x01
    34bc:	42 2f       	mov	r20, r18
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	21 e0       	ldi	r18, 0x01	; 1
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <PORTC_set_pin_level+0x32>
    34c6:	22 0f       	add	r18, r18
    34c8:	33 1f       	adc	r19, r19
    34ca:	4a 95       	dec	r20
    34cc:	e2 f7       	brpl	.-8      	; 0x34c6 <PORTC_set_pin_level+0x2e>
    34ce:	26 2b       	or	r18, r22
    34d0:	fc 01       	movw	r30, r24
    34d2:	21 83       	std	Z+1, r18	; 0x01
    34d4:	15 c0       	rjmp	.+42     	; 0x3500 <PORTC_set_pin_level+0x68>
    34d6:	88 e0       	ldi	r24, 0x08	; 8
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	28 e0       	ldi	r18, 0x08	; 8
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	f9 01       	movw	r30, r18
    34e0:	21 81       	ldd	r18, Z+1	; 0x01
    34e2:	62 2f       	mov	r22, r18
    34e4:	29 81       	ldd	r18, Y+1	; 0x01
    34e6:	42 2f       	mov	r20, r18
    34e8:	50 e0       	ldi	r21, 0x00	; 0
    34ea:	21 e0       	ldi	r18, 0x01	; 1
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	02 c0       	rjmp	.+4      	; 0x34f4 <PORTC_set_pin_level+0x5c>
    34f0:	22 0f       	add	r18, r18
    34f2:	33 1f       	adc	r19, r19
    34f4:	4a 95       	dec	r20
    34f6:	e2 f7       	brpl	.-8      	; 0x34f0 <PORTC_set_pin_level+0x58>
    34f8:	20 95       	com	r18
    34fa:	26 23       	and	r18, r22
    34fc:	fc 01       	movw	r30, r24
    34fe:	21 83       	std	Z+1, r18	; 0x01
    3500:	00 00       	nop
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	08 95       	ret

0000350c <PORTD_get_pin_level>:
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	1f 92       	push	r1
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	89 83       	std	Y+1, r24	; 0x01
    3518:	8c e0       	ldi	r24, 0x0C	; 12
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	fc 01       	movw	r30, r24
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	88 2f       	mov	r24, r24
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	29 81       	ldd	r18, Y+1	; 0x01
    3526:	22 2f       	mov	r18, r18
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	02 c0       	rjmp	.+4      	; 0x3530 <PORTD_get_pin_level+0x24>
    352c:	95 95       	asr	r25
    352e:	87 95       	ror	r24
    3530:	2a 95       	dec	r18
    3532:	e2 f7       	brpl	.-8      	; 0x352c <PORTD_get_pin_level+0x20>
    3534:	81 70       	andi	r24, 0x01	; 1
    3536:	99 27       	eor	r25, r25
    3538:	21 e0       	ldi	r18, 0x01	; 1
    353a:	89 2b       	or	r24, r25
    353c:	09 f4       	brne	.+2      	; 0x3540 <PORTD_get_pin_level+0x34>
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	82 2f       	mov	r24, r18
    3542:	0f 90       	pop	r0
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	08 95       	ret

0000354a <PORTE_set_pin_dir>:
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	00 d0       	rcall	.+0      	; 0x3550 <PORTE_set_pin_dir+0x6>
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
    3554:	89 83       	std	Y+1, r24	; 0x01
    3556:	6a 83       	std	Y+2, r22	; 0x02
    3558:	8a 81       	ldd	r24, Y+2	; 0x02
    355a:	88 2f       	mov	r24, r24
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	81 30       	cpi	r24, 0x01	; 1
    3560:	91 05       	cpc	r25, r1
    3562:	e1 f0       	breq	.+56     	; 0x359c <PORTE_set_pin_dir+0x52>
    3564:	82 30       	cpi	r24, 0x02	; 2
    3566:	91 05       	cpc	r25, r1
    3568:	71 f1       	breq	.+92     	; 0x35c6 <PORTE_set_pin_dir+0x7c>
    356a:	89 2b       	or	r24, r25
    356c:	09 f0       	breq	.+2      	; 0x3570 <PORTE_set_pin_dir+0x26>
    356e:	3b c0       	rjmp	.+118    	; 0x35e6 <PORTE_set_pin_dir+0x9c>
    3570:	80 e1       	ldi	r24, 0x10	; 16
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	20 e1       	ldi	r18, 0x10	; 16
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	f9 01       	movw	r30, r18
    357a:	20 81       	ld	r18, Z
    357c:	62 2f       	mov	r22, r18
    357e:	29 81       	ldd	r18, Y+1	; 0x01
    3580:	42 2f       	mov	r20, r18
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	21 e0       	ldi	r18, 0x01	; 1
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	02 c0       	rjmp	.+4      	; 0x358e <PORTE_set_pin_dir+0x44>
    358a:	22 0f       	add	r18, r18
    358c:	33 1f       	adc	r19, r19
    358e:	4a 95       	dec	r20
    3590:	e2 f7       	brpl	.-8      	; 0x358a <PORTE_set_pin_dir+0x40>
    3592:	20 95       	com	r18
    3594:	26 23       	and	r18, r22
    3596:	fc 01       	movw	r30, r24
    3598:	20 83       	st	Z, r18
    359a:	25 c0       	rjmp	.+74     	; 0x35e6 <PORTE_set_pin_dir+0x9c>
    359c:	80 e1       	ldi	r24, 0x10	; 16
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	20 e1       	ldi	r18, 0x10	; 16
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	f9 01       	movw	r30, r18
    35a6:	20 81       	ld	r18, Z
    35a8:	62 2f       	mov	r22, r18
    35aa:	29 81       	ldd	r18, Y+1	; 0x01
    35ac:	42 2f       	mov	r20, r18
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	21 e0       	ldi	r18, 0x01	; 1
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <PORTE_set_pin_dir+0x70>
    35b6:	22 0f       	add	r18, r18
    35b8:	33 1f       	adc	r19, r19
    35ba:	4a 95       	dec	r20
    35bc:	e2 f7       	brpl	.-8      	; 0x35b6 <PORTE_set_pin_dir+0x6c>
    35be:	26 2b       	or	r18, r22
    35c0:	fc 01       	movw	r30, r24
    35c2:	20 83       	st	Z, r18
    35c4:	10 c0       	rjmp	.+32     	; 0x35e6 <PORTE_set_pin_dir+0x9c>
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	80 57       	subi	r24, 0x70	; 112
    35ce:	9b 4f       	sbci	r25, 0xFB	; 251
    35d0:	29 81       	ldd	r18, Y+1	; 0x01
    35d2:	22 2f       	mov	r18, r18
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	20 57       	subi	r18, 0x70	; 112
    35d8:	3b 4f       	sbci	r19, 0xFB	; 251
    35da:	f9 01       	movw	r30, r18
    35dc:	20 81       	ld	r18, Z
    35de:	28 60       	ori	r18, 0x08	; 8
    35e0:	fc 01       	movw	r30, r24
    35e2:	20 83       	st	Z, r18
    35e4:	00 00       	nop
    35e6:	00 00       	nop
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	08 95       	ret

000035f2 <PORTF_set_pin_dir>:
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    35f6:	00 d0       	rcall	.+0      	; 0x35f8 <PORTF_set_pin_dir+0x6>
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	89 83       	std	Y+1, r24	; 0x01
    35fe:	6a 83       	std	Y+2, r22	; 0x02
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
    3602:	88 2f       	mov	r24, r24
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	81 30       	cpi	r24, 0x01	; 1
    3608:	91 05       	cpc	r25, r1
    360a:	e1 f0       	breq	.+56     	; 0x3644 <PORTF_set_pin_dir+0x52>
    360c:	82 30       	cpi	r24, 0x02	; 2
    360e:	91 05       	cpc	r25, r1
    3610:	71 f1       	breq	.+92     	; 0x366e <PORTF_set_pin_dir+0x7c>
    3612:	89 2b       	or	r24, r25
    3614:	09 f0       	breq	.+2      	; 0x3618 <PORTF_set_pin_dir+0x26>
    3616:	3b c0       	rjmp	.+118    	; 0x368e <PORTF_set_pin_dir+0x9c>
    3618:	84 e1       	ldi	r24, 0x14	; 20
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	24 e1       	ldi	r18, 0x14	; 20
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	f9 01       	movw	r30, r18
    3622:	20 81       	ld	r18, Z
    3624:	62 2f       	mov	r22, r18
    3626:	29 81       	ldd	r18, Y+1	; 0x01
    3628:	42 2f       	mov	r20, r18
    362a:	50 e0       	ldi	r21, 0x00	; 0
    362c:	21 e0       	ldi	r18, 0x01	; 1
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	02 c0       	rjmp	.+4      	; 0x3636 <PORTF_set_pin_dir+0x44>
    3632:	22 0f       	add	r18, r18
    3634:	33 1f       	adc	r19, r19
    3636:	4a 95       	dec	r20
    3638:	e2 f7       	brpl	.-8      	; 0x3632 <PORTF_set_pin_dir+0x40>
    363a:	20 95       	com	r18
    363c:	26 23       	and	r18, r22
    363e:	fc 01       	movw	r30, r24
    3640:	20 83       	st	Z, r18
    3642:	25 c0       	rjmp	.+74     	; 0x368e <PORTF_set_pin_dir+0x9c>
    3644:	84 e1       	ldi	r24, 0x14	; 20
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	24 e1       	ldi	r18, 0x14	; 20
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	f9 01       	movw	r30, r18
    364e:	20 81       	ld	r18, Z
    3650:	62 2f       	mov	r22, r18
    3652:	29 81       	ldd	r18, Y+1	; 0x01
    3654:	42 2f       	mov	r20, r18
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	21 e0       	ldi	r18, 0x01	; 1
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	02 c0       	rjmp	.+4      	; 0x3662 <PORTF_set_pin_dir+0x70>
    365e:	22 0f       	add	r18, r18
    3660:	33 1f       	adc	r19, r19
    3662:	4a 95       	dec	r20
    3664:	e2 f7       	brpl	.-8      	; 0x365e <PORTF_set_pin_dir+0x6c>
    3666:	26 2b       	or	r18, r22
    3668:	fc 01       	movw	r30, r24
    366a:	20 83       	st	Z, r18
    366c:	10 c0       	rjmp	.+32     	; 0x368e <PORTF_set_pin_dir+0x9c>
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	88 2f       	mov	r24, r24
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	80 55       	subi	r24, 0x50	; 80
    3676:	9b 4f       	sbci	r25, 0xFB	; 251
    3678:	29 81       	ldd	r18, Y+1	; 0x01
    367a:	22 2f       	mov	r18, r18
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	20 55       	subi	r18, 0x50	; 80
    3680:	3b 4f       	sbci	r19, 0xFB	; 251
    3682:	f9 01       	movw	r30, r18
    3684:	20 81       	ld	r18, Z
    3686:	28 60       	ori	r18, 0x08	; 8
    3688:	fc 01       	movw	r30, r24
    368a:	20 83       	st	Z, r18
    368c:	00 00       	nop
    368e:	00 00       	nop
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	08 95       	ret

0000369a <_Z10fet_driverb>:

void fet_driver(bool state)
{
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	1f 92       	push	r1
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	89 83       	std	Y+1, r24	; 0x01
	if(state == ON)
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	88 23       	and	r24, r24
    36aa:	29 f0       	breq	.+10     	; 0x36b6 <_Z10fet_driverb+0x1c>
	{
		PORTA_set_pin_level(FET_DRIVER_ENABLE, HIGH);
    36ac:	61 e0       	ldi	r22, 0x01	; 1
    36ae:	83 e0       	ldi	r24, 0x03	; 3
    36b0:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	}
	else
	{
		PORTA_set_pin_level(FET_DRIVER_ENABLE, LOW);
	}
}
    36b4:	04 c0       	rjmp	.+8      	; 0x36be <_Z10fet_driverb+0x24>
	{
		PORTA_set_pin_level(FET_DRIVER_ENABLE, HIGH);
	}
	else
	{
		PORTA_set_pin_level(FET_DRIVER_ENABLE, LOW);
    36b6:	60 e0       	ldi	r22, 0x00	; 0
    36b8:	83 e0       	ldi	r24, 0x03	; 3
    36ba:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	}
}
    36be:	00 00       	nop
    36c0:	0f 90       	pop	r0
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	08 95       	ret

000036c8 <_Z10wifi_powerb>:


void wifi_power(bool state)
{
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	1f 92       	push	r1
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	89 83       	std	Y+1, r24	; 0x01
	if(state == ON)
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	88 23       	and	r24, r24
    36d8:	29 f0       	breq	.+10     	; 0x36e4 <_Z10wifi_powerb+0x1c>
	{
		PORTA_set_pin_level(WIFI_ENABLE, HIGH);
    36da:	61 e0       	ldi	r22, 0x01	; 1
    36dc:	85 e0       	ldi	r24, 0x05	; 5
    36de:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	}
	else
	{
		PORTA_set_pin_level(WIFI_ENABLE, LOW);
	}
}
    36e2:	04 c0       	rjmp	.+8      	; 0x36ec <_Z10wifi_powerb+0x24>
	{
		PORTA_set_pin_level(WIFI_ENABLE, HIGH);
	}
	else
	{
		PORTA_set_pin_level(WIFI_ENABLE, LOW);
    36e4:	60 e0       	ldi	r22, 0x00	; 0
    36e6:	85 e0       	ldi	r24, 0x05	; 5
    36e8:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	}
}
    36ec:	00 00       	nop
    36ee:	0f 90       	pop	r0
    36f0:	df 91       	pop	r29
    36f2:	cf 91       	pop	r28
    36f4:	08 95       	ret

000036f6 <_Z10wifi_resetb>:

void wifi_reset(bool state)
{
    36f6:	cf 93       	push	r28
    36f8:	df 93       	push	r29
    36fa:	1f 92       	push	r1
    36fc:	cd b7       	in	r28, 0x3d	; 61
    36fe:	de b7       	in	r29, 0x3e	; 62
    3700:	89 83       	std	Y+1, r24	; 0x01
	if(state == ON)
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	88 23       	and	r24, r24
    3706:	29 f0       	breq	.+10     	; 0x3712 <_Z10wifi_resetb+0x1c>
	{
		PORTA_set_pin_level(WIFI_RESET, LOW);
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	86 e0       	ldi	r24, 0x06	; 6
    370c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	}
	else
	{
		PORTA_set_pin_level(WIFI_RESET, HIGH);
	}
}
    3710:	04 c0       	rjmp	.+8      	; 0x371a <_Z10wifi_resetb+0x24>
	{
		PORTA_set_pin_level(WIFI_RESET, LOW);
	}
	else
	{
		PORTA_set_pin_level(WIFI_RESET, HIGH);
    3712:	61 e0       	ldi	r22, 0x01	; 1
    3714:	86 e0       	ldi	r24, 0x06	; 6
    3716:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	}
}
    371a:	00 00       	nop
    371c:	0f 90       	pop	r0
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	08 95       	ret

00003724 <_Z11wifiPresentv>:

bool wifiPresent(void)
{
    3724:	cf 93       	push	r28
    3726:	df 93       	push	r29
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
	return(!PORTD_get_pin_level(WIFI_MODULE_DETECT));
    372c:	87 e0       	ldi	r24, 0x07	; 7
    372e:	0e 94 86 1a 	call	0x350c	; 0x350c <PORTD_get_pin_level>
    3732:	98 2f       	mov	r25, r24
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	89 27       	eor	r24, r25
}
    3738:	df 91       	pop	r29
    373a:	cf 91       	pop	r28
    373c:	08 95       	ret

0000373e <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    373e:	1f 92       	push	r1
    3740:	0f 92       	push	r0
    3742:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    3746:	0f 92       	push	r0
    3748:	11 24       	eor	r1, r1
    374a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    374e:	0f 92       	push	r0
    3750:	2f 93       	push	r18
    3752:	8f 93       	push	r24
    3754:	9f 93       	push	r25
    3756:	ef 93       	push	r30
    3758:	ff 93       	push	r31
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    3762:	80 e4       	ldi	r24, 0x40	; 64
    3764:	94 e0       	ldi	r25, 0x04	; 4
    3766:	fc 01       	movw	r30, r24
    3768:	81 85       	ldd	r24, Z+9	; 0x09
    376a:	88 1f       	adc	r24, r24
    376c:	88 27       	eor	r24, r24
    376e:	88 1f       	adc	r24, r24
    3770:	88 23       	and	r24, r24
    3772:	49 f0       	breq	.+18     	; 0x3786 <__vector_29+0x48>
	{
		count++;
    3774:	80 91 77 45 	lds	r24, 0x4577	; 0x804577 <_ZZ11__vector_29E5count>
    3778:	90 91 78 45 	lds	r25, 0x4578	; 0x804578 <_ZZ11__vector_29E5count+0x1>
    377c:	01 96       	adiw	r24, 0x01	; 1
    377e:	80 93 77 45 	sts	0x4577, r24	; 0x804577 <_ZZ11__vector_29E5count>
    3782:	90 93 78 45 	sts	0x4578, r25	; 0x804578 <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    3786:	80 e4       	ldi	r24, 0x40	; 64
    3788:	94 e0       	ldi	r25, 0x04	; 4
    378a:	fc 01       	movw	r30, r24
    378c:	81 85       	ldd	r24, Z+9	; 0x09
    378e:	88 2f       	mov	r24, r24
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	80 71       	andi	r24, 0x10	; 16
    3794:	99 27       	eor	r25, r25
    3796:	21 e0       	ldi	r18, 0x01	; 1
    3798:	89 2b       	or	r24, r25
    379a:	09 f4       	brne	.+2      	; 0x379e <__vector_29+0x60>
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	22 23       	and	r18, r18
    37a0:	49 f0       	breq	.+18     	; 0x37b4 <__vector_29+0x76>
	{
		count++;
    37a2:	80 91 77 45 	lds	r24, 0x4577	; 0x804577 <_ZZ11__vector_29E5count>
    37a6:	90 91 78 45 	lds	r25, 0x4578	; 0x804578 <_ZZ11__vector_29E5count+0x1>
    37aa:	01 96       	adiw	r24, 0x01	; 1
    37ac:	80 93 77 45 	sts	0x4577, r24	; 0x804577 <_ZZ11__vector_29E5count>
    37b0:	90 93 78 45 	sts	0x4578, r25	; 0x804578 <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    37b4:	80 e4       	ldi	r24, 0x40	; 64
    37b6:	94 e0       	ldi	r25, 0x04	; 4
    37b8:	2f ef       	ldi	r18, 0xFF	; 255
    37ba:	fc 01       	movw	r30, r24
    37bc:	21 87       	std	Z+9, r18	; 0x09
}
    37be:	00 00       	nop
    37c0:	df 91       	pop	r29
    37c2:	cf 91       	pop	r28
    37c4:	ff 91       	pop	r31
    37c6:	ef 91       	pop	r30
    37c8:	9f 91       	pop	r25
    37ca:	8f 91       	pop	r24
    37cc:	2f 91       	pop	r18
    37ce:	0f 90       	pop	r0
    37d0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    37d4:	0f 90       	pop	r0
    37d6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    37da:	0f 90       	pop	r0
    37dc:	1f 90       	pop	r1
    37de:	18 95       	reti

000037e0 <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    37e0:	1f 92       	push	r1
    37e2:	0f 92       	push	r0
    37e4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    37e8:	0f 92       	push	r0
    37ea:	11 24       	eor	r1, r1
    37ec:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    37f0:	0f 92       	push	r0
    37f2:	2f 93       	push	r18
    37f4:	8f 93       	push	r24
    37f6:	9f 93       	push	r25
    37f8:	ef 93       	push	r30
    37fa:	ff 93       	push	r31
    37fc:	cf 93       	push	r28
    37fe:	df 93       	push	r29
    3800:	cd b7       	in	r28, 0x3d	; 61
    3802:	de b7       	in	r29, 0x3e	; 62
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	94 e0       	ldi	r25, 0x04	; 4
    3808:	fc 01       	movw	r30, r24
    380a:	81 85       	ldd	r24, Z+9	; 0x09
    380c:	88 2f       	mov	r24, r24
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	84 70       	andi	r24, 0x04	; 4
    3812:	99 27       	eor	r25, r25
    3814:	21 e0       	ldi	r18, 0x01	; 1
    3816:	89 2b       	or	r24, r25
    3818:	09 f4       	brne	.+2      	; 0x381c <__vector_6+0x3c>
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	22 23       	and	r18, r18
    381e:	49 f0       	breq	.+18     	; 0x3832 <__vector_6+0x52>
	{
		count++;
    3820:	80 91 79 45 	lds	r24, 0x4579	; 0x804579 <_ZZ10__vector_6E5count>
    3824:	90 91 7a 45 	lds	r25, 0x457A	; 0x80457a <_ZZ10__vector_6E5count+0x1>
    3828:	01 96       	adiw	r24, 0x01	; 1
    382a:	80 93 79 45 	sts	0x4579, r24	; 0x804579 <_ZZ10__vector_6E5count>
    382e:	90 93 7a 45 	sts	0x457A, r25	; 0x80457a <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	94 e0       	ldi	r25, 0x04	; 4
    3836:	fc 01       	movw	r30, r24
    3838:	81 85       	ldd	r24, Z+9	; 0x09
    383a:	88 2f       	mov	r24, r24
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	80 71       	andi	r24, 0x10	; 16
    3840:	99 27       	eor	r25, r25
    3842:	21 e0       	ldi	r18, 0x01	; 1
    3844:	89 2b       	or	r24, r25
    3846:	09 f4       	brne	.+2      	; 0x384a <__vector_6+0x6a>
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	22 23       	and	r18, r18
    384c:	49 f0       	breq	.+18     	; 0x3860 <__vector_6+0x80>
	{
		count++;
    384e:	80 91 79 45 	lds	r24, 0x4579	; 0x804579 <_ZZ10__vector_6E5count>
    3852:	90 91 7a 45 	lds	r25, 0x457A	; 0x80457a <_ZZ10__vector_6E5count+0x1>
    3856:	01 96       	adiw	r24, 0x01	; 1
    3858:	80 93 79 45 	sts	0x4579, r24	; 0x804579 <_ZZ10__vector_6E5count>
    385c:	90 93 7a 45 	sts	0x457A, r25	; 0x80457a <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	94 e0       	ldi	r25, 0x04	; 4
    3864:	2f ef       	ldi	r18, 0xFF	; 255
    3866:	fc 01       	movw	r30, r24
    3868:	21 87       	std	Z+9, r18	; 0x09
}
    386a:	00 00       	nop
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	ff 91       	pop	r31
    3872:	ef 91       	pop	r30
    3874:	9f 91       	pop	r25
    3876:	8f 91       	pop	r24
    3878:	2f 91       	pop	r18
    387a:	0f 90       	pop	r0
    387c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    3880:	0f 90       	pop	r0
    3882:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    3886:	0f 90       	pop	r0
    3888:	1f 90       	pop	r1
    388a:	18 95       	reti

0000388c <_Z10BINIO_initv>:

void BINIO_init(void)
{
    388c:	cf 93       	push	r28
    388e:	df 93       	push	r29
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62
	/* PORTA *************************************************************************************/
	
	/* PORTA.PIN0 = TXDO USART */
	/* PORTA.PIN1 = RXD0 USART */
	
	PORTA_set_pin_dir(RTC_SQW, PORT_DIR_IN);
    3894:	60 e0       	ldi	r22, 0x00	; 0
    3896:	82 e0       	ldi	r24, 0x02	; 2
    3898:	0e 94 88 18 	call	0x3110	; 0x3110 <PORTA_set_pin_dir>
//	PORTA_set_pin_pull_mode(RTC_SQW, PORT_PULL_UP);
	PORTA_pin_set_isc(RTC_SQW, PORT_ISC_RISING_gc);
    389c:	62 e0       	ldi	r22, 0x02	; 2
    389e:	82 e0       	ldi	r24, 0x02	; 2
    38a0:	0e 94 65 18 	call	0x30ca	; 0x30ca <PORTA_pin_set_isc>
	
	PORTA_set_pin_dir(FET_DRIVER_ENABLE, PORT_DIR_OUT);
    38a4:	61 e0       	ldi	r22, 0x01	; 1
    38a6:	83 e0       	ldi	r24, 0x03	; 3
    38a8:	0e 94 88 18 	call	0x3110	; 0x3110 <PORTA_set_pin_dir>
	PORTA_set_pin_level(FET_DRIVER_ENABLE, LOW);
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	83 e0       	ldi	r24, 0x03	; 3
    38b0:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	
	PORTA_set_pin_dir(ANT_CONNECT_INT, PORT_DIR_IN);
    38b4:	60 e0       	ldi	r22, 0x00	; 0
    38b6:	84 e0       	ldi	r24, 0x04	; 4
    38b8:	0e 94 88 18 	call	0x3110	; 0x3110 <PORTA_set_pin_dir>
	PORTA_set_pin_pull_mode(ANT_CONNECT_INT, PORT_PULL_UP);
    38bc:	61 e0       	ldi	r22, 0x01	; 1
    38be:	84 e0       	ldi	r24, 0x04	; 4
    38c0:	0e 94 34 18 	call	0x3068	; 0x3068 <PORTA_set_pin_pull_mode>
	PORTA_pin_set_isc(ANT_CONNECT_INT, PORT_ISC_FALLING_gc);
    38c4:	63 e0       	ldi	r22, 0x03	; 3
    38c6:	84 e0       	ldi	r24, 0x04	; 4
    38c8:	0e 94 65 18 	call	0x30ca	; 0x30ca <PORTA_pin_set_isc>

	PORTA_set_pin_dir(WIFI_ENABLE, PORT_DIR_OUT);
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	85 e0       	ldi	r24, 0x05	; 5
    38d0:	0e 94 88 18 	call	0x3110	; 0x3110 <PORTA_set_pin_dir>
	PORTA_set_pin_level(WIFI_ENABLE, LOW);
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	85 e0       	ldi	r24, 0x05	; 5
    38d8:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	
	PORTA_set_pin_dir(WIFI_RESET, PORT_DIR_OUT);
    38dc:	61 e0       	ldi	r22, 0x01	; 1
    38de:	86 e0       	ldi	r24, 0x06	; 6
    38e0:	0e 94 88 18 	call	0x3110	; 0x3110 <PORTA_set_pin_dir>
	PORTA_set_pin_level(WIFI_RESET, LOW);
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	86 e0       	ldi	r24, 0x06	; 6
    38e8:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	
	PORTA_set_pin_dir(V3V3_PWR_ENABLE, PORT_DIR_OUT);
    38ec:	61 e0       	ldi	r22, 0x01	; 1
    38ee:	87 e0       	ldi	r24, 0x07	; 7
    38f0:	0e 94 88 18 	call	0x3110	; 0x3110 <PORTA_set_pin_dir>
	PORTA_set_pin_level(V3V3_PWR_ENABLE, LOW);
    38f4:	60 e0       	ldi	r22, 0x00	; 0
    38f6:	87 e0       	ldi	r24, 0x07	; 7
    38f8:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <PORTA_set_pin_level>
	
	/* PORTB *************************************************************************************/

	PORTB_set_pin_dir(PROC_PTT_OUT, PORT_DIR_OUT);
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	0e 94 16 19 	call	0x322c	; 0x322c <PORTB_set_pin_dir>
	PORTB_set_pin_level(PROC_PTT_OUT, LOW);
    3904:	60 e0       	ldi	r22, 0x00	; 0
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <PORTB_set_pin_level>
	
	PORTB_set_pin_dir(PROC_TONE_OUT, PORT_DIR_OUT);
    390c:	61 e0       	ldi	r22, 0x01	; 1
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	0e 94 16 19 	call	0x322c	; 0x322c <PORTB_set_pin_dir>
	PORTB_set_pin_level(PROC_TONE_OUT, LOW);
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <PORTB_set_pin_level>
	
	/* PORTB.PIN2 = SDA1 I2C */
	/* PORTB.PIN3 = SCL1 I2C */
	PORTB_set_pin_dir(MAIN_PWR_ENABLE, PORT_DIR_OUT);
    391c:	61 e0       	ldi	r22, 0x01	; 1
    391e:	84 e0       	ldi	r24, 0x04	; 4
    3920:	0e 94 16 19 	call	0x322c	; 0x322c <PORTB_set_pin_dir>
	PORTB_set_pin_level(MAIN_PWR_ENABLE, LOW);
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	84 e0       	ldi	r24, 0x04	; 4
    3928:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <PORTB_set_pin_level>
	
	PORTB_set_pin_dir(TX_FINAL_VOLTAGE_ENABLE, PORT_DIR_OUT);
    392c:	61 e0       	ldi	r22, 0x01	; 1
    392e:	85 e0       	ldi	r24, 0x05	; 5
    3930:	0e 94 16 19 	call	0x322c	; 0x322c <PORTB_set_pin_dir>
	PORTB_set_pin_level(TX_FINAL_VOLTAGE_ENABLE, LOW);
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	85 e0       	ldi	r24, 0x05	; 5
    3938:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <PORTB_set_pin_level>
	/* PORTC.PIN0 = TXD1 USART TO_WIFI_RX */
	/* PORTC.PIN1 = RXD1 USART FROM_WIFI_TX */
	/* PORTC.PIN2 = SDA0 I2C */
	/* PORTC.PIN3 = SCL0 I2C */

	PORTC_set_pin_dir(X32KHZ_SQUAREWAVE, PORT_DIR_IN);
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	84 e0       	ldi	r24, 0x04	; 4
    3940:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <PORTC_set_pin_dir>
	
	PORTC_set_pin_dir(LED_GREEN, PORT_DIR_OUT);
    3944:	61 e0       	ldi	r22, 0x01	; 1
    3946:	85 e0       	ldi	r24, 0x05	; 5
    3948:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <PORTC_set_pin_dir>
	PORTC_set_pin_level(LED_GREEN, LOW);
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	85 e0       	ldi	r24, 0x05	; 5
    3950:	0e 94 4c 1a 	call	0x3498	; 0x3498 <PORTC_set_pin_level>
	
	PORTC_set_pin_dir(LED_RED, PORT_DIR_OUT);
    3954:	61 e0       	ldi	r22, 0x01	; 1
    3956:	86 e0       	ldi	r24, 0x06	; 6
    3958:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <PORTC_set_pin_dir>
	PORTC_set_pin_level(LED_RED, LOW);
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	86 e0       	ldi	r24, 0x06	; 6
    3960:	0e 94 4c 1a 	call	0x3498	; 0x3498 <PORTC_set_pin_level>
	
	PORTC_set_pin_dir(SWITCH, PORT_DIR_IN);
    3964:	60 e0       	ldi	r22, 0x00	; 0
    3966:	87 e0       	ldi	r24, 0x07	; 7
    3968:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <PORTC_set_pin_dir>
	PORTC_set_pin_pull_mode(SWITCH, PORT_PULL_UP);
    396c:	61 e0       	ldi	r22, 0x01	; 1
    396e:	87 e0       	ldi	r24, 0x07	; 7
    3970:	0e 94 a4 19 	call	0x3348	; 0x3348 <PORTC_set_pin_pull_mode>
	PORTC_pin_set_isc(SWITCH, PORT_ISC_FALLING_gc);
    3974:	63 e0       	ldi	r22, 0x03	; 3
    3976:	87 e0       	ldi	r24, 0x07	; 7
    3978:	0e 94 d5 19 	call	0x33aa	; 0x33aa <PORTC_pin_set_isc>
// 	/* PORTD.PIN4 = ACD4 Audio in TX_12_VOLTAGE */
// 	/* PORTD.PIN5 = ACD5 Audio in TX_PA_VOLTAGE */
// 	/* PORTD.PIN6 = DAC0 voltage out DAC_OUTPUT */
// 	
// 	PORTD_set_pin_dir(WIFI_MODULE_DETECT, PORT_DIR_IN); /* Detect presence of Huzzah module */
	PORTC_set_pin_pull_mode(WIFI_MODULE_DETECT, PORT_PULL_OFF);
    397c:	60 e0       	ldi	r22, 0x00	; 0
    397e:	87 e0       	ldi	r24, 0x07	; 7
    3980:	0e 94 a4 19 	call	0x3348	; 0x3348 <PORTC_set_pin_pull_mode>

	/* PORTE *************************************************************************************/
	PORTE_set_pin_dir(0, PORT_DIR_OFF); /* Unused */
    3984:	62 e0       	ldi	r22, 0x02	; 2
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	0e 94 a5 1a 	call	0x354a	; 0x354a <PORTE_set_pin_dir>
	PORTE_set_pin_dir(1, PORT_DIR_OFF); /* Unused */
    398c:	62 e0       	ldi	r22, 0x02	; 2
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	0e 94 a5 1a 	call	0x354a	; 0x354a <PORTE_set_pin_dir>
	PORTE_set_pin_dir(2, PORT_DIR_OFF); /* Unused */
    3994:	62 e0       	ldi	r22, 0x02	; 2
    3996:	82 e0       	ldi	r24, 0x02	; 2
    3998:	0e 94 a5 1a 	call	0x354a	; 0x354a <PORTE_set_pin_dir>
	PORTE_set_pin_dir(3, PORT_DIR_OFF); /* Unused */
    399c:	62 e0       	ldi	r22, 0x02	; 2
    399e:	83 e0       	ldi	r24, 0x03	; 3
    39a0:	0e 94 a5 1a 	call	0x354a	; 0x354a <PORTE_set_pin_dir>

	/* PORTF *************************************************************************************/
	PORTF_set_pin_dir(2, PORT_DIR_OFF); /* Unused */
    39a4:	62 e0       	ldi	r22, 0x02	; 2
    39a6:	82 e0       	ldi	r24, 0x02	; 2
    39a8:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <PORTF_set_pin_dir>
	PORTF_set_pin_dir(3, PORT_DIR_OFF); /* Unused */
    39ac:	62 e0       	ldi	r22, 0x02	; 2
    39ae:	83 e0       	ldi	r24, 0x03	; 3
    39b0:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <PORTF_set_pin_dir>
	PORTF_set_pin_dir(4, PORT_DIR_OFF); /* Unused */
    39b4:	62 e0       	ldi	r22, 0x02	; 2
    39b6:	84 e0       	ldi	r24, 0x04	; 4
    39b8:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <PORTF_set_pin_dir>
	PORTF_set_pin_dir(5, PORT_DIR_OFF); /* Unused */
    39bc:	62 e0       	ldi	r22, 0x02	; 2
    39be:	85 e0       	ldi	r24, 0x05	; 5
    39c0:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <PORTF_set_pin_dir>
	/* PORTF.PIN6 = Reset */
}
    39c4:	00 00       	nop
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	08 95       	ret

000039cc <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
    39cc:	cf 93       	push	r28
    39ce:	df 93       	push	r29
    39d0:	cd b7       	in	r28, 0x3d	; 61
    39d2:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    39d4:	80 e8       	ldi	r24, 0x80	; 128
    39d6:	90 e0       	ldi	r25, 0x00	; 0
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    39d8:	fc 01       	movw	r30, r24
    39da:	11 86       	std	Z+9, r1	; 0x09

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
    39dc:	80 e0       	ldi	r24, 0x00	; 0
}
    39de:	df 91       	pop	r29
    39e0:	cf 91       	pop	r28
    39e2:	08 95       	ret

000039e4 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	00 d0       	rcall	.+0      	; 0x39ea <ccp_write_io+0x6>
    39ea:	1f 92       	push	r1
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	89 83       	std	Y+1, r24	; 0x01
    39f2:	9a 83       	std	Y+2, r25	; 0x02
    39f4:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	9a 81       	ldd	r25, Y+2	; 0x02
    39fa:	4b 81       	ldd	r20, Y+3	; 0x03
    39fc:	68 ed       	ldi	r22, 0xD8	; 216
    39fe:	0e 94 10 30 	call	0x6020	; 0x6020 <protected_write_io>
}
    3a02:	00 00       	nop
    3a04:	23 96       	adiw	r28, 0x03	; 3
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	df 91       	pop	r29
    3a0c:	cf 91       	pop	r28
    3a0e:	08 95       	ret

00003a10 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
#define CLK_SPEED_24MHZ

#ifdef CLK_SPEED_24MHZ
	ccp_write_io((void*)&(CLKCTRL.OSCHFCTRLA),CLKCTRL_FRQSEL_24M_gc /* 4 */
			 | 0 << CLKCTRL_AUTOTUNE_bp /* Auto-Tune enable: disabled */
			 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);
    3a18:	64 e2       	ldi	r22, 0x24	; 36
    3a1a:	88 e6       	ldi	r24, 0x68	; 104
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
    3a22:	80 e0       	ldi	r24, 0x00	; 0
}
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	08 95       	ret

00003a2a <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    3a32:	78 94       	sei

	return 0;
    3a34:	80 e0       	ldi	r24, 0x00	; 0
}
    3a36:	df 91       	pop	r29
    3a38:	cf 91       	pop	r28
    3a3a:	08 95       	ret

00003a3c <_ZL9VREF_initv>:
#define LSB_MASK                 (0x03)



static void VREF_init(void)
{
    3a3c:	cf 93       	push	r28
    3a3e:	df 93       	push	r29
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    3a44:	80 ea       	ldi	r24, 0xA0	; 160
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	23 e0       	ldi	r18, 0x03	; 3
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	22 83       	std	Z+2, r18	; 0x02
	/* Wait VREF start-up time */
//	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}
    3a4e:	00 00       	nop
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	08 95       	ret

00003a56 <_Z9DAC0_initv>:

void DAC0_init(void)
{
    3a56:	cf 93       	push	r28
    3a58:	df 93       	push	r29
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
	VREF_init();
    3a5e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    3a62:	80 e6       	ldi	r24, 0x60	; 96
    3a64:	94 e0       	ldi	r25, 0x04	; 4
    3a66:	20 e6       	ldi	r18, 0x60	; 96
    3a68:	34 e0       	ldi	r19, 0x04	; 4
    3a6a:	f9 01       	movw	r30, r18
    3a6c:	26 89       	ldd	r18, Z+22	; 0x16
    3a6e:	28 7f       	andi	r18, 0xF8	; 248
    3a70:	fc 01       	movw	r30, r24
    3a72:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    3a74:	80 e6       	ldi	r24, 0x60	; 96
    3a76:	94 e0       	ldi	r25, 0x04	; 4
    3a78:	20 e6       	ldi	r18, 0x60	; 96
    3a7a:	34 e0       	ldi	r19, 0x04	; 4
    3a7c:	f9 01       	movw	r30, r18
    3a7e:	26 89       	ldd	r18, Z+22	; 0x16
    3a80:	24 60       	ori	r18, 0x04	; 4
    3a82:	fc 01       	movw	r30, r24
    3a84:	26 8b       	std	Z+22, r18	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    3a86:	80 e6       	ldi	r24, 0x60	; 96
    3a88:	94 e0       	ldi	r25, 0x04	; 4
    3a8a:	20 e6       	ldi	r18, 0x60	; 96
    3a8c:	34 e0       	ldi	r19, 0x04	; 4
    3a8e:	f9 01       	movw	r30, r18
    3a90:	26 89       	ldd	r18, Z+22	; 0x16
    3a92:	27 7f       	andi	r18, 0xF7	; 247
    3a94:	fc 01       	movw	r30, r24
    3a96:	26 8b       	std	Z+22, r18	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
    3a98:	80 ea       	ldi	r24, 0xA0	; 160
    3a9a:	96 e0       	ldi	r25, 0x06	; 6
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    3a9c:	21 ec       	ldi	r18, 0xC1	; 193
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	20 83       	st	Z, r18
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <_Z11DAC0_setValj>
}
    3aaa:	00 00       	nop
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	08 95       	ret

00003ab2 <_Z11DAC0_setValj>:

void DAC0_setVal(uint16_t value)
{
    3ab2:	cf 93       	push	r28
    3ab4:	df 93       	push	r29
    3ab6:	00 d0       	rcall	.+0      	; 0x3ab8 <_Z11DAC0_setValj+0x6>
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    3abc:	89 83       	std	Y+1, r24	; 0x01
    3abe:	9a 83       	std	Y+2, r25	; 0x02
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    3ac0:	80 ea       	ldi	r24, 0xA0	; 160
    3ac2:	96 e0       	ldi	r25, 0x06	; 6
    3ac4:	29 81       	ldd	r18, Y+1	; 0x01
    3ac6:	22 95       	swap	r18
    3ac8:	22 0f       	add	r18, r18
    3aca:	22 0f       	add	r18, r18
    3acc:	20 7c       	andi	r18, 0xC0	; 192
    3ace:	fc 01       	movw	r30, r24
    3ad0:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    3ad2:	80 ea       	ldi	r24, 0xA0	; 160
    3ad4:	96 e0       	ldi	r25, 0x06	; 6
    3ad6:	29 81       	ldd	r18, Y+1	; 0x01
    3ad8:	3a 81       	ldd	r19, Y+2	; 0x02
    3ada:	36 95       	lsr	r19
    3adc:	27 95       	ror	r18
    3ade:	36 95       	lsr	r19
    3ae0:	27 95       	ror	r18
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	23 83       	std	Z+3, r18	; 0x03
}
    3ae6:	00 00       	nop
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	08 95       	ret

00003af2 <PORTC_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    3af2:	cf 93       	push	r28
    3af4:	df 93       	push	r29
    3af6:	00 d0       	rcall	.+0      	; 0x3af8 <PORTC_set_pin_dir+0x6>
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
    3afc:	89 83       	std	Y+1, r24	; 0x01
    3afe:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    3b00:	8a 81       	ldd	r24, Y+2	; 0x02
    3b02:	88 2f       	mov	r24, r24
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	81 30       	cpi	r24, 0x01	; 1
    3b08:	91 05       	cpc	r25, r1
    3b0a:	e1 f0       	breq	.+56     	; 0x3b44 <PORTC_set_pin_dir+0x52>
    3b0c:	82 30       	cpi	r24, 0x02	; 2
    3b0e:	91 05       	cpc	r25, r1
    3b10:	71 f1       	breq	.+92     	; 0x3b6e <PORTC_set_pin_dir+0x7c>
    3b12:	89 2b       	or	r24, r25
    3b14:	09 f0       	breq	.+2      	; 0x3b18 <PORTC_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    3b16:	3b c0       	rjmp	.+118    	; 0x3b8e <PORTC_set_pin_dir+0x9c>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    3b18:	88 e0       	ldi	r24, 0x08	; 8
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	28 e0       	ldi	r18, 0x08	; 8
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	f9 01       	movw	r30, r18
    3b22:	20 81       	ld	r18, Z
    3b24:	62 2f       	mov	r22, r18
    3b26:	29 81       	ldd	r18, Y+1	; 0x01
    3b28:	42 2f       	mov	r20, r18
    3b2a:	50 e0       	ldi	r21, 0x00	; 0
    3b2c:	21 e0       	ldi	r18, 0x01	; 1
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	02 c0       	rjmp	.+4      	; 0x3b36 <PORTC_set_pin_dir+0x44>
    3b32:	22 0f       	add	r18, r18
    3b34:	33 1f       	adc	r19, r19
    3b36:	4a 95       	dec	r20
    3b38:	e2 f7       	brpl	.-8      	; 0x3b32 <PORTC_set_pin_dir+0x40>
    3b3a:	20 95       	com	r18
    3b3c:	26 23       	and	r18, r22
    3b3e:	fc 01       	movw	r30, r24
    3b40:	20 83       	st	Z, r18
		break;
    3b42:	25 c0       	rjmp	.+74     	; 0x3b8e <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    3b44:	88 e0       	ldi	r24, 0x08	; 8
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	28 e0       	ldi	r18, 0x08	; 8
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	f9 01       	movw	r30, r18
    3b4e:	20 81       	ld	r18, Z
    3b50:	62 2f       	mov	r22, r18
    3b52:	29 81       	ldd	r18, Y+1	; 0x01
    3b54:	42 2f       	mov	r20, r18
    3b56:	50 e0       	ldi	r21, 0x00	; 0
    3b58:	21 e0       	ldi	r18, 0x01	; 1
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	02 c0       	rjmp	.+4      	; 0x3b62 <PORTC_set_pin_dir+0x70>
    3b5e:	22 0f       	add	r18, r18
    3b60:	33 1f       	adc	r19, r19
    3b62:	4a 95       	dec	r20
    3b64:	e2 f7       	brpl	.-8      	; 0x3b5e <PORTC_set_pin_dir+0x6c>
    3b66:	26 2b       	or	r18, r22
    3b68:	fc 01       	movw	r30, r24
    3b6a:	20 83       	st	Z, r18
		break;
    3b6c:	10 c0       	rjmp	.+32     	; 0x3b8e <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	88 2f       	mov	r24, r24
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	80 5b       	subi	r24, 0xB0	; 176
    3b76:	9b 4f       	sbci	r25, 0xFB	; 251
    3b78:	29 81       	ldd	r18, Y+1	; 0x01
    3b7a:	22 2f       	mov	r18, r18
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	20 5b       	subi	r18, 0xB0	; 176
    3b80:	3b 4f       	sbci	r19, 0xFB	; 251
    3b82:	f9 01       	movw	r30, r18
    3b84:	20 81       	ld	r18, Z
    3b86:	28 60       	ori	r18, 0x08	; 8
    3b88:	fc 01       	movw	r30, r24
    3b8a:	20 83       	st	Z, r18
		break;
    3b8c:	00 00       	nop
	default:
		break;
	}
}
    3b8e:	00 00       	nop
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	08 95       	ret

00003b9a <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
    3b9a:	cf 93       	push	r28
    3b9c:	df 93       	push	r29
    3b9e:	00 d0       	rcall	.+0      	; 0x3ba0 <PORTC_set_pin_level+0x6>
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
    3ba4:	89 83       	std	Y+1, r24	; 0x01
    3ba6:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    3ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    3baa:	88 23       	and	r24, r24
    3bac:	a9 f0       	breq	.+42     	; 0x3bd8 <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
    3bae:	88 e0       	ldi	r24, 0x08	; 8
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	28 e0       	ldi	r18, 0x08	; 8
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	f9 01       	movw	r30, r18
    3bb8:	21 81       	ldd	r18, Z+1	; 0x01
    3bba:	62 2f       	mov	r22, r18
    3bbc:	29 81       	ldd	r18, Y+1	; 0x01
    3bbe:	42 2f       	mov	r20, r18
    3bc0:	50 e0       	ldi	r21, 0x00	; 0
    3bc2:	21 e0       	ldi	r18, 0x01	; 1
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	02 c0       	rjmp	.+4      	; 0x3bcc <PORTC_set_pin_level+0x32>
    3bc8:	22 0f       	add	r18, r18
    3bca:	33 1f       	adc	r19, r19
    3bcc:	4a 95       	dec	r20
    3bce:	e2 f7       	brpl	.-8      	; 0x3bc8 <PORTC_set_pin_level+0x2e>
    3bd0:	26 2b       	or	r18, r22
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
    3bd6:	15 c0       	rjmp	.+42     	; 0x3c02 <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    3bd8:	88 e0       	ldi	r24, 0x08	; 8
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	28 e0       	ldi	r18, 0x08	; 8
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	f9 01       	movw	r30, r18
    3be2:	21 81       	ldd	r18, Z+1	; 0x01
    3be4:	62 2f       	mov	r22, r18
    3be6:	29 81       	ldd	r18, Y+1	; 0x01
    3be8:	42 2f       	mov	r20, r18
    3bea:	50 e0       	ldi	r21, 0x00	; 0
    3bec:	21 e0       	ldi	r18, 0x01	; 1
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	02 c0       	rjmp	.+4      	; 0x3bf6 <PORTC_set_pin_level+0x5c>
    3bf2:	22 0f       	add	r18, r18
    3bf4:	33 1f       	adc	r19, r19
    3bf6:	4a 95       	dec	r20
    3bf8:	e2 f7       	brpl	.-8      	; 0x3bf2 <PORTC_set_pin_level+0x58>
    3bfa:	20 95       	com	r18
    3bfc:	26 23       	and	r18, r22
    3bfe:	fc 01       	movw	r30, r24
    3c00:	21 83       	std	Z+1, r18	; 0x01
	}
}
    3c02:	00 00       	nop
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	df 91       	pop	r29
    3c0a:	cf 91       	pop	r28
    3c0c:	08 95       	ret

00003c0e <_ZL11LED_set_dir8port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED_set_dir(const enum port_dir dir)
{
    3c0e:	cf 93       	push	r28
    3c10:	df 93       	push	r29
    3c12:	1f 92       	push	r1
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(6, dir);
    3c1a:	69 81       	ldd	r22, Y+1	; 0x01
    3c1c:	86 e0       	ldi	r24, 0x06	; 6
    3c1e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <PORTC_set_pin_dir>
}
    3c22:	00 00       	nop
    3c24:	0f 90       	pop	r0
    3c26:	df 91       	pop	r29
    3c28:	cf 91       	pop	r28
    3c2a:	08 95       	ret

00003c2c <_ZL13LED_set_levelb>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_set_level(const bool level)
{
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	1f 92       	push	r1
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
    3c36:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(6, !level); /* Low == LED on */
    3c38:	99 81       	ldd	r25, Y+1	; 0x01
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	89 27       	eor	r24, r25
    3c3e:	68 2f       	mov	r22, r24
    3c40:	86 e0       	ldi	r24, 0x06	; 6
    3c42:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <PORTC_set_pin_level>
}
    3c46:	00 00       	nop
    3c48:	0f 90       	pop	r0
    3c4a:	df 91       	pop	r29
    3c4c:	cf 91       	pop	r28
    3c4e:	08 95       	ret

00003c50 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    3c50:	cf 93       	push	r28
    3c52:	df 93       	push	r29
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	26 97       	sbiw	r28, 0x06	; 6
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    3c5e:	19 82       	std	Y+1, r1	; 0x01
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
    3c62:	88 30       	cpi	r24, 0x08	; 8
    3c64:	98 f4       	brcc	.+38     	; 0x3c8c <mcu_init+0x3c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	88 2f       	mov	r24, r24
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	80 5f       	subi	r24, 0xF0	; 240
    3c6e:	9b 4f       	sbci	r25, 0xFB	; 251
    3c70:	29 81       	ldd	r18, Y+1	; 0x01
    3c72:	22 2f       	mov	r18, r18
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	20 5f       	subi	r18, 0xF0	; 240
    3c78:	3b 4f       	sbci	r19, 0xFB	; 251
    3c7a:	f9 01       	movw	r30, r18
    3c7c:	20 81       	ld	r18, Z
    3c7e:	28 60       	ori	r18, 0x08	; 8
    3c80:	fc 01       	movw	r30, r24
    3c82:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	8f 5f       	subi	r24, 0xFF	; 255
    3c88:	89 83       	std	Y+1, r24	; 0x01
    3c8a:	ea cf       	rjmp	.-44     	; 0x3c60 <mcu_init+0x10>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3c8c:	1a 82       	std	Y+2, r1	; 0x02
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	88 30       	cpi	r24, 0x08	; 8
    3c92:	98 f4       	brcc	.+38     	; 0x3cba <mcu_init+0x6a>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	88 2f       	mov	r24, r24
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	80 5d       	subi	r24, 0xD0	; 208
    3c9c:	9b 4f       	sbci	r25, 0xFB	; 251
    3c9e:	2a 81       	ldd	r18, Y+2	; 0x02
    3ca0:	22 2f       	mov	r18, r18
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	20 5d       	subi	r18, 0xD0	; 208
    3ca6:	3b 4f       	sbci	r19, 0xFB	; 251
    3ca8:	f9 01       	movw	r30, r18
    3caa:	20 81       	ld	r18, Z
    3cac:	28 60       	ori	r18, 0x08	; 8
    3cae:	fc 01       	movw	r30, r24
    3cb0:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb4:	8f 5f       	subi	r24, 0xFF	; 255
    3cb6:	8a 83       	std	Y+2, r24	; 0x02
    3cb8:	ea cf       	rjmp	.-44     	; 0x3c8e <mcu_init+0x3e>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3cba:	1b 82       	std	Y+3, r1	; 0x03
    3cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbe:	88 30       	cpi	r24, 0x08	; 8
    3cc0:	98 f4       	brcc	.+38     	; 0x3ce8 <mcu_init+0x98>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	88 2f       	mov	r24, r24
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	80 5b       	subi	r24, 0xB0	; 176
    3cca:	9b 4f       	sbci	r25, 0xFB	; 251
    3ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    3cce:	22 2f       	mov	r18, r18
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	20 5b       	subi	r18, 0xB0	; 176
    3cd4:	3b 4f       	sbci	r19, 0xFB	; 251
    3cd6:	f9 01       	movw	r30, r18
    3cd8:	20 81       	ld	r18, Z
    3cda:	28 60       	ori	r18, 0x08	; 8
    3cdc:	fc 01       	movw	r30, r24
    3cde:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	8f 5f       	subi	r24, 0xFF	; 255
    3ce4:	8b 83       	std	Y+3, r24	; 0x03
    3ce6:	ea cf       	rjmp	.-44     	; 0x3cbc <mcu_init+0x6c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3ce8:	1c 82       	std	Y+4, r1	; 0x04
    3cea:	8c 81       	ldd	r24, Y+4	; 0x04
    3cec:	88 30       	cpi	r24, 0x08	; 8
    3cee:	98 f4       	brcc	.+38     	; 0x3d16 <mcu_init+0xc6>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    3cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    3cf2:	88 2f       	mov	r24, r24
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	80 59       	subi	r24, 0x90	; 144
    3cf8:	9b 4f       	sbci	r25, 0xFB	; 251
    3cfa:	2c 81       	ldd	r18, Y+4	; 0x04
    3cfc:	22 2f       	mov	r18, r18
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	20 59       	subi	r18, 0x90	; 144
    3d02:	3b 4f       	sbci	r19, 0xFB	; 251
    3d04:	f9 01       	movw	r30, r18
    3d06:	20 81       	ld	r18, Z
    3d08:	28 60       	ori	r18, 0x08	; 8
    3d0a:	fc 01       	movw	r30, r24
    3d0c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d10:	8f 5f       	subi	r24, 0xFF	; 255
    3d12:	8c 83       	std	Y+4, r24	; 0x04
    3d14:	ea cf       	rjmp	.-44     	; 0x3cea <mcu_init+0x9a>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3d16:	1d 82       	std	Y+5, r1	; 0x05
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	88 30       	cpi	r24, 0x08	; 8
    3d1c:	98 f4       	brcc	.+38     	; 0x3d44 <mcu_init+0xf4>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    3d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d20:	88 2f       	mov	r24, r24
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	80 57       	subi	r24, 0x70	; 112
    3d26:	9b 4f       	sbci	r25, 0xFB	; 251
    3d28:	2d 81       	ldd	r18, Y+5	; 0x05
    3d2a:	22 2f       	mov	r18, r18
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	20 57       	subi	r18, 0x70	; 112
    3d30:	3b 4f       	sbci	r19, 0xFB	; 251
    3d32:	f9 01       	movw	r30, r18
    3d34:	20 81       	ld	r18, Z
    3d36:	28 60       	ori	r18, 0x08	; 8
    3d38:	fc 01       	movw	r30, r24
    3d3a:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3e:	8f 5f       	subi	r24, 0xFF	; 255
    3d40:	8d 83       	std	Y+5, r24	; 0x05
    3d42:	ea cf       	rjmp	.-44     	; 0x3d18 <mcu_init+0xc8>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3d44:	1e 82       	std	Y+6, r1	; 0x06
    3d46:	8e 81       	ldd	r24, Y+6	; 0x06
    3d48:	88 30       	cpi	r24, 0x08	; 8
    3d4a:	98 f4       	brcc	.+38     	; 0x3d72 <mcu_init+0x122>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    3d4c:	8e 81       	ldd	r24, Y+6	; 0x06
    3d4e:	88 2f       	mov	r24, r24
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	80 55       	subi	r24, 0x50	; 80
    3d54:	9b 4f       	sbci	r25, 0xFB	; 251
    3d56:	2e 81       	ldd	r18, Y+6	; 0x06
    3d58:	22 2f       	mov	r18, r18
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	20 55       	subi	r18, 0x50	; 80
    3d5e:	3b 4f       	sbci	r19, 0xFB	; 251
    3d60:	f9 01       	movw	r30, r18
    3d62:	20 81       	ld	r18, Z
    3d64:	28 60       	ori	r18, 0x08	; 8
    3d66:	fc 01       	movw	r30, r24
    3d68:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    3d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d6c:	8f 5f       	subi	r24, 0xFF	; 255
    3d6e:	8e 83       	std	Y+6, r24	; 0x06
    3d70:	ea cf       	rjmp	.-44     	; 0x3d46 <mcu_init+0xf6>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    3d72:	00 00       	nop
    3d74:	26 96       	adiw	r28, 0x06	; 6
    3d76:	cd bf       	out	0x3d, r28	; 61
    3d78:	de bf       	out	0x3e, r29	; 62
    3d7a:	df 91       	pop	r29
    3d7c:	cf 91       	pop	r28
    3d7e:	08 95       	ret

00003d80 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    3d80:	cf 93       	push	r28
    3d82:	df 93       	push	r29
    3d84:	cd b7       	in	r28, 0x3d	; 61
    3d86:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    3d88:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    3d8c:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <CLKCTRL_init>
	TIMERA_init(); /* Timers must be initialized before utility_delay functions will work */
    3d90:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <TIMERA_init>
//	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    3d94:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <CPUINT_init>
	BINIO_init();
    3d98:	0e 94 46 1c 	call	0x388c	; 0x388c <_Z10BINIO_initv>

	LED_set_dir(PORT_DIR_OUT);
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <_ZL11LED_set_dir8port_dir>
	LED_set_level(OFF);
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZL13LED_set_levelb>

	SLPCTRL_init();
    3da8:	0e 94 ac 3c 	call	0x7958	; 0x7958 <SLPCTRL_init>
//	DAC0_init();

//	linkbus_init(LB_BAUD, LINKBUS_USART);
//	serialbus_init(SB_BAUD, SERIALBUS_USART);

	BOD_init();
    3dac:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <BOD_init>
}
    3db0:	00 00       	nop
    3db2:	df 91       	pop	r29
    3db4:	cf 91       	pop	r28
    3db6:	08 95       	ret

00003db8 <ds3231_init>:
		bool failure;
		int8_t data[1];
		
		while(tries-- && (failure = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
		return(data[0]);
	}
    3db8:	cf 93       	push	r28
    3dba:	df 93       	push	r29
    3dbc:	cd b7       	in	r28, 0x3d	; 61
    3dbe:	de b7       	in	r29, 0x3e	; 62
    3dc0:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <I2C_0_Init>
    3dc4:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <ds3231_responding>
    3dc8:	98 2f       	mov	r25, r24
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	89 27       	eor	r24, r25
    3dce:	df 91       	pop	r29
    3dd0:	cf 91       	pop	r28
    3dd2:	08 95       	ret

00003dd4 <ds3231_get_epoch>:
    3dd4:	ef 92       	push	r14
    3dd6:	ff 92       	push	r15
    3dd8:	0f 93       	push	r16
    3dda:	1f 93       	push	r17
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	a5 97       	sbiw	r28, 0x25	; 37
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	8c a3       	std	Y+36, r24	; 0x24
    3dec:	9d a3       	std	Y+37, r25	; 0x25
    3dee:	8a e0       	ldi	r24, 0x0A	; 10
    3df0:	89 83       	std	Y+1, r24	; 0x01
    3df2:	1a 82       	std	Y+2, r1	; 0x02
    3df4:	1b 82       	std	Y+3, r1	; 0x03
    3df6:	1c 82       	std	Y+4, r1	; 0x04
    3df8:	1d 82       	std	Y+5, r1	; 0x05
    3dfa:	27 e0       	ldi	r18, 0x07	; 7
    3dfc:	ce 01       	movw	r24, r28
    3dfe:	41 96       	adiw	r24, 0x11	; 17
    3e00:	fc 01       	movw	r30, r24
    3e02:	32 2f       	mov	r19, r18
    3e04:	11 92       	st	Z+, r1
    3e06:	3a 95       	dec	r19
    3e08:	e9 f7       	brne	.-6      	; 0x3e04 <ds3231_get_epoch+0x30>
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	9f ef       	ldi	r25, 0xFF	; 255
    3e0e:	98 0f       	add	r25, r24
    3e10:	99 83       	std	Y+1, r25	; 0x01
    3e12:	88 23       	and	r24, r24
    3e14:	99 f0       	breq	.+38     	; 0x3e3c <ds3231_get_epoch+0x68>
    3e16:	ce 01       	movw	r24, r28
    3e18:	41 96       	adiw	r24, 0x11	; 17
    3e1a:	27 e0       	ldi	r18, 0x07	; 7
    3e1c:	ac 01       	movw	r20, r24
    3e1e:	60 e0       	ldi	r22, 0x00	; 0
    3e20:	80 ed       	ldi	r24, 0xD0	; 208
    3e22:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <I2C_0_GetData>
    3e26:	98 2f       	mov	r25, r24
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	97 30       	cpi	r25, 0x07	; 7
    3e2c:	09 f4       	brne	.+2      	; 0x3e30 <ds3231_get_epoch+0x5c>
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	8e 83       	std	Y+6, r24	; 0x06
    3e32:	8e 81       	ldd	r24, Y+6	; 0x06
    3e34:	88 23       	and	r24, r24
    3e36:	11 f0       	breq	.+4      	; 0x3e3c <ds3231_get_epoch+0x68>
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	01 c0       	rjmp	.+2      	; 0x3e3e <ds3231_get_epoch+0x6a>
    3e3c:	80 e0       	ldi	r24, 0x00	; 0
    3e3e:	88 23       	and	r24, r24
    3e40:	09 f0       	breq	.+2      	; 0x3e44 <ds3231_get_epoch+0x70>
    3e42:	e3 cf       	rjmp	.-58     	; 0x3e0a <ds3231_get_epoch+0x36>
    3e44:	9e 81       	ldd	r25, Y+6	; 0x06
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	89 27       	eor	r24, r25
    3e4a:	88 23       	and	r24, r24
    3e4c:	09 f4       	brne	.+2      	; 0x3e50 <ds3231_get_epoch+0x7c>
    3e4e:	7e c1       	rjmp	.+764    	; 0x414c <__DATA_REGION_LENGTH__+0x14c>
    3e50:	2c e0       	ldi	r18, 0x0C	; 12
    3e52:	ce 01       	movw	r24, r28
    3e54:	48 96       	adiw	r24, 0x18	; 24
    3e56:	fc 01       	movw	r30, r24
    3e58:	32 2f       	mov	r19, r18
    3e5a:	11 92       	st	Z+, r1
    3e5c:	3a 95       	dec	r19
    3e5e:	e9 f7       	brne	.-6      	; 0x3e5a <ds3231_get_epoch+0x86>
    3e60:	84 e6       	ldi	r24, 0x64	; 100
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	89 87       	std	Y+9, r24	; 0x09
    3e66:	9a 87       	std	Y+10, r25	; 0x0a
    3e68:	8f 89       	ldd	r24, Y+23	; 0x17
    3e6a:	88 2f       	mov	r24, r24
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	8f 70       	andi	r24, 0x0F	; 15
    3e70:	99 27       	eor	r25, r25
    3e72:	29 85       	ldd	r18, Y+9	; 0x09
    3e74:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e76:	82 0f       	add	r24, r18
    3e78:	93 1f       	adc	r25, r19
    3e7a:	89 87       	std	Y+9, r24	; 0x09
    3e7c:	9a 87       	std	Y+10, r25	; 0x0a
    3e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    3e80:	82 95       	swap	r24
    3e82:	8f 70       	andi	r24, 0x0F	; 15
    3e84:	88 2f       	mov	r24, r24
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	88 0f       	add	r24, r24
    3e8a:	99 1f       	adc	r25, r25
    3e8c:	9c 01       	movw	r18, r24
    3e8e:	22 0f       	add	r18, r18
    3e90:	33 1f       	adc	r19, r19
    3e92:	22 0f       	add	r18, r18
    3e94:	33 1f       	adc	r19, r19
    3e96:	82 0f       	add	r24, r18
    3e98:	93 1f       	adc	r25, r19
    3e9a:	29 85       	ldd	r18, Y+9	; 0x09
    3e9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e9e:	82 0f       	add	r24, r18
    3ea0:	93 1f       	adc	r25, r19
    3ea2:	89 87       	std	Y+9, r24	; 0x09
    3ea4:	9a 87       	std	Y+10, r25	; 0x0a
    3ea6:	89 85       	ldd	r24, Y+9	; 0x09
    3ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eaa:	8e 8f       	std	Y+30, r24	; 0x1e
    3eac:	9f 8f       	std	Y+31, r25	; 0x1f
    3eae:	89 85       	ldd	r24, Y+9	; 0x09
    3eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb2:	84 59       	subi	r24, 0x94	; 148
    3eb4:	98 4f       	sbci	r25, 0xF8	; 248
    3eb6:	89 87       	std	Y+9, r24	; 0x09
    3eb8:	9a 87       	std	Y+10, r25	; 0x0a
    3eba:	8e 89       	ldd	r24, Y+22	; 0x16
    3ebc:	8f 70       	andi	r24, 0x0F	; 15
    3ebe:	8b 87       	std	Y+11, r24	; 0x0b
    3ec0:	8e 89       	ldd	r24, Y+22	; 0x16
    3ec2:	82 95       	swap	r24
    3ec4:	8f 70       	andi	r24, 0x0F	; 15
    3ec6:	88 0f       	add	r24, r24
    3ec8:	98 2f       	mov	r25, r24
    3eca:	99 0f       	add	r25, r25
    3ecc:	99 0f       	add	r25, r25
    3ece:	89 0f       	add	r24, r25
    3ed0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ed2:	89 0f       	add	r24, r25
    3ed4:	8b 87       	std	Y+11, r24	; 0x0b
    3ed6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ed8:	81 50       	subi	r24, 0x01	; 1
    3eda:	8d 8f       	std	Y+29, r24	; 0x1d
    3edc:	8d 89       	ldd	r24, Y+21	; 0x15
    3ede:	8f 70       	andi	r24, 0x0F	; 15
    3ee0:	8c 87       	std	Y+12, r24	; 0x0c
    3ee2:	8d 89       	ldd	r24, Y+21	; 0x15
    3ee4:	82 95       	swap	r24
    3ee6:	8f 70       	andi	r24, 0x0F	; 15
    3ee8:	88 0f       	add	r24, r24
    3eea:	98 2f       	mov	r25, r24
    3eec:	99 0f       	add	r25, r25
    3eee:	99 0f       	add	r25, r25
    3ef0:	89 0f       	add	r24, r25
    3ef2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ef4:	89 0f       	add	r24, r25
    3ef6:	8c 87       	std	Y+12, r24	; 0x0c
    3ef8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3efa:	8b 8f       	std	Y+27, r24	; 0x1b
    3efc:	18 a2       	std	Y+32, r1	; 0x20
    3efe:	19 a2       	std	Y+33, r1	; 0x21
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	88 87       	std	Y+8, r24	; 0x08
    3f04:	98 85       	ldd	r25, Y+8	; 0x08
    3f06:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f08:	98 17       	cp	r25, r24
    3f0a:	88 f4       	brcc	.+34     	; 0x3f2e <ds3231_get_epoch+0x15a>
    3f0c:	89 85       	ldd	r24, Y+9	; 0x09
    3f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f10:	68 85       	ldd	r22, Y+8	; 0x08
    3f12:	0e 94 58 01 	call	0x2b0	; 0x2b0 <month_length>
    3f16:	28 a1       	ldd	r18, Y+32	; 0x20
    3f18:	39 a1       	ldd	r19, Y+33	; 0x21
    3f1a:	88 2f       	mov	r24, r24
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	82 0f       	add	r24, r18
    3f20:	93 1f       	adc	r25, r19
    3f22:	88 a3       	std	Y+32, r24	; 0x20
    3f24:	99 a3       	std	Y+33, r25	; 0x21
    3f26:	88 85       	ldd	r24, Y+8	; 0x08
    3f28:	8f 5f       	subi	r24, 0xFF	; 255
    3f2a:	88 87       	std	Y+8, r24	; 0x08
    3f2c:	eb cf       	rjmp	.-42     	; 0x3f04 <ds3231_get_epoch+0x130>
    3f2e:	28 a1       	ldd	r18, Y+32	; 0x20
    3f30:	39 a1       	ldd	r19, Y+33	; 0x21
    3f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f34:	08 2e       	mov	r0, r24
    3f36:	00 0c       	add	r0, r0
    3f38:	99 0b       	sbc	r25, r25
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	82 0f       	add	r24, r18
    3f3e:	93 1f       	adc	r25, r19
    3f40:	88 a3       	std	Y+32, r24	; 0x20
    3f42:	99 a3       	std	Y+33, r25	; 0x21
    3f44:	89 89       	ldd	r24, Y+17	; 0x11
    3f46:	82 95       	swap	r24
    3f48:	8f 70       	andi	r24, 0x0F	; 15
    3f4a:	88 0f       	add	r24, r24
    3f4c:	98 2f       	mov	r25, r24
    3f4e:	99 0f       	add	r25, r25
    3f50:	99 0f       	add	r25, r25
    3f52:	89 0f       	add	r24, r25
    3f54:	8d 87       	std	Y+13, r24	; 0x0d
    3f56:	89 89       	ldd	r24, Y+17	; 0x11
    3f58:	8f 70       	andi	r24, 0x0F	; 15
    3f5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f5c:	89 0f       	add	r24, r25
    3f5e:	8d 87       	std	Y+13, r24	; 0x0d
    3f60:	8a 89       	ldd	r24, Y+18	; 0x12
    3f62:	82 95       	swap	r24
    3f64:	8f 70       	andi	r24, 0x0F	; 15
    3f66:	88 0f       	add	r24, r24
    3f68:	98 2f       	mov	r25, r24
    3f6a:	99 0f       	add	r25, r25
    3f6c:	99 0f       	add	r25, r25
    3f6e:	89 0f       	add	r24, r25
    3f70:	8e 87       	std	Y+14, r24	; 0x0e
    3f72:	8a 89       	ldd	r24, Y+18	; 0x12
    3f74:	8f 70       	andi	r24, 0x0F	; 15
    3f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f78:	89 0f       	add	r24, r25
    3f7a:	8e 87       	std	Y+14, r24	; 0x0e
    3f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f7e:	88 2f       	mov	r24, r24
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	80 72       	andi	r24, 0x20	; 32
    3f84:	99 27       	eor	r25, r25
    3f86:	21 e0       	ldi	r18, 0x01	; 1
    3f88:	89 2b       	or	r24, r25
    3f8a:	09 f4       	brne	.+2      	; 0x3f8e <ds3231_get_epoch+0x1ba>
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	2f 87       	std	Y+15, r18	; 0x0f
    3f90:	8b 89       	ldd	r24, Y+19	; 0x13
    3f92:	88 2f       	mov	r24, r24
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	95 95       	asr	r25
    3f98:	87 95       	ror	r24
    3f9a:	95 95       	asr	r25
    3f9c:	87 95       	ror	r24
    3f9e:	95 95       	asr	r25
    3fa0:	87 95       	ror	r24
    3fa2:	95 95       	asr	r25
    3fa4:	87 95       	ror	r24
    3fa6:	81 70       	andi	r24, 0x01	; 1
    3fa8:	88 0f       	add	r24, r24
    3faa:	98 2f       	mov	r25, r24
    3fac:	99 0f       	add	r25, r25
    3fae:	99 0f       	add	r25, r25
    3fb0:	89 0f       	add	r24, r25
    3fb2:	8f 83       	std	Y+7, r24	; 0x07
    3fb4:	8b 89       	ldd	r24, Y+19	; 0x13
    3fb6:	8f 70       	andi	r24, 0x0F	; 15
    3fb8:	9f 81       	ldd	r25, Y+7	; 0x07
    3fba:	89 0f       	add	r24, r25
    3fbc:	8f 83       	std	Y+7, r24	; 0x07
    3fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc0:	88 2f       	mov	r24, r24
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	80 74       	andi	r24, 0x40	; 64
    3fc6:	99 27       	eor	r25, r25
    3fc8:	21 e0       	ldi	r18, 0x01	; 1
    3fca:	89 2b       	or	r24, r25
    3fcc:	09 f4       	brne	.+2      	; 0x3fd0 <ds3231_get_epoch+0x1fc>
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	28 8b       	std	Y+16, r18	; 0x10
    3fd2:	88 89       	ldd	r24, Y+16	; 0x10
    3fd4:	88 23       	and	r24, r24
    3fd6:	39 f0       	breq	.+14     	; 0x3fe6 <ds3231_get_epoch+0x212>
    3fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fda:	88 23       	and	r24, r24
    3fdc:	51 f0       	breq	.+20     	; 0x3ff2 <ds3231_get_epoch+0x21e>
    3fde:	8f 81       	ldd	r24, Y+7	; 0x07
    3fe0:	84 5f       	subi	r24, 0xF4	; 244
    3fe2:	8f 83       	std	Y+7, r24	; 0x07
    3fe4:	06 c0       	rjmp	.+12     	; 0x3ff2 <ds3231_get_epoch+0x21e>
    3fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fe8:	88 23       	and	r24, r24
    3fea:	19 f0       	breq	.+6      	; 0x3ff2 <ds3231_get_epoch+0x21e>
    3fec:	8f 81       	ldd	r24, Y+7	; 0x07
    3fee:	8c 5e       	subi	r24, 0xEC	; 236
    3ff0:	8f 83       	std	Y+7, r24	; 0x07
    3ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ff4:	8a 8f       	std	Y+26, r24	; 0x1a
    3ff6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ff8:	89 8f       	std	Y+25, r24	; 0x19
    3ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ffc:	88 8f       	std	Y+24, r24	; 0x18
    3ffe:	88 8d       	ldd	r24, Y+24	; 0x18
    4000:	28 2f       	mov	r18, r24
    4002:	88 0f       	add	r24, r24
    4004:	33 0b       	sbc	r19, r19
    4006:	89 8d       	ldd	r24, Y+25	; 0x19
    4008:	48 2f       	mov	r20, r24
    400a:	88 0f       	add	r24, r24
    400c:	55 0b       	sbc	r21, r21
    400e:	6c e3       	ldi	r22, 0x3C	; 60
    4010:	64 9f       	mul	r22, r20
    4012:	c0 01       	movw	r24, r0
    4014:	65 9f       	mul	r22, r21
    4016:	90 0d       	add	r25, r0
    4018:	11 24       	eor	r1, r1
    401a:	82 0f       	add	r24, r18
    401c:	93 1f       	adc	r25, r19
    401e:	7c 01       	movw	r14, r24
    4020:	99 0f       	add	r25, r25
    4022:	00 0b       	sbc	r16, r16
    4024:	11 0b       	sbc	r17, r17
    4026:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4028:	28 2f       	mov	r18, r24
    402a:	88 0f       	add	r24, r24
    402c:	33 0b       	sbc	r19, r19
    402e:	44 0b       	sbc	r20, r20
    4030:	55 0b       	sbc	r21, r21
    4032:	80 e1       	ldi	r24, 0x10	; 16
    4034:	9e e0       	ldi	r25, 0x0E	; 14
    4036:	dc 01       	movw	r26, r24
    4038:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <__muluhisi3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	e8 0e       	add	r14, r24
    4042:	f9 1e       	adc	r15, r25
    4044:	0a 1f       	adc	r16, r26
    4046:	1b 1f       	adc	r17, r27
    4048:	88 a1       	ldd	r24, Y+32	; 0x20
    404a:	99 a1       	ldd	r25, Y+33	; 0x21
    404c:	09 2e       	mov	r0, r25
    404e:	00 0c       	add	r0, r0
    4050:	aa 0b       	sbc	r26, r26
    4052:	bb 0b       	sbc	r27, r27
    4054:	9c 01       	movw	r18, r24
    4056:	ad 01       	movw	r20, r26
    4058:	60 e8       	ldi	r22, 0x80	; 128
    405a:	71 e5       	ldi	r23, 0x51	; 81
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	e8 0e       	add	r14, r24
    406a:	f9 1e       	adc	r15, r25
    406c:	0a 1f       	adc	r16, r26
    406e:	1b 1f       	adc	r17, r27
    4070:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4072:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4074:	86 54       	subi	r24, 0x46	; 70
    4076:	91 09       	sbc	r25, r1
    4078:	09 2e       	mov	r0, r25
    407a:	00 0c       	add	r0, r0
    407c:	aa 0b       	sbc	r26, r26
    407e:	bb 0b       	sbc	r27, r27
    4080:	9c 01       	movw	r18, r24
    4082:	ad 01       	movw	r20, r26
    4084:	60 e8       	ldi	r22, 0x80	; 128
    4086:	73 e3       	ldi	r23, 0x33	; 51
    4088:	81 ee       	ldi	r24, 0xE1	; 225
    408a:	91 e0       	ldi	r25, 0x01	; 1
    408c:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	e8 0e       	add	r14, r24
    4096:	f9 1e       	adc	r15, r25
    4098:	0a 1f       	adc	r16, r26
    409a:	1b 1f       	adc	r17, r27
    409c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    409e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    40a0:	85 54       	subi	r24, 0x45	; 69
    40a2:	91 09       	sbc	r25, r1
    40a4:	99 23       	and	r25, r25
    40a6:	0c f4       	brge	.+2      	; 0x40aa <__DATA_REGION_LENGTH__+0xaa>
    40a8:	03 96       	adiw	r24, 0x03	; 3
    40aa:	95 95       	asr	r25
    40ac:	87 95       	ror	r24
    40ae:	95 95       	asr	r25
    40b0:	87 95       	ror	r24
    40b2:	09 2e       	mov	r0, r25
    40b4:	00 0c       	add	r0, r0
    40b6:	aa 0b       	sbc	r26, r26
    40b8:	bb 0b       	sbc	r27, r27
    40ba:	9c 01       	movw	r18, r24
    40bc:	ad 01       	movw	r20, r26
    40be:	60 e8       	ldi	r22, 0x80	; 128
    40c0:	71 e5       	ldi	r23, 0x51	; 81
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	e8 0e       	add	r14, r24
    40d0:	f9 1e       	adc	r15, r25
    40d2:	0a 1f       	adc	r16, r26
    40d4:	1b 1f       	adc	r17, r27
    40d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    40d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    40da:	01 97       	sbiw	r24, 0x01	; 1
    40dc:	24 e6       	ldi	r18, 0x64	; 100
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	b9 01       	movw	r22, r18
    40e2:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <__divmodhi4>
    40e6:	cb 01       	movw	r24, r22
    40e8:	09 2e       	mov	r0, r25
    40ea:	00 0c       	add	r0, r0
    40ec:	aa 0b       	sbc	r26, r26
    40ee:	bb 0b       	sbc	r27, r27
    40f0:	9c 01       	movw	r18, r24
    40f2:	ad 01       	movw	r20, r26
    40f4:	60 e8       	ldi	r22, 0x80	; 128
    40f6:	7e ea       	ldi	r23, 0xAE	; 174
    40f8:	8e ef       	ldi	r24, 0xFE	; 254
    40fa:	9f ef       	ldi	r25, 0xFF	; 255
    40fc:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	e8 0e       	add	r14, r24
    4106:	f9 1e       	adc	r15, r25
    4108:	0a 1f       	adc	r16, r26
    410a:	1b 1f       	adc	r17, r27
    410c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    410e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4110:	85 5d       	subi	r24, 0xD5	; 213
    4112:	9e 4f       	sbci	r25, 0xFE	; 254
    4114:	20 e9       	ldi	r18, 0x90	; 144
    4116:	31 e0       	ldi	r19, 0x01	; 1
    4118:	b9 01       	movw	r22, r18
    411a:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <__divmodhi4>
    411e:	cb 01       	movw	r24, r22
    4120:	09 2e       	mov	r0, r25
    4122:	00 0c       	add	r0, r0
    4124:	aa 0b       	sbc	r26, r26
    4126:	bb 0b       	sbc	r27, r27
    4128:	9c 01       	movw	r18, r24
    412a:	ad 01       	movw	r20, r26
    412c:	60 e8       	ldi	r22, 0x80	; 128
    412e:	71 e5       	ldi	r23, 0x51	; 81
    4130:	81 e0       	ldi	r24, 0x01	; 1
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	8e 0d       	add	r24, r14
    413e:	9f 1d       	adc	r25, r15
    4140:	a0 1f       	adc	r26, r16
    4142:	b1 1f       	adc	r27, r17
    4144:	8a 83       	std	Y+2, r24	; 0x02
    4146:	9b 83       	std	Y+3, r25	; 0x03
    4148:	ac 83       	std	Y+4, r26	; 0x04
    414a:	bd 83       	std	Y+5, r27	; 0x05
    414c:	8c a1       	ldd	r24, Y+36	; 0x24
    414e:	9d a1       	ldd	r25, Y+37	; 0x25
    4150:	89 2b       	or	r24, r25
    4152:	51 f0       	breq	.+20     	; 0x4168 <__DATA_REGION_LENGTH__+0x168>
    4154:	8e 81       	ldd	r24, Y+6	; 0x06
    4156:	88 23       	and	r24, r24
    4158:	11 f0       	breq	.+4      	; 0x415e <__DATA_REGION_LENGTH__+0x15e>
    415a:	2c ef       	ldi	r18, 0xFC	; 252
    415c:	01 c0       	rjmp	.+2      	; 0x4160 <__DATA_REGION_LENGTH__+0x160>
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	8c a1       	ldd	r24, Y+36	; 0x24
    4162:	9d a1       	ldd	r25, Y+37	; 0x25
    4164:	fc 01       	movw	r30, r24
    4166:	20 83       	st	Z, r18
    4168:	8a 81       	ldd	r24, Y+2	; 0x02
    416a:	9b 81       	ldd	r25, Y+3	; 0x03
    416c:	ac 81       	ldd	r26, Y+4	; 0x04
    416e:	bd 81       	ldd	r27, Y+5	; 0x05
    4170:	bc 01       	movw	r22, r24
    4172:	cd 01       	movw	r24, r26
    4174:	a5 96       	adiw	r28, 0x25	; 37
    4176:	cd bf       	out	0x3d, r28	; 61
    4178:	de bf       	out	0x3e, r29	; 62
    417a:	df 91       	pop	r29
    417c:	cf 91       	pop	r28
    417e:	1f 91       	pop	r17
    4180:	0f 91       	pop	r16
    4182:	ff 90       	pop	r15
    4184:	ef 90       	pop	r14
    4186:	08 95       	ret

00004188 <ds3231_1s_sqw>:
    4188:	cf 93       	push	r28
    418a:	df 93       	push	r29
    418c:	00 d0       	rcall	.+0      	; 0x418e <ds3231_1s_sqw+0x6>
    418e:	00 d0       	rcall	.+0      	; 0x4190 <ds3231_1s_sqw+0x8>
    4190:	cd b7       	in	r28, 0x3d	; 61
    4192:	de b7       	in	r29, 0x3e	; 62
    4194:	8c 83       	std	Y+4, r24	; 0x04
    4196:	8a e0       	ldi	r24, 0x0A	; 10
    4198:	89 83       	std	Y+1, r24	; 0x01
    419a:	8c 81       	ldd	r24, Y+4	; 0x04
    419c:	88 23       	and	r24, r24
    419e:	11 f0       	breq	.+4      	; 0x41a4 <ds3231_1s_sqw+0x1c>
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	01 c0       	rjmp	.+2      	; 0x41a6 <ds3231_1s_sqw+0x1e>
    41a4:	84 e0       	ldi	r24, 0x04	; 4
    41a6:	8b 83       	std	Y+3, r24	; 0x03
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	9f ef       	ldi	r25, 0xFF	; 255
    41ac:	98 0f       	add	r25, r24
    41ae:	99 83       	std	Y+1, r25	; 0x01
    41b0:	88 23       	and	r24, r24
    41b2:	99 f0       	breq	.+38     	; 0x41da <ds3231_1s_sqw+0x52>
    41b4:	ce 01       	movw	r24, r28
    41b6:	03 96       	adiw	r24, 0x03	; 3
    41b8:	21 e0       	ldi	r18, 0x01	; 1
    41ba:	ac 01       	movw	r20, r24
    41bc:	6e e0       	ldi	r22, 0x0E	; 14
    41be:	80 ed       	ldi	r24, 0xD0	; 208
    41c0:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <I2C_0_SendData>
    41c4:	98 2f       	mov	r25, r24
    41c6:	81 e0       	ldi	r24, 0x01	; 1
    41c8:	91 30       	cpi	r25, 0x01	; 1
    41ca:	09 f4       	brne	.+2      	; 0x41ce <ds3231_1s_sqw+0x46>
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	8a 83       	std	Y+2, r24	; 0x02
    41d0:	8a 81       	ldd	r24, Y+2	; 0x02
    41d2:	88 23       	and	r24, r24
    41d4:	11 f0       	breq	.+4      	; 0x41da <ds3231_1s_sqw+0x52>
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	01 c0       	rjmp	.+2      	; 0x41dc <ds3231_1s_sqw+0x54>
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	88 23       	and	r24, r24
    41de:	09 f0       	breq	.+2      	; 0x41e2 <ds3231_1s_sqw+0x5a>
    41e0:	e3 cf       	rjmp	.-58     	; 0x41a8 <ds3231_1s_sqw+0x20>
    41e2:	8a 81       	ldd	r24, Y+2	; 0x02
    41e4:	24 96       	adiw	r28, 0x04	; 4
    41e6:	cd bf       	out	0x3d, r28	; 61
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	df 91       	pop	r29
    41ec:	cf 91       	pop	r28
    41ee:	08 95       	ret

000041f0 <ds3231_responding>:

	bool ds3231_responding()
	{
    41f0:	cf 93       	push	r28
    41f2:	df 93       	push	r29
    41f4:	00 d0       	rcall	.+0      	; 0x41f6 <ds3231_responding+0x6>
    41f6:	1f 92       	push	r1
    41f8:	cd b7       	in	r28, 0x3d	; 61
    41fa:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
    41fc:	19 82       	std	Y+1, r1	; 0x01
		uint8_t tries = 10;
    41fe:	8a e0       	ldi	r24, 0x0A	; 10
    4200:	8a 83       	std	Y+2, r24	; 0x02
		int8_t data[1];		
		while(tries-- && !(responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1)));
    4202:	8a 81       	ldd	r24, Y+2	; 0x02
    4204:	9f ef       	ldi	r25, 0xFF	; 255
    4206:	98 0f       	add	r25, r24
    4208:	9a 83       	std	Y+2, r25	; 0x02
    420a:	88 23       	and	r24, r24
    420c:	a9 f0       	breq	.+42     	; 0x4238 <ds3231_responding+0x48>
    420e:	ce 01       	movw	r24, r28
    4210:	03 96       	adiw	r24, 0x03	; 3
    4212:	21 e0       	ldi	r18, 0x01	; 1
    4214:	ac 01       	movw	r20, r24
    4216:	60 e1       	ldi	r22, 0x10	; 16
    4218:	80 ed       	ldi	r24, 0xD0	; 208
    421a:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <I2C_0_GetData>
    421e:	98 2f       	mov	r25, r24
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	91 30       	cpi	r25, 0x01	; 1
    4224:	09 f0       	breq	.+2      	; 0x4228 <ds3231_responding+0x38>
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	89 83       	std	Y+1, r24	; 0x01
    422a:	99 81       	ldd	r25, Y+1	; 0x01
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	89 27       	eor	r24, r25
    4230:	88 23       	and	r24, r24
    4232:	11 f0       	breq	.+4      	; 0x4238 <ds3231_responding+0x48>
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	01 c0       	rjmp	.+2      	; 0x423a <ds3231_responding+0x4a>
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	88 23       	and	r24, r24
    423c:	09 f0       	breq	.+2      	; 0x4240 <ds3231_responding+0x50>
    423e:	e1 cf       	rjmp	.-62     	; 0x4202 <ds3231_responding+0x12>
		return(responseReceived);
    4240:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4242:	23 96       	adiw	r28, 0x03	; 3
    4244:	cd bf       	out	0x3d, r28	; 61
    4246:	de bf       	out	0x3e, r29	; 62
    4248:	df 91       	pop	r29
    424a:	cf 91       	pop	r28
    424c:	08 95       	ret

0000424e <_ZN13EepromManagerC1Ev>:
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
	}
}
    424e:	cf 93       	push	r28
    4250:	df 93       	push	r29
    4252:	00 d0       	rcall	.+0      	; 0x4254 <_ZN13EepromManagerC1Ev+0x6>
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	89 83       	std	Y+1, r24	; 0x01
    425a:	9a 83       	std	Y+2, r25	; 0x02
    425c:	00 00       	nop
    425e:	0f 90       	pop	r0
    4260:	0f 90       	pop	r0
    4262:	df 91       	pop	r29
    4264:	cf 91       	pop	r28
    4266:	08 95       	ret

00004268 <_ZN13EepromManagerD1Ev>:
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	00 d0       	rcall	.+0      	; 0x426e <_ZN13EepromManagerD1Ev+0x6>
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	89 83       	std	Y+1, r24	; 0x01
    4274:	9a 83       	std	Y+2, r25	; 0x02
    4276:	00 00       	nop
    4278:	0f 90       	pop	r0
    427a:	0f 90       	pop	r0
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
    4280:	08 95       	ret

00004282 <_Z21avr_eeprom_write_bytejh>:
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	00 d0       	rcall	.+0      	; 0x4288 <_Z21avr_eeprom_write_bytejh+0x6>
    4288:	1f 92       	push	r1
    428a:	cd b7       	in	r28, 0x3d	; 61
    428c:	de b7       	in	r29, 0x3e	; 62
    428e:	89 83       	std	Y+1, r24	; 0x01
    4290:	9a 83       	std	Y+2, r25	; 0x02
    4292:	6b 83       	std	Y+3, r22	; 0x03
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	90 e1       	ldi	r25, 0x10	; 16
    4298:	fc 01       	movw	r30, r24
    429a:	82 81       	ldd	r24, Z+2	; 0x02
    429c:	88 2f       	mov	r24, r24
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	82 70       	andi	r24, 0x02	; 2
    42a2:	99 27       	eor	r25, r25
    42a4:	21 e0       	ldi	r18, 0x01	; 1
    42a6:	89 2b       	or	r24, r25
    42a8:	09 f4       	brne	.+2      	; 0x42ac <_Z21avr_eeprom_write_bytejh+0x2a>
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	22 23       	and	r18, r18
    42ae:	09 f0       	breq	.+2      	; 0x42b2 <_Z21avr_eeprom_write_bytejh+0x30>
    42b0:	f1 cf       	rjmp	.-30     	; 0x4294 <_Z21avr_eeprom_write_bytejh+0x12>
    42b2:	8d e9       	ldi	r24, 0x9D	; 157
    42b4:	93 e1       	ldi	r25, 0x13	; 19
    42b6:	84 bf       	out	0x34, r24	; 52
    42b8:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	9a 81       	ldd	r25, Y+2	; 0x02
    42c0:	9c 5e       	subi	r25, 0xEC	; 236
    42c2:	2b 81       	ldd	r18, Y+3	; 0x03
    42c4:	fc 01       	movw	r30, r24
    42c6:	20 83       	st	Z, r18
    42c8:	8d e9       	ldi	r24, 0x9D	; 157
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	84 bf       	out	0x34, r24	; 52
    42ce:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    42d2:	00 00       	nop
    42d4:	23 96       	adiw	r28, 0x03	; 3
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	de bf       	out	0x3e, r29	; 62
    42da:	df 91       	pop	r29
    42dc:	cf 91       	pop	r28
    42de:	08 95       	ret

000042e0 <_Z21avr_eeprom_write_wordjj>:
    42e0:	cf 93       	push	r28
    42e2:	df 93       	push	r29
    42e4:	00 d0       	rcall	.+0      	; 0x42e6 <_Z21avr_eeprom_write_wordjj+0x6>
    42e6:	00 d0       	rcall	.+0      	; 0x42e8 <_Z21avr_eeprom_write_wordjj+0x8>
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	89 83       	std	Y+1, r24	; 0x01
    42ee:	9a 83       	std	Y+2, r25	; 0x02
    42f0:	6b 83       	std	Y+3, r22	; 0x03
    42f2:	7c 83       	std	Y+4, r23	; 0x04
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	90 e1       	ldi	r25, 0x10	; 16
    42f8:	fc 01       	movw	r30, r24
    42fa:	82 81       	ldd	r24, Z+2	; 0x02
    42fc:	88 2f       	mov	r24, r24
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	82 70       	andi	r24, 0x02	; 2
    4302:	99 27       	eor	r25, r25
    4304:	21 e0       	ldi	r18, 0x01	; 1
    4306:	89 2b       	or	r24, r25
    4308:	09 f4       	brne	.+2      	; 0x430c <_Z21avr_eeprom_write_wordjj+0x2c>
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	22 23       	and	r18, r18
    430e:	09 f0       	breq	.+2      	; 0x4312 <_Z21avr_eeprom_write_wordjj+0x32>
    4310:	f1 cf       	rjmp	.-30     	; 0x42f4 <_Z21avr_eeprom_write_wordjj+0x14>
    4312:	8d e9       	ldi	r24, 0x9D	; 157
    4314:	93 e1       	ldi	r25, 0x13	; 19
    4316:	84 bf       	out	0x34, r24	; 52
    4318:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    431c:	89 81       	ldd	r24, Y+1	; 0x01
    431e:	9a 81       	ldd	r25, Y+2	; 0x02
    4320:	9c 5e       	subi	r25, 0xEC	; 236
    4322:	9c 01       	movw	r18, r24
    4324:	8b 81       	ldd	r24, Y+3	; 0x03
    4326:	9c 81       	ldd	r25, Y+4	; 0x04
    4328:	f9 01       	movw	r30, r18
    432a:	80 83       	st	Z, r24
    432c:	91 83       	std	Z+1, r25	; 0x01
    432e:	8d e9       	ldi	r24, 0x9D	; 157
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	84 bf       	out	0x34, r24	; 52
    4334:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    4338:	00 00       	nop
    433a:	24 96       	adiw	r28, 0x04	; 4
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	de bf       	out	0x3e, r29	; 62
    4340:	df 91       	pop	r29
    4342:	cf 91       	pop	r28
    4344:	08 95       	ret

00004346 <_Z22avr_eeprom_write_dwordjm>:
    4346:	cf 93       	push	r28
    4348:	df 93       	push	r29
    434a:	cd b7       	in	r28, 0x3d	; 61
    434c:	de b7       	in	r29, 0x3e	; 62
    434e:	26 97       	sbiw	r28, 0x06	; 6
    4350:	cd bf       	out	0x3d, r28	; 61
    4352:	de bf       	out	0x3e, r29	; 62
    4354:	89 83       	std	Y+1, r24	; 0x01
    4356:	9a 83       	std	Y+2, r25	; 0x02
    4358:	4b 83       	std	Y+3, r20	; 0x03
    435a:	5c 83       	std	Y+4, r21	; 0x04
    435c:	6d 83       	std	Y+5, r22	; 0x05
    435e:	7e 83       	std	Y+6, r23	; 0x06
    4360:	80 e0       	ldi	r24, 0x00	; 0
    4362:	90 e1       	ldi	r25, 0x10	; 16
    4364:	fc 01       	movw	r30, r24
    4366:	82 81       	ldd	r24, Z+2	; 0x02
    4368:	88 2f       	mov	r24, r24
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	82 70       	andi	r24, 0x02	; 2
    436e:	99 27       	eor	r25, r25
    4370:	21 e0       	ldi	r18, 0x01	; 1
    4372:	89 2b       	or	r24, r25
    4374:	09 f4       	brne	.+2      	; 0x4378 <_Z22avr_eeprom_write_dwordjm+0x32>
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	22 23       	and	r18, r18
    437a:	09 f0       	breq	.+2      	; 0x437e <_Z22avr_eeprom_write_dwordjm+0x38>
    437c:	f1 cf       	rjmp	.-30     	; 0x4360 <_Z22avr_eeprom_write_dwordjm+0x1a>
    437e:	8d e9       	ldi	r24, 0x9D	; 157
    4380:	93 e1       	ldi	r25, 0x13	; 19
    4382:	84 bf       	out	0x34, r24	; 52
    4384:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    4388:	89 81       	ldd	r24, Y+1	; 0x01
    438a:	9a 81       	ldd	r25, Y+2	; 0x02
    438c:	9c 5e       	subi	r25, 0xEC	; 236
    438e:	9c 01       	movw	r18, r24
    4390:	8b 81       	ldd	r24, Y+3	; 0x03
    4392:	9c 81       	ldd	r25, Y+4	; 0x04
    4394:	ad 81       	ldd	r26, Y+5	; 0x05
    4396:	be 81       	ldd	r27, Y+6	; 0x06
    4398:	f9 01       	movw	r30, r18
    439a:	80 83       	st	Z, r24
    439c:	91 83       	std	Z+1, r25	; 0x01
    439e:	a2 83       	std	Z+2, r26	; 0x02
    43a0:	b3 83       	std	Z+3, r27	; 0x03
    43a2:	8d e9       	ldi	r24, 0x9D	; 157
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	84 bf       	out	0x34, r24	; 52
    43a8:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    43ac:	00 00       	nop
    43ae:	26 96       	adiw	r28, 0x06	; 6
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	de bf       	out	0x3e, r29	; 62
    43b4:	df 91       	pop	r29
    43b6:	cf 91       	pop	r28
    43b8:	08 95       	ret

000043ba <_ZN13EepromManager11readNonVolsEv>:


bool EepromManager::readNonVols(void)
{
    43ba:	cf 93       	push	r28
    43bc:	df 93       	push	r29
    43be:	cd b7       	in	r28, 0x3d	; 61
    43c0:	de b7       	in	r29, 0x3e	; 62
    43c2:	6f 97       	sbiw	r28, 0x1f	; 31
    43c4:	cd bf       	out	0x3d, r28	; 61
    43c6:	de bf       	out	0x3e, r29	; 62
    43c8:	8e 8f       	std	Y+30, r24	; 0x1e
    43ca:	9f 8f       	std	Y+31, r25	; 0x1f
	bool failure = true;
    43cc:	81 e0       	ldi	r24, 0x01	; 1
    43ce:	89 83       	std	Y+1, r24	; 0x01
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 10 4a 	call	0x9420	; 0x9420 <eeprom_read_word>
    43d8:	8c 83       	std	Y+4, r24	; 0x04
    43da:	9d 83       	std	Y+5, r25	; 0x05

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    43dc:	8c 81       	ldd	r24, Y+4	; 0x04
    43de:	9d 81       	ldd	r25, Y+5	; 0x05
    43e0:	8e 3c       	cpi	r24, 0xCE	; 206
    43e2:	91 05       	cpc	r25, r1
    43e4:	09 f0       	breq	.+2      	; 0x43e8 <_ZN13EepromManager11readNonVolsEv+0x2e>
    43e6:	50 c1       	rjmp	.+672    	; 0x4688 <_ZN13EepromManager11readNonVolsEv+0x2ce>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    43e8:	88 e2       	ldi	r24, 0x28	; 40
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	0e 94 01 4a 	call	0x9402	; 0x9402 <eeprom_read_byte>
    43f0:	8e 83       	std	Y+6, r24	; 0x06
    43f2:	85 e0       	ldi	r24, 0x05	; 5
    43f4:	8f 83       	std	Y+7, r24	; 0x07
    43f6:	84 e1       	ldi	r24, 0x14	; 20
    43f8:	88 87       	std	Y+8, r24	; 0x08
    43fa:	9e 81       	ldd	r25, Y+6	; 0x06
    43fc:	88 85       	ldd	r24, Y+8	; 0x08
    43fe:	89 17       	cp	r24, r25
    4400:	40 f0       	brcs	.+16     	; 0x4412 <_ZN13EepromManager11readNonVolsEv+0x58>
    4402:	9e 81       	ldd	r25, Y+6	; 0x06
    4404:	8f 81       	ldd	r24, Y+7	; 0x07
    4406:	98 17       	cp	r25, r24
    4408:	10 f4       	brcc	.+4      	; 0x440e <_ZN13EepromManager11readNonVolsEv+0x54>
    440a:	8f 81       	ldd	r24, Y+7	; 0x07
    440c:	03 c0       	rjmp	.+6      	; 0x4414 <_ZN13EepromManager11readNonVolsEv+0x5a>
    440e:	8e 81       	ldd	r24, Y+6	; 0x06
    4410:	01 c0       	rjmp	.+2      	; 0x4414 <_ZN13EepromManager11readNonVolsEv+0x5a>
    4412:	88 85       	ldd	r24, Y+8	; 0x08
    4414:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    4418:	89 e2       	ldi	r24, 0x29	; 41
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	0e 94 01 4a 	call	0x9402	; 0x9402 <eeprom_read_byte>
    4420:	89 87       	std	Y+9, r24	; 0x09
    4422:	1a 86       	std	Y+10, r1	; 0x0a
    4424:	81 e1       	ldi	r24, 0x11	; 17
    4426:	8b 87       	std	Y+11, r24	; 0x0b
    4428:	99 85       	ldd	r25, Y+9	; 0x09
    442a:	8b 85       	ldd	r24, Y+11	; 0x0b
    442c:	89 17       	cp	r24, r25
    442e:	40 f0       	brcs	.+16     	; 0x4440 <_ZN13EepromManager11readNonVolsEv+0x86>
    4430:	99 85       	ldd	r25, Y+9	; 0x09
    4432:	8a 85       	ldd	r24, Y+10	; 0x0a
    4434:	98 17       	cp	r25, r24
    4436:	10 f4       	brcc	.+4      	; 0x443c <_ZN13EepromManager11readNonVolsEv+0x82>
    4438:	8a 85       	ldd	r24, Y+10	; 0x0a
    443a:	03 c0       	rjmp	.+6      	; 0x4442 <_ZN13EepromManager11readNonVolsEv+0x88>
    443c:	89 85       	ldd	r24, Y+9	; 0x09
    443e:	01 c0       	rjmp	.+2      	; 0x4442 <_ZN13EepromManager11readNonVolsEv+0x88>
    4440:	8b 85       	ldd	r24, Y+11	; 0x0b
    4442:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    4446:	82 e0       	ldi	r24, 0x02	; 2
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	0e 94 09 4a 	call	0x9412	; 0x9412 <eeprom_read_dword>
    444e:	dc 01       	movw	r26, r24
    4450:	cb 01       	movw	r24, r22
    4452:	80 93 54 45 	sts	0x4554, r24	; 0x804554 <g_event_start_epoch>
    4456:	90 93 55 45 	sts	0x4555, r25	; 0x804555 <g_event_start_epoch+0x1>
    445a:	a0 93 56 45 	sts	0x4556, r26	; 0x804556 <g_event_start_epoch+0x2>
    445e:	b0 93 57 45 	sts	0x4557, r27	; 0x804557 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    4462:	86 e0       	ldi	r24, 0x06	; 6
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	0e 94 09 4a 	call	0x9412	; 0x9412 <eeprom_read_dword>
    446a:	dc 01       	movw	r26, r24
    446c:	cb 01       	movw	r24, r22
    446e:	80 93 58 45 	sts	0x4558, r24	; 0x804558 <g_event_finish_epoch>
    4472:	90 93 59 45 	sts	0x4559, r25	; 0x804559 <g_event_finish_epoch+0x1>
    4476:	a0 93 5a 45 	sts	0x455A, r26	; 0x80455a <g_event_finish_epoch+0x2>
    447a:	b0 93 5b 45 	sts	0x455B, r27	; 0x80455b <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    447e:	8a e2       	ldi	r24, 0x2A	; 42
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	0e 94 01 4a 	call	0x9402	; 0x9402 <eeprom_read_byte>
    4486:	80 93 67 45 	sts	0x4567, r24	; 0x804567 <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    448a:	1a 82       	std	Y+2, r1	; 0x02
    448c:	1b 82       	std	Y+3, r1	; 0x03
    448e:	8a 81       	ldd	r24, Y+2	; 0x02
    4490:	9b 81       	ldd	r25, Y+3	; 0x03
    4492:	44 97       	sbiw	r24, 0x14	; 20
    4494:	e8 f4       	brcc	.+58     	; 0x44d0 <_ZN13EepromManager11readNonVolsEv+0x116>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    4496:	8a 81       	ldd	r24, Y+2	; 0x02
    4498:	9b 81       	ldd	r25, Y+3	; 0x03
    449a:	0a 96       	adiw	r24, 0x0a	; 10
    449c:	80 50       	subi	r24, 0x00	; 0
    449e:	90 40       	sbci	r25, 0x00	; 0
    44a0:	0e 94 01 4a 	call	0x9402	; 0x9402 <eeprom_read_byte>
    44a4:	28 2f       	mov	r18, r24
    44a6:	8a 81       	ldd	r24, Y+2	; 0x02
    44a8:	9b 81       	ldd	r25, Y+3	; 0x03
    44aa:	85 5c       	subi	r24, 0xC5	; 197
    44ac:	9a 4b       	sbci	r25, 0xBA	; 186
    44ae:	fc 01       	movw	r30, r24
    44b0:	20 83       	st	Z, r18
			if(!g_messages_text[STATION_ID][i])
    44b2:	8a 81       	ldd	r24, Y+2	; 0x02
    44b4:	9b 81       	ldd	r25, Y+3	; 0x03
    44b6:	85 5c       	subi	r24, 0xC5	; 197
    44b8:	9a 4b       	sbci	r25, 0xBA	; 186
    44ba:	fc 01       	movw	r30, r24
    44bc:	80 81       	ld	r24, Z
    44be:	88 23       	and	r24, r24
    44c0:	31 f0       	breq	.+12     	; 0x44ce <_ZN13EepromManager11readNonVolsEv+0x114>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    44c2:	8a 81       	ldd	r24, Y+2	; 0x02
    44c4:	9b 81       	ldd	r25, Y+3	; 0x03
    44c6:	01 96       	adiw	r24, 0x01	; 1
    44c8:	8a 83       	std	Y+2, r24	; 0x02
    44ca:	9b 83       	std	Y+3, r25	; 0x03
    44cc:	e0 cf       	rjmp	.-64     	; 0x448e <_ZN13EepromManager11readNonVolsEv+0xd4>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
			if(!g_messages_text[STATION_ID][i])
			{
				break;
    44ce:	00 00       	nop
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    44d0:	1a 82       	std	Y+2, r1	; 0x02
    44d2:	1b 82       	std	Y+3, r1	; 0x03
    44d4:	8a 81       	ldd	r24, Y+2	; 0x02
    44d6:	9b 81       	ldd	r25, Y+3	; 0x03
    44d8:	08 97       	sbiw	r24, 0x08	; 8
    44da:	e8 f4       	brcc	.+58     	; 0x4516 <_ZN13EepromManager11readNonVolsEv+0x15c>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    44dc:	8a 81       	ldd	r24, Y+2	; 0x02
    44de:	9b 81       	ldd	r25, Y+3	; 0x03
    44e0:	4f 96       	adiw	r24, 0x1f	; 31
    44e2:	80 50       	subi	r24, 0x00	; 0
    44e4:	90 40       	sbci	r25, 0x00	; 0
    44e6:	0e 94 01 4a 	call	0x9402	; 0x9402 <eeprom_read_byte>
    44ea:	28 2f       	mov	r18, r24
    44ec:	8a 81       	ldd	r24, Y+2	; 0x02
    44ee:	9b 81       	ldd	r25, Y+3	; 0x03
    44f0:	88 59       	subi	r24, 0x98	; 152
    44f2:	9a 4b       	sbci	r25, 0xBA	; 186
    44f4:	fc 01       	movw	r30, r24
    44f6:	20 83       	st	Z, r18
			if(!g_unlockCode[i])
    44f8:	8a 81       	ldd	r24, Y+2	; 0x02
    44fa:	9b 81       	ldd	r25, Y+3	; 0x03
    44fc:	88 59       	subi	r24, 0x98	; 152
    44fe:	9a 4b       	sbci	r25, 0xBA	; 186
    4500:	fc 01       	movw	r30, r24
    4502:	80 81       	ld	r24, Z
    4504:	88 23       	and	r24, r24
    4506:	31 f0       	breq	.+12     	; 0x4514 <_ZN13EepromManager11readNonVolsEv+0x15a>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    4508:	8a 81       	ldd	r24, Y+2	; 0x02
    450a:	9b 81       	ldd	r25, Y+3	; 0x03
    450c:	01 96       	adiw	r24, 0x01	; 1
    450e:	8a 83       	std	Y+2, r24	; 0x02
    4510:	9b 83       	std	Y+3, r25	; 0x03
    4512:	e0 cf       	rjmp	.-64     	; 0x44d4 <_ZN13EepromManager11readNonVolsEv+0x11a>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
			if(!g_unlockCode[i])
			{
				break;
    4514:	00 00       	nop
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    4516:	8b e2       	ldi	r24, 0x2B	; 43
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	0e 94 09 4a 	call	0x9412	; 0x9412 <eeprom_read_dword>
    451e:	dc 01       	movw	r26, r24
    4520:	cb 01       	movw	r24, r22
    4522:	8c 87       	std	Y+12, r24	; 0x0c
    4524:	9d 87       	std	Y+13, r25	; 0x0d
    4526:	ae 87       	std	Y+14, r26	; 0x0e
    4528:	bf 87       	std	Y+15, r27	; 0x0f
    452a:	80 ee       	ldi	r24, 0xE0	; 224
    452c:	97 e6       	ldi	r25, 0x67	; 103
    452e:	a5 e3       	ldi	r26, 0x35	; 53
    4530:	b0 e0       	ldi	r27, 0x00	; 0
    4532:	88 8b       	std	Y+16, r24	; 0x10
    4534:	99 8b       	std	Y+17, r25	; 0x11
    4536:	aa 8b       	std	Y+18, r26	; 0x12
    4538:	bb 8b       	std	Y+19, r27	; 0x13
    453a:	80 e0       	ldi	r24, 0x00	; 0
    453c:	99 e0       	ldi	r25, 0x09	; 9
    453e:	ad e3       	ldi	r26, 0x3D	; 61
    4540:	b0 e0       	ldi	r27, 0x00	; 0
    4542:	8c 8b       	std	Y+20, r24	; 0x14
    4544:	9d 8b       	std	Y+21, r25	; 0x15
    4546:	ae 8b       	std	Y+22, r26	; 0x16
    4548:	bf 8b       	std	Y+23, r27	; 0x17
    454a:	2c 85       	ldd	r18, Y+12	; 0x0c
    454c:	3d 85       	ldd	r19, Y+13	; 0x0d
    454e:	4e 85       	ldd	r20, Y+14	; 0x0e
    4550:	5f 85       	ldd	r21, Y+15	; 0x0f
    4552:	8c 89       	ldd	r24, Y+20	; 0x14
    4554:	9d 89       	ldd	r25, Y+21	; 0x15
    4556:	ae 89       	ldd	r26, Y+22	; 0x16
    4558:	bf 89       	ldd	r27, Y+23	; 0x17
    455a:	82 17       	cp	r24, r18
    455c:	93 07       	cpc	r25, r19
    455e:	a4 07       	cpc	r26, r20
    4560:	b5 07       	cpc	r27, r21
    4562:	b8 f0       	brcs	.+46     	; 0x4592 <_ZN13EepromManager11readNonVolsEv+0x1d8>
    4564:	2c 85       	ldd	r18, Y+12	; 0x0c
    4566:	3d 85       	ldd	r19, Y+13	; 0x0d
    4568:	4e 85       	ldd	r20, Y+14	; 0x0e
    456a:	5f 85       	ldd	r21, Y+15	; 0x0f
    456c:	88 89       	ldd	r24, Y+16	; 0x10
    456e:	99 89       	ldd	r25, Y+17	; 0x11
    4570:	aa 89       	ldd	r26, Y+18	; 0x12
    4572:	bb 89       	ldd	r27, Y+19	; 0x13
    4574:	28 17       	cp	r18, r24
    4576:	39 07       	cpc	r19, r25
    4578:	4a 07       	cpc	r20, r26
    457a:	5b 07       	cpc	r21, r27
    457c:	28 f4       	brcc	.+10     	; 0x4588 <_ZN13EepromManager11readNonVolsEv+0x1ce>
    457e:	88 89       	ldd	r24, Y+16	; 0x10
    4580:	99 89       	ldd	r25, Y+17	; 0x11
    4582:	aa 89       	ldd	r26, Y+18	; 0x12
    4584:	bb 89       	ldd	r27, Y+19	; 0x13
    4586:	09 c0       	rjmp	.+18     	; 0x459a <_ZN13EepromManager11readNonVolsEv+0x1e0>
    4588:	8c 85       	ldd	r24, Y+12	; 0x0c
    458a:	9d 85       	ldd	r25, Y+13	; 0x0d
    458c:	ae 85       	ldd	r26, Y+14	; 0x0e
    458e:	bf 85       	ldd	r27, Y+15	; 0x0f
    4590:	04 c0       	rjmp	.+8      	; 0x459a <_ZN13EepromManager11readNonVolsEv+0x1e0>
    4592:	8c 89       	ldd	r24, Y+20	; 0x14
    4594:	9d 89       	ldd	r25, Y+21	; 0x15
    4596:	ae 89       	ldd	r26, Y+22	; 0x16
    4598:	bf 89       	ldd	r27, Y+23	; 0x17
    459a:	80 93 2d 40 	sts	0x402D, r24	; 0x80402d <g_80m_frequency>
    459e:	90 93 2e 40 	sts	0x402E, r25	; 0x80402e <g_80m_frequency+0x1>
    45a2:	a0 93 2f 40 	sts	0x402F, r26	; 0x80402f <g_80m_frequency+0x2>
    45a6:	b0 93 30 40 	sts	0x4030, r27	; 0x804030 <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    45aa:	8f e2       	ldi	r24, 0x2F	; 47
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	0e 94 09 4a 	call	0x9412	; 0x9412 <eeprom_read_dword>
    45b2:	dc 01       	movw	r26, r24
    45b4:	cb 01       	movw	r24, r22
    45b6:	80 93 33 40 	sts	0x4033, r24	; 0x804033 <g_rtty_offset>
    45ba:	90 93 34 40 	sts	0x4034, r25	; 0x804034 <g_rtty_offset+0x1>
    45be:	a0 93 35 40 	sts	0x4035, r26	; 0x804035 <g_rtty_offset+0x2>
    45c2:	b0 93 36 40 	sts	0x4036, r27	; 0x804036 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    45c6:	83 e3       	ldi	r24, 0x33	; 51
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	0e 94 10 4a 	call	0x9420	; 0x9420 <eeprom_read_word>
    45ce:	88 8f       	std	Y+24, r24	; 0x18
    45d0:	99 8f       	std	Y+25, r25	; 0x19
    45d2:	1a 8e       	std	Y+26, r1	; 0x1a
    45d4:	1b 8e       	std	Y+27, r1	; 0x1b
    45d6:	88 e8       	ldi	r24, 0x88	; 136
    45d8:	93 e1       	ldi	r25, 0x13	; 19
    45da:	8c 8f       	std	Y+28, r24	; 0x1c
    45dc:	9d 8f       	std	Y+29, r25	; 0x1d
    45de:	28 8d       	ldd	r18, Y+24	; 0x18
    45e0:	39 8d       	ldd	r19, Y+25	; 0x19
    45e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    45e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    45e6:	82 17       	cp	r24, r18
    45e8:	93 07       	cpc	r25, r19
    45ea:	68 f0       	brcs	.+26     	; 0x4606 <_ZN13EepromManager11readNonVolsEv+0x24c>
    45ec:	28 8d       	ldd	r18, Y+24	; 0x18
    45ee:	39 8d       	ldd	r19, Y+25	; 0x19
    45f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    45f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    45f4:	28 17       	cp	r18, r24
    45f6:	39 07       	cpc	r19, r25
    45f8:	18 f4       	brcc	.+6      	; 0x4600 <_ZN13EepromManager11readNonVolsEv+0x246>
    45fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    45fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    45fe:	05 c0       	rjmp	.+10     	; 0x460a <_ZN13EepromManager11readNonVolsEv+0x250>
    4600:	88 8d       	ldd	r24, Y+24	; 0x18
    4602:	99 8d       	ldd	r25, Y+25	; 0x19
    4604:	02 c0       	rjmp	.+4      	; 0x460a <_ZN13EepromManager11readNonVolsEv+0x250>
    4606:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4608:	9d 8d       	ldd	r25, Y+29	; 0x1d
    460a:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW>
    460e:	90 93 32 40 	sts	0x4032, r25	; 0x804032 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    4612:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    4616:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    461a:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    461e:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    4622:	89 2b       	or	r24, r25
    4624:	8a 2b       	or	r24, r26
    4626:	8b 2b       	or	r24, r27
    4628:	b9 f0       	breq	.+46     	; 0x4658 <_ZN13EepromManager11readNonVolsEv+0x29e>
    462a:	20 91 58 45 	lds	r18, 0x4558	; 0x804558 <g_event_finish_epoch>
    462e:	30 91 59 45 	lds	r19, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    4632:	40 91 5a 45 	lds	r20, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    4636:	50 91 5b 45 	lds	r21, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    463a:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    463e:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    4642:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    4646:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    464a:	82 17       	cp	r24, r18
    464c:	93 07       	cpc	r25, r19
    464e:	a4 07       	cpc	r26, r20
    4650:	b5 07       	cpc	r27, r21
    4652:	10 f0       	brcs	.+4      	; 0x4658 <_ZN13EepromManager11readNonVolsEv+0x29e>
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	01 c0       	rjmp	.+2      	; 0x465a <_ZN13EepromManager11readNonVolsEv+0x2a0>
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	88 23       	and	r24, r24
    465c:	a1 f0       	breq	.+40     	; 0x4686 <_ZN13EepromManager11readNonVolsEv+0x2cc>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    465e:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    4662:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    4666:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    466a:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    466e:	80 58       	subi	r24, 0x80	; 128
    4670:	9e 4a       	sbci	r25, 0xAE	; 174
    4672:	ae 4f       	sbci	r26, 0xFE	; 254
    4674:	bf 4f       	sbci	r27, 0xFF	; 255
    4676:	80 93 58 45 	sts	0x4558, r24	; 0x804558 <g_event_finish_epoch>
    467a:	90 93 59 45 	sts	0x4559, r25	; 0x804559 <g_event_finish_epoch+0x1>
    467e:	a0 93 5a 45 	sts	0x455A, r26	; 0x80455a <g_event_finish_epoch+0x2>
    4682:	b0 93 5b 45 	sts	0x455B, r27	; 0x80455b <g_event_finish_epoch+0x3>
		}

		failure = false;
    4686:	19 82       	std	Y+1, r1	; 0x01
	}

	return( failure);
    4688:	89 81       	ldd	r24, Y+1	; 0x01
}
    468a:	6f 96       	adiw	r28, 0x1f	; 31
    468c:	cd bf       	out	0x3d, r28	; 61
    468e:	de bf       	out	0x3e, r29	; 62
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	08 95       	ret

00004696 <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	bool EepromManager::initializeEEPROMVars(void)
	{
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
    469a:	cd b7       	in	r28, 0x3d	; 61
    469c:	de b7       	in	r29, 0x3e	; 62
    469e:	2b 97       	sbiw	r28, 0x0b	; 11
    46a0:	cd bf       	out	0x3d, r28	; 61
    46a2:	de bf       	out	0x3e, r29	; 62
    46a4:	8a 87       	std	Y+10, r24	; 0x0a
    46a6:	9b 87       	std	Y+11, r25	; 0x0b
		bool err = false;
    46a8:	1f 82       	std	Y+7, r1	; 0x07
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	0e 94 10 4a 	call	0x9420	; 0x9420 <eeprom_read_word>
    46b2:	88 87       	std	Y+8, r24	; 0x08
    46b4:	99 87       	std	Y+9, r25	; 0x09

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    46b6:	88 85       	ldd	r24, Y+8	; 0x08
    46b8:	99 85       	ldd	r25, Y+9	; 0x09
    46ba:	8e 3c       	cpi	r24, 0xCE	; 206
    46bc:	91 05       	cpc	r25, r1
    46be:	09 f4       	brne	.+2      	; 0x46c2 <_ZN13EepromManager20initializeEEPROMVarsEv+0x2c>
    46c0:	d9 c0       	rjmp	.+434    	; 0x4874 <_ZN13EepromManager20initializeEEPROMVarsEv+0x1de>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    46c2:	84 e1       	ldi	r24, 0x14	; 20
    46c4:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    46c8:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    46cc:	68 2f       	mov	r22, r24
    46ce:	88 e2       	ldi	r24, 0x28	; 40
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	0e 94 41 21 	call	0x4282	; 0x4282 <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    46dc:	80 91 1a 40 	lds	r24, 0x401A	; 0x80401a <g_fox>
    46e0:	68 2f       	mov	r22, r24
    46e2:	89 e2       	ldi	r24, 0x29	; 41
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	0e 94 41 21 	call	0x4282	; 0x4282 <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    46ea:	10 92 54 45 	sts	0x4554, r1	; 0x804554 <g_event_start_epoch>
    46ee:	10 92 55 45 	sts	0x4555, r1	; 0x804555 <g_event_start_epoch+0x1>
    46f2:	10 92 56 45 	sts	0x4556, r1	; 0x804556 <g_event_start_epoch+0x2>
    46f6:	10 92 57 45 	sts	0x4557, r1	; 0x804557 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    46fa:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <g_event_start_epoch>
    46fe:	90 91 55 45 	lds	r25, 0x4555	; 0x804555 <g_event_start_epoch+0x1>
    4702:	a0 91 56 45 	lds	r26, 0x4556	; 0x804556 <g_event_start_epoch+0x2>
    4706:	b0 91 57 45 	lds	r27, 0x4557	; 0x804557 <g_event_start_epoch+0x3>
    470a:	ac 01       	movw	r20, r24
    470c:	bd 01       	movw	r22, r26
    470e:	82 e0       	ldi	r24, 0x02	; 2
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	0e 94 a3 21 	call	0x4346	; 0x4346 <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    4716:	10 92 58 45 	sts	0x4558, r1	; 0x804558 <g_event_finish_epoch>
    471a:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <g_event_finish_epoch+0x1>
    471e:	10 92 5a 45 	sts	0x455A, r1	; 0x80455a <g_event_finish_epoch+0x2>
    4722:	10 92 5b 45 	sts	0x455B, r1	; 0x80455b <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    4726:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <g_event_finish_epoch>
    472a:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <g_event_finish_epoch+0x1>
    472e:	a0 91 5a 45 	lds	r26, 0x455A	; 0x80455a <g_event_finish_epoch+0x2>
    4732:	b0 91 5b 45 	lds	r27, 0x455B	; 0x80455b <g_event_finish_epoch+0x3>
    4736:	ac 01       	movw	r20, r24
    4738:	bd 01       	movw	r22, r26
    473a:	86 e0       	ldi	r24, 0x06	; 6
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	0e 94 a3 21 	call	0x4346	; 0x4346 <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    4742:	10 92 67 45 	sts	0x4567, r1	; 0x804567 <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    4746:	80 91 67 45 	lds	r24, 0x4567	; 0x804567 <g_utc_offset>
    474a:	68 2f       	mov	r22, r24
    474c:	8a e2       	ldi	r24, 0x2A	; 42
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	0e 94 41 21 	call	0x4282	; 0x4282 <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    4754:	10 92 3b 45 	sts	0x453B, r1	; 0x80453b <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    4758:	60 e0       	ldi	r22, 0x00	; 0
    475a:	8a e0       	ldi	r24, 0x0A	; 10
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 41 21 	call	0x4282	; 0x4282 <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    4762:	84 e8       	ldi	r24, 0x84	; 132
    4764:	94 e4       	ldi	r25, 0x44	; 68
    4766:	8d 83       	std	Y+5, r24	; 0x05
    4768:	9e 83       	std	Y+6, r25	; 0x06
			i = UnlockCode;
    476a:	8f e1       	ldi	r24, 0x1F	; 31
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	89 83       	std	Y+1, r24	; 0x01
    4770:	9a 83       	std	Y+2, r25	; 0x02
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    4772:	1b 82       	std	Y+3, r1	; 0x03
    4774:	1c 82       	std	Y+4, r1	; 0x04
    4776:	8b 81       	ldd	r24, Y+3	; 0x03
    4778:	9c 81       	ldd	r25, Y+4	; 0x04
    477a:	04 97       	sbiw	r24, 0x04	; 4
    477c:	18 f5       	brcc	.+70     	; 0x47c4 <_ZN13EepromManager20initializeEEPROMVarsEv+0x12e>
			{
				g_unlockCode[j] = *v;
    477e:	8d 81       	ldd	r24, Y+5	; 0x05
    4780:	9e 81       	ldd	r25, Y+6	; 0x06
    4782:	fc 01       	movw	r30, r24
    4784:	20 81       	ld	r18, Z
    4786:	8b 81       	ldd	r24, Y+3	; 0x03
    4788:	9c 81       	ldd	r25, Y+4	; 0x04
    478a:	88 59       	subi	r24, 0x98	; 152
    478c:	9a 4b       	sbci	r25, 0xBA	; 186
    478e:	fc 01       	movw	r30, r24
    4790:	20 83       	st	Z, r18
				avr_eeprom_write_byte(i++, *v++);
    4792:	8d 81       	ldd	r24, Y+5	; 0x05
    4794:	9e 81       	ldd	r25, Y+6	; 0x06
    4796:	9c 01       	movw	r18, r24
    4798:	2f 5f       	subi	r18, 0xFF	; 255
    479a:	3f 4f       	sbci	r19, 0xFF	; 255
    479c:	2d 83       	std	Y+5, r18	; 0x05
    479e:	3e 83       	std	Y+6, r19	; 0x06
    47a0:	fc 01       	movw	r30, r24
    47a2:	40 81       	ld	r20, Z
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
    47a6:	9a 81       	ldd	r25, Y+2	; 0x02
    47a8:	9c 01       	movw	r18, r24
    47aa:	2f 5f       	subi	r18, 0xFF	; 255
    47ac:	3f 4f       	sbci	r19, 0xFF	; 255
    47ae:	29 83       	std	Y+1, r18	; 0x01
    47b0:	3a 83       	std	Y+2, r19	; 0x02
    47b2:	64 2f       	mov	r22, r20
    47b4:	0e 94 41 21 	call	0x4282	; 0x4282 <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    47b8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ba:	9c 81       	ldd	r25, Y+4	; 0x04
    47bc:	01 96       	adiw	r24, 0x01	; 1
    47be:	8b 83       	std	Y+3, r24	; 0x03
    47c0:	9c 83       	std	Y+4, r25	; 0x04
    47c2:	d9 cf       	rjmp	.-78     	; 0x4776 <_ZN13EepromManager20initializeEEPROMVarsEv+0xe0>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    47c4:	89 81       	ldd	r24, Y+1	; 0x01
    47c6:	9a 81       	ldd	r25, Y+2	; 0x02
    47c8:	60 e0       	ldi	r22, 0x00	; 0
    47ca:	0e 94 41 21 	call	0x4282	; 0x4282 <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    47ce:	8b 81       	ldd	r24, Y+3	; 0x03
    47d0:	9c 81       	ldd	r25, Y+4	; 0x04
    47d2:	88 59       	subi	r24, 0x98	; 152
    47d4:	9a 4b       	sbci	r25, 0xBA	; 186
    47d6:	fc 01       	movw	r30, r24
    47d8:	10 82       	st	Z, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    47da:	80 e2       	ldi	r24, 0x20	; 32
    47dc:	94 e0       	ldi	r25, 0x04	; 4
    47de:	a6 e3       	ldi	r26, 0x36	; 54
    47e0:	b0 e0       	ldi	r27, 0x00	; 0
    47e2:	80 93 2d 40 	sts	0x402D, r24	; 0x80402d <g_80m_frequency>
    47e6:	90 93 2e 40 	sts	0x402E, r25	; 0x80402e <g_80m_frequency+0x1>
    47ea:	a0 93 2f 40 	sts	0x402F, r26	; 0x80402f <g_80m_frequency+0x2>
    47ee:	b0 93 30 40 	sts	0x4030, r27	; 0x804030 <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    47f2:	80 91 2d 40 	lds	r24, 0x402D	; 0x80402d <g_80m_frequency>
    47f6:	90 91 2e 40 	lds	r25, 0x402E	; 0x80402e <g_80m_frequency+0x1>
    47fa:	a0 91 2f 40 	lds	r26, 0x402F	; 0x80402f <g_80m_frequency+0x2>
    47fe:	b0 91 30 40 	lds	r27, 0x4030	; 0x804030 <g_80m_frequency+0x3>
    4802:	ac 01       	movw	r20, r24
    4804:	bd 01       	movw	r22, r26
    4806:	8b e2       	ldi	r24, 0x2B	; 43
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	0e 94 a3 21 	call	0x4346	; 0x4346 <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    480e:	8a ea       	ldi	r24, 0xAA	; 170
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	a0 e0       	ldi	r26, 0x00	; 0
    4814:	b0 e0       	ldi	r27, 0x00	; 0
    4816:	80 93 33 40 	sts	0x4033, r24	; 0x804033 <g_rtty_offset>
    481a:	90 93 34 40 	sts	0x4034, r25	; 0x804034 <g_rtty_offset+0x1>
    481e:	a0 93 35 40 	sts	0x4035, r26	; 0x804035 <g_rtty_offset+0x2>
    4822:	b0 93 36 40 	sts	0x4036, r27	; 0x804036 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    4826:	80 91 2d 40 	lds	r24, 0x402D	; 0x80402d <g_80m_frequency>
    482a:	90 91 2e 40 	lds	r25, 0x402E	; 0x80402e <g_80m_frequency+0x1>
    482e:	a0 91 2f 40 	lds	r26, 0x402F	; 0x80402f <g_80m_frequency+0x2>
    4832:	b0 91 30 40 	lds	r27, 0x4030	; 0x804030 <g_80m_frequency+0x3>
    4836:	ac 01       	movw	r20, r24
    4838:	bd 01       	movw	r22, r26
    483a:	8b e2       	ldi	r24, 0x2B	; 43
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	0e 94 a3 21 	call	0x4346	; 0x4346 <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    4842:	84 ef       	ldi	r24, 0xF4	; 244
    4844:	91 e0       	ldi	r25, 0x01	; 1
    4846:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW>
    484a:	90 93 32 40 	sts	0x4032, r25	; 0x804032 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    484e:	80 91 31 40 	lds	r24, 0x4031	; 0x804031 <g_80m_power_level_mW>
    4852:	90 91 32 40 	lds	r25, 0x4032	; 0x804032 <g_80m_power_level_mW+0x1>
    4856:	cc 01       	movw	r24, r24
    4858:	a0 e0       	ldi	r26, 0x00	; 0
    485a:	b0 e0       	ldi	r27, 0x00	; 0
    485c:	ac 01       	movw	r20, r24
    485e:	bd 01       	movw	r22, r26
    4860:	83 e3       	ldi	r24, 0x33	; 51
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	0e 94 a3 21 	call	0x4346	; 0x4346 <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    4868:	6e ec       	ldi	r22, 0xCE	; 206
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	80 e0       	ldi	r24, 0x00	; 0
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	0e 94 70 21 	call	0x42e0	; 0x42e0 <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
    4874:	8f 81       	ldd	r24, Y+7	; 0x07
	}
    4876:	2b 96       	adiw	r28, 0x0b	; 11
    4878:	cd bf       	out	0x3d, r28	; 61
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	df 91       	pop	r29
    487e:	cf 91       	pop	r28
    4880:	08 95       	ret

00004882 <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    4882:	0f 93       	push	r16
    4884:	1f 93       	push	r17
    4886:	cf 93       	push	r28
    4888:	df 93       	push	r29
    488a:	cd b7       	in	r28, 0x3d	; 61
    488c:	de b7       	in	r29, 0x3e	; 62
    488e:	62 97       	sbiw	r28, 0x12	; 18
    4890:	cd bf       	out	0x3d, r28	; 61
    4892:	de bf       	out	0x3e, r29	; 62
    4894:	89 87       	std	Y+9, r24	; 0x09
    4896:	9a 87       	std	Y+10, r25	; 0x0a
    4898:	4b 87       	std	Y+11, r20	; 0x0b
    489a:	5c 87       	std	Y+12, r21	; 0x0c
    489c:	6d 87       	std	Y+13, r22	; 0x0d
    489e:	7e 87       	std	Y+14, r23	; 0x0e
    48a0:	0f 87       	std	Y+15, r16	; 0x0f
    48a2:	18 8b       	std	Y+16, r17	; 0x10
    48a4:	29 8b       	std	Y+17, r18	; 0x11
    48a6:	3a 8b       	std	Y+18, r19	; 0x12
    48a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    48aa:	98 89       	ldd	r25, Y+16	; 0x10
    48ac:	a9 89       	ldd	r26, Y+17	; 0x11
    48ae:	ba 89       	ldd	r27, Y+18	; 0x12
    48b0:	80 93 7b 45 	sts	0x457B, r24	; 0x80457b <_SAMPLING_FREQUENCY>
    48b4:	90 93 7c 45 	sts	0x457C, r25	; 0x80457c <_SAMPLING_FREQUENCY+0x1>
    48b8:	a0 93 7d 45 	sts	0x457D, r26	; 0x80457d <_SAMPLING_FREQUENCY+0x2>
    48bc:	b0 93 7e 45 	sts	0x457E, r27	; 0x80457e <_SAMPLING_FREQUENCY+0x3>
    48c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    48c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    48c4:	ad 85       	ldd	r26, Y+13	; 0x0d
    48c6:	be 85       	ldd	r27, Y+14	; 0x0e
    48c8:	89 83       	std	Y+1, r24	; 0x01
    48ca:	9a 83       	std	Y+2, r25	; 0x02
    48cc:	ab 83       	std	Y+3, r26	; 0x03
    48ce:	bc 83       	std	Y+4, r27	; 0x04
    48d0:	84 e6       	ldi	r24, 0x64	; 100
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	8d 83       	std	Y+5, r24	; 0x05
    48d6:	9e 83       	std	Y+6, r25	; 0x06
    48d8:	81 ed       	ldi	r24, 0xD1	; 209
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	8f 83       	std	Y+7, r24	; 0x07
    48de:	98 87       	std	Y+8, r25	; 0x08
    48e0:	8f 81       	ldd	r24, Y+7	; 0x07
    48e2:	98 85       	ldd	r25, Y+8	; 0x08
    48e4:	09 2e       	mov	r0, r25
    48e6:	00 0c       	add	r0, r0
    48e8:	aa 0b       	sbc	r26, r26
    48ea:	bb 0b       	sbc	r27, r27
    48ec:	bc 01       	movw	r22, r24
    48ee:	cd 01       	movw	r24, r26
    48f0:	0e 94 1e 44 	call	0x883c	; 0x883c <__floatsisf>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	29 81       	ldd	r18, Y+1	; 0x01
    48fa:	3a 81       	ldd	r19, Y+2	; 0x02
    48fc:	4b 81       	ldd	r20, Y+3	; 0x03
    48fe:	5c 81       	ldd	r21, Y+4	; 0x04
    4900:	bc 01       	movw	r22, r24
    4902:	cd 01       	movw	r24, r26
    4904:	0e 94 6f 43 	call	0x86de	; 0x86de <__cmpsf2>
    4908:	88 23       	and	r24, r24
    490a:	6c f4       	brge	.+26     	; 0x4926 <_ZN8GoertzelC1Eff+0xa4>
    490c:	8f 81       	ldd	r24, Y+7	; 0x07
    490e:	98 85       	ldd	r25, Y+8	; 0x08
    4910:	09 2e       	mov	r0, r25
    4912:	00 0c       	add	r0, r0
    4914:	aa 0b       	sbc	r26, r26
    4916:	bb 0b       	sbc	r27, r27
    4918:	bc 01       	movw	r22, r24
    491a:	cd 01       	movw	r24, r26
    491c:	0e 94 1e 44 	call	0x883c	; 0x883c <__floatsisf>
    4920:	dc 01       	movw	r26, r24
    4922:	cb 01       	movw	r24, r22
    4924:	27 c0       	rjmp	.+78     	; 0x4974 <_ZN8GoertzelC1Eff+0xf2>
    4926:	8d 81       	ldd	r24, Y+5	; 0x05
    4928:	9e 81       	ldd	r25, Y+6	; 0x06
    492a:	09 2e       	mov	r0, r25
    492c:	00 0c       	add	r0, r0
    492e:	aa 0b       	sbc	r26, r26
    4930:	bb 0b       	sbc	r27, r27
    4932:	bc 01       	movw	r22, r24
    4934:	cd 01       	movw	r24, r26
    4936:	0e 94 1e 44 	call	0x883c	; 0x883c <__floatsisf>
    493a:	dc 01       	movw	r26, r24
    493c:	cb 01       	movw	r24, r22
    493e:	29 81       	ldd	r18, Y+1	; 0x01
    4940:	3a 81       	ldd	r19, Y+2	; 0x02
    4942:	4b 81       	ldd	r20, Y+3	; 0x03
    4944:	5c 81       	ldd	r21, Y+4	; 0x04
    4946:	bc 01       	movw	r22, r24
    4948:	cd 01       	movw	r24, r26
    494a:	0e 94 ce 44 	call	0x899c	; 0x899c <__gesf2>
    494e:	18 16       	cp	r1, r24
    4950:	6c f4       	brge	.+26     	; 0x496c <_ZN8GoertzelC1Eff+0xea>
    4952:	8d 81       	ldd	r24, Y+5	; 0x05
    4954:	9e 81       	ldd	r25, Y+6	; 0x06
    4956:	09 2e       	mov	r0, r25
    4958:	00 0c       	add	r0, r0
    495a:	aa 0b       	sbc	r26, r26
    495c:	bb 0b       	sbc	r27, r27
    495e:	bc 01       	movw	r22, r24
    4960:	cd 01       	movw	r24, r26
    4962:	0e 94 1e 44 	call	0x883c	; 0x883c <__floatsisf>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	04 c0       	rjmp	.+8      	; 0x4974 <_ZN8GoertzelC1Eff+0xf2>
    496c:	89 81       	ldd	r24, Y+1	; 0x01
    496e:	9a 81       	ldd	r25, Y+2	; 0x02
    4970:	ab 81       	ldd	r26, Y+3	; 0x03
    4972:	bc 81       	ldd	r27, Y+4	; 0x04
    4974:	bc 01       	movw	r22, r24
    4976:	cd 01       	movw	r24, r26
    4978:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__fixsfsi>
    497c:	dc 01       	movw	r26, r24
    497e:	cb 01       	movw	r24, r22
    4980:	80 93 7f 45 	sts	0x457F, r24	; 0x80457f <_N>
    4984:	90 93 80 45 	sts	0x4580, r25	; 0x804580 <_N+0x1>
    4988:	80 91 7f 45 	lds	r24, 0x457F	; 0x80457f <_N>
    498c:	90 91 80 45 	lds	r25, 0x4580	; 0x804580 <_N+0x1>
    4990:	88 0f       	add	r24, r24
    4992:	99 1f       	adc	r25, r25
    4994:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <malloc>
    4998:	80 93 84 45 	sts	0x4584, r24	; 0x804584 <testData>
    499c:	90 93 85 45 	sts	0x4585, r25	; 0x804585 <testData+0x1>
    49a0:	00 00       	nop
    49a2:	62 96       	adiw	r28, 0x12	; 18
    49a4:	cd bf       	out	0x3d, r28	; 61
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	df 91       	pop	r29
    49aa:	cf 91       	pop	r28
    49ac:	1f 91       	pop	r17
    49ae:	0f 91       	pop	r16
    49b0:	08 95       	ret

000049b2 <_ZN8GoertzelD1Ev>:
    49b2:	cf 93       	push	r28
    49b4:	df 93       	push	r29
    49b6:	00 d0       	rcall	.+0      	; 0x49b8 <_ZN8GoertzelD1Ev+0x6>
    49b8:	cd b7       	in	r28, 0x3d	; 61
    49ba:	de b7       	in	r29, 0x3e	; 62
    49bc:	89 83       	std	Y+1, r24	; 0x01
    49be:	9a 83       	std	Y+2, r25	; 0x02
    49c0:	80 91 84 45 	lds	r24, 0x4584	; 0x804584 <testData>
    49c4:	90 91 85 45 	lds	r25, 0x4585	; 0x804585 <testData+0x1>
    49c8:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <free>
    49cc:	00 00       	nop
    49ce:	0f 90       	pop	r0
    49d0:	0f 90       	pop	r0
    49d2:	df 91       	pop	r29
    49d4:	cf 91       	pop	r28
    49d6:	08 95       	ret

000049d8 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
    49dc:	00 d0       	rcall	.+0      	; 0x49de <_ZN8Goertzel9DataPointEi+0x6>
    49de:	00 d0       	rcall	.+0      	; 0x49e0 <_ZN8Goertzel9DataPointEi+0x8>
    49e0:	cd b7       	in	r28, 0x3d	; 61
    49e2:	de b7       	in	r29, 0x3e	; 62
    49e4:	89 83       	std	Y+1, r24	; 0x01
    49e6:	9a 83       	std	Y+2, r25	; 0x02
    49e8:	6b 83       	std	Y+3, r22	; 0x03
    49ea:	7c 83       	std	Y+4, r23	; 0x04
	if(_samplesReady)
    49ec:	80 91 83 45 	lds	r24, 0x4583	; 0x804583 <_samplesReady>
    49f0:	88 23       	and	r24, r24
    49f2:	19 f0       	breq	.+6      	; 0x49fa <_ZN8Goertzel9DataPointEi+0x22>
	{
		return(_samplesReady);
    49f4:	80 91 83 45 	lds	r24, 0x4583	; 0x804583 <_samplesReady>
    49f8:	32 c0       	rjmp	.+100    	; 0x4a5e <_ZN8Goertzel9DataPointEi+0x86>
	}

	testData[_index] = data;
    49fa:	20 91 84 45 	lds	r18, 0x4584	; 0x804584 <testData>
    49fe:	30 91 85 45 	lds	r19, 0x4585	; 0x804585 <testData+0x1>
    4a02:	80 91 81 45 	lds	r24, 0x4581	; 0x804581 <_index>
    4a06:	90 91 82 45 	lds	r25, 0x4582	; 0x804582 <_index+0x1>
    4a0a:	88 0f       	add	r24, r24
    4a0c:	99 1f       	adc	r25, r25
    4a0e:	82 0f       	add	r24, r18
    4a10:	93 1f       	adc	r25, r19
    4a12:	2b 81       	ldd	r18, Y+3	; 0x03
    4a14:	3c 81       	ldd	r19, Y+4	; 0x04
    4a16:	fc 01       	movw	r30, r24
    4a18:	20 83       	st	Z, r18
    4a1a:	31 83       	std	Z+1, r19	; 0x01
	_index++;
    4a1c:	80 91 81 45 	lds	r24, 0x4581	; 0x804581 <_index>
    4a20:	90 91 82 45 	lds	r25, 0x4582	; 0x804582 <_index+0x1>
    4a24:	01 96       	adiw	r24, 0x01	; 1
    4a26:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <_index>
    4a2a:	90 93 82 45 	sts	0x4582, r25	; 0x804582 <_index+0x1>
	if(_index >= _N)
    4a2e:	20 91 81 45 	lds	r18, 0x4581	; 0x804581 <_index>
    4a32:	30 91 82 45 	lds	r19, 0x4582	; 0x804582 <_index+0x1>
    4a36:	80 91 7f 45 	lds	r24, 0x457F	; 0x80457f <_N>
    4a3a:	90 91 80 45 	lds	r25, 0x4580	; 0x804580 <_N+0x1>
    4a3e:	41 e0       	ldi	r20, 0x01	; 1
    4a40:	28 17       	cp	r18, r24
    4a42:	39 07       	cpc	r19, r25
    4a44:	0c f4       	brge	.+2      	; 0x4a48 <_ZN8Goertzel9DataPointEi+0x70>
    4a46:	40 e0       	ldi	r20, 0x00	; 0
    4a48:	44 23       	and	r20, r20
    4a4a:	39 f0       	breq	.+14     	; 0x4a5a <_ZN8Goertzel9DataPointEi+0x82>
	{
		_index = 0;
    4a4c:	10 92 81 45 	sts	0x4581, r1	; 0x804581 <_index>
    4a50:	10 92 82 45 	sts	0x4582, r1	; 0x804582 <_index+0x1>
		_samplesReady = true;
    4a54:	81 e0       	ldi	r24, 0x01	; 1
    4a56:	80 93 83 45 	sts	0x4583, r24	; 0x804583 <_samplesReady>
	}

	return(_samplesReady);
    4a5a:	80 91 83 45 	lds	r24, 0x4583	; 0x804583 <_samplesReady>
}
    4a5e:	24 96       	adiw	r28, 0x04	; 4
    4a60:	cd bf       	out	0x3d, r28	; 61
    4a62:	de bf       	out	0x3e, r29	; 62
    4a64:	df 91       	pop	r29
    4a66:	cf 91       	pop	r28
    4a68:	08 95       	ret

00004a6a <PORTB_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    4a6a:	cf 93       	push	r28
    4a6c:	df 93       	push	r29
    4a6e:	00 d0       	rcall	.+0      	; 0x4a70 <PORTB_set_pin_pull_mode+0x6>
    4a70:	00 d0       	rcall	.+0      	; 0x4a72 <PORTB_set_pin_pull_mode+0x8>
    4a72:	cd b7       	in	r28, 0x3d	; 61
    4a74:	de b7       	in	r29, 0x3e	; 62
    4a76:	8b 83       	std	Y+3, r24	; 0x03
    4a78:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);
    4a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a7c:	88 2f       	mov	r24, r24
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	80 5d       	subi	r24, 0xD0	; 208
    4a82:	9b 4f       	sbci	r25, 0xFB	; 251
    4a84:	89 83       	std	Y+1, r24	; 0x01
    4a86:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    4a88:	8c 81       	ldd	r24, Y+4	; 0x04
    4a8a:	81 30       	cpi	r24, 0x01	; 1
    4a8c:	59 f4       	brne	.+22     	; 0x4aa4 <PORTB_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    4a8e:	89 81       	ldd	r24, Y+1	; 0x01
    4a90:	9a 81       	ldd	r25, Y+2	; 0x02
    4a92:	fc 01       	movw	r30, r24
    4a94:	80 81       	ld	r24, Z
    4a96:	28 2f       	mov	r18, r24
    4a98:	28 60       	ori	r18, 0x08	; 8
    4a9a:	89 81       	ldd	r24, Y+1	; 0x01
    4a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    4aa2:	0d c0       	rjmp	.+26     	; 0x4abe <PORTB_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    4aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    4aa6:	88 23       	and	r24, r24
    4aa8:	51 f4       	brne	.+20     	; 0x4abe <PORTB_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    4aaa:	89 81       	ldd	r24, Y+1	; 0x01
    4aac:	9a 81       	ldd	r25, Y+2	; 0x02
    4aae:	fc 01       	movw	r30, r24
    4ab0:	80 81       	ld	r24, Z
    4ab2:	28 2f       	mov	r18, r24
    4ab4:	27 7f       	andi	r18, 0xF7	; 247
    4ab6:	89 81       	ldd	r24, Y+1	; 0x01
    4ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aba:	fc 01       	movw	r30, r24
    4abc:	20 83       	st	Z, r18
	}
}
    4abe:	00 00       	nop
    4ac0:	24 96       	adiw	r28, 0x04	; 4
    4ac2:	cd bf       	out	0x3d, r28	; 61
    4ac4:	de bf       	out	0x3e, r29	; 62
    4ac6:	df 91       	pop	r29
    4ac8:	cf 91       	pop	r28
    4aca:	08 95       	ret

00004acc <PORTC_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    4acc:	cf 93       	push	r28
    4ace:	df 93       	push	r29
    4ad0:	00 d0       	rcall	.+0      	; 0x4ad2 <PORTC_set_pin_pull_mode+0x6>
    4ad2:	00 d0       	rcall	.+0      	; 0x4ad4 <PORTC_set_pin_pull_mode+0x8>
    4ad4:	cd b7       	in	r28, 0x3d	; 61
    4ad6:	de b7       	in	r29, 0x3e	; 62
    4ad8:	8b 83       	std	Y+3, r24	; 0x03
    4ada:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);
    4adc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ade:	88 2f       	mov	r24, r24
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	80 5b       	subi	r24, 0xB0	; 176
    4ae4:	9b 4f       	sbci	r25, 0xFB	; 251
    4ae6:	89 83       	std	Y+1, r24	; 0x01
    4ae8:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    4aea:	8c 81       	ldd	r24, Y+4	; 0x04
    4aec:	81 30       	cpi	r24, 0x01	; 1
    4aee:	59 f4       	brne	.+22     	; 0x4b06 <PORTC_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    4af0:	89 81       	ldd	r24, Y+1	; 0x01
    4af2:	9a 81       	ldd	r25, Y+2	; 0x02
    4af4:	fc 01       	movw	r30, r24
    4af6:	80 81       	ld	r24, Z
    4af8:	28 2f       	mov	r18, r24
    4afa:	28 60       	ori	r18, 0x08	; 8
    4afc:	89 81       	ldd	r24, Y+1	; 0x01
    4afe:	9a 81       	ldd	r25, Y+2	; 0x02
    4b00:	fc 01       	movw	r30, r24
    4b02:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    4b04:	0d c0       	rjmp	.+26     	; 0x4b20 <PORTC_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    4b06:	8c 81       	ldd	r24, Y+4	; 0x04
    4b08:	88 23       	and	r24, r24
    4b0a:	51 f4       	brne	.+20     	; 0x4b20 <PORTC_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    4b0c:	89 81       	ldd	r24, Y+1	; 0x01
    4b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b10:	fc 01       	movw	r30, r24
    4b12:	80 81       	ld	r24, Z
    4b14:	28 2f       	mov	r18, r24
    4b16:	27 7f       	andi	r18, 0xF7	; 247
    4b18:	89 81       	ldd	r24, Y+1	; 0x01
    4b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b1c:	fc 01       	movw	r30, r24
    4b1e:	20 83       	st	Z, r18
	}
}
    4b20:	00 00       	nop
    4b22:	24 96       	adiw	r28, 0x04	; 4
    4b24:	cd bf       	out	0x3d, r28	; 61
    4b26:	de bf       	out	0x3e, r29	; 62
    4b28:	df 91       	pop	r29
    4b2a:	cf 91       	pop	r28
    4b2c:	08 95       	ret

00004b2e <PORTC_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    4b2e:	cf 93       	push	r28
    4b30:	df 93       	push	r29
    4b32:	00 d0       	rcall	.+0      	; 0x4b34 <PORTC_set_pin_dir+0x6>
    4b34:	cd b7       	in	r28, 0x3d	; 61
    4b36:	de b7       	in	r29, 0x3e	; 62
    4b38:	89 83       	std	Y+1, r24	; 0x01
    4b3a:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    4b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3e:	88 2f       	mov	r24, r24
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	81 30       	cpi	r24, 0x01	; 1
    4b44:	91 05       	cpc	r25, r1
    4b46:	e1 f0       	breq	.+56     	; 0x4b80 <PORTC_set_pin_dir+0x52>
    4b48:	82 30       	cpi	r24, 0x02	; 2
    4b4a:	91 05       	cpc	r25, r1
    4b4c:	71 f1       	breq	.+92     	; 0x4baa <PORTC_set_pin_dir+0x7c>
    4b4e:	89 2b       	or	r24, r25
    4b50:	09 f0       	breq	.+2      	; 0x4b54 <PORTC_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    4b52:	3b c0       	rjmp	.+118    	; 0x4bca <PORTC_set_pin_dir+0x9c>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    4b54:	88 e0       	ldi	r24, 0x08	; 8
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	28 e0       	ldi	r18, 0x08	; 8
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	f9 01       	movw	r30, r18
    4b5e:	20 81       	ld	r18, Z
    4b60:	62 2f       	mov	r22, r18
    4b62:	29 81       	ldd	r18, Y+1	; 0x01
    4b64:	42 2f       	mov	r20, r18
    4b66:	50 e0       	ldi	r21, 0x00	; 0
    4b68:	21 e0       	ldi	r18, 0x01	; 1
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	02 c0       	rjmp	.+4      	; 0x4b72 <PORTC_set_pin_dir+0x44>
    4b6e:	22 0f       	add	r18, r18
    4b70:	33 1f       	adc	r19, r19
    4b72:	4a 95       	dec	r20
    4b74:	e2 f7       	brpl	.-8      	; 0x4b6e <PORTC_set_pin_dir+0x40>
    4b76:	20 95       	com	r18
    4b78:	26 23       	and	r18, r22
    4b7a:	fc 01       	movw	r30, r24
    4b7c:	20 83       	st	Z, r18
		break;
    4b7e:	25 c0       	rjmp	.+74     	; 0x4bca <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    4b80:	88 e0       	ldi	r24, 0x08	; 8
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	28 e0       	ldi	r18, 0x08	; 8
    4b86:	30 e0       	ldi	r19, 0x00	; 0
    4b88:	f9 01       	movw	r30, r18
    4b8a:	20 81       	ld	r18, Z
    4b8c:	62 2f       	mov	r22, r18
    4b8e:	29 81       	ldd	r18, Y+1	; 0x01
    4b90:	42 2f       	mov	r20, r18
    4b92:	50 e0       	ldi	r21, 0x00	; 0
    4b94:	21 e0       	ldi	r18, 0x01	; 1
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	02 c0       	rjmp	.+4      	; 0x4b9e <PORTC_set_pin_dir+0x70>
    4b9a:	22 0f       	add	r18, r18
    4b9c:	33 1f       	adc	r19, r19
    4b9e:	4a 95       	dec	r20
    4ba0:	e2 f7       	brpl	.-8      	; 0x4b9a <PORTC_set_pin_dir+0x6c>
    4ba2:	26 2b       	or	r18, r22
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	20 83       	st	Z, r18
		break;
    4ba8:	10 c0       	rjmp	.+32     	; 0x4bca <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    4baa:	89 81       	ldd	r24, Y+1	; 0x01
    4bac:	88 2f       	mov	r24, r24
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	80 5b       	subi	r24, 0xB0	; 176
    4bb2:	9b 4f       	sbci	r25, 0xFB	; 251
    4bb4:	29 81       	ldd	r18, Y+1	; 0x01
    4bb6:	22 2f       	mov	r18, r18
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	20 5b       	subi	r18, 0xB0	; 176
    4bbc:	3b 4f       	sbci	r19, 0xFB	; 251
    4bbe:	f9 01       	movw	r30, r18
    4bc0:	20 81       	ld	r18, Z
    4bc2:	28 60       	ori	r18, 0x08	; 8
    4bc4:	fc 01       	movw	r30, r24
    4bc6:	20 83       	st	Z, r18
		break;
    4bc8:	00 00       	nop
	default:
		break;
	}
}
    4bca:	00 00       	nop
    4bcc:	0f 90       	pop	r0
    4bce:	0f 90       	pop	r0
    4bd0:	df 91       	pop	r29
    4bd2:	cf 91       	pop	r28
    4bd4:	08 95       	ret

00004bd6 <I2C_0_Init>:
/************************************************************************/
/* I2C_0                                                               */
/************************************************************************/

void I2C_0_Init(void)
{
    4bd6:	cf 93       	push	r28
    4bd8:	df 93       	push	r29
    4bda:	cd b7       	in	r28, 0x3d	; 61
    4bdc:	de b7       	in	r29, 0x3e	; 62
	PORTC_set_pin_dir(3, PORT_DIR_OUT);	
    4bde:	61 e0       	ldi	r22, 0x01	; 1
    4be0:	83 e0       	ldi	r24, 0x03	; 3
    4be2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <PORTC_set_pin_dir>
	PORTC_set_pin_pull_mode(3, PORT_PULL_UP);
    4be6:	61 e0       	ldi	r22, 0x01	; 1
    4be8:	83 e0       	ldi	r24, 0x03	; 3
    4bea:	0e 94 66 25 	call	0x4acc	; 0x4acc <PORTC_set_pin_pull_mode>
	PORTC_set_pin_pull_mode(2, PORT_PULL_UP);
    4bee:	61 e0       	ldi	r22, 0x01	; 1
    4bf0:	82 e0       	ldi	r24, 0x02	; 2
    4bf2:	0e 94 66 25 	call	0x4acc	; 0x4acc <PORTC_set_pin_pull_mode>

	/* Select I2C pins PC2/PC3 */
	PORTMUX.TWIROUTEA &= 0x0A;
    4bf6:	80 ee       	ldi	r24, 0xE0	; 224
    4bf8:	95 e0       	ldi	r25, 0x05	; 5
    4bfa:	20 ee       	ldi	r18, 0xE0	; 224
    4bfc:	35 e0       	ldi	r19, 0x05	; 5
    4bfe:	f9 01       	movw	r30, r18
    4c00:	25 81       	ldd	r18, Z+5	; 0x05
    4c02:	2a 70       	andi	r18, 0x0A	; 10
    4c04:	fc 01       	movw	r30, r24
    4c06:	25 83       	std	Z+5, r18	; 0x05
	PORTMUX.TWIROUTEA |= 0x02;
    4c08:	80 ee       	ldi	r24, 0xE0	; 224
    4c0a:	95 e0       	ldi	r25, 0x05	; 5
    4c0c:	20 ee       	ldi	r18, 0xE0	; 224
    4c0e:	35 e0       	ldi	r19, 0x05	; 5
    4c10:	f9 01       	movw	r30, r18
    4c12:	25 81       	ldd	r18, Z+5	; 0x05
    4c14:	22 60       	ori	r18, 0x02	; 2
    4c16:	fc 01       	movw	r30, r24
    4c18:	25 83       	std	Z+5, r18	; 0x05
	
	/* Host Baud Rate Control */
	TWI0.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	99 e0       	ldi	r25, 0x09	; 9
    4c1e:	2f e6       	ldi	r18, 0x6F	; 111
    4c20:	fc 01       	movw	r30, r24
    4c22:	26 83       	std	Z+6, r18	; 0x06
	
	/* Enable TWI */
	TWI0.MCTRLA = TWI_ENABLE_bm;
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	99 e0       	ldi	r25, 0x09	; 9
    4c28:	21 e0       	ldi	r18, 0x01	; 1
    4c2a:	fc 01       	movw	r30, r24
    4c2c:	23 83       	std	Z+3, r18	; 0x03
	
	/* Initialize the address register */
	TWI0.MADDR = 0x00;
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	99 e0       	ldi	r25, 0x09	; 9
    4c32:	fc 01       	movw	r30, r24
    4c34:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI0.MDATA = 0x00;
    4c36:	80 e0       	ldi	r24, 0x00	; 0
    4c38:	99 e0       	ldi	r25, 0x09	; 9
    4c3a:	fc 01       	movw	r30, r24
    4c3c:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
    4c40:	99 e0       	ldi	r25, 0x09	; 9
    4c42:	21 e0       	ldi	r18, 0x01	; 1
    4c44:	fc 01       	movw	r30, r24
    4c46:	25 83       	std	Z+5, r18	; 0x05
	/* Select I2C pins PC2/PC3 */
}
    4c48:	00 00       	nop
    4c4a:	df 91       	pop	r29
    4c4c:	cf 91       	pop	r28
    4c4e:	08 95       	ret

00004c50 <_ZL11i2c_0_WaitWv>:

static uint8_t i2c_0_WaitW(void)
{
    4c50:	cf 93       	push	r28
    4c52:	df 93       	push	r29
    4c54:	1f 92       	push	r1
    4c56:	cd b7       	in	r28, 0x3d	; 61
    4c58:	de b7       	in	r29, 0x3e	; 62
	uint8_t state = I2C_INIT;
    4c5a:	19 82       	std	Y+1, r1	; 0x01
	
	g_i2c0_timeout_ticks = 300;
    4c5c:	8c e2       	ldi	r24, 0x2C	; 44
    4c5e:	91 e0       	ldi	r25, 0x01	; 1
    4c60:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c0_timeout_ticks>
    4c64:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c0_timeout_ticks+0x1>
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    4c68:	80 e0       	ldi	r24, 0x00	; 0
    4c6a:	99 e0       	ldi	r25, 0x09	; 9
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	85 81       	ldd	r24, Z+5	; 0x05
    4c70:	88 2f       	mov	r24, r24
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	80 7c       	andi	r24, 0xC0	; 192
    4c76:	99 27       	eor	r25, r25
    4c78:	21 e0       	ldi	r18, 0x01	; 1
    4c7a:	89 2b       	or	r24, r25
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <_ZL11i2c_0_WaitWv+0x30>
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	22 23       	and	r18, r18
    4c82:	a1 f0       	breq	.+40     	; 0x4cac <_ZL11i2c_0_WaitWv+0x5c>
		{
			if(!(TWI0.MSTATUS & TWI_RXACK_bm))
    4c84:	80 e0       	ldi	r24, 0x00	; 0
    4c86:	99 e0       	ldi	r25, 0x09	; 9
    4c88:	fc 01       	movw	r30, r24
    4c8a:	85 81       	ldd	r24, Z+5	; 0x05
    4c8c:	88 2f       	mov	r24, r24
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	80 71       	andi	r24, 0x10	; 16
    4c92:	99 27       	eor	r25, r25
    4c94:	21 e0       	ldi	r18, 0x01	; 1
    4c96:	89 2b       	or	r24, r25
    4c98:	09 f0       	breq	.+2      	; 0x4c9c <_ZL11i2c_0_WaitWv+0x4c>
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	22 23       	and	r18, r18
    4c9e:	19 f0       	breq	.+6      	; 0x4ca6 <_ZL11i2c_0_WaitWv+0x56>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    4ca0:	81 e0       	ldi	r24, 0x01	; 1
    4ca2:	89 83       	std	Y+1, r24	; 0x01
    4ca4:	13 c0       	rjmp	.+38     	; 0x4ccc <_ZL11i2c_0_WaitWv+0x7c>
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    4ca6:	82 e0       	ldi	r24, 0x02	; 2
    4ca8:	89 83       	std	Y+1, r24	; 0x01
    4caa:	10 c0       	rjmp	.+32     	; 0x4ccc <_ZL11i2c_0_WaitWv+0x7c>
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	99 e0       	ldi	r25, 0x09	; 9
    4cb0:	fc 01       	movw	r30, r24
    4cb2:	85 81       	ldd	r24, Z+5	; 0x05
    4cb4:	88 2f       	mov	r24, r24
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	8c 70       	andi	r24, 0x0C	; 12
    4cba:	99 27       	eor	r25, r25
    4cbc:	21 e0       	ldi	r18, 0x01	; 1
    4cbe:	89 2b       	or	r24, r25
    4cc0:	09 f4       	brne	.+2      	; 0x4cc4 <_ZL11i2c_0_WaitWv+0x74>
    4cc2:	20 e0       	ldi	r18, 0x00	; 0
    4cc4:	22 23       	and	r18, r18
    4cc6:	11 f0       	breq	.+4      	; 0x4ccc <_ZL11i2c_0_WaitWv+0x7c>
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    4cc8:	84 e0       	ldi	r24, 0x04	; 4
    4cca:	89 83       	std	Y+1, r24	; 0x01
		}
	} while(!state && g_i2c0_timeout_ticks);
    4ccc:	89 81       	ldd	r24, Y+1	; 0x01
    4cce:	88 23       	and	r24, r24
    4cd0:	41 f4       	brne	.+16     	; 0x4ce2 <_ZL11i2c_0_WaitWv+0x92>
    4cd2:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c0_timeout_ticks>
    4cd6:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c0_timeout_ticks+0x1>
    4cda:	89 2b       	or	r24, r25
    4cdc:	11 f0       	breq	.+4      	; 0x4ce2 <_ZL11i2c_0_WaitWv+0x92>
    4cde:	81 e0       	ldi	r24, 0x01	; 1
    4ce0:	01 c0       	rjmp	.+2      	; 0x4ce4 <_ZL11i2c_0_WaitWv+0x94>
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
	
	do
    4ce4:	88 23       	and	r24, r24
    4ce6:	09 f0       	breq	.+2      	; 0x4cea <_ZL11i2c_0_WaitWv+0x9a>
    4ce8:	bf cf       	rjmp	.-130    	; 0x4c68 <_ZL11i2c_0_WaitWv+0x18>
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	if(!g_i2c0_timeout_ticks) 
    4cea:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c0_timeout_ticks>
    4cee:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c0_timeout_ticks+0x1>
    4cf2:	21 e0       	ldi	r18, 0x01	; 1
    4cf4:	89 2b       	or	r24, r25
    4cf6:	09 f0       	breq	.+2      	; 0x4cfa <_ZL11i2c_0_WaitWv+0xaa>
    4cf8:	20 e0       	ldi	r18, 0x00	; 0
    4cfa:	22 23       	and	r18, r18
    4cfc:	11 f0       	breq	.+4      	; 0x4d02 <_ZL11i2c_0_WaitWv+0xb2>
	{
		state = I2C_ERROR;
    4cfe:	84 e0       	ldi	r24, 0x04	; 4
    4d00:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return state;
    4d02:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d04:	0f 90       	pop	r0
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	08 95       	ret

00004d0c <_ZL11i2c_0_WaitRv>:

static uint8_t i2c_0_WaitR(void)
{
    4d0c:	cf 93       	push	r28
    4d0e:	df 93       	push	r29
    4d10:	1f 92       	push	r1
    4d12:	cd b7       	in	r28, 0x3d	; 61
    4d14:	de b7       	in	r29, 0x3e	; 62
	uint8_t state = I2C_INIT;
    4d16:	19 82       	std	Y+1, r1	; 0x01
	
	g_i2c0_timeout_ticks = 200;
    4d18:	88 ec       	ldi	r24, 0xC8	; 200
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c0_timeout_ticks>
    4d20:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c0_timeout_ticks+0x1>
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    4d24:	80 e0       	ldi	r24, 0x00	; 0
    4d26:	99 e0       	ldi	r25, 0x09	; 9
    4d28:	fc 01       	movw	r30, r24
    4d2a:	85 81       	ldd	r24, Z+5	; 0x05
    4d2c:	88 2f       	mov	r24, r24
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	80 7c       	andi	r24, 0xC0	; 192
    4d32:	99 27       	eor	r25, r25
    4d34:	21 e0       	ldi	r18, 0x01	; 1
    4d36:	89 2b       	or	r24, r25
    4d38:	09 f4       	brne	.+2      	; 0x4d3c <_ZL11i2c_0_WaitRv+0x30>
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	22 23       	and	r18, r18
    4d3e:	19 f0       	breq	.+6      	; 0x4d46 <_ZL11i2c_0_WaitRv+0x3a>
		{
			state = I2C_READY;
    4d40:	83 e0       	ldi	r24, 0x03	; 3
    4d42:	89 83       	std	Y+1, r24	; 0x01
    4d44:	10 c0       	rjmp	.+32     	; 0x4d66 <_ZL11i2c_0_WaitRv+0x5a>
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	99 e0       	ldi	r25, 0x09	; 9
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	85 81       	ldd	r24, Z+5	; 0x05
    4d4e:	88 2f       	mov	r24, r24
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	8c 70       	andi	r24, 0x0C	; 12
    4d54:	99 27       	eor	r25, r25
    4d56:	21 e0       	ldi	r18, 0x01	; 1
    4d58:	89 2b       	or	r24, r25
    4d5a:	09 f4       	brne	.+2      	; 0x4d5e <_ZL11i2c_0_WaitRv+0x52>
    4d5c:	20 e0       	ldi	r18, 0x00	; 0
    4d5e:	22 23       	and	r18, r18
    4d60:	11 f0       	breq	.+4      	; 0x4d66 <_ZL11i2c_0_WaitRv+0x5a>
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    4d62:	84 e0       	ldi	r24, 0x04	; 4
    4d64:	89 83       	std	Y+1, r24	; 0x01
		}
	} while(!state && g_i2c0_timeout_ticks);
    4d66:	89 81       	ldd	r24, Y+1	; 0x01
    4d68:	88 23       	and	r24, r24
    4d6a:	41 f4       	brne	.+16     	; 0x4d7c <_ZL11i2c_0_WaitRv+0x70>
    4d6c:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c0_timeout_ticks>
    4d70:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c0_timeout_ticks+0x1>
    4d74:	89 2b       	or	r24, r25
    4d76:	11 f0       	breq	.+4      	; 0x4d7c <_ZL11i2c_0_WaitRv+0x70>
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	01 c0       	rjmp	.+2      	; 0x4d7e <_ZL11i2c_0_WaitRv+0x72>
    4d7c:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    4d7e:	88 23       	and	r24, r24
    4d80:	09 f0       	breq	.+2      	; 0x4d84 <_ZL11i2c_0_WaitRv+0x78>
    4d82:	d0 cf       	rjmp	.-96     	; 0x4d24 <_ZL11i2c_0_WaitRv+0x18>
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
    4d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d86:	0f 90       	pop	r0
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	08 95       	ret

00004d8e <I2C_0_SendData>:

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_0_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    4d8e:	cf 93       	push	r28
    4d90:	df 93       	push	r29
    4d92:	cd b7       	in	r28, 0x3d	; 61
    4d94:	de b7       	in	r29, 0x3e	; 62
    4d96:	26 97       	sbiw	r28, 0x06	; 6
    4d98:	cd bf       	out	0x3d, r28	; 61
    4d9a:	de bf       	out	0x3e, r29	; 62
    4d9c:	8a 83       	std	Y+2, r24	; 0x02
    4d9e:	6b 83       	std	Y+3, r22	; 0x03
    4da0:	4c 83       	std	Y+4, r20	; 0x04
    4da2:	5d 83       	std	Y+5, r21	; 0x05
    4da4:	2e 83       	std	Y+6, r18	; 0x06
	uint8_t retVal = (uint8_t) - 1;
    4da6:	8f ef       	ldi	r24, 0xFF	; 255
    4da8:	89 83       	std	Y+1, r24	; 0x01
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
    4daa:	80 e0       	ldi	r24, 0x00	; 0
    4dac:	99 e0       	ldi	r25, 0x09	; 9
    4dae:	2a 81       	ldd	r18, Y+2	; 0x02
    4db0:	fc 01       	movw	r30, r24
    4db2:	27 83       	std	Z+7, r18	; 0x07
	if(i2c_0_WaitW() != I2C_ACKED)
    4db4:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_ZL11i2c_0_WaitWv>
    4db8:	98 2f       	mov	r25, r24
    4dba:	81 e0       	ldi	r24, 0x01	; 1
    4dbc:	91 30       	cpi	r25, 0x01	; 1
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <I2C_0_SendData+0x34>
    4dc0:	80 e0       	ldi	r24, 0x00	; 0
    4dc2:	88 23       	and	r24, r24
    4dc4:	11 f0       	breq	.+4      	; 0x4dca <I2C_0_SendData+0x3c>
	{
		return retVal;
    4dc6:	89 81       	ldd	r24, Y+1	; 0x01
    4dc8:	44 c0       	rjmp	.+136    	; 0x4e52 <I2C_0_SendData+0xc4>
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    4dca:	80 e0       	ldi	r24, 0x00	; 0
    4dcc:	99 e0       	ldi	r25, 0x09	; 9
    4dce:	2b 81       	ldd	r18, Y+3	; 0x03
    4dd0:	fc 01       	movw	r30, r24
    4dd2:	20 87       	std	Z+8, r18	; 0x08
	if(i2c_0_WaitW() != I2C_ACKED)
    4dd4:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_ZL11i2c_0_WaitWv>
    4dd8:	98 2f       	mov	r25, r24
    4dda:	81 e0       	ldi	r24, 0x01	; 1
    4ddc:	91 30       	cpi	r25, 0x01	; 1
    4dde:	09 f4       	brne	.+2      	; 0x4de2 <I2C_0_SendData+0x54>
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	88 23       	and	r24, r24
    4de4:	11 f0       	breq	.+4      	; 0x4dea <I2C_0_SendData+0x5c>
	{
		return retVal;
    4de6:	89 81       	ldd	r24, Y+1	; 0x01
    4de8:	34 c0       	rjmp	.+104    	; 0x4e52 <I2C_0_SendData+0xc4>
	}

	retVal = 0;
    4dea:	19 82       	std	Y+1, r1	; 0x01
	if((len != 0) && (pData != NULL))
    4dec:	8e 81       	ldd	r24, Y+6	; 0x06
    4dee:	88 23       	and	r24, r24
    4df0:	79 f1       	breq	.+94     	; 0x4e50 <I2C_0_SendData+0xc2>
    4df2:	8c 81       	ldd	r24, Y+4	; 0x04
    4df4:	9d 81       	ldd	r25, Y+5	; 0x05
    4df6:	89 2b       	or	r24, r25
    4df8:	59 f1       	breq	.+86     	; 0x4e50 <I2C_0_SendData+0xc2>
	{
		while(len--)
    4dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    4dfc:	9f ef       	ldi	r25, 0xFF	; 255
    4dfe:	98 0f       	add	r25, r24
    4e00:	9e 83       	std	Y+6, r25	; 0x06
    4e02:	91 e0       	ldi	r25, 0x01	; 1
    4e04:	88 23       	and	r24, r24
    4e06:	09 f4       	brne	.+2      	; 0x4e0a <I2C_0_SendData+0x7c>
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	99 23       	and	r25, r25
    4e0c:	09 f1       	breq	.+66     	; 0x4e50 <I2C_0_SendData+0xc2>
		{
			TWI0.MDATA = *pData;
    4e0e:	80 e0       	ldi	r24, 0x00	; 0
    4e10:	99 e0       	ldi	r25, 0x09	; 9
    4e12:	2c 81       	ldd	r18, Y+4	; 0x04
    4e14:	3d 81       	ldd	r19, Y+5	; 0x05
    4e16:	f9 01       	movw	r30, r18
    4e18:	20 81       	ld	r18, Z
    4e1a:	fc 01       	movw	r30, r24
    4e1c:	20 87       	std	Z+8, r18	; 0x08
			if(i2c_0_WaitW() == I2C_ACKED)
    4e1e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_ZL11i2c_0_WaitWv>
    4e22:	98 2f       	mov	r25, r24
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	91 30       	cpi	r25, 0x01	; 1
    4e28:	09 f0       	breq	.+2      	; 0x4e2c <I2C_0_SendData+0x9e>
    4e2a:	80 e0       	ldi	r24, 0x00	; 0
    4e2c:	88 23       	and	r24, r24
    4e2e:	79 f0       	breq	.+30     	; 0x4e4e <I2C_0_SendData+0xc0>
			{
				retVal++;
    4e30:	89 81       	ldd	r24, Y+1	; 0x01
    4e32:	8f 5f       	subi	r24, 0xFF	; 255
    4e34:	89 83       	std	Y+1, r24	; 0x01
				pData++;
    4e36:	8c 81       	ldd	r24, Y+4	; 0x04
    4e38:	9d 81       	ldd	r25, Y+5	; 0x05
    4e3a:	01 96       	adiw	r24, 0x01	; 1
    4e3c:	8c 83       	std	Y+4, r24	; 0x04
    4e3e:	9d 83       	std	Y+5, r25	; 0x05
				if(!len) I2C_0_EndSession();
    4e40:	8e 81       	ldd	r24, Y+6	; 0x06
    4e42:	88 23       	and	r24, r24
    4e44:	11 f4       	brne	.+4      	; 0x4e4a <I2C_0_SendData+0xbc>
    4e46:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <I2C_0_EndSession>
				continue;
    4e4a:	00 00       	nop
	}

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
    4e4c:	d6 cf       	rjmp	.-84     	; 0x4dfa <I2C_0_SendData+0x6c>
				if(!len) I2C_0_EndSession();
				continue;
			}
			else // did not get ACK after client address
			{
				break;
    4e4e:	00 00       	nop
			}
		}
	}
	
	return retVal;
    4e50:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e52:	26 96       	adiw	r28, 0x06	; 6
    4e54:	cd bf       	out	0x3d, r28	; 61
    4e56:	de bf       	out	0x3e, r29	; 62
    4e58:	df 91       	pop	r29
    4e5a:	cf 91       	pop	r28
    4e5c:	08 95       	ret

00004e5e <I2C_0_GetData>:

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_0_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    4e5e:	cf 93       	push	r28
    4e60:	df 93       	push	r29
    4e62:	cd b7       	in	r28, 0x3d	; 61
    4e64:	de b7       	in	r29, 0x3e	; 62
    4e66:	26 97       	sbiw	r28, 0x06	; 6
    4e68:	cd bf       	out	0x3d, r28	; 61
    4e6a:	de bf       	out	0x3e, r29	; 62
    4e6c:	8a 83       	std	Y+2, r24	; 0x02
    4e6e:	6b 83       	std	Y+3, r22	; 0x03
    4e70:	4c 83       	std	Y+4, r20	; 0x04
    4e72:	5d 83       	std	Y+5, r21	; 0x05
    4e74:	2e 83       	std	Y+6, r18	; 0x06
	uint8_t retVal = (uint8_t) -1;
    4e76:	8f ef       	ldi	r24, 0xFF	; 255
    4e78:	89 83       	std	Y+1, r24	; 0x01
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	99 e0       	ldi	r25, 0x09	; 9
    4e7e:	2a 81       	ldd	r18, Y+2	; 0x02
    4e80:	fc 01       	movw	r30, r24
    4e82:	27 83       	std	Z+7, r18	; 0x07
	if(i2c_0_WaitW() != I2C_ACKED)
    4e84:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_ZL11i2c_0_WaitWv>
    4e88:	98 2f       	mov	r25, r24
    4e8a:	81 e0       	ldi	r24, 0x01	; 1
    4e8c:	91 30       	cpi	r25, 0x01	; 1
    4e8e:	09 f4       	brne	.+2      	; 0x4e92 <I2C_0_GetData+0x34>
    4e90:	80 e0       	ldi	r24, 0x00	; 0
    4e92:	88 23       	and	r24, r24
    4e94:	11 f0       	breq	.+4      	; 0x4e9a <I2C_0_GetData+0x3c>
	{
		return retVal;
    4e96:	89 81       	ldd	r24, Y+1	; 0x01
    4e98:	5a c0       	rjmp	.+180    	; 0x4f4e <I2C_0_GetData+0xf0>
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	99 e0       	ldi	r25, 0x09	; 9
    4e9e:	2b 81       	ldd	r18, Y+3	; 0x03
    4ea0:	fc 01       	movw	r30, r24
    4ea2:	20 87       	std	Z+8, r18	; 0x08
	if(i2c_0_WaitW() != I2C_ACKED)
    4ea4:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_ZL11i2c_0_WaitWv>
    4ea8:	98 2f       	mov	r25, r24
    4eaa:	81 e0       	ldi	r24, 0x01	; 1
    4eac:	91 30       	cpi	r25, 0x01	; 1
    4eae:	09 f4       	brne	.+2      	; 0x4eb2 <I2C_0_GetData+0x54>
    4eb0:	80 e0       	ldi	r24, 0x00	; 0
    4eb2:	88 23       	and	r24, r24
    4eb4:	11 f0       	breq	.+4      	; 0x4eba <I2C_0_GetData+0x5c>
	{
		return retVal;
    4eb6:	89 81       	ldd	r24, Y+1	; 0x01
    4eb8:	4a c0       	rjmp	.+148    	; 0x4f4e <I2C_0_GetData+0xf0>
	}
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
    4eba:	80 e0       	ldi	r24, 0x00	; 0
    4ebc:	99 e0       	ldi	r25, 0x09	; 9
    4ebe:	2a 81       	ldd	r18, Y+2	; 0x02
    4ec0:	21 60       	ori	r18, 0x01	; 1
    4ec2:	fc 01       	movw	r30, r24
    4ec4:	27 83       	std	Z+7, r18	; 0x07
	if(i2c_0_WaitW() != I2C_ACKED)
    4ec6:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_ZL11i2c_0_WaitWv>
    4eca:	98 2f       	mov	r25, r24
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	91 30       	cpi	r25, 0x01	; 1
    4ed0:	09 f4       	brne	.+2      	; 0x4ed4 <I2C_0_GetData+0x76>
    4ed2:	80 e0       	ldi	r24, 0x00	; 0
    4ed4:	88 23       	and	r24, r24
    4ed6:	11 f0       	breq	.+4      	; 0x4edc <I2C_0_GetData+0x7e>
	{
		return retVal;
    4ed8:	89 81       	ldd	r24, Y+1	; 0x01
    4eda:	39 c0       	rjmp	.+114    	; 0x4f4e <I2C_0_GetData+0xf0>
	}
	
	retVal = 0;
    4edc:	19 82       	std	Y+1, r1	; 0x01
	if((len != 0) && (pData !=NULL ))
    4ede:	8e 81       	ldd	r24, Y+6	; 0x06
    4ee0:	88 23       	and	r24, r24
    4ee2:	a1 f1       	breq	.+104    	; 0x4f4c <I2C_0_GetData+0xee>
    4ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ee8:	89 2b       	or	r24, r25
    4eea:	81 f1       	breq	.+96     	; 0x4f4c <I2C_0_GetData+0xee>
	{
		while(len--)
    4eec:	8e 81       	ldd	r24, Y+6	; 0x06
    4eee:	9f ef       	ldi	r25, 0xFF	; 255
    4ef0:	98 0f       	add	r25, r24
    4ef2:	9e 83       	std	Y+6, r25	; 0x06
    4ef4:	91 e0       	ldi	r25, 0x01	; 1
    4ef6:	88 23       	and	r24, r24
    4ef8:	09 f4       	brne	.+2      	; 0x4efc <I2C_0_GetData+0x9e>
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	99 23       	and	r25, r25
    4efe:	31 f1       	breq	.+76     	; 0x4f4c <I2C_0_GetData+0xee>
		{
			if(i2c_0_WaitR() == I2C_READY)
    4f00:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <_ZL11i2c_0_WaitRv>
    4f04:	98 2f       	mov	r25, r24
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	93 30       	cpi	r25, 0x03	; 3
    4f0a:	09 f0       	breq	.+2      	; 0x4f0e <I2C_0_GetData+0xb0>
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
    4f0e:	88 23       	and	r24, r24
    4f10:	e1 f0       	breq	.+56     	; 0x4f4a <I2C_0_GetData+0xec>
			{
				*pData = TWI0.MDATA;
    4f12:	80 e0       	ldi	r24, 0x00	; 0
    4f14:	99 e0       	ldi	r25, 0x09	; 9
    4f16:	fc 01       	movw	r30, r24
    4f18:	20 85       	ldd	r18, Z+8	; 0x08
    4f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    4f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    4f1e:	fc 01       	movw	r30, r24
    4f20:	20 83       	st	Z, r18
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	99 e0       	ldi	r25, 0x09	; 9
    4f26:	2e 81       	ldd	r18, Y+6	; 0x06
    4f28:	22 23       	and	r18, r18
    4f2a:	11 f4       	brne	.+4      	; 0x4f30 <I2C_0_GetData+0xd2>
    4f2c:	27 e0       	ldi	r18, 0x07	; 7
    4f2e:	01 c0       	rjmp	.+2      	; 0x4f32 <I2C_0_GetData+0xd4>
    4f30:	22 e0       	ldi	r18, 0x02	; 2
    4f32:	fc 01       	movw	r30, r24
    4f34:	24 83       	std	Z+4, r18	; 0x04
				retVal++;
    4f36:	89 81       	ldd	r24, Y+1	; 0x01
    4f38:	8f 5f       	subi	r24, 0xFF	; 255
    4f3a:	89 83       	std	Y+1, r24	; 0x01
				pData++;
    4f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    4f40:	01 96       	adiw	r24, 0x01	; 1
    4f42:	8c 83       	std	Y+4, r24	; 0x04
    4f44:	9d 83       	std	Y+5, r25	; 0x05
				continue;
    4f46:	00 00       	nop
	}
	
	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
    4f48:	d1 cf       	rjmp	.-94     	; 0x4eec <I2C_0_GetData+0x8e>
				retVal++;
				pData++;
				continue;
			}
			else
			break;
    4f4a:	00 00       	nop
		}
	}
	
	return retVal;
    4f4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f4e:	26 96       	adiw	r28, 0x06	; 6
    4f50:	cd bf       	out	0x3d, r28	; 61
    4f52:	de bf       	out	0x3e, r29	; 62
    4f54:	df 91       	pop	r29
    4f56:	cf 91       	pop	r28
    4f58:	08 95       	ret

00004f5a <I2C_0_EndSession>:

void I2C_0_EndSession(void)
{
    4f5a:	cf 93       	push	r28
    4f5c:	df 93       	push	r29
    4f5e:	cd b7       	in	r28, 0x3d	; 61
    4f60:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    4f62:	80 e0       	ldi	r24, 0x00	; 0
    4f64:	99 e0       	ldi	r25, 0x09	; 9
    4f66:	23 e0       	ldi	r18, 0x03	; 3
    4f68:	fc 01       	movw	r30, r24
    4f6a:	24 83       	std	Z+4, r18	; 0x04
}
    4f6c:	00 00       	nop
    4f6e:	df 91       	pop	r29
    4f70:	cf 91       	pop	r28
    4f72:	08 95       	ret

00004f74 <I2C_1_Init>:
/* I2C_1                                                               */
/************************************************************************/


void I2C_1_Init(void)
{
    4f74:	cf 93       	push	r28
    4f76:	df 93       	push	r29
    4f78:	cd b7       	in	r28, 0x3d	; 61
    4f7a:	de b7       	in	r29, 0x3e	; 62
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    4f7c:	80 ee       	ldi	r24, 0xE0	; 224
    4f7e:	95 e0       	ldi	r25, 0x05	; 5
    4f80:	20 ee       	ldi	r18, 0xE0	; 224
    4f82:	35 e0       	ldi	r19, 0x05	; 5
    4f84:	f9 01       	movw	r30, r18
    4f86:	25 81       	ldd	r18, Z+5	; 0x05
    4f88:	23 70       	andi	r18, 0x03	; 3
    4f8a:	fc 01       	movw	r30, r24
    4f8c:	25 83       	std	Z+5, r18	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    4f8e:	80 ee       	ldi	r24, 0xE0	; 224
    4f90:	95 e0       	ldi	r25, 0x05	; 5
    4f92:	20 ee       	ldi	r18, 0xE0	; 224
    4f94:	35 e0       	ldi	r19, 0x05	; 5
    4f96:	f9 01       	movw	r30, r18
    4f98:	25 81       	ldd	r18, Z+5	; 0x05
    4f9a:	28 60       	ori	r18, 0x08	; 8
    4f9c:	fc 01       	movw	r30, r24
    4f9e:	25 83       	std	Z+5, r18	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    4fa0:	80 e2       	ldi	r24, 0x20	; 32
    4fa2:	99 e0       	ldi	r25, 0x09	; 9
    4fa4:	2f e6       	ldi	r18, 0x6F	; 111
    4fa6:	fc 01       	movw	r30, r24
    4fa8:	26 83       	std	Z+6, r18	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    4faa:	80 e2       	ldi	r24, 0x20	; 32
    4fac:	99 e0       	ldi	r25, 0x09	; 9
    4fae:	21 e0       	ldi	r18, 0x01	; 1
    4fb0:	fc 01       	movw	r30, r24
    4fb2:	23 83       	std	Z+3, r18	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    4fb4:	80 e2       	ldi	r24, 0x20	; 32
    4fb6:	99 e0       	ldi	r25, 0x09	; 9
    4fb8:	fc 01       	movw	r30, r24
    4fba:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    4fbc:	80 e2       	ldi	r24, 0x20	; 32
    4fbe:	99 e0       	ldi	r25, 0x09	; 9
    4fc0:	fc 01       	movw	r30, r24
    4fc2:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    4fc4:	80 e2       	ldi	r24, 0x20	; 32
    4fc6:	99 e0       	ldi	r25, 0x09	; 9
    4fc8:	21 e0       	ldi	r18, 0x01	; 1
    4fca:	fc 01       	movw	r30, r24
    4fcc:	25 83       	std	Z+5, r18	; 0x05
	
	PORTB_set_pin_pull_mode(2, PORT_PULL_UP);
    4fce:	61 e0       	ldi	r22, 0x01	; 1
    4fd0:	82 e0       	ldi	r24, 0x02	; 2
    4fd2:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <PORTB_set_pin_pull_mode>
	PORTB_set_pin_pull_mode(3, PORT_PULL_UP);
    4fd6:	61 e0       	ldi	r22, 0x01	; 1
    4fd8:	83 e0       	ldi	r24, 0x03	; 3
    4fda:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <PORTB_set_pin_pull_mode>
}
    4fde:	00 00       	nop
    4fe0:	df 91       	pop	r29
    4fe2:	cf 91       	pop	r28
    4fe4:	08 95       	ret

00004fe6 <_ZL11i2c_1_WaitWv>:

static uint8_t i2c_1_WaitW(void)
{
    4fe6:	cf 93       	push	r28
    4fe8:	df 93       	push	r29
    4fea:	00 d0       	rcall	.+0      	; 0x4fec <_ZL11i2c_1_WaitWv+0x6>
    4fec:	cd b7       	in	r28, 0x3d	; 61
    4fee:	de b7       	in	r29, 0x3e	; 62
	uint8_t state = I2C_INIT;
    4ff0:	19 82       	std	Y+1, r1	; 0x01
	
	g_i2c1_timeout_ticks = 200;
    4ff2:	88 ec       	ldi	r24, 0xC8	; 200
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c1_timeout_ticks>
    4ffa:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c1_timeout_ticks+0x1>
	
	do
	{
		uint8_t stat = TWI1.MSTATUS;
    4ffe:	80 e2       	ldi	r24, 0x20	; 32
    5000:	99 e0       	ldi	r25, 0x09	; 9
    5002:	fc 01       	movw	r30, r24
    5004:	85 81       	ldd	r24, Z+5	; 0x05
    5006:	8a 83       	std	Y+2, r24	; 0x02
		if(stat & (TWI_WIF_bm | TWI_RIF_bm))
    5008:	8a 81       	ldd	r24, Y+2	; 0x02
    500a:	88 2f       	mov	r24, r24
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	80 7c       	andi	r24, 0xC0	; 192
    5010:	99 27       	eor	r25, r25
    5012:	89 2b       	or	r24, r25
    5014:	69 f0       	breq	.+26     	; 0x5030 <_ZL11i2c_1_WaitWv+0x4a>
		{
			if(!(stat & TWI_RXACK_bm))
    5016:	8a 81       	ldd	r24, Y+2	; 0x02
    5018:	88 2f       	mov	r24, r24
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	80 71       	andi	r24, 0x10	; 16
    501e:	99 27       	eor	r25, r25
    5020:	89 2b       	or	r24, r25
    5022:	19 f4       	brne	.+6      	; 0x502a <_ZL11i2c_1_WaitWv+0x44>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    5024:	81 e0       	ldi	r24, 0x01	; 1
    5026:	89 83       	std	Y+1, r24	; 0x01
    5028:	0c c0       	rjmp	.+24     	; 0x5042 <_ZL11i2c_1_WaitWv+0x5c>
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    502a:	82 e0       	ldi	r24, 0x02	; 2
    502c:	89 83       	std	Y+1, r24	; 0x01
    502e:	09 c0       	rjmp	.+18     	; 0x5042 <_ZL11i2c_1_WaitWv+0x5c>
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    5030:	8a 81       	ldd	r24, Y+2	; 0x02
    5032:	88 2f       	mov	r24, r24
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	8c 70       	andi	r24, 0x0C	; 12
    5038:	99 27       	eor	r25, r25
    503a:	89 2b       	or	r24, r25
    503c:	11 f0       	breq	.+4      	; 0x5042 <_ZL11i2c_1_WaitWv+0x5c>
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    503e:	84 e0       	ldi	r24, 0x04	; 4
    5040:	89 83       	std	Y+1, r24	; 0x01
		}
	} while(!state && g_i2c1_timeout_ticks);
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	88 23       	and	r24, r24
    5046:	41 f4       	brne	.+16     	; 0x5058 <_ZL11i2c_1_WaitWv+0x72>
    5048:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c1_timeout_ticks>
    504c:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c1_timeout_ticks+0x1>
    5050:	89 2b       	or	r24, r25
    5052:	11 f0       	breq	.+4      	; 0x5058 <_ZL11i2c_1_WaitWv+0x72>
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	01 c0       	rjmp	.+2      	; 0x505a <_ZL11i2c_1_WaitWv+0x74>
    5058:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
	
	do
    505a:	88 23       	and	r24, r24
    505c:	09 f0       	breq	.+2      	; 0x5060 <_ZL11i2c_1_WaitWv+0x7a>
    505e:	cf cf       	rjmp	.-98     	; 0x4ffe <_ZL11i2c_1_WaitWv+0x18>
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c1_timeout_ticks);
	
	return state;
    5060:	89 81       	ldd	r24, Y+1	; 0x01
}
    5062:	0f 90       	pop	r0
    5064:	0f 90       	pop	r0
    5066:	df 91       	pop	r29
    5068:	cf 91       	pop	r28
    506a:	08 95       	ret

0000506c <_ZL11I2C_1_WaitRv>:

static uint8_t I2C_1_WaitR(void)
{
    506c:	cf 93       	push	r28
    506e:	df 93       	push	r29
    5070:	1f 92       	push	r1
    5072:	cd b7       	in	r28, 0x3d	; 61
    5074:	de b7       	in	r29, 0x3e	; 62
	uint8_t state = I2C_INIT;
    5076:	19 82       	std	Y+1, r1	; 0x01
	
	g_i2c0_timeout_ticks = 200;
    5078:	88 ec       	ldi	r24, 0xC8	; 200
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c0_timeout_ticks>
    5080:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c0_timeout_ticks+0x1>
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    5084:	80 e2       	ldi	r24, 0x20	; 32
    5086:	99 e0       	ldi	r25, 0x09	; 9
    5088:	fc 01       	movw	r30, r24
    508a:	85 81       	ldd	r24, Z+5	; 0x05
    508c:	88 2f       	mov	r24, r24
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	80 7c       	andi	r24, 0xC0	; 192
    5092:	99 27       	eor	r25, r25
    5094:	21 e0       	ldi	r18, 0x01	; 1
    5096:	89 2b       	or	r24, r25
    5098:	09 f4       	brne	.+2      	; 0x509c <_ZL11I2C_1_WaitRv+0x30>
    509a:	20 e0       	ldi	r18, 0x00	; 0
    509c:	22 23       	and	r18, r18
    509e:	19 f0       	breq	.+6      	; 0x50a6 <_ZL11I2C_1_WaitRv+0x3a>
		{
			state = I2C_READY;
    50a0:	83 e0       	ldi	r24, 0x03	; 3
    50a2:	89 83       	std	Y+1, r24	; 0x01
    50a4:	10 c0       	rjmp	.+32     	; 0x50c6 <_ZL11I2C_1_WaitRv+0x5a>
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    50a6:	80 e2       	ldi	r24, 0x20	; 32
    50a8:	99 e0       	ldi	r25, 0x09	; 9
    50aa:	fc 01       	movw	r30, r24
    50ac:	85 81       	ldd	r24, Z+5	; 0x05
    50ae:	88 2f       	mov	r24, r24
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	8c 70       	andi	r24, 0x0C	; 12
    50b4:	99 27       	eor	r25, r25
    50b6:	21 e0       	ldi	r18, 0x01	; 1
    50b8:	89 2b       	or	r24, r25
    50ba:	09 f4       	brne	.+2      	; 0x50be <_ZL11I2C_1_WaitRv+0x52>
    50bc:	20 e0       	ldi	r18, 0x00	; 0
    50be:	22 23       	and	r18, r18
    50c0:	11 f0       	breq	.+4      	; 0x50c6 <_ZL11I2C_1_WaitRv+0x5a>
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    50c2:	84 e0       	ldi	r24, 0x04	; 4
    50c4:	89 83       	std	Y+1, r24	; 0x01
		}
	} while(!state && g_i2c0_timeout_ticks);
    50c6:	89 81       	ldd	r24, Y+1	; 0x01
    50c8:	88 23       	and	r24, r24
    50ca:	41 f4       	brne	.+16     	; 0x50dc <_ZL11I2C_1_WaitRv+0x70>
    50cc:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c0_timeout_ticks>
    50d0:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c0_timeout_ticks+0x1>
    50d4:	89 2b       	or	r24, r25
    50d6:	11 f0       	breq	.+4      	; 0x50dc <_ZL11I2C_1_WaitRv+0x70>
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	01 c0       	rjmp	.+2      	; 0x50de <_ZL11I2C_1_WaitRv+0x72>
    50dc:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    50de:	88 23       	and	r24, r24
    50e0:	09 f0       	breq	.+2      	; 0x50e4 <_ZL11I2C_1_WaitRv+0x78>
    50e2:	d0 cf       	rjmp	.-96     	; 0x5084 <_ZL11I2C_1_WaitRv+0x18>
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
    50e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    50e6:	0f 90       	pop	r0
    50e8:	df 91       	pop	r29
    50ea:	cf 91       	pop	r28
    50ec:	08 95       	ret

000050ee <I2C_1_SendData>:

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    50ee:	cf 93       	push	r28
    50f0:	df 93       	push	r29
    50f2:	cd b7       	in	r28, 0x3d	; 61
    50f4:	de b7       	in	r29, 0x3e	; 62
    50f6:	26 97       	sbiw	r28, 0x06	; 6
    50f8:	cd bf       	out	0x3d, r28	; 61
    50fa:	de bf       	out	0x3e, r29	; 62
    50fc:	8a 83       	std	Y+2, r24	; 0x02
    50fe:	6b 83       	std	Y+3, r22	; 0x03
    5100:	4c 83       	std	Y+4, r20	; 0x04
    5102:	5d 83       	std	Y+5, r21	; 0x05
    5104:	2e 83       	std	Y+6, r18	; 0x06
	uint8_t retVal = (uint8_t) - 1;
    5106:	8f ef       	ldi	r24, 0xFF	; 255
    5108:	89 83       	std	Y+1, r24	; 0x01
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    510a:	80 e2       	ldi	r24, 0x20	; 32
    510c:	99 e0       	ldi	r25, 0x09	; 9
    510e:	2a 81       	ldd	r18, Y+2	; 0x02
    5110:	2e 7f       	andi	r18, 0xFE	; 254
    5112:	fc 01       	movw	r30, r24
    5114:	27 83       	std	Z+7, r18	; 0x07
	if(i2c_1_WaitW() != I2C_ACKED)
    5116:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <_ZL11i2c_1_WaitWv>
    511a:	98 2f       	mov	r25, r24
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	91 30       	cpi	r25, 0x01	; 1
    5120:	09 f4       	brne	.+2      	; 0x5124 <I2C_1_SendData+0x36>
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	88 23       	and	r24, r24
    5126:	11 f0       	breq	.+4      	; 0x512c <I2C_1_SendData+0x3e>
	{
		return retVal;
    5128:	89 81       	ldd	r24, Y+1	; 0x01
    512a:	44 c0       	rjmp	.+136    	; 0x51b4 <I2C_1_SendData+0xc6>
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    512c:	80 e2       	ldi	r24, 0x20	; 32
    512e:	99 e0       	ldi	r25, 0x09	; 9
    5130:	2b 81       	ldd	r18, Y+3	; 0x03
    5132:	fc 01       	movw	r30, r24
    5134:	20 87       	std	Z+8, r18	; 0x08
	if(i2c_1_WaitW() != I2C_ACKED)
    5136:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <_ZL11i2c_1_WaitWv>
    513a:	98 2f       	mov	r25, r24
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	91 30       	cpi	r25, 0x01	; 1
    5140:	09 f4       	brne	.+2      	; 0x5144 <I2C_1_SendData+0x56>
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	88 23       	and	r24, r24
    5146:	11 f0       	breq	.+4      	; 0x514c <I2C_1_SendData+0x5e>
	{
		return retVal;
    5148:	89 81       	ldd	r24, Y+1	; 0x01
    514a:	34 c0       	rjmp	.+104    	; 0x51b4 <I2C_1_SendData+0xc6>
	}	

	retVal = 0;
    514c:	19 82       	std	Y+1, r1	; 0x01
	if((len != 0) && (pData != NULL))
    514e:	8e 81       	ldd	r24, Y+6	; 0x06
    5150:	88 23       	and	r24, r24
    5152:	79 f1       	breq	.+94     	; 0x51b2 <I2C_1_SendData+0xc4>
    5154:	8c 81       	ldd	r24, Y+4	; 0x04
    5156:	9d 81       	ldd	r25, Y+5	; 0x05
    5158:	89 2b       	or	r24, r25
    515a:	59 f1       	breq	.+86     	; 0x51b2 <I2C_1_SendData+0xc4>
	{
		while(len--)
    515c:	8e 81       	ldd	r24, Y+6	; 0x06
    515e:	9f ef       	ldi	r25, 0xFF	; 255
    5160:	98 0f       	add	r25, r24
    5162:	9e 83       	std	Y+6, r25	; 0x06
    5164:	91 e0       	ldi	r25, 0x01	; 1
    5166:	88 23       	and	r24, r24
    5168:	09 f4       	brne	.+2      	; 0x516c <I2C_1_SendData+0x7e>
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	99 23       	and	r25, r25
    516e:	09 f1       	breq	.+66     	; 0x51b2 <I2C_1_SendData+0xc4>
		{
			TWI1.MDATA = *pData;
    5170:	80 e2       	ldi	r24, 0x20	; 32
    5172:	99 e0       	ldi	r25, 0x09	; 9
    5174:	2c 81       	ldd	r18, Y+4	; 0x04
    5176:	3d 81       	ldd	r19, Y+5	; 0x05
    5178:	f9 01       	movw	r30, r18
    517a:	20 81       	ld	r18, Z
    517c:	fc 01       	movw	r30, r24
    517e:	20 87       	std	Z+8, r18	; 0x08
			if(i2c_1_WaitW() == I2C_ACKED)
    5180:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <_ZL11i2c_1_WaitWv>
    5184:	98 2f       	mov	r25, r24
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	91 30       	cpi	r25, 0x01	; 1
    518a:	09 f0       	breq	.+2      	; 0x518e <I2C_1_SendData+0xa0>
    518c:	80 e0       	ldi	r24, 0x00	; 0
    518e:	88 23       	and	r24, r24
    5190:	79 f0       	breq	.+30     	; 0x51b0 <I2C_1_SendData+0xc2>
			{
				retVal++;
    5192:	89 81       	ldd	r24, Y+1	; 0x01
    5194:	8f 5f       	subi	r24, 0xFF	; 255
    5196:	89 83       	std	Y+1, r24	; 0x01
				pData++;
    5198:	8c 81       	ldd	r24, Y+4	; 0x04
    519a:	9d 81       	ldd	r25, Y+5	; 0x05
    519c:	01 96       	adiw	r24, 0x01	; 1
    519e:	8c 83       	std	Y+4, r24	; 0x04
    51a0:	9d 83       	std	Y+5, r25	; 0x05
				if(!len) I2C_1_EndSession();
    51a2:	8e 81       	ldd	r24, Y+6	; 0x06
    51a4:	88 23       	and	r24, r24
    51a6:	11 f4       	brne	.+4      	; 0x51ac <I2C_1_SendData+0xbe>
    51a8:	0e 94 5e 29 	call	0x52bc	; 0x52bc <I2C_1_EndSession>
				continue;
    51ac:	00 00       	nop
	}	

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
    51ae:	d6 cf       	rjmp	.-84     	; 0x515c <I2C_1_SendData+0x6e>
				if(!len) I2C_1_EndSession();
				continue;
			}
			else // did not get ACK after client address
			{
				break;
    51b0:	00 00       	nop
			}
		}
	}
	
	return retVal;
    51b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    51b4:	26 96       	adiw	r28, 0x06	; 6
    51b6:	cd bf       	out	0x3d, r28	; 61
    51b8:	de bf       	out	0x3e, r29	; 62
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	08 95       	ret

000051c0 <I2C_1_GetData>:


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    51c0:	cf 93       	push	r28
    51c2:	df 93       	push	r29
    51c4:	cd b7       	in	r28, 0x3d	; 61
    51c6:	de b7       	in	r29, 0x3e	; 62
    51c8:	26 97       	sbiw	r28, 0x06	; 6
    51ca:	cd bf       	out	0x3d, r28	; 61
    51cc:	de bf       	out	0x3e, r29	; 62
    51ce:	8a 83       	std	Y+2, r24	; 0x02
    51d0:	6b 83       	std	Y+3, r22	; 0x03
    51d2:	4c 83       	std	Y+4, r20	; 0x04
    51d4:	5d 83       	std	Y+5, r21	; 0x05
    51d6:	2e 83       	std	Y+6, r18	; 0x06
	uint8_t retVal = (uint8_t) -1;
    51d8:	8f ef       	ldi	r24, 0xFF	; 255
    51da:	89 83       	std	Y+1, r24	; 0x01
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    51dc:	80 e2       	ldi	r24, 0x20	; 32
    51de:	99 e0       	ldi	r25, 0x09	; 9
    51e0:	2a 81       	ldd	r18, Y+2	; 0x02
    51e2:	fc 01       	movw	r30, r24
    51e4:	27 83       	std	Z+7, r18	; 0x07
	if(i2c_1_WaitW() != I2C_ACKED)
    51e6:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <_ZL11i2c_1_WaitWv>
    51ea:	98 2f       	mov	r25, r24
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	91 30       	cpi	r25, 0x01	; 1
    51f0:	09 f4       	brne	.+2      	; 0x51f4 <I2C_1_GetData+0x34>
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	88 23       	and	r24, r24
    51f6:	11 f0       	breq	.+4      	; 0x51fc <I2C_1_GetData+0x3c>
	{
		return retVal;
    51f8:	89 81       	ldd	r24, Y+1	; 0x01
    51fa:	5a c0       	rjmp	.+180    	; 0x52b0 <I2C_1_GetData+0xf0>
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    51fc:	80 e2       	ldi	r24, 0x20	; 32
    51fe:	99 e0       	ldi	r25, 0x09	; 9
    5200:	2b 81       	ldd	r18, Y+3	; 0x03
    5202:	fc 01       	movw	r30, r24
    5204:	20 87       	std	Z+8, r18	; 0x08
	if(i2c_1_WaitW() != I2C_ACKED)
    5206:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <_ZL11i2c_1_WaitWv>
    520a:	98 2f       	mov	r25, r24
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	91 30       	cpi	r25, 0x01	; 1
    5210:	09 f4       	brne	.+2      	; 0x5214 <I2C_1_GetData+0x54>
    5212:	80 e0       	ldi	r24, 0x00	; 0
    5214:	88 23       	and	r24, r24
    5216:	11 f0       	breq	.+4      	; 0x521c <I2C_1_GetData+0x5c>
	{
		return retVal;
    5218:	89 81       	ldd	r24, Y+1	; 0x01
    521a:	4a c0       	rjmp	.+148    	; 0x52b0 <I2C_1_GetData+0xf0>
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    521c:	80 e2       	ldi	r24, 0x20	; 32
    521e:	99 e0       	ldi	r25, 0x09	; 9
    5220:	2a 81       	ldd	r18, Y+2	; 0x02
    5222:	21 60       	ori	r18, 0x01	; 1
    5224:	fc 01       	movw	r30, r24
    5226:	27 83       	std	Z+7, r18	; 0x07
	if(i2c_1_WaitW() != I2C_ACKED)
    5228:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <_ZL11i2c_1_WaitWv>
    522c:	98 2f       	mov	r25, r24
    522e:	81 e0       	ldi	r24, 0x01	; 1
    5230:	91 30       	cpi	r25, 0x01	; 1
    5232:	09 f4       	brne	.+2      	; 0x5236 <I2C_1_GetData+0x76>
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	88 23       	and	r24, r24
    5238:	11 f0       	breq	.+4      	; 0x523e <I2C_1_GetData+0x7e>
	{
		return retVal;	
    523a:	89 81       	ldd	r24, Y+1	; 0x01
    523c:	39 c0       	rjmp	.+114    	; 0x52b0 <I2C_1_GetData+0xf0>
	}
	
	retVal = 0;
    523e:	19 82       	std	Y+1, r1	; 0x01
	if((len != 0) && (pData !=NULL ))
    5240:	8e 81       	ldd	r24, Y+6	; 0x06
    5242:	88 23       	and	r24, r24
    5244:	a1 f1       	breq	.+104    	; 0x52ae <I2C_1_GetData+0xee>
    5246:	8c 81       	ldd	r24, Y+4	; 0x04
    5248:	9d 81       	ldd	r25, Y+5	; 0x05
    524a:	89 2b       	or	r24, r25
    524c:	81 f1       	breq	.+96     	; 0x52ae <I2C_1_GetData+0xee>
	{
		while(len--)
    524e:	8e 81       	ldd	r24, Y+6	; 0x06
    5250:	9f ef       	ldi	r25, 0xFF	; 255
    5252:	98 0f       	add	r25, r24
    5254:	9e 83       	std	Y+6, r25	; 0x06
    5256:	91 e0       	ldi	r25, 0x01	; 1
    5258:	88 23       	and	r24, r24
    525a:	09 f4       	brne	.+2      	; 0x525e <I2C_1_GetData+0x9e>
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	99 23       	and	r25, r25
    5260:	31 f1       	breq	.+76     	; 0x52ae <I2C_1_GetData+0xee>
		{
			if(I2C_1_WaitR() == I2C_READY)
    5262:	0e 94 36 28 	call	0x506c	; 0x506c <_ZL11I2C_1_WaitRv>
    5266:	98 2f       	mov	r25, r24
    5268:	81 e0       	ldi	r24, 0x01	; 1
    526a:	93 30       	cpi	r25, 0x03	; 3
    526c:	09 f0       	breq	.+2      	; 0x5270 <I2C_1_GetData+0xb0>
    526e:	80 e0       	ldi	r24, 0x00	; 0
    5270:	88 23       	and	r24, r24
    5272:	e1 f0       	breq	.+56     	; 0x52ac <I2C_1_GetData+0xec>
			{
				*pData = TWI1.MDATA;
    5274:	80 e2       	ldi	r24, 0x20	; 32
    5276:	99 e0       	ldi	r25, 0x09	; 9
    5278:	fc 01       	movw	r30, r24
    527a:	20 85       	ldd	r18, Z+8	; 0x08
    527c:	8c 81       	ldd	r24, Y+4	; 0x04
    527e:	9d 81       	ldd	r25, Y+5	; 0x05
    5280:	fc 01       	movw	r30, r24
    5282:	20 83       	st	Z, r18
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    5284:	80 e2       	ldi	r24, 0x20	; 32
    5286:	99 e0       	ldi	r25, 0x09	; 9
    5288:	2e 81       	ldd	r18, Y+6	; 0x06
    528a:	22 23       	and	r18, r18
    528c:	11 f4       	brne	.+4      	; 0x5292 <I2C_1_GetData+0xd2>
    528e:	27 e0       	ldi	r18, 0x07	; 7
    5290:	01 c0       	rjmp	.+2      	; 0x5294 <I2C_1_GetData+0xd4>
    5292:	22 e0       	ldi	r18, 0x02	; 2
    5294:	fc 01       	movw	r30, r24
    5296:	24 83       	std	Z+4, r18	; 0x04
				retVal++;
    5298:	89 81       	ldd	r24, Y+1	; 0x01
    529a:	8f 5f       	subi	r24, 0xFF	; 255
    529c:	89 83       	std	Y+1, r24	; 0x01
				pData++;
    529e:	8c 81       	ldd	r24, Y+4	; 0x04
    52a0:	9d 81       	ldd	r25, Y+5	; 0x05
    52a2:	01 96       	adiw	r24, 0x01	; 1
    52a4:	8c 83       	std	Y+4, r24	; 0x04
    52a6:	9d 83       	std	Y+5, r25	; 0x05
				continue;
    52a8:	00 00       	nop
	}
	
	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
    52aa:	d1 cf       	rjmp	.-94     	; 0x524e <I2C_1_GetData+0x8e>
				retVal++;
				pData++;
				continue;
			}
			else
			break;
    52ac:	00 00       	nop
		}
	}
	
	return retVal;
    52ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    52b0:	26 96       	adiw	r28, 0x06	; 6
    52b2:	cd bf       	out	0x3d, r28	; 61
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	df 91       	pop	r29
    52b8:	cf 91       	pop	r28
    52ba:	08 95       	ret

000052bc <I2C_1_EndSession>:

void I2C_1_EndSession(void)
{
    52bc:	cf 93       	push	r28
    52be:	df 93       	push	r29
    52c0:	cd b7       	in	r28, 0x3d	; 61
    52c2:	de b7       	in	r29, 0x3e	; 62
	TWI1.MCTRLB = TWI_MCMD_STOP_gc;
    52c4:	80 e2       	ldi	r24, 0x20	; 32
    52c6:	99 e0       	ldi	r25, 0x09	; 9
    52c8:	23 e0       	ldi	r18, 0x03	; 3
    52ca:	fc 01       	movw	r30, r24
    52cc:	24 83       	std	Z+4, r18	; 0x04
}
    52ce:	00 00       	nop
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	08 95       	ret

000052d6 <PORTC_set_pin_pull_mode>:
				USART1.CTRLB &= ~(1 << USART_RXEN_bp);
				memset(rx_buffer, 0, sizeof(rx_buffer));
				USART1.CTRLB |= (1 << USART_RXEN_bp);
			}
		}
}
    52d6:	cf 93       	push	r28
    52d8:	df 93       	push	r29
    52da:	00 d0       	rcall	.+0      	; 0x52dc <PORTC_set_pin_pull_mode+0x6>
    52dc:	00 d0       	rcall	.+0      	; 0x52de <PORTC_set_pin_pull_mode+0x8>
    52de:	cd b7       	in	r28, 0x3d	; 61
    52e0:	de b7       	in	r29, 0x3e	; 62
    52e2:	8b 83       	std	Y+3, r24	; 0x03
    52e4:	6c 83       	std	Y+4, r22	; 0x04
    52e6:	8b 81       	ldd	r24, Y+3	; 0x03
    52e8:	88 2f       	mov	r24, r24
    52ea:	90 e0       	ldi	r25, 0x00	; 0
    52ec:	80 5b       	subi	r24, 0xB0	; 176
    52ee:	9b 4f       	sbci	r25, 0xFB	; 251
    52f0:	89 83       	std	Y+1, r24	; 0x01
    52f2:	9a 83       	std	Y+2, r25	; 0x02
    52f4:	8c 81       	ldd	r24, Y+4	; 0x04
    52f6:	81 30       	cpi	r24, 0x01	; 1
    52f8:	59 f4       	brne	.+22     	; 0x5310 <PORTC_set_pin_pull_mode+0x3a>
    52fa:	89 81       	ldd	r24, Y+1	; 0x01
    52fc:	9a 81       	ldd	r25, Y+2	; 0x02
    52fe:	fc 01       	movw	r30, r24
    5300:	80 81       	ld	r24, Z
    5302:	28 2f       	mov	r18, r24
    5304:	28 60       	ori	r18, 0x08	; 8
    5306:	89 81       	ldd	r24, Y+1	; 0x01
    5308:	9a 81       	ldd	r25, Y+2	; 0x02
    530a:	fc 01       	movw	r30, r24
    530c:	20 83       	st	Z, r18
    530e:	0d c0       	rjmp	.+26     	; 0x532a <PORTC_set_pin_pull_mode+0x54>
    5310:	8c 81       	ldd	r24, Y+4	; 0x04
    5312:	88 23       	and	r24, r24
    5314:	51 f4       	brne	.+20     	; 0x532a <PORTC_set_pin_pull_mode+0x54>
    5316:	89 81       	ldd	r24, Y+1	; 0x01
    5318:	9a 81       	ldd	r25, Y+2	; 0x02
    531a:	fc 01       	movw	r30, r24
    531c:	80 81       	ld	r24, Z
    531e:	28 2f       	mov	r18, r24
    5320:	27 7f       	andi	r18, 0xF7	; 247
    5322:	89 81       	ldd	r24, Y+1	; 0x01
    5324:	9a 81       	ldd	r25, Y+2	; 0x02
    5326:	fc 01       	movw	r30, r24
    5328:	20 83       	st	Z, r18
    532a:	00 00       	nop
    532c:	24 96       	adiw	r28, 0x04	; 4
    532e:	cd bf       	out	0x3d, r28	; 61
    5330:	de bf       	out	0x3e, r29	; 62
    5332:	df 91       	pop	r29
    5334:	cf 91       	pop	r28
    5336:	08 95       	ret

00005338 <PORTC_set_pin_dir>:
    5338:	cf 93       	push	r28
    533a:	df 93       	push	r29
    533c:	00 d0       	rcall	.+0      	; 0x533e <PORTC_set_pin_dir+0x6>
    533e:	cd b7       	in	r28, 0x3d	; 61
    5340:	de b7       	in	r29, 0x3e	; 62
    5342:	89 83       	std	Y+1, r24	; 0x01
    5344:	6a 83       	std	Y+2, r22	; 0x02
    5346:	8a 81       	ldd	r24, Y+2	; 0x02
    5348:	88 2f       	mov	r24, r24
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	81 30       	cpi	r24, 0x01	; 1
    534e:	91 05       	cpc	r25, r1
    5350:	e1 f0       	breq	.+56     	; 0x538a <PORTC_set_pin_dir+0x52>
    5352:	82 30       	cpi	r24, 0x02	; 2
    5354:	91 05       	cpc	r25, r1
    5356:	71 f1       	breq	.+92     	; 0x53b4 <PORTC_set_pin_dir+0x7c>
    5358:	89 2b       	or	r24, r25
    535a:	09 f0       	breq	.+2      	; 0x535e <PORTC_set_pin_dir+0x26>
    535c:	3b c0       	rjmp	.+118    	; 0x53d4 <PORTC_set_pin_dir+0x9c>
    535e:	88 e0       	ldi	r24, 0x08	; 8
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	28 e0       	ldi	r18, 0x08	; 8
    5364:	30 e0       	ldi	r19, 0x00	; 0
    5366:	f9 01       	movw	r30, r18
    5368:	20 81       	ld	r18, Z
    536a:	62 2f       	mov	r22, r18
    536c:	29 81       	ldd	r18, Y+1	; 0x01
    536e:	42 2f       	mov	r20, r18
    5370:	50 e0       	ldi	r21, 0x00	; 0
    5372:	21 e0       	ldi	r18, 0x01	; 1
    5374:	30 e0       	ldi	r19, 0x00	; 0
    5376:	02 c0       	rjmp	.+4      	; 0x537c <PORTC_set_pin_dir+0x44>
    5378:	22 0f       	add	r18, r18
    537a:	33 1f       	adc	r19, r19
    537c:	4a 95       	dec	r20
    537e:	e2 f7       	brpl	.-8      	; 0x5378 <PORTC_set_pin_dir+0x40>
    5380:	20 95       	com	r18
    5382:	26 23       	and	r18, r22
    5384:	fc 01       	movw	r30, r24
    5386:	20 83       	st	Z, r18
    5388:	25 c0       	rjmp	.+74     	; 0x53d4 <PORTC_set_pin_dir+0x9c>
    538a:	88 e0       	ldi	r24, 0x08	; 8
    538c:	90 e0       	ldi	r25, 0x00	; 0
    538e:	28 e0       	ldi	r18, 0x08	; 8
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	f9 01       	movw	r30, r18
    5394:	20 81       	ld	r18, Z
    5396:	62 2f       	mov	r22, r18
    5398:	29 81       	ldd	r18, Y+1	; 0x01
    539a:	42 2f       	mov	r20, r18
    539c:	50 e0       	ldi	r21, 0x00	; 0
    539e:	21 e0       	ldi	r18, 0x01	; 1
    53a0:	30 e0       	ldi	r19, 0x00	; 0
    53a2:	02 c0       	rjmp	.+4      	; 0x53a8 <PORTC_set_pin_dir+0x70>
    53a4:	22 0f       	add	r18, r18
    53a6:	33 1f       	adc	r19, r19
    53a8:	4a 95       	dec	r20
    53aa:	e2 f7       	brpl	.-8      	; 0x53a4 <PORTC_set_pin_dir+0x6c>
    53ac:	26 2b       	or	r18, r22
    53ae:	fc 01       	movw	r30, r24
    53b0:	20 83       	st	Z, r18
    53b2:	10 c0       	rjmp	.+32     	; 0x53d4 <PORTC_set_pin_dir+0x9c>
    53b4:	89 81       	ldd	r24, Y+1	; 0x01
    53b6:	88 2f       	mov	r24, r24
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	80 5b       	subi	r24, 0xB0	; 176
    53bc:	9b 4f       	sbci	r25, 0xFB	; 251
    53be:	29 81       	ldd	r18, Y+1	; 0x01
    53c0:	22 2f       	mov	r18, r18
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	20 5b       	subi	r18, 0xB0	; 176
    53c6:	3b 4f       	sbci	r19, 0xFB	; 251
    53c8:	f9 01       	movw	r30, r18
    53ca:	20 81       	ld	r18, Z
    53cc:	28 60       	ori	r18, 0x08	; 8
    53ce:	fc 01       	movw	r30, r24
    53d0:	20 83       	st	Z, r18
    53d2:	00 00       	nop
    53d4:	00 00       	nop
    53d6:	0f 90       	pop	r0
    53d8:	0f 90       	pop	r0
    53da:	df 91       	pop	r29
    53dc:	cf 91       	pop	r28
    53de:	08 95       	ret

000053e0 <PORTC_set_pin_level>:
    53e0:	cf 93       	push	r28
    53e2:	df 93       	push	r29
    53e4:	00 d0       	rcall	.+0      	; 0x53e6 <PORTC_set_pin_level+0x6>
    53e6:	cd b7       	in	r28, 0x3d	; 61
    53e8:	de b7       	in	r29, 0x3e	; 62
    53ea:	89 83       	std	Y+1, r24	; 0x01
    53ec:	6a 83       	std	Y+2, r22	; 0x02
    53ee:	8a 81       	ldd	r24, Y+2	; 0x02
    53f0:	88 23       	and	r24, r24
    53f2:	a9 f0       	breq	.+42     	; 0x541e <PORTC_set_pin_level+0x3e>
    53f4:	88 e0       	ldi	r24, 0x08	; 8
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	28 e0       	ldi	r18, 0x08	; 8
    53fa:	30 e0       	ldi	r19, 0x00	; 0
    53fc:	f9 01       	movw	r30, r18
    53fe:	21 81       	ldd	r18, Z+1	; 0x01
    5400:	62 2f       	mov	r22, r18
    5402:	29 81       	ldd	r18, Y+1	; 0x01
    5404:	42 2f       	mov	r20, r18
    5406:	50 e0       	ldi	r21, 0x00	; 0
    5408:	21 e0       	ldi	r18, 0x01	; 1
    540a:	30 e0       	ldi	r19, 0x00	; 0
    540c:	02 c0       	rjmp	.+4      	; 0x5412 <PORTC_set_pin_level+0x32>
    540e:	22 0f       	add	r18, r18
    5410:	33 1f       	adc	r19, r19
    5412:	4a 95       	dec	r20
    5414:	e2 f7       	brpl	.-8      	; 0x540e <PORTC_set_pin_level+0x2e>
    5416:	26 2b       	or	r18, r22
    5418:	fc 01       	movw	r30, r24
    541a:	21 83       	std	Z+1, r18	; 0x01
    541c:	15 c0       	rjmp	.+42     	; 0x5448 <PORTC_set_pin_level+0x68>
    541e:	88 e0       	ldi	r24, 0x08	; 8
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	28 e0       	ldi	r18, 0x08	; 8
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	f9 01       	movw	r30, r18
    5428:	21 81       	ldd	r18, Z+1	; 0x01
    542a:	62 2f       	mov	r22, r18
    542c:	29 81       	ldd	r18, Y+1	; 0x01
    542e:	42 2f       	mov	r20, r18
    5430:	50 e0       	ldi	r21, 0x00	; 0
    5432:	21 e0       	ldi	r18, 0x01	; 1
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	02 c0       	rjmp	.+4      	; 0x543c <PORTC_set_pin_level+0x5c>
    5438:	22 0f       	add	r18, r18
    543a:	33 1f       	adc	r19, r19
    543c:	4a 95       	dec	r20
    543e:	e2 f7       	brpl	.-8      	; 0x5438 <PORTC_set_pin_level+0x58>
    5440:	20 95       	com	r18
    5442:	26 23       	and	r18, r22
    5444:	fc 01       	movw	r30, r24
    5446:	21 83       	std	Z+1, r18	; 0x01
    5448:	00 00       	nop
    544a:	0f 90       	pop	r0
    544c:	0f 90       	pop	r0
    544e:	df 91       	pop	r29
    5450:	cf 91       	pop	r28
    5452:	08 95       	ret

00005454 <PORTE_set_pin_pull_mode>:
    5454:	cf 93       	push	r28
    5456:	df 93       	push	r29
    5458:	00 d0       	rcall	.+0      	; 0x545a <PORTE_set_pin_pull_mode+0x6>
    545a:	00 d0       	rcall	.+0      	; 0x545c <PORTE_set_pin_pull_mode+0x8>
    545c:	cd b7       	in	r28, 0x3d	; 61
    545e:	de b7       	in	r29, 0x3e	; 62
    5460:	8b 83       	std	Y+3, r24	; 0x03
    5462:	6c 83       	std	Y+4, r22	; 0x04
    5464:	8b 81       	ldd	r24, Y+3	; 0x03
    5466:	88 2f       	mov	r24, r24
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	80 57       	subi	r24, 0x70	; 112
    546c:	9b 4f       	sbci	r25, 0xFB	; 251
    546e:	89 83       	std	Y+1, r24	; 0x01
    5470:	9a 83       	std	Y+2, r25	; 0x02
    5472:	8c 81       	ldd	r24, Y+4	; 0x04
    5474:	81 30       	cpi	r24, 0x01	; 1
    5476:	59 f4       	brne	.+22     	; 0x548e <PORTE_set_pin_pull_mode+0x3a>
    5478:	89 81       	ldd	r24, Y+1	; 0x01
    547a:	9a 81       	ldd	r25, Y+2	; 0x02
    547c:	fc 01       	movw	r30, r24
    547e:	80 81       	ld	r24, Z
    5480:	28 2f       	mov	r18, r24
    5482:	28 60       	ori	r18, 0x08	; 8
    5484:	89 81       	ldd	r24, Y+1	; 0x01
    5486:	9a 81       	ldd	r25, Y+2	; 0x02
    5488:	fc 01       	movw	r30, r24
    548a:	20 83       	st	Z, r18
    548c:	0d c0       	rjmp	.+26     	; 0x54a8 <PORTE_set_pin_pull_mode+0x54>
    548e:	8c 81       	ldd	r24, Y+4	; 0x04
    5490:	88 23       	and	r24, r24
    5492:	51 f4       	brne	.+20     	; 0x54a8 <PORTE_set_pin_pull_mode+0x54>
    5494:	89 81       	ldd	r24, Y+1	; 0x01
    5496:	9a 81       	ldd	r25, Y+2	; 0x02
    5498:	fc 01       	movw	r30, r24
    549a:	80 81       	ld	r24, Z
    549c:	28 2f       	mov	r18, r24
    549e:	27 7f       	andi	r18, 0xF7	; 247
    54a0:	89 81       	ldd	r24, Y+1	; 0x01
    54a2:	9a 81       	ldd	r25, Y+2	; 0x02
    54a4:	fc 01       	movw	r30, r24
    54a6:	20 83       	st	Z, r18
    54a8:	00 00       	nop
    54aa:	24 96       	adiw	r28, 0x04	; 4
    54ac:	cd bf       	out	0x3d, r28	; 61
    54ae:	de bf       	out	0x3e, r29	; 62
    54b0:	df 91       	pop	r29
    54b2:	cf 91       	pop	r28
    54b4:	08 95       	ret

000054b6 <PORTE_set_pin_dir>:
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	00 d0       	rcall	.+0      	; 0x54bc <PORTE_set_pin_dir+0x6>
    54bc:	cd b7       	in	r28, 0x3d	; 61
    54be:	de b7       	in	r29, 0x3e	; 62
    54c0:	89 83       	std	Y+1, r24	; 0x01
    54c2:	6a 83       	std	Y+2, r22	; 0x02
    54c4:	8a 81       	ldd	r24, Y+2	; 0x02
    54c6:	88 2f       	mov	r24, r24
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	81 30       	cpi	r24, 0x01	; 1
    54cc:	91 05       	cpc	r25, r1
    54ce:	e1 f0       	breq	.+56     	; 0x5508 <PORTE_set_pin_dir+0x52>
    54d0:	82 30       	cpi	r24, 0x02	; 2
    54d2:	91 05       	cpc	r25, r1
    54d4:	71 f1       	breq	.+92     	; 0x5532 <PORTE_set_pin_dir+0x7c>
    54d6:	89 2b       	or	r24, r25
    54d8:	09 f0       	breq	.+2      	; 0x54dc <PORTE_set_pin_dir+0x26>
    54da:	3b c0       	rjmp	.+118    	; 0x5552 <PORTE_set_pin_dir+0x9c>
    54dc:	80 e1       	ldi	r24, 0x10	; 16
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	20 e1       	ldi	r18, 0x10	; 16
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	f9 01       	movw	r30, r18
    54e6:	20 81       	ld	r18, Z
    54e8:	62 2f       	mov	r22, r18
    54ea:	29 81       	ldd	r18, Y+1	; 0x01
    54ec:	42 2f       	mov	r20, r18
    54ee:	50 e0       	ldi	r21, 0x00	; 0
    54f0:	21 e0       	ldi	r18, 0x01	; 1
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	02 c0       	rjmp	.+4      	; 0x54fa <PORTE_set_pin_dir+0x44>
    54f6:	22 0f       	add	r18, r18
    54f8:	33 1f       	adc	r19, r19
    54fa:	4a 95       	dec	r20
    54fc:	e2 f7       	brpl	.-8      	; 0x54f6 <PORTE_set_pin_dir+0x40>
    54fe:	20 95       	com	r18
    5500:	26 23       	and	r18, r22
    5502:	fc 01       	movw	r30, r24
    5504:	20 83       	st	Z, r18
    5506:	25 c0       	rjmp	.+74     	; 0x5552 <PORTE_set_pin_dir+0x9c>
    5508:	80 e1       	ldi	r24, 0x10	; 16
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	20 e1       	ldi	r18, 0x10	; 16
    550e:	30 e0       	ldi	r19, 0x00	; 0
    5510:	f9 01       	movw	r30, r18
    5512:	20 81       	ld	r18, Z
    5514:	62 2f       	mov	r22, r18
    5516:	29 81       	ldd	r18, Y+1	; 0x01
    5518:	42 2f       	mov	r20, r18
    551a:	50 e0       	ldi	r21, 0x00	; 0
    551c:	21 e0       	ldi	r18, 0x01	; 1
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	02 c0       	rjmp	.+4      	; 0x5526 <PORTE_set_pin_dir+0x70>
    5522:	22 0f       	add	r18, r18
    5524:	33 1f       	adc	r19, r19
    5526:	4a 95       	dec	r20
    5528:	e2 f7       	brpl	.-8      	; 0x5522 <PORTE_set_pin_dir+0x6c>
    552a:	26 2b       	or	r18, r22
    552c:	fc 01       	movw	r30, r24
    552e:	20 83       	st	Z, r18
    5530:	10 c0       	rjmp	.+32     	; 0x5552 <PORTE_set_pin_dir+0x9c>
    5532:	89 81       	ldd	r24, Y+1	; 0x01
    5534:	88 2f       	mov	r24, r24
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	80 57       	subi	r24, 0x70	; 112
    553a:	9b 4f       	sbci	r25, 0xFB	; 251
    553c:	29 81       	ldd	r18, Y+1	; 0x01
    553e:	22 2f       	mov	r18, r18
    5540:	30 e0       	ldi	r19, 0x00	; 0
    5542:	20 57       	subi	r18, 0x70	; 112
    5544:	3b 4f       	sbci	r19, 0xFB	; 251
    5546:	f9 01       	movw	r30, r18
    5548:	20 81       	ld	r18, Z
    554a:	28 60       	ori	r18, 0x08	; 8
    554c:	fc 01       	movw	r30, r24
    554e:	20 83       	st	Z, r18
    5550:	00 00       	nop
    5552:	00 00       	nop
    5554:	0f 90       	pop	r0
    5556:	0f 90       	pop	r0
    5558:	df 91       	pop	r29
    555a:	cf 91       	pop	r28
    555c:	08 95       	ret

0000555e <PORTE_set_pin_level>:
    555e:	cf 93       	push	r28
    5560:	df 93       	push	r29
    5562:	00 d0       	rcall	.+0      	; 0x5564 <PORTE_set_pin_level+0x6>
    5564:	cd b7       	in	r28, 0x3d	; 61
    5566:	de b7       	in	r29, 0x3e	; 62
    5568:	89 83       	std	Y+1, r24	; 0x01
    556a:	6a 83       	std	Y+2, r22	; 0x02
    556c:	8a 81       	ldd	r24, Y+2	; 0x02
    556e:	88 23       	and	r24, r24
    5570:	a9 f0       	breq	.+42     	; 0x559c <PORTE_set_pin_level+0x3e>
    5572:	80 e1       	ldi	r24, 0x10	; 16
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	20 e1       	ldi	r18, 0x10	; 16
    5578:	30 e0       	ldi	r19, 0x00	; 0
    557a:	f9 01       	movw	r30, r18
    557c:	21 81       	ldd	r18, Z+1	; 0x01
    557e:	62 2f       	mov	r22, r18
    5580:	29 81       	ldd	r18, Y+1	; 0x01
    5582:	42 2f       	mov	r20, r18
    5584:	50 e0       	ldi	r21, 0x00	; 0
    5586:	21 e0       	ldi	r18, 0x01	; 1
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	02 c0       	rjmp	.+4      	; 0x5590 <PORTE_set_pin_level+0x32>
    558c:	22 0f       	add	r18, r18
    558e:	33 1f       	adc	r19, r19
    5590:	4a 95       	dec	r20
    5592:	e2 f7       	brpl	.-8      	; 0x558c <PORTE_set_pin_level+0x2e>
    5594:	26 2b       	or	r18, r22
    5596:	fc 01       	movw	r30, r24
    5598:	21 83       	std	Z+1, r18	; 0x01
    559a:	15 c0       	rjmp	.+42     	; 0x55c6 <PORTE_set_pin_level+0x68>
    559c:	80 e1       	ldi	r24, 0x10	; 16
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	20 e1       	ldi	r18, 0x10	; 16
    55a2:	30 e0       	ldi	r19, 0x00	; 0
    55a4:	f9 01       	movw	r30, r18
    55a6:	21 81       	ldd	r18, Z+1	; 0x01
    55a8:	62 2f       	mov	r22, r18
    55aa:	29 81       	ldd	r18, Y+1	; 0x01
    55ac:	42 2f       	mov	r20, r18
    55ae:	50 e0       	ldi	r21, 0x00	; 0
    55b0:	21 e0       	ldi	r18, 0x01	; 1
    55b2:	30 e0       	ldi	r19, 0x00	; 0
    55b4:	02 c0       	rjmp	.+4      	; 0x55ba <PORTE_set_pin_level+0x5c>
    55b6:	22 0f       	add	r18, r18
    55b8:	33 1f       	adc	r19, r19
    55ba:	4a 95       	dec	r20
    55bc:	e2 f7       	brpl	.-8      	; 0x55b6 <PORTE_set_pin_level+0x58>
    55be:	20 95       	com	r18
    55c0:	26 23       	and	r18, r22
    55c2:	fc 01       	movw	r30, r24
    55c4:	21 83       	std	Z+1, r18	; 0x01
    55c6:	00 00       	nop
    55c8:	0f 90       	pop	r0
    55ca:	0f 90       	pop	r0
    55cc:	df 91       	pop	r29
    55ce:	cf 91       	pop	r28
    55d0:	08 95       	ret

000055d2 <PC0_set_dir>:
    55d2:	cf 93       	push	r28
    55d4:	df 93       	push	r29
    55d6:	1f 92       	push	r1
    55d8:	cd b7       	in	r28, 0x3d	; 61
    55da:	de b7       	in	r29, 0x3e	; 62
    55dc:	89 83       	std	Y+1, r24	; 0x01
    55de:	69 81       	ldd	r22, Y+1	; 0x01
    55e0:	80 e0       	ldi	r24, 0x00	; 0
    55e2:	0e 94 9c 29 	call	0x5338	; 0x5338 <PORTC_set_pin_dir>
    55e6:	00 00       	nop
    55e8:	0f 90       	pop	r0
    55ea:	df 91       	pop	r29
    55ec:	cf 91       	pop	r28
    55ee:	08 95       	ret

000055f0 <PC0_set_level>:
    55f0:	cf 93       	push	r28
    55f2:	df 93       	push	r29
    55f4:	1f 92       	push	r1
    55f6:	cd b7       	in	r28, 0x3d	; 61
    55f8:	de b7       	in	r29, 0x3e	; 62
    55fa:	89 83       	std	Y+1, r24	; 0x01
    55fc:	69 81       	ldd	r22, Y+1	; 0x01
    55fe:	80 e0       	ldi	r24, 0x00	; 0
    5600:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <PORTC_set_pin_level>
    5604:	00 00       	nop
    5606:	0f 90       	pop	r0
    5608:	df 91       	pop	r29
    560a:	cf 91       	pop	r28
    560c:	08 95       	ret

0000560e <PC1_set_pull_mode>:
    560e:	cf 93       	push	r28
    5610:	df 93       	push	r29
    5612:	1f 92       	push	r1
    5614:	cd b7       	in	r28, 0x3d	; 61
    5616:	de b7       	in	r29, 0x3e	; 62
    5618:	89 83       	std	Y+1, r24	; 0x01
    561a:	69 81       	ldd	r22, Y+1	; 0x01
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <PORTC_set_pin_pull_mode>
    5622:	00 00       	nop
    5624:	0f 90       	pop	r0
    5626:	df 91       	pop	r29
    5628:	cf 91       	pop	r28
    562a:	08 95       	ret

0000562c <PC1_set_dir>:
    562c:	cf 93       	push	r28
    562e:	df 93       	push	r29
    5630:	1f 92       	push	r1
    5632:	cd b7       	in	r28, 0x3d	; 61
    5634:	de b7       	in	r29, 0x3e	; 62
    5636:	89 83       	std	Y+1, r24	; 0x01
    5638:	69 81       	ldd	r22, Y+1	; 0x01
    563a:	81 e0       	ldi	r24, 0x01	; 1
    563c:	0e 94 9c 29 	call	0x5338	; 0x5338 <PORTC_set_pin_dir>
    5640:	00 00       	nop
    5642:	0f 90       	pop	r0
    5644:	df 91       	pop	r29
    5646:	cf 91       	pop	r28
    5648:	08 95       	ret

0000564a <PE0_set_dir>:
    564a:	cf 93       	push	r28
    564c:	df 93       	push	r29
    564e:	1f 92       	push	r1
    5650:	cd b7       	in	r28, 0x3d	; 61
    5652:	de b7       	in	r29, 0x3e	; 62
    5654:	89 83       	std	Y+1, r24	; 0x01
    5656:	69 81       	ldd	r22, Y+1	; 0x01
    5658:	80 e0       	ldi	r24, 0x00	; 0
    565a:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <PORTE_set_pin_dir>
    565e:	00 00       	nop
    5660:	0f 90       	pop	r0
    5662:	df 91       	pop	r29
    5664:	cf 91       	pop	r28
    5666:	08 95       	ret

00005668 <PE0_set_level>:
    5668:	cf 93       	push	r28
    566a:	df 93       	push	r29
    566c:	1f 92       	push	r1
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
    5672:	89 83       	std	Y+1, r24	; 0x01
    5674:	69 81       	ldd	r22, Y+1	; 0x01
    5676:	80 e0       	ldi	r24, 0x00	; 0
    5678:	0e 94 af 2a 	call	0x555e	; 0x555e <PORTE_set_pin_level>
    567c:	00 00       	nop
    567e:	0f 90       	pop	r0
    5680:	df 91       	pop	r29
    5682:	cf 91       	pop	r28
    5684:	08 95       	ret

00005686 <PE1_set_pull_mode>:
    5686:	cf 93       	push	r28
    5688:	df 93       	push	r29
    568a:	1f 92       	push	r1
    568c:	cd b7       	in	r28, 0x3d	; 61
    568e:	de b7       	in	r29, 0x3e	; 62
    5690:	89 83       	std	Y+1, r24	; 0x01
    5692:	69 81       	ldd	r22, Y+1	; 0x01
    5694:	81 e0       	ldi	r24, 0x01	; 1
    5696:	0e 94 2a 2a 	call	0x5454	; 0x5454 <PORTE_set_pin_pull_mode>
    569a:	00 00       	nop
    569c:	0f 90       	pop	r0
    569e:	df 91       	pop	r29
    56a0:	cf 91       	pop	r28
    56a2:	08 95       	ret

000056a4 <PE1_set_dir>:
    56a4:	cf 93       	push	r28
    56a6:	df 93       	push	r29
    56a8:	1f 92       	push	r1
    56aa:	cd b7       	in	r28, 0x3d	; 61
    56ac:	de b7       	in	r29, 0x3e	; 62
    56ae:	89 83       	std	Y+1, r24	; 0x01
    56b0:	69 81       	ldd	r22, Y+1	; 0x01
    56b2:	81 e0       	ldi	r24, 0x01	; 1
    56b4:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <PORTE_set_pin_dir>
    56b8:	00 00       	nop
    56ba:	0f 90       	pop	r0
    56bc:	df 91       	pop	r29
    56be:	cf 91       	pop	r28
    56c0:	08 95       	ret

000056c2 <_Z18nextFullLBTxBufferv>:
    56c2:	cf 93       	push	r28
    56c4:	df 93       	push	r29
    56c6:	00 d0       	rcall	.+0      	; 0x56c8 <_Z18nextFullLBTxBufferv+0x6>
    56c8:	cd b7       	in	r28, 0x3d	; 61
    56ca:	de b7       	in	r29, 0x3e	; 62
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	89 83       	std	Y+1, r24	; 0x01
    56d0:	1a 82       	std	Y+2, r1	; 0x02
    56d2:	80 91 d3 46 	lds	r24, 0x46D3	; 0x8046d3 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    56d6:	28 2f       	mov	r18, r24
    56d8:	30 e0       	ldi	r19, 0x00	; 0
    56da:	42 e3       	ldi	r20, 0x32	; 50
    56dc:	42 9f       	mul	r20, r18
    56de:	c0 01       	movw	r24, r0
    56e0:	43 9f       	mul	r20, r19
    56e2:	90 0d       	add	r25, r0
    56e4:	11 24       	eor	r1, r1
    56e6:	89 57       	subi	r24, 0x79	; 121
    56e8:	9a 4b       	sbci	r25, 0xBA	; 186
    56ea:	fc 01       	movw	r30, r24
    56ec:	80 81       	ld	r24, Z
    56ee:	88 23       	and	r24, r24
    56f0:	c1 f4       	brne	.+48     	; 0x5722 <_Z18nextFullLBTxBufferv+0x60>
    56f2:	8a 81       	ldd	r24, Y+2	; 0x02
    56f4:	8f 5f       	subi	r24, 0xFF	; 255
    56f6:	8a 83       	std	Y+2, r24	; 0x02
    56f8:	81 e0       	ldi	r24, 0x01	; 1
    56fa:	9a 81       	ldd	r25, Y+2	; 0x02
    56fc:	94 30       	cpi	r25, 0x04	; 4
    56fe:	08 f4       	brcc	.+2      	; 0x5702 <_Z18nextFullLBTxBufferv+0x40>
    5700:	80 e0       	ldi	r24, 0x00	; 0
    5702:	88 23       	and	r24, r24
    5704:	11 f0       	breq	.+4      	; 0x570a <_Z18nextFullLBTxBufferv+0x48>
    5706:	19 82       	std	Y+1, r1	; 0x01
    5708:	0c c0       	rjmp	.+24     	; 0x5722 <_Z18nextFullLBTxBufferv+0x60>
    570a:	80 91 d3 46 	lds	r24, 0x46D3	; 0x8046d3 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    570e:	8f 5f       	subi	r24, 0xFF	; 255
    5710:	80 93 d3 46 	sts	0x46D3, r24	; 0x8046d3 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    5714:	80 91 d3 46 	lds	r24, 0x46D3	; 0x8046d3 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    5718:	84 30       	cpi	r24, 0x04	; 4
    571a:	d8 f2       	brcs	.-74     	; 0x56d2 <_Z18nextFullLBTxBufferv+0x10>
    571c:	10 92 d3 46 	sts	0x46D3, r1	; 0x8046d3 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    5720:	d8 cf       	rjmp	.-80     	; 0x56d2 <_Z18nextFullLBTxBufferv+0x10>
    5722:	89 81       	ldd	r24, Y+1	; 0x01
    5724:	88 23       	and	r24, r24
    5726:	69 f0       	breq	.+26     	; 0x5742 <_Z18nextFullLBTxBufferv+0x80>
    5728:	80 91 d3 46 	lds	r24, 0x46D3	; 0x8046d3 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    572c:	28 2f       	mov	r18, r24
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	42 e3       	ldi	r20, 0x32	; 50
    5732:	42 9f       	mul	r20, r18
    5734:	c0 01       	movw	r24, r0
    5736:	43 9f       	mul	r20, r19
    5738:	90 0d       	add	r25, r0
    573a:	11 24       	eor	r1, r1
    573c:	89 57       	subi	r24, 0x79	; 121
    573e:	9a 4b       	sbci	r25, 0xBA	; 186
    5740:	02 c0       	rjmp	.+4      	; 0x5746 <_Z18nextFullLBTxBufferv+0x84>
    5742:	80 e0       	ldi	r24, 0x00	; 0
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	0f 90       	pop	r0
    5748:	0f 90       	pop	r0
    574a:	df 91       	pop	r29
    574c:	cf 91       	pop	r28
    574e:	08 95       	ret

00005750 <_Z19nextEmptyLBRxBufferv>:
    5750:	cf 93       	push	r28
    5752:	df 93       	push	r29
    5754:	00 d0       	rcall	.+0      	; 0x5756 <_Z19nextEmptyLBRxBufferv+0x6>
    5756:	cd b7       	in	r28, 0x3d	; 61
    5758:	de b7       	in	r29, 0x3e	; 62
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	89 83       	std	Y+1, r24	; 0x01
    575e:	1a 82       	std	Y+2, r1	; 0x02
    5760:	80 91 d4 46 	lds	r24, 0x46D4	; 0x8046d4 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    5764:	28 2f       	mov	r18, r24
    5766:	30 e0       	ldi	r19, 0x00	; 0
    5768:	42 e4       	ldi	r20, 0x42	; 66
    576a:	42 9f       	mul	r20, r18
    576c:	c0 01       	movw	r24, r0
    576e:	43 9f       	mul	r20, r19
    5770:	90 0d       	add	r25, r0
    5772:	11 24       	eor	r1, r1
    5774:	80 5b       	subi	r24, 0xB0	; 176
    5776:	99 4b       	sbci	r25, 0xB9	; 185
    5778:	fc 01       	movw	r30, r24
    577a:	80 81       	ld	r24, Z
    577c:	91 81       	ldd	r25, Z+1	; 0x01
    577e:	89 2b       	or	r24, r25
    5780:	c1 f0       	breq	.+48     	; 0x57b2 <_Z19nextEmptyLBRxBufferv+0x62>
    5782:	8a 81       	ldd	r24, Y+2	; 0x02
    5784:	8f 5f       	subi	r24, 0xFF	; 255
    5786:	8a 83       	std	Y+2, r24	; 0x02
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	9a 81       	ldd	r25, Y+2	; 0x02
    578c:	92 30       	cpi	r25, 0x02	; 2
    578e:	08 f4       	brcc	.+2      	; 0x5792 <_Z19nextEmptyLBRxBufferv+0x42>
    5790:	80 e0       	ldi	r24, 0x00	; 0
    5792:	88 23       	and	r24, r24
    5794:	11 f0       	breq	.+4      	; 0x579a <_Z19nextEmptyLBRxBufferv+0x4a>
    5796:	19 82       	std	Y+1, r1	; 0x01
    5798:	0c c0       	rjmp	.+24     	; 0x57b2 <_Z19nextEmptyLBRxBufferv+0x62>
    579a:	80 91 d4 46 	lds	r24, 0x46D4	; 0x8046d4 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    579e:	8f 5f       	subi	r24, 0xFF	; 255
    57a0:	80 93 d4 46 	sts	0x46D4, r24	; 0x8046d4 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    57a4:	80 91 d4 46 	lds	r24, 0x46D4	; 0x8046d4 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    57a8:	82 30       	cpi	r24, 0x02	; 2
    57aa:	d0 f2       	brcs	.-76     	; 0x5760 <_Z19nextEmptyLBRxBufferv+0x10>
    57ac:	10 92 d4 46 	sts	0x46D4, r1	; 0x8046d4 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    57b0:	d7 cf       	rjmp	.-82     	; 0x5760 <_Z19nextEmptyLBRxBufferv+0x10>
    57b2:	89 81       	ldd	r24, Y+1	; 0x01
    57b4:	88 23       	and	r24, r24
    57b6:	69 f0       	breq	.+26     	; 0x57d2 <_Z19nextEmptyLBRxBufferv+0x82>
    57b8:	80 91 d4 46 	lds	r24, 0x46D4	; 0x8046d4 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    57bc:	28 2f       	mov	r18, r24
    57be:	30 e0       	ldi	r19, 0x00	; 0
    57c0:	42 e4       	ldi	r20, 0x42	; 66
    57c2:	42 9f       	mul	r20, r18
    57c4:	c0 01       	movw	r24, r0
    57c6:	43 9f       	mul	r20, r19
    57c8:	90 0d       	add	r25, r0
    57ca:	11 24       	eor	r1, r1
    57cc:	81 5b       	subi	r24, 0xB1	; 177
    57ce:	99 4b       	sbci	r25, 0xB9	; 185
    57d0:	02 c0       	rjmp	.+4      	; 0x57d6 <_Z19nextEmptyLBRxBufferv+0x86>
    57d2:	80 e0       	ldi	r24, 0x00	; 0
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	0f 90       	pop	r0
    57d8:	0f 90       	pop	r0
    57da:	df 91       	pop	r29
    57dc:	cf 91       	pop	r28
    57de:	08 95       	ret

000057e0 <_Z14linkbus_end_txv>:
    57e0:	cf 93       	push	r28
    57e2:	df 93       	push	r29
    57e4:	cd b7       	in	r28, 0x3d	; 61
    57e6:	de b7       	in	r29, 0x3e	; 62
    57e8:	80 91 86 45 	lds	r24, 0x4586	; 0x804586 <_ZL17linkbus_tx_active>
    57ec:	88 23       	and	r24, r24
    57ee:	c9 f0       	breq	.+50     	; 0x5822 <_Z14linkbus_end_txv+0x42>
    57f0:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <g_linkbus_usart_number>
    57f4:	88 23       	and	r24, r24
    57f6:	51 f4       	brne	.+20     	; 0x580c <_Z14linkbus_end_txv+0x2c>
    57f8:	80 e8       	ldi	r24, 0x80	; 128
    57fa:	98 e0       	ldi	r25, 0x08	; 8
    57fc:	20 e8       	ldi	r18, 0x80	; 128
    57fe:	38 e0       	ldi	r19, 0x08	; 8
    5800:	f9 01       	movw	r30, r18
    5802:	25 81       	ldd	r18, Z+5	; 0x05
    5804:	2f 7d       	andi	r18, 0xDF	; 223
    5806:	fc 01       	movw	r30, r24
    5808:	25 83       	std	Z+5, r18	; 0x05
    580a:	09 c0       	rjmp	.+18     	; 0x581e <_Z14linkbus_end_txv+0x3e>
    580c:	80 e2       	ldi	r24, 0x20	; 32
    580e:	98 e0       	ldi	r25, 0x08	; 8
    5810:	20 e2       	ldi	r18, 0x20	; 32
    5812:	38 e0       	ldi	r19, 0x08	; 8
    5814:	f9 01       	movw	r30, r18
    5816:	25 81       	ldd	r18, Z+5	; 0x05
    5818:	2f 7d       	andi	r18, 0xDF	; 223
    581a:	fc 01       	movw	r30, r24
    581c:	25 83       	std	Z+5, r18	; 0x05
    581e:	10 92 86 45 	sts	0x4586, r1	; 0x804586 <_ZL17linkbus_tx_active>
    5822:	00 00       	nop
    5824:	df 91       	pop	r29
    5826:	cf 91       	pop	r28
    5828:	08 95       	ret

0000582a <_ZL21USART1_initializationm>:
// }


/* configure the pins and initialize the registers */
void USART1_initialization(uint32_t baud)
{
    582a:	cf 93       	push	r28
    582c:	df 93       	push	r29
    582e:	00 d0       	rcall	.+0      	; 0x5830 <_ZL21USART1_initializationm+0x6>
    5830:	00 d0       	rcall	.+0      	; 0x5832 <_ZL21USART1_initializationm+0x8>
    5832:	cd b7       	in	r28, 0x3d	; 61
    5834:	de b7       	in	r29, 0x3e	; 62
    5836:	69 83       	std	Y+1, r22	; 0x01
    5838:	7a 83       	std	Y+2, r23	; 0x02
    583a:	8b 83       	std	Y+3, r24	; 0x03
    583c:	9c 83       	std	Y+4, r25	; 0x04

	// Set Rx pin direction to input
	PC1_set_dir(PORT_DIR_IN);
    583e:	80 e0       	ldi	r24, 0x00	; 0
    5840:	0e 94 16 2b 	call	0x562c	; 0x562c <PC1_set_dir>
	PC1_set_pull_mode(PORT_PULL_OFF);
    5844:	80 e0       	ldi	r24, 0x00	; 0
    5846:	0e 94 07 2b 	call	0x560e	; 0x560e <PC1_set_pull_mode>

	// Set Tx pin direction to output
	PC0_set_dir(PORT_DIR_OUT);
    584a:	81 e0       	ldi	r24, 0x01	; 1
    584c:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <PC0_set_dir>
	PC0_set_level(HIGH);
    5850:	81 e0       	ldi	r24, 0x01	; 1
    5852:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <PC0_set_level>

	USART1_init(baud);
    5856:	89 81       	ldd	r24, Y+1	; 0x01
    5858:	9a 81       	ldd	r25, Y+2	; 0x02
    585a:	ab 81       	ldd	r26, Y+3	; 0x03
    585c:	bc 81       	ldd	r27, Y+4	; 0x04
    585e:	bc 01       	movw	r22, r24
    5860:	cd 01       	movw	r24, r26
    5862:	0e 94 bf 41 	call	0x837e	; 0x837e <USART1_init>
}
    5866:	00 00       	nop
    5868:	24 96       	adiw	r28, 0x04	; 4
    586a:	cd bf       	out	0x3d, r28	; 61
    586c:	de bf       	out	0x3e, r29	; 62
    586e:	df 91       	pop	r29
    5870:	cf 91       	pop	r28
    5872:	08 95       	ret

00005874 <_ZL21USART4_initializationm>:

/* configure the pins and initialize the registers */
void USART4_initialization(uint32_t baud)
{
    5874:	cf 93       	push	r28
    5876:	df 93       	push	r29
    5878:	00 d0       	rcall	.+0      	; 0x587a <_ZL21USART4_initializationm+0x6>
    587a:	00 d0       	rcall	.+0      	; 0x587c <_ZL21USART4_initializationm+0x8>
    587c:	cd b7       	in	r28, 0x3d	; 61
    587e:	de b7       	in	r29, 0x3e	; 62
    5880:	69 83       	std	Y+1, r22	; 0x01
    5882:	7a 83       	std	Y+2, r23	; 0x02
    5884:	8b 83       	std	Y+3, r24	; 0x03
    5886:	9c 83       	std	Y+4, r25	; 0x04

	// Set Rx pin direction to input
	PE1_set_dir(PORT_DIR_IN);
    5888:	80 e0       	ldi	r24, 0x00	; 0
    588a:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <PE1_set_dir>
	PE1_set_pull_mode(PORT_PULL_OFF);
    588e:	80 e0       	ldi	r24, 0x00	; 0
    5890:	0e 94 43 2b 	call	0x5686	; 0x5686 <PE1_set_pull_mode>

	// Set Tx pin direction to output
	PE0_set_dir(PORT_DIR_OUT);
    5894:	81 e0       	ldi	r24, 0x01	; 1
    5896:	0e 94 25 2b 	call	0x564a	; 0x564a <PE0_set_dir>
	PE0_set_level(HIGH);
    589a:	81 e0       	ldi	r24, 0x01	; 1
    589c:	0e 94 34 2b 	call	0x5668	; 0x5668 <PE0_set_level>

	USART4_init(baud);
    58a0:	89 81       	ldd	r24, Y+1	; 0x01
    58a2:	9a 81       	ldd	r25, Y+2	; 0x02
    58a4:	ab 81       	ldd	r26, Y+3	; 0x03
    58a6:	bc 81       	ldd	r27, Y+4	; 0x04
    58a8:	bc 01       	movw	r22, r24
    58aa:	cd 01       	movw	r24, r26
    58ac:	0e 94 34 42 	call	0x8468	; 0x8468 <USART4_init>
}
    58b0:	00 00       	nop
    58b2:	24 96       	adiw	r28, 0x04	; 4
    58b4:	cd bf       	out	0x3d, r28	; 61
    58b6:	de bf       	out	0x3e, r29	; 62
    58b8:	df 91       	pop	r29
    58ba:	cf 91       	pop	r28
    58bc:	08 95       	ret

000058be <_Z12linkbus_initm14USART_Number_t>:

void linkbus_init(uint32_t baud, USART_Number_t usart)
{
    58be:	cf 93       	push	r28
    58c0:	df 93       	push	r29
    58c2:	cd b7       	in	r28, 0x3d	; 61
    58c4:	de b7       	in	r29, 0x3e	; 62
    58c6:	27 97       	sbiw	r28, 0x07	; 7
    58c8:	cd bf       	out	0x3d, r28	; 61
    58ca:	de bf       	out	0x3e, r29	; 62
    58cc:	6b 83       	std	Y+3, r22	; 0x03
    58ce:	7c 83       	std	Y+4, r23	; 0x04
    58d0:	8d 83       	std	Y+5, r24	; 0x05
    58d2:	9e 83       	std	Y+6, r25	; 0x06
    58d4:	4f 83       	std	Y+7, r20	; 0x07
	memset(rx_buffer, 0, sizeof(rx_buffer));
    58d6:	44 e8       	ldi	r20, 0x84	; 132
    58d8:	50 e0       	ldi	r21, 0x00	; 0
    58da:	60 e0       	ldi	r22, 0x00	; 0
    58dc:	70 e0       	ldi	r23, 0x00	; 0
    58de:	8f e4       	ldi	r24, 0x4F	; 79
    58e0:	96 e4       	ldi	r25, 0x46	; 70
    58e2:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <memset>

	for(int bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    58e6:	19 82       	std	Y+1, r1	; 0x01
    58e8:	1a 82       	std	Y+2, r1	; 0x02
    58ea:	89 81       	ldd	r24, Y+1	; 0x01
    58ec:	9a 81       	ldd	r25, Y+2	; 0x02
    58ee:	04 97       	sbiw	r24, 0x04	; 4
    58f0:	94 f4       	brge	.+36     	; 0x5916 <_Z12linkbus_initm14USART_Number_t+0x58>
	{
		tx_buffer[bufferIndex][0] = '\0';
    58f2:	29 81       	ldd	r18, Y+1	; 0x01
    58f4:	3a 81       	ldd	r19, Y+2	; 0x02
    58f6:	42 e3       	ldi	r20, 0x32	; 50
    58f8:	42 9f       	mul	r20, r18
    58fa:	c0 01       	movw	r24, r0
    58fc:	43 9f       	mul	r20, r19
    58fe:	90 0d       	add	r25, r0
    5900:	11 24       	eor	r1, r1
    5902:	89 57       	subi	r24, 0x79	; 121
    5904:	9a 4b       	sbci	r25, 0xBA	; 186
    5906:	fc 01       	movw	r30, r24
    5908:	10 82       	st	Z, r1

void linkbus_init(uint32_t baud, USART_Number_t usart)
{
	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(int bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    590a:	89 81       	ldd	r24, Y+1	; 0x01
    590c:	9a 81       	ldd	r25, Y+2	; 0x02
    590e:	01 96       	adiw	r24, 0x01	; 1
    5910:	89 83       	std	Y+1, r24	; 0x01
    5912:	9a 83       	std	Y+2, r25	; 0x02
    5914:	ea cf       	rjmp	.-44     	; 0x58ea <_Z12linkbus_initm14USART_Number_t+0x2c>
	{
		tx_buffer[bufferIndex][0] = '\0';
	}

	if((usart != USART_DO_NOT_CHANGE) || (g_linkbus_usart_number == USART_NOT_SET))
    5916:	8f 81       	ldd	r24, Y+7	; 0x07
    5918:	86 30       	cpi	r24, 0x06	; 6
    591a:	21 f4       	brne	.+8      	; 0x5924 <_Z12linkbus_initm14USART_Number_t+0x66>
    591c:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <g_linkbus_usart_number>
    5920:	87 30       	cpi	r24, 0x07	; 7
    5922:	b9 f4       	brne	.+46     	; 0x5952 <_Z12linkbus_initm14USART_Number_t+0x94>
	{
		if(usart == USART_0)
    5924:	8f 81       	ldd	r24, Y+7	; 0x07
    5926:	88 23       	and	r24, r24
    5928:	49 f4       	brne	.+18     	; 0x593c <_Z12linkbus_initm14USART_Number_t+0x7e>
		{
			USART4_initialization(baud);
    592a:	8b 81       	ldd	r24, Y+3	; 0x03
    592c:	9c 81       	ldd	r25, Y+4	; 0x04
    592e:	ad 81       	ldd	r26, Y+5	; 0x05
    5930:	be 81       	ldd	r27, Y+6	; 0x06
    5932:	bc 01       	movw	r22, r24
    5934:	cd 01       	movw	r24, r26
    5936:	0e 94 3a 2c 	call	0x5874	; 0x5874 <_ZL21USART4_initializationm>
    593a:	08 c0       	rjmp	.+16     	; 0x594c <_Z12linkbus_initm14USART_Number_t+0x8e>
		}
		else
		{
			USART1_initialization(baud);
    593c:	8b 81       	ldd	r24, Y+3	; 0x03
    593e:	9c 81       	ldd	r25, Y+4	; 0x04
    5940:	ad 81       	ldd	r26, Y+5	; 0x05
    5942:	be 81       	ldd	r27, Y+6	; 0x06
    5944:	bc 01       	movw	r22, r24
    5946:	cd 01       	movw	r24, r26
    5948:	0e 94 15 2c 	call	0x582a	; 0x582a <_ZL21USART1_initializationm>
		}
		
		g_linkbus_usart_number = usart;
    594c:	8f 81       	ldd	r24, Y+7	; 0x07
    594e:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <g_linkbus_usart_number>
	}

	g_bus_disabled = false;
    5952:	10 92 22 40 	sts	0x4022, r1	; 0x804022 <_ZL14g_bus_disabled>
}
    5956:	00 00       	nop
    5958:	27 96       	adiw	r28, 0x07	; 7
    595a:	cd bf       	out	0x3d, r28	; 61
    595c:	de bf       	out	0x3e, r29	; 62
    595e:	df 91       	pop	r29
    5960:	cf 91       	pop	r28
    5962:	08 95       	ret

00005964 <_Z9makeMorsePcPbS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a bool indicating whether a CW carrier should be sent
 *  Pass in a pointer to a bool in the second and third arguments:
 */
bool makeMorse(char* s, bool* repeating, bool* finished)
{
    5964:	cf 93       	push	r28
    5966:	df 93       	push	r29
    5968:	cd b7       	in	r28, 0x3d	; 61
    596a:	de b7       	in	r29, 0x3e	; 62
    596c:	28 97       	sbiw	r28, 0x08	; 8
    596e:	cd bf       	out	0x3d, r28	; 61
    5970:	de bf       	out	0x3e, r29	; 62
    5972:	8b 83       	std	Y+3, r24	; 0x03
    5974:	9c 83       	std	Y+4, r25	; 0x04
    5976:	6d 83       	std	Y+5, r22	; 0x05
    5978:	7e 83       	std	Y+6, r23	; 0x06
    597a:	4f 83       	std	Y+7, r20	; 0x07
    597c:	58 87       	std	Y+8, r21	; 0x08
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static bool completedString = false;
	static bool carrierOn = false;
	static bool holdKeyDown = false;

	if(s)   /* load a new NULL-terminated string to send */
    597e:	8b 81       	ldd	r24, Y+3	; 0x03
    5980:	9c 81       	ldd	r25, Y+4	; 0x04
    5982:	89 2b       	or	r24, r25
    5984:	09 f4       	brne	.+2      	; 0x5988 <_Z9makeMorsePcPbS0_+0x24>
    5986:	4a c0       	rjmp	.+148    	; 0x5a1c <_Z9makeMorsePcPbS0_+0xb8>
	{
		holdKeyDown = false;
    5988:	10 92 d5 46 	sts	0x46D5, r1	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>

		if(repeating)
    598c:	8d 81       	ldd	r24, Y+5	; 0x05
    598e:	9e 81       	ldd	r25, Y+6	; 0x06
    5990:	89 2b       	or	r24, r25
    5992:	31 f0       	breq	.+12     	; 0x59a0 <_Z9makeMorsePcPbS0_+0x3c>
		{
			repeat = *repeating;
    5994:	8d 81       	ldd	r24, Y+5	; 0x05
    5996:	9e 81       	ldd	r25, Y+6	; 0x06
    5998:	fc 01       	movw	r30, r24
    599a:	80 81       	ld	r24, Z
    599c:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E6repeat>
		}

		if(*s)
    59a0:	8b 81       	ldd	r24, Y+3	; 0x03
    59a2:	9c 81       	ldd	r25, Y+4	; 0x04
    59a4:	fc 01       	movw	r30, r24
    59a6:	80 81       	ld	r24, Z
    59a8:	88 23       	and	r24, r24
    59aa:	21 f1       	breq	.+72     	; 0x59f4 <_Z9makeMorsePcPbS0_+0x90>
		{
			str = s;
    59ac:	8b 81       	ldd	r24, Y+3	; 0x03
    59ae:	9c 81       	ldd	r25, Y+4	; 0x04
    59b0:	80 93 d6 46 	sts	0x46D6, r24	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E3str>
    59b4:	90 93 d7 46 	sts	0x46D7, r25	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			c = ' ';
    59b8:	80 e2       	ldi	r24, 0x20	; 32
    59ba:	80 93 25 40 	sts	0x4025, r24	; 0x804025 <_ZZ9makeMorsePcPbS0_E1c>
			morseInProgress = getMorseChar(*str);
    59be:	80 91 d6 46 	lds	r24, 0x46D6	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E3str>
    59c2:	90 91 d7 46 	lds	r25, 0x46D7	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
    59c6:	fc 01       	movw	r30, r24
    59c8:	80 81       	ld	r24, Z
    59ca:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <_Z12getMorseCharc>
    59ce:	a8 2f       	mov	r26, r24
    59d0:	cb 01       	movw	r24, r22
    59d2:	80 93 d8 46 	sts	0x46D8, r24	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    59d6:	90 93 d9 46 	sts	0x46D9, r25	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    59da:	a0 93 da 46 	sts	0x46DA, r26	; 0x8046da <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
			charIndex = 0;
    59de:	10 92 db 46 	sts	0x46DB, r1	; 0x8046db <_ZZ9makeMorsePcPbS0_E9charIndex>
			symbolIndex = 0;
    59e2:	10 92 dc 46 	sts	0x46DC, r1	; 0x8046dc <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			elementIndex = 0;
    59e6:	10 92 dd 46 	sts	0x46DD, r1	; 0x8046dd <_ZZ9makeMorsePcPbS0_E12elementIndex>
			addedSpace = 0;
    59ea:	10 92 de 46 	sts	0x46DE, r1	; 0x8046de <_ZZ9makeMorsePcPbS0_E10addedSpace>
			completedString = false;
    59ee:	10 92 df 46 	sts	0x46DF, r1	; 0x8046df <_ZZ9makeMorsePcPbS0_E15completedString>
    59f2:	10 c0       	rjmp	.+32     	; 0x5a14 <_Z9makeMorsePcPbS0_+0xb0>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    59f4:	10 92 d6 46 	sts	0x46D6, r1	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E3str>
    59f8:	10 92 d7 46 	sts	0x46D7, r1	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			completedString = true;
    59fc:	81 e0       	ldi	r24, 0x01	; 1
    59fe:	80 93 df 46 	sts	0x46DF, r24	; 0x8046df <_ZZ9makeMorsePcPbS0_E15completedString>
			if(finished)
    5a02:	8f 81       	ldd	r24, Y+7	; 0x07
    5a04:	98 85       	ldd	r25, Y+8	; 0x08
    5a06:	89 2b       	or	r24, r25
    5a08:	29 f0       	breq	.+10     	; 0x5a14 <_Z9makeMorsePcPbS0_+0xb0>
			{
				*finished = true;
    5a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    5a0c:	98 85       	ldd	r25, Y+8	; 0x08
    5a0e:	21 e0       	ldi	r18, 0x01	; 1
    5a10:	fc 01       	movw	r30, r24
    5a12:	20 83       	st	Z, r18
			}
		}

		carrierOn = OFF;
    5a14:	10 92 e0 46 	sts	0x46E0, r1	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E9carrierOn>
		return( OFF);
    5a18:	80 e0       	ldi	r24, 0x00	; 0
    5a1a:	f6 c0       	rjmp	.+492    	; 0x5c08 <_Z9makeMorsePcPbS0_+0x2a4>
	}
	else if(str)
    5a1c:	80 91 d6 46 	lds	r24, 0x46D6	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E3str>
    5a20:	90 91 d7 46 	lds	r25, 0x46D7	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
    5a24:	89 2b       	or	r24, r25
    5a26:	09 f4       	brne	.+2      	; 0x5a2a <_Z9makeMorsePcPbS0_+0xc6>
    5a28:	dd c0       	rjmp	.+442    	; 0x5be4 <_Z9makeMorsePcPbS0_+0x280>
	{
		if(repeating)
    5a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    5a2e:	89 2b       	or	r24, r25
    5a30:	31 f0       	breq	.+12     	; 0x5a3e <_Z9makeMorsePcPbS0_+0xda>
		{
			*repeating = repeat;
    5a32:	20 91 24 40 	lds	r18, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E6repeat>
    5a36:	8d 81       	ldd	r24, Y+5	; 0x05
    5a38:	9e 81       	ldd	r25, Y+6	; 0x06
    5a3a:	fc 01       	movw	r30, r24
    5a3c:	20 83       	st	Z, r18
		}

		if(completedString)
    5a3e:	80 91 df 46 	lds	r24, 0x46DF	; 0x8046df <_ZZ9makeMorsePcPbS0_E15completedString>
    5a42:	88 23       	and	r24, r24
    5a44:	69 f0       	breq	.+26     	; 0x5a60 <_Z9makeMorsePcPbS0_+0xfc>
		{
			if(finished)
    5a46:	8f 81       	ldd	r24, Y+7	; 0x07
    5a48:	98 85       	ldd	r25, Y+8	; 0x08
    5a4a:	89 2b       	or	r24, r25
    5a4c:	39 f0       	breq	.+14     	; 0x5a5c <_Z9makeMorsePcPbS0_+0xf8>
			{
				*finished = true;
    5a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    5a50:	98 85       	ldd	r25, Y+8	; 0x08
    5a52:	21 e0       	ldi	r18, 0x01	; 1
    5a54:	fc 01       	movw	r30, r24
    5a56:	20 83       	st	Z, r18
				holdKeyDown = false;
    5a58:	10 92 d5 46 	sts	0x46D5, r1	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
			}
			return( OFF);
    5a5c:	80 e0       	ldi	r24, 0x00	; 0
    5a5e:	d4 c0       	rjmp	.+424    	; 0x5c08 <_Z9makeMorsePcPbS0_+0x2a4>
		}

		if(elementIndex)
    5a60:	80 91 dd 46 	lds	r24, 0x46DD	; 0x8046dd <_ZZ9makeMorsePcPbS0_E12elementIndex>
    5a64:	88 23       	and	r24, r24
    5a66:	31 f0       	breq	.+12     	; 0x5a74 <_Z9makeMorsePcPbS0_+0x110>
		{
			elementIndex--;
    5a68:	80 91 dd 46 	lds	r24, 0x46DD	; 0x8046dd <_ZZ9makeMorsePcPbS0_E12elementIndex>
    5a6c:	81 50       	subi	r24, 0x01	; 1
    5a6e:	80 93 dd 46 	sts	0x46DD, r24	; 0x8046dd <_ZZ9makeMorsePcPbS0_E12elementIndex>
    5a72:	ae c0       	rjmp	.+348    	; 0x5bd0 <_Z9makeMorsePcPbS0_+0x26c>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    5a74:	80 91 e0 46 	lds	r24, 0x46E0	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E9carrierOn>
    5a78:	88 23       	and	r24, r24
    5a7a:	a1 f0       	breq	.+40     	; 0x5aa4 <_Z9makeMorsePcPbS0_+0x140>
    5a7c:	90 91 d5 46 	lds	r25, 0x46D5	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    5a80:	81 e0       	ldi	r24, 0x01	; 1
    5a82:	89 27       	eor	r24, r25
    5a84:	88 23       	and	r24, r24
    5a86:	71 f0       	breq	.+28     	; 0x5aa4 <_Z9makeMorsePcPbS0_+0x140>
		{
			carrierOn = false;
    5a88:	10 92 e0 46 	sts	0x46E0, r1	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    5a8c:	80 91 de 46 	lds	r24, 0x46DE	; 0x8046de <_ZZ9makeMorsePcPbS0_E10addedSpace>
    5a90:	88 23       	and	r24, r24
    5a92:	09 f4       	brne	.+2      	; 0x5a96 <_Z9makeMorsePcPbS0_+0x132>
    5a94:	9d c0       	rjmp	.+314    	; 0x5bd0 <_Z9makeMorsePcPbS0_+0x26c>
			{
				elementIndex = addedSpace;
    5a96:	80 91 de 46 	lds	r24, 0x46DE	; 0x8046de <_ZZ9makeMorsePcPbS0_E10addedSpace>
    5a9a:	80 93 dd 46 	sts	0x46DD, r24	; 0x8046dd <_ZZ9makeMorsePcPbS0_E12elementIndex>
				addedSpace = 0;
    5a9e:	10 92 de 46 	sts	0x46DE, r1	; 0x8046de <_ZZ9makeMorsePcPbS0_E10addedSpace>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
		{
			carrierOn = false;
			/* wait one element = inter-symbol space */
			if(addedSpace)
    5aa2:	96 c0       	rjmp	.+300    	; 0x5bd0 <_Z9makeMorsePcPbS0_+0x26c>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    5aa4:	90 91 d9 46 	lds	r25, 0x46D9	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    5aa8:	80 91 dc 46 	lds	r24, 0x46DC	; 0x8046dc <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    5aac:	89 17       	cp	r24, r25
    5aae:	08 f4       	brcc	.+2      	; 0x5ab2 <_Z9makeMorsePcPbS0_+0x14e>
    5ab0:	4a c0       	rjmp	.+148    	; 0x5b46 <_Z9makeMorsePcPbS0_+0x1e2>
			{
				c = (*(str + ++charIndex));
    5ab2:	20 91 d6 46 	lds	r18, 0x46D6	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E3str>
    5ab6:	30 91 d7 46 	lds	r19, 0x46D7	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
    5aba:	80 91 db 46 	lds	r24, 0x46DB	; 0x8046db <_ZZ9makeMorsePcPbS0_E9charIndex>
    5abe:	8f 5f       	subi	r24, 0xFF	; 255
    5ac0:	80 93 db 46 	sts	0x46DB, r24	; 0x8046db <_ZZ9makeMorsePcPbS0_E9charIndex>
    5ac4:	80 91 db 46 	lds	r24, 0x46DB	; 0x8046db <_ZZ9makeMorsePcPbS0_E9charIndex>
    5ac8:	88 2f       	mov	r24, r24
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	82 0f       	add	r24, r18
    5ace:	93 1f       	adc	r25, r19
    5ad0:	fc 01       	movw	r30, r24
    5ad2:	80 81       	ld	r24, Z
    5ad4:	80 93 25 40 	sts	0x4025, r24	; 0x804025 <_ZZ9makeMorsePcPbS0_E1c>

				if(!c)  /* wrap to beginning of text */
    5ad8:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E1c>
    5adc:	88 23       	and	r24, r24
    5ade:	29 f5       	brne	.+74     	; 0x5b2a <_Z9makeMorsePcPbS0_+0x1c6>
				{
					if(repeat)
    5ae0:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E6repeat>
    5ae4:	88 23       	and	r24, r24
    5ae6:	59 f0       	breq	.+22     	; 0x5afe <_Z9makeMorsePcPbS0_+0x19a>
					{
						c = *str;
    5ae8:	80 91 d6 46 	lds	r24, 0x46D6	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E3str>
    5aec:	90 91 d7 46 	lds	r25, 0x46D7	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
    5af0:	fc 01       	movw	r30, r24
    5af2:	80 81       	ld	r24, Z
    5af4:	80 93 25 40 	sts	0x4025, r24	; 0x804025 <_ZZ9makeMorsePcPbS0_E1c>
						charIndex = 0;
    5af8:	10 92 db 46 	sts	0x46DB, r1	; 0x8046db <_ZZ9makeMorsePcPbS0_E9charIndex>
    5afc:	16 c0       	rjmp	.+44     	; 0x5b2a <_Z9makeMorsePcPbS0_+0x1c6>
					}
					else
					{
						str = NULL;
    5afe:	10 92 d6 46 	sts	0x46D6, r1	; 0x8046d6 <_ZZ9makeMorsePcPbS0_E3str>
    5b02:	10 92 d7 46 	sts	0x46D7, r1	; 0x8046d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
						carrierOn = OFF;
    5b06:	10 92 e0 46 	sts	0x46E0, r1	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E9carrierOn>
						completedString = true;
    5b0a:	81 e0       	ldi	r24, 0x01	; 1
    5b0c:	80 93 df 46 	sts	0x46DF, r24	; 0x8046df <_ZZ9makeMorsePcPbS0_E15completedString>
						if(finished)
    5b10:	8f 81       	ldd	r24, Y+7	; 0x07
    5b12:	98 85       	ldd	r25, Y+8	; 0x08
    5b14:	89 2b       	or	r24, r25
    5b16:	29 f0       	breq	.+10     	; 0x5b22 <_Z9makeMorsePcPbS0_+0x1be>
						{
							*finished = true;
    5b18:	8f 81       	ldd	r24, Y+7	; 0x07
    5b1a:	98 85       	ldd	r25, Y+8	; 0x08
    5b1c:	21 e0       	ldi	r18, 0x01	; 1
    5b1e:	fc 01       	movw	r30, r24
    5b20:	20 83       	st	Z, r18
						}
						holdKeyDown = false;
    5b22:	10 92 d5 46 	sts	0x46D5, r1	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
						return( OFF );
    5b26:	80 e0       	ldi	r24, 0x00	; 0
    5b28:	6f c0       	rjmp	.+222    	; 0x5c08 <_Z9makeMorsePcPbS0_+0x2a4>
					}
				}

				morseInProgress = getMorseChar(c);
    5b2a:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E1c>
    5b2e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <_Z12getMorseCharc>
    5b32:	a8 2f       	mov	r26, r24
    5b34:	cb 01       	movw	r24, r22
    5b36:	80 93 d8 46 	sts	0x46D8, r24	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    5b3a:	90 93 d9 46 	sts	0x46D9, r25	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    5b3e:	a0 93 da 46 	sts	0x46DA, r26	; 0x8046da <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    5b42:	10 92 dc 46 	sts	0x46DC, r1	; 0x8046dc <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    5b46:	80 91 d8 46 	lds	r24, 0x46D8	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    5b4a:	8d 3f       	cpi	r24, 0xFD	; 253
    5b4c:	70 f5       	brcc	.+92     	; 0x5baa <_Z9makeMorsePcPbS0_+0x246>
			{
				bool isDah = morseInProgress.pattern & (1 << symbolIndex++);
    5b4e:	80 91 d8 46 	lds	r24, 0x46D8	; 0x8046d8 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    5b52:	88 2f       	mov	r24, r24
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	20 91 dc 46 	lds	r18, 0x46DC	; 0x8046dc <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    5b5a:	31 e0       	ldi	r19, 0x01	; 1
    5b5c:	32 0f       	add	r19, r18
    5b5e:	30 93 dc 46 	sts	0x46DC, r19	; 0x8046dc <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    5b62:	22 2f       	mov	r18, r18
    5b64:	30 e0       	ldi	r19, 0x00	; 0
    5b66:	02 c0       	rjmp	.+4      	; 0x5b6c <_Z9makeMorsePcPbS0_+0x208>
    5b68:	95 95       	asr	r25
    5b6a:	87 95       	ror	r24
    5b6c:	2a 95       	dec	r18
    5b6e:	e2 f7       	brpl	.-8      	; 0x5b68 <_Z9makeMorsePcPbS0_+0x204>
    5b70:	81 70       	andi	r24, 0x01	; 1
    5b72:	99 27       	eor	r25, r25
    5b74:	21 e0       	ldi	r18, 0x01	; 1
    5b76:	89 2b       	or	r24, r25
    5b78:	09 f4       	brne	.+2      	; 0x5b7c <_Z9makeMorsePcPbS0_+0x218>
    5b7a:	20 e0       	ldi	r18, 0x00	; 0
    5b7c:	29 83       	std	Y+1, r18	; 0x01

				if(isDah)
    5b7e:	89 81       	ldd	r24, Y+1	; 0x01
    5b80:	88 23       	and	r24, r24
    5b82:	21 f0       	breq	.+8      	; 0x5b8c <_Z9makeMorsePcPbS0_+0x228>
				{
					elementIndex = 2;
    5b84:	82 e0       	ldi	r24, 0x02	; 2
    5b86:	80 93 dd 46 	sts	0x46DD, r24	; 0x8046dd <_ZZ9makeMorsePcPbS0_E12elementIndex>
    5b8a:	02 c0       	rjmp	.+4      	; 0x5b90 <_Z9makeMorsePcPbS0_+0x22c>
				}
				else
				{
					elementIndex = 0;
    5b8c:	10 92 dd 46 	sts	0x46DD, r1	; 0x8046dd <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}

				carrierOn = true;
    5b90:	81 e0       	ldi	r24, 0x01	; 1
    5b92:	80 93 e0 46 	sts	0x46E0, r24	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    5b96:	90 91 d9 46 	lds	r25, 0x46D9	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    5b9a:	80 91 dc 46 	lds	r24, 0x46DC	; 0x8046dc <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    5b9e:	89 17       	cp	r24, r25
    5ba0:	b8 f0       	brcs	.+46     	; 0x5bd0 <_Z9makeMorsePcPbS0_+0x26c>
				{
					addedSpace = 2;
    5ba2:	82 e0       	ldi	r24, 0x02	; 2
    5ba4:	80 93 de 46 	sts	0x46DE, r24	; 0x8046de <_ZZ9makeMorsePcPbS0_E10addedSpace>
    5ba8:	13 c0       	rjmp	.+38     	; 0x5bd0 <_Z9makeMorsePcPbS0_+0x26c>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    5baa:	80 91 d9 46 	lds	r24, 0x46D9	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    5bae:	8a 83       	std	Y+2, r24	; 0x02
				symbolIndex = 255;  /* ensure the next character gets read */
    5bb0:	8f ef       	ldi	r24, 0xFF	; 255
    5bb2:	80 93 dc 46 	sts	0x46DC, r24	; 0x8046dc <_ZZ9makeMorsePcPbS0_E11symbolIndex>
				carrierOn = false;
    5bb6:	10 92 e0 46 	sts	0x46E0, r1	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E9carrierOn>
				if(sym >= 4 )
    5bba:	8a 81       	ldd	r24, Y+2	; 0x02
    5bbc:	84 30       	cpi	r24, 0x04	; 4
    5bbe:	30 f0       	brcs	.+12     	; 0x5bcc <_Z9makeMorsePcPbS0_+0x268>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    5bc0:	80 91 d9 46 	lds	r24, 0x46D9	; 0x8046d9 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    5bc4:	84 50       	subi	r24, 0x04	; 4
    5bc6:	80 93 dd 46 	sts	0x46DD, r24	; 0x8046dd <_ZZ9makeMorsePcPbS0_E12elementIndex>
    5bca:	02 c0       	rjmp	.+4      	; 0x5bd0 <_Z9makeMorsePcPbS0_+0x26c>
				}
				else
				{
					elementIndex = 0;
    5bcc:	10 92 dd 46 	sts	0x46DD, r1	; 0x8046dd <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    5bd0:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E1c>
    5bd4:	8c 33       	cpi	r24, 0x3C	; 60
    5bd6:	21 f4       	brne	.+8      	; 0x5be0 <_Z9makeMorsePcPbS0_+0x27c>
		{
			holdKeyDown = true;
    5bd8:	81 e0       	ldi	r24, 0x01	; 1
    5bda:	80 93 d5 46 	sts	0x46D5, r24	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    5bde:	02 c0       	rjmp	.+4      	; 0x5be4 <_Z9makeMorsePcPbS0_+0x280>
		}
		else
		{
			holdKeyDown = false;
    5be0:	10 92 d5 46 	sts	0x46D5, r1	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
		}
	}

	if(finished)
    5be4:	8f 81       	ldd	r24, Y+7	; 0x07
    5be6:	98 85       	ldd	r25, Y+8	; 0x08
    5be8:	89 2b       	or	r24, r25
    5bea:	31 f0       	breq	.+12     	; 0x5bf8 <_Z9makeMorsePcPbS0_+0x294>
	{
		*finished = completedString;
    5bec:	20 91 df 46 	lds	r18, 0x46DF	; 0x8046df <_ZZ9makeMorsePcPbS0_E15completedString>
    5bf0:	8f 81       	ldd	r24, Y+7	; 0x07
    5bf2:	98 85       	ldd	r25, Y+8	; 0x08
    5bf4:	fc 01       	movw	r30, r24
    5bf6:	20 83       	st	Z, r18
	}

	if(holdKeyDown)
    5bf8:	80 91 d5 46 	lds	r24, 0x46D5	; 0x8046d5 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    5bfc:	88 23       	and	r24, r24
    5bfe:	11 f0       	breq	.+4      	; 0x5c04 <_Z9makeMorsePcPbS0_+0x2a0>
	{
		return(true);
    5c00:	81 e0       	ldi	r24, 0x01	; 1
    5c02:	02 c0       	rjmp	.+4      	; 0x5c08 <_Z9makeMorsePcPbS0_+0x2a4>
	}
	else
	{
		return( carrierOn);
    5c04:	80 91 e0 46 	lds	r24, 0x46E0	; 0x8046e0 <_ZZ9makeMorsePcPbS0_E9carrierOn>
	}
}
    5c08:	28 96       	adiw	r28, 0x08	; 8
    5c0a:	cd bf       	out	0x3d, r28	; 61
    5c0c:	de bf       	out	0x3e, r29	; 62
    5c0e:	df 91       	pop	r29
    5c10:	cf 91       	pop	r28
    5c12:	08 95       	ret

00005c14 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    5c14:	cf 93       	push	r28
    5c16:	df 93       	push	r29
    5c18:	cd b7       	in	r28, 0x3d	; 61
    5c1a:	de b7       	in	r29, 0x3e	; 62
    5c1c:	2b 97       	sbiw	r28, 0x0b	; 11
    5c1e:	cd bf       	out	0x3d, r28	; 61
    5c20:	de bf       	out	0x3e, r29	; 62
    5c22:	88 87       	std	Y+8, r24	; 0x08
    5c24:	99 87       	std	Y+9, r25	; 0x09
    5c26:	6a 87       	std	Y+10, r22	; 0x0a
    5c28:	7b 87       	std	Y+11, r23	; 0x0b
	uint8_t elements = 0;
    5c2a:	19 82       	std	Y+1, r1	; 0x01
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    5c2c:	1a 82       	std	Y+2, r1	; 0x02
    5c2e:	1b 82       	std	Y+3, r1	; 0x03
    5c30:	8a 81       	ldd	r24, Y+2	; 0x02
    5c32:	9b 81       	ldd	r25, Y+3	; 0x03
    5c34:	44 97       	sbiw	r24, 0x14	; 20
    5c36:	2c f5       	brge	.+74     	; 0x5c82 <_Z26timeRequiredToSendStrAtWPMPcj+0x6e>
	{
		c = str[i];
    5c38:	8a 81       	ldd	r24, Y+2	; 0x02
    5c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    5c3c:	28 85       	ldd	r18, Y+8	; 0x08
    5c3e:	39 85       	ldd	r19, Y+9	; 0x09
    5c40:	82 0f       	add	r24, r18
    5c42:	93 1f       	adc	r25, r19
    5c44:	fc 01       	movw	r30, r24
    5c46:	80 81       	ld	r24, Z
    5c48:	8c 83       	std	Y+4, r24	; 0x04
		if(!c)
    5c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    5c4c:	88 23       	and	r24, r24
    5c4e:	c1 f0       	breq	.+48     	; 0x5c80 <_Z26timeRequiredToSendStrAtWPMPcj+0x6c>
		{
			break;
		}
		m = getMorseChar(c);
    5c50:	8c 81       	ldd	r24, Y+4	; 0x04
    5c52:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <_Z12getMorseCharc>
    5c56:	a8 2f       	mov	r26, r24
    5c58:	cb 01       	movw	r24, r22
    5c5a:	8d 83       	std	Y+5, r24	; 0x05
    5c5c:	9e 83       	std	Y+6, r25	; 0x06
    5c5e:	af 83       	std	Y+7, r26	; 0x07
		if(m.pattern < INTER_WORD_SPACE)
    5c60:	8d 81       	ldd	r24, Y+5	; 0x05
    5c62:	8d 3f       	cpi	r24, 0xFD	; 253
    5c64:	18 f4       	brcc	.+6      	; 0x5c6c <_Z26timeRequiredToSendStrAtWPMPcj+0x58>
		{
			elements += 3;
    5c66:	89 81       	ldd	r24, Y+1	; 0x01
    5c68:	8d 5f       	subi	r24, 0xFD	; 253
    5c6a:	89 83       	std	Y+1, r24	; 0x01
		}
		elements += m.lengthInElements;
    5c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    5c6e:	99 81       	ldd	r25, Y+1	; 0x01
    5c70:	89 0f       	add	r24, r25
    5c72:	89 83       	std	Y+1, r24	; 0x01
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    5c74:	8a 81       	ldd	r24, Y+2	; 0x02
    5c76:	9b 81       	ldd	r25, Y+3	; 0x03
    5c78:	01 96       	adiw	r24, 0x01	; 1
    5c7a:	8a 83       	std	Y+2, r24	; 0x02
    5c7c:	9b 83       	std	Y+3, r25	; 0x03
    5c7e:	d8 cf       	rjmp	.-80     	; 0x5c30 <_Z26timeRequiredToSendStrAtWPMPcj+0x1c>
	{
		c = str[i];
		if(!c)
		{
			break;
    5c80:	00 00       	nop
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    5c82:	89 81       	ldd	r24, Y+1	; 0x01
    5c84:	28 2f       	mov	r18, r24
    5c86:	30 e0       	ldi	r19, 0x00	; 0
    5c88:	80 eb       	ldi	r24, 0xB0	; 176
    5c8a:	94 e0       	ldi	r25, 0x04	; 4
    5c8c:	4a 85       	ldd	r20, Y+10	; 0x0a
    5c8e:	5b 85       	ldd	r21, Y+11	; 0x0b
    5c90:	ba 01       	movw	r22, r20
    5c92:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <__udivmodhi4>
    5c96:	cb 01       	movw	r24, r22
    5c98:	ac 01       	movw	r20, r24
    5c9a:	24 9f       	mul	r18, r20
    5c9c:	c0 01       	movw	r24, r0
    5c9e:	25 9f       	mul	r18, r21
    5ca0:	90 0d       	add	r25, r0
    5ca2:	34 9f       	mul	r19, r20
    5ca4:	90 0d       	add	r25, r0
    5ca6:	11 24       	eor	r1, r1
}
    5ca8:	2b 96       	adiw	r28, 0x0b	; 11
    5caa:	cd bf       	out	0x3d, r28	; 61
    5cac:	de bf       	out	0x3e, r29	; 62
    5cae:	df 91       	pop	r29
    5cb0:	cf 91       	pop	r28
    5cb2:	08 95       	ret

00005cb4 <_Z12getMorseCharc>:
 *  pattern = a sequence of up to 8 dit and dah symbols contained in an unsigned byte, sequentially read from LSB to MSB (first symbol is bit 0)
 *  lengthInSymbols = how many symbols (dits and dahs) the character contains; this is how many pattern bits are used to represent the character
 *  lengthInElements = how long (measured in "dit lengths") is the total character including all inter-symbol spaces.
 */
MorseCharacter getMorseChar(char c)
{
    5cb4:	cf 93       	push	r28
    5cb6:	df 93       	push	r29
    5cb8:	00 d0       	rcall	.+0      	; 0x5cba <_Z12getMorseCharc+0x6>
    5cba:	00 d0       	rcall	.+0      	; 0x5cbc <_Z12getMorseCharc+0x8>
    5cbc:	cd b7       	in	r28, 0x3d	; 61
    5cbe:	de b7       	in	r29, 0x3e	; 62
    5cc0:	8c 83       	std	Y+4, r24	; 0x04
	MorseCharacter morse;

	switch( c )
    5cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    5cc4:	88 2f       	mov	r24, r24
    5cc6:	90 e0       	ldi	r25, 0x00	; 0
    5cc8:	09 2e       	mov	r0, r25
    5cca:	00 0c       	add	r0, r0
    5ccc:	aa 0b       	sbc	r26, r26
    5cce:	bb 0b       	sbc	r27, r27
    5cd0:	40 e2       	ldi	r20, 0x20	; 32
    5cd2:	50 e0       	ldi	r21, 0x00	; 0
    5cd4:	2c e5       	ldi	r18, 0x5C	; 92
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	84 1b       	sub	r24, r20
    5cda:	95 0b       	sbc	r25, r21
    5cdc:	28 17       	cp	r18, r24
    5cde:	39 07       	cpc	r19, r25
    5ce0:	08 f4       	brcc	.+2      	; 0x5ce4 <_Z12getMorseCharc+0x30>
    5ce2:	8f c1       	rjmp	.+798    	; 0x6002 <_Z12getMorseCharc+0x34e>
    5ce4:	89 54       	subi	r24, 0x49	; 73
    5ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce8:	fc 01       	movw	r30, r24
    5cea:	0c 94 b9 45 	jmp	0x8b72	; 0x8b72 <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5cee:	82 e0       	ldi	r24, 0x02	; 2
    5cf0:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 2;
    5cf2:	82 e0       	ldi	r24, 0x02	; 2
    5cf4:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 5;
    5cf6:	85 e0       	ldi	r24, 0x05	; 5
    5cf8:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5cfa:	87 c1       	rjmp	.+782    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5cfc:	81 e0       	ldi	r24, 0x01	; 1
    5cfe:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5d00:	84 e0       	ldi	r24, 0x04	; 4
    5d02:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 9;
    5d04:	89 e0       	ldi	r24, 0x09	; 9
    5d06:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d08:	80 c1       	rjmp	.+768    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    5d0a:	85 e0       	ldi	r24, 0x05	; 5
    5d0c:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5d0e:	84 e0       	ldi	r24, 0x04	; 4
    5d10:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 11;
    5d12:	8b e0       	ldi	r24, 0x0B	; 11
    5d14:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d16:	79 c1       	rjmp	.+754    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5d18:	81 e0       	ldi	r24, 0x01	; 1
    5d1a:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 3;
    5d1c:	83 e0       	ldi	r24, 0x03	; 3
    5d1e:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 7;
    5d20:	87 e0       	ldi	r24, 0x07	; 7
    5d22:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d24:	72 c1       	rjmp	.+740    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5d26:	19 82       	std	Y+1, r1	; 0x01
			morse.lengthInSymbols = 1;
    5d28:	81 e0       	ldi	r24, 0x01	; 1
    5d2a:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 1;
    5d2c:	81 e0       	ldi	r24, 0x01	; 1
    5d2e:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d30:	6c c1       	rjmp	.+728    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    5d32:	84 e0       	ldi	r24, 0x04	; 4
    5d34:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5d36:	84 e0       	ldi	r24, 0x04	; 4
    5d38:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 9;
    5d3a:	89 e0       	ldi	r24, 0x09	; 9
    5d3c:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d3e:	65 c1       	rjmp	.+714    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5d40:	83 e0       	ldi	r24, 0x03	; 3
    5d42:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 3;
    5d44:	83 e0       	ldi	r24, 0x03	; 3
    5d46:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 9;
    5d48:	89 e0       	ldi	r24, 0x09	; 9
    5d4a:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d4c:	5e c1       	rjmp	.+700    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5d4e:	19 82       	std	Y+1, r1	; 0x01
			morse.lengthInSymbols = 4;
    5d50:	84 e0       	ldi	r24, 0x04	; 4
    5d52:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 7;
    5d54:	87 e0       	ldi	r24, 0x07	; 7
    5d56:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d58:	58 c1       	rjmp	.+688    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5d5a:	19 82       	std	Y+1, r1	; 0x01
			morse.lengthInSymbols = 2;
    5d5c:	82 e0       	ldi	r24, 0x02	; 2
    5d5e:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 3;
    5d60:	83 e0       	ldi	r24, 0x03	; 3
    5d62:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d64:	52 c1       	rjmp	.+676    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    5d66:	8e e0       	ldi	r24, 0x0E	; 14
    5d68:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5d6a:	84 e0       	ldi	r24, 0x04	; 4
    5d6c:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 13;
    5d6e:	8d e0       	ldi	r24, 0x0D	; 13
    5d70:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d72:	4b c1       	rjmp	.+662    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    5d74:	85 e0       	ldi	r24, 0x05	; 5
    5d76:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 3;
    5d78:	83 e0       	ldi	r24, 0x03	; 3
    5d7a:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 9;
    5d7c:	89 e0       	ldi	r24, 0x09	; 9
    5d7e:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d80:	44 c1       	rjmp	.+648    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5d82:	82 e0       	ldi	r24, 0x02	; 2
    5d84:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5d86:	84 e0       	ldi	r24, 0x04	; 4
    5d88:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 9;
    5d8a:	89 e0       	ldi	r24, 0x09	; 9
    5d8c:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d8e:	3d c1       	rjmp	.+634    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5d90:	83 e0       	ldi	r24, 0x03	; 3
    5d92:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 2;
    5d94:	82 e0       	ldi	r24, 0x02	; 2
    5d96:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 7;
    5d98:	87 e0       	ldi	r24, 0x07	; 7
    5d9a:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5d9c:	36 c1       	rjmp	.+620    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5d9e:	81 e0       	ldi	r24, 0x01	; 1
    5da0:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 2;
    5da2:	82 e0       	ldi	r24, 0x02	; 2
    5da4:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 5;
    5da6:	85 e0       	ldi	r24, 0x05	; 5
    5da8:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5daa:	2f c1       	rjmp	.+606    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5dac:	87 e0       	ldi	r24, 0x07	; 7
    5dae:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 3;
    5db0:	83 e0       	ldi	r24, 0x03	; 3
    5db2:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 11;
    5db4:	8b e0       	ldi	r24, 0x0B	; 11
    5db6:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5db8:	28 c1       	rjmp	.+592    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    5dba:	86 e0       	ldi	r24, 0x06	; 6
    5dbc:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5dbe:	84 e0       	ldi	r24, 0x04	; 4
    5dc0:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 11;
    5dc2:	8b e0       	ldi	r24, 0x0B	; 11
    5dc4:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5dc6:	21 c1       	rjmp	.+578    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    5dc8:	8b e0       	ldi	r24, 0x0B	; 11
    5dca:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5dcc:	84 e0       	ldi	r24, 0x04	; 4
    5dce:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 13;
    5dd0:	8d e0       	ldi	r24, 0x0D	; 13
    5dd2:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5dd4:	1a c1       	rjmp	.+564    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5dd6:	82 e0       	ldi	r24, 0x02	; 2
    5dd8:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 3;
    5dda:	83 e0       	ldi	r24, 0x03	; 3
    5ddc:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 7;
    5dde:	87 e0       	ldi	r24, 0x07	; 7
    5de0:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5de2:	13 c1       	rjmp	.+550    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5de4:	19 82       	std	Y+1, r1	; 0x01
			morse.lengthInSymbols = 3;
    5de6:	83 e0       	ldi	r24, 0x03	; 3
    5de8:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 5;
    5dea:	85 e0       	ldi	r24, 0x05	; 5
    5dec:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5dee:	0d c1       	rjmp	.+538    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5df0:	81 e0       	ldi	r24, 0x01	; 1
    5df2:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 1;
    5df4:	81 e0       	ldi	r24, 0x01	; 1
    5df6:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 3;
    5df8:	83 e0       	ldi	r24, 0x03	; 3
    5dfa:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5dfc:	06 c1       	rjmp	.+524    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    5dfe:	84 e0       	ldi	r24, 0x04	; 4
    5e00:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 3;
    5e02:	83 e0       	ldi	r24, 0x03	; 3
    5e04:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 7;
    5e06:	87 e0       	ldi	r24, 0x07	; 7
    5e08:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e0a:	ff c0       	rjmp	.+510    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    5e0c:	88 e0       	ldi	r24, 0x08	; 8
    5e0e:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5e10:	84 e0       	ldi	r24, 0x04	; 4
    5e12:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 9;
    5e14:	89 e0       	ldi	r24, 0x09	; 9
    5e16:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e18:	f8 c0       	rjmp	.+496    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    5e1a:	86 e0       	ldi	r24, 0x06	; 6
    5e1c:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 3;
    5e1e:	83 e0       	ldi	r24, 0x03	; 3
    5e20:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 9;
    5e22:	89 e0       	ldi	r24, 0x09	; 9
    5e24:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e26:	f1 c0       	rjmp	.+482    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    5e28:	89 e0       	ldi	r24, 0x09	; 9
    5e2a:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5e2c:	84 e0       	ldi	r24, 0x04	; 4
    5e2e:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 11;
    5e30:	8b e0       	ldi	r24, 0x0B	; 11
    5e32:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e34:	ea c0       	rjmp	.+468    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5e36:	8d e0       	ldi	r24, 0x0D	; 13
    5e38:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5e3a:	84 e0       	ldi	r24, 0x04	; 4
    5e3c:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 13;
    5e3e:	8d e0       	ldi	r24, 0x0D	; 13
    5e40:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e42:	e3 c0       	rjmp	.+454    	; 0x600a <_Z12getMorseCharc+0x356>

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5e44:	83 e0       	ldi	r24, 0x03	; 3
    5e46:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 4;
    5e48:	84 e0       	ldi	r24, 0x04	; 4
    5e4a:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 11;
    5e4c:	8b e0       	ldi	r24, 0x0B	; 11
    5e4e:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e50:	dc c0       	rjmp	.+440    	; 0x600a <_Z12getMorseCharc+0x356>

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    5e52:	8f e1       	ldi	r24, 0x1F	; 31
    5e54:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5e56:	85 e0       	ldi	r24, 0x05	; 5
    5e58:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 19;
    5e5a:	83 e1       	ldi	r24, 0x13	; 19
    5e5c:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e5e:	d5 c0       	rjmp	.+426    	; 0x600a <_Z12getMorseCharc+0x356>

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5e60:	8e e1       	ldi	r24, 0x1E	; 30
    5e62:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5e64:	85 e0       	ldi	r24, 0x05	; 5
    5e66:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 17;
    5e68:	81 e1       	ldi	r24, 0x11	; 17
    5e6a:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e6c:	ce c0       	rjmp	.+412    	; 0x600a <_Z12getMorseCharc+0x356>

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    5e6e:	8c e1       	ldi	r24, 0x1C	; 28
    5e70:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5e72:	85 e0       	ldi	r24, 0x05	; 5
    5e74:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 15;
    5e76:	8f e0       	ldi	r24, 0x0F	; 15
    5e78:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e7a:	c7 c0       	rjmp	.+398    	; 0x600a <_Z12getMorseCharc+0x356>

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    5e7c:	88 e1       	ldi	r24, 0x18	; 24
    5e7e:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5e80:	85 e0       	ldi	r24, 0x05	; 5
    5e82:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 13;
    5e84:	8d e0       	ldi	r24, 0x0D	; 13
    5e86:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e88:	c0 c0       	rjmp	.+384    	; 0x600a <_Z12getMorseCharc+0x356>

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    5e8a:	80 e1       	ldi	r24, 0x10	; 16
    5e8c:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5e8e:	85 e0       	ldi	r24, 0x05	; 5
    5e90:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 11;
    5e92:	8b e0       	ldi	r24, 0x0B	; 11
    5e94:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5e96:	b9 c0       	rjmp	.+370    	; 0x600a <_Z12getMorseCharc+0x356>

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5e98:	19 82       	std	Y+1, r1	; 0x01
			morse.lengthInSymbols = 5;
    5e9a:	85 e0       	ldi	r24, 0x05	; 5
    5e9c:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 9;
    5e9e:	89 e0       	ldi	r24, 0x09	; 9
    5ea0:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5ea2:	b3 c0       	rjmp	.+358    	; 0x600a <_Z12getMorseCharc+0x356>

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5ea4:	81 e0       	ldi	r24, 0x01	; 1
    5ea6:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5ea8:	85 e0       	ldi	r24, 0x05	; 5
    5eaa:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 11;
    5eac:	8b e0       	ldi	r24, 0x0B	; 11
    5eae:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5eb0:	ac c0       	rjmp	.+344    	; 0x600a <_Z12getMorseCharc+0x356>

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5eb2:	83 e0       	ldi	r24, 0x03	; 3
    5eb4:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5eb6:	85 e0       	ldi	r24, 0x05	; 5
    5eb8:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 13;
    5eba:	8d e0       	ldi	r24, 0x0D	; 13
    5ebc:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5ebe:	a5 c0       	rjmp	.+330    	; 0x600a <_Z12getMorseCharc+0x356>

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5ec0:	87 e0       	ldi	r24, 0x07	; 7
    5ec2:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5ec4:	85 e0       	ldi	r24, 0x05	; 5
    5ec6:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 15;
    5ec8:	8f e0       	ldi	r24, 0x0F	; 15
    5eca:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5ecc:	9e c0       	rjmp	.+316    	; 0x600a <_Z12getMorseCharc+0x356>

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    5ece:	8f e0       	ldi	r24, 0x0F	; 15
    5ed0:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5ed2:	85 e0       	ldi	r24, 0x05	; 5
    5ed4:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 17;
    5ed6:	81 e1       	ldi	r24, 0x11	; 17
    5ed8:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5eda:	97 c0       	rjmp	.+302    	; 0x600a <_Z12getMorseCharc+0x356>

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    5edc:	8a e2       	ldi	r24, 0x2A	; 42
    5ede:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5ee0:	86 e0       	ldi	r24, 0x06	; 6
    5ee2:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 17;
    5ee4:	81 e1       	ldi	r24, 0x11	; 17
    5ee6:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5ee8:	90 c0       	rjmp	.+288    	; 0x600a <_Z12getMorseCharc+0x356>

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    5eea:	83 e3       	ldi	r24, 0x33	; 51
    5eec:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5eee:	86 e0       	ldi	r24, 0x06	; 6
    5ef0:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 19;
    5ef2:	83 e1       	ldi	r24, 0x13	; 19
    5ef4:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5ef6:	89 c0       	rjmp	.+274    	; 0x600a <_Z12getMorseCharc+0x356>

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    5ef8:	8c e0       	ldi	r24, 0x0C	; 12
    5efa:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5efc:	86 e0       	ldi	r24, 0x06	; 6
    5efe:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 15;
    5f00:	8f e0       	ldi	r24, 0x0F	; 15
    5f02:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f04:	82 c0       	rjmp	.+260    	; 0x600a <_Z12getMorseCharc+0x356>

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5f06:	8e e1       	ldi	r24, 0x1E	; 30
    5f08:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5f0a:	86 e0       	ldi	r24, 0x06	; 6
    5f0c:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 19;
    5f0e:	83 e1       	ldi	r24, 0x13	; 19
    5f10:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f12:	7b c0       	rjmp	.+246    	; 0x600a <_Z12getMorseCharc+0x356>

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    5f14:	85 e3       	ldi	r24, 0x35	; 53
    5f16:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5f18:	86 e0       	ldi	r24, 0x06	; 6
    5f1a:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 19;
    5f1c:	83 e1       	ldi	r24, 0x13	; 19
    5f1e:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f20:	74 c0       	rjmp	.+232    	; 0x600a <_Z12getMorseCharc+0x356>

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    5f22:	89 e0       	ldi	r24, 0x09	; 9
    5f24:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5f26:	85 e0       	ldi	r24, 0x05	; 5
    5f28:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 13;
    5f2a:	8d e0       	ldi	r24, 0x0D	; 13
    5f2c:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f2e:	6d c0       	rjmp	.+218    	; 0x600a <_Z12getMorseCharc+0x356>

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5f30:	8d e0       	ldi	r24, 0x0D	; 13
    5f32:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5f34:	85 e0       	ldi	r24, 0x05	; 5
    5f36:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 15;
    5f38:	8f e0       	ldi	r24, 0x0F	; 15
    5f3a:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f3c:	66 c0       	rjmp	.+204    	; 0x600a <_Z12getMorseCharc+0x356>

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    5f3e:	8d e2       	ldi	r24, 0x2D	; 45
    5f40:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5f42:	86 e0       	ldi	r24, 0x06	; 6
    5f44:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 19;
    5f46:	83 e1       	ldi	r24, 0x13	; 19
    5f48:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f4a:	5f c0       	rjmp	.+190    	; 0x600a <_Z12getMorseCharc+0x356>

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5f4c:	82 e0       	ldi	r24, 0x02	; 2
    5f4e:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5f50:	85 e0       	ldi	r24, 0x05	; 5
    5f52:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 11;
    5f54:	8b e0       	ldi	r24, 0x0B	; 11
    5f56:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f58:	58 c0       	rjmp	.+176    	; 0x600a <_Z12getMorseCharc+0x356>

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5f5a:	87 e0       	ldi	r24, 0x07	; 7
    5f5c:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5f5e:	86 e0       	ldi	r24, 0x06	; 6
    5f60:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 17;
    5f62:	81 e1       	ldi	r24, 0x11	; 17
    5f64:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f66:	51 c0       	rjmp	.+162    	; 0x600a <_Z12getMorseCharc+0x356>

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    5f68:	85 e1       	ldi	r24, 0x15	; 21
    5f6a:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5f6c:	86 e0       	ldi	r24, 0x06	; 6
    5f6e:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 12;
    5f70:	8c e0       	ldi	r24, 0x0C	; 12
    5f72:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f74:	4a c0       	rjmp	.+148    	; 0x600a <_Z12getMorseCharc+0x356>

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    5f76:	81 e1       	ldi	r24, 0x11	; 17
    5f78:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5f7a:	85 e0       	ldi	r24, 0x05	; 5
    5f7c:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 13;
    5f7e:	8d e0       	ldi	r24, 0x0D	; 13
    5f80:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f82:	43 c0       	rjmp	.+134    	; 0x600a <_Z12getMorseCharc+0x356>

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    5f84:	8a e0       	ldi	r24, 0x0A	; 10
    5f86:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5f88:	85 e0       	ldi	r24, 0x05	; 5
    5f8a:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 13;
    5f8c:	8d e0       	ldi	r24, 0x0D	; 13
    5f8e:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f90:	3c c0       	rjmp	.+120    	; 0x600a <_Z12getMorseCharc+0x356>

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    5f92:	81 e2       	ldi	r24, 0x21	; 33
    5f94:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5f96:	86 e0       	ldi	r24, 0x06	; 6
    5f98:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 15;
    5f9a:	8f e0       	ldi	r24, 0x0F	; 15
    5f9c:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5f9e:	35 c0       	rjmp	.+106    	; 0x600a <_Z12getMorseCharc+0x356>

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    5fa0:	8c e2       	ldi	r24, 0x2C	; 44
    5fa2:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5fa4:	86 e0       	ldi	r24, 0x06	; 6
    5fa6:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 17;
    5fa8:	81 e1       	ldi	r24, 0x11	; 17
    5faa:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5fac:	2e c0       	rjmp	.+92     	; 0x600a <_Z12getMorseCharc+0x356>

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    5fae:	82 e1       	ldi	r24, 0x12	; 18
    5fb0:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5fb2:	86 e0       	ldi	r24, 0x06	; 6
    5fb4:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 15;
    5fb6:	8f e0       	ldi	r24, 0x0F	; 15
    5fb8:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5fba:	27 c0       	rjmp	.+78     	; 0x600a <_Z12getMorseCharc+0x356>

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    5fbc:	88 e4       	ldi	r24, 0x48	; 72
    5fbe:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 7;
    5fc0:	87 e0       	ldi	r24, 0x07	; 7
    5fc2:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 17;
    5fc4:	81 e1       	ldi	r24, 0x11	; 17
    5fc6:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5fc8:	20 c0       	rjmp	.+64     	; 0x600a <_Z12getMorseCharc+0x356>

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    5fca:	86 e1       	ldi	r24, 0x16	; 22
    5fcc:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 6;
    5fce:	86 e0       	ldi	r24, 0x06	; 6
    5fd0:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 17;
    5fd2:	81 e1       	ldi	r24, 0x11	; 17
    5fd4:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5fd6:	19 c0       	rjmp	.+50     	; 0x600a <_Z12getMorseCharc+0x356>

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    5fd8:	8f ef       	ldi	r24, 0xFF	; 255
    5fda:	89 83       	std	Y+1, r24	; 0x01
		  morse.lengthInSymbols = 7;
    5fdc:	87 e0       	ldi	r24, 0x07	; 7
    5fde:	8a 83       	std	Y+2, r24	; 0x02
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    5fe0:	84 e0       	ldi	r24, 0x04	; 4
    5fe2:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5fe4:	12 c0       	rjmp	.+36     	; 0x600a <_Z12getMorseCharc+0x356>

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    5fe6:	8e ef       	ldi	r24, 0xFE	; 254
    5fe8:	89 83       	std	Y+1, r24	; 0x01
		  morse.lengthInSymbols = 7;
    5fea:	87 e0       	ldi	r24, 0x07	; 7
    5fec:	8a 83       	std	Y+2, r24	; 0x02
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    5fee:	87 e0       	ldi	r24, 0x07	; 7
    5ff0:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    5ff2:	0b c0       	rjmp	.+22     	; 0x600a <_Z12getMorseCharc+0x356>

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    5ff4:	8f e1       	ldi	r24, 0x1F	; 31
    5ff6:	89 83       	std	Y+1, r24	; 0x01
			morse.lengthInSymbols = 5;
    5ff8:	85 e0       	ldi	r24, 0x05	; 5
    5ffa:	8a 83       	std	Y+2, r24	; 0x02
			morse.lengthInElements = 19;
    5ffc:	83 e1       	ldi	r24, 0x13	; 19
    5ffe:	8b 83       	std	Y+3, r24	; 0x03
		}
		break;
    6000:	04 c0       	rjmp	.+8      	; 0x600a <_Z12getMorseCharc+0x356>

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    6002:	19 82       	std	Y+1, r1	; 0x01
			morse.lengthInSymbols = 0;
    6004:	1a 82       	std	Y+2, r1	; 0x02
			morse.lengthInElements = 0;
    6006:	1b 82       	std	Y+3, r1	; 0x03
		}
		break;
    6008:	00 00       	nop
	}

	return( morse);
    600a:	89 81       	ldd	r24, Y+1	; 0x01
    600c:	9a 81       	ldd	r25, Y+2	; 0x02
    600e:	ab 81       	ldd	r26, Y+3	; 0x03
}
    6010:	bc 01       	movw	r22, r24
    6012:	8a 2f       	mov	r24, r26
    6014:	24 96       	adiw	r28, 0x04	; 4
    6016:	cd bf       	out	0x3d, r28	; 61
    6018:	de bf       	out	0x3e, r29	; 62
    601a:	df 91       	pop	r29
    601c:	cf 91       	pop	r28
    601e:	08 95       	ret

00006020 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    6020:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    6022:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    6024:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    6026:	40 83       	st	Z, r20
	ret                             // Return to caller
    6028:	08 95       	ret

0000602a <nextFullSBTxBuffer>:

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
	{
		tx_buffer[bufferIndex][0] = '\0';
	}
}
    602a:	cf 93       	push	r28
    602c:	df 93       	push	r29
    602e:	00 d0       	rcall	.+0      	; 0x6030 <nextFullSBTxBuffer+0x6>
    6030:	cd b7       	in	r28, 0x3d	; 61
    6032:	de b7       	in	r29, 0x3e	; 62
    6034:	81 e0       	ldi	r24, 0x01	; 1
    6036:	89 83       	std	Y+1, r24	; 0x01
    6038:	1a 82       	std	Y+2, r1	; 0x02
    603a:	80 91 0d 48 	lds	r24, 0x480D	; 0x80480d <_ZZ18nextFullSBTxBufferE11bufferIndex>
    603e:	28 2f       	mov	r18, r24
    6040:	30 e0       	ldi	r19, 0x00	; 0
    6042:	49 e2       	ldi	r20, 0x29	; 41
    6044:	42 9f       	mul	r20, r18
    6046:	c0 01       	movw	r24, r0
    6048:	43 9f       	mul	r20, r19
    604a:	90 0d       	add	r25, r0
    604c:	11 24       	eor	r1, r1
    604e:	8c 5e       	subi	r24, 0xEC	; 236
    6050:	98 4b       	sbci	r25, 0xB8	; 184
    6052:	fc 01       	movw	r30, r24
    6054:	90 81       	ld	r25, Z
    6056:	81 e0       	ldi	r24, 0x01	; 1
    6058:	99 23       	and	r25, r25
    605a:	09 f0       	breq	.+2      	; 0x605e <nextFullSBTxBuffer+0x34>
    605c:	80 e0       	ldi	r24, 0x00	; 0
    605e:	88 23       	and	r24, r24
    6060:	c1 f0       	breq	.+48     	; 0x6092 <nextFullSBTxBuffer+0x68>
    6062:	8a 81       	ldd	r24, Y+2	; 0x02
    6064:	8f 5f       	subi	r24, 0xFF	; 255
    6066:	8a 83       	std	Y+2, r24	; 0x02
    6068:	81 e0       	ldi	r24, 0x01	; 1
    606a:	9a 81       	ldd	r25, Y+2	; 0x02
    606c:	93 30       	cpi	r25, 0x03	; 3
    606e:	08 f4       	brcc	.+2      	; 0x6072 <nextFullSBTxBuffer+0x48>
    6070:	80 e0       	ldi	r24, 0x00	; 0
    6072:	88 23       	and	r24, r24
    6074:	11 f0       	breq	.+4      	; 0x607a <nextFullSBTxBuffer+0x50>
    6076:	19 82       	std	Y+1, r1	; 0x01
    6078:	0c c0       	rjmp	.+24     	; 0x6092 <nextFullSBTxBuffer+0x68>
    607a:	80 91 0d 48 	lds	r24, 0x480D	; 0x80480d <_ZZ18nextFullSBTxBufferE11bufferIndex>
    607e:	8f 5f       	subi	r24, 0xFF	; 255
    6080:	80 93 0d 48 	sts	0x480D, r24	; 0x80480d <_ZZ18nextFullSBTxBufferE11bufferIndex>
    6084:	80 91 0d 48 	lds	r24, 0x480D	; 0x80480d <_ZZ18nextFullSBTxBufferE11bufferIndex>
    6088:	83 30       	cpi	r24, 0x03	; 3
    608a:	b8 f2       	brcs	.-82     	; 0x603a <nextFullSBTxBuffer+0x10>
    608c:	10 92 0d 48 	sts	0x480D, r1	; 0x80480d <_ZZ18nextFullSBTxBufferE11bufferIndex>
    6090:	d4 cf       	rjmp	.-88     	; 0x603a <nextFullSBTxBuffer+0x10>
    6092:	89 81       	ldd	r24, Y+1	; 0x01
    6094:	88 23       	and	r24, r24
    6096:	69 f0       	breq	.+26     	; 0x60b2 <nextFullSBTxBuffer+0x88>
    6098:	80 91 0d 48 	lds	r24, 0x480D	; 0x80480d <_ZZ18nextFullSBTxBufferE11bufferIndex>
    609c:	28 2f       	mov	r18, r24
    609e:	30 e0       	ldi	r19, 0x00	; 0
    60a0:	49 e2       	ldi	r20, 0x29	; 41
    60a2:	42 9f       	mul	r20, r18
    60a4:	c0 01       	movw	r24, r0
    60a6:	43 9f       	mul	r20, r19
    60a8:	90 0d       	add	r25, r0
    60aa:	11 24       	eor	r1, r1
    60ac:	8c 5e       	subi	r24, 0xEC	; 236
    60ae:	98 4b       	sbci	r25, 0xB8	; 184
    60b0:	02 c0       	rjmp	.+4      	; 0x60b6 <nextFullSBTxBuffer+0x8c>
    60b2:	80 e0       	ldi	r24, 0x00	; 0
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	0f 90       	pop	r0
    60b8:	0f 90       	pop	r0
    60ba:	df 91       	pop	r29
    60bc:	cf 91       	pop	r28
    60be:	08 95       	ret

000060c0 <nextEmptySBTxBuffer>:
    60c0:	cf 93       	push	r28
    60c2:	df 93       	push	r29
    60c4:	00 d0       	rcall	.+0      	; 0x60c6 <nextEmptySBTxBuffer+0x6>
    60c6:	cd b7       	in	r28, 0x3d	; 61
    60c8:	de b7       	in	r29, 0x3e	; 62
    60ca:	81 e0       	ldi	r24, 0x01	; 1
    60cc:	89 83       	std	Y+1, r24	; 0x01
    60ce:	1a 82       	std	Y+2, r1	; 0x02
    60d0:	80 91 0e 48 	lds	r24, 0x480E	; 0x80480e <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    60d4:	28 2f       	mov	r18, r24
    60d6:	30 e0       	ldi	r19, 0x00	; 0
    60d8:	49 e2       	ldi	r20, 0x29	; 41
    60da:	42 9f       	mul	r20, r18
    60dc:	c0 01       	movw	r24, r0
    60de:	43 9f       	mul	r20, r19
    60e0:	90 0d       	add	r25, r0
    60e2:	11 24       	eor	r1, r1
    60e4:	8c 5e       	subi	r24, 0xEC	; 236
    60e6:	98 4b       	sbci	r25, 0xB8	; 184
    60e8:	fc 01       	movw	r30, r24
    60ea:	90 81       	ld	r25, Z
    60ec:	81 e0       	ldi	r24, 0x01	; 1
    60ee:	99 23       	and	r25, r25
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <nextEmptySBTxBuffer+0x34>
    60f2:	80 e0       	ldi	r24, 0x00	; 0
    60f4:	88 23       	and	r24, r24
    60f6:	c1 f0       	breq	.+48     	; 0x6128 <nextEmptySBTxBuffer+0x68>
    60f8:	8a 81       	ldd	r24, Y+2	; 0x02
    60fa:	8f 5f       	subi	r24, 0xFF	; 255
    60fc:	8a 83       	std	Y+2, r24	; 0x02
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	9a 81       	ldd	r25, Y+2	; 0x02
    6102:	93 30       	cpi	r25, 0x03	; 3
    6104:	08 f4       	brcc	.+2      	; 0x6108 <nextEmptySBTxBuffer+0x48>
    6106:	80 e0       	ldi	r24, 0x00	; 0
    6108:	88 23       	and	r24, r24
    610a:	11 f0       	breq	.+4      	; 0x6110 <nextEmptySBTxBuffer+0x50>
    610c:	19 82       	std	Y+1, r1	; 0x01
    610e:	0c c0       	rjmp	.+24     	; 0x6128 <nextEmptySBTxBuffer+0x68>
    6110:	80 91 0e 48 	lds	r24, 0x480E	; 0x80480e <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    6114:	8f 5f       	subi	r24, 0xFF	; 255
    6116:	80 93 0e 48 	sts	0x480E, r24	; 0x80480e <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    611a:	80 91 0e 48 	lds	r24, 0x480E	; 0x80480e <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    611e:	83 30       	cpi	r24, 0x03	; 3
    6120:	b8 f2       	brcs	.-82     	; 0x60d0 <nextEmptySBTxBuffer+0x10>
    6122:	10 92 0e 48 	sts	0x480E, r1	; 0x80480e <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    6126:	d4 cf       	rjmp	.-88     	; 0x60d0 <nextEmptySBTxBuffer+0x10>
    6128:	89 81       	ldd	r24, Y+1	; 0x01
    612a:	88 23       	and	r24, r24
    612c:	69 f0       	breq	.+26     	; 0x6148 <nextEmptySBTxBuffer+0x88>
    612e:	80 91 0e 48 	lds	r24, 0x480E	; 0x80480e <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    6132:	28 2f       	mov	r18, r24
    6134:	30 e0       	ldi	r19, 0x00	; 0
    6136:	49 e2       	ldi	r20, 0x29	; 41
    6138:	42 9f       	mul	r20, r18
    613a:	c0 01       	movw	r24, r0
    613c:	43 9f       	mul	r20, r19
    613e:	90 0d       	add	r25, r0
    6140:	11 24       	eor	r1, r1
    6142:	8c 5e       	subi	r24, 0xEC	; 236
    6144:	98 4b       	sbci	r25, 0xB8	; 184
    6146:	02 c0       	rjmp	.+4      	; 0x614c <nextEmptySBTxBuffer+0x8c>
    6148:	80 e0       	ldi	r24, 0x00	; 0
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	0f 90       	pop	r0
    614e:	0f 90       	pop	r0
    6150:	df 91       	pop	r29
    6152:	cf 91       	pop	r28
    6154:	08 95       	ret

00006156 <nextEmptySBRxBuffer>:
    6156:	cf 93       	push	r28
    6158:	df 93       	push	r29
    615a:	00 d0       	rcall	.+0      	; 0x615c <nextEmptySBRxBuffer+0x6>
    615c:	cd b7       	in	r28, 0x3d	; 61
    615e:	de b7       	in	r29, 0x3e	; 62
    6160:	81 e0       	ldi	r24, 0x01	; 1
    6162:	89 83       	std	Y+1, r24	; 0x01
    6164:	1a 82       	std	Y+2, r1	; 0x02
    6166:	80 91 0f 48 	lds	r24, 0x480F	; 0x80480f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    616a:	28 2f       	mov	r18, r24
    616c:	30 e0       	ldi	r19, 0x00	; 0
    616e:	4f e3       	ldi	r20, 0x3F	; 63
    6170:	42 9f       	mul	r20, r18
    6172:	c0 01       	movw	r24, r0
    6174:	43 9f       	mul	r20, r19
    6176:	90 0d       	add	r25, r0
    6178:	11 24       	eor	r1, r1
    617a:	80 57       	subi	r24, 0x70	; 112
    617c:	98 4b       	sbci	r25, 0xB8	; 184
    617e:	fc 01       	movw	r30, r24
    6180:	80 81       	ld	r24, Z
    6182:	91 81       	ldd	r25, Z+1	; 0x01
    6184:	21 e0       	ldi	r18, 0x01	; 1
    6186:	89 2b       	or	r24, r25
    6188:	09 f4       	brne	.+2      	; 0x618c <nextEmptySBRxBuffer+0x36>
    618a:	20 e0       	ldi	r18, 0x00	; 0
    618c:	22 23       	and	r18, r18
    618e:	c1 f0       	breq	.+48     	; 0x61c0 <nextEmptySBRxBuffer+0x6a>
    6190:	8a 81       	ldd	r24, Y+2	; 0x02
    6192:	8f 5f       	subi	r24, 0xFF	; 255
    6194:	8a 83       	std	Y+2, r24	; 0x02
    6196:	81 e0       	ldi	r24, 0x01	; 1
    6198:	9a 81       	ldd	r25, Y+2	; 0x02
    619a:	92 30       	cpi	r25, 0x02	; 2
    619c:	08 f4       	brcc	.+2      	; 0x61a0 <nextEmptySBRxBuffer+0x4a>
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	88 23       	and	r24, r24
    61a2:	11 f0       	breq	.+4      	; 0x61a8 <nextEmptySBRxBuffer+0x52>
    61a4:	19 82       	std	Y+1, r1	; 0x01
    61a6:	0c c0       	rjmp	.+24     	; 0x61c0 <nextEmptySBRxBuffer+0x6a>
    61a8:	80 91 0f 48 	lds	r24, 0x480F	; 0x80480f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    61ac:	8f 5f       	subi	r24, 0xFF	; 255
    61ae:	80 93 0f 48 	sts	0x480F, r24	; 0x80480f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    61b2:	80 91 0f 48 	lds	r24, 0x480F	; 0x80480f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    61b6:	82 30       	cpi	r24, 0x02	; 2
    61b8:	b0 f2       	brcs	.-84     	; 0x6166 <nextEmptySBRxBuffer+0x10>
    61ba:	10 92 0f 48 	sts	0x480F, r1	; 0x80480f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    61be:	d3 cf       	rjmp	.-90     	; 0x6166 <nextEmptySBRxBuffer+0x10>
    61c0:	89 81       	ldd	r24, Y+1	; 0x01
    61c2:	88 23       	and	r24, r24
    61c4:	69 f0       	breq	.+26     	; 0x61e0 <nextEmptySBRxBuffer+0x8a>
    61c6:	80 91 0f 48 	lds	r24, 0x480F	; 0x80480f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    61ca:	28 2f       	mov	r18, r24
    61cc:	30 e0       	ldi	r19, 0x00	; 0
    61ce:	4f e3       	ldi	r20, 0x3F	; 63
    61d0:	42 9f       	mul	r20, r18
    61d2:	c0 01       	movw	r24, r0
    61d4:	43 9f       	mul	r20, r19
    61d6:	90 0d       	add	r25, r0
    61d8:	11 24       	eor	r1, r1
    61da:	81 57       	subi	r24, 0x71	; 113
    61dc:	98 4b       	sbci	r25, 0xB8	; 184
    61de:	02 c0       	rjmp	.+4      	; 0x61e4 <nextEmptySBRxBuffer+0x8e>
    61e0:	80 e0       	ldi	r24, 0x00	; 0
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	0f 90       	pop	r0
    61e6:	0f 90       	pop	r0
    61e8:	df 91       	pop	r29
    61ea:	cf 91       	pop	r28
    61ec:	08 95       	ret

000061ee <serialbusTxInProgress>:
    61ee:	cf 93       	push	r28
    61f0:	df 93       	push	r29
    61f2:	cd b7       	in	r28, 0x3d	; 61
    61f4:	de b7       	in	r29, 0x3e	; 62
    61f6:	80 91 13 47 	lds	r24, 0x4713	; 0x804713 <_ZL19serialbus_tx_active>
    61fa:	df 91       	pop	r29
    61fc:	cf 91       	pop	r28
    61fe:	08 95       	ret

00006200 <_Z18serialbus_start_txv>:
    6200:	cf 93       	push	r28
    6202:	df 93       	push	r29
    6204:	1f 92       	push	r1
    6206:	cd b7       	in	r28, 0x3d	; 61
    6208:	de b7       	in	r29, 0x3e	; 62
    620a:	90 91 13 47 	lds	r25, 0x4713	; 0x804713 <_ZL19serialbus_tx_active>
    620e:	81 e0       	ldi	r24, 0x01	; 1
    6210:	89 27       	eor	r24, r25
    6212:	89 83       	std	Y+1, r24	; 0x01
    6214:	89 81       	ldd	r24, Y+1	; 0x01
    6216:	88 23       	and	r24, r24
    6218:	61 f0       	breq	.+24     	; 0x6232 <_Z18serialbus_start_txv+0x32>
    621a:	81 e0       	ldi	r24, 0x01	; 1
    621c:	80 93 13 47 	sts	0x4713, r24	; 0x804713 <_ZL19serialbus_tx_active>
    6220:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    6224:	88 23       	and	r24, r24
    6226:	19 f4       	brne	.+6      	; 0x622e <_Z18serialbus_start_txv+0x2e>
    6228:	0e 94 84 42 	call	0x8508	; 0x8508 <USART4_enable_tx>
    622c:	02 c0       	rjmp	.+4      	; 0x6232 <_Z18serialbus_start_txv+0x32>
    622e:	0e 94 0f 42 	call	0x841e	; 0x841e <USART1_enable_tx>
    6232:	89 81       	ldd	r24, Y+1	; 0x01
    6234:	0f 90       	pop	r0
    6236:	df 91       	pop	r29
    6238:	cf 91       	pop	r28
    623a:	08 95       	ret

0000623c <serialbus_end_tx>:
    623c:	cf 93       	push	r28
    623e:	df 93       	push	r29
    6240:	cd b7       	in	r28, 0x3d	; 61
    6242:	de b7       	in	r29, 0x3e	; 62
    6244:	80 91 13 47 	lds	r24, 0x4713	; 0x804713 <_ZL19serialbus_tx_active>
    6248:	88 23       	and	r24, r24
    624a:	c9 f0       	breq	.+50     	; 0x627e <serialbus_end_tx+0x42>
    624c:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    6250:	84 30       	cpi	r24, 0x04	; 4
    6252:	51 f4       	brne	.+20     	; 0x6268 <serialbus_end_tx+0x2c>
    6254:	80 e8       	ldi	r24, 0x80	; 128
    6256:	98 e0       	ldi	r25, 0x08	; 8
    6258:	20 e8       	ldi	r18, 0x80	; 128
    625a:	38 e0       	ldi	r19, 0x08	; 8
    625c:	f9 01       	movw	r30, r18
    625e:	25 81       	ldd	r18, Z+5	; 0x05
    6260:	2f 7d       	andi	r18, 0xDF	; 223
    6262:	fc 01       	movw	r30, r24
    6264:	25 83       	std	Z+5, r18	; 0x05
    6266:	09 c0       	rjmp	.+18     	; 0x627a <serialbus_end_tx+0x3e>
    6268:	80 e2       	ldi	r24, 0x20	; 32
    626a:	98 e0       	ldi	r25, 0x08	; 8
    626c:	20 e2       	ldi	r18, 0x20	; 32
    626e:	38 e0       	ldi	r19, 0x08	; 8
    6270:	f9 01       	movw	r30, r18
    6272:	25 81       	ldd	r18, Z+5	; 0x05
    6274:	2f 7d       	andi	r18, 0xDF	; 223
    6276:	fc 01       	movw	r30, r24
    6278:	25 83       	std	Z+5, r18	; 0x05
    627a:	10 92 13 47 	sts	0x4713, r1	; 0x804713 <_ZL19serialbus_tx_active>
    627e:	00 00       	nop
    6280:	df 91       	pop	r29
    6282:	cf 91       	pop	r28
    6284:	08 95       	ret

00006286 <_Z19serialbus_send_textPc>:


bool serialbus_send_text(char* text)
{
    6286:	cf 93       	push	r28
    6288:	df 93       	push	r29
    628a:	cd b7       	in	r28, 0x3d	; 61
    628c:	de b7       	in	r29, 0x3e	; 62
    628e:	27 97       	sbiw	r28, 0x07	; 7
    6290:	cd bf       	out	0x3d, r28	; 61
    6292:	de bf       	out	0x3e, r29	; 62
    6294:	8e 83       	std	Y+6, r24	; 0x06
    6296:	9f 83       	std	Y+7, r25	; 0x07
	bool err = true;
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	89 83       	std	Y+1, r24	; 0x01
	uint16_t tries = 200;
    629c:	88 ec       	ldi	r24, 0xC8	; 200
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	8a 83       	std	Y+2, r24	; 0x02
    62a2:	9b 83       	std	Y+3, r25	; 0x03

	if(g_bus_disabled)
    62a4:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <_ZL14g_bus_disabled>
    62a8:	88 23       	and	r24, r24
    62aa:	11 f0       	breq	.+4      	; 0x62b0 <_Z19serialbus_send_textPc+0x2a>
	{
		return( err);
    62ac:	89 81       	ldd	r24, Y+1	; 0x01
    62ae:	42 c0       	rjmp	.+132    	; 0x6334 <_Z19serialbus_send_textPc+0xae>
	}

	if(text)
    62b0:	8e 81       	ldd	r24, Y+6	; 0x06
    62b2:	9f 81       	ldd	r25, Y+7	; 0x07
    62b4:	89 2b       	or	r24, r25
    62b6:	e9 f1       	breq	.+122    	; 0x6332 <_Z19serialbus_send_textPc+0xac>
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    62b8:	0e 94 60 30 	call	0x60c0	; 0x60c0 <nextEmptySBTxBuffer>
    62bc:	8c 83       	std	Y+4, r24	; 0x04
    62be:	9d 83       	std	Y+5, r25	; 0x05

		while(!buff && tries)
    62c0:	8c 81       	ldd	r24, Y+4	; 0x04
    62c2:	9d 81       	ldd	r25, Y+5	; 0x05
    62c4:	89 2b       	or	r24, r25
    62c6:	01 f5       	brne	.+64     	; 0x6308 <_Z19serialbus_send_textPc+0x82>
    62c8:	8a 81       	ldd	r24, Y+2	; 0x02
    62ca:	9b 81       	ldd	r25, Y+3	; 0x03
    62cc:	89 2b       	or	r24, r25
    62ce:	e1 f0       	breq	.+56     	; 0x6308 <_Z19serialbus_send_textPc+0x82>
		{
			while(serialbusTxInProgress() && tries)
    62d0:	0e 94 f7 30 	call	0x61ee	; 0x61ee <serialbusTxInProgress>
    62d4:	88 23       	and	r24, r24
    62d6:	31 f0       	breq	.+12     	; 0x62e4 <_Z19serialbus_send_textPc+0x5e>
    62d8:	8a 81       	ldd	r24, Y+2	; 0x02
    62da:	9b 81       	ldd	r25, Y+3	; 0x03
    62dc:	89 2b       	or	r24, r25
    62de:	11 f0       	breq	.+4      	; 0x62e4 <_Z19serialbus_send_textPc+0x5e>
    62e0:	81 e0       	ldi	r24, 0x01	; 1
    62e2:	01 c0       	rjmp	.+2      	; 0x62e6 <_Z19serialbus_send_textPc+0x60>
    62e4:	80 e0       	ldi	r24, 0x00	; 0
    62e6:	88 23       	and	r24, r24
    62e8:	51 f0       	breq	.+20     	; 0x62fe <_Z19serialbus_send_textPc+0x78>
			{
				if(tries)
    62ea:	8a 81       	ldd	r24, Y+2	; 0x02
    62ec:	9b 81       	ldd	r25, Y+3	; 0x03
    62ee:	89 2b       	or	r24, r25
    62f0:	79 f3       	breq	.-34     	; 0x62d0 <_Z19serialbus_send_textPc+0x4a>
				{
					tries--;    /* wait until transmit finishes */
    62f2:	8a 81       	ldd	r24, Y+2	; 0x02
    62f4:	9b 81       	ldd	r25, Y+3	; 0x03
    62f6:	01 97       	sbiw	r24, 0x01	; 1
    62f8:	8a 83       	std	Y+2, r24	; 0x02
    62fa:	9b 83       	std	Y+3, r25	; 0x03
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
		{
			while(serialbusTxInProgress() && tries)
    62fc:	e9 cf       	rjmp	.-46     	; 0x62d0 <_Z19serialbus_send_textPc+0x4a>
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
				}
			}
			buff = nextEmptySBTxBuffer();
    62fe:	0e 94 60 30 	call	0x60c0	; 0x60c0 <nextEmptySBTxBuffer>
    6302:	8c 83       	std	Y+4, r24	; 0x04
    6304:	9d 83       	std	Y+5, r25	; 0x05

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    6306:	dc cf       	rjmp	.-72     	; 0x62c0 <_Z19serialbus_send_textPc+0x3a>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    6308:	8c 81       	ldd	r24, Y+4	; 0x04
    630a:	9d 81       	ldd	r25, Y+5	; 0x05
    630c:	89 2b       	or	r24, r25
    630e:	89 f0       	breq	.+34     	; 0x6332 <_Z19serialbus_send_textPc+0xac>
		{
			sprintf(*buff, text);
    6310:	8f 81       	ldd	r24, Y+7	; 0x07
    6312:	8f 93       	push	r24
    6314:	8e 81       	ldd	r24, Y+6	; 0x06
    6316:	8f 93       	push	r24
    6318:	8d 81       	ldd	r24, Y+5	; 0x05
    631a:	8f 93       	push	r24
    631c:	8c 81       	ldd	r24, Y+4	; 0x04
    631e:	8f 93       	push	r24
    6320:	0e 94 24 47 	call	0x8e48	; 0x8e48 <sprintf>
    6324:	0f 90       	pop	r0
    6326:	0f 90       	pop	r0
    6328:	0f 90       	pop	r0
    632a:	0f 90       	pop	r0

			serialbus_start_tx();
    632c:	0e 94 00 31 	call	0x6200	; 0x6200 <_Z18serialbus_start_txv>
			err = false;
    6330:	19 82       	std	Y+1, r1	; 0x01
		}
	}

	return(err);
    6332:	89 81       	ldd	r24, Y+1	; 0x01
}
    6334:	27 96       	adiw	r28, 0x07	; 7
    6336:	cd bf       	out	0x3d, r28	; 61
    6338:	de bf       	out	0x3e, r29	; 62
    633a:	df 91       	pop	r29
    633c:	cf 91       	pop	r28
    633e:	08 95       	ret

00006340 <sb_send_NewPrompt>:
/***********************************************************************************
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
    6340:	cf 93       	push	r28
    6342:	df 93       	push	r29
    6344:	cd b7       	in	r28, 0x3d	; 61
    6346:	de b7       	in	r29, 0x3e	; 62
	if(g_bus_disabled)
    6348:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <_ZL14g_bus_disabled>
    634c:	88 23       	and	r24, r24
    634e:	39 f4       	brne	.+14     	; 0x635e <sb_send_NewPrompt+0x1e>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    6350:	8b e8       	ldi	r24, 0x8B	; 139
    6352:	94 e4       	ldi	r25, 0x44	; 68
    6354:	0e 94 43 31 	call	0x6286	; 0x6286 <_Z19serialbus_send_textPc>
    6358:	88 23       	and	r24, r24
    635a:	11 f0       	breq	.+4      	; 0x6360 <sb_send_NewPrompt+0x20>
    635c:	f9 cf       	rjmp	.-14     	; 0x6350 <sb_send_NewPrompt+0x10>

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
	{
		return;
    635e:	00 00       	nop

	while(serialbus_send_text((char*)textPrompt))
	{
		;
	}
}
    6360:	df 91       	pop	r29
    6362:	cf 91       	pop	r28
    6364:	08 95       	ret

00006366 <sb_send_NewLine>:

void sb_send_NewLine(void)
{
    6366:	cf 93       	push	r28
    6368:	df 93       	push	r29
    636a:	cd b7       	in	r28, 0x3d	; 61
    636c:	de b7       	in	r29, 0x3e	; 62
	if(g_bus_disabled)
    636e:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <_ZL14g_bus_disabled>
    6372:	88 23       	and	r24, r24
    6374:	29 f4       	brne	.+10     	; 0x6380 <sb_send_NewLine+0x1a>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    6376:	89 e8       	ldi	r24, 0x89	; 137
    6378:	94 e4       	ldi	r25, 0x44	; 68
    637a:	0e 94 43 31 	call	0x6286	; 0x6286 <_Z19serialbus_send_textPc>
    637e:	01 c0       	rjmp	.+2      	; 0x6382 <sb_send_NewLine+0x1c>

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
	{
		return;
    6380:	00 00       	nop
	}
	serialbus_send_text((char*)crlf);
}
    6382:	df 91       	pop	r29
    6384:	cf 91       	pop	r28
    6386:	08 95       	ret

00006388 <sb_echo_char>:

void sb_echo_char(uint8_t c)
{
    6388:	cf 93       	push	r28
    638a:	df 93       	push	r29
    638c:	1f 92       	push	r1
    638e:	cd b7       	in	r28, 0x3d	; 61
    6390:	de b7       	in	r29, 0x3e	; 62
    6392:	89 83       	std	Y+1, r24	; 0x01
	if(g_bus_disabled)
    6394:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <_ZL14g_bus_disabled>
    6398:	88 23       	and	r24, r24
    639a:	51 f4       	brne	.+20     	; 0x63b0 <sb_echo_char+0x28>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    639c:	89 81       	ldd	r24, Y+1	; 0x01
    639e:	80 93 e1 46 	sts	0x46E1, r24	; 0x8046e1 <_ZL13g_tempMsgBuff>
	g_tempMsgBuff[1] = '\0';
    63a2:	10 92 e2 46 	sts	0x46E2, r1	; 0x8046e2 <_ZL13g_tempMsgBuff+0x1>
	serialbus_send_text(g_tempMsgBuff);
    63a6:	81 ee       	ldi	r24, 0xE1	; 225
    63a8:	96 e4       	ldi	r25, 0x46	; 70
    63aa:	0e 94 43 31 	call	0x6286	; 0x6286 <_Z19serialbus_send_textPc>
    63ae:	01 c0       	rjmp	.+2      	; 0x63b2 <sb_echo_char+0x2a>

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
	{
		return;
    63b0:	00 00       	nop
	}
	g_tempMsgBuff[0] = c;
	g_tempMsgBuff[1] = '\0';
	serialbus_send_text(g_tempMsgBuff);
}
    63b2:	0f 90       	pop	r0
    63b4:	df 91       	pop	r29
    63b6:	cf 91       	pop	r28
    63b8:	08 95       	ret

000063ba <sb_send_string>:

bool sb_send_string(char* str)
{
    63ba:	cf 93       	push	r28
    63bc:	df 93       	push	r29
    63be:	cd b7       	in	r28, 0x3d	; 61
    63c0:	de b7       	in	r29, 0x3e	; 62
    63c2:	e8 97       	sbiw	r28, 0x38	; 56
    63c4:	cd bf       	out	0x3d, r28	; 61
    63c6:	de bf       	out	0x3e, r29	; 62
    63c8:	8f ab       	std	Y+55, r24	; 0x37
    63ca:	98 af       	std	Y+56, r25	; 0x38
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
    63cc:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t length, lengthToSend, lengthSent=0;
    63ce:	19 82       	std	Y+1, r1	; 0x01
    63d0:	1a 82       	std	Y+2, r1	; 0x02
	bool done = false;
    63d2:	1c 82       	std	Y+4, r1	; 0x04

	if(g_bus_disabled)
    63d4:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <_ZL14g_bus_disabled>
    63d8:	88 23       	and	r24, r24
    63da:	11 f0       	breq	.+4      	; 0x63e0 <sb_send_string+0x26>
	{
		return( true);
    63dc:	81 e0       	ldi	r24, 0x01	; 1
    63de:	70 c0       	rjmp	.+224    	; 0x64c0 <sb_send_string+0x106>
	}

	if(str == NULL)
    63e0:	8f a9       	ldd	r24, Y+55	; 0x37
    63e2:	98 ad       	ldd	r25, Y+56	; 0x38
    63e4:	89 2b       	or	r24, r25
    63e6:	11 f4       	brne	.+4      	; 0x63ec <sb_send_string+0x32>
	{
		return( true);
    63e8:	81 e0       	ldi	r24, 0x01	; 1
    63ea:	6a c0       	rjmp	.+212    	; 0x64c0 <sb_send_string+0x106>
	}

	if(!*str)
    63ec:	8f a9       	ldd	r24, Y+55	; 0x37
    63ee:	98 ad       	ldd	r25, Y+56	; 0x38
    63f0:	fc 01       	movw	r30, r24
    63f2:	80 81       	ld	r24, Z
    63f4:	88 23       	and	r24, r24
    63f6:	11 f4       	brne	.+4      	; 0x63fc <sb_send_string+0x42>
	{
		return(true);
    63f8:	81 e0       	ldi	r24, 0x01	; 1
    63fa:	62 c0       	rjmp	.+196    	; 0x64c0 <sb_send_string+0x106>
	}

	length = strlen(str);
    63fc:	8f a9       	ldd	r24, Y+55	; 0x37
    63fe:	98 ad       	ldd	r25, Y+56	; 0x38
    6400:	0e 94 0c 47 	call	0x8e18	; 0x8e18 <strlen>
    6404:	8d 83       	std	Y+5, r24	; 0x05
    6406:	9e 83       	std	Y+6, r25	; 0x06

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH-1);
    6408:	2d 81       	ldd	r18, Y+5	; 0x05
    640a:	3e 81       	ldd	r19, Y+6	; 0x06
    640c:	89 81       	ldd	r24, Y+1	; 0x01
    640e:	9a 81       	ldd	r25, Y+2	; 0x02
    6410:	a9 01       	movw	r20, r18
    6412:	48 1b       	sub	r20, r24
    6414:	59 0b       	sbc	r21, r25
    6416:	ca 01       	movw	r24, r20
    6418:	8f 83       	std	Y+7, r24	; 0x07
    641a:	98 87       	std	Y+8, r25	; 0x08
    641c:	88 e2       	ldi	r24, 0x28	; 40
    641e:	90 e0       	ldi	r25, 0x00	; 0
    6420:	89 87       	std	Y+9, r24	; 0x09
    6422:	9a 87       	std	Y+10, r25	; 0x0a
    6424:	2f 81       	ldd	r18, Y+7	; 0x07
    6426:	38 85       	ldd	r19, Y+8	; 0x08
    6428:	89 85       	ldd	r24, Y+9	; 0x09
    642a:	9a 85       	ldd	r25, Y+10	; 0x0a
    642c:	28 17       	cp	r18, r24
    642e:	39 07       	cpc	r19, r25
    6430:	18 f4       	brcc	.+6      	; 0x6438 <sb_send_string+0x7e>
    6432:	8f 81       	ldd	r24, Y+7	; 0x07
    6434:	98 85       	ldd	r25, Y+8	; 0x08
    6436:	02 c0       	rjmp	.+4      	; 0x643c <sb_send_string+0x82>
    6438:	89 85       	ldd	r24, Y+9	; 0x09
    643a:	9a 85       	ldd	r25, Y+10	; 0x0a
    643c:	8b 87       	std	Y+11, r24	; 0x0b
    643e:	9c 87       	std	Y+12, r25	; 0x0c
		strncpy(buf, &str[lengthSent], lengthToSend);
    6440:	2f a9       	ldd	r18, Y+55	; 0x37
    6442:	38 ad       	ldd	r19, Y+56	; 0x38
    6444:	89 81       	ldd	r24, Y+1	; 0x01
    6446:	9a 81       	ldd	r25, Y+2	; 0x02
    6448:	28 0f       	add	r18, r24
    644a:	39 1f       	adc	r19, r25
    644c:	4b 85       	ldd	r20, Y+11	; 0x0b
    644e:	5c 85       	ldd	r21, Y+12	; 0x0c
    6450:	ce 01       	movw	r24, r28
    6452:	0d 96       	adiw	r24, 0x0d	; 13
    6454:	b9 01       	movw	r22, r18
    6456:	0e 94 15 47 	call	0x8e2a	; 0x8e2a <strncpy>

		buf[lengthToSend] = '\0';
    645a:	9e 01       	movw	r18, r28
    645c:	23 5f       	subi	r18, 0xF3	; 243
    645e:	3f 4f       	sbci	r19, 0xFF	; 255
    6460:	8b 85       	ldd	r24, Y+11	; 0x0b
    6462:	9c 85       	ldd	r25, Y+12	; 0x0c
    6464:	82 0f       	add	r24, r18
    6466:	93 1f       	adc	r25, r19
    6468:	fc 01       	movw	r30, r24
    646a:	10 82       	st	Z, r1
		err = serialbus_send_text(buf);
    646c:	ce 01       	movw	r24, r28
    646e:	0d 96       	adiw	r24, 0x0d	; 13
    6470:	0e 94 43 31 	call	0x6286	; 0x6286 <_Z19serialbus_send_textPc>
    6474:	8b 83       	std	Y+3, r24	; 0x03
		
		if(!err)
    6476:	9b 81       	ldd	r25, Y+3	; 0x03
    6478:	81 e0       	ldi	r24, 0x01	; 1
    647a:	89 27       	eor	r24, r25
    647c:	88 23       	and	r24, r24
    647e:	29 f0       	breq	.+10     	; 0x648a <sb_send_string+0xd0>
		{
			while(serialbusTxInProgress())
    6480:	0e 94 f7 30 	call	0x61ee	; 0x61ee <serialbusTxInProgress>
    6484:	88 23       	and	r24, r24
    6486:	09 f0       	breq	.+2      	; 0x648a <sb_send_string+0xd0>
    6488:	fb cf       	rjmp	.-10     	; 0x6480 <sb_send_string+0xc6>
			{
				;
			}
		}

		lengthSent += lengthToSend;
    648a:	29 81       	ldd	r18, Y+1	; 0x01
    648c:	3a 81       	ldd	r19, Y+2	; 0x02
    648e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6490:	9c 85       	ldd	r25, Y+12	; 0x0c
    6492:	82 0f       	add	r24, r18
    6494:	93 1f       	adc	r25, r19
    6496:	89 83       	std	Y+1, r24	; 0x01
    6498:	9a 83       	std	Y+2, r25	; 0x02
		done = err || (lengthSent >= length);
    649a:	8b 81       	ldd	r24, Y+3	; 0x03
    649c:	88 23       	and	r24, r24
    649e:	39 f4       	brne	.+14     	; 0x64ae <sb_send_string+0xf4>
    64a0:	29 81       	ldd	r18, Y+1	; 0x01
    64a2:	3a 81       	ldd	r19, Y+2	; 0x02
    64a4:	8d 81       	ldd	r24, Y+5	; 0x05
    64a6:	9e 81       	ldd	r25, Y+6	; 0x06
    64a8:	28 17       	cp	r18, r24
    64aa:	39 07       	cpc	r19, r25
    64ac:	10 f0       	brcs	.+4      	; 0x64b2 <sb_send_string+0xf8>
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	01 c0       	rjmp	.+2      	; 0x64b4 <sb_send_string+0xfa>
    64b2:	80 e0       	ldi	r24, 0x00	; 0
    64b4:	8c 83       	std	Y+4, r24	; 0x04
	}while(!done);
    64b6:	8c 81       	ldd	r24, Y+4	; 0x04
    64b8:	88 23       	and	r24, r24
    64ba:	09 f4       	brne	.+2      	; 0x64be <sb_send_string+0x104>
		return(true);
	}

	length = strlen(str);

	do
    64bc:	a5 cf       	rjmp	.-182    	; 0x6408 <sb_send_string+0x4e>

		lengthSent += lengthToSend;
		done = err || (lengthSent >= length);
	}while(!done);

	return( err);
    64be:	8b 81       	ldd	r24, Y+3	; 0x03
}
    64c0:	e8 96       	adiw	r28, 0x38	; 56
    64c2:	cd bf       	out	0x3d, r28	; 61
    64c4:	de bf       	out	0x3e, r29	; 62
    64c6:	df 91       	pop	r29
    64c8:	cf 91       	pop	r28
    64ca:	08 95       	ret

000064cc <si5351_init>:
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
		return;
	}
    64cc:	cf 93       	push	r28
    64ce:	df 93       	push	r29
    64d0:	cd b7       	in	r28, 0x3d	; 61
    64d2:	de b7       	in	r29, 0x3e	; 62
    64d4:	28 97       	sbiw	r28, 0x08	; 8
    64d6:	cd bf       	out	0x3d, r28	; 61
    64d8:	de bf       	out	0x3e, r29	; 62
    64da:	8c 83       	std	Y+4, r24	; 0x04
    64dc:	4d 83       	std	Y+5, r20	; 0x05
    64de:	5e 83       	std	Y+6, r21	; 0x06
    64e0:	6f 83       	std	Y+7, r22	; 0x07
    64e2:	78 87       	std	Y+8, r23	; 0x08
    64e4:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <I2C_1_Init>
    64e8:	10 92 10 48 	sts	0x4810, r1	; 0x804810 <_ZL8freqVCOB>
    64ec:	10 92 11 48 	sts	0x4811, r1	; 0x804811 <_ZL8freqVCOB+0x1>
    64f0:	10 92 12 48 	sts	0x4812, r1	; 0x804812 <_ZL8freqVCOB+0x2>
    64f4:	10 92 13 48 	sts	0x4813, r1	; 0x804813 <_ZL8freqVCOB+0x3>
    64f8:	80 e4       	ldi	r24, 0x40	; 64
    64fa:	98 e7       	ldi	r25, 0x78	; 120
    64fc:	ad e7       	ldi	r26, 0x7D	; 125
    64fe:	b1 e0       	ldi	r27, 0x01	; 1
    6500:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    6504:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    6508:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    650c:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
    6510:	10 92 14 48 	sts	0x4814, r1	; 0x804814 <_ZL17enabledClocksMask>
    6514:	8f ef       	ldi	r24, 0xFF	; 255
    6516:	8a 83       	std	Y+2, r24	; 0x02
    6518:	ce 01       	movw	r24, r28
    651a:	02 96       	adiw	r24, 0x02	; 2
    651c:	41 e0       	ldi	r20, 0x01	; 1
    651e:	bc 01       	movw	r22, r24
    6520:	83 e0       	ldi	r24, 0x03	; 3
    6522:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6526:	80 93 22 48 	sts	0x4822, r24	; 0x804822 <_ZZ11si5351_initE3err>
    652a:	80 91 22 48 	lds	r24, 0x4822	; 0x804822 <_ZZ11si5351_initE3err>
    652e:	88 23       	and	r24, r24
    6530:	19 f0       	breq	.+6      	; 0x6538 <si5351_init+0x6c>
    6532:	80 91 22 48 	lds	r24, 0x4822	; 0x804822 <_ZZ11si5351_initE3err>
    6536:	92 c0       	rjmp	.+292    	; 0x665c <si5351_init+0x190>
    6538:	8c ec       	ldi	r24, 0xCC	; 204
    653a:	8a 83       	std	Y+2, r24	; 0x02
    653c:	ce 01       	movw	r24, r28
    653e:	02 96       	adiw	r24, 0x02	; 2
    6540:	41 e0       	ldi	r20, 0x01	; 1
    6542:	bc 01       	movw	r22, r24
    6544:	80 e1       	ldi	r24, 0x10	; 16
    6546:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    654a:	98 2f       	mov	r25, r24
    654c:	80 91 22 48 	lds	r24, 0x4822	; 0x804822 <_ZZ11si5351_initE3err>
    6550:	89 2b       	or	r24, r25
    6552:	80 93 22 48 	sts	0x4822, r24	; 0x804822 <_ZZ11si5351_initE3err>
    6556:	ce 01       	movw	r24, r28
    6558:	02 96       	adiw	r24, 0x02	; 2
    655a:	41 e0       	ldi	r20, 0x01	; 1
    655c:	bc 01       	movw	r22, r24
    655e:	81 e1       	ldi	r24, 0x11	; 17
    6560:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6564:	98 2f       	mov	r25, r24
    6566:	80 91 22 48 	lds	r24, 0x4822	; 0x804822 <_ZZ11si5351_initE3err>
    656a:	89 2b       	or	r24, r25
    656c:	80 93 22 48 	sts	0x4822, r24	; 0x804822 <_ZZ11si5351_initE3err>
    6570:	ce 01       	movw	r24, r28
    6572:	02 96       	adiw	r24, 0x02	; 2
    6574:	41 e0       	ldi	r20, 0x01	; 1
    6576:	bc 01       	movw	r22, r24
    6578:	82 e1       	ldi	r24, 0x12	; 18
    657a:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    657e:	98 2f       	mov	r25, r24
    6580:	80 91 22 48 	lds	r24, 0x4822	; 0x804822 <_ZZ11si5351_initE3err>
    6584:	89 2b       	or	r24, r25
    6586:	80 93 22 48 	sts	0x4822, r24	; 0x804822 <_ZZ11si5351_initE3err>
    658a:	82 e1       	ldi	r24, 0x12	; 18
    658c:	89 83       	std	Y+1, r24	; 0x01
    658e:	99 81       	ldd	r25, Y+1	; 0x01
    6590:	8c 81       	ldd	r24, Y+4	; 0x04
    6592:	89 2b       	or	r24, r25
    6594:	89 83       	std	Y+1, r24	; 0x01
    6596:	89 81       	ldd	r24, Y+1	; 0x01
    6598:	8a 83       	std	Y+2, r24	; 0x02
    659a:	ce 01       	movw	r24, r28
    659c:	02 96       	adiw	r24, 0x02	; 2
    659e:	41 e0       	ldi	r20, 0x01	; 1
    65a0:	bc 01       	movw	r22, r24
    65a2:	87 eb       	ldi	r24, 0xB7	; 183
    65a4:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    65a8:	98 2f       	mov	r25, r24
    65aa:	80 91 22 48 	lds	r24, 0x4822	; 0x804822 <_ZZ11si5351_initE3err>
    65ae:	89 2b       	or	r24, r25
    65b0:	80 93 22 48 	sts	0x4822, r24	; 0x804822 <_ZZ11si5351_initE3err>
    65b4:	8d 81       	ldd	r24, Y+5	; 0x05
    65b6:	9e 81       	ldd	r25, Y+6	; 0x06
    65b8:	af 81       	ldd	r26, Y+7	; 0x07
    65ba:	b8 85       	ldd	r27, Y+8	; 0x08
    65bc:	89 2b       	or	r24, r25
    65be:	8a 2b       	or	r24, r26
    65c0:	8b 2b       	or	r24, r27
    65c2:	41 f4       	brne	.+16     	; 0x65d4 <si5351_init+0x108>
    65c4:	80 e4       	ldi	r24, 0x40	; 64
    65c6:	98 e7       	ldi	r25, 0x78	; 120
    65c8:	ad e7       	ldi	r26, 0x7D	; 125
    65ca:	b1 e0       	ldi	r27, 0x01	; 1
    65cc:	8d 83       	std	Y+5, r24	; 0x05
    65ce:	9e 83       	std	Y+6, r25	; 0x06
    65d0:	af 83       	std	Y+7, r26	; 0x07
    65d2:	b8 87       	std	Y+8, r27	; 0x08
    65d4:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    65d8:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    65dc:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    65e0:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    65e4:	2d 81       	ldd	r18, Y+5	; 0x05
    65e6:	3e 81       	ldd	r19, Y+6	; 0x06
    65e8:	4f 81       	ldd	r20, Y+7	; 0x07
    65ea:	58 85       	ldd	r21, Y+8	; 0x08
    65ec:	28 17       	cp	r18, r24
    65ee:	39 07       	cpc	r19, r25
    65f0:	4a 07       	cpc	r20, r26
    65f2:	5b 07       	cpc	r21, r27
    65f4:	59 f1       	breq	.+86     	; 0x664c <si5351_init+0x180>
    65f6:	ce 01       	movw	r24, r28
    65f8:	02 96       	adiw	r24, 0x02	; 2
    65fa:	41 e0       	ldi	r20, 0x01	; 1
    65fc:	bc 01       	movw	r22, r24
    65fe:	8f e0       	ldi	r24, 0x0F	; 15
    6600:	0e 94 9c 3a 	call	0x7538	; 0x7538 <_Z16si5351_read_bulkhPhh>
    6604:	88 23       	and	r24, r24
    6606:	11 f0       	breq	.+4      	; 0x660c <si5351_init+0x140>
    6608:	81 e0       	ldi	r24, 0x01	; 1
    660a:	28 c0       	rjmp	.+80     	; 0x665c <si5351_init+0x190>
    660c:	8a 81       	ldd	r24, Y+2	; 0x02
    660e:	89 83       	std	Y+1, r24	; 0x01
    6610:	89 81       	ldd	r24, Y+1	; 0x01
    6612:	8f 73       	andi	r24, 0x3F	; 63
    6614:	89 83       	std	Y+1, r24	; 0x01
    6616:	8d 81       	ldd	r24, Y+5	; 0x05
    6618:	9e 81       	ldd	r25, Y+6	; 0x06
    661a:	af 81       	ldd	r26, Y+7	; 0x07
    661c:	b8 85       	ldd	r27, Y+8	; 0x08
    661e:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    6622:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    6626:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    662a:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
    662e:	89 81       	ldd	r24, Y+1	; 0x01
    6630:	8a 83       	std	Y+2, r24	; 0x02
    6632:	ce 01       	movw	r24, r28
    6634:	02 96       	adiw	r24, 0x02	; 2
    6636:	41 e0       	ldi	r20, 0x01	; 1
    6638:	bc 01       	movw	r22, r24
    663a:	8f e0       	ldi	r24, 0x0F	; 15
    663c:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6640:	98 2f       	mov	r25, r24
    6642:	80 91 22 48 	lds	r24, 0x4822	; 0x804822 <_ZZ11si5351_initE3err>
    6646:	89 2b       	or	r24, r25
    6648:	80 93 22 48 	sts	0x4822, r24	; 0x804822 <_ZZ11si5351_initE3err>
    664c:	90 91 22 48 	lds	r25, 0x4822	; 0x804822 <_ZZ11si5351_initE3err>
    6650:	81 e0       	ldi	r24, 0x01	; 1
    6652:	89 27       	eor	r24, r25
    6654:	80 93 21 48 	sts	0x4821, r24	; 0x804821 <g_si5351_initialized>
    6658:	80 91 22 48 	lds	r24, 0x4822	; 0x804822 <_ZZ11si5351_initE3err>
    665c:	28 96       	adiw	r28, 0x08	; 8
    665e:	cd bf       	out	0x3d, r28	; 61
    6660:	de bf       	out	0x3e, r29	; 62
    6662:	df 91       	pop	r29
    6664:	cf 91       	pop	r28
    6666:	08 95       	ret

00006668 <si5351_set_freq>:
    6668:	8f 92       	push	r8
    666a:	af 92       	push	r10
    666c:	cf 92       	push	r12
    666e:	df 92       	push	r13
    6670:	ef 92       	push	r14
    6672:	ff 92       	push	r15
    6674:	0f 93       	push	r16
    6676:	1f 93       	push	r17
    6678:	cf 93       	push	r28
    667a:	df 93       	push	r29
    667c:	cd b7       	in	r28, 0x3d	; 61
    667e:	de b7       	in	r29, 0x3e	; 62
    6680:	6d 97       	sbiw	r28, 0x1d	; 29
    6682:	cd bf       	out	0x3d, r28	; 61
    6684:	de bf       	out	0x3e, r29	; 62
    6686:	68 8f       	std	Y+24, r22	; 0x18
    6688:	79 8f       	std	Y+25, r23	; 0x19
    668a:	8a 8f       	std	Y+26, r24	; 0x1a
    668c:	9b 8f       	std	Y+27, r25	; 0x1b
    668e:	4c 8f       	std	Y+28, r20	; 0x1c
    6690:	2d 8f       	std	Y+29, r18	; 0x1d
    6692:	19 82       	std	Y+1, r1	; 0x01
    6694:	1a 82       	std	Y+2, r1	; 0x02
    6696:	1b 82       	std	Y+3, r1	; 0x03
    6698:	1c 82       	std	Y+4, r1	; 0x04
    669a:	1f 82       	std	Y+7, r1	; 0x07
    669c:	1c 8a       	std	Y+20, r1	; 0x14
    669e:	1d 8a       	std	Y+21, r1	; 0x15
    66a0:	90 91 21 48 	lds	r25, 0x4821	; 0x804821 <g_si5351_initialized>
    66a4:	81 e0       	ldi	r24, 0x01	; 1
    66a6:	89 27       	eor	r24, r25
    66a8:	88 23       	and	r24, r24
    66aa:	11 f0       	breq	.+4      	; 0x66b0 <si5351_set_freq+0x48>
    66ac:	81 e0       	ldi	r24, 0x01	; 1
    66ae:	6f c1       	rjmp	.+734    	; 0x698e <si5351_set_freq+0x326>
    66b0:	88 8d       	ldd	r24, Y+24	; 0x18
    66b2:	99 8d       	ldd	r25, Y+25	; 0x19
    66b4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    66b6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    66b8:	80 34       	cpi	r24, 0x40	; 64
    66ba:	92 44       	sbci	r25, 0x42	; 66
    66bc:	af 40       	sbci	r26, 0x0F	; 15
    66be:	b1 05       	cpc	r27, r1
    66c0:	08 f1       	brcs	.+66     	; 0x6704 <si5351_set_freq+0x9c>
    66c2:	88 8d       	ldd	r24, Y+24	; 0x18
    66c4:	99 8d       	ldd	r25, Y+25	; 0x19
    66c6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    66c8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    66ca:	24 e6       	ldi	r18, 0x64	; 100
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	40 e0       	ldi	r20, 0x00	; 0
    66d0:	50 e0       	ldi	r21, 0x00	; 0
    66d2:	bc 01       	movw	r22, r24
    66d4:	cd 01       	movw	r24, r26
    66d6:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    66da:	da 01       	movw	r26, r20
    66dc:	c9 01       	movw	r24, r18
    66de:	88 8f       	std	Y+24, r24	; 0x18
    66e0:	99 8f       	std	Y+25, r25	; 0x19
    66e2:	aa 8f       	std	Y+26, r26	; 0x1a
    66e4:	bb 8f       	std	Y+27, r27	; 0x1b
    66e6:	28 8d       	ldd	r18, Y+24	; 0x18
    66e8:	39 8d       	ldd	r19, Y+25	; 0x19
    66ea:	4a 8d       	ldd	r20, Y+26	; 0x1a
    66ec:	5b 8d       	ldd	r21, Y+27	; 0x1b
    66ee:	84 e6       	ldi	r24, 0x64	; 100
    66f0:	90 e0       	ldi	r25, 0x00	; 0
    66f2:	dc 01       	movw	r26, r24
    66f4:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <__muluhisi3>
    66f8:	dc 01       	movw	r26, r24
    66fa:	cb 01       	movw	r24, r22
    66fc:	88 8f       	std	Y+24, r24	; 0x18
    66fe:	99 8f       	std	Y+25, r25	; 0x19
    6700:	aa 8f       	std	Y+26, r26	; 0x1a
    6702:	bb 8f       	std	Y+27, r27	; 0x1b
    6704:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6706:	88 2f       	mov	r24, r24
    6708:	90 e0       	ldi	r25, 0x00	; 0
    670a:	81 30       	cpi	r24, 0x01	; 1
    670c:	91 05       	cpc	r25, r1
    670e:	e9 f0       	breq	.+58     	; 0x674a <si5351_set_freq+0xe2>
    6710:	82 30       	cpi	r24, 0x02	; 2
    6712:	91 05       	cpc	r25, r1
    6714:	09 f4       	brne	.+2      	; 0x6718 <si5351_set_freq+0xb0>
    6716:	3f c0       	rjmp	.+126    	; 0x6796 <si5351_set_freq+0x12e>
    6718:	89 2b       	or	r24, r25
    671a:	09 f0       	breq	.+2      	; 0x671e <si5351_set_freq+0xb6>
    671c:	62 c0       	rjmp	.+196    	; 0x67e2 <si5351_set_freq+0x17a>
    671e:	80 91 14 48 	lds	r24, 0x4814	; 0x804814 <_ZL17enabledClocksMask>
    6722:	81 60       	ori	r24, 0x01	; 1
    6724:	80 93 14 48 	sts	0x4814, r24	; 0x804814 <_ZL17enabledClocksMask>
    6728:	80 e1       	ldi	r24, 0x10	; 16
    672a:	8e 83       	std	Y+6, r24	; 0x06
    672c:	81 e0       	ldi	r24, 0x01	; 1
    672e:	8d 83       	std	Y+5, r24	; 0x05
    6730:	88 8d       	ldd	r24, Y+24	; 0x18
    6732:	99 8d       	ldd	r25, Y+25	; 0x19
    6734:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6736:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6738:	80 93 15 48 	sts	0x4815, r24	; 0x804815 <_ZL9clock_out>
    673c:	90 93 16 48 	sts	0x4816, r25	; 0x804816 <_ZL9clock_out+0x1>
    6740:	a0 93 17 48 	sts	0x4817, r26	; 0x804817 <_ZL9clock_out+0x2>
    6744:	b0 93 18 48 	sts	0x4818, r27	; 0x804818 <_ZL9clock_out+0x3>
    6748:	4e c0       	rjmp	.+156    	; 0x67e6 <si5351_set_freq+0x17e>
    674a:	80 91 14 48 	lds	r24, 0x4814	; 0x804814 <_ZL17enabledClocksMask>
    674e:	82 60       	ori	r24, 0x02	; 2
    6750:	80 93 14 48 	sts	0x4814, r24	; 0x804814 <_ZL17enabledClocksMask>
    6754:	81 e1       	ldi	r24, 0x11	; 17
    6756:	8e 83       	std	Y+6, r24	; 0x06
    6758:	80 91 14 48 	lds	r24, 0x4814	; 0x804814 <_ZL17enabledClocksMask>
    675c:	80 95       	com	r24
    675e:	8a 6f       	ori	r24, 0xFA	; 250
    6760:	8e 8b       	std	Y+22, r24	; 0x16
    6762:	ce 01       	movw	r24, r28
    6764:	46 96       	adiw	r24, 0x16	; 22
    6766:	41 e0       	ldi	r20, 0x01	; 1
    6768:	bc 01       	movw	r22, r24
    676a:	83 e0       	ldi	r24, 0x03	; 3
    676c:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6770:	88 23       	and	r24, r24
    6772:	11 f0       	breq	.+4      	; 0x6778 <si5351_set_freq+0x110>
    6774:	81 e0       	ldi	r24, 0x01	; 1
    6776:	0b c1       	rjmp	.+534    	; 0x698e <si5351_set_freq+0x326>
    6778:	82 e0       	ldi	r24, 0x02	; 2
    677a:	8d 83       	std	Y+5, r24	; 0x05
    677c:	88 8d       	ldd	r24, Y+24	; 0x18
    677e:	99 8d       	ldd	r25, Y+25	; 0x19
    6780:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6782:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6784:	80 93 19 48 	sts	0x4819, r24	; 0x804819 <_ZL9clock_out+0x4>
    6788:	90 93 1a 48 	sts	0x481A, r25	; 0x80481a <_ZL9clock_out+0x5>
    678c:	a0 93 1b 48 	sts	0x481B, r26	; 0x80481b <_ZL9clock_out+0x6>
    6790:	b0 93 1c 48 	sts	0x481C, r27	; 0x80481c <_ZL9clock_out+0x7>
    6794:	28 c0       	rjmp	.+80     	; 0x67e6 <si5351_set_freq+0x17e>
    6796:	80 91 14 48 	lds	r24, 0x4814	; 0x804814 <_ZL17enabledClocksMask>
    679a:	84 60       	ori	r24, 0x04	; 4
    679c:	80 93 14 48 	sts	0x4814, r24	; 0x804814 <_ZL17enabledClocksMask>
    67a0:	82 e1       	ldi	r24, 0x12	; 18
    67a2:	8e 83       	std	Y+6, r24	; 0x06
    67a4:	80 91 14 48 	lds	r24, 0x4814	; 0x804814 <_ZL17enabledClocksMask>
    67a8:	80 95       	com	r24
    67aa:	8c 6f       	ori	r24, 0xFC	; 252
    67ac:	8e 8b       	std	Y+22, r24	; 0x16
    67ae:	ce 01       	movw	r24, r28
    67b0:	46 96       	adiw	r24, 0x16	; 22
    67b2:	41 e0       	ldi	r20, 0x01	; 1
    67b4:	bc 01       	movw	r22, r24
    67b6:	83 e0       	ldi	r24, 0x03	; 3
    67b8:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    67bc:	88 23       	and	r24, r24
    67be:	11 f0       	breq	.+4      	; 0x67c4 <si5351_set_freq+0x15c>
    67c0:	81 e0       	ldi	r24, 0x01	; 1
    67c2:	e5 c0       	rjmp	.+458    	; 0x698e <si5351_set_freq+0x326>
    67c4:	82 e0       	ldi	r24, 0x02	; 2
    67c6:	8d 83       	std	Y+5, r24	; 0x05
    67c8:	88 8d       	ldd	r24, Y+24	; 0x18
    67ca:	99 8d       	ldd	r25, Y+25	; 0x19
    67cc:	aa 8d       	ldd	r26, Y+26	; 0x1a
    67ce:	bb 8d       	ldd	r27, Y+27	; 0x1b
    67d0:	80 93 1d 48 	sts	0x481D, r24	; 0x80481d <_ZL9clock_out+0x8>
    67d4:	90 93 1e 48 	sts	0x481E, r25	; 0x80481e <_ZL9clock_out+0x9>
    67d8:	a0 93 1f 48 	sts	0x481F, r26	; 0x80481f <_ZL9clock_out+0xa>
    67dc:	b0 93 20 48 	sts	0x4820, r27	; 0x804820 <_ZL9clock_out+0xb>
    67e0:	02 c0       	rjmp	.+4      	; 0x67e6 <si5351_set_freq+0x17e>
    67e2:	81 e0       	ldi	r24, 0x01	; 1
    67e4:	d4 c0       	rjmp	.+424    	; 0x698e <si5351_set_freq+0x326>
    67e6:	8d 81       	ldd	r24, Y+5	; 0x05
    67e8:	81 30       	cpi	r24, 0x01	; 1
    67ea:	61 f0       	breq	.+24     	; 0x6804 <si5351_set_freq+0x19c>
    67ec:	80 91 10 48 	lds	r24, 0x4810	; 0x804810 <_ZL8freqVCOB>
    67f0:	90 91 11 48 	lds	r25, 0x4811	; 0x804811 <_ZL8freqVCOB+0x1>
    67f4:	a0 91 12 48 	lds	r26, 0x4812	; 0x804812 <_ZL8freqVCOB+0x2>
    67f8:	b0 91 13 48 	lds	r27, 0x4813	; 0x804813 <_ZL8freqVCOB+0x3>
    67fc:	89 2b       	or	r24, r25
    67fe:	8a 2b       	or	r24, r26
    6800:	8b 2b       	or	r24, r27
    6802:	c9 f4       	brne	.+50     	; 0x6836 <si5351_set_freq+0x1ce>
    6804:	be 01       	movw	r22, r28
    6806:	6b 5e       	subi	r22, 0xEB	; 235
    6808:	7f 4f       	sbci	r23, 0xFF	; 255
    680a:	9e 01       	movw	r18, r28
    680c:	2c 5e       	subi	r18, 0xEC	; 236
    680e:	3f 4f       	sbci	r19, 0xFF	; 255
    6810:	ae 01       	movw	r20, r28
    6812:	48 5f       	subi	r20, 0xF8	; 248
    6814:	5f 4f       	sbci	r21, 0xFF	; 255
    6816:	88 8d       	ldd	r24, Y+24	; 0x18
    6818:	99 8d       	ldd	r25, Y+25	; 0x19
    681a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    681c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    681e:	8b 01       	movw	r16, r22
    6820:	bc 01       	movw	r22, r24
    6822:	cd 01       	movw	r24, r26
    6824:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    6828:	dc 01       	movw	r26, r24
    682a:	cb 01       	movw	r24, r22
    682c:	89 83       	std	Y+1, r24	; 0x01
    682e:	9a 83       	std	Y+2, r25	; 0x02
    6830:	ab 83       	std	Y+3, r26	; 0x03
    6832:	bc 83       	std	Y+4, r27	; 0x04
    6834:	18 c0       	rjmp	.+48     	; 0x6866 <si5351_set_freq+0x1fe>
    6836:	be 01       	movw	r22, r28
    6838:	6b 5e       	subi	r22, 0xEB	; 235
    683a:	7f 4f       	sbci	r23, 0xFF	; 255
    683c:	9e 01       	movw	r18, r28
    683e:	2c 5e       	subi	r18, 0xEC	; 236
    6840:	3f 4f       	sbci	r19, 0xFF	; 255
    6842:	ae 01       	movw	r20, r28
    6844:	48 5f       	subi	r20, 0xF8	; 248
    6846:	5f 4f       	sbci	r21, 0xFF	; 255
    6848:	88 8d       	ldd	r24, Y+24	; 0x18
    684a:	99 8d       	ldd	r25, Y+25	; 0x19
    684c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    684e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6850:	8b 01       	movw	r16, r22
    6852:	bc 01       	movw	r22, r24
    6854:	cd 01       	movw	r24, r26
    6856:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
    685a:	dc 01       	movw	r26, r24
    685c:	cb 01       	movw	r24, r22
    685e:	88 8f       	std	Y+24, r24	; 0x18
    6860:	99 8f       	std	Y+25, r25	; 0x19
    6862:	aa 8f       	std	Y+26, r26	; 0x1a
    6864:	bb 8f       	std	Y+27, r27	; 0x1b
    6866:	6d 81       	ldd	r22, Y+5	; 0x05
    6868:	8c 8d       	ldd	r24, Y+28	; 0x1c
    686a:	0e 94 ce 3a 	call	0x759c	; 0x759c <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    686e:	88 23       	and	r24, r24
    6870:	11 f0       	breq	.+4      	; 0x6876 <si5351_set_freq+0x20e>
    6872:	81 e0       	ldi	r24, 0x01	; 1
    6874:	8c c0       	rjmp	.+280    	; 0x698e <si5351_set_freq+0x326>
    6876:	8d 89       	ldd	r24, Y+21	; 0x15
    6878:	9c 89       	ldd	r25, Y+20	; 0x14
    687a:	8f 93       	push	r24
    687c:	8f 80       	ldd	r8, Y+7	; 0x07
    687e:	a9 2e       	mov	r10, r25
    6880:	c8 84       	ldd	r12, Y+8	; 0x08
    6882:	d9 84       	ldd	r13, Y+9	; 0x09
    6884:	ea 84       	ldd	r14, Y+10	; 0x0a
    6886:	fb 84       	ldd	r15, Y+11	; 0x0b
    6888:	0c 85       	ldd	r16, Y+12	; 0x0c
    688a:	1d 85       	ldd	r17, Y+13	; 0x0d
    688c:	2e 85       	ldd	r18, Y+14	; 0x0e
    688e:	3f 85       	ldd	r19, Y+15	; 0x0f
    6890:	48 89       	ldd	r20, Y+16	; 0x10
    6892:	59 89       	ldd	r21, Y+17	; 0x11
    6894:	6a 89       	ldd	r22, Y+18	; 0x12
    6896:	7b 89       	ldd	r23, Y+19	; 0x13
    6898:	8c 8d       	ldd	r24, Y+28	; 0x1c
    689a:	0e 94 0b 3b 	call	0x7616	; 0x7616 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    689e:	0f 90       	pop	r0
    68a0:	88 23       	and	r24, r24
    68a2:	11 f0       	breq	.+4      	; 0x68a8 <si5351_set_freq+0x240>
    68a4:	81 e0       	ldi	r24, 0x01	; 1
    68a6:	73 c0       	rjmp	.+230    	; 0x698e <si5351_set_freq+0x326>
    68a8:	89 81       	ldd	r24, Y+1	; 0x01
    68aa:	9a 81       	ldd	r25, Y+2	; 0x02
    68ac:	ab 81       	ldd	r26, Y+3	; 0x03
    68ae:	bc 81       	ldd	r27, Y+4	; 0x04
    68b0:	89 2b       	or	r24, r25
    68b2:	8a 2b       	or	r24, r26
    68b4:	8b 2b       	or	r24, r27
    68b6:	49 f0       	breq	.+18     	; 0x68ca <si5351_set_freq+0x262>
    68b8:	89 81       	ldd	r24, Y+1	; 0x01
    68ba:	9a 81       	ldd	r25, Y+2	; 0x02
    68bc:	ab 81       	ldd	r26, Y+3	; 0x03
    68be:	bc 81       	ldd	r27, Y+4	; 0x04
    68c0:	4d 81       	ldd	r20, Y+5	; 0x05
    68c2:	bc 01       	movw	r22, r24
    68c4:	cd 01       	movw	r24, r26
    68c6:	0e 94 7d 35 	call	0x6afa	; 0x6afa <_Z7set_pllm10si5351_pll>
    68ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    68cc:	88 23       	and	r24, r24
    68ce:	71 f0       	breq	.+28     	; 0x68ec <si5351_set_freq+0x284>
    68d0:	80 91 14 48 	lds	r24, 0x4814	; 0x804814 <_ZL17enabledClocksMask>
    68d4:	8e 8b       	std	Y+22, r24	; 0x16
    68d6:	ce 01       	movw	r24, r28
    68d8:	46 96       	adiw	r24, 0x16	; 22
    68da:	41 e0       	ldi	r20, 0x01	; 1
    68dc:	bc 01       	movw	r22, r24
    68de:	83 e0       	ldi	r24, 0x03	; 3
    68e0:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    68e4:	88 23       	and	r24, r24
    68e6:	89 f0       	breq	.+34     	; 0x690a <si5351_set_freq+0x2a2>
    68e8:	81 e0       	ldi	r24, 0x01	; 1
    68ea:	51 c0       	rjmp	.+162    	; 0x698e <si5351_set_freq+0x326>
    68ec:	80 91 14 48 	lds	r24, 0x4814	; 0x804814 <_ZL17enabledClocksMask>
    68f0:	80 95       	com	r24
    68f2:	8e 8b       	std	Y+22, r24	; 0x16
    68f4:	ce 01       	movw	r24, r28
    68f6:	46 96       	adiw	r24, 0x16	; 22
    68f8:	41 e0       	ldi	r20, 0x01	; 1
    68fa:	bc 01       	movw	r22, r24
    68fc:	83 e0       	ldi	r24, 0x03	; 3
    68fe:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6902:	88 23       	and	r24, r24
    6904:	11 f0       	breq	.+4      	; 0x690a <si5351_set_freq+0x2a2>
    6906:	81 e0       	ldi	r24, 0x01	; 1
    6908:	42 c0       	rjmp	.+132    	; 0x698e <si5351_set_freq+0x326>
    690a:	8d 81       	ldd	r24, Y+5	; 0x05
    690c:	81 30       	cpi	r24, 0x01	; 1
    690e:	69 f4       	brne	.+26     	; 0x692a <si5351_set_freq+0x2c2>
    6910:	8c e4       	ldi	r24, 0x4C	; 76
    6912:	8e 8b       	std	Y+22, r24	; 0x16
    6914:	ce 01       	movw	r24, r28
    6916:	46 96       	adiw	r24, 0x16	; 22
    6918:	41 e0       	ldi	r20, 0x01	; 1
    691a:	bc 01       	movw	r22, r24
    691c:	8e 81       	ldd	r24, Y+6	; 0x06
    691e:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6922:	88 23       	and	r24, r24
    6924:	99 f1       	breq	.+102    	; 0x698c <si5351_set_freq+0x324>
    6926:	81 e0       	ldi	r24, 0x01	; 1
    6928:	32 c0       	rjmp	.+100    	; 0x698e <si5351_set_freq+0x326>
    692a:	8c 89       	ldd	r24, Y+20	; 0x14
    692c:	88 23       	and	r24, r24
    692e:	69 f0       	breq	.+26     	; 0x694a <si5351_set_freq+0x2e2>
    6930:	8c e6       	ldi	r24, 0x6C	; 108
    6932:	8e 8b       	std	Y+22, r24	; 0x16
    6934:	ce 01       	movw	r24, r28
    6936:	46 96       	adiw	r24, 0x16	; 22
    6938:	41 e0       	ldi	r20, 0x01	; 1
    693a:	bc 01       	movw	r22, r24
    693c:	8e 81       	ldd	r24, Y+6	; 0x06
    693e:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6942:	88 23       	and	r24, r24
    6944:	79 f0       	breq	.+30     	; 0x6964 <si5351_set_freq+0x2fc>
    6946:	81 e0       	ldi	r24, 0x01	; 1
    6948:	22 c0       	rjmp	.+68     	; 0x698e <si5351_set_freq+0x326>
    694a:	8c e2       	ldi	r24, 0x2C	; 44
    694c:	8e 8b       	std	Y+22, r24	; 0x16
    694e:	ce 01       	movw	r24, r28
    6950:	46 96       	adiw	r24, 0x16	; 22
    6952:	41 e0       	ldi	r20, 0x01	; 1
    6954:	bc 01       	movw	r22, r24
    6956:	8e 81       	ldd	r24, Y+6	; 0x06
    6958:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    695c:	88 23       	and	r24, r24
    695e:	11 f0       	breq	.+4      	; 0x6964 <si5351_set_freq+0x2fc>
    6960:	81 e0       	ldi	r24, 0x01	; 1
    6962:	15 c0       	rjmp	.+42     	; 0x698e <si5351_set_freq+0x326>
    6964:	89 81       	ldd	r24, Y+1	; 0x01
    6966:	9a 81       	ldd	r25, Y+2	; 0x02
    6968:	ab 81       	ldd	r26, Y+3	; 0x03
    696a:	bc 81       	ldd	r27, Y+4	; 0x04
    696c:	89 2b       	or	r24, r25
    696e:	8a 2b       	or	r24, r26
    6970:	8b 2b       	or	r24, r27
    6972:	61 f0       	breq	.+24     	; 0x698c <si5351_set_freq+0x324>
    6974:	89 81       	ldd	r24, Y+1	; 0x01
    6976:	9a 81       	ldd	r25, Y+2	; 0x02
    6978:	ab 81       	ldd	r26, Y+3	; 0x03
    697a:	bc 81       	ldd	r27, Y+4	; 0x04
    697c:	80 93 10 48 	sts	0x4810, r24	; 0x804810 <_ZL8freqVCOB>
    6980:	90 93 11 48 	sts	0x4811, r25	; 0x804811 <_ZL8freqVCOB+0x1>
    6984:	a0 93 12 48 	sts	0x4812, r26	; 0x804812 <_ZL8freqVCOB+0x2>
    6988:	b0 93 13 48 	sts	0x4813, r27	; 0x804813 <_ZL8freqVCOB+0x3>
    698c:	80 e0       	ldi	r24, 0x00	; 0
    698e:	6d 96       	adiw	r28, 0x1d	; 29
    6990:	cd bf       	out	0x3d, r28	; 61
    6992:	de bf       	out	0x3e, r29	; 62
    6994:	df 91       	pop	r29
    6996:	cf 91       	pop	r28
    6998:	1f 91       	pop	r17
    699a:	0f 91       	pop	r16
    699c:	ff 90       	pop	r15
    699e:	ef 90       	pop	r14
    69a0:	df 90       	pop	r13
    69a2:	cf 90       	pop	r12
    69a4:	af 90       	pop	r10
    69a6:	8f 90       	pop	r8
    69a8:	08 95       	ret

000069aa <si5351_clock_enable>:
    69aa:	cf 93       	push	r28
    69ac:	df 93       	push	r29
    69ae:	cd b7       	in	r28, 0x3d	; 61
    69b0:	de b7       	in	r29, 0x3e	; 62
    69b2:	25 97       	sbiw	r28, 0x05	; 5
    69b4:	cd bf       	out	0x3d, r28	; 61
    69b6:	de bf       	out	0x3e, r29	; 62
    69b8:	8c 83       	std	Y+4, r24	; 0x04
    69ba:	6d 83       	std	Y+5, r22	; 0x05
    69bc:	ce 01       	movw	r24, r28
    69be:	02 96       	adiw	r24, 0x02	; 2
    69c0:	41 e0       	ldi	r20, 0x01	; 1
    69c2:	bc 01       	movw	r22, r24
    69c4:	83 e0       	ldi	r24, 0x03	; 3
    69c6:	0e 94 9c 3a 	call	0x7538	; 0x7538 <_Z16si5351_read_bulkhPhh>
    69ca:	88 23       	and	r24, r24
    69cc:	11 f0       	breq	.+4      	; 0x69d2 <si5351_clock_enable+0x28>
    69ce:	8c ef       	ldi	r24, 0xFC	; 252
    69d0:	31 c0       	rjmp	.+98     	; 0x6a34 <si5351_clock_enable+0x8a>
    69d2:	8a 81       	ldd	r24, Y+2	; 0x02
    69d4:	89 83       	std	Y+1, r24	; 0x01
    69d6:	8d 81       	ldd	r24, Y+5	; 0x05
    69d8:	88 23       	and	r24, r24
    69da:	81 f0       	breq	.+32     	; 0x69fc <si5351_clock_enable+0x52>
    69dc:	8c 81       	ldd	r24, Y+4	; 0x04
    69de:	28 2f       	mov	r18, r24
    69e0:	30 e0       	ldi	r19, 0x00	; 0
    69e2:	81 e0       	ldi	r24, 0x01	; 1
    69e4:	90 e0       	ldi	r25, 0x00	; 0
    69e6:	02 c0       	rjmp	.+4      	; 0x69ec <si5351_clock_enable+0x42>
    69e8:	88 0f       	add	r24, r24
    69ea:	99 1f       	adc	r25, r25
    69ec:	2a 95       	dec	r18
    69ee:	e2 f7       	brpl	.-8      	; 0x69e8 <si5351_clock_enable+0x3e>
    69f0:	98 2f       	mov	r25, r24
    69f2:	90 95       	com	r25
    69f4:	89 81       	ldd	r24, Y+1	; 0x01
    69f6:	89 23       	and	r24, r25
    69f8:	89 83       	std	Y+1, r24	; 0x01
    69fa:	0e c0       	rjmp	.+28     	; 0x6a18 <si5351_clock_enable+0x6e>
    69fc:	8c 81       	ldd	r24, Y+4	; 0x04
    69fe:	28 2f       	mov	r18, r24
    6a00:	30 e0       	ldi	r19, 0x00	; 0
    6a02:	81 e0       	ldi	r24, 0x01	; 1
    6a04:	90 e0       	ldi	r25, 0x00	; 0
    6a06:	02 c0       	rjmp	.+4      	; 0x6a0c <si5351_clock_enable+0x62>
    6a08:	88 0f       	add	r24, r24
    6a0a:	99 1f       	adc	r25, r25
    6a0c:	2a 95       	dec	r18
    6a0e:	e2 f7       	brpl	.-8      	; 0x6a08 <si5351_clock_enable+0x5e>
    6a10:	98 2f       	mov	r25, r24
    6a12:	89 81       	ldd	r24, Y+1	; 0x01
    6a14:	89 2b       	or	r24, r25
    6a16:	89 83       	std	Y+1, r24	; 0x01
    6a18:	89 81       	ldd	r24, Y+1	; 0x01
    6a1a:	8a 83       	std	Y+2, r24	; 0x02
    6a1c:	ce 01       	movw	r24, r28
    6a1e:	02 96       	adiw	r24, 0x02	; 2
    6a20:	41 e0       	ldi	r20, 0x01	; 1
    6a22:	bc 01       	movw	r22, r24
    6a24:	83 e0       	ldi	r24, 0x03	; 3
    6a26:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6a2a:	88 23       	and	r24, r24
    6a2c:	11 f0       	breq	.+4      	; 0x6a32 <si5351_clock_enable+0x88>
    6a2e:	8c ef       	ldi	r24, 0xFC	; 252
    6a30:	01 c0       	rjmp	.+2      	; 0x6a34 <si5351_clock_enable+0x8a>
    6a32:	80 e0       	ldi	r24, 0x00	; 0
    6a34:	25 96       	adiw	r28, 0x05	; 5
    6a36:	cd bf       	out	0x3d, r28	; 61
    6a38:	de bf       	out	0x3e, r29	; 62
    6a3a:	df 91       	pop	r29
    6a3c:	cf 91       	pop	r28
    6a3e:	08 95       	ret

00006a40 <si5351_drive_strength>:
    6a40:	cf 93       	push	r28
    6a42:	df 93       	push	r29
    6a44:	cd b7       	in	r28, 0x3d	; 61
    6a46:	de b7       	in	r29, 0x3e	; 62
    6a48:	26 97       	sbiw	r28, 0x06	; 6
    6a4a:	cd bf       	out	0x3d, r28	; 61
    6a4c:	de bf       	out	0x3e, r29	; 62
    6a4e:	8d 83       	std	Y+5, r24	; 0x05
    6a50:	6e 83       	std	Y+6, r22	; 0x06
    6a52:	83 e0       	ldi	r24, 0x03	; 3
    6a54:	8a 83       	std	Y+2, r24	; 0x02
    6a56:	8d 81       	ldd	r24, Y+5	; 0x05
    6a58:	20 e1       	ldi	r18, 0x10	; 16
    6a5a:	28 0f       	add	r18, r24
    6a5c:	ce 01       	movw	r24, r28
    6a5e:	03 96       	adiw	r24, 0x03	; 3
    6a60:	41 e0       	ldi	r20, 0x01	; 1
    6a62:	bc 01       	movw	r22, r24
    6a64:	82 2f       	mov	r24, r18
    6a66:	0e 94 9c 3a 	call	0x7538	; 0x7538 <_Z16si5351_read_bulkhPhh>
    6a6a:	88 23       	and	r24, r24
    6a6c:	11 f0       	breq	.+4      	; 0x6a72 <si5351_drive_strength+0x32>
    6a6e:	8b ef       	ldi	r24, 0xFB	; 251
    6a70:	3e c0       	rjmp	.+124    	; 0x6aee <si5351_drive_strength+0xae>
    6a72:	8b 81       	ldd	r24, Y+3	; 0x03
    6a74:	89 83       	std	Y+1, r24	; 0x01
    6a76:	8e 81       	ldd	r24, Y+6	; 0x06
    6a78:	88 2f       	mov	r24, r24
    6a7a:	90 e0       	ldi	r25, 0x00	; 0
    6a7c:	81 30       	cpi	r24, 0x01	; 1
    6a7e:	91 05       	cpc	r25, r1
    6a80:	81 f0       	breq	.+32     	; 0x6aa2 <si5351_drive_strength+0x62>
    6a82:	82 30       	cpi	r24, 0x02	; 2
    6a84:	91 05       	cpc	r25, r1
    6a86:	1c f4       	brge	.+6      	; 0x6a8e <si5351_drive_strength+0x4e>
    6a88:	89 2b       	or	r24, r25
    6a8a:	39 f0       	breq	.+14     	; 0x6a9a <si5351_drive_strength+0x5a>
    6a8c:	1f c0       	rjmp	.+62     	; 0x6acc <si5351_drive_strength+0x8c>
    6a8e:	82 30       	cpi	r24, 0x02	; 2
    6a90:	91 05       	cpc	r25, r1
    6a92:	71 f0       	breq	.+28     	; 0x6ab0 <si5351_drive_strength+0x70>
    6a94:	03 97       	sbiw	r24, 0x03	; 3
    6a96:	99 f0       	breq	.+38     	; 0x6abe <si5351_drive_strength+0x7e>
    6a98:	19 c0       	rjmp	.+50     	; 0x6acc <si5351_drive_strength+0x8c>
    6a9a:	89 81       	ldd	r24, Y+1	; 0x01
    6a9c:	8c 7f       	andi	r24, 0xFC	; 252
    6a9e:	89 83       	std	Y+1, r24	; 0x01
    6aa0:	15 c0       	rjmp	.+42     	; 0x6acc <si5351_drive_strength+0x8c>
    6aa2:	89 81       	ldd	r24, Y+1	; 0x01
    6aa4:	8c 7f       	andi	r24, 0xFC	; 252
    6aa6:	89 83       	std	Y+1, r24	; 0x01
    6aa8:	89 81       	ldd	r24, Y+1	; 0x01
    6aaa:	81 60       	ori	r24, 0x01	; 1
    6aac:	89 83       	std	Y+1, r24	; 0x01
    6aae:	0e c0       	rjmp	.+28     	; 0x6acc <si5351_drive_strength+0x8c>
    6ab0:	89 81       	ldd	r24, Y+1	; 0x01
    6ab2:	8c 7f       	andi	r24, 0xFC	; 252
    6ab4:	89 83       	std	Y+1, r24	; 0x01
    6ab6:	89 81       	ldd	r24, Y+1	; 0x01
    6ab8:	82 60       	ori	r24, 0x02	; 2
    6aba:	89 83       	std	Y+1, r24	; 0x01
    6abc:	07 c0       	rjmp	.+14     	; 0x6acc <si5351_drive_strength+0x8c>
    6abe:	89 81       	ldd	r24, Y+1	; 0x01
    6ac0:	8c 7f       	andi	r24, 0xFC	; 252
    6ac2:	89 83       	std	Y+1, r24	; 0x01
    6ac4:	89 81       	ldd	r24, Y+1	; 0x01
    6ac6:	83 60       	ori	r24, 0x03	; 3
    6ac8:	89 83       	std	Y+1, r24	; 0x01
    6aca:	00 00       	nop
    6acc:	89 81       	ldd	r24, Y+1	; 0x01
    6ace:	8b 83       	std	Y+3, r24	; 0x03
    6ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ad2:	20 e1       	ldi	r18, 0x10	; 16
    6ad4:	28 0f       	add	r18, r24
    6ad6:	ce 01       	movw	r24, r28
    6ad8:	03 96       	adiw	r24, 0x03	; 3
    6ada:	41 e0       	ldi	r20, 0x01	; 1
    6adc:	bc 01       	movw	r22, r24
    6ade:	82 2f       	mov	r24, r18
    6ae0:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6ae4:	88 23       	and	r24, r24
    6ae6:	11 f0       	breq	.+4      	; 0x6aec <si5351_drive_strength+0xac>
    6ae8:	8b ef       	ldi	r24, 0xFB	; 251
    6aea:	01 c0       	rjmp	.+2      	; 0x6aee <si5351_drive_strength+0xae>
    6aec:	80 e0       	ldi	r24, 0x00	; 0
    6aee:	26 96       	adiw	r28, 0x06	; 6
    6af0:	cd bf       	out	0x3d, r28	; 61
    6af2:	de bf       	out	0x3e, r29	; 62
    6af4:	df 91       	pop	r29
    6af6:	cf 91       	pop	r28
    6af8:	08 95       	ret

00006afa <_Z7set_pllm10si5351_pll>:
    6afa:	cf 93       	push	r28
    6afc:	df 93       	push	r29
    6afe:	cd b7       	in	r28, 0x3d	; 61
    6b00:	de b7       	in	r29, 0x3e	; 62
    6b02:	6c 97       	sbiw	r28, 0x1c	; 28
    6b04:	cd bf       	out	0x3d, r28	; 61
    6b06:	de bf       	out	0x3e, r29	; 62
    6b08:	68 8f       	std	Y+24, r22	; 0x18
    6b0a:	79 8f       	std	Y+25, r23	; 0x19
    6b0c:	8a 8f       	std	Y+26, r24	; 0x1a
    6b0e:	9b 8f       	std	Y+27, r25	; 0x1b
    6b10:	4c 8f       	std	Y+28, r20	; 0x1c
    6b12:	9e 01       	movw	r18, r28
    6b14:	2e 5f       	subi	r18, 0xFE	; 254
    6b16:	3f 4f       	sbci	r19, 0xFF	; 255
    6b18:	88 8d       	ldd	r24, Y+24	; 0x18
    6b1a:	99 8d       	ldd	r25, Y+25	; 0x19
    6b1c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6b1e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6b20:	a9 01       	movw	r20, r18
    6b22:	bc 01       	movw	r22, r24
    6b24:	cd 01       	movw	r24, r26
    6b26:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <_Z8pll_calcmP13u_si5351_regs>
    6b2a:	88 23       	and	r24, r24
    6b2c:	11 f0       	breq	.+4      	; 0x6b32 <_Z7set_pllm10si5351_pll+0x38>
    6b2e:	81 e0       	ldi	r24, 0x01	; 1
    6b30:	a7 c0       	rjmp	.+334    	; 0x6c80 <_Z7set_pllm10si5351_pll+0x186>
    6b32:	19 82       	std	Y+1, r1	; 0x01
    6b34:	89 81       	ldd	r24, Y+1	; 0x01
    6b36:	91 e0       	ldi	r25, 0x01	; 1
    6b38:	98 0f       	add	r25, r24
    6b3a:	99 83       	std	Y+1, r25	; 0x01
    6b3c:	88 2f       	mov	r24, r24
    6b3e:	90 e0       	ldi	r25, 0x00	; 0
    6b40:	4b 85       	ldd	r20, Y+11	; 0x0b
    6b42:	9e 01       	movw	r18, r28
    6b44:	22 5f       	subi	r18, 0xF2	; 242
    6b46:	3f 4f       	sbci	r19, 0xFF	; 255
    6b48:	82 0f       	add	r24, r18
    6b4a:	93 1f       	adc	r25, r19
    6b4c:	fc 01       	movw	r30, r24
    6b4e:	40 83       	st	Z, r20
    6b50:	89 81       	ldd	r24, Y+1	; 0x01
    6b52:	91 e0       	ldi	r25, 0x01	; 1
    6b54:	98 0f       	add	r25, r24
    6b56:	99 83       	std	Y+1, r25	; 0x01
    6b58:	88 2f       	mov	r24, r24
    6b5a:	90 e0       	ldi	r25, 0x00	; 0
    6b5c:	4a 85       	ldd	r20, Y+10	; 0x0a
    6b5e:	9e 01       	movw	r18, r28
    6b60:	22 5f       	subi	r18, 0xF2	; 242
    6b62:	3f 4f       	sbci	r19, 0xFF	; 255
    6b64:	82 0f       	add	r24, r18
    6b66:	93 1f       	adc	r25, r19
    6b68:	fc 01       	movw	r30, r24
    6b6a:	40 83       	st	Z, r20
    6b6c:	89 81       	ldd	r24, Y+1	; 0x01
    6b6e:	91 e0       	ldi	r25, 0x01	; 1
    6b70:	98 0f       	add	r25, r24
    6b72:	99 83       	std	Y+1, r25	; 0x01
    6b74:	88 2f       	mov	r24, r24
    6b76:	90 e0       	ldi	r25, 0x00	; 0
    6b78:	2c 81       	ldd	r18, Y+4	; 0x04
    6b7a:	42 2f       	mov	r20, r18
    6b7c:	43 70       	andi	r20, 0x03	; 3
    6b7e:	9e 01       	movw	r18, r28
    6b80:	22 5f       	subi	r18, 0xF2	; 242
    6b82:	3f 4f       	sbci	r19, 0xFF	; 255
    6b84:	82 0f       	add	r24, r18
    6b86:	93 1f       	adc	r25, r19
    6b88:	fc 01       	movw	r30, r24
    6b8a:	40 83       	st	Z, r20
    6b8c:	89 81       	ldd	r24, Y+1	; 0x01
    6b8e:	91 e0       	ldi	r25, 0x01	; 1
    6b90:	98 0f       	add	r25, r24
    6b92:	99 83       	std	Y+1, r25	; 0x01
    6b94:	88 2f       	mov	r24, r24
    6b96:	90 e0       	ldi	r25, 0x00	; 0
    6b98:	4b 81       	ldd	r20, Y+3	; 0x03
    6b9a:	9e 01       	movw	r18, r28
    6b9c:	22 5f       	subi	r18, 0xF2	; 242
    6b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6ba0:	82 0f       	add	r24, r18
    6ba2:	93 1f       	adc	r25, r19
    6ba4:	fc 01       	movw	r30, r24
    6ba6:	40 83       	st	Z, r20
    6ba8:	89 81       	ldd	r24, Y+1	; 0x01
    6baa:	91 e0       	ldi	r25, 0x01	; 1
    6bac:	98 0f       	add	r25, r24
    6bae:	99 83       	std	Y+1, r25	; 0x01
    6bb0:	88 2f       	mov	r24, r24
    6bb2:	90 e0       	ldi	r25, 0x00	; 0
    6bb4:	4a 81       	ldd	r20, Y+2	; 0x02
    6bb6:	9e 01       	movw	r18, r28
    6bb8:	22 5f       	subi	r18, 0xF2	; 242
    6bba:	3f 4f       	sbci	r19, 0xFF	; 255
    6bbc:	82 0f       	add	r24, r18
    6bbe:	93 1f       	adc	r25, r19
    6bc0:	fc 01       	movw	r30, r24
    6bc2:	40 83       	st	Z, r20
    6bc4:	89 81       	ldd	r24, Y+1	; 0x01
    6bc6:	88 2f       	mov	r24, r24
    6bc8:	90 e0       	ldi	r25, 0x00	; 0
    6bca:	2c 85       	ldd	r18, Y+12	; 0x0c
    6bcc:	42 2f       	mov	r20, r18
    6bce:	42 95       	swap	r20
    6bd0:	40 7f       	andi	r20, 0xF0	; 240
    6bd2:	9e 01       	movw	r18, r28
    6bd4:	22 5f       	subi	r18, 0xF2	; 242
    6bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    6bd8:	82 0f       	add	r24, r18
    6bda:	93 1f       	adc	r25, r19
    6bdc:	fc 01       	movw	r30, r24
    6bde:	40 83       	st	Z, r20
    6be0:	29 81       	ldd	r18, Y+1	; 0x01
    6be2:	81 e0       	ldi	r24, 0x01	; 1
    6be4:	82 0f       	add	r24, r18
    6be6:	89 83       	std	Y+1, r24	; 0x01
    6be8:	82 2f       	mov	r24, r18
    6bea:	90 e0       	ldi	r25, 0x00	; 0
    6bec:	22 2f       	mov	r18, r18
    6bee:	30 e0       	ldi	r19, 0x00	; 0
    6bf0:	ae 01       	movw	r20, r28
    6bf2:	42 5f       	subi	r20, 0xF2	; 242
    6bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    6bf6:	24 0f       	add	r18, r20
    6bf8:	35 1f       	adc	r19, r21
    6bfa:	f9 01       	movw	r30, r18
    6bfc:	30 81       	ld	r19, Z
    6bfe:	28 85       	ldd	r18, Y+8	; 0x08
    6c00:	2f 70       	andi	r18, 0x0F	; 15
    6c02:	43 2f       	mov	r20, r19
    6c04:	42 0f       	add	r20, r18
    6c06:	9e 01       	movw	r18, r28
    6c08:	22 5f       	subi	r18, 0xF2	; 242
    6c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c0c:	82 0f       	add	r24, r18
    6c0e:	93 1f       	adc	r25, r19
    6c10:	fc 01       	movw	r30, r24
    6c12:	40 83       	st	Z, r20
    6c14:	89 81       	ldd	r24, Y+1	; 0x01
    6c16:	91 e0       	ldi	r25, 0x01	; 1
    6c18:	98 0f       	add	r25, r24
    6c1a:	99 83       	std	Y+1, r25	; 0x01
    6c1c:	88 2f       	mov	r24, r24
    6c1e:	90 e0       	ldi	r25, 0x00	; 0
    6c20:	4f 81       	ldd	r20, Y+7	; 0x07
    6c22:	9e 01       	movw	r18, r28
    6c24:	22 5f       	subi	r18, 0xF2	; 242
    6c26:	3f 4f       	sbci	r19, 0xFF	; 255
    6c28:	82 0f       	add	r24, r18
    6c2a:	93 1f       	adc	r25, r19
    6c2c:	fc 01       	movw	r30, r24
    6c2e:	40 83       	st	Z, r20
    6c30:	89 81       	ldd	r24, Y+1	; 0x01
    6c32:	91 e0       	ldi	r25, 0x01	; 1
    6c34:	98 0f       	add	r25, r24
    6c36:	99 83       	std	Y+1, r25	; 0x01
    6c38:	88 2f       	mov	r24, r24
    6c3a:	90 e0       	ldi	r25, 0x00	; 0
    6c3c:	4e 81       	ldd	r20, Y+6	; 0x06
    6c3e:	9e 01       	movw	r18, r28
    6c40:	22 5f       	subi	r18, 0xF2	; 242
    6c42:	3f 4f       	sbci	r19, 0xFF	; 255
    6c44:	82 0f       	add	r24, r18
    6c46:	93 1f       	adc	r25, r19
    6c48:	fc 01       	movw	r30, r24
    6c4a:	40 83       	st	Z, r20
    6c4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6c4e:	81 30       	cpi	r24, 0x01	; 1
    6c50:	59 f4       	brne	.+22     	; 0x6c68 <_Z7set_pllm10si5351_pll+0x16e>
    6c52:	ce 01       	movw	r24, r28
    6c54:	0e 96       	adiw	r24, 0x0e	; 14
    6c56:	49 81       	ldd	r20, Y+1	; 0x01
    6c58:	bc 01       	movw	r22, r24
    6c5a:	8a e1       	ldi	r24, 0x1A	; 26
    6c5c:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6c60:	88 23       	and	r24, r24
    6c62:	69 f0       	breq	.+26     	; 0x6c7e <_Z7set_pllm10si5351_pll+0x184>
    6c64:	81 e0       	ldi	r24, 0x01	; 1
    6c66:	0c c0       	rjmp	.+24     	; 0x6c80 <_Z7set_pllm10si5351_pll+0x186>
    6c68:	ce 01       	movw	r24, r28
    6c6a:	0e 96       	adiw	r24, 0x0e	; 14
    6c6c:	49 81       	ldd	r20, Y+1	; 0x01
    6c6e:	bc 01       	movw	r22, r24
    6c70:	82 e2       	ldi	r24, 0x22	; 34
    6c72:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    6c76:	88 23       	and	r24, r24
    6c78:	11 f0       	breq	.+4      	; 0x6c7e <_Z7set_pllm10si5351_pll+0x184>
    6c7a:	81 e0       	ldi	r24, 0x01	; 1
    6c7c:	01 c0       	rjmp	.+2      	; 0x6c80 <_Z7set_pllm10si5351_pll+0x186>
    6c7e:	80 e0       	ldi	r24, 0x00	; 0
    6c80:	6c 96       	adiw	r28, 0x1c	; 28
    6c82:	cd bf       	out	0x3d, r28	; 61
    6c84:	de bf       	out	0x3e, r29	; 62
    6c86:	df 91       	pop	r29
    6c88:	cf 91       	pop	r28
    6c8a:	08 95       	ret

00006c8c <_Z8pll_calcmP13u_si5351_regs>:
    6c8c:	cf 93       	push	r28
    6c8e:	df 93       	push	r29
    6c90:	cd b7       	in	r28, 0x3d	; 61
    6c92:	de b7       	in	r29, 0x3e	; 62
    6c94:	6e 97       	sbiw	r28, 0x1e	; 30
    6c96:	cd bf       	out	0x3d, r28	; 61
    6c98:	de bf       	out	0x3e, r29	; 62
    6c9a:	69 8f       	std	Y+25, r22	; 0x19
    6c9c:	7a 8f       	std	Y+26, r23	; 0x1a
    6c9e:	8b 8f       	std	Y+27, r24	; 0x1b
    6ca0:	9c 8f       	std	Y+28, r25	; 0x1c
    6ca2:	4d 8f       	std	Y+29, r20	; 0x1d
    6ca4:	5e 8f       	std	Y+30, r21	; 0x1e
    6ca6:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    6caa:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    6cae:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    6cb2:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    6cb6:	89 83       	std	Y+1, r24	; 0x01
    6cb8:	9a 83       	std	Y+2, r25	; 0x02
    6cba:	ab 83       	std	Y+3, r26	; 0x03
    6cbc:	bc 83       	std	Y+4, r27	; 0x04
    6cbe:	89 8d       	ldd	r24, Y+25	; 0x19
    6cc0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6cc2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6cc4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6cc6:	29 81       	ldd	r18, Y+1	; 0x01
    6cc8:	3a 81       	ldd	r19, Y+2	; 0x02
    6cca:	4b 81       	ldd	r20, Y+3	; 0x03
    6ccc:	5c 81       	ldd	r21, Y+4	; 0x04
    6cce:	bc 01       	movw	r22, r24
    6cd0:	cd 01       	movw	r24, r26
    6cd2:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    6cd6:	da 01       	movw	r26, r20
    6cd8:	c9 01       	movw	r24, r18
    6cda:	8d 83       	std	Y+5, r24	; 0x05
    6cdc:	9e 83       	std	Y+6, r25	; 0x06
    6cde:	af 83       	std	Y+7, r26	; 0x07
    6ce0:	b8 87       	std	Y+8, r27	; 0x08
    6ce2:	89 8d       	ldd	r24, Y+25	; 0x19
    6ce4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6ce6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6ce8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6cea:	29 81       	ldd	r18, Y+1	; 0x01
    6cec:	3a 81       	ldd	r19, Y+2	; 0x02
    6cee:	4b 81       	ldd	r20, Y+3	; 0x03
    6cf0:	5c 81       	ldd	r21, Y+4	; 0x04
    6cf2:	bc 01       	movw	r22, r24
    6cf4:	cd 01       	movw	r24, r26
    6cf6:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    6cfa:	dc 01       	movw	r26, r24
    6cfc:	cb 01       	movw	r24, r22
    6cfe:	89 8b       	std	Y+17, r24	; 0x11
    6d00:	9a 8b       	std	Y+18, r25	; 0x12
    6d02:	ab 8b       	std	Y+19, r26	; 0x13
    6d04:	bc 8b       	std	Y+20, r27	; 0x14
    6d06:	89 81       	ldd	r24, Y+1	; 0x01
    6d08:	9a 81       	ldd	r25, Y+2	; 0x02
    6d0a:	ab 81       	ldd	r26, Y+3	; 0x03
    6d0c:	bc 81       	ldd	r27, Y+4	; 0x04
    6d0e:	8d 8b       	std	Y+21, r24	; 0x15
    6d10:	9e 8b       	std	Y+22, r25	; 0x16
    6d12:	af 8b       	std	Y+23, r26	; 0x17
    6d14:	b8 8f       	std	Y+24, r27	; 0x18
    6d16:	9e 01       	movw	r18, r28
    6d18:	2b 5e       	subi	r18, 0xEB	; 235
    6d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d1c:	ce 01       	movw	r24, r28
    6d1e:	41 96       	adiw	r24, 0x11	; 17
    6d20:	b9 01       	movw	r22, r18
    6d22:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <_Z13reduce_by_gcdPmS_>
    6d26:	89 89       	ldd	r24, Y+17	; 0x11
    6d28:	9a 89       	ldd	r25, Y+18	; 0x12
    6d2a:	ab 89       	ldd	r26, Y+19	; 0x13
    6d2c:	bc 89       	ldd	r27, Y+20	; 0x14
    6d2e:	88 0f       	add	r24, r24
    6d30:	99 1f       	adc	r25, r25
    6d32:	aa 1f       	adc	r26, r26
    6d34:	bb 1f       	adc	r27, r27
    6d36:	88 0f       	add	r24, r24
    6d38:	99 1f       	adc	r25, r25
    6d3a:	aa 1f       	adc	r26, r26
    6d3c:	bb 1f       	adc	r27, r27
    6d3e:	88 0f       	add	r24, r24
    6d40:	99 1f       	adc	r25, r25
    6d42:	aa 1f       	adc	r26, r26
    6d44:	bb 1f       	adc	r27, r27
    6d46:	88 0f       	add	r24, r24
    6d48:	99 1f       	adc	r25, r25
    6d4a:	aa 1f       	adc	r26, r26
    6d4c:	bb 1f       	adc	r27, r27
    6d4e:	88 0f       	add	r24, r24
    6d50:	99 1f       	adc	r25, r25
    6d52:	aa 1f       	adc	r26, r26
    6d54:	bb 1f       	adc	r27, r27
    6d56:	88 0f       	add	r24, r24
    6d58:	99 1f       	adc	r25, r25
    6d5a:	aa 1f       	adc	r26, r26
    6d5c:	bb 1f       	adc	r27, r27
    6d5e:	88 0f       	add	r24, r24
    6d60:	99 1f       	adc	r25, r25
    6d62:	aa 1f       	adc	r26, r26
    6d64:	bb 1f       	adc	r27, r27
    6d66:	89 87       	std	Y+9, r24	; 0x09
    6d68:	9a 87       	std	Y+10, r25	; 0x0a
    6d6a:	ab 87       	std	Y+11, r26	; 0x0b
    6d6c:	bc 87       	std	Y+12, r27	; 0x0c
    6d6e:	2d 89       	ldd	r18, Y+21	; 0x15
    6d70:	3e 89       	ldd	r19, Y+22	; 0x16
    6d72:	4f 89       	ldd	r20, Y+23	; 0x17
    6d74:	58 8d       	ldd	r21, Y+24	; 0x18
    6d76:	89 85       	ldd	r24, Y+9	; 0x09
    6d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d7a:	ab 85       	ldd	r26, Y+11	; 0x0b
    6d7c:	bc 85       	ldd	r27, Y+12	; 0x0c
    6d7e:	bc 01       	movw	r22, r24
    6d80:	cd 01       	movw	r24, r26
    6d82:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    6d86:	da 01       	movw	r26, r20
    6d88:	c9 01       	movw	r24, r18
    6d8a:	8d 87       	std	Y+13, r24	; 0x0d
    6d8c:	9e 87       	std	Y+14, r25	; 0x0e
    6d8e:	af 87       	std	Y+15, r26	; 0x0f
    6d90:	b8 8b       	std	Y+16, r27	; 0x10
    6d92:	8d 81       	ldd	r24, Y+5	; 0x05
    6d94:	9e 81       	ldd	r25, Y+6	; 0x06
    6d96:	af 81       	ldd	r26, Y+7	; 0x07
    6d98:	b8 85       	ldd	r27, Y+8	; 0x08
    6d9a:	88 0f       	add	r24, r24
    6d9c:	99 1f       	adc	r25, r25
    6d9e:	aa 1f       	adc	r26, r26
    6da0:	bb 1f       	adc	r27, r27
    6da2:	88 0f       	add	r24, r24
    6da4:	99 1f       	adc	r25, r25
    6da6:	aa 1f       	adc	r26, r26
    6da8:	bb 1f       	adc	r27, r27
    6daa:	88 0f       	add	r24, r24
    6dac:	99 1f       	adc	r25, r25
    6dae:	aa 1f       	adc	r26, r26
    6db0:	bb 1f       	adc	r27, r27
    6db2:	88 0f       	add	r24, r24
    6db4:	99 1f       	adc	r25, r25
    6db6:	aa 1f       	adc	r26, r26
    6db8:	bb 1f       	adc	r27, r27
    6dba:	88 0f       	add	r24, r24
    6dbc:	99 1f       	adc	r25, r25
    6dbe:	aa 1f       	adc	r26, r26
    6dc0:	bb 1f       	adc	r27, r27
    6dc2:	88 0f       	add	r24, r24
    6dc4:	99 1f       	adc	r25, r25
    6dc6:	aa 1f       	adc	r26, r26
    6dc8:	bb 1f       	adc	r27, r27
    6dca:	88 0f       	add	r24, r24
    6dcc:	99 1f       	adc	r25, r25
    6dce:	aa 1f       	adc	r26, r26
    6dd0:	bb 1f       	adc	r27, r27
    6dd2:	9c 01       	movw	r18, r24
    6dd4:	ad 01       	movw	r20, r26
    6dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dda:	af 85       	ldd	r26, Y+15	; 0x0f
    6ddc:	b8 89       	ldd	r27, Y+16	; 0x10
    6dde:	82 0f       	add	r24, r18
    6de0:	93 1f       	adc	r25, r19
    6de2:	a4 1f       	adc	r26, r20
    6de4:	b5 1f       	adc	r27, r21
    6de6:	92 50       	subi	r25, 0x02	; 2
    6de8:	a1 09       	sbc	r26, r1
    6dea:	b1 09       	sbc	r27, r1
    6dec:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6dee:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6df0:	f9 01       	movw	r30, r18
    6df2:	80 83       	st	Z, r24
    6df4:	91 83       	std	Z+1, r25	; 0x01
    6df6:	a2 83       	std	Z+2, r26	; 0x02
    6df8:	b3 83       	std	Z+3, r27	; 0x03
    6dfa:	2d 89       	ldd	r18, Y+21	; 0x15
    6dfc:	3e 89       	ldd	r19, Y+22	; 0x16
    6dfe:	4f 89       	ldd	r20, Y+23	; 0x17
    6e00:	58 8d       	ldd	r21, Y+24	; 0x18
    6e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e06:	af 85       	ldd	r26, Y+15	; 0x0f
    6e08:	b8 89       	ldd	r27, Y+16	; 0x10
    6e0a:	bc 01       	movw	r22, r24
    6e0c:	cd 01       	movw	r24, r26
    6e0e:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    6e12:	9b 01       	movw	r18, r22
    6e14:	ac 01       	movw	r20, r24
    6e16:	89 85       	ldd	r24, Y+9	; 0x09
    6e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e1a:	ab 85       	ldd	r26, Y+11	; 0x0b
    6e1c:	bc 85       	ldd	r27, Y+12	; 0x0c
    6e1e:	82 1b       	sub	r24, r18
    6e20:	93 0b       	sbc	r25, r19
    6e22:	a4 0b       	sbc	r26, r20
    6e24:	b5 0b       	sbc	r27, r21
    6e26:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6e28:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6e2a:	f9 01       	movw	r30, r18
    6e2c:	84 83       	std	Z+4, r24	; 0x04
    6e2e:	95 83       	std	Z+5, r25	; 0x05
    6e30:	a6 83       	std	Z+6, r26	; 0x06
    6e32:	b7 83       	std	Z+7, r27	; 0x07
    6e34:	8d 89       	ldd	r24, Y+21	; 0x15
    6e36:	9e 89       	ldd	r25, Y+22	; 0x16
    6e38:	af 89       	ldd	r26, Y+23	; 0x17
    6e3a:	b8 8d       	ldd	r27, Y+24	; 0x18
    6e3c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6e3e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6e40:	f9 01       	movw	r30, r18
    6e42:	80 87       	std	Z+8, r24	; 0x08
    6e44:	91 87       	std	Z+9, r25	; 0x09
    6e46:	a2 87       	std	Z+10, r26	; 0x0a
    6e48:	b3 87       	std	Z+11, r27	; 0x0b
    6e4a:	80 e0       	ldi	r24, 0x00	; 0
    6e4c:	6e 96       	adiw	r28, 0x1e	; 30
    6e4e:	cd bf       	out	0x3d, r28	; 61
    6e50:	de bf       	out	0x3e, r29	; 62
    6e52:	df 91       	pop	r29
    6e54:	cf 91       	pop	r28
    6e56:	08 95       	ret

00006e58 <_Z13reduce_by_gcdPmS_>:
    6e58:	cf 93       	push	r28
    6e5a:	df 93       	push	r29
    6e5c:	cd b7       	in	r28, 0x3d	; 61
    6e5e:	de b7       	in	r29, 0x3e	; 62
    6e60:	60 97       	sbiw	r28, 0x10	; 16
    6e62:	cd bf       	out	0x3d, r28	; 61
    6e64:	de bf       	out	0x3e, r29	; 62
    6e66:	8d 87       	std	Y+13, r24	; 0x0d
    6e68:	9e 87       	std	Y+14, r25	; 0x0e
    6e6a:	6f 87       	std	Y+15, r22	; 0x0f
    6e6c:	78 8b       	std	Y+16, r23	; 0x10
    6e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e72:	fc 01       	movw	r30, r24
    6e74:	80 81       	ld	r24, Z
    6e76:	91 81       	ldd	r25, Z+1	; 0x01
    6e78:	a2 81       	ldd	r26, Z+2	; 0x02
    6e7a:	b3 81       	ldd	r27, Z+3	; 0x03
    6e7c:	89 87       	std	Y+9, r24	; 0x09
    6e7e:	9a 87       	std	Y+10, r25	; 0x0a
    6e80:	ab 87       	std	Y+11, r26	; 0x0b
    6e82:	bc 87       	std	Y+12, r27	; 0x0c
    6e84:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e86:	98 89       	ldd	r25, Y+16	; 0x10
    6e88:	fc 01       	movw	r30, r24
    6e8a:	80 81       	ld	r24, Z
    6e8c:	91 81       	ldd	r25, Z+1	; 0x01
    6e8e:	a2 81       	ldd	r26, Z+2	; 0x02
    6e90:	b3 81       	ldd	r27, Z+3	; 0x03
    6e92:	8d 83       	std	Y+5, r24	; 0x05
    6e94:	9e 83       	std	Y+6, r25	; 0x06
    6e96:	af 83       	std	Y+7, r26	; 0x07
    6e98:	b8 87       	std	Y+8, r27	; 0x08
    6e9a:	89 85       	ldd	r24, Y+9	; 0x09
    6e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e9e:	ab 85       	ldd	r26, Y+11	; 0x0b
    6ea0:	bc 85       	ldd	r27, Y+12	; 0x0c
    6ea2:	89 2b       	or	r24, r25
    6ea4:	8a 2b       	or	r24, r26
    6ea6:	8b 2b       	or	r24, r27
    6ea8:	09 f4       	brne	.+2      	; 0x6eac <_Z13reduce_by_gcdPmS_+0x54>
    6eaa:	80 c0       	rjmp	.+256    	; 0x6fac <_Z13reduce_by_gcdPmS_+0x154>
    6eac:	8d 81       	ldd	r24, Y+5	; 0x05
    6eae:	9e 81       	ldd	r25, Y+6	; 0x06
    6eb0:	af 81       	ldd	r26, Y+7	; 0x07
    6eb2:	b8 85       	ldd	r27, Y+8	; 0x08
    6eb4:	89 2b       	or	r24, r25
    6eb6:	8a 2b       	or	r24, r26
    6eb8:	8b 2b       	or	r24, r27
    6eba:	09 f4       	brne	.+2      	; 0x6ebe <_Z13reduce_by_gcdPmS_+0x66>
    6ebc:	77 c0       	rjmp	.+238    	; 0x6fac <_Z13reduce_by_gcdPmS_+0x154>
    6ebe:	89 85       	ldd	r24, Y+9	; 0x09
    6ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ec2:	ab 85       	ldd	r26, Y+11	; 0x0b
    6ec4:	bc 85       	ldd	r27, Y+12	; 0x0c
    6ec6:	2d 81       	ldd	r18, Y+5	; 0x05
    6ec8:	3e 81       	ldd	r19, Y+6	; 0x06
    6eca:	4f 81       	ldd	r20, Y+7	; 0x07
    6ecc:	58 85       	ldd	r21, Y+8	; 0x08
    6ece:	bc 01       	movw	r22, r24
    6ed0:	cd 01       	movw	r24, r26
    6ed2:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    6ed6:	dc 01       	movw	r26, r24
    6ed8:	cb 01       	movw	r24, r22
    6eda:	89 83       	std	Y+1, r24	; 0x01
    6edc:	9a 83       	std	Y+2, r25	; 0x02
    6ede:	ab 83       	std	Y+3, r26	; 0x03
    6ee0:	bc 83       	std	Y+4, r27	; 0x04
    6ee2:	89 81       	ldd	r24, Y+1	; 0x01
    6ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ee6:	ab 81       	ldd	r26, Y+3	; 0x03
    6ee8:	bc 81       	ldd	r27, Y+4	; 0x04
    6eea:	89 2b       	or	r24, r25
    6eec:	8a 2b       	or	r24, r26
    6eee:	8b 2b       	or	r24, r27
    6ef0:	19 f1       	breq	.+70     	; 0x6f38 <_Z13reduce_by_gcdPmS_+0xe0>
    6ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ef6:	af 81       	ldd	r26, Y+7	; 0x07
    6ef8:	b8 85       	ldd	r27, Y+8	; 0x08
    6efa:	89 87       	std	Y+9, r24	; 0x09
    6efc:	9a 87       	std	Y+10, r25	; 0x0a
    6efe:	ab 87       	std	Y+11, r26	; 0x0b
    6f00:	bc 87       	std	Y+12, r27	; 0x0c
    6f02:	89 81       	ldd	r24, Y+1	; 0x01
    6f04:	9a 81       	ldd	r25, Y+2	; 0x02
    6f06:	ab 81       	ldd	r26, Y+3	; 0x03
    6f08:	bc 81       	ldd	r27, Y+4	; 0x04
    6f0a:	8d 83       	std	Y+5, r24	; 0x05
    6f0c:	9e 83       	std	Y+6, r25	; 0x06
    6f0e:	af 83       	std	Y+7, r26	; 0x07
    6f10:	b8 87       	std	Y+8, r27	; 0x08
    6f12:	89 85       	ldd	r24, Y+9	; 0x09
    6f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f16:	ab 85       	ldd	r26, Y+11	; 0x0b
    6f18:	bc 85       	ldd	r27, Y+12	; 0x0c
    6f1a:	2d 81       	ldd	r18, Y+5	; 0x05
    6f1c:	3e 81       	ldd	r19, Y+6	; 0x06
    6f1e:	4f 81       	ldd	r20, Y+7	; 0x07
    6f20:	58 85       	ldd	r21, Y+8	; 0x08
    6f22:	bc 01       	movw	r22, r24
    6f24:	cd 01       	movw	r24, r26
    6f26:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    6f2a:	dc 01       	movw	r26, r24
    6f2c:	cb 01       	movw	r24, r22
    6f2e:	89 83       	std	Y+1, r24	; 0x01
    6f30:	9a 83       	std	Y+2, r25	; 0x02
    6f32:	ab 83       	std	Y+3, r26	; 0x03
    6f34:	bc 83       	std	Y+4, r27	; 0x04
    6f36:	d5 cf       	rjmp	.-86     	; 0x6ee2 <_Z13reduce_by_gcdPmS_+0x8a>
    6f38:	8d 81       	ldd	r24, Y+5	; 0x05
    6f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    6f3c:	af 81       	ldd	r26, Y+7	; 0x07
    6f3e:	b8 85       	ldd	r27, Y+8	; 0x08
    6f40:	02 97       	sbiw	r24, 0x02	; 2
    6f42:	a1 05       	cpc	r26, r1
    6f44:	b1 05       	cpc	r27, r1
    6f46:	a0 f1       	brcs	.+104    	; 0x6fb0 <_Z13reduce_by_gcdPmS_+0x158>
    6f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f4c:	fc 01       	movw	r30, r24
    6f4e:	80 81       	ld	r24, Z
    6f50:	91 81       	ldd	r25, Z+1	; 0x01
    6f52:	a2 81       	ldd	r26, Z+2	; 0x02
    6f54:	b3 81       	ldd	r27, Z+3	; 0x03
    6f56:	2d 81       	ldd	r18, Y+5	; 0x05
    6f58:	3e 81       	ldd	r19, Y+6	; 0x06
    6f5a:	4f 81       	ldd	r20, Y+7	; 0x07
    6f5c:	58 85       	ldd	r21, Y+8	; 0x08
    6f5e:	bc 01       	movw	r22, r24
    6f60:	cd 01       	movw	r24, r26
    6f62:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    6f66:	da 01       	movw	r26, r20
    6f68:	c9 01       	movw	r24, r18
    6f6a:	2d 85       	ldd	r18, Y+13	; 0x0d
    6f6c:	3e 85       	ldd	r19, Y+14	; 0x0e
    6f6e:	f9 01       	movw	r30, r18
    6f70:	80 83       	st	Z, r24
    6f72:	91 83       	std	Z+1, r25	; 0x01
    6f74:	a2 83       	std	Z+2, r26	; 0x02
    6f76:	b3 83       	std	Z+3, r27	; 0x03
    6f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f7a:	98 89       	ldd	r25, Y+16	; 0x10
    6f7c:	fc 01       	movw	r30, r24
    6f7e:	80 81       	ld	r24, Z
    6f80:	91 81       	ldd	r25, Z+1	; 0x01
    6f82:	a2 81       	ldd	r26, Z+2	; 0x02
    6f84:	b3 81       	ldd	r27, Z+3	; 0x03
    6f86:	2d 81       	ldd	r18, Y+5	; 0x05
    6f88:	3e 81       	ldd	r19, Y+6	; 0x06
    6f8a:	4f 81       	ldd	r20, Y+7	; 0x07
    6f8c:	58 85       	ldd	r21, Y+8	; 0x08
    6f8e:	bc 01       	movw	r22, r24
    6f90:	cd 01       	movw	r24, r26
    6f92:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    6f96:	da 01       	movw	r26, r20
    6f98:	c9 01       	movw	r24, r18
    6f9a:	2f 85       	ldd	r18, Y+15	; 0x0f
    6f9c:	38 89       	ldd	r19, Y+16	; 0x10
    6f9e:	f9 01       	movw	r30, r18
    6fa0:	80 83       	st	Z, r24
    6fa2:	91 83       	std	Z+1, r25	; 0x01
    6fa4:	a2 83       	std	Z+2, r26	; 0x02
    6fa6:	b3 83       	std	Z+3, r27	; 0x03
    6fa8:	00 00       	nop
    6faa:	02 c0       	rjmp	.+4      	; 0x6fb0 <_Z13reduce_by_gcdPmS_+0x158>
    6fac:	00 00       	nop
    6fae:	01 c0       	rjmp	.+2      	; 0x6fb2 <_Z13reduce_by_gcdPmS_+0x15a>
    6fb0:	00 00       	nop
    6fb2:	60 96       	adiw	r28, 0x10	; 16
    6fb4:	cd bf       	out	0x3d, r28	; 61
    6fb6:	de bf       	out	0x3e, r29	; 62
    6fb8:	df 91       	pop	r29
    6fba:	cf 91       	pop	r28
    6fbc:	08 95       	ret

00006fbe <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    6fbe:	0f 93       	push	r16
    6fc0:	1f 93       	push	r17
    6fc2:	cf 93       	push	r28
    6fc4:	df 93       	push	r29
    6fc6:	cd b7       	in	r28, 0x3d	; 61
    6fc8:	de b7       	in	r29, 0x3e	; 62
    6fca:	69 97       	sbiw	r28, 0x19	; 25
    6fcc:	cd bf       	out	0x3d, r28	; 61
    6fce:	de bf       	out	0x3e, r29	; 62
    6fd0:	68 8b       	std	Y+16, r22	; 0x10
    6fd2:	79 8b       	std	Y+17, r23	; 0x11
    6fd4:	8a 8b       	std	Y+18, r24	; 0x12
    6fd6:	9b 8b       	std	Y+19, r25	; 0x13
    6fd8:	4c 8b       	std	Y+20, r20	; 0x14
    6fda:	5d 8b       	std	Y+21, r21	; 0x15
    6fdc:	2e 8b       	std	Y+22, r18	; 0x16
    6fde:	3f 8b       	std	Y+23, r19	; 0x17
    6fe0:	08 8f       	std	Y+24, r16	; 0x18
    6fe2:	19 8f       	std	Y+25, r17	; 0x19
    6fe4:	19 82       	std	Y+1, r1	; 0x01
    6fe6:	1a 82       	std	Y+2, r1	; 0x02
    6fe8:	1b 82       	std	Y+3, r1	; 0x03
    6fea:	1c 82       	std	Y+4, r1	; 0x04
    6fec:	1d 82       	std	Y+5, r1	; 0x05
    6fee:	1e 82       	std	Y+6, r1	; 0x06
    6ff0:	1f 82       	std	Y+7, r1	; 0x07
    6ff2:	18 86       	std	Y+8, r1	; 0x08
    6ff4:	8e 89       	ldd	r24, Y+22	; 0x16
    6ff6:	9f 89       	ldd	r25, Y+23	; 0x17
    6ff8:	21 e0       	ldi	r18, 0x01	; 1
    6ffa:	fc 01       	movw	r30, r24
    6ffc:	20 83       	st	Z, r18
    6ffe:	88 89       	ldd	r24, Y+16	; 0x10
    7000:	99 89       	ldd	r25, Y+17	; 0x11
    7002:	aa 89       	ldd	r26, Y+18	; 0x12
    7004:	bb 89       	ldd	r27, Y+19	; 0x13
    7006:	80 38       	cpi	r24, 0x80	; 128
    7008:	91 4d       	sbci	r25, 0xD1	; 209
    700a:	a0 4f       	sbci	r26, 0xF0	; 240
    700c:	b8 40       	sbci	r27, 0x08	; 8
    700e:	d8 f0       	brcs	.+54     	; 0x7046 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x88>
    7010:	84 e0       	ldi	r24, 0x04	; 4
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	a0 e0       	ldi	r26, 0x00	; 0
    7016:	b0 e0       	ldi	r27, 0x00	; 0
    7018:	89 83       	std	Y+1, r24	; 0x01
    701a:	9a 83       	std	Y+2, r25	; 0x02
    701c:	ab 83       	std	Y+3, r26	; 0x03
    701e:	bc 83       	std	Y+4, r27	; 0x04
    7020:	29 81       	ldd	r18, Y+1	; 0x01
    7022:	3a 81       	ldd	r19, Y+2	; 0x02
    7024:	4b 81       	ldd	r20, Y+3	; 0x03
    7026:	5c 81       	ldd	r21, Y+4	; 0x04
    7028:	88 89       	ldd	r24, Y+16	; 0x10
    702a:	99 89       	ldd	r25, Y+17	; 0x11
    702c:	aa 89       	ldd	r26, Y+18	; 0x12
    702e:	bb 89       	ldd	r27, Y+19	; 0x13
    7030:	bc 01       	movw	r22, r24
    7032:	cd 01       	movw	r24, r26
    7034:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    7038:	dc 01       	movw	r26, r24
    703a:	cb 01       	movw	r24, r22
    703c:	8d 83       	std	Y+5, r24	; 0x05
    703e:	9e 83       	std	Y+6, r25	; 0x06
    7040:	af 83       	std	Y+7, r26	; 0x07
    7042:	b8 87       	std	Y+8, r27	; 0x08
    7044:	6e c0       	rjmp	.+220    	; 0x7122 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x164>
    7046:	19 86       	std	Y+9, r1	; 0x09
    7048:	1a 86       	std	Y+10, r1	; 0x0a
    704a:	1b 86       	std	Y+11, r1	; 0x0b
    704c:	89 85       	ldd	r24, Y+9	; 0x09
    704e:	88 23       	and	r24, r24
    7050:	09 f0       	breq	.+2      	; 0x7054 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x96>
    7052:	52 c0       	rjmp	.+164    	; 0x70f8 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x13a>
    7054:	8b 85       	ldd	r24, Y+11	; 0x0b
    7056:	28 2f       	mov	r18, r24
    7058:	30 e0       	ldi	r19, 0x00	; 0
    705a:	40 e0       	ldi	r20, 0x00	; 0
    705c:	50 e0       	ldi	r21, 0x00	; 0
    705e:	88 89       	ldd	r24, Y+16	; 0x10
    7060:	99 89       	ldd	r25, Y+17	; 0x11
    7062:	aa 89       	ldd	r26, Y+18	; 0x12
    7064:	bb 89       	ldd	r27, Y+19	; 0x13
    7066:	bc 01       	movw	r22, r24
    7068:	cd 01       	movw	r24, r26
    706a:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    706e:	9b 01       	movw	r18, r22
    7070:	ac 01       	movw	r20, r24
    7072:	80 e0       	ldi	r24, 0x00	; 0
    7074:	99 ee       	ldi	r25, 0xE9	; 233
    7076:	a4 ea       	ldi	r26, 0xA4	; 164
    7078:	b5 e3       	ldi	r27, 0x35	; 53
    707a:	82 1b       	sub	r24, r18
    707c:	93 0b       	sbc	r25, r19
    707e:	a4 0b       	sbc	r26, r20
    7080:	b5 0b       	sbc	r27, r21
    7082:	8c 87       	std	Y+12, r24	; 0x0c
    7084:	9d 87       	std	Y+13, r25	; 0x0d
    7086:	ae 87       	std	Y+14, r26	; 0x0e
    7088:	bf 87       	std	Y+15, r27	; 0x0f
    708a:	8b 85       	ldd	r24, Y+11	; 0x0b
    708c:	8e 5f       	subi	r24, 0xFE	; 254
    708e:	8b 87       	std	Y+11, r24	; 0x0b
    7090:	8c 85       	ldd	r24, Y+12	; 0x0c
    7092:	9d 85       	ldd	r25, Y+13	; 0x0d
    7094:	ae 85       	ldd	r26, Y+14	; 0x0e
    7096:	bf 85       	ldd	r27, Y+15	; 0x0f
    7098:	81 15       	cp	r24, r1
    709a:	96 44       	sbci	r25, 0x46	; 70
    709c:	a3 4c       	sbci	r26, 0xC3	; 195
    709e:	b3 42       	sbci	r27, 0x23	; 35
    70a0:	40 f1       	brcs	.+80     	; 0x70f2 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x134>
    70a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    70a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    70a6:	ae 85       	ldd	r26, Y+14	; 0x0e
    70a8:	bf 85       	ldd	r27, Y+15	; 0x0f
    70aa:	28 89       	ldd	r18, Y+16	; 0x10
    70ac:	39 89       	ldd	r19, Y+17	; 0x11
    70ae:	4a 89       	ldd	r20, Y+18	; 0x12
    70b0:	5b 89       	ldd	r21, Y+19	; 0x13
    70b2:	bc 01       	movw	r22, r24
    70b4:	cd 01       	movw	r24, r26
    70b6:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    70ba:	da 01       	movw	r26, r20
    70bc:	c9 01       	movw	r24, r18
    70be:	8c 87       	std	Y+12, r24	; 0x0c
    70c0:	9d 87       	std	Y+13, r25	; 0x0d
    70c2:	ae 87       	std	Y+14, r26	; 0x0e
    70c4:	bf 87       	std	Y+15, r27	; 0x0f
    70c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    70c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    70ca:	ae 85       	ldd	r26, Y+14	; 0x0e
    70cc:	bf 85       	ldd	r27, Y+15	; 0x0f
    70ce:	04 97       	sbiw	r24, 0x04	; 4
    70d0:	a1 05       	cpc	r26, r1
    70d2:	b1 05       	cpc	r27, r1
    70d4:	08 f4       	brcc	.+2      	; 0x70d8 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x11a>
    70d6:	ba cf       	rjmp	.-140    	; 0x704c <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x8e>
    70d8:	81 e0       	ldi	r24, 0x01	; 1
    70da:	89 87       	std	Y+9, r24	; 0x09
    70dc:	81 e0       	ldi	r24, 0x01	; 1
    70de:	8a 87       	std	Y+10, r24	; 0x0a
    70e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    70e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    70e4:	ae 85       	ldd	r26, Y+14	; 0x0e
    70e6:	bf 85       	ldd	r27, Y+15	; 0x0f
    70e8:	89 83       	std	Y+1, r24	; 0x01
    70ea:	9a 83       	std	Y+2, r25	; 0x02
    70ec:	ab 83       	std	Y+3, r26	; 0x03
    70ee:	bc 83       	std	Y+4, r27	; 0x04
    70f0:	ad cf       	rjmp	.-166    	; 0x704c <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x8e>
    70f2:	81 e0       	ldi	r24, 0x01	; 1
    70f4:	89 87       	std	Y+9, r24	; 0x09
    70f6:	aa cf       	rjmp	.-172    	; 0x704c <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x8e>
    70f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    70fa:	88 23       	and	r24, r24
    70fc:	91 f0       	breq	.+36     	; 0x7122 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x164>
    70fe:	29 81       	ldd	r18, Y+1	; 0x01
    7100:	3a 81       	ldd	r19, Y+2	; 0x02
    7102:	4b 81       	ldd	r20, Y+3	; 0x03
    7104:	5c 81       	ldd	r21, Y+4	; 0x04
    7106:	88 89       	ldd	r24, Y+16	; 0x10
    7108:	99 89       	ldd	r25, Y+17	; 0x11
    710a:	aa 89       	ldd	r26, Y+18	; 0x12
    710c:	bb 89       	ldd	r27, Y+19	; 0x13
    710e:	bc 01       	movw	r22, r24
    7110:	cd 01       	movw	r24, r26
    7112:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    7116:	dc 01       	movw	r26, r24
    7118:	cb 01       	movw	r24, r22
    711a:	8d 83       	std	Y+5, r24	; 0x05
    711c:	9e 83       	std	Y+6, r25	; 0x06
    711e:	af 83       	std	Y+7, r26	; 0x07
    7120:	b8 87       	std	Y+8, r27	; 0x08
    7122:	21 e0       	ldi	r18, 0x01	; 1
    7124:	89 81       	ldd	r24, Y+1	; 0x01
    7126:	9a 81       	ldd	r25, Y+2	; 0x02
    7128:	ab 81       	ldd	r26, Y+3	; 0x03
    712a:	bc 81       	ldd	r27, Y+4	; 0x04
    712c:	04 97       	sbiw	r24, 0x04	; 4
    712e:	a1 05       	cpc	r26, r1
    7130:	b1 05       	cpc	r27, r1
    7132:	09 f0       	breq	.+2      	; 0x7136 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x178>
    7134:	20 e0       	ldi	r18, 0x00	; 0
    7136:	88 8d       	ldd	r24, Y+24	; 0x18
    7138:	99 8d       	ldd	r25, Y+25	; 0x19
    713a:	fc 01       	movw	r30, r24
    713c:	20 83       	st	Z, r18
    713e:	89 81       	ldd	r24, Y+1	; 0x01
    7140:	9a 81       	ldd	r25, Y+2	; 0x02
    7142:	ab 81       	ldd	r26, Y+3	; 0x03
    7144:	bc 81       	ldd	r27, Y+4	; 0x04
    7146:	88 0f       	add	r24, r24
    7148:	99 1f       	adc	r25, r25
    714a:	aa 1f       	adc	r26, r26
    714c:	bb 1f       	adc	r27, r27
    714e:	88 0f       	add	r24, r24
    7150:	99 1f       	adc	r25, r25
    7152:	aa 1f       	adc	r26, r26
    7154:	bb 1f       	adc	r27, r27
    7156:	88 0f       	add	r24, r24
    7158:	99 1f       	adc	r25, r25
    715a:	aa 1f       	adc	r26, r26
    715c:	bb 1f       	adc	r27, r27
    715e:	88 0f       	add	r24, r24
    7160:	99 1f       	adc	r25, r25
    7162:	aa 1f       	adc	r26, r26
    7164:	bb 1f       	adc	r27, r27
    7166:	88 0f       	add	r24, r24
    7168:	99 1f       	adc	r25, r25
    716a:	aa 1f       	adc	r26, r26
    716c:	bb 1f       	adc	r27, r27
    716e:	88 0f       	add	r24, r24
    7170:	99 1f       	adc	r25, r25
    7172:	aa 1f       	adc	r26, r26
    7174:	bb 1f       	adc	r27, r27
    7176:	88 0f       	add	r24, r24
    7178:	99 1f       	adc	r25, r25
    717a:	aa 1f       	adc	r26, r26
    717c:	bb 1f       	adc	r27, r27
    717e:	92 50       	subi	r25, 0x02	; 2
    7180:	a1 09       	sbc	r26, r1
    7182:	b1 09       	sbc	r27, r1
    7184:	2c 89       	ldd	r18, Y+20	; 0x14
    7186:	3d 89       	ldd	r19, Y+21	; 0x15
    7188:	f9 01       	movw	r30, r18
    718a:	80 83       	st	Z, r24
    718c:	91 83       	std	Z+1, r25	; 0x01
    718e:	a2 83       	std	Z+2, r26	; 0x02
    7190:	b3 83       	std	Z+3, r27	; 0x03
    7192:	8c 89       	ldd	r24, Y+20	; 0x14
    7194:	9d 89       	ldd	r25, Y+21	; 0x15
    7196:	fc 01       	movw	r30, r24
    7198:	14 82       	std	Z+4, r1	; 0x04
    719a:	15 82       	std	Z+5, r1	; 0x05
    719c:	16 82       	std	Z+6, r1	; 0x06
    719e:	17 82       	std	Z+7, r1	; 0x07
    71a0:	2c 89       	ldd	r18, Y+20	; 0x14
    71a2:	3d 89       	ldd	r19, Y+21	; 0x15
    71a4:	81 e0       	ldi	r24, 0x01	; 1
    71a6:	90 e0       	ldi	r25, 0x00	; 0
    71a8:	a0 e0       	ldi	r26, 0x00	; 0
    71aa:	b0 e0       	ldi	r27, 0x00	; 0
    71ac:	f9 01       	movw	r30, r18
    71ae:	80 87       	std	Z+8, r24	; 0x08
    71b0:	91 87       	std	Z+9, r25	; 0x09
    71b2:	a2 87       	std	Z+10, r26	; 0x0a
    71b4:	b3 87       	std	Z+11, r27	; 0x0b
    71b6:	8d 81       	ldd	r24, Y+5	; 0x05
    71b8:	9e 81       	ldd	r25, Y+6	; 0x06
    71ba:	af 81       	ldd	r26, Y+7	; 0x07
    71bc:	b8 85       	ldd	r27, Y+8	; 0x08
    71be:	bc 01       	movw	r22, r24
    71c0:	cd 01       	movw	r24, r26
    71c2:	69 96       	adiw	r28, 0x19	; 25
    71c4:	cd bf       	out	0x3d, r28	; 61
    71c6:	de bf       	out	0x3e, r29	; 62
    71c8:	df 91       	pop	r29
    71ca:	cf 91       	pop	r28
    71cc:	1f 91       	pop	r17
    71ce:	0f 91       	pop	r16
    71d0:	08 95       	ret

000071d2 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
 * Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, bool *int_mode, bool *divBy4)
 *
 * Note: do not call this function with global value freqVCOB == zero
 */
	Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, bool *int_mode, bool *divBy4)
	{
    71d2:	0f 93       	push	r16
    71d4:	1f 93       	push	r17
    71d6:	cf 93       	push	r28
    71d8:	df 93       	push	r29
    71da:	cd b7       	in	r28, 0x3d	; 61
    71dc:	de b7       	in	r29, 0x3e	; 62
    71de:	6e 97       	sbiw	r28, 0x1e	; 30
    71e0:	cd bf       	out	0x3d, r28	; 61
    71e2:	de bf       	out	0x3e, r29	; 62
    71e4:	6d 8b       	std	Y+21, r22	; 0x15
    71e6:	7e 8b       	std	Y+22, r23	; 0x16
    71e8:	8f 8b       	std	Y+23, r24	; 0x17
    71ea:	98 8f       	std	Y+24, r25	; 0x18
    71ec:	49 8f       	std	Y+25, r20	; 0x19
    71ee:	5a 8f       	std	Y+26, r21	; 0x1a
    71f0:	2b 8f       	std	Y+27, r18	; 0x1b
    71f2:	3c 8f       	std	Y+28, r19	; 0x1c
    71f4:	0d 8f       	std	Y+29, r16	; 0x1d
    71f6:	1e 8f       	std	Y+30, r17	; 0x1e
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* Determine integer part of feedback equation */
		a = freqVCOB / freq_Fout;
    71f8:	80 91 10 48 	lds	r24, 0x4810	; 0x804810 <_ZL8freqVCOB>
    71fc:	90 91 11 48 	lds	r25, 0x4811	; 0x804811 <_ZL8freqVCOB+0x1>
    7200:	a0 91 12 48 	lds	r26, 0x4812	; 0x804812 <_ZL8freqVCOB+0x2>
    7204:	b0 91 13 48 	lds	r27, 0x4813	; 0x804813 <_ZL8freqVCOB+0x3>
    7208:	2d 89       	ldd	r18, Y+21	; 0x15
    720a:	3e 89       	ldd	r19, Y+22	; 0x16
    720c:	4f 89       	ldd	r20, Y+23	; 0x17
    720e:	58 8d       	ldd	r21, Y+24	; 0x18
    7210:	bc 01       	movw	r22, r24
    7212:	cd 01       	movw	r24, r26
    7214:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    7218:	da 01       	movw	r26, r20
    721a:	c9 01       	movw	r24, r18
    721c:	89 83       	std	Y+1, r24	; 0x01
    721e:	9a 83       	std	Y+2, r25	; 0x02
    7220:	ab 83       	std	Y+3, r26	; 0x03
    7222:	bc 83       	std	Y+4, r27	; 0x04
		b = freqVCOB % freq_Fout;
    7224:	80 91 10 48 	lds	r24, 0x4810	; 0x804810 <_ZL8freqVCOB>
    7228:	90 91 11 48 	lds	r25, 0x4811	; 0x804811 <_ZL8freqVCOB+0x1>
    722c:	a0 91 12 48 	lds	r26, 0x4812	; 0x804812 <_ZL8freqVCOB+0x2>
    7230:	b0 91 13 48 	lds	r27, 0x4813	; 0x804813 <_ZL8freqVCOB+0x3>
    7234:	2d 89       	ldd	r18, Y+21	; 0x15
    7236:	3e 89       	ldd	r19, Y+22	; 0x16
    7238:	4f 89       	ldd	r20, Y+23	; 0x17
    723a:	58 8d       	ldd	r21, Y+24	; 0x18
    723c:	bc 01       	movw	r22, r24
    723e:	cd 01       	movw	r24, r26
    7240:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    7244:	dc 01       	movw	r26, r24
    7246:	cb 01       	movw	r24, r22
    7248:	8d 87       	std	Y+13, r24	; 0x0d
    724a:	9e 87       	std	Y+14, r25	; 0x0e
    724c:	af 87       	std	Y+15, r26	; 0x0f
    724e:	b8 8b       	std	Y+16, r27	; 0x10
		c = freq_Fout;
    7250:	8d 89       	ldd	r24, Y+21	; 0x15
    7252:	9e 89       	ldd	r25, Y+22	; 0x16
    7254:	af 89       	ldd	r26, Y+23	; 0x17
    7256:	b8 8d       	ldd	r27, Y+24	; 0x18
    7258:	89 8b       	std	Y+17, r24	; 0x11
    725a:	9a 8b       	std	Y+18, r25	; 0x12
    725c:	ab 8b       	std	Y+19, r26	; 0x13
    725e:	bc 8b       	std	Y+20, r27	; 0x14
		reduce_by_gcd(&b, &c);  /* prevents overflow conditions and makes results agree with ClockBuilder */
    7260:	9e 01       	movw	r18, r28
    7262:	2f 5e       	subi	r18, 0xEF	; 239
    7264:	3f 4f       	sbci	r19, 0xFF	; 255
    7266:	ce 01       	movw	r24, r28
    7268:	0d 96       	adiw	r24, 0x0d	; 13
    726a:	b9 01       	movw	r22, r18
    726c:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <_Z13reduce_by_gcdPmS_>

		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
    7270:	80 91 10 48 	lds	r24, 0x4810	; 0x804810 <_ZL8freqVCOB>
    7274:	90 91 11 48 	lds	r25, 0x4811	; 0x804811 <_ZL8freqVCOB+0x1>
    7278:	a0 91 12 48 	lds	r26, 0x4812	; 0x804812 <_ZL8freqVCOB+0x2>
    727c:	b0 91 13 48 	lds	r27, 0x4813	; 0x804813 <_ZL8freqVCOB+0x3>
    7280:	8d 8b       	std	Y+21, r24	; 0x15
    7282:	9e 8b       	std	Y+22, r25	; 0x16
    7284:	af 8b       	std	Y+23, r26	; 0x17
    7286:	b8 8f       	std	Y+24, r27	; 0x18
		freq_Fout /= (a * c + b);
    7288:	29 89       	ldd	r18, Y+17	; 0x11
    728a:	3a 89       	ldd	r19, Y+18	; 0x12
    728c:	4b 89       	ldd	r20, Y+19	; 0x13
    728e:	5c 89       	ldd	r21, Y+20	; 0x14
    7290:	89 81       	ldd	r24, Y+1	; 0x01
    7292:	9a 81       	ldd	r25, Y+2	; 0x02
    7294:	ab 81       	ldd	r26, Y+3	; 0x03
    7296:	bc 81       	ldd	r27, Y+4	; 0x04
    7298:	bc 01       	movw	r22, r24
    729a:	cd 01       	movw	r24, r26
    729c:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    72a0:	9b 01       	movw	r18, r22
    72a2:	ac 01       	movw	r20, r24
    72a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    72a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    72a8:	af 85       	ldd	r26, Y+15	; 0x0f
    72aa:	b8 89       	ldd	r27, Y+16	; 0x10
    72ac:	28 0f       	add	r18, r24
    72ae:	39 1f       	adc	r19, r25
    72b0:	4a 1f       	adc	r20, r26
    72b2:	5b 1f       	adc	r21, r27
    72b4:	8d 89       	ldd	r24, Y+21	; 0x15
    72b6:	9e 89       	ldd	r25, Y+22	; 0x16
    72b8:	af 89       	ldd	r26, Y+23	; 0x17
    72ba:	b8 8d       	ldd	r27, Y+24	; 0x18
    72bc:	bc 01       	movw	r22, r24
    72be:	cd 01       	movw	r24, r26
    72c0:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    72c4:	da 01       	movw	r26, r20
    72c6:	c9 01       	movw	r24, r18
    72c8:	8d 8b       	std	Y+21, r24	; 0x15
    72ca:	9e 8b       	std	Y+22, r25	; 0x16
    72cc:	af 8b       	std	Y+23, r26	; 0x17
    72ce:	b8 8f       	std	Y+24, r27	; 0x18
		freq_Fout *= c;
    72d0:	89 89       	ldd	r24, Y+17	; 0x11
    72d2:	9a 89       	ldd	r25, Y+18	; 0x12
    72d4:	ab 89       	ldd	r26, Y+19	; 0x13
    72d6:	bc 89       	ldd	r27, Y+20	; 0x14
    72d8:	2d 89       	ldd	r18, Y+21	; 0x15
    72da:	3e 89       	ldd	r19, Y+22	; 0x16
    72dc:	4f 89       	ldd	r20, Y+23	; 0x17
    72de:	58 8d       	ldd	r21, Y+24	; 0x18
    72e0:	bc 01       	movw	r22, r24
    72e2:	cd 01       	movw	r24, r26
    72e4:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    72e8:	dc 01       	movw	r26, r24
    72ea:	cb 01       	movw	r24, r22
    72ec:	8d 8b       	std	Y+21, r24	; 0x15
    72ee:	9e 8b       	std	Y+22, r25	; 0x16
    72f0:	af 8b       	std	Y+23, r26	; 0x17
    72f2:	b8 8f       	std	Y+24, r27	; 0x18

		*int_mode = (b == 0) && !(a % 2);
    72f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    72f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    72f8:	af 85       	ldd	r26, Y+15	; 0x0f
    72fa:	b8 89       	ldd	r27, Y+16	; 0x10
    72fc:	89 2b       	or	r24, r25
    72fe:	8a 2b       	or	r24, r26
    7300:	8b 2b       	or	r24, r27
    7302:	71 f4       	brne	.+28     	; 0x7320 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x14e>
    7304:	89 81       	ldd	r24, Y+1	; 0x01
    7306:	9a 81       	ldd	r25, Y+2	; 0x02
    7308:	ab 81       	ldd	r26, Y+3	; 0x03
    730a:	bc 81       	ldd	r27, Y+4	; 0x04
    730c:	81 70       	andi	r24, 0x01	; 1
    730e:	99 27       	eor	r25, r25
    7310:	aa 27       	eor	r26, r26
    7312:	bb 27       	eor	r27, r27
    7314:	89 2b       	or	r24, r25
    7316:	8a 2b       	or	r24, r26
    7318:	8b 2b       	or	r24, r27
    731a:	11 f4       	brne	.+4      	; 0x7320 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x14e>
    731c:	21 e0       	ldi	r18, 0x01	; 1
    731e:	01 c0       	rjmp	.+2      	; 0x7322 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x150>
    7320:	20 e0       	ldi	r18, 0x00	; 0
    7322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7326:	fc 01       	movw	r30, r24
    7328:	20 83       	st	Z, r18
		*divBy4 = (a == 4) && *int_mode;
    732a:	89 81       	ldd	r24, Y+1	; 0x01
    732c:	9a 81       	ldd	r25, Y+2	; 0x02
    732e:	ab 81       	ldd	r26, Y+3	; 0x03
    7330:	bc 81       	ldd	r27, Y+4	; 0x04
    7332:	04 97       	sbiw	r24, 0x04	; 4
    7334:	a1 05       	cpc	r26, r1
    7336:	b1 05       	cpc	r27, r1
    7338:	41 f4       	brne	.+16     	; 0x734a <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x178>
    733a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    733c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    733e:	fc 01       	movw	r30, r24
    7340:	80 81       	ld	r24, Z
    7342:	88 23       	and	r24, r24
    7344:	11 f0       	breq	.+4      	; 0x734a <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x178>
    7346:	21 e0       	ldi	r18, 0x01	; 1
    7348:	01 c0       	rjmp	.+2      	; 0x734c <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x17a>
    734a:	20 e0       	ldi	r18, 0x00	; 0
    734c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    734e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7350:	fc 01       	movw	r30, r24
    7352:	20 83       	st	Z, r18

		/* Calculate parameters */
		if(*divBy4)
    7354:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7356:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7358:	fc 01       	movw	r30, r24
    735a:	80 81       	ld	r24, Z
    735c:	88 23       	and	r24, r24
    735e:	d1 f0       	breq	.+52     	; 0x7394 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x1c2>
		{
			reg->ms.p1 = 0;
    7360:	89 8d       	ldd	r24, Y+25	; 0x19
    7362:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7364:	fc 01       	movw	r30, r24
    7366:	10 82       	st	Z, r1
    7368:	11 82       	std	Z+1, r1	; 0x01
    736a:	12 82       	std	Z+2, r1	; 0x02
    736c:	13 82       	std	Z+3, r1	; 0x03
			reg->ms.p2 = 0;
    736e:	89 8d       	ldd	r24, Y+25	; 0x19
    7370:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7372:	fc 01       	movw	r30, r24
    7374:	14 82       	std	Z+4, r1	; 0x04
    7376:	15 82       	std	Z+5, r1	; 0x05
    7378:	16 82       	std	Z+6, r1	; 0x06
    737a:	17 82       	std	Z+7, r1	; 0x07
			reg->ms.p3 = 1;
    737c:	29 8d       	ldd	r18, Y+25	; 0x19
    737e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7380:	81 e0       	ldi	r24, 0x01	; 1
    7382:	90 e0       	ldi	r25, 0x00	; 0
    7384:	a0 e0       	ldi	r26, 0x00	; 0
    7386:	b0 e0       	ldi	r27, 0x00	; 0
    7388:	f9 01       	movw	r30, r18
    738a:	80 87       	std	Z+8, r24	; 0x08
    738c:	91 87       	std	Z+9, r25	; 0x09
    738e:	a2 87       	std	Z+10, r26	; 0x0a
    7390:	b3 87       	std	Z+11, r27	; 0x0b
    7392:	92 c0       	rjmp	.+292    	; 0x74b8 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x2e6>
		}
		else
		{
			uint32_t bx128 = b << 7;
    7394:	8d 85       	ldd	r24, Y+13	; 0x0d
    7396:	9e 85       	ldd	r25, Y+14	; 0x0e
    7398:	af 85       	ldd	r26, Y+15	; 0x0f
    739a:	b8 89       	ldd	r27, Y+16	; 0x10
    739c:	88 0f       	add	r24, r24
    739e:	99 1f       	adc	r25, r25
    73a0:	aa 1f       	adc	r26, r26
    73a2:	bb 1f       	adc	r27, r27
    73a4:	88 0f       	add	r24, r24
    73a6:	99 1f       	adc	r25, r25
    73a8:	aa 1f       	adc	r26, r26
    73aa:	bb 1f       	adc	r27, r27
    73ac:	88 0f       	add	r24, r24
    73ae:	99 1f       	adc	r25, r25
    73b0:	aa 1f       	adc	r26, r26
    73b2:	bb 1f       	adc	r27, r27
    73b4:	88 0f       	add	r24, r24
    73b6:	99 1f       	adc	r25, r25
    73b8:	aa 1f       	adc	r26, r26
    73ba:	bb 1f       	adc	r27, r27
    73bc:	88 0f       	add	r24, r24
    73be:	99 1f       	adc	r25, r25
    73c0:	aa 1f       	adc	r26, r26
    73c2:	bb 1f       	adc	r27, r27
    73c4:	88 0f       	add	r24, r24
    73c6:	99 1f       	adc	r25, r25
    73c8:	aa 1f       	adc	r26, r26
    73ca:	bb 1f       	adc	r27, r27
    73cc:	88 0f       	add	r24, r24
    73ce:	99 1f       	adc	r25, r25
    73d0:	aa 1f       	adc	r26, r26
    73d2:	bb 1f       	adc	r27, r27
    73d4:	8d 83       	std	Y+5, r24	; 0x05
    73d6:	9e 83       	std	Y+6, r25	; 0x06
    73d8:	af 83       	std	Y+7, r26	; 0x07
    73da:	b8 87       	std	Y+8, r27	; 0x08
			uint32_t bx128overc = bx128 / c;
    73dc:	29 89       	ldd	r18, Y+17	; 0x11
    73de:	3a 89       	ldd	r19, Y+18	; 0x12
    73e0:	4b 89       	ldd	r20, Y+19	; 0x13
    73e2:	5c 89       	ldd	r21, Y+20	; 0x14
    73e4:	8d 81       	ldd	r24, Y+5	; 0x05
    73e6:	9e 81       	ldd	r25, Y+6	; 0x06
    73e8:	af 81       	ldd	r26, Y+7	; 0x07
    73ea:	b8 85       	ldd	r27, Y+8	; 0x08
    73ec:	bc 01       	movw	r22, r24
    73ee:	cd 01       	movw	r24, r26
    73f0:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    73f4:	da 01       	movw	r26, r20
    73f6:	c9 01       	movw	r24, r18
    73f8:	89 87       	std	Y+9, r24	; 0x09
    73fa:	9a 87       	std	Y+10, r25	; 0x0a
    73fc:	ab 87       	std	Y+11, r26	; 0x0b
    73fe:	bc 87       	std	Y+12, r27	; 0x0c
			reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    7400:	89 81       	ldd	r24, Y+1	; 0x01
    7402:	9a 81       	ldd	r25, Y+2	; 0x02
    7404:	ab 81       	ldd	r26, Y+3	; 0x03
    7406:	bc 81       	ldd	r27, Y+4	; 0x04
    7408:	88 0f       	add	r24, r24
    740a:	99 1f       	adc	r25, r25
    740c:	aa 1f       	adc	r26, r26
    740e:	bb 1f       	adc	r27, r27
    7410:	88 0f       	add	r24, r24
    7412:	99 1f       	adc	r25, r25
    7414:	aa 1f       	adc	r26, r26
    7416:	bb 1f       	adc	r27, r27
    7418:	88 0f       	add	r24, r24
    741a:	99 1f       	adc	r25, r25
    741c:	aa 1f       	adc	r26, r26
    741e:	bb 1f       	adc	r27, r27
    7420:	88 0f       	add	r24, r24
    7422:	99 1f       	adc	r25, r25
    7424:	aa 1f       	adc	r26, r26
    7426:	bb 1f       	adc	r27, r27
    7428:	88 0f       	add	r24, r24
    742a:	99 1f       	adc	r25, r25
    742c:	aa 1f       	adc	r26, r26
    742e:	bb 1f       	adc	r27, r27
    7430:	88 0f       	add	r24, r24
    7432:	99 1f       	adc	r25, r25
    7434:	aa 1f       	adc	r26, r26
    7436:	bb 1f       	adc	r27, r27
    7438:	88 0f       	add	r24, r24
    743a:	99 1f       	adc	r25, r25
    743c:	aa 1f       	adc	r26, r26
    743e:	bb 1f       	adc	r27, r27
    7440:	9c 01       	movw	r18, r24
    7442:	ad 01       	movw	r20, r26
    7444:	89 85       	ldd	r24, Y+9	; 0x09
    7446:	9a 85       	ldd	r25, Y+10	; 0x0a
    7448:	ab 85       	ldd	r26, Y+11	; 0x0b
    744a:	bc 85       	ldd	r27, Y+12	; 0x0c
    744c:	82 0f       	add	r24, r18
    744e:	93 1f       	adc	r25, r19
    7450:	a4 1f       	adc	r26, r20
    7452:	b5 1f       	adc	r27, r21
    7454:	92 50       	subi	r25, 0x02	; 2
    7456:	a1 09       	sbc	r26, r1
    7458:	b1 09       	sbc	r27, r1
    745a:	29 8d       	ldd	r18, Y+25	; 0x19
    745c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    745e:	f9 01       	movw	r30, r18
    7460:	80 83       	st	Z, r24
    7462:	91 83       	std	Z+1, r25	; 0x01
    7464:	a2 83       	std	Z+2, r26	; 0x02
    7466:	b3 83       	std	Z+3, r27	; 0x03
			reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    7468:	29 89       	ldd	r18, Y+17	; 0x11
    746a:	3a 89       	ldd	r19, Y+18	; 0x12
    746c:	4b 89       	ldd	r20, Y+19	; 0x13
    746e:	5c 89       	ldd	r21, Y+20	; 0x14
    7470:	89 85       	ldd	r24, Y+9	; 0x09
    7472:	9a 85       	ldd	r25, Y+10	; 0x0a
    7474:	ab 85       	ldd	r26, Y+11	; 0x0b
    7476:	bc 85       	ldd	r27, Y+12	; 0x0c
    7478:	bc 01       	movw	r22, r24
    747a:	cd 01       	movw	r24, r26
    747c:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__mulsi3>
    7480:	9b 01       	movw	r18, r22
    7482:	ac 01       	movw	r20, r24
    7484:	8d 81       	ldd	r24, Y+5	; 0x05
    7486:	9e 81       	ldd	r25, Y+6	; 0x06
    7488:	af 81       	ldd	r26, Y+7	; 0x07
    748a:	b8 85       	ldd	r27, Y+8	; 0x08
    748c:	82 1b       	sub	r24, r18
    748e:	93 0b       	sbc	r25, r19
    7490:	a4 0b       	sbc	r26, r20
    7492:	b5 0b       	sbc	r27, r21
    7494:	29 8d       	ldd	r18, Y+25	; 0x19
    7496:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7498:	f9 01       	movw	r30, r18
    749a:	84 83       	std	Z+4, r24	; 0x04
    749c:	95 83       	std	Z+5, r25	; 0x05
    749e:	a6 83       	std	Z+6, r26	; 0x06
    74a0:	b7 83       	std	Z+7, r27	; 0x07
			reg->ms.p3 = c;
    74a2:	89 89       	ldd	r24, Y+17	; 0x11
    74a4:	9a 89       	ldd	r25, Y+18	; 0x12
    74a6:	ab 89       	ldd	r26, Y+19	; 0x13
    74a8:	bc 89       	ldd	r27, Y+20	; 0x14
    74aa:	29 8d       	ldd	r18, Y+25	; 0x19
    74ac:	3a 8d       	ldd	r19, Y+26	; 0x1a
    74ae:	f9 01       	movw	r30, r18
    74b0:	80 87       	std	Z+8, r24	; 0x08
    74b2:	91 87       	std	Z+9, r25	; 0x09
    74b4:	a2 87       	std	Z+10, r26	; 0x0a
    74b6:	b3 87       	std	Z+11, r27	; 0x0b
		}

		return(freq_Fout);
    74b8:	8d 89       	ldd	r24, Y+21	; 0x15
    74ba:	9e 89       	ldd	r25, Y+22	; 0x16
    74bc:	af 89       	ldd	r26, Y+23	; 0x17
    74be:	b8 8d       	ldd	r27, Y+24	; 0x18
	}
    74c0:	bc 01       	movw	r22, r24
    74c2:	cd 01       	movw	r24, r26
    74c4:	6e 96       	adiw	r28, 0x1e	; 30
    74c6:	cd bf       	out	0x3d, r28	; 61
    74c8:	de bf       	out	0x3e, r29	; 62
    74ca:	df 91       	pop	r29
    74cc:	cf 91       	pop	r28
    74ce:	1f 91       	pop	r17
    74d0:	0f 91       	pop	r16
    74d2:	08 95       	ret

000074d4 <_Z17si5351_write_bulkhPhh>:


	bool si5351_write_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    74d4:	cf 93       	push	r28
    74d6:	df 93       	push	r29
    74d8:	cd b7       	in	r28, 0x3d	; 61
    74da:	de b7       	in	r29, 0x3e	; 62
    74dc:	26 97       	sbiw	r28, 0x06	; 6
    74de:	cd bf       	out	0x3d, r28	; 61
    74e0:	de bf       	out	0x3e, r29	; 62
    74e2:	8b 83       	std	Y+3, r24	; 0x03
    74e4:	6c 83       	std	Y+4, r22	; 0x04
    74e6:	7d 83       	std	Y+5, r23	; 0x05
    74e8:	4e 83       	std	Y+6, r20	; 0x06
		uint8_t tries = 10;
    74ea:	8a e0       	ldi	r24, 0x0A	; 10
    74ec:	89 83       	std	Y+1, r24	; 0x01
		bool fail;
		while(tries-- && (fail = I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    74ee:	89 81       	ldd	r24, Y+1	; 0x01
    74f0:	9f ef       	ldi	r25, 0xFF	; 255
    74f2:	98 0f       	add	r25, r24
    74f4:	99 83       	std	Y+1, r25	; 0x01
    74f6:	88 23       	and	r24, r24
    74f8:	a1 f0       	breq	.+40     	; 0x7522 <_Z17si5351_write_bulkhPhh+0x4e>
    74fa:	8c 81       	ldd	r24, Y+4	; 0x04
    74fc:	9d 81       	ldd	r25, Y+5	; 0x05
    74fe:	2e 81       	ldd	r18, Y+6	; 0x06
    7500:	ac 01       	movw	r20, r24
    7502:	6b 81       	ldd	r22, Y+3	; 0x03
    7504:	80 ec       	ldi	r24, 0xC0	; 192
    7506:	0e 94 77 28 	call	0x50ee	; 0x50ee <I2C_1_SendData>
    750a:	28 2f       	mov	r18, r24
    750c:	81 e0       	ldi	r24, 0x01	; 1
    750e:	9e 81       	ldd	r25, Y+6	; 0x06
    7510:	29 17       	cp	r18, r25
    7512:	09 f4       	brne	.+2      	; 0x7516 <_Z17si5351_write_bulkhPhh+0x42>
    7514:	80 e0       	ldi	r24, 0x00	; 0
    7516:	8a 83       	std	Y+2, r24	; 0x02
    7518:	8a 81       	ldd	r24, Y+2	; 0x02
    751a:	88 23       	and	r24, r24
    751c:	11 f0       	breq	.+4      	; 0x7522 <_Z17si5351_write_bulkhPhh+0x4e>
    751e:	81 e0       	ldi	r24, 0x01	; 1
    7520:	01 c0       	rjmp	.+2      	; 0x7524 <_Z17si5351_write_bulkhPhh+0x50>
    7522:	80 e0       	ldi	r24, 0x00	; 0
    7524:	88 23       	and	r24, r24
    7526:	09 f0       	breq	.+2      	; 0x752a <_Z17si5351_write_bulkhPhh+0x56>
    7528:	e2 cf       	rjmp	.-60     	; 0x74ee <_Z17si5351_write_bulkhPhh+0x1a>
		return(fail);
    752a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    752c:	26 96       	adiw	r28, 0x06	; 6
    752e:	cd bf       	out	0x3d, r28	; 61
    7530:	de bf       	out	0x3e, r29	; 62
    7532:	df 91       	pop	r29
    7534:	cf 91       	pop	r28
    7536:	08 95       	ret

00007538 <_Z16si5351_read_bulkhPhh>:

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    7538:	cf 93       	push	r28
    753a:	df 93       	push	r29
    753c:	cd b7       	in	r28, 0x3d	; 61
    753e:	de b7       	in	r29, 0x3e	; 62
    7540:	26 97       	sbiw	r28, 0x06	; 6
    7542:	cd bf       	out	0x3d, r28	; 61
    7544:	de bf       	out	0x3e, r29	; 62
    7546:	8b 83       	std	Y+3, r24	; 0x03
    7548:	6c 83       	std	Y+4, r22	; 0x04
    754a:	7d 83       	std	Y+5, r23	; 0x05
    754c:	4e 83       	std	Y+6, r20	; 0x06
		uint8_t tries = 10;
    754e:	8a e0       	ldi	r24, 0x0A	; 10
    7550:	89 83       	std	Y+1, r24	; 0x01
		bool fail;
		while(tries-- && (fail = I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    7552:	89 81       	ldd	r24, Y+1	; 0x01
    7554:	9f ef       	ldi	r25, 0xFF	; 255
    7556:	98 0f       	add	r25, r24
    7558:	99 83       	std	Y+1, r25	; 0x01
    755a:	88 23       	and	r24, r24
    755c:	a1 f0       	breq	.+40     	; 0x7586 <_Z16si5351_read_bulkhPhh+0x4e>
    755e:	8c 81       	ldd	r24, Y+4	; 0x04
    7560:	9d 81       	ldd	r25, Y+5	; 0x05
    7562:	2e 81       	ldd	r18, Y+6	; 0x06
    7564:	ac 01       	movw	r20, r24
    7566:	6b 81       	ldd	r22, Y+3	; 0x03
    7568:	80 ec       	ldi	r24, 0xC0	; 192
    756a:	0e 94 e0 28 	call	0x51c0	; 0x51c0 <I2C_1_GetData>
    756e:	28 2f       	mov	r18, r24
    7570:	81 e0       	ldi	r24, 0x01	; 1
    7572:	9e 81       	ldd	r25, Y+6	; 0x06
    7574:	29 17       	cp	r18, r25
    7576:	09 f4       	brne	.+2      	; 0x757a <_Z16si5351_read_bulkhPhh+0x42>
    7578:	80 e0       	ldi	r24, 0x00	; 0
    757a:	8a 83       	std	Y+2, r24	; 0x02
    757c:	8a 81       	ldd	r24, Y+2	; 0x02
    757e:	88 23       	and	r24, r24
    7580:	11 f0       	breq	.+4      	; 0x7586 <_Z16si5351_read_bulkhPhh+0x4e>
    7582:	81 e0       	ldi	r24, 0x01	; 1
    7584:	01 c0       	rjmp	.+2      	; 0x7588 <_Z16si5351_read_bulkhPhh+0x50>
    7586:	80 e0       	ldi	r24, 0x00	; 0
    7588:	88 23       	and	r24, r24
    758a:	09 f0       	breq	.+2      	; 0x758e <_Z16si5351_read_bulkhPhh+0x56>
    758c:	e2 cf       	rjmp	.-60     	; 0x7552 <_Z16si5351_read_bulkhPhh+0x1a>
		return(fail);
    758e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    7590:	26 96       	adiw	r28, 0x06	; 6
    7592:	cd bf       	out	0x3d, r28	; 61
    7594:	de bf       	out	0x3e, r29	; 62
    7596:	df 91       	pop	r29
    7598:	cf 91       	pop	r28
    759a:	08 95       	ret

0000759c <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    759c:	cf 93       	push	r28
    759e:	df 93       	push	r29
    75a0:	cd b7       	in	r28, 0x3d	; 61
    75a2:	de b7       	in	r29, 0x3e	; 62
    75a4:	25 97       	sbiw	r28, 0x05	; 5
    75a6:	cd bf       	out	0x3d, r28	; 61
    75a8:	de bf       	out	0x3e, r29	; 62
    75aa:	8c 83       	std	Y+4, r24	; 0x04
    75ac:	6d 83       	std	Y+5, r22	; 0x05
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    75ae:	8c 81       	ldd	r24, Y+4	; 0x04
    75b0:	20 e1       	ldi	r18, 0x10	; 16
    75b2:	28 0f       	add	r18, r24
    75b4:	ce 01       	movw	r24, r28
    75b6:	02 96       	adiw	r24, 0x02	; 2
    75b8:	41 e0       	ldi	r20, 0x01	; 1
    75ba:	bc 01       	movw	r22, r24
    75bc:	82 2f       	mov	r24, r18
    75be:	0e 94 9c 3a 	call	0x7538	; 0x7538 <_Z16si5351_read_bulkhPhh>
    75c2:	88 23       	and	r24, r24
    75c4:	11 f0       	breq	.+4      	; 0x75ca <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x2e>
		{
			return(true);
    75c6:	81 e0       	ldi	r24, 0x01	; 1
    75c8:	20 c0       	rjmp	.+64     	; 0x760a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x6e>
		}
		
		reg_val = data[0];
    75ca:	8a 81       	ldd	r24, Y+2	; 0x02
    75cc:	89 83       	std	Y+1, r24	; 0x01

		if(pll == SI5351_PLLA)
    75ce:	8d 81       	ldd	r24, Y+5	; 0x05
    75d0:	81 30       	cpi	r24, 0x01	; 1
    75d2:	21 f4       	brne	.+8      	; 0x75dc <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x40>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    75d4:	89 81       	ldd	r24, Y+1	; 0x01
    75d6:	8f 7d       	andi	r24, 0xDF	; 223
    75d8:	89 83       	std	Y+1, r24	; 0x01
    75da:	06 c0       	rjmp	.+12     	; 0x75e8 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x4c>
		}
		else if(pll == SI5351_PLLB)
    75dc:	8d 81       	ldd	r24, Y+5	; 0x05
    75de:	82 30       	cpi	r24, 0x02	; 2
    75e0:	19 f4       	brne	.+6      	; 0x75e8 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x4c>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    75e2:	89 81       	ldd	r24, Y+1	; 0x01
    75e4:	80 62       	ori	r24, 0x20	; 32
    75e6:	89 83       	std	Y+1, r24	; 0x01
		}

		data[0] = reg_val;
    75e8:	89 81       	ldd	r24, Y+1	; 0x01
    75ea:	8a 83       	std	Y+2, r24	; 0x02
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    75ec:	8c 81       	ldd	r24, Y+4	; 0x04
    75ee:	20 e1       	ldi	r18, 0x10	; 16
    75f0:	28 0f       	add	r18, r24
    75f2:	ce 01       	movw	r24, r28
    75f4:	02 96       	adiw	r24, 0x02	; 2
    75f6:	41 e0       	ldi	r20, 0x01	; 1
    75f8:	bc 01       	movw	r22, r24
    75fa:	82 2f       	mov	r24, r18
    75fc:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    7600:	88 23       	and	r24, r24
    7602:	11 f0       	breq	.+4      	; 0x7608 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x6c>
		{
			return(true);
    7604:	81 e0       	ldi	r24, 0x01	; 1
    7606:	01 c0       	rjmp	.+2      	; 0x760a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x6e>
		}
		
		return(false);
    7608:	80 e0       	ldi	r24, 0x00	; 0
	}
    760a:	25 96       	adiw	r28, 0x05	; 5
    760c:	cd bf       	out	0x3d, r28	; 61
    760e:	de bf       	out	0x3e, r29	; 62
    7610:	df 91       	pop	r29
    7612:	cf 91       	pop	r28
    7614:	08 95       	ret

00007616 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    7616:	8f 92       	push	r8
    7618:	af 92       	push	r10
    761a:	cf 92       	push	r12
    761c:	df 92       	push	r13
    761e:	ef 92       	push	r14
    7620:	ff 92       	push	r15
    7622:	0f 93       	push	r16
    7624:	1f 93       	push	r17
    7626:	cf 93       	push	r28
    7628:	df 93       	push	r29
    762a:	cd b7       	in	r28, 0x3d	; 61
    762c:	de b7       	in	r29, 0x3e	; 62
    762e:	6e 97       	sbiw	r28, 0x1e	; 30
    7630:	cd bf       	out	0x3d, r28	; 61
    7632:	de bf       	out	0x3e, r29	; 62
    7634:	88 8b       	std	Y+16, r24	; 0x10
    7636:	c9 8a       	std	Y+17, r12	; 0x11
    7638:	da 8a       	std	Y+18, r13	; 0x12
    763a:	eb 8a       	std	Y+19, r14	; 0x13
    763c:	fc 8a       	std	Y+20, r15	; 0x14
    763e:	0d 8b       	std	Y+21, r16	; 0x15
    7640:	1e 8b       	std	Y+22, r17	; 0x16
    7642:	2f 8b       	std	Y+23, r18	; 0x17
    7644:	38 8f       	std	Y+24, r19	; 0x18
    7646:	49 8f       	std	Y+25, r20	; 0x19
    7648:	5a 8f       	std	Y+26, r21	; 0x1a
    764a:	6b 8f       	std	Y+27, r22	; 0x1b
    764c:	7c 8f       	std	Y+28, r23	; 0x1c
    764e:	ad 8e       	std	Y+29, r10	; 0x1d
    7650:	8e 8e       	std	Y+30, r8	; 0x1e
		uint8_t params[11];
		uint8_t i = 0;
    7652:	19 82       	std	Y+1, r1	; 0x01
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    7654:	89 81       	ldd	r24, Y+1	; 0x01
    7656:	91 e0       	ldi	r25, 0x01	; 1
    7658:	98 0f       	add	r25, r24
    765a:	99 83       	std	Y+1, r25	; 0x01
    765c:	88 2f       	mov	r24, r24
    765e:	90 e0       	ldi	r25, 0x00	; 0
    7660:	4a 8d       	ldd	r20, Y+26	; 0x1a
    7662:	9e 01       	movw	r18, r28
    7664:	2d 5f       	subi	r18, 0xFD	; 253
    7666:	3f 4f       	sbci	r19, 0xFF	; 255
    7668:	82 0f       	add	r24, r18
    766a:	93 1f       	adc	r25, r19
    766c:	fc 01       	movw	r30, r24
    766e:	40 83       	st	Z, r20
		params[i++] = ms_reg.reg.p3_0;
    7670:	89 81       	ldd	r24, Y+1	; 0x01
    7672:	91 e0       	ldi	r25, 0x01	; 1
    7674:	98 0f       	add	r25, r24
    7676:	99 83       	std	Y+1, r25	; 0x01
    7678:	88 2f       	mov	r24, r24
    767a:	90 e0       	ldi	r25, 0x00	; 0
    767c:	49 8d       	ldd	r20, Y+25	; 0x19
    767e:	9e 01       	movw	r18, r28
    7680:	2d 5f       	subi	r18, 0xFD	; 253
    7682:	3f 4f       	sbci	r19, 0xFF	; 255
    7684:	82 0f       	add	r24, r18
    7686:	93 1f       	adc	r25, r19
    7688:	fc 01       	movw	r30, r24
    768a:	40 83       	st	Z, r20

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    768c:	88 89       	ldd	r24, Y+16	; 0x10
    768e:	88 0f       	add	r24, r24
    7690:	88 0f       	add	r24, r24
    7692:	88 0f       	add	r24, r24
    7694:	2c e2       	ldi	r18, 0x2C	; 44
    7696:	28 0f       	add	r18, r24
    7698:	ce 01       	movw	r24, r28
    769a:	0e 96       	adiw	r24, 0x0e	; 14
    769c:	41 e0       	ldi	r20, 0x01	; 1
    769e:	bc 01       	movw	r22, r24
    76a0:	82 2f       	mov	r24, r18
    76a2:	0e 94 9c 3a 	call	0x7538	; 0x7538 <_Z16si5351_read_bulkhPhh>
    76a6:	88 23       	and	r24, r24
    76a8:	11 f0       	breq	.+4      	; 0x76ae <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x98>
		{
			return(true);
    76aa:	81 e0       	ldi	r24, 0x01	; 1
    76ac:	bc c0       	rjmp	.+376    	; 0x7826 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x210>
		}
		
		reg_val = data[0];
    76ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    76b0:	8a 83       	std	Y+2, r24	; 0x02

		reg_val &= 0xFC;    /*~(0x03); */
    76b2:	8a 81       	ldd	r24, Y+2	; 0x02
    76b4:	8c 7f       	andi	r24, 0xFC	; 252
    76b6:	8a 83       	std	Y+2, r24	; 0x02
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    76b8:	89 81       	ldd	r24, Y+1	; 0x01
    76ba:	91 e0       	ldi	r25, 0x01	; 1
    76bc:	98 0f       	add	r25, r24
    76be:	99 83       	std	Y+1, r25	; 0x01
    76c0:	88 2f       	mov	r24, r24
    76c2:	90 e0       	ldi	r25, 0x00	; 0
    76c4:	2b 89       	ldd	r18, Y+19	; 0x13
    76c6:	32 2f       	mov	r19, r18
    76c8:	33 70       	andi	r19, 0x03	; 3
    76ca:	2a 81       	ldd	r18, Y+2	; 0x02
    76cc:	23 2b       	or	r18, r19
    76ce:	42 2f       	mov	r20, r18
    76d0:	9e 01       	movw	r18, r28
    76d2:	2d 5f       	subi	r18, 0xFD	; 253
    76d4:	3f 4f       	sbci	r19, 0xFF	; 255
    76d6:	82 0f       	add	r24, r18
    76d8:	93 1f       	adc	r25, r19
    76da:	fc 01       	movw	r30, r24
    76dc:	40 83       	st	Z, r20

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    76de:	89 81       	ldd	r24, Y+1	; 0x01
    76e0:	91 e0       	ldi	r25, 0x01	; 1
    76e2:	98 0f       	add	r25, r24
    76e4:	99 83       	std	Y+1, r25	; 0x01
    76e6:	88 2f       	mov	r24, r24
    76e8:	90 e0       	ldi	r25, 0x00	; 0
    76ea:	4a 89       	ldd	r20, Y+18	; 0x12
    76ec:	9e 01       	movw	r18, r28
    76ee:	2d 5f       	subi	r18, 0xFD	; 253
    76f0:	3f 4f       	sbci	r19, 0xFF	; 255
    76f2:	82 0f       	add	r24, r18
    76f4:	93 1f       	adc	r25, r19
    76f6:	fc 01       	movw	r30, r24
    76f8:	40 83       	st	Z, r20
		params[i++] = ms_reg.reg.p1_0;
    76fa:	89 81       	ldd	r24, Y+1	; 0x01
    76fc:	91 e0       	ldi	r25, 0x01	; 1
    76fe:	98 0f       	add	r25, r24
    7700:	99 83       	std	Y+1, r25	; 0x01
    7702:	88 2f       	mov	r24, r24
    7704:	90 e0       	ldi	r25, 0x00	; 0
    7706:	49 89       	ldd	r20, Y+17	; 0x11
    7708:	9e 01       	movw	r18, r28
    770a:	2d 5f       	subi	r18, 0xFD	; 253
    770c:	3f 4f       	sbci	r19, 0xFF	; 255
    770e:	82 0f       	add	r24, r18
    7710:	93 1f       	adc	r25, r19
    7712:	fc 01       	movw	r30, r24
    7714:	40 83       	st	Z, r20

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    7716:	89 81       	ldd	r24, Y+1	; 0x01
    7718:	88 2f       	mov	r24, r24
    771a:	90 e0       	ldi	r25, 0x00	; 0
    771c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    771e:	42 2f       	mov	r20, r18
    7720:	42 95       	swap	r20
    7722:	40 7f       	andi	r20, 0xF0	; 240
    7724:	9e 01       	movw	r18, r28
    7726:	2d 5f       	subi	r18, 0xFD	; 253
    7728:	3f 4f       	sbci	r19, 0xFF	; 255
    772a:	82 0f       	add	r24, r18
    772c:	93 1f       	adc	r25, r19
    772e:	fc 01       	movw	r30, r24
    7730:	40 83       	st	Z, r20
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    7732:	29 81       	ldd	r18, Y+1	; 0x01
    7734:	81 e0       	ldi	r24, 0x01	; 1
    7736:	82 0f       	add	r24, r18
    7738:	89 83       	std	Y+1, r24	; 0x01
    773a:	82 2f       	mov	r24, r18
    773c:	90 e0       	ldi	r25, 0x00	; 0
    773e:	22 2f       	mov	r18, r18
    7740:	30 e0       	ldi	r19, 0x00	; 0
    7742:	ae 01       	movw	r20, r28
    7744:	4d 5f       	subi	r20, 0xFD	; 253
    7746:	5f 4f       	sbci	r21, 0xFF	; 255
    7748:	24 0f       	add	r18, r20
    774a:	35 1f       	adc	r19, r21
    774c:	f9 01       	movw	r30, r18
    774e:	30 81       	ld	r19, Z
    7750:	2f 89       	ldd	r18, Y+23	; 0x17
    7752:	2f 70       	andi	r18, 0x0F	; 15
    7754:	43 2f       	mov	r20, r19
    7756:	42 0f       	add	r20, r18
    7758:	9e 01       	movw	r18, r28
    775a:	2d 5f       	subi	r18, 0xFD	; 253
    775c:	3f 4f       	sbci	r19, 0xFF	; 255
    775e:	82 0f       	add	r24, r18
    7760:	93 1f       	adc	r25, r19
    7762:	fc 01       	movw	r30, r24
    7764:	40 83       	st	Z, r20

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    7766:	89 81       	ldd	r24, Y+1	; 0x01
    7768:	91 e0       	ldi	r25, 0x01	; 1
    776a:	98 0f       	add	r25, r24
    776c:	99 83       	std	Y+1, r25	; 0x01
    776e:	88 2f       	mov	r24, r24
    7770:	90 e0       	ldi	r25, 0x00	; 0
    7772:	4e 89       	ldd	r20, Y+22	; 0x16
    7774:	9e 01       	movw	r18, r28
    7776:	2d 5f       	subi	r18, 0xFD	; 253
    7778:	3f 4f       	sbci	r19, 0xFF	; 255
    777a:	82 0f       	add	r24, r18
    777c:	93 1f       	adc	r25, r19
    777e:	fc 01       	movw	r30, r24
    7780:	40 83       	st	Z, r20
		params[i++] = ms_reg.reg.p2_0;
    7782:	89 81       	ldd	r24, Y+1	; 0x01
    7784:	91 e0       	ldi	r25, 0x01	; 1
    7786:	98 0f       	add	r25, r24
    7788:	99 83       	std	Y+1, r25	; 0x01
    778a:	88 2f       	mov	r24, r24
    778c:	90 e0       	ldi	r25, 0x00	; 0
    778e:	4d 89       	ldd	r20, Y+21	; 0x15
    7790:	9e 01       	movw	r18, r28
    7792:	2d 5f       	subi	r18, 0xFD	; 253
    7794:	3f 4f       	sbci	r19, 0xFF	; 255
    7796:	82 0f       	add	r24, r18
    7798:	93 1f       	adc	r25, r19
    779a:	fc 01       	movw	r30, r24
    779c:	40 83       	st	Z, r20

		/* Write the parameters */
		switch(clk)
    779e:	88 89       	ldd	r24, Y+16	; 0x10
    77a0:	88 2f       	mov	r24, r24
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	81 30       	cpi	r24, 0x01	; 1
    77a6:	91 05       	cpc	r25, r1
    77a8:	89 f0       	breq	.+34     	; 0x77cc <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1b6>
    77aa:	82 30       	cpi	r24, 0x02	; 2
    77ac:	91 05       	cpc	r25, r1
    77ae:	c9 f0       	breq	.+50     	; 0x77e2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1cc>
    77b0:	89 2b       	or	r24, r25
    77b2:	09 f0       	breq	.+2      	; 0x77b6 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1a0>
			break;

			default:
			{
			}
			break;
    77b4:	26 c0       	rjmp	.+76     	; 0x7802 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1ec>
		/* Write the parameters */
		switch(clk)
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    77b6:	ce 01       	movw	r24, r28
    77b8:	03 96       	adiw	r24, 0x03	; 3
    77ba:	49 81       	ldd	r20, Y+1	; 0x01
    77bc:	bc 01       	movw	r22, r24
    77be:	8a e2       	ldi	r24, 0x2A	; 42
    77c0:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    77c4:	88 23       	and	r24, r24
    77c6:	c1 f0       	breq	.+48     	; 0x77f8 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1e2>
				{
					return(true);
    77c8:	81 e0       	ldi	r24, 0x01	; 1
    77ca:	2d c0       	rjmp	.+90     	; 0x7826 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x210>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    77cc:	ce 01       	movw	r24, r28
    77ce:	03 96       	adiw	r24, 0x03	; 3
    77d0:	49 81       	ldd	r20, Y+1	; 0x01
    77d2:	bc 01       	movw	r22, r24
    77d4:	82 e3       	ldi	r24, 0x32	; 50
    77d6:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    77da:	88 23       	and	r24, r24
    77dc:	79 f0       	breq	.+30     	; 0x77fc <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1e6>
				{
					return(true);
    77de:	81 e0       	ldi	r24, 0x01	; 1
    77e0:	22 c0       	rjmp	.+68     	; 0x7826 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x210>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    77e2:	ce 01       	movw	r24, r28
    77e4:	03 96       	adiw	r24, 0x03	; 3
    77e6:	49 81       	ldd	r20, Y+1	; 0x01
    77e8:	bc 01       	movw	r22, r24
    77ea:	8a e3       	ldi	r24, 0x3A	; 58
    77ec:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
    77f0:	88 23       	and	r24, r24
    77f2:	31 f0       	breq	.+12     	; 0x7800 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1ea>
				{
					return(true);
    77f4:	81 e0       	ldi	r24, 0x01	; 1
    77f6:	17 c0       	rjmp	.+46     	; 0x7826 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x210>
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
				{
					return(true);
				}
			}
			break;
    77f8:	00 00       	nop
    77fa:	03 c0       	rjmp	.+6      	; 0x7802 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1ec>
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
				{
					return(true);
				}
			}
			break;
    77fc:	00 00       	nop
    77fe:	01 c0       	rjmp	.+2      	; 0x7802 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1ec>
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
				{
					return(true);
				}
			}
			break;
    7800:	00 00       	nop
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    7802:	6d 8d       	ldd	r22, Y+29	; 0x1d
    7804:	88 89       	ldd	r24, Y+16	; 0x10
    7806:	0e 94 21 3c 	call	0x7842	; 0x7842 <_Z16set_integer_mode12si5351_clockb>
    780a:	88 23       	and	r24, r24
    780c:	11 f0       	breq	.+4      	; 0x7812 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x1fc>
		{
			return(true);
    780e:	81 e0       	ldi	r24, 0x01	; 1
    7810:	0a c0       	rjmp	.+20     	; 0x7826 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x210>
		}
		
		if(ms_div(clk, r_div, div_by_4))
    7812:	4b a5       	ldd	r20, Y+43	; 0x2b
    7814:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7816:	88 89       	ldd	r24, Y+16	; 0x10
    7818:	0e 94 56 3c 	call	0x78ac	; 0x78ac <_Z6ms_div12si5351_clockhb>
    781c:	88 23       	and	r24, r24
    781e:	11 f0       	breq	.+4      	; 0x7824 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x20e>
		{
			return(true);
    7820:	81 e0       	ldi	r24, 0x01	; 1
    7822:	01 c0       	rjmp	.+2      	; 0x7826 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x210>
		}
		
		return(false);
    7824:	80 e0       	ldi	r24, 0x00	; 0
	}
    7826:	6e 96       	adiw	r28, 0x1e	; 30
    7828:	cd bf       	out	0x3d, r28	; 61
    782a:	de bf       	out	0x3e, r29	; 62
    782c:	df 91       	pop	r29
    782e:	cf 91       	pop	r28
    7830:	1f 91       	pop	r17
    7832:	0f 91       	pop	r16
    7834:	ff 90       	pop	r15
    7836:	ef 90       	pop	r14
    7838:	df 90       	pop	r13
    783a:	cf 90       	pop	r12
    783c:	af 90       	pop	r10
    783e:	8f 90       	pop	r8
    7840:	08 95       	ret

00007842 <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    7842:	cf 93       	push	r28
    7844:	df 93       	push	r29
    7846:	cd b7       	in	r28, 0x3d	; 61
    7848:	de b7       	in	r29, 0x3e	; 62
    784a:	25 97       	sbiw	r28, 0x05	; 5
    784c:	cd bf       	out	0x3d, r28	; 61
    784e:	de bf       	out	0x3e, r29	; 62
    7850:	8c 83       	std	Y+4, r24	; 0x04
    7852:	6d 83       	std	Y+5, r22	; 0x05
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    7854:	8c 81       	ldd	r24, Y+4	; 0x04
    7856:	20 e1       	ldi	r18, 0x10	; 16
    7858:	28 0f       	add	r18, r24
    785a:	ce 01       	movw	r24, r28
    785c:	02 96       	adiw	r24, 0x02	; 2
    785e:	41 e0       	ldi	r20, 0x01	; 1
    7860:	bc 01       	movw	r22, r24
    7862:	82 2f       	mov	r24, r18
    7864:	0e 94 9c 3a 	call	0x7538	; 0x7538 <_Z16si5351_read_bulkhPhh>
    7868:	88 23       	and	r24, r24
    786a:	11 f0       	breq	.+4      	; 0x7870 <_Z16set_integer_mode12si5351_clockb+0x2e>
		{
			return(true);
    786c:	81 e0       	ldi	r24, 0x01	; 1
    786e:	18 c0       	rjmp	.+48     	; 0x78a0 <_Z16set_integer_mode12si5351_clockb+0x5e>
		}
		
		reg_val = data[0];
    7870:	8a 81       	ldd	r24, Y+2	; 0x02
    7872:	89 83       	std	Y+1, r24	; 0x01

		if(enable)
    7874:	8d 81       	ldd	r24, Y+5	; 0x05
    7876:	88 23       	and	r24, r24
    7878:	21 f0       	breq	.+8      	; 0x7882 <_Z16set_integer_mode12si5351_clockb+0x40>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    787a:	89 81       	ldd	r24, Y+1	; 0x01
    787c:	80 64       	ori	r24, 0x40	; 64
    787e:	89 83       	std	Y+1, r24	; 0x01
    7880:	03 c0       	rjmp	.+6      	; 0x7888 <_Z16set_integer_mode12si5351_clockb+0x46>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    7882:	89 81       	ldd	r24, Y+1	; 0x01
    7884:	8f 7b       	andi	r24, 0xBF	; 191
    7886:	89 83       	std	Y+1, r24	; 0x01
		}

		data[0] = reg_val;
    7888:	89 81       	ldd	r24, Y+1	; 0x01
    788a:	8a 83       	std	Y+2, r24	; 0x02
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    788c:	8c 81       	ldd	r24, Y+4	; 0x04
    788e:	20 e1       	ldi	r18, 0x10	; 16
    7890:	28 0f       	add	r18, r24
    7892:	ce 01       	movw	r24, r28
    7894:	02 96       	adiw	r24, 0x02	; 2
    7896:	41 e0       	ldi	r20, 0x01	; 1
    7898:	bc 01       	movw	r22, r24
    789a:	82 2f       	mov	r24, r18
    789c:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
	}
    78a0:	25 96       	adiw	r28, 0x05	; 5
    78a2:	cd bf       	out	0x3d, r28	; 61
    78a4:	de bf       	out	0x3e, r29	; 62
    78a6:	df 91       	pop	r29
    78a8:	cf 91       	pop	r28
    78aa:	08 95       	ret

000078ac <_Z6ms_div12si5351_clockhb>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    78ac:	cf 93       	push	r28
    78ae:	df 93       	push	r29
    78b0:	cd b7       	in	r28, 0x3d	; 61
    78b2:	de b7       	in	r29, 0x3e	; 62
    78b4:	27 97       	sbiw	r28, 0x07	; 7
    78b6:	cd bf       	out	0x3d, r28	; 61
    78b8:	de bf       	out	0x3e, r29	; 62
    78ba:	8d 83       	std	Y+5, r24	; 0x05
    78bc:	6e 83       	std	Y+6, r22	; 0x06
    78be:	4f 83       	std	Y+7, r20	; 0x07
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    78c0:	8d 81       	ldd	r24, Y+5	; 0x05
    78c2:	88 2f       	mov	r24, r24
    78c4:	90 e0       	ldi	r25, 0x00	; 0
    78c6:	81 30       	cpi	r24, 0x01	; 1
    78c8:	91 05       	cpc	r25, r1
    78ca:	41 f0       	breq	.+16     	; 0x78dc <_Z6ms_div12si5351_clockhb+0x30>
    78cc:	82 30       	cpi	r24, 0x02	; 2
    78ce:	91 05       	cpc	r25, r1
    78d0:	41 f0       	breq	.+16     	; 0x78e2 <_Z6ms_div12si5351_clockhb+0x36>
    78d2:	89 2b       	or	r24, r25
    78d4:	49 f4       	brne	.+18     	; 0x78e8 <_Z6ms_div12si5351_clockhb+0x3c>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    78d6:	8c e2       	ldi	r24, 0x2C	; 44
    78d8:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
    78da:	08 c0       	rjmp	.+16     	; 0x78ec <_Z6ms_div12si5351_clockhb+0x40>

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    78dc:	84 e3       	ldi	r24, 0x34	; 52
    78de:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
    78e0:	05 c0       	rjmp	.+10     	; 0x78ec <_Z6ms_div12si5351_clockhb+0x40>

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    78e2:	8c e3       	ldi	r24, 0x3C	; 60
    78e4:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
    78e6:	02 c0       	rjmp	.+4      	; 0x78ec <_Z6ms_div12si5351_clockhb+0x40>

			default:
				return(true);
    78e8:	81 e0       	ldi	r24, 0x01	; 1
    78ea:	30 c0       	rjmp	.+96     	; 0x794c <_Z6ms_div12si5351_clockhb+0xa0>
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    78ec:	ce 01       	movw	r24, r28
    78ee:	03 96       	adiw	r24, 0x03	; 3
    78f0:	41 e0       	ldi	r20, 0x01	; 1
    78f2:	bc 01       	movw	r22, r24
    78f4:	8a 81       	ldd	r24, Y+2	; 0x02
    78f6:	0e 94 9c 3a 	call	0x7538	; 0x7538 <_Z16si5351_read_bulkhPhh>
    78fa:	88 23       	and	r24, r24
    78fc:	11 f0       	breq	.+4      	; 0x7902 <_Z6ms_div12si5351_clockhb+0x56>
		{
			return(true);
    78fe:	81 e0       	ldi	r24, 0x01	; 1
    7900:	25 c0       	rjmp	.+74     	; 0x794c <_Z6ms_div12si5351_clockhb+0xa0>
		}
		
		reg_val = data[0];
    7902:	8b 81       	ldd	r24, Y+3	; 0x03
    7904:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    7906:	89 81       	ldd	r24, Y+1	; 0x01
    7908:	83 78       	andi	r24, 0x83	; 131
    790a:	89 83       	std	Y+1, r24	; 0x01

		if(div_by_4)
    790c:	8f 81       	ldd	r24, Y+7	; 0x07
    790e:	88 23       	and	r24, r24
    7910:	21 f0       	breq	.+8      	; 0x791a <_Z6ms_div12si5351_clockhb+0x6e>
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    7912:	89 81       	ldd	r24, Y+1	; 0x01
    7914:	8c 60       	ori	r24, 0x0C	; 12
    7916:	89 83       	std	Y+1, r24	; 0x01
    7918:	03 c0       	rjmp	.+6      	; 0x7920 <_Z6ms_div12si5351_clockhb+0x74>
		}
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
    791a:	89 81       	ldd	r24, Y+1	; 0x01
    791c:	83 7f       	andi	r24, 0xF3	; 243
    791e:	89 83       	std	Y+1, r24	; 0x01
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    7920:	8e 81       	ldd	r24, Y+6	; 0x06
    7922:	88 2f       	mov	r24, r24
    7924:	90 e0       	ldi	r25, 0x00	; 0
    7926:	82 95       	swap	r24
    7928:	92 95       	swap	r25
    792a:	90 7f       	andi	r25, 0xF0	; 240
    792c:	98 27       	eor	r25, r24
    792e:	80 7f       	andi	r24, 0xF0	; 240
    7930:	98 27       	eor	r25, r24
    7932:	98 2f       	mov	r25, r24
    7934:	89 81       	ldd	r24, Y+1	; 0x01
    7936:	89 2b       	or	r24, r25
    7938:	89 83       	std	Y+1, r24	; 0x01

		data[0] = reg_val;
    793a:	89 81       	ldd	r24, Y+1	; 0x01
    793c:	8b 83       	std	Y+3, r24	; 0x03
		return(si5351_write_bulk(reg_addr, data, 1));
    793e:	ce 01       	movw	r24, r28
    7940:	03 96       	adiw	r24, 0x03	; 3
    7942:	41 e0       	ldi	r20, 0x01	; 1
    7944:	bc 01       	movw	r22, r24
    7946:	8a 81       	ldd	r24, Y+2	; 0x02
    7948:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <_Z17si5351_write_bulkhPhh>
	}
    794c:	27 96       	adiw	r28, 0x07	; 7
    794e:	cd bf       	out	0x3d, r28	; 61
    7950:	de bf       	out	0x3e, r29	; 62
    7952:	df 91       	pop	r29
    7954:	cf 91       	pop	r28
    7956:	08 95       	ret

00007958 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    7958:	cf 93       	push	r28
    795a:	df 93       	push	r29
    795c:	cd b7       	in	r28, 0x3d	; 61
    795e:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    7960:	80 e0       	ldi	r24, 0x00	; 0
}
    7962:	df 91       	pop	r29
    7964:	cf 91       	pop	r28
    7966:	08 95       	ret

00007968 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    7968:	cf 93       	push	r28
    796a:	df 93       	push	r29
    796c:	00 d0       	rcall	.+0      	; 0x796e <PORTA_set_pin_dir+0x6>
    796e:	cd b7       	in	r28, 0x3d	; 61
    7970:	de b7       	in	r29, 0x3e	; 62
    7972:	89 83       	std	Y+1, r24	; 0x01
    7974:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    7976:	8a 81       	ldd	r24, Y+2	; 0x02
    7978:	88 2f       	mov	r24, r24
    797a:	90 e0       	ldi	r25, 0x00	; 0
    797c:	81 30       	cpi	r24, 0x01	; 1
    797e:	91 05       	cpc	r25, r1
    7980:	e1 f0       	breq	.+56     	; 0x79ba <PORTA_set_pin_dir+0x52>
    7982:	82 30       	cpi	r24, 0x02	; 2
    7984:	91 05       	cpc	r25, r1
    7986:	71 f1       	breq	.+92     	; 0x79e4 <PORTA_set_pin_dir+0x7c>
    7988:	89 2b       	or	r24, r25
    798a:	09 f0       	breq	.+2      	; 0x798e <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    798c:	3b c0       	rjmp	.+118    	; 0x7a04 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    798e:	20 e0       	ldi	r18, 0x00	; 0
    7990:	30 e0       	ldi	r19, 0x00	; 0
    7992:	80 e0       	ldi	r24, 0x00	; 0
    7994:	90 e0       	ldi	r25, 0x00	; 0
    7996:	fc 01       	movw	r30, r24
    7998:	80 81       	ld	r24, Z
    799a:	68 2f       	mov	r22, r24
    799c:	89 81       	ldd	r24, Y+1	; 0x01
    799e:	48 2f       	mov	r20, r24
    79a0:	50 e0       	ldi	r21, 0x00	; 0
    79a2:	81 e0       	ldi	r24, 0x01	; 1
    79a4:	90 e0       	ldi	r25, 0x00	; 0
    79a6:	02 c0       	rjmp	.+4      	; 0x79ac <PORTA_set_pin_dir+0x44>
    79a8:	88 0f       	add	r24, r24
    79aa:	99 1f       	adc	r25, r25
    79ac:	4a 95       	dec	r20
    79ae:	e2 f7       	brpl	.-8      	; 0x79a8 <PORTA_set_pin_dir+0x40>
    79b0:	80 95       	com	r24
    79b2:	86 23       	and	r24, r22
    79b4:	f9 01       	movw	r30, r18
    79b6:	80 83       	st	Z, r24
		break;
    79b8:	25 c0       	rjmp	.+74     	; 0x7a04 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    79ba:	20 e0       	ldi	r18, 0x00	; 0
    79bc:	30 e0       	ldi	r19, 0x00	; 0
    79be:	80 e0       	ldi	r24, 0x00	; 0
    79c0:	90 e0       	ldi	r25, 0x00	; 0
    79c2:	fc 01       	movw	r30, r24
    79c4:	80 81       	ld	r24, Z
    79c6:	68 2f       	mov	r22, r24
    79c8:	89 81       	ldd	r24, Y+1	; 0x01
    79ca:	48 2f       	mov	r20, r24
    79cc:	50 e0       	ldi	r21, 0x00	; 0
    79ce:	81 e0       	ldi	r24, 0x01	; 1
    79d0:	90 e0       	ldi	r25, 0x00	; 0
    79d2:	02 c0       	rjmp	.+4      	; 0x79d8 <PORTA_set_pin_dir+0x70>
    79d4:	88 0f       	add	r24, r24
    79d6:	99 1f       	adc	r25, r25
    79d8:	4a 95       	dec	r20
    79da:	e2 f7       	brpl	.-8      	; 0x79d4 <PORTA_set_pin_dir+0x6c>
    79dc:	86 2b       	or	r24, r22
    79de:	f9 01       	movw	r30, r18
    79e0:	80 83       	st	Z, r24
		break;
    79e2:	10 c0       	rjmp	.+32     	; 0x7a04 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    79e4:	89 81       	ldd	r24, Y+1	; 0x01
    79e6:	88 2f       	mov	r24, r24
    79e8:	90 e0       	ldi	r25, 0x00	; 0
    79ea:	80 5f       	subi	r24, 0xF0	; 240
    79ec:	9b 4f       	sbci	r25, 0xFB	; 251
    79ee:	29 81       	ldd	r18, Y+1	; 0x01
    79f0:	22 2f       	mov	r18, r18
    79f2:	30 e0       	ldi	r19, 0x00	; 0
    79f4:	20 5f       	subi	r18, 0xF0	; 240
    79f6:	3b 4f       	sbci	r19, 0xFB	; 251
    79f8:	f9 01       	movw	r30, r18
    79fa:	20 81       	ld	r18, Z
    79fc:	28 60       	ori	r18, 0x08	; 8
    79fe:	fc 01       	movw	r30, r24
    7a00:	20 83       	st	Z, r18
		break;
    7a02:	00 00       	nop
	default:
		break;
	}
}
    7a04:	00 00       	nop
    7a06:	0f 90       	pop	r0
    7a08:	0f 90       	pop	r0
    7a0a:	df 91       	pop	r29
    7a0c:	cf 91       	pop	r28
    7a0e:	08 95       	ret

00007a10 <PORTA_toggle_port_level>:
 *
 * \param[in] mask  Bit mask where 1 means toggle pin level to the corresponding
 *                  pin
 */
static inline void PORTA_toggle_port_level(const uint8_t mask)
{
    7a10:	cf 93       	push	r28
    7a12:	df 93       	push	r29
    7a14:	1f 92       	push	r1
    7a16:	cd b7       	in	r28, 0x3d	; 61
    7a18:	de b7       	in	r29, 0x3e	; 62
    7a1a:	89 83       	std	Y+1, r24	; 0x01
	PORTA.OUTTGL = mask;
    7a1c:	80 e0       	ldi	r24, 0x00	; 0
    7a1e:	94 e0       	ldi	r25, 0x04	; 4
    7a20:	29 81       	ldd	r18, Y+1	; 0x01
    7a22:	fc 01       	movw	r30, r24
    7a24:	27 83       	std	Z+7, r18	; 0x07
}
    7a26:	00 00       	nop
    7a28:	0f 90       	pop	r0
    7a2a:	df 91       	pop	r29
    7a2c:	cf 91       	pop	r28
    7a2e:	08 95       	ret

00007a30 <__vector_9>:

uint8_t g_fine_freq_adj = 0;
uint8_t g_x;

ISR(TCA0_CMP0_vect)
{
    7a30:	1f 92       	push	r1
    7a32:	0f 92       	push	r0
    7a34:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7a38:	0f 92       	push	r0
    7a3a:	11 24       	eor	r1, r1
    7a3c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7a40:	0f 92       	push	r0
    7a42:	2f 93       	push	r18
    7a44:	3f 93       	push	r19
    7a46:	4f 93       	push	r20
    7a48:	5f 93       	push	r21
    7a4a:	6f 93       	push	r22
    7a4c:	7f 93       	push	r23
    7a4e:	8f 93       	push	r24
    7a50:	9f 93       	push	r25
    7a52:	af 93       	push	r26
    7a54:	bf 93       	push	r27
    7a56:	ef 93       	push	r30
    7a58:	ff 93       	push	r31
    7a5a:	cf 93       	push	r28
    7a5c:	df 93       	push	r29
    7a5e:	cd b7       	in	r28, 0x3d	; 61
    7a60:	de b7       	in	r29, 0x3e	; 62
	#define div 67
	
	static uint8_t cnt = div;
	
	if(!cnt) 
    7a62:	80 91 2c 40 	lds	r24, 0x402C	; 0x80402c <_ZZ10__vector_9E3cnt>
    7a66:	88 23       	and	r24, r24
    7a68:	a1 f4       	brne	.+40     	; 0x7a92 <__vector_9+0x62>
	{
		for(g_x=g_fine_freq_adj; g_x; g_x--)
    7a6a:	80 91 23 48 	lds	r24, 0x4823	; 0x804823 <g_fine_freq_adj>
    7a6e:	80 93 24 48 	sts	0x4824, r24	; 0x804824 <g_x>
    7a72:	80 91 24 48 	lds	r24, 0x4824	; 0x804824 <g_x>
    7a76:	88 23       	and	r24, r24
    7a78:	31 f0       	breq	.+12     	; 0x7a86 <__vector_9+0x56>
    7a7a:	80 91 24 48 	lds	r24, 0x4824	; 0x804824 <g_x>
    7a7e:	81 50       	subi	r24, 0x01	; 1
    7a80:	80 93 24 48 	sts	0x4824, r24	; 0x804824 <g_x>
    7a84:	f6 cf       	rjmp	.-20     	; 0x7a72 <__vector_9+0x42>
// 			
// 			default: // 3.57 kHz
// 			break;
// 		}
		
		PORTA_toggle_port_level(0x01);
    7a86:	81 e0       	ldi	r24, 0x01	; 1
    7a88:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <PORTA_toggle_port_level>
		cnt = div;
    7a8c:	83 e4       	ldi	r24, 0x43	; 67
    7a8e:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <_ZZ10__vector_9E3cnt>
	}
	
	cnt--;
    7a92:	80 91 2c 40 	lds	r24, 0x402C	; 0x80402c <_ZZ10__vector_9E3cnt>
    7a96:	81 50       	subi	r24, 0x01	; 1
    7a98:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <_ZZ10__vector_9E3cnt>
	
// 	PORTA_toggle_port_level(0x01);
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
    7a9c:	80 e0       	ldi	r24, 0x00	; 0
    7a9e:	9a e0       	ldi	r25, 0x0A	; 10
    7aa0:	20 e1       	ldi	r18, 0x10	; 16
    7aa2:	fc 01       	movw	r30, r24
    7aa4:	23 87       	std	Z+11, r18	; 0x0b
}
    7aa6:	00 00       	nop
    7aa8:	df 91       	pop	r29
    7aaa:	cf 91       	pop	r28
    7aac:	ff 91       	pop	r31
    7aae:	ef 91       	pop	r30
    7ab0:	bf 91       	pop	r27
    7ab2:	af 91       	pop	r26
    7ab4:	9f 91       	pop	r25
    7ab6:	8f 91       	pop	r24
    7ab8:	7f 91       	pop	r23
    7aba:	6f 91       	pop	r22
    7abc:	5f 91       	pop	r21
    7abe:	4f 91       	pop	r20
    7ac0:	3f 91       	pop	r19
    7ac2:	2f 91       	pop	r18
    7ac4:	0f 90       	pop	r0
    7ac6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7aca:	0f 90       	pop	r0
    7acc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7ad0:	0f 90       	pop	r0
    7ad2:	1f 90       	pop	r1
    7ad4:	18 95       	reti

00007ad6 <__vector_10>:

ISR(TCA0_CMP1_vect)
{
    7ad6:	1f 92       	push	r1
    7ad8:	0f 92       	push	r0
    7ada:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7ade:	0f 92       	push	r0
    7ae0:	11 24       	eor	r1, r1
    7ae2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7ae6:	0f 92       	push	r0
    7ae8:	2f 93       	push	r18
    7aea:	8f 93       	push	r24
    7aec:	9f 93       	push	r25
    7aee:	ef 93       	push	r30
    7af0:	ff 93       	push	r31
    7af2:	cf 93       	push	r28
    7af4:	df 93       	push	r29
    7af6:	cd b7       	in	r28, 0x3d	; 61
    7af8:	de b7       	in	r29, 0x3e	; 62
// 	if (TCA0_CMP1_isr_cb != NULL)
// 	(*TCA0_CMP1_isr_cb)();
	
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP1_bm;
    7afa:	80 e0       	ldi	r24, 0x00	; 0
    7afc:	9a e0       	ldi	r25, 0x0A	; 10
    7afe:	20 e2       	ldi	r18, 0x20	; 32
    7b00:	fc 01       	movw	r30, r24
    7b02:	23 87       	std	Z+11, r18	; 0x0b
}
    7b04:	00 00       	nop
    7b06:	df 91       	pop	r29
    7b08:	cf 91       	pop	r28
    7b0a:	ff 91       	pop	r31
    7b0c:	ef 91       	pop	r30
    7b0e:	9f 91       	pop	r25
    7b10:	8f 91       	pop	r24
    7b12:	2f 91       	pop	r18
    7b14:	0f 90       	pop	r0
    7b16:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7b1a:	0f 90       	pop	r0
    7b1c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7b20:	0f 90       	pop	r0
    7b22:	1f 90       	pop	r1
    7b24:	18 95       	reti

00007b26 <__vector_11>:

ISR(TCA0_CMP2_vect)
{
    7b26:	1f 92       	push	r1
    7b28:	0f 92       	push	r0
    7b2a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7b2e:	0f 92       	push	r0
    7b30:	11 24       	eor	r1, r1
    7b32:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7b36:	0f 92       	push	r0
    7b38:	2f 93       	push	r18
    7b3a:	8f 93       	push	r24
    7b3c:	9f 93       	push	r25
    7b3e:	ef 93       	push	r30
    7b40:	ff 93       	push	r31
    7b42:	cf 93       	push	r28
    7b44:	df 93       	push	r29
    7b46:	cd b7       	in	r28, 0x3d	; 61
    7b48:	de b7       	in	r29, 0x3e	; 62
// 	if (TCA0_CMP2_isr_cb != NULL)
// 	(*TCA0_CMP2_isr_cb)();
	
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP2_bm;
    7b4a:	80 e0       	ldi	r24, 0x00	; 0
    7b4c:	9a e0       	ldi	r25, 0x0A	; 10
    7b4e:	20 e4       	ldi	r18, 0x40	; 64
    7b50:	fc 01       	movw	r30, r24
    7b52:	23 87       	std	Z+11, r18	; 0x0b
}
    7b54:	00 00       	nop
    7b56:	df 91       	pop	r29
    7b58:	cf 91       	pop	r28
    7b5a:	ff 91       	pop	r31
    7b5c:	ef 91       	pop	r30
    7b5e:	9f 91       	pop	r25
    7b60:	8f 91       	pop	r24
    7b62:	2f 91       	pop	r18
    7b64:	0f 90       	pop	r0
    7b66:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7b6a:	0f 90       	pop	r0
    7b6c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7b70:	0f 90       	pop	r0
    7b72:	1f 90       	pop	r1
    7b74:	18 95       	reti

00007b76 <__vector_7>:

ISR(TCA0_OVF_vect)
{
    7b76:	1f 92       	push	r1
    7b78:	0f 92       	push	r0
    7b7a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7b7e:	0f 92       	push	r0
    7b80:	11 24       	eor	r1, r1
    7b82:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7b86:	0f 92       	push	r0
    7b88:	2f 93       	push	r18
    7b8a:	8f 93       	push	r24
    7b8c:	9f 93       	push	r25
    7b8e:	ef 93       	push	r30
    7b90:	ff 93       	push	r31
    7b92:	cf 93       	push	r28
    7b94:	df 93       	push	r29
    7b96:	cd b7       	in	r28, 0x3d	; 61
    7b98:	de b7       	in	r29, 0x3e	; 62
// 	if (TCA0_OVF_isr_cb != NULL)
// 	(*TCA0_OVF_isr_cb)();
	
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
    7b9a:	80 e0       	ldi	r24, 0x00	; 0
    7b9c:	9a e0       	ldi	r25, 0x0A	; 10
    7b9e:	21 e0       	ldi	r18, 0x01	; 1
    7ba0:	fc 01       	movw	r30, r24
    7ba2:	23 87       	std	Z+11, r18	; 0x0b
}
    7ba4:	00 00       	nop
    7ba6:	df 91       	pop	r29
    7ba8:	cf 91       	pop	r28
    7baa:	ff 91       	pop	r31
    7bac:	ef 91       	pop	r30
    7bae:	9f 91       	pop	r25
    7bb0:	8f 91       	pop	r24
    7bb2:	2f 91       	pop	r18
    7bb4:	0f 90       	pop	r0
    7bb6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7bba:	0f 90       	pop	r0
    7bbc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7bc0:	0f 90       	pop	r0
    7bc2:	1f 90       	pop	r1
    7bc4:	18 95       	reti

00007bc6 <TIMERA_init>:



int8_t TIMERA_init()
{
    7bc6:	cf 93       	push	r28
    7bc8:	df 93       	push	r29
    7bca:	cd b7       	in	r28, 0x3d	; 61
    7bcc:	de b7       	in	r29, 0x3e	; 62
    //Count
    TCA0.SINGLE.CNT = 0x00;
    7bce:	80 e0       	ldi	r24, 0x00	; 0
    7bd0:	9a e0       	ldi	r25, 0x0A	; 10
    7bd2:	fc 01       	movw	r30, r24
    7bd4:	10 a2       	std	Z+32, r1	; 0x20
    7bd6:	11 a2       	std	Z+33, r1	; 0x21

    //CMD NONE; LUPD disabled; DIR UP;
    TCA0.SINGLE.CTRLESET = 0x00;
    7bd8:	80 e0       	ldi	r24, 0x00	; 0
    7bda:	9a e0       	ldi	r25, 0x0A	; 10
    7bdc:	fc 01       	movw	r30, r24
    7bde:	15 82       	std	Z+5, r1	; 0x05

    //CMP2BV disabled; CMP1BV disabled; CMP0BV disabled; PERBV disabled;
    TCA0.SINGLE.CTRLFCLR = 0x00;
    7be0:	80 e0       	ldi	r24, 0x00	; 0
    7be2:	9a e0       	ldi	r25, 0x0A	; 10
    7be4:	fc 01       	movw	r30, r24
    7be6:	16 82       	std	Z+6, r1	; 0x06

    //CMP2BV disabled; CMP1BV disabled; CMP0BV disabled; PERBV disabled;
    TCA0.SINGLE.CTRLFSET = 0x00;
    7be8:	80 e0       	ldi	r24, 0x00	; 0
    7bea:	9a e0       	ldi	r25, 0x0A	; 10
    7bec:	fc 01       	movw	r30, r24
    7bee:	17 82       	std	Z+7, r1	; 0x07

    //DBGRUN disabled;
    TCA0.SINGLE.DBGCTRL = 0x00;
    7bf0:	80 e0       	ldi	r24, 0x00	; 0
    7bf2:	9a e0       	ldi	r25, 0x0A	; 10
    7bf4:	fc 01       	movw	r30, r24
    7bf6:	16 86       	std	Z+14, r1	; 0x0e

    //Temporary data for 16-bit Access
    TCA0.SINGLE.TEMP = 0x00;
    7bf8:	80 e0       	ldi	r24, 0x00	; 0
    7bfa:	9a e0       	ldi	r25, 0x0A	; 10
    7bfc:	fc 01       	movw	r30, r24
    7bfe:	17 86       	std	Z+15, r1	; 0x0f
    TCA0.SINGLE.CMP0 = 0x0000; // Sets frequency on WOn
	// WGMode = FRQ; 
	TCA0.SINGLE.CTRLB = 0x11;
#else
    //Period
    TCA0.SINGLE.PER = 0x0000;
    7c00:	80 e0       	ldi	r24, 0x00	; 0
    7c02:	9a e0       	ldi	r25, 0x0A	; 10
    7c04:	fc 01       	movw	r30, r24
    7c06:	16 a2       	std	Z+38, r1	; 0x26
    7c08:	17 a2       	std	Z+39, r1	; 0x27
    //CMP2 disabled; CMP1 disabled; CMP0 enabled; OVF disabled;
    TCA0.SINGLE.INTCTRL = 0x10;
    7c0a:	80 e0       	ldi	r24, 0x00	; 0
    7c0c:	9a e0       	ldi	r25, 0x0A	; 10
    7c0e:	20 e1       	ldi	r18, 0x10	; 16
    7c10:	fc 01       	movw	r30, r24
    7c12:	22 87       	std	Z+10, r18	; 0x0a
	//CMP2EN disabled; CMP1EN disabled; CMP0EN disabled; ALUPD disabled; WGMODE NORMAL; 
	TCA0.SINGLE.CTRLB = 0x0;
    7c14:	80 e0       	ldi	r24, 0x00	; 0
    7c16:	9a e0       	ldi	r25, 0x0A	; 10
    7c18:	fc 01       	movw	r30, r24
    7c1a:	11 82       	std	Z+1, r1	; 0x01
    //Clear all interrupt flags
    TCA0.SINGLE.INTFLAGS = 0x71;
    7c1c:	80 e0       	ldi	r24, 0x00	; 0
    7c1e:	9a e0       	ldi	r25, 0x0A	; 10
    7c20:	21 e7       	ldi	r18, 0x71	; 113
    7c22:	fc 01       	movw	r30, r24
    7c24:	23 87       	std	Z+11, r18	; 0x0b
	CPUINT.LVL1VEC = 9;
    7c26:	80 e1       	ldi	r24, 0x10	; 16
    7c28:	91 e0       	ldi	r25, 0x01	; 1
    7c2a:	29 e0       	ldi	r18, 0x09	; 9
    7c2c:	fc 01       	movw	r30, r24
    7c2e:	23 83       	std	Z+3, r18	; 0x03
#endif
	
    //CMP2OV disabled; CMP1OV disabled; CMP0OV disabled;
    TCA0.SINGLE.CTRLC = 0x00;
    7c30:	80 e0       	ldi	r24, 0x00	; 0
    7c32:	9a e0       	ldi	r25, 0x0A	; 10
    7c34:	fc 01       	movw	r30, r24
    7c36:	12 82       	std	Z+2, r1	; 0x02

    //SPLITM disabled;
    TCA0.SINGLE.CTRLD = 0x00;
    7c38:	80 e0       	ldi	r24, 0x00	; 0
    7c3a:	9a e0       	ldi	r25, 0x0A	; 10
    7c3c:	fc 01       	movw	r30, r24
    7c3e:	13 82       	std	Z+3, r1	; 0x03

    //CMD NONE; LUPD disabled; DIR disabled;
    TCA0.SINGLE.CTRLECLR = 0x00;
    7c40:	80 e0       	ldi	r24, 0x00	; 0
    7c42:	9a e0       	ldi	r25, 0x0A	; 10
    7c44:	fc 01       	movw	r30, r24
    7c46:	14 82       	std	Z+4, r1	; 0x04

	//EVACTB UPDOWN; CNTBEI disabled; EVACTA CNT_POSEDGE; CNTAEI disabled;
//	TCA0.SINGLE.EVCTRL = 0x60;
	
	// PD0 is WO0 output
	PORTA_set_pin_dir(0, PORT_DIR_OUT);
    7c48:	61 e0       	ldi	r22, 0x01	; 1
    7c4a:	80 e0       	ldi	r24, 0x00	; 0
    7c4c:	0e 94 b4 3c 	call	0x7968	; 0x7968 <PORTA_set_pin_dir>

    return 0;
    7c50:	80 e0       	ldi	r24, 0x00	; 0
}
    7c52:	df 91       	pop	r29
    7c54:	cf 91       	pop	r28
    7c56:	08 95       	ret

00007c58 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    7c58:	1f 92       	push	r1
    7c5a:	0f 92       	push	r0
    7c5c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7c60:	0f 92       	push	r0
    7c62:	11 24       	eor	r1, r1
    7c64:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7c68:	0f 92       	push	r0
    7c6a:	2f 93       	push	r18
    7c6c:	8f 93       	push	r24
    7c6e:	9f 93       	push	r25
    7c70:	af 93       	push	r26
    7c72:	bf 93       	push	r27
    7c74:	ef 93       	push	r30
    7c76:	ff 93       	push	r31
    7c78:	cf 93       	push	r28
    7c7a:	df 93       	push	r29
    7c7c:	cd b7       	in	r28, 0x3d	; 61
    7c7e:	de b7       	in	r29, 0x3e	; 62
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    7c80:	80 e1       	ldi	r24, 0x10	; 16
    7c82:	9b e0       	ldi	r25, 0x0B	; 11
    7c84:	fc 01       	movw	r30, r24
    7c86:	86 81       	ldd	r24, Z+6	; 0x06
    7c88:	88 2f       	mov	r24, r24
    7c8a:	90 e0       	ldi	r25, 0x00	; 0
    7c8c:	81 70       	andi	r24, 0x01	; 1
    7c8e:	99 27       	eor	r25, r25
    7c90:	21 e0       	ldi	r18, 0x01	; 1
    7c92:	89 2b       	or	r24, r25
    7c94:	09 f4       	brne	.+2      	; 0x7c98 <__vector_13+0x40>
    7c96:	20 e0       	ldi	r18, 0x00	; 0
    7c98:	22 23       	and	r18, r18
    7c9a:	49 f1       	breq	.+82     	; 0x7cee <__vector_13+0x96>
    {
		if(g_ms_counter) /* check for 1-second interval */
    7c9c:	80 91 25 48 	lds	r24, 0x4825	; 0x804825 <_ZL12g_ms_counter>
    7ca0:	90 91 26 48 	lds	r25, 0x4826	; 0x804826 <_ZL12g_ms_counter+0x1>
    7ca4:	a0 91 27 48 	lds	r26, 0x4827	; 0x804827 <_ZL12g_ms_counter+0x2>
    7ca8:	b0 91 28 48 	lds	r27, 0x4828	; 0x804828 <_ZL12g_ms_counter+0x3>
    7cac:	89 2b       	or	r24, r25
    7cae:	8a 2b       	or	r24, r26
    7cb0:	8b 2b       	or	r24, r27
    7cb2:	a1 f0       	breq	.+40     	; 0x7cdc <__vector_13+0x84>
		{
			g_ms_counter--;	
    7cb4:	80 91 25 48 	lds	r24, 0x4825	; 0x804825 <_ZL12g_ms_counter>
    7cb8:	90 91 26 48 	lds	r25, 0x4826	; 0x804826 <_ZL12g_ms_counter+0x1>
    7cbc:	a0 91 27 48 	lds	r26, 0x4827	; 0x804827 <_ZL12g_ms_counter+0x2>
    7cc0:	b0 91 28 48 	lds	r27, 0x4828	; 0x804828 <_ZL12g_ms_counter+0x3>
    7cc4:	01 97       	sbiw	r24, 0x01	; 1
    7cc6:	a1 09       	sbc	r26, r1
    7cc8:	b1 09       	sbc	r27, r1
    7cca:	80 93 25 48 	sts	0x4825, r24	; 0x804825 <_ZL12g_ms_counter>
    7cce:	90 93 26 48 	sts	0x4826, r25	; 0x804826 <_ZL12g_ms_counter+0x1>
    7cd2:	a0 93 27 48 	sts	0x4827, r26	; 0x804827 <_ZL12g_ms_counter+0x2>
    7cd6:	b0 93 28 48 	sts	0x4828, r27	; 0x804828 <_ZL12g_ms_counter+0x3>
    7cda:	04 c0       	rjmp	.+8      	; 0x7ce4 <__vector_13+0x8c>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    7cdc:	80 e1       	ldi	r24, 0x10	; 16
    7cde:	9b e0       	ldi	r25, 0x0B	; 11
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	15 82       	std	Z+5, r1	; 0x05
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    7ce4:	80 e1       	ldi	r24, 0x10	; 16
    7ce6:	9b e0       	ldi	r25, 0x0B	; 11
    7ce8:	21 e0       	ldi	r18, 0x01	; 1
    7cea:	fc 01       	movw	r30, r24
    7cec:	26 83       	std	Z+6, r18	; 0x06
    }
}
    7cee:	00 00       	nop
    7cf0:	df 91       	pop	r29
    7cf2:	cf 91       	pop	r28
    7cf4:	ff 91       	pop	r31
    7cf6:	ef 91       	pop	r30
    7cf8:	bf 91       	pop	r27
    7cfa:	af 91       	pop	r26
    7cfc:	9f 91       	pop	r25
    7cfe:	8f 91       	pop	r24
    7d00:	2f 91       	pop	r18
    7d02:	0f 90       	pop	r0
    7d04:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    7d08:	0f 90       	pop	r0
    7d0a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    7d0e:	0f 90       	pop	r0
    7d10:	1f 90       	pop	r1
    7d12:	18 95       	reti

00007d14 <_Z14txSetFrequencyPmb>:
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
	}
    7d14:	cf 93       	push	r28
    7d16:	df 93       	push	r29
    7d18:	00 d0       	rcall	.+0      	; 0x7d1a <_Z14txSetFrequencyPmb+0x6>
    7d1a:	00 d0       	rcall	.+0      	; 0x7d1c <_Z14txSetFrequencyPmb+0x8>
    7d1c:	cd b7       	in	r28, 0x3d	; 61
    7d1e:	de b7       	in	r29, 0x3e	; 62
    7d20:	8a 83       	std	Y+2, r24	; 0x02
    7d22:	9b 83       	std	Y+3, r25	; 0x03
    7d24:	6c 83       	std	Y+4, r22	; 0x04
    7d26:	19 82       	std	Y+1, r1	; 0x01
    7d28:	8a 81       	ldd	r24, Y+2	; 0x02
    7d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    7d2c:	fc 01       	movw	r30, r24
    7d2e:	80 81       	ld	r24, Z
    7d30:	91 81       	ldd	r25, Z+1	; 0x01
    7d32:	a2 81       	ldd	r26, Z+2	; 0x02
    7d34:	b3 81       	ldd	r27, Z+3	; 0x03
    7d36:	81 15       	cp	r24, r1
    7d38:	99 40       	sbci	r25, 0x09	; 9
    7d3a:	ad 43       	sbci	r26, 0x3D	; 61
    7d3c:	b1 05       	cpc	r27, r1
    7d3e:	68 f5       	brcc	.+90     	; 0x7d9a <_Z14txSetFrequencyPmb+0x86>
    7d40:	8a 81       	ldd	r24, Y+2	; 0x02
    7d42:	9b 81       	ldd	r25, Y+3	; 0x03
    7d44:	fc 01       	movw	r30, r24
    7d46:	80 81       	ld	r24, Z
    7d48:	91 81       	ldd	r25, Z+1	; 0x01
    7d4a:	a2 81       	ldd	r26, Z+2	; 0x02
    7d4c:	b3 81       	ldd	r27, Z+3	; 0x03
    7d4e:	81 3e       	cpi	r24, 0xE1	; 225
    7d50:	97 46       	sbci	r25, 0x67	; 103
    7d52:	a5 43       	sbci	r26, 0x35	; 53
    7d54:	b1 05       	cpc	r27, r1
    7d56:	08 f1       	brcs	.+66     	; 0x7d9a <_Z14txSetFrequencyPmb+0x86>
    7d58:	8a 81       	ldd	r24, Y+2	; 0x02
    7d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    7d5c:	fc 01       	movw	r30, r24
    7d5e:	80 81       	ld	r24, Z
    7d60:	91 81       	ldd	r25, Z+1	; 0x01
    7d62:	a2 81       	ldd	r26, Z+2	; 0x02
    7d64:	b3 81       	ldd	r27, Z+3	; 0x03
    7d66:	2c 81       	ldd	r18, Y+4	; 0x04
    7d68:	41 e0       	ldi	r20, 0x01	; 1
    7d6a:	bc 01       	movw	r22, r24
    7d6c:	cd 01       	movw	r24, r26
    7d6e:	0e 94 34 33 	call	0x6668	; 0x6668 <si5351_set_freq>
    7d72:	88 23       	and	r24, r24
    7d74:	19 f0       	breq	.+6      	; 0x7d7c <_Z14txSetFrequencyPmb+0x68>
    7d76:	81 e0       	ldi	r24, 0x01	; 1
    7d78:	89 83       	std	Y+1, r24	; 0x01
    7d7a:	0f c0       	rjmp	.+30     	; 0x7d9a <_Z14txSetFrequencyPmb+0x86>
    7d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    7d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    7d80:	fc 01       	movw	r30, r24
    7d82:	80 81       	ld	r24, Z
    7d84:	91 81       	ldd	r25, Z+1	; 0x01
    7d86:	a2 81       	ldd	r26, Z+2	; 0x02
    7d88:	b3 81       	ldd	r27, Z+3	; 0x03
    7d8a:	80 93 2d 40 	sts	0x402D, r24	; 0x80402d <g_80m_frequency>
    7d8e:	90 93 2e 40 	sts	0x402E, r25	; 0x80402e <g_80m_frequency+0x1>
    7d92:	a0 93 2f 40 	sts	0x402F, r26	; 0x80402f <g_80m_frequency+0x2>
    7d96:	b0 93 30 40 	sts	0x4030, r27	; 0x804030 <g_80m_frequency+0x3>
    7d9a:	89 81       	ldd	r24, Y+1	; 0x01
    7d9c:	24 96       	adiw	r28, 0x04	; 4
    7d9e:	cd bf       	out	0x3d, r28	; 61
    7da0:	de bf       	out	0x3e, r29	; 62
    7da2:	df 91       	pop	r29
    7da4:	cf 91       	pop	r28
    7da6:	08 95       	ret

00007da8 <_Z18powerToTransmitterb>:
    7da8:	cf 93       	push	r28
    7daa:	df 93       	push	r29
    7dac:	1f 92       	push	r1
    7dae:	cd b7       	in	r28, 0x3d	; 61
    7db0:	de b7       	in	r29, 0x3e	; 62
    7db2:	89 83       	std	Y+1, r24	; 0x01
    7db4:	89 81       	ldd	r24, Y+1	; 0x01
    7db6:	0e 94 4d 1b 	call	0x369a	; 0x369a <_Z10fet_driverb>
    7dba:	80 e0       	ldi	r24, 0x00	; 0
    7dbc:	0f 90       	pop	r0
    7dbe:	df 91       	pop	r29
    7dc0:	cf 91       	pop	r28
    7dc2:	08 95       	ret

00007dc4 <_Z14keyTransmitterb>:
    7dc4:	cf 93       	push	r28
    7dc6:	df 93       	push	r29
    7dc8:	1f 92       	push	r1
    7dca:	cd b7       	in	r28, 0x3d	; 61
    7dcc:	de b7       	in	r29, 0x3e	; 62
    7dce:	89 83       	std	Y+1, r24	; 0x01
    7dd0:	80 91 29 48 	lds	r24, 0x4829	; 0x804829 <_ZL16g_tx_initialized>
    7dd4:	88 23       	and	r24, r24
    7dd6:	29 f1       	breq	.+74     	; 0x7e22 <_Z14keyTransmitterb+0x5e>
    7dd8:	89 81       	ldd	r24, Y+1	; 0x01
    7dda:	88 23       	and	r24, r24
    7ddc:	a9 f0       	breq	.+42     	; 0x7e08 <_Z14keyTransmitterb+0x44>
    7dde:	90 91 2a 48 	lds	r25, 0x482A	; 0x80482a <_ZL19g_transmitter_keyed>
    7de2:	81 e0       	ldi	r24, 0x01	; 1
    7de4:	89 27       	eor	r24, r25
    7de6:	88 23       	and	r24, r24
    7de8:	e1 f0       	breq	.+56     	; 0x7e22 <_Z14keyTransmitterb+0x5e>
    7dea:	61 e0       	ldi	r22, 0x01	; 1
    7dec:	81 e0       	ldi	r24, 0x01	; 1
    7dee:	0e 94 d5 34 	call	0x69aa	; 0x69aa <si5351_clock_enable>
    7df2:	98 2f       	mov	r25, r24
    7df4:	81 e0       	ldi	r24, 0x01	; 1
    7df6:	99 23       	and	r25, r25
    7df8:	09 f0       	breq	.+2      	; 0x7dfc <_Z14keyTransmitterb+0x38>
    7dfa:	80 e0       	ldi	r24, 0x00	; 0
    7dfc:	88 23       	and	r24, r24
    7dfe:	89 f0       	breq	.+34     	; 0x7e22 <_Z14keyTransmitterb+0x5e>
    7e00:	81 e0       	ldi	r24, 0x01	; 1
    7e02:	80 93 2a 48 	sts	0x482A, r24	; 0x80482a <_ZL19g_transmitter_keyed>
    7e06:	0d c0       	rjmp	.+26     	; 0x7e22 <_Z14keyTransmitterb+0x5e>
    7e08:	60 e0       	ldi	r22, 0x00	; 0
    7e0a:	81 e0       	ldi	r24, 0x01	; 1
    7e0c:	0e 94 d5 34 	call	0x69aa	; 0x69aa <si5351_clock_enable>
    7e10:	98 2f       	mov	r25, r24
    7e12:	81 e0       	ldi	r24, 0x01	; 1
    7e14:	99 23       	and	r25, r25
    7e16:	09 f0       	breq	.+2      	; 0x7e1a <_Z14keyTransmitterb+0x56>
    7e18:	80 e0       	ldi	r24, 0x00	; 0
    7e1a:	88 23       	and	r24, r24
    7e1c:	11 f0       	breq	.+4      	; 0x7e22 <_Z14keyTransmitterb+0x5e>
    7e1e:	10 92 2a 48 	sts	0x482A, r1	; 0x80482a <_ZL19g_transmitter_keyed>
    7e22:	00 00       	nop
    7e24:	0f 90       	pop	r0
    7e26:	df 91       	pop	r29
    7e28:	cf 91       	pop	r28
    7e2a:	08 95       	ret

00007e2c <_Z15txSetParametersPjPb>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, bool* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, bool* enableDriverPwr) */
	{
    7e2c:	cf 93       	push	r28
    7e2e:	df 93       	push	r29
    7e30:	cd b7       	in	r28, 0x3d	; 61
    7e32:	de b7       	in	r29, 0x3e	; 62
    7e34:	2b 97       	sbiw	r28, 0x0b	; 11
    7e36:	cd bf       	out	0x3d, r28	; 61
    7e38:	de bf       	out	0x3e, r29	; 62
    7e3a:	88 87       	std	Y+8, r24	; 0x08
    7e3c:	99 87       	std	Y+9, r25	; 0x09
    7e3e:	6a 87       	std	Y+10, r22	; 0x0a
    7e40:	7b 87       	std	Y+11, r23	; 0x0b
		bool err = false;
    7e42:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    7e44:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    7e46:	1b 82       	std	Y+3, r1	; 0x03
    7e48:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW != NULL)
    7e4a:	88 85       	ldd	r24, Y+8	; 0x08
    7e4c:	99 85       	ldd	r25, Y+9	; 0x09
    7e4e:	89 2b       	or	r24, r25
    7e50:	09 f4       	brne	.+2      	; 0x7e54 <_Z15txSetParametersPjPb+0x28>
    7e52:	64 c0       	rjmp	.+200    	; 0x7f1c <_Z15txSetParametersPjPb+0xf0>
		{
			power = *power_mW;
    7e54:	88 85       	ldd	r24, Y+8	; 0x08
    7e56:	99 85       	ldd	r25, Y+9	; 0x09
    7e58:	fc 01       	movw	r30, r24
    7e5a:	80 81       	ld	r24, Z
    7e5c:	91 81       	ldd	r25, Z+1	; 0x01
    7e5e:	8b 83       	std	Y+3, r24	; 0x03
    7e60:	9c 83       	std	Y+4, r25	; 0x04

			if(power <= MAX_TX_POWER_80M_MW)
    7e62:	8b 81       	ldd	r24, Y+3	; 0x03
    7e64:	9c 81       	ldd	r25, Y+4	; 0x04
    7e66:	89 38       	cpi	r24, 0x89	; 137
    7e68:	93 41       	sbci	r25, 0x13	; 19
    7e6a:	08 f0       	brcs	.+2      	; 0x7e6e <_Z15txSetParametersPjPb+0x42>
    7e6c:	53 c0       	rjmp	.+166    	; 0x7f14 <_Z15txSetParametersPjPb+0xe8>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    7e6e:	9e 01       	movw	r18, r28
    7e70:	29 5f       	subi	r18, 0xF9	; 249
    7e72:	3f 4f       	sbci	r19, 0xFF	; 255
    7e74:	ae 01       	movw	r20, r28
    7e76:	4a 5f       	subi	r20, 0xFA	; 250
    7e78:	5f 4f       	sbci	r21, 0xFF	; 255
    7e7a:	be 01       	movw	r22, r28
    7e7c:	6b 5f       	subi	r22, 0xFB	; 251
    7e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7e80:	ce 01       	movw	r24, r28
    7e82:	03 96       	adiw	r24, 0x03	; 3
    7e84:	0e 94 0c 40 	call	0x8018	; 0x8018 <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    7e88:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    7e8a:	81 e0       	ldi	r24, 0x01	; 1
    7e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e8e:	9f 3c       	cpi	r25, 0xCF	; 207
    7e90:	09 f0       	breq	.+2      	; 0x7e94 <_Z15txSetParametersPjPb+0x68>
    7e92:	80 e0       	ldi	r24, 0x00	; 0
    7e94:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    7e96:	8b 81       	ldd	r24, Y+3	; 0x03
    7e98:	9c 81       	ldd	r25, Y+4	; 0x04
    7e9a:	21 e0       	ldi	r18, 0x01	; 1
    7e9c:	89 2b       	or	r24, r25
    7e9e:	09 f0       	breq	.+2      	; 0x7ea2 <_Z15txSetParametersPjPb+0x76>
    7ea0:	20 e0       	ldi	r18, 0x00	; 0
    7ea2:	20 93 37 40 	sts	0x4037, r18	; 0x804037 <g_tx_power_is_zero>

				if(!err)
    7ea6:	99 81       	ldd	r25, Y+1	; 0x01
    7ea8:	81 e0       	ldi	r24, 0x01	; 1
    7eaa:	89 27       	eor	r24, r25
    7eac:	88 23       	and	r24, r24
    7eae:	51 f1       	breq	.+84     	; 0x7f04 <_Z15txSetParametersPjPb+0xd8>
				{
					g_80m_power_level_mW = power;
    7eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    7eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    7eb4:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW>
    7eb8:	90 93 32 40 	sts	0x4032, r25	; 0x804032 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    7ebc:	0e 94 9f 41 	call	0x833e	; 0x833e <_Z18txIsAntennaForBandv>
    7ec0:	88 23       	and	r24, r24
    7ec2:	31 f0       	breq	.+12     	; 0x7ed0 <_Z15txSetParametersPjPb+0xa4>
					{
						DAC0_setVal(drainVoltageDAC);
    7ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    7ec6:	88 2f       	mov	r24, r24
    7ec8:	90 e0       	ldi	r25, 0x00	; 0
    7eca:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <_Z11DAC0_setValj>
    7ece:	07 c0       	rjmp	.+14     	; 0x7ede <_Z15txSetParametersPjPb+0xb2>
					}
					else
					{
						g_tx_power_is_zero = true;
    7ed0:	81 e0       	ldi	r24, 0x01	; 1
    7ed2:	80 93 37 40 	sts	0x4037, r24	; 0x804037 <g_tx_power_is_zero>
						err = true;
    7ed6:	81 e0       	ldi	r24, 0x01	; 1
    7ed8:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    7eda:	86 ef       	ldi	r24, 0xF6	; 246
    7edc:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || (drainVoltageDAC == 0))
    7ede:	80 91 37 40 	lds	r24, 0x4037	; 0x804037 <g_tx_power_is_zero>
    7ee2:	88 23       	and	r24, r24
    7ee4:	19 f4       	brne	.+6      	; 0x7eec <_Z15txSetParametersPjPb+0xc0>
    7ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    7ee8:	88 23       	and	r24, r24
    7eea:	11 f4       	brne	.+4      	; 0x7ef0 <_Z15txSetParametersPjPb+0xc4>
    7eec:	81 e0       	ldi	r24, 0x01	; 1
    7eee:	01 c0       	rjmp	.+2      	; 0x7ef2 <_Z15txSetParametersPjPb+0xc6>
    7ef0:	80 e0       	ldi	r24, 0x00	; 0
    7ef2:	88 23       	and	r24, r24
    7ef4:	21 f0       	breq	.+8      	; 0x7efe <_Z15txSetParametersPjPb+0xd2>
					{
						powerToTransmitter(OFF); /* Turn off FET driver */
    7ef6:	80 e0       	ldi	r24, 0x00	; 0
    7ef8:	0e 94 d4 3e 	call	0x7da8	; 0x7da8 <_Z18powerToTransmitterb>
    7efc:	03 c0       	rjmp	.+6      	; 0x7f04 <_Z15txSetParametersPjPb+0xd8>
					}
					else
					{
						powerToTransmitter(ON); /* Turn on FET driver */
    7efe:	81 e0       	ldi	r24, 0x01	; 1
    7f00:	0e 94 d4 3e 	call	0x7da8	; 0x7da8 <_Z18powerToTransmitterb>
					}
				}

				*power_mW = power;
    7f04:	2b 81       	ldd	r18, Y+3	; 0x03
    7f06:	3c 81       	ldd	r19, Y+4	; 0x04
    7f08:	88 85       	ldd	r24, Y+8	; 0x08
    7f0a:	99 85       	ldd	r25, Y+9	; 0x09
    7f0c:	fc 01       	movw	r30, r24
    7f0e:	20 83       	st	Z, r18
    7f10:	31 83       	std	Z+1, r19	; 0x01
    7f12:	04 c0       	rjmp	.+8      	; 0x7f1c <_Z15txSetParametersPjPb+0xf0>
			}
			else
			{
				err = true;
    7f14:	81 e0       	ldi	r24, 0x01	; 1
    7f16:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    7f18:	85 ef       	ldi	r24, 0xF5	; 245
    7f1a:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    7f1c:	99 81       	ldd	r25, Y+1	; 0x01
    7f1e:	81 e0       	ldi	r24, 0x01	; 1
    7f20:	89 27       	eor	r24, r25
    7f22:	88 23       	and	r24, r24
    7f24:	51 f0       	breq	.+20     	; 0x7f3a <_Z15txSetParametersPjPb+0x10e>
		{
			if(enableDriverPwr != NULL)
    7f26:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f28:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f2a:	89 2b       	or	r24, r25
    7f2c:	31 f0       	breq	.+12     	; 0x7f3a <_Z15txSetParametersPjPb+0x10e>
			{
				powerToTransmitter(*enableDriverPwr);
    7f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f30:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f32:	fc 01       	movw	r30, r24
    7f34:	80 81       	ld	r24, Z
    7f36:	0e 94 d4 3e 	call	0x7da8	; 0x7da8 <_Z18powerToTransmitterb>
			}
		}

		return(code);
    7f3a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    7f3c:	2b 96       	adiw	r28, 0x0b	; 11
    7f3e:	cd bf       	out	0x3d, r28	; 61
    7f40:	de bf       	out	0x3e, r29	; 62
    7f42:	df 91       	pop	r29
    7f44:	cf 91       	pop	r28
    7f46:	08 95       	ret

00007f48 <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    7f48:	cf 93       	push	r28
    7f4a:	df 93       	push	r29
    7f4c:	00 d0       	rcall	.+0      	; 0x7f4e <_Z16init_transmitterv+0x6>
    7f4e:	00 d0       	rcall	.+0      	; 0x7f50 <_Z16init_transmitterv+0x8>
    7f50:	cd b7       	in	r28, 0x3d	; 61
    7f52:	de b7       	in	r29, 0x3e	; 62
		EC code;
		bool err;
		
		DAC0_init();
    7f54:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_Z9DAC0_initv>

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    7f58:	40 e0       	ldi	r20, 0x00	; 0
    7f5a:	50 e0       	ldi	r21, 0x00	; 0
    7f5c:	ba 01       	movw	r22, r20
    7f5e:	80 e4       	ldi	r24, 0x40	; 64
    7f60:	0e 94 66 32 	call	0x64cc	; 0x64cc <si5351_init>
    7f64:	8a 83       	std	Y+2, r24	; 0x02
    7f66:	8a 81       	ldd	r24, Y+2	; 0x02
    7f68:	88 23       	and	r24, r24
    7f6a:	11 f0       	breq	.+4      	; 0x7f70 <_Z16init_transmitterv+0x28>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
    7f6c:	82 ed       	ldi	r24, 0xD2	; 210
    7f6e:	4e c0       	rjmp	.+156    	; 0x800c <__RODATA_PM_OFFSET__+0xc>
		}

		if((code = txSetParameters(NULL, NULL)))
    7f70:	60 e0       	ldi	r22, 0x00	; 0
    7f72:	70 e0       	ldi	r23, 0x00	; 0
    7f74:	80 e0       	ldi	r24, 0x00	; 0
    7f76:	90 e0       	ldi	r25, 0x00	; 0
    7f78:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <_Z15txSetParametersPjPb>
    7f7c:	89 83       	std	Y+1, r24	; 0x01
    7f7e:	81 e0       	ldi	r24, 0x01	; 1
    7f80:	99 81       	ldd	r25, Y+1	; 0x01
    7f82:	99 23       	and	r25, r25
    7f84:	09 f4       	brne	.+2      	; 0x7f88 <_Z16init_transmitterv+0x40>
    7f86:	80 e0       	ldi	r24, 0x00	; 0
    7f88:	88 23       	and	r24, r24
    7f8a:	11 f0       	breq	.+4      	; 0x7f90 <_Z16init_transmitterv+0x48>
		{
			return( code);
    7f8c:	89 81       	ldd	r24, Y+1	; 0x01
    7f8e:	3e c0       	rjmp	.+124    	; 0x800c <__RODATA_PM_OFFSET__+0xc>
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    7f90:	63 e0       	ldi	r22, 0x03	; 3
    7f92:	81 e0       	ldi	r24, 0x01	; 1
    7f94:	0e 94 20 35 	call	0x6a40	; 0x6a40 <si5351_drive_strength>
    7f98:	89 83       	std	Y+1, r24	; 0x01
    7f9a:	81 e0       	ldi	r24, 0x01	; 1
    7f9c:	99 81       	ldd	r25, Y+1	; 0x01
    7f9e:	99 23       	and	r25, r25
    7fa0:	09 f4       	brne	.+2      	; 0x7fa4 <_Z16init_transmitterv+0x5c>
    7fa2:	80 e0       	ldi	r24, 0x00	; 0
    7fa4:	88 23       	and	r24, r24
    7fa6:	11 f0       	breq	.+4      	; 0x7fac <_Z16init_transmitterv+0x64>
		{
			return( code);
    7fa8:	89 81       	ldd	r24, Y+1	; 0x01
    7faa:	30 c0       	rjmp	.+96     	; 0x800c <__RODATA_PM_OFFSET__+0xc>
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    7fac:	60 e0       	ldi	r22, 0x00	; 0
    7fae:	81 e0       	ldi	r24, 0x01	; 1
    7fb0:	0e 94 d5 34 	call	0x69aa	; 0x69aa <si5351_clock_enable>
    7fb4:	89 83       	std	Y+1, r24	; 0x01
    7fb6:	81 e0       	ldi	r24, 0x01	; 1
    7fb8:	99 81       	ldd	r25, Y+1	; 0x01
    7fba:	99 23       	and	r25, r25
    7fbc:	09 f4       	brne	.+2      	; 0x7fc0 <_Z16init_transmitterv+0x78>
    7fbe:	80 e0       	ldi	r24, 0x00	; 0
    7fc0:	88 23       	and	r24, r24
    7fc2:	11 f0       	breq	.+4      	; 0x7fc8 <_Z16init_transmitterv+0x80>
		{
			return( code);
    7fc4:	89 81       	ldd	r24, Y+1	; 0x01
    7fc6:	22 c0       	rjmp	.+68     	; 0x800c <__RODATA_PM_OFFSET__+0xc>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    7fc8:	80 91 31 40 	lds	r24, 0x4031	; 0x804031 <g_80m_power_level_mW>
    7fcc:	90 91 32 40 	lds	r25, 0x4032	; 0x804032 <g_80m_power_level_mW+0x1>
    7fd0:	8b 83       	std	Y+3, r24	; 0x03
    7fd2:	9c 83       	std	Y+4, r25	; 0x04
		
		err = txSetFrequency((Frequency_Hz*)&g_80m_frequency, true);
    7fd4:	61 e0       	ldi	r22, 0x01	; 1
    7fd6:	8d e2       	ldi	r24, 0x2D	; 45
    7fd8:	90 e4       	ldi	r25, 0x40	; 64
    7fda:	0e 94 8a 3e 	call	0x7d14	; 0x7d14 <_Z14txSetFrequencyPmb>
    7fde:	8a 83       	std	Y+2, r24	; 0x02
		if(!err)
    7fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    7fe2:	81 e0       	ldi	r24, 0x01	; 1
    7fe4:	89 27       	eor	r24, r25
    7fe6:	88 23       	and	r24, r24
    7fe8:	81 f0       	breq	.+32     	; 0x800a <__RODATA_PM_OFFSET__+0xa>
		{
			code = txSetParameters(&pwr_mW, NULL);
    7fea:	ce 01       	movw	r24, r28
    7fec:	03 96       	adiw	r24, 0x03	; 3
    7fee:	60 e0       	ldi	r22, 0x00	; 0
    7ff0:	70 e0       	ldi	r23, 0x00	; 0
    7ff2:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <_Z15txSetParametersPjPb>
    7ff6:	89 83       	std	Y+1, r24	; 0x01
			if((code == ERROR_CODE_NO_ERROR) || (code == ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING))
    7ff8:	89 81       	ldd	r24, Y+1	; 0x01
    7ffa:	88 23       	and	r24, r24
    7ffc:	19 f0       	breq	.+6      	; 0x8004 <__RODATA_PM_OFFSET__+0x4>
    7ffe:	89 81       	ldd	r24, Y+1	; 0x01
    8000:	86 3f       	cpi	r24, 0xF6	; 246
    8002:	19 f4       	brne	.+6      	; 0x800a <__RODATA_PM_OFFSET__+0xa>
			{
				g_tx_initialized = true;
    8004:	81 e0       	ldi	r24, 0x01	; 1
    8006:	80 93 29 48 	sts	0x4829, r24	; 0x804829 <_ZL16g_tx_initialized>
			}
		}

		return( code);
    800a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    800c:	24 96       	adiw	r28, 0x04	; 4
    800e:	cd bf       	out	0x3d, r28	; 61
    8010:	de bf       	out	0x3e, r29	; 62
    8012:	df 91       	pop	r29
    8014:	cf 91       	pop	r28
    8016:	08 95       	ret

00008018 <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    8018:	cf 93       	push	r28
    801a:	df 93       	push	r29
    801c:	cd b7       	in	r28, 0x3d	; 61
    801e:	de b7       	in	r29, 0x3e	; 62
    8020:	65 97       	sbiw	r28, 0x15	; 21
    8022:	cd bf       	out	0x3d, r28	; 61
    8024:	de bf       	out	0x3e, r29	; 62
    8026:	8e 87       	std	Y+14, r24	; 0x0e
    8028:	9f 87       	std	Y+15, r25	; 0x0f
    802a:	68 8b       	std	Y+16, r22	; 0x10
    802c:	79 8b       	std	Y+17, r23	; 0x11
    802e:	4a 8b       	std	Y+18, r20	; 0x12
    8030:	5b 8b       	std	Y+19, r21	; 0x13
    8032:	2c 8b       	std	Y+20, r18	; 0x14
    8034:	3d 8b       	std	Y+21, r19	; 0x15
	EC ec = ERROR_CODE_NO_ERROR;
    8036:	19 82       	std	Y+1, r1	; 0x01
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    8038:	8e 85       	ldd	r24, Y+14	; 0x0e
    803a:	9f 85       	ldd	r25, Y+15	; 0x0f
    803c:	89 2b       	or	r24, r25
    803e:	11 f4       	brne	.+4      	; 0x8044 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c>
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    8040:	8f ec       	ldi	r24, 0xCF	; 207
    8042:	77 c1       	rjmp	.+750    	; 0x8332 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x31a>
	}

	maxPwr = MAX_TX_POWER_80M_MW;
    8044:	88 e8       	ldi	r24, 0x88	; 136
    8046:	93 e1       	ldi	r25, 0x13	; 19
    8048:	8b 83       	std	Y+3, r24	; 0x03
    804a:	9c 83       	std	Y+4, r25	; 0x04

	if((int16_t)*powerMW > maxPwr)
    804c:	8e 85       	ldd	r24, Y+14	; 0x0e
    804e:	9f 85       	ldd	r25, Y+15	; 0x0f
    8050:	fc 01       	movw	r30, r24
    8052:	80 81       	ld	r24, Z
    8054:	91 81       	ldd	r25, Z+1	; 0x01
    8056:	9c 01       	movw	r18, r24
    8058:	8b 81       	ldd	r24, Y+3	; 0x03
    805a:	9c 81       	ldd	r25, Y+4	; 0x04
    805c:	82 17       	cp	r24, r18
    805e:	93 07       	cpc	r25, r19
    8060:	14 f4       	brge	.+4      	; 0x8066 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4e>
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8062:	85 ef       	ldi	r24, 0xF5	; 245
    8064:	89 83       	std	Y+1, r24	; 0x01
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    8066:	8e 85       	ldd	r24, Y+14	; 0x0e
    8068:	9f 85       	ldd	r25, Y+15	; 0x0f
    806a:	fc 01       	movw	r30, r24
    806c:	80 81       	ld	r24, Z
    806e:	91 81       	ldd	r25, Z+1	; 0x01
    8070:	8d 83       	std	Y+5, r24	; 0x05
    8072:	9e 83       	std	Y+6, r25	; 0x06
    8074:	1f 82       	std	Y+7, r1	; 0x07
    8076:	18 86       	std	Y+8, r1	; 0x08
    8078:	8b 81       	ldd	r24, Y+3	; 0x03
    807a:	9c 81       	ldd	r25, Y+4	; 0x04
    807c:	89 87       	std	Y+9, r24	; 0x09
    807e:	9a 87       	std	Y+10, r25	; 0x0a
    8080:	2d 81       	ldd	r18, Y+5	; 0x05
    8082:	3e 81       	ldd	r19, Y+6	; 0x06
    8084:	89 85       	ldd	r24, Y+9	; 0x09
    8086:	9a 85       	ldd	r25, Y+10	; 0x0a
    8088:	82 17       	cp	r24, r18
    808a:	93 07       	cpc	r25, r19
    808c:	6c f0       	brlt	.+26     	; 0x80a8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x90>
    808e:	2d 81       	ldd	r18, Y+5	; 0x05
    8090:	3e 81       	ldd	r19, Y+6	; 0x06
    8092:	8f 81       	ldd	r24, Y+7	; 0x07
    8094:	98 85       	ldd	r25, Y+8	; 0x08
    8096:	28 17       	cp	r18, r24
    8098:	39 07       	cpc	r19, r25
    809a:	1c f4       	brge	.+6      	; 0x80a2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x8a>
    809c:	8f 81       	ldd	r24, Y+7	; 0x07
    809e:	98 85       	ldd	r25, Y+8	; 0x08
    80a0:	05 c0       	rjmp	.+10     	; 0x80ac <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x94>
    80a2:	8d 81       	ldd	r24, Y+5	; 0x05
    80a4:	9e 81       	ldd	r25, Y+6	; 0x06
    80a6:	02 c0       	rjmp	.+4      	; 0x80ac <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x94>
    80a8:	89 85       	ldd	r24, Y+9	; 0x09
    80aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    80ac:	9c 01       	movw	r18, r24
    80ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    80b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    80b2:	fc 01       	movw	r30, r24
    80b4:	20 83       	st	Z, r18
    80b6:	31 83       	std	Z+1, r19	; 0x01

	if(*powerMW < 5)
    80b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    80ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    80bc:	fc 01       	movw	r30, r24
    80be:	80 81       	ld	r24, Z
    80c0:	91 81       	ldd	r25, Z+1	; 0x01
    80c2:	05 97       	sbiw	r24, 0x05	; 5
    80c4:	38 f4       	brcc	.+14     	; 0x80d4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbc>
	{
		index = 0;
    80c6:	1a 82       	std	Y+2, r1	; 0x02
		*powerMW = 0;
    80c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    80ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    80cc:	fc 01       	movw	r30, r24
    80ce:	10 82       	st	Z, r1
    80d0:	11 82       	std	Z+1, r1	; 0x01
    80d2:	04 c1       	rjmp	.+520    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 50)
    80d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    80d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    80d8:	fc 01       	movw	r30, r24
    80da:	80 81       	ld	r24, Z
    80dc:	91 81       	ldd	r25, Z+1	; 0x01
    80de:	c2 97       	sbiw	r24, 0x32	; 50
    80e0:	50 f4       	brcc	.+20     	; 0x80f6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xde>
	{
		index = 1;
    80e2:	81 e0       	ldi	r24, 0x01	; 1
    80e4:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 10;
    80e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    80e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    80ea:	2a e0       	ldi	r18, 0x0A	; 10
    80ec:	30 e0       	ldi	r19, 0x00	; 0
    80ee:	fc 01       	movw	r30, r24
    80f0:	20 83       	st	Z, r18
    80f2:	31 83       	std	Z+1, r19	; 0x01
    80f4:	f3 c0       	rjmp	.+486    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 150)
    80f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    80f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    80fa:	fc 01       	movw	r30, r24
    80fc:	80 81       	ld	r24, Z
    80fe:	91 81       	ldd	r25, Z+1	; 0x01
    8100:	86 39       	cpi	r24, 0x96	; 150
    8102:	91 05       	cpc	r25, r1
    8104:	50 f4       	brcc	.+20     	; 0x811a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x102>
	{
		index = 2;
    8106:	82 e0       	ldi	r24, 0x02	; 2
    8108:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 100;
    810a:	8e 85       	ldd	r24, Y+14	; 0x0e
    810c:	9f 85       	ldd	r25, Y+15	; 0x0f
    810e:	24 e6       	ldi	r18, 0x64	; 100
    8110:	30 e0       	ldi	r19, 0x00	; 0
    8112:	fc 01       	movw	r30, r24
    8114:	20 83       	st	Z, r18
    8116:	31 83       	std	Z+1, r19	; 0x01
    8118:	e1 c0       	rjmp	.+450    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 250)
    811a:	8e 85       	ldd	r24, Y+14	; 0x0e
    811c:	9f 85       	ldd	r25, Y+15	; 0x0f
    811e:	fc 01       	movw	r30, r24
    8120:	80 81       	ld	r24, Z
    8122:	91 81       	ldd	r25, Z+1	; 0x01
    8124:	8a 3f       	cpi	r24, 0xFA	; 250
    8126:	91 05       	cpc	r25, r1
    8128:	50 f4       	brcc	.+20     	; 0x813e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x126>
	{
		index = 3;
    812a:	83 e0       	ldi	r24, 0x03	; 3
    812c:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 200;
    812e:	8e 85       	ldd	r24, Y+14	; 0x0e
    8130:	9f 85       	ldd	r25, Y+15	; 0x0f
    8132:	28 ec       	ldi	r18, 0xC8	; 200
    8134:	30 e0       	ldi	r19, 0x00	; 0
    8136:	fc 01       	movw	r30, r24
    8138:	20 83       	st	Z, r18
    813a:	31 83       	std	Z+1, r19	; 0x01
    813c:	cf c0       	rjmp	.+414    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 350)
    813e:	8e 85       	ldd	r24, Y+14	; 0x0e
    8140:	9f 85       	ldd	r25, Y+15	; 0x0f
    8142:	fc 01       	movw	r30, r24
    8144:	80 81       	ld	r24, Z
    8146:	91 81       	ldd	r25, Z+1	; 0x01
    8148:	8e 35       	cpi	r24, 0x5E	; 94
    814a:	91 40       	sbci	r25, 0x01	; 1
    814c:	50 f4       	brcc	.+20     	; 0x8162 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 4;
    814e:	84 e0       	ldi	r24, 0x04	; 4
    8150:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 300;
    8152:	8e 85       	ldd	r24, Y+14	; 0x0e
    8154:	9f 85       	ldd	r25, Y+15	; 0x0f
    8156:	2c e2       	ldi	r18, 0x2C	; 44
    8158:	31 e0       	ldi	r19, 0x01	; 1
    815a:	fc 01       	movw	r30, r24
    815c:	20 83       	st	Z, r18
    815e:	31 83       	std	Z+1, r19	; 0x01
    8160:	bd c0       	rjmp	.+378    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 450)
    8162:	8e 85       	ldd	r24, Y+14	; 0x0e
    8164:	9f 85       	ldd	r25, Y+15	; 0x0f
    8166:	fc 01       	movw	r30, r24
    8168:	80 81       	ld	r24, Z
    816a:	91 81       	ldd	r25, Z+1	; 0x01
    816c:	82 3c       	cpi	r24, 0xC2	; 194
    816e:	91 40       	sbci	r25, 0x01	; 1
    8170:	50 f4       	brcc	.+20     	; 0x8186 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x16e>
	{
		index = 5;
    8172:	85 e0       	ldi	r24, 0x05	; 5
    8174:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 400;
    8176:	8e 85       	ldd	r24, Y+14	; 0x0e
    8178:	9f 85       	ldd	r25, Y+15	; 0x0f
    817a:	20 e9       	ldi	r18, 0x90	; 144
    817c:	31 e0       	ldi	r19, 0x01	; 1
    817e:	fc 01       	movw	r30, r24
    8180:	20 83       	st	Z, r18
    8182:	31 83       	std	Z+1, r19	; 0x01
    8184:	ab c0       	rjmp	.+342    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 550)
    8186:	8e 85       	ldd	r24, Y+14	; 0x0e
    8188:	9f 85       	ldd	r25, Y+15	; 0x0f
    818a:	fc 01       	movw	r30, r24
    818c:	80 81       	ld	r24, Z
    818e:	91 81       	ldd	r25, Z+1	; 0x01
    8190:	86 32       	cpi	r24, 0x26	; 38
    8192:	92 40       	sbci	r25, 0x02	; 2
    8194:	50 f4       	brcc	.+20     	; 0x81aa <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x192>
	{
		index = 6;
    8196:	86 e0       	ldi	r24, 0x06	; 6
    8198:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 500;
    819a:	8e 85       	ldd	r24, Y+14	; 0x0e
    819c:	9f 85       	ldd	r25, Y+15	; 0x0f
    819e:	24 ef       	ldi	r18, 0xF4	; 244
    81a0:	31 e0       	ldi	r19, 0x01	; 1
    81a2:	fc 01       	movw	r30, r24
    81a4:	20 83       	st	Z, r18
    81a6:	31 83       	std	Z+1, r19	; 0x01
    81a8:	99 c0       	rjmp	.+306    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 650)
    81aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    81ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    81ae:	fc 01       	movw	r30, r24
    81b0:	80 81       	ld	r24, Z
    81b2:	91 81       	ldd	r25, Z+1	; 0x01
    81b4:	8a 38       	cpi	r24, 0x8A	; 138
    81b6:	92 40       	sbci	r25, 0x02	; 2
    81b8:	50 f4       	brcc	.+20     	; 0x81ce <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1b6>
	{
		index = 7;
    81ba:	87 e0       	ldi	r24, 0x07	; 7
    81bc:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 600;
    81be:	8e 85       	ldd	r24, Y+14	; 0x0e
    81c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    81c2:	28 e5       	ldi	r18, 0x58	; 88
    81c4:	32 e0       	ldi	r19, 0x02	; 2
    81c6:	fc 01       	movw	r30, r24
    81c8:	20 83       	st	Z, r18
    81ca:	31 83       	std	Z+1, r19	; 0x01
    81cc:	87 c0       	rjmp	.+270    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 900)
    81ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    81d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    81d2:	fc 01       	movw	r30, r24
    81d4:	80 81       	ld	r24, Z
    81d6:	91 81       	ldd	r25, Z+1	; 0x01
    81d8:	84 38       	cpi	r24, 0x84	; 132
    81da:	93 40       	sbci	r25, 0x03	; 3
    81dc:	50 f4       	brcc	.+20     	; 0x81f2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1da>
	{
		index = 8;
    81de:	88 e0       	ldi	r24, 0x08	; 8
    81e0:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 800;
    81e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    81e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    81e6:	20 e2       	ldi	r18, 0x20	; 32
    81e8:	33 e0       	ldi	r19, 0x03	; 3
    81ea:	fc 01       	movw	r30, r24
    81ec:	20 83       	st	Z, r18
    81ee:	31 83       	std	Z+1, r19	; 0x01
    81f0:	75 c0       	rjmp	.+234    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 1250)
    81f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    81f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    81f6:	fc 01       	movw	r30, r24
    81f8:	80 81       	ld	r24, Z
    81fa:	91 81       	ldd	r25, Z+1	; 0x01
    81fc:	82 3e       	cpi	r24, 0xE2	; 226
    81fe:	94 40       	sbci	r25, 0x04	; 4
    8200:	50 f4       	brcc	.+20     	; 0x8216 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1fe>
	{
		index = 9;
    8202:	89 e0       	ldi	r24, 0x09	; 9
    8204:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 1000;
    8206:	8e 85       	ldd	r24, Y+14	; 0x0e
    8208:	9f 85       	ldd	r25, Y+15	; 0x0f
    820a:	28 ee       	ldi	r18, 0xE8	; 232
    820c:	33 e0       	ldi	r19, 0x03	; 3
    820e:	fc 01       	movw	r30, r24
    8210:	20 83       	st	Z, r18
    8212:	31 83       	std	Z+1, r19	; 0x01
    8214:	63 c0       	rjmp	.+198    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 1750)
    8216:	8e 85       	ldd	r24, Y+14	; 0x0e
    8218:	9f 85       	ldd	r25, Y+15	; 0x0f
    821a:	fc 01       	movw	r30, r24
    821c:	80 81       	ld	r24, Z
    821e:	91 81       	ldd	r25, Z+1	; 0x01
    8220:	86 3d       	cpi	r24, 0xD6	; 214
    8222:	96 40       	sbci	r25, 0x06	; 6
    8224:	50 f4       	brcc	.+20     	; 0x823a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x222>
	{
		index = 10;
    8226:	8a e0       	ldi	r24, 0x0A	; 10
    8228:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 1500;
    822a:	8e 85       	ldd	r24, Y+14	; 0x0e
    822c:	9f 85       	ldd	r25, Y+15	; 0x0f
    822e:	2c ed       	ldi	r18, 0xDC	; 220
    8230:	35 e0       	ldi	r19, 0x05	; 5
    8232:	fc 01       	movw	r30, r24
    8234:	20 83       	st	Z, r18
    8236:	31 83       	std	Z+1, r19	; 0x01
    8238:	51 c0       	rjmp	.+162    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 2250)
    823a:	8e 85       	ldd	r24, Y+14	; 0x0e
    823c:	9f 85       	ldd	r25, Y+15	; 0x0f
    823e:	fc 01       	movw	r30, r24
    8240:	80 81       	ld	r24, Z
    8242:	91 81       	ldd	r25, Z+1	; 0x01
    8244:	8a 3c       	cpi	r24, 0xCA	; 202
    8246:	98 40       	sbci	r25, 0x08	; 8
    8248:	50 f4       	brcc	.+20     	; 0x825e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x246>
	{
		index = 11;
    824a:	8b e0       	ldi	r24, 0x0B	; 11
    824c:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 2000;
    824e:	8e 85       	ldd	r24, Y+14	; 0x0e
    8250:	9f 85       	ldd	r25, Y+15	; 0x0f
    8252:	20 ed       	ldi	r18, 0xD0	; 208
    8254:	37 e0       	ldi	r19, 0x07	; 7
    8256:	fc 01       	movw	r30, r24
    8258:	20 83       	st	Z, r18
    825a:	31 83       	std	Z+1, r19	; 0x01
    825c:	3f c0       	rjmp	.+126    	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 2750)
    825e:	8e 85       	ldd	r24, Y+14	; 0x0e
    8260:	9f 85       	ldd	r25, Y+15	; 0x0f
    8262:	fc 01       	movw	r30, r24
    8264:	80 81       	ld	r24, Z
    8266:	91 81       	ldd	r25, Z+1	; 0x01
    8268:	8e 3b       	cpi	r24, 0xBE	; 190
    826a:	9a 40       	sbci	r25, 0x0A	; 10
    826c:	50 f4       	brcc	.+20     	; 0x8282 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x26a>
	{
		index = 12;
    826e:	8c e0       	ldi	r24, 0x0C	; 12
    8270:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 2500;
    8272:	8e 85       	ldd	r24, Y+14	; 0x0e
    8274:	9f 85       	ldd	r25, Y+15	; 0x0f
    8276:	24 ec       	ldi	r18, 0xC4	; 196
    8278:	39 e0       	ldi	r19, 0x09	; 9
    827a:	fc 01       	movw	r30, r24
    827c:	20 83       	st	Z, r18
    827e:	31 83       	std	Z+1, r19	; 0x01
    8280:	2d c0       	rjmp	.+90     	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 3500)
    8282:	8e 85       	ldd	r24, Y+14	; 0x0e
    8284:	9f 85       	ldd	r25, Y+15	; 0x0f
    8286:	fc 01       	movw	r30, r24
    8288:	80 81       	ld	r24, Z
    828a:	91 81       	ldd	r25, Z+1	; 0x01
    828c:	8c 3a       	cpi	r24, 0xAC	; 172
    828e:	9d 40       	sbci	r25, 0x0D	; 13
    8290:	50 f4       	brcc	.+20     	; 0x82a6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x28e>
	{
		index = 13;
    8292:	8d e0       	ldi	r24, 0x0D	; 13
    8294:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 3000;
    8296:	8e 85       	ldd	r24, Y+14	; 0x0e
    8298:	9f 85       	ldd	r25, Y+15	; 0x0f
    829a:	28 eb       	ldi	r18, 0xB8	; 184
    829c:	3b e0       	ldi	r19, 0x0B	; 11
    829e:	fc 01       	movw	r30, r24
    82a0:	20 83       	st	Z, r18
    82a2:	31 83       	std	Z+1, r19	; 0x01
    82a4:	1b c0       	rjmp	.+54     	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else if(*powerMW < 4500)
    82a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    82a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    82aa:	fc 01       	movw	r30, r24
    82ac:	80 81       	ld	r24, Z
    82ae:	91 81       	ldd	r25, Z+1	; 0x01
    82b0:	84 39       	cpi	r24, 0x94	; 148
    82b2:	91 41       	sbci	r25, 0x11	; 17
    82b4:	50 f4       	brcc	.+20     	; 0x82ca <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2b2>
	{
		index = 14;
    82b6:	8e e0       	ldi	r24, 0x0E	; 14
    82b8:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 4000;
    82ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    82bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    82be:	20 ea       	ldi	r18, 0xA0	; 160
    82c0:	3f e0       	ldi	r19, 0x0F	; 15
    82c2:	fc 01       	movw	r30, r24
    82c4:	20 83       	st	Z, r18
    82c6:	31 83       	std	Z+1, r19	; 0x01
    82c8:	09 c0       	rjmp	.+18     	; 0x82dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x2c4>
	}
	else
	{
		index = 15;
    82ca:	8f e0       	ldi	r24, 0x0F	; 15
    82cc:	8a 83       	std	Y+2, r24	; 0x02
		*powerMW = 5000;
    82ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    82d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    82d2:	28 e8       	ldi	r18, 0x88	; 136
    82d4:	33 e1       	ldi	r19, 0x13	; 19
    82d6:	fc 01       	movw	r30, r24
    82d8:	20 83       	st	Z, r18
    82da:	31 83       	std	Z+1, r19	; 0x01
	}

	*driveLevel = g_80m_power_table[index];
    82dc:	8a 81       	ldd	r24, Y+2	; 0x02
    82de:	88 2f       	mov	r24, r24
    82e0:	90 e0       	ldi	r25, 0x00	; 0
    82e2:	88 5c       	subi	r24, 0xC8	; 200
    82e4:	9f 4b       	sbci	r25, 0xBF	; 191
    82e6:	fc 01       	movw	r30, r24
    82e8:	20 81       	ld	r18, Z
    82ea:	88 89       	ldd	r24, Y+16	; 0x10
    82ec:	99 89       	ldd	r25, Y+17	; 0x11
    82ee:	fc 01       	movw	r30, r24
    82f0:	20 83       	st	Z, r18
	*modLevelHigh = 0;
    82f2:	8a 89       	ldd	r24, Y+18	; 0x12
    82f4:	9b 89       	ldd	r25, Y+19	; 0x13
    82f6:	fc 01       	movw	r30, r24
    82f8:	10 82       	st	Z, r1
	*modLevelLow = 0;
    82fa:	8c 89       	ldd	r24, Y+20	; 0x14
    82fc:	9d 89       	ldd	r25, Y+21	; 0x15
    82fe:	fc 01       	movw	r30, r24
    8300:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);
    8302:	88 89       	ldd	r24, Y+16	; 0x10
    8304:	99 89       	ldd	r25, Y+17	; 0x11
    8306:	fc 01       	movw	r30, r24
    8308:	80 81       	ld	r24, Z
    830a:	8b 87       	std	Y+11, r24	; 0x0b
    830c:	8f ef       	ldi	r24, 0xFF	; 255
    830e:	90 e0       	ldi	r25, 0x00	; 0
    8310:	8c 87       	std	Y+12, r24	; 0x0c
    8312:	9d 87       	std	Y+13, r25	; 0x0d
    8314:	8b 85       	ldd	r24, Y+11	; 0x0b
    8316:	88 2f       	mov	r24, r24
    8318:	90 e0       	ldi	r25, 0x00	; 0
    831a:	2c 85       	ldd	r18, Y+12	; 0x0c
    831c:	3d 85       	ldd	r19, Y+13	; 0x0d
    831e:	28 17       	cp	r18, r24
    8320:	39 07       	cpc	r19, r25
    8322:	0c f4       	brge	.+2      	; 0x8326 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x30e>
    8324:	c9 01       	movw	r24, r18
    8326:	28 2f       	mov	r18, r24
    8328:	88 89       	ldd	r24, Y+16	; 0x10
    832a:	99 89       	ldd	r25, Y+17	; 0x11
    832c:	fc 01       	movw	r30, r24
    832e:	20 83       	st	Z, r18

	return(ec);
    8330:	89 81       	ldd	r24, Y+1	; 0x01
}
    8332:	65 96       	adiw	r28, 0x15	; 21
    8334:	cd bf       	out	0x3d, r28	; 61
    8336:	de bf       	out	0x3e, r29	; 62
    8338:	df 91       	pop	r29
    833a:	cf 91       	pop	r28
    833c:	08 95       	ret

0000833e <_Z18txIsAntennaForBandv>:

/**
 */
bool __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    833e:	cf 93       	push	r28
    8340:	df 93       	push	r29
    8342:	1f 92       	push	r1
    8344:	cd b7       	in	r28, 0x3d	; 61
    8346:	de b7       	in	r29, 0x3e	; 62
	bool result = false;
    8348:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    834a:	80 91 1b 45 	lds	r24, 0x451B	; 0x80451b <g_antenna_connect_state>
    834e:	88 2f       	mov	r24, r24
    8350:	90 e0       	ldi	r25, 0x00	; 0
    8352:	02 97       	sbiw	r24, 0x02	; 2
    8354:	09 f0       	breq	.+2      	; 0x8358 <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    8356:	03 c0       	rjmp	.+6      	; 0x835e <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = true;
    8358:	81 e0       	ldi	r24, 0x01	; 1
    835a:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    835c:	00 00       	nop

		}
		break;
	}

	return( result);
    835e:	89 81       	ldd	r24, Y+1	; 0x01
}
    8360:	0f 90       	pop	r0
    8362:	df 91       	pop	r29
    8364:	cf 91       	pop	r28
    8366:	08 95       	ret

00008368 <USART0_get_data>:
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
}
    8368:	cf 93       	push	r28
    836a:	df 93       	push	r29
    836c:	cd b7       	in	r28, 0x3d	; 61
    836e:	de b7       	in	r29, 0x3e	; 62
    8370:	80 e0       	ldi	r24, 0x00	; 0
    8372:	98 e0       	ldi	r25, 0x08	; 8
    8374:	fc 01       	movw	r30, r24
    8376:	80 81       	ld	r24, Z
    8378:	df 91       	pop	r29
    837a:	cf 91       	pop	r28
    837c:	08 95       	ret

0000837e <USART1_init>:
    837e:	0f 93       	push	r16
    8380:	1f 93       	push	r17
    8382:	cf 93       	push	r28
    8384:	df 93       	push	r29
    8386:	00 d0       	rcall	.+0      	; 0x8388 <USART1_init+0xa>
    8388:	00 d0       	rcall	.+0      	; 0x838a <USART1_init+0xc>
    838a:	cd b7       	in	r28, 0x3d	; 61
    838c:	de b7       	in	r29, 0x3e	; 62
    838e:	69 83       	std	Y+1, r22	; 0x01
    8390:	7a 83       	std	Y+2, r23	; 0x02
    8392:	8b 83       	std	Y+3, r24	; 0x03
    8394:	9c 83       	std	Y+4, r25	; 0x04
    8396:	00 e2       	ldi	r16, 0x20	; 32
    8398:	18 e0       	ldi	r17, 0x08	; 8
    839a:	69 81       	ldd	r22, Y+1	; 0x01
    839c:	7a 81       	ldd	r23, Y+2	; 0x02
    839e:	8b 81       	ldd	r24, Y+3	; 0x03
    83a0:	9c 81       	ldd	r25, Y+4	; 0x04
    83a2:	0e 94 1c 44 	call	0x8838	; 0x8838 <__floatunsisf>
    83a6:	dc 01       	movw	r26, r24
    83a8:	cb 01       	movw	r24, r22
    83aa:	20 e0       	ldi	r18, 0x00	; 0
    83ac:	30 e0       	ldi	r19, 0x00	; 0
    83ae:	40 e8       	ldi	r20, 0x80	; 128
    83b0:	51 e4       	ldi	r21, 0x41	; 65
    83b2:	bc 01       	movw	r22, r24
    83b4:	cd 01       	movw	r24, r26
    83b6:	0e 94 d3 44 	call	0x89a6	; 0x89a6 <__mulsf3>
    83ba:	dc 01       	movw	r26, r24
    83bc:	cb 01       	movw	r24, r22
    83be:	9c 01       	movw	r18, r24
    83c0:	ad 01       	movw	r20, r26
    83c2:	60 e0       	ldi	r22, 0x00	; 0
    83c4:	74 e2       	ldi	r23, 0x24	; 36
    83c6:	84 e7       	ldi	r24, 0x74	; 116
    83c8:	9d e4       	ldi	r25, 0x4D	; 77
    83ca:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divsf3>
    83ce:	dc 01       	movw	r26, r24
    83d0:	cb 01       	movw	r24, r22
    83d2:	20 e0       	ldi	r18, 0x00	; 0
    83d4:	30 e0       	ldi	r19, 0x00	; 0
    83d6:	40 e0       	ldi	r20, 0x00	; 0
    83d8:	5f e3       	ldi	r21, 0x3F	; 63
    83da:	bc 01       	movw	r22, r24
    83dc:	cd 01       	movw	r24, r26
    83de:	0e 94 03 43 	call	0x8606	; 0x8606 <__addsf3>
    83e2:	dc 01       	movw	r26, r24
    83e4:	cb 01       	movw	r24, r22
    83e6:	bc 01       	movw	r22, r24
    83e8:	cd 01       	movw	r24, r26
    83ea:	0e 94 ed 43 	call	0x87da	; 0x87da <__fixunssfsi>
    83ee:	dc 01       	movw	r26, r24
    83f0:	cb 01       	movw	r24, r22
    83f2:	f8 01       	movw	r30, r16
    83f4:	80 87       	std	Z+8, r24	; 0x08
    83f6:	91 87       	std	Z+9, r25	; 0x09
    83f8:	80 e2       	ldi	r24, 0x20	; 32
    83fa:	98 e0       	ldi	r25, 0x08	; 8
    83fc:	20 e8       	ldi	r18, 0x80	; 128
    83fe:	fc 01       	movw	r30, r24
    8400:	25 83       	std	Z+5, r18	; 0x05
    8402:	80 e2       	ldi	r24, 0x20	; 32
    8404:	98 e0       	ldi	r25, 0x08	; 8
    8406:	20 ec       	ldi	r18, 0xC0	; 192
    8408:	fc 01       	movw	r30, r24
    840a:	26 83       	std	Z+6, r18	; 0x06
    840c:	80 e0       	ldi	r24, 0x00	; 0
    840e:	24 96       	adiw	r28, 0x04	; 4
    8410:	cd bf       	out	0x3d, r28	; 61
    8412:	de bf       	out	0x3e, r29	; 62
    8414:	df 91       	pop	r29
    8416:	cf 91       	pop	r28
    8418:	1f 91       	pop	r17
    841a:	0f 91       	pop	r16
    841c:	08 95       	ret

0000841e <USART1_enable_tx>:
    841e:	cf 93       	push	r28
    8420:	df 93       	push	r29
    8422:	cd b7       	in	r28, 0x3d	; 61
    8424:	de b7       	in	r29, 0x3e	; 62
    8426:	80 e2       	ldi	r24, 0x20	; 32
    8428:	98 e0       	ldi	r25, 0x08	; 8
    842a:	20 e2       	ldi	r18, 0x20	; 32
    842c:	38 e0       	ldi	r19, 0x08	; 8
    842e:	f9 01       	movw	r30, r18
    8430:	26 81       	ldd	r18, Z+6	; 0x06
    8432:	20 64       	ori	r18, 0x40	; 64
    8434:	fc 01       	movw	r30, r24
    8436:	26 83       	std	Z+6, r18	; 0x06
    8438:	80 e2       	ldi	r24, 0x20	; 32
    843a:	98 e0       	ldi	r25, 0x08	; 8
    843c:	20 e2       	ldi	r18, 0x20	; 32
    843e:	38 e0       	ldi	r19, 0x08	; 8
    8440:	f9 01       	movw	r30, r18
    8442:	25 81       	ldd	r18, Z+5	; 0x05
    8444:	20 62       	ori	r18, 0x20	; 32
    8446:	fc 01       	movw	r30, r24
    8448:	25 83       	std	Z+5, r18	; 0x05
    844a:	00 00       	nop
    844c:	df 91       	pop	r29
    844e:	cf 91       	pop	r28
    8450:	08 95       	ret

00008452 <USART1_get_data>:
    8452:	cf 93       	push	r28
    8454:	df 93       	push	r29
    8456:	cd b7       	in	r28, 0x3d	; 61
    8458:	de b7       	in	r29, 0x3e	; 62
    845a:	80 e2       	ldi	r24, 0x20	; 32
    845c:	98 e0       	ldi	r25, 0x08	; 8
    845e:	fc 01       	movw	r30, r24
    8460:	80 81       	ld	r24, Z
    8462:	df 91       	pop	r29
    8464:	cf 91       	pop	r28
    8466:	08 95       	ret

00008468 <USART4_init>:
    8468:	0f 93       	push	r16
    846a:	1f 93       	push	r17
    846c:	cf 93       	push	r28
    846e:	df 93       	push	r29
    8470:	00 d0       	rcall	.+0      	; 0x8472 <USART4_init+0xa>
    8472:	00 d0       	rcall	.+0      	; 0x8474 <USART4_init+0xc>
    8474:	cd b7       	in	r28, 0x3d	; 61
    8476:	de b7       	in	r29, 0x3e	; 62
    8478:	69 83       	std	Y+1, r22	; 0x01
    847a:	7a 83       	std	Y+2, r23	; 0x02
    847c:	8b 83       	std	Y+3, r24	; 0x03
    847e:	9c 83       	std	Y+4, r25	; 0x04
    8480:	00 e8       	ldi	r16, 0x80	; 128
    8482:	18 e0       	ldi	r17, 0x08	; 8
    8484:	69 81       	ldd	r22, Y+1	; 0x01
    8486:	7a 81       	ldd	r23, Y+2	; 0x02
    8488:	8b 81       	ldd	r24, Y+3	; 0x03
    848a:	9c 81       	ldd	r25, Y+4	; 0x04
    848c:	0e 94 1c 44 	call	0x8838	; 0x8838 <__floatunsisf>
    8490:	dc 01       	movw	r26, r24
    8492:	cb 01       	movw	r24, r22
    8494:	20 e0       	ldi	r18, 0x00	; 0
    8496:	30 e0       	ldi	r19, 0x00	; 0
    8498:	40 e8       	ldi	r20, 0x80	; 128
    849a:	51 e4       	ldi	r21, 0x41	; 65
    849c:	bc 01       	movw	r22, r24
    849e:	cd 01       	movw	r24, r26
    84a0:	0e 94 d3 44 	call	0x89a6	; 0x89a6 <__mulsf3>
    84a4:	dc 01       	movw	r26, r24
    84a6:	cb 01       	movw	r24, r22
    84a8:	9c 01       	movw	r18, r24
    84aa:	ad 01       	movw	r20, r26
    84ac:	60 e0       	ldi	r22, 0x00	; 0
    84ae:	74 e2       	ldi	r23, 0x24	; 36
    84b0:	84 e7       	ldi	r24, 0x74	; 116
    84b2:	9d e4       	ldi	r25, 0x4D	; 77
    84b4:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divsf3>
    84b8:	dc 01       	movw	r26, r24
    84ba:	cb 01       	movw	r24, r22
    84bc:	20 e0       	ldi	r18, 0x00	; 0
    84be:	30 e0       	ldi	r19, 0x00	; 0
    84c0:	40 e0       	ldi	r20, 0x00	; 0
    84c2:	5f e3       	ldi	r21, 0x3F	; 63
    84c4:	bc 01       	movw	r22, r24
    84c6:	cd 01       	movw	r24, r26
    84c8:	0e 94 03 43 	call	0x8606	; 0x8606 <__addsf3>
    84cc:	dc 01       	movw	r26, r24
    84ce:	cb 01       	movw	r24, r22
    84d0:	bc 01       	movw	r22, r24
    84d2:	cd 01       	movw	r24, r26
    84d4:	0e 94 ed 43 	call	0x87da	; 0x87da <__fixunssfsi>
    84d8:	dc 01       	movw	r26, r24
    84da:	cb 01       	movw	r24, r22
    84dc:	f8 01       	movw	r30, r16
    84de:	80 87       	std	Z+8, r24	; 0x08
    84e0:	91 87       	std	Z+9, r25	; 0x09
    84e2:	80 e8       	ldi	r24, 0x80	; 128
    84e4:	98 e0       	ldi	r25, 0x08	; 8
    84e6:	20 e8       	ldi	r18, 0x80	; 128
    84e8:	fc 01       	movw	r30, r24
    84ea:	25 83       	std	Z+5, r18	; 0x05
    84ec:	80 e8       	ldi	r24, 0x80	; 128
    84ee:	98 e0       	ldi	r25, 0x08	; 8
    84f0:	20 ec       	ldi	r18, 0xC0	; 192
    84f2:	fc 01       	movw	r30, r24
    84f4:	26 83       	std	Z+6, r18	; 0x06
    84f6:	80 e0       	ldi	r24, 0x00	; 0
    84f8:	24 96       	adiw	r28, 0x04	; 4
    84fa:	cd bf       	out	0x3d, r28	; 61
    84fc:	de bf       	out	0x3e, r29	; 62
    84fe:	df 91       	pop	r29
    8500:	cf 91       	pop	r28
    8502:	1f 91       	pop	r17
    8504:	0f 91       	pop	r16
    8506:	08 95       	ret

00008508 <USART4_enable_tx>:
    8508:	cf 93       	push	r28
    850a:	df 93       	push	r29
    850c:	cd b7       	in	r28, 0x3d	; 61
    850e:	de b7       	in	r29, 0x3e	; 62
    8510:	80 e8       	ldi	r24, 0x80	; 128
    8512:	98 e0       	ldi	r25, 0x08	; 8
    8514:	20 e8       	ldi	r18, 0x80	; 128
    8516:	38 e0       	ldi	r19, 0x08	; 8
    8518:	f9 01       	movw	r30, r18
    851a:	26 81       	ldd	r18, Z+6	; 0x06
    851c:	20 64       	ori	r18, 0x40	; 64
    851e:	fc 01       	movw	r30, r24
    8520:	26 83       	std	Z+6, r18	; 0x06
    8522:	80 e8       	ldi	r24, 0x80	; 128
    8524:	98 e0       	ldi	r25, 0x08	; 8
    8526:	20 e8       	ldi	r18, 0x80	; 128
    8528:	38 e0       	ldi	r19, 0x08	; 8
    852a:	f9 01       	movw	r30, r18
    852c:	25 81       	ldd	r18, Z+5	; 0x05
    852e:	20 62       	ori	r18, 0x20	; 32
    8530:	fc 01       	movw	r30, r24
    8532:	25 83       	std	Z+5, r18	; 0x05
    8534:	00 00       	nop
    8536:	df 91       	pop	r29
    8538:	cf 91       	pop	r28
    853a:	08 95       	ret

0000853c <USART4_get_data>:
 * \brief Get recieved data from USART4
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
    853c:	cf 93       	push	r28
    853e:	df 93       	push	r29
    8540:	cd b7       	in	r28, 0x3d	; 61
    8542:	de b7       	in	r29, 0x3e	; 62
	return USART4.RXDATAL;
    8544:	80 e8       	ldi	r24, 0x80	; 128
    8546:	98 e0       	ldi	r25, 0x08	; 8
    8548:	fc 01       	movw	r30, r24
    854a:	80 81       	ld	r24, Z
}
    854c:	df 91       	pop	r29
    854e:	cf 91       	pop	r28
    8550:	08 95       	ret

00008552 <_Z7timeDifmm>:
/**
 * Returns a-b
 * It appears difftime might not be handling subtraction of unsigned arguments correctly with current compiler. This function avoids any problems.
 */
int32_t timeDif(time_t a, time_t b)
{
    8552:	ef 92       	push	r14
    8554:	ff 92       	push	r15
    8556:	0f 93       	push	r16
    8558:	1f 93       	push	r17
    855a:	cf 93       	push	r28
    855c:	df 93       	push	r29
    855e:	cd b7       	in	r28, 0x3d	; 61
    8560:	de b7       	in	r29, 0x3e	; 62
    8562:	2c 97       	sbiw	r28, 0x0c	; 12
    8564:	cd bf       	out	0x3d, r28	; 61
    8566:	de bf       	out	0x3e, r29	; 62
    8568:	6d 83       	std	Y+5, r22	; 0x05
    856a:	7e 83       	std	Y+6, r23	; 0x06
    856c:	8f 83       	std	Y+7, r24	; 0x07
    856e:	98 87       	std	Y+8, r25	; 0x08
    8570:	29 87       	std	Y+9, r18	; 0x09
    8572:	3a 87       	std	Y+10, r19	; 0x0a
    8574:	4b 87       	std	Y+11, r20	; 0x0b
    8576:	5c 87       	std	Y+12, r21	; 0x0c
	int32_t dif; // = difftime(now, g_event_start_epoch); // returns arg1 - arg2
	if(a > b)
    8578:	2d 81       	ldd	r18, Y+5	; 0x05
    857a:	3e 81       	ldd	r19, Y+6	; 0x06
    857c:	4f 81       	ldd	r20, Y+7	; 0x07
    857e:	58 85       	ldd	r21, Y+8	; 0x08
    8580:	89 85       	ldd	r24, Y+9	; 0x09
    8582:	9a 85       	ldd	r25, Y+10	; 0x0a
    8584:	ab 85       	ldd	r26, Y+11	; 0x0b
    8586:	bc 85       	ldd	r27, Y+12	; 0x0c
    8588:	82 17       	cp	r24, r18
    858a:	93 07       	cpc	r25, r19
    858c:	a4 07       	cpc	r26, r20
    858e:	b5 07       	cpc	r27, r21
    8590:	a8 f4       	brcc	.+42     	; 0x85bc <_Z7timeDifmm+0x6a>
		dif = a - b;
    8592:	2d 81       	ldd	r18, Y+5	; 0x05
    8594:	3e 81       	ldd	r19, Y+6	; 0x06
    8596:	4f 81       	ldd	r20, Y+7	; 0x07
    8598:	58 85       	ldd	r21, Y+8	; 0x08
    859a:	89 85       	ldd	r24, Y+9	; 0x09
    859c:	9a 85       	ldd	r25, Y+10	; 0x0a
    859e:	ab 85       	ldd	r26, Y+11	; 0x0b
    85a0:	bc 85       	ldd	r27, Y+12	; 0x0c
    85a2:	79 01       	movw	r14, r18
    85a4:	8a 01       	movw	r16, r20
    85a6:	e8 1a       	sub	r14, r24
    85a8:	f9 0a       	sbc	r15, r25
    85aa:	0a 0b       	sbc	r16, r26
    85ac:	1b 0b       	sbc	r17, r27
    85ae:	d8 01       	movw	r26, r16
    85b0:	c7 01       	movw	r24, r14
    85b2:	89 83       	std	Y+1, r24	; 0x01
    85b4:	9a 83       	std	Y+2, r25	; 0x02
    85b6:	ab 83       	std	Y+3, r26	; 0x03
    85b8:	bc 83       	std	Y+4, r27	; 0x04
    85ba:	14 c0       	rjmp	.+40     	; 0x85e4 <_Z7timeDifmm+0x92>
	else
		dif = -(b - a);
    85bc:	2d 81       	ldd	r18, Y+5	; 0x05
    85be:	3e 81       	ldd	r19, Y+6	; 0x06
    85c0:	4f 81       	ldd	r20, Y+7	; 0x07
    85c2:	58 85       	ldd	r21, Y+8	; 0x08
    85c4:	89 85       	ldd	r24, Y+9	; 0x09
    85c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    85c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    85ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    85cc:	79 01       	movw	r14, r18
    85ce:	8a 01       	movw	r16, r20
    85d0:	e8 1a       	sub	r14, r24
    85d2:	f9 0a       	sbc	r15, r25
    85d4:	0a 0b       	sbc	r16, r26
    85d6:	1b 0b       	sbc	r17, r27
    85d8:	d8 01       	movw	r26, r16
    85da:	c7 01       	movw	r24, r14
    85dc:	89 83       	std	Y+1, r24	; 0x01
    85de:	9a 83       	std	Y+2, r25	; 0x02
    85e0:	ab 83       	std	Y+3, r26	; 0x03
    85e2:	bc 83       	std	Y+4, r27	; 0x04

	return dif;
    85e4:	89 81       	ldd	r24, Y+1	; 0x01
    85e6:	9a 81       	ldd	r25, Y+2	; 0x02
    85e8:	ab 81       	ldd	r26, Y+3	; 0x03
    85ea:	bc 81       	ldd	r27, Y+4	; 0x04
}
    85ec:	bc 01       	movw	r22, r24
    85ee:	cd 01       	movw	r24, r26
    85f0:	2c 96       	adiw	r28, 0x0c	; 12
    85f2:	cd bf       	out	0x3d, r28	; 61
    85f4:	de bf       	out	0x3e, r29	; 62
    85f6:	df 91       	pop	r29
    85f8:	cf 91       	pop	r28
    85fa:	1f 91       	pop	r17
    85fc:	0f 91       	pop	r16
    85fe:	ff 90       	pop	r15
    8600:	ef 90       	pop	r14
    8602:	08 95       	ret

00008604 <__subsf3>:
    8604:	50 58       	subi	r21, 0x80	; 128

00008606 <__addsf3>:
    8606:	bb 27       	eor	r27, r27
    8608:	aa 27       	eor	r26, r26
    860a:	0e 94 1a 43 	call	0x8634	; 0x8634 <__addsf3x>
    860e:	0c 94 94 44 	jmp	0x8928	; 0x8928 <__fp_round>
    8612:	0e 94 86 44 	call	0x890c	; 0x890c <__fp_pscA>
    8616:	38 f0       	brcs	.+14     	; 0x8626 <__addsf3+0x20>
    8618:	0e 94 8d 44 	call	0x891a	; 0x891a <__fp_pscB>
    861c:	20 f0       	brcs	.+8      	; 0x8626 <__addsf3+0x20>
    861e:	39 f4       	brne	.+14     	; 0x862e <__addsf3+0x28>
    8620:	9f 3f       	cpi	r25, 0xFF	; 255
    8622:	19 f4       	brne	.+6      	; 0x862a <__addsf3+0x24>
    8624:	26 f4       	brtc	.+8      	; 0x862e <__addsf3+0x28>
    8626:	0c 94 83 44 	jmp	0x8906	; 0x8906 <__fp_nan>
    862a:	0e f4       	brtc	.+2      	; 0x862e <__addsf3+0x28>
    862c:	e0 95       	com	r30
    862e:	e7 fb       	bst	r30, 7
    8630:	0c 94 7d 44 	jmp	0x88fa	; 0x88fa <__fp_inf>

00008634 <__addsf3x>:
    8634:	e9 2f       	mov	r30, r25
    8636:	0e 94 a5 44 	call	0x894a	; 0x894a <__fp_split3>
    863a:	58 f3       	brcs	.-42     	; 0x8612 <__addsf3+0xc>
    863c:	ba 17       	cp	r27, r26
    863e:	62 07       	cpc	r22, r18
    8640:	73 07       	cpc	r23, r19
    8642:	84 07       	cpc	r24, r20
    8644:	95 07       	cpc	r25, r21
    8646:	20 f0       	brcs	.+8      	; 0x8650 <__addsf3x+0x1c>
    8648:	79 f4       	brne	.+30     	; 0x8668 <__addsf3x+0x34>
    864a:	a6 f5       	brtc	.+104    	; 0x86b4 <__addsf3x+0x80>
    864c:	0c 94 c7 44 	jmp	0x898e	; 0x898e <__fp_zero>
    8650:	0e f4       	brtc	.+2      	; 0x8654 <__addsf3x+0x20>
    8652:	e0 95       	com	r30
    8654:	0b 2e       	mov	r0, r27
    8656:	ba 2f       	mov	r27, r26
    8658:	a0 2d       	mov	r26, r0
    865a:	0b 01       	movw	r0, r22
    865c:	b9 01       	movw	r22, r18
    865e:	90 01       	movw	r18, r0
    8660:	0c 01       	movw	r0, r24
    8662:	ca 01       	movw	r24, r20
    8664:	a0 01       	movw	r20, r0
    8666:	11 24       	eor	r1, r1
    8668:	ff 27       	eor	r31, r31
    866a:	59 1b       	sub	r21, r25
    866c:	99 f0       	breq	.+38     	; 0x8694 <__addsf3x+0x60>
    866e:	59 3f       	cpi	r21, 0xF9	; 249
    8670:	50 f4       	brcc	.+20     	; 0x8686 <__addsf3x+0x52>
    8672:	50 3e       	cpi	r21, 0xE0	; 224
    8674:	68 f1       	brcs	.+90     	; 0x86d0 <__addsf3x+0x9c>
    8676:	1a 16       	cp	r1, r26
    8678:	f0 40       	sbci	r31, 0x00	; 0
    867a:	a2 2f       	mov	r26, r18
    867c:	23 2f       	mov	r18, r19
    867e:	34 2f       	mov	r19, r20
    8680:	44 27       	eor	r20, r20
    8682:	58 5f       	subi	r21, 0xF8	; 248
    8684:	f3 cf       	rjmp	.-26     	; 0x866c <__addsf3x+0x38>
    8686:	46 95       	lsr	r20
    8688:	37 95       	ror	r19
    868a:	27 95       	ror	r18
    868c:	a7 95       	ror	r26
    868e:	f0 40       	sbci	r31, 0x00	; 0
    8690:	53 95       	inc	r21
    8692:	c9 f7       	brne	.-14     	; 0x8686 <__addsf3x+0x52>
    8694:	7e f4       	brtc	.+30     	; 0x86b4 <__addsf3x+0x80>
    8696:	1f 16       	cp	r1, r31
    8698:	ba 0b       	sbc	r27, r26
    869a:	62 0b       	sbc	r22, r18
    869c:	73 0b       	sbc	r23, r19
    869e:	84 0b       	sbc	r24, r20
    86a0:	ba f0       	brmi	.+46     	; 0x86d0 <__addsf3x+0x9c>
    86a2:	91 50       	subi	r25, 0x01	; 1
    86a4:	a1 f0       	breq	.+40     	; 0x86ce <__addsf3x+0x9a>
    86a6:	ff 0f       	add	r31, r31
    86a8:	bb 1f       	adc	r27, r27
    86aa:	66 1f       	adc	r22, r22
    86ac:	77 1f       	adc	r23, r23
    86ae:	88 1f       	adc	r24, r24
    86b0:	c2 f7       	brpl	.-16     	; 0x86a2 <__addsf3x+0x6e>
    86b2:	0e c0       	rjmp	.+28     	; 0x86d0 <__addsf3x+0x9c>
    86b4:	ba 0f       	add	r27, r26
    86b6:	62 1f       	adc	r22, r18
    86b8:	73 1f       	adc	r23, r19
    86ba:	84 1f       	adc	r24, r20
    86bc:	48 f4       	brcc	.+18     	; 0x86d0 <__addsf3x+0x9c>
    86be:	87 95       	ror	r24
    86c0:	77 95       	ror	r23
    86c2:	67 95       	ror	r22
    86c4:	b7 95       	ror	r27
    86c6:	f7 95       	ror	r31
    86c8:	9e 3f       	cpi	r25, 0xFE	; 254
    86ca:	08 f0       	brcs	.+2      	; 0x86ce <__addsf3x+0x9a>
    86cc:	b0 cf       	rjmp	.-160    	; 0x862e <__addsf3+0x28>
    86ce:	93 95       	inc	r25
    86d0:	88 0f       	add	r24, r24
    86d2:	08 f0       	brcs	.+2      	; 0x86d6 <__addsf3x+0xa2>
    86d4:	99 27       	eor	r25, r25
    86d6:	ee 0f       	add	r30, r30
    86d8:	97 95       	ror	r25
    86da:	87 95       	ror	r24
    86dc:	08 95       	ret

000086de <__cmpsf2>:
    86de:	0e 94 59 44 	call	0x88b2	; 0x88b2 <__fp_cmp>
    86e2:	08 f4       	brcc	.+2      	; 0x86e6 <__cmpsf2+0x8>
    86e4:	81 e0       	ldi	r24, 0x01	; 1
    86e6:	08 95       	ret

000086e8 <__divsf3>:
    86e8:	0e 94 88 43 	call	0x8710	; 0x8710 <__divsf3x>
    86ec:	0c 94 94 44 	jmp	0x8928	; 0x8928 <__fp_round>
    86f0:	0e 94 8d 44 	call	0x891a	; 0x891a <__fp_pscB>
    86f4:	58 f0       	brcs	.+22     	; 0x870c <__divsf3+0x24>
    86f6:	0e 94 86 44 	call	0x890c	; 0x890c <__fp_pscA>
    86fa:	40 f0       	brcs	.+16     	; 0x870c <__divsf3+0x24>
    86fc:	29 f4       	brne	.+10     	; 0x8708 <__divsf3+0x20>
    86fe:	5f 3f       	cpi	r21, 0xFF	; 255
    8700:	29 f0       	breq	.+10     	; 0x870c <__divsf3+0x24>
    8702:	0c 94 7d 44 	jmp	0x88fa	; 0x88fa <__fp_inf>
    8706:	51 11       	cpse	r21, r1
    8708:	0c 94 c8 44 	jmp	0x8990	; 0x8990 <__fp_szero>
    870c:	0c 94 83 44 	jmp	0x8906	; 0x8906 <__fp_nan>

00008710 <__divsf3x>:
    8710:	0e 94 a5 44 	call	0x894a	; 0x894a <__fp_split3>
    8714:	68 f3       	brcs	.-38     	; 0x86f0 <__divsf3+0x8>

00008716 <__divsf3_pse>:
    8716:	99 23       	and	r25, r25
    8718:	b1 f3       	breq	.-20     	; 0x8706 <__divsf3+0x1e>
    871a:	55 23       	and	r21, r21
    871c:	91 f3       	breq	.-28     	; 0x8702 <__divsf3+0x1a>
    871e:	95 1b       	sub	r25, r21
    8720:	55 0b       	sbc	r21, r21
    8722:	bb 27       	eor	r27, r27
    8724:	aa 27       	eor	r26, r26
    8726:	62 17       	cp	r22, r18
    8728:	73 07       	cpc	r23, r19
    872a:	84 07       	cpc	r24, r20
    872c:	38 f0       	brcs	.+14     	; 0x873c <__divsf3_pse+0x26>
    872e:	9f 5f       	subi	r25, 0xFF	; 255
    8730:	5f 4f       	sbci	r21, 0xFF	; 255
    8732:	22 0f       	add	r18, r18
    8734:	33 1f       	adc	r19, r19
    8736:	44 1f       	adc	r20, r20
    8738:	aa 1f       	adc	r26, r26
    873a:	a9 f3       	breq	.-22     	; 0x8726 <__divsf3_pse+0x10>
    873c:	35 d0       	rcall	.+106    	; 0x87a8 <__divsf3_pse+0x92>
    873e:	0e 2e       	mov	r0, r30
    8740:	3a f0       	brmi	.+14     	; 0x8750 <__divsf3_pse+0x3a>
    8742:	e0 e8       	ldi	r30, 0x80	; 128
    8744:	32 d0       	rcall	.+100    	; 0x87aa <__divsf3_pse+0x94>
    8746:	91 50       	subi	r25, 0x01	; 1
    8748:	50 40       	sbci	r21, 0x00	; 0
    874a:	e6 95       	lsr	r30
    874c:	00 1c       	adc	r0, r0
    874e:	ca f7       	brpl	.-14     	; 0x8742 <__divsf3_pse+0x2c>
    8750:	2b d0       	rcall	.+86     	; 0x87a8 <__divsf3_pse+0x92>
    8752:	fe 2f       	mov	r31, r30
    8754:	29 d0       	rcall	.+82     	; 0x87a8 <__divsf3_pse+0x92>
    8756:	66 0f       	add	r22, r22
    8758:	77 1f       	adc	r23, r23
    875a:	88 1f       	adc	r24, r24
    875c:	bb 1f       	adc	r27, r27
    875e:	26 17       	cp	r18, r22
    8760:	37 07       	cpc	r19, r23
    8762:	48 07       	cpc	r20, r24
    8764:	ab 07       	cpc	r26, r27
    8766:	b0 e8       	ldi	r27, 0x80	; 128
    8768:	09 f0       	breq	.+2      	; 0x876c <__divsf3_pse+0x56>
    876a:	bb 0b       	sbc	r27, r27
    876c:	80 2d       	mov	r24, r0
    876e:	bf 01       	movw	r22, r30
    8770:	ff 27       	eor	r31, r31
    8772:	93 58       	subi	r25, 0x83	; 131
    8774:	5f 4f       	sbci	r21, 0xFF	; 255
    8776:	3a f0       	brmi	.+14     	; 0x8786 <__divsf3_pse+0x70>
    8778:	9e 3f       	cpi	r25, 0xFE	; 254
    877a:	51 05       	cpc	r21, r1
    877c:	78 f0       	brcs	.+30     	; 0x879c <__divsf3_pse+0x86>
    877e:	0c 94 7d 44 	jmp	0x88fa	; 0x88fa <__fp_inf>
    8782:	0c 94 c8 44 	jmp	0x8990	; 0x8990 <__fp_szero>
    8786:	5f 3f       	cpi	r21, 0xFF	; 255
    8788:	e4 f3       	brlt	.-8      	; 0x8782 <__divsf3_pse+0x6c>
    878a:	98 3e       	cpi	r25, 0xE8	; 232
    878c:	d4 f3       	brlt	.-12     	; 0x8782 <__divsf3_pse+0x6c>
    878e:	86 95       	lsr	r24
    8790:	77 95       	ror	r23
    8792:	67 95       	ror	r22
    8794:	b7 95       	ror	r27
    8796:	f7 95       	ror	r31
    8798:	9f 5f       	subi	r25, 0xFF	; 255
    879a:	c9 f7       	brne	.-14     	; 0x878e <__divsf3_pse+0x78>
    879c:	88 0f       	add	r24, r24
    879e:	91 1d       	adc	r25, r1
    87a0:	96 95       	lsr	r25
    87a2:	87 95       	ror	r24
    87a4:	97 f9       	bld	r25, 7
    87a6:	08 95       	ret
    87a8:	e1 e0       	ldi	r30, 0x01	; 1
    87aa:	66 0f       	add	r22, r22
    87ac:	77 1f       	adc	r23, r23
    87ae:	88 1f       	adc	r24, r24
    87b0:	bb 1f       	adc	r27, r27
    87b2:	62 17       	cp	r22, r18
    87b4:	73 07       	cpc	r23, r19
    87b6:	84 07       	cpc	r24, r20
    87b8:	ba 07       	cpc	r27, r26
    87ba:	20 f0       	brcs	.+8      	; 0x87c4 <__divsf3_pse+0xae>
    87bc:	62 1b       	sub	r22, r18
    87be:	73 0b       	sbc	r23, r19
    87c0:	84 0b       	sbc	r24, r20
    87c2:	ba 0b       	sbc	r27, r26
    87c4:	ee 1f       	adc	r30, r30
    87c6:	88 f7       	brcc	.-30     	; 0x87aa <__divsf3_pse+0x94>
    87c8:	e0 95       	com	r30
    87ca:	08 95       	ret

000087cc <__fixsfsi>:
    87cc:	0e 94 ed 43 	call	0x87da	; 0x87da <__fixunssfsi>
    87d0:	68 94       	set
    87d2:	b1 11       	cpse	r27, r1
    87d4:	0c 94 c8 44 	jmp	0x8990	; 0x8990 <__fp_szero>
    87d8:	08 95       	ret

000087da <__fixunssfsi>:
    87da:	0e 94 ad 44 	call	0x895a	; 0x895a <__fp_splitA>
    87de:	88 f0       	brcs	.+34     	; 0x8802 <__fixunssfsi+0x28>
    87e0:	9f 57       	subi	r25, 0x7F	; 127
    87e2:	98 f0       	brcs	.+38     	; 0x880a <__fixunssfsi+0x30>
    87e4:	b9 2f       	mov	r27, r25
    87e6:	99 27       	eor	r25, r25
    87e8:	b7 51       	subi	r27, 0x17	; 23
    87ea:	b0 f0       	brcs	.+44     	; 0x8818 <__fixunssfsi+0x3e>
    87ec:	e1 f0       	breq	.+56     	; 0x8826 <__fixunssfsi+0x4c>
    87ee:	66 0f       	add	r22, r22
    87f0:	77 1f       	adc	r23, r23
    87f2:	88 1f       	adc	r24, r24
    87f4:	99 1f       	adc	r25, r25
    87f6:	1a f0       	brmi	.+6      	; 0x87fe <__fixunssfsi+0x24>
    87f8:	ba 95       	dec	r27
    87fa:	c9 f7       	brne	.-14     	; 0x87ee <__fixunssfsi+0x14>
    87fc:	14 c0       	rjmp	.+40     	; 0x8826 <__fixunssfsi+0x4c>
    87fe:	b1 30       	cpi	r27, 0x01	; 1
    8800:	91 f0       	breq	.+36     	; 0x8826 <__fixunssfsi+0x4c>
    8802:	0e 94 c7 44 	call	0x898e	; 0x898e <__fp_zero>
    8806:	b1 e0       	ldi	r27, 0x01	; 1
    8808:	08 95       	ret
    880a:	0c 94 c7 44 	jmp	0x898e	; 0x898e <__fp_zero>
    880e:	67 2f       	mov	r22, r23
    8810:	78 2f       	mov	r23, r24
    8812:	88 27       	eor	r24, r24
    8814:	b8 5f       	subi	r27, 0xF8	; 248
    8816:	39 f0       	breq	.+14     	; 0x8826 <__fixunssfsi+0x4c>
    8818:	b9 3f       	cpi	r27, 0xF9	; 249
    881a:	cc f3       	brlt	.-14     	; 0x880e <__fixunssfsi+0x34>
    881c:	86 95       	lsr	r24
    881e:	77 95       	ror	r23
    8820:	67 95       	ror	r22
    8822:	b3 95       	inc	r27
    8824:	d9 f7       	brne	.-10     	; 0x881c <__fixunssfsi+0x42>
    8826:	3e f4       	brtc	.+14     	; 0x8836 <__fixunssfsi+0x5c>
    8828:	90 95       	com	r25
    882a:	80 95       	com	r24
    882c:	70 95       	com	r23
    882e:	61 95       	neg	r22
    8830:	7f 4f       	sbci	r23, 0xFF	; 255
    8832:	8f 4f       	sbci	r24, 0xFF	; 255
    8834:	9f 4f       	sbci	r25, 0xFF	; 255
    8836:	08 95       	ret

00008838 <__floatunsisf>:
    8838:	e8 94       	clt
    883a:	09 c0       	rjmp	.+18     	; 0x884e <__floatsisf+0x12>

0000883c <__floatsisf>:
    883c:	97 fb       	bst	r25, 7
    883e:	3e f4       	brtc	.+14     	; 0x884e <__floatsisf+0x12>
    8840:	90 95       	com	r25
    8842:	80 95       	com	r24
    8844:	70 95       	com	r23
    8846:	61 95       	neg	r22
    8848:	7f 4f       	sbci	r23, 0xFF	; 255
    884a:	8f 4f       	sbci	r24, 0xFF	; 255
    884c:	9f 4f       	sbci	r25, 0xFF	; 255
    884e:	99 23       	and	r25, r25
    8850:	a9 f0       	breq	.+42     	; 0x887c <__floatsisf+0x40>
    8852:	f9 2f       	mov	r31, r25
    8854:	96 e9       	ldi	r25, 0x96	; 150
    8856:	bb 27       	eor	r27, r27
    8858:	93 95       	inc	r25
    885a:	f6 95       	lsr	r31
    885c:	87 95       	ror	r24
    885e:	77 95       	ror	r23
    8860:	67 95       	ror	r22
    8862:	b7 95       	ror	r27
    8864:	f1 11       	cpse	r31, r1
    8866:	f8 cf       	rjmp	.-16     	; 0x8858 <__floatsisf+0x1c>
    8868:	fa f4       	brpl	.+62     	; 0x88a8 <__floatsisf+0x6c>
    886a:	bb 0f       	add	r27, r27
    886c:	11 f4       	brne	.+4      	; 0x8872 <__floatsisf+0x36>
    886e:	60 ff       	sbrs	r22, 0
    8870:	1b c0       	rjmp	.+54     	; 0x88a8 <__floatsisf+0x6c>
    8872:	6f 5f       	subi	r22, 0xFF	; 255
    8874:	7f 4f       	sbci	r23, 0xFF	; 255
    8876:	8f 4f       	sbci	r24, 0xFF	; 255
    8878:	9f 4f       	sbci	r25, 0xFF	; 255
    887a:	16 c0       	rjmp	.+44     	; 0x88a8 <__floatsisf+0x6c>
    887c:	88 23       	and	r24, r24
    887e:	11 f0       	breq	.+4      	; 0x8884 <__floatsisf+0x48>
    8880:	96 e9       	ldi	r25, 0x96	; 150
    8882:	11 c0       	rjmp	.+34     	; 0x88a6 <__floatsisf+0x6a>
    8884:	77 23       	and	r23, r23
    8886:	21 f0       	breq	.+8      	; 0x8890 <__floatsisf+0x54>
    8888:	9e e8       	ldi	r25, 0x8E	; 142
    888a:	87 2f       	mov	r24, r23
    888c:	76 2f       	mov	r23, r22
    888e:	05 c0       	rjmp	.+10     	; 0x889a <__floatsisf+0x5e>
    8890:	66 23       	and	r22, r22
    8892:	71 f0       	breq	.+28     	; 0x88b0 <__floatsisf+0x74>
    8894:	96 e8       	ldi	r25, 0x86	; 134
    8896:	86 2f       	mov	r24, r22
    8898:	70 e0       	ldi	r23, 0x00	; 0
    889a:	60 e0       	ldi	r22, 0x00	; 0
    889c:	2a f0       	brmi	.+10     	; 0x88a8 <__floatsisf+0x6c>
    889e:	9a 95       	dec	r25
    88a0:	66 0f       	add	r22, r22
    88a2:	77 1f       	adc	r23, r23
    88a4:	88 1f       	adc	r24, r24
    88a6:	da f7       	brpl	.-10     	; 0x889e <__floatsisf+0x62>
    88a8:	88 0f       	add	r24, r24
    88aa:	96 95       	lsr	r25
    88ac:	87 95       	ror	r24
    88ae:	97 f9       	bld	r25, 7
    88b0:	08 95       	ret

000088b2 <__fp_cmp>:
    88b2:	99 0f       	add	r25, r25
    88b4:	00 08       	sbc	r0, r0
    88b6:	55 0f       	add	r21, r21
    88b8:	aa 0b       	sbc	r26, r26
    88ba:	e0 e8       	ldi	r30, 0x80	; 128
    88bc:	fe ef       	ldi	r31, 0xFE	; 254
    88be:	16 16       	cp	r1, r22
    88c0:	17 06       	cpc	r1, r23
    88c2:	e8 07       	cpc	r30, r24
    88c4:	f9 07       	cpc	r31, r25
    88c6:	c0 f0       	brcs	.+48     	; 0x88f8 <__fp_cmp+0x46>
    88c8:	12 16       	cp	r1, r18
    88ca:	13 06       	cpc	r1, r19
    88cc:	e4 07       	cpc	r30, r20
    88ce:	f5 07       	cpc	r31, r21
    88d0:	98 f0       	brcs	.+38     	; 0x88f8 <__fp_cmp+0x46>
    88d2:	62 1b       	sub	r22, r18
    88d4:	73 0b       	sbc	r23, r19
    88d6:	84 0b       	sbc	r24, r20
    88d8:	95 0b       	sbc	r25, r21
    88da:	39 f4       	brne	.+14     	; 0x88ea <__fp_cmp+0x38>
    88dc:	0a 26       	eor	r0, r26
    88de:	61 f0       	breq	.+24     	; 0x88f8 <__fp_cmp+0x46>
    88e0:	23 2b       	or	r18, r19
    88e2:	24 2b       	or	r18, r20
    88e4:	25 2b       	or	r18, r21
    88e6:	21 f4       	brne	.+8      	; 0x88f0 <__fp_cmp+0x3e>
    88e8:	08 95       	ret
    88ea:	0a 26       	eor	r0, r26
    88ec:	09 f4       	brne	.+2      	; 0x88f0 <__fp_cmp+0x3e>
    88ee:	a1 40       	sbci	r26, 0x01	; 1
    88f0:	a6 95       	lsr	r26
    88f2:	8f ef       	ldi	r24, 0xFF	; 255
    88f4:	81 1d       	adc	r24, r1
    88f6:	81 1d       	adc	r24, r1
    88f8:	08 95       	ret

000088fa <__fp_inf>:
    88fa:	97 f9       	bld	r25, 7
    88fc:	9f 67       	ori	r25, 0x7F	; 127
    88fe:	80 e8       	ldi	r24, 0x80	; 128
    8900:	70 e0       	ldi	r23, 0x00	; 0
    8902:	60 e0       	ldi	r22, 0x00	; 0
    8904:	08 95       	ret

00008906 <__fp_nan>:
    8906:	9f ef       	ldi	r25, 0xFF	; 255
    8908:	80 ec       	ldi	r24, 0xC0	; 192
    890a:	08 95       	ret

0000890c <__fp_pscA>:
    890c:	00 24       	eor	r0, r0
    890e:	0a 94       	dec	r0
    8910:	16 16       	cp	r1, r22
    8912:	17 06       	cpc	r1, r23
    8914:	18 06       	cpc	r1, r24
    8916:	09 06       	cpc	r0, r25
    8918:	08 95       	ret

0000891a <__fp_pscB>:
    891a:	00 24       	eor	r0, r0
    891c:	0a 94       	dec	r0
    891e:	12 16       	cp	r1, r18
    8920:	13 06       	cpc	r1, r19
    8922:	14 06       	cpc	r1, r20
    8924:	05 06       	cpc	r0, r21
    8926:	08 95       	ret

00008928 <__fp_round>:
    8928:	09 2e       	mov	r0, r25
    892a:	03 94       	inc	r0
    892c:	00 0c       	add	r0, r0
    892e:	11 f4       	brne	.+4      	; 0x8934 <__fp_round+0xc>
    8930:	88 23       	and	r24, r24
    8932:	52 f0       	brmi	.+20     	; 0x8948 <__fp_round+0x20>
    8934:	bb 0f       	add	r27, r27
    8936:	40 f4       	brcc	.+16     	; 0x8948 <__fp_round+0x20>
    8938:	bf 2b       	or	r27, r31
    893a:	11 f4       	brne	.+4      	; 0x8940 <__fp_round+0x18>
    893c:	60 ff       	sbrs	r22, 0
    893e:	04 c0       	rjmp	.+8      	; 0x8948 <__fp_round+0x20>
    8940:	6f 5f       	subi	r22, 0xFF	; 255
    8942:	7f 4f       	sbci	r23, 0xFF	; 255
    8944:	8f 4f       	sbci	r24, 0xFF	; 255
    8946:	9f 4f       	sbci	r25, 0xFF	; 255
    8948:	08 95       	ret

0000894a <__fp_split3>:
    894a:	57 fd       	sbrc	r21, 7
    894c:	90 58       	subi	r25, 0x80	; 128
    894e:	44 0f       	add	r20, r20
    8950:	55 1f       	adc	r21, r21
    8952:	59 f0       	breq	.+22     	; 0x896a <__fp_splitA+0x10>
    8954:	5f 3f       	cpi	r21, 0xFF	; 255
    8956:	71 f0       	breq	.+28     	; 0x8974 <__fp_splitA+0x1a>
    8958:	47 95       	ror	r20

0000895a <__fp_splitA>:
    895a:	88 0f       	add	r24, r24
    895c:	97 fb       	bst	r25, 7
    895e:	99 1f       	adc	r25, r25
    8960:	61 f0       	breq	.+24     	; 0x897a <__fp_splitA+0x20>
    8962:	9f 3f       	cpi	r25, 0xFF	; 255
    8964:	79 f0       	breq	.+30     	; 0x8984 <__fp_splitA+0x2a>
    8966:	87 95       	ror	r24
    8968:	08 95       	ret
    896a:	12 16       	cp	r1, r18
    896c:	13 06       	cpc	r1, r19
    896e:	14 06       	cpc	r1, r20
    8970:	55 1f       	adc	r21, r21
    8972:	f2 cf       	rjmp	.-28     	; 0x8958 <__fp_split3+0xe>
    8974:	46 95       	lsr	r20
    8976:	f1 df       	rcall	.-30     	; 0x895a <__fp_splitA>
    8978:	08 c0       	rjmp	.+16     	; 0x898a <__fp_splitA+0x30>
    897a:	16 16       	cp	r1, r22
    897c:	17 06       	cpc	r1, r23
    897e:	18 06       	cpc	r1, r24
    8980:	99 1f       	adc	r25, r25
    8982:	f1 cf       	rjmp	.-30     	; 0x8966 <__fp_splitA+0xc>
    8984:	86 95       	lsr	r24
    8986:	71 05       	cpc	r23, r1
    8988:	61 05       	cpc	r22, r1
    898a:	08 94       	sec
    898c:	08 95       	ret

0000898e <__fp_zero>:
    898e:	e8 94       	clt

00008990 <__fp_szero>:
    8990:	bb 27       	eor	r27, r27
    8992:	66 27       	eor	r22, r22
    8994:	77 27       	eor	r23, r23
    8996:	cb 01       	movw	r24, r22
    8998:	97 f9       	bld	r25, 7
    899a:	08 95       	ret

0000899c <__gesf2>:
    899c:	0e 94 59 44 	call	0x88b2	; 0x88b2 <__fp_cmp>
    89a0:	08 f4       	brcc	.+2      	; 0x89a4 <__gesf2+0x8>
    89a2:	8f ef       	ldi	r24, 0xFF	; 255
    89a4:	08 95       	ret

000089a6 <__mulsf3>:
    89a6:	0e 94 e6 44 	call	0x89cc	; 0x89cc <__mulsf3x>
    89aa:	0c 94 94 44 	jmp	0x8928	; 0x8928 <__fp_round>
    89ae:	0e 94 86 44 	call	0x890c	; 0x890c <__fp_pscA>
    89b2:	38 f0       	brcs	.+14     	; 0x89c2 <__mulsf3+0x1c>
    89b4:	0e 94 8d 44 	call	0x891a	; 0x891a <__fp_pscB>
    89b8:	20 f0       	brcs	.+8      	; 0x89c2 <__mulsf3+0x1c>
    89ba:	95 23       	and	r25, r21
    89bc:	11 f0       	breq	.+4      	; 0x89c2 <__mulsf3+0x1c>
    89be:	0c 94 7d 44 	jmp	0x88fa	; 0x88fa <__fp_inf>
    89c2:	0c 94 83 44 	jmp	0x8906	; 0x8906 <__fp_nan>
    89c6:	11 24       	eor	r1, r1
    89c8:	0c 94 c8 44 	jmp	0x8990	; 0x8990 <__fp_szero>

000089cc <__mulsf3x>:
    89cc:	0e 94 a5 44 	call	0x894a	; 0x894a <__fp_split3>
    89d0:	70 f3       	brcs	.-36     	; 0x89ae <__mulsf3+0x8>

000089d2 <__mulsf3_pse>:
    89d2:	95 9f       	mul	r25, r21
    89d4:	c1 f3       	breq	.-16     	; 0x89c6 <__mulsf3+0x20>
    89d6:	95 0f       	add	r25, r21
    89d8:	50 e0       	ldi	r21, 0x00	; 0
    89da:	55 1f       	adc	r21, r21
    89dc:	62 9f       	mul	r22, r18
    89de:	f0 01       	movw	r30, r0
    89e0:	72 9f       	mul	r23, r18
    89e2:	bb 27       	eor	r27, r27
    89e4:	f0 0d       	add	r31, r0
    89e6:	b1 1d       	adc	r27, r1
    89e8:	63 9f       	mul	r22, r19
    89ea:	aa 27       	eor	r26, r26
    89ec:	f0 0d       	add	r31, r0
    89ee:	b1 1d       	adc	r27, r1
    89f0:	aa 1f       	adc	r26, r26
    89f2:	64 9f       	mul	r22, r20
    89f4:	66 27       	eor	r22, r22
    89f6:	b0 0d       	add	r27, r0
    89f8:	a1 1d       	adc	r26, r1
    89fa:	66 1f       	adc	r22, r22
    89fc:	82 9f       	mul	r24, r18
    89fe:	22 27       	eor	r18, r18
    8a00:	b0 0d       	add	r27, r0
    8a02:	a1 1d       	adc	r26, r1
    8a04:	62 1f       	adc	r22, r18
    8a06:	73 9f       	mul	r23, r19
    8a08:	b0 0d       	add	r27, r0
    8a0a:	a1 1d       	adc	r26, r1
    8a0c:	62 1f       	adc	r22, r18
    8a0e:	83 9f       	mul	r24, r19
    8a10:	a0 0d       	add	r26, r0
    8a12:	61 1d       	adc	r22, r1
    8a14:	22 1f       	adc	r18, r18
    8a16:	74 9f       	mul	r23, r20
    8a18:	33 27       	eor	r19, r19
    8a1a:	a0 0d       	add	r26, r0
    8a1c:	61 1d       	adc	r22, r1
    8a1e:	23 1f       	adc	r18, r19
    8a20:	84 9f       	mul	r24, r20
    8a22:	60 0d       	add	r22, r0
    8a24:	21 1d       	adc	r18, r1
    8a26:	82 2f       	mov	r24, r18
    8a28:	76 2f       	mov	r23, r22
    8a2a:	6a 2f       	mov	r22, r26
    8a2c:	11 24       	eor	r1, r1
    8a2e:	9f 57       	subi	r25, 0x7F	; 127
    8a30:	50 40       	sbci	r21, 0x00	; 0
    8a32:	9a f0       	brmi	.+38     	; 0x8a5a <__mulsf3_pse+0x88>
    8a34:	f1 f0       	breq	.+60     	; 0x8a72 <__mulsf3_pse+0xa0>
    8a36:	88 23       	and	r24, r24
    8a38:	4a f0       	brmi	.+18     	; 0x8a4c <__mulsf3_pse+0x7a>
    8a3a:	ee 0f       	add	r30, r30
    8a3c:	ff 1f       	adc	r31, r31
    8a3e:	bb 1f       	adc	r27, r27
    8a40:	66 1f       	adc	r22, r22
    8a42:	77 1f       	adc	r23, r23
    8a44:	88 1f       	adc	r24, r24
    8a46:	91 50       	subi	r25, 0x01	; 1
    8a48:	50 40       	sbci	r21, 0x00	; 0
    8a4a:	a9 f7       	brne	.-22     	; 0x8a36 <__mulsf3_pse+0x64>
    8a4c:	9e 3f       	cpi	r25, 0xFE	; 254
    8a4e:	51 05       	cpc	r21, r1
    8a50:	80 f0       	brcs	.+32     	; 0x8a72 <__mulsf3_pse+0xa0>
    8a52:	0c 94 7d 44 	jmp	0x88fa	; 0x88fa <__fp_inf>
    8a56:	0c 94 c8 44 	jmp	0x8990	; 0x8990 <__fp_szero>
    8a5a:	5f 3f       	cpi	r21, 0xFF	; 255
    8a5c:	e4 f3       	brlt	.-8      	; 0x8a56 <__mulsf3_pse+0x84>
    8a5e:	98 3e       	cpi	r25, 0xE8	; 232
    8a60:	d4 f3       	brlt	.-12     	; 0x8a56 <__mulsf3_pse+0x84>
    8a62:	86 95       	lsr	r24
    8a64:	77 95       	ror	r23
    8a66:	67 95       	ror	r22
    8a68:	b7 95       	ror	r27
    8a6a:	f7 95       	ror	r31
    8a6c:	e7 95       	ror	r30
    8a6e:	9f 5f       	subi	r25, 0xFF	; 255
    8a70:	c1 f7       	brne	.-16     	; 0x8a62 <__mulsf3_pse+0x90>
    8a72:	fe 2b       	or	r31, r30
    8a74:	88 0f       	add	r24, r24
    8a76:	91 1d       	adc	r25, r1
    8a78:	96 95       	lsr	r25
    8a7a:	87 95       	ror	r24
    8a7c:	97 f9       	bld	r25, 7
    8a7e:	08 95       	ret

00008a80 <__mulsi3>:
    8a80:	db 01       	movw	r26, r22
    8a82:	8f 93       	push	r24
    8a84:	9f 93       	push	r25
    8a86:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <__muluhisi3>
    8a8a:	bf 91       	pop	r27
    8a8c:	af 91       	pop	r26
    8a8e:	a2 9f       	mul	r26, r18
    8a90:	80 0d       	add	r24, r0
    8a92:	91 1d       	adc	r25, r1
    8a94:	a3 9f       	mul	r26, r19
    8a96:	90 0d       	add	r25, r0
    8a98:	b2 9f       	mul	r27, r18
    8a9a:	90 0d       	add	r25, r0
    8a9c:	11 24       	eor	r1, r1
    8a9e:	08 95       	ret

00008aa0 <__udivmodhi4>:
    8aa0:	aa 1b       	sub	r26, r26
    8aa2:	bb 1b       	sub	r27, r27
    8aa4:	51 e1       	ldi	r21, 0x11	; 17
    8aa6:	07 c0       	rjmp	.+14     	; 0x8ab6 <__udivmodhi4_ep>

00008aa8 <__udivmodhi4_loop>:
    8aa8:	aa 1f       	adc	r26, r26
    8aaa:	bb 1f       	adc	r27, r27
    8aac:	a6 17       	cp	r26, r22
    8aae:	b7 07       	cpc	r27, r23
    8ab0:	10 f0       	brcs	.+4      	; 0x8ab6 <__udivmodhi4_ep>
    8ab2:	a6 1b       	sub	r26, r22
    8ab4:	b7 0b       	sbc	r27, r23

00008ab6 <__udivmodhi4_ep>:
    8ab6:	88 1f       	adc	r24, r24
    8ab8:	99 1f       	adc	r25, r25
    8aba:	5a 95       	dec	r21
    8abc:	a9 f7       	brne	.-22     	; 0x8aa8 <__udivmodhi4_loop>
    8abe:	80 95       	com	r24
    8ac0:	90 95       	com	r25
    8ac2:	bc 01       	movw	r22, r24
    8ac4:	cd 01       	movw	r24, r26
    8ac6:	08 95       	ret

00008ac8 <__divmodhi4>:
    8ac8:	97 fb       	bst	r25, 7
    8aca:	07 2e       	mov	r0, r23
    8acc:	16 f4       	brtc	.+4      	; 0x8ad2 <__divmodhi4+0xa>
    8ace:	00 94       	com	r0
    8ad0:	07 d0       	rcall	.+14     	; 0x8ae0 <__divmodhi4_neg1>
    8ad2:	77 fd       	sbrc	r23, 7
    8ad4:	09 d0       	rcall	.+18     	; 0x8ae8 <__divmodhi4_neg2>
    8ad6:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <__udivmodhi4>
    8ada:	07 fc       	sbrc	r0, 7
    8adc:	05 d0       	rcall	.+10     	; 0x8ae8 <__divmodhi4_neg2>
    8ade:	3e f4       	brtc	.+14     	; 0x8aee <__divmodhi4_exit>

00008ae0 <__divmodhi4_neg1>:
    8ae0:	90 95       	com	r25
    8ae2:	81 95       	neg	r24
    8ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ae6:	08 95       	ret

00008ae8 <__divmodhi4_neg2>:
    8ae8:	70 95       	com	r23
    8aea:	61 95       	neg	r22
    8aec:	7f 4f       	sbci	r23, 0xFF	; 255

00008aee <__divmodhi4_exit>:
    8aee:	08 95       	ret

00008af0 <__udivmodsi4>:
    8af0:	a1 e2       	ldi	r26, 0x21	; 33
    8af2:	1a 2e       	mov	r1, r26
    8af4:	aa 1b       	sub	r26, r26
    8af6:	bb 1b       	sub	r27, r27
    8af8:	fd 01       	movw	r30, r26
    8afa:	0d c0       	rjmp	.+26     	; 0x8b16 <__udivmodsi4_ep>

00008afc <__udivmodsi4_loop>:
    8afc:	aa 1f       	adc	r26, r26
    8afe:	bb 1f       	adc	r27, r27
    8b00:	ee 1f       	adc	r30, r30
    8b02:	ff 1f       	adc	r31, r31
    8b04:	a2 17       	cp	r26, r18
    8b06:	b3 07       	cpc	r27, r19
    8b08:	e4 07       	cpc	r30, r20
    8b0a:	f5 07       	cpc	r31, r21
    8b0c:	20 f0       	brcs	.+8      	; 0x8b16 <__udivmodsi4_ep>
    8b0e:	a2 1b       	sub	r26, r18
    8b10:	b3 0b       	sbc	r27, r19
    8b12:	e4 0b       	sbc	r30, r20
    8b14:	f5 0b       	sbc	r31, r21

00008b16 <__udivmodsi4_ep>:
    8b16:	66 1f       	adc	r22, r22
    8b18:	77 1f       	adc	r23, r23
    8b1a:	88 1f       	adc	r24, r24
    8b1c:	99 1f       	adc	r25, r25
    8b1e:	1a 94       	dec	r1
    8b20:	69 f7       	brne	.-38     	; 0x8afc <__udivmodsi4_loop>
    8b22:	60 95       	com	r22
    8b24:	70 95       	com	r23
    8b26:	80 95       	com	r24
    8b28:	90 95       	com	r25
    8b2a:	9b 01       	movw	r18, r22
    8b2c:	ac 01       	movw	r20, r24
    8b2e:	bd 01       	movw	r22, r26
    8b30:	cf 01       	movw	r24, r30
    8b32:	08 95       	ret

00008b34 <__divmodsi4>:
    8b34:	05 2e       	mov	r0, r21
    8b36:	97 fb       	bst	r25, 7
    8b38:	1e f4       	brtc	.+6      	; 0x8b40 <__divmodsi4+0xc>
    8b3a:	00 94       	com	r0
    8b3c:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__negsi2>
    8b40:	57 fd       	sbrc	r21, 7
    8b42:	07 d0       	rcall	.+14     	; 0x8b52 <__divmodsi4_neg2>
    8b44:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__udivmodsi4>
    8b48:	07 fc       	sbrc	r0, 7
    8b4a:	03 d0       	rcall	.+6      	; 0x8b52 <__divmodsi4_neg2>
    8b4c:	4e f4       	brtc	.+18     	; 0x8b60 <__divmodsi4_exit>
    8b4e:	0c 94 b1 45 	jmp	0x8b62	; 0x8b62 <__negsi2>

00008b52 <__divmodsi4_neg2>:
    8b52:	50 95       	com	r21
    8b54:	40 95       	com	r20
    8b56:	30 95       	com	r19
    8b58:	21 95       	neg	r18
    8b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    8b5c:	4f 4f       	sbci	r20, 0xFF	; 255
    8b5e:	5f 4f       	sbci	r21, 0xFF	; 255

00008b60 <__divmodsi4_exit>:
    8b60:	08 95       	ret

00008b62 <__negsi2>:
    8b62:	90 95       	com	r25
    8b64:	80 95       	com	r24
    8b66:	70 95       	com	r23
    8b68:	61 95       	neg	r22
    8b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    8b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    8b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    8b70:	08 95       	ret

00008b72 <__tablejump2__>:
    8b72:	ee 0f       	add	r30, r30
    8b74:	ff 1f       	adc	r31, r31
    8b76:	00 24       	eor	r0, r0
    8b78:	00 1c       	adc	r0, r0
    8b7a:	0b be       	out	0x3b, r0	; 59
    8b7c:	07 90       	elpm	r0, Z+
    8b7e:	f6 91       	elpm	r31, Z
    8b80:	e0 2d       	mov	r30, r0
    8b82:	09 94       	ijmp

00008b84 <__umulhisi3>:
    8b84:	a2 9f       	mul	r26, r18
    8b86:	b0 01       	movw	r22, r0
    8b88:	b3 9f       	mul	r27, r19
    8b8a:	c0 01       	movw	r24, r0
    8b8c:	a3 9f       	mul	r26, r19
    8b8e:	70 0d       	add	r23, r0
    8b90:	81 1d       	adc	r24, r1
    8b92:	11 24       	eor	r1, r1
    8b94:	91 1d       	adc	r25, r1
    8b96:	b2 9f       	mul	r27, r18
    8b98:	70 0d       	add	r23, r0
    8b9a:	81 1d       	adc	r24, r1
    8b9c:	11 24       	eor	r1, r1
    8b9e:	91 1d       	adc	r25, r1
    8ba0:	08 95       	ret

00008ba2 <__muluhisi3>:
    8ba2:	0e 94 c2 45 	call	0x8b84	; 0x8b84 <__umulhisi3>
    8ba6:	a5 9f       	mul	r26, r21
    8ba8:	90 0d       	add	r25, r0
    8baa:	b4 9f       	mul	r27, r20
    8bac:	90 0d       	add	r25, r0
    8bae:	a4 9f       	mul	r26, r20
    8bb0:	80 0d       	add	r24, r0
    8bb2:	91 1d       	adc	r25, r1
    8bb4:	11 24       	eor	r1, r1
    8bb6:	08 95       	ret

00008bb8 <malloc>:
    8bb8:	0f 93       	push	r16
    8bba:	1f 93       	push	r17
    8bbc:	cf 93       	push	r28
    8bbe:	df 93       	push	r29
    8bc0:	82 30       	cpi	r24, 0x02	; 2
    8bc2:	91 05       	cpc	r25, r1
    8bc4:	10 f4       	brcc	.+4      	; 0x8bca <malloc+0x12>
    8bc6:	82 e0       	ldi	r24, 0x02	; 2
    8bc8:	90 e0       	ldi	r25, 0x00	; 0
    8bca:	e0 91 2d 48 	lds	r30, 0x482D	; 0x80482d <__flp>
    8bce:	f0 91 2e 48 	lds	r31, 0x482E	; 0x80482e <__flp+0x1>
    8bd2:	20 e0       	ldi	r18, 0x00	; 0
    8bd4:	30 e0       	ldi	r19, 0x00	; 0
    8bd6:	a0 e0       	ldi	r26, 0x00	; 0
    8bd8:	b0 e0       	ldi	r27, 0x00	; 0
    8bda:	30 97       	sbiw	r30, 0x00	; 0
    8bdc:	19 f1       	breq	.+70     	; 0x8c24 <malloc+0x6c>
    8bde:	40 81       	ld	r20, Z
    8be0:	51 81       	ldd	r21, Z+1	; 0x01
    8be2:	02 81       	ldd	r16, Z+2	; 0x02
    8be4:	13 81       	ldd	r17, Z+3	; 0x03
    8be6:	48 17       	cp	r20, r24
    8be8:	59 07       	cpc	r21, r25
    8bea:	c8 f0       	brcs	.+50     	; 0x8c1e <malloc+0x66>
    8bec:	84 17       	cp	r24, r20
    8bee:	95 07       	cpc	r25, r21
    8bf0:	69 f4       	brne	.+26     	; 0x8c0c <malloc+0x54>
    8bf2:	10 97       	sbiw	r26, 0x00	; 0
    8bf4:	31 f0       	breq	.+12     	; 0x8c02 <malloc+0x4a>
    8bf6:	12 96       	adiw	r26, 0x02	; 2
    8bf8:	0c 93       	st	X, r16
    8bfa:	12 97       	sbiw	r26, 0x02	; 2
    8bfc:	13 96       	adiw	r26, 0x03	; 3
    8bfe:	1c 93       	st	X, r17
    8c00:	27 c0       	rjmp	.+78     	; 0x8c50 <malloc+0x98>
    8c02:	00 93 2d 48 	sts	0x482D, r16	; 0x80482d <__flp>
    8c06:	10 93 2e 48 	sts	0x482E, r17	; 0x80482e <__flp+0x1>
    8c0a:	22 c0       	rjmp	.+68     	; 0x8c50 <malloc+0x98>
    8c0c:	21 15       	cp	r18, r1
    8c0e:	31 05       	cpc	r19, r1
    8c10:	19 f0       	breq	.+6      	; 0x8c18 <malloc+0x60>
    8c12:	42 17       	cp	r20, r18
    8c14:	53 07       	cpc	r21, r19
    8c16:	18 f4       	brcc	.+6      	; 0x8c1e <malloc+0x66>
    8c18:	9a 01       	movw	r18, r20
    8c1a:	bd 01       	movw	r22, r26
    8c1c:	ef 01       	movw	r28, r30
    8c1e:	df 01       	movw	r26, r30
    8c20:	f8 01       	movw	r30, r16
    8c22:	db cf       	rjmp	.-74     	; 0x8bda <malloc+0x22>
    8c24:	21 15       	cp	r18, r1
    8c26:	31 05       	cpc	r19, r1
    8c28:	f9 f0       	breq	.+62     	; 0x8c68 <malloc+0xb0>
    8c2a:	28 1b       	sub	r18, r24
    8c2c:	39 0b       	sbc	r19, r25
    8c2e:	24 30       	cpi	r18, 0x04	; 4
    8c30:	31 05       	cpc	r19, r1
    8c32:	80 f4       	brcc	.+32     	; 0x8c54 <malloc+0x9c>
    8c34:	8a 81       	ldd	r24, Y+2	; 0x02
    8c36:	9b 81       	ldd	r25, Y+3	; 0x03
    8c38:	61 15       	cp	r22, r1
    8c3a:	71 05       	cpc	r23, r1
    8c3c:	21 f0       	breq	.+8      	; 0x8c46 <malloc+0x8e>
    8c3e:	fb 01       	movw	r30, r22
    8c40:	82 83       	std	Z+2, r24	; 0x02
    8c42:	93 83       	std	Z+3, r25	; 0x03
    8c44:	04 c0       	rjmp	.+8      	; 0x8c4e <malloc+0x96>
    8c46:	80 93 2d 48 	sts	0x482D, r24	; 0x80482d <__flp>
    8c4a:	90 93 2e 48 	sts	0x482E, r25	; 0x80482e <__flp+0x1>
    8c4e:	fe 01       	movw	r30, r28
    8c50:	32 96       	adiw	r30, 0x02	; 2
    8c52:	44 c0       	rjmp	.+136    	; 0x8cdc <malloc+0x124>
    8c54:	fe 01       	movw	r30, r28
    8c56:	e2 0f       	add	r30, r18
    8c58:	f3 1f       	adc	r31, r19
    8c5a:	81 93       	st	Z+, r24
    8c5c:	91 93       	st	Z+, r25
    8c5e:	22 50       	subi	r18, 0x02	; 2
    8c60:	31 09       	sbc	r19, r1
    8c62:	28 83       	st	Y, r18
    8c64:	39 83       	std	Y+1, r19	; 0x01
    8c66:	3a c0       	rjmp	.+116    	; 0x8cdc <malloc+0x124>
    8c68:	20 91 2b 48 	lds	r18, 0x482B	; 0x80482b <__brkval>
    8c6c:	30 91 2c 48 	lds	r19, 0x482C	; 0x80482c <__brkval+0x1>
    8c70:	23 2b       	or	r18, r19
    8c72:	41 f4       	brne	.+16     	; 0x8c84 <malloc+0xcc>
    8c74:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    8c78:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    8c7c:	20 93 2b 48 	sts	0x482B, r18	; 0x80482b <__brkval>
    8c80:	30 93 2c 48 	sts	0x482C, r19	; 0x80482c <__brkval+0x1>
    8c84:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    8c88:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    8c8c:	21 15       	cp	r18, r1
    8c8e:	31 05       	cpc	r19, r1
    8c90:	41 f4       	brne	.+16     	; 0x8ca2 <malloc+0xea>
    8c92:	2d b7       	in	r18, 0x3d	; 61
    8c94:	3e b7       	in	r19, 0x3e	; 62
    8c96:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    8c9a:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    8c9e:	24 1b       	sub	r18, r20
    8ca0:	35 0b       	sbc	r19, r21
    8ca2:	e0 91 2b 48 	lds	r30, 0x482B	; 0x80482b <__brkval>
    8ca6:	f0 91 2c 48 	lds	r31, 0x482C	; 0x80482c <__brkval+0x1>
    8caa:	e2 17       	cp	r30, r18
    8cac:	f3 07       	cpc	r31, r19
    8cae:	a0 f4       	brcc	.+40     	; 0x8cd8 <malloc+0x120>
    8cb0:	2e 1b       	sub	r18, r30
    8cb2:	3f 0b       	sbc	r19, r31
    8cb4:	28 17       	cp	r18, r24
    8cb6:	39 07       	cpc	r19, r25
    8cb8:	78 f0       	brcs	.+30     	; 0x8cd8 <malloc+0x120>
    8cba:	ac 01       	movw	r20, r24
    8cbc:	4e 5f       	subi	r20, 0xFE	; 254
    8cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    8cc0:	24 17       	cp	r18, r20
    8cc2:	35 07       	cpc	r19, r21
    8cc4:	48 f0       	brcs	.+18     	; 0x8cd8 <malloc+0x120>
    8cc6:	4e 0f       	add	r20, r30
    8cc8:	5f 1f       	adc	r21, r31
    8cca:	40 93 2b 48 	sts	0x482B, r20	; 0x80482b <__brkval>
    8cce:	50 93 2c 48 	sts	0x482C, r21	; 0x80482c <__brkval+0x1>
    8cd2:	81 93       	st	Z+, r24
    8cd4:	91 93       	st	Z+, r25
    8cd6:	02 c0       	rjmp	.+4      	; 0x8cdc <malloc+0x124>
    8cd8:	e0 e0       	ldi	r30, 0x00	; 0
    8cda:	f0 e0       	ldi	r31, 0x00	; 0
    8cdc:	cf 01       	movw	r24, r30
    8cde:	df 91       	pop	r29
    8ce0:	cf 91       	pop	r28
    8ce2:	1f 91       	pop	r17
    8ce4:	0f 91       	pop	r16
    8ce6:	08 95       	ret

00008ce8 <free>:
    8ce8:	cf 93       	push	r28
    8cea:	df 93       	push	r29
    8cec:	00 97       	sbiw	r24, 0x00	; 0
    8cee:	09 f4       	brne	.+2      	; 0x8cf2 <free+0xa>
    8cf0:	81 c0       	rjmp	.+258    	; 0x8df4 <free+0x10c>
    8cf2:	fc 01       	movw	r30, r24
    8cf4:	32 97       	sbiw	r30, 0x02	; 2
    8cf6:	12 82       	std	Z+2, r1	; 0x02
    8cf8:	13 82       	std	Z+3, r1	; 0x03
    8cfa:	a0 91 2d 48 	lds	r26, 0x482D	; 0x80482d <__flp>
    8cfe:	b0 91 2e 48 	lds	r27, 0x482E	; 0x80482e <__flp+0x1>
    8d02:	10 97       	sbiw	r26, 0x00	; 0
    8d04:	81 f4       	brne	.+32     	; 0x8d26 <free+0x3e>
    8d06:	20 81       	ld	r18, Z
    8d08:	31 81       	ldd	r19, Z+1	; 0x01
    8d0a:	82 0f       	add	r24, r18
    8d0c:	93 1f       	adc	r25, r19
    8d0e:	20 91 2b 48 	lds	r18, 0x482B	; 0x80482b <__brkval>
    8d12:	30 91 2c 48 	lds	r19, 0x482C	; 0x80482c <__brkval+0x1>
    8d16:	28 17       	cp	r18, r24
    8d18:	39 07       	cpc	r19, r25
    8d1a:	51 f5       	brne	.+84     	; 0x8d70 <free+0x88>
    8d1c:	e0 93 2b 48 	sts	0x482B, r30	; 0x80482b <__brkval>
    8d20:	f0 93 2c 48 	sts	0x482C, r31	; 0x80482c <__brkval+0x1>
    8d24:	67 c0       	rjmp	.+206    	; 0x8df4 <free+0x10c>
    8d26:	ed 01       	movw	r28, r26
    8d28:	20 e0       	ldi	r18, 0x00	; 0
    8d2a:	30 e0       	ldi	r19, 0x00	; 0
    8d2c:	ce 17       	cp	r28, r30
    8d2e:	df 07       	cpc	r29, r31
    8d30:	40 f4       	brcc	.+16     	; 0x8d42 <free+0x5a>
    8d32:	4a 81       	ldd	r20, Y+2	; 0x02
    8d34:	5b 81       	ldd	r21, Y+3	; 0x03
    8d36:	9e 01       	movw	r18, r28
    8d38:	41 15       	cp	r20, r1
    8d3a:	51 05       	cpc	r21, r1
    8d3c:	f1 f0       	breq	.+60     	; 0x8d7a <free+0x92>
    8d3e:	ea 01       	movw	r28, r20
    8d40:	f5 cf       	rjmp	.-22     	; 0x8d2c <free+0x44>
    8d42:	c2 83       	std	Z+2, r28	; 0x02
    8d44:	d3 83       	std	Z+3, r29	; 0x03
    8d46:	40 81       	ld	r20, Z
    8d48:	51 81       	ldd	r21, Z+1	; 0x01
    8d4a:	84 0f       	add	r24, r20
    8d4c:	95 1f       	adc	r25, r21
    8d4e:	c8 17       	cp	r28, r24
    8d50:	d9 07       	cpc	r29, r25
    8d52:	59 f4       	brne	.+22     	; 0x8d6a <free+0x82>
    8d54:	88 81       	ld	r24, Y
    8d56:	99 81       	ldd	r25, Y+1	; 0x01
    8d58:	84 0f       	add	r24, r20
    8d5a:	95 1f       	adc	r25, r21
    8d5c:	02 96       	adiw	r24, 0x02	; 2
    8d5e:	80 83       	st	Z, r24
    8d60:	91 83       	std	Z+1, r25	; 0x01
    8d62:	8a 81       	ldd	r24, Y+2	; 0x02
    8d64:	9b 81       	ldd	r25, Y+3	; 0x03
    8d66:	82 83       	std	Z+2, r24	; 0x02
    8d68:	93 83       	std	Z+3, r25	; 0x03
    8d6a:	21 15       	cp	r18, r1
    8d6c:	31 05       	cpc	r19, r1
    8d6e:	29 f4       	brne	.+10     	; 0x8d7a <free+0x92>
    8d70:	e0 93 2d 48 	sts	0x482D, r30	; 0x80482d <__flp>
    8d74:	f0 93 2e 48 	sts	0x482E, r31	; 0x80482e <__flp+0x1>
    8d78:	3d c0       	rjmp	.+122    	; 0x8df4 <free+0x10c>
    8d7a:	e9 01       	movw	r28, r18
    8d7c:	ea 83       	std	Y+2, r30	; 0x02
    8d7e:	fb 83       	std	Y+3, r31	; 0x03
    8d80:	49 91       	ld	r20, Y+
    8d82:	59 91       	ld	r21, Y+
    8d84:	c4 0f       	add	r28, r20
    8d86:	d5 1f       	adc	r29, r21
    8d88:	ec 17       	cp	r30, r28
    8d8a:	fd 07       	cpc	r31, r29
    8d8c:	61 f4       	brne	.+24     	; 0x8da6 <free+0xbe>
    8d8e:	80 81       	ld	r24, Z
    8d90:	91 81       	ldd	r25, Z+1	; 0x01
    8d92:	84 0f       	add	r24, r20
    8d94:	95 1f       	adc	r25, r21
    8d96:	02 96       	adiw	r24, 0x02	; 2
    8d98:	e9 01       	movw	r28, r18
    8d9a:	88 83       	st	Y, r24
    8d9c:	99 83       	std	Y+1, r25	; 0x01
    8d9e:	82 81       	ldd	r24, Z+2	; 0x02
    8da0:	93 81       	ldd	r25, Z+3	; 0x03
    8da2:	8a 83       	std	Y+2, r24	; 0x02
    8da4:	9b 83       	std	Y+3, r25	; 0x03
    8da6:	e0 e0       	ldi	r30, 0x00	; 0
    8da8:	f0 e0       	ldi	r31, 0x00	; 0
    8daa:	12 96       	adiw	r26, 0x02	; 2
    8dac:	8d 91       	ld	r24, X+
    8dae:	9c 91       	ld	r25, X
    8db0:	13 97       	sbiw	r26, 0x03	; 3
    8db2:	00 97       	sbiw	r24, 0x00	; 0
    8db4:	19 f0       	breq	.+6      	; 0x8dbc <free+0xd4>
    8db6:	fd 01       	movw	r30, r26
    8db8:	dc 01       	movw	r26, r24
    8dba:	f7 cf       	rjmp	.-18     	; 0x8daa <free+0xc2>
    8dbc:	8d 91       	ld	r24, X+
    8dbe:	9c 91       	ld	r25, X
    8dc0:	11 97       	sbiw	r26, 0x01	; 1
    8dc2:	9d 01       	movw	r18, r26
    8dc4:	2e 5f       	subi	r18, 0xFE	; 254
    8dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    8dc8:	82 0f       	add	r24, r18
    8dca:	93 1f       	adc	r25, r19
    8dcc:	20 91 2b 48 	lds	r18, 0x482B	; 0x80482b <__brkval>
    8dd0:	30 91 2c 48 	lds	r19, 0x482C	; 0x80482c <__brkval+0x1>
    8dd4:	28 17       	cp	r18, r24
    8dd6:	39 07       	cpc	r19, r25
    8dd8:	69 f4       	brne	.+26     	; 0x8df4 <free+0x10c>
    8dda:	30 97       	sbiw	r30, 0x00	; 0
    8ddc:	29 f4       	brne	.+10     	; 0x8de8 <free+0x100>
    8dde:	10 92 2d 48 	sts	0x482D, r1	; 0x80482d <__flp>
    8de2:	10 92 2e 48 	sts	0x482E, r1	; 0x80482e <__flp+0x1>
    8de6:	02 c0       	rjmp	.+4      	; 0x8dec <free+0x104>
    8de8:	12 82       	std	Z+2, r1	; 0x02
    8dea:	13 82       	std	Z+3, r1	; 0x03
    8dec:	a0 93 2b 48 	sts	0x482B, r26	; 0x80482b <__brkval>
    8df0:	b0 93 2c 48 	sts	0x482C, r27	; 0x80482c <__brkval+0x1>
    8df4:	df 91       	pop	r29
    8df6:	cf 91       	pop	r28
    8df8:	08 95       	ret

00008dfa <toupper>:
    8dfa:	91 11       	cpse	r25, r1
    8dfc:	08 95       	ret
    8dfe:	81 56       	subi	r24, 0x61	; 97
    8e00:	8a 51       	subi	r24, 0x1A	; 26
    8e02:	08 f4       	brcc	.+2      	; 0x8e06 <toupper+0xc>
    8e04:	80 52       	subi	r24, 0x20	; 32
    8e06:	85 58       	subi	r24, 0x85	; 133
    8e08:	08 95       	ret

00008e0a <memset>:
    8e0a:	dc 01       	movw	r26, r24
    8e0c:	01 c0       	rjmp	.+2      	; 0x8e10 <memset+0x6>
    8e0e:	6d 93       	st	X+, r22
    8e10:	41 50       	subi	r20, 0x01	; 1
    8e12:	50 40       	sbci	r21, 0x00	; 0
    8e14:	e0 f7       	brcc	.-8      	; 0x8e0e <memset+0x4>
    8e16:	08 95       	ret

00008e18 <strlen>:
    8e18:	fc 01       	movw	r30, r24
    8e1a:	01 90       	ld	r0, Z+
    8e1c:	00 20       	and	r0, r0
    8e1e:	e9 f7       	brne	.-6      	; 0x8e1a <strlen+0x2>
    8e20:	80 95       	com	r24
    8e22:	90 95       	com	r25
    8e24:	8e 0f       	add	r24, r30
    8e26:	9f 1f       	adc	r25, r31
    8e28:	08 95       	ret

00008e2a <strncpy>:
    8e2a:	fb 01       	movw	r30, r22
    8e2c:	dc 01       	movw	r26, r24
    8e2e:	41 50       	subi	r20, 0x01	; 1
    8e30:	50 40       	sbci	r21, 0x00	; 0
    8e32:	48 f0       	brcs	.+18     	; 0x8e46 <strncpy+0x1c>
    8e34:	01 90       	ld	r0, Z+
    8e36:	0d 92       	st	X+, r0
    8e38:	00 20       	and	r0, r0
    8e3a:	c9 f7       	brne	.-14     	; 0x8e2e <strncpy+0x4>
    8e3c:	01 c0       	rjmp	.+2      	; 0x8e40 <strncpy+0x16>
    8e3e:	1d 92       	st	X+, r1
    8e40:	41 50       	subi	r20, 0x01	; 1
    8e42:	50 40       	sbci	r21, 0x00	; 0
    8e44:	e0 f7       	brcc	.-8      	; 0x8e3e <strncpy+0x14>
    8e46:	08 95       	ret

00008e48 <sprintf>:
    8e48:	0f 93       	push	r16
    8e4a:	1f 93       	push	r17
    8e4c:	cf 93       	push	r28
    8e4e:	df 93       	push	r29
    8e50:	cd b7       	in	r28, 0x3d	; 61
    8e52:	de b7       	in	r29, 0x3e	; 62
    8e54:	2e 97       	sbiw	r28, 0x0e	; 14
    8e56:	cd bf       	out	0x3d, r28	; 61
    8e58:	de bf       	out	0x3e, r29	; 62
    8e5a:	0d 89       	ldd	r16, Y+21	; 0x15
    8e5c:	1e 89       	ldd	r17, Y+22	; 0x16
    8e5e:	86 e0       	ldi	r24, 0x06	; 6
    8e60:	8c 83       	std	Y+4, r24	; 0x04
    8e62:	09 83       	std	Y+1, r16	; 0x01
    8e64:	1a 83       	std	Y+2, r17	; 0x02
    8e66:	8f ef       	ldi	r24, 0xFF	; 255
    8e68:	9f e7       	ldi	r25, 0x7F	; 127
    8e6a:	8d 83       	std	Y+5, r24	; 0x05
    8e6c:	9e 83       	std	Y+6, r25	; 0x06
    8e6e:	ae 01       	movw	r20, r28
    8e70:	47 5e       	subi	r20, 0xE7	; 231
    8e72:	5f 4f       	sbci	r21, 0xFF	; 255
    8e74:	6f 89       	ldd	r22, Y+23	; 0x17
    8e76:	78 8d       	ldd	r23, Y+24	; 0x18
    8e78:	ce 01       	movw	r24, r28
    8e7a:	01 96       	adiw	r24, 0x01	; 1
    8e7c:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <vfprintf>
    8e80:	ef 81       	ldd	r30, Y+7	; 0x07
    8e82:	f8 85       	ldd	r31, Y+8	; 0x08
    8e84:	e0 0f       	add	r30, r16
    8e86:	f1 1f       	adc	r31, r17
    8e88:	10 82       	st	Z, r1
    8e8a:	2e 96       	adiw	r28, 0x0e	; 14
    8e8c:	cd bf       	out	0x3d, r28	; 61
    8e8e:	de bf       	out	0x3e, r29	; 62
    8e90:	df 91       	pop	r29
    8e92:	cf 91       	pop	r28
    8e94:	1f 91       	pop	r17
    8e96:	0f 91       	pop	r16
    8e98:	08 95       	ret

00008e9a <vfprintf>:
    8e9a:	2f 92       	push	r2
    8e9c:	3f 92       	push	r3
    8e9e:	4f 92       	push	r4
    8ea0:	5f 92       	push	r5
    8ea2:	6f 92       	push	r6
    8ea4:	7f 92       	push	r7
    8ea6:	8f 92       	push	r8
    8ea8:	9f 92       	push	r9
    8eaa:	af 92       	push	r10
    8eac:	bf 92       	push	r11
    8eae:	cf 92       	push	r12
    8eb0:	df 92       	push	r13
    8eb2:	ef 92       	push	r14
    8eb4:	ff 92       	push	r15
    8eb6:	0f 93       	push	r16
    8eb8:	1f 93       	push	r17
    8eba:	cf 93       	push	r28
    8ebc:	df 93       	push	r29
    8ebe:	cd b7       	in	r28, 0x3d	; 61
    8ec0:	de b7       	in	r29, 0x3e	; 62
    8ec2:	2b 97       	sbiw	r28, 0x0b	; 11
    8ec4:	cd bf       	out	0x3d, r28	; 61
    8ec6:	de bf       	out	0x3e, r29	; 62
    8ec8:	6c 01       	movw	r12, r24
    8eca:	7b 01       	movw	r14, r22
    8ecc:	8a 01       	movw	r16, r20
    8ece:	fc 01       	movw	r30, r24
    8ed0:	16 82       	std	Z+6, r1	; 0x06
    8ed2:	17 82       	std	Z+7, r1	; 0x07
    8ed4:	83 81       	ldd	r24, Z+3	; 0x03
    8ed6:	81 ff       	sbrs	r24, 1
    8ed8:	cc c1       	rjmp	.+920    	; 0x9272 <vfprintf+0x3d8>
    8eda:	ce 01       	movw	r24, r28
    8edc:	01 96       	adiw	r24, 0x01	; 1
    8ede:	3c 01       	movw	r6, r24
    8ee0:	f6 01       	movw	r30, r12
    8ee2:	93 81       	ldd	r25, Z+3	; 0x03
    8ee4:	f7 01       	movw	r30, r14
    8ee6:	93 fd       	sbrc	r25, 3
    8ee8:	85 91       	lpm	r24, Z+
    8eea:	93 ff       	sbrs	r25, 3
    8eec:	81 91       	ld	r24, Z+
    8eee:	7f 01       	movw	r14, r30
    8ef0:	88 23       	and	r24, r24
    8ef2:	09 f4       	brne	.+2      	; 0x8ef6 <vfprintf+0x5c>
    8ef4:	ba c1       	rjmp	.+884    	; 0x926a <vfprintf+0x3d0>
    8ef6:	85 32       	cpi	r24, 0x25	; 37
    8ef8:	39 f4       	brne	.+14     	; 0x8f08 <vfprintf+0x6e>
    8efa:	93 fd       	sbrc	r25, 3
    8efc:	85 91       	lpm	r24, Z+
    8efe:	93 ff       	sbrs	r25, 3
    8f00:	81 91       	ld	r24, Z+
    8f02:	7f 01       	movw	r14, r30
    8f04:	85 32       	cpi	r24, 0x25	; 37
    8f06:	29 f4       	brne	.+10     	; 0x8f12 <vfprintf+0x78>
    8f08:	b6 01       	movw	r22, r12
    8f0a:	90 e0       	ldi	r25, 0x00	; 0
    8f0c:	0e 94 67 49 	call	0x92ce	; 0x92ce <fputc>
    8f10:	e7 cf       	rjmp	.-50     	; 0x8ee0 <vfprintf+0x46>
    8f12:	91 2c       	mov	r9, r1
    8f14:	21 2c       	mov	r2, r1
    8f16:	31 2c       	mov	r3, r1
    8f18:	ff e1       	ldi	r31, 0x1F	; 31
    8f1a:	f3 15       	cp	r31, r3
    8f1c:	d8 f0       	brcs	.+54     	; 0x8f54 <vfprintf+0xba>
    8f1e:	8b 32       	cpi	r24, 0x2B	; 43
    8f20:	79 f0       	breq	.+30     	; 0x8f40 <vfprintf+0xa6>
    8f22:	38 f4       	brcc	.+14     	; 0x8f32 <vfprintf+0x98>
    8f24:	80 32       	cpi	r24, 0x20	; 32
    8f26:	79 f0       	breq	.+30     	; 0x8f46 <vfprintf+0xac>
    8f28:	83 32       	cpi	r24, 0x23	; 35
    8f2a:	a1 f4       	brne	.+40     	; 0x8f54 <vfprintf+0xba>
    8f2c:	23 2d       	mov	r18, r3
    8f2e:	20 61       	ori	r18, 0x10	; 16
    8f30:	1d c0       	rjmp	.+58     	; 0x8f6c <vfprintf+0xd2>
    8f32:	8d 32       	cpi	r24, 0x2D	; 45
    8f34:	61 f0       	breq	.+24     	; 0x8f4e <vfprintf+0xb4>
    8f36:	80 33       	cpi	r24, 0x30	; 48
    8f38:	69 f4       	brne	.+26     	; 0x8f54 <vfprintf+0xba>
    8f3a:	23 2d       	mov	r18, r3
    8f3c:	21 60       	ori	r18, 0x01	; 1
    8f3e:	16 c0       	rjmp	.+44     	; 0x8f6c <vfprintf+0xd2>
    8f40:	83 2d       	mov	r24, r3
    8f42:	82 60       	ori	r24, 0x02	; 2
    8f44:	38 2e       	mov	r3, r24
    8f46:	e3 2d       	mov	r30, r3
    8f48:	e4 60       	ori	r30, 0x04	; 4
    8f4a:	3e 2e       	mov	r3, r30
    8f4c:	2a c0       	rjmp	.+84     	; 0x8fa2 <vfprintf+0x108>
    8f4e:	f3 2d       	mov	r31, r3
    8f50:	f8 60       	ori	r31, 0x08	; 8
    8f52:	1d c0       	rjmp	.+58     	; 0x8f8e <vfprintf+0xf4>
    8f54:	37 fc       	sbrc	r3, 7
    8f56:	2d c0       	rjmp	.+90     	; 0x8fb2 <vfprintf+0x118>
    8f58:	20 ed       	ldi	r18, 0xD0	; 208
    8f5a:	28 0f       	add	r18, r24
    8f5c:	2a 30       	cpi	r18, 0x0A	; 10
    8f5e:	40 f0       	brcs	.+16     	; 0x8f70 <vfprintf+0xd6>
    8f60:	8e 32       	cpi	r24, 0x2E	; 46
    8f62:	b9 f4       	brne	.+46     	; 0x8f92 <vfprintf+0xf8>
    8f64:	36 fc       	sbrc	r3, 6
    8f66:	81 c1       	rjmp	.+770    	; 0x926a <vfprintf+0x3d0>
    8f68:	23 2d       	mov	r18, r3
    8f6a:	20 64       	ori	r18, 0x40	; 64
    8f6c:	32 2e       	mov	r3, r18
    8f6e:	19 c0       	rjmp	.+50     	; 0x8fa2 <vfprintf+0x108>
    8f70:	36 fe       	sbrs	r3, 6
    8f72:	06 c0       	rjmp	.+12     	; 0x8f80 <vfprintf+0xe6>
    8f74:	8a e0       	ldi	r24, 0x0A	; 10
    8f76:	98 9e       	mul	r9, r24
    8f78:	20 0d       	add	r18, r0
    8f7a:	11 24       	eor	r1, r1
    8f7c:	92 2e       	mov	r9, r18
    8f7e:	11 c0       	rjmp	.+34     	; 0x8fa2 <vfprintf+0x108>
    8f80:	ea e0       	ldi	r30, 0x0A	; 10
    8f82:	2e 9e       	mul	r2, r30
    8f84:	20 0d       	add	r18, r0
    8f86:	11 24       	eor	r1, r1
    8f88:	22 2e       	mov	r2, r18
    8f8a:	f3 2d       	mov	r31, r3
    8f8c:	f0 62       	ori	r31, 0x20	; 32
    8f8e:	3f 2e       	mov	r3, r31
    8f90:	08 c0       	rjmp	.+16     	; 0x8fa2 <vfprintf+0x108>
    8f92:	8c 36       	cpi	r24, 0x6C	; 108
    8f94:	21 f4       	brne	.+8      	; 0x8f9e <vfprintf+0x104>
    8f96:	83 2d       	mov	r24, r3
    8f98:	80 68       	ori	r24, 0x80	; 128
    8f9a:	38 2e       	mov	r3, r24
    8f9c:	02 c0       	rjmp	.+4      	; 0x8fa2 <vfprintf+0x108>
    8f9e:	88 36       	cpi	r24, 0x68	; 104
    8fa0:	41 f4       	brne	.+16     	; 0x8fb2 <vfprintf+0x118>
    8fa2:	f7 01       	movw	r30, r14
    8fa4:	93 fd       	sbrc	r25, 3
    8fa6:	85 91       	lpm	r24, Z+
    8fa8:	93 ff       	sbrs	r25, 3
    8faa:	81 91       	ld	r24, Z+
    8fac:	7f 01       	movw	r14, r30
    8fae:	81 11       	cpse	r24, r1
    8fb0:	b3 cf       	rjmp	.-154    	; 0x8f18 <vfprintf+0x7e>
    8fb2:	98 2f       	mov	r25, r24
    8fb4:	9f 7d       	andi	r25, 0xDF	; 223
    8fb6:	95 54       	subi	r25, 0x45	; 69
    8fb8:	93 30       	cpi	r25, 0x03	; 3
    8fba:	28 f4       	brcc	.+10     	; 0x8fc6 <vfprintf+0x12c>
    8fbc:	0c 5f       	subi	r16, 0xFC	; 252
    8fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    8fc0:	9f e3       	ldi	r25, 0x3F	; 63
    8fc2:	99 83       	std	Y+1, r25	; 0x01
    8fc4:	0d c0       	rjmp	.+26     	; 0x8fe0 <vfprintf+0x146>
    8fc6:	83 36       	cpi	r24, 0x63	; 99
    8fc8:	31 f0       	breq	.+12     	; 0x8fd6 <vfprintf+0x13c>
    8fca:	83 37       	cpi	r24, 0x73	; 115
    8fcc:	71 f0       	breq	.+28     	; 0x8fea <vfprintf+0x150>
    8fce:	83 35       	cpi	r24, 0x53	; 83
    8fd0:	09 f0       	breq	.+2      	; 0x8fd4 <vfprintf+0x13a>
    8fd2:	59 c0       	rjmp	.+178    	; 0x9086 <vfprintf+0x1ec>
    8fd4:	21 c0       	rjmp	.+66     	; 0x9018 <vfprintf+0x17e>
    8fd6:	f8 01       	movw	r30, r16
    8fd8:	80 81       	ld	r24, Z
    8fda:	89 83       	std	Y+1, r24	; 0x01
    8fdc:	0e 5f       	subi	r16, 0xFE	; 254
    8fde:	1f 4f       	sbci	r17, 0xFF	; 255
    8fe0:	88 24       	eor	r8, r8
    8fe2:	83 94       	inc	r8
    8fe4:	91 2c       	mov	r9, r1
    8fe6:	53 01       	movw	r10, r6
    8fe8:	13 c0       	rjmp	.+38     	; 0x9010 <vfprintf+0x176>
    8fea:	28 01       	movw	r4, r16
    8fec:	f2 e0       	ldi	r31, 0x02	; 2
    8fee:	4f 0e       	add	r4, r31
    8ff0:	51 1c       	adc	r5, r1
    8ff2:	f8 01       	movw	r30, r16
    8ff4:	a0 80       	ld	r10, Z
    8ff6:	b1 80       	ldd	r11, Z+1	; 0x01
    8ff8:	36 fe       	sbrs	r3, 6
    8ffa:	03 c0       	rjmp	.+6      	; 0x9002 <vfprintf+0x168>
    8ffc:	69 2d       	mov	r22, r9
    8ffe:	70 e0       	ldi	r23, 0x00	; 0
    9000:	02 c0       	rjmp	.+4      	; 0x9006 <vfprintf+0x16c>
    9002:	6f ef       	ldi	r22, 0xFF	; 255
    9004:	7f ef       	ldi	r23, 0xFF	; 255
    9006:	c5 01       	movw	r24, r10
    9008:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <strnlen>
    900c:	4c 01       	movw	r8, r24
    900e:	82 01       	movw	r16, r4
    9010:	f3 2d       	mov	r31, r3
    9012:	ff 77       	andi	r31, 0x7F	; 127
    9014:	3f 2e       	mov	r3, r31
    9016:	16 c0       	rjmp	.+44     	; 0x9044 <vfprintf+0x1aa>
    9018:	28 01       	movw	r4, r16
    901a:	22 e0       	ldi	r18, 0x02	; 2
    901c:	42 0e       	add	r4, r18
    901e:	51 1c       	adc	r5, r1
    9020:	f8 01       	movw	r30, r16
    9022:	a0 80       	ld	r10, Z
    9024:	b1 80       	ldd	r11, Z+1	; 0x01
    9026:	36 fe       	sbrs	r3, 6
    9028:	03 c0       	rjmp	.+6      	; 0x9030 <vfprintf+0x196>
    902a:	69 2d       	mov	r22, r9
    902c:	70 e0       	ldi	r23, 0x00	; 0
    902e:	02 c0       	rjmp	.+4      	; 0x9034 <vfprintf+0x19a>
    9030:	6f ef       	ldi	r22, 0xFF	; 255
    9032:	7f ef       	ldi	r23, 0xFF	; 255
    9034:	c5 01       	movw	r24, r10
    9036:	0e 94 51 49 	call	0x92a2	; 0x92a2 <strnlen_P>
    903a:	4c 01       	movw	r8, r24
    903c:	f3 2d       	mov	r31, r3
    903e:	f0 68       	ori	r31, 0x80	; 128
    9040:	3f 2e       	mov	r3, r31
    9042:	82 01       	movw	r16, r4
    9044:	33 fc       	sbrc	r3, 3
    9046:	1b c0       	rjmp	.+54     	; 0x907e <vfprintf+0x1e4>
    9048:	82 2d       	mov	r24, r2
    904a:	90 e0       	ldi	r25, 0x00	; 0
    904c:	88 16       	cp	r8, r24
    904e:	99 06       	cpc	r9, r25
    9050:	b0 f4       	brcc	.+44     	; 0x907e <vfprintf+0x1e4>
    9052:	b6 01       	movw	r22, r12
    9054:	80 e2       	ldi	r24, 0x20	; 32
    9056:	90 e0       	ldi	r25, 0x00	; 0
    9058:	0e 94 67 49 	call	0x92ce	; 0x92ce <fputc>
    905c:	2a 94       	dec	r2
    905e:	f4 cf       	rjmp	.-24     	; 0x9048 <vfprintf+0x1ae>
    9060:	f5 01       	movw	r30, r10
    9062:	37 fc       	sbrc	r3, 7
    9064:	85 91       	lpm	r24, Z+
    9066:	37 fe       	sbrs	r3, 7
    9068:	81 91       	ld	r24, Z+
    906a:	5f 01       	movw	r10, r30
    906c:	b6 01       	movw	r22, r12
    906e:	90 e0       	ldi	r25, 0x00	; 0
    9070:	0e 94 67 49 	call	0x92ce	; 0x92ce <fputc>
    9074:	21 10       	cpse	r2, r1
    9076:	2a 94       	dec	r2
    9078:	21 e0       	ldi	r18, 0x01	; 1
    907a:	82 1a       	sub	r8, r18
    907c:	91 08       	sbc	r9, r1
    907e:	81 14       	cp	r8, r1
    9080:	91 04       	cpc	r9, r1
    9082:	71 f7       	brne	.-36     	; 0x9060 <vfprintf+0x1c6>
    9084:	e8 c0       	rjmp	.+464    	; 0x9256 <vfprintf+0x3bc>
    9086:	84 36       	cpi	r24, 0x64	; 100
    9088:	11 f0       	breq	.+4      	; 0x908e <vfprintf+0x1f4>
    908a:	89 36       	cpi	r24, 0x69	; 105
    908c:	41 f5       	brne	.+80     	; 0x90de <vfprintf+0x244>
    908e:	f8 01       	movw	r30, r16
    9090:	37 fe       	sbrs	r3, 7
    9092:	07 c0       	rjmp	.+14     	; 0x90a2 <vfprintf+0x208>
    9094:	60 81       	ld	r22, Z
    9096:	71 81       	ldd	r23, Z+1	; 0x01
    9098:	82 81       	ldd	r24, Z+2	; 0x02
    909a:	93 81       	ldd	r25, Z+3	; 0x03
    909c:	0c 5f       	subi	r16, 0xFC	; 252
    909e:	1f 4f       	sbci	r17, 0xFF	; 255
    90a0:	08 c0       	rjmp	.+16     	; 0x90b2 <vfprintf+0x218>
    90a2:	60 81       	ld	r22, Z
    90a4:	71 81       	ldd	r23, Z+1	; 0x01
    90a6:	07 2e       	mov	r0, r23
    90a8:	00 0c       	add	r0, r0
    90aa:	88 0b       	sbc	r24, r24
    90ac:	99 0b       	sbc	r25, r25
    90ae:	0e 5f       	subi	r16, 0xFE	; 254
    90b0:	1f 4f       	sbci	r17, 0xFF	; 255
    90b2:	f3 2d       	mov	r31, r3
    90b4:	ff 76       	andi	r31, 0x6F	; 111
    90b6:	3f 2e       	mov	r3, r31
    90b8:	97 ff       	sbrs	r25, 7
    90ba:	09 c0       	rjmp	.+18     	; 0x90ce <vfprintf+0x234>
    90bc:	90 95       	com	r25
    90be:	80 95       	com	r24
    90c0:	70 95       	com	r23
    90c2:	61 95       	neg	r22
    90c4:	7f 4f       	sbci	r23, 0xFF	; 255
    90c6:	8f 4f       	sbci	r24, 0xFF	; 255
    90c8:	9f 4f       	sbci	r25, 0xFF	; 255
    90ca:	f0 68       	ori	r31, 0x80	; 128
    90cc:	3f 2e       	mov	r3, r31
    90ce:	2a e0       	ldi	r18, 0x0A	; 10
    90d0:	30 e0       	ldi	r19, 0x00	; 0
    90d2:	a3 01       	movw	r20, r6
    90d4:	0e 94 a3 49 	call	0x9346	; 0x9346 <__ultoa_invert>
    90d8:	88 2e       	mov	r8, r24
    90da:	86 18       	sub	r8, r6
    90dc:	45 c0       	rjmp	.+138    	; 0x9168 <vfprintf+0x2ce>
    90de:	85 37       	cpi	r24, 0x75	; 117
    90e0:	31 f4       	brne	.+12     	; 0x90ee <vfprintf+0x254>
    90e2:	23 2d       	mov	r18, r3
    90e4:	2f 7e       	andi	r18, 0xEF	; 239
    90e6:	b2 2e       	mov	r11, r18
    90e8:	2a e0       	ldi	r18, 0x0A	; 10
    90ea:	30 e0       	ldi	r19, 0x00	; 0
    90ec:	25 c0       	rjmp	.+74     	; 0x9138 <vfprintf+0x29e>
    90ee:	93 2d       	mov	r25, r3
    90f0:	99 7f       	andi	r25, 0xF9	; 249
    90f2:	b9 2e       	mov	r11, r25
    90f4:	8f 36       	cpi	r24, 0x6F	; 111
    90f6:	c1 f0       	breq	.+48     	; 0x9128 <vfprintf+0x28e>
    90f8:	18 f4       	brcc	.+6      	; 0x9100 <vfprintf+0x266>
    90fa:	88 35       	cpi	r24, 0x58	; 88
    90fc:	79 f0       	breq	.+30     	; 0x911c <vfprintf+0x282>
    90fe:	b5 c0       	rjmp	.+362    	; 0x926a <vfprintf+0x3d0>
    9100:	80 37       	cpi	r24, 0x70	; 112
    9102:	19 f0       	breq	.+6      	; 0x910a <vfprintf+0x270>
    9104:	88 37       	cpi	r24, 0x78	; 120
    9106:	21 f0       	breq	.+8      	; 0x9110 <vfprintf+0x276>
    9108:	b0 c0       	rjmp	.+352    	; 0x926a <vfprintf+0x3d0>
    910a:	e9 2f       	mov	r30, r25
    910c:	e0 61       	ori	r30, 0x10	; 16
    910e:	be 2e       	mov	r11, r30
    9110:	b4 fe       	sbrs	r11, 4
    9112:	0d c0       	rjmp	.+26     	; 0x912e <vfprintf+0x294>
    9114:	fb 2d       	mov	r31, r11
    9116:	f4 60       	ori	r31, 0x04	; 4
    9118:	bf 2e       	mov	r11, r31
    911a:	09 c0       	rjmp	.+18     	; 0x912e <vfprintf+0x294>
    911c:	34 fe       	sbrs	r3, 4
    911e:	0a c0       	rjmp	.+20     	; 0x9134 <vfprintf+0x29a>
    9120:	29 2f       	mov	r18, r25
    9122:	26 60       	ori	r18, 0x06	; 6
    9124:	b2 2e       	mov	r11, r18
    9126:	06 c0       	rjmp	.+12     	; 0x9134 <vfprintf+0x29a>
    9128:	28 e0       	ldi	r18, 0x08	; 8
    912a:	30 e0       	ldi	r19, 0x00	; 0
    912c:	05 c0       	rjmp	.+10     	; 0x9138 <vfprintf+0x29e>
    912e:	20 e1       	ldi	r18, 0x10	; 16
    9130:	30 e0       	ldi	r19, 0x00	; 0
    9132:	02 c0       	rjmp	.+4      	; 0x9138 <vfprintf+0x29e>
    9134:	20 e1       	ldi	r18, 0x10	; 16
    9136:	32 e0       	ldi	r19, 0x02	; 2
    9138:	f8 01       	movw	r30, r16
    913a:	b7 fe       	sbrs	r11, 7
    913c:	07 c0       	rjmp	.+14     	; 0x914c <vfprintf+0x2b2>
    913e:	60 81       	ld	r22, Z
    9140:	71 81       	ldd	r23, Z+1	; 0x01
    9142:	82 81       	ldd	r24, Z+2	; 0x02
    9144:	93 81       	ldd	r25, Z+3	; 0x03
    9146:	0c 5f       	subi	r16, 0xFC	; 252
    9148:	1f 4f       	sbci	r17, 0xFF	; 255
    914a:	06 c0       	rjmp	.+12     	; 0x9158 <vfprintf+0x2be>
    914c:	60 81       	ld	r22, Z
    914e:	71 81       	ldd	r23, Z+1	; 0x01
    9150:	80 e0       	ldi	r24, 0x00	; 0
    9152:	90 e0       	ldi	r25, 0x00	; 0
    9154:	0e 5f       	subi	r16, 0xFE	; 254
    9156:	1f 4f       	sbci	r17, 0xFF	; 255
    9158:	a3 01       	movw	r20, r6
    915a:	0e 94 a3 49 	call	0x9346	; 0x9346 <__ultoa_invert>
    915e:	88 2e       	mov	r8, r24
    9160:	86 18       	sub	r8, r6
    9162:	fb 2d       	mov	r31, r11
    9164:	ff 77       	andi	r31, 0x7F	; 127
    9166:	3f 2e       	mov	r3, r31
    9168:	36 fe       	sbrs	r3, 6
    916a:	0d c0       	rjmp	.+26     	; 0x9186 <vfprintf+0x2ec>
    916c:	23 2d       	mov	r18, r3
    916e:	2e 7f       	andi	r18, 0xFE	; 254
    9170:	a2 2e       	mov	r10, r18
    9172:	89 14       	cp	r8, r9
    9174:	58 f4       	brcc	.+22     	; 0x918c <vfprintf+0x2f2>
    9176:	34 fe       	sbrs	r3, 4
    9178:	0b c0       	rjmp	.+22     	; 0x9190 <vfprintf+0x2f6>
    917a:	32 fc       	sbrc	r3, 2
    917c:	09 c0       	rjmp	.+18     	; 0x9190 <vfprintf+0x2f6>
    917e:	83 2d       	mov	r24, r3
    9180:	8e 7e       	andi	r24, 0xEE	; 238
    9182:	a8 2e       	mov	r10, r24
    9184:	05 c0       	rjmp	.+10     	; 0x9190 <vfprintf+0x2f6>
    9186:	b8 2c       	mov	r11, r8
    9188:	a3 2c       	mov	r10, r3
    918a:	03 c0       	rjmp	.+6      	; 0x9192 <vfprintf+0x2f8>
    918c:	b8 2c       	mov	r11, r8
    918e:	01 c0       	rjmp	.+2      	; 0x9192 <vfprintf+0x2f8>
    9190:	b9 2c       	mov	r11, r9
    9192:	a4 fe       	sbrs	r10, 4
    9194:	0f c0       	rjmp	.+30     	; 0x91b4 <vfprintf+0x31a>
    9196:	fe 01       	movw	r30, r28
    9198:	e8 0d       	add	r30, r8
    919a:	f1 1d       	adc	r31, r1
    919c:	80 81       	ld	r24, Z
    919e:	80 33       	cpi	r24, 0x30	; 48
    91a0:	21 f4       	brne	.+8      	; 0x91aa <vfprintf+0x310>
    91a2:	9a 2d       	mov	r25, r10
    91a4:	99 7e       	andi	r25, 0xE9	; 233
    91a6:	a9 2e       	mov	r10, r25
    91a8:	09 c0       	rjmp	.+18     	; 0x91bc <vfprintf+0x322>
    91aa:	a2 fe       	sbrs	r10, 2
    91ac:	06 c0       	rjmp	.+12     	; 0x91ba <vfprintf+0x320>
    91ae:	b3 94       	inc	r11
    91b0:	b3 94       	inc	r11
    91b2:	04 c0       	rjmp	.+8      	; 0x91bc <vfprintf+0x322>
    91b4:	8a 2d       	mov	r24, r10
    91b6:	86 78       	andi	r24, 0x86	; 134
    91b8:	09 f0       	breq	.+2      	; 0x91bc <vfprintf+0x322>
    91ba:	b3 94       	inc	r11
    91bc:	a3 fc       	sbrc	r10, 3
    91be:	11 c0       	rjmp	.+34     	; 0x91e2 <vfprintf+0x348>
    91c0:	a0 fe       	sbrs	r10, 0
    91c2:	06 c0       	rjmp	.+12     	; 0x91d0 <vfprintf+0x336>
    91c4:	b2 14       	cp	r11, r2
    91c6:	88 f4       	brcc	.+34     	; 0x91ea <vfprintf+0x350>
    91c8:	28 0c       	add	r2, r8
    91ca:	92 2c       	mov	r9, r2
    91cc:	9b 18       	sub	r9, r11
    91ce:	0e c0       	rjmp	.+28     	; 0x91ec <vfprintf+0x352>
    91d0:	b2 14       	cp	r11, r2
    91d2:	60 f4       	brcc	.+24     	; 0x91ec <vfprintf+0x352>
    91d4:	b6 01       	movw	r22, r12
    91d6:	80 e2       	ldi	r24, 0x20	; 32
    91d8:	90 e0       	ldi	r25, 0x00	; 0
    91da:	0e 94 67 49 	call	0x92ce	; 0x92ce <fputc>
    91de:	b3 94       	inc	r11
    91e0:	f7 cf       	rjmp	.-18     	; 0x91d0 <vfprintf+0x336>
    91e2:	b2 14       	cp	r11, r2
    91e4:	18 f4       	brcc	.+6      	; 0x91ec <vfprintf+0x352>
    91e6:	2b 18       	sub	r2, r11
    91e8:	02 c0       	rjmp	.+4      	; 0x91ee <vfprintf+0x354>
    91ea:	98 2c       	mov	r9, r8
    91ec:	21 2c       	mov	r2, r1
    91ee:	a4 fe       	sbrs	r10, 4
    91f0:	10 c0       	rjmp	.+32     	; 0x9212 <vfprintf+0x378>
    91f2:	b6 01       	movw	r22, r12
    91f4:	80 e3       	ldi	r24, 0x30	; 48
    91f6:	90 e0       	ldi	r25, 0x00	; 0
    91f8:	0e 94 67 49 	call	0x92ce	; 0x92ce <fputc>
    91fc:	a2 fe       	sbrs	r10, 2
    91fe:	17 c0       	rjmp	.+46     	; 0x922e <vfprintf+0x394>
    9200:	a1 fc       	sbrc	r10, 1
    9202:	03 c0       	rjmp	.+6      	; 0x920a <vfprintf+0x370>
    9204:	88 e7       	ldi	r24, 0x78	; 120
    9206:	90 e0       	ldi	r25, 0x00	; 0
    9208:	02 c0       	rjmp	.+4      	; 0x920e <vfprintf+0x374>
    920a:	88 e5       	ldi	r24, 0x58	; 88
    920c:	90 e0       	ldi	r25, 0x00	; 0
    920e:	b6 01       	movw	r22, r12
    9210:	0c c0       	rjmp	.+24     	; 0x922a <vfprintf+0x390>
    9212:	8a 2d       	mov	r24, r10
    9214:	86 78       	andi	r24, 0x86	; 134
    9216:	59 f0       	breq	.+22     	; 0x922e <vfprintf+0x394>
    9218:	a1 fe       	sbrs	r10, 1
    921a:	02 c0       	rjmp	.+4      	; 0x9220 <vfprintf+0x386>
    921c:	8b e2       	ldi	r24, 0x2B	; 43
    921e:	01 c0       	rjmp	.+2      	; 0x9222 <vfprintf+0x388>
    9220:	80 e2       	ldi	r24, 0x20	; 32
    9222:	a7 fc       	sbrc	r10, 7
    9224:	8d e2       	ldi	r24, 0x2D	; 45
    9226:	b6 01       	movw	r22, r12
    9228:	90 e0       	ldi	r25, 0x00	; 0
    922a:	0e 94 67 49 	call	0x92ce	; 0x92ce <fputc>
    922e:	89 14       	cp	r8, r9
    9230:	38 f4       	brcc	.+14     	; 0x9240 <vfprintf+0x3a6>
    9232:	b6 01       	movw	r22, r12
    9234:	80 e3       	ldi	r24, 0x30	; 48
    9236:	90 e0       	ldi	r25, 0x00	; 0
    9238:	0e 94 67 49 	call	0x92ce	; 0x92ce <fputc>
    923c:	9a 94       	dec	r9
    923e:	f7 cf       	rjmp	.-18     	; 0x922e <vfprintf+0x394>
    9240:	8a 94       	dec	r8
    9242:	f3 01       	movw	r30, r6
    9244:	e8 0d       	add	r30, r8
    9246:	f1 1d       	adc	r31, r1
    9248:	80 81       	ld	r24, Z
    924a:	b6 01       	movw	r22, r12
    924c:	90 e0       	ldi	r25, 0x00	; 0
    924e:	0e 94 67 49 	call	0x92ce	; 0x92ce <fputc>
    9252:	81 10       	cpse	r8, r1
    9254:	f5 cf       	rjmp	.-22     	; 0x9240 <vfprintf+0x3a6>
    9256:	22 20       	and	r2, r2
    9258:	09 f4       	brne	.+2      	; 0x925c <vfprintf+0x3c2>
    925a:	42 ce       	rjmp	.-892    	; 0x8ee0 <vfprintf+0x46>
    925c:	b6 01       	movw	r22, r12
    925e:	80 e2       	ldi	r24, 0x20	; 32
    9260:	90 e0       	ldi	r25, 0x00	; 0
    9262:	0e 94 67 49 	call	0x92ce	; 0x92ce <fputc>
    9266:	2a 94       	dec	r2
    9268:	f6 cf       	rjmp	.-20     	; 0x9256 <vfprintf+0x3bc>
    926a:	f6 01       	movw	r30, r12
    926c:	86 81       	ldd	r24, Z+6	; 0x06
    926e:	97 81       	ldd	r25, Z+7	; 0x07
    9270:	02 c0       	rjmp	.+4      	; 0x9276 <vfprintf+0x3dc>
    9272:	8f ef       	ldi	r24, 0xFF	; 255
    9274:	9f ef       	ldi	r25, 0xFF	; 255
    9276:	2b 96       	adiw	r28, 0x0b	; 11
    9278:	cd bf       	out	0x3d, r28	; 61
    927a:	de bf       	out	0x3e, r29	; 62
    927c:	df 91       	pop	r29
    927e:	cf 91       	pop	r28
    9280:	1f 91       	pop	r17
    9282:	0f 91       	pop	r16
    9284:	ff 90       	pop	r15
    9286:	ef 90       	pop	r14
    9288:	df 90       	pop	r13
    928a:	cf 90       	pop	r12
    928c:	bf 90       	pop	r11
    928e:	af 90       	pop	r10
    9290:	9f 90       	pop	r9
    9292:	8f 90       	pop	r8
    9294:	7f 90       	pop	r7
    9296:	6f 90       	pop	r6
    9298:	5f 90       	pop	r5
    929a:	4f 90       	pop	r4
    929c:	3f 90       	pop	r3
    929e:	2f 90       	pop	r2
    92a0:	08 95       	ret

000092a2 <strnlen_P>:
    92a2:	fc 01       	movw	r30, r24
    92a4:	05 90       	lpm	r0, Z+
    92a6:	61 50       	subi	r22, 0x01	; 1
    92a8:	70 40       	sbci	r23, 0x00	; 0
    92aa:	01 10       	cpse	r0, r1
    92ac:	d8 f7       	brcc	.-10     	; 0x92a4 <strnlen_P+0x2>
    92ae:	80 95       	com	r24
    92b0:	90 95       	com	r25
    92b2:	8e 0f       	add	r24, r30
    92b4:	9f 1f       	adc	r25, r31
    92b6:	08 95       	ret

000092b8 <strnlen>:
    92b8:	fc 01       	movw	r30, r24
    92ba:	61 50       	subi	r22, 0x01	; 1
    92bc:	70 40       	sbci	r23, 0x00	; 0
    92be:	01 90       	ld	r0, Z+
    92c0:	01 10       	cpse	r0, r1
    92c2:	d8 f7       	brcc	.-10     	; 0x92ba <strnlen+0x2>
    92c4:	80 95       	com	r24
    92c6:	90 95       	com	r25
    92c8:	8e 0f       	add	r24, r30
    92ca:	9f 1f       	adc	r25, r31
    92cc:	08 95       	ret

000092ce <fputc>:
    92ce:	0f 93       	push	r16
    92d0:	1f 93       	push	r17
    92d2:	cf 93       	push	r28
    92d4:	df 93       	push	r29
    92d6:	fb 01       	movw	r30, r22
    92d8:	23 81       	ldd	r18, Z+3	; 0x03
    92da:	21 fd       	sbrc	r18, 1
    92dc:	03 c0       	rjmp	.+6      	; 0x92e4 <fputc+0x16>
    92de:	8f ef       	ldi	r24, 0xFF	; 255
    92e0:	9f ef       	ldi	r25, 0xFF	; 255
    92e2:	2c c0       	rjmp	.+88     	; 0x933c <fputc+0x6e>
    92e4:	22 ff       	sbrs	r18, 2
    92e6:	16 c0       	rjmp	.+44     	; 0x9314 <fputc+0x46>
    92e8:	46 81       	ldd	r20, Z+6	; 0x06
    92ea:	57 81       	ldd	r21, Z+7	; 0x07
    92ec:	24 81       	ldd	r18, Z+4	; 0x04
    92ee:	35 81       	ldd	r19, Z+5	; 0x05
    92f0:	42 17       	cp	r20, r18
    92f2:	53 07       	cpc	r21, r19
    92f4:	44 f4       	brge	.+16     	; 0x9306 <fputc+0x38>
    92f6:	a0 81       	ld	r26, Z
    92f8:	b1 81       	ldd	r27, Z+1	; 0x01
    92fa:	9d 01       	movw	r18, r26
    92fc:	2f 5f       	subi	r18, 0xFF	; 255
    92fe:	3f 4f       	sbci	r19, 0xFF	; 255
    9300:	20 83       	st	Z, r18
    9302:	31 83       	std	Z+1, r19	; 0x01
    9304:	8c 93       	st	X, r24
    9306:	26 81       	ldd	r18, Z+6	; 0x06
    9308:	37 81       	ldd	r19, Z+7	; 0x07
    930a:	2f 5f       	subi	r18, 0xFF	; 255
    930c:	3f 4f       	sbci	r19, 0xFF	; 255
    930e:	26 83       	std	Z+6, r18	; 0x06
    9310:	37 83       	std	Z+7, r19	; 0x07
    9312:	14 c0       	rjmp	.+40     	; 0x933c <fputc+0x6e>
    9314:	8b 01       	movw	r16, r22
    9316:	ec 01       	movw	r28, r24
    9318:	fb 01       	movw	r30, r22
    931a:	00 84       	ldd	r0, Z+8	; 0x08
    931c:	f1 85       	ldd	r31, Z+9	; 0x09
    931e:	e0 2d       	mov	r30, r0
    9320:	09 95       	icall
    9322:	89 2b       	or	r24, r25
    9324:	e1 f6       	brne	.-72     	; 0x92de <fputc+0x10>
    9326:	d8 01       	movw	r26, r16
    9328:	16 96       	adiw	r26, 0x06	; 6
    932a:	8d 91       	ld	r24, X+
    932c:	9c 91       	ld	r25, X
    932e:	17 97       	sbiw	r26, 0x07	; 7
    9330:	01 96       	adiw	r24, 0x01	; 1
    9332:	16 96       	adiw	r26, 0x06	; 6
    9334:	8d 93       	st	X+, r24
    9336:	9c 93       	st	X, r25
    9338:	17 97       	sbiw	r26, 0x07	; 7
    933a:	ce 01       	movw	r24, r28
    933c:	df 91       	pop	r29
    933e:	cf 91       	pop	r28
    9340:	1f 91       	pop	r17
    9342:	0f 91       	pop	r16
    9344:	08 95       	ret

00009346 <__ultoa_invert>:
    9346:	fa 01       	movw	r30, r20
    9348:	aa 27       	eor	r26, r26
    934a:	28 30       	cpi	r18, 0x08	; 8
    934c:	51 f1       	breq	.+84     	; 0x93a2 <__ultoa_invert+0x5c>
    934e:	20 31       	cpi	r18, 0x10	; 16
    9350:	81 f1       	breq	.+96     	; 0x93b2 <__ultoa_invert+0x6c>
    9352:	e8 94       	clt
    9354:	6f 93       	push	r22
    9356:	6e 7f       	andi	r22, 0xFE	; 254
    9358:	6e 5f       	subi	r22, 0xFE	; 254
    935a:	7f 4f       	sbci	r23, 0xFF	; 255
    935c:	8f 4f       	sbci	r24, 0xFF	; 255
    935e:	9f 4f       	sbci	r25, 0xFF	; 255
    9360:	af 4f       	sbci	r26, 0xFF	; 255
    9362:	b1 e0       	ldi	r27, 0x01	; 1
    9364:	3e d0       	rcall	.+124    	; 0x93e2 <__ultoa_invert+0x9c>
    9366:	b4 e0       	ldi	r27, 0x04	; 4
    9368:	3c d0       	rcall	.+120    	; 0x93e2 <__ultoa_invert+0x9c>
    936a:	67 0f       	add	r22, r23
    936c:	78 1f       	adc	r23, r24
    936e:	89 1f       	adc	r24, r25
    9370:	9a 1f       	adc	r25, r26
    9372:	a1 1d       	adc	r26, r1
    9374:	68 0f       	add	r22, r24
    9376:	79 1f       	adc	r23, r25
    9378:	8a 1f       	adc	r24, r26
    937a:	91 1d       	adc	r25, r1
    937c:	a1 1d       	adc	r26, r1
    937e:	6a 0f       	add	r22, r26
    9380:	71 1d       	adc	r23, r1
    9382:	81 1d       	adc	r24, r1
    9384:	91 1d       	adc	r25, r1
    9386:	a1 1d       	adc	r26, r1
    9388:	20 d0       	rcall	.+64     	; 0x93ca <__ultoa_invert+0x84>
    938a:	09 f4       	brne	.+2      	; 0x938e <__ultoa_invert+0x48>
    938c:	68 94       	set
    938e:	3f 91       	pop	r19
    9390:	2a e0       	ldi	r18, 0x0A	; 10
    9392:	26 9f       	mul	r18, r22
    9394:	11 24       	eor	r1, r1
    9396:	30 19       	sub	r19, r0
    9398:	30 5d       	subi	r19, 0xD0	; 208
    939a:	31 93       	st	Z+, r19
    939c:	de f6       	brtc	.-74     	; 0x9354 <__ultoa_invert+0xe>
    939e:	cf 01       	movw	r24, r30
    93a0:	08 95       	ret
    93a2:	46 2f       	mov	r20, r22
    93a4:	47 70       	andi	r20, 0x07	; 7
    93a6:	40 5d       	subi	r20, 0xD0	; 208
    93a8:	41 93       	st	Z+, r20
    93aa:	b3 e0       	ldi	r27, 0x03	; 3
    93ac:	0f d0       	rcall	.+30     	; 0x93cc <__ultoa_invert+0x86>
    93ae:	c9 f7       	brne	.-14     	; 0x93a2 <__ultoa_invert+0x5c>
    93b0:	f6 cf       	rjmp	.-20     	; 0x939e <__ultoa_invert+0x58>
    93b2:	46 2f       	mov	r20, r22
    93b4:	4f 70       	andi	r20, 0x0F	; 15
    93b6:	40 5d       	subi	r20, 0xD0	; 208
    93b8:	4a 33       	cpi	r20, 0x3A	; 58
    93ba:	18 f0       	brcs	.+6      	; 0x93c2 <__ultoa_invert+0x7c>
    93bc:	49 5d       	subi	r20, 0xD9	; 217
    93be:	31 fd       	sbrc	r19, 1
    93c0:	40 52       	subi	r20, 0x20	; 32
    93c2:	41 93       	st	Z+, r20
    93c4:	02 d0       	rcall	.+4      	; 0x93ca <__ultoa_invert+0x84>
    93c6:	a9 f7       	brne	.-22     	; 0x93b2 <__ultoa_invert+0x6c>
    93c8:	ea cf       	rjmp	.-44     	; 0x939e <__ultoa_invert+0x58>
    93ca:	b4 e0       	ldi	r27, 0x04	; 4
    93cc:	a6 95       	lsr	r26
    93ce:	97 95       	ror	r25
    93d0:	87 95       	ror	r24
    93d2:	77 95       	ror	r23
    93d4:	67 95       	ror	r22
    93d6:	ba 95       	dec	r27
    93d8:	c9 f7       	brne	.-14     	; 0x93cc <__ultoa_invert+0x86>
    93da:	00 97       	sbiw	r24, 0x00	; 0
    93dc:	61 05       	cpc	r22, r1
    93de:	71 05       	cpc	r23, r1
    93e0:	08 95       	ret
    93e2:	9b 01       	movw	r18, r22
    93e4:	ac 01       	movw	r20, r24
    93e6:	0a 2e       	mov	r0, r26
    93e8:	06 94       	lsr	r0
    93ea:	57 95       	ror	r21
    93ec:	47 95       	ror	r20
    93ee:	37 95       	ror	r19
    93f0:	27 95       	ror	r18
    93f2:	ba 95       	dec	r27
    93f4:	c9 f7       	brne	.-14     	; 0x93e8 <__ultoa_invert+0xa2>
    93f6:	62 0f       	add	r22, r18
    93f8:	73 1f       	adc	r23, r19
    93fa:	84 1f       	adc	r24, r20
    93fc:	95 1f       	adc	r25, r21
    93fe:	a0 1d       	adc	r26, r0
    9400:	08 95       	ret

00009402 <eeprom_read_byte>:
    9402:	03 d0       	rcall	.+6      	; 0x940a <eeprom_mapen>
    9404:	80 81       	ld	r24, Z
    9406:	99 27       	eor	r25, r25
    9408:	08 95       	ret

0000940a <eeprom_mapen>:
    940a:	fc 01       	movw	r30, r24
    940c:	e0 50       	subi	r30, 0x00	; 0
    940e:	fc 4e       	sbci	r31, 0xEC	; 236
    9410:	08 95       	ret

00009412 <eeprom_read_dword>:
    9412:	0e 94 05 4a 	call	0x940a	; 0x940a <eeprom_mapen>
    9416:	60 81       	ld	r22, Z
    9418:	71 81       	ldd	r23, Z+1	; 0x01
    941a:	82 81       	ldd	r24, Z+2	; 0x02
    941c:	93 81       	ldd	r25, Z+3	; 0x03
    941e:	08 95       	ret

00009420 <eeprom_read_word>:
    9420:	0e 94 05 4a 	call	0x940a	; 0x940a <eeprom_mapen>
    9424:	80 81       	ld	r24, Z
    9426:	91 81       	ldd	r25, Z+1	; 0x01
    9428:	08 95       	ret

0000942a <__do_global_dtors>:
    942a:	11 e0       	ldi	r17, 0x01	; 1
    942c:	c6 e1       	ldi	r28, 0x16	; 22
    942e:	d1 e0       	ldi	r29, 0x01	; 1
    9430:	04 c0       	rjmp	.+8      	; 0x943a <__do_global_dtors+0x10>
    9432:	fe 01       	movw	r30, r28
    9434:	0e 94 b9 45 	call	0x8b72	; 0x8b72 <__tablejump2__>
    9438:	21 96       	adiw	r28, 0x01	; 1
    943a:	c8 31       	cpi	r28, 0x18	; 24
    943c:	d1 07       	cpc	r29, r17
    943e:	c9 f7       	brne	.-14     	; 0x9432 <__do_global_dtors+0x8>
    9440:	f8 94       	cli

00009442 <__stop_program>:
    9442:	ff cf       	rjmp	.-2      	; 0x9442 <__stop_program>
