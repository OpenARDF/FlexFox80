
RDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00006452  00006506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006452  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000254  00800232  00800232  00006638  2**0
                  ALLOC
  3 .eeprom       000000b9  00810000  00810000  00006638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000066f1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006750  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  00006790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006c78  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000116e  00000000  00000000  0000d548  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005a22  00000000  00000000  0000e6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f38  00000000  00000000  000140d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00015499  00000000  00000000  00015010  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000691e  00000000  00000000  0002a4a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a0  00000000  00000000  00030dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00005911  00000000  00000000  00030f67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
       2:	00 00       	nop
       4:	78 c3       	rjmp	.+1776   	; 0x6f6 <__vector_1>
       6:	00 00       	nop
       8:	39 c3       	rjmp	.+1650   	; 0x67c <__vector_2>
       a:	00 00       	nop
       c:	a7 c0       	rjmp	.+334    	; 0x15c <__bad_interrupt>
       e:	00 00       	nop
      10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
      12:	00 00       	nop
      14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_6>
      1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
      1e:	00 00       	nop
      20:	36 c7       	rjmp	.+3692   	; 0xe8e <__vector_8>
      22:	00 00       	nop
      24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
      26:	00 00       	nop
      28:	99 c0       	rjmp	.+306    	; 0x15c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	97 c0       	rjmp	.+302    	; 0x15c <__bad_interrupt>
      2e:	00 00       	nop
      30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
      32:	00 00       	nop
      34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
      36:	00 00       	nop
      38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
      3e:	00 00       	nop
      40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
      42:	00 00       	nop
      44:	8b c0       	rjmp	.+278    	; 0x15c <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_18>
      4c:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__vector_19>
      50:	85 c0       	rjmp	.+266    	; 0x15c <__bad_interrupt>
      52:	00 00       	nop
      54:	83 c0       	rjmp	.+262    	; 0x15c <__bad_interrupt>
      56:	00 00       	nop
      58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7f c0       	rjmp	.+254    	; 0x15c <__bad_interrupt>
      5e:	00 00       	nop
      60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
      62:	00 00       	nop
      64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
      66:	00 00       	nop
      68:	bf 1b       	sub	r27, r31
      6a:	83 1b       	sub	r24, r19
      6c:	af 1b       	sub	r26, r31
      6e:	c7 1b       	sub	r28, r23
      70:	b3 1b       	sub	r27, r19
      72:	c7 1b       	sub	r28, r23
      74:	93 1b       	sub	r25, r19
      76:	7f 1b       	sub	r23, r31
      78:	8b 1b       	sub	r24, r27
      7a:	8f 1b       	sub	r24, r31
      7c:	c7 1b       	sub	r28, r23
      7e:	a3 1b       	sub	r26, r19
      80:	77 1b       	sub	r23, r23
      82:	a7 1b       	sub	r26, r23
      84:	73 1b       	sub	r23, r19
      86:	87 1b       	sub	r24, r23
      88:	4b 1b       	sub	r20, r27
      8a:	4f 1b       	sub	r20, r31
      8c:	53 1b       	sub	r21, r19
      8e:	57 1b       	sub	r21, r23
      90:	5b 1b       	sub	r21, r27
      92:	5f 1b       	sub	r21, r31
      94:	63 1b       	sub	r22, r19
      96:	67 1b       	sub	r22, r23
      98:	6b 1b       	sub	r22, r27
      9a:	6f 1b       	sub	r22, r31
      9c:	97 1b       	sub	r25, r23
      9e:	9b 1b       	sub	r25, r27
      a0:	c3 1b       	sub	r28, r19
      a2:	9f 1b       	sub	r25, r31
      a4:	c7 1b       	sub	r28, r23
      a6:	7b 1b       	sub	r23, r27
      a8:	b7 1b       	sub	r27, r23
      aa:	cb 1b       	sub	r28, r27
      ac:	e7 1a       	sub	r14, r23
      ae:	eb 1a       	sub	r14, r27
      b0:	ef 1a       	sub	r14, r31
      b2:	f3 1a       	sub	r15, r19
      b4:	f7 1a       	sub	r15, r23
      b6:	fb 1a       	sub	r15, r27
      b8:	ff 1a       	sub	r15, r31
      ba:	03 1b       	sub	r16, r19
      bc:	07 1b       	sub	r16, r23
      be:	0b 1b       	sub	r16, r27
      c0:	0f 1b       	sub	r16, r31
      c2:	13 1b       	sub	r17, r19
      c4:	17 1b       	sub	r17, r23
      c6:	1b 1b       	sub	r17, r27
      c8:	1f 1b       	sub	r17, r31
      ca:	23 1b       	sub	r18, r19
      cc:	27 1b       	sub	r18, r23
      ce:	2b 1b       	sub	r18, r27
      d0:	2f 1b       	sub	r18, r31
      d2:	33 1b       	sub	r19, r19
      d4:	37 1b       	sub	r19, r23
      d6:	3b 1b       	sub	r19, r27
      d8:	3f 1b       	sub	r19, r31
      da:	43 1b       	sub	r20, r19
      dc:	47 1b       	sub	r20, r23
      de:	c7 1b       	sub	r28, r23
      e0:	c7 1b       	sub	r28, r23
      e2:	c7 1b       	sub	r28, r23
      e4:	c7 1b       	sub	r28, r23
      e6:	ab 1b       	sub	r26, r27
      e8:	c7 1b       	sub	r28, r23
      ea:	c7 1b       	sub	r28, r23
      ec:	c7 1b       	sub	r28, r23
      ee:	c7 1b       	sub	r28, r23
      f0:	c7 1b       	sub	r28, r23
      f2:	c7 1b       	sub	r28, r23
      f4:	c7 1b       	sub	r28, r23
      f6:	c7 1b       	sub	r28, r23
      f8:	c7 1b       	sub	r28, r23
      fa:	c7 1b       	sub	r28, r23
      fc:	c7 1b       	sub	r28, r23
      fe:	c7 1b       	sub	r28, r23
     100:	c7 1b       	sub	r28, r23
     102:	c7 1b       	sub	r28, r23
     104:	c7 1b       	sub	r28, r23
     106:	c7 1b       	sub	r28, r23
     108:	c7 1b       	sub	r28, r23
     10a:	c7 1b       	sub	r28, r23
     10c:	c7 1b       	sub	r28, r23
     10e:	c7 1b       	sub	r28, r23
     110:	c7 1b       	sub	r28, r23
     112:	c7 1b       	sub	r28, r23
     114:	c7 1b       	sub	r28, r23
     116:	c7 1b       	sub	r28, r23
     118:	c7 1b       	sub	r28, r23
     11a:	c7 1b       	sub	r28, r23
     11c:	c7 1b       	sub	r28, r23
     11e:	c7 1b       	sub	r28, r23
     120:	bb 1b       	sub	r27, r27

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf ef       	ldi	r28, 0xFF	; 255
     128:	d8 e0       	ldi	r29, 0x08	; 8
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	12 e0       	ldi	r17, 0x02	; 2
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	e2 e5       	ldi	r30, 0x52	; 82
     136:	f4 e6       	ldi	r31, 0x64	; 100
     138:	02 c0       	rjmp	.+4      	; 0x13e <__do_copy_data+0x10>
     13a:	05 90       	lpm	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	a2 33       	cpi	r26, 0x32	; 50
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0xc>

00000144 <__do_clear_bss>:
     144:	24 e0       	ldi	r18, 0x04	; 4
     146:	a2 e3       	ldi	r26, 0x32	; 50
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	a6 38       	cpi	r26, 0x86	; 134
     150:	b2 07       	cpc	r27, r18
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 94 0b 	call	0x1728	; 0x1728 <main>
     158:	0c 94 27 32 	jmp	0x644e	; 0x644e <_exit>

0000015c <__bad_interrupt>:
     15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <nextFullTxBuffer>:
static volatile BOOL linkbus_tx_active = FALSE; // volatile is required to ensure optimizer handles this properly
static LinkbusTxBuffer tx_buffer[LINKBUS_NUMBER_OF_TX_MSG_BUFFERS];
static LinkbusRxBuffer rx_buffer[LINKBUS_NUMBER_OF_RX_MSG_BUFFERS];

LinkbusTxBuffer* nextFullTxBuffer(void)
{
     15e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <bufferIndex.2910>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] == '\0')
     162:	94 e0       	ldi	r25, 0x04	; 4
     164:	52 e3       	ldi	r21, 0x32	; 50
     166:	06 c0       	rjmp	.+12     	; 0x174 <nextFullTxBuffer+0x16>
     168:	91 50       	subi	r25, 0x01	; 1
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     16a:	89 f0       	breq	.+34     	; 0x18e <nextFullTxBuffer+0x30>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     16c:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     16e:	84 30       	cpi	r24, 0x04	; 4
     170:	08 f0       	brcs	.+2      	; 0x174 <nextFullTxBuffer+0x16>
		{
			bufferIndex = 0;
     172:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] == '\0')
     174:	28 2f       	mov	r18, r24
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	52 9f       	mul	r21, r18
     17a:	f0 01       	movw	r30, r0
     17c:	53 9f       	mul	r21, r19
     17e:	f0 0d       	add	r31, r0
     180:	11 24       	eor	r1, r1
     182:	e2 54       	subi	r30, 0x42	; 66
     184:	fd 4f       	sbci	r31, 0xFD	; 253
     186:	40 81       	ld	r20, Z
     188:	44 23       	and	r20, r20
     18a:	71 f3       	breq	.-36     	; 0x168 <nextFullTxBuffer+0xa>
     18c:	05 c0       	rjmp	.+10     	; 0x198 <nextFullTxBuffer+0x3a>
     18e:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <bufferIndex.2910>
	if(found)
	{
		return( &tx_buffer[bufferIndex]);
	}

	return(NULL);
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	08 95       	ret
     198:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <bufferIndex.2910>
		}
	}

	if(found)
	{
		return( &tx_buffer[bufferIndex]);
     19c:	42 e3       	ldi	r20, 0x32	; 50
     19e:	42 9f       	mul	r20, r18
     1a0:	c0 01       	movw	r24, r0
     1a2:	43 9f       	mul	r20, r19
     1a4:	90 0d       	add	r25, r0
     1a6:	11 24       	eor	r1, r1
     1a8:	82 54       	subi	r24, 0x42	; 66
     1aa:	9d 4f       	sbci	r25, 0xFD	; 253
	}

	return(NULL);
}
     1ac:	08 95       	ret

000001ae <nextEmptyTxBuffer>:

LinkbusTxBuffer* nextEmptyTxBuffer(void)
{
     1ae:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <bufferIndex.2919>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] != '\0')
     1b2:	94 e0       	ldi	r25, 0x04	; 4
     1b4:	52 e3       	ldi	r21, 0x32	; 50
     1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <nextEmptyTxBuffer+0x16>
     1b8:	91 50       	subi	r25, 0x01	; 1
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     1ba:	89 f0       	breq	.+34     	; 0x1de <nextEmptyTxBuffer+0x30>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     1bc:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     1be:	84 30       	cpi	r24, 0x04	; 4
     1c0:	08 f0       	brcs	.+2      	; 0x1c4 <nextEmptyTxBuffer+0x16>
		{
			bufferIndex = 0;
     1c2:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] != '\0')
     1c4:	28 2f       	mov	r18, r24
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	52 9f       	mul	r21, r18
     1ca:	f0 01       	movw	r30, r0
     1cc:	53 9f       	mul	r21, r19
     1ce:	f0 0d       	add	r31, r0
     1d0:	11 24       	eor	r1, r1
     1d2:	e2 54       	subi	r30, 0x42	; 66
     1d4:	fd 4f       	sbci	r31, 0xFD	; 253
     1d6:	40 81       	ld	r20, Z
     1d8:	41 11       	cpse	r20, r1
     1da:	ee cf       	rjmp	.-36     	; 0x1b8 <nextEmptyTxBuffer+0xa>
     1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <nextEmptyTxBuffer+0x3a>
     1de:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <bufferIndex.2919>
	if(found)
	{
		return( &tx_buffer[bufferIndex]);
	}

	return(NULL);
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	08 95       	ret
     1e8:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <bufferIndex.2919>
		}
	}

	if(found)
	{
		return( &tx_buffer[bufferIndex]);
     1ec:	42 e3       	ldi	r20, 0x32	; 50
     1ee:	42 9f       	mul	r20, r18
     1f0:	c0 01       	movw	r24, r0
     1f2:	43 9f       	mul	r20, r19
     1f4:	90 0d       	add	r25, r0
     1f6:	11 24       	eor	r1, r1
     1f8:	82 54       	subi	r24, 0x42	; 66
     1fa:	9d 4f       	sbci	r25, 0xFD	; 253
	}

	return(NULL);
}
     1fc:	08 95       	ret

000001fe <nextEmptyRxBuffer>:

LinkbusRxBuffer* nextEmptyRxBuffer(void)
{
     1fe:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bufferIndex.2928>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     202:	28 2f       	mov	r18, r24
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	92 e4       	ldi	r25, 0x42	; 66
     208:	89 9f       	mul	r24, r25
     20a:	f0 01       	movw	r30, r0
     20c:	11 24       	eor	r1, r1
     20e:	e6 5c       	subi	r30, 0xC6	; 198
     210:	fd 4f       	sbci	r31, 0xFD	; 253
     212:	41 81       	ldd	r20, Z+1	; 0x01
     214:	52 81       	ldd	r21, Z+2	; 0x02
     216:	45 2b       	or	r20, r21
     218:	a9 f0       	breq	.+42     	; 0x244 <nextEmptyRxBuffer+0x46>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     21a:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	08 f0       	brcs	.+2      	; 0x222 <nextEmptyRxBuffer+0x24>
		{
			bufferIndex = 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     222:	28 2f       	mov	r18, r24
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	92 e4       	ldi	r25, 0x42	; 66
     228:	89 9f       	mul	r24, r25
     22a:	f0 01       	movw	r30, r0
     22c:	11 24       	eor	r1, r1
     22e:	e6 5c       	subi	r30, 0xC6	; 198
     230:	fd 4f       	sbci	r31, 0xFD	; 253
     232:	41 81       	ldd	r20, Z+1	; 0x01
     234:	52 81       	ldd	r21, Z+2	; 0x02
     236:	45 2b       	or	r20, r21
     238:	29 f0       	breq	.+10     	; 0x244 <nextEmptyRxBuffer+0x46>
     23a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <bufferIndex.2928>
	if(found)
	{
		return( &rx_buffer[bufferIndex]);
	}

	return(NULL);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	08 95       	ret
     244:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <bufferIndex.2928>
		}
	}

	if(found)
	{
		return( &rx_buffer[bufferIndex]);
     248:	42 e4       	ldi	r20, 0x42	; 66
     24a:	42 9f       	mul	r20, r18
     24c:	c0 01       	movw	r24, r0
     24e:	43 9f       	mul	r20, r19
     250:	90 0d       	add	r25, r0
     252:	11 24       	eor	r1, r1
     254:	86 5c       	subi	r24, 0xC6	; 198
     256:	9d 4f       	sbci	r25, 0xFD	; 253
	}

	return(NULL);
}
     258:	08 95       	ret

0000025a <nextFullRxBuffer>:

LinkbusRxBuffer* nextFullRxBuffer(void)
{
     25a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <bufferIndex.2937>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     25e:	28 2f       	mov	r18, r24
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	92 e4       	ldi	r25, 0x42	; 66
     264:	89 9f       	mul	r24, r25
     266:	f0 01       	movw	r30, r0
     268:	11 24       	eor	r1, r1
     26a:	e6 5c       	subi	r30, 0xC6	; 198
     26c:	fd 4f       	sbci	r31, 0xFD	; 253
     26e:	41 81       	ldd	r20, Z+1	; 0x01
     270:	52 81       	ldd	r21, Z+2	; 0x02
     272:	45 2b       	or	r20, r21
     274:	a9 f4       	brne	.+42     	; 0x2a0 <nextFullRxBuffer+0x46>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     276:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     278:	82 30       	cpi	r24, 0x02	; 2
     27a:	08 f0       	brcs	.+2      	; 0x27e <nextFullRxBuffer+0x24>
		{
			bufferIndex = 0;
     27c:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     27e:	28 2f       	mov	r18, r24
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	92 e4       	ldi	r25, 0x42	; 66
     284:	89 9f       	mul	r24, r25
     286:	f0 01       	movw	r30, r0
     288:	11 24       	eor	r1, r1
     28a:	e6 5c       	subi	r30, 0xC6	; 198
     28c:	fd 4f       	sbci	r31, 0xFD	; 253
     28e:	41 81       	ldd	r20, Z+1	; 0x01
     290:	52 81       	ldd	r21, Z+2	; 0x02
     292:	45 2b       	or	r20, r21
     294:	29 f4       	brne	.+10     	; 0x2a0 <nextFullRxBuffer+0x46>
     296:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <bufferIndex.2937>
	if(found)
	{
		return( &rx_buffer[bufferIndex]);
	}

	return(NULL);
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	08 95       	ret
     2a0:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <bufferIndex.2937>
		}
	}

	if(found)
	{
		return( &rx_buffer[bufferIndex]);
     2a4:	42 e4       	ldi	r20, 0x42	; 66
     2a6:	42 9f       	mul	r20, r18
     2a8:	c0 01       	movw	r24, r0
     2aa:	43 9f       	mul	r20, r19
     2ac:	90 0d       	add	r25, r0
     2ae:	11 24       	eor	r1, r1
     2b0:	86 5c       	subi	r24, 0xC6	; 198
     2b2:	9d 4f       	sbci	r25, 0xFD	; 253
	}

	return(NULL);
}
     2b4:	08 95       	ret

000002b6 <linkbusTxInProgress>:
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     2b6:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <linkbus_tx_active>
}
     2ba:	08 95       	ret

000002bc <linkbus_start_tx>:

BOOL linkbus_start_tx(void)
{
	BOOL success = !linkbus_tx_active;
     2bc:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <linkbus_tx_active>
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	91 11       	cpse	r25, r1
     2c4:	80 e0       	ldi	r24, 0x00	; 0

	if(success) /* message will be lost if transmit is busy */
     2c6:	91 11       	cpse	r25, r1
     2c8:	08 c0       	rjmp	.+16     	; 0x2da <linkbus_start_tx+0x1e>
	{
		linkbus_tx_active = TRUE;
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <linkbus_tx_active>
		UCSR0B |= (1 << UDRIE0);
     2d0:	e1 ec       	ldi	r30, 0xC1	; 193
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	90 81       	ld	r25, Z
     2d6:	90 62       	ori	r25, 0x20	; 32
     2d8:	90 83       	st	Z, r25
	}

	return(success);
}
     2da:	08 95       	ret

000002dc <linkbus_end_tx>:

void linkbus_end_tx(void)
{
	if(linkbus_tx_active)
     2dc:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <linkbus_tx_active>
     2e0:	88 23       	and	r24, r24
     2e2:	39 f0       	breq	.+14     	; 0x2f2 <linkbus_end_tx+0x16>
	{
		UCSR0B &= ~(1 << UDRIE0);
     2e4:	e1 ec       	ldi	r30, 0xC1	; 193
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	8f 7d       	andi	r24, 0xDF	; 223
     2ec:	80 83       	st	Z, r24
		linkbus_tx_active = FALSE;
     2ee:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <linkbus_tx_active>
     2f2:	08 95       	ret

000002f4 <linkbus_reset_rx>:
	}
}

void linkbus_reset_rx(void)
{
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
	if(UCSR0B & (1 << RXEN0))   /* perform only if rx is currently enabled */
     2f8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     2fc:	84 ff       	sbrs	r24, 4
     2fe:	0f c0       	rjmp	.+30     	; 0x31e <linkbus_reset_rx+0x2a>
	{
		UCSR0B &= ~(1 << RXEN0);
     300:	e1 ec       	ldi	r30, 0xC1	; 193
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	8f 7e       	andi	r24, 0xEF	; 239
     308:	80 83       	st	Z, r24
/*		uint16_t s = sizeof(rx_buffer); // test */
		memset(rx_buffer, 0, sizeof(rx_buffer));
     30a:	84 e8       	ldi	r24, 0x84	; 132
     30c:	aa e3       	ldi	r26, 0x3A	; 58
     30e:	b2 e0       	ldi	r27, 0x02	; 2
     310:	ed 01       	movw	r28, r26
     312:	19 92       	st	Y+, r1
     314:	8a 95       	dec	r24
     316:	e9 f7       	brne	.-6      	; 0x312 <linkbus_reset_rx+0x1e>
/*		if(s) s = 0; // test */
		UCSR0B |= (1 << RXEN0);
     318:	80 81       	ld	r24, Z
     31a:	80 61       	ori	r24, 0x10	; 16
     31c:	80 83       	st	Z, r24
	}
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <linkbus_init>:

void linkbus_init(uint32_t baud)
{
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
	memset(rx_buffer, 0, sizeof(rx_buffer));
     328:	84 e8       	ldi	r24, 0x84	; 132
     32a:	ea e3       	ldi	r30, 0x3A	; 58
     32c:	f2 e0       	ldi	r31, 0x02	; 2
     32e:	df 01       	movw	r26, r30
     330:	1d 92       	st	X+, r1
     332:	8a 95       	dec	r24
     334:	e9 f7       	brne	.-6      	; 0x330 <linkbus_init+0xc>

	for(int bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
	{
		tx_buffer[bufferIndex][0] = '\0';
     336:	ee eb       	ldi	r30, 0xBE	; 190
     338:	f2 e0       	ldi	r31, 0x02	; 2
     33a:	10 82       	st	Z, r1
     33c:	12 aa       	std	Z+50, r1	; 0x32
     33e:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <tx_buffer+0x64>
     342:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <tx_buffer+0x96>
	}

	/*Set baud rate */
	uint16_t myubrr = MYUBRR(baud);
     346:	60 e2       	ldi	r22, 0x20	; 32
     348:	71 ea       	ldi	r23, 0xA1	; 161
     34a:	87 e0       	ldi	r24, 0x07	; 7
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__udivmodsi4>
     352:	21 50       	subi	r18, 0x01	; 1
     354:	31 09       	sbc	r19, r1
	UBRR0H = (uint8_t)(myubrr >> 8);
     356:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)myubrr;
     35a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	/* Enable receiver and transmitter and related interrupts */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     35e:	88 e9       	ldi	r24, 0x98	; 152
     360:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
/*	UCSR0B = (1<<RXEN0) | (1<<TXEN0); */
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
     364:	8e e0       	ldi	r24, 0x0E	; 14
     366:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	g_bus_disabled = FALSE;
     36a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     36e:	08 95       	ret

00000370 <linkbus_disable>:

void linkbus_disable(void)
{
	uint8_t bufferIndex;

	g_bus_disabled = TRUE;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	UCSR0B = 0;
     376:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	linkbus_end_tx();
     37a:	b0 df       	rcall	.-160    	; 0x2dc <linkbus_end_tx>
	memset(rx_buffer, 0, sizeof(rx_buffer));
     37c:	84 e8       	ldi	r24, 0x84	; 132
     37e:	ea e3       	ldi	r30, 0x3A	; 58
     380:	f2 e0       	ldi	r31, 0x02	; 2
     382:	df 01       	movw	r26, r30
     384:	1d 92       	st	X+, r1
     386:	8a 95       	dec	r24
     388:	e9 f7       	brne	.-6      	; 0x384 <linkbus_disable+0x14>

	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
	{
		tx_buffer[bufferIndex][0] = '\0';
     38a:	ee eb       	ldi	r30, 0xBE	; 190
     38c:	f2 e0       	ldi	r31, 0x02	; 2
     38e:	10 82       	st	Z, r1
     390:	12 aa       	std	Z+50, r1	; 0x32
     392:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <tx_buffer+0x64>
     396:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <tx_buffer+0x96>
     39a:	08 95       	ret

0000039c <linkbus_enable>:

void linkbus_enable(void)
{
	uint8_t bufferIndex;

	g_bus_disabled = FALSE;
     39c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     3a0:	88 e9       	ldi	r24, 0x98	; 152
     3a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

	memset(rx_buffer, 0, sizeof(rx_buffer));
     3a6:	84 e8       	ldi	r24, 0x84	; 132
     3a8:	ea e3       	ldi	r30, 0x3A	; 58
     3aa:	f2 e0       	ldi	r31, 0x02	; 2
     3ac:	df 01       	movw	r26, r30
     3ae:	1d 92       	st	X+, r1
     3b0:	8a 95       	dec	r24
     3b2:	e9 f7       	brne	.-6      	; 0x3ae <linkbus_enable+0x12>

	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
	{
		tx_buffer[bufferIndex][0] = '\0';
     3b4:	ee eb       	ldi	r30, 0xBE	; 190
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	10 82       	st	Z, r1
     3ba:	12 aa       	std	Z+50, r1	; 0x32
     3bc:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <tx_buffer+0x64>
     3c0:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <tx_buffer+0x96>
     3c4:	08 95       	ret

000003c6 <linkbus_send_text>:
	}
}


BOOL linkbus_send_text(char* text)
{
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
     3ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     3d2:	21 11       	cpse	r18, r1
     3d4:	18 c0       	rjmp	.+48     	; 0x406 <STACK_SIZE+0x6>

	if(text)
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	c1 f0       	breq	.+48     	; 0x40a <STACK_SIZE+0xa>
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
     3da:	8c 01       	movw	r16, r24
     3dc:	e8 de       	rcall	.-560    	; 0x1ae <nextEmptyTxBuffer>

		while(!buff && tries)
     3de:	00 97       	sbiw	r24, 0x00	; 0
     3e0:	79 f0       	breq	.+30     	; 0x400 <STACK_SIZE>
     3e2:	19 c0       	rjmp	.+50     	; 0x416 <STACK_SIZE+0x16>
		{
			while(linkbusTxInProgress() && tries)
			{
				if(tries) tries--;   /* wait until transmit finishes */
     3e4:	21 97       	sbiw	r28, 0x01	; 1
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     3e6:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <linkbus_tx_active>
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
		{
			while(linkbusTxInProgress() && tries)
     3ea:	99 23       	and	r25, r25
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <linkbus_send_text+0x2e>
     3ee:	20 97       	sbiw	r28, 0x00	; 0
     3f0:	c9 f7       	brne	.-14     	; 0x3e4 <linkbus_send_text+0x1e>
			{
				if(tries) tries--;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
     3f2:	1e c0       	rjmp	.+60     	; 0x430 <STACK_SIZE+0x30>
     3f4:	dc de       	rcall	.-584    	; 0x1ae <nextEmptyTxBuffer>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
     3f6:	00 97       	sbiw	r24, 0x00	; 0
     3f8:	71 f4       	brne	.+28     	; 0x416 <STACK_SIZE+0x16>
     3fa:	20 97       	sbiw	r28, 0x00	; 0
     3fc:	a1 f7       	brne	.-24     	; 0x3e6 <linkbus_send_text+0x20>
     3fe:	07 c0       	rjmp	.+14     	; 0x40e <STACK_SIZE+0xe>
     400:	c8 ec       	ldi	r28, 0xC8	; 200
     402:	d0 e0       	ldi	r29, 0x00	; 0
     404:	f0 cf       	rjmp	.-32     	; 0x3e6 <linkbus_send_text+0x20>
BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	17 c0       	rjmp	.+46     	; 0x438 <STACK_SIZE+0x38>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	15 c0       	rjmp	.+42     	; 0x438 <STACK_SIZE+0x38>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	13 c0       	rjmp	.+38     	; 0x438 <STACK_SIZE+0x38>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	11 c0       	rjmp	.+34     	; 0x438 <STACK_SIZE+0x38>
			buff = nextEmptyTxBuffer();
		}

		if(buff)
		{
			sprintf(*buff, text);
     416:	1f 93       	push	r17
     418:	0f 93       	push	r16
     41a:	9f 93       	push	r25
     41c:	8f 93       	push	r24
     41e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>

			linkbus_start_tx();
     422:	4c df       	rcall	.-360    	; 0x2bc <linkbus_start_tx>
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
			err = FALSE;
     42a:	0f 90       	pop	r0
     42c:	80 e0       	ldi	r24, 0x00	; 0
		{
			while(linkbusTxInProgress() && tries)
			{
				if(tries) tries--;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
     42e:	04 c0       	rjmp	.+8      	; 0x438 <STACK_SIZE+0x38>
     430:	be de       	rcall	.-644    	; 0x1ae <nextEmptyTxBuffer>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	81 f7       	brne	.-32     	; 0x416 <STACK_SIZE+0x16>
     436:	ed cf       	rjmp	.-38     	; 0x412 <STACK_SIZE+0x12>
			err = FALSE;
		}
	}

	return(err);
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	08 95       	ret

00000442 <lb_send_msg>:
void lb_send_msg(LBMessageType msgType, char* msgLabel, char* msgStr)
{
	char prefix = '$';
	char terminus = ';';

	if(msgType == LINKBUS_MSG_REPLY)
     442:	83 30       	cpi	r24, 0x03	; 3
     444:	29 f0       	breq	.+10     	; 0x450 <lb_send_msg+0xe>
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     446:	82 30       	cpi	r24, 0x02	; 2
     448:	31 f4       	brne	.+12     	; 0x456 <lb_send_msg+0x14>
	{
		terminus = '?';
     44a:	9f e3       	ldi	r25, 0x3F	; 63
 *  Support for creating and sending various Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_msg(LBMessageType msgType, char* msgLabel, char* msgStr)
{
	char prefix = '$';
     44c:	84 e2       	ldi	r24, 0x24	; 36
     44e:	05 c0       	rjmp	.+10     	; 0x45a <lb_send_msg+0x18>
	char terminus = ';';
     450:	9b e3       	ldi	r25, 0x3B	; 59

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     452:	81 e2       	ldi	r24, 0x21	; 33
     454:	02 c0       	rjmp	.+4      	; 0x45a <lb_send_msg+0x18>
 ************************************************************************************/

void lb_send_msg(LBMessageType msgType, char* msgLabel, char* msgStr)
{
	char prefix = '$';
	char terminus = ';';
     456:	9b e3       	ldi	r25, 0x3B	; 59
 *  Support for creating and sending various Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_msg(LBMessageType msgType, char* msgLabel, char* msgStr)
{
	char prefix = '$';
     458:	84 e2       	ldi	r24, 0x24	; 36
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
	}

	sprintf(g_tempMsgBuff, "%c%s,%s%c", prefix, msgLabel, msgStr, terminus);
     45a:	1f 92       	push	r1
     45c:	9f 93       	push	r25
     45e:	5f 93       	push	r21
     460:	4f 93       	push	r20
     462:	7f 93       	push	r23
     464:	6f 93       	push	r22
     466:	1f 92       	push	r1
     468:	8f 93       	push	r24
     46a:	8e e0       	ldi	r24, 0x0E	; 14
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	9f 93       	push	r25
     470:	8f 93       	push	r24
     472:	87 e8       	ldi	r24, 0x87	; 135
     474:	93 e0       	ldi	r25, 0x03	; 3
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>

	linkbus_send_text(g_tempMsgBuff);
     47e:	87 e8       	ldi	r24, 0x87	; 135
     480:	93 e0       	ldi	r25, 0x03	; 3
     482:	a1 df       	rcall	.-190    	; 0x3c6 <linkbus_send_text>
}
     484:	8d b7       	in	r24, 0x3d	; 61
     486:	9e b7       	in	r25, 0x3e	; 62
     488:	0c 96       	adiw	r24, 0x0c	; 12
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	9e bf       	out	0x3e, r25	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	8d bf       	out	0x3d, r24	; 61
     494:	08 95       	ret

00000496 <lb_send_sync>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
     496:	86 e0       	ldi	r24, 0x06	; 6
     498:	e8 e1       	ldi	r30, 0x18	; 24
     49a:	f2 e0       	ldi	r31, 0x02	; 2
     49c:	a7 e8       	ldi	r26, 0x87	; 135
     49e:	b3 e0       	ldi	r27, 0x03	; 3
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	8a 95       	dec	r24
	linkbus_send_text(g_tempMsgBuff);
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <lb_send_sync+0xa>
     4a8:	87 e8       	ldi	r24, 0x87	; 135
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	8c cf       	rjmp	.-232    	; 0x3c6 <linkbus_send_text>
     4ae:	08 95       	ret

000004b0 <lb_broadcast_num>:
}


void lb_broadcast_num(uint16_t data, char* str)
{
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <lb_broadcast_num+0xa>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <lb_broadcast_num+0xc>
     4bc:	00 d0       	rcall	.+0      	; 0x4be <lb_broadcast_num+0xe>
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	8b 01       	movw	r16, r22
	char t[6] = "\0";
     4c4:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <xtal_freq+0x4>
     4c8:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <xtal_freq+0x5>
     4cc:	3a 83       	std	Y+2, r19	; 0x02
     4ce:	29 83       	std	Y+1, r18	; 0x01
     4d0:	fe 01       	movw	r30, r28
     4d2:	33 96       	adiw	r30, 0x03	; 3
     4d4:	24 e0       	ldi	r18, 0x04	; 4
     4d6:	df 01       	movw	r26, r30
     4d8:	1d 92       	st	X+, r1
     4da:	2a 95       	dec	r18
     4dc:	e9 f7       	brne	.-6      	; 0x4d8 <lb_broadcast_num+0x28>

	sprintf(t, "%u", data);
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	8e e1       	ldi	r24, 0x1E	; 30
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	ce 01       	movw	r24, r28
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	9f 93       	push	r25
     4f0:	8f 93       	push	r24
     4f2:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
	g_tempMsgBuff[0] = '\0';
     4f6:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <g_tempMsgBuff>

	if(str)
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	01 15       	cp	r16, r1
     508:	11 05       	cpc	r17, r1
     50a:	d9 f0       	breq	.+54     	; 0x542 <lb_broadcast_num+0x92>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
     50c:	ce 01       	movw	r24, r28
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	9f 93       	push	r25
     512:	8f 93       	push	r24
     514:	1f 93       	push	r17
     516:	0f 93       	push	r16
     518:	81 e2       	ldi	r24, 0x21	; 33
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	07 e8       	ldi	r16, 0x87	; 135
     522:	13 e0       	ldi	r17, 0x03	; 3
     524:	1f 93       	push	r17
     526:	0f 93       	push	r16
     528:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
	}

	if(g_tempMsgBuff[0]) linkbus_send_text(g_tempMsgBuff);
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	d8 01       	movw	r26, r16
     538:	8c 91       	ld	r24, X
     53a:	88 23       	and	r24, r24
     53c:	11 f0       	breq	.+4      	; 0x542 <lb_broadcast_num+0x92>
     53e:	c8 01       	movw	r24, r16
     540:	42 df       	rcall	.-380    	; 0x3c6 <linkbus_send_text>
}
     542:	26 96       	adiw	r28, 0x06	; 6
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	08 95       	ret

00000558 <calibrateOscillator>:


void calibrateOscillator(uint8_t cal)
{
     558:	cf 93       	push	r28
     55a:	c8 2f       	mov	r28, r24
	sprintf(g_tempMsgBuff, "$OSC,%u;", cal);
     55c:	1f 92       	push	r1
     55e:	8f 93       	push	r24
     560:	88 e2       	ldi	r24, 0x28	; 40
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	87 e8       	ldi	r24, 0x87	; 135
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     574:	87 e8       	ldi	r24, 0x87	; 135
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	26 df       	rcall	.-436    	; 0x3c6 <linkbus_send_text>
	if(cal) OSCCAL = cal;
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	c1 11       	cpse	r28, r1
     588:	c0 93 66 00 	sts	0x0066, r28	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
}
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <calcOSCCAL>:
{
	static int sum = 0;
	static int count = 0;
	uint8_t result = 0;

	if((val >= 10) && (val <= 240))
     590:	96 ef       	ldi	r25, 0xF6	; 246
     592:	98 0f       	add	r25, r24
     594:	97 3e       	cpi	r25, 0xE7	; 231
     596:	d0 f4       	brcc	.+52     	; 0x5cc <calcOSCCAL+0x3c>
	{
		sum += val;
     598:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <sum.3010>
     59c:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <sum.3010+0x1>
     5a0:	a9 01       	movw	r20, r18
     5a2:	48 0f       	add	r20, r24
     5a4:	51 1d       	adc	r21, r1
     5a6:	ca 01       	movw	r24, r20
     5a8:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <sum.3010+0x1>
     5ac:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <sum.3010>
		count++;
     5b0:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <__data_end>
     5b4:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <__data_end+0x1>
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <__data_end+0x1>
     5c0:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <__data_end>
		result = sum / count;
     5c4:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divmodhi4>
     5c8:	86 2f       	mov	r24, r22
     5ca:	08 95       	ret
	}
	else if(val == 255)
     5cc:	8f 3f       	cpi	r24, 0xFF	; 255
     5ce:	51 f4       	brne	.+20     	; 0x5e4 <calcOSCCAL+0x54>
	{
		sum = 0;
     5d0:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <sum.3010+0x1>
     5d4:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <sum.3010>
		count = 0;
     5d8:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <__data_end+0x1>
     5dc:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>

uint8_t calcOSCCAL(uint8_t val)
{
	static int sum = 0;
	static int count = 0;
	uint8_t result = 0;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	08 95       	ret
	else if(val == 255)
	{
		sum = 0;
		count = 0;
	}
	else if(val == 0)
     5e4:	81 11       	cpse	r24, r1
     5e6:	0f c0       	rjmp	.+30     	; 0x606 <calcOSCCAL+0x76>
	{
		if(count)
     5e8:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <__data_end>
     5ec:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <__data_end+0x1>
     5f0:	61 15       	cp	r22, r1
     5f2:	71 05       	cpc	r23, r1
     5f4:	51 f0       	breq	.+20     	; 0x60a <calcOSCCAL+0x7a>
		{
			result = sum / count;
     5f6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <sum.3010>
     5fa:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <sum.3010+0x1>
     5fe:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divmodhi4>
     602:	86 2f       	mov	r24, r22
     604:	08 95       	ret

uint8_t calcOSCCAL(uint8_t val)
{
	static int sum = 0;
	static int count = 0;
	uint8_t result = 0;
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	08 95       	ret
     60a:	80 e0       	ldi	r24, 0x00	; 0
			result = sum / count;
		}
	}

	return(result);
}
     60c:	08 95       	ret

0000060e <wdt_init>:
 * Notice: Optimization must be enabled before watchdog can be set
 * in C (WDCE). Use __attribute__ to enforce optimization level.
 ************************************************************************/
void __attribute__((optimize("O1"))) wdt_init(WDReset resetType)
{
	wdt_reset();
     60e:	a8 95       	wdr

	if(MCUSR & (1 << WDRF))     /* If a reset was caused by the Watchdog Timer perform any special operations */
     610:	04 b6       	in	r0, 0x34	; 52
     612:	03 fe       	sbrs	r0, 3
     614:	03 c0       	rjmp	.+6      	; 0x61c <wdt_init+0xe>
	{
		MCUSR &= (1 << WDRF);   /* Clear the WDT reset flag */
     616:	94 b7       	in	r25, 0x34	; 52
     618:	98 70       	andi	r25, 0x08	; 8
     61a:	94 bf       	out	0x34, r25	; 52
	}

	if(resetType == WD_DISABLE)
     61c:	83 30       	cpi	r24, 0x03	; 3
     61e:	61 f4       	brne	.+24     	; 0x638 <wdt_init+0x2a>
	{
		/* Clear WDRF in MCUSR */
		MCUSR &= ~(1 << WDRF);
     620:	84 b7       	in	r24, 0x34	; 52
     622:	87 7f       	andi	r24, 0xF7	; 247
     624:	84 bf       	out	0x34, r24	; 52
		/* Write logical one to WDCE and WDE */
		/* Keep old prescaler setting to prevent unintentional
		 *  time-out */
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     626:	e0 e6       	ldi	r30, 0x60	; 96
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	88 61       	ori	r24, 0x18	; 24
     62e:	80 83       	st	Z, r24
		/* Turn off WDT */
		WDTCSR = 0x00;
     630:	10 82       	st	Z, r1
		g_enableHardwareWDResets = FALSE;
     632:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <g_enableHardwareWDResets>
     636:	08 95       	ret
	}
	else
	{
		if(resetType == WD_HW_RESETS)
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	41 f4       	brne	.+16     	; 0x64c <wdt_init+0x3e>
		{
			WDTCSR |= (1 << WDCE) | (1 << WDE);
     63c:	e0 e6       	ldi	r30, 0x60	; 96
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	90 81       	ld	r25, Z
     642:	98 61       	ori	r25, 0x18	; 24
     644:	90 83       	st	Z, r25
			WDTCSR = (1 << WDP3) | (1 << WDIE) | (1 << WDE);    /* Enable WD interrupt every 4 seconds, and hardware resets */
     646:	98 e6       	ldi	r25, 0x68	; 104
     648:	90 83       	st	Z, r25
     64a:	11 c0       	rjmp	.+34     	; 0x66e <wdt_init+0x60>
			/*	WDTCSR = (1 << WDP3) | (1 << WDP0) | (1 << WDIE) | (1 << WDE); // Enable WD interrupt every 8 seconds, and hardware resets */
		}
		else if(resetType == WD_SW_RESETS)
     64c:	81 11       	cpse	r24, r1
     64e:	08 c0       	rjmp	.+16     	; 0x660 <wdt_init+0x52>
		{
			WDTCSR |= (1 << WDCE) | (1 << WDE);
     650:	e0 e6       	ldi	r30, 0x60	; 96
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	90 81       	ld	r25, Z
     656:	98 61       	ori	r25, 0x18	; 24
     658:	90 83       	st	Z, r25
			/*	WDTCSR = (1 << WDP3) | (1 << WDIE); // Enable WD interrupt every 4 seconds (no HW reset)
			 *	WDTCSR = (1 << WDP3) | (1 << WDP0)  | (1 << WDIE); // Enable WD interrupt every 8 seconds (no HW reset) */
			WDTCSR = (1 << WDP1) | (1 << WDP2)  | (1 << WDIE);  /* Enable WD interrupt every 1 seconds (no HW reset) */
     65a:	96 e4       	ldi	r25, 0x46	; 70
     65c:	90 83       	st	Z, r25
     65e:	07 c0       	rjmp	.+14     	; 0x66e <wdt_init+0x60>
		}
		else
		{
			WDTCSR |= (1 << WDCE) | (1 << WDE);
     660:	e0 e6       	ldi	r30, 0x60	; 96
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	90 81       	ld	r25, Z
     666:	98 61       	ori	r25, 0x18	; 24
     668:	90 83       	st	Z, r25
			WDTCSR = (1 << WDIE) | (1 << WDE);  /* Enable WD interrupt in 16ms, and hardware reset */
     66a:	98 e4       	ldi	r25, 0x48	; 72
     66c:	90 83       	st	Z, r25
		}

		g_enableHardwareWDResets = (resetType != WD_SW_RESETS);
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	81 11       	cpse	r24, r1
     672:	01 c0       	rjmp	.+2      	; 0x676 <wdt_init+0x68>
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <g_enableHardwareWDResets>
     67a:	08 95       	ret

0000067c <__vector_2>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	__attribute__((optimize("O0"))) ISR( INT1_vect )
#else
	ISR( INT1_vect )
#endif
{
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     684:	0f 92       	push	r0
     686:	11 24       	eor	r1, r1
     688:	2f 93       	push	r18
     68a:	3f 93       	push	r19
     68c:	4f 93       	push	r20
     68e:	5f 93       	push	r21
     690:	6f 93       	push	r22
     692:	7f 93       	push	r23
     694:	8f 93       	push	r24
     696:	9f 93       	push	r25
     698:	af 93       	push	r26
     69a:	bf 93       	push	r27
     69c:	ef 93       	push	r30
     69e:	ff 93       	push	r31
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	1f 92       	push	r1
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
 *	{
 *		g_seconds_left_to_sleep = 0;
 *		g_go_to_sleep = FALSE;
 *		g_sleeping = FALSE;
 *	} */
	BOOL ant = antennaIsConnected();
     6aa:	0e 94 c0 1a 	call	0x3580	; 0x3580 <antennaIsConnected>
     6ae:	89 83       	std	Y+1, r24	; 0x01

	if(!ant)    /* immediately detect disconnection */
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	88 23       	and	r24, r24
     6b4:	51 f4       	brne	.+20     	; 0x6ca <__vector_2+0x4e>
	{
		if(g_antenna_connect_state != ANT_ALL_DISCONNECTED)
     6b6:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <g_antenna_connect_state>
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	31 f0       	breq	.+12     	; 0x6ca <__vector_2+0x4e>
		{
			g_antenna_connect_state = ANT_ALL_DISCONNECTED;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <g_antenna_connect_state>
			g_antenna_connection_changed = TRUE;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <g_antenna_connection_changed>
		}
	}
}
     6ca:	00 00       	nop
     6cc:	0f 90       	pop	r0
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	bf 91       	pop	r27
     6d8:	af 91       	pop	r26
     6da:	9f 91       	pop	r25
     6dc:	8f 91       	pop	r24
     6de:	7f 91       	pop	r23
     6e0:	6f 91       	pop	r22
     6e2:	5f 91       	pop	r21
     6e4:	4f 91       	pop	r20
     6e6:	3f 91       	pop	r19
     6e8:	2f 91       	pop	r18
     6ea:	0f 90       	pop	r0
     6ec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_1>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	__attribute__((optimize("O0"))) ISR( INT0_vect )
#else
	ISR( INT0_vect )
#endif
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	2f 93       	push	r18
     70c:	3f 93       	push	r19
     70e:	4f 93       	push	r20
     710:	5f 93       	push	r21
     712:	6f 93       	push	r22
     714:	7f 93       	push	r23
     716:	8f 93       	push	r24
     718:	9f 93       	push	r25
     71a:	af 93       	push	r26
     71c:	bf 93       	push	r27
     71e:	ef 93       	push	r30
     720:	ff 93       	push	r31
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	60 97       	sbiw	r28, 0x10	; 16
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	cd bf       	out	0x3d, r28	; 61
	static BOOL lastAntennaConnectionState = FALSE;
	static uint8_t antennaReadCount = 3;
	BOOL ant = antennaIsConnected();
     730:	0e 94 c0 1a 	call	0x3580	; 0x3580 <antennaIsConnected>
     734:	8d 83       	std	Y+5, r24	; 0x05

	if(!ant)    /* immediately detect disconnection */
     736:	8d 81       	ldd	r24, Y+5	; 0x05
     738:	88 23       	and	r24, r24
     73a:	59 f4       	brne	.+22     	; 0x752 <__vector_1+0x5c>
	{
		if(g_antenna_connect_state != ANT_ALL_DISCONNECTED)
     73c:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <g_antenna_connect_state>
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	49 f1       	breq	.+82     	; 0x796 <__vector_1+0xa0>
		{
			g_antenna_connect_state = ANT_ALL_DISCONNECTED;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <g_antenna_connect_state>
			g_antenna_connection_changed = TRUE;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <g_antenna_connection_changed>
     750:	22 c0       	rjmp	.+68     	; 0x796 <__vector_1+0xa0>
		}
	}
	else if(g_antenna_connect_state == ANT_ALL_DISCONNECTED)
     752:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <g_antenna_connect_state>
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	f1 f4       	brne	.+60     	; 0x796 <__vector_1+0xa0>
	{
		if(ant == lastAntennaConnectionState)
     75a:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <lastAntennaConnectionState.3295>
     75e:	9d 81       	ldd	r25, Y+5	; 0x05
     760:	98 17       	cp	r25, r24
     762:	b1 f4       	brne	.+44     	; 0x790 <__vector_1+0x9a>
		{
			if(antennaReadCount)
     764:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <antennaReadCount.3296>
     768:	88 23       	and	r24, r24
     76a:	a9 f0       	breq	.+42     	; 0x796 <__vector_1+0xa0>
			{
				antennaReadCount--;
     76c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <antennaReadCount.3296>
     770:	81 50       	subi	r24, 0x01	; 1
     772:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <antennaReadCount.3296>

				if(!antennaReadCount)
     776:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <antennaReadCount.3296>
     77a:	88 23       	and	r24, r24
     77c:	61 f4       	brne	.+24     	; 0x796 <__vector_1+0xa0>
				{
					g_antenna_connect_state = ANT_CONNECTION_UNDETERMINED;
     77e:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <g_antenna_connect_state>
					g_antenna_connection_changed = TRUE;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <g_antenna_connection_changed>
					antennaReadCount = 3;
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <antennaReadCount.3296>
     78e:	03 c0       	rjmp	.+6      	; 0x796 <__vector_1+0xa0>
				}
			}
		}
		else
		{
			antennaReadCount = 3;
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <antennaReadCount.3296>
		}
	}

	lastAntennaConnectionState = ant;
     796:	8d 81       	ldd	r24, Y+5	; 0x05
     798:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <lastAntennaConnectionState.3295>

	system_tick();
     79c:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <system_tick>

	if(g_sleeping)
     7a0:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <g_sleeping>
     7a4:	88 23       	and	r24, r24
     7a6:	a9 f1       	breq	.+106    	; 0x812 <__vector_1+0x11c>
	{
		if(g_seconds_left_to_sleep)
     7a8:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <g_seconds_left_to_sleep>
     7ac:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <g_seconds_left_to_sleep+0x1>
     7b0:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <g_seconds_left_to_sleep+0x2>
     7b4:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <g_seconds_left_to_sleep+0x3>
     7b8:	89 2b       	or	r24, r25
     7ba:	8a 2b       	or	r24, r26
     7bc:	8b 2b       	or	r24, r27
     7be:	99 f0       	breq	.+38     	; 0x7e6 <__vector_1+0xf0>
		{
			g_seconds_left_to_sleep--;
     7c0:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <g_seconds_left_to_sleep>
     7c4:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <g_seconds_left_to_sleep+0x1>
     7c8:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <g_seconds_left_to_sleep+0x2>
     7cc:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <g_seconds_left_to_sleep+0x3>
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	a1 09       	sbc	r26, r1
     7d4:	b1 09       	sbc	r27, r1
     7d6:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <g_seconds_left_to_sleep>
     7da:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <g_seconds_left_to_sleep+0x1>
     7de:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <g_seconds_left_to_sleep+0x2>
     7e2:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <g_seconds_left_to_sleep+0x3>
		}

		if(!g_seconds_left_to_sleep || g_antenna_connection_changed)
     7e6:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <g_seconds_left_to_sleep>
     7ea:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <g_seconds_left_to_sleep+0x1>
     7ee:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <g_seconds_left_to_sleep+0x2>
     7f2:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <g_seconds_left_to_sleep+0x3>
     7f6:	89 2b       	or	r24, r25
     7f8:	8a 2b       	or	r24, r26
     7fa:	8b 2b       	or	r24, r27
     7fc:	29 f0       	breq	.+10     	; 0x808 <__vector_1+0x112>
     7fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <g_antenna_connection_changed>
     802:	88 23       	and	r24, r24
     804:	09 f4       	brne	.+2      	; 0x808 <__vector_1+0x112>
     806:	24 c3       	rjmp	.+1608   	; 0xe50 <__stack+0x551>
		{
			g_go_to_sleep = FALSE;
     808:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <g_go_to_sleep>
			g_sleeping = FALSE;
     80c:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <g_sleeping>
			{
				g_report_seconds = TRUE;
			}
		}
	}
}
     810:	1f c3       	rjmp	.+1598   	; 0xe50 <__stack+0x551>
	}
	else
	{
		time_t temp_time;

		if(g_update_timeout_seconds)
     812:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_update_timeout_seconds>
     816:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <g_update_timeout_seconds+0x1>
     81a:	89 2b       	or	r24, r25
     81c:	49 f0       	breq	.+18     	; 0x830 <__vector_1+0x13a>
		{
			g_update_timeout_seconds--;
     81e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_update_timeout_seconds>
     822:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <g_update_timeout_seconds+0x1>
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <g_update_timeout_seconds+0x1>
     82c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_update_timeout_seconds>
		}

		if(g_event_commenced)
     830:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <g_event_commenced>
     834:	88 23       	and	r24, r24
     836:	09 f4       	brne	.+2      	; 0x83a <__vector_1+0x144>
     838:	4c c0       	rjmp	.+152    	; 0x8d2 <__vector_1+0x1dc>
		{
			if(g_event_finish_time && !g_check_for_next_event && !g_shutting_down_wifi)
     83a:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <g_event_finish_time>
     83e:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <g_event_finish_time+0x1>
     842:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <g_event_finish_time+0x2>
     846:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <g_event_finish_time+0x3>
     84a:	89 2b       	or	r24, r25
     84c:	8a 2b       	or	r24, r26
     84e:	8b 2b       	or	r24, r27
     850:	09 f4       	brne	.+2      	; 0x854 <__vector_1+0x15e>
     852:	3f c0       	rjmp	.+126    	; 0x8d2 <__vector_1+0x1dc>
     854:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <g_check_for_next_event>
     858:	88 23       	and	r24, r24
     85a:	d9 f5       	brne	.+118    	; 0x8d2 <__vector_1+0x1dc>
     85c:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <g_shutting_down_wifi>
     860:	88 23       	and	r24, r24
     862:	b9 f5       	brne	.+110    	; 0x8d2 <__vector_1+0x1dc>
			{
				time(&temp_time);
     864:	ce 01       	movw	r24, r28
     866:	0a 96       	adiw	r24, 0x0a	; 10
     868:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <time>

				if(temp_time >= g_event_finish_time)
     86c:	2a 85       	ldd	r18, Y+10	; 0x0a
     86e:	3b 85       	ldd	r19, Y+11	; 0x0b
     870:	4c 85       	ldd	r20, Y+12	; 0x0c
     872:	5d 85       	ldd	r21, Y+13	; 0x0d
     874:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <g_event_finish_time>
     878:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <g_event_finish_time+0x1>
     87c:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <g_event_finish_time+0x2>
     880:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <g_event_finish_time+0x3>
     884:	28 17       	cp	r18, r24
     886:	39 07       	cpc	r19, r25
     888:	4a 07       	cpc	r20, r26
     88a:	5b 07       	cpc	r21, r27
     88c:	10 f1       	brcs	.+68     	; 0x8d2 <__vector_1+0x1dc>
				{
					g_last_status_code = STATUS_CODE_EVENT_FINISHED;
     88e:	8c ef       	ldi	r24, 0xFC	; 252
     890:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
					g_on_the_air = 0;
     894:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <g_on_the_air>
     898:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <g_on_the_air+0x1>
     89c:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <g_on_the_air+0x2>
     8a0:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <g_on_the_air+0x3>
					keyTransmitter(OFF);
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <keyTransmitter>
					g_event_enabled = FALSE;
     8aa:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <g_event_enabled>
					g_event_commenced = FALSE;
     8ae:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <g_event_commenced>
					g_check_for_next_event = TRUE;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <g_check_for_next_event>
					g_update_timeout_seconds = 90;
     8b8:	8a e5       	ldi	r24, 0x5A	; 90
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <g_update_timeout_seconds+0x1>
     8c0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_update_timeout_seconds>
					if(g_wifi_active)
     8c4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_wifi_active>
     8c8:	88 23       	and	r24, r24
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <__vector_1+0x1dc>
					{
						g_WiFi_shutdown_seconds = 60;
     8cc:	8c e3       	ldi	r24, 0x3C	; 60
     8ce:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_WiFi_shutdown_seconds>
					}
				}
			}
		}

		if(g_event_enabled)
     8d2:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <g_event_enabled>
     8d6:	88 23       	and	r24, r24
     8d8:	09 f4       	brne	.+2      	; 0x8dc <__vector_1+0x1e6>
     8da:	4c c2       	rjmp	.+1176   	; 0xd74 <__stack+0x475>
		{
			if(g_event_commenced)
     8dc:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <g_event_commenced>
     8e0:	88 23       	and	r24, r24
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <__vector_1+0x1f0>
     8e4:	b6 c1       	rjmp	.+876    	; 0xc52 <__stack+0x353>
			{
				BOOL repeat;

				if(g_sendID_seconds_countdown)
     8e6:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <g_sendID_seconds_countdown>
     8ea:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <g_sendID_seconds_countdown+0x1>
     8ee:	89 2b       	or	r24, r25
     8f0:	49 f0       	breq	.+18     	; 0x904 <__stack+0x5>
				{
					g_sendID_seconds_countdown--;
     8f2:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <g_sendID_seconds_countdown>
     8f6:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <g_sendID_seconds_countdown+0x1>
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <g_sendID_seconds_countdown+0x1>
     900:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <g_sendID_seconds_countdown>
				}

				if(g_on_the_air)
     904:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     908:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     90c:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     910:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     914:	89 2b       	or	r24, r25
     916:	8a 2b       	or	r24, r26
     918:	8b 2b       	or	r24, r27
     91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0x1f>
     91c:	2b c2       	rjmp	.+1110   	; 0xd74 <__stack+0x475>
				{
					if(g_on_the_air > 0)    /* on the air */
     91e:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     922:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     926:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     92a:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	1a 06       	cpc	r1, r26
     934:	1b 06       	cpc	r1, r27
     936:	0c f0       	brlt	.+2      	; 0x93a <__stack+0x3b>
     938:	3a c1       	rjmp	.+628    	; 0xbae <__stack+0x2af>
					{
						g_on_the_air--;
     93a:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     93e:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     942:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     946:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	a1 09       	sbc	r26, r1
     94e:	b1 09       	sbc	r27, r1
     950:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
     954:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
     958:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
     95c:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>

						if(!g_sendID_seconds_countdown && g_time_needed_for_ID)
     960:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <g_sendID_seconds_countdown>
     964:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <g_sendID_seconds_countdown+0x1>
     968:	89 2b       	or	r24, r25
     96a:	b9 f5       	brne	.+110    	; 0x9da <__stack+0xdb>
     96c:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <g_time_needed_for_ID>
     970:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <g_time_needed_for_ID+0x1>
     974:	89 2b       	or	r24, r25
     976:	89 f1       	breq	.+98     	; 0x9da <__stack+0xdb>
						{
							if(g_on_the_air == g_time_needed_for_ID)    /* wait until the end of a transmission */
     978:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <g_time_needed_for_ID>
     97c:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <g_time_needed_for_ID+0x1>
     980:	9c 01       	movw	r18, r24
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     98a:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     98e:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     992:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     996:	28 17       	cp	r18, r24
     998:	39 07       	cpc	r19, r25
     99a:	4a 07       	cpc	r20, r26
     99c:	5b 07       	cpc	r21, r27
     99e:	e9 f4       	brne	.+58     	; 0x9da <__stack+0xdb>
							{
								g_last_status_code = STATUS_CODE_SENDING_ID;
     9a0:	8f ee       	ldi	r24, 0xEF	; 239
     9a2:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
								g_sendID_seconds_countdown = g_ID_period_seconds;
     9a6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_ID_period_seconds>
     9aa:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_ID_period_seconds+0x1>
     9ae:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <g_sendID_seconds_countdown+0x1>
     9b2:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <g_sendID_seconds_countdown>
								g_code_throttle = throttleValue(g_id_codespeed);
     9b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_id_codespeed>
     9ba:	0e 94 8d 1a 	call	0x351a	; 0x351a <throttleValue>
     9be:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_code_throttle+0x1>
     9c2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_code_throttle>
								repeat = FALSE;
     9c6:	1e 86       	std	Y+14, r1	; 0x0e
								makeMorse(g_messages_text[STATION_ID], &repeat, NULL);  /* Send only once */
     9c8:	ce 01       	movw	r24, r28
     9ca:	0e 96       	adiw	r24, 0x0e	; 14
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	bc 01       	movw	r22, r24
     9d2:	8d ee       	ldi	r24, 0xED	; 237
     9d4:	93 e0       	ldi	r25, 0x03	; 3
     9d6:	0e 94 cf 1b 	call	0x379e	; 0x379e <makeMorse>
							}
						}


						if(!g_on_the_air)
     9da:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     9de:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     9e2:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     9e6:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     9ea:	89 2b       	or	r24, r25
     9ec:	8a 2b       	or	r24, r26
     9ee:	8b 2b       	or	r24, r27
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__stack+0xf5>
     9f2:	c0 c1       	rjmp	.+896    	; 0xd74 <__stack+0x475>
						{
							if(g_off_air_seconds)
     9f4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_off_air_seconds>
     9f8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <g_off_air_seconds+0x1>
     9fc:	89 2b       	or	r24, r25
     9fe:	09 f4       	brne	.+2      	; 0xa02 <__stack+0x103>
     a00:	bd c0       	rjmp	.+378    	; 0xb7c <__stack+0x27d>
							{
								keyTransmitter(OFF);
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <keyTransmitter>
								g_on_the_air -= g_off_air_seconds;
     a08:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_off_air_seconds>
     a0c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <g_off_air_seconds+0x1>
     a10:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <g_on_the_air>
     a14:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <g_on_the_air+0x1>
     a18:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <g_on_the_air+0x2>
     a1c:	50 91 15 04 	lds	r21, 0x0415	; 0x800415 <g_on_the_air+0x3>
     a20:	09 2e       	mov	r0, r25
     a22:	00 0c       	add	r0, r0
     a24:	aa 0b       	sbc	r26, r26
     a26:	bb 0b       	sbc	r27, r27
     a28:	79 01       	movw	r14, r18
     a2a:	8a 01       	movw	r16, r20
     a2c:	e8 1a       	sub	r14, r24
     a2e:	f9 0a       	sbc	r15, r25
     a30:	0a 0b       	sbc	r16, r26
     a32:	1b 0b       	sbc	r17, r27
     a34:	d8 01       	movw	r26, r16
     a36:	c7 01       	movw	r24, r14
     a38:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
     a3c:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
     a40:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
     a44:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>
								repeat = TRUE;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	8e 87       	std	Y+14, r24	; 0x0e
								makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);    /* Reset pattern to start */
     a4c:	ce 01       	movw	r24, r28
     a4e:	0e 96       	adiw	r24, 0x0e	; 14
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	bc 01       	movw	r22, r24
     a56:	88 ed       	ldi	r24, 0xD8	; 216
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	0e 94 cf 1b 	call	0x379e	; 0x379e <makeMorse>
								g_last_status_code = STATUS_CODE_EVENT_STARTED_WAITING_FOR_TIME_SLOT;
     a5e:	8e ef       	ldi	r24, 0xFE	; 254
     a60:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>


								/* Enable sleep during off-the-air periods */
								int32_t timeRemaining = 0;
     a64:	19 82       	std	Y+1, r1	; 0x01
     a66:	1a 82       	std	Y+2, r1	; 0x02
     a68:	1b 82       	std	Y+3, r1	; 0x03
     a6a:	1c 82       	std	Y+4, r1	; 0x04
								time(&temp_time);
     a6c:	ce 01       	movw	r24, r28
     a6e:	0a 96       	adiw	r24, 0x0a	; 10
     a70:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <time>
								if(temp_time < g_event_finish_time)
     a74:	2a 85       	ldd	r18, Y+10	; 0x0a
     a76:	3b 85       	ldd	r19, Y+11	; 0x0b
     a78:	4c 85       	ldd	r20, Y+12	; 0x0c
     a7a:	5d 85       	ldd	r21, Y+13	; 0x0d
     a7c:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <g_event_finish_time>
     a80:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <g_event_finish_time+0x1>
     a84:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <g_event_finish_time+0x2>
     a88:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <g_event_finish_time+0x3>
     a8c:	28 17       	cp	r18, r24
     a8e:	39 07       	cpc	r19, r25
     a90:	4a 07       	cpc	r20, r26
     a92:	5b 07       	cpc	r21, r27
     a94:	b0 f4       	brcc	.+44     	; 0xac2 <__stack+0x1c3>
								{
									timeRemaining = timeDif(g_event_finish_time, temp_time);
     a96:	2a 85       	ldd	r18, Y+10	; 0x0a
     a98:	3b 85       	ldd	r19, Y+11	; 0x0b
     a9a:	4c 85       	ldd	r20, Y+12	; 0x0c
     a9c:	5d 85       	ldd	r21, Y+13	; 0x0d
     a9e:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <g_event_finish_time>
     aa2:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <g_event_finish_time+0x1>
     aa6:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <g_event_finish_time+0x2>
     aaa:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <g_event_finish_time+0x3>
     aae:	bc 01       	movw	r22, r24
     ab0:	cd 01       	movw	r24, r26
     ab2:	0e 94 2f 23 	call	0x465e	; 0x465e <timeDif>
     ab6:	dc 01       	movw	r26, r24
     ab8:	cb 01       	movw	r24, r22
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	9a 83       	std	Y+2, r25	; 0x02
     abe:	ab 83       	std	Y+3, r26	; 0x03
     ac0:	bc 83       	std	Y+4, r27	; 0x04
								}

								/* Don't sleep for the last cycle to ensure that the event doesn't end while
								 * the transmitter is sleeping - which can cause problems with loading the next event */
								if(timeRemaining > (g_off_air_seconds + g_on_air_seconds + 15))
     ac2:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <g_off_air_seconds>
     ac6:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <g_off_air_seconds+0x1>
     aca:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_on_air_seconds>
     ace:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
     ad2:	82 0f       	add	r24, r18
     ad4:	93 1f       	adc	r25, r19
     ad6:	0f 96       	adiw	r24, 0x0f	; 15
     ad8:	9c 01       	movw	r18, r24
     ada:	99 0f       	add	r25, r25
     adc:	44 0b       	sbc	r20, r20
     ade:	55 0b       	sbc	r21, r21
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	ab 81       	ldd	r26, Y+3	; 0x03
     ae6:	bc 81       	ldd	r27, Y+4	; 0x04
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	4a 07       	cpc	r20, r26
     aee:	5b 07       	cpc	r21, r27
     af0:	0c f0       	brlt	.+2      	; 0xaf4 <__stack+0x1f5>
     af2:	40 c1       	rjmp	.+640    	; 0xd74 <__stack+0x475>
								{
									if((g_off_air_seconds > 15) && !g_WiFi_shutdown_seconds)
     af4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_off_air_seconds>
     af8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <g_off_air_seconds+0x1>
     afc:	40 97       	sbiw	r24, 0x10	; 16
     afe:	0c f4       	brge	.+2      	; 0xb02 <__stack+0x203>
     b00:	39 c1       	rjmp	.+626    	; 0xd74 <__stack+0x475>
     b02:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_WiFi_shutdown_seconds>
     b06:	88 23       	and	r24, r24
     b08:	09 f0       	breq	.+2      	; 0xb0c <__stack+0x20d>
     b0a:	34 c1       	rjmp	.+616    	; 0xd74 <__stack+0x475>
									{
										g_seconds_to_sleep = (time_t)(g_off_air_seconds - 10);
     b0c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_off_air_seconds>
     b10:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <g_off_air_seconds+0x1>
     b14:	0a 97       	sbiw	r24, 0x0a	; 10
     b16:	09 2e       	mov	r0, r25
     b18:	00 0c       	add	r0, r0
     b1a:	aa 0b       	sbc	r26, r26
     b1c:	bb 0b       	sbc	r27, r27
     b1e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <g_seconds_to_sleep>
     b22:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <g_seconds_to_sleep+0x1>
     b26:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <g_seconds_to_sleep+0x2>
     b2a:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <g_seconds_to_sleep+0x3>
										g_sleepType = SLEEP_UNTIL_NEXT_XMSN;
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <g_sleepType>
										g_go_to_sleep = TRUE;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <g_go_to_sleep>
										g_sendID_seconds_countdown = MAX(0, g_sendID_seconds_countdown - (int)g_seconds_to_sleep);
     b3a:	1f 82       	std	Y+7, r1	; 0x07
     b3c:	1e 82       	std	Y+6, r1	; 0x06
     b3e:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <g_sendID_seconds_countdown>
     b42:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <g_sendID_seconds_countdown+0x1>
     b46:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <g_seconds_to_sleep>
     b4a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_seconds_to_sleep+0x1>
     b4e:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <g_seconds_to_sleep+0x2>
     b52:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <g_seconds_to_sleep+0x3>
     b56:	89 01       	movw	r16, r18
     b58:	08 1b       	sub	r16, r24
     b5a:	19 0b       	sbc	r17, r25
     b5c:	c8 01       	movw	r24, r16
     b5e:	99 87       	std	Y+9, r25	; 0x09
     b60:	88 87       	std	Y+8, r24	; 0x08
     b62:	28 85       	ldd	r18, Y+8	; 0x08
     b64:	39 85       	ldd	r19, Y+9	; 0x09
     b66:	8e 81       	ldd	r24, Y+6	; 0x06
     b68:	9f 81       	ldd	r25, Y+7	; 0x07
     b6a:	82 17       	cp	r24, r18
     b6c:	93 07       	cpc	r25, r19
     b6e:	0c f4       	brge	.+2      	; 0xb72 <__stack+0x273>
     b70:	c9 01       	movw	r24, r18
     b72:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <g_sendID_seconds_countdown+0x1>
     b76:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <g_sendID_seconds_countdown>
     b7a:	fc c0       	rjmp	.+504    	; 0xd74 <__stack+0x475>
									}
								}
							}
							else
							{
								g_on_the_air = g_on_air_seconds;
     b7c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_on_air_seconds>
     b80:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
     b84:	09 2e       	mov	r0, r25
     b86:	00 0c       	add	r0, r0
     b88:	aa 0b       	sbc	r26, r26
     b8a:	bb 0b       	sbc	r27, r27
     b8c:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
     b90:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
     b94:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
     b98:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>
								g_code_throttle = throttleValue(g_pattern_codespeed);
     b9c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_pattern_codespeed>
     ba0:	0e 94 8d 1a 	call	0x351a	; 0x351a <throttleValue>
     ba4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_code_throttle+0x1>
     ba8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_code_throttle>
     bac:	e3 c0       	rjmp	.+454    	; 0xd74 <__stack+0x475>
							}
						}
					}
					else if(g_on_the_air < 0)   /* off the air - g_on_the_air = 0 means all transmissions are disabled */
     bae:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     bb2:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     bb6:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     bba:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     bbe:	bb 23       	and	r27, r27
     bc0:	0c f0       	brlt	.+2      	; 0xbc4 <__stack+0x2c5>
     bc2:	d8 c0       	rjmp	.+432    	; 0xd74 <__stack+0x475>
					{
						g_on_the_air++;
     bc4:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     bc8:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     bcc:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     bd0:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	a1 1d       	adc	r26, r1
     bd8:	b1 1d       	adc	r27, r1
     bda:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
     bde:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
     be2:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
     be6:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>

						if(!g_on_the_air)       /* off-the-air time has expired */
     bea:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     bee:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     bf2:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     bf6:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     bfa:	89 2b       	or	r24, r25
     bfc:	8a 2b       	or	r24, r26
     bfe:	8b 2b       	or	r24, r27
     c00:	09 f0       	breq	.+2      	; 0xc04 <__stack+0x305>
     c02:	b8 c0       	rjmp	.+368    	; 0xd74 <__stack+0x475>
						{
							g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
     c04:	8d ef       	ldi	r24, 0xFD	; 253
     c06:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
							g_on_the_air = g_on_air_seconds;
     c0a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_on_air_seconds>
     c0e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
     c12:	09 2e       	mov	r0, r25
     c14:	00 0c       	add	r0, r0
     c16:	aa 0b       	sbc	r26, r26
     c18:	bb 0b       	sbc	r27, r27
     c1a:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
     c1e:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
     c22:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
     c26:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>
							g_code_throttle = throttleValue(g_pattern_codespeed);
     c2a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_pattern_codespeed>
     c2e:	0e 94 8d 1a 	call	0x351a	; 0x351a <throttleValue>
     c32:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_code_throttle+0x1>
     c36:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_code_throttle>
							BOOL repeat = TRUE;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	8f 87       	std	Y+15, r24	; 0x0f
							makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
     c3e:	ce 01       	movw	r24, r28
     c40:	0f 96       	adiw	r24, 0x0f	; 15
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	bc 01       	movw	r22, r24
     c48:	88 ed       	ldi	r24, 0xD8	; 216
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	0e 94 cf 1b 	call	0x379e	; 0x379e <makeMorse>
     c50:	91 c0       	rjmp	.+290    	; 0xd74 <__stack+0x475>
						}
					}
				}
			}
			else if(g_event_start_time > 0) /* off the air - waiting for the start time to arrive */
     c52:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <g_event_start_time>
     c56:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <g_event_start_time+0x1>
     c5a:	a0 91 08 04 	lds	r26, 0x0408	; 0x800408 <g_event_start_time+0x2>
     c5e:	b0 91 09 04 	lds	r27, 0x0409	; 0x800409 <g_event_start_time+0x3>
     c62:	89 2b       	or	r24, r25
     c64:	8a 2b       	or	r24, r26
     c66:	8b 2b       	or	r24, r27
     c68:	09 f4       	brne	.+2      	; 0xc6c <__stack+0x36d>
     c6a:	84 c0       	rjmp	.+264    	; 0xd74 <__stack+0x475>
			{
				time(&temp_time);
     c6c:	ce 01       	movw	r24, r28
     c6e:	0a 96       	adiw	r24, 0x0a	; 10
     c70:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <time>

				if(temp_time >= g_event_start_time)
     c74:	2a 85       	ldd	r18, Y+10	; 0x0a
     c76:	3b 85       	ldd	r19, Y+11	; 0x0b
     c78:	4c 85       	ldd	r20, Y+12	; 0x0c
     c7a:	5d 85       	ldd	r21, Y+13	; 0x0d
     c7c:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <g_event_start_time>
     c80:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <g_event_start_time+0x1>
     c84:	a0 91 08 04 	lds	r26, 0x0408	; 0x800408 <g_event_start_time+0x2>
     c88:	b0 91 09 04 	lds	r27, 0x0409	; 0x800409 <g_event_start_time+0x3>
     c8c:	28 17       	cp	r18, r24
     c8e:	39 07       	cpc	r19, r25
     c90:	4a 07       	cpc	r20, r26
     c92:	5b 07       	cpc	r21, r27
     c94:	08 f4       	brcc	.+2      	; 0xc98 <__stack+0x399>
     c96:	6e c0       	rjmp	.+220    	; 0xd74 <__stack+0x475>
				{
					if(g_intra_cycle_delay_time)
     c98:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <g_intra_cycle_delay_time>
     c9c:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <g_intra_cycle_delay_time+0x1>
     ca0:	89 2b       	or	r24, r25
     ca2:	71 f1       	breq	.+92     	; 0xd00 <__stack+0x401>
					{
						g_last_status_code = STATUS_CODE_EVENT_STARTED_WAITING_FOR_TIME_SLOT;
     ca4:	8e ef       	ldi	r24, 0xFE	; 254
     ca6:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
						g_on_the_air = -g_intra_cycle_delay_time;
     caa:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <g_intra_cycle_delay_time>
     cae:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <g_intra_cycle_delay_time+0x1>
     cb2:	91 95       	neg	r25
     cb4:	81 95       	neg	r24
     cb6:	91 09       	sbc	r25, r1
     cb8:	09 2e       	mov	r0, r25
     cba:	00 0c       	add	r0, r0
     cbc:	aa 0b       	sbc	r26, r26
     cbe:	bb 0b       	sbc	r27, r27
     cc0:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
     cc4:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
     cc8:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
     ccc:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>
						g_sendID_seconds_countdown = g_intra_cycle_delay_time + g_on_air_seconds - g_time_needed_for_ID;
     cd0:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <g_intra_cycle_delay_time>
     cd4:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <g_intra_cycle_delay_time+0x1>
     cd8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_on_air_seconds>
     cdc:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
     ce0:	82 0f       	add	r24, r18
     ce2:	93 1f       	adc	r25, r19
     ce4:	9c 01       	movw	r18, r24
     ce6:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <g_time_needed_for_ID>
     cea:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <g_time_needed_for_ID+0x1>
     cee:	a9 01       	movw	r20, r18
     cf0:	48 1b       	sub	r20, r24
     cf2:	59 0b       	sbc	r21, r25
     cf4:	ca 01       	movw	r24, r20
     cf6:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <g_sendID_seconds_countdown+0x1>
     cfa:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <g_sendID_seconds_countdown>
     cfe:	37 c0       	rjmp	.+110    	; 0xd6e <__stack+0x46f>
					}
					else
					{
						g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
     d00:	8d ef       	ldi	r24, 0xFD	; 253
     d02:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
						g_on_the_air = g_on_air_seconds;
     d06:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_on_air_seconds>
     d0a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
     d0e:	09 2e       	mov	r0, r25
     d10:	00 0c       	add	r0, r0
     d12:	aa 0b       	sbc	r26, r26
     d14:	bb 0b       	sbc	r27, r27
     d16:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
     d1a:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
     d1e:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
     d22:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>
						g_sendID_seconds_countdown = g_on_air_seconds - g_time_needed_for_ID;
     d26:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_on_air_seconds>
     d2a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
     d2e:	9c 01       	movw	r18, r24
     d30:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <g_time_needed_for_ID>
     d34:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <g_time_needed_for_ID+0x1>
     d38:	79 01       	movw	r14, r18
     d3a:	e8 1a       	sub	r14, r24
     d3c:	f9 0a       	sbc	r15, r25
     d3e:	c7 01       	movw	r24, r14
     d40:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <g_sendID_seconds_countdown+0x1>
     d44:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <g_sendID_seconds_countdown>
						g_code_throttle = throttleValue(g_pattern_codespeed);
     d48:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_pattern_codespeed>
     d4c:	0e 94 8d 1a 	call	0x351a	; 0x351a <throttleValue>
     d50:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_code_throttle+0x1>
     d54:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_code_throttle>
						BOOL repeat = TRUE;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	88 8b       	std	Y+16, r24	; 0x10
						makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
     d5c:	ce 01       	movw	r24, r28
     d5e:	40 96       	adiw	r24, 0x10	; 16
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	bc 01       	movw	r22, r24
     d66:	88 ed       	ldi	r24, 0xD8	; 216
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	0e 94 cf 1b 	call	0x379e	; 0x379e <makeMorse>
					}

					g_event_commenced = TRUE;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <g_event_commenced>


		/**************************************
		 * Delay before re-enabling linkbus receive
		 ***************************************/
		if(g_wifi_enable_delay)
     d74:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <g_wifi_enable_delay>
     d78:	88 23       	and	r24, r24
     d7a:	f1 f0       	breq	.+60     	; 0xdb8 <__stack+0x4b9>
		{
			g_wifi_enable_delay--;
     d7c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <g_wifi_enable_delay>
     d80:	81 50       	subi	r24, 0x01	; 1
     d82:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <g_wifi_enable_delay>

			if(g_wifi_enable_delay == (LINKBUS_POWERUP_DELAY_SECONDS - 1))
     d86:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <g_wifi_enable_delay>
     d8a:	85 30       	cpi	r24, 0x05	; 5
     d8c:	39 f4       	brne	.+14     	; 0xd9c <__stack+0x49d>
			{
				wifi_power(ON);     /* power on WiFi */
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	0e 94 19 25 	call	0x4a32	; 0x4a32 <wifi_power>
				wifi_reset(OFF);    /* bring WiFi out of reset */
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	0e 94 13 25 	call	0x4a26	; 0x4a26 <wifi_reset>
			{
				g_report_seconds = TRUE;
			}
		}
	}
}
     d9a:	5a c0       	rjmp	.+180    	; 0xe50 <__stack+0x551>
			if(g_wifi_enable_delay == (LINKBUS_POWERUP_DELAY_SECONDS - 1))
			{
				wifi_power(ON);     /* power on WiFi */
				wifi_reset(OFF);    /* bring WiFi out of reset */
			}
			else if(!g_wifi_enable_delay)
     d9c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <g_wifi_enable_delay>
     da0:	88 23       	and	r24, r24
     da2:	09 f0       	breq	.+2      	; 0xda6 <__stack+0x4a7>
     da4:	55 c0       	rjmp	.+170    	; 0xe50 <__stack+0x551>
			{
				linkbus_init(BAUD);
     da6:	60 e8       	ldi	r22, 0x80	; 128
     da8:	75 e2       	ldi	r23, 0x25	; 37
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	ba da       	rcall	.-2700   	; 0x324 <linkbus_init>
				g_calibrate_baud = TRUE;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <g_calibrate_baud>
			{
				g_report_seconds = TRUE;
			}
		}
	}
}
     db6:	4c c0       	rjmp	.+152    	; 0xe50 <__stack+0x551>
				g_calibrate_baud = TRUE;
			}
		}
		else
		{
			if(!g_update_timeout_seconds || g_shutting_down_wifi || (!g_check_for_next_event && !g_waiting_for_next_event))
     db8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_update_timeout_seconds>
     dbc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <g_update_timeout_seconds+0x1>
     dc0:	89 2b       	or	r24, r25
     dc2:	61 f0       	breq	.+24     	; 0xddc <__stack+0x4dd>
     dc4:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <g_shutting_down_wifi>
     dc8:	88 23       	and	r24, r24
     dca:	41 f4       	brne	.+16     	; 0xddc <__stack+0x4dd>
     dcc:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <g_check_for_next_event>
     dd0:	88 23       	and	r24, r24
     dd2:	b9 f5       	brne	.+110    	; 0xe42 <__stack+0x543>
     dd4:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <g_waiting_for_next_event>
     dd8:	88 23       	and	r24, r24
     dda:	99 f5       	brne	.+102    	; 0xe42 <__stack+0x543>
			{
				if(g_WiFi_shutdown_seconds)
     ddc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_WiFi_shutdown_seconds>
     de0:	88 23       	and	r24, r24
     de2:	79 f1       	breq	.+94     	; 0xe42 <__stack+0x543>
				{
					g_WiFi_shutdown_seconds--;
     de4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_WiFi_shutdown_seconds>
     de8:	81 50       	subi	r24, 0x01	; 1
     dea:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_WiFi_shutdown_seconds>

					if(!g_WiFi_shutdown_seconds)
     dee:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_WiFi_shutdown_seconds>
     df2:	88 23       	and	r24, r24
     df4:	31 f5       	brne	.+76     	; 0xe42 <__stack+0x543>
					{
						wifi_reset(ON);     /* put WiFi into reset */
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	0e 94 13 25 	call	0x4a26	; 0x4a26 <wifi_reset>
						wifi_power(OFF);    /* power off WiFi */
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	0e 94 19 25 	call	0x4a32	; 0x4a32 <wifi_power>
						g_shutting_down_wifi = FALSE;
     e02:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <g_shutting_down_wifi>

						/* If an event hasn't been enabled by the time that WiFi shuts
						 *  down, then the transmitter will never run. Just sleep indefinitely
						 */
						if(!g_event_enabled)
     e06:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <g_event_enabled>
     e0a:	88 23       	and	r24, r24
     e0c:	91 f4       	brne	.+36     	; 0xe32 <__stack+0x533>
						{
							g_sleepType = SLEEP_FOREVER;
     e0e:	84 e0       	ldi	r24, 0x04	; 4
     e10:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <g_sleepType>
							g_go_to_sleep = TRUE;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <g_go_to_sleep>
							g_seconds_to_sleep = MAX_TIME;
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	9f ef       	ldi	r25, 0xFF	; 255
     e1e:	dc 01       	movw	r26, r24
     e20:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <g_seconds_to_sleep>
     e24:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <g_seconds_to_sleep+0x1>
     e28:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <g_seconds_to_sleep+0x2>
     e2c:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <g_seconds_to_sleep+0x3>
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <__stack+0x53f>
						}
						else if(g_sleepType == SLEEP_AFTER_WIFI_GOES_OFF)
     e32:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <g_sleepType>
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	11 f4       	brne	.+4      	; 0xe3e <__stack+0x53f>
						{
							eventEnabled(); /* Sets sleep time appropriately */
     e3a:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eventEnabled>
						}

						g_wifi_active = FALSE;
     e3e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_wifi_active>
					}
				}
			}

			if(g_wifi_active)
     e42:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_wifi_active>
     e46:	88 23       	and	r24, r24
     e48:	19 f0       	breq	.+6      	; 0xe50 <__stack+0x551>
			{
				g_report_seconds = TRUE;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <g_report_seconds>
			}
		}
	}
}
     e50:	00 00       	nop
     e52:	60 96       	adiw	r28, 0x10	; 16
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	0f 90       	pop	r0
     e84:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e88:	0f 90       	pop	r0
     e8a:	1f 90       	pop	r1
     e8c:	18 95       	reti

00000e8e <__vector_8>:
 * Timer/Counter2 Compare Match A ISR
 *
 * Handles periodic tasks not requiring precise timing.
 ************************************************************************/
ISR( TIMER2_COMPB_vect )
{
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	00 d0       	rcall	.+0      	; 0xebe <__vector_8+0x30>
     ebe:	1f 92       	push	r1
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	static int8_t indexConversionInProcess;
	static uint16_t codeInc = 0;
	static uint8_t modulationToggle = 0;
	BOOL repeat, finished;

	if(g_util_tick_countdown)
     ec4:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <g_util_tick_countdown>
     ec8:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <g_util_tick_countdown+0x1>
     ecc:	89 2b       	or	r24, r25
     ece:	49 f0       	breq	.+18     	; 0xee2 <__vector_8+0x54>
	{
		g_util_tick_countdown--;
     ed0:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <g_util_tick_countdown>
     ed4:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <g_util_tick_countdown+0x1>
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <g_util_tick_countdown+0x1>
     ede:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <g_util_tick_countdown>
	}

	if(g_baud_count)
     ee2:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <g_baud_count>
     ee6:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <g_baud_count+0x1>
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	29 f0       	breq	.+10     	; 0xef8 <__vector_8+0x6a>
	{
		g_baud_count--;
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <g_baud_count+0x1>
     ef4:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <g_baud_count>
	}

	static BOOL key = FALSE;

	if(g_event_enabled && g_event_commenced)
     ef8:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <g_event_enabled>
     efc:	88 23       	and	r24, r24
     efe:	09 f4       	brne	.+2      	; 0xf02 <__vector_8+0x74>
     f00:	86 c0       	rjmp	.+268    	; 0x100e <__vector_8+0x180>
     f02:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <g_event_commenced>
     f06:	88 23       	and	r24, r24
     f08:	09 f4       	brne	.+2      	; 0xf0c <__vector_8+0x7e>
     f0a:	81 c0       	rjmp	.+258    	; 0x100e <__vector_8+0x180>
	{
		if(g_on_the_air > 0)
     f0c:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     f10:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     f14:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     f18:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     f1c:	18 16       	cp	r1, r24
     f1e:	19 06       	cpc	r1, r25
     f20:	1a 06       	cpc	r1, r26
     f22:	1b 06       	cpc	r1, r27
     f24:	0c f0       	brlt	.+2      	; 0xf28 <__vector_8+0x9a>
     f26:	58 c0       	rjmp	.+176    	; 0xfd8 <__vector_8+0x14a>
		{
			if(codeInc)
     f28:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <codeInc.3313>
     f2c:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <codeInc.3313+0x1>
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	09 f4       	brne	.+2      	; 0xf36 <__vector_8+0xa8>
     f34:	44 c0       	rjmp	.+136    	; 0xfbe <__vector_8+0x130>
			{
				codeInc--;
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <codeInc.3313+0x1>
     f3c:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <codeInc.3313>

				if(!codeInc)
     f40:	89 2b       	or	r24, r25
     f42:	09 f0       	breq	.+2      	; 0xf46 <__vector_8+0xb8>
     f44:	64 c0       	rjmp	.+200    	; 0x100e <__vector_8+0x180>
				{
					key = makeMorse(NULL, &repeat, &finished);
     f46:	ae 01       	movw	r20, r28
     f48:	4e 5f       	subi	r20, 0xFE	; 254
     f4a:	5f 4f       	sbci	r21, 0xFF	; 255
     f4c:	be 01       	movw	r22, r28
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 cf 1b 	call	0x379e	; 0x379e <makeMorse>
     f5a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <key.3317>

					if(!repeat && finished) /* ID has completed, so resume pattern */
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	81 11       	cpse	r24, r1
     f62:	25 c0       	rjmp	.+74     	; 0xfae <__vector_8+0x120>
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	88 23       	and	r24, r24
     f68:	11 f1       	breq	.+68     	; 0xfae <__vector_8+0x120>
					{
						g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
     f6a:	8d ef       	ldi	r24, 0xFD	; 253
     f6c:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
						g_code_throttle = throttleValue(g_pattern_codespeed);
     f70:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_pattern_codespeed>
     f74:	0e 94 8d 1a 	call	0x351a	; 0x351a <throttleValue>
     f78:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_code_throttle+0x1>
     f7c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_code_throttle>
						repeat = TRUE;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	89 83       	std	Y+1, r24	; 0x01
						makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	be 01       	movw	r22, r28
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	88 ed       	ldi	r24, 0xD8	; 216
     f90:	93 e0       	ldi	r25, 0x03	; 3
     f92:	0e 94 cf 1b 	call	0x379e	; 0x379e <makeMorse>
						key = makeMorse(NULL, &repeat, &finished);
     f96:	ae 01       	movw	r20, r28
     f98:	4e 5f       	subi	r20, 0xFE	; 254
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	be 01       	movw	r22, r28
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 cf 1b 	call	0x379e	; 0x379e <makeMorse>
     faa:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <key.3317>
					}

					if(key)
     fae:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <key.3317>
     fb2:	88 23       	and	r24, r24
     fb4:	61 f1       	breq	.+88     	; 0x100e <__vector_8+0x180>
					{
						powerToTransmitter(ON);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <powerToTransmitter>
     fbc:	28 c0       	rjmp	.+80     	; 0x100e <__vector_8+0x180>
					}
				}
			}
			else
			{
				keyTransmitter(key);
     fbe:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <key.3317>
     fc2:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <keyTransmitter>
				codeInc = g_code_throttle;
     fc6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_code_throttle>
     fca:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <g_code_throttle+0x1>
     fce:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <codeInc.3313+0x1>
     fd2:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <codeInc.3313>
     fd6:	1b c0       	rjmp	.+54     	; 0x100e <__vector_8+0x180>
			}
		}
		else if(!g_on_the_air)
     fd8:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
     fdc:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
     fe0:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
     fe4:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
     fe8:	89 2b       	or	r24, r25
     fea:	8a 2b       	or	r24, r26
     fec:	8b 2b       	or	r24, r27
     fee:	79 f4       	brne	.+30     	; 0x100e <__vector_8+0x180>
		{
			if(key)
     ff0:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <key.3317>
     ff4:	88 23       	and	r24, r24
     ff6:	59 f0       	breq	.+22     	; 0x100e <__vector_8+0x180>
			{
				key = OFF;
     ff8:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <key.3317>
				keyTransmitter(OFF);
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <keyTransmitter>
				powerToTransmitter(OFF);
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <powerToTransmitter>
				g_last_status_code = STATUS_CODE_EVENT_STARTED_WAITING_FOR_TIME_SLOT;
    1008:	8e ef       	ldi	r24, 0xFE	; 254
    100a:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
			}
		}
	}

	Modulation m = txGetModulation();
    100e:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <txGetModulation>

	if(m != MODE_CW)
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	01 f1       	breq	.+64     	; 0x1056 <__vector_8+0x1c8>
	{
		modulationToggle = !modulationToggle;
    1016:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <modulationToggle.3314>
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	91 11       	cpse	r25, r1
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <modulationToggle.3314>

		if(modulationToggle)
    1024:	91 11       	cpse	r25, r1
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <__vector_8+0x1b2>
		{
			if(m == MODE_AM)
    1028:	81 11       	cpse	r24, r1
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__vector_8+0x1a8>
			{
				txSet2mGateBias(g_mod_up);
    102c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_mod_up>
    1030:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <txSet2mGateBias>
    1034:	10 c0       	rjmp	.+32     	; 0x1056 <__vector_8+0x1c8>
			}
			else if(m == MODE_FM)
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	71 f4       	brne	.+28     	; 0x1056 <__vector_8+0x1c8>
			{
				PORTC = I2C_PINS | (1 << PORTC3);
    103a:	88 e3       	ldi	r24, 0x38	; 56
    103c:	88 b9       	out	0x08, r24	; 8
    103e:	0b c0       	rjmp	.+22     	; 0x1056 <__vector_8+0x1c8>
			}
		}
		else
		{
			if(m == MODE_AM)
    1040:	81 11       	cpse	r24, r1
    1042:	05 c0       	rjmp	.+10     	; 0x104e <__vector_8+0x1c0>
			{
				txSet2mGateBias(g_mod_down);
    1044:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_mod_down>
    1048:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <txSet2mGateBias>
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <__vector_8+0x1c8>
			}
			else if(m == MODE_FM)
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	11 f4       	brne	.+4      	; 0x1056 <__vector_8+0x1c8>
			{
				PORTC = I2C_PINS;
    1052:	80 e3       	ldi	r24, 0x30	; 48
    1054:	88 b9       	out	0x08, r24	; 8
	}

	/**
	 * Handle Periodic ADC Readings
	 * The following algorithm allows multipe ADC channel readings to be performed at different polling intervals. */
	if(!conversionInProcess)
    1056:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <conversionInProcess.3311>
    105a:	81 11       	cpse	r24, r1
    105c:	5f c0       	rjmp	.+190    	; 0x111c <__vector_8+0x28e>
	{
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <indexConversionInProcess.3312>

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
    1064:	1b 82       	std	Y+3, r1	; 0x03
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	85 30       	cpi	r24, 0x05	; 5
    106a:	08 f0       	brcs	.+2      	; 0x106e <__vector_8+0x1e0>
    106c:	d4 c0       	rjmp	.+424    	; 0x1216 <__vector_8+0x388>
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	9f ef       	ldi	r25, 0xFF	; 255
				g_tickCountdownADCFlag[i]--;
			}

			if(g_tickCountdownADCFlag[i] == 0)
			{
				indexConversionInProcess = (int8_t)i;
    1072:	31 e0       	ldi	r19, 0x01	; 1
		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
		{
			if(g_tickCountdownADCFlag[i])
    1074:	eb 81       	ldd	r30, Y+3	; 0x03
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	eb 5e       	subi	r30, 0xEB	; 235
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	40 81       	ld	r20, Z
    1082:	51 81       	ldd	r21, Z+1	; 0x01
    1084:	45 2b       	or	r20, r21
    1086:	61 f0       	breq	.+24     	; 0x10a0 <__vector_8+0x212>
			{
				g_tickCountdownADCFlag[i]--;
    1088:	eb 81       	ldd	r30, Y+3	; 0x03
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	eb 5e       	subi	r30, 0xEB	; 235
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	40 81       	ld	r20, Z
    1096:	51 81       	ldd	r21, Z+1	; 0x01
    1098:	41 50       	subi	r20, 0x01	; 1
    109a:	51 09       	sbc	r21, r1
    109c:	51 83       	std	Z+1, r21	; 0x01
    109e:	40 83       	st	Z, r20
			}

			if(g_tickCountdownADCFlag[i] == 0)
    10a0:	eb 81       	ldd	r30, Y+3	; 0x03
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	eb 5e       	subi	r30, 0xEB	; 235
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	40 81       	ld	r20, Z
    10ae:	51 81       	ldd	r21, Z+1	; 0x01
    10b0:	45 2b       	or	r20, r21
    10b2:	11 f4       	brne	.+4      	; 0x10b8 <__vector_8+0x22a>
			{
				indexConversionInProcess = (int8_t)i;
    10b4:	9b 81       	ldd	r25, Y+3	; 0x03
    10b6:	23 2f       	mov	r18, r19
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	8b 83       	std	Y+3, r24	; 0x03
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	c0 f2       	brcs	.-80     	; 0x1074 <__vector_8+0x1e6>
    10c4:	22 23       	and	r18, r18
    10c6:	09 f4       	brne	.+2      	; 0x10ca <__vector_8+0x23c>
    10c8:	a6 c0       	rjmp	.+332    	; 0x1216 <__vector_8+0x388>
    10ca:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <indexConversionInProcess.3312>
			{
				indexConversionInProcess = (int8_t)i;
			}
		}

		if(indexConversionInProcess >= 0)
    10ce:	99 23       	and	r25, r25
    10d0:	0c f4       	brge	.+2      	; 0x10d4 <__vector_8+0x246>
    10d2:	a1 c0       	rjmp	.+322    	; 0x1216 <__vector_8+0x388>
		{
			g_tickCountdownADCFlag[indexConversionInProcess] = g_adcChannelConversionPeriod_ticks[indexConversionInProcess];    /* reset the tick countdown */
    10d4:	89 2f       	mov	r24, r25
    10d6:	99 0f       	add	r25, r25
    10d8:	99 0b       	sbc	r25, r25
    10da:	9c 01       	movw	r18, r24
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	f9 01       	movw	r30, r18
    10e2:	e1 5b       	subi	r30, 0xB1	; 177
    10e4:	fe 4f       	sbci	r31, 0xFE	; 254
    10e6:	40 81       	ld	r20, Z
    10e8:	51 81       	ldd	r21, Z+1	; 0x01
    10ea:	f9 01       	movw	r30, r18
    10ec:	eb 5e       	subi	r30, 0xEB	; 235
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	51 83       	std	Z+1, r21	; 0x01
    10f2:	40 83       	st	Z, r20
			ADMUX = (ADMUX & 0xF0) | activeADC[indexConversionInProcess];                                                       /* index through all active channels */
    10f4:	ec e7       	ldi	r30, 0x7C	; 124
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	20 81       	ld	r18, Z
    10fa:	20 7f       	andi	r18, 0xF0	; 240
    10fc:	dc 01       	movw	r26, r24
    10fe:	a6 5b       	subi	r26, 0xB6	; 182
    1100:	be 4f       	sbci	r27, 0xFE	; 254
    1102:	9c 91       	ld	r25, X
    1104:	82 2f       	mov	r24, r18
    1106:	89 2b       	or	r24, r25
    1108:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);                                                                                              /*single conversion mode */
    110a:	ea e7       	ldi	r30, 0x7A	; 122
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 64       	ori	r24, 0x40	; 64
    1112:	80 83       	st	Z, r24
			conversionInProcess = TRUE;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <conversionInProcess.3311>
    111a:	7d c0       	rjmp	.+250    	; 0x1216 <__vector_8+0x388>
		}
	}
	else if(!( ADCSRA & (1 << ADSC) ))                                                                                          /* wait for conversion to complete */
    111c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1120:	86 fd       	sbrc	r24, 6
    1122:	79 c0       	rjmp	.+242    	; 0x1216 <__vector_8+0x388>
	{
		uint16_t hold = ADC;
    1124:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1128:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
		static uint16_t holdConversionResult;
		holdConversionResult = (uint16_t)(((uint32_t)hold * ADC_REF_VOLTAGE_mV) >> 10);                                         /* millivolts at ADC pin */
    112c:	ac e4       	ldi	r26, 0x4C	; 76
    112e:	b4 e0       	ldi	r27, 0x04	; 4
    1130:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <__umulhisi3>
    1134:	ab 01       	movw	r20, r22
    1136:	bc 01       	movw	r22, r24
    1138:	03 2e       	mov	r0, r19
    113a:	3a e0       	ldi	r19, 0x0A	; 10
    113c:	76 95       	lsr	r23
    113e:	67 95       	ror	r22
    1140:	57 95       	ror	r21
    1142:	47 95       	ror	r20
    1144:	3a 95       	dec	r19
    1146:	d1 f7       	brne	.-12     	; 0x113c <__vector_8+0x2ae>
    1148:	30 2d       	mov	r19, r0
    114a:	9a 01       	movw	r18, r20
    114c:	50 93 3f 04 	sts	0x043F, r21	; 0x80043f <holdConversionResult.3324+0x1>
    1150:	40 93 3e 04 	sts	0x043E, r20	; 0x80043e <holdConversionResult.3324>
		uint16_t lastResult = g_lastConversionResult[indexConversionInProcess];
    1154:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <indexConversionInProcess.3312>
    1158:	8a 2f       	mov	r24, r26
    115a:	0a 2e       	mov	r0, r26
    115c:	00 0c       	add	r0, r0
    115e:	99 0b       	sbc	r25, r25
    1160:	fc 01       	movw	r30, r24
    1162:	ee 0f       	add	r30, r30
    1164:	ff 1f       	adc	r31, r31
    1166:	eb 5d       	subi	r30, 0xDB	; 219
    1168:	fb 4f       	sbci	r31, 0xFB	; 251
    116a:	e0 80       	ld	r14, Z
    116c:	f1 80       	ldd	r15, Z+1	; 0x01

		g_adcUpdated[indexConversionInProcess] = TRUE;
    116e:	8c 01       	movw	r16, r24
    1170:	00 5e       	subi	r16, 0xE0	; 224
    1172:	1b 4f       	sbci	r17, 0xFB	; 251
    1174:	b1 e0       	ldi	r27, 0x01	; 1
    1176:	f8 01       	movw	r30, r16
    1178:	b0 83       	st	Z, r27

		if(indexConversionInProcess == BATTERY_READING)
    117a:	a1 11       	cpse	r26, r1
    117c:	43 c0       	rjmp	.+134    	; 0x1204 <__vector_8+0x376>
		{
			BOOL directionUP = holdConversionResult > lastResult;
			uint16_t delta = directionUP ? holdConversionResult - lastResult : lastResult - holdConversionResult;
    117e:	e4 16       	cp	r14, r20
    1180:	f5 06       	cpc	r15, r21
    1182:	68 f4       	brcc	.+26     	; 0x119e <__vector_8+0x310>

			if(delta > g_filterADCValue[indexConversionInProcess])
    1184:	4e 19       	sub	r20, r14
    1186:	5f 09       	sbc	r21, r15
    1188:	dc 01       	movw	r26, r24
    118a:	aa 0f       	add	r26, r26
    118c:	bb 1f       	adc	r27, r27
    118e:	a7 5a       	subi	r26, 0xA7	; 167
    1190:	be 4f       	sbci	r27, 0xFE	; 254
    1192:	6d 91       	ld	r22, X+
    1194:	7c 91       	ld	r23, X
    1196:	64 17       	cp	r22, r20
    1198:	75 07       	cpc	r23, r21
    119a:	70 f0       	brcs	.+28     	; 0x11b8 <__vector_8+0x32a>
    119c:	17 c0       	rjmp	.+46     	; 0x11cc <__vector_8+0x33e>
		g_adcUpdated[indexConversionInProcess] = TRUE;

		if(indexConversionInProcess == BATTERY_READING)
		{
			BOOL directionUP = holdConversionResult > lastResult;
			uint16_t delta = directionUP ? holdConversionResult - lastResult : lastResult - holdConversionResult;
    119e:	f7 01       	movw	r30, r14
    11a0:	e4 1b       	sub	r30, r20
    11a2:	f5 0b       	sbc	r31, r21

			if(delta > g_filterADCValue[indexConversionInProcess])
    11a4:	dc 01       	movw	r26, r24
    11a6:	aa 0f       	add	r26, r26
    11a8:	bb 1f       	adc	r27, r27
    11aa:	a7 5a       	subi	r26, 0xA7	; 167
    11ac:	be 4f       	sbci	r27, 0xFE	; 254
    11ae:	6d 91       	ld	r22, X+
    11b0:	7c 91       	ld	r23, X
    11b2:	6e 17       	cp	r22, r30
    11b4:	7f 07       	cpc	r23, r31
    11b6:	70 f4       	brcc	.+28     	; 0x11d4 <__vector_8+0x346>
			{
				lastResult = holdConversionResult;
				g_tickCountdownADCFlag[indexConversionInProcess] = 100; /* speed up next conversion */
    11b8:	fc 01       	movw	r30, r24
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	eb 5e       	subi	r30, 0xEB	; 235
    11c0:	fe 4f       	sbci	r31, 0xFE	; 254
    11c2:	44 e6       	ldi	r20, 0x64	; 100
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	51 83       	std	Z+1, r21	; 0x01
    11c8:	40 83       	st	Z, r20
    11ca:	1c c0       	rjmp	.+56     	; 0x1204 <__vector_8+0x376>
			}
			else
			{
				if(directionUP)
				{
					lastResult++;
    11cc:	97 01       	movw	r18, r14
    11ce:	2f 5f       	subi	r18, 0xFF	; 255
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <__vector_8+0x354>
				}
				else if(delta)
    11d4:	ef 2b       	or	r30, r31
    11d6:	21 f0       	breq	.+8      	; 0x11e0 <__vector_8+0x352>
				{
					lastResult--;
    11d8:	97 01       	movw	r18, r14
    11da:	21 50       	subi	r18, 0x01	; 1
    11dc:	31 09       	sbc	r19, r1
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <__vector_8+0x354>
	else if(!( ADCSRA & (1 << ADSC) ))                                                                                          /* wait for conversion to complete */
	{
		uint16_t hold = ADC;
		static uint16_t holdConversionResult;
		holdConversionResult = (uint16_t)(((uint32_t)hold * ADC_REF_VOLTAGE_mV) >> 10);                                         /* millivolts at ADC pin */
		uint16_t lastResult = g_lastConversionResult[indexConversionInProcess];
    11e0:	97 01       	movw	r18, r14
				else if(delta)
				{
					lastResult--;
				}

				g_battery_measurements_active = TRUE;
    11e2:	41 e0       	ldi	r20, 0x01	; 1
    11e4:	40 93 d5 03 	sts	0x03D5, r20	; 0x8003d5 <g_battery_measurements_active>

				if(lastResult > VOLTS_5)
    11e8:	24 37       	cpi	r18, 0x74	; 116
    11ea:	f4 e0       	ldi	r31, 0x04	; 4
    11ec:	3f 07       	cpc	r19, r31
    11ee:	18 f0       	brcs	.+6      	; 0x11f6 <__vector_8+0x368>
				{
					g_battery_type = BATTERY_9V;
    11f0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <g_battery_type>
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <__vector_8+0x376>
				}
				else if(lastResult > VOLTS_3_0)
    11f6:	2d 38       	cpi	r18, 0x8D	; 141
    11f8:	42 e0       	ldi	r20, 0x02	; 2
    11fa:	34 07       	cpc	r19, r20
    11fc:	18 f0       	brcs	.+6      	; 0x1204 <__vector_8+0x376>
				{
					g_battery_type = BATTERY_4r2V;
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <g_battery_type>
		else
		{
			lastResult = holdConversionResult;
		}

		g_lastConversionResult[indexConversionInProcess] = lastResult;
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	fc 01       	movw	r30, r24
    120a:	eb 5d       	subi	r30, 0xDB	; 219
    120c:	fb 4f       	sbci	r31, 0xFB	; 251
    120e:	31 83       	std	Z+1, r19	; 0x01
    1210:	20 83       	st	Z, r18

		conversionInProcess = FALSE;
    1212:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <conversionInProcess.3311>
	}
}/* ISR */
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <__vector_6>:
 * The Watchdog timer helps prevent lockups due to hardware problems.
 * It is especially helpful in this application for preventing I2C bus
 * errors from locking up the foreground process.
 ************************************************************************/
ISR(WDT_vect)
{
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	8f 93       	push	r24
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
	static uint8_t limit = 10;

	g_i2c_not_timed_out = FALSE;    /* unstick I2C */
    125a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <g_i2c_not_timed_out>

	/* Don't allow an unlimited number of WD interrupts to occur without enabling
	 * hardware resets. But a limited number might be required during hardware
	 * initialization. */
	if(!g_enableHardwareWDResets && limit)
    125e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <g_enableHardwareWDResets>
    1262:	81 11       	cpse	r24, r1
    1264:	09 c0       	rjmp	.+18     	; 0x1278 <__vector_6+0x2e>
    1266:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <limit.3333>
    126a:	88 23       	and	r24, r24
    126c:	79 f0       	breq	.+30     	; 0x128c <__vector_6+0x42>
	{
		WDTCSR |= (1 << WDIE);  /* this prevents hardware resets from occurring */
    126e:	e0 e6       	ldi	r30, 0x60	; 96
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 64       	ori	r24, 0x40	; 64
    1276:	80 83       	st	Z, r24
	}

	if(limit)
    1278:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <limit.3333>
    127c:	88 23       	and	r24, r24
    127e:	31 f0       	breq	.+12     	; 0x128c <__vector_6+0x42>
	{
		limit--;
    1280:	81 50       	subi	r24, 0x01	; 1
    1282:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <limit.3333>
		g_last_error_code = ERROR_CODE_WD_TIMEOUT;
    1286:	88 ef       	ldi	r24, 0xF8	; 248
    1288:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
	}
}
    128c:	ff 91       	pop	r31
    128e:	ef 91       	pop	r30
    1290:	8f 91       	pop	r24
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__vector_18>:
 *                      id = Linkbus MessageID
 *                      fn = variable length fields
 *                      ; = end of message flag
 ************************************************************************/
ISR(USART_RX_vect)
{
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	2f 93       	push	r18
    12ac:	3f 93       	push	r19
    12ae:	4f 93       	push	r20
    12b0:	5f 93       	push	r21
    12b2:	6f 93       	push	r22
    12b4:	7f 93       	push	r23
    12b6:	8f 93       	push	r24
    12b8:	9f 93       	push	r25
    12ba:	af 93       	push	r26
    12bc:	bf 93       	push	r27
    12be:	cf 93       	push	r28
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static uint32_t msg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = UDR0;
    12c4:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

	if(!buff)
    12c8:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <buff.3339>
    12cc:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <buff.3339+0x1>
    12d0:	89 2b       	or	r24, r25
    12d2:	49 f4       	brne	.+18     	; 0x12e6 <__vector_18+0x4a>
	{
		buff = nextEmptyRxBuffer();
    12d4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nextEmptyRxBuffer>
    12d8:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <buff.3339+0x1>
    12dc:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <buff.3339>
	}

	if(buff)
    12e0:	89 2b       	or	r24, r25
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <__vector_18+0x4a>
    12e4:	16 c1       	rjmp	.+556    	; 0x1512 <__vector_18+0x276>
	{
		rx_char = toupper(rx_char);
    12e6:	8c 2f       	mov	r24, r28
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 c4 2e 	call	0x5d88	; 0x5d88 <toupper>
		SMCR = 0x00;                                /* exit power-down mode */
    12ee:	13 be       	out	0x33, r1	; 51

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    12f0:	84 32       	cpi	r24, 0x24	; 36
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <__vector_18+0x5a>
    12f4:	e5 c0       	rjmp	.+458    	; 0x14c0 <__vector_18+0x224>
    12f6:	81 32       	cpi	r24, 0x21	; 33
    12f8:	d1 f4       	brne	.+52     	; 0x132e <__vector_18+0x92>
    12fa:	da c0       	rjmp	.+436    	; 0x14b0 <__vector_18+0x214>
		{
			charIndex = 0;
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    12fc:	80 83       	st	Z, r24
			field_len = 0;
    12fe:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <field_len.3342>
			msg_ID = LINKBUS_MSG_UNKNOWN;
    1302:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <msg_ID.3343>
    1306:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <msg_ID.3343+0x1>
    130a:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <msg_ID.3343+0x2>
    130e:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <msg_ID.3343+0x3>
			receiving_msg = TRUE;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <receiving_msg.3344>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
			{
				buff->fields[field_index][0] = '\0';
    1318:	13 82       	std	Z+3, r1	; 0x03
    131a:	10 8e       	std	Z+24, r1	; 0x18
    131c:	15 a6       	std	Z+45, r1	; 0x2d
			}

			field_index = 0;
    131e:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <field_index.3341>
			msg_ID = LINKBUS_MSG_UNKNOWN;
			field_index = 0;
			buff = NULL;
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    1322:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <charIndex.3340>
    1326:	8f 5f       	subi	r24, 0xFF	; 255
    1328:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <charIndex.3340>
    132c:	f2 c0       	rjmp	.+484    	; 0x1512 <__vector_18+0x276>
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
		}
		else if(receiving_msg)
    132e:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <receiving_msg.3344>
    1332:	99 23       	and	r25, r25
    1334:	09 f4       	brne	.+2      	; 0x1338 <__vector_18+0x9c>
    1336:	97 c0       	rjmp	.+302    	; 0x1466 <__vector_18+0x1ca>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    1338:	8c 32       	cpi	r24, 0x2C	; 44
    133a:	39 f0       	breq	.+14     	; 0x134a <__vector_18+0xae>
    133c:	8b 33       	cpi	r24, 0x3B	; 59
    133e:	09 f4       	brne	.+2      	; 0x1342 <__vector_18+0xa6>
    1340:	d8 c0       	rjmp	.+432    	; 0x14f2 <__vector_18+0x256>
    1342:	8f 33       	cpi	r24, 0x3F	; 63
    1344:	09 f0       	breq	.+2      	; 0x1348 <__vector_18+0xac>
    1346:	49 c0       	rjmp	.+146    	; 0x13da <__vector_18+0x13e>
    1348:	c9 c0       	rjmp	.+402    	; 0x14dc <__vector_18+0x240>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    134a:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <field_index.3341>
    134e:	99 23       	and	r25, r25
    1350:	09 f4       	brne	.+2      	; 0x1354 <__vector_18+0xb8>
    1352:	d9 c0       	rjmp	.+434    	; 0x1506 <__vector_18+0x26a>
				{
					buff->fields[field_index - 1][field_len] = 0;
    1354:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <buff.3339>
    1358:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <buff.3339+0x1>
    135c:	49 2f       	mov	r20, r25
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	41 50       	subi	r20, 0x01	; 1
    1362:	51 09       	sbc	r21, r1
    1364:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <field_len.3342>
    1368:	75 e1       	ldi	r23, 0x15	; 21
    136a:	74 9f       	mul	r23, r20
    136c:	90 01       	movw	r18, r0
    136e:	75 9f       	mul	r23, r21
    1370:	30 0d       	add	r19, r0
    1372:	11 24       	eor	r1, r1
    1374:	e2 0f       	add	r30, r18
    1376:	f3 1f       	adc	r31, r19
    1378:	e6 0f       	add	r30, r22
    137a:	f1 1d       	adc	r31, r1
    137c:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
    137e:	9f 5f       	subi	r25, 0xFF	; 255
    1380:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <field_index.3341>
				field_len = 0;
    1384:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <field_len.3342>

				if(rx_char == ';')
    1388:	8b 33       	cpi	r24, 0x3B	; 59
    138a:	89 f4       	brne	.+34     	; 0x13ae <__vector_18+0x112>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    138c:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <charIndex.3340>
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	50 f0       	brcs	.+20     	; 0x13a8 <__vector_18+0x10c>
					{
						buff->id = (LBMessageID)msg_ID;
    1394:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <buff.3339>
    1398:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <buff.3339+0x1>
    139c:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <msg_ID.3343>
    13a0:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <msg_ID.3343+0x1>
    13a4:	92 83       	std	Z+2, r25	; 0x02
    13a6:	81 83       	std	Z+1, r24	; 0x01
					}
					receiving_msg = FALSE;
    13a8:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <receiving_msg.3344>
    13ac:	a7 c0       	rjmp	.+334    	; 0x14fc <__vector_18+0x260>
				}
				else if(rx_char == '?')
    13ae:	8f 33       	cpi	r24, 0x3F	; 63
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <__vector_18+0x118>
    13b2:	72 c0       	rjmp	.+228    	; 0x1498 <__vector_18+0x1fc>
				{
					buff->type = LINKBUS_MSG_QUERY;
    13b4:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <buff.3339>
    13b8:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <buff.3339+0x1>
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	80 83       	st	Z, r24
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    13c0:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <charIndex.3340>
    13c4:	84 30       	cpi	r24, 0x04	; 4
    13c6:	30 f0       	brcs	.+12     	; 0x13d4 <__vector_18+0x138>
					{
						buff->id = msg_ID;
    13c8:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <msg_ID.3343>
    13cc:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <msg_ID.3343+0x1>
    13d0:	92 83       	std	Z+2, r25	; 0x02
    13d2:	81 83       	std	Z+1, r24	; 0x01
					}
					receiving_msg = FALSE;
    13d4:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <receiving_msg.3344>
    13d8:	91 c0       	rjmp	.+290    	; 0x14fc <__vector_18+0x260>
					buff = 0;
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
    13da:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <field_index.3341>
    13de:	21 11       	cpse	r18, r1
    13e0:	29 c0       	rjmp	.+82     	; 0x1434 <__vector_18+0x198>
				{
					msg_ID = msg_ID * 10 + rx_char;
    13e2:	40 91 44 04 	lds	r20, 0x0444	; 0x800444 <msg_ID.3343>
    13e6:	50 91 45 04 	lds	r21, 0x0445	; 0x800445 <msg_ID.3343+0x1>
    13ea:	60 91 46 04 	lds	r22, 0x0446	; 0x800446 <msg_ID.3343+0x2>
    13ee:	70 91 47 04 	lds	r23, 0x0447	; 0x800447 <msg_ID.3343+0x3>
    13f2:	44 0f       	add	r20, r20
    13f4:	55 1f       	adc	r21, r21
    13f6:	66 1f       	adc	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	8a 01       	movw	r16, r20
    13fc:	9b 01       	movw	r18, r22
    13fe:	00 0f       	add	r16, r16
    1400:	11 1f       	adc	r17, r17
    1402:	22 1f       	adc	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	00 0f       	add	r16, r16
    1408:	11 1f       	adc	r17, r17
    140a:	22 1f       	adc	r18, r18
    140c:	33 1f       	adc	r19, r19
    140e:	40 0f       	add	r20, r16
    1410:	51 1f       	adc	r21, r17
    1412:	62 1f       	adc	r22, r18
    1414:	73 1f       	adc	r23, r19
    1416:	8a 01       	movw	r16, r20
    1418:	9b 01       	movw	r18, r22
    141a:	08 0f       	add	r16, r24
    141c:	11 1d       	adc	r17, r1
    141e:	21 1d       	adc	r18, r1
    1420:	31 1d       	adc	r19, r1
    1422:	00 93 44 04 	sts	0x0444, r16	; 0x800444 <msg_ID.3343>
    1426:	10 93 45 04 	sts	0x0445, r17	; 0x800445 <msg_ID.3343+0x1>
    142a:	20 93 46 04 	sts	0x0446, r18	; 0x800446 <msg_ID.3343+0x2>
    142e:	30 93 47 04 	sts	0x0447, r19	; 0x800447 <msg_ID.3343+0x3>
    1432:	32 c0       	rjmp	.+100    	; 0x1498 <__vector_18+0x1fc>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
    1434:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <buff.3339>
    1438:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <buff.3339+0x1>
    143c:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <field_len.3342>
    1440:	31 e0       	ldi	r19, 0x01	; 1
    1442:	39 0f       	add	r19, r25
    1444:	30 93 43 04 	sts	0x0443, r19	; 0x800443 <field_len.3342>
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	21 50       	subi	r18, 0x01	; 1
    144c:	31 09       	sbc	r19, r1
    144e:	65 e1       	ldi	r22, 0x15	; 21
    1450:	62 9f       	mul	r22, r18
    1452:	a0 01       	movw	r20, r0
    1454:	63 9f       	mul	r22, r19
    1456:	50 0d       	add	r21, r0
    1458:	11 24       	eor	r1, r1
    145a:	e4 0f       	add	r30, r20
    145c:	f5 1f       	adc	r31, r21
    145e:	e9 0f       	add	r30, r25
    1460:	f1 1d       	adc	r31, r1
    1462:	83 83       	std	Z+3, r24	; 0x03
    1464:	19 c0       	rjmp	.+50     	; 0x1498 <__vector_18+0x1fc>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
    1466:	8d 30       	cpi	r24, 0x0D	; 13
    1468:	b9 f4       	brne	.+46     	; 0x1498 <__vector_18+0x1fc>
		{
			buff->id = LINKBUS_MSG_UNKNOWN;
    146a:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <buff.3339>
    146e:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <buff.3339+0x1>
    1472:	12 82       	std	Z+2, r1	; 0x02
    1474:	11 82       	std	Z+1, r1	; 0x01
			charIndex = LINKBUS_MAX_MSG_LENGTH;
			field_len = 0;
    1476:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <field_len.3342>
			msg_ID = LINKBUS_MSG_UNKNOWN;
    147a:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <msg_ID.3343>
    147e:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <msg_ID.3343+0x1>
    1482:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <msg_ID.3343+0x2>
    1486:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <msg_ID.3343+0x3>
			field_index = 0;
    148a:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <field_index.3341>
			buff = NULL;
    148e:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <buff.3339+0x1>
    1492:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <buff.3339>
    1496:	07 c0       	rjmp	.+14     	; 0x14a6 <__vector_18+0x20a>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    1498:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <charIndex.3340>
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <charIndex.3340>
    14a2:	82 33       	cpi	r24, 0x32	; 50
    14a4:	b0 f1       	brcs	.+108    	; 0x1512 <__vector_18+0x276>
		{
			receiving_msg = FALSE;
    14a6:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <receiving_msg.3344>
			charIndex = 0;
    14aa:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <charIndex.3340>
		}
	}
}
    14ae:	31 c0       	rjmp	.+98     	; 0x1512 <__vector_18+0x276>
		rx_char = toupper(rx_char);
		SMCR = 0x00;                                /* exit power-down mode */

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
		{
			charIndex = 0;
    14b0:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <charIndex.3340>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    14b4:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <buff.3339>
    14b8:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <buff.3339+0x1>
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	1e cf       	rjmp	.-452    	; 0x12fc <__vector_18+0x60>
		rx_char = toupper(rx_char);
		SMCR = 0x00;                                /* exit power-down mode */

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
		{
			charIndex = 0;
    14c0:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <charIndex.3340>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    14c4:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <buff.3339>
    14c8:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <buff.3339+0x1>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	16 cf       	rjmp	.-468    	; 0x12fc <__vector_18+0x60>
				if(field_index > 0)
				{
					buff->fields[field_index - 1][field_len] = 0;
				}

				field_index++;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <field_index.3341>
				field_len = 0;
    14d6:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <field_len.3342>
    14da:	6c cf       	rjmp	.-296    	; 0x13b4 <__vector_18+0x118>
		else if(receiving_msg)
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    14dc:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <field_index.3341>
    14e0:	99 23       	and	r25, r25
    14e2:	b1 f3       	breq	.-20     	; 0x14d0 <__vector_18+0x234>
    14e4:	37 cf       	rjmp	.-402    	; 0x1354 <__vector_18+0xb8>
				{
					buff->fields[field_index - 1][field_len] = 0;
				}

				field_index++;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <field_index.3341>
				field_len = 0;
    14ec:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <field_len.3342>
    14f0:	4d cf       	rjmp	.-358    	; 0x138c <__vector_18+0xf0>
		else if(receiving_msg)
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    14f2:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <field_index.3341>
    14f6:	91 11       	cpse	r25, r1
    14f8:	2d cf       	rjmp	.-422    	; 0x1354 <__vector_18+0xb8>
    14fa:	f5 cf       	rjmp	.-22     	; 0x14e6 <__vector_18+0x24a>
					receiving_msg = FALSE;
				}

				if(!receiving_msg)
				{
					buff = 0;
    14fc:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <buff.3339+0x1>
    1500:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <buff.3339>
    1504:	c9 cf       	rjmp	.-110    	; 0x1498 <__vector_18+0x1fc>
				if(field_index > 0)
				{
					buff->fields[field_index - 1][field_len] = 0;
				}

				field_index++;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <field_index.3341>
				field_len = 0;
    150c:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <field_len.3342>
    1510:	c3 cf       	rjmp	.-122    	; 0x1498 <__vector_18+0x1fc>
		{
			receiving_msg = FALSE;
			charIndex = 0;
		}
	}
}
    1512:	ff 91       	pop	r31
    1514:	ef 91       	pop	r30
    1516:	cf 91       	pop	r28
    1518:	bf 91       	pop	r27
    151a:	af 91       	pop	r26
    151c:	9f 91       	pop	r25
    151e:	8f 91       	pop	r24
    1520:	7f 91       	pop	r23
    1522:	6f 91       	pop	r22
    1524:	5f 91       	pop	r21
    1526:	4f 91       	pop	r20
    1528:	3f 91       	pop	r19
    152a:	2f 91       	pop	r18
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	0f 90       	pop	r0
    1536:	1f 90       	pop	r1
    1538:	18 95       	reti

0000153a <__vector_19>:
 *
 * This ISR is responsible for filling the USART transmit buffer. It
 * implements the transmit function of the Linkbus.
 ************************************************************************/
ISR(USART_UDRE_vect)
{
    153a:	1f 92       	push	r1
    153c:	0f 92       	push	r0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	0f 92       	push	r0
    1542:	11 24       	eor	r1, r1
    1544:	2f 93       	push	r18
    1546:	3f 93       	push	r19
    1548:	4f 93       	push	r20
    154a:	5f 93       	push	r21
    154c:	6f 93       	push	r22
    154e:	7f 93       	push	r23
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
    1554:	af 93       	push	r26
    1556:	bf 93       	push	r27
    1558:	ef 93       	push	r30
    155a:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
    155c:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <buff.3354>
    1560:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <buff.3354+0x1>
    1564:	89 2b       	or	r24, r25
    1566:	31 f4       	brne	.+12     	; 0x1574 <__vector_19+0x3a>
	{
		buff = nextFullTxBuffer();
    1568:	0e 94 af 00 	call	0x15e	; 0x15e <nextFullTxBuffer>
    156c:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <buff.3354+0x1>
    1570:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <buff.3354>
	}

	if((*buff)[charIndex])
    1574:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <buff.3354>
    1578:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <buff.3354+0x1>
    157c:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <charIndex.3355>
    1580:	df 01       	movw	r26, r30
    1582:	a8 0f       	add	r26, r24
    1584:	b1 1d       	adc	r27, r1
    1586:	9c 91       	ld	r25, X
    1588:	99 23       	and	r25, r25
    158a:	31 f0       	breq	.+12     	; 0x1598 <__vector_19+0x5e>
	{
		/* Put data into buffer, sends the data */
		UDR0 = (*buff)[charIndex++];
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <charIndex.3355>
    1592:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1596:	0d c0       	rjmp	.+26     	; 0x15b2 <__vector_19+0x78>
	}
	else
	{
		charIndex = 0;
    1598:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <charIndex.3355>
		(*buff)[0] = '\0';
    159c:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
    159e:	0e 94 af 00 	call	0x15e	; 0x15e <nextFullTxBuffer>
    15a2:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <buff.3354+0x1>
    15a6:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <buff.3354>
		if(!buff)
    15aa:	89 2b       	or	r24, r25
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <__vector_19+0x78>
		{
			linkbus_end_tx();
    15ae:	0e 94 6e 01 	call	0x2dc	; 0x2dc <linkbus_end_tx>
		}
	}
}   /* End of UART Tx ISR */
    15b2:	ff 91       	pop	r31
    15b4:	ef 91       	pop	r30
    15b6:	bf 91       	pop	r27
    15b8:	af 91       	pop	r26
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	7f 91       	pop	r23
    15c0:	6f 91       	pop	r22
    15c2:	5f 91       	pop	r21
    15c4:	4f 91       	pop	r20
    15c6:	3f 91       	pop	r19
    15c8:	2f 91       	pop	r18
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <rtc_init>:
	}
#endif  /* ENABLE_PIN_CHANGE_INTERRUPT_2 */


EC rtc_init(void)
{
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	1f 92       	push	r1
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	uint8_t tries = 10;
	EC code = ERROR_CODE_SW_LOGIC_ERROR;
    15e0:	8f ec       	ldi	r24, 0xCF	; 207
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	1b e0       	ldi	r17, 0x0B	; 11
    15e6:	0f c0       	rjmp	.+30     	; 0x1606 <rtc_init+0x32>

	while(code && tries--)
	{
		time_t epoch_time = ds3231_get_epoch(&code);
    15e8:	ce 01       	movw	r24, r28
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	0e 94 34 23 	call	0x4668	; 0x4668 <ds3231_get_epoch>

		if(code == ERROR_CODE_NO_ERROR)
    15f0:	29 81       	ldd	r18, Y+1	; 0x01
    15f2:	21 11       	cpse	r18, r1
    15f4:	0b c0       	rjmp	.+22     	; 0x160c <rtc_init+0x38>
		{
			set_system_time(epoch_time);
    15f6:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <set_system_time>
			ds3231_1s_sqw(ON);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <ds3231_1s_sqw>
EC rtc_init(void)
{
	uint8_t tries = 10;
	EC code = ERROR_CODE_SW_LOGIC_ERROR;

	while(code && tries--)
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	88 23       	and	r24, r24
    1604:	29 f0       	breq	.+10     	; 0x1610 <rtc_init+0x3c>
    1606:	11 50       	subi	r17, 0x01	; 1
    1608:	79 f7       	brne	.-34     	; 0x15e8 <rtc_init+0x14>
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <rtc_init+0x3c>
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	fb cf       	rjmp	.-10     	; 0x1606 <rtc_init+0x32>
			ds3231_1s_sqw(ON);
		}
	}

	return( code);
}
    1610:	0f 90       	pop	r0
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	08 95       	ret

0000161a <hw_init>:

EC hw_init(void)
{
	/**
	 * Initialize the transmitter */
	EC code = init_transmitter();
    161a:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <init_transmitter>

	return( code);
}
    161e:	08 95       	ret

00001620 <set_ports>:

void __attribute__((optimize("O1"))) set_ports(SleepType initType)
{
	if(initType == NOT_SLEEPING)
    1620:	81 11       	cpse	r24, r1
    1622:	39 c0       	rjmp	.+114    	; 0x1696 <set_ports+0x76>
	{
		SMCR = 0x00;    /* clear sleep bit */
    1624:	13 be       	out	0x33, r1	; 51
		PRR = 0x00;     /* enable all clocks */
    1626:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
		 * PB4 = MISO
		 * PB5 = SCK
		 * PB6 = Tx Final Voltage Enable
		 * PB7 = Main Power Enable */

		DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB6) | (1 << PORTB7);
    162a:	84 b1       	in	r24, 0x04	; 4
    162c:	87 6c       	ori	r24, 0xC7	; 199
    162e:	84 b9       	out	0x04, r24	; 4
		PORTB |= (1 << PORTB2) | (1 << PORTB7); /* Turn on main power */
    1630:	85 b1       	in	r24, 0x05	; 5
    1632:	84 68       	ori	r24, 0x84	; 132
    1634:	85 b9       	out	0x05, r24	; 5
		 * PD5 = 2M_ANTENNA_DETECT
		 * PD6 = WIFI_RESET
		 * PD7 = WIFI_ENABLE */

		/*	DDRD  = 0b00000010;     / * Set PORTD pin data directions * / */
		DDRD  |= (1 << PORTD6) | (1 << PORTD7);                                 /* Set PORTD pin data directions */
    1636:	8a b1       	in	r24, 0x0a	; 10
    1638:	80 6c       	ori	r24, 0xC0	; 192
    163a:	8a b9       	out	0x0a, r24	; 10
		PORTD = (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5);  /* Enable pull-ups on input pins, and set output levels on all outputs */
    163c:	8c e3       	ldi	r24, 0x3C	; 60
    163e:	8b b9       	out	0x0b, r24	; 11
		 * PC4 = SDA
		 * PC5 = SCL
		 * PC6 = Reset
		 * PC7 = N/A */

		DDRC = (1 << PORTC3);
    1640:	88 e0       	ldi	r24, 0x08	; 8
    1642:	87 b9       	out	0x07, r24	; 7
		PORTC = I2C_PINS | (1 << PORTC3);
    1644:	88 e3       	ldi	r24, 0x38	; 56
    1646:	88 b9       	out	0x08, r24	; 8

		/**
		 * TIMER2 is for periodic interrupts */
		OCR2A = OCR2A_OVF_BASE_FREQ;                        /* set frequency to ~300 Hz (0x0c) */
    1648:	85 e0       	ldi	r24, 0x05	; 5
    164a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		TCCR2A |= (1 << WGM01);                             /* set CTC with OCRA */
    164e:	e0 eb       	ldi	r30, 0xB0	; 176
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	82 60       	ori	r24, 0x02	; 2
    1656:	80 83       	st	Z, r24
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler - why are we setting CS21?? */
    1658:	e1 eb       	ldi	r30, 0xB1	; 177
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	87 60       	ori	r24, 0x07	; 7
    1660:	80 83       	st	Z, r24
		TIMSK2 |= (1 << OCIE0B);                            /* enable compare interrupt */
    1662:	e0 e7       	ldi	r30, 0x70	; 112
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	84 60       	ori	r24, 0x04	; 4
    166a:	80 83       	st	Z, r24

		/**
		 * Set up ADC */
		ADMUX |= (1 << REFS0) | (1 << REFS1);               /* Use internal 1.1V reference */
    166c:	ec e7       	ldi	r30, 0x7C	; 124
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 6c       	ori	r24, 0xC0	; 192
    1674:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
    1676:	ea e7       	ldi	r30, 0x7A	; 122
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	87 68       	ori	r24, 0x87	; 135
    167e:	80 83       	st	Z, r24
		 *	PCMSK2 |= 0b10001000;                                   / * Enable port D pin change interrupts * /
		 *	PCMSK1 |= (1 << PCINT10);                               / * Enable port C pin change interrupts on pin PC2 * /
		 *	PCMSK0 |= (1 << PORTB2);                                / * Do not enable interrupts until HW is ready * / */

/*		EICRA  |= ((1 << ISC01) | (1 << ISC00));	/ * Configure INT0 rising edge for RTC 1-second interrupts * / */
		EICRA  |= ((1 << ISC01) | (1 << ISC10));    /* Configure INT0 falling edge for RTC 1-second interrupts, and INT1 any logic change */
    1680:	e9 e6       	ldi	r30, 0x69	; 105
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	86 60       	ori	r24, 0x06	; 6
    1688:	80 83       	st	Z, r24
		EIMSK |= ((1 << INT0) | (1 << INT1));
    168a:	8d b3       	in	r24, 0x1d	; 29
    168c:	83 60       	ori	r24, 0x03	; 3
    168e:	8d bb       	out	0x1d, r24	; 29

		i2c_init();                                 /* initialize i2c bus */
    1690:	0c 94 26 25 	jmp	0x4a4c	; 0x4a4c <i2c_init>
    1694:	08 95       	ret
		 * PB4 = MISO
		 * PB5 = SCK
		 * PB6 = Tx Final Voltage Enable
		 * PB7 = Main Power Enable */

		DDRB = 0x00;    /* Set PORTD pin data directions */
    1696:	14 b8       	out	0x04, r1	; 4
		PORTB = 0x00;
    1698:	15 b8       	out	0x05, r1	; 5
		 * PD4 = 80M_ANTENNA_DETECT
		 * PD5 = 2M_ANTENNA_DETECT
		 * PD6 = WIFI_RESET
		 * PD7 = WIFI_ENABLE */

		DDRD = 0x00;
    169a:	1a b8       	out	0x0a, r1	; 10
		PORTD = ((1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5));    /* Allow RTC and antenna-connect interrupts to continue */
    169c:	8c e3       	ldi	r24, 0x3C	; 60
    169e:	8b b9       	out	0x0b, r24	; 11
		 * PC4 = SDA
		 * PC5 = SCL
		 * PC6 = Reset
		 * PC7 = N/A */

		DDRC = 0x00;
    16a0:	17 b8       	out	0x07, r1	; 7
		PORTC = (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2) | (1 << PORTC3);
    16a2:	8f e0       	ldi	r24, 0x0F	; 15
    16a4:	88 b9       	out	0x08, r24	; 8

		/**
		 * TIMER2 is for periodic interrupts */
		TIMSK2 &= ~(1 << OCIE0B);                               /* disable compare interrupt */
    16a6:	e0 e7       	ldi	r30, 0x70	; 112
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8b 7f       	andi	r24, 0xFB	; 251
    16ae:	80 83       	st	Z, r24
		OCR2A = 0x00;                                           /* set frequency to ~300 Hz (0x0c) */
    16b0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		TCCR2A &= ~(1 << WGM01);                                /* set CTC with OCRA */
    16b4:	e0 eb       	ldi	r30, 0xB0	; 176
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8d 7f       	andi	r24, 0xFD	; 253
    16bc:	80 83       	st	Z, r24
		TCCR2B &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));   /* Prescalar */
    16be:	e1 eb       	ldi	r30, 0xB1	; 177
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 7f       	andi	r24, 0xF8	; 248
    16c6:	80 83       	st	Z, r24

		/**
		 * Set up ADC */
		ADMUX &= ~((1 << REFS0) | (1 << REFS1));
    16c8:	ec e7       	ldi	r30, 0x7C	; 124
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 73       	andi	r24, 0x3F	; 63
    16d0:	80 83       	st	Z, r24
		ADCSRA = 0;
    16d2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

		DIDR0 = 0x3f;   /* disable ADC pins */
    16d6:	8f e3       	ldi	r24, 0x3F	; 63
    16d8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
		DIDR1 = 0x03;   /* disable analog inputs */
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
		/**
		 * Set up pin interrupts */
		/* Enable pin change interrupts PCINT8, PCINT9,
		 * TODO */

		PCICR = 0;
    16e2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
		PCMSK0 = 0;
    16e6:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
		PCMSK1 = 0;
    16ea:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
		PCMSK2 = 0;
    16ee:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>

		EICRA  |= ((1 << ISC01) | (1 << ISC11));    /* Configure INT0 and INT1 falling edge for RTC 1-second interrupts */
    16f2:	e9 e6       	ldi	r30, 0x69	; 105
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8a 60       	ori	r24, 0x0A	; 10
    16fa:	80 83       	st	Z, r24
		EIMSK |= ((1 << INT0) | (1 << INT1));
    16fc:	8d b3       	in	r24, 0x1d	; 29
    16fe:	83 60       	ori	r24, 0x03	; 3
    1700:	8d bb       	out	0x1d, r24	; 29
/*		linkbus_disable(); */

		/**
		 *  Disable Watchdog timer
		 */
		wdt_init(WD_DISABLE);
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	0e 94 07 03 	call	0x60e	; 0x60e <wdt_init>

		g_sleeping = TRUE;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <g_sleeping>

		/* Disable brown-out detection
		**/
		PRR = 0xff;
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
		cli();
    1714:	f8 94       	cli
		SMCR = 0x05;                        /* set power-down mode */
    1716:	85 e0       	ldi	r24, 0x05	; 5
    1718:	83 bf       	out	0x33, r24	; 51
		MCUCR = (1 << BODS) | (1 << BODSE); /* turn on brown-out enable select */
    171a:	80 e6       	ldi	r24, 0x60	; 96
    171c:	85 bf       	out	0x35, r24	; 53
		MCUCR = (1 << BODS);                /* this must be done within 4 clock cycles of above */
    171e:	80 e4       	ldi	r24, 0x40	; 64
    1720:	85 bf       	out	0x35, r24	; 53
		sei();
    1722:	78 94       	sei
		asm ("sleep");                      /* enter power-down mode */
    1724:	88 95       	sleep
    1726:	08 95       	ret

00001728 <main>:
 * need to be handled in the foreground, not in ISRs. This includes
 * communications over the I2C bus, handling messages received over the
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	00 d0       	rcall	.+0      	; 0x172e <main+0x6>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	static uint8_t hw_tries = 10;   /* give up after too many failures */

	/**
	 * Initialize vars stored in EEPROM */

	initializeEEPROMVars();
    1732:	0e 94 0b 19 	call	0x3216	; 0x3216 <initializeEEPROMVars>
	g_event_enabled = FALSE;    /* ensure the event is disabled until hardware is initialized */
    1736:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <g_event_enabled>
	holdOSCCAL = OSCCAL;
    173a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    173e:	2a 83       	std	Y+2, r18	; 0x02
	/**
	 * Initialize port pins and timers */
	set_ports(NOT_SLEEPING);
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	6e df       	rcall	.-292    	; 0x1620 <set_ports>

	cpu_irq_enable();   /* same as sei(); */
    1744:	78 94       	sei

	/**
	 * Enable watchdog interrupts before performing I2C calls that might cause a lockup */
#ifndef TRANQUILIZE_WATCHDOG
		wdt_init(WD_SW_RESETS);
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0e 94 07 03 	call	0x60e	; 0x60e <wdt_init>
		wdt_reset();    /* HW watchdog */
    174c:	a8 95       	wdr
#endif /* TRANQUILIZE_WATCHDOG */

	g_antenna_connect_state = antennaIsConnected() ? ANT_CONNECTION_UNDETERMINED : ANT_ALL_DISCONNECTED;
    174e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <antennaIsConnected>
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	81 11       	cpse	r24, r1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <g_antenna_connect_state>

	while(code && tries)
    175c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <code.3375>
    1760:	88 23       	and	r24, r24
    1762:	41 f0       	breq	.+16     	; 0x1774 <main+0x4c>
	{
		if(tries)
		{
			tries--;
		}
		code = rtc_init();
    1764:	1a e0       	ldi	r17, 0x0A	; 10
    1766:	36 df       	rcall	.-404    	; 0x15d4 <rtc_init>
    1768:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <code.3375>
		wdt_reset();    /* HW watchdog */
#endif /* TRANQUILIZE_WATCHDOG */

	g_antenna_connect_state = antennaIsConnected() ? ANT_CONNECTION_UNDETERMINED : ANT_ALL_DISCONNECTED;

	while(code && tries)
    176c:	88 23       	and	r24, r24
    176e:	11 f0       	breq	.+4      	; 0x1774 <main+0x4c>
	{
		if(tries)
		{
			tries--;
    1770:	11 50       	subi	r17, 0x01	; 1
		wdt_reset();    /* HW watchdog */
#endif /* TRANQUILIZE_WATCHDOG */

	g_antenna_connect_state = antennaIsConnected() ? ANT_CONNECTION_UNDETERMINED : ANT_ALL_DISCONNECTED;

	while(code && tries)
    1772:	c9 f7       	brne	.-14     	; 0x1766 <main+0x3e>
			tries--;
		}
		code = rtc_init();
	}

	g_last_error_code = code;
    1774:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>

/*	linkbus_init(BAUD); */
	g_wifi_enable_delay = LINKBUS_POWERUP_DELAY_SECONDS;
    1778:	86 e0       	ldi	r24, 0x06	; 6
    177a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <g_wifi_enable_delay>

	wdt_reset();    /* HW watchdog */
    177e:	a8 95       	wdr

	g_util_tick_countdown = 40;
    1780:	88 e2       	ldi	r24, 0x28	; 40
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <g_util_tick_countdown+0x1>
    1788:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <g_util_tick_countdown>
	while(linkbusTxInProgress() && g_util_tick_countdown)
    178c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <linkbusTxInProgress>
    1790:	88 23       	and	r24, r24
    1792:	31 f0       	breq	.+12     	; 0x17a0 <main+0x78>
    1794:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <g_util_tick_countdown>
    1798:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <g_util_tick_countdown+0x1>
    179c:	89 2b       	or	r24, r25
    179e:	b1 f7       	brne	.-20     	; 0x178c <main+0x64>
	{
		;                       /* wait until transmit finishes */
	}

#ifndef TRANQUILIZE_WATCHDOG
		wdt_init(WD_HW_RESETS); /* enable hardware interrupts */
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	0e 94 07 03 	call	0x60e	; 0x60e <wdt_init>
 ************************************************************************/
int main( void )
{
	static EC code = ERROR_CODE_SW_LOGIC_ERROR;
	uint8_t tries = 10;
	BOOL init_hardware = FALSE;
    17a6:	41 2c       	mov	r4, r1

			if(hw_tries)
			{
				hw_tries--;
				code = hw_init();   /* initialize transmitter and related I2C devices */
				init_hardware = (code != ERROR_CODE_NO_ERROR);
    17a8:	33 24       	eor	r3, r3
    17aa:	33 94       	inc	r3
					if(!ec)
					{
						g_last_status_code = launchEvent(&status);
						if(g_go_to_sleep)
						{
							g_sleepType = SLEEP_AFTER_WIFI_GOES_OFF;
    17ac:	0f 2e       	mov	r0, r31
    17ae:	f3 e0       	ldi	r31, 0x03	; 3
    17b0:	2f 2e       	mov	r2, r31
    17b2:	f0 2d       	mov	r31, r0
		***************************************/
		if(!g_sufficient_power_detected)                                                /* if ADC battery measurements have stabilized */
		{
			if(g_battery_measurements_active)
			{
				if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)   /* Battery measurement indicates sufficient voltage */
    17b4:	0f 2e       	mov	r0, r31
    17b6:	f5 e2       	ldi	r31, 0x25	; 37
    17b8:	af 2e       	mov	r10, r31
    17ba:	f4 e0       	ldi	r31, 0x04	; 4
    17bc:	bf 2e       	mov	r11, r31
    17be:	f0 2d       	mov	r31, r0
		if(g_calibrate_baud)
		{
			if(!g_baud_count)
			{
				static uint8_t calVal = 10;
				g_baud_count = 3600 / OCR2A;
    17c0:	0f 2e       	mov	r0, r31
    17c2:	f3 eb       	ldi	r31, 0xB3	; 179
    17c4:	8f 2e       	mov	r8, r31
    17c6:	91 2c       	mov	r9, r1
    17c8:	f0 2d       	mov	r31, r0
    17ca:	0f 2e       	mov	r0, r31
    17cc:	f0 e1       	ldi	r31, 0x10	; 16
    17ce:	6f 2e       	mov	r6, r31
    17d0:	fe e0       	ldi	r31, 0x0E	; 14
    17d2:	7f 2e       	mov	r7, r31
    17d4:	f0 2d       	mov	r31, r0
		}

		if(g_report_seconds)
		{
			g_report_seconds = FALSE;
			sprintf(g_tempStr, "%lu", time(NULL));
    17d6:	0f 2e       	mov	r0, r31
    17d8:	f3 e6       	ldi	r31, 0x63	; 99
    17da:	cf 2e       	mov	r12, r31
    17dc:	f1 e0       	ldi	r31, 0x01	; 1
    17de:	df 2e       	mov	r13, r31
    17e0:	f0 2d       	mov	r31, r0
    17e2:	0a eb       	ldi	r16, 0xBA	; 186
    17e4:	13 e0       	ldi	r17, 0x03	; 3
			lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_CLOCK_LABEL, g_tempStr);
		}

		if(g_last_error_code)
		{
			sprintf(g_tempStr, "%u", g_last_error_code);
    17e6:	0f 2e       	mov	r0, r31
    17e8:	fb e6       	ldi	r31, 0x6B	; 107
    17ea:	ef 2e       	mov	r14, r31
    17ec:	f1 e0       	ldi	r31, 0x01	; 1
    17ee:	ff 2e       	mov	r15, r31
    17f0:	f0 2d       	mov	r31, r0
	while(1)
	{
		/**************************************
		* The watchdog must be petted periodically to keep it from barking
		**************************************/
		cli(); wdt_reset(); /* HW watchdog */ sei();
    17f2:	f8 94       	cli
    17f4:	a8 95       	wdr
    17f6:	78 94       	sei

		/***************************************
		* Check for Power
		***************************************/
		if(!g_sufficient_power_detected)                                                /* if ADC battery measurements have stabilized */
    17f8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <g_sufficient_power_detected>
    17fc:	81 11       	cpse	r24, r1
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <main+0x10e>
		{
			if(g_battery_measurements_active)
    1800:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <g_battery_measurements_active>
    1804:	88 23       	and	r24, r24
    1806:	b9 f0       	breq	.+46     	; 0x1836 <main+0x10e>
			{
				if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)   /* Battery measurement indicates sufficient voltage */
    1808:	f5 01       	movw	r30, r10
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	8d 38       	cpi	r24, 0x8D	; 141
    1810:	92 40       	sbci	r25, 0x02	; 2
    1812:	18 f0       	brcs	.+6      	; 0x181a <main+0xf2>
				{
					g_sufficient_power_detected = TRUE;
    1814:	30 92 2f 04 	sts	0x042F, r3	; 0x80042f <g_sufficient_power_detected>
    1818:	e2 c1       	rjmp	.+964    	; 0x1bde <main+0x4b6>
					init_hardware = TRUE;
				}
				else if(!g_wifi_enable_delay)   /* no battery detected by the time WiFi  is turned on, assume an external battery is being used */
    181a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <g_wifi_enable_delay>
    181e:	81 11       	cpse	r24, r1
    1820:	0a c0       	rjmp	.+20     	; 0x1836 <main+0x10e>
				{
					if(g_battery_type == BATTERY_UNKNOWN)
    1822:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <g_battery_type>
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	31 f4       	brne	.+12     	; 0x1836 <main+0x10e>
					{
						g_battery_type = BATTERY_EXTERNAL;
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <g_battery_type>
						g_sufficient_power_detected = TRUE;
    1830:	30 92 2f 04 	sts	0x042F, r3	; 0x80042f <g_sufficient_power_detected>
    1834:	d4 c1       	rjmp	.+936    	; 0x1bde <main+0x4b6>
					}
				}
			}
		}

		if(init_hardware)
    1836:	44 20       	and	r4, r4
    1838:	69 f1       	breq	.+90     	; 0x1894 <main+0x16c>
		{
			code = ERROR_CODE_NO_ERROR;
    183a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <code.3375>

			if(hw_tries)
    183e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <hw_tries.3379>
    1842:	88 23       	and	r24, r24
    1844:	39 f1       	breq	.+78     	; 0x1894 <main+0x16c>
			{
				hw_tries--;
    1846:	81 50       	subi	r24, 0x01	; 1
    1848:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <hw_tries.3379>

EC hw_init(void)
{
	/**
	 * Initialize the transmitter */
	EC code = init_transmitter();
    184c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <init_transmitter>
			code = ERROR_CODE_NO_ERROR;

			if(hw_tries)
			{
				hw_tries--;
				code = hw_init();   /* initialize transmitter and related I2C devices */
    1850:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <code.3375>
				init_hardware = (code != ERROR_CODE_NO_ERROR);
    1854:	43 2c       	mov	r4, r3
    1856:	81 11       	cpse	r24, r1
    1858:	01 c0       	rjmp	.+2      	; 0x185c <main+0x134>
    185a:	41 2c       	mov	r4, r1

				if(!init_hardware)  /* hardware was successfully initialized */
    185c:	81 11       	cpse	r24, r1
    185e:	15 c0       	rjmp	.+42     	; 0x188a <main+0x162>
				{
					SC status = STATUS_CODE_IDLE;
    1860:	19 82       	std	Y+1, r1	; 0x01
					EC ec = ERROR_CODE_SW_LOGIC_ERROR;
					tries = 10;
    1862:	0f 2e       	mov	r0, r31
    1864:	fa e0       	ldi	r31, 0x0A	; 10
    1866:	5f 2e       	mov	r5, r31
    1868:	f0 2d       	mov	r31, r0
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <main+0x14a>

					while(ec && tries)
					{
						if(tries)
    186c:	55 20       	and	r5, r5
    186e:	09 f4       	brne	.+2      	; 0x1872 <main+0x14a>
						{
							tries--;
    1870:	c3 c1       	rjmp	.+902    	; 0x1bf8 <main+0x4d0>
						}
						ec = rtc_init();
    1872:	5a 94       	dec	r5
    1874:	af de       	rcall	.-674    	; 0x15d4 <rtc_init>
				{
					SC status = STATUS_CODE_IDLE;
					EC ec = ERROR_CODE_SW_LOGIC_ERROR;
					tries = 10;

					while(ec && tries)
    1876:	88 23       	and	r24, r24
    1878:	09 f4       	brne	.+2      	; 0x187c <main+0x154>
    187a:	b3 c1       	rjmp	.+870    	; 0x1be2 <main+0x4ba>
    187c:	51 10       	cpse	r5, r1
    187e:	f6 cf       	rjmp	.-20     	; 0x186c <main+0x144>
    1880:	04 c0       	rjmp	.+8      	; 0x188a <main+0x162>
					if(!ec)
					{
						g_last_status_code = launchEvent(&status);
						if(g_go_to_sleep)
						{
							g_sleepType = SLEEP_AFTER_WIFI_GOES_OFF;
    1882:	20 92 1a 04 	sts	0x041A, r2	; 0x80041a <g_sleepType>
							g_go_to_sleep = FALSE;
    1886:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <g_go_to_sleep>
						}
					}
				}
			}

			if(code)    /* avoid unnecessarily clearing any pre-existing error code */
    188a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <code.3375>
    188e:	81 11       	cpse	r24, r1
			{
				/*  If the  hardware fails to initialize, report the failure to
				*   the user over WiFi by sending an appropriate error code. */
				g_last_error_code = code;
    1890:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
		}

		/********************************
		 * Handle sleep
		 ******************************/
		if(g_go_to_sleep)
    1894:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <g_go_to_sleep>
    1898:	88 23       	and	r24, r24
    189a:	09 f4       	brne	.+2      	; 0x189e <main+0x176>
    189c:	42 c0       	rjmp	.+132    	; 0x1922 <main+0x1fa>
		{
			init_hardware = FALSE;                  /* ensure failing attempts are canceled */
			g_sufficient_power_detected = FALSE;    /* init hardware on return from sleep */
    189e:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <g_sufficient_power_detected>
			g_seconds_left_to_sleep = g_seconds_to_sleep;
    18a2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <g_seconds_to_sleep>
    18a6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_seconds_to_sleep+0x1>
    18aa:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <g_seconds_to_sleep+0x2>
    18ae:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <g_seconds_to_sleep+0x3>
    18b2:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <g_seconds_left_to_sleep>
    18b6:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <g_seconds_left_to_sleep+0x1>
    18ba:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <g_seconds_left_to_sleep+0x2>
    18be:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <g_seconds_left_to_sleep+0x3>
			linkbus_disable();
    18c2:	0e 94 b8 01 	call	0x370	; 0x370 <linkbus_disable>

			while(g_go_to_sleep)
    18c6:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <g_go_to_sleep>
    18ca:	88 23       	and	r24, r24
			{
				set_ports(g_sleepType); /* Sleep occurs here */
    18cc:	39 f0       	breq	.+14     	; 0x18dc <main+0x1b4>
    18ce:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <g_sleepType>
    18d2:	a6 de       	rcall	.-692    	; 0x1620 <set_ports>
			init_hardware = FALSE;                  /* ensure failing attempts are canceled */
			g_sufficient_power_detected = FALSE;    /* init hardware on return from sleep */
			g_seconds_left_to_sleep = g_seconds_to_sleep;
			linkbus_disable();

			while(g_go_to_sleep)
    18d4:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <g_go_to_sleep>
    18d8:	81 11       	cpse	r24, r1
			{
				set_ports(g_sleepType); /* Sleep occurs here */
			}

			set_ports(NOT_SLEEPING);
    18da:	f9 cf       	rjmp	.-14     	; 0x18ce <main+0x1a6>
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	a0 de       	rcall	.-704    	; 0x1620 <set_ports>
			linkbus_enable();
    18e0:	0e 94 ce 01 	call	0x39c	; 0x39c <linkbus_enable>
			wdt_init(WD_HW_RESETS);         /* enable hardware interrupts */
    18e4:	83 2d       	mov	r24, r3
    18e6:	0e 94 07 03 	call	0x60e	; 0x60e <wdt_init>
			wdt_reset();                    /* HW watchdog */
    18ea:	a8 95       	wdr
			g_i2c_not_timed_out = FALSE;    /* unstick I2C */
    18ec:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <g_i2c_not_timed_out>

			if((g_sleepType == SLEEP_UNTIL_NEXT_XMSN) || (g_sleepType == SLEEP_UNTIL_START_TIME))
    18f0:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <g_sleepType>
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	21 f0       	breq	.+8      	; 0x1900 <main+0x1d8>
    18f8:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <g_sleepType>
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	29 f4       	brne	.+10     	; 0x190a <main+0x1e2>
			{
				hw_tries = 10;              /* give up after too many failures */
    1900:	8a e0       	ldi	r24, 0x0A	; 10
    1902:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <hw_tries.3379>
				init_hardware = TRUE;
    1906:	43 2c       	mov	r4, r3
    1908:	0c c0       	rjmp	.+24     	; 0x1922 <main+0x1fa>
			}
			else
			{
				g_wifi_enable_delay = 2;
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <g_wifi_enable_delay>
				g_WiFi_shutdown_seconds = 120;
    1910:	88 e7       	ldi	r24, 0x78	; 120
    1912:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_WiFi_shutdown_seconds>
				g_last_status_code = STATUS_CODE_RETURNED_FROM_SLEEP;
    1916:	8d ee       	ldi	r24, 0xED	; 237
    1918:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
				g_check_for_next_event = TRUE;
    191c:	30 92 10 04 	sts	0x0410, r3	; 0x800410 <g_check_for_next_event>
		/********************************
		 * Handle sleep
		 ******************************/
		if(g_go_to_sleep)
		{
			init_hardware = FALSE;                  /* ensure failing attempts are canceled */
    1920:	41 2c       	mov	r4, r1
				g_last_status_code = STATUS_CODE_RETURNED_FROM_SLEEP;
				g_check_for_next_event = TRUE;
			}
		}

		if(g_calibrate_baud)
    1922:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <g_calibrate_baud>
    1926:	88 23       	and	r24, r24
    1928:	09 f4       	brne	.+2      	; 0x192c <main+0x204>
    192a:	74 c0       	rjmp	.+232    	; 0x1a14 <main+0x2ec>
		{
			if(!g_baud_count)
    192c:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <g_baud_count>
    1930:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <g_baud_count+0x1>
    1934:	89 2b       	or	r24, r25
    1936:	09 f0       	breq	.+2      	; 0x193a <main+0x212>
    1938:	6d c0       	rjmp	.+218    	; 0x1a14 <main+0x2ec>
			{
				static uint8_t calVal = 10;
				g_baud_count = 3600 / OCR2A;
    193a:	f4 01       	movw	r30, r8
    193c:	60 81       	ld	r22, Z
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	c3 01       	movw	r24, r6
    1942:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divmodhi4>
    1946:	70 93 1d 04 	sts	0x041D, r23	; 0x80041d <g_baud_count+0x1>
    194a:	60 93 1c 04 	sts	0x041C, r22	; 0x80041c <g_baud_count>
				g_WiFi_shutdown_seconds = 240;
    194e:	80 ef       	ldi	r24, 0xF0	; 240
    1950:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_WiFi_shutdown_seconds>

				if(g_OSCCAL_inhibit)
    1954:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <g_OSCCAL_inhibit>
    1958:	88 23       	and	r24, r24
    195a:	11 f1       	breq	.+68     	; 0x19a0 <main+0x278>
				{
					if(calVal == 10)
    195c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <calVal.3394>
    1960:	8a 30       	cpi	r24, 0x0A	; 10
    1962:	59 f4       	brne	.+22     	; 0x197a <main+0x252>
					{
						calibrateOscillator(OSCCAL);
    1964:	e6 e6       	ldi	r30, 0x66	; 102
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	0e 94 ac 02 	call	0x558	; 0x558 <calibrateOscillator>
						calVal++;
    196e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <calVal.3394>
    1972:	8f 5f       	subi	r24, 0xFF	; 255
    1974:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <calVal.3394>
    1978:	4d c0       	rjmp	.+154    	; 0x1a14 <main+0x2ec>
					}
					else
					{
						calibrateOscillator(0); /* Tell WiFi that calibration finished */
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	0e 94 ac 02 	call	0x558	; 0x558 <calibrateOscillator>
						g_baud_count = 36000 / OCR2A;
    1980:	f4 01       	movw	r30, r8
    1982:	20 81       	ld	r18, Z
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	60 ea       	ldi	r22, 0xA0	; 160
    198c:	7c e8       	ldi	r23, 0x8C	; 140
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <__divmodsi4>
    1996:	30 93 1d 04 	sts	0x041D, r19	; 0x80041d <g_baud_count+0x1>
    199a:	20 93 1c 04 	sts	0x041C, r18	; 0x80041c <g_baud_count>
    199e:	3a c0       	rjmp	.+116    	; 0x1a14 <main+0x2ec>
					}
				}
				else if(calVal > 240)
    19a0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <calVal.3394>
    19a4:	81 3f       	cpi	r24, 0xF1	; 241
    19a6:	08 f1       	brcs	.+66     	; 0x19ea <main+0x2c2>
				{
					if(g_best_OSCCAL)
    19a8:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <g_best_OSCCAL>
    19ac:	88 23       	and	r24, r24
    19ae:	51 f0       	breq	.+20     	; 0x19c4 <main+0x29c>
					{
						OSCCAL = g_best_OSCCAL;
    19b0:	e6 e6       	ldi	r30, 0x66	; 102
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 83       	st	Z, r24
						eeprom_update_byte(&ee_clock_OSCCAL, g_best_OSCCAL);
    19b6:	60 91 1e 04 	lds	r22, 0x041E	; 0x80041e <g_best_OSCCAL>
    19ba:	8f e3       	ldi	r24, 0x3F	; 63
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <main+0x2a4>
					}
					else
					{
						OSCCAL = holdOSCCAL;
    19c4:	2a 81       	ldd	r18, Y+2	; 0x02
    19c6:	e6 e6       	ldi	r30, 0x66	; 102
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	20 83       	st	Z, r18
					}

					calVal = 0;
    19cc:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <calVal.3394>
					g_baud_count = 6000 / OCR2A;
    19d0:	f4 01       	movw	r30, r8
    19d2:	60 81       	ld	r22, Z
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	80 e7       	ldi	r24, 0x70	; 112
    19d8:	97 e1       	ldi	r25, 0x17	; 23
    19da:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divmodhi4>
    19de:	70 93 1d 04 	sts	0x041D, r23	; 0x80041d <g_baud_count+0x1>
    19e2:	60 93 1c 04 	sts	0x041C, r22	; 0x80041c <g_baud_count>
					init_hardware = TRUE;
    19e6:	43 2c       	mov	r4, r3
    19e8:	15 c0       	rjmp	.+42     	; 0x1a14 <main+0x2ec>
				}
				else
				{
					if(calVal)
    19ea:	88 23       	and	r24, r24
    19ec:	41 f0       	breq	.+16     	; 0x19fe <main+0x2d6>
					{
						calibrateOscillator(calVal);
    19ee:	0e 94 ac 02 	call	0x558	; 0x558 <calibrateOscillator>
						calVal += 3;
    19f2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <calVal.3394>
    19f6:	8d 5f       	subi	r24, 0xFD	; 253
    19f8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <calVal.3394>
    19fc:	0b c0       	rjmp	.+22     	; 0x1a14 <main+0x2ec>
					}
					else
					{
						calibrateOscillator(0); /* Tell WiFi that calibration finished */
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	0e 94 ac 02 	call	0x558	; 0x558 <calibrateOscillator>
						calVal = 10;
    1a04:	8a e0       	ldi	r24, 0x0A	; 10
    1a06:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <calVal.3394>
						g_calibrate_baud = FALSE;
    1a0a:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <g_calibrate_baud>
						g_WiFi_shutdown_seconds = 120;
    1a0e:	88 e7       	ldi	r24, 0x78	; 120
    1a10:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_WiFi_shutdown_seconds>
					}
				}
			}
		}

		if(g_report_seconds)
    1a14:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <g_report_seconds>
    1a18:	88 23       	and	r24, r24
    1a1a:	d9 f0       	breq	.+54     	; 0x1a52 <main+0x32a>
		{
			g_report_seconds = FALSE;
    1a1c:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <g_report_seconds>
			sprintf(g_tempStr, "%lu", time(NULL));
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <time>
    1a28:	9f 93       	push	r25
    1a2a:	8f 93       	push	r24
    1a2c:	7f 93       	push	r23
    1a2e:	6f 93       	push	r22
    1a30:	df 92       	push	r13
    1a32:	cf 92       	push	r12
    1a34:	1f 93       	push	r17
    1a36:	0f 93       	push	r16
    1a38:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
			lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_CLOCK_LABEL, g_tempStr);
    1a3c:	a8 01       	movw	r20, r16
    1a3e:	67 e6       	ldi	r22, 0x67	; 103
    1a40:	71 e0       	ldi	r23, 0x01	; 1
    1a42:	82 2d       	mov	r24, r2
    1a44:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
		}

		if(g_last_error_code)
    1a52:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <g_last_error_code>
    1a56:	88 23       	and	r24, r24
    1a58:	c1 f0       	breq	.+48     	; 0x1a8a <main+0x362>
		{
			sprintf(g_tempStr, "%u", g_last_error_code);
    1a5a:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <g_last_error_code>
    1a5e:	1f 92       	push	r1
    1a60:	8f 93       	push	r24
    1a62:	ff 92       	push	r15
    1a64:	ef 92       	push	r14
    1a66:	1f 93       	push	r17
    1a68:	0f 93       	push	r16
    1a6a:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
			lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_ERRORCODE_LABEL, g_tempStr);
    1a6e:	a8 01       	movw	r20, r16
    1a70:	6e e6       	ldi	r22, 0x6E	; 110
    1a72:	71 e0       	ldi	r23, 0x01	; 1
    1a74:	82 2d       	mov	r24, r2
    1a76:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
			g_last_error_code = ERROR_CODE_NO_ERROR;
    1a7a:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <g_last_error_code>
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
		}

		if(g_last_status_code)
    1a8a:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <g_last_status_code>
    1a8e:	88 23       	and	r24, r24
    1a90:	c1 f0       	breq	.+48     	; 0x1ac2 <main+0x39a>
		{
			sprintf(g_tempStr, "%u", g_last_status_code);
    1a92:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <g_last_status_code>
    1a96:	1f 92       	push	r1
    1a98:	8f 93       	push	r24
    1a9a:	ff 92       	push	r15
    1a9c:	ef 92       	push	r14
    1a9e:	1f 93       	push	r17
    1aa0:	0f 93       	push	r16
    1aa2:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
			lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_STATUSCODE_LABEL, g_tempStr);
    1aa6:	a8 01       	movw	r20, r16
    1aa8:	61 e7       	ldi	r22, 0x71	; 113
    1aaa:	71 e0       	ldi	r23, 0x01	; 1
    1aac:	82 2d       	mov	r24, r2
    1aae:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
			g_last_status_code = STATUS_CODE_IDLE;
    1ab2:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <g_last_status_code>
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
		}

		if(g_antenna_connection_changed)
    1ac2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <g_antenna_connection_changed>
    1ac6:	88 23       	and	r24, r24
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <main+0x3a4>
    1aca:	62 c0       	rjmp	.+196    	; 0x1b90 <main+0x468>
		{
			static AntConnType lastAntennaConnectState = ANT_CONNECTION_UNDETERMINED;
			static uint8_t confirmations = 5;

			if(g_antenna_connect_state == ANT_CONNECTION_UNDETERMINED)
    1acc:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <g_antenna_connect_state>
    1ad0:	81 11       	cpse	r24, r1
    1ad2:	4a c0       	rjmp	.+148    	; 0x1b68 <main+0x440>
			{
				if(!g_util_tick_countdown)
    1ad4:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <g_util_tick_countdown>
    1ad8:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <g_util_tick_countdown+0x1>
    1adc:	89 2b       	or	r24, r25
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <main+0x3ba>
    1ae0:	57 c0       	rjmp	.+174    	; 0x1b90 <main+0x468>
				{
					AntConnType connection = ANT_CONNECTION_UNDETERMINED;

					if(g_lastConversionResult[BAND_80M_ANTENNA] < ANTENNA_DETECT_THRESH)
    1ae2:	f5 01       	movw	r30, r10
    1ae4:	86 81       	ldd	r24, Z+6	; 0x06
    1ae6:	97 81       	ldd	r25, Z+7	; 0x07
    1ae8:	44 97       	sbiw	r24, 0x14	; 20
    1aea:	10 f4       	brcc	.+4      	; 0x1af0 <main+0x3c8>
					{
						connection = ANT_80M_CONNECTED;
    1aec:	82 2d       	mov	r24, r2
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <main+0x3ca>

			if(g_antenna_connect_state == ANT_CONNECTION_UNDETERMINED)
			{
				if(!g_util_tick_countdown)
				{
					AntConnType connection = ANT_CONNECTION_UNDETERMINED;
    1af0:	80 e0       	ldi	r24, 0x00	; 0
					if(g_lastConversionResult[BAND_80M_ANTENNA] < ANTENNA_DETECT_THRESH)
					{
						connection = ANT_80M_CONNECTED;
					}

					if(g_lastConversionResult[BAND_2M_ANTENNA] < ANTENNA_DETECT_THRESH)
    1af2:	f5 01       	movw	r30, r10
    1af4:	20 85       	ldd	r18, Z+8	; 0x08
    1af6:	31 85       	ldd	r19, Z+9	; 0x09
    1af8:	24 31       	cpi	r18, 0x14	; 20
    1afa:	31 05       	cpc	r19, r1
    1afc:	28 f4       	brcc	.+10     	; 0x1b08 <main+0x3e0>
					{
						if(connection == ANT_80M_CONNECTED)
    1afe:	83 30       	cpi	r24, 0x03	; 3
    1b00:	11 f0       	breq	.+4      	; 0x1b06 <main+0x3de>
						{
							connection = ANT_2M_AND_80M_CONNECTED;
						}
						else
						{
							connection = ANT_2M_CONNECTED;
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <main+0x3e0>

					if(g_lastConversionResult[BAND_2M_ANTENNA] < ANTENNA_DETECT_THRESH)
					{
						if(connection == ANT_80M_CONNECTED)
						{
							connection = ANT_2M_AND_80M_CONNECTED;
    1b06:	84 e0       	ldi	r24, 0x04	; 4
						{
							connection = ANT_2M_CONNECTED;
						}
					}

					if(lastAntennaConnectState == connection)
    1b08:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <lastAntennaConnectState.3395>
    1b0c:	89 13       	cpse	r24, r25
    1b0e:	26 c0       	rjmp	.+76     	; 0x1b5c <main+0x434>
					{
						if(confirmations)
    1b10:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <confirmations.3396>
    1b14:	99 23       	and	r25, r25
    1b16:	51 f0       	breq	.+20     	; 0x1b2c <main+0x404>
						{
							confirmations--;
    1b18:	91 50       	subi	r25, 0x01	; 1
    1b1a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <confirmations.3396>
							g_util_tick_countdown = ANTENNA_DETECT_DEBOUNCE;
    1b1e:	22 e3       	ldi	r18, 0x32	; 50
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	30 93 d4 03 	sts	0x03D4, r19	; 0x8003d4 <g_util_tick_countdown+0x1>
    1b26:	20 93 d3 03 	sts	0x03D3, r18	; 0x8003d3 <g_util_tick_countdown>
    1b2a:	1b c0       	rjmp	.+54     	; 0x1b62 <main+0x43a>
						}
						else
						{
							g_antenna_connect_state = connection;
    1b2c:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <g_antenna_connect_state>
							g_antenna_connection_changed = FALSE;
    1b30:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <g_antenna_connection_changed>

							if(connection == ANT_80M_CONNECTED)
    1b34:	83 30       	cpi	r24, 0x03	; 3
    1b36:	61 f4       	brne	.+24     	; 0x1b50 <main+0x428>
							{
								g_last_status_code = STATUS_CODE_80M_ANT_ATTACHED;
    1b38:	9b ee       	ldi	r25, 0xEB	; 235
    1b3a:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <g_last_status_code>
								/* Re-enable transmitter power and state if it is currently operating */
								if(g_event_commenced)
    1b3e:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <g_event_commenced>
    1b42:	99 23       	and	r25, r25
    1b44:	71 f0       	breq	.+28     	; 0x1b62 <main+0x43a>
								{
									hw_tries = 10;              /* give up after too many failures */
    1b46:	9a e0       	ldi	r25, 0x0A	; 10
    1b48:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <hw_tries.3379>
									init_hardware = TRUE;
    1b4c:	43 2c       	mov	r4, r3
    1b4e:	09 c0       	rjmp	.+18     	; 0x1b62 <main+0x43a>
								}
							}
							else if(connection == ANT_2M_CONNECTED)
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	39 f4       	brne	.+14     	; 0x1b62 <main+0x43a>
							{
								/*txSetBand(BAND_2M, OFF); */
								g_last_status_code = STATUS_CODE_2M_ANT_ATTACHED;
    1b54:	9a ee       	ldi	r25, 0xEA	; 234
    1b56:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <g_last_status_code>
    1b5a:	03 c0       	rjmp	.+6      	; 0x1b62 <main+0x43a>
							}
						}
					}
					else
					{
						confirmations = 5;
    1b5c:	95 e0       	ldi	r25, 0x05	; 5
    1b5e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <confirmations.3396>
					}

					lastAntennaConnectState = connection;
    1b62:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <lastAntennaConnectState.3395>
    1b66:	14 c0       	rjmp	.+40     	; 0x1b90 <main+0x468>
				}
			}
			else if(g_antenna_connect_state == ANT_ALL_DISCONNECTED)
    1b68:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <g_antenna_connect_state>
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	59 f4       	brne	.+22     	; 0x1b86 <main+0x45e>
			{
				powerToTransmitter(OFF);
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <powerToTransmitter>
				g_antenna_connection_changed = FALSE;
    1b76:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <g_antenna_connection_changed>
				lastAntennaConnectState = ANT_ALL_DISCONNECTED;
    1b7a:	30 92 4d 04 	sts	0x044D, r3	; 0x80044d <lastAntennaConnectState.3395>
				g_last_status_code = STATUS_CODE_NO_ANT_ATTACHED;
    1b7e:	89 ee       	ldi	r24, 0xE9	; 233
    1b80:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
    1b84:	05 c0       	rjmp	.+10     	; 0x1b90 <main+0x468>
			}
			else    /* logic error - this should not occur */
			{
				powerToTransmitter(OFF);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <powerToTransmitter>
				g_antenna_connection_changed = FALSE;
    1b8c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <g_antenna_connection_changed>
				g_last_error_code = ec;
			}
		}
#endif // SUPPORT_STATE_MACHINE

		if(g_check_for_next_event && !g_waiting_for_next_event && !g_shutting_down_wifi)
    1b90:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <g_check_for_next_event>
    1b94:	88 23       	and	r24, r24
    1b96:	09 f1       	breq	.+66     	; 0x1bda <main+0x4b2>
    1b98:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <g_waiting_for_next_event>
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	1d c0       	rjmp	.+58     	; 0x1bda <main+0x4b2>
    1ba0:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <g_shutting_down_wifi>
    1ba4:	81 11       	cpse	r24, r1
    1ba6:	19 c0       	rjmp	.+50     	; 0x1bda <main+0x4b2>
		{
			if(!g_WiFi_shutdown_seconds)    /* Power up WiFi to receive next event */
    1ba8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_WiFi_shutdown_seconds>
    1bac:	81 11       	cpse	r24, r1
    1bae:	07 c0       	rjmp	.+14     	; 0x1bbe <main+0x496>
			{
				wifi_power(ON);             /* power on WiFi */
    1bb0:	83 2d       	mov	r24, r3
    1bb2:	0e 94 19 25 	call	0x4a32	; 0x4a32 <wifi_power>
				wifi_reset(OFF);            /* bring WiFi out of reset */
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	0e 94 13 25 	call	0x4a26	; 0x4a26 <wifi_reset>
    1bbc:	07 c0       	rjmp	.+14     	; 0x1bcc <main+0x4a4>
			}
			else                            /* WiFi is already powered up */
			{
				lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_ESP_LABEL, "1");
    1bbe:	44 e7       	ldi	r20, 0x74	; 116
    1bc0:	51 e0       	ldi	r21, 0x01	; 1
    1bc2:	66 e7       	ldi	r22, 0x76	; 118
    1bc4:	71 e0       	ldi	r23, 0x01	; 1
    1bc6:	82 2d       	mov	r24, r2
    1bc8:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
			}

			g_WiFi_shutdown_seconds = 60;
    1bcc:	8c e3       	ldi	r24, 0x3C	; 60
    1bce:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_WiFi_shutdown_seconds>
			g_waiting_for_next_event = TRUE;
    1bd2:	30 92 11 04 	sts	0x0411, r3	; 0x800411 <g_waiting_for_next_event>
			g_check_for_next_event = FALSE;
    1bd6:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <g_check_for_next_event>
		}

		/***********************************************************************
		 *  Handle arriving Linkbus messages
		 ************************************************************************/
		handleLinkBusMsgs();
    1bda:	12 d0       	rcall	.+36     	; 0x1c00 <handleLinkBusMsgs>
	}   /* while(1) */
    1bdc:	0a ce       	rjmp	.-1004   	; 0x17f2 <main+0xca>
 ************************************************************************/
int main( void )
{
	static EC code = ERROR_CODE_SW_LOGIC_ERROR;
	uint8_t tries = 10;
	BOOL init_hardware = FALSE;
    1bde:	43 2c       	mov	r4, r3
    1be0:	2c ce       	rjmp	.-936    	; 0x183a <main+0x112>
						ec = rtc_init();
					}

					if(!ec)
					{
						g_last_status_code = launchEvent(&status);
    1be2:	ce 01       	movw	r24, r28
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	0e 94 32 17 	call	0x2e64	; 0x2e64 <launchEvent>
    1bea:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
						if(g_go_to_sleep)
    1bee:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <g_go_to_sleep>
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	46 ce       	rjmp	.-884    	; 0x1882 <main+0x15a>
					{
						if(tries)
						{
							tries--;
						}
						ec = rtc_init();
    1bf6:	49 ce       	rjmp	.-878    	; 0x188a <main+0x162>
    1bf8:	ed dc       	rcall	.-1574   	; 0x15d4 <rtc_init>
				{
					SC status = STATUS_CODE_IDLE;
					EC ec = ERROR_CODE_SW_LOGIC_ERROR;
					tries = 10;

					while(ec && tries)
    1bfa:	88 23       	and	r24, r24
    1bfc:	91 f3       	breq	.-28     	; 0x1be2 <main+0x4ba>
    1bfe:	45 ce       	rjmp	.-886    	; 0x188a <main+0x162>

00001c00 <handleLinkBusMsgs>:
	}   /* while(1) */
}/* main */

/* The compiler does not seem to optimize large switch statements correctly */
void __attribute__((optimize("O0"))) handleLinkBusMsgs()
{
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	cb 54       	subi	r28, 0x4B	; 75
    1c12:	d1 09       	sbc	r29, r1
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
	LinkbusRxBuffer* lb_buff;
	static uint8_t event_parameter_count = 0;
	BOOL send_ack = TRUE;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	89 83       	std	Y+1, r24	; 0x01

	while((lb_buff = nextFullRxBuffer()))
    1c22:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <handleLinkBusMsgs+0x10ac>
	{
		LBMessageID msg_id = lb_buff->id;
    1c26:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c28:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	81 81       	ldd	r24, Z+1	; 0x01
    1c2e:	92 81       	ldd	r25, Z+2	; 0x02
    1c30:	99 8b       	std	Y+17, r25	; 0x11
    1c32:	88 8b       	std	Y+16, r24	; 0x10

		switch(msg_id)
    1c34:	88 89       	ldd	r24, Y+16	; 0x10
    1c36:	99 89       	ldd	r25, Y+17	; 0x11
    1c38:	82 38       	cpi	r24, 0x82	; 130
    1c3a:	fe e1       	ldi	r31, 0x1E	; 30
    1c3c:	9f 07       	cpc	r25, r31
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <handleLinkBusMsgs+0x42>
    1c40:	ef c0       	rjmp	.+478    	; 0x1e20 <handleLinkBusMsgs+0x220>
    1c42:	83 38       	cpi	r24, 0x83	; 131
    1c44:	2e e1       	ldi	r18, 0x1E	; 30
    1c46:	92 07       	cpc	r25, r18
    1c48:	b8 f5       	brcc	.+110    	; 0x1cb8 <handleLinkBusMsgs+0xb8>
    1c4a:	81 36       	cpi	r24, 0x61	; 97
    1c4c:	43 e0       	ldi	r20, 0x03	; 3
    1c4e:	94 07       	cpc	r25, r20
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <handleLinkBusMsgs+0x54>
    1c52:	a1 c5       	rjmp	.+2882   	; 0x2796 <handleLinkBusMsgs+0xb96>
    1c54:	82 36       	cpi	r24, 0x62	; 98
    1c56:	53 e0       	ldi	r21, 0x03	; 3
    1c58:	95 07       	cpc	r25, r21
    1c5a:	b0 f4       	brcc	.+44     	; 0x1c88 <handleLinkBusMsgs+0x88>
    1c5c:	84 35       	cpi	r24, 0x54	; 84
    1c5e:	91 05       	cpc	r25, r1
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <handleLinkBusMsgs+0x64>
    1c62:	0e c5       	rjmp	.+2588   	; 0x2680 <handleLinkBusMsgs+0xa80>
    1c64:	85 35       	cpi	r24, 0x55	; 85
    1c66:	91 05       	cpc	r25, r1
    1c68:	28 f4       	brcc	.+10     	; 0x1c74 <handleLinkBusMsgs+0x74>
    1c6a:	82 34       	cpi	r24, 0x42	; 66
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <handleLinkBusMsgs+0x72>
    1c70:	90 c7       	rjmp	.+3872   	; 0x2b92 <handleLinkBusMsgs+0xf92>
    1c72:	eb c7       	rjmp	.+4054   	; 0x2c4a <handleLinkBusMsgs+0x104a>
    1c74:	85 31       	cpi	r24, 0x15	; 21
    1c76:	e3 e0       	ldi	r30, 0x03	; 3
    1c78:	9e 07       	cpc	r25, r30
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <handleLinkBusMsgs+0x7e>
    1c7c:	e5 c1       	rjmp	.+970    	; 0x2048 <handleLinkBusMsgs+0x448>
    1c7e:	8e 31       	cpi	r24, 0x1E	; 30
    1c80:	93 40       	sbci	r25, 0x03	; 3
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <handleLinkBusMsgs+0x86>
    1c84:	1a c4       	rjmp	.+2100   	; 0x24ba <handleLinkBusMsgs+0x8ba>
    1c86:	e1 c7       	rjmp	.+4034   	; 0x2c4a <handleLinkBusMsgs+0x104a>
    1c88:	8f 3a       	cpi	r24, 0xAF	; 175
    1c8a:	23 e0       	ldi	r18, 0x03	; 3
    1c8c:	92 07       	cpc	r25, r18
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <handleLinkBusMsgs+0x92>
    1c90:	50 c0       	rjmp	.+160    	; 0x1d32 <handleLinkBusMsgs+0x132>
    1c92:	80 3b       	cpi	r24, 0xB0	; 176
    1c94:	43 e0       	ldi	r20, 0x03	; 3
    1c96:	94 07       	cpc	r25, r20
    1c98:	28 f4       	brcc	.+10     	; 0x1ca4 <handleLinkBusMsgs+0xa4>
    1c9a:	84 38       	cpi	r24, 0x84	; 132
    1c9c:	93 40       	sbci	r25, 0x03	; 3
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <handleLinkBusMsgs+0xa2>
    1ca0:	8b c2       	rjmp	.+1302   	; 0x21b8 <handleLinkBusMsgs+0x5b8>
    1ca2:	d3 c7       	rjmp	.+4006   	; 0x2c4a <handleLinkBusMsgs+0x104a>
    1ca4:	86 3a       	cpi	r24, 0xA6	; 166
    1ca6:	ec e1       	ldi	r30, 0x1C	; 28
    1ca8:	9e 07       	cpc	r25, r30
    1caa:	09 f4       	brne	.+2      	; 0x1cae <handleLinkBusMsgs+0xae>
    1cac:	93 c6       	rjmp	.+3366   	; 0x29d4 <handleLinkBusMsgs+0xdd4>
    1cae:	88 31       	cpi	r24, 0x18	; 24
    1cb0:	9d 41       	sbci	r25, 0x1D	; 29
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <handleLinkBusMsgs+0xb6>
    1cb4:	04 c6       	rjmp	.+3080   	; 0x28be <handleLinkBusMsgs+0xcbe>
    1cb6:	c9 c7       	rjmp	.+3986   	; 0x2c4a <handleLinkBusMsgs+0x104a>
    1cb8:	81 3c       	cpi	r24, 0xC1	; 193
    1cba:	22 e2       	ldi	r18, 0x22	; 34
    1cbc:	92 07       	cpc	r25, r18
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <handleLinkBusMsgs+0xc2>
    1cc0:	be c1       	rjmp	.+892    	; 0x203e <handleLinkBusMsgs+0x43e>
    1cc2:	82 3c       	cpi	r24, 0xC2	; 194
    1cc4:	42 e2       	ldi	r20, 0x22	; 34
    1cc6:	94 07       	cpc	r25, r20
    1cc8:	c0 f4       	brcc	.+48     	; 0x1cfa <handleLinkBusMsgs+0xfa>
    1cca:	8e 36       	cpi	r24, 0x6E	; 110
    1ccc:	51 e2       	ldi	r21, 0x21	; 33
    1cce:	95 07       	cpc	r25, r21
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <handleLinkBusMsgs+0xd4>
    1cd2:	09 c1       	rjmp	.+530    	; 0x1ee6 <handleLinkBusMsgs+0x2e6>
    1cd4:	8f 36       	cpi	r24, 0x6F	; 111
    1cd6:	e1 e2       	ldi	r30, 0x21	; 33
    1cd8:	9e 07       	cpc	r25, r30
    1cda:	28 f4       	brcc	.+10     	; 0x1ce6 <handleLinkBusMsgs+0xe6>
    1cdc:	81 3d       	cpi	r24, 0xD1	; 209
    1cde:	9e 41       	sbci	r25, 0x1E	; 30
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <handleLinkBusMsgs+0xe4>
    1ce2:	70 c5       	rjmp	.+2784   	; 0x27c4 <handleLinkBusMsgs+0xbc4>
    1ce4:	b2 c7       	rjmp	.+3940   	; 0x2c4a <handleLinkBusMsgs+0x104a>
    1ce6:	8d 35       	cpi	r24, 0x5D	; 93
    1ce8:	22 e2       	ldi	r18, 0x22	; 34
    1cea:	92 07       	cpc	r25, r18
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <handleLinkBusMsgs+0xf0>
    1cee:	46 c0       	rjmp	.+140    	; 0x1d7c <handleLinkBusMsgs+0x17c>
    1cf0:	8d 3a       	cpi	r24, 0xAD	; 173
    1cf2:	92 42       	sbci	r25, 0x22	; 34
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <handleLinkBusMsgs+0xf8>
    1cf6:	42 c1       	rjmp	.+644    	; 0x1f7c <handleLinkBusMsgs+0x37c>
    1cf8:	a8 c7       	rjmp	.+3920   	; 0x2c4a <handleLinkBusMsgs+0x104a>
    1cfa:	80 3d       	cpi	r24, 0xD0	; 208
    1cfc:	53 e2       	ldi	r21, 0x23	; 35
    1cfe:	95 07       	cpc	r25, r21
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <handleLinkBusMsgs+0x104>
    1d02:	17 c4       	rjmp	.+2094   	; 0x2532 <handleLinkBusMsgs+0x932>
    1d04:	81 3d       	cpi	r24, 0xD1	; 209
    1d06:	e3 e2       	ldi	r30, 0x23	; 35
    1d08:	9e 07       	cpc	r25, r30
    1d0a:	48 f4       	brcc	.+18     	; 0x1d1e <handleLinkBusMsgs+0x11e>
    1d0c:	8a 39       	cpi	r24, 0x9A	; 154
    1d0e:	f3 e2       	ldi	r31, 0x23	; 35
    1d10:	9f 07       	cpc	r25, r31
    1d12:	81 f1       	breq	.+96     	; 0x1d74 <handleLinkBusMsgs+0x174>
    1d14:	8f 3c       	cpi	r24, 0xCF	; 207
    1d16:	93 42       	sbci	r25, 0x23	; 35
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <handleLinkBusMsgs+0x11c>
    1d1a:	20 c7       	rjmp	.+3648   	; 0x2b5c <handleLinkBusMsgs+0xf5c>
    1d1c:	96 c7       	rjmp	.+3884   	; 0x2c4a <handleLinkBusMsgs+0x104a>
    1d1e:	87 3f       	cpi	r24, 0xF7	; 247
    1d20:	43 e2       	ldi	r20, 0x23	; 35
    1d22:	94 07       	cpc	r25, r20
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <handleLinkBusMsgs+0x128>
    1d26:	bd c2       	rjmp	.+1402   	; 0x22a2 <handleLinkBusMsgs+0x6a2>
    1d28:	8c 39       	cpi	r24, 0x9C	; 156
    1d2a:	94 42       	sbci	r25, 0x24	; 36
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <handleLinkBusMsgs+0x130>
    1d2e:	29 c7       	rjmp	.+3666   	; 0x2b82 <handleLinkBusMsgs+0xf82>
    1d30:	8c c7       	rjmp	.+3864   	; 0x2c4a <handleLinkBusMsgs+0x104a>
		{
			case MESSAGE_WIFI:
			{
				BOOL result;

				if(lb_buff->fields[FIELD1][0])
    1d32:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d34:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d36:	fc 01       	movw	r30, r24
    1d38:	83 81       	ldd	r24, Z+3	; 0x03
    1d3a:	88 23       	and	r24, r24
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <handleLinkBusMsgs+0x140>
    1d3e:	8b c7       	rjmp	.+3862   	; 0x2c56 <handleLinkBusMsgs+0x1056>
				{
					result = atoi(lb_buff->fields[FIELD1]);
    1d40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d44:	03 96       	adiw	r24, 0x03	; 3
    1d46:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <atoi>
    1d4a:	8a 8b       	std	Y+18, r24	; 0x12

					suspendEvent();
    1d4c:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <suspendEvent>
					linkbus_disable();
    1d50:	0e 94 b8 01 	call	0x370	; 0x370 <linkbus_disable>
					g_WiFi_shutdown_seconds = 0;    /* disable sleep */
    1d54:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <g_WiFi_shutdown_seconds>

					if(result == 0)                 /* shut off power to WiFi */
    1d58:	8a 89       	ldd	r24, Y+18	; 0x12
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <handleLinkBusMsgs+0x160>
					{
						PORTD &= ~((1 << PORTD6) | (1 << PORTD7));
    1d5e:	7b c7       	rjmp	.+3830   	; 0x2c56 <handleLinkBusMsgs+0x1056>
    1d60:	8b e2       	ldi	r24, 0x2B	; 43
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	2b e2       	ldi	r18, 0x2B	; 43
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	f9 01       	movw	r30, r18
    1d6a:	20 81       	ld	r18, Z
    1d6c:	2f 73       	andi	r18, 0x3F	; 63
    1d6e:	fc 01       	movw	r30, r24
					}
				}
			}
			break;
    1d70:	20 83       	st	Z, r18
    1d72:	71 c7       	rjmp	.+3810   	; 0x2c56 <handleLinkBusMsgs+0x1056>

			case MESSAGE_RESET:
			{
#ifndef TRANQUILIZE_WATCHDOG
					wdt_init(WD_FORCE_RESET);
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	0e 94 07 03 	call	0x60e	; 0x60e <wdt_init>
					while(1)
					{
						;
					}
    1d7a:	ff cf       	rjmp	.-2      	; 0x1d7a <handleLinkBusMsgs+0x17a>
			}
			break;

			case MESSAGE_OSC:
			{
				if(lb_buff->fields[FIELD1][0])
    1d7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d80:	fc 01       	movw	r30, r24
    1d82:	83 81       	ldd	r24, Z+3	; 0x03
    1d84:	88 23       	and	r24, r24
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <handleLinkBusMsgs+0x18a>
    1d88:	68 c7       	rjmp	.+3792   	; 0x2c5a <handleLinkBusMsgs+0x105a>
				{
					uint8_t result = 0;
    1d8a:	1b 8a       	std	Y+19, r1	; 0x13
					static uint8_t lastVal = 0;
					static uint8_t valCount = 0;
					static uint8_t bestResultCount = 0;
					int val = (uint16_t)atoi(lb_buff->fields[FIELD1]);
    1d8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d90:	03 96       	adiw	r24, 0x03	; 3
    1d92:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <atoi>
    1d96:	9d 8b       	std	Y+21, r25	; 0x15
    1d98:	8c 8b       	std	Y+20, r24	; 0x14

					if(!val)
    1d9a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d9c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d9e:	89 2b       	or	r24, r25
    1da0:	19 f4       	brne	.+6      	; 0x1da8 <handleLinkBusMsgs+0x1a8>
					{
						g_calibrate_baud = FALSE;
    1da2:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <g_calibrate_baud>
    1da6:	3a c0       	rjmp	.+116    	; 0x1e1c <handleLinkBusMsgs+0x21c>
					}
					else if(val == 255)
    1da8:	8c 89       	ldd	r24, Y+20	; 0x14
    1daa:	9d 89       	ldd	r25, Y+21	; 0x15
    1dac:	8f 3f       	cpi	r24, 0xFF	; 255
    1dae:	91 05       	cpc	r25, r1
    1db0:	31 f4       	brne	.+12     	; 0x1dbe <handleLinkBusMsgs+0x1be>
					{
						eeprom_update_byte(&ee_clock_OSCCAL, 0xFF); /* erase any existing value */
    1db2:	6f ef       	ldi	r22, 0xFF	; 255
    1db4:	8f e3       	ldi	r24, 0x3F	; 63
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
    1dbc:	2f c0       	rjmp	.+94     	; 0x1e1c <handleLinkBusMsgs+0x21c>
					}
					else
					{
						if(abs(val - lastVal) > 10)                 /* Gap identified */
    1dbe:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <lastVal.3412>
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	2c 89       	ldd	r18, Y+20	; 0x14
    1dc8:	3d 89       	ldd	r19, Y+21	; 0x15
    1dca:	a9 01       	movw	r20, r18
    1dcc:	48 1b       	sub	r20, r24
    1dce:	59 0b       	sbc	r21, r25
    1dd0:	ca 01       	movw	r24, r20
    1dd2:	99 23       	and	r25, r25
    1dd4:	1c f4       	brge	.+6      	; 0x1ddc <handleLinkBusMsgs+0x1dc>
    1dd6:	91 95       	neg	r25
    1dd8:	81 95       	neg	r24
    1dda:	91 09       	sbc	r25, r1
    1ddc:	0b 97       	sbiw	r24, 0x0b	; 11
    1dde:	2c f0       	brlt	.+10     	; 0x1dea <handleLinkBusMsgs+0x1ea>
						{
							calcOSCCAL(255);
    1de0:	8f ef       	ldi	r24, 0xFF	; 255
    1de2:	0e 94 c8 02 	call	0x590	; 0x590 <calcOSCCAL>
							valCount = 0;
    1de6:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <valCount.3413>
						}

						lastVal = val;
    1dea:	8c 89       	ldd	r24, Y+20	; 0x14
    1dec:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <lastVal.3412>
						valCount++;
    1df0:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <valCount.3413>
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <valCount.3413>
						result = calcOSCCAL(val);
    1dfa:	8c 89       	ldd	r24, Y+20	; 0x14
    1dfc:	0e 94 c8 02 	call	0x590	; 0x590 <calcOSCCAL>
    1e00:	8b 8b       	std	Y+19, r24	; 0x13

						if(valCount > bestResultCount)
    1e02:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <valCount.3413>
    1e06:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <bestResultCount.3414>
    1e0a:	89 17       	cp	r24, r25
    1e0c:	38 f4       	brcc	.+14     	; 0x1e1c <handleLinkBusMsgs+0x21c>
						{
							g_best_OSCCAL = result;
    1e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e10:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <g_best_OSCCAL>
							bestResultCount = valCount;
    1e14:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <valCount.3413>
    1e18:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <bestResultCount.3414>
						}
					}

					send_ack = FALSE;
    1e1c:	19 82       	std	Y+1, r1	; 0x01
				}
			}
			break;
    1e1e:	1d c7       	rjmp	.+3642   	; 0x2c5a <handleLinkBusMsgs+0x105a>

			case MESSAGE_ESP_COMM:
			{
				char f1 = lb_buff->fields[FIELD1][0];
    1e20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e24:	fc 01       	movw	r30, r24
    1e26:	83 81       	ldd	r24, Z+3	; 0x03
    1e28:	8e 8b       	std	Y+22, r24	; 0x16

				g_wifi_active = TRUE;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_wifi_active>

				if(f1 == 'Z')                                                       /* WiFi connected to browser - keep alive */
    1e30:	8e 89       	ldd	r24, Y+22	; 0x16
    1e32:	8a 35       	cpi	r24, 0x5A	; 90
    1e34:	21 f4       	brne	.+8      	; 0x1e3e <handleLinkBusMsgs+0x23e>
				{
					/* shut down WiFi after 2 minutes of inactivity */
					g_WiFi_shutdown_seconds = 120;                                  /* wait 2 more minutes before shutting down WiFi */
    1e36:	88 e7       	ldi	r24, 0x78	; 120
    1e38:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_WiFi_shutdown_seconds>
						g_shutting_down_wifi = TRUE;
						sei();
					}
				}
			}
			break;
    1e3c:	10 c7       	rjmp	.+3616   	; 0x2c5e <handleLinkBusMsgs+0x105e>
					/* shut down WiFi after 2 minutes of inactivity */
					g_WiFi_shutdown_seconds = 120;                                  /* wait 2 more minutes before shutting down WiFi */
				}
				else
				{
					if(f1 == '0')                                                   /* ESP says "I'm awake" */
    1e3e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e40:	80 33       	cpi	r24, 0x30	; 48
    1e42:	e1 f5       	brne	.+120    	; 0x1ebc <handleLinkBusMsgs+0x2bc>
					{
						if(g_waiting_for_next_event)
    1e44:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <g_waiting_for_next_event>
    1e48:	88 23       	and	r24, r24
    1e4a:	51 f0       	breq	.+20     	; 0x1e60 <handleLinkBusMsgs+0x260>
						{
							calibrateOscillator(0);                                 /* Abort baud calibration */
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	0e 94 ac 02 	call	0x558	; 0x558 <calibrateOscillator>
							lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_ESP_LABEL, "1"); /* Request next scheduled event */
    1e52:	44 e7       	ldi	r20, 0x74	; 116
    1e54:	51 e0       	ldi	r21, 0x01	; 1
    1e56:	66 e7       	ldi	r22, 0x76	; 118
    1e58:	71 e0       	ldi	r23, 0x01	; 1
    1e5a:	83 e0       	ldi	r24, 0x03	; 3
    1e5c:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
						}
						/* Send WiFi the current time */
						sprintf(g_tempStr, "%lu", time(NULL));
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <time>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	2b 2f       	mov	r18, r27
    1e6e:	2f 93       	push	r18
    1e70:	2a 2f       	mov	r18, r26
    1e72:	2f 93       	push	r18
    1e74:	29 2f       	mov	r18, r25
    1e76:	2f 93       	push	r18
    1e78:	8f 93       	push	r24
    1e7a:	83 e6       	ldi	r24, 0x63	; 99
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	89 2f       	mov	r24, r25
    1e80:	8f 93       	push	r24
    1e82:	83 e6       	ldi	r24, 0x63	; 99
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	8f 93       	push	r24
    1e88:	8a eb       	ldi	r24, 0xBA	; 186
    1e8a:	93 e0       	ldi	r25, 0x03	; 3
    1e8c:	89 2f       	mov	r24, r25
    1e8e:	8f 93       	push	r24
    1e90:	8a eb       	ldi	r24, 0xBA	; 186
    1e92:	93 e0       	ldi	r25, 0x03	; 3
    1e94:	8f 93       	push	r24
    1e96:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
    1e9a:	4d b7       	in	r20, 0x3d	; 61
    1e9c:	5e b7       	in	r21, 0x3e	; 62
    1e9e:	48 5f       	subi	r20, 0xF8	; 248
    1ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_CLOCK_LABEL, g_tempStr);
    1eac:	4a eb       	ldi	r20, 0xBA	; 186
    1eae:	53 e0       	ldi	r21, 0x03	; 3
    1eb0:	67 e6       	ldi	r22, 0x67	; 103
    1eb2:	71 e0       	ldi	r23, 0x01	; 1
    1eb4:	83 e0       	ldi	r24, 0x03	; 3
    1eb6:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
						g_shutting_down_wifi = TRUE;
						sei();
					}
				}
			}
			break;
    1eba:	d1 c6       	rjmp	.+3490   	; 0x2c5e <handleLinkBusMsgs+0x105e>
						}
						/* Send WiFi the current time */
						sprintf(g_tempStr, "%lu", time(NULL));
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_CLOCK_LABEL, g_tempStr);
					}
					else if(f1 == '3')                      /* ESP is ready for power off" */
    1ebc:	8e 89       	ldd	r24, Y+22	; 0x16
    1ebe:	83 33       	cpi	r24, 0x33	; 51
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <handleLinkBusMsgs+0x2c4>
    1ec2:	cd c6       	rjmp	.+3482   	; 0x2c5e <handleLinkBusMsgs+0x105e>
					{
						cli();
    1ec4:	f8 94       	cli
						g_wifi_enable_delay = 0;
    1ec6:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <g_wifi_enable_delay>
						g_WiFi_shutdown_seconds = 1;        /* Shut down WiFi in 1 seconds */
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_WiFi_shutdown_seconds>
						g_waiting_for_next_event = FALSE;   /* Prevents resetting shutdown settings */
    1ed0:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <g_waiting_for_next_event>
						g_check_for_next_event = FALSE;     /* Prevents resetting shutdown settings */
    1ed4:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <g_check_for_next_event>
						g_wifi_active = FALSE;
    1ed8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_wifi_active>
						g_shutting_down_wifi = TRUE;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <g_shutting_down_wifi>
						sei();
    1ee2:	78 94       	sei
					}
				}
			}
			break;
    1ee4:	bc c6       	rjmp	.+3448   	; 0x2c5e <handleLinkBusMsgs+0x105e>

			case MESSAGE_TX_MOD:
			{
				if(lb_buff->fields[FIELD1][0] == 'A')   /* AM */
    1ee6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ee8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eea:	fc 01       	movw	r30, r24
    1eec:	83 81       	ldd	r24, Z+3	; 0x03
    1eee:	81 34       	cpi	r24, 0x41	; 65
    1ef0:	91 f4       	brne	.+36     	; 0x1f16 <handleLinkBusMsgs+0x316>
				{
					Modulation setModulation = MODE_AM;
    1ef2:	1c ae       	std	Y+60, r1	; 0x3c
					txSetParameters(NULL, NULL, &setModulation, NULL);
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	cc 96       	adiw	r24, 0x3c	; 60
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	ac 01       	movw	r20, r24
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <txSetParameters>
					event_parameter_count++;
    1f0a:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    1f0e:	8f 5f       	subi	r24, 0xFF	; 255
    1f10:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
					Modulation setModulation = MODE_FM;
					txSetParameters(NULL, NULL, &setModulation, NULL);
					event_parameter_count++;
				}
			}
			break;
    1f14:	a6 c6       	rjmp	.+3404   	; 0x2c62 <handleLinkBusMsgs+0x1062>
				{
					Modulation setModulation = MODE_AM;
					txSetParameters(NULL, NULL, &setModulation, NULL);
					event_parameter_count++;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* CW */
    1f16:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f18:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	83 81       	ldd	r24, Z+3	; 0x03
    1f1e:	83 34       	cpi	r24, 0x43	; 67
    1f20:	99 f4       	brne	.+38     	; 0x1f48 <handleLinkBusMsgs+0x348>
				{
					Modulation setModulation = MODE_CW;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	8d af       	std	Y+61, r24	; 0x3d
					txSetParameters(NULL, NULL, &setModulation, NULL);
    1f26:	ce 01       	movw	r24, r28
    1f28:	cd 96       	adiw	r24, 0x3d	; 61
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	ac 01       	movw	r20, r24
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <txSetParameters>
					event_parameter_count++;
    1f3c:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
					Modulation setModulation = MODE_FM;
					txSetParameters(NULL, NULL, &setModulation, NULL);
					event_parameter_count++;
				}
			}
			break;
    1f46:	8d c6       	rjmp	.+3354   	; 0x2c62 <handleLinkBusMsgs+0x1062>
				{
					Modulation setModulation = MODE_CW;
					txSetParameters(NULL, NULL, &setModulation, NULL);
					event_parameter_count++;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* FM */
    1f48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	83 81       	ldd	r24, Z+3	; 0x03
    1f50:	86 34       	cpi	r24, 0x46	; 70
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <handleLinkBusMsgs+0x356>
    1f54:	86 c6       	rjmp	.+3340   	; 0x2c62 <handleLinkBusMsgs+0x1062>
				{
					Modulation setModulation = MODE_FM;
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	8e af       	std	Y+62, r24	; 0x3e
					txSetParameters(NULL, NULL, &setModulation, NULL);
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	ce 96       	adiw	r24, 0x3e	; 62
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	ac 01       	movw	r20, r24
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <txSetParameters>
					event_parameter_count++;
    1f70:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    1f74:	8f 5f       	subi	r24, 0xFF	; 255
    1f76:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
				}
			}
			break;
    1f7a:	73 c6       	rjmp	.+3302   	; 0x2c62 <handleLinkBusMsgs+0x1062>

			case MESSAGE_TX_POWER:
			{
				static uint16_t pwr_mW;

				if(lb_buff->fields[FIELD1][0])
    1f7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f80:	fc 01       	movw	r30, r24
    1f82:	83 81       	ldd	r24, Z+3	; 0x03
    1f84:	88 23       	and	r24, r24
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <handleLinkBusMsgs+0x38a>
    1f88:	6e c6       	rjmp	.+3292   	; 0x2c66 <handleLinkBusMsgs+0x1066>
				{
					EC ec;

					if((lb_buff->fields[FIELD1][0] == 'M') && (lb_buff->fields[FIELD2][0]))
    1f8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f8e:	fc 01       	movw	r30, r24
    1f90:	83 81       	ldd	r24, Z+3	; 0x03
    1f92:	8d 34       	cpi	r24, 0x4D	; 77
    1f94:	a9 f4       	brne	.+42     	; 0x1fc0 <handleLinkBusMsgs+0x3c0>
    1f96:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f98:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	80 8d       	ldd	r24, Z+24	; 0x18
    1f9e:	88 23       	and	r24, r24
    1fa0:	79 f0       	breq	.+30     	; 0x1fc0 <handleLinkBusMsgs+0x3c0>
					{
						pwr_mW = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    1fa2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fa6:	48 96       	adiw	r24, 0x18	; 24
    1fa8:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <atoi>
    1fac:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <pwr_mW.3423+0x1>
    1fb0:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <pwr_mW.3423>
						event_parameter_count++;
    1fb4:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
    1fbe:	09 c0       	rjmp	.+18     	; 0x1fd2 <handleLinkBusMsgs+0x3d2>
					}
					else
					{
						pwr_mW = (uint16_t)atoi(lb_buff->fields[FIELD1]);
    1fc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc4:	03 96       	adiw	r24, 0x03	; 3
    1fc6:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <atoi>
    1fca:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <pwr_mW.3423+0x1>
    1fce:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <pwr_mW.3423>
					}

					ec = txSetParameters(&pwr_mW, NULL, NULL, NULL);
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	82 e5       	ldi	r24, 0x52	; 82
    1fe0:	94 e0       	ldi	r25, 0x04	; 4
    1fe2:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <txSetParameters>
    1fe6:	8f 8b       	std	Y+23, r24	; 0x17
					if(ec)
    1fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fea:	88 23       	and	r24, r24
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <handleLinkBusMsgs+0x3f4>
					{
						g_last_error_code = ec;
    1fee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff0:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
					}

					sprintf(g_tempStr, "M,%u", pwr_mW);
    1ff4:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pwr_mW.3423>
    1ff8:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pwr_mW.3423+0x1>
    1ffc:	29 2f       	mov	r18, r25
    1ffe:	2f 93       	push	r18
    2000:	8f 93       	push	r24
    2002:	8a e7       	ldi	r24, 0x7A	; 122
    2004:	91 e0       	ldi	r25, 0x01	; 1
    2006:	89 2f       	mov	r24, r25
    2008:	8f 93       	push	r24
    200a:	8a e7       	ldi	r24, 0x7A	; 122
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	8f 93       	push	r24
    2010:	8a eb       	ldi	r24, 0xBA	; 186
    2012:	93 e0       	ldi	r25, 0x03	; 3
    2014:	89 2f       	mov	r24, r25
    2016:	8f 93       	push	r24
    2018:	8a eb       	ldi	r24, 0xBA	; 186
    201a:	93 e0       	ldi	r25, 0x03	; 3
    201c:	8f 93       	push	r24
    201e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
					lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TX_POWER_LABEL, g_tempStr);
    202e:	4a eb       	ldi	r20, 0xBA	; 186
    2030:	53 e0       	ldi	r21, 0x03	; 3
    2032:	6f e7       	ldi	r22, 0x7F	; 127
    2034:	71 e0       	ldi	r23, 0x01	; 1
    2036:	83 e0       	ldi	r24, 0x03	; 3
    2038:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
				}
			}
			break;
    203c:	14 c6       	rjmp	.+3112   	; 0x2c66 <handleLinkBusMsgs+0x1066>

			case MESSAGE_PERM:
			{
				storeTransmitterValues();
    203e:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <storeTransmitterValues>
				saveAllEEPROM();
    2042:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <saveAllEEPROM>
			}
			break;
    2046:	26 c6       	rjmp	.+3148   	; 0x2c94 <handleLinkBusMsgs+0x1094>

			case MESSAGE_GO:
			{
				char f1 = lb_buff->fields[FIELD1][0];
    2048:	8e 85       	ldd	r24, Y+14	; 0x0e
    204a:	9f 85       	ldd	r25, Y+15	; 0x0f
    204c:	fc 01       	movw	r30, r24
    204e:	83 81       	ldd	r24, Z+3	; 0x03
    2050:	88 8f       	std	Y+24, r24	; 0x18

				if((f1 == '1') || (f1 == '2'))
    2052:	88 8d       	ldd	r24, Y+24	; 0x18
    2054:	81 33       	cpi	r24, 0x31	; 49
    2056:	21 f0       	breq	.+8      	; 0x2060 <handleLinkBusMsgs+0x460>
    2058:	88 8d       	ldd	r24, Y+24	; 0x18
    205a:	82 33       	cpi	r24, 0x32	; 50
    205c:	09 f0       	breq	.+2      	; 0x2060 <handleLinkBusMsgs+0x460>
    205e:	9f c0       	rjmp	.+318    	; 0x219e <handleLinkBusMsgs+0x59e>
				{
					if(!txIsAntennaForBand() && !g_tx_power_is_zero)
    2060:	0e 94 fe 22 	call	0x45fc	; 0x45fc <txIsAntennaForBand>
    2064:	88 23       	and	r24, r24
    2066:	41 f4       	brne	.+16     	; 0x2078 <handleLinkBusMsgs+0x478>
    2068:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <g_tx_power_is_zero>
    206c:	88 23       	and	r24, r24
    206e:	21 f4       	brne	.+8      	; 0x2078 <handleLinkBusMsgs+0x478>
					{
						g_last_error_code = ERROR_CODE_NO_ANTENNA_FOR_BAND;
    2070:	87 ef       	ldi	r24, 0xF7	; 247
    2072:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
    2076:	92 c0       	rjmp	.+292    	; 0x219c <handleLinkBusMsgs+0x59c>
					}
					else
					{
						if(f1 == '1')   /* Xmit immediately using current settings */
    2078:	88 8d       	ldd	r24, Y+24	; 0x18
    207a:	81 33       	cpi	r24, 0x31	; 49
    207c:	09 f0       	breq	.+2      	; 0x2080 <handleLinkBusMsgs+0x480>
    207e:	5f c0       	rjmp	.+190    	; 0x213e <handleLinkBusMsgs+0x53e>
						{
							if(txIsAntennaForBand() || g_tx_power_is_zero)
    2080:	0e 94 fe 22 	call	0x45fc	; 0x45fc <txIsAntennaForBand>
    2084:	88 23       	and	r24, r24
    2086:	29 f4       	brne	.+10     	; 0x2092 <handleLinkBusMsgs+0x492>
    2088:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <g_tx_power_is_zero>
    208c:	88 23       	and	r24, r24
    208e:	09 f4       	brne	.+2      	; 0x2092 <handleLinkBusMsgs+0x492>
    2090:	52 c0       	rjmp	.+164    	; 0x2136 <handleLinkBusMsgs+0x536>
							{
								/* Set the Morse code pattern and speed */
								cli();
    2092:	f8 94       	cli
								BOOL repeat = TRUE;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	8f af       	std	Y+63, r24	; 0x3f
								makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    2098:	ce 01       	movw	r24, r28
    209a:	cf 96       	adiw	r24, 0x3f	; 63
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	50 e0       	ldi	r21, 0x00	; 0
    20a0:	bc 01       	movw	r22, r24
    20a2:	88 ed       	ldi	r24, 0xD8	; 216
    20a4:	93 e0       	ldi	r25, 0x03	; 3
    20a6:	0e 94 cf 1b 	call	0x379e	; 0x379e <makeMorse>
								g_code_throttle = throttleValue(g_pattern_codespeed);
    20aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_pattern_codespeed>
    20ae:	0e 94 8d 1a 	call	0x351a	; 0x351a <throttleValue>
    20b2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_code_throttle+0x1>
    20b6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_code_throttle>
								sei();
    20ba:	78 94       	sei
								g_event_start_time = 1;                     /* have it start a long time ago */
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a0 e0       	ldi	r26, 0x00	; 0
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <g_event_start_time>
    20c8:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <g_event_start_time+0x1>
    20cc:	a0 93 08 04 	sts	0x0408, r26	; 0x800408 <g_event_start_time+0x2>
    20d0:	b0 93 09 04 	sts	0x0409, r27	; 0x800409 <g_event_start_time+0x3>
								g_event_finish_time = MAX_TIME;             /* run for a long long time */
    20d4:	8f ef       	ldi	r24, 0xFF	; 255
    20d6:	9f ef       	ldi	r25, 0xFF	; 255
    20d8:	dc 01       	movw	r26, r24
    20da:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <g_event_finish_time>
    20de:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <g_event_finish_time+0x1>
    20e2:	a0 93 0c 04 	sts	0x040C, r26	; 0x80040c <g_event_finish_time+0x2>
    20e6:	b0 93 0d 04 	sts	0x040D, r27	; 0x80040d <g_event_finish_time+0x3>
								g_on_air_seconds = 9999;                    /* on period is very long */
    20ea:	8f e0       	ldi	r24, 0x0F	; 15
    20ec:	97 e2       	ldi	r25, 0x27	; 39
    20ee:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_on_air_seconds+0x1>
    20f2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_on_air_seconds>
								g_off_air_seconds = 0;                      /* off period is very short */
    20f6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <g_off_air_seconds+0x1>
    20fa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <g_off_air_seconds>
								g_on_the_air = 9999;                        /*  start out transmitting */
    20fe:	8f e0       	ldi	r24, 0x0F	; 15
    2100:	97 e2       	ldi	r25, 0x27	; 39
    2102:	a0 e0       	ldi	r26, 0x00	; 0
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
    210a:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
    210e:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
    2112:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>
								g_sendID_seconds_countdown = MAX_UINT16;    /* wait a long time to send the ID */
    2116:	8f ef       	ldi	r24, 0xFF	; 255
    2118:	9f ef       	ldi	r25, 0xFF	; 255
    211a:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <g_sendID_seconds_countdown+0x1>
    211e:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <g_sendID_seconds_countdown>
								g_event_commenced = TRUE;                   /* get things running immediately */
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <g_event_commenced>
								g_event_enabled = TRUE;                     /* get things running immediately */
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <g_event_enabled>
								g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    212e:	8d ef       	ldi	r24, 0xFD	; 253
    2130:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
					else
					{
						if(f1 == '1')   /* Xmit immediately using current settings */
						{
							if(txIsAntennaForBand() || g_tx_power_is_zero)
							{
    2134:	33 c0       	rjmp	.+102    	; 0x219c <handleLinkBusMsgs+0x59c>
								g_event_enabled = TRUE;                     /* get things running immediately */
								g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
							}
							else
							{
								g_last_error_code = ERROR_CODE_NO_ANTENNA_FOR_BAND;
    2136:	87 ef       	ldi	r24, 0xF7	; 247
    2138:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
			{
				char f1 = lb_buff->fields[FIELD1][0];

				if((f1 == '1') || (f1 == '2'))
				{
					if(!txIsAntennaForBand() && !g_tx_power_is_zero)
    213c:	3b c0       	rjmp	.+118    	; 0x21b4 <handleLinkBusMsgs+0x5b4>
							else
							{
								g_last_error_code = ERROR_CODE_NO_ANTENNA_FOR_BAND;
							}
						}
						else if(f1 == '2')  /* enables a downloaded event stored in EEPROM */
    213e:	88 8d       	ldd	r24, Y+24	; 0x18
    2140:	82 33       	cpi	r24, 0x32	; 50
						{
							/* This command configures the transmitter to launch an event at its scheduled start time */
							if(event_parameter_count < NUMBER_OF_ESSENTIAL_EVENT_PARAMETERS)
    2142:	c1 f5       	brne	.+112    	; 0x21b4 <handleLinkBusMsgs+0x5b4>
    2144:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    2148:	8e 30       	cpi	r24, 0x0E	; 14
							{
								g_last_error_code = ERROR_CODE_EVENT_NOT_CONFIGURED;
    214a:	20 f4       	brcc	.+8      	; 0x2154 <handleLinkBusMsgs+0x554>
    214c:	8d ec       	ldi	r24, 0xCD	; 205
    214e:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
							}
							else
							{
								SC status = STATUS_CODE_IDLE;
    2152:	30 c0       	rjmp	.+96     	; 0x21b4 <handleLinkBusMsgs+0x5b4>
    2154:	ce 01       	movw	r24, r28
    2156:	80 5c       	subi	r24, 0xC0	; 192
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	fc 01       	movw	r30, r24
								static EC ec;
								ec = launchEvent(&status);
    215c:	10 82       	st	Z, r1
    215e:	ce 01       	movw	r24, r28
    2160:	80 5c       	subi	r24, 0xC0	; 192
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	7f d6       	rcall	.+3326   	; 0x2e64 <launchEvent>
    2166:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <ec.3430>
								if(g_go_to_sleep && g_sleepType)
    216a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <g_go_to_sleep>
    216e:	88 23       	and	r24, r24
    2170:	49 f0       	breq	.+18     	; 0x2184 <handleLinkBusMsgs+0x584>
    2172:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <g_sleepType>
    2176:	88 23       	and	r24, r24
    2178:	29 f0       	breq	.+10     	; 0x2184 <handleLinkBusMsgs+0x584>
								{
									g_sleepType = SLEEP_AFTER_WIFI_GOES_OFF;
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <g_sleepType>
									g_go_to_sleep = FALSE;
    2180:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <g_go_to_sleep>
								}

								g_WiFi_shutdown_seconds = 60;
    2184:	8c e3       	ldi	r24, 0x3C	; 60
    2186:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_WiFi_shutdown_seconds>

								if(!ec)
    218a:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <ec.3430>
    218e:	88 23       	and	r24, r24
								{
									saveAllEEPROM();    /* Make sure all  event values get saved */
    2190:	89 f4       	brne	.+34     	; 0x21b4 <handleLinkBusMsgs+0x5b4>
    2192:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <saveAllEEPROM>
									storeTransmitterValues();
    2196:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <storeTransmitterValues>
			{
				char f1 = lb_buff->fields[FIELD1][0];

				if((f1 == '1') || (f1 == '2'))
				{
					if(!txIsAntennaForBand() && !g_tx_power_is_zero)
    219a:	0c c0       	rjmp	.+24     	; 0x21b4 <handleLinkBusMsgs+0x5b4>
								}
							}
						}
					}
				}
				else if(f1 == '0')  /* Stop continuous transmit (if enabled) and prepare to receive new event data */
    219c:	0b c0       	rjmp	.+22     	; 0x21b4 <handleLinkBusMsgs+0x5b4>
    219e:	88 8d       	ldd	r24, Y+24	; 0x18
    21a0:	80 33       	cpi	r24, 0x30	; 48
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <handleLinkBusMsgs+0x5a6>
				{
					suspendEvent();
    21a4:	62 c5       	rjmp	.+2756   	; 0x2c6a <handleLinkBusMsgs+0x106a>
    21a6:	4b d6       	rcall	.+3222   	; 0x2e3e <suspendEvent>
					/* Restore saved event settings */
					event_parameter_count = 0;
    21a8:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <event_parameter_count.3402>
					g_last_status_code = STATUS_CODE_RECEIVING_EVENT_DATA;
    21ac:	8c ee       	ldi	r24, 0xEC	; 236
    21ae:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
				}
			}
			break;
    21b2:	5b c5       	rjmp	.+2742   	; 0x2c6a <handleLinkBusMsgs+0x106a>
			{
				char f1 = lb_buff->fields[FIELD1][0];

				if((f1 == '1') || (f1 == '2'))
				{
					if(!txIsAntennaForBand() && !g_tx_power_is_zero)
    21b4:	00 00       	nop
					/* Restore saved event settings */
					event_parameter_count = 0;
					g_last_status_code = STATUS_CODE_RECEIVING_EVENT_DATA;
				}
			}
			break;
    21b6:	59 c5       	rjmp	.+2738   	; 0x2c6a <handleLinkBusMsgs+0x106a>

			case MESSAGE_STARTFINISH:
			{
				time_t mtime = 0;
    21b8:	1a 82       	std	Y+2, r1	; 0x02
    21ba:	1b 82       	std	Y+3, r1	; 0x03
    21bc:	1c 82       	std	Y+4, r1	; 0x04
    21be:	1d 82       	std	Y+5, r1	; 0x05

				if(lb_buff->fields[FIELD1][0] == 'S')
    21c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    21c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    21c4:	fc 01       	movw	r30, r24
    21c6:	83 81       	ldd	r24, Z+3	; 0x03
    21c8:	83 35       	cpi	r24, 0x53	; 83
    21ca:	c1 f5       	brne	.+112    	; 0x223c <handleLinkBusMsgs+0x63c>
				{
					if(lb_buff->fields[FIELD2][0])
    21cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    21ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    21d0:	fc 01       	movw	r30, r24
    21d2:	80 8d       	ldd	r24, Z+24	; 0x18
    21d4:	88 23       	and	r24, r24
    21d6:	59 f0       	breq	.+22     	; 0x21ee <handleLinkBusMsgs+0x5ee>
					{
						mtime = atol(lb_buff->fields[FIELD2]);
    21d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21da:	9f 85       	ldd	r25, Y+15	; 0x0f
    21dc:	48 96       	adiw	r24, 0x18	; 24
    21de:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <atol>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	8a 83       	std	Y+2, r24	; 0x02
    21e8:	9b 83       	std	Y+3, r25	; 0x03
    21ea:	ac 83       	std	Y+4, r26	; 0x04
    21ec:	bd 83       	std	Y+5, r27	; 0x05
					}

					if(mtime)
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	9b 81       	ldd	r25, Y+3	; 0x03
    21f2:	ac 81       	ldd	r26, Y+4	; 0x04
    21f4:	bd 81       	ldd	r27, Y+5	; 0x05
    21f6:	89 2b       	or	r24, r25
    21f8:	8a 2b       	or	r24, r26
    21fa:	8b 2b       	or	r24, r27
    21fc:	09 f4       	brne	.+2      	; 0x2200 <handleLinkBusMsgs+0x600>
    21fe:	37 c5       	rjmp	.+2670   	; 0x2c6e <handleLinkBusMsgs+0x106e>
					{
						g_event_start_time = mtime;
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	9b 81       	ldd	r25, Y+3	; 0x03
    2204:	ac 81       	ldd	r26, Y+4	; 0x04
    2206:	bd 81       	ldd	r27, Y+5	; 0x05
    2208:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <g_event_start_time>
    220c:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <g_event_start_time+0x1>
    2210:	a0 93 08 04 	sts	0x0408, r26	; 0x800408 <g_event_start_time+0x2>
    2214:	b0 93 09 04 	sts	0x0409, r27	; 0x800409 <g_event_start_time+0x3>
						cli();
    2218:	f8 94       	cli
						set_system_time(ds3231_get_epoch(NULL));    /* update system clock */
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 34 23 	call	0x4668	; 0x4668 <ds3231_get_epoch>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <set_system_time>
						sei();
    222e:	78 94       	sei
						event_parameter_count++;
    2230:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    2234:	8f 5f       	subi	r24, 0xFF	; 255
    2236:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
							event_parameter_count++;
						}
					}
				}
			}
			break;
    223a:	19 c5       	rjmp	.+2610   	; 0x2c6e <handleLinkBusMsgs+0x106e>
						event_parameter_count++;
					}
				}
				else
				{
					if(lb_buff->fields[FIELD1][0] == 'F')
    223c:	8e 85       	ldd	r24, Y+14	; 0x0e
    223e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2240:	fc 01       	movw	r30, r24
    2242:	83 81       	ldd	r24, Z+3	; 0x03
    2244:	86 34       	cpi	r24, 0x46	; 70
    2246:	09 f0       	breq	.+2      	; 0x224a <handleLinkBusMsgs+0x64a>
    2248:	12 c5       	rjmp	.+2596   	; 0x2c6e <handleLinkBusMsgs+0x106e>
					{
						if(lb_buff->fields[FIELD2][0])
    224a:	8e 85       	ldd	r24, Y+14	; 0x0e
    224c:	9f 85       	ldd	r25, Y+15	; 0x0f
    224e:	fc 01       	movw	r30, r24
    2250:	80 8d       	ldd	r24, Z+24	; 0x18
    2252:	88 23       	and	r24, r24
    2254:	59 f0       	breq	.+22     	; 0x226c <handleLinkBusMsgs+0x66c>
						{
							mtime = atol(lb_buff->fields[FIELD2]);
    2256:	8e 85       	ldd	r24, Y+14	; 0x0e
    2258:	9f 85       	ldd	r25, Y+15	; 0x0f
    225a:	48 96       	adiw	r24, 0x18	; 24
    225c:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <atol>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	8a 83       	std	Y+2, r24	; 0x02
    2266:	9b 83       	std	Y+3, r25	; 0x03
    2268:	ac 83       	std	Y+4, r26	; 0x04
    226a:	bd 83       	std	Y+5, r27	; 0x05
						}

						if(mtime)
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	9b 81       	ldd	r25, Y+3	; 0x03
    2270:	ac 81       	ldd	r26, Y+4	; 0x04
    2272:	bd 81       	ldd	r27, Y+5	; 0x05
    2274:	89 2b       	or	r24, r25
    2276:	8a 2b       	or	r24, r26
    2278:	8b 2b       	or	r24, r27
    227a:	09 f4       	brne	.+2      	; 0x227e <handleLinkBusMsgs+0x67e>
    227c:	f8 c4       	rjmp	.+2544   	; 0x2c6e <handleLinkBusMsgs+0x106e>
						{
							g_event_finish_time = mtime;
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	9b 81       	ldd	r25, Y+3	; 0x03
    2282:	ac 81       	ldd	r26, Y+4	; 0x04
    2284:	bd 81       	ldd	r27, Y+5	; 0x05
    2286:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <g_event_finish_time>
    228a:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <g_event_finish_time+0x1>
    228e:	a0 93 0c 04 	sts	0x040C, r26	; 0x80040c <g_event_finish_time+0x2>
    2292:	b0 93 0d 04 	sts	0x040D, r27	; 0x80040d <g_event_finish_time+0x3>
							event_parameter_count++;
    2296:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
						}
					}
				}
			}
			break;
    22a0:	e6 c4       	rjmp	.+2508   	; 0x2c6e <handleLinkBusMsgs+0x106e>

			case MESSAGE_CLOCK:
			{
				g_wifi_active = TRUE;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_wifi_active>

				if(lb_buff->type == LINKBUS_MSG_COMMAND)    /* ignore replies since, as the time source, we should never be sending queries anyway */
    22a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    22aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ac:	fc 01       	movw	r30, r24
    22ae:	80 81       	ld	r24, Z
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <handleLinkBusMsgs+0x6b6>
    22b4:	4e c0       	rjmp	.+156    	; 0x2352 <handleLinkBusMsgs+0x752>
				{
					if(lb_buff->fields[FIELD1][0])
    22b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ba:	fc 01       	movw	r30, r24
    22bc:	83 81       	ldd	r24, Z+3	; 0x03
    22be:	88 23       	and	r24, r24
    22c0:	d1 f0       	breq	.+52     	; 0x22f6 <handleLinkBusMsgs+0x6f6>
					{
						strncpy(g_tempStr, lb_buff->fields[FIELD1], 20);
    22c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    22c6:	03 96       	adiw	r24, 0x03	; 3
    22c8:	44 e1       	ldi	r20, 0x14	; 20
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	bc 01       	movw	r22, r24
    22ce:	8a eb       	ldi	r24, 0xBA	; 186
    22d0:	93 e0       	ldi	r25, 0x03	; 3
    22d2:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <strncpy>
						ds3231_set_date_time(g_tempStr, RTC_CLOCK);
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	8a eb       	ldi	r24, 0xBA	; 186
    22da:	93 e0       	ldi	r25, 0x03	; 3
    22dc:	0e 94 8a 24 	call	0x4914	; 0x4914 <ds3231_set_date_time>
						set_system_time(ds3231_get_epoch(NULL));    /* update system clock */
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 34 23 	call	0x4668	; 0x4668 <ds3231_get_epoch>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <set_system_time>
							}
						}
					}
				}
			}
			break;
    22f4:	be c4       	rjmp	.+2428   	; 0x2c72 <handleLinkBusMsgs+0x1072>
						ds3231_set_date_time(g_tempStr, RTC_CLOCK);
						set_system_time(ds3231_get_epoch(NULL));    /* update system clock */
					}
					else
					{
						sprintf(g_tempStr, "%lu", time(NULL));
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <time>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	2b 2f       	mov	r18, r27
    2304:	2f 93       	push	r18
    2306:	2a 2f       	mov	r18, r26
    2308:	2f 93       	push	r18
    230a:	29 2f       	mov	r18, r25
    230c:	2f 93       	push	r18
    230e:	8f 93       	push	r24
    2310:	83 e6       	ldi	r24, 0x63	; 99
    2312:	91 e0       	ldi	r25, 0x01	; 1
    2314:	89 2f       	mov	r24, r25
    2316:	8f 93       	push	r24
    2318:	83 e6       	ldi	r24, 0x63	; 99
    231a:	91 e0       	ldi	r25, 0x01	; 1
    231c:	8f 93       	push	r24
    231e:	8a eb       	ldi	r24, 0xBA	; 186
    2320:	93 e0       	ldi	r25, 0x03	; 3
    2322:	89 2f       	mov	r24, r25
    2324:	8f 93       	push	r24
    2326:	8a eb       	ldi	r24, 0xBA	; 186
    2328:	93 e0       	ldi	r25, 0x03	; 3
    232a:	8f 93       	push	r24
    232c:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
    2330:	4d b7       	in	r20, 0x3d	; 61
    2332:	5e b7       	in	r21, 0x3e	; 62
    2334:	48 5f       	subi	r20, 0xF8	; 248
    2336:	5f 4f       	sbci	r21, 0xFF	; 255
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_CLOCK_LABEL, g_tempStr);
    2342:	4a eb       	ldi	r20, 0xBA	; 186
    2344:	53 e0       	ldi	r21, 0x03	; 3
    2346:	67 e6       	ldi	r22, 0x67	; 103
    2348:	71 e0       	ldi	r23, 0x01	; 1
    234a:	83 e0       	ldi	r24, 0x03	; 3
    234c:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
							}
						}
					}
				}
			}
			break;
    2350:	90 c4       	rjmp	.+2336   	; 0x2c72 <handleLinkBusMsgs+0x1072>
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_CLOCK_LABEL, g_tempStr);
					}
				}
				else
				{
					if(lb_buff->type == LINKBUS_MSG_QUERY)
    2352:	8e 85       	ldd	r24, Y+14	; 0x0e
    2354:	9f 85       	ldd	r25, Y+15	; 0x0f
    2356:	fc 01       	movw	r30, r24
    2358:	80 81       	ld	r24, Z
    235a:	82 30       	cpi	r24, 0x02	; 2
    235c:	09 f0       	breq	.+2      	; 0x2360 <handleLinkBusMsgs+0x760>
    235e:	89 c4       	rjmp	.+2322   	; 0x2c72 <handleLinkBusMsgs+0x1072>
					{
						if(lb_buff->fields[FIELD1][0] == 'X')
    2360:	8e 85       	ldd	r24, Y+14	; 0x0e
    2362:	9f 85       	ldd	r25, Y+15	; 0x0f
    2364:	fc 01       	movw	r30, r24
    2366:	83 81       	ldd	r24, Z+3	; 0x03
    2368:	88 35       	cpi	r24, 0x58	; 88
    236a:	09 f0       	breq	.+2      	; 0x236e <handleLinkBusMsgs+0x76e>
    236c:	4d c0       	rjmp	.+154    	; 0x2408 <handleLinkBusMsgs+0x808>
						{
							int8_t age = 0;
    236e:	ce 01       	movw	r24, r28
    2370:	8f 5b       	subi	r24, 0xBF	; 191
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
    2374:	fc 01       	movw	r30, r24
    2376:	10 82       	st	Z, r1

							if(lb_buff->fields[FIELD2][0])
    2378:	8e 85       	ldd	r24, Y+14	; 0x0e
    237a:	9f 85       	ldd	r25, Y+15	; 0x0f
    237c:	fc 01       	movw	r30, r24
    237e:	80 8d       	ldd	r24, Z+24	; 0x18
    2380:	88 23       	and	r24, r24
    2382:	89 f0       	breq	.+34     	; 0x23a6 <handleLinkBusMsgs+0x7a6>
							{
								age = (int8_t)atoi(lb_buff->fields[FIELD2]);
    2384:	8e 85       	ldd	r24, Y+14	; 0x0e
    2386:	9f 85       	ldd	r25, Y+15	; 0x0f
    2388:	48 96       	adiw	r24, 0x18	; 24
    238a:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <atoi>
    238e:	28 2f       	mov	r18, r24
    2390:	ce 01       	movw	r24, r28
    2392:	8f 5b       	subi	r24, 0xBF	; 191
    2394:	9f 4f       	sbci	r25, 0xFF	; 255
    2396:	fc 01       	movw	r30, r24
    2398:	20 83       	st	Z, r18
								ds3231_set_aging(&age);
    239a:	ce 01       	movw	r24, r28
    239c:	8f 5b       	subi	r24, 0xBF	; 191
    239e:	9f 4f       	sbci	r25, 0xFF	; 255
    23a0:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <ds3231_set_aging>
							}
						}
					}
				}
			}
			break;
    23a4:	66 c4       	rjmp	.+2252   	; 0x2c72 <handleLinkBusMsgs+0x1072>
								age = (int8_t)atoi(lb_buff->fields[FIELD2]);
								ds3231_set_aging(&age);
							}
							else
							{
								age = ds3231_get_aging();
    23a6:	0e 94 ff 24 	call	0x49fe	; 0x49fe <ds3231_get_aging>
    23aa:	28 2f       	mov	r18, r24
    23ac:	ce 01       	movw	r24, r28
    23ae:	8f 5b       	subi	r24, 0xBF	; 191
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	fc 01       	movw	r30, r24
    23b4:	20 83       	st	Z, r18
								sprintf(g_tempStr, "X,%d", age);
    23b6:	ce 01       	movw	r24, r28
    23b8:	8f 5b       	subi	r24, 0xBF	; 191
    23ba:	9f 4f       	sbci	r25, 0xFF	; 255
    23bc:	fc 01       	movw	r30, r24
    23be:	80 81       	ld	r24, Z
    23c0:	08 2e       	mov	r0, r24
    23c2:	00 0c       	add	r0, r0
    23c4:	99 0b       	sbc	r25, r25
    23c6:	29 2f       	mov	r18, r25
    23c8:	2f 93       	push	r18
    23ca:	8f 93       	push	r24
    23cc:	83 e8       	ldi	r24, 0x83	; 131
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	89 2f       	mov	r24, r25
    23d2:	8f 93       	push	r24
    23d4:	83 e8       	ldi	r24, 0x83	; 131
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	8f 93       	push	r24
    23da:	8a eb       	ldi	r24, 0xBA	; 186
    23dc:	93 e0       	ldi	r25, 0x03	; 3
    23de:	89 2f       	mov	r24, r25
    23e0:	8f 93       	push	r24
    23e2:	8a eb       	ldi	r24, 0xBA	; 186
    23e4:	93 e0       	ldi	r25, 0x03	; 3
    23e6:	8f 93       	push	r24
    23e8:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
								lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_CLOCK_LABEL, g_tempStr);
    23f8:	4a eb       	ldi	r20, 0xBA	; 186
    23fa:	53 e0       	ldi	r21, 0x03	; 3
    23fc:	67 e6       	ldi	r22, 0x67	; 103
    23fe:	71 e0       	ldi	r23, 0x01	; 1
    2400:	83 e0       	ldi	r24, 0x03	; 3
    2402:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
							}
						}
					}
				}
			}
			break;
    2406:	35 c4       	rjmp	.+2154   	; 0x2c72 <handleLinkBusMsgs+0x1072>
						}
						else
						{
							static uint32_t lastTime = 0;

							uint32_t temp_time = ds3231_get_epoch(NULL);
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 34 23 	call	0x4668	; 0x4668 <ds3231_get_epoch>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	89 8f       	std	Y+25, r24	; 0x19
    2416:	9a 8f       	std	Y+26, r25	; 0x1a
    2418:	ab 8f       	std	Y+27, r26	; 0x1b
    241a:	bc 8f       	std	Y+28, r27	; 0x1c
							set_system_time(temp_time);
    241c:	89 8d       	ldd	r24, Y+25	; 0x19
    241e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2420:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2422:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <set_system_time>

							if(temp_time != lastTime)
    242c:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <lastTime.3435>
    2430:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <lastTime.3435+0x1>
    2434:	a0 91 57 04 	lds	r26, 0x0457	; 0x800457 <lastTime.3435+0x2>
    2438:	b0 91 58 04 	lds	r27, 0x0458	; 0x800458 <lastTime.3435+0x3>
    243c:	29 8d       	ldd	r18, Y+25	; 0x19
    243e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2440:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2442:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2444:	28 17       	cp	r18, r24
    2446:	39 07       	cpc	r19, r25
    2448:	4a 07       	cpc	r20, r26
    244a:	5b 07       	cpc	r21, r27
    244c:	09 f4       	brne	.+2      	; 0x2450 <handleLinkBusMsgs+0x850>
    244e:	11 c4       	rjmp	.+2082   	; 0x2c72 <handleLinkBusMsgs+0x1072>
							{
								sprintf(g_tempStr, "%lu", temp_time);
    2450:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2452:	8f 93       	push	r24
    2454:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2456:	8f 93       	push	r24
    2458:	8a 8d       	ldd	r24, Y+26	; 0x1a
    245a:	8f 93       	push	r24
    245c:	89 8d       	ldd	r24, Y+25	; 0x19
    245e:	8f 93       	push	r24
    2460:	83 e6       	ldi	r24, 0x63	; 99
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	89 2f       	mov	r24, r25
    2466:	8f 93       	push	r24
    2468:	83 e6       	ldi	r24, 0x63	; 99
    246a:	91 e0       	ldi	r25, 0x01	; 1
    246c:	8f 93       	push	r24
    246e:	8a eb       	ldi	r24, 0xBA	; 186
    2470:	93 e0       	ldi	r25, 0x03	; 3
    2472:	89 2f       	mov	r24, r25
    2474:	8f 93       	push	r24
    2476:	8a eb       	ldi	r24, 0xBA	; 186
    2478:	93 e0       	ldi	r25, 0x03	; 3
    247a:	8f 93       	push	r24
    247c:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
    2480:	4d b7       	in	r20, 0x3d	; 61
    2482:	5e b7       	in	r21, 0x3e	; 62
    2484:	48 5f       	subi	r20, 0xF8	; 248
    2486:	5f 4f       	sbci	r21, 0xFF	; 255
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
								lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_CLOCK_LABEL, g_tempStr);
    2492:	4a eb       	ldi	r20, 0xBA	; 186
    2494:	53 e0       	ldi	r21, 0x03	; 3
    2496:	67 e6       	ldi	r22, 0x67	; 103
    2498:	71 e0       	ldi	r23, 0x01	; 1
    249a:	83 e0       	ldi	r24, 0x03	; 3
    249c:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
								lastTime = temp_time;
    24a0:	89 8d       	ldd	r24, Y+25	; 0x19
    24a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24a4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    24a6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    24a8:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <lastTime.3435>
    24ac:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <lastTime.3435+0x1>
    24b0:	a0 93 57 04 	sts	0x0457, r26	; 0x800457 <lastTime.3435+0x2>
    24b4:	b0 93 58 04 	sts	0x0458, r27	; 0x800458 <lastTime.3435+0x3>
							}
						}
					}
				}
			}
			break;
    24b8:	dc c3       	rjmp	.+1976   	; 0x2c72 <handleLinkBusMsgs+0x1072>

			case MESSAGE_SET_STATION_ID:
			{
				event_parameter_count++;    /* Any ID or no ID is acceptable */
    24ba:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    24be:	8f 5f       	subi	r24, 0xFF	; 255
    24c0:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>

				if(lb_buff->fields[FIELD1][0])
    24c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24c8:	fc 01       	movw	r30, r24
    24ca:	83 81       	ldd	r24, Z+3	; 0x03
    24cc:	88 23       	and	r24, r24
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <handleLinkBusMsgs+0x8d2>
    24d0:	d2 c3       	rjmp	.+1956   	; 0x2c76 <handleLinkBusMsgs+0x1076>
				{
					strncpy(g_messages_text[STATION_ID], lb_buff->fields[FIELD1], MAX_PATTERN_TEXT_LENGTH);
    24d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    24d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    24d6:	03 96       	adiw	r24, 0x03	; 3
    24d8:	44 e1       	ldi	r20, 0x14	; 20
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	bc 01       	movw	r22, r24
    24de:	8d ee       	ldi	r24, 0xED	; 237
    24e0:	93 e0       	ldi	r25, 0x03	; 3
    24e2:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <strncpy>

					if(g_messages_text[STATION_ID][0])
    24e6:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <g_messages_text+0x15>
    24ea:	88 23       	and	r24, r24
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <handleLinkBusMsgs+0x8f0>
    24ee:	c3 c3       	rjmp	.+1926   	; 0x2c76 <handleLinkBusMsgs+0x1076>
					{
						g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    24f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_id_codespeed>
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	bc 01       	movw	r22, r24
    24fa:	8d ee       	ldi	r24, 0xED	; 237
    24fc:	93 e0       	ldi	r25, 0x03	; 3
    24fe:	0e 94 cb 1c 	call	0x3996	; 0x3996 <timeRequiredToSendStrAtWPM>
    2502:	8c 50       	subi	r24, 0x0C	; 12
    2504:	9e 4f       	sbci	r25, 0xFE	; 254
    2506:	96 95       	lsr	r25
    2508:	87 95       	ror	r24
    250a:	96 95       	lsr	r25
    250c:	87 95       	ror	r24
    250e:	96 95       	lsr	r25
    2510:	87 95       	ror	r24
    2512:	9c 01       	movw	r18, r24
    2514:	a5 ec       	ldi	r26, 0xC5	; 197
    2516:	b0 e2       	ldi	r27, 0x20	; 32
    2518:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <__umulhisi3>
    251c:	92 95       	swap	r25
    251e:	82 95       	swap	r24
    2520:	8f 70       	andi	r24, 0x0F	; 15
    2522:	89 27       	eor	r24, r25
    2524:	9f 70       	andi	r25, 0x0F	; 15
    2526:	89 27       	eor	r24, r25
    2528:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <g_time_needed_for_ID+0x1>
    252c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <g_time_needed_for_ID>
					}
				}
			}
			break;
    2530:	a2 c3       	rjmp	.+1860   	; 0x2c76 <handleLinkBusMsgs+0x1076>

			case MESSAGE_CODE_SPEED:
			{
				uint8_t speed = g_pattern_codespeed;
    2532:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_pattern_codespeed>
    2536:	8d 8f       	std	Y+29, r24	; 0x1d

				if(lb_buff->fields[FIELD1][0] == 'I')
    2538:	8e 85       	ldd	r24, Y+14	; 0x0e
    253a:	9f 85       	ldd	r25, Y+15	; 0x0f
    253c:	fc 01       	movw	r30, r24
    253e:	83 81       	ldd	r24, Z+3	; 0x03
    2540:	89 34       	cpi	r24, 0x49	; 73
    2542:	09 f0       	breq	.+2      	; 0x2546 <handleLinkBusMsgs+0x946>
    2544:	5a c0       	rjmp	.+180    	; 0x25fa <handleLinkBusMsgs+0x9fa>
				{
					if(lb_buff->fields[FIELD2][0])
    2546:	8e 85       	ldd	r24, Y+14	; 0x0e
    2548:	9f 85       	ldd	r25, Y+15	; 0x0f
    254a:	fc 01       	movw	r30, r24
    254c:	80 8d       	ldd	r24, Z+24	; 0x18
    254e:	88 23       	and	r24, r24
    2550:	09 f4       	brne	.+2      	; 0x2554 <handleLinkBusMsgs+0x954>
    2552:	93 c3       	rjmp	.+1830   	; 0x2c7a <handleLinkBusMsgs+0x107a>
					{
						speed = atol(lb_buff->fields[FIELD2]);
    2554:	8e 85       	ldd	r24, Y+14	; 0x0e
    2556:	9f 85       	ldd	r25, Y+15	; 0x0f
    2558:	48 96       	adiw	r24, 0x18	; 24
    255a:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <atol>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	8d 8f       	std	Y+29, r24	; 0x1d
						g_id_codespeed = CLAMP(5, speed, 20);
    2564:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2566:	8e 8f       	std	Y+30, r24	; 0x1e
    2568:	85 e0       	ldi	r24, 0x05	; 5
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	98 a3       	std	Y+32, r25	; 0x20
    256e:	8f 8f       	std	Y+31, r24	; 0x1f
    2570:	84 e1       	ldi	r24, 0x14	; 20
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9a a3       	std	Y+34, r25	; 0x22
    2576:	89 a3       	std	Y+33, r24	; 0x21
    2578:	8e 8d       	ldd	r24, Y+30	; 0x1e
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	89 a1       	ldd	r24, Y+33	; 0x21
    2580:	9a a1       	ldd	r25, Y+34	; 0x22
    2582:	82 17       	cp	r24, r18
    2584:	93 07       	cpc	r25, r19
    2586:	54 f0       	brlt	.+20     	; 0x259c <handleLinkBusMsgs+0x99c>
    2588:	8e 8d       	ldd	r24, Y+30	; 0x1e
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2590:	38 a1       	ldd	r19, Y+32	; 0x20
    2592:	82 17       	cp	r24, r18
    2594:	93 07       	cpc	r25, r19
    2596:	24 f4       	brge	.+8      	; 0x25a0 <handleLinkBusMsgs+0x9a0>
    2598:	c9 01       	movw	r24, r18
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <handleLinkBusMsgs+0x9a0>
    259c:	89 a1       	ldd	r24, Y+33	; 0x21
    259e:	9a a1       	ldd	r25, Y+34	; 0x22
    25a0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_id_codespeed>
						event_parameter_count++;
    25a4:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>

						if(g_messages_text[STATION_ID][0])
    25ae:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <g_messages_text+0x15>
    25b2:	88 23       	and	r24, r24
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <handleLinkBusMsgs+0x9b8>
    25b6:	61 c3       	rjmp	.+1730   	; 0x2c7a <handleLinkBusMsgs+0x107a>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    25b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_id_codespeed>
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	bc 01       	movw	r22, r24
    25c2:	8d ee       	ldi	r24, 0xED	; 237
    25c4:	93 e0       	ldi	r25, 0x03	; 3
    25c6:	0e 94 cb 1c 	call	0x3996	; 0x3996 <timeRequiredToSendStrAtWPM>
    25ca:	8c 50       	subi	r24, 0x0C	; 12
    25cc:	9e 4f       	sbci	r25, 0xFE	; 254
    25ce:	96 95       	lsr	r25
    25d0:	87 95       	ror	r24
    25d2:	96 95       	lsr	r25
    25d4:	87 95       	ror	r24
    25d6:	96 95       	lsr	r25
    25d8:	87 95       	ror	r24
    25da:	9c 01       	movw	r18, r24
    25dc:	a5 ec       	ldi	r26, 0xC5	; 197
    25de:	b0 e2       	ldi	r27, 0x20	; 32
    25e0:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <__umulhisi3>
    25e4:	92 95       	swap	r25
    25e6:	82 95       	swap	r24
    25e8:	8f 70       	andi	r24, 0x0F	; 15
    25ea:	89 27       	eor	r24, r25
    25ec:	9f 70       	andi	r25, 0x0F	; 15
    25ee:	89 27       	eor	r24, r25
    25f0:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <g_time_needed_for_ID+0x1>
    25f4:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <g_time_needed_for_ID>
						event_parameter_count++;
						g_code_throttle = throttleValue(g_pattern_codespeed);
					}
				}
			}
			break;
    25f8:	40 c3       	rjmp	.+1664   	; 0x2c7a <handleLinkBusMsgs+0x107a>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
						}
					}
				}
				else if(lb_buff->fields[FIELD1][0] == 'P')
    25fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    25fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    25fe:	fc 01       	movw	r30, r24
    2600:	83 81       	ldd	r24, Z+3	; 0x03
    2602:	80 35       	cpi	r24, 0x50	; 80
    2604:	09 f0       	breq	.+2      	; 0x2608 <handleLinkBusMsgs+0xa08>
    2606:	39 c3       	rjmp	.+1650   	; 0x2c7a <handleLinkBusMsgs+0x107a>
				{
					if(lb_buff->fields[FIELD2][0])
    2608:	8e 85       	ldd	r24, Y+14	; 0x0e
    260a:	9f 85       	ldd	r25, Y+15	; 0x0f
    260c:	fc 01       	movw	r30, r24
    260e:	80 8d       	ldd	r24, Z+24	; 0x18
    2610:	88 23       	and	r24, r24
    2612:	09 f4       	brne	.+2      	; 0x2616 <handleLinkBusMsgs+0xa16>
    2614:	32 c3       	rjmp	.+1636   	; 0x2c7a <handleLinkBusMsgs+0x107a>
					{
						speed = atol(lb_buff->fields[FIELD2]);
    2616:	8e 85       	ldd	r24, Y+14	; 0x0e
    2618:	9f 85       	ldd	r25, Y+15	; 0x0f
    261a:	48 96       	adiw	r24, 0x18	; 24
    261c:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <atol>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	8d 8f       	std	Y+29, r24	; 0x1d
						g_pattern_codespeed = CLAMP(5, speed, 20);
    2626:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2628:	8b a3       	std	Y+35, r24	; 0x23
    262a:	85 e0       	ldi	r24, 0x05	; 5
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9d a3       	std	Y+37, r25	; 0x25
    2630:	8c a3       	std	Y+36, r24	; 0x24
    2632:	84 e1       	ldi	r24, 0x14	; 20
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9f a3       	std	Y+39, r25	; 0x27
    2638:	8e a3       	std	Y+38, r24	; 0x26
    263a:	8b a1       	ldd	r24, Y+35	; 0x23
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	8e a1       	ldd	r24, Y+38	; 0x26
    2642:	9f a1       	ldd	r25, Y+39	; 0x27
    2644:	82 17       	cp	r24, r18
    2646:	93 07       	cpc	r25, r19
    2648:	54 f0       	brlt	.+20     	; 0x265e <handleLinkBusMsgs+0xa5e>
    264a:	8b a1       	ldd	r24, Y+35	; 0x23
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	2c a1       	ldd	r18, Y+36	; 0x24
    2652:	3d a1       	ldd	r19, Y+37	; 0x25
    2654:	82 17       	cp	r24, r18
    2656:	93 07       	cpc	r25, r19
    2658:	24 f4       	brge	.+8      	; 0x2662 <handleLinkBusMsgs+0xa62>
    265a:	c9 01       	movw	r24, r18
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <handleLinkBusMsgs+0xa62>
    265e:	8e a1       	ldd	r24, Y+38	; 0x26
    2660:	9f a1       	ldd	r25, Y+39	; 0x27
    2662:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_pattern_codespeed>
						event_parameter_count++;
    2666:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    266a:	8f 5f       	subi	r24, 0xFF	; 255
    266c:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
						g_code_throttle = throttleValue(g_pattern_codespeed);
    2670:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_pattern_codespeed>
    2674:	52 d7       	rcall	.+3748   	; 0x351a <throttleValue>
    2676:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_code_throttle+0x1>
    267a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_code_throttle>
					}
				}
			}
			break;
    267e:	fd c2       	rjmp	.+1530   	; 0x2c7a <handleLinkBusMsgs+0x107a>

			case MESSAGE_TIME_INTERVAL:
			{
				uint16_t time = 0;
    2680:	19 a6       	std	Y+41, r1	; 0x29
    2682:	18 a6       	std	Y+40, r1	; 0x28

				if(lb_buff->fields[FIELD1][0] == '0')
    2684:	8e 85       	ldd	r24, Y+14	; 0x0e
    2686:	9f 85       	ldd	r25, Y+15	; 0x0f
    2688:	fc 01       	movw	r30, r24
    268a:	83 81       	ldd	r24, Z+3	; 0x03
    268c:	80 33       	cpi	r24, 0x30	; 48
    268e:	e1 f4       	brne	.+56     	; 0x26c8 <handleLinkBusMsgs+0xac8>
				{
					if(lb_buff->fields[FIELD2][0])
    2690:	8e 85       	ldd	r24, Y+14	; 0x0e
    2692:	9f 85       	ldd	r25, Y+15	; 0x0f
    2694:	fc 01       	movw	r30, r24
    2696:	80 8d       	ldd	r24, Z+24	; 0x18
    2698:	88 23       	and	r24, r24
    269a:	09 f4       	brne	.+2      	; 0x269e <handleLinkBusMsgs+0xa9e>
    269c:	f0 c2       	rjmp	.+1504   	; 0x2c7e <handleLinkBusMsgs+0x107e>
					{
						time = atol(lb_buff->fields[FIELD2]);
    269e:	8e 85       	ldd	r24, Y+14	; 0x0e
    26a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    26a2:	48 96       	adiw	r24, 0x18	; 24
    26a4:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <atol>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	99 a7       	std	Y+41, r25	; 0x29
    26ae:	88 a7       	std	Y+40, r24	; 0x28
						g_off_air_seconds = time;
    26b0:	88 a5       	ldd	r24, Y+40	; 0x28
    26b2:	99 a5       	ldd	r25, Y+41	; 0x29
    26b4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <g_off_air_seconds+0x1>
    26b8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_off_air_seconds>
						event_parameter_count++;
    26bc:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    26c0:	8f 5f       	subi	r24, 0xFF	; 255
    26c2:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
						g_intra_cycle_delay_time = time;
						event_parameter_count++;
					}
				}
			}
			break;
    26c6:	db c2       	rjmp	.+1462   	; 0x2c7e <handleLinkBusMsgs+0x107e>
						time = atol(lb_buff->fields[FIELD2]);
						g_off_air_seconds = time;
						event_parameter_count++;
					}
				}
				else if(lb_buff->fields[FIELD1][0] == '1')
    26c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    26ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    26cc:	fc 01       	movw	r30, r24
    26ce:	83 81       	ldd	r24, Z+3	; 0x03
    26d0:	81 33       	cpi	r24, 0x31	; 49
    26d2:	e1 f4       	brne	.+56     	; 0x270c <handleLinkBusMsgs+0xb0c>
				{
					if(lb_buff->fields[FIELD2][0])
    26d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    26d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    26d8:	fc 01       	movw	r30, r24
    26da:	80 8d       	ldd	r24, Z+24	; 0x18
    26dc:	88 23       	and	r24, r24
    26de:	09 f4       	brne	.+2      	; 0x26e2 <handleLinkBusMsgs+0xae2>
    26e0:	ce c2       	rjmp	.+1436   	; 0x2c7e <handleLinkBusMsgs+0x107e>
					{
						time = atol(lb_buff->fields[FIELD2]);
    26e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    26e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    26e6:	48 96       	adiw	r24, 0x18	; 24
    26e8:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <atol>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	99 a7       	std	Y+41, r25	; 0x29
    26f2:	88 a7       	std	Y+40, r24	; 0x28
						g_on_air_seconds = time;
    26f4:	88 a5       	ldd	r24, Y+40	; 0x28
    26f6:	99 a5       	ldd	r25, Y+41	; 0x29
    26f8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_on_air_seconds+0x1>
    26fc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_on_air_seconds>
						event_parameter_count++;
    2700:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    2704:	8f 5f       	subi	r24, 0xFF	; 255
    2706:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
						g_intra_cycle_delay_time = time;
						event_parameter_count++;
					}
				}
			}
			break;
    270a:	b9 c2       	rjmp	.+1394   	; 0x2c7e <handleLinkBusMsgs+0x107e>
						time = atol(lb_buff->fields[FIELD2]);
						g_on_air_seconds = time;
						event_parameter_count++;
					}
				}
				else if(lb_buff->fields[FIELD1][0] == 'I')
    270c:	8e 85       	ldd	r24, Y+14	; 0x0e
    270e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2710:	fc 01       	movw	r30, r24
    2712:	83 81       	ldd	r24, Z+3	; 0x03
    2714:	89 34       	cpi	r24, 0x49	; 73
    2716:	e1 f4       	brne	.+56     	; 0x2750 <handleLinkBusMsgs+0xb50>
				{
					if(lb_buff->fields[FIELD2][0])
    2718:	8e 85       	ldd	r24, Y+14	; 0x0e
    271a:	9f 85       	ldd	r25, Y+15	; 0x0f
    271c:	fc 01       	movw	r30, r24
    271e:	80 8d       	ldd	r24, Z+24	; 0x18
    2720:	88 23       	and	r24, r24
    2722:	09 f4       	brne	.+2      	; 0x2726 <handleLinkBusMsgs+0xb26>
    2724:	ac c2       	rjmp	.+1368   	; 0x2c7e <handleLinkBusMsgs+0x107e>
					{
						time = atol(lb_buff->fields[FIELD2]);
    2726:	8e 85       	ldd	r24, Y+14	; 0x0e
    2728:	9f 85       	ldd	r25, Y+15	; 0x0f
    272a:	48 96       	adiw	r24, 0x18	; 24
    272c:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <atol>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	99 a7       	std	Y+41, r25	; 0x29
    2736:	88 a7       	std	Y+40, r24	; 0x28
						g_ID_period_seconds = time;
    2738:	88 a5       	ldd	r24, Y+40	; 0x28
    273a:	99 a5       	ldd	r25, Y+41	; 0x29
    273c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <g_ID_period_seconds+0x1>
    2740:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <g_ID_period_seconds>
						event_parameter_count++;
    2744:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
						g_intra_cycle_delay_time = time;
						event_parameter_count++;
					}
				}
			}
			break;
    274e:	97 c2       	rjmp	.+1326   	; 0x2c7e <handleLinkBusMsgs+0x107e>
						time = atol(lb_buff->fields[FIELD2]);
						g_ID_period_seconds = time;
						event_parameter_count++;
					}
				}
				else if(lb_buff->fields[FIELD1][0] == 'D')
    2750:	8e 85       	ldd	r24, Y+14	; 0x0e
    2752:	9f 85       	ldd	r25, Y+15	; 0x0f
    2754:	fc 01       	movw	r30, r24
    2756:	83 81       	ldd	r24, Z+3	; 0x03
    2758:	84 34       	cpi	r24, 0x44	; 68
    275a:	09 f0       	breq	.+2      	; 0x275e <handleLinkBusMsgs+0xb5e>
    275c:	90 c2       	rjmp	.+1312   	; 0x2c7e <handleLinkBusMsgs+0x107e>
				{
					if(lb_buff->fields[FIELD2][0])
    275e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2760:	9f 85       	ldd	r25, Y+15	; 0x0f
    2762:	fc 01       	movw	r30, r24
    2764:	80 8d       	ldd	r24, Z+24	; 0x18
    2766:	88 23       	and	r24, r24
    2768:	09 f4       	brne	.+2      	; 0x276c <handleLinkBusMsgs+0xb6c>
    276a:	89 c2       	rjmp	.+1298   	; 0x2c7e <handleLinkBusMsgs+0x107e>
					{
						time = atol(lb_buff->fields[FIELD2]);
    276c:	8e 85       	ldd	r24, Y+14	; 0x0e
    276e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2770:	48 96       	adiw	r24, 0x18	; 24
    2772:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <atol>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	99 a7       	std	Y+41, r25	; 0x29
    277c:	88 a7       	std	Y+40, r24	; 0x28
						g_intra_cycle_delay_time = time;
    277e:	88 a5       	ldd	r24, Y+40	; 0x28
    2780:	99 a5       	ldd	r25, Y+41	; 0x29
    2782:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <g_intra_cycle_delay_time+0x1>
    2786:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <g_intra_cycle_delay_time>
						event_parameter_count++;
    278a:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    278e:	8f 5f       	subi	r24, 0xFF	; 255
    2790:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
					}
				}
			}
			break;
    2794:	74 c2       	rjmp	.+1256   	; 0x2c7e <handleLinkBusMsgs+0x107e>

			case MESSAGE_SET_PATTERN:
			{
				if(lb_buff->fields[FIELD1][0])
    2796:	8e 85       	ldd	r24, Y+14	; 0x0e
    2798:	9f 85       	ldd	r25, Y+15	; 0x0f
    279a:	fc 01       	movw	r30, r24
    279c:	83 81       	ldd	r24, Z+3	; 0x03
    279e:	88 23       	and	r24, r24
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <handleLinkBusMsgs+0xba4>
    27a2:	6f c2       	rjmp	.+1246   	; 0x2c82 <handleLinkBusMsgs+0x1082>
				{
					strncpy(g_messages_text[PATTERN_TEXT], lb_buff->fields[FIELD1], MAX_PATTERN_TEXT_LENGTH);
    27a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    27a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    27a8:	03 96       	adiw	r24, 0x03	; 3
    27aa:	44 e1       	ldi	r20, 0x14	; 20
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	bc 01       	movw	r22, r24
    27b0:	88 ed       	ldi	r24, 0xD8	; 216
    27b2:	93 e0       	ldi	r25, 0x03	; 3
    27b4:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <strncpy>
					event_parameter_count++;
    27b8:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
				}
			}
			break;
    27c2:	5f c2       	rjmp	.+1214   	; 0x2c82 <handleLinkBusMsgs+0x1082>

			case MESSAGE_SET_FREQ:
			{
				Frequency_Hz transmitter_freq = 0;
    27c4:	1e 82       	std	Y+6, r1	; 0x06
    27c6:	1f 82       	std	Y+7, r1	; 0x07
    27c8:	18 86       	std	Y+8, r1	; 0x08
    27ca:	19 86       	std	Y+9, r1	; 0x09

				if(lb_buff->fields[FIELD1][0])
    27cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    27d0:	fc 01       	movw	r30, r24
    27d2:	83 81       	ldd	r24, Z+3	; 0x03
    27d4:	88 23       	and	r24, r24
    27d6:	c9 f1       	breq	.+114    	; 0x284a <handleLinkBusMsgs+0xc4a>
				{
					static Frequency_Hz f;
					f = atol(lb_buff->fields[FIELD1]);
    27d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    27da:	9f 85       	ldd	r25, Y+15	; 0x0f
    27dc:	03 96       	adiw	r24, 0x03	; 3
    27de:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <atol>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <f.3453>
    27ea:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <f.3453+0x1>
    27ee:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <f.3453+0x2>
    27f2:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <f.3453+0x3>

					Frequency_Hz ff = f;
    27f6:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <f.3453>
    27fa:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <f.3453+0x1>
    27fe:	a0 91 5b 04 	lds	r26, 0x045B	; 0x80045b <f.3453+0x2>
    2802:	b0 91 5c 04 	lds	r27, 0x045C	; 0x80045c <f.3453+0x3>
    2806:	9e 01       	movw	r18, r28
    2808:	2e 5b       	subi	r18, 0xBE	; 190
    280a:	3f 4f       	sbci	r19, 0xFF	; 255
    280c:	f9 01       	movw	r30, r18
    280e:	80 83       	st	Z, r24
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	a2 83       	std	Z+2, r26	; 0x02
    2814:	b3 83       	std	Z+3, r27	; 0x03
					if(txSetFrequency(&ff, TRUE))
    2816:	ce 01       	movw	r24, r28
    2818:	8e 5b       	subi	r24, 0xBE	; 190
    281a:	9f 4f       	sbci	r25, 0xFF	; 255
    281c:	61 e0       	ldi	r22, 0x01	; 1
    281e:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <txSetFrequency>
    2822:	88 23       	and	r24, r24
    2824:	d1 f0       	breq	.+52     	; 0x285a <handleLinkBusMsgs+0xc5a>
					{
						transmitter_freq = ff;
    2826:	ce 01       	movw	r24, r28
    2828:	8e 5b       	subi	r24, 0xBE	; 190
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	fc 01       	movw	r30, r24
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	a2 81       	ldd	r26, Z+2	; 0x02
    2834:	b3 81       	ldd	r27, Z+3	; 0x03
    2836:	8e 83       	std	Y+6, r24	; 0x06
    2838:	9f 83       	std	Y+7, r25	; 0x07
    283a:	a8 87       	std	Y+8, r26	; 0x08
    283c:	b9 87       	std	Y+9, r27	; 0x09
						event_parameter_count++;
    283e:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
    2848:	08 c0       	rjmp	.+16     	; 0x285a <handleLinkBusMsgs+0xc5a>
					}
				}
				else
				{
					transmitter_freq = txGetFrequency();
    284a:	0e 94 67 1d 	call	0x3ace	; 0x3ace <txGetFrequency>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	8e 83       	std	Y+6, r24	; 0x06
    2854:	9f 83       	std	Y+7, r25	; 0x07
    2856:	a8 87       	std	Y+8, r26	; 0x08
    2858:	b9 87       	std	Y+9, r27	; 0x09
				}

				if(transmitter_freq)
    285a:	8e 81       	ldd	r24, Y+6	; 0x06
    285c:	9f 81       	ldd	r25, Y+7	; 0x07
    285e:	a8 85       	ldd	r26, Y+8	; 0x08
    2860:	b9 85       	ldd	r27, Y+9	; 0x09
    2862:	89 2b       	or	r24, r25
    2864:	8a 2b       	or	r24, r26
    2866:	8b 2b       	or	r24, r27
    2868:	09 f4       	brne	.+2      	; 0x286c <handleLinkBusMsgs+0xc6c>
    286a:	0d c2       	rjmp	.+1050   	; 0x2c86 <handleLinkBusMsgs+0x1086>
				{
					sprintf(g_tempStr, "%ld,", transmitter_freq);
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	8f 93       	push	r24
    2870:	88 85       	ldd	r24, Y+8	; 0x08
    2872:	8f 93       	push	r24
    2874:	8f 81       	ldd	r24, Y+7	; 0x07
    2876:	8f 93       	push	r24
    2878:	8e 81       	ldd	r24, Y+6	; 0x06
    287a:	8f 93       	push	r24
    287c:	88 e8       	ldi	r24, 0x88	; 136
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	89 2f       	mov	r24, r25
    2882:	8f 93       	push	r24
    2884:	88 e8       	ldi	r24, 0x88	; 136
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	8f 93       	push	r24
    288a:	8a eb       	ldi	r24, 0xBA	; 186
    288c:	93 e0       	ldi	r25, 0x03	; 3
    288e:	89 2f       	mov	r24, r25
    2890:	8f 93       	push	r24
    2892:	8a eb       	ldi	r24, 0xBA	; 186
    2894:	93 e0       	ldi	r25, 0x03	; 3
    2896:	8f 93       	push	r24
    2898:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
    289c:	4d b7       	in	r20, 0x3d	; 61
    289e:	5e b7       	in	r21, 0x3e	; 62
    28a0:	48 5f       	subi	r20, 0xF8	; 248
    28a2:	5f 4f       	sbci	r21, 0xFF	; 255
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
					lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_SET_FREQ_LABEL, g_tempStr);
    28ae:	4a eb       	ldi	r20, 0xBA	; 186
    28b0:	53 e0       	ldi	r21, 0x03	; 3
    28b2:	6d e8       	ldi	r22, 0x8D	; 141
    28b4:	71 e0       	ldi	r23, 0x01	; 1
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
				}
			}
			break;
    28bc:	e4 c1       	rjmp	.+968    	; 0x2c86 <handleLinkBusMsgs+0x1086>

			case MESSAGE_BAND:
			{
				RadioBand band;

				if(lb_buff->fields[FIELD1][0])  /* band field */
    28be:	8e 85       	ldd	r24, Y+14	; 0x0e
    28c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    28c2:	fc 01       	movw	r30, r24
    28c4:	83 81       	ldd	r24, Z+3	; 0x03
    28c6:	88 23       	and	r24, r24
    28c8:	09 f4       	brne	.+2      	; 0x28cc <handleLinkBusMsgs+0xccc>
    28ca:	56 c0       	rjmp	.+172    	; 0x2978 <handleLinkBusMsgs+0xd78>
				{
					EC ec = ERROR_CODE_ILLEGAL_COMMAND_RCVD;
    28cc:	8e ec       	ldi	r24, 0xCE	; 206
    28ce:	8a 87       	std	Y+10, r24	; 0x0a
					int b = atoi(lb_buff->fields[FIELD1]);
    28d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    28d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    28d4:	03 96       	adiw	r24, 0x03	; 3
    28d6:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <atoi>
    28da:	9b a7       	std	Y+43, r25	; 0x2b
    28dc:	8a a7       	std	Y+42, r24	; 0x2a

					if(b == 80)
    28de:	8a a5       	ldd	r24, Y+42	; 0x2a
    28e0:	9b a5       	ldd	r25, Y+43	; 0x2b
    28e2:	80 35       	cpi	r24, 0x50	; 80
    28e4:	91 05       	cpc	r25, r1
    28e6:	01 f5       	brne	.+64     	; 0x2928 <handleLinkBusMsgs+0xd28>
					{
						RadioBand b = BAND_80M;
    28e8:	ce 01       	movw	r24, r28
    28ea:	8a 5b       	subi	r24, 0xBA	; 186
    28ec:	9f 4f       	sbci	r25, 0xFF	; 255
    28ee:	21 e0       	ldi	r18, 0x01	; 1
    28f0:	fc 01       	movw	r30, r24
    28f2:	20 83       	st	Z, r18
						BOOL en = TRUE;
    28f4:	ce 01       	movw	r24, r28
    28f6:	89 5b       	subi	r24, 0xB9	; 185
    28f8:	9f 4f       	sbci	r25, 0xFF	; 255
    28fa:	21 e0       	ldi	r18, 0x01	; 1
    28fc:	fc 01       	movw	r30, r24
    28fe:	20 83       	st	Z, r18
						ec = txSetParameters(NULL, &b, NULL, &en);
    2900:	9e 01       	movw	r18, r28
    2902:	29 5b       	subi	r18, 0xB9	; 185
    2904:	3f 4f       	sbci	r19, 0xFF	; 255
    2906:	ce 01       	movw	r24, r28
    2908:	8a 5b       	subi	r24, 0xBA	; 186
    290a:	9f 4f       	sbci	r25, 0xFF	; 255
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	bc 01       	movw	r22, r24
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <txSetParameters>
    291a:	8a 87       	std	Y+10, r24	; 0x0a
						event_parameter_count++;
    291c:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    2920:	8f 5f       	subi	r24, 0xFF	; 255
    2922:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
    2926:	22 c0       	rjmp	.+68     	; 0x296c <handleLinkBusMsgs+0xd6c>
					}
					else if(b == 2)
    2928:	8a a5       	ldd	r24, Y+42	; 0x2a
    292a:	9b a5       	ldd	r25, Y+43	; 0x2b
    292c:	02 97       	sbiw	r24, 0x02	; 2
    292e:	f1 f4       	brne	.+60     	; 0x296c <handleLinkBusMsgs+0xd6c>
					{
						RadioBand b = BAND_2M;
    2930:	ce 01       	movw	r24, r28
    2932:	88 5b       	subi	r24, 0xB8	; 184
    2934:	9f 4f       	sbci	r25, 0xFF	; 255
    2936:	fc 01       	movw	r30, r24
    2938:	10 82       	st	Z, r1
						BOOL en = TRUE;
    293a:	ce 01       	movw	r24, r28
    293c:	87 5b       	subi	r24, 0xB7	; 183
    293e:	9f 4f       	sbci	r25, 0xFF	; 255
    2940:	21 e0       	ldi	r18, 0x01	; 1
    2942:	fc 01       	movw	r30, r24
    2944:	20 83       	st	Z, r18
						ec = txSetParameters(NULL, &b, NULL, &en);
    2946:	9e 01       	movw	r18, r28
    2948:	27 5b       	subi	r18, 0xB7	; 183
    294a:	3f 4f       	sbci	r19, 0xFF	; 255
    294c:	ce 01       	movw	r24, r28
    294e:	88 5b       	subi	r24, 0xB8	; 184
    2950:	9f 4f       	sbci	r25, 0xFF	; 255
    2952:	40 e0       	ldi	r20, 0x00	; 0
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	bc 01       	movw	r22, r24
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <txSetParameters>
    2960:	8a 87       	std	Y+10, r24	; 0x0a
						event_parameter_count++;
    2962:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <event_parameter_count.3402>
    2966:	8f 5f       	subi	r24, 0xFF	; 255
    2968:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <event_parameter_count.3402>
					}

					if(ec)
    296c:	8a 85       	ldd	r24, Y+10	; 0x0a
    296e:	88 23       	and	r24, r24
    2970:	19 f0       	breq	.+6      	; 0x2978 <handleLinkBusMsgs+0xd78>
					{
						g_last_error_code = ec;
    2972:	8a 85       	ldd	r24, Y+10	; 0x0a
    2974:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
					}
				}

				band = txGetBand();
    2978:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <txGetBand>
    297c:	8c a7       	std	Y+44, r24	; 0x2c

				if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query */
    297e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2980:	9f 85       	ldd	r25, Y+15	; 0x0f
    2982:	fc 01       	movw	r30, r24
    2984:	80 81       	ld	r24, Z
    2986:	82 30       	cpi	r24, 0x02	; 2
    2988:	09 f0       	breq	.+2      	; 0x298c <handleLinkBusMsgs+0xd8c>
    298a:	7f c1       	rjmp	.+766    	; 0x2c8a <handleLinkBusMsgs+0x108a>
				{
					/* Send a reply */
					sprintf(g_tempStr, "%i", band);
    298c:	8c a5       	ldd	r24, Y+44	; 0x2c
    298e:	88 2f       	mov	r24, r24
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	29 2f       	mov	r18, r25
    2994:	2f 93       	push	r18
    2996:	8f 93       	push	r24
    2998:	81 e9       	ldi	r24, 0x91	; 145
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	89 2f       	mov	r24, r25
    299e:	8f 93       	push	r24
    29a0:	81 e9       	ldi	r24, 0x91	; 145
    29a2:	91 e0       	ldi	r25, 0x01	; 1
    29a4:	8f 93       	push	r24
    29a6:	8a eb       	ldi	r24, 0xBA	; 186
    29a8:	93 e0       	ldi	r25, 0x03	; 3
    29aa:	89 2f       	mov	r24, r25
    29ac:	8f 93       	push	r24
    29ae:	8a eb       	ldi	r24, 0xBA	; 186
    29b0:	93 e0       	ldi	r25, 0x03	; 3
    29b2:	8f 93       	push	r24
    29b4:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <sprintf>
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
					lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_BAND_LABEL, g_tempStr);
    29c4:	4a eb       	ldi	r20, 0xBA	; 186
    29c6:	53 e0       	ldi	r21, 0x03	; 3
    29c8:	64 e9       	ldi	r22, 0x94	; 148
    29ca:	71 e0       	ldi	r23, 0x01	; 1
    29cc:	83 e0       	ldi	r24, 0x03	; 3
    29ce:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
				}
			}
			break;
    29d2:	5b c1       	rjmp	.+694    	; 0x2c8a <handleLinkBusMsgs+0x108a>

			case MESSAGE_BAT:
			{
				uint16_t bat;

				if(g_lastConversionResult[BATTERY_READING] > VOLTS_3_0) /* Send % of internal battery charge remaining */
    29d4:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <g_lastConversionResult>
    29d8:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <g_lastConversionResult+0x1>
    29dc:	8d 38       	cpi	r24, 0x8D	; 141
    29de:	92 40       	sbci	r25, 0x02	; 2
    29e0:	08 f4       	brcc	.+2      	; 0x29e4 <handleLinkBusMsgs+0xde4>
    29e2:	7c c0       	rjmp	.+248    	; 0x2adc <handleLinkBusMsgs+0xedc>
				{
					bat = (uint16_t)CLAMP(0, BATTERY_PERCENTAGE(g_lastConversionResult[BATTERY_READING], (int32_t)g_battery_empty_mV), 100);
    29e4:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <g_lastConversionResult>
    29e8:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <g_lastConversionResult+0x1>
    29ec:	cc 01       	movw	r24, r24
    29ee:	a0 e0       	ldi	r26, 0x00	; 0
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	9c 01       	movw	r18, r24
    29f4:	ad 01       	movw	r20, r26
    29f6:	60 ea       	ldi	r22, 0xA0	; 160
    29f8:	78 e6       	ldi	r23, 0x68	; 104
    29fa:	86 e0       	ldi	r24, 0x06	; 6
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <__mulsi3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	7c 01       	movw	r14, r24
    2a08:	8d 01       	movw	r16, r26
    2a0a:	2d e7       	ldi	r18, 0x7D	; 125
    2a0c:	f2 1a       	sub	r15, r18
    2a0e:	0c 40       	sbci	r16, 0x0C	; 12
    2a10:	1e 4f       	sbci	r17, 0xFE	; 254
    2a12:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <g_battery_empty_mV>
    2a16:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <g_battery_empty_mV+0x1>
    2a1a:	cc 01       	movw	r24, r24
    2a1c:	a0 e0       	ldi	r26, 0x00	; 0
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	9c 01       	movw	r18, r24
    2a22:	ad 01       	movw	r20, r26
    2a24:	64 e6       	ldi	r22, 0x64	; 100
    2a26:	70 e7       	ldi	r23, 0x70	; 112
    2a28:	8e ef       	ldi	r24, 0xFE	; 254
    2a2a:	9f ef       	ldi	r25, 0xFF	; 255
    2a2c:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <__mulsi3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	e8 0e       	add	r14, r24
    2a36:	f9 1e       	adc	r15, r25
    2a38:	0a 1f       	adc	r16, r26
    2a3a:	1b 1f       	adc	r17, r27
    2a3c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <g_battery_empty_mV>
    2a40:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <g_battery_empty_mV+0x1>
    2a44:	cc 01       	movw	r24, r24
    2a46:	a0 e0       	ldi	r26, 0x00	; 0
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	28 e6       	ldi	r18, 0x68	; 104
    2a4c:	30 e1       	ldi	r19, 0x10	; 16
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	28 1b       	sub	r18, r24
    2a54:	39 0b       	sbc	r19, r25
    2a56:	4a 0b       	sbc	r20, r26
    2a58:	5b 0b       	sbc	r21, r27
    2a5a:	8f ef       	ldi	r24, 0xFF	; 255
    2a5c:	93 e0       	ldi	r25, 0x03	; 3
    2a5e:	dc 01       	movw	r26, r24
    2a60:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__muluhisi3>
    2a64:	9b 01       	movw	r18, r22
    2a66:	ac 01       	movw	r20, r24
    2a68:	c8 01       	movw	r24, r16
    2a6a:	b7 01       	movw	r22, r14
    2a6c:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <__divmodsi4>
    2a70:	da 01       	movw	r26, r20
    2a72:	c9 01       	movw	r24, r18
    2a74:	8d a7       	std	Y+45, r24	; 0x2d
    2a76:	9e a7       	std	Y+46, r25	; 0x2e
    2a78:	af a7       	std	Y+47, r26	; 0x2f
    2a7a:	b8 ab       	std	Y+48, r27	; 0x30
    2a7c:	1a aa       	std	Y+50, r1	; 0x32
    2a7e:	19 aa       	std	Y+49, r1	; 0x31
    2a80:	84 e6       	ldi	r24, 0x64	; 100
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9c ab       	std	Y+52, r25	; 0x34
    2a86:	8b ab       	std	Y+51, r24	; 0x33
    2a88:	8b a9       	ldd	r24, Y+51	; 0x33
    2a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a8c:	9c 01       	movw	r18, r24
    2a8e:	99 0f       	add	r25, r25
    2a90:	44 0b       	sbc	r20, r20
    2a92:	55 0b       	sbc	r21, r21
    2a94:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a96:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a98:	af a5       	ldd	r26, Y+47	; 0x2f
    2a9a:	b8 a9       	ldd	r27, Y+48	; 0x30
    2a9c:	28 17       	cp	r18, r24
    2a9e:	39 07       	cpc	r19, r25
    2aa0:	4a 07       	cpc	r20, r26
    2aa2:	5b 07       	cpc	r21, r27
    2aa4:	3c f4       	brge	.+14     	; 0x2ab4 <handleLinkBusMsgs+0xeb4>
    2aa6:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa8:	9c a9       	ldd	r25, Y+52	; 0x34
    2aaa:	09 2e       	mov	r0, r25
    2aac:	00 0c       	add	r0, r0
    2aae:	aa 0b       	sbc	r26, r26
    2ab0:	bb 0b       	sbc	r27, r27
    2ab2:	11 c0       	rjmp	.+34     	; 0x2ad6 <handleLinkBusMsgs+0xed6>
    2ab4:	89 a9       	ldd	r24, Y+49	; 0x31
    2ab6:	9a a9       	ldd	r25, Y+50	; 0x32
    2ab8:	09 2e       	mov	r0, r25
    2aba:	00 0c       	add	r0, r0
    2abc:	aa 0b       	sbc	r26, r26
    2abe:	bb 0b       	sbc	r27, r27
    2ac0:	2d a5       	ldd	r18, Y+45	; 0x2d
    2ac2:	3e a5       	ldd	r19, Y+46	; 0x2e
    2ac4:	4f a5       	ldd	r20, Y+47	; 0x2f
    2ac6:	58 a9       	ldd	r21, Y+48	; 0x30
    2ac8:	82 17       	cp	r24, r18
    2aca:	93 07       	cpc	r25, r19
    2acc:	a4 07       	cpc	r26, r20
    2ace:	b5 07       	cpc	r27, r21
    2ad0:	14 f4       	brge	.+4      	; 0x2ad6 <handleLinkBusMsgs+0xed6>
    2ad2:	da 01       	movw	r26, r20
    2ad4:	c9 01       	movw	r24, r18
    2ad6:	9c 87       	std	Y+12, r25	; 0x0c
    2ad8:	8b 87       	std	Y+11, r24	; 0x0b
    2ada:	2f c0       	rjmp	.+94     	; 0x2b3a <handleLinkBusMsgs+0xf3a>
				}
				else                                                    /* Send the voltage of the external battery */
				{
					bat = VEXT(g_lastConversionResult[V12V_VOLTAGE_READING]);
    2adc:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <g_lastConversionResult+0x4>
    2ae0:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <g_lastConversionResult+0x5>
    2ae4:	9c 01       	movw	r18, r24
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	da 01       	movw	r26, r20
    2aec:	c9 01       	movw	r24, r18
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	aa 1f       	adc	r26, r26
    2af4:	bb 1f       	adc	r27, r27
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	aa 1f       	adc	r26, r26
    2afc:	bb 1f       	adc	r27, r27
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	aa 1f       	adc	r26, r26
    2b04:	bb 1f       	adc	r27, r27
    2b06:	82 1b       	sub	r24, r18
    2b08:	93 0b       	sbc	r25, r19
    2b0a:	a4 0b       	sbc	r26, r20
    2b0c:	b5 0b       	sbc	r27, r21
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	aa 1f       	adc	r26, r26
    2b14:	bb 1f       	adc	r27, r27
    2b16:	8a 5c       	subi	r24, 0xCA	; 202
    2b18:	9e 4f       	sbci	r25, 0xFE	; 254
    2b1a:	af 4f       	sbci	r26, 0xFF	; 255
    2b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b1e:	24 e6       	ldi	r18, 0x64	; 100
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <__divmodsi4>
    2b2e:	da 01       	movw	r26, r20
    2b30:	c9 01       	movw	r24, r18
    2b32:	80 5f       	subi	r24, 0xF0	; 240
    2b34:	98 4d       	sbci	r25, 0xD8	; 216
    2b36:	9c 87       	std	Y+12, r25	; 0x0c
    2b38:	8b 87       	std	Y+11, r24	; 0x0b
				}

				lb_broadcast_num(bat, "!BAT");
    2b3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b3e:	68 e9       	ldi	r22, 0x98	; 152
    2b40:	71 e0       	ldi	r23, 0x01	; 1
    2b42:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lb_broadcast_num>

				/* The system clock gets re-initialized whenever a battery message is received. This
				 * is just to ensure the two stay closely in sync while the user interface is active */
				set_system_time(ds3231_get_epoch(NULL));    /* update system clock */
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 34 23 	call	0x4668	; 0x4668 <ds3231_get_epoch>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <set_system_time>
			}
			break;
    2b5a:	9c c0       	rjmp	.+312    	; 0x2c94 <handleLinkBusMsgs+0x1094>

			case MESSAGE_TEMP:
			{
				int16_t v;
				if(!ds3231_get_temp(&v))
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	86 5b       	subi	r24, 0xB6	; 182
    2b60:	9f 4f       	sbci	r25, 0xFF	; 255
    2b62:	0e 94 67 24 	call	0x48ce	; 0x48ce <ds3231_get_temp>
    2b66:	88 23       	and	r24, r24
    2b68:	09 f0       	breq	.+2      	; 0x2b6c <handleLinkBusMsgs+0xf6c>
    2b6a:	91 c0       	rjmp	.+290    	; 0x2c8e <handleLinkBusMsgs+0x108e>
				{
					lb_broadcast_num(v, "!TEM");
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	86 5b       	subi	r24, 0xB6	; 182
    2b70:	9f 4f       	sbci	r25, 0xFF	; 255
    2b72:	fc 01       	movw	r30, r24
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	6d e9       	ldi	r22, 0x9D	; 157
    2b7a:	71 e0       	ldi	r23, 0x01	; 1
    2b7c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lb_broadcast_num>
				}
			}
			break;
    2b80:	86 c0       	rjmp	.+268    	; 0x2c8e <handleLinkBusMsgs+0x108e>

			case MESSAGE_VER:
			{
				lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_VER_LABEL, SW_REVISION);
    2b82:	42 ea       	ldi	r20, 0xA2	; 162
    2b84:	51 e0       	ldi	r21, 0x01	; 1
    2b86:	66 ea       	ldi	r22, 0xA6	; 166
    2b88:	71 e0       	ldi	r23, 0x01	; 1
    2b8a:	83 e0       	ldi	r24, 0x03	; 3
    2b8c:	0e 94 21 02 	call	0x442	; 0x442 <lb_send_msg>
			}
			break;
    2b90:	81 c0       	rjmp	.+258    	; 0x2c94 <handleLinkBusMsgs+0x1094>


			case MESSAGE_BIAS:
			{
				if(lb_buff->fields[FIELD1][0])  /* value field */
    2b92:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b94:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b96:	fc 01       	movw	r30, r24
    2b98:	83 81       	ldd	r24, Z+3	; 0x03
    2b9a:	88 23       	and	r24, r24
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <handleLinkBusMsgs+0xfa0>
    2b9e:	79 c0       	rjmp	.+242    	; 0x2c92 <handleLinkBusMsgs+0x1092>
				{
					EC ec = ERROR_CODE_ILLEGAL_COMMAND_RCVD;
    2ba0:	8e ec       	ldi	r24, 0xCE	; 206
    2ba2:	8d 87       	std	Y+13, r24	; 0x0d
					char a = lb_buff->fields[FIELD1][0];
    2ba4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ba8:	fc 01       	movw	r30, r24
    2baa:	83 81       	ldd	r24, Z+3	; 0x03
    2bac:	8d ab       	std	Y+53, r24	; 0x35

					if(a == 'U')
    2bae:	8d a9       	ldd	r24, Y+53	; 0x35
    2bb0:	85 35       	cpi	r24, 0x55	; 85
    2bb2:	b1 f4       	brne	.+44     	; 0x2be0 <handleLinkBusMsgs+0xfe0>
					{
						int b = atoi(lb_buff->fields[FIELD2]);
    2bb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bb8:	48 96       	adiw	r24, 0x18	; 24
    2bba:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <atoi>
    2bbe:	9f ab       	std	Y+55, r25	; 0x37
    2bc0:	8e ab       	std	Y+54, r24	; 0x36

						if((b >= 0) && (b < 256))
    2bc2:	8e a9       	ldd	r24, Y+54	; 0x36
    2bc4:	9f a9       	ldd	r25, Y+55	; 0x37
    2bc6:	99 23       	and	r25, r25
    2bc8:	cc f1       	brlt	.+114    	; 0x2c3c <handleLinkBusMsgs+0x103c>
    2bca:	8e a9       	ldd	r24, Y+54	; 0x36
    2bcc:	9f a9       	ldd	r25, Y+55	; 0x37
    2bce:	8f 3f       	cpi	r24, 0xFF	; 255
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <handleLinkBusMsgs+0xfd6>
    2bd4:	9c f5       	brge	.+102    	; 0x2c3c <handleLinkBusMsgs+0x103c>
						{
							g_mod_up = b;
    2bd6:	8e a9       	ldd	r24, Y+54	; 0x36
    2bd8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_mod_up>
							ec = ERROR_CODE_NO_ERROR;
    2bdc:	1d 86       	std	Y+13, r1	; 0x0d
    2bde:	2e c0       	rjmp	.+92     	; 0x2c3c <handleLinkBusMsgs+0x103c>
						}
					}
					else if(a == 'D')
    2be0:	8d a9       	ldd	r24, Y+53	; 0x35
    2be2:	84 34       	cpi	r24, 0x44	; 68
    2be4:	b1 f4       	brne	.+44     	; 0x2c12 <handleLinkBusMsgs+0x1012>
					{
						int b = atoi(lb_buff->fields[FIELD2]);
    2be6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2be8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bea:	48 96       	adiw	r24, 0x18	; 24
    2bec:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <atoi>
    2bf0:	99 af       	std	Y+57, r25	; 0x39
    2bf2:	88 af       	std	Y+56, r24	; 0x38

						if((b >= 0) && (b < 256))
    2bf4:	88 ad       	ldd	r24, Y+56	; 0x38
    2bf6:	99 ad       	ldd	r25, Y+57	; 0x39
    2bf8:	99 23       	and	r25, r25
    2bfa:	04 f1       	brlt	.+64     	; 0x2c3c <handleLinkBusMsgs+0x103c>
    2bfc:	88 ad       	ldd	r24, Y+56	; 0x38
    2bfe:	99 ad       	ldd	r25, Y+57	; 0x39
    2c00:	8f 3f       	cpi	r24, 0xFF	; 255
    2c02:	91 05       	cpc	r25, r1
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <handleLinkBusMsgs+0x1008>
    2c06:	d4 f4       	brge	.+52     	; 0x2c3c <handleLinkBusMsgs+0x103c>
						{
							g_mod_down = b;
    2c08:	88 ad       	ldd	r24, Y+56	; 0x38
    2c0a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <g_mod_down>
							ec = ERROR_CODE_NO_ERROR;
    2c0e:	1d 86       	std	Y+13, r1	; 0x0d
    2c10:	15 c0       	rjmp	.+42     	; 0x2c3c <handleLinkBusMsgs+0x103c>
						}
					}
					else
					{
						int b = atoi(lb_buff->fields[FIELD1]);
    2c12:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c14:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c16:	03 96       	adiw	r24, 0x03	; 3
    2c18:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <atoi>
    2c1c:	9b af       	std	Y+59, r25	; 0x3b
    2c1e:	8a af       	std	Y+58, r24	; 0x3a

						if((b >= 0) && (b < 256))
    2c20:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c22:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c24:	99 23       	and	r25, r25
    2c26:	54 f0       	brlt	.+20     	; 0x2c3c <handleLinkBusMsgs+0x103c>
    2c28:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c2a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c2c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c2e:	91 05       	cpc	r25, r1
    2c30:	09 f0       	breq	.+2      	; 0x2c34 <handleLinkBusMsgs+0x1034>
    2c32:	24 f4       	brge	.+8      	; 0x2c3c <handleLinkBusMsgs+0x103c>
						{
							ec = txSet2mGateBias(b);
    2c34:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c36:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <txSet2mGateBias>
    2c3a:	8d 87       	std	Y+13, r24	; 0x0d
						}
					}

					if(ec)
    2c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3e:	88 23       	and	r24, r24
    2c40:	41 f1       	breq	.+80     	; 0x2c92 <handleLinkBusMsgs+0x1092>
					{
						g_last_error_code = ec;
    2c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c44:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
					}
				}
			}
			break;
    2c48:	24 c0       	rjmp	.+72     	; 0x2c92 <handleLinkBusMsgs+0x1092>

			default:
			{
				linkbus_reset_rx(); /* flush buffer */
    2c4a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <linkbus_reset_rx>
				g_last_error_code = ERROR_CODE_ILLEGAL_COMMAND_RCVD;
    2c4e:	8e ec       	ldi	r24, 0xCE	; 206
    2c50:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
			}
			break;
    2c54:	1f c0       	rjmp	.+62     	; 0x2c94 <handleLinkBusMsgs+0x1094>
					{
						PORTD &= ~((1 << PORTD6) | (1 << PORTD7));
					}
				}
			}
			break;
    2c56:	00 00       	nop
    2c58:	1d c0       	rjmp	.+58     	; 0x2c94 <handleLinkBusMsgs+0x1094>
					}

					send_ack = FALSE;
				}
			}
			break;
    2c5a:	00 00       	nop
    2c5c:	1b c0       	rjmp	.+54     	; 0x2c94 <handleLinkBusMsgs+0x1094>
						g_shutting_down_wifi = TRUE;
						sei();
					}
				}
			}
			break;
    2c5e:	00 00       	nop
    2c60:	19 c0       	rjmp	.+50     	; 0x2c94 <handleLinkBusMsgs+0x1094>
					Modulation setModulation = MODE_FM;
					txSetParameters(NULL, NULL, &setModulation, NULL);
					event_parameter_count++;
				}
			}
			break;
    2c62:	00 00       	nop
    2c64:	17 c0       	rjmp	.+46     	; 0x2c94 <handleLinkBusMsgs+0x1094>

					sprintf(g_tempStr, "M,%u", pwr_mW);
					lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TX_POWER_LABEL, g_tempStr);
				}
			}
			break;
    2c66:	00 00       	nop
    2c68:	15 c0       	rjmp	.+42     	; 0x2c94 <handleLinkBusMsgs+0x1094>
					/* Restore saved event settings */
					event_parameter_count = 0;
					g_last_status_code = STATUS_CODE_RECEIVING_EVENT_DATA;
				}
			}
			break;
    2c6a:	00 00       	nop
    2c6c:	13 c0       	rjmp	.+38     	; 0x2c94 <handleLinkBusMsgs+0x1094>
							event_parameter_count++;
						}
					}
				}
			}
			break;
    2c6e:	00 00       	nop
    2c70:	11 c0       	rjmp	.+34     	; 0x2c94 <handleLinkBusMsgs+0x1094>
							}
						}
					}
				}
			}
			break;
    2c72:	00 00       	nop
    2c74:	0f c0       	rjmp	.+30     	; 0x2c94 <handleLinkBusMsgs+0x1094>
					{
						g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
					}
				}
			}
			break;
    2c76:	00 00       	nop
    2c78:	0d c0       	rjmp	.+26     	; 0x2c94 <handleLinkBusMsgs+0x1094>
						event_parameter_count++;
						g_code_throttle = throttleValue(g_pattern_codespeed);
					}
				}
			}
			break;
    2c7a:	00 00       	nop
    2c7c:	0b c0       	rjmp	.+22     	; 0x2c94 <handleLinkBusMsgs+0x1094>
						g_intra_cycle_delay_time = time;
						event_parameter_count++;
					}
				}
			}
			break;
    2c7e:	00 00       	nop
    2c80:	09 c0       	rjmp	.+18     	; 0x2c94 <handleLinkBusMsgs+0x1094>
				{
					strncpy(g_messages_text[PATTERN_TEXT], lb_buff->fields[FIELD1], MAX_PATTERN_TEXT_LENGTH);
					event_parameter_count++;
				}
			}
			break;
    2c82:	00 00       	nop
    2c84:	07 c0       	rjmp	.+14     	; 0x2c94 <handleLinkBusMsgs+0x1094>
				{
					sprintf(g_tempStr, "%ld,", transmitter_freq);
					lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_SET_FREQ_LABEL, g_tempStr);
				}
			}
			break;
    2c86:	00 00       	nop
    2c88:	05 c0       	rjmp	.+10     	; 0x2c94 <handleLinkBusMsgs+0x1094>
					/* Send a reply */
					sprintf(g_tempStr, "%i", band);
					lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_BAND_LABEL, g_tempStr);
				}
			}
			break;
    2c8a:	00 00       	nop
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <handleLinkBusMsgs+0x1094>
				if(!ds3231_get_temp(&v))
				{
					lb_broadcast_num(v, "!TEM");
				}
			}
			break;
    2c8e:	00 00       	nop
    2c90:	01 c0       	rjmp	.+2      	; 0x2c94 <handleLinkBusMsgs+0x1094>
					{
						g_last_error_code = ec;
					}
				}
			}
			break;
    2c92:	00 00       	nop
				g_last_error_code = ERROR_CODE_ILLEGAL_COMMAND_RCVD;
			}
			break;
		}

		lb_buff->id = MESSAGE_EMPTY;
    2c94:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c96:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c98:	fc 01       	movw	r30, r24
    2c9a:	12 82       	std	Z+2, r1	; 0x02
    2c9c:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	88 23       	and	r24, r24
    2ca2:	21 f0       	breq	.+8      	; 0x2cac <handleLinkBusMsgs+0x10ac>
		{
			linkbus_send_text(MESSAGE_ACK);
    2ca4:	8a ea       	ldi	r24, 0xAA	; 170
    2ca6:	91 e0       	ldi	r25, 0x01	; 1
    2ca8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <linkbus_send_text>
{
	LinkbusRxBuffer* lb_buff;
	static uint8_t event_parameter_count = 0;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2cac:	0e 94 2d 01 	call	0x25a	; 0x25a <nextFullRxBuffer>
    2cb0:	9f 87       	std	Y+15, r25	; 0x0f
    2cb2:	8e 87       	std	Y+14, r24	; 0x0e
    2cb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cb8:	89 2b       	or	r24, r25
    2cba:	11 f0       	breq	.+4      	; 0x2cc0 <handleLinkBusMsgs+0x10c0>
    2cbc:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <handleLinkBusMsgs+0x26>
		if(send_ack)
		{
			linkbus_send_text(MESSAGE_ACK);
		}
	}
}
    2cc0:	00 00       	nop
    2cc2:	c5 5b       	subi	r28, 0xB5	; 181
    2cc4:	df 4f       	sbci	r29, 0xFF	; 255
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	1f 91       	pop	r17
    2cd6:	0f 91       	pop	r16
    2cd8:	ff 90       	pop	r15
    2cda:	ef 90       	pop	r14
    2cdc:	08 95       	ret

00002cde <eventEnabled>:

BOOL __attribute__((optimize("O0"))) eventEnabled()
{
    2cde:	ef 92       	push	r14
    2ce0:	ff 92       	push	r15
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	29 97       	sbiw	r28, 0x09	; 9
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
	time_t now;
	int32_t dif;
	BOOL runsFinite;

	dif = timeDif(g_event_finish_time, g_event_start_time);
    2cfa:	20 91 06 04 	lds	r18, 0x0406	; 0x800406 <g_event_start_time>
    2cfe:	30 91 07 04 	lds	r19, 0x0407	; 0x800407 <g_event_start_time+0x1>
    2d02:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <g_event_start_time+0x2>
    2d06:	50 91 09 04 	lds	r21, 0x0409	; 0x800409 <g_event_start_time+0x3>
    2d0a:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <g_event_finish_time>
    2d0e:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <g_event_finish_time+0x1>
    2d12:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <g_event_finish_time+0x2>
    2d16:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <g_event_finish_time+0x3>
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 2f 23 	call	0x465e	; 0x465e <timeDif>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	ab 83       	std	Y+3, r26	; 0x03
    2d2c:	bc 83       	std	Y+4, r27	; 0x04
	runsFinite = (dif > 0);
    2d2e:	21 e0       	ldi	r18, 0x01	; 1
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	ab 81       	ldd	r26, Y+3	; 0x03
    2d36:	bc 81       	ldd	r27, Y+4	; 0x04
    2d38:	18 16       	cp	r1, r24
    2d3a:	19 06       	cpc	r1, r25
    2d3c:	1a 06       	cpc	r1, r26
    2d3e:	1b 06       	cpc	r1, r27
    2d40:	0c f0       	brlt	.+2      	; 0x2d44 <eventEnabled+0x66>
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	2d 83       	std	Y+5, r18	; 0x05

	time(&now);
    2d46:	ce 01       	movw	r24, r28
    2d48:	06 96       	adiw	r24, 0x06	; 6
    2d4a:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <time>
	dif = timeDif(now, g_event_finish_time);
    2d4e:	20 91 0a 04 	lds	r18, 0x040A	; 0x80040a <g_event_finish_time>
    2d52:	30 91 0b 04 	lds	r19, 0x040B	; 0x80040b <g_event_finish_time+0x1>
    2d56:	40 91 0c 04 	lds	r20, 0x040C	; 0x80040c <g_event_finish_time+0x2>
    2d5a:	50 91 0d 04 	lds	r21, 0x040D	; 0x80040d <g_event_finish_time+0x3>
    2d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d60:	9f 81       	ldd	r25, Y+7	; 0x07
    2d62:	a8 85       	ldd	r26, Y+8	; 0x08
    2d64:	b9 85       	ldd	r27, Y+9	; 0x09
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 2f 23 	call	0x465e	; 0x465e <timeDif>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	89 83       	std	Y+1, r24	; 0x01
    2d74:	9a 83       	std	Y+2, r25	; 0x02
    2d76:	ab 83       	std	Y+3, r26	; 0x03
    2d78:	bc 83       	std	Y+4, r27	; 0x04

	if((dif >= 0) && runsFinite)
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7e:	ab 81       	ldd	r26, Y+3	; 0x03
    2d80:	bc 81       	ldd	r27, Y+4	; 0x04
    2d82:	bb 23       	and	r27, r27
    2d84:	2c f0       	brlt	.+10     	; 0x2d90 <eventEnabled+0xb2>
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	88 23       	and	r24, r24
    2d8a:	11 f0       	breq	.+4      	; 0x2d90 <eventEnabled+0xb2>
	{
		return( FALSE); /* completed events are never enabled */
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	4a c0       	rjmp	.+148    	; 0x2e24 <eventEnabled+0x146>
	}

	dif = timeDif(now, g_event_start_time);
    2d90:	20 91 06 04 	lds	r18, 0x0406	; 0x800406 <g_event_start_time>
    2d94:	30 91 07 04 	lds	r19, 0x0407	; 0x800407 <g_event_start_time+0x1>
    2d98:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <g_event_start_time+0x2>
    2d9c:	50 91 09 04 	lds	r21, 0x0409	; 0x800409 <g_event_start_time+0x3>
    2da0:	8e 81       	ldd	r24, Y+6	; 0x06
    2da2:	9f 81       	ldd	r25, Y+7	; 0x07
    2da4:	a8 85       	ldd	r26, Y+8	; 0x08
    2da6:	b9 85       	ldd	r27, Y+9	; 0x09
    2da8:	bc 01       	movw	r22, r24
    2daa:	cd 01       	movw	r24, r26
    2dac:	0e 94 2f 23 	call	0x465e	; 0x465e <timeDif>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	89 83       	std	Y+1, r24	; 0x01
    2db6:	9a 83       	std	Y+2, r25	; 0x02
    2db8:	ab 83       	std	Y+3, r26	; 0x03
    2dba:	bc 83       	std	Y+4, r27	; 0x04

	if(dif >= -60)  /* running events are always enabled */
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc0:	ab 81       	ldd	r26, Y+3	; 0x03
    2dc2:	bc 81       	ldd	r27, Y+4	; 0x04
    2dc4:	84 3c       	cpi	r24, 0xC4	; 196
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	af 4f       	sbci	r26, 0xFF	; 255
    2dca:	bf 4f       	sbci	r27, 0xFF	; 255
    2dcc:	64 f0       	brlt	.+24     	; 0x2de6 <eventEnabled+0x108>
	{
		g_sleepType = NOT_SLEEPING;
    2dce:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <g_sleepType>
		g_seconds_to_sleep = 0;
    2dd2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <g_seconds_to_sleep>
    2dd6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <g_seconds_to_sleep+0x1>
    2dda:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <g_seconds_to_sleep+0x2>
    2dde:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <g_seconds_to_sleep+0x3>
		return( TRUE);
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	1f c0       	rjmp	.+62     	; 0x2e24 <eventEnabled+0x146>
	}

	/* If we reach here, we have an event that has not yet started, and a sleep time needs to be calculated
	 * consider if there is time for sleep prior to the event start */
	g_seconds_to_sleep = (-dif) - 60;   /* sleep until 60 seconds before its start time */
    2de6:	24 ec       	ldi	r18, 0xC4	; 196
    2de8:	3f ef       	ldi	r19, 0xFF	; 255
    2dea:	4f ef       	ldi	r20, 0xFF	; 255
    2dec:	5f ef       	ldi	r21, 0xFF	; 255
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	9a 81       	ldd	r25, Y+2	; 0x02
    2df2:	ab 81       	ldd	r26, Y+3	; 0x03
    2df4:	bc 81       	ldd	r27, Y+4	; 0x04
    2df6:	79 01       	movw	r14, r18
    2df8:	8a 01       	movw	r16, r20
    2dfa:	e8 1a       	sub	r14, r24
    2dfc:	f9 0a       	sbc	r15, r25
    2dfe:	0a 0b       	sbc	r16, r26
    2e00:	1b 0b       	sbc	r17, r27
    2e02:	d8 01       	movw	r26, r16
    2e04:	c7 01       	movw	r24, r14
    2e06:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <g_seconds_to_sleep>
    2e0a:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <g_seconds_to_sleep+0x1>
    2e0e:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <g_seconds_to_sleep+0x2>
    2e12:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <g_seconds_to_sleep+0x3>
	g_sleepType = SLEEP_UNTIL_START_TIME;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <g_sleepType>
	g_go_to_sleep = TRUE;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <g_go_to_sleep>

	return( TRUE);
    2e22:	81 e0       	ldi	r24, 0x01	; 1
}
    2e24:	29 96       	adiw	r28, 0x09	; 9
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	1f 91       	pop	r17
    2e36:	0f 91       	pop	r16
    2e38:	ff 90       	pop	r15

void suspendEvent()
{
	cli();
    2e3a:	ef 90       	pop	r14
	g_on_the_air = 0;           /*  stop transmitting */
    2e3c:	08 95       	ret

00002e3e <suspendEvent>:
    2e3e:	f8 94       	cli
    2e40:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <g_on_the_air>
    2e44:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <g_on_the_air+0x1>
    2e48:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <g_on_the_air+0x2>
	g_event_commenced = FALSE;  /* get things stopped immediately */
    2e4c:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <g_on_the_air+0x3>
	g_event_enabled = FALSE;    /* get things stopped immediately */
    2e50:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <g_event_commenced>
	sei();
	keyTransmitter(OFF);
    2e54:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <g_event_enabled>
    2e58:	78 94       	sei
	powerToTransmitter(OFF);
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	b1 d6       	rcall	.+3426   	; 0x3bc0 <keyTransmitter>
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	85 c6       	rjmp	.+3338   	; 0x3b6c <powerToTransmitter>
}

EC __attribute__((optimize("O0"))) launchEvent(SC* statusCode)
{
    2e62:	08 95       	ret

00002e64 <launchEvent>:
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <launchEvent+0x6>
    2e6a:	1f 92       	push	r1
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	9b 83       	std	Y+3, r25	; 0x03
	EC ec = activateEventUsingCurrentSettings(statusCode);
    2e72:	8a 83       	std	Y+2, r24	; 0x02
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	9b 81       	ldd	r25, Y+3	; 0x03
    2e78:	1e d0       	rcall	.+60     	; 0x2eb6 <activateEventUsingCurrentSettings>

	if(*statusCode)
    2e7a:	89 83       	std	Y+1, r24	; 0x01
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e80:	fc 01       	movw	r30, r24
    2e82:	80 81       	ld	r24, Z
    2e84:	88 23       	and	r24, r24
	{
		g_last_status_code = *statusCode;
    2e86:	31 f0       	breq	.+12     	; 0x2e94 <launchEvent+0x30>
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	80 81       	ld	r24, Z
    2e90:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <g_last_status_code>
	}

	if(ec)
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	88 23       	and	r24, r24
	{
		g_last_error_code = ec;
    2e98:	21 f0       	breq	.+8      	; 0x2ea2 <launchEvent+0x3e>
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <g_last_error_code>
	}
	else
	{
		g_event_enabled = eventEnabled();
    2ea0:	03 c0       	rjmp	.+6      	; 0x2ea8 <launchEvent+0x44>
    2ea2:	1d df       	rcall	.-454    	; 0x2cde <eventEnabled>
    2ea4:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <g_event_enabled>
	}

	return( ec);
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	08 95       	ret

00002eb6 <activateEventUsingCurrentSettings>:

EC activateEventUsingCurrentSettings(SC* statusCode)
{
    2eb6:	cf 92       	push	r12
    2eb8:	df 92       	push	r13
    2eba:	ef 92       	push	r14
    2ebc:	ff 92       	push	r15
    2ebe:	0f 93       	push	r16
    2ec0:	1f 93       	push	r17
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	1f 92       	push	r1
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
	/* Make sure everything has been sanely initialized */
	if(!g_event_start_time)
    2ecc:	40 91 06 04 	lds	r20, 0x0406	; 0x800406 <g_event_start_time>
    2ed0:	50 91 07 04 	lds	r21, 0x0407	; 0x800407 <g_event_start_time+0x1>
    2ed4:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <g_event_start_time+0x2>
    2ed8:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <g_event_start_time+0x3>
    2edc:	45 2b       	or	r20, r21
    2ede:	46 2b       	or	r20, r22
    2ee0:	47 2b       	or	r20, r23
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <activateEventUsingCurrentSettings+0x30>
    2ee4:	65 c1       	rjmp	.+714    	; 0x31b0 <activateEventUsingCurrentSettings+0x2fa>
	{
		return( ERROR_CODE_EVENT_MISSING_START_TIME);
	}

	if(g_event_start_time >= g_event_finish_time)   /* Finish must be later than start */
    2ee6:	00 91 06 04 	lds	r16, 0x0406	; 0x800406 <g_event_start_time>
    2eea:	10 91 07 04 	lds	r17, 0x0407	; 0x800407 <g_event_start_time+0x1>
    2eee:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <g_event_start_time+0x2>
    2ef2:	30 91 09 04 	lds	r19, 0x0409	; 0x800409 <g_event_start_time+0x3>
    2ef6:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <g_event_finish_time>
    2efa:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <g_event_finish_time+0x1>
    2efe:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <g_event_finish_time+0x2>
    2f02:	70 91 0d 04 	lds	r23, 0x040D	; 0x80040d <g_event_finish_time+0x3>
    2f06:	04 17       	cp	r16, r20
    2f08:	15 07       	cpc	r17, r21
    2f0a:	26 07       	cpc	r18, r22
    2f0c:	37 07       	cpc	r19, r23
    2f0e:	08 f0       	brcs	.+2      	; 0x2f12 <activateEventUsingCurrentSettings+0x5c>
    2f10:	51 c1       	rjmp	.+674    	; 0x31b4 <activateEventUsingCurrentSettings+0x2fe>
	{
		return( ERROR_CODE_EVENT_NOT_CONFIGURED);
	}

	if(!g_on_air_seconds)
    2f12:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <g_on_air_seconds>
    2f16:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
    2f1a:	23 2b       	or	r18, r19
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <activateEventUsingCurrentSettings+0x6a>
    2f1e:	4c c1       	rjmp	.+664    	; 0x31b8 <activateEventUsingCurrentSettings+0x302>
	{
		return( ERROR_CODE_EVENT_MISSING_TRANSMIT_DURATION);
	}

	if(g_intra_cycle_delay_time > (g_off_air_seconds + g_on_air_seconds))
    2f20:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <g_off_air_seconds>
    2f24:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <g_off_air_seconds+0x1>
    2f28:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <g_on_air_seconds>
    2f2c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
    2f30:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <g_intra_cycle_delay_time>
    2f34:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <g_intra_cycle_delay_time+0x1>
    2f38:	26 0f       	add	r18, r22
    2f3a:	37 1f       	adc	r19, r23
    2f3c:	24 17       	cp	r18, r20
    2f3e:	35 07       	cpc	r19, r21
    2f40:	0c f4       	brge	.+2      	; 0x2f44 <activateEventUsingCurrentSettings+0x8e>
    2f42:	3c c1       	rjmp	.+632    	; 0x31bc <activateEventUsingCurrentSettings+0x306>
	{
		return( ERROR_CODE_EVENT_TIMING_ERROR);
	}

	if(g_messages_text[PATTERN_TEXT][0] == '\0')
    2f44:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <g_messages_text>
    2f48:	22 23       	and	r18, r18
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <activateEventUsingCurrentSettings+0x98>
    2f4c:	39 c1       	rjmp	.+626    	; 0x31c0 <activateEventUsingCurrentSettings+0x30a>
	{
		return( ERROR_CODE_EVENT_PATTERN_NOT_SPECIFIED);
	}

	if(!g_pattern_codespeed)
    2f4e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <g_pattern_codespeed>
    2f52:	22 23       	and	r18, r18
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <activateEventUsingCurrentSettings+0xa2>
    2f56:	36 c1       	rjmp	.+620    	; 0x31c4 <activateEventUsingCurrentSettings+0x30e>
	{
		return( ERROR_CODE_EVENT_PATTERN_CODE_SPEED_NOT_SPECIFIED);
	}

	if(g_messages_text[STATION_ID][0] != '\0')
    2f58:	8c 01       	movw	r16, r24
    2f5a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <g_messages_text+0x15>
    2f5e:	88 23       	and	r24, r24
	{
		if((!g_id_codespeed || !g_ID_period_seconds))
    2f60:	e9 f0       	breq	.+58     	; 0x2f9c <activateEventUsingCurrentSettings+0xe6>
    2f62:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_id_codespeed>
    2f66:	88 23       	and	r24, r24
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <activateEventUsingCurrentSettings+0xb6>
    2f6a:	2e c1       	rjmp	.+604    	; 0x31c8 <activateEventUsingCurrentSettings+0x312>
    2f6c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_ID_period_seconds>
    2f70:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_ID_period_seconds+0x1>
    2f74:	89 2b       	or	r24, r25
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <activateEventUsingCurrentSettings+0xc4>
		{
			return( ERROR_CODE_EVENT_STATION_ID_ERROR);
		}

		g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    2f78:	29 c1       	rjmp	.+594    	; 0x31cc <activateEventUsingCurrentSettings+0x316>
    2f7a:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <g_id_codespeed>
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	8d ee       	ldi	r24, 0xED	; 237
    2f82:	93 e0       	ldi	r25, 0x03	; 3
    2f84:	08 d5       	rcall	.+2576   	; 0x3996 <timeRequiredToSendStrAtWPM>
    2f86:	8c 50       	subi	r24, 0x0C	; 12
    2f88:	9e 4f       	sbci	r25, 0xFE	; 254
    2f8a:	68 ee       	ldi	r22, 0xE8	; 232
    2f8c:	73 e0       	ldi	r23, 0x03	; 3
    2f8e:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__udivmodhi4>
    2f92:	70 93 03 04 	sts	0x0403, r23	; 0x800403 <g_time_needed_for_ID+0x1>
    2f96:	60 93 02 04 	sts	0x0402, r22	; 0x800402 <g_time_needed_for_ID>
    2f9a:	04 c0       	rjmp	.+8      	; 0x2fa4 <activateEventUsingCurrentSettings+0xee>
	}
	else
	{
		g_time_needed_for_ID = 0;   /* ID will never be sent */
    2f9c:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <g_time_needed_for_ID+0x1>
    2fa0:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <g_time_needed_for_ID>
	}

	time_t now = time(NULL);
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <time>
	if(g_event_finish_time < now)   /* the event has already finished */
    2fac:	c0 90 0a 04 	lds	r12, 0x040A	; 0x80040a <g_event_finish_time>
    2fb0:	d0 90 0b 04 	lds	r13, 0x040B	; 0x80040b <g_event_finish_time+0x1>
    2fb4:	e0 90 0c 04 	lds	r14, 0x040C	; 0x80040c <g_event_finish_time+0x2>
    2fb8:	f0 90 0d 04 	lds	r15, 0x040D	; 0x80040d <g_event_finish_time+0x3>
    2fbc:	c6 16       	cp	r12, r22
    2fbe:	d7 06       	cpc	r13, r23
    2fc0:	e8 06       	cpc	r14, r24
    2fc2:	f9 06       	cpc	r15, r25
    2fc4:	48 f4       	brcc	.+18     	; 0x2fd8 <activateEventUsingCurrentSettings+0x122>
	{
		if(statusCode)
    2fc6:	01 15       	cp	r16, r1
    2fc8:	11 05       	cpc	r17, r1
    2fca:	09 f4       	brne	.+2      	; 0x2fce <activateEventUsingCurrentSettings+0x118>
    2fcc:	01 c1       	rjmp	.+514    	; 0x31d0 <activateEventUsingCurrentSettings+0x31a>
		{
			*statusCode = STATUS_CODE_NO_EVENT_TO_RUN;
    2fce:	8a ef       	ldi	r24, 0xFA	; 250
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	80 83       	st	Z, r24

		g_waiting_for_next_event = FALSE;
		g_update_timeout_seconds = 90;
	}

	return( ERROR_CODE_NO_ERROR);
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	15 c1       	rjmp	.+554    	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
			*statusCode = STATUS_CODE_NO_EVENT_TO_RUN;
		}
	}
	else
	{
		int32_t dif = timeDif(now, g_event_start_time); /* returns arg1 - arg2 */
    2fd8:	20 91 06 04 	lds	r18, 0x0406	; 0x800406 <g_event_start_time>
    2fdc:	30 91 07 04 	lds	r19, 0x0407	; 0x800407 <g_event_start_time+0x1>
    2fe0:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <g_event_start_time+0x2>
    2fe4:	50 91 09 04 	lds	r21, 0x0409	; 0x800409 <g_event_start_time+0x3>
    2fe8:	0e 94 2f 23 	call	0x465e	; 0x465e <timeDif>

		if(dif >= 0)                                    /* start time is in the past */
    2fec:	99 23       	and	r25, r25
    2fee:	0c f4       	brge	.+2      	; 0x2ff2 <activateEventUsingCurrentSettings+0x13c>
    2ff0:	cd c0       	rjmp	.+410    	; 0x318c <activateEventUsingCurrentSettings+0x2d6>
		{
			BOOL turnOnTransmitter = FALSE;
			int cyclePeriod = g_on_air_seconds + g_off_air_seconds;
    2ff2:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <g_on_air_seconds>
    2ff6:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
    2ffa:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <g_off_air_seconds>
    2ffe:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <g_off_air_seconds+0x1>
    3002:	e2 0e       	add	r14, r18
    3004:	f3 1e       	adc	r15, r19
			int secondsIntoCycle = dif % cyclePeriod;
			int timeTillTransmit = g_intra_cycle_delay_time - secondsIntoCycle;
    3006:	c0 90 04 04 	lds	r12, 0x0404	; 0x800404 <g_intra_cycle_delay_time>
    300a:	d0 90 05 04 	lds	r13, 0x0405	; 0x800405 <g_intra_cycle_delay_time+0x1>
    300e:	97 01       	movw	r18, r14
    3010:	0f 2c       	mov	r0, r15
    3012:	00 0c       	add	r0, r0
    3014:	44 0b       	sbc	r20, r20
    3016:	55 0b       	sbc	r21, r21
    3018:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <__divmodsi4>
    301c:	c6 01       	movw	r24, r12
    301e:	86 1b       	sub	r24, r22
    3020:	97 0b       	sbc	r25, r23

			if(timeTillTransmit <= 0)                       /* we should have started transmitting already */
    3022:	18 16       	cp	r1, r24
    3024:	19 06       	cpc	r1, r25
    3026:	0c f4       	brge	.+2      	; 0x302a <activateEventUsingCurrentSettings+0x174>
    3028:	82 c0       	rjmp	.+260    	; 0x312e <activateEventUsingCurrentSettings+0x278>
			{
				if(g_on_air_seconds <= -timeTillTransmit)   /* we should have finished transmitting in this cycle */
    302a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <g_on_air_seconds>
    302e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
    3032:	44 27       	eor	r20, r20
    3034:	55 27       	eor	r21, r21
    3036:	48 1b       	sub	r20, r24
    3038:	59 0b       	sbc	r21, r25
    303a:	42 17       	cp	r20, r18
    303c:	53 07       	cpc	r21, r19
    303e:	a4 f1       	brlt	.+104    	; 0x30a8 <activateEventUsingCurrentSettings+0x1f2>
				{
					g_on_the_air = -(cyclePeriod + timeTillTransmit);
    3040:	8e 0d       	add	r24, r14
    3042:	9f 1d       	adc	r25, r15
    3044:	91 95       	neg	r25
    3046:	81 95       	neg	r24
    3048:	91 09       	sbc	r25, r1
    304a:	09 2e       	mov	r0, r25
    304c:	00 0c       	add	r0, r0
    304e:	aa 0b       	sbc	r26, r26
    3050:	bb 0b       	sbc	r27, r27
    3052:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
    3056:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
    305a:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
    305e:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>
					if(statusCode)
    3062:	01 15       	cp	r16, r1
    3064:	11 05       	cpc	r17, r1
    3066:	19 f0       	breq	.+6      	; 0x306e <activateEventUsingCurrentSettings+0x1b8>
					{
						*statusCode = STATUS_CODE_EVENT_STARTED_WAITING_FOR_TIME_SLOT;
    3068:	8e ef       	ldi	r24, 0xFE	; 254
    306a:	f8 01       	movw	r30, r16
    306c:	80 83       	st	Z, r24
					}

					if(!g_event_enabled)
    306e:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <g_event_enabled>
    3072:	81 11       	cpse	r24, r1
    3074:	c3 c0       	rjmp	.+390    	; 0x31fc <activateEventUsingCurrentSettings+0x346>
					{
						g_sendID_seconds_countdown = (g_on_air_seconds - g_on_the_air) - g_time_needed_for_ID;
    3076:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_on_air_seconds>
    307a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
    307e:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <g_on_the_air>
    3082:	50 91 13 04 	lds	r21, 0x0413	; 0x800413 <g_on_the_air+0x1>
    3086:	60 91 14 04 	lds	r22, 0x0414	; 0x800414 <g_on_the_air+0x2>
    308a:	70 91 15 04 	lds	r23, 0x0415	; 0x800415 <g_on_the_air+0x3>
    308e:	20 91 02 04 	lds	r18, 0x0402	; 0x800402 <g_time_needed_for_ID>
    3092:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <g_time_needed_for_ID+0x1>
    3096:	84 1b       	sub	r24, r20
    3098:	95 0b       	sbc	r25, r21
    309a:	82 1b       	sub	r24, r18
    309c:	93 0b       	sbc	r25, r19
    309e:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <g_sendID_seconds_countdown+0x1>
    30a2:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <g_sendID_seconds_countdown>
    30a6:	aa c0       	rjmp	.+340    	; 0x31fc <activateEventUsingCurrentSettings+0x346>
					}
				}
				else    /* we should be transmitting right now */
				{
					g_on_the_air = g_on_air_seconds + timeTillTransmit;
    30a8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <g_on_air_seconds>
    30ac:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
    30b0:	82 0f       	add	r24, r18
    30b2:	93 1f       	adc	r25, r19
    30b4:	09 2e       	mov	r0, r25
    30b6:	00 0c       	add	r0, r0
    30b8:	aa 0b       	sbc	r26, r26
    30ba:	bb 0b       	sbc	r27, r27
    30bc:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <g_on_the_air>
    30c0:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <g_on_the_air+0x1>
    30c4:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <g_on_the_air+0x2>
    30c8:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <g_on_the_air+0x3>
					turnOnTransmitter = TRUE;
					if(statusCode)
    30cc:	01 15       	cp	r16, r1
    30ce:	11 05       	cpc	r17, r1
    30d0:	19 f0       	breq	.+6      	; 0x30d8 <activateEventUsingCurrentSettings+0x222>
					{
						*statusCode = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    30d2:	8d ef       	ldi	r24, 0xFD	; 253
    30d4:	f8 01       	movw	r30, r16
    30d6:	80 83       	st	Z, r24
					}

					if(!g_event_enabled)
    30d8:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <g_event_enabled>
    30dc:	81 11       	cpse	r24, r1
    30de:	7a c0       	rjmp	.+244    	; 0x31d4 <activateEventUsingCurrentSettings+0x31e>
					{
						if(g_time_needed_for_ID < g_on_the_air)
    30e0:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <g_time_needed_for_ID>
    30e4:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <g_time_needed_for_ID+0x1>
    30e8:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <g_on_the_air>
    30ec:	50 91 13 04 	lds	r21, 0x0413	; 0x800413 <g_on_the_air+0x1>
    30f0:	60 91 14 04 	lds	r22, 0x0414	; 0x800414 <g_on_the_air+0x2>
    30f4:	70 91 15 04 	lds	r23, 0x0415	; 0x800415 <g_on_the_air+0x3>
    30f8:	a0 e0       	ldi	r26, 0x00	; 0
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	84 17       	cp	r24, r20
    30fe:	95 07       	cpc	r25, r21
    3100:	a6 07       	cpc	r26, r22
    3102:	b7 07       	cpc	r27, r23
    3104:	0c f0       	brlt	.+2      	; 0x3108 <activateEventUsingCurrentSettings+0x252>
    3106:	66 c0       	rjmp	.+204    	; 0x31d4 <activateEventUsingCurrentSettings+0x31e>
						{
							g_sendID_seconds_countdown = g_on_the_air - g_time_needed_for_ID;
    3108:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <g_on_the_air>
    310c:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <g_on_the_air+0x1>
    3110:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <g_on_the_air+0x2>
    3114:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <g_on_the_air+0x3>
    3118:	20 91 02 04 	lds	r18, 0x0402	; 0x800402 <g_time_needed_for_ID>
    311c:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <g_time_needed_for_ID+0x1>
    3120:	82 1b       	sub	r24, r18
    3122:	93 0b       	sbc	r25, r19
    3124:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <g_sendID_seconds_countdown+0x1>
    3128:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <g_sendID_seconds_countdown>
    312c:	53 c0       	rjmp	.+166    	; 0x31d4 <activateEventUsingCurrentSettings+0x31e>
					}
				}
			}
			else    /* it is not yet time to transmit in this cycle */
			{
				g_on_the_air = -timeTillTransmit;
    312e:	44 27       	eor	r20, r20
    3130:	55 27       	eor	r21, r21
    3132:	48 1b       	sub	r20, r24
    3134:	59 0b       	sbc	r21, r25
    3136:	05 2e       	mov	r0, r21
    3138:	00 0c       	add	r0, r0
    313a:	66 0b       	sbc	r22, r22
    313c:	77 0b       	sbc	r23, r23
    313e:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <g_on_the_air>
    3142:	50 93 13 04 	sts	0x0413, r21	; 0x800413 <g_on_the_air+0x1>
    3146:	60 93 14 04 	sts	0x0414, r22	; 0x800414 <g_on_the_air+0x2>
    314a:	70 93 15 04 	sts	0x0415, r23	; 0x800415 <g_on_the_air+0x3>
				if(statusCode)
    314e:	01 15       	cp	r16, r1
    3150:	11 05       	cpc	r17, r1
    3152:	19 f0       	breq	.+6      	; 0x315a <activateEventUsingCurrentSettings+0x2a4>
				{
					*statusCode = STATUS_CODE_EVENT_STARTED_WAITING_FOR_TIME_SLOT;
    3154:	2e ef       	ldi	r18, 0xFE	; 254
    3156:	f8 01       	movw	r30, r16
    3158:	20 83       	st	Z, r18
				}

				if(!g_event_enabled)
    315a:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <g_event_enabled>
    315e:	21 11       	cpse	r18, r1
    3160:	4d c0       	rjmp	.+154    	; 0x31fc <activateEventUsingCurrentSettings+0x346>
				{
					g_sendID_seconds_countdown = timeTillTransmit + g_on_air_seconds - g_time_needed_for_ID;
    3162:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <g_on_air_seconds>
    3166:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
    316a:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <g_time_needed_for_ID>
    316e:	50 91 03 04 	lds	r21, 0x0403	; 0x800403 <g_time_needed_for_ID+0x1>
    3172:	82 0f       	add	r24, r18
    3174:	93 1f       	adc	r25, r19
    3176:	84 1b       	sub	r24, r20
    3178:	95 0b       	sbc	r25, r21
    317a:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <g_sendID_seconds_countdown+0x1>
    317e:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <g_sendID_seconds_countdown>
			else
			{
				keyTransmitter(OFF);
			}

			g_event_commenced = TRUE;
    3182:	3c c0       	rjmp	.+120    	; 0x31fc <activateEventUsingCurrentSettings+0x346>
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <g_event_commenced>
		}
		else    /* start time is in the future */
		{
			if(statusCode)
    318a:	08 c0       	rjmp	.+16     	; 0x319c <activateEventUsingCurrentSettings+0x2e6>
    318c:	01 15       	cp	r16, r1
    318e:	11 05       	cpc	r17, r1
			{
				*statusCode = STATUS_CODE_WAITING_FOR_EVENT_START;
    3190:	19 f0       	breq	.+6      	; 0x3198 <activateEventUsingCurrentSettings+0x2e2>
    3192:	8f ef       	ldi	r24, 0xFF	; 255
    3194:	f8 01       	movw	r30, r16
			}
			keyTransmitter(OFF);
    3196:	80 83       	st	Z, r24
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	12 d5       	rcall	.+2596   	; 0x3bc0 <keyTransmitter>
		}

		g_waiting_for_next_event = FALSE;
    319c:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <g_waiting_for_next_event>
		g_update_timeout_seconds = 90;
    31a0:	8a e5       	ldi	r24, 0x5A	; 90
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <g_update_timeout_seconds+0x1>
    31a8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_update_timeout_seconds>
	}

	return( ERROR_CODE_NO_ERROR);
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	29 c0       	rjmp	.+82     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
EC activateEventUsingCurrentSettings(SC* statusCode)
{
	/* Make sure everything has been sanely initialized */
	if(!g_event_start_time)
	{
		return( ERROR_CODE_EVENT_MISSING_START_TIME);
    31b0:	8c ec       	ldi	r24, 0xCC	; 204
    31b2:	27 c0       	rjmp	.+78     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
	}

	if(g_event_start_time >= g_event_finish_time)   /* Finish must be later than start */
	{
		return( ERROR_CODE_EVENT_NOT_CONFIGURED);
    31b4:	8d ec       	ldi	r24, 0xCD	; 205
	}

	if(!g_on_air_seconds)
	{
		return( ERROR_CODE_EVENT_MISSING_TRANSMIT_DURATION);
    31b6:	25 c0       	rjmp	.+74     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
	}

	if(g_intra_cycle_delay_time > (g_off_air_seconds + g_on_air_seconds))
	{
		return( ERROR_CODE_EVENT_TIMING_ERROR);
    31b8:	8b ec       	ldi	r24, 0xCB	; 203
    31ba:	23 c0       	rjmp	.+70     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
	}

	if(g_messages_text[PATTERN_TEXT][0] == '\0')
	{
		return( ERROR_CODE_EVENT_PATTERN_NOT_SPECIFIED);
    31bc:	8a ec       	ldi	r24, 0xCA	; 202
    31be:	21 c0       	rjmp	.+66     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
	}

	if(!g_pattern_codespeed)
	{
		return( ERROR_CODE_EVENT_PATTERN_CODE_SPEED_NOT_SPECIFIED);
    31c0:	89 ec       	ldi	r24, 0xC9	; 201
    31c2:	1f c0       	rjmp	.+62     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>

	if(g_messages_text[STATION_ID][0] != '\0')
	{
		if((!g_id_codespeed || !g_ID_period_seconds))
		{
			return( ERROR_CODE_EVENT_STATION_ID_ERROR);
    31c4:	88 ec       	ldi	r24, 0xC8	; 200
    31c6:	1d c0       	rjmp	.+58     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
    31c8:	87 ec       	ldi	r24, 0xC7	; 199

		g_waiting_for_next_event = FALSE;
		g_update_timeout_seconds = 90;
	}

	return( ERROR_CODE_NO_ERROR);
    31ca:	1b c0       	rjmp	.+54     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
    31cc:	87 ec       	ldi	r24, 0xC7	; 199
				}
			}

			if(turnOnTransmitter)
			{
				cli();
    31ce:	19 c0       	rjmp	.+50     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
				BOOL repeat = TRUE;
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	17 c0       	rjmp	.+46     	; 0x3202 <activateEventUsingCurrentSettings+0x34c>
				makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    31d4:	f8 94       	cli
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	89 83       	std	Y+1, r24	; 0x01
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	50 e0       	ldi	r21, 0x00	; 0
    31de:	be 01       	movw	r22, r28
    31e0:	6f 5f       	subi	r22, 0xFF	; 255
    31e2:	7f 4f       	sbci	r23, 0xFF	; 255
    31e4:	88 ed       	ldi	r24, 0xD8	; 216
				g_code_throttle = throttleValue(g_pattern_codespeed);
    31e6:	93 e0       	ldi	r25, 0x03	; 3
    31e8:	da d2       	rcall	.+1460   	; 0x379e <makeMorse>
    31ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_pattern_codespeed>
    31ee:	95 d1       	rcall	.+810    	; 0x351a <throttleValue>
    31f0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_code_throttle+0x1>
    31f4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_code_throttle>
				sei();
    31f8:	78 94       	sei
			}
			else
			{
				keyTransmitter(OFF);
    31fa:	c4 cf       	rjmp	.-120    	; 0x3184 <activateEventUsingCurrentSettings+0x2ce>
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	e0 d4       	rcall	.+2496   	; 0x3bc0 <keyTransmitter>
    3200:	c1 cf       	rjmp	.-126    	; 0x3184 <activateEventUsingCurrentSettings+0x2ce>
		g_waiting_for_next_event = FALSE;
		g_update_timeout_seconds = 90;
	}

	return( ERROR_CODE_NO_ERROR);
}
    3202:	0f 90       	pop	r0
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	ff 90       	pop	r15
    320e:	ef 90       	pop	r14
    3210:	df 90       	pop	r13
    3212:	cf 90       	pop	r12
    3214:	08 95       	ret

00003216 <initializeEEPROMVars>:

/**********************
**********************/

void initializeEEPROMVars()
{
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
	uint8_t i;

	if(eeprom_read_byte(&ee_interface_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    322a:	89 3c       	cpi	r24, 0xC9	; 201
    322c:	09 f0       	breq	.+2      	; 0x3230 <initializeEEPROMVars+0x1a>
    322e:	7f c0       	rjmp	.+254    	; 0x332e <initializeEEPROMVars+0x118>
	{
		g_event_start_time = eeprom_read_dword((uint32_t*)(&ee_start_time));
    3230:	85 e3       	ldi	r24, 0x35	; 53
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	0e 94 a1 31 	call	0x6342	; 0x6342 <eeprom_read_dword>
    3238:	60 93 06 04 	sts	0x0406, r22	; 0x800406 <g_event_start_time>
    323c:	70 93 07 04 	sts	0x0407, r23	; 0x800407 <g_event_start_time+0x1>
    3240:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <g_event_start_time+0x2>
    3244:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <g_event_start_time+0x3>
		g_event_finish_time = eeprom_read_dword((uint32_t*)(&ee_finish_time));
    3248:	89 e3       	ldi	r24, 0x39	; 57
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	0e 94 a1 31 	call	0x6342	; 0x6342 <eeprom_read_dword>
    3250:	60 93 0a 04 	sts	0x040A, r22	; 0x80040a <g_event_finish_time>
    3254:	70 93 0b 04 	sts	0x040B, r23	; 0x80040b <g_event_finish_time+0x1>
    3258:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <g_event_finish_time+0x2>
    325c:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <g_event_finish_time+0x3>

		g_pattern_codespeed = eeprom_read_byte(&ee_pattern_codespeed);
    3260:	8b e2       	ldi	r24, 0x2B	; 43
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    3268:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_pattern_codespeed>
		g_id_codespeed = eeprom_read_byte(&ee_id_codespeed);
    326c:	8c e2       	ldi	r24, 0x2C	; 44
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    3274:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_id_codespeed>
		g_on_air_seconds = eeprom_read_word(&ee_on_air_time);
    3278:	8d e2       	ldi	r24, 0x2D	; 45
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	0e 94 a6 31 	call	0x634c	; 0x634c <eeprom_read_word>
    3280:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_on_air_seconds+0x1>
    3284:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_on_air_seconds>
		g_off_air_seconds = eeprom_read_word(&ee_off_air_time);
    3288:	8f e2       	ldi	r24, 0x2F	; 47
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 a6 31 	call	0x634c	; 0x634c <eeprom_read_word>
    3290:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <g_off_air_seconds+0x1>
    3294:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_off_air_seconds>
		g_intra_cycle_delay_time = eeprom_read_word(&ee_intra_cycle_delay_time);
    3298:	81 e3       	ldi	r24, 0x31	; 49
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	0e 94 a6 31 	call	0x634c	; 0x634c <eeprom_read_word>
    32a0:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <g_intra_cycle_delay_time+0x1>
    32a4:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <g_intra_cycle_delay_time>
		g_ID_period_seconds = eeprom_read_word(&ee_ID_time);
    32a8:	83 e3       	ldi	r24, 0x33	; 51
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 a6 31 	call	0x634c	; 0x634c <eeprom_read_word>
    32b0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <g_ID_period_seconds+0x1>
    32b4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <g_ID_period_seconds>

		g_battery_empty_mV = eeprom_read_word(&ee_battery_empty_mV);
    32b8:	8d e3       	ldi	r24, 0x3D	; 61
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0e 94 a6 31 	call	0x634c	; 0x634c <eeprom_read_word>
    32c0:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <g_battery_empty_mV+0x1>
    32c4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_battery_empty_mV>

		uint8_t temp = eeprom_read_byte(&ee_clock_OSCCAL);
    32c8:	8f e3       	ldi	r24, 0x3F	; 63
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
		if((temp > 10) && (temp < 240))
    32d0:	95 ef       	ldi	r25, 0xF5	; 245
    32d2:	98 0f       	add	r25, r24
    32d4:	95 3e       	cpi	r25, 0xE5	; 229
    32d6:	08 f0       	brcs	.+2      	; 0x32da <initializeEEPROMVars+0xc4>
    32d8:	79 c0       	rjmp	.+242    	; 0x33cc <initializeEEPROMVars+0x1b6>
		{
			OSCCAL = temp;
    32da:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
			g_OSCCAL_inhibit = TRUE;    /* flag to prevent recalibration */
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <g_OSCCAL_inhibit>
    32e4:	73 c0       	rjmp	.+230    	; 0x33cc <initializeEEPROMVars+0x1b6>
		}

		for(i = 0; i < 20; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    32e6:	c8 01       	movw	r24, r16
    32e8:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    32ec:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
    32ee:	81 11       	cpse	r24, r1
    32f0:	0b c0       	rjmp	.+22     	; 0x3308 <initializeEEPROMVars+0xf2>
    32f2:	06 e1       	ldi	r16, 0x16	; 22
    32f4:	10 e0       	ldi	r17, 0x00	; 0
    32f6:	c8 ed       	ldi	r28, 0xD8	; 216
    32f8:	d3 e0       	ldi	r29, 0x03	; 3
    32fa:	0f 2e       	mov	r0, r31
    32fc:	fc ee       	ldi	r31, 0xEC	; 236
    32fe:	ef 2e       	mov	r14, r31
    3300:	f3 e0       	ldi	r31, 0x03	; 3
    3302:	ff 2e       	mov	r15, r31
    3304:	f0 2d       	mov	r31, r0
    3306:	06 c0       	rjmp	.+12     	; 0x3314 <initializeEEPROMVars+0xfe>
    3308:	0f 5f       	subi	r16, 0xFF	; 255
    330a:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			OSCCAL = temp;
			g_OSCCAL_inhibit = TRUE;    /* flag to prevent recalibration */
		}

		for(i = 0; i < 20; i++)
    330c:	ce 15       	cp	r28, r14
    330e:	df 05       	cpc	r29, r15
    3310:	51 f7       	brne	.-44     	; 0x32e6 <initializeEEPROMVars+0xd0>
    3312:	ef cf       	rjmp	.-34     	; 0x32f2 <initializeEEPROMVars+0xdc>
			}
		}

		for(i = 0; i < 20; i++)
		{
			g_messages_text[PATTERN_TEXT][i] = (char)eeprom_read_byte((uint8_t*)(&ee_pattern_text[i]));
    3314:	c8 01       	movw	r24, r16
    3316:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    331a:	89 93       	st	Y+, r24
			if(!g_messages_text[PATTERN_TEXT][i])
    331c:	88 23       	and	r24, r24
    331e:	09 f4       	brne	.+2      	; 0x3322 <initializeEEPROMVars+0x10c>
    3320:	60 c0       	rjmp	.+192    	; 0x33e2 <initializeEEPROMVars+0x1cc>
    3322:	0f 5f       	subi	r16, 0xFF	; 255
    3324:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < 20; i++)
    3326:	ce 15       	cp	r28, r14
    3328:	df 05       	cpc	r29, r15
    332a:	a1 f7       	brne	.-24     	; 0x3314 <initializeEEPROMVars+0xfe>
    332c:	5a c0       	rjmp	.+180    	; 0x33e2 <initializeEEPROMVars+0x1cc>
			}
		}
	}
	else
	{
		g_event_start_time = EEPROM_START_TIME_DEFAULT;
    332e:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <g_event_start_time>
    3332:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <g_event_start_time+0x1>
    3336:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <g_event_start_time+0x2>
    333a:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <g_event_start_time+0x3>
		g_event_finish_time = EEPROM_FINISH_TIME_DEFAULT;
    333e:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <g_event_finish_time>
    3342:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <g_event_finish_time+0x1>
    3346:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <g_event_finish_time+0x2>
    334a:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <g_event_finish_time+0x3>

		g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    334e:	84 e1       	ldi	r24, 0x14	; 20
    3350:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_id_codespeed>
		g_pattern_codespeed = EEPROM_PATTERN_CODE_SPEED_DEFAULT;
    3354:	88 e0       	ldi	r24, 0x08	; 8
    3356:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_pattern_codespeed>
		g_on_air_seconds = EEPROM_ON_AIR_TIME_DEFAULT;
    335a:	8c e3       	ldi	r24, 0x3C	; 60
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_on_air_seconds+0x1>
    3362:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_on_air_seconds>
		g_off_air_seconds = EEPROM_OFF_AIR_TIME_DEFAULT;
    3366:	80 ef       	ldi	r24, 0xF0	; 240
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <g_off_air_seconds+0x1>
    336e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_off_air_seconds>
		g_intra_cycle_delay_time = EEPROM_INTRA_CYCLE_DELAY_TIME_DEFAULT;
    3372:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <g_intra_cycle_delay_time+0x1>
    3376:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <g_intra_cycle_delay_time>
		g_ID_period_seconds = EEPROM_ID_TIME_INTERVAL_DEFAULT;
    337a:	8c e2       	ldi	r24, 0x2C	; 44
    337c:	91 e0       	ldi	r25, 0x01	; 1
    337e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <g_ID_period_seconds+0x1>
    3382:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <g_ID_period_seconds>

		g_battery_empty_mV = EEPROM_BATTERY_EMPTY_MV;
    3386:	86 e6       	ldi	r24, 0x66	; 102
    3388:	9d e0       	ldi	r25, 0x0D	; 13
    338a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <g_battery_empty_mV+0x1>
    338e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_battery_empty_mV>
		eeprom_update_byte(&ee_clock_OSCCAL, 0xFF); /* erase any existing value */
    3392:	6f ef       	ldi	r22, 0xFF	; 255
    3394:	8f e3       	ldi	r24, 0x3F	; 63
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>

		strncpy(g_messages_text[STATION_ID], EEPROM_STATION_ID_DEFAULT, MAX_PATTERN_TEXT_LENGTH);
    339c:	44 e1       	ldi	r20, 0x14	; 20
    339e:	50 e0       	ldi	r21, 0x00	; 0
    33a0:	60 eb       	ldi	r22, 0xB0	; 176
    33a2:	71 e0       	ldi	r23, 0x01	; 1
    33a4:	8d ee       	ldi	r24, 0xED	; 237
    33a6:	93 e0       	ldi	r25, 0x03	; 3
    33a8:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <strncpy>
		strncpy(g_messages_text[PATTERN_TEXT], EEPROM_PATTERN_TEXT_DEFAULT, MAX_PATTERN_TEXT_LENGTH);
    33ac:	44 e1       	ldi	r20, 0x14	; 20
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	67 eb       	ldi	r22, 0xB7	; 183
    33b2:	71 e0       	ldi	r23, 0x01	; 1
    33b4:	88 ed       	ldi	r24, 0xD8	; 216
    33b6:	93 e0       	ldi	r25, 0x03	; 3
    33b8:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <strncpy>

		saveAllEEPROM();
    33bc:	19 d0       	rcall	.+50     	; 0x33f0 <saveAllEEPROM>
		eeprom_write_byte(&ee_interface_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    33be:	69 ec       	ldi	r22, 0xC9	; 201
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <eeprom_write_byte>
		wdt_reset();    /* HW watchdog */
    33c8:	a8 95       	wdr
	}
}
    33ca:	0b c0       	rjmp	.+22     	; 0x33e2 <initializeEEPROMVars+0x1cc>
    33cc:	01 e0       	ldi	r16, 0x01	; 1
    33ce:	10 e0       	ldi	r17, 0x00	; 0
    33d0:	cd ee       	ldi	r28, 0xED	; 237
    33d2:	d3 e0       	ldi	r29, 0x03	; 3
    33d4:	0f 2e       	mov	r0, r31
    33d6:	f1 e0       	ldi	r31, 0x01	; 1
    33d8:	ef 2e       	mov	r14, r31
    33da:	f4 e0       	ldi	r31, 0x04	; 4
    33dc:	ff 2e       	mov	r15, r31
    33de:	f0 2d       	mov	r31, r0
    33e0:	82 cf       	rjmp	.-252    	; 0x32e6 <initializeEEPROMVars+0xd0>
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	1f 91       	pop	r17
    33e8:	0f 91       	pop	r16
    33ea:	ff 90       	pop	r15
    33ec:	ef 90       	pop	r14
    33ee:	08 95       	ret

000033f0 <saveAllEEPROM>:

void saveAllEEPROM()
{
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	cf 93       	push	r28
	uint8_t i;

	wdt_reset();    /* HW watchdog */
    33f6:	a8 95       	wdr

	eeprom_update_dword((uint32_t*)&ee_start_time, g_event_start_time);
    33f8:	40 91 06 04 	lds	r20, 0x0406	; 0x800406 <g_event_start_time>
    33fc:	50 91 07 04 	lds	r21, 0x0407	; 0x800407 <g_event_start_time+0x1>
    3400:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <g_event_start_time+0x2>
    3404:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <g_event_start_time+0x3>
    3408:	85 e3       	ldi	r24, 0x35	; 53
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	0e 94 bd 31 	call	0x637a	; 0x637a <eeprom_update_dword>
	eeprom_update_dword((uint32_t*)&ee_finish_time, g_event_finish_time);
    3410:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <g_event_finish_time>
    3414:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <g_event_finish_time+0x1>
    3418:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <g_event_finish_time+0x2>
    341c:	70 91 0d 04 	lds	r23, 0x040D	; 0x80040d <g_event_finish_time+0x3>
    3420:	89 e3       	ldi	r24, 0x39	; 57
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	0e 94 bd 31 	call	0x637a	; 0x637a <eeprom_update_dword>

	eeprom_update_byte(&ee_id_codespeed, g_id_codespeed);
    3428:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <g_id_codespeed>
    342c:	8c e2       	ldi	r24, 0x2C	; 44
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
	eeprom_update_byte(&ee_pattern_codespeed, g_pattern_codespeed);
    3434:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <g_pattern_codespeed>
    3438:	8b e2       	ldi	r24, 0x2B	; 43
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
	eeprom_update_word(&ee_on_air_time, g_on_air_seconds);
    3440:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <g_on_air_seconds>
    3444:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <g_on_air_seconds+0x1>
    3448:	8d e2       	ldi	r24, 0x2D	; 45
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	0e 94 c5 31 	call	0x638a	; 0x638a <eeprom_update_word>
	eeprom_update_word(&ee_off_air_time, g_off_air_seconds);
    3450:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <g_off_air_seconds>
    3454:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <g_off_air_seconds+0x1>
    3458:	8f e2       	ldi	r24, 0x2F	; 47
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	0e 94 c5 31 	call	0x638a	; 0x638a <eeprom_update_word>
	eeprom_update_word(&ee_intra_cycle_delay_time, g_intra_cycle_delay_time);
    3460:	60 91 04 04 	lds	r22, 0x0404	; 0x800404 <g_intra_cycle_delay_time>
    3464:	70 91 05 04 	lds	r23, 0x0405	; 0x800405 <g_intra_cycle_delay_time+0x1>
    3468:	81 e3       	ldi	r24, 0x31	; 49
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	0e 94 c5 31 	call	0x638a	; 0x638a <eeprom_update_word>
	eeprom_update_word(&ee_ID_time, g_ID_period_seconds);
    3470:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <g_ID_period_seconds>
    3474:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <g_ID_period_seconds+0x1>
    3478:	83 e3       	ldi	r24, 0x33	; 51
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 c5 31 	call	0x638a	; 0x638a <eeprom_update_word>

	eeprom_update_word(&ee_battery_empty_mV, g_battery_empty_mV);
    3480:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_battery_empty_mV>
    3484:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <g_battery_empty_mV+0x1>
    3488:	8d e3       	ldi	r24, 0x3D	; 61
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 c5 31 	call	0x638a	; 0x638a <eeprom_update_word>

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    3490:	c0 e0       	ldi	r28, 0x00	; 0
    3492:	0d ee       	ldi	r16, 0xED	; 237
    3494:	13 e0       	ldi	r17, 0x03	; 3
    3496:	0b c0       	rjmp	.+22     	; 0x34ae <saveAllEEPROM+0xbe>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
    3498:	8c 2f       	mov	r24, r28
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	fc 01       	movw	r30, r24
    349e:	e8 52       	subi	r30, 0x28	; 40
    34a0:	fc 4f       	sbci	r31, 0xFC	; 252
    34a2:	65 89       	ldd	r22, Z+21	; 0x15
    34a4:	8f 5f       	subi	r24, 0xFF	; 255
    34a6:	9f 4f       	sbci	r25, 0xFF	; 255
    34a8:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
	eeprom_update_word(&ee_intra_cycle_delay_time, g_intra_cycle_delay_time);
	eeprom_update_word(&ee_ID_time, g_ID_period_seconds);

	eeprom_update_word(&ee_battery_empty_mV, g_battery_empty_mV);

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    34ac:	cf 5f       	subi	r28, 0xFF	; 255
    34ae:	f8 01       	movw	r30, r16
    34b0:	01 90       	ld	r0, Z+
    34b2:	00 20       	and	r0, r0
    34b4:	e9 f7       	brne	.-6      	; 0x34b0 <saveAllEEPROM+0xc0>
    34b6:	cf 01       	movw	r24, r30
    34b8:	8e 5e       	subi	r24, 0xEE	; 238
    34ba:	93 40       	sbci	r25, 0x03	; 3
    34bc:	2c 2f       	mov	r18, r28
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	28 17       	cp	r18, r24
    34c2:	39 07       	cpc	r19, r25
    34c4:	48 f3       	brcs	.-46     	; 0x3498 <saveAllEEPROM+0xa8>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
	}

	eeprom_update_byte((uint8_t*)&ee_stationID_text[i], 0);
    34c6:	c9 01       	movw	r24, r18
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	9f 4f       	sbci	r25, 0xFF	; 255
    34ce:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>

	for(i = 0; i < strlen(g_messages_text[PATTERN_TEXT]); i++)
    34d2:	c0 e0       	ldi	r28, 0x00	; 0
    34d4:	08 ed       	ldi	r16, 0xD8	; 216
    34d6:	13 e0       	ldi	r17, 0x03	; 3
    34d8:	0b c0       	rjmp	.+22     	; 0x34f0 <saveAllEEPROM+0x100>
	{
		eeprom_update_byte((uint8_t*)&ee_pattern_text[i], (uint8_t)g_messages_text[PATTERN_TEXT][i]);
    34da:	8c 2f       	mov	r24, r28
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	fc 01       	movw	r30, r24
    34e0:	e8 52       	subi	r30, 0x28	; 40
    34e2:	fc 4f       	sbci	r31, 0xFC	; 252
    34e4:	60 81       	ld	r22, Z
    34e6:	8a 5e       	subi	r24, 0xEA	; 234
    34e8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ea:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
	}

	eeprom_update_byte((uint8_t*)&ee_stationID_text[i], 0);

	for(i = 0; i < strlen(g_messages_text[PATTERN_TEXT]); i++)
    34ee:	cf 5f       	subi	r28, 0xFF	; 255
    34f0:	f8 01       	movw	r30, r16
    34f2:	01 90       	ld	r0, Z+
    34f4:	00 20       	and	r0, r0
    34f6:	e9 f7       	brne	.-6      	; 0x34f2 <saveAllEEPROM+0x102>
    34f8:	31 97       	sbiw	r30, 0x01	; 1
    34fa:	e8 5d       	subi	r30, 0xD8	; 216
    34fc:	f3 40       	sbci	r31, 0x03	; 3
    34fe:	8c 2f       	mov	r24, r28
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	8e 17       	cp	r24, r30
    3504:	9f 07       	cpc	r25, r31
    3506:	48 f3       	brcs	.-46     	; 0x34da <saveAllEEPROM+0xea>
	{
		eeprom_update_byte((uint8_t*)&ee_pattern_text[i], (uint8_t)g_messages_text[PATTERN_TEXT][i]);
	}

	eeprom_update_byte((uint8_t*)&ee_pattern_text[i], 0);
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	8a 5e       	subi	r24, 0xEA	; 234
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
}
    3512:	cf 91       	pop	r28
    3514:	1f 91       	pop	r17
    3516:	0f 91       	pop	r16
    3518:	08 95       	ret

0000351a <throttleValue>:

uint16_t throttleValue(uint8_t speed)
{
    351a:	cf 93       	push	r28
    351c:	df 93       	push	r29
    351e:	28 2f       	mov	r18, r24
	uint16_t temp = 0x0C / OCR2A;
    3520:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    3524:	70 e0       	ldi	r23, 0x00	; 0
    3526:	8c e0       	ldi	r24, 0x0C	; 12
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divmodhi4>
    352e:	eb 01       	movw	r28, r22

	speed = CLAMP(5, (int8_t)speed, 20);
    3530:	25 31       	cpi	r18, 0x15	; 21
    3532:	4c f4       	brge	.+18     	; 0x3546 <throttleValue+0x2c>
    3534:	02 2e       	mov	r0, r18
    3536:	00 0c       	add	r0, r0
    3538:	33 0b       	sbc	r19, r19
    353a:	25 30       	cpi	r18, 0x05	; 5
    353c:	31 05       	cpc	r19, r1
    353e:	2c f4       	brge	.+10     	; 0x354a <throttleValue+0x30>
    3540:	25 e0       	ldi	r18, 0x05	; 5
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	02 c0       	rjmp	.+4      	; 0x354a <throttleValue+0x30>
    3546:	24 e1       	ldi	r18, 0x14	; 20
    3548:	30 e0       	ldi	r19, 0x00	; 0
	temp *= (7042L / (uint16_t)speed) / 10L;
	return( temp);
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e0       	ldi	r20, 0x00	; 0
    354e:	50 e0       	ldi	r21, 0x00	; 0
    3550:	62 e8       	ldi	r22, 0x82	; 130
    3552:	7b e1       	ldi	r23, 0x1B	; 27
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <__divmodsi4>
    355c:	ca 01       	movw	r24, r20
    355e:	b9 01       	movw	r22, r18
    3560:	2a e0       	ldi	r18, 0x0A	; 10
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	40 e0       	ldi	r20, 0x00	; 0
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <__divmodsi4>
    356c:	c2 9f       	mul	r28, r18
    356e:	c0 01       	movw	r24, r0
    3570:	c3 9f       	mul	r28, r19
    3572:	90 0d       	add	r25, r0
    3574:	d2 9f       	mul	r29, r18
}
    3576:	90 0d       	add	r25, r0
    3578:	11 24       	eor	r1, r1
    357a:	df 91       	pop	r29

BOOL antennaIsConnected(void)
{
	return( !(PIND & (1 << PORTD3)));
    357c:	cf 91       	pop	r28
    357e:	08 95       	ret

00003580 <antennaIsConnected>:
    3580:	89 b1       	in	r24, 0x09	; 9
    3582:	83 fb       	bst	r24, 3
/*	return !(PIND & (1 << PORTD4) || (1 << PORTD5)); */
}
    3584:	88 27       	eor	r24, r24
    3586:	80 f9       	bld	r24, 0
    3588:	91 e0       	ldi	r25, 0x01	; 1

void initializeAllEventSettings(BOOL disableEvent)
{
	if(disableEvent)
    358a:	89 27       	eor	r24, r25
    358c:	08 95       	ret

0000358e <initializeAllEventSettings>:
	{
		cli();
    358e:	88 23       	and	r24, r24
		g_event_enabled = FALSE;    /* enabled by event time settings - not stored */
    3590:	81 f0       	breq	.+32     	; 0x35b2 <initializeAllEventSettings+0x24>
    3592:	f8 94       	cli
		g_event_commenced = FALSE;  /* commences when starttime is reached - not stored */
    3594:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <g_event_enabled>
		g_on_the_air = 0;           /* turn off any ongoing transmission - not stored */
    3598:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <g_event_commenced>
    359c:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <g_on_the_air>
    35a0:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <g_on_the_air+0x1>
    35a4:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <g_on_the_air+0x2>
		sei();
    35a8:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <g_on_the_air+0x3>
		keyTransmitter(OFF);        /* turn off the transmit signal */
    35ac:	78 94       	sei
    35ae:	80 e0       	ldi	r24, 0x00	; 0
	}

	initializeEEPROMVars();
    35b0:	07 d3       	rcall	.+1550   	; 0x3bc0 <keyTransmitter>
    35b2:	31 de       	rcall	.-926    	; 0x3216 <initializeEEPROMVars>
	initializeTransmitterEEPROMVars();
    35b4:	22 c5       	rjmp	.+2628   	; 0x3ffa <initializeTransmitterEEPROMVars>
    35b6:	08 95       	ret

000035b8 <getMorseChar>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	fc 01       	movw	r30, r24
    35bc:	b0 97       	sbiw	r30, 0x20	; 32
    35be:	ed 35       	cpi	r30, 0x5D	; 93
    35c0:	f1 05       	cpc	r31, r1
    35c2:	08 f0       	brcs	.+2      	; 0x35c6 <getMorseChar+0xe>
    35c4:	e4 c0       	rjmp	.+456    	; 0x378e <getMorseChar+0x1d6>
    35c6:	ec 5c       	subi	r30, 0xCC	; 204
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	0c 94 56 2e 	jmp	0x5cac	; 0x5cac <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    35ce:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    35d0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    35d2:	61 e0       	ldi	r22, 0x01	; 1
    35d4:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    35d6:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    35d8:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    35da:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    35dc:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    35de:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    35e0:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    35e2:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    35e4:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    35e6:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    35e8:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    35ea:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    35ec:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    35ee:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    35f0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    35f2:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    35f4:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    35f6:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    35f8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    35fa:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    35fc:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    35fe:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    3600:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3602:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    3604:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    3606:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    3608:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    360a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    360c:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    360e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    3610:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    3612:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    3614:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    3616:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    3618:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    361a:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    361c:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    361e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    3620:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    3622:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    3624:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    3626:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    3628:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    362a:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    362c:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    362e:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    3630:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3632:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    3634:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    3636:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    3638:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    363a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    363c:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    363e:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    3640:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    3642:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3644:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    3646:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    3648:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    364a:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    364c:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    364e:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    3650:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    3652:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    3654:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    3656:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    3658:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    365a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    365c:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    365e:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    3660:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3662:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    3664:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    3666:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    3668:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    366a:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    366c:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    366e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    3670:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    3672:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    3674:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    3676:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    3678:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    367a:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    367c:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    367e:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    3680:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    3682:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3684:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    3686:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    3688:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    368a:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    368c:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    368e:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    3690:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3692:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3694:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    3696:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    3698:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    369a:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    369c:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    369e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    36a0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    36a2:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    36a4:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    36a6:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    36a8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    36aa:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    36ac:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    36ae:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    36b0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    36b2:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    36b4:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    36b6:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    36b8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    36ba:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    36bc:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    36be:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    36c0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    36c2:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    36c4:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    36c6:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    36c8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    36ca:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    36cc:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    36ce:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    36d0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    36d2:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    36d4:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    36d6:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    36d8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    36da:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    36dc:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    36de:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    36e0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    36e2:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    36e4:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    36e6:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    36e8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    36ea:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    36ec:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    36ee:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    36f0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    36f2:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    36f4:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    36f6:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    36f8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    36fa:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    36fc:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    36fe:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    3700:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    3702:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    3704:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    3706:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    3708:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    370a:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    370c:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    370e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    3710:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    3712:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    3714:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    3716:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    3718:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    371a:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    371c:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    371e:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    3720:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    3722:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    3724:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    3726:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    3728:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    372a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    372c:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    372e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    3730:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    3732:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    3734:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    3736:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    3738:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    373a:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    373c:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    373e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    3740:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    3742:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    3744:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    3746:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    3748:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    374a:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    374c:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    374e:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    3750:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    3752:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    3754:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    3756:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    3758:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    375a:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    375c:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    375e:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    3760:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    3762:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    3764:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    3766:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    3768:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    376a:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    376c:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    376e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    3770:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    3772:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    3774:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    3776:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    3778:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    377a:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    377c:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    377e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    3780:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    3782:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    3784:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    3786:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    3788:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    378a:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    378c:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    378e:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    3790:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    3792:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    3794:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    3796:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    3798:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    379a:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    379c:	08 95       	ret

0000379e <makeMorse>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29
    37a2:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	a9 f1       	breq	.+106    	; 0x3812 <makeMorse+0x74>
	{
		holdKeyDown = FALSE;
    37a8:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <holdKeyDown.1912>

		if(repeating)
    37ac:	61 15       	cp	r22, r1
    37ae:	71 05       	cpc	r23, r1
    37b0:	21 f0       	breq	.+8      	; 0x37ba <makeMorse+0x1c>
		{
			repeat = *repeating;
    37b2:	db 01       	movw	r26, r22
    37b4:	2c 91       	ld	r18, X
    37b6:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <repeat.1904>
		}

		if(*s)
    37ba:	fc 01       	movw	r30, r24
    37bc:	20 81       	ld	r18, Z
    37be:	22 23       	and	r18, r18
    37c0:	d1 f0       	breq	.+52     	; 0x37f6 <makeMorse+0x58>
		{
			str = s;
    37c2:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <str.1902+0x1>
    37c6:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <str.1902>
			c = ' ';
    37ca:	80 e2       	ldi	r24, 0x20	; 32
    37cc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <c.1903>
			morseInProgress = getMorseChar(*str);
    37d0:	82 2f       	mov	r24, r18
    37d2:	f2 de       	rcall	.-540    	; 0x35b8 <getMorseChar>
    37d4:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <morseInProgress.1905>
    37d8:	70 93 64 04 	sts	0x0464, r23	; 0x800464 <morseInProgress.1905+0x1>
    37dc:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <morseInProgress.1905+0x2>
			charIndex = 0;
    37e0:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <charIndex.1906>
			symbolIndex = 0;
    37e4:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <symbolIndex.1907>
			elementIndex = 0;
    37e8:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <elementIndex.1908>
			addedSpace = 0;
    37ec:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <addedSpace.1909>
			completedString = FALSE;
    37f0:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <completedString.1910>
    37f4:	0a c0       	rjmp	.+20     	; 0x380a <makeMorse+0x6c>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    37f6:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <str.1902+0x1>
    37fa:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <str.1902>
			completedString = TRUE;
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <completedString.1910>
			if(finished)
    3804:	20 97       	sbiw	r28, 0x00	; 0
    3806:	09 f0       	breq	.+2      	; 0x380a <makeMorse+0x6c>
			{
				*finished = TRUE;
    3808:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    380a:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <carrierOn.1911>
		return( OFF);
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	bf c0       	rjmp	.+382    	; 0x3990 <makeMorse+0x1f2>
	}
	else if(str)
    3812:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <str.1902>
    3816:	f0 91 67 04 	lds	r31, 0x0467	; 0x800467 <str.1902+0x1>
    381a:	30 97       	sbiw	r30, 0x00	; 0
    381c:	09 f4       	brne	.+2      	; 0x3820 <makeMorse+0x82>
    381e:	a9 c0       	rjmp	.+338    	; 0x3972 <makeMorse+0x1d4>
	{
		if(repeating)
    3820:	61 15       	cp	r22, r1
    3822:	71 05       	cpc	r23, r1
    3824:	21 f0       	breq	.+8      	; 0x382e <makeMorse+0x90>
		{
			*repeating = repeat;
    3826:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <repeat.1904>
    382a:	db 01       	movw	r26, r22
    382c:	8c 93       	st	X, r24
		}

		if(completedString)
    382e:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <completedString.1910>
    3832:	88 23       	and	r24, r24
    3834:	49 f0       	breq	.+18     	; 0x3848 <makeMorse+0xaa>
		{
			if(finished)
    3836:	20 97       	sbiw	r28, 0x00	; 0
    3838:	09 f4       	brne	.+2      	; 0x383c <makeMorse+0x9e>
    383a:	a7 c0       	rjmp	.+334    	; 0x398a <makeMorse+0x1ec>
			{
				*finished = TRUE;
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    3840:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <holdKeyDown.1912>
			}
			return( OFF);
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	a4 c0       	rjmp	.+328    	; 0x3990 <makeMorse+0x1f2>
		}

		if(elementIndex)
    3848:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <elementIndex.1908>
    384c:	88 23       	and	r24, r24
    384e:	21 f0       	breq	.+8      	; 0x3858 <makeMorse+0xba>
		{
			elementIndex--;
    3850:	81 50       	subi	r24, 0x01	; 1
    3852:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <elementIndex.1908>
    3856:	7e c0       	rjmp	.+252    	; 0x3954 <makeMorse+0x1b6>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    3858:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <carrierOn.1911>
    385c:	88 23       	and	r24, r24
    385e:	81 f0       	breq	.+32     	; 0x3880 <makeMorse+0xe2>
    3860:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <holdKeyDown.1912>
    3864:	81 11       	cpse	r24, r1
    3866:	0c c0       	rjmp	.+24     	; 0x3880 <makeMorse+0xe2>
		{
			carrierOn = FALSE;
    3868:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <carrierOn.1911>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    386c:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <addedSpace.1909>
    3870:	88 23       	and	r24, r24
    3872:	09 f4       	brne	.+2      	; 0x3876 <makeMorse+0xd8>
    3874:	6f c0       	rjmp	.+222    	; 0x3954 <makeMorse+0x1b6>
			{
				elementIndex = addedSpace;
    3876:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <elementIndex.1908>
				addedSpace = 0;
    387a:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <addedSpace.1909>
    387e:	6a c0       	rjmp	.+212    	; 0x3954 <makeMorse+0x1b6>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    3880:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <morseInProgress.1905+0x1>
    3884:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <symbolIndex.1907>
    3888:	89 17       	cp	r24, r25
    388a:	88 f1       	brcs	.+98     	; 0x38ee <makeMorse+0x150>
			{
				c = (*(str + ++charIndex));
    388c:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <charIndex.1906>
    3890:	8f 5f       	subi	r24, 0xFF	; 255
    3892:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <charIndex.1906>
    3896:	df 01       	movw	r26, r30
    3898:	a8 0f       	add	r26, r24
    389a:	b1 1d       	adc	r27, r1
    389c:	8c 91       	ld	r24, X
    389e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <c.1903>

				if(!c)  /* wrap to beginning of text */
    38a2:	81 11       	cpse	r24, r1
    38a4:	19 c0       	rjmp	.+50     	; 0x38d8 <makeMorse+0x13a>
				{
					if(repeat)
    38a6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <repeat.1904>
    38aa:	88 23       	and	r24, r24
    38ac:	31 f0       	breq	.+12     	; 0x38ba <makeMorse+0x11c>
					{
						c = *str;
    38ae:	80 81       	ld	r24, Z
    38b0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <c.1903>
						charIndex = 0;
    38b4:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <charIndex.1906>
    38b8:	0f c0       	rjmp	.+30     	; 0x38d8 <makeMorse+0x13a>
					}
					else
					{
						str = NULL;
    38ba:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <str.1902+0x1>
    38be:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <str.1902>
						carrierOn = OFF;
    38c2:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <carrierOn.1911>
						completedString = TRUE;
    38c6:	91 e0       	ldi	r25, 0x01	; 1
    38c8:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <completedString.1910>
						if(finished)
    38cc:	20 97       	sbiw	r28, 0x00	; 0
    38ce:	09 f0       	breq	.+2      	; 0x38d2 <makeMorse+0x134>
						{
							*finished = TRUE;
    38d0:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    38d2:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <holdKeyDown.1912>
						return( OFF );
    38d6:	5c c0       	rjmp	.+184    	; 0x3990 <makeMorse+0x1f2>
					}
				}

				morseInProgress = getMorseChar(c);
    38d8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <c.1903>
    38dc:	6d de       	rcall	.-806    	; 0x35b8 <getMorseChar>
    38de:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <morseInProgress.1905>
    38e2:	70 93 64 04 	sts	0x0464, r23	; 0x800464 <morseInProgress.1905+0x1>
    38e6:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <morseInProgress.1905+0x2>
				symbolIndex = 0;
    38ea:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <symbolIndex.1907>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    38ee:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <morseInProgress.1905>
    38f2:	2d 3f       	cpi	r18, 0xFD	; 253
    38f4:	00 f5       	brcc	.+64     	; 0x3936 <makeMorse+0x198>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    38f6:	40 91 61 04 	lds	r20, 0x0461	; 0x800461 <symbolIndex.1907>
    38fa:	31 e0       	ldi	r19, 0x01	; 1
    38fc:	34 0f       	add	r19, r20
    38fe:	30 93 61 04 	sts	0x0461, r19	; 0x800461 <symbolIndex.1907>

				if(isDah)
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	02 c0       	rjmp	.+4      	; 0x390c <makeMorse+0x16e>
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	4a 95       	dec	r20
    390e:	e2 f7       	brpl	.-8      	; 0x3908 <makeMorse+0x16a>
    3910:	82 23       	and	r24, r18
    3912:	21 f0       	breq	.+8      	; 0x391c <makeMorse+0x17e>
				{
					elementIndex = 2;
    3914:	82 e0       	ldi	r24, 0x02	; 2
    3916:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <elementIndex.1908>
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <makeMorse+0x182>
				}
				else
				{
					elementIndex = 0;
    391c:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <elementIndex.1908>
				}

				carrierOn = TRUE;
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <carrierOn.1911>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    3926:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <morseInProgress.1905+0x1>
    392a:	38 17       	cp	r19, r24
    392c:	98 f0       	brcs	.+38     	; 0x3954 <makeMorse+0x1b6>
				{
					addedSpace = 2;
    392e:	82 e0       	ldi	r24, 0x02	; 2
    3930:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <addedSpace.1909>
    3934:	0f c0       	rjmp	.+30     	; 0x3954 <makeMorse+0x1b6>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    3936:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <morseInProgress.1905+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    393a:	9f ef       	ldi	r25, 0xFF	; 255
    393c:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <symbolIndex.1907>
				carrierOn = FALSE;
    3940:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <carrierOn.1911>
				if(sym >= 4 )
    3944:	84 30       	cpi	r24, 0x04	; 4
    3946:	20 f0       	brcs	.+8      	; 0x3950 <makeMorse+0x1b2>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    3948:	84 50       	subi	r24, 0x04	; 4
    394a:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <elementIndex.1908>
    394e:	02 c0       	rjmp	.+4      	; 0x3954 <makeMorse+0x1b6>
				}
				else
				{
					elementIndex = 0;
    3950:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <elementIndex.1908>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    3954:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <c.1903>
    3958:	8c 33       	cpi	r24, 0x3C	; 60
    395a:	31 f4       	brne	.+12     	; 0x3968 <makeMorse+0x1ca>
		{
			holdKeyDown = TRUE;
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <holdKeyDown.1912>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    3962:	20 97       	sbiw	r28, 0x00	; 0
    3964:	41 f4       	brne	.+16     	; 0x3976 <makeMorse+0x1d8>
    3966:	14 c0       	rjmp	.+40     	; 0x3990 <makeMorse+0x1f2>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    3968:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <holdKeyDown.1912>
		}
	}

	if(finished)
    396c:	20 97       	sbiw	r28, 0x00	; 0
    396e:	19 f4       	brne	.+6      	; 0x3976 <makeMorse+0x1d8>
    3970:	09 c0       	rjmp	.+18     	; 0x3984 <makeMorse+0x1e6>
    3972:	20 97       	sbiw	r28, 0x00	; 0
    3974:	19 f0       	breq	.+6      	; 0x397c <makeMorse+0x1de>
	{
		*finished = completedString;
    3976:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <completedString.1910>
    397a:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    397c:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <holdKeyDown.1912>
    3980:	81 11       	cpse	r24, r1
    3982:	05 c0       	rjmp	.+10     	; 0x398e <makeMorse+0x1f0>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    3984:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <carrierOn.1911>
    3988:	03 c0       	rjmp	.+6      	; 0x3990 <makeMorse+0x1f2>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	01 c0       	rjmp	.+2      	; 0x3990 <makeMorse+0x1f2>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    398e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	08 95       	ret

00003996 <timeRequiredToSendStrAtWPM>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    3996:	cf 92       	push	r12
    3998:	df 92       	push	r13
    399a:	ef 92       	push	r14
    399c:	ff 92       	push	r15
    399e:	0f 93       	push	r16
    39a0:	1f 93       	push	r17
    39a2:	cf 93       	push	r28
    39a4:	fc 01       	movw	r30, r24
    39a6:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    39a8:	80 81       	ld	r24, Z
		if(!c)
    39aa:	88 23       	and	r24, r24
    39ac:	b9 f0       	breq	.+46     	; 0x39dc <timeRequiredToSendStrAtWPM+0x46>
    39ae:	8f 01       	movw	r16, r30
    39b0:	0f 5f       	subi	r16, 0xFF	; 255
    39b2:	1f 4f       	sbci	r17, 0xFF	; 255
    39b4:	7f 01       	movw	r14, r30
    39b6:	94 e1       	ldi	r25, 0x14	; 20
    39b8:	e9 0e       	add	r14, r25
    39ba:	f1 1c       	adc	r15, r1
    39bc:	c0 e0       	ldi	r28, 0x00	; 0
    39be:	05 c0       	rjmp	.+10     	; 0x39ca <timeRequiredToSendStrAtWPM+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    39c0:	f8 01       	movw	r30, r16
    39c2:	81 91       	ld	r24, Z+
    39c4:	8f 01       	movw	r16, r30
		if(!c)
    39c6:	88 23       	and	r24, r24
		{
			break;
		}
		m = getMorseChar(c);
    39c8:	51 f0       	breq	.+20     	; 0x39de <timeRequiredToSendStrAtWPM+0x48>
    39ca:	f6 dd       	rcall	.-1044   	; 0x35b8 <getMorseChar>
		if(m.pattern < INTER_WORD_SPACE)
    39cc:	6d 3f       	cpi	r22, 0xFD	; 253
    39ce:	08 f4       	brcc	.+2      	; 0x39d2 <timeRequiredToSendStrAtWPM+0x3c>
		{
			elements += 3;
    39d0:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    39d2:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    39d4:	0e 15       	cp	r16, r14
    39d6:	1f 05       	cpc	r17, r15
    39d8:	99 f7       	brne	.-26     	; 0x39c0 <timeRequiredToSendStrAtWPM+0x2a>
    39da:	01 c0       	rjmp	.+2      	; 0x39de <timeRequiredToSendStrAtWPM+0x48>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    39dc:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    39de:	80 eb       	ldi	r24, 0xB0	; 176
    39e0:	94 e0       	ldi	r25, 0x04	; 4
    39e2:	b6 01       	movw	r22, r12
    39e4:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__udivmodhi4>
}
    39e8:	c6 9f       	mul	r28, r22
    39ea:	c0 01       	movw	r24, r0
    39ec:	c7 9f       	mul	r28, r23
    39ee:	90 0d       	add	r25, r0
    39f0:	11 24       	eor	r1, r1
    39f2:	cf 91       	pop	r28
    39f4:	1f 91       	pop	r17
    39f6:	0f 91       	pop	r16
    39f8:	ff 90       	pop	r15
    39fa:	ef 90       	pop	r14
    39fc:	df 90       	pop	r13
    39fe:	cf 90       	pop	r12
    3a00:	08 95       	ret

00003a02 <txSetFrequency>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
    3a02:	1f 93       	push	r17
    3a04:	cf 93       	push	r28
    3a06:	df 93       	push	r29
    3a08:	ec 01       	movw	r28, r24
    3a0a:	16 2f       	mov	r17, r22
		BOOL activeBandSet = FALSE;
		RadioBand bandSet = BAND_INVALID;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    3a0c:	88 81       	ld	r24, Y
    3a0e:	99 81       	ldd	r25, Y+1	; 0x01
    3a10:	aa 81       	ldd	r26, Y+2	; 0x02
    3a12:	bb 81       	ldd	r27, Y+3	; 0x03
    3a14:	ac 01       	movw	r20, r24
    3a16:	bd 01       	movw	r22, r26
    3a18:	41 5e       	subi	r20, 0xE1	; 225
    3a1a:	57 46       	sbci	r21, 0x67	; 103
    3a1c:	65 43       	sbci	r22, 0x35	; 53
    3a1e:	71 09       	sbc	r23, r1
    3a20:	4f 31       	cpi	r20, 0x1F	; 31
    3a22:	5a 4a       	sbci	r21, 0xAA	; 170
    3a24:	64 44       	sbci	r22, 0x44	; 68
    3a26:	71 05       	cpc	r23, r1
    3a28:	70 f4       	brcc	.+28     	; 0x3a46 <txSetFrequency+0x44>
		{
			g_80m_frequency = *freq;
    3a2a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <g_80m_frequency>
    3a2e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <g_80m_frequency+0x1>
    3a32:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <g_80m_frequency+0x2>
    3a36:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <g_80m_frequency+0x3>

		if(bandSet == BAND_INVALID)
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
		}
		else if(g_activeBand == bandSet)
    3a3a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3a3e:	81 30       	cpi	r24, 0x01	; 1
    3a40:	89 f1       	breq	.+98     	; 0x3aa4 <txSetFrequency+0xa2>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
		BOOL activeBandSet = FALSE;
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	40 c0       	rjmp	.+128    	; 0x3ac6 <txSetFrequency+0xc4>
		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
		{
			g_80m_frequency = *freq;
			bandSet = BAND_80M;
		}
		else if((*freq < TX_MAXIMUM_2M_FREQUENCY) && (*freq > TX_MINIMUM_2M_FREQUENCY)) /* 2m */
    3a46:	ac 01       	movw	r20, r24
    3a48:	bd 01       	movw	r22, r26
    3a4a:	41 50       	subi	r20, 0x01	; 1
    3a4c:	54 44       	sbci	r21, 0x44	; 68
    3a4e:	65 49       	sbci	r22, 0x95	; 149
    3a50:	78 40       	sbci	r23, 0x08	; 8
    3a52:	4f 3f       	cpi	r20, 0xFF	; 255
    3a54:	58 40       	sbci	r21, 0x08	; 8
    3a56:	6d 43       	sbci	r22, 0x3D	; 61
    3a58:	71 05       	cpc	r23, r1
    3a5a:	80 f5       	brcc	.+96     	; 0x3abc <txSetFrequency+0xba>
		{
			g_2m_frequency = *freq;
    3a5c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <g_2m_frequency>
    3a60:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <g_2m_frequency+0x1>
    3a64:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <g_2m_frequency+0x2>
    3a68:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <g_2m_frequency+0x3>

		if(bandSet == BAND_INVALID)
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
		}
		else if(g_activeBand == bandSet)
    3a6c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3a70:	81 11       	cpse	r24, r1
    3a72:	22 c0       	rjmp	.+68     	; 0x3ab8 <txSetFrequency+0xb6>
		{
			if(bandSet == BAND_2M)
			{
				si5351_set_freq(*freq, TX_CLOCK_VHF, leaveClockOff);
    3a74:	68 81       	ld	r22, Y
    3a76:	79 81       	ldd	r23, Y+1	; 0x01
    3a78:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7c:	21 2f       	mov	r18, r17
    3a7e:	40 e0       	ldi	r20, 0x00	; 0
    3a80:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <si5351_set_freq>
				si5351_set_freq(*freq + 10000, TX_CLOCK_VHF_FM, leaveClockOff);
    3a84:	88 81       	ld	r24, Y
    3a86:	99 81       	ldd	r25, Y+1	; 0x01
    3a88:	aa 81       	ldd	r26, Y+2	; 0x02
    3a8a:	bb 81       	ldd	r27, Y+3	; 0x03
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	60 5f       	subi	r22, 0xF0	; 240
    3a92:	78 4d       	sbci	r23, 0xD8	; 216
    3a94:	8f 4f       	sbci	r24, 0xFF	; 255
    3a96:	9f 4f       	sbci	r25, 0xFF	; 255
    3a98:	21 2f       	mov	r18, r17
    3a9a:	42 e0       	ldi	r20, 0x02	; 2
    3a9c:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <si5351_set_freq>
			else
			{
				si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff);
			}

			activeBandSet = TRUE;
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	11 c0       	rjmp	.+34     	; 0x3ac6 <txSetFrequency+0xc4>
				si5351_set_freq(*freq, TX_CLOCK_VHF, leaveClockOff);
				si5351_set_freq(*freq + 10000, TX_CLOCK_VHF_FM, leaveClockOff);
			}
			else
			{
				si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff);
    3aa4:	68 81       	ld	r22, Y
    3aa6:	79 81       	ldd	r23, Y+1	; 0x01
    3aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    3aac:	21 2f       	mov	r18, r17
    3aae:	41 e0       	ldi	r20, 0x01	; 1
    3ab0:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <si5351_set_freq>
			}

			activeBandSet = TRUE;
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	07 c0       	rjmp	.+14     	; 0x3ac6 <txSetFrequency+0xc4>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
		BOOL activeBandSet = FALSE;
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	05 c0       	rjmp	.+10     	; 0x3ac6 <txSetFrequency+0xc4>
			bandSet = BAND_2M;
		}

		if(bandSet == BAND_INVALID)
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
    3abc:	18 82       	st	Y, r1
    3abe:	19 82       	std	Y+1, r1	; 0x01
    3ac0:	1a 82       	std	Y+2, r1	; 0x02
    3ac2:	1b 82       	std	Y+3, r1	; 0x03
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
		BOOL activeBandSet = FALSE;
    3ac4:	80 e0       	ldi	r24, 0x00	; 0

			activeBandSet = TRUE;
		}

		return( activeBandSet);
	}
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	1f 91       	pop	r17
    3acc:	08 95       	ret

00003ace <txGetFrequency>:

	Frequency_Hz txGetFrequency(void)
	{
		if(g_tx_initialized)
    3ace:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <g_tx_initialized>
    3ad2:	88 23       	and	r24, r24
    3ad4:	d1 f0       	breq	.+52     	; 0x3b0a <txGetFrequency+0x3c>
		{
			if(g_activeBand == BAND_2M)
    3ad6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3ada:	81 11       	cpse	r24, r1
    3adc:	09 c0       	rjmp	.+18     	; 0x3af0 <txGetFrequency+0x22>
			{
				return( g_2m_frequency);
    3ade:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <g_2m_frequency>
    3ae2:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <g_2m_frequency+0x1>
    3ae6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <g_2m_frequency+0x2>
    3aea:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <g_2m_frequency+0x3>
    3aee:	08 95       	ret
			}
			else if(g_activeBand == BAND_80M)
    3af0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3af4:	81 30       	cpi	r24, 0x01	; 1
    3af6:	69 f4       	brne	.+26     	; 0x3b12 <txGetFrequency+0x44>
			{
				return( g_80m_frequency);
    3af8:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <g_80m_frequency>
    3afc:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <g_80m_frequency+0x1>
    3b00:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_80m_frequency+0x2>
    3b04:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <g_80m_frequency+0x3>
    3b08:	08 95       	ret
			}
		}

		return( FREQUENCY_NOT_SPECIFIED);
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	70 e0       	ldi	r23, 0x00	; 0
    3b0e:	cb 01       	movw	r24, r22
    3b10:	08 95       	ret
    3b12:	60 e0       	ldi	r22, 0x00	; 0
    3b14:	70 e0       	ldi	r23, 0x00	; 0
    3b16:	cb 01       	movw	r24, r22
	}
    3b18:	08 95       	ret

00003b1a <txSet2mModulationGlobals>:

	void txSet2mModulationGlobals(uint8_t *high, uint8_t *low)
	{
		if(g_activeBand != BAND_2M)
    3b1a:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <g_activeBand>
    3b1e:	21 11       	cpse	r18, r1
    3b20:	21 c0       	rjmp	.+66     	; 0x3b64 <txSet2mModulationGlobals+0x4a>
		{
			return;
		}

		if(high)
    3b22:	00 97       	sbiw	r24, 0x00	; 0
    3b24:	71 f0       	breq	.+28     	; 0x3b42 <txSet2mModulationGlobals+0x28>
		{
			g_am_drive_level_high = MIN(*high, MAX_2M_AM_DRIVE_LEVEL);
    3b26:	fc 01       	movw	r30, r24
    3b28:	80 81       	ld	r24, Z
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	85 3b       	cpi	r24, 0xB5	; 181
    3b2e:	91 05       	cpc	r25, r1
    3b30:	14 f0       	brlt	.+4      	; 0x3b36 <txSet2mModulationGlobals+0x1c>
    3b32:	84 eb       	ldi	r24, 0xB4	; 180
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <g_am_drive_level_high>
/*			g_cw_drive_level = MIN(*high, MAX_2M_AM_DRIVE_LEVEL); */
			g_mod_up = g_am_drive_level_high;
    3b3a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <g_am_drive_level_high>
    3b3e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_mod_up>
		}

		if(low)
    3b42:	61 15       	cp	r22, r1
    3b44:	71 05       	cpc	r23, r1
    3b46:	71 f0       	breq	.+28     	; 0x3b64 <txSet2mModulationGlobals+0x4a>
		{
			g_am_drive_level_low = MIN(*low, MAX_2M_AM_DRIVE_LEVEL);
    3b48:	fb 01       	movw	r30, r22
    3b4a:	80 81       	ld	r24, Z
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	85 3b       	cpi	r24, 0xB5	; 181
    3b50:	91 05       	cpc	r25, r1
    3b52:	14 f0       	brlt	.+4      	; 0x3b58 <txSet2mModulationGlobals+0x3e>
    3b54:	84 eb       	ldi	r24, 0xB4	; 180
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <g_am_drive_level_low>
			g_mod_down = g_am_drive_level_low;
    3b5c:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <g_am_drive_level_low>
    3b60:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <g_mod_down>
    3b64:	08 95       	ret

00003b66 <txGetBand>:
	}


	RadioBand txGetBand(void)
	{
		return(g_activeBand);
    3b66:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
	}
    3b6a:	08 95       	ret

00003b6c <powerToTransmitter>:

	EC powerToTransmitter(BOOL on)
	{
    3b6c:	cf 93       	push	r28
		EC result = ERROR_CODE_NO_ERROR;

		if(on)
    3b6e:	88 23       	and	r24, r24
    3b70:	61 f0       	breq	.+24     	; 0x3b8a <powerToTransmitter+0x1e>
		{
			if(g_activeBand == BAND_80M)
    3b72:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3b76:	81 30       	cpi	r24, 0x01	; 1
    3b78:	21 f4       	brne	.+8      	; 0x3b82 <powerToTransmitter+0x16>
			{
				PORTB &= ~(1 << PORTB0);    /* Turn VHF off */
    3b7a:	28 98       	cbi	0x05, 0	; 5
				PORTB |= (1 << PORTB1);     /* Turn HF on */
    3b7c:	29 9a       	sbi	0x05, 1	; 5
		return(g_activeBand);
	}

	EC powerToTransmitter(BOOL on)
	{
		EC result = ERROR_CODE_NO_ERROR;
    3b7e:	c0 e0       	ldi	r28, 0x00	; 0
    3b80:	1c c0       	rjmp	.+56     	; 0x3bba <powerToTransmitter+0x4e>
				PORTB &= ~(1 << PORTB0);    /* Turn VHF off */
				PORTB |= (1 << PORTB1);     /* Turn HF on */
			}
			else
			{
				PORTB &= ~(1 << PORTB1);    /* Turn HF off */
    3b82:	29 98       	cbi	0x05, 1	; 5
				PORTB |= (1 << PORTB0);     /* Turn VHF on */
    3b84:	28 9a       	sbi	0x05, 0	; 5
		return(g_activeBand);
	}

	EC powerToTransmitter(BOOL on)
	{
		EC result = ERROR_CODE_NO_ERROR;
    3b86:	c0 e0       	ldi	r28, 0x00	; 0
    3b88:	18 c0       	rjmp	.+48     	; 0x3bba <powerToTransmitter+0x4e>
			}
		}
		else
		{
			BOOL err;
			PORTB &= ~(1 << PORTB1);  /* Turn off 80m band */
    3b8a:	29 98       	cbi	0x05, 1	; 5

			if(g_activeBand == BAND_2M)
    3b8c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3b90:	81 11       	cpse	r24, r1
    3b92:	09 c0       	rjmp	.+18     	; 0x3ba6 <powerToTransmitter+0x3a>
			{
				err = mcp4552_set_pot(0, BIAS_POT);
    3b94:	68 e5       	ldi	r22, 0x58	; 88
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <mcp4552_set_pot>
				if(err)
    3b9e:	88 23       	and	r24, r24
    3ba0:	21 f0       	breq	.+8      	; 0x3baa <powerToTransmitter+0x3e>
				{
					result = ERROR_CODE_DAC2_NONRESPONSIVE;
    3ba2:	ce ef       	ldi	r28, 0xFE	; 254
    3ba4:	03 c0       	rjmp	.+6      	; 0x3bac <powerToTransmitter+0x40>
		return(g_activeBand);
	}

	EC powerToTransmitter(BOOL on)
	{
		EC result = ERROR_CODE_NO_ERROR;
    3ba6:	c0 e0       	ldi	r28, 0x00	; 0
    3ba8:	01 c0       	rjmp	.+2      	; 0x3bac <powerToTransmitter+0x40>
    3baa:	c0 e0       	ldi	r28, 0x00	; 0
				{
					result = ERROR_CODE_DAC2_NONRESPONSIVE;
				}
			}

			PORTB &= ~(1 << PORTB0);
    3bac:	28 98       	cbi	0x05, 0	; 5

			err = dac081c_set_dac(0, PA_DAC);
    3bae:	68 e1       	ldi	r22, 0x18	; 24
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <dac081c_set_dac>
			if(err)
    3bb6:	81 11       	cpse	r24, r1
			{
				result = ERROR_CODE_DAC1_NONRESPONSIVE;
    3bb8:	cf ef       	ldi	r28, 0xFF	; 255
			}
		}

		return(result);
	}
    3bba:	8c 2f       	mov	r24, r28
    3bbc:	cf 91       	pop	r28
    3bbe:	08 95       	ret

00003bc0 <keyTransmitter>:

	void keyTransmitter(BOOL on)
	{
		if(on)
    3bc0:	88 23       	and	r24, r24
    3bc2:	c1 f0       	breq	.+48     	; 0x3bf4 <keyTransmitter+0x34>
		{
			if(!g_transmitter_keyed)
    3bc4:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <g_transmitter_keyed>
    3bc8:	81 11       	cpse	r24, r1
    3bca:	26 c0       	rjmp	.+76     	; 0x3c18 <keyTransmitter+0x58>
			{
				if(g_activeBand == BAND_80M)
    3bcc:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3bd0:	81 30       	cpi	r24, 0x01	; 1
    3bd2:	21 f4       	brne	.+8      	; 0x3bdc <keyTransmitter+0x1c>
				{
					si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED);
    3bd4:	61 e0       	ldi	r22, 0x01	; 1
    3bd6:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <si5351_clock_enable>
    3bda:	08 c0       	rjmp	.+16     	; 0x3bec <keyTransmitter+0x2c>
				}
				else
				{
					si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_ENABLED);
    3bdc:	61 e0       	ldi	r22, 0x01	; 1
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <si5351_clock_enable>
					si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_ENABLED);
    3be4:	61 e0       	ldi	r22, 0x01	; 1
    3be6:	82 e0       	ldi	r24, 0x02	; 2
    3be8:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <si5351_clock_enable>
				}

				g_transmitter_keyed = TRUE;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <g_transmitter_keyed>
    3bf2:	08 95       	ret
			}
		}
		else
		{
			if(g_activeBand == BAND_80M)
    3bf4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3bf8:	81 30       	cpi	r24, 0x01	; 1
    3bfa:	21 f4       	brne	.+8      	; 0x3c04 <keyTransmitter+0x44>
			{
				si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    3bfc:	60 e0       	ldi	r22, 0x00	; 0
    3bfe:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <si5351_clock_enable>
    3c02:	08 c0       	rjmp	.+16     	; 0x3c14 <keyTransmitter+0x54>
			}
			else
			{
				si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_DISABLED);
    3c04:	60 e0       	ldi	r22, 0x00	; 0
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <si5351_clock_enable>
				si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED);
    3c0c:	60 e0       	ldi	r22, 0x00	; 0
    3c0e:	82 e0       	ldi	r24, 0x02	; 2
    3c10:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <si5351_clock_enable>
			}

			g_transmitter_keyed = FALSE;
    3c14:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <g_transmitter_keyed>
    3c18:	08 95       	ret

00003c1a <txSetParameters>:
		}
	}

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, RadioBand* band, Modulation* modulationType, BOOL* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, RadioBand* band, Modulation* modulationType, BOOL* enableDriverPwr) */
	{
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
    3c22:	64 97       	sbiw	r28, 0x14	; 20
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	f8 94       	cli
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	cd bf       	out	0x3d, r28	; 61
    3c2e:	9e 87       	std	Y+14, r25	; 0x0e
    3c30:	8d 87       	std	Y+13, r24	; 0x0d
    3c32:	78 8b       	std	Y+16, r23	; 0x10
    3c34:	6f 87       	std	Y+15, r22	; 0x0f
    3c36:	5a 8b       	std	Y+18, r21	; 0x12
    3c38:	49 8b       	std	Y+17, r20	; 0x11
    3c3a:	3c 8b       	std	Y+20, r19	; 0x14
    3c3c:	2b 8b       	std	Y+19, r18	; 0x13
		BOOL err = FALSE;
    3c3e:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    3c40:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    3c42:	1d 82       	std	Y+5, r1	; 0x05
    3c44:	1c 82       	std	Y+4, r1	; 0x04
		Modulation modulation = MODE_INVALID;
    3c46:	83 e0       	ldi	r24, 0x03	; 3
    3c48:	8b 83       	std	Y+3, r24	; 0x03

		if(power_mW)
    3c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c4e:	89 2b       	or	r24, r25
    3c50:	39 f0       	breq	.+14     	; 0x3c60 <txSetParameters+0x46>
		{
			power = *power_mW;
    3c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c56:	fc 01       	movw	r30, r24
    3c58:	80 81       	ld	r24, Z
    3c5a:	91 81       	ldd	r25, Z+1	; 0x01
    3c5c:	9d 83       	std	Y+5, r25	; 0x05
    3c5e:	8c 83       	std	Y+4, r24	; 0x04
		}

		if(band != NULL)
    3c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c62:	98 89       	ldd	r25, Y+16	; 0x10
    3c64:	89 2b       	or	r24, r25
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <txSetParameters+0x50>
    3c68:	4f c0       	rjmp	.+158    	; 0x3d08 <txSetParameters+0xee>
		{
			/* Handle Band Setting */
			if(g_activeBand != *band)
    3c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c6c:	98 89       	ldd	r25, Y+16	; 0x10
    3c6e:	fc 01       	movw	r30, r24
    3c70:	90 81       	ld	r25, Z
    3c72:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3c76:	98 17       	cp	r25, r24
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <txSetParameters+0x62>
    3c7a:	46 c0       	rjmp	.+140    	; 0x3d08 <txSetParameters+0xee>
			{
				keyTransmitter(OFF);
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	a0 df       	rcall	.-192    	; 0x3bc0 <keyTransmitter>
				powerToTransmitter(OFF);
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	74 df       	rcall	.-280    	; 0x3b6c <powerToTransmitter>
				g_activeBand = *band;
    3c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c86:	98 89       	ldd	r25, Y+16	; 0x10
    3c88:	fc 01       	movw	r30, r24
    3c8a:	80 81       	ld	r24, Z
    3c8c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <g_activeBand>

				Frequency_Hz f = FREQUENCY_NOT_SPECIFIED;
    3c90:	1e 82       	std	Y+6, r1	; 0x06
    3c92:	1f 82       	std	Y+7, r1	; 0x07
    3c94:	18 86       	std	Y+8, r1	; 0x08
    3c96:	19 86       	std	Y+9, r1	; 0x09

				if(g_activeBand == BAND_2M)
    3c98:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3c9c:	88 23       	and	r24, r24
    3c9e:	f1 f4       	brne	.+60     	; 0x3cdc <txSetParameters+0xc2>
				{
					f = g_2m_frequency;
    3ca0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <g_2m_frequency>
    3ca4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <g_2m_frequency+0x1>
    3ca8:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <g_2m_frequency+0x2>
    3cac:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <g_2m_frequency+0x3>
    3cb0:	8e 83       	std	Y+6, r24	; 0x06
    3cb2:	9f 83       	std	Y+7, r25	; 0x07
    3cb4:	a8 87       	std	Y+8, r26	; 0x08
    3cb6:	b9 87       	std	Y+9, r27	; 0x09

					if(power_mW == NULL)
    3cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cbc:	89 2b       	or	r24, r25
    3cbe:	31 f4       	brne	.+12     	; 0x3ccc <txSetParameters+0xb2>
					{
						power = g_2m_power_level_mW;
    3cc0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_2m_power_level_mW>
    3cc4:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_2m_power_level_mW+0x1>
    3cc8:	9d 83       	std	Y+5, r25	; 0x05
    3cca:	8c 83       	std	Y+4, r24	; 0x04
					}

					if(modulationType == NULL)
    3ccc:	89 89       	ldd	r24, Y+17	; 0x11
    3cce:	9a 89       	ldd	r25, Y+18	; 0x12
    3cd0:	89 2b       	or	r24, r25
    3cd2:	b1 f4       	brne	.+44     	; 0x3d00 <txSetParameters+0xe6>
					{
						modulation = g_2m_modulationFormat;
    3cd4:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <g_2m_modulationFormat>
    3cd8:	8b 83       	std	Y+3, r24	; 0x03
    3cda:	12 c0       	rjmp	.+36     	; 0x3d00 <txSetParameters+0xe6>
					}
				}
				else if (g_activeBand == BAND_80M)
    3cdc:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3ce0:	81 30       	cpi	r24, 0x01	; 1
    3ce2:	71 f4       	brne	.+28     	; 0x3d00 <txSetParameters+0xe6>
				{
					f = g_80m_frequency;
    3ce4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_80m_frequency>
    3ce8:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <g_80m_frequency+0x1>
    3cec:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <g_80m_frequency+0x2>
    3cf0:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <g_80m_frequency+0x3>
    3cf4:	8e 83       	std	Y+6, r24	; 0x06
    3cf6:	9f 83       	std	Y+7, r25	; 0x07
    3cf8:	a8 87       	std	Y+8, r26	; 0x08
    3cfa:	b9 87       	std	Y+9, r27	; 0x09
					modulation = MODE_CW;
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	8b 83       	std	Y+3, r24	; 0x03
				}

				txSetFrequency(&f, TRUE);
    3d00:	ce 01       	movw	r24, r28
    3d02:	06 96       	adiw	r24, 0x06	; 6
    3d04:	61 e0       	ldi	r22, 0x01	; 1
    3d06:	7d de       	rcall	.-774    	; 0x3a02 <txSetFrequency>
			}
		}

		if(modulationType != NULL)
    3d08:	89 89       	ldd	r24, Y+17	; 0x11
    3d0a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d0c:	89 2b       	or	r24, r25
    3d0e:	19 f1       	breq	.+70     	; 0x3d56 <txSetParameters+0x13c>
		{
			if(g_activeBand	== BAND_2M)
    3d10:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3d14:	88 23       	and	r24, r24
    3d16:	99 f4       	brne	.+38     	; 0x3d3e <txSetParameters+0x124>
			{
				modulation = *modulationType;
    3d18:	89 89       	ldd	r24, Y+17	; 0x11
    3d1a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	80 81       	ld	r24, Z
    3d20:	8b 83       	std	Y+3, r24	; 0x03
				g_2m_modulationFormat = modulation;
    3d22:	8b 81       	ldd	r24, Y+3	; 0x03
    3d24:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <g_2m_modulationFormat>

				if(power_mW == NULL)
    3d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d2c:	89 2b       	or	r24, r25
    3d2e:	99 f4       	brne	.+38     	; 0x3d56 <txSetParameters+0x13c>
				{
					power = g_2m_power_level_mW;
    3d30:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_2m_power_level_mW>
    3d34:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_2m_power_level_mW+0x1>
    3d38:	9d 83       	std	Y+5, r25	; 0x05
    3d3a:	8c 83       	std	Y+4, r24	; 0x04
    3d3c:	0c c0       	rjmp	.+24     	; 0x3d56 <txSetParameters+0x13c>
				}
			}
			else
			{
				modulation = MODE_CW;
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	8b 83       	std	Y+3, r24	; 0x03
				if(power_mW == NULL)
    3d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d46:	89 2b       	or	r24, r25
    3d48:	31 f4       	brne	.+12     	; 0x3d56 <txSetParameters+0x13c>
				{
					power = g_80m_power_level_mW;
    3d4a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <g_80m_power_level_mW>
    3d4e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <g_80m_power_level_mW+0x1>
    3d52:	9d 83       	std	Y+5, r25	; 0x05
    3d54:	8c 83       	std	Y+4, r24	; 0x04
				}
			}
		}

		if(power_mW != NULL)
    3d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d5a:	89 2b       	or	r24, r25
    3d5c:	09 f4       	brne	.+2      	; 0x3d60 <txSetParameters+0x146>
    3d5e:	b9 c0       	rjmp	.+370    	; 0x3ed2 <txSetParameters+0x2b8>
		{
			if(power <= MAX_TX_POWER_80M_MW)
    3d60:	8c 81       	ldd	r24, Y+4	; 0x04
    3d62:	9d 81       	ldd	r25, Y+5	; 0x05
    3d64:	89 38       	cpi	r24, 0x89	; 137
    3d66:	93 41       	sbci	r25, 0x13	; 19
    3d68:	08 f0       	brcs	.+2      	; 0x3d6c <txSetParameters+0x152>
    3d6a:	af c0       	rjmp	.+350    	; 0x3eca <txSetParameters+0x2b0>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    3d6c:	9e 01       	movw	r18, r28
    3d6e:	24 5f       	subi	r18, 0xF4	; 244
    3d70:	3f 4f       	sbci	r19, 0xFF	; 255
    3d72:	ae 01       	movw	r20, r28
    3d74:	45 5f       	subi	r20, 0xF5	; 245
    3d76:	5f 4f       	sbci	r21, 0xFF	; 255
    3d78:	be 01       	movw	r22, r28
    3d7a:	66 5f       	subi	r22, 0xF6	; 246
    3d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7e:	ce 01       	movw	r24, r28
    3d80:	04 96       	adiw	r24, 0x04	; 4
    3d82:	03 d3       	rcall	.+1542   	; 0x438a <txMilliwattsToSettings>
    3d84:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8a:	9f 3c       	cpi	r25, 0xCF	; 207
    3d8c:	09 f0       	breq	.+2      	; 0x3d90 <txSetParameters+0x176>
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    3d92:	8c 81       	ldd	r24, Y+4	; 0x04
    3d94:	9d 81       	ldd	r25, Y+5	; 0x05
    3d96:	21 e0       	ldi	r18, 0x01	; 1
    3d98:	89 2b       	or	r24, r25
    3d9a:	09 f0       	breq	.+2      	; 0x3d9e <txSetParameters+0x184>
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	82 2f       	mov	r24, r18
    3da0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <g_tx_power_is_zero>

				if(!err)
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	88 23       	and	r24, r24
    3da8:	09 f0       	breq	.+2      	; 0x3dac <txSetParameters+0x192>
    3daa:	87 c0       	rjmp	.+270    	; 0x3eba <txSetParameters+0x2a0>
				{
					if(g_activeBand == BAND_2M)
    3dac:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>
    3db0:	88 23       	and	r24, r24
    3db2:	09 f0       	breq	.+2      	; 0x3db6 <txSetParameters+0x19c>
					{
						powerToTransmitter(ON);
    3db4:	4b c0       	rjmp	.+150    	; 0x3e4c <txSetParameters+0x232>
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	d9 de       	rcall	.-590    	; 0x3b6c <powerToTransmitter>
						txSet2mModulationGlobals(&modLevelHigh, &modLevelLow);
    3dba:	9e 01       	movw	r18, r28
    3dbc:	24 5f       	subi	r18, 0xF4	; 244
    3dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc0:	ce 01       	movw	r24, r28
    3dc2:	0b 96       	adiw	r24, 0x0b	; 11
    3dc4:	b9 01       	movw	r22, r18
    3dc6:	a9 de       	rcall	.-686    	; 0x3b1a <txSet2mModulationGlobals>
						g_2m_power_level_mW = power;
    3dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dca:	9d 81       	ldd	r25, Y+5	; 0x05
    3dcc:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <g_2m_power_level_mW+0x1>
    3dd0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_2m_power_level_mW>

						if(txIsAntennaForBand())
    3dd4:	13 d4       	rcall	.+2086   	; 0x45fc <txIsAntennaForBand>
    3dd6:	88 23       	and	r24, r24
    3dd8:	a1 f0       	breq	.+40     	; 0x3e02 <txSetParameters+0x1e8>
						{
							err = dac081c_set_dac(drainVoltageDAC, PA_DAC);
    3dda:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ddc:	68 e1       	ldi	r22, 0x18	; 24
    3dde:	f0 d7       	rcall	.+4064   	; 0x4dc0 <dac081c_set_dac>
    3de0:	89 83       	std	Y+1, r24	; 0x01
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
							if(err)
    3de4:	88 23       	and	r24, r24
    3de6:	19 f0       	breq	.+6      	; 0x3dee <txSetParameters+0x1d4>
							{
								code = ERROR_CODE_DAC1_NONRESPONSIVE;
    3de8:	8f ef       	ldi	r24, 0xFF	; 255
    3dea:	8a 83       	std	Y+2, r24	; 0x02
    3dec:	11 c0       	rjmp	.+34     	; 0x3e10 <txSetParameters+0x1f6>
							}
							else
							{
								code = txSet2mGateBias(modLevelLow);
    3dee:	8c 85       	ldd	r24, Y+12	; 0x0c
    3df0:	86 d0       	rcall	.+268    	; 0x3efe <txSet2mGateBias>
    3df2:	8a 83       	std	Y+2, r24	; 0x02
    3df4:	81 e0       	ldi	r24, 0x01	; 1
								err = (code != ERROR_CODE_NO_ERROR);
    3df6:	9a 81       	ldd	r25, Y+2	; 0x02
    3df8:	99 23       	and	r25, r25
    3dfa:	09 f4       	brne	.+2      	; 0x3dfe <txSetParameters+0x1e4>
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	89 83       	std	Y+1, r24	; 0x01
    3e00:	07 c0       	rjmp	.+14     	; 0x3e10 <txSetParameters+0x1f6>
    3e02:	81 e0       	ldi	r24, 0x01	; 1
							}
						}
						else
						{
							g_tx_power_is_zero = TRUE;
    3e04:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <g_tx_power_is_zero>
    3e08:	81 e0       	ldi	r24, 0x01	; 1
							err = TRUE;
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    3e0c:	86 ef       	ldi	r24, 0xF6	; 246
							code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    3e0e:	8a 83       	std	Y+2, r24	; 0x02
    3e10:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <g_tx_power_is_zero>
						}

						if(g_tx_power_is_zero || err || (drainVoltageDAC == 0))
    3e14:	88 23       	and	r24, r24
    3e16:	31 f4       	brne	.+12     	; 0x3e24 <txSetParameters+0x20a>
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	88 23       	and	r24, r24
    3e1c:	19 f4       	brne	.+6      	; 0x3e24 <txSetParameters+0x20a>
    3e1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e20:	88 23       	and	r24, r24
    3e22:	51 f4       	brne	.+20     	; 0x3e38 <txSetParameters+0x21e>
    3e24:	85 e2       	ldi	r24, 0x25	; 37
						{
							PORTB &= ~(1 << PORTB6);    /* Turn off Tx power */
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	25 e2       	ldi	r18, 0x25	; 37
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	f9 01       	movw	r30, r18
    3e2e:	20 81       	ld	r18, Z
    3e30:	2f 7b       	andi	r18, 0xBF	; 191
    3e32:	fc 01       	movw	r30, r24
    3e34:	20 83       	st	Z, r18
    3e36:	41 c0       	rjmp	.+130    	; 0x3eba <txSetParameters+0x2a0>
    3e38:	85 e2       	ldi	r24, 0x25	; 37
						}
						else
						{
							PORTB |= (1 << PORTB6);     /* Turn on Tx power */
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	25 e2       	ldi	r18, 0x25	; 37
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	f9 01       	movw	r30, r18
    3e42:	20 81       	ld	r18, Z
    3e44:	20 64       	ori	r18, 0x40	; 64
    3e46:	fc 01       	movw	r30, r24
    3e48:	20 83       	st	Z, r18
    3e4a:	37 c0       	rjmp	.+110    	; 0x3eba <txSetParameters+0x2a0>
						}
					}
					else // BAND_80M
					{
						g_80m_power_level_mW = power;
    3e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e50:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <g_80m_power_level_mW+0x1>
    3e54:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_80m_power_level_mW>

						if(txIsAntennaForBand())
    3e58:	d1 d3       	rcall	.+1954   	; 0x45fc <txIsAntennaForBand>
    3e5a:	88 23       	and	r24, r24
    3e5c:	51 f0       	breq	.+20     	; 0x3e72 <txSetParameters+0x258>
						{
							err = dac081c_set_dac(drainVoltageDAC, PA_DAC);
    3e5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e60:	68 e1       	ldi	r22, 0x18	; 24
    3e62:	ae d7       	rcall	.+3932   	; 0x4dc0 <dac081c_set_dac>
    3e64:	89 83       	std	Y+1, r24	; 0x01
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
							if(err)
    3e68:	88 23       	and	r24, r24
    3e6a:	51 f0       	breq	.+20     	; 0x3e80 <txSetParameters+0x266>
    3e6c:	8f ef       	ldi	r24, 0xFF	; 255
							{
								code = ERROR_CODE_DAC1_NONRESPONSIVE;
    3e6e:	8a 83       	std	Y+2, r24	; 0x02
    3e70:	07 c0       	rjmp	.+14     	; 0x3e80 <txSetParameters+0x266>
    3e72:	81 e0       	ldi	r24, 0x01	; 1
							}
						}
						else
						{
							g_tx_power_is_zero = TRUE;
    3e74:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <g_tx_power_is_zero>
    3e78:	81 e0       	ldi	r24, 0x01	; 1
							err = TRUE;
    3e7a:	89 83       	std	Y+1, r24	; 0x01
    3e7c:	86 ef       	ldi	r24, 0xF6	; 246
							code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    3e7e:	8a 83       	std	Y+2, r24	; 0x02
    3e80:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <g_tx_power_is_zero>
						}

						if(g_tx_power_is_zero || err || (drainVoltageDAC == 0))
    3e84:	88 23       	and	r24, r24
    3e86:	31 f4       	brne	.+12     	; 0x3e94 <txSetParameters+0x27a>
    3e88:	89 81       	ldd	r24, Y+1	; 0x01
    3e8a:	88 23       	and	r24, r24
    3e8c:	19 f4       	brne	.+6      	; 0x3e94 <txSetParameters+0x27a>
    3e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e90:	88 23       	and	r24, r24
    3e92:	51 f4       	brne	.+20     	; 0x3ea8 <txSetParameters+0x28e>
    3e94:	85 e2       	ldi	r24, 0x25	; 37
						{
							PORTB &= ~(1 << PORTB6);    /* Turn off Tx power */
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	25 e2       	ldi	r18, 0x25	; 37
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	f9 01       	movw	r30, r18
    3e9e:	20 81       	ld	r18, Z
    3ea0:	2f 7b       	andi	r18, 0xBF	; 191
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	20 83       	st	Z, r18
    3ea6:	09 c0       	rjmp	.+18     	; 0x3eba <txSetParameters+0x2a0>
    3ea8:	85 e2       	ldi	r24, 0x25	; 37
						}
						else
						{
							PORTB |= (1 << PORTB6);     /* Turn on Tx power */
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	25 e2       	ldi	r18, 0x25	; 37
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	f9 01       	movw	r30, r18
    3eb2:	20 81       	ld	r18, Z
    3eb4:	20 64       	ori	r18, 0x40	; 64
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	20 83       	st	Z, r18
    3eba:	2c 81       	ldd	r18, Y+4	; 0x04
						}
					}
				}

				*power_mW = power;
    3ebc:	3d 81       	ldd	r19, Y+5	; 0x05
    3ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	31 83       	std	Z+1, r19	; 0x01
    3ec6:	20 83       	st	Z, r18
    3ec8:	04 c0       	rjmp	.+8      	; 0x3ed2 <txSetParameters+0x2b8>
    3eca:	81 e0       	ldi	r24, 0x01	; 1
			}
			else
			{
				err = TRUE;
    3ecc:	89 83       	std	Y+1, r24	; 0x01
    3ece:	85 ef       	ldi	r24, 0xF5	; 245
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    3ed0:	8a 83       	std	Y+2, r24	; 0x02
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
			}
		}

		if(!err)
    3ed4:	88 23       	and	r24, r24
    3ed6:	49 f4       	brne	.+18     	; 0x3eea <txSetParameters+0x2d0>
		{
			if(enableDriverPwr != NULL)
    3ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    3eda:	9c 89       	ldd	r25, Y+20	; 0x14
    3edc:	89 2b       	or	r24, r25
    3ede:	29 f0       	breq	.+10     	; 0x3eea <txSetParameters+0x2d0>
			{
				powerToTransmitter(*enableDriverPwr);
    3ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	80 81       	ld	r24, Z
    3ee8:	41 de       	rcall	.-894    	; 0x3b6c <powerToTransmitter>
    3eea:	8a 81       	ldd	r24, Y+2	; 0x02
			}
		}

		return(code);
    3eec:	64 96       	adiw	r28, 0x14	; 20
	}
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	cd bf       	out	0x3d, r28	; 61
    3ef8:	df 91       	pop	r29
    3efa:	cf 91       	pop	r28
    3efc:	08 95       	ret

00003efe <txSet2mGateBias>:


	EC txSet2mGateBias(uint8_t bias)
	{
		EC code = ERROR_CODE_NO_ERROR;
		BOOL err = mcp4552_set_pot(bias, BIAS_POT); // set rheostat
    3efe:	68 e5       	ldi	r22, 0x58	; 88
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	49 d7       	rcall	.+3730   	; 0x4d96 <mcp4552_set_pot>
    3f04:	88 23       	and	r24, r24

		if(err)
    3f06:	11 f0       	breq	.+4      	; 0x3f0c <txSet2mGateBias+0xe>
    3f08:	8e ef       	ldi	r24, 0xFE	; 254
		{
			code = ERROR_CODE_DAC2_NONRESPONSIVE;
    3f0a:	08 95       	ret
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
	}


	EC txSet2mGateBias(uint8_t bias)
	{
		EC code = ERROR_CODE_NO_ERROR;
    3f0e:	08 95       	ret

00003f10 <txGetModulation>:
		{
			code = ERROR_CODE_DAC2_NONRESPONSIVE;
		}

		return(code);
	}
    3f10:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>


	Modulation txGetModulation(void)
	{
		if(g_activeBand == BAND_2M)
    3f14:	81 11       	cpse	r24, r1
    3f16:	03 c0       	rjmp	.+6      	; 0x3f1e <txGetModulation+0xe>
    3f18:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <g_2m_modulationFormat>
		{
			return(g_2m_modulationFormat);
    3f1c:	08 95       	ret
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
		}

		return(MODE_CW);
    3f20:	08 95       	ret

00003f22 <init_transmitter>:
	}
    3f22:	cf 93       	push	r28

	EC init_transmitter(void)
	{
    3f24:	df 93       	push	r29
    3f26:	00 d0       	rcall	.+0      	; 0x3f28 <init_transmitter+0x6>
    3f28:	1f 92       	push	r1
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
		EC code;
		RadioBand bnd;

		if((code = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    3f2e:	40 e0       	ldi	r20, 0x00	; 0
    3f30:	50 e0       	ldi	r21, 0x00	; 0
    3f32:	ba 01       	movw	r22, r20
    3f34:	80 e4       	ldi	r24, 0x40	; 64
    3f36:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <si5351_init>
    3f3a:	81 11       	cpse	r24, r1
    3f3c:	56 c0       	rjmp	.+172    	; 0x3fea <init_transmitter+0xc8>
		{
			return( code);
		}

		initializeTransmitterEEPROMVars();
    3f3e:	5d d0       	rcall	.+186    	; 0x3ffa <initializeTransmitterEEPROMVars>
    3f40:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_activeBand>

		bnd = g_activeBand;
    3f44:	89 83       	std	Y+1, r24	; 0x01
		g_activeBand = BAND_INVALID;    /* ensure full configuration by txSetParameters() */
    3f46:	82 e0       	ldi	r24, 0x02	; 2
    3f48:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <g_activeBand>

		if((code = txSetParameters(NULL, (RadioBand*)&bnd, NULL, NULL)))
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	40 e0       	ldi	r20, 0x00	; 0
    3f52:	50 e0       	ldi	r21, 0x00	; 0
    3f54:	be 01       	movw	r22, r28
    3f56:	6f 5f       	subi	r22, 0xFF	; 255
    3f58:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	5d de       	rcall	.-838    	; 0x3c1a <txSetParameters>
    3f60:	81 11       	cpse	r24, r1
    3f62:	43 c0       	rjmp	.+134    	; 0x3fea <init_transmitter+0xc8>
    3f64:	63 e0       	ldi	r22, 0x03	; 3
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	0e 94 29 2b 	call	0x5652	; 0x5652 <si5351_drive_strength>
    3f6c:	81 11       	cpse	r24, r1
    3f6e:	3d c0       	rjmp	.+122    	; 0x3fea <init_transmitter+0xc8>
    3f70:	60 e0       	ldi	r22, 0x00	; 0
		{
			return( code);
		}
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <si5351_clock_enable>
    3f78:	81 11       	cpse	r24, r1
    3f7a:	37 c0       	rjmp	.+110    	; 0x3fea <init_transmitter+0xc8>
    3f7c:	63 e0       	ldi	r22, 0x03	; 3
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_VHF, SI5351_DRIVE_8MA)))
    3f7e:	0e 94 29 2b 	call	0x5652	; 0x5652 <si5351_drive_strength>
    3f82:	81 11       	cpse	r24, r1
    3f84:	32 c0       	rjmp	.+100    	; 0x3fea <init_transmitter+0xc8>
    3f86:	60 e0       	ldi	r22, 0x00	; 0
		{
			return( code);
		}
		if((code = si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_DISABLED)))
    3f88:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <si5351_clock_enable>
    3f8c:	81 11       	cpse	r24, r1
    3f8e:	2d c0       	rjmp	.+90     	; 0x3fea <init_transmitter+0xc8>
    3f90:	63 e0       	ldi	r22, 0x03	; 3
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_VHF_FM, SI5351_DRIVE_8MA)))
    3f92:	82 e0       	ldi	r24, 0x02	; 2
    3f94:	0e 94 29 2b 	call	0x5652	; 0x5652 <si5351_drive_strength>
    3f98:	81 11       	cpse	r24, r1
    3f9a:	27 c0       	rjmp	.+78     	; 0x3fea <init_transmitter+0xc8>
    3f9c:	60 e0       	ldi	r22, 0x00	; 0
		{
			return( code);
		}
		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
    3f9e:	82 e0       	ldi	r24, 0x02	; 2
    3fa0:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <si5351_clock_enable>
    3fa4:	81 11       	cpse	r24, r1
    3fa6:	21 c0       	rjmp	.+66     	; 0x3fea <init_transmitter+0xc8>
		{
			return( code);
		}

		if(bnd == BAND_80M)
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	81 30       	cpi	r24, 0x01	; 1
    3fac:	a1 f4       	brne	.+40     	; 0x3fd6 <init_transmitter+0xb4>
		{
			uint16_t pwr_mW = g_80m_power_level_mW;
    3fae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <g_80m_power_level_mW>
    3fb2:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <g_80m_power_level_mW+0x1>
    3fb6:	9b 83       	std	Y+3, r25	; 0x03
			txSetFrequency((Frequency_Hz*)&g_80m_frequency, TRUE);
    3fb8:	8a 83       	std	Y+2, r24	; 0x02
    3fba:	61 e0       	ldi	r22, 0x01	; 1
    3fbc:	8f e2       	ldi	r24, 0x2F	; 47
    3fbe:	91 e0       	ldi	r25, 0x01	; 1
    3fc0:	20 dd       	rcall	.-1472   	; 0x3a02 <txSetFrequency>
			txSetParameters(&pwr_mW, NULL, NULL, NULL);
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	40 e0       	ldi	r20, 0x00	; 0
    3fc8:	50 e0       	ldi	r21, 0x00	; 0
    3fca:	60 e0       	ldi	r22, 0x00	; 0
    3fcc:	70 e0       	ldi	r23, 0x00	; 0
    3fce:	ce 01       	movw	r24, r28
    3fd0:	02 96       	adiw	r24, 0x02	; 2
    3fd2:	23 de       	rcall	.-954    	; 0x3c1a <txSetParameters>
    3fd4:	06 c0       	rjmp	.+12     	; 0x3fe2 <init_transmitter+0xc0>
		}
		else if(bnd == BAND_2M)
    3fd6:	81 11       	cpse	r24, r1
		{
			txSetFrequency((Frequency_Hz*)&g_2m_frequency, TRUE);
    3fd8:	04 c0       	rjmp	.+8      	; 0x3fe2 <init_transmitter+0xc0>
    3fda:	61 e0       	ldi	r22, 0x01	; 1
    3fdc:	8b e2       	ldi	r24, 0x2B	; 43
    3fde:	91 e0       	ldi	r25, 0x01	; 1
    3fe0:	10 dd       	rcall	.-1504   	; 0x3a02 <txSetFrequency>
		}

		g_tx_initialized = TRUE;
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <g_tx_initialized>

		return( code);
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
	}
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
    3ff0:	df 91       	pop	r29
    3ff2:	cf 91       	pop	r28
    3ff4:	08 95       	ret

00003ff6 <storeTransmitterValues>:

	void storeTransmitterValues(void)
	{
		saveAllTransmitterEEPROM();
    3ff6:	96 c0       	rjmp	.+300    	; 0x4124 <saveAllTransmitterEEPROM>
    3ff8:	08 95       	ret

00003ffa <initializeTransmitterEEPROMVars>:
    3ffa:	80 e4       	ldi	r24, 0x40	; 64
	}


	void initializeTransmitterEEPROMVars(void)
	{
		if(eeprom_read_byte(&ee_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    4002:	89 3c       	cpi	r24, 0xC9	; 201
    4004:	09 f0       	breq	.+2      	; 0x4008 <initializeTransmitterEEPROMVars+0xe>
    4006:	4d c0       	rjmp	.+154    	; 0x40a2 <initializeTransmitterEEPROMVars+0xa8>
    4008:	85 e4       	ldi	r24, 0x45	; 69
		{
			g_activeBand = eeprom_read_byte(&ee_active_band);
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    4010:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <g_activeBand>
    4014:	86 e4       	ldi	r24, 0x46	; 70
			g_2m_frequency = eeprom_read_dword(&ee_active_2m_frequency);
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0e 94 a1 31 	call	0x6342	; 0x6342 <eeprom_read_dword>
    401c:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <g_2m_frequency>
    4020:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <g_2m_frequency+0x1>
    4024:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <g_2m_frequency+0x2>
    4028:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <g_2m_frequency+0x3>
    402c:	8a e4       	ldi	r24, 0x4A	; 74
			g_2m_power_level_mW = eeprom_read_word(&ee_2m_power_level_mW);
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	0e 94 a6 31 	call	0x634c	; 0x634c <eeprom_read_word>
    4034:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <g_2m_power_level_mW+0x1>
    4038:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_2m_power_level_mW>
    403c:	8c e4       	ldi	r24, 0x4C	; 76
			g_80m_frequency = eeprom_read_dword(&ee_active_80m_frequency);
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0e 94 a1 31 	call	0x6342	; 0x6342 <eeprom_read_dword>
    4044:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <g_80m_frequency>
    4048:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <g_80m_frequency+0x1>
    404c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <g_80m_frequency+0x2>
    4050:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <g_80m_frequency+0x3>
    4054:	80 e5       	ldi	r24, 0x50	; 80
			g_80m_power_level_mW = eeprom_read_word(&ee_80m_power_level_mW);
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	0e 94 a6 31 	call	0x634c	; 0x634c <eeprom_read_word>
    405c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <g_80m_power_level_mW+0x1>
    4060:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_80m_power_level_mW>
    4064:	82 e5       	ldi	r24, 0x52	; 82
			g_rtty_offset = eeprom_read_dword(&ee_cw_offset_frequency);
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	0e 94 a1 31 	call	0x6342	; 0x6342 <eeprom_read_dword>
    406c:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <g_rtty_offset>
    4070:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <g_rtty_offset+0x1>
    4074:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_rtty_offset+0x2>
    4078:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <g_rtty_offset+0x3>
    407c:	86 e5       	ldi	r24, 0x56	; 86
			g_am_drive_level_high = eeprom_read_byte(&ee_am_drive_level_high);
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    4084:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <g_am_drive_level_high>
    4088:	87 e5       	ldi	r24, 0x57	; 87
			g_am_drive_level_low = eeprom_read_byte(&ee_am_drive_level_low);
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    4090:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <g_am_drive_level_low>
    4094:	88 e5       	ldi	r24, 0x58	; 88
			g_2m_modulationFormat = eeprom_read_byte(&ee_active_2m_modulation);
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    409c:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <g_2m_modulationFormat>
    40a0:	08 95       	ret
    40a2:	69 ec       	ldi	r22, 0xC9	; 201
		}
		else
		{
			eeprom_write_byte(&ee_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    40a4:	80 e4       	ldi	r24, 0x40	; 64
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <eeprom_write_byte>
    40ac:	81 e0       	ldi	r24, 0x01	; 1

			g_activeBand = EEPROM_BAND_DEFAULT;
    40ae:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <g_activeBand>
    40b2:	80 e3       	ldi	r24, 0x30	; 48
			g_2m_frequency = DEFAULT_TX_2M_FREQUENCY;
    40b4:	99 e2       	ldi	r25, 0x29	; 41
    40b6:	ad ea       	ldi	r26, 0xAD	; 173
    40b8:	b8 e0       	ldi	r27, 0x08	; 8
    40ba:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <g_2m_frequency>
    40be:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <g_2m_frequency+0x1>
    40c2:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <g_2m_frequency+0x2>
    40c6:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <g_2m_frequency+0x3>
    40ca:	84 e6       	ldi	r24, 0x64	; 100
			g_2m_power_level_mW = DEFAULT_TX_2M_POWER_MW;
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <g_2m_power_level_mW+0x1>
    40d2:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_2m_power_level_mW>
    40d6:	80 e3       	ldi	r24, 0x30	; 48
			g_80m_frequency = DEFAULT_TX_80M_FREQUENCY;
    40d8:	9b e2       	ldi	r25, 0x2B	; 43
    40da:	a6 e3       	ldi	r26, 0x36	; 54
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <g_80m_frequency>
    40e2:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <g_80m_frequency+0x1>
    40e6:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <g_80m_frequency+0x2>
    40ea:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <g_80m_frequency+0x3>
    40ee:	84 ef       	ldi	r24, 0xF4	; 244
			g_80m_power_level_mW = DEFAULT_TX_80M_POWER_MW;
    40f0:	91 e0       	ldi	r25, 0x01	; 1
    40f2:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <g_80m_power_level_mW+0x1>
    40f6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_80m_power_level_mW>
    40fa:	8a ea       	ldi	r24, 0xAA	; 170
			g_rtty_offset = DEFAULT_RTTY_OFFSET_FREQUENCY;
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	a0 e0       	ldi	r26, 0x00	; 0
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <g_rtty_offset>
    4106:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <g_rtty_offset+0x1>
    410a:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <g_rtty_offset+0x2>
    410e:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <g_rtty_offset+0x3>
			g_am_drive_level_high = DEFAULT_AM_DRIVE_LEVEL_HIGH;
    4112:	84 eb       	ldi	r24, 0xB4	; 180
    4114:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <g_am_drive_level_high>
			g_am_drive_level_low = DEFAULT_AM_DRIVE_LEVEL_LOW;
    4118:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <g_am_drive_level_low>
/*			g_cw_drive_level = DEFAULT_CW_DRIVE_LEVEL; */
			g_2m_modulationFormat = DEFAULT_TX_2M_MODULATION;
    411c:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <g_2m_modulationFormat>

			saveAllTransmitterEEPROM();
    4120:	01 c0       	rjmp	.+2      	; 0x4124 <saveAllTransmitterEEPROM>
    4122:	08 95       	ret

00004124 <saveAllTransmitterEEPROM>:
    4124:	cf 93       	push	r28
		}
	}

	void saveAllTransmitterEEPROM(void)
	{
    4126:	df 93       	push	r29
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
    412c:	c6 57       	subi	r28, 0x76	; 118
    412e:	d1 09       	sbc	r29, r1
    4130:	0f b6       	in	r0, 0x3f	; 63
    4132:	f8 94       	cli
    4134:	de bf       	out	0x3e, r29	; 62
    4136:	0f be       	out	0x3f, r0	; 63
    4138:	cd bf       	out	0x3d, r28	; 61
    413a:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <g_activeBand>
		uint8_t table[22];

		eeprom_update_byte(&ee_active_band, g_activeBand);
    413e:	85 e4       	ldi	r24, 0x45	; 69
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
    4146:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <g_2m_frequency>
		eeprom_update_dword((uint32_t*)&ee_active_2m_frequency, g_2m_frequency);
    414a:	50 91 2c 01 	lds	r21, 0x012C	; 0x80012c <g_2m_frequency+0x1>
    414e:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <g_2m_frequency+0x2>
    4152:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <g_2m_frequency+0x3>
    4156:	86 e4       	ldi	r24, 0x46	; 70
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 bd 31 	call	0x637a	; 0x637a <eeprom_update_dword>
    415e:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <g_2m_power_level_mW>
		eeprom_update_word(&ee_2m_power_level_mW, g_2m_power_level_mW);
    4162:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <g_2m_power_level_mW+0x1>
    4166:	8a e4       	ldi	r24, 0x4A	; 74
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 c5 31 	call	0x638a	; 0x638a <eeprom_update_word>
    416e:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <g_80m_frequency>
		eeprom_update_dword((uint32_t*)&ee_active_80m_frequency, g_80m_frequency);
    4172:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <g_80m_frequency+0x1>
    4176:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <g_80m_frequency+0x2>
    417a:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <g_80m_frequency+0x3>
    417e:	8c e4       	ldi	r24, 0x4C	; 76
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	0e 94 bd 31 	call	0x637a	; 0x637a <eeprom_update_dword>
    4186:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <g_80m_power_level_mW>
		eeprom_update_word(&ee_80m_power_level_mW, g_80m_power_level_mW);
    418a:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <g_80m_power_level_mW+0x1>
    418e:	80 e5       	ldi	r24, 0x50	; 80
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 c5 31 	call	0x638a	; 0x638a <eeprom_update_word>
		eeprom_update_dword((uint32_t*)&ee_cw_offset_frequency, g_rtty_offset);
    4196:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <g_rtty_offset>
    419a:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <g_rtty_offset+0x1>
    419e:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <g_rtty_offset+0x2>
    41a2:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <g_rtty_offset+0x3>
    41a6:	82 e5       	ldi	r24, 0x52	; 82
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	0e 94 bd 31 	call	0x637a	; 0x637a <eeprom_update_dword>
		eeprom_update_dword((uint32_t*)&ee_si5351_ref_correction, si5351_get_correction());
    41ae:	35 d6       	rcall	.+3178   	; 0x4e1a <si5351_get_correction>
    41b0:	ab 01       	movw	r20, r22
    41b2:	bc 01       	movw	r22, r24
    41b4:	81 e4       	ldi	r24, 0x41	; 65
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	0e 94 bd 31 	call	0x637a	; 0x637a <eeprom_update_dword>
    41bc:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <g_am_drive_level_high>
		eeprom_update_byte(&ee_am_drive_level_high, g_am_drive_level_high);
    41c0:	86 e5       	ldi	r24, 0x56	; 86
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
    41c8:	60 91 6b 04 	lds	r22, 0x046B	; 0x80046b <g_am_drive_level_low>
		eeprom_update_byte(&ee_am_drive_level_high, g_am_drive_level_low);
    41cc:	86 e5       	ldi	r24, 0x56	; 86
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
    41d4:	60 91 6a 04 	lds	r22, 0x046A	; 0x80046a <g_2m_modulationFormat>
/*		eeprom_update_byte(&ee_cw_drive_level, g_cw_drive_level); */
		eeprom_update_byte(&ee_active_2m_modulation, g_2m_modulationFormat);
    41d8:	88 e5       	ldi	r24, 0x58	; 88
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	0e 94 ab 31 	call	0x6356	; 0x6356 <eeprom_update_byte>
    41e0:	80 e1       	ldi	r24, 0x10	; 16
		memcpy(table, DEFAULT_80M_POWER_TABLE, sizeof(table));
    41e2:	ee eb       	ldi	r30, 0xBE	; 190
    41e4:	f1 e0       	ldi	r31, 0x01	; 1
    41e6:	de 01       	movw	r26, r28
    41e8:	af 5a       	subi	r26, 0xAF	; 175
    41ea:	bf 4f       	sbci	r27, 0xFF	; 255
    41ec:	01 90       	ld	r0, Z+
    41ee:	0d 92       	st	X+, r0
    41f0:	8a 95       	dec	r24
    41f2:	e1 f7       	brne	.-8      	; 0x41ec <saveAllTransmitterEEPROM+0xc8>
    41f4:	86 e1       	ldi	r24, 0x16	; 22
    41f6:	fe 01       	movw	r30, r28
    41f8:	ef 5a       	subi	r30, 0xAF	; 175
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	de 01       	movw	r26, r28
    41fe:	af 59       	subi	r26, 0x9F	; 159
    4200:	bf 4f       	sbci	r27, 0xFF	; 255
    4202:	01 90       	ld	r0, Z+
    4204:	0d 92       	st	X+, r0
    4206:	8a 95       	dec	r24
    4208:	e1 f7       	brne	.-8      	; 0x4202 <saveAllTransmitterEEPROM+0xde>
    420a:	46 e1       	ldi	r20, 0x16	; 22
		eeprom_write_block(table, ee_80m_power_table, sizeof(table));
    420c:	50 e0       	ldi	r21, 0x00	; 0
    420e:	69 e5       	ldi	r22, 0x59	; 89
    4210:	70 e0       	ldi	r23, 0x00	; 0
    4212:	ce 01       	movw	r24, r28
    4214:	8f 59       	subi	r24, 0x9F	; 159
    4216:	9f 4f       	sbci	r25, 0xFF	; 255
    4218:	0e 94 c9 31 	call	0x6392	; 0x6392 <eeprom_write_block>
    421c:	80 e1       	ldi	r24, 0x10	; 16
		memcpy(table, DEFAULT_2M_AM_POWER_TABLE, sizeof(table));
    421e:	ee ec       	ldi	r30, 0xCE	; 206
    4220:	f1 e0       	ldi	r31, 0x01	; 1
    4222:	de 01       	movw	r26, r28
    4224:	af 5b       	subi	r26, 0xBF	; 191
    4226:	bf 4f       	sbci	r27, 0xFF	; 255
    4228:	01 90       	ld	r0, Z+
    422a:	0d 92       	st	X+, r0
    422c:	8a 95       	dec	r24
    422e:	e1 f7       	brne	.-8      	; 0x4228 <saveAllTransmitterEEPROM+0x104>
    4230:	86 e1       	ldi	r24, 0x16	; 22
    4232:	fe 01       	movw	r30, r28
    4234:	ef 5b       	subi	r30, 0xBF	; 191
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	de 01       	movw	r26, r28
    423a:	af 59       	subi	r26, 0x9F	; 159
    423c:	bf 4f       	sbci	r27, 0xFF	; 255
    423e:	01 90       	ld	r0, Z+
    4240:	0d 92       	st	X+, r0
    4242:	8a 95       	dec	r24
    4244:	e1 f7       	brne	.-8      	; 0x423e <saveAllTransmitterEEPROM+0x11a>
    4246:	46 e1       	ldi	r20, 0x16	; 22
		eeprom_write_block(table, ee_2m_am_power_table, sizeof(table));
    4248:	50 e0       	ldi	r21, 0x00	; 0
    424a:	69 e6       	ldi	r22, 0x69	; 105
    424c:	70 e0       	ldi	r23, 0x00	; 0
    424e:	ce 01       	movw	r24, r28
    4250:	8f 59       	subi	r24, 0x9F	; 159
    4252:	9f 4f       	sbci	r25, 0xFF	; 255
    4254:	0e 94 c9 31 	call	0x6392	; 0x6392 <eeprom_write_block>
    4258:	80 e1       	ldi	r24, 0x10	; 16
		memcpy(table, DEFAULT_2M_AM_DRIVE_HIGH_TABLE, sizeof(table));
    425a:	ee ed       	ldi	r30, 0xDE	; 222
    425c:	f1 e0       	ldi	r31, 0x01	; 1
    425e:	de 01       	movw	r26, r28
    4260:	d1 96       	adiw	r26, 0x31	; 49
    4262:	01 90       	ld	r0, Z+
    4264:	0d 92       	st	X+, r0
    4266:	8a 95       	dec	r24
    4268:	e1 f7       	brne	.-8      	; 0x4262 <saveAllTransmitterEEPROM+0x13e>
    426a:	86 e1       	ldi	r24, 0x16	; 22
    426c:	fe 01       	movw	r30, r28
    426e:	f1 96       	adiw	r30, 0x31	; 49
    4270:	de 01       	movw	r26, r28
    4272:	af 59       	subi	r26, 0x9F	; 159
    4274:	bf 4f       	sbci	r27, 0xFF	; 255
    4276:	01 90       	ld	r0, Z+
    4278:	0d 92       	st	X+, r0
    427a:	8a 95       	dec	r24
    427c:	e1 f7       	brne	.-8      	; 0x4276 <saveAllTransmitterEEPROM+0x152>
    427e:	46 e1       	ldi	r20, 0x16	; 22
		eeprom_write_block(table, ee_2m_am_drive_high_table, sizeof(table));
    4280:	50 e0       	ldi	r21, 0x00	; 0
    4282:	69 e8       	ldi	r22, 0x89	; 137
    4284:	70 e0       	ldi	r23, 0x00	; 0
    4286:	ce 01       	movw	r24, r28
    4288:	8f 59       	subi	r24, 0x9F	; 159
    428a:	9f 4f       	sbci	r25, 0xFF	; 255
    428c:	0e 94 c9 31 	call	0x6392	; 0x6392 <eeprom_write_block>
    4290:	80 e1       	ldi	r24, 0x10	; 16
		memcpy(table, DEFAULT_2M_AM_DRIVE_LOW_TABLE, sizeof(table));
    4292:	ee ee       	ldi	r30, 0xEE	; 238
    4294:	f1 e0       	ldi	r31, 0x01	; 1
    4296:	de 01       	movw	r26, r28
    4298:	91 96       	adiw	r26, 0x21	; 33
    429a:	01 90       	ld	r0, Z+
    429c:	0d 92       	st	X+, r0
    429e:	8a 95       	dec	r24
    42a0:	e1 f7       	brne	.-8      	; 0x429a <saveAllTransmitterEEPROM+0x176>
    42a2:	86 e1       	ldi	r24, 0x16	; 22
    42a4:	fe 01       	movw	r30, r28
    42a6:	b1 96       	adiw	r30, 0x21	; 33
    42a8:	de 01       	movw	r26, r28
    42aa:	af 59       	subi	r26, 0x9F	; 159
    42ac:	bf 4f       	sbci	r27, 0xFF	; 255
    42ae:	01 90       	ld	r0, Z+
    42b0:	0d 92       	st	X+, r0
    42b2:	8a 95       	dec	r24
    42b4:	e1 f7       	brne	.-8      	; 0x42ae <saveAllTransmitterEEPROM+0x18a>
    42b6:	46 e1       	ldi	r20, 0x16	; 22
		eeprom_write_block(table, ee_2m_am_drive_low_table, sizeof(table));
    42b8:	50 e0       	ldi	r21, 0x00	; 0
    42ba:	69 e7       	ldi	r22, 0x79	; 121
    42bc:	70 e0       	ldi	r23, 0x00	; 0
    42be:	ce 01       	movw	r24, r28
    42c0:	8f 59       	subi	r24, 0x9F	; 159
    42c2:	9f 4f       	sbci	r25, 0xFF	; 255
    42c4:	0e 94 c9 31 	call	0x6392	; 0x6392 <eeprom_write_block>
    42c8:	80 e1       	ldi	r24, 0x10	; 16
		memcpy(table, DEFAULT_2M_CW_POWER_TABLE, sizeof(table));
    42ca:	ee ec       	ldi	r30, 0xCE	; 206
    42cc:	f1 e0       	ldi	r31, 0x01	; 1
    42ce:	de 01       	movw	r26, r28
    42d0:	51 96       	adiw	r26, 0x11	; 17
    42d2:	01 90       	ld	r0, Z+
    42d4:	0d 92       	st	X+, r0
    42d6:	8a 95       	dec	r24
    42d8:	e1 f7       	brne	.-8      	; 0x42d2 <saveAllTransmitterEEPROM+0x1ae>
    42da:	86 e1       	ldi	r24, 0x16	; 22
    42dc:	fe 01       	movw	r30, r28
    42de:	71 96       	adiw	r30, 0x11	; 17
    42e0:	de 01       	movw	r26, r28
    42e2:	af 59       	subi	r26, 0x9F	; 159
    42e4:	bf 4f       	sbci	r27, 0xFF	; 255
    42e6:	01 90       	ld	r0, Z+
    42e8:	0d 92       	st	X+, r0
    42ea:	8a 95       	dec	r24
    42ec:	e1 f7       	brne	.-8      	; 0x42e6 <saveAllTransmitterEEPROM+0x1c2>
    42ee:	46 e1       	ldi	r20, 0x16	; 22
		eeprom_write_block(table, ee_2m_cw_power_table, sizeof(table));
    42f0:	50 e0       	ldi	r21, 0x00	; 0
    42f2:	69 e9       	ldi	r22, 0x99	; 153
    42f4:	70 e0       	ldi	r23, 0x00	; 0
    42f6:	ce 01       	movw	r24, r28
    42f8:	8f 59       	subi	r24, 0x9F	; 159
    42fa:	9f 4f       	sbci	r25, 0xFF	; 255
    42fc:	0e 94 c9 31 	call	0x6392	; 0x6392 <eeprom_write_block>
    4300:	80 e1       	ldi	r24, 0x10	; 16
		memcpy(table, DEFAULT_2M_CW_DRIVE_TABLE, sizeof(table));
    4302:	ee ef       	ldi	r30, 0xFE	; 254
    4304:	f1 e0       	ldi	r31, 0x01	; 1
    4306:	de 01       	movw	r26, r28
    4308:	11 96       	adiw	r26, 0x01	; 1
    430a:	01 90       	ld	r0, Z+
    430c:	0d 92       	st	X+, r0
    430e:	8a 95       	dec	r24
    4310:	e1 f7       	brne	.-8      	; 0x430a <saveAllTransmitterEEPROM+0x1e6>
    4312:	86 e1       	ldi	r24, 0x16	; 22
    4314:	fe 01       	movw	r30, r28
    4316:	31 96       	adiw	r30, 0x01	; 1
    4318:	de 01       	movw	r26, r28
    431a:	af 59       	subi	r26, 0x9F	; 159
    431c:	bf 4f       	sbci	r27, 0xFF	; 255
    431e:	01 90       	ld	r0, Z+
    4320:	0d 92       	st	X+, r0
    4322:	8a 95       	dec	r24
    4324:	e1 f7       	brne	.-8      	; 0x431e <saveAllTransmitterEEPROM+0x1fa>
    4326:	46 e1       	ldi	r20, 0x16	; 22
		eeprom_write_block(table, ee_2m_cw_drive_table, sizeof(table));
    4328:	50 e0       	ldi	r21, 0x00	; 0
    432a:	69 ea       	ldi	r22, 0xA9	; 169
    432c:	70 e0       	ldi	r23, 0x00	; 0
    432e:	ce 01       	movw	r24, r28
    4330:	8f 59       	subi	r24, 0x9F	; 159
    4332:	9f 4f       	sbci	r25, 0xFF	; 255
    4334:	0e 94 c9 31 	call	0x6392	; 0x6392 <eeprom_write_block>
    4338:	ca 58       	subi	r28, 0x8A	; 138
	}
    433a:	df 4f       	sbci	r29, 0xFF	; 255
    433c:	0f b6       	in	r0, 0x3f	; 63
    433e:	f8 94       	cli
    4340:	de bf       	out	0x3e, r29	; 62
    4342:	0f be       	out	0x3f, r0	; 63
    4344:	cd bf       	out	0x3d, r28	; 61
    4346:	df 91       	pop	r29
    4348:	cf 91       	pop	r28
    434a:	08 95       	ret

0000434c <bandForFrequency>:
    434c:	0f 93       	push	r16


#endif  /*#ifdef INCLUDE_TRANSMITTER_SUPPORT */

RadioBand bandForFrequency(Frequency_Hz freq)
{
    434e:	1f 93       	push	r17
    4350:	8b 01       	movw	r16, r22
	RadioBand result = BAND_INVALID;

	if((freq >= TX_MINIMUM_2M_FREQUENCY) && (freq <= TX_MAXIMUM_2M_FREQUENCY))
    4352:	9c 01       	movw	r18, r24
    4354:	14 54       	subi	r17, 0x44	; 68
    4356:	25 49       	sbci	r18, 0x95	; 149
    4358:	38 40       	sbci	r19, 0x08	; 8
    435a:	01 30       	cpi	r16, 0x01	; 1
    435c:	19 40       	sbci	r17, 0x09	; 9
    435e:	2d 43       	sbci	r18, 0x3D	; 61
    4360:	31 05       	cpc	r19, r1
    4362:	68 f0       	brcs	.+26     	; 0x437e <bandForFrequency+0x32>
    4364:	dc 01       	movw	r26, r24
	{
		result = BAND_2M;
	}
	else if((freq >= TX_MINIMUM_80M_FREQUENCY) && (freq <= TX_MAXIMUM_80M_FREQUENCY))
    4366:	cb 01       	movw	r24, r22
    4368:	80 5e       	subi	r24, 0xE0	; 224
    436a:	97 46       	sbci	r25, 0x67	; 103
    436c:	a5 43       	sbci	r26, 0x35	; 53
    436e:	b1 09       	sbc	r27, r1
    4370:	81 32       	cpi	r24, 0x21	; 33
    4372:	9a 4a       	sbci	r25, 0xAA	; 170
    4374:	a4 44       	sbci	r26, 0x44	; 68
    4376:	b1 05       	cpc	r27, r1
    4378:	20 f4       	brcc	.+8      	; 0x4382 <bandForFrequency+0x36>
    437a:	81 e0       	ldi	r24, 0x01	; 1
	{
		result = BAND_80M;
    437c:	03 c0       	rjmp	.+6      	; 0x4384 <bandForFrequency+0x38>
{
	RadioBand result = BAND_INVALID;

	if((freq >= TX_MINIMUM_2M_FREQUENCY) && (freq <= TX_MAXIMUM_2M_FREQUENCY))
	{
		result = BAND_2M;
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	01 c0       	rjmp	.+2      	; 0x4384 <bandForFrequency+0x38>

#endif  /*#ifdef INCLUDE_TRANSMITTER_SUPPORT */

RadioBand bandForFrequency(Frequency_Hz freq)
{
	RadioBand result = BAND_INVALID;
    4382:	82 e0       	ldi	r24, 0x02	; 2
	{
		result = BAND_80M;
	}

	return(result);
}
    4384:	1f 91       	pop	r17
    4386:	0f 91       	pop	r16
    4388:	08 95       	ret

0000438a <txMilliwattsToSettings>:

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    438a:	bf 92       	push	r11
    438c:	cf 92       	push	r12
    438e:	df 92       	push	r13
    4390:	ef 92       	push	r14
    4392:	ff 92       	push	r15
    4394:	0f 93       	push	r16
    4396:	1f 93       	push	r17
    4398:	cf 93       	push	r28
    439a:	df 93       	push	r29
    439c:	ec 01       	movw	r28, r24
    439e:	8b 01       	movw	r16, r22
    43a0:	6a 01       	movw	r12, r20
    43a2:	79 01       	movw	r14, r18
	EC ec = ERROR_CODE_NO_ERROR;
	RadioBand band = txGetBand();
    43a4:	e0 db       	rcall	.-2112   	; 0x3b66 <txGetBand>
    43a6:	20 97       	sbiw	r28, 0x00	; 0
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    43a8:	09 f4       	brne	.+2      	; 0x43ac <txMilliwattsToSettings+0x22>
    43aa:	fc c0       	rjmp	.+504    	; 0x45a4 <txMilliwattsToSettings+0x21a>
    43ac:	81 30       	cpi	r24, 0x01	; 1
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	if(band == BAND_80M)
    43ae:	31 f4       	brne	.+12     	; 0x43bc <txMilliwattsToSettings+0x32>
    43b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <g_battery_type>
	{
		if(g_battery_type == BATTERY_4r2V)
    43b4:	91 30       	cpi	r25, 0x01	; 1
    43b6:	09 f0       	breq	.+2      	; 0x43ba <txMilliwattsToSettings+0x30>
    43b8:	10 c1       	rjmp	.+544    	; 0x45da <txMilliwattsToSettings+0x250>
    43ba:	08 c1       	rjmp	.+528    	; 0x45cc <txMilliwattsToSettings+0x242>
    43bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <g_battery_type>
			maxPwr = MAX_TX_POWER_80M_MW;
		}
	}
	else
	{
		if(g_battery_type == BATTERY_4r2V)
    43c0:	91 30       	cpi	r25, 0x01	; 1
    43c2:	09 f0       	breq	.+2      	; 0x43c6 <txMilliwattsToSettings+0x3c>
    43c4:	03 c1       	rjmp	.+518    	; 0x45cc <txMilliwattsToSettings+0x242>
    43c6:	fb c0       	rjmp	.+502    	; 0x45be <txMilliwattsToSettings+0x234>
    43c8:	19 82       	std	Y+1, r1	; 0x01
	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
		*powerMW = 0;
    43ca:	18 82       	st	Y, r1
    43cc:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    43ce:	c0 e0       	ldi	r28, 0x00	; 0

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    43d0:	ab c0       	rjmp	.+342    	; 0x4528 <txMilliwattsToSettings+0x19e>
    43d2:	22 33       	cpi	r18, 0x32	; 50
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    43d4:	31 05       	cpc	r19, r1
    43d6:	38 f4       	brcc	.+14     	; 0x43e6 <txMilliwattsToSettings+0x5c>
    43d8:	2a e0       	ldi	r18, 0x0A	; 10
	{
		index = 1;
		*powerMW = 10;
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	39 83       	std	Y+1, r19	; 0x01
    43de:	28 83       	st	Y, r18
    43e0:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    43e2:	c1 e0       	ldi	r28, 0x01	; 1
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    43e4:	a1 c0       	rjmp	.+322    	; 0x4528 <txMilliwattsToSettings+0x19e>
    43e6:	26 39       	cpi	r18, 0x96	; 150
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    43e8:	31 05       	cpc	r19, r1
    43ea:	38 f4       	brcc	.+14     	; 0x43fa <txMilliwattsToSettings+0x70>
    43ec:	24 e6       	ldi	r18, 0x64	; 100
	{
		index = 2;
		*powerMW = 100;
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	39 83       	std	Y+1, r19	; 0x01
    43f2:	28 83       	st	Y, r18
    43f4:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    43f6:	c2 e0       	ldi	r28, 0x02	; 2
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    43f8:	97 c0       	rjmp	.+302    	; 0x4528 <txMilliwattsToSettings+0x19e>
    43fa:	2a 3f       	cpi	r18, 0xFA	; 250
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    43fc:	31 05       	cpc	r19, r1
    43fe:	38 f4       	brcc	.+14     	; 0x440e <txMilliwattsToSettings+0x84>
    4400:	28 ec       	ldi	r18, 0xC8	; 200
	{
		index = 3;
		*powerMW = 200;
    4402:	30 e0       	ldi	r19, 0x00	; 0
    4404:	39 83       	std	Y+1, r19	; 0x01
    4406:	28 83       	st	Y, r18
    4408:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    440a:	c3 e0       	ldi	r28, 0x03	; 3
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    440c:	8d c0       	rjmp	.+282    	; 0x4528 <txMilliwattsToSettings+0x19e>
    440e:	2e 35       	cpi	r18, 0x5E	; 94
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    4410:	91 e0       	ldi	r25, 0x01	; 1
    4412:	39 07       	cpc	r19, r25
    4414:	38 f4       	brcc	.+14     	; 0x4424 <txMilliwattsToSettings+0x9a>
    4416:	2c e2       	ldi	r18, 0x2C	; 44
	{
		index = 4;
		*powerMW = 300;
    4418:	31 e0       	ldi	r19, 0x01	; 1
    441a:	39 83       	std	Y+1, r19	; 0x01
    441c:	28 83       	st	Y, r18
    441e:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    4420:	c4 e0       	ldi	r28, 0x04	; 4
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    4422:	82 c0       	rjmp	.+260    	; 0x4528 <txMilliwattsToSettings+0x19e>
    4424:	22 3c       	cpi	r18, 0xC2	; 194
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    4426:	e1 e0       	ldi	r30, 0x01	; 1
    4428:	3e 07       	cpc	r19, r30
    442a:	38 f4       	brcc	.+14     	; 0x443a <txMilliwattsToSettings+0xb0>
    442c:	20 e9       	ldi	r18, 0x90	; 144
	{
		index = 5;
		*powerMW = 400;
    442e:	31 e0       	ldi	r19, 0x01	; 1
    4430:	39 83       	std	Y+1, r19	; 0x01
    4432:	28 83       	st	Y, r18
    4434:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    4436:	c5 e0       	ldi	r28, 0x05	; 5
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    4438:	77 c0       	rjmp	.+238    	; 0x4528 <txMilliwattsToSettings+0x19e>
    443a:	26 32       	cpi	r18, 0x26	; 38
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    443c:	f2 e0       	ldi	r31, 0x02	; 2
    443e:	3f 07       	cpc	r19, r31
    4440:	38 f4       	brcc	.+14     	; 0x4450 <txMilliwattsToSettings+0xc6>
    4442:	24 ef       	ldi	r18, 0xF4	; 244
	{
		index = 6;
		*powerMW = 500;
    4444:	31 e0       	ldi	r19, 0x01	; 1
    4446:	39 83       	std	Y+1, r19	; 0x01
    4448:	28 83       	st	Y, r18
    444a:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    444c:	c6 e0       	ldi	r28, 0x06	; 6
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    444e:	6c c0       	rjmp	.+216    	; 0x4528 <txMilliwattsToSettings+0x19e>
    4450:	2a 38       	cpi	r18, 0x8A	; 138
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    4452:	92 e0       	ldi	r25, 0x02	; 2
    4454:	39 07       	cpc	r19, r25
    4456:	38 f4       	brcc	.+14     	; 0x4466 <txMilliwattsToSettings+0xdc>
    4458:	28 e5       	ldi	r18, 0x58	; 88
	{
		index = 7;
		*powerMW = 600;
    445a:	32 e0       	ldi	r19, 0x02	; 2
    445c:	39 83       	std	Y+1, r19	; 0x01
    445e:	28 83       	st	Y, r18
    4460:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    4462:	c7 e0       	ldi	r28, 0x07	; 7
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    4464:	61 c0       	rjmp	.+194    	; 0x4528 <txMilliwattsToSettings+0x19e>
    4466:	24 38       	cpi	r18, 0x84	; 132
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    4468:	e3 e0       	ldi	r30, 0x03	; 3
    446a:	3e 07       	cpc	r19, r30
    446c:	38 f4       	brcc	.+14     	; 0x447c <txMilliwattsToSettings+0xf2>
    446e:	20 e2       	ldi	r18, 0x20	; 32
	{
		index = 8;
		*powerMW = 800;
    4470:	33 e0       	ldi	r19, 0x03	; 3
    4472:	39 83       	std	Y+1, r19	; 0x01
    4474:	28 83       	st	Y, r18
    4476:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    4478:	c8 e0       	ldi	r28, 0x08	; 8
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    447a:	56 c0       	rjmp	.+172    	; 0x4528 <txMilliwattsToSettings+0x19e>
    447c:	22 3e       	cpi	r18, 0xE2	; 226
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    447e:	f4 e0       	ldi	r31, 0x04	; 4
    4480:	3f 07       	cpc	r19, r31
    4482:	60 f4       	brcc	.+24     	; 0x449c <txMilliwattsToSettings+0x112>
    4484:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    4486:	04 c0       	rjmp	.+8      	; 0x4490 <txMilliwattsToSettings+0x106>
    4488:	0f 2e       	mov	r0, r31
		}
	}

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    448a:	f5 ef       	ldi	r31, 0xF5	; 245
    448c:	bf 2e       	mov	r11, r31
    448e:	f0 2d       	mov	r31, r0
    4490:	28 ee       	ldi	r18, 0xE8	; 232
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
		*powerMW = 1000;
    4492:	33 e0       	ldi	r19, 0x03	; 3
    4494:	39 83       	std	Y+1, r19	; 0x01
    4496:	28 83       	st	Y, r18
    4498:	c9 e0       	ldi	r28, 0x09	; 9
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    449a:	46 c0       	rjmp	.+140    	; 0x4528 <txMilliwattsToSettings+0x19e>
    449c:	26 3d       	cpi	r18, 0xD6	; 214
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    449e:	96 e0       	ldi	r25, 0x06	; 6
    44a0:	39 07       	cpc	r19, r25
    44a2:	38 f4       	brcc	.+14     	; 0x44b2 <txMilliwattsToSettings+0x128>
    44a4:	2c ed       	ldi	r18, 0xDC	; 220
	{
		index = 10;
		*powerMW = 1500;
    44a6:	35 e0       	ldi	r19, 0x05	; 5
    44a8:	39 83       	std	Y+1, r19	; 0x01
    44aa:	28 83       	st	Y, r18
    44ac:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    44ae:	ca e0       	ldi	r28, 0x0A	; 10
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    44b0:	3b c0       	rjmp	.+118    	; 0x4528 <txMilliwattsToSettings+0x19e>
    44b2:	2a 3c       	cpi	r18, 0xCA	; 202
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    44b4:	e8 e0       	ldi	r30, 0x08	; 8
    44b6:	3e 07       	cpc	r19, r30
    44b8:	60 f4       	brcc	.+24     	; 0x44d2 <txMilliwattsToSettings+0x148>
    44ba:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    44bc:	04 c0       	rjmp	.+8      	; 0x44c6 <txMilliwattsToSettings+0x13c>
    44be:	0f 2e       	mov	r0, r31
		}
	}

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    44c0:	f5 ef       	ldi	r31, 0xF5	; 245
    44c2:	bf 2e       	mov	r11, r31
    44c4:	f0 2d       	mov	r31, r0
    44c6:	20 ed       	ldi	r18, 0xD0	; 208
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
		*powerMW = 2000;
    44c8:	37 e0       	ldi	r19, 0x07	; 7
    44ca:	39 83       	std	Y+1, r19	; 0x01
    44cc:	28 83       	st	Y, r18
    44ce:	cb e0       	ldi	r28, 0x0B	; 11
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    44d0:	2b c0       	rjmp	.+86     	; 0x4528 <txMilliwattsToSettings+0x19e>
    44d2:	2e 3b       	cpi	r18, 0xBE	; 190
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    44d4:	fa e0       	ldi	r31, 0x0A	; 10
    44d6:	3f 07       	cpc	r19, r31
    44d8:	38 f4       	brcc	.+14     	; 0x44e8 <txMilliwattsToSettings+0x15e>
    44da:	24 ec       	ldi	r18, 0xC4	; 196
	{
		index = 12;
		*powerMW = 2500;
    44dc:	39 e0       	ldi	r19, 0x09	; 9
    44de:	39 83       	std	Y+1, r19	; 0x01
    44e0:	28 83       	st	Y, r18
    44e2:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    44e4:	cc e0       	ldi	r28, 0x0C	; 12
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    44e6:	20 c0       	rjmp	.+64     	; 0x4528 <txMilliwattsToSettings+0x19e>
    44e8:	2c 3a       	cpi	r18, 0xAC	; 172
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    44ea:	9d e0       	ldi	r25, 0x0D	; 13
    44ec:	39 07       	cpc	r19, r25
    44ee:	38 f4       	brcc	.+14     	; 0x44fe <txMilliwattsToSettings+0x174>
    44f0:	28 eb       	ldi	r18, 0xB8	; 184
	{
		index = 13;
		*powerMW = 3000;
    44f2:	3b e0       	ldi	r19, 0x0B	; 11
    44f4:	39 83       	std	Y+1, r19	; 0x01
    44f6:	28 83       	st	Y, r18
    44f8:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    44fa:	cd e0       	ldi	r28, 0x0D	; 13
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    44fc:	15 c0       	rjmp	.+42     	; 0x4528 <txMilliwattsToSettings+0x19e>
    44fe:	24 39       	cpi	r18, 0x94	; 148
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    4500:	31 41       	sbci	r19, 0x11	; 17
    4502:	38 f4       	brcc	.+14     	; 0x4512 <txMilliwattsToSettings+0x188>
    4504:	20 ea       	ldi	r18, 0xA0	; 160
	{
		index = 14;
		*powerMW = 4000;
    4506:	3f e0       	ldi	r19, 0x0F	; 15
    4508:	39 83       	std	Y+1, r19	; 0x01
    450a:	28 83       	st	Y, r18
    450c:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    450e:	ce e0       	ldi	r28, 0x0E	; 14
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    4510:	0b c0       	rjmp	.+22     	; 0x4528 <txMilliwattsToSettings+0x19e>
    4512:	b1 2c       	mov	r11, r1
	return(result);
}

EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    4514:	04 c0       	rjmp	.+8      	; 0x451e <txMilliwattsToSettings+0x194>
    4516:	0f 2e       	mov	r0, r31
		}
	}

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    4518:	f5 ef       	ldi	r31, 0xF5	; 245
    451a:	bf 2e       	mov	r11, r31
    451c:	f0 2d       	mov	r31, r0
    451e:	28 e8       	ldi	r18, 0x88	; 136
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    4520:	33 e1       	ldi	r19, 0x13	; 19
    4522:	39 83       	std	Y+1, r19	; 0x01
    4524:	28 83       	st	Y, r18
    4526:	cf e0       	ldi	r28, 0x0F	; 15
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    4528:	81 30       	cpi	r24, 0x01	; 1
		*powerMW = 5000;
	}

	if(band == BAND_80M)
    452a:	71 f4       	brne	.+28     	; 0x4548 <txMilliwattsToSettings+0x1be>
    452c:	8c 2f       	mov	r24, r28
	{
		*driveLevel = eeprom_read_byte(&ee_80m_power_table[index]);
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	87 5a       	subi	r24, 0xA7	; 167
    4532:	9f 4f       	sbci	r25, 0xFF	; 255
    4534:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    4538:	f8 01       	movw	r30, r16
    453a:	80 83       	st	Z, r24
    453c:	f6 01       	movw	r30, r12
		*modLevelHigh = 0;
    453e:	10 82       	st	Z, r1
    4540:	f7 01       	movw	r30, r14
		*modLevelLow = 0;
    4542:	10 82       	st	Z, r1
    4544:	8b 2d       	mov	r24, r11
    4546:	50 c0       	rjmp	.+160    	; 0x45e8 <txMilliwattsToSettings+0x25e>
    4548:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <g_2m_modulationFormat>
		*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);
	}
	else
	{
		if(g_2m_modulationFormat == MODE_AM)
    454c:	81 11       	cpse	r24, r1
    454e:	17 c0       	rjmp	.+46     	; 0x457e <txMilliwattsToSettings+0x1f4>
    4550:	d0 e0       	ldi	r29, 0x00	; 0
		{
			*driveLevel = eeprom_read_byte(&ee_2m_am_power_table[index]);
    4552:	ce 01       	movw	r24, r28
    4554:	87 59       	subi	r24, 0x97	; 151
    4556:	9f 4f       	sbci	r25, 0xFF	; 255
    4558:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    455c:	f8 01       	movw	r30, r16
    455e:	80 83       	st	Z, r24
    4560:	ce 01       	movw	r24, r28
			*modLevelHigh = eeprom_read_byte(&ee_2m_am_drive_high_table[index]);
    4562:	87 57       	subi	r24, 0x77	; 119
    4564:	9f 4f       	sbci	r25, 0xFF	; 255
    4566:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    456a:	f6 01       	movw	r30, r12
    456c:	80 83       	st	Z, r24
    456e:	ce 01       	movw	r24, r28
			*modLevelLow = eeprom_read_byte(&ee_2m_am_drive_low_table[index]);
    4570:	87 58       	subi	r24, 0x87	; 135
    4572:	9f 4f       	sbci	r25, 0xFF	; 255
    4574:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    4578:	f7 01       	movw	r30, r14
    457a:	80 83       	st	Z, r24
    457c:	11 c0       	rjmp	.+34     	; 0x45a0 <txMilliwattsToSettings+0x216>
    457e:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else
		{
			*driveLevel = eeprom_read_byte(&ee_2m_cw_power_table[index]);
    4580:	ce 01       	movw	r24, r28
    4582:	87 56       	subi	r24, 0x67	; 103
    4584:	9f 4f       	sbci	r25, 0xFF	; 255
    4586:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    458a:	f8 01       	movw	r30, r16
    458c:	80 83       	st	Z, r24
    458e:	ce 01       	movw	r24, r28
			*modLevelHigh = eeprom_read_byte(&ee_2m_cw_drive_table[index]);
    4590:	87 55       	subi	r24, 0x57	; 87
    4592:	9f 4f       	sbci	r25, 0xFF	; 255
    4594:	0e 94 99 31 	call	0x6332	; 0x6332 <eeprom_read_byte>
    4598:	f6 01       	movw	r30, r12
    459a:	80 83       	st	Z, r24
    459c:	f7 01       	movw	r30, r14
			*modLevelLow = *modLevelHigh;
    459e:	80 83       	st	Z, r24
    45a0:	8b 2d       	mov	r24, r11
		}

		*driveLevel = MIN(*driveLevel, MAX_2M_PWR_SETTING);
    45a2:	22 c0       	rjmp	.+68     	; 0x45e8 <txMilliwattsToSettings+0x25e>
    45a4:	8f ec       	ldi	r24, 0xCF	; 207
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    45a6:	20 c0       	rjmp	.+64     	; 0x45e8 <txMilliwattsToSettings+0x25e>
    45a8:	33 23       	and	r19, r19
	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    45aa:	14 f4       	brge	.+4      	; 0x45b0 <txMilliwattsToSettings+0x226>
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	39 83       	std	Y+1, r19	; 0x01
    45b2:	28 83       	st	Y, r18
    45b4:	25 30       	cpi	r18, 0x05	; 5

	if(*powerMW < 5)
    45b6:	31 05       	cpc	r19, r1
    45b8:	08 f4       	brcc	.+2      	; 0x45bc <txMilliwattsToSettings+0x232>
    45ba:	06 cf       	rjmp	.-500    	; 0x43c8 <txMilliwattsToSettings+0x3e>
    45bc:	0a cf       	rjmp	.-492    	; 0x43d2 <txMilliwattsToSettings+0x48>
    45be:	28 81       	ld	r18, Y
		{
			maxPwr = MAX_TX_POWER_2M_MW;
		}
	}

	if((int16_t)*powerMW > maxPwr)
    45c0:	39 81       	ldd	r19, Y+1	; 0x01
    45c2:	29 3e       	cpi	r18, 0xE9	; 233
    45c4:	f3 e0       	ldi	r31, 0x03	; 3
    45c6:	3f 07       	cpc	r19, r31
    45c8:	7c f3       	brlt	.-34     	; 0x45a8 <txMilliwattsToSettings+0x21e>
    45ca:	5e cf       	rjmp	.-324    	; 0x4488 <txMilliwattsToSettings+0xfe>
    45cc:	28 81       	ld	r18, Y
    45ce:	39 81       	ldd	r19, Y+1	; 0x01
    45d0:	21 3d       	cpi	r18, 0xD1	; 209
    45d2:	97 e0       	ldi	r25, 0x07	; 7
    45d4:	39 07       	cpc	r19, r25
    45d6:	44 f3       	brlt	.-48     	; 0x45a8 <txMilliwattsToSettings+0x21e>
    45d8:	72 cf       	rjmp	.-284    	; 0x44be <txMilliwattsToSettings+0x134>
    45da:	28 81       	ld	r18, Y
    45dc:	39 81       	ldd	r19, Y+1	; 0x01
    45de:	29 38       	cpi	r18, 0x89	; 137
    45e0:	e3 e1       	ldi	r30, 0x13	; 19
    45e2:	3e 07       	cpc	r19, r30
    45e4:	0c f3       	brlt	.-62     	; 0x45a8 <txMilliwattsToSettings+0x21e>
    45e6:	97 cf       	rjmp	.-210    	; 0x4516 <txMilliwattsToSettings+0x18c>

		*driveLevel = MIN(*driveLevel, MAX_2M_PWR_SETTING);
	}

	return(ec);
}
    45e8:	df 91       	pop	r29
    45ea:	cf 91       	pop	r28
    45ec:	1f 91       	pop	r17
    45ee:	0f 91       	pop	r16
    45f0:	ff 90       	pop	r15
    45f2:	ef 90       	pop	r14
    45f4:	df 90       	pop	r13
    45f6:	cf 90       	pop	r12
    45f8:	bf 90       	pop	r11
    45fa:	08 95       	ret

000045fc <txIsAntennaForBand>:

/**
 */
BOOL __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    45fc:	cf 93       	push	r28
    45fe:	df 93       	push	r29
    4600:	00 d0       	rcall	.+0      	; 0x4602 <txIsAntennaForBand+0x6>
    4602:	cd b7       	in	r28, 0x3d	; 61
    4604:	de b7       	in	r29, 0x3e	; 62
	BOOL result = FALSE;
    4606:	19 82       	std	Y+1, r1	; 0x01
	RadioBand b = txGetBand();
    4608:	ae da       	rcall	.-2724   	; 0x3b66 <txGetBand>
    460a:	8a 83       	std	Y+2, r24	; 0x02
    460c:	8a 81       	ldd	r24, Y+2	; 0x02

	if(b == BAND_INVALID)
    460e:	82 30       	cpi	r24, 0x02	; 2
    4610:	11 f4       	brne	.+4      	; 0x4616 <txIsAntennaForBand+0x1a>
    4612:	89 81       	ldd	r24, Y+1	; 0x01
	{
		return( result);
    4614:	1f c0       	rjmp	.+62     	; 0x4654 <txIsAntennaForBand+0x58>
    4616:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <g_antenna_connect_state>
	}

	switch(g_antenna_connect_state)
    461a:	88 2f       	mov	r24, r24
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	83 30       	cpi	r24, 0x03	; 3
    4620:	91 05       	cpc	r25, r1
    4622:	49 f0       	breq	.+18     	; 0x4636 <txIsAntennaForBand+0x3a>
    4624:	84 30       	cpi	r24, 0x04	; 4
    4626:	91 05       	cpc	r25, r1
    4628:	19 f0       	breq	.+6      	; 0x4630 <txIsAntennaForBand+0x34>
    462a:	02 97       	sbiw	r24, 0x02	; 2
    462c:	59 f0       	breq	.+22     	; 0x4644 <txIsAntennaForBand+0x48>
    462e:	11 c0       	rjmp	.+34     	; 0x4652 <txIsAntennaForBand+0x56>

		default:
		{

		}
		break;
    4630:	81 e0       	ldi	r24, 0x01	; 1

	switch(g_antenna_connect_state)
	{
		case ANT_2M_AND_80M_CONNECTED:
		{
			result = TRUE;
    4632:	89 83       	std	Y+1, r24	; 0x01
    4634:	0e c0       	rjmp	.+28     	; 0x4652 <txIsAntennaForBand+0x56>
		}
		break;
    4636:	81 e0       	ldi	r24, 0x01	; 1

		case ANT_80M_CONNECTED:
		{
			result = (b == BAND_80M);
    4638:	9a 81       	ldd	r25, Y+2	; 0x02
    463a:	91 30       	cpi	r25, 0x01	; 1
    463c:	09 f0       	breq	.+2      	; 0x4640 <txIsAntennaForBand+0x44>
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	89 83       	std	Y+1, r24	; 0x01
    4642:	07 c0       	rjmp	.+14     	; 0x4652 <txIsAntennaForBand+0x56>
		}
		break;
    4644:	81 e0       	ldi	r24, 0x01	; 1

		case ANT_2M_CONNECTED:
		{
			result = (b == BAND_2M);
    4646:	9a 81       	ldd	r25, Y+2	; 0x02
    4648:	99 23       	and	r25, r25
    464a:	09 f0       	breq	.+2      	; 0x464e <txIsAntennaForBand+0x52>
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	89 83       	std	Y+1, r24	; 0x01
    4650:	00 00       	nop
		}
		break;
    4652:	89 81       	ldd	r24, Y+1	; 0x01

		}
		break;
	}

	return( result);
    4654:	0f 90       	pop	r0
}
    4656:	0f 90       	pop	r0
    4658:	df 91       	pop	r29
    465a:	cf 91       	pop	r28
    465c:	08 95       	ret

0000465e <timeDif>:
{
	int32_t dif; // = difftime(now, g_event_start_time); // returns arg1 - arg2
	if(a > b)
		dif = a - b;
	else
		dif = -(b - a);
    465e:	62 1b       	sub	r22, r18
    4660:	73 0b       	sbc	r23, r19
    4662:	84 0b       	sbc	r24, r20
    4664:	95 0b       	sbc	r25, r21

	return dif;
}
    4666:	08 95       	ret

00004668 <ds3231_get_epoch>:
	return weekdayname[JND % 7];
}
#endif

time_t ds3231_get_epoch(EC *result)
{
    4668:	4f 92       	push	r4
    466a:	5f 92       	push	r5
    466c:	6f 92       	push	r6
    466e:	7f 92       	push	r7
    4670:	af 92       	push	r10
    4672:	bf 92       	push	r11
    4674:	cf 92       	push	r12
    4676:	df 92       	push	r13
    4678:	ef 92       	push	r14
    467a:	ff 92       	push	r15
    467c:	0f 93       	push	r16
    467e:	1f 93       	push	r17
    4680:	cf 93       	push	r28
    4682:	df 93       	push	r29
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	27 97       	sbiw	r28, 0x07	; 7
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	f8 94       	cli
    468e:	de bf       	out	0x3e, r29	; 62
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	cd bf       	out	0x3d, r28	; 61
    4694:	5c 01       	movw	r10, r24
	time_t epoch = 0;
	uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
    4696:	ae 01       	movw	r20, r28
    4698:	4f 5f       	subi	r20, 0xFF	; 255
    469a:	5f 4f       	sbci	r21, 0xFF	; 255
    469c:	87 e0       	ldi	r24, 0x07	; 7
    469e:	fa 01       	movw	r30, r20
    46a0:	11 92       	st	Z+, r1
    46a2:	8a 95       	dec	r24
    46a4:	e9 f7       	brne	.-6      	; 0x46a0 <ds3231_get_epoch+0x38>
	BOOL res;

	res = i2c_device_read(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, data, 7);
    46a6:	27 e0       	ldi	r18, 0x07	; 7
    46a8:	60 e0       	ldi	r22, 0x00	; 0
    46aa:	80 ed       	ldi	r24, 0xD0	; 208
    46ac:	c6 d2       	rcall	.+1420   	; 0x4c3a <i2c_device_read>

	if(!res)
    46ae:	81 11       	cpse	r24, r1
    46b0:	f3 c0       	rjmp	.+486    	; 0x4898 <ds3231_get_epoch+0x230>
		uint8_t minutes;
		uint8_t seconds;
		BOOL am_pm;
		BOOL twelvehour;

		year += data[6] & 0x0f;
    46b2:	2f 81       	ldd	r18, Y+7	; 0x07
    46b4:	82 2f       	mov	r24, r18
    46b6:	8f 70       	andi	r24, 0x0F	; 15
    46b8:	c8 2e       	mov	r12, r24
    46ba:	d1 2c       	mov	r13, r1
    46bc:	c6 01       	movw	r24, r12
    46be:	8c 59       	subi	r24, 0x9C	; 156
    46c0:	9f 4f       	sbci	r25, 0xFF	; 255
		year += 10*((data[6] & 0xf0) >> 4);
    46c2:	22 95       	swap	r18
    46c4:	2f 70       	andi	r18, 0x0F	; 15
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	69 01       	movw	r12, r18
    46ca:	cc 0c       	add	r12, r12
    46cc:	dd 1c       	adc	r13, r13
    46ce:	22 0f       	add	r18, r18
    46d0:	33 1f       	adc	r19, r19
    46d2:	22 0f       	add	r18, r18
    46d4:	33 1f       	adc	r19, r19
    46d6:	22 0f       	add	r18, r18
    46d8:	33 1f       	adc	r19, r19
    46da:	2c 0d       	add	r18, r12
    46dc:	3d 1d       	adc	r19, r13
    46de:	69 01       	movw	r12, r18
    46e0:	c8 0e       	add	r12, r24
    46e2:	d9 1e       	adc	r13, r25
		ltm.tm_year = year; // year since 1900

		year += 1900; // adjust year to calendar year
    46e4:	36 01       	movw	r6, r12
    46e6:	f4 e9       	ldi	r31, 0x94	; 148
    46e8:	6f 1a       	sub	r6, r31
    46ea:	f8 ef       	ldi	r31, 0xF8	; 248
    46ec:	7f 0a       	sbc	r7, r31

		month = data[5] & 0x0f;
    46ee:	8e 81       	ldd	r24, Y+6	; 0x06
    46f0:	98 2f       	mov	r25, r24
    46f2:	9f 70       	andi	r25, 0x0F	; 15
		month += 10*((data[5] & 0xf0) >> 4);
    46f4:	82 95       	swap	r24
    46f6:	8f 70       	andi	r24, 0x0F	; 15
    46f8:	88 0f       	add	r24, r24
    46fa:	08 2f       	mov	r16, r24
    46fc:	00 0f       	add	r16, r16
    46fe:	00 0f       	add	r16, r16
    4700:	80 0f       	add	r24, r16
    4702:	08 2f       	mov	r16, r24
    4704:	09 0f       	add	r16, r25
		ltm.tm_mon = month - 1; // mon 0 to 11

		date = data[4] & 0x0f;
    4706:	8d 81       	ldd	r24, Y+5	; 0x05
    4708:	98 2f       	mov	r25, r24
    470a:	9f 70       	andi	r25, 0x0F	; 15
		date += 10*((data[4] & 0xf0) >> 4);

		ltm.tm_mday = date; // month day 1 to 31
    470c:	82 95       	swap	r24
    470e:	8f 70       	andi	r24, 0x0F	; 15
    4710:	88 0f       	add	r24, r24
    4712:	58 2e       	mov	r5, r24
    4714:	55 0c       	add	r5, r5
    4716:	55 0c       	add	r5, r5
    4718:	85 0d       	add	r24, r5
    471a:	58 2e       	mov	r5, r24
    471c:	59 0e       	add	r5, r25

		ltm.tm_yday = 0;
		for(uint8_t mon=1; mon<month; mon++) // months from 1 to 11 (excludes partial month)
    471e:	02 30       	cpi	r16, 0x02	; 2
    4720:	68 f0       	brcs	.+26     	; 0x473c <ds3231_get_epoch+0xd4>
    4722:	e1 2c       	mov	r14, r1
    4724:	f1 2c       	mov	r15, r1
    4726:	11 e0       	ldi	r17, 0x01	; 1
		{
		  ltm.tm_yday += month_length(year, mon);;
    4728:	61 2f       	mov	r22, r17
    472a:	c3 01       	movw	r24, r6
    472c:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <month_length>
    4730:	e8 0e       	add	r14, r24
    4732:	f1 1c       	adc	r15, r1
		date += 10*((data[4] & 0xf0) >> 4);

		ltm.tm_mday = date; // month day 1 to 31

		ltm.tm_yday = 0;
		for(uint8_t mon=1; mon<month; mon++) // months from 1 to 11 (excludes partial month)
    4734:	1f 5f       	subi	r17, 0xFF	; 255
    4736:	01 13       	cpse	r16, r17
    4738:	f7 cf       	rjmp	.-18     	; 0x4728 <ds3231_get_epoch+0xc0>
    473a:	02 c0       	rjmp	.+4      	; 0x4740 <ds3231_get_epoch+0xd8>
		date = data[4] & 0x0f;
		date += 10*((data[4] & 0xf0) >> 4);

		ltm.tm_mday = date; // month day 1 to 31

		ltm.tm_yday = 0;
    473c:	e1 2c       	mov	r14, r1
    473e:	f1 2c       	mov	r15, r1
		for(uint8_t mon=1; mon<month; mon++) // months from 1 to 11 (excludes partial month)
		{
		  ltm.tm_yday += month_length(year, mon);;
		}

		ltm.tm_yday += (ltm.tm_mday - 1);
    4740:	85 2d       	mov	r24, r5
    4742:	55 0c       	add	r5, r5
    4744:	99 0b       	sbc	r25, r25
    4746:	01 97       	sbiw	r24, 0x01	; 1
    4748:	e8 0e       	add	r14, r24
    474a:	f9 1e       	adc	r15, r25

		seconds = 10 * ((data[0] & 0xf0) >> 4);
    474c:	29 81       	ldd	r18, Y+1	; 0x01
    474e:	42 2e       	mov	r4, r18
    4750:	46 94       	lsr	r4
    4752:	46 94       	lsr	r4
    4754:	46 94       	lsr	r4
    4756:	46 94       	lsr	r4
    4758:	44 0c       	add	r4, r4
    475a:	94 2d       	mov	r25, r4
    475c:	99 0f       	add	r25, r25
    475e:	99 0f       	add	r25, r25
    4760:	84 2d       	mov	r24, r4
    4762:	89 0f       	add	r24, r25
		seconds += (data[0] & 0x0f);
    4764:	92 2f       	mov	r25, r18
    4766:	9f 70       	andi	r25, 0x0F	; 15
    4768:	49 2e       	mov	r4, r25
    476a:	48 0e       	add	r4, r24

		minutes = 10 * ((data[1] & 0xf0) >> 4);
    476c:	3a 81       	ldd	r19, Y+2	; 0x02
    476e:	93 2f       	mov	r25, r19
    4770:	92 95       	swap	r25
    4772:	9f 70       	andi	r25, 0x0F	; 15
    4774:	99 0f       	add	r25, r25
    4776:	29 2f       	mov	r18, r25
    4778:	22 0f       	add	r18, r18
    477a:	22 0f       	add	r18, r18
    477c:	89 2f       	mov	r24, r25
    477e:	82 0f       	add	r24, r18
		minutes += (data[1] & 0x0f);
    4780:	93 2f       	mov	r25, r19
    4782:	9f 70       	andi	r25, 0x0F	; 15
    4784:	98 0f       	add	r25, r24

		am_pm = ((data[2] >> 5) & 0x01);
    4786:	2b 81       	ldd	r18, Y+3	; 0x03
    4788:	25 fb       	bst	r18, 5
    478a:	33 27       	eor	r19, r19
    478c:	30 f9       	bld	r19, 0

		hours = 10 * ((data[2] >> 4) & 0x01);
    478e:	24 fb       	bst	r18, 4
    4790:	aa 27       	eor	r26, r26
    4792:	a0 f9       	bld	r26, 0
    4794:	aa 0f       	add	r26, r26
    4796:	8a 2f       	mov	r24, r26
    4798:	88 0f       	add	r24, r24
    479a:	88 0f       	add	r24, r24
    479c:	a8 0f       	add	r26, r24
		hours += (data[2] & 0x0f);
    479e:	82 2f       	mov	r24, r18
    47a0:	8f 70       	andi	r24, 0x0F	; 15
    47a2:	a8 0f       	add	r26, r24

		twelvehour = ((data[2] >> 6) & 0x01);

		if(twelvehour)
    47a4:	26 ff       	sbrs	r18, 6
    47a6:	04 c0       	rjmp	.+8      	; 0x47b0 <ds3231_get_epoch+0x148>
		{
			if(am_pm) hours += 12;
    47a8:	33 23       	and	r19, r19
    47aa:	21 f0       	breq	.+8      	; 0x47b4 <ds3231_get_epoch+0x14c>
    47ac:	a4 5f       	subi	r26, 0xF4	; 244
    47ae:	02 c0       	rjmp	.+4      	; 0x47b4 <ds3231_get_epoch+0x14c>
		}
		else // am_pm holds 20 hours flag
		{
			if(am_pm) hours += 20;
    47b0:	31 11       	cpse	r19, r1
    47b2:	ac 5e       	subi	r26, 0xEC	; 236

		ltm.tm_hour = hours;
		ltm.tm_min = minutes;
		ltm.tm_sec = seconds;

		epoch = ltm.tm_sec + ltm.tm_min*60 + ltm.tm_hour*3600L + ltm.tm_yday*86400L +
    47b4:	04 2c       	mov	r0, r4
    47b6:	00 0c       	add	r0, r0
    47b8:	55 08       	sbc	r5, r5
    47ba:	8c e3       	ldi	r24, 0x3C	; 60
    47bc:	98 02       	muls	r25, r24
    47be:	40 0c       	add	r4, r0
    47c0:	51 1c       	adc	r5, r1
    47c2:	11 24       	eor	r1, r1
    47c4:	05 2c       	mov	r0, r5
    47c6:	00 0c       	add	r0, r0
    47c8:	66 08       	sbc	r6, r6
    47ca:	77 08       	sbc	r7, r7
    47cc:	0a 2e       	mov	r0, r26
    47ce:	00 0c       	add	r0, r0
    47d0:	bb 0b       	sbc	r27, r27
    47d2:	20 e1       	ldi	r18, 0x10	; 16
    47d4:	3e e0       	ldi	r19, 0x0E	; 14
    47d6:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <__usmulhisi3>
    47da:	46 0e       	add	r4, r22
    47dc:	57 1e       	adc	r5, r23
    47de:	68 1e       	adc	r6, r24
    47e0:	79 1e       	adc	r7, r25
    47e2:	d7 01       	movw	r26, r14
    47e4:	20 e8       	ldi	r18, 0x80	; 128
    47e6:	31 e5       	ldi	r19, 0x51	; 81
    47e8:	41 e0       	ldi	r20, 0x01	; 1
    47ea:	50 e0       	ldi	r21, 0x00	; 0
    47ec:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <__mulshisi3>
    47f0:	46 0e       	add	r4, r22
    47f2:	57 1e       	adc	r5, r23
    47f4:	68 1e       	adc	r6, r24
    47f6:	79 1e       	adc	r7, r25
    47f8:	d6 01       	movw	r26, r12
    47fa:	a6 54       	subi	r26, 0x46	; 70
    47fc:	b1 09       	sbc	r27, r1
    47fe:	20 e8       	ldi	r18, 0x80	; 128
    4800:	33 e3       	ldi	r19, 0x33	; 51
    4802:	41 ee       	ldi	r20, 0xE1	; 225
    4804:	51 e0       	ldi	r21, 0x01	; 1
    4806:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <__mulshisi3>
    480a:	46 0e       	add	r4, r22
    480c:	57 1e       	adc	r5, r23
    480e:	68 1e       	adc	r6, r24
    4810:	79 1e       	adc	r7, r25
    4812:	c6 01       	movw	r24, r12
    4814:	85 54       	subi	r24, 0x45	; 69
    4816:	91 09       	sbc	r25, r1
    4818:	dc 01       	movw	r26, r24
    481a:	0a f4       	brpl	.+2      	; 0x481e <ds3231_get_epoch+0x1b6>
    481c:	13 96       	adiw	r26, 0x03	; 3
    481e:	b5 95       	asr	r27
    4820:	a7 95       	ror	r26
    4822:	b5 95       	asr	r27
    4824:	a7 95       	ror	r26
    4826:	20 e8       	ldi	r18, 0x80	; 128
    4828:	31 e5       	ldi	r19, 0x51	; 81
    482a:	41 e0       	ldi	r20, 0x01	; 1
    482c:	50 e0       	ldi	r21, 0x00	; 0
    482e:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <__mulshisi3>
    4832:	46 0e       	add	r4, r22
    4834:	57 1e       	adc	r5, r23
    4836:	68 1e       	adc	r6, r24
    4838:	79 1e       	adc	r7, r25
    483a:	c6 01       	movw	r24, r12
    483c:	01 97       	sbiw	r24, 0x01	; 1
    483e:	64 e6       	ldi	r22, 0x64	; 100
    4840:	70 e0       	ldi	r23, 0x00	; 0
    4842:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divmodhi4>
    4846:	db 01       	movw	r26, r22
    4848:	20 e8       	ldi	r18, 0x80	; 128
    484a:	3e ea       	ldi	r19, 0xAE	; 174
    484c:	4e ef       	ldi	r20, 0xFE	; 254
    484e:	5f ef       	ldi	r21, 0xFF	; 255
    4850:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <__mulshisi3>
    4854:	46 0e       	add	r4, r22
    4856:	57 1e       	adc	r5, r23
    4858:	68 1e       	adc	r6, r24
    485a:	79 1e       	adc	r7, r25
    485c:	c6 01       	movw	r24, r12
    485e:	85 5d       	subi	r24, 0xD5	; 213
    4860:	9e 4f       	sbci	r25, 0xFE	; 254
    4862:	60 e9       	ldi	r22, 0x90	; 144
    4864:	71 e0       	ldi	r23, 0x01	; 1
    4866:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divmodhi4>
    486a:	db 01       	movw	r26, r22
    486c:	20 e8       	ldi	r18, 0x80	; 128
    486e:	31 e5       	ldi	r19, 0x51	; 81
    4870:	41 e0       	ldi	r20, 0x01	; 1
    4872:	50 e0       	ldi	r21, 0x00	; 0
    4874:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <__mulshisi3>
    4878:	64 0d       	add	r22, r4
    487a:	75 1d       	adc	r23, r5
    487c:	86 1d       	adc	r24, r6
    487e:	97 1d       	adc	r25, r7
		(ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
		((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
	}

	if(result) *result = res ? ERROR_CODE_RTC_NONRESPONSIVE : ERROR_CODE_NO_ERROR;
    4880:	a1 14       	cp	r10, r1
    4882:	b1 04       	cpc	r11, r1
    4884:	79 f0       	breq	.+30     	; 0x48a4 <ds3231_get_epoch+0x23c>
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	04 c0       	rjmp	.+8      	; 0x4892 <ds3231_get_epoch+0x22a>
}
#endif

time_t ds3231_get_epoch(EC *result)
{
	time_t epoch = 0;
    488a:	60 e0       	ldi	r22, 0x00	; 0
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	cb 01       	movw	r24, r22
		epoch = ltm.tm_sec + ltm.tm_min*60 + ltm.tm_hour*3600L + ltm.tm_yday*86400L +
		(ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
		((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
	}

	if(result) *result = res ? ERROR_CODE_RTC_NONRESPONSIVE : ERROR_CODE_NO_ERROR;
    4890:	2c ef       	ldi	r18, 0xFC	; 252
    4892:	f5 01       	movw	r30, r10
    4894:	20 83       	st	Z, r18
    4896:	06 c0       	rjmp	.+12     	; 0x48a4 <ds3231_get_epoch+0x23c>
    4898:	a1 14       	cp	r10, r1
    489a:	b1 04       	cpc	r11, r1
    489c:	b1 f7       	brne	.-20     	; 0x488a <ds3231_get_epoch+0x222>
}
#endif

time_t ds3231_get_epoch(EC *result)
{
	time_t epoch = 0;
    489e:	60 e0       	ldi	r22, 0x00	; 0
    48a0:	70 e0       	ldi	r23, 0x00	; 0
    48a2:	cb 01       	movw	r24, r22
		((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
	}

	if(result) *result = res ? ERROR_CODE_RTC_NONRESPONSIVE : ERROR_CODE_NO_ERROR;
	return epoch;
}
    48a4:	27 96       	adiw	r28, 0x07	; 7
    48a6:	0f b6       	in	r0, 0x3f	; 63
    48a8:	f8 94       	cli
    48aa:	de bf       	out	0x3e, r29	; 62
    48ac:	0f be       	out	0x3f, r0	; 63
    48ae:	cd bf       	out	0x3d, r28	; 61
    48b0:	df 91       	pop	r29
    48b2:	cf 91       	pop	r28
    48b4:	1f 91       	pop	r17
    48b6:	0f 91       	pop	r16
    48b8:	ff 90       	pop	r15
    48ba:	ef 90       	pop	r14
    48bc:	df 90       	pop	r13
    48be:	cf 90       	pop	r12
    48c0:	bf 90       	pop	r11
    48c2:	af 90       	pop	r10
    48c4:	7f 90       	pop	r7
    48c6:	6f 90       	pop	r6
    48c8:	5f 90       	pop	r5
    48ca:	4f 90       	pop	r4
    48cc:	08 95       	ret

000048ce <ds3231_get_temp>:

	BOOL ds3231_get_temp(int16_t * val)
	{
    48ce:	0f 93       	push	r16
    48d0:	1f 93       	push	r17
    48d2:	cf 93       	push	r28
    48d4:	df 93       	push	r29
    48d6:	00 d0       	rcall	.+0      	; 0x48d8 <ds3231_get_temp+0xa>
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
    48dc:	8c 01       	movw	r16, r24
		uint8_t data[2] = { 0, 0 };
    48de:	19 82       	std	Y+1, r1	; 0x01
    48e0:	1a 82       	std	Y+2, r1	; 0x02
		BOOL result = i2c_device_read(DS3231_I2C_SLAVE_ADDR, RTC_TEMP_MSB, data, 2);
    48e2:	22 e0       	ldi	r18, 0x02	; 2
    48e4:	ae 01       	movw	r20, r28
    48e6:	4f 5f       	subi	r20, 0xFF	; 255
    48e8:	5f 4f       	sbci	r21, 0xFF	; 255
    48ea:	61 e1       	ldi	r22, 0x11	; 17
    48ec:	80 ed       	ldi	r24, 0xD0	; 208
    48ee:	a5 d1       	rcall	.+842    	; 0x4c3a <i2c_device_read>

		if(!result)
    48f0:	81 11       	cpse	r24, r1
    48f2:	09 c0       	rjmp	.+18     	; 0x4906 <ds3231_get_temp+0x38>
		{
			*val = data[0];
			*val = *val << 8;
			*val |= data[1];
    48f4:	29 81       	ldd	r18, Y+1	; 0x01
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	32 2f       	mov	r19, r18
    48fa:	22 27       	eor	r18, r18
    48fc:	9a 81       	ldd	r25, Y+2	; 0x02
    48fe:	29 2b       	or	r18, r25
    4900:	f8 01       	movw	r30, r16
    4902:	31 83       	std	Z+1, r19	; 0x01
    4904:	20 83       	st	Z, r18
		}

		return result;
	}
    4906:	0f 90       	pop	r0
    4908:	0f 90       	pop	r0
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	1f 91       	pop	r17
    4910:	0f 91       	pop	r16
    4912:	08 95       	ret

00004914 <ds3231_set_date_time>:
		}
	}
#endif // DATE_STRING_SUPPORT_ENABLED

void ds3231_set_date_time(char * dateString, ClockSetting setting) /* "2018-03-23T18:00:00Z" */
{
    4914:	cf 93       	push	r28
    4916:	df 93       	push	r29
    4918:	cd b7       	in	r28, 0x3d	; 61
    491a:	de b7       	in	r29, 0x3e	; 62
    491c:	27 97       	sbiw	r28, 0x07	; 7
    491e:	0f b6       	in	r0, 0x3f	; 63
    4920:	f8 94       	cli
    4922:	de bf       	out	0x3e, r29	; 62
    4924:	0f be       	out	0x3f, r0	; 63
    4926:	cd bf       	out	0x3d, r28	; 61
    4928:	fc 01       	movw	r30, r24
	uint8_t data[7] = { 0, 0, 0, 1, 0, 0, 0 };
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	8c 83       	std	Y+4, r24	; 0x04
	int temp, year=2000, month, date;

	data[0] = dateString[18] - '0'; /* seconds */
	data[0] |= ((dateString[17] - '0') << 4); /*10s of seconds */
    492e:	81 89       	ldd	r24, Z+17	; 0x11
    4930:	98 2f       	mov	r25, r24
    4932:	92 95       	swap	r25
    4934:	90 7f       	andi	r25, 0xF0	; 240
    4936:	82 89       	ldd	r24, Z+18	; 0x12
    4938:	80 53       	subi	r24, 0x30	; 48
    493a:	89 2b       	or	r24, r25
    493c:	89 83       	std	Y+1, r24	; 0x01
	data[1] = dateString[15] - '0'; /* minutes */
	data[1] |= ((dateString[14] - '0') << 4); /* 10s of minutes */
    493e:	86 85       	ldd	r24, Z+14	; 0x0e
    4940:	98 2f       	mov	r25, r24
    4942:	92 95       	swap	r25
    4944:	90 7f       	andi	r25, 0xF0	; 240
    4946:	87 85       	ldd	r24, Z+15	; 0x0f
    4948:	80 53       	subi	r24, 0x30	; 48
    494a:	89 2b       	or	r24, r25
    494c:	8a 83       	std	Y+2, r24	; 0x02
	data[2] = dateString[12] - '0'; /* hours */
	data[2] |= ((dateString[11] - '0') << 4); /* 10s of hours - sets 24-hour format (not AM/PM) */
    494e:	83 85       	ldd	r24, Z+11	; 0x0b
    4950:	98 2f       	mov	r25, r24
    4952:	92 95       	swap	r25
    4954:	90 7f       	andi	r25, 0xF0	; 240
    4956:	84 85       	ldd	r24, Z+12	; 0x0c
    4958:	80 53       	subi	r24, 0x30	; 48
    495a:	89 2b       	or	r24, r25
    495c:	8b 83       	std	Y+3, r24	; 0x03
	//data[3] = Skip day of week
	data[4] = dateString[9] - '0'; /* day of month digit 1 */
	date = data[4];
	temp = dateString[8] - '0';
	date += 10*temp;
	data[4] |= (temp << 4); /* day of month digit 10 */
    495e:	80 85       	ldd	r24, Z+8	; 0x08
    4960:	98 2f       	mov	r25, r24
    4962:	92 95       	swap	r25
    4964:	90 7f       	andi	r25, 0xF0	; 240
    4966:	81 85       	ldd	r24, Z+9	; 0x09
    4968:	80 53       	subi	r24, 0x30	; 48
    496a:	89 2b       	or	r24, r25
    496c:	8d 83       	std	Y+5, r24	; 0x05
	data[5] = dateString[6] - '0'; /* month digit 1 */
	month = data[5];
	temp = dateString[5] - '0';
	month += 10*temp;
	data[5] |= (temp << 4 ); /* month digit 10; century=0 */
    496e:	85 81       	ldd	r24, Z+5	; 0x05
    4970:	98 2f       	mov	r25, r24
    4972:	92 95       	swap	r25
    4974:	90 7f       	andi	r25, 0xF0	; 240
    4976:	86 81       	ldd	r24, Z+6	; 0x06
    4978:	80 53       	subi	r24, 0x30	; 48
    497a:	89 2b       	or	r24, r25
    497c:	8e 83       	std	Y+6, r24	; 0x06
	data[6] = dateString[3] - '0'; /* year digit 1 */
	year += data[6];
	temp = dateString[2] - '0';
	year += 10*temp;
	data[6] |= (temp << 4); /* year digit 10 */
    497e:	82 81       	ldd	r24, Z+2	; 0x02
    4980:	98 2f       	mov	r25, r24
    4982:	92 95       	swap	r25
    4984:	90 7f       	andi	r25, 0xF0	; 240
    4986:	83 81       	ldd	r24, Z+3	; 0x03
    4988:	80 53       	subi	r24, 0x30	; 48
    498a:	89 2b       	or	r24, r25
    498c:	8f 83       	std	Y+7, r24	; 0x07

	i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS+(setting*7), data, 7);
    498e:	86 2f       	mov	r24, r22
    4990:	88 0f       	add	r24, r24
    4992:	88 0f       	add	r24, r24
    4994:	88 0f       	add	r24, r24
    4996:	86 1b       	sub	r24, r22
    4998:	68 2f       	mov	r22, r24
    499a:	27 e0       	ldi	r18, 0x07	; 7
    499c:	ae 01       	movw	r20, r28
    499e:	4f 5f       	subi	r20, 0xFF	; 255
    49a0:	5f 4f       	sbci	r21, 0xFF	; 255
    49a2:	80 ed       	ldi	r24, 0xD0	; 208
    49a4:	cc d0       	rcall	.+408    	; 0x4b3e <i2c_device_write>
}
    49a6:	27 96       	adiw	r28, 0x07	; 7
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	f8 94       	cli
    49ac:	de bf       	out	0x3e, r29	; 62
    49ae:	0f be       	out	0x3f, r0	; 63
    49b0:	cd bf       	out	0x3d, r28	; 61
    49b2:	df 91       	pop	r29
    49b4:	cf 91       	pop	r28
    49b6:	08 95       	ret

000049b8 <ds3231_1s_sqw>:

	void ds3231_1s_sqw(BOOL enable)
	{
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	1f 92       	push	r1
    49be:	cd b7       	in	r28, 0x3d	; 61
    49c0:	de b7       	in	r29, 0x3e	; 62
		if(enable)
    49c2:	88 23       	and	r24, r24
    49c4:	49 f0       	breq	.+18     	; 0x49d8 <ds3231_1s_sqw+0x20>
		{
			uint8_t byte = 0x00;
    49c6:	19 82       	std	Y+1, r1	; 0x01
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
    49c8:	21 e0       	ldi	r18, 0x01	; 1
    49ca:	ae 01       	movw	r20, r28
    49cc:	4f 5f       	subi	r20, 0xFF	; 255
    49ce:	5f 4f       	sbci	r21, 0xFF	; 255
    49d0:	6e e0       	ldi	r22, 0x0E	; 14
    49d2:	80 ed       	ldi	r24, 0xD0	; 208
    49d4:	b4 d0       	rcall	.+360    	; 0x4b3e <i2c_device_write>
    49d6:	09 c0       	rjmp	.+18     	; 0x49ea <ds3231_1s_sqw+0x32>
		}
		else
		{
			uint8_t byte = 0x04;
    49d8:	84 e0       	ldi	r24, 0x04	; 4
    49da:	89 83       	std	Y+1, r24	; 0x01
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
    49dc:	21 e0       	ldi	r18, 0x01	; 1
    49de:	ae 01       	movw	r20, r28
    49e0:	4f 5f       	subi	r20, 0xFF	; 255
    49e2:	5f 4f       	sbci	r21, 0xFF	; 255
    49e4:	6e e0       	ldi	r22, 0x0E	; 14
    49e6:	80 ed       	ldi	r24, 0xD0	; 208
    49e8:	aa d0       	rcall	.+340    	; 0x4b3e <i2c_device_write>
		}
	}
    49ea:	0f 90       	pop	r0
    49ec:	df 91       	pop	r29
    49ee:	cf 91       	pop	r28


	void ds3231_set_aging(int8_t* data)
	{
		i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t*)data, 1);
    49f0:	08 95       	ret

000049f2 <ds3231_set_aging>:
    49f2:	21 e0       	ldi	r18, 0x01	; 1
    49f4:	ac 01       	movw	r20, r24
    49f6:	60 e1       	ldi	r22, 0x10	; 16
    49f8:	80 ed       	ldi	r24, 0xD0	; 208
    49fa:	a1 c0       	rjmp	.+322    	; 0x4b3e <i2c_device_write>
    49fc:	08 95       	ret

000049fe <ds3231_get_aging>:
	}


	int8_t ds3231_get_aging()
	{
    49fe:	cf 93       	push	r28
    4a00:	df 93       	push	r29
    4a02:	1f 92       	push	r1
    4a04:	cd b7       	in	r28, 0x3d	; 61
    4a06:	de b7       	in	r29, 0x3e	; 62
		int8_t data[1];
		i2c_device_read(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t*)data, 1);
    4a08:	21 e0       	ldi	r18, 0x01	; 1
    4a0a:	ae 01       	movw	r20, r28
    4a0c:	4f 5f       	subi	r20, 0xFF	; 255
    4a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a10:	60 e1       	ldi	r22, 0x10	; 16
    4a12:	80 ed       	ldi	r24, 0xD0	; 208
    4a14:	12 d1       	rcall	.+548    	; 0x4c3a <i2c_device_read>
		return(data[0]);
	}
    4a16:	89 81       	ldd	r24, Y+1	; 0x01
    4a18:	0f 90       	pop	r0
    4a1a:	df 91       	pop	r29
    4a1c:	cf 91       	pop	r28
    4a1e:	08 95       	ret

00004a20 <wifi_enabled>:
#include "huzzah.h"
#include "mcp23017.h"

BOOL wifi_enabled(void)
{
	return PORTD & (1 << PORTD6);
    4a20:	8b b1       	in	r24, 0x0b	; 11
}
    4a22:	80 74       	andi	r24, 0x40	; 64
    4a24:	08 95       	ret

00004a26 <wifi_reset>:

void wifi_reset(BOOL reset)
{
	if(reset) // assert reset low
    4a26:	88 23       	and	r24, r24
    4a28:	11 f0       	breq	.+4      	; 0x4a2e <wifi_reset+0x8>
	{
		PORTD &= ~(1 << PORTD6);
    4a2a:	5e 98       	cbi	0x0b, 6	; 11
    4a2c:	08 95       	ret
	}
	else // de-assert reset high
	{
		PORTD |= (1 << PORTD6);
    4a2e:	5e 9a       	sbi	0x0b, 6	; 11
    4a30:	08 95       	ret

00004a32 <wifi_power>:
	}
}

void wifi_power(BOOL on)
{
	if(on)
    4a32:	88 23       	and	r24, r24
    4a34:	11 f0       	breq	.+4      	; 0x4a3a <wifi_power+0x8>
	{
		PORTD |= (1 << PORTD7);
    4a36:	5f 9a       	sbi	0x0b, 7	; 11
    4a38:	08 95       	ret
	}
	else
	{
		PORTD &= ~(1 << PORTD7);
    4a3a:	5f 98       	cbi	0x0b, 7	; 11
    4a3c:	08 95       	ret

00004a3e <__iCliRetVal>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a3e:	f8 94       	cli
    return 1;
}
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	08 95       	ret

00004a44 <__iRestore>:
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a44:	fc 01       	movw	r30, r24
    4a46:	80 81       	ld	r24, Z
    4a48:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    4a4a:	08 95       	ret

00004a4c <i2c_init>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
    4a4c:	e4 e6       	ldi	r30, 0x64	; 100
    4a4e:	f0 e0       	ldi	r31, 0x00	; 0
    4a50:	80 81       	ld	r24, Z
    4a52:	8f 77       	andi	r24, 0x7F	; 127
    4a54:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
    4a56:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	TWBR = 0x25;
    4a5a:	85 e2       	ldi	r24, 0x25	; 37
    4a5c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>

	/* enable I2C */
	TWCR = _BV(TWEN);
    4a60:	84 e0       	ldi	r24, 0x04	; 4
    4a62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	g_i2c_access_semaphore = 1;
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
	g_i2c_not_timed_out = TRUE;
    4a6c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <g_i2c_not_timed_out>
    4a70:	08 95       	ret

00004a72 <i2c_start>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    4a72:	84 ea       	ldi	r24, 0xA4	; 164
    4a74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    4a78:	ec eb       	ldi	r30, 0xBC	; 188
    4a7a:	f0 e0       	ldi	r31, 0x00	; 0
    4a7c:	80 81       	ld	r24, Z
    4a7e:	88 23       	and	r24, r24
    4a80:	24 f0       	brlt	.+8      	; 0x4a8a <i2c_start+0x18>
    4a82:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <g_i2c_not_timed_out>
    4a86:	81 11       	cpse	r24, r1
    4a88:	f9 cf       	rjmp	.-14     	; 0x4a7c <i2c_start+0xa>
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
    4a8a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <g_i2c_not_timed_out>
    4a8e:	81 11       	cpse	r24, r1
    4a90:	07 c0       	rjmp	.+14     	; 0x4aa0 <i2c_start+0x2e>
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
    4a92:	80 e9       	ldi	r24, 0x90	; 144
    4a94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			g_i2c_not_timed_out = TRUE;
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <g_i2c_not_timed_out>
			return( TRUE);
    4a9e:	08 95       	ret
		}

		return( FALSE);
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
    4aa2:	08 95       	ret

00004aa4 <i2c_stop>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    4aa4:	84 e9       	ldi	r24, 0x94	; 148
    4aa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4aaa:	08 95       	ret

00004aac <i2c_write_success>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
    4aac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		TWCR = _BV(TWINT) | _BV(TWEN);
    4ab0:	84 e8       	ldi	r24, 0x84	; 132
    4ab2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    4ab6:	ec eb       	ldi	r30, 0xBC	; 188
    4ab8:	f0 e0       	ldi	r31, 0x00	; 0
    4aba:	80 81       	ld	r24, Z
    4abc:	88 23       	and	r24, r24
    4abe:	24 f0       	brlt	.+8      	; 0x4ac8 <i2c_write_success+0x1c>
    4ac0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <g_i2c_not_timed_out>
    4ac4:	81 11       	cpse	r24, r1
    4ac6:	f9 cf       	rjmp	.-14     	; 0x4aba <i2c_write_success+0xe>
		{
			;
		}

		uint8_t stat = TW_STATUS;
    4ac8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
    4acc:	88 7f       	andi	r24, 0xF8	; 248
    4ace:	86 17       	cp	r24, r22
    4ad0:	39 f0       	breq	.+14     	; 0x4ae0 <i2c_write_success+0x34>
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    4ad2:	84 e9       	ldi	r24, 0x94	; 148
    4ad4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			g_i2c_not_timed_out = TRUE;
    4ad8:	81 e0       	ldi	r24, 0x01	; 1
    4ada:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <g_i2c_not_timed_out>
			return(TRUE);
    4ade:	08 95       	ret
		}

		return( FALSE);
    4ae0:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
    4ae2:	08 95       	ret

00004ae4 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    4ae4:	84 ec       	ldi	r24, 0xC4	; 196
    4ae6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    4aea:	ec eb       	ldi	r30, 0xBC	; 188
    4aec:	f0 e0       	ldi	r31, 0x00	; 0
    4aee:	80 81       	ld	r24, Z
    4af0:	88 23       	and	r24, r24
    4af2:	24 f0       	brlt	.+8      	; 0x4afc <i2c_read_ack+0x18>
    4af4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <g_i2c_not_timed_out>
    4af8:	81 11       	cpse	r24, r1
    4afa:	f9 cf       	rjmp	.-14     	; 0x4aee <i2c_read_ack+0xa>
		{
			;
		}

		return(TWDR);
    4afc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
			;
		}

		return( TWDR);
#endif
}
    4b00:	08 95       	ret

00004b02 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
    4b02:	84 e8       	ldi	r24, 0x84	; 132
    4b04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    4b08:	ec eb       	ldi	r30, 0xBC	; 188
    4b0a:	f0 e0       	ldi	r31, 0x00	; 0
    4b0c:	80 81       	ld	r24, Z
    4b0e:	88 23       	and	r24, r24
    4b10:	24 f0       	brlt	.+8      	; 0x4b1a <i2c_read_nack+0x18>
    4b12:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <g_i2c_not_timed_out>
    4b16:	81 11       	cpse	r24, r1
    4b18:	f9 cf       	rjmp	.-14     	; 0x4b0c <i2c_read_nack+0xa>
		{
			;
		}

		return( TWDR);
    4b1a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
			;
		}

		return( TWDR);
#endif
}
    4b1e:	08 95       	ret

00004b20 <i2c_status>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
    4b20:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4b24:	28 7f       	andi	r18, 0xF8	; 248
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	28 17       	cp	r18, r24
    4b2c:	39 07       	cpc	r19, r25
    4b2e:	29 f0       	breq	.+10     	; 0x4b3a <i2c_status+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    4b30:	84 e9       	ldi	r24, 0x94	; 148
    4b32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		return(TRUE);
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	08 95       	ret
	}

	return(FALSE);
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
}
    4b3c:	08 95       	ret

00004b3e <i2c_device_write>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
    4b3e:	ef 92       	push	r14
    4b40:	ff 92       	push	r15
    4b42:	1f 93       	push	r17
    4b44:	cf 93       	push	r28
    4b46:	df 93       	push	r29
    4b48:	cd b7       	in	r28, 0x3d	; 61
    4b4a:	de b7       	in	r29, 0x3e	; 62
    4b4c:	28 97       	sbiw	r28, 0x08	; 8
    4b4e:	0f b6       	in	r0, 0x3f	; 63
    4b50:	f8 94       	cli
    4b52:	de bf       	out	0x3e, r29	; 62
    4b54:	0f be       	out	0x3f, r0	; 63
    4b56:	cd bf       	out	0x3d, r28	; 61
    4b58:	8c 83       	std	Y+4, r24	; 0x04
    4b5a:	6d 83       	std	Y+5, r22	; 0x05
    4b5c:	5f 83       	std	Y+7, r21	; 0x07
    4b5e:	4e 83       	std	Y+6, r20	; 0x06
    4b60:	28 87       	std	Y+8, r18	; 0x08
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4b62:	8f e5       	ldi	r24, 0x5F	; 95
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	fc 01       	movw	r30, r24
    4b68:	80 81       	ld	r24, Z
    4b6a:	8b 83       	std	Y+3, r24	; 0x03
    4b6c:	68 df       	rcall	.-304    	; 0x4a3e <__iCliRetVal>
    4b6e:	89 83       	std	Y+1, r24	; 0x01
    4b70:	0b c0       	rjmp	.+22     	; 0x4b88 <i2c_device_write+0x4a>
		{
			if(!g_i2c_access_semaphore)
    4b72:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_i2c_access_semaphore>
    4b76:	88 23       	and	r24, r24
    4b78:	21 f4       	brne	.+8      	; 0x4b82 <i2c_device_write+0x44>
			{
				return TRUE;
    4b7a:	11 e0       	ldi	r17, 0x01	; 1
    4b7c:	e1 2c       	mov	r14, r1
    4b7e:	f1 2c       	mov	r15, r1
    4b80:	09 c0       	rjmp	.+18     	; 0x4b94 <i2c_device_write+0x56>
			}

			g_i2c_access_semaphore = 0;
    4b82:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <g_i2c_access_semaphore>
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4b86:	19 82       	std	Y+1, r1	; 0x01
    4b88:	89 81       	ldd	r24, Y+1	; 0x01
    4b8a:	88 23       	and	r24, r24
    4b8c:	91 f7       	brne	.-28     	; 0x4b72 <i2c_device_write+0x34>
    4b8e:	ee 24       	eor	r14, r14
    4b90:	e3 94       	inc	r14
    4b92:	f1 2c       	mov	r15, r1
    4b94:	ce 01       	movw	r24, r28
    4b96:	03 96       	adiw	r24, 0x03	; 3
    4b98:	55 df       	rcall	.-342    	; 0x4a44 <__iRestore>
    4b9a:	ea 94       	dec	r14
    4b9c:	ef 28       	or	r14, r15
    4b9e:	09 f0       	breq	.+2      	; 0x4ba2 <i2c_device_write+0x64>
    4ba0:	3f c0       	rjmp	.+126    	; 0x4c20 <i2c_device_write+0xe2>

			g_i2c_access_semaphore = 0;
		}

		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    4ba2:	1a 82       	std	Y+2, r1	; 0x02

		i2c_start();
    4ba4:	66 df       	rcall	.-308    	; 0x4a72 <i2c_start>
		if(i2c_status(TW_START))
    4ba6:	88 e0       	ldi	r24, 0x08	; 8
    4ba8:	bb df       	rcall	.-138    	; 0x4b20 <i2c_status>
    4baa:	88 23       	and	r24, r24
    4bac:	29 f0       	breq	.+10     	; 0x4bb8 <i2c_device_write+0x7a>
    4bae:	81 e0       	ldi	r24, 0x01	; 1
		{
			g_i2c_access_semaphore = 1;
    4bb0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
    4bb4:	11 e0       	ldi	r17, 0x01	; 1
			return(TRUE);
    4bb6:	34 c0       	rjmp	.+104    	; 0x4c20 <i2c_device_write+0xe2>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    4bb8:	68 e1       	ldi	r22, 0x18	; 24
    4bba:	8c 81       	ldd	r24, Y+4	; 0x04
    4bbc:	77 df       	rcall	.-274    	; 0x4aac <i2c_write_success>
    4bbe:	88 23       	and	r24, r24
    4bc0:	29 f0       	breq	.+10     	; 0x4bcc <i2c_device_write+0x8e>
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
		{
			g_i2c_access_semaphore = 1;
    4bc4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
			return(TRUE);
    4bc8:	11 e0       	ldi	r17, 0x01	; 1
    4bca:	2a c0       	rjmp	.+84     	; 0x4c20 <i2c_device_write+0xe2>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    4bcc:	68 e2       	ldi	r22, 0x28	; 40
    4bce:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd0:	6d df       	rcall	.-294    	; 0x4aac <i2c_write_success>
    4bd2:	88 23       	and	r24, r24
    4bd4:	d1 f0       	breq	.+52     	; 0x4c0a <i2c_device_write+0xcc>
    4bd6:	81 e0       	ldi	r24, 0x01	; 1
		{
			g_i2c_access_semaphore = 1;
    4bd8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
    4bdc:	11 e0       	ldi	r17, 0x01	; 1
			return(TRUE);
    4bde:	20 c0       	rjmp	.+64     	; 0x4c20 <i2c_device_write+0xe2>
    4be0:	8a 81       	ldd	r24, Y+2	; 0x02
		}

		while(bytes2write--)
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
    4be2:	91 e0       	ldi	r25, 0x01	; 1
    4be4:	98 0f       	add	r25, r24
    4be6:	9a 83       	std	Y+2, r25	; 0x02
    4be8:	88 2f       	mov	r24, r24
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	2e 81       	ldd	r18, Y+6	; 0x06
    4bee:	3f 81       	ldd	r19, Y+7	; 0x07
    4bf0:	82 0f       	add	r24, r18
    4bf2:	93 1f       	adc	r25, r19
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	80 81       	ld	r24, Z
    4bf8:	68 e2       	ldi	r22, 0x28	; 40
    4bfa:	58 df       	rcall	.-336    	; 0x4aac <i2c_write_success>
    4bfc:	88 23       	and	r24, r24
    4bfe:	29 f0       	breq	.+10     	; 0x4c0a <i2c_device_write+0xcc>
    4c00:	81 e0       	ldi	r24, 0x01	; 1
			{
				g_i2c_access_semaphore = 1;
    4c02:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
    4c06:	11 e0       	ldi	r17, 0x01	; 1
				return(TRUE);
    4c08:	0b c0       	rjmp	.+22     	; 0x4c20 <i2c_device_write+0xe2>
		{
			g_i2c_access_semaphore = 1;
			return(TRUE);
		}

		while(bytes2write--)
    4c0a:	88 85       	ldd	r24, Y+8	; 0x08
    4c0c:	9f ef       	ldi	r25, 0xFF	; 255
    4c0e:	98 0f       	add	r25, r24
    4c10:	98 87       	std	Y+8, r25	; 0x08
    4c12:	88 23       	and	r24, r24
    4c14:	29 f7       	brne	.-54     	; 0x4be0 <i2c_device_write+0xa2>
				g_i2c_access_semaphore = 1;
				return(TRUE);
			}
		}

		i2c_stop();
    4c16:	46 df       	rcall	.-372    	; 0x4aa4 <i2c_stop>
    4c18:	81 e0       	ldi	r24, 0x01	; 1

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	g_i2c_access_semaphore = 1;
    4c1a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
    4c1e:	10 e0       	ldi	r17, 0x00	; 0
	return(FALSE);
    4c20:	81 2f       	mov	r24, r17
    4c22:	28 96       	adiw	r28, 0x08	; 8
}
    4c24:	0f b6       	in	r0, 0x3f	; 63
    4c26:	f8 94       	cli
    4c28:	de bf       	out	0x3e, r29	; 62
    4c2a:	0f be       	out	0x3f, r0	; 63
    4c2c:	cd bf       	out	0x3d, r28	; 61
    4c2e:	df 91       	pop	r29
    4c30:	cf 91       	pop	r28
    4c32:	1f 91       	pop	r17
    4c34:	ff 90       	pop	r15
    4c36:	ef 90       	pop	r14
    4c38:	08 95       	ret

00004c3a <i2c_device_read>:
    4c3a:	ef 92       	push	r14
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    4c3c:	ff 92       	push	r15
    4c3e:	0f 93       	push	r16
    4c40:	1f 93       	push	r17
    4c42:	cf 93       	push	r28
    4c44:	df 93       	push	r29
    4c46:	cd b7       	in	r28, 0x3d	; 61
    4c48:	de b7       	in	r29, 0x3e	; 62
    4c4a:	28 97       	sbiw	r28, 0x08	; 8
    4c4c:	0f b6       	in	r0, 0x3f	; 63
    4c4e:	f8 94       	cli
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	cd bf       	out	0x3d, r28	; 61
    4c56:	8c 83       	std	Y+4, r24	; 0x04
    4c58:	6d 83       	std	Y+5, r22	; 0x05
    4c5a:	5f 83       	std	Y+7, r21	; 0x07
    4c5c:	4e 83       	std	Y+6, r20	; 0x06
    4c5e:	28 87       	std	Y+8, r18	; 0x08
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4c60:	8f e5       	ldi	r24, 0x5F	; 95
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	fc 01       	movw	r30, r24
    4c66:	80 81       	ld	r24, Z
    4c68:	8b 83       	std	Y+3, r24	; 0x03
    4c6a:	e9 de       	rcall	.-558    	; 0x4a3e <__iCliRetVal>
    4c6c:	89 83       	std	Y+1, r24	; 0x01
    4c6e:	0b c0       	rjmp	.+22     	; 0x4c86 <i2c_device_read+0x4c>
    4c70:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_i2c_access_semaphore>
		{
			if(!g_i2c_access_semaphore)
    4c74:	88 23       	and	r24, r24
    4c76:	21 f4       	brne	.+8      	; 0x4c80 <i2c_device_read+0x46>
    4c78:	11 e0       	ldi	r17, 0x01	; 1
			{
				return TRUE;
    4c7a:	e1 2c       	mov	r14, r1
    4c7c:	f1 2c       	mov	r15, r1
    4c7e:	09 c0       	rjmp	.+18     	; 0x4c92 <i2c_device_read+0x58>
    4c80:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <g_i2c_access_semaphore>
			}

			g_i2c_access_semaphore = 0;
    4c84:	19 82       	std	Y+1, r1	; 0x01
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4c86:	89 81       	ldd	r24, Y+1	; 0x01
    4c88:	88 23       	and	r24, r24
    4c8a:	91 f7       	brne	.-28     	; 0x4c70 <i2c_device_read+0x36>
    4c8c:	ee 24       	eor	r14, r14
    4c8e:	e3 94       	inc	r14
    4c90:	f1 2c       	mov	r15, r1
    4c92:	ce 01       	movw	r24, r28
    4c94:	03 96       	adiw	r24, 0x03	; 3
    4c96:	d6 de       	rcall	.-596    	; 0x4a44 <__iRestore>
    4c98:	ea 94       	dec	r14
    4c9a:	ef 28       	or	r14, r15
    4c9c:	09 f0       	breq	.+2      	; 0x4ca0 <i2c_device_read+0x66>

			g_i2c_access_semaphore = 0;
		}

		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    4c9e:	6d c0       	rjmp	.+218    	; 0x4d7a <i2c_device_read+0x140>

		i2c_start();
    4ca0:	1a 82       	std	Y+2, r1	; 0x02
    4ca2:	e7 de       	rcall	.-562    	; 0x4a72 <i2c_start>
		if(i2c_status(TW_START))
    4ca4:	88 e0       	ldi	r24, 0x08	; 8
    4ca6:	3c df       	rcall	.-392    	; 0x4b20 <i2c_status>
    4ca8:	88 23       	and	r24, r24
    4caa:	29 f0       	breq	.+10     	; 0x4cb6 <i2c_device_read+0x7c>
		{
			g_i2c_access_semaphore = 1;
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
			return(TRUE);
    4cb2:	11 e0       	ldi	r17, 0x01	; 1
    4cb4:	62 c0       	rjmp	.+196    	; 0x4d7a <i2c_device_read+0x140>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    4cb6:	68 e1       	ldi	r22, 0x18	; 24
    4cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    4cba:	f8 de       	rcall	.-528    	; 0x4aac <i2c_write_success>
    4cbc:	88 23       	and	r24, r24
    4cbe:	29 f0       	breq	.+10     	; 0x4cca <i2c_device_read+0x90>
		{
			g_i2c_access_semaphore = 1;
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
			return(TRUE);
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    4cc6:	11 e0       	ldi	r17, 0x01	; 1
    4cc8:	58 c0       	rjmp	.+176    	; 0x4d7a <i2c_device_read+0x140>
    4cca:	68 e2       	ldi	r22, 0x28	; 40
    4ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cce:	ee de       	rcall	.-548    	; 0x4aac <i2c_write_success>
    4cd0:	88 23       	and	r24, r24
		{
			g_i2c_access_semaphore = 1;
    4cd2:	29 f0       	breq	.+10     	; 0x4cde <i2c_device_read+0xa4>
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
			return(TRUE);
		}

		i2c_start();
    4cda:	11 e0       	ldi	r17, 0x01	; 1
    4cdc:	4e c0       	rjmp	.+156    	; 0x4d7a <i2c_device_read+0x140>
		if(i2c_status(TW_REP_START))
    4cde:	c9 de       	rcall	.-622    	; 0x4a72 <i2c_start>
    4ce0:	80 e1       	ldi	r24, 0x10	; 16
    4ce2:	1e df       	rcall	.-452    	; 0x4b20 <i2c_status>
    4ce4:	88 23       	and	r24, r24
    4ce6:	29 f0       	breq	.+10     	; 0x4cf2 <i2c_device_read+0xb8>
		{
			g_i2c_access_semaphore = 1;
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
    4cea:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
			return(TRUE);
    4cee:	11 e0       	ldi	r17, 0x01	; 1
    4cf0:	44 c0       	rjmp	.+136    	; 0x4d7a <i2c_device_read+0x140>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    4cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    4cf4:	81 60       	ori	r24, 0x01	; 1
    4cf6:	60 e4       	ldi	r22, 0x40	; 64
    4cf8:	d9 de       	rcall	.-590    	; 0x4aac <i2c_write_success>
    4cfa:	88 23       	and	r24, r24
    4cfc:	99 f1       	breq	.+102    	; 0x4d64 <i2c_device_read+0x12a>
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
		{
			g_i2c_access_semaphore = 1;
    4d00:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
			return(TRUE);
    4d04:	11 e0       	ldi	r17, 0x01	; 1
    4d06:	39 c0       	rjmp	.+114    	; 0x4d7a <i2c_device_read+0x140>
		}

		while(bytes2read--)
		{
			if(bytes2read)
    4d08:	88 85       	ldd	r24, Y+8	; 0x08
    4d0a:	88 23       	and	r24, r24
			{
				data[index++] = i2c_read_ack();
    4d0c:	b9 f0       	breq	.+46     	; 0x4d3c <i2c_device_read+0x102>
    4d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d10:	91 e0       	ldi	r25, 0x01	; 1
    4d12:	98 0f       	add	r25, r24
    4d14:	9a 83       	std	Y+2, r25	; 0x02
    4d16:	88 2f       	mov	r24, r24
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	2e 81       	ldd	r18, Y+6	; 0x06
    4d1c:	3f 81       	ldd	r19, Y+7	; 0x07
    4d1e:	89 01       	movw	r16, r18
    4d20:	08 0f       	add	r16, r24
    4d22:	19 1f       	adc	r17, r25
    4d24:	df de       	rcall	.-578    	; 0x4ae4 <i2c_read_ack>
    4d26:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_ACK))
    4d28:	80 83       	st	Z, r24
    4d2a:	80 e5       	ldi	r24, 0x50	; 80
    4d2c:	f9 de       	rcall	.-526    	; 0x4b20 <i2c_status>
    4d2e:	88 23       	and	r24, r24
				{
					g_i2c_access_semaphore = 1;
    4d30:	c9 f0       	breq	.+50     	; 0x4d64 <i2c_device_read+0x12a>
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
					return(TRUE);
    4d38:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    4d3a:	1f c0       	rjmp	.+62     	; 0x4d7a <i2c_device_read+0x140>
    4d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d3e:	88 2f       	mov	r24, r24
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	2e 81       	ldd	r18, Y+6	; 0x06
    4d44:	3f 81       	ldd	r19, Y+7	; 0x07
    4d46:	89 01       	movw	r16, r18
    4d48:	08 0f       	add	r16, r24
    4d4a:	19 1f       	adc	r17, r25
    4d4c:	da de       	rcall	.-588    	; 0x4b02 <i2c_read_nack>
    4d4e:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_NACK))
    4d50:	80 83       	st	Z, r24
    4d52:	88 e5       	ldi	r24, 0x58	; 88
    4d54:	e5 de       	rcall	.-566    	; 0x4b20 <i2c_status>
    4d56:	88 23       	and	r24, r24
    4d58:	29 f0       	breq	.+10     	; 0x4d64 <i2c_device_read+0x12a>
				{
					g_i2c_access_semaphore = 1;
    4d5a:	81 e0       	ldi	r24, 0x01	; 1
    4d5c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
					return(TRUE);
    4d60:	11 e0       	ldi	r17, 0x01	; 1
    4d62:	0b c0       	rjmp	.+22     	; 0x4d7a <i2c_device_read+0x140>
		{
			g_i2c_access_semaphore = 1;
			return(TRUE);
		}

		while(bytes2read--)
    4d64:	88 85       	ldd	r24, Y+8	; 0x08
    4d66:	9f ef       	ldi	r25, 0xFF	; 255
    4d68:	98 0f       	add	r25, r24
    4d6a:	98 87       	std	Y+8, r25	; 0x08
    4d6c:	88 23       	and	r24, r24
    4d6e:	61 f6       	brne	.-104    	; 0x4d08 <i2c_device_read+0xce>
					return(TRUE);
				}
			}
		}

		i2c_stop();
    4d70:	99 de       	rcall	.-718    	; 0x4aa4 <i2c_stop>
    4d72:	81 e0       	ldi	r24, 0x01	; 1

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	g_i2c_access_semaphore = 1;
    4d74:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_i2c_access_semaphore>
    4d78:	10 e0       	ldi	r17, 0x00	; 0
	return(FALSE);
    4d7a:	81 2f       	mov	r24, r17
    4d7c:	28 96       	adiw	r28, 0x08	; 8
}
    4d7e:	0f b6       	in	r0, 0x3f	; 63
    4d80:	f8 94       	cli
    4d82:	de bf       	out	0x3e, r29	; 62
    4d84:	0f be       	out	0x3f, r0	; 63
    4d86:	cd bf       	out	0x3d, r28	; 61
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	1f 91       	pop	r17
    4d8e:	0f 91       	pop	r16
    4d90:	ff 90       	pop	r15
    4d92:	ef 90       	pop	r14
    4d94:	08 95       	ret

00004d96 <mcp4552_set_pot>:
/************************************************************************/
/* MCP4552 Support  (8-bit rheostat)                                    */
/************************************************************************/

BOOL mcp4552_set_pot(uint16_t setting, uint8_t addr)
{
    4d96:	cf 93       	push	r28
    4d98:	df 93       	push	r29
    4d9a:	1f 92       	push	r1
    4d9c:	cd b7       	in	r28, 0x3d	; 61
    4d9e:	de b7       	in	r29, 0x3e	; 62
    4da0:	36 2f       	mov	r19, r22
	BOOL result;
	uint8_t byte1=0, byte2=0;

	byte1 |= ((0x0100 & setting) >> 8);
	byte2 |= (uint8_t)(setting & 0x00FF);
    4da2:	89 83       	std	Y+1, r24	; 0x01
	result = i2c_device_write(addr, byte1, &byte2, 1);
    4da4:	bc 01       	movw	r22, r24
    4da6:	66 27       	eor	r22, r22
    4da8:	71 70       	andi	r23, 0x01	; 1
    4daa:	21 e0       	ldi	r18, 0x01	; 1
    4dac:	ae 01       	movw	r20, r28
    4dae:	4f 5f       	subi	r20, 0xFF	; 255
    4db0:	5f 4f       	sbci	r21, 0xFF	; 255
    4db2:	67 2f       	mov	r22, r23
    4db4:	83 2f       	mov	r24, r19
    4db6:	c3 de       	rcall	.-634    	; 0x4b3e <i2c_device_write>
    4db8:	0f 90       	pop	r0

	return result;
}
    4dba:	df 91       	pop	r29
    4dbc:	cf 91       	pop	r28
    4dbe:	08 95       	ret

00004dc0 <dac081c_set_dac>:
/************************************************************************/
/* DAC081C085 Support                                                   */
/************************************************************************/

BOOL dac081c_set_dac(uint8_t setting, uint8_t addr)
{
    4dc0:	cf 93       	push	r28
    4dc2:	df 93       	push	r29
    4dc4:	1f 92       	push	r1
    4dc6:	cd b7       	in	r28, 0x3d	; 61
    4dc8:	de b7       	in	r29, 0x3e	; 62
    4dca:	96 2f       	mov	r25, r22
	BOOL result;
	uint8_t byte1=0, byte2=0;

	byte1 |= (setting >> 4);
	byte2 |= (setting << 4);
    4dcc:	40 e1       	ldi	r20, 0x10	; 16
    4dce:	84 9f       	mul	r24, r20
    4dd0:	90 01       	movw	r18, r0
    4dd2:	11 24       	eor	r1, r1
    4dd4:	29 83       	std	Y+1, r18	; 0x01
	result = i2c_device_write(addr, byte1, &byte2, 1);
    4dd6:	68 2f       	mov	r22, r24
    4dd8:	62 95       	swap	r22
    4dda:	6f 70       	andi	r22, 0x0F	; 15
    4ddc:	21 e0       	ldi	r18, 0x01	; 1
    4dde:	ae 01       	movw	r20, r28
    4de0:	4f 5f       	subi	r20, 0xFF	; 255
    4de2:	5f 4f       	sbci	r21, 0xFF	; 255
    4de4:	89 2f       	mov	r24, r25
    4de6:	ab de       	rcall	.-682    	; 0x4b3e <i2c_device_write>
    4de8:	0f 90       	pop	r0

	return result;
}
    4dea:	df 91       	pop	r29
    4dec:	cf 91       	pop	r28
    4dee:	08 95       	ret

00004df0 <si5351_get_frequency>:
    4df0:	24 e0       	ldi	r18, 0x04	; 4
 * Returns TRUE on failure
 *
 */
	Frequency_Hz si5351_get_frequency(Si5351_clock clock)
	{
		return(clock_out[clock]);
    4df2:	82 9f       	mul	r24, r18
    4df4:	c0 01       	movw	r24, r0
    4df6:	11 24       	eor	r1, r1
    4df8:	fc 01       	movw	r30, r24
    4dfa:	e3 59       	subi	r30, 0x93	; 147
    4dfc:	fb 4f       	sbci	r31, 0xFB	; 251
    4dfe:	60 81       	ld	r22, Z
    4e00:	71 81       	ldd	r23, Z+1	; 0x01
    4e02:	82 81       	ldd	r24, Z+2	; 0x02
    4e04:	93 81       	ldd	r25, Z+3	; 0x03
	}
    4e06:	08 95       	ret

00004e08 <si5351_set_correction>:
 * EEPROM during initialization for use by the tuning
 * algorithms.
 */
	void si5351_set_correction(int32_t corr)
	{
		g_si5351_ref_correction = corr;
    4e08:	60 93 7e 04 	sts	0x047E, r22	; 0x80047e <g_si5351_ref_correction>
    4e0c:	70 93 7f 04 	sts	0x047F, r23	; 0x80047f <g_si5351_ref_correction+0x1>
    4e10:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <g_si5351_ref_correction+0x2>
    4e14:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <g_si5351_ref_correction+0x3>
    4e18:	08 95       	ret

00004e1a <si5351_get_correction>:
 *
 * Returns the oscillator correction factor.
 */
	int32_t si5351_get_correction(void)
	{
		return(g_si5351_ref_correction);
    4e1a:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <g_si5351_ref_correction>
    4e1e:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <g_si5351_ref_correction+0x1>
    4e22:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <g_si5351_ref_correction+0x2>
    4e26:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <g_si5351_ref_correction+0x3>
	}
    4e2a:	08 95       	ret

00004e2c <reduce_by_gcd>:
 *
 * Simple implementation of Euclid's Algorithm for calculating GCD of two uint32's
 *
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
    4e2c:	4f 92       	push	r4
    4e2e:	5f 92       	push	r5
    4e30:	6f 92       	push	r6
    4e32:	7f 92       	push	r7
    4e34:	8f 92       	push	r8
    4e36:	9f 92       	push	r9
    4e38:	af 92       	push	r10
    4e3a:	bf 92       	push	r11
    4e3c:	cf 92       	push	r12
    4e3e:	df 92       	push	r13
    4e40:	ef 92       	push	r14
    4e42:	ff 92       	push	r15
    4e44:	0f 93       	push	r16
    4e46:	1f 93       	push	r17
    4e48:	cf 93       	push	r28
    4e4a:	df 93       	push	r29
    4e4c:	ec 01       	movw	r28, r24
    4e4e:	8b 01       	movw	r16, r22
		uint32_t r;
		uint32_t b = *m;
    4e50:	48 80       	ld	r4, Y
    4e52:	59 80       	ldd	r5, Y+1	; 0x01
    4e54:	6a 80       	ldd	r6, Y+2	; 0x02
    4e56:	7b 80       	ldd	r7, Y+3	; 0x03
		uint32_t c = *n;

		if(!b || !c)
    4e58:	41 14       	cp	r4, r1
    4e5a:	51 04       	cpc	r5, r1
    4e5c:	61 04       	cpc	r6, r1
    4e5e:	71 04       	cpc	r7, r1
    4e60:	09 f4       	brne	.+2      	; 0x4e64 <reduce_by_gcd+0x38>
    4e62:	43 c0       	rjmp	.+134    	; 0x4eea <reduce_by_gcd+0xbe>
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
		uint32_t r;
		uint32_t b = *m;
		uint32_t c = *n;
    4e64:	fb 01       	movw	r30, r22
    4e66:	80 80       	ld	r8, Z
    4e68:	91 80       	ldd	r9, Z+1	; 0x01
    4e6a:	a2 80       	ldd	r10, Z+2	; 0x02
    4e6c:	b3 80       	ldd	r11, Z+3	; 0x03

		if(!b || !c)
    4e6e:	81 14       	cp	r8, r1
    4e70:	91 04       	cpc	r9, r1
    4e72:	a1 04       	cpc	r10, r1
    4e74:	b1 04       	cpc	r11, r1
    4e76:	c9 f1       	breq	.+114    	; 0x4eea <reduce_by_gcd+0xbe>
		{
			return;
		}

		for(r = b % c; r; b = c, c = r, r = b % c)
    4e78:	c3 01       	movw	r24, r6
    4e7a:	b2 01       	movw	r22, r4
    4e7c:	a5 01       	movw	r20, r10
    4e7e:	94 01       	movw	r18, r8
    4e80:	d7 d6       	rcall	.+3502   	; 0x5c30 <__udivmodsi4>
    4e82:	6b 01       	movw	r12, r22
    4e84:	7c 01       	movw	r14, r24
    4e86:	67 2b       	or	r22, r23
    4e88:	68 2b       	or	r22, r24
    4e8a:	69 2b       	or	r22, r25
    4e8c:	19 f4       	brne	.+6      	; 0x4e94 <reduce_by_gcd+0x68>
    4e8e:	0f c0       	rjmp	.+30     	; 0x4eae <reduce_by_gcd+0x82>
    4e90:	6b 01       	movw	r12, r22
    4e92:	7c 01       	movw	r14, r24
    4e94:	c5 01       	movw	r24, r10
    4e96:	b4 01       	movw	r22, r8
    4e98:	a7 01       	movw	r20, r14
    4e9a:	96 01       	movw	r18, r12
    4e9c:	c9 d6       	rcall	.+3474   	; 0x5c30 <__udivmodsi4>
    4e9e:	46 01       	movw	r8, r12
    4ea0:	57 01       	movw	r10, r14
    4ea2:	61 15       	cp	r22, r1
    4ea4:	71 05       	cpc	r23, r1
    4ea6:	81 05       	cpc	r24, r1
    4ea8:	91 05       	cpc	r25, r1
    4eaa:	91 f7       	brne	.-28     	; 0x4e90 <reduce_by_gcd+0x64>
    4eac:	02 c0       	rjmp	.+4      	; 0x4eb2 <reduce_by_gcd+0x86>
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
		uint32_t r;
		uint32_t b = *m;
		uint32_t c = *n;
    4eae:	75 01       	movw	r14, r10
    4eb0:	64 01       	movw	r12, r8
		for(r = b % c; r; b = c, c = r, r = b % c)
		{
			;
		}

		if(c > 1)
    4eb2:	f2 e0       	ldi	r31, 0x02	; 2
    4eb4:	cf 16       	cp	r12, r31
    4eb6:	d1 04       	cpc	r13, r1
    4eb8:	e1 04       	cpc	r14, r1
    4eba:	f1 04       	cpc	r15, r1
    4ebc:	b0 f0       	brcs	.+44     	; 0x4eea <reduce_by_gcd+0xbe>
		{
			*m /= c;
    4ebe:	c3 01       	movw	r24, r6
    4ec0:	b2 01       	movw	r22, r4
    4ec2:	a7 01       	movw	r20, r14
    4ec4:	96 01       	movw	r18, r12
    4ec6:	b4 d6       	rcall	.+3432   	; 0x5c30 <__udivmodsi4>
    4ec8:	28 83       	st	Y, r18
    4eca:	39 83       	std	Y+1, r19	; 0x01
    4ecc:	4a 83       	std	Y+2, r20	; 0x02
    4ece:	5b 83       	std	Y+3, r21	; 0x03
			*n /= c;
    4ed0:	f8 01       	movw	r30, r16
    4ed2:	60 81       	ld	r22, Z
    4ed4:	71 81       	ldd	r23, Z+1	; 0x01
    4ed6:	82 81       	ldd	r24, Z+2	; 0x02
    4ed8:	93 81       	ldd	r25, Z+3	; 0x03
    4eda:	a7 01       	movw	r20, r14
    4edc:	96 01       	movw	r18, r12
    4ede:	a8 d6       	rcall	.+3408   	; 0x5c30 <__udivmodsi4>
    4ee0:	f8 01       	movw	r30, r16
    4ee2:	20 83       	st	Z, r18
    4ee4:	31 83       	std	Z+1, r19	; 0x01
    4ee6:	42 83       	std	Z+2, r20	; 0x02
    4ee8:	53 83       	std	Z+3, r21	; 0x03
		}

		return;
	}
    4eea:	df 91       	pop	r29
    4eec:	cf 91       	pop	r28
    4eee:	1f 91       	pop	r17
    4ef0:	0f 91       	pop	r16
    4ef2:	ff 90       	pop	r15
    4ef4:	ef 90       	pop	r14
    4ef6:	df 90       	pop	r13
    4ef8:	cf 90       	pop	r12
    4efa:	bf 90       	pop	r11
    4efc:	af 90       	pop	r10
    4efe:	9f 90       	pop	r9
    4f00:	8f 90       	pop	r8
    4f02:	7f 90       	pop	r7
    4f04:	6f 90       	pop	r6
    4f06:	5f 90       	pop	r5
    4f08:	4f 90       	pop	r4
    4f0a:	08 95       	ret

00004f0c <pll_calc>:
		BOOL pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg, int32_t correction)
	#else
		BOOL pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg)
	#endif
#endif
	{
    4f0c:	4f 92       	push	r4
    4f0e:	5f 92       	push	r5
    4f10:	6f 92       	push	r6
    4f12:	7f 92       	push	r7
    4f14:	8f 92       	push	r8
    4f16:	9f 92       	push	r9
    4f18:	af 92       	push	r10
    4f1a:	bf 92       	push	r11
    4f1c:	cf 92       	push	r12
    4f1e:	df 92       	push	r13
    4f20:	ef 92       	push	r14
    4f22:	ff 92       	push	r15
    4f24:	0f 93       	push	r16
    4f26:	1f 93       	push	r17
    4f28:	cf 93       	push	r28
    4f2a:	df 93       	push	r29
    4f2c:	cd b7       	in	r28, 0x3d	; 61
    4f2e:	de b7       	in	r29, 0x3e	; 62
    4f30:	28 97       	sbiw	r28, 0x08	; 8
    4f32:	0f b6       	in	r0, 0x3f	; 63
    4f34:	f8 94       	cli
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	8a 01       	movw	r16, r20
#ifdef DEBUGGING_ONLY
			Frequency_Hz result = 0;
#endif
		Frequency_Hz ref_freq = xtal_freq;
    4f3e:	c0 90 40 01 	lds	r12, 0x0140	; 0x800140 <xtal_freq>
    4f42:	d0 90 41 01 	lds	r13, 0x0141	; 0x800141 <xtal_freq+0x1>
    4f46:	e0 90 42 01 	lds	r14, 0x0142	; 0x800142 <xtal_freq+0x2>
    4f4a:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <xtal_freq+0x3>
				return(TRUE);
			}
#endif

		/* Determine integer part of feedback equation */
		a = vco_freq / ref_freq;
    4f4e:	a7 01       	movw	r20, r14
    4f50:	96 01       	movw	r18, r12
    4f52:	6e d6       	rcall	.+3292   	; 0x5c30 <__udivmodsi4>
    4f54:	49 01       	movw	r8, r18
    4f56:	5a 01       	movw	r10, r20
				return(TRUE);
			}
#endif

		/* Find best approximation for b/c = fVCO mod fIN */
		b = vco_freq % ref_freq;
    4f58:	69 83       	std	Y+1, r22	; 0x01
    4f5a:	7a 83       	std	Y+2, r23	; 0x02
    4f5c:	8b 83       	std	Y+3, r24	; 0x03
    4f5e:	9c 83       	std	Y+4, r25	; 0x04
		c = ref_freq;
    4f60:	cd 82       	std	Y+5, r12	; 0x05
    4f62:	de 82       	std	Y+6, r13	; 0x06
    4f64:	ef 82       	std	Y+7, r14	; 0x07
    4f66:	f8 86       	std	Y+8, r15	; 0x08

		reduce_by_gcd(&b, &c);
    4f68:	be 01       	movw	r22, r28
    4f6a:	6b 5f       	subi	r22, 0xFB	; 251
    4f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f6e:	ce 01       	movw	r24, r28
    4f70:	01 96       	adiw	r24, 0x01	; 1
    4f72:	5c df       	rcall	.-328    	; 0x4e2c <reduce_by_gcd>

		uint32_t bx128 = b << 7;
    4f74:	c9 80       	ldd	r12, Y+1	; 0x01
    4f76:	da 80       	ldd	r13, Y+2	; 0x02
    4f78:	eb 80       	ldd	r14, Y+3	; 0x03
    4f7a:	fc 80       	ldd	r15, Y+4	; 0x04
    4f7c:	cc 0c       	add	r12, r12
    4f7e:	dd 1c       	adc	r13, r13
    4f80:	ee 1c       	adc	r14, r14
    4f82:	ff 1c       	adc	r15, r15
    4f84:	cc 0c       	add	r12, r12
    4f86:	dd 1c       	adc	r13, r13
    4f88:	ee 1c       	adc	r14, r14
    4f8a:	ff 1c       	adc	r15, r15
    4f8c:	cc 0c       	add	r12, r12
    4f8e:	dd 1c       	adc	r13, r13
    4f90:	ee 1c       	adc	r14, r14
    4f92:	ff 1c       	adc	r15, r15
    4f94:	cc 0c       	add	r12, r12
    4f96:	dd 1c       	adc	r13, r13
    4f98:	ee 1c       	adc	r14, r14
    4f9a:	ff 1c       	adc	r15, r15
    4f9c:	cc 0c       	add	r12, r12
    4f9e:	dd 1c       	adc	r13, r13
    4fa0:	ee 1c       	adc	r14, r14
    4fa2:	ff 1c       	adc	r15, r15
    4fa4:	cc 0c       	add	r12, r12
    4fa6:	dd 1c       	adc	r13, r13
    4fa8:	ee 1c       	adc	r14, r14
    4faa:	ff 1c       	adc	r15, r15
    4fac:	cc 0c       	add	r12, r12
    4fae:	dd 1c       	adc	r13, r13
    4fb0:	ee 1c       	adc	r14, r14
    4fb2:	ff 1c       	adc	r15, r15
		uint32_t bx128overc = bx128 / c;
    4fb4:	4d 80       	ldd	r4, Y+5	; 0x05
    4fb6:	5e 80       	ldd	r5, Y+6	; 0x06
    4fb8:	6f 80       	ldd	r6, Y+7	; 0x07
    4fba:	78 84       	ldd	r7, Y+8	; 0x08
    4fbc:	c7 01       	movw	r24, r14
    4fbe:	b6 01       	movw	r22, r12
    4fc0:	a3 01       	movw	r20, r6
    4fc2:	92 01       	movw	r18, r4
    4fc4:	35 d6       	rcall	.+3178   	; 0x5c30 <__udivmodsi4>
    4fc6:	ca 01       	movw	r24, r20
    4fc8:	b9 01       	movw	r22, r18
		reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    4fca:	88 0c       	add	r8, r8
    4fcc:	99 1c       	adc	r9, r9
    4fce:	aa 1c       	adc	r10, r10
    4fd0:	bb 1c       	adc	r11, r11
    4fd2:	88 0c       	add	r8, r8
    4fd4:	99 1c       	adc	r9, r9
    4fd6:	aa 1c       	adc	r10, r10
    4fd8:	bb 1c       	adc	r11, r11
    4fda:	88 0c       	add	r8, r8
    4fdc:	99 1c       	adc	r9, r9
    4fde:	aa 1c       	adc	r10, r10
    4fe0:	bb 1c       	adc	r11, r11
    4fe2:	88 0c       	add	r8, r8
    4fe4:	99 1c       	adc	r9, r9
    4fe6:	aa 1c       	adc	r10, r10
    4fe8:	bb 1c       	adc	r11, r11
    4fea:	88 0c       	add	r8, r8
    4fec:	99 1c       	adc	r9, r9
    4fee:	aa 1c       	adc	r10, r10
    4ff0:	bb 1c       	adc	r11, r11
    4ff2:	88 0c       	add	r8, r8
    4ff4:	99 1c       	adc	r9, r9
    4ff6:	aa 1c       	adc	r10, r10
    4ff8:	bb 1c       	adc	r11, r11
    4ffa:	88 0c       	add	r8, r8
    4ffc:	99 1c       	adc	r9, r9
    4ffe:	aa 1c       	adc	r10, r10
    5000:	bb 1c       	adc	r11, r11
    5002:	32 50       	subi	r19, 0x02	; 2
    5004:	41 09       	sbc	r20, r1
    5006:	51 09       	sbc	r21, r1
    5008:	82 0e       	add	r8, r18
    500a:	93 1e       	adc	r9, r19
    500c:	a4 1e       	adc	r10, r20
    500e:	b5 1e       	adc	r11, r21
    5010:	f8 01       	movw	r30, r16
    5012:	80 82       	st	Z, r8
    5014:	91 82       	std	Z+1, r9	; 0x01
    5016:	a2 82       	std	Z+2, r10	; 0x02
		reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    5018:	b3 82       	std	Z+3, r11	; 0x03
    501a:	a3 01       	movw	r20, r6
    501c:	92 01       	movw	r18, r4
    501e:	d2 d5       	rcall	.+2980   	; 0x5bc4 <__mulsi3>
    5020:	c6 1a       	sub	r12, r22
    5022:	d7 0a       	sbc	r13, r23
    5024:	e8 0a       	sbc	r14, r24
    5026:	f9 0a       	sbc	r15, r25
    5028:	c4 82       	std	Z+4, r12	; 0x04
    502a:	d5 82       	std	Z+5, r13	; 0x05
    502c:	e6 82       	std	Z+6, r14	; 0x06
    502e:	f7 82       	std	Z+7, r15	; 0x07
		reg->ms.p3 = c;
    5030:	40 86       	std	Z+8, r4	; 0x08
    5032:	51 86       	std	Z+9, r5	; 0x09
    5034:	62 86       	std	Z+10, r6	; 0x0a
    5036:	73 86       	std	Z+11, r7	; 0x0b
#else

			return(FALSE);

#endif
	}
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	28 96       	adiw	r28, 0x08	; 8
    503c:	0f b6       	in	r0, 0x3f	; 63
    503e:	f8 94       	cli
    5040:	de bf       	out	0x3e, r29	; 62
    5042:	0f be       	out	0x3f, r0	; 63
    5044:	cd bf       	out	0x3d, r28	; 61
    5046:	df 91       	pop	r29
    5048:	cf 91       	pop	r28
    504a:	1f 91       	pop	r17
    504c:	0f 91       	pop	r16
    504e:	ff 90       	pop	r15
    5050:	ef 90       	pop	r14
    5052:	df 90       	pop	r13
    5054:	cf 90       	pop	r12
    5056:	bf 90       	pop	r11
    5058:	af 90       	pop	r10
    505a:	9f 90       	pop	r9
    505c:	8f 90       	pop	r8
    505e:	7f 90       	pop	r7
    5060:	6f 90       	pop	r6
    5062:	5f 90       	pop	r5
    5064:	4f 90       	pop	r4
    5066:	08 95       	ret

00005068 <multisynth_calc>:
#ifdef DEBUGGING_ONLY
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4, uint32_t *div)
#else
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
#endif
	{
    5068:	3f 92       	push	r3
    506a:	4f 92       	push	r4
    506c:	5f 92       	push	r5
    506e:	6f 92       	push	r6
    5070:	7f 92       	push	r7
    5072:	8f 92       	push	r8
    5074:	9f 92       	push	r9
    5076:	af 92       	push	r10
    5078:	bf 92       	push	r11
    507a:	cf 92       	push	r12
    507c:	df 92       	push	r13
    507e:	ef 92       	push	r14
    5080:	ff 92       	push	r15
    5082:	0f 93       	push	r16
    5084:	1f 93       	push	r17
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	4b 01       	movw	r8, r22
    508c:	5c 01       	movw	r10, r24
    508e:	ea 01       	movw	r28, r20
		uint32_t a = 0;
		Frequency_Hz freq_VCO = 0;

		*int_mode = TRUE;   /* assumed */
    5090:	81 e0       	ldi	r24, 0x01	; 1
    5092:	f9 01       	movw	r30, r18
    5094:	80 83       	st	Z, r24
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* All frequencies above 150 MHz must use divide by 4 */
		if(freq_Fout >= SI5351_MULTISYNTH_DIVBY4_FREQ)
    5096:	f0 e8       	ldi	r31, 0x80	; 128
    5098:	8f 16       	cp	r8, r31
    509a:	f1 ed       	ldi	r31, 0xD1	; 209
    509c:	9f 06       	cpc	r9, r31
    509e:	f0 ef       	ldi	r31, 0xF0	; 240
    50a0:	af 06       	cpc	r10, r31
    50a2:	f8 e0       	ldi	r31, 0x08	; 8
    50a4:	bf 06       	cpc	r11, r31
    50a6:	40 f1       	brcs	.+80     	; 0x50f8 <multisynth_calc+0x90>
		{
			a = 4;
			freq_VCO = a * freq_Fout;
    50a8:	c5 01       	movw	r24, r10
    50aa:	b4 01       	movw	r22, r8
    50ac:	66 0f       	add	r22, r22
    50ae:	77 1f       	adc	r23, r23
    50b0:	88 1f       	adc	r24, r24
    50b2:	99 1f       	adc	r25, r25
    50b4:	66 0f       	add	r22, r22
    50b6:	77 1f       	adc	r23, r23
    50b8:	88 1f       	adc	r24, r24
    50ba:	99 1f       	adc	r25, r25
#endif  /* DO_BOUNDS_CHECKING */

		/* All frequencies above 150 MHz must use divide by 4 */
		if(freq_Fout >= SI5351_MULTISYNTH_DIVBY4_FREQ)
		{
			a = 4;
    50bc:	c1 2c       	mov	r12, r1
    50be:	d1 2c       	mov	r13, r1
    50c0:	76 01       	movw	r14, r12
    50c2:	68 94       	set
    50c4:	c2 f8       	bld	r12, 2
			uint8_t count = 0;

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
			{
				temp = SI5351_PLL_VCO_MAX - (count * freq_Fout);    /* SI5351_PLL_VCO_MAX assumed even */
    50c6:	3b c0       	rjmp	.+118    	; 0x513e <multisynth_calc+0xd6>
    50c8:	a3 2d       	mov	r26, r3
    50ca:	b0 e0       	ldi	r27, 0x00	; 0
    50cc:	a5 01       	movw	r20, r10
    50ce:	94 01       	movw	r18, r8
    50d0:	08 d6       	rcall	.+3088   	; 0x5ce2 <__muluhisi3>
    50d2:	a3 01       	movw	r20, r6
    50d4:	92 01       	movw	r18, r4
    50d6:	26 1b       	sub	r18, r22
    50d8:	37 0b       	sbc	r19, r23
    50da:	48 0b       	sbc	r20, r24
    50dc:	59 0b       	sbc	r21, r25
    50de:	ca 01       	movw	r24, r20
    50e0:	b9 01       	movw	r22, r18
				count += 2;
    50e2:	33 94       	inc	r3
    50e4:	33 94       	inc	r3

				if(temp >= SI5351_PLL_VCO_MIN)
    50e6:	61 15       	cp	r22, r1
    50e8:	36 e4       	ldi	r19, 0x46	; 70
    50ea:	73 07       	cpc	r23, r19
    50ec:	33 ec       	ldi	r19, 0xC3	; 195
    50ee:	83 07       	cpc	r24, r19
    50f0:	33 e2       	ldi	r19, 0x23	; 35
    50f2:	93 07       	cpc	r25, r19
    50f4:	f0 f0       	brcs	.+60     	; 0x5132 <multisynth_calc+0xca>
    50f6:	10 c0       	rjmp	.+32     	; 0x5118 <multisynth_calc+0xb0>
    50f8:	68 94       	set
    50fa:	33 24       	eor	r3, r3
    50fc:	31 f8       	bld	r3, 1
    50fe:	60 e0       	ldi	r22, 0x00	; 0
    5100:	79 ee       	ldi	r23, 0xE9	; 233
    5102:	84 ea       	ldi	r24, 0xA4	; 164
    5104:	95 e3       	ldi	r25, 0x35	; 53
			uint8_t count = 0;

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
			{
				temp = SI5351_PLL_VCO_MAX - (count * freq_Fout);    /* SI5351_PLL_VCO_MAX assumed even */
    5106:	0f 2e       	mov	r0, r31
    5108:	41 2c       	mov	r4, r1
    510a:	f9 ee       	ldi	r31, 0xE9	; 233
    510c:	5f 2e       	mov	r5, r31
    510e:	f4 ea       	ldi	r31, 0xA4	; 164
    5110:	6f 2e       	mov	r6, r31
    5112:	f5 e3       	ldi	r31, 0x35	; 53
    5114:	7f 2e       	mov	r7, r31
				count += 2;

				if(temp >= SI5351_PLL_VCO_MIN)
				{
					temp /= freq_Fout;
    5116:	f0 2d       	mov	r31, r0
    5118:	a5 01       	movw	r20, r10
    511a:	94 01       	movw	r18, r8
    511c:	89 d5       	rcall	.+2834   	; 0x5c30 <__udivmodsi4>
    511e:	69 01       	movw	r12, r18
    5120:	7a 01       	movw	r14, r20

					if(temp >= 4)   /* accepts only even integers of 4 or greater */
    5122:	44 e0       	ldi	r20, 0x04	; 4
    5124:	c4 16       	cp	r12, r20
    5126:	d1 04       	cpc	r13, r1
    5128:	e1 04       	cpc	r14, r1
    512a:	f1 04       	cpc	r15, r1
    512c:	08 f0       	brcs	.+2      	; 0x5130 <multisynth_calc+0xc8>
    512e:	42 c0       	rjmp	.+132    	; 0x51b4 <multisynth_calc+0x14c>
    5130:	cb cf       	rjmp	.-106    	; 0x50c8 <multisynth_calc+0x60>
#else
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
#endif
	{
		uint32_t a = 0;
		Frequency_Hz freq_VCO = 0;
    5132:	60 e0       	ldi	r22, 0x00	; 0
    5134:	70 e0       	ldi	r23, 0x00	; 0
    5136:	cb 01       	movw	r24, r22
    5138:	c1 2c       	mov	r12, r1
    513a:	d1 2c       	mov	r13, r1
    513c:	76 01       	movw	r14, r12
			{
				freq_VCO = a * freq_Fout;
			}
		}

		*divBy4 = (a == 4);
    513e:	21 e0       	ldi	r18, 0x01	; 1
    5140:	54 e0       	ldi	r21, 0x04	; 4
    5142:	c5 16       	cp	r12, r21
    5144:	d1 04       	cpc	r13, r1
    5146:	e1 04       	cpc	r14, r1
    5148:	f1 04       	cpc	r15, r1
    514a:	09 f0       	breq	.+2      	; 0x514e <multisynth_calc+0xe6>
    514c:	20 e0       	ldi	r18, 0x00	; 0
    514e:	f8 01       	movw	r30, r16
    5150:	20 83       	st	Z, r18
		reg->ms.p1 = (uint32_t)(a << 7) - 512;  /* 128 * a + floor((128 * b) / c) - 512 */
    5152:	cc 0c       	add	r12, r12
    5154:	dd 1c       	adc	r13, r13
    5156:	ee 1c       	adc	r14, r14
    5158:	ff 1c       	adc	r15, r15
    515a:	cc 0c       	add	r12, r12
    515c:	dd 1c       	adc	r13, r13
    515e:	ee 1c       	adc	r14, r14
    5160:	ff 1c       	adc	r15, r15
    5162:	cc 0c       	add	r12, r12
    5164:	dd 1c       	adc	r13, r13
    5166:	ee 1c       	adc	r14, r14
    5168:	ff 1c       	adc	r15, r15
    516a:	cc 0c       	add	r12, r12
    516c:	dd 1c       	adc	r13, r13
    516e:	ee 1c       	adc	r14, r14
    5170:	ff 1c       	adc	r15, r15
    5172:	cc 0c       	add	r12, r12
    5174:	dd 1c       	adc	r13, r13
    5176:	ee 1c       	adc	r14, r14
    5178:	ff 1c       	adc	r15, r15
    517a:	cc 0c       	add	r12, r12
    517c:	dd 1c       	adc	r13, r13
    517e:	ee 1c       	adc	r14, r14
    5180:	ff 1c       	adc	r15, r15
    5182:	cc 0c       	add	r12, r12
    5184:	dd 1c       	adc	r13, r13
    5186:	ee 1c       	adc	r14, r14
    5188:	ff 1c       	adc	r15, r15
    518a:	f2 e0       	ldi	r31, 0x02	; 2
    518c:	df 1a       	sub	r13, r31
    518e:	e1 08       	sbc	r14, r1
    5190:	f1 08       	sbc	r15, r1
    5192:	c8 82       	st	Y, r12
    5194:	d9 82       	std	Y+1, r13	; 0x01
    5196:	ea 82       	std	Y+2, r14	; 0x02
    5198:	fb 82       	std	Y+3, r15	; 0x03
		reg->ms.p2 = 0;                         /* 128 * b - c * floor((128 * b) / c) */
    519a:	1c 82       	std	Y+4, r1	; 0x04
    519c:	1d 82       	std	Y+5, r1	; 0x05
    519e:	1e 82       	std	Y+6, r1	; 0x06
    51a0:	1f 82       	std	Y+7, r1	; 0x07
		reg->ms.p3 = 1;
    51a2:	01 e0       	ldi	r16, 0x01	; 1
    51a4:	10 e0       	ldi	r17, 0x00	; 0
    51a6:	20 e0       	ldi	r18, 0x00	; 0
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	08 87       	std	Y+8, r16	; 0x08
    51ac:	19 87       	std	Y+9, r17	; 0x09
    51ae:	2a 87       	std	Y+10, r18	; 0x0a

#ifdef DEBUGGING_ONLY
			*div = a;
#endif

		return(freq_VCO);
    51b0:	3b 87       	std	Y+11, r19	; 0x0b
				}
			}

			if(success)
			{
				freq_VCO = a * freq_Fout;
    51b2:	06 c0       	rjmp	.+12     	; 0x51c0 <multisynth_calc+0x158>
    51b4:	a5 01       	movw	r20, r10
    51b6:	94 01       	movw	r18, r8
    51b8:	c7 01       	movw	r24, r14
    51ba:	b6 01       	movw	r22, r12
    51bc:	03 d5       	rcall	.+2566   	; 0x5bc4 <__mulsi3>
    51be:	bf cf       	rjmp	.-130    	; 0x513e <multisynth_calc+0xd6>
#ifdef DEBUGGING_ONLY
			*div = a;
#endif

		return(freq_VCO);
	}
    51c0:	df 91       	pop	r29
    51c2:	cf 91       	pop	r28
    51c4:	1f 91       	pop	r17
    51c6:	0f 91       	pop	r16
    51c8:	ff 90       	pop	r15
    51ca:	ef 90       	pop	r14
    51cc:	df 90       	pop	r13
    51ce:	cf 90       	pop	r12
    51d0:	bf 90       	pop	r11
    51d2:	af 90       	pop	r10
    51d4:	9f 90       	pop	r9
    51d6:	8f 90       	pop	r8
    51d8:	7f 90       	pop	r7
    51da:	6f 90       	pop	r6
    51dc:	5f 90       	pop	r5
    51de:	4f 90       	pop	r4
    51e0:	3f 90       	pop	r3
    51e2:	08 95       	ret

000051e4 <multisynth_estimate>:
 * Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
 *
 * Note: do not call this function with global value freqVCOB == zero
 */
	Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
	{
    51e4:	2f 92       	push	r2
    51e6:	3f 92       	push	r3
    51e8:	4f 92       	push	r4
    51ea:	5f 92       	push	r5
    51ec:	6f 92       	push	r6
    51ee:	7f 92       	push	r7
    51f0:	8f 92       	push	r8
    51f2:	9f 92       	push	r9
    51f4:	af 92       	push	r10
    51f6:	bf 92       	push	r11
    51f8:	cf 92       	push	r12
    51fa:	df 92       	push	r13
    51fc:	ef 92       	push	r14
    51fe:	ff 92       	push	r15
    5200:	0f 93       	push	r16
    5202:	1f 93       	push	r17
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	cd b7       	in	r28, 0x3d	; 61
    520a:	de b7       	in	r29, 0x3e	; 62
    520c:	62 97       	sbiw	r28, 0x12	; 18
    520e:	0f b6       	in	r0, 0x3f	; 63
    5210:	f8 94       	cli
    5212:	de bf       	out	0x3e, r29	; 62
    5214:	0f be       	out	0x3f, r0	; 63
    5216:	cd bf       	out	0x3d, r28	; 61
    5218:	6b 01       	movw	r12, r22
    521a:	7c 01       	movw	r14, r24
    521c:	1a 01       	movw	r2, r20
    521e:	3e 87       	std	Y+14, r19	; 0x0e
    5220:	2d 87       	std	Y+13, r18	; 0x0d
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* Determine integer part of feedback equation */
		a = freqVCOB / freq_Fout;
    5222:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <freqVCOB>
    5226:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <freqVCOB+0x1>
    522a:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <freqVCOB+0x2>
    522e:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <freqVCOB+0x3>
    5232:	89 87       	std	Y+9, r24	; 0x09
    5234:	9a 87       	std	Y+10, r25	; 0x0a
    5236:	ab 87       	std	Y+11, r26	; 0x0b
    5238:	bc 87       	std	Y+12, r27	; 0x0c
    523a:	bc 01       	movw	r22, r24
    523c:	cd 01       	movw	r24, r26
    523e:	a7 01       	movw	r20, r14
    5240:	96 01       	movw	r18, r12
    5242:	f6 d4       	rcall	.+2540   	; 0x5c30 <__udivmodsi4>
    5244:	49 01       	movw	r8, r18
    5246:	5a 01       	movw	r10, r20
    5248:	2f 87       	std	Y+15, r18	; 0x0f
    524a:	38 8b       	std	Y+16, r19	; 0x10
    524c:	49 8b       	std	Y+17, r20	; 0x11
    524e:	5a 8b       	std	Y+18, r21	; 0x12
		b = freqVCOB % freq_Fout;
    5250:	69 83       	std	Y+1, r22	; 0x01
    5252:	7a 83       	std	Y+2, r23	; 0x02
    5254:	8b 83       	std	Y+3, r24	; 0x03
		c = freq_Fout;
    5256:	9c 83       	std	Y+4, r25	; 0x04
    5258:	cd 82       	std	Y+5, r12	; 0x05
    525a:	de 82       	std	Y+6, r13	; 0x06
    525c:	ef 82       	std	Y+7, r14	; 0x07
		reduce_by_gcd(&b, &c);  /* prevents overflow conditions and makes results agree with ClockBuilder */
    525e:	f8 86       	std	Y+8, r15	; 0x08
    5260:	be 01       	movw	r22, r28
    5262:	6b 5f       	subi	r22, 0xFB	; 251
    5264:	7f 4f       	sbci	r23, 0xFF	; 255
    5266:	ce 01       	movw	r24, r28
    5268:	01 96       	adiw	r24, 0x01	; 1

		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
    526a:	e0 dd       	rcall	.-1088   	; 0x4e2c <reduce_by_gcd>
    526c:	4d 80       	ldd	r4, Y+5	; 0x05
    526e:	5e 80       	ldd	r5, Y+6	; 0x06
    5270:	6f 80       	ldd	r6, Y+7	; 0x07
    5272:	78 84       	ldd	r7, Y+8	; 0x08
    5274:	c9 80       	ldd	r12, Y+1	; 0x01
    5276:	da 80       	ldd	r13, Y+2	; 0x02
    5278:	eb 80       	ldd	r14, Y+3	; 0x03
    527a:	fc 80       	ldd	r15, Y+4	; 0x04
    527c:	a5 01       	movw	r20, r10
    527e:	94 01       	movw	r18, r8
    5280:	c3 01       	movw	r24, r6
    5282:	b2 01       	movw	r22, r4
    5284:	9f d4       	rcall	.+2366   	; 0x5bc4 <__mulsi3>
    5286:	9b 01       	movw	r18, r22
    5288:	ac 01       	movw	r20, r24
    528a:	2c 0d       	add	r18, r12
    528c:	3d 1d       	adc	r19, r13
    528e:	4e 1d       	adc	r20, r14
    5290:	5f 1d       	adc	r21, r15
    5292:	69 85       	ldd	r22, Y+9	; 0x09
    5294:	7a 85       	ldd	r23, Y+10	; 0x0a
    5296:	8b 85       	ldd	r24, Y+11	; 0x0b
    5298:	9c 85       	ldd	r25, Y+12	; 0x0c
    529a:	ca d4       	rcall	.+2452   	; 0x5c30 <__udivmodsi4>
    529c:	ca 01       	movw	r24, r20
		freq_Fout *= c;
    529e:	b9 01       	movw	r22, r18
    52a0:	a3 01       	movw	r20, r6
    52a2:	92 01       	movw	r18, r4
    52a4:	8f d4       	rcall	.+2334   	; 0x5bc4 <__mulsi3>
    52a6:	69 87       	std	Y+9, r22	; 0x09
    52a8:	7a 87       	std	Y+10, r23	; 0x0a
    52aa:	8b 87       	std	Y+11, r24	; 0x0b
    52ac:	9c 87       	std	Y+12, r25	; 0x0c

		*int_mode = (b == 0) && !(a % 2);
    52ae:	c1 14       	cp	r12, r1
    52b0:	d1 04       	cpc	r13, r1
    52b2:	e1 04       	cpc	r14, r1
    52b4:	f1 04       	cpc	r15, r1
    52b6:	09 f0       	breq	.+2      	; 0x52ba <multisynth_estimate+0xd6>
    52b8:	85 c0       	rjmp	.+266    	; 0x53c4 <multisynth_estimate+0x1e0>
    52ba:	80 fe       	sbrs	r8, 0
    52bc:	75 c0       	rjmp	.+234    	; 0x53a8 <multisynth_estimate+0x1c4>
    52be:	82 c0       	rjmp	.+260    	; 0x53c4 <multisynth_estimate+0x1e0>
		*divBy4 = (a == 4) && *int_mode;
    52c0:	81 e0       	ldi	r24, 0x01	; 1
    52c2:	d8 01       	movw	r26, r16
    52c4:	8c 93       	st	X, r24

		/* Calculate parameters */
		if(*divBy4)
		{
			reg->ms.p1 = 0;
    52c6:	f1 01       	movw	r30, r2
    52c8:	10 82       	st	Z, r1
    52ca:	11 82       	std	Z+1, r1	; 0x01
    52cc:	12 82       	std	Z+2, r1	; 0x02
    52ce:	13 82       	std	Z+3, r1	; 0x03
			reg->ms.p2 = 0;
    52d0:	14 82       	std	Z+4, r1	; 0x04
    52d2:	15 82       	std	Z+5, r1	; 0x05
    52d4:	16 82       	std	Z+6, r1	; 0x06
    52d6:	17 82       	std	Z+7, r1	; 0x07
			reg->ms.p3 = 1;
    52d8:	81 e0       	ldi	r24, 0x01	; 1
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	a0 e0       	ldi	r26, 0x00	; 0
    52de:	b0 e0       	ldi	r27, 0x00	; 0
    52e0:	80 87       	std	Z+8, r24	; 0x08
    52e2:	91 87       	std	Z+9, r25	; 0x09
    52e4:	a2 87       	std	Z+10, r26	; 0x0a
    52e6:	b3 87       	std	Z+11, r27	; 0x0b
    52e8:	71 c0       	rjmp	.+226    	; 0x53cc <multisynth_estimate+0x1e8>
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
		freq_Fout *= c;

		*int_mode = (b == 0) && !(a % 2);
		*divBy4 = (a == 4) && *int_mode;
    52ea:	d8 01       	movw	r26, r16
    52ec:	1c 92       	st	X, r1
			reg->ms.p2 = 0;
			reg->ms.p3 = 1;
		}
		else
		{
			uint32_t bx128 = b << 7;
    52ee:	cc 0c       	add	r12, r12
    52f0:	dd 1c       	adc	r13, r13
    52f2:	ee 1c       	adc	r14, r14
    52f4:	ff 1c       	adc	r15, r15
    52f6:	cc 0c       	add	r12, r12
    52f8:	dd 1c       	adc	r13, r13
    52fa:	ee 1c       	adc	r14, r14
    52fc:	ff 1c       	adc	r15, r15
    52fe:	cc 0c       	add	r12, r12
    5300:	dd 1c       	adc	r13, r13
    5302:	ee 1c       	adc	r14, r14
    5304:	ff 1c       	adc	r15, r15
    5306:	cc 0c       	add	r12, r12
    5308:	dd 1c       	adc	r13, r13
    530a:	ee 1c       	adc	r14, r14
    530c:	ff 1c       	adc	r15, r15
    530e:	cc 0c       	add	r12, r12
    5310:	dd 1c       	adc	r13, r13
    5312:	ee 1c       	adc	r14, r14
    5314:	ff 1c       	adc	r15, r15
    5316:	cc 0c       	add	r12, r12
    5318:	dd 1c       	adc	r13, r13
    531a:	ee 1c       	adc	r14, r14
    531c:	ff 1c       	adc	r15, r15
    531e:	cc 0c       	add	r12, r12
    5320:	dd 1c       	adc	r13, r13
    5322:	ee 1c       	adc	r14, r14
			uint32_t bx128overc = bx128 / c;
    5324:	ff 1c       	adc	r15, r15
    5326:	c7 01       	movw	r24, r14
    5328:	b6 01       	movw	r22, r12
    532a:	a3 01       	movw	r20, r6
    532c:	92 01       	movw	r18, r4
    532e:	80 d4       	rcall	.+2304   	; 0x5c30 <__udivmodsi4>
    5330:	ca 01       	movw	r24, r20
    5332:	b9 01       	movw	r22, r18
			reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    5334:	88 0c       	add	r8, r8
    5336:	99 1c       	adc	r9, r9
    5338:	aa 1c       	adc	r10, r10
    533a:	bb 1c       	adc	r11, r11
    533c:	88 0c       	add	r8, r8
    533e:	99 1c       	adc	r9, r9
    5340:	aa 1c       	adc	r10, r10
    5342:	bb 1c       	adc	r11, r11
    5344:	88 0c       	add	r8, r8
    5346:	99 1c       	adc	r9, r9
    5348:	aa 1c       	adc	r10, r10
    534a:	bb 1c       	adc	r11, r11
    534c:	88 0c       	add	r8, r8
    534e:	99 1c       	adc	r9, r9
    5350:	aa 1c       	adc	r10, r10
    5352:	bb 1c       	adc	r11, r11
    5354:	88 0c       	add	r8, r8
    5356:	99 1c       	adc	r9, r9
    5358:	aa 1c       	adc	r10, r10
    535a:	bb 1c       	adc	r11, r11
    535c:	88 0c       	add	r8, r8
    535e:	99 1c       	adc	r9, r9
    5360:	aa 1c       	adc	r10, r10
    5362:	bb 1c       	adc	r11, r11
    5364:	88 0c       	add	r8, r8
    5366:	99 1c       	adc	r9, r9
    5368:	aa 1c       	adc	r10, r10
    536a:	bb 1c       	adc	r11, r11
    536c:	89 01       	movw	r16, r18
    536e:	9a 01       	movw	r18, r20
    5370:	12 50       	subi	r17, 0x02	; 2
    5372:	21 09       	sbc	r18, r1
    5374:	31 09       	sbc	r19, r1
    5376:	80 0e       	add	r8, r16
    5378:	91 1e       	adc	r9, r17
    537a:	a2 1e       	adc	r10, r18
    537c:	b3 1e       	adc	r11, r19
    537e:	f1 01       	movw	r30, r2
    5380:	80 82       	st	Z, r8
    5382:	91 82       	std	Z+1, r9	; 0x01
    5384:	a2 82       	std	Z+2, r10	; 0x02
			reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    5386:	b3 82       	std	Z+3, r11	; 0x03
    5388:	a3 01       	movw	r20, r6
    538a:	92 01       	movw	r18, r4
    538c:	1b d4       	rcall	.+2102   	; 0x5bc4 <__mulsi3>
    538e:	c6 1a       	sub	r12, r22
    5390:	d7 0a       	sbc	r13, r23
    5392:	e8 0a       	sbc	r14, r24
    5394:	f9 0a       	sbc	r15, r25
    5396:	c4 82       	std	Z+4, r12	; 0x04
    5398:	d5 82       	std	Z+5, r13	; 0x05
    539a:	e6 82       	std	Z+6, r14	; 0x06
    539c:	f7 82       	std	Z+7, r15	; 0x07
			reg->ms.p3 = c;
    539e:	40 86       	std	Z+8, r4	; 0x08
    53a0:	51 86       	std	Z+9, r5	; 0x09
    53a2:	62 86       	std	Z+10, r6	; 0x0a
    53a4:	73 86       	std	Z+11, r7	; 0x0b
		}

		return(freq_Fout);
    53a6:	12 c0       	rjmp	.+36     	; 0x53cc <multisynth_estimate+0x1e8>
		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
		freq_Fout *= c;

		*int_mode = (b == 0) && !(a % 2);
    53a8:	81 e0       	ldi	r24, 0x01	; 1
    53aa:	ad 85       	ldd	r26, Y+13	; 0x0d
    53ac:	be 85       	ldd	r27, Y+14	; 0x0e
    53ae:	8c 93       	st	X, r24
		*divBy4 = (a == 4) && *int_mode;
    53b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    53b2:	98 89       	ldd	r25, Y+16	; 0x10
    53b4:	a9 89       	ldd	r26, Y+17	; 0x11
    53b6:	ba 89       	ldd	r27, Y+18	; 0x12
    53b8:	04 97       	sbiw	r24, 0x04	; 4
    53ba:	a1 05       	cpc	r26, r1
    53bc:	b1 05       	cpc	r27, r1
    53be:	09 f0       	breq	.+2      	; 0x53c2 <multisynth_estimate+0x1de>
    53c0:	94 cf       	rjmp	.-216    	; 0x52ea <multisynth_estimate+0x106>
    53c2:	7e cf       	rjmp	.-260    	; 0x52c0 <multisynth_estimate+0xdc>
		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
		freq_Fout *= c;

		*int_mode = (b == 0) && !(a % 2);
    53c4:	ad 85       	ldd	r26, Y+13	; 0x0d
    53c6:	be 85       	ldd	r27, Y+14	; 0x0e
    53c8:	1c 92       	st	X, r1
    53ca:	8f cf       	rjmp	.-226    	; 0x52ea <multisynth_estimate+0x106>
			reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
			reg->ms.p3 = c;
		}

		return(freq_Fout);
	}
    53cc:	69 85       	ldd	r22, Y+9	; 0x09
    53ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    53d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    53d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    53d4:	62 96       	adiw	r28, 0x12	; 18
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	f8 94       	cli
    53da:	de bf       	out	0x3e, r29	; 62
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	cd bf       	out	0x3d, r28	; 61
    53e0:	df 91       	pop	r29
    53e2:	cf 91       	pop	r28
    53e4:	1f 91       	pop	r17
    53e6:	0f 91       	pop	r16
    53e8:	ff 90       	pop	r15
    53ea:	ef 90       	pop	r14
    53ec:	df 90       	pop	r13
    53ee:	cf 90       	pop	r12
    53f0:	bf 90       	pop	r11
    53f2:	af 90       	pop	r10
    53f4:	9f 90       	pop	r9
    53f6:	8f 90       	pop	r8
    53f8:	7f 90       	pop	r7
    53fa:	6f 90       	pop	r6
    53fc:	5f 90       	pop	r5
    53fe:	4f 90       	pop	r4
    5400:	3f 90       	pop	r3
    5402:	2f 90       	pop	r2


	BOOL si5351_write_bulk(uint8_t addr, uint8_t bytes, uint8_t *data)
	{
    5404:	08 95       	ret

00005406 <si5351_write_bulk>:
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, data, bytes));
    5406:	26 2f       	mov	r18, r22
    5408:	68 2f       	mov	r22, r24
    540a:	80 ec       	ldi	r24, 0xC0	; 192
	}
    540c:	98 cb       	rjmp	.-2256   	; 0x4b3e <i2c_device_write>
#ifdef DEBUGGING_ONLY
		uint32_t set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#else
		void set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#endif
	{
    540e:	08 95       	ret

00005410 <set_pll>:
    5410:	1f 93       	push	r17
    5412:	cf 93       	push	r28
    5414:	df 93       	push	r29
    5416:	cd b7       	in	r28, 0x3d	; 61
    5418:	de b7       	in	r29, 0x3e	; 62
    541a:	66 97       	sbiw	r28, 0x16	; 22
    541c:	0f b6       	in	r0, 0x3f	; 63
    541e:	f8 94       	cli
    5420:	de bf       	out	0x3e, r29	; 62
    5422:	0f be       	out	0x3f, r0	; 63
    5424:	cd bf       	out	0x3d, r28	; 61
			Frequency_Hz pll_error = freq_VCO - result;
#else
	#ifdef APPLY_XTAL_CALIBRATION_VALUE
		pll_calc(freq_VCO, &pll_reg, g_si5351_ref_correction);
	#else
		pll_calc(freq_VCO, &pll_reg);
    5426:	14 2f       	mov	r17, r20
    5428:	ae 01       	movw	r20, r28
    542a:	4f 5f       	subi	r20, 0xFF	; 255
    542c:	5f 4f       	sbci	r21, 0xFF	; 255
    542e:	6e dd       	rcall	.-1316   	; 0x4f0c <pll_calc>

		/* Prepare an array for parameters to be written to */
		uint8_t i = 0;

		/* Registers 26-27 */
		params[i++] = pll_reg.reg.p3_1;
    5430:	8a 85       	ldd	r24, Y+10	; 0x0a
    5432:	8d 87       	std	Y+13, r24	; 0x0d
		params[i++] = pll_reg.reg.p3_0;
    5434:	89 85       	ldd	r24, Y+9	; 0x09
    5436:	8e 87       	std	Y+14, r24	; 0x0e

		/* Register 28 */
		params[i++] = pll_reg.reg.p1_2 & 0x03;
    5438:	8b 81       	ldd	r24, Y+3	; 0x03
    543a:	83 70       	andi	r24, 0x03	; 3
    543c:	8f 87       	std	Y+15, r24	; 0x0f

		/* Registers 29-30 */
		params[i++] = pll_reg.reg.p1_1;
    543e:	8a 81       	ldd	r24, Y+2	; 0x02
    5440:	88 8b       	std	Y+16, r24	; 0x10
		params[i++] = pll_reg.reg.p1_0;
    5442:	89 81       	ldd	r24, Y+1	; 0x01

		/* Register 31 */
		params[i] = pll_reg.reg.p3_2 << 4;
		params[i++] += pll_reg.reg.p2_2 & 0x0F;
    5444:	89 8b       	std	Y+17, r24	; 0x11
    5446:	9b 85       	ldd	r25, Y+11	; 0x0b
    5448:	8f 81       	ldd	r24, Y+7	; 0x07
    544a:	8f 70       	andi	r24, 0x0F	; 15
    544c:	20 e1       	ldi	r18, 0x10	; 16
    544e:	92 9f       	mul	r25, r18
    5450:	80 0d       	add	r24, r0

		/* Registers 32-33 */
		params[i++] = pll_reg.reg.p2_1;
    5452:	11 24       	eor	r1, r1
    5454:	8a 8b       	std	Y+18, r24	; 0x12
		params[i++] = pll_reg.reg.p2_0;
    5456:	8e 81       	ldd	r24, Y+6	; 0x06
    5458:	8b 8b       	std	Y+19, r24	; 0x13

		/* Write the parameters */
		if(target_pll == SI5351_PLLA)
    545a:	8d 81       	ldd	r24, Y+5	; 0x05
    545c:	8c 8b       	std	Y+20, r24	; 0x14
		{
			si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
    545e:	11 30       	cpi	r17, 0x01	; 1
    5460:	39 f4       	brne	.+14     	; 0x5470 <set_pll+0x60>
    5462:	ae 01       	movw	r20, r28
    5464:	43 5f       	subi	r20, 0xF3	; 243
    5466:	5f 4f       	sbci	r21, 0xFF	; 255
    5468:	68 e0       	ldi	r22, 0x08	; 8
    546a:	8a e1       	ldi	r24, 0x1A	; 26
    546c:	cc df       	rcall	.-104    	; 0x5406 <si5351_write_bulk>
		}
		else    /* if(target_pll == SI5351_PLLB) */
		{
			si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
    546e:	06 c0       	rjmp	.+12     	; 0x547c <set_pll+0x6c>
    5470:	ae 01       	movw	r20, r28
    5472:	43 5f       	subi	r20, 0xF3	; 243
    5474:	5f 4f       	sbci	r21, 0xFF	; 255
    5476:	68 e0       	ldi	r22, 0x08	; 8
    5478:	82 e2       	ldi	r24, 0x22	; 34
		}

#ifdef DEBUGGING_ONLY
			return(result);
#endif
	}
    547a:	c5 df       	rcall	.-118    	; 0x5406 <si5351_write_bulk>
    547c:	66 96       	adiw	r28, 0x16	; 22
    547e:	0f b6       	in	r0, 0x3f	; 63
    5480:	f8 94       	cli
    5482:	de bf       	out	0x3e, r29	; 62
    5484:	0f be       	out	0x3f, r0	; 63
    5486:	cd bf       	out	0x3d, r28	; 61
    5488:	df 91       	pop	r29
    548a:	cf 91       	pop	r28
    548c:	1f 91       	pop	r17
 * Currently this only works for PLLB.
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
    548e:	08 95       	ret

00005490 <si5351_set_vcoB_freq>:
    5490:	60 93 7a 04 	sts	0x047A, r22	; 0x80047a <freqVCOB>
    5494:	70 93 7b 04 	sts	0x047B, r23	; 0x80047b <freqVCOB+0x1>
    5498:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <freqVCOB+0x2>
		set_pll(freq_VCO, SI5351_PLLB);
    549c:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <freqVCOB+0x3>
    54a0:	42 e0       	ldi	r20, 0x02	; 2
    54a2:	b6 cf       	rjmp	.-148    	; 0x5410 <set_pll>
	{
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, data, bytes));
	}

	BOOL si5351_write(uint8_t addr, uint8_t data)
	{
    54a4:	08 95       	ret

000054a6 <si5351_write>:
    54a6:	cf 93       	push	r28
    54a8:	df 93       	push	r29
    54aa:	1f 92       	push	r1
    54ac:	cd b7       	in	r28, 0x3d	; 61
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, &data, 1));
    54ae:	de b7       	in	r29, 0x3e	; 62
    54b0:	69 83       	std	Y+1, r22	; 0x01
    54b2:	21 e0       	ldi	r18, 0x01	; 1
    54b4:	ae 01       	movw	r20, r28
    54b6:	4f 5f       	subi	r20, 0xFF	; 255
    54b8:	5f 4f       	sbci	r21, 0xFF	; 255
    54ba:	68 2f       	mov	r22, r24
	}
    54bc:	80 ec       	ldi	r24, 0xC0	; 192
    54be:	3f db       	rcall	.-2434   	; 0x4b3e <i2c_device_write>
    54c0:	0f 90       	pop	r0
    54c2:	df 91       	pop	r29
 *
 * Apply a reset to the indicated PLL(s).
 *
 */
	void pll_reset(Si5351_pll target_pll)
	{
    54c4:	cf 91       	pop	r28
    54c6:	08 95       	ret

000054c8 <pll_reset>:
		if(target_pll & SI5351_PLLA)
    54c8:	cf 93       	push	r28
    54ca:	c8 2f       	mov	r28, r24
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
    54cc:	80 ff       	sbrs	r24, 0
    54ce:	03 c0       	rjmp	.+6      	; 0x54d6 <pll_reset+0xe>
    54d0:	60 e2       	ldi	r22, 0x20	; 32
    54d2:	81 eb       	ldi	r24, 0xB1	; 177
		}

		if(target_pll & SI5351_PLLB)
    54d4:	e8 df       	rcall	.-48     	; 0x54a6 <si5351_write>
    54d6:	c1 ff       	sbrs	r28, 1
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
    54d8:	03 c0       	rjmp	.+6      	; 0x54e0 <pll_reset+0x18>
    54da:	60 e8       	ldi	r22, 0x80	; 128
    54dc:	81 eb       	ldi	r24, 0xB1	; 177
		}
	}
    54de:	e3 df       	rcall	.-58     	; 0x54a6 <si5351_write>
    54e0:	cf 91       	pop	r28
	{
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, &data, 1));
	}

	BOOL si5351_read(uint8_t addr, uint8_t *data)
	{
    54e2:	08 95       	ret

000054e4 <si5351_read>:
		return(i2c_device_read(SI5351_I2C_SLAVE_ADDR, addr, data, 1));
    54e4:	ab 01       	movw	r20, r22
    54e6:	21 e0       	ldi	r18, 0x01	; 1
    54e8:	68 2f       	mov	r22, r24
    54ea:	80 ec       	ldi	r24, 0xC0	; 192
    54ec:	a6 cb       	rjmp	.-2228   	; 0x4c3a <i2c_device_read>
	}
    54ee:	08 95       	ret

000054f0 <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	BOOL si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    54f0:	cf 92       	push	r12
    54f2:	df 92       	push	r13
    54f4:	ef 92       	push	r14
    54f6:	ff 92       	push	r15
    54f8:	0f 93       	push	r16
    54fa:	1f 93       	push	r17
    54fc:	cf 93       	push	r28
    54fe:	df 93       	push	r29
    5500:	1f 92       	push	r1
    5502:	cd b7       	in	r28, 0x3d	; 61
    5504:	de b7       	in	r29, 0x3e	; 62
    5506:	08 2f       	mov	r16, r24
    5508:	6a 01       	movw	r12, r20
		BOOL err = FALSE;
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			i2c_init();
    550a:	7b 01       	movw	r14, r22
    550c:	9f da       	rcall	.-2754   	; 0x4a4c <i2c_init>
			uint8_t result_val = 0x00;
			BOOL result = FALSE;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    550e:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <freqVCOB>
    5512:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <freqVCOB+0x1>
    5516:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <freqVCOB+0x2>
		xtal_freq = SI5351_XTAL_FREQ;
    551a:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <freqVCOB+0x3>
    551e:	80 e4       	ldi	r24, 0x40	; 64
    5520:	98 e7       	ldi	r25, 0x78	; 120
    5522:	ad e7       	ldi	r26, 0x7D	; 125
    5524:	b1 e0       	ldi	r27, 0x01	; 1
    5526:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <xtal_freq>
    552a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <xtal_freq+0x1>
		enabledClocksMask = 0x00;
    552e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <xtal_freq+0x2>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		err = si5351_write(3, 0xff);
    5532:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <xtal_freq+0x3>
    5536:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <enabledClocksMask>
    553a:	6f ef       	ldi	r22, 0xFF	; 255

		/* Power down clocks */
		err |= si5351_write(16, 0xCC);
    553c:	83 e0       	ldi	r24, 0x03	; 3
    553e:	b3 df       	rcall	.-154    	; 0x54a6 <si5351_write>
    5540:	18 2f       	mov	r17, r24
    5542:	6c ec       	ldi	r22, 0xCC	; 204
    5544:	80 e1       	ldi	r24, 0x10	; 16
		err |= si5351_write(17, 0xCC);
    5546:	af df       	rcall	.-162    	; 0x54a6 <si5351_write>
    5548:	18 2b       	or	r17, r24
    554a:	6c ec       	ldi	r22, 0xCC	; 204
    554c:	81 e1       	ldi	r24, 0x11	; 17
    554e:	ab df       	rcall	.-170    	; 0x54a6 <si5351_write>
		err |= si5351_write(18, 0xCC);
    5550:	18 2b       	or	r17, r24
    5552:	6c ec       	ldi	r22, 0xCC	; 204
    5554:	82 e1       	ldi	r24, 0x12	; 18
    5556:	a7 df       	rcall	.-178    	; 0x54a6 <si5351_write>
    5558:	18 2b       	or	r17, r24

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    555a:	60 2f       	mov	r22, r16
    555c:	62 61       	ori	r22, 0x12	; 18
    555e:	69 83       	std	Y+1, r22	; 0x01

		err |= si5351_write(SI5351_CRYSTAL_LOAD, reg_val);
    5560:	87 eb       	ldi	r24, 0xB7	; 183
    5562:	a1 df       	rcall	.-190    	; 0x54a6 <si5351_write>
    5564:	18 2b       	or	r17, r24

		if(!ref_osc_freq)
    5566:	c1 14       	cp	r12, r1
    5568:	d1 04       	cpc	r13, r1
    556a:	e1 04       	cpc	r14, r1
    556c:	f1 04       	cpc	r15, r1
    556e:	51 f4       	brne	.+20     	; 0x5584 <si5351_init+0x94>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    5570:	0f 2e       	mov	r0, r31
    5572:	f0 e4       	ldi	r31, 0x40	; 64
    5574:	cf 2e       	mov	r12, r31
    5576:	f8 e7       	ldi	r31, 0x78	; 120
    5578:	df 2e       	mov	r13, r31
    557a:	fd e7       	ldi	r31, 0x7D	; 125
    557c:	ef 2e       	mov	r14, r31
    557e:	ff 24       	eor	r15, r15
    5580:	f3 94       	inc	r15
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    5582:	f0 2d       	mov	r31, r0
    5584:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <xtal_freq>
    5588:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <xtal_freq+0x1>
    558c:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <xtal_freq+0x2>
    5590:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <xtal_freq+0x3>
    5594:	c8 16       	cp	r12, r24
    5596:	d9 06       	cpc	r13, r25
    5598:	ea 06       	cpc	r14, r26
    559a:	fb 06       	cpc	r15, r27
		{
			if(si5351_read(SI5351_PLL_INPUT_SOURCE, &reg_val))
    559c:	b1 f0       	breq	.+44     	; 0x55ca <si5351_init+0xda>
    559e:	be 01       	movw	r22, r28
    55a0:	6f 5f       	subi	r22, 0xFF	; 255
    55a2:	7f 4f       	sbci	r23, 0xFF	; 255
    55a4:	8f e0       	ldi	r24, 0x0F	; 15
    55a6:	9e df       	rcall	.-196    	; 0x54e4 <si5351_read>
    55a8:	81 11       	cpse	r24, r1
    55aa:	11 c0       	rjmp	.+34     	; 0x55ce <si5351_init+0xde>
			{
				return TRUE;
			}

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    55ac:	69 81       	ldd	r22, Y+1	; 0x01
    55ae:	6f 73       	andi	r22, 0x3F	; 63
    55b0:	69 83       	std	Y+1, r22	; 0x01

			xtal_freq = ref_osc_freq;
    55b2:	c0 92 40 01 	sts	0x0140, r12	; 0x800140 <xtal_freq>
    55b6:	d0 92 41 01 	sts	0x0141, r13	; 0x800141 <xtal_freq+0x1>
    55ba:	e0 92 42 01 	sts	0x0142, r14	; 0x800142 <xtal_freq+0x2>
    55be:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			err |= si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
    55c2:	8f e0       	ldi	r24, 0x0F	; 15
    55c4:	70 df       	rcall	.-288    	; 0x54a6 <si5351_write>
    55c6:	81 2b       	or	r24, r17
    55c8:	03 c0       	rjmp	.+6      	; 0x55d0 <si5351_init+0xe0>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;

		err |= si5351_write(SI5351_CRYSTAL_LOAD, reg_val);
    55ca:	81 2f       	mov	r24, r17
    55cc:	01 c0       	rjmp	.+2      	; 0x55d0 <si5351_init+0xe0>
		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
		{
			if(si5351_read(SI5351_PLL_INPUT_SOURCE, &reg_val))
			{
				return TRUE;
    55ce:	81 e0       	ldi	r24, 0x01	; 1

			err |= si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
		}

		return err;
	}
    55d0:	0f 90       	pop	r0
    55d2:	df 91       	pop	r29
    55d4:	cf 91       	pop	r28
    55d6:	1f 91       	pop	r17
    55d8:	0f 91       	pop	r16
    55da:	ff 90       	pop	r15
    55dc:	ef 90       	pop	r14
    55de:	df 90       	pop	r13
    55e0:	cf 90       	pop	r12
    55e2:	08 95       	ret

000055e4 <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    55e4:	0f 93       	push	r16
    55e6:	1f 93       	push	r17
    55e8:	cf 93       	push	r28
    55ea:	df 93       	push	r29
    55ec:	1f 92       	push	r1
    55ee:	cd b7       	in	r28, 0x3d	; 61
    55f0:	de b7       	in	r29, 0x3e	; 62
    55f2:	18 2f       	mov	r17, r24
		uint8_t reg_val;

		if(si5351_read(SI5351_OUTPUT_ENABLE_CTRL, &reg_val)) return ERROR_CODE_RTC_NONRESPONSIVE;
    55f4:	06 2f       	mov	r16, r22
    55f6:	be 01       	movw	r22, r28
    55f8:	6f 5f       	subi	r22, 0xFF	; 255
    55fa:	7f 4f       	sbci	r23, 0xFF	; 255
    55fc:	83 e0       	ldi	r24, 0x03	; 3
    55fe:	72 df       	rcall	.-284    	; 0x54e4 <si5351_read>
    5600:	81 11       	cpse	r24, r1
    5602:	1e c0       	rjmp	.+60     	; 0x5640 <si5351_clock_enable+0x5c>

		if(enable)
    5604:	00 23       	and	r16, r16
    5606:	61 f0       	breq	.+24     	; 0x5620 <si5351_clock_enable+0x3c>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	02 c0       	rjmp	.+4      	; 0x5612 <si5351_clock_enable+0x2e>
    560e:	88 0f       	add	r24, r24
    5610:	99 1f       	adc	r25, r25
    5612:	1a 95       	dec	r17
    5614:	e2 f7       	brpl	.-8      	; 0x560e <si5351_clock_enable+0x2a>
    5616:	80 95       	com	r24
    5618:	99 81       	ldd	r25, Y+1	; 0x01
    561a:	89 23       	and	r24, r25
    561c:	89 83       	std	Y+1, r24	; 0x01
    561e:	0a c0       	rjmp	.+20     	; 0x5634 <si5351_clock_enable+0x50>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    5620:	81 e0       	ldi	r24, 0x01	; 1
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	02 c0       	rjmp	.+4      	; 0x562a <si5351_clock_enable+0x46>
    5626:	88 0f       	add	r24, r24
    5628:	99 1f       	adc	r25, r25
    562a:	1a 95       	dec	r17
    562c:	e2 f7       	brpl	.-8      	; 0x5626 <si5351_clock_enable+0x42>
    562e:	99 81       	ldd	r25, Y+1	; 0x01
    5630:	89 2b       	or	r24, r25
		}

		if(si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val)) return ERROR_CODE_RTC_NONRESPONSIVE;
    5632:	89 83       	std	Y+1, r24	; 0x01
    5634:	69 81       	ldd	r22, Y+1	; 0x01
    5636:	83 e0       	ldi	r24, 0x03	; 3
    5638:	36 df       	rcall	.-404    	; 0x54a6 <si5351_write>
    563a:	81 11       	cpse	r24, r1
    563c:	03 c0       	rjmp	.+6      	; 0x5644 <si5351_clock_enable+0x60>
    563e:	03 c0       	rjmp	.+6      	; 0x5646 <si5351_clock_enable+0x62>
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
		uint8_t reg_val;

		if(si5351_read(SI5351_OUTPUT_ENABLE_CTRL, &reg_val)) return ERROR_CODE_RTC_NONRESPONSIVE;
    5640:	8c ef       	ldi	r24, 0xFC	; 252
    5642:	01 c0       	rjmp	.+2      	; 0x5646 <si5351_clock_enable+0x62>
		else
		{
			reg_val |= (1 << (uint8_t)clk);
		}

		if(si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val)) return ERROR_CODE_RTC_NONRESPONSIVE;
    5644:	8c ef       	ldi	r24, 0xFC	; 252

		return ERROR_CODE_NO_ERROR;
	}
    5646:	0f 90       	pop	r0
    5648:	df 91       	pop	r29
    564a:	cf 91       	pop	r28
    564c:	1f 91       	pop	r17
    564e:	0f 91       	pop	r16
    5650:	08 95       	ret

00005652 <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    5652:	0f 93       	push	r16
    5654:	1f 93       	push	r17
    5656:	cf 93       	push	r28
    5658:	df 93       	push	r29
    565a:	1f 92       	push	r1
    565c:	cd b7       	in	r28, 0x3d	; 61
    565e:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val;
		const uint8_t mask = 0x03;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    5660:	06 2f       	mov	r16, r22
    5662:	10 e1       	ldi	r17, 0x10	; 16
    5664:	18 0f       	add	r17, r24
    5666:	be 01       	movw	r22, r28
    5668:	6f 5f       	subi	r22, 0xFF	; 255
    566a:	7f 4f       	sbci	r23, 0xFF	; 255
    566c:	81 2f       	mov	r24, r17
    566e:	3a df       	rcall	.-396    	; 0x54e4 <si5351_read>
    5670:	81 11       	cpse	r24, r1
    5672:	1f c0       	rjmp	.+62     	; 0x56b2 <si5351_drive_strength+0x60>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}

		switch(drive)
    5674:	01 30       	cpi	r16, 0x01	; 1
    5676:	51 f0       	breq	.+20     	; 0x568c <si5351_drive_strength+0x3a>
    5678:	28 f0       	brcs	.+10     	; 0x5684 <si5351_drive_strength+0x32>
    567a:	02 30       	cpi	r16, 0x02	; 2
    567c:	61 f0       	breq	.+24     	; 0x5696 <si5351_drive_strength+0x44>
    567e:	03 30       	cpi	r16, 0x03	; 3
    5680:	79 f0       	breq	.+30     	; 0x56a0 <si5351_drive_strength+0x4e>
    5682:	11 c0       	rjmp	.+34     	; 0x56a6 <si5351_drive_strength+0x54>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    5684:	89 81       	ldd	r24, Y+1	; 0x01
    5686:	8c 7f       	andi	r24, 0xFC	; 252
    5688:	89 83       	std	Y+1, r24	; 0x01
				reg_val |= 0x00;
			}
			break;
    568a:	0d c0       	rjmp	.+26     	; 0x56a6 <si5351_drive_strength+0x54>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x01;
    568c:	89 81       	ldd	r24, Y+1	; 0x01
    568e:	8c 7f       	andi	r24, 0xFC	; 252
    5690:	81 60       	ori	r24, 0x01	; 1
    5692:	89 83       	std	Y+1, r24	; 0x01
			break;

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x02;
    5694:	08 c0       	rjmp	.+16     	; 0x56a6 <si5351_drive_strength+0x54>
    5696:	89 81       	ldd	r24, Y+1	; 0x01
    5698:	8c 7f       	andi	r24, 0xFC	; 252
    569a:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    569c:	89 83       	std	Y+1, r24	; 0x01

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    569e:	03 c0       	rjmp	.+6      	; 0x56a6 <si5351_drive_strength+0x54>
    56a0:	89 81       	ldd	r24, Y+1	; 0x01
    56a2:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		if(si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    56a4:	89 83       	std	Y+1, r24	; 0x01
    56a6:	69 81       	ldd	r22, Y+1	; 0x01
    56a8:	81 2f       	mov	r24, r17
    56aa:	fd de       	rcall	.-518    	; 0x54a6 <si5351_write>
    56ac:	81 11       	cpse	r24, r1
    56ae:	03 c0       	rjmp	.+6      	; 0x56b6 <si5351_drive_strength+0x64>
    56b0:	03 c0       	rjmp	.+6      	; 0x56b8 <si5351_drive_strength+0x66>
		uint8_t reg_val;
		const uint8_t mask = 0x03;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    56b2:	8b ef       	ldi	r24, 0xFB	; 251
			{
			}
			break;
		}

		if(si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    56b4:	01 c0       	rjmp	.+2      	; 0x56b8 <si5351_drive_strength+0x66>

		return ERROR_CODE_NO_ERROR;
	}
    56b6:	8b ef       	ldi	r24, 0xFB	; 251
    56b8:	0f 90       	pop	r0
    56ba:	df 91       	pop	r29
    56bc:	cf 91       	pop	r28
    56be:	1f 91       	pop	r17
    56c0:	0f 91       	pop	r16
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	void set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    56c2:	08 95       	ret

000056c4 <set_multisynth_registers_source>:
    56c4:	0f 93       	push	r16
    56c6:	1f 93       	push	r17
    56c8:	cf 93       	push	r28
    56ca:	df 93       	push	r29
    56cc:	1f 92       	push	r1
    56ce:	cd b7       	in	r28, 0x3d	; 61
    56d0:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val;
		uint8_t addr = SI5351_CLK0_CTRL + (uint8_t)clk;
    56d2:	06 2f       	mov	r16, r22
    56d4:	10 e1       	ldi	r17, 0x10	; 16

		if(si5351_read(addr, &reg_val))
    56d6:	18 0f       	add	r17, r24
    56d8:	be 01       	movw	r22, r28
    56da:	6f 5f       	subi	r22, 0xFF	; 255
    56dc:	7f 4f       	sbci	r23, 0xFF	; 255
    56de:	81 2f       	mov	r24, r17
    56e0:	01 df       	rcall	.-510    	; 0x54e4 <si5351_read>
    56e2:	81 11       	cpse	r24, r1
		{
			return;
		}

		if(pll == SI5351_PLLA)
    56e4:	0e c0       	rjmp	.+28     	; 0x5702 <set_multisynth_registers_source+0x3e>
    56e6:	01 30       	cpi	r16, 0x01	; 1
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    56e8:	21 f4       	brne	.+8      	; 0x56f2 <set_multisynth_registers_source+0x2e>
    56ea:	89 81       	ldd	r24, Y+1	; 0x01
    56ec:	8f 7d       	andi	r24, 0xDF	; 223
    56ee:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(pll == SI5351_PLLB)
    56f0:	05 c0       	rjmp	.+10     	; 0x56fc <set_multisynth_registers_source+0x38>
    56f2:	02 30       	cpi	r16, 0x02	; 2
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    56f4:	19 f4       	brne	.+6      	; 0x56fc <set_multisynth_registers_source+0x38>
    56f6:	89 81       	ldd	r24, Y+1	; 0x01
		}

		si5351_write(addr, reg_val);
    56f8:	80 62       	ori	r24, 0x20	; 32
    56fa:	89 83       	std	Y+1, r24	; 0x01
    56fc:	69 81       	ldd	r22, Y+1	; 0x01
    56fe:	81 2f       	mov	r24, r17
	}
    5700:	d2 de       	rcall	.-604    	; 0x54a6 <si5351_write>
    5702:	0f 90       	pop	r0
    5704:	df 91       	pop	r29
    5706:	cf 91       	pop	r28
    5708:	1f 91       	pop	r17
    570a:	0f 91       	pop	r16
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	void set_integer_mode(Si5351_clock clk, BOOL enable)
	{
    570c:	08 95       	ret

0000570e <set_integer_mode>:
    570e:	0f 93       	push	r16
    5710:	1f 93       	push	r17
    5712:	cf 93       	push	r28
    5714:	df 93       	push	r29
    5716:	1f 92       	push	r1
    5718:	cd b7       	in	r28, 0x3d	; 61
    571a:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    571c:	06 2f       	mov	r16, r22
    571e:	10 e1       	ldi	r17, 0x10	; 16
    5720:	18 0f       	add	r17, r24
    5722:	be 01       	movw	r22, r28
    5724:	6f 5f       	subi	r22, 0xFF	; 255
    5726:	7f 4f       	sbci	r23, 0xFF	; 255
    5728:	81 2f       	mov	r24, r17
    572a:	dc de       	rcall	.-584    	; 0x54e4 <si5351_read>
    572c:	81 11       	cpse	r24, r1
    572e:	0c c0       	rjmp	.+24     	; 0x5748 <set_integer_mode+0x3a>
		{
			return;
		}

		if(enable)
    5730:	00 23       	and	r16, r16
    5732:	21 f0       	breq	.+8      	; 0x573c <set_integer_mode+0x2e>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    5734:	89 81       	ldd	r24, Y+1	; 0x01
    5736:	80 64       	ori	r24, 0x40	; 64
    5738:	89 83       	std	Y+1, r24	; 0x01
    573a:	03 c0       	rjmp	.+6      	; 0x5742 <set_integer_mode+0x34>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    573c:	89 81       	ldd	r24, Y+1	; 0x01
    573e:	8f 7b       	andi	r24, 0xBF	; 191
    5740:	89 83       	std	Y+1, r24	; 0x01
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
    5742:	69 81       	ldd	r22, Y+1	; 0x01
    5744:	81 2f       	mov	r24, r17
    5746:	af de       	rcall	.-674    	; 0x54a6 <si5351_write>
	}
    5748:	0f 90       	pop	r0
    574a:	df 91       	pop	r29
    574c:	cf 91       	pop	r28
    574e:	1f 91       	pop	r17
    5750:	0f 91       	pop	r16
    5752:	08 95       	ret

00005754 <ms_div>:


	void ms_div(Si5351_clock clk, uint8_t r_div, BOOL div_by_4)
	{
    5754:	ff 92       	push	r15
    5756:	0f 93       	push	r16
    5758:	1f 93       	push	r17
    575a:	cf 93       	push	r28
    575c:	df 93       	push	r29
    575e:	1f 92       	push	r1
    5760:	cd b7       	in	r28, 0x3d	; 61
    5762:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;

		switch(clk)
    5764:	81 30       	cpi	r24, 0x01	; 1
    5766:	21 f0       	breq	.+8      	; 0x5770 <ms_div+0x1c>
    5768:	68 f0       	brcs	.+26     	; 0x5784 <ms_div+0x30>
    576a:	82 30       	cpi	r24, 0x02	; 2
    576c:	31 f0       	breq	.+12     	; 0x577a <ms_div+0x26>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    576e:	28 c0       	rjmp	.+80     	; 0x57c0 <ms_div+0x6c>
    5770:	0f 2e       	mov	r0, r31
    5772:	f4 e3       	ldi	r31, 0x34	; 52
    5774:	ff 2e       	mov	r15, r31
    5776:	f0 2d       	mov	r31, r0
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    5778:	09 c0       	rjmp	.+18     	; 0x578c <ms_div+0x38>
    577a:	0f 2e       	mov	r0, r31
    577c:	fc e3       	ldi	r31, 0x3C	; 60
    577e:	ff 2e       	mov	r15, r31
			}
			break;
    5780:	f0 2d       	mov	r31, r0

		switch(clk)
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    5782:	04 c0       	rjmp	.+8      	; 0x578c <ms_div+0x38>
    5784:	0f 2e       	mov	r0, r31
    5786:	fc e2       	ldi	r31, 0x2C	; 44
    5788:	ff 2e       	mov	r15, r31
    578a:	f0 2d       	mov	r31, r0
    578c:	04 2f       	mov	r16, r20

			default:
				return;
		}

		if(si5351_read(reg_addr, &reg_val))
    578e:	16 2f       	mov	r17, r22
    5790:	be 01       	movw	r22, r28
    5792:	6f 5f       	subi	r22, 0xFF	; 255
    5794:	7f 4f       	sbci	r23, 0xFF	; 255
    5796:	8f 2d       	mov	r24, r15
    5798:	a5 de       	rcall	.-694    	; 0x54e4 <si5351_read>
    579a:	81 11       	cpse	r24, r1
    579c:	11 c0       	rjmp	.+34     	; 0x57c0 <ms_div+0x6c>
		{
			return;
		}

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    579e:	89 81       	ldd	r24, Y+1	; 0x01
    57a0:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    57a2:	01 11       	cpse	r16, r1
    57a4:	02 c0       	rjmp	.+4      	; 0x57aa <ms_div+0x56>
		{
			return;
		}

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    57a6:	89 83       	std	Y+1, r24	; 0x01
    57a8:	02 c0       	rjmp	.+4      	; 0x57ae <ms_div+0x5a>

		if(div_by_4)
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    57aa:	8c 60       	ori	r24, 0x0C	; 12
    57ac:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    57ae:	80 e1       	ldi	r24, 0x10	; 16
    57b0:	18 9f       	mul	r17, r24
    57b2:	b0 01       	movw	r22, r0
    57b4:	11 24       	eor	r1, r1
    57b6:	89 81       	ldd	r24, Y+1	; 0x01
    57b8:	68 2b       	or	r22, r24
    57ba:	69 83       	std	Y+1, r22	; 0x01

		si5351_write(reg_addr, reg_val);
    57bc:	8f 2d       	mov	r24, r15
    57be:	73 de       	rcall	.-794    	; 0x54a6 <si5351_write>
	}
    57c0:	0f 90       	pop	r0
    57c2:	df 91       	pop	r29
    57c4:	cf 91       	pop	r28
    57c6:	1f 91       	pop	r17
    57c8:	0f 91       	pop	r16
    57ca:	ff 90       	pop	r15
    57cc:	08 95       	ret

000057ce <set_multisynth_registers>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	void set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, BOOL int_mode, uint8_t r_div, BOOL div_by_4)
	{
    57ce:	8f 92       	push	r8
    57d0:	af 92       	push	r10
    57d2:	cf 92       	push	r12
    57d4:	df 92       	push	r13
    57d6:	ef 92       	push	r14
    57d8:	ff 92       	push	r15
    57da:	0f 93       	push	r16
    57dc:	1f 93       	push	r17
    57de:	cf 93       	push	r28
    57e0:	df 93       	push	r29
    57e2:	cd b7       	in	r28, 0x3d	; 61
    57e4:	de b7       	in	r29, 0x3e	; 62
    57e6:	67 97       	sbiw	r28, 0x17	; 23
    57e8:	0f b6       	in	r0, 0x3f	; 63
    57ea:	f8 94       	cli
    57ec:	de bf       	out	0x3e, r29	; 62
    57ee:	0f be       	out	0x3f, r0	; 63
    57f0:	cd bf       	out	0x3d, r28	; 61
    57f2:	f8 2e       	mov	r15, r24
    57f4:	cc 86       	std	Y+12, r12	; 0x0c
    57f6:	dd 86       	std	Y+13, r13	; 0x0d
    57f8:	ee 86       	std	Y+14, r14	; 0x0e
    57fa:	08 8b       	std	Y+16, r16	; 0x10
    57fc:	19 8b       	std	Y+17, r17	; 0x11
    57fe:	2a 8b       	std	Y+18, r18	; 0x12
    5800:	6e 8b       	std	Y+22, r22	; 0x16
		uint8_t params[10];
		uint8_t i = 0;
		uint8_t reg_val;

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    5802:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    5804:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), &reg_val))
    5806:	88 0f       	add	r24, r24
    5808:	88 0f       	add	r24, r24
    580a:	88 0f       	add	r24, r24
    580c:	be 01       	movw	r22, r28
    580e:	65 5f       	subi	r22, 0xF5	; 245
    5810:	7f 4f       	sbci	r23, 0xFF	; 255
    5812:	84 5d       	subi	r24, 0xD4	; 212
    5814:	67 de       	rcall	.-818    	; 0x54e4 <si5351_read>
    5816:	81 11       	cpse	r24, r1
		{
			return;
		}

		reg_val &= 0xFC;    /*~(0x03); */
    5818:	3b c0       	rjmp	.+118    	; 0x5890 <set_multisynth_registers+0xc2>
    581a:	8b 85       	ldd	r24, Y+11	; 0x0b
    581c:	8c 7f       	andi	r24, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    581e:	8b 87       	std	Y+11, r24	; 0x0b
    5820:	9e 85       	ldd	r25, Y+14	; 0x0e
    5822:	93 70       	andi	r25, 0x03	; 3

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    5824:	89 2b       	or	r24, r25
		params[i++] = ms_reg.reg.p1_0;
    5826:	8b 83       	std	Y+3, r24	; 0x03
    5828:	8d 85       	ldd	r24, Y+13	; 0x0d

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    582a:	8c 83       	std	Y+4, r24	; 0x04
    582c:	8c 85       	ldd	r24, Y+12	; 0x0c
    582e:	8d 83       	std	Y+5, r24	; 0x05
    5830:	9e 89       	ldd	r25, Y+22	; 0x16
    5832:	8a 89       	ldd	r24, Y+18	; 0x12
    5834:	8f 70       	andi	r24, 0x0F	; 15
    5836:	20 e1       	ldi	r18, 0x10	; 16

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    5838:	92 9f       	mul	r25, r18
    583a:	80 0d       	add	r24, r0
		params[i++] = ms_reg.reg.p2_0;
    583c:	11 24       	eor	r1, r1
    583e:	8e 83       	std	Y+6, r24	; 0x06

		/* Write the parameters */
		switch(clk)
    5840:	89 89       	ldd	r24, Y+17	; 0x11
    5842:	8f 83       	std	Y+7, r24	; 0x07
    5844:	88 89       	ldd	r24, Y+16	; 0x10
    5846:	88 87       	std	Y+8, r24	; 0x08
    5848:	81 e0       	ldi	r24, 0x01	; 1
    584a:	f8 16       	cp	r15, r24
    584c:	69 f0       	breq	.+26     	; 0x5868 <set_multisynth_registers+0x9a>
    584e:	f8 16       	cp	r15, r24
    5850:	20 f0       	brcs	.+8      	; 0x585a <set_multisynth_registers+0x8c>
		{
			case SI5351_CLK0:
			{
				si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
    5852:	22 e0       	ldi	r18, 0x02	; 2
    5854:	f2 16       	cp	r15, r18
    5856:	79 f0       	breq	.+30     	; 0x5876 <set_multisynth_registers+0xa8>
    5858:	14 c0       	rjmp	.+40     	; 0x5882 <set_multisynth_registers+0xb4>
    585a:	ae 01       	movw	r20, r28
    585c:	4f 5f       	subi	r20, 0xFF	; 255
    585e:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			break;
    5860:	68 e0       	ldi	r22, 0x08	; 8

			case SI5351_CLK1:
			{
				si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
    5862:	8a e2       	ldi	r24, 0x2A	; 42
    5864:	d0 dd       	rcall	.-1120   	; 0x5406 <si5351_write_bulk>
    5866:	0d c0       	rjmp	.+26     	; 0x5882 <set_multisynth_registers+0xb4>
    5868:	ae 01       	movw	r20, r28
    586a:	4f 5f       	subi	r20, 0xFF	; 255
    586c:	5f 4f       	sbci	r21, 0xFF	; 255
    586e:	68 e0       	ldi	r22, 0x08	; 8
			}
			break;
    5870:	82 e3       	ldi	r24, 0x32	; 50

			case SI5351_CLK2:
			{
				si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
    5872:	c9 dd       	rcall	.-1134   	; 0x5406 <si5351_write_bulk>
    5874:	06 c0       	rjmp	.+12     	; 0x5882 <set_multisynth_registers+0xb4>
    5876:	ae 01       	movw	r20, r28
    5878:	4f 5f       	subi	r20, 0xFF	; 255
    587a:	5f 4f       	sbci	r21, 0xFF	; 255
    587c:	68 e0       	ldi	r22, 0x08	; 8
    587e:	8a e3       	ldi	r24, 0x3A	; 58
			{
			}
			break;
		}

		set_integer_mode(clk, int_mode);
    5880:	c2 dd       	rcall	.-1148   	; 0x5406 <si5351_write_bulk>
    5882:	6a 2d       	mov	r22, r10
    5884:	8f 2d       	mov	r24, r15
    5886:	43 df       	rcall	.-378    	; 0x570e <set_integer_mode>
		ms_div(clk, r_div, div_by_4);
    5888:	4c a1       	ldd	r20, Y+36	; 0x24
    588a:	68 2d       	mov	r22, r8
    588c:	8f 2d       	mov	r24, r15
    588e:	62 df       	rcall	.-316    	; 0x5754 <ms_div>
    5890:	67 96       	adiw	r28, 0x17	; 23
	}
    5892:	0f b6       	in	r0, 0x3f	; 63
    5894:	f8 94       	cli
    5896:	de bf       	out	0x3e, r29	; 62
    5898:	0f be       	out	0x3f, r0	; 63
    589a:	cd bf       	out	0x3d, r28	; 61
    589c:	df 91       	pop	r29
    589e:	cf 91       	pop	r28
    58a0:	1f 91       	pop	r17
    58a2:	0f 91       	pop	r16
    58a4:	ff 90       	pop	r15
    58a6:	ef 90       	pop	r14
    58a8:	df 90       	pop	r13
    58aa:	cf 90       	pop	r12
    58ac:	af 90       	pop	r10
    58ae:	8f 90       	pop	r8
 *
 * Returns TRUE on failure
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, BOOL clocksOff)
	{
    58b0:	08 95       	ret

000058b2 <si5351_set_freq>:
    58b2:	2f 92       	push	r2
    58b4:	3f 92       	push	r3
    58b6:	4f 92       	push	r4
    58b8:	5f 92       	push	r5
    58ba:	6f 92       	push	r6
    58bc:	7f 92       	push	r7
    58be:	8f 92       	push	r8
    58c0:	9f 92       	push	r9
    58c2:	af 92       	push	r10
    58c4:	bf 92       	push	r11
    58c6:	cf 92       	push	r12
    58c8:	df 92       	push	r13
    58ca:	ef 92       	push	r14
    58cc:	ff 92       	push	r15
    58ce:	0f 93       	push	r16
    58d0:	1f 93       	push	r17
    58d2:	cf 93       	push	r28
    58d4:	df 93       	push	r29
    58d6:	cd b7       	in	r28, 0x3d	; 61
    58d8:	de b7       	in	r29, 0x3e	; 62
    58da:	2e 97       	sbiw	r28, 0x0e	; 14
    58dc:	0f b6       	in	r0, 0x3f	; 63
    58de:	f8 94       	cli
    58e0:	de bf       	out	0x3e, r29	; 62
    58e2:	0f be       	out	0x3f, r0	; 63
    58e4:	cd bf       	out	0x3d, r28	; 61
    58e6:	6b 01       	movw	r12, r22
    58e8:	7c 01       	movw	r14, r24
    58ea:	b4 2e       	mov	r11, r20
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		BOOL int_mode = FALSE;
    58ec:	72 2e       	mov	r7, r18
		BOOL div_by_4 = FALSE;
    58ee:	1d 86       	std	Y+13, r1	; 0x0d
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    58f0:	1e 86       	std	Y+14, r1	; 0x0e
    58f2:	80 e4       	ldi	r24, 0x40	; 64
    58f4:	c8 16       	cp	r12, r24
    58f6:	82 e4       	ldi	r24, 0x42	; 66
    58f8:	d8 06       	cpc	r13, r24
    58fa:	8f e0       	ldi	r24, 0x0F	; 15
    58fc:	e8 06       	cpc	r14, r24
			{
				freq_Fout /= 100;
    58fe:	f1 04       	cpc	r15, r1
    5900:	60 f0       	brcs	.+24     	; 0x591a <si5351_set_freq+0x68>
    5902:	c7 01       	movw	r24, r14
    5904:	b6 01       	movw	r22, r12
    5906:	24 e6       	ldi	r18, 0x64	; 100
    5908:	30 e0       	ldi	r19, 0x00	; 0
    590a:	40 e0       	ldi	r20, 0x00	; 0
    590c:	50 e0       	ldi	r21, 0x00	; 0
				freq_Fout *= 100;
    590e:	90 d1       	rcall	.+800    	; 0x5c30 <__udivmodsi4>
    5910:	a4 e6       	ldi	r26, 0x64	; 100
    5912:	b0 e0       	ldi	r27, 0x00	; 0
    5914:	e6 d1       	rcall	.+972    	; 0x5ce2 <__muluhisi3>
    5916:	6b 01       	movw	r12, r22
    5918:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    591a:	81 e0       	ldi	r24, 0x01	; 1
    591c:	b8 16       	cp	r11, r24
    591e:	c9 f0       	breq	.+50     	; 0x5952 <si5351_set_freq+0xa0>
    5920:	b8 16       	cp	r11, r24
    5922:	20 f0       	brcs	.+8      	; 0x592c <si5351_set_freq+0x7a>
    5924:	82 e0       	ldi	r24, 0x02	; 2
    5926:	b8 16       	cp	r11, r24
    5928:	51 f1       	breq	.+84     	; 0x597e <si5351_set_freq+0xcc>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    592a:	c6 c0       	rjmp	.+396    	; 0x5ab8 <si5351_set_freq+0x206>
    592c:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <enabledClocksMask>
    5930:	81 60       	ori	r24, 0x01	; 1
    5932:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <enabledClocksMask>
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
/*			si5351_write(3, ~enabledClocksMask | 0xF9); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    5936:	c0 92 6d 04 	sts	0x046D, r12	; 0x80046d <clock_out>
    593a:	d0 92 6e 04 	sts	0x046E, r13	; 0x80046e <clock_out+0x1>
    593e:	e0 92 6f 04 	sts	0x046F, r14	; 0x80046f <clock_out+0x2>
    5942:	f0 92 70 04 	sts	0x0470, r15	; 0x800470 <clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    5946:	68 94       	set
    5948:	66 24       	eor	r6, r6

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
/*			si5351_write(3, ~enabledClocksMask | 0xF9); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    594a:	64 f8       	bld	r6, 4
    594c:	99 24       	eor	r9, r9
    594e:	93 94       	inc	r9
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    5950:	2f c0       	rjmp	.+94     	; 0x59b0 <si5351_set_freq+0xfe>
    5952:	60 91 79 04 	lds	r22, 0x0479	; 0x800479 <enabledClocksMask>
    5956:	62 60       	ori	r22, 0x02	; 2
    5958:	60 93 79 04 	sts	0x0479, r22	; 0x800479 <enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFA); /* only disable CLK1 */
    595c:	60 95       	com	r22
    595e:	6a 6f       	ori	r22, 0xFA	; 250
    5960:	83 e0       	ldi	r24, 0x03	; 3

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    5962:	a1 dd       	rcall	.-1214   	; 0x54a6 <si5351_write>
    5964:	c0 92 71 04 	sts	0x0471, r12	; 0x800471 <clock_out+0x4>
    5968:	d0 92 72 04 	sts	0x0472, r13	; 0x800472 <clock_out+0x5>
    596c:	e0 92 73 04 	sts	0x0473, r14	; 0x800473 <clock_out+0x6>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    5970:	f0 92 74 04 	sts	0x0474, r15	; 0x800474 <clock_out+0x7>
    5974:	0f 2e       	mov	r0, r31
    5976:	f1 e1       	ldi	r31, 0x11	; 17
				si5351_write(3, ~enabledClocksMask | 0xFA); /* only disable CLK1 */

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    5978:	6f 2e       	mov	r6, r31
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    597a:	f0 2d       	mov	r31, r0
    597c:	a1 c0       	rjmp	.+322    	; 0x5ac0 <si5351_set_freq+0x20e>
    597e:	60 91 79 04 	lds	r22, 0x0479	; 0x800479 <enabledClocksMask>
    5982:	64 60       	ori	r22, 0x04	; 4
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFC); /* only disable CLK2 */
    5984:	60 93 79 04 	sts	0x0479, r22	; 0x800479 <enabledClocksMask>
    5988:	60 95       	com	r22
    598a:	6c 6f       	ori	r22, 0xFC	; 252

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    598c:	83 e0       	ldi	r24, 0x03	; 3
    598e:	8b dd       	rcall	.-1258   	; 0x54a6 <si5351_write>
    5990:	c0 92 75 04 	sts	0x0475, r12	; 0x800475 <clock_out+0x8>
    5994:	d0 92 76 04 	sts	0x0476, r13	; 0x800476 <clock_out+0x9>
    5998:	e0 92 77 04 	sts	0x0477, r14	; 0x800477 <clock_out+0xa>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    599c:	f0 92 78 04 	sts	0x0478, r15	; 0x800478 <clock_out+0xb>
    59a0:	0f 2e       	mov	r0, r31
    59a2:	f2 e1       	ldi	r31, 0x12	; 18
				si5351_write(3, ~enabledClocksMask | 0xFC); /* only disable CLK2 */

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
			}
			break;
    59a4:	6f 2e       	mov	r6, r31
    59a6:	f0 2d       	mov	r31, r0
    59a8:	8b c0       	rjmp	.+278    	; 0x5ac0 <si5351_set_freq+0x20e>
		if((target_pll == SI5351_PLLA) || !freqVCOB)
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    59aa:	68 94       	set
    59ac:	99 24       	eor	r9, r9
    59ae:	91 f8       	bld	r9, 1
    59b0:	8e 01       	movw	r16, r28
    59b2:	02 5f       	subi	r16, 0xF2	; 242
    59b4:	1f 4f       	sbci	r17, 0xFF	; 255
    59b6:	9e 01       	movw	r18, r28
    59b8:	23 5f       	subi	r18, 0xF3	; 243
    59ba:	3f 4f       	sbci	r19, 0xFF	; 255
    59bc:	ae 01       	movw	r20, r28
    59be:	4f 5f       	subi	r20, 0xFF	; 255
    59c0:	5f 4f       	sbci	r21, 0xFF	; 255
    59c2:	c7 01       	movw	r24, r14
    59c4:	b6 01       	movw	r22, r12
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		set_multisynth_registers_source(clk, target_pll);
    59c6:	50 db       	rcall	.-2400   	; 0x5068 <multisynth_calc>
    59c8:	1b 01       	movw	r2, r22
    59ca:	2c 01       	movw	r4, r24
    59cc:	69 2d       	mov	r22, r9
		set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
    59ce:	8b 2d       	mov	r24, r11
    59d0:	79 de       	rcall	.-782    	; 0x56c4 <set_multisynth_registers_source>
    59d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    59d4:	8f 93       	push	r24
    59d6:	81 2c       	mov	r8, r1
    59d8:	ad 84       	ldd	r10, Y+13	; 0x0d
    59da:	c9 80       	ldd	r12, Y+1	; 0x01
    59dc:	da 80       	ldd	r13, Y+2	; 0x02
    59de:	eb 80       	ldd	r14, Y+3	; 0x03
    59e0:	fc 80       	ldd	r15, Y+4	; 0x04
    59e2:	0d 81       	ldd	r16, Y+5	; 0x05
    59e4:	1e 81       	ldd	r17, Y+6	; 0x06
    59e6:	2f 81       	ldd	r18, Y+7	; 0x07
    59e8:	38 85       	ldd	r19, Y+8	; 0x08
    59ea:	49 85       	ldd	r20, Y+9	; 0x09
    59ec:	5a 85       	ldd	r21, Y+10	; 0x0a
    59ee:	6b 85       	ldd	r22, Y+11	; 0x0b
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    59f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    59f2:	8b 2d       	mov	r24, r11
    59f4:	ec de       	rcall	.-552    	; 0x57ce <set_multisynth_registers>
    59f6:	0f 90       	pop	r0
    59f8:	21 14       	cp	r2, r1
    59fa:	31 04       	cpc	r3, r1
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    59fc:	41 04       	cpc	r4, r1
    59fe:	51 04       	cpc	r5, r1
    5a00:	71 f1       	breq	.+92     	; 0x5a5e <si5351_set_freq+0x1ac>
    5a02:	29 c0       	rjmp	.+82     	; 0x5a56 <si5351_set_freq+0x1a4>
    5a04:	8e 01       	movw	r16, r28
    5a06:	02 5f       	subi	r16, 0xF2	; 242
    5a08:	1f 4f       	sbci	r17, 0xFF	; 255
    5a0a:	9e 01       	movw	r18, r28
    5a0c:	23 5f       	subi	r18, 0xF3	; 243
    5a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a10:	ae 01       	movw	r20, r28
    5a12:	4f 5f       	subi	r20, 0xFF	; 255
		}

		/* Set multisynth registers (MS must be set before PLL) */
		set_multisynth_registers_source(clk, target_pll);
    5a14:	5f 4f       	sbci	r21, 0xFF	; 255
    5a16:	c7 01       	movw	r24, r14
    5a18:	b6 01       	movw	r22, r12
		set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
    5a1a:	e4 db       	rcall	.-2104   	; 0x51e4 <multisynth_estimate>
    5a1c:	62 e0       	ldi	r22, 0x02	; 2
    5a1e:	8b 2d       	mov	r24, r11
    5a20:	51 de       	rcall	.-862    	; 0x56c4 <set_multisynth_registers_source>
    5a22:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a24:	8f 93       	push	r24
    5a26:	81 2c       	mov	r8, r1
    5a28:	ad 84       	ldd	r10, Y+13	; 0x0d
    5a2a:	c9 80       	ldd	r12, Y+1	; 0x01
    5a2c:	da 80       	ldd	r13, Y+2	; 0x02
    5a2e:	eb 80       	ldd	r14, Y+3	; 0x03
    5a30:	fc 80       	ldd	r15, Y+4	; 0x04
    5a32:	0d 81       	ldd	r16, Y+5	; 0x05
    5a34:	1e 81       	ldd	r17, Y+6	; 0x06
    5a36:	2f 81       	ldd	r18, Y+7	; 0x07
    5a38:	38 85       	ldd	r19, Y+8	; 0x08
    5a3a:	49 85       	ldd	r20, Y+9	; 0x09
    5a3c:	5a 85       	ldd	r21, Y+10	; 0x0a
    5a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a42:	8b 2d       	mov	r24, r11
    5a44:	c4 de       	rcall	.-632    	; 0x57ce <set_multisynth_registers>
    5a46:	0f 90       	pop	r0
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, BOOL clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    5a48:	68 94       	set
    5a4a:	99 24       	eor	r9, r9
    5a4c:	91 f8       	bld	r9, 1
    5a4e:	21 2c       	mov	r2, r1

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
			{
				set_pll(freq_VCO, target_pll);
    5a50:	31 2c       	mov	r3, r1
    5a52:	21 01       	movw	r4, r2
    5a54:	04 c0       	rjmp	.+8      	; 0x5a5e <si5351_set_freq+0x1ac>
    5a56:	49 2d       	mov	r20, r9
    5a58:	c2 01       	movw	r24, r4
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    5a5a:	b1 01       	movw	r22, r2
    5a5c:	d9 dc       	rcall	.-1614   	; 0x5410 <set_pll>
		{
			si5351_write(3, enabledClocksMask);    /* disable clock(s) in use */
    5a5e:	77 20       	and	r7, r7
    5a60:	29 f0       	breq	.+10     	; 0x5a6c <si5351_set_freq+0x1ba>
    5a62:	60 91 79 04 	lds	r22, 0x0479	; 0x800479 <enabledClocksMask>
    5a66:	83 e0       	ldi	r24, 0x03	; 3
    5a68:	1e dd       	rcall	.-1476   	; 0x54a6 <si5351_write>
		}
		else
		{
			si5351_write(3, ~enabledClocksMask);    /* only enable clock(s) in use */
    5a6a:	05 c0       	rjmp	.+10     	; 0x5a76 <si5351_set_freq+0x1c4>
    5a6c:	60 91 79 04 	lds	r22, 0x0479	; 0x800479 <enabledClocksMask>
    5a70:	60 95       	com	r22
    5a72:	83 e0       	ldi	r24, 0x03	; 3
    5a74:	18 dd       	rcall	.-1488   	; 0x54a6 <si5351_write>
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    5a76:	81 e0       	ldi	r24, 0x01	; 1
    5a78:	98 12       	cpse	r9, r24
    5a7a:	05 c0       	rjmp	.+10     	; 0x5a86 <si5351_set_freq+0x1d4>
		{
			si5351_write(clock_ctrl_addr, 0x4C);    /* power up only clock being set, leaving that clock configured as follows: */
    5a7c:	6c e4       	ldi	r22, 0x4C	; 76
    5a7e:	86 2d       	mov	r24, r6
    5a80:	12 dd       	rcall	.-1500   	; 0x54a6 <si5351_write>
    5a82:	80 e0       	ldi	r24, 0x00	; 0
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    5a84:	2b c0       	rjmp	.+86     	; 0x5adc <si5351_set_freq+0x22a>
    5a86:	8d 85       	ldd	r24, Y+13	; 0x0d
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    5a88:	88 23       	and	r24, r24
    5a8a:	21 f0       	breq	.+8      	; 0x5a94 <si5351_set_freq+0x1e2>
    5a8c:	6c e6       	ldi	r22, 0x6C	; 108
			{
				si5351_write(clock_ctrl_addr, 0x6C);    /* power up only clock being set, leaving that clock configured as follows: */
    5a8e:	86 2d       	mov	r24, r6
    5a90:	0a dd       	rcall	.-1516   	; 0x54a6 <si5351_write>
    5a92:	03 c0       	rjmp	.+6      	; 0x5a9a <si5351_set_freq+0x1e8>
    5a94:	6c e2       	ldi	r22, 0x2C	; 44
    5a96:	86 2d       	mov	r24, r6
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
				si5351_write(clock_ctrl_addr, 0x2C);    /* power up only clock being set, leaving that clock configured as follows: */
    5a98:	06 dd       	rcall	.-1524   	; 0x54a6 <si5351_write>
    5a9a:	21 14       	cp	r2, r1
    5a9c:	31 04       	cpc	r3, r1
    5a9e:	41 04       	cpc	r4, r1
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    5aa0:	51 04       	cpc	r5, r1
    5aa2:	61 f0       	breq	.+24     	; 0x5abc <si5351_set_freq+0x20a>
    5aa4:	20 92 7a 04 	sts	0x047A, r2	; 0x80047a <freqVCOB>
    5aa8:	30 92 7b 04 	sts	0x047B, r3	; 0x80047b <freqVCOB+0x1>
			{
				freqVCOB = freq_VCO;
    5aac:	40 92 7c 04 	sts	0x047C, r4	; 0x80047c <freqVCOB+0x2>
    5ab0:	50 92 7d 04 	sts	0x047D, r5	; 0x80047d <freqVCOB+0x3>
    5ab4:	80 e0       	ldi	r24, 0x00	; 0
    5ab6:	12 c0       	rjmp	.+36     	; 0x5adc <si5351_set_freq+0x22a>
    5ab8:	81 e0       	ldi	r24, 0x01	; 1
			}
		}

		return(FALSE);
    5aba:	10 c0       	rjmp	.+32     	; 0x5adc <si5351_set_freq+0x22a>
    5abc:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;

			default:
			{
				return(TRUE);
    5abe:	0e c0       	rjmp	.+28     	; 0x5adc <si5351_set_freq+0x22a>
    5ac0:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <freqVCOB>
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    5ac4:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <freqVCOB+0x1>
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    5ac8:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <freqVCOB+0x2>
    5acc:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <freqVCOB+0x3>
    5ad0:	89 2b       	or	r24, r25
    5ad2:	8a 2b       	or	r24, r26
    5ad4:	8b 2b       	or	r24, r27
    5ad6:	09 f4       	brne	.+2      	; 0x5ada <si5351_set_freq+0x228>
    5ad8:	68 cf       	rjmp	.-304    	; 0x59aa <si5351_set_freq+0xf8>
    5ada:	94 cf       	rjmp	.-216    	; 0x5a04 <si5351_set_freq+0x152>
    5adc:	2e 96       	adiw	r28, 0x0e	; 14
    5ade:	0f b6       	in	r0, 0x3f	; 63
    5ae0:	f8 94       	cli
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
	}
    5ae2:	de bf       	out	0x3e, r29	; 62
    5ae4:	0f be       	out	0x3f, r0	; 63
    5ae6:	cd bf       	out	0x3d, r28	; 61
    5ae8:	df 91       	pop	r29
    5aea:	cf 91       	pop	r28
    5aec:	1f 91       	pop	r17
    5aee:	0f 91       	pop	r16
    5af0:	ff 90       	pop	r15
    5af2:	ef 90       	pop	r14
    5af4:	df 90       	pop	r13
    5af6:	cf 90       	pop	r12
    5af8:	bf 90       	pop	r11
    5afa:	af 90       	pop	r10
    5afc:	9f 90       	pop	r9
    5afe:	8f 90       	pop	r8
    5b00:	7f 90       	pop	r7
    5b02:	6f 90       	pop	r6
    5b04:	5f 90       	pop	r5
    5b06:	4f 90       	pop	r4
    5b08:	3f 90       	pop	r3
    5b0a:	2f 90       	pop	r2
    5b0c:	08 95       	ret

00005b0e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    5b0e:	08 95       	ret

00005b10 <month_length>:
    5b10:	62 30       	cpi	r22, 0x02	; 2
    5b12:	19 f4       	brne	.+6      	; 0x5b1a <month_length+0xa>
    5b14:	44 d0       	rcall	.+136    	; 0x5b9e <is_leap_year>
    5b16:	84 5e       	subi	r24, 0xE4	; 228
    5b18:	08 95       	ret
    5b1a:	68 30       	cpi	r22, 0x08	; 8
    5b1c:	08 f0       	brcs	.+2      	; 0x5b20 <month_length+0x10>
    5b1e:	6f 5f       	subi	r22, 0xFF	; 255
    5b20:	61 70       	andi	r22, 0x01	; 1
    5b22:	8e e1       	ldi	r24, 0x1E	; 30
    5b24:	86 0f       	add	r24, r22
    5b26:	08 95       	ret

00005b28 <set_system_time>:
    5b28:	0f b6       	in	r0, 0x3f	; 63
    5b2a:	f8 94       	cli
    5b2c:	60 93 82 04 	sts	0x0482, r22	; 0x800482 <__system_time>
    5b30:	70 93 83 04 	sts	0x0483, r23	; 0x800483 <__system_time+0x1>
    5b34:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <__system_time+0x2>
    5b38:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <__system_time+0x3>
    5b3c:	0f be       	out	0x3f, r0	; 63
    5b3e:	08 95       	ret

00005b40 <time>:
    5b40:	fc 01       	movw	r30, r24
    5b42:	0f b6       	in	r0, 0x3f	; 63
    5b44:	f8 94       	cli
    5b46:	60 91 82 04 	lds	r22, 0x0482	; 0x800482 <__system_time>
    5b4a:	70 91 83 04 	lds	r23, 0x0483	; 0x800483 <__system_time+0x1>
    5b4e:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__system_time+0x2>
    5b52:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <__system_time+0x3>
    5b56:	0f be       	out	0x3f, r0	; 63
    5b58:	30 97       	sbiw	r30, 0x00	; 0
    5b5a:	21 f0       	breq	.+8      	; 0x5b64 <time+0x24>
    5b5c:	60 83       	st	Z, r22
    5b5e:	71 83       	std	Z+1, r23	; 0x01
    5b60:	82 83       	std	Z+2, r24	; 0x02
    5b62:	93 83       	std	Z+3, r25	; 0x03
    5b64:	08 95       	ret

00005b66 <system_tick>:
    5b66:	8f 93       	push	r24
    5b68:	8f b7       	in	r24, 0x3f	; 63
    5b6a:	8f 93       	push	r24
    5b6c:	f8 94       	cli
    5b6e:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <__system_time>
    5b72:	8f 5f       	subi	r24, 0xFF	; 255
    5b74:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <__system_time>
    5b78:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <__system_time+0x1>
    5b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    5b7e:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__system_time+0x1>
    5b82:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__system_time+0x2>
    5b86:	8f 4f       	sbci	r24, 0xFF	; 255
    5b88:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <__system_time+0x2>
    5b8c:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <__system_time+0x3>
    5b90:	8f 4f       	sbci	r24, 0xFF	; 255
    5b92:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__system_time+0x3>
    5b96:	8f 91       	pop	r24
    5b98:	8f bf       	out	0x3f, r24	; 63
    5b9a:	8f 91       	pop	r24
    5b9c:	08 95       	ret

00005b9e <is_leap_year>:
    5b9e:	9c 01       	movw	r18, r24
    5ba0:	23 70       	andi	r18, 0x03	; 3
    5ba2:	33 27       	eor	r19, r19
    5ba4:	23 2b       	or	r18, r19
    5ba6:	51 f4       	brne	.+20     	; 0x5bbc <is_leap_year+0x1e>
    5ba8:	64 e6       	ldi	r22, 0x64	; 100
    5baa:	70 e0       	ldi	r23, 0x00	; 0
    5bac:	2e d0       	rcall	.+92     	; 0x5c0a <__divmodhi4>
    5bae:	89 2b       	or	r24, r25
    5bb0:	39 f4       	brne	.+14     	; 0x5bc0 <is_leap_year+0x22>
    5bb2:	63 70       	andi	r22, 0x03	; 3
    5bb4:	77 27       	eor	r23, r23
    5bb6:	81 e0       	ldi	r24, 0x01	; 1
    5bb8:	67 2b       	or	r22, r23
    5bba:	19 f0       	breq	.+6      	; 0x5bc2 <is_leap_year+0x24>
    5bbc:	80 e0       	ldi	r24, 0x00	; 0
    5bbe:	08 95       	ret
    5bc0:	81 e0       	ldi	r24, 0x01	; 1
    5bc2:	08 95       	ret

00005bc4 <__mulsi3>:
    5bc4:	db 01       	movw	r26, r22
    5bc6:	8f 93       	push	r24
    5bc8:	9f 93       	push	r25
    5bca:	8b d0       	rcall	.+278    	; 0x5ce2 <__muluhisi3>
    5bcc:	bf 91       	pop	r27
    5bce:	af 91       	pop	r26
    5bd0:	a2 9f       	mul	r26, r18
    5bd2:	80 0d       	add	r24, r0
    5bd4:	91 1d       	adc	r25, r1
    5bd6:	a3 9f       	mul	r26, r19
    5bd8:	90 0d       	add	r25, r0
    5bda:	b2 9f       	mul	r27, r18
    5bdc:	90 0d       	add	r25, r0
    5bde:	11 24       	eor	r1, r1
    5be0:	08 95       	ret

00005be2 <__udivmodhi4>:
    5be2:	aa 1b       	sub	r26, r26
    5be4:	bb 1b       	sub	r27, r27
    5be6:	51 e1       	ldi	r21, 0x11	; 17
    5be8:	07 c0       	rjmp	.+14     	; 0x5bf8 <__udivmodhi4_ep>

00005bea <__udivmodhi4_loop>:
    5bea:	aa 1f       	adc	r26, r26
    5bec:	bb 1f       	adc	r27, r27
    5bee:	a6 17       	cp	r26, r22
    5bf0:	b7 07       	cpc	r27, r23
    5bf2:	10 f0       	brcs	.+4      	; 0x5bf8 <__udivmodhi4_ep>
    5bf4:	a6 1b       	sub	r26, r22
    5bf6:	b7 0b       	sbc	r27, r23

00005bf8 <__udivmodhi4_ep>:
    5bf8:	88 1f       	adc	r24, r24
    5bfa:	99 1f       	adc	r25, r25
    5bfc:	5a 95       	dec	r21
    5bfe:	a9 f7       	brne	.-22     	; 0x5bea <__udivmodhi4_loop>
    5c00:	80 95       	com	r24
    5c02:	90 95       	com	r25
    5c04:	bc 01       	movw	r22, r24
    5c06:	cd 01       	movw	r24, r26
    5c08:	08 95       	ret

00005c0a <__divmodhi4>:
    5c0a:	97 fb       	bst	r25, 7
    5c0c:	07 2e       	mov	r0, r23
    5c0e:	16 f4       	brtc	.+4      	; 0x5c14 <__divmodhi4+0xa>
    5c10:	00 94       	com	r0
    5c12:	06 d0       	rcall	.+12     	; 0x5c20 <__divmodhi4_neg1>
    5c14:	77 fd       	sbrc	r23, 7
    5c16:	08 d0       	rcall	.+16     	; 0x5c28 <__divmodhi4_neg2>
    5c18:	e4 df       	rcall	.-56     	; 0x5be2 <__udivmodhi4>
    5c1a:	07 fc       	sbrc	r0, 7
    5c1c:	05 d0       	rcall	.+10     	; 0x5c28 <__divmodhi4_neg2>
    5c1e:	3e f4       	brtc	.+14     	; 0x5c2e <__divmodhi4_exit>

00005c20 <__divmodhi4_neg1>:
    5c20:	90 95       	com	r25
    5c22:	81 95       	neg	r24
    5c24:	9f 4f       	sbci	r25, 0xFF	; 255
    5c26:	08 95       	ret

00005c28 <__divmodhi4_neg2>:
    5c28:	70 95       	com	r23
    5c2a:	61 95       	neg	r22
    5c2c:	7f 4f       	sbci	r23, 0xFF	; 255

00005c2e <__divmodhi4_exit>:
    5c2e:	08 95       	ret

00005c30 <__udivmodsi4>:
    5c30:	a1 e2       	ldi	r26, 0x21	; 33
    5c32:	1a 2e       	mov	r1, r26
    5c34:	aa 1b       	sub	r26, r26
    5c36:	bb 1b       	sub	r27, r27
    5c38:	fd 01       	movw	r30, r26
    5c3a:	0d c0       	rjmp	.+26     	; 0x5c56 <__udivmodsi4_ep>

00005c3c <__udivmodsi4_loop>:
    5c3c:	aa 1f       	adc	r26, r26
    5c3e:	bb 1f       	adc	r27, r27
    5c40:	ee 1f       	adc	r30, r30
    5c42:	ff 1f       	adc	r31, r31
    5c44:	a2 17       	cp	r26, r18
    5c46:	b3 07       	cpc	r27, r19
    5c48:	e4 07       	cpc	r30, r20
    5c4a:	f5 07       	cpc	r31, r21
    5c4c:	20 f0       	brcs	.+8      	; 0x5c56 <__udivmodsi4_ep>
    5c4e:	a2 1b       	sub	r26, r18
    5c50:	b3 0b       	sbc	r27, r19
    5c52:	e4 0b       	sbc	r30, r20
    5c54:	f5 0b       	sbc	r31, r21

00005c56 <__udivmodsi4_ep>:
    5c56:	66 1f       	adc	r22, r22
    5c58:	77 1f       	adc	r23, r23
    5c5a:	88 1f       	adc	r24, r24
    5c5c:	99 1f       	adc	r25, r25
    5c5e:	1a 94       	dec	r1
    5c60:	69 f7       	brne	.-38     	; 0x5c3c <__udivmodsi4_loop>
    5c62:	60 95       	com	r22
    5c64:	70 95       	com	r23
    5c66:	80 95       	com	r24
    5c68:	90 95       	com	r25
    5c6a:	9b 01       	movw	r18, r22
    5c6c:	ac 01       	movw	r20, r24
    5c6e:	bd 01       	movw	r22, r26
    5c70:	cf 01       	movw	r24, r30
    5c72:	08 95       	ret

00005c74 <__divmodsi4>:
    5c74:	05 2e       	mov	r0, r21
    5c76:	97 fb       	bst	r25, 7
    5c78:	16 f4       	brtc	.+4      	; 0x5c7e <__divmodsi4+0xa>
    5c7a:	00 94       	com	r0
    5c7c:	0f d0       	rcall	.+30     	; 0x5c9c <__negsi2>
    5c7e:	57 fd       	sbrc	r21, 7
    5c80:	05 d0       	rcall	.+10     	; 0x5c8c <__divmodsi4_neg2>
    5c82:	d6 df       	rcall	.-84     	; 0x5c30 <__udivmodsi4>
    5c84:	07 fc       	sbrc	r0, 7
    5c86:	02 d0       	rcall	.+4      	; 0x5c8c <__divmodsi4_neg2>
    5c88:	46 f4       	brtc	.+16     	; 0x5c9a <__divmodsi4_exit>
    5c8a:	08 c0       	rjmp	.+16     	; 0x5c9c <__negsi2>

00005c8c <__divmodsi4_neg2>:
    5c8c:	50 95       	com	r21
    5c8e:	40 95       	com	r20
    5c90:	30 95       	com	r19
    5c92:	21 95       	neg	r18
    5c94:	3f 4f       	sbci	r19, 0xFF	; 255
    5c96:	4f 4f       	sbci	r20, 0xFF	; 255
    5c98:	5f 4f       	sbci	r21, 0xFF	; 255

00005c9a <__divmodsi4_exit>:
    5c9a:	08 95       	ret

00005c9c <__negsi2>:
    5c9c:	90 95       	com	r25
    5c9e:	80 95       	com	r24
    5ca0:	70 95       	com	r23
    5ca2:	61 95       	neg	r22
    5ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    5caa:	08 95       	ret

00005cac <__tablejump2__>:
    5cac:	ee 0f       	add	r30, r30
    5cae:	ff 1f       	adc	r31, r31
    5cb0:	05 90       	lpm	r0, Z+
    5cb2:	f4 91       	lpm	r31, Z
    5cb4:	e0 2d       	mov	r30, r0
    5cb6:	09 94       	ijmp

00005cb8 <__umulhisi3>:
    5cb8:	a2 9f       	mul	r26, r18
    5cba:	b0 01       	movw	r22, r0
    5cbc:	b3 9f       	mul	r27, r19
    5cbe:	c0 01       	movw	r24, r0
    5cc0:	a3 9f       	mul	r26, r19
    5cc2:	70 0d       	add	r23, r0
    5cc4:	81 1d       	adc	r24, r1
    5cc6:	11 24       	eor	r1, r1
    5cc8:	91 1d       	adc	r25, r1
    5cca:	b2 9f       	mul	r27, r18
    5ccc:	70 0d       	add	r23, r0
    5cce:	81 1d       	adc	r24, r1
    5cd0:	11 24       	eor	r1, r1
    5cd2:	91 1d       	adc	r25, r1
    5cd4:	08 95       	ret

00005cd6 <__usmulhisi3>:
    5cd6:	f0 df       	rcall	.-32     	; 0x5cb8 <__umulhisi3>

00005cd8 <__usmulhisi3_tail>:
    5cd8:	b7 ff       	sbrs	r27, 7
    5cda:	08 95       	ret
    5cdc:	82 1b       	sub	r24, r18
    5cde:	93 0b       	sbc	r25, r19
    5ce0:	08 95       	ret

00005ce2 <__muluhisi3>:
    5ce2:	ea df       	rcall	.-44     	; 0x5cb8 <__umulhisi3>
    5ce4:	a5 9f       	mul	r26, r21
    5ce6:	90 0d       	add	r25, r0
    5ce8:	b4 9f       	mul	r27, r20
    5cea:	90 0d       	add	r25, r0
    5cec:	a4 9f       	mul	r26, r20
    5cee:	80 0d       	add	r24, r0
    5cf0:	91 1d       	adc	r25, r1
    5cf2:	11 24       	eor	r1, r1
    5cf4:	08 95       	ret

00005cf6 <__mulshisi3>:
    5cf6:	b7 ff       	sbrs	r27, 7
    5cf8:	f4 cf       	rjmp	.-24     	; 0x5ce2 <__muluhisi3>

00005cfa <__mulohisi3>:
    5cfa:	f3 df       	rcall	.-26     	; 0x5ce2 <__muluhisi3>
    5cfc:	82 1b       	sub	r24, r18
    5cfe:	93 0b       	sbc	r25, r19
    5d00:	08 95       	ret

00005d02 <atoi>:
    5d02:	fc 01       	movw	r30, r24
    5d04:	88 27       	eor	r24, r24
    5d06:	99 27       	eor	r25, r25
    5d08:	e8 94       	clt
    5d0a:	21 91       	ld	r18, Z+
    5d0c:	20 32       	cpi	r18, 0x20	; 32
    5d0e:	e9 f3       	breq	.-6      	; 0x5d0a <atoi+0x8>
    5d10:	29 30       	cpi	r18, 0x09	; 9
    5d12:	10 f0       	brcs	.+4      	; 0x5d18 <atoi+0x16>
    5d14:	2e 30       	cpi	r18, 0x0E	; 14
    5d16:	c8 f3       	brcs	.-14     	; 0x5d0a <atoi+0x8>
    5d18:	2b 32       	cpi	r18, 0x2B	; 43
    5d1a:	39 f0       	breq	.+14     	; 0x5d2a <atoi+0x28>
    5d1c:	2d 32       	cpi	r18, 0x2D	; 45
    5d1e:	31 f4       	brne	.+12     	; 0x5d2c <atoi+0x2a>
    5d20:	68 94       	set
    5d22:	03 c0       	rjmp	.+6      	; 0x5d2a <atoi+0x28>
    5d24:	5d d0       	rcall	.+186    	; 0x5de0 <__mulhi_const_10>
    5d26:	82 0f       	add	r24, r18
    5d28:	91 1d       	adc	r25, r1
    5d2a:	21 91       	ld	r18, Z+
    5d2c:	20 53       	subi	r18, 0x30	; 48
    5d2e:	2a 30       	cpi	r18, 0x0A	; 10
    5d30:	c8 f3       	brcs	.-14     	; 0x5d24 <atoi+0x22>
    5d32:	1e f4       	brtc	.+6      	; 0x5d3a <atoi+0x38>
    5d34:	90 95       	com	r25
    5d36:	81 95       	neg	r24
    5d38:	9f 4f       	sbci	r25, 0xFF	; 255
    5d3a:	08 95       	ret

00005d3c <atol>:
    5d3c:	1f 93       	push	r17
    5d3e:	fc 01       	movw	r30, r24
    5d40:	99 27       	eor	r25, r25
    5d42:	88 27       	eor	r24, r24
    5d44:	bc 01       	movw	r22, r24
    5d46:	e8 94       	clt
    5d48:	11 91       	ld	r17, Z+
    5d4a:	10 32       	cpi	r17, 0x20	; 32
    5d4c:	e9 f3       	breq	.-6      	; 0x5d48 <atol+0xc>
    5d4e:	19 30       	cpi	r17, 0x09	; 9
    5d50:	10 f0       	brcs	.+4      	; 0x5d56 <atol+0x1a>
    5d52:	1e 30       	cpi	r17, 0x0E	; 14
    5d54:	c8 f3       	brcs	.-14     	; 0x5d48 <atol+0xc>
    5d56:	1b 32       	cpi	r17, 0x2B	; 43
    5d58:	49 f0       	breq	.+18     	; 0x5d6c <atol+0x30>
    5d5a:	1d 32       	cpi	r17, 0x2D	; 45
    5d5c:	41 f4       	brne	.+16     	; 0x5d6e <atol+0x32>
    5d5e:	68 94       	set
    5d60:	05 c0       	rjmp	.+10     	; 0x5d6c <atol+0x30>
    5d62:	29 d0       	rcall	.+82     	; 0x5db6 <__mulsi_const_10>
    5d64:	61 0f       	add	r22, r17
    5d66:	71 1d       	adc	r23, r1
    5d68:	81 1d       	adc	r24, r1
    5d6a:	91 1d       	adc	r25, r1
    5d6c:	11 91       	ld	r17, Z+
    5d6e:	10 53       	subi	r17, 0x30	; 48
    5d70:	1a 30       	cpi	r17, 0x0A	; 10
    5d72:	b8 f3       	brcs	.-18     	; 0x5d62 <atol+0x26>
    5d74:	3e f4       	brtc	.+14     	; 0x5d84 <atol+0x48>
    5d76:	90 95       	com	r25
    5d78:	80 95       	com	r24
    5d7a:	70 95       	com	r23
    5d7c:	61 95       	neg	r22
    5d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d80:	8f 4f       	sbci	r24, 0xFF	; 255
    5d82:	9f 4f       	sbci	r25, 0xFF	; 255
    5d84:	1f 91       	pop	r17
    5d86:	08 95       	ret

00005d88 <toupper>:
    5d88:	91 11       	cpse	r25, r1
    5d8a:	08 95       	ret
    5d8c:	81 56       	subi	r24, 0x61	; 97
    5d8e:	8a 51       	subi	r24, 0x1A	; 26
    5d90:	08 f4       	brcc	.+2      	; 0x5d94 <toupper+0xc>
    5d92:	80 52       	subi	r24, 0x20	; 32
    5d94:	85 58       	subi	r24, 0x85	; 133
    5d96:	08 95       	ret

00005d98 <strncpy>:
    5d98:	fb 01       	movw	r30, r22
    5d9a:	dc 01       	movw	r26, r24
    5d9c:	41 50       	subi	r20, 0x01	; 1
    5d9e:	50 40       	sbci	r21, 0x00	; 0
    5da0:	48 f0       	brcs	.+18     	; 0x5db4 <strncpy+0x1c>
    5da2:	01 90       	ld	r0, Z+
    5da4:	0d 92       	st	X+, r0
    5da6:	00 20       	and	r0, r0
    5da8:	c9 f7       	brne	.-14     	; 0x5d9c <strncpy+0x4>
    5daa:	01 c0       	rjmp	.+2      	; 0x5dae <strncpy+0x16>
    5dac:	1d 92       	st	X+, r1
    5dae:	41 50       	subi	r20, 0x01	; 1
    5db0:	50 40       	sbci	r21, 0x00	; 0
    5db2:	e0 f7       	brcc	.-8      	; 0x5dac <strncpy+0x14>
    5db4:	08 95       	ret

00005db6 <__mulsi_const_10>:
    5db6:	59 2f       	mov	r21, r25
    5db8:	48 2f       	mov	r20, r24
    5dba:	37 2f       	mov	r19, r23
    5dbc:	26 2f       	mov	r18, r22
    5dbe:	66 0f       	add	r22, r22
    5dc0:	77 1f       	adc	r23, r23
    5dc2:	88 1f       	adc	r24, r24
    5dc4:	99 1f       	adc	r25, r25
    5dc6:	66 0f       	add	r22, r22
    5dc8:	77 1f       	adc	r23, r23
    5dca:	88 1f       	adc	r24, r24
    5dcc:	99 1f       	adc	r25, r25
    5dce:	62 0f       	add	r22, r18
    5dd0:	73 1f       	adc	r23, r19
    5dd2:	84 1f       	adc	r24, r20
    5dd4:	95 1f       	adc	r25, r21
    5dd6:	66 0f       	add	r22, r22
    5dd8:	77 1f       	adc	r23, r23
    5dda:	88 1f       	adc	r24, r24
    5ddc:	99 1f       	adc	r25, r25
    5dde:	08 95       	ret

00005de0 <__mulhi_const_10>:
    5de0:	7a e0       	ldi	r23, 0x0A	; 10
    5de2:	97 9f       	mul	r25, r23
    5de4:	90 2d       	mov	r25, r0
    5de6:	87 9f       	mul	r24, r23
    5de8:	80 2d       	mov	r24, r0
    5dea:	91 0d       	add	r25, r1
    5dec:	11 24       	eor	r1, r1
    5dee:	08 95       	ret

00005df0 <sprintf>:
    5df0:	ae e0       	ldi	r26, 0x0E	; 14
    5df2:	b0 e0       	ldi	r27, 0x00	; 0
    5df4:	ed ef       	ldi	r30, 0xFD	; 253
    5df6:	fe e2       	ldi	r31, 0x2E	; 46
    5df8:	01 c3       	rjmp	.+1538   	; 0x63fc <__prologue_saves__+0x1c>
    5dfa:	0d 89       	ldd	r16, Y+21	; 0x15
    5dfc:	1e 89       	ldd	r17, Y+22	; 0x16
    5dfe:	86 e0       	ldi	r24, 0x06	; 6
    5e00:	8c 83       	std	Y+4, r24	; 0x04
    5e02:	1a 83       	std	Y+2, r17	; 0x02
    5e04:	09 83       	std	Y+1, r16	; 0x01
    5e06:	8f ef       	ldi	r24, 0xFF	; 255
    5e08:	9f e7       	ldi	r25, 0x7F	; 127
    5e0a:	9e 83       	std	Y+6, r25	; 0x06
    5e0c:	8d 83       	std	Y+5, r24	; 0x05
    5e0e:	ae 01       	movw	r20, r28
    5e10:	47 5e       	subi	r20, 0xE7	; 231
    5e12:	5f 4f       	sbci	r21, 0xFF	; 255
    5e14:	6f 89       	ldd	r22, Y+23	; 0x17
    5e16:	78 8d       	ldd	r23, Y+24	; 0x18
    5e18:	ce 01       	movw	r24, r28
    5e1a:	01 96       	adiw	r24, 0x01	; 1
    5e1c:	08 d0       	rcall	.+16     	; 0x5e2e <vfprintf>
    5e1e:	ef 81       	ldd	r30, Y+7	; 0x07
    5e20:	f8 85       	ldd	r31, Y+8	; 0x08
    5e22:	e0 0f       	add	r30, r16
    5e24:	f1 1f       	adc	r31, r17
    5e26:	10 82       	st	Z, r1
    5e28:	2e 96       	adiw	r28, 0x0e	; 14
    5e2a:	e4 e0       	ldi	r30, 0x04	; 4
    5e2c:	03 c3       	rjmp	.+1542   	; 0x6434 <__epilogue_restores__+0x1c>

00005e2e <vfprintf>:
    5e2e:	ab e0       	ldi	r26, 0x0B	; 11
    5e30:	b0 e0       	ldi	r27, 0x00	; 0
    5e32:	ec e1       	ldi	r30, 0x1C	; 28
    5e34:	ff e2       	ldi	r31, 0x2F	; 47
    5e36:	d4 c2       	rjmp	.+1448   	; 0x63e0 <__prologue_saves__>
    5e38:	6c 01       	movw	r12, r24
    5e3a:	7b 01       	movw	r14, r22
    5e3c:	8a 01       	movw	r16, r20
    5e3e:	fc 01       	movw	r30, r24
    5e40:	17 82       	std	Z+7, r1	; 0x07
    5e42:	16 82       	std	Z+6, r1	; 0x06
    5e44:	83 81       	ldd	r24, Z+3	; 0x03
    5e46:	81 ff       	sbrs	r24, 1
    5e48:	bf c1       	rjmp	.+894    	; 0x61c8 <vfprintf+0x39a>
    5e4a:	ce 01       	movw	r24, r28
    5e4c:	01 96       	adiw	r24, 0x01	; 1
    5e4e:	3c 01       	movw	r6, r24
    5e50:	f6 01       	movw	r30, r12
    5e52:	93 81       	ldd	r25, Z+3	; 0x03
    5e54:	f7 01       	movw	r30, r14
    5e56:	93 fd       	sbrc	r25, 3
    5e58:	85 91       	lpm	r24, Z+
    5e5a:	93 ff       	sbrs	r25, 3
    5e5c:	81 91       	ld	r24, Z+
    5e5e:	7f 01       	movw	r14, r30
    5e60:	88 23       	and	r24, r24
    5e62:	09 f4       	brne	.+2      	; 0x5e66 <vfprintf+0x38>
    5e64:	ad c1       	rjmp	.+858    	; 0x61c0 <vfprintf+0x392>
    5e66:	85 32       	cpi	r24, 0x25	; 37
    5e68:	39 f4       	brne	.+14     	; 0x5e78 <vfprintf+0x4a>
    5e6a:	93 fd       	sbrc	r25, 3
    5e6c:	85 91       	lpm	r24, Z+
    5e6e:	93 ff       	sbrs	r25, 3
    5e70:	81 91       	ld	r24, Z+
    5e72:	7f 01       	movw	r14, r30
    5e74:	85 32       	cpi	r24, 0x25	; 37
    5e76:	21 f4       	brne	.+8      	; 0x5e80 <vfprintf+0x52>
    5e78:	b6 01       	movw	r22, r12
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	c0 d1       	rcall	.+896    	; 0x61fe <fputc>
    5e7e:	e8 cf       	rjmp	.-48     	; 0x5e50 <vfprintf+0x22>
    5e80:	91 2c       	mov	r9, r1
    5e82:	21 2c       	mov	r2, r1
    5e84:	31 2c       	mov	r3, r1
    5e86:	ff e1       	ldi	r31, 0x1F	; 31
    5e88:	f3 15       	cp	r31, r3
    5e8a:	d8 f0       	brcs	.+54     	; 0x5ec2 <vfprintf+0x94>
    5e8c:	8b 32       	cpi	r24, 0x2B	; 43
    5e8e:	79 f0       	breq	.+30     	; 0x5eae <vfprintf+0x80>
    5e90:	38 f4       	brcc	.+14     	; 0x5ea0 <vfprintf+0x72>
    5e92:	80 32       	cpi	r24, 0x20	; 32
    5e94:	79 f0       	breq	.+30     	; 0x5eb4 <vfprintf+0x86>
    5e96:	83 32       	cpi	r24, 0x23	; 35
    5e98:	a1 f4       	brne	.+40     	; 0x5ec2 <vfprintf+0x94>
    5e9a:	23 2d       	mov	r18, r3
    5e9c:	20 61       	ori	r18, 0x10	; 16
    5e9e:	1d c0       	rjmp	.+58     	; 0x5eda <vfprintf+0xac>
    5ea0:	8d 32       	cpi	r24, 0x2D	; 45
    5ea2:	61 f0       	breq	.+24     	; 0x5ebc <vfprintf+0x8e>
    5ea4:	80 33       	cpi	r24, 0x30	; 48
    5ea6:	69 f4       	brne	.+26     	; 0x5ec2 <vfprintf+0x94>
    5ea8:	23 2d       	mov	r18, r3
    5eaa:	21 60       	ori	r18, 0x01	; 1
    5eac:	16 c0       	rjmp	.+44     	; 0x5eda <vfprintf+0xac>
    5eae:	83 2d       	mov	r24, r3
    5eb0:	82 60       	ori	r24, 0x02	; 2
    5eb2:	38 2e       	mov	r3, r24
    5eb4:	e3 2d       	mov	r30, r3
    5eb6:	e4 60       	ori	r30, 0x04	; 4
    5eb8:	3e 2e       	mov	r3, r30
    5eba:	2a c0       	rjmp	.+84     	; 0x5f10 <vfprintf+0xe2>
    5ebc:	f3 2d       	mov	r31, r3
    5ebe:	f8 60       	ori	r31, 0x08	; 8
    5ec0:	1d c0       	rjmp	.+58     	; 0x5efc <vfprintf+0xce>
    5ec2:	37 fc       	sbrc	r3, 7
    5ec4:	2d c0       	rjmp	.+90     	; 0x5f20 <vfprintf+0xf2>
    5ec6:	20 ed       	ldi	r18, 0xD0	; 208
    5ec8:	28 0f       	add	r18, r24
    5eca:	2a 30       	cpi	r18, 0x0A	; 10
    5ecc:	40 f0       	brcs	.+16     	; 0x5ede <vfprintf+0xb0>
    5ece:	8e 32       	cpi	r24, 0x2E	; 46
    5ed0:	b9 f4       	brne	.+46     	; 0x5f00 <vfprintf+0xd2>
    5ed2:	36 fc       	sbrc	r3, 6
    5ed4:	75 c1       	rjmp	.+746    	; 0x61c0 <vfprintf+0x392>
    5ed6:	23 2d       	mov	r18, r3
    5ed8:	20 64       	ori	r18, 0x40	; 64
    5eda:	32 2e       	mov	r3, r18
    5edc:	19 c0       	rjmp	.+50     	; 0x5f10 <vfprintf+0xe2>
    5ede:	36 fe       	sbrs	r3, 6
    5ee0:	06 c0       	rjmp	.+12     	; 0x5eee <vfprintf+0xc0>
    5ee2:	8a e0       	ldi	r24, 0x0A	; 10
    5ee4:	98 9e       	mul	r9, r24
    5ee6:	20 0d       	add	r18, r0
    5ee8:	11 24       	eor	r1, r1
    5eea:	92 2e       	mov	r9, r18
    5eec:	11 c0       	rjmp	.+34     	; 0x5f10 <vfprintf+0xe2>
    5eee:	ea e0       	ldi	r30, 0x0A	; 10
    5ef0:	2e 9e       	mul	r2, r30
    5ef2:	20 0d       	add	r18, r0
    5ef4:	11 24       	eor	r1, r1
    5ef6:	22 2e       	mov	r2, r18
    5ef8:	f3 2d       	mov	r31, r3
    5efa:	f0 62       	ori	r31, 0x20	; 32
    5efc:	3f 2e       	mov	r3, r31
    5efe:	08 c0       	rjmp	.+16     	; 0x5f10 <vfprintf+0xe2>
    5f00:	8c 36       	cpi	r24, 0x6C	; 108
    5f02:	21 f4       	brne	.+8      	; 0x5f0c <vfprintf+0xde>
    5f04:	83 2d       	mov	r24, r3
    5f06:	80 68       	ori	r24, 0x80	; 128
    5f08:	38 2e       	mov	r3, r24
    5f0a:	02 c0       	rjmp	.+4      	; 0x5f10 <vfprintf+0xe2>
    5f0c:	88 36       	cpi	r24, 0x68	; 104
    5f0e:	41 f4       	brne	.+16     	; 0x5f20 <vfprintf+0xf2>
    5f10:	f7 01       	movw	r30, r14
    5f12:	93 fd       	sbrc	r25, 3
    5f14:	85 91       	lpm	r24, Z+
    5f16:	93 ff       	sbrs	r25, 3
    5f18:	81 91       	ld	r24, Z+
    5f1a:	7f 01       	movw	r14, r30
    5f1c:	81 11       	cpse	r24, r1
    5f1e:	b3 cf       	rjmp	.-154    	; 0x5e86 <vfprintf+0x58>
    5f20:	98 2f       	mov	r25, r24
    5f22:	9f 7d       	andi	r25, 0xDF	; 223
    5f24:	95 54       	subi	r25, 0x45	; 69
    5f26:	93 30       	cpi	r25, 0x03	; 3
    5f28:	28 f4       	brcc	.+10     	; 0x5f34 <vfprintf+0x106>
    5f2a:	0c 5f       	subi	r16, 0xFC	; 252
    5f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f2e:	9f e3       	ldi	r25, 0x3F	; 63
    5f30:	99 83       	std	Y+1, r25	; 0x01
    5f32:	0d c0       	rjmp	.+26     	; 0x5f4e <vfprintf+0x120>
    5f34:	83 36       	cpi	r24, 0x63	; 99
    5f36:	31 f0       	breq	.+12     	; 0x5f44 <vfprintf+0x116>
    5f38:	83 37       	cpi	r24, 0x73	; 115
    5f3a:	71 f0       	breq	.+28     	; 0x5f58 <vfprintf+0x12a>
    5f3c:	83 35       	cpi	r24, 0x53	; 83
    5f3e:	09 f0       	breq	.+2      	; 0x5f42 <vfprintf+0x114>
    5f40:	55 c0       	rjmp	.+170    	; 0x5fec <vfprintf+0x1be>
    5f42:	20 c0       	rjmp	.+64     	; 0x5f84 <vfprintf+0x156>
    5f44:	f8 01       	movw	r30, r16
    5f46:	80 81       	ld	r24, Z
    5f48:	89 83       	std	Y+1, r24	; 0x01
    5f4a:	0e 5f       	subi	r16, 0xFE	; 254
    5f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f4e:	88 24       	eor	r8, r8
    5f50:	83 94       	inc	r8
    5f52:	91 2c       	mov	r9, r1
    5f54:	53 01       	movw	r10, r6
    5f56:	12 c0       	rjmp	.+36     	; 0x5f7c <vfprintf+0x14e>
    5f58:	28 01       	movw	r4, r16
    5f5a:	f2 e0       	ldi	r31, 0x02	; 2
    5f5c:	4f 0e       	add	r4, r31
    5f5e:	51 1c       	adc	r5, r1
    5f60:	f8 01       	movw	r30, r16
    5f62:	a0 80       	ld	r10, Z
    5f64:	b1 80       	ldd	r11, Z+1	; 0x01
    5f66:	36 fe       	sbrs	r3, 6
    5f68:	03 c0       	rjmp	.+6      	; 0x5f70 <vfprintf+0x142>
    5f6a:	69 2d       	mov	r22, r9
    5f6c:	70 e0       	ldi	r23, 0x00	; 0
    5f6e:	02 c0       	rjmp	.+4      	; 0x5f74 <vfprintf+0x146>
    5f70:	6f ef       	ldi	r22, 0xFF	; 255
    5f72:	7f ef       	ldi	r23, 0xFF	; 255
    5f74:	c5 01       	movw	r24, r10
    5f76:	38 d1       	rcall	.+624    	; 0x61e8 <strnlen>
    5f78:	4c 01       	movw	r8, r24
    5f7a:	82 01       	movw	r16, r4
    5f7c:	f3 2d       	mov	r31, r3
    5f7e:	ff 77       	andi	r31, 0x7F	; 127
    5f80:	3f 2e       	mov	r3, r31
    5f82:	15 c0       	rjmp	.+42     	; 0x5fae <vfprintf+0x180>
    5f84:	28 01       	movw	r4, r16
    5f86:	22 e0       	ldi	r18, 0x02	; 2
    5f88:	42 0e       	add	r4, r18
    5f8a:	51 1c       	adc	r5, r1
    5f8c:	f8 01       	movw	r30, r16
    5f8e:	a0 80       	ld	r10, Z
    5f90:	b1 80       	ldd	r11, Z+1	; 0x01
    5f92:	36 fe       	sbrs	r3, 6
    5f94:	03 c0       	rjmp	.+6      	; 0x5f9c <vfprintf+0x16e>
    5f96:	69 2d       	mov	r22, r9
    5f98:	70 e0       	ldi	r23, 0x00	; 0
    5f9a:	02 c0       	rjmp	.+4      	; 0x5fa0 <vfprintf+0x172>
    5f9c:	6f ef       	ldi	r22, 0xFF	; 255
    5f9e:	7f ef       	ldi	r23, 0xFF	; 255
    5fa0:	c5 01       	movw	r24, r10
    5fa2:	17 d1       	rcall	.+558    	; 0x61d2 <strnlen_P>
    5fa4:	4c 01       	movw	r8, r24
    5fa6:	f3 2d       	mov	r31, r3
    5fa8:	f0 68       	ori	r31, 0x80	; 128
    5faa:	3f 2e       	mov	r3, r31
    5fac:	82 01       	movw	r16, r4
    5fae:	33 fc       	sbrc	r3, 3
    5fb0:	19 c0       	rjmp	.+50     	; 0x5fe4 <vfprintf+0x1b6>
    5fb2:	82 2d       	mov	r24, r2
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	88 16       	cp	r8, r24
    5fb8:	99 06       	cpc	r9, r25
    5fba:	a0 f4       	brcc	.+40     	; 0x5fe4 <vfprintf+0x1b6>
    5fbc:	b6 01       	movw	r22, r12
    5fbe:	80 e2       	ldi	r24, 0x20	; 32
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	1d d1       	rcall	.+570    	; 0x61fe <fputc>
    5fc4:	2a 94       	dec	r2
    5fc6:	f5 cf       	rjmp	.-22     	; 0x5fb2 <vfprintf+0x184>
    5fc8:	f5 01       	movw	r30, r10
    5fca:	37 fc       	sbrc	r3, 7
    5fcc:	85 91       	lpm	r24, Z+
    5fce:	37 fe       	sbrs	r3, 7
    5fd0:	81 91       	ld	r24, Z+
    5fd2:	5f 01       	movw	r10, r30
    5fd4:	b6 01       	movw	r22, r12
    5fd6:	90 e0       	ldi	r25, 0x00	; 0
    5fd8:	12 d1       	rcall	.+548    	; 0x61fe <fputc>
    5fda:	21 10       	cpse	r2, r1
    5fdc:	2a 94       	dec	r2
    5fde:	21 e0       	ldi	r18, 0x01	; 1
    5fe0:	82 1a       	sub	r8, r18
    5fe2:	91 08       	sbc	r9, r1
    5fe4:	81 14       	cp	r8, r1
    5fe6:	91 04       	cpc	r9, r1
    5fe8:	79 f7       	brne	.-34     	; 0x5fc8 <vfprintf+0x19a>
    5fea:	e1 c0       	rjmp	.+450    	; 0x61ae <vfprintf+0x380>
    5fec:	84 36       	cpi	r24, 0x64	; 100
    5fee:	11 f0       	breq	.+4      	; 0x5ff4 <vfprintf+0x1c6>
    5ff0:	89 36       	cpi	r24, 0x69	; 105
    5ff2:	39 f5       	brne	.+78     	; 0x6042 <vfprintf+0x214>
    5ff4:	f8 01       	movw	r30, r16
    5ff6:	37 fe       	sbrs	r3, 7
    5ff8:	07 c0       	rjmp	.+14     	; 0x6008 <vfprintf+0x1da>
    5ffa:	60 81       	ld	r22, Z
    5ffc:	71 81       	ldd	r23, Z+1	; 0x01
    5ffe:	82 81       	ldd	r24, Z+2	; 0x02
    6000:	93 81       	ldd	r25, Z+3	; 0x03
    6002:	0c 5f       	subi	r16, 0xFC	; 252
    6004:	1f 4f       	sbci	r17, 0xFF	; 255
    6006:	08 c0       	rjmp	.+16     	; 0x6018 <vfprintf+0x1ea>
    6008:	60 81       	ld	r22, Z
    600a:	71 81       	ldd	r23, Z+1	; 0x01
    600c:	07 2e       	mov	r0, r23
    600e:	00 0c       	add	r0, r0
    6010:	88 0b       	sbc	r24, r24
    6012:	99 0b       	sbc	r25, r25
    6014:	0e 5f       	subi	r16, 0xFE	; 254
    6016:	1f 4f       	sbci	r17, 0xFF	; 255
    6018:	f3 2d       	mov	r31, r3
    601a:	ff 76       	andi	r31, 0x6F	; 111
    601c:	3f 2e       	mov	r3, r31
    601e:	97 ff       	sbrs	r25, 7
    6020:	09 c0       	rjmp	.+18     	; 0x6034 <vfprintf+0x206>
    6022:	90 95       	com	r25
    6024:	80 95       	com	r24
    6026:	70 95       	com	r23
    6028:	61 95       	neg	r22
    602a:	7f 4f       	sbci	r23, 0xFF	; 255
    602c:	8f 4f       	sbci	r24, 0xFF	; 255
    602e:	9f 4f       	sbci	r25, 0xFF	; 255
    6030:	f0 68       	ori	r31, 0x80	; 128
    6032:	3f 2e       	mov	r3, r31
    6034:	2a e0       	ldi	r18, 0x0A	; 10
    6036:	30 e0       	ldi	r19, 0x00	; 0
    6038:	a3 01       	movw	r20, r6
    603a:	1d d1       	rcall	.+570    	; 0x6276 <__ultoa_invert>
    603c:	88 2e       	mov	r8, r24
    603e:	86 18       	sub	r8, r6
    6040:	44 c0       	rjmp	.+136    	; 0x60ca <vfprintf+0x29c>
    6042:	85 37       	cpi	r24, 0x75	; 117
    6044:	31 f4       	brne	.+12     	; 0x6052 <vfprintf+0x224>
    6046:	23 2d       	mov	r18, r3
    6048:	2f 7e       	andi	r18, 0xEF	; 239
    604a:	b2 2e       	mov	r11, r18
    604c:	2a e0       	ldi	r18, 0x0A	; 10
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	25 c0       	rjmp	.+74     	; 0x609c <vfprintf+0x26e>
    6052:	93 2d       	mov	r25, r3
    6054:	99 7f       	andi	r25, 0xF9	; 249
    6056:	b9 2e       	mov	r11, r25
    6058:	8f 36       	cpi	r24, 0x6F	; 111
    605a:	c1 f0       	breq	.+48     	; 0x608c <vfprintf+0x25e>
    605c:	18 f4       	brcc	.+6      	; 0x6064 <vfprintf+0x236>
    605e:	88 35       	cpi	r24, 0x58	; 88
    6060:	79 f0       	breq	.+30     	; 0x6080 <vfprintf+0x252>
    6062:	ae c0       	rjmp	.+348    	; 0x61c0 <vfprintf+0x392>
    6064:	80 37       	cpi	r24, 0x70	; 112
    6066:	19 f0       	breq	.+6      	; 0x606e <vfprintf+0x240>
    6068:	88 37       	cpi	r24, 0x78	; 120
    606a:	21 f0       	breq	.+8      	; 0x6074 <vfprintf+0x246>
    606c:	a9 c0       	rjmp	.+338    	; 0x61c0 <vfprintf+0x392>
    606e:	e9 2f       	mov	r30, r25
    6070:	e0 61       	ori	r30, 0x10	; 16
    6072:	be 2e       	mov	r11, r30
    6074:	b4 fe       	sbrs	r11, 4
    6076:	0d c0       	rjmp	.+26     	; 0x6092 <vfprintf+0x264>
    6078:	fb 2d       	mov	r31, r11
    607a:	f4 60       	ori	r31, 0x04	; 4
    607c:	bf 2e       	mov	r11, r31
    607e:	09 c0       	rjmp	.+18     	; 0x6092 <vfprintf+0x264>
    6080:	34 fe       	sbrs	r3, 4
    6082:	0a c0       	rjmp	.+20     	; 0x6098 <vfprintf+0x26a>
    6084:	29 2f       	mov	r18, r25
    6086:	26 60       	ori	r18, 0x06	; 6
    6088:	b2 2e       	mov	r11, r18
    608a:	06 c0       	rjmp	.+12     	; 0x6098 <vfprintf+0x26a>
    608c:	28 e0       	ldi	r18, 0x08	; 8
    608e:	30 e0       	ldi	r19, 0x00	; 0
    6090:	05 c0       	rjmp	.+10     	; 0x609c <vfprintf+0x26e>
    6092:	20 e1       	ldi	r18, 0x10	; 16
    6094:	30 e0       	ldi	r19, 0x00	; 0
    6096:	02 c0       	rjmp	.+4      	; 0x609c <vfprintf+0x26e>
    6098:	20 e1       	ldi	r18, 0x10	; 16
    609a:	32 e0       	ldi	r19, 0x02	; 2
    609c:	f8 01       	movw	r30, r16
    609e:	b7 fe       	sbrs	r11, 7
    60a0:	07 c0       	rjmp	.+14     	; 0x60b0 <vfprintf+0x282>
    60a2:	60 81       	ld	r22, Z
    60a4:	71 81       	ldd	r23, Z+1	; 0x01
    60a6:	82 81       	ldd	r24, Z+2	; 0x02
    60a8:	93 81       	ldd	r25, Z+3	; 0x03
    60aa:	0c 5f       	subi	r16, 0xFC	; 252
    60ac:	1f 4f       	sbci	r17, 0xFF	; 255
    60ae:	06 c0       	rjmp	.+12     	; 0x60bc <vfprintf+0x28e>
    60b0:	60 81       	ld	r22, Z
    60b2:	71 81       	ldd	r23, Z+1	; 0x01
    60b4:	80 e0       	ldi	r24, 0x00	; 0
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	0e 5f       	subi	r16, 0xFE	; 254
    60ba:	1f 4f       	sbci	r17, 0xFF	; 255
    60bc:	a3 01       	movw	r20, r6
    60be:	db d0       	rcall	.+438    	; 0x6276 <__ultoa_invert>
    60c0:	88 2e       	mov	r8, r24
    60c2:	86 18       	sub	r8, r6
    60c4:	fb 2d       	mov	r31, r11
    60c6:	ff 77       	andi	r31, 0x7F	; 127
    60c8:	3f 2e       	mov	r3, r31
    60ca:	36 fe       	sbrs	r3, 6
    60cc:	0d c0       	rjmp	.+26     	; 0x60e8 <vfprintf+0x2ba>
    60ce:	23 2d       	mov	r18, r3
    60d0:	2e 7f       	andi	r18, 0xFE	; 254
    60d2:	a2 2e       	mov	r10, r18
    60d4:	89 14       	cp	r8, r9
    60d6:	58 f4       	brcc	.+22     	; 0x60ee <vfprintf+0x2c0>
    60d8:	34 fe       	sbrs	r3, 4
    60da:	0b c0       	rjmp	.+22     	; 0x60f2 <vfprintf+0x2c4>
    60dc:	32 fc       	sbrc	r3, 2
    60de:	09 c0       	rjmp	.+18     	; 0x60f2 <vfprintf+0x2c4>
    60e0:	83 2d       	mov	r24, r3
    60e2:	8e 7e       	andi	r24, 0xEE	; 238
    60e4:	a8 2e       	mov	r10, r24
    60e6:	05 c0       	rjmp	.+10     	; 0x60f2 <vfprintf+0x2c4>
    60e8:	b8 2c       	mov	r11, r8
    60ea:	a3 2c       	mov	r10, r3
    60ec:	03 c0       	rjmp	.+6      	; 0x60f4 <vfprintf+0x2c6>
    60ee:	b8 2c       	mov	r11, r8
    60f0:	01 c0       	rjmp	.+2      	; 0x60f4 <vfprintf+0x2c6>
    60f2:	b9 2c       	mov	r11, r9
    60f4:	a4 fe       	sbrs	r10, 4
    60f6:	0f c0       	rjmp	.+30     	; 0x6116 <vfprintf+0x2e8>
    60f8:	fe 01       	movw	r30, r28
    60fa:	e8 0d       	add	r30, r8
    60fc:	f1 1d       	adc	r31, r1
    60fe:	80 81       	ld	r24, Z
    6100:	80 33       	cpi	r24, 0x30	; 48
    6102:	21 f4       	brne	.+8      	; 0x610c <vfprintf+0x2de>
    6104:	9a 2d       	mov	r25, r10
    6106:	99 7e       	andi	r25, 0xE9	; 233
    6108:	a9 2e       	mov	r10, r25
    610a:	09 c0       	rjmp	.+18     	; 0x611e <vfprintf+0x2f0>
    610c:	a2 fe       	sbrs	r10, 2
    610e:	06 c0       	rjmp	.+12     	; 0x611c <vfprintf+0x2ee>
    6110:	b3 94       	inc	r11
    6112:	b3 94       	inc	r11
    6114:	04 c0       	rjmp	.+8      	; 0x611e <vfprintf+0x2f0>
    6116:	8a 2d       	mov	r24, r10
    6118:	86 78       	andi	r24, 0x86	; 134
    611a:	09 f0       	breq	.+2      	; 0x611e <vfprintf+0x2f0>
    611c:	b3 94       	inc	r11
    611e:	a3 fc       	sbrc	r10, 3
    6120:	10 c0       	rjmp	.+32     	; 0x6142 <vfprintf+0x314>
    6122:	a0 fe       	sbrs	r10, 0
    6124:	06 c0       	rjmp	.+12     	; 0x6132 <vfprintf+0x304>
    6126:	b2 14       	cp	r11, r2
    6128:	80 f4       	brcc	.+32     	; 0x614a <vfprintf+0x31c>
    612a:	28 0c       	add	r2, r8
    612c:	92 2c       	mov	r9, r2
    612e:	9b 18       	sub	r9, r11
    6130:	0d c0       	rjmp	.+26     	; 0x614c <vfprintf+0x31e>
    6132:	b2 14       	cp	r11, r2
    6134:	58 f4       	brcc	.+22     	; 0x614c <vfprintf+0x31e>
    6136:	b6 01       	movw	r22, r12
    6138:	80 e2       	ldi	r24, 0x20	; 32
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	60 d0       	rcall	.+192    	; 0x61fe <fputc>
    613e:	b3 94       	inc	r11
    6140:	f8 cf       	rjmp	.-16     	; 0x6132 <vfprintf+0x304>
    6142:	b2 14       	cp	r11, r2
    6144:	18 f4       	brcc	.+6      	; 0x614c <vfprintf+0x31e>
    6146:	2b 18       	sub	r2, r11
    6148:	02 c0       	rjmp	.+4      	; 0x614e <vfprintf+0x320>
    614a:	98 2c       	mov	r9, r8
    614c:	21 2c       	mov	r2, r1
    614e:	a4 fe       	sbrs	r10, 4
    6150:	0f c0       	rjmp	.+30     	; 0x6170 <vfprintf+0x342>
    6152:	b6 01       	movw	r22, r12
    6154:	80 e3       	ldi	r24, 0x30	; 48
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	52 d0       	rcall	.+164    	; 0x61fe <fputc>
    615a:	a2 fe       	sbrs	r10, 2
    615c:	16 c0       	rjmp	.+44     	; 0x618a <vfprintf+0x35c>
    615e:	a1 fc       	sbrc	r10, 1
    6160:	03 c0       	rjmp	.+6      	; 0x6168 <vfprintf+0x33a>
    6162:	88 e7       	ldi	r24, 0x78	; 120
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	02 c0       	rjmp	.+4      	; 0x616c <vfprintf+0x33e>
    6168:	88 e5       	ldi	r24, 0x58	; 88
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	b6 01       	movw	r22, r12
    616e:	0c c0       	rjmp	.+24     	; 0x6188 <vfprintf+0x35a>
    6170:	8a 2d       	mov	r24, r10
    6172:	86 78       	andi	r24, 0x86	; 134
    6174:	51 f0       	breq	.+20     	; 0x618a <vfprintf+0x35c>
    6176:	a1 fe       	sbrs	r10, 1
    6178:	02 c0       	rjmp	.+4      	; 0x617e <vfprintf+0x350>
    617a:	8b e2       	ldi	r24, 0x2B	; 43
    617c:	01 c0       	rjmp	.+2      	; 0x6180 <vfprintf+0x352>
    617e:	80 e2       	ldi	r24, 0x20	; 32
    6180:	a7 fc       	sbrc	r10, 7
    6182:	8d e2       	ldi	r24, 0x2D	; 45
    6184:	b6 01       	movw	r22, r12
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	3a d0       	rcall	.+116    	; 0x61fe <fputc>
    618a:	89 14       	cp	r8, r9
    618c:	30 f4       	brcc	.+12     	; 0x619a <vfprintf+0x36c>
    618e:	b6 01       	movw	r22, r12
    6190:	80 e3       	ldi	r24, 0x30	; 48
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	34 d0       	rcall	.+104    	; 0x61fe <fputc>
    6196:	9a 94       	dec	r9
    6198:	f8 cf       	rjmp	.-16     	; 0x618a <vfprintf+0x35c>
    619a:	8a 94       	dec	r8
    619c:	f3 01       	movw	r30, r6
    619e:	e8 0d       	add	r30, r8
    61a0:	f1 1d       	adc	r31, r1
    61a2:	80 81       	ld	r24, Z
    61a4:	b6 01       	movw	r22, r12
    61a6:	90 e0       	ldi	r25, 0x00	; 0
    61a8:	2a d0       	rcall	.+84     	; 0x61fe <fputc>
    61aa:	81 10       	cpse	r8, r1
    61ac:	f6 cf       	rjmp	.-20     	; 0x619a <vfprintf+0x36c>
    61ae:	22 20       	and	r2, r2
    61b0:	09 f4       	brne	.+2      	; 0x61b4 <vfprintf+0x386>
    61b2:	4e ce       	rjmp	.-868    	; 0x5e50 <vfprintf+0x22>
    61b4:	b6 01       	movw	r22, r12
    61b6:	80 e2       	ldi	r24, 0x20	; 32
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	21 d0       	rcall	.+66     	; 0x61fe <fputc>
    61bc:	2a 94       	dec	r2
    61be:	f7 cf       	rjmp	.-18     	; 0x61ae <vfprintf+0x380>
    61c0:	f6 01       	movw	r30, r12
    61c2:	86 81       	ldd	r24, Z+6	; 0x06
    61c4:	97 81       	ldd	r25, Z+7	; 0x07
    61c6:	02 c0       	rjmp	.+4      	; 0x61cc <vfprintf+0x39e>
    61c8:	8f ef       	ldi	r24, 0xFF	; 255
    61ca:	9f ef       	ldi	r25, 0xFF	; 255
    61cc:	2b 96       	adiw	r28, 0x0b	; 11
    61ce:	e2 e1       	ldi	r30, 0x12	; 18
    61d0:	23 c1       	rjmp	.+582    	; 0x6418 <__epilogue_restores__>

000061d2 <strnlen_P>:
    61d2:	fc 01       	movw	r30, r24
    61d4:	05 90       	lpm	r0, Z+
    61d6:	61 50       	subi	r22, 0x01	; 1
    61d8:	70 40       	sbci	r23, 0x00	; 0
    61da:	01 10       	cpse	r0, r1
    61dc:	d8 f7       	brcc	.-10     	; 0x61d4 <strnlen_P+0x2>
    61de:	80 95       	com	r24
    61e0:	90 95       	com	r25
    61e2:	8e 0f       	add	r24, r30
    61e4:	9f 1f       	adc	r25, r31
    61e6:	08 95       	ret

000061e8 <strnlen>:
    61e8:	fc 01       	movw	r30, r24
    61ea:	61 50       	subi	r22, 0x01	; 1
    61ec:	70 40       	sbci	r23, 0x00	; 0
    61ee:	01 90       	ld	r0, Z+
    61f0:	01 10       	cpse	r0, r1
    61f2:	d8 f7       	brcc	.-10     	; 0x61ea <strnlen+0x2>
    61f4:	80 95       	com	r24
    61f6:	90 95       	com	r25
    61f8:	8e 0f       	add	r24, r30
    61fa:	9f 1f       	adc	r25, r31
    61fc:	08 95       	ret

000061fe <fputc>:
    61fe:	0f 93       	push	r16
    6200:	1f 93       	push	r17
    6202:	cf 93       	push	r28
    6204:	df 93       	push	r29
    6206:	fb 01       	movw	r30, r22
    6208:	23 81       	ldd	r18, Z+3	; 0x03
    620a:	21 fd       	sbrc	r18, 1
    620c:	03 c0       	rjmp	.+6      	; 0x6214 <fputc+0x16>
    620e:	8f ef       	ldi	r24, 0xFF	; 255
    6210:	9f ef       	ldi	r25, 0xFF	; 255
    6212:	2c c0       	rjmp	.+88     	; 0x626c <fputc+0x6e>
    6214:	22 ff       	sbrs	r18, 2
    6216:	16 c0       	rjmp	.+44     	; 0x6244 <fputc+0x46>
    6218:	46 81       	ldd	r20, Z+6	; 0x06
    621a:	57 81       	ldd	r21, Z+7	; 0x07
    621c:	24 81       	ldd	r18, Z+4	; 0x04
    621e:	35 81       	ldd	r19, Z+5	; 0x05
    6220:	42 17       	cp	r20, r18
    6222:	53 07       	cpc	r21, r19
    6224:	44 f4       	brge	.+16     	; 0x6236 <fputc+0x38>
    6226:	a0 81       	ld	r26, Z
    6228:	b1 81       	ldd	r27, Z+1	; 0x01
    622a:	9d 01       	movw	r18, r26
    622c:	2f 5f       	subi	r18, 0xFF	; 255
    622e:	3f 4f       	sbci	r19, 0xFF	; 255
    6230:	31 83       	std	Z+1, r19	; 0x01
    6232:	20 83       	st	Z, r18
    6234:	8c 93       	st	X, r24
    6236:	26 81       	ldd	r18, Z+6	; 0x06
    6238:	37 81       	ldd	r19, Z+7	; 0x07
    623a:	2f 5f       	subi	r18, 0xFF	; 255
    623c:	3f 4f       	sbci	r19, 0xFF	; 255
    623e:	37 83       	std	Z+7, r19	; 0x07
    6240:	26 83       	std	Z+6, r18	; 0x06
    6242:	14 c0       	rjmp	.+40     	; 0x626c <fputc+0x6e>
    6244:	8b 01       	movw	r16, r22
    6246:	ec 01       	movw	r28, r24
    6248:	fb 01       	movw	r30, r22
    624a:	00 84       	ldd	r0, Z+8	; 0x08
    624c:	f1 85       	ldd	r31, Z+9	; 0x09
    624e:	e0 2d       	mov	r30, r0
    6250:	09 95       	icall
    6252:	89 2b       	or	r24, r25
    6254:	e1 f6       	brne	.-72     	; 0x620e <fputc+0x10>
    6256:	d8 01       	movw	r26, r16
    6258:	16 96       	adiw	r26, 0x06	; 6
    625a:	8d 91       	ld	r24, X+
    625c:	9c 91       	ld	r25, X
    625e:	17 97       	sbiw	r26, 0x07	; 7
    6260:	01 96       	adiw	r24, 0x01	; 1
    6262:	17 96       	adiw	r26, 0x07	; 7
    6264:	9c 93       	st	X, r25
    6266:	8e 93       	st	-X, r24
    6268:	16 97       	sbiw	r26, 0x06	; 6
    626a:	ce 01       	movw	r24, r28
    626c:	df 91       	pop	r29
    626e:	cf 91       	pop	r28
    6270:	1f 91       	pop	r17
    6272:	0f 91       	pop	r16
    6274:	08 95       	ret

00006276 <__ultoa_invert>:
    6276:	fa 01       	movw	r30, r20
    6278:	aa 27       	eor	r26, r26
    627a:	28 30       	cpi	r18, 0x08	; 8
    627c:	51 f1       	breq	.+84     	; 0x62d2 <__ultoa_invert+0x5c>
    627e:	20 31       	cpi	r18, 0x10	; 16
    6280:	81 f1       	breq	.+96     	; 0x62e2 <__ultoa_invert+0x6c>
    6282:	e8 94       	clt
    6284:	6f 93       	push	r22
    6286:	6e 7f       	andi	r22, 0xFE	; 254
    6288:	6e 5f       	subi	r22, 0xFE	; 254
    628a:	7f 4f       	sbci	r23, 0xFF	; 255
    628c:	8f 4f       	sbci	r24, 0xFF	; 255
    628e:	9f 4f       	sbci	r25, 0xFF	; 255
    6290:	af 4f       	sbci	r26, 0xFF	; 255
    6292:	b1 e0       	ldi	r27, 0x01	; 1
    6294:	3e d0       	rcall	.+124    	; 0x6312 <__ultoa_invert+0x9c>
    6296:	b4 e0       	ldi	r27, 0x04	; 4
    6298:	3c d0       	rcall	.+120    	; 0x6312 <__ultoa_invert+0x9c>
    629a:	67 0f       	add	r22, r23
    629c:	78 1f       	adc	r23, r24
    629e:	89 1f       	adc	r24, r25
    62a0:	9a 1f       	adc	r25, r26
    62a2:	a1 1d       	adc	r26, r1
    62a4:	68 0f       	add	r22, r24
    62a6:	79 1f       	adc	r23, r25
    62a8:	8a 1f       	adc	r24, r26
    62aa:	91 1d       	adc	r25, r1
    62ac:	a1 1d       	adc	r26, r1
    62ae:	6a 0f       	add	r22, r26
    62b0:	71 1d       	adc	r23, r1
    62b2:	81 1d       	adc	r24, r1
    62b4:	91 1d       	adc	r25, r1
    62b6:	a1 1d       	adc	r26, r1
    62b8:	20 d0       	rcall	.+64     	; 0x62fa <__ultoa_invert+0x84>
    62ba:	09 f4       	brne	.+2      	; 0x62be <__ultoa_invert+0x48>
    62bc:	68 94       	set
    62be:	3f 91       	pop	r19
    62c0:	2a e0       	ldi	r18, 0x0A	; 10
    62c2:	26 9f       	mul	r18, r22
    62c4:	11 24       	eor	r1, r1
    62c6:	30 19       	sub	r19, r0
    62c8:	30 5d       	subi	r19, 0xD0	; 208
    62ca:	31 93       	st	Z+, r19
    62cc:	de f6       	brtc	.-74     	; 0x6284 <__ultoa_invert+0xe>
    62ce:	cf 01       	movw	r24, r30
    62d0:	08 95       	ret
    62d2:	46 2f       	mov	r20, r22
    62d4:	47 70       	andi	r20, 0x07	; 7
    62d6:	40 5d       	subi	r20, 0xD0	; 208
    62d8:	41 93       	st	Z+, r20
    62da:	b3 e0       	ldi	r27, 0x03	; 3
    62dc:	0f d0       	rcall	.+30     	; 0x62fc <__ultoa_invert+0x86>
    62de:	c9 f7       	brne	.-14     	; 0x62d2 <__ultoa_invert+0x5c>
    62e0:	f6 cf       	rjmp	.-20     	; 0x62ce <__ultoa_invert+0x58>
    62e2:	46 2f       	mov	r20, r22
    62e4:	4f 70       	andi	r20, 0x0F	; 15
    62e6:	40 5d       	subi	r20, 0xD0	; 208
    62e8:	4a 33       	cpi	r20, 0x3A	; 58
    62ea:	18 f0       	brcs	.+6      	; 0x62f2 <__ultoa_invert+0x7c>
    62ec:	49 5d       	subi	r20, 0xD9	; 217
    62ee:	31 fd       	sbrc	r19, 1
    62f0:	40 52       	subi	r20, 0x20	; 32
    62f2:	41 93       	st	Z+, r20
    62f4:	02 d0       	rcall	.+4      	; 0x62fa <__ultoa_invert+0x84>
    62f6:	a9 f7       	brne	.-22     	; 0x62e2 <__ultoa_invert+0x6c>
    62f8:	ea cf       	rjmp	.-44     	; 0x62ce <__ultoa_invert+0x58>
    62fa:	b4 e0       	ldi	r27, 0x04	; 4
    62fc:	a6 95       	lsr	r26
    62fe:	97 95       	ror	r25
    6300:	87 95       	ror	r24
    6302:	77 95       	ror	r23
    6304:	67 95       	ror	r22
    6306:	ba 95       	dec	r27
    6308:	c9 f7       	brne	.-14     	; 0x62fc <__ultoa_invert+0x86>
    630a:	00 97       	sbiw	r24, 0x00	; 0
    630c:	61 05       	cpc	r22, r1
    630e:	71 05       	cpc	r23, r1
    6310:	08 95       	ret
    6312:	9b 01       	movw	r18, r22
    6314:	ac 01       	movw	r20, r24
    6316:	0a 2e       	mov	r0, r26
    6318:	06 94       	lsr	r0
    631a:	57 95       	ror	r21
    631c:	47 95       	ror	r20
    631e:	37 95       	ror	r19
    6320:	27 95       	ror	r18
    6322:	ba 95       	dec	r27
    6324:	c9 f7       	brne	.-14     	; 0x6318 <__ultoa_invert+0xa2>
    6326:	62 0f       	add	r22, r18
    6328:	73 1f       	adc	r23, r19
    632a:	84 1f       	adc	r24, r20
    632c:	95 1f       	adc	r25, r21
    632e:	a0 1d       	adc	r26, r0
    6330:	08 95       	ret

00006332 <eeprom_read_byte>:
    6332:	f9 99       	sbic	0x1f, 1	; 31
    6334:	fe cf       	rjmp	.-4      	; 0x6332 <eeprom_read_byte>
    6336:	92 bd       	out	0x22, r25	; 34
    6338:	81 bd       	out	0x21, r24	; 33
    633a:	f8 9a       	sbi	0x1f, 0	; 31
    633c:	99 27       	eor	r25, r25
    633e:	80 b5       	in	r24, 0x20	; 32
    6340:	08 95       	ret

00006342 <eeprom_read_dword>:
    6342:	a6 e1       	ldi	r26, 0x16	; 22
    6344:	b0 e0       	ldi	r27, 0x00	; 0
    6346:	44 e0       	ldi	r20, 0x04	; 4
    6348:	50 e0       	ldi	r21, 0x00	; 0
    634a:	3c c0       	rjmp	.+120    	; 0x63c4 <eeprom_read_blraw>

0000634c <eeprom_read_word>:
    634c:	a8 e1       	ldi	r26, 0x18	; 24
    634e:	b0 e0       	ldi	r27, 0x00	; 0
    6350:	42 e0       	ldi	r20, 0x02	; 2
    6352:	50 e0       	ldi	r21, 0x00	; 0
    6354:	37 c0       	rjmp	.+110    	; 0x63c4 <eeprom_read_blraw>

00006356 <eeprom_update_byte>:
    6356:	26 2f       	mov	r18, r22

00006358 <eeprom_update_r18>:
    6358:	f9 99       	sbic	0x1f, 1	; 31
    635a:	fe cf       	rjmp	.-4      	; 0x6358 <eeprom_update_r18>
    635c:	92 bd       	out	0x22, r25	; 34
    635e:	81 bd       	out	0x21, r24	; 33
    6360:	f8 9a       	sbi	0x1f, 0	; 31
    6362:	01 97       	sbiw	r24, 0x01	; 1
    6364:	00 b4       	in	r0, 0x20	; 32
    6366:	02 16       	cp	r0, r18
    6368:	39 f0       	breq	.+14     	; 0x6378 <eeprom_update_r18+0x20>
    636a:	1f ba       	out	0x1f, r1	; 31
    636c:	20 bd       	out	0x20, r18	; 32
    636e:	0f b6       	in	r0, 0x3f	; 63
    6370:	f8 94       	cli
    6372:	fa 9a       	sbi	0x1f, 2	; 31
    6374:	f9 9a       	sbi	0x1f, 1	; 31
    6376:	0f be       	out	0x3f, r0	; 63
    6378:	08 95       	ret

0000637a <eeprom_update_dword>:
    637a:	03 96       	adiw	r24, 0x03	; 3
    637c:	27 2f       	mov	r18, r23
    637e:	ec df       	rcall	.-40     	; 0x6358 <eeprom_update_r18>
    6380:	ea df       	rcall	.-44     	; 0x6356 <eeprom_update_byte>
    6382:	25 2f       	mov	r18, r21
    6384:	e9 df       	rcall	.-46     	; 0x6358 <eeprom_update_r18>
    6386:	24 2f       	mov	r18, r20
    6388:	e7 cf       	rjmp	.-50     	; 0x6358 <eeprom_update_r18>

0000638a <eeprom_update_word>:
    638a:	01 96       	adiw	r24, 0x01	; 1
    638c:	27 2f       	mov	r18, r23
    638e:	e4 df       	rcall	.-56     	; 0x6358 <eeprom_update_r18>
    6390:	e2 cf       	rjmp	.-60     	; 0x6356 <eeprom_update_byte>

00006392 <eeprom_write_block>:
    6392:	dc 01       	movw	r26, r24
    6394:	cb 01       	movw	r24, r22
    6396:	02 c0       	rjmp	.+4      	; 0x639c <eeprom_write_block+0xa>
    6398:	2d 91       	ld	r18, X+
    639a:	05 d0       	rcall	.+10     	; 0x63a6 <eeprom_write_r18>
    639c:	41 50       	subi	r20, 0x01	; 1
    639e:	50 40       	sbci	r21, 0x00	; 0
    63a0:	d8 f7       	brcc	.-10     	; 0x6398 <eeprom_write_block+0x6>
    63a2:	08 95       	ret

000063a4 <eeprom_write_byte>:
    63a4:	26 2f       	mov	r18, r22

000063a6 <eeprom_write_r18>:
    63a6:	f9 99       	sbic	0x1f, 1	; 31
    63a8:	fe cf       	rjmp	.-4      	; 0x63a6 <eeprom_write_r18>
    63aa:	1f ba       	out	0x1f, r1	; 31
    63ac:	92 bd       	out	0x22, r25	; 34
    63ae:	81 bd       	out	0x21, r24	; 33
    63b0:	20 bd       	out	0x20, r18	; 32
    63b2:	0f b6       	in	r0, 0x3f	; 63
    63b4:	f8 94       	cli
    63b6:	fa 9a       	sbi	0x1f, 2	; 31
    63b8:	f9 9a       	sbi	0x1f, 1	; 31
    63ba:	0f be       	out	0x3f, r0	; 63
    63bc:	01 96       	adiw	r24, 0x01	; 1
    63be:	08 95       	ret

000063c0 <eeprom_read_block>:
    63c0:	dc 01       	movw	r26, r24
    63c2:	cb 01       	movw	r24, r22

000063c4 <eeprom_read_blraw>:
    63c4:	fc 01       	movw	r30, r24
    63c6:	f9 99       	sbic	0x1f, 1	; 31
    63c8:	fe cf       	rjmp	.-4      	; 0x63c6 <eeprom_read_blraw+0x2>
    63ca:	06 c0       	rjmp	.+12     	; 0x63d8 <eeprom_read_blraw+0x14>
    63cc:	f2 bd       	out	0x22, r31	; 34
    63ce:	e1 bd       	out	0x21, r30	; 33
    63d0:	f8 9a       	sbi	0x1f, 0	; 31
    63d2:	31 96       	adiw	r30, 0x01	; 1
    63d4:	00 b4       	in	r0, 0x20	; 32
    63d6:	0d 92       	st	X+, r0
    63d8:	41 50       	subi	r20, 0x01	; 1
    63da:	50 40       	sbci	r21, 0x00	; 0
    63dc:	b8 f7       	brcc	.-18     	; 0x63cc <eeprom_read_blraw+0x8>
    63de:	08 95       	ret

000063e0 <__prologue_saves__>:
    63e0:	2f 92       	push	r2
    63e2:	3f 92       	push	r3
    63e4:	4f 92       	push	r4
    63e6:	5f 92       	push	r5
    63e8:	6f 92       	push	r6
    63ea:	7f 92       	push	r7
    63ec:	8f 92       	push	r8
    63ee:	9f 92       	push	r9
    63f0:	af 92       	push	r10
    63f2:	bf 92       	push	r11
    63f4:	cf 92       	push	r12
    63f6:	df 92       	push	r13
    63f8:	ef 92       	push	r14
    63fa:	ff 92       	push	r15
    63fc:	0f 93       	push	r16
    63fe:	1f 93       	push	r17
    6400:	cf 93       	push	r28
    6402:	df 93       	push	r29
    6404:	cd b7       	in	r28, 0x3d	; 61
    6406:	de b7       	in	r29, 0x3e	; 62
    6408:	ca 1b       	sub	r28, r26
    640a:	db 0b       	sbc	r29, r27
    640c:	0f b6       	in	r0, 0x3f	; 63
    640e:	f8 94       	cli
    6410:	de bf       	out	0x3e, r29	; 62
    6412:	0f be       	out	0x3f, r0	; 63
    6414:	cd bf       	out	0x3d, r28	; 61
    6416:	09 94       	ijmp

00006418 <__epilogue_restores__>:
    6418:	2a 88       	ldd	r2, Y+18	; 0x12
    641a:	39 88       	ldd	r3, Y+17	; 0x11
    641c:	48 88       	ldd	r4, Y+16	; 0x10
    641e:	5f 84       	ldd	r5, Y+15	; 0x0f
    6420:	6e 84       	ldd	r6, Y+14	; 0x0e
    6422:	7d 84       	ldd	r7, Y+13	; 0x0d
    6424:	8c 84       	ldd	r8, Y+12	; 0x0c
    6426:	9b 84       	ldd	r9, Y+11	; 0x0b
    6428:	aa 84       	ldd	r10, Y+10	; 0x0a
    642a:	b9 84       	ldd	r11, Y+9	; 0x09
    642c:	c8 84       	ldd	r12, Y+8	; 0x08
    642e:	df 80       	ldd	r13, Y+7	; 0x07
    6430:	ee 80       	ldd	r14, Y+6	; 0x06
    6432:	fd 80       	ldd	r15, Y+5	; 0x05
    6434:	0c 81       	ldd	r16, Y+4	; 0x04
    6436:	1b 81       	ldd	r17, Y+3	; 0x03
    6438:	aa 81       	ldd	r26, Y+2	; 0x02
    643a:	b9 81       	ldd	r27, Y+1	; 0x01
    643c:	ce 0f       	add	r28, r30
    643e:	d1 1d       	adc	r29, r1
    6440:	0f b6       	in	r0, 0x3f	; 63
    6442:	f8 94       	cli
    6444:	de bf       	out	0x3e, r29	; 62
    6446:	0f be       	out	0x3f, r0	; 63
    6448:	cd bf       	out	0x3d, r28	; 61
    644a:	ed 01       	movw	r28, r26
    644c:	08 95       	ret

0000644e <_exit>:
    644e:	f8 94       	cli

00006450 <__stop_program>:
    6450:	ff cf       	rjmp	.-2      	; 0x6450 <__stop_program>
