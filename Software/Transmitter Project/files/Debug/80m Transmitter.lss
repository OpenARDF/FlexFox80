
80m Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000ba4  00000c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000c5c  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00000c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000014c5  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005c0  00000000  00000000  00002311  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130c  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000059c  00000000  00000000  00003be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00011eca  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001968  00000000  00000000  00016046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  000179ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00004753  00000000  00000000  00017b2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3e c0       	rjmp	.+124    	; 0x7e <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	78 c0       	rjmp	.+240    	; 0x132 <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	01 01       	movw	r0, r2
  6a:	06 01       	movw	r0, r12
  6c:	0b 01       	movw	r0, r22
  6e:	10 01       	movw	r2, r0
  70:	15 01       	movw	r2, r10
  72:	1a 01       	movw	r2, r20
  74:	1f 01       	movw	r2, r30
  76:	24 01       	movw	r4, r8
  78:	29 01       	movw	r4, r18
  7a:	2e 01       	movw	r4, r28
  7c:	33 01       	movw	r6, r6

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf ef       	ldi	r28, 0xFF	; 255
  84:	d8 e0       	ldi	r29, 0x08	; 8
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	e4 ea       	ldi	r30, 0xA4	; 164
  92:	fb e0       	ldi	r31, 0x0B	; 11
  94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
  96:	05 90       	lpm	r0, Z+
  98:	0d 92       	st	X+, r0
  9a:	a4 30       	cpi	r26, 0x04	; 4
  9c:	b1 07       	cpc	r27, r17
  9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a4 e0       	ldi	r26, 0x04	; 4
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a8 30       	cpi	r26, 0x08	; 8
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	ee d0       	rcall	.+476    	; 0x28e <main>
  b2:	76 c5       	rjmp	.+2796   	; 0xba0 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <i2c_init>:
	unsigned int timeout = MAX_INT;
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
	while (--timeout && !(TWCR & _BV(TWINT)));
#endif
	return TWDR;
}
  b6:	e4 e6       	ldi	r30, 0x64	; 100
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8f 77       	andi	r24, 0x7F	; 127
  be:	80 83       	st	Z, r24
  c0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c4:	85 e2       	ldi	r24, 0x25	; 37
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d0:	08 95       	ret

000000d2 <i2c_start>:
  d2:	84 ea       	ldi	r24, 0xA4	; 164
  d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	9f ef       	ldi	r25, 0xFF	; 255
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	21 f0       	breq	.+8      	; 0xe8 <i2c_start+0x16>
  e0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e4:	27 ff       	sbrs	r18, 7
  e6:	fa cf       	rjmp	.-12     	; 0xdc <i2c_start+0xa>
  e8:	08 95       	ret

000000ea <i2c_stop>:
  ea:	84 e9       	ldi	r24, 0x94	; 148
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  f0:	08 95       	ret

000000f2 <i2c_write>:
  f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  f6:	84 e8       	ldi	r24, 0x84	; 132
  f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	9f ef       	ldi	r25, 0xFF	; 255
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	21 f0       	breq	.+8      	; 0x10c <i2c_write+0x1a>
 104:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 108:	27 ff       	sbrs	r18, 7
 10a:	fa cf       	rjmp	.-12     	; 0x100 <i2c_write+0xe>
 10c:	08 95       	ret

0000010e <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	unsigned int timeout = MAX_INT;
	TWCR = _BV(TWINT) | _BV(TWEN);
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (--timeout && !(TWCR & _BV(TWINT)));
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	21 f0       	breq	.+8      	; 0x124 <i2c_read_nack+0x16>
 11c:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 120:	27 ff       	sbrs	r18, 7
 122:	fa cf       	rjmp	.-12     	; 0x118 <i2c_read_nack+0xa>
	return TWDR;
 124:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 128:	08 95       	ret

0000012a <i2c_status>:

uint8_t i2c_status(void)
{
	return TW_STATUS;
 12a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
}
 12e:	88 7f       	andi	r24, 0xF8	; 248
 130:	08 95       	ret

00000132 <__vector_16>:
// manual -> config
// config -> manual
// manual -> auto      being developed.
////////////////////////////////////////////
void handle_quick_xmode_changes()
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <init_1>:
 146:	85 b5       	in	r24, 0x25	; 37
 148:	83 60       	ori	r24, 0x03	; 3
 14a:	85 bd       	out	0x25, r24	; 37
 14c:	ee e6       	ldi	r30, 0x6E	; 110
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
 156:	16 bc       	out	0x26, r1	; 38
 158:	14 b8       	out	0x04, r1	; 4
 15a:	17 b8       	out	0x07, r1	; 7
 15c:	1a b8       	out	0x0a, r1	; 10
 15e:	53 9a       	sbi	0x0a, 3	; 10
 160:	52 9a       	sbi	0x0a, 2	; 10
 162:	51 9a       	sbi	0x0a, 1	; 10
 164:	50 9a       	sbi	0x0a, 0	; 10
 166:	54 9a       	sbi	0x0a, 4	; 10
 168:	29 9a       	sbi	0x05, 1	; 5
 16a:	5d 9a       	sbi	0x0b, 5	; 11
 16c:	5f 9a       	sbi	0x0b, 7	; 11
 16e:	28 9a       	sbi	0x05, 0	; 5
 170:	5e 9a       	sbi	0x0b, 6	; 11
 172:	2a 9a       	sbi	0x05, 2	; 5
 174:	40 9a       	sbi	0x08, 0	; 8
 176:	29 9a       	sbi	0x05, 1	; 5
 178:	5d 9a       	sbi	0x0b, 5	; 11
 17a:	5f 9a       	sbi	0x0b, 7	; 11
 17c:	28 9a       	sbi	0x05, 0	; 5
 17e:	5e 9a       	sbi	0x0b, 6	; 11
 180:	2a 9a       	sbi	0x05, 2	; 5
 182:	40 9a       	sbi	0x08, 0	; 8
 184:	78 94       	sei
 186:	08 95       	ret

00000188 <init_si5351>:
 188:	cf 92       	push	r12
 18a:	df 92       	push	r13
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	40 e4       	ldi	r20, 0x40	; 64
 196:	58 e7       	ldi	r21, 0x78	; 120
 198:	6d e7       	ldi	r22, 0x7D	; 125
 19a:	71 e0       	ldi	r23, 0x01	; 1
 19c:	80 ec       	ldi	r24, 0xC0	; 192
 19e:	cb d2       	rcall	.+1430   	; 0x736 <si5351_init>
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	10 d3       	rcall	.+1568   	; 0x7c6 <si5351_clock_enable>
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0d d3       	rcall	.+1562   	; 0x7c6 <si5351_clock_enable>
 1ac:	80 ee       	ldi	r24, 0xE0	; 224
 1ae:	c8 2e       	mov	r12, r24
 1b0:	81 e9       	ldi	r24, 0x91	; 145
 1b2:	d8 2e       	mov	r13, r24
 1b4:	85 e7       	ldi	r24, 0x75	; 117
 1b6:	e8 2e       	mov	r14, r24
 1b8:	89 e0       	ldi	r24, 0x09	; 9
 1ba:	f8 2e       	mov	r15, r24
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	c7 01       	movw	r24, r14
 1c0:	b6 01       	movw	r22, r12
 1c2:	25 d4       	rcall	.+2122   	; 0xa0e <si5351_set_freq>
 1c4:	8a e0       	ldi	r24, 0x0A	; 10
 1c6:	c8 0e       	add	r12, r24
 1c8:	d1 1c       	adc	r13, r1
 1ca:	e1 1c       	adc	r14, r1
 1cc:	f1 1c       	adc	r15, r1
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	c8 16       	cp	r12, r24
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	d8 06       	cpc	r13, r24
 1d6:	87 e7       	ldi	r24, 0x77	; 119
 1d8:	e8 06       	cpc	r14, r24
 1da:	89 e0       	ldi	r24, 0x09	; 9
 1dc:	f8 06       	cpc	r15, r24
 1de:	71 f7       	brne	.-36     	; 0x1bc <init_si5351+0x34>
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	fe 01       	movw	r30, r28
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	eb 30       	cpi	r30, 0x0B	; 11
 1ea:	f1 05       	cpc	r31, r1
 1ec:	20 f4       	brcc	.+8      	; 0x1f6 <init_si5351+0x6e>
 1ee:	ec 5c       	subi	r30, 0xCC	; 204
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	a1 c4       	rjmp	.+2370   	; 0xb38 <__tablejump2__>
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	60 ef       	ldi	r22, 0xF0	; 240
 1fa:	7e e8       	ldi	r23, 0x8E	; 142
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	36 c0       	rjmp	.+108    	; 0x26e <init_si5351+0xe6>
 202:	60 e1       	ldi	r22, 0x10	; 16
 204:	7d ed       	ldi	r23, 0xDD	; 221
 206:	85 e3       	ldi	r24, 0x35	; 53
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	31 c0       	rjmp	.+98     	; 0x26e <init_si5351+0xe6>
 20c:	60 e3       	ldi	r22, 0x30	; 48
 20e:	7b e2       	ldi	r23, 0x2B	; 43
 210:	86 e3       	ldi	r24, 0x36	; 54
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2c c0       	rjmp	.+88     	; 0x26e <init_si5351+0xe6>
 216:	60 e5       	ldi	r22, 0x50	; 80
 218:	79 e7       	ldi	r23, 0x79	; 121
 21a:	86 e3       	ldi	r24, 0x36	; 54
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	27 c0       	rjmp	.+78     	; 0x26e <init_si5351+0xe6>
 220:	60 e7       	ldi	r22, 0x70	; 112
 222:	77 ec       	ldi	r23, 0xC7	; 199
 224:	86 e3       	ldi	r24, 0x36	; 54
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	22 c0       	rjmp	.+68     	; 0x26e <init_si5351+0xe6>
 22a:	68 e7       	ldi	r22, 0x78	; 120
 22c:	7c e9       	ldi	r23, 0x9C	; 156
 22e:	86 e3       	ldi	r24, 0x36	; 54
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	1d c0       	rjmp	.+58     	; 0x26e <init_si5351+0xe6>
 234:	60 e3       	ldi	r22, 0x30	; 48
 236:	71 ea       	ldi	r23, 0xA1	; 161
 238:	89 e9       	ldi	r24, 0x99	; 153
 23a:	98 e0       	ldi	r25, 0x08	; 8
 23c:	18 c0       	rjmp	.+48     	; 0x26e <init_si5351+0xe6>
 23e:	68 e7       	ldi	r22, 0x78	; 120
 240:	7a ef       	ldi	r23, 0xFA	; 250
 242:	8d e9       	ldi	r24, 0x9D	; 157
 244:	98 e0       	ldi	r25, 0x08	; 8
 246:	13 c0       	rjmp	.+38     	; 0x26e <init_si5351+0xe6>
 248:	68 ea       	ldi	r22, 0xA8	; 168
 24a:	77 e5       	ldi	r23, 0x57	; 87
 24c:	82 ea       	ldi	r24, 0xA2	; 162
 24e:	98 e0       	ldi	r25, 0x08	; 8
 250:	0e c0       	rjmp	.+28     	; 0x26e <init_si5351+0xe6>
 252:	68 ed       	ldi	r22, 0xD8	; 216
 254:	74 eb       	ldi	r23, 0xB4	; 180
 256:	86 ea       	ldi	r24, 0xA6	; 166
 258:	98 e0       	ldi	r25, 0x08	; 8
 25a:	09 c0       	rjmp	.+18     	; 0x26e <init_si5351+0xe6>
 25c:	68 e0       	ldi	r22, 0x08	; 8
 25e:	72 e1       	ldi	r23, 0x12	; 18
 260:	8b ea       	ldi	r24, 0xAB	; 171
 262:	98 e0       	ldi	r25, 0x08	; 8
 264:	04 c0       	rjmp	.+8      	; 0x26e <init_si5351+0xe6>
 266:	60 e5       	ldi	r22, 0x50	; 80
 268:	7b e6       	ldi	r23, 0x6B	; 107
 26a:	8f ea       	ldi	r24, 0xAF	; 175
 26c:	98 e0       	ldi	r25, 0x08	; 8
 26e:	cf d3       	rcall	.+1950   	; 0xa0e <si5351_set_freq>
 270:	21 96       	adiw	r28, 0x01	; 1
 272:	cc 30       	cpi	r28, 0x0C	; 12
 274:	d1 05       	cpc	r29, r1
 276:	09 f0       	breq	.+2      	; 0x27a <init_si5351+0xf2>
 278:	b5 cf       	rjmp	.-150    	; 0x1e4 <init_si5351+0x5c>
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	08 95       	ret

00000288 <check_xmode_switches>:
 288:	19 99       	sbic	0x03, 1	; 3
 28a:	89 b1       	in	r24, 0x09	; 9
 28c:	08 95       	ret

0000028e <main>:
int main( void )
{
	/* Insert system clock initialization code here (sysclk_init()). */

//	board_init();
	init_1();
 28e:	5b df       	rcall	.-330    	; 0x146 <init_1>

	/* Insert application code here, after the board has been initialized. */

	
	#ifdef USE_SI5351
	init_si5351();
 290:	7b df       	rcall	.-266    	; 0x188 <init_si5351>
	#endif


	while(1)
	{
		check_xmode_switches();  // sets w_xmode.
 292:	fa df       	rcall	.-12     	; 0x288 <check_xmode_switches>
 294:	fe cf       	rjmp	.-4      	; 0x292 <main+0x4>

00000296 <si5351_get_correction>:
	default:
		break;
	}

	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
}
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	6d c4       	rjmp	.+2266   	; 0xb76 <eeprom_read_dword>

0000029c <calc_gcd>:
 29c:	8f 92       	push	r8
 29e:	9f 92       	push	r9
 2a0:	af 92       	push	r10
 2a2:	bf 92       	push	r11
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	69 01       	movw	r12, r18
 2ae:	7a 01       	movw	r14, r20
 2b0:	61 15       	cp	r22, r1
 2b2:	71 05       	cpc	r23, r1
 2b4:	81 05       	cpc	r24, r1
 2b6:	91 05       	cpc	r25, r1
 2b8:	d1 f0       	breq	.+52     	; 0x2ee <calc_gcd+0x52>
 2ba:	21 15       	cp	r18, r1
 2bc:	31 05       	cpc	r19, r1
 2be:	41 05       	cpc	r20, r1
 2c0:	51 05       	cpc	r21, r1
 2c2:	a9 f0       	breq	.+42     	; 0x2ee <calc_gcd+0x52>
 2c4:	17 d4       	rcall	.+2094   	; 0xaf4 <__udivmodsi4>
 2c6:	4b 01       	movw	r8, r22
 2c8:	5c 01       	movw	r10, r24
 2ca:	81 14       	cp	r8, r1
 2cc:	91 04       	cpc	r9, r1
 2ce:	a1 04       	cpc	r10, r1
 2d0:	b1 04       	cpc	r11, r1
 2d2:	51 f0       	breq	.+20     	; 0x2e8 <calc_gcd+0x4c>
 2d4:	c7 01       	movw	r24, r14
 2d6:	b6 01       	movw	r22, r12
 2d8:	a5 01       	movw	r20, r10
 2da:	94 01       	movw	r18, r8
 2dc:	0b d4       	rcall	.+2070   	; 0xaf4 <__udivmodsi4>
 2de:	75 01       	movw	r14, r10
 2e0:	64 01       	movw	r12, r8
 2e2:	4b 01       	movw	r8, r22
 2e4:	5c 01       	movw	r10, r24
 2e6:	f1 cf       	rjmp	.-30     	; 0x2ca <calc_gcd+0x2e>
 2e8:	b6 01       	movw	r22, r12
 2ea:	c7 01       	movw	r24, r14
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <calc_gcd+0x5a>
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	df 90       	pop	r13
 2fc:	cf 90       	pop	r12
 2fe:	bf 90       	pop	r11
 300:	af 90       	pop	r10
 302:	9f 90       	pop	r9
 304:	8f 90       	pop	r8
 306:	08 95       	ret

00000308 <pll_calc>:
 308:	4f 92       	push	r4
 30a:	5f 92       	push	r5
 30c:	6f 92       	push	r6
 30e:	7f 92       	push	r7
 310:	8f 92       	push	r8
 312:	9f 92       	push	r9
 314:	af 92       	push	r10
 316:	bf 92       	push	r11
 318:	cf 92       	push	r12
 31a:	df 92       	push	r13
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	00 d0       	rcall	.+0      	; 0x32a <pll_calc+0x22>
 32a:	00 d0       	rcall	.+0      	; 0x32c <pll_calc+0x24>
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	8a 01       	movw	r16, r20
 332:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
 336:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
 33a:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
 33e:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
 342:	a5 01       	movw	r20, r10
 344:	94 01       	movw	r18, r8
 346:	d6 d3       	rcall	.+1964   	; 0xaf4 <__udivmodsi4>
 348:	29 83       	std	Y+1, r18	; 0x01
 34a:	3a 83       	std	Y+2, r19	; 0x02
 34c:	4b 83       	std	Y+3, r20	; 0x03
 34e:	5c 83       	std	Y+4, r21	; 0x04
 350:	6b 01       	movw	r12, r22
 352:	7c 01       	movw	r14, r24
 354:	a5 01       	movw	r20, r10
 356:	94 01       	movw	r18, r8
 358:	a1 df       	rcall	.-190    	; 0x29c <calc_gcd>
 35a:	2b 01       	movw	r4, r22
 35c:	3c 01       	movw	r6, r24
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	48 16       	cp	r4, r24
 362:	51 04       	cpc	r5, r1
 364:	61 04       	cpc	r6, r1
 366:	71 04       	cpc	r7, r1
 368:	70 f0       	brcs	.+28     	; 0x386 <pll_calc+0x7e>
 36a:	c7 01       	movw	r24, r14
 36c:	b6 01       	movw	r22, r12
 36e:	a3 01       	movw	r20, r6
 370:	92 01       	movw	r18, r4
 372:	c0 d3       	rcall	.+1920   	; 0xaf4 <__udivmodsi4>
 374:	69 01       	movw	r12, r18
 376:	7a 01       	movw	r14, r20
 378:	c5 01       	movw	r24, r10
 37a:	b4 01       	movw	r22, r8
 37c:	a3 01       	movw	r20, r6
 37e:	92 01       	movw	r18, r4
 380:	b9 d3       	rcall	.+1906   	; 0xaf4 <__udivmodsi4>
 382:	49 01       	movw	r8, r18
 384:	5a 01       	movw	r10, r20
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	cc 0c       	add	r12, r12
 38a:	dd 1c       	adc	r13, r13
 38c:	ee 1c       	adc	r14, r14
 38e:	ff 1c       	adc	r15, r15
 390:	8a 95       	dec	r24
 392:	d1 f7       	brne	.-12     	; 0x388 <pll_calc+0x80>
 394:	c7 01       	movw	r24, r14
 396:	b6 01       	movw	r22, r12
 398:	a5 01       	movw	r20, r10
 39a:	94 01       	movw	r18, r8
 39c:	ab d3       	rcall	.+1878   	; 0xaf4 <__udivmodsi4>
 39e:	49 80       	ldd	r4, Y+1	; 0x01
 3a0:	5a 80       	ldd	r5, Y+2	; 0x02
 3a2:	6b 80       	ldd	r6, Y+3	; 0x03
 3a4:	7c 80       	ldd	r7, Y+4	; 0x04
 3a6:	97 e0       	ldi	r25, 0x07	; 7
 3a8:	44 0c       	add	r4, r4
 3aa:	55 1c       	adc	r5, r5
 3ac:	66 1c       	adc	r6, r6
 3ae:	77 1c       	adc	r7, r7
 3b0:	9a 95       	dec	r25
 3b2:	d1 f7       	brne	.-12     	; 0x3a8 <pll_calc+0xa0>
 3b4:	e2 e0       	ldi	r30, 0x02	; 2
 3b6:	5e 1a       	sub	r5, r30
 3b8:	61 08       	sbc	r6, r1
 3ba:	71 08       	sbc	r7, r1
 3bc:	42 0e       	add	r4, r18
 3be:	53 1e       	adc	r5, r19
 3c0:	64 1e       	adc	r6, r20
 3c2:	75 1e       	adc	r7, r21
 3c4:	f8 01       	movw	r30, r16
 3c6:	40 82       	st	Z, r4
 3c8:	51 82       	std	Z+1, r5	; 0x01
 3ca:	62 82       	std	Z+2, r6	; 0x02
 3cc:	73 82       	std	Z+3, r7	; 0x03
 3ce:	c5 01       	movw	r24, r10
 3d0:	b4 01       	movw	r22, r8
 3d2:	81 d3       	rcall	.+1794   	; 0xad6 <__mulsi3>
 3d4:	c6 1a       	sub	r12, r22
 3d6:	d7 0a       	sbc	r13, r23
 3d8:	e8 0a       	sbc	r14, r24
 3da:	f9 0a       	sbc	r15, r25
 3dc:	c4 82       	std	Z+4, r12	; 0x04
 3de:	d5 82       	std	Z+5, r13	; 0x05
 3e0:	e6 82       	std	Z+6, r14	; 0x06
 3e2:	f7 82       	std	Z+7, r15	; 0x07
 3e4:	80 86       	std	Z+8, r8	; 0x08
 3e6:	91 86       	std	Z+9, r9	; 0x09
 3e8:	a2 86       	std	Z+10, r10	; 0x0a
 3ea:	b3 86       	std	Z+11, r11	; 0x0b
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	bf 90       	pop	r11
 408:	af 90       	pop	r10
 40a:	9f 90       	pop	r9
 40c:	8f 90       	pop	r8
 40e:	7f 90       	pop	r7
 410:	6f 90       	pop	r6
 412:	5f 90       	pop	r5
 414:	4f 90       	pop	r4
 416:	08 95       	ret

00000418 <multisynth_calc>:
 418:	3f 92       	push	r3
 41a:	4f 92       	push	r4
 41c:	5f 92       	push	r5
 41e:	6f 92       	push	r6
 420:	7f 92       	push	r7
 422:	8f 92       	push	r8
 424:	9f 92       	push	r9
 426:	af 92       	push	r10
 428:	bf 92       	push	r11
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	4b 01       	movw	r8, r22
 43c:	5c 01       	movw	r10, r24
 43e:	ea 01       	movw	r28, r20
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	f9 01       	movw	r30, r18
 444:	80 83       	st	Z, r24
 446:	f0 e8       	ldi	r31, 0x80	; 128
 448:	8f 16       	cp	r8, r31
 44a:	f1 ed       	ldi	r31, 0xD1	; 209
 44c:	9f 06       	cpc	r9, r31
 44e:	f0 ef       	ldi	r31, 0xF0	; 240
 450:	af 06       	cpc	r10, r31
 452:	f8 e0       	ldi	r31, 0x08	; 8
 454:	bf 06       	cpc	r11, r31
 456:	78 f0       	brcs	.+30     	; 0x476 <multisynth_calc+0x5e>
 458:	c5 01       	movw	r24, r10
 45a:	b4 01       	movw	r22, r8
 45c:	42 e0       	ldi	r20, 0x02	; 2
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	88 1f       	adc	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	4a 95       	dec	r20
 468:	d1 f7       	brne	.-12     	; 0x45e <multisynth_calc+0x46>
 46a:	54 e0       	ldi	r21, 0x04	; 4
 46c:	c5 2e       	mov	r12, r21
 46e:	d1 2c       	mov	r13, r1
 470:	e1 2c       	mov	r14, r1
 472:	f1 2c       	mov	r15, r1
 474:	3a c0       	rjmp	.+116    	; 0x4ea <multisynth_calc+0xd2>
 476:	a0 e0       	ldi	r26, 0x00	; 0
 478:	41 2c       	mov	r4, r1
 47a:	39 ee       	ldi	r19, 0xE9	; 233
 47c:	53 2e       	mov	r5, r19
 47e:	34 ea       	ldi	r19, 0xA4	; 164
 480:	63 2e       	mov	r6, r19
 482:	35 e3       	ldi	r19, 0x35	; 53
 484:	73 2e       	mov	r7, r19
 486:	33 24       	eor	r3, r3
 488:	33 94       	inc	r3
 48a:	3a 0e       	add	r3, r26
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	a5 01       	movw	r20, r10
 490:	94 01       	movw	r18, r8
 492:	58 d3       	rcall	.+1712   	; 0xb44 <__muluhisi3>
 494:	a3 01       	movw	r20, r6
 496:	92 01       	movw	r18, r4
 498:	26 1b       	sub	r18, r22
 49a:	37 0b       	sbc	r19, r23
 49c:	48 0b       	sbc	r20, r24
 49e:	59 0b       	sbc	r21, r25
 4a0:	ca 01       	movw	r24, r20
 4a2:	b9 01       	movw	r22, r18
 4a4:	61 15       	cp	r22, r1
 4a6:	36 e4       	ldi	r19, 0x46	; 70
 4a8:	73 07       	cpc	r23, r19
 4aa:	33 ec       	ldi	r19, 0xC3	; 195
 4ac:	83 07       	cpc	r24, r19
 4ae:	33 e2       	ldi	r19, 0x23	; 35
 4b0:	93 07       	cpc	r25, r19
 4b2:	a8 f0       	brcs	.+42     	; 0x4de <multisynth_calc+0xc6>
 4b4:	a5 01       	movw	r20, r10
 4b6:	94 01       	movw	r18, r8
 4b8:	1d d3       	rcall	.+1594   	; 0xaf4 <__udivmodsi4>
 4ba:	69 01       	movw	r12, r18
 4bc:	7a 01       	movw	r14, r20
 4be:	44 e0       	ldi	r20, 0x04	; 4
 4c0:	c4 16       	cp	r12, r20
 4c2:	d1 04       	cpc	r13, r1
 4c4:	e1 04       	cpc	r14, r1
 4c6:	f1 04       	cpc	r15, r1
 4c8:	10 f4       	brcc	.+4      	; 0x4ce <multisynth_calc+0xb6>
 4ca:	a3 2d       	mov	r26, r3
 4cc:	dc cf       	rjmp	.-72     	; 0x486 <multisynth_calc+0x6e>
 4ce:	c0 fc       	sbrc	r12, 0
 4d0:	fc cf       	rjmp	.-8      	; 0x4ca <multisynth_calc+0xb2>
 4d2:	a7 01       	movw	r20, r14
 4d4:	96 01       	movw	r18, r12
 4d6:	c5 01       	movw	r24, r10
 4d8:	b4 01       	movw	r22, r8
 4da:	fd d2       	rcall	.+1530   	; 0xad6 <__mulsi3>
 4dc:	06 c0       	rjmp	.+12     	; 0x4ea <multisynth_calc+0xd2>
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	cb 01       	movw	r24, r22
 4e4:	c1 2c       	mov	r12, r1
 4e6:	d1 2c       	mov	r13, r1
 4e8:	76 01       	movw	r14, r12
 4ea:	21 e0       	ldi	r18, 0x01	; 1
 4ec:	54 e0       	ldi	r21, 0x04	; 4
 4ee:	c5 16       	cp	r12, r21
 4f0:	d1 04       	cpc	r13, r1
 4f2:	e1 04       	cpc	r14, r1
 4f4:	f1 04       	cpc	r15, r1
 4f6:	09 f0       	breq	.+2      	; 0x4fa <multisynth_calc+0xe2>
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	f8 01       	movw	r30, r16
 4fc:	20 83       	st	Z, r18
 4fe:	27 e0       	ldi	r18, 0x07	; 7
 500:	cc 0c       	add	r12, r12
 502:	dd 1c       	adc	r13, r13
 504:	ee 1c       	adc	r14, r14
 506:	ff 1c       	adc	r15, r15
 508:	2a 95       	dec	r18
 50a:	d1 f7       	brne	.-12     	; 0x500 <multisynth_calc+0xe8>
 50c:	f2 e0       	ldi	r31, 0x02	; 2
 50e:	df 1a       	sub	r13, r31
 510:	e1 08       	sbc	r14, r1
 512:	f1 08       	sbc	r15, r1
 514:	c8 82       	st	Y, r12
 516:	d9 82       	std	Y+1, r13	; 0x01
 518:	ea 82       	std	Y+2, r14	; 0x02
 51a:	fb 82       	std	Y+3, r15	; 0x03
 51c:	1c 82       	std	Y+4, r1	; 0x04
 51e:	1d 82       	std	Y+5, r1	; 0x05
 520:	1e 82       	std	Y+6, r1	; 0x06
 522:	1f 82       	std	Y+7, r1	; 0x07
 524:	01 e0       	ldi	r16, 0x01	; 1
 526:	10 e0       	ldi	r17, 0x00	; 0
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	08 87       	std	Y+8, r16	; 0x08
 52e:	19 87       	std	Y+9, r17	; 0x09
 530:	2a 87       	std	Y+10, r18	; 0x0a
 532:	3b 87       	std	Y+11, r19	; 0x0b
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	bf 90       	pop	r11
 546:	af 90       	pop	r10
 548:	9f 90       	pop	r9
 54a:	8f 90       	pop	r8
 54c:	7f 90       	pop	r7
 54e:	6f 90       	pop	r6
 550:	5f 90       	pop	r5
 552:	4f 90       	pop	r4
 554:	3f 90       	pop	r3
 556:	08 95       	ret

00000558 <si5351_write_bulk>:
 558:	ef 92       	push	r14
 55a:	ff 92       	push	r15
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	d8 2f       	mov	r29, r24
 566:	c6 2f       	mov	r28, r22
 568:	7a 01       	movw	r14, r20
 56a:	b3 dd       	rcall	.-1178   	; 0xd2 <i2c_start>
 56c:	de dd       	rcall	.-1092   	; 0x12a <i2c_status>
 56e:	88 30       	cpi	r24, 0x08	; 8
 570:	19 f0       	breq	.+6      	; 0x578 <si5351_write_bulk+0x20>
 572:	bb dd       	rcall	.-1162   	; 0xea <i2c_stop>
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	1c c0       	rjmp	.+56     	; 0x5b0 <si5351_write_bulk+0x58>
 578:	80 ec       	ldi	r24, 0xC0	; 192
 57a:	bb dd       	rcall	.-1162   	; 0xf2 <i2c_write>
 57c:	d6 dd       	rcall	.-1108   	; 0x12a <i2c_status>
 57e:	88 31       	cpi	r24, 0x18	; 24
 580:	c1 f7       	brne	.-16     	; 0x572 <si5351_write_bulk+0x1a>
 582:	8d 2f       	mov	r24, r29
 584:	b6 dd       	rcall	.-1172   	; 0xf2 <i2c_write>
 586:	d1 dd       	rcall	.-1118   	; 0x12a <i2c_status>
 588:	88 32       	cpi	r24, 0x28	; 40
 58a:	99 f7       	brne	.-26     	; 0x572 <si5351_write_bulk+0x1a>
 58c:	87 01       	movw	r16, r14
 58e:	d0 e0       	ldi	r29, 0x00	; 0
 590:	c8 01       	movw	r24, r16
 592:	8e 19       	sub	r24, r14
 594:	9f 09       	sbc	r25, r15
 596:	8c 17       	cp	r24, r28
 598:	9d 07       	cpc	r25, r29
 59a:	44 f4       	brge	.+16     	; 0x5ac <si5351_write_bulk+0x54>
 59c:	f8 01       	movw	r30, r16
 59e:	81 91       	ld	r24, Z+
 5a0:	8f 01       	movw	r16, r30
 5a2:	a7 dd       	rcall	.-1202   	; 0xf2 <i2c_write>
 5a4:	c2 dd       	rcall	.-1148   	; 0x12a <i2c_status>
 5a6:	88 32       	cpi	r24, 0x28	; 40
 5a8:	99 f3       	breq	.-26     	; 0x590 <si5351_write_bulk+0x38>
 5aa:	e3 cf       	rjmp	.-58     	; 0x572 <si5351_write_bulk+0x1a>
 5ac:	9e dd       	rcall	.-1220   	; 0xea <i2c_stop>
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	08 95       	ret

000005be <set_pll>:
 5be:	8f 92       	push	r8
 5c0:	9f 92       	push	r9
 5c2:	af 92       	push	r10
 5c4:	bf 92       	push	r11
 5c6:	ff 92       	push	r15
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	66 97       	sbiw	r28, 0x16	; 22
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
 5e0:	4b 01       	movw	r8, r22
 5e2:	5c 01       	movw	r10, r24
 5e4:	f4 2e       	mov	r15, r20
 5e6:	57 de       	rcall	.-850    	; 0x296 <si5351_get_correction>
 5e8:	8b 01       	movw	r16, r22
 5ea:	9c 01       	movw	r18, r24
 5ec:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 5f0:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 5f4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 5f8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 5fc:	ae 01       	movw	r20, r28
 5fe:	4f 5f       	subi	r20, 0xFF	; 255
 600:	5f 4f       	sbci	r21, 0xFF	; 255
 602:	c5 01       	movw	r24, r10
 604:	b4 01       	movw	r22, r8
 606:	80 de       	rcall	.-768    	; 0x308 <pll_calc>
 608:	89 85       	ldd	r24, Y+9	; 0x09
 60a:	9a 85       	ldd	r25, Y+10	; 0x0a
 60c:	ab 85       	ldd	r26, Y+11	; 0x0b
 60e:	bc 85       	ldd	r27, Y+12	; 0x0c
 610:	9d 87       	std	Y+13, r25	; 0x0d
 612:	8e 87       	std	Y+14, r24	; 0x0e
 614:	39 81       	ldd	r19, Y+1	; 0x01
 616:	4a 81       	ldd	r20, Y+2	; 0x02
 618:	2b 81       	ldd	r18, Y+3	; 0x03
 61a:	23 70       	andi	r18, 0x03	; 3
 61c:	2f 87       	std	Y+15, r18	; 0x0f
 61e:	48 8b       	std	Y+16, r20	; 0x10
 620:	39 8b       	std	Y+17, r19	; 0x11
 622:	2c e0       	ldi	r18, 0x0C	; 12
 624:	b6 95       	lsr	r27
 626:	a7 95       	ror	r26
 628:	97 95       	ror	r25
 62a:	87 95       	ror	r24
 62c:	2a 95       	dec	r18
 62e:	d1 f7       	brne	.-12     	; 0x624 <set_pll+0x66>
 630:	80 7f       	andi	r24, 0xF0	; 240
 632:	2d 81       	ldd	r18, Y+5	; 0x05
 634:	3e 81       	ldd	r19, Y+6	; 0x06
 636:	9f 81       	ldd	r25, Y+7	; 0x07
 638:	9f 70       	andi	r25, 0x0F	; 15
 63a:	89 0f       	add	r24, r25
 63c:	8a 8b       	std	Y+18, r24	; 0x12
 63e:	3b 8b       	std	Y+19, r19	; 0x13
 640:	2c 8b       	std	Y+20, r18	; 0x14
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	f8 12       	cpse	r15, r24
 646:	06 c0       	rjmp	.+12     	; 0x654 <set_pll+0x96>
 648:	ae 01       	movw	r20, r28
 64a:	43 5f       	subi	r20, 0xF3	; 243
 64c:	5f 4f       	sbci	r21, 0xFF	; 255
 64e:	68 e0       	ldi	r22, 0x08	; 8
 650:	8a e1       	ldi	r24, 0x1A	; 26
 652:	08 c0       	rjmp	.+16     	; 0x664 <set_pll+0xa6>
 654:	82 e0       	ldi	r24, 0x02	; 2
 656:	f8 12       	cpse	r15, r24
 658:	06 c0       	rjmp	.+12     	; 0x666 <set_pll+0xa8>
 65a:	ae 01       	movw	r20, r28
 65c:	43 5f       	subi	r20, 0xF3	; 243
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	68 e0       	ldi	r22, 0x08	; 8
 662:	82 e2       	ldi	r24, 0x22	; 34
 664:	79 df       	rcall	.-270    	; 0x558 <si5351_write_bulk>
 666:	66 96       	adiw	r28, 0x16	; 22
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	f8 94       	cli
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	0f be       	out	0x3f, r0	; 63
 670:	cd bf       	out	0x3d, r28	; 61
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	ff 90       	pop	r15
 67c:	bf 90       	pop	r11
 67e:	af 90       	pop	r10
 680:	9f 90       	pop	r9
 682:	8f 90       	pop	r8
 684:	08 95       	ret

00000686 <si5351_write>:
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	d8 2f       	mov	r29, r24
 68c:	c6 2f       	mov	r28, r22
 68e:	21 dd       	rcall	.-1470   	; 0xd2 <i2c_start>
 690:	4c dd       	rcall	.-1384   	; 0x12a <i2c_status>
 692:	88 30       	cpi	r24, 0x08	; 8
 694:	19 f0       	breq	.+6      	; 0x69c <si5351_write+0x16>
 696:	29 dd       	rcall	.-1454   	; 0xea <i2c_stop>
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	11 c0       	rjmp	.+34     	; 0x6be <si5351_write+0x38>
 69c:	80 ec       	ldi	r24, 0xC0	; 192
 69e:	29 dd       	rcall	.-1454   	; 0xf2 <i2c_write>
 6a0:	44 dd       	rcall	.-1400   	; 0x12a <i2c_status>
 6a2:	88 31       	cpi	r24, 0x18	; 24
 6a4:	c1 f7       	brne	.-16     	; 0x696 <si5351_write+0x10>
 6a6:	8d 2f       	mov	r24, r29
 6a8:	24 dd       	rcall	.-1464   	; 0xf2 <i2c_write>
 6aa:	3f dd       	rcall	.-1410   	; 0x12a <i2c_status>
 6ac:	88 32       	cpi	r24, 0x28	; 40
 6ae:	99 f7       	brne	.-26     	; 0x696 <si5351_write+0x10>
 6b0:	8c 2f       	mov	r24, r28
 6b2:	1f dd       	rcall	.-1474   	; 0xf2 <i2c_write>
 6b4:	3a dd       	rcall	.-1420   	; 0x12a <i2c_status>
 6b6:	88 32       	cpi	r24, 0x28	; 40
 6b8:	71 f7       	brne	.-36     	; 0x696 <si5351_write+0x10>
 6ba:	17 dd       	rcall	.-1490   	; 0xea <i2c_stop>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret

000006c4 <pll_reset>:
 6c4:	cf 93       	push	r28
 6c6:	c8 2f       	mov	r28, r24
 6c8:	80 ff       	sbrs	r24, 0
 6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <pll_reset+0xe>
 6cc:	60 e2       	ldi	r22, 0x20	; 32
 6ce:	81 eb       	ldi	r24, 0xB1	; 177
 6d0:	da df       	rcall	.-76     	; 0x686 <si5351_write>
 6d2:	c1 ff       	sbrs	r28, 1
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <pll_reset+0x1a>
 6d6:	60 e8       	ldi	r22, 0x80	; 128
 6d8:	81 eb       	ldi	r24, 0xB1	; 177
 6da:	cf 91       	pop	r28
 6dc:	d4 cf       	rjmp	.-88     	; 0x686 <si5351_write>
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <si5351_read>:
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	18 2f       	mov	r17, r24
 6ea:	eb 01       	movw	r28, r22
 6ec:	f2 dc       	rcall	.-1564   	; 0xd2 <i2c_start>
 6ee:	1d dd       	rcall	.-1478   	; 0x12a <i2c_status>
 6f0:	88 30       	cpi	r24, 0x08	; 8
 6f2:	19 f0       	breq	.+6      	; 0x6fa <si5351_read+0x18>
 6f4:	fa dc       	rcall	.-1548   	; 0xea <i2c_stop>
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	1a c0       	rjmp	.+52     	; 0x72e <si5351_read+0x4c>
 6fa:	80 ec       	ldi	r24, 0xC0	; 192
 6fc:	fa dc       	rcall	.-1548   	; 0xf2 <i2c_write>
 6fe:	15 dd       	rcall	.-1494   	; 0x12a <i2c_status>
 700:	88 31       	cpi	r24, 0x18	; 24
 702:	c1 f7       	brne	.-16     	; 0x6f4 <si5351_read+0x12>
 704:	81 2f       	mov	r24, r17
 706:	f5 dc       	rcall	.-1558   	; 0xf2 <i2c_write>
 708:	10 dd       	rcall	.-1504   	; 0x12a <i2c_status>
 70a:	88 32       	cpi	r24, 0x28	; 40
 70c:	99 f7       	brne	.-26     	; 0x6f4 <si5351_read+0x12>
 70e:	e1 dc       	rcall	.-1598   	; 0xd2 <i2c_start>
 710:	0c dd       	rcall	.-1512   	; 0x12a <i2c_status>
 712:	80 31       	cpi	r24, 0x10	; 16
 714:	79 f7       	brne	.-34     	; 0x6f4 <si5351_read+0x12>
 716:	81 ec       	ldi	r24, 0xC1	; 193
 718:	ec dc       	rcall	.-1576   	; 0xf2 <i2c_write>
 71a:	07 dd       	rcall	.-1522   	; 0x12a <i2c_status>
 71c:	80 34       	cpi	r24, 0x40	; 64
 71e:	51 f7       	brne	.-44     	; 0x6f4 <si5351_read+0x12>
 720:	f6 dc       	rcall	.-1556   	; 0x10e <i2c_read_nack>
 722:	88 83       	st	Y, r24
 724:	02 dd       	rcall	.-1532   	; 0x12a <i2c_status>
 726:	88 35       	cpi	r24, 0x58	; 88
 728:	29 f7       	brne	.-54     	; 0x6f4 <si5351_read+0x12>
 72a:	df dc       	rcall	.-1602   	; 0xea <i2c_stop>
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	1f 91       	pop	r17
 734:	08 95       	ret

00000736 <si5351_init>:
 736:	cf 92       	push	r12
 738:	df 92       	push	r13
 73a:	ef 92       	push	r14
 73c:	ff 92       	push	r15
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	00 d0       	rcall	.+0      	; 0x744 <si5351_init+0xe>
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	6a 01       	movw	r12, r20
 74a:	7b 01       	movw	r14, r22
 74c:	8a 83       	std	Y+2, r24	; 0x02
 74e:	b3 dc       	rcall	.-1690   	; 0xb6 <i2c_init>
 750:	8a 81       	ldd	r24, Y+2	; 0x02
 752:	68 2f       	mov	r22, r24
 754:	62 61       	ori	r22, 0x12	; 18
 756:	87 eb       	ldi	r24, 0xB7	; 183
 758:	96 df       	rcall	.-212    	; 0x686 <si5351_write>
 75a:	c1 14       	cp	r12, r1
 75c:	d1 04       	cpc	r13, r1
 75e:	e1 04       	cpc	r14, r1
 760:	f1 04       	cpc	r15, r1
 762:	a1 f0       	breq	.+40     	; 0x78c <si5351_init+0x56>
 764:	be 01       	movw	r22, r28
 766:	6f 5f       	subi	r22, 0xFF	; 255
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f e0       	ldi	r24, 0x0F	; 15
 76c:	ba df       	rcall	.-140    	; 0x6e2 <si5351_read>
 76e:	81 11       	cpse	r24, r1
 770:	21 c0       	rjmp	.+66     	; 0x7b4 <si5351_init+0x7e>
 772:	69 81       	ldd	r22, Y+1	; 0x01
 774:	6f 73       	andi	r22, 0x3F	; 63
 776:	69 83       	std	Y+1, r22	; 0x01
 778:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
 77c:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
 780:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
 784:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
 788:	8f e0       	ldi	r24, 0x0F	; 15
 78a:	7d df       	rcall	.-262    	; 0x686 <si5351_write>
 78c:	60 e8       	ldi	r22, 0x80	; 128
 78e:	80 e1       	ldi	r24, 0x10	; 16
 790:	7a df       	rcall	.-268    	; 0x686 <si5351_write>
 792:	60 e8       	ldi	r22, 0x80	; 128
 794:	81 e1       	ldi	r24, 0x11	; 17
 796:	77 df       	rcall	.-274    	; 0x686 <si5351_write>
 798:	60 e8       	ldi	r22, 0x80	; 128
 79a:	82 e1       	ldi	r24, 0x12	; 18
 79c:	74 df       	rcall	.-280    	; 0x686 <si5351_write>
 79e:	6c e0       	ldi	r22, 0x0C	; 12
 7a0:	80 e1       	ldi	r24, 0x10	; 16
 7a2:	71 df       	rcall	.-286    	; 0x686 <si5351_write>
 7a4:	6c e0       	ldi	r22, 0x0C	; 12
 7a6:	81 e1       	ldi	r24, 0x11	; 17
 7a8:	6e df       	rcall	.-292    	; 0x686 <si5351_write>
 7aa:	6c e0       	ldi	r22, 0x0C	; 12
 7ac:	82 e1       	ldi	r24, 0x12	; 18
 7ae:	6b df       	rcall	.-298    	; 0x686 <si5351_write>
 7b0:	83 e0       	ldi	r24, 0x03	; 3
 7b2:	88 df       	rcall	.-240    	; 0x6c4 <pll_reset>
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	ff 90       	pop	r15
 7be:	ef 90       	pop	r14
 7c0:	df 90       	pop	r13
 7c2:	cf 90       	pop	r12
 7c4:	08 95       	ret

000007c6 <si5351_clock_enable>:
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	1f 92       	push	r1
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62
 7d4:	18 2f       	mov	r17, r24
 7d6:	06 2f       	mov	r16, r22
 7d8:	be 01       	movw	r22, r28
 7da:	6f 5f       	subi	r22, 0xFF	; 255
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	83 e0       	ldi	r24, 0x03	; 3
 7e0:	80 df       	rcall	.-256    	; 0x6e2 <si5351_read>
 7e2:	81 11       	cpse	r24, r1
 7e4:	17 c0       	rjmp	.+46     	; 0x814 <si5351_clock_enable+0x4e>
 7e6:	49 81       	ldd	r20, Y+1	; 0x01
 7e8:	21 e0       	ldi	r18, 0x01	; 1
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	00 23       	and	r16, r16
 7ee:	49 f0       	breq	.+18     	; 0x802 <si5351_clock_enable+0x3c>
 7f0:	c9 01       	movw	r24, r18
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <si5351_clock_enable+0x30>
 7f4:	88 0f       	add	r24, r24
 7f6:	1a 95       	dec	r17
 7f8:	ea f7       	brpl	.-6      	; 0x7f4 <si5351_clock_enable+0x2e>
 7fa:	80 95       	com	r24
 7fc:	84 23       	and	r24, r20
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	06 c0       	rjmp	.+12     	; 0x80e <si5351_clock_enable+0x48>
 802:	01 c0       	rjmp	.+2      	; 0x806 <si5351_clock_enable+0x40>
 804:	22 0f       	add	r18, r18
 806:	1a 95       	dec	r17
 808:	ea f7       	brpl	.-6      	; 0x804 <si5351_clock_enable+0x3e>
 80a:	24 2b       	or	r18, r20
 80c:	29 83       	std	Y+1, r18	; 0x01
 80e:	69 81       	ldd	r22, Y+1	; 0x01
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	39 df       	rcall	.-398    	; 0x686 <si5351_write>
 814:	0f 90       	pop	r0
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	08 95       	ret

00000820 <set_multisynth_registers_source>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
void set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
{
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	1f 92       	push	r1
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	06 2f       	mov	r16, r22
	uint8_t reg_val;
	
	if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
 830:	10 e1       	ldi	r17, 0x10	; 16
 832:	18 0f       	add	r17, r24
 834:	be 01       	movw	r22, r28
 836:	6f 5f       	subi	r22, 0xFF	; 255
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	81 2f       	mov	r24, r17
 83c:	52 df       	rcall	.-348    	; 0x6e2 <si5351_read>
 83e:	81 11       	cpse	r24, r1
 840:	0d c0       	rjmp	.+26     	; 0x85c <set_multisynth_registers_source+0x3c>
	{
		return;
	}
	
	if(pll == SI5351_PLLA)
 842:	01 30       	cpi	r16, 0x01	; 1
 844:	19 f4       	brne	.+6      	; 0x84c <set_multisynth_registers_source+0x2c>
	{
		reg_val &= ~(SI5351_CLK_PLL_SELECT);
 846:	99 81       	ldd	r25, Y+1	; 0x01
 848:	9f 7d       	andi	r25, 0xDF	; 223
 84a:	04 c0       	rjmp	.+8      	; 0x854 <set_multisynth_registers_source+0x34>
	}
	else if(pll == SI5351_PLLB)
 84c:	02 30       	cpi	r16, 0x02	; 2
 84e:	19 f4       	brne	.+6      	; 0x856 <set_multisynth_registers_source+0x36>
	{
		reg_val |= SI5351_CLK_PLL_SELECT;
 850:	99 81       	ldd	r25, Y+1	; 0x01
 852:	90 62       	ori	r25, 0x20	; 32
 854:	99 83       	std	Y+1, r25	; 0x01
	}
	
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 856:	69 81       	ldd	r22, Y+1	; 0x01
 858:	81 2f       	mov	r24, r17
 85a:	15 df       	rcall	.-470    	; 0x686 <si5351_write>
}
 85c:	0f 90       	pop	r0
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	08 95       	ret

00000868 <set_integer_mode>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
void set_integer_mode(Si5351_clock clk, BOOL enable)
{
 868:	0f 93       	push	r16
 86a:	1f 93       	push	r17
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	1f 92       	push	r1
 872:	cd b7       	in	r28, 0x3d	; 61
 874:	de b7       	in	r29, 0x3e	; 62
 876:	06 2f       	mov	r16, r22
	uint8_t reg_val;

	if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
 878:	10 e1       	ldi	r17, 0x10	; 16
 87a:	18 0f       	add	r17, r24
 87c:	be 01       	movw	r22, r28
 87e:	6f 5f       	subi	r22, 0xFF	; 255
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	81 2f       	mov	r24, r17
 884:	2e df       	rcall	.-420    	; 0x6e2 <si5351_read>
 886:	81 11       	cpse	r24, r1
 888:	0a c0       	rjmp	.+20     	; 0x89e <set_integer_mode+0x36>
 88a:	99 81       	ldd	r25, Y+1	; 0x01
	{
		return;
	}

	if(enable)
 88c:	00 23       	and	r16, r16
 88e:	11 f0       	breq	.+4      	; 0x894 <set_integer_mode+0x2c>
	{
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 890:	90 64       	ori	r25, 0x40	; 64
 892:	01 c0       	rjmp	.+2      	; 0x896 <set_integer_mode+0x2e>
	}
	else
	{
		reg_val &= ~(SI5351_CLK_INTEGER_MODE);
 894:	9f 7b       	andi	r25, 0xBF	; 191
 896:	99 83       	std	Y+1, r25	; 0x01
	}

	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 898:	69 81       	ldd	r22, Y+1	; 0x01
 89a:	81 2f       	mov	r24, r17
 89c:	f4 de       	rcall	.-536    	; 0x686 <si5351_write>
}
 89e:	0f 90       	pop	r0
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	08 95       	ret

000008aa <ms_div>:


void ms_div(Si5351_clock clk, uint8_t r_div, BOOL div_by_4)
{
 8aa:	ff 92       	push	r15
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	1f 92       	push	r1
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t reg_val, reg_addr;

	switch(clk)
 8ba:	81 30       	cpi	r24, 0x01	; 1
 8bc:	29 f0       	breq	.+10     	; 0x8c8 <ms_div+0x1e>
 8be:	30 f0       	brcs	.+12     	; 0x8cc <ms_div+0x22>
 8c0:	82 30       	cpi	r24, 0x02	; 2
 8c2:	e1 f4       	brne	.+56     	; 0x8fc <ms_div+0x52>
		case SI5351_CLK1:
		reg_addr = SI5351_CLK1_PARAMETERS + 2;
		break;
		
		case SI5351_CLK2:
		reg_addr = SI5351_CLK2_PARAMETERS + 2;
 8c4:	0c e3       	ldi	r16, 0x3C	; 60
		break;
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <ms_div+0x24>
		case SI5351_CLK0:
		reg_addr = SI5351_CLK0_PARAMETERS + 2;
		break;
		
		case SI5351_CLK1:
		reg_addr = SI5351_CLK1_PARAMETERS + 2;
 8c8:	04 e3       	ldi	r16, 0x34	; 52
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <ms_div+0x24>
	uint8_t reg_val, reg_addr;

	switch(clk)
	{
		case SI5351_CLK0:
		reg_addr = SI5351_CLK0_PARAMETERS + 2;
 8cc:	0c e2       	ldi	r16, 0x2C	; 44
 8ce:	f4 2e       	mov	r15, r20
 8d0:	16 2f       	mov	r17, r22

		default:
		return;
	}

	if(si5351_read(reg_addr, &reg_val))
 8d2:	be 01       	movw	r22, r28
 8d4:	6f 5f       	subi	r22, 0xFF	; 255
 8d6:	7f 4f       	sbci	r23, 0xFF	; 255
 8d8:	80 2f       	mov	r24, r16
 8da:	03 df       	rcall	.-506    	; 0x6e2 <si5351_read>
 8dc:	81 11       	cpse	r24, r1
 8de:	0e c0       	rjmp	.+28     	; 0x8fc <ms_div+0x52>
	{
		return;
	}

	// Clear the appropriate bits
	reg_val &= ~(0x7c);
 8e0:	99 81       	ldd	r25, Y+1	; 0x01
 8e2:	93 78       	andi	r25, 0x83	; 131

	if(div_by_4)
 8e4:	f1 10       	cpse	r15, r1
	{
		reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
 8e6:	9c 60       	ori	r25, 0x0C	; 12
 8e8:	99 83       	std	Y+1, r25	; 0x01
	else
	{
		reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
	}

	reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 8ea:	80 e1       	ldi	r24, 0x10	; 16
 8ec:	18 9f       	mul	r17, r24
 8ee:	b0 01       	movw	r22, r0
 8f0:	11 24       	eor	r1, r1
 8f2:	89 81       	ldd	r24, Y+1	; 0x01
 8f4:	68 2b       	or	r22, r24
 8f6:	69 83       	std	Y+1, r22	; 0x01

	si5351_write(reg_addr, reg_val);
 8f8:	80 2f       	mov	r24, r16
 8fa:	c5 de       	rcall	.-630    	; 0x686 <si5351_write>
}
 8fc:	0f 90       	pop	r0
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	1f 91       	pop	r17
 904:	0f 91       	pop	r16
 906:	ff 90       	pop	r15
 908:	08 95       	ret

0000090a <set_multisynth_registers>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
void set_multisynth_registers(Si5351_clock clk, Si5351RegSet ms_reg, BOOL int_mode, uint8_t r_div, BOOL div_by_4)
{
 90a:	5f 92       	push	r5
 90c:	6f 92       	push	r6
 90e:	7f 92       	push	r7
 910:	8f 92       	push	r8
 912:	9f 92       	push	r9
 914:	af 92       	push	r10
 916:	bf 92       	push	r11
 918:	cf 92       	push	r12
 91a:	df 92       	push	r13
 91c:	ef 92       	push	r14
 91e:	ff 92       	push	r15
 920:	0f 93       	push	r16
 922:	1f 93       	push	r17
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	cd b7       	in	r28, 0x3d	; 61
 92a:	de b7       	in	r29, 0x3e	; 62
 92c:	67 97       	sbiw	r28, 0x17	; 23
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	f8 94       	cli
 932:	de bf       	out	0x3e, r29	; 62
 934:	0f be       	out	0x3f, r0	; 63
 936:	cd bf       	out	0x3d, r28	; 61
 938:	b8 2e       	mov	r11, r24
 93a:	08 8b       	std	Y+16, r16	; 0x10
 93c:	4c 8b       	std	Y+20, r20	; 0x14
 93e:	5d 8b       	std	Y+21, r21	; 0x15
 940:	6e 8b       	std	Y+22, r22	; 0x16
 942:	7f 8b       	std	Y+23, r23	; 0x17
 944:	6c 2c       	mov	r6, r12
 946:	5d 2c       	mov	r5, r13
 948:	0e 2d       	mov	r16, r14
 94a:	98 88       	ldd	r9, Y+16	; 0x10
 94c:	71 2e       	mov	r7, r17
 94e:	12 2f       	mov	r17, r18
 950:	cc 88       	ldd	r12, Y+20	; 0x14
 952:	dd 88       	ldd	r13, Y+21	; 0x15
 954:	ee 88       	ldd	r14, Y+22	; 0x16
 956:	ff 88       	ldd	r15, Y+23	; 0x17
	uint8_t i = 0;
	uint8_t temp;
	uint8_t reg_val;
	
	// Registers 42-43 for CLK0
	temp = (uint8_t)((ms_reg.p3 >> 8) & 0xFF);
 958:	d9 82       	std	Y+1, r13	; 0x01
	params[i++] = temp;
	
	temp = (uint8_t)(ms_reg.p3  & 0xFF);
 95a:	ca 82       	std	Y+2, r12	; 0x02
	params[i++] = temp;
	
	// Register 44 for CLK0
	if(si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), &reg_val))
 95c:	88 0f       	add	r24, r24
 95e:	88 0f       	add	r24, r24
 960:	88 0f       	add	r24, r24
 962:	be 01       	movw	r22, r28
 964:	65 5f       	subi	r22, 0xF5	; 245
 966:	7f 4f       	sbci	r23, 0xFF	; 255
 968:	84 5d       	subi	r24, 0xD4	; 212
 96a:	bb de       	rcall	.-650    	; 0x6e2 <si5351_read>
 96c:	81 11       	cpse	r24, r1
 96e:	39 c0       	rjmp	.+114    	; 0x9e2 <set_multisynth_registers+0xd8>
	{
		return;
	}
	
	reg_val &= ~(0x03);
 970:	8b 85       	ldd	r24, Y+11	; 0x0b
 972:	8c 7f       	andi	r24, 0xFC	; 252
 974:	8b 87       	std	Y+11, r24	; 0x0b
	temp = reg_val | ((uint8_t)((ms_reg.p1 >> 16) & 0x03));
 976:	03 70       	andi	r16, 0x03	; 3
 978:	80 2b       	or	r24, r16
	params[i++] = temp;
 97a:	8b 83       	std	Y+3, r24	; 0x03
	
	// Registers 45-46 for CLK0
	temp = (uint8_t)((ms_reg.p1 >> 8) & 0xFF);
 97c:	5c 82       	std	Y+4, r5	; 0x04
	params[i++] = temp;
	
	temp = (uint8_t)(ms_reg.p1  & 0xFF);
 97e:	6d 82       	std	Y+5, r6	; 0x05
	params[i++] = temp;
	
	// Register 47 for CLK0
	temp = (uint8_t)((ms_reg.p3 >> 12) & 0xF0);
 980:	d7 01       	movw	r26, r14
 982:	c6 01       	movw	r24, r12
 984:	2c e0       	ldi	r18, 0x0C	; 12
 986:	b6 95       	lsr	r27
 988:	a7 95       	ror	r26
 98a:	97 95       	ror	r25
 98c:	87 95       	ror	r24
 98e:	2a 95       	dec	r18
 990:	d1 f7       	brne	.-12     	; 0x986 <set_multisynth_registers+0x7c>
 992:	80 7f       	andi	r24, 0xF0	; 240
	temp += (uint8_t)((ms_reg.p2 >> 16) & 0x0F);
 994:	1f 70       	andi	r17, 0x0F	; 15
 996:	c1 2e       	mov	r12, r17
 998:	c8 0e       	add	r12, r24
	params[i++] = temp;
 99a:	ce 82       	std	Y+6, r12	; 0x06
	
	// Registers 48-49 for CLK0
	temp = (uint8_t)((ms_reg.p2 >> 8) & 0xFF);
 99c:	7f 82       	std	Y+7, r7	; 0x07
	params[i++] = temp;
	
	temp = (uint8_t)(ms_reg.p2  & 0xFF);
 99e:	98 86       	std	Y+8, r9	; 0x08
	params[i++] = temp;
	
	// Write the parameters
	switch(clk)
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	b8 16       	cp	r11, r24
 9a4:	89 f0       	breq	.+34     	; 0x9c8 <set_multisynth_registers+0xbe>
 9a6:	b8 16       	cp	r11, r24
 9a8:	48 f0       	brcs	.+18     	; 0x9bc <set_multisynth_registers+0xb2>
 9aa:	82 e0       	ldi	r24, 0x02	; 2
 9ac:	b8 12       	cpse	r11, r24
 9ae:	12 c0       	rjmp	.+36     	; 0x9d4 <set_multisynth_registers+0xca>
		case SI5351_CLK1:
			si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
			break;
			
		case SI5351_CLK2:
			si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
 9b0:	ae 01       	movw	r20, r28
 9b2:	4f 5f       	subi	r20, 0xFF	; 255
 9b4:	5f 4f       	sbci	r21, 0xFF	; 255
 9b6:	68 e0       	ldi	r22, 0x08	; 8
 9b8:	8a e3       	ldi	r24, 0x3A	; 58
 9ba:	0b c0       	rjmp	.+22     	; 0x9d2 <set_multisynth_registers+0xc8>
	
	// Write the parameters
	switch(clk)
	{
		case SI5351_CLK0:
			si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
 9bc:	ae 01       	movw	r20, r28
 9be:	4f 5f       	subi	r20, 0xFF	; 255
 9c0:	5f 4f       	sbci	r21, 0xFF	; 255
 9c2:	68 e0       	ldi	r22, 0x08	; 8
 9c4:	8a e2       	ldi	r24, 0x2A	; 42
 9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <set_multisynth_registers+0xc8>
			break;
			
		case SI5351_CLK1:
			si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
 9c8:	ae 01       	movw	r20, r28
 9ca:	4f 5f       	subi	r20, 0xFF	; 255
 9cc:	5f 4f       	sbci	r21, 0xFF	; 255
 9ce:	68 e0       	ldi	r22, 0x08	; 8
 9d0:	82 e3       	ldi	r24, 0x32	; 50
			break;
			
		case SI5351_CLK2:
			si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
 9d2:	c2 dd       	rcall	.-1148   	; 0x558 <si5351_write_bulk>
			
		case SI5351_CLKNONE:
			break;
	}
	
	set_integer_mode(clk, int_mode);
 9d4:	6a 2d       	mov	r22, r10
 9d6:	8b 2d       	mov	r24, r11
 9d8:	47 df       	rcall	.-370    	; 0x868 <set_integer_mode>
	ms_div(clk, r_div, div_by_4);
 9da:	49 a5       	ldd	r20, Y+41	; 0x29
 9dc:	68 2d       	mov	r22, r8
 9de:	8b 2d       	mov	r24, r11
 9e0:	64 df       	rcall	.-312    	; 0x8aa <ms_div>
}
 9e2:	67 96       	adiw	r28, 0x17	; 23
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	f8 94       	cli
 9e8:	de bf       	out	0x3e, r29	; 62
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	cd bf       	out	0x3d, r28	; 61
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	1f 91       	pop	r17
 9f4:	0f 91       	pop	r16
 9f6:	ff 90       	pop	r15
 9f8:	ef 90       	pop	r14
 9fa:	df 90       	pop	r13
 9fc:	cf 90       	pop	r12
 9fe:	bf 90       	pop	r11
 a00:	af 90       	pop	r10
 a02:	9f 90       	pop	r9
 a04:	8f 90       	pop	r8
 a06:	7f 90       	pop	r7
 a08:	6f 90       	pop	r6
 a0a:	5f 90       	pop	r5
 a0c:	08 95       	ret

00000a0e <si5351_set_freq>:
 *
 * Returns TRUE on failure
 *
 */
BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk)
{
 a0e:	4f 92       	push	r4
 a10:	5f 92       	push	r5
 a12:	6f 92       	push	r6
 a14:	7f 92       	push	r7
 a16:	8f 92       	push	r8
 a18:	9f 92       	push	r9
 a1a:	af 92       	push	r10
 a1c:	bf 92       	push	r11
 a1e:	cf 92       	push	r12
 a20:	df 92       	push	r13
 a22:	ef 92       	push	r14
 a24:	ff 92       	push	r15
 a26:	0f 93       	push	r16
 a28:	1f 93       	push	r17
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	cd b7       	in	r28, 0x3d	; 61
 a30:	de b7       	in	r29, 0x3e	; 62
 a32:	2e 97       	sbiw	r28, 0x0e	; 14
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	f8 94       	cli
 a38:	de bf       	out	0x3e, r29	; 62
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	cd bf       	out	0x3d, r28	; 61
	Si5351RegSet ms_reg;
	Frequency_Hz freq_VCO = 0;
	Si5351_pll target_pll;
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
	BOOL int_mode = FALSE;
 a3e:	1e 86       	std	Y+14, r1	; 0x0e
	BOOL div_by_4 = FALSE;
 a40:	1d 86       	std	Y+13, r1	; 0x0d

	// Determine which PLL to use
	// CLK0 gets PLLA, CLK1 gets PLLB
	// CLK2 gets PLLB if necessary
	// Only good for Si5351A3 variant
	switch(clk)
 a42:	44 23       	and	r20, r20
 a44:	29 f0       	breq	.+10     	; 0xa50 <si5351_set_freq+0x42>
 a46:	43 30       	cpi	r20, 0x03	; 3
 a48:	70 f5       	brcc	.+92     	; 0xaa6 <si5351_set_freq+0x98>
		case SI5351_CLK2:
		case SI5351_CLK1:
		{
			// No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz
			// User must ensure the clock design is valid before setting clocks
			target_pll = SI5351_PLLB;
 a4a:	22 e0       	ldi	r18, 0x02	; 2
 a4c:	92 2e       	mov	r9, r18
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <si5351_set_freq+0x46>
	// Only good for Si5351A3 variant
	switch(clk)
	{
		case SI5351_CLK0:
		{
			target_pll = SI5351_PLLA;
 a50:	99 24       	eor	r9, r9
 a52:	93 94       	inc	r9
 a54:	b4 2e       	mov	r11, r20
	}	

#ifdef DEBUG_VALUES
	freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
	freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
 a56:	8e 01       	movw	r16, r28
 a58:	03 5f       	subi	r16, 0xF3	; 243
 a5a:	1f 4f       	sbci	r17, 0xFF	; 255
 a5c:	9e 01       	movw	r18, r28
 a5e:	22 5f       	subi	r18, 0xF2	; 242
 a60:	3f 4f       	sbci	r19, 0xFF	; 255
 a62:	ae 01       	movw	r20, r28
 a64:	4f 5f       	subi	r20, 0xFF	; 255
 a66:	5f 4f       	sbci	r21, 0xFF	; 255
 a68:	d7 dc       	rcall	.-1618   	; 0x418 <multisynth_calc>
 a6a:	2b 01       	movw	r4, r22
 a6c:	3c 01       	movw	r6, r24
#endif
	
	// Set multisynth registers (MS must be set before PLL)
	set_multisynth_registers_source(clk, target_pll);
 a6e:	69 2d       	mov	r22, r9
 a70:	8b 2d       	mov	r24, r11
 a72:	d6 de       	rcall	.-596    	; 0x820 <set_multisynth_registers_source>
	set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
 a74:	8d 85       	ldd	r24, Y+13	; 0x0d
 a76:	8f 93       	push	r24
 a78:	81 2c       	mov	r8, r1
 a7a:	ae 84       	ldd	r10, Y+14	; 0x0e
 a7c:	c9 80       	ldd	r12, Y+1	; 0x01
 a7e:	da 80       	ldd	r13, Y+2	; 0x02
 a80:	eb 80       	ldd	r14, Y+3	; 0x03
 a82:	fc 80       	ldd	r15, Y+4	; 0x04
 a84:	0d 81       	ldd	r16, Y+5	; 0x05
 a86:	1e 81       	ldd	r17, Y+6	; 0x06
 a88:	2f 81       	ldd	r18, Y+7	; 0x07
 a8a:	38 85       	ldd	r19, Y+8	; 0x08
 a8c:	49 85       	ldd	r20, Y+9	; 0x09
 a8e:	5a 85       	ldd	r21, Y+10	; 0x0a
 a90:	6b 85       	ldd	r22, Y+11	; 0x0b
 a92:	7c 85       	ldd	r23, Y+12	; 0x0c
 a94:	8b 2d       	mov	r24, r11
 a96:	39 df       	rcall	.-398    	; 0x90a <set_multisynth_registers>
#ifdef DEBUG_VALUES
	freq_VCO_calc = set_pll(freq_VCO, target_pll);
	fout_calc = freq_VCO_calc / div;
	f_err = freq_Fout - fout_calc;
#else
	set_pll(freq_VCO, target_pll);
 a98:	49 2d       	mov	r20, r9
 a9a:	c3 01       	movw	r24, r6
 a9c:	b2 01       	movw	r22, r4
 a9e:	8f dd       	rcall	.-1250   	; 0x5be <set_pll>
#endif
	
	return FALSE;
 aa0:	0f 90       	pop	r0
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <si5351_set_freq+0x9a>
			target_pll = SI5351_PLLB;
		}
			break;
			
		default:
			return TRUE;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
#else
	set_pll(freq_VCO, target_pll);
#endif
	
	return FALSE;
}
 aa8:	2e 96       	adiw	r28, 0x0e	; 14
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	f8 94       	cli
 aae:	de bf       	out	0x3e, r29	; 62
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	cd bf       	out	0x3d, r28	; 61
 ab4:	df 91       	pop	r29
 ab6:	cf 91       	pop	r28
 ab8:	1f 91       	pop	r17
 aba:	0f 91       	pop	r16
 abc:	ff 90       	pop	r15
 abe:	ef 90       	pop	r14
 ac0:	df 90       	pop	r13
 ac2:	cf 90       	pop	r12
 ac4:	bf 90       	pop	r11
 ac6:	af 90       	pop	r10
 ac8:	9f 90       	pop	r9
 aca:	8f 90       	pop	r8
 acc:	7f 90       	pop	r7
 ace:	6f 90       	pop	r6
 ad0:	5f 90       	pop	r5
 ad2:	4f 90       	pop	r4
 ad4:	08 95       	ret

00000ad6 <__mulsi3>:
 ad6:	db 01       	movw	r26, r22
 ad8:	8f 93       	push	r24
 ada:	9f 93       	push	r25
 adc:	33 d0       	rcall	.+102    	; 0xb44 <__muluhisi3>
 ade:	bf 91       	pop	r27
 ae0:	af 91       	pop	r26
 ae2:	a2 9f       	mul	r26, r18
 ae4:	80 0d       	add	r24, r0
 ae6:	91 1d       	adc	r25, r1
 ae8:	a3 9f       	mul	r26, r19
 aea:	90 0d       	add	r25, r0
 aec:	b2 9f       	mul	r27, r18
 aee:	90 0d       	add	r25, r0
 af0:	11 24       	eor	r1, r1
 af2:	08 95       	ret

00000af4 <__udivmodsi4>:
 af4:	a1 e2       	ldi	r26, 0x21	; 33
 af6:	1a 2e       	mov	r1, r26
 af8:	aa 1b       	sub	r26, r26
 afa:	bb 1b       	sub	r27, r27
 afc:	fd 01       	movw	r30, r26
 afe:	0d c0       	rjmp	.+26     	; 0xb1a <__udivmodsi4_ep>

00000b00 <__udivmodsi4_loop>:
 b00:	aa 1f       	adc	r26, r26
 b02:	bb 1f       	adc	r27, r27
 b04:	ee 1f       	adc	r30, r30
 b06:	ff 1f       	adc	r31, r31
 b08:	a2 17       	cp	r26, r18
 b0a:	b3 07       	cpc	r27, r19
 b0c:	e4 07       	cpc	r30, r20
 b0e:	f5 07       	cpc	r31, r21
 b10:	20 f0       	brcs	.+8      	; 0xb1a <__udivmodsi4_ep>
 b12:	a2 1b       	sub	r26, r18
 b14:	b3 0b       	sbc	r27, r19
 b16:	e4 0b       	sbc	r30, r20
 b18:	f5 0b       	sbc	r31, r21

00000b1a <__udivmodsi4_ep>:
 b1a:	66 1f       	adc	r22, r22
 b1c:	77 1f       	adc	r23, r23
 b1e:	88 1f       	adc	r24, r24
 b20:	99 1f       	adc	r25, r25
 b22:	1a 94       	dec	r1
 b24:	69 f7       	brne	.-38     	; 0xb00 <__udivmodsi4_loop>
 b26:	60 95       	com	r22
 b28:	70 95       	com	r23
 b2a:	80 95       	com	r24
 b2c:	90 95       	com	r25
 b2e:	9b 01       	movw	r18, r22
 b30:	ac 01       	movw	r20, r24
 b32:	bd 01       	movw	r22, r26
 b34:	cf 01       	movw	r24, r30
 b36:	08 95       	ret

00000b38 <__tablejump2__>:
 b38:	ee 0f       	add	r30, r30
 b3a:	ff 1f       	adc	r31, r31
 b3c:	05 90       	lpm	r0, Z+
 b3e:	f4 91       	lpm	r31, Z
 b40:	e0 2d       	mov	r30, r0
 b42:	09 94       	ijmp

00000b44 <__muluhisi3>:
 b44:	09 d0       	rcall	.+18     	; 0xb58 <__umulhisi3>
 b46:	a5 9f       	mul	r26, r21
 b48:	90 0d       	add	r25, r0
 b4a:	b4 9f       	mul	r27, r20
 b4c:	90 0d       	add	r25, r0
 b4e:	a4 9f       	mul	r26, r20
 b50:	80 0d       	add	r24, r0
 b52:	91 1d       	adc	r25, r1
 b54:	11 24       	eor	r1, r1
 b56:	08 95       	ret

00000b58 <__umulhisi3>:
 b58:	a2 9f       	mul	r26, r18
 b5a:	b0 01       	movw	r22, r0
 b5c:	b3 9f       	mul	r27, r19
 b5e:	c0 01       	movw	r24, r0
 b60:	a3 9f       	mul	r26, r19
 b62:	70 0d       	add	r23, r0
 b64:	81 1d       	adc	r24, r1
 b66:	11 24       	eor	r1, r1
 b68:	91 1d       	adc	r25, r1
 b6a:	b2 9f       	mul	r27, r18
 b6c:	70 0d       	add	r23, r0
 b6e:	81 1d       	adc	r24, r1
 b70:	11 24       	eor	r1, r1
 b72:	91 1d       	adc	r25, r1
 b74:	08 95       	ret

00000b76 <eeprom_read_dword>:
 b76:	a6 e1       	ldi	r26, 0x16	; 22
 b78:	b0 e0       	ldi	r27, 0x00	; 0
 b7a:	44 e0       	ldi	r20, 0x04	; 4
 b7c:	50 e0       	ldi	r21, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <eeprom_read_blraw>

00000b80 <eeprom_read_block>:
 b80:	dc 01       	movw	r26, r24
 b82:	cb 01       	movw	r24, r22

00000b84 <eeprom_read_blraw>:
 b84:	fc 01       	movw	r30, r24
 b86:	f9 99       	sbic	0x1f, 1	; 31
 b88:	fe cf       	rjmp	.-4      	; 0xb86 <eeprom_read_blraw+0x2>
 b8a:	06 c0       	rjmp	.+12     	; 0xb98 <eeprom_read_blraw+0x14>
 b8c:	f2 bd       	out	0x22, r31	; 34
 b8e:	e1 bd       	out	0x21, r30	; 33
 b90:	f8 9a       	sbi	0x1f, 0	; 31
 b92:	31 96       	adiw	r30, 0x01	; 1
 b94:	00 b4       	in	r0, 0x20	; 32
 b96:	0d 92       	st	X+, r0
 b98:	41 50       	subi	r20, 0x01	; 1
 b9a:	50 40       	sbci	r21, 0x00	; 0
 b9c:	b8 f7       	brcc	.-18     	; 0xb8c <eeprom_read_blraw+0x8>
 b9e:	08 95       	ret

00000ba0 <_exit>:
 ba0:	f8 94       	cli

00000ba2 <__stop_program>:
 ba2:	ff cf       	rjmp	.-2      	; 0xba2 <__stop_program>
