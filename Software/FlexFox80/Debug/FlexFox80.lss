
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000552  00804000  0000a4a6  0000a55a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a4a6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000417  00804552  00804552  0000aaac  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  0000aaac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000aae1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000ab40  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000009b8  00000000  00000000  0000ab80  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001324b  00000000  00000000  0000b538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005c51  00000000  00000000  0001e783  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007fc2  00000000  00000000  000243d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001f90  00000000  00000000  0002c398  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000606a  00000000  00000000  0002e328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b310  00000000  00000000  00034392  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000958  00000000  00000000  0003f6a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__dtors_end>
       4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      10:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      14:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      18:	0c 94 5e 29 	jmp	0x52bc	; 0x52bc <__vector_6>
      1c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      20:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      24:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      28:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      30:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__vector_12>
      34:	0c 94 34 44 	jmp	0x8868	; 0x8868 <__vector_13>
      38:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      3c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      40:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      44:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      48:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      4c:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__vector_19>
      50:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__vector_20>
      54:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      58:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      5c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      60:	0c 94 cb 28 	jmp	0x5196	; 0x5196 <__vector_24>
      64:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      68:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      6c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      70:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      74:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__vector_29>
      78:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__vector_30>
      7c:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_31>
      80:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__vector_32>
      84:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      88:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      8c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      90:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      94:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      98:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      9c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a4:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__vector_41>
      a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      dc:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__vector_55>
      e0:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_56>
      e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e8:	4e 23       	and	r20, r30
      ea:	5a 23       	and	r21, r26
      ec:	69 23       	and	r22, r25
      ee:	78 23       	and	r23, r24
      f0:	87 23       	and	r24, r23
      f2:	80 24       	eor	r8, r0
      f4:	78 24       	eor	r7, r8
      f6:	b8 23       	and	r27, r24
      f8:	c1 23       	and	r28, r17
      fa:	cd 23       	and	r28, r29
      fc:	d9 23       	and	r29, r25
      fe:	e5 23       	and	r30, r21
     100:	18 24       	eor	r1, r8
     102:	21 24       	eor	r2, r1
     104:	2d 24       	eor	r2, r13
     106:	39 24       	eor	r3, r9
     108:	45 24       	eor	r4, r5
     10a:	ec 30       	cpi	r30, 0x0C	; 12
     10c:	f2 30       	cpi	r31, 0x02	; 2
     10e:	d4 30       	cpi	r29, 0x04	; 4
     110:	f2 30       	cpi	r31, 0x02	; 2
     112:	f2 30       	cpi	r31, 0x02	; 2
     114:	f2 30       	cpi	r31, 0x02	; 2
     116:	dd 30       	cpi	r29, 0x0D	; 13
     118:	f2 30       	cpi	r31, 0x02	; 2
     11a:	f2 30       	cpi	r31, 0x02	; 2
     11c:	f2 30       	cpi	r31, 0x02	; 2
     11e:	9b 30       	cpi	r25, 0x0B	; 11
     120:	f2 30       	cpi	r31, 0x02	; 2
     122:	f2 30       	cpi	r31, 0x02	; 2
     124:	f2 30       	cpi	r31, 0x02	; 2
     126:	f2 30       	cpi	r31, 0x02	; 2
     128:	f2 30       	cpi	r31, 0x02	; 2
     12a:	f2 30       	cpi	r31, 0x02	; 2
     12c:	f2 30       	cpi	r31, 0x02	; 2
     12e:	f2 30       	cpi	r31, 0x02	; 2
     130:	f2 30       	cpi	r31, 0x02	; 2
     132:	f2 30       	cpi	r31, 0x02	; 2
     134:	f2 30       	cpi	r31, 0x02	; 2
     136:	f2 30       	cpi	r31, 0x02	; 2
     138:	f2 30       	cpi	r31, 0x02	; 2
     13a:	f2 30       	cpi	r31, 0x02	; 2
     13c:	f2 30       	cpi	r31, 0x02	; 2
     13e:	f2 30       	cpi	r31, 0x02	; 2
     140:	f2 30       	cpi	r31, 0x02	; 2
     142:	f2 30       	cpi	r31, 0x02	; 2
     144:	f2 30       	cpi	r31, 0x02	; 2
     146:	f2 30       	cpi	r31, 0x02	; 2
     148:	b1 30       	cpi	r27, 0x01	; 1
     14a:	f2 30       	cpi	r31, 0x02	; 2
     14c:	f2 30       	cpi	r31, 0x02	; 2
     14e:	f2 30       	cpi	r31, 0x02	; 2
     150:	f2 30       	cpi	r31, 0x02	; 2
     152:	f2 30       	cpi	r31, 0x02	; 2
     154:	f2 30       	cpi	r31, 0x02	; 2
     156:	f2 30       	cpi	r31, 0x02	; 2
     158:	f2 30       	cpi	r31, 0x02	; 2
     15a:	c8 30       	cpi	r28, 0x08	; 8
     15c:	ce 30       	cpi	r28, 0x0E	; 14
     15e:	e6 30       	cpi	r30, 0x06	; 6
     160:	82 30       	cpi	r24, 0x02	; 2
     162:	f2 30       	cpi	r31, 0x02	; 2
     164:	f2 30       	cpi	r31, 0x02	; 2
     166:	f2 30       	cpi	r31, 0x02	; 2
     168:	8b 30       	cpi	r24, 0x0B	; 11
     16a:	f2 30       	cpi	r31, 0x02	; 2
     16c:	f2 30       	cpi	r31, 0x02	; 2
     16e:	f2 30       	cpi	r31, 0x02	; 2
     170:	94 30       	cpi	r25, 0x04	; 4
     172:	28 39       	cpi	r18, 0x98	; 152
     174:	ec 38       	cpi	r30, 0x8C	; 140
     176:	18 39       	cpi	r17, 0x98	; 152
     178:	30 39       	cpi	r19, 0x90	; 144
     17a:	1c 39       	cpi	r17, 0x9C	; 156
     17c:	30 39       	cpi	r19, 0x90	; 144
     17e:	fc 38       	cpi	r31, 0x8C	; 140
     180:	e8 38       	cpi	r30, 0x88	; 136
     182:	f4 38       	cpi	r31, 0x84	; 132
     184:	f8 38       	cpi	r31, 0x88	; 136
     186:	30 39       	cpi	r19, 0x90	; 144
     188:	0c 39       	cpi	r16, 0x9C	; 156
     18a:	e0 38       	cpi	r30, 0x80	; 128
     18c:	10 39       	cpi	r17, 0x90	; 144
     18e:	dc 38       	cpi	r29, 0x8C	; 140
     190:	f0 38       	cpi	r31, 0x80	; 128
     192:	b4 38       	cpi	r27, 0x84	; 132
     194:	b8 38       	cpi	r27, 0x88	; 136
     196:	bc 38       	cpi	r27, 0x8C	; 140
     198:	c0 38       	cpi	r28, 0x80	; 128
     19a:	c4 38       	cpi	r28, 0x84	; 132
     19c:	c8 38       	cpi	r28, 0x88	; 136
     19e:	cc 38       	cpi	r28, 0x8C	; 140
     1a0:	d0 38       	cpi	r29, 0x80	; 128
     1a2:	d4 38       	cpi	r29, 0x84	; 132
     1a4:	d8 38       	cpi	r29, 0x88	; 136
     1a6:	00 39       	cpi	r16, 0x90	; 144
     1a8:	04 39       	cpi	r16, 0x94	; 148
     1aa:	2c 39       	cpi	r18, 0x9C	; 156
     1ac:	08 39       	cpi	r16, 0x98	; 152
     1ae:	30 39       	cpi	r19, 0x90	; 144
     1b0:	e4 38       	cpi	r30, 0x84	; 132
     1b2:	20 39       	cpi	r18, 0x90	; 144
     1b4:	4c 38       	cpi	r20, 0x8C	; 140
     1b6:	50 38       	cpi	r21, 0x80	; 128
     1b8:	54 38       	cpi	r21, 0x84	; 132
     1ba:	58 38       	cpi	r21, 0x88	; 136
     1bc:	5c 38       	cpi	r21, 0x8C	; 140
     1be:	60 38       	cpi	r22, 0x80	; 128
     1c0:	64 38       	cpi	r22, 0x84	; 132
     1c2:	68 38       	cpi	r22, 0x88	; 136
     1c4:	6c 38       	cpi	r22, 0x8C	; 140
     1c6:	70 38       	cpi	r23, 0x80	; 128
     1c8:	74 38       	cpi	r23, 0x84	; 132
     1ca:	78 38       	cpi	r23, 0x88	; 136
     1cc:	7c 38       	cpi	r23, 0x8C	; 140
     1ce:	80 38       	cpi	r24, 0x80	; 128
     1d0:	84 38       	cpi	r24, 0x84	; 132
     1d2:	88 38       	cpi	r24, 0x88	; 136
     1d4:	8c 38       	cpi	r24, 0x8C	; 140
     1d6:	90 38       	cpi	r25, 0x80	; 128
     1d8:	94 38       	cpi	r25, 0x84	; 132
     1da:	98 38       	cpi	r25, 0x88	; 136
     1dc:	9c 38       	cpi	r25, 0x8C	; 140
     1de:	a0 38       	cpi	r26, 0x80	; 128
     1e0:	a4 38       	cpi	r26, 0x84	; 132
     1e2:	a8 38       	cpi	r26, 0x88	; 136
     1e4:	ac 38       	cpi	r26, 0x8C	; 140
     1e6:	b0 38       	cpi	r27, 0x80	; 128
     1e8:	30 39       	cpi	r19, 0x90	; 144
     1ea:	30 39       	cpi	r19, 0x90	; 144
     1ec:	30 39       	cpi	r19, 0x90	; 144
     1ee:	30 39       	cpi	r19, 0x90	; 144
     1f0:	14 39       	cpi	r17, 0x94	; 148
     1f2:	30 39       	cpi	r19, 0x90	; 144
     1f4:	30 39       	cpi	r19, 0x90	; 144
     1f6:	30 39       	cpi	r19, 0x90	; 144
     1f8:	30 39       	cpi	r19, 0x90	; 144
     1fa:	30 39       	cpi	r19, 0x90	; 144
     1fc:	30 39       	cpi	r19, 0x90	; 144
     1fe:	30 39       	cpi	r19, 0x90	; 144
     200:	30 39       	cpi	r19, 0x90	; 144
     202:	30 39       	cpi	r19, 0x90	; 144
     204:	30 39       	cpi	r19, 0x90	; 144
     206:	30 39       	cpi	r19, 0x90	; 144
     208:	30 39       	cpi	r19, 0x90	; 144
     20a:	30 39       	cpi	r19, 0x90	; 144
     20c:	30 39       	cpi	r19, 0x90	; 144
     20e:	30 39       	cpi	r19, 0x90	; 144
     210:	30 39       	cpi	r19, 0x90	; 144
     212:	30 39       	cpi	r19, 0x90	; 144
     214:	30 39       	cpi	r19, 0x90	; 144
     216:	30 39       	cpi	r19, 0x90	; 144
     218:	30 39       	cpi	r19, 0x90	; 144
     21a:	30 39       	cpi	r19, 0x90	; 144
     21c:	30 39       	cpi	r19, 0x90	; 144
     21e:	30 39       	cpi	r19, 0x90	; 144
     220:	30 39       	cpi	r19, 0x90	; 144
     222:	30 39       	cpi	r19, 0x90	; 144
     224:	30 39       	cpi	r19, 0x90	; 144
     226:	30 39       	cpi	r19, 0x90	; 144
     228:	30 39       	cpi	r19, 0x90	; 144
     22a:	24 39       	cpi	r18, 0x94	; 148

0000022c <__trampolines_end>:
     22c:	4e 41       	sbci	r20, 0x1E	; 30
     22e:	4e 49       	Address 0x0000022e is out of bounds.
.word	0xffff	; ????

0000022f <pstr_inity>:
     22f:	49 4e 49 54 59                                      INITY

00000234 <pstr_inf>:
     234:	49 4e 46                                            INF

00000237 <pwr_m10>:
     237:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     247:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000024f <pwr_p10>:
     24f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     25f:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000267 <strfmonths>:
     267:	4a 61 6e 75 61 72 79 20 46 65 62 72 75 61 72 79     January February
     277:	20 4d 61 72 63 68 20 41 70 72 69 6c 20 4d 61 79      March April May
     287:	20 4a 75 6e 65 20 4a 75 6c 79 20 41 75 67 75 73      June July Augus
     297:	74 20 53 65 70 74 65 6d 62 65 72 20 4f 63 74 6f     t September Octo
     2a7:	62 65 72 20 4e 6f 76 65 6d 62 65 72 20 44 65 63     ber November Dec
     2b7:	65 6d 62 65 72 20 00                                ember .

000002be <strfwkdays>:
     2be:	53 75 6e 64 61 79 20 4d 6f 6e 64 61 79 20 54 75     Sunday Monday Tu
     2ce:	65 73 64 61 79 20 57 65 64 6e 65 73 64 61 79 20     esday Wednesday 
     2de:	54 68 75 72 73 64 61 79 20 46 72 69 64 61 79 20     Thursday Friday 
     2ee:	53 61 74 75 72 64 61 79 20 00                       Saturday .

000002f8 <ascdays>:
     2f8:	53 75 6e 4d 6f 6e 54 75 65 57 65 64 54 68 75 46     SunMonTueWedThuF
     308:	72 69 53 61 74 00                                   riSat.

0000030e <ascmonths>:
     30e:	4a 61 6e 46 65 62 4d 61 72 41 70 72 4d 61 79 4a     JanFebMarAprMayJ
     31e:	75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f     unJulAugSepOctNo
     32e:	76 44 65 63 00 00                                   vDec..

00000334 <__ctors_start>:
     334:	09 28       	or	r0, r9
     336:	fb 28       	or	r15, r11

00000338 <__ctors_end>:
     338:	10 28       	or	r1, r0
     33a:	02 29       	or	r16, r2

0000033c <__dtors_end>:
     33c:	11 24       	eor	r1, r1
     33e:	1f be       	out	0x3f, r1	; 63
     340:	cf ef       	ldi	r28, 0xFF	; 255
     342:	cd bf       	out	0x3d, r28	; 61
     344:	df e7       	ldi	r29, 0x7F	; 127
     346:	de bf       	out	0x3e, r29	; 62

00000348 <__do_copy_data>:
     348:	15 e4       	ldi	r17, 0x45	; 69
     34a:	a0 e0       	ldi	r26, 0x00	; 0
     34c:	b0 e4       	ldi	r27, 0x40	; 64
     34e:	e6 ea       	ldi	r30, 0xA6	; 166
     350:	f4 ea       	ldi	r31, 0xA4	; 164
     352:	00 e0       	ldi	r16, 0x00	; 0
     354:	0b bf       	out	0x3b, r16	; 59
     356:	02 c0       	rjmp	.+4      	; 0x35c <__do_copy_data+0x14>
     358:	07 90       	elpm	r0, Z+
     35a:	0d 92       	st	X+, r0
     35c:	a2 35       	cpi	r26, 0x52	; 82
     35e:	b1 07       	cpc	r27, r17
     360:	d9 f7       	brne	.-10     	; 0x358 <__do_copy_data+0x10>

00000362 <__do_clear_bss>:
     362:	29 e4       	ldi	r18, 0x49	; 73
     364:	a2 e5       	ldi	r26, 0x52	; 82
     366:	b5 e4       	ldi	r27, 0x45	; 69
     368:	01 c0       	rjmp	.+2      	; 0x36c <.do_clear_bss_start>

0000036a <.do_clear_bss_loop>:
     36a:	1d 92       	st	X+, r1

0000036c <.do_clear_bss_start>:
     36c:	a9 36       	cpi	r26, 0x69	; 105
     36e:	b2 07       	cpc	r27, r18
     370:	e1 f7       	brne	.-8      	; 0x36a <.do_clear_bss_loop>

00000372 <__do_global_ctors>:
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	cc e9       	ldi	r28, 0x9C	; 156
     376:	d1 e0       	ldi	r29, 0x01	; 1
     378:	04 c0       	rjmp	.+8      	; 0x382 <__do_global_ctors+0x10>
     37a:	21 97       	sbiw	r28, 0x01	; 1
     37c:	fe 01       	movw	r30, r28
     37e:	0e 94 be 4b 	call	0x977c	; 0x977c <__tablejump2__>
     382:	ca 39       	cpi	r28, 0x9A	; 154
     384:	d1 07       	cpc	r29, r17
     386:	c9 f7       	brne	.-14     	; 0x37a <__do_global_ctors+0x8>
     388:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <main>
     38c:	0c 94 46 52 	jmp	0xa48c	; 0xa48c <__do_global_dtors>

00000390 <__bad_interrupt>:
     390:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000394 <is_leap_year>:
     394:	9c 01       	movw	r18, r24
     396:	23 70       	andi	r18, 0x03	; 3
     398:	33 27       	eor	r19, r19
     39a:	23 2b       	or	r18, r19
     39c:	59 f4       	brne	.+22     	; 0x3b4 <is_leap_year+0x20>
     39e:	64 e6       	ldi	r22, 0x64	; 100
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     3a6:	89 2b       	or	r24, r25
     3a8:	39 f4       	brne	.+14     	; 0x3b8 <is_leap_year+0x24>
     3aa:	63 70       	andi	r22, 0x03	; 3
     3ac:	77 27       	eor	r23, r23
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	67 2b       	or	r22, r23
     3b2:	19 f0       	breq	.+6      	; 0x3ba <is_leap_year+0x26>
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	08 95       	ret
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	08 95       	ret

000003bc <localtime>:
     3bc:	65 e5       	ldi	r22, 0x55	; 85
     3be:	79 e4       	ldi	r23, 0x49	; 73
     3c0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <localtime_r>
     3c4:	85 e5       	ldi	r24, 0x55	; 85
     3c6:	99 e4       	ldi	r25, 0x49	; 73
     3c8:	08 95       	ret

000003ca <localtime_r>:
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	00 d0       	rcall	.+0      	; 0x3dc <localtime_r+0x12>
     3dc:	00 d0       	rcall	.+0      	; 0x3de <localtime_r+0x14>
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	6c 01       	movw	r12, r24
     3e4:	7b 01       	movw	r14, r22
     3e6:	e0 91 65 49 	lds	r30, 0x4965	; 0x804965 <__dst_ptr>
     3ea:	f0 91 66 49 	lds	r31, 0x4966	; 0x804966 <__dst_ptr+0x1>
     3ee:	30 97       	sbiw	r30, 0x00	; 0
     3f0:	29 f0       	breq	.+10     	; 0x3fc <localtime_r+0x32>
     3f2:	61 e6       	ldi	r22, 0x61	; 97
     3f4:	79 e4       	ldi	r23, 0x49	; 73
     3f6:	09 95       	icall
     3f8:	8c 01       	movw	r16, r24
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	0f ef       	ldi	r16, 0xFF	; 255
     3fe:	1f ef       	ldi	r17, 0xFF	; 255
     400:	f6 01       	movw	r30, r12
     402:	40 81       	ld	r20, Z
     404:	51 81       	ldd	r21, Z+1	; 0x01
     406:	62 81       	ldd	r22, Z+2	; 0x02
     408:	73 81       	ldd	r23, Z+3	; 0x03
     40a:	80 91 61 49 	lds	r24, 0x4961	; 0x804961 <__utc_offset>
     40e:	90 91 62 49 	lds	r25, 0x4962	; 0x804962 <__utc_offset+0x1>
     412:	a0 91 63 49 	lds	r26, 0x4963	; 0x804963 <__utc_offset+0x2>
     416:	b0 91 64 49 	lds	r27, 0x4964	; 0x804964 <__utc_offset+0x3>
     41a:	84 0f       	add	r24, r20
     41c:	95 1f       	adc	r25, r21
     41e:	a6 1f       	adc	r26, r22
     420:	b7 1f       	adc	r27, r23
     422:	10 16       	cp	r1, r16
     424:	11 06       	cpc	r1, r17
     426:	4c f4       	brge	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     428:	a8 01       	movw	r20, r16
     42a:	01 2e       	mov	r0, r17
     42c:	00 0c       	add	r0, r0
     42e:	66 0b       	sbc	r22, r22
     430:	77 0b       	sbc	r23, r23
     432:	84 0f       	add	r24, r20
     434:	95 1f       	adc	r25, r21
     436:	a6 1f       	adc	r26, r22
     438:	b7 1f       	adc	r27, r23
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	9a 83       	std	Y+2, r25	; 0x02
     43e:	ab 83       	std	Y+3, r26	; 0x03
     440:	bc 83       	std	Y+4, r27	; 0x04
     442:	b7 01       	movw	r22, r14
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	0e 94 6d 06 	call	0xcda	; 0xcda <gmtime_r>
     44c:	f7 01       	movw	r30, r14
     44e:	02 87       	std	Z+10, r16	; 0x0a
     450:	13 87       	std	Z+11, r17	; 0x0b
     452:	24 96       	adiw	r28, 0x04	; 4
     454:	cd bf       	out	0x3d, r28	; 61
     456:	de bf       	out	0x3e, r29	; 62
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	08 95       	ret

0000046a <month_length>:
     46a:	62 30       	cpi	r22, 0x02	; 2
     46c:	21 f4       	brne	.+8      	; 0x476 <month_length+0xc>
     46e:	0e 94 ca 01 	call	0x394	; 0x394 <is_leap_year>
     472:	84 5e       	subi	r24, 0xE4	; 228
     474:	08 95       	ret
     476:	68 30       	cpi	r22, 0x08	; 8
     478:	08 f0       	brcs	.+2      	; 0x47c <month_length+0x12>
     47a:	6f 5f       	subi	r22, 0xFF	; 255
     47c:	61 70       	andi	r22, 0x01	; 1
     47e:	8e e1       	ldi	r24, 0x1E	; 30
     480:	86 0f       	add	r24, r22
     482:	08 95       	ret

00000484 <set_system_time>:
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	60 93 51 49 	sts	0x4951, r22	; 0x804951 <__system_time>
     48c:	70 93 52 49 	sts	0x4952, r23	; 0x804952 <__system_time+0x1>
     490:	80 93 53 49 	sts	0x4953, r24	; 0x804953 <__system_time+0x2>
     494:	90 93 54 49 	sts	0x4954, r25	; 0x804954 <__system_time+0x3>
     498:	0f be       	out	0x3f, r0	; 63
     49a:	08 95       	ret

0000049c <pgm_copystring>:
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	0f 93       	push	r16
     4a4:	6b 01       	movw	r12, r22
     4a6:	e8 2e       	mov	r14, r24
     4a8:	7c 2d       	mov	r23, r12
     4aa:	6d 2d       	mov	r22, r13
     4ac:	5e 2d       	mov	r21, r14
     4ae:	ae 2d       	mov	r26, r14
     4b0:	c6 01       	movw	r24, r12
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	a1 1d       	adc	r26, r1
     4b6:	44 23       	and	r20, r20
     4b8:	51 f0       	breq	.+20     	; 0x4ce <pgm_copystring+0x32>
     4ba:	6c 01       	movw	r12, r24
     4bc:	ea 2e       	mov	r14, r26
     4be:	e7 2f       	mov	r30, r23
     4c0:	f6 2f       	mov	r31, r22
     4c2:	0e 94 33 52 	call	0xa466	; 0xa466 <__xload_1>
     4c6:	60 32       	cpi	r22, 0x20	; 32
     4c8:	79 f7       	brne	.-34     	; 0x4a8 <pgm_copystring+0xc>
     4ca:	41 50       	subi	r20, 0x01	; 1
     4cc:	ed cf       	rjmp	.-38     	; 0x4a8 <pgm_copystring+0xc>
     4ce:	f6 01       	movw	r30, r12
     4d0:	0e 94 33 52 	call	0xa466	; 0xa466 <__xload_1>
     4d4:	6c 01       	movw	r12, r24
     4d6:	ea 2e       	mov	r14, r26
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	60 32       	cpi	r22, 0x20	; 32
     4dc:	39 f4       	brne	.+14     	; 0x4ec <pgm_copystring+0x50>
     4de:	f9 01       	movw	r30, r18
     4e0:	10 82       	st	Z, r1
     4e2:	0f 91       	pop	r16
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	08 95       	ret
     4ec:	80 17       	cp	r24, r16
     4ee:	b9 f3       	breq	.-18     	; 0x4de <pgm_copystring+0x42>
     4f0:	2f 5f       	subi	r18, 0xFF	; 255
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	f9 01       	movw	r30, r18
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	60 83       	st	Z, r22
     4fa:	8f 5f       	subi	r24, 0xFF	; 255
     4fc:	f6 01       	movw	r30, r12
     4fe:	5e 2d       	mov	r21, r14
     500:	0e 94 33 52 	call	0xa466	; 0xa466 <__xload_1>
     504:	9f ef       	ldi	r25, 0xFF	; 255
     506:	c9 1a       	sub	r12, r25
     508:	d9 0a       	sbc	r13, r25
     50a:	e9 0a       	sbc	r14, r25
     50c:	e6 cf       	rjmp	.-52     	; 0x4da <pgm_copystring+0x3e>

0000050e <strftime>:
     50e:	2f 92       	push	r2
     510:	3f 92       	push	r3
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	a2 97       	sbiw	r28, 0x22	; 34
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	2c 01       	movw	r4, r24
     53e:	69 a3       	std	Y+33, r22	; 0x21
     540:	7a a3       	std	Y+34, r23	; 0x22
     542:	4a 01       	movw	r8, r20
     544:	79 01       	movw	r14, r18
     546:	61 2c       	mov	r6, r1
     548:	71 2c       	mov	r7, r1
     54a:	9e 01       	movw	r18, r28
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	69 01       	movw	r12, r18
     552:	84 e6       	ldi	r24, 0x64	; 100
     554:	28 2e       	mov	r2, r24
     556:	31 2c       	mov	r3, r1
     558:	94 ef       	ldi	r25, 0xF4	; 244
     55a:	a9 2e       	mov	r10, r25
     55c:	94 e4       	ldi	r25, 0x44	; 68
     55e:	b9 2e       	mov	r11, r25
     560:	29 a1       	ldd	r18, Y+33	; 0x21
     562:	3a a1       	ldd	r19, Y+34	; 0x22
     564:	62 16       	cp	r6, r18
     566:	73 06       	cpc	r7, r19
     568:	08 f0       	brcs	.+2      	; 0x56c <strftime+0x5e>
     56a:	cd c2       	rjmp	.+1434   	; 0xb06 <strftime+0x5f8>
     56c:	d4 01       	movw	r26, r8
     56e:	8c 91       	ld	r24, X
     570:	85 32       	cpi	r24, 0x25	; 37
     572:	09 f0       	breq	.+2      	; 0x576 <strftime+0x68>
     574:	bc c2       	rjmp	.+1400   	; 0xaee <strftime+0x5e0>
     576:	11 96       	adiw	r26, 0x01	; 1
     578:	1c 91       	ld	r17, X
     57a:	15 34       	cpi	r17, 0x45	; 69
     57c:	31 f0       	breq	.+12     	; 0x58a <strftime+0x7c>
     57e:	1f 34       	cpi	r17, 0x4F	; 79
     580:	21 f0       	breq	.+8      	; 0x58a <strftime+0x7c>
     582:	b2 e0       	ldi	r27, 0x02	; 2
     584:	8b 0e       	add	r8, r27
     586:	91 1c       	adc	r9, r1
     588:	06 c0       	rjmp	.+12     	; 0x596 <strftime+0x88>
     58a:	f4 01       	movw	r30, r8
     58c:	12 81       	ldd	r17, Z+2	; 0x02
     58e:	94 01       	movw	r18, r8
     590:	2d 5f       	subi	r18, 0xFD	; 253
     592:	3f 4f       	sbci	r19, 0xFF	; 255
     594:	49 01       	movw	r8, r18
     596:	19 35       	cpi	r17, 0x59	; 89
     598:	09 f4       	brne	.+2      	; 0x59c <strftime+0x8e>
     59a:	32 c2       	rjmp	.+1124   	; 0xa00 <strftime+0x4f2>
     59c:	0c f0       	brlt	.+2      	; 0x5a0 <strftime+0x92>
     59e:	60 c0       	rjmp	.+192    	; 0x660 <strftime+0x152>
     5a0:	19 34       	cpi	r17, 0x49	; 73
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <strftime+0x98>
     5a4:	3f c1       	rjmp	.+638    	; 0x824 <strftime+0x316>
     5a6:	44 f5       	brge	.+80     	; 0x5f8 <strftime+0xea>
     5a8:	13 34       	cpi	r17, 0x43	; 67
     5aa:	09 f4       	brne	.+2      	; 0x5ae <strftime+0xa0>
     5ac:	e7 c0       	rjmp	.+462    	; 0x77c <strftime+0x26e>
     5ae:	54 f4       	brge	.+20     	; 0x5c4 <strftime+0xb6>
     5b0:	11 34       	cpi	r17, 0x41	; 65
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <strftime+0xa8>
     5b4:	be c0       	rjmp	.+380    	; 0x732 <strftime+0x224>
     5b6:	0c f0       	brlt	.+2      	; 0x5ba <strftime+0xac>
     5b8:	ca c0       	rjmp	.+404    	; 0x74e <strftime+0x240>
     5ba:	15 32       	cpi	r17, 0x25	; 37
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <strftime+0xb2>
     5be:	74 c2       	rjmp	.+1256   	; 0xaa8 <strftime+0x59a>
     5c0:	19 83       	std	Y+1, r17	; 0x01
     5c2:	75 c2       	rjmp	.+1258   	; 0xaae <strftime+0x5a0>
     5c4:	16 34       	cpi	r17, 0x46	; 70
     5c6:	09 f4       	brne	.+2      	; 0x5ca <strftime+0xbc>
     5c8:	ea c0       	rjmp	.+468    	; 0x79e <strftime+0x290>
     5ca:	64 f4       	brge	.+24     	; 0x5e4 <strftime+0xd6>
     5cc:	14 34       	cpi	r17, 0x44	; 68
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <strftime+0xc4>
     5d0:	6b c2       	rjmp	.+1238   	; 0xaa8 <strftime+0x59a>
     5d2:	f7 01       	movw	r30, r14
     5d4:	86 81       	ldd	r24, Z+6	; 0x06
     5d6:	97 81       	ldd	r25, Z+7	; 0x07
     5d8:	b1 01       	movw	r22, r2
     5da:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	e7 c1       	rjmp	.+974    	; 0x9b2 <strftime+0x4a4>
     5e4:	17 34       	cpi	r17, 0x47	; 71
     5e6:	09 f4       	brne	.+2      	; 0x5ea <strftime+0xdc>
     5e8:	f8 c0       	rjmp	.+496    	; 0x7da <strftime+0x2cc>
     5ea:	18 34       	cpi	r17, 0x48	; 72
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <strftime+0xe2>
     5ee:	5c c2       	rjmp	.+1208   	; 0xaa8 <strftime+0x59a>
     5f0:	d7 01       	movw	r26, r14
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	8c 91       	ld	r24, X
     5f6:	30 c1       	rjmp	.+608    	; 0x858 <strftime+0x34a>
     5f8:	14 35       	cpi	r17, 0x54	; 84
     5fa:	09 f4       	brne	.+2      	; 0x5fe <strftime+0xf0>
     5fc:	89 c1       	rjmp	.+786    	; 0x910 <strftime+0x402>
     5fe:	64 f4       	brge	.+24     	; 0x618 <strftime+0x10a>
     600:	12 35       	cpi	r17, 0x52	; 82
     602:	09 f4       	brne	.+2      	; 0x606 <strftime+0xf8>
     604:	6e c1       	rjmp	.+732    	; 0x8e2 <strftime+0x3d4>
     606:	0c f0       	brlt	.+2      	; 0x60a <strftime+0xfc>
     608:	25 c1       	rjmp	.+586    	; 0x854 <strftime+0x346>
     60a:	1d 34       	cpi	r17, 0x4D	; 77
     60c:	09 f0       	breq	.+2      	; 0x610 <strftime+0x102>
     60e:	4c c2       	rjmp	.+1176   	; 0xaa8 <strftime+0x59a>
     610:	d7 01       	movw	r26, r14
     612:	11 96       	adiw	r26, 0x01	; 1
     614:	8c 91       	ld	r24, X
     616:	20 c1       	rjmp	.+576    	; 0x858 <strftime+0x34a>
     618:	16 35       	cpi	r17, 0x56	; 86
     61a:	09 f4       	brne	.+2      	; 0x61e <strftime+0x110>
     61c:	a5 c1       	rjmp	.+842    	; 0x968 <strftime+0x45a>
     61e:	0c f4       	brge	.+2      	; 0x622 <strftime+0x114>
     620:	a1 c1       	rjmp	.+834    	; 0x964 <strftime+0x456>
     622:	17 35       	cpi	r17, 0x57	; 87
     624:	09 f4       	brne	.+2      	; 0x628 <strftime+0x11a>
     626:	b4 c1       	rjmp	.+872    	; 0x990 <strftime+0x482>
     628:	18 35       	cpi	r17, 0x58	; 88
     62a:	09 f0       	breq	.+2      	; 0x62e <strftime+0x120>
     62c:	3d c2       	rjmp	.+1146   	; 0xaa8 <strftime+0x59a>
     62e:	f7 01       	movw	r30, r14
     630:	80 81       	ld	r24, Z
     632:	28 2f       	mov	r18, r24
     634:	08 2e       	mov	r0, r24
     636:	00 0c       	add	r0, r0
     638:	33 0b       	sbc	r19, r19
     63a:	3f 93       	push	r19
     63c:	8f 93       	push	r24
     63e:	81 81       	ldd	r24, Z+1	; 0x01
     640:	28 2f       	mov	r18, r24
     642:	08 2e       	mov	r0, r24
     644:	00 0c       	add	r0, r0
     646:	33 0b       	sbc	r19, r19
     648:	3f 93       	push	r19
     64a:	8f 93       	push	r24
     64c:	82 81       	ldd	r24, Z+2	; 0x02
     64e:	28 2f       	mov	r18, r24
     650:	08 2e       	mov	r0, r24
     652:	00 0c       	add	r0, r0
     654:	33 0b       	sbc	r19, r19
     656:	3f 93       	push	r19
     658:	8f 93       	push	r24
     65a:	89 e3       	ldi	r24, 0x39	; 57
     65c:	95 e4       	ldi	r25, 0x45	; 69
     65e:	c0 c1       	rjmp	.+896    	; 0x9e0 <strftime+0x4d2>
     660:	1d 36       	cpi	r17, 0x6D	; 109
     662:	09 f4       	brne	.+2      	; 0x666 <strftime+0x158>
     664:	f0 c0       	rjmp	.+480    	; 0x846 <strftime+0x338>
     666:	ac f5       	brge	.+106    	; 0x6d2 <strftime+0x1c4>
     668:	14 36       	cpi	r17, 0x64	; 100
     66a:	09 f4       	brne	.+2      	; 0x66e <strftime+0x160>
     66c:	94 c0       	rjmp	.+296    	; 0x796 <strftime+0x288>
     66e:	74 f4       	brge	.+28     	; 0x68c <strftime+0x17e>
     670:	12 36       	cpi	r17, 0x62	; 98
     672:	09 f4       	brne	.+2      	; 0x676 <strftime+0x168>
     674:	66 c0       	rjmp	.+204    	; 0x742 <strftime+0x234>
     676:	0c f0       	brlt	.+2      	; 0x67a <strftime+0x16c>
     678:	75 c0       	rjmp	.+234    	; 0x764 <strftime+0x256>
     67a:	11 36       	cpi	r17, 0x61	; 97
     67c:	09 f0       	breq	.+2      	; 0x680 <strftime+0x172>
     67e:	14 c2       	rjmp	.+1064   	; 0xaa8 <strftime+0x59a>
     680:	03 e0       	ldi	r16, 0x03	; 3
     682:	96 01       	movw	r18, r12
     684:	d7 01       	movw	r26, r14
     686:	14 96       	adiw	r26, 0x04	; 4
     688:	4c 91       	ld	r20, X
     68a:	57 c0       	rjmp	.+174    	; 0x73a <strftime+0x22c>
     68c:	17 36       	cpi	r17, 0x67	; 103
     68e:	09 f4       	brne	.+2      	; 0x692 <strftime+0x184>
     690:	a4 c0       	rjmp	.+328    	; 0x7da <strftime+0x2cc>
     692:	74 f4       	brge	.+28     	; 0x6b0 <strftime+0x1a2>
     694:	15 36       	cpi	r17, 0x65	; 101
     696:	09 f0       	breq	.+2      	; 0x69a <strftime+0x18c>
     698:	07 c2       	rjmp	.+1038   	; 0xaa8 <strftime+0x59a>
     69a:	f7 01       	movw	r30, r14
     69c:	83 81       	ldd	r24, Z+3	; 0x03
     69e:	28 2f       	mov	r18, r24
     6a0:	08 2e       	mov	r0, r24
     6a2:	00 0c       	add	r0, r0
     6a4:	33 0b       	sbc	r19, r19
     6a6:	3f 93       	push	r19
     6a8:	8f 93       	push	r24
     6aa:	89 ef       	ldi	r24, 0xF9	; 249
     6ac:	94 e4       	ldi	r25, 0x44	; 68
     6ae:	c8 c0       	rjmp	.+400    	; 0x840 <strftime+0x332>
     6b0:	18 36       	cpi	r17, 0x68	; 104
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <strftime+0x1a8>
     6b4:	46 c0       	rjmp	.+140    	; 0x742 <strftime+0x234>
     6b6:	1a 36       	cpi	r17, 0x6A	; 106
     6b8:	09 f0       	breq	.+2      	; 0x6bc <strftime+0x1ae>
     6ba:	f6 c1       	rjmp	.+1004   	; 0xaa8 <strftime+0x59a>
     6bc:	d7 01       	movw	r26, r14
     6be:	18 96       	adiw	r26, 0x08	; 8
     6c0:	8d 91       	ld	r24, X+
     6c2:	9c 91       	ld	r25, X
     6c4:	19 97       	sbiw	r26, 0x09	; 9
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	8f e0       	ldi	r24, 0x0F	; 15
     6ce:	95 e4       	ldi	r25, 0x45	; 69
     6d0:	b7 c0       	rjmp	.+366    	; 0x840 <strftime+0x332>
     6d2:	15 37       	cpi	r17, 0x75	; 117
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <strftime+0x1ca>
     6d6:	35 c1       	rjmp	.+618    	; 0x942 <strftime+0x434>
     6d8:	b4 f4       	brge	.+44     	; 0x706 <strftime+0x1f8>
     6da:	10 37       	cpi	r17, 0x70	; 112
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <strftime+0x1d2>
     6de:	c2 c0       	rjmp	.+388    	; 0x864 <strftime+0x356>
     6e0:	34 f4       	brge	.+12     	; 0x6ee <strftime+0x1e0>
     6e2:	1e 36       	cpi	r17, 0x6E	; 110
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <strftime+0x1da>
     6e6:	e0 c1       	rjmp	.+960    	; 0xaa8 <strftime+0x59a>
     6e8:	8a e0       	ldi	r24, 0x0A	; 10
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	e0 c1       	rjmp	.+960    	; 0xaae <strftime+0x5a0>
     6ee:	12 37       	cpi	r17, 0x72	; 114
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <strftime+0x1e6>
     6f2:	c6 c0       	rjmp	.+396    	; 0x880 <strftime+0x372>
     6f4:	14 37       	cpi	r17, 0x74	; 116
     6f6:	09 f0       	breq	.+2      	; 0x6fa <strftime+0x1ec>
     6f8:	d7 c1       	rjmp	.+942    	; 0xaa8 <strftime+0x59a>
     6fa:	65 e2       	ldi	r22, 0x25	; 37
     6fc:	75 e4       	ldi	r23, 0x45	; 69
     6fe:	c6 01       	movw	r24, r12
     700:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <strcpy>
     704:	d4 c1       	rjmp	.+936    	; 0xaae <strftime+0x5a0>
     706:	18 37       	cpi	r17, 0x78	; 120
     708:	09 f4       	brne	.+2      	; 0x70c <strftime+0x1fe>
     70a:	48 c1       	rjmp	.+656    	; 0x99c <strftime+0x48e>
     70c:	5c f4       	brge	.+22     	; 0x724 <strftime+0x216>
     70e:	17 37       	cpi	r17, 0x77	; 119
     710:	09 f0       	breq	.+2      	; 0x714 <strftime+0x206>
     712:	ca c1       	rjmp	.+916    	; 0xaa8 <strftime+0x59a>
     714:	f7 01       	movw	r30, r14
     716:	84 81       	ldd	r24, Z+4	; 0x04
     718:	28 2f       	mov	r18, r24
     71a:	08 2e       	mov	r0, r24
     71c:	00 0c       	add	r0, r0
     71e:	33 0b       	sbc	r19, r19
     720:	3f 93       	push	r19
     722:	74 c1       	rjmp	.+744    	; 0xa0c <strftime+0x4fe>
     724:	19 37       	cpi	r17, 0x79	; 121
     726:	09 f4       	brne	.+2      	; 0x72a <strftime+0x21c>
     728:	5e c1       	rjmp	.+700    	; 0x9e6 <strftime+0x4d8>
     72a:	1a 37       	cpi	r17, 0x7A	; 122
     72c:	09 f4       	brne	.+2      	; 0x730 <strftime+0x222>
     72e:	7e c1       	rjmp	.+764    	; 0xa2c <strftime+0x51e>
     730:	bb c1       	rjmp	.+886    	; 0xaa8 <strftime+0x59a>
     732:	0f ef       	ldi	r16, 0xFF	; 255
     734:	96 01       	movw	r18, r12
     736:	f7 01       	movw	r30, r14
     738:	44 81       	ldd	r20, Z+4	; 0x04
     73a:	6e eb       	ldi	r22, 0xBE	; 190
     73c:	72 e0       	ldi	r23, 0x02	; 2
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0d c0       	rjmp	.+26     	; 0x75c <strftime+0x24e>
     742:	03 e0       	ldi	r16, 0x03	; 3
     744:	96 01       	movw	r18, r12
     746:	d7 01       	movw	r26, r14
     748:	15 96       	adiw	r26, 0x05	; 5
     74a:	4c 91       	ld	r20, X
     74c:	04 c0       	rjmp	.+8      	; 0x756 <strftime+0x248>
     74e:	0f ef       	ldi	r16, 0xFF	; 255
     750:	96 01       	movw	r18, r12
     752:	f7 01       	movw	r30, r14
     754:	45 81       	ldd	r20, Z+5	; 0x05
     756:	67 e6       	ldi	r22, 0x67	; 103
     758:	72 e0       	ldi	r23, 0x02	; 2
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 4e 02 	call	0x49c	; 0x49c <pgm_copystring>
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	a7 c1       	rjmp	.+846    	; 0xab2 <strftime+0x5a4>
     764:	b6 01       	movw	r22, r12
     766:	c7 01       	movw	r24, r14
     768:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <asctime_r>
     76c:	f6 01       	movw	r30, r12
     76e:	cf 01       	movw	r24, r30
     770:	8c 19       	sub	r24, r12
     772:	9d 09       	sbc	r25, r13
     774:	21 91       	ld	r18, Z+
     776:	21 11       	cpse	r18, r1
     778:	fa cf       	rjmp	.-12     	; 0x76e <strftime+0x260>
     77a:	9b c1       	rjmp	.+822    	; 0xab2 <strftime+0x5a4>
     77c:	d7 01       	movw	r26, r14
     77e:	16 96       	adiw	r26, 0x06	; 6
     780:	8d 91       	ld	r24, X+
     782:	9c 91       	ld	r25, X
     784:	17 97       	sbiw	r26, 0x07	; 7
     786:	84 59       	subi	r24, 0x94	; 148
     788:	98 4f       	sbci	r25, 0xF8	; 248
     78a:	b1 01       	movw	r22, r2
     78c:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     790:	7f 93       	push	r23
     792:	6f 93       	push	r22
     794:	3b c0       	rjmp	.+118    	; 0x80c <strftime+0x2fe>
     796:	d7 01       	movw	r26, r14
     798:	13 96       	adiw	r26, 0x03	; 3
     79a:	8c 91       	ld	r24, X
     79c:	5d c0       	rjmp	.+186    	; 0x858 <strftime+0x34a>
     79e:	d7 01       	movw	r26, r14
     7a0:	13 96       	adiw	r26, 0x03	; 3
     7a2:	8c 91       	ld	r24, X
     7a4:	13 97       	sbiw	r26, 0x03	; 3
     7a6:	28 2f       	mov	r18, r24
     7a8:	08 2e       	mov	r0, r24
     7aa:	00 0c       	add	r0, r0
     7ac:	33 0b       	sbc	r19, r19
     7ae:	3f 93       	push	r19
     7b0:	8f 93       	push	r24
     7b2:	15 96       	adiw	r26, 0x05	; 5
     7b4:	8c 91       	ld	r24, X
     7b6:	15 97       	sbiw	r26, 0x05	; 5
     7b8:	08 2e       	mov	r0, r24
     7ba:	00 0c       	add	r0, r0
     7bc:	99 0b       	sbc	r25, r25
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	9f 93       	push	r25
     7c2:	8f 93       	push	r24
     7c4:	16 96       	adiw	r26, 0x06	; 6
     7c6:	8d 91       	ld	r24, X+
     7c8:	9c 91       	ld	r25, X
     7ca:	17 97       	sbiw	r26, 0x07	; 7
     7cc:	84 59       	subi	r24, 0x94	; 148
     7ce:	98 4f       	sbci	r25, 0xF8	; 248
     7d0:	9f 93       	push	r25
     7d2:	8f 93       	push	r24
     7d4:	8d ef       	ldi	r24, 0xFD	; 253
     7d6:	94 e4       	ldi	r25, 0x44	; 68
     7d8:	03 c1       	rjmp	.+518    	; 0x9e0 <strftime+0x4d2>
     7da:	d7 01       	movw	r26, r14
     7dc:	18 96       	adiw	r26, 0x08	; 8
     7de:	6d 91       	ld	r22, X+
     7e0:	7c 91       	ld	r23, X
     7e2:	19 97       	sbiw	r26, 0x09	; 9
     7e4:	16 96       	adiw	r26, 0x06	; 6
     7e6:	8d 91       	ld	r24, X+
     7e8:	9c 91       	ld	r25, X
     7ea:	17 97       	sbiw	r26, 0x07	; 7
     7ec:	ae 01       	movw	r20, r28
     7ee:	45 5e       	subi	r20, 0xE5	; 229
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	84 59       	subi	r24, 0x94	; 148
     7f4:	98 4f       	sbci	r25, 0xF8	; 248
     7f6:	0e 94 43 07 	call	0xe86	; 0xe86 <iso_week_date_r>
     7fa:	17 36       	cpi	r17, 0x67	; 103
     7fc:	51 f4       	brne	.+20     	; 0x812 <strftime+0x304>
     7fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     800:	9c 8d       	ldd	r25, Y+28	; 0x1c
     802:	b1 01       	movw	r22, r2
     804:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	e5 e0       	ldi	r30, 0x05	; 5
     80e:	f5 e4       	ldi	r31, 0x45	; 69
     810:	a6 c0       	rjmp	.+332    	; 0x95e <strftime+0x450>
     812:	8c 8d       	ldd	r24, Y+28	; 0x1c
     814:	8f 93       	push	r24
     816:	8b 8d       	ldd	r24, Y+27	; 0x1b
     818:	8f 93       	push	r24
     81a:	4a e0       	ldi	r20, 0x0A	; 10
     81c:	55 e4       	ldi	r21, 0x45	; 69
     81e:	5f 93       	push	r21
     820:	4f 93       	push	r20
     822:	f9 c0       	rjmp	.+498    	; 0xa16 <strftime+0x508>
     824:	f7 01       	movw	r30, r14
     826:	82 81       	ldd	r24, Z+2	; 0x02
     828:	6c e0       	ldi	r22, 0x0C	; 12
     82a:	0e 94 25 52 	call	0xa44a	; 0xa44a <__divmodqi4>
     82e:	99 23       	and	r25, r25
     830:	21 f0       	breq	.+8      	; 0x83a <strftime+0x32c>
     832:	89 2f       	mov	r24, r25
     834:	99 0f       	add	r25, r25
     836:	99 0b       	sbc	r25, r25
     838:	de c0       	rjmp	.+444    	; 0x9f6 <strftime+0x4e8>
     83a:	8c e0       	ldi	r24, 0x0C	; 12
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	db c0       	rjmp	.+438    	; 0x9f6 <strftime+0x4e8>
     840:	9f 93       	push	r25
     842:	8f 93       	push	r24
     844:	e8 c0       	rjmp	.+464    	; 0xa16 <strftime+0x508>
     846:	f7 01       	movw	r30, r14
     848:	85 81       	ldd	r24, Z+5	; 0x05
     84a:	08 2e       	mov	r0, r24
     84c:	00 0c       	add	r0, r0
     84e:	99 0b       	sbc	r25, r25
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	d1 c0       	rjmp	.+418    	; 0x9f6 <strftime+0x4e8>
     854:	d7 01       	movw	r26, r14
     856:	8c 91       	ld	r24, X
     858:	28 2f       	mov	r18, r24
     85a:	08 2e       	mov	r0, r24
     85c:	00 0c       	add	r0, r0
     85e:	33 0b       	sbc	r19, r19
     860:	3f 93       	push	r19
     862:	ca c0       	rjmp	.+404    	; 0x9f8 <strftime+0x4ea>
     864:	81 e4       	ldi	r24, 0x41	; 65
     866:	89 83       	std	Y+1, r24	; 0x01
     868:	f7 01       	movw	r30, r14
     86a:	82 81       	ldd	r24, Z+2	; 0x02
     86c:	8c 30       	cpi	r24, 0x0C	; 12
     86e:	14 f0       	brlt	.+4      	; 0x874 <strftime+0x366>
     870:	80 e5       	ldi	r24, 0x50	; 80
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	8d e4       	ldi	r24, 0x4D	; 77
     876:	8a 83       	std	Y+2, r24	; 0x02
     878:	1b 82       	std	Y+3, r1	; 0x03
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	19 c1       	rjmp	.+562    	; 0xab2 <strftime+0x5a4>
     880:	d7 01       	movw	r26, r14
     882:	12 96       	adiw	r26, 0x02	; 2
     884:	8c 91       	ld	r24, X
     886:	6c e0       	ldi	r22, 0x0C	; 12
     888:	0e 94 25 52 	call	0xa44a	; 0xa44a <__divmodqi4>
     88c:	99 23       	and	r25, r25
     88e:	21 f0       	breq	.+8      	; 0x898 <strftime+0x38a>
     890:	89 2f       	mov	r24, r25
     892:	99 0f       	add	r25, r25
     894:	99 0b       	sbc	r25, r25
     896:	02 c0       	rjmp	.+4      	; 0x89c <strftime+0x38e>
     898:	8c e0       	ldi	r24, 0x0C	; 12
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	f7 01       	movw	r30, r14
     89e:	20 81       	ld	r18, Z
     8a0:	42 2f       	mov	r20, r18
     8a2:	02 2e       	mov	r0, r18
     8a4:	00 0c       	add	r0, r0
     8a6:	55 0b       	sbc	r21, r21
     8a8:	5f 93       	push	r21
     8aa:	2f 93       	push	r18
     8ac:	21 81       	ldd	r18, Z+1	; 0x01
     8ae:	42 2f       	mov	r20, r18
     8b0:	02 2e       	mov	r0, r18
     8b2:	00 0c       	add	r0, r0
     8b4:	55 0b       	sbc	r21, r21
     8b6:	5f 93       	push	r21
     8b8:	2f 93       	push	r18
     8ba:	9f 93       	push	r25
     8bc:	8f 93       	push	r24
     8be:	24 e1       	ldi	r18, 0x14	; 20
     8c0:	35 e4       	ldi	r19, 0x45	; 69
     8c2:	3f 93       	push	r19
     8c4:	2f 93       	push	r18
     8c6:	df 92       	push	r13
     8c8:	cf 92       	push	r12
     8ca:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	f7 01       	movw	r30, r14
     8d4:	22 81       	ldd	r18, Z+2	; 0x02
     8d6:	2c 30       	cpi	r18, 0x0C	; 12
     8d8:	0c f4       	brge	.+2      	; 0x8dc <strftime+0x3ce>
     8da:	eb c0       	rjmp	.+470    	; 0xab2 <strftime+0x5a4>
     8dc:	20 e5       	ldi	r18, 0x50	; 80
     8de:	2b 87       	std	Y+11, r18	; 0x0b
     8e0:	e8 c0       	rjmp	.+464    	; 0xab2 <strftime+0x5a4>
     8e2:	d7 01       	movw	r26, r14
     8e4:	11 96       	adiw	r26, 0x01	; 1
     8e6:	8c 91       	ld	r24, X
     8e8:	11 97       	sbiw	r26, 0x01	; 1
     8ea:	28 2f       	mov	r18, r24
     8ec:	08 2e       	mov	r0, r24
     8ee:	00 0c       	add	r0, r0
     8f0:	33 0b       	sbc	r19, r19
     8f2:	3f 93       	push	r19
     8f4:	8f 93       	push	r24
     8f6:	12 96       	adiw	r26, 0x02	; 2
     8f8:	8c 91       	ld	r24, X
     8fa:	28 2f       	mov	r18, r24
     8fc:	08 2e       	mov	r0, r24
     8fe:	00 0c       	add	r0, r0
     900:	33 0b       	sbc	r19, r19
     902:	3f 93       	push	r19
     904:	8f 93       	push	r24
     906:	8c e2       	ldi	r24, 0x2C	; 44
     908:	95 e4       	ldi	r25, 0x45	; 69
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	c5 c0       	rjmp	.+394    	; 0xa9a <strftime+0x58c>
     910:	f7 01       	movw	r30, r14
     912:	80 81       	ld	r24, Z
     914:	28 2f       	mov	r18, r24
     916:	08 2e       	mov	r0, r24
     918:	00 0c       	add	r0, r0
     91a:	33 0b       	sbc	r19, r19
     91c:	3f 93       	push	r19
     91e:	8f 93       	push	r24
     920:	81 81       	ldd	r24, Z+1	; 0x01
     922:	28 2f       	mov	r18, r24
     924:	08 2e       	mov	r0, r24
     926:	00 0c       	add	r0, r0
     928:	33 0b       	sbc	r19, r19
     92a:	3f 93       	push	r19
     92c:	8f 93       	push	r24
     92e:	82 81       	ldd	r24, Z+2	; 0x02
     930:	28 2f       	mov	r18, r24
     932:	08 2e       	mov	r0, r24
     934:	00 0c       	add	r0, r0
     936:	33 0b       	sbc	r19, r19
     938:	3f 93       	push	r19
     93a:	8f 93       	push	r24
     93c:	87 e2       	ldi	r24, 0x27	; 39
     93e:	95 e4       	ldi	r25, 0x45	; 69
     940:	4f c0       	rjmp	.+158    	; 0x9e0 <strftime+0x4d2>
     942:	d7 01       	movw	r26, r14
     944:	14 96       	adiw	r26, 0x04	; 4
     946:	8c 91       	ld	r24, X
     948:	08 2e       	mov	r0, r24
     94a:	00 0c       	add	r0, r0
     94c:	99 0b       	sbc	r25, r25
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	11 f4       	brne	.+4      	; 0x956 <strftime+0x448>
     952:	87 e0       	ldi	r24, 0x07	; 7
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	e6 e3       	ldi	r30, 0x36	; 54
     95c:	f5 e4       	ldi	r31, 0x45	; 69
     95e:	ff 93       	push	r31
     960:	ef 93       	push	r30
     962:	59 c0       	rjmp	.+178    	; 0xa16 <strftime+0x508>
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	15 c0       	rjmp	.+42     	; 0x992 <strftime+0x484>
     968:	d7 01       	movw	r26, r14
     96a:	18 96       	adiw	r26, 0x08	; 8
     96c:	6d 91       	ld	r22, X+
     96e:	7c 91       	ld	r23, X
     970:	19 97       	sbiw	r26, 0x09	; 9
     972:	16 96       	adiw	r26, 0x06	; 6
     974:	8d 91       	ld	r24, X+
     976:	9c 91       	ld	r25, X
     978:	17 97       	sbiw	r26, 0x07	; 7
     97a:	ae 01       	movw	r20, r28
     97c:	45 5e       	subi	r20, 0xE5	; 229
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	84 59       	subi	r24, 0x94	; 148
     982:	98 4f       	sbci	r25, 0xF8	; 248
     984:	0e 94 43 07 	call	0xe86	; 0xe86 <iso_week_date_r>
     988:	8e 8d       	ldd	r24, Y+30	; 0x1e
     98a:	8f 93       	push	r24
     98c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     98e:	34 c0       	rjmp	.+104    	; 0x9f8 <strftime+0x4ea>
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	c7 01       	movw	r24, r14
     994:	0e 94 af 05 	call	0xb5e	; 0xb5e <week_of_year>
     998:	1f 92       	push	r1
     99a:	2e c0       	rjmp	.+92     	; 0x9f8 <strftime+0x4ea>
     99c:	d7 01       	movw	r26, r14
     99e:	16 96       	adiw	r26, 0x06	; 6
     9a0:	8d 91       	ld	r24, X+
     9a2:	9c 91       	ld	r25, X
     9a4:	17 97       	sbiw	r26, 0x07	; 7
     9a6:	b1 01       	movw	r22, r2
     9a8:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	f7 01       	movw	r30, r14
     9b2:	83 81       	ldd	r24, Z+3	; 0x03
     9b4:	28 2f       	mov	r18, r24
     9b6:	08 2e       	mov	r0, r24
     9b8:	00 0c       	add	r0, r0
     9ba:	33 0b       	sbc	r19, r19
     9bc:	3f 93       	push	r19
     9be:	8f 93       	push	r24
     9c0:	85 81       	ldd	r24, Z+5	; 0x05
     9c2:	08 2e       	mov	r0, r24
     9c4:	00 0c       	add	r0, r0
     9c6:	99 0b       	sbc	r25, r25
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	9f 93       	push	r25
     9cc:	8f 93       	push	r24
     9ce:	2a ee       	ldi	r18, 0xEA	; 234
     9d0:	34 e4       	ldi	r19, 0x44	; 68
     9d2:	3f 93       	push	r19
     9d4:	2f 93       	push	r18
     9d6:	df 92       	push	r13
     9d8:	cf 92       	push	r12
     9da:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
     9de:	61 c0       	rjmp	.+194    	; 0xaa2 <strftime+0x594>
     9e0:	9f 93       	push	r25
     9e2:	8f 93       	push	r24
     9e4:	f8 cf       	rjmp	.-16     	; 0x9d6 <strftime+0x4c8>
     9e6:	d7 01       	movw	r26, r14
     9e8:	16 96       	adiw	r26, 0x06	; 6
     9ea:	8d 91       	ld	r24, X+
     9ec:	9c 91       	ld	r25, X
     9ee:	17 97       	sbiw	r26, 0x07	; 7
     9f0:	b1 01       	movw	r22, r2
     9f2:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     9f6:	9f 93       	push	r25
     9f8:	8f 93       	push	r24
     9fa:	bf 92       	push	r11
     9fc:	af 92       	push	r10
     9fe:	0b c0       	rjmp	.+22     	; 0xa16 <strftime+0x508>
     a00:	f7 01       	movw	r30, r14
     a02:	86 81       	ldd	r24, Z+6	; 0x06
     a04:	97 81       	ldd	r25, Z+7	; 0x07
     a06:	84 59       	subi	r24, 0x94	; 148
     a08:	98 4f       	sbci	r25, 0xF8	; 248
     a0a:	9f 93       	push	r25
     a0c:	8f 93       	push	r24
     a0e:	2a eb       	ldi	r18, 0xBA	; 186
     a10:	34 e4       	ldi	r19, 0x44	; 68
     a12:	3f 93       	push	r19
     a14:	2f 93       	push	r18
     a16:	df 92       	push	r13
     a18:	cf 92       	push	r12
     a1a:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	43 c0       	rjmp	.+134    	; 0xab2 <strftime+0x5a4>
     a2c:	60 91 61 49 	lds	r22, 0x4961	; 0x804961 <__utc_offset>
     a30:	70 91 62 49 	lds	r23, 0x4962	; 0x804962 <__utc_offset+0x1>
     a34:	80 91 63 49 	lds	r24, 0x4963	; 0x804963 <__utc_offset+0x2>
     a38:	90 91 64 49 	lds	r25, 0x4964	; 0x804964 <__utc_offset+0x3>
     a3c:	2c e3       	ldi	r18, 0x3C	; 60
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
     a48:	89 01       	movw	r16, r18
     a4a:	9a 01       	movw	r18, r20
     a4c:	f8 01       	movw	r30, r16
     a4e:	d7 01       	movw	r26, r14
     a50:	1a 96       	adiw	r26, 0x0a	; 10
     a52:	8d 91       	ld	r24, X+
     a54:	9c 91       	ld	r25, X
     a56:	1b 97       	sbiw	r26, 0x0b	; 11
     a58:	6c e3       	ldi	r22, 0x3C	; 60
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     a60:	16 16       	cp	r1, r22
     a62:	17 06       	cpc	r1, r23
     a64:	1c f4       	brge	.+6      	; 0xa6c <strftime+0x55e>
     a66:	fb 01       	movw	r30, r22
     a68:	e0 0f       	add	r30, r16
     a6a:	f1 1f       	adc	r31, r17
     a6c:	cf 01       	movw	r24, r30
     a6e:	6c e3       	ldi	r22, 0x3C	; 60
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     a76:	97 ff       	sbrs	r25, 7
     a78:	03 c0       	rjmp	.+6      	; 0xa80 <strftime+0x572>
     a7a:	91 95       	neg	r25
     a7c:	81 95       	neg	r24
     a7e:	91 09       	sbc	r25, r1
     a80:	9f 93       	push	r25
     a82:	8f 93       	push	r24
     a84:	cf 01       	movw	r24, r30
     a86:	6c e3       	ldi	r22, 0x3C	; 60
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     a8e:	7f 93       	push	r23
     a90:	6f 93       	push	r22
     a92:	e8 e4       	ldi	r30, 0x48	; 72
     a94:	f5 e4       	ldi	r31, 0x45	; 69
     a96:	ff 93       	push	r31
     a98:	ef 93       	push	r30
     a9a:	df 92       	push	r13
     a9c:	cf 92       	push	r12
     a9e:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <strftime+0x5a4>
     aa8:	8f e3       	ldi	r24, 0x3F	; 63
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	1a 82       	std	Y+2, r1	; 0x02
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	93 01       	movw	r18, r6
     ab4:	28 0f       	add	r18, r24
     ab6:	39 1f       	adc	r19, r25
     ab8:	a9 a1       	ldd	r26, Y+33	; 0x21
     aba:	ba a1       	ldd	r27, Y+34	; 0x22
     abc:	2a 17       	cp	r18, r26
     abe:	3b 07       	cpc	r19, r27
     ac0:	98 f4       	brcc	.+38     	; 0xae8 <strftime+0x5da>
     ac2:	d2 01       	movw	r26, r4
     ac4:	f6 01       	movw	r30, r12
     ac6:	af 01       	movw	r20, r30
     ac8:	4c 19       	sub	r20, r12
     aca:	5d 09       	sbc	r21, r13
     acc:	48 17       	cp	r20, r24
     ace:	59 07       	cpc	r21, r25
     ad0:	1c f4       	brge	.+6      	; 0xad8 <strftime+0x5ca>
     ad2:	41 91       	ld	r20, Z+
     ad4:	4d 93       	st	X+, r20
     ad6:	f7 cf       	rjmp	.-18     	; 0xac6 <strftime+0x5b8>
     ad8:	97 ff       	sbrs	r25, 7
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <strftime+0x5d2>
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	48 0e       	add	r4, r24
     ae2:	59 1e       	adc	r5, r25
     ae4:	39 01       	movw	r6, r18
     ae6:	3c cd       	rjmp	.-1416   	; 0x560 <strftime+0x52>
     ae8:	f2 01       	movw	r30, r4
     aea:	10 82       	st	Z, r1
     aec:	0e c0       	rjmp	.+28     	; 0xb0a <strftime+0x5fc>
     aee:	d2 01       	movw	r26, r4
     af0:	8d 93       	st	X+, r24
     af2:	2d 01       	movw	r4, r26
     af4:	bf ef       	ldi	r27, 0xFF	; 255
     af6:	6b 1a       	sub	r6, r27
     af8:	7b 0a       	sbc	r7, r27
     afa:	88 23       	and	r24, r24
     afc:	31 f0       	breq	.+12     	; 0xb0a <strftime+0x5fc>
     afe:	ef ef       	ldi	r30, 0xFF	; 255
     b00:	8e 1a       	sub	r8, r30
     b02:	9e 0a       	sbc	r9, r30
     b04:	2d cd       	rjmp	.-1446   	; 0x560 <strftime+0x52>
     b06:	d2 01       	movw	r26, r4
     b08:	1c 92       	st	X, r1
     b0a:	c3 01       	movw	r24, r6
     b0c:	a2 96       	adiw	r28, 0x22	; 34
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	bf 90       	pop	r11
     b24:	af 90       	pop	r10
     b26:	9f 90       	pop	r9
     b28:	8f 90       	pop	r8
     b2a:	7f 90       	pop	r7
     b2c:	6f 90       	pop	r6
     b2e:	5f 90       	pop	r5
     b30:	4f 90       	pop	r4
     b32:	3f 90       	pop	r3
     b34:	2f 90       	pop	r2
     b36:	08 95       	ret

00000b38 <time>:
     b38:	fc 01       	movw	r30, r24
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	60 91 51 49 	lds	r22, 0x4951	; 0x804951 <__system_time>
     b42:	70 91 52 49 	lds	r23, 0x4952	; 0x804952 <__system_time+0x1>
     b46:	80 91 53 49 	lds	r24, 0x4953	; 0x804953 <__system_time+0x2>
     b4a:	90 91 54 49 	lds	r25, 0x4954	; 0x804954 <__system_time+0x3>
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	30 97       	sbiw	r30, 0x00	; 0
     b52:	21 f0       	breq	.+8      	; 0xb5c <time+0x24>
     b54:	60 83       	st	Z, r22
     b56:	71 83       	std	Z+1, r23	; 0x01
     b58:	82 83       	std	Z+2, r24	; 0x02
     b5a:	93 83       	std	Z+3, r25	; 0x03
     b5c:	08 95       	ret

00000b5e <week_of_year>:
     b5e:	fc 01       	movw	r30, r24
     b60:	20 85       	ldd	r18, Z+8	; 0x08
     b62:	31 85       	ldd	r19, Z+9	; 0x09
     b64:	c9 01       	movw	r24, r18
     b66:	07 96       	adiw	r24, 0x07	; 7
     b68:	44 81       	ldd	r20, Z+4	; 0x04
     b6a:	84 1b       	sub	r24, r20
     b6c:	91 09       	sbc	r25, r1
     b6e:	47 fd       	sbrc	r20, 7
     b70:	93 95       	inc	r25
     b72:	86 0f       	add	r24, r22
     b74:	91 1d       	adc	r25, r1
     b76:	e7 e0       	ldi	r30, 0x07	; 7
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	bf 01       	movw	r22, r30
     b7c:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     b80:	a9 01       	movw	r20, r18
     b82:	48 1b       	sub	r20, r24
     b84:	59 0b       	sbc	r21, r25
     b86:	ca 01       	movw	r24, r20
     b88:	57 fd       	sbrc	r21, 7
     b8a:	06 c0       	rjmp	.+12     	; 0xb98 <week_of_year+0x3a>
     b8c:	bf 01       	movw	r22, r30
     b8e:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	86 0f       	add	r24, r22
     b96:	08 95       	ret
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret

00000b9c <system_tick>:
     b9c:	8f 93       	push	r24
     b9e:	8f b7       	in	r24, 0x3f	; 63
     ba0:	8f 93       	push	r24
     ba2:	f8 94       	cli
     ba4:	80 91 51 49 	lds	r24, 0x4951	; 0x804951 <__system_time>
     ba8:	8f 5f       	subi	r24, 0xFF	; 255
     baa:	80 93 51 49 	sts	0x4951, r24	; 0x804951 <__system_time>
     bae:	80 91 52 49 	lds	r24, 0x4952	; 0x804952 <__system_time+0x1>
     bb2:	8f 4f       	sbci	r24, 0xFF	; 255
     bb4:	80 93 52 49 	sts	0x4952, r24	; 0x804952 <__system_time+0x1>
     bb8:	80 91 53 49 	lds	r24, 0x4953	; 0x804953 <__system_time+0x2>
     bbc:	8f 4f       	sbci	r24, 0xFF	; 255
     bbe:	80 93 53 49 	sts	0x4953, r24	; 0x804953 <__system_time+0x2>
     bc2:	80 91 54 49 	lds	r24, 0x4954	; 0x804954 <__system_time+0x3>
     bc6:	8f 4f       	sbci	r24, 0xFF	; 255
     bc8:	80 93 54 49 	sts	0x4954, r24	; 0x804954 <__system_time+0x3>
     bcc:	8f 91       	pop	r24
     bce:	8f bf       	out	0x3f, r24	; 63
     bd0:	8f 91       	pop	r24
     bd2:	08 95       	ret

00000bd4 <asctime_r>:
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	8c 01       	movw	r16, r24
     be6:	eb 01       	movw	r28, r22
     be8:	fc 01       	movw	r30, r24
     bea:	84 81       	ldd	r24, Z+4	; 0x04
     bec:	b8 2f       	mov	r27, r24
     bee:	bb 0f       	add	r27, r27
     bf0:	b8 0f       	add	r27, r24
     bf2:	85 81       	ldd	r24, Z+5	; 0x05
     bf4:	78 2f       	mov	r23, r24
     bf6:	77 0f       	add	r23, r23
     bf8:	78 0f       	add	r23, r24
     bfa:	9e 01       	movw	r18, r28
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	8b 2f       	mov	r24, r27
     c00:	84 0f       	add	r24, r20
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	a0 e0       	ldi	r26, 0x00	; 0
     c06:	88 50       	subi	r24, 0x08	; 8
     c08:	9d 4f       	sbci	r25, 0xFD	; 253
     c0a:	af 4f       	sbci	r26, 0xFF	; 255
     c0c:	fc 01       	movw	r30, r24
     c0e:	5a 2f       	mov	r21, r26
     c10:	0e 94 33 52 	call	0xa466	; 0xa466 <__xload_1>
     c14:	f9 01       	movw	r30, r18
     c16:	61 93       	st	Z+, r22
     c18:	9f 01       	movw	r18, r30
     c1a:	87 2f       	mov	r24, r23
     c1c:	84 0f       	add	r24, r20
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	82 5f       	subi	r24, 0xF2	; 242
     c24:	9c 4f       	sbci	r25, 0xFC	; 252
     c26:	af 4f       	sbci	r26, 0xFF	; 255
     c28:	fc 01       	movw	r30, r24
     c2a:	5a 2f       	mov	r21, r26
     c2c:	0e 94 33 52 	call	0xa466	; 0xa466 <__xload_1>
     c30:	f9 01       	movw	r30, r18
     c32:	63 83       	std	Z+3, r22	; 0x03
     c34:	4f 5f       	subi	r20, 0xFF	; 255
     c36:	43 30       	cpi	r20, 0x03	; 3
     c38:	11 f7       	brne	.-60     	; 0xbfe <asctime_r+0x2a>
     c3a:	80 e2       	ldi	r24, 0x20	; 32
     c3c:	8f 83       	std	Y+7, r24	; 0x07
     c3e:	8b 83       	std	Y+3, r24	; 0x03
     c40:	be 01       	movw	r22, r28
     c42:	68 5f       	subi	r22, 0xF8	; 248
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	f8 01       	movw	r30, r16
     c48:	83 81       	ldd	r24, Z+3	; 0x03
     c4a:	40 e2       	ldi	r20, 0x20	; 32
     c4c:	08 2e       	mov	r0, r24
     c4e:	00 0c       	add	r0, r0
     c50:	99 0b       	sbc	r25, r25
     c52:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__print_lz>
     c56:	be 01       	movw	r22, r28
     c58:	65 5f       	subi	r22, 0xF5	; 245
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	f8 01       	movw	r30, r16
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	4a e3       	ldi	r20, 0x3A	; 58
     c62:	08 2e       	mov	r0, r24
     c64:	00 0c       	add	r0, r0
     c66:	99 0b       	sbc	r25, r25
     c68:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__print_lz>
     c6c:	be 01       	movw	r22, r28
     c6e:	62 5f       	subi	r22, 0xF2	; 242
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	f8 01       	movw	r30, r16
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	4a e3       	ldi	r20, 0x3A	; 58
     c78:	08 2e       	mov	r0, r24
     c7a:	00 0c       	add	r0, r0
     c7c:	99 0b       	sbc	r25, r25
     c7e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__print_lz>
     c82:	be 01       	movw	r22, r28
     c84:	6f 5e       	subi	r22, 0xEF	; 239
     c86:	7f 4f       	sbci	r23, 0xFF	; 255
     c88:	f8 01       	movw	r30, r16
     c8a:	80 81       	ld	r24, Z
     c8c:	40 e2       	ldi	r20, 0x20	; 32
     c8e:	08 2e       	mov	r0, r24
     c90:	00 0c       	add	r0, r0
     c92:	99 0b       	sbc	r25, r25
     c94:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__print_lz>
     c98:	f8 01       	movw	r30, r16
     c9a:	86 81       	ldd	r24, Z+6	; 0x06
     c9c:	97 81       	ldd	r25, Z+7	; 0x07
     c9e:	64 e6       	ldi	r22, 0x64	; 100
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	84 59       	subi	r24, 0x94	; 148
     ca4:	98 4f       	sbci	r25, 0xF8	; 248
     ca6:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     caa:	6b 01       	movw	r12, r22
     cac:	7c 01       	movw	r14, r24
     cae:	be 01       	movw	r22, r28
     cb0:	6c 5e       	subi	r22, 0xEC	; 236
     cb2:	7f 4f       	sbci	r23, 0xFF	; 255
     cb4:	40 e2       	ldi	r20, 0x20	; 32
     cb6:	c6 01       	movw	r24, r12
     cb8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__print_lz>
     cbc:	be 01       	movw	r22, r28
     cbe:	6a 5e       	subi	r22, 0xEA	; 234
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	c7 01       	movw	r24, r14
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	cf 90       	pop	r12
     cd6:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__print_lz>

00000cda <gmtime_r>:
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	28 97       	sbiw	r28, 0x08	; 8
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	8b 01       	movw	r16, r22
     cf6:	fc 01       	movw	r30, r24
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	20 e8       	ldi	r18, 0x80	; 128
     d02:	31 e5       	ldi	r19, 0x51	; 81
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
     d0c:	69 01       	movw	r12, r18
     d0e:	7a 01       	movw	r14, r20
     d10:	2c e3       	ldi	r18, 0x3C	; 60
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
     d1c:	29 83       	std	Y+1, r18	; 0x01
     d1e:	3a 83       	std	Y+2, r19	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
     d22:	5c 83       	std	Y+4, r21	; 0x04
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	ab 81       	ldd	r26, Y+3	; 0x03
     d2a:	bc 81       	ldd	r27, Y+4	; 0x04
     d2c:	f8 01       	movw	r30, r16
     d2e:	60 83       	st	Z, r22
     d30:	6c e3       	ldi	r22, 0x3C	; 60
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	f8 01       	movw	r30, r16
     d3e:	a1 83       	std	Z+1, r26	; 0x01
     d40:	82 83       	std	Z+2, r24	; 0x02
     d42:	c6 01       	movw	r24, r12
     d44:	06 96       	adiw	r24, 0x06	; 6
     d46:	67 e0       	ldi	r22, 0x07	; 7
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	0e 94 55 4b 	call	0x96aa	; 0x96aa <__udivmodhi4>
     d4e:	84 83       	std	Z+4, r24	; 0x04
     d50:	2d ea       	ldi	r18, 0xAD	; 173
     d52:	3e e8       	ldi	r19, 0x8E	; 142
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	c7 01       	movw	r24, r14
     d5a:	b6 01       	movw	r22, r12
     d5c:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
     d60:	29 83       	std	Y+1, r18	; 0x01
     d62:	3a 83       	std	Y+2, r19	; 0x02
     d64:	6d 83       	std	Y+5, r22	; 0x05
     d66:	7e 83       	std	Y+6, r23	; 0x06
     d68:	8f 83       	std	Y+7, r24	; 0x07
     d6a:	98 87       	std	Y+8, r25	; 0x08
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	24 e6       	ldi	r18, 0x64	; 100
     d72:	28 9f       	mul	r18, r24
     d74:	60 01       	movw	r12, r0
     d76:	29 9f       	mul	r18, r25
     d78:	d0 0c       	add	r13, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	6d 81       	ldd	r22, Y+5	; 0x05
     d7e:	7e 81       	ldd	r23, Y+6	; 0x06
     d80:	8f 81       	ldd	r24, Y+7	; 0x07
     d82:	98 85       	ldd	r25, Y+8	; 0x08
     d84:	25 eb       	ldi	r18, 0xB5	; 181
     d86:	35 e0       	ldi	r19, 0x05	; 5
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
     d90:	29 83       	std	Y+1, r18	; 0x01
     d92:	3a 83       	std	Y+2, r19	; 0x02
     d94:	6d 83       	std	Y+5, r22	; 0x05
     d96:	7e 83       	std	Y+6, r23	; 0x06
     d98:	e9 80       	ldd	r14, Y+1	; 0x01
     d9a:	fa 80       	ldd	r15, Y+2	; 0x02
     d9c:	ee 0c       	add	r14, r14
     d9e:	ff 1c       	adc	r15, r15
     da0:	ee 0c       	add	r14, r14
     da2:	ff 1c       	adc	r15, r15
     da4:	ec 0c       	add	r14, r12
     da6:	fd 1c       	adc	r15, r13
     da8:	8d 81       	ldd	r24, Y+5	; 0x05
     daa:	9e 81       	ldd	r25, Y+6	; 0x06
     dac:	f5 e6       	ldi	r31, 0x65	; 101
     dae:	ef 16       	cp	r14, r31
     db0:	f1 04       	cpc	r15, r1
     db2:	10 f0       	brcs	.+4      	; 0xdb8 <gmtime_r+0xde>
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <gmtime_r+0xe6>
     db8:	24 e6       	ldi	r18, 0x64	; 100
     dba:	e2 16       	cp	r14, r18
     dbc:	f1 04       	cpc	r15, r1
     dbe:	19 f0       	breq	.+6      	; 0xdc6 <gmtime_r+0xec>
     dc0:	21 e0       	ldi	r18, 0x01	; 1
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <gmtime_r+0xf0>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	a9 01       	movw	r20, r18
     dcc:	44 59       	subi	r20, 0x94	; 148
     dce:	5e 4f       	sbci	r21, 0xFE	; 254
     dd0:	48 17       	cp	r20, r24
     dd2:	59 07       	cpc	r21, r25
     dd4:	68 f4       	brcc	.+26     	; 0xdf0 <gmtime_r+0x116>
     dd6:	6d e6       	ldi	r22, 0x6D	; 109
     dd8:	71 e0       	ldi	r23, 0x01	; 1
     dda:	82 1b       	sub	r24, r18
     ddc:	93 0b       	sbc	r25, r19
     dde:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	e8 0e       	add	r14, r24
     de8:	f9 1e       	adc	r15, r25
     dea:	cd 01       	movw	r24, r26
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	44 e6       	ldi	r20, 0x64	; 100
     df2:	e4 0e       	add	r14, r20
     df4:	f1 1c       	adc	r15, r1
     df6:	f8 01       	movw	r30, r16
     df8:	e6 82       	std	Z+6, r14	; 0x06
     dfa:	f7 82       	std	Z+7, r15	; 0x07
     dfc:	80 87       	std	Z+8, r24	; 0x08
     dfe:	91 87       	std	Z+9, r25	; 0x09
     e00:	25 5c       	subi	r18, 0xC5	; 197
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	48 f4       	brcc	.+18     	; 0xe1c <gmtime_r+0x142>
     e0a:	6f e1       	ldi	r22, 0x1F	; 31
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	f8 01       	movw	r30, r16
     e18:	85 83       	std	Z+5, r24	; 0x05
     e1a:	22 c0       	rjmp	.+68     	; 0xe60 <gmtime_r+0x186>
     e1c:	69 e9       	ldi	r22, 0x99	; 153
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	82 1b       	sub	r24, r18
     e22:	93 0b       	sbc	r25, r19
     e24:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	f8 2e       	mov	r15, r24
     e2e:	ff 0c       	add	r15, r15
     e30:	ff 0c       	add	r15, r15
     e32:	f8 0e       	add	r15, r24
     e34:	6d e3       	ldi	r22, 0x3D	; 61
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	e8 2e       	mov	r14, r24
     e44:	ee 0c       	add	r14, r14
     e46:	6f e1       	ldi	r22, 0x1F	; 31
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	22 e0       	ldi	r18, 0x02	; 2
     e56:	28 0f       	add	r18, r24
     e58:	f2 0e       	add	r15, r18
     e5a:	fe 0c       	add	r15, r14
     e5c:	f8 01       	movw	r30, r16
     e5e:	f5 82       	std	Z+5, r15	; 0x05
     e60:	a3 83       	std	Z+3, r26	; 0x03
     e62:	f8 01       	movw	r30, r16
     e64:	12 86       	std	Z+10, r1	; 0x0a
     e66:	13 86       	std	Z+11, r1	; 0x0b
     e68:	83 81       	ldd	r24, Z+3	; 0x03
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	83 83       	std	Z+3, r24	; 0x03
     e6e:	28 96       	adiw	r28, 0x08	; 8
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	08 95       	ret

00000e86 <iso_week_date_r>:
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	8c 01       	movw	r16, r24
     e98:	7b 01       	movw	r14, r22
     e9a:	ea 01       	movw	r28, r20
     e9c:	88 83       	st	Y, r24
     e9e:	99 83       	std	Y+1, r25	; 0x01
     ea0:	0e 94 ca 01 	call	0x394	; 0x394 <is_leap_year>
     ea4:	28 2f       	mov	r18, r24
     ea6:	a8 01       	movw	r20, r16
     ea8:	40 5d       	subi	r20, 0xD0	; 208
     eaa:	57 40       	sbci	r21, 0x07	; 7
     eac:	6d e6       	ldi	r22, 0x6D	; 109
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	46 9f       	mul	r20, r22
     eb2:	c0 01       	movw	r24, r0
     eb4:	47 9f       	mul	r20, r23
     eb6:	90 0d       	add	r25, r0
     eb8:	56 9f       	mul	r21, r22
     eba:	90 0d       	add	r25, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	8e 0d       	add	r24, r14
     ec0:	9f 1d       	adc	r25, r15
     ec2:	41 15       	cp	r20, r1
     ec4:	51 05       	cpc	r21, r1
     ec6:	79 f0       	breq	.+30     	; 0xee6 <iso_week_date_r+0x60>
     ec8:	ba 01       	movw	r22, r20
     eca:	76 95       	lsr	r23
     ecc:	67 95       	ror	r22
     ece:	76 95       	lsr	r23
     ed0:	67 95       	ror	r22
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	86 0f       	add	r24, r22
     ed8:	97 1f       	adc	r25, r23
     eda:	82 1b       	sub	r24, r18
     edc:	91 09       	sbc	r25, r1
     ede:	45 36       	cpi	r20, 0x65	; 101
     ee0:	51 05       	cpc	r21, r1
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <iso_week_date_r+0x60>
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	06 96       	adiw	r24, 0x06	; 6
     ee8:	67 e0       	ldi	r22, 0x07	; 7
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	0e 94 55 4b 	call	0x96aa	; 0x96aa <__udivmodhi4>
     ef0:	6c 01       	movw	r12, r24
     ef2:	89 2b       	or	r24, r25
     ef4:	19 f4       	brne	.+6      	; 0xefc <iso_week_date_r+0x76>
     ef6:	87 e0       	ldi	r24, 0x07	; 7
     ef8:	c8 2e       	mov	r12, r24
     efa:	d1 2c       	mov	r13, r1
     efc:	cc 82       	std	Y+4, r12	; 0x04
     efe:	dd 82       	std	Y+5, r13	; 0x05
     f00:	c7 01       	movw	r24, r14
     f02:	0b 96       	adiw	r24, 0x0b	; 11
     f04:	8c 19       	sub	r24, r12
     f06:	9d 09       	sbc	r25, r13
     f08:	67 e0       	ldi	r22, 0x07	; 7
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     f10:	65 33       	cpi	r22, 0x35	; 53
     f12:	71 05       	cpc	r23, r1
     f14:	b1 f4       	brne	.+44     	; 0xf42 <iso_week_date_r+0xbc>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	c8 1a       	sub	r12, r24
     f1a:	d1 08       	sbc	r13, r1
     f1c:	ec 18       	sub	r14, r12
     f1e:	fd 08       	sbc	r15, r13
     f20:	82 2f       	mov	r24, r18
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	84 59       	subi	r24, 0x94	; 148
     f26:	9e 4f       	sbci	r25, 0xFE	; 254
     f28:	23 e0       	ldi	r18, 0x03	; 3
     f2a:	e2 0e       	add	r14, r18
     f2c:	f1 1c       	adc	r15, r1
     f2e:	8e 15       	cp	r24, r14
     f30:	9f 05       	cpc	r25, r15
     f32:	3c f4       	brge	.+14     	; 0xf42 <iso_week_date_r+0xbc>
     f34:	88 81       	ld	r24, Y
     f36:	99 81       	ldd	r25, Y+1	; 0x01
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	88 83       	st	Y, r24
     f3c:	99 83       	std	Y+1, r25	; 0x01
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	6a 83       	std	Y+2, r22	; 0x02
     f44:	7b 83       	std	Y+3, r23	; 0x03
     f46:	67 2b       	or	r22, r23
     f48:	79 f4       	brne	.+30     	; 0xf68 <iso_week_date_r+0xe2>
     f4a:	01 50       	subi	r16, 0x01	; 1
     f4c:	11 09       	sbc	r17, r1
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 ca 01 	call	0x394	; 0x394 <is_leap_year>
     f54:	68 2f       	mov	r22, r24
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	64 59       	subi	r22, 0x94	; 148
     f5a:	7e 4f       	sbci	r23, 0xFE	; 254
     f5c:	ae 01       	movw	r20, r28
     f5e:	c8 01       	movw	r24, r16
     f60:	0e 94 43 07 	call	0xe86	; 0xe86 <iso_week_date_r>
     f64:	cc 82       	std	Y+4, r12	; 0x04
     f66:	dd 82       	std	Y+5, r13	; 0x05
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <__print_lz>:
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	eb 01       	movw	r28, r22
     f82:	14 2f       	mov	r17, r20
     f84:	6a e0       	ldi	r22, 0x0A	; 10
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
     f8c:	60 5d       	subi	r22, 0xD0	; 208
     f8e:	68 83       	st	Y, r22
     f90:	80 5d       	subi	r24, 0xD0	; 208
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	1a 83       	std	Y+2, r17	; 0x02
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	08 95       	ret

00000f9e <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     f9e:	0e 94 ae 2a 	call	0x555c	; 0x555c <system_init>
     fa2:	08 95       	ret

00000fa4 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     fb0:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     fb4:	80 ff       	sbrs	r24, 0
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     fbe:	8f 91       	pop	r24
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0
     fc6:	1f 90       	pop	r1
     fc8:	18 95       	reti

00000fca <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     fd2:	80 91 a7 45 	lds	r24, 0x45A7	; 0x8045a7 <_ZZ9serial_RxhE4buff>
     fd6:	90 91 a8 45 	lds	r25, 0x45A8	; 0x8045a8 <_ZZ9serial_RxhE4buff+0x1>
     fda:	89 2b       	or	r24, r25
     fdc:	31 f4       	brne	.+12     	; 0xfea <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
     fde:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <nextEmptySBRxBuffer>
     fe2:	80 93 a7 45 	sts	0x45A7, r24	; 0x8045a7 <_ZZ9serial_RxhE4buff>
     fe6:	90 93 a8 45 	sts	0x45A8, r25	; 0x8045a8 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
     fea:	c0 91 a7 45 	lds	r28, 0x45A7	; 0x8045a7 <_ZZ9serial_RxhE4buff>
     fee:	d0 91 a8 45 	lds	r29, 0x45A8	; 0x8045a8 <_ZZ9serial_RxhE4buff+0x1>
     ff2:	20 97       	sbiw	r28, 0x00	; 0
     ff4:	09 f4       	brne	.+2      	; 0xff8 <_Z9serial_Rxh+0x2e>
     ff6:	73 c1       	rjmp	.+742    	; 0x12de <_Z9serial_Rxh+0x314>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
     ff8:	81 2f       	mov	r24, r17
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <toupper>
    1000:	ac 01       	movw	r20, r24
    1002:	28 2f       	mov	r18, r24

		if(ignoreCount)
    1004:	90 91 a6 45 	lds	r25, 0x45A6	; 0x8045a6 <_ZZ9serial_RxhE11ignoreCount>
    1008:	99 23       	and	r25, r25
    100a:	21 f0       	breq	.+8      	; 0x1014 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
    100c:	91 50       	subi	r25, 0x01	; 1
    100e:	90 93 a6 45 	sts	0x45A6, r25	; 0x8045a6 <_ZZ9serial_RxhE11ignoreCount>
    1012:	65 c1       	rjmp	.+714    	; 0x12de <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
    1014:	4b 31       	cpi	r20, 0x1B	; 27
    1016:	21 f4       	brne	.+8      	; 0x1020 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	80 93 a6 45 	sts	0x45A6, r24	; 0x8045a6 <_ZZ9serial_RxhE11ignoreCount>
    101e:	5f c1       	rjmp	.+702    	; 0x12de <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
    1020:	4d 30       	cpi	r20, 0x0D	; 13
    1022:	09 f0       	breq	.+2      	; 0x1026 <_Z9serial_Rxh+0x5c>
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <_Z9serial_Rxh+0xda>
		{
			if(receiving_msg)
    1026:	80 91 72 45 	lds	r24, 0x4572	; 0x804572 <_ZZ9serial_RxhE13receiving_msg>
    102a:	88 23       	and	r24, r24
    102c:	31 f1       	breq	.+76     	; 0x107a <_Z9serial_Rxh+0xb0>
			{
				if(charIndex > 0)
    102e:	e0 91 a5 45 	lds	r30, 0x45A5	; 0x8045a5 <_ZZ9serial_RxhE9charIndex>
    1032:	ee 23       	and	r30, r30
    1034:	f9 f0       	breq	.+62     	; 0x1074 <_Z9serial_Rxh+0xaa>
				{
					buff->type = SERIALBUS_MSG_QUERY;
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
    103a:	80 91 70 45 	lds	r24, 0x4570	; 0x804570 <_ZZ9serial_RxhE6msg_ID>
    103e:	90 91 71 45 	lds	r25, 0x4571	; 0x804571 <_ZZ9serial_RxhE6msg_ID+0x1>
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
    1046:	80 91 6f 45 	lds	r24, 0x456F	; 0x80456f <_ZZ9serial_RxhE11field_index>
    104a:	88 23       	and	r24, r24
    104c:	79 f0       	breq	.+30     	; 0x106c <_Z9serial_Rxh+0xa2>
					{
						buff->fields[field_index - 1][field_len] = 0;
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	40 91 6e 45 	lds	r20, 0x456E	; 0x80456e <_ZZ9serial_RxhE9field_len>
    1056:	54 e1       	ldi	r21, 0x14	; 20
    1058:	58 9f       	mul	r21, r24
    105a:	90 01       	movw	r18, r0
    105c:	59 9f       	mul	r21, r25
    105e:	30 0d       	add	r19, r0
    1060:	11 24       	eor	r1, r1
    1062:	c2 0f       	add	r28, r18
    1064:	d3 1f       	adc	r29, r19
    1066:	c4 0f       	add	r28, r20
    1068:	d1 1d       	adc	r29, r1
    106a:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	ed 58       	subi	r30, 0x8D	; 141
    1070:	fa 4b       	sbci	r31, 0xBA	; 186
    1072:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
    1074:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <sb_send_NewLine>
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <_Z9serial_Rxh+0xb8>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	9f ef       	ldi	r25, 0xFF	; 255
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
    1082:	10 92 a5 45 	sts	0x45A5, r1	; 0x8045a5 <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
    1086:	10 92 6e 45 	sts	0x456E, r1	; 0x80456e <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
    108a:	10 92 70 45 	sts	0x4570, r1	; 0x804570 <_ZZ9serial_RxhE6msg_ID>
    108e:	10 92 71 45 	sts	0x4571, r1	; 0x804571 <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
    1092:	10 92 6f 45 	sts	0x456F, r1	; 0x80456f <_ZZ9serial_RxhE11field_index>
			buff = NULL;
    1096:	10 92 a7 45 	sts	0x45A7, r1	; 0x8045a7 <_ZZ9serial_RxhE4buff>
    109a:	10 92 a8 45 	sts	0x45A8, r1	; 0x8045a8 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = false;
    109e:	10 92 72 45 	sts	0x4572, r1	; 0x804572 <_ZZ9serial_RxhE13receiving_msg>
    10a2:	1d c1       	rjmp	.+570    	; 0x12de <_Z9serial_Rxh+0x314>
		}
		else if(rx_char)
    10a4:	44 23       	and	r20, r20
    10a6:	09 f4       	brne	.+2      	; 0x10aa <_Z9serial_Rxh+0xe0>
    10a8:	1a c1       	rjmp	.+564    	; 0x12de <_Z9serial_Rxh+0x314>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    10aa:	e0 91 a5 45 	lds	r30, 0x45A5	; 0x8045a5 <_ZZ9serial_RxhE9charIndex>
    10ae:	8e 2f       	mov	r24, r30
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	dc 01       	movw	r26, r24
    10b4:	ad 58       	subi	r26, 0x8D	; 141
    10b6:	ba 4b       	sbci	r27, 0xBA	; 186
    10b8:	4c 93       	st	X, r20

			if(charIndex)
    10ba:	ee 23       	and	r30, r30
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <_Z9serial_Rxh+0xf6>
    10be:	d7 c0       	rjmp	.+430    	; 0x126e <_Z9serial_Rxh+0x2a4>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
    10c0:	4f 37       	cpi	r20, 0x7F	; 127
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <_Z9serial_Rxh+0xfc>
    10c4:	5f c0       	rjmp	.+190    	; 0x1184 <_Z9serial_Rxh+0x1ba>
				{
					charIndex--;
    10c6:	e1 50       	subi	r30, 0x01	; 1
    10c8:	e0 93 a5 45 	sts	0x45A5, r30	; 0x8045a5 <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
    10cc:	80 91 6f 45 	lds	r24, 0x456F	; 0x80456f <_ZZ9serial_RxhE11field_index>
    10d0:	81 11       	cpse	r24, r1
    10d2:	13 c0       	rjmp	.+38     	; 0x10fa <_Z9serial_Rxh+0x130>
					{
						msg_ID -= textBuff[charIndex];
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	ed 58       	subi	r30, 0x8D	; 141
    10d8:	fa 4b       	sbci	r31, 0xBA	; 186
    10da:	30 81       	ld	r19, Z
    10dc:	80 91 70 45 	lds	r24, 0x4570	; 0x804570 <_ZZ9serial_RxhE6msg_ID>
    10e0:	90 91 71 45 	lds	r25, 0x4571	; 0x804571 <_ZZ9serial_RxhE6msg_ID+0x1>
    10e4:	83 1b       	sub	r24, r19
    10e6:	91 09       	sbc	r25, r1
						msg_ID /= 10;
    10e8:	6a e0       	ldi	r22, 0x0A	; 10
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
    10f0:	60 93 70 45 	sts	0x4570, r22	; 0x804570 <_ZZ9serial_RxhE6msg_ID>
    10f4:	70 93 71 45 	sts	0x4571, r23	; 0x804571 <_ZZ9serial_RxhE6msg_ID+0x1>
    10f8:	39 c0       	rjmp	.+114    	; 0x116c <_Z9serial_Rxh+0x1a2>
					}
					else if(field_len)
    10fa:	90 91 6e 45 	lds	r25, 0x456E	; 0x80456e <_ZZ9serial_RxhE9field_len>
    10fe:	99 23       	and	r25, r25
    1100:	91 f0       	breq	.+36     	; 0x1126 <_Z9serial_Rxh+0x15c>
					{
						field_len--;
    1102:	3f ef       	ldi	r19, 0xFF	; 255
    1104:	39 0f       	add	r19, r25
    1106:	30 93 6e 45 	sts	0x456E, r19	; 0x80456e <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	64 e1       	ldi	r22, 0x14	; 20
    1110:	68 9f       	mul	r22, r24
    1112:	a0 01       	movw	r20, r0
    1114:	69 9f       	mul	r22, r25
    1116:	50 0d       	add	r21, r0
    1118:	11 24       	eor	r1, r1
    111a:	c4 0f       	add	r28, r20
    111c:	d5 1f       	adc	r29, r21
    111e:	c3 0f       	add	r28, r19
    1120:	d1 1d       	adc	r29, r1
    1122:	1b 82       	std	Y+3, r1	; 0x03
    1124:	23 c0       	rjmp	.+70     	; 0x116c <_Z9serial_Rxh+0x1a2>
					}
					else if(textBuff[charIndex] == ' ')
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	ed 58       	subi	r30, 0x8D	; 141
    112a:	fa 4b       	sbci	r31, 0xBA	; 186
    112c:	90 81       	ld	r25, Z
    112e:	90 32       	cpi	r25, 0x20	; 32
    1130:	a1 f4       	brne	.+40     	; 0x115a <_Z9serial_Rxh+0x190>
					{
						field_index--;
    1132:	81 50       	subi	r24, 0x01	; 1
    1134:	80 93 6f 45 	sts	0x456F, r24	; 0x80456f <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
    1138:	34 e1       	ldi	r19, 0x14	; 20
    113a:	83 9f       	mul	r24, r19
    113c:	c0 01       	movw	r24, r0
    113e:	11 24       	eor	r1, r1
    1140:	03 96       	adiw	r24, 0x03	; 3
    1142:	c8 0f       	add	r28, r24
    1144:	d9 1f       	adc	r29, r25
    1146:	fe 01       	movw	r30, r28
    1148:	01 90       	ld	r0, Z+
    114a:	00 20       	and	r0, r0
    114c:	e9 f7       	brne	.-6      	; 0x1148 <_Z9serial_Rxh+0x17e>
    114e:	31 97       	sbiw	r30, 0x01	; 1
    1150:	ec 1b       	sub	r30, r28
    1152:	fd 0b       	sbc	r31, r29
    1154:	e0 93 6e 45 	sts	0x456E, r30	; 0x80456e <_ZZ9serial_RxhE9field_len>
    1158:	09 c0       	rjmp	.+18     	; 0x116c <_Z9serial_Rxh+0x1a2>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
    115a:	94 e1       	ldi	r25, 0x14	; 20
    115c:	89 9f       	mul	r24, r25
    115e:	c0 0d       	add	r28, r0
    1160:	d1 1d       	adc	r29, r1
    1162:	11 24       	eor	r1, r1
    1164:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	80 93 6f 45 	sts	0x456F, r24	; 0x80456f <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
    116c:	80 91 a5 45 	lds	r24, 0x45A5	; 0x8045a5 <_ZZ9serial_RxhE9charIndex>
    1170:	e8 2f       	mov	r30, r24
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	ed 58       	subi	r30, 0x8D	; 141
    1176:	fa 4b       	sbci	r31, 0xBA	; 186
    1178:	10 82       	st	Z, r1

					if(charIndex == 0)
    117a:	81 11       	cpse	r24, r1
    117c:	ab c0       	rjmp	.+342    	; 0x12d4 <_Z9serial_Rxh+0x30a>
					{
						receiving_msg = false;
    117e:	10 92 72 45 	sts	0x4572, r1	; 0x804572 <_ZZ9serial_RxhE13receiving_msg>
    1182:	a8 c0       	rjmp	.+336    	; 0x12d4 <_Z9serial_Rxh+0x30a>
					}
				}
				else
				{
					if(rx_char == ' ')
    1184:	40 32       	cpi	r20, 0x20	; 32
    1186:	81 f5       	brne	.+96     	; 0x11e8 <_Z9serial_Rxh+0x21e>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
    1188:	fc 01       	movw	r30, r24
    118a:	ee 58       	subi	r30, 0x8E	; 142
    118c:	fa 4b       	sbci	r31, 0xBA	; 186
    118e:	30 81       	ld	r19, Z
    1190:	30 32       	cpi	r19, 0x20	; 32
    1192:	09 f4       	brne	.+2      	; 0x1196 <_Z9serial_Rxh+0x1cc>
    1194:	98 c0       	rjmp	.+304    	; 0x12c6 <_Z9serial_Rxh+0x2fc>
    1196:	30 91 6f 45 	lds	r19, 0x456F	; 0x80456f <_ZZ9serial_RxhE11field_index>
    119a:	43 2f       	mov	r20, r19
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	ba 01       	movw	r22, r20
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	63 30       	cpi	r22, 0x03	; 3
    11a6:	71 05       	cpc	r23, r1
    11a8:	0c f0       	brlt	.+2      	; 0x11ac <_Z9serial_Rxh+0x1e2>
    11aa:	8f c0       	rjmp	.+286    	; 0x12ca <_Z9serial_Rxh+0x300>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
    11ac:	33 23       	and	r19, r19
    11ae:	79 f0       	breq	.+30     	; 0x11ce <_Z9serial_Rxh+0x204>
							{
								buff->fields[field_index - 1][field_len] = '\0';
    11b0:	41 50       	subi	r20, 0x01	; 1
    11b2:	51 09       	sbc	r21, r1
    11b4:	e0 91 6e 45 	lds	r30, 0x456E	; 0x80456e <_ZZ9serial_RxhE9field_len>
    11b8:	f4 e1       	ldi	r31, 0x14	; 20
    11ba:	f4 9f       	mul	r31, r20
    11bc:	b0 01       	movw	r22, r0
    11be:	f5 9f       	mul	r31, r21
    11c0:	70 0d       	add	r23, r0
    11c2:	11 24       	eor	r1, r1
    11c4:	c6 0f       	add	r28, r22
    11c6:	d7 1f       	adc	r29, r23
    11c8:	ce 0f       	add	r28, r30
    11ca:	d1 1d       	adc	r29, r1
    11cc:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
    11ce:	3f 5f       	subi	r19, 0xFF	; 255
    11d0:	30 93 6f 45 	sts	0x456F, r19	; 0x80456f <_ZZ9serial_RxhE11field_index>
							field_len = 0;
    11d4:	10 92 6e 45 	sts	0x456E, r1	; 0x80456e <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	81 33       	cpi	r24, 0x31	; 49
    11dc:	91 05       	cpc	r25, r1
    11de:	0c f0       	brlt	.+2      	; 0x11e2 <_Z9serial_Rxh+0x218>
    11e0:	81 e3       	ldi	r24, 0x31	; 49
    11e2:	80 93 a5 45 	sts	0x45A5, r24	; 0x8045a5 <_ZZ9serial_RxhE9charIndex>
    11e6:	76 c0       	rjmp	.+236    	; 0x12d4 <_Z9serial_Rxh+0x30a>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
    11e8:	80 91 6e 45 	lds	r24, 0x456E	; 0x80456e <_ZZ9serial_RxhE9field_len>
    11ec:	85 31       	cpi	r24, 0x15	; 21
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <_Z9serial_Rxh+0x228>
    11f0:	6e c0       	rjmp	.+220    	; 0x12ce <_Z9serial_Rxh+0x304>
					{
						if(field_index == 0)    /* message ID received */
    11f2:	60 91 6f 45 	lds	r22, 0x456F	; 0x80456f <_ZZ9serial_RxhE11field_index>
    11f6:	61 11       	cpse	r22, r1
    11f8:	19 c0       	rjmp	.+50     	; 0x122c <_Z9serial_Rxh+0x262>
						{
							msg_ID = msg_ID * 10 + rx_char;
    11fa:	60 91 70 45 	lds	r22, 0x4570	; 0x804570 <_ZZ9serial_RxhE6msg_ID>
    11fe:	70 91 71 45 	lds	r23, 0x4571	; 0x804571 <_ZZ9serial_RxhE6msg_ID+0x1>
    1202:	fb 01       	movw	r30, r22
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	66 0f       	add	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	66 0f       	add	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	66 0f       	add	r22, r22
    1212:	77 1f       	adc	r23, r23
    1214:	6e 0f       	add	r22, r30
    1216:	7f 1f       	adc	r23, r31
    1218:	64 0f       	add	r22, r20
    121a:	71 1d       	adc	r23, r1
    121c:	60 93 70 45 	sts	0x4570, r22	; 0x804570 <_ZZ9serial_RxhE6msg_ID>
    1220:	70 93 71 45 	sts	0x4571, r23	; 0x804571 <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
    1224:	8f 5f       	subi	r24, 0xFF	; 255
    1226:	80 93 6e 45 	sts	0x456E, r24	; 0x80456e <_ZZ9serial_RxhE9field_len>
    122a:	16 c0       	rjmp	.+44     	; 0x1258 <_Z9serial_Rxh+0x28e>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	61 50       	subi	r22, 0x01	; 1
    1230:	71 09       	sbc	r23, r1
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	98 0f       	add	r25, r24
    1236:	90 93 6e 45 	sts	0x456E, r25	; 0x80456e <_ZZ9serial_RxhE9field_len>
    123a:	34 e1       	ldi	r19, 0x14	; 20
    123c:	36 9f       	mul	r19, r22
    123e:	f0 01       	movw	r30, r0
    1240:	37 9f       	mul	r19, r23
    1242:	f0 0d       	add	r31, r0
    1244:	11 24       	eor	r1, r1
    1246:	ce 0f       	add	r28, r30
    1248:	df 1f       	adc	r29, r31
    124a:	fe 01       	movw	r30, r28
    124c:	e8 0f       	add	r30, r24
    124e:	f1 1d       	adc	r31, r1
    1250:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
    1252:	c9 0f       	add	r28, r25
    1254:	d1 1d       	adc	r29, r1
    1256:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    1258:	80 91 a5 45 	lds	r24, 0x45A5	; 0x8045a5 <_ZZ9serial_RxhE9charIndex>
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	81 33       	cpi	r24, 0x31	; 49
    1262:	91 05       	cpc	r25, r1
    1264:	0c f0       	brlt	.+2      	; 0x1268 <_Z9serial_Rxh+0x29e>
    1266:	81 e3       	ldi	r24, 0x31	; 49
    1268:	80 93 a5 45 	sts	0x45A5, r24	; 0x8045a5 <_ZZ9serial_RxhE9charIndex>
    126c:	33 c0       	rjmp	.+102    	; 0x12d4 <_Z9serial_Rxh+0x30a>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
    126e:	4f 37       	cpi	r20, 0x7F	; 127
    1270:	69 f4       	brne	.+26     	; 0x128c <_Z9serial_Rxh+0x2c2>
				{
					if(msg_ID <= 0)
    1272:	80 91 70 45 	lds	r24, 0x4570	; 0x804570 <_ZZ9serial_RxhE6msg_ID>
    1276:	90 91 71 45 	lds	r25, 0x4571	; 0x804571 <_ZZ9serial_RxhE6msg_ID+0x1>
    127a:	18 16       	cp	r1, r24
    127c:	19 06       	cpc	r1, r25
    127e:	0c f0       	brlt	.+2      	; 0x1282 <_Z9serial_Rxh+0x2b8>
					{
						rx_char = '\0';
    1280:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
    1282:	10 92 70 45 	sts	0x4570, r1	; 0x804570 <_ZZ9serial_RxhE6msg_ID>
    1286:	10 92 71 45 	sts	0x4571, r1	; 0x804571 <_ZZ9serial_RxhE6msg_ID+0x1>
    128a:	24 c0       	rjmp	.+72     	; 0x12d4 <_Z9serial_Rxh+0x30a>
				}
				else if(rx_char == ' ') /* Handle Space */
    128c:	40 32       	cpi	r20, 0x20	; 32
    128e:	09 f1       	breq	.+66     	; 0x12d2 <_Z9serial_Rxh+0x308>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
    1290:	10 92 6f 45 	sts	0x456F, r1	; 0x80456f <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
    1294:	55 27       	eor	r21, r21
    1296:	40 93 70 45 	sts	0x4570, r20	; 0x804570 <_ZZ9serial_RxhE6msg_ID>
    129a:	50 93 71 45 	sts	0x4571, r21	; 0x804571 <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	50 f4       	brcc	.+20     	; 0x12b8 <_Z9serial_Rxh+0x2ee>
					{
						buff->fields[i][0] = '\0';
    12a4:	de 01       	movw	r26, r28
    12a6:	34 e1       	ldi	r19, 0x14	; 20
    12a8:	83 9f       	mul	r24, r19
    12aa:	a0 0d       	add	r26, r0
    12ac:	b1 1d       	adc	r27, r1
    12ae:	11 24       	eor	r1, r1
    12b0:	13 96       	adiw	r26, 0x03	; 3
    12b2:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    12b4:	8f 5f       	subi	r24, 0xFF	; 255
    12b6:	f4 cf       	rjmp	.-24     	; 0x12a0 <_Z9serial_Rxh+0x2d6>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = true;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 93 72 45 	sts	0x4572, r24	; 0x804572 <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
    12be:	ef 5f       	subi	r30, 0xFF	; 255
    12c0:	e0 93 a5 45 	sts	0x45A5, r30	; 0x8045a5 <_ZZ9serial_RxhE9charIndex>
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <_Z9serial_Rxh+0x30a>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <_Z9serial_Rxh+0x30a>
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <_Z9serial_Rxh+0x30a>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <_Z9serial_Rxh+0x30a>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
    12d2:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = true;
					charIndex++;
				}
			}

			if(rx_char)
    12d4:	22 23       	and	r18, r18
    12d6:	19 f0       	breq	.+6      	; 0x12de <_Z9serial_Rxh+0x314>
			{
				sb_echo_char(rx_char);
    12d8:	82 2f       	mov	r24, r18
    12da:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <sb_echo_char>
			}
		}
	}	
}
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	08 95       	ret

000012e6 <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
    12e6:	1f 92       	push	r1
    12e8:	0f 92       	push	r0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	0f 92       	push	r0
    12ee:	11 24       	eor	r1, r1
    12f0:	0b b6       	in	r0, 0x3b	; 59
    12f2:	0f 92       	push	r0
    12f4:	2f 93       	push	r18
    12f6:	3f 93       	push	r19
    12f8:	4f 93       	push	r20
    12fa:	5f 93       	push	r21
    12fc:	6f 93       	push	r22
    12fe:	7f 93       	push	r23
    1300:	8f 93       	push	r24
    1302:	9f 93       	push	r25
    1304:	af 93       	push	r26
    1306:	bf 93       	push	r27
    1308:	ef 93       	push	r30
    130a:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
    130c:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1310:	81 11       	cpse	r24, r1
    1312:	2b c0       	rjmp	.+86     	; 0x136a <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1314:	80 91 6c 45 	lds	r24, 0x456C	; 0x80456c <_ZZ11__vector_20E4buff>
    1318:	90 91 6d 45 	lds	r25, 0x456D	; 0x80456d <_ZZ11__vector_20E4buff+0x1>
    131c:	89 2b       	or	r24, r25
    131e:	31 f4       	brne	.+12     	; 0x132c <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
    1320:	0e 94 33 36 	call	0x6c66	; 0x6c66 <_Z18nextFullLBTxBufferv>
    1324:	80 93 6c 45 	sts	0x456C, r24	; 0x80456c <_ZZ11__vector_20E4buff>
    1328:	90 93 6d 45 	sts	0x456D, r25	; 0x80456d <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
    132c:	e0 91 6c 45 	lds	r30, 0x456C	; 0x80456c <_ZZ11__vector_20E4buff>
    1330:	f0 91 6d 45 	lds	r31, 0x456D	; 0x80456d <_ZZ11__vector_20E4buff+0x1>
    1334:	80 91 6b 45 	lds	r24, 0x456B	; 0x80456b <_ZZ11__vector_20E9charIndex>
    1338:	df 01       	movw	r26, r30
    133a:	a8 0f       	add	r26, r24
    133c:	b1 1d       	adc	r27, r1
    133e:	9c 91       	ld	r25, X
    1340:	99 23       	and	r25, r25
    1342:	31 f0       	breq	.+12     	; 0x1350 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	80 93 6b 45 	sts	0x456B, r24	; 0x80456b <_ZZ11__vector_20E9charIndex>
    134a:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    134e:	0d c0       	rjmp	.+26     	; 0x136a <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
    1350:	10 92 6b 45 	sts	0x456B, r1	; 0x80456b <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
    1354:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    1356:	0e 94 33 36 	call	0x6c66	; 0x6c66 <_Z18nextFullLBTxBufferv>
    135a:	80 93 6c 45 	sts	0x456C, r24	; 0x80456c <_ZZ11__vector_20E4buff>
    135e:	90 93 6d 45 	sts	0x456D, r25	; 0x80456d <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
    1362:	89 2b       	or	r24, r25
    1364:	11 f4       	brne	.+4      	; 0x136a <__vector_20+0x84>
			{
				linkbus_end_tx();
    1366:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
    136a:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    136e:	81 11       	cpse	r24, r1
    1370:	2b c0       	rjmp	.+86     	; 0x13c8 <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1372:	80 91 69 45 	lds	r24, 0x4569	; 0x804569 <_ZZ11__vector_20E4buff_0>
    1376:	90 91 6a 45 	lds	r25, 0x456A	; 0x80456a <_ZZ11__vector_20E4buff_0+0x1>
    137a:	89 2b       	or	r24, r25
    137c:	31 f4       	brne	.+12     	; 0x138a <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
    137e:	0e 94 80 3a 	call	0x7500	; 0x7500 <nextFullSBTxBuffer>
    1382:	80 93 69 45 	sts	0x4569, r24	; 0x804569 <_ZZ11__vector_20E4buff_0>
    1386:	90 93 6a 45 	sts	0x456A, r25	; 0x80456a <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    138a:	e0 91 69 45 	lds	r30, 0x4569	; 0x804569 <_ZZ11__vector_20E4buff_0>
    138e:	f0 91 6a 45 	lds	r31, 0x456A	; 0x80456a <_ZZ11__vector_20E4buff_0+0x1>
    1392:	80 91 68 45 	lds	r24, 0x4568	; 0x804568 <_ZZ11__vector_20E9charIndex_0>
    1396:	df 01       	movw	r26, r30
    1398:	a8 0f       	add	r26, r24
    139a:	b1 1d       	adc	r27, r1
    139c:	9c 91       	ld	r25, X
    139e:	99 23       	and	r25, r25
    13a0:	31 f0       	breq	.+12     	; 0x13ae <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 68 45 	sts	0x4568, r24	; 0x804568 <_ZZ11__vector_20E9charIndex_0>
    13a8:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    13ac:	0d c0       	rjmp	.+26     	; 0x13c8 <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
    13ae:	10 92 68 45 	sts	0x4568, r1	; 0x804568 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
    13b2:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    13b4:	0e 94 80 3a 	call	0x7500	; 0x7500 <nextFullSBTxBuffer>
    13b8:	80 93 69 45 	sts	0x4569, r24	; 0x804569 <_ZZ11__vector_20E4buff_0>
    13bc:	90 93 6a 45 	sts	0x456A, r25	; 0x80456a <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
    13c0:	89 2b       	or	r24, r25
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <__vector_20+0xe2>
			{
				serialbus_end_tx();
    13c4:	0e 94 49 3b 	call	0x7692	; 0x7692 <serialbus_end_tx>
			}
		}
	}
}
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0b be       	out	0x3b, r0	; 59
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	0b b6       	in	r0, 0x3b	; 59
    13fa:	0f 92       	push	r0
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
    1414:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1418:	84 30       	cpi	r24, 0x04	; 4
    141a:	59 f5       	brne	.+86     	; 0x1472 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    141c:	80 91 66 45 	lds	r24, 0x4566	; 0x804566 <_ZZ11__vector_56E4buff>
    1420:	90 91 67 45 	lds	r25, 0x4567	; 0x804567 <_ZZ11__vector_56E4buff+0x1>
    1424:	89 2b       	or	r24, r25
    1426:	31 f4       	brne	.+12     	; 0x1434 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
    1428:	0e 94 33 36 	call	0x6c66	; 0x6c66 <_Z18nextFullLBTxBufferv>
    142c:	80 93 66 45 	sts	0x4566, r24	; 0x804566 <_ZZ11__vector_56E4buff>
    1430:	90 93 67 45 	sts	0x4567, r25	; 0x804567 <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
    1434:	e0 91 66 45 	lds	r30, 0x4566	; 0x804566 <_ZZ11__vector_56E4buff>
    1438:	f0 91 67 45 	lds	r31, 0x4567	; 0x804567 <_ZZ11__vector_56E4buff+0x1>
    143c:	80 91 65 45 	lds	r24, 0x4565	; 0x804565 <_ZZ11__vector_56E9charIndex>
    1440:	df 01       	movw	r26, r30
    1442:	a8 0f       	add	r26, r24
    1444:	b1 1d       	adc	r27, r1
    1446:	9c 91       	ld	r25, X
    1448:	99 23       	and	r25, r25
    144a:	31 f0       	breq	.+12     	; 0x1458 <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    144c:	8f 5f       	subi	r24, 0xFF	; 255
    144e:	80 93 65 45 	sts	0x4565, r24	; 0x804565 <_ZZ11__vector_56E9charIndex>
    1452:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    1456:	0d c0       	rjmp	.+26     	; 0x1472 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
    1458:	10 92 65 45 	sts	0x4565, r1	; 0x804565 <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
    145c:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    145e:	0e 94 33 36 	call	0x6c66	; 0x6c66 <_Z18nextFullLBTxBufferv>
    1462:	80 93 66 45 	sts	0x4566, r24	; 0x804566 <_ZZ11__vector_56E4buff>
    1466:	90 93 67 45 	sts	0x4567, r25	; 0x804567 <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
    146a:	89 2b       	or	r24, r25
    146c:	11 f4       	brne	.+4      	; 0x1472 <__vector_56+0x84>
			{
				linkbus_end_tx();
    146e:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
    1472:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	59 f5       	brne	.+86     	; 0x14d0 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    147a:	80 91 63 45 	lds	r24, 0x4563	; 0x804563 <_ZZ11__vector_56E4buff_0>
    147e:	90 91 64 45 	lds	r25, 0x4564	; 0x804564 <_ZZ11__vector_56E4buff_0+0x1>
    1482:	89 2b       	or	r24, r25
    1484:	31 f4       	brne	.+12     	; 0x1492 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
    1486:	0e 94 80 3a 	call	0x7500	; 0x7500 <nextFullSBTxBuffer>
    148a:	80 93 63 45 	sts	0x4563, r24	; 0x804563 <_ZZ11__vector_56E4buff_0>
    148e:	90 93 64 45 	sts	0x4564, r25	; 0x804564 <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    1492:	e0 91 63 45 	lds	r30, 0x4563	; 0x804563 <_ZZ11__vector_56E4buff_0>
    1496:	f0 91 64 45 	lds	r31, 0x4564	; 0x804564 <_ZZ11__vector_56E4buff_0+0x1>
    149a:	80 91 62 45 	lds	r24, 0x4562	; 0x804562 <_ZZ11__vector_56E9charIndex_0>
    149e:	df 01       	movw	r26, r30
    14a0:	a8 0f       	add	r26, r24
    14a2:	b1 1d       	adc	r27, r1
    14a4:	9c 91       	ld	r25, X
    14a6:	99 23       	and	r25, r25
    14a8:	31 f0       	breq	.+12     	; 0x14b6 <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    14aa:	8f 5f       	subi	r24, 0xFF	; 255
    14ac:	80 93 62 45 	sts	0x4562, r24	; 0x804562 <_ZZ11__vector_56E9charIndex_0>
    14b0:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
    14b6:	10 92 62 45 	sts	0x4562, r1	; 0x804562 <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
    14ba:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    14bc:	0e 94 80 3a 	call	0x7500	; 0x7500 <nextFullSBTxBuffer>
    14c0:	80 93 63 45 	sts	0x4563, r24	; 0x804563 <_ZZ11__vector_56E4buff_0>
    14c4:	90 93 64 45 	sts	0x4564, r25	; 0x804564 <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
    14c8:	89 2b       	or	r24, r25
    14ca:	11 f4       	brne	.+4      	; 0x14d0 <__vector_56+0xe2>
			{
				serialbus_end_tx();
    14cc:	0e 94 49 3b 	call	0x7692	; 0x7692 <serialbus_end_tx>
			}
		}
	}
}
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	0b be       	out	0x3b, r0	; 59
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
    1500:	80 91 60 45 	lds	r24, 0x4560	; 0x804560 <_ZZ10linkbus_RxhE4buff>
    1504:	90 91 61 45 	lds	r25, 0x4561	; 0x804561 <_ZZ10linkbus_RxhE4buff+0x1>
    1508:	89 2b       	or	r24, r25
    150a:	31 f4       	brne	.+12     	; 0x1518 <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
    150c:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <_Z19nextEmptyLBRxBufferv>
    1510:	80 93 60 45 	sts	0x4560, r24	; 0x804560 <_ZZ10linkbus_RxhE4buff>
    1514:	90 93 61 45 	sts	0x4561, r25	; 0x804561 <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
    1518:	c0 91 60 45 	lds	r28, 0x4560	; 0x804560 <_ZZ10linkbus_RxhE4buff>
    151c:	d0 91 61 45 	lds	r29, 0x4561	; 0x804561 <_ZZ10linkbus_RxhE4buff+0x1>
    1520:	20 97       	sbiw	r28, 0x00	; 0
    1522:	09 f4       	brne	.+2      	; 0x1526 <_Z10linkbus_Rxh+0x30>
    1524:	e3 c0       	rjmp	.+454    	; 0x16ec <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
    1526:	81 2f       	mov	r24, r17
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    152e:	84 32       	cpi	r24, 0x24	; 36
    1530:	11 f0       	breq	.+4      	; 0x1536 <_Z10linkbus_Rxh+0x40>
    1532:	81 32       	cpi	r24, 0x21	; 33
    1534:	49 f5       	brne	.+82     	; 0x1588 <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
    1536:	10 92 5f 45 	sts	0x455F, r1	; 0x80455f <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    153a:	81 32       	cpi	r24, 0x21	; 33
    153c:	11 f4       	brne	.+4      	; 0x1542 <_Z10linkbus_Rxh+0x4c>
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <_Z10linkbus_Rxh+0x4e>
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	88 83       	st	Y, r24
			field_len = 0;
    1546:	10 92 5e 45 	sts	0x455E, r1	; 0x80455e <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    154a:	10 92 5a 45 	sts	0x455A, r1	; 0x80455a <_ZZ10linkbus_RxhE10tempMsg_ID>
    154e:	10 92 5b 45 	sts	0x455B, r1	; 0x80455b <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1552:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    1556:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = true;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 59 45 	sts	0x4559, r24	; 0x804559 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1560:	10 92 58 45 	sts	0x4558, r1	; 0x804558 <_ZZ10linkbus_RxhE11field_index>
    1564:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <_ZZ10linkbus_RxhE11field_index>
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	58 f4       	brcc	.+22     	; 0x1582 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
    156c:	fe 01       	movw	r30, r28
    156e:	05 e1       	ldi	r16, 0x15	; 21
    1570:	80 9f       	mul	r24, r16
    1572:	e0 0d       	add	r30, r0
    1574:	f1 1d       	adc	r31, r1
    1576:	11 24       	eor	r1, r1
    1578:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = true;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	80 93 58 45 	sts	0x4558, r24	; 0x804558 <_ZZ10linkbus_RxhE11field_index>
    1580:	f1 cf       	rjmp	.-30     	; 0x1564 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
    1582:	10 92 58 45 	sts	0x4558, r1	; 0x804558 <_ZZ10linkbus_RxhE11field_index>
    1586:	a7 c0       	rjmp	.+334    	; 0x16d6 <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
    1588:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <_ZZ10linkbus_RxhE13receiving_msg>
    158c:	99 23       	and	r25, r25
    158e:	09 f4       	brne	.+2      	; 0x1592 <_Z10linkbus_Rxh+0x9c>
    1590:	8b c0       	rjmp	.+278    	; 0x16a8 <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    1592:	8c 32       	cpi	r24, 0x2C	; 44
    1594:	29 f0       	breq	.+10     	; 0x15a0 <_Z10linkbus_Rxh+0xaa>
    1596:	8b 33       	cpi	r24, 0x3B	; 59
    1598:	19 f0       	breq	.+6      	; 0x15a0 <_Z10linkbus_Rxh+0xaa>
    159a:	8f 33       	cpi	r24, 0x3F	; 63
    159c:	09 f0       	breq	.+2      	; 0x15a0 <_Z10linkbus_Rxh+0xaa>
    159e:	42 c0       	rjmp	.+132    	; 0x1624 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    15a0:	90 91 58 45 	lds	r25, 0x4558	; 0x804558 <_ZZ10linkbus_RxhE11field_index>
    15a4:	99 23       	and	r25, r25
    15a6:	89 f0       	breq	.+34     	; 0x15ca <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
    15a8:	29 2f       	mov	r18, r25
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	21 50       	subi	r18, 0x01	; 1
    15ae:	31 09       	sbc	r19, r1
    15b0:	40 91 5e 45 	lds	r20, 0x455E	; 0x80455e <_ZZ10linkbus_RxhE9field_len>
    15b4:	55 e1       	ldi	r21, 0x15	; 21
    15b6:	52 9f       	mul	r21, r18
    15b8:	f0 01       	movw	r30, r0
    15ba:	53 9f       	mul	r21, r19
    15bc:	f0 0d       	add	r31, r0
    15be:	11 24       	eor	r1, r1
    15c0:	ec 0f       	add	r30, r28
    15c2:	fd 1f       	adc	r31, r29
    15c4:	e4 0f       	add	r30, r20
    15c6:	f1 1d       	adc	r31, r1
    15c8:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
    15ca:	9f 5f       	subi	r25, 0xFF	; 255
    15cc:	90 93 58 45 	sts	0x4558, r25	; 0x804558 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
    15d0:	10 92 5e 45 	sts	0x455E, r1	; 0x80455e <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
    15d4:	8b 33       	cpi	r24, 0x3B	; 59
    15d6:	69 f4       	brne	.+26     	; 0x15f2 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    15d8:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ10linkbus_RxhE9charIndex>
    15dc:	84 30       	cpi	r24, 0x04	; 4
    15de:	30 f0       	brcs	.+12     	; 0x15ec <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    15e0:	80 91 5a 45 	lds	r24, 0x455A	; 0x80455a <_ZZ10linkbus_RxhE10tempMsg_ID>
    15e4:	90 91 5b 45 	lds	r25, 0x455B	; 0x80455b <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    15ec:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <_ZZ10linkbus_RxhE13receiving_msg>
    15f0:	10 c0       	rjmp	.+32     	; 0x1612 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
    15f2:	8f 33       	cpi	r24, 0x3F	; 63
    15f4:	71 f4       	brne	.+28     	; 0x1612 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
    15fa:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ10linkbus_RxhE9charIndex>
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	30 f0       	brcs	.+12     	; 0x160e <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    1602:	80 91 5a 45 	lds	r24, 0x455A	; 0x80455a <_ZZ10linkbus_RxhE10tempMsg_ID>
    1606:	90 91 5b 45 	lds	r25, 0x455B	; 0x80455b <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    160e:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
    1612:	80 91 59 45 	lds	r24, 0x4559	; 0x804559 <_ZZ10linkbus_RxhE13receiving_msg>
    1616:	81 11       	cpse	r24, r1
    1618:	5e c0       	rjmp	.+188    	; 0x16d6 <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
    161a:	10 92 60 45 	sts	0x4560, r1	; 0x804560 <_ZZ10linkbus_RxhE4buff>
    161e:	10 92 61 45 	sts	0x4561, r1	; 0x804561 <_ZZ10linkbus_RxhE4buff+0x1>
    1622:	59 c0       	rjmp	.+178    	; 0x16d6 <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
    1624:	20 91 58 45 	lds	r18, 0x4558	; 0x804558 <_ZZ10linkbus_RxhE11field_index>
    1628:	21 11       	cpse	r18, r1
    162a:	29 c0       	rjmp	.+82     	; 0x167e <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
    162c:	40 91 5a 45 	lds	r20, 0x455A	; 0x80455a <_ZZ10linkbus_RxhE10tempMsg_ID>
    1630:	50 91 5b 45 	lds	r21, 0x455B	; 0x80455b <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1634:	60 91 5c 45 	lds	r22, 0x455C	; 0x80455c <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    1638:	70 91 5d 45 	lds	r23, 0x455D	; 0x80455d <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    163c:	44 0f       	add	r20, r20
    163e:	55 1f       	adc	r21, r21
    1640:	66 1f       	adc	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	8a 01       	movw	r16, r20
    1646:	9b 01       	movw	r18, r22
    1648:	00 0f       	add	r16, r16
    164a:	11 1f       	adc	r17, r17
    164c:	22 1f       	adc	r18, r18
    164e:	33 1f       	adc	r19, r19
    1650:	00 0f       	add	r16, r16
    1652:	11 1f       	adc	r17, r17
    1654:	22 1f       	adc	r18, r18
    1656:	33 1f       	adc	r19, r19
    1658:	40 0f       	add	r20, r16
    165a:	51 1f       	adc	r21, r17
    165c:	62 1f       	adc	r22, r18
    165e:	73 1f       	adc	r23, r19
    1660:	8a 01       	movw	r16, r20
    1662:	9b 01       	movw	r18, r22
    1664:	08 0f       	add	r16, r24
    1666:	11 1d       	adc	r17, r1
    1668:	21 1d       	adc	r18, r1
    166a:	31 1d       	adc	r19, r1
    166c:	00 93 5a 45 	sts	0x455A, r16	; 0x80455a <_ZZ10linkbus_RxhE10tempMsg_ID>
    1670:	10 93 5b 45 	sts	0x455B, r17	; 0x80455b <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1674:	20 93 5c 45 	sts	0x455C, r18	; 0x80455c <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    1678:	30 93 5d 45 	sts	0x455D, r19	; 0x80455d <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    167c:	2c c0       	rjmp	.+88     	; 0x16d6 <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	21 50       	subi	r18, 0x01	; 1
    1682:	31 09       	sbc	r19, r1
    1684:	90 91 5e 45 	lds	r25, 0x455E	; 0x80455e <_ZZ10linkbus_RxhE9field_len>
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	49 0f       	add	r20, r25
    168c:	40 93 5e 45 	sts	0x455E, r20	; 0x80455e <_ZZ10linkbus_RxhE9field_len>
    1690:	65 e1       	ldi	r22, 0x15	; 21
    1692:	62 9f       	mul	r22, r18
    1694:	a0 01       	movw	r20, r0
    1696:	63 9f       	mul	r22, r19
    1698:	50 0d       	add	r21, r0
    169a:	11 24       	eor	r1, r1
    169c:	c4 0f       	add	r28, r20
    169e:	d5 1f       	adc	r29, r21
    16a0:	c9 0f       	add	r28, r25
    16a2:	d1 1d       	adc	r29, r1
    16a4:	8b 83       	std	Y+3, r24	; 0x03
    16a6:	17 c0       	rjmp	.+46     	; 0x16d6 <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
    16a8:	8d 30       	cpi	r24, 0x0D	; 13
    16aa:	a9 f4       	brne	.+42     	; 0x16d6 <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
    16ac:	19 82       	std	Y+1, r1	; 0x01
    16ae:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
    16b0:	82 e3       	ldi	r24, 0x32	; 50
    16b2:	80 93 5f 45 	sts	0x455F, r24	; 0x80455f <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
    16b6:	10 92 5e 45 	sts	0x455E, r1	; 0x80455e <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    16ba:	10 92 5a 45 	sts	0x455A, r1	; 0x80455a <_ZZ10linkbus_RxhE10tempMsg_ID>
    16be:	10 92 5b 45 	sts	0x455B, r1	; 0x80455b <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    16c2:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    16c6:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
    16ca:	10 92 58 45 	sts	0x4558, r1	; 0x804558 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
    16ce:	10 92 60 45 	sts	0x4560, r1	; 0x804560 <_ZZ10linkbus_RxhE4buff>
    16d2:	10 92 61 45 	sts	0x4561, r1	; 0x804561 <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    16d6:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ10linkbus_RxhE9charIndex>
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	80 93 5f 45 	sts	0x455F, r24	; 0x80455f <_ZZ10linkbus_RxhE9charIndex>
    16e0:	82 33       	cpi	r24, 0x32	; 50
    16e2:	20 f0       	brcs	.+8      	; 0x16ec <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = false;
    16e4:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
    16e8:	10 92 5f 45 	sts	0x455F, r1	; 0x80455f <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
    1700:	0b b6       	in	r0, 0x3b	; 59
    1702:	0f 92       	push	r0
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	cf 93       	push	r28
    171a:	ef 93       	push	r30
    171c:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
    171e:	0e 94 75 46 	call	0x8cea	; 0x8cea <USART0_get_data>
    1722:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
    1724:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1728:	81 11       	cpse	r24, r1
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
    172c:	8c 2f       	mov	r24, r28
    172e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
    1732:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    1736:	81 11       	cpse	r24, r1
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
    173a:	8c 2f       	mov	r24, r28
    173c:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z9serial_Rxh>
	}
}
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	cf 91       	pop	r28
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0b be       	out	0x3b, r0	; 59
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <__vector_55>:

ISR(USART4_RXC_vect)
{
    1768:	1f 92       	push	r1
    176a:	0f 92       	push	r0
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	0f 92       	push	r0
    1770:	11 24       	eor	r1, r1
    1772:	0b b6       	in	r0, 0x3b	; 59
    1774:	0f 92       	push	r0
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	cf 93       	push	r28
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
    1790:	0e 94 dd 46 	call	0x8dba	; 0x8dba <USART4_get_data>
    1794:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
    1796:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	19 f4       	brne	.+6      	; 0x17a4 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
    179e:	8c 2f       	mov	r24, r28
    17a0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
    17a4:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    17a8:	84 30       	cpi	r24, 0x04	; 4
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
    17ac:	8c 2f       	mov	r24, r28
    17ae:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z9serial_Rxh>
	}
}
    17b2:	ff 91       	pop	r31
    17b4:	ef 91       	pop	r30
    17b6:	cf 91       	pop	r28
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0b be       	out	0x3b, r0	; 59
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	0f 90       	pop	r0
    17d6:	1f 90       	pop	r1
    17d8:	18 95       	reti

000017da <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	0b b6       	in	r0, 0x3b	; 59
    17e6:	0f 92       	push	r0
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	cf 93       	push	r28
    17fe:	ef 93       	push	r30
    1800:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
    1802:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <USART1_get_data>
    1806:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
    1808:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	19 f4       	brne	.+6      	; 0x1816 <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
    1810:	8c 2f       	mov	r24, r28
    1812:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
    1816:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	19 f4       	brne	.+6      	; 0x1824 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
    181e:	8c 2f       	mov	r24, r28
    1820:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z9serial_Rxh>
	}
}
    1824:	ff 91       	pop	r31
    1826:	ef 91       	pop	r30
    1828:	cf 91       	pop	r28
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	7f 91       	pop	r23
    1834:	6f 91       	pop	r22
    1836:	5f 91       	pop	r21
    1838:	4f 91       	pop	r20
    183a:	3f 91       	pop	r19
    183c:	2f 91       	pop	r18
    183e:	0f 90       	pop	r0
    1840:	0b be       	out	0x3b, r0	; 59
    1842:	0f 90       	pop	r0
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	0f 90       	pop	r0
    1848:	1f 90       	pop	r1
    184a:	18 95       	reti

0000184c <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
    184c:	1f 92       	push	r1
    184e:	0f 92       	push	r0
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	0f 92       	push	r0
    1854:	11 24       	eor	r1, r1
    1856:	0b b6       	in	r0, 0x3b	; 59
    1858:	0f 92       	push	r0
    185a:	2f 93       	push	r18
    185c:	3f 93       	push	r19
    185e:	4f 93       	push	r20
    1860:	5f 93       	push	r21
    1862:	6f 93       	push	r22
    1864:	7f 93       	push	r23
    1866:	8f 93       	push	r24
    1868:	9f 93       	push	r25
    186a:	af 93       	push	r26
    186c:	bf 93       	push	r27
    186e:	ef 93       	push	r30
    1870:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
    1872:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	59 f5       	brne	.+86     	; 0x18d0 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    187a:	80 91 56 45 	lds	r24, 0x4556	; 0x804556 <_ZZ11__vector_32E4buff>
    187e:	90 91 57 45 	lds	r25, 0x4557	; 0x804557 <_ZZ11__vector_32E4buff+0x1>
    1882:	89 2b       	or	r24, r25
    1884:	31 f4       	brne	.+12     	; 0x1892 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
    1886:	0e 94 80 3a 	call	0x7500	; 0x7500 <nextFullSBTxBuffer>
    188a:	80 93 56 45 	sts	0x4556, r24	; 0x804556 <_ZZ11__vector_32E4buff>
    188e:	90 93 57 45 	sts	0x4557, r25	; 0x804557 <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
    1892:	e0 91 56 45 	lds	r30, 0x4556	; 0x804556 <_ZZ11__vector_32E4buff>
    1896:	f0 91 57 45 	lds	r31, 0x4557	; 0x804557 <_ZZ11__vector_32E4buff+0x1>
    189a:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <_ZZ11__vector_32E9charIndex>
    189e:	df 01       	movw	r26, r30
    18a0:	a8 0f       	add	r26, r24
    18a2:	b1 1d       	adc	r27, r1
    18a4:	9c 91       	ld	r25, X
    18a6:	99 23       	and	r25, r25
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	80 93 55 45 	sts	0x4555, r24	; 0x804555 <_ZZ11__vector_32E9charIndex>
    18b0:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    18b4:	0d c0       	rjmp	.+26     	; 0x18d0 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
    18b6:	10 92 55 45 	sts	0x4555, r1	; 0x804555 <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
    18ba:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    18bc:	0e 94 80 3a 	call	0x7500	; 0x7500 <nextFullSBTxBuffer>
    18c0:	80 93 56 45 	sts	0x4556, r24	; 0x804556 <_ZZ11__vector_32E4buff>
    18c4:	90 93 57 45 	sts	0x4557, r25	; 0x804557 <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
    18c8:	89 2b       	or	r24, r25
    18ca:	11 f4       	brne	.+4      	; 0x18d0 <__vector_32+0x84>
			{
				serialbus_end_tx();
    18cc:	0e 94 49 3b 	call	0x7692	; 0x7692 <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
    18d0:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	59 f5       	brne	.+86     	; 0x192e <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    18d8:	80 91 53 45 	lds	r24, 0x4553	; 0x804553 <_ZZ11__vector_32E4buff_0>
    18dc:	90 91 54 45 	lds	r25, 0x4554	; 0x804554 <_ZZ11__vector_32E4buff_0+0x1>
    18e0:	89 2b       	or	r24, r25
    18e2:	31 f4       	brne	.+12     	; 0x18f0 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
    18e4:	0e 94 33 36 	call	0x6c66	; 0x6c66 <_Z18nextFullLBTxBufferv>
    18e8:	80 93 53 45 	sts	0x4553, r24	; 0x804553 <_ZZ11__vector_32E4buff_0>
    18ec:	90 93 54 45 	sts	0x4554, r25	; 0x804554 <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    18f0:	e0 91 53 45 	lds	r30, 0x4553	; 0x804553 <_ZZ11__vector_32E4buff_0>
    18f4:	f0 91 54 45 	lds	r31, 0x4554	; 0x804554 <_ZZ11__vector_32E4buff_0+0x1>
    18f8:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <__data_end>
    18fc:	df 01       	movw	r26, r30
    18fe:	a8 0f       	add	r26, r24
    1900:	b1 1d       	adc	r27, r1
    1902:	9c 91       	ld	r25, X
    1904:	99 23       	and	r25, r25
    1906:	31 f0       	breq	.+12     	; 0x1914 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <__data_end>
    190e:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    1912:	0d c0       	rjmp	.+26     	; 0x192e <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
    1914:	10 92 52 45 	sts	0x4552, r1	; 0x804552 <__data_end>
			(*buff)[0] = '\0';
    1918:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    191a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <_Z18nextFullLBTxBufferv>
    191e:	80 93 53 45 	sts	0x4553, r24	; 0x804553 <_ZZ11__vector_32E4buff_0>
    1922:	90 93 54 45 	sts	0x4554, r25	; 0x804554 <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
    1926:	89 2b       	or	r24, r25
    1928:	11 f4       	brne	.+4      	; 0x192e <__vector_32+0xe2>
			{
				linkbus_end_tx();
    192a:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <_Z14linkbus_end_txv>
			}
		}
	}
}
    192e:	ff 91       	pop	r31
    1930:	ef 91       	pop	r30
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	7f 91       	pop	r23
    193c:	6f 91       	pop	r22
    193e:	5f 91       	pop	r21
    1940:	4f 91       	pop	r20
    1942:	3f 91       	pop	r19
    1944:	2f 91       	pop	r18
    1946:	0f 90       	pop	r0
    1948:	0b be       	out	0x3b, r0	; 59
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <__vector_41>:
{
	
}

void suspendEvent()
{
    1954:	1f 92       	push	r1
    1956:	0f 92       	push	r0
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	0f 92       	push	r0
    195c:	11 24       	eor	r1, r1
    195e:	0b b6       	in	r0, 0x3b	; 59
    1960:	0f 92       	push	r0
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	2f 93       	push	r18
    1968:	3f 93       	push	r19
    196a:	4f 93       	push	r20
    196c:	5f 93       	push	r21
    196e:	6f 93       	push	r22
    1970:	7f 93       	push	r23
    1972:	8f 93       	push	r24
    1974:	9f 93       	push	r25
    1976:	af 93       	push	r26
    1978:	bf 93       	push	r27
    197a:	ef 93       	push	r30
    197c:	ff 93       	push	r31
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	25 97       	sbiw	r28, 0x05	; 5
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    1990:	80 ff       	sbrs	r24, 0
    1992:	98 c3       	rjmp	.+1840   	; 0x20c4 <__vector_41+0x770>
    1994:	80 91 4b 46 	lds	r24, 0x464B	; 0x80464b <_ZZ11__vector_41E3cnt>
    1998:	90 91 4c 46 	lds	r25, 0x464C	; 0x80464c <_ZZ11__vector_41E3cnt+0x1>
    199c:	9c 01       	movw	r18, r24
    199e:	2f 5f       	subi	r18, 0xFF	; 255
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	20 93 4b 46 	sts	0x464B, r18	; 0x80464b <_ZZ11__vector_41E3cnt>
    19a6:	30 93 4c 46 	sts	0x464C, r19	; 0x80464c <_ZZ11__vector_41E3cnt+0x1>
    19aa:	8b 32       	cpi	r24, 0x2B	; 43
    19ac:	91 40       	sbci	r25, 0x01	; 1
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <__vector_41+0x5e>
    19b0:	86 c3       	rjmp	.+1804   	; 0x20be <__vector_41+0x76a>
    19b2:	10 92 4b 46 	sts	0x464B, r1	; 0x80464b <_ZZ11__vector_41E3cnt>
    19b6:	10 92 4c 46 	sts	0x464C, r1	; 0x80464c <_ZZ11__vector_41E3cnt+0x1>
    19ba:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_event_enabled>
    19be:	81 11       	cpse	r24, r1
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <__vector_41+0x74>
    19c2:	8a b1       	in	r24, 0x0a	; 10
    19c4:	80 64       	ori	r24, 0x40	; 64
    19c6:	8a b9       	out	0x0a, r24	; 10
    19c8:	0e 94 2f 22 	call	0x445e	; 0x445e <_Z18antennaIsConnectedv>
    19cc:	81 11       	cpse	r24, r1
    19ce:	0a c0       	rjmp	.+20     	; 0x19e4 <__vector_41+0x90>
    19d0:	90 91 df 45 	lds	r25, 0x45DF	; 0x8045df <g_antenna_connect_state>
    19d4:	91 30       	cpi	r25, 0x01	; 1
    19d6:	19 f1       	breq	.+70     	; 0x1a1e <__vector_41+0xca>
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	90 93 df 45 	sts	0x45DF, r25	; 0x8045df <g_antenna_connect_state>
    19de:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    19e2:	1d c0       	rjmp	.+58     	; 0x1a1e <__vector_41+0xca>
    19e4:	90 91 df 45 	lds	r25, 0x45DF	; 0x8045df <g_antenna_connect_state>
    19e8:	91 30       	cpi	r25, 0x01	; 1
    19ea:	c9 f4       	brne	.+50     	; 0x1a1e <__vector_41+0xca>
    19ec:	90 91 4d 46 	lds	r25, 0x464D	; 0x80464d <_ZZ11__vector_41E26lastAntennaConnectionState>
    19f0:	89 13       	cpse	r24, r25
    19f2:	12 c0       	rjmp	.+36     	; 0x1a18 <__vector_41+0xc4>
    19f4:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19f8:	99 23       	and	r25, r25
    19fa:	89 f0       	breq	.+34     	; 0x1a1e <__vector_41+0xca>
    19fc:	91 50       	subi	r25, 0x01	; 1
    19fe:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a02:	91 11       	cpse	r25, r1
    1a04:	0c c0       	rjmp	.+24     	; 0x1a1e <__vector_41+0xca>
    1a06:	10 92 df 45 	sts	0x45DF, r1	; 0x8045df <g_antenna_connect_state>
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a10:	93 e0       	ldi	r25, 0x03	; 3
    1a12:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <__vector_41+0xca>
    1a18:	93 e0       	ldi	r25, 0x03	; 3
    1a1a:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a1e:	80 93 4d 46 	sts	0x464D, r24	; 0x80464d <_ZZ11__vector_41E26lastAntennaConnectionState>
    1a22:	0e 94 ce 05 	call	0xb9c	; 0xb9c <system_tick>
    1a26:	10 91 25 46 	lds	r17, 0x4625	; 0x804625 <_ZL10g_sleeping>
    1a2a:	11 23       	and	r17, r17
    1a2c:	a9 f1       	breq	.+106    	; 0x1a98 <__vector_41+0x144>
    1a2e:	80 91 26 46 	lds	r24, 0x4626	; 0x804626 <_ZL23g_seconds_left_to_sleep>
    1a32:	90 91 27 46 	lds	r25, 0x4627	; 0x804627 <_ZL23g_seconds_left_to_sleep+0x1>
    1a36:	a0 91 28 46 	lds	r26, 0x4628	; 0x804628 <_ZL23g_seconds_left_to_sleep+0x2>
    1a3a:	b0 91 29 46 	lds	r27, 0x4629	; 0x804629 <_ZL23g_seconds_left_to_sleep+0x3>
    1a3e:	89 2b       	or	r24, r25
    1a40:	8a 2b       	or	r24, r26
    1a42:	8b 2b       	or	r24, r27
    1a44:	99 f0       	breq	.+38     	; 0x1a6c <__vector_41+0x118>
    1a46:	80 91 26 46 	lds	r24, 0x4626	; 0x804626 <_ZL23g_seconds_left_to_sleep>
    1a4a:	90 91 27 46 	lds	r25, 0x4627	; 0x804627 <_ZL23g_seconds_left_to_sleep+0x1>
    1a4e:	a0 91 28 46 	lds	r26, 0x4628	; 0x804628 <_ZL23g_seconds_left_to_sleep+0x2>
    1a52:	b0 91 29 46 	lds	r27, 0x4629	; 0x804629 <_ZL23g_seconds_left_to_sleep+0x3>
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	a1 09       	sbc	r26, r1
    1a5a:	b1 09       	sbc	r27, r1
    1a5c:	80 93 26 46 	sts	0x4626, r24	; 0x804626 <_ZL23g_seconds_left_to_sleep>
    1a60:	90 93 27 46 	sts	0x4627, r25	; 0x804627 <_ZL23g_seconds_left_to_sleep+0x1>
    1a64:	a0 93 28 46 	sts	0x4628, r26	; 0x804628 <_ZL23g_seconds_left_to_sleep+0x2>
    1a68:	b0 93 29 46 	sts	0x4629, r27	; 0x804629 <_ZL23g_seconds_left_to_sleep+0x3>
    1a6c:	80 91 26 46 	lds	r24, 0x4626	; 0x804626 <_ZL23g_seconds_left_to_sleep>
    1a70:	90 91 27 46 	lds	r25, 0x4627	; 0x804627 <_ZL23g_seconds_left_to_sleep+0x1>
    1a74:	a0 91 28 46 	lds	r26, 0x4628	; 0x804628 <_ZL23g_seconds_left_to_sleep+0x2>
    1a78:	b0 91 29 46 	lds	r27, 0x4629	; 0x804629 <_ZL23g_seconds_left_to_sleep+0x3>
    1a7c:	89 2b       	or	r24, r25
    1a7e:	8a 2b       	or	r24, r26
    1a80:	8b 2b       	or	r24, r27
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <__vector_41+0x134>
    1a84:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a88:	11 23       	and	r17, r17
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <__vector_41+0x13a>
    1a8c:	18 c3       	rjmp	.+1584   	; 0x20be <__vector_41+0x76a>
    1a8e:	10 92 24 46 	sts	0x4624, r1	; 0x804624 <_ZL13g_go_to_sleep>
    1a92:	10 92 25 46 	sts	0x4625, r1	; 0x804625 <_ZL10g_sleeping>
    1a96:	13 c3       	rjmp	.+1574   	; 0x20be <__vector_41+0x76a>
    1a98:	19 82       	std	Y+1, r1	; 0x01
    1a9a:	1a 82       	std	Y+2, r1	; 0x02
    1a9c:	1b 82       	std	Y+3, r1	; 0x03
    1a9e:	1c 82       	std	Y+4, r1	; 0x04
    1aa0:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1aa4:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1aa8:	89 2b       	or	r24, r25
    1aaa:	49 f0       	breq	.+18     	; 0x1abe <__vector_41+0x16a>
    1aac:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1ab0:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1aba:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1abe:	80 91 21 46 	lds	r24, 0x4621	; 0x804621 <g_event_commenced>
    1ac2:	88 23       	and	r24, r24
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <__vector_41+0x174>
    1ac6:	52 c0       	rjmp	.+164    	; 0x1b6c <__vector_41+0x218>
    1ac8:	40 91 1c 46 	lds	r20, 0x461C	; 0x80461c <g_event_finish_time>
    1acc:	50 91 1d 46 	lds	r21, 0x461D	; 0x80461d <g_event_finish_time+0x1>
    1ad0:	60 91 1e 46 	lds	r22, 0x461E	; 0x80461e <g_event_finish_time+0x2>
    1ad4:	70 91 1f 46 	lds	r23, 0x461F	; 0x80461f <g_event_finish_time+0x3>
    1ad8:	45 2b       	or	r20, r21
    1ada:	46 2b       	or	r20, r22
    1adc:	47 2b       	or	r20, r23
    1ade:	51 f0       	breq	.+20     	; 0x1af4 <__vector_41+0x1a0>
    1ae0:	90 91 22 46 	lds	r25, 0x4622	; 0x804622 <g_check_for_next_event>
    1ae4:	91 11       	cpse	r25, r1
    1ae6:	08 c0       	rjmp	.+16     	; 0x1af8 <__vector_41+0x1a4>
    1ae8:	90 91 e8 45 	lds	r25, 0x45E8	; 0x8045e8 <_ZL20g_shutting_down_wifi>
    1aec:	99 23       	and	r25, r25
    1aee:	29 f0       	breq	.+10     	; 0x1afa <__vector_41+0x1a6>
    1af0:	81 2f       	mov	r24, r17
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <__vector_41+0x1a6>
    1af4:	81 2f       	mov	r24, r17
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <__vector_41+0x1a6>
    1af8:	81 2f       	mov	r24, r17
    1afa:	88 23       	and	r24, r24
    1afc:	b9 f1       	breq	.+110    	; 0x1b6c <__vector_41+0x218>
    1afe:	ce 01       	movw	r24, r28
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	0e 94 9c 05 	call	0xb38	; 0xb38 <time>
    1b06:	49 81       	ldd	r20, Y+1	; 0x01
    1b08:	5a 81       	ldd	r21, Y+2	; 0x02
    1b0a:	6b 81       	ldd	r22, Y+3	; 0x03
    1b0c:	7c 81       	ldd	r23, Y+4	; 0x04
    1b0e:	80 91 1c 46 	lds	r24, 0x461C	; 0x80461c <g_event_finish_time>
    1b12:	90 91 1d 46 	lds	r25, 0x461D	; 0x80461d <g_event_finish_time+0x1>
    1b16:	a0 91 1e 46 	lds	r26, 0x461E	; 0x80461e <g_event_finish_time+0x2>
    1b1a:	b0 91 1f 46 	lds	r27, 0x461F	; 0x80461f <g_event_finish_time+0x3>
    1b1e:	48 17       	cp	r20, r24
    1b20:	59 07       	cpc	r21, r25
    1b22:	6a 07       	cpc	r22, r26
    1b24:	7b 07       	cpc	r23, r27
    1b26:	10 f1       	brcs	.+68     	; 0x1b6c <__vector_41+0x218>
    1b28:	8c ef       	ldi	r24, 0xFC	; 252
    1b2a:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    1b2e:	10 92 e0 45 	sts	0x45E0, r1	; 0x8045e0 <_ZL12g_on_the_air>
    1b32:	10 92 e1 45 	sts	0x45E1, r1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1b36:	10 92 e2 45 	sts	0x45E2, r1	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1b3a:	10 92 e3 45 	sts	0x45E3, r1	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	0e 94 a6 44 	call	0x894c	; 0x894c <_Z14keyTransmitterb>
    1b44:	10 92 20 46 	sts	0x4620, r1	; 0x804620 <g_event_enabled>
    1b48:	10 92 21 46 	sts	0x4621, r1	; 0x804621 <g_event_commenced>
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	80 93 22 46 	sts	0x4622, r24	; 0x804622 <g_check_for_next_event>
    1b52:	8a e5       	ldi	r24, 0x5A	; 90
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1b5a:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1b5e:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1b62:	88 23       	and	r24, r24
    1b64:	19 f0       	breq	.+6      	; 0x1b6c <__vector_41+0x218>
    1b66:	8c e3       	ldi	r24, 0x3C	; 60
    1b68:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b6c:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_event_enabled>
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <__vector_41+0x222>
    1b74:	32 c2       	rjmp	.+1124   	; 0x1fda <__vector_41+0x686>
    1b76:	00 91 21 46 	lds	r16, 0x4621	; 0x804621 <g_event_commenced>
    1b7a:	00 23       	and	r16, r16
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <__vector_41+0x22c>
    1b7e:	a2 c1       	rjmp	.+836    	; 0x1ec4 <__vector_41+0x570>
    1b80:	80 91 e4 45 	lds	r24, 0x45E4	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    1b84:	90 91 e5 45 	lds	r25, 0x45E5	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    1b88:	89 2b       	or	r24, r25
    1b8a:	49 f0       	breq	.+18     	; 0x1b9e <__vector_41+0x24a>
    1b8c:	80 91 e4 45 	lds	r24, 0x45E4	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    1b90:	90 91 e5 45 	lds	r25, 0x45E5	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    1b9a:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    1b9e:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    1ba2:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1ba6:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1baa:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1bae:	89 2b       	or	r24, r25
    1bb0:	8a 2b       	or	r24, r26
    1bb2:	8b 2b       	or	r24, r27
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <__vector_41+0x264>
    1bb6:	11 c2       	rjmp	.+1058   	; 0x1fda <__vector_41+0x686>
    1bb8:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    1bbc:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1bc0:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1bc4:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1bc8:	18 16       	cp	r1, r24
    1bca:	19 06       	cpc	r1, r25
    1bcc:	1a 06       	cpc	r1, r26
    1bce:	1b 06       	cpc	r1, r27
    1bd0:	0c f0       	brlt	.+2      	; 0x1bd4 <__vector_41+0x280>
    1bd2:	26 c1       	rjmp	.+588    	; 0x1e20 <__vector_41+0x4cc>
    1bd4:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    1bd8:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1bdc:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1be0:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	a1 09       	sbc	r26, r1
    1be8:	b1 09       	sbc	r27, r1
    1bea:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    1bee:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1bf2:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1bf6:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1bfa:	80 91 e4 45 	lds	r24, 0x45E4	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    1bfe:	90 91 e5 45 	lds	r25, 0x45E5	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    1c02:	89 2b       	or	r24, r25
    1c04:	41 f4       	brne	.+16     	; 0x1c16 <__vector_41+0x2c2>
    1c06:	80 91 14 46 	lds	r24, 0x4614	; 0x804614 <g_time_needed_for_ID>
    1c0a:	90 91 15 46 	lds	r25, 0x4615	; 0x804615 <g_time_needed_for_ID+0x1>
    1c0e:	89 2b       	or	r24, r25
    1c10:	21 f4       	brne	.+8      	; 0x1c1a <__vector_41+0x2c6>
    1c12:	81 2f       	mov	r24, r17
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <__vector_41+0x2c8>
    1c16:	81 2f       	mov	r24, r17
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <__vector_41+0x2c8>
    1c1a:	80 2f       	mov	r24, r16
    1c1c:	88 23       	and	r24, r24
    1c1e:	81 f1       	breq	.+96     	; 0x1c80 <__vector_41+0x32c>
    1c20:	80 91 14 46 	lds	r24, 0x4614	; 0x804614 <g_time_needed_for_ID>
    1c24:	90 91 15 46 	lds	r25, 0x4615	; 0x804615 <g_time_needed_for_ID+0x1>
    1c28:	a0 e0       	ldi	r26, 0x00	; 0
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	40 91 e0 45 	lds	r20, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    1c30:	50 91 e1 45 	lds	r21, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1c34:	60 91 e2 45 	lds	r22, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1c38:	70 91 e3 45 	lds	r23, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1c3c:	84 17       	cp	r24, r20
    1c3e:	95 07       	cpc	r25, r21
    1c40:	a6 07       	cpc	r26, r22
    1c42:	b7 07       	cpc	r27, r23
    1c44:	e9 f4       	brne	.+58     	; 0x1c80 <__vector_41+0x32c>
    1c46:	8f ee       	ldi	r24, 0xEF	; 239
    1c48:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    1c4c:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1c50:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1c54:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    1c58:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    1c5c:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1c60:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    1c64:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1c68:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1c6c:	1d 82       	std	Y+5, r1	; 0x05
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	be 01       	movw	r22, r28
    1c74:	6b 5f       	subi	r22, 0xFB	; 251
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	8f ef       	ldi	r24, 0xFF	; 255
    1c7a:	95 e4       	ldi	r25, 0x45	; 69
    1c7c:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
    1c80:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    1c84:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1c88:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1c8c:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1c90:	89 2b       	or	r24, r25
    1c92:	8a 2b       	or	r24, r26
    1c94:	8b 2b       	or	r24, r27
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <__vector_41+0x346>
    1c98:	a0 c1       	rjmp	.+832    	; 0x1fda <__vector_41+0x686>
    1c9a:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1c9e:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1ca2:	89 2b       	or	r24, r25
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <__vector_41+0x354>
    1ca6:	a3 c0       	rjmp	.+326    	; 0x1dee <__vector_41+0x49a>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	0e 94 a6 44 	call	0x894c	; 0x894c <_Z14keyTransmitterb>
    1cae:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1cb2:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1cb6:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    1cba:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1cbe:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1cc2:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1cc6:	05 2e       	mov	r0, r21
    1cc8:	00 0c       	add	r0, r0
    1cca:	66 0b       	sbc	r22, r22
    1ccc:	77 0b       	sbc	r23, r23
    1cce:	84 1b       	sub	r24, r20
    1cd0:	95 0b       	sbc	r25, r21
    1cd2:	a6 0b       	sbc	r26, r22
    1cd4:	b7 0b       	sbc	r27, r23
    1cd6:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    1cda:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1cde:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1ce2:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	be 01       	movw	r22, r28
    1cf0:	6b 5f       	subi	r22, 0xFB	; 251
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	8a ee       	ldi	r24, 0xEA	; 234
    1cf6:	95 e4       	ldi	r25, 0x45	; 69
    1cf8:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
    1cfc:	8e ef       	ldi	r24, 0xFE	; 254
    1cfe:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    1d02:	ce 01       	movw	r24, r28
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	0e 94 9c 05 	call	0xb38	; 0xb38 <time>
    1d0a:	29 81       	ldd	r18, Y+1	; 0x01
    1d0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d0e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d10:	5c 81       	ldd	r21, Y+4	; 0x04
    1d12:	80 91 1c 46 	lds	r24, 0x461C	; 0x80461c <g_event_finish_time>
    1d16:	90 91 1d 46 	lds	r25, 0x461D	; 0x80461d <g_event_finish_time+0x1>
    1d1a:	a0 91 1e 46 	lds	r26, 0x461E	; 0x80461e <g_event_finish_time+0x2>
    1d1e:	b0 91 1f 46 	lds	r27, 0x461F	; 0x80461f <g_event_finish_time+0x3>
    1d22:	28 17       	cp	r18, r24
    1d24:	39 07       	cpc	r19, r25
    1d26:	4a 07       	cpc	r20, r26
    1d28:	5b 07       	cpc	r21, r27
    1d2a:	58 f4       	brcc	.+22     	; 0x1d42 <__vector_41+0x3ee>
    1d2c:	60 91 1c 46 	lds	r22, 0x461C	; 0x80461c <g_event_finish_time>
    1d30:	70 91 1d 46 	lds	r23, 0x461D	; 0x80461d <g_event_finish_time+0x1>
    1d34:	80 91 1e 46 	lds	r24, 0x461E	; 0x80461e <g_event_finish_time+0x2>
    1d38:	90 91 1f 46 	lds	r25, 0x461F	; 0x80461f <g_event_finish_time+0x3>
    1d3c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <_Z7timeDifmm>
    1d40:	03 c0       	rjmp	.+6      	; 0x1d48 <__vector_41+0x3f4>
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	cb 01       	movw	r24, r22
    1d48:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    1d4c:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d50:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    1d54:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1d58:	24 0f       	add	r18, r20
    1d5a:	35 1f       	adc	r19, r21
    1d5c:	21 5f       	subi	r18, 0xF1	; 241
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	03 2e       	mov	r0, r19
    1d62:	00 0c       	add	r0, r0
    1d64:	44 0b       	sbc	r20, r20
    1d66:	55 0b       	sbc	r21, r21
    1d68:	26 17       	cp	r18, r22
    1d6a:	37 07       	cpc	r19, r23
    1d6c:	48 07       	cpc	r20, r24
    1d6e:	59 07       	cpc	r21, r25
    1d70:	0c f0       	brlt	.+2      	; 0x1d74 <__vector_41+0x420>
    1d72:	33 c1       	rjmp	.+614    	; 0x1fda <__vector_41+0x686>
    1d74:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d78:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d7c:	40 97       	sbiw	r24, 0x10	; 16
    1d7e:	2c f0       	brlt	.+10     	; 0x1d8a <__vector_41+0x436>
    1d80:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1d84:	81 11       	cpse	r24, r1
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <__vector_41+0x436>
    1d88:	10 2f       	mov	r17, r16
    1d8a:	11 23       	and	r17, r17
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <__vector_41+0x43c>
    1d8e:	25 c1       	rjmp	.+586    	; 0x1fda <__vector_41+0x686>
    1d90:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d94:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d98:	0a 97       	sbiw	r24, 0x0a	; 10
    1d9a:	09 2e       	mov	r0, r25
    1d9c:	00 0c       	add	r0, r0
    1d9e:	aa 0b       	sbc	r26, r26
    1da0:	bb 0b       	sbc	r27, r27
    1da2:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1da6:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1daa:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1dae:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1db2:	82 e0       	ldi	r24, 0x02	; 2
    1db4:	80 93 e9 45 	sts	0x45E9, r24	; 0x8045e9 <_ZL11g_sleepType>
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	80 93 24 46 	sts	0x4624, r24	; 0x804624 <_ZL13g_go_to_sleep>
    1dbe:	80 91 e4 45 	lds	r24, 0x45E4	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    1dc2:	90 91 e5 45 	lds	r25, 0x45E5	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    1dc6:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep>
    1dca:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1dce:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1dd2:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1dd6:	84 1b       	sub	r24, r20
    1dd8:	95 0b       	sbc	r25, r21
    1dda:	18 16       	cp	r1, r24
    1ddc:	19 06       	cpc	r1, r25
    1dde:	14 f0       	brlt	.+4      	; 0x1de4 <__vector_41+0x490>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    1de8:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    1dec:	f6 c0       	rjmp	.+492    	; 0x1fda <__vector_41+0x686>
    1dee:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1df2:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1df6:	09 2e       	mov	r0, r25
    1df8:	00 0c       	add	r0, r0
    1dfa:	aa 0b       	sbc	r26, r26
    1dfc:	bb 0b       	sbc	r27, r27
    1dfe:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    1e02:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1e06:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1e0a:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1e0e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1e12:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    1e16:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1e1a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1e1e:	dd c0       	rjmp	.+442    	; 0x1fda <__vector_41+0x686>
    1e20:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    1e24:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1e28:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1e2c:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1e30:	bb 23       	and	r27, r27
    1e32:	0c f0       	brlt	.+2      	; 0x1e36 <__vector_41+0x4e2>
    1e34:	d2 c0       	rjmp	.+420    	; 0x1fda <__vector_41+0x686>
    1e36:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    1e3a:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1e3e:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1e42:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	a1 1d       	adc	r26, r1
    1e4a:	b1 1d       	adc	r27, r1
    1e4c:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    1e50:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1e54:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1e58:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1e5c:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    1e60:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1e64:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1e68:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1e6c:	89 2b       	or	r24, r25
    1e6e:	8a 2b       	or	r24, r26
    1e70:	8b 2b       	or	r24, r27
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <__vector_41+0x522>
    1e74:	b2 c0       	rjmp	.+356    	; 0x1fda <__vector_41+0x686>
    1e76:	8d ef       	ldi	r24, 0xFD	; 253
    1e78:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    1e7c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1e80:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1e84:	09 2e       	mov	r0, r25
    1e86:	00 0c       	add	r0, r0
    1e88:	aa 0b       	sbc	r26, r26
    1e8a:	bb 0b       	sbc	r27, r27
    1e8c:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    1e90:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1e94:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1e98:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1e9c:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1ea0:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    1ea4:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1ea8:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	be 01       	movw	r22, r28
    1eb6:	6b 5f       	subi	r22, 0xFB	; 251
    1eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eba:	8a ee       	ldi	r24, 0xEA	; 234
    1ebc:	95 e4       	ldi	r25, 0x45	; 69
    1ebe:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
    1ec2:	8b c0       	rjmp	.+278    	; 0x1fda <__vector_41+0x686>
    1ec4:	80 91 18 46 	lds	r24, 0x4618	; 0x804618 <g_event_start_time>
    1ec8:	90 91 19 46 	lds	r25, 0x4619	; 0x804619 <g_event_start_time+0x1>
    1ecc:	a0 91 1a 46 	lds	r26, 0x461A	; 0x80461a <g_event_start_time+0x2>
    1ed0:	b0 91 1b 46 	lds	r27, 0x461B	; 0x80461b <g_event_start_time+0x3>
    1ed4:	89 2b       	or	r24, r25
    1ed6:	8a 2b       	or	r24, r26
    1ed8:	8b 2b       	or	r24, r27
    1eda:	09 f4       	brne	.+2      	; 0x1ede <__vector_41+0x58a>
    1edc:	7e c0       	rjmp	.+252    	; 0x1fda <__vector_41+0x686>
    1ede:	ce 01       	movw	r24, r28
    1ee0:	01 96       	adiw	r24, 0x01	; 1
    1ee2:	0e 94 9c 05 	call	0xb38	; 0xb38 <time>
    1ee6:	49 81       	ldd	r20, Y+1	; 0x01
    1ee8:	5a 81       	ldd	r21, Y+2	; 0x02
    1eea:	6b 81       	ldd	r22, Y+3	; 0x03
    1eec:	7c 81       	ldd	r23, Y+4	; 0x04
    1eee:	80 91 18 46 	lds	r24, 0x4618	; 0x804618 <g_event_start_time>
    1ef2:	90 91 19 46 	lds	r25, 0x4619	; 0x804619 <g_event_start_time+0x1>
    1ef6:	a0 91 1a 46 	lds	r26, 0x461A	; 0x80461a <g_event_start_time+0x2>
    1efa:	b0 91 1b 46 	lds	r27, 0x461B	; 0x80461b <g_event_start_time+0x3>
    1efe:	48 17       	cp	r20, r24
    1f00:	59 07       	cpc	r21, r25
    1f02:	6a 07       	cpc	r22, r26
    1f04:	7b 07       	cpc	r23, r27
    1f06:	08 f4       	brcc	.+2      	; 0x1f0a <__vector_41+0x5b6>
    1f08:	68 c0       	rjmp	.+208    	; 0x1fda <__vector_41+0x686>
    1f0a:	80 91 16 46 	lds	r24, 0x4616	; 0x804616 <g_intra_cycle_delay_time>
    1f0e:	90 91 17 46 	lds	r25, 0x4617	; 0x804617 <g_intra_cycle_delay_time+0x1>
    1f12:	89 2b       	or	r24, r25
    1f14:	59 f1       	breq	.+86     	; 0x1f6c <__vector_41+0x618>
    1f16:	8e ef       	ldi	r24, 0xFE	; 254
    1f18:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    1f1c:	80 91 16 46 	lds	r24, 0x4616	; 0x804616 <g_intra_cycle_delay_time>
    1f20:	90 91 17 46 	lds	r25, 0x4617	; 0x804617 <g_intra_cycle_delay_time+0x1>
    1f24:	91 95       	neg	r25
    1f26:	81 95       	neg	r24
    1f28:	91 09       	sbc	r25, r1
    1f2a:	09 2e       	mov	r0, r25
    1f2c:	00 0c       	add	r0, r0
    1f2e:	aa 0b       	sbc	r26, r26
    1f30:	bb 0b       	sbc	r27, r27
    1f32:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    1f36:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1f3a:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1f3e:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1f42:	20 91 16 46 	lds	r18, 0x4616	; 0x804616 <g_intra_cycle_delay_time>
    1f46:	30 91 17 46 	lds	r19, 0x4617	; 0x804617 <g_intra_cycle_delay_time+0x1>
    1f4a:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f4e:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f52:	82 0f       	add	r24, r18
    1f54:	93 1f       	adc	r25, r19
    1f56:	20 91 14 46 	lds	r18, 0x4614	; 0x804614 <g_time_needed_for_ID>
    1f5a:	30 91 15 46 	lds	r19, 0x4615	; 0x804615 <g_time_needed_for_ID+0x1>
    1f5e:	82 1b       	sub	r24, r18
    1f60:	93 0b       	sbc	r25, r19
    1f62:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    1f66:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    1f6a:	34 c0       	rjmp	.+104    	; 0x1fd4 <__vector_41+0x680>
    1f6c:	8d ef       	ldi	r24, 0xFD	; 253
    1f6e:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    1f72:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f76:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f7a:	09 2e       	mov	r0, r25
    1f7c:	00 0c       	add	r0, r0
    1f7e:	aa 0b       	sbc	r26, r26
    1f80:	bb 0b       	sbc	r27, r27
    1f82:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    1f86:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    1f8a:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    1f8e:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    1f92:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f96:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f9a:	20 91 14 46 	lds	r18, 0x4614	; 0x804614 <g_time_needed_for_ID>
    1f9e:	30 91 15 46 	lds	r19, 0x4615	; 0x804615 <g_time_needed_for_ID+0x1>
    1fa2:	82 1b       	sub	r24, r18
    1fa4:	93 0b       	sbc	r25, r19
    1fa6:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    1faa:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    1fae:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1fb2:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    1fb6:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1fba:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	be 01       	movw	r22, r28
    1fc8:	6b 5f       	subi	r22, 0xFB	; 251
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	8a ee       	ldi	r24, 0xEA	; 234
    1fce:	95 e4       	ldi	r25, 0x45	; 69
    1fd0:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	80 93 21 46 	sts	0x4621, r24	; 0x804621 <g_event_commenced>
    1fda:	80 91 e7 45 	lds	r24, 0x45E7	; 0x8045e7 <_ZL19g_wifi_enable_delay>
    1fde:	88 23       	and	r24, r24
    1fe0:	e1 f0       	breq	.+56     	; 0x201a <__vector_41+0x6c6>
    1fe2:	80 91 e7 45 	lds	r24, 0x45E7	; 0x8045e7 <_ZL19g_wifi_enable_delay>
    1fe6:	81 50       	subi	r24, 0x01	; 1
    1fe8:	80 93 e7 45 	sts	0x45E7, r24	; 0x8045e7 <_ZL19g_wifi_enable_delay>
    1fec:	80 91 e7 45 	lds	r24, 0x45E7	; 0x8045e7 <_ZL19g_wifi_enable_delay>
    1ff0:	85 30       	cpi	r24, 0x05	; 5
    1ff2:	39 f4       	brne	.+14     	; 0x2002 <__vector_41+0x6ae>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	0e 94 13 29 	call	0x5226	; 0x5226 <_Z10wifi_powerb>
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	0e 94 1d 29 	call	0x523a	; 0x523a <_Z10wifi_resetb>
    2000:	5e c0       	rjmp	.+188    	; 0x20be <__vector_41+0x76a>
    2002:	80 91 e7 45 	lds	r24, 0x45E7	; 0x8045e7 <_ZL19g_wifi_enable_delay>
    2006:	81 11       	cpse	r24, r1
    2008:	5a c0       	rjmp	.+180    	; 0x20be <__vector_41+0x76a>
    200a:	46 e0       	ldi	r20, 0x06	; 6
    200c:	60 e8       	ldi	r22, 0x80	; 128
    200e:	75 e2       	ldi	r23, 0x25	; 37
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_Z12linkbus_initm14USART_Number_t>
    2018:	52 c0       	rjmp	.+164    	; 0x20be <__vector_41+0x76a>
    201a:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    201e:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    2022:	89 2b       	or	r24, r25
    2024:	69 f0       	breq	.+26     	; 0x2040 <__vector_41+0x6ec>
    2026:	80 91 e8 45 	lds	r24, 0x45E8	; 0x8045e8 <_ZL20g_shutting_down_wifi>
    202a:	81 11       	cpse	r24, r1
    202c:	0c c0       	rjmp	.+24     	; 0x2046 <__vector_41+0x6f2>
    202e:	90 91 22 46 	lds	r25, 0x4622	; 0x804622 <g_check_for_next_event>
    2032:	91 11       	cpse	r25, r1
    2034:	08 c0       	rjmp	.+16     	; 0x2046 <__vector_41+0x6f2>
    2036:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_waiting_for_next_event>
    203a:	99 23       	and	r25, r25
    203c:	19 f0       	breq	.+6      	; 0x2044 <__vector_41+0x6f0>
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <__vector_41+0x6f2>
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <__vector_41+0x6f2>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	88 23       	and	r24, r24
    2048:	99 f1       	breq	.+102    	; 0x20b0 <__vector_41+0x75c>
    204a:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    204e:	88 23       	and	r24, r24
    2050:	79 f1       	breq	.+94     	; 0x20b0 <__vector_41+0x75c>
    2052:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2056:	81 50       	subi	r24, 0x01	; 1
    2058:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    205c:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2060:	81 11       	cpse	r24, r1
    2062:	26 c0       	rjmp	.+76     	; 0x20b0 <__vector_41+0x75c>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	0e 94 1d 29 	call	0x523a	; 0x523a <_Z10wifi_resetb>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	0e 94 13 29 	call	0x5226	; 0x5226 <_Z10wifi_powerb>
    2070:	10 92 e8 45 	sts	0x45E8, r1	; 0x8045e8 <_ZL20g_shutting_down_wifi>
    2074:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_event_enabled>
    2078:	81 11       	cpse	r24, r1
    207a:	12 c0       	rjmp	.+36     	; 0x20a0 <__vector_41+0x74c>
    207c:	84 e0       	ldi	r24, 0x04	; 4
    207e:	80 93 e9 45 	sts	0x45E9, r24	; 0x8045e9 <_ZL11g_sleepType>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 93 24 46 	sts	0x4624, r24	; 0x804624 <_ZL13g_go_to_sleep>
    2088:	8f ef       	ldi	r24, 0xFF	; 255
    208a:	9f ef       	ldi	r25, 0xFF	; 255
    208c:	dc 01       	movw	r26, r24
    208e:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    2092:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    2096:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    209a:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    209e:	06 c0       	rjmp	.+12     	; 0x20ac <__vector_41+0x758>
    20a0:	80 91 e9 45 	lds	r24, 0x45E9	; 0x8045e9 <_ZL11g_sleepType>
    20a4:	83 30       	cpi	r24, 0x03	; 3
    20a6:	11 f4       	brne	.+4      	; 0x20ac <__vector_41+0x758>
    20a8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12eventEnabledv>
    20ac:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    20b0:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    20b4:	88 23       	and	r24, r24
    20b6:	19 f0       	breq	.+6      	; 0x20be <__vector_41+0x76a>
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	80 93 e6 45 	sts	0x45E6, r24	; 0x8045e6 <_ZL16g_report_seconds>
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    20c4:	25 96       	adiw	r28, 0x05	; 5
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	ff 91       	pop	r31
    20d0:	ef 91       	pop	r30
    20d2:	bf 91       	pop	r27
    20d4:	af 91       	pop	r26
    20d6:	9f 91       	pop	r25
    20d8:	8f 91       	pop	r24
    20da:	7f 91       	pop	r23
    20dc:	6f 91       	pop	r22
    20de:	5f 91       	pop	r21
    20e0:	4f 91       	pop	r20
    20e2:	3f 91       	pop	r19
    20e4:	2f 91       	pop	r18
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	0f 90       	pop	r0
    20ec:	0b be       	out	0x3b, r0	; 59
    20ee:	0f 90       	pop	r0
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	0f 90       	pop	r0
    20f4:	1f 90       	pop	r1
    20f6:	18 95       	reti

000020f8 <__vector_12>:
    20f8:	1f 92       	push	r1
    20fa:	0f 92       	push	r0
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	0f 92       	push	r0
    2100:	11 24       	eor	r1, r1
    2102:	0b b6       	in	r0, 0x3b	; 59
    2104:	0f 92       	push	r0
    2106:	2f 93       	push	r18
    2108:	3f 93       	push	r19
    210a:	4f 93       	push	r20
    210c:	5f 93       	push	r21
    210e:	6f 93       	push	r22
    2110:	7f 93       	push	r23
    2112:	8f 93       	push	r24
    2114:	9f 93       	push	r25
    2116:	af 93       	push	r26
    2118:	bf 93       	push	r27
    211a:	ef 93       	push	r30
    211c:	ff 93       	push	r31
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	00 d0       	rcall	.+0      	; 0x2124 <__vector_12+0x2c>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    212c:	80 ff       	sbrs	r24, 0
    212e:	cd c0       	rjmp	.+410    	; 0x22ca <__vector_12+0x1d2>
    2130:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2134:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2138:	89 2b       	or	r24, r25
    213a:	49 f0       	breq	.+18     	; 0x214e <__vector_12+0x56>
    213c:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2140:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    214a:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    214e:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2152:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2156:	89 2b       	or	r24, r25
    2158:	49 f0       	breq	.+18     	; 0x216c <__vector_12+0x74>
    215a:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    215e:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    2168:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    216c:	80 91 dd 45 	lds	r24, 0x45DD	; 0x8045dd <_ZL21g_util_tick_countdown>
    2170:	90 91 de 45 	lds	r25, 0x45DE	; 0x8045de <_ZL21g_util_tick_countdown+0x1>
    2174:	89 2b       	or	r24, r25
    2176:	49 f0       	breq	.+18     	; 0x218a <__vector_12+0x92>
    2178:	80 91 dd 45 	lds	r24, 0x45DD	; 0x8045dd <_ZL21g_util_tick_countdown>
    217c:	90 91 de 45 	lds	r25, 0x45DE	; 0x8045de <_ZL21g_util_tick_countdown+0x1>
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	80 93 dd 45 	sts	0x45DD, r24	; 0x8045dd <_ZL21g_util_tick_countdown>
    2186:	90 93 de 45 	sts	0x45DE, r25	; 0x8045de <_ZL21g_util_tick_countdown+0x1>
    218a:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_event_enabled>
    218e:	88 23       	and	r24, r24
    2190:	19 f0       	breq	.+6      	; 0x2198 <__vector_12+0xa0>
    2192:	80 91 21 46 	lds	r24, 0x4621	; 0x804621 <g_event_commenced>
    2196:	01 c0       	rjmp	.+2      	; 0x219a <__vector_12+0xa2>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	88 23       	and	r24, r24
    219c:	09 f4       	brne	.+2      	; 0x21a0 <__vector_12+0xa8>
    219e:	92 c0       	rjmp	.+292    	; 0x22c4 <__vector_12+0x1cc>
    21a0:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    21a4:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    21a8:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    21ac:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    21b0:	18 16       	cp	r1, r24
    21b2:	19 06       	cpc	r1, r25
    21b4:	1a 06       	cpc	r1, r26
    21b6:	1b 06       	cpc	r1, r27
    21b8:	0c f0       	brlt	.+2      	; 0x21bc <__vector_12+0xc4>
    21ba:	66 c0       	rjmp	.+204    	; 0x2288 <__vector_12+0x190>
    21bc:	80 91 4e 46 	lds	r24, 0x464E	; 0x80464e <_ZZ11__vector_12E7codeInc>
    21c0:	90 91 4f 46 	lds	r25, 0x464F	; 0x80464f <_ZZ11__vector_12E7codeInc+0x1>
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	09 f4       	brne	.+2      	; 0x21ca <__vector_12+0xd2>
    21c8:	47 c0       	rjmp	.+142    	; 0x2258 <__vector_12+0x160>
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	80 93 4e 46 	sts	0x464E, r24	; 0x80464e <_ZZ11__vector_12E7codeInc>
    21d0:	90 93 4f 46 	sts	0x464F, r25	; 0x80464f <_ZZ11__vector_12E7codeInc+0x1>
    21d4:	89 2b       	or	r24, r25
    21d6:	09 f0       	breq	.+2      	; 0x21da <__vector_12+0xe2>
    21d8:	75 c0       	rjmp	.+234    	; 0x22c4 <__vector_12+0x1cc>
    21da:	ae 01       	movw	r20, r28
    21dc:	4f 5f       	subi	r20, 0xFF	; 255
    21de:	5f 4f       	sbci	r21, 0xFF	; 255
    21e0:	be 01       	movw	r22, r28
    21e2:	6e 5f       	subi	r22, 0xFE	; 254
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
    21ee:	80 93 50 46 	sts	0x4650, r24	; 0x804650 <_ZZ11__vector_12E3key>
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	81 11       	cpse	r24, r1
    21f6:	25 c0       	rjmp	.+74     	; 0x2242 <__vector_12+0x14a>
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	88 23       	and	r24, r24
    21fc:	11 f1       	breq	.+68     	; 0x2242 <__vector_12+0x14a>
    21fe:	8d ef       	ldi	r24, 0xFD	; 253
    2200:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    2204:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2208:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    220c:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2210:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	8a 83       	std	Y+2, r24	; 0x02
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	be 01       	movw	r22, r28
    221e:	6e 5f       	subi	r22, 0xFE	; 254
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	8a ee       	ldi	r24, 0xEA	; 234
    2224:	95 e4       	ldi	r25, 0x45	; 69
    2226:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
    222a:	ae 01       	movw	r20, r28
    222c:	4f 5f       	subi	r20, 0xFF	; 255
    222e:	5f 4f       	sbci	r21, 0xFF	; 255
    2230:	be 01       	movw	r22, r28
    2232:	6e 5f       	subi	r22, 0xFE	; 254
    2234:	7f 4f       	sbci	r23, 0xFF	; 255
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
    223e:	80 93 50 46 	sts	0x4650, r24	; 0x804650 <_ZZ11__vector_12E3key>
    2242:	80 91 50 46 	lds	r24, 0x4650	; 0x804650 <_ZZ11__vector_12E3key>
    2246:	88 23       	and	r24, r24
    2248:	e9 f1       	breq	.+122    	; 0x22c4 <__vector_12+0x1cc>
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	0e 94 a2 44 	call	0x8944	; 0x8944 <_Z18powerToTransmitterb>
    2250:	89 b1       	in	r24, 0x09	; 9
    2252:	8f 7b       	andi	r24, 0xBF	; 191
    2254:	89 b9       	out	0x09, r24	; 9
    2256:	36 c0       	rjmp	.+108    	; 0x22c4 <__vector_12+0x1cc>
    2258:	80 91 50 46 	lds	r24, 0x4650	; 0x804650 <_ZZ11__vector_12E3key>
    225c:	0e 94 a6 44 	call	0x894c	; 0x894c <_Z14keyTransmitterb>
    2260:	80 91 50 46 	lds	r24, 0x4650	; 0x804650 <_ZZ11__vector_12E3key>
    2264:	81 11       	cpse	r24, r1
    2266:	04 c0       	rjmp	.+8      	; 0x2270 <__vector_12+0x178>
    2268:	89 b1       	in	r24, 0x09	; 9
    226a:	80 64       	ori	r24, 0x40	; 64
    226c:	89 b9       	out	0x09, r24	; 9
    226e:	03 c0       	rjmp	.+6      	; 0x2276 <__vector_12+0x17e>
    2270:	89 b1       	in	r24, 0x09	; 9
    2272:	8f 7b       	andi	r24, 0xBF	; 191
    2274:	89 b9       	out	0x09, r24	; 9
    2276:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    227a:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    227e:	80 93 4e 46 	sts	0x464E, r24	; 0x80464e <_ZZ11__vector_12E7codeInc>
    2282:	90 93 4f 46 	sts	0x464F, r25	; 0x80464f <_ZZ11__vector_12E7codeInc+0x1>
    2286:	1e c0       	rjmp	.+60     	; 0x22c4 <__vector_12+0x1cc>
    2288:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    228c:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    2290:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    2294:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    2298:	89 2b       	or	r24, r25
    229a:	8a 2b       	or	r24, r26
    229c:	8b 2b       	or	r24, r27
    229e:	91 f4       	brne	.+36     	; 0x22c4 <__vector_12+0x1cc>
    22a0:	80 91 50 46 	lds	r24, 0x4650	; 0x804650 <_ZZ11__vector_12E3key>
    22a4:	88 23       	and	r24, r24
    22a6:	71 f0       	breq	.+28     	; 0x22c4 <__vector_12+0x1cc>
    22a8:	10 92 50 46 	sts	0x4650, r1	; 0x804650 <_ZZ11__vector_12E3key>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	0e 94 a6 44 	call	0x894c	; 0x894c <_Z14keyTransmitterb>
    22b2:	89 b1       	in	r24, 0x09	; 9
    22b4:	80 64       	ori	r24, 0x40	; 64
    22b6:	89 b9       	out	0x09, r24	; 9
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	0e 94 a2 44 	call	0x8944	; 0x8944 <_Z18powerToTransmitterb>
    22be:	8e ef       	ldi	r24, 0xFE	; 254
    22c0:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	ff 91       	pop	r31
    22d4:	ef 91       	pop	r30
    22d6:	bf 91       	pop	r27
    22d8:	af 91       	pop	r26
    22da:	9f 91       	pop	r25
    22dc:	8f 91       	pop	r24
    22de:	7f 91       	pop	r23
    22e0:	6f 91       	pop	r22
    22e2:	5f 91       	pop	r21
    22e4:	4f 91       	pop	r20
    22e6:	3f 91       	pop	r19
    22e8:	2f 91       	pop	r18
    22ea:	0f 90       	pop	r0
    22ec:	0b be       	out	0x3b, r0	; 59
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	0f 90       	pop	r0
    22f4:	1f 90       	pop	r1
    22f6:	18 95       	reti

000022f8 <main>:
    22f8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <atmel_start_init>
    22fc:	89 b1       	in	r24, 0x09	; 9
    22fe:	80 64       	ori	r24, 0x40	; 64
    2300:	89 b9       	out	0x09, r24	; 9
    2302:	84 e3       	ldi	r24, 0x34	; 52
    2304:	96 e4       	ldi	r25, 0x46	; 70
    2306:	0e 94 bf 32 	call	0x657e	; 0x657e <_ZN13EepromManager20initializeEEPROMVarsEv>
    230a:	84 e3       	ldi	r24, 0x34	; 52
    230c:	96 e4       	ldi	r25, 0x46	; 70
    230e:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <_ZN13EepromManager11readNonVolsEv>
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	0e 94 93 28 	call	0x5126	; 0x5126 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
    2318:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <sb_send_NewLine>
    231c:	87 e4       	ldi	r24, 0x47	; 71
    231e:	90 e4       	ldi	r25, 0x40	; 64
    2320:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    2324:	84 e6       	ldi	r24, 0x64	; 100
    2326:	90 e4       	ldi	r25, 0x40	; 64
    2328:	9f 93       	push	r25
    232a:	8f 93       	push	r24
    232c:	88 e6       	ldi	r24, 0x68	; 104
    232e:	90 e4       	ldi	r25, 0x40	; 64
    2330:	9f 93       	push	r25
    2332:	8f 93       	push	r24
    2334:	89 ea       	ldi	r24, 0xA9	; 169
    2336:	95 e4       	ldi	r25, 0x45	; 69
    2338:	9f 93       	push	r25
    233a:	8f 93       	push	r24
    233c:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    2340:	89 ea       	ldi	r24, 0xA9	; 169
    2342:	95 e4       	ldi	r25, 0x45	; 69
    2344:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    2348:	85 e7       	ldi	r24, 0x75	; 117
    234a:	90 e4       	ldi	r25, 0x40	; 64
    234c:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    2350:	0e 94 56 45 	call	0x8aac	; 0x8aac <_Z16init_transmitterv>
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	82 3d       	cpi	r24, 0xD2	; 210
    2362:	31 f4       	brne	.+12     	; 0x2370 <main+0x78>
    2364:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <sb_send_NewLine>
    2368:	88 eb       	ldi	r24, 0xB8	; 184
    236a:	91 e4       	ldi	r25, 0x41	; 65
    236c:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    2370:	0e 94 f6 21 	call	0x43ec	; 0x43ec <_Z8rtc_initv>
    2374:	8c 3f       	cpi	r24, 0xFC	; 252
    2376:	31 f4       	brne	.+12     	; 0x2384 <main+0x8c>
    2378:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <sb_send_NewLine>
    237c:	83 ee       	ldi	r24, 0xE3	; 227
    237e:	91 e4       	ldi	r25, 0x41	; 65
    2380:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    2384:	0e 94 27 29 	call	0x524e	; 0x524e <_Z11wifiPresentv>
    2388:	81 11       	cpse	r24, r1
    238a:	06 c0       	rjmp	.+12     	; 0x2398 <main+0xa0>
    238c:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <sb_send_NewLine>
    2390:	8b e0       	ldi	r24, 0x0B	; 11
    2392:	92 e4       	ldi	r25, 0x42	; 66
    2394:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    2398:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <sb_send_NewLine>
    239c:	0e 94 cc 3b 	call	0x7798	; 0x7798 <sb_send_NewPrompt>
    23a0:	6a ef       	ldi	r22, 0xFA	; 250
    23a2:	70 e0       	ldi	r23, 0x00	; 0
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 a9 43 	call	0x8752	; 0x8752 <util_delay_ms>
    23ac:	88 23       	and	r24, r24
    23ae:	c1 f3       	breq	.-16     	; 0x23a0 <main+0xa8>
    23b0:	0e 94 91 18 	call	0x3122	; 0x3122 <_Z17handleLinkBusMsgsv>
    23b4:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_Z19handleSerialBusMsgsv>
    23b8:	f3 cf       	rjmp	.-26     	; 0x23a0 <main+0xa8>

000023ba <_Z19handleSerialBusMsgsv>:
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	cd 57       	subi	r28, 0x7D	; 125
    23cc:	d1 09       	sbc	r29, r1
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0e 94 05 3b 	call	0x760a	; 0x760a <nextFullSBRxBuffer>
    23d6:	8e 83       	std	Y+6, r24	; 0x06
    23d8:	9f 83       	std	Y+7, r25	; 0x07
    23da:	21 e0       	ldi	r18, 0x01	; 1
    23dc:	8e 81       	ldd	r24, Y+6	; 0x06
    23de:	9f 81       	ldd	r25, Y+7	; 0x07
    23e0:	89 2b       	or	r24, r25
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <_Z19handleSerialBusMsgsv+0x2c>
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	22 23       	and	r18, r18
    23e8:	09 f4       	brne	.+2      	; 0x23ec <_Z19handleSerialBusMsgsv+0x32>
    23ea:	8f c6       	rjmp	.+3358   	; 0x310a <_Z19handleSerialBusMsgsv+0xd50>
    23ec:	8e 81       	ldd	r24, Y+6	; 0x06
    23ee:	9f 81       	ldd	r25, Y+7	; 0x07
    23f0:	fc 01       	movw	r30, r24
    23f2:	81 81       	ldd	r24, Z+1	; 0x01
    23f4:	92 81       	ldd	r25, Z+2	; 0x02
    23f6:	88 87       	std	Y+8, r24	; 0x08
    23f8:	99 87       	std	Y+9, r25	; 0x09
    23fa:	88 85       	ldd	r24, Y+8	; 0x08
    23fc:	99 85       	ldd	r25, Y+9	; 0x09
    23fe:	8a 3e       	cpi	r24, 0xEA	; 234
    2400:	f2 e2       	ldi	r31, 0x22	; 34
    2402:	9f 07       	cpc	r25, r31
    2404:	09 f4       	brne	.+2      	; 0x2408 <_Z19handleSerialBusMsgsv+0x4e>
    2406:	71 c3       	rjmp	.+1762   	; 0x2aea <_Z19handleSerialBusMsgsv+0x730>
    2408:	8b 3e       	cpi	r24, 0xEB	; 235
    240a:	22 e2       	ldi	r18, 0x22	; 34
    240c:	92 07       	cpc	r25, r18
    240e:	b8 f4       	brcc	.+46     	; 0x243e <_Z19handleSerialBusMsgsv+0x84>
    2410:	8f 36       	cpi	r24, 0x6F	; 111
    2412:	ed e1       	ldi	r30, 0x1D	; 29
    2414:	9e 07       	cpc	r25, r30
    2416:	09 f4       	brne	.+2      	; 0x241a <_Z19handleSerialBusMsgsv+0x60>
    2418:	ba c3       	rjmp	.+1908   	; 0x2b8e <_Z19handleSerialBusMsgsv+0x7d4>
    241a:	80 37       	cpi	r24, 0x70	; 112
    241c:	fd e1       	ldi	r31, 0x1D	; 29
    241e:	9f 07       	cpc	r25, r31
    2420:	28 f4       	brcc	.+10     	; 0x242c <_Z19handleSerialBusMsgsv+0x72>
    2422:	8e 31       	cpi	r24, 0x1E	; 30
    2424:	93 40       	sbci	r25, 0x03	; 3
    2426:	09 f4       	brne	.+2      	; 0x242a <_Z19handleSerialBusMsgsv+0x70>
    2428:	4e c2       	rjmp	.+1180   	; 0x28c6 <_Z19handleSerialBusMsgsv+0x50c>
    242a:	5d c6       	rjmp	.+3258   	; 0x30e6 <_Z19handleSerialBusMsgsv+0xd2c>
    242c:	86 3c       	cpi	r24, 0xC6	; 198
    242e:	ee e1       	ldi	r30, 0x1E	; 30
    2430:	9e 07       	cpc	r25, r30
    2432:	e9 f0       	breq	.+58     	; 0x246e <_Z19handleSerialBusMsgsv+0xb4>
    2434:	81 3d       	cpi	r24, 0xD1	; 209
    2436:	9e 41       	sbci	r25, 0x1E	; 30
    2438:	09 f4       	brne	.+2      	; 0x243c <_Z19handleSerialBusMsgsv+0x82>
    243a:	7b c1       	rjmp	.+758    	; 0x2732 <_Z19handleSerialBusMsgsv+0x378>
    243c:	54 c6       	rjmp	.+3240   	; 0x30e6 <_Z19handleSerialBusMsgsv+0xd2c>
    243e:	82 37       	cpi	r24, 0x72	; 114
    2440:	23 e2       	ldi	r18, 0x23	; 35
    2442:	92 07       	cpc	r25, r18
    2444:	09 f4       	brne	.+2      	; 0x2448 <_Z19handleSerialBusMsgsv+0x8e>
    2446:	cd c2       	rjmp	.+1434   	; 0x29e2 <_Z19handleSerialBusMsgsv+0x628>
    2448:	83 37       	cpi	r24, 0x73	; 115
    244a:	e3 e2       	ldi	r30, 0x23	; 35
    244c:	9e 07       	cpc	r25, r30
    244e:	28 f4       	brcc	.+10     	; 0x245a <_Z19handleSerialBusMsgsv+0xa0>
    2450:	88 3f       	cpi	r24, 0xF8	; 248
    2452:	92 42       	sbci	r25, 0x22	; 34
    2454:	09 f4       	brne	.+2      	; 0x2458 <_Z19handleSerialBusMsgsv+0x9e>
    2456:	0a c1       	rjmp	.+532    	; 0x266c <_Z19handleSerialBusMsgsv+0x2b2>
    2458:	46 c6       	rjmp	.+3212   	; 0x30e6 <_Z19handleSerialBusMsgsv+0xd2c>
    245a:	84 33       	cpi	r24, 0x34	; 52
    245c:	24 e2       	ldi	r18, 0x24	; 36
    245e:	92 07       	cpc	r25, r18
    2460:	09 f4       	brne	.+2      	; 0x2464 <_Z19handleSerialBusMsgsv+0xaa>
    2462:	f5 c1       	rjmp	.+1002   	; 0x284e <_Z19handleSerialBusMsgsv+0x494>
    2464:	85 3c       	cpi	r24, 0xC5	; 197
    2466:	94 42       	sbci	r25, 0x24	; 36
    2468:	09 f4       	brne	.+2      	; 0x246c <_Z19handleSerialBusMsgsv+0xb2>
    246a:	29 c6       	rjmp	.+3154   	; 0x30be <_Z19handleSerialBusMsgsv+0xd04>
    246c:	3c c6       	rjmp	.+3192   	; 0x30e6 <_Z19handleSerialBusMsgsv+0xd2c>
    246e:	8e 81       	ldd	r24, Y+6	; 0x06
    2470:	9f 81       	ldd	r25, Y+7	; 0x07
    2472:	fc 01       	movw	r30, r24
    2474:	83 81       	ldd	r24, Z+3	; 0x03
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	89 2b       	or	r24, r25
    2484:	09 f4       	brne	.+2      	; 0x2488 <_Z19handleSerialBusMsgsv+0xce>
    2486:	d0 c0       	rjmp	.+416    	; 0x2628 <_Z19handleSerialBusMsgsv+0x26e>
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	82 34       	cpi	r24, 0x42	; 66
    248e:	91 05       	cpc	r25, r1
    2490:	19 f4       	brne	.+6      	; 0x2498 <_Z19handleSerialBusMsgsv+0xde>
    2492:	19 82       	std	Y+1, r1	; 0x01
    2494:	1a 82       	std	Y+2, r1	; 0x02
    2496:	ac c0       	rjmp	.+344    	; 0x25f0 <_Z19handleSerialBusMsgsv+0x236>
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	86 34       	cpi	r24, 0x46	; 70
    249e:	91 05       	cpc	r25, r1
    24a0:	29 f4       	brne	.+10     	; 0x24ac <_Z19handleSerialBusMsgsv+0xf2>
    24a2:	86 e0       	ldi	r24, 0x06	; 6
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	9a 83       	std	Y+2, r25	; 0x02
    24aa:	a2 c0       	rjmp	.+324    	; 0x25f0 <_Z19handleSerialBusMsgsv+0x236>
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	83 34       	cpi	r24, 0x43	; 67
    24b2:	91 05       	cpc	r25, r1
    24b4:	b9 f5       	brne	.+110    	; 0x2524 <_Z19handleSerialBusMsgsv+0x16a>
    24b6:	8e 81       	ldd	r24, Y+6	; 0x06
    24b8:	9f 81       	ldd	r25, Y+7	; 0x07
    24ba:	fc 01       	movw	r30, r24
    24bc:	87 89       	ldd	r24, Z+23	; 0x17
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	8e 81       	ldd	r24, Y+6	; 0x06
    24c2:	9f 81       	ldd	r25, Y+7	; 0x07
    24c4:	fc 01       	movw	r30, r24
    24c6:	10 8e       	std	Z+24, r1	; 0x18
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	82 34       	cpi	r24, 0x42	; 66
    24cc:	11 f4       	brne	.+4      	; 0x24d2 <_Z19handleSerialBusMsgsv+0x118>
    24ce:	80 e3       	ldi	r24, 0x30	; 48
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	c0 97       	sbiw	r24, 0x30	; 48
    24da:	0a 97       	sbiw	r24, 0x0a	; 10
    24dc:	08 f0       	brcs	.+2      	; 0x24e0 <_Z19handleSerialBusMsgsv+0x126>
    24de:	88 c0       	rjmp	.+272    	; 0x25f0 <_Z19handleSerialBusMsgsv+0x236>
    24e0:	8e 81       	ldd	r24, Y+6	; 0x06
    24e2:	9f 81       	ldd	r25, Y+7	; 0x07
    24e4:	47 96       	adiw	r24, 0x17	; 23
    24e6:	0e 94 15 4d 	call	0x9a2a	; 0x9a2a <atoi>
    24ea:	8a 87       	std	Y+10, r24	; 0x0a
    24ec:	9b 87       	std	Y+11, r25	; 0x0b
    24ee:	1c 86       	std	Y+12, r1	; 0x0c
    24f0:	85 e0       	ldi	r24, 0x05	; 5
    24f2:	8d 87       	std	Y+13, r24	; 0x0d
    24f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    24fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    24fe:	28 17       	cp	r18, r24
    2500:	39 07       	cpc	r19, r25
    2502:	24 f4       	brge	.+8      	; 0x250c <_Z19handleSerialBusMsgsv+0x152>
    2504:	8d 85       	ldd	r24, Y+13	; 0x0d
    2506:	88 2f       	mov	r24, r24
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	09 c0       	rjmp	.+18     	; 0x251e <_Z19handleSerialBusMsgsv+0x164>
    250c:	8c 85       	ldd	r24, Y+12	; 0x0c
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	2a 85       	ldd	r18, Y+10	; 0x0a
    2514:	3b 85       	ldd	r19, Y+11	; 0x0b
    2516:	82 17       	cp	r24, r18
    2518:	93 07       	cpc	r25, r19
    251a:	0c f4       	brge	.+2      	; 0x251e <_Z19handleSerialBusMsgsv+0x164>
    251c:	c9 01       	movw	r24, r18
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	66 c0       	rjmp	.+204    	; 0x25f0 <_Z19handleSerialBusMsgsv+0x236>
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	83 35       	cpi	r24, 0x53	; 83
    252a:	91 05       	cpc	r25, r1
    252c:	09 f0       	breq	.+2      	; 0x2530 <_Z19handleSerialBusMsgsv+0x176>
    252e:	59 c0       	rjmp	.+178    	; 0x25e2 <_Z19handleSerialBusMsgsv+0x228>
    2530:	1c 82       	std	Y+4, r1	; 0x04
    2532:	8e 81       	ldd	r24, Y+6	; 0x06
    2534:	9f 81       	ldd	r25, Y+7	; 0x07
    2536:	fc 01       	movw	r30, r24
    2538:	87 89       	ldd	r24, Z+23	; 0x17
    253a:	8e 87       	std	Y+14, r24	; 0x0e
    253c:	8e 81       	ldd	r24, Y+6	; 0x06
    253e:	9f 81       	ldd	r25, Y+7	; 0x07
    2540:	fc 01       	movw	r30, r24
    2542:	80 8d       	ldd	r24, Z+24	; 0x18
    2544:	8f 87       	std	Y+15, r24	; 0x0f
    2546:	8e 81       	ldd	r24, Y+6	; 0x06
    2548:	9f 81       	ldd	r25, Y+7	; 0x07
    254a:	fc 01       	movw	r30, r24
    254c:	11 8e       	std	Z+25, r1	; 0x19
    254e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2550:	82 34       	cpi	r24, 0x42	; 66
    2552:	11 f4       	brne	.+4      	; 0x2558 <_Z19handleSerialBusMsgsv+0x19e>
    2554:	1c 82       	std	Y+4, r1	; 0x04
    2556:	36 c0       	rjmp	.+108    	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    2558:	8e 85       	ldd	r24, Y+14	; 0x0e
    255a:	86 34       	cpi	r24, 0x46	; 70
    255c:	51 f4       	brne	.+20     	; 0x2572 <_Z19handleSerialBusMsgsv+0x1b8>
    255e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2560:	81 33       	cpi	r24, 0x31	; 49
    2562:	80 f1       	brcs	.+96     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    2564:	8f 85       	ldd	r24, Y+15	; 0x0f
    2566:	86 33       	cpi	r24, 0x36	; 54
    2568:	68 f5       	brcc	.+90     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    256a:	8f 85       	ldd	r24, Y+15	; 0x0f
    256c:	84 52       	subi	r24, 0x24	; 36
    256e:	8c 83       	std	Y+4, r24	; 0x04
    2570:	29 c0       	rjmp	.+82     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    2572:	8e 85       	ldd	r24, Y+14	; 0x0e
    2574:	83 35       	cpi	r24, 0x53	; 83
    2576:	69 f4       	brne	.+26     	; 0x2592 <_Z19handleSerialBusMsgsv+0x1d8>
    2578:	8f 85       	ldd	r24, Y+15	; 0x0f
    257a:	81 33       	cpi	r24, 0x31	; 49
    257c:	38 f0       	brcs	.+14     	; 0x258c <_Z19handleSerialBusMsgsv+0x1d2>
    257e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2580:	86 33       	cpi	r24, 0x36	; 54
    2582:	20 f4       	brcc	.+8      	; 0x258c <_Z19handleSerialBusMsgsv+0x1d2>
    2584:	8f 85       	ldd	r24, Y+15	; 0x0f
    2586:	89 52       	subi	r24, 0x29	; 41
    2588:	8c 83       	std	Y+4, r24	; 0x04
    258a:	1c c0       	rjmp	.+56     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    258c:	87 e0       	ldi	r24, 0x07	; 7
    258e:	8c 83       	std	Y+4, r24	; 0x04
    2590:	19 c0       	rjmp	.+50     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    2592:	8f 85       	ldd	r24, Y+15	; 0x0f
    2594:	86 34       	cpi	r24, 0x46	; 70
    2596:	51 f4       	brne	.+20     	; 0x25ac <_Z19handleSerialBusMsgsv+0x1f2>
    2598:	8e 85       	ldd	r24, Y+14	; 0x0e
    259a:	81 33       	cpi	r24, 0x31	; 49
    259c:	98 f0       	brcs	.+38     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    259e:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a0:	86 33       	cpi	r24, 0x36	; 54
    25a2:	80 f4       	brcc	.+32     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    25a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a6:	84 52       	subi	r24, 0x24	; 36
    25a8:	8c 83       	std	Y+4, r24	; 0x04
    25aa:	0c c0       	rjmp	.+24     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    25ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ae:	83 35       	cpi	r24, 0x53	; 83
    25b0:	49 f4       	brne	.+18     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    25b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b4:	81 33       	cpi	r24, 0x31	; 49
    25b6:	30 f0       	brcs	.+12     	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    25b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ba:	86 33       	cpi	r24, 0x36	; 54
    25bc:	18 f4       	brcc	.+6      	; 0x25c4 <_Z19handleSerialBusMsgsv+0x20a>
    25be:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c0:	89 52       	subi	r24, 0x29	; 41
    25c2:	8c 83       	std	Y+4, r24	; 0x04
    25c4:	8c 81       	ldd	r24, Y+4	; 0x04
    25c6:	87 30       	cpi	r24, 0x07	; 7
    25c8:	48 f0       	brcs	.+18     	; 0x25dc <_Z19handleSerialBusMsgsv+0x222>
    25ca:	8c 81       	ldd	r24, Y+4	; 0x04
    25cc:	82 31       	cpi	r24, 0x12	; 18
    25ce:	30 f4       	brcc	.+12     	; 0x25dc <_Z19handleSerialBusMsgsv+0x222>
    25d0:	8c 81       	ldd	r24, Y+4	; 0x04
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	9a 83       	std	Y+2, r25	; 0x02
    25da:	0a c0       	rjmp	.+20     	; 0x25f0 <_Z19handleSerialBusMsgsv+0x236>
    25dc:	19 82       	std	Y+1, r1	; 0x01
    25de:	1a 82       	std	Y+2, r1	; 0x02
    25e0:	07 c0       	rjmp	.+14     	; 0x25f0 <_Z19handleSerialBusMsgsv+0x236>
    25e2:	8e 81       	ldd	r24, Y+6	; 0x06
    25e4:	9f 81       	ldd	r25, Y+7	; 0x07
    25e6:	03 96       	adiw	r24, 0x03	; 3
    25e8:	0e 94 15 4d 	call	0x9a2a	; 0x9a2a <atoi>
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	99 23       	and	r25, r25
    25f6:	c4 f0       	brlt	.+48     	; 0x2628 <_Z19handleSerialBusMsgsv+0x26e>
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	42 97       	sbiw	r24, 0x12	; 18
    25fe:	a4 f4       	brge	.+40     	; 0x2628 <_Z19handleSerialBusMsgsv+0x26e>
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	8a ab       	std	Y+50, r24	; 0x32
    2604:	ce 01       	movw	r24, r28
    2606:	c2 96       	adiw	r24, 0x32	; 50
    2608:	ac 01       	movw	r20, r24
    260a:	69 e2       	ldi	r22, 0x29	; 41
    260c:	84 e3       	ldi	r24, 0x34	; 52
    260e:	96 e4       	ldi	r25, 0x46	; 70
    2610:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2614:	9a a9       	ldd	r25, Y+50	; 0x32
    2616:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    261a:	98 17       	cp	r25, r24
    261c:	29 f0       	breq	.+10     	; 0x2628 <_Z19handleSerialBusMsgsv+0x26e>
    261e:	ce 01       	movw	r24, r28
    2620:	c2 96       	adiw	r24, 0x32	; 50
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2628:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    262c:	88 2f       	mov	r24, r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	29 2f       	mov	r18, r25
    2632:	2f 93       	push	r18
    2634:	8f 93       	push	r24
    2636:	80 e3       	ldi	r24, 0x30	; 48
    2638:	92 e4       	ldi	r25, 0x42	; 66
    263a:	89 2f       	mov	r24, r25
    263c:	8f 93       	push	r24
    263e:	80 e3       	ldi	r24, 0x30	; 48
    2640:	92 e4       	ldi	r25, 0x42	; 66
    2642:	8f 93       	push	r24
    2644:	89 ea       	ldi	r24, 0xA9	; 169
    2646:	95 e4       	ldi	r25, 0x45	; 69
    2648:	89 2f       	mov	r24, r25
    264a:	8f 93       	push	r24
    264c:	89 ea       	ldi	r24, 0xA9	; 169
    264e:	95 e4       	ldi	r25, 0x45	; 69
    2650:	8f 93       	push	r24
    2652:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	89 ea       	ldi	r24, 0xA9	; 169
    2664:	95 e4       	ldi	r25, 0x45	; 69
    2666:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    266a:	47 c5       	rjmp	.+2702   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    266c:	8e 81       	ldd	r24, Y+6	; 0x06
    266e:	9f 81       	ldd	r25, Y+7	; 0x07
    2670:	fc 01       	movw	r30, r24
    2672:	83 81       	ldd	r24, Z+3	; 0x03
    2674:	88 23       	and	r24, r24
    2676:	e9 f1       	breq	.+122    	; 0x26f2 <_Z19handleSerialBusMsgsv+0x338>
    2678:	8e 81       	ldd	r24, Y+6	; 0x06
    267a:	9f 81       	ldd	r25, Y+7	; 0x07
    267c:	03 96       	adiw	r24, 0x03	; 3
    267e:	0e 94 15 4d 	call	0x9a2a	; 0x9a2a <atoi>
    2682:	80 93 51 46 	sts	0x4651, r24	; 0x804651 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    2686:	90 93 52 46 	sts	0x4652, r25	; 0x804652 <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    268a:	80 91 51 46 	lds	r24, 0x4651	; 0x804651 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    268e:	90 91 52 46 	lds	r25, 0x4652	; 0x804652 <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    2692:	89 38       	cpi	r24, 0x89	; 137
    2694:	93 41       	sbci	r25, 0x13	; 19
    2696:	68 f4       	brcc	.+26     	; 0x26b2 <_Z19handleSerialBusMsgsv+0x2f8>
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	81 e5       	ldi	r24, 0x51	; 81
    269e:	96 e4       	ldi	r25, 0x46	; 70
    26a0:	0e 94 c8 44 	call	0x8990	; 0x8990 <_Z15txSetParametersPjPb>
    26a4:	88 8b       	std	Y+16, r24	; 0x10
    26a6:	88 89       	ldd	r24, Y+16	; 0x10
    26a8:	88 23       	and	r24, r24
    26aa:	19 f0       	breq	.+6      	; 0x26b2 <_Z19handleSerialBusMsgsv+0x2f8>
    26ac:	88 89       	ldd	r24, Y+16	; 0x10
    26ae:	80 93 db 45 	sts	0x45DB, r24	; 0x8045db <_ZL17g_last_error_code>
    26b2:	0e 94 c3 44 	call	0x8986	; 0x8986 <_Z12txGetPowerMwv>
    26b6:	29 2f       	mov	r18, r25
    26b8:	2f 93       	push	r18
    26ba:	8f 93       	push	r24
    26bc:	88 e3       	ldi	r24, 0x38	; 56
    26be:	92 e4       	ldi	r25, 0x42	; 66
    26c0:	89 2f       	mov	r24, r25
    26c2:	8f 93       	push	r24
    26c4:	88 e3       	ldi	r24, 0x38	; 56
    26c6:	92 e4       	ldi	r25, 0x42	; 66
    26c8:	8f 93       	push	r24
    26ca:	89 ea       	ldi	r24, 0xA9	; 169
    26cc:	95 e4       	ldi	r25, 0x45	; 69
    26ce:	89 2f       	mov	r24, r25
    26d0:	8f 93       	push	r24
    26d2:	89 ea       	ldi	r24, 0xA9	; 169
    26d4:	95 e4       	ldi	r25, 0x45	; 69
    26d6:	8f 93       	push	r24
    26d8:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	89 ea       	ldi	r24, 0xA9	; 169
    26ea:	95 e4       	ldi	r25, 0x45	; 69
    26ec:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    26f0:	04 c5       	rjmp	.+2568   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    26f2:	0e 94 c3 44 	call	0x8986	; 0x8986 <_Z12txGetPowerMwv>
    26f6:	29 2f       	mov	r18, r25
    26f8:	2f 93       	push	r18
    26fa:	8f 93       	push	r24
    26fc:	88 e3       	ldi	r24, 0x38	; 56
    26fe:	92 e4       	ldi	r25, 0x42	; 66
    2700:	89 2f       	mov	r24, r25
    2702:	8f 93       	push	r24
    2704:	88 e3       	ldi	r24, 0x38	; 56
    2706:	92 e4       	ldi	r25, 0x42	; 66
    2708:	8f 93       	push	r24
    270a:	89 ea       	ldi	r24, 0xA9	; 169
    270c:	95 e4       	ldi	r25, 0x45	; 69
    270e:	89 2f       	mov	r24, r25
    2710:	8f 93       	push	r24
    2712:	89 ea       	ldi	r24, 0xA9	; 169
    2714:	95 e4       	ldi	r25, 0x45	; 69
    2716:	8f 93       	push	r24
    2718:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	89 ea       	ldi	r24, 0xA9	; 169
    272a:	95 e4       	ldi	r25, 0x45	; 69
    272c:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    2730:	e4 c4       	rjmp	.+2504   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    2732:	19 8a       	std	Y+17, r1	; 0x11
    2734:	1a 8a       	std	Y+18, r1	; 0x12
    2736:	1b 8a       	std	Y+19, r1	; 0x13
    2738:	1c 8a       	std	Y+20, r1	; 0x14
    273a:	8e 81       	ldd	r24, Y+6	; 0x06
    273c:	9f 81       	ldd	r25, Y+7	; 0x07
    273e:	fc 01       	movw	r30, r24
    2740:	83 81       	ldd	r24, Z+3	; 0x03
    2742:	88 23       	and	r24, r24
    2744:	21 f1       	breq	.+72     	; 0x278e <_Z19handleSerialBusMsgsv+0x3d4>
    2746:	8e 81       	ldd	r24, Y+6	; 0x06
    2748:	9f 81       	ldd	r25, Y+7	; 0x07
    274a:	03 96       	adiw	r24, 0x03	; 3
    274c:	9e 01       	movw	r18, r28
    274e:	2d 5c       	subi	r18, 0xCD	; 205
    2750:	3f 4f       	sbci	r19, 0xFF	; 255
    2752:	b9 01       	movw	r22, r18
    2754:	0e 94 7c 47 	call	0x8ef8	; 0x8ef8 <_Z12frequencyValPcPm>
    2758:	ce 01       	movw	r24, r28
    275a:	c3 96       	adiw	r24, 0x33	; 51
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	0e 94 67 44 	call	0x88ce	; 0x88ce <_Z14txSetFrequencyPmb>
    2762:	98 2f       	mov	r25, r24
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	89 27       	eor	r24, r25
    2768:	88 23       	and	r24, r24
    276a:	69 f0       	breq	.+26     	; 0x2786 <_Z19handleSerialBusMsgsv+0x3cc>
    276c:	8b a9       	ldd	r24, Y+51	; 0x33
    276e:	9c a9       	ldd	r25, Y+52	; 0x34
    2770:	ad a9       	ldd	r26, Y+53	; 0x35
    2772:	be a9       	ldd	r27, Y+54	; 0x36
    2774:	89 8b       	std	Y+17, r24	; 0x11
    2776:	9a 8b       	std	Y+18, r25	; 0x12
    2778:	ab 8b       	std	Y+19, r26	; 0x13
    277a:	bc 8b       	std	Y+20, r27	; 0x14
    277c:	84 e3       	ldi	r24, 0x34	; 52
    277e:	96 e4       	ldi	r25, 0x46	; 70
    2780:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN13EepromManager13saveAllEEPROMEv>
    2784:	04 c0       	rjmp	.+8      	; 0x278e <_Z19handleSerialBusMsgsv+0x3d4>
    2786:	88 eb       	ldi	r24, 0xB8	; 184
    2788:	91 e4       	ldi	r25, 0x41	; 65
    278a:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    278e:	0e 94 99 44 	call	0x8932	; 0x8932 <_Z14txGetFrequencyv>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	89 8b       	std	Y+17, r24	; 0x11
    2798:	9a 8b       	std	Y+18, r25	; 0x12
    279a:	ab 8b       	std	Y+19, r26	; 0x13
    279c:	bc 8b       	std	Y+20, r27	; 0x14
    279e:	89 89       	ldd	r24, Y+17	; 0x11
    27a0:	9a 89       	ldd	r25, Y+18	; 0x12
    27a2:	ab 89       	ldd	r26, Y+19	; 0x13
    27a4:	bc 89       	ldd	r27, Y+20	; 0x14
    27a6:	89 2b       	or	r24, r25
    27a8:	8a 2b       	or	r24, r26
    27aa:	8b 2b       	or	r24, r27
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <_Z19handleSerialBusMsgsv+0x3f6>
    27ae:	a0 c4       	rjmp	.+2368   	; 0x30f0 <_Z19handleSerialBusMsgsv+0xd36>
    27b0:	89 89       	ldd	r24, Y+17	; 0x11
    27b2:	9a 89       	ldd	r25, Y+18	; 0x12
    27b4:	ab 89       	ldd	r26, Y+19	; 0x13
    27b6:	bc 89       	ldd	r27, Y+20	; 0x14
    27b8:	9e 01       	movw	r18, r28
    27ba:	29 5c       	subi	r18, 0xC9	; 201
    27bc:	3f 4f       	sbci	r19, 0xFF	; 255
    27be:	ac 01       	movw	r20, r24
    27c0:	bd 01       	movw	r22, r26
    27c2:	c9 01       	movw	r24, r18
    27c4:	0e 94 fe 46 	call	0x8dfc	; 0x8dfc <_Z15frequencyStringPcm>
    27c8:	98 2f       	mov	r25, r24
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	89 27       	eor	r24, r25
    27ce:	88 23       	and	r24, r24
    27d0:	e1 f0       	breq	.+56     	; 0x280a <_Z19handleSerialBusMsgsv+0x450>
    27d2:	ce 01       	movw	r24, r28
    27d4:	c7 96       	adiw	r24, 0x37	; 55
    27d6:	29 2f       	mov	r18, r25
    27d8:	2f 93       	push	r18
    27da:	8f 93       	push	r24
    27dc:	83 e4       	ldi	r24, 0x43	; 67
    27de:	92 e4       	ldi	r25, 0x42	; 66
    27e0:	89 2f       	mov	r24, r25
    27e2:	8f 93       	push	r24
    27e4:	83 e4       	ldi	r24, 0x43	; 67
    27e6:	92 e4       	ldi	r25, 0x42	; 66
    27e8:	8f 93       	push	r24
    27ea:	89 ea       	ldi	r24, 0xA9	; 169
    27ec:	95 e4       	ldi	r25, 0x45	; 69
    27ee:	89 2f       	mov	r24, r25
    27f0:	8f 93       	push	r24
    27f2:	89 ea       	ldi	r24, 0xA9	; 169
    27f4:	95 e4       	ldi	r25, 0x45	; 69
    27f6:	8f 93       	push	r24
    27f8:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	1d c0       	rjmp	.+58     	; 0x2844 <_Z19handleSerialBusMsgsv+0x48a>
    280a:	8c 89       	ldd	r24, Y+20	; 0x14
    280c:	8f 93       	push	r24
    280e:	8b 89       	ldd	r24, Y+19	; 0x13
    2810:	8f 93       	push	r24
    2812:	8a 89       	ldd	r24, Y+18	; 0x12
    2814:	8f 93       	push	r24
    2816:	89 89       	ldd	r24, Y+17	; 0x11
    2818:	8f 93       	push	r24
    281a:	8b e4       	ldi	r24, 0x4B	; 75
    281c:	92 e4       	ldi	r25, 0x42	; 66
    281e:	89 2f       	mov	r24, r25
    2820:	8f 93       	push	r24
    2822:	8b e4       	ldi	r24, 0x4B	; 75
    2824:	92 e4       	ldi	r25, 0x42	; 66
    2826:	8f 93       	push	r24
    2828:	89 ea       	ldi	r24, 0xA9	; 169
    282a:	95 e4       	ldi	r25, 0x45	; 69
    282c:	89 2f       	mov	r24, r25
    282e:	8f 93       	push	r24
    2830:	89 ea       	ldi	r24, 0xA9	; 169
    2832:	95 e4       	ldi	r25, 0x45	; 69
    2834:	8f 93       	push	r24
    2836:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    283a:	8d b7       	in	r24, 0x3d	; 61
    283c:	9e b7       	in	r25, 0x3e	; 62
    283e:	08 96       	adiw	r24, 0x08	; 8
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	89 ea       	ldi	r24, 0xA9	; 169
    2846:	95 e4       	ldi	r25, 0x45	; 69
    2848:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    284c:	51 c4       	rjmp	.+2210   	; 0x30f0 <_Z19handleSerialBusMsgsv+0xd36>
    284e:	8e 81       	ldd	r24, Y+6	; 0x06
    2850:	9f 81       	ldd	r25, Y+7	; 0x07
    2852:	fc 01       	movw	r30, r24
    2854:	83 81       	ldd	r24, Z+3	; 0x03
    2856:	88 23       	and	r24, r24
    2858:	89 f1       	breq	.+98     	; 0x28bc <_Z19handleSerialBusMsgsv+0x502>
    285a:	8e 81       	ldd	r24, Y+6	; 0x06
    285c:	9f 81       	ldd	r25, Y+7	; 0x07
    285e:	fc 01       	movw	r30, r24
    2860:	83 81       	ldd	r24, Z+3	; 0x03
    2862:	80 33       	cpi	r24, 0x30	; 48
    2864:	21 f4       	brne	.+8      	; 0x286e <_Z19handleSerialBusMsgsv+0x4b4>
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	0e 94 82 22 	call	0x4504	; 0x4504 <_Z12stopEventNow19EventActionSource_t>
    286c:	46 c4       	rjmp	.+2188   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    286e:	8e 81       	ldd	r24, Y+6	; 0x06
    2870:	9f 81       	ldd	r25, Y+7	; 0x07
    2872:	fc 01       	movw	r30, r24
    2874:	83 81       	ldd	r24, Z+3	; 0x03
    2876:	81 33       	cpi	r24, 0x31	; 49
    2878:	21 f4       	brne	.+8      	; 0x2882 <_Z19handleSerialBusMsgsv+0x4c8>
    287a:	82 e0       	ldi	r24, 0x02	; 2
    287c:	0e 94 31 22 	call	0x4462	; 0x4462 <_Z13startEventNow19EventActionSource_t>
    2880:	3c c4       	rjmp	.+2168   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    2882:	8e 81       	ldd	r24, Y+6	; 0x06
    2884:	9f 81       	ldd	r25, Y+7	; 0x07
    2886:	fc 01       	movw	r30, r24
    2888:	83 81       	ldd	r24, Z+3	; 0x03
    288a:	82 33       	cpi	r24, 0x32	; 50
    288c:	31 f4       	brne	.+12     	; 0x289a <_Z19handleSerialBusMsgsv+0x4e0>
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    2894:	0e 94 a8 22 	call	0x4550	; 0x4550 <_Z18startEventUsingRTCv>
    2898:	30 c4       	rjmp	.+2144   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    289a:	8e 81       	ldd	r24, Y+6	; 0x06
    289c:	9f 81       	ldd	r25, Y+7	; 0x07
    289e:	fc 01       	movw	r30, r24
    28a0:	83 81       	ldd	r24, Z+3	; 0x03
    28a2:	83 33       	cpi	r24, 0x33	; 51
    28a4:	31 f4       	brne	.+12     	; 0x28b2 <_Z19handleSerialBusMsgsv+0x4f8>
    28a6:	62 e0       	ldi	r22, 0x02	; 2
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    28b0:	24 c4       	rjmp	.+2120   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    28b2:	84 e5       	ldi	r24, 0x54	; 84
    28b4:	92 e4       	ldi	r25, 0x42	; 66
    28b6:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    28ba:	1f c4       	rjmp	.+2110   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    28bc:	84 e5       	ldi	r24, 0x54	; 84
    28be:	92 e4       	ldi	r25, 0x42	; 66
    28c0:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    28c4:	1a c4       	rjmp	.+2100   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    28c6:	8e 81       	ldd	r24, Y+6	; 0x06
    28c8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ca:	fc 01       	movw	r30, r24
    28cc:	83 81       	ldd	r24, Z+3	; 0x03
    28ce:	88 23       	and	r24, r24
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <_Z19handleSerialBusMsgsv+0x51a>
    28d2:	41 c0       	rjmp	.+130    	; 0x2956 <_Z19handleSerialBusMsgsv+0x59c>
    28d4:	80 e2       	ldi	r24, 0x20	; 32
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	80 93 a9 45 	sts	0x45A9, r24	; 0x8045a9 <_ZL9g_tempStr>
    28dc:	90 93 aa 45 	sts	0x45AA, r25	; 0x8045aa <_ZL9g_tempStr+0x1>
    28e0:	8e 81       	ldd	r24, Y+6	; 0x06
    28e2:	9f 81       	ldd	r25, Y+7	; 0x07
    28e4:	03 96       	adiw	r24, 0x03	; 3
    28e6:	bc 01       	movw	r22, r24
    28e8:	89 ea       	ldi	r24, 0xA9	; 169
    28ea:	95 e4       	ldi	r25, 0x45	; 69
    28ec:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <strcat>
    28f0:	8e 81       	ldd	r24, Y+6	; 0x06
    28f2:	9f 81       	ldd	r25, Y+7	; 0x07
    28f4:	fc 01       	movw	r30, r24
    28f6:	87 89       	ldd	r24, Z+23	; 0x17
    28f8:	88 23       	and	r24, r24
    28fa:	d1 f0       	breq	.+52     	; 0x2930 <_Z19handleSerialBusMsgsv+0x576>
    28fc:	89 ea       	ldi	r24, 0xA9	; 169
    28fe:	95 e4       	ldi	r25, 0x45	; 69
    2900:	9c 01       	movw	r18, r24
    2902:	f9 01       	movw	r30, r18
    2904:	01 90       	ld	r0, Z+
    2906:	00 20       	and	r0, r0
    2908:	e9 f7       	brne	.-6      	; 0x2904 <_Z19handleSerialBusMsgsv+0x54a>
    290a:	cf 01       	movw	r24, r30
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	82 1b       	sub	r24, r18
    2910:	93 0b       	sbc	r25, r19
    2912:	87 55       	subi	r24, 0x57	; 87
    2914:	9a 4b       	sbci	r25, 0xBA	; 186
    2916:	20 e2       	ldi	r18, 0x20	; 32
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	fc 01       	movw	r30, r24
    291c:	20 83       	st	Z, r18
    291e:	31 83       	std	Z+1, r19	; 0x01
    2920:	8e 81       	ldd	r24, Y+6	; 0x06
    2922:	9f 81       	ldd	r25, Y+7	; 0x07
    2924:	47 96       	adiw	r24, 0x17	; 23
    2926:	bc 01       	movw	r22, r24
    2928:	89 ea       	ldi	r24, 0xA9	; 169
    292a:	95 e4       	ldi	r25, 0x45	; 69
    292c:	0e 94 62 4d 	call	0x9ac4	; 0x9ac4 <strcat>
    2930:	89 ea       	ldi	r24, 0xA9	; 169
    2932:	95 e4       	ldi	r25, 0x45	; 69
    2934:	0e 94 7f 4d 	call	0x9afe	; 0x9afe <strlen>
    2938:	45 97       	sbiw	r24, 0x15	; 21
    293a:	68 f4       	brcc	.+26     	; 0x2956 <_Z19handleSerialBusMsgsv+0x59c>
    293c:	69 ea       	ldi	r22, 0xA9	; 169
    293e:	75 e4       	ldi	r23, 0x45	; 69
    2940:	8f ef       	ldi	r24, 0xFF	; 255
    2942:	95 e4       	ldi	r25, 0x45	; 69
    2944:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <strcpy>
    2948:	49 ea       	ldi	r20, 0xA9	; 169
    294a:	55 e4       	ldi	r21, 0x45	; 69
    294c:	6a e0       	ldi	r22, 0x0A	; 10
    294e:	84 e3       	ldi	r24, 0x34	; 52
    2950:	96 e4       	ldi	r25, 0x46	; 70
    2952:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2956:	80 91 ff 45 	lds	r24, 0x45FF	; 0x8045ff <g_messages_text+0x15>
    295a:	88 23       	and	r24, r24
    295c:	01 f1       	breq	.+64     	; 0x299e <_Z19handleSerialBusMsgsv+0x5e4>
    295e:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	bc 01       	movw	r22, r24
    2968:	8f ef       	ldi	r24, 0xFF	; 255
    296a:	95 e4       	ldi	r25, 0x45	; 69
    296c:	0e 94 2a 3a 	call	0x7454	; 0x7454 <_Z26timeRequiredToSendStrAtWPMPcj>
    2970:	88 5a       	subi	r24, 0xA8	; 168
    2972:	9d 4f       	sbci	r25, 0xFD	; 253
    2974:	96 95       	lsr	r25
    2976:	87 95       	ror	r24
    2978:	96 95       	lsr	r25
    297a:	87 95       	ror	r24
    297c:	96 95       	lsr	r25
    297e:	87 95       	ror	r24
    2980:	9c 01       	movw	r18, r24
    2982:	a5 ec       	ldi	r26, 0xC5	; 197
    2984:	b0 e2       	ldi	r27, 0x20	; 32
    2986:	0e 94 c7 4b 	call	0x978e	; 0x978e <__umulhisi3>
    298a:	92 95       	swap	r25
    298c:	82 95       	swap	r24
    298e:	8f 70       	andi	r24, 0x0F	; 15
    2990:	89 27       	eor	r24, r25
    2992:	9f 70       	andi	r25, 0x0F	; 15
    2994:	89 27       	eor	r24, r25
    2996:	80 93 14 46 	sts	0x4614, r24	; 0x804614 <g_time_needed_for_ID>
    299a:	90 93 15 46 	sts	0x4615, r25	; 0x804615 <g_time_needed_for_ID+0x1>
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	95 e4       	ldi	r25, 0x45	; 69
    29a2:	89 2f       	mov	r24, r25
    29a4:	8f 93       	push	r24
    29a6:	8f ef       	ldi	r24, 0xFF	; 255
    29a8:	95 e4       	ldi	r25, 0x45	; 69
    29aa:	8f 93       	push	r24
    29ac:	89 e5       	ldi	r24, 0x59	; 89
    29ae:	92 e4       	ldi	r25, 0x42	; 66
    29b0:	89 2f       	mov	r24, r25
    29b2:	8f 93       	push	r24
    29b4:	89 e5       	ldi	r24, 0x59	; 89
    29b6:	92 e4       	ldi	r25, 0x42	; 66
    29b8:	8f 93       	push	r24
    29ba:	89 ea       	ldi	r24, 0xA9	; 169
    29bc:	95 e4       	ldi	r25, 0x45	; 69
    29be:	89 2f       	mov	r24, r25
    29c0:	8f 93       	push	r24
    29c2:	89 ea       	ldi	r24, 0xA9	; 169
    29c4:	95 e4       	ldi	r25, 0x45	; 69
    29c6:	8f 93       	push	r24
    29c8:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	89 ea       	ldi	r24, 0xA9	; 169
    29da:	95 e4       	ldi	r25, 0x45	; 69
    29dc:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    29e0:	8c c3       	rjmp	.+1816   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    29e2:	8e 81       	ldd	r24, Y+6	; 0x06
    29e4:	9f 81       	ldd	r25, Y+7	; 0x07
    29e6:	fc 01       	movw	r30, r24
    29e8:	83 81       	ldd	r24, Z+3	; 0x03
    29ea:	83 35       	cpi	r24, 0x53	; 83
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <_Z19handleSerialBusMsgsv+0x636>
    29ee:	6f c0       	rjmp	.+222    	; 0x2ace <_Z19handleSerialBusMsgsv+0x714>
    29f0:	8e 81       	ldd	r24, Y+6	; 0x06
    29f2:	9f 81       	ldd	r25, Y+7	; 0x07
    29f4:	fc 01       	movw	r30, r24
    29f6:	87 89       	ldd	r24, Z+23	; 0x17
    29f8:	8d 8b       	std	Y+21, r24	; 0x15
    29fa:	8d 89       	ldd	r24, Y+21	; 0x15
    29fc:	88 23       	and	r24, r24
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <_Z19handleSerialBusMsgsv+0x648>
    2a00:	48 c0       	rjmp	.+144    	; 0x2a92 <_Z19handleSerialBusMsgsv+0x6d8>
    2a02:	8e 81       	ldd	r24, Y+6	; 0x06
    2a04:	9f 81       	ldd	r25, Y+7	; 0x07
    2a06:	47 96       	adiw	r24, 0x17	; 23
    2a08:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	8e 8b       	std	Y+22, r24	; 0x16
    2a12:	8e 89       	ldd	r24, Y+22	; 0x16
    2a14:	8f 8b       	std	Y+23, r24	; 0x17
    2a16:	85 e0       	ldi	r24, 0x05	; 5
    2a18:	88 8f       	std	Y+24, r24	; 0x18
    2a1a:	84 e1       	ldi	r24, 0x14	; 20
    2a1c:	89 8f       	std	Y+25, r24	; 0x19
    2a1e:	9f 89       	ldd	r25, Y+23	; 0x17
    2a20:	89 8d       	ldd	r24, Y+25	; 0x19
    2a22:	89 17       	cp	r24, r25
    2a24:	40 f0       	brcs	.+16     	; 0x2a36 <_Z19handleSerialBusMsgsv+0x67c>
    2a26:	9f 89       	ldd	r25, Y+23	; 0x17
    2a28:	88 8d       	ldd	r24, Y+24	; 0x18
    2a2a:	98 17       	cp	r25, r24
    2a2c:	10 f4       	brcc	.+4      	; 0x2a32 <_Z19handleSerialBusMsgsv+0x678>
    2a2e:	88 8d       	ldd	r24, Y+24	; 0x18
    2a30:	03 c0       	rjmp	.+6      	; 0x2a38 <_Z19handleSerialBusMsgsv+0x67e>
    2a32:	8f 89       	ldd	r24, Y+23	; 0x17
    2a34:	01 c0       	rjmp	.+2      	; 0x2a38 <_Z19handleSerialBusMsgsv+0x67e>
    2a36:	89 8d       	ldd	r24, Y+25	; 0x19
    2a38:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    2a3c:	4b e0       	ldi	r20, 0x0B	; 11
    2a3e:	50 e4       	ldi	r21, 0x40	; 64
    2a40:	68 e2       	ldi	r22, 0x28	; 40
    2a42:	84 e3       	ldi	r24, 0x34	; 52
    2a44:	96 e4       	ldi	r25, 0x46	; 70
    2a46:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2a4a:	80 91 ff 45 	lds	r24, 0x45FF	; 0x8045ff <g_messages_text+0x15>
    2a4e:	88 23       	and	r24, r24
    2a50:	01 f1       	breq	.+64     	; 0x2a92 <_Z19handleSerialBusMsgsv+0x6d8>
    2a52:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2a56:	88 2f       	mov	r24, r24
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	8f ef       	ldi	r24, 0xFF	; 255
    2a5e:	95 e4       	ldi	r25, 0x45	; 69
    2a60:	0e 94 2a 3a 	call	0x7454	; 0x7454 <_Z26timeRequiredToSendStrAtWPMPcj>
    2a64:	88 5a       	subi	r24, 0xA8	; 168
    2a66:	9d 4f       	sbci	r25, 0xFD	; 253
    2a68:	96 95       	lsr	r25
    2a6a:	87 95       	ror	r24
    2a6c:	96 95       	lsr	r25
    2a6e:	87 95       	ror	r24
    2a70:	96 95       	lsr	r25
    2a72:	87 95       	ror	r24
    2a74:	9c 01       	movw	r18, r24
    2a76:	a5 ec       	ldi	r26, 0xC5	; 197
    2a78:	b0 e2       	ldi	r27, 0x20	; 32
    2a7a:	0e 94 c7 4b 	call	0x978e	; 0x978e <__umulhisi3>
    2a7e:	92 95       	swap	r25
    2a80:	82 95       	swap	r24
    2a82:	8f 70       	andi	r24, 0x0F	; 15
    2a84:	89 27       	eor	r24, r25
    2a86:	9f 70       	andi	r25, 0x0F	; 15
    2a88:	89 27       	eor	r24, r25
    2a8a:	80 93 14 46 	sts	0x4614, r24	; 0x804614 <g_time_needed_for_ID>
    2a8e:	90 93 15 46 	sts	0x4615, r25	; 0x804615 <g_time_needed_for_ID+0x1>
    2a92:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	29 2f       	mov	r18, r25
    2a9c:	2f 93       	push	r18
    2a9e:	8f 93       	push	r24
    2aa0:	80 e6       	ldi	r24, 0x60	; 96
    2aa2:	92 e4       	ldi	r25, 0x42	; 66
    2aa4:	89 2f       	mov	r24, r25
    2aa6:	8f 93       	push	r24
    2aa8:	80 e6       	ldi	r24, 0x60	; 96
    2aaa:	92 e4       	ldi	r25, 0x42	; 66
    2aac:	8f 93       	push	r24
    2aae:	89 ea       	ldi	r24, 0xA9	; 169
    2ab0:	95 e4       	ldi	r25, 0x45	; 69
    2ab2:	89 2f       	mov	r24, r25
    2ab4:	8f 93       	push	r24
    2ab6:	89 ea       	ldi	r24, 0xA9	; 169
    2ab8:	95 e4       	ldi	r25, 0x45	; 69
    2aba:	8f 93       	push	r24
    2abc:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	09 c0       	rjmp	.+18     	; 0x2ae0 <_Z19handleSerialBusMsgsv+0x726>
    2ace:	85 e0       	ldi	r24, 0x05	; 5
    2ad0:	e4 e5       	ldi	r30, 0x54	; 84
    2ad2:	f2 e4       	ldi	r31, 0x42	; 66
    2ad4:	a9 ea       	ldi	r26, 0xA9	; 169
    2ad6:	b5 e4       	ldi	r27, 0x45	; 69
    2ad8:	01 90       	ld	r0, Z+
    2ada:	0d 92       	st	X+, r0
    2adc:	8a 95       	dec	r24
    2ade:	e1 f7       	brne	.-8      	; 0x2ad8 <_Z19handleSerialBusMsgsv+0x71e>
    2ae0:	89 ea       	ldi	r24, 0xA9	; 169
    2ae2:	95 e4       	ldi	r25, 0x45	; 69
    2ae4:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    2ae8:	08 c3       	rjmp	.+1552   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    2aea:	8e 81       	ldd	r24, Y+6	; 0x06
    2aec:	9f 81       	ldd	r25, Y+7	; 0x07
    2aee:	fc 01       	movw	r30, r24
    2af0:	83 81       	ldd	r24, Z+3	; 0x03
    2af2:	88 23       	and	r24, r24
    2af4:	51 f1       	breq	.+84     	; 0x2b4a <_Z19handleSerialBusMsgsv+0x790>
    2af6:	8e 81       	ldd	r24, Y+6	; 0x06
    2af8:	9f 81       	ldd	r25, Y+7	; 0x07
    2afa:	03 96       	adiw	r24, 0x03	; 3
    2afc:	48 e0       	ldi	r20, 0x08	; 8
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	bc 01       	movw	r22, r24
    2b02:	89 ea       	ldi	r24, 0xA9	; 169
    2b04:	95 e4       	ldi	r25, 0x45	; 69
    2b06:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <strncpy>
    2b0a:	10 92 b1 45 	sts	0x45B1, r1	; 0x8045b1 <_ZL9g_tempStr+0x8>
    2b0e:	89 ea       	ldi	r24, 0xA9	; 169
    2b10:	95 e4       	ldi	r25, 0x45	; 69
    2b12:	0e 94 ef 46 	call	0x8dde	; 0x8dde <_Z11only_digitsPc>
    2b16:	88 23       	and	r24, r24
    2b18:	41 f0       	breq	.+16     	; 0x2b2a <_Z19handleSerialBusMsgsv+0x770>
    2b1a:	89 ea       	ldi	r24, 0xA9	; 169
    2b1c:	95 e4       	ldi	r25, 0x45	; 69
    2b1e:	0e 94 7f 4d 	call	0x9afe	; 0x9afe <strlen>
    2b22:	04 97       	sbiw	r24, 0x04	; 4
    2b24:	10 f0       	brcs	.+4      	; 0x2b2a <_Z19handleSerialBusMsgsv+0x770>
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	01 c0       	rjmp	.+2      	; 0x2b2c <_Z19handleSerialBusMsgsv+0x772>
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	88 23       	and	r24, r24
    2b2e:	69 f0       	breq	.+26     	; 0x2b4a <_Z19handleSerialBusMsgsv+0x790>
    2b30:	69 ea       	ldi	r22, 0xA9	; 169
    2b32:	75 e4       	ldi	r23, 0x45	; 69
    2b34:	8e e3       	ldi	r24, 0x3E	; 62
    2b36:	96 e4       	ldi	r25, 0x46	; 70
    2b38:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <strcpy>
    2b3c:	4e e3       	ldi	r20, 0x3E	; 62
    2b3e:	56 e4       	ldi	r21, 0x46	; 70
    2b40:	6f e1       	ldi	r22, 0x1F	; 31
    2b42:	84 e3       	ldi	r24, 0x34	; 52
    2b44:	96 e4       	ldi	r25, 0x46	; 70
    2b46:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2b4a:	8e e3       	ldi	r24, 0x3E	; 62
    2b4c:	96 e4       	ldi	r25, 0x46	; 70
    2b4e:	89 2f       	mov	r24, r25
    2b50:	8f 93       	push	r24
    2b52:	8e e3       	ldi	r24, 0x3E	; 62
    2b54:	96 e4       	ldi	r25, 0x46	; 70
    2b56:	8f 93       	push	r24
    2b58:	82 e7       	ldi	r24, 0x72	; 114
    2b5a:	92 e4       	ldi	r25, 0x42	; 66
    2b5c:	89 2f       	mov	r24, r25
    2b5e:	8f 93       	push	r24
    2b60:	82 e7       	ldi	r24, 0x72	; 114
    2b62:	92 e4       	ldi	r25, 0x42	; 66
    2b64:	8f 93       	push	r24
    2b66:	89 ea       	ldi	r24, 0xA9	; 169
    2b68:	95 e4       	ldi	r25, 0x45	; 69
    2b6a:	89 2f       	mov	r24, r25
    2b6c:	8f 93       	push	r24
    2b6e:	89 ea       	ldi	r24, 0xA9	; 169
    2b70:	95 e4       	ldi	r25, 0x45	; 69
    2b72:	8f 93       	push	r24
    2b74:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	89 ea       	ldi	r24, 0xA9	; 169
    2b86:	95 e4       	ldi	r25, 0x45	; 69
    2b88:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    2b8c:	b6 c2       	rjmp	.+1388   	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    2b8e:	1d 82       	std	Y+5, r1	; 0x05
    2b90:	8e 81       	ldd	r24, Y+6	; 0x06
    2b92:	9f 81       	ldd	r25, Y+7	; 0x07
    2b94:	fc 01       	movw	r30, r24
    2b96:	83 81       	ldd	r24, Z+3	; 0x03
    2b98:	84 35       	cpi	r24, 0x54	; 84
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <_Z19handleSerialBusMsgsv+0x7e4>
    2b9c:	ca c0       	rjmp	.+404    	; 0x2d32 <_Z19handleSerialBusMsgsv+0x978>
    2b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	87 89       	ldd	r24, Z+23	; 0x17
    2ba6:	88 23       	and	r24, r24
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <_Z19handleSerialBusMsgsv+0x7f2>
    2baa:	76 c0       	rjmp	.+236    	; 0x2c98 <_Z19handleSerialBusMsgsv+0x8de>
    2bac:	8e 81       	ldd	r24, Y+6	; 0x06
    2bae:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb0:	47 96       	adiw	r24, 0x17	; 23
    2bb2:	4c e0       	ldi	r20, 0x0C	; 12
    2bb4:	50 e0       	ldi	r21, 0x00	; 0
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	89 ea       	ldi	r24, 0xA9	; 169
    2bba:	95 e4       	ldi	r25, 0x45	; 69
    2bbc:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <strncpy>
    2bc0:	10 92 b5 45 	sts	0x45B5, r1	; 0x8045b5 <_ZL9g_tempStr+0xc>
    2bc4:	80 91 3d 46 	lds	r24, 0x463D	; 0x80463d <g_utc_offset>
    2bc8:	81 95       	neg	r24
    2bca:	48 2f       	mov	r20, r24
    2bcc:	66 e4       	ldi	r22, 0x46	; 70
    2bce:	76 e4       	ldi	r23, 0x46	; 70
    2bd0:	89 ea       	ldi	r24, 0xA9	; 169
    2bd2:	95 e4       	ldi	r25, 0x45	; 69
    2bd4:	0e 94 08 25 	call	0x4a10	; 0x4a10 <_Z18validateTimeStringPcPma>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	8a 8f       	std	Y+26, r24	; 0x1a
    2bde:	9b 8f       	std	Y+27, r25	; 0x1b
    2be0:	ac 8f       	std	Y+28, r26	; 0x1c
    2be2:	bd 8f       	std	Y+29, r27	; 0x1d
    2be4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2be8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2bea:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2bec:	89 2b       	or	r24, r25
    2bee:	8a 2b       	or	r24, r26
    2bf0:	8b 2b       	or	r24, r27
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <_Z19handleSerialBusMsgsv+0x83c>
    2bf4:	9b c0       	rjmp	.+310    	; 0x2d2c <_Z19handleSerialBusMsgsv+0x972>
    2bf6:	60 e0       	ldi	r22, 0x00	; 0
    2bf8:	89 ea       	ldi	r24, 0xA9	; 169
    2bfa:	95 e4       	ldi	r25, 0x45	; 69
    2bfc:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <ds3231_set_date_time_arducon>
    2c00:	8e 8f       	std	Y+30, r24	; 0x1e
    2c02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c04:	88 23       	and	r24, r24
    2c06:	51 f0       	breq	.+20     	; 0x2c1c <_Z19handleSerialBusMsgsv+0x862>
    2c08:	88 e2       	ldi	r24, 0x28	; 40
    2c0a:	e3 ee       	ldi	r30, 0xE3	; 227
    2c0c:	f1 e4       	ldi	r31, 0x41	; 65
    2c0e:	a9 ea       	ldi	r26, 0xA9	; 169
    2c10:	b5 e4       	ldi	r27, 0x45	; 69
    2c12:	01 90       	ld	r0, Z+
    2c14:	0d 92       	st	X+, r0
    2c16:	8a 95       	dec	r24
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <_Z19handleSerialBusMsgsv+0x858>
    2c1a:	88 c0       	rjmp	.+272    	; 0x2d2c <_Z19handleSerialBusMsgsv+0x972>
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	80 93 46 46 	sts	0x4646, r24	; 0x804646 <g_current_epoch>
    2c2c:	90 93 47 46 	sts	0x4647, r25	; 0x804647 <g_current_epoch+0x1>
    2c30:	a0 93 48 46 	sts	0x4648, r26	; 0x804648 <g_current_epoch+0x2>
    2c34:	b0 93 49 46 	sts	0x4649, r27	; 0x804649 <g_current_epoch+0x3>
    2c38:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    2c3c:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    2c40:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    2c44:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    2c48:	ae 01       	movw	r20, r28
    2c4a:	44 5b       	subi	r20, 0xB4	; 180
    2c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c4e:	22 e3       	ldi	r18, 0x32	; 50
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <convertEpochToTimeString>
    2c5a:	29 2f       	mov	r18, r25
    2c5c:	2f 93       	push	r18
    2c5e:	8f 93       	push	r24
    2c60:	8a e7       	ldi	r24, 0x7A	; 122
    2c62:	92 e4       	ldi	r25, 0x42	; 66
    2c64:	89 2f       	mov	r24, r25
    2c66:	8f 93       	push	r24
    2c68:	8a e7       	ldi	r24, 0x7A	; 122
    2c6a:	92 e4       	ldi	r25, 0x42	; 66
    2c6c:	8f 93       	push	r24
    2c6e:	89 ea       	ldi	r24, 0xA9	; 169
    2c70:	95 e4       	ldi	r25, 0x45	; 69
    2c72:	89 2f       	mov	r24, r25
    2c74:	8f 93       	push	r24
    2c76:	89 ea       	ldi	r24, 0xA9	; 169
    2c78:	95 e4       	ldi	r25, 0x45	; 69
    2c7a:	8f 93       	push	r24
    2c7c:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	60 e0       	ldi	r22, 0x00	; 0
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2c96:	4a c0       	rjmp	.+148    	; 0x2d2c <_Z19handleSerialBusMsgsv+0x972>
    2c98:	ce 01       	movw	r24, r28
    2c9a:	85 5b       	subi	r24, 0xB5	; 181
    2c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9e:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	80 93 46 46 	sts	0x4646, r24	; 0x804646 <g_current_epoch>
    2caa:	90 93 47 46 	sts	0x4647, r25	; 0x804647 <g_current_epoch+0x1>
    2cae:	a0 93 48 46 	sts	0x4648, r26	; 0x804648 <g_current_epoch+0x2>
    2cb2:	b0 93 49 46 	sts	0x4649, r27	; 0x804649 <g_current_epoch+0x3>
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	85 5b       	subi	r24, 0xB5	; 181
    2cba:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	80 81       	ld	r24, Z
    2cc0:	88 23       	and	r24, r24
    2cc2:	51 f0       	breq	.+20     	; 0x2cd8 <_Z19handleSerialBusMsgsv+0x91e>
    2cc4:	88 e2       	ldi	r24, 0x28	; 40
    2cc6:	e3 ee       	ldi	r30, 0xE3	; 227
    2cc8:	f1 e4       	ldi	r31, 0x41	; 65
    2cca:	a9 ea       	ldi	r26, 0xA9	; 169
    2ccc:	b5 e4       	ldi	r27, 0x45	; 69
    2cce:	01 90       	ld	r0, Z+
    2cd0:	0d 92       	st	X+, r0
    2cd2:	8a 95       	dec	r24
    2cd4:	e1 f7       	brne	.-8      	; 0x2cce <_Z19handleSerialBusMsgsv+0x914>
    2cd6:	2a c0       	rjmp	.+84     	; 0x2d2c <_Z19handleSerialBusMsgsv+0x972>
    2cd8:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    2cdc:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    2ce0:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    2ce4:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    2ce8:	ae 01       	movw	r20, r28
    2cea:	44 5b       	subi	r20, 0xB4	; 180
    2cec:	5f 4f       	sbci	r21, 0xFF	; 255
    2cee:	22 e3       	ldi	r18, 0x32	; 50
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <convertEpochToTimeString>
    2cfa:	29 2f       	mov	r18, r25
    2cfc:	2f 93       	push	r18
    2cfe:	8f 93       	push	r24
    2d00:	8a e7       	ldi	r24, 0x7A	; 122
    2d02:	92 e4       	ldi	r25, 0x42	; 66
    2d04:	89 2f       	mov	r24, r25
    2d06:	8f 93       	push	r24
    2d08:	8a e7       	ldi	r24, 0x7A	; 122
    2d0a:	92 e4       	ldi	r25, 0x42	; 66
    2d0c:	8f 93       	push	r24
    2d0e:	89 ea       	ldi	r24, 0xA9	; 169
    2d10:	95 e4       	ldi	r25, 0x45	; 69
    2d12:	89 2f       	mov	r24, r25
    2d14:	8f 93       	push	r24
    2d16:	89 ea       	ldi	r24, 0xA9	; 169
    2d18:	95 e4       	ldi	r25, 0x45	; 69
    2d1a:	8f 93       	push	r24
    2d1c:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	8d 83       	std	Y+5, r24	; 0x05
    2d30:	be c1       	rjmp	.+892    	; 0x30ae <_Z19handleSerialBusMsgsv+0xcf4>
    2d32:	8e 81       	ldd	r24, Y+6	; 0x06
    2d34:	9f 81       	ldd	r25, Y+7	; 0x07
    2d36:	fc 01       	movw	r30, r24
    2d38:	83 81       	ldd	r24, Z+3	; 0x03
    2d3a:	83 35       	cpi	r24, 0x53	; 83
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <_Z19handleSerialBusMsgsv+0x986>
    2d3e:	be c0       	rjmp	.+380    	; 0x2ebc <_Z19handleSerialBusMsgsv+0xb02>
    2d40:	8e 81       	ldd	r24, Y+6	; 0x06
    2d42:	9f 81       	ldd	r25, Y+7	; 0x07
    2d44:	47 96       	adiw	r24, 0x17	; 23
    2d46:	bc 01       	movw	r22, r24
    2d48:	89 ea       	ldi	r24, 0xA9	; 169
    2d4a:	95 e4       	ldi	r25, 0x45	; 69
    2d4c:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <strcpy>
    2d50:	80 91 3d 46 	lds	r24, 0x463D	; 0x80463d <g_utc_offset>
    2d54:	81 95       	neg	r24
    2d56:	48 2f       	mov	r20, r24
    2d58:	65 e3       	ldi	r22, 0x35	; 53
    2d5a:	76 e4       	ldi	r23, 0x46	; 70
    2d5c:	89 ea       	ldi	r24, 0xA9	; 169
    2d5e:	95 e4       	ldi	r25, 0x45	; 69
    2d60:	0e 94 08 25 	call	0x4a10	; 0x4a10 <_Z18validateTimeStringPcPma>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	8f 8f       	std	Y+31, r24	; 0x1f
    2d6a:	98 a3       	std	Y+32, r25	; 0x20
    2d6c:	a9 a3       	std	Y+33, r26	; 0x21
    2d6e:	ba a3       	std	Y+34, r27	; 0x22
    2d70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d72:	98 a1       	ldd	r25, Y+32	; 0x20
    2d74:	a9 a1       	ldd	r26, Y+33	; 0x21
    2d76:	ba a1       	ldd	r27, Y+34	; 0x22
    2d78:	89 2b       	or	r24, r25
    2d7a:	8a 2b       	or	r24, r26
    2d7c:	8b 2b       	or	r24, r27
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <_Z19handleSerialBusMsgsv+0x9c8>
    2d80:	70 c0       	rjmp	.+224    	; 0x2e62 <_Z19handleSerialBusMsgsv+0xaa8>
    2d82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d84:	98 a1       	ldd	r25, Y+32	; 0x20
    2d86:	a9 a1       	ldd	r26, Y+33	; 0x21
    2d88:	ba a1       	ldd	r27, Y+34	; 0x22
    2d8a:	80 93 35 46 	sts	0x4635, r24	; 0x804635 <g_event_start_epoch>
    2d8e:	90 93 36 46 	sts	0x4636, r25	; 0x804636 <g_event_start_epoch+0x1>
    2d92:	a0 93 37 46 	sts	0x4637, r26	; 0x804637 <g_event_start_epoch+0x2>
    2d96:	b0 93 38 46 	sts	0x4638, r27	; 0x804638 <g_event_start_epoch+0x3>
    2d9a:	45 e3       	ldi	r20, 0x35	; 53
    2d9c:	56 e4       	ldi	r21, 0x46	; 70
    2d9e:	62 e0       	ldi	r22, 0x02	; 2
    2da0:	84 e3       	ldi	r24, 0x34	; 52
    2da2:	96 e4       	ldi	r25, 0x46	; 70
    2da4:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2da8:	80 91 39 46 	lds	r24, 0x4639	; 0x804639 <g_event_finish_epoch>
    2dac:	90 91 3a 46 	lds	r25, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    2db0:	a0 91 3b 46 	lds	r26, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    2db4:	b0 91 3c 46 	lds	r27, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    2db8:	8b a3       	std	Y+35, r24	; 0x23
    2dba:	9c a3       	std	Y+36, r25	; 0x24
    2dbc:	ad a3       	std	Y+37, r26	; 0x25
    2dbe:	be a3       	std	Y+38, r27	; 0x26
    2dc0:	80 91 35 46 	lds	r24, 0x4635	; 0x804635 <g_event_start_epoch>
    2dc4:	90 91 36 46 	lds	r25, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    2dc8:	a0 91 37 46 	lds	r26, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    2dcc:	b0 91 38 46 	lds	r27, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    2dd0:	80 58       	subi	r24, 0x80	; 128
    2dd2:	9e 4a       	sbci	r25, 0xAE	; 174
    2dd4:	ae 4f       	sbci	r26, 0xFE	; 254
    2dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd8:	8f a3       	std	Y+39, r24	; 0x27
    2dda:	98 a7       	std	Y+40, r25	; 0x28
    2ddc:	a9 a7       	std	Y+41, r26	; 0x29
    2dde:	ba a7       	std	Y+42, r27	; 0x2a
    2de0:	2b a1       	ldd	r18, Y+35	; 0x23
    2de2:	3c a1       	ldd	r19, Y+36	; 0x24
    2de4:	4d a1       	ldd	r20, Y+37	; 0x25
    2de6:	5e a1       	ldd	r21, Y+38	; 0x26
    2de8:	8f a1       	ldd	r24, Y+39	; 0x27
    2dea:	98 a5       	ldd	r25, Y+40	; 0x28
    2dec:	a9 a5       	ldd	r26, Y+41	; 0x29
    2dee:	ba a5       	ldd	r27, Y+42	; 0x2a
    2df0:	28 17       	cp	r18, r24
    2df2:	39 07       	cpc	r19, r25
    2df4:	4a 07       	cpc	r20, r26
    2df6:	5b 07       	cpc	r21, r27
    2df8:	28 f4       	brcc	.+10     	; 0x2e04 <_Z19handleSerialBusMsgsv+0xa4a>
    2dfa:	8f a1       	ldd	r24, Y+39	; 0x27
    2dfc:	98 a5       	ldd	r25, Y+40	; 0x28
    2dfe:	a9 a5       	ldd	r26, Y+41	; 0x29
    2e00:	ba a5       	ldd	r27, Y+42	; 0x2a
    2e02:	04 c0       	rjmp	.+8      	; 0x2e0c <_Z19handleSerialBusMsgsv+0xa52>
    2e04:	8b a1       	ldd	r24, Y+35	; 0x23
    2e06:	9c a1       	ldd	r25, Y+36	; 0x24
    2e08:	ad a1       	ldd	r26, Y+37	; 0x25
    2e0a:	be a1       	ldd	r27, Y+38	; 0x26
    2e0c:	80 93 39 46 	sts	0x4639, r24	; 0x804639 <g_event_finish_epoch>
    2e10:	90 93 3a 46 	sts	0x463A, r25	; 0x80463a <g_event_finish_epoch+0x1>
    2e14:	a0 93 3b 46 	sts	0x463B, r26	; 0x80463b <g_event_finish_epoch+0x2>
    2e18:	b0 93 3c 46 	sts	0x463C, r27	; 0x80463c <g_event_finish_epoch+0x3>
    2e1c:	49 e3       	ldi	r20, 0x39	; 57
    2e1e:	56 e4       	ldi	r21, 0x46	; 70
    2e20:	66 e0       	ldi	r22, 0x06	; 6
    2e22:	84 e3       	ldi	r24, 0x34	; 52
    2e24:	96 e4       	ldi	r25, 0x46	; 70
    2e26:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2e2a:	63 e0       	ldi	r22, 0x03	; 3
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2e34:	20 91 35 46 	lds	r18, 0x4635	; 0x804635 <g_event_start_epoch>
    2e38:	30 91 36 46 	lds	r19, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    2e3c:	40 91 37 46 	lds	r20, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    2e40:	50 91 38 46 	lds	r21, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    2e44:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    2e48:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    2e4c:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    2e50:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    2e54:	82 17       	cp	r24, r18
    2e56:	93 07       	cpc	r25, r19
    2e58:	a4 07       	cpc	r26, r20
    2e5a:	b5 07       	cpc	r27, r21
    2e5c:	10 f4       	brcc	.+4      	; 0x2e62 <_Z19handleSerialBusMsgsv+0xaa8>
    2e5e:	0e 94 a8 22 	call	0x4550	; 0x4550 <_Z18startEventUsingRTCv>
    2e62:	80 91 35 46 	lds	r24, 0x4635	; 0x804635 <g_event_start_epoch>
    2e66:	90 91 36 46 	lds	r25, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    2e6a:	a0 91 37 46 	lds	r26, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    2e6e:	b0 91 38 46 	lds	r27, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    2e72:	ae 01       	movw	r20, r28
    2e74:	44 5b       	subi	r20, 0xB4	; 180
    2e76:	5f 4f       	sbci	r21, 0xFF	; 255
    2e78:	22 e3       	ldi	r18, 0x32	; 50
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	cd 01       	movw	r24, r26
    2e80:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <convertEpochToTimeString>
    2e84:	29 2f       	mov	r18, r25
    2e86:	2f 93       	push	r18
    2e88:	8f 93       	push	r24
    2e8a:	84 e8       	ldi	r24, 0x84	; 132
    2e8c:	92 e4       	ldi	r25, 0x42	; 66
    2e8e:	89 2f       	mov	r24, r25
    2e90:	8f 93       	push	r24
    2e92:	84 e8       	ldi	r24, 0x84	; 132
    2e94:	92 e4       	ldi	r25, 0x42	; 66
    2e96:	8f 93       	push	r24
    2e98:	89 ea       	ldi	r24, 0xA9	; 169
    2e9a:	95 e4       	ldi	r25, 0x45	; 69
    2e9c:	89 2f       	mov	r24, r25
    2e9e:	8f 93       	push	r24
    2ea0:	89 ea       	ldi	r24, 0xA9	; 169
    2ea2:	95 e4       	ldi	r25, 0x45	; 69
    2ea4:	8f 93       	push	r24
    2ea6:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	f9 c0       	rjmp	.+498    	; 0x30ae <_Z19handleSerialBusMsgsv+0xcf4>
    2ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	83 81       	ldd	r24, Z+3	; 0x03
    2ec4:	86 34       	cpi	r24, 0x46	; 70
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <_Z19handleSerialBusMsgsv+0xb10>
    2ec8:	7c c0       	rjmp	.+248    	; 0x2fc2 <_Z19handleSerialBusMsgsv+0xc08>
    2eca:	8e 81       	ldd	r24, Y+6	; 0x06
    2ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ece:	47 96       	adiw	r24, 0x17	; 23
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	89 ea       	ldi	r24, 0xA9	; 169
    2ed4:	95 e4       	ldi	r25, 0x45	; 69
    2ed6:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <strcpy>
    2eda:	80 91 3d 46 	lds	r24, 0x463D	; 0x80463d <g_utc_offset>
    2ede:	81 95       	neg	r24
    2ee0:	48 2f       	mov	r20, r24
    2ee2:	69 e3       	ldi	r22, 0x39	; 57
    2ee4:	76 e4       	ldi	r23, 0x46	; 70
    2ee6:	89 ea       	ldi	r24, 0xA9	; 169
    2ee8:	95 e4       	ldi	r25, 0x45	; 69
    2eea:	0e 94 08 25 	call	0x4a10	; 0x4a10 <_Z18validateTimeStringPcPma>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	8b a7       	std	Y+43, r24	; 0x2b
    2ef4:	9c a7       	std	Y+44, r25	; 0x2c
    2ef6:	ad a7       	std	Y+45, r26	; 0x2d
    2ef8:	be a7       	std	Y+46, r27	; 0x2e
    2efa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2efc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2efe:	ad a5       	ldd	r26, Y+45	; 0x2d
    2f00:	be a5       	ldd	r27, Y+46	; 0x2e
    2f02:	89 2b       	or	r24, r25
    2f04:	8a 2b       	or	r24, r26
    2f06:	8b 2b       	or	r24, r27
    2f08:	79 f1       	breq	.+94     	; 0x2f68 <_Z19handleSerialBusMsgsv+0xbae>
    2f0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f0e:	ad a5       	ldd	r26, Y+45	; 0x2d
    2f10:	be a5       	ldd	r27, Y+46	; 0x2e
    2f12:	80 93 39 46 	sts	0x4639, r24	; 0x804639 <g_event_finish_epoch>
    2f16:	90 93 3a 46 	sts	0x463A, r25	; 0x80463a <g_event_finish_epoch+0x1>
    2f1a:	a0 93 3b 46 	sts	0x463B, r26	; 0x80463b <g_event_finish_epoch+0x2>
    2f1e:	b0 93 3c 46 	sts	0x463C, r27	; 0x80463c <g_event_finish_epoch+0x3>
    2f22:	49 e3       	ldi	r20, 0x39	; 57
    2f24:	56 e4       	ldi	r21, 0x46	; 70
    2f26:	66 e0       	ldi	r22, 0x06	; 6
    2f28:	84 e3       	ldi	r24, 0x34	; 52
    2f2a:	96 e4       	ldi	r25, 0x46	; 70
    2f2c:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2f30:	63 e0       	ldi	r22, 0x03	; 3
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2f3a:	20 91 35 46 	lds	r18, 0x4635	; 0x804635 <g_event_start_epoch>
    2f3e:	30 91 36 46 	lds	r19, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    2f42:	40 91 37 46 	lds	r20, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    2f46:	50 91 38 46 	lds	r21, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    2f4a:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    2f4e:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    2f52:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    2f56:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    2f5a:	82 17       	cp	r24, r18
    2f5c:	93 07       	cpc	r25, r19
    2f5e:	a4 07       	cpc	r26, r20
    2f60:	b5 07       	cpc	r27, r21
    2f62:	10 f4       	brcc	.+4      	; 0x2f68 <_Z19handleSerialBusMsgsv+0xbae>
    2f64:	0e 94 a8 22 	call	0x4550	; 0x4550 <_Z18startEventUsingRTCv>
    2f68:	80 91 39 46 	lds	r24, 0x4639	; 0x804639 <g_event_finish_epoch>
    2f6c:	90 91 3a 46 	lds	r25, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    2f70:	a0 91 3b 46 	lds	r26, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    2f74:	b0 91 3c 46 	lds	r27, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    2f78:	ae 01       	movw	r20, r28
    2f7a:	44 5b       	subi	r20, 0xB4	; 180
    2f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f7e:	22 e3       	ldi	r18, 0x32	; 50
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <convertEpochToTimeString>
    2f8a:	29 2f       	mov	r18, r25
    2f8c:	2f 93       	push	r18
    2f8e:	8f 93       	push	r24
    2f90:	8f e8       	ldi	r24, 0x8F	; 143
    2f92:	92 e4       	ldi	r25, 0x42	; 66
    2f94:	89 2f       	mov	r24, r25
    2f96:	8f 93       	push	r24
    2f98:	8f e8       	ldi	r24, 0x8F	; 143
    2f9a:	92 e4       	ldi	r25, 0x42	; 66
    2f9c:	8f 93       	push	r24
    2f9e:	89 ea       	ldi	r24, 0xA9	; 169
    2fa0:	95 e4       	ldi	r25, 0x45	; 69
    2fa2:	89 2f       	mov	r24, r25
    2fa4:	8f 93       	push	r24
    2fa6:	89 ea       	ldi	r24, 0xA9	; 169
    2fa8:	95 e4       	ldi	r25, 0x45	; 69
    2faa:	8f 93       	push	r24
    2fac:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
    2fc0:	76 c0       	rjmp	.+236    	; 0x30ae <_Z19handleSerialBusMsgsv+0xcf4>
    2fc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	83 81       	ldd	r24, Z+3	; 0x03
    2fca:	8a 32       	cpi	r24, 0x2A	; 42
    2fcc:	19 f4       	brne	.+6      	; 0x2fd4 <_Z19handleSerialBusMsgsv+0xc1a>
    2fce:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <ds3231_sync2nearestMinute>
    2fd2:	6d c0       	rjmp	.+218    	; 0x30ae <_Z19handleSerialBusMsgsv+0xcf4>
    2fd4:	0e 94 23 27 	call	0x4e46	; 0x4e46 <_Z23clockConfigurationCheckv>
    2fd8:	8f a7       	std	Y+47, r24	; 0x2f
    2fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fdc:	81 30       	cpi	r24, 0x01	; 1
    2fde:	31 f0       	breq	.+12     	; 0x2fec <_Z19handleSerialBusMsgsv+0xc32>
    2fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe2:	85 30       	cpi	r24, 0x05	; 5
    2fe4:	19 f0       	breq	.+6      	; 0x2fec <_Z19handleSerialBusMsgsv+0xc32>
    2fe6:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_Z18reportConfigErrorsv>
    2fea:	61 c0       	rjmp	.+194    	; 0x30ae <_Z19handleSerialBusMsgsv+0xcf4>
    2fec:	20 91 35 46 	lds	r18, 0x4635	; 0x804635 <g_event_start_epoch>
    2ff0:	30 91 36 46 	lds	r19, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    2ff4:	40 91 37 46 	lds	r20, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    2ff8:	50 91 38 46 	lds	r21, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    2ffc:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    3000:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    3004:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    3008:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    300c:	0f 2e       	mov	r0, r31
    300e:	fb e9       	ldi	r31, 0x9B	; 155
    3010:	ef 2e       	mov	r14, r31
    3012:	f2 e4       	ldi	r31, 0x42	; 66
    3014:	ff 2e       	mov	r15, r31
    3016:	f0 2d       	mov	r31, r0
    3018:	08 ea       	ldi	r16, 0xA8	; 168
    301a:	12 e4       	ldi	r17, 0x42	; 66
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <_Z14reportTimeTillmmPKcS0_>
    3024:	20 91 39 46 	lds	r18, 0x4639	; 0x804639 <g_event_finish_epoch>
    3028:	30 91 3a 46 	lds	r19, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    302c:	40 91 3b 46 	lds	r20, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    3030:	50 91 3c 46 	lds	r21, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    3034:	80 91 35 46 	lds	r24, 0x4635	; 0x804635 <g_event_start_epoch>
    3038:	90 91 36 46 	lds	r25, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    303c:	a0 91 37 46 	lds	r26, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    3040:	b0 91 38 46 	lds	r27, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    3044:	e1 2c       	mov	r14, r1
    3046:	f1 2c       	mov	r15, r1
    3048:	04 eb       	ldi	r16, 0xB4	; 180
    304a:	12 e4       	ldi	r17, 0x42	; 66
    304c:	bc 01       	movw	r22, r24
    304e:	cd 01       	movw	r24, r26
    3050:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <_Z14reportTimeTillmmPKcS0_>
    3054:	20 91 35 46 	lds	r18, 0x4635	; 0x804635 <g_event_start_epoch>
    3058:	30 91 36 46 	lds	r19, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    305c:	40 91 37 46 	lds	r20, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    3060:	50 91 38 46 	lds	r21, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    3064:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    3068:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    306c:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    3070:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    3074:	28 17       	cp	r18, r24
    3076:	39 07       	cpc	r19, r25
    3078:	4a 07       	cpc	r20, r26
    307a:	5b 07       	cpc	r21, r27
    307c:	c0 f4       	brcc	.+48     	; 0x30ae <_Z19handleSerialBusMsgsv+0xcf4>
    307e:	20 91 39 46 	lds	r18, 0x4639	; 0x804639 <g_event_finish_epoch>
    3082:	30 91 3a 46 	lds	r19, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    3086:	40 91 3b 46 	lds	r20, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    308a:	50 91 3c 46 	lds	r21, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    308e:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    3092:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    3096:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    309a:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    309e:	e1 2c       	mov	r14, r1
    30a0:	f1 2c       	mov	r15, r1
    30a2:	0c eb       	ldi	r16, 0xBC	; 188
    30a4:	12 e4       	ldi	r17, 0x42	; 66
    30a6:	bc 01       	movw	r22, r24
    30a8:	cd 01       	movw	r24, r26
    30aa:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <_Z14reportTimeTillmmPKcS0_>
    30ae:	8d 81       	ldd	r24, Y+5	; 0x05
    30b0:	88 23       	and	r24, r24
    30b2:	01 f1       	breq	.+64     	; 0x30f4 <_Z19handleSerialBusMsgsv+0xd3a>
    30b4:	89 ea       	ldi	r24, 0xA9	; 169
    30b6:	95 e4       	ldi	r25, 0x45	; 69
    30b8:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    30bc:	1b c0       	rjmp	.+54     	; 0x30f4 <_Z19handleSerialBusMsgsv+0xd3a>
    30be:	8e 81       	ldd	r24, Y+6	; 0x06
    30c0:	9f 81       	ldd	r25, Y+7	; 0x07
    30c2:	fc 01       	movw	r30, r24
    30c4:	83 81       	ldd	r24, Z+3	; 0x03
    30c6:	83 34       	cpi	r24, 0x43	; 67
    30c8:	b9 f4       	brne	.+46     	; 0x30f8 <_Z19handleSerialBusMsgsv+0xd3e>
    30ca:	8e 81       	ldd	r24, Y+6	; 0x06
    30cc:	9f 81       	ldd	r25, Y+7	; 0x07
    30ce:	fc 01       	movw	r30, r24
    30d0:	87 89       	ldd	r24, Z+23	; 0x17
    30d2:	88 23       	and	r24, r24
    30d4:	89 f0       	breq	.+34     	; 0x30f8 <_Z19handleSerialBusMsgsv+0xd3e>
    30d6:	8e 81       	ldd	r24, Y+6	; 0x06
    30d8:	9f 81       	ldd	r25, Y+7	; 0x07
    30da:	47 96       	adiw	r24, 0x17	; 23
    30dc:	0e 94 15 4d 	call	0x9a2a	; 0x9a2a <atoi>
    30e0:	88 ab       	std	Y+48, r24	; 0x30
    30e2:	99 ab       	std	Y+49, r25	; 0x31
    30e4:	09 c0       	rjmp	.+18     	; 0x30f8 <_Z19handleSerialBusMsgsv+0xd3e>
    30e6:	85 e7       	ldi	r24, 0x75	; 117
    30e8:	90 e4       	ldi	r25, 0x40	; 64
    30ea:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    30ee:	05 c0       	rjmp	.+10     	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    30f0:	00 00       	nop
    30f2:	03 c0       	rjmp	.+6      	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    30f4:	00 00       	nop
    30f6:	01 c0       	rjmp	.+2      	; 0x30fa <_Z19handleSerialBusMsgsv+0xd40>
    30f8:	00 00       	nop
    30fa:	8e 81       	ldd	r24, Y+6	; 0x06
    30fc:	9f 81       	ldd	r25, Y+7	; 0x07
    30fe:	fc 01       	movw	r30, r24
    3100:	11 82       	std	Z+1, r1	; 0x01
    3102:	12 82       	std	Z+2, r1	; 0x02
    3104:	0e 94 cc 3b 	call	0x7798	; 0x7798 <sb_send_NewPrompt>
    3108:	64 c9       	rjmp	.-3384   	; 0x23d2 <_Z19handleSerialBusMsgsv+0x18>
    310a:	00 00       	nop
    310c:	c3 58       	subi	r28, 0x83	; 131
    310e:	df 4f       	sbci	r29, 0xFF	; 255
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	1f 91       	pop	r17
    311a:	0f 91       	pop	r16
    311c:	ff 90       	pop	r15
    311e:	ef 90       	pop	r14
    3120:	08 95       	ret

00003122 <_Z17handleLinkBusMsgsv>:
    3122:	ef 92       	push	r14
    3124:	ff 92       	push	r15
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	e3 97       	sbiw	r28, 0x33	; 51
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	89 83       	std	Y+1, r24	; 0x01
    313c:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <_Z18nextFullLBRxBufferv>
    3140:	8c 87       	std	Y+12, r24	; 0x0c
    3142:	9d 87       	std	Y+13, r25	; 0x0d
    3144:	21 e0       	ldi	r18, 0x01	; 1
    3146:	8c 85       	ldd	r24, Y+12	; 0x0c
    3148:	9d 85       	ldd	r25, Y+13	; 0x0d
    314a:	89 2b       	or	r24, r25
    314c:	09 f4       	brne	.+2      	; 0x3150 <_Z17handleLinkBusMsgsv+0x2e>
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	22 23       	and	r18, r18
    3152:	09 f4       	brne	.+2      	; 0x3156 <_Z17handleLinkBusMsgsv+0x34>
    3154:	8b c6       	rjmp	.+3350   	; 0x3e6c <_Z17handleLinkBusMsgsv+0xd4a>
    3156:	8c 85       	ldd	r24, Y+12	; 0x0c
    3158:	9d 85       	ldd	r25, Y+13	; 0x0d
    315a:	fc 01       	movw	r30, r24
    315c:	81 81       	ldd	r24, Z+1	; 0x01
    315e:	92 81       	ldd	r25, Z+2	; 0x02
    3160:	8e 87       	std	Y+14, r24	; 0x0e
    3162:	9f 87       	std	Y+15, r25	; 0x0f
    3164:	8e 85       	ldd	r24, Y+14	; 0x0e
    3166:	9f 85       	ldd	r25, Y+15	; 0x0f
    3168:	82 38       	cpi	r24, 0x82	; 130
    316a:	fe e1       	ldi	r31, 0x1E	; 30
    316c:	9f 07       	cpc	r25, r31
    316e:	09 f4       	brne	.+2      	; 0x3172 <_Z17handleLinkBusMsgsv+0x50>
    3170:	71 c0       	rjmp	.+226    	; 0x3254 <_Z17handleLinkBusMsgsv+0x132>
    3172:	83 38       	cpi	r24, 0x83	; 131
    3174:	2e e1       	ldi	r18, 0x1E	; 30
    3176:	92 07       	cpc	r25, r18
    3178:	30 f5       	brcc	.+76     	; 0x31c6 <_Z17handleLinkBusMsgsv+0xa4>
    317a:	81 36       	cpi	r24, 0x61	; 97
    317c:	33 e0       	ldi	r19, 0x03	; 3
    317e:	93 07       	cpc	r25, r19
    3180:	09 f4       	brne	.+2      	; 0x3184 <_Z17handleLinkBusMsgsv+0x62>
    3182:	de c4       	rjmp	.+2492   	; 0x3b40 <_Z17handleLinkBusMsgsv+0xa1e>
    3184:	82 36       	cpi	r24, 0x62	; 98
    3186:	e3 e0       	ldi	r30, 0x03	; 3
    3188:	9e 07       	cpc	r25, r30
    318a:	78 f4       	brcc	.+30     	; 0x31aa <_Z17handleLinkBusMsgsv+0x88>
    318c:	85 31       	cpi	r24, 0x15	; 21
    318e:	f3 e0       	ldi	r31, 0x03	; 3
    3190:	9f 07       	cpc	r25, r31
    3192:	09 f4       	brne	.+2      	; 0x3196 <_Z17handleLinkBusMsgsv+0x74>
    3194:	1e c1       	rjmp	.+572    	; 0x33d2 <_Z17handleLinkBusMsgsv+0x2b0>
    3196:	8e 31       	cpi	r24, 0x1E	; 30
    3198:	23 e0       	ldi	r18, 0x03	; 3
    319a:	92 07       	cpc	r25, r18
    319c:	09 f4       	brne	.+2      	; 0x31a0 <_Z17handleLinkBusMsgsv+0x7e>
    319e:	45 c3       	rjmp	.+1674   	; 0x382a <_Z17handleLinkBusMsgsv+0x708>
    31a0:	84 35       	cpi	r24, 0x54	; 84
    31a2:	91 05       	cpc	r25, r1
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <_Z17handleLinkBusMsgsv+0x86>
    31a6:	41 c4       	rjmp	.+2178   	; 0x3a2a <_Z17handleLinkBusMsgsv+0x908>
    31a8:	36 c6       	rjmp	.+3180   	; 0x3e16 <_Z17handleLinkBusMsgsv+0xcf4>
    31aa:	8f 3a       	cpi	r24, 0xAF	; 175
    31ac:	33 e0       	ldi	r19, 0x03	; 3
    31ae:	93 07       	cpc	r25, r19
    31b0:	d1 f1       	breq	.+116    	; 0x3226 <_Z17handleLinkBusMsgsv+0x104>
    31b2:	86 3a       	cpi	r24, 0xA6	; 166
    31b4:	ec e1       	ldi	r30, 0x1C	; 28
    31b6:	9e 07       	cpc	r25, r30
    31b8:	09 f4       	brne	.+2      	; 0x31bc <_Z17handleLinkBusMsgsv+0x9a>
    31ba:	4d c5       	rjmp	.+2714   	; 0x3c56 <_Z17handleLinkBusMsgsv+0xb34>
    31bc:	84 38       	cpi	r24, 0x84	; 132
    31be:	93 40       	sbci	r25, 0x03	; 3
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <_Z17handleLinkBusMsgsv+0xa2>
    31c2:	cd c1       	rjmp	.+922    	; 0x355e <_Z17handleLinkBusMsgsv+0x43c>
    31c4:	28 c6       	rjmp	.+3152   	; 0x3e16 <_Z17handleLinkBusMsgsv+0xcf4>
    31c6:	8a 39       	cpi	r24, 0x9A	; 154
    31c8:	23 e2       	ldi	r18, 0x23	; 35
    31ca:	92 07       	cpc	r25, r18
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <_Z17handleLinkBusMsgsv+0xae>
    31ce:	41 c0       	rjmp	.+130    	; 0x3252 <_Z17handleLinkBusMsgsv+0x130>
    31d0:	8b 39       	cpi	r24, 0x9B	; 155
    31d2:	33 e2       	ldi	r19, 0x23	; 35
    31d4:	93 07       	cpc	r25, r19
    31d6:	78 f4       	brcc	.+30     	; 0x31f6 <_Z17handleLinkBusMsgsv+0xd4>
    31d8:	8d 3a       	cpi	r24, 0xAD	; 173
    31da:	e2 e2       	ldi	r30, 0x22	; 34
    31dc:	9e 07       	cpc	r25, r30
    31de:	09 f4       	brne	.+2      	; 0x31e2 <_Z17handleLinkBusMsgsv+0xc0>
    31e0:	96 c0       	rjmp	.+300    	; 0x330e <_Z17handleLinkBusMsgsv+0x1ec>
    31e2:	81 3c       	cpi	r24, 0xC1	; 193
    31e4:	f2 e2       	ldi	r31, 0x22	; 34
    31e6:	9f 07       	cpc	r25, r31
    31e8:	09 f4       	brne	.+2      	; 0x31ec <_Z17handleLinkBusMsgsv+0xca>
    31ea:	ee c0       	rjmp	.+476    	; 0x33c8 <_Z17handleLinkBusMsgsv+0x2a6>
    31ec:	81 3d       	cpi	r24, 0xD1	; 209
    31ee:	9e 41       	sbci	r25, 0x1E	; 30
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <_Z17handleLinkBusMsgsv+0xd2>
    31f2:	bd c4       	rjmp	.+2426   	; 0x3b6e <_Z17handleLinkBusMsgsv+0xa4c>
    31f4:	10 c6       	rjmp	.+3104   	; 0x3e16 <_Z17handleLinkBusMsgsv+0xcf4>
    31f6:	80 3d       	cpi	r24, 0xD0	; 208
    31f8:	33 e2       	ldi	r19, 0x23	; 35
    31fa:	93 07       	cpc	r25, r19
    31fc:	09 f4       	brne	.+2      	; 0x3200 <_Z17handleLinkBusMsgsv+0xde>
    31fe:	78 c3       	rjmp	.+1776   	; 0x38f0 <_Z17handleLinkBusMsgsv+0x7ce>
    3200:	81 3d       	cpi	r24, 0xD1	; 209
    3202:	e3 e2       	ldi	r30, 0x23	; 35
    3204:	9e 07       	cpc	r25, r30
    3206:	28 f4       	brcc	.+10     	; 0x3212 <_Z17handleLinkBusMsgsv+0xf0>
    3208:	8f 3c       	cpi	r24, 0xCF	; 207
    320a:	93 42       	sbci	r25, 0x23	; 35
    320c:	09 f4       	brne	.+2      	; 0x3210 <_Z17handleLinkBusMsgsv+0xee>
    320e:	eb c5       	rjmp	.+3030   	; 0x3de6 <_Z17handleLinkBusMsgsv+0xcc4>
    3210:	02 c6       	rjmp	.+3076   	; 0x3e16 <_Z17handleLinkBusMsgsv+0xcf4>
    3212:	87 3f       	cpi	r24, 0xF7	; 247
    3214:	23 e2       	ldi	r18, 0x23	; 35
    3216:	92 07       	cpc	r25, r18
    3218:	09 f4       	brne	.+2      	; 0x321c <_Z17handleLinkBusMsgsv+0xfa>
    321a:	16 c2       	rjmp	.+1068   	; 0x3648 <_Z17handleLinkBusMsgsv+0x526>
    321c:	8c 39       	cpi	r24, 0x9C	; 156
    321e:	94 42       	sbci	r25, 0x24	; 36
    3220:	09 f4       	brne	.+2      	; 0x3224 <_Z17handleLinkBusMsgsv+0x102>
    3222:	f1 c5       	rjmp	.+3042   	; 0x3e06 <_Z17handleLinkBusMsgsv+0xce4>
    3224:	f8 c5       	rjmp	.+3056   	; 0x3e16 <_Z17handleLinkBusMsgsv+0xcf4>
    3226:	8c 85       	ldd	r24, Y+12	; 0x0c
    3228:	9d 85       	ldd	r25, Y+13	; 0x0d
    322a:	fc 01       	movw	r30, r24
    322c:	83 81       	ldd	r24, Z+3	; 0x03
    322e:	88 23       	and	r24, r24
    3230:	09 f4       	brne	.+2      	; 0x3234 <_Z17handleLinkBusMsgsv+0x112>
    3232:	f7 c5       	rjmp	.+3054   	; 0x3e22 <_Z17handleLinkBusMsgsv+0xd00>
    3234:	8c 85       	ldd	r24, Y+12	; 0x0c
    3236:	9d 85       	ldd	r25, Y+13	; 0x0d
    3238:	03 96       	adiw	r24, 0x03	; 3
    323a:	0e 94 15 4d 	call	0x9a2a	; 0x9a2a <atoi>
    323e:	21 e0       	ldi	r18, 0x01	; 1
    3240:	89 2b       	or	r24, r25
    3242:	09 f4       	brne	.+2      	; 0x3246 <_Z17handleLinkBusMsgsv+0x124>
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	28 8b       	std	Y+16, r18	; 0x10
    3248:	0e 94 66 37 	call	0x6ecc	; 0x6ecc <_Z15linkbus_disablev>
    324c:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3250:	e8 c5       	rjmp	.+3024   	; 0x3e22 <_Z17handleLinkBusMsgsv+0xd00>
    3252:	ff cf       	rjmp	.-2      	; 0x3252 <_Z17handleLinkBusMsgsv+0x130>
    3254:	8c 85       	ldd	r24, Y+12	; 0x0c
    3256:	9d 85       	ldd	r25, Y+13	; 0x0d
    3258:	fc 01       	movw	r30, r24
    325a:	83 81       	ldd	r24, Z+3	; 0x03
    325c:	89 8b       	std	Y+17, r24	; 0x11
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    3264:	89 89       	ldd	r24, Y+17	; 0x11
    3266:	8a 35       	cpi	r24, 0x5A	; 90
    3268:	21 f4       	brne	.+8      	; 0x3272 <_Z17handleLinkBusMsgsv+0x150>
    326a:	88 e7       	ldi	r24, 0x78	; 120
    326c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3270:	da c5       	rjmp	.+2996   	; 0x3e26 <_Z17handleLinkBusMsgsv+0xd04>
    3272:	89 89       	ldd	r24, Y+17	; 0x11
    3274:	80 33       	cpi	r24, 0x30	; 48
    3276:	b1 f5       	brne	.+108    	; 0x32e4 <_Z17handleLinkBusMsgsv+0x1c2>
    3278:	80 91 23 46 	lds	r24, 0x4623	; 0x804623 <g_waiting_for_next_event>
    327c:	88 23       	and	r24, r24
    327e:	39 f0       	breq	.+14     	; 0x328e <_Z17handleLinkBusMsgsv+0x16c>
    3280:	4d ec       	ldi	r20, 0xCD	; 205
    3282:	52 e4       	ldi	r21, 0x42	; 66
    3284:	6f ec       	ldi	r22, 0xCF	; 207
    3286:	72 e4       	ldi	r23, 0x42	; 66
    3288:	83 e0       	ldi	r24, 0x03	; 3
    328a:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <_Z11lb_send_msg13LBMessageTypePKcPc>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 9c 05 	call	0xb38	; 0xb38 <time>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	2b 2f       	mov	r18, r27
    329c:	2f 93       	push	r18
    329e:	2a 2f       	mov	r18, r26
    32a0:	2f 93       	push	r18
    32a2:	29 2f       	mov	r18, r25
    32a4:	2f 93       	push	r18
    32a6:	8f 93       	push	r24
    32a8:	83 ed       	ldi	r24, 0xD3	; 211
    32aa:	92 e4       	ldi	r25, 0x42	; 66
    32ac:	89 2f       	mov	r24, r25
    32ae:	8f 93       	push	r24
    32b0:	83 ed       	ldi	r24, 0xD3	; 211
    32b2:	92 e4       	ldi	r25, 0x42	; 66
    32b4:	8f 93       	push	r24
    32b6:	89 ea       	ldi	r24, 0xA9	; 169
    32b8:	95 e4       	ldi	r25, 0x45	; 69
    32ba:	89 2f       	mov	r24, r25
    32bc:	8f 93       	push	r24
    32be:	89 ea       	ldi	r24, 0xA9	; 169
    32c0:	95 e4       	ldi	r25, 0x45	; 69
    32c2:	8f 93       	push	r24
    32c4:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    32c8:	2d b7       	in	r18, 0x3d	; 61
    32ca:	3e b7       	in	r19, 0x3e	; 62
    32cc:	28 5f       	subi	r18, 0xF8	; 248
    32ce:	3f 4f       	sbci	r19, 0xFF	; 255
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	49 ea       	ldi	r20, 0xA9	; 169
    32d6:	55 e4       	ldi	r21, 0x45	; 69
    32d8:	67 ed       	ldi	r22, 0xD7	; 215
    32da:	72 e4       	ldi	r23, 0x42	; 66
    32dc:	83 e0       	ldi	r24, 0x03	; 3
    32de:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <_Z11lb_send_msg13LBMessageTypePKcPc>
    32e2:	a1 c5       	rjmp	.+2882   	; 0x3e26 <_Z17handleLinkBusMsgsv+0xd04>
    32e4:	89 89       	ldd	r24, Y+17	; 0x11
    32e6:	83 33       	cpi	r24, 0x33	; 51
    32e8:	09 f0       	breq	.+2      	; 0x32ec <_Z17handleLinkBusMsgsv+0x1ca>
    32ea:	9d c5       	rjmp	.+2874   	; 0x3e26 <_Z17handleLinkBusMsgsv+0xd04>
    32ec:	f8 94       	cli
    32ee:	10 92 e7 45 	sts	0x45E7, r1	; 0x8045e7 <_ZL19g_wifi_enable_delay>
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    32f8:	10 92 23 46 	sts	0x4623, r1	; 0x804623 <g_waiting_for_next_event>
    32fc:	10 92 22 46 	sts	0x4622, r1	; 0x804622 <g_check_for_next_event>
    3300:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	80 93 e8 45 	sts	0x45E8, r24	; 0x8045e8 <_ZL20g_shutting_down_wifi>
    330a:	78 94       	sei
    330c:	8c c5       	rjmp	.+2840   	; 0x3e26 <_Z17handleLinkBusMsgsv+0xd04>
    330e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3310:	9d 85       	ldd	r25, Y+13	; 0x0d
    3312:	fc 01       	movw	r30, r24
    3314:	83 81       	ldd	r24, Z+3	; 0x03
    3316:	88 23       	and	r24, r24
    3318:	09 f4       	brne	.+2      	; 0x331c <_Z17handleLinkBusMsgsv+0x1fa>
    331a:	87 c5       	rjmp	.+2830   	; 0x3e2a <_Z17handleLinkBusMsgsv+0xd08>
    331c:	8c 85       	ldd	r24, Y+12	; 0x0c
    331e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3320:	fc 01       	movw	r30, r24
    3322:	83 81       	ldd	r24, Z+3	; 0x03
    3324:	8d 34       	cpi	r24, 0x4D	; 77
    3326:	a9 f4       	brne	.+42     	; 0x3352 <_Z17handleLinkBusMsgsv+0x230>
    3328:	8c 85       	ldd	r24, Y+12	; 0x0c
    332a:	9d 85       	ldd	r25, Y+13	; 0x0d
    332c:	fc 01       	movw	r30, r24
    332e:	80 8d       	ldd	r24, Z+24	; 0x18
    3330:	88 23       	and	r24, r24
    3332:	79 f0       	breq	.+30     	; 0x3352 <_Z17handleLinkBusMsgsv+0x230>
    3334:	8c 85       	ldd	r24, Y+12	; 0x0c
    3336:	9d 85       	ldd	r25, Y+13	; 0x0d
    3338:	48 96       	adiw	r24, 0x18	; 24
    333a:	0e 94 15 4d 	call	0x9a2a	; 0x9a2a <atoi>
    333e:	80 93 53 46 	sts	0x4653, r24	; 0x804653 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    3342:	90 93 54 46 	sts	0x4654, r25	; 0x804654 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    3346:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    334a:	8f 5f       	subi	r24, 0xFF	; 255
    334c:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3350:	09 c0       	rjmp	.+18     	; 0x3364 <_Z17handleLinkBusMsgsv+0x242>
    3352:	8c 85       	ldd	r24, Y+12	; 0x0c
    3354:	9d 85       	ldd	r25, Y+13	; 0x0d
    3356:	03 96       	adiw	r24, 0x03	; 3
    3358:	0e 94 15 4d 	call	0x9a2a	; 0x9a2a <atoi>
    335c:	80 93 53 46 	sts	0x4653, r24	; 0x804653 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    3360:	90 93 54 46 	sts	0x4654, r25	; 0x804654 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	70 e0       	ldi	r23, 0x00	; 0
    3368:	83 e5       	ldi	r24, 0x53	; 83
    336a:	96 e4       	ldi	r25, 0x46	; 70
    336c:	0e 94 c8 44 	call	0x8990	; 0x8990 <_Z15txSetParametersPjPb>
    3370:	8a 8b       	std	Y+18, r24	; 0x12
    3372:	8a 89       	ldd	r24, Y+18	; 0x12
    3374:	88 23       	and	r24, r24
    3376:	19 f0       	breq	.+6      	; 0x337e <_Z17handleLinkBusMsgsv+0x25c>
    3378:	8a 89       	ldd	r24, Y+18	; 0x12
    337a:	80 93 db 45 	sts	0x45DB, r24	; 0x8045db <_ZL17g_last_error_code>
    337e:	80 91 53 46 	lds	r24, 0x4653	; 0x804653 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    3382:	90 91 54 46 	lds	r25, 0x4654	; 0x804654 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    3386:	29 2f       	mov	r18, r25
    3388:	2f 93       	push	r18
    338a:	8f 93       	push	r24
    338c:	8b ed       	ldi	r24, 0xDB	; 219
    338e:	92 e4       	ldi	r25, 0x42	; 66
    3390:	89 2f       	mov	r24, r25
    3392:	8f 93       	push	r24
    3394:	8b ed       	ldi	r24, 0xDB	; 219
    3396:	92 e4       	ldi	r25, 0x42	; 66
    3398:	8f 93       	push	r24
    339a:	89 ea       	ldi	r24, 0xA9	; 169
    339c:	95 e4       	ldi	r25, 0x45	; 69
    339e:	89 2f       	mov	r24, r25
    33a0:	8f 93       	push	r24
    33a2:	89 ea       	ldi	r24, 0xA9	; 169
    33a4:	95 e4       	ldi	r25, 0x45	; 69
    33a6:	8f 93       	push	r24
    33a8:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	49 ea       	ldi	r20, 0xA9	; 169
    33ba:	55 e4       	ldi	r21, 0x45	; 69
    33bc:	60 ee       	ldi	r22, 0xE0	; 224
    33be:	72 e4       	ldi	r23, 0x42	; 66
    33c0:	83 e0       	ldi	r24, 0x03	; 3
    33c2:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <_Z11lb_send_msg13LBMessageTypePKcPc>
    33c6:	31 c5       	rjmp	.+2658   	; 0x3e2a <_Z17handleLinkBusMsgsv+0xd08>
    33c8:	84 e3       	ldi	r24, 0x34	; 52
    33ca:	96 e4       	ldi	r25, 0x46	; 70
    33cc:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN13EepromManager13saveAllEEPROMEv>
    33d0:	3f c5       	rjmp	.+2686   	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    33d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    33d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    33d6:	fc 01       	movw	r30, r24
    33d8:	83 81       	ldd	r24, Z+3	; 0x03
    33da:	8b 8b       	std	Y+19, r24	; 0x13
    33dc:	8b 89       	ldd	r24, Y+19	; 0x13
    33de:	81 33       	cpi	r24, 0x31	; 49
    33e0:	21 f0       	breq	.+8      	; 0x33ea <_Z17handleLinkBusMsgsv+0x2c8>
    33e2:	8b 89       	ldd	r24, Y+19	; 0x13
    33e4:	82 33       	cpi	r24, 0x32	; 50
    33e6:	09 f0       	breq	.+2      	; 0x33ea <_Z17handleLinkBusMsgsv+0x2c8>
    33e8:	ae c0       	rjmp	.+348    	; 0x3546 <_Z17handleLinkBusMsgsv+0x424>
    33ea:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <_Z18txIsAntennaForBandv>
    33ee:	98 2f       	mov	r25, r24
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	89 27       	eor	r24, r25
    33f4:	88 23       	and	r24, r24
    33f6:	41 f0       	breq	.+16     	; 0x3408 <_Z17handleLinkBusMsgsv+0x2e6>
    33f8:	90 91 36 40 	lds	r25, 0x4036	; 0x804036 <g_tx_power_is_zero>
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	89 27       	eor	r24, r25
    3400:	88 23       	and	r24, r24
    3402:	11 f0       	breq	.+4      	; 0x3408 <_Z17handleLinkBusMsgsv+0x2e6>
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	01 c0       	rjmp	.+2      	; 0x340a <_Z17handleLinkBusMsgsv+0x2e8>
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	88 23       	and	r24, r24
    340c:	21 f0       	breq	.+8      	; 0x3416 <_Z17handleLinkBusMsgsv+0x2f4>
    340e:	87 ef       	ldi	r24, 0xF7	; 247
    3410:	80 93 db 45 	sts	0x45DB, r24	; 0x8045db <_ZL17g_last_error_code>
    3414:	a2 c0       	rjmp	.+324    	; 0x355a <_Z17handleLinkBusMsgsv+0x438>
    3416:	8b 89       	ldd	r24, Y+19	; 0x13
    3418:	81 33       	cpi	r24, 0x31	; 49
    341a:	09 f0       	breq	.+2      	; 0x341e <_Z17handleLinkBusMsgsv+0x2fc>
    341c:	64 c0       	rjmp	.+200    	; 0x34e6 <_Z17handleLinkBusMsgsv+0x3c4>
    341e:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <_Z18txIsAntennaForBandv>
    3422:	88 23       	and	r24, r24
    3424:	21 f4       	brne	.+8      	; 0x342e <_Z17handleLinkBusMsgsv+0x30c>
    3426:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    342a:	88 23       	and	r24, r24
    342c:	11 f0       	breq	.+4      	; 0x3432 <_Z17handleLinkBusMsgsv+0x310>
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	01 c0       	rjmp	.+2      	; 0x3434 <_Z17handleLinkBusMsgsv+0x312>
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	88 23       	and	r24, r24
    3436:	09 f4       	brne	.+2      	; 0x343a <_Z17handleLinkBusMsgsv+0x318>
    3438:	52 c0       	rjmp	.+164    	; 0x34de <_Z17handleLinkBusMsgsv+0x3bc>
    343a:	f8 94       	cli
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	8c a7       	std	Y+44, r24	; 0x2c
    3440:	ce 01       	movw	r24, r28
    3442:	8c 96       	adiw	r24, 0x2c	; 44
    3444:	40 e0       	ldi	r20, 0x00	; 0
    3446:	50 e0       	ldi	r21, 0x00	; 0
    3448:	bc 01       	movw	r22, r24
    344a:	8a ee       	ldi	r24, 0xEA	; 234
    344c:	95 e4       	ldi	r25, 0x45	; 69
    344e:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
    3452:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3456:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    345a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    345e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    3462:	78 94       	sei
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	a0 e0       	ldi	r26, 0x00	; 0
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	80 93 18 46 	sts	0x4618, r24	; 0x804618 <g_event_start_time>
    3470:	90 93 19 46 	sts	0x4619, r25	; 0x804619 <g_event_start_time+0x1>
    3474:	a0 93 1a 46 	sts	0x461A, r26	; 0x80461a <g_event_start_time+0x2>
    3478:	b0 93 1b 46 	sts	0x461B, r27	; 0x80461b <g_event_start_time+0x3>
    347c:	8f ef       	ldi	r24, 0xFF	; 255
    347e:	9f ef       	ldi	r25, 0xFF	; 255
    3480:	dc 01       	movw	r26, r24
    3482:	80 93 1c 46 	sts	0x461C, r24	; 0x80461c <g_event_finish_time>
    3486:	90 93 1d 46 	sts	0x461D, r25	; 0x80461d <g_event_finish_time+0x1>
    348a:	a0 93 1e 46 	sts	0x461E, r26	; 0x80461e <g_event_finish_time+0x2>
    348e:	b0 93 1f 46 	sts	0x461F, r27	; 0x80461f <g_event_finish_time+0x3>
    3492:	8f e0       	ldi	r24, 0x0F	; 15
    3494:	97 e2       	ldi	r25, 0x27	; 39
    3496:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    349a:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    349e:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    34a2:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    34a6:	8f e0       	ldi	r24, 0x0F	; 15
    34a8:	97 e2       	ldi	r25, 0x27	; 39
    34aa:	a0 e0       	ldi	r26, 0x00	; 0
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    34b2:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    34b6:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    34ba:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    34be:	8f ef       	ldi	r24, 0xFF	; 255
    34c0:	9f ef       	ldi	r25, 0xFF	; 255
    34c2:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    34c6:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	80 93 21 46 	sts	0x4621, r24	; 0x804621 <g_event_commenced>
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	80 93 20 46 	sts	0x4620, r24	; 0x804620 <g_event_enabled>
    34d6:	8d ef       	ldi	r24, 0xFD	; 253
    34d8:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    34dc:	3e c0       	rjmp	.+124    	; 0x355a <_Z17handleLinkBusMsgsv+0x438>
    34de:	87 ef       	ldi	r24, 0xF7	; 247
    34e0:	80 93 db 45 	sts	0x45DB, r24	; 0x8045db <_ZL17g_last_error_code>
    34e4:	3a c0       	rjmp	.+116    	; 0x355a <_Z17handleLinkBusMsgsv+0x438>
    34e6:	8b 89       	ldd	r24, Y+19	; 0x13
    34e8:	82 33       	cpi	r24, 0x32	; 50
    34ea:	b9 f5       	brne	.+110    	; 0x355a <_Z17handleLinkBusMsgsv+0x438>
    34ec:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    34f0:	8e 30       	cpi	r24, 0x0E	; 14
    34f2:	20 f4       	brcc	.+8      	; 0x34fc <_Z17handleLinkBusMsgsv+0x3da>
    34f4:	8d ec       	ldi	r24, 0xCD	; 205
    34f6:	80 93 db 45 	sts	0x45DB, r24	; 0x8045db <_ZL17g_last_error_code>
    34fa:	2f c0       	rjmp	.+94     	; 0x355a <_Z17handleLinkBusMsgsv+0x438>
    34fc:	1d a6       	std	Y+45, r1	; 0x2d
    34fe:	ce 01       	movw	r24, r28
    3500:	8d 96       	adiw	r24, 0x2d	; 45
    3502:	0e 94 09 20 	call	0x4012	; 0x4012 <_Z11launchEventP2SC>
    3506:	80 93 56 46 	sts	0x4656, r24	; 0x804656 <_ZZ17handleLinkBusMsgsvE2ec>
    350a:	80 91 24 46 	lds	r24, 0x4624	; 0x804624 <_ZL13g_go_to_sleep>
    350e:	88 23       	and	r24, r24
    3510:	31 f0       	breq	.+12     	; 0x351e <_Z17handleLinkBusMsgsv+0x3fc>
    3512:	80 91 e9 45 	lds	r24, 0x45E9	; 0x8045e9 <_ZL11g_sleepType>
    3516:	88 23       	and	r24, r24
    3518:	11 f0       	breq	.+4      	; 0x351e <_Z17handleLinkBusMsgsv+0x3fc>
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	01 c0       	rjmp	.+2      	; 0x3520 <_Z17handleLinkBusMsgsv+0x3fe>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	88 23       	and	r24, r24
    3522:	29 f0       	breq	.+10     	; 0x352e <_Z17handleLinkBusMsgsv+0x40c>
    3524:	83 e0       	ldi	r24, 0x03	; 3
    3526:	80 93 e9 45 	sts	0x45E9, r24	; 0x8045e9 <_ZL11g_sleepType>
    352a:	10 92 24 46 	sts	0x4624, r1	; 0x804624 <_ZL13g_go_to_sleep>
    352e:	8c e3       	ldi	r24, 0x3C	; 60
    3530:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3534:	80 91 56 46 	lds	r24, 0x4656	; 0x804656 <_ZZ17handleLinkBusMsgsvE2ec>
    3538:	88 23       	and	r24, r24
    353a:	79 f4       	brne	.+30     	; 0x355a <_Z17handleLinkBusMsgsv+0x438>
    353c:	84 e3       	ldi	r24, 0x34	; 52
    353e:	96 e4       	ldi	r25, 0x46	; 70
    3540:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN13EepromManager13saveAllEEPROMEv>
    3544:	0a c0       	rjmp	.+20     	; 0x355a <_Z17handleLinkBusMsgsv+0x438>
    3546:	8b 89       	ldd	r24, Y+19	; 0x13
    3548:	80 33       	cpi	r24, 0x30	; 48
    354a:	09 f0       	breq	.+2      	; 0x354e <_Z17handleLinkBusMsgsv+0x42c>
    354c:	70 c4       	rjmp	.+2272   	; 0x3e2e <_Z17handleLinkBusMsgsv+0xd0c>
    354e:	10 92 55 46 	sts	0x4655, r1	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3552:	8c ee       	ldi	r24, 0xEC	; 236
    3554:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    3558:	6a c4       	rjmp	.+2260   	; 0x3e2e <_Z17handleLinkBusMsgsv+0xd0c>
    355a:	00 00       	nop
    355c:	68 c4       	rjmp	.+2256   	; 0x3e2e <_Z17handleLinkBusMsgsv+0xd0c>
    355e:	1a 82       	std	Y+2, r1	; 0x02
    3560:	1b 82       	std	Y+3, r1	; 0x03
    3562:	1c 82       	std	Y+4, r1	; 0x04
    3564:	1d 82       	std	Y+5, r1	; 0x05
    3566:	8c 85       	ldd	r24, Y+12	; 0x0c
    3568:	9d 85       	ldd	r25, Y+13	; 0x0d
    356a:	fc 01       	movw	r30, r24
    356c:	83 81       	ldd	r24, Z+3	; 0x03
    356e:	83 35       	cpi	r24, 0x53	; 83
    3570:	c1 f5       	brne	.+112    	; 0x35e2 <_Z17handleLinkBusMsgsv+0x4c0>
    3572:	8c 85       	ldd	r24, Y+12	; 0x0c
    3574:	9d 85       	ldd	r25, Y+13	; 0x0d
    3576:	fc 01       	movw	r30, r24
    3578:	80 8d       	ldd	r24, Z+24	; 0x18
    357a:	88 23       	and	r24, r24
    357c:	59 f0       	breq	.+22     	; 0x3594 <_Z17handleLinkBusMsgsv+0x472>
    357e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3580:	9d 85       	ldd	r25, Y+13	; 0x0d
    3582:	48 96       	adiw	r24, 0x18	; 24
    3584:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	8a 83       	std	Y+2, r24	; 0x02
    358e:	9b 83       	std	Y+3, r25	; 0x03
    3590:	ac 83       	std	Y+4, r26	; 0x04
    3592:	bd 83       	std	Y+5, r27	; 0x05
    3594:	8a 81       	ldd	r24, Y+2	; 0x02
    3596:	9b 81       	ldd	r25, Y+3	; 0x03
    3598:	ac 81       	ldd	r26, Y+4	; 0x04
    359a:	bd 81       	ldd	r27, Y+5	; 0x05
    359c:	89 2b       	or	r24, r25
    359e:	8a 2b       	or	r24, r26
    35a0:	8b 2b       	or	r24, r27
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <_Z17handleLinkBusMsgsv+0x484>
    35a4:	46 c4       	rjmp	.+2188   	; 0x3e32 <_Z17handleLinkBusMsgsv+0xd10>
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	9b 81       	ldd	r25, Y+3	; 0x03
    35aa:	ac 81       	ldd	r26, Y+4	; 0x04
    35ac:	bd 81       	ldd	r27, Y+5	; 0x05
    35ae:	80 93 18 46 	sts	0x4618, r24	; 0x804618 <g_event_start_time>
    35b2:	90 93 19 46 	sts	0x4619, r25	; 0x804619 <g_event_start_time+0x1>
    35b6:	a0 93 1a 46 	sts	0x461A, r26	; 0x80461a <g_event_start_time+0x2>
    35ba:	b0 93 1b 46 	sts	0x461B, r27	; 0x80461b <g_event_start_time+0x3>
    35be:	f8 94       	cli
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	bc 01       	movw	r22, r24
    35ce:	cd 01       	movw	r24, r26
    35d0:	0e 94 42 02 	call	0x484	; 0x484 <set_system_time>
    35d4:	78 94       	sei
    35d6:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35da:	8f 5f       	subi	r24, 0xFF	; 255
    35dc:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35e0:	28 c4       	rjmp	.+2128   	; 0x3e32 <_Z17handleLinkBusMsgsv+0xd10>
    35e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    35e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    35e6:	fc 01       	movw	r30, r24
    35e8:	83 81       	ldd	r24, Z+3	; 0x03
    35ea:	86 34       	cpi	r24, 0x46	; 70
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <_Z17handleLinkBusMsgsv+0x4ce>
    35ee:	21 c4       	rjmp	.+2114   	; 0x3e32 <_Z17handleLinkBusMsgsv+0xd10>
    35f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    35f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    35f4:	fc 01       	movw	r30, r24
    35f6:	80 8d       	ldd	r24, Z+24	; 0x18
    35f8:	88 23       	and	r24, r24
    35fa:	59 f0       	breq	.+22     	; 0x3612 <_Z17handleLinkBusMsgsv+0x4f0>
    35fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    35fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3600:	48 96       	adiw	r24, 0x18	; 24
    3602:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	8a 83       	std	Y+2, r24	; 0x02
    360c:	9b 83       	std	Y+3, r25	; 0x03
    360e:	ac 83       	std	Y+4, r26	; 0x04
    3610:	bd 83       	std	Y+5, r27	; 0x05
    3612:	8a 81       	ldd	r24, Y+2	; 0x02
    3614:	9b 81       	ldd	r25, Y+3	; 0x03
    3616:	ac 81       	ldd	r26, Y+4	; 0x04
    3618:	bd 81       	ldd	r27, Y+5	; 0x05
    361a:	89 2b       	or	r24, r25
    361c:	8a 2b       	or	r24, r26
    361e:	8b 2b       	or	r24, r27
    3620:	09 f4       	brne	.+2      	; 0x3624 <_Z17handleLinkBusMsgsv+0x502>
    3622:	07 c4       	rjmp	.+2062   	; 0x3e32 <_Z17handleLinkBusMsgsv+0xd10>
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	9b 81       	ldd	r25, Y+3	; 0x03
    3628:	ac 81       	ldd	r26, Y+4	; 0x04
    362a:	bd 81       	ldd	r27, Y+5	; 0x05
    362c:	80 93 1c 46 	sts	0x461C, r24	; 0x80461c <g_event_finish_time>
    3630:	90 93 1d 46 	sts	0x461D, r25	; 0x80461d <g_event_finish_time+0x1>
    3634:	a0 93 1e 46 	sts	0x461E, r26	; 0x80461e <g_event_finish_time+0x2>
    3638:	b0 93 1f 46 	sts	0x461F, r27	; 0x80461f <g_event_finish_time+0x3>
    363c:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3640:	8f 5f       	subi	r24, 0xFF	; 255
    3642:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3646:	f5 c3       	rjmp	.+2026   	; 0x3e32 <_Z17handleLinkBusMsgsv+0xd10>
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    364e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3650:	9d 85       	ldd	r25, Y+13	; 0x0d
    3652:	fc 01       	movw	r30, r24
    3654:	80 81       	ld	r24, Z
    3656:	81 30       	cpi	r24, 0x01	; 1
    3658:	09 f0       	breq	.+2      	; 0x365c <_Z17handleLinkBusMsgsv+0x53a>
    365a:	4b c0       	rjmp	.+150    	; 0x36f2 <_Z17handleLinkBusMsgsv+0x5d0>
    365c:	8c 85       	ldd	r24, Y+12	; 0x0c
    365e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3660:	fc 01       	movw	r30, r24
    3662:	83 81       	ldd	r24, Z+3	; 0x03
    3664:	88 23       	and	r24, r24
    3666:	d1 f0       	breq	.+52     	; 0x369c <_Z17handleLinkBusMsgsv+0x57a>
    3668:	8c 85       	ldd	r24, Y+12	; 0x0c
    366a:	9d 85       	ldd	r25, Y+13	; 0x0d
    366c:	03 96       	adiw	r24, 0x03	; 3
    366e:	44 e1       	ldi	r20, 0x14	; 20
    3670:	50 e0       	ldi	r21, 0x00	; 0
    3672:	bc 01       	movw	r22, r24
    3674:	89 ea       	ldi	r24, 0xA9	; 169
    3676:	95 e4       	ldi	r25, 0x45	; 69
    3678:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <strncpy>
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	89 ea       	ldi	r24, 0xA9	; 169
    3680:	95 e4       	ldi	r25, 0x45	; 69
    3682:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <ds3231_set_date_time>
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	bc 01       	movw	r22, r24
    3694:	cd 01       	movw	r24, r26
    3696:	0e 94 42 02 	call	0x484	; 0x484 <set_system_time>
    369a:	cd c3       	rjmp	.+1946   	; 0x3e36 <_Z17handleLinkBusMsgsv+0xd14>
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	0e 94 9c 05 	call	0xb38	; 0xb38 <time>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	2b 2f       	mov	r18, r27
    36aa:	2f 93       	push	r18
    36ac:	2a 2f       	mov	r18, r26
    36ae:	2f 93       	push	r18
    36b0:	29 2f       	mov	r18, r25
    36b2:	2f 93       	push	r18
    36b4:	8f 93       	push	r24
    36b6:	83 ed       	ldi	r24, 0xD3	; 211
    36b8:	92 e4       	ldi	r25, 0x42	; 66
    36ba:	89 2f       	mov	r24, r25
    36bc:	8f 93       	push	r24
    36be:	83 ed       	ldi	r24, 0xD3	; 211
    36c0:	92 e4       	ldi	r25, 0x42	; 66
    36c2:	8f 93       	push	r24
    36c4:	89 ea       	ldi	r24, 0xA9	; 169
    36c6:	95 e4       	ldi	r25, 0x45	; 69
    36c8:	89 2f       	mov	r24, r25
    36ca:	8f 93       	push	r24
    36cc:	89 ea       	ldi	r24, 0xA9	; 169
    36ce:	95 e4       	ldi	r25, 0x45	; 69
    36d0:	8f 93       	push	r24
    36d2:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    36d6:	2d b7       	in	r18, 0x3d	; 61
    36d8:	3e b7       	in	r19, 0x3e	; 62
    36da:	28 5f       	subi	r18, 0xF8	; 248
    36dc:	3f 4f       	sbci	r19, 0xFF	; 255
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	49 ea       	ldi	r20, 0xA9	; 169
    36e4:	55 e4       	ldi	r21, 0x45	; 69
    36e6:	67 ed       	ldi	r22, 0xD7	; 215
    36e8:	72 e4       	ldi	r23, 0x42	; 66
    36ea:	83 e0       	ldi	r24, 0x03	; 3
    36ec:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <_Z11lb_send_msg13LBMessageTypePKcPc>
    36f0:	a2 c3       	rjmp	.+1860   	; 0x3e36 <_Z17handleLinkBusMsgsv+0xd14>
    36f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    36f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    36f6:	fc 01       	movw	r30, r24
    36f8:	80 81       	ld	r24, Z
    36fa:	82 30       	cpi	r24, 0x02	; 2
    36fc:	09 f0       	breq	.+2      	; 0x3700 <_Z17handleLinkBusMsgsv+0x5de>
    36fe:	9b c3       	rjmp	.+1846   	; 0x3e36 <_Z17handleLinkBusMsgsv+0xd14>
    3700:	8c 85       	ldd	r24, Y+12	; 0x0c
    3702:	9d 85       	ldd	r25, Y+13	; 0x0d
    3704:	fc 01       	movw	r30, r24
    3706:	83 81       	ldd	r24, Z+3	; 0x03
    3708:	88 35       	cpi	r24, 0x58	; 88
    370a:	c9 f5       	brne	.+114    	; 0x377e <_Z17handleLinkBusMsgsv+0x65c>
    370c:	1c 8a       	std	Y+20, r1	; 0x14
    370e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3710:	9d 85       	ldd	r25, Y+13	; 0x0d
    3712:	fc 01       	movw	r30, r24
    3714:	80 8d       	ldd	r24, Z+24	; 0x18
    3716:	88 23       	and	r24, r24
    3718:	51 f0       	breq	.+20     	; 0x372e <_Z17handleLinkBusMsgsv+0x60c>
    371a:	8c 85       	ldd	r24, Y+12	; 0x0c
    371c:	9d 85       	ldd	r25, Y+13	; 0x0d
    371e:	48 96       	adiw	r24, 0x18	; 24
    3720:	0e 94 15 4d 	call	0x9a2a	; 0x9a2a <atoi>
    3724:	8c 8b       	std	Y+20, r24	; 0x14
    3726:	8c 89       	ldd	r24, Y+20	; 0x14
    3728:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <ds3231_set_aging>
    372c:	84 c3       	rjmp	.+1800   	; 0x3e36 <_Z17handleLinkBusMsgsv+0xd14>
    372e:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <ds3231_get_aging>
    3732:	8c 8b       	std	Y+20, r24	; 0x14
    3734:	8c 89       	ldd	r24, Y+20	; 0x14
    3736:	08 2e       	mov	r0, r24
    3738:	00 0c       	add	r0, r0
    373a:	99 0b       	sbc	r25, r25
    373c:	29 2f       	mov	r18, r25
    373e:	2f 93       	push	r18
    3740:	8f 93       	push	r24
    3742:	84 ee       	ldi	r24, 0xE4	; 228
    3744:	92 e4       	ldi	r25, 0x42	; 66
    3746:	89 2f       	mov	r24, r25
    3748:	8f 93       	push	r24
    374a:	84 ee       	ldi	r24, 0xE4	; 228
    374c:	92 e4       	ldi	r25, 0x42	; 66
    374e:	8f 93       	push	r24
    3750:	89 ea       	ldi	r24, 0xA9	; 169
    3752:	95 e4       	ldi	r25, 0x45	; 69
    3754:	89 2f       	mov	r24, r25
    3756:	8f 93       	push	r24
    3758:	89 ea       	ldi	r24, 0xA9	; 169
    375a:	95 e4       	ldi	r25, 0x45	; 69
    375c:	8f 93       	push	r24
    375e:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	49 ea       	ldi	r20, 0xA9	; 169
    3770:	55 e4       	ldi	r21, 0x45	; 69
    3772:	67 ed       	ldi	r22, 0xD7	; 215
    3774:	72 e4       	ldi	r23, 0x42	; 66
    3776:	83 e0       	ldi	r24, 0x03	; 3
    3778:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <_Z11lb_send_msg13LBMessageTypePKcPc>
    377c:	5c c3       	rjmp	.+1720   	; 0x3e36 <_Z17handleLinkBusMsgsv+0xd14>
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	8d 8b       	std	Y+21, r24	; 0x15
    378c:	9e 8b       	std	Y+22, r25	; 0x16
    378e:	af 8b       	std	Y+23, r26	; 0x17
    3790:	b8 8f       	std	Y+24, r27	; 0x18
    3792:	8d 89       	ldd	r24, Y+21	; 0x15
    3794:	9e 89       	ldd	r25, Y+22	; 0x16
    3796:	af 89       	ldd	r26, Y+23	; 0x17
    3798:	b8 8d       	ldd	r27, Y+24	; 0x18
    379a:	bc 01       	movw	r22, r24
    379c:	cd 01       	movw	r24, r26
    379e:	0e 94 42 02 	call	0x484	; 0x484 <set_system_time>
    37a2:	80 91 57 46 	lds	r24, 0x4657	; 0x804657 <_ZZ17handleLinkBusMsgsvE8lastTime>
    37a6:	90 91 58 46 	lds	r25, 0x4658	; 0x804658 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    37aa:	a0 91 59 46 	lds	r26, 0x4659	; 0x804659 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    37ae:	b0 91 5a 46 	lds	r27, 0x465A	; 0x80465a <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    37b2:	2d 89       	ldd	r18, Y+21	; 0x15
    37b4:	3e 89       	ldd	r19, Y+22	; 0x16
    37b6:	4f 89       	ldd	r20, Y+23	; 0x17
    37b8:	58 8d       	ldd	r21, Y+24	; 0x18
    37ba:	28 17       	cp	r18, r24
    37bc:	39 07       	cpc	r19, r25
    37be:	4a 07       	cpc	r20, r26
    37c0:	5b 07       	cpc	r21, r27
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <_Z17handleLinkBusMsgsv+0x6a4>
    37c4:	38 c3       	rjmp	.+1648   	; 0x3e36 <_Z17handleLinkBusMsgsv+0xd14>
    37c6:	88 8d       	ldd	r24, Y+24	; 0x18
    37c8:	8f 93       	push	r24
    37ca:	8f 89       	ldd	r24, Y+23	; 0x17
    37cc:	8f 93       	push	r24
    37ce:	8e 89       	ldd	r24, Y+22	; 0x16
    37d0:	8f 93       	push	r24
    37d2:	8d 89       	ldd	r24, Y+21	; 0x15
    37d4:	8f 93       	push	r24
    37d6:	83 ed       	ldi	r24, 0xD3	; 211
    37d8:	92 e4       	ldi	r25, 0x42	; 66
    37da:	89 2f       	mov	r24, r25
    37dc:	8f 93       	push	r24
    37de:	83 ed       	ldi	r24, 0xD3	; 211
    37e0:	92 e4       	ldi	r25, 0x42	; 66
    37e2:	8f 93       	push	r24
    37e4:	89 ea       	ldi	r24, 0xA9	; 169
    37e6:	95 e4       	ldi	r25, 0x45	; 69
    37e8:	89 2f       	mov	r24, r25
    37ea:	8f 93       	push	r24
    37ec:	89 ea       	ldi	r24, 0xA9	; 169
    37ee:	95 e4       	ldi	r25, 0x45	; 69
    37f0:	8f 93       	push	r24
    37f2:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    37f6:	2d b7       	in	r18, 0x3d	; 61
    37f8:	3e b7       	in	r19, 0x3e	; 62
    37fa:	28 5f       	subi	r18, 0xF8	; 248
    37fc:	3f 4f       	sbci	r19, 0xFF	; 255
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	49 ea       	ldi	r20, 0xA9	; 169
    3804:	55 e4       	ldi	r21, 0x45	; 69
    3806:	67 ed       	ldi	r22, 0xD7	; 215
    3808:	72 e4       	ldi	r23, 0x42	; 66
    380a:	83 e0       	ldi	r24, 0x03	; 3
    380c:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3810:	8d 89       	ldd	r24, Y+21	; 0x15
    3812:	9e 89       	ldd	r25, Y+22	; 0x16
    3814:	af 89       	ldd	r26, Y+23	; 0x17
    3816:	b8 8d       	ldd	r27, Y+24	; 0x18
    3818:	80 93 57 46 	sts	0x4657, r24	; 0x804657 <_ZZ17handleLinkBusMsgsvE8lastTime>
    381c:	90 93 58 46 	sts	0x4658, r25	; 0x804658 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    3820:	a0 93 59 46 	sts	0x4659, r26	; 0x804659 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    3824:	b0 93 5a 46 	sts	0x465A, r27	; 0x80465a <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    3828:	06 c3       	rjmp	.+1548   	; 0x3e36 <_Z17handleLinkBusMsgsv+0xd14>
    382a:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    382e:	8f 5f       	subi	r24, 0xFF	; 255
    3830:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3834:	8c 85       	ldd	r24, Y+12	; 0x0c
    3836:	9d 85       	ldd	r25, Y+13	; 0x0d
    3838:	fc 01       	movw	r30, r24
    383a:	83 81       	ldd	r24, Z+3	; 0x03
    383c:	88 23       	and	r24, r24
    383e:	81 f1       	breq	.+96     	; 0x38a0 <_Z17handleLinkBusMsgsv+0x77e>
    3840:	8c 85       	ldd	r24, Y+12	; 0x0c
    3842:	9d 85       	ldd	r25, Y+13	; 0x0d
    3844:	03 96       	adiw	r24, 0x03	; 3
    3846:	44 e1       	ldi	r20, 0x14	; 20
    3848:	50 e0       	ldi	r21, 0x00	; 0
    384a:	bc 01       	movw	r22, r24
    384c:	8f ef       	ldi	r24, 0xFF	; 255
    384e:	95 e4       	ldi	r25, 0x45	; 69
    3850:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <strncpy>
    3854:	80 91 ff 45 	lds	r24, 0x45FF	; 0x8045ff <g_messages_text+0x15>
    3858:	88 23       	and	r24, r24
    385a:	09 f4       	brne	.+2      	; 0x385e <_Z17handleLinkBusMsgsv+0x73c>
    385c:	ee c2       	rjmp	.+1500   	; 0x3e3a <_Z17handleLinkBusMsgsv+0xd18>
    385e:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    3862:	88 2f       	mov	r24, r24
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	bc 01       	movw	r22, r24
    3868:	8f ef       	ldi	r24, 0xFF	; 255
    386a:	95 e4       	ldi	r25, 0x45	; 69
    386c:	0e 94 2a 3a 	call	0x7454	; 0x7454 <_Z26timeRequiredToSendStrAtWPMPcj>
    3870:	8c 50       	subi	r24, 0x0C	; 12
    3872:	9e 4f       	sbci	r25, 0xFE	; 254
    3874:	96 95       	lsr	r25
    3876:	87 95       	ror	r24
    3878:	96 95       	lsr	r25
    387a:	87 95       	ror	r24
    387c:	96 95       	lsr	r25
    387e:	87 95       	ror	r24
    3880:	9c 01       	movw	r18, r24
    3882:	a5 ec       	ldi	r26, 0xC5	; 197
    3884:	b0 e2       	ldi	r27, 0x20	; 32
    3886:	0e 94 c7 4b 	call	0x978e	; 0x978e <__umulhisi3>
    388a:	92 95       	swap	r25
    388c:	82 95       	swap	r24
    388e:	8f 70       	andi	r24, 0x0F	; 15
    3890:	89 27       	eor	r24, r25
    3892:	9f 70       	andi	r25, 0x0F	; 15
    3894:	89 27       	eor	r24, r25
    3896:	80 93 14 46 	sts	0x4614, r24	; 0x804614 <g_time_needed_for_ID>
    389a:	90 93 15 46 	sts	0x4615, r25	; 0x804615 <g_time_needed_for_ID+0x1>
    389e:	cd c2       	rjmp	.+1434   	; 0x3e3a <_Z17handleLinkBusMsgsv+0xd18>
    38a0:	80 91 ff 45 	lds	r24, 0x45FF	; 0x8045ff <g_messages_text+0x15>
    38a4:	88 23       	and	r24, r24
    38a6:	09 f4       	brne	.+2      	; 0x38aa <_Z17handleLinkBusMsgsv+0x788>
    38a8:	c8 c2       	rjmp	.+1424   	; 0x3e3a <_Z17handleLinkBusMsgsv+0xd18>
    38aa:	8f ef       	ldi	r24, 0xFF	; 255
    38ac:	95 e4       	ldi	r25, 0x45	; 69
    38ae:	89 2f       	mov	r24, r25
    38b0:	8f 93       	push	r24
    38b2:	8f ef       	ldi	r24, 0xFF	; 255
    38b4:	95 e4       	ldi	r25, 0x45	; 69
    38b6:	8f 93       	push	r24
    38b8:	89 ee       	ldi	r24, 0xE9	; 233
    38ba:	92 e4       	ldi	r25, 0x42	; 66
    38bc:	89 2f       	mov	r24, r25
    38be:	8f 93       	push	r24
    38c0:	89 ee       	ldi	r24, 0xE9	; 233
    38c2:	92 e4       	ldi	r25, 0x42	; 66
    38c4:	8f 93       	push	r24
    38c6:	89 ea       	ldi	r24, 0xA9	; 169
    38c8:	95 e4       	ldi	r25, 0x45	; 69
    38ca:	89 2f       	mov	r24, r25
    38cc:	8f 93       	push	r24
    38ce:	89 ea       	ldi	r24, 0xA9	; 169
    38d0:	95 e4       	ldi	r25, 0x45	; 69
    38d2:	8f 93       	push	r24
    38d4:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	89 ea       	ldi	r24, 0xA9	; 169
    38e6:	95 e4       	ldi	r25, 0x45	; 69
    38e8:	0e 94 88 37 	call	0x6f10	; 0x6f10 <_Z12lb_send_textPc>
    38ec:	19 82       	std	Y+1, r1	; 0x01
    38ee:	a5 c2       	rjmp	.+1354   	; 0x3e3a <_Z17handleLinkBusMsgsv+0xd18>
    38f0:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    38f4:	89 8f       	std	Y+25, r24	; 0x19
    38f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    38f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    38fa:	fc 01       	movw	r30, r24
    38fc:	83 81       	ldd	r24, Z+3	; 0x03
    38fe:	89 34       	cpi	r24, 0x49	; 73
    3900:	09 f0       	breq	.+2      	; 0x3904 <_Z17handleLinkBusMsgsv+0x7e2>
    3902:	4f c0       	rjmp	.+158    	; 0x39a2 <_Z17handleLinkBusMsgsv+0x880>
    3904:	8c 85       	ldd	r24, Y+12	; 0x0c
    3906:	9d 85       	ldd	r25, Y+13	; 0x0d
    3908:	fc 01       	movw	r30, r24
    390a:	80 8d       	ldd	r24, Z+24	; 0x18
    390c:	88 23       	and	r24, r24
    390e:	09 f4       	brne	.+2      	; 0x3912 <_Z17handleLinkBusMsgsv+0x7f0>
    3910:	96 c2       	rjmp	.+1324   	; 0x3e3e <_Z17handleLinkBusMsgsv+0xd1c>
    3912:	8c 85       	ldd	r24, Y+12	; 0x0c
    3914:	9d 85       	ldd	r25, Y+13	; 0x0d
    3916:	48 96       	adiw	r24, 0x18	; 24
    3918:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	89 8f       	std	Y+25, r24	; 0x19
    3922:	89 8d       	ldd	r24, Y+25	; 0x19
    3924:	8a 8f       	std	Y+26, r24	; 0x1a
    3926:	85 e0       	ldi	r24, 0x05	; 5
    3928:	8b 8f       	std	Y+27, r24	; 0x1b
    392a:	84 e1       	ldi	r24, 0x14	; 20
    392c:	8c 8f       	std	Y+28, r24	; 0x1c
    392e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3930:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3932:	89 17       	cp	r24, r25
    3934:	40 f0       	brcs	.+16     	; 0x3946 <_Z17handleLinkBusMsgsv+0x824>
    3936:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    393a:	98 17       	cp	r25, r24
    393c:	10 f4       	brcc	.+4      	; 0x3942 <_Z17handleLinkBusMsgsv+0x820>
    393e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3940:	03 c0       	rjmp	.+6      	; 0x3948 <_Z17handleLinkBusMsgsv+0x826>
    3942:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3944:	01 c0       	rjmp	.+2      	; 0x3948 <_Z17handleLinkBusMsgsv+0x826>
    3946:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3948:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    394c:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3950:	8f 5f       	subi	r24, 0xFF	; 255
    3952:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3956:	80 91 ff 45 	lds	r24, 0x45FF	; 0x8045ff <g_messages_text+0x15>
    395a:	88 23       	and	r24, r24
    395c:	09 f4       	brne	.+2      	; 0x3960 <_Z17handleLinkBusMsgsv+0x83e>
    395e:	6f c2       	rjmp	.+1246   	; 0x3e3e <_Z17handleLinkBusMsgsv+0xd1c>
    3960:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    3964:	88 2f       	mov	r24, r24
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	bc 01       	movw	r22, r24
    396a:	8f ef       	ldi	r24, 0xFF	; 255
    396c:	95 e4       	ldi	r25, 0x45	; 69
    396e:	0e 94 2a 3a 	call	0x7454	; 0x7454 <_Z26timeRequiredToSendStrAtWPMPcj>
    3972:	8c 50       	subi	r24, 0x0C	; 12
    3974:	9e 4f       	sbci	r25, 0xFE	; 254
    3976:	96 95       	lsr	r25
    3978:	87 95       	ror	r24
    397a:	96 95       	lsr	r25
    397c:	87 95       	ror	r24
    397e:	96 95       	lsr	r25
    3980:	87 95       	ror	r24
    3982:	9c 01       	movw	r18, r24
    3984:	a5 ec       	ldi	r26, 0xC5	; 197
    3986:	b0 e2       	ldi	r27, 0x20	; 32
    3988:	0e 94 c7 4b 	call	0x978e	; 0x978e <__umulhisi3>
    398c:	92 95       	swap	r25
    398e:	82 95       	swap	r24
    3990:	8f 70       	andi	r24, 0x0F	; 15
    3992:	89 27       	eor	r24, r25
    3994:	9f 70       	andi	r25, 0x0F	; 15
    3996:	89 27       	eor	r24, r25
    3998:	80 93 14 46 	sts	0x4614, r24	; 0x804614 <g_time_needed_for_ID>
    399c:	90 93 15 46 	sts	0x4615, r25	; 0x804615 <g_time_needed_for_ID+0x1>
    39a0:	4e c2       	rjmp	.+1180   	; 0x3e3e <_Z17handleLinkBusMsgsv+0xd1c>
    39a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    39a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    39a6:	fc 01       	movw	r30, r24
    39a8:	83 81       	ldd	r24, Z+3	; 0x03
    39aa:	80 35       	cpi	r24, 0x50	; 80
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <_Z17handleLinkBusMsgsv+0x88e>
    39ae:	47 c2       	rjmp	.+1166   	; 0x3e3e <_Z17handleLinkBusMsgsv+0xd1c>
    39b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    39b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    39b4:	fc 01       	movw	r30, r24
    39b6:	80 8d       	ldd	r24, Z+24	; 0x18
    39b8:	88 23       	and	r24, r24
    39ba:	09 f4       	brne	.+2      	; 0x39be <_Z17handleLinkBusMsgsv+0x89c>
    39bc:	40 c2       	rjmp	.+1152   	; 0x3e3e <_Z17handleLinkBusMsgsv+0xd1c>
    39be:	8c 85       	ldd	r24, Y+12	; 0x0c
    39c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    39c2:	48 96       	adiw	r24, 0x18	; 24
    39c4:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	89 8f       	std	Y+25, r24	; 0x19
    39ce:	89 8d       	ldd	r24, Y+25	; 0x19
    39d0:	8d 8f       	std	Y+29, r24	; 0x1d
    39d2:	85 e0       	ldi	r24, 0x05	; 5
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	8e 8f       	std	Y+30, r24	; 0x1e
    39d8:	9f 8f       	std	Y+31, r25	; 0x1f
    39da:	84 e1       	ldi	r24, 0x14	; 20
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	88 a3       	std	Y+32, r24	; 0x20
    39e0:	99 a3       	std	Y+33, r25	; 0x21
    39e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39e4:	28 2f       	mov	r18, r24
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	88 a1       	ldd	r24, Y+32	; 0x20
    39ea:	99 a1       	ldd	r25, Y+33	; 0x21
    39ec:	82 17       	cp	r24, r18
    39ee:	93 07       	cpc	r25, r19
    39f0:	54 f0       	brlt	.+20     	; 0x3a06 <_Z17handleLinkBusMsgsv+0x8e4>
    39f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39f4:	88 2f       	mov	r24, r24
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    39fa:	3f 8d       	ldd	r19, Y+31	; 0x1f
    39fc:	82 17       	cp	r24, r18
    39fe:	93 07       	cpc	r25, r19
    3a00:	24 f4       	brge	.+8      	; 0x3a0a <_Z17handleLinkBusMsgsv+0x8e8>
    3a02:	c9 01       	movw	r24, r18
    3a04:	02 c0       	rjmp	.+4      	; 0x3a0a <_Z17handleLinkBusMsgsv+0x8e8>
    3a06:	88 a1       	ldd	r24, Y+32	; 0x20
    3a08:	99 a1       	ldd	r25, Y+33	; 0x21
    3a0a:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    3a0e:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a12:	8f 5f       	subi	r24, 0xFF	; 255
    3a14:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a18:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3a1c:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    3a20:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    3a24:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    3a28:	0a c2       	rjmp	.+1044   	; 0x3e3e <_Z17handleLinkBusMsgsv+0xd1c>
    3a2a:	1a a2       	std	Y+34, r1	; 0x22
    3a2c:	1b a2       	std	Y+35, r1	; 0x23
    3a2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a30:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a32:	fc 01       	movw	r30, r24
    3a34:	83 81       	ldd	r24, Z+3	; 0x03
    3a36:	80 33       	cpi	r24, 0x30	; 48
    3a38:	e1 f4       	brne	.+56     	; 0x3a72 <_Z17handleLinkBusMsgsv+0x950>
    3a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a3e:	fc 01       	movw	r30, r24
    3a40:	80 8d       	ldd	r24, Z+24	; 0x18
    3a42:	88 23       	and	r24, r24
    3a44:	09 f4       	brne	.+2      	; 0x3a48 <_Z17handleLinkBusMsgsv+0x926>
    3a46:	fd c1       	rjmp	.+1018   	; 0x3e42 <_Z17handleLinkBusMsgsv+0xd20>
    3a48:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a4c:	48 96       	adiw	r24, 0x18	; 24
    3a4e:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	8a a3       	std	Y+34, r24	; 0x22
    3a58:	9b a3       	std	Y+35, r25	; 0x23
    3a5a:	8a a1       	ldd	r24, Y+34	; 0x22
    3a5c:	9b a1       	ldd	r25, Y+35	; 0x23
    3a5e:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    3a62:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    3a66:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a6a:	8f 5f       	subi	r24, 0xFF	; 255
    3a6c:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a70:	e8 c1       	rjmp	.+976    	; 0x3e42 <_Z17handleLinkBusMsgsv+0xd20>
    3a72:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a74:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a76:	fc 01       	movw	r30, r24
    3a78:	83 81       	ldd	r24, Z+3	; 0x03
    3a7a:	81 33       	cpi	r24, 0x31	; 49
    3a7c:	e1 f4       	brne	.+56     	; 0x3ab6 <_Z17handleLinkBusMsgsv+0x994>
    3a7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a80:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a82:	fc 01       	movw	r30, r24
    3a84:	80 8d       	ldd	r24, Z+24	; 0x18
    3a86:	88 23       	and	r24, r24
    3a88:	09 f4       	brne	.+2      	; 0x3a8c <_Z17handleLinkBusMsgsv+0x96a>
    3a8a:	db c1       	rjmp	.+950    	; 0x3e42 <_Z17handleLinkBusMsgsv+0xd20>
    3a8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a90:	48 96       	adiw	r24, 0x18	; 24
    3a92:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	8a a3       	std	Y+34, r24	; 0x22
    3a9c:	9b a3       	std	Y+35, r25	; 0x23
    3a9e:	8a a1       	ldd	r24, Y+34	; 0x22
    3aa0:	9b a1       	ldd	r25, Y+35	; 0x23
    3aa2:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3aa6:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3aaa:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3aae:	8f 5f       	subi	r24, 0xFF	; 255
    3ab0:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3ab4:	c6 c1       	rjmp	.+908    	; 0x3e42 <_Z17handleLinkBusMsgsv+0xd20>
    3ab6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ab8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aba:	fc 01       	movw	r30, r24
    3abc:	83 81       	ldd	r24, Z+3	; 0x03
    3abe:	89 34       	cpi	r24, 0x49	; 73
    3ac0:	e1 f4       	brne	.+56     	; 0x3afa <_Z17handleLinkBusMsgsv+0x9d8>
    3ac2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ac4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	80 8d       	ldd	r24, Z+24	; 0x18
    3aca:	88 23       	and	r24, r24
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <_Z17handleLinkBusMsgsv+0x9ae>
    3ace:	b9 c1       	rjmp	.+882    	; 0x3e42 <_Z17handleLinkBusMsgsv+0xd20>
    3ad0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ad2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ad4:	48 96       	adiw	r24, 0x18	; 24
    3ad6:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	8a a3       	std	Y+34, r24	; 0x22
    3ae0:	9b a3       	std	Y+35, r25	; 0x23
    3ae2:	8a a1       	ldd	r24, Y+34	; 0x22
    3ae4:	9b a1       	ldd	r25, Y+35	; 0x23
    3ae6:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <g_ID_period_seconds>
    3aea:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <g_ID_period_seconds+0x1>
    3aee:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3af2:	8f 5f       	subi	r24, 0xFF	; 255
    3af4:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3af8:	a4 c1       	rjmp	.+840    	; 0x3e42 <_Z17handleLinkBusMsgsv+0xd20>
    3afa:	8c 85       	ldd	r24, Y+12	; 0x0c
    3afc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3afe:	fc 01       	movw	r30, r24
    3b00:	83 81       	ldd	r24, Z+3	; 0x03
    3b02:	84 34       	cpi	r24, 0x44	; 68
    3b04:	09 f0       	breq	.+2      	; 0x3b08 <_Z17handleLinkBusMsgsv+0x9e6>
    3b06:	9d c1       	rjmp	.+826    	; 0x3e42 <_Z17handleLinkBusMsgsv+0xd20>
    3b08:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	80 8d       	ldd	r24, Z+24	; 0x18
    3b10:	88 23       	and	r24, r24
    3b12:	09 f4       	brne	.+2      	; 0x3b16 <_Z17handleLinkBusMsgsv+0x9f4>
    3b14:	96 c1       	rjmp	.+812    	; 0x3e42 <_Z17handleLinkBusMsgsv+0xd20>
    3b16:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b18:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b1a:	48 96       	adiw	r24, 0x18	; 24
    3b1c:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	8a a3       	std	Y+34, r24	; 0x22
    3b26:	9b a3       	std	Y+35, r25	; 0x23
    3b28:	8a a1       	ldd	r24, Y+34	; 0x22
    3b2a:	9b a1       	ldd	r25, Y+35	; 0x23
    3b2c:	80 93 16 46 	sts	0x4616, r24	; 0x804616 <g_intra_cycle_delay_time>
    3b30:	90 93 17 46 	sts	0x4617, r25	; 0x804617 <g_intra_cycle_delay_time+0x1>
    3b34:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b38:	8f 5f       	subi	r24, 0xFF	; 255
    3b3a:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b3e:	81 c1       	rjmp	.+770    	; 0x3e42 <_Z17handleLinkBusMsgsv+0xd20>
    3b40:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b42:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b44:	fc 01       	movw	r30, r24
    3b46:	83 81       	ldd	r24, Z+3	; 0x03
    3b48:	88 23       	and	r24, r24
    3b4a:	09 f4       	brne	.+2      	; 0x3b4e <_Z17handleLinkBusMsgsv+0xa2c>
    3b4c:	7c c1       	rjmp	.+760    	; 0x3e46 <_Z17handleLinkBusMsgsv+0xd24>
    3b4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b50:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b52:	03 96       	adiw	r24, 0x03	; 3
    3b54:	44 e1       	ldi	r20, 0x14	; 20
    3b56:	50 e0       	ldi	r21, 0x00	; 0
    3b58:	bc 01       	movw	r22, r24
    3b5a:	8a ee       	ldi	r24, 0xEA	; 234
    3b5c:	95 e4       	ldi	r25, 0x45	; 69
    3b5e:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <strncpy>
    3b62:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b66:	8f 5f       	subi	r24, 0xFF	; 255
    3b68:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b6c:	6c c1       	rjmp	.+728    	; 0x3e46 <_Z17handleLinkBusMsgsv+0xd24>
    3b6e:	1e 82       	std	Y+6, r1	; 0x06
    3b70:	1f 82       	std	Y+7, r1	; 0x07
    3b72:	18 86       	std	Y+8, r1	; 0x08
    3b74:	19 86       	std	Y+9, r1	; 0x09
    3b76:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b78:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	83 81       	ldd	r24, Z+3	; 0x03
    3b7e:	88 23       	and	r24, r24
    3b80:	99 f1       	breq	.+102    	; 0x3be8 <_Z17handleLinkBusMsgsv+0xac6>
    3b82:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b84:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b86:	03 96       	adiw	r24, 0x03	; 3
    3b88:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	80 93 5b 46 	sts	0x465B, r24	; 0x80465b <_ZZ17handleLinkBusMsgsvE1f>
    3b94:	90 93 5c 46 	sts	0x465C, r25	; 0x80465c <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3b98:	a0 93 5d 46 	sts	0x465D, r26	; 0x80465d <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3b9c:	b0 93 5e 46 	sts	0x465E, r27	; 0x80465e <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3ba0:	80 91 5b 46 	lds	r24, 0x465B	; 0x80465b <_ZZ17handleLinkBusMsgsvE1f>
    3ba4:	90 91 5c 46 	lds	r25, 0x465C	; 0x80465c <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3ba8:	a0 91 5d 46 	lds	r26, 0x465D	; 0x80465d <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3bac:	b0 91 5e 46 	lds	r27, 0x465E	; 0x80465e <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3bb0:	8e a7       	std	Y+46, r24	; 0x2e
    3bb2:	9f a7       	std	Y+47, r25	; 0x2f
    3bb4:	a8 ab       	std	Y+48, r26	; 0x30
    3bb6:	b9 ab       	std	Y+49, r27	; 0x31
    3bb8:	ce 01       	movw	r24, r28
    3bba:	8e 96       	adiw	r24, 0x2e	; 46
    3bbc:	61 e0       	ldi	r22, 0x01	; 1
    3bbe:	0e 94 67 44 	call	0x88ce	; 0x88ce <_Z14txSetFrequencyPmb>
    3bc2:	98 2f       	mov	r25, r24
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	89 27       	eor	r24, r25
    3bc8:	88 23       	and	r24, r24
    3bca:	b1 f0       	breq	.+44     	; 0x3bf8 <_Z17handleLinkBusMsgsv+0xad6>
    3bcc:	8e a5       	ldd	r24, Y+46	; 0x2e
    3bce:	9f a5       	ldd	r25, Y+47	; 0x2f
    3bd0:	a8 a9       	ldd	r26, Y+48	; 0x30
    3bd2:	b9 a9       	ldd	r27, Y+49	; 0x31
    3bd4:	8e 83       	std	Y+6, r24	; 0x06
    3bd6:	9f 83       	std	Y+7, r25	; 0x07
    3bd8:	a8 87       	std	Y+8, r26	; 0x08
    3bda:	b9 87       	std	Y+9, r27	; 0x09
    3bdc:	80 91 55 46 	lds	r24, 0x4655	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3be0:	8f 5f       	subi	r24, 0xFF	; 255
    3be2:	80 93 55 46 	sts	0x4655, r24	; 0x804655 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3be6:	08 c0       	rjmp	.+16     	; 0x3bf8 <_Z17handleLinkBusMsgsv+0xad6>
    3be8:	0e 94 99 44 	call	0x8932	; 0x8932 <_Z14txGetFrequencyv>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	8e 83       	std	Y+6, r24	; 0x06
    3bf2:	9f 83       	std	Y+7, r25	; 0x07
    3bf4:	a8 87       	std	Y+8, r26	; 0x08
    3bf6:	b9 87       	std	Y+9, r27	; 0x09
    3bf8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    3bfc:	a8 85       	ldd	r26, Y+8	; 0x08
    3bfe:	b9 85       	ldd	r27, Y+9	; 0x09
    3c00:	89 2b       	or	r24, r25
    3c02:	8a 2b       	or	r24, r26
    3c04:	8b 2b       	or	r24, r27
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <_Z17handleLinkBusMsgsv+0xae8>
    3c08:	20 c1       	rjmp	.+576    	; 0x3e4a <_Z17handleLinkBusMsgsv+0xd28>
    3c0a:	89 85       	ldd	r24, Y+9	; 0x09
    3c0c:	8f 93       	push	r24
    3c0e:	88 85       	ldd	r24, Y+8	; 0x08
    3c10:	8f 93       	push	r24
    3c12:	8f 81       	ldd	r24, Y+7	; 0x07
    3c14:	8f 93       	push	r24
    3c16:	8e 81       	ldd	r24, Y+6	; 0x06
    3c18:	8f 93       	push	r24
    3c1a:	82 ef       	ldi	r24, 0xF2	; 242
    3c1c:	92 e4       	ldi	r25, 0x42	; 66
    3c1e:	89 2f       	mov	r24, r25
    3c20:	8f 93       	push	r24
    3c22:	82 ef       	ldi	r24, 0xF2	; 242
    3c24:	92 e4       	ldi	r25, 0x42	; 66
    3c26:	8f 93       	push	r24
    3c28:	89 ea       	ldi	r24, 0xA9	; 169
    3c2a:	95 e4       	ldi	r25, 0x45	; 69
    3c2c:	89 2f       	mov	r24, r25
    3c2e:	8f 93       	push	r24
    3c30:	89 ea       	ldi	r24, 0xA9	; 169
    3c32:	95 e4       	ldi	r25, 0x45	; 69
    3c34:	8f 93       	push	r24
    3c36:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    3c3a:	2d b7       	in	r18, 0x3d	; 61
    3c3c:	3e b7       	in	r19, 0x3e	; 62
    3c3e:	28 5f       	subi	r18, 0xF8	; 248
    3c40:	3f 4f       	sbci	r19, 0xFF	; 255
    3c42:	cd bf       	out	0x3d, r28	; 61
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	49 ea       	ldi	r20, 0xA9	; 169
    3c48:	55 e4       	ldi	r21, 0x45	; 69
    3c4a:	67 ef       	ldi	r22, 0xF7	; 247
    3c4c:	72 e4       	ldi	r23, 0x42	; 66
    3c4e:	83 e0       	ldi	r24, 0x03	; 3
    3c50:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3c54:	fa c0       	rjmp	.+500    	; 0x3e4a <_Z17handleLinkBusMsgsv+0xd28>
    3c56:	80 91 2a 46 	lds	r24, 0x462A	; 0x80462a <_ZL22g_lastConversionResult>
    3c5a:	90 91 2b 46 	lds	r25, 0x462B	; 0x80462b <_ZL22g_lastConversionResult+0x1>
    3c5e:	21 e0       	ldi	r18, 0x01	; 1
    3c60:	8d 38       	cpi	r24, 0x8D	; 141
    3c62:	92 40       	sbci	r25, 0x02	; 2
    3c64:	08 f4       	brcc	.+2      	; 0x3c68 <_Z17handleLinkBusMsgsv+0xb46>
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	22 23       	and	r18, r18
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <_Z17handleLinkBusMsgsv+0xb4c>
    3c6c:	7c c0       	rjmp	.+248    	; 0x3d66 <_Z17handleLinkBusMsgsv+0xc44>
    3c6e:	80 91 2a 46 	lds	r24, 0x462A	; 0x80462a <_ZL22g_lastConversionResult>
    3c72:	90 91 2b 46 	lds	r25, 0x462B	; 0x80462b <_ZL22g_lastConversionResult+0x1>
    3c76:	cc 01       	movw	r24, r24
    3c78:	a0 e0       	ldi	r26, 0x00	; 0
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	9c 01       	movw	r18, r24
    3c7e:	ad 01       	movw	r20, r26
    3c80:	60 ea       	ldi	r22, 0xA0	; 160
    3c82:	78 e6       	ldi	r23, 0x68	; 104
    3c84:	86 e0       	ldi	r24, 0x06	; 6
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 45 4b 	call	0x968a	; 0x968a <__mulsi3>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	7c 01       	movw	r14, r24
    3c92:	8d 01       	movw	r16, r26
    3c94:	ed e7       	ldi	r30, 0x7D	; 125
    3c96:	fe 1a       	sub	r15, r30
    3c98:	0c 40       	sbci	r16, 0x0C	; 12
    3c9a:	1e 4f       	sbci	r17, 0xFE	; 254
    3c9c:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3ca0:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3ca4:	cc 01       	movw	r24, r24
    3ca6:	a0 e0       	ldi	r26, 0x00	; 0
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	9c 01       	movw	r18, r24
    3cac:	ad 01       	movw	r20, r26
    3cae:	64 e6       	ldi	r22, 0x64	; 100
    3cb0:	70 e7       	ldi	r23, 0x70	; 112
    3cb2:	8e ef       	ldi	r24, 0xFE	; 254
    3cb4:	9f ef       	ldi	r25, 0xFF	; 255
    3cb6:	0e 94 45 4b 	call	0x968a	; 0x968a <__mulsi3>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	e8 0e       	add	r14, r24
    3cc0:	f9 1e       	adc	r15, r25
    3cc2:	0a 1f       	adc	r16, r26
    3cc4:	1b 1f       	adc	r17, r27
    3cc6:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3cca:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3cce:	cc 01       	movw	r24, r24
    3cd0:	a0 e0       	ldi	r26, 0x00	; 0
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	28 e6       	ldi	r18, 0x68	; 104
    3cd6:	30 e1       	ldi	r19, 0x10	; 16
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	28 1b       	sub	r18, r24
    3cde:	39 0b       	sbc	r19, r25
    3ce0:	4a 0b       	sbc	r20, r26
    3ce2:	5b 0b       	sbc	r21, r27
    3ce4:	8f ef       	ldi	r24, 0xFF	; 255
    3ce6:	93 e0       	ldi	r25, 0x03	; 3
    3ce8:	dc 01       	movw	r26, r24
    3cea:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <__muluhisi3>
    3cee:	9b 01       	movw	r18, r22
    3cf0:	ac 01       	movw	r20, r24
    3cf2:	c8 01       	movw	r24, r16
    3cf4:	b7 01       	movw	r22, r14
    3cf6:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    3cfa:	da 01       	movw	r26, r20
    3cfc:	c9 01       	movw	r24, r18
    3cfe:	8c a3       	std	Y+36, r24	; 0x24
    3d00:	9d a3       	std	Y+37, r25	; 0x25
    3d02:	ae a3       	std	Y+38, r26	; 0x26
    3d04:	bf a3       	std	Y+39, r27	; 0x27
    3d06:	18 a6       	std	Y+40, r1	; 0x28
    3d08:	19 a6       	std	Y+41, r1	; 0x29
    3d0a:	84 e6       	ldi	r24, 0x64	; 100
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	8a a7       	std	Y+42, r24	; 0x2a
    3d10:	9b a7       	std	Y+43, r25	; 0x2b
    3d12:	8a a5       	ldd	r24, Y+42	; 0x2a
    3d14:	9b a5       	ldd	r25, Y+43	; 0x2b
    3d16:	9c 01       	movw	r18, r24
    3d18:	99 0f       	add	r25, r25
    3d1a:	44 0b       	sbc	r20, r20
    3d1c:	55 0b       	sbc	r21, r21
    3d1e:	8c a1       	ldd	r24, Y+36	; 0x24
    3d20:	9d a1       	ldd	r25, Y+37	; 0x25
    3d22:	ae a1       	ldd	r26, Y+38	; 0x26
    3d24:	bf a1       	ldd	r27, Y+39	; 0x27
    3d26:	28 17       	cp	r18, r24
    3d28:	39 07       	cpc	r19, r25
    3d2a:	4a 07       	cpc	r20, r26
    3d2c:	5b 07       	cpc	r21, r27
    3d2e:	3c f4       	brge	.+14     	; 0x3d3e <_Z17handleLinkBusMsgsv+0xc1c>
    3d30:	8a a5       	ldd	r24, Y+42	; 0x2a
    3d32:	9b a5       	ldd	r25, Y+43	; 0x2b
    3d34:	09 2e       	mov	r0, r25
    3d36:	00 0c       	add	r0, r0
    3d38:	aa 0b       	sbc	r26, r26
    3d3a:	bb 0b       	sbc	r27, r27
    3d3c:	11 c0       	rjmp	.+34     	; 0x3d60 <_Z17handleLinkBusMsgsv+0xc3e>
    3d3e:	88 a5       	ldd	r24, Y+40	; 0x28
    3d40:	99 a5       	ldd	r25, Y+41	; 0x29
    3d42:	09 2e       	mov	r0, r25
    3d44:	00 0c       	add	r0, r0
    3d46:	aa 0b       	sbc	r26, r26
    3d48:	bb 0b       	sbc	r27, r27
    3d4a:	2c a1       	ldd	r18, Y+36	; 0x24
    3d4c:	3d a1       	ldd	r19, Y+37	; 0x25
    3d4e:	4e a1       	ldd	r20, Y+38	; 0x26
    3d50:	5f a1       	ldd	r21, Y+39	; 0x27
    3d52:	82 17       	cp	r24, r18
    3d54:	93 07       	cpc	r25, r19
    3d56:	a4 07       	cpc	r26, r20
    3d58:	b5 07       	cpc	r27, r21
    3d5a:	14 f4       	brge	.+4      	; 0x3d60 <_Z17handleLinkBusMsgsv+0xc3e>
    3d5c:	da 01       	movw	r26, r20
    3d5e:	c9 01       	movw	r24, r18
    3d60:	8a 87       	std	Y+10, r24	; 0x0a
    3d62:	9b 87       	std	Y+11, r25	; 0x0b
    3d64:	2f c0       	rjmp	.+94     	; 0x3dc4 <_Z17handleLinkBusMsgsv+0xca2>
    3d66:	80 91 2e 46 	lds	r24, 0x462E	; 0x80462e <_ZL22g_lastConversionResult+0x4>
    3d6a:	90 91 2f 46 	lds	r25, 0x462F	; 0x80462f <_ZL22g_lastConversionResult+0x5>
    3d6e:	9c 01       	movw	r18, r24
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	50 e0       	ldi	r21, 0x00	; 0
    3d74:	da 01       	movw	r26, r20
    3d76:	c9 01       	movw	r24, r18
    3d78:	88 0f       	add	r24, r24
    3d7a:	99 1f       	adc	r25, r25
    3d7c:	aa 1f       	adc	r26, r26
    3d7e:	bb 1f       	adc	r27, r27
    3d80:	88 0f       	add	r24, r24
    3d82:	99 1f       	adc	r25, r25
    3d84:	aa 1f       	adc	r26, r26
    3d86:	bb 1f       	adc	r27, r27
    3d88:	88 0f       	add	r24, r24
    3d8a:	99 1f       	adc	r25, r25
    3d8c:	aa 1f       	adc	r26, r26
    3d8e:	bb 1f       	adc	r27, r27
    3d90:	82 1b       	sub	r24, r18
    3d92:	93 0b       	sbc	r25, r19
    3d94:	a4 0b       	sbc	r26, r20
    3d96:	b5 0b       	sbc	r27, r21
    3d98:	88 0f       	add	r24, r24
    3d9a:	99 1f       	adc	r25, r25
    3d9c:	aa 1f       	adc	r26, r26
    3d9e:	bb 1f       	adc	r27, r27
    3da0:	8a 5c       	subi	r24, 0xCA	; 202
    3da2:	9e 4f       	sbci	r25, 0xFE	; 254
    3da4:	af 4f       	sbci	r26, 0xFF	; 255
    3da6:	bf 4f       	sbci	r27, 0xFF	; 255
    3da8:	24 e6       	ldi	r18, 0x64	; 100
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	40 e0       	ldi	r20, 0x00	; 0
    3dae:	50 e0       	ldi	r21, 0x00	; 0
    3db0:	bc 01       	movw	r22, r24
    3db2:	cd 01       	movw	r24, r26
    3db4:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    3db8:	da 01       	movw	r26, r20
    3dba:	c9 01       	movw	r24, r18
    3dbc:	80 5f       	subi	r24, 0xF0	; 240
    3dbe:	98 4d       	sbci	r25, 0xD8	; 216
    3dc0:	8a 87       	std	Y+10, r24	; 0x0a
    3dc2:	9b 87       	std	Y+11, r25	; 0x0b
    3dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dc8:	6b ef       	ldi	r22, 0xFB	; 251
    3dca:	72 e4       	ldi	r23, 0x42	; 66
    3dcc:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <_Z16lb_broadcast_numjPKc>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	bc 01       	movw	r22, r24
    3dde:	cd 01       	movw	r24, r26
    3de0:	0e 94 42 02 	call	0x484	; 0x484 <set_system_time>
    3de4:	35 c0       	rjmp	.+106    	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3de6:	ce 01       	movw	r24, r28
    3de8:	c2 96       	adiw	r24, 0x32	; 50
    3dea:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <ds3231_get_temp>
    3dee:	98 2f       	mov	r25, r24
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	89 27       	eor	r24, r25
    3df4:	88 23       	and	r24, r24
    3df6:	59 f1       	breq	.+86     	; 0x3e4e <_Z17handleLinkBusMsgsv+0xd2c>
    3df8:	8a a9       	ldd	r24, Y+50	; 0x32
    3dfa:	9b a9       	ldd	r25, Y+51	; 0x33
    3dfc:	60 e0       	ldi	r22, 0x00	; 0
    3dfe:	73 e4       	ldi	r23, 0x43	; 67
    3e00:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <_Z16lb_broadcast_numjPKc>
    3e04:	24 c0       	rjmp	.+72     	; 0x3e4e <_Z17handleLinkBusMsgsv+0xd2c>
    3e06:	44 e6       	ldi	r20, 0x64	; 100
    3e08:	50 e4       	ldi	r21, 0x40	; 64
    3e0a:	65 e0       	ldi	r22, 0x05	; 5
    3e0c:	73 e4       	ldi	r23, 0x43	; 67
    3e0e:	83 e0       	ldi	r24, 0x03	; 3
    3e10:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3e14:	1d c0       	rjmp	.+58     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e16:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <_Z16linkbus_reset_rxv>
    3e1a:	8e ec       	ldi	r24, 0xCE	; 206
    3e1c:	80 93 db 45 	sts	0x45DB, r24	; 0x8045db <_ZL17g_last_error_code>
    3e20:	17 c0       	rjmp	.+46     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e22:	00 00       	nop
    3e24:	15 c0       	rjmp	.+42     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e26:	00 00       	nop
    3e28:	13 c0       	rjmp	.+38     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e2a:	00 00       	nop
    3e2c:	11 c0       	rjmp	.+34     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e2e:	00 00       	nop
    3e30:	0f c0       	rjmp	.+30     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e32:	00 00       	nop
    3e34:	0d c0       	rjmp	.+26     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e36:	00 00       	nop
    3e38:	0b c0       	rjmp	.+22     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e3a:	00 00       	nop
    3e3c:	09 c0       	rjmp	.+18     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e3e:	00 00       	nop
    3e40:	07 c0       	rjmp	.+14     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e42:	00 00       	nop
    3e44:	05 c0       	rjmp	.+10     	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e46:	00 00       	nop
    3e48:	03 c0       	rjmp	.+6      	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e4a:	00 00       	nop
    3e4c:	01 c0       	rjmp	.+2      	; 0x3e50 <_Z17handleLinkBusMsgsv+0xd2e>
    3e4e:	00 00       	nop
    3e50:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e52:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e54:	fc 01       	movw	r30, r24
    3e56:	11 82       	std	Z+1, r1	; 0x01
    3e58:	12 82       	std	Z+2, r1	; 0x02
    3e5a:	89 81       	ldd	r24, Y+1	; 0x01
    3e5c:	88 23       	and	r24, r24
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <_Z17handleLinkBusMsgsv+0xd40>
    3e60:	6d c9       	rjmp	.-3366   	; 0x313c <_Z17handleLinkBusMsgsv+0x1a>
    3e62:	89 e0       	ldi	r24, 0x09	; 9
    3e64:	93 e4       	ldi	r25, 0x43	; 67
    3e66:	0e 94 88 37 	call	0x6f10	; 0x6f10 <_Z12lb_send_textPc>
    3e6a:	68 c9       	rjmp	.-3376   	; 0x313c <_Z17handleLinkBusMsgsv+0x1a>
    3e6c:	00 00       	nop
    3e6e:	e3 96       	adiw	r28, 0x33	; 51
    3e70:	cd bf       	out	0x3d, r28	; 61
    3e72:	de bf       	out	0x3e, r29	; 62
    3e74:	df 91       	pop	r29
    3e76:	cf 91       	pop	r28
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	ff 90       	pop	r15
    3e7e:	ef 90       	pop	r14
    3e80:	08 95       	ret

00003e82 <_Z12eventEnabledv>:
    3e82:	ef 92       	push	r14
    3e84:	ff 92       	push	r15
    3e86:	0f 93       	push	r16
    3e88:	1f 93       	push	r17
    3e8a:	cf 93       	push	r28
    3e8c:	df 93       	push	r29
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
    3e92:	29 97       	sbiw	r28, 0x09	; 9
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	de bf       	out	0x3e, r29	; 62
    3e98:	20 91 18 46 	lds	r18, 0x4618	; 0x804618 <g_event_start_time>
    3e9c:	30 91 19 46 	lds	r19, 0x4619	; 0x804619 <g_event_start_time+0x1>
    3ea0:	40 91 1a 46 	lds	r20, 0x461A	; 0x80461a <g_event_start_time+0x2>
    3ea4:	50 91 1b 46 	lds	r21, 0x461B	; 0x80461b <g_event_start_time+0x3>
    3ea8:	80 91 1c 46 	lds	r24, 0x461C	; 0x80461c <g_event_finish_time>
    3eac:	90 91 1d 46 	lds	r25, 0x461D	; 0x80461d <g_event_finish_time+0x1>
    3eb0:	a0 91 1e 46 	lds	r26, 0x461E	; 0x80461e <g_event_finish_time+0x2>
    3eb4:	b0 91 1f 46 	lds	r27, 0x461F	; 0x80461f <g_event_finish_time+0x3>
    3eb8:	bc 01       	movw	r22, r24
    3eba:	cd 01       	movw	r24, r26
    3ebc:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <_Z7timeDifmm>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	89 83       	std	Y+1, r24	; 0x01
    3ec6:	9a 83       	std	Y+2, r25	; 0x02
    3ec8:	ab 83       	std	Y+3, r26	; 0x03
    3eca:	bc 83       	std	Y+4, r27	; 0x04
    3ecc:	21 e0       	ldi	r18, 0x01	; 1
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ed4:	bc 81       	ldd	r27, Y+4	; 0x04
    3ed6:	18 16       	cp	r1, r24
    3ed8:	19 06       	cpc	r1, r25
    3eda:	1a 06       	cpc	r1, r26
    3edc:	1b 06       	cpc	r1, r27
    3ede:	0c f0       	brlt	.+2      	; 0x3ee2 <_Z12eventEnabledv+0x60>
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	2d 83       	std	Y+5, r18	; 0x05
    3ee4:	ce 01       	movw	r24, r28
    3ee6:	06 96       	adiw	r24, 0x06	; 6
    3ee8:	0e 94 9c 05 	call	0xb38	; 0xb38 <time>
    3eec:	20 91 1c 46 	lds	r18, 0x461C	; 0x80461c <g_event_finish_time>
    3ef0:	30 91 1d 46 	lds	r19, 0x461D	; 0x80461d <g_event_finish_time+0x1>
    3ef4:	40 91 1e 46 	lds	r20, 0x461E	; 0x80461e <g_event_finish_time+0x2>
    3ef8:	50 91 1f 46 	lds	r21, 0x461F	; 0x80461f <g_event_finish_time+0x3>
    3efc:	8e 81       	ldd	r24, Y+6	; 0x06
    3efe:	9f 81       	ldd	r25, Y+7	; 0x07
    3f00:	a8 85       	ldd	r26, Y+8	; 0x08
    3f02:	b9 85       	ldd	r27, Y+9	; 0x09
    3f04:	bc 01       	movw	r22, r24
    3f06:	cd 01       	movw	r24, r26
    3f08:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <_Z7timeDifmm>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	89 83       	std	Y+1, r24	; 0x01
    3f12:	9a 83       	std	Y+2, r25	; 0x02
    3f14:	ab 83       	std	Y+3, r26	; 0x03
    3f16:	bc 83       	std	Y+4, r27	; 0x04
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1c:	ab 81       	ldd	r26, Y+3	; 0x03
    3f1e:	bc 81       	ldd	r27, Y+4	; 0x04
    3f20:	bb 23       	and	r27, r27
    3f22:	2c f0       	brlt	.+10     	; 0x3f2e <_Z12eventEnabledv+0xac>
    3f24:	8d 81       	ldd	r24, Y+5	; 0x05
    3f26:	88 23       	and	r24, r24
    3f28:	11 f0       	breq	.+4      	; 0x3f2e <_Z12eventEnabledv+0xac>
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	4a c0       	rjmp	.+148    	; 0x3fc2 <_Z12eventEnabledv+0x140>
    3f2e:	20 91 18 46 	lds	r18, 0x4618	; 0x804618 <g_event_start_time>
    3f32:	30 91 19 46 	lds	r19, 0x4619	; 0x804619 <g_event_start_time+0x1>
    3f36:	40 91 1a 46 	lds	r20, 0x461A	; 0x80461a <g_event_start_time+0x2>
    3f3a:	50 91 1b 46 	lds	r21, 0x461B	; 0x80461b <g_event_start_time+0x3>
    3f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    3f40:	9f 81       	ldd	r25, Y+7	; 0x07
    3f42:	a8 85       	ldd	r26, Y+8	; 0x08
    3f44:	b9 85       	ldd	r27, Y+9	; 0x09
    3f46:	bc 01       	movw	r22, r24
    3f48:	cd 01       	movw	r24, r26
    3f4a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <_Z7timeDifmm>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	89 83       	std	Y+1, r24	; 0x01
    3f54:	9a 83       	std	Y+2, r25	; 0x02
    3f56:	ab 83       	std	Y+3, r26	; 0x03
    3f58:	bc 83       	std	Y+4, r27	; 0x04
    3f5a:	89 81       	ldd	r24, Y+1	; 0x01
    3f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f5e:	ab 81       	ldd	r26, Y+3	; 0x03
    3f60:	bc 81       	ldd	r27, Y+4	; 0x04
    3f62:	84 3c       	cpi	r24, 0xC4	; 196
    3f64:	9f 4f       	sbci	r25, 0xFF	; 255
    3f66:	af 4f       	sbci	r26, 0xFF	; 255
    3f68:	bf 4f       	sbci	r27, 0xFF	; 255
    3f6a:	64 f0       	brlt	.+24     	; 0x3f84 <_Z12eventEnabledv+0x102>
    3f6c:	10 92 e9 45 	sts	0x45E9, r1	; 0x8045e9 <_ZL11g_sleepType>
    3f70:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep>
    3f74:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    3f78:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    3f7c:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	1f c0       	rjmp	.+62     	; 0x3fc2 <_Z12eventEnabledv+0x140>
    3f84:	24 ec       	ldi	r18, 0xC4	; 196
    3f86:	3f ef       	ldi	r19, 0xFF	; 255
    3f88:	4f ef       	ldi	r20, 0xFF	; 255
    3f8a:	5f ef       	ldi	r21, 0xFF	; 255
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f90:	ab 81       	ldd	r26, Y+3	; 0x03
    3f92:	bc 81       	ldd	r27, Y+4	; 0x04
    3f94:	79 01       	movw	r14, r18
    3f96:	8a 01       	movw	r16, r20
    3f98:	e8 1a       	sub	r14, r24
    3f9a:	f9 0a       	sbc	r15, r25
    3f9c:	0a 0b       	sbc	r16, r26
    3f9e:	1b 0b       	sbc	r17, r27
    3fa0:	d8 01       	movw	r26, r16
    3fa2:	c7 01       	movw	r24, r14
    3fa4:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    3fa8:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    3fac:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    3fb0:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	80 93 e9 45 	sts	0x45E9, r24	; 0x8045e9 <_ZL11g_sleepType>
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	80 93 24 46 	sts	0x4624, r24	; 0x804624 <_ZL13g_go_to_sleep>
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	29 96       	adiw	r28, 0x09	; 9
    3fc4:	cd bf       	out	0x3d, r28	; 61
    3fc6:	de bf       	out	0x3e, r29	; 62
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	ff 90       	pop	r15
    3fd2:	ef 90       	pop	r14
    3fd4:	08 95       	ret

00003fd6 <_Z13throttleValueh>:
    3fd6:	85 31       	cpi	r24, 0x15	; 21
    3fd8:	4c f4       	brge	.+18     	; 0x3fec <_Z13throttleValueh+0x16>
    3fda:	28 2f       	mov	r18, r24
    3fdc:	88 0f       	add	r24, r24
    3fde:	33 0b       	sbc	r19, r19
    3fe0:	25 30       	cpi	r18, 0x05	; 5
    3fe2:	31 05       	cpc	r19, r1
    3fe4:	2c f4       	brge	.+10     	; 0x3ff0 <_Z13throttleValueh+0x1a>
    3fe6:	25 e0       	ldi	r18, 0x05	; 5
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	02 c0       	rjmp	.+4      	; 0x3ff0 <_Z13throttleValueh+0x1a>
    3fec:	24 e1       	ldi	r18, 0x14	; 20
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	40 e0       	ldi	r20, 0x00	; 0
    3ff4:	50 e0       	ldi	r21, 0x00	; 0
    3ff6:	62 ec       	ldi	r22, 0xC2	; 194
    3ff8:	71 e0       	ldi	r23, 0x01	; 1
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    4002:	ca 01       	movw	r24, r20
    4004:	b9 01       	movw	r22, r18
    4006:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <__floatsisf>
    400a:	0e 94 b1 49 	call	0x9362	; 0x9362 <__fixunssfsi>
    400e:	cb 01       	movw	r24, r22
    4010:	08 95       	ret

00004012 <_Z11launchEventP2SC>:
    4012:	cf 93       	push	r28
    4014:	df 93       	push	r29
    4016:	00 d0       	rcall	.+0      	; 0x4018 <_Z11launchEventP2SC+0x6>
    4018:	1f 92       	push	r1
    401a:	cd b7       	in	r28, 0x3d	; 61
    401c:	de b7       	in	r29, 0x3e	; 62
    401e:	8a 83       	std	Y+2, r24	; 0x02
    4020:	9b 83       	std	Y+3, r25	; 0x03
    4022:	8a 81       	ldd	r24, Y+2	; 0x02
    4024:	9b 81       	ldd	r25, Y+3	; 0x03
    4026:	0e 94 34 20 	call	0x4068	; 0x4068 <_Z33activateEventUsingCurrentSettingsP2SC>
    402a:	89 83       	std	Y+1, r24	; 0x01
    402c:	8a 81       	ldd	r24, Y+2	; 0x02
    402e:	9b 81       	ldd	r25, Y+3	; 0x03
    4030:	fc 01       	movw	r30, r24
    4032:	80 81       	ld	r24, Z
    4034:	88 23       	and	r24, r24
    4036:	31 f0       	breq	.+12     	; 0x4044 <_Z11launchEventP2SC+0x32>
    4038:	8a 81       	ldd	r24, Y+2	; 0x02
    403a:	9b 81       	ldd	r25, Y+3	; 0x03
    403c:	fc 01       	movw	r30, r24
    403e:	80 81       	ld	r24, Z
    4040:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
    4044:	89 81       	ldd	r24, Y+1	; 0x01
    4046:	88 23       	and	r24, r24
    4048:	21 f0       	breq	.+8      	; 0x4052 <_Z11launchEventP2SC+0x40>
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	80 93 db 45 	sts	0x45DB, r24	; 0x8045db <_ZL17g_last_error_code>
    4050:	04 c0       	rjmp	.+8      	; 0x405a <_Z11launchEventP2SC+0x48>
    4052:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12eventEnabledv>
    4056:	80 93 20 46 	sts	0x4620, r24	; 0x804620 <g_event_enabled>
    405a:	89 81       	ldd	r24, Y+1	; 0x01
    405c:	23 96       	adiw	r28, 0x03	; 3
    405e:	cd bf       	out	0x3d, r28	; 61
    4060:	de bf       	out	0x3e, r29	; 62
    4062:	df 91       	pop	r29
    4064:	cf 91       	pop	r28
    4066:	08 95       	ret

00004068 <_Z33activateEventUsingCurrentSettingsP2SC>:
    4068:	cf 92       	push	r12
    406a:	df 92       	push	r13
    406c:	ef 92       	push	r14
    406e:	ff 92       	push	r15
    4070:	0f 93       	push	r16
    4072:	1f 93       	push	r17
    4074:	cf 93       	push	r28
    4076:	df 93       	push	r29
    4078:	1f 92       	push	r1
    407a:	cd b7       	in	r28, 0x3d	; 61
    407c:	de b7       	in	r29, 0x3e	; 62
    407e:	40 91 18 46 	lds	r20, 0x4618	; 0x804618 <g_event_start_time>
    4082:	50 91 19 46 	lds	r21, 0x4619	; 0x804619 <g_event_start_time+0x1>
    4086:	60 91 1a 46 	lds	r22, 0x461A	; 0x80461a <g_event_start_time+0x2>
    408a:	70 91 1b 46 	lds	r23, 0x461B	; 0x80461b <g_event_start_time+0x3>
    408e:	45 2b       	or	r20, r21
    4090:	46 2b       	or	r20, r22
    4092:	47 2b       	or	r20, r23
    4094:	09 f4       	brne	.+2      	; 0x4098 <_Z33activateEventUsingCurrentSettingsP2SC+0x30>
    4096:	91 c1       	rjmp	.+802    	; 0x43ba <_Z33activateEventUsingCurrentSettingsP2SC+0x352>
    4098:	00 91 18 46 	lds	r16, 0x4618	; 0x804618 <g_event_start_time>
    409c:	10 91 19 46 	lds	r17, 0x4619	; 0x804619 <g_event_start_time+0x1>
    40a0:	20 91 1a 46 	lds	r18, 0x461A	; 0x80461a <g_event_start_time+0x2>
    40a4:	30 91 1b 46 	lds	r19, 0x461B	; 0x80461b <g_event_start_time+0x3>
    40a8:	40 91 1c 46 	lds	r20, 0x461C	; 0x80461c <g_event_finish_time>
    40ac:	50 91 1d 46 	lds	r21, 0x461D	; 0x80461d <g_event_finish_time+0x1>
    40b0:	60 91 1e 46 	lds	r22, 0x461E	; 0x80461e <g_event_finish_time+0x2>
    40b4:	70 91 1f 46 	lds	r23, 0x461F	; 0x80461f <g_event_finish_time+0x3>
    40b8:	04 17       	cp	r16, r20
    40ba:	15 07       	cpc	r17, r21
    40bc:	26 07       	cpc	r18, r22
    40be:	37 07       	cpc	r19, r23
    40c0:	08 f0       	brcs	.+2      	; 0x40c4 <_Z33activateEventUsingCurrentSettingsP2SC+0x5c>
    40c2:	7d c1       	rjmp	.+762    	; 0x43be <_Z33activateEventUsingCurrentSettingsP2SC+0x356>
    40c4:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    40c8:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    40cc:	23 2b       	or	r18, r19
    40ce:	09 f4       	brne	.+2      	; 0x40d2 <_Z33activateEventUsingCurrentSettingsP2SC+0x6a>
    40d0:	78 c1       	rjmp	.+752    	; 0x43c2 <_Z33activateEventUsingCurrentSettingsP2SC+0x35a>
    40d2:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    40d6:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    40da:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    40de:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    40e2:	24 0f       	add	r18, r20
    40e4:	35 1f       	adc	r19, r21
    40e6:	40 91 16 46 	lds	r20, 0x4616	; 0x804616 <g_intra_cycle_delay_time>
    40ea:	50 91 17 46 	lds	r21, 0x4617	; 0x804617 <g_intra_cycle_delay_time+0x1>
    40ee:	24 17       	cp	r18, r20
    40f0:	35 07       	cpc	r19, r21
    40f2:	0c f4       	brge	.+2      	; 0x40f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x8e>
    40f4:	68 c1       	rjmp	.+720    	; 0x43c6 <_Z33activateEventUsingCurrentSettingsP2SC+0x35e>
    40f6:	20 91 ea 45 	lds	r18, 0x45EA	; 0x8045ea <g_messages_text>
    40fa:	22 23       	and	r18, r18
    40fc:	09 f4       	brne	.+2      	; 0x4100 <_Z33activateEventUsingCurrentSettingsP2SC+0x98>
    40fe:	65 c1       	rjmp	.+714    	; 0x43ca <_Z33activateEventUsingCurrentSettingsP2SC+0x362>
    4100:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    4104:	22 23       	and	r18, r18
    4106:	09 f4       	brne	.+2      	; 0x410a <_Z33activateEventUsingCurrentSettingsP2SC+0xa2>
    4108:	62 c1       	rjmp	.+708    	; 0x43ce <_Z33activateEventUsingCurrentSettingsP2SC+0x366>
    410a:	8c 01       	movw	r16, r24
    410c:	80 91 ff 45 	lds	r24, 0x45FF	; 0x8045ff <g_messages_text+0x15>
    4110:	88 23       	and	r24, r24
    4112:	19 f1       	breq	.+70     	; 0x415a <_Z33activateEventUsingCurrentSettingsP2SC+0xf2>
    4114:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    4118:	88 23       	and	r24, r24
    411a:	41 f0       	breq	.+16     	; 0x412c <_Z33activateEventUsingCurrentSettingsP2SC+0xc4>
    411c:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    4120:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    4124:	89 2b       	or	r24, r25
    4126:	21 f4       	brne	.+8      	; 0x4130 <_Z33activateEventUsingCurrentSettingsP2SC+0xc8>
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	03 c0       	rjmp	.+6      	; 0x4132 <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	01 c0       	rjmp	.+2      	; 0x4132 <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	81 11       	cpse	r24, r1
    4134:	4e c1       	rjmp	.+668    	; 0x43d2 <_Z33activateEventUsingCurrentSettingsP2SC+0x36a>
    4136:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    413a:	70 e0       	ldi	r23, 0x00	; 0
    413c:	8f ef       	ldi	r24, 0xFF	; 255
    413e:	95 e4       	ldi	r25, 0x45	; 69
    4140:	0e 94 2a 3a 	call	0x7454	; 0x7454 <_Z26timeRequiredToSendStrAtWPMPcj>
    4144:	8c 50       	subi	r24, 0x0C	; 12
    4146:	9e 4f       	sbci	r25, 0xFE	; 254
    4148:	68 ee       	ldi	r22, 0xE8	; 232
    414a:	73 e0       	ldi	r23, 0x03	; 3
    414c:	0e 94 55 4b 	call	0x96aa	; 0x96aa <__udivmodhi4>
    4150:	60 93 14 46 	sts	0x4614, r22	; 0x804614 <g_time_needed_for_ID>
    4154:	70 93 15 46 	sts	0x4615, r23	; 0x804615 <g_time_needed_for_ID+0x1>
    4158:	04 c0       	rjmp	.+8      	; 0x4162 <_Z33activateEventUsingCurrentSettingsP2SC+0xfa>
    415a:	10 92 14 46 	sts	0x4614, r1	; 0x804614 <g_time_needed_for_ID>
    415e:	10 92 15 46 	sts	0x4615, r1	; 0x804615 <g_time_needed_for_ID+0x1>
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	0e 94 9c 05 	call	0xb38	; 0xb38 <time>
    416a:	c0 90 1c 46 	lds	r12, 0x461C	; 0x80461c <g_event_finish_time>
    416e:	d0 90 1d 46 	lds	r13, 0x461D	; 0x80461d <g_event_finish_time+0x1>
    4172:	e0 90 1e 46 	lds	r14, 0x461E	; 0x80461e <g_event_finish_time+0x2>
    4176:	f0 90 1f 46 	lds	r15, 0x461F	; 0x80461f <g_event_finish_time+0x3>
    417a:	c6 16       	cp	r12, r22
    417c:	d7 06       	cpc	r13, r23
    417e:	e8 06       	cpc	r14, r24
    4180:	f9 06       	cpc	r15, r25
    4182:	48 f4       	brcc	.+18     	; 0x4196 <_Z33activateEventUsingCurrentSettingsP2SC+0x12e>
    4184:	01 15       	cp	r16, r1
    4186:	11 05       	cpc	r17, r1
    4188:	09 f4       	brne	.+2      	; 0x418c <_Z33activateEventUsingCurrentSettingsP2SC+0x124>
    418a:	25 c1       	rjmp	.+586    	; 0x43d6 <_Z33activateEventUsingCurrentSettingsP2SC+0x36e>
    418c:	8a ef       	ldi	r24, 0xFA	; 250
    418e:	f8 01       	movw	r30, r16
    4190:	80 83       	st	Z, r24
    4192:	80 e0       	ldi	r24, 0x00	; 0
    4194:	21 c1       	rjmp	.+578    	; 0x43d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4196:	20 91 18 46 	lds	r18, 0x4618	; 0x804618 <g_event_start_time>
    419a:	30 91 19 46 	lds	r19, 0x4619	; 0x804619 <g_event_start_time+0x1>
    419e:	40 91 1a 46 	lds	r20, 0x461A	; 0x80461a <g_event_start_time+0x2>
    41a2:	50 91 1b 46 	lds	r21, 0x461B	; 0x80461b <g_event_start_time+0x3>
    41a6:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <_Z7timeDifmm>
    41aa:	99 23       	and	r25, r25
    41ac:	0c f4       	brge	.+2      	; 0x41b0 <_Z33activateEventUsingCurrentSettingsP2SC+0x148>
    41ae:	f2 c0       	rjmp	.+484    	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x32c>
    41b0:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    41b4:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    41b8:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    41bc:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    41c0:	e2 0e       	add	r14, r18
    41c2:	f3 1e       	adc	r15, r19
    41c4:	97 01       	movw	r18, r14
    41c6:	0f 2c       	mov	r0, r15
    41c8:	00 0c       	add	r0, r0
    41ca:	44 0b       	sbc	r20, r20
    41cc:	55 0b       	sbc	r21, r21
    41ce:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    41d2:	20 91 16 46 	lds	r18, 0x4616	; 0x804616 <g_intra_cycle_delay_time>
    41d6:	30 91 17 46 	lds	r19, 0x4617	; 0x804617 <g_intra_cycle_delay_time+0x1>
    41da:	c9 01       	movw	r24, r18
    41dc:	86 1b       	sub	r24, r22
    41de:	97 0b       	sbc	r25, r23
    41e0:	18 16       	cp	r1, r24
    41e2:	19 06       	cpc	r1, r25
    41e4:	0c f4       	brge	.+2      	; 0x41e8 <_Z33activateEventUsingCurrentSettingsP2SC+0x180>
    41e6:	84 c0       	rjmp	.+264    	; 0x42f0 <_Z33activateEventUsingCurrentSettingsP2SC+0x288>
    41e8:	22 27       	eor	r18, r18
    41ea:	33 27       	eor	r19, r19
    41ec:	28 1b       	sub	r18, r24
    41ee:	39 0b       	sbc	r19, r25
    41f0:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    41f4:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    41f8:	24 17       	cp	r18, r20
    41fa:	35 07       	cpc	r19, r21
    41fc:	ac f1       	brlt	.+106    	; 0x4268 <_Z33activateEventUsingCurrentSettingsP2SC+0x200>
    41fe:	8e 0d       	add	r24, r14
    4200:	9f 1d       	adc	r25, r15
    4202:	91 95       	neg	r25
    4204:	81 95       	neg	r24
    4206:	91 09       	sbc	r25, r1
    4208:	09 2e       	mov	r0, r25
    420a:	00 0c       	add	r0, r0
    420c:	aa 0b       	sbc	r26, r26
    420e:	bb 0b       	sbc	r27, r27
    4210:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    4214:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    4218:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    421c:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    4220:	01 15       	cp	r16, r1
    4222:	11 05       	cpc	r17, r1
    4224:	19 f0       	breq	.+6      	; 0x422c <_Z33activateEventUsingCurrentSettingsP2SC+0x1c4>
    4226:	8e ef       	ldi	r24, 0xFE	; 254
    4228:	f8 01       	movw	r30, r16
    422a:	80 83       	st	Z, r24
    422c:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_event_enabled>
    4230:	81 11       	cpse	r24, r1
    4232:	8a c0       	rjmp	.+276    	; 0x4348 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e0>
    4234:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    4238:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    423c:	40 91 e0 45 	lds	r20, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    4240:	50 91 e1 45 	lds	r21, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    4244:	60 91 e2 45 	lds	r22, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    4248:	70 91 e3 45 	lds	r23, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    424c:	20 91 14 46 	lds	r18, 0x4614	; 0x804614 <g_time_needed_for_ID>
    4250:	30 91 15 46 	lds	r19, 0x4615	; 0x804615 <g_time_needed_for_ID+0x1>
    4254:	84 1b       	sub	r24, r20
    4256:	95 0b       	sbc	r25, r21
    4258:	82 1b       	sub	r24, r18
    425a:	93 0b       	sbc	r25, r19
    425c:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    4260:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	77 c0       	rjmp	.+238    	; 0x4356 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4268:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    426c:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4270:	82 0f       	add	r24, r18
    4272:	93 1f       	adc	r25, r19
    4274:	09 2e       	mov	r0, r25
    4276:	00 0c       	add	r0, r0
    4278:	aa 0b       	sbc	r26, r26
    427a:	bb 0b       	sbc	r27, r27
    427c:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    4280:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    4284:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    4288:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    428c:	01 15       	cp	r16, r1
    428e:	11 05       	cpc	r17, r1
    4290:	19 f0       	breq	.+6      	; 0x4298 <_Z33activateEventUsingCurrentSettingsP2SC+0x230>
    4292:	8d ef       	ldi	r24, 0xFD	; 253
    4294:	f8 01       	movw	r30, r16
    4296:	80 83       	st	Z, r24
    4298:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_event_enabled>
    429c:	81 11       	cpse	r24, r1
    429e:	56 c0       	rjmp	.+172    	; 0x434c <_Z33activateEventUsingCurrentSettingsP2SC+0x2e4>
    42a0:	80 91 14 46 	lds	r24, 0x4614	; 0x804614 <g_time_needed_for_ID>
    42a4:	90 91 15 46 	lds	r25, 0x4615	; 0x804615 <g_time_needed_for_ID+0x1>
    42a8:	a0 e0       	ldi	r26, 0x00	; 0
    42aa:	b0 e0       	ldi	r27, 0x00	; 0
    42ac:	40 91 e0 45 	lds	r20, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    42b0:	50 91 e1 45 	lds	r21, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    42b4:	60 91 e2 45 	lds	r22, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    42b8:	70 91 e3 45 	lds	r23, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    42bc:	84 17       	cp	r24, r20
    42be:	95 07       	cpc	r25, r21
    42c0:	a6 07       	cpc	r26, r22
    42c2:	b7 07       	cpc	r27, r23
    42c4:	0c f0       	brlt	.+2      	; 0x42c8 <_Z33activateEventUsingCurrentSettingsP2SC+0x260>
    42c6:	44 c0       	rjmp	.+136    	; 0x4350 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e8>
    42c8:	80 91 e0 45 	lds	r24, 0x45E0	; 0x8045e0 <_ZL12g_on_the_air>
    42cc:	90 91 e1 45 	lds	r25, 0x45E1	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    42d0:	a0 91 e2 45 	lds	r26, 0x45E2	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    42d4:	b0 91 e3 45 	lds	r27, 0x45E3	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    42d8:	20 91 14 46 	lds	r18, 0x4614	; 0x804614 <g_time_needed_for_ID>
    42dc:	30 91 15 46 	lds	r19, 0x4615	; 0x804615 <g_time_needed_for_ID+0x1>
    42e0:	82 1b       	sub	r24, r18
    42e2:	93 0b       	sbc	r25, r19
    42e4:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    42e8:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	33 c0       	rjmp	.+102    	; 0x4356 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    42f0:	44 27       	eor	r20, r20
    42f2:	55 27       	eor	r21, r21
    42f4:	48 1b       	sub	r20, r24
    42f6:	59 0b       	sbc	r21, r25
    42f8:	05 2e       	mov	r0, r21
    42fa:	00 0c       	add	r0, r0
    42fc:	66 0b       	sbc	r22, r22
    42fe:	77 0b       	sbc	r23, r23
    4300:	40 93 e0 45 	sts	0x45E0, r20	; 0x8045e0 <_ZL12g_on_the_air>
    4304:	50 93 e1 45 	sts	0x45E1, r21	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    4308:	60 93 e2 45 	sts	0x45E2, r22	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    430c:	70 93 e3 45 	sts	0x45E3, r23	; 0x8045e3 <_ZL12g_on_the_air+0x3>
    4310:	01 15       	cp	r16, r1
    4312:	11 05       	cpc	r17, r1
    4314:	19 f0       	breq	.+6      	; 0x431c <_Z33activateEventUsingCurrentSettingsP2SC+0x2b4>
    4316:	2e ef       	ldi	r18, 0xFE	; 254
    4318:	f8 01       	movw	r30, r16
    431a:	20 83       	st	Z, r18
    431c:	20 91 20 46 	lds	r18, 0x4620	; 0x804620 <g_event_enabled>
    4320:	21 11       	cpse	r18, r1
    4322:	18 c0       	rjmp	.+48     	; 0x4354 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ec>
    4324:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4328:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    432c:	82 0f       	add	r24, r18
    432e:	93 1f       	adc	r25, r19
    4330:	20 91 14 46 	lds	r18, 0x4614	; 0x804614 <g_time_needed_for_ID>
    4334:	30 91 15 46 	lds	r19, 0x4615	; 0x804615 <g_time_needed_for_ID+0x1>
    4338:	82 1b       	sub	r24, r18
    433a:	93 0b       	sbc	r25, r19
    433c:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    4340:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	07 c0       	rjmp	.+14     	; 0x4356 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	05 c0       	rjmp	.+10     	; 0x4356 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	03 c0       	rjmp	.+6      	; 0x4356 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	01 c0       	rjmp	.+2      	; 0x4356 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4354:	80 e0       	ldi	r24, 0x00	; 0
    4356:	88 23       	and	r24, r24
    4358:	b1 f0       	breq	.+44     	; 0x4386 <_Z33activateEventUsingCurrentSettingsP2SC+0x31e>
    435a:	f8 94       	cli
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	89 83       	std	Y+1, r24	; 0x01
    4360:	40 e0       	ldi	r20, 0x00	; 0
    4362:	50 e0       	ldi	r21, 0x00	; 0
    4364:	be 01       	movw	r22, r28
    4366:	6f 5f       	subi	r22, 0xFF	; 255
    4368:	7f 4f       	sbci	r23, 0xFF	; 255
    436a:	8a ee       	ldi	r24, 0xEA	; 234
    436c:	95 e4       	ldi	r25, 0x45	; 69
    436e:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
    4372:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4376:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    437a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    437e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    4382:	78 94       	sei
    4384:	03 c0       	rjmp	.+6      	; 0x438c <_Z33activateEventUsingCurrentSettingsP2SC+0x324>
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	0e 94 a6 44 	call	0x894c	; 0x894c <_Z14keyTransmitterb>
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	80 93 21 46 	sts	0x4621, r24	; 0x804621 <g_event_commenced>
    4392:	09 c0       	rjmp	.+18     	; 0x43a6 <_Z33activateEventUsingCurrentSettingsP2SC+0x33e>
    4394:	01 15       	cp	r16, r1
    4396:	11 05       	cpc	r17, r1
    4398:	19 f0       	breq	.+6      	; 0x43a0 <_Z33activateEventUsingCurrentSettingsP2SC+0x338>
    439a:	8f ef       	ldi	r24, 0xFF	; 255
    439c:	f8 01       	movw	r30, r16
    439e:	80 83       	st	Z, r24
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	0e 94 a6 44 	call	0x894c	; 0x894c <_Z14keyTransmitterb>
    43a6:	10 92 23 46 	sts	0x4623, r1	; 0x804623 <g_waiting_for_next_event>
    43aa:	8a e5       	ldi	r24, 0x5A	; 90
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    43b2:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	0f c0       	rjmp	.+30     	; 0x43d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    43ba:	8c ec       	ldi	r24, 0xCC	; 204
    43bc:	0d c0       	rjmp	.+26     	; 0x43d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    43be:	8d ec       	ldi	r24, 0xCD	; 205
    43c0:	0b c0       	rjmp	.+22     	; 0x43d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    43c2:	8b ec       	ldi	r24, 0xCB	; 203
    43c4:	09 c0       	rjmp	.+18     	; 0x43d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    43c6:	8a ec       	ldi	r24, 0xCA	; 202
    43c8:	07 c0       	rjmp	.+14     	; 0x43d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    43ca:	89 ec       	ldi	r24, 0xC9	; 201
    43cc:	05 c0       	rjmp	.+10     	; 0x43d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    43ce:	88 ec       	ldi	r24, 0xC8	; 200
    43d0:	03 c0       	rjmp	.+6      	; 0x43d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    43d2:	87 ec       	ldi	r24, 0xC7	; 199
    43d4:	01 c0       	rjmp	.+2      	; 0x43d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	0f 90       	pop	r0
    43da:	df 91       	pop	r29
    43dc:	cf 91       	pop	r28
    43de:	1f 91       	pop	r17
    43e0:	0f 91       	pop	r16
    43e2:	ff 90       	pop	r15
    43e4:	ef 90       	pop	r14
    43e6:	df 90       	pop	r13
    43e8:	cf 90       	pop	r12
    43ea:	08 95       	ret

000043ec <_Z8rtc_initv>:
    43ec:	cf 93       	push	r28
    43ee:	df 93       	push	r29
    43f0:	88 b1       	in	r24, 0x08	; 8
    43f2:	88 60       	ori	r24, 0x08	; 8
    43f4:	88 b9       	out	0x08, r24	; 8
    43f6:	c0 e0       	ldi	r28, 0x00	; 0
    43f8:	d0 e0       	ldi	r29, 0x00	; 0
    43fa:	c2 33       	cpi	r28, 0x32	; 50
    43fc:	d1 05       	cpc	r29, r1
    43fe:	c4 f4       	brge	.+48     	; 0x4430 <_Z8rtc_initv+0x44>
    4400:	89 b1       	in	r24, 0x09	; 9
    4402:	87 7f       	andi	r24, 0xF7	; 247
    4404:	89 b9       	out	0x09, r24	; 9
    4406:	64 e1       	ldi	r22, 0x14	; 20
    4408:	70 e0       	ldi	r23, 0x00	; 0
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	0e 94 a9 43 	call	0x8752	; 0x8752 <util_delay_ms>
    4412:	81 11       	cpse	r24, r1
    4414:	f8 cf       	rjmp	.-16     	; 0x4406 <_Z8rtc_initv+0x1a>
    4416:	89 b1       	in	r24, 0x09	; 9
    4418:	88 60       	ori	r24, 0x08	; 8
    441a:	89 b9       	out	0x09, r24	; 9
    441c:	64 e1       	ldi	r22, 0x14	; 20
    441e:	70 e0       	ldi	r23, 0x00	; 0
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0e 94 a9 43 	call	0x8752	; 0x8752 <util_delay_ms>
    4428:	81 11       	cpse	r24, r1
    442a:	f8 cf       	rjmp	.-16     	; 0x441c <_Z8rtc_initv+0x30>
    442c:	21 96       	adiw	r28, 0x01	; 1
    442e:	e5 cf       	rjmp	.-54     	; 0x43fa <_Z8rtc_initv+0xe>
    4430:	e3 e5       	ldi	r30, 0x53	; 83
    4432:	f4 e0       	ldi	r31, 0x04	; 4
    4434:	80 81       	ld	r24, Z
    4436:	88 60       	ori	r24, 0x08	; 8
    4438:	80 83       	st	Z, r24
    443a:	e2 e5       	ldi	r30, 0x52	; 82
    443c:	f4 e0       	ldi	r31, 0x04	; 4
    443e:	80 81       	ld	r24, Z
    4440:	88 60       	ori	r24, 0x08	; 8
    4442:	80 83       	st	Z, r24
    4444:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <ds3231_init>
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <ds3231_1s_sqw>
    444e:	88 23       	and	r24, r24
    4450:	11 f0       	breq	.+4      	; 0x4456 <_Z8rtc_initv+0x6a>
    4452:	8c ef       	ldi	r24, 0xFC	; 252
    4454:	01 c0       	rjmp	.+2      	; 0x4458 <_Z8rtc_initv+0x6c>
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	df 91       	pop	r29
    445a:	cf 91       	pop	r28
    445c:	08 95       	ret

0000445e <_Z18antennaIsConnectedv>:
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	08 95       	ret

00004462 <_Z13startEventNow19EventActionSource_t>:
	
}


void startEventNow(EventActionSource_t activationSource)
{
    4462:	cf 93       	push	r28
    4464:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    4466:	0e 94 23 27 	call	0x4e46	; 0x4e46 <_Z23clockConfigurationCheckv>

	cli();
    446a:	f8 94       	cli
	if(activationSource == POWER_UP)
    446c:	c1 11       	cpse	r28, r1
    446e:	0e c0       	rjmp	.+28     	; 0x448c <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    4470:	82 30       	cpi	r24, 0x02	; 2
    4472:	31 f4       	brne	.+12     	; 0x4480 <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    4474:	60 e0       	ldi	r22, 0x00	; 0
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    447e:	3f c0       	rjmp	.+126    	; 0x44fe <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4480:	63 e0       	ldi	r22, 0x03	; 3
    4482:	80 e0       	ldi	r24, 0x00	; 0
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    448a:	39 c0       	rjmp	.+114    	; 0x44fe <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    448c:	c2 30       	cpi	r28, 0x02	; 2
    448e:	d1 f4       	brne	.+52     	; 0x44c4 <_Z13startEventNow19EventActionSource_t+0x62>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    4490:	82 30       	cpi	r24, 0x02	; 2
    4492:	31 f4       	brne	.+12     	; 0x44a0 <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    4494:	61 e0       	ldi	r22, 0x01	; 1
    4496:	80 e0       	ldi	r24, 0x00	; 0
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    449e:	2f c0       	rjmp	.+94     	; 0x44fe <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    44a0:	81 30       	cpi	r24, 0x01	; 1
    44a2:	21 f0       	breq	.+8      	; 0x44ac <_Z13startEventNow19EventActionSource_t+0x4a>
    44a4:	84 30       	cpi	r24, 0x04	; 4
    44a6:	11 f0       	breq	.+4      	; 0x44ac <_Z13startEventNow19EventActionSource_t+0x4a>
    44a8:	83 30       	cpi	r24, 0x03	; 3
    44aa:	31 f4       	brne	.+12     	; 0x44b8 <_Z13startEventNow19EventActionSource_t+0x56>
		{
			setupForFox(NULL, START_EVENT_NOW);
    44ac:	61 e0       	ldi	r22, 0x01	; 1
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    44b6:	23 c0       	rjmp	.+70     	; 0x44fe <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    44b8:	63 e0       	ldi	r22, 0x03	; 3
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    44c2:	1d c0       	rjmp	.+58     	; 0x44fe <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    44c4:	82 30       	cpi	r24, 0x02	; 2
    44c6:	31 f4       	brne	.+12     	; 0x44d4 <_Z13startEventNow19EventActionSource_t+0x72>
		{
			setupForFox(NULL, START_EVENT_NOW);
    44c8:	61 e0       	ldi	r22, 0x01	; 1
    44ca:	80 e0       	ldi	r24, 0x00	; 0
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    44d2:	15 c0       	rjmp	.+42     	; 0x44fe <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    44d4:	81 30       	cpi	r24, 0x01	; 1
    44d6:	31 f4       	brne	.+12     	; 0x44e4 <_Z13startEventNow19EventActionSource_t+0x82>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    44d8:	62 e0       	ldi	r22, 0x02	; 2
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    44e2:	0d c0       	rjmp	.+26     	; 0x44fe <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    44e4:	84 30       	cpi	r24, 0x04	; 4
    44e6:	31 f4       	brne	.+12     	; 0x44f4 <_Z13startEventNow19EventActionSource_t+0x92>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    44e8:	63 e0       	ldi	r22, 0x03	; 3
    44ea:	80 e0       	ldi	r24, 0x00	; 0
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    44f2:	05 c0       	rjmp	.+10     	; 0x44fe <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    44f4:	63 e0       	ldi	r22, 0x03	; 3
    44f6:	80 e0       	ldi	r24, 0x00	; 0
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

// 	g_LED_enunciating = false;
	sei();
    44fe:	78 94       	sei
}
    4500:	cf 91       	pop	r28
    4502:	08 95       	ret

00004504 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    4504:	cf 93       	push	r28
    4506:	df 93       	push	r29
    4508:	d8 2f       	mov	r29, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    450a:	0e 94 23 27 	call	0x4e46	; 0x4e46 <_Z23clockConfigurationCheckv>
    450e:	c8 2f       	mov	r28, r24

	cli();
    4510:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    4512:	d2 30       	cpi	r29, 0x02	; 2
    4514:	31 f4       	brne	.+12     	; 0x4522 <_Z12stopEventNow19EventActionSource_t+0x1e>
	{
		setupForFox(NULL, START_NOTHING);
    4516:	60 e0       	ldi	r22, 0x00	; 0
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4520:	14 c0       	rjmp	.+40     	; 0x454a <_Z12stopEventNow19EventActionSource_t+0x46>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    4522:	81 30       	cpi	r24, 0x01	; 1
    4524:	29 f4       	brne	.+10     	; 0x4530 <_Z12stopEventNow19EventActionSource_t+0x2c>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    4526:	62 e0       	ldi	r22, 0x02	; 2
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    4530:	c4 30       	cpi	r28, 0x04	; 4
    4532:	31 f4       	brne	.+12     	; 0x4540 <_Z12stopEventNow19EventActionSource_t+0x3c>
		{
			setupForFox(NULL, START_NOTHING);
    4534:	60 e0       	ldi	r22, 0x00	; 0
    4536:	80 e0       	ldi	r24, 0x00	; 0
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
    453e:	05 c0       	rjmp	.+10     	; 0x454a <_Z12stopEventNow19EventActionSource_t+0x46>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    4540:	60 e0       	ldi	r22, 0x00	; 0
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>

// 	if(g_sync_pin_stable == STABLE_LOW)
// 	{
// 		digitalWrite(PIN_LED, OFF); /*  LED Off */
// 	}
}
    454a:	df 91       	pop	r29
    454c:	cf 91       	pop	r28
    454e:	08 95       	ret

00004550 <_Z18startEventUsingRTCv>:

void startEventUsingRTC(void)
{
    4550:	8f 92       	push	r8
    4552:	9f 92       	push	r9
    4554:	af 92       	push	r10
    4556:	bf 92       	push	r11
    4558:	ef 92       	push	r14
    455a:	ff 92       	push	r15
    455c:	0f 93       	push	r16
    455e:	1f 93       	push	r17
	g_current_epoch = ds3231_get_epoch(null);
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    4568:	60 93 46 46 	sts	0x4646, r22	; 0x804646 <g_current_epoch>
    456c:	70 93 47 46 	sts	0x4647, r23	; 0x804647 <g_current_epoch+0x1>
    4570:	80 93 48 46 	sts	0x4648, r24	; 0x804648 <g_current_epoch+0x2>
    4574:	90 93 49 46 	sts	0x4649, r25	; 0x804649 <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    4578:	0e 94 23 27 	call	0x4e46	; 0x4e46 <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    457c:	82 30       	cpi	r24, 0x02	; 2
    457e:	09 f4       	brne	.+2      	; 0x4582 <_Z18startEventUsingRTCv+0x32>
    4580:	54 c0       	rjmp	.+168    	; 0x462a <_Z18startEventUsingRTCv+0xda>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4582:	63 e0       	ldi	r22, 0x03	; 3
    4584:	80 e0       	ldi	r24, 0x00	; 0
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    458c:	20 91 35 46 	lds	r18, 0x4635	; 0x804635 <g_event_start_epoch>
    4590:	30 91 36 46 	lds	r19, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    4594:	40 91 37 46 	lds	r20, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    4598:	50 91 38 46 	lds	r21, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    459c:	60 91 46 46 	lds	r22, 0x4646	; 0x804646 <g_current_epoch>
    45a0:	70 91 47 46 	lds	r23, 0x4647	; 0x804647 <g_current_epoch+0x1>
    45a4:	80 91 48 46 	lds	r24, 0x4648	; 0x804648 <g_current_epoch+0x2>
    45a8:	90 91 49 46 	lds	r25, 0x4649	; 0x804649 <g_current_epoch+0x3>
    45ac:	0f 2e       	mov	r0, r31
    45ae:	fb e9       	ldi	r31, 0x9B	; 155
    45b0:	ef 2e       	mov	r14, r31
    45b2:	f2 e4       	ldi	r31, 0x42	; 66
    45b4:	ff 2e       	mov	r15, r31
    45b6:	f0 2d       	mov	r31, r0
    45b8:	08 ea       	ldi	r16, 0xA8	; 168
    45ba:	12 e4       	ldi	r17, 0x42	; 66
    45bc:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    45c0:	60 91 35 46 	lds	r22, 0x4635	; 0x804635 <g_event_start_epoch>
    45c4:	70 91 36 46 	lds	r23, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    45c8:	80 91 37 46 	lds	r24, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    45cc:	90 91 38 46 	lds	r25, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    45d0:	80 90 46 46 	lds	r8, 0x4646	; 0x804646 <g_current_epoch>
    45d4:	90 90 47 46 	lds	r9, 0x4647	; 0x804647 <g_current_epoch+0x1>
    45d8:	a0 90 48 46 	lds	r10, 0x4648	; 0x804648 <g_current_epoch+0x2>
    45dc:	b0 90 49 46 	lds	r11, 0x4649	; 0x804649 <g_current_epoch+0x3>
    45e0:	68 15       	cp	r22, r8
    45e2:	79 05       	cpc	r23, r9
    45e4:	8a 05       	cpc	r24, r10
    45e6:	9b 05       	cpc	r25, r11
    45e8:	88 f4       	brcc	.+34     	; 0x460c <_Z18startEventUsingRTCv+0xbc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    45ea:	20 91 39 46 	lds	r18, 0x4639	; 0x804639 <g_event_finish_epoch>
    45ee:	30 91 3a 46 	lds	r19, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    45f2:	40 91 3b 46 	lds	r20, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    45f6:	50 91 3c 46 	lds	r21, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    45fa:	e1 2c       	mov	r14, r1
    45fc:	f1 2c       	mov	r15, r1
    45fe:	0c eb       	ldi	r16, 0xBC	; 188
    4600:	12 e4       	ldi	r17, 0x42	; 66
    4602:	c5 01       	movw	r24, r10
    4604:	b4 01       	movw	r22, r8
    4606:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <_Z14reportTimeTillmmPKcS0_>
    460a:	11 c0       	rjmp	.+34     	; 0x462e <_Z18startEventUsingRTCv+0xde>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    460c:	20 91 39 46 	lds	r18, 0x4639	; 0x804639 <g_event_finish_epoch>
    4610:	30 91 3a 46 	lds	r19, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    4614:	40 91 3b 46 	lds	r20, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    4618:	50 91 3c 46 	lds	r21, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    461c:	e1 2c       	mov	r14, r1
    461e:	f1 2c       	mov	r15, r1
    4620:	04 eb       	ldi	r16, 0xB4	; 180
    4622:	12 e4       	ldi	r17, 0x42	; 66
    4624:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <_Z14reportTimeTillmmPKcS0_>
    4628:	02 c0       	rjmp	.+4      	; 0x462e <_Z18startEventUsingRTCv+0xde>
		}
	}
	else
	{
		reportConfigErrors();
    462a:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_Z18reportConfigErrorsv>
	}
}
    462e:	1f 91       	pop	r17
    4630:	0f 91       	pop	r16
    4632:	ff 90       	pop	r15
    4634:	ef 90       	pop	r14
    4636:	bf 90       	pop	r11
    4638:	af 90       	pop	r10
    463a:	9f 90       	pop	r9
    463c:	8f 90       	pop	r8
    463e:	08 95       	ret

00004640 <_Z11setupForFoxP5Fox_t13EventAction_t>:



void setupForFox(Fox_t* fox, EventAction_t action)
{
    4640:	1f 93       	push	r17
    4642:	cf 93       	push	r28
    4644:	df 93       	push	r29
    4646:	1f 92       	push	r1
    4648:	cd b7       	in	r28, 0x3d	; 61
    464a:	de b7       	in	r29, 0x3e	; 62
    464c:	16 2f       	mov	r17, r22
	bool patternNotSet = true;
	
	if(fox)
    464e:	00 97       	sbiw	r24, 0x00	; 0
    4650:	31 f0       	breq	.+12     	; 0x465e <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    4652:	fc 01       	movw	r30, r24
    4654:	80 81       	ld	r24, Z
    4656:	82 31       	cpi	r24, 0x12	; 18
    4658:	11 f0       	breq	.+4      	; 0x465e <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    465a:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		}
	}

 	g_current_epoch = ds3231_get_epoch(null);
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    4666:	60 93 46 46 	sts	0x4646, r22	; 0x804646 <g_current_epoch>
    466a:	70 93 47 46 	sts	0x4647, r23	; 0x804647 <g_current_epoch+0x1>
    466e:	80 93 48 46 	sts	0x4648, r24	; 0x804648 <g_current_epoch+0x2>
    4672:	90 93 49 46 	sts	0x4649, r25	; 0x804649 <g_current_epoch+0x3>

	cli();
    4676:	f8 94       	cli
	
	g_event_commenced = false;					/* get things running immediately */
    4678:	10 92 21 46 	sts	0x4621, r1	; 0x804621 <g_event_commenced>
	g_event_enabled = false;					/* get things running immediately */
    467c:	10 92 20 46 	sts	0x4620, r1	; 0x804620 <g_event_enabled>

	switch(g_fox)
    4680:	e0 91 1b 40 	lds	r30, 0x401B	; 0x80401b <g_fox>
    4684:	8e 2f       	mov	r24, r30
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	fc 01       	movw	r30, r24
    468a:	31 97       	sbiw	r30, 0x01	; 1
    468c:	e1 31       	cpi	r30, 0x11	; 17
    468e:	f1 05       	cpc	r31, r1
    4690:	08 f0       	brcs	.+2      	; 0x4694 <_Z11setupForFoxP5Fox_t13EventAction_t+0x54>
    4692:	36 c1       	rjmp	.+620    	; 0x4900 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c0>
    4694:	ec 58       	subi	r30, 0x8C	; 140
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	0c 94 be 4b 	jmp	0x977c	; 0x977c <__tablejump2__>
	{
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
    469c:	ea ee       	ldi	r30, 0xEA	; 234
    469e:	f5 e4       	ldi	r31, 0x45	; 69
    46a0:	8d e4       	ldi	r24, 0x4D	; 77
    46a2:	9f e4       	ldi	r25, 0x4F	; 79
    46a4:	80 83       	st	Z, r24
    46a6:	91 83       	std	Z+1, r25	; 0x01
    46a8:	85 e4       	ldi	r24, 0x45	; 69
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	82 83       	std	Z+2, r24	; 0x02
    46ae:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	01 c0       	rjmp	.+2      	; 0x46b6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x76>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46b4:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_2:
		{
			if(patternNotSet)
    46b6:	88 23       	and	r24, r24
    46b8:	69 f0       	breq	.+26     	; 0x46d4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
    46ba:	ea ee       	ldi	r30, 0xEA	; 234
    46bc:	f5 e4       	ldi	r31, 0x45	; 69
    46be:	8d e4       	ldi	r24, 0x4D	; 77
    46c0:	9f e4       	ldi	r25, 0x4F	; 79
    46c2:	80 83       	st	Z, r24
    46c4:	91 83       	std	Z+1, r25	; 0x01
    46c6:	89 e4       	ldi	r24, 0x49	; 73
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	82 83       	std	Z+2, r24	; 0x02
    46cc:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	01 c0       	rjmp	.+2      	; 0x46d4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46d2:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_3:
		{
			if(patternNotSet)
    46d4:	88 23       	and	r24, r24
    46d6:	69 f0       	breq	.+26     	; 0x46f2 <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
    46d8:	ea ee       	ldi	r30, 0xEA	; 234
    46da:	f5 e4       	ldi	r31, 0x45	; 69
    46dc:	8d e4       	ldi	r24, 0x4D	; 77
    46de:	9f e4       	ldi	r25, 0x4F	; 79
    46e0:	80 83       	st	Z, r24
    46e2:	91 83       	std	Z+1, r25	; 0x01
    46e4:	83 e5       	ldi	r24, 0x53	; 83
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	82 83       	std	Z+2, r24	; 0x02
    46ea:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	01 c0       	rjmp	.+2      	; 0x46f2 <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46f0:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_4:
		{
			if(patternNotSet)
    46f2:	88 23       	and	r24, r24
    46f4:	69 f0       	breq	.+26     	; 0x4710 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
    46f6:	ea ee       	ldi	r30, 0xEA	; 234
    46f8:	f5 e4       	ldi	r31, 0x45	; 69
    46fa:	8d e4       	ldi	r24, 0x4D	; 77
    46fc:	9f e4       	ldi	r25, 0x4F	; 79
    46fe:	80 83       	st	Z, r24
    4700:	91 83       	std	Z+1, r25	; 0x01
    4702:	88 e4       	ldi	r24, 0x48	; 72
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	82 83       	std	Z+2, r24	; 0x02
    4708:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	01 c0       	rjmp	.+2      	; 0x4710 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    470e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case FOX_5:
		{
			/* Set the Morse code pattern and speed */
			if(patternNotSet)
    4710:	88 23       	and	r24, r24
    4712:	51 f0       	breq	.+20     	; 0x4728 <_Z11setupForFoxP5Fox_t13EventAction_t+0xe8>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO5");
    4714:	ea ee       	ldi	r30, 0xEA	; 234
    4716:	f5 e4       	ldi	r31, 0x45	; 69
    4718:	8d e4       	ldi	r24, 0x4D	; 77
    471a:	9f e4       	ldi	r25, 0x4F	; 79
    471c:	80 83       	st	Z, r24
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	85 e3       	ldi	r24, 0x35	; 53
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	82 83       	std	Z+2, r24	; 0x02
    4726:	93 83       	std	Z+3, r25	; 0x03
			}
			
			bool repeat = true;
    4728:	81 e0       	ldi	r24, 0x01	; 1
    472a:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    472c:	40 e0       	ldi	r20, 0x00	; 0
    472e:	50 e0       	ldi	r21, 0x00	; 0
    4730:	be 01       	movw	r22, r28
    4732:	6f 5f       	subi	r22, 0xFF	; 255
    4734:	7f 4f       	sbci	r23, 0xFF	; 255
    4736:	8a ee       	ldi	r24, 0xEA	; 234
    4738:	95 e4       	ldi	r25, 0x45	; 69
    473a:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    473e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4742:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    4746:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    474a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 60;			/* wait 10 minutes send the ID */
    474e:	8c e3       	ldi	r24, 0x3C	; 60
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    4756:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    475a:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    475e:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 240;                    /* off period is very short */
    4762:	80 ef       	ldi	r24, 0xF0	; 240
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    476a:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    476e:	f8 c0       	rjmp	.+496    	; 0x4960 <_Z11setupForFoxP5Fox_t13EventAction_t+0x320>

		case SPRINT_S1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "ME");
    4770:	ea ee       	ldi	r30, 0xEA	; 234
    4772:	f5 e4       	ldi	r31, 0x45	; 69
    4774:	8d e4       	ldi	r24, 0x4D	; 77
    4776:	95 e4       	ldi	r25, 0x45	; 69
    4778:	80 83       	st	Z, r24
    477a:	91 83       	std	Z+1, r25	; 0x01
    477c:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    477e:	80 e0       	ldi	r24, 0x00	; 0
    4780:	01 c0       	rjmp	.+2      	; 0x4784 <_Z11setupForFoxP5Fox_t13EventAction_t+0x144>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4782:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S2:
		{
			if(patternNotSet)
    4784:	88 23       	and	r24, r24
    4786:	51 f0       	breq	.+20     	; 0x479c <_Z11setupForFoxP5Fox_t13EventAction_t+0x15c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MI");
    4788:	ea ee       	ldi	r30, 0xEA	; 234
    478a:	f5 e4       	ldi	r31, 0x45	; 69
    478c:	8d e4       	ldi	r24, 0x4D	; 77
    478e:	99 e4       	ldi	r25, 0x49	; 73
    4790:	80 83       	st	Z, r24
    4792:	91 83       	std	Z+1, r25	; 0x01
    4794:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	01 c0       	rjmp	.+2      	; 0x479c <_Z11setupForFoxP5Fox_t13EventAction_t+0x15c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    479a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S3:
		{
			if(patternNotSet)
    479c:	88 23       	and	r24, r24
    479e:	51 f0       	breq	.+20     	; 0x47b4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x174>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MS");
    47a0:	ea ee       	ldi	r30, 0xEA	; 234
    47a2:	f5 e4       	ldi	r31, 0x45	; 69
    47a4:	8d e4       	ldi	r24, 0x4D	; 77
    47a6:	93 e5       	ldi	r25, 0x53	; 83
    47a8:	80 83       	st	Z, r24
    47aa:	91 83       	std	Z+1, r25	; 0x01
    47ac:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    47ae:	80 e0       	ldi	r24, 0x00	; 0
    47b0:	01 c0       	rjmp	.+2      	; 0x47b4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x174>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    47b2:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S4:
		{
			if(patternNotSet)
    47b4:	88 23       	and	r24, r24
    47b6:	51 f0       	breq	.+20     	; 0x47cc <_Z11setupForFoxP5Fox_t13EventAction_t+0x18c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MH");
    47b8:	ea ee       	ldi	r30, 0xEA	; 234
    47ba:	f5 e4       	ldi	r31, 0x45	; 69
    47bc:	8d e4       	ldi	r24, 0x4D	; 77
    47be:	98 e4       	ldi	r25, 0x48	; 72
    47c0:	80 83       	st	Z, r24
    47c2:	91 83       	std	Z+1, r25	; 0x01
    47c4:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	01 c0       	rjmp	.+2      	; 0x47cc <_Z11setupForFoxP5Fox_t13EventAction_t+0x18c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    47ca:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case SPRINT_S5:
		{
			{
				if(patternNotSet)
    47cc:	88 23       	and	r24, r24
    47ce:	39 f0       	breq	.+14     	; 0x47de <_Z11setupForFoxP5Fox_t13EventAction_t+0x19e>
				{
					sprintf(g_messages_text[PATTERN_TEXT], "M5");
    47d0:	ea ee       	ldi	r30, 0xEA	; 234
    47d2:	f5 e4       	ldi	r31, 0x45	; 69
    47d4:	8d e4       	ldi	r24, 0x4D	; 77
    47d6:	95 e3       	ldi	r25, 0x35	; 53
    47d8:	80 83       	st	Z, r24
    47da:	91 83       	std	Z+1, r25	; 0x01
    47dc:	12 82       	std	Z+2, r1	; 0x02
				}
			}
			
			bool repeat = true;
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    47e2:	40 e0       	ldi	r20, 0x00	; 0
    47e4:	50 e0       	ldi	r21, 0x00	; 0
    47e6:	be 01       	movw	r22, r28
    47e8:	6f 5f       	subi	r22, 0xFF	; 255
    47ea:	7f 4f       	sbci	r23, 0xFF	; 255
    47ec:	8a ee       	ldi	r24, 0xEA	; 234
    47ee:	95 e4       	ldi	r25, 0x45	; 69
    47f0:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    47f4:	88 e0       	ldi	r24, 0x08	; 8
    47f6:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    47fa:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    47fe:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    4802:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4806:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    480a:	88 e5       	ldi	r24, 0x58	; 88
    480c:	92 e0       	ldi	r25, 0x02	; 2
    480e:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    4812:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    4816:	8c e0       	ldi	r24, 0x0C	; 12
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    481e:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    4822:	80 e3       	ldi	r24, 0x30	; 48
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    482a:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    482e:	98 c0       	rjmp	.+304    	; 0x4960 <_Z11setupForFoxP5Fox_t13EventAction_t+0x320>

		case SPRINT_F1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OE");
    4830:	ea ee       	ldi	r30, 0xEA	; 234
    4832:	f5 e4       	ldi	r31, 0x45	; 69
    4834:	8f e4       	ldi	r24, 0x4F	; 79
    4836:	95 e4       	ldi	r25, 0x45	; 69
    4838:	80 83       	st	Z, r24
    483a:	91 83       	std	Z+1, r25	; 0x01
    483c:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    483e:	80 e0       	ldi	r24, 0x00	; 0
    4840:	01 c0       	rjmp	.+2      	; 0x4844 <_Z11setupForFoxP5Fox_t13EventAction_t+0x204>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4842:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F2:
		{
			if(patternNotSet)
    4844:	88 23       	and	r24, r24
    4846:	51 f0       	breq	.+20     	; 0x485c <_Z11setupForFoxP5Fox_t13EventAction_t+0x21c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OI");
    4848:	ea ee       	ldi	r30, 0xEA	; 234
    484a:	f5 e4       	ldi	r31, 0x45	; 69
    484c:	8f e4       	ldi	r24, 0x4F	; 79
    484e:	99 e4       	ldi	r25, 0x49	; 73
    4850:	80 83       	st	Z, r24
    4852:	91 83       	std	Z+1, r25	; 0x01
    4854:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4856:	80 e0       	ldi	r24, 0x00	; 0
    4858:	01 c0       	rjmp	.+2      	; 0x485c <_Z11setupForFoxP5Fox_t13EventAction_t+0x21c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    485a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F3:
		{
			if(patternNotSet)
    485c:	88 23       	and	r24, r24
    485e:	51 f0       	breq	.+20     	; 0x4874 <_Z11setupForFoxP5Fox_t13EventAction_t+0x234>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OS");
    4860:	ea ee       	ldi	r30, 0xEA	; 234
    4862:	f5 e4       	ldi	r31, 0x45	; 69
    4864:	8f e4       	ldi	r24, 0x4F	; 79
    4866:	93 e5       	ldi	r25, 0x53	; 83
    4868:	80 83       	st	Z, r24
    486a:	91 83       	std	Z+1, r25	; 0x01
    486c:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    486e:	80 e0       	ldi	r24, 0x00	; 0
    4870:	01 c0       	rjmp	.+2      	; 0x4874 <_Z11setupForFoxP5Fox_t13EventAction_t+0x234>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4872:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F4:
		{
			if(patternNotSet)
    4874:	88 23       	and	r24, r24
    4876:	51 f0       	breq	.+20     	; 0x488c <_Z11setupForFoxP5Fox_t13EventAction_t+0x24c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OH");
    4878:	ea ee       	ldi	r30, 0xEA	; 234
    487a:	f5 e4       	ldi	r31, 0x45	; 69
    487c:	8f e4       	ldi	r24, 0x4F	; 79
    487e:	98 e4       	ldi	r25, 0x48	; 72
    4880:	80 83       	st	Z, r24
    4882:	91 83       	std	Z+1, r25	; 0x01
    4884:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	01 c0       	rjmp	.+2      	; 0x488c <_Z11setupForFoxP5Fox_t13EventAction_t+0x24c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    488a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F5:
		{
			if(patternNotSet)
    488c:	88 23       	and	r24, r24
    488e:	39 f0       	breq	.+14     	; 0x489e <_Z11setupForFoxP5Fox_t13EventAction_t+0x25e>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "O5");
    4890:	ea ee       	ldi	r30, 0xEA	; 234
    4892:	f5 e4       	ldi	r31, 0x45	; 69
    4894:	8f e4       	ldi	r24, 0x4F	; 79
    4896:	95 e3       	ldi	r25, 0x35	; 53
    4898:	80 83       	st	Z, r24
    489a:	91 83       	std	Z+1, r25	; 0x01
    489c:	12 82       	std	Z+2, r1	; 0x02
			}
			
			bool repeat = true;
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    48a2:	40 e0       	ldi	r20, 0x00	; 0
    48a4:	50 e0       	ldi	r21, 0x00	; 0
    48a6:	be 01       	movw	r22, r28
    48a8:	6f 5f       	subi	r22, 0xFF	; 255
    48aa:	7f 4f       	sbci	r23, 0xFF	; 255
    48ac:	8a ee       	ldi	r24, 0xEA	; 234
    48ae:	95 e4       	ldi	r25, 0x45	; 69
    48b0:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 15;
    48b4:	8f e0       	ldi	r24, 0x0F	; 15
    48b6:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    48ba:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    48be:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    48c2:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    48c6:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    48ca:	88 e5       	ldi	r24, 0x58	; 88
    48cc:	92 e0       	ldi	r25, 0x02	; 2
    48ce:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    48d2:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    48d6:	8c e0       	ldi	r24, 0x0C	; 12
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    48de:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    48e2:	80 e3       	ldi	r24, 0x30	; 48
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    48ea:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    48ee:	38 c0       	rjmp	.+112    	; 0x4960 <_Z11setupForFoxP5Fox_t13EventAction_t+0x320>
#endif // SUPPORT_TEMP_AND_VOLTAGE_REPORTING


		case SPECTATOR:
		{
			sprintf(g_messages_text[PATTERN_TEXT], "S");
    48f0:	83 e5       	ldi	r24, 0x53	; 83
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	80 93 ea 45 	sts	0x45EA, r24	; 0x8045ea <g_messages_text>
    48f8:	90 93 eb 45 	sts	0x45EB, r25	; 0x8045eb <g_messages_text+0x1>
			patternNotSet = false;
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	01 c0       	rjmp	.+2      	; 0x4902 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c2>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4900:	81 e0       	ldi	r24, 0x01	; 1
			patternNotSet = false;
		}
		case BEACON:
		default:
		{
			if(patternNotSet)
    4902:	88 23       	and	r24, r24
    4904:	39 f0       	breq	.+14     	; 0x4914 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d4>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO");
    4906:	ea ee       	ldi	r30, 0xEA	; 234
    4908:	f5 e4       	ldi	r31, 0x45	; 69
    490a:	8d e4       	ldi	r24, 0x4D	; 77
    490c:	9f e4       	ldi	r25, 0x4F	; 79
    490e:	80 83       	st	Z, r24
    4910:	91 83       	std	Z+1, r25	; 0x01
    4912:	12 82       	std	Z+2, r1	; 0x02
			}
			
			bool repeat = true;
    4914:	81 e0       	ldi	r24, 0x01	; 1
    4916:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4918:	40 e0       	ldi	r20, 0x00	; 0
    491a:	50 e0       	ldi	r21, 0x00	; 0
    491c:	be 01       	movw	r22, r28
    491e:	6f 5f       	subi	r22, 0xFF	; 255
    4920:	7f 4f       	sbci	r23, 0xFF	; 255
    4922:	8a ee       	ldi	r24, 0xEA	; 234
    4924:	95 e4       	ldi	r25, 0x45	; 69
    4926:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    492a:	88 e0       	ldi	r24, 0x08	; 8
    492c:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4930:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4934:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    4938:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    493c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    4940:	88 e5       	ldi	r24, 0x58	; 88
    4942:	92 e0       	ldi	r25, 0x02	; 2
    4944:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <_ZL26g_sendID_seconds_countdown>
    4948:	90 93 e5 45 	sts	0x45E5, r25	; 0x8045e5 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    494c:	8c e3       	ldi	r24, 0x3C	; 60
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4954:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 0;						/* off period is very short */
    4958:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    495c:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
	}

	if(action == START_NOTHING)
    4960:	11 11       	cpse	r17, r1
    4962:	0a c0       	rjmp	.+20     	; 0x4978 <_Z11setupForFoxP5Fox_t13EventAction_t+0x338>
	{
		g_event_commenced = false;                   /* get things running immediately */
    4964:	10 92 21 46 	sts	0x4621, r1	; 0x804621 <g_event_commenced>
		g_event_enabled = false;                     /* get things running immediately */
    4968:	10 92 20 46 	sts	0x4620, r1	; 0x804620 <g_event_enabled>

 		g_use_rtc_for_startstop = false;
    496c:	10 92 4a 46 	sts	0x464A, r1	; 0x80464a <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    4976:	46 c0       	rjmp	.+140    	; 0x4a04 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3c4>
	}
	else if(action == START_EVENT_NOW)
    4978:	11 30       	cpi	r17, 0x01	; 1
    497a:	51 f4       	brne	.+20     	; 0x4990 <_Z11setupForFoxP5Fox_t13EventAction_t+0x350>
	{
// 		g_seconds_since_sync = 0;                   /* Total elapsed time since synchronization */
 		g_use_rtc_for_startstop = false;
    497c:	10 92 4a 46 	sts	0x464A, r1	; 0x80464a <g_use_rtc_for_startstop>
 		g_transmissions_disabled = false;
    4980:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
		g_event_commenced = true;					/* get things running immediately */
    4984:	81 e0       	ldi	r24, 0x01	; 1
    4986:	80 93 21 46 	sts	0x4621, r24	; 0x804621 <g_event_commenced>
		g_event_enabled = true;						/* get things running immediately */
    498a:	80 93 20 46 	sts	0x4620, r24	; 0x804620 <g_event_enabled>
    498e:	3a c0       	rjmp	.+116    	; 0x4a04 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3c4>
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    4990:	12 30       	cpi	r17, 0x02	; 2
    4992:	79 f5       	brne	.+94     	; 0x49f2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3b2>
	{
		bool repeat = true;
    4994:	11 e0       	ldi	r17, 0x01	; 1
    4996:	19 83       	std	Y+1, r17	; 0x01
		makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4998:	40 e0       	ldi	r20, 0x00	; 0
    499a:	50 e0       	ldi	r21, 0x00	; 0
    499c:	be 01       	movw	r22, r28
    499e:	6f 5f       	subi	r22, 0xFF	; 255
    49a0:	7f 4f       	sbci	r23, 0xFF	; 255
    49a2:	8a ee       	ldi	r24, 0xEA	; 234
    49a4:	95 e4       	ldi	r25, 0x45	; 69
    49a6:	0e 94 34 39 	call	0x7268	; 0x7268 <_Z9makeMorsePcPbS0_>
		g_code_throttle = throttleValue(g_pattern_codespeed);
    49aa:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    49ae:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_Z13throttleValueh>
    49b2:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    49b6:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

// 		g_event_start_time = 1;                     /* have it start a long time ago */
// 		g_event_finish_time = MAX_TIME;             /* run for a long long time */
		g_on_the_air = g_on_air_seconds;			/* start out transmitting */
    49ba:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    49be:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    49c2:	09 2e       	mov	r0, r25
    49c4:	00 0c       	add	r0, r0
    49c6:	aa 0b       	sbc	r26, r26
    49c8:	bb 0b       	sbc	r27, r27
    49ca:	80 93 e0 45 	sts	0x45E0, r24	; 0x8045e0 <_ZL12g_on_the_air>
    49ce:	90 93 e1 45 	sts	0x45E1, r25	; 0x8045e1 <_ZL12g_on_the_air+0x1>
    49d2:	a0 93 e2 45 	sts	0x45E2, r26	; 0x8045e2 <_ZL12g_on_the_air+0x2>
    49d6:	b0 93 e3 45 	sts	0x45E3, r27	; 0x8045e3 <_ZL12g_on_the_air+0x3>
		g_event_commenced = true;                   /* get things running immediately */
    49da:	10 93 21 46 	sts	0x4621, r17	; 0x804621 <g_event_commenced>
		g_event_enabled = true;                     /* get things running immediately */
    49de:	10 93 20 46 	sts	0x4620, r17	; 0x804620 <g_event_enabled>
		g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    49e2:	8d ef       	ldi	r24, 0xFD	; 253
    49e4:	80 93 dc 45 	sts	0x45DC, r24	; 0x8045dc <_ZL18g_last_status_code>
		
// 		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
 		g_use_rtc_for_startstop = false;
    49e8:	10 92 4a 46 	sts	0x464A, r1	; 0x80464a <g_use_rtc_for_startstop>
 		g_transmissions_disabled = false;
    49ec:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    49f0:	09 c0       	rjmp	.+18     	; 0x4a04 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3c4>
	}
	else         /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		SC sc;
 //		EC ec = 
		activateEventUsingCurrentSettings(&sc);
    49f2:	ce 01       	movw	r24, r28
    49f4:	01 96       	adiw	r24, 0x01	; 1
    49f6:	0e 94 34 20 	call	0x4068	; 0x4068 <_Z33activateEventUsingCurrentSettingsP2SC>
 
 		g_use_rtc_for_startstop = true;
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	80 93 4a 46 	sts	0x464A, r24	; 0x80464a <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    4a00:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
// 	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
// 	g_sendAMmodulation = false;
// 	g_LED_enunciating = false;
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */

	sei();
    4a04:	78 94       	sei
}
    4a06:	0f 90       	pop	r0
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	1f 91       	pop	r17
    4a0e:	08 95       	ret

00004a10 <_Z18validateTimeStringPcPma>:

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    4a10:	4f 92       	push	r4
    4a12:	5f 92       	push	r5
    4a14:	6f 92       	push	r6
    4a16:	7f 92       	push	r7
    4a18:	af 92       	push	r10
    4a1a:	bf 92       	push	r11
    4a1c:	cf 92       	push	r12
    4a1e:	df 92       	push	r13
    4a20:	ef 92       	push	r14
    4a22:	ff 92       	push	r15
    4a24:	0f 93       	push	r16
    4a26:	1f 93       	push	r17
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	8c 01       	movw	r16, r24
    4a2e:	a4 2e       	mov	r10, r20
	time_t valid = 0;
	int len = strlen(str);
    4a30:	fc 01       	movw	r30, r24
    4a32:	01 90       	ld	r0, Z+
    4a34:	00 20       	and	r0, r0
    4a36:	e9 f7       	brne	.-6      	; 0x4a32 <_Z18validateTimeStringPcPma+0x22>
    4a38:	31 97       	sbiw	r30, 0x01	; 1
    4a3a:	ef 01       	movw	r28, r30
    4a3c:	c8 1b       	sub	r28, r24
    4a3e:	d9 0b       	sbc	r29, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    4a40:	26 e4       	ldi	r18, 0x46	; 70
    4a42:	65 33       	cpi	r22, 0x35	; 53
    4a44:	72 07       	cpc	r23, r18
    4a46:	e1 f4       	brne	.+56     	; 0x4a80 <_Z18validateTimeStringPcPma+0x70>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4a48:	c0 90 46 46 	lds	r12, 0x4646	; 0x804646 <g_current_epoch>
    4a4c:	d0 90 47 46 	lds	r13, 0x4647	; 0x804647 <g_current_epoch+0x1>
    4a50:	e0 90 48 46 	lds	r14, 0x4648	; 0x804648 <g_current_epoch+0x2>
    4a54:	f0 90 49 46 	lds	r15, 0x4649	; 0x804649 <g_current_epoch+0x3>
    4a58:	c1 14       	cp	r12, r1
    4a5a:	86 e6       	ldi	r24, 0x66	; 102
    4a5c:	d8 06       	cpc	r13, r24
    4a5e:	8e ee       	ldi	r24, 0xEE	; 238
    4a60:	e8 06       	cpc	r14, r24
    4a62:	8f e5       	ldi	r24, 0x5F	; 95
    4a64:	f8 06       	cpc	r15, r24
    4a66:	50 f5       	brcc	.+84     	; 0x4abc <_Z18validateTimeStringPcPma+0xac>
		validationType = 1;
    4a68:	bb 24       	eor	r11, r11
    4a6a:	b3 94       	inc	r11
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4a6c:	0f 2e       	mov	r0, r31
    4a6e:	c1 2c       	mov	r12, r1
    4a70:	f6 e6       	ldi	r31, 0x66	; 102
    4a72:	df 2e       	mov	r13, r31
    4a74:	fe ee       	ldi	r31, 0xEE	; 238
    4a76:	ef 2e       	mov	r14, r31
    4a78:	ff e5       	ldi	r31, 0x5F	; 95
    4a7a:	ff 2e       	mov	r15, r31
    4a7c:	f0 2d       	mov	r31, r0
    4a7e:	2f c0       	rjmp	.+94     	; 0x4ade <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
    4a80:	69 53       	subi	r22, 0x39	; 57
    4a82:	76 44       	sbci	r23, 0x46	; 70
    4a84:	f1 f4       	brne	.+60     	; 0x4ac2 <_Z18validateTimeStringPcPma+0xb2>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    4a86:	c0 90 35 46 	lds	r12, 0x4635	; 0x804635 <g_event_start_epoch>
    4a8a:	d0 90 36 46 	lds	r13, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    4a8e:	e0 90 37 46 	lds	r14, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    4a92:	f0 90 38 46 	lds	r15, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    4a96:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    4a9a:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    4a9e:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    4aa2:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    4aa6:	c8 16       	cp	r12, r24
    4aa8:	d9 06       	cpc	r13, r25
    4aaa:	ea 06       	cpc	r14, r26
    4aac:	fb 06       	cpc	r15, r27
    4aae:	a0 f4       	brcc	.+40     	; 0x4ad8 <_Z18validateTimeStringPcPma+0xc8>
    4ab0:	6c 01       	movw	r12, r24
    4ab2:	7d 01       	movw	r14, r26
		validationType = 2;
    4ab4:	68 94       	set
    4ab6:	bb 24       	eor	r11, r11
    4ab8:	b1 f8       	bld	r11, 1
    4aba:	11 c0       	rjmp	.+34     	; 0x4ade <_Z18validateTimeStringPcPma+0xce>
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
    4abc:	bb 24       	eor	r11, r11
    4abe:	b3 94       	inc	r11
    4ac0:	0e c0       	rjmp	.+28     	; 0x4ade <_Z18validateTimeStringPcPma+0xce>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    4ac2:	b1 2c       	mov	r11, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    4ac4:	0f 2e       	mov	r0, r31
    4ac6:	c1 2c       	mov	r12, r1
    4ac8:	f6 e6       	ldi	r31, 0x66	; 102
    4aca:	df 2e       	mov	r13, r31
    4acc:	fe ee       	ldi	r31, 0xEE	; 238
    4ace:	ef 2e       	mov	r14, r31
    4ad0:	ff e5       	ldi	r31, 0x5F	; 95
    4ad2:	ff 2e       	mov	r15, r31
    4ad4:	f0 2d       	mov	r31, r0
    4ad6:	03 c0       	rjmp	.+6      	; 0x4ade <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
    4ad8:	68 94       	set
    4ada:	bb 24       	eor	r11, r11
    4adc:	b1 f8       	bld	r11, 1
	}
	
	if(len == 10)
    4ade:	ca 30       	cpi	r28, 0x0A	; 10
    4ae0:	d1 05       	cpc	r29, r1
    4ae2:	39 f4       	brne	.+14     	; 0x4af2 <_Z18validateTimeStringPcPma+0xe2>
	{
		str[10] = '0';
    4ae4:	80 e3       	ldi	r24, 0x30	; 48
    4ae6:	f8 01       	movw	r30, r16
    4ae8:	82 87       	std	Z+10, r24	; 0x0a
		str[11] = '0';
    4aea:	83 87       	std	Z+11, r24	; 0x0b
		str[12] = '\0';
    4aec:	14 86       	std	Z+12, r1	; 0x0c
		len = 12;
    4aee:	cc e0       	ldi	r28, 0x0C	; 12
    4af0:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if((len == 12) && (only_digits(str)))
    4af2:	cc 30       	cpi	r28, 0x0C	; 12
    4af4:	d1 05       	cpc	r29, r1
    4af6:	21 f4       	brne	.+8      	; 0x4b00 <_Z18validateTimeStringPcPma+0xf0>
    4af8:	c8 01       	movw	r24, r16
    4afa:	0e 94 ef 46 	call	0x8dde	; 0x8dde <_Z11only_digitsPc>
    4afe:	01 c0       	rjmp	.+2      	; 0x4b02 <_Z18validateTimeStringPcPma+0xf2>
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	88 23       	and	r24, r24
    4b04:	09 f4       	brne	.+2      	; 0x4b08 <_Z18validateTimeStringPcPma+0xf8>
    4b06:	4b c0       	rjmp	.+150    	; 0x4b9e <_Z18validateTimeStringPcPma+0x18e>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    4b08:	b8 01       	movw	r22, r16
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	0e 94 cd 2c 	call	0x599a	; 0x599a <RTC_String2Epoch>
    4b12:	2b 01       	movw	r4, r22
    4b14:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    4b16:	aa 2d       	mov	r26, r10
    4b18:	aa 0c       	add	r10, r10
    4b1a:	bb 0b       	sbc	r27, r27
    4b1c:	20 e1       	ldi	r18, 0x10	; 16
    4b1e:	3e e0       	ldi	r19, 0x0E	; 14
    4b20:	0e 94 d6 4b 	call	0x97ac	; 0x97ac <__usmulhisi3>
    4b24:	64 0d       	add	r22, r4
    4b26:	75 1d       	adc	r23, r5
    4b28:	86 1d       	adc	r24, r6
    4b2a:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    4b2c:	c6 16       	cp	r12, r22
    4b2e:	d7 06       	cpc	r13, r23
    4b30:	e8 06       	cpc	r14, r24
    4b32:	f9 06       	cpc	r15, r25
    4b34:	08 f4       	brcc	.+2      	; 0x4b38 <_Z18validateTimeStringPcPma+0x128>
    4b36:	40 c0       	rjmp	.+128    	; 0x4bb8 <_Z18validateTimeStringPcPma+0x1a8>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    4b38:	f1 e0       	ldi	r31, 0x01	; 1
    4b3a:	bf 12       	cpse	r11, r31
    4b3c:	08 c0       	rjmp	.+16     	; 0x4b4e <_Z18validateTimeStringPcPma+0x13e>
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
    4b3e:	8f e0       	ldi	r24, 0x0F	; 15
    4b40:	93 e4       	ldi	r25, 0x43	; 67
    4b42:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4b46:	60 e0       	ldi	r22, 0x00	; 0
    4b48:	70 e0       	ldi	r23, 0x00	; 0
    4b4a:	cb 01       	movw	r24, r22
    4b4c:	35 c0       	rjmp	.+106    	; 0x4bb8 <_Z18validateTimeStringPcPma+0x1a8>
		{
			if(validationType == 1)         /* start time validation */
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
			}
			else if(validationType == 2)    /* finish time validation */
    4b4e:	22 e0       	ldi	r18, 0x02	; 2
    4b50:	b2 12       	cpse	r11, r18
    4b52:	1d c0       	rjmp	.+58     	; 0x4b8e <_Z18validateTimeStringPcPma+0x17e>
			{
				if(ep < g_current_epoch)
    4b54:	00 91 46 46 	lds	r16, 0x4646	; 0x804646 <g_current_epoch>
    4b58:	10 91 47 46 	lds	r17, 0x4647	; 0x804647 <g_current_epoch+0x1>
    4b5c:	20 91 48 46 	lds	r18, 0x4648	; 0x804648 <g_current_epoch+0x2>
    4b60:	30 91 49 46 	lds	r19, 0x4649	; 0x804649 <g_current_epoch+0x3>
    4b64:	60 17       	cp	r22, r16
    4b66:	71 07       	cpc	r23, r17
    4b68:	82 07       	cpc	r24, r18
    4b6a:	93 07       	cpc	r25, r19
    4b6c:	40 f4       	brcc	.+16     	; 0x4b7e <_Z18validateTimeStringPcPma+0x16e>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
    4b6e:	84 e2       	ldi	r24, 0x24	; 36
    4b70:	93 e4       	ldi	r25, 0x43	; 67
    4b72:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4b76:	60 e0       	ldi	r22, 0x00	; 0
    4b78:	70 e0       	ldi	r23, 0x00	; 0
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	1d c0       	rjmp	.+58     	; 0x4bb8 <_Z18validateTimeStringPcPma+0x1a8>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
				}
				else
				{
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
    4b7e:	8a e3       	ldi	r24, 0x3A	; 58
    4b80:	93 e4       	ldi	r25, 0x43	; 67
    4b82:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4b86:	60 e0       	ldi	r22, 0x00	; 0
    4b88:	70 e0       	ldi	r23, 0x00	; 0
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	15 c0       	rjmp	.+42     	; 0x4bb8 <_Z18validateTimeStringPcPma+0x1a8>
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
				}
			}
			else    /* current time validation */
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
    4b8e:	85 e5       	ldi	r24, 0x55	; 85
    4b90:	93 e4       	ldi	r25, 0x43	; 67
    4b92:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4b96:	60 e0       	ldi	r22, 0x00	; 0
    4b98:	70 e0       	ldi	r23, 0x00	; 0
    4b9a:	cb 01       	movw	r24, r22
    4b9c:	0d c0       	rjmp	.+26     	; 0x4bb8 <_Z18validateTimeStringPcPma+0x1a8>
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
			}
		}
	}
	else if(len)
    4b9e:	cd 2b       	or	r28, r29
    4ba0:	41 f0       	breq	.+16     	; 0x4bb2 <_Z18validateTimeStringPcPma+0x1a2>
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
    4ba2:	89 e6       	ldi	r24, 0x69	; 105
    4ba4:	93 e4       	ldi	r25, 0x43	; 67
    4ba6:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4baa:	60 e0       	ldi	r22, 0x00	; 0
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	cb 01       	movw	r24, r22
    4bb0:	03 c0       	rjmp	.+6      	; 0x4bb8 <_Z18validateTimeStringPcPma+0x1a8>
    4bb2:	60 e0       	ldi	r22, 0x00	; 0
    4bb4:	70 e0       	ldi	r23, 0x00	; 0
    4bb6:	cb 01       	movw	r24, r22
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
	}

	return(valid);
}
    4bb8:	df 91       	pop	r29
    4bba:	cf 91       	pop	r28
    4bbc:	1f 91       	pop	r17
    4bbe:	0f 91       	pop	r16
    4bc0:	ff 90       	pop	r15
    4bc2:	ef 90       	pop	r14
    4bc4:	df 90       	pop	r13
    4bc6:	cf 90       	pop	r12
    4bc8:	bf 90       	pop	r11
    4bca:	af 90       	pop	r10
    4bcc:	7f 90       	pop	r7
    4bce:	6f 90       	pop	r6
    4bd0:	5f 90       	pop	r5
    4bd2:	4f 90       	pop	r4
    4bd4:	08 95       	ret

00004bd6 <_Z14reportTimeTillmmPKcS0_>:


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    4bd6:	2f 92       	push	r2
    4bd8:	3f 92       	push	r3
    4bda:	4f 92       	push	r4
    4bdc:	5f 92       	push	r5
    4bde:	6f 92       	push	r6
    4be0:	7f 92       	push	r7
    4be2:	8f 92       	push	r8
    4be4:	9f 92       	push	r9
    4be6:	af 92       	push	r10
    4be8:	bf 92       	push	r11
    4bea:	cf 92       	push	r12
    4bec:	df 92       	push	r13
    4bee:	ef 92       	push	r14
    4bf0:	ff 92       	push	r15
    4bf2:	0f 93       	push	r16
    4bf4:	1f 93       	push	r17
    4bf6:	cf 93       	push	r28
    4bf8:	df 93       	push	r29
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	2c 97       	sbiw	r28, 0x0c	; 12
    4c00:	cd bf       	out	0x3d, r28	; 61
    4c02:	de bf       	out	0x3e, r29	; 62
    4c04:	2b 01       	movw	r4, r22
    4c06:	3c 01       	movw	r6, r24
    4c08:	49 01       	movw	r8, r18
    4c0a:	5a 01       	movw	r10, r20
	bool failure = false;

	if(from >= until)   /* Negative time */
    4c0c:	62 17       	cp	r22, r18
    4c0e:	73 07       	cpc	r23, r19
    4c10:	84 07       	cpc	r24, r20
    4c12:	95 07       	cpc	r25, r21
    4c14:	48 f0       	brcs	.+18     	; 0x4c28 <_Z14reportTimeTillmmPKcS0_+0x52>
	{
		failure = true;
		if(failMsg)
    4c16:	e1 14       	cp	r14, r1
    4c18:	f1 04       	cpc	r15, r1
    4c1a:	09 f4       	brne	.+2      	; 0x4c1e <_Z14reportTimeTillmmPKcS0_+0x48>
    4c1c:	fd c0       	rjmp	.+506    	; 0x4e18 <_Z14reportTimeTillmmPKcS0_+0x242>
		{
			sb_send_string((char*)failMsg);
    4c1e:	c7 01       	movw	r24, r14
    4c20:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
{
	bool failure = false;

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4c24:	81 e0       	ldi	r24, 0x01	; 1
    4c26:	f9 c0       	rjmp	.+498    	; 0x4e1a <_Z14reportTimeTillmmPKcS0_+0x244>
			sb_send_string((char*)failMsg);
		}
	}
	else
	{
		if(prefix)
    4c28:	01 15       	cp	r16, r1
    4c2a:	11 05       	cpc	r17, r1
    4c2c:	19 f0       	breq	.+6      	; 0x4c34 <_Z14reportTimeTillmmPKcS0_+0x5e>
		{
			sb_send_string((char*)prefix);
    4c2e:	c8 01       	movw	r24, r16
    4c30:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
		}
		time_t dif = until - from;
    4c34:	75 01       	movw	r14, r10
    4c36:	64 01       	movw	r12, r8
    4c38:	c4 18       	sub	r12, r4
    4c3a:	d5 08       	sbc	r13, r5
    4c3c:	e6 08       	sbc	r14, r6
    4c3e:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    4c40:	c7 01       	movw	r24, r14
    4c42:	b6 01       	movw	r22, r12
    4c44:	20 e8       	ldi	r18, 0x80	; 128
    4c46:	33 e3       	ldi	r19, 0x33	; 51
    4c48:	41 ee       	ldi	r20, 0xE1	; 225
    4c4a:	51 e0       	ldi	r21, 0x01	; 1
    4c4c:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4c50:	29 01       	movw	r4, r18
    4c52:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    4c54:	44 27       	eor	r20, r20
    4c56:	55 27       	eor	r21, r21
    4c58:	60 e8       	ldi	r22, 0x80	; 128
    4c5a:	73 e3       	ldi	r23, 0x33	; 51
    4c5c:	81 ee       	ldi	r24, 0xE1	; 225
    4c5e:	91 e0       	ldi	r25, 0x01	; 1
    4c60:	0e 94 45 4b 	call	0x968a	; 0x968a <__mulsi3>
    4c64:	c6 1a       	sub	r12, r22
    4c66:	d7 0a       	sbc	r13, r23
    4c68:	e8 0a       	sbc	r14, r24
    4c6a:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    4c6c:	c7 01       	movw	r24, r14
    4c6e:	b6 01       	movw	r22, r12
    4c70:	20 e8       	ldi	r18, 0x80	; 128
    4c72:	31 e5       	ldi	r19, 0x51	; 81
    4c74:	41 e0       	ldi	r20, 0x01	; 1
    4c76:	50 e0       	ldi	r21, 0x00	; 0
    4c78:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4c7c:	49 01       	movw	r8, r18
    4c7e:	5a 01       	movw	r10, r20
    4c80:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    4c82:	44 27       	eor	r20, r20
    4c84:	55 27       	eor	r21, r21
    4c86:	60 e8       	ldi	r22, 0x80	; 128
    4c88:	71 e5       	ldi	r23, 0x51	; 81
    4c8a:	81 e0       	ldi	r24, 0x01	; 1
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	0e 94 45 4b 	call	0x968a	; 0x968a <__mulsi3>
    4c92:	c6 1a       	sub	r12, r22
    4c94:	d7 0a       	sbc	r13, r23
    4c96:	e8 0a       	sbc	r14, r24
    4c98:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    4c9a:	c7 01       	movw	r24, r14
    4c9c:	b6 01       	movw	r22, r12
    4c9e:	20 e1       	ldi	r18, 0x10	; 16
    4ca0:	3e e0       	ldi	r19, 0x0E	; 14
    4ca2:	40 e0       	ldi	r20, 0x00	; 0
    4ca4:	50 e0       	ldi	r21, 0x00	; 0
    4ca6:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4caa:	29 83       	std	Y+1, r18	; 0x01
    4cac:	3a 83       	std	Y+2, r19	; 0x02
    4cae:	4b 83       	std	Y+3, r20	; 0x03
    4cb0:	5c 83       	std	Y+4, r21	; 0x04
    4cb2:	29 81       	ldd	r18, Y+1	; 0x01
    4cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    4cb6:	29 87       	std	Y+9, r18	; 0x09
    4cb8:	3a 87       	std	Y+10, r19	; 0x0a
		hold -= (hours * HOUR);
    4cba:	29 81       	ldd	r18, Y+1	; 0x01
    4cbc:	3a 81       	ldd	r19, Y+2	; 0x02
    4cbe:	4b 81       	ldd	r20, Y+3	; 0x03
    4cc0:	5c 81       	ldd	r21, Y+4	; 0x04
    4cc2:	44 27       	eor	r20, r20
    4cc4:	55 27       	eor	r21, r21
    4cc6:	a0 e1       	ldi	r26, 0x10	; 16
    4cc8:	be e0       	ldi	r27, 0x0E	; 14
    4cca:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <__muluhisi3>
    4cce:	c6 1a       	sub	r12, r22
    4cd0:	d7 0a       	sbc	r13, r23
    4cd2:	e8 0a       	sbc	r14, r24
    4cd4:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    4cd6:	c7 01       	movw	r24, r14
    4cd8:	b6 01       	movw	r22, r12
    4cda:	2c e3       	ldi	r18, 0x3C	; 60
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
    4cde:	40 e0       	ldi	r20, 0x00	; 0
    4ce0:	50 e0       	ldi	r21, 0x00	; 0
    4ce2:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4ce6:	2d 83       	std	Y+5, r18	; 0x05
    4ce8:	3e 83       	std	Y+6, r19	; 0x06
    4cea:	4f 83       	std	Y+7, r20	; 0x07
    4cec:	58 87       	std	Y+8, r21	; 0x08
    4cee:	0d 81       	ldd	r16, Y+5	; 0x05
    4cf0:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    4cf2:	2c e3       	ldi	r18, 0x3C	; 60
    4cf4:	20 9f       	mul	r18, r16
    4cf6:	c0 01       	movw	r24, r0
    4cf8:	21 9f       	mul	r18, r17
    4cfa:	90 0d       	add	r25, r0
    4cfc:	11 24       	eor	r1, r1
    4cfe:	a6 01       	movw	r20, r12
    4d00:	48 1b       	sub	r20, r24
    4d02:	59 0b       	sbc	r21, r25
    4d04:	4b 87       	std	Y+11, r20	; 0x0b
    4d06:	5c 87       	std	Y+12, r21	; 0x0c

		g_tempStr[0] = '\0';
    4d08:	10 92 a9 45 	sts	0x45A9, r1	; 0x8045a9 <_ZL9g_tempStr>

		if(years)
    4d0c:	41 14       	cp	r4, r1
    4d0e:	51 04       	cpc	r5, r1
    4d10:	b1 f0       	breq	.+44     	; 0x4d3e <_Z14reportTimeTillmmPKcS0_+0x168>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    4d12:	5f 92       	push	r5
    4d14:	4f 92       	push	r4
    4d16:	8d e7       	ldi	r24, 0x7D	; 125
    4d18:	93 e4       	ldi	r25, 0x43	; 67
    4d1a:	9f 93       	push	r25
    4d1c:	8f 93       	push	r24
    4d1e:	89 ea       	ldi	r24, 0xA9	; 169
    4d20:	95 e4       	ldi	r25, 0x45	; 69
    4d22:	9f 93       	push	r25
    4d24:	8f 93       	push	r24
    4d26:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
			sb_send_string(g_tempStr);
    4d2a:	89 ea       	ldi	r24, 0xA9	; 169
    4d2c:	95 e4       	ldi	r25, 0x45	; 69
    4d2e:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    4d32:	0f 90       	pop	r0
    4d34:	0f 90       	pop	r0
    4d36:	0f 90       	pop	r0
    4d38:	0f 90       	pop	r0
    4d3a:	0f 90       	pop	r0
    4d3c:	0f 90       	pop	r0
		}

		if(days)
    4d3e:	23 28       	or	r2, r3
    4d40:	b1 f0       	breq	.+44     	; 0x4d6e <_Z14reportTimeTillmmPKcS0_+0x198>
		{
			sprintf(g_tempStr, "%d days ", days);
    4d42:	9f 92       	push	r9
    4d44:	8f 92       	push	r8
    4d46:	85 e8       	ldi	r24, 0x85	; 133
    4d48:	93 e4       	ldi	r25, 0x43	; 67
    4d4a:	9f 93       	push	r25
    4d4c:	8f 93       	push	r24
    4d4e:	89 ea       	ldi	r24, 0xA9	; 169
    4d50:	95 e4       	ldi	r25, 0x45	; 69
    4d52:	9f 93       	push	r25
    4d54:	8f 93       	push	r24
    4d56:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
			sb_send_string(g_tempStr);
    4d5a:	89 ea       	ldi	r24, 0xA9	; 169
    4d5c:	95 e4       	ldi	r25, 0x45	; 69
    4d5e:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    4d62:	0f 90       	pop	r0
    4d64:	0f 90       	pop	r0
    4d66:	0f 90       	pop	r0
    4d68:	0f 90       	pop	r0
    4d6a:	0f 90       	pop	r0
    4d6c:	0f 90       	pop	r0
		}

		if(hours)
    4d6e:	89 85       	ldd	r24, Y+9	; 0x09
    4d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d72:	89 2b       	or	r24, r25
    4d74:	c1 f0       	breq	.+48     	; 0x4da6 <_Z14reportTimeTillmmPKcS0_+0x1d0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    4d76:	9a 81       	ldd	r25, Y+2	; 0x02
    4d78:	9f 93       	push	r25
    4d7a:	e9 81       	ldd	r30, Y+1	; 0x01
    4d7c:	ef 93       	push	r30
    4d7e:	8e e8       	ldi	r24, 0x8E	; 142
    4d80:	93 e4       	ldi	r25, 0x43	; 67
    4d82:	9f 93       	push	r25
    4d84:	8f 93       	push	r24
    4d86:	89 ea       	ldi	r24, 0xA9	; 169
    4d88:	95 e4       	ldi	r25, 0x45	; 69
    4d8a:	9f 93       	push	r25
    4d8c:	8f 93       	push	r24
    4d8e:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
			sb_send_string(g_tempStr);
    4d92:	89 ea       	ldi	r24, 0xA9	; 169
    4d94:	95 e4       	ldi	r25, 0x45	; 69
    4d96:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    4d9a:	0f 90       	pop	r0
    4d9c:	0f 90       	pop	r0
    4d9e:	0f 90       	pop	r0
    4da0:	0f 90       	pop	r0
    4da2:	0f 90       	pop	r0
    4da4:	0f 90       	pop	r0
		}

		if(minutes)
    4da6:	01 2b       	or	r16, r17
    4da8:	c1 f0       	breq	.+48     	; 0x4dda <_Z14reportTimeTillmmPKcS0_+0x204>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    4daa:	fe 81       	ldd	r31, Y+6	; 0x06
    4dac:	ff 93       	push	r31
    4dae:	2d 81       	ldd	r18, Y+5	; 0x05
    4db0:	2f 93       	push	r18
    4db2:	86 e9       	ldi	r24, 0x96	; 150
    4db4:	93 e4       	ldi	r25, 0x43	; 67
    4db6:	9f 93       	push	r25
    4db8:	8f 93       	push	r24
    4dba:	89 ea       	ldi	r24, 0xA9	; 169
    4dbc:	95 e4       	ldi	r25, 0x45	; 69
    4dbe:	9f 93       	push	r25
    4dc0:	8f 93       	push	r24
    4dc2:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
			sb_send_string(g_tempStr);
    4dc6:	89 ea       	ldi	r24, 0xA9	; 169
    4dc8:	95 e4       	ldi	r25, 0x45	; 69
    4dca:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    4dce:	0f 90       	pop	r0
    4dd0:	0f 90       	pop	r0
    4dd2:	0f 90       	pop	r0
    4dd4:	0f 90       	pop	r0
    4dd6:	0f 90       	pop	r0
    4dd8:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    4dda:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ddc:	3f 93       	push	r19
    4dde:	4b 85       	ldd	r20, Y+11	; 0x0b
    4de0:	4f 93       	push	r20
    4de2:	8e e9       	ldi	r24, 0x9E	; 158
    4de4:	93 e4       	ldi	r25, 0x43	; 67
    4de6:	9f 93       	push	r25
    4de8:	8f 93       	push	r24
    4dea:	89 ea       	ldi	r24, 0xA9	; 169
    4dec:	95 e4       	ldi	r25, 0x45	; 69
    4dee:	9f 93       	push	r25
    4df0:	8f 93       	push	r24
    4df2:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
		sb_send_string(g_tempStr);
    4df6:	89 ea       	ldi	r24, 0xA9	; 169
    4df8:	95 e4       	ldi	r25, 0x45	; 69
    4dfa:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>

		sb_send_NewLine();
    4dfe:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <sb_send_NewLine>
		g_tempStr[0] = '\0';
    4e02:	e9 ea       	ldi	r30, 0xA9	; 169
    4e04:	f5 e4       	ldi	r31, 0x45	; 69
    4e06:	10 82       	st	Z, r1
    4e08:	0f 90       	pop	r0
    4e0a:	0f 90       	pop	r0
    4e0c:	0f 90       	pop	r0
    4e0e:	0f 90       	pop	r0
    4e10:	0f 90       	pop	r0
    4e12:	0f 90       	pop	r0
}


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	bool failure = false;
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	01 c0       	rjmp	.+2      	; 0x4e1a <_Z14reportTimeTillmmPKcS0_+0x244>

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4e18:	81 e0       	ldi	r24, 0x01	; 1
		sb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    4e1a:	2c 96       	adiw	r28, 0x0c	; 12
    4e1c:	cd bf       	out	0x3d, r28	; 61
    4e1e:	de bf       	out	0x3e, r29	; 62
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	ff 90       	pop	r15
    4e2a:	ef 90       	pop	r14
    4e2c:	df 90       	pop	r13
    4e2e:	cf 90       	pop	r12
    4e30:	bf 90       	pop	r11
    4e32:	af 90       	pop	r10
    4e34:	9f 90       	pop	r9
    4e36:	8f 90       	pop	r8
    4e38:	7f 90       	pop	r7
    4e3a:	6f 90       	pop	r6
    4e3c:	5f 90       	pop	r5
    4e3e:	4f 90       	pop	r4
    4e40:	3f 90       	pop	r3
    4e42:	2f 90       	pop	r2
    4e44:	08 95       	ret

00004e46 <_Z23clockConfigurationCheckv>:



ConfigurationState_t clockConfigurationCheck(void)
{
    4e46:	0f 93       	push	r16
    4e48:	1f 93       	push	r17
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
    4e4a:	80 91 39 46 	lds	r24, 0x4639	; 0x804639 <g_event_finish_epoch>
    4e4e:	90 91 3a 46 	lds	r25, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    4e52:	a0 91 3b 46 	lds	r26, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    4e56:	b0 91 3c 46 	lds	r27, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    4e5a:	81 15       	cp	r24, r1
    4e5c:	26 e6       	ldi	r18, 0x66	; 102
    4e5e:	92 07       	cpc	r25, r18
    4e60:	2e ee       	ldi	r18, 0xEE	; 238
    4e62:	a2 07       	cpc	r26, r18
    4e64:	2f e5       	ldi	r18, 0x5F	; 95
    4e66:	b2 07       	cpc	r27, r18
    4e68:	d8 f1       	brcs	.+118    	; 0x4ee0 <_Z23clockConfigurationCheckv+0x9a>
    4e6a:	40 91 35 46 	lds	r20, 0x4635	; 0x804635 <g_event_start_epoch>
    4e6e:	50 91 36 46 	lds	r21, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    4e72:	60 91 37 46 	lds	r22, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    4e76:	70 91 38 46 	lds	r23, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    4e7a:	41 15       	cp	r20, r1
    4e7c:	e6 e6       	ldi	r30, 0x66	; 102
    4e7e:	5e 07       	cpc	r21, r30
    4e80:	ee ee       	ldi	r30, 0xEE	; 238
    4e82:	6e 07       	cpc	r22, r30
    4e84:	ef e5       	ldi	r30, 0x5F	; 95
    4e86:	7e 07       	cpc	r23, r30
    4e88:	68 f1       	brcs	.+90     	; 0x4ee4 <_Z23clockConfigurationCheckv+0x9e>
    4e8a:	00 91 46 46 	lds	r16, 0x4646	; 0x804646 <g_current_epoch>
    4e8e:	10 91 47 46 	lds	r17, 0x4647	; 0x804647 <g_current_epoch+0x1>
    4e92:	20 91 48 46 	lds	r18, 0x4648	; 0x804648 <g_current_epoch+0x2>
    4e96:	30 91 49 46 	lds	r19, 0x4649	; 0x804649 <g_current_epoch+0x3>
    4e9a:	01 15       	cp	r16, r1
    4e9c:	e6 e6       	ldi	r30, 0x66	; 102
    4e9e:	1e 07       	cpc	r17, r30
    4ea0:	ee ee       	ldi	r30, 0xEE	; 238
    4ea2:	2e 07       	cpc	r18, r30
    4ea4:	ef e5       	ldi	r30, 0x5F	; 95
    4ea6:	3e 07       	cpc	r19, r30
    4ea8:	f8 f0       	brcs	.+62     	; 0x4ee8 <_Z23clockConfigurationCheckv+0xa2>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
    4eaa:	48 17       	cp	r20, r24
    4eac:	59 07       	cpc	r21, r25
    4eae:	6a 07       	cpc	r22, r26
    4eb0:	7b 07       	cpc	r23, r27
    4eb2:	e0 f4       	brcc	.+56     	; 0x4eec <_Z23clockConfigurationCheckv+0xa6>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
    4eb4:	80 17       	cp	r24, r16
    4eb6:	91 07       	cpc	r25, r17
    4eb8:	a2 07       	cpc	r26, r18
    4eba:	b3 07       	cpc	r27, r19
    4ebc:	c8 f0       	brcs	.+50     	; 0x4ef0 <_Z23clockConfigurationCheckv+0xaa>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_start_epoch)       /* Event should be running */
    4ebe:	40 17       	cp	r20, r16
    4ec0:	51 07       	cpc	r21, r17
    4ec2:	62 07       	cpc	r22, r18
    4ec4:	73 07       	cpc	r23, r19
    4ec6:	30 f4       	brcc	.+12     	; 0x4ed4 <_Z23clockConfigurationCheckv+0x8e>
	{
		if(g_transmissions_disabled)
    4ec8:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <g_transmissions_disabled>
    4ecc:	88 23       	and	r24, r24
    4ece:	91 f0       	breq	.+36     	; 0x4ef4 <_Z23clockConfigurationCheckv+0xae>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
    4ed0:	83 e0       	ldi	r24, 0x03	; 3
    4ed2:	13 c0       	rjmp	.+38     	; 0x4efa <_Z23clockConfigurationCheckv+0xb4>
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
		}
	}
	else if(!g_use_rtc_for_startstop)
    4ed4:	80 91 4a 46 	lds	r24, 0x464A	; 0x80464a <g_use_rtc_for_startstop>
    4ed8:	81 11       	cpse	r24, r1
    4eda:	0e c0       	rjmp	.+28     	; 0x4ef8 <_Z23clockConfigurationCheckv+0xb2>
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
    4edc:	84 e0       	ldi	r24, 0x04	; 4
    4ede:	0d c0       	rjmp	.+26     	; 0x4efa <_Z23clockConfigurationCheckv+0xb4>

ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
	{
		return(CONFIGURATION_ERROR);
    4ee0:	82 e0       	ldi	r24, 0x02	; 2
    4ee2:	0b c0       	rjmp	.+22     	; 0x4efa <_Z23clockConfigurationCheckv+0xb4>
    4ee4:	82 e0       	ldi	r24, 0x02	; 2
    4ee6:	09 c0       	rjmp	.+18     	; 0x4efa <_Z23clockConfigurationCheckv+0xb4>
    4ee8:	82 e0       	ldi	r24, 0x02	; 2
    4eea:	07 c0       	rjmp	.+14     	; 0x4efa <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
	{
		return(CONFIGURATION_ERROR);
    4eec:	82 e0       	ldi	r24, 0x02	; 2
    4eee:	05 c0       	rjmp	.+10     	; 0x4efa <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
	{
		return(CONFIGURATION_ERROR);
    4ef0:	82 e0       	ldi	r24, 0x02	; 2
    4ef2:	03 c0       	rjmp	.+6      	; 0x4efa <_Z23clockConfigurationCheckv+0xb4>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
		}
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
    4ef4:	85 e0       	ldi	r24, 0x05	; 5
    4ef6:	01 c0       	rjmp	.+2      	; 0x4efa <_Z23clockConfigurationCheckv+0xb4>
	else if(!g_use_rtc_for_startstop)
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
	}

	return(WAITING_FOR_START);  /* Future event hasn't started yet */
    4ef8:	81 e0       	ldi	r24, 0x01	; 1
}
    4efa:	1f 91       	pop	r17
    4efc:	0f 91       	pop	r16
    4efe:	08 95       	ret

00004f00 <_Z18reportConfigErrorsv>:

void reportConfigErrors(void)
{
	g_current_epoch = ds3231_get_epoch(null);
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    4f08:	60 93 46 46 	sts	0x4646, r22	; 0x804646 <g_current_epoch>
    4f0c:	70 93 47 46 	sts	0x4647, r23	; 0x804647 <g_current_epoch+0x1>
    4f10:	80 93 48 46 	sts	0x4648, r24	; 0x804648 <g_current_epoch+0x2>
    4f14:	90 93 49 46 	sts	0x4649, r25	; 0x804649 <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    4f18:	80 91 ff 45 	lds	r24, 0x45FF	; 0x8045ff <g_messages_text+0x15>
    4f1c:	81 11       	cpse	r24, r1
    4f1e:	04 c0       	rjmp	.+8      	; 0x4f28 <_Z18reportConfigErrorsv+0x28>
	{
		sb_send_string(TEXT_SET_ID_TXT);
    4f20:	85 ea       	ldi	r24, 0xA5	; 165
    4f22:	93 e4       	ldi	r25, 0x43	; 67
    4f24:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    4f28:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    4f2c:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    4f30:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    4f34:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    4f38:	81 15       	cp	r24, r1
    4f3a:	96 46       	sbci	r25, 0x66	; 102
    4f3c:	ae 4e       	sbci	r26, 0xEE	; 238
    4f3e:	bf 45       	sbci	r27, 0x5F	; 95
    4f40:	20 f4       	brcc	.+8      	; 0x4f4a <_Z18reportConfigErrorsv+0x4a>
	{
		sb_send_string(TEXT_SET_TIME_TXT);
    4f42:	86 ec       	ldi	r24, 0xC6	; 198
    4f44:	93 e4       	ldi	r25, 0x43	; 67
    4f46:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    4f4a:	40 91 39 46 	lds	r20, 0x4639	; 0x804639 <g_event_finish_epoch>
    4f4e:	50 91 3a 46 	lds	r21, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    4f52:	60 91 3b 46 	lds	r22, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    4f56:	70 91 3c 46 	lds	r23, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    4f5a:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <g_current_epoch>
    4f5e:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <g_current_epoch+0x1>
    4f62:	a0 91 48 46 	lds	r26, 0x4648	; 0x804648 <g_current_epoch+0x2>
    4f66:	b0 91 49 46 	lds	r27, 0x4649	; 0x804649 <g_current_epoch+0x3>
    4f6a:	48 17       	cp	r20, r24
    4f6c:	59 07       	cpc	r21, r25
    4f6e:	6a 07       	cpc	r22, r26
    4f70:	7b 07       	cpc	r23, r27
    4f72:	b0 f4       	brcc	.+44     	; 0x4fa0 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    4f74:	40 91 35 46 	lds	r20, 0x4635	; 0x804635 <g_event_start_epoch>
    4f78:	50 91 36 46 	lds	r21, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    4f7c:	60 91 37 46 	lds	r22, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    4f80:	70 91 38 46 	lds	r23, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    4f84:	48 17       	cp	r20, r24
    4f86:	59 07       	cpc	r21, r25
    4f88:	6a 07       	cpc	r22, r26
    4f8a:	7b 07       	cpc	r23, r27
    4f8c:	20 f4       	brcc	.+8      	; 0x4f96 <_Z18reportConfigErrorsv+0x96>
		{
			sb_send_string(TEXT_SET_START_TXT);
    4f8e:	8e ee       	ldi	r24, 0xEE	; 238
    4f90:	93 e4       	ldi	r25, 0x43	; 67
    4f92:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
		}

		sb_send_string(TEXT_SET_FINISH_TXT);
    4f96:	84 e1       	ldi	r24, 0x14	; 20
    4f98:	94 e4       	ldi	r25, 0x44	; 68
    4f9a:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    4f9e:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    4fa0:	40 91 35 46 	lds	r20, 0x4635	; 0x804635 <g_event_start_epoch>
    4fa4:	50 91 36 46 	lds	r21, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    4fa8:	60 91 37 46 	lds	r22, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    4fac:	70 91 38 46 	lds	r23, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    4fb0:	48 17       	cp	r20, r24
    4fb2:	59 07       	cpc	r21, r25
    4fb4:	6a 07       	cpc	r22, r26
    4fb6:	7b 07       	cpc	r23, r27
    4fb8:	70 f4       	brcc	.+28     	; 0x4fd6 <_Z18reportConfigErrorsv+0xd6>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    4fba:	41 15       	cp	r20, r1
    4fbc:	56 46       	sbci	r21, 0x66	; 102
    4fbe:	6e 4e       	sbci	r22, 0xEE	; 238
    4fc0:	7f 45       	sbci	r23, 0x5F	; 95
    4fc2:	28 f4       	brcc	.+10     	; 0x4fce <_Z18reportConfigErrorsv+0xce>
		{
			sb_send_string(TEXT_SET_START_TXT);
    4fc4:	8e ee       	ldi	r24, 0xEE	; 238
    4fc6:	93 e4       	ldi	r25, 0x43	; 67
    4fc8:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    4fcc:	08 95       	ret
		}
		else
		{
			sb_send_string((char*)"Event running...\n");
    4fce:	8b e3       	ldi	r24, 0x3B	; 59
    4fd0:	94 e4       	ldi	r25, 0x44	; 68
    4fd2:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <sb_send_string>
    4fd6:	08 95       	ret

00004fd8 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
    4fd8:	0f 93       	push	r16
    4fda:	1f 93       	push	r17
    4fdc:	cf 93       	push	r28
    4fde:	df 93       	push	r29
    4fe0:	ec 01       	movw	r28, r24
    4fe2:	8b 01       	movw	r16, r22
    4fe4:	01 97       	sbiw	r24, 0x01	; 1
    4fe6:	39 f4       	brne	.+14     	; 0x4ff6 <_Z41__static_initialization_and_destruction_0ii+0x1e>
    4fe8:	6f 3f       	cpi	r22, 0xFF	; 255
    4fea:	7f 4f       	sbci	r23, 0xFF	; 255
    4fec:	21 f4       	brne	.+8      	; 0x4ff6 <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile bool g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { false, false, false, false, false };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    4fee:	84 e3       	ldi	r24, 0x34	; 52
    4ff0:	96 e4       	ldi	r25, 0x46	; 70
    4ff2:	0e 94 32 30 	call	0x6064	; 0x6064 <_ZN13EepromManagerC1Ev>
    4ff6:	cd 2b       	or	r28, r29
    4ff8:	39 f4       	brne	.+14     	; 0x5008 <_Z41__static_initialization_and_destruction_0ii+0x30>
    4ffa:	0f 3f       	cpi	r16, 0xFF	; 255
    4ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ffe:	21 f4       	brne	.+8      	; 0x5008 <_Z41__static_initialization_and_destruction_0ii+0x30>
    5000:	84 e3       	ldi	r24, 0x34	; 52
    5002:	96 e4       	ldi	r25, 0x46	; 70
    5004:	0e 94 33 30 	call	0x6066	; 0x6066 <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    5008:	df 91       	pop	r29
    500a:	cf 91       	pop	r28
    500c:	1f 91       	pop	r17
    500e:	0f 91       	pop	r16
    5010:	08 95       	ret

00005012 <_GLOBAL__sub_I_g_battery_type>:
    5012:	6f ef       	ldi	r22, 0xFF	; 255
    5014:	7f ef       	ldi	r23, 0xFF	; 255
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_Z41__static_initialization_and_destruction_0ii>
    501e:	08 95       	ret

00005020 <_GLOBAL__sub_D_g_battery_type>:
    5020:	6f ef       	ldi	r22, 0xFF	; 255
    5022:	7f ef       	ldi	r23, 0xFF	; 255
    5024:	80 e0       	ldi	r24, 0x00	; 0
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_Z41__static_initialization_and_destruction_0ii>
    502c:	08 95       	ret

0000502e <_ZL9PORT_initv>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    502e:	e0 e6       	ldi	r30, 0x60	; 96
    5030:	f4 e0       	ldi	r31, 0x04	; 4
    5032:	82 89       	ldd	r24, Z+18	; 0x12
    5034:	88 7f       	andi	r24, 0xF8	; 248
    5036:	82 8b       	std	Z+18, r24	; 0x12
    5038:	82 89       	ldd	r24, Z+18	; 0x12
    503a:	84 60       	ori	r24, 0x04	; 4
    503c:	82 8b       	std	Z+18, r24	; 0x12
    503e:	83 89       	ldd	r24, Z+19	; 0x13
    5040:	88 7f       	andi	r24, 0xF8	; 248
    5042:	83 8b       	std	Z+19, r24	; 0x13
    5044:	83 89       	ldd	r24, Z+19	; 0x13
    5046:	84 60       	ori	r24, 0x04	; 4
    5048:	83 8b       	std	Z+19, r24	; 0x13
    504a:	84 89       	ldd	r24, Z+20	; 0x14
    504c:	88 7f       	andi	r24, 0xF8	; 248
    504e:	84 8b       	std	Z+20, r24	; 0x14
    5050:	84 89       	ldd	r24, Z+20	; 0x14
    5052:	84 60       	ori	r24, 0x04	; 4
    5054:	84 8b       	std	Z+20, r24	; 0x14
    5056:	85 89       	ldd	r24, Z+21	; 0x15
    5058:	88 7f       	andi	r24, 0xF8	; 248
    505a:	85 8b       	std	Z+21, r24	; 0x15
    505c:	85 89       	ldd	r24, Z+21	; 0x15
    505e:	84 60       	ori	r24, 0x04	; 4
    5060:	85 8b       	std	Z+21, r24	; 0x15
    5062:	82 89       	ldd	r24, Z+18	; 0x12
    5064:	87 7f       	andi	r24, 0xF7	; 247
    5066:	82 8b       	std	Z+18, r24	; 0x12
    5068:	83 89       	ldd	r24, Z+19	; 0x13
    506a:	87 7f       	andi	r24, 0xF7	; 247
    506c:	83 8b       	std	Z+19, r24	; 0x13
    506e:	84 89       	ldd	r24, Z+20	; 0x14
    5070:	87 7f       	andi	r24, 0xF7	; 247
    5072:	84 8b       	std	Z+20, r24	; 0x14
    5074:	85 89       	ldd	r24, Z+21	; 0x15
    5076:	87 7f       	andi	r24, 0xF7	; 247
    5078:	85 8b       	std	Z+21, r24	; 0x15
    507a:	08 95       	ret

0000507c <_ZL10VREF0_initv>:
    507c:	81 e0       	ldi	r24, 0x01	; 1
    507e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    5082:	08 95       	ret

00005084 <_ZL9ADC0_initb>:
    5084:	9a e0       	ldi	r25, 0x0A	; 10
    5086:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
    508a:	88 23       	and	r24, r24
    508c:	41 f0       	breq	.+16     	; 0x509e <_ZL9ADC0_initb+0x1a>
    508e:	e0 e0       	ldi	r30, 0x00	; 0
    5090:	f6 e0       	ldi	r31, 0x06	; 6
    5092:	83 e0       	ldi	r24, 0x03	; 3
    5094:	80 83       	st	Z, r24
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	84 87       	std	Z+12, r24	; 0x0c
    509a:	82 87       	std	Z+10, r24	; 0x0a
    509c:	08 95       	ret
    509e:	e0 e0       	ldi	r30, 0x00	; 0
    50a0:	f6 e0       	ldi	r31, 0x06	; 6
    50a2:	81 e0       	ldi	r24, 0x01	; 1
    50a4:	80 83       	st	Z, r24
    50a6:	14 86       	std	Z+12, r1	; 0x0c
    50a8:	08 95       	ret

000050aa <_ZL16ADC0_SYSTEM_initb>:
    50aa:	cf 93       	push	r28
    50ac:	c8 2f       	mov	r28, r24
    50ae:	0e 94 17 28 	call	0x502e	; 0x502e <_ZL9PORT_initv>
    50b2:	0e 94 3e 28 	call	0x507c	; 0x507c <_ZL10VREF0_initv>
    50b6:	8c 2f       	mov	r24, r28
    50b8:	0e 94 42 28 	call	0x5084	; 0x5084 <_ZL9ADC0_initb>
    50bc:	81 e0       	ldi	r24, 0x01	; 1
    50be:	80 93 60 46 	sts	0x4660, r24	; 0x804660 <_ZL17g_adc_initialized>
    50c2:	cf 91       	pop	r28
    50c4:	08 95       	ret

000050c6 <_ZL20ADC0_SYSTEM_shutdownv>:
    50c6:	e0 e0       	ldi	r30, 0x00	; 0
    50c8:	f6 e0       	ldi	r31, 0x06	; 6
    50ca:	14 86       	std	Z+12, r1	; 0x0c
    50cc:	10 82       	st	Z, r1
    50ce:	10 92 60 46 	sts	0x4660, r1	; 0x804660 <_ZL17g_adc_initialized>
    50d2:	08 95       	ret

000050d4 <_Z41__static_initialization_and_destruction_0ii>:
    50d4:	ef 92       	push	r14
    50d6:	ff 92       	push	r15
    50d8:	0f 93       	push	r16
    50da:	1f 93       	push	r17
    50dc:	cf 93       	push	r28
    50de:	df 93       	push	r29
    50e0:	ec 01       	movw	r28, r24
    50e2:	7b 01       	movw	r14, r22
    50e4:	01 97       	sbiw	r24, 0x01	; 1
    50e6:	79 f4       	brne	.+30     	; 0x5106 <_Z41__static_initialization_and_destruction_0ii+0x32>
    50e8:	6f 3f       	cpi	r22, 0xFF	; 255
    50ea:	7f 4f       	sbci	r23, 0xFF	; 255
    50ec:	61 f4       	brne	.+24     	; 0x5106 <_Z41__static_initialization_and_destruction_0ii+0x32>
    50ee:	00 e0       	ldi	r16, 0x00	; 0
    50f0:	10 e4       	ldi	r17, 0x40	; 64
    50f2:	2c eb       	ldi	r18, 0xBC	; 188
    50f4:	36 e4       	ldi	r19, 0x46	; 70
    50f6:	40 e0       	ldi	r20, 0x00	; 0
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	69 e4       	ldi	r22, 0x49	; 73
    50fc:	73 e4       	ldi	r23, 0x43	; 67
    50fe:	8f e5       	ldi	r24, 0x5F	; 95
    5100:	96 e4       	ldi	r25, 0x46	; 70
    5102:	0e 94 7f 33 	call	0x66fe	; 0x66fe <_ZN8GoertzelC1Eff>
    5106:	cd 2b       	or	r28, r29
    5108:	39 f4       	brne	.+14     	; 0x5118 <_Z41__static_initialization_and_destruction_0ii+0x44>
    510a:	ef 20       	and	r14, r15
    510c:	e0 94       	com	r14
    510e:	21 f4       	brne	.+8      	; 0x5118 <_Z41__static_initialization_and_destruction_0ii+0x44>
    5110:	8f e5       	ldi	r24, 0x5F	; 95
    5112:	96 e4       	ldi	r25, 0x46	; 70
    5114:	0e 94 cf 33 	call	0x679e	; 0x679e <_ZN8GoertzelD1Ev>
    5118:	df 91       	pop	r29
    511a:	cf 91       	pop	r28
    511c:	1f 91       	pop	r17
    511e:	0f 91       	pop	r16
    5120:	ff 90       	pop	r15
    5122:	ef 90       	pop	r14
    5124:	08 95       	ret

00005126 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
    5126:	83 30       	cpi	r24, 0x03	; 3
    5128:	c9 f0       	breq	.+50     	; 0x515c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
    512a:	28 f4       	brcc	.+10     	; 0x5136 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x10>
    512c:	81 30       	cpi	r24, 0x01	; 1
    512e:	41 f0       	breq	.+16     	; 0x5140 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x1a>
    5130:	82 30       	cpi	r24, 0x02	; 2
    5132:	69 f0       	breq	.+26     	; 0x514e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x28>
    5134:	28 c0       	rjmp	.+80     	; 0x5186 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    5136:	84 30       	cpi	r24, 0x04	; 4
    5138:	c1 f0       	breq	.+48     	; 0x516a <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x44>
    513a:	85 30       	cpi	r24, 0x05	; 5
    513c:	e9 f0       	breq	.+58     	; 0x5178 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x52>
    513e:	23 c0       	rjmp	.+70     	; 0x5186 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	0e 94 55 28 	call	0x50aa	; 0x50aa <_ZL16ADC0_SYSTEM_initb>
    5146:	82 e0       	ldi	r24, 0x02	; 2
    5148:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    514c:	08 95       	ret
    514e:	80 e0       	ldi	r24, 0x00	; 0
    5150:	0e 94 55 28 	call	0x50aa	; 0x50aa <_ZL16ADC0_SYSTEM_initb>
    5154:	83 e0       	ldi	r24, 0x03	; 3
    5156:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    515a:	08 95       	ret
    515c:	80 e0       	ldi	r24, 0x00	; 0
    515e:	0e 94 55 28 	call	0x50aa	; 0x50aa <_ZL16ADC0_SYSTEM_initb>
    5162:	84 e0       	ldi	r24, 0x04	; 4
    5164:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5168:	08 95       	ret
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	0e 94 55 28 	call	0x50aa	; 0x50aa <_ZL16ADC0_SYSTEM_initb>
    5170:	85 e0       	ldi	r24, 0x05	; 5
    5172:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5176:	08 95       	ret
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	0e 94 55 28 	call	0x50aa	; 0x50aa <_ZL16ADC0_SYSTEM_initb>
    517e:	82 e4       	ldi	r24, 0x42	; 66
    5180:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5184:	08 95       	ret
    5186:	0e 94 63 28 	call	0x50c6	; 0x50c6 <_ZL20ADC0_SYSTEM_shutdownv>
    518a:	08 95       	ret

0000518c <_Z9ADC0_readv>:
    518c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    5190:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    5194:	08 95       	ret

00005196 <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    5196:	1f 92       	push	r1
    5198:	0f 92       	push	r0
    519a:	0f b6       	in	r0, 0x3f	; 63
    519c:	0f 92       	push	r0
    519e:	11 24       	eor	r1, r1
    51a0:	0b b6       	in	r0, 0x3b	; 59
    51a2:	0f 92       	push	r0
    51a4:	2f 93       	push	r18
    51a6:	3f 93       	push	r19
    51a8:	4f 93       	push	r20
    51aa:	5f 93       	push	r21
    51ac:	6f 93       	push	r22
    51ae:	7f 93       	push	r23
    51b0:	8f 93       	push	r24
    51b2:	9f 93       	push	r25
    51b4:	af 93       	push	r26
    51b6:	bf 93       	push	r27
    51b8:	ef 93       	push	r30
    51ba:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    51bc:	0e 94 c6 28 	call	0x518c	; 0x518c <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    51c0:	bc 01       	movw	r22, r24
    51c2:	8f e5       	ldi	r24, 0x5F	; 95
    51c4:	96 e4       	ldi	r25, 0x46	; 70
    51c6:	0e 94 d6 33 	call	0x67ac	; 0x67ac <_ZN8Goertzel9DataPointEi>
    51ca:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    51cc:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    51d0:	ff 91       	pop	r31
    51d2:	ef 91       	pop	r30
    51d4:	bf 91       	pop	r27
    51d6:	af 91       	pop	r26
    51d8:	9f 91       	pop	r25
    51da:	8f 91       	pop	r24
    51dc:	7f 91       	pop	r23
    51de:	6f 91       	pop	r22
    51e0:	5f 91       	pop	r21
    51e2:	4f 91       	pop	r20
    51e4:	3f 91       	pop	r19
    51e6:	2f 91       	pop	r18
    51e8:	0f 90       	pop	r0
    51ea:	0b be       	out	0x3b, r0	; 59
    51ec:	0f 90       	pop	r0
    51ee:	0f be       	out	0x3f, r0	; 63
    51f0:	0f 90       	pop	r0
    51f2:	1f 90       	pop	r1
    51f4:	18 95       	reti

000051f6 <_GLOBAL__sub_I_g_activeADCChannel>:
    51f6:	6f ef       	ldi	r22, 0xFF	; 255
    51f8:	7f ef       	ldi	r23, 0xFF	; 255
    51fa:	81 e0       	ldi	r24, 0x01	; 1
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_Z41__static_initialization_and_destruction_0ii>
    5202:	08 95       	ret

00005204 <_GLOBAL__sub_D_g_activeADCChannel>:
    5204:	6f ef       	ldi	r22, 0xFF	; 255
    5206:	7f ef       	ldi	r23, 0xFF	; 255
    5208:	80 e0       	ldi	r24, 0x00	; 0
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_Z41__static_initialization_and_destruction_0ii>
    5210:	08 95       	ret

00005212 <_Z10fet_driverb>:
{
} //~binio

void fet_driver(bool state)
{
	if(state == ON)
    5212:	88 23       	and	r24, r24
    5214:	21 f0       	breq	.+8      	; 0x521e <_Z10fet_driverb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    5216:	81 b1       	in	r24, 0x01	; 1
    5218:	88 60       	ori	r24, 0x08	; 8
    521a:	81 b9       	out	0x01, r24	; 1
    521c:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    521e:	81 b1       	in	r24, 0x01	; 1
    5220:	87 7f       	andi	r24, 0xF7	; 247
    5222:	81 b9       	out	0x01, r24	; 1
    5224:	08 95       	ret

00005226 <_Z10wifi_powerb>:
}


void wifi_power(bool state)
{
	if(state == ON)
    5226:	88 23       	and	r24, r24
    5228:	21 f0       	breq	.+8      	; 0x5232 <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    522a:	81 b1       	in	r24, 0x01	; 1
    522c:	80 62       	ori	r24, 0x20	; 32
    522e:	81 b9       	out	0x01, r24	; 1
    5230:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5232:	81 b1       	in	r24, 0x01	; 1
    5234:	8f 7d       	andi	r24, 0xDF	; 223
    5236:	81 b9       	out	0x01, r24	; 1
    5238:	08 95       	ret

0000523a <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    523a:	88 23       	and	r24, r24
    523c:	21 f0       	breq	.+8      	; 0x5246 <_Z10wifi_resetb+0xc>
    523e:	81 b1       	in	r24, 0x01	; 1
    5240:	8f 7b       	andi	r24, 0xBF	; 191
    5242:	81 b9       	out	0x01, r24	; 1
    5244:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    5246:	81 b1       	in	r24, 0x01	; 1
    5248:	80 64       	ori	r24, 0x40	; 64
    524a:	81 b9       	out	0x01, r24	; 1
    524c:	08 95       	ret

0000524e <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    524e:	2e b1       	in	r18, 0x0e	; 14
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	22 0f       	add	r18, r18
    5254:	23 2f       	mov	r18, r19
    5256:	22 1f       	adc	r18, r18
    5258:	33 0b       	sbc	r19, r19
    525a:	31 95       	neg	r19
	}
}

bool wifiPresent(void)
{
	return(!PORTD_get_pin_level(WIFI_MODULE_DETECT));
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	23 2b       	or	r18, r19
    5260:	09 f0       	breq	.+2      	; 0x5264 <_Z11wifiPresentv+0x16>
    5262:	80 e0       	ldi	r24, 0x00	; 0
}
    5264:	08 95       	ret

00005266 <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    5266:	1f 92       	push	r1
    5268:	0f 92       	push	r0
    526a:	0f b6       	in	r0, 0x3f	; 63
    526c:	0f 92       	push	r0
    526e:	11 24       	eor	r1, r1
    5270:	8f 93       	push	r24
    5272:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    5274:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    5278:	88 23       	and	r24, r24
    527a:	4c f4       	brge	.+18     	; 0x528e <__vector_29+0x28>
	{
		count++;
    527c:	80 91 63 46 	lds	r24, 0x4663	; 0x804663 <_ZZ11__vector_29E5count>
    5280:	90 91 64 46 	lds	r25, 0x4664	; 0x804664 <_ZZ11__vector_29E5count+0x1>
    5284:	01 96       	adiw	r24, 0x01	; 1
    5286:	80 93 63 46 	sts	0x4663, r24	; 0x804663 <_ZZ11__vector_29E5count>
    528a:	90 93 64 46 	sts	0x4664, r25	; 0x804664 <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    528e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    5292:	84 ff       	sbrs	r24, 4
    5294:	09 c0       	rjmp	.+18     	; 0x52a8 <__vector_29+0x42>
	{
		count++;
    5296:	80 91 63 46 	lds	r24, 0x4663	; 0x804663 <_ZZ11__vector_29E5count>
    529a:	90 91 64 46 	lds	r25, 0x4664	; 0x804664 <_ZZ11__vector_29E5count+0x1>
    529e:	01 96       	adiw	r24, 0x01	; 1
    52a0:	80 93 63 46 	sts	0x4663, r24	; 0x804663 <_ZZ11__vector_29E5count>
    52a4:	90 93 64 46 	sts	0x4664, r25	; 0x804664 <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    52a8:	8f ef       	ldi	r24, 0xFF	; 255
    52aa:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    52ae:	9f 91       	pop	r25
    52b0:	8f 91       	pop	r24
    52b2:	0f 90       	pop	r0
    52b4:	0f be       	out	0x3f, r0	; 63
    52b6:	0f 90       	pop	r0
    52b8:	1f 90       	pop	r1
    52ba:	18 95       	reti

000052bc <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    52bc:	1f 92       	push	r1
    52be:	0f 92       	push	r0
    52c0:	0f b6       	in	r0, 0x3f	; 63
    52c2:	0f 92       	push	r0
    52c4:	11 24       	eor	r1, r1
    52c6:	8f 93       	push	r24
    52c8:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    52ca:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    52ce:	82 ff       	sbrs	r24, 2
    52d0:	09 c0       	rjmp	.+18     	; 0x52e4 <__vector_6+0x28>
	{
		count++;
    52d2:	80 91 61 46 	lds	r24, 0x4661	; 0x804661 <_ZZ10__vector_6E5count>
    52d6:	90 91 62 46 	lds	r25, 0x4662	; 0x804662 <_ZZ10__vector_6E5count+0x1>
    52da:	01 96       	adiw	r24, 0x01	; 1
    52dc:	80 93 61 46 	sts	0x4661, r24	; 0x804661 <_ZZ10__vector_6E5count>
    52e0:	90 93 62 46 	sts	0x4662, r25	; 0x804662 <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    52e4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    52e8:	84 ff       	sbrs	r24, 4
    52ea:	09 c0       	rjmp	.+18     	; 0x52fe <__vector_6+0x42>
	{
		count++;
    52ec:	80 91 61 46 	lds	r24, 0x4661	; 0x804661 <_ZZ10__vector_6E5count>
    52f0:	90 91 62 46 	lds	r25, 0x4662	; 0x804662 <_ZZ10__vector_6E5count+0x1>
    52f4:	01 96       	adiw	r24, 0x01	; 1
    52f6:	80 93 61 46 	sts	0x4661, r24	; 0x804661 <_ZZ10__vector_6E5count>
    52fa:	90 93 62 46 	sts	0x4662, r25	; 0x804662 <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    52fe:	8f ef       	ldi	r24, 0xFF	; 255
    5300:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    5304:	9f 91       	pop	r25
    5306:	8f 91       	pop	r24
    5308:	0f 90       	pop	r0
    530a:	0f be       	out	0x3f, r0	; 63
    530c:	0f 90       	pop	r0
    530e:	1f 90       	pop	r1
    5310:	18 95       	reti

00005312 <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    5312:	80 b1       	in	r24, 0x00	; 0
    5314:	8b 7f       	andi	r24, 0xFB	; 251
    5316:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5318:	e2 e1       	ldi	r30, 0x12	; 18
    531a:	f4 e0       	ldi	r31, 0x04	; 4
    531c:	80 81       	ld	r24, Z
    531e:	88 7f       	andi	r24, 0xF8	; 248
    5320:	82 60       	ori	r24, 0x02	; 2
    5322:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5324:	80 b1       	in	r24, 0x00	; 0
    5326:	88 60       	ori	r24, 0x08	; 8
    5328:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    532a:	81 b1       	in	r24, 0x01	; 1
    532c:	87 7f       	andi	r24, 0xF7	; 247
    532e:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    5330:	80 b1       	in	r24, 0x00	; 0
    5332:	8f 7e       	andi	r24, 0xEF	; 239
    5334:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5336:	e4 e1       	ldi	r30, 0x14	; 20
    5338:	f4 e0       	ldi	r31, 0x04	; 4
    533a:	80 81       	ld	r24, Z
    533c:	88 60       	ori	r24, 0x08	; 8
    533e:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5340:	80 81       	ld	r24, Z
    5342:	88 7f       	andi	r24, 0xF8	; 248
    5344:	83 60       	ori	r24, 0x03	; 3
    5346:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5348:	80 b1       	in	r24, 0x00	; 0
    534a:	80 62       	ori	r24, 0x20	; 32
    534c:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    534e:	81 b1       	in	r24, 0x01	; 1
    5350:	8f 7d       	andi	r24, 0xDF	; 223
    5352:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5354:	80 b1       	in	r24, 0x00	; 0
    5356:	80 64       	ori	r24, 0x40	; 64
    5358:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    535a:	81 b1       	in	r24, 0x01	; 1
    535c:	8f 7b       	andi	r24, 0xBF	; 191
    535e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5360:	80 b1       	in	r24, 0x00	; 0
    5362:	80 68       	ori	r24, 0x80	; 128
    5364:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5366:	81 b1       	in	r24, 0x01	; 1
    5368:	8f 77       	andi	r24, 0x7F	; 127
    536a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    536c:	84 b1       	in	r24, 0x04	; 4
    536e:	81 60       	ori	r24, 0x01	; 1
    5370:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5372:	85 b1       	in	r24, 0x05	; 5
    5374:	8e 7f       	andi	r24, 0xFE	; 254
    5376:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5378:	84 b1       	in	r24, 0x04	; 4
    537a:	82 60       	ori	r24, 0x02	; 2
    537c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    537e:	85 b1       	in	r24, 0x05	; 5
    5380:	8d 7f       	andi	r24, 0xFD	; 253
    5382:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5384:	84 b1       	in	r24, 0x04	; 4
    5386:	80 61       	ori	r24, 0x10	; 16
    5388:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    538a:	85 b1       	in	r24, 0x05	; 5
    538c:	8f 7e       	andi	r24, 0xEF	; 239
    538e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5390:	84 b1       	in	r24, 0x04	; 4
    5392:	80 62       	ori	r24, 0x20	; 32
    5394:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5396:	85 b1       	in	r24, 0x05	; 5
    5398:	8f 7d       	andi	r24, 0xDF	; 223
    539a:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    539c:	88 b1       	in	r24, 0x08	; 8
    539e:	8f 7e       	andi	r24, 0xEF	; 239
    53a0:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    53a2:	88 b1       	in	r24, 0x08	; 8
    53a4:	80 62       	ori	r24, 0x20	; 32
    53a6:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    53a8:	89 b1       	in	r24, 0x09	; 9
    53aa:	8f 7d       	andi	r24, 0xDF	; 223
    53ac:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    53ae:	88 b1       	in	r24, 0x08	; 8
    53b0:	80 64       	ori	r24, 0x40	; 64
    53b2:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    53b4:	89 b1       	in	r24, 0x09	; 9
    53b6:	8f 7b       	andi	r24, 0xBF	; 191
    53b8:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    53ba:	88 b1       	in	r24, 0x08	; 8
    53bc:	8f 77       	andi	r24, 0x7F	; 127
    53be:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    53c0:	e7 e5       	ldi	r30, 0x57	; 87
    53c2:	f4 e0       	ldi	r31, 0x04	; 4
    53c4:	80 81       	ld	r24, Z
    53c6:	88 60       	ori	r24, 0x08	; 8
    53c8:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    53ca:	80 81       	ld	r24, Z
    53cc:	88 7f       	andi	r24, 0xF8	; 248
    53ce:	83 60       	ori	r24, 0x03	; 3
    53d0:	80 83       	st	Z, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    53d2:	8c b1       	in	r24, 0x0c	; 12
    53d4:	8e 7f       	andi	r24, 0xFE	; 254
    53d6:	8c b9       	out	0x0c, r24	; 12
    53d8:	8c b1       	in	r24, 0x0c	; 12
    53da:	8d 7f       	andi	r24, 0xFD	; 253
    53dc:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    53de:	a1 e7       	ldi	r26, 0x71	; 113
    53e0:	b4 e0       	ldi	r27, 0x04	; 4
    53e2:	8c 91       	ld	r24, X
    53e4:	88 60       	ori	r24, 0x08	; 8
    53e6:	8c 93       	st	X, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    53e8:	8c 91       	ld	r24, X
    53ea:	88 7f       	andi	r24, 0xF8	; 248
    53ec:	83 60       	ori	r24, 0x03	; 3
    53ee:	8c 93       	st	X, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    53f0:	8c b1       	in	r24, 0x0c	; 12
    53f2:	8f 77       	andi	r24, 0x7F	; 127
    53f4:	8c b9       	out	0x0c, r24	; 12
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    53f6:	80 81       	ld	r24, Z
    53f8:	87 7f       	andi	r24, 0xF7	; 247
    53fa:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    53fc:	e0 e9       	ldi	r30, 0x90	; 144
    53fe:	f4 e0       	ldi	r31, 0x04	; 4
    5400:	80 81       	ld	r24, Z
    5402:	88 60       	ori	r24, 0x08	; 8
    5404:	80 83       	st	Z, r24
    5406:	e1 e9       	ldi	r30, 0x91	; 145
    5408:	f4 e0       	ldi	r31, 0x04	; 4
    540a:	80 81       	ld	r24, Z
    540c:	88 60       	ori	r24, 0x08	; 8
    540e:	80 83       	st	Z, r24
    5410:	e2 e9       	ldi	r30, 0x92	; 146
    5412:	f4 e0       	ldi	r31, 0x04	; 4
    5414:	80 81       	ld	r24, Z
    5416:	88 60       	ori	r24, 0x08	; 8
    5418:	80 83       	st	Z, r24
    541a:	e3 e9       	ldi	r30, 0x93	; 147
    541c:	f4 e0       	ldi	r31, 0x04	; 4
    541e:	80 81       	ld	r24, Z
    5420:	88 60       	ori	r24, 0x08	; 8
    5422:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    5424:	e2 eb       	ldi	r30, 0xB2	; 178
    5426:	f4 e0       	ldi	r31, 0x04	; 4
    5428:	80 81       	ld	r24, Z
    542a:	88 60       	ori	r24, 0x08	; 8
    542c:	80 83       	st	Z, r24
    542e:	e3 eb       	ldi	r30, 0xB3	; 179
    5430:	f4 e0       	ldi	r31, 0x04	; 4
    5432:	80 81       	ld	r24, Z
    5434:	88 60       	ori	r24, 0x08	; 8
    5436:	80 83       	st	Z, r24
    5438:	e4 eb       	ldi	r30, 0xB4	; 180
    543a:	f4 e0       	ldi	r31, 0x04	; 4
    543c:	80 81       	ld	r24, Z
    543e:	88 60       	ori	r24, 0x08	; 8
    5440:	80 83       	st	Z, r24
    5442:	e5 eb       	ldi	r30, 0xB5	; 181
    5444:	f4 e0       	ldi	r31, 0x04	; 4
    5446:	80 81       	ld	r24, Z
    5448:	88 60       	ori	r24, 0x08	; 8
    544a:	80 83       	st	Z, r24
    544c:	08 95       	ret

0000544e <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    544e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	08 95       	ret

00005456 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    5456:	44 e2       	ldi	r20, 0x24	; 36
    5458:	68 ed       	ldi	r22, 0xD8	; 216
    545a:	88 e6       	ldi	r24, 0x68	; 104
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    5462:	80 e0       	ldi	r24, 0x00	; 0
    5464:	08 95       	ret

00005466 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    5466:	78 94       	sei

	return 0;
}
    5468:	80 e0       	ldi	r24, 0x00	; 0
    546a:	08 95       	ret

0000546c <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    546c:	83 e0       	ldi	r24, 0x03	; 3
    546e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
    5472:	6a e0       	ldi	r22, 0x0A	; 10
    5474:	70 e0       	ldi	r23, 0x00	; 0
    5476:	80 e0       	ldi	r24, 0x00	; 0
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	0e 94 a9 43 	call	0x8752	; 0x8752 <util_delay_ms>
    547e:	81 11       	cpse	r24, r1
    5480:	f8 cf       	rjmp	.-16     	; 0x5472 <_ZL9VREF_initv+0x6>
}
    5482:	08 95       	ret

00005484 <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    5484:	28 2f       	mov	r18, r24
    5486:	22 95       	swap	r18
    5488:	22 0f       	add	r18, r18
    548a:	22 0f       	add	r18, r18
    548c:	20 7c       	andi	r18, 0xC0	; 192
    548e:	e0 ea       	ldi	r30, 0xA0	; 160
    5490:	f6 e0       	ldi	r31, 0x06	; 6
    5492:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    5494:	96 95       	lsr	r25
    5496:	87 95       	ror	r24
    5498:	96 95       	lsr	r25
    549a:	87 95       	ror	r24
    549c:	83 83       	std	Z+3, r24	; 0x03
    549e:	08 95       	ret

000054a0 <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    54a0:	0e 94 36 2a 	call	0x546c	; 0x546c <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    54a4:	e0 e6       	ldi	r30, 0x60	; 96
    54a6:	f4 e0       	ldi	r31, 0x04	; 4
    54a8:	86 89       	ldd	r24, Z+22	; 0x16
    54aa:	88 7f       	andi	r24, 0xF8	; 248
    54ac:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    54ae:	86 89       	ldd	r24, Z+22	; 0x16
    54b0:	84 60       	ori	r24, 0x04	; 4
    54b2:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    54b4:	86 89       	ldd	r24, Z+22	; 0x16
    54b6:	87 7f       	andi	r24, 0xF7	; 247
    54b8:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    54ba:	81 ec       	ldi	r24, 0xC1	; 193
    54bc:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    54c0:	80 e0       	ldi	r24, 0x00	; 0
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	0e 94 42 2a 	call	0x5484	; 0x5484 <_Z11DAC0_setValj>
    54c8:	08 95       	ret

000054ca <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	88 30       	cpi	r24, 0x08	; 8
    54ce:	48 f4       	brcc	.+18     	; 0x54e2 <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    54d0:	e8 2f       	mov	r30, r24
    54d2:	f0 e0       	ldi	r31, 0x00	; 0
    54d4:	e0 5f       	subi	r30, 0xF0	; 240
    54d6:	fb 4f       	sbci	r31, 0xFB	; 251
    54d8:	90 81       	ld	r25, Z
    54da:	98 60       	ori	r25, 0x08	; 8
    54dc:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    54de:	8f 5f       	subi	r24, 0xFF	; 255
    54e0:	f5 cf       	rjmp	.-22     	; 0x54cc <mcu_init+0x2>
    54e2:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    54e4:	88 30       	cpi	r24, 0x08	; 8
    54e6:	48 f4       	brcc	.+18     	; 0x54fa <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    54e8:	e8 2f       	mov	r30, r24
    54ea:	f0 e0       	ldi	r31, 0x00	; 0
    54ec:	e0 5d       	subi	r30, 0xD0	; 208
    54ee:	fb 4f       	sbci	r31, 0xFB	; 251
    54f0:	90 81       	ld	r25, Z
    54f2:	98 60       	ori	r25, 0x08	; 8
    54f4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    54f6:	8f 5f       	subi	r24, 0xFF	; 255
    54f8:	f5 cf       	rjmp	.-22     	; 0x54e4 <mcu_init+0x1a>
    54fa:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    54fc:	88 30       	cpi	r24, 0x08	; 8
    54fe:	48 f4       	brcc	.+18     	; 0x5512 <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5500:	e8 2f       	mov	r30, r24
    5502:	f0 e0       	ldi	r31, 0x00	; 0
    5504:	e0 5b       	subi	r30, 0xB0	; 176
    5506:	fb 4f       	sbci	r31, 0xFB	; 251
    5508:	90 81       	ld	r25, Z
    550a:	98 60       	ori	r25, 0x08	; 8
    550c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    550e:	8f 5f       	subi	r24, 0xFF	; 255
    5510:	f5 cf       	rjmp	.-22     	; 0x54fc <mcu_init+0x32>
    5512:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5514:	88 30       	cpi	r24, 0x08	; 8
    5516:	48 f4       	brcc	.+18     	; 0x552a <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5518:	e8 2f       	mov	r30, r24
    551a:	f0 e0       	ldi	r31, 0x00	; 0
    551c:	e0 59       	subi	r30, 0x90	; 144
    551e:	fb 4f       	sbci	r31, 0xFB	; 251
    5520:	90 81       	ld	r25, Z
    5522:	98 60       	ori	r25, 0x08	; 8
    5524:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5526:	8f 5f       	subi	r24, 0xFF	; 255
    5528:	f5 cf       	rjmp	.-22     	; 0x5514 <mcu_init+0x4a>
    552a:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    552c:	88 30       	cpi	r24, 0x08	; 8
    552e:	48 f4       	brcc	.+18     	; 0x5542 <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5530:	e8 2f       	mov	r30, r24
    5532:	f0 e0       	ldi	r31, 0x00	; 0
    5534:	e0 57       	subi	r30, 0x70	; 112
    5536:	fb 4f       	sbci	r31, 0xFB	; 251
    5538:	90 81       	ld	r25, Z
    553a:	98 60       	ori	r25, 0x08	; 8
    553c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    553e:	8f 5f       	subi	r24, 0xFF	; 255
    5540:	f5 cf       	rjmp	.-22     	; 0x552c <mcu_init+0x62>
    5542:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5544:	88 30       	cpi	r24, 0x08	; 8
    5546:	48 f4       	brcc	.+18     	; 0x555a <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5548:	e8 2f       	mov	r30, r24
    554a:	f0 e0       	ldi	r31, 0x00	; 0
    554c:	e0 55       	subi	r30, 0x50	; 80
    554e:	fb 4f       	sbci	r31, 0xFB	; 251
    5550:	90 81       	ld	r25, Z
    5552:	98 60       	ori	r25, 0x08	; 8
    5554:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5556:	8f 5f       	subi	r24, 0xFF	; 255
    5558:	f5 cf       	rjmp	.-22     	; 0x5544 <mcu_init+0x7a>
    555a:	08 95       	ret

0000555c <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    555c:	0e 94 65 2a 	call	0x54ca	; 0x54ca <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    5560:	0e 94 2b 2a 	call	0x5456	; 0x5456 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
    5564:	0e 94 8c 43 	call	0x8718	; 0x8718 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    5568:	0e 94 33 2a 	call	0x5466	; 0x5466 <CPUINT_init>
	BINIO_init();
    556c:	0e 94 89 29 	call	0x5312	; 0x5312 <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5570:	88 b1       	in	r24, 0x08	; 8
    5572:	80 64       	ori	r24, 0x40	; 64
    5574:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    5576:	89 b1       	in	r24, 0x09	; 9
    5578:	80 64       	ori	r24, 0x40	; 64
    557a:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    557c:	0e 94 8a 43 	call	0x8714	; 0x8714 <SLPCTRL_init>
	
	DAC0_init();
    5580:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z9DAC0_initv>

	linkbus_init(LB_BAUD, LINKBUS_USART);
    5584:	44 e0       	ldi	r20, 0x04	; 4
    5586:	60 e8       	ldi	r22, 0x80	; 128
    5588:	75 e2       	ldi	r23, 0x25	; 37
    558a:	80 e0       	ldi	r24, 0x00	; 0
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_Z12linkbus_initm14USART_Number_t>
	serialbus_init(SB_BAUD, SERIALBUS_USART);
    5592:	41 e0       	ldi	r20, 0x01	; 1
    5594:	60 e8       	ldi	r22, 0x80	; 128
    5596:	75 e2       	ldi	r23, 0x25	; 37
    5598:	80 e0       	ldi	r24, 0x00	; 0
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	0e 94 5f 3b 	call	0x76be	; 0x76be <serialbus_init>

	BOD_init();
    55a0:	0e 94 27 2a 	call	0x544e	; 0x544e <BOD_init>
    55a4:	08 95       	ret

000055a6 <_Z7bcd2dech>:
				*val = second + 10 * second10 + 60 * (int32_t)minute + 600 * (int32_t)minute10 +  3600 * (int32_t)hour + 36000 * (int32_t)hour10;
			}
		}
		
		return(failure);
	}
    55a6:	28 2f       	mov	r18, r24
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	35 95       	asr	r19
    55ac:	27 95       	ror	r18
    55ae:	35 95       	asr	r19
    55b0:	27 95       	ror	r18
    55b2:	35 95       	asr	r19
    55b4:	27 95       	ror	r18
    55b6:	35 95       	asr	r19
    55b8:	27 95       	ror	r18
    55ba:	22 0f       	add	r18, r18
    55bc:	92 2f       	mov	r25, r18
    55be:	99 0f       	add	r25, r25
    55c0:	99 0f       	add	r25, r25
    55c2:	29 0f       	add	r18, r25
    55c4:	8f 70       	andi	r24, 0x0F	; 15
    55c6:	82 0f       	add	r24, r18
    55c8:	08 95       	ret

000055ca <_Z7dec2bcdh>:
    55ca:	2d ec       	ldi	r18, 0xCD	; 205
    55cc:	82 9f       	mul	r24, r18
    55ce:	21 2d       	mov	r18, r1
    55d0:	11 24       	eor	r1, r1
    55d2:	92 2f       	mov	r25, r18
    55d4:	96 95       	lsr	r25
    55d6:	96 95       	lsr	r25
    55d8:	96 95       	lsr	r25
    55da:	99 0f       	add	r25, r25
    55dc:	39 2f       	mov	r19, r25
    55de:	33 0f       	add	r19, r19
    55e0:	33 0f       	add	r19, r19
    55e2:	93 0f       	add	r25, r19
    55e4:	89 1b       	sub	r24, r25
    55e6:	98 2f       	mov	r25, r24
    55e8:	26 95       	lsr	r18
    55ea:	26 95       	lsr	r18
    55ec:	26 95       	lsr	r18
    55ee:	80 e1       	ldi	r24, 0x10	; 16
    55f0:	28 9f       	mul	r18, r24
    55f2:	90 01       	movw	r18, r0
    55f4:	11 24       	eor	r1, r1
    55f6:	89 2f       	mov	r24, r25
    55f8:	82 2b       	or	r24, r18
    55fa:	08 95       	ret

000055fc <_Z8char2bcdPc>:
    55fc:	fc 01       	movw	r30, r24
    55fe:	20 81       	ld	r18, Z
    5600:	81 81       	ldd	r24, Z+1	; 0x01
    5602:	f0 e1       	ldi	r31, 0x10	; 16
    5604:	2f 9f       	mul	r18, r31
    5606:	80 0d       	add	r24, r0
    5608:	11 24       	eor	r1, r1
    560a:	80 53       	subi	r24, 0x30	; 48
    560c:	08 95       	ret

0000560e <_Z14epoch_from_ltmP2tm>:
    560e:	cf 92       	push	r12
    5610:	df 92       	push	r13
    5612:	ef 92       	push	r14
    5614:	ff 92       	push	r15
    5616:	fc 01       	movw	r30, r24
    5618:	80 81       	ld	r24, Z
    561a:	21 81       	ldd	r18, Z+1	; 0x01
    561c:	08 2e       	mov	r0, r24
    561e:	00 0c       	add	r0, r0
    5620:	99 0b       	sbc	r25, r25
    5622:	ac 01       	movw	r20, r24
    5624:	3c e3       	ldi	r19, 0x3C	; 60
    5626:	23 02       	muls	r18, r19
    5628:	40 0d       	add	r20, r0
    562a:	51 1d       	adc	r21, r1
    562c:	11 24       	eor	r1, r1
    562e:	a2 81       	ldd	r26, Z+2	; 0x02
    5630:	0a 2e       	mov	r0, r26
    5632:	00 0c       	add	r0, r0
    5634:	bb 0b       	sbc	r27, r27
    5636:	20 e1       	ldi	r18, 0x10	; 16
    5638:	3e e0       	ldi	r19, 0x0E	; 14
    563a:	0e 94 d6 4b 	call	0x97ac	; 0x97ac <__usmulhisi3>
    563e:	6a 01       	movw	r12, r20
    5640:	55 0f       	add	r21, r21
    5642:	ee 08       	sbc	r14, r14
    5644:	ff 08       	sbc	r15, r15
    5646:	c6 0e       	add	r12, r22
    5648:	d7 1e       	adc	r13, r23
    564a:	e8 1e       	adc	r14, r24
    564c:	f9 1e       	adc	r15, r25
    564e:	a0 85       	ldd	r26, Z+8	; 0x08
    5650:	b1 85       	ldd	r27, Z+9	; 0x09
    5652:	20 e8       	ldi	r18, 0x80	; 128
    5654:	31 e5       	ldi	r19, 0x51	; 81
    5656:	41 e0       	ldi	r20, 0x01	; 1
    5658:	50 e0       	ldi	r21, 0x00	; 0
    565a:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    565e:	c6 0e       	add	r12, r22
    5660:	d7 1e       	adc	r13, r23
    5662:	e8 1e       	adc	r14, r24
    5664:	f9 1e       	adc	r15, r25
    5666:	06 80       	ldd	r0, Z+6	; 0x06
    5668:	f7 81       	ldd	r31, Z+7	; 0x07
    566a:	e0 2d       	mov	r30, r0
    566c:	df 01       	movw	r26, r30
    566e:	a6 54       	subi	r26, 0x46	; 70
    5670:	b1 09       	sbc	r27, r1
    5672:	20 e8       	ldi	r18, 0x80	; 128
    5674:	33 e3       	ldi	r19, 0x33	; 51
    5676:	41 ee       	ldi	r20, 0xE1	; 225
    5678:	51 e0       	ldi	r21, 0x01	; 1
    567a:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    567e:	c6 0e       	add	r12, r22
    5680:	d7 1e       	adc	r13, r23
    5682:	e8 1e       	adc	r14, r24
    5684:	f9 1e       	adc	r15, r25
    5686:	cf 01       	movw	r24, r30
    5688:	85 54       	subi	r24, 0x45	; 69
    568a:	91 09       	sbc	r25, r1
    568c:	dc 01       	movw	r26, r24
    568e:	0a f4       	brpl	.+2      	; 0x5692 <_Z14epoch_from_ltmP2tm+0x84>
    5690:	13 96       	adiw	r26, 0x03	; 3
    5692:	b5 95       	asr	r27
    5694:	a7 95       	ror	r26
    5696:	b5 95       	asr	r27
    5698:	a7 95       	ror	r26
    569a:	20 e8       	ldi	r18, 0x80	; 128
    569c:	31 e5       	ldi	r19, 0x51	; 81
    569e:	41 e0       	ldi	r20, 0x01	; 1
    56a0:	50 e0       	ldi	r21, 0x00	; 0
    56a2:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    56a6:	c6 0e       	add	r12, r22
    56a8:	d7 1e       	adc	r13, r23
    56aa:	e8 1e       	adc	r14, r24
    56ac:	f9 1e       	adc	r15, r25
    56ae:	cf 01       	movw	r24, r30
    56b0:	01 97       	sbiw	r24, 0x01	; 1
    56b2:	64 e6       	ldi	r22, 0x64	; 100
    56b4:	70 e0       	ldi	r23, 0x00	; 0
    56b6:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
    56ba:	db 01       	movw	r26, r22
    56bc:	20 e8       	ldi	r18, 0x80	; 128
    56be:	3e ea       	ldi	r19, 0xAE	; 174
    56c0:	4e ef       	ldi	r20, 0xFE	; 254
    56c2:	5f ef       	ldi	r21, 0xFF	; 255
    56c4:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    56c8:	c6 0e       	add	r12, r22
    56ca:	d7 1e       	adc	r13, r23
    56cc:	e8 1e       	adc	r14, r24
    56ce:	f9 1e       	adc	r15, r25
    56d0:	cf 01       	movw	r24, r30
    56d2:	85 5d       	subi	r24, 0xD5	; 213
    56d4:	9e 4f       	sbci	r25, 0xFE	; 254
    56d6:	60 e9       	ldi	r22, 0x90	; 144
    56d8:	71 e0       	ldi	r23, 0x01	; 1
    56da:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
    56de:	db 01       	movw	r26, r22
    56e0:	20 e8       	ldi	r18, 0x80	; 128
    56e2:	31 e5       	ldi	r19, 0x51	; 81
    56e4:	41 e0       	ldi	r20, 0x01	; 1
    56e6:	50 e0       	ldi	r21, 0x00	; 0
    56e8:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    56ec:	6c 0d       	add	r22, r12
    56ee:	7d 1d       	adc	r23, r13
    56f0:	8e 1d       	adc	r24, r14
    56f2:	9f 1d       	adc	r25, r15
    56f4:	ff 90       	pop	r15
    56f6:	ef 90       	pop	r14
    56f8:	df 90       	pop	r13
    56fa:	cf 90       	pop	r12
    56fc:	08 95       	ret

000056fe <ds3231_get_epoch>:
    56fe:	4f 92       	push	r4
    5700:	5f 92       	push	r5
    5702:	6f 92       	push	r6
    5704:	7f 92       	push	r7
    5706:	8f 92       	push	r8
    5708:	9f 92       	push	r9
    570a:	af 92       	push	r10
    570c:	bf 92       	push	r11
    570e:	cf 92       	push	r12
    5710:	df 92       	push	r13
    5712:	ef 92       	push	r14
    5714:	ff 92       	push	r15
    5716:	0f 93       	push	r16
    5718:	1f 93       	push	r17
    571a:	cf 93       	push	r28
    571c:	df 93       	push	r29
    571e:	cd b7       	in	r28, 0x3d	; 61
    5720:	de b7       	in	r29, 0x3e	; 62
    5722:	63 97       	sbiw	r28, 0x13	; 19
    5724:	cd bf       	out	0x3d, r28	; 61
    5726:	de bf       	out	0x3e, r29	; 62
    5728:	7c 01       	movw	r14, r24
    572a:	fe 01       	movw	r30, r28
    572c:	31 96       	adiw	r30, 0x01	; 1
    572e:	87 e0       	ldi	r24, 0x07	; 7
    5730:	df 01       	movw	r26, r30
    5732:	1d 92       	st	X+, r1
    5734:	8a 95       	dec	r24
    5736:	e9 f7       	brne	.-6      	; 0x5732 <ds3231_get_epoch+0x34>
    5738:	8a e0       	ldi	r24, 0x0A	; 10
    573a:	1f ef       	ldi	r17, 0xFF	; 255
    573c:	18 0f       	add	r17, r24
    573e:	88 23       	and	r24, r24
    5740:	81 f0       	breq	.+32     	; 0x5762 <ds3231_get_epoch+0x64>
    5742:	27 e0       	ldi	r18, 0x07	; 7
    5744:	ae 01       	movw	r20, r28
    5746:	4f 5f       	subi	r20, 0xFF	; 255
    5748:	5f 4f       	sbci	r21, 0xFF	; 255
    574a:	60 e0       	ldi	r22, 0x00	; 0
    574c:	80 ed       	ldi	r24, 0xD0	; 208
    574e:	0e 94 c1 34 	call	0x6982	; 0x6982 <I2C_0_GetData>
    5752:	01 e0       	ldi	r16, 0x01	; 1
    5754:	87 30       	cpi	r24, 0x07	; 7
    5756:	09 f4       	brne	.+2      	; 0x575a <ds3231_get_epoch+0x5c>
    5758:	00 e0       	ldi	r16, 0x00	; 0
    575a:	87 30       	cpi	r24, 0x07	; 7
    575c:	21 f0       	breq	.+8      	; 0x5766 <ds3231_get_epoch+0x68>
    575e:	91 e0       	ldi	r25, 0x01	; 1
    5760:	03 c0       	rjmp	.+6      	; 0x5768 <ds3231_get_epoch+0x6a>
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	01 c0       	rjmp	.+2      	; 0x5768 <ds3231_get_epoch+0x6a>
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	81 2f       	mov	r24, r17
    576a:	91 11       	cpse	r25, r1
    576c:	e6 cf       	rjmp	.-52     	; 0x573a <ds3231_get_epoch+0x3c>
    576e:	01 11       	cpse	r16, r1
    5770:	f3 c0       	rjmp	.+486    	; 0x5958 <ds3231_get_epoch+0x25a>
    5772:	fe 01       	movw	r30, r28
    5774:	38 96       	adiw	r30, 0x08	; 8
    5776:	8c e0       	ldi	r24, 0x0C	; 12
    5778:	df 01       	movw	r26, r30
    577a:	1d 92       	st	X+, r1
    577c:	8a 95       	dec	r24
    577e:	e9 f7       	brne	.-6      	; 0x577a <ds3231_get_epoch+0x7c>
    5780:	2f 81       	ldd	r18, Y+7	; 0x07
    5782:	82 2f       	mov	r24, r18
    5784:	8f 70       	andi	r24, 0x0F	; 15
    5786:	a8 2e       	mov	r10, r24
    5788:	b1 2c       	mov	r11, r1
    578a:	c5 01       	movw	r24, r10
    578c:	8c 59       	subi	r24, 0x9C	; 156
    578e:	9f 4f       	sbci	r25, 0xFF	; 255
    5790:	22 95       	swap	r18
    5792:	2f 70       	andi	r18, 0x0F	; 15
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	59 01       	movw	r10, r18
    5798:	aa 0c       	add	r10, r10
    579a:	bb 1c       	adc	r11, r11
    579c:	22 0f       	add	r18, r18
    579e:	33 1f       	adc	r19, r19
    57a0:	22 0f       	add	r18, r18
    57a2:	33 1f       	adc	r19, r19
    57a4:	22 0f       	add	r18, r18
    57a6:	33 1f       	adc	r19, r19
    57a8:	2a 0d       	add	r18, r10
    57aa:	3b 1d       	adc	r19, r11
    57ac:	5c 01       	movw	r10, r24
    57ae:	a2 0e       	add	r10, r18
    57b0:	b3 1e       	adc	r11, r19
    57b2:	65 01       	movw	r12, r10
    57b4:	b4 e9       	ldi	r27, 0x94	; 148
    57b6:	cb 1a       	sub	r12, r27
    57b8:	b8 ef       	ldi	r27, 0xF8	; 248
    57ba:	db 0a       	sbc	r13, r27
    57bc:	8e 81       	ldd	r24, Y+6	; 0x06
    57be:	98 2f       	mov	r25, r24
    57c0:	9f 70       	andi	r25, 0x0F	; 15
    57c2:	82 95       	swap	r24
    57c4:	8f 70       	andi	r24, 0x0F	; 15
    57c6:	88 0f       	add	r24, r24
    57c8:	98 2e       	mov	r9, r24
    57ca:	99 0c       	add	r9, r9
    57cc:	99 0c       	add	r9, r9
    57ce:	89 0d       	add	r24, r9
    57d0:	98 2e       	mov	r9, r24
    57d2:	99 0e       	add	r9, r25
    57d4:	ed 81       	ldd	r30, Y+5	; 0x05
    57d6:	8e 2f       	mov	r24, r30
    57d8:	8f 70       	andi	r24, 0x0F	; 15
    57da:	e2 95       	swap	r30
    57dc:	ef 70       	andi	r30, 0x0F	; 15
    57de:	ee 0f       	add	r30, r30
    57e0:	8e 2e       	mov	r8, r30
    57e2:	88 0c       	add	r8, r8
    57e4:	88 0c       	add	r8, r8
    57e6:	e8 0d       	add	r30, r8
    57e8:	8e 2e       	mov	r8, r30
    57ea:	88 0e       	add	r8, r24
    57ec:	11 e0       	ldi	r17, 0x01	; 1
    57ee:	19 15       	cp	r17, r9
    57f0:	60 f4       	brcc	.+24     	; 0x580a <ds3231_get_epoch+0x10c>
    57f2:	61 2f       	mov	r22, r17
    57f4:	c6 01       	movw	r24, r12
    57f6:	0e 94 35 02 	call	0x46a	; 0x46a <month_length>
    57fa:	28 89       	ldd	r18, Y+16	; 0x10
    57fc:	39 89       	ldd	r19, Y+17	; 0x11
    57fe:	28 0f       	add	r18, r24
    5800:	31 1d       	adc	r19, r1
    5802:	28 8b       	std	Y+16, r18	; 0x10
    5804:	39 8b       	std	Y+17, r19	; 0x11
    5806:	1f 5f       	subi	r17, 0xFF	; 255
    5808:	f2 cf       	rjmp	.-28     	; 0x57ee <ds3231_get_epoch+0xf0>
    580a:	e8 2d       	mov	r30, r8
    580c:	88 0c       	add	r8, r8
    580e:	ff 0b       	sbc	r31, r31
    5810:	31 97       	sbiw	r30, 0x01	; 1
    5812:	88 89       	ldd	r24, Y+16	; 0x10
    5814:	99 89       	ldd	r25, Y+17	; 0x11
    5816:	e8 0f       	add	r30, r24
    5818:	f9 1f       	adc	r31, r25
    581a:	29 81       	ldd	r18, Y+1	; 0x01
    581c:	42 2f       	mov	r20, r18
    581e:	42 95       	swap	r20
    5820:	4f 70       	andi	r20, 0x0F	; 15
    5822:	44 0f       	add	r20, r20
    5824:	94 2f       	mov	r25, r20
    5826:	99 0f       	add	r25, r25
    5828:	99 0f       	add	r25, r25
    582a:	84 2f       	mov	r24, r20
    582c:	89 0f       	add	r24, r25
    582e:	42 2f       	mov	r20, r18
    5830:	4f 70       	andi	r20, 0x0F	; 15
    5832:	48 0f       	add	r20, r24
    5834:	3a 81       	ldd	r19, Y+2	; 0x02
    5836:	23 2f       	mov	r18, r19
    5838:	22 95       	swap	r18
    583a:	2f 70       	andi	r18, 0x0F	; 15
    583c:	22 0f       	add	r18, r18
    583e:	92 2f       	mov	r25, r18
    5840:	99 0f       	add	r25, r25
    5842:	99 0f       	add	r25, r25
    5844:	82 2f       	mov	r24, r18
    5846:	89 0f       	add	r24, r25
    5848:	23 2f       	mov	r18, r19
    584a:	2f 70       	andi	r18, 0x0F	; 15
    584c:	28 0f       	add	r18, r24
    584e:	3b 81       	ldd	r19, Y+3	; 0x03
    5850:	53 2f       	mov	r21, r19
    5852:	50 72       	andi	r21, 0x20	; 32
    5854:	83 2f       	mov	r24, r19
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	95 95       	asr	r25
    585a:	87 95       	ror	r24
    585c:	95 95       	asr	r25
    585e:	87 95       	ror	r24
    5860:	95 95       	asr	r25
    5862:	87 95       	ror	r24
    5864:	95 95       	asr	r25
    5866:	87 95       	ror	r24
    5868:	81 70       	andi	r24, 0x01	; 1
    586a:	88 0f       	add	r24, r24
    586c:	a8 2f       	mov	r26, r24
    586e:	aa 0f       	add	r26, r26
    5870:	aa 0f       	add	r26, r26
    5872:	8a 0f       	add	r24, r26
    5874:	a3 2f       	mov	r26, r19
    5876:	af 70       	andi	r26, 0x0F	; 15
    5878:	a8 0f       	add	r26, r24
    587a:	36 ff       	sbrs	r19, 6
    587c:	04 c0       	rjmp	.+8      	; 0x5886 <ds3231_get_epoch+0x188>
    587e:	55 23       	and	r21, r21
    5880:	21 f0       	breq	.+8      	; 0x588a <ds3231_get_epoch+0x18c>
    5882:	a4 5f       	subi	r26, 0xF4	; 244
    5884:	02 c0       	rjmp	.+4      	; 0x588a <ds3231_get_epoch+0x18c>
    5886:	51 11       	cpse	r21, r1
    5888:	ac 5e       	subi	r26, 0xEC	; 236
    588a:	04 2e       	mov	r0, r20
    588c:	00 0c       	add	r0, r0
    588e:	55 0b       	sbc	r21, r21
    5890:	8c e3       	ldi	r24, 0x3C	; 60
    5892:	28 02       	muls	r18, r24
    5894:	40 0d       	add	r20, r0
    5896:	51 1d       	adc	r21, r1
    5898:	11 24       	eor	r1, r1
    589a:	0a 2e       	mov	r0, r26
    589c:	00 0c       	add	r0, r0
    589e:	bb 0b       	sbc	r27, r27
    58a0:	20 e1       	ldi	r18, 0x10	; 16
    58a2:	3e e0       	ldi	r19, 0x0E	; 14
    58a4:	0e 94 d6 4b 	call	0x97ac	; 0x97ac <__usmulhisi3>
    58a8:	2a 01       	movw	r4, r20
    58aa:	55 0f       	add	r21, r21
    58ac:	66 08       	sbc	r6, r6
    58ae:	77 08       	sbc	r7, r7
    58b0:	46 0e       	add	r4, r22
    58b2:	57 1e       	adc	r5, r23
    58b4:	68 1e       	adc	r6, r24
    58b6:	79 1e       	adc	r7, r25
    58b8:	df 01       	movw	r26, r30
    58ba:	20 e8       	ldi	r18, 0x80	; 128
    58bc:	31 e5       	ldi	r19, 0x51	; 81
    58be:	41 e0       	ldi	r20, 0x01	; 1
    58c0:	50 e0       	ldi	r21, 0x00	; 0
    58c2:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    58c6:	46 0e       	add	r4, r22
    58c8:	57 1e       	adc	r5, r23
    58ca:	68 1e       	adc	r6, r24
    58cc:	79 1e       	adc	r7, r25
    58ce:	d5 01       	movw	r26, r10
    58d0:	a6 54       	subi	r26, 0x46	; 70
    58d2:	b1 09       	sbc	r27, r1
    58d4:	20 e8       	ldi	r18, 0x80	; 128
    58d6:	33 e3       	ldi	r19, 0x33	; 51
    58d8:	41 ee       	ldi	r20, 0xE1	; 225
    58da:	51 e0       	ldi	r21, 0x01	; 1
    58dc:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    58e0:	46 0e       	add	r4, r22
    58e2:	57 1e       	adc	r5, r23
    58e4:	68 1e       	adc	r6, r24
    58e6:	79 1e       	adc	r7, r25
    58e8:	c5 01       	movw	r24, r10
    58ea:	85 54       	subi	r24, 0x45	; 69
    58ec:	91 09       	sbc	r25, r1
    58ee:	dc 01       	movw	r26, r24
    58f0:	0a f4       	brpl	.+2      	; 0x58f4 <ds3231_get_epoch+0x1f6>
    58f2:	13 96       	adiw	r26, 0x03	; 3
    58f4:	b5 95       	asr	r27
    58f6:	a7 95       	ror	r26
    58f8:	b5 95       	asr	r27
    58fa:	a7 95       	ror	r26
    58fc:	20 e8       	ldi	r18, 0x80	; 128
    58fe:	31 e5       	ldi	r19, 0x51	; 81
    5900:	41 e0       	ldi	r20, 0x01	; 1
    5902:	50 e0       	ldi	r21, 0x00	; 0
    5904:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    5908:	46 0e       	add	r4, r22
    590a:	57 1e       	adc	r5, r23
    590c:	68 1e       	adc	r6, r24
    590e:	79 1e       	adc	r7, r25
    5910:	c5 01       	movw	r24, r10
    5912:	01 97       	sbiw	r24, 0x01	; 1
    5914:	64 e6       	ldi	r22, 0x64	; 100
    5916:	70 e0       	ldi	r23, 0x00	; 0
    5918:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
    591c:	db 01       	movw	r26, r22
    591e:	20 e8       	ldi	r18, 0x80	; 128
    5920:	3e ea       	ldi	r19, 0xAE	; 174
    5922:	4e ef       	ldi	r20, 0xFE	; 254
    5924:	5f ef       	ldi	r21, 0xFF	; 255
    5926:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    592a:	46 0e       	add	r4, r22
    592c:	57 1e       	adc	r5, r23
    592e:	68 1e       	adc	r6, r24
    5930:	79 1e       	adc	r7, r25
    5932:	c5 01       	movw	r24, r10
    5934:	85 5d       	subi	r24, 0xD5	; 213
    5936:	9e 4f       	sbci	r25, 0xFE	; 254
    5938:	60 e9       	ldi	r22, 0x90	; 144
    593a:	71 e0       	ldi	r23, 0x01	; 1
    593c:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__divmodhi4>
    5940:	db 01       	movw	r26, r22
    5942:	20 e8       	ldi	r18, 0x80	; 128
    5944:	31 e5       	ldi	r19, 0x51	; 81
    5946:	41 e0       	ldi	r20, 0x01	; 1
    5948:	50 e0       	ldi	r21, 0x00	; 0
    594a:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <__mulshisi3>
    594e:	64 0d       	add	r22, r4
    5950:	75 1d       	adc	r23, r5
    5952:	86 1d       	adc	r24, r6
    5954:	97 1d       	adc	r25, r7
    5956:	03 c0       	rjmp	.+6      	; 0x595e <ds3231_get_epoch+0x260>
    5958:	60 e0       	ldi	r22, 0x00	; 0
    595a:	70 e0       	ldi	r23, 0x00	; 0
    595c:	cb 01       	movw	r24, r22
    595e:	e1 14       	cp	r14, r1
    5960:	f1 04       	cpc	r15, r1
    5962:	39 f0       	breq	.+14     	; 0x5972 <ds3231_get_epoch+0x274>
    5964:	00 23       	and	r16, r16
    5966:	11 f0       	breq	.+4      	; 0x596c <ds3231_get_epoch+0x26e>
    5968:	2c ef       	ldi	r18, 0xFC	; 252
    596a:	01 c0       	rjmp	.+2      	; 0x596e <ds3231_get_epoch+0x270>
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	d7 01       	movw	r26, r14
    5970:	2c 93       	st	X, r18
    5972:	63 96       	adiw	r28, 0x13	; 19
    5974:	cd bf       	out	0x3d, r28	; 61
    5976:	de bf       	out	0x3e, r29	; 62
    5978:	df 91       	pop	r29
    597a:	cf 91       	pop	r28
    597c:	1f 91       	pop	r17
    597e:	0f 91       	pop	r16
    5980:	ff 90       	pop	r15
    5982:	ef 90       	pop	r14
    5984:	df 90       	pop	r13
    5986:	cf 90       	pop	r12
    5988:	bf 90       	pop	r11
    598a:	af 90       	pop	r10
    598c:	9f 90       	pop	r9
    598e:	8f 90       	pop	r8
    5990:	7f 90       	pop	r7
    5992:	6f 90       	pop	r6
    5994:	5f 90       	pop	r5
    5996:	4f 90       	pop	r4
    5998:	08 95       	ret

0000599a <RTC_String2Epoch>:
    599a:	7f 92       	push	r7
    599c:	8f 92       	push	r8
    599e:	9f 92       	push	r9
    59a0:	af 92       	push	r10
    59a2:	bf 92       	push	r11
    59a4:	cf 92       	push	r12
    59a6:	df 92       	push	r13
    59a8:	ef 92       	push	r14
    59aa:	ff 92       	push	r15
    59ac:	0f 93       	push	r16
    59ae:	1f 93       	push	r17
    59b0:	cf 93       	push	r28
    59b2:	df 93       	push	r29
    59b4:	cd b7       	in	r28, 0x3d	; 61
    59b6:	de b7       	in	r29, 0x3e	; 62
    59b8:	2c 97       	sbiw	r28, 0x0c	; 12
    59ba:	cd bf       	out	0x3d, r28	; 61
    59bc:	de bf       	out	0x3e, r29	; 62
    59be:	6c 01       	movw	r12, r24
    59c0:	8b 01       	movw	r16, r22
    59c2:	fe 01       	movw	r30, r28
    59c4:	31 96       	adiw	r30, 0x01	; 1
    59c6:	8c e0       	ldi	r24, 0x0C	; 12
    59c8:	df 01       	movw	r26, r30
    59ca:	1d 92       	st	X+, r1
    59cc:	8a 95       	dec	r24
    59ce:	e9 f7       	brne	.-6      	; 0x59ca <RTC_String2Epoch+0x30>
    59d0:	61 15       	cp	r22, r1
    59d2:	71 05       	cpc	r23, r1
    59d4:	09 f4       	brne	.+2      	; 0x59d8 <RTC_String2Epoch+0x3e>
    59d6:	63 c0       	rjmp	.+198    	; 0x5a9e <RTC_String2Epoch+0x104>
    59d8:	cb 01       	movw	r24, r22
    59da:	0a 96       	adiw	r24, 0x0a	; 10
    59dc:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    59e0:	a8 2e       	mov	r10, r24
    59e2:	c8 01       	movw	r24, r16
    59e4:	08 96       	adiw	r24, 0x08	; 8
    59e6:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    59ea:	b8 2e       	mov	r11, r24
    59ec:	c8 01       	movw	r24, r16
    59ee:	06 96       	adiw	r24, 0x06	; 6
    59f0:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    59f4:	f8 2e       	mov	r15, r24
    59f6:	c8 01       	movw	r24, r16
    59f8:	04 96       	adiw	r24, 0x04	; 4
    59fa:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    59fe:	88 2e       	mov	r8, r24
    5a00:	c8 01       	movw	r24, r16
    5a02:	02 96       	adiw	r24, 0x02	; 2
    5a04:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    5a08:	78 2e       	mov	r7, r24
    5a0a:	c8 01       	movw	r24, r16
    5a0c:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    5a10:	18 2f       	mov	r17, r24
    5a12:	8f 2d       	mov	r24, r15
    5a14:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <_Z7bcd2dech>
    5a18:	98 2e       	mov	r9, r24
    5a1a:	81 2f       	mov	r24, r17
    5a1c:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <_Z7bcd2dech>
    5a20:	e8 2e       	mov	r14, r24
    5a22:	f1 2c       	mov	r15, r1
    5a24:	c7 01       	movw	r24, r14
    5a26:	8c 59       	subi	r24, 0x9C	; 156
    5a28:	9f 4f       	sbci	r25, 0xFF	; 255
    5a2a:	8f 83       	std	Y+7, r24	; 0x07
    5a2c:	98 87       	std	Y+8, r25	; 0x08
    5a2e:	b0 e3       	ldi	r27, 0x30	; 48
    5a30:	eb 1a       	sub	r14, r27
    5a32:	b8 ef       	ldi	r27, 0xF8	; 248
    5a34:	fb 0a       	sbc	r15, r27
    5a36:	87 2d       	mov	r24, r7
    5a38:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <_Z7bcd2dech>
    5a3c:	08 2f       	mov	r16, r24
    5a3e:	8f ef       	ldi	r24, 0xFF	; 255
    5a40:	80 0f       	add	r24, r16
    5a42:	8e 83       	std	Y+6, r24	; 0x06
    5a44:	88 2d       	mov	r24, r8
    5a46:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <_Z7bcd2dech>
    5a4a:	8c 83       	std	Y+4, r24	; 0x04
    5a4c:	11 e0       	ldi	r17, 0x01	; 1
    5a4e:	10 17       	cp	r17, r16
    5a50:	60 f4       	brcc	.+24     	; 0x5a6a <RTC_String2Epoch+0xd0>
    5a52:	61 2f       	mov	r22, r17
    5a54:	c7 01       	movw	r24, r14
    5a56:	0e 94 35 02 	call	0x46a	; 0x46a <month_length>
    5a5a:	29 85       	ldd	r18, Y+9	; 0x09
    5a5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a5e:	28 0f       	add	r18, r24
    5a60:	31 1d       	adc	r19, r1
    5a62:	29 87       	std	Y+9, r18	; 0x09
    5a64:	3a 87       	std	Y+10, r19	; 0x0a
    5a66:	1f 5f       	subi	r17, 0xFF	; 255
    5a68:	f2 cf       	rjmp	.-28     	; 0x5a4e <RTC_String2Epoch+0xb4>
    5a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a6c:	08 2e       	mov	r0, r24
    5a6e:	00 0c       	add	r0, r0
    5a70:	99 0b       	sbc	r25, r25
    5a72:	01 97       	sbiw	r24, 0x01	; 1
    5a74:	29 85       	ldd	r18, Y+9	; 0x09
    5a76:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a78:	82 0f       	add	r24, r18
    5a7a:	93 1f       	adc	r25, r19
    5a7c:	89 87       	std	Y+9, r24	; 0x09
    5a7e:	9a 87       	std	Y+10, r25	; 0x0a
    5a80:	8a 2d       	mov	r24, r10
    5a82:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <_Z7bcd2dech>
    5a86:	18 2f       	mov	r17, r24
    5a88:	8b 2d       	mov	r24, r11
    5a8a:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <_Z7bcd2dech>
    5a8e:	9b 82       	std	Y+3, r9	; 0x03
    5a90:	8a 83       	std	Y+2, r24	; 0x02
    5a92:	19 83       	std	Y+1, r17	; 0x01
    5a94:	ce 01       	movw	r24, r28
    5a96:	01 96       	adiw	r24, 0x01	; 1
    5a98:	0e 94 07 2b 	call	0x560e	; 0x560e <_Z14epoch_from_ltmP2tm>
    5a9c:	04 c0       	rjmp	.+8      	; 0x5aa6 <RTC_String2Epoch+0x10c>
    5a9e:	80 e0       	ldi	r24, 0x00	; 0
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <ds3231_get_epoch>
    5aa6:	c1 14       	cp	r12, r1
    5aa8:	d1 04       	cpc	r13, r1
    5aaa:	49 f0       	breq	.+18     	; 0x5abe <RTC_String2Epoch+0x124>
    5aac:	21 e0       	ldi	r18, 0x01	; 1
    5aae:	61 15       	cp	r22, r1
    5ab0:	71 05       	cpc	r23, r1
    5ab2:	81 05       	cpc	r24, r1
    5ab4:	91 05       	cpc	r25, r1
    5ab6:	09 f0       	breq	.+2      	; 0x5aba <RTC_String2Epoch+0x120>
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
    5aba:	f6 01       	movw	r30, r12
    5abc:	20 83       	st	Z, r18
    5abe:	2c 96       	adiw	r28, 0x0c	; 12
    5ac0:	cd bf       	out	0x3d, r28	; 61
    5ac2:	de bf       	out	0x3e, r29	; 62
    5ac4:	df 91       	pop	r29
    5ac6:	cf 91       	pop	r28
    5ac8:	1f 91       	pop	r17
    5aca:	0f 91       	pop	r16
    5acc:	ff 90       	pop	r15
    5ace:	ef 90       	pop	r14
    5ad0:	df 90       	pop	r13
    5ad2:	cf 90       	pop	r12
    5ad4:	bf 90       	pop	r11
    5ad6:	af 90       	pop	r10
    5ad8:	9f 90       	pop	r9
    5ada:	8f 90       	pop	r8
    5adc:	7f 90       	pop	r7
    5ade:	08 95       	ret

00005ae0 <ds3231_get_temp>:
    5ae0:	ef 92       	push	r14
    5ae2:	ff 92       	push	r15
    5ae4:	1f 93       	push	r17
    5ae6:	cf 93       	push	r28
    5ae8:	df 93       	push	r29
    5aea:	00 d0       	rcall	.+0      	; 0x5aec <ds3231_get_temp+0xc>
    5aec:	cd b7       	in	r28, 0x3d	; 61
    5aee:	de b7       	in	r29, 0x3e	; 62
    5af0:	7c 01       	movw	r14, r24
    5af2:	19 82       	std	Y+1, r1	; 0x01
    5af4:	1a 82       	std	Y+2, r1	; 0x02
    5af6:	8a e0       	ldi	r24, 0x0A	; 10
    5af8:	1f ef       	ldi	r17, 0xFF	; 255
    5afa:	18 0f       	add	r17, r24
    5afc:	88 23       	and	r24, r24
    5afe:	81 f0       	breq	.+32     	; 0x5b20 <ds3231_get_temp+0x40>
    5b00:	22 e0       	ldi	r18, 0x02	; 2
    5b02:	ae 01       	movw	r20, r28
    5b04:	4f 5f       	subi	r20, 0xFF	; 255
    5b06:	5f 4f       	sbci	r21, 0xFF	; 255
    5b08:	61 e1       	ldi	r22, 0x11	; 17
    5b0a:	80 ed       	ldi	r24, 0xD0	; 208
    5b0c:	0e 94 c1 34 	call	0x6982	; 0x6982 <I2C_0_GetData>
    5b10:	21 e0       	ldi	r18, 0x01	; 1
    5b12:	82 30       	cpi	r24, 0x02	; 2
    5b14:	09 f4       	brne	.+2      	; 0x5b18 <ds3231_get_temp+0x38>
    5b16:	20 e0       	ldi	r18, 0x00	; 0
    5b18:	82 30       	cpi	r24, 0x02	; 2
    5b1a:	21 f0       	breq	.+8      	; 0x5b24 <ds3231_get_temp+0x44>
    5b1c:	91 e0       	ldi	r25, 0x01	; 1
    5b1e:	03 c0       	rjmp	.+6      	; 0x5b26 <ds3231_get_temp+0x46>
    5b20:	90 e0       	ldi	r25, 0x00	; 0
    5b22:	01 c0       	rjmp	.+2      	; 0x5b26 <ds3231_get_temp+0x46>
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	81 2f       	mov	r24, r17
    5b28:	91 11       	cpse	r25, r1
    5b2a:	e6 cf       	rjmp	.-52     	; 0x5af8 <ds3231_get_temp+0x18>
    5b2c:	21 11       	cpse	r18, r1
    5b2e:	09 c0       	rjmp	.+18     	; 0x5b42 <ds3231_get_temp+0x62>
    5b30:	89 81       	ldd	r24, Y+1	; 0x01
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	98 2f       	mov	r25, r24
    5b36:	88 27       	eor	r24, r24
    5b38:	3a 81       	ldd	r19, Y+2	; 0x02
    5b3a:	83 2b       	or	r24, r19
    5b3c:	f7 01       	movw	r30, r14
    5b3e:	80 83       	st	Z, r24
    5b40:	91 83       	std	Z+1, r25	; 0x01
    5b42:	82 2f       	mov	r24, r18
    5b44:	0f 90       	pop	r0
    5b46:	0f 90       	pop	r0
    5b48:	df 91       	pop	r29
    5b4a:	cf 91       	pop	r28
    5b4c:	1f 91       	pop	r17
    5b4e:	ff 90       	pop	r15
    5b50:	ef 90       	pop	r14
    5b52:	08 95       	ret

00005b54 <ds3231_set_date_time_arducon>:
    5b54:	ff 92       	push	r15
    5b56:	0f 93       	push	r16
    5b58:	1f 93       	push	r17
    5b5a:	cf 93       	push	r28
    5b5c:	df 93       	push	r29
    5b5e:	cd b7       	in	r28, 0x3d	; 61
    5b60:	de b7       	in	r29, 0x3e	; 62
    5b62:	27 97       	sbiw	r28, 0x07	; 7
    5b64:	cd bf       	out	0x3d, r28	; 61
    5b66:	de bf       	out	0x3e, r29	; 62
    5b68:	fe 01       	movw	r30, r28
    5b6a:	31 96       	adiw	r30, 0x01	; 1
    5b6c:	27 e0       	ldi	r18, 0x07	; 7
    5b6e:	df 01       	movw	r26, r30
    5b70:	1d 92       	st	X+, r1
    5b72:	2a 95       	dec	r18
    5b74:	e9 f7       	brne	.-6      	; 0x5b70 <ds3231_set_date_time_arducon+0x1c>
    5b76:	00 97       	sbiw	r24, 0x00	; 0
    5b78:	09 f4       	brne	.+2      	; 0x5b7c <ds3231_set_date_time_arducon+0x28>
    5b7a:	3f c0       	rjmp	.+126    	; 0x5bfa <ds3231_set_date_time_arducon+0xa6>
    5b7c:	f6 2e       	mov	r15, r22
    5b7e:	8c 01       	movw	r16, r24
    5b80:	0a 96       	adiw	r24, 0x0a	; 10
    5b82:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    5b86:	89 83       	std	Y+1, r24	; 0x01
    5b88:	c8 01       	movw	r24, r16
    5b8a:	08 96       	adiw	r24, 0x08	; 8
    5b8c:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    5b90:	8a 83       	std	Y+2, r24	; 0x02
    5b92:	c8 01       	movw	r24, r16
    5b94:	06 96       	adiw	r24, 0x06	; 6
    5b96:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    5b9a:	8b 83       	std	Y+3, r24	; 0x03
    5b9c:	c8 01       	movw	r24, r16
    5b9e:	04 96       	adiw	r24, 0x04	; 4
    5ba0:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    5ba4:	8d 83       	std	Y+5, r24	; 0x05
    5ba6:	c8 01       	movw	r24, r16
    5ba8:	02 96       	adiw	r24, 0x02	; 2
    5baa:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    5bae:	8e 83       	std	Y+6, r24	; 0x06
    5bb0:	c8 01       	movw	r24, r16
    5bb2:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <_Z8char2bcdPc>
    5bb6:	8f 83       	std	Y+7, r24	; 0x07
    5bb8:	31 e0       	ldi	r19, 0x01	; 1
    5bba:	9a e0       	ldi	r25, 0x0A	; 10
    5bbc:	1f ef       	ldi	r17, 0xFF	; 255
    5bbe:	19 0f       	add	r17, r25
    5bc0:	99 23       	and	r25, r25
    5bc2:	a1 f0       	breq	.+40     	; 0x5bec <ds3231_set_date_time_arducon+0x98>
    5bc4:	6f 2d       	mov	r22, r15
    5bc6:	66 0f       	add	r22, r22
    5bc8:	66 0f       	add	r22, r22
    5bca:	66 0f       	add	r22, r22
    5bcc:	6f 19       	sub	r22, r15
    5bce:	27 e0       	ldi	r18, 0x07	; 7
    5bd0:	ae 01       	movw	r20, r28
    5bd2:	4f 5f       	subi	r20, 0xFF	; 255
    5bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5bd6:	80 ed       	ldi	r24, 0xD0	; 208
    5bd8:	0e 94 13 35 	call	0x6a26	; 0x6a26 <I2C_0_SendData>
    5bdc:	31 e0       	ldi	r19, 0x01	; 1
    5bde:	87 30       	cpi	r24, 0x07	; 7
    5be0:	09 f4       	brne	.+2      	; 0x5be4 <ds3231_set_date_time_arducon+0x90>
    5be2:	30 e0       	ldi	r19, 0x00	; 0
    5be4:	87 30       	cpi	r24, 0x07	; 7
    5be6:	21 f0       	breq	.+8      	; 0x5bf0 <ds3231_set_date_time_arducon+0x9c>
    5be8:	21 e0       	ldi	r18, 0x01	; 1
    5bea:	03 c0       	rjmp	.+6      	; 0x5bf2 <ds3231_set_date_time_arducon+0x9e>
    5bec:	20 e0       	ldi	r18, 0x00	; 0
    5bee:	01 c0       	rjmp	.+2      	; 0x5bf2 <ds3231_set_date_time_arducon+0x9e>
    5bf0:	20 e0       	ldi	r18, 0x00	; 0
    5bf2:	91 2f       	mov	r25, r17
    5bf4:	21 11       	cpse	r18, r1
    5bf6:	e2 cf       	rjmp	.-60     	; 0x5bbc <ds3231_set_date_time_arducon+0x68>
    5bf8:	01 c0       	rjmp	.+2      	; 0x5bfc <ds3231_set_date_time_arducon+0xa8>
    5bfa:	31 e0       	ldi	r19, 0x01	; 1
    5bfc:	83 2f       	mov	r24, r19
    5bfe:	27 96       	adiw	r28, 0x07	; 7
    5c00:	cd bf       	out	0x3d, r28	; 61
    5c02:	de bf       	out	0x3e, r29	; 62
    5c04:	df 91       	pop	r29
    5c06:	cf 91       	pop	r28
    5c08:	1f 91       	pop	r17
    5c0a:	0f 91       	pop	r16
    5c0c:	ff 90       	pop	r15
    5c0e:	08 95       	ret

00005c10 <ds3231_set_date_time>:
    5c10:	0f 93       	push	r16
    5c12:	1f 93       	push	r17
    5c14:	cf 93       	push	r28
    5c16:	df 93       	push	r29
    5c18:	cd b7       	in	r28, 0x3d	; 61
    5c1a:	de b7       	in	r29, 0x3e	; 62
    5c1c:	27 97       	sbiw	r28, 0x07	; 7
    5c1e:	cd bf       	out	0x3d, r28	; 61
    5c20:	de bf       	out	0x3e, r29	; 62
    5c22:	fc 01       	movw	r30, r24
    5c24:	06 2f       	mov	r16, r22
    5c26:	81 e0       	ldi	r24, 0x01	; 1
    5c28:	8c 83       	std	Y+4, r24	; 0x04
    5c2a:	82 89       	ldd	r24, Z+18	; 0x12
    5c2c:	20 ed       	ldi	r18, 0xD0	; 208
    5c2e:	28 0f       	add	r18, r24
    5c30:	91 89       	ldd	r25, Z+17	; 0x11
    5c32:	89 2f       	mov	r24, r25
    5c34:	90 e0       	ldi	r25, 0x00	; 0
    5c36:	c0 97       	sbiw	r24, 0x30	; 48
    5c38:	82 95       	swap	r24
    5c3a:	92 95       	swap	r25
    5c3c:	90 7f       	andi	r25, 0xF0	; 240
    5c3e:	98 27       	eor	r25, r24
    5c40:	80 7f       	andi	r24, 0xF0	; 240
    5c42:	98 27       	eor	r25, r24
    5c44:	82 2b       	or	r24, r18
    5c46:	89 83       	std	Y+1, r24	; 0x01
    5c48:	87 85       	ldd	r24, Z+15	; 0x0f
    5c4a:	20 ed       	ldi	r18, 0xD0	; 208
    5c4c:	28 0f       	add	r18, r24
    5c4e:	96 85       	ldd	r25, Z+14	; 0x0e
    5c50:	89 2f       	mov	r24, r25
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	c0 97       	sbiw	r24, 0x30	; 48
    5c56:	82 95       	swap	r24
    5c58:	92 95       	swap	r25
    5c5a:	90 7f       	andi	r25, 0xF0	; 240
    5c5c:	98 27       	eor	r25, r24
    5c5e:	80 7f       	andi	r24, 0xF0	; 240
    5c60:	98 27       	eor	r25, r24
    5c62:	82 2b       	or	r24, r18
    5c64:	8a 83       	std	Y+2, r24	; 0x02
    5c66:	84 85       	ldd	r24, Z+12	; 0x0c
    5c68:	20 ed       	ldi	r18, 0xD0	; 208
    5c6a:	28 0f       	add	r18, r24
    5c6c:	93 85       	ldd	r25, Z+11	; 0x0b
    5c6e:	89 2f       	mov	r24, r25
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	c0 97       	sbiw	r24, 0x30	; 48
    5c74:	82 95       	swap	r24
    5c76:	92 95       	swap	r25
    5c78:	90 7f       	andi	r25, 0xF0	; 240
    5c7a:	98 27       	eor	r25, r24
    5c7c:	80 7f       	andi	r24, 0xF0	; 240
    5c7e:	98 27       	eor	r25, r24
    5c80:	82 2b       	or	r24, r18
    5c82:	8b 83       	std	Y+3, r24	; 0x03
    5c84:	81 85       	ldd	r24, Z+9	; 0x09
    5c86:	20 ed       	ldi	r18, 0xD0	; 208
    5c88:	28 0f       	add	r18, r24
    5c8a:	90 85       	ldd	r25, Z+8	; 0x08
    5c8c:	89 2f       	mov	r24, r25
    5c8e:	90 e0       	ldi	r25, 0x00	; 0
    5c90:	c0 97       	sbiw	r24, 0x30	; 48
    5c92:	82 95       	swap	r24
    5c94:	92 95       	swap	r25
    5c96:	90 7f       	andi	r25, 0xF0	; 240
    5c98:	98 27       	eor	r25, r24
    5c9a:	80 7f       	andi	r24, 0xF0	; 240
    5c9c:	98 27       	eor	r25, r24
    5c9e:	82 2b       	or	r24, r18
    5ca0:	8d 83       	std	Y+5, r24	; 0x05
    5ca2:	86 81       	ldd	r24, Z+6	; 0x06
    5ca4:	20 ed       	ldi	r18, 0xD0	; 208
    5ca6:	28 0f       	add	r18, r24
    5ca8:	95 81       	ldd	r25, Z+5	; 0x05
    5caa:	89 2f       	mov	r24, r25
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	c0 97       	sbiw	r24, 0x30	; 48
    5cb0:	82 95       	swap	r24
    5cb2:	92 95       	swap	r25
    5cb4:	90 7f       	andi	r25, 0xF0	; 240
    5cb6:	98 27       	eor	r25, r24
    5cb8:	80 7f       	andi	r24, 0xF0	; 240
    5cba:	98 27       	eor	r25, r24
    5cbc:	82 2b       	or	r24, r18
    5cbe:	8e 83       	std	Y+6, r24	; 0x06
    5cc0:	83 81       	ldd	r24, Z+3	; 0x03
    5cc2:	20 ed       	ldi	r18, 0xD0	; 208
    5cc4:	28 0f       	add	r18, r24
    5cc6:	92 81       	ldd	r25, Z+2	; 0x02
    5cc8:	89 2f       	mov	r24, r25
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	c0 97       	sbiw	r24, 0x30	; 48
    5cce:	82 95       	swap	r24
    5cd0:	92 95       	swap	r25
    5cd2:	90 7f       	andi	r25, 0xF0	; 240
    5cd4:	98 27       	eor	r25, r24
    5cd6:	80 7f       	andi	r24, 0xF0	; 240
    5cd8:	98 27       	eor	r25, r24
    5cda:	82 2b       	or	r24, r18
    5cdc:	8f 83       	std	Y+7, r24	; 0x07
    5cde:	8a e0       	ldi	r24, 0x0A	; 10
    5ce0:	1f ef       	ldi	r17, 0xFF	; 255
    5ce2:	18 0f       	add	r17, r24
    5ce4:	88 23       	and	r24, r24
    5ce6:	81 f0       	breq	.+32     	; 0x5d08 <ds3231_set_date_time+0xf8>
    5ce8:	60 2f       	mov	r22, r16
    5cea:	66 0f       	add	r22, r22
    5cec:	66 0f       	add	r22, r22
    5cee:	66 0f       	add	r22, r22
    5cf0:	60 1b       	sub	r22, r16
    5cf2:	27 e0       	ldi	r18, 0x07	; 7
    5cf4:	ae 01       	movw	r20, r28
    5cf6:	4f 5f       	subi	r20, 0xFF	; 255
    5cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    5cfa:	80 ed       	ldi	r24, 0xD0	; 208
    5cfc:	0e 94 13 35 	call	0x6a26	; 0x6a26 <I2C_0_SendData>
    5d00:	88 23       	and	r24, r24
    5d02:	21 f0       	breq	.+8      	; 0x5d0c <ds3231_set_date_time+0xfc>
    5d04:	91 e0       	ldi	r25, 0x01	; 1
    5d06:	03 c0       	rjmp	.+6      	; 0x5d0e <ds3231_set_date_time+0xfe>
    5d08:	90 e0       	ldi	r25, 0x00	; 0
    5d0a:	01 c0       	rjmp	.+2      	; 0x5d0e <ds3231_set_date_time+0xfe>
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	81 2f       	mov	r24, r17
    5d10:	91 11       	cpse	r25, r1
    5d12:	e6 cf       	rjmp	.-52     	; 0x5ce0 <ds3231_set_date_time+0xd0>
    5d14:	27 96       	adiw	r28, 0x07	; 7
    5d16:	cd bf       	out	0x3d, r28	; 61
    5d18:	de bf       	out	0x3e, r29	; 62
    5d1a:	df 91       	pop	r29
    5d1c:	cf 91       	pop	r28
    5d1e:	1f 91       	pop	r17
    5d20:	0f 91       	pop	r16
    5d22:	08 95       	ret

00005d24 <ds3231_1s_sqw>:
#endif // DATE_STRING_SUPPORT_ENABLED
	
	bool ds3231_1s_sqw(bool enable)
	{
    5d24:	1f 93       	push	r17
    5d26:	cf 93       	push	r28
    5d28:	df 93       	push	r29
    5d2a:	1f 92       	push	r1
    5d2c:	cd b7       	in	r28, 0x3d	; 61
    5d2e:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
		bool failure;
		uint8_t data[1];
		
		data[0] = enable ? 0x40:0x00;	
    5d30:	88 23       	and	r24, r24
    5d32:	11 f0       	breq	.+4      	; 0x5d38 <ds3231_1s_sqw+0x14>
    5d34:	80 e4       	ldi	r24, 0x40	; 64
    5d36:	01 c0       	rjmp	.+2      	; 0x5d3a <ds3231_1s_sqw+0x16>
    5d38:	80 e0       	ldi	r24, 0x00	; 0
    5d3a:	89 83       	std	Y+1, r24	; 0x01
	}
#endif // DATE_STRING_SUPPORT_ENABLED
	
	bool ds3231_1s_sqw(bool enable)
	{
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5d3c:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		uint8_t data[1];
		
		data[0] = enable ? 0x40:0x00;	
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, data, 1) != 1)));
    5d3e:	1f ef       	ldi	r17, 0xFF	; 255
    5d40:	18 0f       	add	r17, r24
    5d42:	88 23       	and	r24, r24
    5d44:	81 f0       	breq	.+32     	; 0x5d66 <ds3231_1s_sqw+0x42>
    5d46:	21 e0       	ldi	r18, 0x01	; 1
    5d48:	ae 01       	movw	r20, r28
    5d4a:	4f 5f       	subi	r20, 0xFF	; 255
    5d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d4e:	6e e0       	ldi	r22, 0x0E	; 14
    5d50:	80 ed       	ldi	r24, 0xD0	; 208
    5d52:	0e 94 13 35 	call	0x6a26	; 0x6a26 <I2C_0_SendData>
    5d56:	21 e0       	ldi	r18, 0x01	; 1
    5d58:	81 30       	cpi	r24, 0x01	; 1
    5d5a:	09 f4       	brne	.+2      	; 0x5d5e <ds3231_1s_sqw+0x3a>
    5d5c:	20 e0       	ldi	r18, 0x00	; 0
    5d5e:	81 30       	cpi	r24, 0x01	; 1
    5d60:	21 f0       	breq	.+8      	; 0x5d6a <ds3231_1s_sqw+0x46>
    5d62:	91 e0       	ldi	r25, 0x01	; 1
    5d64:	03 c0       	rjmp	.+6      	; 0x5d6c <ds3231_1s_sqw+0x48>
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	01 c0       	rjmp	.+2      	; 0x5d6c <ds3231_1s_sqw+0x48>
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	81 2f       	mov	r24, r17
    5d6e:	91 11       	cpse	r25, r1
    5d70:	e6 cf       	rjmp	.-52     	; 0x5d3e <ds3231_1s_sqw+0x1a>
		
		return(failure);
	}
    5d72:	82 2f       	mov	r24, r18
    5d74:	0f 90       	pop	r0
    5d76:	df 91       	pop	r29
    5d78:	cf 91       	pop	r28
    5d7a:	1f 91       	pop	r17
    5d7c:	08 95       	ret

00005d7e <ds3231_set_aging>:


	bool ds3231_set_aging(int8_t data_in)
	{
    5d7e:	1f 93       	push	r17
    5d80:	cf 93       	push	r28
    5d82:	df 93       	push	r29
    5d84:	1f 92       	push	r1
    5d86:	cd b7       	in	r28, 0x3d	; 61
    5d88:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
    5d8a:	89 83       	std	Y+1, r24	; 0x01
	}


	bool ds3231_set_aging(int8_t data_in)
	{
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5d8c:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    5d8e:	1f ef       	ldi	r17, 0xFF	; 255
    5d90:	18 0f       	add	r17, r24
    5d92:	88 23       	and	r24, r24
    5d94:	81 f0       	breq	.+32     	; 0x5db6 <ds3231_set_aging+0x38>
    5d96:	21 e0       	ldi	r18, 0x01	; 1
    5d98:	ae 01       	movw	r20, r28
    5d9a:	4f 5f       	subi	r20, 0xFF	; 255
    5d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d9e:	60 e1       	ldi	r22, 0x10	; 16
    5da0:	80 ed       	ldi	r24, 0xD0	; 208
    5da2:	0e 94 13 35 	call	0x6a26	; 0x6a26 <I2C_0_SendData>
    5da6:	21 e0       	ldi	r18, 0x01	; 1
    5da8:	81 30       	cpi	r24, 0x01	; 1
    5daa:	09 f4       	brne	.+2      	; 0x5dae <ds3231_set_aging+0x30>
    5dac:	20 e0       	ldi	r18, 0x00	; 0
    5dae:	81 30       	cpi	r24, 0x01	; 1
    5db0:	21 f0       	breq	.+8      	; 0x5dba <ds3231_set_aging+0x3c>
    5db2:	91 e0       	ldi	r25, 0x01	; 1
    5db4:	03 c0       	rjmp	.+6      	; 0x5dbc <ds3231_set_aging+0x3e>
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	01 c0       	rjmp	.+2      	; 0x5dbc <ds3231_set_aging+0x3e>
    5dba:	90 e0       	ldi	r25, 0x00	; 0
    5dbc:	81 2f       	mov	r24, r17
    5dbe:	91 11       	cpse	r25, r1
    5dc0:	e6 cf       	rjmp	.-52     	; 0x5d8e <ds3231_set_aging+0x10>
		return(failure);
	}
    5dc2:	82 2f       	mov	r24, r18
    5dc4:	0f 90       	pop	r0
    5dc6:	df 91       	pop	r29
    5dc8:	cf 91       	pop	r28
    5dca:	1f 91       	pop	r17
    5dcc:	08 95       	ret

00005dce <ds3231_get_aging>:


	int8_t ds3231_get_aging()
	{
    5dce:	1f 93       	push	r17
    5dd0:	cf 93       	push	r28
    5dd2:	df 93       	push	r29
    5dd4:	1f 92       	push	r1
    5dd6:	cd b7       	in	r28, 0x3d	; 61
    5dd8:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5dda:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		while(tries-- && (failure = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    5ddc:	1f ef       	ldi	r17, 0xFF	; 255
    5dde:	18 0f       	add	r17, r24
    5de0:	88 23       	and	r24, r24
    5de2:	61 f0       	breq	.+24     	; 0x5dfc <ds3231_get_aging+0x2e>
    5de4:	21 e0       	ldi	r18, 0x01	; 1
    5de6:	ae 01       	movw	r20, r28
    5de8:	4f 5f       	subi	r20, 0xFF	; 255
    5dea:	5f 4f       	sbci	r21, 0xFF	; 255
    5dec:	60 e1       	ldi	r22, 0x10	; 16
    5dee:	80 ed       	ldi	r24, 0xD0	; 208
    5df0:	0e 94 c1 34 	call	0x6982	; 0x6982 <I2C_0_GetData>
    5df4:	81 30       	cpi	r24, 0x01	; 1
    5df6:	21 f0       	breq	.+8      	; 0x5e00 <ds3231_get_aging+0x32>
    5df8:	91 e0       	ldi	r25, 0x01	; 1
    5dfa:	03 c0       	rjmp	.+6      	; 0x5e02 <ds3231_get_aging+0x34>
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	01 c0       	rjmp	.+2      	; 0x5e02 <ds3231_get_aging+0x34>
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	81 2f       	mov	r24, r17
    5e04:	91 11       	cpse	r25, r1
    5e06:	ea cf       	rjmp	.-44     	; 0x5ddc <ds3231_get_aging+0xe>
		return(data[0]);
	}
    5e08:	89 81       	ldd	r24, Y+1	; 0x01
    5e0a:	0f 90       	pop	r0
    5e0c:	df 91       	pop	r29
    5e0e:	cf 91       	pop	r28
    5e10:	1f 91       	pop	r17
    5e12:	08 95       	ret

00005e14 <ds3231_responding>:

	bool ds3231_responding()
	{
    5e14:	1f 93       	push	r17
    5e16:	cf 93       	push	r28
    5e18:	df 93       	push	r29
    5e1a:	1f 92       	push	r1
    5e1c:	cd b7       	in	r28, 0x3d	; 61
    5e1e:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
		uint8_t tries = 10;
    5e20:	9a e0       	ldi	r25, 0x0A	; 10
		return(data[0]);
	}

	bool ds3231_responding()
	{
		bool responseReceived = false;
    5e22:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t tries = 10;
		int8_t data[1];		
		while(tries-- && !(responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1)));
    5e24:	1f ef       	ldi	r17, 0xFF	; 255
    5e26:	19 0f       	add	r17, r25
    5e28:	99 23       	and	r25, r25
    5e2a:	81 f0       	breq	.+32     	; 0x5e4c <ds3231_responding+0x38>
    5e2c:	21 e0       	ldi	r18, 0x01	; 1
    5e2e:	ae 01       	movw	r20, r28
    5e30:	4f 5f       	subi	r20, 0xFF	; 255
    5e32:	5f 4f       	sbci	r21, 0xFF	; 255
    5e34:	60 e1       	ldi	r22, 0x10	; 16
    5e36:	80 ed       	ldi	r24, 0xD0	; 208
    5e38:	0e 94 c1 34 	call	0x6982	; 0x6982 <I2C_0_GetData>
    5e3c:	31 e0       	ldi	r19, 0x01	; 1
    5e3e:	81 30       	cpi	r24, 0x01	; 1
    5e40:	09 f0       	breq	.+2      	; 0x5e44 <ds3231_responding+0x30>
    5e42:	30 e0       	ldi	r19, 0x00	; 0
    5e44:	81 30       	cpi	r24, 0x01	; 1
    5e46:	21 f0       	breq	.+8      	; 0x5e50 <ds3231_responding+0x3c>
    5e48:	21 e0       	ldi	r18, 0x01	; 1
    5e4a:	03 c0       	rjmp	.+6      	; 0x5e52 <ds3231_responding+0x3e>
    5e4c:	20 e0       	ldi	r18, 0x00	; 0
    5e4e:	01 c0       	rjmp	.+2      	; 0x5e52 <ds3231_responding+0x3e>
    5e50:	20 e0       	ldi	r18, 0x00	; 0
    5e52:	91 2f       	mov	r25, r17
    5e54:	21 11       	cpse	r18, r1
    5e56:	e6 cf       	rjmp	.-52     	; 0x5e24 <ds3231_responding+0x10>
		return(responseReceived);
	}
    5e58:	83 2f       	mov	r24, r19
    5e5a:	0f 90       	pop	r0
    5e5c:	df 91       	pop	r29
    5e5e:	cf 91       	pop	r28
    5e60:	1f 91       	pop	r17
    5e62:	08 95       	ret

00005e64 <ds3231_init>:

time_t epoch_from_ltm(tm *ltm);

bool ds3231_init()
{
	I2C_0_Init();
    5e64:	0e 94 a5 34 	call	0x694a	; 0x694a <I2C_0_Init>
	return (!ds3231_responding());
    5e68:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <ds3231_responding>
}
    5e6c:	91 e0       	ldi	r25, 0x01	; 1
    5e6e:	89 27       	eor	r24, r25
    5e70:	08 95       	ret

00005e72 <ds3231_sync2nearestMinute>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
    5e72:	cf 92       	push	r12
    5e74:	df 92       	push	r13
    5e76:	ef 92       	push	r14
    5e78:	ff 92       	push	r15
    5e7a:	0f 93       	push	r16
    5e7c:	1f 93       	push	r17
    5e7e:	cf 93       	push	r28
    5e80:	df 93       	push	r29
    5e82:	cd b7       	in	r28, 0x3d	; 61
    5e84:	de b7       	in	r29, 0x3e	; 62
    5e86:	28 97       	sbiw	r28, 0x08	; 8
    5e88:	cd bf       	out	0x3d, r28	; 61
    5e8a:	de bf       	out	0x3e, r29	; 62
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
    5e8c:	fe 01       	movw	r30, r28
    5e8e:	31 96       	adiw	r30, 0x01	; 1
    5e90:	88 e0       	ldi	r24, 0x08	; 8
    5e92:	df 01       	movw	r26, r30
    5e94:	1d 92       	st	X+, r1
    5e96:	8a 95       	dec	r24
    5e98:	e9 f7       	brne	.-6      	; 0x5e94 <ds3231_sync2nearestMinute+0x22>
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
    5e9a:	f1 2c       	mov	r15, r1
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
    5e9c:	8a e0       	ldi	r24, 0x0A	; 10
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
		
	while(tries-- && (err = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 3) != 3)));
    5e9e:	1f ef       	ldi	r17, 0xFF	; 255
    5ea0:	18 0f       	add	r17, r24
    5ea2:	88 23       	and	r24, r24
    5ea4:	89 f0       	breq	.+34     	; 0x5ec8 <ds3231_sync2nearestMinute+0x56>
    5ea6:	23 e0       	ldi	r18, 0x03	; 3
    5ea8:	ae 01       	movw	r20, r28
    5eaa:	4f 5f       	subi	r20, 0xFF	; 255
    5eac:	5f 4f       	sbci	r21, 0xFF	; 255
    5eae:	60 e0       	ldi	r22, 0x00	; 0
    5eb0:	80 ed       	ldi	r24, 0xD0	; 208
    5eb2:	0e 94 c1 34 	call	0x6982	; 0x6982 <I2C_0_GetData>
    5eb6:	ff 24       	eor	r15, r15
    5eb8:	f3 94       	inc	r15
    5eba:	83 30       	cpi	r24, 0x03	; 3
    5ebc:	09 f4       	brne	.+2      	; 0x5ec0 <ds3231_sync2nearestMinute+0x4e>
    5ebe:	f1 2c       	mov	r15, r1
    5ec0:	83 30       	cpi	r24, 0x03	; 3
    5ec2:	21 f0       	breq	.+8      	; 0x5ecc <ds3231_sync2nearestMinute+0x5a>
    5ec4:	01 e0       	ldi	r16, 0x01	; 1
    5ec6:	03 c0       	rjmp	.+6      	; 0x5ece <ds3231_sync2nearestMinute+0x5c>
    5ec8:	00 e0       	ldi	r16, 0x00	; 0
    5eca:	01 c0       	rjmp	.+2      	; 0x5ece <ds3231_sync2nearestMinute+0x5c>
    5ecc:	00 e0       	ldi	r16, 0x00	; 0
    5ece:	81 2f       	mov	r24, r17
    5ed0:	01 11       	cpse	r16, r1
    5ed2:	e5 cf       	rjmp	.-54     	; 0x5e9e <ds3231_sync2nearestMinute+0x2c>

	if(!err)
    5ed4:	f1 10       	cpse	r15, r1
    5ed6:	82 c0       	rjmp	.+260    	; 0x5fdc <ds3231_sync2nearestMinute+0x16a>
		uint8_t hour10;
		uint8_t hour;
		bool am_pm;
		bool twelvehour;

		seconds = bcd2dec(data[0]);
    5ed8:	89 81       	ldd	r24, Y+1	; 0x01
    5eda:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <_Z7bcd2dech>
    5ede:	d8 2e       	mov	r13, r24
		minutes = bcd2dec(data[1]);
    5ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee2:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <_Z7bcd2dech>
		am_pm = ((data[2] >> 5) & 0x01);
    5ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ee8:	49 2f       	mov	r20, r25
    5eea:	40 72       	andi	r20, 0x20	; 32
		hour10 = ((data[2] >> 4) & 0x01);
    5eec:	29 2f       	mov	r18, r25
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	35 95       	asr	r19
    5ef2:	27 95       	ror	r18
    5ef4:	35 95       	asr	r19
    5ef6:	27 95       	ror	r18
    5ef8:	35 95       	asr	r19
    5efa:	27 95       	ror	r18
    5efc:	35 95       	asr	r19
    5efe:	27 95       	ror	r18
    5f00:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
    5f02:	39 2f       	mov	r19, r25
    5f04:	3f 70       	andi	r19, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);

		if(!twelvehour && am_pm)
    5f06:	b9 2f       	mov	r27, r25
    5f08:	b0 74       	andi	r27, 0x40	; 64
    5f0a:	cb 2e       	mov	r12, r27
    5f0c:	96 fd       	sbrc	r25, 6
    5f0e:	02 c0       	rjmp	.+4      	; 0x5f14 <ds3231_sync2nearestMinute+0xa2>
    5f10:	41 11       	cpse	r20, r1
		{
			hour10 = 2;
    5f12:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
    5f14:	22 0f       	add	r18, r18
    5f16:	e2 2e       	mov	r14, r18
    5f18:	ee 0c       	add	r14, r14
    5f1a:	ee 0c       	add	r14, r14
    5f1c:	2e 0d       	add	r18, r14
    5f1e:	e2 2e       	mov	r14, r18
    5f20:	e3 0e       	add	r14, r19

		if(seconds > 30)
    5f22:	5e e1       	ldi	r21, 0x1E	; 30
    5f24:	5d 15       	cp	r21, r13
    5f26:	60 f4       	brcc	.+24     	; 0x5f40 <ds3231_sync2nearestMinute+0xce>
		{
			minutes++;
    5f28:	8f 5f       	subi	r24, 0xFF	; 255

			if(minutes > 59)
    5f2a:	8c 33       	cpi	r24, 0x3C	; 60
    5f2c:	48 f0       	brcs	.+18     	; 0x5f40 <ds3231_sync2nearestMinute+0xce>
			{
				minutes = 0;
				hours++;
    5f2e:	e3 94       	inc	r14

				if(hours > 23) /* Don't attempt to synchronize at midnight */
    5f30:	87 e1       	ldi	r24, 0x17	; 23
    5f32:	8e 15       	cp	r24, r14
    5f34:	10 f0       	brcs	.+4      	; 0x5f3a <ds3231_sync2nearestMinute+0xc8>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    5f36:	80 e0       	ldi	r24, 0x00	; 0
    5f38:	03 c0       	rjmp	.+6      	; 0x5f40 <ds3231_sync2nearestMinute+0xce>
    5f3a:	80 e0       	ldi	r24, 0x00	; 0
				hours++;

				if(hours > 23) /* Don't attempt to synchronize at midnight */
				{
					err = true;
    5f3c:	ff 24       	eor	r15, r15
    5f3e:	f3 94       	inc	r15
				}
			}
		}

		if(!err)
    5f40:	f1 10       	cpse	r15, r1
    5f42:	4c c0       	rjmp	.+152    	; 0x5fdc <ds3231_sync2nearestMinute+0x16a>
		{
			data[0] = 0; /* seconds = 00 */
    5f44:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
    5f46:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <_Z7dec2bcdh>
    5f4a:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;
    5f4c:	1b 82       	std	Y+3, r1	; 0x03

			if(twelvehour)
    5f4e:	cc 20       	and	r12, r12
    5f50:	71 f0       	breq	.+28     	; 0x5f6e <ds3231_sync2nearestMinute+0xfc>
			{
				data[2] |= 0x40; /* set  12-hour bit */
    5f52:	80 e4       	ldi	r24, 0x40	; 64
    5f54:	8b 83       	std	Y+3, r24	; 0x03

				if(hours >= 12)
    5f56:	9b e0       	ldi	r25, 0x0B	; 11
    5f58:	9e 15       	cp	r25, r14
    5f5a:	10 f4       	brcc	.+4      	; 0x5f60 <ds3231_sync2nearestMinute+0xee>
				{
					data[2] |= 0x20; /* set pm bit */
    5f5c:	80 e6       	ldi	r24, 0x60	; 96
    5f5e:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
    5f60:	a9 e0       	ldi	r26, 0x09	; 9
    5f62:	ae 15       	cp	r26, r14
    5f64:	78 f4       	brcc	.+30     	; 0x5f84 <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10;
    5f66:	8b 81       	ldd	r24, Y+3	; 0x03
    5f68:	80 61       	ori	r24, 0x10	; 16
    5f6a:	8b 83       	std	Y+3, r24	; 0x03
    5f6c:	0b c0       	rjmp	.+22     	; 0x5f84 <ds3231_sync2nearestMinute+0x112>
				}
			}
			else
			{
				if(hours >= 20)
    5f6e:	b3 e1       	ldi	r27, 0x13	; 19
    5f70:	be 15       	cp	r27, r14
    5f72:	18 f4       	brcc	.+6      	; 0x5f7a <ds3231_sync2nearestMinute+0x108>
				{
					data[2] |= 0x20; /* set 20 bit */
    5f74:	80 e2       	ldi	r24, 0x20	; 32
    5f76:	8b 83       	std	Y+3, r24	; 0x03
    5f78:	05 c0       	rjmp	.+10     	; 0x5f84 <ds3231_sync2nearestMinute+0x112>
				}
				else if(hours >= 10)
    5f7a:	59 e0       	ldi	r21, 0x09	; 9
    5f7c:	5e 15       	cp	r21, r14
    5f7e:	10 f4       	brcc	.+4      	; 0x5f84 <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10; /* set 10 bit */
    5f80:	80 e1       	ldi	r24, 0x10	; 16
    5f82:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
    5f84:	8d ec       	ldi	r24, 0xCD	; 205
    5f86:	e8 9e       	mul	r14, r24
    5f88:	81 2d       	mov	r24, r1
    5f8a:	11 24       	eor	r1, r1
    5f8c:	86 95       	lsr	r24
    5f8e:	86 95       	lsr	r24
    5f90:	86 95       	lsr	r24
    5f92:	88 0f       	add	r24, r24
    5f94:	98 2f       	mov	r25, r24
    5f96:	99 0f       	add	r25, r25
    5f98:	99 0f       	add	r25, r25
    5f9a:	89 0f       	add	r24, r25
    5f9c:	e8 1a       	sub	r14, r24
    5f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    5fa0:	e2 2a       	or	r14, r18
    5fa2:	eb 82       	std	Y+3, r14	; 0x03
			
			while(tries-- && (err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4)));
    5fa4:	ee 24       	eor	r14, r14
    5fa6:	ea 94       	dec	r14
    5fa8:	e1 0e       	add	r14, r17
    5faa:	11 23       	and	r17, r17
    5fac:	89 f0       	breq	.+34     	; 0x5fd0 <ds3231_sync2nearestMinute+0x15e>
    5fae:	24 e0       	ldi	r18, 0x04	; 4
    5fb0:	ae 01       	movw	r20, r28
    5fb2:	4f 5f       	subi	r20, 0xFF	; 255
    5fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    5fb6:	60 e0       	ldi	r22, 0x00	; 0
    5fb8:	80 ed       	ldi	r24, 0xD0	; 208
    5fba:	0e 94 13 35 	call	0x6a26	; 0x6a26 <I2C_0_SendData>
    5fbe:	ff 24       	eor	r15, r15
    5fc0:	f3 94       	inc	r15
    5fc2:	84 30       	cpi	r24, 0x04	; 4
    5fc4:	09 f4       	brne	.+2      	; 0x5fc8 <ds3231_sync2nearestMinute+0x156>
    5fc6:	f1 2c       	mov	r15, r1
    5fc8:	84 30       	cpi	r24, 0x04	; 4
    5fca:	21 f0       	breq	.+8      	; 0x5fd4 <ds3231_sync2nearestMinute+0x162>
    5fcc:	81 e0       	ldi	r24, 0x01	; 1
    5fce:	03 c0       	rjmp	.+6      	; 0x5fd6 <ds3231_sync2nearestMinute+0x164>
    5fd0:	80 2f       	mov	r24, r16
    5fd2:	01 c0       	rjmp	.+2      	; 0x5fd6 <ds3231_sync2nearestMinute+0x164>
    5fd4:	80 2f       	mov	r24, r16
    5fd6:	1e 2d       	mov	r17, r14
    5fd8:	81 11       	cpse	r24, r1
    5fda:	e4 cf       	rjmp	.-56     	; 0x5fa4 <ds3231_sync2nearestMinute+0x132>
		}
	}

	return err;
}
    5fdc:	8f 2d       	mov	r24, r15
    5fde:	28 96       	adiw	r28, 0x08	; 8
    5fe0:	cd bf       	out	0x3d, r28	; 61
    5fe2:	de bf       	out	0x3e, r29	; 62
    5fe4:	df 91       	pop	r29
    5fe6:	cf 91       	pop	r28
    5fe8:	1f 91       	pop	r17
    5fea:	0f 91       	pop	r16
    5fec:	ff 90       	pop	r15
    5fee:	ef 90       	pop	r14
    5ff0:	df 90       	pop	r13
    5ff2:	cf 90       	pop	r12
    5ff4:	08 95       	ret

00005ff6 <convertEpochToTimeString>:
/**
 *   Converts an epoch (seconds since 1900)  into a string with format "ddd dd-mon-yyyy hh:mm:ss zzz"
 */
#define THIRTY_YEARS 946684800
char* convertEpochToTimeString(time_t epoch, char* buf, size_t size)
 {
    5ff6:	ef 92       	push	r14
    5ff8:	ff 92       	push	r15
    5ffa:	0f 93       	push	r16
    5ffc:	1f 93       	push	r17
    5ffe:	cf 93       	push	r28
    6000:	df 93       	push	r29
    6002:	cd b7       	in	r28, 0x3d	; 61
    6004:	de b7       	in	r29, 0x3e	; 62
    6006:	60 97       	sbiw	r28, 0x10	; 16
    6008:	cd bf       	out	0x3d, r28	; 61
    600a:	de bf       	out	0x3e, r29	; 62
    600c:	8a 01       	movw	r16, r20
    600e:	79 01       	movw	r14, r18
   struct tm  ts;
	time_t t = epoch - THIRTY_YEARS;
    6010:	dc 01       	movw	r26, r24
    6012:	cb 01       	movw	r24, r22
    6014:	80 58       	subi	r24, 0x80	; 128
    6016:	93 44       	sbci	r25, 0x43	; 67
    6018:	ad 46       	sbci	r26, 0x6D	; 109
    601a:	b8 43       	sbci	r27, 0x38	; 56
    601c:	8d 87       	std	Y+13, r24	; 0x0d
    601e:	9e 87       	std	Y+14, r25	; 0x0e
    6020:	af 87       	std	Y+15, r26	; 0x0f
    6022:	b8 8b       	std	Y+16, r27	; 0x10

    // Format time, "ddd dd-mon-yyyy hh:mm:ss zzz"
    ts = *localtime(&t);
    6024:	ce 01       	movw	r24, r28
    6026:	0d 96       	adiw	r24, 0x0d	; 13
    6028:	0e 94 de 01 	call	0x3bc	; 0x3bc <localtime>
    602c:	fc 01       	movw	r30, r24
    602e:	9c e0       	ldi	r25, 0x0C	; 12
    6030:	de 01       	movw	r26, r28
    6032:	11 96       	adiw	r26, 0x01	; 1
    6034:	01 90       	ld	r0, Z+
    6036:	0d 92       	st	X+, r0
    6038:	9a 95       	dec	r25
    603a:	e1 f7       	brne	.-8      	; 0x6034 <convertEpochToTimeString+0x3e>
    strftime(buf, size, "%a %d-%b-%Y %H:%M:%S", &ts);
    603c:	9e 01       	movw	r18, r28
    603e:	2f 5f       	subi	r18, 0xFF	; 255
    6040:	3f 4f       	sbci	r19, 0xFF	; 255
    6042:	40 e9       	ldi	r20, 0x90	; 144
    6044:	54 e4       	ldi	r21, 0x44	; 68
    6046:	b7 01       	movw	r22, r14
    6048:	c8 01       	movw	r24, r16
    604a:	0e 94 87 02 	call	0x50e	; 0x50e <strftime>
   return buf;
 }
    604e:	c8 01       	movw	r24, r16
    6050:	60 96       	adiw	r28, 0x10	; 16
    6052:	cd bf       	out	0x3d, r28	; 61
    6054:	de bf       	out	0x3e, r29	; 62
    6056:	df 91       	pop	r29
    6058:	cf 91       	pop	r28
    605a:	1f 91       	pop	r17
    605c:	0f 91       	pop	r16
    605e:	ff 90       	pop	r15
    6060:	ef 90       	pop	r14
    6062:	08 95       	ret

00006064 <_ZN13EepromManagerC1Ev>:
extern uint16_t g_80m_power_level_mW;

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
    6064:	08 95       	ret

00006066 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
    6066:	08 95       	ret

00006068 <_Z21avr_eeprom_write_bytejh>:
#include <avr/io.h>

typedef uint16_t eeprom_addr_t;

// to write
void avr_eeprom_write_byte(eeprom_addr_t index, uint8_t in) {
    6068:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    606a:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    606e:	91 fd       	sbrc	r25, 1
    6070:	fc cf       	rjmp	.-8      	; 0x606a <_Z21avr_eeprom_write_bytejh+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    6072:	8d e9       	ldi	r24, 0x9D	; 157
    6074:	93 e1       	ldi	r25, 0x13	; 19
    6076:	84 bf       	out	0x34, r24	; 52
    6078:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    607c:	f9 01       	movw	r30, r18
    607e:	fc 5e       	subi	r31, 0xEC	; 236
    6080:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	84 bf       	out	0x34, r24	; 52
    6086:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    608a:	08 95       	ret

0000608c <_Z21avr_eeprom_write_wordjj>:
}

void avr_eeprom_write_word(eeprom_addr_t index, uint16_t in) {
    608c:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    608e:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    6092:	91 fd       	sbrc	r25, 1
    6094:	fc cf       	rjmp	.-8      	; 0x608e <_Z21avr_eeprom_write_wordjj+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    6096:	8d e9       	ldi	r24, 0x9D	; 157
    6098:	93 e1       	ldi	r25, 0x13	; 19
    609a:	84 bf       	out	0x34, r24	; 52
    609c:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint16_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    60a0:	f9 01       	movw	r30, r18
    60a2:	fc 5e       	subi	r31, 0xEC	; 236
    60a4:	60 83       	st	Z, r22
    60a6:	71 83       	std	Z+1, r23	; 0x01
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	84 bf       	out	0x34, r24	; 52
    60ac:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    60b0:	08 95       	ret

000060b2 <_Z22avr_eeprom_write_dwordjm>:
}

void avr_eeprom_write_dword(eeprom_addr_t index, uint32_t in) {
    60b2:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    60b4:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    60b8:	91 fd       	sbrc	r25, 1
    60ba:	fc cf       	rjmp	.-8      	; 0x60b4 <_Z22avr_eeprom_write_dwordjm+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    60bc:	8d e9       	ldi	r24, 0x9D	; 157
    60be:	93 e1       	ldi	r25, 0x13	; 19
    60c0:	84 bf       	out	0x34, r24	; 52
    60c2:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint32_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    60c6:	f9 01       	movw	r30, r18
    60c8:	fc 5e       	subi	r31, 0xEC	; 236
    60ca:	40 83       	st	Z, r20
    60cc:	51 83       	std	Z+1, r21	; 0x01
    60ce:	62 83       	std	Z+2, r22	; 0x02
    60d0:	73 83       	std	Z+3, r23	; 0x03
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	84 bf       	out	0x34, r24	; 52
    60d6:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    60da:	08 95       	ret

000060dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
}

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
    60dc:	0f 93       	push	r16
    60de:	1f 93       	push	r17
    60e0:	cf 93       	push	r28
    60e2:	df 93       	push	r29
	if(!val)
    60e4:	41 15       	cp	r20, r1
    60e6:	51 05       	cpc	r21, r1
    60e8:	09 f4       	brne	.+2      	; 0x60ec <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
    60ea:	7c c0       	rjmp	.+248    	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
	{
		return;
	}

	switch(v)
    60ec:	86 2f       	mov	r24, r22
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	84 33       	cpi	r24, 0x34	; 52
    60f2:	91 05       	cpc	r25, r1
    60f4:	08 f0       	brcs	.+2      	; 0x60f8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x1c>
    60f6:	76 c0       	rjmp	.+236    	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
    60f8:	ea 01       	movw	r28, r20
    60fa:	fc 01       	movw	r30, r24
    60fc:	eb 57       	subi	r30, 0x7B	; 123
    60fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6100:	0c 94 be 4b 	jmp	0x977c	; 0x977c <__tablejump2__>
	{
		case Frequency:
		{
			avr_eeprom_write_dword(Frequency, *(uint32_t*)val);
    6104:	48 81       	ld	r20, Y
    6106:	59 81       	ldd	r21, Y+1	; 0x01
    6108:	6a 81       	ldd	r22, Y+2	; 0x02
    610a:	7b 81       	ldd	r23, Y+3	; 0x03
    610c:	8b e2       	ldi	r24, 0x2B	; 43
    610e:	90 e0       	ldi	r25, 0x00	; 0
    6110:	0e 94 59 30 	call	0x60b2	; 0x60b2 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6114:	67 c0       	rjmp	.+206    	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RTTY_offset:
		{
			avr_eeprom_write_dword(RTTY_offset, *(uint32_t*)val);
    6116:	48 81       	ld	r20, Y
    6118:	59 81       	ldd	r21, Y+1	; 0x01
    611a:	6a 81       	ldd	r22, Y+2	; 0x02
    611c:	7b 81       	ldd	r23, Y+3	; 0x03
    611e:	8f e2       	ldi	r24, 0x2F	; 47
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	0e 94 59 30 	call	0x60b2	; 0x60b2 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6126:	5e c0       	rjmp	.+188    	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RF_Power:
		{
			avr_eeprom_write_word(RF_Power, *(uint32_t*)val);			
    6128:	68 81       	ld	r22, Y
    612a:	79 81       	ldd	r23, Y+1	; 0x01
    612c:	83 e3       	ldi	r24, 0x33	; 51
    612e:	90 e0       	ldi	r25, 0x00	; 0
    6130:	0e 94 46 30 	call	0x608c	; 0x608c <_Z21avr_eeprom_write_wordjj>
		}
		break;
    6134:	57 c0       	rjmp	.+174    	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
    6136:	8a 01       	movw	r16, r20
    6138:	0f 5f       	subi	r16, 0xFF	; 255
    613a:	1f 4f       	sbci	r17, 0xFF	; 255
    613c:	68 81       	ld	r22, Y
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;
    613e:	8a e0       	ldi	r24, 0x0A	; 10
    6140:	90 e0       	ldi	r25, 0x00	; 0

			while(c)
    6142:	66 23       	and	r22, r22
    6144:	51 f0       	breq	.+20     	; 0x615a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x7e>
			{
				avr_eeprom_write_byte(j++, c);
    6146:	ec 01       	movw	r28, r24
    6148:	21 96       	adiw	r28, 0x01	; 1
    614a:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>
				c = *char_addr++;
    614e:	f8 01       	movw	r30, r16
    6150:	60 81       	ld	r22, Z
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
			{
				avr_eeprom_write_byte(j++, c);
    6152:	ce 01       	movw	r24, r28
				c = *char_addr++;
    6154:	0f 5f       	subi	r16, 0xFF	; 255
    6156:	1f 4f       	sbci	r17, 0xFF	; 255
			char* char_addr = (char*)val;
			char c = *char_addr++;
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
    6158:	f4 cf       	rjmp	.-24     	; 0x6142 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x66>
			{
				avr_eeprom_write_byte(j++, c);
				c = *char_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    615a:	60 e0       	ldi	r22, 0x00	; 0
    615c:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6160:	41 c0       	rjmp	.+130    	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
    6162:	8a 01       	movw	r16, r20
    6164:	0f 5f       	subi	r16, 0xFF	; 255
    6166:	1f 4f       	sbci	r17, 0xFF	; 255
    6168:	68 81       	ld	r22, Y
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
    616a:	8f e1       	ldi	r24, 0x1F	; 31
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    616c:	66 23       	and	r22, r22
    616e:	59 f0       	breq	.+22     	; 0x6186 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				avr_eeprom_write_byte(j++, c);
    6170:	c1 e0       	ldi	r28, 0x01	; 1
    6172:	c8 0f       	add	r28, r24
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>
				c = *uint8_addr++;
    617a:	f8 01       	movw	r30, r16
    617c:	60 81       	ld	r22, Z
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
			{
				avr_eeprom_write_byte(j++, c);
    617e:	8c 2f       	mov	r24, r28
				c = *uint8_addr++;
    6180:	0f 5f       	subi	r16, 0xFF	; 255
    6182:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    6184:	f3 cf       	rjmp	.-26     	; 0x616c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x90>
			{
				avr_eeprom_write_byte(j++, c);
				c = *uint8_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    6186:	60 e0       	ldi	r22, 0x00	; 0
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    618e:	2a c0       	rjmp	.+84     	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Id_codespeed:
		{
			avr_eeprom_write_byte(Id_codespeed, *(uint8_t*)val);
    6190:	68 81       	ld	r22, Y
    6192:	88 e2       	ldi	r24, 0x28	; 40
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    619a:	24 c0       	rjmp	.+72     	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Fox_setting:
		{
			avr_eeprom_write_byte(Fox_setting, *(uint8_t*)val);
    619c:	68 81       	ld	r22, Y
    619e:	89 e2       	ldi	r24, 0x29	; 41
    61a0:	90 e0       	ldi	r25, 0x00	; 0
    61a2:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    61a6:	1e c0       	rjmp	.+60     	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_start_epoch:
		{
			avr_eeprom_write_dword(Event_start_epoch, *(uint32_t*)val);
    61a8:	48 81       	ld	r20, Y
    61aa:	59 81       	ldd	r21, Y+1	; 0x01
    61ac:	6a 81       	ldd	r22, Y+2	; 0x02
    61ae:	7b 81       	ldd	r23, Y+3	; 0x03
    61b0:	82 e0       	ldi	r24, 0x02	; 2
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	0e 94 59 30 	call	0x60b2	; 0x60b2 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    61b8:	15 c0       	rjmp	.+42     	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_finish_epoch:
		{
			avr_eeprom_write_dword(Event_finish_epoch, *(uint32_t*)val);
    61ba:	48 81       	ld	r20, Y
    61bc:	59 81       	ldd	r21, Y+1	; 0x01
    61be:	6a 81       	ldd	r22, Y+2	; 0x02
    61c0:	7b 81       	ldd	r23, Y+3	; 0x03
    61c2:	86 e0       	ldi	r24, 0x06	; 6
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	0e 94 59 30 	call	0x60b2	; 0x60b2 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    61ca:	0c c0       	rjmp	.+24     	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Utc_offset:
		{
			avr_eeprom_write_byte(Utc_offset, *(uint8_t*)val);
    61cc:	68 81       	ld	r22, Y
    61ce:	8a e2       	ldi	r24, 0x2A	; 42
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    61d6:	06 c0       	rjmp	.+12     	; 0x61e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Eeprom_initialization_flag:
		{
			avr_eeprom_write_word(Eeprom_initialization_flag, *(uint16_t*)val);
    61d8:	68 81       	ld	r22, Y
    61da:	79 81       	ldd	r23, Y+1	; 0x01
    61dc:	80 e0       	ldi	r24, 0x00	; 0
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	0e 94 46 30 	call	0x608c	; 0x608c <_Z21avr_eeprom_write_wordjj>
		{

		}
		break;
	}
}
    61e4:	df 91       	pop	r29
    61e6:	cf 91       	pop	r28
    61e8:	1f 91       	pop	r17
    61ea:	0f 91       	pop	r16
    61ec:	08 95       	ret

000061ee <_ZN13EepromManager13saveAllEEPROMEv>:

/** 
 * Store any changed EEPROM variables
 */
void EepromManager::saveAllEEPROM(void)
{
    61ee:	ef 92       	push	r14
    61f0:	ff 92       	push	r15
    61f2:	0f 93       	push	r16
    61f4:	1f 93       	push	r17
    61f6:	cf 93       	push	r28
    61f8:	df 93       	push	r29
    61fa:	7c 01       	movw	r14, r24
	uint16_t i;
	
	if(g_id_codespeed != eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)))
    61fc:	88 e2       	ldi	r24, 0x28	; 40
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    6204:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <g_id_codespeed>
    6208:	89 17       	cp	r24, r25
    620a:	31 f0       	breq	.+12     	; 0x6218 <_ZN13EepromManager13saveAllEEPROMEv+0x2a>
	{
		updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    620c:	4b e0       	ldi	r20, 0x0B	; 11
    620e:	50 e4       	ldi	r21, 0x40	; 64
    6210:	68 e2       	ldi	r22, 0x28	; 40
    6212:	c7 01       	movw	r24, r14
    6214:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_fox != eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)))
    6218:	89 e2       	ldi	r24, 0x29	; 41
    621a:	90 e0       	ldi	r25, 0x00	; 0
    621c:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    6220:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <g_fox>
    6224:	89 17       	cp	r24, r25
    6226:	31 f0       	breq	.+12     	; 0x6234 <_ZN13EepromManager13saveAllEEPROMEv+0x46>
	{
		updateEEPROMVar(Fox_setting, (void*)&g_fox);
    6228:	4b e1       	ldi	r20, 0x1B	; 27
    622a:	50 e4       	ldi	r21, 0x40	; 64
    622c:	69 e2       	ldi	r22, 0x29	; 41
    622e:	c7 01       	movw	r24, r14
    6230:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_start_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch)))
    6234:	82 e0       	ldi	r24, 0x02	; 2
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	0e 94 19 52 	call	0xa432	; 0xa432 <eeprom_read_dword>
    623c:	00 91 35 46 	lds	r16, 0x4635	; 0x804635 <g_event_start_epoch>
    6240:	10 91 36 46 	lds	r17, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    6244:	20 91 37 46 	lds	r18, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    6248:	30 91 38 46 	lds	r19, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    624c:	60 17       	cp	r22, r16
    624e:	71 07       	cpc	r23, r17
    6250:	82 07       	cpc	r24, r18
    6252:	93 07       	cpc	r25, r19
    6254:	31 f0       	breq	.+12     	; 0x6262 <_ZN13EepromManager13saveAllEEPROMEv+0x74>
	{
		updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    6256:	45 e3       	ldi	r20, 0x35	; 53
    6258:	56 e4       	ldi	r21, 0x46	; 70
    625a:	62 e0       	ldi	r22, 0x02	; 2
    625c:	c7 01       	movw	r24, r14
    625e:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_finish_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch)))
    6262:	86 e0       	ldi	r24, 0x06	; 6
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	0e 94 19 52 	call	0xa432	; 0xa432 <eeprom_read_dword>
    626a:	00 91 39 46 	lds	r16, 0x4639	; 0x804639 <g_event_finish_epoch>
    626e:	10 91 3a 46 	lds	r17, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    6272:	20 91 3b 46 	lds	r18, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    6276:	30 91 3c 46 	lds	r19, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    627a:	60 17       	cp	r22, r16
    627c:	71 07       	cpc	r23, r17
    627e:	82 07       	cpc	r24, r18
    6280:	93 07       	cpc	r25, r19
    6282:	31 f0       	breq	.+12     	; 0x6290 <_ZN13EepromManager13saveAllEEPROMEv+0xa2>
	{
		updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    6284:	49 e3       	ldi	r20, 0x39	; 57
    6286:	56 e4       	ldi	r21, 0x46	; 70
    6288:	66 e0       	ldi	r22, 0x06	; 6
    628a:	c7 01       	movw	r24, r14
    628c:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
    6290:	c0 91 3d 46 	lds	r28, 0x463D	; 0x80463d <g_utc_offset>
    6294:	0c 2e       	mov	r0, r28
    6296:	00 0c       	add	r0, r0
    6298:	dd 0b       	sbc	r29, r29
    629a:	8a e2       	ldi	r24, 0x2A	; 42
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	c8 17       	cp	r28, r24
    62a6:	d9 07       	cpc	r29, r25
    62a8:	31 f0       	breq	.+12     	; 0x62b6 <_ZN13EepromManager13saveAllEEPROMEv+0xc8>
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    62aa:	4d e3       	ldi	r20, 0x3D	; 61
    62ac:	56 e4       	ldi	r21, 0x46	; 70
    62ae:	6a e2       	ldi	r22, 0x2A	; 42
    62b0:	c7 01       	movw	r24, r14
    62b2:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    62b6:	c0 e0       	ldi	r28, 0x00	; 0
    62b8:	d0 e0       	ldi	r29, 0x00	; 0
    62ba:	c4 31       	cpi	r28, 0x14	; 20
    62bc:	d1 05       	cpc	r29, r1
    62be:	a0 f4       	brcc	.+40     	; 0x62e8 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	{
		if(g_messages_text[STATION_ID][i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i]))))
    62c0:	fe 01       	movw	r30, r28
    62c2:	e6 51       	subi	r30, 0x16	; 22
    62c4:	fa 4b       	sbci	r31, 0xBA	; 186
    62c6:	15 89       	ldd	r17, Z+21	; 0x15
    62c8:	ce 01       	movw	r24, r28
    62ca:	86 5f       	subi	r24, 0xF6	; 246
    62cc:	9f 4f       	sbci	r25, 0xFF	; 255
    62ce:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    62d2:	18 17       	cp	r17, r24
    62d4:	39 f0       	breq	.+14     	; 0x62e4 <_ZN13EepromManager13saveAllEEPROMEv+0xf6>
		{
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    62d6:	4f ef       	ldi	r20, 0xFF	; 255
    62d8:	55 e4       	ldi	r21, 0x45	; 69
    62da:	6a e0       	ldi	r22, 0x0A	; 10
    62dc:	c7 01       	movw	r24, r14
    62de:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    62e2:	02 c0       	rjmp	.+4      	; 0x62e8 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    62e4:	21 96       	adiw	r28, 0x01	; 1
    62e6:	e9 cf       	rjmp	.-46     	; 0x62ba <_ZN13EepromManager13saveAllEEPROMEv+0xcc>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    62e8:	c0 e0       	ldi	r28, 0x00	; 0
    62ea:	d0 e0       	ldi	r29, 0x00	; 0
    62ec:	c8 30       	cpi	r28, 0x08	; 8
    62ee:	d1 05       	cpc	r29, r1
    62f0:	a0 f4       	brcc	.+40     	; 0x631a <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
	{
		if(g_unlockCode[i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i]))))
    62f2:	fe 01       	movw	r30, r28
    62f4:	e2 5c       	subi	r30, 0xC2	; 194
    62f6:	f9 4b       	sbci	r31, 0xB9	; 185
    62f8:	10 81       	ld	r17, Z
    62fa:	ce 01       	movw	r24, r28
    62fc:	81 5e       	subi	r24, 0xE1	; 225
    62fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6300:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    6304:	18 17       	cp	r17, r24
    6306:	39 f0       	breq	.+14     	; 0x6316 <_ZN13EepromManager13saveAllEEPROMEv+0x128>
		{
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    6308:	4e e3       	ldi	r20, 0x3E	; 62
    630a:	56 e4       	ldi	r21, 0x46	; 70
    630c:	6f e1       	ldi	r22, 0x1F	; 31
    630e:	c7 01       	movw	r24, r14
    6310:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    6314:	02 c0       	rjmp	.+4      	; 0x631a <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6316:	21 96       	adiw	r28, 0x01	; 1
    6318:	e9 cf       	rjmp	.-46     	; 0x62ec <_ZN13EepromManager13saveAllEEPROMEv+0xfe>
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
			break;
		}
	}
	
	if(g_80m_frequency != eeprom_read_dword(&(EepromManager::ee_vars.frequency)))
    631a:	8b e2       	ldi	r24, 0x2B	; 43
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	0e 94 19 52 	call	0xa432	; 0xa432 <eeprom_read_dword>
    6322:	00 91 2c 40 	lds	r16, 0x402C	; 0x80402c <g_80m_frequency>
    6326:	10 91 2d 40 	lds	r17, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    632a:	20 91 2e 40 	lds	r18, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    632e:	30 91 2f 40 	lds	r19, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    6332:	60 17       	cp	r22, r16
    6334:	71 07       	cpc	r23, r17
    6336:	82 07       	cpc	r24, r18
    6338:	93 07       	cpc	r25, r19
    633a:	31 f0       	breq	.+12     	; 0x6348 <_ZN13EepromManager13saveAllEEPROMEv+0x15a>
	{
		updateEEPROMVar(Frequency, (void*)&g_80m_frequency);
    633c:	4c e2       	ldi	r20, 0x2C	; 44
    633e:	50 e4       	ldi	r21, 0x40	; 64
    6340:	6b e2       	ldi	r22, 0x2B	; 43
    6342:	c7 01       	movw	r24, r14
    6344:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_rtty_offset != eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset)))
    6348:	8f e2       	ldi	r24, 0x2F	; 47
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	0e 94 19 52 	call	0xa432	; 0xa432 <eeprom_read_dword>
    6350:	00 91 32 40 	lds	r16, 0x4032	; 0x804032 <g_rtty_offset>
    6354:	10 91 33 40 	lds	r17, 0x4033	; 0x804033 <g_rtty_offset+0x1>
    6358:	20 91 34 40 	lds	r18, 0x4034	; 0x804034 <g_rtty_offset+0x2>
    635c:	30 91 35 40 	lds	r19, 0x4035	; 0x804035 <g_rtty_offset+0x3>
    6360:	60 17       	cp	r22, r16
    6362:	71 07       	cpc	r23, r17
    6364:	82 07       	cpc	r24, r18
    6366:	93 07       	cpc	r25, r19
    6368:	31 f0       	breq	.+12     	; 0x6376 <_ZN13EepromManager13saveAllEEPROMEv+0x188>
	{
		updateEEPROMVar(RTTY_offset, (void*)&g_rtty_offset);
    636a:	42 e3       	ldi	r20, 0x32	; 50
    636c:	50 e4       	ldi	r21, 0x40	; 64
    636e:	6f e2       	ldi	r22, 0x2F	; 47
    6370:	c7 01       	movw	r24, r14
    6372:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
    6376:	83 e3       	ldi	r24, 0x33	; 51
    6378:	90 e0       	ldi	r25, 0x00	; 0
    637a:	0e 94 20 52 	call	0xa440	; 0xa440 <eeprom_read_word>
    637e:	20 91 30 40 	lds	r18, 0x4030	; 0x804030 <g_80m_power_level_mW>
    6382:	30 91 31 40 	lds	r19, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    6386:	82 17       	cp	r24, r18
    6388:	93 07       	cpc	r25, r19
    638a:	31 f0       	breq	.+12     	; 0x6398 <_ZN13EepromManager13saveAllEEPROMEv+0x1aa>
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
    638c:	40 e3       	ldi	r20, 0x30	; 48
    638e:	50 e4       	ldi	r21, 0x40	; 64
    6390:	63 e3       	ldi	r22, 0x33	; 51
    6392:	c7 01       	movw	r24, r14
    6394:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
}
    6398:	df 91       	pop	r29
    639a:	cf 91       	pop	r28
    639c:	1f 91       	pop	r17
    639e:	0f 91       	pop	r16
    63a0:	ff 90       	pop	r15
    63a2:	ef 90       	pop	r14
    63a4:	08 95       	ret

000063a6 <_ZN13EepromManager11readNonVolsEv>:


bool EepromManager::readNonVols(void)
{
    63a6:	cf 93       	push	r28
    63a8:	df 93       	push	r29
	bool failure = true;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    63aa:	80 e0       	ldi	r24, 0x00	; 0
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	0e 94 20 52 	call	0xa440	; 0xa440 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    63b2:	8e 3c       	cpi	r24, 0xCE	; 206
    63b4:	91 05       	cpc	r25, r1
    63b6:	09 f0       	breq	.+2      	; 0x63ba <_ZN13EepromManager11readNonVolsEv+0x14>
    63b8:	dc c0       	rjmp	.+440    	; 0x6572 <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    63ba:	88 e2       	ldi	r24, 0x28	; 40
    63bc:	90 e0       	ldi	r25, 0x00	; 0
    63be:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    63c2:	85 31       	cpi	r24, 0x15	; 21
    63c4:	20 f4       	brcc	.+8      	; 0x63ce <_ZN13EepromManager11readNonVolsEv+0x28>
    63c6:	85 30       	cpi	r24, 0x05	; 5
    63c8:	18 f4       	brcc	.+6      	; 0x63d0 <_ZN13EepromManager11readNonVolsEv+0x2a>
    63ca:	85 e0       	ldi	r24, 0x05	; 5
    63cc:	01 c0       	rjmp	.+2      	; 0x63d0 <_ZN13EepromManager11readNonVolsEv+0x2a>
    63ce:	84 e1       	ldi	r24, 0x14	; 20
    63d0:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    63d4:	89 e2       	ldi	r24, 0x29	; 41
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    63dc:	82 31       	cpi	r24, 0x12	; 18
    63de:	08 f0       	brcs	.+2      	; 0x63e2 <_ZN13EepromManager11readNonVolsEv+0x3c>
    63e0:	81 e1       	ldi	r24, 0x11	; 17
    63e2:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    63e6:	82 e0       	ldi	r24, 0x02	; 2
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	0e 94 19 52 	call	0xa432	; 0xa432 <eeprom_read_dword>
    63ee:	60 93 35 46 	sts	0x4635, r22	; 0x804635 <g_event_start_epoch>
    63f2:	70 93 36 46 	sts	0x4636, r23	; 0x804636 <g_event_start_epoch+0x1>
    63f6:	80 93 37 46 	sts	0x4637, r24	; 0x804637 <g_event_start_epoch+0x2>
    63fa:	90 93 38 46 	sts	0x4638, r25	; 0x804638 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    63fe:	86 e0       	ldi	r24, 0x06	; 6
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	0e 94 19 52 	call	0xa432	; 0xa432 <eeprom_read_dword>
    6406:	60 93 39 46 	sts	0x4639, r22	; 0x804639 <g_event_finish_epoch>
    640a:	70 93 3a 46 	sts	0x463A, r23	; 0x80463a <g_event_finish_epoch+0x1>
    640e:	80 93 3b 46 	sts	0x463B, r24	; 0x80463b <g_event_finish_epoch+0x2>
    6412:	90 93 3c 46 	sts	0x463C, r25	; 0x80463c <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    6416:	8a e2       	ldi	r24, 0x2A	; 42
    6418:	90 e0       	ldi	r25, 0x00	; 0
    641a:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    641e:	80 93 3d 46 	sts	0x463D, r24	; 0x80463d <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    6422:	c0 e0       	ldi	r28, 0x00	; 0
    6424:	d0 e0       	ldi	r29, 0x00	; 0
    6426:	c4 31       	cpi	r28, 0x14	; 20
    6428:	d1 05       	cpc	r29, r1
    642a:	58 f4       	brcc	.+22     	; 0x6442 <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    642c:	ce 01       	movw	r24, r28
    642e:	86 5f       	subi	r24, 0xF6	; 246
    6430:	9f 4f       	sbci	r25, 0xFF	; 255
    6432:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    6436:	fe 01       	movw	r30, r28
    6438:	e6 51       	subi	r30, 0x16	; 22
    643a:	fa 4b       	sbci	r31, 0xBA	; 186
    643c:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    643e:	81 11       	cpse	r24, r1
    6440:	03 c0       	rjmp	.+6      	; 0x6448 <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    6442:	c0 e0       	ldi	r28, 0x00	; 0
    6444:	d0 e0       	ldi	r29, 0x00	; 0
    6446:	02 c0       	rjmp	.+4      	; 0x644c <_ZN13EepromManager11readNonVolsEv+0xa6>
    6448:	21 96       	adiw	r28, 0x01	; 1
    644a:	ed cf       	rjmp	.-38     	; 0x6426 <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    644c:	c8 30       	cpi	r28, 0x08	; 8
    644e:	d1 05       	cpc	r29, r1
    6450:	68 f4       	brcc	.+26     	; 0x646c <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    6452:	ce 01       	movw	r24, r28
    6454:	81 5e       	subi	r24, 0xE1	; 225
    6456:	9f 4f       	sbci	r25, 0xFF	; 255
    6458:	0e 94 11 52 	call	0xa422	; 0xa422 <eeprom_read_byte>
    645c:	fe 01       	movw	r30, r28
    645e:	e2 5c       	subi	r30, 0xC2	; 194
    6460:	f9 4b       	sbci	r31, 0xB9	; 185
    6462:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    6464:	88 23       	and	r24, r24
    6466:	11 f0       	breq	.+4      	; 0x646c <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6468:	21 96       	adiw	r28, 0x01	; 1
    646a:	f0 cf       	rjmp	.-32     	; 0x644c <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    646c:	8b e2       	ldi	r24, 0x2B	; 43
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	0e 94 19 52 	call	0xa432	; 0xa432 <eeprom_read_dword>
    6474:	61 30       	cpi	r22, 0x01	; 1
    6476:	29 e0       	ldi	r18, 0x09	; 9
    6478:	72 07       	cpc	r23, r18
    647a:	2d e3       	ldi	r18, 0x3D	; 61
    647c:	82 07       	cpc	r24, r18
    647e:	91 05       	cpc	r25, r1
    6480:	60 f4       	brcc	.+24     	; 0x649a <_ZN13EepromManager11readNonVolsEv+0xf4>
    6482:	60 3e       	cpi	r22, 0xE0	; 224
    6484:	27 e6       	ldi	r18, 0x67	; 103
    6486:	72 07       	cpc	r23, r18
    6488:	25 e3       	ldi	r18, 0x35	; 53
    648a:	82 07       	cpc	r24, r18
    648c:	91 05       	cpc	r25, r1
    648e:	50 f4       	brcc	.+20     	; 0x64a4 <_ZN13EepromManager11readNonVolsEv+0xfe>
    6490:	40 ee       	ldi	r20, 0xE0	; 224
    6492:	37 e6       	ldi	r19, 0x67	; 103
    6494:	25 e3       	ldi	r18, 0x35	; 53
    6496:	80 e0       	ldi	r24, 0x00	; 0
    6498:	09 c0       	rjmp	.+18     	; 0x64ac <_ZN13EepromManager11readNonVolsEv+0x106>
    649a:	40 e0       	ldi	r20, 0x00	; 0
    649c:	39 e0       	ldi	r19, 0x09	; 9
    649e:	2d e3       	ldi	r18, 0x3D	; 61
    64a0:	80 e0       	ldi	r24, 0x00	; 0
    64a2:	04 c0       	rjmp	.+8      	; 0x64ac <_ZN13EepromManager11readNonVolsEv+0x106>
    64a4:	46 2f       	mov	r20, r22
    64a6:	37 2f       	mov	r19, r23
    64a8:	28 2f       	mov	r18, r24
    64aa:	89 2f       	mov	r24, r25
    64ac:	40 93 2c 40 	sts	0x402C, r20	; 0x80402c <g_80m_frequency>
    64b0:	30 93 2d 40 	sts	0x402D, r19	; 0x80402d <g_80m_frequency+0x1>
    64b4:	20 93 2e 40 	sts	0x402E, r18	; 0x80402e <g_80m_frequency+0x2>
    64b8:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    64bc:	8f e2       	ldi	r24, 0x2F	; 47
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	0e 94 19 52 	call	0xa432	; 0xa432 <eeprom_read_dword>
    64c4:	60 93 32 40 	sts	0x4032, r22	; 0x804032 <g_rtty_offset>
    64c8:	70 93 33 40 	sts	0x4033, r23	; 0x804033 <g_rtty_offset+0x1>
    64cc:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <g_rtty_offset+0x2>
    64d0:	90 93 35 40 	sts	0x4035, r25	; 0x804035 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    64d4:	83 e3       	ldi	r24, 0x33	; 51
    64d6:	90 e0       	ldi	r25, 0x00	; 0
    64d8:	0e 94 20 52 	call	0xa440	; 0xa440 <eeprom_read_word>
    64dc:	89 38       	cpi	r24, 0x89	; 137
    64de:	23 e1       	ldi	r18, 0x13	; 19
    64e0:	92 07       	cpc	r25, r18
    64e2:	18 f0       	brcs	.+6      	; 0x64ea <_ZN13EepromManager11readNonVolsEv+0x144>
    64e4:	28 e8       	ldi	r18, 0x88	; 136
    64e6:	83 e1       	ldi	r24, 0x13	; 19
    64e8:	02 c0       	rjmp	.+4      	; 0x64ee <_ZN13EepromManager11readNonVolsEv+0x148>
    64ea:	28 2f       	mov	r18, r24
    64ec:	89 2f       	mov	r24, r25
    64ee:	20 93 30 40 	sts	0x4030, r18	; 0x804030 <g_80m_power_level_mW>
    64f2:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    64f6:	80 91 35 46 	lds	r24, 0x4635	; 0x804635 <g_event_start_epoch>
    64fa:	90 91 36 46 	lds	r25, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    64fe:	a0 91 37 46 	lds	r26, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    6502:	b0 91 38 46 	lds	r27, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    6506:	89 2b       	or	r24, r25
    6508:	8a 2b       	or	r24, r26
    650a:	8b 2b       	or	r24, r27
    650c:	b9 f0       	breq	.+46     	; 0x653c <_ZN13EepromManager11readNonVolsEv+0x196>
    650e:	40 91 39 46 	lds	r20, 0x4639	; 0x804639 <g_event_finish_epoch>
    6512:	50 91 3a 46 	lds	r21, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    6516:	60 91 3b 46 	lds	r22, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    651a:	70 91 3c 46 	lds	r23, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    651e:	80 91 35 46 	lds	r24, 0x4635	; 0x804635 <g_event_start_epoch>
    6522:	90 91 36 46 	lds	r25, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    6526:	a0 91 37 46 	lds	r26, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    652a:	b0 91 38 46 	lds	r27, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    652e:	84 17       	cp	r24, r20
    6530:	95 07       	cpc	r25, r21
    6532:	a6 07       	cpc	r26, r22
    6534:	b7 07       	cpc	r27, r23
    6536:	20 f4       	brcc	.+8      	; 0x6540 <_ZN13EepromManager11readNonVolsEv+0x19a>
    6538:	80 e0       	ldi	r24, 0x00	; 0
    653a:	03 c0       	rjmp	.+6      	; 0x6542 <_ZN13EepromManager11readNonVolsEv+0x19c>
    653c:	80 e0       	ldi	r24, 0x00	; 0
    653e:	01 c0       	rjmp	.+2      	; 0x6542 <_ZN13EepromManager11readNonVolsEv+0x19c>
    6540:	81 e0       	ldi	r24, 0x01	; 1
    6542:	88 23       	and	r24, r24
    6544:	c1 f0       	breq	.+48     	; 0x6576 <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    6546:	80 91 35 46 	lds	r24, 0x4635	; 0x804635 <g_event_start_epoch>
    654a:	90 91 36 46 	lds	r25, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    654e:	a0 91 37 46 	lds	r26, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    6552:	b0 91 38 46 	lds	r27, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    6556:	80 58       	subi	r24, 0x80	; 128
    6558:	9e 4a       	sbci	r25, 0xAE	; 174
    655a:	ae 4f       	sbci	r26, 0xFE	; 254
    655c:	bf 4f       	sbci	r27, 0xFF	; 255
    655e:	80 93 39 46 	sts	0x4639, r24	; 0x804639 <g_event_finish_epoch>
    6562:	90 93 3a 46 	sts	0x463A, r25	; 0x80463a <g_event_finish_epoch+0x1>
    6566:	a0 93 3b 46 	sts	0x463B, r26	; 0x80463b <g_event_finish_epoch+0x2>
    656a:	b0 93 3c 46 	sts	0x463C, r27	; 0x80463c <g_event_finish_epoch+0x3>
		}

		failure = false;
    656e:	80 e0       	ldi	r24, 0x00	; 0
    6570:	03 c0       	rjmp	.+6      	; 0x6578 <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


bool EepromManager::readNonVols(void)
{
	bool failure = true;
    6572:	81 e0       	ldi	r24, 0x01	; 1
    6574:	01 c0       	rjmp	.+2      	; 0x6578 <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = false;
    6576:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    6578:	df 91       	pop	r29
    657a:	cf 91       	pop	r28
    657c:	08 95       	ret

0000657e <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	bool EepromManager::initializeEEPROMVars(void)
	{
    657e:	ef 92       	push	r14
    6580:	ff 92       	push	r15
    6582:	0f 93       	push	r16
    6584:	1f 93       	push	r17
    6586:	cf 93       	push	r28
    6588:	df 93       	push	r29
		bool err = false;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    658a:	80 e0       	ldi	r24, 0x00	; 0
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	0e 94 20 52 	call	0xa440	; 0xa440 <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    6592:	8e 3c       	cpi	r24, 0xCE	; 206
    6594:	91 05       	cpc	r25, r1
    6596:	09 f4       	brne	.+2      	; 0x659a <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    6598:	aa c0       	rjmp	.+340    	; 0x66ee <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    659a:	84 e1       	ldi	r24, 0x14	; 20
    659c:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    65a0:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    65a4:	88 e2       	ldi	r24, 0x28	; 40
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    65ac:	81 e0       	ldi	r24, 0x01	; 1
    65ae:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    65b2:	60 91 1b 40 	lds	r22, 0x401B	; 0x80401b <g_fox>
    65b6:	89 e2       	ldi	r24, 0x29	; 41
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    65be:	10 92 35 46 	sts	0x4635, r1	; 0x804635 <g_event_start_epoch>
    65c2:	10 92 36 46 	sts	0x4636, r1	; 0x804636 <g_event_start_epoch+0x1>
    65c6:	10 92 37 46 	sts	0x4637, r1	; 0x804637 <g_event_start_epoch+0x2>
    65ca:	10 92 38 46 	sts	0x4638, r1	; 0x804638 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    65ce:	40 91 35 46 	lds	r20, 0x4635	; 0x804635 <g_event_start_epoch>
    65d2:	50 91 36 46 	lds	r21, 0x4636	; 0x804636 <g_event_start_epoch+0x1>
    65d6:	60 91 37 46 	lds	r22, 0x4637	; 0x804637 <g_event_start_epoch+0x2>
    65da:	70 91 38 46 	lds	r23, 0x4638	; 0x804638 <g_event_start_epoch+0x3>
    65de:	82 e0       	ldi	r24, 0x02	; 2
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	0e 94 59 30 	call	0x60b2	; 0x60b2 <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    65e6:	10 92 39 46 	sts	0x4639, r1	; 0x804639 <g_event_finish_epoch>
    65ea:	10 92 3a 46 	sts	0x463A, r1	; 0x80463a <g_event_finish_epoch+0x1>
    65ee:	10 92 3b 46 	sts	0x463B, r1	; 0x80463b <g_event_finish_epoch+0x2>
    65f2:	10 92 3c 46 	sts	0x463C, r1	; 0x80463c <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    65f6:	40 91 39 46 	lds	r20, 0x4639	; 0x804639 <g_event_finish_epoch>
    65fa:	50 91 3a 46 	lds	r21, 0x463A	; 0x80463a <g_event_finish_epoch+0x1>
    65fe:	60 91 3b 46 	lds	r22, 0x463B	; 0x80463b <g_event_finish_epoch+0x2>
    6602:	70 91 3c 46 	lds	r23, 0x463C	; 0x80463c <g_event_finish_epoch+0x3>
    6606:	86 e0       	ldi	r24, 0x06	; 6
    6608:	90 e0       	ldi	r25, 0x00	; 0
    660a:	0e 94 59 30 	call	0x60b2	; 0x60b2 <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    660e:	10 92 3d 46 	sts	0x463D, r1	; 0x80463d <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    6612:	60 91 3d 46 	lds	r22, 0x463D	; 0x80463d <g_utc_offset>
    6616:	8a e2       	ldi	r24, 0x2A	; 42
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    661e:	10 92 ff 45 	sts	0x45FF, r1	; 0x8045ff <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    6622:	60 e0       	ldi	r22, 0x00	; 0
    6624:	8a e0       	ldi	r24, 0x0A	; 10
    6626:	90 e0       	ldi	r25, 0x00	; 0
    6628:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    662c:	e5 ea       	ldi	r30, 0xA5	; 165
    662e:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6630:	c0 e0       	ldi	r28, 0x00	; 0
    6632:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    6634:	8f e1       	ldi	r24, 0x1F	; 31
    6636:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6638:	c4 30       	cpi	r28, 0x04	; 4
    663a:	d1 05       	cpc	r29, r1
    663c:	90 f4       	brcc	.+36     	; 0x6662 <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    663e:	df 01       	movw	r26, r30
    6640:	2d 91       	ld	r18, X+
    6642:	8d 01       	movw	r16, r26
    6644:	de 01       	movw	r26, r28
    6646:	a2 5c       	subi	r26, 0xC2	; 194
    6648:	b9 4b       	sbci	r27, 0xB9	; 185
    664a:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    664c:	60 81       	ld	r22, Z
    664e:	7c 01       	movw	r14, r24
    6650:	bf ef       	ldi	r27, 0xFF	; 255
    6652:	eb 1a       	sub	r14, r27
    6654:	fb 0a       	sbc	r15, r27
    6656:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    665a:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    665c:	f8 01       	movw	r30, r16
    665e:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6660:	eb cf       	rjmp	.-42     	; 0x6638 <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    6662:	60 e0       	ldi	r22, 0x00	; 0
    6664:	0e 94 34 30 	call	0x6068	; 0x6068 <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    6668:	c2 5c       	subi	r28, 0xC2	; 194
    666a:	d9 4b       	sbci	r29, 0xB9	; 185
    666c:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    666e:	80 e2       	ldi	r24, 0x20	; 32
    6670:	94 e0       	ldi	r25, 0x04	; 4
    6672:	a6 e3       	ldi	r26, 0x36	; 54
    6674:	b0 e0       	ldi	r27, 0x00	; 0
    6676:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    667a:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    667e:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    6682:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    6686:	40 e2       	ldi	r20, 0x20	; 32
    6688:	54 e0       	ldi	r21, 0x04	; 4
    668a:	66 e3       	ldi	r22, 0x36	; 54
    668c:	70 e0       	ldi	r23, 0x00	; 0
    668e:	8b e2       	ldi	r24, 0x2B	; 43
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	0e 94 59 30 	call	0x60b2	; 0x60b2 <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    6696:	8a ea       	ldi	r24, 0xAA	; 170
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	a0 e0       	ldi	r26, 0x00	; 0
    669c:	b0 e0       	ldi	r27, 0x00	; 0
    669e:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <g_rtty_offset>
    66a2:	90 93 33 40 	sts	0x4033, r25	; 0x804033 <g_rtty_offset+0x1>
    66a6:	a0 93 34 40 	sts	0x4034, r26	; 0x804034 <g_rtty_offset+0x2>
    66aa:	b0 93 35 40 	sts	0x4035, r27	; 0x804035 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    66ae:	40 91 2c 40 	lds	r20, 0x402C	; 0x80402c <g_80m_frequency>
    66b2:	50 91 2d 40 	lds	r21, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    66b6:	60 91 2e 40 	lds	r22, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    66ba:	70 91 2f 40 	lds	r23, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    66be:	8b e2       	ldi	r24, 0x2B	; 43
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	0e 94 59 30 	call	0x60b2	; 0x60b2 <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    66c6:	84 ef       	ldi	r24, 0xF4	; 244
    66c8:	91 e0       	ldi	r25, 0x01	; 1
    66ca:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    66ce:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    66d2:	44 ef       	ldi	r20, 0xF4	; 244
    66d4:	51 e0       	ldi	r21, 0x01	; 1
    66d6:	60 e0       	ldi	r22, 0x00	; 0
    66d8:	70 e0       	ldi	r23, 0x00	; 0
    66da:	83 e3       	ldi	r24, 0x33	; 51
    66dc:	90 e0       	ldi	r25, 0x00	; 0
    66de:	0e 94 59 30 	call	0x60b2	; 0x60b2 <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    66e2:	6e ec       	ldi	r22, 0xCE	; 206
    66e4:	70 e0       	ldi	r23, 0x00	; 0
    66e6:	80 e0       	ldi	r24, 0x00	; 0
    66e8:	90 e0       	ldi	r25, 0x00	; 0
    66ea:	0e 94 46 30 	call	0x608c	; 0x608c <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    66ee:	80 e0       	ldi	r24, 0x00	; 0
    66f0:	df 91       	pop	r29
    66f2:	cf 91       	pop	r28
    66f4:	1f 91       	pop	r17
    66f6:	0f 91       	pop	r16
    66f8:	ff 90       	pop	r15
    66fa:	ef 90       	pop	r14
    66fc:	08 95       	ret

000066fe <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    66fe:	ef 92       	push	r14
    6700:	ff 92       	push	r15
    6702:	0f 93       	push	r16
    6704:	1f 93       	push	r17
    6706:	cf 93       	push	r28
    6708:	df 93       	push	r29
    670a:	e4 2e       	mov	r14, r20
    670c:	f5 2e       	mov	r15, r21
    670e:	d6 2f       	mov	r29, r22
    6710:	c7 2f       	mov	r28, r23
    6712:	00 93 6c 46 	sts	0x466C, r16	; 0x80466c <_SAMPLING_FREQUENCY>
    6716:	10 93 6d 46 	sts	0x466D, r17	; 0x80466d <_SAMPLING_FREQUENCY+0x1>
    671a:	20 93 6e 46 	sts	0x466E, r18	; 0x80466e <_SAMPLING_FREQUENCY+0x2>
    671e:	30 93 6f 46 	sts	0x466F, r19	; 0x80466f <_SAMPLING_FREQUENCY+0x3>
    6722:	20 e0       	ldi	r18, 0x00	; 0
    6724:	30 e0       	ldi	r19, 0x00	; 0
    6726:	41 e5       	ldi	r20, 0x51	; 81
    6728:	53 e4       	ldi	r21, 0x43	; 67
    672a:	6e 2d       	mov	r22, r14
    672c:	7f 2d       	mov	r23, r15
    672e:	8d 2f       	mov	r24, r29
    6730:	9c 2f       	mov	r25, r28
    6732:	0e 94 d3 4a 	call	0x95a6	; 0x95a6 <__gesf2>
    6736:	18 16       	cp	r1, r24
    6738:	8c f0       	brlt	.+34     	; 0x675c <_ZN8GoertzelC1Eff+0x5e>
    673a:	20 e0       	ldi	r18, 0x00	; 0
    673c:	30 e0       	ldi	r19, 0x00	; 0
    673e:	48 ec       	ldi	r20, 0xC8	; 200
    6740:	52 e4       	ldi	r21, 0x42	; 66
    6742:	6e 2d       	mov	r22, r14
    6744:	7f 2d       	mov	r23, r15
    6746:	8d 2f       	mov	r24, r29
    6748:	9c 2f       	mov	r25, r28
    674a:	0e 94 33 49 	call	0x9266	; 0x9266 <__cmpsf2>
    674e:	88 23       	and	r24, r24
    6750:	4c f4       	brge	.+18     	; 0x6764 <_ZN8GoertzelC1Eff+0x66>
    6752:	e1 2c       	mov	r14, r1
    6754:	f1 2c       	mov	r15, r1
    6756:	d8 ec       	ldi	r29, 0xC8	; 200
    6758:	c2 e4       	ldi	r28, 0x42	; 66
    675a:	04 c0       	rjmp	.+8      	; 0x6764 <_ZN8GoertzelC1Eff+0x66>
    675c:	e1 2c       	mov	r14, r1
    675e:	f1 2c       	mov	r15, r1
    6760:	d1 e5       	ldi	r29, 0x51	; 81
    6762:	c3 e4       	ldi	r28, 0x43	; 67
    6764:	6e 2d       	mov	r22, r14
    6766:	7f 2d       	mov	r23, r15
    6768:	8d 2f       	mov	r24, r29
    676a:	9c 2f       	mov	r25, r28
    676c:	0e 94 aa 49 	call	0x9354	; 0x9354 <__fixsfsi>
    6770:	60 93 6a 46 	sts	0x466A, r22	; 0x80466a <_N>
    6774:	70 93 6b 46 	sts	0x466B, r23	; 0x80466b <_N+0x1>
    6778:	80 91 6a 46 	lds	r24, 0x466A	; 0x80466a <_N>
    677c:	90 91 6b 46 	lds	r25, 0x466B	; 0x80466b <_N+0x1>
    6780:	88 0f       	add	r24, r24
    6782:	99 1f       	adc	r25, r25
    6784:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <malloc>
    6788:	80 93 65 46 	sts	0x4665, r24	; 0x804665 <testData>
    678c:	90 93 66 46 	sts	0x4666, r25	; 0x804666 <testData+0x1>
    6790:	df 91       	pop	r29
    6792:	cf 91       	pop	r28
    6794:	1f 91       	pop	r17
    6796:	0f 91       	pop	r16
    6798:	ff 90       	pop	r15
    679a:	ef 90       	pop	r14
    679c:	08 95       	ret

0000679e <_ZN8GoertzelD1Ev>:
    679e:	80 91 65 46 	lds	r24, 0x4665	; 0x804665 <testData>
    67a2:	90 91 66 46 	lds	r25, 0x4666	; 0x804666 <testData+0x1>
    67a6:	0e 94 88 4c 	call	0x9910	; 0x9910 <free>
    67aa:	08 95       	ret

000067ac <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    67ac:	80 91 67 46 	lds	r24, 0x4667	; 0x804667 <_samplesReady>
    67b0:	88 23       	and	r24, r24
    67b2:	19 f0       	breq	.+6      	; 0x67ba <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    67b4:	80 91 67 46 	lds	r24, 0x4667	; 0x804667 <_samplesReady>
    67b8:	08 95       	ret
	}

	testData[_index] = data;
    67ba:	e0 91 68 46 	lds	r30, 0x4668	; 0x804668 <_index>
    67be:	f0 91 69 46 	lds	r31, 0x4669	; 0x804669 <_index+0x1>
    67c2:	ee 0f       	add	r30, r30
    67c4:	ff 1f       	adc	r31, r31
    67c6:	80 91 65 46 	lds	r24, 0x4665	; 0x804665 <testData>
    67ca:	90 91 66 46 	lds	r25, 0x4666	; 0x804666 <testData+0x1>
    67ce:	e8 0f       	add	r30, r24
    67d0:	f9 1f       	adc	r31, r25
    67d2:	60 83       	st	Z, r22
    67d4:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    67d6:	80 91 68 46 	lds	r24, 0x4668	; 0x804668 <_index>
    67da:	90 91 69 46 	lds	r25, 0x4669	; 0x804669 <_index+0x1>
    67de:	01 96       	adiw	r24, 0x01	; 1
    67e0:	80 93 68 46 	sts	0x4668, r24	; 0x804668 <_index>
    67e4:	90 93 69 46 	sts	0x4669, r25	; 0x804669 <_index+0x1>
	if(_index >= _N)
    67e8:	20 91 68 46 	lds	r18, 0x4668	; 0x804668 <_index>
    67ec:	30 91 69 46 	lds	r19, 0x4669	; 0x804669 <_index+0x1>
    67f0:	80 91 6a 46 	lds	r24, 0x466A	; 0x80466a <_N>
    67f4:	90 91 6b 46 	lds	r25, 0x466B	; 0x80466b <_N+0x1>
    67f8:	28 17       	cp	r18, r24
    67fa:	39 07       	cpc	r19, r25
    67fc:	3c f0       	brlt	.+14     	; 0x680c <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    67fe:	10 92 68 46 	sts	0x4668, r1	; 0x804668 <_index>
    6802:	10 92 69 46 	sts	0x4669, r1	; 0x804669 <_index+0x1>
		_samplesReady = true;
    6806:	81 e0       	ldi	r24, 0x01	; 1
    6808:	80 93 67 46 	sts	0x4667, r24	; 0x804667 <_samplesReady>
	}

	return(_samplesReady);
    680c:	80 91 67 46 	lds	r24, 0x4667	; 0x804667 <_samplesReady>
}
    6810:	08 95       	ret

00006812 <_ZL11i2c_0_WaitWv>:

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
    6812:	8c e2       	ldi	r24, 0x2C	; 44
    6814:	91 e0       	ldi	r25, 0x01	; 1
    6816:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    681a:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	PORTC_set_pin_pull_mode(3, PORT_PULL_UP);
}

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
    681e:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 300;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    6820:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6824:	90 7c       	andi	r25, 0xC0	; 192
    6826:	31 f0       	breq	.+12     	; 0x6834 <_ZL11i2c_0_WaitWv+0x22>
		{
			if(!(TWI0.MSTATUS & TWI_RXACK_bm))
    6828:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    682c:	84 fd       	sbrc	r24, 4
    682e:	07 c0       	rjmp	.+14     	; 0x683e <_ZL11i2c_0_WaitWv+0x2c>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    6830:	81 e0       	ldi	r24, 0x01	; 1
    6832:	08 c0       	rjmp	.+16     	; 0x6844 <_ZL11i2c_0_WaitWv+0x32>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6834:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6838:	9c 70       	andi	r25, 0x0C	; 12
    683a:	19 f4       	brne	.+6      	; 0x6842 <_ZL11i2c_0_WaitWv+0x30>
    683c:	03 c0       	rjmp	.+6      	; 0x6844 <_ZL11i2c_0_WaitWv+0x32>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    683e:	82 e0       	ldi	r24, 0x02	; 2
    6840:	01 c0       	rjmp	.+2      	; 0x6844 <_ZL11i2c_0_WaitWv+0x32>
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    6842:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    6844:	81 11       	cpse	r24, r1
    6846:	08 c0       	rjmp	.+16     	; 0x6858 <_ZL11i2c_0_WaitWv+0x46>
    6848:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    684c:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6850:	23 2b       	or	r18, r19
    6852:	21 f4       	brne	.+8      	; 0x685c <_ZL11i2c_0_WaitWv+0x4a>
    6854:	90 e0       	ldi	r25, 0x00	; 0
    6856:	03 c0       	rjmp	.+6      	; 0x685e <_ZL11i2c_0_WaitWv+0x4c>
    6858:	90 e0       	ldi	r25, 0x00	; 0
    685a:	01 c0       	rjmp	.+2      	; 0x685e <_ZL11i2c_0_WaitWv+0x4c>
    685c:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
	
	do
    685e:	91 11       	cpse	r25, r1
    6860:	df cf       	rjmp	.-66     	; 0x6820 <_ZL11i2c_0_WaitWv+0xe>
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	if(!g_i2c0_timeout_ticks) 
    6862:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    6866:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    686a:	23 2b       	or	r18, r19
    686c:	09 f4       	brne	.+2      	; 0x6870 <_ZL11i2c_0_WaitWv+0x5e>
	{
		state = I2C_ERROR;
    686e:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	return state;
}
    6870:	08 95       	ret

00006872 <_ZL11i2c_0_WaitRv>:

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    6872:	88 ec       	ldi	r24, 0xC8	; 200
    6874:	90 e0       	ldi	r25, 0x00	; 0
    6876:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    687a:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
    687e:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    6880:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6884:	90 7c       	andi	r25, 0xC0	; 192
    6886:	29 f4       	brne	.+10     	; 0x6892 <_ZL11i2c_0_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6888:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    688c:	9c 70       	andi	r25, 0x0C	; 12
    688e:	19 f4       	brne	.+6      	; 0x6896 <_ZL11i2c_0_WaitRv+0x24>
    6890:	03 c0       	rjmp	.+6      	; 0x6898 <_ZL11i2c_0_WaitRv+0x26>
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    6892:	83 e0       	ldi	r24, 0x03	; 3
    6894:	01 c0       	rjmp	.+2      	; 0x6898 <_ZL11i2c_0_WaitRv+0x26>
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    6896:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    6898:	81 11       	cpse	r24, r1
    689a:	08 c0       	rjmp	.+16     	; 0x68ac <_ZL11i2c_0_WaitRv+0x3a>
    689c:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    68a0:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    68a4:	23 2b       	or	r18, r19
    68a6:	21 f4       	brne	.+8      	; 0x68b0 <_ZL11i2c_0_WaitRv+0x3e>
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	03 c0       	rjmp	.+6      	; 0x68b2 <_ZL11i2c_0_WaitRv+0x40>
    68ac:	90 e0       	ldi	r25, 0x00	; 0
    68ae:	01 c0       	rjmp	.+2      	; 0x68b2 <_ZL11i2c_0_WaitRv+0x40>
    68b0:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    68b2:	91 11       	cpse	r25, r1
    68b4:	e5 cf       	rjmp	.-54     	; 0x6880 <_ZL11i2c_0_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    68b6:	08 95       	ret

000068b8 <_ZL11i2c_1_WaitWv>:

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
    68b8:	88 ec       	ldi	r24, 0xC8	; 200
    68ba:	90 e0       	ldi	r25, 0x00	; 0
    68bc:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    68c0:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
	PORTB_set_pin_pull_mode(3, PORT_PULL_UP);
}

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
    68c4:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c1_timeout_ticks = 200;
	
	do
	{
		uint8_t stat = TWI1.MSTATUS;
    68c6:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
		if(stat & (TWI_WIF_bm | TWI_RIF_bm))
    68ca:	29 2f       	mov	r18, r25
    68cc:	20 7c       	andi	r18, 0xC0	; 192
    68ce:	21 f0       	breq	.+8      	; 0x68d8 <_ZL11i2c_1_WaitWv+0x20>
		{
			if(!(stat & TWI_RXACK_bm))
    68d0:	94 fd       	sbrc	r25, 4
    68d2:	05 c0       	rjmp	.+10     	; 0x68de <_ZL11i2c_1_WaitWv+0x26>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    68d4:	81 e0       	ldi	r24, 0x01	; 1
    68d6:	06 c0       	rjmp	.+12     	; 0x68e4 <_ZL11i2c_1_WaitWv+0x2c>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    68d8:	9c 70       	andi	r25, 0x0C	; 12
    68da:	19 f4       	brne	.+6      	; 0x68e2 <_ZL11i2c_1_WaitWv+0x2a>
    68dc:	03 c0       	rjmp	.+6      	; 0x68e4 <_ZL11i2c_1_WaitWv+0x2c>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    68de:	82 e0       	ldi	r24, 0x02	; 2
    68e0:	01 c0       	rjmp	.+2      	; 0x68e4 <_ZL11i2c_1_WaitWv+0x2c>
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    68e2:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c1_timeout_ticks);
    68e4:	81 11       	cpse	r24, r1
    68e6:	08 c0       	rjmp	.+16     	; 0x68f8 <_ZL11i2c_1_WaitWv+0x40>
    68e8:	20 91 1e 40 	lds	r18, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    68ec:	30 91 1f 40 	lds	r19, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    68f0:	23 2b       	or	r18, r19
    68f2:	21 f4       	brne	.+8      	; 0x68fc <_ZL11i2c_1_WaitWv+0x44>
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	03 c0       	rjmp	.+6      	; 0x68fe <_ZL11i2c_1_WaitWv+0x46>
    68f8:	90 e0       	ldi	r25, 0x00	; 0
    68fa:	01 c0       	rjmp	.+2      	; 0x68fe <_ZL11i2c_1_WaitWv+0x46>
    68fc:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
	
	do
    68fe:	91 11       	cpse	r25, r1
    6900:	e2 cf       	rjmp	.-60     	; 0x68c6 <_ZL11i2c_1_WaitWv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c1_timeout_ticks);
	
	return state;
}
    6902:	08 95       	ret

00006904 <_ZL11I2C_1_WaitRv>:

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    6904:	88 ec       	ldi	r24, 0xC8	; 200
    6906:	90 e0       	ldi	r25, 0x00	; 0
    6908:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    690c:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
    6910:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    6912:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    6916:	90 7c       	andi	r25, 0xC0	; 192
    6918:	29 f4       	brne	.+10     	; 0x6924 <_ZL11I2C_1_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    691a:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    691e:	9c 70       	andi	r25, 0x0C	; 12
    6920:	19 f4       	brne	.+6      	; 0x6928 <_ZL11I2C_1_WaitRv+0x24>
    6922:	03 c0       	rjmp	.+6      	; 0x692a <_ZL11I2C_1_WaitRv+0x26>
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    6924:	83 e0       	ldi	r24, 0x03	; 3
    6926:	01 c0       	rjmp	.+2      	; 0x692a <_ZL11I2C_1_WaitRv+0x26>
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    6928:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    692a:	81 11       	cpse	r24, r1
    692c:	08 c0       	rjmp	.+16     	; 0x693e <_ZL11I2C_1_WaitRv+0x3a>
    692e:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    6932:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6936:	23 2b       	or	r18, r19
    6938:	21 f4       	brne	.+8      	; 0x6942 <_ZL11I2C_1_WaitRv+0x3e>
    693a:	90 e0       	ldi	r25, 0x00	; 0
    693c:	03 c0       	rjmp	.+6      	; 0x6944 <_ZL11I2C_1_WaitRv+0x40>
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	01 c0       	rjmp	.+2      	; 0x6944 <_ZL11I2C_1_WaitRv+0x40>
    6942:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    6944:	91 11       	cpse	r25, r1
    6946:	e5 cf       	rjmp	.-54     	; 0x6912 <_ZL11I2C_1_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    6948:	08 95       	ret

0000694a <I2C_0_Init>:
/************************************************************************/

void I2C_0_Init(void)
{
	/* Select I2C pins PC2/PC3 */
	PORTMUX.TWIROUTEA &= 0x0A;
    694a:	e0 ee       	ldi	r30, 0xE0	; 224
    694c:	f5 e0       	ldi	r31, 0x05	; 5
    694e:	85 81       	ldd	r24, Z+5	; 0x05
    6950:	8a 70       	andi	r24, 0x0A	; 10
    6952:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x02;
    6954:	85 81       	ldd	r24, Z+5	; 0x05
    6956:	82 60       	ori	r24, 0x02	; 2
    6958:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI0.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    695a:	e0 e0       	ldi	r30, 0x00	; 0
    695c:	f9 e0       	ldi	r31, 0x09	; 9
    695e:	8f e6       	ldi	r24, 0x6F	; 111
    6960:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI0.MCTRLA = TWI_ENABLE_bm;
    6962:	81 e0       	ldi	r24, 0x01	; 1
    6964:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI0.MADDR = 0x00;
    6966:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI0.MDATA = 0x00;
    6968:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    696a:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    696c:	e2 e5       	ldi	r30, 0x52	; 82
    696e:	f4 e0       	ldi	r31, 0x04	; 4
    6970:	80 81       	ld	r24, Z
    6972:	88 60       	ori	r24, 0x08	; 8
    6974:	80 83       	st	Z, r24
    6976:	e3 e5       	ldi	r30, 0x53	; 83
    6978:	f4 e0       	ldi	r31, 0x04	; 4
    697a:	80 81       	ld	r24, Z
    697c:	88 60       	ori	r24, 0x08	; 8
    697e:	80 83       	st	Z, r24
    6980:	08 95       	ret

00006982 <I2C_0_GetData>:
	return retVal;
}

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_0_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6982:	ef 92       	push	r14
    6984:	ff 92       	push	r15
    6986:	1f 93       	push	r17
    6988:	cf 93       	push	r28
    698a:	df 93       	push	r29
    698c:	c8 2f       	mov	r28, r24
    698e:	d6 2f       	mov	r29, r22
    6990:	7a 01       	movw	r14, r20
    6992:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
    6994:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6998:	0e 94 09 34 	call	0x6812	; 0x6812 <_ZL11i2c_0_WaitWv>
    699c:	81 30       	cpi	r24, 0x01	; 1
    699e:	61 f5       	brne	.+88     	; 0x69f8 <I2C_0_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    69a0:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    69a4:	0e 94 09 34 	call	0x6812	; 0x6812 <_ZL11i2c_0_WaitWv>
    69a8:	81 30       	cpi	r24, 0x01	; 1
    69aa:	41 f5       	brne	.+80     	; 0x69fc <I2C_0_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
    69ac:	c1 60       	ori	r28, 0x01	; 1
    69ae:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    69b2:	0e 94 09 34 	call	0x6812	; 0x6812 <_ZL11i2c_0_WaitWv>
    69b6:	81 30       	cpi	r24, 0x01	; 1
    69b8:	19 f5       	brne	.+70     	; 0x6a00 <I2C_0_GetData+0x7e>
	{
		return retVal;
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    69ba:	11 23       	and	r17, r17
    69bc:	19 f1       	breq	.+70     	; 0x6a04 <I2C_0_GetData+0x82>
    69be:	e1 14       	cp	r14, r1
    69c0:	f1 04       	cpc	r15, r1
    69c2:	11 f1       	breq	.+68     	; 0x6a08 <I2C_0_GetData+0x86>
    69c4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    69c6:	df ef       	ldi	r29, 0xFF	; 255
    69c8:	d1 0f       	add	r29, r17
    69ca:	11 23       	and	r17, r17
    69cc:	f9 f0       	breq	.+62     	; 0x6a0c <I2C_0_GetData+0x8a>
		{
			if(i2c_0_WaitR() == I2C_READY)
    69ce:	0e 94 39 34 	call	0x6872	; 0x6872 <_ZL11i2c_0_WaitRv>
    69d2:	83 30       	cpi	r24, 0x03	; 3
    69d4:	e9 f4       	brne	.+58     	; 0x6a10 <I2C_0_GetData+0x8e>
			{
				*pData = TWI0.MDATA;
    69d6:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    69da:	f7 01       	movw	r30, r14
    69dc:	80 83       	st	Z, r24
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    69de:	d1 11       	cpse	r29, r1
    69e0:	02 c0       	rjmp	.+4      	; 0x69e6 <I2C_0_GetData+0x64>
    69e2:	87 e0       	ldi	r24, 0x07	; 7
    69e4:	01 c0       	rjmp	.+2      	; 0x69e8 <I2C_0_GetData+0x66>
    69e6:	82 e0       	ldi	r24, 0x02	; 2
    69e8:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
				retVal++;
    69ec:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    69ee:	ff ef       	ldi	r31, 0xFF	; 255
    69f0:	ef 1a       	sub	r14, r31
    69f2:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    69f4:	1d 2f       	mov	r17, r29
    69f6:	e7 cf       	rjmp	.-50     	; 0x69c6 <I2C_0_GetData+0x44>
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    69f8:	8f ef       	ldi	r24, 0xFF	; 255
    69fa:	0b c0       	rjmp	.+22     	; 0x6a12 <I2C_0_GetData+0x90>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    69fc:	8f ef       	ldi	r24, 0xFF	; 255
    69fe:	09 c0       	rjmp	.+18     	; 0x6a12 <I2C_0_GetData+0x90>
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a00:	8f ef       	ldi	r24, 0xFF	; 255
    6a02:	07 c0       	rjmp	.+14     	; 0x6a12 <I2C_0_GetData+0x90>
	}
	
	retVal = 0;
    6a04:	80 e0       	ldi	r24, 0x00	; 0
    6a06:	05 c0       	rjmp	.+10     	; 0x6a12 <I2C_0_GetData+0x90>
    6a08:	80 e0       	ldi	r24, 0x00	; 0
    6a0a:	03 c0       	rjmp	.+6      	; 0x6a12 <I2C_0_GetData+0x90>
    6a0c:	8c 2f       	mov	r24, r28
    6a0e:	01 c0       	rjmp	.+2      	; 0x6a12 <I2C_0_GetData+0x90>
    6a10:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6a12:	df 91       	pop	r29
    6a14:	cf 91       	pop	r28
    6a16:	1f 91       	pop	r17
    6a18:	ff 90       	pop	r15
    6a1a:	ef 90       	pop	r14
    6a1c:	08 95       	ret

00006a1e <I2C_0_EndSession>:

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    6a1e:	83 e0       	ldi	r24, 0x03	; 3
    6a20:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    6a24:	08 95       	ret

00006a26 <I2C_0_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_0_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6a26:	ff 92       	push	r15
    6a28:	0f 93       	push	r16
    6a2a:	1f 93       	push	r17
    6a2c:	cf 93       	push	r28
    6a2e:	df 93       	push	r29
    6a30:	c6 2f       	mov	r28, r22
    6a32:	8a 01       	movw	r16, r20
    6a34:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
    6a36:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6a3a:	0e 94 09 34 	call	0x6812	; 0x6812 <_ZL11i2c_0_WaitWv>
    6a3e:	81 30       	cpi	r24, 0x01	; 1
    6a40:	29 f5       	brne	.+74     	; 0x6a8c <I2C_0_SendData+0x66>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    6a42:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    6a46:	0e 94 09 34 	call	0x6812	; 0x6812 <_ZL11i2c_0_WaitWv>
    6a4a:	81 30       	cpi	r24, 0x01	; 1
    6a4c:	09 f5       	brne	.+66     	; 0x6a90 <I2C_0_SendData+0x6a>
	{
		return retVal;
	}

	retVal = 0;
	if((len != 0) && (pData != null))
    6a4e:	dd 23       	and	r29, r29
    6a50:	09 f1       	breq	.+66     	; 0x6a94 <I2C_0_SendData+0x6e>
    6a52:	01 15       	cp	r16, r1
    6a54:	11 05       	cpc	r17, r1
    6a56:	21 f4       	brne	.+8      	; 0x6a60 <I2C_0_SendData+0x3a>
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}

	retVal = 0;
    6a58:	80 e0       	ldi	r24, 0x00	; 0
    6a5a:	21 c0       	rjmp	.+66     	; 0x6a9e <I2C_0_SendData+0x78>
    6a5c:	df 2d       	mov	r29, r15
    6a5e:	01 c0       	rjmp	.+2      	; 0x6a62 <I2C_0_SendData+0x3c>
    6a60:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != null))
	{
		while(len--)
    6a62:	ff 24       	eor	r15, r15
    6a64:	fa 94       	dec	r15
    6a66:	fd 0e       	add	r15, r29
    6a68:	dd 23       	and	r29, r29
    6a6a:	b1 f0       	breq	.+44     	; 0x6a98 <I2C_0_SendData+0x72>
		{
			TWI0.MDATA = *pData;
    6a6c:	f8 01       	movw	r30, r16
    6a6e:	80 81       	ld	r24, Z
    6a70:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
			if(i2c_0_WaitW() == I2C_ACKED)
    6a74:	0e 94 09 34 	call	0x6812	; 0x6812 <_ZL11i2c_0_WaitWv>
    6a78:	81 30       	cpi	r24, 0x01	; 1
    6a7a:	81 f4       	brne	.+32     	; 0x6a9c <I2C_0_SendData+0x76>
			{
				retVal++;
    6a7c:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6a7e:	0f 5f       	subi	r16, 0xFF	; 255
    6a80:	1f 4f       	sbci	r17, 0xFF	; 255
				if(!len) I2C_0_EndSession();
    6a82:	f1 10       	cpse	r15, r1
    6a84:	eb cf       	rjmp	.-42     	; 0x6a5c <I2C_0_SendData+0x36>
    6a86:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <I2C_0_EndSession>
    6a8a:	e8 cf       	rjmp	.-48     	; 0x6a5c <I2C_0_SendData+0x36>
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a8c:	8f ef       	ldi	r24, 0xFF	; 255
    6a8e:	07 c0       	rjmp	.+14     	; 0x6a9e <I2C_0_SendData+0x78>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a90:	8f ef       	ldi	r24, 0xFF	; 255
    6a92:	05 c0       	rjmp	.+10     	; 0x6a9e <I2C_0_SendData+0x78>
	}

	retVal = 0;
    6a94:	80 e0       	ldi	r24, 0x00	; 0
    6a96:	03 c0       	rjmp	.+6      	; 0x6a9e <I2C_0_SendData+0x78>
    6a98:	8c 2f       	mov	r24, r28
    6a9a:	01 c0       	rjmp	.+2      	; 0x6a9e <I2C_0_SendData+0x78>
    6a9c:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    6a9e:	df 91       	pop	r29
    6aa0:	cf 91       	pop	r28
    6aa2:	1f 91       	pop	r17
    6aa4:	0f 91       	pop	r16
    6aa6:	ff 90       	pop	r15
    6aa8:	08 95       	ret

00006aaa <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    6aaa:	e0 ee       	ldi	r30, 0xE0	; 224
    6aac:	f5 e0       	ldi	r31, 0x05	; 5
    6aae:	85 81       	ldd	r24, Z+5	; 0x05
    6ab0:	83 70       	andi	r24, 0x03	; 3
    6ab2:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    6ab4:	85 81       	ldd	r24, Z+5	; 0x05
    6ab6:	88 60       	ori	r24, 0x08	; 8
    6ab8:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    6aba:	e0 e2       	ldi	r30, 0x20	; 32
    6abc:	f9 e0       	ldi	r31, 0x09	; 9
    6abe:	8f e6       	ldi	r24, 0x6F	; 111
    6ac0:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    6ac2:	81 e0       	ldi	r24, 0x01	; 1
    6ac4:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    6ac6:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    6ac8:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6aca:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6acc:	e2 e3       	ldi	r30, 0x32	; 50
    6ace:	f4 e0       	ldi	r31, 0x04	; 4
    6ad0:	80 81       	ld	r24, Z
    6ad2:	88 60       	ori	r24, 0x08	; 8
    6ad4:	80 83       	st	Z, r24
    6ad6:	e3 e3       	ldi	r30, 0x33	; 51
    6ad8:	f4 e0       	ldi	r31, 0x04	; 4
    6ada:	80 81       	ld	r24, Z
    6adc:	88 60       	ori	r24, 0x08	; 8
    6ade:	80 83       	st	Z, r24
    6ae0:	08 95       	ret

00006ae2 <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6ae2:	ff 92       	push	r15
    6ae4:	0f 93       	push	r16
    6ae6:	1f 93       	push	r17
    6ae8:	cf 93       	push	r28
    6aea:	df 93       	push	r29
    6aec:	c6 2f       	mov	r28, r22
    6aee:	8a 01       	movw	r16, r20
    6af0:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    6af2:	8e 7f       	andi	r24, 0xFE	; 254
    6af4:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6af8:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <_ZL11i2c_1_WaitWv>
    6afc:	81 30       	cpi	r24, 0x01	; 1
    6afe:	f1 f4       	brne	.+60     	; 0x6b3c <I2C_1_SendData+0x5a>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6b00:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    6b04:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <_ZL11i2c_1_WaitWv>
    6b08:	81 30       	cpi	r24, 0x01	; 1
    6b0a:	d1 f4       	brne	.+52     	; 0x6b40 <I2C_1_SendData+0x5e>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
    6b0c:	dd 23       	and	r29, r29
    6b0e:	d1 f0       	breq	.+52     	; 0x6b44 <I2C_1_SendData+0x62>
    6b10:	01 15       	cp	r16, r1
    6b12:	11 05       	cpc	r17, r1
    6b14:	c9 f0       	breq	.+50     	; 0x6b48 <I2C_1_SendData+0x66>
    6b16:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6b18:	ff 24       	eor	r15, r15
    6b1a:	fa 94       	dec	r15
    6b1c:	fd 0e       	add	r15, r29
    6b1e:	dd 23       	and	r29, r29
    6b20:	a9 f0       	breq	.+42     	; 0x6b4c <I2C_1_SendData+0x6a>
		{
			TWI1.MDATA = *pData;
    6b22:	f8 01       	movw	r30, r16
    6b24:	80 81       	ld	r24, Z
    6b26:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    6b2a:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <_ZL11i2c_1_WaitWv>
    6b2e:	81 30       	cpi	r24, 0x01	; 1
    6b30:	79 f4       	brne	.+30     	; 0x6b50 <I2C_1_SendData+0x6e>
			{
				retVal++;
    6b32:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6b34:	0f 5f       	subi	r16, 0xFF	; 255
    6b36:	1f 4f       	sbci	r17, 0xFF	; 255
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
    6b38:	df 2d       	mov	r29, r15
    6b3a:	ee cf       	rjmp	.-36     	; 0x6b18 <I2C_1_SendData+0x36>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6b3c:	8f ef       	ldi	r24, 0xFF	; 255
    6b3e:	09 c0       	rjmp	.+18     	; 0x6b52 <I2C_1_SendData+0x70>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6b40:	8f ef       	ldi	r24, 0xFF	; 255
    6b42:	07 c0       	rjmp	.+14     	; 0x6b52 <I2C_1_SendData+0x70>
	}	

	retVal = 0;
    6b44:	80 e0       	ldi	r24, 0x00	; 0
    6b46:	05 c0       	rjmp	.+10     	; 0x6b52 <I2C_1_SendData+0x70>
    6b48:	80 e0       	ldi	r24, 0x00	; 0
    6b4a:	03 c0       	rjmp	.+6      	; 0x6b52 <I2C_1_SendData+0x70>
    6b4c:	8c 2f       	mov	r24, r28
    6b4e:	01 c0       	rjmp	.+2      	; 0x6b52 <I2C_1_SendData+0x70>
    6b50:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    6b52:	df 91       	pop	r29
    6b54:	cf 91       	pop	r28
    6b56:	1f 91       	pop	r17
    6b58:	0f 91       	pop	r16
    6b5a:	ff 90       	pop	r15
    6b5c:	08 95       	ret

00006b5e <I2C_1_GetData>:


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6b5e:	ef 92       	push	r14
    6b60:	ff 92       	push	r15
    6b62:	1f 93       	push	r17
    6b64:	cf 93       	push	r28
    6b66:	df 93       	push	r29
    6b68:	c8 2f       	mov	r28, r24
    6b6a:	d6 2f       	mov	r29, r22
    6b6c:	7a 01       	movw	r14, r20
    6b6e:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    6b70:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6b74:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <_ZL11i2c_1_WaitWv>
    6b78:	81 30       	cpi	r24, 0x01	; 1
    6b7a:	61 f5       	brne	.+88     	; 0x6bd4 <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6b7c:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    6b80:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <_ZL11i2c_1_WaitWv>
    6b84:	81 30       	cpi	r24, 0x01	; 1
    6b86:	41 f5       	brne	.+80     	; 0x6bd8 <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    6b88:	c1 60       	ori	r28, 0x01	; 1
    6b8a:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6b8e:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <_ZL11i2c_1_WaitWv>
    6b92:	81 30       	cpi	r24, 0x01	; 1
    6b94:	19 f5       	brne	.+70     	; 0x6bdc <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    6b96:	11 23       	and	r17, r17
    6b98:	19 f1       	breq	.+70     	; 0x6be0 <I2C_1_GetData+0x82>
    6b9a:	e1 14       	cp	r14, r1
    6b9c:	f1 04       	cpc	r15, r1
    6b9e:	11 f1       	breq	.+68     	; 0x6be4 <I2C_1_GetData+0x86>
    6ba0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6ba2:	df ef       	ldi	r29, 0xFF	; 255
    6ba4:	d1 0f       	add	r29, r17
    6ba6:	11 23       	and	r17, r17
    6ba8:	f9 f0       	breq	.+62     	; 0x6be8 <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    6baa:	0e 94 82 34 	call	0x6904	; 0x6904 <_ZL11I2C_1_WaitRv>
    6bae:	83 30       	cpi	r24, 0x03	; 3
    6bb0:	e9 f4       	brne	.+58     	; 0x6bec <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    6bb2:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    6bb6:	f7 01       	movw	r30, r14
    6bb8:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    6bba:	d1 11       	cpse	r29, r1
    6bbc:	02 c0       	rjmp	.+4      	; 0x6bc2 <I2C_1_GetData+0x64>
    6bbe:	87 e0       	ldi	r24, 0x07	; 7
    6bc0:	01 c0       	rjmp	.+2      	; 0x6bc4 <I2C_1_GetData+0x66>
    6bc2:	82 e0       	ldi	r24, 0x02	; 2
    6bc4:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    6bc8:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6bca:	ff ef       	ldi	r31, 0xFF	; 255
    6bcc:	ef 1a       	sub	r14, r31
    6bce:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6bd0:	1d 2f       	mov	r17, r29
    6bd2:	e7 cf       	rjmp	.-50     	; 0x6ba2 <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6bd4:	8f ef       	ldi	r24, 0xFF	; 255
    6bd6:	0b c0       	rjmp	.+22     	; 0x6bee <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6bd8:	8f ef       	ldi	r24, 0xFF	; 255
    6bda:	09 c0       	rjmp	.+18     	; 0x6bee <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    6bdc:	8f ef       	ldi	r24, 0xFF	; 255
    6bde:	07 c0       	rjmp	.+14     	; 0x6bee <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    6be0:	80 e0       	ldi	r24, 0x00	; 0
    6be2:	05 c0       	rjmp	.+10     	; 0x6bee <I2C_1_GetData+0x90>
    6be4:	80 e0       	ldi	r24, 0x00	; 0
    6be6:	03 c0       	rjmp	.+6      	; 0x6bee <I2C_1_GetData+0x90>
    6be8:	8c 2f       	mov	r24, r28
    6bea:	01 c0       	rjmp	.+2      	; 0x6bee <I2C_1_GetData+0x90>
    6bec:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6bee:	df 91       	pop	r29
    6bf0:	cf 91       	pop	r28
    6bf2:	1f 91       	pop	r17
    6bf4:	ff 90       	pop	r15
    6bf6:	ef 90       	pop	r14
    6bf8:	08 95       	ret

00006bfa <_ZL21USART4_initializationm>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
	lb_send_text(g_tempMsgBuff);
    6bfa:	20 b3       	in	r18, 0x10	; 16
    6bfc:	2d 7f       	andi	r18, 0xFD	; 253
    6bfe:	20 bb       	out	0x10, r18	; 16
    6c00:	e1 e9       	ldi	r30, 0x91	; 145
    6c02:	f4 e0       	ldi	r31, 0x04	; 4
    6c04:	20 81       	ld	r18, Z
    6c06:	27 7f       	andi	r18, 0xF7	; 247
    6c08:	20 83       	st	Z, r18
    6c0a:	20 b3       	in	r18, 0x10	; 16
    6c0c:	21 60       	ori	r18, 0x01	; 1
    6c0e:	20 bb       	out	0x10, r18	; 16
    6c10:	21 b3       	in	r18, 0x11	; 17
    6c12:	21 60       	ori	r18, 0x01	; 1
    6c14:	21 bb       	out	0x11, r18	; 17
    6c16:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <USART4_init>
    6c1a:	08 95       	ret

00006c1c <_ZL21USART1_initializationm>:
    6c1c:	28 b1       	in	r18, 0x08	; 8
    6c1e:	2d 7f       	andi	r18, 0xFD	; 253
    6c20:	28 b9       	out	0x08, r18	; 8
    6c22:	e1 e5       	ldi	r30, 0x51	; 81
    6c24:	f4 e0       	ldi	r31, 0x04	; 4
    6c26:	20 81       	ld	r18, Z
    6c28:	27 7f       	andi	r18, 0xF7	; 247
    6c2a:	20 83       	st	Z, r18
    6c2c:	28 b1       	in	r18, 0x08	; 8
    6c2e:	21 60       	ori	r18, 0x01	; 1
    6c30:	28 b9       	out	0x08, r18	; 8
    6c32:	29 b1       	in	r18, 0x09	; 9
    6c34:	21 60       	ori	r18, 0x01	; 1
    6c36:	29 b9       	out	0x09, r18	; 9
    6c38:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <USART1_init>
    6c3c:	08 95       	ret

00006c3e <_ZL16linkbus_start_txv>:
    6c3e:	cf 93       	push	r28
    6c40:	c0 91 c0 47 	lds	r28, 0x47C0	; 0x8047c0 <_ZL17linkbus_tx_active>
    6c44:	81 e0       	ldi	r24, 0x01	; 1
    6c46:	c8 27       	eor	r28, r24
    6c48:	59 f0       	breq	.+22     	; 0x6c60 <_ZL16linkbus_start_txv+0x22>
    6c4a:	80 93 c0 47 	sts	0x47C0, r24	; 0x8047c0 <_ZL17linkbus_tx_active>
    6c4e:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6c52:	81 11       	cpse	r24, r1
    6c54:	03 c0       	rjmp	.+6      	; 0x6c5c <_ZL16linkbus_start_txv+0x1e>
    6c56:	0e 94 ce 46 	call	0x8d9c	; 0x8d9c <USART4_enable_tx>
    6c5a:	02 c0       	rjmp	.+4      	; 0x6c60 <_ZL16linkbus_start_txv+0x22>
    6c5c:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <USART1_enable_tx>
    6c60:	8c 2f       	mov	r24, r28
    6c62:	cf 91       	pop	r28
    6c64:	08 95       	ret

00006c66 <_Z18nextFullLBTxBufferv>:
    6c66:	90 e0       	ldi	r25, 0x00	; 0
    6c68:	80 91 73 46 	lds	r24, 0x4673	; 0x804673 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6c6c:	28 2f       	mov	r18, r24
    6c6e:	30 e0       	ldi	r19, 0x00	; 0
    6c70:	42 e3       	ldi	r20, 0x32	; 50
    6c72:	42 9f       	mul	r20, r18
    6c74:	f0 01       	movw	r30, r0
    6c76:	43 9f       	mul	r20, r19
    6c78:	f0 0d       	add	r31, r0
    6c7a:	11 24       	eor	r1, r1
    6c7c:	e8 50       	subi	r30, 0x08	; 8
    6c7e:	f9 4b       	sbci	r31, 0xB9	; 185
    6c80:	40 81       	ld	r20, Z
    6c82:	41 11       	cpse	r20, r1
    6c84:	0b c0       	rjmp	.+22     	; 0x6c9c <_Z18nextFullLBTxBufferv+0x36>
    6c86:	9f 5f       	subi	r25, 0xFF	; 255
    6c88:	94 30       	cpi	r25, 0x04	; 4
    6c8a:	50 f4       	brcc	.+20     	; 0x6ca0 <_Z18nextFullLBTxBufferv+0x3a>
    6c8c:	8f 5f       	subi	r24, 0xFF	; 255
    6c8e:	80 93 73 46 	sts	0x4673, r24	; 0x804673 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6c92:	84 30       	cpi	r24, 0x04	; 4
    6c94:	48 f3       	brcs	.-46     	; 0x6c68 <_Z18nextFullLBTxBufferv+0x2>
    6c96:	10 92 73 46 	sts	0x4673, r1	; 0x804673 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6c9a:	e6 cf       	rjmp	.-52     	; 0x6c68 <_Z18nextFullLBTxBufferv+0x2>
    6c9c:	81 e0       	ldi	r24, 0x01	; 1
    6c9e:	01 c0       	rjmp	.+2      	; 0x6ca2 <_Z18nextFullLBTxBufferv+0x3c>
    6ca0:	80 e0       	ldi	r24, 0x00	; 0
    6ca2:	88 23       	and	r24, r24
    6ca4:	49 f0       	breq	.+18     	; 0x6cb8 <_Z18nextFullLBTxBufferv+0x52>
    6ca6:	42 e3       	ldi	r20, 0x32	; 50
    6ca8:	42 9f       	mul	r20, r18
    6caa:	c0 01       	movw	r24, r0
    6cac:	43 9f       	mul	r20, r19
    6cae:	90 0d       	add	r25, r0
    6cb0:	11 24       	eor	r1, r1
    6cb2:	88 50       	subi	r24, 0x08	; 8
    6cb4:	99 4b       	sbci	r25, 0xB9	; 185
    6cb6:	08 95       	ret
    6cb8:	80 e0       	ldi	r24, 0x00	; 0
    6cba:	90 e0       	ldi	r25, 0x00	; 0
    6cbc:	08 95       	ret

00006cbe <_Z19nextEmptyLBTxBufferv>:
    6cbe:	90 e0       	ldi	r25, 0x00	; 0
    6cc0:	80 91 72 46 	lds	r24, 0x4672	; 0x804672 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6cc4:	28 2f       	mov	r18, r24
    6cc6:	30 e0       	ldi	r19, 0x00	; 0
    6cc8:	42 e3       	ldi	r20, 0x32	; 50
    6cca:	42 9f       	mul	r20, r18
    6ccc:	f0 01       	movw	r30, r0
    6cce:	43 9f       	mul	r20, r19
    6cd0:	f0 0d       	add	r31, r0
    6cd2:	11 24       	eor	r1, r1
    6cd4:	e8 50       	subi	r30, 0x08	; 8
    6cd6:	f9 4b       	sbci	r31, 0xB9	; 185
    6cd8:	40 81       	ld	r20, Z
    6cda:	44 23       	and	r20, r20
    6cdc:	59 f0       	breq	.+22     	; 0x6cf4 <_Z19nextEmptyLBTxBufferv+0x36>
    6cde:	9f 5f       	subi	r25, 0xFF	; 255
    6ce0:	94 30       	cpi	r25, 0x04	; 4
    6ce2:	50 f4       	brcc	.+20     	; 0x6cf8 <_Z19nextEmptyLBTxBufferv+0x3a>
    6ce4:	8f 5f       	subi	r24, 0xFF	; 255
    6ce6:	80 93 72 46 	sts	0x4672, r24	; 0x804672 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6cea:	84 30       	cpi	r24, 0x04	; 4
    6cec:	48 f3       	brcs	.-46     	; 0x6cc0 <_Z19nextEmptyLBTxBufferv+0x2>
    6cee:	10 92 72 46 	sts	0x4672, r1	; 0x804672 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6cf2:	e6 cf       	rjmp	.-52     	; 0x6cc0 <_Z19nextEmptyLBTxBufferv+0x2>
    6cf4:	81 e0       	ldi	r24, 0x01	; 1
    6cf6:	01 c0       	rjmp	.+2      	; 0x6cfa <_Z19nextEmptyLBTxBufferv+0x3c>
    6cf8:	80 e0       	ldi	r24, 0x00	; 0
    6cfa:	88 23       	and	r24, r24
    6cfc:	49 f0       	breq	.+18     	; 0x6d10 <_Z19nextEmptyLBTxBufferv+0x52>
    6cfe:	42 e3       	ldi	r20, 0x32	; 50
    6d00:	42 9f       	mul	r20, r18
    6d02:	c0 01       	movw	r24, r0
    6d04:	43 9f       	mul	r20, r19
    6d06:	90 0d       	add	r25, r0
    6d08:	11 24       	eor	r1, r1
    6d0a:	88 50       	subi	r24, 0x08	; 8
    6d0c:	99 4b       	sbci	r25, 0xB9	; 185
    6d0e:	08 95       	ret
    6d10:	80 e0       	ldi	r24, 0x00	; 0
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	08 95       	ret

00006d16 <_Z19nextEmptyLBRxBufferv>:
    6d16:	90 e0       	ldi	r25, 0x00	; 0
    6d18:	80 91 71 46 	lds	r24, 0x4671	; 0x804671 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6d1c:	28 2f       	mov	r18, r24
    6d1e:	30 e0       	ldi	r19, 0x00	; 0
    6d20:	42 e4       	ldi	r20, 0x42	; 66
    6d22:	42 9f       	mul	r20, r18
    6d24:	f0 01       	movw	r30, r0
    6d26:	43 9f       	mul	r20, r19
    6d28:	f0 0d       	add	r31, r0
    6d2a:	11 24       	eor	r1, r1
    6d2c:	ec 58       	subi	r30, 0x8C	; 140
    6d2e:	f9 4b       	sbci	r31, 0xB9	; 185
    6d30:	41 81       	ldd	r20, Z+1	; 0x01
    6d32:	52 81       	ldd	r21, Z+2	; 0x02
    6d34:	45 2b       	or	r20, r21
    6d36:	59 f0       	breq	.+22     	; 0x6d4e <_Z19nextEmptyLBRxBufferv+0x38>
    6d38:	9f 5f       	subi	r25, 0xFF	; 255
    6d3a:	92 30       	cpi	r25, 0x02	; 2
    6d3c:	50 f4       	brcc	.+20     	; 0x6d52 <_Z19nextEmptyLBRxBufferv+0x3c>
    6d3e:	8f 5f       	subi	r24, 0xFF	; 255
    6d40:	80 93 71 46 	sts	0x4671, r24	; 0x804671 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6d44:	82 30       	cpi	r24, 0x02	; 2
    6d46:	40 f3       	brcs	.-48     	; 0x6d18 <_Z19nextEmptyLBRxBufferv+0x2>
    6d48:	10 92 71 46 	sts	0x4671, r1	; 0x804671 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6d4c:	e5 cf       	rjmp	.-54     	; 0x6d18 <_Z19nextEmptyLBRxBufferv+0x2>
    6d4e:	81 e0       	ldi	r24, 0x01	; 1
    6d50:	01 c0       	rjmp	.+2      	; 0x6d54 <_Z19nextEmptyLBRxBufferv+0x3e>
    6d52:	80 e0       	ldi	r24, 0x00	; 0
    6d54:	88 23       	and	r24, r24
    6d56:	49 f0       	breq	.+18     	; 0x6d6a <_Z19nextEmptyLBRxBufferv+0x54>
    6d58:	42 e4       	ldi	r20, 0x42	; 66
    6d5a:	42 9f       	mul	r20, r18
    6d5c:	c0 01       	movw	r24, r0
    6d5e:	43 9f       	mul	r20, r19
    6d60:	90 0d       	add	r25, r0
    6d62:	11 24       	eor	r1, r1
    6d64:	8c 58       	subi	r24, 0x8C	; 140
    6d66:	99 4b       	sbci	r25, 0xB9	; 185
    6d68:	08 95       	ret
    6d6a:	80 e0       	ldi	r24, 0x00	; 0
    6d6c:	90 e0       	ldi	r25, 0x00	; 0
    6d6e:	08 95       	ret

00006d70 <_Z18nextFullLBRxBufferv>:
    6d70:	90 e0       	ldi	r25, 0x00	; 0
    6d72:	80 91 70 46 	lds	r24, 0x4670	; 0x804670 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6d76:	28 2f       	mov	r18, r24
    6d78:	30 e0       	ldi	r19, 0x00	; 0
    6d7a:	42 e4       	ldi	r20, 0x42	; 66
    6d7c:	42 9f       	mul	r20, r18
    6d7e:	f0 01       	movw	r30, r0
    6d80:	43 9f       	mul	r20, r19
    6d82:	f0 0d       	add	r31, r0
    6d84:	11 24       	eor	r1, r1
    6d86:	ec 58       	subi	r30, 0x8C	; 140
    6d88:	f9 4b       	sbci	r31, 0xB9	; 185
    6d8a:	41 81       	ldd	r20, Z+1	; 0x01
    6d8c:	52 81       	ldd	r21, Z+2	; 0x02
    6d8e:	45 2b       	or	r20, r21
    6d90:	59 f4       	brne	.+22     	; 0x6da8 <_Z18nextFullLBRxBufferv+0x38>
    6d92:	9f 5f       	subi	r25, 0xFF	; 255
    6d94:	92 30       	cpi	r25, 0x02	; 2
    6d96:	50 f4       	brcc	.+20     	; 0x6dac <_Z18nextFullLBRxBufferv+0x3c>
    6d98:	8f 5f       	subi	r24, 0xFF	; 255
    6d9a:	80 93 70 46 	sts	0x4670, r24	; 0x804670 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6d9e:	82 30       	cpi	r24, 0x02	; 2
    6da0:	40 f3       	brcs	.-48     	; 0x6d72 <_Z18nextFullLBRxBufferv+0x2>
    6da2:	10 92 70 46 	sts	0x4670, r1	; 0x804670 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6da6:	e5 cf       	rjmp	.-54     	; 0x6d72 <_Z18nextFullLBRxBufferv+0x2>
    6da8:	81 e0       	ldi	r24, 0x01	; 1
    6daa:	01 c0       	rjmp	.+2      	; 0x6dae <_Z18nextFullLBRxBufferv+0x3e>
    6dac:	80 e0       	ldi	r24, 0x00	; 0
    6dae:	88 23       	and	r24, r24
    6db0:	49 f0       	breq	.+18     	; 0x6dc4 <_Z18nextFullLBRxBufferv+0x54>
    6db2:	42 e4       	ldi	r20, 0x42	; 66
    6db4:	42 9f       	mul	r20, r18
    6db6:	c0 01       	movw	r24, r0
    6db8:	43 9f       	mul	r20, r19
    6dba:	90 0d       	add	r25, r0
    6dbc:	11 24       	eor	r1, r1
    6dbe:	8c 58       	subi	r24, 0x8C	; 140
    6dc0:	99 4b       	sbci	r25, 0xB9	; 185
    6dc2:	08 95       	ret
    6dc4:	80 e0       	ldi	r24, 0x00	; 0
    6dc6:	90 e0       	ldi	r25, 0x00	; 0
    6dc8:	08 95       	ret

00006dca <_Z19linkbusTxInProgressv>:
    6dca:	80 91 c0 47 	lds	r24, 0x47C0	; 0x8047c0 <_ZL17linkbus_tx_active>
    6dce:	08 95       	ret

00006dd0 <_Z14linkbus_end_txv>:
    6dd0:	80 91 c0 47 	lds	r24, 0x47C0	; 0x8047c0 <_ZL17linkbus_tx_active>
    6dd4:	88 23       	and	r24, r24
    6dd6:	89 f0       	breq	.+34     	; 0x6dfa <_Z14linkbus_end_txv+0x2a>
    6dd8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6ddc:	81 11       	cpse	r24, r1
    6dde:	06 c0       	rjmp	.+12     	; 0x6dec <_Z14linkbus_end_txv+0x1c>
    6de0:	e0 e8       	ldi	r30, 0x80	; 128
    6de2:	f8 e0       	ldi	r31, 0x08	; 8
    6de4:	85 81       	ldd	r24, Z+5	; 0x05
    6de6:	8f 7d       	andi	r24, 0xDF	; 223
    6de8:	85 83       	std	Z+5, r24	; 0x05
    6dea:	05 c0       	rjmp	.+10     	; 0x6df6 <_Z14linkbus_end_txv+0x26>
    6dec:	e0 e2       	ldi	r30, 0x20	; 32
    6dee:	f8 e0       	ldi	r31, 0x08	; 8
    6df0:	85 81       	ldd	r24, Z+5	; 0x05
    6df2:	8f 7d       	andi	r24, 0xDF	; 223
    6df4:	85 83       	std	Z+5, r24	; 0x05
    6df6:	10 92 c0 47 	sts	0x47C0, r1	; 0x8047c0 <_ZL17linkbus_tx_active>
    6dfa:	08 95       	ret

00006dfc <_Z16linkbus_reset_rxv>:
    6dfc:	cf 93       	push	r28
    6dfe:	df 93       	push	r29
    6e00:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6e04:	81 11       	cpse	r24, r1
    6e06:	14 c0       	rjmp	.+40     	; 0x6e30 <_Z16linkbus_reset_rxv+0x34>
    6e08:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <__TEXT_REGION_LENGTH__+0x7e0886>
    6e0c:	88 23       	and	r24, r24
    6e0e:	1c f5       	brge	.+70     	; 0x6e56 <_Z16linkbus_reset_rxv+0x5a>
    6e10:	e0 e8       	ldi	r30, 0x80	; 128
    6e12:	f8 e0       	ldi	r31, 0x08	; 8
    6e14:	86 81       	ldd	r24, Z+6	; 0x06
    6e16:	8f 77       	andi	r24, 0x7F	; 127
    6e18:	86 83       	std	Z+6, r24	; 0x06
    6e1a:	84 e8       	ldi	r24, 0x84	; 132
    6e1c:	a4 e7       	ldi	r26, 0x74	; 116
    6e1e:	b6 e4       	ldi	r27, 0x46	; 70
    6e20:	ed 01       	movw	r28, r26
    6e22:	19 92       	st	Y+, r1
    6e24:	8a 95       	dec	r24
    6e26:	e9 f7       	brne	.-6      	; 0x6e22 <_Z16linkbus_reset_rxv+0x26>
    6e28:	86 81       	ldd	r24, Z+6	; 0x06
    6e2a:	80 68       	ori	r24, 0x80	; 128
    6e2c:	86 83       	std	Z+6, r24	; 0x06
    6e2e:	13 c0       	rjmp	.+38     	; 0x6e56 <_Z16linkbus_reset_rxv+0x5a>
    6e30:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    6e34:	88 23       	and	r24, r24
    6e36:	7c f4       	brge	.+30     	; 0x6e56 <_Z16linkbus_reset_rxv+0x5a>
    6e38:	e0 e2       	ldi	r30, 0x20	; 32
    6e3a:	f8 e0       	ldi	r31, 0x08	; 8
    6e3c:	86 81       	ldd	r24, Z+6	; 0x06
    6e3e:	8f 77       	andi	r24, 0x7F	; 127
    6e40:	86 83       	std	Z+6, r24	; 0x06
    6e42:	84 e8       	ldi	r24, 0x84	; 132
    6e44:	a4 e7       	ldi	r26, 0x74	; 116
    6e46:	b6 e4       	ldi	r27, 0x46	; 70
    6e48:	ed 01       	movw	r28, r26
    6e4a:	19 92       	st	Y+, r1
    6e4c:	8a 95       	dec	r24
    6e4e:	e9 f7       	brne	.-6      	; 0x6e4a <_Z16linkbus_reset_rxv+0x4e>
    6e50:	86 81       	ldd	r24, Z+6	; 0x06
    6e52:	80 68       	ori	r24, 0x80	; 128
    6e54:	86 83       	std	Z+6, r24	; 0x06
    6e56:	df 91       	pop	r29
    6e58:	cf 91       	pop	r28
    6e5a:	08 95       	ret

00006e5c <_Z12linkbus_initm14USART_Number_t>:
    6e5c:	cf 92       	push	r12
    6e5e:	df 92       	push	r13
    6e60:	ef 92       	push	r14
    6e62:	ff 92       	push	r15
    6e64:	cf 93       	push	r28
    6e66:	6b 01       	movw	r12, r22
    6e68:	7c 01       	movw	r14, r24
    6e6a:	84 e8       	ldi	r24, 0x84	; 132
    6e6c:	e4 e7       	ldi	r30, 0x74	; 116
    6e6e:	f6 e4       	ldi	r31, 0x46	; 70
    6e70:	df 01       	movw	r26, r30
    6e72:	1d 92       	st	X+, r1
    6e74:	8a 95       	dec	r24
    6e76:	e9 f7       	brne	.-6      	; 0x6e72 <_Z12linkbus_initm14USART_Number_t+0x16>
    6e78:	80 e0       	ldi	r24, 0x00	; 0
    6e7a:	90 e0       	ldi	r25, 0x00	; 0
    6e7c:	84 30       	cpi	r24, 0x04	; 4
    6e7e:	91 05       	cpc	r25, r1
    6e80:	5c f4       	brge	.+22     	; 0x6e98 <_Z12linkbus_initm14USART_Number_t+0x3c>
    6e82:	22 e3       	ldi	r18, 0x32	; 50
    6e84:	28 9f       	mul	r18, r24
    6e86:	f0 01       	movw	r30, r0
    6e88:	29 9f       	mul	r18, r25
    6e8a:	f0 0d       	add	r31, r0
    6e8c:	11 24       	eor	r1, r1
    6e8e:	e8 50       	subi	r30, 0x08	; 8
    6e90:	f9 4b       	sbci	r31, 0xB9	; 185
    6e92:	10 82       	st	Z, r1
    6e94:	01 96       	adiw	r24, 0x01	; 1
    6e96:	f2 cf       	rjmp	.-28     	; 0x6e7c <_Z12linkbus_initm14USART_Number_t+0x20>
    6e98:	46 30       	cpi	r20, 0x06	; 6
    6e9a:	21 f4       	brne	.+8      	; 0x6ea4 <_Z12linkbus_initm14USART_Number_t+0x48>
    6e9c:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6ea0:	87 30       	cpi	r24, 0x07	; 7
    6ea2:	61 f4       	brne	.+24     	; 0x6ebc <_Z12linkbus_initm14USART_Number_t+0x60>
    6ea4:	c4 2f       	mov	r28, r20
    6ea6:	c7 01       	movw	r24, r14
    6ea8:	b6 01       	movw	r22, r12
    6eaa:	41 11       	cpse	r20, r1
    6eac:	03 c0       	rjmp	.+6      	; 0x6eb4 <_Z12linkbus_initm14USART_Number_t+0x58>
    6eae:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <_ZL21USART4_initializationm>
    6eb2:	02 c0       	rjmp	.+4      	; 0x6eb8 <_Z12linkbus_initm14USART_Number_t+0x5c>
    6eb4:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <_ZL21USART1_initializationm>
    6eb8:	c0 93 22 40 	sts	0x4022, r28	; 0x804022 <g_linkbus_usart_number>
    6ebc:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <_ZL14g_bus_disabled>
    6ec0:	cf 91       	pop	r28
    6ec2:	ff 90       	pop	r15
    6ec4:	ef 90       	pop	r14
    6ec6:	df 90       	pop	r13
    6ec8:	cf 90       	pop	r12
    6eca:	08 95       	ret

00006ecc <_Z15linkbus_disablev>:
    6ecc:	81 e0       	ldi	r24, 0x01	; 1
    6ece:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZL14g_bus_disabled>
    6ed2:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6ed6:	84 30       	cpi	r24, 0x04	; 4
    6ed8:	19 f4       	brne	.+6      	; 0x6ee0 <_Z15linkbus_disablev+0x14>
    6eda:	0e 94 d7 46 	call	0x8dae	; 0x8dae <USART4_disable>
    6ede:	02 c0       	rjmp	.+4      	; 0x6ee4 <_Z15linkbus_disablev+0x18>
    6ee0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <USART1_disable>
    6ee4:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <_Z14linkbus_end_txv>
    6ee8:	84 e8       	ldi	r24, 0x84	; 132
    6eea:	e4 e7       	ldi	r30, 0x74	; 116
    6eec:	f6 e4       	ldi	r31, 0x46	; 70
    6eee:	df 01       	movw	r26, r30
    6ef0:	1d 92       	st	X+, r1
    6ef2:	8a 95       	dec	r24
    6ef4:	e9 f7       	brne	.-6      	; 0x6ef0 <_Z15linkbus_disablev+0x24>
    6ef6:	80 e0       	ldi	r24, 0x00	; 0
    6ef8:	84 30       	cpi	r24, 0x04	; 4
    6efa:	48 f4       	brcc	.+18     	; 0x6f0e <_Z15linkbus_disablev+0x42>
    6efc:	b2 e3       	ldi	r27, 0x32	; 50
    6efe:	8b 9f       	mul	r24, r27
    6f00:	f0 01       	movw	r30, r0
    6f02:	11 24       	eor	r1, r1
    6f04:	e8 50       	subi	r30, 0x08	; 8
    6f06:	f9 4b       	sbci	r31, 0xB9	; 185
    6f08:	10 82       	st	Z, r1
    6f0a:	8f 5f       	subi	r24, 0xFF	; 255
    6f0c:	f5 cf       	rjmp	.-22     	; 0x6ef8 <_Z15linkbus_disablev+0x2c>
    6f0e:	08 95       	ret

00006f10 <_Z12lb_send_textPc>:
    6f10:	ef 92       	push	r14
    6f12:	ff 92       	push	r15
    6f14:	1f 93       	push	r17
    6f16:	cf 93       	push	r28
    6f18:	df 93       	push	r29
    6f1a:	10 91 23 40 	lds	r17, 0x4023	; 0x804023 <_ZL14g_bus_disabled>
    6f1e:	11 11       	cpse	r17, r1
    6f20:	2d c0       	rjmp	.+90     	; 0x6f7c <_Z12lb_send_textPc+0x6c>
    6f22:	00 97       	sbiw	r24, 0x00	; 0
    6f24:	69 f1       	breq	.+90     	; 0x6f80 <_Z12lb_send_textPc+0x70>
    6f26:	7c 01       	movw	r14, r24
    6f28:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <_Z19nextEmptyLBTxBufferv>
    6f2c:	c8 ec       	ldi	r28, 0xC8	; 200
    6f2e:	d0 e0       	ldi	r29, 0x00	; 0
    6f30:	00 97       	sbiw	r24, 0x00	; 0
    6f32:	a1 f4       	brne	.+40     	; 0x6f5c <_Z12lb_send_textPc+0x4c>
    6f34:	20 97       	sbiw	r28, 0x00	; 0
    6f36:	91 f0       	breq	.+36     	; 0x6f5c <_Z12lb_send_textPc+0x4c>
    6f38:	0e 94 e5 36 	call	0x6dca	; 0x6dca <_Z19linkbusTxInProgressv>
    6f3c:	88 23       	and	r24, r24
    6f3e:	21 f0       	breq	.+8      	; 0x6f48 <_Z12lb_send_textPc+0x38>
    6f40:	20 97       	sbiw	r28, 0x00	; 0
    6f42:	19 f4       	brne	.+6      	; 0x6f4a <_Z12lb_send_textPc+0x3a>
    6f44:	81 2f       	mov	r24, r17
    6f46:	01 c0       	rjmp	.+2      	; 0x6f4a <_Z12lb_send_textPc+0x3a>
    6f48:	81 2f       	mov	r24, r17
    6f4a:	88 23       	and	r24, r24
    6f4c:	21 f0       	breq	.+8      	; 0x6f56 <_Z12lb_send_textPc+0x46>
    6f4e:	20 97       	sbiw	r28, 0x00	; 0
    6f50:	99 f3       	breq	.-26     	; 0x6f38 <_Z12lb_send_textPc+0x28>
    6f52:	21 97       	sbiw	r28, 0x01	; 1
    6f54:	f1 cf       	rjmp	.-30     	; 0x6f38 <_Z12lb_send_textPc+0x28>
    6f56:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <_Z19nextEmptyLBTxBufferv>
    6f5a:	ea cf       	rjmp	.-44     	; 0x6f30 <_Z12lb_send_textPc+0x20>
    6f5c:	00 97       	sbiw	r24, 0x00	; 0
    6f5e:	91 f0       	breq	.+36     	; 0x6f84 <_Z12lb_send_textPc+0x74>
    6f60:	ff 92       	push	r15
    6f62:	ef 92       	push	r14
    6f64:	9f 93       	push	r25
    6f66:	8f 93       	push	r24
    6f68:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    6f6c:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <_ZL16linkbus_start_txv>
    6f70:	0f 90       	pop	r0
    6f72:	0f 90       	pop	r0
    6f74:	0f 90       	pop	r0
    6f76:	0f 90       	pop	r0
    6f78:	80 e0       	ldi	r24, 0x00	; 0
    6f7a:	05 c0       	rjmp	.+10     	; 0x6f86 <_Z12lb_send_textPc+0x76>
    6f7c:	81 e0       	ldi	r24, 0x01	; 1
    6f7e:	03 c0       	rjmp	.+6      	; 0x6f86 <_Z12lb_send_textPc+0x76>
    6f80:	81 e0       	ldi	r24, 0x01	; 1
    6f82:	01 c0       	rjmp	.+2      	; 0x6f86 <_Z12lb_send_textPc+0x76>
    6f84:	81 e0       	ldi	r24, 0x01	; 1
    6f86:	df 91       	pop	r29
    6f88:	cf 91       	pop	r28
    6f8a:	1f 91       	pop	r17
    6f8c:	ff 90       	pop	r15
    6f8e:	ef 90       	pop	r14
    6f90:	08 95       	ret

00006f92 <_Z11lb_send_msg13LBMessageTypePKcPc>:
    6f92:	83 30       	cpi	r24, 0x03	; 3
    6f94:	29 f0       	breq	.+10     	; 0x6fa0 <_Z11lb_send_msg13LBMessageTypePKcPc+0xe>
    6f96:	82 30       	cpi	r24, 0x02	; 2
    6f98:	31 f0       	breq	.+12     	; 0x6fa6 <_Z11lb_send_msg13LBMessageTypePKcPc+0x14>
    6f9a:	9b e3       	ldi	r25, 0x3B	; 59
    6f9c:	84 e2       	ldi	r24, 0x24	; 36
    6f9e:	05 c0       	rjmp	.+10     	; 0x6faa <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    6fa0:	9b e3       	ldi	r25, 0x3B	; 59
    6fa2:	81 e2       	ldi	r24, 0x21	; 33
    6fa4:	02 c0       	rjmp	.+4      	; 0x6faa <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    6fa6:	9f e3       	ldi	r25, 0x3F	; 63
    6fa8:	84 e2       	ldi	r24, 0x24	; 36
    6faa:	1f 92       	push	r1
    6fac:	9f 93       	push	r25
    6fae:	5f 93       	push	r21
    6fb0:	4f 93       	push	r20
    6fb2:	7f 93       	push	r23
    6fb4:	6f 93       	push	r22
    6fb6:	1f 92       	push	r1
    6fb8:	8f 93       	push	r24
    6fba:	8a ea       	ldi	r24, 0xAA	; 170
    6fbc:	94 e4       	ldi	r25, 0x44	; 68
    6fbe:	9f 93       	push	r25
    6fc0:	8f 93       	push	r24
    6fc2:	81 ec       	ldi	r24, 0xC1	; 193
    6fc4:	97 e4       	ldi	r25, 0x47	; 71
    6fc6:	9f 93       	push	r25
    6fc8:	8f 93       	push	r24
    6fca:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    6fce:	81 ec       	ldi	r24, 0xC1	; 193
    6fd0:	97 e4       	ldi	r25, 0x47	; 71
    6fd2:	0e 94 88 37 	call	0x6f10	; 0x6f10 <_Z12lb_send_textPc>
    6fd6:	8d b7       	in	r24, 0x3d	; 61
    6fd8:	9e b7       	in	r25, 0x3e	; 62
    6fda:	0c 96       	adiw	r24, 0x0c	; 12
    6fdc:	8d bf       	out	0x3d, r24	; 61
    6fde:	9e bf       	out	0x3e, r25	; 62
    6fe0:	08 95       	ret

00006fe2 <_Z16lb_broadcast_numjPKc>:
}


void lb_broadcast_num(uint16_t data, const char* str)
{
    6fe2:	0f 93       	push	r16
    6fe4:	1f 93       	push	r17
    6fe6:	cf 93       	push	r28
    6fe8:	df 93       	push	r29
    6fea:	cd b7       	in	r28, 0x3d	; 61
    6fec:	de b7       	in	r29, 0x3e	; 62
    6fee:	26 97       	sbiw	r28, 0x06	; 6
    6ff0:	cd bf       	out	0x3d, r28	; 61
    6ff2:	de bf       	out	0x3e, r29	; 62
    6ff4:	8b 01       	movw	r16, r22
	char t[6] = "\0";
    6ff6:	20 91 4d 44 	lds	r18, 0x444D	; 0x80444d <g_80m_power_table+0x416>
    6ffa:	30 91 4e 44 	lds	r19, 0x444E	; 0x80444e <g_80m_power_table+0x417>
    6ffe:	29 83       	std	Y+1, r18	; 0x01
    7000:	3a 83       	std	Y+2, r19	; 0x02
    7002:	fe 01       	movw	r30, r28
    7004:	33 96       	adiw	r30, 0x03	; 3
    7006:	24 e0       	ldi	r18, 0x04	; 4
    7008:	df 01       	movw	r26, r30
    700a:	1d 92       	st	X+, r1
    700c:	2a 95       	dec	r18
    700e:	e9 f7       	brne	.-6      	; 0x700a <_Z16lb_broadcast_numjPKc+0x28>

	sprintf(t, "%u", data);
    7010:	9f 93       	push	r25
    7012:	8f 93       	push	r24
    7014:	8a eb       	ldi	r24, 0xBA	; 186
    7016:	94 e4       	ldi	r25, 0x44	; 68
    7018:	9f 93       	push	r25
    701a:	8f 93       	push	r24
    701c:	ce 01       	movw	r24, r28
    701e:	01 96       	adiw	r24, 0x01	; 1
    7020:	9f 93       	push	r25
    7022:	8f 93       	push	r24
    7024:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
	g_tempMsgBuff[0] = '\0';
    7028:	10 92 c1 47 	sts	0x47C1, r1	; 0x8047c1 <_ZL13g_tempMsgBuff>

	if(str)
    702c:	0f 90       	pop	r0
    702e:	0f 90       	pop	r0
    7030:	0f 90       	pop	r0
    7032:	0f 90       	pop	r0
    7034:	0f 90       	pop	r0
    7036:	0f 90       	pop	r0
    7038:	01 15       	cp	r16, r1
    703a:	11 05       	cpc	r17, r1
    703c:	91 f0       	breq	.+36     	; 0x7062 <_Z16lb_broadcast_numjPKc+0x80>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
    703e:	ce 01       	movw	r24, r28
    7040:	01 96       	adiw	r24, 0x01	; 1
    7042:	9f 93       	push	r25
    7044:	8f 93       	push	r24
    7046:	1f 93       	push	r17
    7048:	0f 93       	push	r16
    704a:	8d eb       	ldi	r24, 0xBD	; 189
    704c:	94 e4       	ldi	r25, 0x44	; 68
    704e:	9f 93       	push	r25
    7050:	8f 93       	push	r24
    7052:	81 ec       	ldi	r24, 0xC1	; 193
    7054:	97 e4       	ldi	r25, 0x47	; 71
    7056:	9f 93       	push	r25
    7058:	8f 93       	push	r24
    705a:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    705e:	cd bf       	out	0x3d, r28	; 61
    7060:	de bf       	out	0x3e, r29	; 62
	}

	if(g_tempMsgBuff[0]) lb_send_text(g_tempMsgBuff);
    7062:	80 91 c1 47 	lds	r24, 0x47C1	; 0x8047c1 <_ZL13g_tempMsgBuff>
    7066:	88 23       	and	r24, r24
    7068:	21 f0       	breq	.+8      	; 0x7072 <_Z16lb_broadcast_numjPKc+0x90>
    706a:	81 ec       	ldi	r24, 0xC1	; 193
    706c:	97 e4       	ldi	r25, 0x47	; 71
    706e:	0e 94 88 37 	call	0x6f10	; 0x6f10 <_Z12lb_send_textPc>
}
    7072:	26 96       	adiw	r28, 0x06	; 6
    7074:	cd bf       	out	0x3d, r28	; 61
    7076:	de bf       	out	0x3e, r29	; 62
    7078:	df 91       	pop	r29
    707a:	cf 91       	pop	r28
    707c:	1f 91       	pop	r17
    707e:	0f 91       	pop	r16
    7080:	08 95       	ret

00007082 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    7082:	90 e0       	ldi	r25, 0x00	; 0
    7084:	fc 01       	movw	r30, r24
    7086:	b0 97       	sbiw	r30, 0x20	; 32
    7088:	ed 35       	cpi	r30, 0x5D	; 93
    708a:	f1 05       	cpc	r31, r1
    708c:	08 f0       	brcs	.+2      	; 0x7090 <_Z12getMorseCharc+0xe>
    708e:	e8 c0       	rjmp	.+464    	; 0x7260 <_Z12getMorseCharc+0x1de>
    7090:	e7 54       	subi	r30, 0x47	; 71
    7092:	ff 4f       	sbci	r31, 0xFF	; 255
    7094:	0c 94 be 4b 	jmp	0x977c	; 0x977c <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7098:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    709a:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    709c:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    709e:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    70a0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    70a2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    70a4:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    70a6:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    70a8:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    70aa:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    70ac:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    70ae:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    70b0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    70b2:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    70b4:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    70b6:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    70b8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    70ba:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    70bc:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    70be:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    70c0:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    70c2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    70c4:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    70c6:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    70c8:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    70ca:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    70cc:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    70ce:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    70d0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    70d2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    70d4:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    70d6:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    70d8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    70da:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    70dc:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    70de:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    70e0:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    70e2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    70e4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    70e6:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    70e8:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    70ea:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    70ec:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    70ee:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    70f0:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    70f2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    70f4:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    70f6:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    70f8:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    70fa:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    70fc:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    70fe:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7100:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    7102:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    7104:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    7106:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    7108:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    710a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    710c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    710e:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    7110:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    7112:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    7114:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7116:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    7118:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    711a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    711c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    711e:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7120:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    7122:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    7124:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    7126:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7128:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    712a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    712c:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    712e:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7130:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    7132:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    7134:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    7136:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    7138:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    713a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    713c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    713e:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    7140:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    7142:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    7144:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    7146:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    7148:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    714a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    714c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    714e:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    7150:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    7152:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    7154:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7156:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    7158:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    715a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    715c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    715e:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7160:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    7162:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    7164:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7166:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    7168:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    716a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    716c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    716e:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    7170:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    7172:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    7174:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7176:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    7178:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    717a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    717c:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    717e:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    7180:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    7182:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    7184:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7186:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    7188:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    718a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    718c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    718e:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7190:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    7192:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    7194:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    7196:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7198:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    719a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    719c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    719e:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    71a0:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    71a2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    71a4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    71a6:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    71a8:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    71aa:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    71ac:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    71ae:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    71b0:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    71b2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    71b4:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    71b6:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    71b8:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    71ba:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    71bc:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    71be:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    71c0:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    71c2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    71c4:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    71c6:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    71c8:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    71ca:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    71cc:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    71ce:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    71d0:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    71d2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    71d4:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    71d6:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    71d8:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    71da:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    71dc:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    71de:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    71e0:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    71e2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    71e4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    71e6:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    71e8:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    71ea:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    71ec:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    71ee:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    71f0:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    71f2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    71f4:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    71f6:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    71f8:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    71fa:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    71fc:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    71fe:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    7200:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    7202:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    7204:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7206:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    7208:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    720a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    720c:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    720e:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    7210:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    7212:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    7214:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7216:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    7218:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    721a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    721c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    721e:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    7220:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    7222:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    7224:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7226:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    7228:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    722a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    722c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    722e:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    7230:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    7232:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    7234:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7236:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    7238:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    723a:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    723c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    723e:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    7240:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    7242:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    7244:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7246:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    7248:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    724a:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    724c:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    724e:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    7250:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    7252:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    7254:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    7256:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    7258:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    725a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    725c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    725e:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    7260:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    7262:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    7264:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    7266:	08 95       	ret

00007268 <_Z9makeMorsePcPbS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a bool indicating whether a CW carrier should be sent
 *  Pass in a pointer to a bool in the second and third arguments:
 */
bool makeMorse(char* s, bool* repeating, bool* finished)
{
    7268:	cf 93       	push	r28
    726a:	df 93       	push	r29
    726c:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static bool completedString = false;
	static bool carrierOn = false;
	static bool holdKeyDown = false;

	if(s)   /* load a new NULL-terminated string to send */
    726e:	00 97       	sbiw	r24, 0x00	; 0
    7270:	b1 f1       	breq	.+108    	; 0x72de <_Z9makeMorsePcPbS0_+0x76>
	{
		holdKeyDown = false;
    7272:	10 92 fe 47 	sts	0x47FE, r1	; 0x8047fe <_ZZ9makeMorsePcPbS0_E11holdKeyDown>

		if(repeating)
    7276:	61 15       	cp	r22, r1
    7278:	71 05       	cpc	r23, r1
    727a:	21 f0       	breq	.+8      	; 0x7284 <_Z9makeMorsePcPbS0_+0x1c>
		{
			repeat = *repeating;
    727c:	db 01       	movw	r26, r22
    727e:	2c 91       	ld	r18, X
    7280:	20 93 25 40 	sts	0x4025, r18	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
		}

		if(*s)
    7284:	fc 01       	movw	r30, r24
    7286:	20 81       	ld	r18, Z
    7288:	22 23       	and	r18, r18
    728a:	d9 f0       	breq	.+54     	; 0x72c2 <_Z9makeMorsePcPbS0_+0x5a>
		{
			str = s;
    728c:	80 93 fc 47 	sts	0x47FC, r24	; 0x8047fc <_ZZ9makeMorsePcPbS0_E3str>
    7290:	90 93 fd 47 	sts	0x47FD, r25	; 0x8047fd <_ZZ9makeMorsePcPbS0_E3str+0x1>
			c = ' ';
    7294:	80 e2       	ldi	r24, 0x20	; 32
    7296:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
			morseInProgress = getMorseChar(*str);
    729a:	82 2f       	mov	r24, r18
    729c:	0e 94 41 38 	call	0x7082	; 0x7082 <_Z12getMorseCharc>
    72a0:	60 93 f9 47 	sts	0x47F9, r22	; 0x8047f9 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    72a4:	70 93 fa 47 	sts	0x47FA, r23	; 0x8047fa <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    72a8:	80 93 fb 47 	sts	0x47FB, r24	; 0x8047fb <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
			charIndex = 0;
    72ac:	10 92 f8 47 	sts	0x47F8, r1	; 0x8047f8 <_ZZ9makeMorsePcPbS0_E9charIndex>
			symbolIndex = 0;
    72b0:	10 92 f7 47 	sts	0x47F7, r1	; 0x8047f7 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			elementIndex = 0;
    72b4:	10 92 f6 47 	sts	0x47F6, r1	; 0x8047f6 <_ZZ9makeMorsePcPbS0_E12elementIndex>
			addedSpace = 0;
    72b8:	10 92 f5 47 	sts	0x47F5, r1	; 0x8047f5 <_ZZ9makeMorsePcPbS0_E10addedSpace>
			completedString = false;
    72bc:	10 92 f4 47 	sts	0x47F4, r1	; 0x8047f4 <_ZZ9makeMorsePcPbS0_E15completedString>
    72c0:	0a c0       	rjmp	.+20     	; 0x72d6 <_Z9makeMorsePcPbS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    72c2:	10 92 fc 47 	sts	0x47FC, r1	; 0x8047fc <_ZZ9makeMorsePcPbS0_E3str>
    72c6:	10 92 fd 47 	sts	0x47FD, r1	; 0x8047fd <_ZZ9makeMorsePcPbS0_E3str+0x1>
			completedString = true;
    72ca:	81 e0       	ldi	r24, 0x01	; 1
    72cc:	80 93 f4 47 	sts	0x47F4, r24	; 0x8047f4 <_ZZ9makeMorsePcPbS0_E15completedString>
			if(finished)
    72d0:	20 97       	sbiw	r28, 0x00	; 0
    72d2:	09 f0       	breq	.+2      	; 0x72d6 <_Z9makeMorsePcPbS0_+0x6e>
			{
				*finished = true;
    72d4:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    72d6:	10 92 f3 47 	sts	0x47F3, r1	; 0x8047f3 <_ZZ9makeMorsePcPbS0_E9carrierOn>
		return( OFF);
    72da:	80 e0       	ldi	r24, 0x00	; 0
    72dc:	b8 c0       	rjmp	.+368    	; 0x744e <_Z9makeMorsePcPbS0_+0x1e6>
	}
	else if(str)
    72de:	e0 91 fc 47 	lds	r30, 0x47FC	; 0x8047fc <_ZZ9makeMorsePcPbS0_E3str>
    72e2:	f0 91 fd 47 	lds	r31, 0x47FD	; 0x8047fd <_ZZ9makeMorsePcPbS0_E3str+0x1>
    72e6:	30 97       	sbiw	r30, 0x00	; 0
    72e8:	09 f4       	brne	.+2      	; 0x72ec <_Z9makeMorsePcPbS0_+0x84>
    72ea:	a4 c0       	rjmp	.+328    	; 0x7434 <_Z9makeMorsePcPbS0_+0x1cc>
	{
		if(repeating)
    72ec:	61 15       	cp	r22, r1
    72ee:	71 05       	cpc	r23, r1
    72f0:	21 f0       	breq	.+8      	; 0x72fa <_Z9makeMorsePcPbS0_+0x92>
		{
			*repeating = repeat;
    72f2:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    72f6:	db 01       	movw	r26, r22
    72f8:	8c 93       	st	X, r24
		}

		if(completedString)
    72fa:	80 91 f4 47 	lds	r24, 0x47F4	; 0x8047f4 <_ZZ9makeMorsePcPbS0_E15completedString>
    72fe:	88 23       	and	r24, r24
    7300:	49 f0       	breq	.+18     	; 0x7314 <_Z9makeMorsePcPbS0_+0xac>
		{
			if(finished)
    7302:	20 97       	sbiw	r28, 0x00	; 0
    7304:	09 f4       	brne	.+2      	; 0x7308 <_Z9makeMorsePcPbS0_+0xa0>
    7306:	a2 c0       	rjmp	.+324    	; 0x744c <_Z9makeMorsePcPbS0_+0x1e4>
			{
				*finished = true;
    7308:	81 e0       	ldi	r24, 0x01	; 1
    730a:	88 83       	st	Y, r24
				holdKeyDown = false;
    730c:	10 92 fe 47 	sts	0x47FE, r1	; 0x8047fe <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
			}
			return( OFF);
    7310:	80 e0       	ldi	r24, 0x00	; 0
    7312:	9d c0       	rjmp	.+314    	; 0x744e <_Z9makeMorsePcPbS0_+0x1e6>
		}

		if(elementIndex)
    7314:	80 91 f6 47 	lds	r24, 0x47F6	; 0x8047f6 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7318:	88 23       	and	r24, r24
    731a:	21 f0       	breq	.+8      	; 0x7324 <_Z9makeMorsePcPbS0_+0xbc>
		{
			elementIndex--;
    731c:	81 50       	subi	r24, 0x01	; 1
    731e:	80 93 f6 47 	sts	0x47F6, r24	; 0x8047f6 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7322:	7e c0       	rjmp	.+252    	; 0x7420 <_Z9makeMorsePcPbS0_+0x1b8>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    7324:	80 91 f3 47 	lds	r24, 0x47F3	; 0x8047f3 <_ZZ9makeMorsePcPbS0_E9carrierOn>
    7328:	88 23       	and	r24, r24
    732a:	81 f0       	breq	.+32     	; 0x734c <_Z9makeMorsePcPbS0_+0xe4>
    732c:	80 91 fe 47 	lds	r24, 0x47FE	; 0x8047fe <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    7330:	81 11       	cpse	r24, r1
    7332:	0c c0       	rjmp	.+24     	; 0x734c <_Z9makeMorsePcPbS0_+0xe4>
		{
			carrierOn = false;
    7334:	10 92 f3 47 	sts	0x47F3, r1	; 0x8047f3 <_ZZ9makeMorsePcPbS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    7338:	80 91 f5 47 	lds	r24, 0x47F5	; 0x8047f5 <_ZZ9makeMorsePcPbS0_E10addedSpace>
    733c:	88 23       	and	r24, r24
    733e:	09 f4       	brne	.+2      	; 0x7342 <_Z9makeMorsePcPbS0_+0xda>
    7340:	6f c0       	rjmp	.+222    	; 0x7420 <_Z9makeMorsePcPbS0_+0x1b8>
			{
				elementIndex = addedSpace;
    7342:	80 93 f6 47 	sts	0x47F6, r24	; 0x8047f6 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				addedSpace = 0;
    7346:	10 92 f5 47 	sts	0x47F5, r1	; 0x8047f5 <_ZZ9makeMorsePcPbS0_E10addedSpace>
    734a:	6a c0       	rjmp	.+212    	; 0x7420 <_Z9makeMorsePcPbS0_+0x1b8>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    734c:	90 91 fa 47 	lds	r25, 0x47FA	; 0x8047fa <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    7350:	80 91 f7 47 	lds	r24, 0x47F7	; 0x8047f7 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    7354:	89 17       	cp	r24, r25
    7356:	90 f1       	brcs	.+100    	; 0x73bc <_Z9makeMorsePcPbS0_+0x154>
			{
				c = (*(str + ++charIndex));
    7358:	80 91 f8 47 	lds	r24, 0x47F8	; 0x8047f8 <_ZZ9makeMorsePcPbS0_E9charIndex>
    735c:	8f 5f       	subi	r24, 0xFF	; 255
    735e:	80 93 f8 47 	sts	0x47F8, r24	; 0x8047f8 <_ZZ9makeMorsePcPbS0_E9charIndex>
    7362:	df 01       	movw	r26, r30
    7364:	a8 0f       	add	r26, r24
    7366:	b1 1d       	adc	r27, r1
    7368:	8c 91       	ld	r24, X
    736a:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>

				if(!c)  /* wrap to beginning of text */
    736e:	81 11       	cpse	r24, r1
    7370:	19 c0       	rjmp	.+50     	; 0x73a4 <_Z9makeMorsePcPbS0_+0x13c>
				{
					if(repeat)
    7372:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    7376:	88 23       	and	r24, r24
    7378:	31 f0       	breq	.+12     	; 0x7386 <_Z9makeMorsePcPbS0_+0x11e>
					{
						c = *str;
    737a:	80 81       	ld	r24, Z
    737c:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
						charIndex = 0;
    7380:	10 92 f8 47 	sts	0x47F8, r1	; 0x8047f8 <_ZZ9makeMorsePcPbS0_E9charIndex>
    7384:	0f c0       	rjmp	.+30     	; 0x73a4 <_Z9makeMorsePcPbS0_+0x13c>
					}
					else
					{
						str = NULL;
    7386:	10 92 fc 47 	sts	0x47FC, r1	; 0x8047fc <_ZZ9makeMorsePcPbS0_E3str>
    738a:	10 92 fd 47 	sts	0x47FD, r1	; 0x8047fd <_ZZ9makeMorsePcPbS0_E3str+0x1>
						carrierOn = OFF;
    738e:	10 92 f3 47 	sts	0x47F3, r1	; 0x8047f3 <_ZZ9makeMorsePcPbS0_E9carrierOn>
						completedString = true;
    7392:	91 e0       	ldi	r25, 0x01	; 1
    7394:	90 93 f4 47 	sts	0x47F4, r25	; 0x8047f4 <_ZZ9makeMorsePcPbS0_E15completedString>
						if(finished)
    7398:	20 97       	sbiw	r28, 0x00	; 0
    739a:	09 f0       	breq	.+2      	; 0x739e <_Z9makeMorsePcPbS0_+0x136>
						{
							*finished = true;
    739c:	98 83       	st	Y, r25
						}
						holdKeyDown = false;
    739e:	10 92 fe 47 	sts	0x47FE, r1	; 0x8047fe <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
						return( OFF );
    73a2:	55 c0       	rjmp	.+170    	; 0x744e <_Z9makeMorsePcPbS0_+0x1e6>
					}
				}

				morseInProgress = getMorseChar(c);
    73a4:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    73a8:	0e 94 41 38 	call	0x7082	; 0x7082 <_Z12getMorseCharc>
    73ac:	60 93 f9 47 	sts	0x47F9, r22	; 0x8047f9 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    73b0:	70 93 fa 47 	sts	0x47FA, r23	; 0x8047fa <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    73b4:	80 93 fb 47 	sts	0x47FB, r24	; 0x8047fb <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    73b8:	10 92 f7 47 	sts	0x47F7, r1	; 0x8047f7 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    73bc:	80 91 f9 47 	lds	r24, 0x47F9	; 0x8047f9 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    73c0:	8d 3f       	cpi	r24, 0xFD	; 253
    73c2:	f8 f4       	brcc	.+62     	; 0x7402 <_Z9makeMorsePcPbS0_+0x19a>
			{
				bool isDah = morseInProgress.pattern & (1 << symbolIndex++);
    73c4:	30 91 f7 47 	lds	r19, 0x47F7	; 0x8047f7 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    73c8:	21 e0       	ldi	r18, 0x01	; 1
    73ca:	23 0f       	add	r18, r19
    73cc:	20 93 f7 47 	sts	0x47F7, r18	; 0x8047f7 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    73d0:	90 e0       	ldi	r25, 0x00	; 0
    73d2:	02 c0       	rjmp	.+4      	; 0x73d8 <_Z9makeMorsePcPbS0_+0x170>
    73d4:	95 95       	asr	r25
    73d6:	87 95       	ror	r24
    73d8:	3a 95       	dec	r19
    73da:	e2 f7       	brpl	.-8      	; 0x73d4 <_Z9makeMorsePcPbS0_+0x16c>

				if(isDah)
    73dc:	80 ff       	sbrs	r24, 0
    73de:	04 c0       	rjmp	.+8      	; 0x73e8 <_Z9makeMorsePcPbS0_+0x180>
				{
					elementIndex = 2;
    73e0:	82 e0       	ldi	r24, 0x02	; 2
    73e2:	80 93 f6 47 	sts	0x47F6, r24	; 0x8047f6 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    73e6:	02 c0       	rjmp	.+4      	; 0x73ec <_Z9makeMorsePcPbS0_+0x184>
				}
				else
				{
					elementIndex = 0;
    73e8:	10 92 f6 47 	sts	0x47F6, r1	; 0x8047f6 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}

				carrierOn = true;
    73ec:	81 e0       	ldi	r24, 0x01	; 1
    73ee:	80 93 f3 47 	sts	0x47F3, r24	; 0x8047f3 <_ZZ9makeMorsePcPbS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    73f2:	80 91 fa 47 	lds	r24, 0x47FA	; 0x8047fa <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    73f6:	28 17       	cp	r18, r24
    73f8:	98 f0       	brcs	.+38     	; 0x7420 <_Z9makeMorsePcPbS0_+0x1b8>
				{
					addedSpace = 2;
    73fa:	82 e0       	ldi	r24, 0x02	; 2
    73fc:	80 93 f5 47 	sts	0x47F5, r24	; 0x8047f5 <_ZZ9makeMorsePcPbS0_E10addedSpace>
    7400:	0f c0       	rjmp	.+30     	; 0x7420 <_Z9makeMorsePcPbS0_+0x1b8>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    7402:	80 91 fa 47 	lds	r24, 0x47FA	; 0x8047fa <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    7406:	9f ef       	ldi	r25, 0xFF	; 255
    7408:	90 93 f7 47 	sts	0x47F7, r25	; 0x8047f7 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
				carrierOn = false;
    740c:	10 92 f3 47 	sts	0x47F3, r1	; 0x8047f3 <_ZZ9makeMorsePcPbS0_E9carrierOn>
				if(sym >= 4 )
    7410:	84 30       	cpi	r24, 0x04	; 4
    7412:	20 f0       	brcs	.+8      	; 0x741c <_Z9makeMorsePcPbS0_+0x1b4>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    7414:	84 50       	subi	r24, 0x04	; 4
    7416:	80 93 f6 47 	sts	0x47F6, r24	; 0x8047f6 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    741a:	02 c0       	rjmp	.+4      	; 0x7420 <_Z9makeMorsePcPbS0_+0x1b8>
				}
				else
				{
					elementIndex = 0;
    741c:	10 92 f6 47 	sts	0x47F6, r1	; 0x8047f6 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    7420:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    7424:	8c 33       	cpi	r24, 0x3C	; 60
    7426:	21 f4       	brne	.+8      	; 0x7430 <_Z9makeMorsePcPbS0_+0x1c8>
		{
			holdKeyDown = true;
    7428:	81 e0       	ldi	r24, 0x01	; 1
    742a:	80 93 fe 47 	sts	0x47FE, r24	; 0x8047fe <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    742e:	02 c0       	rjmp	.+4      	; 0x7434 <_Z9makeMorsePcPbS0_+0x1cc>
		}
		else
		{
			holdKeyDown = false;
    7430:	10 92 fe 47 	sts	0x47FE, r1	; 0x8047fe <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
		}
	}

	if(finished)
    7434:	20 97       	sbiw	r28, 0x00	; 0
    7436:	19 f0       	breq	.+6      	; 0x743e <_Z9makeMorsePcPbS0_+0x1d6>
	{
		*finished = completedString;
    7438:	80 91 f4 47 	lds	r24, 0x47F4	; 0x8047f4 <_ZZ9makeMorsePcPbS0_E15completedString>
    743c:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    743e:	80 91 fe 47 	lds	r24, 0x47FE	; 0x8047fe <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    7442:	81 11       	cpse	r24, r1
    7444:	04 c0       	rjmp	.+8      	; 0x744e <_Z9makeMorsePcPbS0_+0x1e6>
	{
		return(true);
	}
	else
	{
		return( carrierOn);
    7446:	80 91 f3 47 	lds	r24, 0x47F3	; 0x8047f3 <_ZZ9makeMorsePcPbS0_E9carrierOn>
    744a:	01 c0       	rjmp	.+2      	; 0x744e <_Z9makeMorsePcPbS0_+0x1e6>
			if(finished)
			{
				*finished = true;
				holdKeyDown = false;
			}
			return( OFF);
    744c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return( carrierOn);
	}
}
    744e:	df 91       	pop	r29
    7450:	cf 91       	pop	r28
    7452:	08 95       	ret

00007454 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    7454:	cf 92       	push	r12
    7456:	df 92       	push	r13
    7458:	ef 92       	push	r14
    745a:	ff 92       	push	r15
    745c:	1f 93       	push	r17
    745e:	cf 93       	push	r28
    7460:	df 93       	push	r29
    7462:	6c 01       	movw	r12, r24
    7464:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    7466:	c0 e0       	ldi	r28, 0x00	; 0
    7468:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    746a:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    746c:	c4 31       	cpi	r28, 0x14	; 20
    746e:	d1 05       	cpc	r29, r1
    7470:	74 f4       	brge	.+28     	; 0x748e <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    7472:	f6 01       	movw	r30, r12
    7474:	ec 0f       	add	r30, r28
    7476:	fd 1f       	adc	r31, r29
    7478:	80 81       	ld	r24, Z
		if(!c)
    747a:	88 23       	and	r24, r24
    747c:	41 f0       	breq	.+16     	; 0x748e <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    747e:	0e 94 41 38 	call	0x7082	; 0x7082 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    7482:	6d 3f       	cpi	r22, 0xFD	; 253
    7484:	08 f4       	brcc	.+2      	; 0x7488 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    7486:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    7488:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    748a:	21 96       	adiw	r28, 0x01	; 1
    748c:	ef cf       	rjmp	.-34     	; 0x746c <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    748e:	80 eb       	ldi	r24, 0xB0	; 176
    7490:	94 e0       	ldi	r25, 0x04	; 4
    7492:	b7 01       	movw	r22, r14
    7494:	0e 94 55 4b 	call	0x96aa	; 0x96aa <__udivmodhi4>
}
    7498:	16 9f       	mul	r17, r22
    749a:	c0 01       	movw	r24, r0
    749c:	17 9f       	mul	r17, r23
    749e:	90 0d       	add	r25, r0
    74a0:	11 24       	eor	r1, r1
    74a2:	df 91       	pop	r29
    74a4:	cf 91       	pop	r28
    74a6:	1f 91       	pop	r17
    74a8:	ff 90       	pop	r15
    74aa:	ef 90       	pop	r14
    74ac:	df 90       	pop	r13
    74ae:	cf 90       	pop	r12
    74b0:	08 95       	ret

000074b2 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    74b2:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    74b4:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    74b6:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    74b8:	40 83       	st	Z, r20
	ret                             // Return to caller
    74ba:	08 95       	ret

000074bc <_ZL21USART4_initializationm>:
	}
	
	serialbus_end_tx();
	memset((SerialbusRxBuffer*)rx_buffer, 0, sizeof(*(SerialbusRxBuffer*)rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    74bc:	20 b3       	in	r18, 0x10	; 16
    74be:	2d 7f       	andi	r18, 0xFD	; 253
    74c0:	20 bb       	out	0x10, r18	; 16
    74c2:	e1 e9       	ldi	r30, 0x91	; 145
    74c4:	f4 e0       	ldi	r31, 0x04	; 4
    74c6:	20 81       	ld	r18, Z
    74c8:	27 7f       	andi	r18, 0xF7	; 247
    74ca:	20 83       	st	Z, r18
    74cc:	20 b3       	in	r18, 0x10	; 16
    74ce:	21 60       	ori	r18, 0x01	; 1
    74d0:	20 bb       	out	0x10, r18	; 16
    74d2:	21 b3       	in	r18, 0x11	; 17
    74d4:	21 60       	ori	r18, 0x01	; 1
    74d6:	21 bb       	out	0x11, r18	; 17
    74d8:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <USART4_init>
    74dc:	08 95       	ret

000074de <_ZL21USART1_initializationm>:
    74de:	28 b1       	in	r18, 0x08	; 8
    74e0:	2d 7f       	andi	r18, 0xFD	; 253
    74e2:	28 b9       	out	0x08, r18	; 8
    74e4:	e1 e5       	ldi	r30, 0x51	; 81
    74e6:	f4 e0       	ldi	r31, 0x04	; 4
    74e8:	20 81       	ld	r18, Z
    74ea:	27 7f       	andi	r18, 0xF7	; 247
    74ec:	20 83       	st	Z, r18
    74ee:	28 b1       	in	r18, 0x08	; 8
    74f0:	21 60       	ori	r18, 0x01	; 1
    74f2:	28 b9       	out	0x08, r18	; 8
    74f4:	29 b1       	in	r18, 0x09	; 9
    74f6:	21 60       	ori	r18, 0x01	; 1
    74f8:	29 b9       	out	0x09, r18	; 9
    74fa:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <USART1_init>
    74fe:	08 95       	ret

00007500 <nextFullSBTxBuffer>:
    7500:	90 e0       	ldi	r25, 0x00	; 0
    7502:	80 91 02 48 	lds	r24, 0x4802	; 0x804802 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    7506:	28 2f       	mov	r18, r24
    7508:	30 e0       	ldi	r19, 0x00	; 0
    750a:	49 e2       	ldi	r20, 0x29	; 41
    750c:	42 9f       	mul	r20, r18
    750e:	f0 01       	movw	r30, r0
    7510:	43 9f       	mul	r20, r19
    7512:	f0 0d       	add	r31, r0
    7514:	11 24       	eor	r1, r1
    7516:	ef 57       	subi	r30, 0x7F	; 127
    7518:	f7 4b       	sbci	r31, 0xB7	; 183
    751a:	40 81       	ld	r20, Z
    751c:	41 11       	cpse	r20, r1
    751e:	0b c0       	rjmp	.+22     	; 0x7536 <nextFullSBTxBuffer+0x36>
    7520:	9f 5f       	subi	r25, 0xFF	; 255
    7522:	93 30       	cpi	r25, 0x03	; 3
    7524:	50 f4       	brcc	.+20     	; 0x753a <nextFullSBTxBuffer+0x3a>
    7526:	8f 5f       	subi	r24, 0xFF	; 255
    7528:	80 93 02 48 	sts	0x4802, r24	; 0x804802 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    752c:	83 30       	cpi	r24, 0x03	; 3
    752e:	48 f3       	brcs	.-46     	; 0x7502 <nextFullSBTxBuffer+0x2>
    7530:	10 92 02 48 	sts	0x4802, r1	; 0x804802 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    7534:	e6 cf       	rjmp	.-52     	; 0x7502 <nextFullSBTxBuffer+0x2>
    7536:	81 e0       	ldi	r24, 0x01	; 1
    7538:	01 c0       	rjmp	.+2      	; 0x753c <nextFullSBTxBuffer+0x3c>
    753a:	80 e0       	ldi	r24, 0x00	; 0
    753c:	88 23       	and	r24, r24
    753e:	49 f0       	breq	.+18     	; 0x7552 <nextFullSBTxBuffer+0x52>
    7540:	49 e2       	ldi	r20, 0x29	; 41
    7542:	42 9f       	mul	r20, r18
    7544:	c0 01       	movw	r24, r0
    7546:	43 9f       	mul	r20, r19
    7548:	90 0d       	add	r25, r0
    754a:	11 24       	eor	r1, r1
    754c:	8f 57       	subi	r24, 0x7F	; 127
    754e:	97 4b       	sbci	r25, 0xB7	; 183
    7550:	08 95       	ret
    7552:	80 e0       	ldi	r24, 0x00	; 0
    7554:	90 e0       	ldi	r25, 0x00	; 0
    7556:	08 95       	ret

00007558 <nextEmptySBTxBuffer>:
    7558:	90 e0       	ldi	r25, 0x00	; 0
    755a:	80 91 01 48 	lds	r24, 0x4801	; 0x804801 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    755e:	28 2f       	mov	r18, r24
    7560:	30 e0       	ldi	r19, 0x00	; 0
    7562:	49 e2       	ldi	r20, 0x29	; 41
    7564:	42 9f       	mul	r20, r18
    7566:	f0 01       	movw	r30, r0
    7568:	43 9f       	mul	r20, r19
    756a:	f0 0d       	add	r31, r0
    756c:	11 24       	eor	r1, r1
    756e:	ef 57       	subi	r30, 0x7F	; 127
    7570:	f7 4b       	sbci	r31, 0xB7	; 183
    7572:	40 81       	ld	r20, Z
    7574:	44 23       	and	r20, r20
    7576:	59 f0       	breq	.+22     	; 0x758e <nextEmptySBTxBuffer+0x36>
    7578:	9f 5f       	subi	r25, 0xFF	; 255
    757a:	93 30       	cpi	r25, 0x03	; 3
    757c:	50 f4       	brcc	.+20     	; 0x7592 <nextEmptySBTxBuffer+0x3a>
    757e:	8f 5f       	subi	r24, 0xFF	; 255
    7580:	80 93 01 48 	sts	0x4801, r24	; 0x804801 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    7584:	83 30       	cpi	r24, 0x03	; 3
    7586:	48 f3       	brcs	.-46     	; 0x755a <nextEmptySBTxBuffer+0x2>
    7588:	10 92 01 48 	sts	0x4801, r1	; 0x804801 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    758c:	e6 cf       	rjmp	.-52     	; 0x755a <nextEmptySBTxBuffer+0x2>
    758e:	81 e0       	ldi	r24, 0x01	; 1
    7590:	01 c0       	rjmp	.+2      	; 0x7594 <nextEmptySBTxBuffer+0x3c>
    7592:	80 e0       	ldi	r24, 0x00	; 0
    7594:	88 23       	and	r24, r24
    7596:	49 f0       	breq	.+18     	; 0x75aa <nextEmptySBTxBuffer+0x52>
    7598:	49 e2       	ldi	r20, 0x29	; 41
    759a:	42 9f       	mul	r20, r18
    759c:	c0 01       	movw	r24, r0
    759e:	43 9f       	mul	r20, r19
    75a0:	90 0d       	add	r25, r0
    75a2:	11 24       	eor	r1, r1
    75a4:	8f 57       	subi	r24, 0x7F	; 127
    75a6:	97 4b       	sbci	r25, 0xB7	; 183
    75a8:	08 95       	ret
    75aa:	80 e0       	ldi	r24, 0x00	; 0
    75ac:	90 e0       	ldi	r25, 0x00	; 0
    75ae:	08 95       	ret

000075b0 <nextEmptySBRxBuffer>:
    75b0:	90 e0       	ldi	r25, 0x00	; 0
    75b2:	80 91 00 48 	lds	r24, 0x4800	; 0x804800 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    75b6:	28 2f       	mov	r18, r24
    75b8:	30 e0       	ldi	r19, 0x00	; 0
    75ba:	4f e3       	ldi	r20, 0x3F	; 63
    75bc:	42 9f       	mul	r20, r18
    75be:	f0 01       	movw	r30, r0
    75c0:	43 9f       	mul	r20, r19
    75c2:	f0 0d       	add	r31, r0
    75c4:	11 24       	eor	r1, r1
    75c6:	ed 5f       	subi	r30, 0xFD	; 253
    75c8:	f7 4b       	sbci	r31, 0xB7	; 183
    75ca:	41 81       	ldd	r20, Z+1	; 0x01
    75cc:	52 81       	ldd	r21, Z+2	; 0x02
    75ce:	45 2b       	or	r20, r21
    75d0:	59 f0       	breq	.+22     	; 0x75e8 <nextEmptySBRxBuffer+0x38>
    75d2:	9f 5f       	subi	r25, 0xFF	; 255
    75d4:	92 30       	cpi	r25, 0x02	; 2
    75d6:	50 f4       	brcc	.+20     	; 0x75ec <nextEmptySBRxBuffer+0x3c>
    75d8:	8f 5f       	subi	r24, 0xFF	; 255
    75da:	80 93 00 48 	sts	0x4800, r24	; 0x804800 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    75de:	82 30       	cpi	r24, 0x02	; 2
    75e0:	40 f3       	brcs	.-48     	; 0x75b2 <nextEmptySBRxBuffer+0x2>
    75e2:	10 92 00 48 	sts	0x4800, r1	; 0x804800 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    75e6:	e5 cf       	rjmp	.-54     	; 0x75b2 <nextEmptySBRxBuffer+0x2>
    75e8:	81 e0       	ldi	r24, 0x01	; 1
    75ea:	01 c0       	rjmp	.+2      	; 0x75ee <nextEmptySBRxBuffer+0x3e>
    75ec:	80 e0       	ldi	r24, 0x00	; 0
    75ee:	88 23       	and	r24, r24
    75f0:	49 f0       	breq	.+18     	; 0x7604 <nextEmptySBRxBuffer+0x54>
    75f2:	4f e3       	ldi	r20, 0x3F	; 63
    75f4:	42 9f       	mul	r20, r18
    75f6:	c0 01       	movw	r24, r0
    75f8:	43 9f       	mul	r20, r19
    75fa:	90 0d       	add	r25, r0
    75fc:	11 24       	eor	r1, r1
    75fe:	8d 5f       	subi	r24, 0xFD	; 253
    7600:	97 4b       	sbci	r25, 0xB7	; 183
    7602:	08 95       	ret
    7604:	80 e0       	ldi	r24, 0x00	; 0
    7606:	90 e0       	ldi	r25, 0x00	; 0
    7608:	08 95       	ret

0000760a <nextFullSBRxBuffer>:
    760a:	90 e0       	ldi	r25, 0x00	; 0
    760c:	80 91 ff 47 	lds	r24, 0x47FF	; 0x8047ff <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7610:	28 2f       	mov	r18, r24
    7612:	30 e0       	ldi	r19, 0x00	; 0
    7614:	4f e3       	ldi	r20, 0x3F	; 63
    7616:	42 9f       	mul	r20, r18
    7618:	f0 01       	movw	r30, r0
    761a:	43 9f       	mul	r20, r19
    761c:	f0 0d       	add	r31, r0
    761e:	11 24       	eor	r1, r1
    7620:	ed 5f       	subi	r30, 0xFD	; 253
    7622:	f7 4b       	sbci	r31, 0xB7	; 183
    7624:	41 81       	ldd	r20, Z+1	; 0x01
    7626:	52 81       	ldd	r21, Z+2	; 0x02
    7628:	45 2b       	or	r20, r21
    762a:	59 f4       	brne	.+22     	; 0x7642 <nextFullSBRxBuffer+0x38>
    762c:	9f 5f       	subi	r25, 0xFF	; 255
    762e:	92 30       	cpi	r25, 0x02	; 2
    7630:	50 f4       	brcc	.+20     	; 0x7646 <nextFullSBRxBuffer+0x3c>
    7632:	8f 5f       	subi	r24, 0xFF	; 255
    7634:	80 93 ff 47 	sts	0x47FF, r24	; 0x8047ff <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7638:	82 30       	cpi	r24, 0x02	; 2
    763a:	40 f3       	brcs	.-48     	; 0x760c <nextFullSBRxBuffer+0x2>
    763c:	10 92 ff 47 	sts	0x47FF, r1	; 0x8047ff <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7640:	e5 cf       	rjmp	.-54     	; 0x760c <nextFullSBRxBuffer+0x2>
    7642:	81 e0       	ldi	r24, 0x01	; 1
    7644:	01 c0       	rjmp	.+2      	; 0x7648 <nextFullSBRxBuffer+0x3e>
    7646:	80 e0       	ldi	r24, 0x00	; 0
    7648:	88 23       	and	r24, r24
    764a:	49 f0       	breq	.+18     	; 0x765e <nextFullSBRxBuffer+0x54>
    764c:	4f e3       	ldi	r20, 0x3F	; 63
    764e:	42 9f       	mul	r20, r18
    7650:	c0 01       	movw	r24, r0
    7652:	43 9f       	mul	r20, r19
    7654:	90 0d       	add	r25, r0
    7656:	11 24       	eor	r1, r1
    7658:	8d 5f       	subi	r24, 0xFD	; 253
    765a:	97 4b       	sbci	r25, 0xB7	; 183
    765c:	08 95       	ret
    765e:	80 e0       	ldi	r24, 0x00	; 0
    7660:	90 e0       	ldi	r25, 0x00	; 0
    7662:	08 95       	ret

00007664 <serialbusTxInProgress>:
    7664:	80 91 fc 48 	lds	r24, 0x48FC	; 0x8048fc <_ZL19serialbus_tx_active>
    7668:	08 95       	ret

0000766a <_Z18serialbus_start_txv>:
    766a:	cf 93       	push	r28
    766c:	c0 91 fc 48 	lds	r28, 0x48FC	; 0x8048fc <_ZL19serialbus_tx_active>
    7670:	81 e0       	ldi	r24, 0x01	; 1
    7672:	c8 27       	eor	r28, r24
    7674:	59 f0       	breq	.+22     	; 0x768c <_Z18serialbus_start_txv+0x22>
    7676:	80 93 fc 48 	sts	0x48FC, r24	; 0x8048fc <_ZL19serialbus_tx_active>
    767a:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    767e:	81 11       	cpse	r24, r1
    7680:	03 c0       	rjmp	.+6      	; 0x7688 <_Z18serialbus_start_txv+0x1e>
    7682:	0e 94 ce 46 	call	0x8d9c	; 0x8d9c <USART4_enable_tx>
    7686:	02 c0       	rjmp	.+4      	; 0x768c <_Z18serialbus_start_txv+0x22>
    7688:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <USART1_enable_tx>
    768c:	8c 2f       	mov	r24, r28
    768e:	cf 91       	pop	r28
    7690:	08 95       	ret

00007692 <serialbus_end_tx>:
    7692:	80 91 fc 48 	lds	r24, 0x48FC	; 0x8048fc <_ZL19serialbus_tx_active>
    7696:	88 23       	and	r24, r24
    7698:	89 f0       	breq	.+34     	; 0x76bc <serialbus_end_tx+0x2a>
    769a:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    769e:	84 30       	cpi	r24, 0x04	; 4
    76a0:	31 f4       	brne	.+12     	; 0x76ae <serialbus_end_tx+0x1c>
    76a2:	e0 e8       	ldi	r30, 0x80	; 128
    76a4:	f8 e0       	ldi	r31, 0x08	; 8
    76a6:	85 81       	ldd	r24, Z+5	; 0x05
    76a8:	8f 7d       	andi	r24, 0xDF	; 223
    76aa:	85 83       	std	Z+5, r24	; 0x05
    76ac:	05 c0       	rjmp	.+10     	; 0x76b8 <serialbus_end_tx+0x26>
    76ae:	e0 e2       	ldi	r30, 0x20	; 32
    76b0:	f8 e0       	ldi	r31, 0x08	; 8
    76b2:	85 81       	ldd	r24, Z+5	; 0x05
    76b4:	8f 7d       	andi	r24, 0xDF	; 223
    76b6:	85 83       	std	Z+5, r24	; 0x05
    76b8:	10 92 fc 48 	sts	0x48FC, r1	; 0x8048fc <_ZL19serialbus_tx_active>
    76bc:	08 95       	ret

000076be <serialbus_init>:
    76be:	cf 93       	push	r28
    76c0:	2f e3       	ldi	r18, 0x3F	; 63
    76c2:	e3 e0       	ldi	r30, 0x03	; 3
    76c4:	f8 e4       	ldi	r31, 0x48	; 72
    76c6:	df 01       	movw	r26, r30
    76c8:	1d 92       	st	X+, r1
    76ca:	2a 95       	dec	r18
    76cc:	e9 f7       	brne	.-6      	; 0x76c8 <serialbus_init+0xa>
    76ce:	a0 e0       	ldi	r26, 0x00	; 0
    76d0:	b0 e0       	ldi	r27, 0x00	; 0
    76d2:	a3 30       	cpi	r26, 0x03	; 3
    76d4:	b1 05       	cpc	r27, r1
    76d6:	5c f4       	brge	.+22     	; 0x76ee <serialbus_init+0x30>
    76d8:	29 e2       	ldi	r18, 0x29	; 41
    76da:	2a 9f       	mul	r18, r26
    76dc:	f0 01       	movw	r30, r0
    76de:	2b 9f       	mul	r18, r27
    76e0:	f0 0d       	add	r31, r0
    76e2:	11 24       	eor	r1, r1
    76e4:	ef 57       	subi	r30, 0x7F	; 127
    76e6:	f7 4b       	sbci	r31, 0xB7	; 183
    76e8:	10 82       	st	Z, r1
    76ea:	11 96       	adiw	r26, 0x01	; 1
    76ec:	f2 cf       	rjmp	.-28     	; 0x76d2 <serialbus_init+0x14>
    76ee:	46 30       	cpi	r20, 0x06	; 6
    76f0:	21 f4       	brne	.+8      	; 0x76fa <serialbus_init+0x3c>
    76f2:	20 91 27 40 	lds	r18, 0x4027	; 0x804027 <g_serialbus_usart_number>
    76f6:	27 30       	cpi	r18, 0x07	; 7
    76f8:	51 f4       	brne	.+20     	; 0x770e <serialbus_init+0x50>
    76fa:	c4 2f       	mov	r28, r20
    76fc:	44 30       	cpi	r20, 0x04	; 4
    76fe:	19 f4       	brne	.+6      	; 0x7706 <serialbus_init+0x48>
    7700:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <_ZL21USART4_initializationm>
    7704:	02 c0       	rjmp	.+4      	; 0x770a <serialbus_init+0x4c>
    7706:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZL21USART1_initializationm>
    770a:	c0 93 27 40 	sts	0x4027, r28	; 0x804027 <g_serialbus_usart_number>
    770e:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <_ZL14g_bus_disabled>
    7712:	cf 91       	pop	r28
    7714:	08 95       	ret

00007716 <_Z19serialbus_send_textPc>:
	}
}


bool serialbus_send_text(char* text)
{
    7716:	ef 92       	push	r14
    7718:	ff 92       	push	r15
    771a:	1f 93       	push	r17
    771c:	cf 93       	push	r28
    771e:	df 93       	push	r29
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
    7720:	10 91 26 40 	lds	r17, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7724:	11 11       	cpse	r17, r1
    7726:	2d c0       	rjmp	.+90     	; 0x7782 <_Z19serialbus_send_textPc+0x6c>
	{
		return( err);
	}

	if(text)
    7728:	00 97       	sbiw	r24, 0x00	; 0
    772a:	69 f1       	breq	.+90     	; 0x7786 <_Z19serialbus_send_textPc+0x70>
    772c:	7c 01       	movw	r14, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    772e:	0e 94 ac 3a 	call	0x7558	; 0x7558 <nextEmptySBTxBuffer>


bool serialbus_send_text(char* text)
{
	bool err = true;
	uint16_t tries = 200;
    7732:	c8 ec       	ldi	r28, 0xC8	; 200
    7734:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    7736:	00 97       	sbiw	r24, 0x00	; 0
    7738:	a1 f4       	brne	.+40     	; 0x7762 <_Z19serialbus_send_textPc+0x4c>
    773a:	20 97       	sbiw	r28, 0x00	; 0
    773c:	91 f0       	breq	.+36     	; 0x7762 <_Z19serialbus_send_textPc+0x4c>
		{
			while(serialbusTxInProgress() && tries)
    773e:	0e 94 32 3b 	call	0x7664	; 0x7664 <serialbusTxInProgress>
    7742:	88 23       	and	r24, r24
    7744:	21 f0       	breq	.+8      	; 0x774e <_Z19serialbus_send_textPc+0x38>
    7746:	20 97       	sbiw	r28, 0x00	; 0
    7748:	19 f4       	brne	.+6      	; 0x7750 <_Z19serialbus_send_textPc+0x3a>
    774a:	81 2f       	mov	r24, r17
    774c:	01 c0       	rjmp	.+2      	; 0x7750 <_Z19serialbus_send_textPc+0x3a>
    774e:	81 2f       	mov	r24, r17
    7750:	88 23       	and	r24, r24
    7752:	21 f0       	breq	.+8      	; 0x775c <_Z19serialbus_send_textPc+0x46>
			{
				if(tries)
    7754:	20 97       	sbiw	r28, 0x00	; 0
    7756:	99 f3       	breq	.-26     	; 0x773e <_Z19serialbus_send_textPc+0x28>
				{
					tries--;    /* wait until transmit finishes */
    7758:	21 97       	sbiw	r28, 0x01	; 1
    775a:	f1 cf       	rjmp	.-30     	; 0x773e <_Z19serialbus_send_textPc+0x28>
				}
			}
			buff = nextEmptySBTxBuffer();
    775c:	0e 94 ac 3a 	call	0x7558	; 0x7558 <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    7760:	ea cf       	rjmp	.-44     	; 0x7736 <_Z19serialbus_send_textPc+0x20>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    7762:	00 97       	sbiw	r24, 0x00	; 0
    7764:	91 f0       	breq	.+36     	; 0x778a <_Z19serialbus_send_textPc+0x74>
		{
			sprintf(*buff, text);
    7766:	ff 92       	push	r15
    7768:	ef 92       	push	r14
    776a:	9f 93       	push	r25
    776c:	8f 93       	push	r24
    776e:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>

			serialbus_start_tx();
    7772:	0e 94 35 3b 	call	0x766a	; 0x766a <_Z18serialbus_start_txv>
    7776:	0f 90       	pop	r0
    7778:	0f 90       	pop	r0
    777a:	0f 90       	pop	r0
    777c:	0f 90       	pop	r0
			err = false;
    777e:	80 e0       	ldi	r24, 0x00	; 0
    7780:	05 c0       	rjmp	.+10     	; 0x778c <_Z19serialbus_send_textPc+0x76>
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    7782:	81 e0       	ldi	r24, 0x01	; 1
    7784:	03 c0       	rjmp	.+6      	; 0x778c <_Z19serialbus_send_textPc+0x76>
}


bool serialbus_send_text(char* text)
{
	bool err = true;
    7786:	81 e0       	ldi	r24, 0x01	; 1
    7788:	01 c0       	rjmp	.+2      	; 0x778c <_Z19serialbus_send_textPc+0x76>
    778a:	81 e0       	ldi	r24, 0x01	; 1
			err = false;
		}
	}

	return(err);
}
    778c:	df 91       	pop	r29
    778e:	cf 91       	pop	r28
    7790:	1f 91       	pop	r17
    7792:	ff 90       	pop	r15
    7794:	ef 90       	pop	r14
    7796:	08 95       	ret

00007798 <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    7798:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    779c:	81 11       	cpse	r24, r1
    779e:	06 c0       	rjmp	.+12     	; 0x77ac <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    77a0:	84 ec       	ldi	r24, 0xC4	; 196
    77a2:	94 e4       	ldi	r25, 0x44	; 68
    77a4:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_Z19serialbus_send_textPc>
    77a8:	81 11       	cpse	r24, r1
    77aa:	fa cf       	rjmp	.-12     	; 0x77a0 <sb_send_NewPrompt+0x8>
    77ac:	08 95       	ret

000077ae <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    77ae:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    77b2:	81 11       	cpse	r24, r1
    77b4:	04 c0       	rjmp	.+8      	; 0x77be <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    77b6:	87 ec       	ldi	r24, 0xC7	; 199
    77b8:	94 e4       	ldi	r25, 0x44	; 68
    77ba:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_Z19serialbus_send_textPc>
    77be:	08 95       	ret

000077c0 <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    77c0:	90 91 26 40 	lds	r25, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    77c4:	91 11       	cpse	r25, r1
    77c6:	07 c0       	rjmp	.+14     	; 0x77d6 <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    77c8:	ed ef       	ldi	r30, 0xFD	; 253
    77ca:	f8 e4       	ldi	r31, 0x48	; 72
    77cc:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    77ce:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    77d0:	cf 01       	movw	r24, r30
    77d2:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_Z19serialbus_send_textPc>
    77d6:	08 95       	ret

000077d8 <sb_send_string>:
}

bool sb_send_string(char* str)
{
    77d8:	8f 92       	push	r8
    77da:	9f 92       	push	r9
    77dc:	af 92       	push	r10
    77de:	bf 92       	push	r11
    77e0:	df 92       	push	r13
    77e2:	ef 92       	push	r14
    77e4:	ff 92       	push	r15
    77e6:	0f 93       	push	r16
    77e8:	1f 93       	push	r17
    77ea:	cf 93       	push	r28
    77ec:	df 93       	push	r29
    77ee:	cd b7       	in	r28, 0x3d	; 61
    77f0:	de b7       	in	r29, 0x3e	; 62
    77f2:	aa 97       	sbiw	r28, 0x2a	; 42
    77f4:	cd bf       	out	0x3d, r28	; 61
    77f6:	de bf       	out	0x3e, r29	; 62
    77f8:	fc 01       	movw	r30, r24
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    77fa:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    77fe:	81 11       	cpse	r24, r1
    7800:	45 c0       	rjmp	.+138    	; 0x788c <sb_send_string+0xb4>
	{
		return( true);
	}

	if(str == NULL)
    7802:	30 97       	sbiw	r30, 0x00	; 0
    7804:	09 f4       	brne	.+2      	; 0x7808 <sb_send_string+0x30>
    7806:	3f c0       	rjmp	.+126    	; 0x7886 <sb_send_string+0xae>
	{
		return( true);
	}

	if(!*str)
    7808:	80 81       	ld	r24, Z
    780a:	88 23       	and	r24, r24
    780c:	f1 f1       	breq	.+124    	; 0x788a <sb_send_string+0xb2>
    780e:	4f 01       	movw	r8, r30
	{
		return(true);
	}

	length = strlen(str);
    7810:	01 90       	ld	r0, Z+
    7812:	00 20       	and	r0, r0
    7814:	e9 f7       	brne	.-6      	; 0x7810 <sb_send_string+0x38>
    7816:	31 97       	sbiw	r30, 0x01	; 1
    7818:	5f 01       	movw	r10, r30
    781a:	a8 18       	sub	r10, r8
    781c:	b9 08       	sbc	r11, r9

bool sb_send_string(char* str)
{
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
    781e:	e1 2c       	mov	r14, r1
    7820:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH);
    7822:	85 01       	movw	r16, r10
    7824:	0e 19       	sub	r16, r14
    7826:	1f 09       	sbc	r17, r15
    7828:	09 32       	cpi	r16, 0x29	; 41
    782a:	11 05       	cpc	r17, r1
    782c:	10 f0       	brcs	.+4      	; 0x7832 <sb_send_string+0x5a>
    782e:	09 e2       	ldi	r16, 0x29	; 41
    7830:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(buf, &str[lengthSent], lengthToSend);
    7832:	a8 01       	movw	r20, r16
    7834:	b4 01       	movw	r22, r8
    7836:	6e 0d       	add	r22, r14
    7838:	7f 1d       	adc	r23, r15
    783a:	ce 01       	movw	r24, r28
    783c:	01 96       	adiw	r24, 0x01	; 1
    783e:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <strncpy>

		buf[lengthToSend] = '\0';
    7842:	e1 e0       	ldi	r30, 0x01	; 1
    7844:	f0 e0       	ldi	r31, 0x00	; 0
    7846:	ec 0f       	add	r30, r28
    7848:	fd 1f       	adc	r31, r29
    784a:	e0 0f       	add	r30, r16
    784c:	f1 1f       	adc	r31, r17
    784e:	10 82       	st	Z, r1
		err = serialbus_send_text(buf);
    7850:	ce 01       	movw	r24, r28
    7852:	01 96       	adiw	r24, 0x01	; 1
    7854:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_Z19serialbus_send_textPc>
    7858:	d8 2e       	mov	r13, r24
		
		if(!err)
    785a:	81 11       	cpse	r24, r1
    785c:	04 c0       	rjmp	.+8      	; 0x7866 <sb_send_string+0x8e>
		{
			while(serialbusTxInProgress())
    785e:	0e 94 32 3b 	call	0x7664	; 0x7664 <serialbusTxInProgress>
    7862:	81 11       	cpse	r24, r1
    7864:	fc cf       	rjmp	.-8      	; 0x785e <sb_send_string+0x86>
			{
				;
			}
		}

		lengthSent += lengthToSend;
    7866:	e0 0e       	add	r14, r16
    7868:	f1 1e       	adc	r15, r17
		done = err || (lengthSent >= length);
    786a:	d1 10       	cpse	r13, r1
    786c:	05 c0       	rjmp	.+10     	; 0x7878 <sb_send_string+0xa0>
    786e:	ea 14       	cp	r14, r10
    7870:	fb 04       	cpc	r15, r11
    7872:	20 f0       	brcs	.+8      	; 0x787c <sb_send_string+0xa4>
    7874:	81 e0       	ldi	r24, 0x01	; 1
    7876:	03 c0       	rjmp	.+6      	; 0x787e <sb_send_string+0xa6>
    7878:	81 e0       	ldi	r24, 0x01	; 1
    787a:	01 c0       	rjmp	.+2      	; 0x787e <sb_send_string+0xa6>
    787c:	80 e0       	ldi	r24, 0x00	; 0
	}while(!done);
    787e:	88 23       	and	r24, r24
    7880:	81 f2       	breq	.-96     	; 0x7822 <sb_send_string+0x4a>

	return( err);
    7882:	8d 2d       	mov	r24, r13
    7884:	03 c0       	rjmp	.+6      	; 0x788c <sb_send_string+0xb4>
		return( true);
	}

	if(str == NULL)
	{
		return( true);
    7886:	81 e0       	ldi	r24, 0x01	; 1
    7888:	01 c0       	rjmp	.+2      	; 0x788c <sb_send_string+0xb4>
	}

	if(!*str)
	{
		return(true);
    788a:	81 e0       	ldi	r24, 0x01	; 1
		lengthSent += lengthToSend;
		done = err || (lengthSent >= length);
	}while(!done);

	return( err);
}
    788c:	aa 96       	adiw	r28, 0x2a	; 42
    788e:	cd bf       	out	0x3d, r28	; 61
    7890:	de bf       	out	0x3e, r29	; 62
    7892:	df 91       	pop	r29
    7894:	cf 91       	pop	r28
    7896:	1f 91       	pop	r17
    7898:	0f 91       	pop	r16
    789a:	ff 90       	pop	r15
    789c:	ef 90       	pop	r14
    789e:	df 90       	pop	r13
    78a0:	bf 90       	pop	r11
    78a2:	af 90       	pop	r10
    78a4:	9f 90       	pop	r9
    78a6:	8f 90       	pop	r8
    78a8:	08 95       	ret

000078aa <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    78aa:	4f 92       	push	r4
    78ac:	5f 92       	push	r5
    78ae:	6f 92       	push	r6
    78b0:	7f 92       	push	r7
    78b2:	8f 92       	push	r8
    78b4:	9f 92       	push	r9
    78b6:	af 92       	push	r10
    78b8:	bf 92       	push	r11
    78ba:	cf 92       	push	r12
    78bc:	df 92       	push	r13
    78be:	ef 92       	push	r14
    78c0:	ff 92       	push	r15
    78c2:	0f 93       	push	r16
    78c4:	1f 93       	push	r17
    78c6:	cf 93       	push	r28
    78c8:	df 93       	push	r29
    78ca:	8c 01       	movw	r16, r24
    78cc:	eb 01       	movw	r28, r22
    78ce:	fc 01       	movw	r30, r24
    78d0:	40 80       	ld	r4, Z
    78d2:	51 80       	ldd	r5, Z+1	; 0x01
    78d4:	62 80       	ldd	r6, Z+2	; 0x02
    78d6:	73 80       	ldd	r7, Z+3	; 0x03
    78d8:	88 80       	ld	r8, Y
    78da:	99 80       	ldd	r9, Y+1	; 0x01
    78dc:	aa 80       	ldd	r10, Y+2	; 0x02
    78de:	bb 80       	ldd	r11, Y+3	; 0x03
    78e0:	41 14       	cp	r4, r1
    78e2:	51 04       	cpc	r5, r1
    78e4:	61 04       	cpc	r6, r1
    78e6:	71 04       	cpc	r7, r1
    78e8:	e1 f1       	breq	.+120    	; 0x7962 <_Z13reduce_by_gcdPmS_+0xb8>
    78ea:	81 14       	cp	r8, r1
    78ec:	91 04       	cpc	r9, r1
    78ee:	a1 04       	cpc	r10, r1
    78f0:	b1 04       	cpc	r11, r1
    78f2:	b9 f1       	breq	.+110    	; 0x7962 <_Z13reduce_by_gcdPmS_+0xb8>
    78f4:	c3 01       	movw	r24, r6
    78f6:	b2 01       	movw	r22, r4
    78f8:	a5 01       	movw	r20, r10
    78fa:	94 01       	movw	r18, r8
    78fc:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    7900:	6b 01       	movw	r12, r22
    7902:	7c 01       	movw	r14, r24
    7904:	c1 14       	cp	r12, r1
    7906:	d1 04       	cpc	r13, r1
    7908:	e1 04       	cpc	r14, r1
    790a:	f1 04       	cpc	r15, r1
    790c:	69 f0       	breq	.+26     	; 0x7928 <_Z13reduce_by_gcdPmS_+0x7e>
    790e:	c5 01       	movw	r24, r10
    7910:	b4 01       	movw	r22, r8
    7912:	a7 01       	movw	r20, r14
    7914:	96 01       	movw	r18, r12
    7916:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    791a:	46 01       	movw	r8, r12
    791c:	57 01       	movw	r10, r14
    791e:	c6 2e       	mov	r12, r22
    7920:	d7 2e       	mov	r13, r23
    7922:	e8 2e       	mov	r14, r24
    7924:	f9 2e       	mov	r15, r25
    7926:	ee cf       	rjmp	.-36     	; 0x7904 <_Z13reduce_by_gcdPmS_+0x5a>
    7928:	f2 e0       	ldi	r31, 0x02	; 2
    792a:	8f 16       	cp	r8, r31
    792c:	91 04       	cpc	r9, r1
    792e:	a1 04       	cpc	r10, r1
    7930:	b1 04       	cpc	r11, r1
    7932:	b8 f0       	brcs	.+46     	; 0x7962 <_Z13reduce_by_gcdPmS_+0xb8>
    7934:	c3 01       	movw	r24, r6
    7936:	b2 01       	movw	r22, r4
    7938:	a5 01       	movw	r20, r10
    793a:	94 01       	movw	r18, r8
    793c:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    7940:	f8 01       	movw	r30, r16
    7942:	20 83       	st	Z, r18
    7944:	31 83       	std	Z+1, r19	; 0x01
    7946:	42 83       	std	Z+2, r20	; 0x02
    7948:	53 83       	std	Z+3, r21	; 0x03
    794a:	68 81       	ld	r22, Y
    794c:	79 81       	ldd	r23, Y+1	; 0x01
    794e:	8a 81       	ldd	r24, Y+2	; 0x02
    7950:	9b 81       	ldd	r25, Y+3	; 0x03
    7952:	a5 01       	movw	r20, r10
    7954:	94 01       	movw	r18, r8
    7956:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    795a:	28 83       	st	Y, r18
    795c:	39 83       	std	Y+1, r19	; 0x01
    795e:	4a 83       	std	Y+2, r20	; 0x02
    7960:	5b 83       	std	Y+3, r21	; 0x03
    7962:	df 91       	pop	r29
    7964:	cf 91       	pop	r28
    7966:	1f 91       	pop	r17
    7968:	0f 91       	pop	r16
    796a:	ff 90       	pop	r15
    796c:	ef 90       	pop	r14
    796e:	df 90       	pop	r13
    7970:	cf 90       	pop	r12
    7972:	bf 90       	pop	r11
    7974:	af 90       	pop	r10
    7976:	9f 90       	pop	r9
    7978:	8f 90       	pop	r8
    797a:	7f 90       	pop	r7
    797c:	6f 90       	pop	r6
    797e:	5f 90       	pop	r5
    7980:	4f 90       	pop	r4
    7982:	08 95       	ret

00007984 <_Z8pll_calcmP13u_si5351_regs>:
    7984:	4f 92       	push	r4
    7986:	5f 92       	push	r5
    7988:	6f 92       	push	r6
    798a:	7f 92       	push	r7
    798c:	8f 92       	push	r8
    798e:	9f 92       	push	r9
    7990:	af 92       	push	r10
    7992:	bf 92       	push	r11
    7994:	cf 92       	push	r12
    7996:	df 92       	push	r13
    7998:	ef 92       	push	r14
    799a:	ff 92       	push	r15
    799c:	0f 93       	push	r16
    799e:	1f 93       	push	r17
    79a0:	cf 93       	push	r28
    79a2:	df 93       	push	r29
    79a4:	cd b7       	in	r28, 0x3d	; 61
    79a6:	de b7       	in	r29, 0x3e	; 62
    79a8:	28 97       	sbiw	r28, 0x08	; 8
    79aa:	cd bf       	out	0x3d, r28	; 61
    79ac:	de bf       	out	0x3e, r29	; 62
    79ae:	8a 01       	movw	r16, r20
    79b0:	80 90 28 40 	lds	r8, 0x4028	; 0x804028 <_ZL9xtal_freq>
    79b4:	90 90 29 40 	lds	r9, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    79b8:	a0 90 2a 40 	lds	r10, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    79bc:	b0 90 2b 40 	lds	r11, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    79c0:	a5 01       	movw	r20, r10
    79c2:	94 01       	movw	r18, r8
    79c4:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    79c8:	69 01       	movw	r12, r18
    79ca:	7a 01       	movw	r14, r20
    79cc:	69 83       	std	Y+1, r22	; 0x01
    79ce:	7a 83       	std	Y+2, r23	; 0x02
    79d0:	8b 83       	std	Y+3, r24	; 0x03
    79d2:	9c 83       	std	Y+4, r25	; 0x04
    79d4:	8d 82       	std	Y+5, r8	; 0x05
    79d6:	9e 82       	std	Y+6, r9	; 0x06
    79d8:	af 82       	std	Y+7, r10	; 0x07
    79da:	b8 86       	std	Y+8, r11	; 0x08
    79dc:	be 01       	movw	r22, r28
    79de:	6b 5f       	subi	r22, 0xFB	; 251
    79e0:	7f 4f       	sbci	r23, 0xFF	; 255
    79e2:	ce 01       	movw	r24, r28
    79e4:	01 96       	adiw	r24, 0x01	; 1
    79e6:	0e 94 55 3c 	call	0x78aa	; 0x78aa <_Z13reduce_by_gcdPmS_>
    79ea:	89 80       	ldd	r8, Y+1	; 0x01
    79ec:	9a 80       	ldd	r9, Y+2	; 0x02
    79ee:	ab 80       	ldd	r10, Y+3	; 0x03
    79f0:	bc 80       	ldd	r11, Y+4	; 0x04
    79f2:	88 0c       	add	r8, r8
    79f4:	99 1c       	adc	r9, r9
    79f6:	aa 1c       	adc	r10, r10
    79f8:	bb 1c       	adc	r11, r11
    79fa:	88 0c       	add	r8, r8
    79fc:	99 1c       	adc	r9, r9
    79fe:	aa 1c       	adc	r10, r10
    7a00:	bb 1c       	adc	r11, r11
    7a02:	88 0c       	add	r8, r8
    7a04:	99 1c       	adc	r9, r9
    7a06:	aa 1c       	adc	r10, r10
    7a08:	bb 1c       	adc	r11, r11
    7a0a:	88 0c       	add	r8, r8
    7a0c:	99 1c       	adc	r9, r9
    7a0e:	aa 1c       	adc	r10, r10
    7a10:	bb 1c       	adc	r11, r11
    7a12:	88 0c       	add	r8, r8
    7a14:	99 1c       	adc	r9, r9
    7a16:	aa 1c       	adc	r10, r10
    7a18:	bb 1c       	adc	r11, r11
    7a1a:	88 0c       	add	r8, r8
    7a1c:	99 1c       	adc	r9, r9
    7a1e:	aa 1c       	adc	r10, r10
    7a20:	bb 1c       	adc	r11, r11
    7a22:	88 0c       	add	r8, r8
    7a24:	99 1c       	adc	r9, r9
    7a26:	aa 1c       	adc	r10, r10
    7a28:	bb 1c       	adc	r11, r11
    7a2a:	4d 80       	ldd	r4, Y+5	; 0x05
    7a2c:	5e 80       	ldd	r5, Y+6	; 0x06
    7a2e:	6f 80       	ldd	r6, Y+7	; 0x07
    7a30:	78 84       	ldd	r7, Y+8	; 0x08
    7a32:	c5 01       	movw	r24, r10
    7a34:	b4 01       	movw	r22, r8
    7a36:	a3 01       	movw	r20, r6
    7a38:	92 01       	movw	r18, r4
    7a3a:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    7a3e:	cc 0c       	add	r12, r12
    7a40:	dd 1c       	adc	r13, r13
    7a42:	ee 1c       	adc	r14, r14
    7a44:	ff 1c       	adc	r15, r15
    7a46:	cc 0c       	add	r12, r12
    7a48:	dd 1c       	adc	r13, r13
    7a4a:	ee 1c       	adc	r14, r14
    7a4c:	ff 1c       	adc	r15, r15
    7a4e:	cc 0c       	add	r12, r12
    7a50:	dd 1c       	adc	r13, r13
    7a52:	ee 1c       	adc	r14, r14
    7a54:	ff 1c       	adc	r15, r15
    7a56:	cc 0c       	add	r12, r12
    7a58:	dd 1c       	adc	r13, r13
    7a5a:	ee 1c       	adc	r14, r14
    7a5c:	ff 1c       	adc	r15, r15
    7a5e:	cc 0c       	add	r12, r12
    7a60:	dd 1c       	adc	r13, r13
    7a62:	ee 1c       	adc	r14, r14
    7a64:	ff 1c       	adc	r15, r15
    7a66:	cc 0c       	add	r12, r12
    7a68:	dd 1c       	adc	r13, r13
    7a6a:	ee 1c       	adc	r14, r14
    7a6c:	ff 1c       	adc	r15, r15
    7a6e:	cc 0c       	add	r12, r12
    7a70:	dd 1c       	adc	r13, r13
    7a72:	ee 1c       	adc	r14, r14
    7a74:	ff 1c       	adc	r15, r15
    7a76:	c2 0e       	add	r12, r18
    7a78:	d3 1e       	adc	r13, r19
    7a7a:	e4 1e       	adc	r14, r20
    7a7c:	f5 1e       	adc	r15, r21
    7a7e:	82 e0       	ldi	r24, 0x02	; 2
    7a80:	d8 1a       	sub	r13, r24
    7a82:	e1 08       	sbc	r14, r1
    7a84:	f1 08       	sbc	r15, r1
    7a86:	f8 01       	movw	r30, r16
    7a88:	c0 82       	st	Z, r12
    7a8a:	d1 82       	std	Z+1, r13	; 0x01
    7a8c:	e2 82       	std	Z+2, r14	; 0x02
    7a8e:	f3 82       	std	Z+3, r15	; 0x03
    7a90:	c3 01       	movw	r24, r6
    7a92:	b2 01       	movw	r22, r4
    7a94:	0e 94 45 4b 	call	0x968a	; 0x968a <__mulsi3>
    7a98:	86 1a       	sub	r8, r22
    7a9a:	97 0a       	sbc	r9, r23
    7a9c:	a8 0a       	sbc	r10, r24
    7a9e:	b9 0a       	sbc	r11, r25
    7aa0:	84 82       	std	Z+4, r8	; 0x04
    7aa2:	95 82       	std	Z+5, r9	; 0x05
    7aa4:	a6 82       	std	Z+6, r10	; 0x06
    7aa6:	b7 82       	std	Z+7, r11	; 0x07
    7aa8:	40 86       	std	Z+8, r4	; 0x08
    7aaa:	51 86       	std	Z+9, r5	; 0x09
    7aac:	62 86       	std	Z+10, r6	; 0x0a
    7aae:	73 86       	std	Z+11, r7	; 0x0b
    7ab0:	80 e0       	ldi	r24, 0x00	; 0
    7ab2:	28 96       	adiw	r28, 0x08	; 8
    7ab4:	cd bf       	out	0x3d, r28	; 61
    7ab6:	de bf       	out	0x3e, r29	; 62
    7ab8:	df 91       	pop	r29
    7aba:	cf 91       	pop	r28
    7abc:	1f 91       	pop	r17
    7abe:	0f 91       	pop	r16
    7ac0:	ff 90       	pop	r15
    7ac2:	ef 90       	pop	r14
    7ac4:	df 90       	pop	r13
    7ac6:	cf 90       	pop	r12
    7ac8:	bf 90       	pop	r11
    7aca:	af 90       	pop	r10
    7acc:	9f 90       	pop	r9
    7ace:	8f 90       	pop	r8
    7ad0:	7f 90       	pop	r7
    7ad2:	6f 90       	pop	r6
    7ad4:	5f 90       	pop	r5
    7ad6:	4f 90       	pop	r4
    7ad8:	08 95       	ret

00007ada <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    7ada:	2f 92       	push	r2
    7adc:	3f 92       	push	r3
    7ade:	4f 92       	push	r4
    7ae0:	5f 92       	push	r5
    7ae2:	6f 92       	push	r6
    7ae4:	7f 92       	push	r7
    7ae6:	8f 92       	push	r8
    7ae8:	9f 92       	push	r9
    7aea:	af 92       	push	r10
    7aec:	bf 92       	push	r11
    7aee:	cf 92       	push	r12
    7af0:	df 92       	push	r13
    7af2:	ef 92       	push	r14
    7af4:	ff 92       	push	r15
    7af6:	0f 93       	push	r16
    7af8:	1f 93       	push	r17
    7afa:	cf 93       	push	r28
    7afc:	df 93       	push	r29
    7afe:	cd b7       	in	r28, 0x3d	; 61
    7b00:	de b7       	in	r29, 0x3e	; 62
    7b02:	25 97       	sbiw	r28, 0x05	; 5
    7b04:	cd bf       	out	0x3d, r28	; 61
    7b06:	de bf       	out	0x3e, r29	; 62
    7b08:	2b 01       	movw	r4, r22
    7b0a:	3c 01       	movw	r6, r24
    7b0c:	4a 83       	std	Y+2, r20	; 0x02
    7b0e:	5b 83       	std	Y+3, r21	; 0x03
    7b10:	18 01       	movw	r2, r16
    7b12:	81 e0       	ldi	r24, 0x01	; 1
    7b14:	f9 01       	movw	r30, r18
    7b16:	80 83       	st	Z, r24
    7b18:	f0 e8       	ldi	r31, 0x80	; 128
    7b1a:	4f 16       	cp	r4, r31
    7b1c:	f1 ed       	ldi	r31, 0xD1	; 209
    7b1e:	5f 06       	cpc	r5, r31
    7b20:	f0 ef       	ldi	r31, 0xF0	; 240
    7b22:	6f 06       	cpc	r6, r31
    7b24:	f8 e0       	ldi	r31, 0x08	; 8
    7b26:	7f 06       	cpc	r7, r31
    7b28:	d0 f0       	brcs	.+52     	; 0x7b5e <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x84>
    7b2a:	c3 01       	movw	r24, r6
    7b2c:	b2 01       	movw	r22, r4
    7b2e:	66 0f       	add	r22, r22
    7b30:	77 1f       	adc	r23, r23
    7b32:	88 1f       	adc	r24, r24
    7b34:	99 1f       	adc	r25, r25
    7b36:	66 0f       	add	r22, r22
    7b38:	77 1f       	adc	r23, r23
    7b3a:	88 1f       	adc	r24, r24
    7b3c:	99 1f       	adc	r25, r25
    7b3e:	c1 2c       	mov	r12, r1
    7b40:	d1 2c       	mov	r13, r1
    7b42:	76 01       	movw	r14, r12
    7b44:	68 94       	set
    7b46:	c2 f8       	bld	r12, 2
    7b48:	48 c0       	rjmp	.+144    	; 0x7bda <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7b4a:	21 e0       	ldi	r18, 0x01	; 1
    7b4c:	2d 83       	std	Y+5, r18	; 0x05
    7b4e:	0d c0       	rjmp	.+26     	; 0x7b6a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7b50:	69 01       	movw	r12, r18
    7b52:	7a 01       	movw	r14, r20
    7b54:	31 e0       	ldi	r19, 0x01	; 1
    7b56:	39 83       	std	Y+1, r19	; 0x01
    7b58:	81 e0       	ldi	r24, 0x01	; 1
    7b5a:	8d 83       	std	Y+5, r24	; 0x05
    7b5c:	06 c0       	rjmp	.+12     	; 0x7b6a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7b5e:	1c 82       	std	Y+4, r1	; 0x04
    7b60:	19 82       	std	Y+1, r1	; 0x01
    7b62:	1d 82       	std	Y+5, r1	; 0x05
    7b64:	c1 2c       	mov	r12, r1
    7b66:	d1 2c       	mov	r13, r1
    7b68:	76 01       	movw	r14, r12
    7b6a:	8d 80       	ldd	r8, Y+5	; 0x05
    7b6c:	81 10       	cpse	r8, r1
    7b6e:	28 c0       	rjmp	.+80     	; 0x7bc0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xe6>
    7b70:	9c 80       	ldd	r9, Y+4	; 0x04
    7b72:	a9 2d       	mov	r26, r9
    7b74:	b0 e0       	ldi	r27, 0x00	; 0
    7b76:	a3 01       	movw	r20, r6
    7b78:	92 01       	movw	r18, r4
    7b7a:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <__muluhisi3>
    7b7e:	00 e0       	ldi	r16, 0x00	; 0
    7b80:	19 ee       	ldi	r17, 0xE9	; 233
    7b82:	24 ea       	ldi	r18, 0xA4	; 164
    7b84:	35 e3       	ldi	r19, 0x35	; 53
    7b86:	48 01       	movw	r8, r16
    7b88:	59 01       	movw	r10, r18
    7b8a:	86 1a       	sub	r8, r22
    7b8c:	97 0a       	sbc	r9, r23
    7b8e:	a8 0a       	sbc	r10, r24
    7b90:	b9 0a       	sbc	r11, r25
    7b92:	c5 01       	movw	r24, r10
    7b94:	b4 01       	movw	r22, r8
    7b96:	2c 81       	ldd	r18, Y+4	; 0x04
    7b98:	2e 5f       	subi	r18, 0xFE	; 254
    7b9a:	2c 83       	std	Y+4, r18	; 0x04
    7b9c:	81 14       	cp	r8, r1
    7b9e:	36 e4       	ldi	r19, 0x46	; 70
    7ba0:	93 06       	cpc	r9, r19
    7ba2:	33 ec       	ldi	r19, 0xC3	; 195
    7ba4:	a3 06       	cpc	r10, r19
    7ba6:	33 e2       	ldi	r19, 0x23	; 35
    7ba8:	b3 06       	cpc	r11, r19
    7baa:	78 f2       	brcs	.-98     	; 0x7b4a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x70>
    7bac:	a3 01       	movw	r20, r6
    7bae:	92 01       	movw	r18, r4
    7bb0:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    7bb4:	24 30       	cpi	r18, 0x04	; 4
    7bb6:	31 05       	cpc	r19, r1
    7bb8:	41 05       	cpc	r20, r1
    7bba:	51 05       	cpc	r21, r1
    7bbc:	48 f6       	brcc	.-110    	; 0x7b50 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x76>
    7bbe:	d5 cf       	rjmp	.-86     	; 0x7b6a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7bc0:	89 80       	ldd	r8, Y+1	; 0x01
    7bc2:	88 20       	and	r8, r8
    7bc4:	39 f0       	breq	.+14     	; 0x7bd4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xfa>
    7bc6:	a7 01       	movw	r20, r14
    7bc8:	96 01       	movw	r18, r12
    7bca:	c3 01       	movw	r24, r6
    7bcc:	b2 01       	movw	r22, r4
    7bce:	0e 94 45 4b 	call	0x968a	; 0x968a <__mulsi3>
    7bd2:	03 c0       	rjmp	.+6      	; 0x7bda <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7bd4:	60 e0       	ldi	r22, 0x00	; 0
    7bd6:	70 e0       	ldi	r23, 0x00	; 0
    7bd8:	cb 01       	movw	r24, r22
    7bda:	21 e0       	ldi	r18, 0x01	; 1
    7bdc:	34 e0       	ldi	r19, 0x04	; 4
    7bde:	c3 16       	cp	r12, r19
    7be0:	d1 04       	cpc	r13, r1
    7be2:	e1 04       	cpc	r14, r1
    7be4:	f1 04       	cpc	r15, r1
    7be6:	09 f0       	breq	.+2      	; 0x7bea <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x110>
    7be8:	20 e0       	ldi	r18, 0x00	; 0
    7bea:	f1 01       	movw	r30, r2
    7bec:	20 83       	st	Z, r18
    7bee:	cc 0c       	add	r12, r12
    7bf0:	dd 1c       	adc	r13, r13
    7bf2:	ee 1c       	adc	r14, r14
    7bf4:	ff 1c       	adc	r15, r15
    7bf6:	cc 0c       	add	r12, r12
    7bf8:	dd 1c       	adc	r13, r13
    7bfa:	ee 1c       	adc	r14, r14
    7bfc:	ff 1c       	adc	r15, r15
    7bfe:	cc 0c       	add	r12, r12
    7c00:	dd 1c       	adc	r13, r13
    7c02:	ee 1c       	adc	r14, r14
    7c04:	ff 1c       	adc	r15, r15
    7c06:	cc 0c       	add	r12, r12
    7c08:	dd 1c       	adc	r13, r13
    7c0a:	ee 1c       	adc	r14, r14
    7c0c:	ff 1c       	adc	r15, r15
    7c0e:	cc 0c       	add	r12, r12
    7c10:	dd 1c       	adc	r13, r13
    7c12:	ee 1c       	adc	r14, r14
    7c14:	ff 1c       	adc	r15, r15
    7c16:	cc 0c       	add	r12, r12
    7c18:	dd 1c       	adc	r13, r13
    7c1a:	ee 1c       	adc	r14, r14
    7c1c:	ff 1c       	adc	r15, r15
    7c1e:	cc 0c       	add	r12, r12
    7c20:	dd 1c       	adc	r13, r13
    7c22:	ee 1c       	adc	r14, r14
    7c24:	ff 1c       	adc	r15, r15
    7c26:	f2 e0       	ldi	r31, 0x02	; 2
    7c28:	df 1a       	sub	r13, r31
    7c2a:	e1 08       	sbc	r14, r1
    7c2c:	f1 08       	sbc	r15, r1
    7c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    7c30:	fb 81       	ldd	r31, Y+3	; 0x03
    7c32:	c0 82       	st	Z, r12
    7c34:	d1 82       	std	Z+1, r13	; 0x01
    7c36:	e2 82       	std	Z+2, r14	; 0x02
    7c38:	f3 82       	std	Z+3, r15	; 0x03
    7c3a:	14 82       	std	Z+4, r1	; 0x04
    7c3c:	15 82       	std	Z+5, r1	; 0x05
    7c3e:	16 82       	std	Z+6, r1	; 0x06
    7c40:	17 82       	std	Z+7, r1	; 0x07
    7c42:	01 e0       	ldi	r16, 0x01	; 1
    7c44:	10 e0       	ldi	r17, 0x00	; 0
    7c46:	20 e0       	ldi	r18, 0x00	; 0
    7c48:	30 e0       	ldi	r19, 0x00	; 0
    7c4a:	00 87       	std	Z+8, r16	; 0x08
    7c4c:	11 87       	std	Z+9, r17	; 0x09
    7c4e:	22 87       	std	Z+10, r18	; 0x0a
    7c50:	33 87       	std	Z+11, r19	; 0x0b
    7c52:	25 96       	adiw	r28, 0x05	; 5
    7c54:	cd bf       	out	0x3d, r28	; 61
    7c56:	de bf       	out	0x3e, r29	; 62
    7c58:	df 91       	pop	r29
    7c5a:	cf 91       	pop	r28
    7c5c:	1f 91       	pop	r17
    7c5e:	0f 91       	pop	r16
    7c60:	ff 90       	pop	r15
    7c62:	ef 90       	pop	r14
    7c64:	df 90       	pop	r13
    7c66:	cf 90       	pop	r12
    7c68:	bf 90       	pop	r11
    7c6a:	af 90       	pop	r10
    7c6c:	9f 90       	pop	r9
    7c6e:	8f 90       	pop	r8
    7c70:	7f 90       	pop	r7
    7c72:	6f 90       	pop	r6
    7c74:	5f 90       	pop	r5
    7c76:	4f 90       	pop	r4
    7c78:	3f 90       	pop	r3
    7c7a:	2f 90       	pop	r2
    7c7c:	08 95       	ret

00007c7e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
    7c7e:	2f 92       	push	r2
    7c80:	3f 92       	push	r3
    7c82:	4f 92       	push	r4
    7c84:	5f 92       	push	r5
    7c86:	6f 92       	push	r6
    7c88:	7f 92       	push	r7
    7c8a:	8f 92       	push	r8
    7c8c:	9f 92       	push	r9
    7c8e:	af 92       	push	r10
    7c90:	bf 92       	push	r11
    7c92:	cf 92       	push	r12
    7c94:	df 92       	push	r13
    7c96:	ef 92       	push	r14
    7c98:	ff 92       	push	r15
    7c9a:	0f 93       	push	r16
    7c9c:	1f 93       	push	r17
    7c9e:	cf 93       	push	r28
    7ca0:	df 93       	push	r29
    7ca2:	cd b7       	in	r28, 0x3d	; 61
    7ca4:	de b7       	in	r29, 0x3e	; 62
    7ca6:	62 97       	sbiw	r28, 0x12	; 18
    7ca8:	cd bf       	out	0x3d, r28	; 61
    7caa:	de bf       	out	0x3e, r29	; 62
    7cac:	4b 01       	movw	r8, r22
    7cae:	5c 01       	movw	r10, r24
    7cb0:	1a 01       	movw	r2, r20
    7cb2:	29 8b       	std	Y+17, r18	; 0x11
    7cb4:	3a 8b       	std	Y+18, r19	; 0x12
    7cb6:	60 91 3e 49 	lds	r22, 0x493E	; 0x80493e <_ZL8freqVCOB>
    7cba:	70 91 3f 49 	lds	r23, 0x493F	; 0x80493f <_ZL8freqVCOB+0x1>
    7cbe:	80 91 40 49 	lds	r24, 0x4940	; 0x804940 <_ZL8freqVCOB+0x2>
    7cc2:	90 91 41 49 	lds	r25, 0x4941	; 0x804941 <_ZL8freqVCOB+0x3>
    7cc6:	a5 01       	movw	r20, r10
    7cc8:	94 01       	movw	r18, r8
    7cca:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    7cce:	29 87       	std	Y+9, r18	; 0x09
    7cd0:	3a 87       	std	Y+10, r19	; 0x0a
    7cd2:	4b 87       	std	Y+11, r20	; 0x0b
    7cd4:	5c 87       	std	Y+12, r21	; 0x0c
    7cd6:	69 01       	movw	r12, r18
    7cd8:	7a 01       	movw	r14, r20
    7cda:	69 83       	std	Y+1, r22	; 0x01
    7cdc:	7a 83       	std	Y+2, r23	; 0x02
    7cde:	8b 83       	std	Y+3, r24	; 0x03
    7ce0:	9c 83       	std	Y+4, r25	; 0x04
    7ce2:	8d 82       	std	Y+5, r8	; 0x05
    7ce4:	9e 82       	std	Y+6, r9	; 0x06
    7ce6:	af 82       	std	Y+7, r10	; 0x07
    7ce8:	b8 86       	std	Y+8, r11	; 0x08
    7cea:	be 01       	movw	r22, r28
    7cec:	6b 5f       	subi	r22, 0xFB	; 251
    7cee:	7f 4f       	sbci	r23, 0xFF	; 255
    7cf0:	ce 01       	movw	r24, r28
    7cf2:	01 96       	adiw	r24, 0x01	; 1
    7cf4:	0e 94 55 3c 	call	0x78aa	; 0x78aa <_Z13reduce_by_gcdPmS_>
    7cf8:	80 91 3e 49 	lds	r24, 0x493E	; 0x80493e <_ZL8freqVCOB>
    7cfc:	90 91 3f 49 	lds	r25, 0x493F	; 0x80493f <_ZL8freqVCOB+0x1>
    7d00:	a0 91 40 49 	lds	r26, 0x4940	; 0x804940 <_ZL8freqVCOB+0x2>
    7d04:	b0 91 41 49 	lds	r27, 0x4941	; 0x804941 <_ZL8freqVCOB+0x3>
    7d08:	8d 87       	std	Y+13, r24	; 0x0d
    7d0a:	9e 87       	std	Y+14, r25	; 0x0e
    7d0c:	af 87       	std	Y+15, r26	; 0x0f
    7d0e:	b8 8b       	std	Y+16, r27	; 0x10
    7d10:	4d 80       	ldd	r4, Y+5	; 0x05
    7d12:	5e 80       	ldd	r5, Y+6	; 0x06
    7d14:	6f 80       	ldd	r6, Y+7	; 0x07
    7d16:	78 84       	ldd	r7, Y+8	; 0x08
    7d18:	29 85       	ldd	r18, Y+9	; 0x09
    7d1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    7d1c:	4b 85       	ldd	r20, Y+11	; 0x0b
    7d1e:	5c 85       	ldd	r21, Y+12	; 0x0c
    7d20:	c3 01       	movw	r24, r6
    7d22:	b2 01       	movw	r22, r4
    7d24:	0e 94 45 4b 	call	0x968a	; 0x968a <__mulsi3>
    7d28:	89 80       	ldd	r8, Y+1	; 0x01
    7d2a:	9a 80       	ldd	r9, Y+2	; 0x02
    7d2c:	ab 80       	ldd	r10, Y+3	; 0x03
    7d2e:	bc 80       	ldd	r11, Y+4	; 0x04
    7d30:	9b 01       	movw	r18, r22
    7d32:	ac 01       	movw	r20, r24
    7d34:	28 0d       	add	r18, r8
    7d36:	39 1d       	adc	r19, r9
    7d38:	4a 1d       	adc	r20, r10
    7d3a:	5b 1d       	adc	r21, r11
    7d3c:	6d 85       	ldd	r22, Y+13	; 0x0d
    7d3e:	7e 85       	ldd	r23, Y+14	; 0x0e
    7d40:	8f 85       	ldd	r24, Y+15	; 0x0f
    7d42:	98 89       	ldd	r25, Y+16	; 0x10
    7d44:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    7d48:	ca 01       	movw	r24, r20
    7d4a:	b9 01       	movw	r22, r18
    7d4c:	a3 01       	movw	r20, r6
    7d4e:	92 01       	movw	r18, r4
    7d50:	0e 94 45 4b 	call	0x968a	; 0x968a <__mulsi3>
    7d54:	6d 87       	std	Y+13, r22	; 0x0d
    7d56:	7e 87       	std	Y+14, r23	; 0x0e
    7d58:	8f 87       	std	Y+15, r24	; 0x0f
    7d5a:	98 8b       	std	Y+16, r25	; 0x10
    7d5c:	89 28       	or	r8, r9
    7d5e:	8a 28       	or	r8, r10
    7d60:	8b 28       	or	r8, r11
    7d62:	29 f4       	brne	.+10     	; 0x7d6e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf0>
    7d64:	99 85       	ldd	r25, Y+9	; 0x09
    7d66:	90 ff       	sbrs	r25, 0
    7d68:	04 c0       	rjmp	.+8      	; 0x7d72 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf4>
    7d6a:	80 e0       	ldi	r24, 0x00	; 0
    7d6c:	03 c0       	rjmp	.+6      	; 0x7d74 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7d6e:	80 e0       	ldi	r24, 0x00	; 0
    7d70:	01 c0       	rjmp	.+2      	; 0x7d74 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7d72:	81 e0       	ldi	r24, 0x01	; 1
    7d74:	a9 89       	ldd	r26, Y+17	; 0x11
    7d76:	ba 89       	ldd	r27, Y+18	; 0x12
    7d78:	8c 93       	st	X, r24
    7d7a:	b4 e0       	ldi	r27, 0x04	; 4
    7d7c:	cb 16       	cp	r12, r27
    7d7e:	d1 04       	cpc	r13, r1
    7d80:	e1 04       	cpc	r14, r1
    7d82:	f1 04       	cpc	r15, r1
    7d84:	09 f0       	breq	.+2      	; 0x7d88 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x10a>
    7d86:	80 e0       	ldi	r24, 0x00	; 0
    7d88:	f8 01       	movw	r30, r16
    7d8a:	80 83       	st	Z, r24
    7d8c:	88 23       	and	r24, r24
    7d8e:	a1 f0       	breq	.+40     	; 0x7db8 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x13a>
    7d90:	d1 01       	movw	r26, r2
    7d92:	1d 92       	st	X+, r1
    7d94:	1d 92       	st	X+, r1
    7d96:	1d 92       	st	X+, r1
    7d98:	1c 92       	st	X, r1
    7d9a:	13 97       	sbiw	r26, 0x03	; 3
    7d9c:	f1 01       	movw	r30, r2
    7d9e:	14 82       	std	Z+4, r1	; 0x04
    7da0:	15 82       	std	Z+5, r1	; 0x05
    7da2:	16 82       	std	Z+6, r1	; 0x06
    7da4:	17 82       	std	Z+7, r1	; 0x07
    7da6:	81 e0       	ldi	r24, 0x01	; 1
    7da8:	90 e0       	ldi	r25, 0x00	; 0
    7daa:	a0 e0       	ldi	r26, 0x00	; 0
    7dac:	b0 e0       	ldi	r27, 0x00	; 0
    7dae:	80 87       	std	Z+8, r24	; 0x08
    7db0:	91 87       	std	Z+9, r25	; 0x09
    7db2:	a2 87       	std	Z+10, r26	; 0x0a
    7db4:	b3 87       	std	Z+11, r27	; 0x0b
    7db6:	69 c0       	rjmp	.+210    	; 0x7e8a <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x20c>
    7db8:	89 80       	ldd	r8, Y+1	; 0x01
    7dba:	9a 80       	ldd	r9, Y+2	; 0x02
    7dbc:	ab 80       	ldd	r10, Y+3	; 0x03
    7dbe:	bc 80       	ldd	r11, Y+4	; 0x04
    7dc0:	88 0c       	add	r8, r8
    7dc2:	99 1c       	adc	r9, r9
    7dc4:	aa 1c       	adc	r10, r10
    7dc6:	bb 1c       	adc	r11, r11
    7dc8:	88 0c       	add	r8, r8
    7dca:	99 1c       	adc	r9, r9
    7dcc:	aa 1c       	adc	r10, r10
    7dce:	bb 1c       	adc	r11, r11
    7dd0:	88 0c       	add	r8, r8
    7dd2:	99 1c       	adc	r9, r9
    7dd4:	aa 1c       	adc	r10, r10
    7dd6:	bb 1c       	adc	r11, r11
    7dd8:	88 0c       	add	r8, r8
    7dda:	99 1c       	adc	r9, r9
    7ddc:	aa 1c       	adc	r10, r10
    7dde:	bb 1c       	adc	r11, r11
    7de0:	88 0c       	add	r8, r8
    7de2:	99 1c       	adc	r9, r9
    7de4:	aa 1c       	adc	r10, r10
    7de6:	bb 1c       	adc	r11, r11
    7de8:	88 0c       	add	r8, r8
    7dea:	99 1c       	adc	r9, r9
    7dec:	aa 1c       	adc	r10, r10
    7dee:	bb 1c       	adc	r11, r11
    7df0:	88 0c       	add	r8, r8
    7df2:	99 1c       	adc	r9, r9
    7df4:	aa 1c       	adc	r10, r10
    7df6:	bb 1c       	adc	r11, r11
    7df8:	4d 80       	ldd	r4, Y+5	; 0x05
    7dfa:	5e 80       	ldd	r5, Y+6	; 0x06
    7dfc:	6f 80       	ldd	r6, Y+7	; 0x07
    7dfe:	78 84       	ldd	r7, Y+8	; 0x08
    7e00:	c5 01       	movw	r24, r10
    7e02:	b4 01       	movw	r22, r8
    7e04:	a3 01       	movw	r20, r6
    7e06:	92 01       	movw	r18, r4
    7e08:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    7e0c:	c9 84       	ldd	r12, Y+9	; 0x09
    7e0e:	da 84       	ldd	r13, Y+10	; 0x0a
    7e10:	eb 84       	ldd	r14, Y+11	; 0x0b
    7e12:	fc 84       	ldd	r15, Y+12	; 0x0c
    7e14:	cc 0c       	add	r12, r12
    7e16:	dd 1c       	adc	r13, r13
    7e18:	ee 1c       	adc	r14, r14
    7e1a:	ff 1c       	adc	r15, r15
    7e1c:	cc 0c       	add	r12, r12
    7e1e:	dd 1c       	adc	r13, r13
    7e20:	ee 1c       	adc	r14, r14
    7e22:	ff 1c       	adc	r15, r15
    7e24:	cc 0c       	add	r12, r12
    7e26:	dd 1c       	adc	r13, r13
    7e28:	ee 1c       	adc	r14, r14
    7e2a:	ff 1c       	adc	r15, r15
    7e2c:	cc 0c       	add	r12, r12
    7e2e:	dd 1c       	adc	r13, r13
    7e30:	ee 1c       	adc	r14, r14
    7e32:	ff 1c       	adc	r15, r15
    7e34:	cc 0c       	add	r12, r12
    7e36:	dd 1c       	adc	r13, r13
    7e38:	ee 1c       	adc	r14, r14
    7e3a:	ff 1c       	adc	r15, r15
    7e3c:	cc 0c       	add	r12, r12
    7e3e:	dd 1c       	adc	r13, r13
    7e40:	ee 1c       	adc	r14, r14
    7e42:	ff 1c       	adc	r15, r15
    7e44:	cc 0c       	add	r12, r12
    7e46:	dd 1c       	adc	r13, r13
    7e48:	ee 1c       	adc	r14, r14
    7e4a:	ff 1c       	adc	r15, r15
    7e4c:	c2 0e       	add	r12, r18
    7e4e:	d3 1e       	adc	r13, r19
    7e50:	e4 1e       	adc	r14, r20
    7e52:	f5 1e       	adc	r15, r21
    7e54:	f2 e0       	ldi	r31, 0x02	; 2
    7e56:	df 1a       	sub	r13, r31
    7e58:	e1 08       	sbc	r14, r1
    7e5a:	f1 08       	sbc	r15, r1
    7e5c:	d1 01       	movw	r26, r2
    7e5e:	cd 92       	st	X+, r12
    7e60:	dd 92       	st	X+, r13
    7e62:	ed 92       	st	X+, r14
    7e64:	fc 92       	st	X, r15
    7e66:	13 97       	sbiw	r26, 0x03	; 3
    7e68:	c3 01       	movw	r24, r6
    7e6a:	b2 01       	movw	r22, r4
    7e6c:	0e 94 45 4b 	call	0x968a	; 0x968a <__mulsi3>
    7e70:	86 1a       	sub	r8, r22
    7e72:	97 0a       	sbc	r9, r23
    7e74:	a8 0a       	sbc	r10, r24
    7e76:	b9 0a       	sbc	r11, r25
    7e78:	f1 01       	movw	r30, r2
    7e7a:	84 82       	std	Z+4, r8	; 0x04
    7e7c:	95 82       	std	Z+5, r9	; 0x05
    7e7e:	a6 82       	std	Z+6, r10	; 0x06
    7e80:	b7 82       	std	Z+7, r11	; 0x07
    7e82:	40 86       	std	Z+8, r4	; 0x08
    7e84:	51 86       	std	Z+9, r5	; 0x09
    7e86:	62 86       	std	Z+10, r6	; 0x0a
    7e88:	73 86       	std	Z+11, r7	; 0x0b
    7e8a:	6d 85       	ldd	r22, Y+13	; 0x0d
    7e8c:	7e 85       	ldd	r23, Y+14	; 0x0e
    7e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7e90:	98 89       	ldd	r25, Y+16	; 0x10
    7e92:	62 96       	adiw	r28, 0x12	; 18
    7e94:	cd bf       	out	0x3d, r28	; 61
    7e96:	de bf       	out	0x3e, r29	; 62
    7e98:	df 91       	pop	r29
    7e9a:	cf 91       	pop	r28
    7e9c:	1f 91       	pop	r17
    7e9e:	0f 91       	pop	r16
    7ea0:	ff 90       	pop	r15
    7ea2:	ef 90       	pop	r14
    7ea4:	df 90       	pop	r13
    7ea6:	cf 90       	pop	r12
    7ea8:	bf 90       	pop	r11
    7eaa:	af 90       	pop	r10
    7eac:	9f 90       	pop	r9
    7eae:	8f 90       	pop	r8
    7eb0:	7f 90       	pop	r7
    7eb2:	6f 90       	pop	r6
    7eb4:	5f 90       	pop	r5
    7eb6:	4f 90       	pop	r4
    7eb8:	3f 90       	pop	r3
    7eba:	2f 90       	pop	r2
    7ebc:	08 95       	ret

00007ebe <_Z17si5351_write_bulkhPhh>:
    7ebe:	ff 92       	push	r15
    7ec0:	0f 93       	push	r16
    7ec2:	1f 93       	push	r17
    7ec4:	cf 93       	push	r28
    7ec6:	df 93       	push	r29
    7ec8:	f8 2e       	mov	r15, r24
    7eca:	8b 01       	movw	r16, r22
    7ecc:	d4 2f       	mov	r29, r20
    7ece:	8a e0       	ldi	r24, 0x0A	; 10
    7ed0:	cf ef       	ldi	r28, 0xFF	; 255
    7ed2:	c8 0f       	add	r28, r24
    7ed4:	88 23       	and	r24, r24
    7ed6:	71 f0       	breq	.+28     	; 0x7ef4 <_Z17si5351_write_bulkhPhh+0x36>
    7ed8:	2d 2f       	mov	r18, r29
    7eda:	a8 01       	movw	r20, r16
    7edc:	6f 2d       	mov	r22, r15
    7ede:	80 ec       	ldi	r24, 0xC0	; 192
    7ee0:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <I2C_1_SendData>
    7ee4:	21 e0       	ldi	r18, 0x01	; 1
    7ee6:	d8 13       	cpse	r29, r24
    7ee8:	01 c0       	rjmp	.+2      	; 0x7eec <_Z17si5351_write_bulkhPhh+0x2e>
    7eea:	20 e0       	ldi	r18, 0x00	; 0
    7eec:	d8 17       	cp	r29, r24
    7eee:	21 f0       	breq	.+8      	; 0x7ef8 <_Z17si5351_write_bulkhPhh+0x3a>
    7ef0:	91 e0       	ldi	r25, 0x01	; 1
    7ef2:	03 c0       	rjmp	.+6      	; 0x7efa <_Z17si5351_write_bulkhPhh+0x3c>
    7ef4:	90 e0       	ldi	r25, 0x00	; 0
    7ef6:	01 c0       	rjmp	.+2      	; 0x7efa <_Z17si5351_write_bulkhPhh+0x3c>
    7ef8:	90 e0       	ldi	r25, 0x00	; 0
    7efa:	8c 2f       	mov	r24, r28
    7efc:	91 11       	cpse	r25, r1
    7efe:	e8 cf       	rjmp	.-48     	; 0x7ed0 <_Z17si5351_write_bulkhPhh+0x12>
    7f00:	82 2f       	mov	r24, r18
    7f02:	df 91       	pop	r29
    7f04:	cf 91       	pop	r28
    7f06:	1f 91       	pop	r17
    7f08:	0f 91       	pop	r16
    7f0a:	ff 90       	pop	r15
    7f0c:	08 95       	ret

00007f0e <_Z7set_pllm10si5351_pll>:
    7f0e:	1f 93       	push	r17
    7f10:	cf 93       	push	r28
    7f12:	df 93       	push	r29
    7f14:	cd b7       	in	r28, 0x3d	; 61
    7f16:	de b7       	in	r29, 0x3e	; 62
    7f18:	66 97       	sbiw	r28, 0x16	; 22
    7f1a:	cd bf       	out	0x3d, r28	; 61
    7f1c:	de bf       	out	0x3e, r29	; 62
    7f1e:	14 2f       	mov	r17, r20
    7f20:	ae 01       	movw	r20, r28
    7f22:	4f 5f       	subi	r20, 0xFF	; 255
    7f24:	5f 4f       	sbci	r21, 0xFF	; 255
    7f26:	0e 94 c2 3c 	call	0x7984	; 0x7984 <_Z8pll_calcmP13u_si5351_regs>
    7f2a:	81 11       	cpse	r24, r1
    7f2c:	28 c0       	rjmp	.+80     	; 0x7f7e <_Z7set_pllm10si5351_pll+0x70>
    7f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f30:	8d 87       	std	Y+13, r24	; 0x0d
    7f32:	89 85       	ldd	r24, Y+9	; 0x09
    7f34:	8e 87       	std	Y+14, r24	; 0x0e
    7f36:	8b 81       	ldd	r24, Y+3	; 0x03
    7f38:	83 70       	andi	r24, 0x03	; 3
    7f3a:	8f 87       	std	Y+15, r24	; 0x0f
    7f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    7f3e:	88 8b       	std	Y+16, r24	; 0x10
    7f40:	89 81       	ldd	r24, Y+1	; 0x01
    7f42:	89 8b       	std	Y+17, r24	; 0x11
    7f44:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f46:	8f 81       	ldd	r24, Y+7	; 0x07
    7f48:	8f 70       	andi	r24, 0x0F	; 15
    7f4a:	20 e1       	ldi	r18, 0x10	; 16
    7f4c:	92 9f       	mul	r25, r18
    7f4e:	80 0d       	add	r24, r0
    7f50:	11 24       	eor	r1, r1
    7f52:	8a 8b       	std	Y+18, r24	; 0x12
    7f54:	8e 81       	ldd	r24, Y+6	; 0x06
    7f56:	8b 8b       	std	Y+19, r24	; 0x13
    7f58:	8d 81       	ldd	r24, Y+5	; 0x05
    7f5a:	8c 8b       	std	Y+20, r24	; 0x14
    7f5c:	11 30       	cpi	r17, 0x01	; 1
    7f5e:	41 f4       	brne	.+16     	; 0x7f70 <_Z7set_pllm10si5351_pll+0x62>
    7f60:	48 e0       	ldi	r20, 0x08	; 8
    7f62:	be 01       	movw	r22, r28
    7f64:	63 5f       	subi	r22, 0xF3	; 243
    7f66:	7f 4f       	sbci	r23, 0xFF	; 255
    7f68:	8a e1       	ldi	r24, 0x1A	; 26
    7f6a:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    7f6e:	07 c0       	rjmp	.+14     	; 0x7f7e <_Z7set_pllm10si5351_pll+0x70>
    7f70:	48 e0       	ldi	r20, 0x08	; 8
    7f72:	be 01       	movw	r22, r28
    7f74:	63 5f       	subi	r22, 0xF3	; 243
    7f76:	7f 4f       	sbci	r23, 0xFF	; 255
    7f78:	82 e2       	ldi	r24, 0x22	; 34
    7f7a:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    7f7e:	66 96       	adiw	r28, 0x16	; 22
    7f80:	cd bf       	out	0x3d, r28	; 61
    7f82:	de bf       	out	0x3e, r29	; 62
    7f84:	df 91       	pop	r29
    7f86:	cf 91       	pop	r28
    7f88:	1f 91       	pop	r17
    7f8a:	08 95       	ret

00007f8c <_Z16si5351_read_bulkhPhh>:
		while(tries-- && (fail = I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
		return(fail);
	}

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    7f8c:	ff 92       	push	r15
    7f8e:	0f 93       	push	r16
    7f90:	1f 93       	push	r17
    7f92:	cf 93       	push	r28
    7f94:	df 93       	push	r29
    7f96:	f8 2e       	mov	r15, r24
    7f98:	8b 01       	movw	r16, r22
    7f9a:	d4 2f       	mov	r29, r20
		uint8_t tries = 10;
    7f9c:	8a e0       	ldi	r24, 0x0A	; 10
		bool fail;
		while(tries-- && (fail = I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    7f9e:	cf ef       	ldi	r28, 0xFF	; 255
    7fa0:	c8 0f       	add	r28, r24
    7fa2:	88 23       	and	r24, r24
    7fa4:	71 f0       	breq	.+28     	; 0x7fc2 <_Z16si5351_read_bulkhPhh+0x36>
    7fa6:	2d 2f       	mov	r18, r29
    7fa8:	a8 01       	movw	r20, r16
    7faa:	6f 2d       	mov	r22, r15
    7fac:	80 ec       	ldi	r24, 0xC0	; 192
    7fae:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <I2C_1_GetData>
    7fb2:	21 e0       	ldi	r18, 0x01	; 1
    7fb4:	d8 13       	cpse	r29, r24
    7fb6:	01 c0       	rjmp	.+2      	; 0x7fba <_Z16si5351_read_bulkhPhh+0x2e>
    7fb8:	20 e0       	ldi	r18, 0x00	; 0
    7fba:	d8 17       	cp	r29, r24
    7fbc:	21 f0       	breq	.+8      	; 0x7fc6 <_Z16si5351_read_bulkhPhh+0x3a>
    7fbe:	91 e0       	ldi	r25, 0x01	; 1
    7fc0:	03 c0       	rjmp	.+6      	; 0x7fc8 <_Z16si5351_read_bulkhPhh+0x3c>
    7fc2:	90 e0       	ldi	r25, 0x00	; 0
    7fc4:	01 c0       	rjmp	.+2      	; 0x7fc8 <_Z16si5351_read_bulkhPhh+0x3c>
    7fc6:	90 e0       	ldi	r25, 0x00	; 0
    7fc8:	8c 2f       	mov	r24, r28
    7fca:	91 11       	cpse	r25, r1
    7fcc:	e8 cf       	rjmp	.-48     	; 0x7f9e <_Z16si5351_read_bulkhPhh+0x12>
		return(fail);
	}
    7fce:	82 2f       	mov	r24, r18
    7fd0:	df 91       	pop	r29
    7fd2:	cf 91       	pop	r28
    7fd4:	1f 91       	pop	r17
    7fd6:	0f 91       	pop	r16
    7fd8:	ff 90       	pop	r15
    7fda:	08 95       	ret

00007fdc <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	bool si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    7fdc:	cf 92       	push	r12
    7fde:	df 92       	push	r13
    7fe0:	ef 92       	push	r14
    7fe2:	ff 92       	push	r15
    7fe4:	1f 93       	push	r17
    7fe6:	cf 93       	push	r28
    7fe8:	df 93       	push	r29
    7fea:	00 d0       	rcall	.+0      	; 0x7fec <si5351_init+0x10>
    7fec:	cd b7       	in	r28, 0x3d	; 61
    7fee:	de b7       	in	r29, 0x3e	; 62
    7ff0:	18 2f       	mov	r17, r24
    7ff2:	6a 01       	movw	r12, r20
    7ff4:	7b 01       	movw	r14, r22
		static bool err = false;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    7ff6:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <I2C_1_Init>
			uint8_t result_val = 0x00;
			bool result = false;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    7ffa:	10 92 3e 49 	sts	0x493E, r1	; 0x80493e <_ZL8freqVCOB>
    7ffe:	10 92 3f 49 	sts	0x493F, r1	; 0x80493f <_ZL8freqVCOB+0x1>
    8002:	10 92 40 49 	sts	0x4940, r1	; 0x804940 <_ZL8freqVCOB+0x2>
    8006:	10 92 41 49 	sts	0x4941, r1	; 0x804941 <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    800a:	80 e4       	ldi	r24, 0x40	; 64
    800c:	98 e7       	ldi	r25, 0x78	; 120
    800e:	ad e7       	ldi	r26, 0x7D	; 125
    8010:	b1 e0       	ldi	r27, 0x01	; 1
    8012:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    8016:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    801a:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    801e:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    8022:	10 92 3d 49 	sts	0x493D, r1	; 0x80493d <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    8026:	8f ef       	ldi	r24, 0xFF	; 255
    8028:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    802a:	41 e0       	ldi	r20, 0x01	; 1
    802c:	be 01       	movw	r22, r28
    802e:	6f 5f       	subi	r22, 0xFF	; 255
    8030:	7f 4f       	sbci	r23, 0xFF	; 255
    8032:	83 e0       	ldi	r24, 0x03	; 3
    8034:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    8038:	80 93 2f 49 	sts	0x492F, r24	; 0x80492f <_ZZ11si5351_initE3err>
		
		if(err) return err;
    803c:	81 11       	cpse	r24, r1
    803e:	76 c0       	rjmp	.+236    	; 0x812c <__RODATA_PM_OFFSET__+0x12c>
		/* Power down clocks */
		data[0] = 0xCC;
    8040:	8c ec       	ldi	r24, 0xCC	; 204
    8042:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    8044:	41 e0       	ldi	r20, 0x01	; 1
    8046:	be 01       	movw	r22, r28
    8048:	6f 5f       	subi	r22, 0xFF	; 255
    804a:	7f 4f       	sbci	r23, 0xFF	; 255
    804c:	80 e1       	ldi	r24, 0x10	; 16
    804e:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    8052:	90 91 2f 49 	lds	r25, 0x492F	; 0x80492f <_ZZ11si5351_initE3err>
    8056:	89 2b       	or	r24, r25
    8058:	80 93 2f 49 	sts	0x492F, r24	; 0x80492f <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x11, data, 1);
    805c:	41 e0       	ldi	r20, 0x01	; 1
    805e:	be 01       	movw	r22, r28
    8060:	6f 5f       	subi	r22, 0xFF	; 255
    8062:	7f 4f       	sbci	r23, 0xFF	; 255
    8064:	81 e1       	ldi	r24, 0x11	; 17
    8066:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    806a:	90 91 2f 49 	lds	r25, 0x492F	; 0x80492f <_ZZ11si5351_initE3err>
    806e:	89 2b       	or	r24, r25
    8070:	80 93 2f 49 	sts	0x492F, r24	; 0x80492f <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x12, data, 1);
    8074:	41 e0       	ldi	r20, 0x01	; 1
    8076:	be 01       	movw	r22, r28
    8078:	6f 5f       	subi	r22, 0xFF	; 255
    807a:	7f 4f       	sbci	r23, 0xFF	; 255
    807c:	82 e1       	ldi	r24, 0x12	; 18
    807e:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    8082:	90 91 2f 49 	lds	r25, 0x492F	; 0x80492f <_ZZ11si5351_initE3err>
    8086:	89 2b       	or	r24, r25
    8088:	80 93 2f 49 	sts	0x492F, r24	; 0x80492f <_ZZ11si5351_initE3err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    808c:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    808e:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    8090:	41 e0       	ldi	r20, 0x01	; 1
    8092:	be 01       	movw	r22, r28
    8094:	6f 5f       	subi	r22, 0xFF	; 255
    8096:	7f 4f       	sbci	r23, 0xFF	; 255
    8098:	87 eb       	ldi	r24, 0xB7	; 183
    809a:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    809e:	90 91 2f 49 	lds	r25, 0x492F	; 0x80492f <_ZZ11si5351_initE3err>
    80a2:	89 2b       	or	r24, r25
    80a4:	80 93 2f 49 	sts	0x492F, r24	; 0x80492f <_ZZ11si5351_initE3err>

		if(!ref_osc_freq)
    80a8:	c1 14       	cp	r12, r1
    80aa:	d1 04       	cpc	r13, r1
    80ac:	e1 04       	cpc	r14, r1
    80ae:	f1 04       	cpc	r15, r1
    80b0:	51 f4       	brne	.+20     	; 0x80c6 <__RODATA_PM_OFFSET__+0xc6>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    80b2:	0f 2e       	mov	r0, r31
    80b4:	f0 e4       	ldi	r31, 0x40	; 64
    80b6:	cf 2e       	mov	r12, r31
    80b8:	f8 e7       	ldi	r31, 0x78	; 120
    80ba:	df 2e       	mov	r13, r31
    80bc:	fd e7       	ldi	r31, 0x7D	; 125
    80be:	ef 2e       	mov	r14, r31
    80c0:	ff 24       	eor	r15, r15
    80c2:	f3 94       	inc	r15
    80c4:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    80c6:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    80ca:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    80ce:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    80d2:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    80d6:	c8 16       	cp	r12, r24
    80d8:	d9 06       	cpc	r13, r25
    80da:	ea 06       	cpc	r14, r26
    80dc:	fb 06       	cpc	r15, r27
    80de:	01 f1       	breq	.+64     	; 0x8120 <__RODATA_PM_OFFSET__+0x120>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    80e0:	41 e0       	ldi	r20, 0x01	; 1
    80e2:	be 01       	movw	r22, r28
    80e4:	6f 5f       	subi	r22, 0xFF	; 255
    80e6:	7f 4f       	sbci	r23, 0xFF	; 255
    80e8:	8f e0       	ldi	r24, 0x0F	; 15
    80ea:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <_Z16si5351_read_bulkhPhh>
    80ee:	81 11       	cpse	r24, r1
    80f0:	1d c0       	rjmp	.+58     	; 0x812c <__RODATA_PM_OFFSET__+0x12c>
			{
				return true;
			}
			
			reg_val = data[0];
    80f2:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    80f4:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    80f6:	c0 92 28 40 	sts	0x4028, r12	; 0x804028 <_ZL9xtal_freq>
    80fa:	d0 92 29 40 	sts	0x4029, r13	; 0x804029 <_ZL9xtal_freq+0x1>
    80fe:	e0 92 2a 40 	sts	0x402A, r14	; 0x80402a <_ZL9xtal_freq+0x2>
    8102:	f0 92 2b 40 	sts	0x402B, r15	; 0x80402b <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    8106:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    8108:	41 e0       	ldi	r20, 0x01	; 1
    810a:	be 01       	movw	r22, r28
    810c:	6f 5f       	subi	r22, 0xFF	; 255
    810e:	7f 4f       	sbci	r23, 0xFF	; 255
    8110:	8f e0       	ldi	r24, 0x0F	; 15
    8112:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    8116:	90 91 2f 49 	lds	r25, 0x492F	; 0x80492f <_ZZ11si5351_initE3err>
    811a:	89 2b       	or	r24, r25
    811c:	80 93 2f 49 	sts	0x492F, r24	; 0x80492f <_ZZ11si5351_initE3err>
		}
		
		g_si5351_initialized = !err;
    8120:	80 91 2f 49 	lds	r24, 0x492F	; 0x80492f <_ZZ11si5351_initE3err>
    8124:	91 e0       	ldi	r25, 0x01	; 1
    8126:	98 27       	eor	r25, r24
    8128:	90 93 30 49 	sts	0x4930, r25	; 0x804930 <g_si5351_initialized>

		return err;
	}
    812c:	0f 90       	pop	r0
    812e:	0f 90       	pop	r0
    8130:	df 91       	pop	r29
    8132:	cf 91       	pop	r28
    8134:	1f 91       	pop	r17
    8136:	ff 90       	pop	r15
    8138:	ef 90       	pop	r14
    813a:	df 90       	pop	r13
    813c:	cf 90       	pop	r12
    813e:	08 95       	ret

00008140 <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, bool enable)
	{
    8140:	0f 93       	push	r16
    8142:	1f 93       	push	r17
    8144:	cf 93       	push	r28
    8146:	df 93       	push	r29
    8148:	00 d0       	rcall	.+0      	; 0x814a <si5351_clock_enable+0xa>
    814a:	cd b7       	in	r28, 0x3d	; 61
    814c:	de b7       	in	r29, 0x3e	; 62
    814e:	18 2f       	mov	r17, r24
    8150:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    8152:	41 e0       	ldi	r20, 0x01	; 1
    8154:	be 01       	movw	r22, r28
    8156:	6f 5f       	subi	r22, 0xFF	; 255
    8158:	7f 4f       	sbci	r23, 0xFF	; 255
    815a:	83 e0       	ldi	r24, 0x03	; 3
    815c:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <_Z16si5351_read_bulkhPhh>
    8160:	81 11       	cpse	r24, r1
    8162:	23 c0       	rjmp	.+70     	; 0x81aa <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    8164:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    8166:	00 23       	and	r16, r16
    8168:	59 f0       	breq	.+22     	; 0x8180 <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    816a:	21 e0       	ldi	r18, 0x01	; 1
    816c:	30 e0       	ldi	r19, 0x00	; 0
    816e:	02 c0       	rjmp	.+4      	; 0x8174 <si5351_clock_enable+0x34>
    8170:	22 0f       	add	r18, r18
    8172:	33 1f       	adc	r19, r19
    8174:	1a 95       	dec	r17
    8176:	e2 f7       	brpl	.-8      	; 0x8170 <si5351_clock_enable+0x30>
    8178:	82 2f       	mov	r24, r18
    817a:	80 95       	com	r24
    817c:	89 23       	and	r24, r25
    817e:	09 c0       	rjmp	.+18     	; 0x8192 <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    8180:	21 e0       	ldi	r18, 0x01	; 1
    8182:	30 e0       	ldi	r19, 0x00	; 0
    8184:	02 c0       	rjmp	.+4      	; 0x818a <si5351_clock_enable+0x4a>
    8186:	22 0f       	add	r18, r18
    8188:	33 1f       	adc	r19, r19
    818a:	1a 95       	dec	r17
    818c:	e2 f7       	brpl	.-8      	; 0x8186 <si5351_clock_enable+0x46>
    818e:	89 2f       	mov	r24, r25
    8190:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    8192:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    8194:	41 e0       	ldi	r20, 0x01	; 1
    8196:	be 01       	movw	r22, r28
    8198:	6f 5f       	subi	r22, 0xFF	; 255
    819a:	7f 4f       	sbci	r23, 0xFF	; 255
    819c:	83 e0       	ldi	r24, 0x03	; 3
    819e:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    81a2:	88 23       	and	r24, r24
    81a4:	21 f0       	breq	.+8      	; 0x81ae <si5351_clock_enable+0x6e>
    81a6:	8c ef       	ldi	r24, 0xFC	; 252
    81a8:	03 c0       	rjmp	.+6      	; 0x81b0 <si5351_clock_enable+0x70>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    81aa:	8c ef       	ldi	r24, 0xFC	; 252
    81ac:	01 c0       	rjmp	.+2      	; 0x81b0 <si5351_clock_enable+0x70>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    81ae:	80 e0       	ldi	r24, 0x00	; 0
	}
    81b0:	0f 90       	pop	r0
    81b2:	0f 90       	pop	r0
    81b4:	df 91       	pop	r29
    81b6:	cf 91       	pop	r28
    81b8:	1f 91       	pop	r17
    81ba:	0f 91       	pop	r16
    81bc:	08 95       	ret

000081be <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    81be:	0f 93       	push	r16
    81c0:	1f 93       	push	r17
    81c2:	cf 93       	push	r28
    81c4:	df 93       	push	r29
    81c6:	00 d0       	rcall	.+0      	; 0x81c8 <si5351_drive_strength+0xa>
    81c8:	cd b7       	in	r28, 0x3d	; 61
    81ca:	de b7       	in	r29, 0x3e	; 62
    81cc:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    81ce:	10 e1       	ldi	r17, 0x10	; 16
    81d0:	18 0f       	add	r17, r24
    81d2:	41 e0       	ldi	r20, 0x01	; 1
    81d4:	be 01       	movw	r22, r28
    81d6:	6f 5f       	subi	r22, 0xFF	; 255
    81d8:	7f 4f       	sbci	r23, 0xFF	; 255
    81da:	81 2f       	mov	r24, r17
    81dc:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <_Z16si5351_read_bulkhPhh>
    81e0:	81 11       	cpse	r24, r1
    81e2:	1e c0       	rjmp	.+60     	; 0x8220 <si5351_drive_strength+0x62>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    81e4:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    81e6:	01 30       	cpi	r16, 0x01	; 1
    81e8:	41 f0       	breq	.+16     	; 0x81fa <si5351_drive_strength+0x3c>
    81ea:	28 f0       	brcs	.+10     	; 0x81f6 <si5351_drive_strength+0x38>
    81ec:	02 30       	cpi	r16, 0x02	; 2
    81ee:	41 f0       	breq	.+16     	; 0x8200 <si5351_drive_strength+0x42>
    81f0:	03 30       	cpi	r16, 0x03	; 3
    81f2:	49 f0       	breq	.+18     	; 0x8206 <si5351_drive_strength+0x48>
    81f4:	09 c0       	rjmp	.+18     	; 0x8208 <si5351_drive_strength+0x4a>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    81f6:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    81f8:	07 c0       	rjmp	.+14     	; 0x8208 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    81fa:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    81fc:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    81fe:	04 c0       	rjmp	.+8      	; 0x8208 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    8200:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    8202:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    8204:	01 c0       	rjmp	.+2      	; 0x8208 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    8206:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    8208:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    820a:	41 e0       	ldi	r20, 0x01	; 1
    820c:	be 01       	movw	r22, r28
    820e:	6f 5f       	subi	r22, 0xFF	; 255
    8210:	7f 4f       	sbci	r23, 0xFF	; 255
    8212:	81 2f       	mov	r24, r17
    8214:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    8218:	88 23       	and	r24, r24
    821a:	21 f0       	breq	.+8      	; 0x8224 <si5351_drive_strength+0x66>
    821c:	8b ef       	ldi	r24, 0xFB	; 251
    821e:	03 c0       	rjmp	.+6      	; 0x8226 <si5351_drive_strength+0x68>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    8220:	8b ef       	ldi	r24, 0xFB	; 251
    8222:	01 c0       	rjmp	.+2      	; 0x8226 <si5351_drive_strength+0x68>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    8224:	80 e0       	ldi	r24, 0x00	; 0
	}
    8226:	0f 90       	pop	r0
    8228:	0f 90       	pop	r0
    822a:	df 91       	pop	r29
    822c:	cf 91       	pop	r28
    822e:	1f 91       	pop	r17
    8230:	0f 91       	pop	r16
    8232:	08 95       	ret

00008234 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    8234:	0f 93       	push	r16
    8236:	1f 93       	push	r17
    8238:	cf 93       	push	r28
    823a:	df 93       	push	r29
    823c:	00 d0       	rcall	.+0      	; 0x823e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    823e:	cd b7       	in	r28, 0x3d	; 61
    8240:	de b7       	in	r29, 0x3e	; 62
    8242:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    8244:	10 e1       	ldi	r17, 0x10	; 16
    8246:	18 0f       	add	r17, r24
    8248:	41 e0       	ldi	r20, 0x01	; 1
    824a:	be 01       	movw	r22, r28
    824c:	6f 5f       	subi	r22, 0xFF	; 255
    824e:	7f 4f       	sbci	r23, 0xFF	; 255
    8250:	81 2f       	mov	r24, r17
    8252:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <_Z16si5351_read_bulkhPhh>
    8256:	81 11       	cpse	r24, r1
    8258:	10 c0       	rjmp	.+32     	; 0x827a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x46>
		{
			return(true);
		}
		
		reg_val = data[0];
    825a:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    825c:	01 30       	cpi	r16, 0x01	; 1
    825e:	11 f4       	brne	.+4      	; 0x8264 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    8260:	8f 7d       	andi	r24, 0xDF	; 223
    8262:	03 c0       	rjmp	.+6      	; 0x826a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    8264:	02 30       	cpi	r16, 0x02	; 2
    8266:	09 f4       	brne	.+2      	; 0x826a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    8268:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    826a:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    826c:	41 e0       	ldi	r20, 0x01	; 1
    826e:	be 01       	movw	r22, r28
    8270:	6f 5f       	subi	r22, 0xFF	; 255
    8272:	7f 4f       	sbci	r23, 0xFF	; 255
    8274:	81 2f       	mov	r24, r17
    8276:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
		{
			return(true);
		}
		
		return(false);
	}
    827a:	0f 90       	pop	r0
    827c:	0f 90       	pop	r0
    827e:	df 91       	pop	r29
    8280:	cf 91       	pop	r28
    8282:	1f 91       	pop	r17
    8284:	0f 91       	pop	r16
    8286:	08 95       	ret

00008288 <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    8288:	0f 93       	push	r16
    828a:	1f 93       	push	r17
    828c:	cf 93       	push	r28
    828e:	df 93       	push	r29
    8290:	00 d0       	rcall	.+0      	; 0x8292 <_Z16set_integer_mode12si5351_clockb+0xa>
    8292:	cd b7       	in	r28, 0x3d	; 61
    8294:	de b7       	in	r29, 0x3e	; 62
    8296:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    8298:	10 e1       	ldi	r17, 0x10	; 16
    829a:	18 0f       	add	r17, r24
    829c:	41 e0       	ldi	r20, 0x01	; 1
    829e:	be 01       	movw	r22, r28
    82a0:	6f 5f       	subi	r22, 0xFF	; 255
    82a2:	7f 4f       	sbci	r23, 0xFF	; 255
    82a4:	81 2f       	mov	r24, r17
    82a6:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <_Z16si5351_read_bulkhPhh>
    82aa:	81 11       	cpse	r24, r1
    82ac:	0e c0       	rjmp	.+28     	; 0x82ca <_Z16set_integer_mode12si5351_clockb+0x42>
		{
			return(true);
		}
		
		reg_val = data[0];
    82ae:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    82b0:	00 23       	and	r16, r16
    82b2:	11 f0       	breq	.+4      	; 0x82b8 <_Z16set_integer_mode12si5351_clockb+0x30>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    82b4:	80 64       	ori	r24, 0x40	; 64
    82b6:	01 c0       	rjmp	.+2      	; 0x82ba <_Z16set_integer_mode12si5351_clockb+0x32>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    82b8:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    82ba:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    82bc:	41 e0       	ldi	r20, 0x01	; 1
    82be:	be 01       	movw	r22, r28
    82c0:	6f 5f       	subi	r22, 0xFF	; 255
    82c2:	7f 4f       	sbci	r23, 0xFF	; 255
    82c4:	81 2f       	mov	r24, r17
    82c6:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
	}
    82ca:	0f 90       	pop	r0
    82cc:	0f 90       	pop	r0
    82ce:	df 91       	pop	r29
    82d0:	cf 91       	pop	r28
    82d2:	1f 91       	pop	r17
    82d4:	0f 91       	pop	r16
    82d6:	08 95       	ret

000082d8 <_Z6ms_div12si5351_clockhb>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    82d8:	ff 92       	push	r15
    82da:	0f 93       	push	r16
    82dc:	1f 93       	push	r17
    82de:	cf 93       	push	r28
    82e0:	df 93       	push	r29
    82e2:	00 d0       	rcall	.+0      	; 0x82e4 <_Z6ms_div12si5351_clockhb+0xc>
    82e4:	cd b7       	in	r28, 0x3d	; 61
    82e6:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    82e8:	81 30       	cpi	r24, 0x01	; 1
    82ea:	71 f0       	breq	.+28     	; 0x8308 <_Z6ms_div12si5351_clockhb+0x30>
    82ec:	18 f0       	brcs	.+6      	; 0x82f4 <_Z6ms_div12si5351_clockhb+0x1c>
    82ee:	82 30       	cpi	r24, 0x02	; 2
    82f0:	31 f0       	breq	.+12     	; 0x82fe <_Z6ms_div12si5351_clockhb+0x26>
    82f2:	2c c0       	rjmp	.+88     	; 0x834c <_Z6ms_div12si5351_clockhb+0x74>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    82f4:	0f 2e       	mov	r0, r31
    82f6:	fc e2       	ldi	r31, 0x2C	; 44
    82f8:	ff 2e       	mov	r15, r31
    82fa:	f0 2d       	mov	r31, r0
    82fc:	09 c0       	rjmp	.+18     	; 0x8310 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    82fe:	0f 2e       	mov	r0, r31
    8300:	fc e3       	ldi	r31, 0x3C	; 60
    8302:	ff 2e       	mov	r15, r31
    8304:	f0 2d       	mov	r31, r0
			}
			break;
    8306:	04 c0       	rjmp	.+8      	; 0x8310 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    8308:	0f 2e       	mov	r0, r31
    830a:	f4 e3       	ldi	r31, 0x34	; 52
    830c:	ff 2e       	mov	r15, r31
    830e:	f0 2d       	mov	r31, r0
    8310:	04 2f       	mov	r16, r20
    8312:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    8314:	41 e0       	ldi	r20, 0x01	; 1
    8316:	be 01       	movw	r22, r28
    8318:	6f 5f       	subi	r22, 0xFF	; 255
    831a:	7f 4f       	sbci	r23, 0xFF	; 255
    831c:	8f 2d       	mov	r24, r15
    831e:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <_Z16si5351_read_bulkhPhh>
    8322:	81 11       	cpse	r24, r1
    8324:	14 c0       	rjmp	.+40     	; 0x834e <_Z6ms_div12si5351_clockhb+0x76>
		{
			return(true);
		}
		
		reg_val = data[0];
    8326:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    8328:	86 2f       	mov	r24, r22
    832a:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    832c:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    832e:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    8330:	90 e1       	ldi	r25, 0x10	; 16
    8332:	19 9f       	mul	r17, r25
    8334:	b0 01       	movw	r22, r0
    8336:	11 24       	eor	r1, r1
    8338:	68 2b       	or	r22, r24

		data[0] = reg_val;
    833a:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    833c:	41 e0       	ldi	r20, 0x01	; 1
    833e:	be 01       	movw	r22, r28
    8340:	6f 5f       	subi	r22, 0xFF	; 255
    8342:	7f 4f       	sbci	r23, 0xFF	; 255
    8344:	8f 2d       	mov	r24, r15
    8346:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    834a:	01 c0       	rjmp	.+2      	; 0x834e <_Z6ms_div12si5351_clockhb+0x76>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    834c:	81 e0       	ldi	r24, 0x01	; 1

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		data[0] = reg_val;
		return(si5351_write_bulk(reg_addr, data, 1));
	}
    834e:	0f 90       	pop	r0
    8350:	0f 90       	pop	r0
    8352:	df 91       	pop	r29
    8354:	cf 91       	pop	r28
    8356:	1f 91       	pop	r17
    8358:	0f 91       	pop	r16
    835a:	ff 90       	pop	r15
    835c:	08 95       	ret

0000835e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    835e:	8f 92       	push	r8
    8360:	af 92       	push	r10
    8362:	cf 92       	push	r12
    8364:	df 92       	push	r13
    8366:	ef 92       	push	r14
    8368:	ff 92       	push	r15
    836a:	0f 93       	push	r16
    836c:	1f 93       	push	r17
    836e:	cf 93       	push	r28
    8370:	df 93       	push	r29
    8372:	cd b7       	in	r28, 0x3d	; 61
    8374:	de b7       	in	r29, 0x3e	; 62
    8376:	69 97       	sbiw	r28, 0x19	; 25
    8378:	cd bf       	out	0x3d, r28	; 61
    837a:	de bf       	out	0x3e, r29	; 62
    837c:	f8 2e       	mov	r15, r24
    837e:	ce 86       	std	Y+14, r12	; 0x0e
    8380:	df 86       	std	Y+15, r13	; 0x0f
    8382:	e8 8a       	std	Y+16, r14	; 0x10
    8384:	0a 8b       	std	Y+18, r16	; 0x12
    8386:	1b 8b       	std	Y+19, r17	; 0x13
    8388:	2c 8b       	std	Y+20, r18	; 0x14
    838a:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    838c:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    838e:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    8390:	88 0f       	add	r24, r24
    8392:	88 0f       	add	r24, r24
    8394:	88 0f       	add	r24, r24
    8396:	41 e0       	ldi	r20, 0x01	; 1
    8398:	be 01       	movw	r22, r28
    839a:	64 5f       	subi	r22, 0xF4	; 244
    839c:	7f 4f       	sbci	r23, 0xFF	; 255
    839e:	84 5d       	subi	r24, 0xD4	; 212
    83a0:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <_Z16si5351_read_bulkhPhh>
    83a4:	81 11       	cpse	r24, r1
    83a6:	48 c0       	rjmp	.+144    	; 0x8438 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		reg_val = data[0];
    83a8:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    83aa:	98 2f       	mov	r25, r24
    83ac:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    83ae:	88 89       	ldd	r24, Y+16	; 0x10
    83b0:	83 70       	andi	r24, 0x03	; 3
    83b2:	89 2b       	or	r24, r25
    83b4:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    83b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    83b8:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    83ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    83bc:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    83be:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    83c0:	8c 89       	ldd	r24, Y+20	; 0x14
    83c2:	8f 70       	andi	r24, 0x0F	; 15
    83c4:	20 e1       	ldi	r18, 0x10	; 16
    83c6:	92 9f       	mul	r25, r18
    83c8:	80 0d       	add	r24, r0
    83ca:	11 24       	eor	r1, r1
    83cc:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    83ce:	8b 89       	ldd	r24, Y+19	; 0x13
    83d0:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    83d2:	8a 89       	ldd	r24, Y+18	; 0x12
    83d4:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    83d6:	81 e0       	ldi	r24, 0x01	; 1
    83d8:	f8 16       	cp	r15, r24
    83da:	81 f0       	breq	.+32     	; 0x83fc <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x9e>
    83dc:	f8 16       	cp	r15, r24
    83de:	20 f0       	brcs	.+8      	; 0x83e8 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    83e0:	22 e0       	ldi	r18, 0x02	; 2
    83e2:	f2 16       	cp	r15, r18
    83e4:	a9 f0       	breq	.+42     	; 0x8410 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xb2>
    83e6:	1d c0       	rjmp	.+58     	; 0x8422 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    83e8:	48 e0       	ldi	r20, 0x08	; 8
    83ea:	be 01       	movw	r22, r28
    83ec:	6f 5f       	subi	r22, 0xFF	; 255
    83ee:	7f 4f       	sbci	r23, 0xFF	; 255
    83f0:	8a e2       	ldi	r24, 0x2A	; 42
    83f2:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    83f6:	88 23       	and	r24, r24
    83f8:	a1 f0       	breq	.+40     	; 0x8422 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    83fa:	1e c0       	rjmp	.+60     	; 0x8438 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    83fc:	48 e0       	ldi	r20, 0x08	; 8
    83fe:	be 01       	movw	r22, r28
    8400:	6f 5f       	subi	r22, 0xFF	; 255
    8402:	7f 4f       	sbci	r23, 0xFF	; 255
    8404:	82 e3       	ldi	r24, 0x32	; 50
    8406:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    840a:	88 23       	and	r24, r24
    840c:	51 f0       	breq	.+20     	; 0x8422 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    840e:	14 c0       	rjmp	.+40     	; 0x8438 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    8410:	48 e0       	ldi	r20, 0x08	; 8
    8412:	be 01       	movw	r22, r28
    8414:	6f 5f       	subi	r22, 0xFF	; 255
    8416:	7f 4f       	sbci	r23, 0xFF	; 255
    8418:	8a e3       	ldi	r24, 0x3A	; 58
    841a:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    841e:	81 11       	cpse	r24, r1
    8420:	0b c0       	rjmp	.+22     	; 0x8438 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    8422:	6a 2d       	mov	r22, r10
    8424:	8f 2d       	mov	r24, r15
    8426:	0e 94 44 41 	call	0x8288	; 0x8288 <_Z16set_integer_mode12si5351_clockb>
    842a:	81 11       	cpse	r24, r1
    842c:	05 c0       	rjmp	.+10     	; 0x8438 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    842e:	4e a1       	ldd	r20, Y+38	; 0x26
    8430:	68 2d       	mov	r22, r8
    8432:	8f 2d       	mov	r24, r15
    8434:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <_Z6ms_div12si5351_clockhb>
		{
			return(true);
		}
		
		return(false);
	}
    8438:	69 96       	adiw	r28, 0x19	; 25
    843a:	cd bf       	out	0x3d, r28	; 61
    843c:	de bf       	out	0x3e, r29	; 62
    843e:	df 91       	pop	r29
    8440:	cf 91       	pop	r28
    8442:	1f 91       	pop	r17
    8444:	0f 91       	pop	r16
    8446:	ff 90       	pop	r15
    8448:	ef 90       	pop	r14
    844a:	df 90       	pop	r13
    844c:	cf 90       	pop	r12
    844e:	af 90       	pop	r10
    8450:	8f 90       	pop	r8
    8452:	08 95       	ret

00008454 <si5351_set_freq>:
 *
 * Returns true on failure
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
    8454:	2f 92       	push	r2
    8456:	3f 92       	push	r3
    8458:	4f 92       	push	r4
    845a:	5f 92       	push	r5
    845c:	6f 92       	push	r6
    845e:	7f 92       	push	r7
    8460:	8f 92       	push	r8
    8462:	9f 92       	push	r9
    8464:	af 92       	push	r10
    8466:	bf 92       	push	r11
    8468:	cf 92       	push	r12
    846a:	df 92       	push	r13
    846c:	ef 92       	push	r14
    846e:	ff 92       	push	r15
    8470:	0f 93       	push	r16
    8472:	1f 93       	push	r17
    8474:	cf 93       	push	r28
    8476:	df 93       	push	r29
    8478:	cd b7       	in	r28, 0x3d	; 61
    847a:	de b7       	in	r29, 0x3e	; 62
    847c:	60 97       	sbiw	r28, 0x10	; 16
    847e:	cd bf       	out	0x3d, r28	; 61
    8480:	de bf       	out	0x3e, r29	; 62
    8482:	6b 01       	movw	r12, r22
    8484:	7c 01       	movw	r14, r24
    8486:	b4 2e       	mov	r11, r20
    8488:	72 2e       	mov	r7, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		bool int_mode = false;
    848a:	1d 86       	std	Y+13, r1	; 0x0d
		bool div_by_4 = false;
    848c:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    848e:	10 91 30 49 	lds	r17, 0x4930	; 0x804930 <g_si5351_initialized>
    8492:	11 23       	and	r17, r17
    8494:	09 f4       	brne	.+2      	; 0x8498 <si5351_set_freq+0x44>
    8496:	1e c1       	rjmp	.+572    	; 0x86d4 <si5351_set_freq+0x280>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    8498:	80 e4       	ldi	r24, 0x40	; 64
    849a:	c8 16       	cp	r12, r24
    849c:	82 e4       	ldi	r24, 0x42	; 66
    849e:	d8 06       	cpc	r13, r24
    84a0:	8f e0       	ldi	r24, 0x0F	; 15
    84a2:	e8 06       	cpc	r14, r24
    84a4:	f1 04       	cpc	r15, r1
    84a6:	70 f0       	brcs	.+28     	; 0x84c4 <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    84a8:	c7 01       	movw	r24, r14
    84aa:	b6 01       	movw	r22, r12
    84ac:	24 e6       	ldi	r18, 0x64	; 100
    84ae:	30 e0       	ldi	r19, 0x00	; 0
    84b0:	40 e0       	ldi	r20, 0x00	; 0
    84b2:	50 e0       	ldi	r21, 0x00	; 0
    84b4:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
				freq_Fout *= 100;
    84b8:	a4 e6       	ldi	r26, 0x64	; 100
    84ba:	b0 e0       	ldi	r27, 0x00	; 0
    84bc:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <__muluhisi3>
    84c0:	6b 01       	movw	r12, r22
    84c2:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    84c4:	81 e0       	ldi	r24, 0x01	; 1
    84c6:	b8 16       	cp	r11, r24
    84c8:	c9 f0       	breq	.+50     	; 0x84fc <si5351_set_freq+0xa8>
    84ca:	b8 16       	cp	r11, r24
    84cc:	20 f0       	brcs	.+8      	; 0x84d6 <si5351_set_freq+0x82>
    84ce:	82 e0       	ldi	r24, 0x02	; 2
    84d0:	b8 16       	cp	r11, r24
    84d2:	b1 f1       	breq	.+108    	; 0x8540 <si5351_set_freq+0xec>
    84d4:	08 c1       	rjmp	.+528    	; 0x86e6 <si5351_set_freq+0x292>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    84d6:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <_ZL17enabledClocksMask>
    84da:	81 60       	ori	r24, 0x01	; 1
    84dc:	80 93 3d 49 	sts	0x493D, r24	; 0x80493d <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    84e0:	c0 92 31 49 	sts	0x4931, r12	; 0x804931 <_ZL9clock_out>
    84e4:	d0 92 32 49 	sts	0x4932, r13	; 0x804932 <_ZL9clock_out+0x1>
    84e8:	e0 92 33 49 	sts	0x4933, r14	; 0x804933 <_ZL9clock_out+0x2>
    84ec:	f0 92 34 49 	sts	0x4934, r15	; 0x804934 <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    84f0:	68 94       	set
    84f2:	66 24       	eor	r6, r6
    84f4:	64 f8       	bld	r6, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    84f6:	99 24       	eor	r9, r9
    84f8:	93 94       	inc	r9
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    84fa:	43 c0       	rjmp	.+134    	; 0x8582 <si5351_set_freq+0x12e>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    84fc:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <_ZL17enabledClocksMask>
    8500:	82 60       	ori	r24, 0x02	; 2
    8502:	80 93 3d 49 	sts	0x493D, r24	; 0x80493d <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    8506:	80 95       	com	r24
    8508:	8a 6f       	ori	r24, 0xFA	; 250
    850a:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    850c:	41 e0       	ldi	r20, 0x01	; 1
    850e:	be 01       	movw	r22, r28
    8510:	61 5f       	subi	r22, 0xF1	; 241
    8512:	7f 4f       	sbci	r23, 0xFF	; 255
    8514:	83 e0       	ldi	r24, 0x03	; 3
    8516:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    851a:	18 2f       	mov	r17, r24
    851c:	81 11       	cpse	r24, r1
    851e:	e3 c0       	rjmp	.+454    	; 0x86e6 <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    8520:	c0 92 35 49 	sts	0x4935, r12	; 0x804935 <_ZL9clock_out+0x4>
    8524:	d0 92 36 49 	sts	0x4936, r13	; 0x804936 <_ZL9clock_out+0x5>
    8528:	e0 92 37 49 	sts	0x4937, r14	; 0x804937 <_ZL9clock_out+0x6>
    852c:	f0 92 38 49 	sts	0x4938, r15	; 0x804938 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    8530:	0f 2e       	mov	r0, r31
    8532:	f1 e1       	ldi	r31, 0x11	; 17
    8534:	6f 2e       	mov	r6, r31
    8536:	f0 2d       	mov	r31, r0
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    8538:	68 94       	set
    853a:	99 24       	eor	r9, r9
    853c:	91 f8       	bld	r9, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    853e:	21 c0       	rjmp	.+66     	; 0x8582 <si5351_set_freq+0x12e>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    8540:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <_ZL17enabledClocksMask>
    8544:	84 60       	ori	r24, 0x04	; 4
    8546:	80 93 3d 49 	sts	0x493D, r24	; 0x80493d <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    854a:	80 95       	com	r24
    854c:	8c 6f       	ori	r24, 0xFC	; 252
    854e:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    8550:	41 e0       	ldi	r20, 0x01	; 1
    8552:	be 01       	movw	r22, r28
    8554:	61 5f       	subi	r22, 0xF1	; 241
    8556:	7f 4f       	sbci	r23, 0xFF	; 255
    8558:	83 e0       	ldi	r24, 0x03	; 3
    855a:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    855e:	18 2f       	mov	r17, r24
    8560:	81 11       	cpse	r24, r1
    8562:	c1 c0       	rjmp	.+386    	; 0x86e6 <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    8564:	c0 92 39 49 	sts	0x4939, r12	; 0x804939 <_ZL9clock_out+0x8>
    8568:	d0 92 3a 49 	sts	0x493A, r13	; 0x80493a <_ZL9clock_out+0x9>
    856c:	e0 92 3b 49 	sts	0x493B, r14	; 0x80493b <_ZL9clock_out+0xa>
    8570:	f0 92 3c 49 	sts	0x493C, r15	; 0x80493c <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    8574:	0f 2e       	mov	r0, r31
    8576:	f2 e1       	ldi	r31, 0x12	; 18
    8578:	6f 2e       	mov	r6, r31
    857a:	f0 2d       	mov	r31, r0
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    857c:	68 94       	set
    857e:	99 24       	eor	r9, r9
    8580:	91 f8       	bld	r9, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    8582:	81 e0       	ldi	r24, 0x01	; 1
    8584:	98 16       	cp	r9, r24
    8586:	61 f0       	breq	.+24     	; 0x85a0 <si5351_set_freq+0x14c>
    8588:	80 91 3e 49 	lds	r24, 0x493E	; 0x80493e <_ZL8freqVCOB>
    858c:	90 91 3f 49 	lds	r25, 0x493F	; 0x80493f <_ZL8freqVCOB+0x1>
    8590:	a0 91 40 49 	lds	r26, 0x4940	; 0x804940 <_ZL8freqVCOB+0x2>
    8594:	b0 91 41 49 	lds	r27, 0x4941	; 0x804941 <_ZL8freqVCOB+0x3>
    8598:	89 2b       	or	r24, r25
    859a:	8a 2b       	or	r24, r26
    859c:	8b 2b       	or	r24, r27
    859e:	81 f4       	brne	.+32     	; 0x85c0 <si5351_set_freq+0x16c>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    85a0:	8e 01       	movw	r16, r28
    85a2:	02 5f       	subi	r16, 0xF2	; 242
    85a4:	1f 4f       	sbci	r17, 0xFF	; 255
    85a6:	9e 01       	movw	r18, r28
    85a8:	23 5f       	subi	r18, 0xF3	; 243
    85aa:	3f 4f       	sbci	r19, 0xFF	; 255
    85ac:	ae 01       	movw	r20, r28
    85ae:	4f 5f       	subi	r20, 0xFF	; 255
    85b0:	5f 4f       	sbci	r21, 0xFF	; 255
    85b2:	c7 01       	movw	r24, r14
    85b4:	b6 01       	movw	r22, r12
    85b6:	0e 94 6d 3d 	call	0x7ada	; 0x7ada <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    85ba:	1b 01       	movw	r2, r22
    85bc:	2c 01       	movw	r4, r24
    85be:	10 c0       	rjmp	.+32     	; 0x85e0 <si5351_set_freq+0x18c>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    85c0:	8e 01       	movw	r16, r28
    85c2:	02 5f       	subi	r16, 0xF2	; 242
    85c4:	1f 4f       	sbci	r17, 0xFF	; 255
    85c6:	9e 01       	movw	r18, r28
    85c8:	23 5f       	subi	r18, 0xF3	; 243
    85ca:	3f 4f       	sbci	r19, 0xFF	; 255
    85cc:	ae 01       	movw	r20, r28
    85ce:	4f 5f       	subi	r20, 0xFF	; 255
    85d0:	5f 4f       	sbci	r21, 0xFF	; 255
    85d2:	c7 01       	movw	r24, r14
    85d4:	b6 01       	movw	r22, r12
    85d6:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    85da:	21 2c       	mov	r2, r1
    85dc:	31 2c       	mov	r3, r1
    85de:	21 01       	movw	r4, r2
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    85e0:	69 2d       	mov	r22, r9
    85e2:	8b 2d       	mov	r24, r11
    85e4:	0e 94 1a 41 	call	0x8234	; 0x8234 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    85e8:	18 2f       	mov	r17, r24
    85ea:	81 11       	cpse	r24, r1
    85ec:	7c c0       	rjmp	.+248    	; 0x86e6 <si5351_set_freq+0x292>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    85ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    85f0:	ad 84       	ldd	r10, Y+13	; 0x0d
    85f2:	8f 93       	push	r24
    85f4:	81 2c       	mov	r8, r1
    85f6:	c9 80       	ldd	r12, Y+1	; 0x01
    85f8:	da 80       	ldd	r13, Y+2	; 0x02
    85fa:	eb 80       	ldd	r14, Y+3	; 0x03
    85fc:	fc 80       	ldd	r15, Y+4	; 0x04
    85fe:	0d 81       	ldd	r16, Y+5	; 0x05
    8600:	1e 81       	ldd	r17, Y+6	; 0x06
    8602:	2f 81       	ldd	r18, Y+7	; 0x07
    8604:	38 85       	ldd	r19, Y+8	; 0x08
    8606:	49 85       	ldd	r20, Y+9	; 0x09
    8608:	5a 85       	ldd	r21, Y+10	; 0x0a
    860a:	6b 85       	ldd	r22, Y+11	; 0x0b
    860c:	7c 85       	ldd	r23, Y+12	; 0x0c
    860e:	8b 2d       	mov	r24, r11
    8610:	0e 94 af 41 	call	0x835e	; 0x835e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    8614:	18 2f       	mov	r17, r24
    8616:	0f 90       	pop	r0
    8618:	81 11       	cpse	r24, r1
    861a:	65 c0       	rjmp	.+202    	; 0x86e6 <si5351_set_freq+0x292>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    861c:	21 14       	cp	r2, r1
    861e:	31 04       	cpc	r3, r1
    8620:	41 04       	cpc	r4, r1
    8622:	51 04       	cpc	r5, r1
    8624:	29 f0       	breq	.+10     	; 0x8630 <si5351_set_freq+0x1dc>
			{
				set_pll(freq_VCO, target_pll);
    8626:	49 2d       	mov	r20, r9
    8628:	c2 01       	movw	r24, r4
    862a:	b1 01       	movw	r22, r2
    862c:	0e 94 87 3f 	call	0x7f0e	; 0x7f0e <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    8630:	77 20       	and	r7, r7
    8632:	69 f0       	breq	.+26     	; 0x864e <si5351_set_freq+0x1fa>
		{
 			data[0] = enabledClocksMask;
    8634:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <_ZL17enabledClocksMask>
    8638:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    863a:	41 e0       	ldi	r20, 0x01	; 1
    863c:	be 01       	movw	r22, r28
    863e:	61 5f       	subi	r22, 0xF1	; 241
    8640:	7f 4f       	sbci	r23, 0xFF	; 255
    8642:	83 e0       	ldi	r24, 0x03	; 3
    8644:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    8648:	88 23       	and	r24, r24
    864a:	71 f0       	breq	.+28     	; 0x8668 <si5351_set_freq+0x214>
    864c:	45 c0       	rjmp	.+138    	; 0x86d8 <si5351_set_freq+0x284>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    864e:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <_ZL17enabledClocksMask>
    8652:	80 95       	com	r24
    8654:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    8656:	41 e0       	ldi	r20, 0x01	; 1
    8658:	be 01       	movw	r22, r28
    865a:	61 5f       	subi	r22, 0xF1	; 241
    865c:	7f 4f       	sbci	r23, 0xFF	; 255
    865e:	83 e0       	ldi	r24, 0x03	; 3
    8660:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    8664:	81 11       	cpse	r24, r1
    8666:	3a c0       	rjmp	.+116    	; 0x86dc <si5351_set_freq+0x288>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    8668:	81 e0       	ldi	r24, 0x01	; 1
    866a:	98 12       	cpse	r9, r24
    866c:	0b c0       	rjmp	.+22     	; 0x8684 <si5351_set_freq+0x230>
		{
 			data[0] = 0x4C;
    866e:	8c e4       	ldi	r24, 0x4C	; 76
    8670:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    8672:	41 e0       	ldi	r20, 0x01	; 1
    8674:	be 01       	movw	r22, r28
    8676:	61 5f       	subi	r22, 0xF1	; 241
    8678:	7f 4f       	sbci	r23, 0xFF	; 255
    867a:	86 2d       	mov	r24, r6
    867c:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    8680:	18 2f       	mov	r17, r24
    8682:	31 c0       	rjmp	.+98     	; 0x86e6 <si5351_set_freq+0x292>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    8684:	8d 85       	ldd	r24, Y+13	; 0x0d
    8686:	88 23       	and	r24, r24
    8688:	61 f0       	breq	.+24     	; 0x86a2 <si5351_set_freq+0x24e>
			{
 				data[0] = 0x6C;
    868a:	8c e6       	ldi	r24, 0x6C	; 108
    868c:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    868e:	41 e0       	ldi	r20, 0x01	; 1
    8690:	be 01       	movw	r22, r28
    8692:	61 5f       	subi	r22, 0xF1	; 241
    8694:	7f 4f       	sbci	r23, 0xFF	; 255
    8696:	86 2d       	mov	r24, r6
    8698:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    869c:	88 23       	and	r24, r24
    869e:	61 f0       	breq	.+24     	; 0x86b8 <si5351_set_freq+0x264>
    86a0:	1f c0       	rjmp	.+62     	; 0x86e0 <si5351_set_freq+0x28c>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    86a2:	8c e2       	ldi	r24, 0x2C	; 44
    86a4:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    86a6:	41 e0       	ldi	r20, 0x01	; 1
    86a8:	be 01       	movw	r22, r28
    86aa:	61 5f       	subi	r22, 0xF1	; 241
    86ac:	7f 4f       	sbci	r23, 0xFF	; 255
    86ae:	86 2d       	mov	r24, r6
    86b0:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_Z17si5351_write_bulkhPhh>
    86b4:	81 11       	cpse	r24, r1
    86b6:	16 c0       	rjmp	.+44     	; 0x86e4 <si5351_set_freq+0x290>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    86b8:	21 14       	cp	r2, r1
    86ba:	31 04       	cpc	r3, r1
    86bc:	41 04       	cpc	r4, r1
    86be:	51 04       	cpc	r5, r1
    86c0:	91 f0       	breq	.+36     	; 0x86e6 <si5351_set_freq+0x292>
			{
				freqVCOB = freq_VCO;
    86c2:	20 92 3e 49 	sts	0x493E, r2	; 0x80493e <_ZL8freqVCOB>
    86c6:	30 92 3f 49 	sts	0x493F, r3	; 0x80493f <_ZL8freqVCOB+0x1>
    86ca:	40 92 40 49 	sts	0x4940, r4	; 0x804940 <_ZL8freqVCOB+0x2>
    86ce:	50 92 41 49 	sts	0x4941, r5	; 0x804941 <_ZL8freqVCOB+0x3>
    86d2:	09 c0       	rjmp	.+18     	; 0x86e6 <si5351_set_freq+0x292>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    86d4:	11 e0       	ldi	r17, 0x01	; 1
    86d6:	07 c0       	rjmp	.+14     	; 0x86e6 <si5351_set_freq+0x292>
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    86d8:	18 2f       	mov	r17, r24
    86da:	05 c0       	rjmp	.+10     	; 0x86e6 <si5351_set_freq+0x292>
		else
		{
 			data[0] = ~enabledClocksMask;
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
			{
				return true;
    86dc:	18 2f       	mov	r17, r24
    86de:	03 c0       	rjmp	.+6      	; 0x86e6 <si5351_set_freq+0x292>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    86e0:	18 2f       	mov	r17, r24
    86e2:	01 c0       	rjmp	.+2      	; 0x86e6 <si5351_set_freq+0x292>
			else
			{
 				data[0] = 0x2C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    86e4:	18 2f       	mov	r17, r24
				freqVCOB = freq_VCO;
			}
		}

		return(false);
	}
    86e6:	81 2f       	mov	r24, r17
    86e8:	60 96       	adiw	r28, 0x10	; 16
    86ea:	cd bf       	out	0x3d, r28	; 61
    86ec:	de bf       	out	0x3e, r29	; 62
    86ee:	df 91       	pop	r29
    86f0:	cf 91       	pop	r28
    86f2:	1f 91       	pop	r17
    86f4:	0f 91       	pop	r16
    86f6:	ff 90       	pop	r15
    86f8:	ef 90       	pop	r14
    86fa:	df 90       	pop	r13
    86fc:	cf 90       	pop	r12
    86fe:	bf 90       	pop	r11
    8700:	af 90       	pop	r10
    8702:	9f 90       	pop	r9
    8704:	8f 90       	pop	r8
    8706:	7f 90       	pop	r7
    8708:	6f 90       	pop	r6
    870a:	5f 90       	pop	r5
    870c:	4f 90       	pop	r4
    870e:	3f 90       	pop	r3
    8710:	2f 90       	pop	r2
    8712:	08 95       	ret

00008714 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    8714:	80 e0       	ldi	r24, 0x00	; 0
    8716:	08 95       	ret

00008718 <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8718:	e0 e0       	ldi	r30, 0x00	; 0
    871a:	fb e0       	ldi	r31, 0x0B	; 11
    871c:	81 e0       	ldi	r24, 0x01	; 1
    871e:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    8720:	20 e4       	ldi	r18, 0x40	; 64
    8722:	3c e9       	ldi	r19, 0x9C	; 156
    8724:	24 87       	std	Z+12, r18	; 0x0c
    8726:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    8728:	93 e0       	ldi	r25, 0x03	; 3
    872a:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    872c:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    872e:	e0 e1       	ldi	r30, 0x10	; 16
    8730:	fb e0       	ldi	r31, 0x0B	; 11
    8732:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    8734:	40 ec       	ldi	r20, 0xC0	; 192
    8736:	5d e5       	ldi	r21, 0x5D	; 93
    8738:	44 87       	std	Z+12, r20	; 0x0c
    873a:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    873c:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    873e:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8740:	e0 e3       	ldi	r30, 0x30	; 48
    8742:	fb e0       	ldi	r31, 0x0B	; 11
    8744:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    8746:	24 87       	std	Z+12, r18	; 0x0c
    8748:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    874a:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    874c:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    874e:	80 e0       	ldi	r24, 0x00	; 0
    8750:	08 95       	ret

00008752 <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    8752:	0f 93       	push	r16
    8754:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    8756:	61 15       	cp	r22, r1
    8758:	71 05       	cpc	r23, r1
    875a:	81 05       	cpc	r24, r1
    875c:	91 05       	cpc	r25, r1
    875e:	09 f4       	brne	.+2      	; 0x8762 <util_delay_ms+0x10>
    8760:	67 c0       	rjmp	.+206    	; 0x8830 <util_delay_ms+0xde>
	{
		if(counting)
    8762:	20 91 46 49 	lds	r18, 0x4946	; 0x804946 <_ZZ13util_delay_msE8counting>
    8766:	22 23       	and	r18, r18
    8768:	f1 f1       	breq	.+124    	; 0x87e6 <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    876a:	00 91 47 49 	lds	r16, 0x4947	; 0x804947 <_ZL12g_ms_counter>
    876e:	10 91 48 49 	lds	r17, 0x4948	; 0x804948 <_ZL12g_ms_counter+0x1>
    8772:	20 91 49 49 	lds	r18, 0x4949	; 0x804949 <_ZL12g_ms_counter+0x2>
    8776:	30 91 4a 49 	lds	r19, 0x494A	; 0x80494a <_ZL12g_ms_counter+0x3>
    877a:	01 2b       	or	r16, r17
    877c:	02 2b       	or	r16, r18
    877e:	03 2b       	or	r16, r19
    8780:	71 f4       	brne	.+28     	; 0x879e <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8782:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    8786:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    878a:	10 92 42 49 	sts	0x4942, r1	; 0x804942 <_ZZ13util_delay_msE14countdownValue>
    878e:	10 92 43 49 	sts	0x4943, r1	; 0x804943 <_ZZ13util_delay_msE14countdownValue+0x1>
    8792:	10 92 44 49 	sts	0x4944, r1	; 0x804944 <_ZZ13util_delay_msE14countdownValue+0x2>
    8796:	10 92 45 49 	sts	0x4945, r1	; 0x804945 <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    879a:	80 e0       	ldi	r24, 0x00	; 0
    879c:	62 c0       	rjmp	.+196    	; 0x8862 <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    879e:	00 91 42 49 	lds	r16, 0x4942	; 0x804942 <_ZZ13util_delay_msE14countdownValue>
    87a2:	10 91 43 49 	lds	r17, 0x4943	; 0x804943 <_ZZ13util_delay_msE14countdownValue+0x1>
    87a6:	20 91 44 49 	lds	r18, 0x4944	; 0x804944 <_ZZ13util_delay_msE14countdownValue+0x2>
    87aa:	30 91 45 49 	lds	r19, 0x4945	; 0x804945 <_ZZ13util_delay_msE14countdownValue+0x3>
    87ae:	60 17       	cp	r22, r16
    87b0:	71 07       	cpc	r23, r17
    87b2:	82 07       	cpc	r24, r18
    87b4:	93 07       	cpc	r25, r19
    87b6:	09 f4       	brne	.+2      	; 0x87ba <util_delay_ms+0x68>
    87b8:	51 c0       	rjmp	.+162    	; 0x885c <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    87ba:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    87be:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    87c2:	60 93 42 49 	sts	0x4942, r22	; 0x804942 <_ZZ13util_delay_msE14countdownValue>
    87c6:	70 93 43 49 	sts	0x4943, r23	; 0x804943 <_ZZ13util_delay_msE14countdownValue+0x1>
    87ca:	80 93 44 49 	sts	0x4944, r24	; 0x804944 <_ZZ13util_delay_msE14countdownValue+0x2>
    87ce:	90 93 45 49 	sts	0x4945, r25	; 0x804945 <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    87d2:	60 93 47 49 	sts	0x4947, r22	; 0x804947 <_ZL12g_ms_counter>
    87d6:	70 93 48 49 	sts	0x4948, r23	; 0x804948 <_ZL12g_ms_counter+0x1>
    87da:	80 93 49 49 	sts	0x4949, r24	; 0x804949 <_ZL12g_ms_counter+0x2>
    87de:	90 93 4a 49 	sts	0x494A, r25	; 0x80494a <_ZL12g_ms_counter+0x3>
				return(false);
    87e2:	80 e0       	ldi	r24, 0x00	; 0
    87e4:	3e c0       	rjmp	.+124    	; 0x8862 <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    87e6:	00 91 42 49 	lds	r16, 0x4942	; 0x804942 <_ZZ13util_delay_msE14countdownValue>
    87ea:	10 91 43 49 	lds	r17, 0x4943	; 0x804943 <_ZZ13util_delay_msE14countdownValue+0x1>
    87ee:	20 91 44 49 	lds	r18, 0x4944	; 0x804944 <_ZZ13util_delay_msE14countdownValue+0x2>
    87f2:	30 91 45 49 	lds	r19, 0x4945	; 0x804945 <_ZZ13util_delay_msE14countdownValue+0x3>
    87f6:	60 17       	cp	r22, r16
    87f8:	71 07       	cpc	r23, r17
    87fa:	82 07       	cpc	r24, r18
    87fc:	93 07       	cpc	r25, r19
    87fe:	71 f1       	breq	.+92     	; 0x885c <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    8800:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    8804:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    8808:	60 93 42 49 	sts	0x4942, r22	; 0x804942 <_ZZ13util_delay_msE14countdownValue>
    880c:	70 93 43 49 	sts	0x4943, r23	; 0x804943 <_ZZ13util_delay_msE14countdownValue+0x1>
    8810:	80 93 44 49 	sts	0x4944, r24	; 0x804944 <_ZZ13util_delay_msE14countdownValue+0x2>
    8814:	90 93 45 49 	sts	0x4945, r25	; 0x804945 <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    8818:	60 93 47 49 	sts	0x4947, r22	; 0x804947 <_ZL12g_ms_counter>
    881c:	70 93 48 49 	sts	0x4948, r23	; 0x804948 <_ZL12g_ms_counter+0x1>
    8820:	80 93 49 49 	sts	0x4949, r24	; 0x804949 <_ZL12g_ms_counter+0x2>
    8824:	90 93 4a 49 	sts	0x494A, r25	; 0x80494a <_ZL12g_ms_counter+0x3>
			counting = true;
    8828:	81 e0       	ldi	r24, 0x01	; 1
    882a:	80 93 46 49 	sts	0x4946, r24	; 0x804946 <_ZZ13util_delay_msE8counting>
    882e:	16 c0       	rjmp	.+44     	; 0x885c <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8830:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    8834:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    8838:	10 92 42 49 	sts	0x4942, r1	; 0x804942 <_ZZ13util_delay_msE14countdownValue>
    883c:	10 92 43 49 	sts	0x4943, r1	; 0x804943 <_ZZ13util_delay_msE14countdownValue+0x1>
    8840:	10 92 44 49 	sts	0x4944, r1	; 0x804944 <_ZZ13util_delay_msE14countdownValue+0x2>
    8844:	10 92 45 49 	sts	0x4945, r1	; 0x804945 <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    8848:	10 92 47 49 	sts	0x4947, r1	; 0x804947 <_ZL12g_ms_counter>
    884c:	10 92 48 49 	sts	0x4948, r1	; 0x804948 <_ZL12g_ms_counter+0x1>
    8850:	10 92 49 49 	sts	0x4949, r1	; 0x804949 <_ZL12g_ms_counter+0x2>
    8854:	10 92 4a 49 	sts	0x494A, r1	; 0x80494a <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    8858:	80 e0       	ldi	r24, 0x00	; 0
    885a:	03 c0       	rjmp	.+6      	; 0x8862 <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    885c:	81 e0       	ldi	r24, 0x01	; 1
    885e:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    8862:	1f 91       	pop	r17
    8864:	0f 91       	pop	r16
    8866:	08 95       	ret

00008868 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    8868:	1f 92       	push	r1
    886a:	0f 92       	push	r0
    886c:	0f b6       	in	r0, 0x3f	; 63
    886e:	0f 92       	push	r0
    8870:	11 24       	eor	r1, r1
    8872:	8f 93       	push	r24
    8874:	9f 93       	push	r25
    8876:	af 93       	push	r26
    8878:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    887a:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    887e:	80 ff       	sbrs	r24, 0
    8880:	1d c0       	rjmp	.+58     	; 0x88bc <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    8882:	80 91 47 49 	lds	r24, 0x4947	; 0x804947 <_ZL12g_ms_counter>
    8886:	90 91 48 49 	lds	r25, 0x4948	; 0x804948 <_ZL12g_ms_counter+0x1>
    888a:	a0 91 49 49 	lds	r26, 0x4949	; 0x804949 <_ZL12g_ms_counter+0x2>
    888e:	b0 91 4a 49 	lds	r27, 0x494A	; 0x80494a <_ZL12g_ms_counter+0x3>
    8892:	00 97       	sbiw	r24, 0x00	; 0
    8894:	a1 05       	cpc	r26, r1
    8896:	b1 05       	cpc	r27, r1
    8898:	61 f0       	breq	.+24     	; 0x88b2 <__vector_13+0x4a>
		{
			g_ms_counter--;	
    889a:	01 97       	sbiw	r24, 0x01	; 1
    889c:	a1 09       	sbc	r26, r1
    889e:	b1 09       	sbc	r27, r1
    88a0:	80 93 47 49 	sts	0x4947, r24	; 0x804947 <_ZL12g_ms_counter>
    88a4:	90 93 48 49 	sts	0x4948, r25	; 0x804948 <_ZL12g_ms_counter+0x1>
    88a8:	a0 93 49 49 	sts	0x4949, r26	; 0x804949 <_ZL12g_ms_counter+0x2>
    88ac:	b0 93 4a 49 	sts	0x494A, r27	; 0x80494a <_ZL12g_ms_counter+0x3>
    88b0:	02 c0       	rjmp	.+4      	; 0x88b6 <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    88b2:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    88b6:	81 e0       	ldi	r24, 0x01	; 1
    88b8:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    88bc:	bf 91       	pop	r27
    88be:	af 91       	pop	r26
    88c0:	9f 91       	pop	r25
    88c2:	8f 91       	pop	r24
    88c4:	0f 90       	pop	r0
    88c6:	0f be       	out	0x3f, r0	; 63
    88c8:	0f 90       	pop	r0
    88ca:	1f 90       	pop	r1
    88cc:	18 95       	reti

000088ce <_Z14txSetFrequencyPmb>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
    88ce:	0f 93       	push	r16
    88d0:	1f 93       	push	r17
    88d2:	cf 93       	push	r28
    88d4:	df 93       	push	r29
    88d6:	fc 01       	movw	r30, r24
    88d8:	46 2f       	mov	r20, r22
		bool err = false;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    88da:	60 81       	ld	r22, Z
    88dc:	71 81       	ldd	r23, Z+1	; 0x01
    88de:	82 81       	ldd	r24, Z+2	; 0x02
    88e0:	93 81       	ldd	r25, Z+3	; 0x03
    88e2:	8b 01       	movw	r16, r22
    88e4:	9c 01       	movw	r18, r24
    88e6:	01 5e       	subi	r16, 0xE1	; 225
    88e8:	17 46       	sbci	r17, 0x67	; 103
    88ea:	25 43       	sbci	r18, 0x35	; 53
    88ec:	31 09       	sbc	r19, r1
    88ee:	0f 31       	cpi	r16, 0x1F	; 31
    88f0:	11 4a       	sbci	r17, 0xA1	; 161
    88f2:	27 40       	sbci	r18, 0x07	; 7
    88f4:	31 05       	cpc	r19, r1
    88f6:	a8 f4       	brcc	.+42     	; 0x8922 <_Z14txSetFrequencyPmb+0x54>
    88f8:	24 2f       	mov	r18, r20
    88fa:	ef 01       	movw	r28, r30
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
    88fc:	41 e0       	ldi	r20, 0x01	; 1
    88fe:	0e 94 2a 42 	call	0x8454	; 0x8454 <si5351_set_freq>
    8902:	81 11       	cpse	r24, r1
    8904:	10 c0       	rjmp	.+32     	; 0x8926 <_Z14txSetFrequencyPmb+0x58>
			{
				err = true; 
			}
			else
			{
				g_80m_frequency = *freq;
    8906:	88 81       	ld	r24, Y
    8908:	99 81       	ldd	r25, Y+1	; 0x01
    890a:	aa 81       	ldd	r26, Y+2	; 0x02
    890c:	bb 81       	ldd	r27, Y+3	; 0x03
    890e:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    8912:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    8916:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    891a:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
		bool err = false;
    891e:	80 e0       	ldi	r24, 0x00	; 0
    8920:	03 c0       	rjmp	.+6      	; 0x8928 <_Z14txSetFrequencyPmb+0x5a>
    8922:	80 e0       	ldi	r24, 0x00	; 0
    8924:	01 c0       	rjmp	.+2      	; 0x8928 <_Z14txSetFrequencyPmb+0x5a>

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
			{
				err = true; 
    8926:	81 e0       	ldi	r24, 0x01	; 1
				g_80m_frequency = *freq;
			}
		}

		return(err);
	}
    8928:	df 91       	pop	r29
    892a:	cf 91       	pop	r28
    892c:	1f 91       	pop	r17
    892e:	0f 91       	pop	r16
    8930:	08 95       	ret

00008932 <_Z14txGetFrequencyv>:

	Frequency_Hz txGetFrequency(void)
	{
		return( g_80m_frequency);
    8932:	60 91 2c 40 	lds	r22, 0x402C	; 0x80402c <g_80m_frequency>
    8936:	70 91 2d 40 	lds	r23, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    893a:	80 91 2e 40 	lds	r24, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    893e:	90 91 2f 40 	lds	r25, 0x402F	; 0x80402f <g_80m_frequency+0x3>
	}
    8942:	08 95       	ret

00008944 <_Z18powerToTransmitterb>:

	EC powerToTransmitter(bool on)
	{
		fet_driver(on);
    8944:	0e 94 09 29 	call	0x5212	; 0x5212 <_Z10fet_driverb>

		return(ERROR_CODE_NO_ERROR);
	}
    8948:	80 e0       	ldi	r24, 0x00	; 0
    894a:	08 95       	ret

0000894c <_Z14keyTransmitterb>:

	void keyTransmitter(bool on)
	{
		if(g_tx_initialized)
    894c:	90 91 4b 49 	lds	r25, 0x494B	; 0x80494b <_ZL16g_tx_initialized>
    8950:	99 23       	and	r25, r25
    8952:	c1 f0       	breq	.+48     	; 0x8984 <_Z14keyTransmitterb+0x38>
		{			
			if(on)
    8954:	88 23       	and	r24, r24
    8956:	71 f0       	breq	.+28     	; 0x8974 <_Z14keyTransmitterb+0x28>
			{
				if(!g_transmitter_keyed)
    8958:	80 91 4c 49 	lds	r24, 0x494C	; 0x80494c <_ZL19g_transmitter_keyed>
    895c:	81 11       	cpse	r24, r1
    895e:	12 c0       	rjmp	.+36     	; 0x8984 <_Z14keyTransmitterb+0x38>
				{
					if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED) == ERROR_CODE_NO_ERROR)
    8960:	61 e0       	ldi	r22, 0x01	; 1
    8962:	81 e0       	ldi	r24, 0x01	; 1
    8964:	0e 94 a0 40 	call	0x8140	; 0x8140 <si5351_clock_enable>
    8968:	81 11       	cpse	r24, r1
    896a:	0c c0       	rjmp	.+24     	; 0x8984 <_Z14keyTransmitterb+0x38>
					{
						g_transmitter_keyed = true;
    896c:	81 e0       	ldi	r24, 0x01	; 1
    896e:	80 93 4c 49 	sts	0x494C, r24	; 0x80494c <_ZL19g_transmitter_keyed>
    8972:	08 95       	ret
					}
				}
			}
			else
			{
				if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED) == ERROR_CODE_NO_ERROR)
    8974:	60 e0       	ldi	r22, 0x00	; 0
    8976:	81 e0       	ldi	r24, 0x01	; 1
    8978:	0e 94 a0 40 	call	0x8140	; 0x8140 <si5351_clock_enable>
    897c:	81 11       	cpse	r24, r1
    897e:	02 c0       	rjmp	.+4      	; 0x8984 <_Z14keyTransmitterb+0x38>
				{
					g_transmitter_keyed = false;
    8980:	10 92 4c 49 	sts	0x494C, r1	; 0x80494c <_ZL19g_transmitter_keyed>
    8984:	08 95       	ret

00008986 <_Z12txGetPowerMwv>:
		}
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
    8986:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    898a:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
	}
    898e:	08 95       	ret

00008990 <_Z15txSetParametersPjPb>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, bool* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, bool* enableDriverPwr) */
	{
    8990:	cf 93       	push	r28
    8992:	df 93       	push	r29
    8994:	cd b7       	in	r28, 0x3d	; 61
    8996:	de b7       	in	r29, 0x3e	; 62
    8998:	2b 97       	sbiw	r28, 0x0b	; 11
    899a:	cd bf       	out	0x3d, r28	; 61
    899c:	de bf       	out	0x3e, r29	; 62
    899e:	88 87       	std	Y+8, r24	; 0x08
    89a0:	99 87       	std	Y+9, r25	; 0x09
    89a2:	6a 87       	std	Y+10, r22	; 0x0a
    89a4:	7b 87       	std	Y+11, r23	; 0x0b
		bool err = false;
    89a6:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    89a8:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    89aa:	1b 82       	std	Y+3, r1	; 0x03
    89ac:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW != null)
    89ae:	88 85       	ldd	r24, Y+8	; 0x08
    89b0:	99 85       	ldd	r25, Y+9	; 0x09
    89b2:	89 2b       	or	r24, r25
    89b4:	09 f4       	brne	.+2      	; 0x89b8 <_Z15txSetParametersPjPb+0x28>
    89b6:	64 c0       	rjmp	.+200    	; 0x8a80 <_Z15txSetParametersPjPb+0xf0>
		{
			power = *power_mW;
    89b8:	88 85       	ldd	r24, Y+8	; 0x08
    89ba:	99 85       	ldd	r25, Y+9	; 0x09
    89bc:	fc 01       	movw	r30, r24
    89be:	80 81       	ld	r24, Z
    89c0:	91 81       	ldd	r25, Z+1	; 0x01
    89c2:	8b 83       	std	Y+3, r24	; 0x03
    89c4:	9c 83       	std	Y+4, r25	; 0x04

			if(power <= MAX_TX_POWER_80M_MW)
    89c6:	8b 81       	ldd	r24, Y+3	; 0x03
    89c8:	9c 81       	ldd	r25, Y+4	; 0x04
    89ca:	89 38       	cpi	r24, 0x89	; 137
    89cc:	93 41       	sbci	r25, 0x13	; 19
    89ce:	08 f0       	brcs	.+2      	; 0x89d2 <_Z15txSetParametersPjPb+0x42>
    89d0:	53 c0       	rjmp	.+166    	; 0x8a78 <_Z15txSetParametersPjPb+0xe8>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    89d2:	9e 01       	movw	r18, r28
    89d4:	29 5f       	subi	r18, 0xF9	; 249
    89d6:	3f 4f       	sbci	r19, 0xFF	; 255
    89d8:	ae 01       	movw	r20, r28
    89da:	4a 5f       	subi	r20, 0xFA	; 250
    89dc:	5f 4f       	sbci	r21, 0xFF	; 255
    89de:	be 01       	movw	r22, r28
    89e0:	6b 5f       	subi	r22, 0xFB	; 251
    89e2:	7f 4f       	sbci	r23, 0xFF	; 255
    89e4:	ce 01       	movw	r24, r28
    89e6:	03 96       	adiw	r24, 0x03	; 3
    89e8:	0e 94 9e 45 	call	0x8b3c	; 0x8b3c <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    89ec:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    89ee:	81 e0       	ldi	r24, 0x01	; 1
    89f0:	9a 81       	ldd	r25, Y+2	; 0x02
    89f2:	9f 3c       	cpi	r25, 0xCF	; 207
    89f4:	09 f0       	breq	.+2      	; 0x89f8 <_Z15txSetParametersPjPb+0x68>
    89f6:	80 e0       	ldi	r24, 0x00	; 0
    89f8:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    89fa:	8b 81       	ldd	r24, Y+3	; 0x03
    89fc:	9c 81       	ldd	r25, Y+4	; 0x04
    89fe:	21 e0       	ldi	r18, 0x01	; 1
    8a00:	89 2b       	or	r24, r25
    8a02:	09 f0       	breq	.+2      	; 0x8a06 <_Z15txSetParametersPjPb+0x76>
    8a04:	20 e0       	ldi	r18, 0x00	; 0
    8a06:	20 93 36 40 	sts	0x4036, r18	; 0x804036 <g_tx_power_is_zero>

				if(!err)
    8a0a:	99 81       	ldd	r25, Y+1	; 0x01
    8a0c:	81 e0       	ldi	r24, 0x01	; 1
    8a0e:	89 27       	eor	r24, r25
    8a10:	88 23       	and	r24, r24
    8a12:	51 f1       	breq	.+84     	; 0x8a68 <_Z15txSetParametersPjPb+0xd8>
				{
					g_80m_power_level_mW = power;
    8a14:	8b 81       	ldd	r24, Y+3	; 0x03
    8a16:	9c 81       	ldd	r25, Y+4	; 0x04
    8a18:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    8a1c:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    8a20:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <_Z18txIsAntennaForBandv>
    8a24:	88 23       	and	r24, r24
    8a26:	31 f0       	breq	.+12     	; 0x8a34 <_Z15txSetParametersPjPb+0xa4>
					{
						DAC0_setVal(drainVoltageDAC);
    8a28:	8d 81       	ldd	r24, Y+5	; 0x05
    8a2a:	88 2f       	mov	r24, r24
    8a2c:	90 e0       	ldi	r25, 0x00	; 0
    8a2e:	0e 94 42 2a 	call	0x5484	; 0x5484 <_Z11DAC0_setValj>
    8a32:	07 c0       	rjmp	.+14     	; 0x8a42 <_Z15txSetParametersPjPb+0xb2>
					}
					else
					{
						g_tx_power_is_zero = true;
    8a34:	81 e0       	ldi	r24, 0x01	; 1
    8a36:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>
						err = true;
    8a3a:	81 e0       	ldi	r24, 0x01	; 1
    8a3c:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    8a3e:	86 ef       	ldi	r24, 0xF6	; 246
    8a40:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || (drainVoltageDAC == 0))
    8a42:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    8a46:	88 23       	and	r24, r24
    8a48:	19 f4       	brne	.+6      	; 0x8a50 <_Z15txSetParametersPjPb+0xc0>
    8a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    8a4c:	88 23       	and	r24, r24
    8a4e:	11 f4       	brne	.+4      	; 0x8a54 <_Z15txSetParametersPjPb+0xc4>
    8a50:	81 e0       	ldi	r24, 0x01	; 1
    8a52:	01 c0       	rjmp	.+2      	; 0x8a56 <_Z15txSetParametersPjPb+0xc6>
    8a54:	80 e0       	ldi	r24, 0x00	; 0
    8a56:	88 23       	and	r24, r24
    8a58:	21 f0       	breq	.+8      	; 0x8a62 <_Z15txSetParametersPjPb+0xd2>
					{
						powerToTransmitter(OFF); /* Turn off FET driver */
    8a5a:	80 e0       	ldi	r24, 0x00	; 0
    8a5c:	0e 94 a2 44 	call	0x8944	; 0x8944 <_Z18powerToTransmitterb>
    8a60:	03 c0       	rjmp	.+6      	; 0x8a68 <_Z15txSetParametersPjPb+0xd8>
					}
					else
					{
						powerToTransmitter(ON); /* Turn on FET driver */
    8a62:	81 e0       	ldi	r24, 0x01	; 1
    8a64:	0e 94 a2 44 	call	0x8944	; 0x8944 <_Z18powerToTransmitterb>
					}
				}

				*power_mW = power;
    8a68:	2b 81       	ldd	r18, Y+3	; 0x03
    8a6a:	3c 81       	ldd	r19, Y+4	; 0x04
    8a6c:	88 85       	ldd	r24, Y+8	; 0x08
    8a6e:	99 85       	ldd	r25, Y+9	; 0x09
    8a70:	fc 01       	movw	r30, r24
    8a72:	20 83       	st	Z, r18
    8a74:	31 83       	std	Z+1, r19	; 0x01
    8a76:	04 c0       	rjmp	.+8      	; 0x8a80 <_Z15txSetParametersPjPb+0xf0>
			}
			else
			{
				err = true;
    8a78:	81 e0       	ldi	r24, 0x01	; 1
    8a7a:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8a7c:	85 ef       	ldi	r24, 0xF5	; 245
    8a7e:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    8a80:	99 81       	ldd	r25, Y+1	; 0x01
    8a82:	81 e0       	ldi	r24, 0x01	; 1
    8a84:	89 27       	eor	r24, r25
    8a86:	88 23       	and	r24, r24
    8a88:	51 f0       	breq	.+20     	; 0x8a9e <_Z15txSetParametersPjPb+0x10e>
		{
			if(enableDriverPwr != NULL)
    8a8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    8a8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    8a8e:	89 2b       	or	r24, r25
    8a90:	31 f0       	breq	.+12     	; 0x8a9e <_Z15txSetParametersPjPb+0x10e>
			{
				powerToTransmitter(*enableDriverPwr);
    8a92:	8a 85       	ldd	r24, Y+10	; 0x0a
    8a94:	9b 85       	ldd	r25, Y+11	; 0x0b
    8a96:	fc 01       	movw	r30, r24
    8a98:	80 81       	ld	r24, Z
    8a9a:	0e 94 a2 44 	call	0x8944	; 0x8944 <_Z18powerToTransmitterb>
			}
		}

		return(code);
    8a9e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    8aa0:	2b 96       	adiw	r28, 0x0b	; 11
    8aa2:	cd bf       	out	0x3d, r28	; 61
    8aa4:	de bf       	out	0x3e, r29	; 62
    8aa6:	df 91       	pop	r29
    8aa8:	cf 91       	pop	r28
    8aaa:	08 95       	ret

00008aac <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    8aac:	1f 93       	push	r17
    8aae:	cf 93       	push	r28
    8ab0:	df 93       	push	r29
    8ab2:	00 d0       	rcall	.+0      	; 0x8ab4 <_Z16init_transmitterv+0x8>
    8ab4:	cd b7       	in	r28, 0x3d	; 61
    8ab6:	de b7       	in	r29, 0x3e	; 62
		EC code;
		bool err;
		
		DAC0_init();
    8ab8:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z9DAC0_initv>

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    8abc:	40 e0       	ldi	r20, 0x00	; 0
    8abe:	50 e0       	ldi	r21, 0x00	; 0
    8ac0:	ba 01       	movw	r22, r20
    8ac2:	80 e4       	ldi	r24, 0x40	; 64
    8ac4:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <si5351_init>
    8ac8:	81 11       	cpse	r24, r1
    8aca:	2e c0       	rjmp	.+92     	; 0x8b28 <_Z16init_transmitterv+0x7c>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
		}

		if((code = txSetParameters(NULL, NULL)))
    8acc:	60 e0       	ldi	r22, 0x00	; 0
    8ace:	70 e0       	ldi	r23, 0x00	; 0
    8ad0:	80 e0       	ldi	r24, 0x00	; 0
    8ad2:	90 e0       	ldi	r25, 0x00	; 0
    8ad4:	0e 94 c8 44 	call	0x8990	; 0x8990 <_Z15txSetParametersPjPb>
    8ad8:	81 11       	cpse	r24, r1
    8ada:	2a c0       	rjmp	.+84     	; 0x8b30 <_Z16init_transmitterv+0x84>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    8adc:	63 e0       	ldi	r22, 0x03	; 3
    8ade:	81 e0       	ldi	r24, 0x01	; 1
    8ae0:	0e 94 df 40 	call	0x81be	; 0x81be <si5351_drive_strength>
    8ae4:	81 11       	cpse	r24, r1
    8ae6:	24 c0       	rjmp	.+72     	; 0x8b30 <_Z16init_transmitterv+0x84>
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8ae8:	60 e0       	ldi	r22, 0x00	; 0
    8aea:	81 e0       	ldi	r24, 0x01	; 1
    8aec:	0e 94 a0 40 	call	0x8140	; 0x8140 <si5351_clock_enable>
    8af0:	18 2f       	mov	r17, r24
    8af2:	81 11       	cpse	r24, r1
    8af4:	1b c0       	rjmp	.+54     	; 0x8b2c <_Z16init_transmitterv+0x80>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    8af6:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    8afa:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    8afe:	89 83       	std	Y+1, r24	; 0x01
    8b00:	9a 83       	std	Y+2, r25	; 0x02
		
		err = txSetFrequency((Frequency_Hz*)&g_80m_frequency, true);
    8b02:	61 e0       	ldi	r22, 0x01	; 1
    8b04:	8c e2       	ldi	r24, 0x2C	; 44
    8b06:	90 e4       	ldi	r25, 0x40	; 64
    8b08:	0e 94 67 44 	call	0x88ce	; 0x88ce <_Z14txSetFrequencyPmb>
		if(!err)
    8b0c:	81 11       	cpse	r24, r1
    8b0e:	0f c0       	rjmp	.+30     	; 0x8b2e <_Z16init_transmitterv+0x82>
		{
			code = txSetParameters(&pwr_mW, NULL);
    8b10:	60 e0       	ldi	r22, 0x00	; 0
    8b12:	70 e0       	ldi	r23, 0x00	; 0
    8b14:	ce 01       	movw	r24, r28
    8b16:	01 96       	adiw	r24, 0x01	; 1
    8b18:	0e 94 c8 44 	call	0x8990	; 0x8990 <_Z15txSetParametersPjPb>
			if(code == ERROR_CODE_NO_ERROR)
    8b1c:	81 11       	cpse	r24, r1
    8b1e:	08 c0       	rjmp	.+16     	; 0x8b30 <_Z16init_transmitterv+0x84>
			{
				g_tx_initialized = true;
    8b20:	91 e0       	ldi	r25, 0x01	; 1
    8b22:	90 93 4b 49 	sts	0x494B, r25	; 0x80494b <_ZL16g_tx_initialized>
    8b26:	04 c0       	rjmp	.+8      	; 0x8b30 <_Z16init_transmitterv+0x84>
		
		DAC0_init();

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
    8b28:	82 ed       	ldi	r24, 0xD2	; 210
    8b2a:	02 c0       	rjmp	.+4      	; 0x8b30 <_Z16init_transmitterv+0x84>
    8b2c:	01 c0       	rjmp	.+2      	; 0x8b30 <_Z16init_transmitterv+0x84>
		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8b2e:	81 2f       	mov	r24, r17
				g_tx_initialized = true;
			}
		}

		return( code);
	}
    8b30:	0f 90       	pop	r0
    8b32:	0f 90       	pop	r0
    8b34:	df 91       	pop	r29
    8b36:	cf 91       	pop	r28
    8b38:	1f 91       	pop	r17
    8b3a:	08 95       	ret

00008b3c <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    8b3c:	cf 93       	push	r28
    8b3e:	df 93       	push	r29
    8b40:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    8b42:	89 2b       	or	r24, r25
    8b44:	09 f4       	brne	.+2      	; 0x8b48 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    8b46:	b8 c0       	rjmp	.+368    	; 0x8cb8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    8b48:	ed 91       	ld	r30, X+
    8b4a:	fc 91       	ld	r31, X
    8b4c:	11 97       	sbiw	r26, 0x01	; 1
    8b4e:	e9 38       	cpi	r30, 0x89	; 137
    8b50:	83 e1       	ldi	r24, 0x13	; 19
    8b52:	f8 07       	cpc	r31, r24
    8b54:	14 f4       	brge	.+4      	; 0x8b5a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    8b56:	80 e0       	ldi	r24, 0x00	; 0
    8b58:	01 c0       	rjmp	.+2      	; 0x8b5c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8b5a:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    8b5c:	e9 38       	cpi	r30, 0x89	; 137
    8b5e:	93 e1       	ldi	r25, 0x13	; 19
    8b60:	f9 07       	cpc	r31, r25
    8b62:	2c f4       	brge	.+10     	; 0x8b6e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    8b64:	ff 23       	and	r31, r31
    8b66:	2c f4       	brge	.+10     	; 0x8b72 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8b68:	e0 e0       	ldi	r30, 0x00	; 0
    8b6a:	f0 e0       	ldi	r31, 0x00	; 0
    8b6c:	02 c0       	rjmp	.+4      	; 0x8b72 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8b6e:	e8 e8       	ldi	r30, 0x88	; 136
    8b70:	f3 e1       	ldi	r31, 0x13	; 19
    8b72:	ef 01       	movw	r28, r30
    8b74:	ed 93       	st	X+, r30
    8b76:	fc 93       	st	X, r31
    8b78:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    8b7a:	e5 30       	cpi	r30, 0x05	; 5
    8b7c:	f1 05       	cpc	r31, r1
    8b7e:	20 f4       	brcc	.+8      	; 0x8b88 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    8b80:	1d 92       	st	X+, r1
    8b82:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    8b84:	e0 e0       	ldi	r30, 0x00	; 0
    8b86:	8d c0       	rjmp	.+282    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    8b88:	e2 33       	cpi	r30, 0x32	; 50
    8b8a:	f1 05       	cpc	r31, r1
    8b8c:	30 f4       	brcc	.+12     	; 0x8b9a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    8b8e:	ea e0       	ldi	r30, 0x0A	; 10
    8b90:	f0 e0       	ldi	r31, 0x00	; 0
    8b92:	ed 93       	st	X+, r30
    8b94:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    8b96:	e1 e0       	ldi	r30, 0x01	; 1
    8b98:	84 c0       	rjmp	.+264    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    8b9a:	e6 39       	cpi	r30, 0x96	; 150
    8b9c:	f1 05       	cpc	r31, r1
    8b9e:	30 f4       	brcc	.+12     	; 0x8bac <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    8ba0:	e4 e6       	ldi	r30, 0x64	; 100
    8ba2:	f0 e0       	ldi	r31, 0x00	; 0
    8ba4:	ed 93       	st	X+, r30
    8ba6:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    8ba8:	e2 e0       	ldi	r30, 0x02	; 2
    8baa:	7b c0       	rjmp	.+246    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    8bac:	ea 3f       	cpi	r30, 0xFA	; 250
    8bae:	f1 05       	cpc	r31, r1
    8bb0:	30 f4       	brcc	.+12     	; 0x8bbe <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    8bb2:	e8 ec       	ldi	r30, 0xC8	; 200
    8bb4:	f0 e0       	ldi	r31, 0x00	; 0
    8bb6:	ed 93       	st	X+, r30
    8bb8:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    8bba:	e3 e0       	ldi	r30, 0x03	; 3
    8bbc:	72 c0       	rjmp	.+228    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    8bbe:	ce 35       	cpi	r28, 0x5E	; 94
    8bc0:	e1 e0       	ldi	r30, 0x01	; 1
    8bc2:	de 07       	cpc	r29, r30
    8bc4:	30 f4       	brcc	.+12     	; 0x8bd2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    8bc6:	ec e2       	ldi	r30, 0x2C	; 44
    8bc8:	f1 e0       	ldi	r31, 0x01	; 1
    8bca:	ed 93       	st	X+, r30
    8bcc:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    8bce:	e4 e0       	ldi	r30, 0x04	; 4
    8bd0:	68 c0       	rjmp	.+208    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    8bd2:	c2 3c       	cpi	r28, 0xC2	; 194
    8bd4:	f1 e0       	ldi	r31, 0x01	; 1
    8bd6:	df 07       	cpc	r29, r31
    8bd8:	30 f4       	brcc	.+12     	; 0x8be6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    8bda:	e0 e9       	ldi	r30, 0x90	; 144
    8bdc:	f1 e0       	ldi	r31, 0x01	; 1
    8bde:	ed 93       	st	X+, r30
    8be0:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    8be2:	e5 e0       	ldi	r30, 0x05	; 5
    8be4:	5e c0       	rjmp	.+188    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    8be6:	c6 32       	cpi	r28, 0x26	; 38
    8be8:	92 e0       	ldi	r25, 0x02	; 2
    8bea:	d9 07       	cpc	r29, r25
    8bec:	30 f4       	brcc	.+12     	; 0x8bfa <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    8bee:	e4 ef       	ldi	r30, 0xF4	; 244
    8bf0:	f1 e0       	ldi	r31, 0x01	; 1
    8bf2:	ed 93       	st	X+, r30
    8bf4:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    8bf6:	e6 e0       	ldi	r30, 0x06	; 6
    8bf8:	54 c0       	rjmp	.+168    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    8bfa:	ca 38       	cpi	r28, 0x8A	; 138
    8bfc:	e2 e0       	ldi	r30, 0x02	; 2
    8bfe:	de 07       	cpc	r29, r30
    8c00:	30 f4       	brcc	.+12     	; 0x8c0e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    8c02:	e8 e5       	ldi	r30, 0x58	; 88
    8c04:	f2 e0       	ldi	r31, 0x02	; 2
    8c06:	ed 93       	st	X+, r30
    8c08:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    8c0a:	e7 e0       	ldi	r30, 0x07	; 7
    8c0c:	4a c0       	rjmp	.+148    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    8c0e:	c4 38       	cpi	r28, 0x84	; 132
    8c10:	f3 e0       	ldi	r31, 0x03	; 3
    8c12:	df 07       	cpc	r29, r31
    8c14:	30 f4       	brcc	.+12     	; 0x8c22 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    8c16:	e0 e2       	ldi	r30, 0x20	; 32
    8c18:	f3 e0       	ldi	r31, 0x03	; 3
    8c1a:	ed 93       	st	X+, r30
    8c1c:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    8c1e:	e8 e0       	ldi	r30, 0x08	; 8
    8c20:	40 c0       	rjmp	.+128    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    8c22:	c2 3e       	cpi	r28, 0xE2	; 226
    8c24:	94 e0       	ldi	r25, 0x04	; 4
    8c26:	d9 07       	cpc	r29, r25
    8c28:	30 f4       	brcc	.+12     	; 0x8c36 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    8c2a:	e8 ee       	ldi	r30, 0xE8	; 232
    8c2c:	f3 e0       	ldi	r31, 0x03	; 3
    8c2e:	ed 93       	st	X+, r30
    8c30:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    8c32:	e9 e0       	ldi	r30, 0x09	; 9
    8c34:	36 c0       	rjmp	.+108    	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    8c36:	c6 3d       	cpi	r28, 0xD6	; 214
    8c38:	e6 e0       	ldi	r30, 0x06	; 6
    8c3a:	de 07       	cpc	r29, r30
    8c3c:	30 f4       	brcc	.+12     	; 0x8c4a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    8c3e:	ec ed       	ldi	r30, 0xDC	; 220
    8c40:	f5 e0       	ldi	r31, 0x05	; 5
    8c42:	ed 93       	st	X+, r30
    8c44:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    8c46:	ea e0       	ldi	r30, 0x0A	; 10
    8c48:	2c c0       	rjmp	.+88     	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    8c4a:	ca 3c       	cpi	r28, 0xCA	; 202
    8c4c:	f8 e0       	ldi	r31, 0x08	; 8
    8c4e:	df 07       	cpc	r29, r31
    8c50:	30 f4       	brcc	.+12     	; 0x8c5e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    8c52:	e0 ed       	ldi	r30, 0xD0	; 208
    8c54:	f7 e0       	ldi	r31, 0x07	; 7
    8c56:	ed 93       	st	X+, r30
    8c58:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    8c5a:	eb e0       	ldi	r30, 0x0B	; 11
    8c5c:	22 c0       	rjmp	.+68     	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    8c5e:	ce 3b       	cpi	r28, 0xBE	; 190
    8c60:	9a e0       	ldi	r25, 0x0A	; 10
    8c62:	d9 07       	cpc	r29, r25
    8c64:	30 f4       	brcc	.+12     	; 0x8c72 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    8c66:	e4 ec       	ldi	r30, 0xC4	; 196
    8c68:	f9 e0       	ldi	r31, 0x09	; 9
    8c6a:	ed 93       	st	X+, r30
    8c6c:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    8c6e:	ec e0       	ldi	r30, 0x0C	; 12
    8c70:	18 c0       	rjmp	.+48     	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    8c72:	cc 3a       	cpi	r28, 0xAC	; 172
    8c74:	ed e0       	ldi	r30, 0x0D	; 13
    8c76:	de 07       	cpc	r29, r30
    8c78:	30 f4       	brcc	.+12     	; 0x8c86 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    8c7a:	e8 eb       	ldi	r30, 0xB8	; 184
    8c7c:	fb e0       	ldi	r31, 0x0B	; 11
    8c7e:	ed 93       	st	X+, r30
    8c80:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    8c82:	ed e0       	ldi	r30, 0x0D	; 13
    8c84:	0e c0       	rjmp	.+28     	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    8c86:	c4 39       	cpi	r28, 0x94	; 148
    8c88:	d1 41       	sbci	r29, 0x11	; 17
    8c8a:	30 f4       	brcc	.+12     	; 0x8c98 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    8c8c:	e0 ea       	ldi	r30, 0xA0	; 160
    8c8e:	ff e0       	ldi	r31, 0x0F	; 15
    8c90:	ed 93       	st	X+, r30
    8c92:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    8c94:	ee e0       	ldi	r30, 0x0E	; 14
    8c96:	05 c0       	rjmp	.+10     	; 0x8ca2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    8c98:	e8 e8       	ldi	r30, 0x88	; 136
    8c9a:	f3 e1       	ldi	r31, 0x13	; 19
    8c9c:	ed 93       	st	X+, r30
    8c9e:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    8ca0:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    8ca2:	f0 e0       	ldi	r31, 0x00	; 0
    8ca4:	e9 5c       	subi	r30, 0xC9	; 201
    8ca6:	ff 4b       	sbci	r31, 0xBF	; 191
    8ca8:	90 81       	ld	r25, Z
    8caa:	fb 01       	movw	r30, r22
    8cac:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    8cae:	fa 01       	movw	r30, r20
    8cb0:	10 82       	st	Z, r1
	*modLevelLow = 0;
    8cb2:	f9 01       	movw	r30, r18
    8cb4:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    8cb6:	01 c0       	rjmp	.+2      	; 0x8cba <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    8cb8:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    8cba:	df 91       	pop	r29
    8cbc:	cf 91       	pop	r28
    8cbe:	08 95       	ret

00008cc0 <_Z18txIsAntennaForBandv>:

/**
 */
bool __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    8cc0:	cf 93       	push	r28
    8cc2:	df 93       	push	r29
    8cc4:	1f 92       	push	r1
    8cc6:	cd b7       	in	r28, 0x3d	; 61
    8cc8:	de b7       	in	r29, 0x3e	; 62
	bool result = false;
    8cca:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    8ccc:	80 91 df 45 	lds	r24, 0x45DF	; 0x8045df <g_antenna_connect_state>
    8cd0:	88 2f       	mov	r24, r24
    8cd2:	90 e0       	ldi	r25, 0x00	; 0
    8cd4:	02 97       	sbiw	r24, 0x02	; 2
    8cd6:	09 f0       	breq	.+2      	; 0x8cda <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    8cd8:	03 c0       	rjmp	.+6      	; 0x8ce0 <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = true;
    8cda:	81 e0       	ldi	r24, 0x01	; 1
    8cdc:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    8cde:	00 00       	nop

		}
		break;
	}

	return( result);
    8ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
    8ce2:	0f 90       	pop	r0
    8ce4:	df 91       	pop	r29
    8ce6:	cf 91       	pop	r28
    8ce8:	08 95       	ret

00008cea <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_enable_rx()
{
	USART4.CTRLB |= USART_RXEN_bm;
    8cea:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    8cee:	08 95       	ret

00008cf0 <USART1_init>:
    8cf0:	0e 94 e0 49 	call	0x93c0	; 0x93c0 <__floatunsisf>
    8cf4:	20 e0       	ldi	r18, 0x00	; 0
    8cf6:	30 e0       	ldi	r19, 0x00	; 0
    8cf8:	40 e8       	ldi	r20, 0x80	; 128
    8cfa:	51 e4       	ldi	r21, 0x41	; 65
    8cfc:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <__mulsf3>
    8d00:	9b 01       	movw	r18, r22
    8d02:	ac 01       	movw	r20, r24
    8d04:	60 e0       	ldi	r22, 0x00	; 0
    8d06:	74 e2       	ldi	r23, 0x24	; 36
    8d08:	84 e7       	ldi	r24, 0x74	; 116
    8d0a:	9d e4       	ldi	r25, 0x4D	; 77
    8d0c:	0e 94 38 49 	call	0x9270	; 0x9270 <__divsf3>
    8d10:	20 e0       	ldi	r18, 0x00	; 0
    8d12:	30 e0       	ldi	r19, 0x00	; 0
    8d14:	40 e0       	ldi	r20, 0x00	; 0
    8d16:	5f e3       	ldi	r21, 0x3F	; 63
    8d18:	0e 94 b0 48 	call	0x9160	; 0x9160 <__addsf3>
    8d1c:	0e 94 b1 49 	call	0x9362	; 0x9362 <__fixunssfsi>
    8d20:	e0 e2       	ldi	r30, 0x20	; 32
    8d22:	f8 e0       	ldi	r31, 0x08	; 8
    8d24:	60 87       	std	Z+8, r22	; 0x08
    8d26:	71 87       	std	Z+9, r23	; 0x09
    8d28:	80 e8       	ldi	r24, 0x80	; 128
    8d2a:	85 83       	std	Z+5, r24	; 0x05
    8d2c:	80 ec       	ldi	r24, 0xC0	; 192
    8d2e:	86 83       	std	Z+6, r24	; 0x06
    8d30:	80 e0       	ldi	r24, 0x00	; 0
    8d32:	08 95       	ret

00008d34 <USART1_enable_tx>:
    8d34:	e0 e2       	ldi	r30, 0x20	; 32
    8d36:	f8 e0       	ldi	r31, 0x08	; 8
    8d38:	86 81       	ldd	r24, Z+6	; 0x06
    8d3a:	80 64       	ori	r24, 0x40	; 64
    8d3c:	86 83       	std	Z+6, r24	; 0x06
    8d3e:	85 81       	ldd	r24, Z+5	; 0x05
    8d40:	80 62       	ori	r24, 0x20	; 32
    8d42:	85 83       	std	Z+5, r24	; 0x05
    8d44:	08 95       	ret

00008d46 <USART1_disable>:
    8d46:	e0 e2       	ldi	r30, 0x20	; 32
    8d48:	f8 e0       	ldi	r31, 0x08	; 8
    8d4a:	86 81       	ldd	r24, Z+6	; 0x06
    8d4c:	8f 73       	andi	r24, 0x3F	; 63
    8d4e:	86 83       	std	Z+6, r24	; 0x06
    8d50:	08 95       	ret

00008d52 <USART1_get_data>:
    8d52:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    8d56:	08 95       	ret

00008d58 <USART4_init>:
    8d58:	0e 94 e0 49 	call	0x93c0	; 0x93c0 <__floatunsisf>
    8d5c:	20 e0       	ldi	r18, 0x00	; 0
    8d5e:	30 e0       	ldi	r19, 0x00	; 0
    8d60:	40 e8       	ldi	r20, 0x80	; 128
    8d62:	51 e4       	ldi	r21, 0x41	; 65
    8d64:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <__mulsf3>
    8d68:	9b 01       	movw	r18, r22
    8d6a:	ac 01       	movw	r20, r24
    8d6c:	60 e0       	ldi	r22, 0x00	; 0
    8d6e:	74 e2       	ldi	r23, 0x24	; 36
    8d70:	84 e7       	ldi	r24, 0x74	; 116
    8d72:	9d e4       	ldi	r25, 0x4D	; 77
    8d74:	0e 94 38 49 	call	0x9270	; 0x9270 <__divsf3>
    8d78:	20 e0       	ldi	r18, 0x00	; 0
    8d7a:	30 e0       	ldi	r19, 0x00	; 0
    8d7c:	40 e0       	ldi	r20, 0x00	; 0
    8d7e:	5f e3       	ldi	r21, 0x3F	; 63
    8d80:	0e 94 b0 48 	call	0x9160	; 0x9160 <__addsf3>
    8d84:	0e 94 b1 49 	call	0x9362	; 0x9362 <__fixunssfsi>
    8d88:	e0 e8       	ldi	r30, 0x80	; 128
    8d8a:	f8 e0       	ldi	r31, 0x08	; 8
    8d8c:	60 87       	std	Z+8, r22	; 0x08
    8d8e:	71 87       	std	Z+9, r23	; 0x09
    8d90:	80 e8       	ldi	r24, 0x80	; 128
    8d92:	85 83       	std	Z+5, r24	; 0x05
    8d94:	80 ec       	ldi	r24, 0xC0	; 192
    8d96:	86 83       	std	Z+6, r24	; 0x06
    8d98:	80 e0       	ldi	r24, 0x00	; 0
    8d9a:	08 95       	ret

00008d9c <USART4_enable_tx>:
 *
 * \return Nothing
 */
void USART4_enable_tx()
{
	USART4.CTRLB |= USART_TXEN_bm;
    8d9c:	e0 e8       	ldi	r30, 0x80	; 128
    8d9e:	f8 e0       	ldi	r31, 0x08	; 8
    8da0:	86 81       	ldd	r24, Z+6	; 0x06
    8da2:	80 64       	ori	r24, 0x40	; 64
    8da4:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLA |= 1 << USART_DREIE_bp; /* Transmit Data Ready Interrupt Enable: enable */
    8da6:	85 81       	ldd	r24, Z+5	; 0x05
    8da8:	80 62       	ori	r24, 0x20	; 32
    8daa:	85 83       	std	Z+5, r24	; 0x05
    8dac:	08 95       	ret

00008dae <USART4_disable>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    8dae:	e0 e8       	ldi	r30, 0x80	; 128
    8db0:	f8 e0       	ldi	r31, 0x08	; 8
    8db2:	86 81       	ldd	r24, Z+6	; 0x06
    8db4:	8f 73       	andi	r24, 0x3F	; 63
    8db6:	86 83       	std	Z+6, r24	; 0x06
    8db8:	08 95       	ret

00008dba <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    8dba:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    8dbe:	08 95       	ret

00008dc0 <_Z7timeDifmm>:
    (ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    ((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
  }

  return result;
}
    8dc0:	26 17       	cp	r18, r22
    8dc2:	37 07       	cpc	r19, r23
    8dc4:	48 07       	cpc	r20, r24
    8dc6:	59 07       	cpc	r21, r25
    8dc8:	28 f4       	brcc	.+10     	; 0x8dd4 <_Z7timeDifmm+0x14>
    8dca:	62 1b       	sub	r22, r18
    8dcc:	73 0b       	sbc	r23, r19
    8dce:	84 0b       	sbc	r24, r20
    8dd0:	95 0b       	sbc	r25, r21
    8dd2:	08 95       	ret
    8dd4:	62 1b       	sub	r22, r18
    8dd6:	73 0b       	sbc	r23, r19
    8dd8:	84 0b       	sbc	r24, r20
    8dda:	95 0b       	sbc	r25, r21
    8ddc:	08 95       	ret

00008dde <_Z11only_digitsPc>:

/** 
 * Checks a string to see if it contains only numerical characters
 */
bool only_digits(char *s)
{
    8dde:	fc 01       	movw	r30, r24
	while(*s)
    8de0:	20 81       	ld	r18, Z
    8de2:	22 23       	and	r18, r18
    8de4:	49 f0       	breq	.+18     	; 0x8df8 <_Z11only_digitsPc+0x1a>
	{
		if(isdigit(*s++) == 0)
    8de6:	31 96       	adiw	r30, 0x01	; 1
    8de8:	30 e0       	ldi	r19, 0x00	; 0
    8dea:	20 53       	subi	r18, 0x30	; 48
    8dec:	31 09       	sbc	r19, r1
    8dee:	2a 30       	cpi	r18, 0x0A	; 10
    8df0:	31 05       	cpc	r19, r1
    8df2:	b0 f3       	brcs	.-20     	; 0x8de0 <_Z11only_digitsPc+0x2>
		{
			return( false);
    8df4:	80 e0       	ldi	r24, 0x00	; 0
    8df6:	08 95       	ret
		}
	}

	return( true);
    8df8:	81 e0       	ldi	r24, 0x01	; 1
}
    8dfa:	08 95       	ret

00008dfc <_Z15frequencyStringPcm>:
 * result = pointer to a character sting to hold the frequency string
 * freq = the frequency value to be represented as a string
 * Returns 1 if an error is detected
 */
bool frequencyString(char* result, uint32_t freq)
{
    8dfc:	8f 92       	push	r8
    8dfe:	9f 92       	push	r9
    8e00:	af 92       	push	r10
    8e02:	bf 92       	push	r11
    8e04:	cf 92       	push	r12
    8e06:	df 92       	push	r13
    8e08:	ef 92       	push	r14
    8e0a:	ff 92       	push	r15
    8e0c:	cf 93       	push	r28
    8e0e:	df 93       	push	r29
	bool failure = true;
	
	if(!result)
    8e10:	00 97       	sbiw	r24, 0x00	; 0
    8e12:	09 f4       	brne	.+2      	; 0x8e16 <_Z15frequencyStringPcm+0x1a>
    8e14:	63 c0       	rjmp	.+198    	; 0x8edc <_Z15frequencyStringPcm+0xe0>
	{
		return(failure);
	}
	
	if((freq > 3500000) && (freq < 4000000)) // Accept only a Hz value to be expressed in kHz
    8e16:	6a 01       	movw	r12, r20
    8e18:	7b 01       	movw	r14, r22
    8e1a:	21 ee       	ldi	r18, 0xE1	; 225
    8e1c:	c2 1a       	sub	r12, r18
    8e1e:	27 e6       	ldi	r18, 0x67	; 103
    8e20:	d2 0a       	sbc	r13, r18
    8e22:	25 e3       	ldi	r18, 0x35	; 53
    8e24:	e2 0a       	sbc	r14, r18
    8e26:	f1 08       	sbc	r15, r1
    8e28:	2f e1       	ldi	r18, 0x1F	; 31
    8e2a:	c2 16       	cp	r12, r18
    8e2c:	21 ea       	ldi	r18, 0xA1	; 161
    8e2e:	d2 06       	cpc	r13, r18
    8e30:	27 e0       	ldi	r18, 0x07	; 7
    8e32:	e2 06       	cpc	r14, r18
    8e34:	f1 04       	cpc	r15, r1
    8e36:	08 f0       	brcs	.+2      	; 0x8e3a <_Z15frequencyStringPcm+0x3e>
    8e38:	53 c0       	rjmp	.+166    	; 0x8ee0 <_Z15frequencyStringPcm+0xe4>
    8e3a:	6a 01       	movw	r12, r20
    8e3c:	7b 01       	movw	r14, r22
    8e3e:	ec 01       	movw	r28, r24
	{
		uint32_t frac = (freq % 1000)/100;
    8e40:	cb 01       	movw	r24, r22
    8e42:	ba 01       	movw	r22, r20
    8e44:	28 ee       	ldi	r18, 0xE8	; 232
    8e46:	33 e0       	ldi	r19, 0x03	; 3
    8e48:	40 e0       	ldi	r20, 0x00	; 0
    8e4a:	50 e0       	ldi	r21, 0x00	; 0
    8e4c:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    8e50:	24 e6       	ldi	r18, 0x64	; 100
    8e52:	30 e0       	ldi	r19, 0x00	; 0
    8e54:	40 e0       	ldi	r20, 0x00	; 0
    8e56:	50 e0       	ldi	r21, 0x00	; 0
    8e58:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    8e5c:	49 01       	movw	r8, r18
    8e5e:	5a 01       	movw	r10, r20
		
		if(frac)
    8e60:	23 2b       	or	r18, r19
    8e62:	24 2b       	or	r18, r20
    8e64:	25 2b       	or	r18, r21
    8e66:	f9 f0       	breq	.+62     	; 0x8ea6 <_Z15frequencyStringPcm+0xaa>
		{
			sprintf(result, "%lu.%1lu kHz", freq/1000, frac);
    8e68:	c7 01       	movw	r24, r14
    8e6a:	b6 01       	movw	r22, r12
    8e6c:	28 ee       	ldi	r18, 0xE8	; 232
    8e6e:	33 e0       	ldi	r19, 0x03	; 3
    8e70:	40 e0       	ldi	r20, 0x00	; 0
    8e72:	50 e0       	ldi	r21, 0x00	; 0
    8e74:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    8e78:	bf 92       	push	r11
    8e7a:	af 92       	push	r10
    8e7c:	9f 92       	push	r9
    8e7e:	8f 92       	push	r8
    8e80:	5f 93       	push	r21
    8e82:	4f 93       	push	r20
    8e84:	3f 93       	push	r19
    8e86:	2f 93       	push	r18
    8e88:	89 ec       	ldi	r24, 0xC9	; 201
    8e8a:	94 e4       	ldi	r25, 0x44	; 68
    8e8c:	9f 93       	push	r25
    8e8e:	8f 93       	push	r24
    8e90:	df 93       	push	r29
    8e92:	cf 93       	push	r28
    8e94:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    8e98:	8d b7       	in	r24, 0x3d	; 61
    8e9a:	9e b7       	in	r25, 0x3e	; 62
    8e9c:	0c 96       	adiw	r24, 0x0c	; 12
    8e9e:	8d bf       	out	0x3d, r24	; 61
    8ea0:	9e bf       	out	0x3e, r25	; 62
		else
		{
			sprintf(result, "%lu.0 kHz", freq/1000);
		}
		
		failure = false;
    8ea2:	80 e0       	ldi	r24, 0x00	; 0
    8ea4:	1e c0       	rjmp	.+60     	; 0x8ee2 <_Z15frequencyStringPcm+0xe6>
		{
			sprintf(result, "%lu.%1lu kHz", freq/1000, frac);
		}
		else
		{
			sprintf(result, "%lu.0 kHz", freq/1000);
    8ea6:	c7 01       	movw	r24, r14
    8ea8:	b6 01       	movw	r22, r12
    8eaa:	28 ee       	ldi	r18, 0xE8	; 232
    8eac:	33 e0       	ldi	r19, 0x03	; 3
    8eae:	40 e0       	ldi	r20, 0x00	; 0
    8eb0:	50 e0       	ldi	r21, 0x00	; 0
    8eb2:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    8eb6:	5f 93       	push	r21
    8eb8:	4f 93       	push	r20
    8eba:	3f 93       	push	r19
    8ebc:	2f 93       	push	r18
    8ebe:	86 ed       	ldi	r24, 0xD6	; 214
    8ec0:	94 e4       	ldi	r25, 0x44	; 68
    8ec2:	9f 93       	push	r25
    8ec4:	8f 93       	push	r24
    8ec6:	df 93       	push	r29
    8ec8:	cf 93       	push	r28
    8eca:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    8ece:	8d b7       	in	r24, 0x3d	; 61
    8ed0:	9e b7       	in	r25, 0x3e	; 62
    8ed2:	08 96       	adiw	r24, 0x08	; 8
    8ed4:	8d bf       	out	0x3d, r24	; 61
    8ed6:	9e bf       	out	0x3e, r25	; 62
		}
		
		failure = false;
    8ed8:	80 e0       	ldi	r24, 0x00	; 0
    8eda:	03 c0       	rjmp	.+6      	; 0x8ee2 <_Z15frequencyStringPcm+0xe6>
{
	bool failure = true;
	
	if(!result)
	{
		return(failure);
    8edc:	81 e0       	ldi	r24, 0x01	; 1
    8ede:	01 c0       	rjmp	.+2      	; 0x8ee2 <_Z15frequencyStringPcm+0xe6>
 * freq = the frequency value to be represented as a string
 * Returns 1 if an error is detected
 */
bool frequencyString(char* result, uint32_t freq)
{
	bool failure = true;
    8ee0:	81 e0       	ldi	r24, 0x01	; 1
		
		failure = false;
	}
	
	return(failure);	
}
    8ee2:	df 91       	pop	r29
    8ee4:	cf 91       	pop	r28
    8ee6:	ff 90       	pop	r15
    8ee8:	ef 90       	pop	r14
    8eea:	df 90       	pop	r13
    8eec:	cf 90       	pop	r12
    8eee:	bf 90       	pop	r11
    8ef0:	af 90       	pop	r10
    8ef2:	9f 90       	pop	r9
    8ef4:	8f 90       	pop	r8
    8ef6:	08 95       	ret

00008ef8 <_Z12frequencyValPcPm>:
 * str = pointer to a string containing the frequency string
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
    8ef8:	4f 92       	push	r4
    8efa:	5f 92       	push	r5
    8efc:	6f 92       	push	r6
    8efe:	7f 92       	push	r7
    8f00:	bf 92       	push	r11
    8f02:	cf 92       	push	r12
    8f04:	df 92       	push	r13
    8f06:	ef 92       	push	r14
    8f08:	ff 92       	push	r15
    8f0a:	0f 93       	push	r16
    8f0c:	1f 93       	push	r17
    8f0e:	cf 93       	push	r28
    8f10:	df 93       	push	r29
	bool failure = true;
	
	if(!str)
    8f12:	00 97       	sbiw	r24, 0x00	; 0
    8f14:	09 f4       	brne	.+2      	; 0x8f18 <_Z12frequencyValPcPm+0x20>
    8f16:	12 c1       	rjmp	.+548    	; 0x913c <_Z12frequencyValPcPm+0x244>
    8f18:	7b 01       	movw	r14, r22
    8f1a:	6c 01       	movw	r12, r24
	{
		return(failure);
	}
	
	int decimal = '.';
	char* decimalLocation = strchr(str, decimal);
    8f1c:	6e e2       	ldi	r22, 0x2E	; 46
    8f1e:	70 e0       	ldi	r23, 0x00	; 0
    8f20:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <strchr>
	Frequency_Hz temp;
	
	if(decimalLocation) // Assume Hz or kHz
    8f24:	89 2b       	or	r24, r25
    8f26:	09 f4       	brne	.+2      	; 0x8f2a <_Z12frequencyValPcPm+0x32>
    8f28:	a2 c0       	rjmp	.+324    	; 0x906e <_Z12frequencyValPcPm+0x176>
	{
		float f = atof(str);
    8f2a:	c6 01       	movw	r24, r12
    8f2c:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <atof>
    8f30:	06 2f       	mov	r16, r22
    8f32:	17 2f       	mov	r17, r23
    8f34:	c8 2f       	mov	r28, r24
    8f36:	d9 2f       	mov	r29, r25
		
		if((f > 3.5) && (f < 4.0))
    8f38:	20 e0       	ldi	r18, 0x00	; 0
    8f3a:	30 e0       	ldi	r19, 0x00	; 0
    8f3c:	40 e6       	ldi	r20, 0x60	; 96
    8f3e:	50 e4       	ldi	r21, 0x40	; 64
    8f40:	0e 94 d3 4a 	call	0x95a6	; 0x95a6 <__gesf2>
    8f44:	18 16       	cp	r1, r24
    8f46:	e4 f4       	brge	.+56     	; 0x8f80 <_Z12frequencyValPcPm+0x88>
    8f48:	20 e0       	ldi	r18, 0x00	; 0
    8f4a:	30 e0       	ldi	r19, 0x00	; 0
    8f4c:	40 e8       	ldi	r20, 0x80	; 128
    8f4e:	50 e4       	ldi	r21, 0x40	; 64
    8f50:	60 2f       	mov	r22, r16
    8f52:	71 2f       	mov	r23, r17
    8f54:	8c 2f       	mov	r24, r28
    8f56:	9d 2f       	mov	r25, r29
    8f58:	0e 94 33 49 	call	0x9266	; 0x9266 <__cmpsf2>
    8f5c:	88 23       	and	r24, r24
    8f5e:	84 f4       	brge	.+32     	; 0x8f80 <_Z12frequencyValPcPm+0x88>
		{
			f *= 1000000.;
    8f60:	20 e0       	ldi	r18, 0x00	; 0
    8f62:	34 e2       	ldi	r19, 0x24	; 36
    8f64:	44 e7       	ldi	r20, 0x74	; 116
    8f66:	59 e4       	ldi	r21, 0x49	; 73
    8f68:	60 2f       	mov	r22, r16
    8f6a:	71 2f       	mov	r23, r17
    8f6c:	8c 2f       	mov	r24, r28
    8f6e:	9d 2f       	mov	r25, r29
    8f70:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <__mulsf3>
    8f74:	06 2f       	mov	r16, r22
    8f76:	17 2f       	mov	r17, r23
    8f78:	c8 2f       	mov	r28, r24
    8f7a:	d9 2f       	mov	r29, r25
			failure = false;
    8f7c:	b1 2c       	mov	r11, r1
    8f7e:	47 c0       	rjmp	.+142    	; 0x900e <_Z12frequencyValPcPm+0x116>
		}
		else if((f > 3500.) && (f < 4000.))
    8f80:	20 e0       	ldi	r18, 0x00	; 0
    8f82:	30 ec       	ldi	r19, 0xC0	; 192
    8f84:	4a e5       	ldi	r20, 0x5A	; 90
    8f86:	55 e4       	ldi	r21, 0x45	; 69
    8f88:	60 2f       	mov	r22, r16
    8f8a:	71 2f       	mov	r23, r17
    8f8c:	8c 2f       	mov	r24, r28
    8f8e:	9d 2f       	mov	r25, r29
    8f90:	0e 94 d3 4a 	call	0x95a6	; 0x95a6 <__gesf2>
    8f94:	18 16       	cp	r1, r24
    8f96:	e4 f4       	brge	.+56     	; 0x8fd0 <_Z12frequencyValPcPm+0xd8>
    8f98:	20 e0       	ldi	r18, 0x00	; 0
    8f9a:	30 e0       	ldi	r19, 0x00	; 0
    8f9c:	4a e7       	ldi	r20, 0x7A	; 122
    8f9e:	55 e4       	ldi	r21, 0x45	; 69
    8fa0:	60 2f       	mov	r22, r16
    8fa2:	71 2f       	mov	r23, r17
    8fa4:	8c 2f       	mov	r24, r28
    8fa6:	9d 2f       	mov	r25, r29
    8fa8:	0e 94 33 49 	call	0x9266	; 0x9266 <__cmpsf2>
    8fac:	88 23       	and	r24, r24
    8fae:	84 f4       	brge	.+32     	; 0x8fd0 <_Z12frequencyValPcPm+0xd8>
		{
			f *= 1000.;
    8fb0:	20 e0       	ldi	r18, 0x00	; 0
    8fb2:	30 e0       	ldi	r19, 0x00	; 0
    8fb4:	4a e7       	ldi	r20, 0x7A	; 122
    8fb6:	54 e4       	ldi	r21, 0x44	; 68
    8fb8:	60 2f       	mov	r22, r16
    8fba:	71 2f       	mov	r23, r17
    8fbc:	8c 2f       	mov	r24, r28
    8fbe:	9d 2f       	mov	r25, r29
    8fc0:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <__mulsf3>
    8fc4:	06 2f       	mov	r16, r22
    8fc6:	17 2f       	mov	r17, r23
    8fc8:	c8 2f       	mov	r28, r24
    8fca:	d9 2f       	mov	r29, r25
			failure = false;
    8fcc:	b1 2c       	mov	r11, r1
    8fce:	1f c0       	rjmp	.+62     	; 0x900e <_Z12frequencyValPcPm+0x116>
		}
		else if((f > 3500000.) && (f < 4000000.))
    8fd0:	20 e8       	ldi	r18, 0x80	; 128
    8fd2:	3f e9       	ldi	r19, 0x9F	; 159
    8fd4:	45 e5       	ldi	r20, 0x55	; 85
    8fd6:	5a e4       	ldi	r21, 0x4A	; 74
    8fd8:	60 2f       	mov	r22, r16
    8fda:	71 2f       	mov	r23, r17
    8fdc:	8c 2f       	mov	r24, r28
    8fde:	9d 2f       	mov	r25, r29
    8fe0:	0e 94 d3 4a 	call	0x95a6	; 0x95a6 <__gesf2>
    8fe4:	18 16       	cp	r1, r24
    8fe6:	7c f4       	brge	.+30     	; 0x9006 <_Z12frequencyValPcPm+0x10e>
    8fe8:	20 e0       	ldi	r18, 0x00	; 0
    8fea:	34 e2       	ldi	r19, 0x24	; 36
    8fec:	44 e7       	ldi	r20, 0x74	; 116
    8fee:	5a e4       	ldi	r21, 0x4A	; 74
    8ff0:	60 2f       	mov	r22, r16
    8ff2:	71 2f       	mov	r23, r17
    8ff4:	8c 2f       	mov	r24, r28
    8ff6:	9d 2f       	mov	r25, r29
    8ff8:	0e 94 33 49 	call	0x9266	; 0x9266 <__cmpsf2>
    8ffc:	88 23       	and	r24, r24
    8ffe:	34 f0       	brlt	.+12     	; 0x900c <_Z12frequencyValPcPm+0x114>
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
	bool failure = true;
    9000:	bb 24       	eor	r11, r11
    9002:	b3 94       	inc	r11
    9004:	04 c0       	rjmp	.+8      	; 0x900e <_Z12frequencyValPcPm+0x116>
    9006:	bb 24       	eor	r11, r11
    9008:	b3 94       	inc	r11
    900a:	01 c0       	rjmp	.+2      	; 0x900e <_Z12frequencyValPcPm+0x116>
			f *= 1000.;
			failure = false;
		}
		else if((f > 3500000.) && (f < 4000000.))
		{
			failure = false;
    900c:	b1 2c       	mov	r11, r1
		}
		
		if(!failure)
    900e:	b1 10       	cpse	r11, r1
    9010:	97 c0       	rjmp	.+302    	; 0x9140 <_Z12frequencyValPcPm+0x248>
		{
			temp = (Frequency_Hz)ceilf(f);
    9012:	60 2f       	mov	r22, r16
    9014:	71 2f       	mov	r23, r17
    9016:	8c 2f       	mov	r24, r28
    9018:	9d 2f       	mov	r25, r29
    901a:	0e 94 1c 49 	call	0x9238	; 0x9238 <ceil>
    901e:	0e 94 b1 49 	call	0x9362	; 0x9362 <__fixunssfsi>
    9022:	2b 01       	movw	r4, r22
    9024:	3c 01       	movw	r6, r24
			temp = temp - (temp % 100);
    9026:	24 e6       	ldi	r18, 0x64	; 100
    9028:	30 e0       	ldi	r19, 0x00	; 0
    902a:	40 e0       	ldi	r20, 0x00	; 0
    902c:	50 e0       	ldi	r21, 0x00	; 0
    902e:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    9032:	46 1a       	sub	r4, r22
    9034:	57 0a       	sbc	r5, r23
    9036:	68 0a       	sbc	r6, r24
    9038:	79 0a       	sbc	r7, r25
			if(result) *result = temp;
    903a:	e1 14       	cp	r14, r1
    903c:	f1 04       	cpc	r15, r1
    903e:	29 f0       	breq	.+10     	; 0x904a <_Z12frequencyValPcPm+0x152>
    9040:	f7 01       	movw	r30, r14
    9042:	40 82       	st	Z, r4
    9044:	51 82       	std	Z+1, r5	; 0x01
    9046:	62 82       	std	Z+2, r6	; 0x02
    9048:	73 82       	std	Z+3, r7	; 0x03
			sprintf(str, "%4.1f kHz", (double)f);
    904a:	df 93       	push	r29
    904c:	cf 93       	push	r28
    904e:	1f 93       	push	r17
    9050:	0f 93       	push	r16
    9052:	80 ee       	ldi	r24, 0xE0	; 224
    9054:	94 e4       	ldi	r25, 0x44	; 68
    9056:	9f 93       	push	r25
    9058:	8f 93       	push	r24
    905a:	df 92       	push	r13
    905c:	cf 92       	push	r12
    905e:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    9062:	8d b7       	in	r24, 0x3d	; 61
    9064:	9e b7       	in	r25, 0x3e	; 62
    9066:	08 96       	adiw	r24, 0x08	; 8
    9068:	8d bf       	out	0x3d, r24	; 61
    906a:	9e bf       	out	0x3e, r25	; 62
    906c:	69 c0       	rjmp	.+210    	; 0x9140 <_Z12frequencyValPcPm+0x248>
		}
	}
	else
	{
		Frequency_Hz f = (Frequency_Hz)atol(str);
    906e:	c6 01       	movw	r24, r12
    9070:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <atol>
    9074:	2b 01       	movw	r4, r22
    9076:	3c 01       	movw	r6, r24
		
		if((f > 3500) && (f < 4000))
    9078:	dc 01       	movw	r26, r24
    907a:	cb 01       	movw	r24, r22
    907c:	8d 5a       	subi	r24, 0xAD	; 173
    907e:	9d 40       	sbci	r25, 0x0D	; 13
    9080:	a1 09       	sbc	r26, r1
    9082:	b1 09       	sbc	r27, r1
    9084:	83 3f       	cpi	r24, 0xF3	; 243
    9086:	91 40       	sbci	r25, 0x01	; 1
    9088:	a1 05       	cpc	r26, r1
    908a:	b1 05       	cpc	r27, r1
    908c:	50 f4       	brcc	.+20     	; 0x90a2 <_Z12frequencyValPcPm+0x1aa>
		{
			f *= 1000;
    908e:	a8 ee       	ldi	r26, 0xE8	; 232
    9090:	b3 e0       	ldi	r27, 0x03	; 3
    9092:	a3 01       	movw	r20, r6
    9094:	92 01       	movw	r18, r4
    9096:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <__muluhisi3>
    909a:	2b 01       	movw	r4, r22
    909c:	3c 01       	movw	r6, r24
			failure = false;
    909e:	b1 2c       	mov	r11, r1
    90a0:	1b c0       	rjmp	.+54     	; 0x90d8 <_Z12frequencyValPcPm+0x1e0>
		}
		else if((f > 3500000) && (f < 4000000))
    90a2:	d3 01       	movw	r26, r6
    90a4:	c2 01       	movw	r24, r4
    90a6:	81 5e       	subi	r24, 0xE1	; 225
    90a8:	97 46       	sbci	r25, 0x67	; 103
    90aa:	a5 43       	sbci	r26, 0x35	; 53
    90ac:	b1 09       	sbc	r27, r1
    90ae:	8f 31       	cpi	r24, 0x1F	; 31
    90b0:	91 4a       	sbci	r25, 0xA1	; 161
    90b2:	a7 40       	sbci	r26, 0x07	; 7
    90b4:	b1 05       	cpc	r27, r1
    90b6:	70 f4       	brcc	.+28     	; 0x90d4 <_Z12frequencyValPcPm+0x1dc>
		{
			f = f - (f % 100);
    90b8:	c3 01       	movw	r24, r6
    90ba:	b2 01       	movw	r22, r4
    90bc:	24 e6       	ldi	r18, 0x64	; 100
    90be:	30 e0       	ldi	r19, 0x00	; 0
    90c0:	40 e0       	ldi	r20, 0x00	; 0
    90c2:	50 e0       	ldi	r21, 0x00	; 0
    90c4:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    90c8:	46 1a       	sub	r4, r22
    90ca:	57 0a       	sbc	r5, r23
    90cc:	68 0a       	sbc	r6, r24
    90ce:	79 0a       	sbc	r7, r25
			failure = false;
    90d0:	b1 2c       	mov	r11, r1
    90d2:	02 c0       	rjmp	.+4      	; 0x90d8 <_Z12frequencyValPcPm+0x1e0>
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
	bool failure = true;
    90d4:	bb 24       	eor	r11, r11
    90d6:	b3 94       	inc	r11
		{
			f = f - (f % 100);
			failure = false;
		}
		
		if(!failure)
    90d8:	b1 10       	cpse	r11, r1
    90da:	32 c0       	rjmp	.+100    	; 0x9140 <_Z12frequencyValPcPm+0x248>
		{
			if(result) *result = f;
    90dc:	e1 14       	cp	r14, r1
    90de:	f1 04       	cpc	r15, r1
    90e0:	29 f0       	breq	.+10     	; 0x90ec <_Z12frequencyValPcPm+0x1f4>
    90e2:	f7 01       	movw	r30, r14
    90e4:	40 82       	st	Z, r4
    90e6:	51 82       	std	Z+1, r5	; 0x01
    90e8:	62 82       	std	Z+2, r6	; 0x02
    90ea:	73 82       	std	Z+3, r7	; 0x03
			sprintf(str, "%lu.%1lu kHz", f/1000, (f % 1000)/100);
    90ec:	c3 01       	movw	r24, r6
    90ee:	b2 01       	movw	r22, r4
    90f0:	28 ee       	ldi	r18, 0xE8	; 232
    90f2:	33 e0       	ldi	r19, 0x03	; 3
    90f4:	40 e0       	ldi	r20, 0x00	; 0
    90f6:	50 e0       	ldi	r21, 0x00	; 0
    90f8:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    90fc:	c2 2f       	mov	r28, r18
    90fe:	d3 2f       	mov	r29, r19
    9100:	14 2f       	mov	r17, r20
    9102:	05 2f       	mov	r16, r21
    9104:	24 e6       	ldi	r18, 0x64	; 100
    9106:	30 e0       	ldi	r19, 0x00	; 0
    9108:	40 e0       	ldi	r20, 0x00	; 0
    910a:	50 e0       	ldi	r21, 0x00	; 0
    910c:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    9110:	5f 93       	push	r21
    9112:	4f 93       	push	r20
    9114:	3f 93       	push	r19
    9116:	2f 93       	push	r18
    9118:	0f 93       	push	r16
    911a:	1f 93       	push	r17
    911c:	df 93       	push	r29
    911e:	cf 93       	push	r28
    9120:	89 ec       	ldi	r24, 0xC9	; 201
    9122:	94 e4       	ldi	r25, 0x44	; 68
    9124:	9f 93       	push	r25
    9126:	8f 93       	push	r24
    9128:	df 92       	push	r13
    912a:	cf 92       	push	r12
    912c:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <sprintf>
    9130:	8d b7       	in	r24, 0x3d	; 61
    9132:	9e b7       	in	r25, 0x3e	; 62
    9134:	0c 96       	adiw	r24, 0x0c	; 12
    9136:	8d bf       	out	0x3d, r24	; 61
    9138:	9e bf       	out	0x3e, r25	; 62
    913a:	02 c0       	rjmp	.+4      	; 0x9140 <_Z12frequencyValPcPm+0x248>
{
	bool failure = true;
	
	if(!str)
	{
		return(failure);
    913c:	bb 24       	eor	r11, r11
    913e:	b3 94       	inc	r11
			sprintf(str, "%lu.%1lu kHz", f/1000, (f % 1000)/100);
		}
	}
	
	return(failure);	
}
    9140:	8b 2d       	mov	r24, r11
    9142:	df 91       	pop	r29
    9144:	cf 91       	pop	r28
    9146:	1f 91       	pop	r17
    9148:	0f 91       	pop	r16
    914a:	ff 90       	pop	r15
    914c:	ef 90       	pop	r14
    914e:	df 90       	pop	r13
    9150:	cf 90       	pop	r12
    9152:	bf 90       	pop	r11
    9154:	7f 90       	pop	r7
    9156:	6f 90       	pop	r6
    9158:	5f 90       	pop	r5
    915a:	4f 90       	pop	r4
    915c:	08 95       	ret

0000915e <__subsf3>:
    915e:	50 58       	subi	r21, 0x80	; 128

00009160 <__addsf3>:
    9160:	bb 27       	eor	r27, r27
    9162:	aa 27       	eor	r26, r26
    9164:	0e 94 c7 48 	call	0x918e	; 0x918e <__addsf3x>
    9168:	0c 94 81 4a 	jmp	0x9502	; 0x9502 <__fp_round>
    916c:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <__fp_pscA>
    9170:	38 f0       	brcs	.+14     	; 0x9180 <__addsf3+0x20>
    9172:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <__fp_pscB>
    9176:	20 f0       	brcs	.+8      	; 0x9180 <__addsf3+0x20>
    9178:	39 f4       	brne	.+14     	; 0x9188 <__addsf3+0x28>
    917a:	9f 3f       	cpi	r25, 0xFF	; 255
    917c:	19 f4       	brne	.+6      	; 0x9184 <__addsf3+0x24>
    917e:	26 f4       	brtc	.+8      	; 0x9188 <__addsf3+0x28>
    9180:	0c 94 70 4a 	jmp	0x94e0	; 0x94e0 <__fp_nan>
    9184:	0e f4       	brtc	.+2      	; 0x9188 <__addsf3+0x28>
    9186:	e0 95       	com	r30
    9188:	e7 fb       	bst	r30, 7
    918a:	0c 94 41 4a 	jmp	0x9482	; 0x9482 <__fp_inf>

0000918e <__addsf3x>:
    918e:	e9 2f       	mov	r30, r25
    9190:	0e 94 92 4a 	call	0x9524	; 0x9524 <__fp_split3>
    9194:	58 f3       	brcs	.-42     	; 0x916c <__addsf3+0xc>
    9196:	ba 17       	cp	r27, r26
    9198:	62 07       	cpc	r22, r18
    919a:	73 07       	cpc	r23, r19
    919c:	84 07       	cpc	r24, r20
    919e:	95 07       	cpc	r25, r21
    91a0:	20 f0       	brcs	.+8      	; 0x91aa <__addsf3x+0x1c>
    91a2:	79 f4       	brne	.+30     	; 0x91c2 <__addsf3x+0x34>
    91a4:	a6 f5       	brtc	.+104    	; 0x920e <__addsf3x+0x80>
    91a6:	0c 94 cc 4a 	jmp	0x9598	; 0x9598 <__fp_zero>
    91aa:	0e f4       	brtc	.+2      	; 0x91ae <__addsf3x+0x20>
    91ac:	e0 95       	com	r30
    91ae:	0b 2e       	mov	r0, r27
    91b0:	ba 2f       	mov	r27, r26
    91b2:	a0 2d       	mov	r26, r0
    91b4:	0b 01       	movw	r0, r22
    91b6:	b9 01       	movw	r22, r18
    91b8:	90 01       	movw	r18, r0
    91ba:	0c 01       	movw	r0, r24
    91bc:	ca 01       	movw	r24, r20
    91be:	a0 01       	movw	r20, r0
    91c0:	11 24       	eor	r1, r1
    91c2:	ff 27       	eor	r31, r31
    91c4:	59 1b       	sub	r21, r25
    91c6:	99 f0       	breq	.+38     	; 0x91ee <__addsf3x+0x60>
    91c8:	59 3f       	cpi	r21, 0xF9	; 249
    91ca:	50 f4       	brcc	.+20     	; 0x91e0 <__addsf3x+0x52>
    91cc:	50 3e       	cpi	r21, 0xE0	; 224
    91ce:	68 f1       	brcs	.+90     	; 0x922a <__addsf3x+0x9c>
    91d0:	1a 16       	cp	r1, r26
    91d2:	f0 40       	sbci	r31, 0x00	; 0
    91d4:	a2 2f       	mov	r26, r18
    91d6:	23 2f       	mov	r18, r19
    91d8:	34 2f       	mov	r19, r20
    91da:	44 27       	eor	r20, r20
    91dc:	58 5f       	subi	r21, 0xF8	; 248
    91de:	f3 cf       	rjmp	.-26     	; 0x91c6 <__addsf3x+0x38>
    91e0:	46 95       	lsr	r20
    91e2:	37 95       	ror	r19
    91e4:	27 95       	ror	r18
    91e6:	a7 95       	ror	r26
    91e8:	f0 40       	sbci	r31, 0x00	; 0
    91ea:	53 95       	inc	r21
    91ec:	c9 f7       	brne	.-14     	; 0x91e0 <__addsf3x+0x52>
    91ee:	7e f4       	brtc	.+30     	; 0x920e <__addsf3x+0x80>
    91f0:	1f 16       	cp	r1, r31
    91f2:	ba 0b       	sbc	r27, r26
    91f4:	62 0b       	sbc	r22, r18
    91f6:	73 0b       	sbc	r23, r19
    91f8:	84 0b       	sbc	r24, r20
    91fa:	ba f0       	brmi	.+46     	; 0x922a <__addsf3x+0x9c>
    91fc:	91 50       	subi	r25, 0x01	; 1
    91fe:	a1 f0       	breq	.+40     	; 0x9228 <__addsf3x+0x9a>
    9200:	ff 0f       	add	r31, r31
    9202:	bb 1f       	adc	r27, r27
    9204:	66 1f       	adc	r22, r22
    9206:	77 1f       	adc	r23, r23
    9208:	88 1f       	adc	r24, r24
    920a:	c2 f7       	brpl	.-16     	; 0x91fc <__addsf3x+0x6e>
    920c:	0e c0       	rjmp	.+28     	; 0x922a <__addsf3x+0x9c>
    920e:	ba 0f       	add	r27, r26
    9210:	62 1f       	adc	r22, r18
    9212:	73 1f       	adc	r23, r19
    9214:	84 1f       	adc	r24, r20
    9216:	48 f4       	brcc	.+18     	; 0x922a <__addsf3x+0x9c>
    9218:	87 95       	ror	r24
    921a:	77 95       	ror	r23
    921c:	67 95       	ror	r22
    921e:	b7 95       	ror	r27
    9220:	f7 95       	ror	r31
    9222:	9e 3f       	cpi	r25, 0xFE	; 254
    9224:	08 f0       	brcs	.+2      	; 0x9228 <__addsf3x+0x9a>
    9226:	b0 cf       	rjmp	.-160    	; 0x9188 <__addsf3+0x28>
    9228:	93 95       	inc	r25
    922a:	88 0f       	add	r24, r24
    922c:	08 f0       	brcs	.+2      	; 0x9230 <__addsf3x+0xa2>
    922e:	99 27       	eor	r25, r25
    9230:	ee 0f       	add	r30, r30
    9232:	97 95       	ror	r25
    9234:	87 95       	ror	r24
    9236:	08 95       	ret

00009238 <ceil>:
    9238:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__fp_trunc>
    923c:	90 f0       	brcs	.+36     	; 0x9262 <ceil+0x2a>
    923e:	9f 37       	cpi	r25, 0x7F	; 127
    9240:	48 f4       	brcc	.+18     	; 0x9254 <ceil+0x1c>
    9242:	91 11       	cpse	r25, r1
    9244:	16 f4       	brtc	.+4      	; 0x924a <ceil+0x12>
    9246:	0c 94 cd 4a 	jmp	0x959a	; 0x959a <__fp_szero>
    924a:	60 e0       	ldi	r22, 0x00	; 0
    924c:	70 e0       	ldi	r23, 0x00	; 0
    924e:	80 e8       	ldi	r24, 0x80	; 128
    9250:	9f e3       	ldi	r25, 0x3F	; 63
    9252:	08 95       	ret
    9254:	26 f0       	brts	.+8      	; 0x925e <ceil+0x26>
    9256:	1b 16       	cp	r1, r27
    9258:	61 1d       	adc	r22, r1
    925a:	71 1d       	adc	r23, r1
    925c:	81 1d       	adc	r24, r1
    925e:	0c 94 47 4a 	jmp	0x948e	; 0x948e <__fp_mintl>
    9262:	0c 94 62 4a 	jmp	0x94c4	; 0x94c4 <__fp_mpack>

00009266 <__cmpsf2>:
    9266:	0e 94 1d 4a 	call	0x943a	; 0x943a <__fp_cmp>
    926a:	08 f4       	brcc	.+2      	; 0x926e <__cmpsf2+0x8>
    926c:	81 e0       	ldi	r24, 0x01	; 1
    926e:	08 95       	ret

00009270 <__divsf3>:
    9270:	0e 94 4c 49 	call	0x9298	; 0x9298 <__divsf3x>
    9274:	0c 94 81 4a 	jmp	0x9502	; 0x9502 <__fp_round>
    9278:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <__fp_pscB>
    927c:	58 f0       	brcs	.+22     	; 0x9294 <__divsf3+0x24>
    927e:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <__fp_pscA>
    9282:	40 f0       	brcs	.+16     	; 0x9294 <__divsf3+0x24>
    9284:	29 f4       	brne	.+10     	; 0x9290 <__divsf3+0x20>
    9286:	5f 3f       	cpi	r21, 0xFF	; 255
    9288:	29 f0       	breq	.+10     	; 0x9294 <__divsf3+0x24>
    928a:	0c 94 41 4a 	jmp	0x9482	; 0x9482 <__fp_inf>
    928e:	51 11       	cpse	r21, r1
    9290:	0c 94 cd 4a 	jmp	0x959a	; 0x959a <__fp_szero>
    9294:	0c 94 70 4a 	jmp	0x94e0	; 0x94e0 <__fp_nan>

00009298 <__divsf3x>:
    9298:	0e 94 92 4a 	call	0x9524	; 0x9524 <__fp_split3>
    929c:	68 f3       	brcs	.-38     	; 0x9278 <__divsf3+0x8>

0000929e <__divsf3_pse>:
    929e:	99 23       	and	r25, r25
    92a0:	b1 f3       	breq	.-20     	; 0x928e <__divsf3+0x1e>
    92a2:	55 23       	and	r21, r21
    92a4:	91 f3       	breq	.-28     	; 0x928a <__divsf3+0x1a>
    92a6:	95 1b       	sub	r25, r21
    92a8:	55 0b       	sbc	r21, r21
    92aa:	bb 27       	eor	r27, r27
    92ac:	aa 27       	eor	r26, r26
    92ae:	62 17       	cp	r22, r18
    92b0:	73 07       	cpc	r23, r19
    92b2:	84 07       	cpc	r24, r20
    92b4:	38 f0       	brcs	.+14     	; 0x92c4 <__divsf3_pse+0x26>
    92b6:	9f 5f       	subi	r25, 0xFF	; 255
    92b8:	5f 4f       	sbci	r21, 0xFF	; 255
    92ba:	22 0f       	add	r18, r18
    92bc:	33 1f       	adc	r19, r19
    92be:	44 1f       	adc	r20, r20
    92c0:	aa 1f       	adc	r26, r26
    92c2:	a9 f3       	breq	.-22     	; 0x92ae <__divsf3_pse+0x10>
    92c4:	35 d0       	rcall	.+106    	; 0x9330 <__divsf3_pse+0x92>
    92c6:	0e 2e       	mov	r0, r30
    92c8:	3a f0       	brmi	.+14     	; 0x92d8 <__divsf3_pse+0x3a>
    92ca:	e0 e8       	ldi	r30, 0x80	; 128
    92cc:	32 d0       	rcall	.+100    	; 0x9332 <__divsf3_pse+0x94>
    92ce:	91 50       	subi	r25, 0x01	; 1
    92d0:	50 40       	sbci	r21, 0x00	; 0
    92d2:	e6 95       	lsr	r30
    92d4:	00 1c       	adc	r0, r0
    92d6:	ca f7       	brpl	.-14     	; 0x92ca <__divsf3_pse+0x2c>
    92d8:	2b d0       	rcall	.+86     	; 0x9330 <__divsf3_pse+0x92>
    92da:	fe 2f       	mov	r31, r30
    92dc:	29 d0       	rcall	.+82     	; 0x9330 <__divsf3_pse+0x92>
    92de:	66 0f       	add	r22, r22
    92e0:	77 1f       	adc	r23, r23
    92e2:	88 1f       	adc	r24, r24
    92e4:	bb 1f       	adc	r27, r27
    92e6:	26 17       	cp	r18, r22
    92e8:	37 07       	cpc	r19, r23
    92ea:	48 07       	cpc	r20, r24
    92ec:	ab 07       	cpc	r26, r27
    92ee:	b0 e8       	ldi	r27, 0x80	; 128
    92f0:	09 f0       	breq	.+2      	; 0x92f4 <__divsf3_pse+0x56>
    92f2:	bb 0b       	sbc	r27, r27
    92f4:	80 2d       	mov	r24, r0
    92f6:	bf 01       	movw	r22, r30
    92f8:	ff 27       	eor	r31, r31
    92fa:	93 58       	subi	r25, 0x83	; 131
    92fc:	5f 4f       	sbci	r21, 0xFF	; 255
    92fe:	3a f0       	brmi	.+14     	; 0x930e <__divsf3_pse+0x70>
    9300:	9e 3f       	cpi	r25, 0xFE	; 254
    9302:	51 05       	cpc	r21, r1
    9304:	78 f0       	brcs	.+30     	; 0x9324 <__divsf3_pse+0x86>
    9306:	0c 94 41 4a 	jmp	0x9482	; 0x9482 <__fp_inf>
    930a:	0c 94 cd 4a 	jmp	0x959a	; 0x959a <__fp_szero>
    930e:	5f 3f       	cpi	r21, 0xFF	; 255
    9310:	e4 f3       	brlt	.-8      	; 0x930a <__divsf3_pse+0x6c>
    9312:	98 3e       	cpi	r25, 0xE8	; 232
    9314:	d4 f3       	brlt	.-12     	; 0x930a <__divsf3_pse+0x6c>
    9316:	86 95       	lsr	r24
    9318:	77 95       	ror	r23
    931a:	67 95       	ror	r22
    931c:	b7 95       	ror	r27
    931e:	f7 95       	ror	r31
    9320:	9f 5f       	subi	r25, 0xFF	; 255
    9322:	c9 f7       	brne	.-14     	; 0x9316 <__divsf3_pse+0x78>
    9324:	88 0f       	add	r24, r24
    9326:	91 1d       	adc	r25, r1
    9328:	96 95       	lsr	r25
    932a:	87 95       	ror	r24
    932c:	97 f9       	bld	r25, 7
    932e:	08 95       	ret
    9330:	e1 e0       	ldi	r30, 0x01	; 1
    9332:	66 0f       	add	r22, r22
    9334:	77 1f       	adc	r23, r23
    9336:	88 1f       	adc	r24, r24
    9338:	bb 1f       	adc	r27, r27
    933a:	62 17       	cp	r22, r18
    933c:	73 07       	cpc	r23, r19
    933e:	84 07       	cpc	r24, r20
    9340:	ba 07       	cpc	r27, r26
    9342:	20 f0       	brcs	.+8      	; 0x934c <__divsf3_pse+0xae>
    9344:	62 1b       	sub	r22, r18
    9346:	73 0b       	sbc	r23, r19
    9348:	84 0b       	sbc	r24, r20
    934a:	ba 0b       	sbc	r27, r26
    934c:	ee 1f       	adc	r30, r30
    934e:	88 f7       	brcc	.-30     	; 0x9332 <__divsf3_pse+0x94>
    9350:	e0 95       	com	r30
    9352:	08 95       	ret

00009354 <__fixsfsi>:
    9354:	0e 94 b1 49 	call	0x9362	; 0x9362 <__fixunssfsi>
    9358:	68 94       	set
    935a:	b1 11       	cpse	r27, r1
    935c:	0c 94 cd 4a 	jmp	0x959a	; 0x959a <__fp_szero>
    9360:	08 95       	ret

00009362 <__fixunssfsi>:
    9362:	0e 94 9a 4a 	call	0x9534	; 0x9534 <__fp_splitA>
    9366:	88 f0       	brcs	.+34     	; 0x938a <__fixunssfsi+0x28>
    9368:	9f 57       	subi	r25, 0x7F	; 127
    936a:	98 f0       	brcs	.+38     	; 0x9392 <__fixunssfsi+0x30>
    936c:	b9 2f       	mov	r27, r25
    936e:	99 27       	eor	r25, r25
    9370:	b7 51       	subi	r27, 0x17	; 23
    9372:	b0 f0       	brcs	.+44     	; 0x93a0 <__fixunssfsi+0x3e>
    9374:	e1 f0       	breq	.+56     	; 0x93ae <__fixunssfsi+0x4c>
    9376:	66 0f       	add	r22, r22
    9378:	77 1f       	adc	r23, r23
    937a:	88 1f       	adc	r24, r24
    937c:	99 1f       	adc	r25, r25
    937e:	1a f0       	brmi	.+6      	; 0x9386 <__fixunssfsi+0x24>
    9380:	ba 95       	dec	r27
    9382:	c9 f7       	brne	.-14     	; 0x9376 <__fixunssfsi+0x14>
    9384:	14 c0       	rjmp	.+40     	; 0x93ae <__fixunssfsi+0x4c>
    9386:	b1 30       	cpi	r27, 0x01	; 1
    9388:	91 f0       	breq	.+36     	; 0x93ae <__fixunssfsi+0x4c>
    938a:	0e 94 cc 4a 	call	0x9598	; 0x9598 <__fp_zero>
    938e:	b1 e0       	ldi	r27, 0x01	; 1
    9390:	08 95       	ret
    9392:	0c 94 cc 4a 	jmp	0x9598	; 0x9598 <__fp_zero>
    9396:	67 2f       	mov	r22, r23
    9398:	78 2f       	mov	r23, r24
    939a:	88 27       	eor	r24, r24
    939c:	b8 5f       	subi	r27, 0xF8	; 248
    939e:	39 f0       	breq	.+14     	; 0x93ae <__fixunssfsi+0x4c>
    93a0:	b9 3f       	cpi	r27, 0xF9	; 249
    93a2:	cc f3       	brlt	.-14     	; 0x9396 <__fixunssfsi+0x34>
    93a4:	86 95       	lsr	r24
    93a6:	77 95       	ror	r23
    93a8:	67 95       	ror	r22
    93aa:	b3 95       	inc	r27
    93ac:	d9 f7       	brne	.-10     	; 0x93a4 <__fixunssfsi+0x42>
    93ae:	3e f4       	brtc	.+14     	; 0x93be <__fixunssfsi+0x5c>
    93b0:	90 95       	com	r25
    93b2:	80 95       	com	r24
    93b4:	70 95       	com	r23
    93b6:	61 95       	neg	r22
    93b8:	7f 4f       	sbci	r23, 0xFF	; 255
    93ba:	8f 4f       	sbci	r24, 0xFF	; 255
    93bc:	9f 4f       	sbci	r25, 0xFF	; 255
    93be:	08 95       	ret

000093c0 <__floatunsisf>:
    93c0:	e8 94       	clt
    93c2:	09 c0       	rjmp	.+18     	; 0x93d6 <__floatsisf+0x12>

000093c4 <__floatsisf>:
    93c4:	97 fb       	bst	r25, 7
    93c6:	3e f4       	brtc	.+14     	; 0x93d6 <__floatsisf+0x12>
    93c8:	90 95       	com	r25
    93ca:	80 95       	com	r24
    93cc:	70 95       	com	r23
    93ce:	61 95       	neg	r22
    93d0:	7f 4f       	sbci	r23, 0xFF	; 255
    93d2:	8f 4f       	sbci	r24, 0xFF	; 255
    93d4:	9f 4f       	sbci	r25, 0xFF	; 255
    93d6:	99 23       	and	r25, r25
    93d8:	a9 f0       	breq	.+42     	; 0x9404 <__floatsisf+0x40>
    93da:	f9 2f       	mov	r31, r25
    93dc:	96 e9       	ldi	r25, 0x96	; 150
    93de:	bb 27       	eor	r27, r27
    93e0:	93 95       	inc	r25
    93e2:	f6 95       	lsr	r31
    93e4:	87 95       	ror	r24
    93e6:	77 95       	ror	r23
    93e8:	67 95       	ror	r22
    93ea:	b7 95       	ror	r27
    93ec:	f1 11       	cpse	r31, r1
    93ee:	f8 cf       	rjmp	.-16     	; 0x93e0 <__floatsisf+0x1c>
    93f0:	fa f4       	brpl	.+62     	; 0x9430 <__floatsisf+0x6c>
    93f2:	bb 0f       	add	r27, r27
    93f4:	11 f4       	brne	.+4      	; 0x93fa <__floatsisf+0x36>
    93f6:	60 ff       	sbrs	r22, 0
    93f8:	1b c0       	rjmp	.+54     	; 0x9430 <__floatsisf+0x6c>
    93fa:	6f 5f       	subi	r22, 0xFF	; 255
    93fc:	7f 4f       	sbci	r23, 0xFF	; 255
    93fe:	8f 4f       	sbci	r24, 0xFF	; 255
    9400:	9f 4f       	sbci	r25, 0xFF	; 255
    9402:	16 c0       	rjmp	.+44     	; 0x9430 <__floatsisf+0x6c>
    9404:	88 23       	and	r24, r24
    9406:	11 f0       	breq	.+4      	; 0x940c <__floatsisf+0x48>
    9408:	96 e9       	ldi	r25, 0x96	; 150
    940a:	11 c0       	rjmp	.+34     	; 0x942e <__floatsisf+0x6a>
    940c:	77 23       	and	r23, r23
    940e:	21 f0       	breq	.+8      	; 0x9418 <__floatsisf+0x54>
    9410:	9e e8       	ldi	r25, 0x8E	; 142
    9412:	87 2f       	mov	r24, r23
    9414:	76 2f       	mov	r23, r22
    9416:	05 c0       	rjmp	.+10     	; 0x9422 <__floatsisf+0x5e>
    9418:	66 23       	and	r22, r22
    941a:	71 f0       	breq	.+28     	; 0x9438 <__floatsisf+0x74>
    941c:	96 e8       	ldi	r25, 0x86	; 134
    941e:	86 2f       	mov	r24, r22
    9420:	70 e0       	ldi	r23, 0x00	; 0
    9422:	60 e0       	ldi	r22, 0x00	; 0
    9424:	2a f0       	brmi	.+10     	; 0x9430 <__floatsisf+0x6c>
    9426:	9a 95       	dec	r25
    9428:	66 0f       	add	r22, r22
    942a:	77 1f       	adc	r23, r23
    942c:	88 1f       	adc	r24, r24
    942e:	da f7       	brpl	.-10     	; 0x9426 <__floatsisf+0x62>
    9430:	88 0f       	add	r24, r24
    9432:	96 95       	lsr	r25
    9434:	87 95       	ror	r24
    9436:	97 f9       	bld	r25, 7
    9438:	08 95       	ret

0000943a <__fp_cmp>:
    943a:	99 0f       	add	r25, r25
    943c:	00 08       	sbc	r0, r0
    943e:	55 0f       	add	r21, r21
    9440:	aa 0b       	sbc	r26, r26
    9442:	e0 e8       	ldi	r30, 0x80	; 128
    9444:	fe ef       	ldi	r31, 0xFE	; 254
    9446:	16 16       	cp	r1, r22
    9448:	17 06       	cpc	r1, r23
    944a:	e8 07       	cpc	r30, r24
    944c:	f9 07       	cpc	r31, r25
    944e:	c0 f0       	brcs	.+48     	; 0x9480 <__fp_cmp+0x46>
    9450:	12 16       	cp	r1, r18
    9452:	13 06       	cpc	r1, r19
    9454:	e4 07       	cpc	r30, r20
    9456:	f5 07       	cpc	r31, r21
    9458:	98 f0       	brcs	.+38     	; 0x9480 <__fp_cmp+0x46>
    945a:	62 1b       	sub	r22, r18
    945c:	73 0b       	sbc	r23, r19
    945e:	84 0b       	sbc	r24, r20
    9460:	95 0b       	sbc	r25, r21
    9462:	39 f4       	brne	.+14     	; 0x9472 <__fp_cmp+0x38>
    9464:	0a 26       	eor	r0, r26
    9466:	61 f0       	breq	.+24     	; 0x9480 <__fp_cmp+0x46>
    9468:	23 2b       	or	r18, r19
    946a:	24 2b       	or	r18, r20
    946c:	25 2b       	or	r18, r21
    946e:	21 f4       	brne	.+8      	; 0x9478 <__fp_cmp+0x3e>
    9470:	08 95       	ret
    9472:	0a 26       	eor	r0, r26
    9474:	09 f4       	brne	.+2      	; 0x9478 <__fp_cmp+0x3e>
    9476:	a1 40       	sbci	r26, 0x01	; 1
    9478:	a6 95       	lsr	r26
    947a:	8f ef       	ldi	r24, 0xFF	; 255
    947c:	81 1d       	adc	r24, r1
    947e:	81 1d       	adc	r24, r1
    9480:	08 95       	ret

00009482 <__fp_inf>:
    9482:	97 f9       	bld	r25, 7
    9484:	9f 67       	ori	r25, 0x7F	; 127
    9486:	80 e8       	ldi	r24, 0x80	; 128
    9488:	70 e0       	ldi	r23, 0x00	; 0
    948a:	60 e0       	ldi	r22, 0x00	; 0
    948c:	08 95       	ret

0000948e <__fp_mintl>:
    948e:	88 23       	and	r24, r24
    9490:	71 f4       	brne	.+28     	; 0x94ae <__fp_mintl+0x20>
    9492:	77 23       	and	r23, r23
    9494:	21 f0       	breq	.+8      	; 0x949e <__fp_mintl+0x10>
    9496:	98 50       	subi	r25, 0x08	; 8
    9498:	87 2b       	or	r24, r23
    949a:	76 2f       	mov	r23, r22
    949c:	07 c0       	rjmp	.+14     	; 0x94ac <__fp_mintl+0x1e>
    949e:	66 23       	and	r22, r22
    94a0:	11 f4       	brne	.+4      	; 0x94a6 <__fp_mintl+0x18>
    94a2:	99 27       	eor	r25, r25
    94a4:	0d c0       	rjmp	.+26     	; 0x94c0 <__fp_mintl+0x32>
    94a6:	90 51       	subi	r25, 0x10	; 16
    94a8:	86 2b       	or	r24, r22
    94aa:	70 e0       	ldi	r23, 0x00	; 0
    94ac:	60 e0       	ldi	r22, 0x00	; 0
    94ae:	2a f0       	brmi	.+10     	; 0x94ba <__fp_mintl+0x2c>
    94b0:	9a 95       	dec	r25
    94b2:	66 0f       	add	r22, r22
    94b4:	77 1f       	adc	r23, r23
    94b6:	88 1f       	adc	r24, r24
    94b8:	da f7       	brpl	.-10     	; 0x94b0 <__fp_mintl+0x22>
    94ba:	88 0f       	add	r24, r24
    94bc:	96 95       	lsr	r25
    94be:	87 95       	ror	r24
    94c0:	97 f9       	bld	r25, 7
    94c2:	08 95       	ret

000094c4 <__fp_mpack>:
    94c4:	9f 3f       	cpi	r25, 0xFF	; 255
    94c6:	31 f0       	breq	.+12     	; 0x94d4 <__fp_mpack_finite+0xc>

000094c8 <__fp_mpack_finite>:
    94c8:	91 50       	subi	r25, 0x01	; 1
    94ca:	20 f4       	brcc	.+8      	; 0x94d4 <__fp_mpack_finite+0xc>
    94cc:	87 95       	ror	r24
    94ce:	77 95       	ror	r23
    94d0:	67 95       	ror	r22
    94d2:	b7 95       	ror	r27
    94d4:	88 0f       	add	r24, r24
    94d6:	91 1d       	adc	r25, r1
    94d8:	96 95       	lsr	r25
    94da:	87 95       	ror	r24
    94dc:	97 f9       	bld	r25, 7
    94de:	08 95       	ret

000094e0 <__fp_nan>:
    94e0:	9f ef       	ldi	r25, 0xFF	; 255
    94e2:	80 ec       	ldi	r24, 0xC0	; 192
    94e4:	08 95       	ret

000094e6 <__fp_pscA>:
    94e6:	00 24       	eor	r0, r0
    94e8:	0a 94       	dec	r0
    94ea:	16 16       	cp	r1, r22
    94ec:	17 06       	cpc	r1, r23
    94ee:	18 06       	cpc	r1, r24
    94f0:	09 06       	cpc	r0, r25
    94f2:	08 95       	ret

000094f4 <__fp_pscB>:
    94f4:	00 24       	eor	r0, r0
    94f6:	0a 94       	dec	r0
    94f8:	12 16       	cp	r1, r18
    94fa:	13 06       	cpc	r1, r19
    94fc:	14 06       	cpc	r1, r20
    94fe:	05 06       	cpc	r0, r21
    9500:	08 95       	ret

00009502 <__fp_round>:
    9502:	09 2e       	mov	r0, r25
    9504:	03 94       	inc	r0
    9506:	00 0c       	add	r0, r0
    9508:	11 f4       	brne	.+4      	; 0x950e <__fp_round+0xc>
    950a:	88 23       	and	r24, r24
    950c:	52 f0       	brmi	.+20     	; 0x9522 <__fp_round+0x20>
    950e:	bb 0f       	add	r27, r27
    9510:	40 f4       	brcc	.+16     	; 0x9522 <__fp_round+0x20>
    9512:	bf 2b       	or	r27, r31
    9514:	11 f4       	brne	.+4      	; 0x951a <__fp_round+0x18>
    9516:	60 ff       	sbrs	r22, 0
    9518:	04 c0       	rjmp	.+8      	; 0x9522 <__fp_round+0x20>
    951a:	6f 5f       	subi	r22, 0xFF	; 255
    951c:	7f 4f       	sbci	r23, 0xFF	; 255
    951e:	8f 4f       	sbci	r24, 0xFF	; 255
    9520:	9f 4f       	sbci	r25, 0xFF	; 255
    9522:	08 95       	ret

00009524 <__fp_split3>:
    9524:	57 fd       	sbrc	r21, 7
    9526:	90 58       	subi	r25, 0x80	; 128
    9528:	44 0f       	add	r20, r20
    952a:	55 1f       	adc	r21, r21
    952c:	59 f0       	breq	.+22     	; 0x9544 <__fp_splitA+0x10>
    952e:	5f 3f       	cpi	r21, 0xFF	; 255
    9530:	71 f0       	breq	.+28     	; 0x954e <__fp_splitA+0x1a>
    9532:	47 95       	ror	r20

00009534 <__fp_splitA>:
    9534:	88 0f       	add	r24, r24
    9536:	97 fb       	bst	r25, 7
    9538:	99 1f       	adc	r25, r25
    953a:	61 f0       	breq	.+24     	; 0x9554 <__fp_splitA+0x20>
    953c:	9f 3f       	cpi	r25, 0xFF	; 255
    953e:	79 f0       	breq	.+30     	; 0x955e <__fp_splitA+0x2a>
    9540:	87 95       	ror	r24
    9542:	08 95       	ret
    9544:	12 16       	cp	r1, r18
    9546:	13 06       	cpc	r1, r19
    9548:	14 06       	cpc	r1, r20
    954a:	55 1f       	adc	r21, r21
    954c:	f2 cf       	rjmp	.-28     	; 0x9532 <__fp_split3+0xe>
    954e:	46 95       	lsr	r20
    9550:	f1 df       	rcall	.-30     	; 0x9534 <__fp_splitA>
    9552:	08 c0       	rjmp	.+16     	; 0x9564 <__fp_splitA+0x30>
    9554:	16 16       	cp	r1, r22
    9556:	17 06       	cpc	r1, r23
    9558:	18 06       	cpc	r1, r24
    955a:	99 1f       	adc	r25, r25
    955c:	f1 cf       	rjmp	.-30     	; 0x9540 <__fp_splitA+0xc>
    955e:	86 95       	lsr	r24
    9560:	71 05       	cpc	r23, r1
    9562:	61 05       	cpc	r22, r1
    9564:	08 94       	sec
    9566:	08 95       	ret

00009568 <__fp_trunc>:
    9568:	0e 94 9a 4a 	call	0x9534	; 0x9534 <__fp_splitA>
    956c:	a0 f0       	brcs	.+40     	; 0x9596 <__fp_trunc+0x2e>
    956e:	be e7       	ldi	r27, 0x7E	; 126
    9570:	b9 17       	cp	r27, r25
    9572:	88 f4       	brcc	.+34     	; 0x9596 <__fp_trunc+0x2e>
    9574:	bb 27       	eor	r27, r27
    9576:	9f 38       	cpi	r25, 0x8F	; 143
    9578:	60 f4       	brcc	.+24     	; 0x9592 <__fp_trunc+0x2a>
    957a:	16 16       	cp	r1, r22
    957c:	b1 1d       	adc	r27, r1
    957e:	67 2f       	mov	r22, r23
    9580:	78 2f       	mov	r23, r24
    9582:	88 27       	eor	r24, r24
    9584:	98 5f       	subi	r25, 0xF8	; 248
    9586:	f7 cf       	rjmp	.-18     	; 0x9576 <__fp_trunc+0xe>
    9588:	86 95       	lsr	r24
    958a:	77 95       	ror	r23
    958c:	67 95       	ror	r22
    958e:	b1 1d       	adc	r27, r1
    9590:	93 95       	inc	r25
    9592:	96 39       	cpi	r25, 0x96	; 150
    9594:	c8 f3       	brcs	.-14     	; 0x9588 <__fp_trunc+0x20>
    9596:	08 95       	ret

00009598 <__fp_zero>:
    9598:	e8 94       	clt

0000959a <__fp_szero>:
    959a:	bb 27       	eor	r27, r27
    959c:	66 27       	eor	r22, r22
    959e:	77 27       	eor	r23, r23
    95a0:	cb 01       	movw	r24, r22
    95a2:	97 f9       	bld	r25, 7
    95a4:	08 95       	ret

000095a6 <__gesf2>:
    95a6:	0e 94 1d 4a 	call	0x943a	; 0x943a <__fp_cmp>
    95aa:	08 f4       	brcc	.+2      	; 0x95ae <__gesf2+0x8>
    95ac:	8f ef       	ldi	r24, 0xFF	; 255
    95ae:	08 95       	ret

000095b0 <__mulsf3>:
    95b0:	0e 94 eb 4a 	call	0x95d6	; 0x95d6 <__mulsf3x>
    95b4:	0c 94 81 4a 	jmp	0x9502	; 0x9502 <__fp_round>
    95b8:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <__fp_pscA>
    95bc:	38 f0       	brcs	.+14     	; 0x95cc <__mulsf3+0x1c>
    95be:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <__fp_pscB>
    95c2:	20 f0       	brcs	.+8      	; 0x95cc <__mulsf3+0x1c>
    95c4:	95 23       	and	r25, r21
    95c6:	11 f0       	breq	.+4      	; 0x95cc <__mulsf3+0x1c>
    95c8:	0c 94 41 4a 	jmp	0x9482	; 0x9482 <__fp_inf>
    95cc:	0c 94 70 4a 	jmp	0x94e0	; 0x94e0 <__fp_nan>
    95d0:	11 24       	eor	r1, r1
    95d2:	0c 94 cd 4a 	jmp	0x959a	; 0x959a <__fp_szero>

000095d6 <__mulsf3x>:
    95d6:	0e 94 92 4a 	call	0x9524	; 0x9524 <__fp_split3>
    95da:	70 f3       	brcs	.-36     	; 0x95b8 <__mulsf3+0x8>

000095dc <__mulsf3_pse>:
    95dc:	95 9f       	mul	r25, r21
    95de:	c1 f3       	breq	.-16     	; 0x95d0 <__mulsf3+0x20>
    95e0:	95 0f       	add	r25, r21
    95e2:	50 e0       	ldi	r21, 0x00	; 0
    95e4:	55 1f       	adc	r21, r21
    95e6:	62 9f       	mul	r22, r18
    95e8:	f0 01       	movw	r30, r0
    95ea:	72 9f       	mul	r23, r18
    95ec:	bb 27       	eor	r27, r27
    95ee:	f0 0d       	add	r31, r0
    95f0:	b1 1d       	adc	r27, r1
    95f2:	63 9f       	mul	r22, r19
    95f4:	aa 27       	eor	r26, r26
    95f6:	f0 0d       	add	r31, r0
    95f8:	b1 1d       	adc	r27, r1
    95fa:	aa 1f       	adc	r26, r26
    95fc:	64 9f       	mul	r22, r20
    95fe:	66 27       	eor	r22, r22
    9600:	b0 0d       	add	r27, r0
    9602:	a1 1d       	adc	r26, r1
    9604:	66 1f       	adc	r22, r22
    9606:	82 9f       	mul	r24, r18
    9608:	22 27       	eor	r18, r18
    960a:	b0 0d       	add	r27, r0
    960c:	a1 1d       	adc	r26, r1
    960e:	62 1f       	adc	r22, r18
    9610:	73 9f       	mul	r23, r19
    9612:	b0 0d       	add	r27, r0
    9614:	a1 1d       	adc	r26, r1
    9616:	62 1f       	adc	r22, r18
    9618:	83 9f       	mul	r24, r19
    961a:	a0 0d       	add	r26, r0
    961c:	61 1d       	adc	r22, r1
    961e:	22 1f       	adc	r18, r18
    9620:	74 9f       	mul	r23, r20
    9622:	33 27       	eor	r19, r19
    9624:	a0 0d       	add	r26, r0
    9626:	61 1d       	adc	r22, r1
    9628:	23 1f       	adc	r18, r19
    962a:	84 9f       	mul	r24, r20
    962c:	60 0d       	add	r22, r0
    962e:	21 1d       	adc	r18, r1
    9630:	82 2f       	mov	r24, r18
    9632:	76 2f       	mov	r23, r22
    9634:	6a 2f       	mov	r22, r26
    9636:	11 24       	eor	r1, r1
    9638:	9f 57       	subi	r25, 0x7F	; 127
    963a:	50 40       	sbci	r21, 0x00	; 0
    963c:	9a f0       	brmi	.+38     	; 0x9664 <__mulsf3_pse+0x88>
    963e:	f1 f0       	breq	.+60     	; 0x967c <__mulsf3_pse+0xa0>
    9640:	88 23       	and	r24, r24
    9642:	4a f0       	brmi	.+18     	; 0x9656 <__mulsf3_pse+0x7a>
    9644:	ee 0f       	add	r30, r30
    9646:	ff 1f       	adc	r31, r31
    9648:	bb 1f       	adc	r27, r27
    964a:	66 1f       	adc	r22, r22
    964c:	77 1f       	adc	r23, r23
    964e:	88 1f       	adc	r24, r24
    9650:	91 50       	subi	r25, 0x01	; 1
    9652:	50 40       	sbci	r21, 0x00	; 0
    9654:	a9 f7       	brne	.-22     	; 0x9640 <__mulsf3_pse+0x64>
    9656:	9e 3f       	cpi	r25, 0xFE	; 254
    9658:	51 05       	cpc	r21, r1
    965a:	80 f0       	brcs	.+32     	; 0x967c <__mulsf3_pse+0xa0>
    965c:	0c 94 41 4a 	jmp	0x9482	; 0x9482 <__fp_inf>
    9660:	0c 94 cd 4a 	jmp	0x959a	; 0x959a <__fp_szero>
    9664:	5f 3f       	cpi	r21, 0xFF	; 255
    9666:	e4 f3       	brlt	.-8      	; 0x9660 <__mulsf3_pse+0x84>
    9668:	98 3e       	cpi	r25, 0xE8	; 232
    966a:	d4 f3       	brlt	.-12     	; 0x9660 <__mulsf3_pse+0x84>
    966c:	86 95       	lsr	r24
    966e:	77 95       	ror	r23
    9670:	67 95       	ror	r22
    9672:	b7 95       	ror	r27
    9674:	f7 95       	ror	r31
    9676:	e7 95       	ror	r30
    9678:	9f 5f       	subi	r25, 0xFF	; 255
    967a:	c1 f7       	brne	.-16     	; 0x966c <__mulsf3_pse+0x90>
    967c:	fe 2b       	or	r31, r30
    967e:	88 0f       	add	r24, r24
    9680:	91 1d       	adc	r25, r1
    9682:	96 95       	lsr	r25
    9684:	87 95       	ror	r24
    9686:	97 f9       	bld	r25, 7
    9688:	08 95       	ret

0000968a <__mulsi3>:
    968a:	db 01       	movw	r26, r22
    968c:	8f 93       	push	r24
    968e:	9f 93       	push	r25
    9690:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <__muluhisi3>
    9694:	bf 91       	pop	r27
    9696:	af 91       	pop	r26
    9698:	a2 9f       	mul	r26, r18
    969a:	80 0d       	add	r24, r0
    969c:	91 1d       	adc	r25, r1
    969e:	a3 9f       	mul	r26, r19
    96a0:	90 0d       	add	r25, r0
    96a2:	b2 9f       	mul	r27, r18
    96a4:	90 0d       	add	r25, r0
    96a6:	11 24       	eor	r1, r1
    96a8:	08 95       	ret

000096aa <__udivmodhi4>:
    96aa:	aa 1b       	sub	r26, r26
    96ac:	bb 1b       	sub	r27, r27
    96ae:	51 e1       	ldi	r21, 0x11	; 17
    96b0:	07 c0       	rjmp	.+14     	; 0x96c0 <__udivmodhi4_ep>

000096b2 <__udivmodhi4_loop>:
    96b2:	aa 1f       	adc	r26, r26
    96b4:	bb 1f       	adc	r27, r27
    96b6:	a6 17       	cp	r26, r22
    96b8:	b7 07       	cpc	r27, r23
    96ba:	10 f0       	brcs	.+4      	; 0x96c0 <__udivmodhi4_ep>
    96bc:	a6 1b       	sub	r26, r22
    96be:	b7 0b       	sbc	r27, r23

000096c0 <__udivmodhi4_ep>:
    96c0:	88 1f       	adc	r24, r24
    96c2:	99 1f       	adc	r25, r25
    96c4:	5a 95       	dec	r21
    96c6:	a9 f7       	brne	.-22     	; 0x96b2 <__udivmodhi4_loop>
    96c8:	80 95       	com	r24
    96ca:	90 95       	com	r25
    96cc:	bc 01       	movw	r22, r24
    96ce:	cd 01       	movw	r24, r26
    96d0:	08 95       	ret

000096d2 <__divmodhi4>:
    96d2:	97 fb       	bst	r25, 7
    96d4:	07 2e       	mov	r0, r23
    96d6:	16 f4       	brtc	.+4      	; 0x96dc <__divmodhi4+0xa>
    96d8:	00 94       	com	r0
    96da:	07 d0       	rcall	.+14     	; 0x96ea <__divmodhi4_neg1>
    96dc:	77 fd       	sbrc	r23, 7
    96de:	09 d0       	rcall	.+18     	; 0x96f2 <__divmodhi4_neg2>
    96e0:	0e 94 55 4b 	call	0x96aa	; 0x96aa <__udivmodhi4>
    96e4:	07 fc       	sbrc	r0, 7
    96e6:	05 d0       	rcall	.+10     	; 0x96f2 <__divmodhi4_neg2>
    96e8:	3e f4       	brtc	.+14     	; 0x96f8 <__divmodhi4_exit>

000096ea <__divmodhi4_neg1>:
    96ea:	90 95       	com	r25
    96ec:	81 95       	neg	r24
    96ee:	9f 4f       	sbci	r25, 0xFF	; 255
    96f0:	08 95       	ret

000096f2 <__divmodhi4_neg2>:
    96f2:	70 95       	com	r23
    96f4:	61 95       	neg	r22
    96f6:	7f 4f       	sbci	r23, 0xFF	; 255

000096f8 <__divmodhi4_exit>:
    96f8:	08 95       	ret

000096fa <__udivmodsi4>:
    96fa:	a1 e2       	ldi	r26, 0x21	; 33
    96fc:	1a 2e       	mov	r1, r26
    96fe:	aa 1b       	sub	r26, r26
    9700:	bb 1b       	sub	r27, r27
    9702:	fd 01       	movw	r30, r26
    9704:	0d c0       	rjmp	.+26     	; 0x9720 <__udivmodsi4_ep>

00009706 <__udivmodsi4_loop>:
    9706:	aa 1f       	adc	r26, r26
    9708:	bb 1f       	adc	r27, r27
    970a:	ee 1f       	adc	r30, r30
    970c:	ff 1f       	adc	r31, r31
    970e:	a2 17       	cp	r26, r18
    9710:	b3 07       	cpc	r27, r19
    9712:	e4 07       	cpc	r30, r20
    9714:	f5 07       	cpc	r31, r21
    9716:	20 f0       	brcs	.+8      	; 0x9720 <__udivmodsi4_ep>
    9718:	a2 1b       	sub	r26, r18
    971a:	b3 0b       	sbc	r27, r19
    971c:	e4 0b       	sbc	r30, r20
    971e:	f5 0b       	sbc	r31, r21

00009720 <__udivmodsi4_ep>:
    9720:	66 1f       	adc	r22, r22
    9722:	77 1f       	adc	r23, r23
    9724:	88 1f       	adc	r24, r24
    9726:	99 1f       	adc	r25, r25
    9728:	1a 94       	dec	r1
    972a:	69 f7       	brne	.-38     	; 0x9706 <__udivmodsi4_loop>
    972c:	60 95       	com	r22
    972e:	70 95       	com	r23
    9730:	80 95       	com	r24
    9732:	90 95       	com	r25
    9734:	9b 01       	movw	r18, r22
    9736:	ac 01       	movw	r20, r24
    9738:	bd 01       	movw	r22, r26
    973a:	cf 01       	movw	r24, r30
    973c:	08 95       	ret

0000973e <__divmodsi4>:
    973e:	05 2e       	mov	r0, r21
    9740:	97 fb       	bst	r25, 7
    9742:	1e f4       	brtc	.+6      	; 0x974a <__divmodsi4+0xc>
    9744:	00 94       	com	r0
    9746:	0e 94 b6 4b 	call	0x976c	; 0x976c <__negsi2>
    974a:	57 fd       	sbrc	r21, 7
    974c:	07 d0       	rcall	.+14     	; 0x975c <__divmodsi4_neg2>
    974e:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    9752:	07 fc       	sbrc	r0, 7
    9754:	03 d0       	rcall	.+6      	; 0x975c <__divmodsi4_neg2>
    9756:	4e f4       	brtc	.+18     	; 0x976a <__divmodsi4_exit>
    9758:	0c 94 b6 4b 	jmp	0x976c	; 0x976c <__negsi2>

0000975c <__divmodsi4_neg2>:
    975c:	50 95       	com	r21
    975e:	40 95       	com	r20
    9760:	30 95       	com	r19
    9762:	21 95       	neg	r18
    9764:	3f 4f       	sbci	r19, 0xFF	; 255
    9766:	4f 4f       	sbci	r20, 0xFF	; 255
    9768:	5f 4f       	sbci	r21, 0xFF	; 255

0000976a <__divmodsi4_exit>:
    976a:	08 95       	ret

0000976c <__negsi2>:
    976c:	90 95       	com	r25
    976e:	80 95       	com	r24
    9770:	70 95       	com	r23
    9772:	61 95       	neg	r22
    9774:	7f 4f       	sbci	r23, 0xFF	; 255
    9776:	8f 4f       	sbci	r24, 0xFF	; 255
    9778:	9f 4f       	sbci	r25, 0xFF	; 255
    977a:	08 95       	ret

0000977c <__tablejump2__>:
    977c:	ee 0f       	add	r30, r30
    977e:	ff 1f       	adc	r31, r31
    9780:	00 24       	eor	r0, r0
    9782:	00 1c       	adc	r0, r0
    9784:	0b be       	out	0x3b, r0	; 59
    9786:	07 90       	elpm	r0, Z+
    9788:	f6 91       	elpm	r31, Z
    978a:	e0 2d       	mov	r30, r0
    978c:	09 94       	ijmp

0000978e <__umulhisi3>:
    978e:	a2 9f       	mul	r26, r18
    9790:	b0 01       	movw	r22, r0
    9792:	b3 9f       	mul	r27, r19
    9794:	c0 01       	movw	r24, r0
    9796:	a3 9f       	mul	r26, r19
    9798:	70 0d       	add	r23, r0
    979a:	81 1d       	adc	r24, r1
    979c:	11 24       	eor	r1, r1
    979e:	91 1d       	adc	r25, r1
    97a0:	b2 9f       	mul	r27, r18
    97a2:	70 0d       	add	r23, r0
    97a4:	81 1d       	adc	r24, r1
    97a6:	11 24       	eor	r1, r1
    97a8:	91 1d       	adc	r25, r1
    97aa:	08 95       	ret

000097ac <__usmulhisi3>:
    97ac:	0e 94 c7 4b 	call	0x978e	; 0x978e <__umulhisi3>

000097b0 <__usmulhisi3_tail>:
    97b0:	b7 ff       	sbrs	r27, 7
    97b2:	08 95       	ret
    97b4:	82 1b       	sub	r24, r18
    97b6:	93 0b       	sbc	r25, r19
    97b8:	08 95       	ret

000097ba <__muluhisi3>:
    97ba:	0e 94 c7 4b 	call	0x978e	; 0x978e <__umulhisi3>
    97be:	a5 9f       	mul	r26, r21
    97c0:	90 0d       	add	r25, r0
    97c2:	b4 9f       	mul	r27, r20
    97c4:	90 0d       	add	r25, r0
    97c6:	a4 9f       	mul	r26, r20
    97c8:	80 0d       	add	r24, r0
    97ca:	91 1d       	adc	r25, r1
    97cc:	11 24       	eor	r1, r1
    97ce:	08 95       	ret

000097d0 <__mulshisi3>:
    97d0:	b7 ff       	sbrs	r27, 7
    97d2:	0c 94 dd 4b 	jmp	0x97ba	; 0x97ba <__muluhisi3>

000097d6 <__mulohisi3>:
    97d6:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <__muluhisi3>
    97da:	82 1b       	sub	r24, r18
    97dc:	93 0b       	sbc	r25, r19
    97de:	08 95       	ret

000097e0 <malloc>:
    97e0:	0f 93       	push	r16
    97e2:	1f 93       	push	r17
    97e4:	cf 93       	push	r28
    97e6:	df 93       	push	r29
    97e8:	82 30       	cpi	r24, 0x02	; 2
    97ea:	91 05       	cpc	r25, r1
    97ec:	10 f4       	brcc	.+4      	; 0x97f2 <malloc+0x12>
    97ee:	82 e0       	ldi	r24, 0x02	; 2
    97f0:	90 e0       	ldi	r25, 0x00	; 0
    97f2:	e0 91 4f 49 	lds	r30, 0x494F	; 0x80494f <__flp>
    97f6:	f0 91 50 49 	lds	r31, 0x4950	; 0x804950 <__flp+0x1>
    97fa:	20 e0       	ldi	r18, 0x00	; 0
    97fc:	30 e0       	ldi	r19, 0x00	; 0
    97fe:	a0 e0       	ldi	r26, 0x00	; 0
    9800:	b0 e0       	ldi	r27, 0x00	; 0
    9802:	30 97       	sbiw	r30, 0x00	; 0
    9804:	19 f1       	breq	.+70     	; 0x984c <malloc+0x6c>
    9806:	40 81       	ld	r20, Z
    9808:	51 81       	ldd	r21, Z+1	; 0x01
    980a:	02 81       	ldd	r16, Z+2	; 0x02
    980c:	13 81       	ldd	r17, Z+3	; 0x03
    980e:	48 17       	cp	r20, r24
    9810:	59 07       	cpc	r21, r25
    9812:	c8 f0       	brcs	.+50     	; 0x9846 <malloc+0x66>
    9814:	84 17       	cp	r24, r20
    9816:	95 07       	cpc	r25, r21
    9818:	69 f4       	brne	.+26     	; 0x9834 <malloc+0x54>
    981a:	10 97       	sbiw	r26, 0x00	; 0
    981c:	31 f0       	breq	.+12     	; 0x982a <malloc+0x4a>
    981e:	12 96       	adiw	r26, 0x02	; 2
    9820:	0c 93       	st	X, r16
    9822:	12 97       	sbiw	r26, 0x02	; 2
    9824:	13 96       	adiw	r26, 0x03	; 3
    9826:	1c 93       	st	X, r17
    9828:	27 c0       	rjmp	.+78     	; 0x9878 <malloc+0x98>
    982a:	00 93 4f 49 	sts	0x494F, r16	; 0x80494f <__flp>
    982e:	10 93 50 49 	sts	0x4950, r17	; 0x804950 <__flp+0x1>
    9832:	22 c0       	rjmp	.+68     	; 0x9878 <malloc+0x98>
    9834:	21 15       	cp	r18, r1
    9836:	31 05       	cpc	r19, r1
    9838:	19 f0       	breq	.+6      	; 0x9840 <malloc+0x60>
    983a:	42 17       	cp	r20, r18
    983c:	53 07       	cpc	r21, r19
    983e:	18 f4       	brcc	.+6      	; 0x9846 <malloc+0x66>
    9840:	9a 01       	movw	r18, r20
    9842:	bd 01       	movw	r22, r26
    9844:	ef 01       	movw	r28, r30
    9846:	df 01       	movw	r26, r30
    9848:	f8 01       	movw	r30, r16
    984a:	db cf       	rjmp	.-74     	; 0x9802 <malloc+0x22>
    984c:	21 15       	cp	r18, r1
    984e:	31 05       	cpc	r19, r1
    9850:	f9 f0       	breq	.+62     	; 0x9890 <malloc+0xb0>
    9852:	28 1b       	sub	r18, r24
    9854:	39 0b       	sbc	r19, r25
    9856:	24 30       	cpi	r18, 0x04	; 4
    9858:	31 05       	cpc	r19, r1
    985a:	80 f4       	brcc	.+32     	; 0x987c <malloc+0x9c>
    985c:	8a 81       	ldd	r24, Y+2	; 0x02
    985e:	9b 81       	ldd	r25, Y+3	; 0x03
    9860:	61 15       	cp	r22, r1
    9862:	71 05       	cpc	r23, r1
    9864:	21 f0       	breq	.+8      	; 0x986e <malloc+0x8e>
    9866:	fb 01       	movw	r30, r22
    9868:	82 83       	std	Z+2, r24	; 0x02
    986a:	93 83       	std	Z+3, r25	; 0x03
    986c:	04 c0       	rjmp	.+8      	; 0x9876 <malloc+0x96>
    986e:	80 93 4f 49 	sts	0x494F, r24	; 0x80494f <__flp>
    9872:	90 93 50 49 	sts	0x4950, r25	; 0x804950 <__flp+0x1>
    9876:	fe 01       	movw	r30, r28
    9878:	32 96       	adiw	r30, 0x02	; 2
    987a:	44 c0       	rjmp	.+136    	; 0x9904 <malloc+0x124>
    987c:	fe 01       	movw	r30, r28
    987e:	e2 0f       	add	r30, r18
    9880:	f3 1f       	adc	r31, r19
    9882:	81 93       	st	Z+, r24
    9884:	91 93       	st	Z+, r25
    9886:	22 50       	subi	r18, 0x02	; 2
    9888:	31 09       	sbc	r19, r1
    988a:	28 83       	st	Y, r18
    988c:	39 83       	std	Y+1, r19	; 0x01
    988e:	3a c0       	rjmp	.+116    	; 0x9904 <malloc+0x124>
    9890:	20 91 4d 49 	lds	r18, 0x494D	; 0x80494d <__brkval>
    9894:	30 91 4e 49 	lds	r19, 0x494E	; 0x80494e <__brkval+0x1>
    9898:	23 2b       	or	r18, r19
    989a:	41 f4       	brne	.+16     	; 0x98ac <malloc+0xcc>
    989c:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    98a0:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    98a4:	20 93 4d 49 	sts	0x494D, r18	; 0x80494d <__brkval>
    98a8:	30 93 4e 49 	sts	0x494E, r19	; 0x80494e <__brkval+0x1>
    98ac:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    98b0:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    98b4:	21 15       	cp	r18, r1
    98b6:	31 05       	cpc	r19, r1
    98b8:	41 f4       	brne	.+16     	; 0x98ca <malloc+0xea>
    98ba:	2d b7       	in	r18, 0x3d	; 61
    98bc:	3e b7       	in	r19, 0x3e	; 62
    98be:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    98c2:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    98c6:	24 1b       	sub	r18, r20
    98c8:	35 0b       	sbc	r19, r21
    98ca:	e0 91 4d 49 	lds	r30, 0x494D	; 0x80494d <__brkval>
    98ce:	f0 91 4e 49 	lds	r31, 0x494E	; 0x80494e <__brkval+0x1>
    98d2:	e2 17       	cp	r30, r18
    98d4:	f3 07       	cpc	r31, r19
    98d6:	a0 f4       	brcc	.+40     	; 0x9900 <malloc+0x120>
    98d8:	2e 1b       	sub	r18, r30
    98da:	3f 0b       	sbc	r19, r31
    98dc:	28 17       	cp	r18, r24
    98de:	39 07       	cpc	r19, r25
    98e0:	78 f0       	brcs	.+30     	; 0x9900 <malloc+0x120>
    98e2:	ac 01       	movw	r20, r24
    98e4:	4e 5f       	subi	r20, 0xFE	; 254
    98e6:	5f 4f       	sbci	r21, 0xFF	; 255
    98e8:	24 17       	cp	r18, r20
    98ea:	35 07       	cpc	r19, r21
    98ec:	48 f0       	brcs	.+18     	; 0x9900 <malloc+0x120>
    98ee:	4e 0f       	add	r20, r30
    98f0:	5f 1f       	adc	r21, r31
    98f2:	40 93 4d 49 	sts	0x494D, r20	; 0x80494d <__brkval>
    98f6:	50 93 4e 49 	sts	0x494E, r21	; 0x80494e <__brkval+0x1>
    98fa:	81 93       	st	Z+, r24
    98fc:	91 93       	st	Z+, r25
    98fe:	02 c0       	rjmp	.+4      	; 0x9904 <malloc+0x124>
    9900:	e0 e0       	ldi	r30, 0x00	; 0
    9902:	f0 e0       	ldi	r31, 0x00	; 0
    9904:	cf 01       	movw	r24, r30
    9906:	df 91       	pop	r29
    9908:	cf 91       	pop	r28
    990a:	1f 91       	pop	r17
    990c:	0f 91       	pop	r16
    990e:	08 95       	ret

00009910 <free>:
    9910:	cf 93       	push	r28
    9912:	df 93       	push	r29
    9914:	00 97       	sbiw	r24, 0x00	; 0
    9916:	09 f4       	brne	.+2      	; 0x991a <free+0xa>
    9918:	81 c0       	rjmp	.+258    	; 0x9a1c <free+0x10c>
    991a:	fc 01       	movw	r30, r24
    991c:	32 97       	sbiw	r30, 0x02	; 2
    991e:	12 82       	std	Z+2, r1	; 0x02
    9920:	13 82       	std	Z+3, r1	; 0x03
    9922:	a0 91 4f 49 	lds	r26, 0x494F	; 0x80494f <__flp>
    9926:	b0 91 50 49 	lds	r27, 0x4950	; 0x804950 <__flp+0x1>
    992a:	10 97       	sbiw	r26, 0x00	; 0
    992c:	81 f4       	brne	.+32     	; 0x994e <free+0x3e>
    992e:	20 81       	ld	r18, Z
    9930:	31 81       	ldd	r19, Z+1	; 0x01
    9932:	82 0f       	add	r24, r18
    9934:	93 1f       	adc	r25, r19
    9936:	20 91 4d 49 	lds	r18, 0x494D	; 0x80494d <__brkval>
    993a:	30 91 4e 49 	lds	r19, 0x494E	; 0x80494e <__brkval+0x1>
    993e:	28 17       	cp	r18, r24
    9940:	39 07       	cpc	r19, r25
    9942:	51 f5       	brne	.+84     	; 0x9998 <free+0x88>
    9944:	e0 93 4d 49 	sts	0x494D, r30	; 0x80494d <__brkval>
    9948:	f0 93 4e 49 	sts	0x494E, r31	; 0x80494e <__brkval+0x1>
    994c:	67 c0       	rjmp	.+206    	; 0x9a1c <free+0x10c>
    994e:	ed 01       	movw	r28, r26
    9950:	20 e0       	ldi	r18, 0x00	; 0
    9952:	30 e0       	ldi	r19, 0x00	; 0
    9954:	ce 17       	cp	r28, r30
    9956:	df 07       	cpc	r29, r31
    9958:	40 f4       	brcc	.+16     	; 0x996a <free+0x5a>
    995a:	4a 81       	ldd	r20, Y+2	; 0x02
    995c:	5b 81       	ldd	r21, Y+3	; 0x03
    995e:	9e 01       	movw	r18, r28
    9960:	41 15       	cp	r20, r1
    9962:	51 05       	cpc	r21, r1
    9964:	f1 f0       	breq	.+60     	; 0x99a2 <free+0x92>
    9966:	ea 01       	movw	r28, r20
    9968:	f5 cf       	rjmp	.-22     	; 0x9954 <free+0x44>
    996a:	c2 83       	std	Z+2, r28	; 0x02
    996c:	d3 83       	std	Z+3, r29	; 0x03
    996e:	40 81       	ld	r20, Z
    9970:	51 81       	ldd	r21, Z+1	; 0x01
    9972:	84 0f       	add	r24, r20
    9974:	95 1f       	adc	r25, r21
    9976:	c8 17       	cp	r28, r24
    9978:	d9 07       	cpc	r29, r25
    997a:	59 f4       	brne	.+22     	; 0x9992 <free+0x82>
    997c:	88 81       	ld	r24, Y
    997e:	99 81       	ldd	r25, Y+1	; 0x01
    9980:	84 0f       	add	r24, r20
    9982:	95 1f       	adc	r25, r21
    9984:	02 96       	adiw	r24, 0x02	; 2
    9986:	80 83       	st	Z, r24
    9988:	91 83       	std	Z+1, r25	; 0x01
    998a:	8a 81       	ldd	r24, Y+2	; 0x02
    998c:	9b 81       	ldd	r25, Y+3	; 0x03
    998e:	82 83       	std	Z+2, r24	; 0x02
    9990:	93 83       	std	Z+3, r25	; 0x03
    9992:	21 15       	cp	r18, r1
    9994:	31 05       	cpc	r19, r1
    9996:	29 f4       	brne	.+10     	; 0x99a2 <free+0x92>
    9998:	e0 93 4f 49 	sts	0x494F, r30	; 0x80494f <__flp>
    999c:	f0 93 50 49 	sts	0x4950, r31	; 0x804950 <__flp+0x1>
    99a0:	3d c0       	rjmp	.+122    	; 0x9a1c <free+0x10c>
    99a2:	e9 01       	movw	r28, r18
    99a4:	ea 83       	std	Y+2, r30	; 0x02
    99a6:	fb 83       	std	Y+3, r31	; 0x03
    99a8:	49 91       	ld	r20, Y+
    99aa:	59 91       	ld	r21, Y+
    99ac:	c4 0f       	add	r28, r20
    99ae:	d5 1f       	adc	r29, r21
    99b0:	ec 17       	cp	r30, r28
    99b2:	fd 07       	cpc	r31, r29
    99b4:	61 f4       	brne	.+24     	; 0x99ce <free+0xbe>
    99b6:	80 81       	ld	r24, Z
    99b8:	91 81       	ldd	r25, Z+1	; 0x01
    99ba:	84 0f       	add	r24, r20
    99bc:	95 1f       	adc	r25, r21
    99be:	02 96       	adiw	r24, 0x02	; 2
    99c0:	e9 01       	movw	r28, r18
    99c2:	88 83       	st	Y, r24
    99c4:	99 83       	std	Y+1, r25	; 0x01
    99c6:	82 81       	ldd	r24, Z+2	; 0x02
    99c8:	93 81       	ldd	r25, Z+3	; 0x03
    99ca:	8a 83       	std	Y+2, r24	; 0x02
    99cc:	9b 83       	std	Y+3, r25	; 0x03
    99ce:	e0 e0       	ldi	r30, 0x00	; 0
    99d0:	f0 e0       	ldi	r31, 0x00	; 0
    99d2:	12 96       	adiw	r26, 0x02	; 2
    99d4:	8d 91       	ld	r24, X+
    99d6:	9c 91       	ld	r25, X
    99d8:	13 97       	sbiw	r26, 0x03	; 3
    99da:	00 97       	sbiw	r24, 0x00	; 0
    99dc:	19 f0       	breq	.+6      	; 0x99e4 <free+0xd4>
    99de:	fd 01       	movw	r30, r26
    99e0:	dc 01       	movw	r26, r24
    99e2:	f7 cf       	rjmp	.-18     	; 0x99d2 <free+0xc2>
    99e4:	8d 91       	ld	r24, X+
    99e6:	9c 91       	ld	r25, X
    99e8:	11 97       	sbiw	r26, 0x01	; 1
    99ea:	9d 01       	movw	r18, r26
    99ec:	2e 5f       	subi	r18, 0xFE	; 254
    99ee:	3f 4f       	sbci	r19, 0xFF	; 255
    99f0:	82 0f       	add	r24, r18
    99f2:	93 1f       	adc	r25, r19
    99f4:	20 91 4d 49 	lds	r18, 0x494D	; 0x80494d <__brkval>
    99f8:	30 91 4e 49 	lds	r19, 0x494E	; 0x80494e <__brkval+0x1>
    99fc:	28 17       	cp	r18, r24
    99fe:	39 07       	cpc	r19, r25
    9a00:	69 f4       	brne	.+26     	; 0x9a1c <free+0x10c>
    9a02:	30 97       	sbiw	r30, 0x00	; 0
    9a04:	29 f4       	brne	.+10     	; 0x9a10 <free+0x100>
    9a06:	10 92 4f 49 	sts	0x494F, r1	; 0x80494f <__flp>
    9a0a:	10 92 50 49 	sts	0x4950, r1	; 0x804950 <__flp+0x1>
    9a0e:	02 c0       	rjmp	.+4      	; 0x9a14 <free+0x104>
    9a10:	12 82       	std	Z+2, r1	; 0x02
    9a12:	13 82       	std	Z+3, r1	; 0x03
    9a14:	a0 93 4d 49 	sts	0x494D, r26	; 0x80494d <__brkval>
    9a18:	b0 93 4e 49 	sts	0x494E, r27	; 0x80494e <__brkval+0x1>
    9a1c:	df 91       	pop	r29
    9a1e:	cf 91       	pop	r28
    9a20:	08 95       	ret

00009a22 <atof>:
    9a22:	66 27       	eor	r22, r22
    9a24:	77 27       	eor	r23, r23
    9a26:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <strtod>

00009a2a <atoi>:
    9a2a:	fc 01       	movw	r30, r24
    9a2c:	88 27       	eor	r24, r24
    9a2e:	99 27       	eor	r25, r25
    9a30:	e8 94       	clt
    9a32:	21 91       	ld	r18, Z+
    9a34:	20 32       	cpi	r18, 0x20	; 32
    9a36:	e9 f3       	breq	.-6      	; 0x9a32 <atoi+0x8>
    9a38:	29 30       	cpi	r18, 0x09	; 9
    9a3a:	10 f0       	brcs	.+4      	; 0x9a40 <atoi+0x16>
    9a3c:	2e 30       	cpi	r18, 0x0E	; 14
    9a3e:	c8 f3       	brcs	.-14     	; 0x9a32 <atoi+0x8>
    9a40:	2b 32       	cpi	r18, 0x2B	; 43
    9a42:	41 f0       	breq	.+16     	; 0x9a54 <atoi+0x2a>
    9a44:	2d 32       	cpi	r18, 0x2D	; 45
    9a46:	39 f4       	brne	.+14     	; 0x9a56 <atoi+0x2c>
    9a48:	68 94       	set
    9a4a:	04 c0       	rjmp	.+8      	; 0x9a54 <atoi+0x2a>
    9a4c:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <__mulhi_const_10>
    9a50:	82 0f       	add	r24, r18
    9a52:	91 1d       	adc	r25, r1
    9a54:	21 91       	ld	r18, Z+
    9a56:	20 53       	subi	r18, 0x30	; 48
    9a58:	2a 30       	cpi	r18, 0x0A	; 10
    9a5a:	c0 f3       	brcs	.-16     	; 0x9a4c <atoi+0x22>
    9a5c:	1e f4       	brtc	.+6      	; 0x9a64 <atoi+0x3a>
    9a5e:	90 95       	com	r25
    9a60:	81 95       	neg	r24
    9a62:	9f 4f       	sbci	r25, 0xFF	; 255
    9a64:	08 95       	ret

00009a66 <atol>:
    9a66:	1f 93       	push	r17
    9a68:	fc 01       	movw	r30, r24
    9a6a:	99 27       	eor	r25, r25
    9a6c:	88 27       	eor	r24, r24
    9a6e:	bc 01       	movw	r22, r24
    9a70:	e8 94       	clt
    9a72:	11 91       	ld	r17, Z+
    9a74:	10 32       	cpi	r17, 0x20	; 32
    9a76:	e9 f3       	breq	.-6      	; 0x9a72 <atol+0xc>
    9a78:	19 30       	cpi	r17, 0x09	; 9
    9a7a:	10 f0       	brcs	.+4      	; 0x9a80 <atol+0x1a>
    9a7c:	1e 30       	cpi	r17, 0x0E	; 14
    9a7e:	c8 f3       	brcs	.-14     	; 0x9a72 <atol+0xc>
    9a80:	1b 32       	cpi	r17, 0x2B	; 43
    9a82:	51 f0       	breq	.+20     	; 0x9a98 <atol+0x32>
    9a84:	1d 32       	cpi	r17, 0x2D	; 45
    9a86:	49 f4       	brne	.+18     	; 0x9a9a <atol+0x34>
    9a88:	68 94       	set
    9a8a:	06 c0       	rjmp	.+12     	; 0x9a98 <atol+0x32>
    9a8c:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__mulsi_const_10>
    9a90:	61 0f       	add	r22, r17
    9a92:	71 1d       	adc	r23, r1
    9a94:	81 1d       	adc	r24, r1
    9a96:	91 1d       	adc	r25, r1
    9a98:	11 91       	ld	r17, Z+
    9a9a:	10 53       	subi	r17, 0x30	; 48
    9a9c:	1a 30       	cpi	r17, 0x0A	; 10
    9a9e:	b0 f3       	brcs	.-20     	; 0x9a8c <atol+0x26>
    9aa0:	3e f4       	brtc	.+14     	; 0x9ab0 <atol+0x4a>
    9aa2:	90 95       	com	r25
    9aa4:	80 95       	com	r24
    9aa6:	70 95       	com	r23
    9aa8:	61 95       	neg	r22
    9aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    9aac:	8f 4f       	sbci	r24, 0xFF	; 255
    9aae:	9f 4f       	sbci	r25, 0xFF	; 255
    9ab0:	1f 91       	pop	r17
    9ab2:	08 95       	ret

00009ab4 <toupper>:
    9ab4:	91 11       	cpse	r25, r1
    9ab6:	08 95       	ret
    9ab8:	81 56       	subi	r24, 0x61	; 97
    9aba:	8a 51       	subi	r24, 0x1A	; 26
    9abc:	08 f4       	brcc	.+2      	; 0x9ac0 <toupper+0xc>
    9abe:	80 52       	subi	r24, 0x20	; 32
    9ac0:	85 58       	subi	r24, 0x85	; 133
    9ac2:	08 95       	ret

00009ac4 <strcat>:
    9ac4:	fb 01       	movw	r30, r22
    9ac6:	dc 01       	movw	r26, r24
    9ac8:	0d 90       	ld	r0, X+
    9aca:	00 20       	and	r0, r0
    9acc:	e9 f7       	brne	.-6      	; 0x9ac8 <strcat+0x4>
    9ace:	11 97       	sbiw	r26, 0x01	; 1
    9ad0:	01 90       	ld	r0, Z+
    9ad2:	0d 92       	st	X+, r0
    9ad4:	00 20       	and	r0, r0
    9ad6:	e1 f7       	brne	.-8      	; 0x9ad0 <strcat+0xc>
    9ad8:	08 95       	ret

00009ada <strchr>:
    9ada:	fc 01       	movw	r30, r24
    9adc:	81 91       	ld	r24, Z+
    9ade:	86 17       	cp	r24, r22
    9ae0:	21 f0       	breq	.+8      	; 0x9aea <strchr+0x10>
    9ae2:	88 23       	and	r24, r24
    9ae4:	d9 f7       	brne	.-10     	; 0x9adc <strchr+0x2>
    9ae6:	99 27       	eor	r25, r25
    9ae8:	08 95       	ret
    9aea:	31 97       	sbiw	r30, 0x01	; 1
    9aec:	cf 01       	movw	r24, r30
    9aee:	08 95       	ret

00009af0 <strcpy>:
    9af0:	fb 01       	movw	r30, r22
    9af2:	dc 01       	movw	r26, r24
    9af4:	01 90       	ld	r0, Z+
    9af6:	0d 92       	st	X+, r0
    9af8:	00 20       	and	r0, r0
    9afa:	e1 f7       	brne	.-8      	; 0x9af4 <strcpy+0x4>
    9afc:	08 95       	ret

00009afe <strlen>:
    9afe:	fc 01       	movw	r30, r24
    9b00:	01 90       	ld	r0, Z+
    9b02:	00 20       	and	r0, r0
    9b04:	e9 f7       	brne	.-6      	; 0x9b00 <strlen+0x2>
    9b06:	80 95       	com	r24
    9b08:	90 95       	com	r25
    9b0a:	8e 0f       	add	r24, r30
    9b0c:	9f 1f       	adc	r25, r31
    9b0e:	08 95       	ret

00009b10 <strncpy>:
    9b10:	fb 01       	movw	r30, r22
    9b12:	dc 01       	movw	r26, r24
    9b14:	41 50       	subi	r20, 0x01	; 1
    9b16:	50 40       	sbci	r21, 0x00	; 0
    9b18:	48 f0       	brcs	.+18     	; 0x9b2c <strncpy+0x1c>
    9b1a:	01 90       	ld	r0, Z+
    9b1c:	0d 92       	st	X+, r0
    9b1e:	00 20       	and	r0, r0
    9b20:	c9 f7       	brne	.-14     	; 0x9b14 <strncpy+0x4>
    9b22:	01 c0       	rjmp	.+2      	; 0x9b26 <strncpy+0x16>
    9b24:	1d 92       	st	X+, r1
    9b26:	41 50       	subi	r20, 0x01	; 1
    9b28:	50 40       	sbci	r21, 0x00	; 0
    9b2a:	e0 f7       	brcc	.-8      	; 0x9b24 <strncpy+0x14>
    9b2c:	08 95       	ret

00009b2e <__mulsi_const_10>:
    9b2e:	59 2f       	mov	r21, r25
    9b30:	48 2f       	mov	r20, r24
    9b32:	37 2f       	mov	r19, r23
    9b34:	26 2f       	mov	r18, r22
    9b36:	66 0f       	add	r22, r22
    9b38:	77 1f       	adc	r23, r23
    9b3a:	88 1f       	adc	r24, r24
    9b3c:	99 1f       	adc	r25, r25
    9b3e:	66 0f       	add	r22, r22
    9b40:	77 1f       	adc	r23, r23
    9b42:	88 1f       	adc	r24, r24
    9b44:	99 1f       	adc	r25, r25
    9b46:	62 0f       	add	r22, r18
    9b48:	73 1f       	adc	r23, r19
    9b4a:	84 1f       	adc	r24, r20
    9b4c:	95 1f       	adc	r25, r21
    9b4e:	66 0f       	add	r22, r22
    9b50:	77 1f       	adc	r23, r23
    9b52:	88 1f       	adc	r24, r24
    9b54:	99 1f       	adc	r25, r25
    9b56:	08 95       	ret

00009b58 <__mulhi_const_10>:
    9b58:	7a e0       	ldi	r23, 0x0A	; 10
    9b5a:	97 9f       	mul	r25, r23
    9b5c:	90 2d       	mov	r25, r0
    9b5e:	87 9f       	mul	r24, r23
    9b60:	80 2d       	mov	r24, r0
    9b62:	91 0d       	add	r25, r1
    9b64:	11 24       	eor	r1, r1
    9b66:	08 95       	ret

00009b68 <sprintf>:
    9b68:	0f 93       	push	r16
    9b6a:	1f 93       	push	r17
    9b6c:	cf 93       	push	r28
    9b6e:	df 93       	push	r29
    9b70:	cd b7       	in	r28, 0x3d	; 61
    9b72:	de b7       	in	r29, 0x3e	; 62
    9b74:	2e 97       	sbiw	r28, 0x0e	; 14
    9b76:	cd bf       	out	0x3d, r28	; 61
    9b78:	de bf       	out	0x3e, r29	; 62
    9b7a:	0d 89       	ldd	r16, Y+21	; 0x15
    9b7c:	1e 89       	ldd	r17, Y+22	; 0x16
    9b7e:	86 e0       	ldi	r24, 0x06	; 6
    9b80:	8c 83       	std	Y+4, r24	; 0x04
    9b82:	09 83       	std	Y+1, r16	; 0x01
    9b84:	1a 83       	std	Y+2, r17	; 0x02
    9b86:	8f ef       	ldi	r24, 0xFF	; 255
    9b88:	9f e7       	ldi	r25, 0x7F	; 127
    9b8a:	8d 83       	std	Y+5, r24	; 0x05
    9b8c:	9e 83       	std	Y+6, r25	; 0x06
    9b8e:	ae 01       	movw	r20, r28
    9b90:	47 5e       	subi	r20, 0xE7	; 231
    9b92:	5f 4f       	sbci	r21, 0xFF	; 255
    9b94:	6f 89       	ldd	r22, Y+23	; 0x17
    9b96:	78 8d       	ldd	r23, Y+24	; 0x18
    9b98:	ce 01       	movw	r24, r28
    9b9a:	01 96       	adiw	r24, 0x01	; 1
    9b9c:	0e 94 dd 4d 	call	0x9bba	; 0x9bba <vfprintf>
    9ba0:	ef 81       	ldd	r30, Y+7	; 0x07
    9ba2:	f8 85       	ldd	r31, Y+8	; 0x08
    9ba4:	e0 0f       	add	r30, r16
    9ba6:	f1 1f       	adc	r31, r17
    9ba8:	10 82       	st	Z, r1
    9baa:	2e 96       	adiw	r28, 0x0e	; 14
    9bac:	cd bf       	out	0x3d, r28	; 61
    9bae:	de bf       	out	0x3e, r29	; 62
    9bb0:	df 91       	pop	r29
    9bb2:	cf 91       	pop	r28
    9bb4:	1f 91       	pop	r17
    9bb6:	0f 91       	pop	r16
    9bb8:	08 95       	ret

00009bba <vfprintf>:
    9bba:	2f 92       	push	r2
    9bbc:	3f 92       	push	r3
    9bbe:	4f 92       	push	r4
    9bc0:	5f 92       	push	r5
    9bc2:	6f 92       	push	r6
    9bc4:	7f 92       	push	r7
    9bc6:	8f 92       	push	r8
    9bc8:	9f 92       	push	r9
    9bca:	af 92       	push	r10
    9bcc:	bf 92       	push	r11
    9bce:	cf 92       	push	r12
    9bd0:	df 92       	push	r13
    9bd2:	ef 92       	push	r14
    9bd4:	ff 92       	push	r15
    9bd6:	0f 93       	push	r16
    9bd8:	1f 93       	push	r17
    9bda:	cf 93       	push	r28
    9bdc:	df 93       	push	r29
    9bde:	cd b7       	in	r28, 0x3d	; 61
    9be0:	de b7       	in	r29, 0x3e	; 62
    9be2:	2b 97       	sbiw	r28, 0x0b	; 11
    9be4:	cd bf       	out	0x3d, r28	; 61
    9be6:	de bf       	out	0x3e, r29	; 62
    9be8:	6c 01       	movw	r12, r24
    9bea:	7b 01       	movw	r14, r22
    9bec:	8a 01       	movw	r16, r20
    9bee:	fc 01       	movw	r30, r24
    9bf0:	16 82       	std	Z+6, r1	; 0x06
    9bf2:	17 82       	std	Z+7, r1	; 0x07
    9bf4:	83 81       	ldd	r24, Z+3	; 0x03
    9bf6:	81 ff       	sbrs	r24, 1
    9bf8:	cc c1       	rjmp	.+920    	; 0x9f92 <vfprintf+0x3d8>
    9bfa:	ce 01       	movw	r24, r28
    9bfc:	01 96       	adiw	r24, 0x01	; 1
    9bfe:	3c 01       	movw	r6, r24
    9c00:	f6 01       	movw	r30, r12
    9c02:	93 81       	ldd	r25, Z+3	; 0x03
    9c04:	f7 01       	movw	r30, r14
    9c06:	93 fd       	sbrc	r25, 3
    9c08:	85 91       	lpm	r24, Z+
    9c0a:	93 ff       	sbrs	r25, 3
    9c0c:	81 91       	ld	r24, Z+
    9c0e:	7f 01       	movw	r14, r30
    9c10:	88 23       	and	r24, r24
    9c12:	09 f4       	brne	.+2      	; 0x9c16 <vfprintf+0x5c>
    9c14:	ba c1       	rjmp	.+884    	; 0x9f8a <vfprintf+0x3d0>
    9c16:	85 32       	cpi	r24, 0x25	; 37
    9c18:	39 f4       	brne	.+14     	; 0x9c28 <vfprintf+0x6e>
    9c1a:	93 fd       	sbrc	r25, 3
    9c1c:	85 91       	lpm	r24, Z+
    9c1e:	93 ff       	sbrs	r25, 3
    9c20:	81 91       	ld	r24, Z+
    9c22:	7f 01       	movw	r14, r30
    9c24:	85 32       	cpi	r24, 0x25	; 37
    9c26:	29 f4       	brne	.+10     	; 0x9c32 <vfprintf+0x78>
    9c28:	b6 01       	movw	r22, r12
    9c2a:	90 e0       	ldi	r25, 0x00	; 0
    9c2c:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <fputc>
    9c30:	e7 cf       	rjmp	.-50     	; 0x9c00 <vfprintf+0x46>
    9c32:	91 2c       	mov	r9, r1
    9c34:	21 2c       	mov	r2, r1
    9c36:	31 2c       	mov	r3, r1
    9c38:	ff e1       	ldi	r31, 0x1F	; 31
    9c3a:	f3 15       	cp	r31, r3
    9c3c:	d8 f0       	brcs	.+54     	; 0x9c74 <vfprintf+0xba>
    9c3e:	8b 32       	cpi	r24, 0x2B	; 43
    9c40:	79 f0       	breq	.+30     	; 0x9c60 <vfprintf+0xa6>
    9c42:	38 f4       	brcc	.+14     	; 0x9c52 <vfprintf+0x98>
    9c44:	80 32       	cpi	r24, 0x20	; 32
    9c46:	79 f0       	breq	.+30     	; 0x9c66 <vfprintf+0xac>
    9c48:	83 32       	cpi	r24, 0x23	; 35
    9c4a:	a1 f4       	brne	.+40     	; 0x9c74 <vfprintf+0xba>
    9c4c:	23 2d       	mov	r18, r3
    9c4e:	20 61       	ori	r18, 0x10	; 16
    9c50:	1d c0       	rjmp	.+58     	; 0x9c8c <vfprintf+0xd2>
    9c52:	8d 32       	cpi	r24, 0x2D	; 45
    9c54:	61 f0       	breq	.+24     	; 0x9c6e <vfprintf+0xb4>
    9c56:	80 33       	cpi	r24, 0x30	; 48
    9c58:	69 f4       	brne	.+26     	; 0x9c74 <vfprintf+0xba>
    9c5a:	23 2d       	mov	r18, r3
    9c5c:	21 60       	ori	r18, 0x01	; 1
    9c5e:	16 c0       	rjmp	.+44     	; 0x9c8c <vfprintf+0xd2>
    9c60:	83 2d       	mov	r24, r3
    9c62:	82 60       	ori	r24, 0x02	; 2
    9c64:	38 2e       	mov	r3, r24
    9c66:	e3 2d       	mov	r30, r3
    9c68:	e4 60       	ori	r30, 0x04	; 4
    9c6a:	3e 2e       	mov	r3, r30
    9c6c:	2a c0       	rjmp	.+84     	; 0x9cc2 <vfprintf+0x108>
    9c6e:	f3 2d       	mov	r31, r3
    9c70:	f8 60       	ori	r31, 0x08	; 8
    9c72:	1d c0       	rjmp	.+58     	; 0x9cae <vfprintf+0xf4>
    9c74:	37 fc       	sbrc	r3, 7
    9c76:	2d c0       	rjmp	.+90     	; 0x9cd2 <vfprintf+0x118>
    9c78:	20 ed       	ldi	r18, 0xD0	; 208
    9c7a:	28 0f       	add	r18, r24
    9c7c:	2a 30       	cpi	r18, 0x0A	; 10
    9c7e:	40 f0       	brcs	.+16     	; 0x9c90 <vfprintf+0xd6>
    9c80:	8e 32       	cpi	r24, 0x2E	; 46
    9c82:	b9 f4       	brne	.+46     	; 0x9cb2 <vfprintf+0xf8>
    9c84:	36 fc       	sbrc	r3, 6
    9c86:	81 c1       	rjmp	.+770    	; 0x9f8a <vfprintf+0x3d0>
    9c88:	23 2d       	mov	r18, r3
    9c8a:	20 64       	ori	r18, 0x40	; 64
    9c8c:	32 2e       	mov	r3, r18
    9c8e:	19 c0       	rjmp	.+50     	; 0x9cc2 <vfprintf+0x108>
    9c90:	36 fe       	sbrs	r3, 6
    9c92:	06 c0       	rjmp	.+12     	; 0x9ca0 <vfprintf+0xe6>
    9c94:	8a e0       	ldi	r24, 0x0A	; 10
    9c96:	98 9e       	mul	r9, r24
    9c98:	20 0d       	add	r18, r0
    9c9a:	11 24       	eor	r1, r1
    9c9c:	92 2e       	mov	r9, r18
    9c9e:	11 c0       	rjmp	.+34     	; 0x9cc2 <vfprintf+0x108>
    9ca0:	ea e0       	ldi	r30, 0x0A	; 10
    9ca2:	2e 9e       	mul	r2, r30
    9ca4:	20 0d       	add	r18, r0
    9ca6:	11 24       	eor	r1, r1
    9ca8:	22 2e       	mov	r2, r18
    9caa:	f3 2d       	mov	r31, r3
    9cac:	f0 62       	ori	r31, 0x20	; 32
    9cae:	3f 2e       	mov	r3, r31
    9cb0:	08 c0       	rjmp	.+16     	; 0x9cc2 <vfprintf+0x108>
    9cb2:	8c 36       	cpi	r24, 0x6C	; 108
    9cb4:	21 f4       	brne	.+8      	; 0x9cbe <vfprintf+0x104>
    9cb6:	83 2d       	mov	r24, r3
    9cb8:	80 68       	ori	r24, 0x80	; 128
    9cba:	38 2e       	mov	r3, r24
    9cbc:	02 c0       	rjmp	.+4      	; 0x9cc2 <vfprintf+0x108>
    9cbe:	88 36       	cpi	r24, 0x68	; 104
    9cc0:	41 f4       	brne	.+16     	; 0x9cd2 <vfprintf+0x118>
    9cc2:	f7 01       	movw	r30, r14
    9cc4:	93 fd       	sbrc	r25, 3
    9cc6:	85 91       	lpm	r24, Z+
    9cc8:	93 ff       	sbrs	r25, 3
    9cca:	81 91       	ld	r24, Z+
    9ccc:	7f 01       	movw	r14, r30
    9cce:	81 11       	cpse	r24, r1
    9cd0:	b3 cf       	rjmp	.-154    	; 0x9c38 <vfprintf+0x7e>
    9cd2:	98 2f       	mov	r25, r24
    9cd4:	9f 7d       	andi	r25, 0xDF	; 223
    9cd6:	95 54       	subi	r25, 0x45	; 69
    9cd8:	93 30       	cpi	r25, 0x03	; 3
    9cda:	28 f4       	brcc	.+10     	; 0x9ce6 <vfprintf+0x12c>
    9cdc:	0c 5f       	subi	r16, 0xFC	; 252
    9cde:	1f 4f       	sbci	r17, 0xFF	; 255
    9ce0:	9f e3       	ldi	r25, 0x3F	; 63
    9ce2:	99 83       	std	Y+1, r25	; 0x01
    9ce4:	0d c0       	rjmp	.+26     	; 0x9d00 <vfprintf+0x146>
    9ce6:	83 36       	cpi	r24, 0x63	; 99
    9ce8:	31 f0       	breq	.+12     	; 0x9cf6 <vfprintf+0x13c>
    9cea:	83 37       	cpi	r24, 0x73	; 115
    9cec:	71 f0       	breq	.+28     	; 0x9d0a <vfprintf+0x150>
    9cee:	83 35       	cpi	r24, 0x53	; 83
    9cf0:	09 f0       	breq	.+2      	; 0x9cf4 <vfprintf+0x13a>
    9cf2:	59 c0       	rjmp	.+178    	; 0x9da6 <vfprintf+0x1ec>
    9cf4:	21 c0       	rjmp	.+66     	; 0x9d38 <vfprintf+0x17e>
    9cf6:	f8 01       	movw	r30, r16
    9cf8:	80 81       	ld	r24, Z
    9cfa:	89 83       	std	Y+1, r24	; 0x01
    9cfc:	0e 5f       	subi	r16, 0xFE	; 254
    9cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    9d00:	88 24       	eor	r8, r8
    9d02:	83 94       	inc	r8
    9d04:	91 2c       	mov	r9, r1
    9d06:	53 01       	movw	r10, r6
    9d08:	13 c0       	rjmp	.+38     	; 0x9d30 <vfprintf+0x176>
    9d0a:	28 01       	movw	r4, r16
    9d0c:	f2 e0       	ldi	r31, 0x02	; 2
    9d0e:	4f 0e       	add	r4, r31
    9d10:	51 1c       	adc	r5, r1
    9d12:	f8 01       	movw	r30, r16
    9d14:	a0 80       	ld	r10, Z
    9d16:	b1 80       	ldd	r11, Z+1	; 0x01
    9d18:	36 fe       	sbrs	r3, 6
    9d1a:	03 c0       	rjmp	.+6      	; 0x9d22 <vfprintf+0x168>
    9d1c:	69 2d       	mov	r22, r9
    9d1e:	70 e0       	ldi	r23, 0x00	; 0
    9d20:	02 c0       	rjmp	.+4      	; 0x9d26 <vfprintf+0x16c>
    9d22:	6f ef       	ldi	r22, 0xFF	; 255
    9d24:	7f ef       	ldi	r23, 0xFF	; 255
    9d26:	c5 01       	movw	r24, r10
    9d28:	0e 94 69 51 	call	0xa2d2	; 0xa2d2 <strnlen>
    9d2c:	4c 01       	movw	r8, r24
    9d2e:	82 01       	movw	r16, r4
    9d30:	f3 2d       	mov	r31, r3
    9d32:	ff 77       	andi	r31, 0x7F	; 127
    9d34:	3f 2e       	mov	r3, r31
    9d36:	16 c0       	rjmp	.+44     	; 0x9d64 <vfprintf+0x1aa>
    9d38:	28 01       	movw	r4, r16
    9d3a:	22 e0       	ldi	r18, 0x02	; 2
    9d3c:	42 0e       	add	r4, r18
    9d3e:	51 1c       	adc	r5, r1
    9d40:	f8 01       	movw	r30, r16
    9d42:	a0 80       	ld	r10, Z
    9d44:	b1 80       	ldd	r11, Z+1	; 0x01
    9d46:	36 fe       	sbrs	r3, 6
    9d48:	03 c0       	rjmp	.+6      	; 0x9d50 <vfprintf+0x196>
    9d4a:	69 2d       	mov	r22, r9
    9d4c:	70 e0       	ldi	r23, 0x00	; 0
    9d4e:	02 c0       	rjmp	.+4      	; 0x9d54 <vfprintf+0x19a>
    9d50:	6f ef       	ldi	r22, 0xFF	; 255
    9d52:	7f ef       	ldi	r23, 0xFF	; 255
    9d54:	c5 01       	movw	r24, r10
    9d56:	0e 94 5e 51 	call	0xa2bc	; 0xa2bc <strnlen_P>
    9d5a:	4c 01       	movw	r8, r24
    9d5c:	f3 2d       	mov	r31, r3
    9d5e:	f0 68       	ori	r31, 0x80	; 128
    9d60:	3f 2e       	mov	r3, r31
    9d62:	82 01       	movw	r16, r4
    9d64:	33 fc       	sbrc	r3, 3
    9d66:	1b c0       	rjmp	.+54     	; 0x9d9e <vfprintf+0x1e4>
    9d68:	82 2d       	mov	r24, r2
    9d6a:	90 e0       	ldi	r25, 0x00	; 0
    9d6c:	88 16       	cp	r8, r24
    9d6e:	99 06       	cpc	r9, r25
    9d70:	b0 f4       	brcc	.+44     	; 0x9d9e <vfprintf+0x1e4>
    9d72:	b6 01       	movw	r22, r12
    9d74:	80 e2       	ldi	r24, 0x20	; 32
    9d76:	90 e0       	ldi	r25, 0x00	; 0
    9d78:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <fputc>
    9d7c:	2a 94       	dec	r2
    9d7e:	f4 cf       	rjmp	.-24     	; 0x9d68 <vfprintf+0x1ae>
    9d80:	f5 01       	movw	r30, r10
    9d82:	37 fc       	sbrc	r3, 7
    9d84:	85 91       	lpm	r24, Z+
    9d86:	37 fe       	sbrs	r3, 7
    9d88:	81 91       	ld	r24, Z+
    9d8a:	5f 01       	movw	r10, r30
    9d8c:	b6 01       	movw	r22, r12
    9d8e:	90 e0       	ldi	r25, 0x00	; 0
    9d90:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <fputc>
    9d94:	21 10       	cpse	r2, r1
    9d96:	2a 94       	dec	r2
    9d98:	21 e0       	ldi	r18, 0x01	; 1
    9d9a:	82 1a       	sub	r8, r18
    9d9c:	91 08       	sbc	r9, r1
    9d9e:	81 14       	cp	r8, r1
    9da0:	91 04       	cpc	r9, r1
    9da2:	71 f7       	brne	.-36     	; 0x9d80 <vfprintf+0x1c6>
    9da4:	e8 c0       	rjmp	.+464    	; 0x9f76 <vfprintf+0x3bc>
    9da6:	84 36       	cpi	r24, 0x64	; 100
    9da8:	11 f0       	breq	.+4      	; 0x9dae <vfprintf+0x1f4>
    9daa:	89 36       	cpi	r24, 0x69	; 105
    9dac:	41 f5       	brne	.+80     	; 0x9dfe <vfprintf+0x244>
    9dae:	f8 01       	movw	r30, r16
    9db0:	37 fe       	sbrs	r3, 7
    9db2:	07 c0       	rjmp	.+14     	; 0x9dc2 <vfprintf+0x208>
    9db4:	60 81       	ld	r22, Z
    9db6:	71 81       	ldd	r23, Z+1	; 0x01
    9db8:	82 81       	ldd	r24, Z+2	; 0x02
    9dba:	93 81       	ldd	r25, Z+3	; 0x03
    9dbc:	0c 5f       	subi	r16, 0xFC	; 252
    9dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    9dc0:	08 c0       	rjmp	.+16     	; 0x9dd2 <vfprintf+0x218>
    9dc2:	60 81       	ld	r22, Z
    9dc4:	71 81       	ldd	r23, Z+1	; 0x01
    9dc6:	07 2e       	mov	r0, r23
    9dc8:	00 0c       	add	r0, r0
    9dca:	88 0b       	sbc	r24, r24
    9dcc:	99 0b       	sbc	r25, r25
    9dce:	0e 5f       	subi	r16, 0xFE	; 254
    9dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    9dd2:	f3 2d       	mov	r31, r3
    9dd4:	ff 76       	andi	r31, 0x6F	; 111
    9dd6:	3f 2e       	mov	r3, r31
    9dd8:	97 ff       	sbrs	r25, 7
    9dda:	09 c0       	rjmp	.+18     	; 0x9dee <vfprintf+0x234>
    9ddc:	90 95       	com	r25
    9dde:	80 95       	com	r24
    9de0:	70 95       	com	r23
    9de2:	61 95       	neg	r22
    9de4:	7f 4f       	sbci	r23, 0xFF	; 255
    9de6:	8f 4f       	sbci	r24, 0xFF	; 255
    9de8:	9f 4f       	sbci	r25, 0xFF	; 255
    9dea:	f0 68       	ori	r31, 0x80	; 128
    9dec:	3f 2e       	mov	r3, r31
    9dee:	2a e0       	ldi	r18, 0x0A	; 10
    9df0:	30 e0       	ldi	r19, 0x00	; 0
    9df2:	a3 01       	movw	r20, r6
    9df4:	0e 94 b0 51 	call	0xa360	; 0xa360 <__ultoa_invert>
    9df8:	88 2e       	mov	r8, r24
    9dfa:	86 18       	sub	r8, r6
    9dfc:	45 c0       	rjmp	.+138    	; 0x9e88 <vfprintf+0x2ce>
    9dfe:	85 37       	cpi	r24, 0x75	; 117
    9e00:	31 f4       	brne	.+12     	; 0x9e0e <vfprintf+0x254>
    9e02:	23 2d       	mov	r18, r3
    9e04:	2f 7e       	andi	r18, 0xEF	; 239
    9e06:	b2 2e       	mov	r11, r18
    9e08:	2a e0       	ldi	r18, 0x0A	; 10
    9e0a:	30 e0       	ldi	r19, 0x00	; 0
    9e0c:	25 c0       	rjmp	.+74     	; 0x9e58 <vfprintf+0x29e>
    9e0e:	93 2d       	mov	r25, r3
    9e10:	99 7f       	andi	r25, 0xF9	; 249
    9e12:	b9 2e       	mov	r11, r25
    9e14:	8f 36       	cpi	r24, 0x6F	; 111
    9e16:	c1 f0       	breq	.+48     	; 0x9e48 <vfprintf+0x28e>
    9e18:	18 f4       	brcc	.+6      	; 0x9e20 <vfprintf+0x266>
    9e1a:	88 35       	cpi	r24, 0x58	; 88
    9e1c:	79 f0       	breq	.+30     	; 0x9e3c <vfprintf+0x282>
    9e1e:	b5 c0       	rjmp	.+362    	; 0x9f8a <vfprintf+0x3d0>
    9e20:	80 37       	cpi	r24, 0x70	; 112
    9e22:	19 f0       	breq	.+6      	; 0x9e2a <vfprintf+0x270>
    9e24:	88 37       	cpi	r24, 0x78	; 120
    9e26:	21 f0       	breq	.+8      	; 0x9e30 <vfprintf+0x276>
    9e28:	b0 c0       	rjmp	.+352    	; 0x9f8a <vfprintf+0x3d0>
    9e2a:	e9 2f       	mov	r30, r25
    9e2c:	e0 61       	ori	r30, 0x10	; 16
    9e2e:	be 2e       	mov	r11, r30
    9e30:	b4 fe       	sbrs	r11, 4
    9e32:	0d c0       	rjmp	.+26     	; 0x9e4e <vfprintf+0x294>
    9e34:	fb 2d       	mov	r31, r11
    9e36:	f4 60       	ori	r31, 0x04	; 4
    9e38:	bf 2e       	mov	r11, r31
    9e3a:	09 c0       	rjmp	.+18     	; 0x9e4e <vfprintf+0x294>
    9e3c:	34 fe       	sbrs	r3, 4
    9e3e:	0a c0       	rjmp	.+20     	; 0x9e54 <vfprintf+0x29a>
    9e40:	29 2f       	mov	r18, r25
    9e42:	26 60       	ori	r18, 0x06	; 6
    9e44:	b2 2e       	mov	r11, r18
    9e46:	06 c0       	rjmp	.+12     	; 0x9e54 <vfprintf+0x29a>
    9e48:	28 e0       	ldi	r18, 0x08	; 8
    9e4a:	30 e0       	ldi	r19, 0x00	; 0
    9e4c:	05 c0       	rjmp	.+10     	; 0x9e58 <vfprintf+0x29e>
    9e4e:	20 e1       	ldi	r18, 0x10	; 16
    9e50:	30 e0       	ldi	r19, 0x00	; 0
    9e52:	02 c0       	rjmp	.+4      	; 0x9e58 <vfprintf+0x29e>
    9e54:	20 e1       	ldi	r18, 0x10	; 16
    9e56:	32 e0       	ldi	r19, 0x02	; 2
    9e58:	f8 01       	movw	r30, r16
    9e5a:	b7 fe       	sbrs	r11, 7
    9e5c:	07 c0       	rjmp	.+14     	; 0x9e6c <vfprintf+0x2b2>
    9e5e:	60 81       	ld	r22, Z
    9e60:	71 81       	ldd	r23, Z+1	; 0x01
    9e62:	82 81       	ldd	r24, Z+2	; 0x02
    9e64:	93 81       	ldd	r25, Z+3	; 0x03
    9e66:	0c 5f       	subi	r16, 0xFC	; 252
    9e68:	1f 4f       	sbci	r17, 0xFF	; 255
    9e6a:	06 c0       	rjmp	.+12     	; 0x9e78 <vfprintf+0x2be>
    9e6c:	60 81       	ld	r22, Z
    9e6e:	71 81       	ldd	r23, Z+1	; 0x01
    9e70:	80 e0       	ldi	r24, 0x00	; 0
    9e72:	90 e0       	ldi	r25, 0x00	; 0
    9e74:	0e 5f       	subi	r16, 0xFE	; 254
    9e76:	1f 4f       	sbci	r17, 0xFF	; 255
    9e78:	a3 01       	movw	r20, r6
    9e7a:	0e 94 b0 51 	call	0xa360	; 0xa360 <__ultoa_invert>
    9e7e:	88 2e       	mov	r8, r24
    9e80:	86 18       	sub	r8, r6
    9e82:	fb 2d       	mov	r31, r11
    9e84:	ff 77       	andi	r31, 0x7F	; 127
    9e86:	3f 2e       	mov	r3, r31
    9e88:	36 fe       	sbrs	r3, 6
    9e8a:	0d c0       	rjmp	.+26     	; 0x9ea6 <vfprintf+0x2ec>
    9e8c:	23 2d       	mov	r18, r3
    9e8e:	2e 7f       	andi	r18, 0xFE	; 254
    9e90:	a2 2e       	mov	r10, r18
    9e92:	89 14       	cp	r8, r9
    9e94:	58 f4       	brcc	.+22     	; 0x9eac <vfprintf+0x2f2>
    9e96:	34 fe       	sbrs	r3, 4
    9e98:	0b c0       	rjmp	.+22     	; 0x9eb0 <vfprintf+0x2f6>
    9e9a:	32 fc       	sbrc	r3, 2
    9e9c:	09 c0       	rjmp	.+18     	; 0x9eb0 <vfprintf+0x2f6>
    9e9e:	83 2d       	mov	r24, r3
    9ea0:	8e 7e       	andi	r24, 0xEE	; 238
    9ea2:	a8 2e       	mov	r10, r24
    9ea4:	05 c0       	rjmp	.+10     	; 0x9eb0 <vfprintf+0x2f6>
    9ea6:	b8 2c       	mov	r11, r8
    9ea8:	a3 2c       	mov	r10, r3
    9eaa:	03 c0       	rjmp	.+6      	; 0x9eb2 <vfprintf+0x2f8>
    9eac:	b8 2c       	mov	r11, r8
    9eae:	01 c0       	rjmp	.+2      	; 0x9eb2 <vfprintf+0x2f8>
    9eb0:	b9 2c       	mov	r11, r9
    9eb2:	a4 fe       	sbrs	r10, 4
    9eb4:	0f c0       	rjmp	.+30     	; 0x9ed4 <vfprintf+0x31a>
    9eb6:	fe 01       	movw	r30, r28
    9eb8:	e8 0d       	add	r30, r8
    9eba:	f1 1d       	adc	r31, r1
    9ebc:	80 81       	ld	r24, Z
    9ebe:	80 33       	cpi	r24, 0x30	; 48
    9ec0:	21 f4       	brne	.+8      	; 0x9eca <vfprintf+0x310>
    9ec2:	9a 2d       	mov	r25, r10
    9ec4:	99 7e       	andi	r25, 0xE9	; 233
    9ec6:	a9 2e       	mov	r10, r25
    9ec8:	09 c0       	rjmp	.+18     	; 0x9edc <vfprintf+0x322>
    9eca:	a2 fe       	sbrs	r10, 2
    9ecc:	06 c0       	rjmp	.+12     	; 0x9eda <vfprintf+0x320>
    9ece:	b3 94       	inc	r11
    9ed0:	b3 94       	inc	r11
    9ed2:	04 c0       	rjmp	.+8      	; 0x9edc <vfprintf+0x322>
    9ed4:	8a 2d       	mov	r24, r10
    9ed6:	86 78       	andi	r24, 0x86	; 134
    9ed8:	09 f0       	breq	.+2      	; 0x9edc <vfprintf+0x322>
    9eda:	b3 94       	inc	r11
    9edc:	a3 fc       	sbrc	r10, 3
    9ede:	11 c0       	rjmp	.+34     	; 0x9f02 <vfprintf+0x348>
    9ee0:	a0 fe       	sbrs	r10, 0
    9ee2:	06 c0       	rjmp	.+12     	; 0x9ef0 <vfprintf+0x336>
    9ee4:	b2 14       	cp	r11, r2
    9ee6:	88 f4       	brcc	.+34     	; 0x9f0a <vfprintf+0x350>
    9ee8:	28 0c       	add	r2, r8
    9eea:	92 2c       	mov	r9, r2
    9eec:	9b 18       	sub	r9, r11
    9eee:	0e c0       	rjmp	.+28     	; 0x9f0c <vfprintf+0x352>
    9ef0:	b2 14       	cp	r11, r2
    9ef2:	60 f4       	brcc	.+24     	; 0x9f0c <vfprintf+0x352>
    9ef4:	b6 01       	movw	r22, r12
    9ef6:	80 e2       	ldi	r24, 0x20	; 32
    9ef8:	90 e0       	ldi	r25, 0x00	; 0
    9efa:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <fputc>
    9efe:	b3 94       	inc	r11
    9f00:	f7 cf       	rjmp	.-18     	; 0x9ef0 <vfprintf+0x336>
    9f02:	b2 14       	cp	r11, r2
    9f04:	18 f4       	brcc	.+6      	; 0x9f0c <vfprintf+0x352>
    9f06:	2b 18       	sub	r2, r11
    9f08:	02 c0       	rjmp	.+4      	; 0x9f0e <vfprintf+0x354>
    9f0a:	98 2c       	mov	r9, r8
    9f0c:	21 2c       	mov	r2, r1
    9f0e:	a4 fe       	sbrs	r10, 4
    9f10:	10 c0       	rjmp	.+32     	; 0x9f32 <vfprintf+0x378>
    9f12:	b6 01       	movw	r22, r12
    9f14:	80 e3       	ldi	r24, 0x30	; 48
    9f16:	90 e0       	ldi	r25, 0x00	; 0
    9f18:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <fputc>
    9f1c:	a2 fe       	sbrs	r10, 2
    9f1e:	17 c0       	rjmp	.+46     	; 0x9f4e <vfprintf+0x394>
    9f20:	a1 fc       	sbrc	r10, 1
    9f22:	03 c0       	rjmp	.+6      	; 0x9f2a <vfprintf+0x370>
    9f24:	88 e7       	ldi	r24, 0x78	; 120
    9f26:	90 e0       	ldi	r25, 0x00	; 0
    9f28:	02 c0       	rjmp	.+4      	; 0x9f2e <vfprintf+0x374>
    9f2a:	88 e5       	ldi	r24, 0x58	; 88
    9f2c:	90 e0       	ldi	r25, 0x00	; 0
    9f2e:	b6 01       	movw	r22, r12
    9f30:	0c c0       	rjmp	.+24     	; 0x9f4a <vfprintf+0x390>
    9f32:	8a 2d       	mov	r24, r10
    9f34:	86 78       	andi	r24, 0x86	; 134
    9f36:	59 f0       	breq	.+22     	; 0x9f4e <vfprintf+0x394>
    9f38:	a1 fe       	sbrs	r10, 1
    9f3a:	02 c0       	rjmp	.+4      	; 0x9f40 <vfprintf+0x386>
    9f3c:	8b e2       	ldi	r24, 0x2B	; 43
    9f3e:	01 c0       	rjmp	.+2      	; 0x9f42 <vfprintf+0x388>
    9f40:	80 e2       	ldi	r24, 0x20	; 32
    9f42:	a7 fc       	sbrc	r10, 7
    9f44:	8d e2       	ldi	r24, 0x2D	; 45
    9f46:	b6 01       	movw	r22, r12
    9f48:	90 e0       	ldi	r25, 0x00	; 0
    9f4a:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <fputc>
    9f4e:	89 14       	cp	r8, r9
    9f50:	38 f4       	brcc	.+14     	; 0x9f60 <vfprintf+0x3a6>
    9f52:	b6 01       	movw	r22, r12
    9f54:	80 e3       	ldi	r24, 0x30	; 48
    9f56:	90 e0       	ldi	r25, 0x00	; 0
    9f58:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <fputc>
    9f5c:	9a 94       	dec	r9
    9f5e:	f7 cf       	rjmp	.-18     	; 0x9f4e <vfprintf+0x394>
    9f60:	8a 94       	dec	r8
    9f62:	f3 01       	movw	r30, r6
    9f64:	e8 0d       	add	r30, r8
    9f66:	f1 1d       	adc	r31, r1
    9f68:	80 81       	ld	r24, Z
    9f6a:	b6 01       	movw	r22, r12
    9f6c:	90 e0       	ldi	r25, 0x00	; 0
    9f6e:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <fputc>
    9f72:	81 10       	cpse	r8, r1
    9f74:	f5 cf       	rjmp	.-22     	; 0x9f60 <vfprintf+0x3a6>
    9f76:	22 20       	and	r2, r2
    9f78:	09 f4       	brne	.+2      	; 0x9f7c <vfprintf+0x3c2>
    9f7a:	42 ce       	rjmp	.-892    	; 0x9c00 <vfprintf+0x46>
    9f7c:	b6 01       	movw	r22, r12
    9f7e:	80 e2       	ldi	r24, 0x20	; 32
    9f80:	90 e0       	ldi	r25, 0x00	; 0
    9f82:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <fputc>
    9f86:	2a 94       	dec	r2
    9f88:	f6 cf       	rjmp	.-20     	; 0x9f76 <vfprintf+0x3bc>
    9f8a:	f6 01       	movw	r30, r12
    9f8c:	86 81       	ldd	r24, Z+6	; 0x06
    9f8e:	97 81       	ldd	r25, Z+7	; 0x07
    9f90:	02 c0       	rjmp	.+4      	; 0x9f96 <vfprintf+0x3dc>
    9f92:	8f ef       	ldi	r24, 0xFF	; 255
    9f94:	9f ef       	ldi	r25, 0xFF	; 255
    9f96:	2b 96       	adiw	r28, 0x0b	; 11
    9f98:	cd bf       	out	0x3d, r28	; 61
    9f9a:	de bf       	out	0x3e, r29	; 62
    9f9c:	df 91       	pop	r29
    9f9e:	cf 91       	pop	r28
    9fa0:	1f 91       	pop	r17
    9fa2:	0f 91       	pop	r16
    9fa4:	ff 90       	pop	r15
    9fa6:	ef 90       	pop	r14
    9fa8:	df 90       	pop	r13
    9faa:	cf 90       	pop	r12
    9fac:	bf 90       	pop	r11
    9fae:	af 90       	pop	r10
    9fb0:	9f 90       	pop	r9
    9fb2:	8f 90       	pop	r8
    9fb4:	7f 90       	pop	r7
    9fb6:	6f 90       	pop	r6
    9fb8:	5f 90       	pop	r5
    9fba:	4f 90       	pop	r4
    9fbc:	3f 90       	pop	r3
    9fbe:	2f 90       	pop	r2
    9fc0:	08 95       	ret

00009fc2 <strtod>:
    9fc2:	8f 92       	push	r8
    9fc4:	9f 92       	push	r9
    9fc6:	af 92       	push	r10
    9fc8:	bf 92       	push	r11
    9fca:	cf 92       	push	r12
    9fcc:	df 92       	push	r13
    9fce:	ef 92       	push	r14
    9fd0:	ff 92       	push	r15
    9fd2:	0f 93       	push	r16
    9fd4:	1f 93       	push	r17
    9fd6:	cf 93       	push	r28
    9fd8:	df 93       	push	r29
    9fda:	ec 01       	movw	r28, r24
    9fdc:	6b 01       	movw	r12, r22
    9fde:	61 15       	cp	r22, r1
    9fe0:	71 05       	cpc	r23, r1
    9fe2:	19 f0       	breq	.+6      	; 0x9fea <strtod+0x28>
    9fe4:	fb 01       	movw	r30, r22
    9fe6:	80 83       	st	Z, r24
    9fe8:	91 83       	std	Z+1, r25	; 0x01
    9fea:	7e 01       	movw	r14, r28
    9fec:	ff ef       	ldi	r31, 0xFF	; 255
    9fee:	ef 1a       	sub	r14, r31
    9ff0:	ff 0a       	sbc	r15, r31
    9ff2:	08 81       	ld	r16, Y
    9ff4:	80 2f       	mov	r24, r16
    9ff6:	90 e0       	ldi	r25, 0x00	; 0
    9ff8:	0e 94 3d 51 	call	0xa27a	; 0xa27a <isspace>
    9ffc:	89 2b       	or	r24, r25
    9ffe:	11 f0       	breq	.+4      	; 0xa004 <strtod+0x42>
    a000:	e7 01       	movw	r28, r14
    a002:	f3 cf       	rjmp	.-26     	; 0x9fea <strtod+0x28>
    a004:	0d 32       	cpi	r16, 0x2D	; 45
    a006:	39 f4       	brne	.+14     	; 0xa016 <strtod+0x54>
    a008:	7e 01       	movw	r14, r28
    a00a:	82 e0       	ldi	r24, 0x02	; 2
    a00c:	e8 0e       	add	r14, r24
    a00e:	f1 1c       	adc	r15, r1
    a010:	09 81       	ldd	r16, Y+1	; 0x01
    a012:	11 e0       	ldi	r17, 0x01	; 1
    a014:	08 c0       	rjmp	.+16     	; 0xa026 <strtod+0x64>
    a016:	0b 32       	cpi	r16, 0x2B	; 43
    a018:	29 f4       	brne	.+10     	; 0xa024 <strtod+0x62>
    a01a:	7e 01       	movw	r14, r28
    a01c:	92 e0       	ldi	r25, 0x02	; 2
    a01e:	e9 0e       	add	r14, r25
    a020:	f1 1c       	adc	r15, r1
    a022:	09 81       	ldd	r16, Y+1	; 0x01
    a024:	10 e0       	ldi	r17, 0x00	; 0
    a026:	e7 01       	movw	r28, r14
    a028:	21 97       	sbiw	r28, 0x01	; 1
    a02a:	43 e0       	ldi	r20, 0x03	; 3
    a02c:	50 e0       	ldi	r21, 0x00	; 0
    a02e:	64 e3       	ldi	r22, 0x34	; 52
    a030:	72 e0       	ldi	r23, 0x02	; 2
    a032:	ce 01       	movw	r24, r28
    a034:	0e 94 46 51 	call	0xa28c	; 0xa28c <strncasecmp_P>
    a038:	89 2b       	or	r24, r25
    a03a:	c1 f4       	brne	.+48     	; 0xa06c <strtod+0xaa>
    a03c:	23 96       	adiw	r28, 0x03	; 3
    a03e:	45 e0       	ldi	r20, 0x05	; 5
    a040:	50 e0       	ldi	r21, 0x00	; 0
    a042:	6f e2       	ldi	r22, 0x2F	; 47
    a044:	72 e0       	ldi	r23, 0x02	; 2
    a046:	ce 01       	movw	r24, r28
    a048:	0e 94 46 51 	call	0xa28c	; 0xa28c <strncasecmp_P>
    a04c:	89 2b       	or	r24, r25
    a04e:	09 f4       	brne	.+2      	; 0xa052 <strtod+0x90>
    a050:	25 96       	adiw	r28, 0x05	; 5
    a052:	c1 14       	cp	r12, r1
    a054:	d1 04       	cpc	r13, r1
    a056:	19 f0       	breq	.+6      	; 0xa05e <strtod+0x9c>
    a058:	f6 01       	movw	r30, r12
    a05a:	c0 83       	st	Z, r28
    a05c:	d1 83       	std	Z+1, r29	; 0x01
    a05e:	11 11       	cpse	r17, r1
    a060:	f6 c0       	rjmp	.+492    	; 0xa24e <strtod+0x28c>
    a062:	60 e0       	ldi	r22, 0x00	; 0
    a064:	70 e0       	ldi	r23, 0x00	; 0
    a066:	80 e8       	ldi	r24, 0x80	; 128
    a068:	9f e7       	ldi	r25, 0x7F	; 127
    a06a:	fa c0       	rjmp	.+500    	; 0xa260 <strtod+0x29e>
    a06c:	43 e0       	ldi	r20, 0x03	; 3
    a06e:	50 e0       	ldi	r21, 0x00	; 0
    a070:	6c e2       	ldi	r22, 0x2C	; 44
    a072:	72 e0       	ldi	r23, 0x02	; 2
    a074:	ce 01       	movw	r24, r28
    a076:	0e 94 46 51 	call	0xa28c	; 0xa28c <strncasecmp_P>
    a07a:	89 2b       	or	r24, r25
    a07c:	59 f4       	brne	.+22     	; 0xa094 <strtod+0xd2>
    a07e:	c1 14       	cp	r12, r1
    a080:	d1 04       	cpc	r13, r1
    a082:	09 f4       	brne	.+2      	; 0xa086 <strtod+0xc4>
    a084:	e9 c0       	rjmp	.+466    	; 0xa258 <strtod+0x296>
    a086:	f2 e0       	ldi	r31, 0x02	; 2
    a088:	ef 0e       	add	r14, r31
    a08a:	f1 1c       	adc	r15, r1
    a08c:	f6 01       	movw	r30, r12
    a08e:	e0 82       	st	Z, r14
    a090:	f1 82       	std	Z+1, r15	; 0x01
    a092:	e2 c0       	rjmp	.+452    	; 0xa258 <strtod+0x296>
    a094:	20 e0       	ldi	r18, 0x00	; 0
    a096:	30 e0       	ldi	r19, 0x00	; 0
    a098:	a9 01       	movw	r20, r18
    a09a:	c0 e0       	ldi	r28, 0x00	; 0
    a09c:	d0 e0       	ldi	r29, 0x00	; 0
    a09e:	f7 01       	movw	r30, r14
    a0a0:	60 ed       	ldi	r22, 0xD0	; 208
    a0a2:	a6 2e       	mov	r10, r22
    a0a4:	a0 0e       	add	r10, r16
    a0a6:	89 e0       	ldi	r24, 0x09	; 9
    a0a8:	8a 15       	cp	r24, r10
    a0aa:	30 f1       	brcs	.+76     	; 0xa0f8 <strtod+0x136>
    a0ac:	91 2f       	mov	r25, r17
    a0ae:	92 60       	ori	r25, 0x02	; 2
    a0b0:	b9 2e       	mov	r11, r25
    a0b2:	81 2f       	mov	r24, r17
    a0b4:	88 70       	andi	r24, 0x08	; 8
    a0b6:	12 ff       	sbrs	r17, 2
    a0b8:	04 c0       	rjmp	.+8      	; 0xa0c2 <strtod+0x100>
    a0ba:	81 11       	cpse	r24, r1
    a0bc:	24 c0       	rjmp	.+72     	; 0xa106 <strtod+0x144>
    a0be:	21 96       	adiw	r28, 0x01	; 1
    a0c0:	22 c0       	rjmp	.+68     	; 0xa106 <strtod+0x144>
    a0c2:	81 11       	cpse	r24, r1
    a0c4:	21 97       	sbiw	r28, 0x01	; 1
    a0c6:	a5 e0       	ldi	r26, 0x05	; 5
    a0c8:	b0 e0       	ldi	r27, 0x00	; 0
    a0ca:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <__muluhisi3>
    a0ce:	dc 01       	movw	r26, r24
    a0d0:	cb 01       	movw	r24, r22
    a0d2:	88 0f       	add	r24, r24
    a0d4:	99 1f       	adc	r25, r25
    a0d6:	aa 1f       	adc	r26, r26
    a0d8:	bb 1f       	adc	r27, r27
    a0da:	9c 01       	movw	r18, r24
    a0dc:	ad 01       	movw	r20, r26
    a0de:	2a 0d       	add	r18, r10
    a0e0:	31 1d       	adc	r19, r1
    a0e2:	41 1d       	adc	r20, r1
    a0e4:	51 1d       	adc	r21, r1
    a0e6:	28 39       	cpi	r18, 0x98	; 152
    a0e8:	89 e9       	ldi	r24, 0x99	; 153
    a0ea:	38 07       	cpc	r19, r24
    a0ec:	48 07       	cpc	r20, r24
    a0ee:	89 e1       	ldi	r24, 0x19	; 25
    a0f0:	58 07       	cpc	r21, r24
    a0f2:	48 f0       	brcs	.+18     	; 0xa106 <strtod+0x144>
    a0f4:	16 60       	ori	r17, 0x06	; 6
    a0f6:	06 c0       	rjmp	.+12     	; 0xa104 <strtod+0x142>
    a0f8:	9e ef       	ldi	r25, 0xFE	; 254
    a0fa:	a9 12       	cpse	r10, r25
    a0fc:	0a c0       	rjmp	.+20     	; 0xa112 <strtod+0x150>
    a0fe:	13 fd       	sbrc	r17, 3
    a100:	40 c0       	rjmp	.+128    	; 0xa182 <strtod+0x1c0>
    a102:	18 60       	ori	r17, 0x08	; 8
    a104:	b1 2e       	mov	r11, r17
    a106:	8f ef       	ldi	r24, 0xFF	; 255
    a108:	e8 1a       	sub	r14, r24
    a10a:	f8 0a       	sbc	r15, r24
    a10c:	00 81       	ld	r16, Z
    a10e:	1b 2d       	mov	r17, r11
    a110:	c6 cf       	rjmp	.-116    	; 0xa09e <strtod+0xdc>
    a112:	80 2f       	mov	r24, r16
    a114:	8f 7d       	andi	r24, 0xDF	; 223
    a116:	85 34       	cpi	r24, 0x45	; 69
    a118:	a1 f5       	brne	.+104    	; 0xa182 <strtod+0x1c0>
    a11a:	80 81       	ld	r24, Z
    a11c:	8d 32       	cpi	r24, 0x2D	; 45
    a11e:	11 f4       	brne	.+4      	; 0xa124 <strtod+0x162>
    a120:	10 61       	ori	r17, 0x10	; 16
    a122:	06 c0       	rjmp	.+12     	; 0xa130 <strtod+0x16e>
    a124:	8b 32       	cpi	r24, 0x2B	; 43
    a126:	21 f0       	breq	.+8      	; 0xa130 <strtod+0x16e>
    a128:	31 96       	adiw	r30, 0x01	; 1
    a12a:	61 e0       	ldi	r22, 0x01	; 1
    a12c:	70 e0       	ldi	r23, 0x00	; 0
    a12e:	04 c0       	rjmp	.+8      	; 0xa138 <strtod+0x176>
    a130:	81 81       	ldd	r24, Z+1	; 0x01
    a132:	32 96       	adiw	r30, 0x02	; 2
    a134:	62 e0       	ldi	r22, 0x02	; 2
    a136:	70 e0       	ldi	r23, 0x00	; 0
    a138:	80 53       	subi	r24, 0x30	; 48
    a13a:	8a 30       	cpi	r24, 0x0A	; 10
    a13c:	18 f0       	brcs	.+6      	; 0xa144 <strtod+0x182>
    a13e:	e6 1b       	sub	r30, r22
    a140:	f7 0b       	sbc	r31, r23
    a142:	1f c0       	rjmp	.+62     	; 0xa182 <strtod+0x1c0>
    a144:	60 e0       	ldi	r22, 0x00	; 0
    a146:	70 e0       	ldi	r23, 0x00	; 0
    a148:	60 38       	cpi	r22, 0x80	; 128
    a14a:	9c e0       	ldi	r25, 0x0C	; 12
    a14c:	79 07       	cpc	r23, r25
    a14e:	5c f4       	brge	.+22     	; 0xa166 <strtod+0x1a4>
    a150:	db 01       	movw	r26, r22
    a152:	aa 0f       	add	r26, r26
    a154:	bb 1f       	adc	r27, r27
    a156:	aa 0f       	add	r26, r26
    a158:	bb 1f       	adc	r27, r27
    a15a:	6a 0f       	add	r22, r26
    a15c:	7b 1f       	adc	r23, r27
    a15e:	66 0f       	add	r22, r22
    a160:	77 1f       	adc	r23, r23
    a162:	68 0f       	add	r22, r24
    a164:	71 1d       	adc	r23, r1
    a166:	31 96       	adiw	r30, 0x01	; 1
    a168:	df 01       	movw	r26, r30
    a16a:	11 97       	sbiw	r26, 0x01	; 1
    a16c:	8c 91       	ld	r24, X
    a16e:	80 53       	subi	r24, 0x30	; 48
    a170:	8a 30       	cpi	r24, 0x0A	; 10
    a172:	50 f3       	brcs	.-44     	; 0xa148 <strtod+0x186>
    a174:	14 ff       	sbrs	r17, 4
    a176:	03 c0       	rjmp	.+6      	; 0xa17e <strtod+0x1bc>
    a178:	71 95       	neg	r23
    a17a:	61 95       	neg	r22
    a17c:	71 09       	sbc	r23, r1
    a17e:	c6 0f       	add	r28, r22
    a180:	d7 1f       	adc	r29, r23
    a182:	11 ff       	sbrs	r17, 1
    a184:	08 c0       	rjmp	.+16     	; 0xa196 <strtod+0x1d4>
    a186:	c1 14       	cp	r12, r1
    a188:	d1 04       	cpc	r13, r1
    a18a:	29 f0       	breq	.+10     	; 0xa196 <strtod+0x1d4>
    a18c:	cf 01       	movw	r24, r30
    a18e:	01 97       	sbiw	r24, 0x01	; 1
    a190:	f6 01       	movw	r30, r12
    a192:	80 83       	st	Z, r24
    a194:	91 83       	std	Z+1, r25	; 0x01
    a196:	ca 01       	movw	r24, r20
    a198:	b9 01       	movw	r22, r18
    a19a:	0e 94 e0 49 	call	0x93c0	; 0x93c0 <__floatunsisf>
    a19e:	21 2f       	mov	r18, r17
    a1a0:	23 70       	andi	r18, 0x03	; 3
    a1a2:	23 30       	cpi	r18, 0x03	; 3
    a1a4:	19 f0       	breq	.+6      	; 0xa1ac <strtod+0x1ea>
    a1a6:	4b 01       	movw	r8, r22
    a1a8:	5c 01       	movw	r10, r24
    a1aa:	06 c0       	rjmp	.+12     	; 0xa1b8 <strtod+0x1f6>
    a1ac:	4b 01       	movw	r8, r22
    a1ae:	5c 01       	movw	r10, r24
    a1b0:	b7 fa       	bst	r11, 7
    a1b2:	b0 94       	com	r11
    a1b4:	b7 f8       	bld	r11, 7
    a1b6:	b0 94       	com	r11
    a1b8:	20 e0       	ldi	r18, 0x00	; 0
    a1ba:	30 e0       	ldi	r19, 0x00	; 0
    a1bc:	a9 01       	movw	r20, r18
    a1be:	c5 01       	movw	r24, r10
    a1c0:	b4 01       	movw	r22, r8
    a1c2:	0e 94 33 49 	call	0x9266	; 0x9266 <__cmpsf2>
    a1c6:	88 23       	and	r24, r24
    a1c8:	09 f4       	brne	.+2      	; 0xa1cc <strtod+0x20a>
    a1ca:	3e c0       	rjmp	.+124    	; 0xa248 <strtod+0x286>
    a1cc:	d7 ff       	sbrs	r29, 7
    a1ce:	06 c0       	rjmp	.+12     	; 0xa1dc <strtod+0x21a>
    a1d0:	d1 95       	neg	r29
    a1d2:	c1 95       	neg	r28
    a1d4:	d1 09       	sbc	r29, r1
    a1d6:	0b e4       	ldi	r16, 0x4B	; 75
    a1d8:	12 e0       	ldi	r17, 0x02	; 2
    a1da:	02 c0       	rjmp	.+4      	; 0xa1e0 <strtod+0x21e>
    a1dc:	03 e6       	ldi	r16, 0x63	; 99
    a1de:	12 e0       	ldi	r17, 0x02	; 2
    a1e0:	68 01       	movw	r12, r16
    a1e2:	f8 e1       	ldi	r31, 0x18	; 24
    a1e4:	cf 1a       	sub	r12, r31
    a1e6:	d1 08       	sbc	r13, r1
    a1e8:	90 e2       	ldi	r25, 0x20	; 32
    a1ea:	e9 2e       	mov	r14, r25
    a1ec:	f1 2c       	mov	r15, r1
    a1ee:	ce 15       	cp	r28, r14
    a1f0:	df 05       	cpc	r29, r15
    a1f2:	74 f0       	brlt	.+28     	; 0xa210 <strtod+0x24e>
    a1f4:	f8 01       	movw	r30, r16
    a1f6:	25 91       	lpm	r18, Z+
    a1f8:	35 91       	lpm	r19, Z+
    a1fa:	45 91       	lpm	r20, Z+
    a1fc:	54 91       	lpm	r21, Z
    a1fe:	c5 01       	movw	r24, r10
    a200:	b4 01       	movw	r22, r8
    a202:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <__mulsf3>
    a206:	4b 01       	movw	r8, r22
    a208:	5c 01       	movw	r10, r24
    a20a:	ce 19       	sub	r28, r14
    a20c:	df 09       	sbc	r29, r15
    a20e:	ef cf       	rjmp	.-34     	; 0xa1ee <strtod+0x22c>
    a210:	04 50       	subi	r16, 0x04	; 4
    a212:	11 09       	sbc	r17, r1
    a214:	f5 94       	asr	r15
    a216:	e7 94       	ror	r14
    a218:	0c 15       	cp	r16, r12
    a21a:	1d 05       	cpc	r17, r13
    a21c:	41 f7       	brne	.-48     	; 0xa1ee <strtod+0x22c>
    a21e:	8a 2d       	mov	r24, r10
    a220:	88 0f       	add	r24, r24
    a222:	8b 2d       	mov	r24, r11
    a224:	88 1f       	adc	r24, r24
    a226:	8f 3f       	cpi	r24, 0xFF	; 255
    a228:	49 f0       	breq	.+18     	; 0xa23c <strtod+0x27a>
    a22a:	20 e0       	ldi	r18, 0x00	; 0
    a22c:	30 e0       	ldi	r19, 0x00	; 0
    a22e:	a9 01       	movw	r20, r18
    a230:	c5 01       	movw	r24, r10
    a232:	b4 01       	movw	r22, r8
    a234:	0e 94 33 49 	call	0x9266	; 0x9266 <__cmpsf2>
    a238:	81 11       	cpse	r24, r1
    a23a:	06 c0       	rjmp	.+12     	; 0xa248 <strtod+0x286>
    a23c:	82 e2       	ldi	r24, 0x22	; 34
    a23e:	90 e0       	ldi	r25, 0x00	; 0
    a240:	80 93 67 49 	sts	0x4967, r24	; 0x804967 <errno>
    a244:	90 93 68 49 	sts	0x4968, r25	; 0x804968 <errno+0x1>
    a248:	c5 01       	movw	r24, r10
    a24a:	b4 01       	movw	r22, r8
    a24c:	09 c0       	rjmp	.+18     	; 0xa260 <strtod+0x29e>
    a24e:	60 e0       	ldi	r22, 0x00	; 0
    a250:	70 e0       	ldi	r23, 0x00	; 0
    a252:	80 e8       	ldi	r24, 0x80	; 128
    a254:	9f ef       	ldi	r25, 0xFF	; 255
    a256:	04 c0       	rjmp	.+8      	; 0xa260 <strtod+0x29e>
    a258:	60 e0       	ldi	r22, 0x00	; 0
    a25a:	70 e0       	ldi	r23, 0x00	; 0
    a25c:	80 ec       	ldi	r24, 0xC0	; 192
    a25e:	9f e7       	ldi	r25, 0x7F	; 127
    a260:	df 91       	pop	r29
    a262:	cf 91       	pop	r28
    a264:	1f 91       	pop	r17
    a266:	0f 91       	pop	r16
    a268:	ff 90       	pop	r15
    a26a:	ef 90       	pop	r14
    a26c:	df 90       	pop	r13
    a26e:	cf 90       	pop	r12
    a270:	bf 90       	pop	r11
    a272:	af 90       	pop	r10
    a274:	9f 90       	pop	r9
    a276:	8f 90       	pop	r8
    a278:	08 95       	ret

0000a27a <isspace>:
    a27a:	91 11       	cpse	r25, r1
    a27c:	0c 94 0e 52 	jmp	0xa41c	; 0xa41c <__ctype_isfalse>
    a280:	80 32       	cpi	r24, 0x20	; 32
    a282:	19 f0       	breq	.+6      	; 0xa28a <isspace+0x10>
    a284:	89 50       	subi	r24, 0x09	; 9
    a286:	85 50       	subi	r24, 0x05	; 5
    a288:	c8 f7       	brcc	.-14     	; 0xa27c <isspace+0x2>
    a28a:	08 95       	ret

0000a28c <strncasecmp_P>:
    a28c:	fb 01       	movw	r30, r22
    a28e:	dc 01       	movw	r26, r24
    a290:	41 50       	subi	r20, 0x01	; 1
    a292:	50 40       	sbci	r21, 0x00	; 0
    a294:	88 f0       	brcs	.+34     	; 0xa2b8 <strncasecmp_P+0x2c>
    a296:	8d 91       	ld	r24, X+
    a298:	81 34       	cpi	r24, 0x41	; 65
    a29a:	1c f0       	brlt	.+6      	; 0xa2a2 <strncasecmp_P+0x16>
    a29c:	8b 35       	cpi	r24, 0x5B	; 91
    a29e:	0c f4       	brge	.+2      	; 0xa2a2 <strncasecmp_P+0x16>
    a2a0:	80 5e       	subi	r24, 0xE0	; 224
    a2a2:	65 91       	lpm	r22, Z+
    a2a4:	61 34       	cpi	r22, 0x41	; 65
    a2a6:	1c f0       	brlt	.+6      	; 0xa2ae <strncasecmp_P+0x22>
    a2a8:	6b 35       	cpi	r22, 0x5B	; 91
    a2aa:	0c f4       	brge	.+2      	; 0xa2ae <strncasecmp_P+0x22>
    a2ac:	60 5e       	subi	r22, 0xE0	; 224
    a2ae:	86 1b       	sub	r24, r22
    a2b0:	61 11       	cpse	r22, r1
    a2b2:	71 f3       	breq	.-36     	; 0xa290 <strncasecmp_P+0x4>
    a2b4:	99 0b       	sbc	r25, r25
    a2b6:	08 95       	ret
    a2b8:	88 1b       	sub	r24, r24
    a2ba:	fc cf       	rjmp	.-8      	; 0xa2b4 <strncasecmp_P+0x28>

0000a2bc <strnlen_P>:
    a2bc:	fc 01       	movw	r30, r24
    a2be:	05 90       	lpm	r0, Z+
    a2c0:	61 50       	subi	r22, 0x01	; 1
    a2c2:	70 40       	sbci	r23, 0x00	; 0
    a2c4:	01 10       	cpse	r0, r1
    a2c6:	d8 f7       	brcc	.-10     	; 0xa2be <strnlen_P+0x2>
    a2c8:	80 95       	com	r24
    a2ca:	90 95       	com	r25
    a2cc:	8e 0f       	add	r24, r30
    a2ce:	9f 1f       	adc	r25, r31
    a2d0:	08 95       	ret

0000a2d2 <strnlen>:
    a2d2:	fc 01       	movw	r30, r24
    a2d4:	61 50       	subi	r22, 0x01	; 1
    a2d6:	70 40       	sbci	r23, 0x00	; 0
    a2d8:	01 90       	ld	r0, Z+
    a2da:	01 10       	cpse	r0, r1
    a2dc:	d8 f7       	brcc	.-10     	; 0xa2d4 <strnlen+0x2>
    a2de:	80 95       	com	r24
    a2e0:	90 95       	com	r25
    a2e2:	8e 0f       	add	r24, r30
    a2e4:	9f 1f       	adc	r25, r31
    a2e6:	08 95       	ret

0000a2e8 <fputc>:
    a2e8:	0f 93       	push	r16
    a2ea:	1f 93       	push	r17
    a2ec:	cf 93       	push	r28
    a2ee:	df 93       	push	r29
    a2f0:	fb 01       	movw	r30, r22
    a2f2:	23 81       	ldd	r18, Z+3	; 0x03
    a2f4:	21 fd       	sbrc	r18, 1
    a2f6:	03 c0       	rjmp	.+6      	; 0xa2fe <fputc+0x16>
    a2f8:	8f ef       	ldi	r24, 0xFF	; 255
    a2fa:	9f ef       	ldi	r25, 0xFF	; 255
    a2fc:	2c c0       	rjmp	.+88     	; 0xa356 <fputc+0x6e>
    a2fe:	22 ff       	sbrs	r18, 2
    a300:	16 c0       	rjmp	.+44     	; 0xa32e <fputc+0x46>
    a302:	46 81       	ldd	r20, Z+6	; 0x06
    a304:	57 81       	ldd	r21, Z+7	; 0x07
    a306:	24 81       	ldd	r18, Z+4	; 0x04
    a308:	35 81       	ldd	r19, Z+5	; 0x05
    a30a:	42 17       	cp	r20, r18
    a30c:	53 07       	cpc	r21, r19
    a30e:	44 f4       	brge	.+16     	; 0xa320 <fputc+0x38>
    a310:	a0 81       	ld	r26, Z
    a312:	b1 81       	ldd	r27, Z+1	; 0x01
    a314:	9d 01       	movw	r18, r26
    a316:	2f 5f       	subi	r18, 0xFF	; 255
    a318:	3f 4f       	sbci	r19, 0xFF	; 255
    a31a:	20 83       	st	Z, r18
    a31c:	31 83       	std	Z+1, r19	; 0x01
    a31e:	8c 93       	st	X, r24
    a320:	26 81       	ldd	r18, Z+6	; 0x06
    a322:	37 81       	ldd	r19, Z+7	; 0x07
    a324:	2f 5f       	subi	r18, 0xFF	; 255
    a326:	3f 4f       	sbci	r19, 0xFF	; 255
    a328:	26 83       	std	Z+6, r18	; 0x06
    a32a:	37 83       	std	Z+7, r19	; 0x07
    a32c:	14 c0       	rjmp	.+40     	; 0xa356 <fputc+0x6e>
    a32e:	8b 01       	movw	r16, r22
    a330:	ec 01       	movw	r28, r24
    a332:	fb 01       	movw	r30, r22
    a334:	00 84       	ldd	r0, Z+8	; 0x08
    a336:	f1 85       	ldd	r31, Z+9	; 0x09
    a338:	e0 2d       	mov	r30, r0
    a33a:	09 95       	icall
    a33c:	89 2b       	or	r24, r25
    a33e:	e1 f6       	brne	.-72     	; 0xa2f8 <fputc+0x10>
    a340:	d8 01       	movw	r26, r16
    a342:	16 96       	adiw	r26, 0x06	; 6
    a344:	8d 91       	ld	r24, X+
    a346:	9c 91       	ld	r25, X
    a348:	17 97       	sbiw	r26, 0x07	; 7
    a34a:	01 96       	adiw	r24, 0x01	; 1
    a34c:	16 96       	adiw	r26, 0x06	; 6
    a34e:	8d 93       	st	X+, r24
    a350:	9c 93       	st	X, r25
    a352:	17 97       	sbiw	r26, 0x07	; 7
    a354:	ce 01       	movw	r24, r28
    a356:	df 91       	pop	r29
    a358:	cf 91       	pop	r28
    a35a:	1f 91       	pop	r17
    a35c:	0f 91       	pop	r16
    a35e:	08 95       	ret

0000a360 <__ultoa_invert>:
    a360:	fa 01       	movw	r30, r20
    a362:	aa 27       	eor	r26, r26
    a364:	28 30       	cpi	r18, 0x08	; 8
    a366:	51 f1       	breq	.+84     	; 0xa3bc <__ultoa_invert+0x5c>
    a368:	20 31       	cpi	r18, 0x10	; 16
    a36a:	81 f1       	breq	.+96     	; 0xa3cc <__ultoa_invert+0x6c>
    a36c:	e8 94       	clt
    a36e:	6f 93       	push	r22
    a370:	6e 7f       	andi	r22, 0xFE	; 254
    a372:	6e 5f       	subi	r22, 0xFE	; 254
    a374:	7f 4f       	sbci	r23, 0xFF	; 255
    a376:	8f 4f       	sbci	r24, 0xFF	; 255
    a378:	9f 4f       	sbci	r25, 0xFF	; 255
    a37a:	af 4f       	sbci	r26, 0xFF	; 255
    a37c:	b1 e0       	ldi	r27, 0x01	; 1
    a37e:	3e d0       	rcall	.+124    	; 0xa3fc <__ultoa_invert+0x9c>
    a380:	b4 e0       	ldi	r27, 0x04	; 4
    a382:	3c d0       	rcall	.+120    	; 0xa3fc <__ultoa_invert+0x9c>
    a384:	67 0f       	add	r22, r23
    a386:	78 1f       	adc	r23, r24
    a388:	89 1f       	adc	r24, r25
    a38a:	9a 1f       	adc	r25, r26
    a38c:	a1 1d       	adc	r26, r1
    a38e:	68 0f       	add	r22, r24
    a390:	79 1f       	adc	r23, r25
    a392:	8a 1f       	adc	r24, r26
    a394:	91 1d       	adc	r25, r1
    a396:	a1 1d       	adc	r26, r1
    a398:	6a 0f       	add	r22, r26
    a39a:	71 1d       	adc	r23, r1
    a39c:	81 1d       	adc	r24, r1
    a39e:	91 1d       	adc	r25, r1
    a3a0:	a1 1d       	adc	r26, r1
    a3a2:	20 d0       	rcall	.+64     	; 0xa3e4 <__ultoa_invert+0x84>
    a3a4:	09 f4       	brne	.+2      	; 0xa3a8 <__ultoa_invert+0x48>
    a3a6:	68 94       	set
    a3a8:	3f 91       	pop	r19
    a3aa:	2a e0       	ldi	r18, 0x0A	; 10
    a3ac:	26 9f       	mul	r18, r22
    a3ae:	11 24       	eor	r1, r1
    a3b0:	30 19       	sub	r19, r0
    a3b2:	30 5d       	subi	r19, 0xD0	; 208
    a3b4:	31 93       	st	Z+, r19
    a3b6:	de f6       	brtc	.-74     	; 0xa36e <__ultoa_invert+0xe>
    a3b8:	cf 01       	movw	r24, r30
    a3ba:	08 95       	ret
    a3bc:	46 2f       	mov	r20, r22
    a3be:	47 70       	andi	r20, 0x07	; 7
    a3c0:	40 5d       	subi	r20, 0xD0	; 208
    a3c2:	41 93       	st	Z+, r20
    a3c4:	b3 e0       	ldi	r27, 0x03	; 3
    a3c6:	0f d0       	rcall	.+30     	; 0xa3e6 <__ultoa_invert+0x86>
    a3c8:	c9 f7       	brne	.-14     	; 0xa3bc <__ultoa_invert+0x5c>
    a3ca:	f6 cf       	rjmp	.-20     	; 0xa3b8 <__ultoa_invert+0x58>
    a3cc:	46 2f       	mov	r20, r22
    a3ce:	4f 70       	andi	r20, 0x0F	; 15
    a3d0:	40 5d       	subi	r20, 0xD0	; 208
    a3d2:	4a 33       	cpi	r20, 0x3A	; 58
    a3d4:	18 f0       	brcs	.+6      	; 0xa3dc <__ultoa_invert+0x7c>
    a3d6:	49 5d       	subi	r20, 0xD9	; 217
    a3d8:	31 fd       	sbrc	r19, 1
    a3da:	40 52       	subi	r20, 0x20	; 32
    a3dc:	41 93       	st	Z+, r20
    a3de:	02 d0       	rcall	.+4      	; 0xa3e4 <__ultoa_invert+0x84>
    a3e0:	a9 f7       	brne	.-22     	; 0xa3cc <__ultoa_invert+0x6c>
    a3e2:	ea cf       	rjmp	.-44     	; 0xa3b8 <__ultoa_invert+0x58>
    a3e4:	b4 e0       	ldi	r27, 0x04	; 4
    a3e6:	a6 95       	lsr	r26
    a3e8:	97 95       	ror	r25
    a3ea:	87 95       	ror	r24
    a3ec:	77 95       	ror	r23
    a3ee:	67 95       	ror	r22
    a3f0:	ba 95       	dec	r27
    a3f2:	c9 f7       	brne	.-14     	; 0xa3e6 <__ultoa_invert+0x86>
    a3f4:	00 97       	sbiw	r24, 0x00	; 0
    a3f6:	61 05       	cpc	r22, r1
    a3f8:	71 05       	cpc	r23, r1
    a3fa:	08 95       	ret
    a3fc:	9b 01       	movw	r18, r22
    a3fe:	ac 01       	movw	r20, r24
    a400:	0a 2e       	mov	r0, r26
    a402:	06 94       	lsr	r0
    a404:	57 95       	ror	r21
    a406:	47 95       	ror	r20
    a408:	37 95       	ror	r19
    a40a:	27 95       	ror	r18
    a40c:	ba 95       	dec	r27
    a40e:	c9 f7       	brne	.-14     	; 0xa402 <__ultoa_invert+0xa2>
    a410:	62 0f       	add	r22, r18
    a412:	73 1f       	adc	r23, r19
    a414:	84 1f       	adc	r24, r20
    a416:	95 1f       	adc	r25, r21
    a418:	a0 1d       	adc	r26, r0
    a41a:	08 95       	ret

0000a41c <__ctype_isfalse>:
    a41c:	99 27       	eor	r25, r25
    a41e:	88 27       	eor	r24, r24

0000a420 <__ctype_istrue>:
    a420:	08 95       	ret

0000a422 <eeprom_read_byte>:
    a422:	03 d0       	rcall	.+6      	; 0xa42a <eeprom_mapen>
    a424:	80 81       	ld	r24, Z
    a426:	99 27       	eor	r25, r25
    a428:	08 95       	ret

0000a42a <eeprom_mapen>:
    a42a:	fc 01       	movw	r30, r24
    a42c:	e0 50       	subi	r30, 0x00	; 0
    a42e:	fc 4e       	sbci	r31, 0xEC	; 236
    a430:	08 95       	ret

0000a432 <eeprom_read_dword>:
    a432:	0e 94 15 52 	call	0xa42a	; 0xa42a <eeprom_mapen>
    a436:	60 81       	ld	r22, Z
    a438:	71 81       	ldd	r23, Z+1	; 0x01
    a43a:	82 81       	ldd	r24, Z+2	; 0x02
    a43c:	93 81       	ldd	r25, Z+3	; 0x03
    a43e:	08 95       	ret

0000a440 <eeprom_read_word>:
    a440:	0e 94 15 52 	call	0xa42a	; 0xa42a <eeprom_mapen>
    a444:	80 81       	ld	r24, Z
    a446:	91 81       	ldd	r25, Z+1	; 0x01
    a448:	08 95       	ret

0000a44a <__divmodqi4>:
    a44a:	87 fb       	bst	r24, 7
    a44c:	08 2e       	mov	r0, r24
    a44e:	06 26       	eor	r0, r22
    a450:	87 fd       	sbrc	r24, 7
    a452:	81 95       	neg	r24
    a454:	67 fd       	sbrc	r22, 7
    a456:	61 95       	neg	r22
    a458:	0e 94 3a 52 	call	0xa474	; 0xa474 <__udivmodqi4>
    a45c:	0e f4       	brtc	.+2      	; 0xa460 <__divmodqi4_1>
    a45e:	91 95       	neg	r25

0000a460 <__divmodqi4_1>:
    a460:	07 fc       	sbrc	r0, 7
    a462:	81 95       	neg	r24

0000a464 <__divmodqi4_exit>:
    a464:	08 95       	ret

0000a466 <__xload_1>:
    a466:	57 fd       	sbrc	r21, 7
    a468:	03 c0       	rjmp	.+6      	; 0xa470 <__xload_1+0xa>
    a46a:	5b bf       	out	0x3b, r21	; 59
    a46c:	67 91       	elpm	r22, Z+
    a46e:	08 95       	ret
    a470:	60 81       	ld	r22, Z
    a472:	08 95       	ret

0000a474 <__udivmodqi4>:
    a474:	99 1b       	sub	r25, r25
    a476:	79 e0       	ldi	r23, 0x09	; 9
    a478:	04 c0       	rjmp	.+8      	; 0xa482 <__udivmodqi4_ep>

0000a47a <__udivmodqi4_loop>:
    a47a:	99 1f       	adc	r25, r25
    a47c:	96 17       	cp	r25, r22
    a47e:	08 f0       	brcs	.+2      	; 0xa482 <__udivmodqi4_ep>
    a480:	96 1b       	sub	r25, r22

0000a482 <__udivmodqi4_ep>:
    a482:	88 1f       	adc	r24, r24
    a484:	7a 95       	dec	r23
    a486:	c9 f7       	brne	.-14     	; 0xa47a <__udivmodqi4_loop>
    a488:	80 95       	com	r24
    a48a:	08 95       	ret

0000a48c <__do_global_dtors>:
    a48c:	11 e0       	ldi	r17, 0x01	; 1
    a48e:	cc e9       	ldi	r28, 0x9C	; 156
    a490:	d1 e0       	ldi	r29, 0x01	; 1
    a492:	04 c0       	rjmp	.+8      	; 0xa49c <__do_global_dtors+0x10>
    a494:	fe 01       	movw	r30, r28
    a496:	0e 94 be 4b 	call	0x977c	; 0x977c <__tablejump2__>
    a49a:	21 96       	adiw	r28, 0x01	; 1
    a49c:	ce 39       	cpi	r28, 0x9E	; 158
    a49e:	d1 07       	cpc	r29, r17
    a4a0:	c9 f7       	brne	.-14     	; 0xa494 <__do_global_dtors+0x8>
    a4a2:	f8 94       	cli

0000a4a4 <__stop_program>:
    a4a4:	ff cf       	rjmp	.-2      	; 0xa4a4 <__stop_program>
