
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006b0  00804000  0000a9a6  0000aa5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a9a6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040f  008046b0  008046b0  0000b10a  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  0000b10a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000b13f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000b19c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000009c0  00000000  00000000  0000b1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000135f0  00000000  00000000  0000bba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005c92  00000000  00000000  0001f190  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008283  00000000  00000000  00024e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001f5c  00000000  00000000  0002d0a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006045  00000000  00000000  0002f004  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b4e6  00000000  00000000  00035049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000978  00000000  00000000  0004052f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__dtors_end>
       4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
       8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
       c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      10:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      14:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      18:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__vector_6>
      1c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      20:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      24:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      28:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      2c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      30:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__vector_12>
      34:	0c 94 27 46 	jmp	0x8c4e	; 0x8c4e <__vector_13>
      38:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      3c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      40:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      44:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      48:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      4c:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_19>
      50:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_20>
      54:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      58:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      5c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      60:	0c 94 b5 2a 	jmp	0x556a	; 0x556a <__vector_24>
      64:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      68:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      6c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      70:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      74:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__vector_29>
      78:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_30>
      7c:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_31>
      80:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_32>
      84:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      88:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      8c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      90:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      94:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      98:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      9c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      a0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      a4:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_41>
      a8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      ac:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      b0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      b4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      b8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      bc:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      c0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      c4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      c8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      cc:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      d0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      d4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      d8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      dc:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__vector_55>
      e0:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__vector_56>
      e4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      e8:	3d 24       	eor	r3, r13
      ea:	4d 24       	eor	r4, r13
      ec:	62 24       	eor	r6, r2
      ee:	77 24       	eor	r7, r7
      f0:	8c 24       	eor	r8, r12
      f2:	c7 25       	eor	r28, r7
      f4:	bb 25       	eor	r27, r11
      f6:	c3 24       	eor	r12, r3
      f8:	d0 24       	eor	r13, r0
      fa:	e2 24       	eor	r14, r2
      fc:	f4 24       	eor	r15, r4
      fe:	06 25       	eor	r16, r6
     100:	3f 25       	eor	r19, r15
     102:	4c 25       	eor	r20, r12
     104:	5e 25       	eor	r21, r14
     106:	70 25       	eor	r23, r0
     108:	82 25       	eor	r24, r2
     10a:	d6 32       	cpi	r29, 0x26	; 38
     10c:	dc 32       	cpi	r29, 0x2C	; 44
     10e:	be 32       	cpi	r27, 0x2E	; 46
     110:	dc 32       	cpi	r29, 0x2C	; 44
     112:	dc 32       	cpi	r29, 0x2C	; 44
     114:	dc 32       	cpi	r29, 0x2C	; 44
     116:	c7 32       	cpi	r28, 0x27	; 39
     118:	dc 32       	cpi	r29, 0x2C	; 44
     11a:	dc 32       	cpi	r29, 0x2C	; 44
     11c:	dc 32       	cpi	r29, 0x2C	; 44
     11e:	85 32       	cpi	r24, 0x25	; 37
     120:	dc 32       	cpi	r29, 0x2C	; 44
     122:	dc 32       	cpi	r29, 0x2C	; 44
     124:	dc 32       	cpi	r29, 0x2C	; 44
     126:	dc 32       	cpi	r29, 0x2C	; 44
     128:	dc 32       	cpi	r29, 0x2C	; 44
     12a:	dc 32       	cpi	r29, 0x2C	; 44
     12c:	dc 32       	cpi	r29, 0x2C	; 44
     12e:	dc 32       	cpi	r29, 0x2C	; 44
     130:	dc 32       	cpi	r29, 0x2C	; 44
     132:	dc 32       	cpi	r29, 0x2C	; 44
     134:	dc 32       	cpi	r29, 0x2C	; 44
     136:	dc 32       	cpi	r29, 0x2C	; 44
     138:	dc 32       	cpi	r29, 0x2C	; 44
     13a:	dc 32       	cpi	r29, 0x2C	; 44
     13c:	dc 32       	cpi	r29, 0x2C	; 44
     13e:	dc 32       	cpi	r29, 0x2C	; 44
     140:	dc 32       	cpi	r29, 0x2C	; 44
     142:	dc 32       	cpi	r29, 0x2C	; 44
     144:	dc 32       	cpi	r29, 0x2C	; 44
     146:	dc 32       	cpi	r29, 0x2C	; 44
     148:	9b 32       	cpi	r25, 0x2B	; 43
     14a:	dc 32       	cpi	r29, 0x2C	; 44
     14c:	dc 32       	cpi	r29, 0x2C	; 44
     14e:	dc 32       	cpi	r29, 0x2C	; 44
     150:	dc 32       	cpi	r29, 0x2C	; 44
     152:	dc 32       	cpi	r29, 0x2C	; 44
     154:	dc 32       	cpi	r29, 0x2C	; 44
     156:	dc 32       	cpi	r29, 0x2C	; 44
     158:	dc 32       	cpi	r29, 0x2C	; 44
     15a:	b2 32       	cpi	r27, 0x22	; 34
     15c:	b8 32       	cpi	r27, 0x28	; 40
     15e:	d0 32       	cpi	r29, 0x20	; 32
     160:	6c 32       	cpi	r22, 0x2C	; 44
     162:	dc 32       	cpi	r29, 0x2C	; 44
     164:	dc 32       	cpi	r29, 0x2C	; 44
     166:	dc 32       	cpi	r29, 0x2C	; 44
     168:	75 32       	cpi	r23, 0x25	; 37
     16a:	dc 32       	cpi	r29, 0x2C	; 44
     16c:	dc 32       	cpi	r29, 0x2C	; 44
     16e:	dc 32       	cpi	r29, 0x2C	; 44
     170:	7e 32       	cpi	r23, 0x2E	; 46
     172:	1b 3b       	cpi	r17, 0xBB	; 187
     174:	df 3a       	cpi	r29, 0xAF	; 175
     176:	0b 3b       	cpi	r16, 0xBB	; 187
     178:	23 3b       	cpi	r18, 0xB3	; 179
     17a:	0f 3b       	cpi	r16, 0xBF	; 191
     17c:	23 3b       	cpi	r18, 0xB3	; 179
     17e:	ef 3a       	cpi	r30, 0xAF	; 175
     180:	db 3a       	cpi	r29, 0xAB	; 171
     182:	e7 3a       	cpi	r30, 0xA7	; 167
     184:	eb 3a       	cpi	r30, 0xAB	; 171
     186:	23 3b       	cpi	r18, 0xB3	; 179
     188:	ff 3a       	cpi	r31, 0xAF	; 175
     18a:	d3 3a       	cpi	r29, 0xA3	; 163
     18c:	03 3b       	cpi	r16, 0xB3	; 179
     18e:	cf 3a       	cpi	r28, 0xAF	; 175
     190:	e3 3a       	cpi	r30, 0xA3	; 163
     192:	a7 3a       	cpi	r26, 0xA7	; 167
     194:	ab 3a       	cpi	r26, 0xAB	; 171
     196:	af 3a       	cpi	r26, 0xAF	; 175
     198:	b3 3a       	cpi	r27, 0xA3	; 163
     19a:	b7 3a       	cpi	r27, 0xA7	; 167
     19c:	bb 3a       	cpi	r27, 0xAB	; 171
     19e:	bf 3a       	cpi	r27, 0xAF	; 175
     1a0:	c3 3a       	cpi	r28, 0xA3	; 163
     1a2:	c7 3a       	cpi	r28, 0xA7	; 167
     1a4:	cb 3a       	cpi	r28, 0xAB	; 171
     1a6:	f3 3a       	cpi	r31, 0xA3	; 163
     1a8:	f7 3a       	cpi	r31, 0xA7	; 167
     1aa:	1f 3b       	cpi	r17, 0xBF	; 191
     1ac:	fb 3a       	cpi	r31, 0xAB	; 171
     1ae:	23 3b       	cpi	r18, 0xB3	; 179
     1b0:	d7 3a       	cpi	r29, 0xA7	; 167
     1b2:	13 3b       	cpi	r17, 0xB3	; 179
     1b4:	3f 3a       	cpi	r19, 0xAF	; 175
     1b6:	43 3a       	cpi	r20, 0xA3	; 163
     1b8:	47 3a       	cpi	r20, 0xA7	; 167
     1ba:	4b 3a       	cpi	r20, 0xAB	; 171
     1bc:	4f 3a       	cpi	r20, 0xAF	; 175
     1be:	53 3a       	cpi	r21, 0xA3	; 163
     1c0:	57 3a       	cpi	r21, 0xA7	; 167
     1c2:	5b 3a       	cpi	r21, 0xAB	; 171
     1c4:	5f 3a       	cpi	r21, 0xAF	; 175
     1c6:	63 3a       	cpi	r22, 0xA3	; 163
     1c8:	67 3a       	cpi	r22, 0xA7	; 167
     1ca:	6b 3a       	cpi	r22, 0xAB	; 171
     1cc:	6f 3a       	cpi	r22, 0xAF	; 175
     1ce:	73 3a       	cpi	r23, 0xA3	; 163
     1d0:	77 3a       	cpi	r23, 0xA7	; 167
     1d2:	7b 3a       	cpi	r23, 0xAB	; 171
     1d4:	7f 3a       	cpi	r23, 0xAF	; 175
     1d6:	83 3a       	cpi	r24, 0xA3	; 163
     1d8:	87 3a       	cpi	r24, 0xA7	; 167
     1da:	8b 3a       	cpi	r24, 0xAB	; 171
     1dc:	8f 3a       	cpi	r24, 0xAF	; 175
     1de:	93 3a       	cpi	r25, 0xA3	; 163
     1e0:	97 3a       	cpi	r25, 0xA7	; 167
     1e2:	9b 3a       	cpi	r25, 0xAB	; 171
     1e4:	9f 3a       	cpi	r25, 0xAF	; 175
     1e6:	a3 3a       	cpi	r26, 0xA3	; 163
     1e8:	23 3b       	cpi	r18, 0xB3	; 179
     1ea:	23 3b       	cpi	r18, 0xB3	; 179
     1ec:	23 3b       	cpi	r18, 0xB3	; 179
     1ee:	23 3b       	cpi	r18, 0xB3	; 179
     1f0:	07 3b       	cpi	r16, 0xB7	; 183
     1f2:	23 3b       	cpi	r18, 0xB3	; 179
     1f4:	23 3b       	cpi	r18, 0xB3	; 179
     1f6:	23 3b       	cpi	r18, 0xB3	; 179
     1f8:	23 3b       	cpi	r18, 0xB3	; 179
     1fa:	23 3b       	cpi	r18, 0xB3	; 179
     1fc:	23 3b       	cpi	r18, 0xB3	; 179
     1fe:	23 3b       	cpi	r18, 0xB3	; 179
     200:	23 3b       	cpi	r18, 0xB3	; 179
     202:	23 3b       	cpi	r18, 0xB3	; 179
     204:	23 3b       	cpi	r18, 0xB3	; 179
     206:	23 3b       	cpi	r18, 0xB3	; 179
     208:	23 3b       	cpi	r18, 0xB3	; 179
     20a:	23 3b       	cpi	r18, 0xB3	; 179
     20c:	23 3b       	cpi	r18, 0xB3	; 179
     20e:	23 3b       	cpi	r18, 0xB3	; 179
     210:	23 3b       	cpi	r18, 0xB3	; 179
     212:	23 3b       	cpi	r18, 0xB3	; 179
     214:	23 3b       	cpi	r18, 0xB3	; 179
     216:	23 3b       	cpi	r18, 0xB3	; 179
     218:	23 3b       	cpi	r18, 0xB3	; 179
     21a:	23 3b       	cpi	r18, 0xB3	; 179
     21c:	23 3b       	cpi	r18, 0xB3	; 179
     21e:	23 3b       	cpi	r18, 0xB3	; 179
     220:	23 3b       	cpi	r18, 0xB3	; 179
     222:	23 3b       	cpi	r18, 0xB3	; 179
     224:	23 3b       	cpi	r18, 0xB3	; 179
     226:	23 3b       	cpi	r18, 0xB3	; 179
     228:	23 3b       	cpi	r18, 0xB3	; 179
     22a:	17 3b       	cpi	r17, 0xB7	; 183
     22c:	79 4a       	sbci	r23, 0xA9	; 169
     22e:	83 4a       	sbci	r24, 0xA3	; 163
     230:	8d 4a       	sbci	r24, 0xAD	; 173
     232:	97 4a       	sbci	r25, 0xA7	; 167
     234:	a1 4a       	sbci	r26, 0xA1	; 161
     236:	ab 4a       	sbci	r26, 0xAB	; 171
     238:	b5 4a       	sbci	r27, 0xA5	; 165
     23a:	bf 4a       	sbci	r27, 0xAF	; 175
     23c:	c9 4a       	sbci	r28, 0xA9	; 169
     23e:	d3 4a       	sbci	r29, 0xA3	; 163
     240:	dd 4a       	sbci	r29, 0xAD	; 173
     242:	e7 4a       	sbci	r30, 0xA7	; 167
     244:	f1 4a       	sbci	r31, 0xA1	; 161
     246:	fb 4a       	sbci	r31, 0xAB	; 171
     248:	05 4b       	sbci	r16, 0xB5	; 181
     24a:	0f 4b       	sbci	r16, 0xBF	; 191
     24c:	19 4b       	sbci	r17, 0xB9	; 185
     24e:	23 4b       	sbci	r18, 0xB3	; 179

00000250 <__trampolines_end>:
     250:	4e 41       	sbci	r20, 0x1E	; 30
     252:	4e 49       	Address 0x00000252 is out of bounds.
.word	0xffff	; ????

00000253 <pstr_inity>:
     253:	49 4e 49 54 59                                      INITY

00000258 <pstr_inf>:
     258:	49 4e 46                                            INF

0000025b <pwr_m10>:
     25b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     26b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000273 <pwr_p10>:
     273:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     283:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000028b <strfmonths>:
     28b:	4a 61 6e 75 61 72 79 20 46 65 62 72 75 61 72 79     January February
     29b:	20 4d 61 72 63 68 20 41 70 72 69 6c 20 4d 61 79      March April May
     2ab:	20 4a 75 6e 65 20 4a 75 6c 79 20 41 75 67 75 73      June July Augus
     2bb:	74 20 53 65 70 74 65 6d 62 65 72 20 4f 63 74 6f     t September Octo
     2cb:	62 65 72 20 4e 6f 76 65 6d 62 65 72 20 44 65 63     ber November Dec
     2db:	65 6d 62 65 72 20 00                                ember .

000002e2 <strfwkdays>:
     2e2:	53 75 6e 64 61 79 20 4d 6f 6e 64 61 79 20 54 75     Sunday Monday Tu
     2f2:	65 73 64 61 79 20 57 65 64 6e 65 73 64 61 79 20     esday Wednesday 
     302:	54 68 75 72 73 64 61 79 20 46 72 69 64 61 79 20     Thursday Friday 
     312:	53 61 74 75 72 64 61 79 20 00                       Saturday .

0000031c <ascdays>:
     31c:	53 75 6e 4d 6f 6e 54 75 65 57 65 64 54 68 75 46     SunMonTueWedThuF
     32c:	72 69 53 61 74 00                                   riSat.

00000332 <ascmonths>:
     332:	4a 61 6e 46 65 62 4d 61 72 41 70 72 4d 61 79 4a     JanFebMarAprMayJ
     342:	75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f     unJulAugSepOctNo
     352:	76 44 65 63 00 00                                   vDec..

00000358 <__ctors_start>:
     358:	f3 29       	or	r31, r3
     35a:	e5 2a       	or	r14, r21

0000035c <__ctors_end>:
     35c:	fa 29       	or	r31, r10
     35e:	ec 2a       	or	r14, r28

00000360 <__dtors_end>:
     360:	11 24       	eor	r1, r1
     362:	1f be       	out	0x3f, r1	; 63
     364:	cf ef       	ldi	r28, 0xFF	; 255
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df e7       	ldi	r29, 0x7F	; 127
     36a:	de bf       	out	0x3e, r29	; 62

0000036c <__do_copy_data>:
     36c:	16 e4       	ldi	r17, 0x46	; 70
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e4       	ldi	r27, 0x40	; 64
     372:	e6 ea       	ldi	r30, 0xA6	; 166
     374:	f9 ea       	ldi	r31, 0xA9	; 169
     376:	00 e0       	ldi	r16, 0x00	; 0
     378:	0b bf       	out	0x3b, r16	; 59
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__do_copy_data+0x14>
     37c:	07 90       	elpm	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	a0 3b       	cpi	r26, 0xB0	; 176
     382:	b1 07       	cpc	r27, r17
     384:	d9 f7       	brne	.-10     	; 0x37c <__do_copy_data+0x10>

00000386 <__do_clear_bss>:
     386:	2a e4       	ldi	r18, 0x4A	; 74
     388:	a0 eb       	ldi	r26, 0xB0	; 176
     38a:	b6 e4       	ldi	r27, 0x46	; 70
     38c:	01 c0       	rjmp	.+2      	; 0x390 <.do_clear_bss_start>

0000038e <.do_clear_bss_loop>:
     38e:	1d 92       	st	X+, r1

00000390 <.do_clear_bss_start>:
     390:	af 3b       	cpi	r26, 0xBF	; 191
     392:	b2 07       	cpc	r27, r18
     394:	e1 f7       	brne	.-8      	; 0x38e <.do_clear_bss_loop>

00000396 <__do_global_ctors>:
     396:	11 e0       	ldi	r17, 0x01	; 1
     398:	ce ea       	ldi	r28, 0xAE	; 174
     39a:	d1 e0       	ldi	r29, 0x01	; 1
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <__do_global_ctors+0x10>
     39e:	21 97       	sbiw	r28, 0x01	; 1
     3a0:	fe 01       	movw	r30, r28
     3a2:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <__tablejump2__>
     3a6:	cc 3a       	cpi	r28, 0xAC	; 172
     3a8:	d1 07       	cpc	r29, r17
     3aa:	c9 f7       	brne	.-14     	; 0x39e <__do_global_ctors+0x8>
     3ac:	0e 94 94 11 	call	0x2328	; 0x2328 <main>
     3b0:	0c 94 c6 54 	jmp	0xa98c	; 0xa98c <__do_global_dtors>

000003b4 <__bad_interrupt>:
     3b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b8 <is_leap_year>:
     3b8:	9c 01       	movw	r18, r24
     3ba:	23 70       	andi	r18, 0x03	; 3
     3bc:	33 27       	eor	r19, r19
     3be:	23 2b       	or	r18, r19
     3c0:	59 f4       	brne	.+22     	; 0x3d8 <is_leap_year+0x20>
     3c2:	64 e6       	ldi	r22, 0x64	; 100
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     3ca:	89 2b       	or	r24, r25
     3cc:	39 f4       	brne	.+14     	; 0x3dc <is_leap_year+0x24>
     3ce:	63 70       	andi	r22, 0x03	; 3
     3d0:	77 27       	eor	r23, r23
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	67 2b       	or	r22, r23
     3d6:	19 f0       	breq	.+6      	; 0x3de <is_leap_year+0x26>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	08 95       	ret
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	08 95       	ret

000003e0 <localtime>:
     3e0:	6b ea       	ldi	r22, 0xAB	; 171
     3e2:	7a e4       	ldi	r23, 0x4A	; 74
     3e4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <localtime_r>
     3e8:	8b ea       	ldi	r24, 0xAB	; 171
     3ea:	9a e4       	ldi	r25, 0x4A	; 74
     3ec:	08 95       	ret

000003ee <localtime_r>:
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
     400:	00 d0       	rcall	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	6c 01       	movw	r12, r24
     408:	7b 01       	movw	r14, r22
     40a:	e0 91 bb 4a 	lds	r30, 0x4ABB	; 0x804abb <__dst_ptr>
     40e:	f0 91 bc 4a 	lds	r31, 0x4ABC	; 0x804abc <__dst_ptr+0x1>
     412:	30 97       	sbiw	r30, 0x00	; 0
     414:	29 f0       	breq	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     416:	67 eb       	ldi	r22, 0xB7	; 183
     418:	7a e4       	ldi	r23, 0x4A	; 74
     41a:	09 95       	icall
     41c:	8c 01       	movw	r16, r24
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     420:	0f ef       	ldi	r16, 0xFF	; 255
     422:	1f ef       	ldi	r17, 0xFF	; 255
     424:	f6 01       	movw	r30, r12
     426:	40 81       	ld	r20, Z
     428:	51 81       	ldd	r21, Z+1	; 0x01
     42a:	62 81       	ldd	r22, Z+2	; 0x02
     42c:	73 81       	ldd	r23, Z+3	; 0x03
     42e:	80 91 b7 4a 	lds	r24, 0x4AB7	; 0x804ab7 <__utc_offset>
     432:	90 91 b8 4a 	lds	r25, 0x4AB8	; 0x804ab8 <__utc_offset+0x1>
     436:	a0 91 b9 4a 	lds	r26, 0x4AB9	; 0x804ab9 <__utc_offset+0x2>
     43a:	b0 91 ba 4a 	lds	r27, 0x4ABA	; 0x804aba <__utc_offset+0x3>
     43e:	84 0f       	add	r24, r20
     440:	95 1f       	adc	r25, r21
     442:	a6 1f       	adc	r26, r22
     444:	b7 1f       	adc	r27, r23
     446:	10 16       	cp	r1, r16
     448:	11 06       	cpc	r1, r17
     44a:	4c f4       	brge	.+18     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     44c:	a8 01       	movw	r20, r16
     44e:	01 2e       	mov	r0, r17
     450:	00 0c       	add	r0, r0
     452:	66 0b       	sbc	r22, r22
     454:	77 0b       	sbc	r23, r23
     456:	84 0f       	add	r24, r20
     458:	95 1f       	adc	r25, r21
     45a:	a6 1f       	adc	r26, r22
     45c:	b7 1f       	adc	r27, r23
     45e:	89 83       	std	Y+1, r24	; 0x01
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	ab 83       	std	Y+3, r26	; 0x03
     464:	bc 83       	std	Y+4, r27	; 0x04
     466:	b7 01       	movw	r22, r14
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <gmtime_r>
     470:	f7 01       	movw	r30, r14
     472:	02 87       	std	Z+10, r16	; 0x0a
     474:	13 87       	std	Z+11, r17	; 0x0b
     476:	24 96       	adiw	r28, 0x04	; 4
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	08 95       	ret

0000048e <month_length>:
     48e:	62 30       	cpi	r22, 0x02	; 2
     490:	21 f4       	brne	.+8      	; 0x49a <month_length+0xc>
     492:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <is_leap_year>
     496:	84 5e       	subi	r24, 0xE4	; 228
     498:	08 95       	ret
     49a:	68 30       	cpi	r22, 0x08	; 8
     49c:	08 f0       	brcs	.+2      	; 0x4a0 <month_length+0x12>
     49e:	6f 5f       	subi	r22, 0xFF	; 255
     4a0:	61 70       	andi	r22, 0x01	; 1
     4a2:	8e e1       	ldi	r24, 0x1E	; 30
     4a4:	86 0f       	add	r24, r22
     4a6:	08 95       	ret

000004a8 <set_system_time>:
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	60 93 a7 4a 	sts	0x4AA7, r22	; 0x804aa7 <__system_time>
     4b0:	70 93 a8 4a 	sts	0x4AA8, r23	; 0x804aa8 <__system_time+0x1>
     4b4:	80 93 a9 4a 	sts	0x4AA9, r24	; 0x804aa9 <__system_time+0x2>
     4b8:	90 93 aa 4a 	sts	0x4AAA, r25	; 0x804aaa <__system_time+0x3>
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	08 95       	ret

000004c0 <pgm_copystring>:
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	0f 93       	push	r16
     4c8:	6b 01       	movw	r12, r22
     4ca:	e8 2e       	mov	r14, r24
     4cc:	7c 2d       	mov	r23, r12
     4ce:	6d 2d       	mov	r22, r13
     4d0:	5e 2d       	mov	r21, r14
     4d2:	ae 2d       	mov	r26, r14
     4d4:	c6 01       	movw	r24, r12
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	a1 1d       	adc	r26, r1
     4da:	44 23       	and	r20, r20
     4dc:	51 f0       	breq	.+20     	; 0x4f2 <pgm_copystring+0x32>
     4de:	6c 01       	movw	r12, r24
     4e0:	ea 2e       	mov	r14, r26
     4e2:	e7 2f       	mov	r30, r23
     4e4:	f6 2f       	mov	r31, r22
     4e6:	0e 94 b3 54 	call	0xa966	; 0xa966 <__xload_1>
     4ea:	60 32       	cpi	r22, 0x20	; 32
     4ec:	79 f7       	brne	.-34     	; 0x4cc <pgm_copystring+0xc>
     4ee:	41 50       	subi	r20, 0x01	; 1
     4f0:	ed cf       	rjmp	.-38     	; 0x4cc <pgm_copystring+0xc>
     4f2:	f6 01       	movw	r30, r12
     4f4:	0e 94 b3 54 	call	0xa966	; 0xa966 <__xload_1>
     4f8:	6c 01       	movw	r12, r24
     4fa:	ea 2e       	mov	r14, r26
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	60 32       	cpi	r22, 0x20	; 32
     500:	39 f4       	brne	.+14     	; 0x510 <pgm_copystring+0x50>
     502:	f9 01       	movw	r30, r18
     504:	10 82       	st	Z, r1
     506:	0f 91       	pop	r16
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	08 95       	ret
     510:	80 17       	cp	r24, r16
     512:	b9 f3       	breq	.-18     	; 0x502 <pgm_copystring+0x42>
     514:	2f 5f       	subi	r18, 0xFF	; 255
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	f9 01       	movw	r30, r18
     51a:	31 97       	sbiw	r30, 0x01	; 1
     51c:	60 83       	st	Z, r22
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	f6 01       	movw	r30, r12
     522:	5e 2d       	mov	r21, r14
     524:	0e 94 b3 54 	call	0xa966	; 0xa966 <__xload_1>
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	c9 1a       	sub	r12, r25
     52c:	d9 0a       	sbc	r13, r25
     52e:	e9 0a       	sbc	r14, r25
     530:	e6 cf       	rjmp	.-52     	; 0x4fe <pgm_copystring+0x3e>

00000532 <strftime>:
     532:	2f 92       	push	r2
     534:	3f 92       	push	r3
     536:	4f 92       	push	r4
     538:	5f 92       	push	r5
     53a:	6f 92       	push	r6
     53c:	7f 92       	push	r7
     53e:	8f 92       	push	r8
     540:	9f 92       	push	r9
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	a2 97       	sbiw	r28, 0x22	; 34
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	de bf       	out	0x3e, r29	; 62
     560:	2c 01       	movw	r4, r24
     562:	69 a3       	std	Y+33, r22	; 0x21
     564:	7a a3       	std	Y+34, r23	; 0x22
     566:	4a 01       	movw	r8, r20
     568:	79 01       	movw	r14, r18
     56a:	61 2c       	mov	r6, r1
     56c:	71 2c       	mov	r7, r1
     56e:	9e 01       	movw	r18, r28
     570:	2f 5f       	subi	r18, 0xFF	; 255
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	69 01       	movw	r12, r18
     576:	84 e6       	ldi	r24, 0x64	; 100
     578:	28 2e       	mov	r2, r24
     57a:	31 2c       	mov	r3, r1
     57c:	92 e5       	ldi	r25, 0x52	; 82
     57e:	a9 2e       	mov	r10, r25
     580:	96 e4       	ldi	r25, 0x46	; 70
     582:	b9 2e       	mov	r11, r25
     584:	29 a1       	ldd	r18, Y+33	; 0x21
     586:	3a a1       	ldd	r19, Y+34	; 0x22
     588:	62 16       	cp	r6, r18
     58a:	73 06       	cpc	r7, r19
     58c:	08 f0       	brcs	.+2      	; 0x590 <strftime+0x5e>
     58e:	cd c2       	rjmp	.+1434   	; 0xb2a <strftime+0x5f8>
     590:	d4 01       	movw	r26, r8
     592:	8c 91       	ld	r24, X
     594:	85 32       	cpi	r24, 0x25	; 37
     596:	09 f0       	breq	.+2      	; 0x59a <strftime+0x68>
     598:	bc c2       	rjmp	.+1400   	; 0xb12 <strftime+0x5e0>
     59a:	11 96       	adiw	r26, 0x01	; 1
     59c:	1c 91       	ld	r17, X
     59e:	15 34       	cpi	r17, 0x45	; 69
     5a0:	31 f0       	breq	.+12     	; 0x5ae <strftime+0x7c>
     5a2:	1f 34       	cpi	r17, 0x4F	; 79
     5a4:	21 f0       	breq	.+8      	; 0x5ae <strftime+0x7c>
     5a6:	b2 e0       	ldi	r27, 0x02	; 2
     5a8:	8b 0e       	add	r8, r27
     5aa:	91 1c       	adc	r9, r1
     5ac:	06 c0       	rjmp	.+12     	; 0x5ba <strftime+0x88>
     5ae:	f4 01       	movw	r30, r8
     5b0:	12 81       	ldd	r17, Z+2	; 0x02
     5b2:	94 01       	movw	r18, r8
     5b4:	2d 5f       	subi	r18, 0xFD	; 253
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	49 01       	movw	r8, r18
     5ba:	19 35       	cpi	r17, 0x59	; 89
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <strftime+0x8e>
     5be:	32 c2       	rjmp	.+1124   	; 0xa24 <strftime+0x4f2>
     5c0:	0c f0       	brlt	.+2      	; 0x5c4 <strftime+0x92>
     5c2:	60 c0       	rjmp	.+192    	; 0x684 <strftime+0x152>
     5c4:	19 34       	cpi	r17, 0x49	; 73
     5c6:	09 f4       	brne	.+2      	; 0x5ca <strftime+0x98>
     5c8:	3f c1       	rjmp	.+638    	; 0x848 <strftime+0x316>
     5ca:	44 f5       	brge	.+80     	; 0x61c <strftime+0xea>
     5cc:	13 34       	cpi	r17, 0x43	; 67
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <strftime+0xa0>
     5d0:	e7 c0       	rjmp	.+462    	; 0x7a0 <strftime+0x26e>
     5d2:	54 f4       	brge	.+20     	; 0x5e8 <strftime+0xb6>
     5d4:	11 34       	cpi	r17, 0x41	; 65
     5d6:	09 f4       	brne	.+2      	; 0x5da <strftime+0xa8>
     5d8:	be c0       	rjmp	.+380    	; 0x756 <strftime+0x224>
     5da:	0c f0       	brlt	.+2      	; 0x5de <strftime+0xac>
     5dc:	ca c0       	rjmp	.+404    	; 0x772 <strftime+0x240>
     5de:	15 32       	cpi	r17, 0x25	; 37
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <strftime+0xb2>
     5e2:	74 c2       	rjmp	.+1256   	; 0xacc <strftime+0x59a>
     5e4:	19 83       	std	Y+1, r17	; 0x01
     5e6:	75 c2       	rjmp	.+1258   	; 0xad2 <strftime+0x5a0>
     5e8:	16 34       	cpi	r17, 0x46	; 70
     5ea:	09 f4       	brne	.+2      	; 0x5ee <strftime+0xbc>
     5ec:	ea c0       	rjmp	.+468    	; 0x7c2 <strftime+0x290>
     5ee:	64 f4       	brge	.+24     	; 0x608 <strftime+0xd6>
     5f0:	14 34       	cpi	r17, 0x44	; 68
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <strftime+0xc4>
     5f4:	6b c2       	rjmp	.+1238   	; 0xacc <strftime+0x59a>
     5f6:	f7 01       	movw	r30, r14
     5f8:	86 81       	ldd	r24, Z+6	; 0x06
     5fa:	97 81       	ldd	r25, Z+7	; 0x07
     5fc:	b1 01       	movw	r22, r2
     5fe:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     602:	9f 93       	push	r25
     604:	8f 93       	push	r24
     606:	e7 c1       	rjmp	.+974    	; 0x9d6 <strftime+0x4a4>
     608:	17 34       	cpi	r17, 0x47	; 71
     60a:	09 f4       	brne	.+2      	; 0x60e <strftime+0xdc>
     60c:	f8 c0       	rjmp	.+496    	; 0x7fe <strftime+0x2cc>
     60e:	18 34       	cpi	r17, 0x48	; 72
     610:	09 f0       	breq	.+2      	; 0x614 <strftime+0xe2>
     612:	5c c2       	rjmp	.+1208   	; 0xacc <strftime+0x59a>
     614:	d7 01       	movw	r26, r14
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	8c 91       	ld	r24, X
     61a:	30 c1       	rjmp	.+608    	; 0x87c <strftime+0x34a>
     61c:	14 35       	cpi	r17, 0x54	; 84
     61e:	09 f4       	brne	.+2      	; 0x622 <strftime+0xf0>
     620:	89 c1       	rjmp	.+786    	; 0x934 <strftime+0x402>
     622:	64 f4       	brge	.+24     	; 0x63c <strftime+0x10a>
     624:	12 35       	cpi	r17, 0x52	; 82
     626:	09 f4       	brne	.+2      	; 0x62a <strftime+0xf8>
     628:	6e c1       	rjmp	.+732    	; 0x906 <strftime+0x3d4>
     62a:	0c f0       	brlt	.+2      	; 0x62e <strftime+0xfc>
     62c:	25 c1       	rjmp	.+586    	; 0x878 <strftime+0x346>
     62e:	1d 34       	cpi	r17, 0x4D	; 77
     630:	09 f0       	breq	.+2      	; 0x634 <strftime+0x102>
     632:	4c c2       	rjmp	.+1176   	; 0xacc <strftime+0x59a>
     634:	d7 01       	movw	r26, r14
     636:	11 96       	adiw	r26, 0x01	; 1
     638:	8c 91       	ld	r24, X
     63a:	20 c1       	rjmp	.+576    	; 0x87c <strftime+0x34a>
     63c:	16 35       	cpi	r17, 0x56	; 86
     63e:	09 f4       	brne	.+2      	; 0x642 <strftime+0x110>
     640:	a5 c1       	rjmp	.+842    	; 0x98c <strftime+0x45a>
     642:	0c f4       	brge	.+2      	; 0x646 <strftime+0x114>
     644:	a1 c1       	rjmp	.+834    	; 0x988 <strftime+0x456>
     646:	17 35       	cpi	r17, 0x57	; 87
     648:	09 f4       	brne	.+2      	; 0x64c <strftime+0x11a>
     64a:	b4 c1       	rjmp	.+872    	; 0x9b4 <strftime+0x482>
     64c:	18 35       	cpi	r17, 0x58	; 88
     64e:	09 f0       	breq	.+2      	; 0x652 <strftime+0x120>
     650:	3d c2       	rjmp	.+1146   	; 0xacc <strftime+0x59a>
     652:	f7 01       	movw	r30, r14
     654:	80 81       	ld	r24, Z
     656:	28 2f       	mov	r18, r24
     658:	08 2e       	mov	r0, r24
     65a:	00 0c       	add	r0, r0
     65c:	33 0b       	sbc	r19, r19
     65e:	3f 93       	push	r19
     660:	8f 93       	push	r24
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	28 2f       	mov	r18, r24
     666:	08 2e       	mov	r0, r24
     668:	00 0c       	add	r0, r0
     66a:	33 0b       	sbc	r19, r19
     66c:	3f 93       	push	r19
     66e:	8f 93       	push	r24
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	28 2f       	mov	r18, r24
     674:	08 2e       	mov	r0, r24
     676:	00 0c       	add	r0, r0
     678:	33 0b       	sbc	r19, r19
     67a:	3f 93       	push	r19
     67c:	8f 93       	push	r24
     67e:	87 e9       	ldi	r24, 0x97	; 151
     680:	96 e4       	ldi	r25, 0x46	; 70
     682:	c0 c1       	rjmp	.+896    	; 0xa04 <strftime+0x4d2>
     684:	1d 36       	cpi	r17, 0x6D	; 109
     686:	09 f4       	brne	.+2      	; 0x68a <strftime+0x158>
     688:	f0 c0       	rjmp	.+480    	; 0x86a <strftime+0x338>
     68a:	ac f5       	brge	.+106    	; 0x6f6 <strftime+0x1c4>
     68c:	14 36       	cpi	r17, 0x64	; 100
     68e:	09 f4       	brne	.+2      	; 0x692 <strftime+0x160>
     690:	94 c0       	rjmp	.+296    	; 0x7ba <strftime+0x288>
     692:	74 f4       	brge	.+28     	; 0x6b0 <strftime+0x17e>
     694:	12 36       	cpi	r17, 0x62	; 98
     696:	09 f4       	brne	.+2      	; 0x69a <strftime+0x168>
     698:	66 c0       	rjmp	.+204    	; 0x766 <strftime+0x234>
     69a:	0c f0       	brlt	.+2      	; 0x69e <strftime+0x16c>
     69c:	75 c0       	rjmp	.+234    	; 0x788 <strftime+0x256>
     69e:	11 36       	cpi	r17, 0x61	; 97
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <strftime+0x172>
     6a2:	14 c2       	rjmp	.+1064   	; 0xacc <strftime+0x59a>
     6a4:	03 e0       	ldi	r16, 0x03	; 3
     6a6:	96 01       	movw	r18, r12
     6a8:	d7 01       	movw	r26, r14
     6aa:	14 96       	adiw	r26, 0x04	; 4
     6ac:	4c 91       	ld	r20, X
     6ae:	57 c0       	rjmp	.+174    	; 0x75e <strftime+0x22c>
     6b0:	17 36       	cpi	r17, 0x67	; 103
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <strftime+0x184>
     6b4:	a4 c0       	rjmp	.+328    	; 0x7fe <strftime+0x2cc>
     6b6:	74 f4       	brge	.+28     	; 0x6d4 <strftime+0x1a2>
     6b8:	15 36       	cpi	r17, 0x65	; 101
     6ba:	09 f0       	breq	.+2      	; 0x6be <strftime+0x18c>
     6bc:	07 c2       	rjmp	.+1038   	; 0xacc <strftime+0x59a>
     6be:	f7 01       	movw	r30, r14
     6c0:	83 81       	ldd	r24, Z+3	; 0x03
     6c2:	28 2f       	mov	r18, r24
     6c4:	08 2e       	mov	r0, r24
     6c6:	00 0c       	add	r0, r0
     6c8:	33 0b       	sbc	r19, r19
     6ca:	3f 93       	push	r19
     6cc:	8f 93       	push	r24
     6ce:	87 e5       	ldi	r24, 0x57	; 87
     6d0:	96 e4       	ldi	r25, 0x46	; 70
     6d2:	c8 c0       	rjmp	.+400    	; 0x864 <strftime+0x332>
     6d4:	18 36       	cpi	r17, 0x68	; 104
     6d6:	09 f4       	brne	.+2      	; 0x6da <strftime+0x1a8>
     6d8:	46 c0       	rjmp	.+140    	; 0x766 <strftime+0x234>
     6da:	1a 36       	cpi	r17, 0x6A	; 106
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <strftime+0x1ae>
     6de:	f6 c1       	rjmp	.+1004   	; 0xacc <strftime+0x59a>
     6e0:	d7 01       	movw	r26, r14
     6e2:	18 96       	adiw	r26, 0x08	; 8
     6e4:	8d 91       	ld	r24, X+
     6e6:	9c 91       	ld	r25, X
     6e8:	19 97       	sbiw	r26, 0x09	; 9
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	8d e6       	ldi	r24, 0x6D	; 109
     6f2:	96 e4       	ldi	r25, 0x46	; 70
     6f4:	b7 c0       	rjmp	.+366    	; 0x864 <strftime+0x332>
     6f6:	15 37       	cpi	r17, 0x75	; 117
     6f8:	09 f4       	brne	.+2      	; 0x6fc <strftime+0x1ca>
     6fa:	35 c1       	rjmp	.+618    	; 0x966 <strftime+0x434>
     6fc:	b4 f4       	brge	.+44     	; 0x72a <strftime+0x1f8>
     6fe:	10 37       	cpi	r17, 0x70	; 112
     700:	09 f4       	brne	.+2      	; 0x704 <strftime+0x1d2>
     702:	c2 c0       	rjmp	.+388    	; 0x888 <strftime+0x356>
     704:	34 f4       	brge	.+12     	; 0x712 <strftime+0x1e0>
     706:	1e 36       	cpi	r17, 0x6E	; 110
     708:	09 f0       	breq	.+2      	; 0x70c <strftime+0x1da>
     70a:	e0 c1       	rjmp	.+960    	; 0xacc <strftime+0x59a>
     70c:	8a e0       	ldi	r24, 0x0A	; 10
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	e0 c1       	rjmp	.+960    	; 0xad2 <strftime+0x5a0>
     712:	12 37       	cpi	r17, 0x72	; 114
     714:	09 f4       	brne	.+2      	; 0x718 <strftime+0x1e6>
     716:	c6 c0       	rjmp	.+396    	; 0x8a4 <strftime+0x372>
     718:	14 37       	cpi	r17, 0x74	; 116
     71a:	09 f0       	breq	.+2      	; 0x71e <strftime+0x1ec>
     71c:	d7 c1       	rjmp	.+942    	; 0xacc <strftime+0x59a>
     71e:	63 e8       	ldi	r22, 0x83	; 131
     720:	76 e4       	ldi	r23, 0x46	; 70
     722:	c6 01       	movw	r24, r12
     724:	0e 94 f8 4f 	call	0x9ff0	; 0x9ff0 <strcpy>
     728:	d4 c1       	rjmp	.+936    	; 0xad2 <strftime+0x5a0>
     72a:	18 37       	cpi	r17, 0x78	; 120
     72c:	09 f4       	brne	.+2      	; 0x730 <strftime+0x1fe>
     72e:	48 c1       	rjmp	.+656    	; 0x9c0 <strftime+0x48e>
     730:	5c f4       	brge	.+22     	; 0x748 <strftime+0x216>
     732:	17 37       	cpi	r17, 0x77	; 119
     734:	09 f0       	breq	.+2      	; 0x738 <strftime+0x206>
     736:	ca c1       	rjmp	.+916    	; 0xacc <strftime+0x59a>
     738:	f7 01       	movw	r30, r14
     73a:	84 81       	ldd	r24, Z+4	; 0x04
     73c:	28 2f       	mov	r18, r24
     73e:	08 2e       	mov	r0, r24
     740:	00 0c       	add	r0, r0
     742:	33 0b       	sbc	r19, r19
     744:	3f 93       	push	r19
     746:	74 c1       	rjmp	.+744    	; 0xa30 <strftime+0x4fe>
     748:	19 37       	cpi	r17, 0x79	; 121
     74a:	09 f4       	brne	.+2      	; 0x74e <strftime+0x21c>
     74c:	5e c1       	rjmp	.+700    	; 0xa0a <strftime+0x4d8>
     74e:	1a 37       	cpi	r17, 0x7A	; 122
     750:	09 f4       	brne	.+2      	; 0x754 <strftime+0x222>
     752:	7e c1       	rjmp	.+764    	; 0xa50 <strftime+0x51e>
     754:	bb c1       	rjmp	.+886    	; 0xacc <strftime+0x59a>
     756:	0f ef       	ldi	r16, 0xFF	; 255
     758:	96 01       	movw	r18, r12
     75a:	f7 01       	movw	r30, r14
     75c:	44 81       	ldd	r20, Z+4	; 0x04
     75e:	62 ee       	ldi	r22, 0xE2	; 226
     760:	72 e0       	ldi	r23, 0x02	; 2
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0d c0       	rjmp	.+26     	; 0x780 <strftime+0x24e>
     766:	03 e0       	ldi	r16, 0x03	; 3
     768:	96 01       	movw	r18, r12
     76a:	d7 01       	movw	r26, r14
     76c:	15 96       	adiw	r26, 0x05	; 5
     76e:	4c 91       	ld	r20, X
     770:	04 c0       	rjmp	.+8      	; 0x77a <strftime+0x248>
     772:	0f ef       	ldi	r16, 0xFF	; 255
     774:	96 01       	movw	r18, r12
     776:	f7 01       	movw	r30, r14
     778:	45 81       	ldd	r20, Z+5	; 0x05
     77a:	6b e8       	ldi	r22, 0x8B	; 139
     77c:	72 e0       	ldi	r23, 0x02	; 2
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 60 02 	call	0x4c0	; 0x4c0 <pgm_copystring>
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a7 c1       	rjmp	.+846    	; 0xad6 <strftime+0x5a4>
     788:	b6 01       	movw	r22, r12
     78a:	c7 01       	movw	r24, r14
     78c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <asctime_r>
     790:	f6 01       	movw	r30, r12
     792:	cf 01       	movw	r24, r30
     794:	8c 19       	sub	r24, r12
     796:	9d 09       	sbc	r25, r13
     798:	21 91       	ld	r18, Z+
     79a:	21 11       	cpse	r18, r1
     79c:	fa cf       	rjmp	.-12     	; 0x792 <strftime+0x260>
     79e:	9b c1       	rjmp	.+822    	; 0xad6 <strftime+0x5a4>
     7a0:	d7 01       	movw	r26, r14
     7a2:	16 96       	adiw	r26, 0x06	; 6
     7a4:	8d 91       	ld	r24, X+
     7a6:	9c 91       	ld	r25, X
     7a8:	17 97       	sbiw	r26, 0x07	; 7
     7aa:	84 59       	subi	r24, 0x94	; 148
     7ac:	98 4f       	sbci	r25, 0xF8	; 248
     7ae:	b1 01       	movw	r22, r2
     7b0:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     7b4:	7f 93       	push	r23
     7b6:	6f 93       	push	r22
     7b8:	3b c0       	rjmp	.+118    	; 0x830 <strftime+0x2fe>
     7ba:	d7 01       	movw	r26, r14
     7bc:	13 96       	adiw	r26, 0x03	; 3
     7be:	8c 91       	ld	r24, X
     7c0:	5d c0       	rjmp	.+186    	; 0x87c <strftime+0x34a>
     7c2:	d7 01       	movw	r26, r14
     7c4:	13 96       	adiw	r26, 0x03	; 3
     7c6:	8c 91       	ld	r24, X
     7c8:	13 97       	sbiw	r26, 0x03	; 3
     7ca:	28 2f       	mov	r18, r24
     7cc:	08 2e       	mov	r0, r24
     7ce:	00 0c       	add	r0, r0
     7d0:	33 0b       	sbc	r19, r19
     7d2:	3f 93       	push	r19
     7d4:	8f 93       	push	r24
     7d6:	15 96       	adiw	r26, 0x05	; 5
     7d8:	8c 91       	ld	r24, X
     7da:	15 97       	sbiw	r26, 0x05	; 5
     7dc:	08 2e       	mov	r0, r24
     7de:	00 0c       	add	r0, r0
     7e0:	99 0b       	sbc	r25, r25
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	9f 93       	push	r25
     7e6:	8f 93       	push	r24
     7e8:	16 96       	adiw	r26, 0x06	; 6
     7ea:	8d 91       	ld	r24, X+
     7ec:	9c 91       	ld	r25, X
     7ee:	17 97       	sbiw	r26, 0x07	; 7
     7f0:	84 59       	subi	r24, 0x94	; 148
     7f2:	98 4f       	sbci	r25, 0xF8	; 248
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	8b e5       	ldi	r24, 0x5B	; 91
     7fa:	96 e4       	ldi	r25, 0x46	; 70
     7fc:	03 c1       	rjmp	.+518    	; 0xa04 <strftime+0x4d2>
     7fe:	d7 01       	movw	r26, r14
     800:	18 96       	adiw	r26, 0x08	; 8
     802:	6d 91       	ld	r22, X+
     804:	7c 91       	ld	r23, X
     806:	19 97       	sbiw	r26, 0x09	; 9
     808:	16 96       	adiw	r26, 0x06	; 6
     80a:	8d 91       	ld	r24, X+
     80c:	9c 91       	ld	r25, X
     80e:	17 97       	sbiw	r26, 0x07	; 7
     810:	ae 01       	movw	r20, r28
     812:	45 5e       	subi	r20, 0xE5	; 229
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	84 59       	subi	r24, 0x94	; 148
     818:	98 4f       	sbci	r25, 0xF8	; 248
     81a:	0e 94 55 07 	call	0xeaa	; 0xeaa <iso_week_date_r>
     81e:	17 36       	cpi	r17, 0x67	; 103
     820:	51 f4       	brne	.+20     	; 0x836 <strftime+0x304>
     822:	8b 8d       	ldd	r24, Y+27	; 0x1b
     824:	9c 8d       	ldd	r25, Y+28	; 0x1c
     826:	b1 01       	movw	r22, r2
     828:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	e3 e6       	ldi	r30, 0x63	; 99
     832:	f6 e4       	ldi	r31, 0x46	; 70
     834:	a6 c0       	rjmp	.+332    	; 0x982 <strftime+0x450>
     836:	8c 8d       	ldd	r24, Y+28	; 0x1c
     838:	8f 93       	push	r24
     83a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     83c:	8f 93       	push	r24
     83e:	48 e6       	ldi	r20, 0x68	; 104
     840:	56 e4       	ldi	r21, 0x46	; 70
     842:	5f 93       	push	r21
     844:	4f 93       	push	r20
     846:	f9 c0       	rjmp	.+498    	; 0xa3a <strftime+0x508>
     848:	f7 01       	movw	r30, r14
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	6c e0       	ldi	r22, 0x0C	; 12
     84e:	0e 94 a5 54 	call	0xa94a	; 0xa94a <__divmodqi4>
     852:	99 23       	and	r25, r25
     854:	21 f0       	breq	.+8      	; 0x85e <strftime+0x32c>
     856:	89 2f       	mov	r24, r25
     858:	99 0f       	add	r25, r25
     85a:	99 0b       	sbc	r25, r25
     85c:	de c0       	rjmp	.+444    	; 0xa1a <strftime+0x4e8>
     85e:	8c e0       	ldi	r24, 0x0C	; 12
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	db c0       	rjmp	.+438    	; 0xa1a <strftime+0x4e8>
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	e8 c0       	rjmp	.+464    	; 0xa3a <strftime+0x508>
     86a:	f7 01       	movw	r30, r14
     86c:	85 81       	ldd	r24, Z+5	; 0x05
     86e:	08 2e       	mov	r0, r24
     870:	00 0c       	add	r0, r0
     872:	99 0b       	sbc	r25, r25
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	d1 c0       	rjmp	.+418    	; 0xa1a <strftime+0x4e8>
     878:	d7 01       	movw	r26, r14
     87a:	8c 91       	ld	r24, X
     87c:	28 2f       	mov	r18, r24
     87e:	08 2e       	mov	r0, r24
     880:	00 0c       	add	r0, r0
     882:	33 0b       	sbc	r19, r19
     884:	3f 93       	push	r19
     886:	ca c0       	rjmp	.+404    	; 0xa1c <strftime+0x4ea>
     888:	81 e4       	ldi	r24, 0x41	; 65
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	f7 01       	movw	r30, r14
     88e:	82 81       	ldd	r24, Z+2	; 0x02
     890:	8c 30       	cpi	r24, 0x0C	; 12
     892:	14 f0       	brlt	.+4      	; 0x898 <strftime+0x366>
     894:	80 e5       	ldi	r24, 0x50	; 80
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	8d e4       	ldi	r24, 0x4D	; 77
     89a:	8a 83       	std	Y+2, r24	; 0x02
     89c:	1b 82       	std	Y+3, r1	; 0x03
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	19 c1       	rjmp	.+562    	; 0xad6 <strftime+0x5a4>
     8a4:	d7 01       	movw	r26, r14
     8a6:	12 96       	adiw	r26, 0x02	; 2
     8a8:	8c 91       	ld	r24, X
     8aa:	6c e0       	ldi	r22, 0x0C	; 12
     8ac:	0e 94 a5 54 	call	0xa94a	; 0xa94a <__divmodqi4>
     8b0:	99 23       	and	r25, r25
     8b2:	21 f0       	breq	.+8      	; 0x8bc <strftime+0x38a>
     8b4:	89 2f       	mov	r24, r25
     8b6:	99 0f       	add	r25, r25
     8b8:	99 0b       	sbc	r25, r25
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <strftime+0x38e>
     8bc:	8c e0       	ldi	r24, 0x0C	; 12
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	f7 01       	movw	r30, r14
     8c2:	20 81       	ld	r18, Z
     8c4:	42 2f       	mov	r20, r18
     8c6:	02 2e       	mov	r0, r18
     8c8:	00 0c       	add	r0, r0
     8ca:	55 0b       	sbc	r21, r21
     8cc:	5f 93       	push	r21
     8ce:	2f 93       	push	r18
     8d0:	21 81       	ldd	r18, Z+1	; 0x01
     8d2:	42 2f       	mov	r20, r18
     8d4:	02 2e       	mov	r0, r18
     8d6:	00 0c       	add	r0, r0
     8d8:	55 0b       	sbc	r21, r21
     8da:	5f 93       	push	r21
     8dc:	2f 93       	push	r18
     8de:	9f 93       	push	r25
     8e0:	8f 93       	push	r24
     8e2:	22 e7       	ldi	r18, 0x72	; 114
     8e4:	36 e4       	ldi	r19, 0x46	; 70
     8e6:	3f 93       	push	r19
     8e8:	2f 93       	push	r18
     8ea:	df 92       	push	r13
     8ec:	cf 92       	push	r12
     8ee:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	f7 01       	movw	r30, r14
     8f8:	22 81       	ldd	r18, Z+2	; 0x02
     8fa:	2c 30       	cpi	r18, 0x0C	; 12
     8fc:	0c f4       	brge	.+2      	; 0x900 <strftime+0x3ce>
     8fe:	eb c0       	rjmp	.+470    	; 0xad6 <strftime+0x5a4>
     900:	20 e5       	ldi	r18, 0x50	; 80
     902:	2b 87       	std	Y+11, r18	; 0x0b
     904:	e8 c0       	rjmp	.+464    	; 0xad6 <strftime+0x5a4>
     906:	d7 01       	movw	r26, r14
     908:	11 96       	adiw	r26, 0x01	; 1
     90a:	8c 91       	ld	r24, X
     90c:	11 97       	sbiw	r26, 0x01	; 1
     90e:	28 2f       	mov	r18, r24
     910:	08 2e       	mov	r0, r24
     912:	00 0c       	add	r0, r0
     914:	33 0b       	sbc	r19, r19
     916:	3f 93       	push	r19
     918:	8f 93       	push	r24
     91a:	12 96       	adiw	r26, 0x02	; 2
     91c:	8c 91       	ld	r24, X
     91e:	28 2f       	mov	r18, r24
     920:	08 2e       	mov	r0, r24
     922:	00 0c       	add	r0, r0
     924:	33 0b       	sbc	r19, r19
     926:	3f 93       	push	r19
     928:	8f 93       	push	r24
     92a:	8a e8       	ldi	r24, 0x8A	; 138
     92c:	96 e4       	ldi	r25, 0x46	; 70
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	c5 c0       	rjmp	.+394    	; 0xabe <strftime+0x58c>
     934:	f7 01       	movw	r30, r14
     936:	80 81       	ld	r24, Z
     938:	28 2f       	mov	r18, r24
     93a:	08 2e       	mov	r0, r24
     93c:	00 0c       	add	r0, r0
     93e:	33 0b       	sbc	r19, r19
     940:	3f 93       	push	r19
     942:	8f 93       	push	r24
     944:	81 81       	ldd	r24, Z+1	; 0x01
     946:	28 2f       	mov	r18, r24
     948:	08 2e       	mov	r0, r24
     94a:	00 0c       	add	r0, r0
     94c:	33 0b       	sbc	r19, r19
     94e:	3f 93       	push	r19
     950:	8f 93       	push	r24
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	28 2f       	mov	r18, r24
     956:	08 2e       	mov	r0, r24
     958:	00 0c       	add	r0, r0
     95a:	33 0b       	sbc	r19, r19
     95c:	3f 93       	push	r19
     95e:	8f 93       	push	r24
     960:	85 e8       	ldi	r24, 0x85	; 133
     962:	96 e4       	ldi	r25, 0x46	; 70
     964:	4f c0       	rjmp	.+158    	; 0xa04 <strftime+0x4d2>
     966:	d7 01       	movw	r26, r14
     968:	14 96       	adiw	r26, 0x04	; 4
     96a:	8c 91       	ld	r24, X
     96c:	08 2e       	mov	r0, r24
     96e:	00 0c       	add	r0, r0
     970:	99 0b       	sbc	r25, r25
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	11 f4       	brne	.+4      	; 0x97a <strftime+0x448>
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	e4 e9       	ldi	r30, 0x94	; 148
     980:	f6 e4       	ldi	r31, 0x46	; 70
     982:	ff 93       	push	r31
     984:	ef 93       	push	r30
     986:	59 c0       	rjmp	.+178    	; 0xa3a <strftime+0x508>
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	15 c0       	rjmp	.+42     	; 0x9b6 <strftime+0x484>
     98c:	d7 01       	movw	r26, r14
     98e:	18 96       	adiw	r26, 0x08	; 8
     990:	6d 91       	ld	r22, X+
     992:	7c 91       	ld	r23, X
     994:	19 97       	sbiw	r26, 0x09	; 9
     996:	16 96       	adiw	r26, 0x06	; 6
     998:	8d 91       	ld	r24, X+
     99a:	9c 91       	ld	r25, X
     99c:	17 97       	sbiw	r26, 0x07	; 7
     99e:	ae 01       	movw	r20, r28
     9a0:	45 5e       	subi	r20, 0xE5	; 229
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	84 59       	subi	r24, 0x94	; 148
     9a6:	98 4f       	sbci	r25, 0xF8	; 248
     9a8:	0e 94 55 07 	call	0xeaa	; 0xeaa <iso_week_date_r>
     9ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9ae:	8f 93       	push	r24
     9b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9b2:	34 c0       	rjmp	.+104    	; 0xa1c <strftime+0x4ea>
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	c7 01       	movw	r24, r14
     9b8:	0e 94 c1 05 	call	0xb82	; 0xb82 <week_of_year>
     9bc:	1f 92       	push	r1
     9be:	2e c0       	rjmp	.+92     	; 0xa1c <strftime+0x4ea>
     9c0:	d7 01       	movw	r26, r14
     9c2:	16 96       	adiw	r26, 0x06	; 6
     9c4:	8d 91       	ld	r24, X+
     9c6:	9c 91       	ld	r25, X
     9c8:	17 97       	sbiw	r26, 0x07	; 7
     9ca:	b1 01       	movw	r22, r2
     9cc:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	f7 01       	movw	r30, r14
     9d6:	83 81       	ldd	r24, Z+3	; 0x03
     9d8:	28 2f       	mov	r18, r24
     9da:	08 2e       	mov	r0, r24
     9dc:	00 0c       	add	r0, r0
     9de:	33 0b       	sbc	r19, r19
     9e0:	3f 93       	push	r19
     9e2:	8f 93       	push	r24
     9e4:	85 81       	ldd	r24, Z+5	; 0x05
     9e6:	08 2e       	mov	r0, r24
     9e8:	00 0c       	add	r0, r0
     9ea:	99 0b       	sbc	r25, r25
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	9f 93       	push	r25
     9f0:	8f 93       	push	r24
     9f2:	28 e4       	ldi	r18, 0x48	; 72
     9f4:	36 e4       	ldi	r19, 0x46	; 70
     9f6:	3f 93       	push	r19
     9f8:	2f 93       	push	r18
     9fa:	df 92       	push	r13
     9fc:	cf 92       	push	r12
     9fe:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
     a02:	61 c0       	rjmp	.+194    	; 0xac6 <strftime+0x594>
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	f8 cf       	rjmp	.-16     	; 0x9fa <strftime+0x4c8>
     a0a:	d7 01       	movw	r26, r14
     a0c:	16 96       	adiw	r26, 0x06	; 6
     a0e:	8d 91       	ld	r24, X+
     a10:	9c 91       	ld	r25, X
     a12:	17 97       	sbiw	r26, 0x07	; 7
     a14:	b1 01       	movw	r22, r2
     a16:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	bf 92       	push	r11
     a20:	af 92       	push	r10
     a22:	0b c0       	rjmp	.+22     	; 0xa3a <strftime+0x508>
     a24:	f7 01       	movw	r30, r14
     a26:	86 81       	ldd	r24, Z+6	; 0x06
     a28:	97 81       	ldd	r25, Z+7	; 0x07
     a2a:	84 59       	subi	r24, 0x94	; 148
     a2c:	98 4f       	sbci	r25, 0xF8	; 248
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	2d ed       	ldi	r18, 0xDD	; 221
     a34:	34 e4       	ldi	r19, 0x44	; 68
     a36:	3f 93       	push	r19
     a38:	2f 93       	push	r18
     a3a:	df 92       	push	r13
     a3c:	cf 92       	push	r12
     a3e:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	43 c0       	rjmp	.+134    	; 0xad6 <strftime+0x5a4>
     a50:	60 91 b7 4a 	lds	r22, 0x4AB7	; 0x804ab7 <__utc_offset>
     a54:	70 91 b8 4a 	lds	r23, 0x4AB8	; 0x804ab8 <__utc_offset+0x1>
     a58:	80 91 b9 4a 	lds	r24, 0x4AB9	; 0x804ab9 <__utc_offset+0x2>
     a5c:	90 91 ba 4a 	lds	r25, 0x4ABA	; 0x804aba <__utc_offset+0x3>
     a60:	2c e3       	ldi	r18, 0x3C	; 60
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <__divmodsi4>
     a6c:	89 01       	movw	r16, r18
     a6e:	9a 01       	movw	r18, r20
     a70:	f8 01       	movw	r30, r16
     a72:	d7 01       	movw	r26, r14
     a74:	1a 96       	adiw	r26, 0x0a	; 10
     a76:	8d 91       	ld	r24, X+
     a78:	9c 91       	ld	r25, X
     a7a:	1b 97       	sbiw	r26, 0x0b	; 11
     a7c:	6c e3       	ldi	r22, 0x3C	; 60
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     a84:	16 16       	cp	r1, r22
     a86:	17 06       	cpc	r1, r23
     a88:	1c f4       	brge	.+6      	; 0xa90 <strftime+0x55e>
     a8a:	fb 01       	movw	r30, r22
     a8c:	e0 0f       	add	r30, r16
     a8e:	f1 1f       	adc	r31, r17
     a90:	cf 01       	movw	r24, r30
     a92:	6c e3       	ldi	r22, 0x3C	; 60
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     a9a:	97 ff       	sbrs	r25, 7
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <strftime+0x572>
     a9e:	91 95       	neg	r25
     aa0:	81 95       	neg	r24
     aa2:	91 09       	sbc	r25, r1
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	cf 01       	movw	r24, r30
     aaa:	6c e3       	ldi	r22, 0x3C	; 60
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     ab2:	7f 93       	push	r23
     ab4:	6f 93       	push	r22
     ab6:	e6 ea       	ldi	r30, 0xA6	; 166
     ab8:	f6 e4       	ldi	r31, 0x46	; 70
     aba:	ff 93       	push	r31
     abc:	ef 93       	push	r30
     abe:	df 92       	push	r13
     ac0:	cf 92       	push	r12
     ac2:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <strftime+0x5a4>
     acc:	8f e3       	ldi	r24, 0x3F	; 63
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	1a 82       	std	Y+2, r1	; 0x02
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	93 01       	movw	r18, r6
     ad8:	28 0f       	add	r18, r24
     ada:	39 1f       	adc	r19, r25
     adc:	a9 a1       	ldd	r26, Y+33	; 0x21
     ade:	ba a1       	ldd	r27, Y+34	; 0x22
     ae0:	2a 17       	cp	r18, r26
     ae2:	3b 07       	cpc	r19, r27
     ae4:	98 f4       	brcc	.+38     	; 0xb0c <strftime+0x5da>
     ae6:	d2 01       	movw	r26, r4
     ae8:	f6 01       	movw	r30, r12
     aea:	af 01       	movw	r20, r30
     aec:	4c 19       	sub	r20, r12
     aee:	5d 09       	sbc	r21, r13
     af0:	48 17       	cp	r20, r24
     af2:	59 07       	cpc	r21, r25
     af4:	1c f4       	brge	.+6      	; 0xafc <strftime+0x5ca>
     af6:	41 91       	ld	r20, Z+
     af8:	4d 93       	st	X+, r20
     afa:	f7 cf       	rjmp	.-18     	; 0xaea <strftime+0x5b8>
     afc:	97 ff       	sbrs	r25, 7
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <strftime+0x5d2>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	48 0e       	add	r4, r24
     b06:	59 1e       	adc	r5, r25
     b08:	39 01       	movw	r6, r18
     b0a:	3c cd       	rjmp	.-1416   	; 0x584 <strftime+0x52>
     b0c:	f2 01       	movw	r30, r4
     b0e:	10 82       	st	Z, r1
     b10:	0e c0       	rjmp	.+28     	; 0xb2e <strftime+0x5fc>
     b12:	d2 01       	movw	r26, r4
     b14:	8d 93       	st	X+, r24
     b16:	2d 01       	movw	r4, r26
     b18:	bf ef       	ldi	r27, 0xFF	; 255
     b1a:	6b 1a       	sub	r6, r27
     b1c:	7b 0a       	sbc	r7, r27
     b1e:	88 23       	and	r24, r24
     b20:	31 f0       	breq	.+12     	; 0xb2e <strftime+0x5fc>
     b22:	ef ef       	ldi	r30, 0xFF	; 255
     b24:	8e 1a       	sub	r8, r30
     b26:	9e 0a       	sbc	r9, r30
     b28:	2d cd       	rjmp	.-1446   	; 0x584 <strftime+0x52>
     b2a:	d2 01       	movw	r26, r4
     b2c:	1c 92       	st	X, r1
     b2e:	c3 01       	movw	r24, r6
     b30:	a2 96       	adiw	r28, 0x22	; 34
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	bf 90       	pop	r11
     b48:	af 90       	pop	r10
     b4a:	9f 90       	pop	r9
     b4c:	8f 90       	pop	r8
     b4e:	7f 90       	pop	r7
     b50:	6f 90       	pop	r6
     b52:	5f 90       	pop	r5
     b54:	4f 90       	pop	r4
     b56:	3f 90       	pop	r3
     b58:	2f 90       	pop	r2
     b5a:	08 95       	ret

00000b5c <time>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	60 91 a7 4a 	lds	r22, 0x4AA7	; 0x804aa7 <__system_time>
     b66:	70 91 a8 4a 	lds	r23, 0x4AA8	; 0x804aa8 <__system_time+0x1>
     b6a:	80 91 a9 4a 	lds	r24, 0x4AA9	; 0x804aa9 <__system_time+0x2>
     b6e:	90 91 aa 4a 	lds	r25, 0x4AAA	; 0x804aaa <__system_time+0x3>
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	30 97       	sbiw	r30, 0x00	; 0
     b76:	21 f0       	breq	.+8      	; 0xb80 <time+0x24>
     b78:	60 83       	st	Z, r22
     b7a:	71 83       	std	Z+1, r23	; 0x01
     b7c:	82 83       	std	Z+2, r24	; 0x02
     b7e:	93 83       	std	Z+3, r25	; 0x03
     b80:	08 95       	ret

00000b82 <week_of_year>:
     b82:	fc 01       	movw	r30, r24
     b84:	20 85       	ldd	r18, Z+8	; 0x08
     b86:	31 85       	ldd	r19, Z+9	; 0x09
     b88:	c9 01       	movw	r24, r18
     b8a:	07 96       	adiw	r24, 0x07	; 7
     b8c:	44 81       	ldd	r20, Z+4	; 0x04
     b8e:	84 1b       	sub	r24, r20
     b90:	91 09       	sbc	r25, r1
     b92:	47 fd       	sbrc	r20, 7
     b94:	93 95       	inc	r25
     b96:	86 0f       	add	r24, r22
     b98:	91 1d       	adc	r25, r1
     b9a:	e7 e0       	ldi	r30, 0x07	; 7
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	bf 01       	movw	r22, r30
     ba0:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     ba4:	a9 01       	movw	r20, r18
     ba6:	48 1b       	sub	r20, r24
     ba8:	59 0b       	sbc	r21, r25
     baa:	ca 01       	movw	r24, r20
     bac:	57 fd       	sbrc	r21, 7
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <week_of_year+0x3a>
     bb0:	bf 01       	movw	r22, r30
     bb2:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	86 0f       	add	r24, r22
     bba:	08 95       	ret
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	08 95       	ret

00000bc0 <system_tick>:
     bc0:	8f 93       	push	r24
     bc2:	8f b7       	in	r24, 0x3f	; 63
     bc4:	8f 93       	push	r24
     bc6:	f8 94       	cli
     bc8:	80 91 a7 4a 	lds	r24, 0x4AA7	; 0x804aa7 <__system_time>
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 a7 4a 	sts	0x4AA7, r24	; 0x804aa7 <__system_time>
     bd2:	80 91 a8 4a 	lds	r24, 0x4AA8	; 0x804aa8 <__system_time+0x1>
     bd6:	8f 4f       	sbci	r24, 0xFF	; 255
     bd8:	80 93 a8 4a 	sts	0x4AA8, r24	; 0x804aa8 <__system_time+0x1>
     bdc:	80 91 a9 4a 	lds	r24, 0x4AA9	; 0x804aa9 <__system_time+0x2>
     be0:	8f 4f       	sbci	r24, 0xFF	; 255
     be2:	80 93 a9 4a 	sts	0x4AA9, r24	; 0x804aa9 <__system_time+0x2>
     be6:	80 91 aa 4a 	lds	r24, 0x4AAA	; 0x804aaa <__system_time+0x3>
     bea:	8f 4f       	sbci	r24, 0xFF	; 255
     bec:	80 93 aa 4a 	sts	0x4AAA, r24	; 0x804aaa <__system_time+0x3>
     bf0:	8f 91       	pop	r24
     bf2:	8f bf       	out	0x3f, r24	; 63
     bf4:	8f 91       	pop	r24
     bf6:	08 95       	ret

00000bf8 <asctime_r>:
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	8c 01       	movw	r16, r24
     c0a:	eb 01       	movw	r28, r22
     c0c:	fc 01       	movw	r30, r24
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	b8 2f       	mov	r27, r24
     c12:	bb 0f       	add	r27, r27
     c14:	b8 0f       	add	r27, r24
     c16:	85 81       	ldd	r24, Z+5	; 0x05
     c18:	78 2f       	mov	r23, r24
     c1a:	77 0f       	add	r23, r23
     c1c:	78 0f       	add	r23, r24
     c1e:	9e 01       	movw	r18, r28
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	8b 2f       	mov	r24, r27
     c24:	84 0f       	add	r24, r20
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	84 5e       	subi	r24, 0xE4	; 228
     c2c:	9c 4f       	sbci	r25, 0xFC	; 252
     c2e:	af 4f       	sbci	r26, 0xFF	; 255
     c30:	fc 01       	movw	r30, r24
     c32:	5a 2f       	mov	r21, r26
     c34:	0e 94 b3 54 	call	0xa966	; 0xa966 <__xload_1>
     c38:	f9 01       	movw	r30, r18
     c3a:	61 93       	st	Z+, r22
     c3c:	9f 01       	movw	r18, r30
     c3e:	87 2f       	mov	r24, r23
     c40:	84 0f       	add	r24, r20
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	8e 5c       	subi	r24, 0xCE	; 206
     c48:	9c 4f       	sbci	r25, 0xFC	; 252
     c4a:	af 4f       	sbci	r26, 0xFF	; 255
     c4c:	fc 01       	movw	r30, r24
     c4e:	5a 2f       	mov	r21, r26
     c50:	0e 94 b3 54 	call	0xa966	; 0xa966 <__xload_1>
     c54:	f9 01       	movw	r30, r18
     c56:	63 83       	std	Z+3, r22	; 0x03
     c58:	4f 5f       	subi	r20, 0xFF	; 255
     c5a:	43 30       	cpi	r20, 0x03	; 3
     c5c:	11 f7       	brne	.-60     	; 0xc22 <asctime_r+0x2a>
     c5e:	80 e2       	ldi	r24, 0x20	; 32
     c60:	8f 83       	std	Y+7, r24	; 0x07
     c62:	8b 83       	std	Y+3, r24	; 0x03
     c64:	be 01       	movw	r22, r28
     c66:	68 5f       	subi	r22, 0xF8	; 248
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	f8 01       	movw	r30, r16
     c6c:	83 81       	ldd	r24, Z+3	; 0x03
     c6e:	40 e2       	ldi	r20, 0x20	; 32
     c70:	08 2e       	mov	r0, r24
     c72:	00 0c       	add	r0, r0
     c74:	99 0b       	sbc	r25, r25
     c76:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     c7a:	be 01       	movw	r22, r28
     c7c:	65 5f       	subi	r22, 0xF5	; 245
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	f8 01       	movw	r30, r16
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	4a e3       	ldi	r20, 0x3A	; 58
     c86:	08 2e       	mov	r0, r24
     c88:	00 0c       	add	r0, r0
     c8a:	99 0b       	sbc	r25, r25
     c8c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     c90:	be 01       	movw	r22, r28
     c92:	62 5f       	subi	r22, 0xF2	; 242
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	f8 01       	movw	r30, r16
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	4a e3       	ldi	r20, 0x3A	; 58
     c9c:	08 2e       	mov	r0, r24
     c9e:	00 0c       	add	r0, r0
     ca0:	99 0b       	sbc	r25, r25
     ca2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     ca6:	be 01       	movw	r22, r28
     ca8:	6f 5e       	subi	r22, 0xEF	; 239
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	f8 01       	movw	r30, r16
     cae:	80 81       	ld	r24, Z
     cb0:	40 e2       	ldi	r20, 0x20	; 32
     cb2:	08 2e       	mov	r0, r24
     cb4:	00 0c       	add	r0, r0
     cb6:	99 0b       	sbc	r25, r25
     cb8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     cbc:	f8 01       	movw	r30, r16
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	64 e6       	ldi	r22, 0x64	; 100
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	84 59       	subi	r24, 0x94	; 148
     cc8:	98 4f       	sbci	r25, 0xF8	; 248
     cca:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
     cd2:	be 01       	movw	r22, r28
     cd4:	6c 5e       	subi	r22, 0xEC	; 236
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	40 e2       	ldi	r20, 0x20	; 32
     cda:	c6 01       	movw	r24, r12
     cdc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     ce0:	be 01       	movw	r22, r28
     ce2:	6a 5e       	subi	r22, 0xEA	; 234
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	c7 01       	movw	r24, r14
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__print_lz>

00000cfe <gmtime_r>:
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	28 97       	sbiw	r28, 0x08	; 8
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	8b 01       	movw	r16, r22
     d1a:	fc 01       	movw	r30, r24
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	20 e8       	ldi	r18, 0x80	; 128
     d26:	31 e5       	ldi	r19, 0x51	; 81
     d28:	41 e0       	ldi	r20, 0x01	; 1
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
     d30:	69 01       	movw	r12, r18
     d32:	7a 01       	movw	r14, r20
     d34:	2c e3       	ldi	r18, 0x3C	; 60
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <__divmodsi4>
     d40:	29 83       	std	Y+1, r18	; 0x01
     d42:	3a 83       	std	Y+2, r19	; 0x02
     d44:	4b 83       	std	Y+3, r20	; 0x03
     d46:	5c 83       	std	Y+4, r21	; 0x04
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	ab 81       	ldd	r26, Y+3	; 0x03
     d4e:	bc 81       	ldd	r27, Y+4	; 0x04
     d50:	f8 01       	movw	r30, r16
     d52:	60 83       	st	Z, r22
     d54:	6c e3       	ldi	r22, 0x3C	; 60
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	f8 01       	movw	r30, r16
     d62:	a1 83       	std	Z+1, r26	; 0x01
     d64:	82 83       	std	Z+2, r24	; 0x02
     d66:	c6 01       	movw	r24, r12
     d68:	06 96       	adiw	r24, 0x06	; 6
     d6a:	67 e0       	ldi	r22, 0x07	; 7
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <__udivmodhi4>
     d72:	84 83       	std	Z+4, r24	; 0x04
     d74:	2d ea       	ldi	r18, 0xAD	; 173
     d76:	3e e8       	ldi	r19, 0x8E	; 142
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	c7 01       	movw	r24, r14
     d7e:	b6 01       	movw	r22, r12
     d80:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <__divmodsi4>
     d84:	29 83       	std	Y+1, r18	; 0x01
     d86:	3a 83       	std	Y+2, r19	; 0x02
     d88:	6d 83       	std	Y+5, r22	; 0x05
     d8a:	7e 83       	std	Y+6, r23	; 0x06
     d8c:	8f 83       	std	Y+7, r24	; 0x07
     d8e:	98 87       	std	Y+8, r25	; 0x08
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	24 e6       	ldi	r18, 0x64	; 100
     d96:	28 9f       	mul	r18, r24
     d98:	60 01       	movw	r12, r0
     d9a:	29 9f       	mul	r18, r25
     d9c:	d0 0c       	add	r13, r0
     d9e:	11 24       	eor	r1, r1
     da0:	6d 81       	ldd	r22, Y+5	; 0x05
     da2:	7e 81       	ldd	r23, Y+6	; 0x06
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	98 85       	ldd	r25, Y+8	; 0x08
     da8:	25 eb       	ldi	r18, 0xB5	; 181
     daa:	35 e0       	ldi	r19, 0x05	; 5
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <__divmodsi4>
     db4:	29 83       	std	Y+1, r18	; 0x01
     db6:	3a 83       	std	Y+2, r19	; 0x02
     db8:	6d 83       	std	Y+5, r22	; 0x05
     dba:	7e 83       	std	Y+6, r23	; 0x06
     dbc:	e9 80       	ldd	r14, Y+1	; 0x01
     dbe:	fa 80       	ldd	r15, Y+2	; 0x02
     dc0:	ee 0c       	add	r14, r14
     dc2:	ff 1c       	adc	r15, r15
     dc4:	ee 0c       	add	r14, r14
     dc6:	ff 1c       	adc	r15, r15
     dc8:	ec 0c       	add	r14, r12
     dca:	fd 1c       	adc	r15, r13
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	f5 e6       	ldi	r31, 0x65	; 101
     dd2:	ef 16       	cp	r14, r31
     dd4:	f1 04       	cpc	r15, r1
     dd6:	10 f0       	brcs	.+4      	; 0xddc <gmtime_r+0xde>
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <gmtime_r+0xe6>
     ddc:	24 e6       	ldi	r18, 0x64	; 100
     dde:	e2 16       	cp	r14, r18
     de0:	f1 04       	cpc	r15, r1
     de2:	19 f0       	breq	.+6      	; 0xdea <gmtime_r+0xec>
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <gmtime_r+0xf0>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	a9 01       	movw	r20, r18
     df0:	44 59       	subi	r20, 0x94	; 148
     df2:	5e 4f       	sbci	r21, 0xFE	; 254
     df4:	48 17       	cp	r20, r24
     df6:	59 07       	cpc	r21, r25
     df8:	68 f4       	brcc	.+26     	; 0xe14 <gmtime_r+0x116>
     dfa:	6d e6       	ldi	r22, 0x6D	; 109
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	82 1b       	sub	r24, r18
     e00:	93 0b       	sbc	r25, r19
     e02:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	e8 0e       	add	r14, r24
     e0c:	f9 1e       	adc	r15, r25
     e0e:	cd 01       	movw	r24, r26
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	44 e6       	ldi	r20, 0x64	; 100
     e16:	e4 0e       	add	r14, r20
     e18:	f1 1c       	adc	r15, r1
     e1a:	f8 01       	movw	r30, r16
     e1c:	e6 82       	std	Z+6, r14	; 0x06
     e1e:	f7 82       	std	Z+7, r15	; 0x07
     e20:	80 87       	std	Z+8, r24	; 0x08
     e22:	91 87       	std	Z+9, r25	; 0x09
     e24:	25 5c       	subi	r18, 0xC5	; 197
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	82 17       	cp	r24, r18
     e2a:	93 07       	cpc	r25, r19
     e2c:	48 f4       	brcc	.+18     	; 0xe40 <gmtime_r+0x142>
     e2e:	6f e1       	ldi	r22, 0x1F	; 31
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	f8 01       	movw	r30, r16
     e3c:	85 83       	std	Z+5, r24	; 0x05
     e3e:	22 c0       	rjmp	.+68     	; 0xe84 <gmtime_r+0x186>
     e40:	69 e9       	ldi	r22, 0x99	; 153
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	82 1b       	sub	r24, r18
     e46:	93 0b       	sbc	r25, r19
     e48:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	f8 2e       	mov	r15, r24
     e52:	ff 0c       	add	r15, r15
     e54:	ff 0c       	add	r15, r15
     e56:	f8 0e       	add	r15, r24
     e58:	6d e3       	ldi	r22, 0x3D	; 61
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	cd 01       	movw	r24, r26
     e5e:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	e8 2e       	mov	r14, r24
     e68:	ee 0c       	add	r14, r14
     e6a:	6f e1       	ldi	r22, 0x1F	; 31
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	22 e0       	ldi	r18, 0x02	; 2
     e7a:	28 0f       	add	r18, r24
     e7c:	f2 0e       	add	r15, r18
     e7e:	fe 0c       	add	r15, r14
     e80:	f8 01       	movw	r30, r16
     e82:	f5 82       	std	Z+5, r15	; 0x05
     e84:	a3 83       	std	Z+3, r26	; 0x03
     e86:	f8 01       	movw	r30, r16
     e88:	12 86       	std	Z+10, r1	; 0x0a
     e8a:	13 86       	std	Z+11, r1	; 0x0b
     e8c:	83 81       	ldd	r24, Z+3	; 0x03
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	83 83       	std	Z+3, r24	; 0x03
     e92:	28 96       	adiw	r28, 0x08	; 8
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	08 95       	ret

00000eaa <iso_week_date_r>:
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	8c 01       	movw	r16, r24
     ebc:	7b 01       	movw	r14, r22
     ebe:	ea 01       	movw	r28, r20
     ec0:	88 83       	st	Y, r24
     ec2:	99 83       	std	Y+1, r25	; 0x01
     ec4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <is_leap_year>
     ec8:	28 2f       	mov	r18, r24
     eca:	a8 01       	movw	r20, r16
     ecc:	40 5d       	subi	r20, 0xD0	; 208
     ece:	57 40       	sbci	r21, 0x07	; 7
     ed0:	6d e6       	ldi	r22, 0x6D	; 109
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	46 9f       	mul	r20, r22
     ed6:	c0 01       	movw	r24, r0
     ed8:	47 9f       	mul	r20, r23
     eda:	90 0d       	add	r25, r0
     edc:	56 9f       	mul	r21, r22
     ede:	90 0d       	add	r25, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	8e 0d       	add	r24, r14
     ee4:	9f 1d       	adc	r25, r15
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	79 f0       	breq	.+30     	; 0xf0a <iso_week_date_r+0x60>
     eec:	ba 01       	movw	r22, r20
     eee:	76 95       	lsr	r23
     ef0:	67 95       	ror	r22
     ef2:	76 95       	lsr	r23
     ef4:	67 95       	ror	r22
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	86 0f       	add	r24, r22
     efc:	97 1f       	adc	r25, r23
     efe:	82 1b       	sub	r24, r18
     f00:	91 09       	sbc	r25, r1
     f02:	45 36       	cpi	r20, 0x65	; 101
     f04:	51 05       	cpc	r21, r1
     f06:	08 f0       	brcs	.+2      	; 0xf0a <iso_week_date_r+0x60>
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	06 96       	adiw	r24, 0x06	; 6
     f0c:	67 e0       	ldi	r22, 0x07	; 7
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <__udivmodhi4>
     f14:	6c 01       	movw	r12, r24
     f16:	89 2b       	or	r24, r25
     f18:	19 f4       	brne	.+6      	; 0xf20 <iso_week_date_r+0x76>
     f1a:	87 e0       	ldi	r24, 0x07	; 7
     f1c:	c8 2e       	mov	r12, r24
     f1e:	d1 2c       	mov	r13, r1
     f20:	cc 82       	std	Y+4, r12	; 0x04
     f22:	dd 82       	std	Y+5, r13	; 0x05
     f24:	c7 01       	movw	r24, r14
     f26:	0b 96       	adiw	r24, 0x0b	; 11
     f28:	8c 19       	sub	r24, r12
     f2a:	9d 09       	sbc	r25, r13
     f2c:	67 e0       	ldi	r22, 0x07	; 7
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     f34:	65 33       	cpi	r22, 0x35	; 53
     f36:	71 05       	cpc	r23, r1
     f38:	b1 f4       	brne	.+44     	; 0xf66 <iso_week_date_r+0xbc>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	c8 1a       	sub	r12, r24
     f3e:	d1 08       	sbc	r13, r1
     f40:	ec 18       	sub	r14, r12
     f42:	fd 08       	sbc	r15, r13
     f44:	82 2f       	mov	r24, r18
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	84 59       	subi	r24, 0x94	; 148
     f4a:	9e 4f       	sbci	r25, 0xFE	; 254
     f4c:	23 e0       	ldi	r18, 0x03	; 3
     f4e:	e2 0e       	add	r14, r18
     f50:	f1 1c       	adc	r15, r1
     f52:	8e 15       	cp	r24, r14
     f54:	9f 05       	cpc	r25, r15
     f56:	3c f4       	brge	.+14     	; 0xf66 <iso_week_date_r+0xbc>
     f58:	88 81       	ld	r24, Y
     f5a:	99 81       	ldd	r25, Y+1	; 0x01
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	88 83       	st	Y, r24
     f60:	99 83       	std	Y+1, r25	; 0x01
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	6a 83       	std	Y+2, r22	; 0x02
     f68:	7b 83       	std	Y+3, r23	; 0x03
     f6a:	67 2b       	or	r22, r23
     f6c:	79 f4       	brne	.+30     	; 0xf8c <iso_week_date_r+0xe2>
     f6e:	01 50       	subi	r16, 0x01	; 1
     f70:	11 09       	sbc	r17, r1
     f72:	c8 01       	movw	r24, r16
     f74:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <is_leap_year>
     f78:	68 2f       	mov	r22, r24
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	64 59       	subi	r22, 0x94	; 148
     f7e:	7e 4f       	sbci	r23, 0xFE	; 254
     f80:	ae 01       	movw	r20, r28
     f82:	c8 01       	movw	r24, r16
     f84:	0e 94 55 07 	call	0xeaa	; 0xeaa <iso_week_date_r>
     f88:	cc 82       	std	Y+4, r12	; 0x04
     f8a:	dd 82       	std	Y+5, r13	; 0x05
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	08 95       	ret

00000f9e <__print_lz>:
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	eb 01       	movw	r28, r22
     fa6:	14 2f       	mov	r17, r20
     fa8:	6a e0       	ldi	r22, 0x0A	; 10
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
     fb0:	60 5d       	subi	r22, 0xD0	; 208
     fb2:	68 83       	st	Y, r22
     fb4:	80 5d       	subi	r24, 0xD0	; 208
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	1a 83       	std	Y+2, r17	; 0x02
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	08 95       	ret

00000fc2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     fc2:	0e 94 98 2c 	call	0x5930	; 0x5930 <system_init>
     fc6:	08 95       	ret

00000fc8 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     fd4:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     fd8:	80 ff       	sbrs	r24, 0
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     fe2:	8f 91       	pop	r24
     fe4:	0f 90       	pop	r0
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	0f 90       	pop	r0
     fea:	1f 90       	pop	r1
     fec:	18 95       	reti

00000fee <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     ff6:	80 91 05 47 	lds	r24, 0x4705	; 0x804705 <_ZZ9serial_RxhE4buff>
     ffa:	90 91 06 47 	lds	r25, 0x4706	; 0x804706 <_ZZ9serial_RxhE4buff+0x1>
     ffe:	89 2b       	or	r24, r25
    1000:	31 f4       	brne	.+12     	; 0x100e <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
    1002:	0e 94 cb 3c 	call	0x7996	; 0x7996 <nextEmptySBRxBuffer>
    1006:	80 93 05 47 	sts	0x4705, r24	; 0x804705 <_ZZ9serial_RxhE4buff>
    100a:	90 93 06 47 	sts	0x4706, r25	; 0x804706 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
    100e:	c0 91 05 47 	lds	r28, 0x4705	; 0x804705 <_ZZ9serial_RxhE4buff>
    1012:	d0 91 06 47 	lds	r29, 0x4706	; 0x804706 <_ZZ9serial_RxhE4buff+0x1>
    1016:	20 97       	sbiw	r28, 0x00	; 0
    1018:	09 f4       	brne	.+2      	; 0x101c <_Z9serial_Rxh+0x2e>
    101a:	73 c1       	rjmp	.+742    	; 0x1302 <_Z9serial_Rxh+0x314>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
    101c:	81 2f       	mov	r24, r17
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <toupper>
    1024:	ac 01       	movw	r20, r24
    1026:	28 2f       	mov	r18, r24

		if(ignoreCount)
    1028:	90 91 04 47 	lds	r25, 0x4704	; 0x804704 <_ZZ9serial_RxhE11ignoreCount>
    102c:	99 23       	and	r25, r25
    102e:	21 f0       	breq	.+8      	; 0x1038 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
    1030:	91 50       	subi	r25, 0x01	; 1
    1032:	90 93 04 47 	sts	0x4704, r25	; 0x804704 <_ZZ9serial_RxhE11ignoreCount>
    1036:	65 c1       	rjmp	.+714    	; 0x1302 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
    1038:	4b 31       	cpi	r20, 0x1B	; 27
    103a:	21 f4       	brne	.+8      	; 0x1044 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	80 93 04 47 	sts	0x4704, r24	; 0x804704 <_ZZ9serial_RxhE11ignoreCount>
    1042:	5f c1       	rjmp	.+702    	; 0x1302 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
    1044:	4d 30       	cpi	r20, 0x0D	; 13
    1046:	09 f0       	breq	.+2      	; 0x104a <_Z9serial_Rxh+0x5c>
    1048:	3f c0       	rjmp	.+126    	; 0x10c8 <_Z9serial_Rxh+0xda>
		{
			if(receiving_msg)
    104a:	80 91 d0 46 	lds	r24, 0x46D0	; 0x8046d0 <_ZZ9serial_RxhE13receiving_msg>
    104e:	88 23       	and	r24, r24
    1050:	31 f1       	breq	.+76     	; 0x109e <_Z9serial_Rxh+0xb0>
			{
				if(charIndex > 0)
    1052:	e0 91 03 47 	lds	r30, 0x4703	; 0x804703 <_ZZ9serial_RxhE9charIndex>
    1056:	ee 23       	and	r30, r30
    1058:	f9 f0       	breq	.+62     	; 0x1098 <_Z9serial_Rxh+0xaa>
				{
					buff->type = SERIALBUS_MSG_QUERY;
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
    105e:	80 91 ce 46 	lds	r24, 0x46CE	; 0x8046ce <_ZZ9serial_RxhE6msg_ID>
    1062:	90 91 cf 46 	lds	r25, 0x46CF	; 0x8046cf <_ZZ9serial_RxhE6msg_ID+0x1>
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
    106a:	80 91 cd 46 	lds	r24, 0x46CD	; 0x8046cd <_ZZ9serial_RxhE11field_index>
    106e:	88 23       	and	r24, r24
    1070:	79 f0       	breq	.+30     	; 0x1090 <_Z9serial_Rxh+0xa2>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	40 91 cc 46 	lds	r20, 0x46CC	; 0x8046cc <_ZZ9serial_RxhE9field_len>
    107a:	54 e1       	ldi	r21, 0x14	; 20
    107c:	58 9f       	mul	r21, r24
    107e:	90 01       	movw	r18, r0
    1080:	59 9f       	mul	r21, r25
    1082:	30 0d       	add	r19, r0
    1084:	11 24       	eor	r1, r1
    1086:	c2 0f       	add	r28, r18
    1088:	d3 1f       	adc	r29, r19
    108a:	c4 0f       	add	r28, r20
    108c:	d1 1d       	adc	r29, r1
    108e:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	ef 52       	subi	r30, 0x2F	; 47
    1094:	f9 4b       	sbci	r31, 0xB9	; 185
    1096:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
    1098:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <sb_send_NewLine>
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <_Z9serial_Rxh+0xb8>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
    10a6:	10 92 03 47 	sts	0x4703, r1	; 0x804703 <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
    10aa:	10 92 cc 46 	sts	0x46CC, r1	; 0x8046cc <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
    10ae:	10 92 ce 46 	sts	0x46CE, r1	; 0x8046ce <_ZZ9serial_RxhE6msg_ID>
    10b2:	10 92 cf 46 	sts	0x46CF, r1	; 0x8046cf <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
    10b6:	10 92 cd 46 	sts	0x46CD, r1	; 0x8046cd <_ZZ9serial_RxhE11field_index>
			buff = NULL;
    10ba:	10 92 05 47 	sts	0x4705, r1	; 0x804705 <_ZZ9serial_RxhE4buff>
    10be:	10 92 06 47 	sts	0x4706, r1	; 0x804706 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = false;
    10c2:	10 92 d0 46 	sts	0x46D0, r1	; 0x8046d0 <_ZZ9serial_RxhE13receiving_msg>
    10c6:	1d c1       	rjmp	.+570    	; 0x1302 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char)
    10c8:	44 23       	and	r20, r20
    10ca:	09 f4       	brne	.+2      	; 0x10ce <_Z9serial_Rxh+0xe0>
    10cc:	1a c1       	rjmp	.+564    	; 0x1302 <_Z9serial_Rxh+0x314>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    10ce:	e0 91 03 47 	lds	r30, 0x4703	; 0x804703 <_ZZ9serial_RxhE9charIndex>
    10d2:	8e 2f       	mov	r24, r30
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	dc 01       	movw	r26, r24
    10d8:	af 52       	subi	r26, 0x2F	; 47
    10da:	b9 4b       	sbci	r27, 0xB9	; 185
    10dc:	4c 93       	st	X, r20

			if(charIndex)
    10de:	ee 23       	and	r30, r30
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <_Z9serial_Rxh+0xf6>
    10e2:	d7 c0       	rjmp	.+430    	; 0x1292 <_Z9serial_Rxh+0x2a4>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
    10e4:	4f 37       	cpi	r20, 0x7F	; 127
    10e6:	09 f0       	breq	.+2      	; 0x10ea <_Z9serial_Rxh+0xfc>
    10e8:	5f c0       	rjmp	.+190    	; 0x11a8 <_Z9serial_Rxh+0x1ba>
				{
					charIndex--;
    10ea:	e1 50       	subi	r30, 0x01	; 1
    10ec:	e0 93 03 47 	sts	0x4703, r30	; 0x804703 <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
    10f0:	80 91 cd 46 	lds	r24, 0x46CD	; 0x8046cd <_ZZ9serial_RxhE11field_index>
    10f4:	81 11       	cpse	r24, r1
    10f6:	13 c0       	rjmp	.+38     	; 0x111e <_Z9serial_Rxh+0x130>
					{
						msg_ID -= textBuff[charIndex];
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	ef 52       	subi	r30, 0x2F	; 47
    10fc:	f9 4b       	sbci	r31, 0xB9	; 185
    10fe:	30 81       	ld	r19, Z
    1100:	80 91 ce 46 	lds	r24, 0x46CE	; 0x8046ce <_ZZ9serial_RxhE6msg_ID>
    1104:	90 91 cf 46 	lds	r25, 0x46CF	; 0x8046cf <_ZZ9serial_RxhE6msg_ID+0x1>
    1108:	83 1b       	sub	r24, r19
    110a:	91 09       	sbc	r25, r1
						msg_ID /= 10;
    110c:	6a e0       	ldi	r22, 0x0A	; 10
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
    1114:	60 93 ce 46 	sts	0x46CE, r22	; 0x8046ce <_ZZ9serial_RxhE6msg_ID>
    1118:	70 93 cf 46 	sts	0x46CF, r23	; 0x8046cf <_ZZ9serial_RxhE6msg_ID+0x1>
    111c:	39 c0       	rjmp	.+114    	; 0x1190 <_Z9serial_Rxh+0x1a2>
					}
					else if(field_len)
    111e:	90 91 cc 46 	lds	r25, 0x46CC	; 0x8046cc <_ZZ9serial_RxhE9field_len>
    1122:	99 23       	and	r25, r25
    1124:	91 f0       	breq	.+36     	; 0x114a <_Z9serial_Rxh+0x15c>
					{
						field_len--;
    1126:	3f ef       	ldi	r19, 0xFF	; 255
    1128:	39 0f       	add	r19, r25
    112a:	30 93 cc 46 	sts	0x46CC, r19	; 0x8046cc <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	64 e1       	ldi	r22, 0x14	; 20
    1134:	68 9f       	mul	r22, r24
    1136:	a0 01       	movw	r20, r0
    1138:	69 9f       	mul	r22, r25
    113a:	50 0d       	add	r21, r0
    113c:	11 24       	eor	r1, r1
    113e:	c4 0f       	add	r28, r20
    1140:	d5 1f       	adc	r29, r21
    1142:	c3 0f       	add	r28, r19
    1144:	d1 1d       	adc	r29, r1
    1146:	1b 82       	std	Y+3, r1	; 0x03
    1148:	23 c0       	rjmp	.+70     	; 0x1190 <_Z9serial_Rxh+0x1a2>
					}
					else if(textBuff[charIndex] == ' ')
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	ef 52       	subi	r30, 0x2F	; 47
    114e:	f9 4b       	sbci	r31, 0xB9	; 185
    1150:	90 81       	ld	r25, Z
    1152:	90 32       	cpi	r25, 0x20	; 32
    1154:	a1 f4       	brne	.+40     	; 0x117e <_Z9serial_Rxh+0x190>
					{
						field_index--;
    1156:	81 50       	subi	r24, 0x01	; 1
    1158:	80 93 cd 46 	sts	0x46CD, r24	; 0x8046cd <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
    115c:	34 e1       	ldi	r19, 0x14	; 20
    115e:	83 9f       	mul	r24, r19
    1160:	c0 01       	movw	r24, r0
    1162:	11 24       	eor	r1, r1
    1164:	03 96       	adiw	r24, 0x03	; 3
    1166:	c8 0f       	add	r28, r24
    1168:	d9 1f       	adc	r29, r25
    116a:	fe 01       	movw	r30, r28
    116c:	01 90       	ld	r0, Z+
    116e:	00 20       	and	r0, r0
    1170:	e9 f7       	brne	.-6      	; 0x116c <_Z9serial_Rxh+0x17e>
    1172:	31 97       	sbiw	r30, 0x01	; 1
    1174:	ec 1b       	sub	r30, r28
    1176:	fd 0b       	sbc	r31, r29
    1178:	e0 93 cc 46 	sts	0x46CC, r30	; 0x8046cc <_ZZ9serial_RxhE9field_len>
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <_Z9serial_Rxh+0x1a2>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
    117e:	94 e1       	ldi	r25, 0x14	; 20
    1180:	89 9f       	mul	r24, r25
    1182:	c0 0d       	add	r28, r0
    1184:	d1 1d       	adc	r29, r1
    1186:	11 24       	eor	r1, r1
    1188:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
    118a:	81 50       	subi	r24, 0x01	; 1
    118c:	80 93 cd 46 	sts	0x46CD, r24	; 0x8046cd <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
    1190:	80 91 03 47 	lds	r24, 0x4703	; 0x804703 <_ZZ9serial_RxhE9charIndex>
    1194:	e8 2f       	mov	r30, r24
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	ef 52       	subi	r30, 0x2F	; 47
    119a:	f9 4b       	sbci	r31, 0xB9	; 185
    119c:	10 82       	st	Z, r1

					if(charIndex == 0)
    119e:	81 11       	cpse	r24, r1
    11a0:	ab c0       	rjmp	.+342    	; 0x12f8 <_Z9serial_Rxh+0x30a>
					{
						receiving_msg = false;
    11a2:	10 92 d0 46 	sts	0x46D0, r1	; 0x8046d0 <_ZZ9serial_RxhE13receiving_msg>
    11a6:	a8 c0       	rjmp	.+336    	; 0x12f8 <_Z9serial_Rxh+0x30a>
					}
				}
				else
				{
					if(rx_char == ' ')
    11a8:	40 32       	cpi	r20, 0x20	; 32
    11aa:	81 f5       	brne	.+96     	; 0x120c <_Z9serial_Rxh+0x21e>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
    11ac:	fc 01       	movw	r30, r24
    11ae:	e0 53       	subi	r30, 0x30	; 48
    11b0:	f9 4b       	sbci	r31, 0xB9	; 185
    11b2:	30 81       	ld	r19, Z
    11b4:	30 32       	cpi	r19, 0x20	; 32
    11b6:	09 f4       	brne	.+2      	; 0x11ba <_Z9serial_Rxh+0x1cc>
    11b8:	98 c0       	rjmp	.+304    	; 0x12ea <_Z9serial_Rxh+0x2fc>
    11ba:	30 91 cd 46 	lds	r19, 0x46CD	; 0x8046cd <_ZZ9serial_RxhE11field_index>
    11be:	43 2f       	mov	r20, r19
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	ba 01       	movw	r22, r20
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	63 30       	cpi	r22, 0x03	; 3
    11ca:	71 05       	cpc	r23, r1
    11cc:	0c f0       	brlt	.+2      	; 0x11d0 <_Z9serial_Rxh+0x1e2>
    11ce:	8f c0       	rjmp	.+286    	; 0x12ee <_Z9serial_Rxh+0x300>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
    11d0:	33 23       	and	r19, r19
    11d2:	79 f0       	breq	.+30     	; 0x11f2 <_Z9serial_Rxh+0x204>
							{
								buff->fields[field_index - 1][field_len] = '\0';
    11d4:	41 50       	subi	r20, 0x01	; 1
    11d6:	51 09       	sbc	r21, r1
    11d8:	e0 91 cc 46 	lds	r30, 0x46CC	; 0x8046cc <_ZZ9serial_RxhE9field_len>
    11dc:	f4 e1       	ldi	r31, 0x14	; 20
    11de:	f4 9f       	mul	r31, r20
    11e0:	b0 01       	movw	r22, r0
    11e2:	f5 9f       	mul	r31, r21
    11e4:	70 0d       	add	r23, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	c6 0f       	add	r28, r22
    11ea:	d7 1f       	adc	r29, r23
    11ec:	ce 0f       	add	r28, r30
    11ee:	d1 1d       	adc	r29, r1
    11f0:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
    11f2:	3f 5f       	subi	r19, 0xFF	; 255
    11f4:	30 93 cd 46 	sts	0x46CD, r19	; 0x8046cd <_ZZ9serial_RxhE11field_index>
							field_len = 0;
    11f8:	10 92 cc 46 	sts	0x46CC, r1	; 0x8046cc <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	81 33       	cpi	r24, 0x31	; 49
    1200:	91 05       	cpc	r25, r1
    1202:	0c f0       	brlt	.+2      	; 0x1206 <_Z9serial_Rxh+0x218>
    1204:	81 e3       	ldi	r24, 0x31	; 49
    1206:	80 93 03 47 	sts	0x4703, r24	; 0x804703 <_ZZ9serial_RxhE9charIndex>
    120a:	76 c0       	rjmp	.+236    	; 0x12f8 <_Z9serial_Rxh+0x30a>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
    120c:	80 91 cc 46 	lds	r24, 0x46CC	; 0x8046cc <_ZZ9serial_RxhE9field_len>
    1210:	85 31       	cpi	r24, 0x15	; 21
    1212:	08 f0       	brcs	.+2      	; 0x1216 <_Z9serial_Rxh+0x228>
    1214:	6e c0       	rjmp	.+220    	; 0x12f2 <_Z9serial_Rxh+0x304>
					{
						if(field_index == 0)    /* message ID received */
    1216:	60 91 cd 46 	lds	r22, 0x46CD	; 0x8046cd <_ZZ9serial_RxhE11field_index>
    121a:	61 11       	cpse	r22, r1
    121c:	19 c0       	rjmp	.+50     	; 0x1250 <_Z9serial_Rxh+0x262>
						{
							msg_ID = msg_ID * 10 + rx_char;
    121e:	60 91 ce 46 	lds	r22, 0x46CE	; 0x8046ce <_ZZ9serial_RxhE6msg_ID>
    1222:	70 91 cf 46 	lds	r23, 0x46CF	; 0x8046cf <_ZZ9serial_RxhE6msg_ID+0x1>
    1226:	fb 01       	movw	r30, r22
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	66 0f       	add	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	66 0f       	add	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	6e 0f       	add	r22, r30
    123a:	7f 1f       	adc	r23, r31
    123c:	64 0f       	add	r22, r20
    123e:	71 1d       	adc	r23, r1
    1240:	60 93 ce 46 	sts	0x46CE, r22	; 0x8046ce <_ZZ9serial_RxhE6msg_ID>
    1244:	70 93 cf 46 	sts	0x46CF, r23	; 0x8046cf <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	80 93 cc 46 	sts	0x46CC, r24	; 0x8046cc <_ZZ9serial_RxhE9field_len>
    124e:	16 c0       	rjmp	.+44     	; 0x127c <_Z9serial_Rxh+0x28e>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	61 50       	subi	r22, 0x01	; 1
    1254:	71 09       	sbc	r23, r1
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	98 0f       	add	r25, r24
    125a:	90 93 cc 46 	sts	0x46CC, r25	; 0x8046cc <_ZZ9serial_RxhE9field_len>
    125e:	34 e1       	ldi	r19, 0x14	; 20
    1260:	36 9f       	mul	r19, r22
    1262:	f0 01       	movw	r30, r0
    1264:	37 9f       	mul	r19, r23
    1266:	f0 0d       	add	r31, r0
    1268:	11 24       	eor	r1, r1
    126a:	ce 0f       	add	r28, r30
    126c:	df 1f       	adc	r29, r31
    126e:	fe 01       	movw	r30, r28
    1270:	e8 0f       	add	r30, r24
    1272:	f1 1d       	adc	r31, r1
    1274:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
    1276:	c9 0f       	add	r28, r25
    1278:	d1 1d       	adc	r29, r1
    127a:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    127c:	80 91 03 47 	lds	r24, 0x4703	; 0x804703 <_ZZ9serial_RxhE9charIndex>
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	81 33       	cpi	r24, 0x31	; 49
    1286:	91 05       	cpc	r25, r1
    1288:	0c f0       	brlt	.+2      	; 0x128c <_Z9serial_Rxh+0x29e>
    128a:	81 e3       	ldi	r24, 0x31	; 49
    128c:	80 93 03 47 	sts	0x4703, r24	; 0x804703 <_ZZ9serial_RxhE9charIndex>
    1290:	33 c0       	rjmp	.+102    	; 0x12f8 <_Z9serial_Rxh+0x30a>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
    1292:	4f 37       	cpi	r20, 0x7F	; 127
    1294:	69 f4       	brne	.+26     	; 0x12b0 <_Z9serial_Rxh+0x2c2>
				{
					if(msg_ID <= 0)
    1296:	80 91 ce 46 	lds	r24, 0x46CE	; 0x8046ce <_ZZ9serial_RxhE6msg_ID>
    129a:	90 91 cf 46 	lds	r25, 0x46CF	; 0x8046cf <_ZZ9serial_RxhE6msg_ID+0x1>
    129e:	18 16       	cp	r1, r24
    12a0:	19 06       	cpc	r1, r25
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <_Z9serial_Rxh+0x2b8>
					{
						rx_char = '\0';
    12a4:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
    12a6:	10 92 ce 46 	sts	0x46CE, r1	; 0x8046ce <_ZZ9serial_RxhE6msg_ID>
    12aa:	10 92 cf 46 	sts	0x46CF, r1	; 0x8046cf <_ZZ9serial_RxhE6msg_ID+0x1>
    12ae:	24 c0       	rjmp	.+72     	; 0x12f8 <_Z9serial_Rxh+0x30a>
				}
				else if(rx_char == ' ') /* Handle Space */
    12b0:	40 32       	cpi	r20, 0x20	; 32
    12b2:	09 f1       	breq	.+66     	; 0x12f6 <_Z9serial_Rxh+0x308>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
    12b4:	10 92 cd 46 	sts	0x46CD, r1	; 0x8046cd <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
    12b8:	55 27       	eor	r21, r21
    12ba:	40 93 ce 46 	sts	0x46CE, r20	; 0x8046ce <_ZZ9serial_RxhE6msg_ID>
    12be:	50 93 cf 46 	sts	0x46CF, r21	; 0x8046cf <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	50 f4       	brcc	.+20     	; 0x12dc <_Z9serial_Rxh+0x2ee>
					{
						buff->fields[i][0] = '\0';
    12c8:	de 01       	movw	r26, r28
    12ca:	34 e1       	ldi	r19, 0x14	; 20
    12cc:	83 9f       	mul	r24, r19
    12ce:	a0 0d       	add	r26, r0
    12d0:	b1 1d       	adc	r27, r1
    12d2:	11 24       	eor	r1, r1
    12d4:	13 96       	adiw	r26, 0x03	; 3
    12d6:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	f4 cf       	rjmp	.-24     	; 0x12c4 <_Z9serial_Rxh+0x2d6>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = true;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 93 d0 46 	sts	0x46D0, r24	; 0x8046d0 <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
    12e2:	ef 5f       	subi	r30, 0xFF	; 255
    12e4:	e0 93 03 47 	sts	0x4703, r30	; 0x804703 <_ZZ9serial_RxhE9charIndex>
    12e8:	07 c0       	rjmp	.+14     	; 0x12f8 <_Z9serial_Rxh+0x30a>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <_Z9serial_Rxh+0x30a>
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <_Z9serial_Rxh+0x30a>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <_Z9serial_Rxh+0x30a>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
    12f6:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = true;
					charIndex++;
				}
			}

			if(rx_char)
    12f8:	22 23       	and	r18, r18
    12fa:	19 f0       	breq	.+6      	; 0x1302 <_Z9serial_Rxh+0x314>
			{
				sb_echo_char(rx_char);
    12fc:	82 2f       	mov	r24, r18
    12fe:	0e 94 d3 3d 	call	0x7ba6	; 0x7ba6 <sb_echo_char>
			}
		}
	}	
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	08 95       	ret

0000130a <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	0b b6       	in	r0, 0x3b	; 59
    1316:	0f 92       	push	r0
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
    1330:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    1334:	81 11       	cpse	r24, r1
    1336:	2b c0       	rjmp	.+86     	; 0x138e <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1338:	80 91 ca 46 	lds	r24, 0x46CA	; 0x8046ca <_ZZ11__vector_20E4buff>
    133c:	90 91 cb 46 	lds	r25, 0x46CB	; 0x8046cb <_ZZ11__vector_20E4buff+0x1>
    1340:	89 2b       	or	r24, r25
    1342:	31 f4       	brne	.+12     	; 0x1350 <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
    1344:	0e 94 26 38 	call	0x704c	; 0x704c <_Z18nextFullLBTxBufferv>
    1348:	80 93 ca 46 	sts	0x46CA, r24	; 0x8046ca <_ZZ11__vector_20E4buff>
    134c:	90 93 cb 46 	sts	0x46CB, r25	; 0x8046cb <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
    1350:	e0 91 ca 46 	lds	r30, 0x46CA	; 0x8046ca <_ZZ11__vector_20E4buff>
    1354:	f0 91 cb 46 	lds	r31, 0x46CB	; 0x8046cb <_ZZ11__vector_20E4buff+0x1>
    1358:	80 91 c9 46 	lds	r24, 0x46C9	; 0x8046c9 <_ZZ11__vector_20E9charIndex>
    135c:	df 01       	movw	r26, r30
    135e:	a8 0f       	add	r26, r24
    1360:	b1 1d       	adc	r27, r1
    1362:	9c 91       	ld	r25, X
    1364:	99 23       	and	r25, r25
    1366:	31 f0       	breq	.+12     	; 0x1374 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	80 93 c9 46 	sts	0x46C9, r24	; 0x8046c9 <_ZZ11__vector_20E9charIndex>
    136e:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    1372:	0d c0       	rjmp	.+26     	; 0x138e <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
    1374:	10 92 c9 46 	sts	0x46C9, r1	; 0x8046c9 <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
    1378:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    137a:	0e 94 26 38 	call	0x704c	; 0x704c <_Z18nextFullLBTxBufferv>
    137e:	80 93 ca 46 	sts	0x46CA, r24	; 0x8046ca <_ZZ11__vector_20E4buff>
    1382:	90 93 cb 46 	sts	0x46CB, r25	; 0x8046cb <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
    1386:	89 2b       	or	r24, r25
    1388:	11 f4       	brne	.+4      	; 0x138e <__vector_20+0x84>
			{
				linkbus_end_tx();
    138a:	0e 94 db 38 	call	0x71b6	; 0x71b6 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
    138e:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    1392:	81 11       	cpse	r24, r1
    1394:	2b c0       	rjmp	.+86     	; 0x13ec <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1396:	80 91 c7 46 	lds	r24, 0x46C7	; 0x8046c7 <_ZZ11__vector_20E4buff_0>
    139a:	90 91 c8 46 	lds	r25, 0x46C8	; 0x8046c8 <_ZZ11__vector_20E4buff_0+0x1>
    139e:	89 2b       	or	r24, r25
    13a0:	31 f4       	brne	.+12     	; 0x13ae <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
    13a2:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <nextFullSBTxBuffer>
    13a6:	80 93 c7 46 	sts	0x46C7, r24	; 0x8046c7 <_ZZ11__vector_20E4buff_0>
    13aa:	90 93 c8 46 	sts	0x46C8, r25	; 0x8046c8 <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    13ae:	e0 91 c7 46 	lds	r30, 0x46C7	; 0x8046c7 <_ZZ11__vector_20E4buff_0>
    13b2:	f0 91 c8 46 	lds	r31, 0x46C8	; 0x8046c8 <_ZZ11__vector_20E4buff_0+0x1>
    13b6:	80 91 c6 46 	lds	r24, 0x46C6	; 0x8046c6 <_ZZ11__vector_20E9charIndex_0>
    13ba:	df 01       	movw	r26, r30
    13bc:	a8 0f       	add	r26, r24
    13be:	b1 1d       	adc	r27, r1
    13c0:	9c 91       	ld	r25, X
    13c2:	99 23       	and	r25, r25
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	80 93 c6 46 	sts	0x46C6, r24	; 0x8046c6 <_ZZ11__vector_20E9charIndex_0>
    13cc:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    13d0:	0d c0       	rjmp	.+26     	; 0x13ec <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
    13d2:	10 92 c6 46 	sts	0x46C6, r1	; 0x8046c6 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
    13d6:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    13d8:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <nextFullSBTxBuffer>
    13dc:	80 93 c7 46 	sts	0x46C7, r24	; 0x8046c7 <_ZZ11__vector_20E4buff_0>
    13e0:	90 93 c8 46 	sts	0x46C8, r25	; 0x8046c8 <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
    13e4:	89 2b       	or	r24, r25
    13e6:	11 f4       	brne	.+4      	; 0x13ec <__vector_20+0xe2>
			{
				serialbus_end_tx();
    13e8:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <serialbus_end_tx>
			}
		}
	}
}
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0b be       	out	0x3b, r0	; 59
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	0f 90       	pop	r0
    140e:	1f 90       	pop	r1
    1410:	18 95       	reti

00001412 <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
    1412:	1f 92       	push	r1
    1414:	0f 92       	push	r0
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	0b b6       	in	r0, 0x3b	; 59
    141e:	0f 92       	push	r0
    1420:	2f 93       	push	r18
    1422:	3f 93       	push	r19
    1424:	4f 93       	push	r20
    1426:	5f 93       	push	r21
    1428:	6f 93       	push	r22
    142a:	7f 93       	push	r23
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
    1438:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    143c:	84 30       	cpi	r24, 0x04	; 4
    143e:	59 f5       	brne	.+86     	; 0x1496 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1440:	80 91 c4 46 	lds	r24, 0x46C4	; 0x8046c4 <_ZZ11__vector_56E4buff>
    1444:	90 91 c5 46 	lds	r25, 0x46C5	; 0x8046c5 <_ZZ11__vector_56E4buff+0x1>
    1448:	89 2b       	or	r24, r25
    144a:	31 f4       	brne	.+12     	; 0x1458 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
    144c:	0e 94 26 38 	call	0x704c	; 0x704c <_Z18nextFullLBTxBufferv>
    1450:	80 93 c4 46 	sts	0x46C4, r24	; 0x8046c4 <_ZZ11__vector_56E4buff>
    1454:	90 93 c5 46 	sts	0x46C5, r25	; 0x8046c5 <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
    1458:	e0 91 c4 46 	lds	r30, 0x46C4	; 0x8046c4 <_ZZ11__vector_56E4buff>
    145c:	f0 91 c5 46 	lds	r31, 0x46C5	; 0x8046c5 <_ZZ11__vector_56E4buff+0x1>
    1460:	80 91 c3 46 	lds	r24, 0x46C3	; 0x8046c3 <_ZZ11__vector_56E9charIndex>
    1464:	df 01       	movw	r26, r30
    1466:	a8 0f       	add	r26, r24
    1468:	b1 1d       	adc	r27, r1
    146a:	9c 91       	ld	r25, X
    146c:	99 23       	and	r25, r25
    146e:	31 f0       	breq	.+12     	; 0x147c <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 c3 46 	sts	0x46C3, r24	; 0x8046c3 <_ZZ11__vector_56E9charIndex>
    1476:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
    147c:	10 92 c3 46 	sts	0x46C3, r1	; 0x8046c3 <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
    1480:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    1482:	0e 94 26 38 	call	0x704c	; 0x704c <_Z18nextFullLBTxBufferv>
    1486:	80 93 c4 46 	sts	0x46C4, r24	; 0x8046c4 <_ZZ11__vector_56E4buff>
    148a:	90 93 c5 46 	sts	0x46C5, r25	; 0x8046c5 <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
    148e:	89 2b       	or	r24, r25
    1490:	11 f4       	brne	.+4      	; 0x1496 <__vector_56+0x84>
			{
				linkbus_end_tx();
    1492:	0e 94 db 38 	call	0x71b6	; 0x71b6 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
    1496:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	59 f5       	brne	.+86     	; 0x14f4 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    149e:	80 91 c1 46 	lds	r24, 0x46C1	; 0x8046c1 <_ZZ11__vector_56E4buff_0>
    14a2:	90 91 c2 46 	lds	r25, 0x46C2	; 0x8046c2 <_ZZ11__vector_56E4buff_0+0x1>
    14a6:	89 2b       	or	r24, r25
    14a8:	31 f4       	brne	.+12     	; 0x14b6 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
    14aa:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <nextFullSBTxBuffer>
    14ae:	80 93 c1 46 	sts	0x46C1, r24	; 0x8046c1 <_ZZ11__vector_56E4buff_0>
    14b2:	90 93 c2 46 	sts	0x46C2, r25	; 0x8046c2 <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    14b6:	e0 91 c1 46 	lds	r30, 0x46C1	; 0x8046c1 <_ZZ11__vector_56E4buff_0>
    14ba:	f0 91 c2 46 	lds	r31, 0x46C2	; 0x8046c2 <_ZZ11__vector_56E4buff_0+0x1>
    14be:	80 91 c0 46 	lds	r24, 0x46C0	; 0x8046c0 <_ZZ11__vector_56E9charIndex_0>
    14c2:	df 01       	movw	r26, r30
    14c4:	a8 0f       	add	r26, r24
    14c6:	b1 1d       	adc	r27, r1
    14c8:	9c 91       	ld	r25, X
    14ca:	99 23       	and	r25, r25
    14cc:	31 f0       	breq	.+12     	; 0x14da <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	80 93 c0 46 	sts	0x46C0, r24	; 0x8046c0 <_ZZ11__vector_56E9charIndex_0>
    14d4:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    14d8:	0d c0       	rjmp	.+26     	; 0x14f4 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
    14da:	10 92 c0 46 	sts	0x46C0, r1	; 0x8046c0 <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
    14de:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    14e0:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <nextFullSBTxBuffer>
    14e4:	80 93 c1 46 	sts	0x46C1, r24	; 0x8046c1 <_ZZ11__vector_56E4buff_0>
    14e8:	90 93 c2 46 	sts	0x46C2, r25	; 0x8046c2 <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
    14ec:	89 2b       	or	r24, r25
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <__vector_56+0xe2>
			{
				serialbus_end_tx();
    14f0:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <serialbus_end_tx>
			}
		}
	}
}
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0b be       	out	0x3b, r0	; 59
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
    1524:	80 91 be 46 	lds	r24, 0x46BE	; 0x8046be <_ZZ10linkbus_RxhE4buff>
    1528:	90 91 bf 46 	lds	r25, 0x46BF	; 0x8046bf <_ZZ10linkbus_RxhE4buff+0x1>
    152c:	89 2b       	or	r24, r25
    152e:	31 f4       	brne	.+12     	; 0x153c <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
    1530:	0e 94 7e 38 	call	0x70fc	; 0x70fc <_Z19nextEmptyLBRxBufferv>
    1534:	80 93 be 46 	sts	0x46BE, r24	; 0x8046be <_ZZ10linkbus_RxhE4buff>
    1538:	90 93 bf 46 	sts	0x46BF, r25	; 0x8046bf <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
    153c:	c0 91 be 46 	lds	r28, 0x46BE	; 0x8046be <_ZZ10linkbus_RxhE4buff>
    1540:	d0 91 bf 46 	lds	r29, 0x46BF	; 0x8046bf <_ZZ10linkbus_RxhE4buff+0x1>
    1544:	20 97       	sbiw	r28, 0x00	; 0
    1546:	09 f4       	brne	.+2      	; 0x154a <_Z10linkbus_Rxh+0x30>
    1548:	e3 c0       	rjmp	.+454    	; 0x1710 <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
    154a:	81 2f       	mov	r24, r17
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 da 4f 	call	0x9fb4	; 0x9fb4 <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    1552:	84 32       	cpi	r24, 0x24	; 36
    1554:	11 f0       	breq	.+4      	; 0x155a <_Z10linkbus_Rxh+0x40>
    1556:	81 32       	cpi	r24, 0x21	; 33
    1558:	49 f5       	brne	.+82     	; 0x15ac <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
    155a:	10 92 bd 46 	sts	0x46BD, r1	; 0x8046bd <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    155e:	81 32       	cpi	r24, 0x21	; 33
    1560:	11 f4       	brne	.+4      	; 0x1566 <_Z10linkbus_Rxh+0x4c>
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <_Z10linkbus_Rxh+0x4e>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	88 83       	st	Y, r24
			field_len = 0;
    156a:	10 92 bc 46 	sts	0x46BC, r1	; 0x8046bc <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    156e:	10 92 b8 46 	sts	0x46B8, r1	; 0x8046b8 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1572:	10 92 b9 46 	sts	0x46B9, r1	; 0x8046b9 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1576:	10 92 ba 46 	sts	0x46BA, r1	; 0x8046ba <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    157a:	10 92 bb 46 	sts	0x46BB, r1	; 0x8046bb <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = true;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 b7 46 	sts	0x46B7, r24	; 0x8046b7 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1584:	10 92 b6 46 	sts	0x46B6, r1	; 0x8046b6 <_ZZ10linkbus_RxhE11field_index>
    1588:	80 91 b6 46 	lds	r24, 0x46B6	; 0x8046b6 <_ZZ10linkbus_RxhE11field_index>
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	58 f4       	brcc	.+22     	; 0x15a6 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
    1590:	fe 01       	movw	r30, r28
    1592:	05 e1       	ldi	r16, 0x15	; 21
    1594:	80 9f       	mul	r24, r16
    1596:	e0 0d       	add	r30, r0
    1598:	f1 1d       	adc	r31, r1
    159a:	11 24       	eor	r1, r1
    159c:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = true;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	80 93 b6 46 	sts	0x46B6, r24	; 0x8046b6 <_ZZ10linkbus_RxhE11field_index>
    15a4:	f1 cf       	rjmp	.-30     	; 0x1588 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
    15a6:	10 92 b6 46 	sts	0x46B6, r1	; 0x8046b6 <_ZZ10linkbus_RxhE11field_index>
    15aa:	a7 c0       	rjmp	.+334    	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
    15ac:	90 91 b7 46 	lds	r25, 0x46B7	; 0x8046b7 <_ZZ10linkbus_RxhE13receiving_msg>
    15b0:	99 23       	and	r25, r25
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <_Z10linkbus_Rxh+0x9c>
    15b4:	8b c0       	rjmp	.+278    	; 0x16cc <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    15b6:	8c 32       	cpi	r24, 0x2C	; 44
    15b8:	29 f0       	breq	.+10     	; 0x15c4 <_Z10linkbus_Rxh+0xaa>
    15ba:	8b 33       	cpi	r24, 0x3B	; 59
    15bc:	19 f0       	breq	.+6      	; 0x15c4 <_Z10linkbus_Rxh+0xaa>
    15be:	8f 33       	cpi	r24, 0x3F	; 63
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <_Z10linkbus_Rxh+0xaa>
    15c2:	42 c0       	rjmp	.+132    	; 0x1648 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    15c4:	90 91 b6 46 	lds	r25, 0x46B6	; 0x8046b6 <_ZZ10linkbus_RxhE11field_index>
    15c8:	99 23       	and	r25, r25
    15ca:	89 f0       	breq	.+34     	; 0x15ee <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
    15cc:	29 2f       	mov	r18, r25
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	21 50       	subi	r18, 0x01	; 1
    15d2:	31 09       	sbc	r19, r1
    15d4:	40 91 bc 46 	lds	r20, 0x46BC	; 0x8046bc <_ZZ10linkbus_RxhE9field_len>
    15d8:	55 e1       	ldi	r21, 0x15	; 21
    15da:	52 9f       	mul	r21, r18
    15dc:	f0 01       	movw	r30, r0
    15de:	53 9f       	mul	r21, r19
    15e0:	f0 0d       	add	r31, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	ec 0f       	add	r30, r28
    15e6:	fd 1f       	adc	r31, r29
    15e8:	e4 0f       	add	r30, r20
    15ea:	f1 1d       	adc	r31, r1
    15ec:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
    15ee:	9f 5f       	subi	r25, 0xFF	; 255
    15f0:	90 93 b6 46 	sts	0x46B6, r25	; 0x8046b6 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
    15f4:	10 92 bc 46 	sts	0x46BC, r1	; 0x8046bc <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
    15f8:	8b 33       	cpi	r24, 0x3B	; 59
    15fa:	69 f4       	brne	.+26     	; 0x1616 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    15fc:	80 91 bd 46 	lds	r24, 0x46BD	; 0x8046bd <_ZZ10linkbus_RxhE9charIndex>
    1600:	84 30       	cpi	r24, 0x04	; 4
    1602:	30 f0       	brcs	.+12     	; 0x1610 <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    1604:	80 91 b8 46 	lds	r24, 0x46B8	; 0x8046b8 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1608:	90 91 b9 46 	lds	r25, 0x46B9	; 0x8046b9 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    1610:	10 92 b7 46 	sts	0x46B7, r1	; 0x8046b7 <_ZZ10linkbus_RxhE13receiving_msg>
    1614:	10 c0       	rjmp	.+32     	; 0x1636 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
    1616:	8f 33       	cpi	r24, 0x3F	; 63
    1618:	71 f4       	brne	.+28     	; 0x1636 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
    161e:	80 91 bd 46 	lds	r24, 0x46BD	; 0x8046bd <_ZZ10linkbus_RxhE9charIndex>
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	30 f0       	brcs	.+12     	; 0x1632 <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    1626:	80 91 b8 46 	lds	r24, 0x46B8	; 0x8046b8 <_ZZ10linkbus_RxhE10tempMsg_ID>
    162a:	90 91 b9 46 	lds	r25, 0x46B9	; 0x8046b9 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    1632:	10 92 b7 46 	sts	0x46B7, r1	; 0x8046b7 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
    1636:	80 91 b7 46 	lds	r24, 0x46B7	; 0x8046b7 <_ZZ10linkbus_RxhE13receiving_msg>
    163a:	81 11       	cpse	r24, r1
    163c:	5e c0       	rjmp	.+188    	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
    163e:	10 92 be 46 	sts	0x46BE, r1	; 0x8046be <_ZZ10linkbus_RxhE4buff>
    1642:	10 92 bf 46 	sts	0x46BF, r1	; 0x8046bf <_ZZ10linkbus_RxhE4buff+0x1>
    1646:	59 c0       	rjmp	.+178    	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
    1648:	20 91 b6 46 	lds	r18, 0x46B6	; 0x8046b6 <_ZZ10linkbus_RxhE11field_index>
    164c:	21 11       	cpse	r18, r1
    164e:	29 c0       	rjmp	.+82     	; 0x16a2 <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
    1650:	40 91 b8 46 	lds	r20, 0x46B8	; 0x8046b8 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1654:	50 91 b9 46 	lds	r21, 0x46B9	; 0x8046b9 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1658:	60 91 ba 46 	lds	r22, 0x46BA	; 0x8046ba <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    165c:	70 91 bb 46 	lds	r23, 0x46BB	; 0x8046bb <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    1660:	44 0f       	add	r20, r20
    1662:	55 1f       	adc	r21, r21
    1664:	66 1f       	adc	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	8a 01       	movw	r16, r20
    166a:	9b 01       	movw	r18, r22
    166c:	00 0f       	add	r16, r16
    166e:	11 1f       	adc	r17, r17
    1670:	22 1f       	adc	r18, r18
    1672:	33 1f       	adc	r19, r19
    1674:	00 0f       	add	r16, r16
    1676:	11 1f       	adc	r17, r17
    1678:	22 1f       	adc	r18, r18
    167a:	33 1f       	adc	r19, r19
    167c:	40 0f       	add	r20, r16
    167e:	51 1f       	adc	r21, r17
    1680:	62 1f       	adc	r22, r18
    1682:	73 1f       	adc	r23, r19
    1684:	8a 01       	movw	r16, r20
    1686:	9b 01       	movw	r18, r22
    1688:	08 0f       	add	r16, r24
    168a:	11 1d       	adc	r17, r1
    168c:	21 1d       	adc	r18, r1
    168e:	31 1d       	adc	r19, r1
    1690:	00 93 b8 46 	sts	0x46B8, r16	; 0x8046b8 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1694:	10 93 b9 46 	sts	0x46B9, r17	; 0x8046b9 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1698:	20 93 ba 46 	sts	0x46BA, r18	; 0x8046ba <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    169c:	30 93 bb 46 	sts	0x46BB, r19	; 0x8046bb <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    16a0:	2c c0       	rjmp	.+88     	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	21 50       	subi	r18, 0x01	; 1
    16a6:	31 09       	sbc	r19, r1
    16a8:	90 91 bc 46 	lds	r25, 0x46BC	; 0x8046bc <_ZZ10linkbus_RxhE9field_len>
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	49 0f       	add	r20, r25
    16b0:	40 93 bc 46 	sts	0x46BC, r20	; 0x8046bc <_ZZ10linkbus_RxhE9field_len>
    16b4:	65 e1       	ldi	r22, 0x15	; 21
    16b6:	62 9f       	mul	r22, r18
    16b8:	a0 01       	movw	r20, r0
    16ba:	63 9f       	mul	r22, r19
    16bc:	50 0d       	add	r21, r0
    16be:	11 24       	eor	r1, r1
    16c0:	c4 0f       	add	r28, r20
    16c2:	d5 1f       	adc	r29, r21
    16c4:	c9 0f       	add	r28, r25
    16c6:	d1 1d       	adc	r29, r1
    16c8:	8b 83       	std	Y+3, r24	; 0x03
    16ca:	17 c0       	rjmp	.+46     	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
    16cc:	8d 30       	cpi	r24, 0x0D	; 13
    16ce:	a9 f4       	brne	.+42     	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
    16d0:	19 82       	std	Y+1, r1	; 0x01
    16d2:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
    16d4:	82 e3       	ldi	r24, 0x32	; 50
    16d6:	80 93 bd 46 	sts	0x46BD, r24	; 0x8046bd <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
    16da:	10 92 bc 46 	sts	0x46BC, r1	; 0x8046bc <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    16de:	10 92 b8 46 	sts	0x46B8, r1	; 0x8046b8 <_ZZ10linkbus_RxhE10tempMsg_ID>
    16e2:	10 92 b9 46 	sts	0x46B9, r1	; 0x8046b9 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    16e6:	10 92 ba 46 	sts	0x46BA, r1	; 0x8046ba <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    16ea:	10 92 bb 46 	sts	0x46BB, r1	; 0x8046bb <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
    16ee:	10 92 b6 46 	sts	0x46B6, r1	; 0x8046b6 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
    16f2:	10 92 be 46 	sts	0x46BE, r1	; 0x8046be <_ZZ10linkbus_RxhE4buff>
    16f6:	10 92 bf 46 	sts	0x46BF, r1	; 0x8046bf <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    16fa:	80 91 bd 46 	lds	r24, 0x46BD	; 0x8046bd <_ZZ10linkbus_RxhE9charIndex>
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	80 93 bd 46 	sts	0x46BD, r24	; 0x8046bd <_ZZ10linkbus_RxhE9charIndex>
    1704:	82 33       	cpi	r24, 0x32	; 50
    1706:	20 f0       	brcs	.+8      	; 0x1710 <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = false;
    1708:	10 92 b7 46 	sts	0x46B7, r1	; 0x8046b7 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
    170c:	10 92 bd 46 	sts	0x46BD, r1	; 0x8046bd <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	08 95       	ret

0000171a <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	0b b6       	in	r0, 0x3b	; 59
    1726:	0f 92       	push	r0
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	cf 93       	push	r28
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
    1742:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <USART0_get_data>
    1746:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
    1748:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    174c:	81 11       	cpse	r24, r1
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
    1750:	8c 2f       	mov	r24, r28
    1752:	0e 94 8d 0a 	call	0x151a	; 0x151a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
    1756:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    175a:	81 11       	cpse	r24, r1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
    175e:	8c 2f       	mov	r24, r28
    1760:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z9serial_Rxh>
	}
}
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	cf 91       	pop	r28
    176a:	bf 91       	pop	r27
    176c:	af 91       	pop	r26
    176e:	9f 91       	pop	r25
    1770:	8f 91       	pop	r24
    1772:	7f 91       	pop	r23
    1774:	6f 91       	pop	r22
    1776:	5f 91       	pop	r21
    1778:	4f 91       	pop	r20
    177a:	3f 91       	pop	r19
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0b be       	out	0x3b, r0	; 59
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	18 95       	reti

0000178c <__vector_55>:

ISR(USART4_RXC_vect)
{
    178c:	1f 92       	push	r1
    178e:	0f 92       	push	r0
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	0f 92       	push	r0
    1794:	11 24       	eor	r1, r1
    1796:	0b b6       	in	r0, 0x3b	; 59
    1798:	0f 92       	push	r0
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	cf 93       	push	r28
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
    17b4:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <USART4_get_data>
    17b8:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
    17ba:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	19 f4       	brne	.+6      	; 0x17c8 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
    17c2:	8c 2f       	mov	r24, r28
    17c4:	0e 94 8d 0a 	call	0x151a	; 0x151a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
    17c8:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	19 f4       	brne	.+6      	; 0x17d6 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
    17d0:	8c 2f       	mov	r24, r28
    17d2:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z9serial_Rxh>
	}
}
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	cf 91       	pop	r28
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	7f 91       	pop	r23
    17e6:	6f 91       	pop	r22
    17e8:	5f 91       	pop	r21
    17ea:	4f 91       	pop	r20
    17ec:	3f 91       	pop	r19
    17ee:	2f 91       	pop	r18
    17f0:	0f 90       	pop	r0
    17f2:	0b be       	out	0x3b, r0	; 59
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	0b b6       	in	r0, 0x3b	; 59
    180a:	0f 92       	push	r0
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	cf 93       	push	r28
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
    1826:	0e 94 9e 48 	call	0x913c	; 0x913c <USART1_get_data>
    182a:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
    182c:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	19 f4       	brne	.+6      	; 0x183a <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
    1834:	8c 2f       	mov	r24, r28
    1836:	0e 94 8d 0a 	call	0x151a	; 0x151a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
    183a:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	19 f4       	brne	.+6      	; 0x1848 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
    1842:	8c 2f       	mov	r24, r28
    1844:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z9serial_Rxh>
	}
}
    1848:	ff 91       	pop	r31
    184a:	ef 91       	pop	r30
    184c:	cf 91       	pop	r28
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0b be       	out	0x3b, r0	; 59
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	0b b6       	in	r0, 0x3b	; 59
    187c:	0f 92       	push	r0
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
    1896:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	59 f5       	brne	.+86     	; 0x18f4 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    189e:	80 91 b4 46 	lds	r24, 0x46B4	; 0x8046b4 <_ZZ11__vector_32E4buff>
    18a2:	90 91 b5 46 	lds	r25, 0x46B5	; 0x8046b5 <_ZZ11__vector_32E4buff+0x1>
    18a6:	89 2b       	or	r24, r25
    18a8:	31 f4       	brne	.+12     	; 0x18b6 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
    18aa:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <nextFullSBTxBuffer>
    18ae:	80 93 b4 46 	sts	0x46B4, r24	; 0x8046b4 <_ZZ11__vector_32E4buff>
    18b2:	90 93 b5 46 	sts	0x46B5, r25	; 0x8046b5 <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
    18b6:	e0 91 b4 46 	lds	r30, 0x46B4	; 0x8046b4 <_ZZ11__vector_32E4buff>
    18ba:	f0 91 b5 46 	lds	r31, 0x46B5	; 0x8046b5 <_ZZ11__vector_32E4buff+0x1>
    18be:	80 91 b3 46 	lds	r24, 0x46B3	; 0x8046b3 <_ZZ11__vector_32E9charIndex>
    18c2:	df 01       	movw	r26, r30
    18c4:	a8 0f       	add	r26, r24
    18c6:	b1 1d       	adc	r27, r1
    18c8:	9c 91       	ld	r25, X
    18ca:	99 23       	and	r25, r25
    18cc:	31 f0       	breq	.+12     	; 0x18da <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	80 93 b3 46 	sts	0x46B3, r24	; 0x8046b3 <_ZZ11__vector_32E9charIndex>
    18d4:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    18d8:	0d c0       	rjmp	.+26     	; 0x18f4 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
    18da:	10 92 b3 46 	sts	0x46B3, r1	; 0x8046b3 <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
    18de:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    18e0:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <nextFullSBTxBuffer>
    18e4:	80 93 b4 46 	sts	0x46B4, r24	; 0x8046b4 <_ZZ11__vector_32E4buff>
    18e8:	90 93 b5 46 	sts	0x46B5, r25	; 0x8046b5 <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
    18ec:	89 2b       	or	r24, r25
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <__vector_32+0x84>
			{
				serialbus_end_tx();
    18f0:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
    18f4:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	59 f5       	brne	.+86     	; 0x1952 <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    18fc:	80 91 b1 46 	lds	r24, 0x46B1	; 0x8046b1 <_ZZ11__vector_32E4buff_0>
    1900:	90 91 b2 46 	lds	r25, 0x46B2	; 0x8046b2 <_ZZ11__vector_32E4buff_0+0x1>
    1904:	89 2b       	or	r24, r25
    1906:	31 f4       	brne	.+12     	; 0x1914 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
    1908:	0e 94 26 38 	call	0x704c	; 0x704c <_Z18nextFullLBTxBufferv>
    190c:	80 93 b1 46 	sts	0x46B1, r24	; 0x8046b1 <_ZZ11__vector_32E4buff_0>
    1910:	90 93 b2 46 	sts	0x46B2, r25	; 0x8046b2 <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    1914:	e0 91 b1 46 	lds	r30, 0x46B1	; 0x8046b1 <_ZZ11__vector_32E4buff_0>
    1918:	f0 91 b2 46 	lds	r31, 0x46B2	; 0x8046b2 <_ZZ11__vector_32E4buff_0+0x1>
    191c:	80 91 b0 46 	lds	r24, 0x46B0	; 0x8046b0 <__data_end>
    1920:	df 01       	movw	r26, r30
    1922:	a8 0f       	add	r26, r24
    1924:	b1 1d       	adc	r27, r1
    1926:	9c 91       	ld	r25, X
    1928:	99 23       	and	r25, r25
    192a:	31 f0       	breq	.+12     	; 0x1938 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	80 93 b0 46 	sts	0x46B0, r24	; 0x8046b0 <__data_end>
    1932:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    1936:	0d c0       	rjmp	.+26     	; 0x1952 <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
    1938:	10 92 b0 46 	sts	0x46B0, r1	; 0x8046b0 <__data_end>
			(*buff)[0] = '\0';
    193c:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    193e:	0e 94 26 38 	call	0x704c	; 0x704c <_Z18nextFullLBTxBufferv>
    1942:	80 93 b1 46 	sts	0x46B1, r24	; 0x8046b1 <_ZZ11__vector_32E4buff_0>
    1946:	90 93 b2 46 	sts	0x46B2, r25	; 0x8046b2 <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
    194a:	89 2b       	or	r24, r25
    194c:	11 f4       	brne	.+4      	; 0x1952 <__vector_32+0xe2>
			{
				linkbus_end_tx();
    194e:	0e 94 db 38 	call	0x71b6	; 0x71b6 <_Z14linkbus_end_txv>
			}
		}
	}
}
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	7f 91       	pop	r23
    1960:	6f 91       	pop	r22
    1962:	5f 91       	pop	r21
    1964:	4f 91       	pop	r20
    1966:	3f 91       	pop	r19
    1968:	2f 91       	pop	r18
    196a:	0f 90       	pop	r0
    196c:	0b be       	out	0x3b, r0	; 59
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <__vector_41>:
{
	
}

void suspendEvent()
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	0b b6       	in	r0, 0x3b	; 59
    1984:	0f 92       	push	r0
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	6f 93       	push	r22
    1994:	7f 93       	push	r23
    1996:	8f 93       	push	r24
    1998:	9f 93       	push	r25
    199a:	af 93       	push	r26
    199c:	bf 93       	push	r27
    199e:	ef 93       	push	r30
    19a0:	ff 93       	push	r31
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	25 97       	sbiw	r28, 0x05	; 5
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    19b4:	80 ff       	sbrs	r24, 0
    19b6:	9e c3       	rjmp	.+1852   	; 0x20f4 <__vector_41+0x77c>
    19b8:	80 91 a1 47 	lds	r24, 0x47A1	; 0x8047a1 <_ZZ11__vector_41E3cnt>
    19bc:	90 91 a2 47 	lds	r25, 0x47A2	; 0x8047a2 <_ZZ11__vector_41E3cnt+0x1>
    19c0:	9c 01       	movw	r18, r24
    19c2:	2f 5f       	subi	r18, 0xFF	; 255
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	20 93 a1 47 	sts	0x47A1, r18	; 0x8047a1 <_ZZ11__vector_41E3cnt>
    19ca:	30 93 a2 47 	sts	0x47A2, r19	; 0x8047a2 <_ZZ11__vector_41E3cnt+0x1>
    19ce:	8b 32       	cpi	r24, 0x2B	; 43
    19d0:	91 40       	sbci	r25, 0x01	; 1
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <__vector_41+0x5e>
    19d4:	8c c3       	rjmp	.+1816   	; 0x20ee <__vector_41+0x776>
    19d6:	10 92 a1 47 	sts	0x47A1, r1	; 0x8047a1 <_ZZ11__vector_41E3cnt>
    19da:	10 92 a2 47 	sts	0x47A2, r1	; 0x8047a2 <_ZZ11__vector_41E3cnt+0x1>
    19de:	80 91 7e 47 	lds	r24, 0x477E	; 0x80477e <g_event_enabled>
    19e2:	81 11       	cpse	r24, r1
    19e4:	03 c0       	rjmp	.+6      	; 0x19ec <__vector_41+0x74>
    19e6:	8a b1       	in	r24, 0x0a	; 10
    19e8:	80 64       	ori	r24, 0x40	; 64
    19ea:	8a b9       	out	0x0a, r24	; 10
    19ec:	0e 94 21 23 	call	0x4642	; 0x4642 <_Z18antennaIsConnectedv>
    19f0:	81 11       	cpse	r24, r1
    19f2:	0a c0       	rjmp	.+20     	; 0x1a08 <__vector_41+0x90>
    19f4:	90 91 3d 47 	lds	r25, 0x473D	; 0x80473d <g_antenna_connect_state>
    19f8:	91 30       	cpi	r25, 0x01	; 1
    19fa:	19 f1       	breq	.+70     	; 0x1a42 <__vector_41+0xca>
    19fc:	91 e0       	ldi	r25, 0x01	; 1
    19fe:	90 93 3d 47 	sts	0x473D, r25	; 0x80473d <g_antenna_connect_state>
    1a02:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a06:	1d c0       	rjmp	.+58     	; 0x1a42 <__vector_41+0xca>
    1a08:	90 91 3d 47 	lds	r25, 0x473D	; 0x80473d <g_antenna_connect_state>
    1a0c:	91 30       	cpi	r25, 0x01	; 1
    1a0e:	c9 f4       	brne	.+50     	; 0x1a42 <__vector_41+0xca>
    1a10:	90 91 a3 47 	lds	r25, 0x47A3	; 0x8047a3 <_ZZ11__vector_41E26lastAntennaConnectionState>
    1a14:	89 13       	cpse	r24, r25
    1a16:	12 c0       	rjmp	.+36     	; 0x1a3c <__vector_41+0xc4>
    1a18:	90 91 1c 40 	lds	r25, 0x401C	; 0x80401c <_ZZ11__vector_41E16antennaReadCount>
    1a1c:	99 23       	and	r25, r25
    1a1e:	89 f0       	breq	.+34     	; 0x1a42 <__vector_41+0xca>
    1a20:	91 50       	subi	r25, 0x01	; 1
    1a22:	90 93 1c 40 	sts	0x401C, r25	; 0x80401c <_ZZ11__vector_41E16antennaReadCount>
    1a26:	91 11       	cpse	r25, r1
    1a28:	0c c0       	rjmp	.+24     	; 0x1a42 <__vector_41+0xca>
    1a2a:	10 92 3d 47 	sts	0x473D, r1	; 0x80473d <g_antenna_connect_state>
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a34:	93 e0       	ldi	r25, 0x03	; 3
    1a36:	90 93 1c 40 	sts	0x401C, r25	; 0x80401c <_ZZ11__vector_41E16antennaReadCount>
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <__vector_41+0xca>
    1a3c:	93 e0       	ldi	r25, 0x03	; 3
    1a3e:	90 93 1c 40 	sts	0x401C, r25	; 0x80401c <_ZZ11__vector_41E16antennaReadCount>
    1a42:	80 93 a3 47 	sts	0x47A3, r24	; 0x8047a3 <_ZZ11__vector_41E26lastAntennaConnectionState>
    1a46:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <system_tick>
    1a4a:	10 91 83 47 	lds	r17, 0x4783	; 0x804783 <_ZL10g_sleeping>
    1a4e:	11 23       	and	r17, r17
    1a50:	a9 f1       	breq	.+106    	; 0x1abc <__vector_41+0x144>
    1a52:	80 91 84 47 	lds	r24, 0x4784	; 0x804784 <_ZL23g_seconds_left_to_sleep>
    1a56:	90 91 85 47 	lds	r25, 0x4785	; 0x804785 <_ZL23g_seconds_left_to_sleep+0x1>
    1a5a:	a0 91 86 47 	lds	r26, 0x4786	; 0x804786 <_ZL23g_seconds_left_to_sleep+0x2>
    1a5e:	b0 91 87 47 	lds	r27, 0x4787	; 0x804787 <_ZL23g_seconds_left_to_sleep+0x3>
    1a62:	89 2b       	or	r24, r25
    1a64:	8a 2b       	or	r24, r26
    1a66:	8b 2b       	or	r24, r27
    1a68:	99 f0       	breq	.+38     	; 0x1a90 <__vector_41+0x118>
    1a6a:	80 91 84 47 	lds	r24, 0x4784	; 0x804784 <_ZL23g_seconds_left_to_sleep>
    1a6e:	90 91 85 47 	lds	r25, 0x4785	; 0x804785 <_ZL23g_seconds_left_to_sleep+0x1>
    1a72:	a0 91 86 47 	lds	r26, 0x4786	; 0x804786 <_ZL23g_seconds_left_to_sleep+0x2>
    1a76:	b0 91 87 47 	lds	r27, 0x4787	; 0x804787 <_ZL23g_seconds_left_to_sleep+0x3>
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	a1 09       	sbc	r26, r1
    1a7e:	b1 09       	sbc	r27, r1
    1a80:	80 93 84 47 	sts	0x4784, r24	; 0x804784 <_ZL23g_seconds_left_to_sleep>
    1a84:	90 93 85 47 	sts	0x4785, r25	; 0x804785 <_ZL23g_seconds_left_to_sleep+0x1>
    1a88:	a0 93 86 47 	sts	0x4786, r26	; 0x804786 <_ZL23g_seconds_left_to_sleep+0x2>
    1a8c:	b0 93 87 47 	sts	0x4787, r27	; 0x804787 <_ZL23g_seconds_left_to_sleep+0x3>
    1a90:	80 91 84 47 	lds	r24, 0x4784	; 0x804784 <_ZL23g_seconds_left_to_sleep>
    1a94:	90 91 85 47 	lds	r25, 0x4785	; 0x804785 <_ZL23g_seconds_left_to_sleep+0x1>
    1a98:	a0 91 86 47 	lds	r26, 0x4786	; 0x804786 <_ZL23g_seconds_left_to_sleep+0x2>
    1a9c:	b0 91 87 47 	lds	r27, 0x4787	; 0x804787 <_ZL23g_seconds_left_to_sleep+0x3>
    1aa0:	89 2b       	or	r24, r25
    1aa2:	8a 2b       	or	r24, r26
    1aa4:	8b 2b       	or	r24, r27
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <__vector_41+0x134>
    1aa8:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
    1aac:	11 23       	and	r17, r17
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <__vector_41+0x13a>
    1ab0:	1e c3       	rjmp	.+1596   	; 0x20ee <__vector_41+0x776>
    1ab2:	10 92 82 47 	sts	0x4782, r1	; 0x804782 <_ZL13g_go_to_sleep>
    1ab6:	10 92 83 47 	sts	0x4783, r1	; 0x804783 <_ZL10g_sleeping>
    1aba:	19 c3       	rjmp	.+1586   	; 0x20ee <__vector_41+0x776>
    1abc:	19 82       	std	Y+1, r1	; 0x01
    1abe:	1a 82       	std	Y+2, r1	; 0x02
    1ac0:	1b 82       	std	Y+3, r1	; 0x03
    1ac2:	1c 82       	std	Y+4, r1	; 0x04
    1ac4:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1ac8:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1acc:	89 2b       	or	r24, r25
    1ace:	49 f0       	breq	.+18     	; 0x1ae2 <__vector_41+0x16a>
    1ad0:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1ad4:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1ade:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1ae2:	80 91 7f 47 	lds	r24, 0x477F	; 0x80477f <g_event_commenced>
    1ae6:	88 23       	and	r24, r24
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <__vector_41+0x174>
    1aea:	55 c0       	rjmp	.+170    	; 0x1b96 <__vector_41+0x21e>
    1aec:	40 91 7a 47 	lds	r20, 0x477A	; 0x80477a <g_event_finish_epoch>
    1af0:	50 91 7b 47 	lds	r21, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    1af4:	60 91 7c 47 	lds	r22, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    1af8:	70 91 7d 47 	lds	r23, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    1afc:	45 2b       	or	r20, r21
    1afe:	46 2b       	or	r20, r22
    1b00:	47 2b       	or	r20, r23
    1b02:	51 f0       	breq	.+20     	; 0x1b18 <__vector_41+0x1a0>
    1b04:	90 91 80 47 	lds	r25, 0x4780	; 0x804780 <g_check_for_next_event>
    1b08:	91 11       	cpse	r25, r1
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <__vector_41+0x1a4>
    1b0c:	90 91 46 47 	lds	r25, 0x4746	; 0x804746 <_ZL20g_shutting_down_wifi>
    1b10:	99 23       	and	r25, r25
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <__vector_41+0x1a6>
    1b14:	81 2f       	mov	r24, r17
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <__vector_41+0x1a6>
    1b18:	81 2f       	mov	r24, r17
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <__vector_41+0x1a6>
    1b1c:	81 2f       	mov	r24, r17
    1b1e:	88 23       	and	r24, r24
    1b20:	d1 f1       	breq	.+116    	; 0x1b96 <__vector_41+0x21e>
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    1b2a:	49 81       	ldd	r20, Y+1	; 0x01
    1b2c:	5a 81       	ldd	r21, Y+2	; 0x02
    1b2e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b30:	7c 81       	ldd	r23, Y+4	; 0x04
    1b32:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <g_event_finish_epoch>
    1b36:	90 91 7b 47 	lds	r25, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    1b3a:	a0 91 7c 47 	lds	r26, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    1b3e:	b0 91 7d 47 	lds	r27, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    1b42:	48 17       	cp	r20, r24
    1b44:	59 07       	cpc	r21, r25
    1b46:	6a 07       	cpc	r22, r26
    1b48:	7b 07       	cpc	r23, r27
    1b4a:	28 f1       	brcs	.+74     	; 0x1b96 <__vector_41+0x21e>
    1b4c:	8c ef       	ldi	r24, 0xFC	; 252
    1b4e:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    1b52:	10 92 3e 47 	sts	0x473E, r1	; 0x80473e <_ZL12g_on_the_air>
    1b56:	10 92 3f 47 	sts	0x473F, r1	; 0x80473f <_ZL12g_on_the_air+0x1>
    1b5a:	10 92 40 47 	sts	0x4740, r1	; 0x804740 <_ZL12g_on_the_air+0x2>
    1b5e:	10 92 41 47 	sts	0x4741, r1	; 0x804741 <_ZL12g_on_the_air+0x3>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	0e 94 99 46 	call	0x8d32	; 0x8d32 <_Z14keyTransmitterb>
    1b68:	10 92 7e 47 	sts	0x477E, r1	; 0x80477e <g_event_enabled>
    1b6c:	10 92 7f 47 	sts	0x477F, r1	; 0x80477f <g_event_commenced>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	80 93 80 47 	sts	0x4780, r24	; 0x804780 <g_check_for_next_event>
    1b76:	8a e5       	ldi	r24, 0x5A	; 90
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1b7e:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1b82:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1b86:	88 23       	and	r24, r24
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <__vector_41+0x218>
    1b8a:	8c e3       	ldi	r24, 0x3C	; 60
    1b8c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b90:	89 b1       	in	r24, 0x09	; 9
    1b92:	80 64       	ori	r24, 0x40	; 64
    1b94:	89 b9       	out	0x09, r24	; 9
    1b96:	80 91 7e 47 	lds	r24, 0x477E	; 0x80477e <g_event_enabled>
    1b9a:	88 23       	and	r24, r24
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <__vector_41+0x228>
    1b9e:	35 c2       	rjmp	.+1130   	; 0x200a <__vector_41+0x692>
    1ba0:	00 91 7f 47 	lds	r16, 0x477F	; 0x80477f <g_event_commenced>
    1ba4:	00 23       	and	r16, r16
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <__vector_41+0x232>
    1ba8:	a5 c1       	rjmp	.+842    	; 0x1ef4 <__vector_41+0x57c>
    1baa:	80 91 42 47 	lds	r24, 0x4742	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    1bae:	90 91 43 47 	lds	r25, 0x4743	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    1bb2:	89 2b       	or	r24, r25
    1bb4:	49 f0       	breq	.+18     	; 0x1bc8 <__vector_41+0x250>
    1bb6:	80 91 42 47 	lds	r24, 0x4742	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    1bba:	90 91 43 47 	lds	r25, 0x4743	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    1bc4:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    1bc8:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    1bcc:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    1bd0:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    1bd4:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    1bd8:	89 2b       	or	r24, r25
    1bda:	8a 2b       	or	r24, r26
    1bdc:	8b 2b       	or	r24, r27
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <__vector_41+0x26a>
    1be0:	14 c2       	rjmp	.+1064   	; 0x200a <__vector_41+0x692>
    1be2:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    1be6:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    1bea:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    1bee:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	19 06       	cpc	r1, r25
    1bf6:	1a 06       	cpc	r1, r26
    1bf8:	1b 06       	cpc	r1, r27
    1bfa:	0c f0       	brlt	.+2      	; 0x1bfe <__vector_41+0x286>
    1bfc:	29 c1       	rjmp	.+594    	; 0x1e50 <__vector_41+0x4d8>
    1bfe:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    1c02:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    1c06:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    1c0a:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	a1 09       	sbc	r26, r1
    1c12:	b1 09       	sbc	r27, r1
    1c14:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    1c18:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    1c1c:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    1c20:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    1c24:	80 91 42 47 	lds	r24, 0x4742	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    1c28:	90 91 43 47 	lds	r25, 0x4743	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    1c2c:	89 2b       	or	r24, r25
    1c2e:	41 f4       	brne	.+16     	; 0x1c40 <__vector_41+0x2c8>
    1c30:	80 91 72 47 	lds	r24, 0x4772	; 0x804772 <g_time_needed_for_ID>
    1c34:	90 91 73 47 	lds	r25, 0x4773	; 0x804773 <g_time_needed_for_ID+0x1>
    1c38:	89 2b       	or	r24, r25
    1c3a:	21 f4       	brne	.+8      	; 0x1c44 <__vector_41+0x2cc>
    1c3c:	81 2f       	mov	r24, r17
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <__vector_41+0x2ce>
    1c40:	81 2f       	mov	r24, r17
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <__vector_41+0x2ce>
    1c44:	80 2f       	mov	r24, r16
    1c46:	88 23       	and	r24, r24
    1c48:	81 f1       	breq	.+96     	; 0x1caa <__vector_41+0x332>
    1c4a:	80 91 72 47 	lds	r24, 0x4772	; 0x804772 <g_time_needed_for_ID>
    1c4e:	90 91 73 47 	lds	r25, 0x4773	; 0x804773 <g_time_needed_for_ID+0x1>
    1c52:	a0 e0       	ldi	r26, 0x00	; 0
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	40 91 3e 47 	lds	r20, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    1c5a:	50 91 3f 47 	lds	r21, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    1c5e:	60 91 40 47 	lds	r22, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    1c62:	70 91 41 47 	lds	r23, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    1c66:	84 17       	cp	r24, r20
    1c68:	95 07       	cpc	r25, r21
    1c6a:	a6 07       	cpc	r26, r22
    1c6c:	b7 07       	cpc	r27, r23
    1c6e:	e9 f4       	brne	.+58     	; 0x1caa <__vector_41+0x332>
    1c70:	8f ee       	ldi	r24, 0xEF	; 239
    1c72:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    1c76:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1c7a:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1c7e:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    1c82:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    1c86:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1c8a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    1c8e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1c92:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1c96:	1d 82       	std	Y+5, r1	; 0x05
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	be 01       	movw	r22, r28
    1c9e:	6b 5f       	subi	r22, 0xFB	; 251
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8d e5       	ldi	r24, 0x5D	; 93
    1ca4:	97 e4       	ldi	r25, 0x47	; 71
    1ca6:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
    1caa:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    1cae:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    1cb2:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    1cb6:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    1cba:	89 2b       	or	r24, r25
    1cbc:	8a 2b       	or	r24, r26
    1cbe:	8b 2b       	or	r24, r27
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <__vector_41+0x34c>
    1cc2:	a3 c1       	rjmp	.+838    	; 0x200a <__vector_41+0x692>
    1cc4:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1cc8:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1ccc:	89 2b       	or	r24, r25
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <__vector_41+0x35a>
    1cd0:	a6 c0       	rjmp	.+332    	; 0x1e1e <__vector_41+0x4a6>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	0e 94 99 46 	call	0x8d32	; 0x8d32 <_Z14keyTransmitterb>
    1cd8:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1cdc:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1ce0:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    1ce4:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    1ce8:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    1cec:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    1cf0:	05 2e       	mov	r0, r21
    1cf2:	00 0c       	add	r0, r0
    1cf4:	66 0b       	sbc	r22, r22
    1cf6:	77 0b       	sbc	r23, r23
    1cf8:	84 1b       	sub	r24, r20
    1cfa:	95 0b       	sbc	r25, r21
    1cfc:	a6 0b       	sbc	r26, r22
    1cfe:	b7 0b       	sbc	r27, r23
    1d00:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    1d04:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    1d08:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    1d0c:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	8d 83       	std	Y+5, r24	; 0x05
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	be 01       	movw	r22, r28
    1d1a:	6b 5f       	subi	r22, 0xFB	; 251
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	88 e4       	ldi	r24, 0x48	; 72
    1d20:	97 e4       	ldi	r25, 0x47	; 71
    1d22:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
    1d26:	8e ef       	ldi	r24, 0xFE	; 254
    1d28:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    1d2c:	89 b1       	in	r24, 0x09	; 9
    1d2e:	80 64       	ori	r24, 0x40	; 64
    1d30:	89 b9       	out	0x09, r24	; 9
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    1d3a:	29 81       	ldd	r18, Y+1	; 0x01
    1d3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d3e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d40:	5c 81       	ldd	r21, Y+4	; 0x04
    1d42:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <g_event_finish_epoch>
    1d46:	90 91 7b 47 	lds	r25, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    1d4a:	a0 91 7c 47 	lds	r26, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    1d4e:	b0 91 7d 47 	lds	r27, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    1d52:	28 17       	cp	r18, r24
    1d54:	39 07       	cpc	r19, r25
    1d56:	4a 07       	cpc	r20, r26
    1d58:	5b 07       	cpc	r21, r27
    1d5a:	58 f4       	brcc	.+22     	; 0x1d72 <__vector_41+0x3fa>
    1d5c:	60 91 7a 47 	lds	r22, 0x477A	; 0x80477a <g_event_finish_epoch>
    1d60:	70 91 7b 47 	lds	r23, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    1d64:	80 91 7c 47 	lds	r24, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    1d68:	90 91 7d 47 	lds	r25, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    1d6c:	0e 94 d5 48 	call	0x91aa	; 0x91aa <_Z7timeDifmm>
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <__vector_41+0x400>
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	cb 01       	movw	r24, r22
    1d78:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    1d7c:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d80:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    1d84:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1d88:	24 0f       	add	r18, r20
    1d8a:	35 1f       	adc	r19, r21
    1d8c:	21 5f       	subi	r18, 0xF1	; 241
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	03 2e       	mov	r0, r19
    1d92:	00 0c       	add	r0, r0
    1d94:	44 0b       	sbc	r20, r20
    1d96:	55 0b       	sbc	r21, r21
    1d98:	26 17       	cp	r18, r22
    1d9a:	37 07       	cpc	r19, r23
    1d9c:	48 07       	cpc	r20, r24
    1d9e:	59 07       	cpc	r21, r25
    1da0:	0c f0       	brlt	.+2      	; 0x1da4 <__vector_41+0x42c>
    1da2:	33 c1       	rjmp	.+614    	; 0x200a <__vector_41+0x692>
    1da4:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1da8:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1dac:	40 97       	sbiw	r24, 0x10	; 16
    1dae:	2c f0       	brlt	.+10     	; 0x1dba <__vector_41+0x442>
    1db0:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1db4:	81 11       	cpse	r24, r1
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <__vector_41+0x442>
    1db8:	10 2f       	mov	r17, r16
    1dba:	11 23       	and	r17, r17
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <__vector_41+0x448>
    1dbe:	25 c1       	rjmp	.+586    	; 0x200a <__vector_41+0x692>
    1dc0:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1dc4:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1dc8:	0a 97       	sbiw	r24, 0x0a	; 10
    1dca:	09 2e       	mov	r0, r25
    1dcc:	00 0c       	add	r0, r0
    1dce:	aa 0b       	sbc	r26, r26
    1dd0:	bb 0b       	sbc	r27, r27
    1dd2:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1dd6:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1dda:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1dde:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	80 93 47 47 	sts	0x4747, r24	; 0x804747 <_ZL11g_sleepType>
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	80 93 82 47 	sts	0x4782, r24	; 0x804782 <_ZL13g_go_to_sleep>
    1dee:	80 91 42 47 	lds	r24, 0x4742	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    1df2:	90 91 43 47 	lds	r25, 0x4743	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    1df6:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep>
    1dfa:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1dfe:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1e02:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1e06:	84 1b       	sub	r24, r20
    1e08:	95 0b       	sbc	r25, r21
    1e0a:	18 16       	cp	r1, r24
    1e0c:	19 06       	cpc	r1, r25
    1e0e:	14 f0       	brlt	.+4      	; 0x1e14 <__vector_41+0x49c>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    1e18:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    1e1c:	f6 c0       	rjmp	.+492    	; 0x200a <__vector_41+0x692>
    1e1e:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1e22:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1e26:	09 2e       	mov	r0, r25
    1e28:	00 0c       	add	r0, r0
    1e2a:	aa 0b       	sbc	r26, r26
    1e2c:	bb 0b       	sbc	r27, r27
    1e2e:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    1e32:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    1e36:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    1e3a:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    1e3e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1e42:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    1e46:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1e4a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1e4e:	dd c0       	rjmp	.+442    	; 0x200a <__vector_41+0x692>
    1e50:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    1e54:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    1e58:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    1e5c:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    1e60:	bb 23       	and	r27, r27
    1e62:	0c f0       	brlt	.+2      	; 0x1e66 <__vector_41+0x4ee>
    1e64:	d2 c0       	rjmp	.+420    	; 0x200a <__vector_41+0x692>
    1e66:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    1e6a:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    1e6e:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    1e72:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	a1 1d       	adc	r26, r1
    1e7a:	b1 1d       	adc	r27, r1
    1e7c:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    1e80:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    1e84:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    1e88:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    1e8c:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    1e90:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    1e94:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    1e98:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    1e9c:	89 2b       	or	r24, r25
    1e9e:	8a 2b       	or	r24, r26
    1ea0:	8b 2b       	or	r24, r27
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <__vector_41+0x52e>
    1ea4:	b2 c0       	rjmp	.+356    	; 0x200a <__vector_41+0x692>
    1ea6:	8d ef       	ldi	r24, 0xFD	; 253
    1ea8:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    1eac:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1eb0:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1eb4:	09 2e       	mov	r0, r25
    1eb6:	00 0c       	add	r0, r0
    1eb8:	aa 0b       	sbc	r26, r26
    1eba:	bb 0b       	sbc	r27, r27
    1ebc:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    1ec0:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    1ec4:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    1ec8:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    1ecc:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1ed0:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    1ed4:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1ed8:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	be 01       	movw	r22, r28
    1ee6:	6b 5f       	subi	r22, 0xFB	; 251
    1ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eea:	88 e4       	ldi	r24, 0x48	; 72
    1eec:	97 e4       	ldi	r25, 0x47	; 71
    1eee:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
    1ef2:	8b c0       	rjmp	.+278    	; 0x200a <__vector_41+0x692>
    1ef4:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    1ef8:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    1efc:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    1f00:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    1f04:	89 2b       	or	r24, r25
    1f06:	8a 2b       	or	r24, r26
    1f08:	8b 2b       	or	r24, r27
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <__vector_41+0x596>
    1f0c:	7e c0       	rjmp	.+252    	; 0x200a <__vector_41+0x692>
    1f0e:	ce 01       	movw	r24, r28
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    1f16:	49 81       	ldd	r20, Y+1	; 0x01
    1f18:	5a 81       	ldd	r21, Y+2	; 0x02
    1f1a:	6b 81       	ldd	r22, Y+3	; 0x03
    1f1c:	7c 81       	ldd	r23, Y+4	; 0x04
    1f1e:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    1f22:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    1f26:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    1f2a:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    1f2e:	48 17       	cp	r20, r24
    1f30:	59 07       	cpc	r21, r25
    1f32:	6a 07       	cpc	r22, r26
    1f34:	7b 07       	cpc	r23, r27
    1f36:	08 f4       	brcc	.+2      	; 0x1f3a <__vector_41+0x5c2>
    1f38:	68 c0       	rjmp	.+208    	; 0x200a <__vector_41+0x692>
    1f3a:	80 91 74 47 	lds	r24, 0x4774	; 0x804774 <g_intra_cycle_delay_time>
    1f3e:	90 91 75 47 	lds	r25, 0x4775	; 0x804775 <g_intra_cycle_delay_time+0x1>
    1f42:	89 2b       	or	r24, r25
    1f44:	59 f1       	breq	.+86     	; 0x1f9c <__vector_41+0x624>
    1f46:	8e ef       	ldi	r24, 0xFE	; 254
    1f48:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    1f4c:	80 91 74 47 	lds	r24, 0x4774	; 0x804774 <g_intra_cycle_delay_time>
    1f50:	90 91 75 47 	lds	r25, 0x4775	; 0x804775 <g_intra_cycle_delay_time+0x1>
    1f54:	91 95       	neg	r25
    1f56:	81 95       	neg	r24
    1f58:	91 09       	sbc	r25, r1
    1f5a:	09 2e       	mov	r0, r25
    1f5c:	00 0c       	add	r0, r0
    1f5e:	aa 0b       	sbc	r26, r26
    1f60:	bb 0b       	sbc	r27, r27
    1f62:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    1f66:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    1f6a:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    1f6e:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    1f72:	20 91 74 47 	lds	r18, 0x4774	; 0x804774 <g_intra_cycle_delay_time>
    1f76:	30 91 75 47 	lds	r19, 0x4775	; 0x804775 <g_intra_cycle_delay_time+0x1>
    1f7a:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f7e:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f82:	82 0f       	add	r24, r18
    1f84:	93 1f       	adc	r25, r19
    1f86:	20 91 72 47 	lds	r18, 0x4772	; 0x804772 <g_time_needed_for_ID>
    1f8a:	30 91 73 47 	lds	r19, 0x4773	; 0x804773 <g_time_needed_for_ID+0x1>
    1f8e:	82 1b       	sub	r24, r18
    1f90:	93 0b       	sbc	r25, r19
    1f92:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    1f96:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    1f9a:	34 c0       	rjmp	.+104    	; 0x2004 <__vector_41+0x68c>
    1f9c:	8d ef       	ldi	r24, 0xFD	; 253
    1f9e:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    1fa2:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1fa6:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1faa:	09 2e       	mov	r0, r25
    1fac:	00 0c       	add	r0, r0
    1fae:	aa 0b       	sbc	r26, r26
    1fb0:	bb 0b       	sbc	r27, r27
    1fb2:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    1fb6:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    1fba:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    1fbe:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    1fc2:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1fc6:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1fca:	20 91 72 47 	lds	r18, 0x4772	; 0x804772 <g_time_needed_for_ID>
    1fce:	30 91 73 47 	lds	r19, 0x4773	; 0x804773 <g_time_needed_for_ID+0x1>
    1fd2:	82 1b       	sub	r24, r18
    1fd4:	93 0b       	sbc	r25, r19
    1fd6:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    1fda:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    1fde:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1fe2:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    1fe6:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1fea:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	be 01       	movw	r22, r28
    1ff8:	6b 5f       	subi	r22, 0xFB	; 251
    1ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffc:	88 e4       	ldi	r24, 0x48	; 72
    1ffe:	97 e4       	ldi	r25, 0x47	; 71
    2000:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	80 93 7f 47 	sts	0x477F, r24	; 0x80477f <g_event_commenced>
    200a:	80 91 45 47 	lds	r24, 0x4745	; 0x804745 <_ZL19g_wifi_enable_delay>
    200e:	88 23       	and	r24, r24
    2010:	e1 f0       	breq	.+56     	; 0x204a <__vector_41+0x6d2>
    2012:	80 91 45 47 	lds	r24, 0x4745	; 0x804745 <_ZL19g_wifi_enable_delay>
    2016:	81 50       	subi	r24, 0x01	; 1
    2018:	80 93 45 47 	sts	0x4745, r24	; 0x804745 <_ZL19g_wifi_enable_delay>
    201c:	80 91 45 47 	lds	r24, 0x4745	; 0x804745 <_ZL19g_wifi_enable_delay>
    2020:	85 30       	cpi	r24, 0x05	; 5
    2022:	39 f4       	brne	.+14     	; 0x2032 <__vector_41+0x6ba>
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <_Z10wifi_powerb>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	0e 94 07 2b 	call	0x560e	; 0x560e <_Z10wifi_resetb>
    2030:	5e c0       	rjmp	.+188    	; 0x20ee <__vector_41+0x776>
    2032:	80 91 45 47 	lds	r24, 0x4745	; 0x804745 <_ZL19g_wifi_enable_delay>
    2036:	81 11       	cpse	r24, r1
    2038:	5a c0       	rjmp	.+180    	; 0x20ee <__vector_41+0x776>
    203a:	46 e0       	ldi	r20, 0x06	; 6
    203c:	60 e8       	ldi	r22, 0x80	; 128
    203e:	75 e2       	ldi	r23, 0x25	; 37
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 21 39 	call	0x7242	; 0x7242 <_Z12linkbus_initm14USART_Number_t>
    2048:	52 c0       	rjmp	.+164    	; 0x20ee <__vector_41+0x776>
    204a:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    204e:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    2052:	89 2b       	or	r24, r25
    2054:	69 f0       	breq	.+26     	; 0x2070 <__vector_41+0x6f8>
    2056:	80 91 46 47 	lds	r24, 0x4746	; 0x804746 <_ZL20g_shutting_down_wifi>
    205a:	81 11       	cpse	r24, r1
    205c:	0c c0       	rjmp	.+24     	; 0x2076 <__vector_41+0x6fe>
    205e:	90 91 80 47 	lds	r25, 0x4780	; 0x804780 <g_check_for_next_event>
    2062:	91 11       	cpse	r25, r1
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <__vector_41+0x6fe>
    2066:	90 91 81 47 	lds	r25, 0x4781	; 0x804781 <g_waiting_for_next_event>
    206a:	99 23       	and	r25, r25
    206c:	19 f0       	breq	.+6      	; 0x2074 <__vector_41+0x6fc>
    206e:	03 c0       	rjmp	.+6      	; 0x2076 <__vector_41+0x6fe>
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <__vector_41+0x6fe>
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	88 23       	and	r24, r24
    2078:	99 f1       	breq	.+102    	; 0x20e0 <__vector_41+0x768>
    207a:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    207e:	88 23       	and	r24, r24
    2080:	79 f1       	breq	.+94     	; 0x20e0 <__vector_41+0x768>
    2082:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2086:	81 50       	subi	r24, 0x01	; 1
    2088:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    208c:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2090:	81 11       	cpse	r24, r1
    2092:	26 c0       	rjmp	.+76     	; 0x20e0 <__vector_41+0x768>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	0e 94 07 2b 	call	0x560e	; 0x560e <_Z10wifi_resetb>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <_Z10wifi_powerb>
    20a0:	10 92 46 47 	sts	0x4746, r1	; 0x804746 <_ZL20g_shutting_down_wifi>
    20a4:	80 91 7e 47 	lds	r24, 0x477E	; 0x80477e <g_event_enabled>
    20a8:	81 11       	cpse	r24, r1
    20aa:	12 c0       	rjmp	.+36     	; 0x20d0 <__vector_41+0x758>
    20ac:	84 e0       	ldi	r24, 0x04	; 4
    20ae:	80 93 47 47 	sts	0x4747, r24	; 0x804747 <_ZL11g_sleepType>
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	80 93 82 47 	sts	0x4782, r24	; 0x804782 <_ZL13g_go_to_sleep>
    20b8:	8f ef       	ldi	r24, 0xFF	; 255
    20ba:	9f ef       	ldi	r25, 0xFF	; 255
    20bc:	dc 01       	movw	r26, r24
    20be:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    20c2:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    20c6:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    20ca:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    20ce:	06 c0       	rjmp	.+12     	; 0x20dc <__vector_41+0x764>
    20d0:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <_ZL11g_sleepType>
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	11 f4       	brne	.+4      	; 0x20dc <__vector_41+0x764>
    20d8:	0e 94 2f 20 	call	0x405e	; 0x405e <_Z12eventEnabledv>
    20dc:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    20e0:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    20e4:	88 23       	and	r24, r24
    20e6:	19 f0       	breq	.+6      	; 0x20ee <__vector_41+0x776>
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	80 93 44 47 	sts	0x4744, r24	; 0x804744 <_ZL16g_report_seconds>
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    20f4:	25 96       	adiw	r28, 0x05	; 5
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	ff 91       	pop	r31
    2100:	ef 91       	pop	r30
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	7f 91       	pop	r23
    210c:	6f 91       	pop	r22
    210e:	5f 91       	pop	r21
    2110:	4f 91       	pop	r20
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	0f 90       	pop	r0
    211c:	0b be       	out	0x3b, r0	; 59
    211e:	0f 90       	pop	r0
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	0f 90       	pop	r0
    2124:	1f 90       	pop	r1
    2126:	18 95       	reti

00002128 <__vector_12>:
    2128:	1f 92       	push	r1
    212a:	0f 92       	push	r0
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	0f 92       	push	r0
    2130:	11 24       	eor	r1, r1
    2132:	0b b6       	in	r0, 0x3b	; 59
    2134:	0f 92       	push	r0
    2136:	2f 93       	push	r18
    2138:	3f 93       	push	r19
    213a:	4f 93       	push	r20
    213c:	5f 93       	push	r21
    213e:	6f 93       	push	r22
    2140:	7f 93       	push	r23
    2142:	8f 93       	push	r24
    2144:	9f 93       	push	r25
    2146:	af 93       	push	r26
    2148:	bf 93       	push	r27
    214a:	ef 93       	push	r30
    214c:	ff 93       	push	r31
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	00 d0       	rcall	.+0      	; 0x2154 <__vector_12+0x2c>
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    215c:	80 ff       	sbrs	r24, 0
    215e:	ca c0       	rjmp	.+404    	; 0x22f4 <__vector_12+0x1cc>
    2160:	80 91 1f 40 	lds	r24, 0x401F	; 0x80401f <g_i2c0_timeout_ticks>
    2164:	90 91 20 40 	lds	r25, 0x4020	; 0x804020 <g_i2c0_timeout_ticks+0x1>
    2168:	89 2b       	or	r24, r25
    216a:	49 f0       	breq	.+18     	; 0x217e <__vector_12+0x56>
    216c:	80 91 1f 40 	lds	r24, 0x401F	; 0x80401f <g_i2c0_timeout_ticks>
    2170:	90 91 20 40 	lds	r25, 0x4020	; 0x804020 <g_i2c0_timeout_ticks+0x1>
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	80 93 1f 40 	sts	0x401F, r24	; 0x80401f <g_i2c0_timeout_ticks>
    217a:	90 93 20 40 	sts	0x4020, r25	; 0x804020 <g_i2c0_timeout_ticks+0x1>
    217e:	80 91 1d 40 	lds	r24, 0x401D	; 0x80401d <g_i2c1_timeout_ticks>
    2182:	90 91 1e 40 	lds	r25, 0x401E	; 0x80401e <g_i2c1_timeout_ticks+0x1>
    2186:	89 2b       	or	r24, r25
    2188:	49 f0       	breq	.+18     	; 0x219c <__vector_12+0x74>
    218a:	80 91 1d 40 	lds	r24, 0x401D	; 0x80401d <g_i2c1_timeout_ticks>
    218e:	90 91 1e 40 	lds	r25, 0x401E	; 0x80401e <g_i2c1_timeout_ticks+0x1>
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	80 93 1d 40 	sts	0x401D, r24	; 0x80401d <g_i2c1_timeout_ticks>
    2198:	90 93 1e 40 	sts	0x401E, r25	; 0x80401e <g_i2c1_timeout_ticks+0x1>
    219c:	80 91 3b 47 	lds	r24, 0x473B	; 0x80473b <_ZL21g_util_tick_countdown>
    21a0:	90 91 3c 47 	lds	r25, 0x473C	; 0x80473c <_ZL21g_util_tick_countdown+0x1>
    21a4:	89 2b       	or	r24, r25
    21a6:	49 f0       	breq	.+18     	; 0x21ba <__vector_12+0x92>
    21a8:	80 91 3b 47 	lds	r24, 0x473B	; 0x80473b <_ZL21g_util_tick_countdown>
    21ac:	90 91 3c 47 	lds	r25, 0x473C	; 0x80473c <_ZL21g_util_tick_countdown+0x1>
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	80 93 3b 47 	sts	0x473B, r24	; 0x80473b <_ZL21g_util_tick_countdown>
    21b6:	90 93 3c 47 	sts	0x473C, r25	; 0x80473c <_ZL21g_util_tick_countdown+0x1>
    21ba:	80 91 7e 47 	lds	r24, 0x477E	; 0x80477e <g_event_enabled>
    21be:	88 23       	and	r24, r24
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <__vector_12+0xa0>
    21c2:	80 91 7f 47 	lds	r24, 0x477F	; 0x80477f <g_event_commenced>
    21c6:	01 c0       	rjmp	.+2      	; 0x21ca <__vector_12+0xa2>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	88 23       	and	r24, r24
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <__vector_12+0xa8>
    21ce:	92 c0       	rjmp	.+292    	; 0x22f4 <__vector_12+0x1cc>
    21d0:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    21d4:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    21d8:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    21dc:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    21e0:	18 16       	cp	r1, r24
    21e2:	19 06       	cpc	r1, r25
    21e4:	1a 06       	cpc	r1, r26
    21e6:	1b 06       	cpc	r1, r27
    21e8:	0c f0       	brlt	.+2      	; 0x21ec <__vector_12+0xc4>
    21ea:	66 c0       	rjmp	.+204    	; 0x22b8 <__vector_12+0x190>
    21ec:	80 91 a4 47 	lds	r24, 0x47A4	; 0x8047a4 <_ZZ11__vector_12E7codeInc>
    21f0:	90 91 a5 47 	lds	r25, 0x47A5	; 0x8047a5 <_ZZ11__vector_12E7codeInc+0x1>
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	09 f4       	brne	.+2      	; 0x21fa <__vector_12+0xd2>
    21f8:	47 c0       	rjmp	.+142    	; 0x2288 <__vector_12+0x160>
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	80 93 a4 47 	sts	0x47A4, r24	; 0x8047a4 <_ZZ11__vector_12E7codeInc>
    2200:	90 93 a5 47 	sts	0x47A5, r25	; 0x8047a5 <_ZZ11__vector_12E7codeInc+0x1>
    2204:	89 2b       	or	r24, r25
    2206:	09 f0       	breq	.+2      	; 0x220a <__vector_12+0xe2>
    2208:	75 c0       	rjmp	.+234    	; 0x22f4 <__vector_12+0x1cc>
    220a:	ae 01       	movw	r20, r28
    220c:	4f 5f       	subi	r20, 0xFF	; 255
    220e:	5f 4f       	sbci	r21, 0xFF	; 255
    2210:	be 01       	movw	r22, r28
    2212:	6e 5f       	subi	r22, 0xFE	; 254
    2214:	7f 4f       	sbci	r23, 0xFF	; 255
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
    221e:	80 93 a6 47 	sts	0x47A6, r24	; 0x8047a6 <_ZZ11__vector_12E3key>
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	81 11       	cpse	r24, r1
    2226:	25 c0       	rjmp	.+74     	; 0x2272 <__vector_12+0x14a>
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	88 23       	and	r24, r24
    222c:	11 f1       	breq	.+68     	; 0x2272 <__vector_12+0x14a>
    222e:	8d ef       	ldi	r24, 0xFD	; 253
    2230:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    2234:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2238:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    223c:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2240:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	8a 83       	std	Y+2, r24	; 0x02
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	be 01       	movw	r22, r28
    224e:	6e 5f       	subi	r22, 0xFE	; 254
    2250:	7f 4f       	sbci	r23, 0xFF	; 255
    2252:	88 e4       	ldi	r24, 0x48	; 72
    2254:	97 e4       	ldi	r25, 0x47	; 71
    2256:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
    225a:	ae 01       	movw	r20, r28
    225c:	4f 5f       	subi	r20, 0xFF	; 255
    225e:	5f 4f       	sbci	r21, 0xFF	; 255
    2260:	be 01       	movw	r22, r28
    2262:	6e 5f       	subi	r22, 0xFE	; 254
    2264:	7f 4f       	sbci	r23, 0xFF	; 255
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
    226e:	80 93 a6 47 	sts	0x47A6, r24	; 0x8047a6 <_ZZ11__vector_12E3key>
    2272:	80 91 a6 47 	lds	r24, 0x47A6	; 0x8047a6 <_ZZ11__vector_12E3key>
    2276:	88 23       	and	r24, r24
    2278:	e9 f1       	breq	.+122    	; 0x22f4 <__vector_12+0x1cc>
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <_Z18powerToTransmitterb>
    2280:	89 b1       	in	r24, 0x09	; 9
    2282:	8f 7b       	andi	r24, 0xBF	; 191
    2284:	89 b9       	out	0x09, r24	; 9
    2286:	36 c0       	rjmp	.+108    	; 0x22f4 <__vector_12+0x1cc>
    2288:	80 91 a6 47 	lds	r24, 0x47A6	; 0x8047a6 <_ZZ11__vector_12E3key>
    228c:	0e 94 99 46 	call	0x8d32	; 0x8d32 <_Z14keyTransmitterb>
    2290:	80 91 a6 47 	lds	r24, 0x47A6	; 0x8047a6 <_ZZ11__vector_12E3key>
    2294:	81 11       	cpse	r24, r1
    2296:	04 c0       	rjmp	.+8      	; 0x22a0 <__vector_12+0x178>
    2298:	89 b1       	in	r24, 0x09	; 9
    229a:	80 64       	ori	r24, 0x40	; 64
    229c:	89 b9       	out	0x09, r24	; 9
    229e:	03 c0       	rjmp	.+6      	; 0x22a6 <__vector_12+0x17e>
    22a0:	89 b1       	in	r24, 0x09	; 9
    22a2:	8f 7b       	andi	r24, 0xBF	; 191
    22a4:	89 b9       	out	0x09, r24	; 9
    22a6:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    22aa:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    22ae:	80 93 a4 47 	sts	0x47A4, r24	; 0x8047a4 <_ZZ11__vector_12E7codeInc>
    22b2:	90 93 a5 47 	sts	0x47A5, r25	; 0x8047a5 <_ZZ11__vector_12E7codeInc+0x1>
    22b6:	1e c0       	rjmp	.+60     	; 0x22f4 <__vector_12+0x1cc>
    22b8:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    22bc:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    22c0:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    22c4:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    22c8:	89 2b       	or	r24, r25
    22ca:	8a 2b       	or	r24, r26
    22cc:	8b 2b       	or	r24, r27
    22ce:	91 f4       	brne	.+36     	; 0x22f4 <__vector_12+0x1cc>
    22d0:	80 91 a6 47 	lds	r24, 0x47A6	; 0x8047a6 <_ZZ11__vector_12E3key>
    22d4:	88 23       	and	r24, r24
    22d6:	71 f0       	breq	.+28     	; 0x22f4 <__vector_12+0x1cc>
    22d8:	10 92 a6 47 	sts	0x47A6, r1	; 0x8047a6 <_ZZ11__vector_12E3key>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	0e 94 99 46 	call	0x8d32	; 0x8d32 <_Z14keyTransmitterb>
    22e2:	89 b1       	in	r24, 0x09	; 9
    22e4:	80 64       	ori	r24, 0x40	; 64
    22e6:	89 b9       	out	0x09, r24	; 9
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <_Z18powerToTransmitterb>
    22ee:	8e ef       	ldi	r24, 0xFE	; 254
    22f0:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	ff 91       	pop	r31
    2304:	ef 91       	pop	r30
    2306:	bf 91       	pop	r27
    2308:	af 91       	pop	r26
    230a:	9f 91       	pop	r25
    230c:	8f 91       	pop	r24
    230e:	7f 91       	pop	r23
    2310:	6f 91       	pop	r22
    2312:	5f 91       	pop	r21
    2314:	4f 91       	pop	r20
    2316:	3f 91       	pop	r19
    2318:	2f 91       	pop	r18
    231a:	0f 90       	pop	r0
    231c:	0b be       	out	0x3b, r0	; 59
    231e:	0f 90       	pop	r0
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	0f 90       	pop	r0
    2324:	1f 90       	pop	r1
    2326:	18 95       	reti

00002328 <main>:
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	1f 92       	push	r1
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <atmel_start_init>
    2336:	89 b1       	in	r24, 0x09	; 9
    2338:	80 64       	ori	r24, 0x40	; 64
    233a:	89 b9       	out	0x09, r24	; 9
    233c:	82 e9       	ldi	r24, 0x92	; 146
    233e:	97 e4       	ldi	r25, 0x47	; 71
    2340:	0e 94 a9 34 	call	0x6952	; 0x6952 <_ZN13EepromManager20initializeEEPROMVarsEv>
    2344:	82 e9       	ldi	r24, 0x92	; 146
    2346:	97 e4       	ldi	r25, 0x47	; 71
    2348:	0e 94 bd 33 	call	0x677a	; 0x677a <_ZN13EepromManager11readNonVolsEv>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
    2352:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <sb_send_NewLine>
    2356:	86 e4       	ldi	r24, 0x46	; 70
    2358:	90 e4       	ldi	r25, 0x40	; 64
    235a:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    235e:	83 e6       	ldi	r24, 0x63	; 99
    2360:	90 e4       	ldi	r25, 0x40	; 64
    2362:	9f 93       	push	r25
    2364:	8f 93       	push	r24
    2366:	87 e6       	ldi	r24, 0x67	; 103
    2368:	90 e4       	ldi	r25, 0x40	; 64
    236a:	9f 93       	push	r25
    236c:	8f 93       	push	r24
    236e:	87 e0       	ldi	r24, 0x07	; 7
    2370:	97 e4       	ldi	r25, 0x47	; 71
    2372:	9f 93       	push	r25
    2374:	8f 93       	push	r24
    2376:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    237a:	87 e0       	ldi	r24, 0x07	; 7
    237c:	97 e4       	ldi	r25, 0x47	; 71
    237e:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2382:	84 e7       	ldi	r24, 0x74	; 116
    2384:	90 e4       	ldi	r25, 0x40	; 64
    2386:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    238a:	0e 94 49 47 	call	0x8e92	; 0x8e92 <_Z16init_transmitterv>
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	82 3d       	cpi	r24, 0xD2	; 210
    239c:	31 f4       	brne	.+12     	; 0x23aa <main+0x82>
    239e:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <sb_send_NewLine>
    23a2:	8b eb       	ldi	r24, 0xBB	; 187
    23a4:	91 e4       	ldi	r25, 0x41	; 65
    23a6:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    23aa:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_Z8rtc_initv>
    23ae:	8c 3f       	cpi	r24, 0xFC	; 252
    23b0:	39 f4       	brne	.+14     	; 0x23c0 <main+0x98>
    23b2:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <sb_send_NewLine>
    23b6:	86 ee       	ldi	r24, 0xE6	; 230
    23b8:	91 e4       	ldi	r25, 0x41	; 65
    23ba:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    23be:	11 c0       	rjmp	.+34     	; 0x23e2 <main+0xba>
    23c0:	ce 01       	movw	r24, r28
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    23c8:	60 93 9c 47 	sts	0x479C, r22	; 0x80479c <g_current_epoch>
    23cc:	70 93 9d 47 	sts	0x479D, r23	; 0x80479d <g_current_epoch+0x1>
    23d0:	80 93 9e 47 	sts	0x479E, r24	; 0x80479e <g_current_epoch+0x2>
    23d4:	90 93 9f 47 	sts	0x479F, r25	; 0x80479f <g_current_epoch+0x3>
    23d8:	29 81       	ldd	r18, Y+1	; 0x01
    23da:	21 11       	cpse	r18, r1
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <main+0xba>
    23de:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    23e2:	0e 94 11 2b 	call	0x5622	; 0x5622 <_Z11wifiPresentv>
    23e6:	81 11       	cpse	r24, r1
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <main+0xce>
    23ea:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <sb_send_NewLine>
    23ee:	8e e0       	ldi	r24, 0x0E	; 14
    23f0:	92 e4       	ldi	r25, 0x42	; 66
    23f2:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    23f6:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <sb_send_NewLine>
    23fa:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <sb_send_NewPrompt>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	0e 94 23 23 	call	0x4646	; 0x4646 <_Z13startEventNow19EventActionSource_t>
    2404:	6a ef       	ldi	r22, 0xFA	; 250
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <util_delay_ms>
    2410:	88 23       	and	r24, r24
    2412:	c1 f3       	breq	.-16     	; 0x2404 <main+0xdc>
    2414:	0e 94 7f 19 	call	0x32fe	; 0x32fe <_Z17handleLinkBusMsgsv>
    2418:	0e 94 0f 12 	call	0x241e	; 0x241e <_Z19handleSerialBusMsgsv>
    241c:	f3 cf       	rjmp	.-26     	; 0x2404 <main+0xdc>

0000241e <_Z19handleSerialBusMsgsv>:
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	c6 59       	subi	r28, 0x96	; 150
    2430:	d1 09       	sbc	r29, r1
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <nextFullSBRxBuffer>
    243a:	8e 83       	std	Y+6, r24	; 0x06
    243c:	9f 83       	std	Y+7, r25	; 0x07
    243e:	21 e0       	ldi	r18, 0x01	; 1
    2440:	8e 81       	ldd	r24, Y+6	; 0x06
    2442:	9f 81       	ldd	r25, Y+7	; 0x07
    2444:	89 2b       	or	r24, r25
    2446:	09 f4       	brne	.+2      	; 0x244a <_Z19handleSerialBusMsgsv+0x2c>
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	22 23       	and	r18, r18
    244c:	09 f4       	brne	.+2      	; 0x2450 <_Z19handleSerialBusMsgsv+0x32>
    244e:	4b c7       	rjmp	.+3734   	; 0x32e6 <_Z19handleSerialBusMsgsv+0xec8>
    2450:	8e 81       	ldd	r24, Y+6	; 0x06
    2452:	9f 81       	ldd	r25, Y+7	; 0x07
    2454:	fc 01       	movw	r30, r24
    2456:	81 81       	ldd	r24, Z+1	; 0x01
    2458:	92 81       	ldd	r25, Z+2	; 0x02
    245a:	88 87       	std	Y+8, r24	; 0x08
    245c:	99 87       	std	Y+9, r25	; 0x09
    245e:	88 85       	ldd	r24, Y+8	; 0x08
    2460:	99 85       	ldd	r25, Y+9	; 0x09
    2462:	8a 3e       	cpi	r24, 0xEA	; 234
    2464:	f2 e2       	ldi	r31, 0x22	; 34
    2466:	9f 07       	cpc	r25, r31
    2468:	09 f4       	brne	.+2      	; 0x246c <_Z19handleSerialBusMsgsv+0x4e>
    246a:	a4 c3       	rjmp	.+1864   	; 0x2bb4 <_Z19handleSerialBusMsgsv+0x796>
    246c:	8b 3e       	cpi	r24, 0xEB	; 235
    246e:	22 e2       	ldi	r18, 0x22	; 34
    2470:	92 07       	cpc	r25, r18
    2472:	b8 f4       	brcc	.+46     	; 0x24a2 <_Z19handleSerialBusMsgsv+0x84>
    2474:	8f 36       	cpi	r24, 0x6F	; 111
    2476:	ed e1       	ldi	r30, 0x1D	; 29
    2478:	9e 07       	cpc	r25, r30
    247a:	09 f4       	brne	.+2      	; 0x247e <_Z19handleSerialBusMsgsv+0x60>
    247c:	ed c3       	rjmp	.+2010   	; 0x2c58 <_Z19handleSerialBusMsgsv+0x83a>
    247e:	80 37       	cpi	r24, 0x70	; 112
    2480:	fd e1       	ldi	r31, 0x1D	; 29
    2482:	9f 07       	cpc	r25, r31
    2484:	28 f4       	brcc	.+10     	; 0x2490 <_Z19handleSerialBusMsgsv+0x72>
    2486:	8e 31       	cpi	r24, 0x1E	; 30
    2488:	93 40       	sbci	r25, 0x03	; 3
    248a:	09 f4       	brne	.+2      	; 0x248e <_Z19handleSerialBusMsgsv+0x70>
    248c:	81 c2       	rjmp	.+1282   	; 0x2990 <_Z19handleSerialBusMsgsv+0x572>
    248e:	19 c7       	rjmp	.+3634   	; 0x32c2 <_Z19handleSerialBusMsgsv+0xea4>
    2490:	86 3c       	cpi	r24, 0xC6	; 198
    2492:	ee e1       	ldi	r30, 0x1E	; 30
    2494:	9e 07       	cpc	r25, r30
    2496:	e9 f0       	breq	.+58     	; 0x24d2 <_Z19handleSerialBusMsgsv+0xb4>
    2498:	81 3d       	cpi	r24, 0xD1	; 209
    249a:	9e 41       	sbci	r25, 0x1E	; 30
    249c:	09 f4       	brne	.+2      	; 0x24a0 <_Z19handleSerialBusMsgsv+0x82>
    249e:	a9 c1       	rjmp	.+850    	; 0x27f2 <_Z19handleSerialBusMsgsv+0x3d4>
    24a0:	10 c7       	rjmp	.+3616   	; 0x32c2 <_Z19handleSerialBusMsgsv+0xea4>
    24a2:	82 37       	cpi	r24, 0x72	; 114
    24a4:	23 e2       	ldi	r18, 0x23	; 35
    24a6:	92 07       	cpc	r25, r18
    24a8:	09 f4       	brne	.+2      	; 0x24ac <_Z19handleSerialBusMsgsv+0x8e>
    24aa:	00 c3       	rjmp	.+1536   	; 0x2aac <_Z19handleSerialBusMsgsv+0x68e>
    24ac:	83 37       	cpi	r24, 0x73	; 115
    24ae:	e3 e2       	ldi	r30, 0x23	; 35
    24b0:	9e 07       	cpc	r25, r30
    24b2:	28 f4       	brcc	.+10     	; 0x24be <_Z19handleSerialBusMsgsv+0xa0>
    24b4:	88 3f       	cpi	r24, 0xF8	; 248
    24b6:	92 42       	sbci	r25, 0x22	; 34
    24b8:	09 f4       	brne	.+2      	; 0x24bc <_Z19handleSerialBusMsgsv+0x9e>
    24ba:	38 c1       	rjmp	.+624    	; 0x272c <_Z19handleSerialBusMsgsv+0x30e>
    24bc:	02 c7       	rjmp	.+3588   	; 0x32c2 <_Z19handleSerialBusMsgsv+0xea4>
    24be:	84 33       	cpi	r24, 0x34	; 52
    24c0:	24 e2       	ldi	r18, 0x24	; 36
    24c2:	92 07       	cpc	r25, r18
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <_Z19handleSerialBusMsgsv+0xaa>
    24c6:	29 c2       	rjmp	.+1106   	; 0x291a <_Z19handleSerialBusMsgsv+0x4fc>
    24c8:	85 3c       	cpi	r24, 0xC5	; 197
    24ca:	94 42       	sbci	r25, 0x24	; 36
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <_Z19handleSerialBusMsgsv+0xb2>
    24ce:	e5 c6       	rjmp	.+3530   	; 0x329a <_Z19handleSerialBusMsgsv+0xe7c>
    24d0:	f8 c6       	rjmp	.+3568   	; 0x32c2 <_Z19handleSerialBusMsgsv+0xea4>
    24d2:	8e 81       	ldd	r24, Y+6	; 0x06
    24d4:	9f 81       	ldd	r25, Y+7	; 0x07
    24d6:	fc 01       	movw	r30, r24
    24d8:	83 81       	ldd	r24, Z+3	; 0x03
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	89 2b       	or	r24, r25
    24e8:	09 f4       	brne	.+2      	; 0x24ec <_Z19handleSerialBusMsgsv+0xce>
    24ea:	d0 c0       	rjmp	.+416    	; 0x268c <_Z19handleSerialBusMsgsv+0x26e>
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	82 34       	cpi	r24, 0x42	; 66
    24f2:	91 05       	cpc	r25, r1
    24f4:	19 f4       	brne	.+6      	; 0x24fc <_Z19handleSerialBusMsgsv+0xde>
    24f6:	19 82       	std	Y+1, r1	; 0x01
    24f8:	1a 82       	std	Y+2, r1	; 0x02
    24fa:	ac c0       	rjmp	.+344    	; 0x2654 <_Z19handleSerialBusMsgsv+0x236>
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	86 34       	cpi	r24, 0x46	; 70
    2502:	91 05       	cpc	r25, r1
    2504:	29 f4       	brne	.+10     	; 0x2510 <_Z19handleSerialBusMsgsv+0xf2>
    2506:	86 e0       	ldi	r24, 0x06	; 6
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	a2 c0       	rjmp	.+324    	; 0x2654 <_Z19handleSerialBusMsgsv+0x236>
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	83 34       	cpi	r24, 0x43	; 67
    2516:	91 05       	cpc	r25, r1
    2518:	b9 f5       	brne	.+110    	; 0x2588 <_Z19handleSerialBusMsgsv+0x16a>
    251a:	8e 81       	ldd	r24, Y+6	; 0x06
    251c:	9f 81       	ldd	r25, Y+7	; 0x07
    251e:	fc 01       	movw	r30, r24
    2520:	87 89       	ldd	r24, Z+23	; 0x17
    2522:	8b 83       	std	Y+3, r24	; 0x03
    2524:	8e 81       	ldd	r24, Y+6	; 0x06
    2526:	9f 81       	ldd	r25, Y+7	; 0x07
    2528:	fc 01       	movw	r30, r24
    252a:	10 8e       	std	Z+24, r1	; 0x18
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	82 34       	cpi	r24, 0x42	; 66
    2530:	11 f4       	brne	.+4      	; 0x2536 <_Z19handleSerialBusMsgsv+0x118>
    2532:	80 e3       	ldi	r24, 0x30	; 48
    2534:	8b 83       	std	Y+3, r24	; 0x03
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	88 2f       	mov	r24, r24
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	c0 97       	sbiw	r24, 0x30	; 48
    253e:	0a 97       	sbiw	r24, 0x0a	; 10
    2540:	08 f0       	brcs	.+2      	; 0x2544 <_Z19handleSerialBusMsgsv+0x126>
    2542:	88 c0       	rjmp	.+272    	; 0x2654 <_Z19handleSerialBusMsgsv+0x236>
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
    2546:	9f 81       	ldd	r25, Y+7	; 0x07
    2548:	47 96       	adiw	r24, 0x17	; 23
    254a:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <atoi>
    254e:	8a 87       	std	Y+10, r24	; 0x0a
    2550:	9b 87       	std	Y+11, r25	; 0x0b
    2552:	1c 86       	std	Y+12, r1	; 0x0c
    2554:	85 e0       	ldi	r24, 0x05	; 5
    2556:	8d 87       	std	Y+13, r24	; 0x0d
    2558:	8d 85       	ldd	r24, Y+13	; 0x0d
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2560:	9b 85       	ldd	r25, Y+11	; 0x0b
    2562:	28 17       	cp	r18, r24
    2564:	39 07       	cpc	r19, r25
    2566:	24 f4       	brge	.+8      	; 0x2570 <_Z19handleSerialBusMsgsv+0x152>
    2568:	8d 85       	ldd	r24, Y+13	; 0x0d
    256a:	88 2f       	mov	r24, r24
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	09 c0       	rjmp	.+18     	; 0x2582 <_Z19handleSerialBusMsgsv+0x164>
    2570:	8c 85       	ldd	r24, Y+12	; 0x0c
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	2a 85       	ldd	r18, Y+10	; 0x0a
    2578:	3b 85       	ldd	r19, Y+11	; 0x0b
    257a:	82 17       	cp	r24, r18
    257c:	93 07       	cpc	r25, r19
    257e:	0c f4       	brge	.+2      	; 0x2582 <_Z19handleSerialBusMsgsv+0x164>
    2580:	c9 01       	movw	r24, r18
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	66 c0       	rjmp	.+204    	; 0x2654 <_Z19handleSerialBusMsgsv+0x236>
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	83 35       	cpi	r24, 0x53	; 83
    258e:	91 05       	cpc	r25, r1
    2590:	09 f0       	breq	.+2      	; 0x2594 <_Z19handleSerialBusMsgsv+0x176>
    2592:	59 c0       	rjmp	.+178    	; 0x2646 <_Z19handleSerialBusMsgsv+0x228>
    2594:	1c 82       	std	Y+4, r1	; 0x04
    2596:	8e 81       	ldd	r24, Y+6	; 0x06
    2598:	9f 81       	ldd	r25, Y+7	; 0x07
    259a:	fc 01       	movw	r30, r24
    259c:	87 89       	ldd	r24, Z+23	; 0x17
    259e:	8e 87       	std	Y+14, r24	; 0x0e
    25a0:	8e 81       	ldd	r24, Y+6	; 0x06
    25a2:	9f 81       	ldd	r25, Y+7	; 0x07
    25a4:	fc 01       	movw	r30, r24
    25a6:	80 8d       	ldd	r24, Z+24	; 0x18
    25a8:	8f 87       	std	Y+15, r24	; 0x0f
    25aa:	8e 81       	ldd	r24, Y+6	; 0x06
    25ac:	9f 81       	ldd	r25, Y+7	; 0x07
    25ae:	fc 01       	movw	r30, r24
    25b0:	11 8e       	std	Z+25, r1	; 0x19
    25b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b4:	82 34       	cpi	r24, 0x42	; 66
    25b6:	11 f4       	brne	.+4      	; 0x25bc <_Z19handleSerialBusMsgsv+0x19e>
    25b8:	1c 82       	std	Y+4, r1	; 0x04
    25ba:	36 c0       	rjmp	.+108    	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    25bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25be:	86 34       	cpi	r24, 0x46	; 70
    25c0:	51 f4       	brne	.+20     	; 0x25d6 <_Z19handleSerialBusMsgsv+0x1b8>
    25c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c4:	81 33       	cpi	r24, 0x31	; 49
    25c6:	80 f1       	brcs	.+96     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    25c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ca:	86 33       	cpi	r24, 0x36	; 54
    25cc:	68 f5       	brcc	.+90     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    25ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d0:	84 52       	subi	r24, 0x24	; 36
    25d2:	8c 83       	std	Y+4, r24	; 0x04
    25d4:	29 c0       	rjmp	.+82     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    25d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25d8:	83 35       	cpi	r24, 0x53	; 83
    25da:	69 f4       	brne	.+26     	; 0x25f6 <_Z19handleSerialBusMsgsv+0x1d8>
    25dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25de:	81 33       	cpi	r24, 0x31	; 49
    25e0:	38 f0       	brcs	.+14     	; 0x25f0 <_Z19handleSerialBusMsgsv+0x1d2>
    25e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e4:	86 33       	cpi	r24, 0x36	; 54
    25e6:	20 f4       	brcc	.+8      	; 0x25f0 <_Z19handleSerialBusMsgsv+0x1d2>
    25e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ea:	89 52       	subi	r24, 0x29	; 41
    25ec:	8c 83       	std	Y+4, r24	; 0x04
    25ee:	1c c0       	rjmp	.+56     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    25f0:	87 e0       	ldi	r24, 0x07	; 7
    25f2:	8c 83       	std	Y+4, r24	; 0x04
    25f4:	19 c0       	rjmp	.+50     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    25f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f8:	86 34       	cpi	r24, 0x46	; 70
    25fa:	51 f4       	brne	.+20     	; 0x2610 <_Z19handleSerialBusMsgsv+0x1f2>
    25fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25fe:	81 33       	cpi	r24, 0x31	; 49
    2600:	98 f0       	brcs	.+38     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    2602:	8e 85       	ldd	r24, Y+14	; 0x0e
    2604:	86 33       	cpi	r24, 0x36	; 54
    2606:	80 f4       	brcc	.+32     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    2608:	8e 85       	ldd	r24, Y+14	; 0x0e
    260a:	84 52       	subi	r24, 0x24	; 36
    260c:	8c 83       	std	Y+4, r24	; 0x04
    260e:	0c c0       	rjmp	.+24     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    2610:	8f 85       	ldd	r24, Y+15	; 0x0f
    2612:	83 35       	cpi	r24, 0x53	; 83
    2614:	49 f4       	brne	.+18     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    2616:	8e 85       	ldd	r24, Y+14	; 0x0e
    2618:	81 33       	cpi	r24, 0x31	; 49
    261a:	30 f0       	brcs	.+12     	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    261c:	8e 85       	ldd	r24, Y+14	; 0x0e
    261e:	86 33       	cpi	r24, 0x36	; 54
    2620:	18 f4       	brcc	.+6      	; 0x2628 <_Z19handleSerialBusMsgsv+0x20a>
    2622:	8e 85       	ldd	r24, Y+14	; 0x0e
    2624:	89 52       	subi	r24, 0x29	; 41
    2626:	8c 83       	std	Y+4, r24	; 0x04
    2628:	8c 81       	ldd	r24, Y+4	; 0x04
    262a:	87 30       	cpi	r24, 0x07	; 7
    262c:	48 f0       	brcs	.+18     	; 0x2640 <_Z19handleSerialBusMsgsv+0x222>
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	82 31       	cpi	r24, 0x12	; 18
    2632:	30 f4       	brcc	.+12     	; 0x2640 <_Z19handleSerialBusMsgsv+0x222>
    2634:	8c 81       	ldd	r24, Y+4	; 0x04
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	0a c0       	rjmp	.+20     	; 0x2654 <_Z19handleSerialBusMsgsv+0x236>
    2640:	19 82       	std	Y+1, r1	; 0x01
    2642:	1a 82       	std	Y+2, r1	; 0x02
    2644:	07 c0       	rjmp	.+14     	; 0x2654 <_Z19handleSerialBusMsgsv+0x236>
    2646:	8e 81       	ldd	r24, Y+6	; 0x06
    2648:	9f 81       	ldd	r25, Y+7	; 0x07
    264a:	03 96       	adiw	r24, 0x03	; 3
    264c:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <atoi>
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	99 23       	and	r25, r25
    265a:	c4 f0       	brlt	.+48     	; 0x268c <_Z19handleSerialBusMsgsv+0x26e>
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	42 97       	sbiw	r24, 0x12	; 18
    2662:	a4 f4       	brge	.+40     	; 0x268c <_Z19handleSerialBusMsgsv+0x26e>
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	8a a7       	std	Y+42, r24	; 0x2a
    2668:	ce 01       	movw	r24, r28
    266a:	8a 96       	adiw	r24, 0x2a	; 42
    266c:	ac 01       	movw	r20, r24
    266e:	69 e2       	ldi	r22, 0x29	; 41
    2670:	82 e9       	ldi	r24, 0x92	; 146
    2672:	97 e4       	ldi	r25, 0x47	; 71
    2674:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2678:	9a a5       	ldd	r25, Y+42	; 0x2a
    267a:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    267e:	98 17       	cp	r25, r24
    2680:	29 f0       	breq	.+10     	; 0x268c <_Z19handleSerialBusMsgsv+0x26e>
    2682:	ce 01       	movw	r24, r28
    2684:	8a 96       	adiw	r24, 0x2a	; 42
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    268c:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    2690:	68 2f       	mov	r22, r24
    2692:	87 e0       	ldi	r24, 0x07	; 7
    2694:	97 e4       	ldi	r25, 0x47	; 71
    2696:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <_Z8fox2TextPc5Fox_t>
    269a:	98 2f       	mov	r25, r24
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	89 27       	eor	r24, r25
    26a0:	88 23       	and	r24, r24
    26a2:	11 f1       	breq	.+68     	; 0x26e8 <_Z19handleSerialBusMsgsv+0x2ca>
    26a4:	ce 01       	movw	r24, r28
    26a6:	8b 96       	adiw	r24, 0x2b	; 43
    26a8:	67 e0       	ldi	r22, 0x07	; 7
    26aa:	77 e4       	ldi	r23, 0x47	; 71
    26ac:	0e 94 f8 4f 	call	0x9ff0	; 0x9ff0 <strcpy>
    26b0:	ce 01       	movw	r24, r28
    26b2:	8b 96       	adiw	r24, 0x2b	; 43
    26b4:	29 2f       	mov	r18, r25
    26b6:	2f 93       	push	r18
    26b8:	8f 93       	push	r24
    26ba:	83 e3       	ldi	r24, 0x33	; 51
    26bc:	92 e4       	ldi	r25, 0x42	; 66
    26be:	89 2f       	mov	r24, r25
    26c0:	8f 93       	push	r24
    26c2:	83 e3       	ldi	r24, 0x33	; 51
    26c4:	92 e4       	ldi	r25, 0x42	; 66
    26c6:	8f 93       	push	r24
    26c8:	87 e0       	ldi	r24, 0x07	; 7
    26ca:	97 e4       	ldi	r25, 0x47	; 71
    26cc:	89 2f       	mov	r24, r25
    26ce:	8f 93       	push	r24
    26d0:	87 e0       	ldi	r24, 0x07	; 7
    26d2:	97 e4       	ldi	r25, 0x47	; 71
    26d4:	8f 93       	push	r24
    26d6:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	1d c0       	rjmp	.+58     	; 0x2722 <_Z19handleSerialBusMsgsv+0x304>
    26e8:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	29 2f       	mov	r18, r25
    26f2:	2f 93       	push	r18
    26f4:	8f 93       	push	r24
    26f6:	8b e3       	ldi	r24, 0x3B	; 59
    26f8:	92 e4       	ldi	r25, 0x42	; 66
    26fa:	89 2f       	mov	r24, r25
    26fc:	8f 93       	push	r24
    26fe:	8b e3       	ldi	r24, 0x3B	; 59
    2700:	92 e4       	ldi	r25, 0x42	; 66
    2702:	8f 93       	push	r24
    2704:	87 e0       	ldi	r24, 0x07	; 7
    2706:	97 e4       	ldi	r25, 0x47	; 71
    2708:	89 2f       	mov	r24, r25
    270a:	8f 93       	push	r24
    270c:	87 e0       	ldi	r24, 0x07	; 7
    270e:	97 e4       	ldi	r25, 0x47	; 71
    2710:	8f 93       	push	r24
    2712:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	87 e0       	ldi	r24, 0x07	; 7
    2724:	97 e4       	ldi	r25, 0x47	; 71
    2726:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    272a:	d5 c5       	rjmp	.+2986   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    272c:	8e 81       	ldd	r24, Y+6	; 0x06
    272e:	9f 81       	ldd	r25, Y+7	; 0x07
    2730:	fc 01       	movw	r30, r24
    2732:	83 81       	ldd	r24, Z+3	; 0x03
    2734:	88 23       	and	r24, r24
    2736:	e9 f1       	breq	.+122    	; 0x27b2 <_Z19handleSerialBusMsgsv+0x394>
    2738:	8e 81       	ldd	r24, Y+6	; 0x06
    273a:	9f 81       	ldd	r25, Y+7	; 0x07
    273c:	03 96       	adiw	r24, 0x03	; 3
    273e:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <atoi>
    2742:	80 93 a7 47 	sts	0x47A7, r24	; 0x8047a7 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    2746:	90 93 a8 47 	sts	0x47A8, r25	; 0x8047a8 <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    274a:	80 91 a7 47 	lds	r24, 0x47A7	; 0x8047a7 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    274e:	90 91 a8 47 	lds	r25, 0x47A8	; 0x8047a8 <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    2752:	89 38       	cpi	r24, 0x89	; 137
    2754:	93 41       	sbci	r25, 0x13	; 19
    2756:	68 f4       	brcc	.+26     	; 0x2772 <_Z19handleSerialBusMsgsv+0x354>
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	87 ea       	ldi	r24, 0xA7	; 167
    275e:	97 e4       	ldi	r25, 0x47	; 71
    2760:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <_Z15txSetParametersPjPb>
    2764:	88 8b       	std	Y+16, r24	; 0x10
    2766:	88 89       	ldd	r24, Y+16	; 0x10
    2768:	88 23       	and	r24, r24
    276a:	19 f0       	breq	.+6      	; 0x2772 <_Z19handleSerialBusMsgsv+0x354>
    276c:	88 89       	ldd	r24, Y+16	; 0x10
    276e:	80 93 39 47 	sts	0x4739, r24	; 0x804739 <_ZL17g_last_error_code>
    2772:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <_Z12txGetPowerMwv>
    2776:	29 2f       	mov	r18, r25
    2778:	2f 93       	push	r18
    277a:	8f 93       	push	r24
    277c:	83 e4       	ldi	r24, 0x43	; 67
    277e:	92 e4       	ldi	r25, 0x42	; 66
    2780:	89 2f       	mov	r24, r25
    2782:	8f 93       	push	r24
    2784:	83 e4       	ldi	r24, 0x43	; 67
    2786:	92 e4       	ldi	r25, 0x42	; 66
    2788:	8f 93       	push	r24
    278a:	87 e0       	ldi	r24, 0x07	; 7
    278c:	97 e4       	ldi	r25, 0x47	; 71
    278e:	89 2f       	mov	r24, r25
    2790:	8f 93       	push	r24
    2792:	87 e0       	ldi	r24, 0x07	; 7
    2794:	97 e4       	ldi	r25, 0x47	; 71
    2796:	8f 93       	push	r24
    2798:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	87 e0       	ldi	r24, 0x07	; 7
    27aa:	97 e4       	ldi	r25, 0x47	; 71
    27ac:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    27b0:	92 c5       	rjmp	.+2852   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    27b2:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <_Z12txGetPowerMwv>
    27b6:	29 2f       	mov	r18, r25
    27b8:	2f 93       	push	r18
    27ba:	8f 93       	push	r24
    27bc:	83 e4       	ldi	r24, 0x43	; 67
    27be:	92 e4       	ldi	r25, 0x42	; 66
    27c0:	89 2f       	mov	r24, r25
    27c2:	8f 93       	push	r24
    27c4:	83 e4       	ldi	r24, 0x43	; 67
    27c6:	92 e4       	ldi	r25, 0x42	; 66
    27c8:	8f 93       	push	r24
    27ca:	87 e0       	ldi	r24, 0x07	; 7
    27cc:	97 e4       	ldi	r25, 0x47	; 71
    27ce:	89 2f       	mov	r24, r25
    27d0:	8f 93       	push	r24
    27d2:	87 e0       	ldi	r24, 0x07	; 7
    27d4:	97 e4       	ldi	r25, 0x47	; 71
    27d6:	8f 93       	push	r24
    27d8:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	87 e0       	ldi	r24, 0x07	; 7
    27ea:	97 e4       	ldi	r25, 0x47	; 71
    27ec:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    27f0:	72 c5       	rjmp	.+2788   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    27f2:	19 8a       	std	Y+17, r1	; 0x11
    27f4:	1a 8a       	std	Y+18, r1	; 0x12
    27f6:	1b 8a       	std	Y+19, r1	; 0x13
    27f8:	1c 8a       	std	Y+20, r1	; 0x14
    27fa:	8e 81       	ldd	r24, Y+6	; 0x06
    27fc:	9f 81       	ldd	r25, Y+7	; 0x07
    27fe:	fc 01       	movw	r30, r24
    2800:	83 81       	ldd	r24, Z+3	; 0x03
    2802:	88 23       	and	r24, r24
    2804:	49 f1       	breq	.+82     	; 0x2858 <_Z19handleSerialBusMsgsv+0x43a>
    2806:	8e 81       	ldd	r24, Y+6	; 0x06
    2808:	9f 81       	ldd	r25, Y+7	; 0x07
    280a:	03 96       	adiw	r24, 0x03	; 3
    280c:	9e 01       	movw	r18, r28
    280e:	2c 5b       	subi	r18, 0xBC	; 188
    2810:	3f 4f       	sbci	r19, 0xFF	; 255
    2812:	b9 01       	movw	r22, r18
    2814:	0e 94 3b 49 	call	0x9276	; 0x9276 <_Z12frequencyValPcPm>
    2818:	ce 01       	movw	r24, r28
    281a:	8c 5b       	subi	r24, 0xBC	; 188
    281c:	9f 4f       	sbci	r25, 0xFF	; 255
    281e:	61 e0       	ldi	r22, 0x01	; 1
    2820:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <_Z14txSetFrequencyPmb>
    2824:	98 2f       	mov	r25, r24
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	89 27       	eor	r24, r25
    282a:	88 23       	and	r24, r24
    282c:	89 f0       	breq	.+34     	; 0x2850 <_Z19handleSerialBusMsgsv+0x432>
    282e:	ce 01       	movw	r24, r28
    2830:	8c 5b       	subi	r24, 0xBC	; 188
    2832:	9f 4f       	sbci	r25, 0xFF	; 255
    2834:	fc 01       	movw	r30, r24
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	a2 81       	ldd	r26, Z+2	; 0x02
    283c:	b3 81       	ldd	r27, Z+3	; 0x03
    283e:	89 8b       	std	Y+17, r24	; 0x11
    2840:	9a 8b       	std	Y+18, r25	; 0x12
    2842:	ab 8b       	std	Y+19, r26	; 0x13
    2844:	bc 8b       	std	Y+20, r27	; 0x14
    2846:	82 e9       	ldi	r24, 0x92	; 146
    2848:	97 e4       	ldi	r25, 0x47	; 71
    284a:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <_ZN13EepromManager13saveAllEEPROMEv>
    284e:	04 c0       	rjmp	.+8      	; 0x2858 <_Z19handleSerialBusMsgsv+0x43a>
    2850:	8b eb       	ldi	r24, 0xBB	; 187
    2852:	91 e4       	ldi	r25, 0x41	; 65
    2854:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2858:	0e 94 8c 46 	call	0x8d18	; 0x8d18 <_Z14txGetFrequencyv>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	89 8b       	std	Y+17, r24	; 0x11
    2862:	9a 8b       	std	Y+18, r25	; 0x12
    2864:	ab 8b       	std	Y+19, r26	; 0x13
    2866:	bc 8b       	std	Y+20, r27	; 0x14
    2868:	89 89       	ldd	r24, Y+17	; 0x11
    286a:	9a 89       	ldd	r25, Y+18	; 0x12
    286c:	ab 89       	ldd	r26, Y+19	; 0x13
    286e:	bc 89       	ldd	r27, Y+20	; 0x14
    2870:	89 2b       	or	r24, r25
    2872:	8a 2b       	or	r24, r26
    2874:	8b 2b       	or	r24, r27
    2876:	09 f4       	brne	.+2      	; 0x287a <_Z19handleSerialBusMsgsv+0x45c>
    2878:	29 c5       	rjmp	.+2642   	; 0x32cc <_Z19handleSerialBusMsgsv+0xeae>
    287a:	89 89       	ldd	r24, Y+17	; 0x11
    287c:	9a 89       	ldd	r25, Y+18	; 0x12
    287e:	ab 89       	ldd	r26, Y+19	; 0x13
    2880:	bc 89       	ldd	r27, Y+20	; 0x14
    2882:	9e 01       	movw	r18, r28
    2884:	28 5b       	subi	r18, 0xB8	; 184
    2886:	3f 4f       	sbci	r19, 0xFF	; 255
    2888:	ac 01       	movw	r20, r24
    288a:	bd 01       	movw	r22, r26
    288c:	c9 01       	movw	r24, r18
    288e:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <_Z15frequencyStringPcm>
    2892:	98 2f       	mov	r25, r24
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	89 27       	eor	r24, r25
    2898:	88 23       	and	r24, r24
    289a:	e9 f0       	breq	.+58     	; 0x28d6 <_Z19handleSerialBusMsgsv+0x4b8>
    289c:	ce 01       	movw	r24, r28
    289e:	88 5b       	subi	r24, 0xB8	; 184
    28a0:	9f 4f       	sbci	r25, 0xFF	; 255
    28a2:	29 2f       	mov	r18, r25
    28a4:	2f 93       	push	r18
    28a6:	8f 93       	push	r24
    28a8:	8e e4       	ldi	r24, 0x4E	; 78
    28aa:	92 e4       	ldi	r25, 0x42	; 66
    28ac:	89 2f       	mov	r24, r25
    28ae:	8f 93       	push	r24
    28b0:	8e e4       	ldi	r24, 0x4E	; 78
    28b2:	92 e4       	ldi	r25, 0x42	; 66
    28b4:	8f 93       	push	r24
    28b6:	87 e0       	ldi	r24, 0x07	; 7
    28b8:	97 e4       	ldi	r25, 0x47	; 71
    28ba:	89 2f       	mov	r24, r25
    28bc:	8f 93       	push	r24
    28be:	87 e0       	ldi	r24, 0x07	; 7
    28c0:	97 e4       	ldi	r25, 0x47	; 71
    28c2:	8f 93       	push	r24
    28c4:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	1d c0       	rjmp	.+58     	; 0x2910 <_Z19handleSerialBusMsgsv+0x4f2>
    28d6:	8c 89       	ldd	r24, Y+20	; 0x14
    28d8:	8f 93       	push	r24
    28da:	8b 89       	ldd	r24, Y+19	; 0x13
    28dc:	8f 93       	push	r24
    28de:	8a 89       	ldd	r24, Y+18	; 0x12
    28e0:	8f 93       	push	r24
    28e2:	89 89       	ldd	r24, Y+17	; 0x11
    28e4:	8f 93       	push	r24
    28e6:	86 e5       	ldi	r24, 0x56	; 86
    28e8:	92 e4       	ldi	r25, 0x42	; 66
    28ea:	89 2f       	mov	r24, r25
    28ec:	8f 93       	push	r24
    28ee:	86 e5       	ldi	r24, 0x56	; 86
    28f0:	92 e4       	ldi	r25, 0x42	; 66
    28f2:	8f 93       	push	r24
    28f4:	87 e0       	ldi	r24, 0x07	; 7
    28f6:	97 e4       	ldi	r25, 0x47	; 71
    28f8:	89 2f       	mov	r24, r25
    28fa:	8f 93       	push	r24
    28fc:	87 e0       	ldi	r24, 0x07	; 7
    28fe:	97 e4       	ldi	r25, 0x47	; 71
    2900:	8f 93       	push	r24
    2902:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    2906:	8d b7       	in	r24, 0x3d	; 61
    2908:	9e b7       	in	r25, 0x3e	; 62
    290a:	08 96       	adiw	r24, 0x08	; 8
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	87 e0       	ldi	r24, 0x07	; 7
    2912:	97 e4       	ldi	r25, 0x47	; 71
    2914:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2918:	d9 c4       	rjmp	.+2482   	; 0x32cc <_Z19handleSerialBusMsgsv+0xeae>
    291a:	8e 81       	ldd	r24, Y+6	; 0x06
    291c:	9f 81       	ldd	r25, Y+7	; 0x07
    291e:	fc 01       	movw	r30, r24
    2920:	83 81       	ldd	r24, Z+3	; 0x03
    2922:	88 23       	and	r24, r24
    2924:	81 f1       	breq	.+96     	; 0x2986 <_Z19handleSerialBusMsgsv+0x568>
    2926:	8e 81       	ldd	r24, Y+6	; 0x06
    2928:	9f 81       	ldd	r25, Y+7	; 0x07
    292a:	fc 01       	movw	r30, r24
    292c:	83 81       	ldd	r24, Z+3	; 0x03
    292e:	80 33       	cpi	r24, 0x30	; 48
    2930:	21 f4       	brne	.+8      	; 0x293a <_Z19handleSerialBusMsgsv+0x51c>
    2932:	82 e0       	ldi	r24, 0x02	; 2
    2934:	0e 94 72 23 	call	0x46e4	; 0x46e4 <_Z12stopEventNow19EventActionSource_t>
    2938:	ce c4       	rjmp	.+2460   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    293a:	8e 81       	ldd	r24, Y+6	; 0x06
    293c:	9f 81       	ldd	r25, Y+7	; 0x07
    293e:	fc 01       	movw	r30, r24
    2940:	83 81       	ldd	r24, Z+3	; 0x03
    2942:	81 33       	cpi	r24, 0x31	; 49
    2944:	21 f4       	brne	.+8      	; 0x294e <_Z19handleSerialBusMsgsv+0x530>
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	0e 94 23 23 	call	0x4646	; 0x4646 <_Z13startEventNow19EventActionSource_t>
    294c:	c4 c4       	rjmp	.+2440   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    294e:	8e 81       	ldd	r24, Y+6	; 0x06
    2950:	9f 81       	ldd	r25, Y+7	; 0x07
    2952:	fc 01       	movw	r30, r24
    2954:	83 81       	ldd	r24, Z+3	; 0x03
    2956:	82 33       	cpi	r24, 0x32	; 50
    2958:	29 f4       	brne	.+10     	; 0x2964 <_Z19handleSerialBusMsgsv+0x546>
    295a:	10 92 7e 47 	sts	0x477E, r1	; 0x80477e <g_event_enabled>
    295e:	0e 94 97 23 	call	0x472e	; 0x472e <_Z18startEventUsingRTCv>
    2962:	b9 c4       	rjmp	.+2418   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    2964:	8e 81       	ldd	r24, Y+6	; 0x06
    2966:	9f 81       	ldd	r25, Y+7	; 0x07
    2968:	fc 01       	movw	r30, r24
    296a:	83 81       	ldd	r24, Z+3	; 0x03
    296c:	83 33       	cpi	r24, 0x33	; 51
    296e:	31 f4       	brne	.+12     	; 0x297c <_Z19handleSerialBusMsgsv+0x55e>
    2970:	62 e0       	ldi	r22, 0x02	; 2
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    297a:	ad c4       	rjmp	.+2394   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    297c:	8f e5       	ldi	r24, 0x5F	; 95
    297e:	92 e4       	ldi	r25, 0x42	; 66
    2980:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2984:	a8 c4       	rjmp	.+2384   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    2986:	8f e5       	ldi	r24, 0x5F	; 95
    2988:	92 e4       	ldi	r25, 0x42	; 66
    298a:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    298e:	a3 c4       	rjmp	.+2374   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    2990:	8e 81       	ldd	r24, Y+6	; 0x06
    2992:	9f 81       	ldd	r25, Y+7	; 0x07
    2994:	fc 01       	movw	r30, r24
    2996:	83 81       	ldd	r24, Z+3	; 0x03
    2998:	88 23       	and	r24, r24
    299a:	09 f4       	brne	.+2      	; 0x299e <_Z19handleSerialBusMsgsv+0x580>
    299c:	41 c0       	rjmp	.+130    	; 0x2a20 <_Z19handleSerialBusMsgsv+0x602>
    299e:	80 e2       	ldi	r24, 0x20	; 32
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	80 93 07 47 	sts	0x4707, r24	; 0x804707 <_ZL9g_tempStr>
    29a6:	90 93 08 47 	sts	0x4708, r25	; 0x804708 <_ZL9g_tempStr+0x1>
    29aa:	8e 81       	ldd	r24, Y+6	; 0x06
    29ac:	9f 81       	ldd	r25, Y+7	; 0x07
    29ae:	03 96       	adiw	r24, 0x03	; 3
    29b0:	bc 01       	movw	r22, r24
    29b2:	87 e0       	ldi	r24, 0x07	; 7
    29b4:	97 e4       	ldi	r25, 0x47	; 71
    29b6:	0e 94 e2 4f 	call	0x9fc4	; 0x9fc4 <strcat>
    29ba:	8e 81       	ldd	r24, Y+6	; 0x06
    29bc:	9f 81       	ldd	r25, Y+7	; 0x07
    29be:	fc 01       	movw	r30, r24
    29c0:	87 89       	ldd	r24, Z+23	; 0x17
    29c2:	88 23       	and	r24, r24
    29c4:	d1 f0       	breq	.+52     	; 0x29fa <_Z19handleSerialBusMsgsv+0x5dc>
    29c6:	87 e0       	ldi	r24, 0x07	; 7
    29c8:	97 e4       	ldi	r25, 0x47	; 71
    29ca:	9c 01       	movw	r18, r24
    29cc:	f9 01       	movw	r30, r18
    29ce:	01 90       	ld	r0, Z+
    29d0:	00 20       	and	r0, r0
    29d2:	e9 f7       	brne	.-6      	; 0x29ce <_Z19handleSerialBusMsgsv+0x5b0>
    29d4:	cf 01       	movw	r24, r30
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	82 1b       	sub	r24, r18
    29da:	93 0b       	sbc	r25, r19
    29dc:	89 5f       	subi	r24, 0xF9	; 249
    29de:	98 4b       	sbci	r25, 0xB8	; 184
    29e0:	20 e2       	ldi	r18, 0x20	; 32
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	fc 01       	movw	r30, r24
    29e6:	20 83       	st	Z, r18
    29e8:	31 83       	std	Z+1, r19	; 0x01
    29ea:	8e 81       	ldd	r24, Y+6	; 0x06
    29ec:	9f 81       	ldd	r25, Y+7	; 0x07
    29ee:	47 96       	adiw	r24, 0x17	; 23
    29f0:	bc 01       	movw	r22, r24
    29f2:	87 e0       	ldi	r24, 0x07	; 7
    29f4:	97 e4       	ldi	r25, 0x47	; 71
    29f6:	0e 94 e2 4f 	call	0x9fc4	; 0x9fc4 <strcat>
    29fa:	87 e0       	ldi	r24, 0x07	; 7
    29fc:	97 e4       	ldi	r25, 0x47	; 71
    29fe:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <strlen>
    2a02:	45 97       	sbiw	r24, 0x15	; 21
    2a04:	68 f4       	brcc	.+26     	; 0x2a20 <_Z19handleSerialBusMsgsv+0x602>
    2a06:	67 e0       	ldi	r22, 0x07	; 7
    2a08:	77 e4       	ldi	r23, 0x47	; 71
    2a0a:	8d e5       	ldi	r24, 0x5D	; 93
    2a0c:	97 e4       	ldi	r25, 0x47	; 71
    2a0e:	0e 94 f8 4f 	call	0x9ff0	; 0x9ff0 <strcpy>
    2a12:	47 e0       	ldi	r20, 0x07	; 7
    2a14:	57 e4       	ldi	r21, 0x47	; 71
    2a16:	6a e0       	ldi	r22, 0x0A	; 10
    2a18:	82 e9       	ldi	r24, 0x92	; 146
    2a1a:	97 e4       	ldi	r25, 0x47	; 71
    2a1c:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2a20:	80 91 5d 47 	lds	r24, 0x475D	; 0x80475d <g_messages_text+0x15>
    2a24:	88 23       	and	r24, r24
    2a26:	01 f1       	breq	.+64     	; 0x2a68 <_Z19handleSerialBusMsgsv+0x64a>
    2a28:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	bc 01       	movw	r22, r24
    2a32:	8d e5       	ldi	r24, 0x5D	; 93
    2a34:	97 e4       	ldi	r25, 0x47	; 71
    2a36:	0e 94 1d 3c 	call	0x783a	; 0x783a <_Z26timeRequiredToSendStrAtWPMPcj>
    2a3a:	88 5a       	subi	r24, 0xA8	; 168
    2a3c:	9d 4f       	sbci	r25, 0xFD	; 253
    2a3e:	96 95       	lsr	r25
    2a40:	87 95       	ror	r24
    2a42:	96 95       	lsr	r25
    2a44:	87 95       	ror	r24
    2a46:	96 95       	lsr	r25
    2a48:	87 95       	ror	r24
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	a5 ec       	ldi	r26, 0xC5	; 197
    2a4e:	b0 e2       	ldi	r27, 0x20	; 32
    2a50:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <__umulhisi3>
    2a54:	92 95       	swap	r25
    2a56:	82 95       	swap	r24
    2a58:	8f 70       	andi	r24, 0x0F	; 15
    2a5a:	89 27       	eor	r24, r25
    2a5c:	9f 70       	andi	r25, 0x0F	; 15
    2a5e:	89 27       	eor	r24, r25
    2a60:	80 93 72 47 	sts	0x4772, r24	; 0x804772 <g_time_needed_for_ID>
    2a64:	90 93 73 47 	sts	0x4773, r25	; 0x804773 <g_time_needed_for_ID+0x1>
    2a68:	8d e5       	ldi	r24, 0x5D	; 93
    2a6a:	97 e4       	ldi	r25, 0x47	; 71
    2a6c:	89 2f       	mov	r24, r25
    2a6e:	8f 93       	push	r24
    2a70:	8d e5       	ldi	r24, 0x5D	; 93
    2a72:	97 e4       	ldi	r25, 0x47	; 71
    2a74:	8f 93       	push	r24
    2a76:	84 e6       	ldi	r24, 0x64	; 100
    2a78:	92 e4       	ldi	r25, 0x42	; 66
    2a7a:	89 2f       	mov	r24, r25
    2a7c:	8f 93       	push	r24
    2a7e:	84 e6       	ldi	r24, 0x64	; 100
    2a80:	92 e4       	ldi	r25, 0x42	; 66
    2a82:	8f 93       	push	r24
    2a84:	87 e0       	ldi	r24, 0x07	; 7
    2a86:	97 e4       	ldi	r25, 0x47	; 71
    2a88:	89 2f       	mov	r24, r25
    2a8a:	8f 93       	push	r24
    2a8c:	87 e0       	ldi	r24, 0x07	; 7
    2a8e:	97 e4       	ldi	r25, 0x47	; 71
    2a90:	8f 93       	push	r24
    2a92:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	87 e0       	ldi	r24, 0x07	; 7
    2aa4:	97 e4       	ldi	r25, 0x47	; 71
    2aa6:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2aaa:	15 c4       	rjmp	.+2090   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    2aac:	8e 81       	ldd	r24, Y+6	; 0x06
    2aae:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	83 81       	ldd	r24, Z+3	; 0x03
    2ab4:	83 35       	cpi	r24, 0x53	; 83
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <_Z19handleSerialBusMsgsv+0x69c>
    2ab8:	6f c0       	rjmp	.+222    	; 0x2b98 <_Z19handleSerialBusMsgsv+0x77a>
    2aba:	8e 81       	ldd	r24, Y+6	; 0x06
    2abc:	9f 81       	ldd	r25, Y+7	; 0x07
    2abe:	fc 01       	movw	r30, r24
    2ac0:	87 89       	ldd	r24, Z+23	; 0x17
    2ac2:	8d 8b       	std	Y+21, r24	; 0x15
    2ac4:	8d 89       	ldd	r24, Y+21	; 0x15
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <_Z19handleSerialBusMsgsv+0x6ae>
    2aca:	48 c0       	rjmp	.+144    	; 0x2b5c <_Z19handleSerialBusMsgsv+0x73e>
    2acc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ace:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad0:	47 96       	adiw	r24, 0x17	; 23
    2ad2:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	8e 8b       	std	Y+22, r24	; 0x16
    2adc:	8e 89       	ldd	r24, Y+22	; 0x16
    2ade:	8f 8b       	std	Y+23, r24	; 0x17
    2ae0:	85 e0       	ldi	r24, 0x05	; 5
    2ae2:	88 8f       	std	Y+24, r24	; 0x18
    2ae4:	84 e1       	ldi	r24, 0x14	; 20
    2ae6:	89 8f       	std	Y+25, r24	; 0x19
    2ae8:	9f 89       	ldd	r25, Y+23	; 0x17
    2aea:	89 8d       	ldd	r24, Y+25	; 0x19
    2aec:	89 17       	cp	r24, r25
    2aee:	40 f0       	brcs	.+16     	; 0x2b00 <_Z19handleSerialBusMsgsv+0x6e2>
    2af0:	9f 89       	ldd	r25, Y+23	; 0x17
    2af2:	88 8d       	ldd	r24, Y+24	; 0x18
    2af4:	98 17       	cp	r25, r24
    2af6:	10 f4       	brcc	.+4      	; 0x2afc <_Z19handleSerialBusMsgsv+0x6de>
    2af8:	88 8d       	ldd	r24, Y+24	; 0x18
    2afa:	03 c0       	rjmp	.+6      	; 0x2b02 <_Z19handleSerialBusMsgsv+0x6e4>
    2afc:	8f 89       	ldd	r24, Y+23	; 0x17
    2afe:	01 c0       	rjmp	.+2      	; 0x2b02 <_Z19handleSerialBusMsgsv+0x6e4>
    2b00:	89 8d       	ldd	r24, Y+25	; 0x19
    2b02:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    2b06:	4b e0       	ldi	r20, 0x0B	; 11
    2b08:	50 e4       	ldi	r21, 0x40	; 64
    2b0a:	68 e2       	ldi	r22, 0x28	; 40
    2b0c:	82 e9       	ldi	r24, 0x92	; 146
    2b0e:	97 e4       	ldi	r25, 0x47	; 71
    2b10:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2b14:	80 91 5d 47 	lds	r24, 0x475D	; 0x80475d <g_messages_text+0x15>
    2b18:	88 23       	and	r24, r24
    2b1a:	01 f1       	breq	.+64     	; 0x2b5c <_Z19handleSerialBusMsgsv+0x73e>
    2b1c:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2b20:	88 2f       	mov	r24, r24
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	bc 01       	movw	r22, r24
    2b26:	8d e5       	ldi	r24, 0x5D	; 93
    2b28:	97 e4       	ldi	r25, 0x47	; 71
    2b2a:	0e 94 1d 3c 	call	0x783a	; 0x783a <_Z26timeRequiredToSendStrAtWPMPcj>
    2b2e:	88 5a       	subi	r24, 0xA8	; 168
    2b30:	9d 4f       	sbci	r25, 0xFD	; 253
    2b32:	96 95       	lsr	r25
    2b34:	87 95       	ror	r24
    2b36:	96 95       	lsr	r25
    2b38:	87 95       	ror	r24
    2b3a:	96 95       	lsr	r25
    2b3c:	87 95       	ror	r24
    2b3e:	9c 01       	movw	r18, r24
    2b40:	a5 ec       	ldi	r26, 0xC5	; 197
    2b42:	b0 e2       	ldi	r27, 0x20	; 32
    2b44:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <__umulhisi3>
    2b48:	92 95       	swap	r25
    2b4a:	82 95       	swap	r24
    2b4c:	8f 70       	andi	r24, 0x0F	; 15
    2b4e:	89 27       	eor	r24, r25
    2b50:	9f 70       	andi	r25, 0x0F	; 15
    2b52:	89 27       	eor	r24, r25
    2b54:	80 93 72 47 	sts	0x4772, r24	; 0x804772 <g_time_needed_for_ID>
    2b58:	90 93 73 47 	sts	0x4773, r25	; 0x804773 <g_time_needed_for_ID+0x1>
    2b5c:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	29 2f       	mov	r18, r25
    2b66:	2f 93       	push	r18
    2b68:	8f 93       	push	r24
    2b6a:	8b e6       	ldi	r24, 0x6B	; 107
    2b6c:	92 e4       	ldi	r25, 0x42	; 66
    2b6e:	89 2f       	mov	r24, r25
    2b70:	8f 93       	push	r24
    2b72:	8b e6       	ldi	r24, 0x6B	; 107
    2b74:	92 e4       	ldi	r25, 0x42	; 66
    2b76:	8f 93       	push	r24
    2b78:	87 e0       	ldi	r24, 0x07	; 7
    2b7a:	97 e4       	ldi	r25, 0x47	; 71
    2b7c:	89 2f       	mov	r24, r25
    2b7e:	8f 93       	push	r24
    2b80:	87 e0       	ldi	r24, 0x07	; 7
    2b82:	97 e4       	ldi	r25, 0x47	; 71
    2b84:	8f 93       	push	r24
    2b86:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	09 c0       	rjmp	.+18     	; 0x2baa <_Z19handleSerialBusMsgsv+0x78c>
    2b98:	85 e0       	ldi	r24, 0x05	; 5
    2b9a:	ef e5       	ldi	r30, 0x5F	; 95
    2b9c:	f2 e4       	ldi	r31, 0x42	; 66
    2b9e:	a7 e0       	ldi	r26, 0x07	; 7
    2ba0:	b7 e4       	ldi	r27, 0x47	; 71
    2ba2:	01 90       	ld	r0, Z+
    2ba4:	0d 92       	st	X+, r0
    2ba6:	8a 95       	dec	r24
    2ba8:	e1 f7       	brne	.-8      	; 0x2ba2 <_Z19handleSerialBusMsgsv+0x784>
    2baa:	87 e0       	ldi	r24, 0x07	; 7
    2bac:	97 e4       	ldi	r25, 0x47	; 71
    2bae:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2bb2:	91 c3       	rjmp	.+1826   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    2bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb8:	fc 01       	movw	r30, r24
    2bba:	83 81       	ldd	r24, Z+3	; 0x03
    2bbc:	88 23       	and	r24, r24
    2bbe:	51 f1       	breq	.+84     	; 0x2c14 <_Z19handleSerialBusMsgsv+0x7f6>
    2bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc4:	03 96       	adiw	r24, 0x03	; 3
    2bc6:	48 e0       	ldi	r20, 0x08	; 8
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	bc 01       	movw	r22, r24
    2bcc:	87 e0       	ldi	r24, 0x07	; 7
    2bce:	97 e4       	ldi	r25, 0x47	; 71
    2bd0:	0e 94 08 50 	call	0xa010	; 0xa010 <strncpy>
    2bd4:	10 92 0f 47 	sts	0x470F, r1	; 0x80470f <_ZL9g_tempStr+0x8>
    2bd8:	87 e0       	ldi	r24, 0x07	; 7
    2bda:	97 e4       	ldi	r25, 0x47	; 71
    2bdc:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <_Z11only_digitsPc>
    2be0:	88 23       	and	r24, r24
    2be2:	41 f0       	breq	.+16     	; 0x2bf4 <_Z19handleSerialBusMsgsv+0x7d6>
    2be4:	87 e0       	ldi	r24, 0x07	; 7
    2be6:	97 e4       	ldi	r25, 0x47	; 71
    2be8:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <strlen>
    2bec:	04 97       	sbiw	r24, 0x04	; 4
    2bee:	10 f0       	brcs	.+4      	; 0x2bf4 <_Z19handleSerialBusMsgsv+0x7d6>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	01 c0       	rjmp	.+2      	; 0x2bf6 <_Z19handleSerialBusMsgsv+0x7d8>
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	88 23       	and	r24, r24
    2bf8:	69 f0       	breq	.+26     	; 0x2c14 <_Z19handleSerialBusMsgsv+0x7f6>
    2bfa:	67 e0       	ldi	r22, 0x07	; 7
    2bfc:	77 e4       	ldi	r23, 0x47	; 71
    2bfe:	84 e9       	ldi	r24, 0x94	; 148
    2c00:	97 e4       	ldi	r25, 0x47	; 71
    2c02:	0e 94 f8 4f 	call	0x9ff0	; 0x9ff0 <strcpy>
    2c06:	44 e9       	ldi	r20, 0x94	; 148
    2c08:	57 e4       	ldi	r21, 0x47	; 71
    2c0a:	6f e1       	ldi	r22, 0x1F	; 31
    2c0c:	82 e9       	ldi	r24, 0x92	; 146
    2c0e:	97 e4       	ldi	r25, 0x47	; 71
    2c10:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2c14:	84 e9       	ldi	r24, 0x94	; 148
    2c16:	97 e4       	ldi	r25, 0x47	; 71
    2c18:	89 2f       	mov	r24, r25
    2c1a:	8f 93       	push	r24
    2c1c:	84 e9       	ldi	r24, 0x94	; 148
    2c1e:	97 e4       	ldi	r25, 0x47	; 71
    2c20:	8f 93       	push	r24
    2c22:	8d e7       	ldi	r24, 0x7D	; 125
    2c24:	92 e4       	ldi	r25, 0x42	; 66
    2c26:	89 2f       	mov	r24, r25
    2c28:	8f 93       	push	r24
    2c2a:	8d e7       	ldi	r24, 0x7D	; 125
    2c2c:	92 e4       	ldi	r25, 0x42	; 66
    2c2e:	8f 93       	push	r24
    2c30:	87 e0       	ldi	r24, 0x07	; 7
    2c32:	97 e4       	ldi	r25, 0x47	; 71
    2c34:	89 2f       	mov	r24, r25
    2c36:	8f 93       	push	r24
    2c38:	87 e0       	ldi	r24, 0x07	; 7
    2c3a:	97 e4       	ldi	r25, 0x47	; 71
    2c3c:	8f 93       	push	r24
    2c3e:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	87 e0       	ldi	r24, 0x07	; 7
    2c50:	97 e4       	ldi	r25, 0x47	; 71
    2c52:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2c56:	3f c3       	rjmp	.+1662   	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    2c58:	1d 82       	std	Y+5, r1	; 0x05
    2c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5e:	fc 01       	movw	r30, r24
    2c60:	83 81       	ldd	r24, Z+3	; 0x03
    2c62:	88 23       	and	r24, r24
    2c64:	39 f0       	breq	.+14     	; 0x2c74 <_Z19handleSerialBusMsgsv+0x856>
    2c66:	8e 81       	ldd	r24, Y+6	; 0x06
    2c68:	9f 81       	ldd	r25, Y+7	; 0x07
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	83 81       	ldd	r24, Z+3	; 0x03
    2c6e:	84 35       	cpi	r24, 0x54	; 84
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <_Z19handleSerialBusMsgsv+0x856>
    2c72:	9b c1       	rjmp	.+822    	; 0x2faa <_Z19handleSerialBusMsgsv+0xb8c>
    2c74:	8e 81       	ldd	r24, Y+6	; 0x06
    2c76:	9f 81       	ldd	r25, Y+7	; 0x07
    2c78:	fc 01       	movw	r30, r24
    2c7a:	87 89       	ldd	r24, Z+23	; 0x17
    2c7c:	88 23       	and	r24, r24
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <_Z19handleSerialBusMsgsv+0x864>
    2c80:	76 c0       	rjmp	.+236    	; 0x2d6e <_Z19handleSerialBusMsgsv+0x950>
    2c82:	8e 81       	ldd	r24, Y+6	; 0x06
    2c84:	9f 81       	ldd	r25, Y+7	; 0x07
    2c86:	47 96       	adiw	r24, 0x17	; 23
    2c88:	4c e0       	ldi	r20, 0x0C	; 12
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	87 e0       	ldi	r24, 0x07	; 7
    2c90:	97 e4       	ldi	r25, 0x47	; 71
    2c92:	0e 94 08 50 	call	0xa010	; 0xa010 <strncpy>
    2c96:	10 92 13 47 	sts	0x4713, r1	; 0x804713 <_ZL9g_tempStr+0xc>
    2c9a:	80 91 93 47 	lds	r24, 0x4793	; 0x804793 <g_utc_offset>
    2c9e:	81 95       	neg	r24
    2ca0:	48 2f       	mov	r20, r24
    2ca2:	6c e9       	ldi	r22, 0x9C	; 156
    2ca4:	77 e4       	ldi	r23, 0x47	; 71
    2ca6:	87 e0       	ldi	r24, 0x07	; 7
    2ca8:	97 e4       	ldi	r25, 0x47	; 71
    2caa:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <_Z18validateTimeStringPcPma>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	8a a3       	std	Y+34, r24	; 0x22
    2cb4:	9b a3       	std	Y+35, r25	; 0x23
    2cb6:	ac a3       	std	Y+36, r26	; 0x24
    2cb8:	bd a3       	std	Y+37, r27	; 0x25
    2cba:	8a a1       	ldd	r24, Y+34	; 0x22
    2cbc:	9b a1       	ldd	r25, Y+35	; 0x23
    2cbe:	ac a1       	ldd	r26, Y+36	; 0x24
    2cc0:	bd a1       	ldd	r27, Y+37	; 0x25
    2cc2:	89 2b       	or	r24, r25
    2cc4:	8a 2b       	or	r24, r26
    2cc6:	8b 2b       	or	r24, r27
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <_Z19handleSerialBusMsgsv+0x8ae>
    2cca:	6c c1       	rjmp	.+728    	; 0x2fa4 <_Z19handleSerialBusMsgsv+0xb86>
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	87 e0       	ldi	r24, 0x07	; 7
    2cd0:	97 e4       	ldi	r25, 0x47	; 71
    2cd2:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <ds3231_set_date_time_arducon>
    2cd6:	8e a3       	std	Y+38, r24	; 0x26
    2cd8:	8e a1       	ldd	r24, Y+38	; 0x26
    2cda:	88 23       	and	r24, r24
    2cdc:	51 f0       	breq	.+20     	; 0x2cf2 <_Z19handleSerialBusMsgsv+0x8d4>
    2cde:	88 e2       	ldi	r24, 0x28	; 40
    2ce0:	e6 ee       	ldi	r30, 0xE6	; 230
    2ce2:	f1 e4       	ldi	r31, 0x41	; 65
    2ce4:	a7 e0       	ldi	r26, 0x07	; 7
    2ce6:	b7 e4       	ldi	r27, 0x47	; 71
    2ce8:	01 90       	ld	r0, Z+
    2cea:	0d 92       	st	X+, r0
    2cec:	8a 95       	dec	r24
    2cee:	e1 f7       	brne	.-8      	; 0x2ce8 <_Z19handleSerialBusMsgsv+0x8ca>
    2cf0:	59 c1       	rjmp	.+690    	; 0x2fa4 <_Z19handleSerialBusMsgsv+0xb86>
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	80 93 9c 47 	sts	0x479C, r24	; 0x80479c <g_current_epoch>
    2d02:	90 93 9d 47 	sts	0x479D, r25	; 0x80479d <g_current_epoch+0x1>
    2d06:	a0 93 9e 47 	sts	0x479E, r26	; 0x80479e <g_current_epoch+0x2>
    2d0a:	b0 93 9f 47 	sts	0x479F, r27	; 0x80479f <g_current_epoch+0x3>
    2d0e:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    2d12:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    2d16:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    2d1a:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    2d1e:	ae 01       	movw	r20, r28
    2d20:	4b 59       	subi	r20, 0x9B	; 155
    2d22:	5f 4f       	sbci	r21, 0xFF	; 255
    2d24:	22 e3       	ldi	r18, 0x32	; 50
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	bc 01       	movw	r22, r24
    2d2a:	cd 01       	movw	r24, r26
    2d2c:	0e 94 e5 31 	call	0x63ca	; 0x63ca <convertEpochToTimeString>
    2d30:	29 2f       	mov	r18, r25
    2d32:	2f 93       	push	r18
    2d34:	8f 93       	push	r24
    2d36:	85 e8       	ldi	r24, 0x85	; 133
    2d38:	92 e4       	ldi	r25, 0x42	; 66
    2d3a:	89 2f       	mov	r24, r25
    2d3c:	8f 93       	push	r24
    2d3e:	85 e8       	ldi	r24, 0x85	; 133
    2d40:	92 e4       	ldi	r25, 0x42	; 66
    2d42:	8f 93       	push	r24
    2d44:	87 e0       	ldi	r24, 0x07	; 7
    2d46:	97 e4       	ldi	r25, 0x47	; 71
    2d48:	89 2f       	mov	r24, r25
    2d4a:	8f 93       	push	r24
    2d4c:	87 e0       	ldi	r24, 0x07	; 7
    2d4e:	97 e4       	ldi	r25, 0x47	; 71
    2d50:	8f 93       	push	r24
    2d52:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d6c:	1b c1       	rjmp	.+566    	; 0x2fa4 <_Z19handleSerialBusMsgsv+0xb86>
    2d6e:	ce 01       	movw	r24, r28
    2d70:	84 5a       	subi	r24, 0xA4	; 164
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    2d74:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	80 93 9c 47 	sts	0x479C, r24	; 0x80479c <g_current_epoch>
    2d80:	90 93 9d 47 	sts	0x479D, r25	; 0x80479d <g_current_epoch+0x1>
    2d84:	a0 93 9e 47 	sts	0x479E, r26	; 0x80479e <g_current_epoch+0x2>
    2d88:	b0 93 9f 47 	sts	0x479F, r27	; 0x80479f <g_current_epoch+0x3>
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	84 5a       	subi	r24, 0xA4	; 164
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	fc 01       	movw	r30, r24
    2d94:	80 81       	ld	r24, Z
    2d96:	88 23       	and	r24, r24
    2d98:	51 f0       	breq	.+20     	; 0x2dae <_Z19handleSerialBusMsgsv+0x990>
    2d9a:	88 e2       	ldi	r24, 0x28	; 40
    2d9c:	e6 ee       	ldi	r30, 0xE6	; 230
    2d9e:	f1 e4       	ldi	r31, 0x41	; 65
    2da0:	a7 e0       	ldi	r26, 0x07	; 7
    2da2:	b7 e4       	ldi	r27, 0x47	; 71
    2da4:	01 90       	ld	r0, Z+
    2da6:	0d 92       	st	X+, r0
    2da8:	8a 95       	dec	r24
    2daa:	e1 f7       	brne	.-8      	; 0x2da4 <_Z19handleSerialBusMsgsv+0x986>
    2dac:	fb c0       	rjmp	.+502    	; 0x2fa4 <_Z19handleSerialBusMsgsv+0xb86>
    2dae:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    2db2:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    2db6:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    2dba:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    2dbe:	ae 01       	movw	r20, r28
    2dc0:	4b 59       	subi	r20, 0x9B	; 155
    2dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc4:	22 e3       	ldi	r18, 0x32	; 50
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 e5 31 	call	0x63ca	; 0x63ca <convertEpochToTimeString>
    2dd0:	29 2f       	mov	r18, r25
    2dd2:	2f 93       	push	r18
    2dd4:	8f 93       	push	r24
    2dd6:	8f e8       	ldi	r24, 0x8F	; 143
    2dd8:	92 e4       	ldi	r25, 0x42	; 66
    2dda:	89 2f       	mov	r24, r25
    2ddc:	8f 93       	push	r24
    2dde:	8f e8       	ldi	r24, 0x8F	; 143
    2de0:	92 e4       	ldi	r25, 0x42	; 66
    2de2:	8f 93       	push	r24
    2de4:	87 e0       	ldi	r24, 0x07	; 7
    2de6:	97 e4       	ldi	r25, 0x47	; 71
    2de8:	89 2f       	mov	r24, r25
    2dea:	8f 93       	push	r24
    2dec:	87 e0       	ldi	r24, 0x07	; 7
    2dee:	97 e4       	ldi	r25, 0x47	; 71
    2df0:	8f 93       	push	r24
    2df2:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	87 e0       	ldi	r24, 0x07	; 7
    2e04:	97 e4       	ldi	r25, 0x47	; 71
    2e06:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2e0a:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    2e0e:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    2e12:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    2e16:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    2e1a:	ae 01       	movw	r20, r28
    2e1c:	4b 59       	subi	r20, 0x9B	; 155
    2e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e20:	22 e3       	ldi	r18, 0x32	; 50
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 e5 31 	call	0x63ca	; 0x63ca <convertEpochToTimeString>
    2e2c:	29 2f       	mov	r18, r25
    2e2e:	2f 93       	push	r18
    2e30:	8f 93       	push	r24
    2e32:	8b e9       	ldi	r24, 0x9B	; 155
    2e34:	92 e4       	ldi	r25, 0x42	; 66
    2e36:	89 2f       	mov	r24, r25
    2e38:	8f 93       	push	r24
    2e3a:	8b e9       	ldi	r24, 0x9B	; 155
    2e3c:	92 e4       	ldi	r25, 0x42	; 66
    2e3e:	8f 93       	push	r24
    2e40:	87 e0       	ldi	r24, 0x07	; 7
    2e42:	97 e4       	ldi	r25, 0x47	; 71
    2e44:	89 2f       	mov	r24, r25
    2e46:	8f 93       	push	r24
    2e48:	87 e0       	ldi	r24, 0x07	; 7
    2e4a:	97 e4       	ldi	r25, 0x47	; 71
    2e4c:	8f 93       	push	r24
    2e4e:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	87 e0       	ldi	r24, 0x07	; 7
    2e60:	97 e4       	ldi	r25, 0x47	; 71
    2e62:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2e66:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <g_event_finish_epoch>
    2e6a:	90 91 7b 47 	lds	r25, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    2e6e:	a0 91 7c 47 	lds	r26, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    2e72:	b0 91 7d 47 	lds	r27, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    2e76:	ae 01       	movw	r20, r28
    2e78:	4b 59       	subi	r20, 0x9B	; 155
    2e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e7c:	22 e3       	ldi	r18, 0x32	; 50
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 e5 31 	call	0x63ca	; 0x63ca <convertEpochToTimeString>
    2e88:	29 2f       	mov	r18, r25
    2e8a:	2f 93       	push	r18
    2e8c:	8f 93       	push	r24
    2e8e:	87 ea       	ldi	r24, 0xA7	; 167
    2e90:	92 e4       	ldi	r25, 0x42	; 66
    2e92:	89 2f       	mov	r24, r25
    2e94:	8f 93       	push	r24
    2e96:	87 ea       	ldi	r24, 0xA7	; 167
    2e98:	92 e4       	ldi	r25, 0x42	; 66
    2e9a:	8f 93       	push	r24
    2e9c:	87 e0       	ldi	r24, 0x07	; 7
    2e9e:	97 e4       	ldi	r25, 0x47	; 71
    2ea0:	89 2f       	mov	r24, r25
    2ea2:	8f 93       	push	r24
    2ea4:	87 e0       	ldi	r24, 0x07	; 7
    2ea6:	97 e4       	ldi	r25, 0x47	; 71
    2ea8:	8f 93       	push	r24
    2eaa:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	87 e0       	ldi	r24, 0x07	; 7
    2ebc:	97 e4       	ldi	r25, 0x47	; 71
    2ebe:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    2ec2:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_Z23clockConfigurationCheckv>
    2ec6:	8f a3       	std	Y+39, r24	; 0x27
    2ec8:	8f a1       	ldd	r24, Y+39	; 0x27
    2eca:	81 30       	cpi	r24, 0x01	; 1
    2ecc:	31 f0       	breq	.+12     	; 0x2eda <_Z19handleSerialBusMsgsv+0xabc>
    2ece:	8f a1       	ldd	r24, Y+39	; 0x27
    2ed0:	85 30       	cpi	r24, 0x05	; 5
    2ed2:	19 f0       	breq	.+6      	; 0x2eda <_Z19handleSerialBusMsgsv+0xabc>
    2ed4:	0e 94 62 29 	call	0x52c4	; 0x52c4 <_Z18reportConfigErrorsv>
    2ed8:	65 c0       	rjmp	.+202    	; 0x2fa4 <_Z19handleSerialBusMsgsv+0xb86>
    2eda:	20 91 76 47 	lds	r18, 0x4776	; 0x804776 <g_event_start_epoch>
    2ede:	30 91 77 47 	lds	r19, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    2ee2:	40 91 78 47 	lds	r20, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    2ee6:	50 91 79 47 	lds	r21, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    2eea:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    2eee:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    2ef2:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    2ef6:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    2efa:	0f 2e       	mov	r0, r31
    2efc:	f3 eb       	ldi	r31, 0xB3	; 179
    2efe:	ef 2e       	mov	r14, r31
    2f00:	f2 e4       	ldi	r31, 0x42	; 66
    2f02:	ff 2e       	mov	r15, r31
    2f04:	f0 2d       	mov	r31, r0
    2f06:	00 ec       	ldi	r16, 0xC0	; 192
    2f08:	12 e4       	ldi	r17, 0x42	; 66
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <_Z14reportTimeTillmmPKcS0_>
    2f12:	20 91 7a 47 	lds	r18, 0x477A	; 0x80477a <g_event_finish_epoch>
    2f16:	30 91 7b 47 	lds	r19, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    2f1a:	40 91 7c 47 	lds	r20, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    2f1e:	50 91 7d 47 	lds	r21, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    2f22:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    2f26:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    2f2a:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    2f2e:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    2f32:	e1 2c       	mov	r14, r1
    2f34:	f1 2c       	mov	r15, r1
    2f36:	0c ec       	ldi	r16, 0xCC	; 204
    2f38:	12 e4       	ldi	r17, 0x42	; 66
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <_Z14reportTimeTillmmPKcS0_>
    2f42:	20 91 76 47 	lds	r18, 0x4776	; 0x804776 <g_event_start_epoch>
    2f46:	30 91 77 47 	lds	r19, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    2f4a:	40 91 78 47 	lds	r20, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    2f4e:	50 91 79 47 	lds	r21, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    2f52:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    2f56:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    2f5a:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    2f5e:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	28 17       	cp	r18, r24
    2f66:	39 07       	cpc	r19, r25
    2f68:	4a 07       	cpc	r20, r26
    2f6a:	5b 07       	cpc	r21, r27
    2f6c:	08 f0       	brcs	.+2      	; 0x2f70 <_Z19handleSerialBusMsgsv+0xb52>
    2f6e:	60 e0       	ldi	r22, 0x00	; 0
    2f70:	66 23       	and	r22, r22
    2f72:	c1 f0       	breq	.+48     	; 0x2fa4 <_Z19handleSerialBusMsgsv+0xb86>
    2f74:	20 91 7a 47 	lds	r18, 0x477A	; 0x80477a <g_event_finish_epoch>
    2f78:	30 91 7b 47 	lds	r19, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    2f7c:	40 91 7c 47 	lds	r20, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    2f80:	50 91 7d 47 	lds	r21, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    2f84:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    2f88:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    2f8c:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    2f90:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    2f94:	e1 2c       	mov	r14, r1
    2f96:	f1 2c       	mov	r15, r1
    2f98:	04 ed       	ldi	r16, 0xD4	; 212
    2f9a:	12 e4       	ldi	r17, 0x42	; 66
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <_Z14reportTimeTillmmPKcS0_>
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
    2fa8:	70 c1       	rjmp	.+736    	; 0x328a <_Z19handleSerialBusMsgsv+0xe6c>
    2faa:	8e 81       	ldd	r24, Y+6	; 0x06
    2fac:	9f 81       	ldd	r25, Y+7	; 0x07
    2fae:	fc 01       	movw	r30, r24
    2fb0:	83 81       	ldd	r24, Z+3	; 0x03
    2fb2:	83 35       	cpi	r24, 0x53	; 83
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <_Z19handleSerialBusMsgsv+0xb9a>
    2fb6:	da c0       	rjmp	.+436    	; 0x316c <_Z19handleSerialBusMsgsv+0xd4e>
    2fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fba:	9f 81       	ldd	r25, Y+7	; 0x07
    2fbc:	47 96       	adiw	r24, 0x17	; 23
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	87 e0       	ldi	r24, 0x07	; 7
    2fc2:	97 e4       	ldi	r25, 0x47	; 71
    2fc4:	0e 94 f8 4f 	call	0x9ff0	; 0x9ff0 <strcpy>
    2fc8:	80 91 93 47 	lds	r24, 0x4793	; 0x804793 <g_utc_offset>
    2fcc:	81 95       	neg	r24
    2fce:	48 2f       	mov	r20, r24
    2fd0:	66 e7       	ldi	r22, 0x76	; 118
    2fd2:	77 e4       	ldi	r23, 0x47	; 71
    2fd4:	87 e0       	ldi	r24, 0x07	; 7
    2fd6:	97 e4       	ldi	r25, 0x47	; 71
    2fd8:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <_Z18validateTimeStringPcPma>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	8a 8f       	std	Y+26, r24	; 0x1a
    2fe2:	9b 8f       	std	Y+27, r25	; 0x1b
    2fe4:	ac 8f       	std	Y+28, r26	; 0x1c
    2fe6:	bd 8f       	std	Y+29, r27	; 0x1d
    2fe8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2fec:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2fee:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2ff0:	89 2b       	or	r24, r25
    2ff2:	8a 2b       	or	r24, r26
    2ff4:	8b 2b       	or	r24, r27
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <_Z19handleSerialBusMsgsv+0xbdc>
    2ff8:	8c c0       	rjmp	.+280    	; 0x3112 <_Z19handleSerialBusMsgsv+0xcf4>
    2ffa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ffc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ffe:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3000:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3002:	80 93 76 47 	sts	0x4776, r24	; 0x804776 <g_event_start_epoch>
    3006:	90 93 77 47 	sts	0x4777, r25	; 0x804777 <g_event_start_epoch+0x1>
    300a:	a0 93 78 47 	sts	0x4778, r26	; 0x804778 <g_event_start_epoch+0x2>
    300e:	b0 93 79 47 	sts	0x4779, r27	; 0x804779 <g_event_start_epoch+0x3>
    3012:	46 e7       	ldi	r20, 0x76	; 118
    3014:	57 e4       	ldi	r21, 0x47	; 71
    3016:	62 e0       	ldi	r22, 0x02	; 2
    3018:	82 e9       	ldi	r24, 0x92	; 146
    301a:	97 e4       	ldi	r25, 0x47	; 71
    301c:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    3020:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <g_event_finish_epoch>
    3024:	90 91 7b 47 	lds	r25, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    3028:	a0 91 7c 47 	lds	r26, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    302c:	b0 91 7d 47 	lds	r27, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    3030:	9e 01       	movw	r18, r28
    3032:	23 5a       	subi	r18, 0xA3	; 163
    3034:	3f 4f       	sbci	r19, 0xFF	; 255
    3036:	f9 01       	movw	r30, r18
    3038:	80 83       	st	Z, r24
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	a2 83       	std	Z+2, r26	; 0x02
    303e:	b3 83       	std	Z+3, r27	; 0x03
    3040:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    3044:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    3048:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    304c:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    3050:	80 58       	subi	r24, 0x80	; 128
    3052:	9e 4a       	sbci	r25, 0xAE	; 174
    3054:	ae 4f       	sbci	r26, 0xFE	; 254
    3056:	bf 4f       	sbci	r27, 0xFF	; 255
    3058:	9e 01       	movw	r18, r28
    305a:	2f 59       	subi	r18, 0x9F	; 159
    305c:	3f 4f       	sbci	r19, 0xFF	; 255
    305e:	f9 01       	movw	r30, r18
    3060:	80 83       	st	Z, r24
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	a2 83       	std	Z+2, r26	; 0x02
    3066:	b3 83       	std	Z+3, r27	; 0x03
    3068:	ce 01       	movw	r24, r28
    306a:	83 5a       	subi	r24, 0xA3	; 163
    306c:	9f 4f       	sbci	r25, 0xFF	; 255
    306e:	fc 01       	movw	r30, r24
    3070:	20 81       	ld	r18, Z
    3072:	31 81       	ldd	r19, Z+1	; 0x01
    3074:	42 81       	ldd	r20, Z+2	; 0x02
    3076:	53 81       	ldd	r21, Z+3	; 0x03
    3078:	ce 01       	movw	r24, r28
    307a:	8f 59       	subi	r24, 0x9F	; 159
    307c:	9f 4f       	sbci	r25, 0xFF	; 255
    307e:	fc 01       	movw	r30, r24
    3080:	80 81       	ld	r24, Z
    3082:	91 81       	ldd	r25, Z+1	; 0x01
    3084:	a2 81       	ldd	r26, Z+2	; 0x02
    3086:	b3 81       	ldd	r27, Z+3	; 0x03
    3088:	28 17       	cp	r18, r24
    308a:	39 07       	cpc	r19, r25
    308c:	4a 07       	cpc	r20, r26
    308e:	5b 07       	cpc	r21, r27
    3090:	48 f4       	brcc	.+18     	; 0x30a4 <_Z19handleSerialBusMsgsv+0xc86>
    3092:	ce 01       	movw	r24, r28
    3094:	8f 59       	subi	r24, 0x9F	; 159
    3096:	9f 4f       	sbci	r25, 0xFF	; 255
    3098:	fc 01       	movw	r30, r24
    309a:	80 81       	ld	r24, Z
    309c:	91 81       	ldd	r25, Z+1	; 0x01
    309e:	a2 81       	ldd	r26, Z+2	; 0x02
    30a0:	b3 81       	ldd	r27, Z+3	; 0x03
    30a2:	08 c0       	rjmp	.+16     	; 0x30b4 <_Z19handleSerialBusMsgsv+0xc96>
    30a4:	ce 01       	movw	r24, r28
    30a6:	83 5a       	subi	r24, 0xA3	; 163
    30a8:	9f 4f       	sbci	r25, 0xFF	; 255
    30aa:	fc 01       	movw	r30, r24
    30ac:	80 81       	ld	r24, Z
    30ae:	91 81       	ldd	r25, Z+1	; 0x01
    30b0:	a2 81       	ldd	r26, Z+2	; 0x02
    30b2:	b3 81       	ldd	r27, Z+3	; 0x03
    30b4:	80 93 7a 47 	sts	0x477A, r24	; 0x80477a <g_event_finish_epoch>
    30b8:	90 93 7b 47 	sts	0x477B, r25	; 0x80477b <g_event_finish_epoch+0x1>
    30bc:	a0 93 7c 47 	sts	0x477C, r26	; 0x80477c <g_event_finish_epoch+0x2>
    30c0:	b0 93 7d 47 	sts	0x477D, r27	; 0x80477d <g_event_finish_epoch+0x3>
    30c4:	4a e7       	ldi	r20, 0x7A	; 122
    30c6:	57 e4       	ldi	r21, 0x47	; 71
    30c8:	66 e0       	ldi	r22, 0x06	; 6
    30ca:	82 e9       	ldi	r24, 0x92	; 146
    30cc:	97 e4       	ldi	r25, 0x47	; 71
    30ce:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    30dc:	20 91 76 47 	lds	r18, 0x4776	; 0x804776 <g_event_start_epoch>
    30e0:	30 91 77 47 	lds	r19, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    30e4:	40 91 78 47 	lds	r20, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    30e8:	50 91 79 47 	lds	r21, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    30ec:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    30f0:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    30f4:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    30f8:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    30fc:	61 e0       	ldi	r22, 0x01	; 1
    30fe:	82 17       	cp	r24, r18
    3100:	93 07       	cpc	r25, r19
    3102:	a4 07       	cpc	r26, r20
    3104:	b5 07       	cpc	r27, r21
    3106:	08 f0       	brcs	.+2      	; 0x310a <_Z19handleSerialBusMsgsv+0xcec>
    3108:	60 e0       	ldi	r22, 0x00	; 0
    310a:	66 23       	and	r22, r22
    310c:	11 f0       	breq	.+4      	; 0x3112 <_Z19handleSerialBusMsgsv+0xcf4>
    310e:	0e 94 97 23 	call	0x472e	; 0x472e <_Z18startEventUsingRTCv>
    3112:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    3116:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    311a:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    311e:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    3122:	ae 01       	movw	r20, r28
    3124:	4b 59       	subi	r20, 0x9B	; 155
    3126:	5f 4f       	sbci	r21, 0xFF	; 255
    3128:	22 e3       	ldi	r18, 0x32	; 50
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	bc 01       	movw	r22, r24
    312e:	cd 01       	movw	r24, r26
    3130:	0e 94 e5 31 	call	0x63ca	; 0x63ca <convertEpochToTimeString>
    3134:	29 2f       	mov	r18, r25
    3136:	2f 93       	push	r18
    3138:	8f 93       	push	r24
    313a:	85 ee       	ldi	r24, 0xE5	; 229
    313c:	92 e4       	ldi	r25, 0x42	; 66
    313e:	89 2f       	mov	r24, r25
    3140:	8f 93       	push	r24
    3142:	85 ee       	ldi	r24, 0xE5	; 229
    3144:	92 e4       	ldi	r25, 0x42	; 66
    3146:	8f 93       	push	r24
    3148:	87 e0       	ldi	r24, 0x07	; 7
    314a:	97 e4       	ldi	r25, 0x47	; 71
    314c:	89 2f       	mov	r24, r25
    314e:	8f 93       	push	r24
    3150:	87 e0       	ldi	r24, 0x07	; 7
    3152:	97 e4       	ldi	r25, 0x47	; 71
    3154:	8f 93       	push	r24
    3156:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	8d 83       	std	Y+5, r24	; 0x05
    316a:	8f c0       	rjmp	.+286    	; 0x328a <_Z19handleSerialBusMsgsv+0xe6c>
    316c:	8e 81       	ldd	r24, Y+6	; 0x06
    316e:	9f 81       	ldd	r25, Y+7	; 0x07
    3170:	fc 01       	movw	r30, r24
    3172:	83 81       	ldd	r24, Z+3	; 0x03
    3174:	86 34       	cpi	r24, 0x46	; 70
    3176:	09 f0       	breq	.+2      	; 0x317a <_Z19handleSerialBusMsgsv+0xd5c>
    3178:	80 c0       	rjmp	.+256    	; 0x327a <_Z19handleSerialBusMsgsv+0xe5c>
    317a:	8e 81       	ldd	r24, Y+6	; 0x06
    317c:	9f 81       	ldd	r25, Y+7	; 0x07
    317e:	47 96       	adiw	r24, 0x17	; 23
    3180:	bc 01       	movw	r22, r24
    3182:	87 e0       	ldi	r24, 0x07	; 7
    3184:	97 e4       	ldi	r25, 0x47	; 71
    3186:	0e 94 f8 4f 	call	0x9ff0	; 0x9ff0 <strcpy>
    318a:	80 91 93 47 	lds	r24, 0x4793	; 0x804793 <g_utc_offset>
    318e:	81 95       	neg	r24
    3190:	48 2f       	mov	r20, r24
    3192:	6a e7       	ldi	r22, 0x7A	; 122
    3194:	77 e4       	ldi	r23, 0x47	; 71
    3196:	87 e0       	ldi	r24, 0x07	; 7
    3198:	97 e4       	ldi	r25, 0x47	; 71
    319a:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <_Z18validateTimeStringPcPma>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	8e 8f       	std	Y+30, r24	; 0x1e
    31a4:	9f 8f       	std	Y+31, r25	; 0x1f
    31a6:	a8 a3       	std	Y+32, r26	; 0x20
    31a8:	b9 a3       	std	Y+33, r27	; 0x21
    31aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31ae:	a8 a1       	ldd	r26, Y+32	; 0x20
    31b0:	b9 a1       	ldd	r27, Y+33	; 0x21
    31b2:	89 2b       	or	r24, r25
    31b4:	8a 2b       	or	r24, r26
    31b6:	8b 2b       	or	r24, r27
    31b8:	99 f1       	breq	.+102    	; 0x3220 <_Z19handleSerialBusMsgsv+0xe02>
    31ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31be:	a8 a1       	ldd	r26, Y+32	; 0x20
    31c0:	b9 a1       	ldd	r27, Y+33	; 0x21
    31c2:	80 93 7a 47 	sts	0x477A, r24	; 0x80477a <g_event_finish_epoch>
    31c6:	90 93 7b 47 	sts	0x477B, r25	; 0x80477b <g_event_finish_epoch+0x1>
    31ca:	a0 93 7c 47 	sts	0x477C, r26	; 0x80477c <g_event_finish_epoch+0x2>
    31ce:	b0 93 7d 47 	sts	0x477D, r27	; 0x80477d <g_event_finish_epoch+0x3>
    31d2:	4a e7       	ldi	r20, 0x7A	; 122
    31d4:	57 e4       	ldi	r21, 0x47	; 71
    31d6:	66 e0       	ldi	r22, 0x06	; 6
    31d8:	82 e9       	ldi	r24, 0x92	; 146
    31da:	97 e4       	ldi	r25, 0x47	; 71
    31dc:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    31e0:	63 e0       	ldi	r22, 0x03	; 3
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    31ea:	20 91 76 47 	lds	r18, 0x4776	; 0x804776 <g_event_start_epoch>
    31ee:	30 91 77 47 	lds	r19, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    31f2:	40 91 78 47 	lds	r20, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    31f6:	50 91 79 47 	lds	r21, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    31fa:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    31fe:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    3202:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    3206:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    320a:	61 e0       	ldi	r22, 0x01	; 1
    320c:	82 17       	cp	r24, r18
    320e:	93 07       	cpc	r25, r19
    3210:	a4 07       	cpc	r26, r20
    3212:	b5 07       	cpc	r27, r21
    3214:	08 f0       	brcs	.+2      	; 0x3218 <_Z19handleSerialBusMsgsv+0xdfa>
    3216:	60 e0       	ldi	r22, 0x00	; 0
    3218:	66 23       	and	r22, r22
    321a:	11 f0       	breq	.+4      	; 0x3220 <_Z19handleSerialBusMsgsv+0xe02>
    321c:	0e 94 97 23 	call	0x472e	; 0x472e <_Z18startEventUsingRTCv>
    3220:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <g_event_finish_epoch>
    3224:	90 91 7b 47 	lds	r25, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    3228:	a0 91 7c 47 	lds	r26, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    322c:	b0 91 7d 47 	lds	r27, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    3230:	ae 01       	movw	r20, r28
    3232:	4b 59       	subi	r20, 0x9B	; 155
    3234:	5f 4f       	sbci	r21, 0xFF	; 255
    3236:	22 e3       	ldi	r18, 0x32	; 50
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	0e 94 e5 31 	call	0x63ca	; 0x63ca <convertEpochToTimeString>
    3242:	29 2f       	mov	r18, r25
    3244:	2f 93       	push	r18
    3246:	8f 93       	push	r24
    3248:	87 ea       	ldi	r24, 0xA7	; 167
    324a:	92 e4       	ldi	r25, 0x42	; 66
    324c:	89 2f       	mov	r24, r25
    324e:	8f 93       	push	r24
    3250:	87 ea       	ldi	r24, 0xA7	; 167
    3252:	92 e4       	ldi	r25, 0x42	; 66
    3254:	8f 93       	push	r24
    3256:	87 e0       	ldi	r24, 0x07	; 7
    3258:	97 e4       	ldi	r25, 0x47	; 71
    325a:	89 2f       	mov	r24, r25
    325c:	8f 93       	push	r24
    325e:	87 e0       	ldi	r24, 0x07	; 7
    3260:	97 e4       	ldi	r25, 0x47	; 71
    3262:	8f 93       	push	r24
    3264:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	8d 83       	std	Y+5, r24	; 0x05
    3278:	08 c0       	rjmp	.+16     	; 0x328a <_Z19handleSerialBusMsgsv+0xe6c>
    327a:	8e 81       	ldd	r24, Y+6	; 0x06
    327c:	9f 81       	ldd	r25, Y+7	; 0x07
    327e:	fc 01       	movw	r30, r24
    3280:	83 81       	ldd	r24, Z+3	; 0x03
    3282:	8a 32       	cpi	r24, 0x2A	; 42
    3284:	11 f4       	brne	.+4      	; 0x328a <_Z19handleSerialBusMsgsv+0xe6c>
    3286:	0e 94 23 31 	call	0x6246	; 0x6246 <ds3231_sync2nearestMinute>
    328a:	8d 81       	ldd	r24, Y+5	; 0x05
    328c:	88 23       	and	r24, r24
    328e:	01 f1       	breq	.+64     	; 0x32d0 <_Z19handleSerialBusMsgsv+0xeb2>
    3290:	87 e0       	ldi	r24, 0x07	; 7
    3292:	97 e4       	ldi	r25, 0x47	; 71
    3294:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    3298:	1b c0       	rjmp	.+54     	; 0x32d0 <_Z19handleSerialBusMsgsv+0xeb2>
    329a:	8e 81       	ldd	r24, Y+6	; 0x06
    329c:	9f 81       	ldd	r25, Y+7	; 0x07
    329e:	fc 01       	movw	r30, r24
    32a0:	83 81       	ldd	r24, Z+3	; 0x03
    32a2:	83 34       	cpi	r24, 0x43	; 67
    32a4:	b9 f4       	brne	.+46     	; 0x32d4 <_Z19handleSerialBusMsgsv+0xeb6>
    32a6:	8e 81       	ldd	r24, Y+6	; 0x06
    32a8:	9f 81       	ldd	r25, Y+7	; 0x07
    32aa:	fc 01       	movw	r30, r24
    32ac:	87 89       	ldd	r24, Z+23	; 0x17
    32ae:	88 23       	and	r24, r24
    32b0:	89 f0       	breq	.+34     	; 0x32d4 <_Z19handleSerialBusMsgsv+0xeb6>
    32b2:	8e 81       	ldd	r24, Y+6	; 0x06
    32b4:	9f 81       	ldd	r25, Y+7	; 0x07
    32b6:	47 96       	adiw	r24, 0x17	; 23
    32b8:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <atoi>
    32bc:	88 a7       	std	Y+40, r24	; 0x28
    32be:	99 a7       	std	Y+41, r25	; 0x29
    32c0:	09 c0       	rjmp	.+18     	; 0x32d4 <_Z19handleSerialBusMsgsv+0xeb6>
    32c2:	84 e7       	ldi	r24, 0x74	; 116
    32c4:	90 e4       	ldi	r25, 0x40	; 64
    32c6:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    32ca:	05 c0       	rjmp	.+10     	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    32cc:	00 00       	nop
    32ce:	03 c0       	rjmp	.+6      	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    32d0:	00 00       	nop
    32d2:	01 c0       	rjmp	.+2      	; 0x32d6 <_Z19handleSerialBusMsgsv+0xeb8>
    32d4:	00 00       	nop
    32d6:	8e 81       	ldd	r24, Y+6	; 0x06
    32d8:	9f 81       	ldd	r25, Y+7	; 0x07
    32da:	fc 01       	movw	r30, r24
    32dc:	11 82       	std	Z+1, r1	; 0x01
    32de:	12 82       	std	Z+2, r1	; 0x02
    32e0:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <sb_send_NewPrompt>
    32e4:	a8 c8       	rjmp	.-3760   	; 0x2436 <_Z19handleSerialBusMsgsv+0x18>
    32e6:	00 00       	nop
    32e8:	ca 56       	subi	r28, 0x6A	; 106
    32ea:	df 4f       	sbci	r29, 0xFF	; 255
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	ff 90       	pop	r15
    32fa:	ef 90       	pop	r14
    32fc:	08 95       	ret

000032fe <_Z17handleLinkBusMsgsv>:
    32fe:	ef 92       	push	r14
    3300:	ff 92       	push	r15
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	e3 97       	sbiw	r28, 0x33	; 51
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	89 83       	std	Y+1, r24	; 0x01
    3318:	0e 94 ab 38 	call	0x7156	; 0x7156 <_Z18nextFullLBRxBufferv>
    331c:	8c 87       	std	Y+12, r24	; 0x0c
    331e:	9d 87       	std	Y+13, r25	; 0x0d
    3320:	21 e0       	ldi	r18, 0x01	; 1
    3322:	8c 85       	ldd	r24, Y+12	; 0x0c
    3324:	9d 85       	ldd	r25, Y+13	; 0x0d
    3326:	89 2b       	or	r24, r25
    3328:	09 f4       	brne	.+2      	; 0x332c <_Z17handleLinkBusMsgsv+0x2e>
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	22 23       	and	r18, r18
    332e:	09 f4       	brne	.+2      	; 0x3332 <_Z17handleLinkBusMsgsv+0x34>
    3330:	8b c6       	rjmp	.+3350   	; 0x4048 <__DATA_REGION_LENGTH__+0x48>
    3332:	8c 85       	ldd	r24, Y+12	; 0x0c
    3334:	9d 85       	ldd	r25, Y+13	; 0x0d
    3336:	fc 01       	movw	r30, r24
    3338:	81 81       	ldd	r24, Z+1	; 0x01
    333a:	92 81       	ldd	r25, Z+2	; 0x02
    333c:	8e 87       	std	Y+14, r24	; 0x0e
    333e:	9f 87       	std	Y+15, r25	; 0x0f
    3340:	8e 85       	ldd	r24, Y+14	; 0x0e
    3342:	9f 85       	ldd	r25, Y+15	; 0x0f
    3344:	82 38       	cpi	r24, 0x82	; 130
    3346:	fe e1       	ldi	r31, 0x1E	; 30
    3348:	9f 07       	cpc	r25, r31
    334a:	09 f4       	brne	.+2      	; 0x334e <_Z17handleLinkBusMsgsv+0x50>
    334c:	71 c0       	rjmp	.+226    	; 0x3430 <_Z17handleLinkBusMsgsv+0x132>
    334e:	83 38       	cpi	r24, 0x83	; 131
    3350:	2e e1       	ldi	r18, 0x1E	; 30
    3352:	92 07       	cpc	r25, r18
    3354:	30 f5       	brcc	.+76     	; 0x33a2 <_Z17handleLinkBusMsgsv+0xa4>
    3356:	81 36       	cpi	r24, 0x61	; 97
    3358:	33 e0       	ldi	r19, 0x03	; 3
    335a:	93 07       	cpc	r25, r19
    335c:	09 f4       	brne	.+2      	; 0x3360 <_Z17handleLinkBusMsgsv+0x62>
    335e:	de c4       	rjmp	.+2492   	; 0x3d1c <_Z17handleLinkBusMsgsv+0xa1e>
    3360:	82 36       	cpi	r24, 0x62	; 98
    3362:	e3 e0       	ldi	r30, 0x03	; 3
    3364:	9e 07       	cpc	r25, r30
    3366:	78 f4       	brcc	.+30     	; 0x3386 <_Z17handleLinkBusMsgsv+0x88>
    3368:	85 31       	cpi	r24, 0x15	; 21
    336a:	f3 e0       	ldi	r31, 0x03	; 3
    336c:	9f 07       	cpc	r25, r31
    336e:	09 f4       	brne	.+2      	; 0x3372 <_Z17handleLinkBusMsgsv+0x74>
    3370:	1e c1       	rjmp	.+572    	; 0x35ae <_Z17handleLinkBusMsgsv+0x2b0>
    3372:	8e 31       	cpi	r24, 0x1E	; 30
    3374:	23 e0       	ldi	r18, 0x03	; 3
    3376:	92 07       	cpc	r25, r18
    3378:	09 f4       	brne	.+2      	; 0x337c <_Z17handleLinkBusMsgsv+0x7e>
    337a:	45 c3       	rjmp	.+1674   	; 0x3a06 <_Z17handleLinkBusMsgsv+0x708>
    337c:	84 35       	cpi	r24, 0x54	; 84
    337e:	91 05       	cpc	r25, r1
    3380:	09 f4       	brne	.+2      	; 0x3384 <_Z17handleLinkBusMsgsv+0x86>
    3382:	41 c4       	rjmp	.+2178   	; 0x3c06 <_Z17handleLinkBusMsgsv+0x908>
    3384:	36 c6       	rjmp	.+3180   	; 0x3ff2 <_Z17handleLinkBusMsgsv+0xcf4>
    3386:	8f 3a       	cpi	r24, 0xAF	; 175
    3388:	33 e0       	ldi	r19, 0x03	; 3
    338a:	93 07       	cpc	r25, r19
    338c:	d1 f1       	breq	.+116    	; 0x3402 <_Z17handleLinkBusMsgsv+0x104>
    338e:	86 3a       	cpi	r24, 0xA6	; 166
    3390:	ec e1       	ldi	r30, 0x1C	; 28
    3392:	9e 07       	cpc	r25, r30
    3394:	09 f4       	brne	.+2      	; 0x3398 <_Z17handleLinkBusMsgsv+0x9a>
    3396:	4d c5       	rjmp	.+2714   	; 0x3e32 <_Z17handleLinkBusMsgsv+0xb34>
    3398:	84 38       	cpi	r24, 0x84	; 132
    339a:	93 40       	sbci	r25, 0x03	; 3
    339c:	09 f4       	brne	.+2      	; 0x33a0 <_Z17handleLinkBusMsgsv+0xa2>
    339e:	cd c1       	rjmp	.+922    	; 0x373a <_Z17handleLinkBusMsgsv+0x43c>
    33a0:	28 c6       	rjmp	.+3152   	; 0x3ff2 <_Z17handleLinkBusMsgsv+0xcf4>
    33a2:	8a 39       	cpi	r24, 0x9A	; 154
    33a4:	23 e2       	ldi	r18, 0x23	; 35
    33a6:	92 07       	cpc	r25, r18
    33a8:	09 f4       	brne	.+2      	; 0x33ac <_Z17handleLinkBusMsgsv+0xae>
    33aa:	41 c0       	rjmp	.+130    	; 0x342e <_Z17handleLinkBusMsgsv+0x130>
    33ac:	8b 39       	cpi	r24, 0x9B	; 155
    33ae:	33 e2       	ldi	r19, 0x23	; 35
    33b0:	93 07       	cpc	r25, r19
    33b2:	78 f4       	brcc	.+30     	; 0x33d2 <_Z17handleLinkBusMsgsv+0xd4>
    33b4:	8d 3a       	cpi	r24, 0xAD	; 173
    33b6:	e2 e2       	ldi	r30, 0x22	; 34
    33b8:	9e 07       	cpc	r25, r30
    33ba:	09 f4       	brne	.+2      	; 0x33be <_Z17handleLinkBusMsgsv+0xc0>
    33bc:	96 c0       	rjmp	.+300    	; 0x34ea <_Z17handleLinkBusMsgsv+0x1ec>
    33be:	81 3c       	cpi	r24, 0xC1	; 193
    33c0:	f2 e2       	ldi	r31, 0x22	; 34
    33c2:	9f 07       	cpc	r25, r31
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <_Z17handleLinkBusMsgsv+0xca>
    33c6:	ee c0       	rjmp	.+476    	; 0x35a4 <_Z17handleLinkBusMsgsv+0x2a6>
    33c8:	81 3d       	cpi	r24, 0xD1	; 209
    33ca:	9e 41       	sbci	r25, 0x1E	; 30
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <_Z17handleLinkBusMsgsv+0xd2>
    33ce:	bd c4       	rjmp	.+2426   	; 0x3d4a <_Z17handleLinkBusMsgsv+0xa4c>
    33d0:	10 c6       	rjmp	.+3104   	; 0x3ff2 <_Z17handleLinkBusMsgsv+0xcf4>
    33d2:	80 3d       	cpi	r24, 0xD0	; 208
    33d4:	33 e2       	ldi	r19, 0x23	; 35
    33d6:	93 07       	cpc	r25, r19
    33d8:	09 f4       	brne	.+2      	; 0x33dc <_Z17handleLinkBusMsgsv+0xde>
    33da:	78 c3       	rjmp	.+1776   	; 0x3acc <_Z17handleLinkBusMsgsv+0x7ce>
    33dc:	81 3d       	cpi	r24, 0xD1	; 209
    33de:	e3 e2       	ldi	r30, 0x23	; 35
    33e0:	9e 07       	cpc	r25, r30
    33e2:	28 f4       	brcc	.+10     	; 0x33ee <_Z17handleLinkBusMsgsv+0xf0>
    33e4:	8f 3c       	cpi	r24, 0xCF	; 207
    33e6:	93 42       	sbci	r25, 0x23	; 35
    33e8:	09 f4       	brne	.+2      	; 0x33ec <_Z17handleLinkBusMsgsv+0xee>
    33ea:	eb c5       	rjmp	.+3030   	; 0x3fc2 <_Z17handleLinkBusMsgsv+0xcc4>
    33ec:	02 c6       	rjmp	.+3076   	; 0x3ff2 <_Z17handleLinkBusMsgsv+0xcf4>
    33ee:	87 3f       	cpi	r24, 0xF7	; 247
    33f0:	23 e2       	ldi	r18, 0x23	; 35
    33f2:	92 07       	cpc	r25, r18
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <_Z17handleLinkBusMsgsv+0xfa>
    33f6:	16 c2       	rjmp	.+1068   	; 0x3824 <_Z17handleLinkBusMsgsv+0x526>
    33f8:	8c 39       	cpi	r24, 0x9C	; 156
    33fa:	94 42       	sbci	r25, 0x24	; 36
    33fc:	09 f4       	brne	.+2      	; 0x3400 <_Z17handleLinkBusMsgsv+0x102>
    33fe:	f1 c5       	rjmp	.+3042   	; 0x3fe2 <_Z17handleLinkBusMsgsv+0xce4>
    3400:	f8 c5       	rjmp	.+3056   	; 0x3ff2 <_Z17handleLinkBusMsgsv+0xcf4>
    3402:	8c 85       	ldd	r24, Y+12	; 0x0c
    3404:	9d 85       	ldd	r25, Y+13	; 0x0d
    3406:	fc 01       	movw	r30, r24
    3408:	83 81       	ldd	r24, Z+3	; 0x03
    340a:	88 23       	and	r24, r24
    340c:	09 f4       	brne	.+2      	; 0x3410 <_Z17handleLinkBusMsgsv+0x112>
    340e:	f7 c5       	rjmp	.+3054   	; 0x3ffe <_Z17handleLinkBusMsgsv+0xd00>
    3410:	8c 85       	ldd	r24, Y+12	; 0x0c
    3412:	9d 85       	ldd	r25, Y+13	; 0x0d
    3414:	03 96       	adiw	r24, 0x03	; 3
    3416:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <atoi>
    341a:	21 e0       	ldi	r18, 0x01	; 1
    341c:	89 2b       	or	r24, r25
    341e:	09 f4       	brne	.+2      	; 0x3422 <_Z17handleLinkBusMsgsv+0x124>
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	28 8b       	std	Y+16, r18	; 0x10
    3424:	0e 94 59 39 	call	0x72b2	; 0x72b2 <_Z15linkbus_disablev>
    3428:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    342c:	e8 c5       	rjmp	.+3024   	; 0x3ffe <_Z17handleLinkBusMsgsv+0xd00>
    342e:	ff cf       	rjmp	.-2      	; 0x342e <_Z17handleLinkBusMsgsv+0x130>
    3430:	8c 85       	ldd	r24, Y+12	; 0x0c
    3432:	9d 85       	ldd	r25, Y+13	; 0x0d
    3434:	fc 01       	movw	r30, r24
    3436:	83 81       	ldd	r24, Z+3	; 0x03
    3438:	89 8b       	std	Y+17, r24	; 0x11
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    3440:	89 89       	ldd	r24, Y+17	; 0x11
    3442:	8a 35       	cpi	r24, 0x5A	; 90
    3444:	21 f4       	brne	.+8      	; 0x344e <_Z17handleLinkBusMsgsv+0x150>
    3446:	88 e7       	ldi	r24, 0x78	; 120
    3448:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    344c:	da c5       	rjmp	.+2996   	; 0x4002 <__DATA_REGION_LENGTH__+0x2>
    344e:	89 89       	ldd	r24, Y+17	; 0x11
    3450:	80 33       	cpi	r24, 0x30	; 48
    3452:	b1 f5       	brne	.+108    	; 0x34c0 <_Z17handleLinkBusMsgsv+0x1c2>
    3454:	80 91 81 47 	lds	r24, 0x4781	; 0x804781 <g_waiting_for_next_event>
    3458:	88 23       	and	r24, r24
    345a:	39 f0       	breq	.+14     	; 0x346a <_Z17handleLinkBusMsgsv+0x16c>
    345c:	40 ef       	ldi	r20, 0xF0	; 240
    345e:	52 e4       	ldi	r21, 0x42	; 66
    3460:	62 ef       	ldi	r22, 0xF2	; 242
    3462:	72 e4       	ldi	r23, 0x42	; 66
    3464:	83 e0       	ldi	r24, 0x03	; 3
    3466:	0e 94 bc 39 	call	0x7378	; 0x7378 <_Z11lb_send_msg13LBMessageTypePKcPc>
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	2b 2f       	mov	r18, r27
    3478:	2f 93       	push	r18
    347a:	2a 2f       	mov	r18, r26
    347c:	2f 93       	push	r18
    347e:	29 2f       	mov	r18, r25
    3480:	2f 93       	push	r18
    3482:	8f 93       	push	r24
    3484:	86 ef       	ldi	r24, 0xF6	; 246
    3486:	92 e4       	ldi	r25, 0x42	; 66
    3488:	89 2f       	mov	r24, r25
    348a:	8f 93       	push	r24
    348c:	86 ef       	ldi	r24, 0xF6	; 246
    348e:	92 e4       	ldi	r25, 0x42	; 66
    3490:	8f 93       	push	r24
    3492:	87 e0       	ldi	r24, 0x07	; 7
    3494:	97 e4       	ldi	r25, 0x47	; 71
    3496:	89 2f       	mov	r24, r25
    3498:	8f 93       	push	r24
    349a:	87 e0       	ldi	r24, 0x07	; 7
    349c:	97 e4       	ldi	r25, 0x47	; 71
    349e:	8f 93       	push	r24
    34a0:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    34a4:	2d b7       	in	r18, 0x3d	; 61
    34a6:	3e b7       	in	r19, 0x3e	; 62
    34a8:	28 5f       	subi	r18, 0xF8	; 248
    34aa:	3f 4f       	sbci	r19, 0xFF	; 255
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	47 e0       	ldi	r20, 0x07	; 7
    34b2:	57 e4       	ldi	r21, 0x47	; 71
    34b4:	6a ef       	ldi	r22, 0xFA	; 250
    34b6:	72 e4       	ldi	r23, 0x42	; 66
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	0e 94 bc 39 	call	0x7378	; 0x7378 <_Z11lb_send_msg13LBMessageTypePKcPc>
    34be:	a1 c5       	rjmp	.+2882   	; 0x4002 <__DATA_REGION_LENGTH__+0x2>
    34c0:	89 89       	ldd	r24, Y+17	; 0x11
    34c2:	83 33       	cpi	r24, 0x33	; 51
    34c4:	09 f0       	breq	.+2      	; 0x34c8 <_Z17handleLinkBusMsgsv+0x1ca>
    34c6:	9d c5       	rjmp	.+2874   	; 0x4002 <__DATA_REGION_LENGTH__+0x2>
    34c8:	f8 94       	cli
    34ca:	10 92 45 47 	sts	0x4745, r1	; 0x804745 <_ZL19g_wifi_enable_delay>
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    34d4:	10 92 81 47 	sts	0x4781, r1	; 0x804781 <g_waiting_for_next_event>
    34d8:	10 92 80 47 	sts	0x4780, r1	; 0x804780 <g_check_for_next_event>
    34dc:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	80 93 46 47 	sts	0x4746, r24	; 0x804746 <_ZL20g_shutting_down_wifi>
    34e6:	78 94       	sei
    34e8:	8c c5       	rjmp	.+2840   	; 0x4002 <__DATA_REGION_LENGTH__+0x2>
    34ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    34ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    34ee:	fc 01       	movw	r30, r24
    34f0:	83 81       	ldd	r24, Z+3	; 0x03
    34f2:	88 23       	and	r24, r24
    34f4:	09 f4       	brne	.+2      	; 0x34f8 <_Z17handleLinkBusMsgsv+0x1fa>
    34f6:	87 c5       	rjmp	.+2830   	; 0x4006 <__DATA_REGION_LENGTH__+0x6>
    34f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    34fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    34fc:	fc 01       	movw	r30, r24
    34fe:	83 81       	ldd	r24, Z+3	; 0x03
    3500:	8d 34       	cpi	r24, 0x4D	; 77
    3502:	a9 f4       	brne	.+42     	; 0x352e <_Z17handleLinkBusMsgsv+0x230>
    3504:	8c 85       	ldd	r24, Y+12	; 0x0c
    3506:	9d 85       	ldd	r25, Y+13	; 0x0d
    3508:	fc 01       	movw	r30, r24
    350a:	80 8d       	ldd	r24, Z+24	; 0x18
    350c:	88 23       	and	r24, r24
    350e:	79 f0       	breq	.+30     	; 0x352e <_Z17handleLinkBusMsgsv+0x230>
    3510:	8c 85       	ldd	r24, Y+12	; 0x0c
    3512:	9d 85       	ldd	r25, Y+13	; 0x0d
    3514:	48 96       	adiw	r24, 0x18	; 24
    3516:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <atoi>
    351a:	80 93 a9 47 	sts	0x47A9, r24	; 0x8047a9 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    351e:	90 93 aa 47 	sts	0x47AA, r25	; 0x8047aa <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    3522:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3526:	8f 5f       	subi	r24, 0xFF	; 255
    3528:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    352c:	09 c0       	rjmp	.+18     	; 0x3540 <_Z17handleLinkBusMsgsv+0x242>
    352e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3530:	9d 85       	ldd	r25, Y+13	; 0x0d
    3532:	03 96       	adiw	r24, 0x03	; 3
    3534:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <atoi>
    3538:	80 93 a9 47 	sts	0x47A9, r24	; 0x8047a9 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    353c:	90 93 aa 47 	sts	0x47AA, r25	; 0x8047aa <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	70 e0       	ldi	r23, 0x00	; 0
    3544:	89 ea       	ldi	r24, 0xA9	; 169
    3546:	97 e4       	ldi	r25, 0x47	; 71
    3548:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <_Z15txSetParametersPjPb>
    354c:	8a 8b       	std	Y+18, r24	; 0x12
    354e:	8a 89       	ldd	r24, Y+18	; 0x12
    3550:	88 23       	and	r24, r24
    3552:	19 f0       	breq	.+6      	; 0x355a <_Z17handleLinkBusMsgsv+0x25c>
    3554:	8a 89       	ldd	r24, Y+18	; 0x12
    3556:	80 93 39 47 	sts	0x4739, r24	; 0x804739 <_ZL17g_last_error_code>
    355a:	80 91 a9 47 	lds	r24, 0x47A9	; 0x8047a9 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    355e:	90 91 aa 47 	lds	r25, 0x47AA	; 0x8047aa <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    3562:	29 2f       	mov	r18, r25
    3564:	2f 93       	push	r18
    3566:	8f 93       	push	r24
    3568:	8e ef       	ldi	r24, 0xFE	; 254
    356a:	92 e4       	ldi	r25, 0x42	; 66
    356c:	89 2f       	mov	r24, r25
    356e:	8f 93       	push	r24
    3570:	8e ef       	ldi	r24, 0xFE	; 254
    3572:	92 e4       	ldi	r25, 0x42	; 66
    3574:	8f 93       	push	r24
    3576:	87 e0       	ldi	r24, 0x07	; 7
    3578:	97 e4       	ldi	r25, 0x47	; 71
    357a:	89 2f       	mov	r24, r25
    357c:	8f 93       	push	r24
    357e:	87 e0       	ldi	r24, 0x07	; 7
    3580:	97 e4       	ldi	r25, 0x47	; 71
    3582:	8f 93       	push	r24
    3584:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	47 e0       	ldi	r20, 0x07	; 7
    3596:	57 e4       	ldi	r21, 0x47	; 71
    3598:	63 e0       	ldi	r22, 0x03	; 3
    359a:	73 e4       	ldi	r23, 0x43	; 67
    359c:	83 e0       	ldi	r24, 0x03	; 3
    359e:	0e 94 bc 39 	call	0x7378	; 0x7378 <_Z11lb_send_msg13LBMessageTypePKcPc>
    35a2:	31 c5       	rjmp	.+2658   	; 0x4006 <__DATA_REGION_LENGTH__+0x6>
    35a4:	82 e9       	ldi	r24, 0x92	; 146
    35a6:	97 e4       	ldi	r25, 0x47	; 71
    35a8:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <_ZN13EepromManager13saveAllEEPROMEv>
    35ac:	3f c5       	rjmp	.+2686   	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    35ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    35b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    35b2:	fc 01       	movw	r30, r24
    35b4:	83 81       	ldd	r24, Z+3	; 0x03
    35b6:	8b 8b       	std	Y+19, r24	; 0x13
    35b8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ba:	81 33       	cpi	r24, 0x31	; 49
    35bc:	21 f0       	breq	.+8      	; 0x35c6 <_Z17handleLinkBusMsgsv+0x2c8>
    35be:	8b 89       	ldd	r24, Y+19	; 0x13
    35c0:	82 33       	cpi	r24, 0x32	; 50
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <_Z17handleLinkBusMsgsv+0x2c8>
    35c4:	ae c0       	rjmp	.+348    	; 0x3722 <_Z17handleLinkBusMsgsv+0x424>
    35c6:	0e 94 55 48 	call	0x90aa	; 0x90aa <_Z18txIsAntennaForBandv>
    35ca:	98 2f       	mov	r25, r24
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	89 27       	eor	r24, r25
    35d0:	88 23       	and	r24, r24
    35d2:	41 f0       	breq	.+16     	; 0x35e4 <_Z17handleLinkBusMsgsv+0x2e6>
    35d4:	90 91 35 40 	lds	r25, 0x4035	; 0x804035 <g_tx_power_is_zero>
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	89 27       	eor	r24, r25
    35dc:	88 23       	and	r24, r24
    35de:	11 f0       	breq	.+4      	; 0x35e4 <_Z17handleLinkBusMsgsv+0x2e6>
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	01 c0       	rjmp	.+2      	; 0x35e6 <_Z17handleLinkBusMsgsv+0x2e8>
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	88 23       	and	r24, r24
    35e8:	21 f0       	breq	.+8      	; 0x35f2 <_Z17handleLinkBusMsgsv+0x2f4>
    35ea:	87 ef       	ldi	r24, 0xF7	; 247
    35ec:	80 93 39 47 	sts	0x4739, r24	; 0x804739 <_ZL17g_last_error_code>
    35f0:	a2 c0       	rjmp	.+324    	; 0x3736 <_Z17handleLinkBusMsgsv+0x438>
    35f2:	8b 89       	ldd	r24, Y+19	; 0x13
    35f4:	81 33       	cpi	r24, 0x31	; 49
    35f6:	09 f0       	breq	.+2      	; 0x35fa <_Z17handleLinkBusMsgsv+0x2fc>
    35f8:	64 c0       	rjmp	.+200    	; 0x36c2 <_Z17handleLinkBusMsgsv+0x3c4>
    35fa:	0e 94 55 48 	call	0x90aa	; 0x90aa <_Z18txIsAntennaForBandv>
    35fe:	88 23       	and	r24, r24
    3600:	21 f4       	brne	.+8      	; 0x360a <_Z17handleLinkBusMsgsv+0x30c>
    3602:	80 91 35 40 	lds	r24, 0x4035	; 0x804035 <g_tx_power_is_zero>
    3606:	88 23       	and	r24, r24
    3608:	11 f0       	breq	.+4      	; 0x360e <_Z17handleLinkBusMsgsv+0x310>
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	01 c0       	rjmp	.+2      	; 0x3610 <_Z17handleLinkBusMsgsv+0x312>
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	88 23       	and	r24, r24
    3612:	09 f4       	brne	.+2      	; 0x3616 <_Z17handleLinkBusMsgsv+0x318>
    3614:	52 c0       	rjmp	.+164    	; 0x36ba <_Z17handleLinkBusMsgsv+0x3bc>
    3616:	f8 94       	cli
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	8c a7       	std	Y+44, r24	; 0x2c
    361c:	ce 01       	movw	r24, r28
    361e:	8c 96       	adiw	r24, 0x2c	; 44
    3620:	40 e0       	ldi	r20, 0x00	; 0
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	bc 01       	movw	r22, r24
    3626:	88 e4       	ldi	r24, 0x48	; 72
    3628:	97 e4       	ldi	r25, 0x47	; 71
    362a:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
    362e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3632:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    3636:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    363a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    363e:	78 94       	sei
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a0 e0       	ldi	r26, 0x00	; 0
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	80 93 76 47 	sts	0x4776, r24	; 0x804776 <g_event_start_epoch>
    364c:	90 93 77 47 	sts	0x4777, r25	; 0x804777 <g_event_start_epoch+0x1>
    3650:	a0 93 78 47 	sts	0x4778, r26	; 0x804778 <g_event_start_epoch+0x2>
    3654:	b0 93 79 47 	sts	0x4779, r27	; 0x804779 <g_event_start_epoch+0x3>
    3658:	8f ef       	ldi	r24, 0xFF	; 255
    365a:	9f ef       	ldi	r25, 0xFF	; 255
    365c:	dc 01       	movw	r26, r24
    365e:	80 93 7a 47 	sts	0x477A, r24	; 0x80477a <g_event_finish_epoch>
    3662:	90 93 7b 47 	sts	0x477B, r25	; 0x80477b <g_event_finish_epoch+0x1>
    3666:	a0 93 7c 47 	sts	0x477C, r26	; 0x80477c <g_event_finish_epoch+0x2>
    366a:	b0 93 7d 47 	sts	0x477D, r27	; 0x80477d <g_event_finish_epoch+0x3>
    366e:	8f e0       	ldi	r24, 0x0F	; 15
    3670:	97 e2       	ldi	r25, 0x27	; 39
    3672:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3676:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    367a:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    367e:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    3682:	8f e0       	ldi	r24, 0x0F	; 15
    3684:	97 e2       	ldi	r25, 0x27	; 39
    3686:	a0 e0       	ldi	r26, 0x00	; 0
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    368e:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    3692:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    3696:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    369a:	8f ef       	ldi	r24, 0xFF	; 255
    369c:	9f ef       	ldi	r25, 0xFF	; 255
    369e:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    36a2:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	80 93 7f 47 	sts	0x477F, r24	; 0x80477f <g_event_commenced>
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	80 93 7e 47 	sts	0x477E, r24	; 0x80477e <g_event_enabled>
    36b2:	8d ef       	ldi	r24, 0xFD	; 253
    36b4:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    36b8:	3e c0       	rjmp	.+124    	; 0x3736 <_Z17handleLinkBusMsgsv+0x438>
    36ba:	87 ef       	ldi	r24, 0xF7	; 247
    36bc:	80 93 39 47 	sts	0x4739, r24	; 0x804739 <_ZL17g_last_error_code>
    36c0:	3a c0       	rjmp	.+116    	; 0x3736 <_Z17handleLinkBusMsgsv+0x438>
    36c2:	8b 89       	ldd	r24, Y+19	; 0x13
    36c4:	82 33       	cpi	r24, 0x32	; 50
    36c6:	b9 f5       	brne	.+110    	; 0x3736 <_Z17handleLinkBusMsgsv+0x438>
    36c8:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    36cc:	8e 30       	cpi	r24, 0x0E	; 14
    36ce:	20 f4       	brcc	.+8      	; 0x36d8 <_Z17handleLinkBusMsgsv+0x3da>
    36d0:	8d ec       	ldi	r24, 0xCD	; 205
    36d2:	80 93 39 47 	sts	0x4739, r24	; 0x804739 <_ZL17g_last_error_code>
    36d6:	2f c0       	rjmp	.+94     	; 0x3736 <_Z17handleLinkBusMsgsv+0x438>
    36d8:	1d a6       	std	Y+45, r1	; 0x2d
    36da:	ce 01       	movw	r24, r28
    36dc:	8d 96       	adiw	r24, 0x2d	; 45
    36de:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_Z11launchEventP2SC>
    36e2:	80 93 ac 47 	sts	0x47AC, r24	; 0x8047ac <_ZZ17handleLinkBusMsgsvE2ec>
    36e6:	80 91 82 47 	lds	r24, 0x4782	; 0x804782 <_ZL13g_go_to_sleep>
    36ea:	88 23       	and	r24, r24
    36ec:	31 f0       	breq	.+12     	; 0x36fa <_Z17handleLinkBusMsgsv+0x3fc>
    36ee:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <_ZL11g_sleepType>
    36f2:	88 23       	and	r24, r24
    36f4:	11 f0       	breq	.+4      	; 0x36fa <_Z17handleLinkBusMsgsv+0x3fc>
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	01 c0       	rjmp	.+2      	; 0x36fc <_Z17handleLinkBusMsgsv+0x3fe>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	88 23       	and	r24, r24
    36fe:	29 f0       	breq	.+10     	; 0x370a <_Z17handleLinkBusMsgsv+0x40c>
    3700:	83 e0       	ldi	r24, 0x03	; 3
    3702:	80 93 47 47 	sts	0x4747, r24	; 0x804747 <_ZL11g_sleepType>
    3706:	10 92 82 47 	sts	0x4782, r1	; 0x804782 <_ZL13g_go_to_sleep>
    370a:	8c e3       	ldi	r24, 0x3C	; 60
    370c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3710:	80 91 ac 47 	lds	r24, 0x47AC	; 0x8047ac <_ZZ17handleLinkBusMsgsvE2ec>
    3714:	88 23       	and	r24, r24
    3716:	79 f4       	brne	.+30     	; 0x3736 <_Z17handleLinkBusMsgsv+0x438>
    3718:	82 e9       	ldi	r24, 0x92	; 146
    371a:	97 e4       	ldi	r25, 0x47	; 71
    371c:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <_ZN13EepromManager13saveAllEEPROMEv>
    3720:	0a c0       	rjmp	.+20     	; 0x3736 <_Z17handleLinkBusMsgsv+0x438>
    3722:	8b 89       	ldd	r24, Y+19	; 0x13
    3724:	80 33       	cpi	r24, 0x30	; 48
    3726:	09 f0       	breq	.+2      	; 0x372a <_Z17handleLinkBusMsgsv+0x42c>
    3728:	70 c4       	rjmp	.+2272   	; 0x400a <__DATA_REGION_LENGTH__+0xa>
    372a:	10 92 ab 47 	sts	0x47AB, r1	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    372e:	8c ee       	ldi	r24, 0xEC	; 236
    3730:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    3734:	6a c4       	rjmp	.+2260   	; 0x400a <__DATA_REGION_LENGTH__+0xa>
    3736:	00 00       	nop
    3738:	68 c4       	rjmp	.+2256   	; 0x400a <__DATA_REGION_LENGTH__+0xa>
    373a:	1a 82       	std	Y+2, r1	; 0x02
    373c:	1b 82       	std	Y+3, r1	; 0x03
    373e:	1c 82       	std	Y+4, r1	; 0x04
    3740:	1d 82       	std	Y+5, r1	; 0x05
    3742:	8c 85       	ldd	r24, Y+12	; 0x0c
    3744:	9d 85       	ldd	r25, Y+13	; 0x0d
    3746:	fc 01       	movw	r30, r24
    3748:	83 81       	ldd	r24, Z+3	; 0x03
    374a:	83 35       	cpi	r24, 0x53	; 83
    374c:	c1 f5       	brne	.+112    	; 0x37be <_Z17handleLinkBusMsgsv+0x4c0>
    374e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3750:	9d 85       	ldd	r25, Y+13	; 0x0d
    3752:	fc 01       	movw	r30, r24
    3754:	80 8d       	ldd	r24, Z+24	; 0x18
    3756:	88 23       	and	r24, r24
    3758:	59 f0       	breq	.+22     	; 0x3770 <_Z17handleLinkBusMsgsv+0x472>
    375a:	8c 85       	ldd	r24, Y+12	; 0x0c
    375c:	9d 85       	ldd	r25, Y+13	; 0x0d
    375e:	48 96       	adiw	r24, 0x18	; 24
    3760:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	8a 83       	std	Y+2, r24	; 0x02
    376a:	9b 83       	std	Y+3, r25	; 0x03
    376c:	ac 83       	std	Y+4, r26	; 0x04
    376e:	bd 83       	std	Y+5, r27	; 0x05
    3770:	8a 81       	ldd	r24, Y+2	; 0x02
    3772:	9b 81       	ldd	r25, Y+3	; 0x03
    3774:	ac 81       	ldd	r26, Y+4	; 0x04
    3776:	bd 81       	ldd	r27, Y+5	; 0x05
    3778:	89 2b       	or	r24, r25
    377a:	8a 2b       	or	r24, r26
    377c:	8b 2b       	or	r24, r27
    377e:	09 f4       	brne	.+2      	; 0x3782 <_Z17handleLinkBusMsgsv+0x484>
    3780:	46 c4       	rjmp	.+2188   	; 0x400e <__DATA_REGION_LENGTH__+0xe>
    3782:	8a 81       	ldd	r24, Y+2	; 0x02
    3784:	9b 81       	ldd	r25, Y+3	; 0x03
    3786:	ac 81       	ldd	r26, Y+4	; 0x04
    3788:	bd 81       	ldd	r27, Y+5	; 0x05
    378a:	80 93 76 47 	sts	0x4776, r24	; 0x804776 <g_event_start_epoch>
    378e:	90 93 77 47 	sts	0x4777, r25	; 0x804777 <g_event_start_epoch+0x1>
    3792:	a0 93 78 47 	sts	0x4778, r26	; 0x804778 <g_event_start_epoch+0x2>
    3796:	b0 93 79 47 	sts	0x4779, r27	; 0x804779 <g_event_start_epoch+0x3>
    379a:	f8 94       	cli
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	bc 01       	movw	r22, r24
    37aa:	cd 01       	movw	r24, r26
    37ac:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    37b0:	78 94       	sei
    37b2:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    37b6:	8f 5f       	subi	r24, 0xFF	; 255
    37b8:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    37bc:	28 c4       	rjmp	.+2128   	; 0x400e <__DATA_REGION_LENGTH__+0xe>
    37be:	8c 85       	ldd	r24, Y+12	; 0x0c
    37c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    37c2:	fc 01       	movw	r30, r24
    37c4:	83 81       	ldd	r24, Z+3	; 0x03
    37c6:	86 34       	cpi	r24, 0x46	; 70
    37c8:	09 f0       	breq	.+2      	; 0x37cc <_Z17handleLinkBusMsgsv+0x4ce>
    37ca:	21 c4       	rjmp	.+2114   	; 0x400e <__DATA_REGION_LENGTH__+0xe>
    37cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    37ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    37d0:	fc 01       	movw	r30, r24
    37d2:	80 8d       	ldd	r24, Z+24	; 0x18
    37d4:	88 23       	and	r24, r24
    37d6:	59 f0       	breq	.+22     	; 0x37ee <_Z17handleLinkBusMsgsv+0x4f0>
    37d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    37da:	9d 85       	ldd	r25, Y+13	; 0x0d
    37dc:	48 96       	adiw	r24, 0x18	; 24
    37de:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	8a 83       	std	Y+2, r24	; 0x02
    37e8:	9b 83       	std	Y+3, r25	; 0x03
    37ea:	ac 83       	std	Y+4, r26	; 0x04
    37ec:	bd 83       	std	Y+5, r27	; 0x05
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	9b 81       	ldd	r25, Y+3	; 0x03
    37f2:	ac 81       	ldd	r26, Y+4	; 0x04
    37f4:	bd 81       	ldd	r27, Y+5	; 0x05
    37f6:	89 2b       	or	r24, r25
    37f8:	8a 2b       	or	r24, r26
    37fa:	8b 2b       	or	r24, r27
    37fc:	09 f4       	brne	.+2      	; 0x3800 <_Z17handleLinkBusMsgsv+0x502>
    37fe:	07 c4       	rjmp	.+2062   	; 0x400e <__DATA_REGION_LENGTH__+0xe>
    3800:	8a 81       	ldd	r24, Y+2	; 0x02
    3802:	9b 81       	ldd	r25, Y+3	; 0x03
    3804:	ac 81       	ldd	r26, Y+4	; 0x04
    3806:	bd 81       	ldd	r27, Y+5	; 0x05
    3808:	80 93 7a 47 	sts	0x477A, r24	; 0x80477a <g_event_finish_epoch>
    380c:	90 93 7b 47 	sts	0x477B, r25	; 0x80477b <g_event_finish_epoch+0x1>
    3810:	a0 93 7c 47 	sts	0x477C, r26	; 0x80477c <g_event_finish_epoch+0x2>
    3814:	b0 93 7d 47 	sts	0x477D, r27	; 0x80477d <g_event_finish_epoch+0x3>
    3818:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    381c:	8f 5f       	subi	r24, 0xFF	; 255
    381e:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3822:	f5 c3       	rjmp	.+2026   	; 0x400e <__DATA_REGION_LENGTH__+0xe>
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    382a:	8c 85       	ldd	r24, Y+12	; 0x0c
    382c:	9d 85       	ldd	r25, Y+13	; 0x0d
    382e:	fc 01       	movw	r30, r24
    3830:	80 81       	ld	r24, Z
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	09 f0       	breq	.+2      	; 0x3838 <_Z17handleLinkBusMsgsv+0x53a>
    3836:	4b c0       	rjmp	.+150    	; 0x38ce <_Z17handleLinkBusMsgsv+0x5d0>
    3838:	8c 85       	ldd	r24, Y+12	; 0x0c
    383a:	9d 85       	ldd	r25, Y+13	; 0x0d
    383c:	fc 01       	movw	r30, r24
    383e:	83 81       	ldd	r24, Z+3	; 0x03
    3840:	88 23       	and	r24, r24
    3842:	d1 f0       	breq	.+52     	; 0x3878 <_Z17handleLinkBusMsgsv+0x57a>
    3844:	8c 85       	ldd	r24, Y+12	; 0x0c
    3846:	9d 85       	ldd	r25, Y+13	; 0x0d
    3848:	03 96       	adiw	r24, 0x03	; 3
    384a:	44 e1       	ldi	r20, 0x14	; 20
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	bc 01       	movw	r22, r24
    3850:	87 e0       	ldi	r24, 0x07	; 7
    3852:	97 e4       	ldi	r25, 0x47	; 71
    3854:	0e 94 08 50 	call	0xa010	; 0xa010 <strncpy>
    3858:	60 e0       	ldi	r22, 0x00	; 0
    385a:	87 e0       	ldi	r24, 0x07	; 7
    385c:	97 e4       	ldi	r25, 0x47	; 71
    385e:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <ds3231_set_date_time>
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	bc 01       	movw	r22, r24
    3870:	cd 01       	movw	r24, r26
    3872:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    3876:	cd c3       	rjmp	.+1946   	; 0x4012 <__DATA_REGION_LENGTH__+0x12>
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	2b 2f       	mov	r18, r27
    3886:	2f 93       	push	r18
    3888:	2a 2f       	mov	r18, r26
    388a:	2f 93       	push	r18
    388c:	29 2f       	mov	r18, r25
    388e:	2f 93       	push	r18
    3890:	8f 93       	push	r24
    3892:	86 ef       	ldi	r24, 0xF6	; 246
    3894:	92 e4       	ldi	r25, 0x42	; 66
    3896:	89 2f       	mov	r24, r25
    3898:	8f 93       	push	r24
    389a:	86 ef       	ldi	r24, 0xF6	; 246
    389c:	92 e4       	ldi	r25, 0x42	; 66
    389e:	8f 93       	push	r24
    38a0:	87 e0       	ldi	r24, 0x07	; 7
    38a2:	97 e4       	ldi	r25, 0x47	; 71
    38a4:	89 2f       	mov	r24, r25
    38a6:	8f 93       	push	r24
    38a8:	87 e0       	ldi	r24, 0x07	; 7
    38aa:	97 e4       	ldi	r25, 0x47	; 71
    38ac:	8f 93       	push	r24
    38ae:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    38b2:	2d b7       	in	r18, 0x3d	; 61
    38b4:	3e b7       	in	r19, 0x3e	; 62
    38b6:	28 5f       	subi	r18, 0xF8	; 248
    38b8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ba:	cd bf       	out	0x3d, r28	; 61
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	47 e0       	ldi	r20, 0x07	; 7
    38c0:	57 e4       	ldi	r21, 0x47	; 71
    38c2:	6a ef       	ldi	r22, 0xFA	; 250
    38c4:	72 e4       	ldi	r23, 0x42	; 66
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	0e 94 bc 39 	call	0x7378	; 0x7378 <_Z11lb_send_msg13LBMessageTypePKcPc>
    38cc:	a2 c3       	rjmp	.+1860   	; 0x4012 <__DATA_REGION_LENGTH__+0x12>
    38ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    38d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    38d2:	fc 01       	movw	r30, r24
    38d4:	80 81       	ld	r24, Z
    38d6:	82 30       	cpi	r24, 0x02	; 2
    38d8:	09 f0       	breq	.+2      	; 0x38dc <_Z17handleLinkBusMsgsv+0x5de>
    38da:	9b c3       	rjmp	.+1846   	; 0x4012 <__DATA_REGION_LENGTH__+0x12>
    38dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    38de:	9d 85       	ldd	r25, Y+13	; 0x0d
    38e0:	fc 01       	movw	r30, r24
    38e2:	83 81       	ldd	r24, Z+3	; 0x03
    38e4:	88 35       	cpi	r24, 0x58	; 88
    38e6:	c9 f5       	brne	.+114    	; 0x395a <_Z17handleLinkBusMsgsv+0x65c>
    38e8:	1c 8a       	std	Y+20, r1	; 0x14
    38ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    38ee:	fc 01       	movw	r30, r24
    38f0:	80 8d       	ldd	r24, Z+24	; 0x18
    38f2:	88 23       	and	r24, r24
    38f4:	51 f0       	breq	.+20     	; 0x390a <_Z17handleLinkBusMsgsv+0x60c>
    38f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    38f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    38fa:	48 96       	adiw	r24, 0x18	; 24
    38fc:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <atoi>
    3900:	8c 8b       	std	Y+20, r24	; 0x14
    3902:	8c 89       	ldd	r24, Y+20	; 0x14
    3904:	0e 94 a9 30 	call	0x6152	; 0x6152 <ds3231_set_aging>
    3908:	84 c3       	rjmp	.+1800   	; 0x4012 <__DATA_REGION_LENGTH__+0x12>
    390a:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <ds3231_get_aging>
    390e:	8c 8b       	std	Y+20, r24	; 0x14
    3910:	8c 89       	ldd	r24, Y+20	; 0x14
    3912:	08 2e       	mov	r0, r24
    3914:	00 0c       	add	r0, r0
    3916:	99 0b       	sbc	r25, r25
    3918:	29 2f       	mov	r18, r25
    391a:	2f 93       	push	r18
    391c:	8f 93       	push	r24
    391e:	87 e0       	ldi	r24, 0x07	; 7
    3920:	93 e4       	ldi	r25, 0x43	; 67
    3922:	89 2f       	mov	r24, r25
    3924:	8f 93       	push	r24
    3926:	87 e0       	ldi	r24, 0x07	; 7
    3928:	93 e4       	ldi	r25, 0x43	; 67
    392a:	8f 93       	push	r24
    392c:	87 e0       	ldi	r24, 0x07	; 7
    392e:	97 e4       	ldi	r25, 0x47	; 71
    3930:	89 2f       	mov	r24, r25
    3932:	8f 93       	push	r24
    3934:	87 e0       	ldi	r24, 0x07	; 7
    3936:	97 e4       	ldi	r25, 0x47	; 71
    3938:	8f 93       	push	r24
    393a:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	47 e0       	ldi	r20, 0x07	; 7
    394c:	57 e4       	ldi	r21, 0x47	; 71
    394e:	6a ef       	ldi	r22, 0xFA	; 250
    3950:	72 e4       	ldi	r23, 0x42	; 66
    3952:	83 e0       	ldi	r24, 0x03	; 3
    3954:	0e 94 bc 39 	call	0x7378	; 0x7378 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3958:	5c c3       	rjmp	.+1720   	; 0x4012 <__DATA_REGION_LENGTH__+0x12>
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	8d 8b       	std	Y+21, r24	; 0x15
    3968:	9e 8b       	std	Y+22, r25	; 0x16
    396a:	af 8b       	std	Y+23, r26	; 0x17
    396c:	b8 8f       	std	Y+24, r27	; 0x18
    396e:	8d 89       	ldd	r24, Y+21	; 0x15
    3970:	9e 89       	ldd	r25, Y+22	; 0x16
    3972:	af 89       	ldd	r26, Y+23	; 0x17
    3974:	b8 8d       	ldd	r27, Y+24	; 0x18
    3976:	bc 01       	movw	r22, r24
    3978:	cd 01       	movw	r24, r26
    397a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    397e:	80 91 ad 47 	lds	r24, 0x47AD	; 0x8047ad <_ZZ17handleLinkBusMsgsvE8lastTime>
    3982:	90 91 ae 47 	lds	r25, 0x47AE	; 0x8047ae <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    3986:	a0 91 af 47 	lds	r26, 0x47AF	; 0x8047af <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    398a:	b0 91 b0 47 	lds	r27, 0x47B0	; 0x8047b0 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    398e:	2d 89       	ldd	r18, Y+21	; 0x15
    3990:	3e 89       	ldd	r19, Y+22	; 0x16
    3992:	4f 89       	ldd	r20, Y+23	; 0x17
    3994:	58 8d       	ldd	r21, Y+24	; 0x18
    3996:	28 17       	cp	r18, r24
    3998:	39 07       	cpc	r19, r25
    399a:	4a 07       	cpc	r20, r26
    399c:	5b 07       	cpc	r21, r27
    399e:	09 f4       	brne	.+2      	; 0x39a2 <_Z17handleLinkBusMsgsv+0x6a4>
    39a0:	38 c3       	rjmp	.+1648   	; 0x4012 <__DATA_REGION_LENGTH__+0x12>
    39a2:	88 8d       	ldd	r24, Y+24	; 0x18
    39a4:	8f 93       	push	r24
    39a6:	8f 89       	ldd	r24, Y+23	; 0x17
    39a8:	8f 93       	push	r24
    39aa:	8e 89       	ldd	r24, Y+22	; 0x16
    39ac:	8f 93       	push	r24
    39ae:	8d 89       	ldd	r24, Y+21	; 0x15
    39b0:	8f 93       	push	r24
    39b2:	86 ef       	ldi	r24, 0xF6	; 246
    39b4:	92 e4       	ldi	r25, 0x42	; 66
    39b6:	89 2f       	mov	r24, r25
    39b8:	8f 93       	push	r24
    39ba:	86 ef       	ldi	r24, 0xF6	; 246
    39bc:	92 e4       	ldi	r25, 0x42	; 66
    39be:	8f 93       	push	r24
    39c0:	87 e0       	ldi	r24, 0x07	; 7
    39c2:	97 e4       	ldi	r25, 0x47	; 71
    39c4:	89 2f       	mov	r24, r25
    39c6:	8f 93       	push	r24
    39c8:	87 e0       	ldi	r24, 0x07	; 7
    39ca:	97 e4       	ldi	r25, 0x47	; 71
    39cc:	8f 93       	push	r24
    39ce:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    39d2:	2d b7       	in	r18, 0x3d	; 61
    39d4:	3e b7       	in	r19, 0x3e	; 62
    39d6:	28 5f       	subi	r18, 0xF8	; 248
    39d8:	3f 4f       	sbci	r19, 0xFF	; 255
    39da:	cd bf       	out	0x3d, r28	; 61
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	47 e0       	ldi	r20, 0x07	; 7
    39e0:	57 e4       	ldi	r21, 0x47	; 71
    39e2:	6a ef       	ldi	r22, 0xFA	; 250
    39e4:	72 e4       	ldi	r23, 0x42	; 66
    39e6:	83 e0       	ldi	r24, 0x03	; 3
    39e8:	0e 94 bc 39 	call	0x7378	; 0x7378 <_Z11lb_send_msg13LBMessageTypePKcPc>
    39ec:	8d 89       	ldd	r24, Y+21	; 0x15
    39ee:	9e 89       	ldd	r25, Y+22	; 0x16
    39f0:	af 89       	ldd	r26, Y+23	; 0x17
    39f2:	b8 8d       	ldd	r27, Y+24	; 0x18
    39f4:	80 93 ad 47 	sts	0x47AD, r24	; 0x8047ad <_ZZ17handleLinkBusMsgsvE8lastTime>
    39f8:	90 93 ae 47 	sts	0x47AE, r25	; 0x8047ae <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    39fc:	a0 93 af 47 	sts	0x47AF, r26	; 0x8047af <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    3a00:	b0 93 b0 47 	sts	0x47B0, r27	; 0x8047b0 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    3a04:	06 c3       	rjmp	.+1548   	; 0x4012 <__DATA_REGION_LENGTH__+0x12>
    3a06:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a0a:	8f 5f       	subi	r24, 0xFF	; 255
    3a0c:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a10:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a12:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a14:	fc 01       	movw	r30, r24
    3a16:	83 81       	ldd	r24, Z+3	; 0x03
    3a18:	88 23       	and	r24, r24
    3a1a:	81 f1       	breq	.+96     	; 0x3a7c <_Z17handleLinkBusMsgsv+0x77e>
    3a1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a20:	03 96       	adiw	r24, 0x03	; 3
    3a22:	44 e1       	ldi	r20, 0x14	; 20
    3a24:	50 e0       	ldi	r21, 0x00	; 0
    3a26:	bc 01       	movw	r22, r24
    3a28:	8d e5       	ldi	r24, 0x5D	; 93
    3a2a:	97 e4       	ldi	r25, 0x47	; 71
    3a2c:	0e 94 08 50 	call	0xa010	; 0xa010 <strncpy>
    3a30:	80 91 5d 47 	lds	r24, 0x475D	; 0x80475d <g_messages_text+0x15>
    3a34:	88 23       	and	r24, r24
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <_Z17handleLinkBusMsgsv+0x73c>
    3a38:	ee c2       	rjmp	.+1500   	; 0x4016 <__DATA_REGION_LENGTH__+0x16>
    3a3a:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    3a3e:	88 2f       	mov	r24, r24
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	bc 01       	movw	r22, r24
    3a44:	8d e5       	ldi	r24, 0x5D	; 93
    3a46:	97 e4       	ldi	r25, 0x47	; 71
    3a48:	0e 94 1d 3c 	call	0x783a	; 0x783a <_Z26timeRequiredToSendStrAtWPMPcj>
    3a4c:	8c 50       	subi	r24, 0x0C	; 12
    3a4e:	9e 4f       	sbci	r25, 0xFE	; 254
    3a50:	96 95       	lsr	r25
    3a52:	87 95       	ror	r24
    3a54:	96 95       	lsr	r25
    3a56:	87 95       	ror	r24
    3a58:	96 95       	lsr	r25
    3a5a:	87 95       	ror	r24
    3a5c:	9c 01       	movw	r18, r24
    3a5e:	a5 ec       	ldi	r26, 0xC5	; 197
    3a60:	b0 e2       	ldi	r27, 0x20	; 32
    3a62:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <__umulhisi3>
    3a66:	92 95       	swap	r25
    3a68:	82 95       	swap	r24
    3a6a:	8f 70       	andi	r24, 0x0F	; 15
    3a6c:	89 27       	eor	r24, r25
    3a6e:	9f 70       	andi	r25, 0x0F	; 15
    3a70:	89 27       	eor	r24, r25
    3a72:	80 93 72 47 	sts	0x4772, r24	; 0x804772 <g_time_needed_for_ID>
    3a76:	90 93 73 47 	sts	0x4773, r25	; 0x804773 <g_time_needed_for_ID+0x1>
    3a7a:	cd c2       	rjmp	.+1434   	; 0x4016 <__DATA_REGION_LENGTH__+0x16>
    3a7c:	80 91 5d 47 	lds	r24, 0x475D	; 0x80475d <g_messages_text+0x15>
    3a80:	88 23       	and	r24, r24
    3a82:	09 f4       	brne	.+2      	; 0x3a86 <_Z17handleLinkBusMsgsv+0x788>
    3a84:	c8 c2       	rjmp	.+1424   	; 0x4016 <__DATA_REGION_LENGTH__+0x16>
    3a86:	8d e5       	ldi	r24, 0x5D	; 93
    3a88:	97 e4       	ldi	r25, 0x47	; 71
    3a8a:	89 2f       	mov	r24, r25
    3a8c:	8f 93       	push	r24
    3a8e:	8d e5       	ldi	r24, 0x5D	; 93
    3a90:	97 e4       	ldi	r25, 0x47	; 71
    3a92:	8f 93       	push	r24
    3a94:	8c e0       	ldi	r24, 0x0C	; 12
    3a96:	93 e4       	ldi	r25, 0x43	; 67
    3a98:	89 2f       	mov	r24, r25
    3a9a:	8f 93       	push	r24
    3a9c:	8c e0       	ldi	r24, 0x0C	; 12
    3a9e:	93 e4       	ldi	r25, 0x43	; 67
    3aa0:	8f 93       	push	r24
    3aa2:	87 e0       	ldi	r24, 0x07	; 7
    3aa4:	97 e4       	ldi	r25, 0x47	; 71
    3aa6:	89 2f       	mov	r24, r25
    3aa8:	8f 93       	push	r24
    3aaa:	87 e0       	ldi	r24, 0x07	; 7
    3aac:	97 e4       	ldi	r25, 0x47	; 71
    3aae:	8f 93       	push	r24
    3ab0:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	0f 90       	pop	r0
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	87 e0       	ldi	r24, 0x07	; 7
    3ac2:	97 e4       	ldi	r25, 0x47	; 71
    3ac4:	0e 94 7b 39 	call	0x72f6	; 0x72f6 <_Z12lb_send_textPc>
    3ac8:	19 82       	std	Y+1, r1	; 0x01
    3aca:	a5 c2       	rjmp	.+1354   	; 0x4016 <__DATA_REGION_LENGTH__+0x16>
    3acc:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3ad0:	89 8f       	std	Y+25, r24	; 0x19
    3ad2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ad4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	83 81       	ldd	r24, Z+3	; 0x03
    3ada:	89 34       	cpi	r24, 0x49	; 73
    3adc:	09 f0       	breq	.+2      	; 0x3ae0 <_Z17handleLinkBusMsgsv+0x7e2>
    3ade:	4f c0       	rjmp	.+158    	; 0x3b7e <_Z17handleLinkBusMsgsv+0x880>
    3ae0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ae2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	80 8d       	ldd	r24, Z+24	; 0x18
    3ae8:	88 23       	and	r24, r24
    3aea:	09 f4       	brne	.+2      	; 0x3aee <_Z17handleLinkBusMsgsv+0x7f0>
    3aec:	96 c2       	rjmp	.+1324   	; 0x401a <__DATA_REGION_LENGTH__+0x1a>
    3aee:	8c 85       	ldd	r24, Y+12	; 0x0c
    3af0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3af2:	48 96       	adiw	r24, 0x18	; 24
    3af4:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	89 8f       	std	Y+25, r24	; 0x19
    3afe:	89 8d       	ldd	r24, Y+25	; 0x19
    3b00:	8a 8f       	std	Y+26, r24	; 0x1a
    3b02:	85 e0       	ldi	r24, 0x05	; 5
    3b04:	8b 8f       	std	Y+27, r24	; 0x1b
    3b06:	84 e1       	ldi	r24, 0x14	; 20
    3b08:	8c 8f       	std	Y+28, r24	; 0x1c
    3b0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b0e:	89 17       	cp	r24, r25
    3b10:	40 f0       	brcs	.+16     	; 0x3b22 <_Z17handleLinkBusMsgsv+0x824>
    3b12:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b16:	98 17       	cp	r25, r24
    3b18:	10 f4       	brcc	.+4      	; 0x3b1e <_Z17handleLinkBusMsgsv+0x820>
    3b1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b1c:	03 c0       	rjmp	.+6      	; 0x3b24 <_Z17handleLinkBusMsgsv+0x826>
    3b1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b20:	01 c0       	rjmp	.+2      	; 0x3b24 <_Z17handleLinkBusMsgsv+0x826>
    3b22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b24:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    3b28:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b2c:	8f 5f       	subi	r24, 0xFF	; 255
    3b2e:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b32:	80 91 5d 47 	lds	r24, 0x475D	; 0x80475d <g_messages_text+0x15>
    3b36:	88 23       	and	r24, r24
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <_Z17handleLinkBusMsgsv+0x83e>
    3b3a:	6f c2       	rjmp	.+1246   	; 0x401a <__DATA_REGION_LENGTH__+0x1a>
    3b3c:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    3b40:	88 2f       	mov	r24, r24
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	bc 01       	movw	r22, r24
    3b46:	8d e5       	ldi	r24, 0x5D	; 93
    3b48:	97 e4       	ldi	r25, 0x47	; 71
    3b4a:	0e 94 1d 3c 	call	0x783a	; 0x783a <_Z26timeRequiredToSendStrAtWPMPcj>
    3b4e:	8c 50       	subi	r24, 0x0C	; 12
    3b50:	9e 4f       	sbci	r25, 0xFE	; 254
    3b52:	96 95       	lsr	r25
    3b54:	87 95       	ror	r24
    3b56:	96 95       	lsr	r25
    3b58:	87 95       	ror	r24
    3b5a:	96 95       	lsr	r25
    3b5c:	87 95       	ror	r24
    3b5e:	9c 01       	movw	r18, r24
    3b60:	a5 ec       	ldi	r26, 0xC5	; 197
    3b62:	b0 e2       	ldi	r27, 0x20	; 32
    3b64:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <__umulhisi3>
    3b68:	92 95       	swap	r25
    3b6a:	82 95       	swap	r24
    3b6c:	8f 70       	andi	r24, 0x0F	; 15
    3b6e:	89 27       	eor	r24, r25
    3b70:	9f 70       	andi	r25, 0x0F	; 15
    3b72:	89 27       	eor	r24, r25
    3b74:	80 93 72 47 	sts	0x4772, r24	; 0x804772 <g_time_needed_for_ID>
    3b78:	90 93 73 47 	sts	0x4773, r25	; 0x804773 <g_time_needed_for_ID+0x1>
    3b7c:	4e c2       	rjmp	.+1180   	; 0x401a <__DATA_REGION_LENGTH__+0x1a>
    3b7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b80:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b82:	fc 01       	movw	r30, r24
    3b84:	83 81       	ldd	r24, Z+3	; 0x03
    3b86:	80 35       	cpi	r24, 0x50	; 80
    3b88:	09 f0       	breq	.+2      	; 0x3b8c <_Z17handleLinkBusMsgsv+0x88e>
    3b8a:	47 c2       	rjmp	.+1166   	; 0x401a <__DATA_REGION_LENGTH__+0x1a>
    3b8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b90:	fc 01       	movw	r30, r24
    3b92:	80 8d       	ldd	r24, Z+24	; 0x18
    3b94:	88 23       	and	r24, r24
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <_Z17handleLinkBusMsgsv+0x89c>
    3b98:	40 c2       	rjmp	.+1152   	; 0x401a <__DATA_REGION_LENGTH__+0x1a>
    3b9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b9c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b9e:	48 96       	adiw	r24, 0x18	; 24
    3ba0:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	89 8f       	std	Y+25, r24	; 0x19
    3baa:	89 8d       	ldd	r24, Y+25	; 0x19
    3bac:	8d 8f       	std	Y+29, r24	; 0x1d
    3bae:	85 e0       	ldi	r24, 0x05	; 5
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	8e 8f       	std	Y+30, r24	; 0x1e
    3bb4:	9f 8f       	std	Y+31, r25	; 0x1f
    3bb6:	84 e1       	ldi	r24, 0x14	; 20
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	88 a3       	std	Y+32, r24	; 0x20
    3bbc:	99 a3       	std	Y+33, r25	; 0x21
    3bbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bc0:	28 2f       	mov	r18, r24
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	88 a1       	ldd	r24, Y+32	; 0x20
    3bc6:	99 a1       	ldd	r25, Y+33	; 0x21
    3bc8:	82 17       	cp	r24, r18
    3bca:	93 07       	cpc	r25, r19
    3bcc:	54 f0       	brlt	.+20     	; 0x3be2 <_Z17handleLinkBusMsgsv+0x8e4>
    3bce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bd0:	88 2f       	mov	r24, r24
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3bd6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3bd8:	82 17       	cp	r24, r18
    3bda:	93 07       	cpc	r25, r19
    3bdc:	24 f4       	brge	.+8      	; 0x3be6 <_Z17handleLinkBusMsgsv+0x8e8>
    3bde:	c9 01       	movw	r24, r18
    3be0:	02 c0       	rjmp	.+4      	; 0x3be6 <_Z17handleLinkBusMsgsv+0x8e8>
    3be2:	88 a1       	ldd	r24, Y+32	; 0x20
    3be4:	99 a1       	ldd	r25, Y+33	; 0x21
    3be6:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    3bea:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3bee:	8f 5f       	subi	r24, 0xFF	; 255
    3bf0:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3bf4:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3bf8:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    3bfc:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    3c00:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    3c04:	0a c2       	rjmp	.+1044   	; 0x401a <__DATA_REGION_LENGTH__+0x1a>
    3c06:	1a a2       	std	Y+34, r1	; 0x22
    3c08:	1b a2       	std	Y+35, r1	; 0x23
    3c0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c0e:	fc 01       	movw	r30, r24
    3c10:	83 81       	ldd	r24, Z+3	; 0x03
    3c12:	80 33       	cpi	r24, 0x30	; 48
    3c14:	e1 f4       	brne	.+56     	; 0x3c4e <_Z17handleLinkBusMsgsv+0x950>
    3c16:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c18:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	80 8d       	ldd	r24, Z+24	; 0x18
    3c1e:	88 23       	and	r24, r24
    3c20:	09 f4       	brne	.+2      	; 0x3c24 <_Z17handleLinkBusMsgsv+0x926>
    3c22:	fd c1       	rjmp	.+1018   	; 0x401e <__DATA_REGION_LENGTH__+0x1e>
    3c24:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c26:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c28:	48 96       	adiw	r24, 0x18	; 24
    3c2a:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	8a a3       	std	Y+34, r24	; 0x22
    3c34:	9b a3       	std	Y+35, r25	; 0x23
    3c36:	8a a1       	ldd	r24, Y+34	; 0x22
    3c38:	9b a1       	ldd	r25, Y+35	; 0x23
    3c3a:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    3c3e:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    3c42:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c46:	8f 5f       	subi	r24, 0xFF	; 255
    3c48:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c4c:	e8 c1       	rjmp	.+976    	; 0x401e <__DATA_REGION_LENGTH__+0x1e>
    3c4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c50:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c52:	fc 01       	movw	r30, r24
    3c54:	83 81       	ldd	r24, Z+3	; 0x03
    3c56:	81 33       	cpi	r24, 0x31	; 49
    3c58:	e1 f4       	brne	.+56     	; 0x3c92 <_Z17handleLinkBusMsgsv+0x994>
    3c5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c5e:	fc 01       	movw	r30, r24
    3c60:	80 8d       	ldd	r24, Z+24	; 0x18
    3c62:	88 23       	and	r24, r24
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <_Z17handleLinkBusMsgsv+0x96a>
    3c66:	db c1       	rjmp	.+950    	; 0x401e <__DATA_REGION_LENGTH__+0x1e>
    3c68:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c6c:	48 96       	adiw	r24, 0x18	; 24
    3c6e:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	8a a3       	std	Y+34, r24	; 0x22
    3c78:	9b a3       	std	Y+35, r25	; 0x23
    3c7a:	8a a1       	ldd	r24, Y+34	; 0x22
    3c7c:	9b a1       	ldd	r25, Y+35	; 0x23
    3c7e:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3c82:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3c86:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c8a:	8f 5f       	subi	r24, 0xFF	; 255
    3c8c:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c90:	c6 c1       	rjmp	.+908    	; 0x401e <__DATA_REGION_LENGTH__+0x1e>
    3c92:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c94:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c96:	fc 01       	movw	r30, r24
    3c98:	83 81       	ldd	r24, Z+3	; 0x03
    3c9a:	89 34       	cpi	r24, 0x49	; 73
    3c9c:	e1 f4       	brne	.+56     	; 0x3cd6 <_Z17handleLinkBusMsgsv+0x9d8>
    3c9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ca0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	80 8d       	ldd	r24, Z+24	; 0x18
    3ca6:	88 23       	and	r24, r24
    3ca8:	09 f4       	brne	.+2      	; 0x3cac <_Z17handleLinkBusMsgsv+0x9ae>
    3caa:	b9 c1       	rjmp	.+882    	; 0x401e <__DATA_REGION_LENGTH__+0x1e>
    3cac:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cae:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cb0:	48 96       	adiw	r24, 0x18	; 24
    3cb2:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	8a a3       	std	Y+34, r24	; 0x22
    3cbc:	9b a3       	std	Y+35, r25	; 0x23
    3cbe:	8a a1       	ldd	r24, Y+34	; 0x22
    3cc0:	9b a1       	ldd	r25, Y+35	; 0x23
    3cc2:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <g_ID_period_seconds>
    3cc6:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <g_ID_period_seconds+0x1>
    3cca:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3cce:	8f 5f       	subi	r24, 0xFF	; 255
    3cd0:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3cd4:	a4 c1       	rjmp	.+840    	; 0x401e <__DATA_REGION_LENGTH__+0x1e>
    3cd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cda:	fc 01       	movw	r30, r24
    3cdc:	83 81       	ldd	r24, Z+3	; 0x03
    3cde:	84 34       	cpi	r24, 0x44	; 68
    3ce0:	09 f0       	breq	.+2      	; 0x3ce4 <_Z17handleLinkBusMsgsv+0x9e6>
    3ce2:	9d c1       	rjmp	.+826    	; 0x401e <__DATA_REGION_LENGTH__+0x1e>
    3ce4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ce6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ce8:	fc 01       	movw	r30, r24
    3cea:	80 8d       	ldd	r24, Z+24	; 0x18
    3cec:	88 23       	and	r24, r24
    3cee:	09 f4       	brne	.+2      	; 0x3cf2 <_Z17handleLinkBusMsgsv+0x9f4>
    3cf0:	96 c1       	rjmp	.+812    	; 0x401e <__DATA_REGION_LENGTH__+0x1e>
    3cf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cf4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cf6:	48 96       	adiw	r24, 0x18	; 24
    3cf8:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	8a a3       	std	Y+34, r24	; 0x22
    3d02:	9b a3       	std	Y+35, r25	; 0x23
    3d04:	8a a1       	ldd	r24, Y+34	; 0x22
    3d06:	9b a1       	ldd	r25, Y+35	; 0x23
    3d08:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    3d0c:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
    3d10:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3d14:	8f 5f       	subi	r24, 0xFF	; 255
    3d16:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3d1a:	81 c1       	rjmp	.+770    	; 0x401e <__DATA_REGION_LENGTH__+0x1e>
    3d1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d20:	fc 01       	movw	r30, r24
    3d22:	83 81       	ldd	r24, Z+3	; 0x03
    3d24:	88 23       	and	r24, r24
    3d26:	09 f4       	brne	.+2      	; 0x3d2a <_Z17handleLinkBusMsgsv+0xa2c>
    3d28:	7c c1       	rjmp	.+760    	; 0x4022 <__DATA_REGION_LENGTH__+0x22>
    3d2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d2e:	03 96       	adiw	r24, 0x03	; 3
    3d30:	44 e1       	ldi	r20, 0x14	; 20
    3d32:	50 e0       	ldi	r21, 0x00	; 0
    3d34:	bc 01       	movw	r22, r24
    3d36:	88 e4       	ldi	r24, 0x48	; 72
    3d38:	97 e4       	ldi	r25, 0x47	; 71
    3d3a:	0e 94 08 50 	call	0xa010	; 0xa010 <strncpy>
    3d3e:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3d42:	8f 5f       	subi	r24, 0xFF	; 255
    3d44:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3d48:	6c c1       	rjmp	.+728    	; 0x4022 <__DATA_REGION_LENGTH__+0x22>
    3d4a:	1e 82       	std	Y+6, r1	; 0x06
    3d4c:	1f 82       	std	Y+7, r1	; 0x07
    3d4e:	18 86       	std	Y+8, r1	; 0x08
    3d50:	19 86       	std	Y+9, r1	; 0x09
    3d52:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d54:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d56:	fc 01       	movw	r30, r24
    3d58:	83 81       	ldd	r24, Z+3	; 0x03
    3d5a:	88 23       	and	r24, r24
    3d5c:	99 f1       	breq	.+102    	; 0x3dc4 <_Z17handleLinkBusMsgsv+0xac6>
    3d5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d60:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d62:	03 96       	adiw	r24, 0x03	; 3
    3d64:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	80 93 b1 47 	sts	0x47B1, r24	; 0x8047b1 <_ZZ17handleLinkBusMsgsvE1f>
    3d70:	90 93 b2 47 	sts	0x47B2, r25	; 0x8047b2 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3d74:	a0 93 b3 47 	sts	0x47B3, r26	; 0x8047b3 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3d78:	b0 93 b4 47 	sts	0x47B4, r27	; 0x8047b4 <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3d7c:	80 91 b1 47 	lds	r24, 0x47B1	; 0x8047b1 <_ZZ17handleLinkBusMsgsvE1f>
    3d80:	90 91 b2 47 	lds	r25, 0x47B2	; 0x8047b2 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3d84:	a0 91 b3 47 	lds	r26, 0x47B3	; 0x8047b3 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3d88:	b0 91 b4 47 	lds	r27, 0x47B4	; 0x8047b4 <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3d8c:	8e a7       	std	Y+46, r24	; 0x2e
    3d8e:	9f a7       	std	Y+47, r25	; 0x2f
    3d90:	a8 ab       	std	Y+48, r26	; 0x30
    3d92:	b9 ab       	std	Y+49, r27	; 0x31
    3d94:	ce 01       	movw	r24, r28
    3d96:	8e 96       	adiw	r24, 0x2e	; 46
    3d98:	61 e0       	ldi	r22, 0x01	; 1
    3d9a:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <_Z14txSetFrequencyPmb>
    3d9e:	98 2f       	mov	r25, r24
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	89 27       	eor	r24, r25
    3da4:	88 23       	and	r24, r24
    3da6:	b1 f0       	breq	.+44     	; 0x3dd4 <_Z17handleLinkBusMsgsv+0xad6>
    3da8:	8e a5       	ldd	r24, Y+46	; 0x2e
    3daa:	9f a5       	ldd	r25, Y+47	; 0x2f
    3dac:	a8 a9       	ldd	r26, Y+48	; 0x30
    3dae:	b9 a9       	ldd	r27, Y+49	; 0x31
    3db0:	8e 83       	std	Y+6, r24	; 0x06
    3db2:	9f 83       	std	Y+7, r25	; 0x07
    3db4:	a8 87       	std	Y+8, r26	; 0x08
    3db6:	b9 87       	std	Y+9, r27	; 0x09
    3db8:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3dbc:	8f 5f       	subi	r24, 0xFF	; 255
    3dbe:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3dc2:	08 c0       	rjmp	.+16     	; 0x3dd4 <_Z17handleLinkBusMsgsv+0xad6>
    3dc4:	0e 94 8c 46 	call	0x8d18	; 0x8d18 <_Z14txGetFrequencyv>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	8e 83       	std	Y+6, r24	; 0x06
    3dce:	9f 83       	std	Y+7, r25	; 0x07
    3dd0:	a8 87       	std	Y+8, r26	; 0x08
    3dd2:	b9 87       	std	Y+9, r27	; 0x09
    3dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    3dd8:	a8 85       	ldd	r26, Y+8	; 0x08
    3dda:	b9 85       	ldd	r27, Y+9	; 0x09
    3ddc:	89 2b       	or	r24, r25
    3dde:	8a 2b       	or	r24, r26
    3de0:	8b 2b       	or	r24, r27
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <_Z17handleLinkBusMsgsv+0xae8>
    3de4:	20 c1       	rjmp	.+576    	; 0x4026 <__DATA_REGION_LENGTH__+0x26>
    3de6:	89 85       	ldd	r24, Y+9	; 0x09
    3de8:	8f 93       	push	r24
    3dea:	88 85       	ldd	r24, Y+8	; 0x08
    3dec:	8f 93       	push	r24
    3dee:	8f 81       	ldd	r24, Y+7	; 0x07
    3df0:	8f 93       	push	r24
    3df2:	8e 81       	ldd	r24, Y+6	; 0x06
    3df4:	8f 93       	push	r24
    3df6:	85 e1       	ldi	r24, 0x15	; 21
    3df8:	93 e4       	ldi	r25, 0x43	; 67
    3dfa:	89 2f       	mov	r24, r25
    3dfc:	8f 93       	push	r24
    3dfe:	85 e1       	ldi	r24, 0x15	; 21
    3e00:	93 e4       	ldi	r25, 0x43	; 67
    3e02:	8f 93       	push	r24
    3e04:	87 e0       	ldi	r24, 0x07	; 7
    3e06:	97 e4       	ldi	r25, 0x47	; 71
    3e08:	89 2f       	mov	r24, r25
    3e0a:	8f 93       	push	r24
    3e0c:	87 e0       	ldi	r24, 0x07	; 7
    3e0e:	97 e4       	ldi	r25, 0x47	; 71
    3e10:	8f 93       	push	r24
    3e12:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    3e16:	2d b7       	in	r18, 0x3d	; 61
    3e18:	3e b7       	in	r19, 0x3e	; 62
    3e1a:	28 5f       	subi	r18, 0xF8	; 248
    3e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	de bf       	out	0x3e, r29	; 62
    3e22:	47 e0       	ldi	r20, 0x07	; 7
    3e24:	57 e4       	ldi	r21, 0x47	; 71
    3e26:	6a e1       	ldi	r22, 0x1A	; 26
    3e28:	73 e4       	ldi	r23, 0x43	; 67
    3e2a:	83 e0       	ldi	r24, 0x03	; 3
    3e2c:	0e 94 bc 39 	call	0x7378	; 0x7378 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3e30:	fa c0       	rjmp	.+500    	; 0x4026 <__DATA_REGION_LENGTH__+0x26>
    3e32:	80 91 88 47 	lds	r24, 0x4788	; 0x804788 <_ZL22g_lastConversionResult>
    3e36:	90 91 89 47 	lds	r25, 0x4789	; 0x804789 <_ZL22g_lastConversionResult+0x1>
    3e3a:	21 e0       	ldi	r18, 0x01	; 1
    3e3c:	8d 38       	cpi	r24, 0x8D	; 141
    3e3e:	92 40       	sbci	r25, 0x02	; 2
    3e40:	08 f4       	brcc	.+2      	; 0x3e44 <_Z17handleLinkBusMsgsv+0xb46>
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	22 23       	and	r18, r18
    3e46:	09 f4       	brne	.+2      	; 0x3e4a <_Z17handleLinkBusMsgsv+0xb4c>
    3e48:	7c c0       	rjmp	.+248    	; 0x3f42 <_Z17handleLinkBusMsgsv+0xc44>
    3e4a:	80 91 88 47 	lds	r24, 0x4788	; 0x804788 <_ZL22g_lastConversionResult>
    3e4e:	90 91 89 47 	lds	r25, 0x4789	; 0x804789 <_ZL22g_lastConversionResult+0x1>
    3e52:	cc 01       	movw	r24, r24
    3e54:	a0 e0       	ldi	r26, 0x00	; 0
    3e56:	b0 e0       	ldi	r27, 0x00	; 0
    3e58:	9c 01       	movw	r18, r24
    3e5a:	ad 01       	movw	r20, r26
    3e5c:	60 ea       	ldi	r22, 0xA0	; 160
    3e5e:	78 e6       	ldi	r23, 0x68	; 104
    3e60:	86 e0       	ldi	r24, 0x06	; 6
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__mulsi3>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	7c 01       	movw	r14, r24
    3e6e:	8d 01       	movw	r16, r26
    3e70:	ed e7       	ldi	r30, 0x7D	; 125
    3e72:	fe 1a       	sub	r15, r30
    3e74:	0c 40       	sbci	r16, 0x0C	; 12
    3e76:	1e 4f       	sbci	r17, 0xFE	; 254
    3e78:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3e7c:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3e80:	cc 01       	movw	r24, r24
    3e82:	a0 e0       	ldi	r26, 0x00	; 0
    3e84:	b0 e0       	ldi	r27, 0x00	; 0
    3e86:	9c 01       	movw	r18, r24
    3e88:	ad 01       	movw	r20, r26
    3e8a:	64 e6       	ldi	r22, 0x64	; 100
    3e8c:	70 e7       	ldi	r23, 0x70	; 112
    3e8e:	8e ef       	ldi	r24, 0xFE	; 254
    3e90:	9f ef       	ldi	r25, 0xFF	; 255
    3e92:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__mulsi3>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	e8 0e       	add	r14, r24
    3e9c:	f9 1e       	adc	r15, r25
    3e9e:	0a 1f       	adc	r16, r26
    3ea0:	1b 1f       	adc	r17, r27
    3ea2:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3ea6:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3eaa:	cc 01       	movw	r24, r24
    3eac:	a0 e0       	ldi	r26, 0x00	; 0
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	28 e6       	ldi	r18, 0x68	; 104
    3eb2:	30 e1       	ldi	r19, 0x10	; 16
    3eb4:	40 e0       	ldi	r20, 0x00	; 0
    3eb6:	50 e0       	ldi	r21, 0x00	; 0
    3eb8:	28 1b       	sub	r18, r24
    3eba:	39 0b       	sbc	r19, r25
    3ebc:	4a 0b       	sbc	r20, r26
    3ebe:	5b 0b       	sbc	r21, r27
    3ec0:	8f ef       	ldi	r24, 0xFF	; 255
    3ec2:	93 e0       	ldi	r25, 0x03	; 3
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <__muluhisi3>
    3eca:	9b 01       	movw	r18, r22
    3ecc:	ac 01       	movw	r20, r24
    3ece:	c8 01       	movw	r24, r16
    3ed0:	b7 01       	movw	r22, r14
    3ed2:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <__divmodsi4>
    3ed6:	da 01       	movw	r26, r20
    3ed8:	c9 01       	movw	r24, r18
    3eda:	8c a3       	std	Y+36, r24	; 0x24
    3edc:	9d a3       	std	Y+37, r25	; 0x25
    3ede:	ae a3       	std	Y+38, r26	; 0x26
    3ee0:	bf a3       	std	Y+39, r27	; 0x27
    3ee2:	18 a6       	std	Y+40, r1	; 0x28
    3ee4:	19 a6       	std	Y+41, r1	; 0x29
    3ee6:	84 e6       	ldi	r24, 0x64	; 100
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	8a a7       	std	Y+42, r24	; 0x2a
    3eec:	9b a7       	std	Y+43, r25	; 0x2b
    3eee:	8a a5       	ldd	r24, Y+42	; 0x2a
    3ef0:	9b a5       	ldd	r25, Y+43	; 0x2b
    3ef2:	9c 01       	movw	r18, r24
    3ef4:	99 0f       	add	r25, r25
    3ef6:	44 0b       	sbc	r20, r20
    3ef8:	55 0b       	sbc	r21, r21
    3efa:	8c a1       	ldd	r24, Y+36	; 0x24
    3efc:	9d a1       	ldd	r25, Y+37	; 0x25
    3efe:	ae a1       	ldd	r26, Y+38	; 0x26
    3f00:	bf a1       	ldd	r27, Y+39	; 0x27
    3f02:	28 17       	cp	r18, r24
    3f04:	39 07       	cpc	r19, r25
    3f06:	4a 07       	cpc	r20, r26
    3f08:	5b 07       	cpc	r21, r27
    3f0a:	3c f4       	brge	.+14     	; 0x3f1a <_Z17handleLinkBusMsgsv+0xc1c>
    3f0c:	8a a5       	ldd	r24, Y+42	; 0x2a
    3f0e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3f10:	09 2e       	mov	r0, r25
    3f12:	00 0c       	add	r0, r0
    3f14:	aa 0b       	sbc	r26, r26
    3f16:	bb 0b       	sbc	r27, r27
    3f18:	11 c0       	rjmp	.+34     	; 0x3f3c <_Z17handleLinkBusMsgsv+0xc3e>
    3f1a:	88 a5       	ldd	r24, Y+40	; 0x28
    3f1c:	99 a5       	ldd	r25, Y+41	; 0x29
    3f1e:	09 2e       	mov	r0, r25
    3f20:	00 0c       	add	r0, r0
    3f22:	aa 0b       	sbc	r26, r26
    3f24:	bb 0b       	sbc	r27, r27
    3f26:	2c a1       	ldd	r18, Y+36	; 0x24
    3f28:	3d a1       	ldd	r19, Y+37	; 0x25
    3f2a:	4e a1       	ldd	r20, Y+38	; 0x26
    3f2c:	5f a1       	ldd	r21, Y+39	; 0x27
    3f2e:	82 17       	cp	r24, r18
    3f30:	93 07       	cpc	r25, r19
    3f32:	a4 07       	cpc	r26, r20
    3f34:	b5 07       	cpc	r27, r21
    3f36:	14 f4       	brge	.+4      	; 0x3f3c <_Z17handleLinkBusMsgsv+0xc3e>
    3f38:	da 01       	movw	r26, r20
    3f3a:	c9 01       	movw	r24, r18
    3f3c:	8a 87       	std	Y+10, r24	; 0x0a
    3f3e:	9b 87       	std	Y+11, r25	; 0x0b
    3f40:	2f c0       	rjmp	.+94     	; 0x3fa0 <_Z17handleLinkBusMsgsv+0xca2>
    3f42:	80 91 8c 47 	lds	r24, 0x478C	; 0x80478c <_ZL22g_lastConversionResult+0x4>
    3f46:	90 91 8d 47 	lds	r25, 0x478D	; 0x80478d <_ZL22g_lastConversionResult+0x5>
    3f4a:	9c 01       	movw	r18, r24
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	50 e0       	ldi	r21, 0x00	; 0
    3f50:	da 01       	movw	r26, r20
    3f52:	c9 01       	movw	r24, r18
    3f54:	88 0f       	add	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	aa 1f       	adc	r26, r26
    3f5a:	bb 1f       	adc	r27, r27
    3f5c:	88 0f       	add	r24, r24
    3f5e:	99 1f       	adc	r25, r25
    3f60:	aa 1f       	adc	r26, r26
    3f62:	bb 1f       	adc	r27, r27
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	aa 1f       	adc	r26, r26
    3f6a:	bb 1f       	adc	r27, r27
    3f6c:	82 1b       	sub	r24, r18
    3f6e:	93 0b       	sbc	r25, r19
    3f70:	a4 0b       	sbc	r26, r20
    3f72:	b5 0b       	sbc	r27, r21
    3f74:	88 0f       	add	r24, r24
    3f76:	99 1f       	adc	r25, r25
    3f78:	aa 1f       	adc	r26, r26
    3f7a:	bb 1f       	adc	r27, r27
    3f7c:	8a 5c       	subi	r24, 0xCA	; 202
    3f7e:	9e 4f       	sbci	r25, 0xFE	; 254
    3f80:	af 4f       	sbci	r26, 0xFF	; 255
    3f82:	bf 4f       	sbci	r27, 0xFF	; 255
    3f84:	24 e6       	ldi	r18, 0x64	; 100
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	40 e0       	ldi	r20, 0x00	; 0
    3f8a:	50 e0       	ldi	r21, 0x00	; 0
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <__divmodsi4>
    3f94:	da 01       	movw	r26, r20
    3f96:	c9 01       	movw	r24, r18
    3f98:	80 5f       	subi	r24, 0xF0	; 240
    3f9a:	98 4d       	sbci	r25, 0xD8	; 216
    3f9c:	8a 87       	std	Y+10, r24	; 0x0a
    3f9e:	9b 87       	std	Y+11, r25	; 0x0b
    3fa0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fa2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fa4:	6e e1       	ldi	r22, 0x1E	; 30
    3fa6:	73 e4       	ldi	r23, 0x43	; 67
    3fa8:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <_Z16lb_broadcast_numjPKc>
    3fac:	80 e0       	ldi	r24, 0x00	; 0
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	bc 01       	movw	r22, r24
    3fba:	cd 01       	movw	r24, r26
    3fbc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    3fc0:	35 c0       	rjmp	.+106    	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    3fc2:	ce 01       	movw	r24, r28
    3fc4:	c2 96       	adiw	r24, 0x32	; 50
    3fc6:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <ds3231_get_temp>
    3fca:	98 2f       	mov	r25, r24
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	89 27       	eor	r24, r25
    3fd0:	88 23       	and	r24, r24
    3fd2:	59 f1       	breq	.+86     	; 0x402a <__DATA_REGION_LENGTH__+0x2a>
    3fd4:	8a a9       	ldd	r24, Y+50	; 0x32
    3fd6:	9b a9       	ldd	r25, Y+51	; 0x33
    3fd8:	63 e2       	ldi	r22, 0x23	; 35
    3fda:	73 e4       	ldi	r23, 0x43	; 67
    3fdc:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <_Z16lb_broadcast_numjPKc>
    3fe0:	24 c0       	rjmp	.+72     	; 0x402a <__DATA_REGION_LENGTH__+0x2a>
    3fe2:	43 e6       	ldi	r20, 0x63	; 99
    3fe4:	50 e4       	ldi	r21, 0x40	; 64
    3fe6:	68 e2       	ldi	r22, 0x28	; 40
    3fe8:	73 e4       	ldi	r23, 0x43	; 67
    3fea:	83 e0       	ldi	r24, 0x03	; 3
    3fec:	0e 94 bc 39 	call	0x7378	; 0x7378 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3ff0:	1d c0       	rjmp	.+58     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    3ff2:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_Z16linkbus_reset_rxv>
    3ff6:	8e ec       	ldi	r24, 0xCE	; 206
    3ff8:	80 93 39 47 	sts	0x4739, r24	; 0x804739 <_ZL17g_last_error_code>
    3ffc:	17 c0       	rjmp	.+46     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    3ffe:	00 00       	nop
    4000:	15 c0       	rjmp	.+42     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    4002:	00 00       	nop
    4004:	13 c0       	rjmp	.+38     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    4006:	00 00       	nop
    4008:	11 c0       	rjmp	.+34     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    400a:	00 00       	nop
    400c:	0f c0       	rjmp	.+30     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    400e:	00 00       	nop
    4010:	0d c0       	rjmp	.+26     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    4012:	00 00       	nop
    4014:	0b c0       	rjmp	.+22     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    4016:	00 00       	nop
    4018:	09 c0       	rjmp	.+18     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    401a:	00 00       	nop
    401c:	07 c0       	rjmp	.+14     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    401e:	00 00       	nop
    4020:	05 c0       	rjmp	.+10     	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    4022:	00 00       	nop
    4024:	03 c0       	rjmp	.+6      	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    4026:	00 00       	nop
    4028:	01 c0       	rjmp	.+2      	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    402a:	00 00       	nop
    402c:	8c 85       	ldd	r24, Y+12	; 0x0c
    402e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4030:	fc 01       	movw	r30, r24
    4032:	11 82       	std	Z+1, r1	; 0x01
    4034:	12 82       	std	Z+2, r1	; 0x02
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	88 23       	and	r24, r24
    403a:	09 f4       	brne	.+2      	; 0x403e <__DATA_REGION_LENGTH__+0x3e>
    403c:	6d c9       	rjmp	.-3366   	; 0x3318 <_Z17handleLinkBusMsgsv+0x1a>
    403e:	8c e2       	ldi	r24, 0x2C	; 44
    4040:	93 e4       	ldi	r25, 0x43	; 67
    4042:	0e 94 7b 39 	call	0x72f6	; 0x72f6 <_Z12lb_send_textPc>
    4046:	68 c9       	rjmp	.-3376   	; 0x3318 <_Z17handleLinkBusMsgsv+0x1a>
    4048:	00 00       	nop
    404a:	e3 96       	adiw	r28, 0x33	; 51
    404c:	cd bf       	out	0x3d, r28	; 61
    404e:	de bf       	out	0x3e, r29	; 62
    4050:	df 91       	pop	r29
    4052:	cf 91       	pop	r28
    4054:	1f 91       	pop	r17
    4056:	0f 91       	pop	r16
    4058:	ff 90       	pop	r15
    405a:	ef 90       	pop	r14
    405c:	08 95       	ret

0000405e <_Z12eventEnabledv>:
    405e:	ef 92       	push	r14
    4060:	ff 92       	push	r15
    4062:	0f 93       	push	r16
    4064:	1f 93       	push	r17
    4066:	cf 93       	push	r28
    4068:	df 93       	push	r29
    406a:	cd b7       	in	r28, 0x3d	; 61
    406c:	de b7       	in	r29, 0x3e	; 62
    406e:	29 97       	sbiw	r28, 0x09	; 9
    4070:	cd bf       	out	0x3d, r28	; 61
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	20 91 76 47 	lds	r18, 0x4776	; 0x804776 <g_event_start_epoch>
    4078:	30 91 77 47 	lds	r19, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    407c:	40 91 78 47 	lds	r20, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    4080:	50 91 79 47 	lds	r21, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    4084:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <g_event_finish_epoch>
    4088:	90 91 7b 47 	lds	r25, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    408c:	a0 91 7c 47 	lds	r26, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    4090:	b0 91 7d 47 	lds	r27, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    4094:	bc 01       	movw	r22, r24
    4096:	cd 01       	movw	r24, r26
    4098:	0e 94 d5 48 	call	0x91aa	; 0x91aa <_Z7timeDifmm>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	89 83       	std	Y+1, r24	; 0x01
    40a2:	9a 83       	std	Y+2, r25	; 0x02
    40a4:	ab 83       	std	Y+3, r26	; 0x03
    40a6:	bc 83       	std	Y+4, r27	; 0x04
    40a8:	21 e0       	ldi	r18, 0x01	; 1
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	9a 81       	ldd	r25, Y+2	; 0x02
    40ae:	ab 81       	ldd	r26, Y+3	; 0x03
    40b0:	bc 81       	ldd	r27, Y+4	; 0x04
    40b2:	18 16       	cp	r1, r24
    40b4:	19 06       	cpc	r1, r25
    40b6:	1a 06       	cpc	r1, r26
    40b8:	1b 06       	cpc	r1, r27
    40ba:	0c f0       	brlt	.+2      	; 0x40be <_Z12eventEnabledv+0x60>
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	2d 83       	std	Y+5, r18	; 0x05
    40c0:	ce 01       	movw	r24, r28
    40c2:	06 96       	adiw	r24, 0x06	; 6
    40c4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    40c8:	20 91 7a 47 	lds	r18, 0x477A	; 0x80477a <g_event_finish_epoch>
    40cc:	30 91 7b 47 	lds	r19, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    40d0:	40 91 7c 47 	lds	r20, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    40d4:	50 91 7d 47 	lds	r21, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    40d8:	8e 81       	ldd	r24, Y+6	; 0x06
    40da:	9f 81       	ldd	r25, Y+7	; 0x07
    40dc:	a8 85       	ldd	r26, Y+8	; 0x08
    40de:	b9 85       	ldd	r27, Y+9	; 0x09
    40e0:	bc 01       	movw	r22, r24
    40e2:	cd 01       	movw	r24, r26
    40e4:	0e 94 d5 48 	call	0x91aa	; 0x91aa <_Z7timeDifmm>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	89 83       	std	Y+1, r24	; 0x01
    40ee:	9a 83       	std	Y+2, r25	; 0x02
    40f0:	ab 83       	std	Y+3, r26	; 0x03
    40f2:	bc 83       	std	Y+4, r27	; 0x04
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	9a 81       	ldd	r25, Y+2	; 0x02
    40f8:	ab 81       	ldd	r26, Y+3	; 0x03
    40fa:	bc 81       	ldd	r27, Y+4	; 0x04
    40fc:	bb 23       	and	r27, r27
    40fe:	2c f0       	brlt	.+10     	; 0x410a <_Z12eventEnabledv+0xac>
    4100:	8d 81       	ldd	r24, Y+5	; 0x05
    4102:	88 23       	and	r24, r24
    4104:	11 f0       	breq	.+4      	; 0x410a <_Z12eventEnabledv+0xac>
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	4a c0       	rjmp	.+148    	; 0x419e <_Z12eventEnabledv+0x140>
    410a:	20 91 76 47 	lds	r18, 0x4776	; 0x804776 <g_event_start_epoch>
    410e:	30 91 77 47 	lds	r19, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    4112:	40 91 78 47 	lds	r20, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    4116:	50 91 79 47 	lds	r21, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    411a:	8e 81       	ldd	r24, Y+6	; 0x06
    411c:	9f 81       	ldd	r25, Y+7	; 0x07
    411e:	a8 85       	ldd	r26, Y+8	; 0x08
    4120:	b9 85       	ldd	r27, Y+9	; 0x09
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	0e 94 d5 48 	call	0x91aa	; 0x91aa <_Z7timeDifmm>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	89 83       	std	Y+1, r24	; 0x01
    4130:	9a 83       	std	Y+2, r25	; 0x02
    4132:	ab 83       	std	Y+3, r26	; 0x03
    4134:	bc 83       	std	Y+4, r27	; 0x04
    4136:	89 81       	ldd	r24, Y+1	; 0x01
    4138:	9a 81       	ldd	r25, Y+2	; 0x02
    413a:	ab 81       	ldd	r26, Y+3	; 0x03
    413c:	bc 81       	ldd	r27, Y+4	; 0x04
    413e:	84 3c       	cpi	r24, 0xC4	; 196
    4140:	9f 4f       	sbci	r25, 0xFF	; 255
    4142:	af 4f       	sbci	r26, 0xFF	; 255
    4144:	bf 4f       	sbci	r27, 0xFF	; 255
    4146:	64 f0       	brlt	.+24     	; 0x4160 <_Z12eventEnabledv+0x102>
    4148:	10 92 47 47 	sts	0x4747, r1	; 0x804747 <_ZL11g_sleepType>
    414c:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep>
    4150:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    4154:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    4158:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	1f c0       	rjmp	.+62     	; 0x419e <_Z12eventEnabledv+0x140>
    4160:	24 ec       	ldi	r18, 0xC4	; 196
    4162:	3f ef       	ldi	r19, 0xFF	; 255
    4164:	4f ef       	ldi	r20, 0xFF	; 255
    4166:	5f ef       	ldi	r21, 0xFF	; 255
    4168:	89 81       	ldd	r24, Y+1	; 0x01
    416a:	9a 81       	ldd	r25, Y+2	; 0x02
    416c:	ab 81       	ldd	r26, Y+3	; 0x03
    416e:	bc 81       	ldd	r27, Y+4	; 0x04
    4170:	79 01       	movw	r14, r18
    4172:	8a 01       	movw	r16, r20
    4174:	e8 1a       	sub	r14, r24
    4176:	f9 0a       	sbc	r15, r25
    4178:	0a 0b       	sbc	r16, r26
    417a:	1b 0b       	sbc	r17, r27
    417c:	d8 01       	movw	r26, r16
    417e:	c7 01       	movw	r24, r14
    4180:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    4184:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    4188:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    418c:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	80 93 47 47 	sts	0x4747, r24	; 0x804747 <_ZL11g_sleepType>
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	80 93 82 47 	sts	0x4782, r24	; 0x804782 <_ZL13g_go_to_sleep>
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	29 96       	adiw	r28, 0x09	; 9
    41a0:	cd bf       	out	0x3d, r28	; 61
    41a2:	de bf       	out	0x3e, r29	; 62
    41a4:	df 91       	pop	r29
    41a6:	cf 91       	pop	r28
    41a8:	1f 91       	pop	r17
    41aa:	0f 91       	pop	r16
    41ac:	ff 90       	pop	r15
    41ae:	ef 90       	pop	r14
    41b0:	08 95       	ret

000041b2 <_Z13throttleValueh>:
    41b2:	85 31       	cpi	r24, 0x15	; 21
    41b4:	4c f4       	brge	.+18     	; 0x41c8 <_Z13throttleValueh+0x16>
    41b6:	28 2f       	mov	r18, r24
    41b8:	88 0f       	add	r24, r24
    41ba:	33 0b       	sbc	r19, r19
    41bc:	25 30       	cpi	r18, 0x05	; 5
    41be:	31 05       	cpc	r19, r1
    41c0:	2c f4       	brge	.+10     	; 0x41cc <_Z13throttleValueh+0x1a>
    41c2:	25 e0       	ldi	r18, 0x05	; 5
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	02 c0       	rjmp	.+4      	; 0x41cc <_Z13throttleValueh+0x1a>
    41c8:	24 e1       	ldi	r18, 0x14	; 20
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	50 e0       	ldi	r21, 0x00	; 0
    41d2:	62 ec       	ldi	r22, 0xC2	; 194
    41d4:	71 e0       	ldi	r23, 0x01	; 1
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <__divmodsi4>
    41de:	ca 01       	movw	r24, r20
    41e0:	b9 01       	movw	r22, r18
    41e2:	0e 94 62 4c 	call	0x98c4	; 0x98c4 <__floatsisf>
    41e6:	0e 94 31 4c 	call	0x9862	; 0x9862 <__fixunssfsi>
    41ea:	cb 01       	movw	r24, r22
    41ec:	08 95       	ret

000041ee <_Z11launchEventP2SC>:
    41ee:	cf 93       	push	r28
    41f0:	df 93       	push	r29
    41f2:	00 d0       	rcall	.+0      	; 0x41f4 <_Z11launchEventP2SC+0x6>
    41f4:	1f 92       	push	r1
    41f6:	cd b7       	in	r28, 0x3d	; 61
    41f8:	de b7       	in	r29, 0x3e	; 62
    41fa:	8a 83       	std	Y+2, r24	; 0x02
    41fc:	9b 83       	std	Y+3, r25	; 0x03
    41fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4200:	9b 81       	ldd	r25, Y+3	; 0x03
    4202:	0e 94 22 21 	call	0x4244	; 0x4244 <_Z33activateEventUsingCurrentSettingsP2SC>
    4206:	89 83       	std	Y+1, r24	; 0x01
    4208:	8a 81       	ldd	r24, Y+2	; 0x02
    420a:	9b 81       	ldd	r25, Y+3	; 0x03
    420c:	fc 01       	movw	r30, r24
    420e:	80 81       	ld	r24, Z
    4210:	88 23       	and	r24, r24
    4212:	31 f0       	breq	.+12     	; 0x4220 <_Z11launchEventP2SC+0x32>
    4214:	8a 81       	ldd	r24, Y+2	; 0x02
    4216:	9b 81       	ldd	r25, Y+3	; 0x03
    4218:	fc 01       	movw	r30, r24
    421a:	80 81       	ld	r24, Z
    421c:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	88 23       	and	r24, r24
    4224:	21 f0       	breq	.+8      	; 0x422e <_Z11launchEventP2SC+0x40>
    4226:	89 81       	ldd	r24, Y+1	; 0x01
    4228:	80 93 39 47 	sts	0x4739, r24	; 0x804739 <_ZL17g_last_error_code>
    422c:	04 c0       	rjmp	.+8      	; 0x4236 <_Z11launchEventP2SC+0x48>
    422e:	0e 94 2f 20 	call	0x405e	; 0x405e <_Z12eventEnabledv>
    4232:	80 93 7e 47 	sts	0x477E, r24	; 0x80477e <g_event_enabled>
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	23 96       	adiw	r28, 0x03	; 3
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	de bf       	out	0x3e, r29	; 62
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	08 95       	ret

00004244 <_Z33activateEventUsingCurrentSettingsP2SC>:
    4244:	cf 92       	push	r12
    4246:	df 92       	push	r13
    4248:	ef 92       	push	r14
    424a:	ff 92       	push	r15
    424c:	0f 93       	push	r16
    424e:	1f 93       	push	r17
    4250:	cf 93       	push	r28
    4252:	df 93       	push	r29
    4254:	1f 92       	push	r1
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
    425a:	40 91 76 47 	lds	r20, 0x4776	; 0x804776 <g_event_start_epoch>
    425e:	50 91 77 47 	lds	r21, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    4262:	60 91 78 47 	lds	r22, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    4266:	70 91 79 47 	lds	r23, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    426a:	45 2b       	or	r20, r21
    426c:	46 2b       	or	r20, r22
    426e:	47 2b       	or	r20, r23
    4270:	09 f4       	brne	.+2      	; 0x4274 <_Z33activateEventUsingCurrentSettingsP2SC+0x30>
    4272:	95 c1       	rjmp	.+810    	; 0x459e <_Z33activateEventUsingCurrentSettingsP2SC+0x35a>
    4274:	00 91 76 47 	lds	r16, 0x4776	; 0x804776 <g_event_start_epoch>
    4278:	10 91 77 47 	lds	r17, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    427c:	20 91 78 47 	lds	r18, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    4280:	30 91 79 47 	lds	r19, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    4284:	40 91 7a 47 	lds	r20, 0x477A	; 0x80477a <g_event_finish_epoch>
    4288:	50 91 7b 47 	lds	r21, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    428c:	60 91 7c 47 	lds	r22, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    4290:	70 91 7d 47 	lds	r23, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    4294:	04 17       	cp	r16, r20
    4296:	15 07       	cpc	r17, r21
    4298:	26 07       	cpc	r18, r22
    429a:	37 07       	cpc	r19, r23
    429c:	08 f0       	brcs	.+2      	; 0x42a0 <_Z33activateEventUsingCurrentSettingsP2SC+0x5c>
    429e:	81 c1       	rjmp	.+770    	; 0x45a2 <_Z33activateEventUsingCurrentSettingsP2SC+0x35e>
    42a0:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    42a4:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    42a8:	23 2b       	or	r18, r19
    42aa:	09 f4       	brne	.+2      	; 0x42ae <_Z33activateEventUsingCurrentSettingsP2SC+0x6a>
    42ac:	7c c1       	rjmp	.+760    	; 0x45a6 <_Z33activateEventUsingCurrentSettingsP2SC+0x362>
    42ae:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    42b2:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    42b6:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    42ba:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    42be:	24 0f       	add	r18, r20
    42c0:	35 1f       	adc	r19, r21
    42c2:	40 91 74 47 	lds	r20, 0x4774	; 0x804774 <g_intra_cycle_delay_time>
    42c6:	50 91 75 47 	lds	r21, 0x4775	; 0x804775 <g_intra_cycle_delay_time+0x1>
    42ca:	24 17       	cp	r18, r20
    42cc:	35 07       	cpc	r19, r21
    42ce:	0c f4       	brge	.+2      	; 0x42d2 <_Z33activateEventUsingCurrentSettingsP2SC+0x8e>
    42d0:	6c c1       	rjmp	.+728    	; 0x45aa <_Z33activateEventUsingCurrentSettingsP2SC+0x366>
    42d2:	20 91 48 47 	lds	r18, 0x4748	; 0x804748 <g_messages_text>
    42d6:	22 23       	and	r18, r18
    42d8:	09 f4       	brne	.+2      	; 0x42dc <_Z33activateEventUsingCurrentSettingsP2SC+0x98>
    42da:	69 c1       	rjmp	.+722    	; 0x45ae <_Z33activateEventUsingCurrentSettingsP2SC+0x36a>
    42dc:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    42e0:	22 23       	and	r18, r18
    42e2:	09 f4       	brne	.+2      	; 0x42e6 <_Z33activateEventUsingCurrentSettingsP2SC+0xa2>
    42e4:	66 c1       	rjmp	.+716    	; 0x45b2 <_Z33activateEventUsingCurrentSettingsP2SC+0x36e>
    42e6:	8c 01       	movw	r16, r24
    42e8:	80 91 5d 47 	lds	r24, 0x475D	; 0x80475d <g_messages_text+0x15>
    42ec:	88 23       	and	r24, r24
    42ee:	19 f1       	breq	.+70     	; 0x4336 <_Z33activateEventUsingCurrentSettingsP2SC+0xf2>
    42f0:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    42f4:	88 23       	and	r24, r24
    42f6:	41 f0       	breq	.+16     	; 0x4308 <_Z33activateEventUsingCurrentSettingsP2SC+0xc4>
    42f8:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    42fc:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    4300:	89 2b       	or	r24, r25
    4302:	21 f4       	brne	.+8      	; 0x430c <_Z33activateEventUsingCurrentSettingsP2SC+0xc8>
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	03 c0       	rjmp	.+6      	; 0x430e <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	01 c0       	rjmp	.+2      	; 0x430e <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	81 11       	cpse	r24, r1
    4310:	52 c1       	rjmp	.+676    	; 0x45b6 <_Z33activateEventUsingCurrentSettingsP2SC+0x372>
    4312:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	8d e5       	ldi	r24, 0x5D	; 93
    431a:	97 e4       	ldi	r25, 0x47	; 71
    431c:	0e 94 1d 3c 	call	0x783a	; 0x783a <_Z26timeRequiredToSendStrAtWPMPcj>
    4320:	8c 50       	subi	r24, 0x0C	; 12
    4322:	9e 4f       	sbci	r25, 0xFE	; 254
    4324:	68 ee       	ldi	r22, 0xE8	; 232
    4326:	73 e0       	ldi	r23, 0x03	; 3
    4328:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <__udivmodhi4>
    432c:	60 93 72 47 	sts	0x4772, r22	; 0x804772 <g_time_needed_for_ID>
    4330:	70 93 73 47 	sts	0x4773, r23	; 0x804773 <g_time_needed_for_ID+0x1>
    4334:	04 c0       	rjmp	.+8      	; 0x433e <_Z33activateEventUsingCurrentSettingsP2SC+0xfa>
    4336:	10 92 72 47 	sts	0x4772, r1	; 0x804772 <g_time_needed_for_ID>
    433a:	10 92 73 47 	sts	0x4773, r1	; 0x804773 <g_time_needed_for_ID+0x1>
    433e:	60 91 9c 47 	lds	r22, 0x479C	; 0x80479c <g_current_epoch>
    4342:	70 91 9d 47 	lds	r23, 0x479D	; 0x80479d <g_current_epoch+0x1>
    4346:	80 91 9e 47 	lds	r24, 0x479E	; 0x80479e <g_current_epoch+0x2>
    434a:	90 91 9f 47 	lds	r25, 0x479F	; 0x80479f <g_current_epoch+0x3>
    434e:	c0 90 7a 47 	lds	r12, 0x477A	; 0x80477a <g_event_finish_epoch>
    4352:	d0 90 7b 47 	lds	r13, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    4356:	e0 90 7c 47 	lds	r14, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    435a:	f0 90 7d 47 	lds	r15, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    435e:	c6 16       	cp	r12, r22
    4360:	d7 06       	cpc	r13, r23
    4362:	e8 06       	cpc	r14, r24
    4364:	f9 06       	cpc	r15, r25
    4366:	48 f4       	brcc	.+18     	; 0x437a <_Z33activateEventUsingCurrentSettingsP2SC+0x136>
    4368:	01 15       	cp	r16, r1
    436a:	11 05       	cpc	r17, r1
    436c:	09 f4       	brne	.+2      	; 0x4370 <_Z33activateEventUsingCurrentSettingsP2SC+0x12c>
    436e:	25 c1       	rjmp	.+586    	; 0x45ba <_Z33activateEventUsingCurrentSettingsP2SC+0x376>
    4370:	8a ef       	ldi	r24, 0xFA	; 250
    4372:	f8 01       	movw	r30, r16
    4374:	80 83       	st	Z, r24
    4376:	80 e0       	ldi	r24, 0x00	; 0
    4378:	21 c1       	rjmp	.+578    	; 0x45bc <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    437a:	20 91 76 47 	lds	r18, 0x4776	; 0x804776 <g_event_start_epoch>
    437e:	30 91 77 47 	lds	r19, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    4382:	40 91 78 47 	lds	r20, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    4386:	50 91 79 47 	lds	r21, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    438a:	0e 94 d5 48 	call	0x91aa	; 0x91aa <_Z7timeDifmm>
    438e:	99 23       	and	r25, r25
    4390:	0c f4       	brge	.+2      	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x150>
    4392:	f2 c0       	rjmp	.+484    	; 0x4578 <_Z33activateEventUsingCurrentSettingsP2SC+0x334>
    4394:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    4398:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    439c:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    43a0:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    43a4:	e2 0e       	add	r14, r18
    43a6:	f3 1e       	adc	r15, r19
    43a8:	97 01       	movw	r18, r14
    43aa:	0f 2c       	mov	r0, r15
    43ac:	00 0c       	add	r0, r0
    43ae:	44 0b       	sbc	r20, r20
    43b0:	55 0b       	sbc	r21, r21
    43b2:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <__divmodsi4>
    43b6:	20 91 74 47 	lds	r18, 0x4774	; 0x804774 <g_intra_cycle_delay_time>
    43ba:	30 91 75 47 	lds	r19, 0x4775	; 0x804775 <g_intra_cycle_delay_time+0x1>
    43be:	c9 01       	movw	r24, r18
    43c0:	86 1b       	sub	r24, r22
    43c2:	97 0b       	sbc	r25, r23
    43c4:	18 16       	cp	r1, r24
    43c6:	19 06       	cpc	r1, r25
    43c8:	0c f4       	brge	.+2      	; 0x43cc <_Z33activateEventUsingCurrentSettingsP2SC+0x188>
    43ca:	84 c0       	rjmp	.+264    	; 0x44d4 <_Z33activateEventUsingCurrentSettingsP2SC+0x290>
    43cc:	22 27       	eor	r18, r18
    43ce:	33 27       	eor	r19, r19
    43d0:	28 1b       	sub	r18, r24
    43d2:	39 0b       	sbc	r19, r25
    43d4:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    43d8:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    43dc:	24 17       	cp	r18, r20
    43de:	35 07       	cpc	r19, r21
    43e0:	ac f1       	brlt	.+106    	; 0x444c <_Z33activateEventUsingCurrentSettingsP2SC+0x208>
    43e2:	8e 0d       	add	r24, r14
    43e4:	9f 1d       	adc	r25, r15
    43e6:	91 95       	neg	r25
    43e8:	81 95       	neg	r24
    43ea:	91 09       	sbc	r25, r1
    43ec:	09 2e       	mov	r0, r25
    43ee:	00 0c       	add	r0, r0
    43f0:	aa 0b       	sbc	r26, r26
    43f2:	bb 0b       	sbc	r27, r27
    43f4:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    43f8:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    43fc:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    4400:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    4404:	01 15       	cp	r16, r1
    4406:	11 05       	cpc	r17, r1
    4408:	19 f0       	breq	.+6      	; 0x4410 <_Z33activateEventUsingCurrentSettingsP2SC+0x1cc>
    440a:	8e ef       	ldi	r24, 0xFE	; 254
    440c:	f8 01       	movw	r30, r16
    440e:	80 83       	st	Z, r24
    4410:	80 91 7e 47 	lds	r24, 0x477E	; 0x80477e <g_event_enabled>
    4414:	81 11       	cpse	r24, r1
    4416:	8a c0       	rjmp	.+276    	; 0x452c <_Z33activateEventUsingCurrentSettingsP2SC+0x2e8>
    4418:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    441c:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4420:	40 91 3e 47 	lds	r20, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    4424:	50 91 3f 47 	lds	r21, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    4428:	60 91 40 47 	lds	r22, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    442c:	70 91 41 47 	lds	r23, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    4430:	20 91 72 47 	lds	r18, 0x4772	; 0x804772 <g_time_needed_for_ID>
    4434:	30 91 73 47 	lds	r19, 0x4773	; 0x804773 <g_time_needed_for_ID+0x1>
    4438:	84 1b       	sub	r24, r20
    443a:	95 0b       	sbc	r25, r21
    443c:	82 1b       	sub	r24, r18
    443e:	93 0b       	sbc	r25, r19
    4440:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    4444:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	77 c0       	rjmp	.+238    	; 0x453a <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    444c:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4450:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4454:	82 0f       	add	r24, r18
    4456:	93 1f       	adc	r25, r19
    4458:	09 2e       	mov	r0, r25
    445a:	00 0c       	add	r0, r0
    445c:	aa 0b       	sbc	r26, r26
    445e:	bb 0b       	sbc	r27, r27
    4460:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    4464:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    4468:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    446c:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
    4470:	01 15       	cp	r16, r1
    4472:	11 05       	cpc	r17, r1
    4474:	19 f0       	breq	.+6      	; 0x447c <_Z33activateEventUsingCurrentSettingsP2SC+0x238>
    4476:	8d ef       	ldi	r24, 0xFD	; 253
    4478:	f8 01       	movw	r30, r16
    447a:	80 83       	st	Z, r24
    447c:	80 91 7e 47 	lds	r24, 0x477E	; 0x80477e <g_event_enabled>
    4480:	81 11       	cpse	r24, r1
    4482:	56 c0       	rjmp	.+172    	; 0x4530 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ec>
    4484:	80 91 72 47 	lds	r24, 0x4772	; 0x804772 <g_time_needed_for_ID>
    4488:	90 91 73 47 	lds	r25, 0x4773	; 0x804773 <g_time_needed_for_ID+0x1>
    448c:	a0 e0       	ldi	r26, 0x00	; 0
    448e:	b0 e0       	ldi	r27, 0x00	; 0
    4490:	40 91 3e 47 	lds	r20, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    4494:	50 91 3f 47 	lds	r21, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    4498:	60 91 40 47 	lds	r22, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    449c:	70 91 41 47 	lds	r23, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    44a0:	84 17       	cp	r24, r20
    44a2:	95 07       	cpc	r25, r21
    44a4:	a6 07       	cpc	r26, r22
    44a6:	b7 07       	cpc	r27, r23
    44a8:	0c f0       	brlt	.+2      	; 0x44ac <_Z33activateEventUsingCurrentSettingsP2SC+0x268>
    44aa:	44 c0       	rjmp	.+136    	; 0x4534 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f0>
    44ac:	80 91 3e 47 	lds	r24, 0x473E	; 0x80473e <_ZL12g_on_the_air>
    44b0:	90 91 3f 47 	lds	r25, 0x473F	; 0x80473f <_ZL12g_on_the_air+0x1>
    44b4:	a0 91 40 47 	lds	r26, 0x4740	; 0x804740 <_ZL12g_on_the_air+0x2>
    44b8:	b0 91 41 47 	lds	r27, 0x4741	; 0x804741 <_ZL12g_on_the_air+0x3>
    44bc:	20 91 72 47 	lds	r18, 0x4772	; 0x804772 <g_time_needed_for_ID>
    44c0:	30 91 73 47 	lds	r19, 0x4773	; 0x804773 <g_time_needed_for_ID+0x1>
    44c4:	82 1b       	sub	r24, r18
    44c6:	93 0b       	sbc	r25, r19
    44c8:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    44cc:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    44d0:	81 e0       	ldi	r24, 0x01	; 1
    44d2:	33 c0       	rjmp	.+102    	; 0x453a <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    44d4:	44 27       	eor	r20, r20
    44d6:	55 27       	eor	r21, r21
    44d8:	48 1b       	sub	r20, r24
    44da:	59 0b       	sbc	r21, r25
    44dc:	05 2e       	mov	r0, r21
    44de:	00 0c       	add	r0, r0
    44e0:	66 0b       	sbc	r22, r22
    44e2:	77 0b       	sbc	r23, r23
    44e4:	40 93 3e 47 	sts	0x473E, r20	; 0x80473e <_ZL12g_on_the_air>
    44e8:	50 93 3f 47 	sts	0x473F, r21	; 0x80473f <_ZL12g_on_the_air+0x1>
    44ec:	60 93 40 47 	sts	0x4740, r22	; 0x804740 <_ZL12g_on_the_air+0x2>
    44f0:	70 93 41 47 	sts	0x4741, r23	; 0x804741 <_ZL12g_on_the_air+0x3>
    44f4:	01 15       	cp	r16, r1
    44f6:	11 05       	cpc	r17, r1
    44f8:	19 f0       	breq	.+6      	; 0x4500 <_Z33activateEventUsingCurrentSettingsP2SC+0x2bc>
    44fa:	2e ef       	ldi	r18, 0xFE	; 254
    44fc:	f8 01       	movw	r30, r16
    44fe:	20 83       	st	Z, r18
    4500:	20 91 7e 47 	lds	r18, 0x477E	; 0x80477e <g_event_enabled>
    4504:	21 11       	cpse	r18, r1
    4506:	18 c0       	rjmp	.+48     	; 0x4538 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f4>
    4508:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    450c:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4510:	82 0f       	add	r24, r18
    4512:	93 1f       	adc	r25, r19
    4514:	20 91 72 47 	lds	r18, 0x4772	; 0x804772 <g_time_needed_for_ID>
    4518:	30 91 73 47 	lds	r19, 0x4773	; 0x804773 <g_time_needed_for_ID+0x1>
    451c:	82 1b       	sub	r24, r18
    451e:	93 0b       	sbc	r25, r19
    4520:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    4524:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	07 c0       	rjmp	.+14     	; 0x453a <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    452c:	80 e0       	ldi	r24, 0x00	; 0
    452e:	05 c0       	rjmp	.+10     	; 0x453a <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    4530:	81 e0       	ldi	r24, 0x01	; 1
    4532:	03 c0       	rjmp	.+6      	; 0x453a <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    4534:	81 e0       	ldi	r24, 0x01	; 1
    4536:	01 c0       	rjmp	.+2      	; 0x453a <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	88 23       	and	r24, r24
    453c:	b1 f0       	breq	.+44     	; 0x456a <_Z33activateEventUsingCurrentSettingsP2SC+0x326>
    453e:	f8 94       	cli
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	89 83       	std	Y+1, r24	; 0x01
    4544:	40 e0       	ldi	r20, 0x00	; 0
    4546:	50 e0       	ldi	r21, 0x00	; 0
    4548:	be 01       	movw	r22, r28
    454a:	6f 5f       	subi	r22, 0xFF	; 255
    454c:	7f 4f       	sbci	r23, 0xFF	; 255
    454e:	88 e4       	ldi	r24, 0x48	; 72
    4550:	97 e4       	ldi	r25, 0x47	; 71
    4552:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
    4556:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    455a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    455e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4562:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    4566:	78 94       	sei
    4568:	03 c0       	rjmp	.+6      	; 0x4570 <_Z33activateEventUsingCurrentSettingsP2SC+0x32c>
    456a:	80 e0       	ldi	r24, 0x00	; 0
    456c:	0e 94 99 46 	call	0x8d32	; 0x8d32 <_Z14keyTransmitterb>
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	80 93 7f 47 	sts	0x477F, r24	; 0x80477f <g_event_commenced>
    4576:	09 c0       	rjmp	.+18     	; 0x458a <_Z33activateEventUsingCurrentSettingsP2SC+0x346>
    4578:	01 15       	cp	r16, r1
    457a:	11 05       	cpc	r17, r1
    457c:	19 f0       	breq	.+6      	; 0x4584 <_Z33activateEventUsingCurrentSettingsP2SC+0x340>
    457e:	8f ef       	ldi	r24, 0xFF	; 255
    4580:	f8 01       	movw	r30, r16
    4582:	80 83       	st	Z, r24
    4584:	80 e0       	ldi	r24, 0x00	; 0
    4586:	0e 94 99 46 	call	0x8d32	; 0x8d32 <_Z14keyTransmitterb>
    458a:	10 92 81 47 	sts	0x4781, r1	; 0x804781 <g_waiting_for_next_event>
    458e:	8a e5       	ldi	r24, 0x5A	; 90
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    4596:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	0f c0       	rjmp	.+30     	; 0x45bc <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    459e:	8c ec       	ldi	r24, 0xCC	; 204
    45a0:	0d c0       	rjmp	.+26     	; 0x45bc <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    45a2:	8d ec       	ldi	r24, 0xCD	; 205
    45a4:	0b c0       	rjmp	.+22     	; 0x45bc <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    45a6:	8b ec       	ldi	r24, 0xCB	; 203
    45a8:	09 c0       	rjmp	.+18     	; 0x45bc <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    45aa:	8a ec       	ldi	r24, 0xCA	; 202
    45ac:	07 c0       	rjmp	.+14     	; 0x45bc <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    45ae:	89 ec       	ldi	r24, 0xC9	; 201
    45b0:	05 c0       	rjmp	.+10     	; 0x45bc <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    45b2:	88 ec       	ldi	r24, 0xC8	; 200
    45b4:	03 c0       	rjmp	.+6      	; 0x45bc <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    45b6:	87 ec       	ldi	r24, 0xC7	; 199
    45b8:	01 c0       	rjmp	.+2      	; 0x45bc <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	0f 90       	pop	r0
    45be:	df 91       	pop	r29
    45c0:	cf 91       	pop	r28
    45c2:	1f 91       	pop	r17
    45c4:	0f 91       	pop	r16
    45c6:	ff 90       	pop	r15
    45c8:	ef 90       	pop	r14
    45ca:	df 90       	pop	r13
    45cc:	cf 90       	pop	r12
    45ce:	08 95       	ret

000045d0 <_Z8rtc_initv>:
    45d0:	cf 93       	push	r28
    45d2:	df 93       	push	r29
    45d4:	88 b1       	in	r24, 0x08	; 8
    45d6:	88 60       	ori	r24, 0x08	; 8
    45d8:	88 b9       	out	0x08, r24	; 8
    45da:	c0 e0       	ldi	r28, 0x00	; 0
    45dc:	d0 e0       	ldi	r29, 0x00	; 0
    45de:	c2 33       	cpi	r28, 0x32	; 50
    45e0:	d1 05       	cpc	r29, r1
    45e2:	c4 f4       	brge	.+48     	; 0x4614 <_Z8rtc_initv+0x44>
    45e4:	89 b1       	in	r24, 0x09	; 9
    45e6:	87 7f       	andi	r24, 0xF7	; 247
    45e8:	89 b9       	out	0x09, r24	; 9
    45ea:	64 e1       	ldi	r22, 0x14	; 20
    45ec:	70 e0       	ldi	r23, 0x00	; 0
    45ee:	80 e0       	ldi	r24, 0x00	; 0
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <util_delay_ms>
    45f6:	81 11       	cpse	r24, r1
    45f8:	f8 cf       	rjmp	.-16     	; 0x45ea <_Z8rtc_initv+0x1a>
    45fa:	89 b1       	in	r24, 0x09	; 9
    45fc:	88 60       	ori	r24, 0x08	; 8
    45fe:	89 b9       	out	0x09, r24	; 9
    4600:	64 e1       	ldi	r22, 0x14	; 20
    4602:	70 e0       	ldi	r23, 0x00	; 0
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <util_delay_ms>
    460c:	81 11       	cpse	r24, r1
    460e:	f8 cf       	rjmp	.-16     	; 0x4600 <_Z8rtc_initv+0x30>
    4610:	21 96       	adiw	r28, 0x01	; 1
    4612:	e5 cf       	rjmp	.-54     	; 0x45de <_Z8rtc_initv+0xe>
    4614:	e3 e5       	ldi	r30, 0x53	; 83
    4616:	f4 e0       	ldi	r31, 0x04	; 4
    4618:	80 81       	ld	r24, Z
    461a:	88 60       	ori	r24, 0x08	; 8
    461c:	80 83       	st	Z, r24
    461e:	e2 e5       	ldi	r30, 0x52	; 82
    4620:	f4 e0       	ldi	r31, 0x04	; 4
    4622:	80 81       	ld	r24, Z
    4624:	88 60       	ori	r24, 0x08	; 8
    4626:	80 83       	st	Z, r24
    4628:	0e 94 1c 31 	call	0x6238	; 0x6238 <ds3231_init>
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <ds3231_1s_sqw>
    4632:	88 23       	and	r24, r24
    4634:	11 f0       	breq	.+4      	; 0x463a <_Z8rtc_initv+0x6a>
    4636:	8c ef       	ldi	r24, 0xFC	; 252
    4638:	01 c0       	rjmp	.+2      	; 0x463c <_Z8rtc_initv+0x6c>
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	df 91       	pop	r29
    463e:	cf 91       	pop	r28
    4640:	08 95       	ret

00004642 <_Z18antennaIsConnectedv>:
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	08 95       	ret

00004646 <_Z13startEventNow19EventActionSource_t>:
	
}


void startEventNow(EventActionSource_t activationSource)
{
    4646:	cf 93       	push	r28
    4648:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    464a:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_Z23clockConfigurationCheckv>

	if(activationSource == POWER_UP)
    464e:	c1 11       	cpse	r28, r1
    4650:	0e c0       	rjmp	.+28     	; 0x466e <_Z13startEventNow19EventActionSource_t+0x28>
	{
		if(conf == CONFIGURATION_ERROR)
    4652:	82 30       	cpi	r24, 0x02	; 2
    4654:	31 f4       	brne	.+12     	; 0x4662 <_Z13startEventNow19EventActionSource_t+0x1c>
		{
			setupForFox(NULL, START_NOTHING);
    4656:	60 e0       	ldi	r22, 0x00	; 0
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    4660:	3f c0       	rjmp	.+126    	; 0x46e0 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4662:	63 e0       	ldi	r22, 0x03	; 3
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    466c:	39 c0       	rjmp	.+114    	; 0x46e0 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    466e:	c2 30       	cpi	r28, 0x02	; 2
    4670:	d1 f4       	brne	.+52     	; 0x46a6 <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    4672:	82 30       	cpi	r24, 0x02	; 2
    4674:	31 f4       	brne	.+12     	; 0x4682 <_Z13startEventNow19EventActionSource_t+0x3c>
		{
			setupForFox(NULL, START_EVENT_NOW);
    4676:	61 e0       	ldi	r22, 0x01	; 1
    4678:	80 e0       	ldi	r24, 0x00	; 0
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    4680:	2f c0       	rjmp	.+94     	; 0x46e0 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    4682:	81 30       	cpi	r24, 0x01	; 1
    4684:	21 f0       	breq	.+8      	; 0x468e <_Z13startEventNow19EventActionSource_t+0x48>
    4686:	84 30       	cpi	r24, 0x04	; 4
    4688:	11 f0       	breq	.+4      	; 0x468e <_Z13startEventNow19EventActionSource_t+0x48>
    468a:	83 30       	cpi	r24, 0x03	; 3
    468c:	31 f4       	brne	.+12     	; 0x469a <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    468e:	61 e0       	ldi	r22, 0x01	; 1
    4690:	80 e0       	ldi	r24, 0x00	; 0
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    4698:	23 c0       	rjmp	.+70     	; 0x46e0 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    469a:	63 e0       	ldi	r22, 0x03	; 3
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    46a4:	1d c0       	rjmp	.+58     	; 0x46e0 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    46a6:	82 30       	cpi	r24, 0x02	; 2
    46a8:	31 f4       	brne	.+12     	; 0x46b6 <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    46aa:	61 e0       	ldi	r22, 0x01	; 1
    46ac:	80 e0       	ldi	r24, 0x00	; 0
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    46b4:	15 c0       	rjmp	.+42     	; 0x46e0 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    46b6:	81 30       	cpi	r24, 0x01	; 1
    46b8:	31 f4       	brne	.+12     	; 0x46c6 <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    46ba:	62 e0       	ldi	r22, 0x02	; 2
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    46c4:	0d c0       	rjmp	.+26     	; 0x46e0 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    46c6:	84 30       	cpi	r24, 0x04	; 4
    46c8:	31 f4       	brne	.+12     	; 0x46d6 <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    46ca:	63 e0       	ldi	r22, 0x03	; 3
    46cc:	80 e0       	ldi	r24, 0x00	; 0
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    46d4:	05 c0       	rjmp	.+10     	; 0x46e0 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    46d6:	63 e0       	ldi	r22, 0x03	; 3
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

// 	g_LED_enunciating = false;
}
    46e0:	cf 91       	pop	r28
    46e2:	08 95       	ret

000046e4 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    46e4:	cf 93       	push	r28
    46e6:	df 93       	push	r29
    46e8:	d8 2f       	mov	r29, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    46ea:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_Z23clockConfigurationCheckv>
    46ee:	c8 2f       	mov	r28, r24

	if(activationSource == PROGRAMMATIC)
    46f0:	d2 30       	cpi	r29, 0x02	; 2
    46f2:	31 f4       	brne	.+12     	; 0x4700 <_Z12stopEventNow19EventActionSource_t+0x1c>
	{
		setupForFox(NULL, START_NOTHING);
    46f4:	60 e0       	ldi	r22, 0x00	; 0
    46f6:	80 e0       	ldi	r24, 0x00	; 0
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    46fe:	14 c0       	rjmp	.+40     	; 0x4728 <_Z12stopEventNow19EventActionSource_t+0x44>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    4700:	81 30       	cpi	r24, 0x01	; 1
    4702:	29 f4       	brne	.+10     	; 0x470e <_Z12stopEventNow19EventActionSource_t+0x2a>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    4704:	62 e0       	ldi	r22, 0x02	; 2
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    470e:	c4 30       	cpi	r28, 0x04	; 4
    4710:	31 f4       	brne	.+12     	; 0x471e <_Z12stopEventNow19EventActionSource_t+0x3a>
		{
			setupForFox(NULL, START_NOTHING);
    4712:	60 e0       	ldi	r22, 0x00	; 0
    4714:	80 e0       	ldi	r24, 0x00	; 0
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
    471c:	05 c0       	rjmp	.+10     	; 0x4728 <_Z12stopEventNow19EventActionSource_t+0x44>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    471e:	60 e0       	ldi	r22, 0x00	; 0
    4720:	80 e0       	ldi	r24, 0x00	; 0
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>

// 	if(g_sync_pin_stable == STABLE_LOW)
// 	{
// 		digitalWrite(PIN_LED, OFF); /*  LED Off */
// 	}
}
    4728:	df 91       	pop	r29
    472a:	cf 91       	pop	r28
    472c:	08 95       	ret

0000472e <_Z18startEventUsingRTCv>:

void startEventUsingRTC(void)
{
    472e:	ef 92       	push	r14
    4730:	ff 92       	push	r15
    4732:	0f 93       	push	r16
    4734:	1f 93       	push	r17
	g_current_epoch = ds3231_get_epoch(null);
    4736:	80 e0       	ldi	r24, 0x00	; 0
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    473e:	60 93 9c 47 	sts	0x479C, r22	; 0x80479c <g_current_epoch>
    4742:	70 93 9d 47 	sts	0x479D, r23	; 0x80479d <g_current_epoch+0x1>
    4746:	80 93 9e 47 	sts	0x479E, r24	; 0x80479e <g_current_epoch+0x2>
    474a:	90 93 9f 47 	sts	0x479F, r25	; 0x80479f <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    474e:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    4752:	82 30       	cpi	r24, 0x02	; 2
    4754:	09 f4       	brne	.+2      	; 0x4758 <_Z18startEventUsingRTCv+0x2a>
    4756:	5a c0       	rjmp	.+180    	; 0x480c <_Z18startEventUsingRTCv+0xde>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4758:	63 e0       	ldi	r22, 0x03	; 3
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 0d 24 	call	0x481a	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    4762:	20 91 76 47 	lds	r18, 0x4776	; 0x804776 <g_event_start_epoch>
    4766:	30 91 77 47 	lds	r19, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    476a:	40 91 78 47 	lds	r20, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    476e:	50 91 79 47 	lds	r21, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    4772:	60 91 9c 47 	lds	r22, 0x479C	; 0x80479c <g_current_epoch>
    4776:	70 91 9d 47 	lds	r23, 0x479D	; 0x80479d <g_current_epoch+0x1>
    477a:	80 91 9e 47 	lds	r24, 0x479E	; 0x80479e <g_current_epoch+0x2>
    477e:	90 91 9f 47 	lds	r25, 0x479F	; 0x80479f <g_current_epoch+0x3>
    4782:	0f 2e       	mov	r0, r31
    4784:	f3 eb       	ldi	r31, 0xB3	; 179
    4786:	ef 2e       	mov	r14, r31
    4788:	f2 e4       	ldi	r31, 0x42	; 66
    478a:	ff 2e       	mov	r15, r31
    478c:	f0 2d       	mov	r31, r0
    478e:	00 ec       	ldi	r16, 0xC0	; 192
    4790:	12 e4       	ldi	r17, 0x42	; 66
    4792:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    4796:	00 91 76 47 	lds	r16, 0x4776	; 0x804776 <g_event_start_epoch>
    479a:	10 91 77 47 	lds	r17, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    479e:	20 91 78 47 	lds	r18, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    47a2:	30 91 79 47 	lds	r19, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    47a6:	60 91 9c 47 	lds	r22, 0x479C	; 0x80479c <g_current_epoch>
    47aa:	70 91 9d 47 	lds	r23, 0x479D	; 0x80479d <g_current_epoch+0x1>
    47ae:	80 91 9e 47 	lds	r24, 0x479E	; 0x80479e <g_current_epoch+0x2>
    47b2:	90 91 9f 47 	lds	r25, 0x479F	; 0x80479f <g_current_epoch+0x3>
    47b6:	06 17       	cp	r16, r22
    47b8:	17 07       	cpc	r17, r23
    47ba:	28 07       	cpc	r18, r24
    47bc:	39 07       	cpc	r19, r25
    47be:	78 f4       	brcc	.+30     	; 0x47de <_Z18startEventUsingRTCv+0xb0>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    47c0:	20 91 7a 47 	lds	r18, 0x477A	; 0x80477a <g_event_finish_epoch>
    47c4:	30 91 7b 47 	lds	r19, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    47c8:	40 91 7c 47 	lds	r20, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    47cc:	50 91 7d 47 	lds	r21, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    47d0:	e1 2c       	mov	r14, r1
    47d2:	f1 2c       	mov	r15, r1
    47d4:	04 ed       	ldi	r16, 0xD4	; 212
    47d6:	12 e4       	ldi	r17, 0x42	; 66
    47d8:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <_Z14reportTimeTillmmPKcS0_>
    47dc:	19 c0       	rjmp	.+50     	; 0x4810 <_Z18startEventUsingRTCv+0xe2>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    47de:	20 91 7a 47 	lds	r18, 0x477A	; 0x80477a <g_event_finish_epoch>
    47e2:	30 91 7b 47 	lds	r19, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    47e6:	40 91 7c 47 	lds	r20, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    47ea:	50 91 7d 47 	lds	r21, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    47ee:	60 91 76 47 	lds	r22, 0x4776	; 0x804776 <g_event_start_epoch>
    47f2:	70 91 77 47 	lds	r23, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    47f6:	80 91 78 47 	lds	r24, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    47fa:	90 91 79 47 	lds	r25, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    47fe:	e1 2c       	mov	r14, r1
    4800:	f1 2c       	mov	r15, r1
    4802:	0c ec       	ldi	r16, 0xCC	; 204
    4804:	12 e4       	ldi	r17, 0x42	; 66
    4806:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <_Z14reportTimeTillmmPKcS0_>
    480a:	02 c0       	rjmp	.+4      	; 0x4810 <_Z18startEventUsingRTCv+0xe2>
		}
	}
	else
	{
		reportConfigErrors();
    480c:	0e 94 62 29 	call	0x52c4	; 0x52c4 <_Z18reportConfigErrorsv>
	}
}
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	ff 90       	pop	r15
    4816:	ef 90       	pop	r14
    4818:	08 95       	ret

0000481a <_Z11setupForFoxP5Fox_t13EventAction_t>:



void setupForFox(Fox_t* fox, EventAction_t action)
{
    481a:	1f 93       	push	r17
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	00 d0       	rcall	.+0      	; 0x4822 <_Z11setupForFoxP5Fox_t13EventAction_t+0x8>
    4822:	cd b7       	in	r28, 0x3d	; 61
    4824:	de b7       	in	r29, 0x3e	; 62
    4826:	16 2f       	mov	r17, r22
	bool patternNotSet = true;
	
	if(fox)
    4828:	00 97       	sbiw	r24, 0x00	; 0
    482a:	31 f0       	breq	.+12     	; 0x4838 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    482c:	fc 01       	movw	r30, r24
    482e:	80 81       	ld	r24, Z
    4830:	82 31       	cpi	r24, 0x12	; 18
    4832:	11 f0       	breq	.+4      	; 0x4838 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    4834:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		}
	}

 	g_current_epoch = ds3231_get_epoch(null);
    4838:	80 e0       	ldi	r24, 0x00	; 0
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    4840:	60 93 9c 47 	sts	0x479C, r22	; 0x80479c <g_current_epoch>
    4844:	70 93 9d 47 	sts	0x479D, r23	; 0x80479d <g_current_epoch+0x1>
    4848:	80 93 9e 47 	sts	0x479E, r24	; 0x80479e <g_current_epoch+0x2>
    484c:	90 93 9f 47 	sts	0x479F, r25	; 0x80479f <g_current_epoch+0x3>

	g_event_commenced = false;
    4850:	10 92 7f 47 	sts	0x477F, r1	; 0x80477f <g_event_commenced>
	g_event_enabled = false;
    4854:	10 92 7e 47 	sts	0x477E, r1	; 0x80477e <g_event_enabled>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    4858:	89 b1       	in	r24, 0x09	; 9
    485a:	80 64       	ori	r24, 0x40	; 64
    485c:	89 b9       	out	0x09, r24	; 9
	LED_set_level(OFF);

	switch(g_fox)
    485e:	e0 91 1b 40 	lds	r30, 0x401B	; 0x80401b <g_fox>
    4862:	8e 2f       	mov	r24, r30
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	fc 01       	movw	r30, r24
    4868:	31 97       	sbiw	r30, 0x01	; 1
    486a:	e1 31       	cpi	r30, 0x11	; 17
    486c:	f1 05       	cpc	r31, r1
    486e:	08 f0       	brcs	.+2      	; 0x4872 <_Z11setupForFoxP5Fox_t13EventAction_t+0x58>
    4870:	8e c1       	rjmp	.+796    	; 0x4b8e <_Z11setupForFoxP5Fox_t13EventAction_t+0x374>
    4872:	ec 58       	subi	r30, 0x8C	; 140
    4874:	ff 4f       	sbci	r31, 0xFF	; 255
    4876:	0c 94 3e 4e 	jmp	0x9c7c	; 0x9c7c <__tablejump2__>
	{
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
    487a:	e8 e4       	ldi	r30, 0x48	; 72
    487c:	f7 e4       	ldi	r31, 0x47	; 71
    487e:	8d e4       	ldi	r24, 0x4D	; 77
    4880:	9f e4       	ldi	r25, 0x4F	; 79
    4882:	80 83       	st	Z, r24
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	85 e4       	ldi	r24, 0x45	; 69
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	82 83       	std	Z+2, r24	; 0x02
    488c:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
				g_intra_cycle_delay_time = 0;
    488e:	10 92 74 47 	sts	0x4774, r1	; 0x804774 <g_intra_cycle_delay_time>
    4892:	10 92 75 47 	sts	0x4775, r1	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
				patternNotSet = false;
    4896:	80 e0       	ldi	r24, 0x00	; 0
    4898:	01 c0       	rjmp	.+2      	; 0x489c <_Z11setupForFoxP5Fox_t13EventAction_t+0x82>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    489a:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 0;
			}
		}
		case FOX_2:
		{
			if(patternNotSet)
    489c:	88 23       	and	r24, r24
    489e:	99 f0       	breq	.+38     	; 0x48c6 <_Z11setupForFoxP5Fox_t13EventAction_t+0xac>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
    48a0:	e8 e4       	ldi	r30, 0x48	; 72
    48a2:	f7 e4       	ldi	r31, 0x47	; 71
    48a4:	8d e4       	ldi	r24, 0x4D	; 77
    48a6:	9f e4       	ldi	r25, 0x4F	; 79
    48a8:	80 83       	st	Z, r24
    48aa:	91 83       	std	Z+1, r25	; 0x01
    48ac:	89 e4       	ldi	r24, 0x49	; 73
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	82 83       	std	Z+2, r24	; 0x02
    48b2:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
				g_intra_cycle_delay_time = 60;
    48b4:	8c e3       	ldi	r24, 0x3C	; 60
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    48bc:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case FOX_2:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
				patternNotSet = false;
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	01 c0       	rjmp	.+2      	; 0x48c6 <_Z11setupForFoxP5Fox_t13EventAction_t+0xac>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    48c4:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 60;
			}
		}
		case FOX_3:
		{
			if(patternNotSet)
    48c6:	88 23       	and	r24, r24
    48c8:	99 f0       	breq	.+38     	; 0x48f0 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd6>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
    48ca:	e8 e4       	ldi	r30, 0x48	; 72
    48cc:	f7 e4       	ldi	r31, 0x47	; 71
    48ce:	8d e4       	ldi	r24, 0x4D	; 77
    48d0:	9f e4       	ldi	r25, 0x4F	; 79
    48d2:	80 83       	st	Z, r24
    48d4:	91 83       	std	Z+1, r25	; 0x01
    48d6:	83 e5       	ldi	r24, 0x53	; 83
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	82 83       	std	Z+2, r24	; 0x02
    48dc:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
				g_intra_cycle_delay_time = 120;
    48de:	88 e7       	ldi	r24, 0x78	; 120
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    48e6:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case FOX_3:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
				patternNotSet = false;
    48ea:	80 e0       	ldi	r24, 0x00	; 0
    48ec:	01 c0       	rjmp	.+2      	; 0x48f0 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd6>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    48ee:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 120;
			}
		}
		case FOX_4:
		{
			if(patternNotSet)
    48f0:	88 23       	and	r24, r24
    48f2:	99 f0       	breq	.+38     	; 0x491a <_Z11setupForFoxP5Fox_t13EventAction_t+0x100>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
    48f4:	e8 e4       	ldi	r30, 0x48	; 72
    48f6:	f7 e4       	ldi	r31, 0x47	; 71
    48f8:	8d e4       	ldi	r24, 0x4D	; 77
    48fa:	9f e4       	ldi	r25, 0x4F	; 79
    48fc:	80 83       	st	Z, r24
    48fe:	91 83       	std	Z+1, r25	; 0x01
    4900:	88 e4       	ldi	r24, 0x48	; 72
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	82 83       	std	Z+2, r24	; 0x02
    4906:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
				g_intra_cycle_delay_time = 180;
    4908:	84 eb       	ldi	r24, 0xB4	; 180
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    4910:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case FOX_4:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
				patternNotSet = false;
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	01 c0       	rjmp	.+2      	; 0x491a <_Z11setupForFoxP5Fox_t13EventAction_t+0x100>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4918:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case FOX_5:
		{
			/* Set the Morse code pattern and speed */
			if(patternNotSet)
    491a:	88 23       	and	r24, r24
    491c:	81 f0       	breq	.+32     	; 0x493e <_Z11setupForFoxP5Fox_t13EventAction_t+0x124>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO5");
    491e:	e8 e4       	ldi	r30, 0x48	; 72
    4920:	f7 e4       	ldi	r31, 0x47	; 71
    4922:	8d e4       	ldi	r24, 0x4D	; 77
    4924:	9f e4       	ldi	r25, 0x4F	; 79
    4926:	80 83       	st	Z, r24
    4928:	91 83       	std	Z+1, r25	; 0x01
    492a:	85 e3       	ldi	r24, 0x35	; 53
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	82 83       	std	Z+2, r24	; 0x02
    4930:	93 83       	std	Z+3, r25	; 0x03
				g_intra_cycle_delay_time = 240;
    4932:	80 ef       	ldi	r24, 0xF0	; 240
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    493a:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
			}
			
			bool repeat = true;
    493e:	81 e0       	ldi	r24, 0x01	; 1
    4940:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4942:	40 e0       	ldi	r20, 0x00	; 0
    4944:	50 e0       	ldi	r21, 0x00	; 0
    4946:	be 01       	movw	r22, r28
    4948:	6f 5f       	subi	r22, 0xFF	; 255
    494a:	7f 4f       	sbci	r23, 0xFF	; 255
    494c:	88 e4       	ldi	r24, 0x48	; 72
    494e:	97 e4       	ldi	r25, 0x47	; 71
    4950:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4954:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4958:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    495c:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4960:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 60;			/* wait 1 minute to send the ID */
    4964:	8c e3       	ldi	r24, 0x3C	; 60
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    496c:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    4970:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4974:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 240;                    /* off period is very short */
    4978:	80 ef       	ldi	r24, 0xF0	; 240
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4980:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4984:	38 c1       	rjmp	.+624    	; 0x4bf6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3dc>

		case SPRINT_S1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "ME");
    4986:	e8 e4       	ldi	r30, 0x48	; 72
    4988:	f7 e4       	ldi	r31, 0x47	; 71
    498a:	8d e4       	ldi	r24, 0x4D	; 77
    498c:	95 e4       	ldi	r25, 0x45	; 69
    498e:	80 83       	st	Z, r24
    4990:	91 83       	std	Z+1, r25	; 0x01
    4992:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
				g_intra_cycle_delay_time = 0;
    4994:	10 92 74 47 	sts	0x4774, r1	; 0x804774 <g_intra_cycle_delay_time>
    4998:	10 92 75 47 	sts	0x4775, r1	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case SPRINT_S1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "ME");
				patternNotSet = false;
    499c:	80 e0       	ldi	r24, 0x00	; 0
    499e:	01 c0       	rjmp	.+2      	; 0x49a2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x188>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    49a0:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 0;
			}
		}
		case SPRINT_S2:
		{
			if(patternNotSet)
    49a2:	88 23       	and	r24, r24
    49a4:	81 f0       	breq	.+32     	; 0x49c6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ac>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MI");
    49a6:	e8 e4       	ldi	r30, 0x48	; 72
    49a8:	f7 e4       	ldi	r31, 0x47	; 71
    49aa:	8d e4       	ldi	r24, 0x4D	; 77
    49ac:	99 e4       	ldi	r25, 0x49	; 73
    49ae:	80 83       	st	Z, r24
    49b0:	91 83       	std	Z+1, r25	; 0x01
    49b2:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
				g_intra_cycle_delay_time = 12;
    49b4:	8c e0       	ldi	r24, 0x0C	; 12
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    49bc:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case SPRINT_S2:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MI");
				patternNotSet = false;
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	01 c0       	rjmp	.+2      	; 0x49c6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ac>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    49c4:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 12;
			}
		}
		case SPRINT_S3:
		{
			if(patternNotSet)
    49c6:	88 23       	and	r24, r24
    49c8:	81 f0       	breq	.+32     	; 0x49ea <_Z11setupForFoxP5Fox_t13EventAction_t+0x1d0>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MS");
    49ca:	e8 e4       	ldi	r30, 0x48	; 72
    49cc:	f7 e4       	ldi	r31, 0x47	; 71
    49ce:	8d e4       	ldi	r24, 0x4D	; 77
    49d0:	93 e5       	ldi	r25, 0x53	; 83
    49d2:	80 83       	st	Z, r24
    49d4:	91 83       	std	Z+1, r25	; 0x01
    49d6:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
				g_intra_cycle_delay_time = 24;
    49d8:	88 e1       	ldi	r24, 0x18	; 24
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    49e0:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case SPRINT_S3:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MS");
				patternNotSet = false;
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	01 c0       	rjmp	.+2      	; 0x49ea <_Z11setupForFoxP5Fox_t13EventAction_t+0x1d0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    49e8:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 24;
			}
		}
		case SPRINT_S4:
		{
			if(patternNotSet)
    49ea:	88 23       	and	r24, r24
    49ec:	81 f0       	breq	.+32     	; 0x4a0e <_Z11setupForFoxP5Fox_t13EventAction_t+0x1f4>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MH");
    49ee:	e8 e4       	ldi	r30, 0x48	; 72
    49f0:	f7 e4       	ldi	r31, 0x47	; 71
    49f2:	8d e4       	ldi	r24, 0x4D	; 77
    49f4:	98 e4       	ldi	r25, 0x48	; 72
    49f6:	80 83       	st	Z, r24
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
				g_intra_cycle_delay_time = 36;
    49fc:	84 e2       	ldi	r24, 0x24	; 36
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    4a04:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case SPRINT_S4:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MH");
				patternNotSet = false;
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	01 c0       	rjmp	.+2      	; 0x4a0e <_Z11setupForFoxP5Fox_t13EventAction_t+0x1f4>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case SPRINT_S5:
		{
			{
				if(patternNotSet)
    4a0e:	88 23       	and	r24, r24
    4a10:	69 f0       	breq	.+26     	; 0x4a2c <_Z11setupForFoxP5Fox_t13EventAction_t+0x212>
				{
					sprintf(g_messages_text[PATTERN_TEXT], "M5");
    4a12:	e8 e4       	ldi	r30, 0x48	; 72
    4a14:	f7 e4       	ldi	r31, 0x47	; 71
    4a16:	8d e4       	ldi	r24, 0x4D	; 77
    4a18:	95 e3       	ldi	r25, 0x35	; 53
    4a1a:	80 83       	st	Z, r24
    4a1c:	91 83       	std	Z+1, r25	; 0x01
    4a1e:	12 82       	std	Z+2, r1	; 0x02
					g_intra_cycle_delay_time = 48;
    4a20:	80 e3       	ldi	r24, 0x30	; 48
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    4a28:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
				}
			}
			
			bool repeat = true;
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4a30:	40 e0       	ldi	r20, 0x00	; 0
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	be 01       	movw	r22, r28
    4a36:	6f 5f       	subi	r22, 0xFF	; 255
    4a38:	7f 4f       	sbci	r23, 0xFF	; 255
    4a3a:	88 e4       	ldi	r24, 0x48	; 72
    4a3c:	97 e4       	ldi	r25, 0x47	; 71
    4a3e:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    4a42:	88 e0       	ldi	r24, 0x08	; 8
    4a44:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4a48:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4a4c:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    4a50:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4a54:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    4a58:	88 e5       	ldi	r24, 0x58	; 88
    4a5a:	92 e0       	ldi	r25, 0x02	; 2
    4a5c:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    4a60:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    4a64:	8c e0       	ldi	r24, 0x0C	; 12
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4a6c:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    4a70:	80 e3       	ldi	r24, 0x30	; 48
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4a78:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4a7c:	bc c0       	rjmp	.+376    	; 0x4bf6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3dc>

		case SPRINT_F1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OE");
    4a7e:	e8 e4       	ldi	r30, 0x48	; 72
    4a80:	f7 e4       	ldi	r31, 0x47	; 71
    4a82:	8f e4       	ldi	r24, 0x4F	; 79
    4a84:	95 e4       	ldi	r25, 0x45	; 69
    4a86:	80 83       	st	Z, r24
    4a88:	91 83       	std	Z+1, r25	; 0x01
    4a8a:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
				g_intra_cycle_delay_time = 0;
    4a8c:	10 92 74 47 	sts	0x4774, r1	; 0x804774 <g_intra_cycle_delay_time>
    4a90:	10 92 75 47 	sts	0x4775, r1	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case SPRINT_F1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OE");
				patternNotSet = false;
    4a94:	80 e0       	ldi	r24, 0x00	; 0
    4a96:	01 c0       	rjmp	.+2      	; 0x4a9a <_Z11setupForFoxP5Fox_t13EventAction_t+0x280>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4a98:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 0;
			}
		}
		case SPRINT_F2:
		{
			if(patternNotSet)
    4a9a:	88 23       	and	r24, r24
    4a9c:	81 f0       	breq	.+32     	; 0x4abe <_Z11setupForFoxP5Fox_t13EventAction_t+0x2a4>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OI");
    4a9e:	e8 e4       	ldi	r30, 0x48	; 72
    4aa0:	f7 e4       	ldi	r31, 0x47	; 71
    4aa2:	8f e4       	ldi	r24, 0x4F	; 79
    4aa4:	99 e4       	ldi	r25, 0x49	; 73
    4aa6:	80 83       	st	Z, r24
    4aa8:	91 83       	std	Z+1, r25	; 0x01
    4aaa:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
				g_intra_cycle_delay_time = 12;
    4aac:	8c e0       	ldi	r24, 0x0C	; 12
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    4ab4:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case SPRINT_F2:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OI");
				patternNotSet = false;
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
    4aba:	01 c0       	rjmp	.+2      	; 0x4abe <_Z11setupForFoxP5Fox_t13EventAction_t+0x2a4>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4abc:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 12;
			}
		}
		case SPRINT_F3:
		{
			if(patternNotSet)
    4abe:	88 23       	and	r24, r24
    4ac0:	81 f0       	breq	.+32     	; 0x4ae2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c8>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OS");
    4ac2:	e8 e4       	ldi	r30, 0x48	; 72
    4ac4:	f7 e4       	ldi	r31, 0x47	; 71
    4ac6:	8f e4       	ldi	r24, 0x4F	; 79
    4ac8:	93 e5       	ldi	r25, 0x53	; 83
    4aca:	80 83       	st	Z, r24
    4acc:	91 83       	std	Z+1, r25	; 0x01
    4ace:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
				g_intra_cycle_delay_time = 24;
    4ad0:	88 e1       	ldi	r24, 0x18	; 24
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    4ad8:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case SPRINT_F3:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OS");
				patternNotSet = false;
    4adc:	80 e0       	ldi	r24, 0x00	; 0
    4ade:	01 c0       	rjmp	.+2      	; 0x4ae2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c8>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 24;
			}
		}
		case SPRINT_F4:
		{
			if(patternNotSet)
    4ae2:	88 23       	and	r24, r24
    4ae4:	81 f0       	breq	.+32     	; 0x4b06 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2ec>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OH");
    4ae6:	e8 e4       	ldi	r30, 0x48	; 72
    4ae8:	f7 e4       	ldi	r31, 0x47	; 71
    4aea:	8f e4       	ldi	r24, 0x4F	; 79
    4aec:	98 e4       	ldi	r25, 0x48	; 72
    4aee:	80 83       	st	Z, r24
    4af0:	91 83       	std	Z+1, r25	; 0x01
    4af2:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
				g_intra_cycle_delay_time = 36;
    4af4:	84 e2       	ldi	r24, 0x24	; 36
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    4afc:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
		case SPRINT_F4:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OH");
				patternNotSet = false;
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	01 c0       	rjmp	.+2      	; 0x4b06 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2ec>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4b04:	81 e0       	ldi	r24, 0x01	; 1
				g_intra_cycle_delay_time = 36;
			}
		}
		case SPRINT_F5:
		{
			if(patternNotSet)
    4b06:	88 23       	and	r24, r24
    4b08:	69 f0       	breq	.+26     	; 0x4b24 <_Z11setupForFoxP5Fox_t13EventAction_t+0x30a>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "O5");
    4b0a:	e8 e4       	ldi	r30, 0x48	; 72
    4b0c:	f7 e4       	ldi	r31, 0x47	; 71
    4b0e:	8f e4       	ldi	r24, 0x4F	; 79
    4b10:	95 e3       	ldi	r25, 0x35	; 53
    4b12:	80 83       	st	Z, r24
    4b14:	91 83       	std	Z+1, r25	; 0x01
    4b16:	12 82       	std	Z+2, r1	; 0x02
				g_intra_cycle_delay_time = 48;
    4b18:	80 e3       	ldi	r24, 0x30	; 48
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	80 93 74 47 	sts	0x4774, r24	; 0x804774 <g_intra_cycle_delay_time>
    4b20:	90 93 75 47 	sts	0x4775, r25	; 0x804775 <g_intra_cycle_delay_time+0x1>
			}
			
			bool repeat = true;
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4b28:	40 e0       	ldi	r20, 0x00	; 0
    4b2a:	50 e0       	ldi	r21, 0x00	; 0
    4b2c:	be 01       	movw	r22, r28
    4b2e:	6f 5f       	subi	r22, 0xFF	; 255
    4b30:	7f 4f       	sbci	r23, 0xFF	; 255
    4b32:	88 e4       	ldi	r24, 0x48	; 72
    4b34:	97 e4       	ldi	r25, 0x47	; 71
    4b36:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 15;
    4b3a:	8f e0       	ldi	r24, 0x0F	; 15
    4b3c:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4b40:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4b44:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    4b48:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4b4c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    4b50:	88 e5       	ldi	r24, 0x58	; 88
    4b52:	92 e0       	ldi	r25, 0x02	; 2
    4b54:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    4b58:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    4b5c:	8c e0       	ldi	r24, 0x0C	; 12
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4b64:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    4b68:	80 e3       	ldi	r24, 0x30	; 48
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4b70:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4b74:	40 c0       	rjmp	.+128    	; 0x4bf6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3dc>
#endif // SUPPORT_TEMP_AND_VOLTAGE_REPORTING


		case SPECTATOR:
		{
			sprintf(g_messages_text[PATTERN_TEXT], "S");
    4b76:	83 e5       	ldi	r24, 0x53	; 83
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	80 93 48 47 	sts	0x4748, r24	; 0x804748 <g_messages_text>
    4b7e:	90 93 49 47 	sts	0x4749, r25	; 0x804749 <g_messages_text+0x1>
			patternNotSet = false;
			g_intra_cycle_delay_time = 0;
    4b82:	10 92 74 47 	sts	0x4774, r1	; 0x804774 <g_intra_cycle_delay_time>
    4b86:	10 92 75 47 	sts	0x4775, r1	; 0x804775 <g_intra_cycle_delay_time+0x1>


		case SPECTATOR:
		{
			sprintf(g_messages_text[PATTERN_TEXT], "S");
			patternNotSet = false;
    4b8a:	80 e0       	ldi	r24, 0x00	; 0
    4b8c:	01 c0       	rjmp	.+2      	; 0x4b90 <_Z11setupForFoxP5Fox_t13EventAction_t+0x376>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4b8e:	81 e0       	ldi	r24, 0x01	; 1
			g_intra_cycle_delay_time = 0;
		}
		case BEACON:
		default:
		{
			if(patternNotSet)
    4b90:	88 23       	and	r24, r24
    4b92:	39 f0       	breq	.+14     	; 0x4ba2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x388>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO");
    4b94:	e8 e4       	ldi	r30, 0x48	; 72
    4b96:	f7 e4       	ldi	r31, 0x47	; 71
    4b98:	8d e4       	ldi	r24, 0x4D	; 77
    4b9a:	9f e4       	ldi	r25, 0x4F	; 79
    4b9c:	80 83       	st	Z, r24
    4b9e:	91 83       	std	Z+1, r25	; 0x01
    4ba0:	12 82       	std	Z+2, r1	; 0x02
			}
			
			g_intra_cycle_delay_time = 0;
    4ba2:	10 92 74 47 	sts	0x4774, r1	; 0x804774 <g_intra_cycle_delay_time>
    4ba6:	10 92 75 47 	sts	0x4775, r1	; 0x804775 <g_intra_cycle_delay_time+0x1>
			bool repeat = true;
    4baa:	81 e0       	ldi	r24, 0x01	; 1
    4bac:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4bae:	40 e0       	ldi	r20, 0x00	; 0
    4bb0:	50 e0       	ldi	r21, 0x00	; 0
    4bb2:	be 01       	movw	r22, r28
    4bb4:	6f 5f       	subi	r22, 0xFF	; 255
    4bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb8:	88 e4       	ldi	r24, 0x48	; 72
    4bba:	97 e4       	ldi	r25, 0x47	; 71
    4bbc:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    4bc0:	88 e0       	ldi	r24, 0x08	; 8
    4bc2:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4bc6:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4bca:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    4bce:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4bd2:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    4bd6:	88 e5       	ldi	r24, 0x58	; 88
    4bd8:	92 e0       	ldi	r25, 0x02	; 2
    4bda:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <_ZL26g_sendID_seconds_countdown>
    4bde:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    4be2:	8c e3       	ldi	r24, 0x3C	; 60
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4bea:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 0;						/* off period is very short */
    4bee:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    4bf2:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
	}

	if(action == START_NOTHING)
    4bf6:	11 11       	cpse	r17, r1
    4bf8:	12 c0       	rjmp	.+36     	; 0x4c1e <_Z11setupForFoxP5Fox_t13EventAction_t+0x404>
	{
		g_event_commenced = false;                   /* get things running immediately */
    4bfa:	10 92 7f 47 	sts	0x477F, r1	; 0x80477f <g_event_commenced>
		g_event_enabled = false;                     /* get things running immediately */
    4bfe:	10 92 7e 47 	sts	0x477E, r1	; 0x80477e <g_event_enabled>

 		g_use_rtc_for_startstop = false;
    4c02:	10 92 a0 47 	sts	0x47A0, r1	; 0x8047a0 <g_use_rtc_for_startstop>
 		g_event_enabled = false;
    4c06:	10 92 7e 47 	sts	0x477E, r1	; 0x80477e <g_event_enabled>
		keyTransmitter(OFF);
    4c0a:	80 e0       	ldi	r24, 0x00	; 0
    4c0c:	0e 94 99 46 	call	0x8d32	; 0x8d32 <_Z14keyTransmitterb>
    4c10:	89 b1       	in	r24, 0x09	; 9
    4c12:	80 64       	ori	r24, 0x40	; 64
    4c14:	89 b9       	out	0x09, r24	; 9
		LED_set_level(OFF);
		powerToTransmitter(OFF);
    4c16:	80 e0       	ldi	r24, 0x00	; 0
    4c18:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <_Z18powerToTransmitterb>
    4c1c:	9a c0       	rjmp	.+308    	; 0x4d52 <_Z11setupForFoxP5Fox_t13EventAction_t+0x538>
	}
	else if(action == START_EVENT_NOW)
    4c1e:	11 30       	cpi	r17, 0x01	; 1
    4c20:	09 f0       	breq	.+2      	; 0x4c24 <_Z11setupForFoxP5Fox_t13EventAction_t+0x40a>
    4c22:	62 c0       	rjmp	.+196    	; 0x4ce8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4ce>
//  		g_event_enabled = true;
// 		g_event_commenced = true;					/* get things running immediately */
// 		g_event_enabled = true;						/* get things running immediately */

		EC result;
		g_current_epoch = ds3231_get_epoch(&result);
    4c24:	ce 01       	movw	r24, r28
    4c26:	02 96       	adiw	r24, 0x02	; 2
    4c28:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    4c2c:	60 93 9c 47 	sts	0x479C, r22	; 0x80479c <g_current_epoch>
    4c30:	70 93 9d 47 	sts	0x479D, r23	; 0x80479d <g_current_epoch+0x1>
    4c34:	80 93 9e 47 	sts	0x479E, r24	; 0x80479e <g_current_epoch+0x2>
    4c38:	90 93 9f 47 	sts	0x479F, r25	; 0x80479f <g_current_epoch+0x3>
		
		if(result == ERROR_CODE_NO_ERROR)
    4c3c:	2a 81       	ldd	r18, Y+2	; 0x02
    4c3e:	21 11       	cpse	r18, r1
    4c40:	31 c0       	rjmp	.+98     	; 0x4ca4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x48a>
		{
			g_event_start_epoch = g_current_epoch;
    4c42:	60 93 76 47 	sts	0x4776, r22	; 0x804776 <g_event_start_epoch>
    4c46:	70 93 77 47 	sts	0x4777, r23	; 0x804777 <g_event_start_epoch+0x1>
    4c4a:	80 93 78 47 	sts	0x4778, r24	; 0x804778 <g_event_start_epoch+0x2>
    4c4e:	90 93 79 47 	sts	0x4779, r25	; 0x804779 <g_event_start_epoch+0x3>
			if(g_event_start_epoch > g_event_finish_epoch)
    4c52:	40 91 76 47 	lds	r20, 0x4776	; 0x804776 <g_event_start_epoch>
    4c56:	50 91 77 47 	lds	r21, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    4c5a:	60 91 78 47 	lds	r22, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    4c5e:	70 91 79 47 	lds	r23, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    4c62:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <g_event_finish_epoch>
    4c66:	90 91 7b 47 	lds	r25, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    4c6a:	a0 91 7c 47 	lds	r26, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    4c6e:	b0 91 7d 47 	lds	r27, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    4c72:	84 17       	cp	r24, r20
    4c74:	95 07       	cpc	r25, r21
    4c76:	a6 07       	cpc	r26, r22
    4c78:	b7 07       	cpc	r27, r23
    4c7a:	a0 f4       	brcc	.+40     	; 0x4ca4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x48a>
			{
				g_event_finish_epoch = g_event_start_epoch + DAY;
    4c7c:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    4c80:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    4c84:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    4c88:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    4c8c:	80 58       	subi	r24, 0x80	; 128
    4c8e:	9e 4a       	sbci	r25, 0xAE	; 174
    4c90:	ae 4f       	sbci	r26, 0xFE	; 254
    4c92:	bf 4f       	sbci	r27, 0xFF	; 255
    4c94:	80 93 7a 47 	sts	0x477A, r24	; 0x80477a <g_event_finish_epoch>
    4c98:	90 93 7b 47 	sts	0x477B, r25	; 0x80477b <g_event_finish_epoch+0x1>
    4c9c:	a0 93 7c 47 	sts	0x477C, r26	; 0x80477c <g_event_finish_epoch+0x2>
    4ca0:	b0 93 7d 47 	sts	0x477D, r27	; 0x80477d <g_event_finish_epoch+0x3>
			}
		}
		
		SC status = STATUS_CODE_IDLE;
    4ca4:	19 82       	std	Y+1, r1	; 0x01
		result = launchEvent(&status);
    4ca6:	ce 01       	movw	r24, r28
    4ca8:	01 96       	adiw	r24, 0x01	; 1
    4caa:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_Z11launchEventP2SC>
    4cae:	8a 83       	std	Y+2, r24	; 0x02
		
		if(g_go_to_sleep && g_sleepType)
    4cb0:	90 91 82 47 	lds	r25, 0x4782	; 0x804782 <_ZL13g_go_to_sleep>
    4cb4:	99 23       	and	r25, r25
    4cb6:	31 f0       	breq	.+12     	; 0x4cc4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4aa>
    4cb8:	20 91 47 47 	lds	r18, 0x4747	; 0x804747 <_ZL11g_sleepType>
    4cbc:	21 11       	cpse	r18, r1
    4cbe:	03 c0       	rjmp	.+6      	; 0x4cc6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4ac>
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	01 c0       	rjmp	.+2      	; 0x4cc6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4ac>
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	99 23       	and	r25, r25
    4cc8:	29 f0       	breq	.+10     	; 0x4cd4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4ba>
		{
			g_sleepType = SLEEP_AFTER_WIFI_GOES_OFF;
    4cca:	93 e0       	ldi	r25, 0x03	; 3
    4ccc:	90 93 47 47 	sts	0x4747, r25	; 0x804747 <_ZL11g_sleepType>
			g_go_to_sleep = false;
    4cd0:	10 92 82 47 	sts	0x4782, r1	; 0x804782 <_ZL13g_go_to_sleep>
		}

		g_WiFi_shutdown_seconds = 60;
    4cd4:	9c e3       	ldi	r25, 0x3C	; 60
    4cd6:	90 93 09 40 	sts	0x4009, r25	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>

		if(!result)
    4cda:	81 11       	cpse	r24, r1
    4cdc:	3a c0       	rjmp	.+116    	; 0x4d52 <_Z11setupForFoxP5Fox_t13EventAction_t+0x538>
		{
			g_ee_mgr.saveAllEEPROM();
    4cde:	82 e9       	ldi	r24, 0x92	; 146
    4ce0:	97 e4       	ldi	r25, 0x47	; 71
    4ce2:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <_ZN13EepromManager13saveAllEEPROMEv>
    4ce6:	35 c0       	rjmp	.+106    	; 0x4d52 <_Z11setupForFoxP5Fox_t13EventAction_t+0x538>
		}
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    4ce8:	12 30       	cpi	r17, 0x02	; 2
    4cea:	79 f5       	brne	.+94     	; 0x4d4a <_Z11setupForFoxP5Fox_t13EventAction_t+0x530>
	{
		bool repeat = true;
    4cec:	11 e0       	ldi	r17, 0x01	; 1
    4cee:	19 83       	std	Y+1, r17	; 0x01
		makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4cf0:	40 e0       	ldi	r20, 0x00	; 0
    4cf2:	50 e0       	ldi	r21, 0x00	; 0
    4cf4:	be 01       	movw	r22, r28
    4cf6:	6f 5f       	subi	r22, 0xFF	; 255
    4cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfa:	88 e4       	ldi	r24, 0x48	; 72
    4cfc:	97 e4       	ldi	r25, 0x47	; 71
    4cfe:	0e 94 27 3b 	call	0x764e	; 0x764e <_Z9makeMorsePcPbS0_>
		g_code_throttle = throttleValue(g_pattern_codespeed);
    4d02:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4d06:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_Z13throttleValueh>
    4d0a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4d0e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

// 		g_event_start_epoch = 1;                     /* have it start a long time ago */
// 		g_event_finish_epoch = MAX_TIME;             /* run for a long long time */
		g_on_the_air = g_on_air_seconds;			/* start out transmitting */
    4d12:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    4d16:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4d1a:	09 2e       	mov	r0, r25
    4d1c:	00 0c       	add	r0, r0
    4d1e:	aa 0b       	sbc	r26, r26
    4d20:	bb 0b       	sbc	r27, r27
    4d22:	80 93 3e 47 	sts	0x473E, r24	; 0x80473e <_ZL12g_on_the_air>
    4d26:	90 93 3f 47 	sts	0x473F, r25	; 0x80473f <_ZL12g_on_the_air+0x1>
    4d2a:	a0 93 40 47 	sts	0x4740, r26	; 0x804740 <_ZL12g_on_the_air+0x2>
    4d2e:	b0 93 41 47 	sts	0x4741, r27	; 0x804741 <_ZL12g_on_the_air+0x3>
		g_event_commenced = true;                   /* get things running immediately */
    4d32:	10 93 7f 47 	sts	0x477F, r17	; 0x80477f <g_event_commenced>
		g_event_enabled = true;                     /* get things running immediately */
    4d36:	10 93 7e 47 	sts	0x477E, r17	; 0x80477e <g_event_enabled>
		g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    4d3a:	8d ef       	ldi	r24, 0xFD	; 253
    4d3c:	80 93 3a 47 	sts	0x473A, r24	; 0x80473a <_ZL18g_last_status_code>
		
// 		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
 		g_use_rtc_for_startstop = false;
    4d40:	10 92 a0 47 	sts	0x47A0, r1	; 0x8047a0 <g_use_rtc_for_startstop>
 		g_event_enabled = true;
    4d44:	10 93 7e 47 	sts	0x477E, r17	; 0x80477e <g_event_enabled>
    4d48:	04 c0       	rjmp	.+8      	; 0x4d52 <_Z11setupForFoxP5Fox_t13EventAction_t+0x538>
	}
	else         /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		SC sc;
 //		EC ec = 
		launchEvent(&sc);
    4d4a:	ce 01       	movw	r24, r28
    4d4c:	01 96       	adiw	r24, 0x01	; 1
    4d4e:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_Z11launchEventP2SC>
// 
// 	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
// 	g_sendAMmodulation = false;
// 	g_LED_enunciating = false;
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}
    4d52:	0f 90       	pop	r0
    4d54:	0f 90       	pop	r0
    4d56:	df 91       	pop	r29
    4d58:	cf 91       	pop	r28
    4d5a:	1f 91       	pop	r17
    4d5c:	08 95       	ret

00004d5e <_Z18validateTimeStringPcPma>:

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    4d5e:	4f 92       	push	r4
    4d60:	5f 92       	push	r5
    4d62:	6f 92       	push	r6
    4d64:	7f 92       	push	r7
    4d66:	8f 92       	push	r8
    4d68:	9f 92       	push	r9
    4d6a:	af 92       	push	r10
    4d6c:	bf 92       	push	r11
    4d6e:	cf 92       	push	r12
    4d70:	df 92       	push	r13
    4d72:	ef 92       	push	r14
    4d74:	ff 92       	push	r15
    4d76:	0f 93       	push	r16
    4d78:	1f 93       	push	r17
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
    4d7e:	cd b7       	in	r28, 0x3d	; 61
    4d80:	de b7       	in	r29, 0x3e	; 62
    4d82:	28 97       	sbiw	r28, 0x08	; 8
    4d84:	cd bf       	out	0x3d, r28	; 61
    4d86:	de bf       	out	0x3e, r29	; 62
    4d88:	7c 01       	movw	r14, r24
    4d8a:	c4 2e       	mov	r12, r20
	time_t valid = 0;
	int len = strlen(str);
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	01 90       	ld	r0, Z+
    4d90:	00 20       	and	r0, r0
    4d92:	e9 f7       	brne	.-6      	; 0x4d8e <_Z18validateTimeStringPcPma+0x30>
    4d94:	31 97       	sbiw	r30, 0x01	; 1
    4d96:	8f 01       	movw	r16, r30
    4d98:	08 1b       	sub	r16, r24
    4d9a:	19 0b       	sbc	r17, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    4d9c:	27 e4       	ldi	r18, 0x47	; 71
    4d9e:	66 37       	cpi	r22, 0x76	; 118
    4da0:	72 07       	cpc	r23, r18
    4da2:	e1 f4       	brne	.+56     	; 0x4ddc <_Z18validateTimeStringPcPma+0x7e>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4da4:	80 90 9c 47 	lds	r8, 0x479C	; 0x80479c <g_current_epoch>
    4da8:	90 90 9d 47 	lds	r9, 0x479D	; 0x80479d <g_current_epoch+0x1>
    4dac:	a0 90 9e 47 	lds	r10, 0x479E	; 0x80479e <g_current_epoch+0x2>
    4db0:	b0 90 9f 47 	lds	r11, 0x479F	; 0x80479f <g_current_epoch+0x3>
    4db4:	81 14       	cp	r8, r1
    4db6:	86 e6       	ldi	r24, 0x66	; 102
    4db8:	98 06       	cpc	r9, r24
    4dba:	8e ee       	ldi	r24, 0xEE	; 238
    4dbc:	a8 06       	cpc	r10, r24
    4dbe:	8f e5       	ldi	r24, 0x5F	; 95
    4dc0:	b8 06       	cpc	r11, r24
    4dc2:	e8 f5       	brcc	.+122    	; 0x4e3e <_Z18validateTimeStringPcPma+0xe0>
		validationType = 1;
    4dc4:	dd 24       	eor	r13, r13
    4dc6:	d3 94       	inc	r13
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4dc8:	0f 2e       	mov	r0, r31
    4dca:	81 2c       	mov	r8, r1
    4dcc:	f6 e6       	ldi	r31, 0x66	; 102
    4dce:	9f 2e       	mov	r9, r31
    4dd0:	fe ee       	ldi	r31, 0xEE	; 238
    4dd2:	af 2e       	mov	r10, r31
    4dd4:	ff e5       	ldi	r31, 0x5F	; 95
    4dd6:	bf 2e       	mov	r11, r31
    4dd8:	f0 2d       	mov	r31, r0
    4dda:	3e c0       	rjmp	.+124    	; 0x4e58 <_Z18validateTimeStringPcPma+0xfa>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
    4ddc:	6a 57       	subi	r22, 0x7A	; 122
    4dde:	77 44       	sbci	r23, 0x47	; 71
    4de0:	89 f5       	brne	.+98     	; 0x4e44 <_Z18validateTimeStringPcPma+0xe6>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    4de2:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    4de6:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    4dea:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    4dee:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    4df2:	8d 83       	std	Y+5, r24	; 0x05
    4df4:	9e 83       	std	Y+6, r25	; 0x06
    4df6:	af 83       	std	Y+7, r26	; 0x07
    4df8:	b8 87       	std	Y+8, r27	; 0x08
    4dfa:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    4dfe:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    4e02:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    4e06:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    4e0a:	89 83       	std	Y+1, r24	; 0x01
    4e0c:	9a 83       	std	Y+2, r25	; 0x02
    4e0e:	ab 83       	std	Y+3, r26	; 0x03
    4e10:	bc 83       	std	Y+4, r27	; 0x04
    4e12:	4d 81       	ldd	r20, Y+5	; 0x05
    4e14:	5e 81       	ldd	r21, Y+6	; 0x06
    4e16:	6f 81       	ldd	r22, Y+7	; 0x07
    4e18:	78 85       	ldd	r23, Y+8	; 0x08
    4e1a:	48 17       	cp	r20, r24
    4e1c:	59 07       	cpc	r21, r25
    4e1e:	6a 07       	cpc	r22, r26
    4e20:	7b 07       	cpc	r23, r27
    4e22:	28 f4       	brcc	.+10     	; 0x4e2e <_Z18validateTimeStringPcPma+0xd0>
    4e24:	89 80       	ldd	r8, Y+1	; 0x01
    4e26:	9a 80       	ldd	r9, Y+2	; 0x02
    4e28:	ab 80       	ldd	r10, Y+3	; 0x03
    4e2a:	bc 80       	ldd	r11, Y+4	; 0x04
    4e2c:	04 c0       	rjmp	.+8      	; 0x4e36 <_Z18validateTimeStringPcPma+0xd8>
    4e2e:	8d 80       	ldd	r8, Y+5	; 0x05
    4e30:	9e 80       	ldd	r9, Y+6	; 0x06
    4e32:	af 80       	ldd	r10, Y+7	; 0x07
    4e34:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    4e36:	68 94       	set
    4e38:	dd 24       	eor	r13, r13
    4e3a:	d1 f8       	bld	r13, 1
    4e3c:	0d c0       	rjmp	.+26     	; 0x4e58 <_Z18validateTimeStringPcPma+0xfa>
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
    4e3e:	dd 24       	eor	r13, r13
    4e40:	d3 94       	inc	r13
    4e42:	0a c0       	rjmp	.+20     	; 0x4e58 <_Z18validateTimeStringPcPma+0xfa>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    4e44:	d1 2c       	mov	r13, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    4e46:	0f 2e       	mov	r0, r31
    4e48:	81 2c       	mov	r8, r1
    4e4a:	f6 e6       	ldi	r31, 0x66	; 102
    4e4c:	9f 2e       	mov	r9, r31
    4e4e:	fe ee       	ldi	r31, 0xEE	; 238
    4e50:	af 2e       	mov	r10, r31
    4e52:	ff e5       	ldi	r31, 0x5F	; 95
    4e54:	bf 2e       	mov	r11, r31
    4e56:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}
	
	if(len == 10)
    4e58:	0a 30       	cpi	r16, 0x0A	; 10
    4e5a:	11 05       	cpc	r17, r1
    4e5c:	39 f4       	brne	.+14     	; 0x4e6c <_Z18validateTimeStringPcPma+0x10e>
	{
		str[10] = '0';
    4e5e:	80 e3       	ldi	r24, 0x30	; 48
    4e60:	f7 01       	movw	r30, r14
    4e62:	82 87       	std	Z+10, r24	; 0x0a
		str[11] = '0';
    4e64:	83 87       	std	Z+11, r24	; 0x0b
		str[12] = '\0';
    4e66:	14 86       	std	Z+12, r1	; 0x0c
		len = 12;
    4e68:	0c e0       	ldi	r16, 0x0C	; 12
    4e6a:	10 e0       	ldi	r17, 0x00	; 0
	}

	if((len == 12) && (only_digits(str)))
    4e6c:	0c 30       	cpi	r16, 0x0C	; 12
    4e6e:	11 05       	cpc	r17, r1
    4e70:	21 f4       	brne	.+8      	; 0x4e7a <_Z18validateTimeStringPcPma+0x11c>
    4e72:	c7 01       	movw	r24, r14
    4e74:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <_Z11only_digitsPc>
    4e78:	01 c0       	rjmp	.+2      	; 0x4e7c <_Z18validateTimeStringPcPma+0x11e>
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	88 23       	and	r24, r24
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <_Z18validateTimeStringPcPma+0x124>
    4e80:	4b c0       	rjmp	.+150    	; 0x4f18 <_Z18validateTimeStringPcPma+0x1ba>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    4e82:	b7 01       	movw	r22, r14
    4e84:	80 e0       	ldi	r24, 0x00	; 0
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <RTC_String2Epoch>
    4e8c:	2b 01       	movw	r4, r22
    4e8e:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    4e90:	ac 2d       	mov	r26, r12
    4e92:	cc 0c       	add	r12, r12
    4e94:	bb 0b       	sbc	r27, r27
    4e96:	20 e1       	ldi	r18, 0x10	; 16
    4e98:	3e e0       	ldi	r19, 0x0E	; 14
    4e9a:	0e 94 56 4e 	call	0x9cac	; 0x9cac <__usmulhisi3>
    4e9e:	64 0d       	add	r22, r4
    4ea0:	75 1d       	adc	r23, r5
    4ea2:	86 1d       	adc	r24, r6
    4ea4:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    4ea6:	86 16       	cp	r8, r22
    4ea8:	97 06       	cpc	r9, r23
    4eaa:	a8 06       	cpc	r10, r24
    4eac:	b9 06       	cpc	r11, r25
    4eae:	08 f4       	brcc	.+2      	; 0x4eb2 <_Z18validateTimeStringPcPma+0x154>
    4eb0:	40 c0       	rjmp	.+128    	; 0x4f32 <_Z18validateTimeStringPcPma+0x1d4>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    4eb2:	f1 e0       	ldi	r31, 0x01	; 1
    4eb4:	df 12       	cpse	r13, r31
    4eb6:	08 c0       	rjmp	.+16     	; 0x4ec8 <_Z18validateTimeStringPcPma+0x16a>
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
    4eb8:	82 e3       	ldi	r24, 0x32	; 50
    4eba:	93 e4       	ldi	r25, 0x43	; 67
    4ebc:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4ec0:	60 e0       	ldi	r22, 0x00	; 0
    4ec2:	70 e0       	ldi	r23, 0x00	; 0
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	35 c0       	rjmp	.+106    	; 0x4f32 <_Z18validateTimeStringPcPma+0x1d4>
		{
			if(validationType == 1)         /* start time validation */
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
			}
			else if(validationType == 2)    /* finish time validation */
    4ec8:	22 e0       	ldi	r18, 0x02	; 2
    4eca:	d2 12       	cpse	r13, r18
    4ecc:	1d c0       	rjmp	.+58     	; 0x4f08 <_Z18validateTimeStringPcPma+0x1aa>
			{
				if(ep < g_current_epoch)
    4ece:	00 91 9c 47 	lds	r16, 0x479C	; 0x80479c <g_current_epoch>
    4ed2:	10 91 9d 47 	lds	r17, 0x479D	; 0x80479d <g_current_epoch+0x1>
    4ed6:	20 91 9e 47 	lds	r18, 0x479E	; 0x80479e <g_current_epoch+0x2>
    4eda:	30 91 9f 47 	lds	r19, 0x479F	; 0x80479f <g_current_epoch+0x3>
    4ede:	60 17       	cp	r22, r16
    4ee0:	71 07       	cpc	r23, r17
    4ee2:	82 07       	cpc	r24, r18
    4ee4:	93 07       	cpc	r25, r19
    4ee6:	40 f4       	brcc	.+16     	; 0x4ef8 <_Z18validateTimeStringPcPma+0x19a>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
    4ee8:	87 e4       	ldi	r24, 0x47	; 71
    4eea:	93 e4       	ldi	r25, 0x43	; 67
    4eec:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4ef0:	60 e0       	ldi	r22, 0x00	; 0
    4ef2:	70 e0       	ldi	r23, 0x00	; 0
    4ef4:	cb 01       	movw	r24, r22
    4ef6:	1d c0       	rjmp	.+58     	; 0x4f32 <_Z18validateTimeStringPcPma+0x1d4>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
				}
				else
				{
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
    4ef8:	8d e5       	ldi	r24, 0x5D	; 93
    4efa:	93 e4       	ldi	r25, 0x43	; 67
    4efc:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4f00:	60 e0       	ldi	r22, 0x00	; 0
    4f02:	70 e0       	ldi	r23, 0x00	; 0
    4f04:	cb 01       	movw	r24, r22
    4f06:	15 c0       	rjmp	.+42     	; 0x4f32 <_Z18validateTimeStringPcPma+0x1d4>
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
				}
			}
			else    /* current time validation */
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
    4f08:	88 e7       	ldi	r24, 0x78	; 120
    4f0a:	93 e4       	ldi	r25, 0x43	; 67
    4f0c:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4f10:	60 e0       	ldi	r22, 0x00	; 0
    4f12:	70 e0       	ldi	r23, 0x00	; 0
    4f14:	cb 01       	movw	r24, r22
    4f16:	0d c0       	rjmp	.+26     	; 0x4f32 <_Z18validateTimeStringPcPma+0x1d4>
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
			}
		}
	}
	else if(len)
    4f18:	01 2b       	or	r16, r17
    4f1a:	41 f0       	breq	.+16     	; 0x4f2c <_Z18validateTimeStringPcPma+0x1ce>
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
    4f1c:	8c e8       	ldi	r24, 0x8C	; 140
    4f1e:	93 e4       	ldi	r25, 0x43	; 67
    4f20:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4f24:	60 e0       	ldi	r22, 0x00	; 0
    4f26:	70 e0       	ldi	r23, 0x00	; 0
    4f28:	cb 01       	movw	r24, r22
    4f2a:	03 c0       	rjmp	.+6      	; 0x4f32 <_Z18validateTimeStringPcPma+0x1d4>
    4f2c:	60 e0       	ldi	r22, 0x00	; 0
    4f2e:	70 e0       	ldi	r23, 0x00	; 0
    4f30:	cb 01       	movw	r24, r22
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
	}

	return(valid);
}
    4f32:	28 96       	adiw	r28, 0x08	; 8
    4f34:	cd bf       	out	0x3d, r28	; 61
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	df 91       	pop	r29
    4f3a:	cf 91       	pop	r28
    4f3c:	1f 91       	pop	r17
    4f3e:	0f 91       	pop	r16
    4f40:	ff 90       	pop	r15
    4f42:	ef 90       	pop	r14
    4f44:	df 90       	pop	r13
    4f46:	cf 90       	pop	r12
    4f48:	bf 90       	pop	r11
    4f4a:	af 90       	pop	r10
    4f4c:	9f 90       	pop	r9
    4f4e:	8f 90       	pop	r8
    4f50:	7f 90       	pop	r7
    4f52:	6f 90       	pop	r6
    4f54:	5f 90       	pop	r5
    4f56:	4f 90       	pop	r4
    4f58:	08 95       	ret

00004f5a <_Z14reportTimeTillmmPKcS0_>:


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    4f5a:	2f 92       	push	r2
    4f5c:	3f 92       	push	r3
    4f5e:	4f 92       	push	r4
    4f60:	5f 92       	push	r5
    4f62:	6f 92       	push	r6
    4f64:	7f 92       	push	r7
    4f66:	8f 92       	push	r8
    4f68:	9f 92       	push	r9
    4f6a:	af 92       	push	r10
    4f6c:	bf 92       	push	r11
    4f6e:	cf 92       	push	r12
    4f70:	df 92       	push	r13
    4f72:	ef 92       	push	r14
    4f74:	ff 92       	push	r15
    4f76:	0f 93       	push	r16
    4f78:	1f 93       	push	r17
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	cd b7       	in	r28, 0x3d	; 61
    4f80:	de b7       	in	r29, 0x3e	; 62
    4f82:	2c 97       	sbiw	r28, 0x0c	; 12
    4f84:	cd bf       	out	0x3d, r28	; 61
    4f86:	de bf       	out	0x3e, r29	; 62
    4f88:	2b 01       	movw	r4, r22
    4f8a:	3c 01       	movw	r6, r24
    4f8c:	49 01       	movw	r8, r18
    4f8e:	5a 01       	movw	r10, r20
	bool failure = false;

	if(from >= until)   /* Negative time */
    4f90:	62 17       	cp	r22, r18
    4f92:	73 07       	cpc	r23, r19
    4f94:	84 07       	cpc	r24, r20
    4f96:	95 07       	cpc	r25, r21
    4f98:	48 f0       	brcs	.+18     	; 0x4fac <_Z14reportTimeTillmmPKcS0_+0x52>
	{
		failure = true;
		if(failMsg)
    4f9a:	e1 14       	cp	r14, r1
    4f9c:	f1 04       	cpc	r15, r1
    4f9e:	09 f4       	brne	.+2      	; 0x4fa2 <_Z14reportTimeTillmmPKcS0_+0x48>
    4fa0:	fd c0       	rjmp	.+506    	; 0x519c <_Z14reportTimeTillmmPKcS0_+0x242>
		{
			sb_send_string((char*)failMsg);
    4fa2:	c7 01       	movw	r24, r14
    4fa4:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
{
	bool failure = false;

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	f9 c0       	rjmp	.+498    	; 0x519e <_Z14reportTimeTillmmPKcS0_+0x244>
			sb_send_string((char*)failMsg);
		}
	}
	else
	{
		if(prefix)
    4fac:	01 15       	cp	r16, r1
    4fae:	11 05       	cpc	r17, r1
    4fb0:	19 f0       	breq	.+6      	; 0x4fb8 <_Z14reportTimeTillmmPKcS0_+0x5e>
		{
			sb_send_string((char*)prefix);
    4fb2:	c8 01       	movw	r24, r16
    4fb4:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
		}
		time_t dif = until - from;
    4fb8:	75 01       	movw	r14, r10
    4fba:	64 01       	movw	r12, r8
    4fbc:	c4 18       	sub	r12, r4
    4fbe:	d5 08       	sbc	r13, r5
    4fc0:	e6 08       	sbc	r14, r6
    4fc2:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    4fc4:	c7 01       	movw	r24, r14
    4fc6:	b6 01       	movw	r22, r12
    4fc8:	20 e8       	ldi	r18, 0x80	; 128
    4fca:	33 e3       	ldi	r19, 0x33	; 51
    4fcc:	41 ee       	ldi	r20, 0xE1	; 225
    4fce:	51 e0       	ldi	r21, 0x01	; 1
    4fd0:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    4fd4:	29 01       	movw	r4, r18
    4fd6:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    4fd8:	44 27       	eor	r20, r20
    4fda:	55 27       	eor	r21, r21
    4fdc:	60 e8       	ldi	r22, 0x80	; 128
    4fde:	73 e3       	ldi	r23, 0x33	; 51
    4fe0:	81 ee       	ldi	r24, 0xE1	; 225
    4fe2:	91 e0       	ldi	r25, 0x01	; 1
    4fe4:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__mulsi3>
    4fe8:	c6 1a       	sub	r12, r22
    4fea:	d7 0a       	sbc	r13, r23
    4fec:	e8 0a       	sbc	r14, r24
    4fee:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    4ff0:	c7 01       	movw	r24, r14
    4ff2:	b6 01       	movw	r22, r12
    4ff4:	20 e8       	ldi	r18, 0x80	; 128
    4ff6:	31 e5       	ldi	r19, 0x51	; 81
    4ff8:	41 e0       	ldi	r20, 0x01	; 1
    4ffa:	50 e0       	ldi	r21, 0x00	; 0
    4ffc:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    5000:	49 01       	movw	r8, r18
    5002:	5a 01       	movw	r10, r20
    5004:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    5006:	44 27       	eor	r20, r20
    5008:	55 27       	eor	r21, r21
    500a:	60 e8       	ldi	r22, 0x80	; 128
    500c:	71 e5       	ldi	r23, 0x51	; 81
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__mulsi3>
    5016:	c6 1a       	sub	r12, r22
    5018:	d7 0a       	sbc	r13, r23
    501a:	e8 0a       	sbc	r14, r24
    501c:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    501e:	c7 01       	movw	r24, r14
    5020:	b6 01       	movw	r22, r12
    5022:	20 e1       	ldi	r18, 0x10	; 16
    5024:	3e e0       	ldi	r19, 0x0E	; 14
    5026:	40 e0       	ldi	r20, 0x00	; 0
    5028:	50 e0       	ldi	r21, 0x00	; 0
    502a:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    502e:	29 83       	std	Y+1, r18	; 0x01
    5030:	3a 83       	std	Y+2, r19	; 0x02
    5032:	4b 83       	std	Y+3, r20	; 0x03
    5034:	5c 83       	std	Y+4, r21	; 0x04
    5036:	29 81       	ldd	r18, Y+1	; 0x01
    5038:	3a 81       	ldd	r19, Y+2	; 0x02
    503a:	29 87       	std	Y+9, r18	; 0x09
    503c:	3a 87       	std	Y+10, r19	; 0x0a
		hold -= (hours * HOUR);
    503e:	29 81       	ldd	r18, Y+1	; 0x01
    5040:	3a 81       	ldd	r19, Y+2	; 0x02
    5042:	4b 81       	ldd	r20, Y+3	; 0x03
    5044:	5c 81       	ldd	r21, Y+4	; 0x04
    5046:	44 27       	eor	r20, r20
    5048:	55 27       	eor	r21, r21
    504a:	a0 e1       	ldi	r26, 0x10	; 16
    504c:	be e0       	ldi	r27, 0x0E	; 14
    504e:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <__muluhisi3>
    5052:	c6 1a       	sub	r12, r22
    5054:	d7 0a       	sbc	r13, r23
    5056:	e8 0a       	sbc	r14, r24
    5058:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    505a:	c7 01       	movw	r24, r14
    505c:	b6 01       	movw	r22, r12
    505e:	2c e3       	ldi	r18, 0x3C	; 60
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	40 e0       	ldi	r20, 0x00	; 0
    5064:	50 e0       	ldi	r21, 0x00	; 0
    5066:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    506a:	2d 83       	std	Y+5, r18	; 0x05
    506c:	3e 83       	std	Y+6, r19	; 0x06
    506e:	4f 83       	std	Y+7, r20	; 0x07
    5070:	58 87       	std	Y+8, r21	; 0x08
    5072:	0d 81       	ldd	r16, Y+5	; 0x05
    5074:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    5076:	2c e3       	ldi	r18, 0x3C	; 60
    5078:	20 9f       	mul	r18, r16
    507a:	c0 01       	movw	r24, r0
    507c:	21 9f       	mul	r18, r17
    507e:	90 0d       	add	r25, r0
    5080:	11 24       	eor	r1, r1
    5082:	a6 01       	movw	r20, r12
    5084:	48 1b       	sub	r20, r24
    5086:	59 0b       	sbc	r21, r25
    5088:	4b 87       	std	Y+11, r20	; 0x0b
    508a:	5c 87       	std	Y+12, r21	; 0x0c

		g_tempStr[0] = '\0';
    508c:	10 92 07 47 	sts	0x4707, r1	; 0x804707 <_ZL9g_tempStr>

		if(years)
    5090:	41 14       	cp	r4, r1
    5092:	51 04       	cpc	r5, r1
    5094:	b1 f0       	breq	.+44     	; 0x50c2 <_Z14reportTimeTillmmPKcS0_+0x168>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    5096:	5f 92       	push	r5
    5098:	4f 92       	push	r4
    509a:	80 ea       	ldi	r24, 0xA0	; 160
    509c:	93 e4       	ldi	r25, 0x43	; 67
    509e:	9f 93       	push	r25
    50a0:	8f 93       	push	r24
    50a2:	87 e0       	ldi	r24, 0x07	; 7
    50a4:	97 e4       	ldi	r25, 0x47	; 71
    50a6:	9f 93       	push	r25
    50a8:	8f 93       	push	r24
    50aa:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
			sb_send_string(g_tempStr);
    50ae:	87 e0       	ldi	r24, 0x07	; 7
    50b0:	97 e4       	ldi	r25, 0x47	; 71
    50b2:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    50b6:	0f 90       	pop	r0
    50b8:	0f 90       	pop	r0
    50ba:	0f 90       	pop	r0
    50bc:	0f 90       	pop	r0
    50be:	0f 90       	pop	r0
    50c0:	0f 90       	pop	r0
		}

		if(days)
    50c2:	23 28       	or	r2, r3
    50c4:	b1 f0       	breq	.+44     	; 0x50f2 <_Z14reportTimeTillmmPKcS0_+0x198>
		{
			sprintf(g_tempStr, "%d days ", days);
    50c6:	9f 92       	push	r9
    50c8:	8f 92       	push	r8
    50ca:	88 ea       	ldi	r24, 0xA8	; 168
    50cc:	93 e4       	ldi	r25, 0x43	; 67
    50ce:	9f 93       	push	r25
    50d0:	8f 93       	push	r24
    50d2:	87 e0       	ldi	r24, 0x07	; 7
    50d4:	97 e4       	ldi	r25, 0x47	; 71
    50d6:	9f 93       	push	r25
    50d8:	8f 93       	push	r24
    50da:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
			sb_send_string(g_tempStr);
    50de:	87 e0       	ldi	r24, 0x07	; 7
    50e0:	97 e4       	ldi	r25, 0x47	; 71
    50e2:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    50e6:	0f 90       	pop	r0
    50e8:	0f 90       	pop	r0
    50ea:	0f 90       	pop	r0
    50ec:	0f 90       	pop	r0
    50ee:	0f 90       	pop	r0
    50f0:	0f 90       	pop	r0
		}

		if(hours)
    50f2:	89 85       	ldd	r24, Y+9	; 0x09
    50f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    50f6:	89 2b       	or	r24, r25
    50f8:	c1 f0       	breq	.+48     	; 0x512a <_Z14reportTimeTillmmPKcS0_+0x1d0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    50fa:	9a 81       	ldd	r25, Y+2	; 0x02
    50fc:	9f 93       	push	r25
    50fe:	e9 81       	ldd	r30, Y+1	; 0x01
    5100:	ef 93       	push	r30
    5102:	81 eb       	ldi	r24, 0xB1	; 177
    5104:	93 e4       	ldi	r25, 0x43	; 67
    5106:	9f 93       	push	r25
    5108:	8f 93       	push	r24
    510a:	87 e0       	ldi	r24, 0x07	; 7
    510c:	97 e4       	ldi	r25, 0x47	; 71
    510e:	9f 93       	push	r25
    5110:	8f 93       	push	r24
    5112:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
			sb_send_string(g_tempStr);
    5116:	87 e0       	ldi	r24, 0x07	; 7
    5118:	97 e4       	ldi	r25, 0x47	; 71
    511a:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    511e:	0f 90       	pop	r0
    5120:	0f 90       	pop	r0
    5122:	0f 90       	pop	r0
    5124:	0f 90       	pop	r0
    5126:	0f 90       	pop	r0
    5128:	0f 90       	pop	r0
		}

		if(minutes)
    512a:	01 2b       	or	r16, r17
    512c:	c1 f0       	breq	.+48     	; 0x515e <_Z14reportTimeTillmmPKcS0_+0x204>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    512e:	fe 81       	ldd	r31, Y+6	; 0x06
    5130:	ff 93       	push	r31
    5132:	2d 81       	ldd	r18, Y+5	; 0x05
    5134:	2f 93       	push	r18
    5136:	89 eb       	ldi	r24, 0xB9	; 185
    5138:	93 e4       	ldi	r25, 0x43	; 67
    513a:	9f 93       	push	r25
    513c:	8f 93       	push	r24
    513e:	87 e0       	ldi	r24, 0x07	; 7
    5140:	97 e4       	ldi	r25, 0x47	; 71
    5142:	9f 93       	push	r25
    5144:	8f 93       	push	r24
    5146:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
			sb_send_string(g_tempStr);
    514a:	87 e0       	ldi	r24, 0x07	; 7
    514c:	97 e4       	ldi	r25, 0x47	; 71
    514e:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    5152:	0f 90       	pop	r0
    5154:	0f 90       	pop	r0
    5156:	0f 90       	pop	r0
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    515e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5160:	3f 93       	push	r19
    5162:	4b 85       	ldd	r20, Y+11	; 0x0b
    5164:	4f 93       	push	r20
    5166:	81 ec       	ldi	r24, 0xC1	; 193
    5168:	93 e4       	ldi	r25, 0x43	; 67
    516a:	9f 93       	push	r25
    516c:	8f 93       	push	r24
    516e:	87 e0       	ldi	r24, 0x07	; 7
    5170:	97 e4       	ldi	r25, 0x47	; 71
    5172:	9f 93       	push	r25
    5174:	8f 93       	push	r24
    5176:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
		sb_send_string(g_tempStr);
    517a:	87 e0       	ldi	r24, 0x07	; 7
    517c:	97 e4       	ldi	r25, 0x47	; 71
    517e:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>

		sb_send_NewLine();
    5182:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <sb_send_NewLine>
		g_tempStr[0] = '\0';
    5186:	e7 e0       	ldi	r30, 0x07	; 7
    5188:	f7 e4       	ldi	r31, 0x47	; 71
    518a:	10 82       	st	Z, r1
    518c:	0f 90       	pop	r0
    518e:	0f 90       	pop	r0
    5190:	0f 90       	pop	r0
    5192:	0f 90       	pop	r0
    5194:	0f 90       	pop	r0
    5196:	0f 90       	pop	r0
}


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	bool failure = false;
    5198:	80 e0       	ldi	r24, 0x00	; 0
    519a:	01 c0       	rjmp	.+2      	; 0x519e <_Z14reportTimeTillmmPKcS0_+0x244>

	if(from >= until)   /* Negative time */
	{
		failure = true;
    519c:	81 e0       	ldi	r24, 0x01	; 1
		sb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    519e:	2c 96       	adiw	r28, 0x0c	; 12
    51a0:	cd bf       	out	0x3d, r28	; 61
    51a2:	de bf       	out	0x3e, r29	; 62
    51a4:	df 91       	pop	r29
    51a6:	cf 91       	pop	r28
    51a8:	1f 91       	pop	r17
    51aa:	0f 91       	pop	r16
    51ac:	ff 90       	pop	r15
    51ae:	ef 90       	pop	r14
    51b0:	df 90       	pop	r13
    51b2:	cf 90       	pop	r12
    51b4:	bf 90       	pop	r11
    51b6:	af 90       	pop	r10
    51b8:	9f 90       	pop	r9
    51ba:	8f 90       	pop	r8
    51bc:	7f 90       	pop	r7
    51be:	6f 90       	pop	r6
    51c0:	5f 90       	pop	r5
    51c2:	4f 90       	pop	r4
    51c4:	3f 90       	pop	r3
    51c6:	2f 90       	pop	r2
    51c8:	08 95       	ret

000051ca <_Z23clockConfigurationCheckv>:



ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
    51ca:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <g_event_finish_epoch>
    51ce:	90 91 7b 47 	lds	r25, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    51d2:	a0 91 7c 47 	lds	r26, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    51d6:	b0 91 7d 47 	lds	r27, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    51da:	81 15       	cp	r24, r1
    51dc:	96 46       	sbci	r25, 0x66	; 102
    51de:	ae 4e       	sbci	r26, 0xEE	; 238
    51e0:	bf 45       	sbci	r27, 0x5F	; 95
    51e2:	e0 f0       	brcs	.+56     	; 0x521c <_Z23clockConfigurationCheckv+0x52>
    51e4:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    51e8:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    51ec:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    51f0:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    51f4:	81 15       	cp	r24, r1
    51f6:	96 46       	sbci	r25, 0x66	; 102
    51f8:	ae 4e       	sbci	r26, 0xEE	; 238
    51fa:	bf 45       	sbci	r27, 0x5F	; 95
    51fc:	88 f0       	brcs	.+34     	; 0x5220 <_Z23clockConfigurationCheckv+0x56>
    51fe:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    5202:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    5206:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    520a:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    520e:	81 15       	cp	r24, r1
    5210:	96 46       	sbci	r25, 0x66	; 102
    5212:	ae 4e       	sbci	r26, 0xEE	; 238
    5214:	bf 45       	sbci	r27, 0x5F	; 95
    5216:	30 f4       	brcc	.+12     	; 0x5224 <_Z23clockConfigurationCheckv+0x5a>
    5218:	81 e0       	ldi	r24, 0x01	; 1
    521a:	05 c0       	rjmp	.+10     	; 0x5226 <_Z23clockConfigurationCheckv+0x5c>
    521c:	81 e0       	ldi	r24, 0x01	; 1
    521e:	03 c0       	rjmp	.+6      	; 0x5226 <_Z23clockConfigurationCheckv+0x5c>
    5220:	81 e0       	ldi	r24, 0x01	; 1
    5222:	01 c0       	rjmp	.+2      	; 0x5226 <_Z23clockConfigurationCheckv+0x5c>
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	81 11       	cpse	r24, r1
    5228:	43 c0       	rjmp	.+134    	; 0x52b0 <_Z23clockConfigurationCheckv+0xe6>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
    522a:	40 91 7a 47 	lds	r20, 0x477A	; 0x80477a <g_event_finish_epoch>
    522e:	50 91 7b 47 	lds	r21, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    5232:	60 91 7c 47 	lds	r22, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    5236:	70 91 7d 47 	lds	r23, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    523a:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    523e:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    5242:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    5246:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    524a:	84 17       	cp	r24, r20
    524c:	95 07       	cpc	r25, r21
    524e:	a6 07       	cpc	r26, r22
    5250:	b7 07       	cpc	r27, r23
    5252:	80 f5       	brcc	.+96     	; 0x52b4 <_Z23clockConfigurationCheckv+0xea>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
    5254:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    5258:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    525c:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    5260:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    5264:	40 91 7a 47 	lds	r20, 0x477A	; 0x80477a <g_event_finish_epoch>
    5268:	50 91 7b 47 	lds	r21, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    526c:	60 91 7c 47 	lds	r22, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    5270:	70 91 7d 47 	lds	r23, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    5274:	48 17       	cp	r20, r24
    5276:	59 07       	cpc	r21, r25
    5278:	6a 07       	cpc	r22, r26
    527a:	7b 07       	cpc	r23, r27
    527c:	e8 f0       	brcs	.+58     	; 0x52b8 <_Z23clockConfigurationCheckv+0xee>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_start_epoch)       /* Event should be running */
    527e:	40 91 76 47 	lds	r20, 0x4776	; 0x804776 <g_event_start_epoch>
    5282:	50 91 77 47 	lds	r21, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    5286:	60 91 78 47 	lds	r22, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    528a:	70 91 79 47 	lds	r23, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    528e:	48 17       	cp	r20, r24
    5290:	59 07       	cpc	r21, r25
    5292:	6a 07       	cpc	r22, r26
    5294:	7b 07       	cpc	r23, r27
    5296:	30 f4       	brcc	.+12     	; 0x52a4 <_Z23clockConfigurationCheckv+0xda>
	{
		if(!g_event_enabled)
    5298:	80 91 7e 47 	lds	r24, 0x477E	; 0x80477e <g_event_enabled>
    529c:	81 11       	cpse	r24, r1
    529e:	0e c0       	rjmp	.+28     	; 0x52bc <_Z23clockConfigurationCheckv+0xf2>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
    52a0:	83 e0       	ldi	r24, 0x03	; 3
    52a2:	08 95       	ret
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
		}
	}
	else if(!g_use_rtc_for_startstop)
    52a4:	80 91 a0 47 	lds	r24, 0x47A0	; 0x8047a0 <g_use_rtc_for_startstop>
    52a8:	81 11       	cpse	r24, r1
    52aa:	0a c0       	rjmp	.+20     	; 0x52c0 <_Z23clockConfigurationCheckv+0xf6>
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
    52ac:	84 e0       	ldi	r24, 0x04	; 4
    52ae:	08 95       	ret

ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
	{
		return(CONFIGURATION_ERROR);
    52b0:	82 e0       	ldi	r24, 0x02	; 2
    52b2:	08 95       	ret
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
	{
		return(CONFIGURATION_ERROR);
    52b4:	82 e0       	ldi	r24, 0x02	; 2
    52b6:	08 95       	ret
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
	{
		return(CONFIGURATION_ERROR);
    52b8:	82 e0       	ldi	r24, 0x02	; 2
    52ba:	08 95       	ret
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
		}
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
    52bc:	85 e0       	ldi	r24, 0x05	; 5
    52be:	08 95       	ret
	else if(!g_use_rtc_for_startstop)
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
	}

	return(WAITING_FOR_START);  /* Future event hasn't started yet */
    52c0:	81 e0       	ldi	r24, 0x01	; 1
}
    52c2:	08 95       	ret

000052c4 <_Z18reportConfigErrorsv>:

void reportConfigErrors(void)
{
	g_current_epoch = ds3231_get_epoch(null);
    52c4:	80 e0       	ldi	r24, 0x00	; 0
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    52cc:	60 93 9c 47 	sts	0x479C, r22	; 0x80479c <g_current_epoch>
    52d0:	70 93 9d 47 	sts	0x479D, r23	; 0x80479d <g_current_epoch+0x1>
    52d4:	80 93 9e 47 	sts	0x479E, r24	; 0x80479e <g_current_epoch+0x2>
    52d8:	90 93 9f 47 	sts	0x479F, r25	; 0x80479f <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    52dc:	80 91 5d 47 	lds	r24, 0x475D	; 0x80475d <g_messages_text+0x15>
    52e0:	81 11       	cpse	r24, r1
    52e2:	04 c0       	rjmp	.+8      	; 0x52ec <_Z18reportConfigErrorsv+0x28>
	{
		sb_send_string(TEXT_SET_ID_TXT);
    52e4:	88 ec       	ldi	r24, 0xC8	; 200
    52e6:	93 e4       	ldi	r25, 0x43	; 67
    52e8:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    52ec:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    52f0:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    52f4:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    52f8:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    52fc:	81 15       	cp	r24, r1
    52fe:	96 46       	sbci	r25, 0x66	; 102
    5300:	ae 4e       	sbci	r26, 0xEE	; 238
    5302:	bf 45       	sbci	r27, 0x5F	; 95
    5304:	20 f4       	brcc	.+8      	; 0x530e <_Z18reportConfigErrorsv+0x4a>
	{
		sb_send_string(TEXT_SET_TIME_TXT);
    5306:	89 ee       	ldi	r24, 0xE9	; 233
    5308:	93 e4       	ldi	r25, 0x43	; 67
    530a:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    530e:	40 91 7a 47 	lds	r20, 0x477A	; 0x80477a <g_event_finish_epoch>
    5312:	50 91 7b 47 	lds	r21, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    5316:	60 91 7c 47 	lds	r22, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    531a:	70 91 7d 47 	lds	r23, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    531e:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <g_current_epoch>
    5322:	90 91 9d 47 	lds	r25, 0x479D	; 0x80479d <g_current_epoch+0x1>
    5326:	a0 91 9e 47 	lds	r26, 0x479E	; 0x80479e <g_current_epoch+0x2>
    532a:	b0 91 9f 47 	lds	r27, 0x479F	; 0x80479f <g_current_epoch+0x3>
    532e:	48 17       	cp	r20, r24
    5330:	59 07       	cpc	r21, r25
    5332:	6a 07       	cpc	r22, r26
    5334:	7b 07       	cpc	r23, r27
    5336:	b0 f4       	brcc	.+44     	; 0x5364 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    5338:	40 91 76 47 	lds	r20, 0x4776	; 0x804776 <g_event_start_epoch>
    533c:	50 91 77 47 	lds	r21, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    5340:	60 91 78 47 	lds	r22, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    5344:	70 91 79 47 	lds	r23, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    5348:	48 17       	cp	r20, r24
    534a:	59 07       	cpc	r21, r25
    534c:	6a 07       	cpc	r22, r26
    534e:	7b 07       	cpc	r23, r27
    5350:	20 f4       	brcc	.+8      	; 0x535a <_Z18reportConfigErrorsv+0x96>
		{
			sb_send_string(TEXT_SET_START_TXT);
    5352:	81 e1       	ldi	r24, 0x11	; 17
    5354:	94 e4       	ldi	r25, 0x44	; 68
    5356:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
		}

		sb_send_string(TEXT_SET_FINISH_TXT);
    535a:	87 e3       	ldi	r24, 0x37	; 55
    535c:	94 e4       	ldi	r25, 0x44	; 68
    535e:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    5362:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    5364:	40 91 76 47 	lds	r20, 0x4776	; 0x804776 <g_event_start_epoch>
    5368:	50 91 77 47 	lds	r21, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    536c:	60 91 78 47 	lds	r22, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    5370:	70 91 79 47 	lds	r23, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    5374:	48 17       	cp	r20, r24
    5376:	59 07       	cpc	r21, r25
    5378:	6a 07       	cpc	r22, r26
    537a:	7b 07       	cpc	r23, r27
    537c:	b0 f4       	brcc	.+44     	; 0x53aa <_Z18reportConfigErrorsv+0xe6>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    537e:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    5382:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    5386:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    538a:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    538e:	81 15       	cp	r24, r1
    5390:	96 46       	sbci	r25, 0x66	; 102
    5392:	ae 4e       	sbci	r26, 0xEE	; 238
    5394:	bf 45       	sbci	r27, 0x5F	; 95
    5396:	28 f4       	brcc	.+10     	; 0x53a2 <_Z18reportConfigErrorsv+0xde>
		{
			sb_send_string(TEXT_SET_START_TXT);
    5398:	81 e1       	ldi	r24, 0x11	; 17
    539a:	94 e4       	ldi	r25, 0x44	; 68
    539c:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    53a0:	08 95       	ret
		}
		else
		{
			sb_send_string((char*)"Event running...\n");
    53a2:	8e e5       	ldi	r24, 0x5E	; 94
    53a4:	94 e4       	ldi	r25, 0x44	; 68
    53a6:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <sb_send_string>
    53aa:	08 95       	ret

000053ac <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
    53ac:	0f 93       	push	r16
    53ae:	1f 93       	push	r17
    53b0:	cf 93       	push	r28
    53b2:	df 93       	push	r29
    53b4:	ec 01       	movw	r28, r24
    53b6:	8b 01       	movw	r16, r22
    53b8:	01 97       	sbiw	r24, 0x01	; 1
    53ba:	39 f4       	brne	.+14     	; 0x53ca <_Z41__static_initialization_and_destruction_0ii+0x1e>
    53bc:	6f 3f       	cpi	r22, 0xFF	; 255
    53be:	7f 4f       	sbci	r23, 0xFF	; 255
    53c0:	21 f4       	brne	.+8      	; 0x53ca <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile bool g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { false, false, false, false, false };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    53c2:	82 e9       	ldi	r24, 0x92	; 146
    53c4:	97 e4       	ldi	r25, 0x47	; 71
    53c6:	0e 94 1c 32 	call	0x6438	; 0x6438 <_ZN13EepromManagerC1Ev>
    53ca:	cd 2b       	or	r28, r29
    53cc:	39 f4       	brne	.+14     	; 0x53dc <_Z41__static_initialization_and_destruction_0ii+0x30>
    53ce:	0f 3f       	cpi	r16, 0xFF	; 255
    53d0:	1f 4f       	sbci	r17, 0xFF	; 255
    53d2:	21 f4       	brne	.+8      	; 0x53dc <_Z41__static_initialization_and_destruction_0ii+0x30>
    53d4:	82 e9       	ldi	r24, 0x92	; 146
    53d6:	97 e4       	ldi	r25, 0x47	; 71
    53d8:	0e 94 1d 32 	call	0x643a	; 0x643a <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    53dc:	df 91       	pop	r29
    53de:	cf 91       	pop	r28
    53e0:	1f 91       	pop	r17
    53e2:	0f 91       	pop	r16
    53e4:	08 95       	ret

000053e6 <_GLOBAL__sub_I_g_battery_type>:
    53e6:	6f ef       	ldi	r22, 0xFF	; 255
    53e8:	7f ef       	ldi	r23, 0xFF	; 255
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	0e 94 d6 29 	call	0x53ac	; 0x53ac <_Z41__static_initialization_and_destruction_0ii>
    53f2:	08 95       	ret

000053f4 <_GLOBAL__sub_D_g_battery_type>:
    53f4:	6f ef       	ldi	r22, 0xFF	; 255
    53f6:	7f ef       	ldi	r23, 0xFF	; 255
    53f8:	80 e0       	ldi	r24, 0x00	; 0
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	0e 94 d6 29 	call	0x53ac	; 0x53ac <_Z41__static_initialization_and_destruction_0ii>
    5400:	08 95       	ret

00005402 <_ZL9PORT_initv>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    5402:	e0 e6       	ldi	r30, 0x60	; 96
    5404:	f4 e0       	ldi	r31, 0x04	; 4
    5406:	82 89       	ldd	r24, Z+18	; 0x12
    5408:	88 7f       	andi	r24, 0xF8	; 248
    540a:	82 8b       	std	Z+18, r24	; 0x12
    540c:	82 89       	ldd	r24, Z+18	; 0x12
    540e:	84 60       	ori	r24, 0x04	; 4
    5410:	82 8b       	std	Z+18, r24	; 0x12
    5412:	83 89       	ldd	r24, Z+19	; 0x13
    5414:	88 7f       	andi	r24, 0xF8	; 248
    5416:	83 8b       	std	Z+19, r24	; 0x13
    5418:	83 89       	ldd	r24, Z+19	; 0x13
    541a:	84 60       	ori	r24, 0x04	; 4
    541c:	83 8b       	std	Z+19, r24	; 0x13
    541e:	84 89       	ldd	r24, Z+20	; 0x14
    5420:	88 7f       	andi	r24, 0xF8	; 248
    5422:	84 8b       	std	Z+20, r24	; 0x14
    5424:	84 89       	ldd	r24, Z+20	; 0x14
    5426:	84 60       	ori	r24, 0x04	; 4
    5428:	84 8b       	std	Z+20, r24	; 0x14
    542a:	85 89       	ldd	r24, Z+21	; 0x15
    542c:	88 7f       	andi	r24, 0xF8	; 248
    542e:	85 8b       	std	Z+21, r24	; 0x15
    5430:	85 89       	ldd	r24, Z+21	; 0x15
    5432:	84 60       	ori	r24, 0x04	; 4
    5434:	85 8b       	std	Z+21, r24	; 0x15
    5436:	82 89       	ldd	r24, Z+18	; 0x12
    5438:	87 7f       	andi	r24, 0xF7	; 247
    543a:	82 8b       	std	Z+18, r24	; 0x12
    543c:	83 89       	ldd	r24, Z+19	; 0x13
    543e:	87 7f       	andi	r24, 0xF7	; 247
    5440:	83 8b       	std	Z+19, r24	; 0x13
    5442:	84 89       	ldd	r24, Z+20	; 0x14
    5444:	87 7f       	andi	r24, 0xF7	; 247
    5446:	84 8b       	std	Z+20, r24	; 0x14
    5448:	85 89       	ldd	r24, Z+21	; 0x15
    544a:	87 7f       	andi	r24, 0xF7	; 247
    544c:	85 8b       	std	Z+21, r24	; 0x15
    544e:	08 95       	ret

00005450 <_ZL10VREF0_initv>:
    5450:	81 e0       	ldi	r24, 0x01	; 1
    5452:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    5456:	08 95       	ret

00005458 <_ZL9ADC0_initb>:
    5458:	9a e0       	ldi	r25, 0x0A	; 10
    545a:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
    545e:	88 23       	and	r24, r24
    5460:	41 f0       	breq	.+16     	; 0x5472 <_ZL9ADC0_initb+0x1a>
    5462:	e0 e0       	ldi	r30, 0x00	; 0
    5464:	f6 e0       	ldi	r31, 0x06	; 6
    5466:	83 e0       	ldi	r24, 0x03	; 3
    5468:	80 83       	st	Z, r24
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	84 87       	std	Z+12, r24	; 0x0c
    546e:	82 87       	std	Z+10, r24	; 0x0a
    5470:	08 95       	ret
    5472:	e0 e0       	ldi	r30, 0x00	; 0
    5474:	f6 e0       	ldi	r31, 0x06	; 6
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	80 83       	st	Z, r24
    547a:	14 86       	std	Z+12, r1	; 0x0c
    547c:	08 95       	ret

0000547e <_ZL16ADC0_SYSTEM_initb>:
    547e:	cf 93       	push	r28
    5480:	c8 2f       	mov	r28, r24
    5482:	0e 94 01 2a 	call	0x5402	; 0x5402 <_ZL9PORT_initv>
    5486:	0e 94 28 2a 	call	0x5450	; 0x5450 <_ZL10VREF0_initv>
    548a:	8c 2f       	mov	r24, r28
    548c:	0e 94 2c 2a 	call	0x5458	; 0x5458 <_ZL9ADC0_initb>
    5490:	81 e0       	ldi	r24, 0x01	; 1
    5492:	80 93 b6 47 	sts	0x47B6, r24	; 0x8047b6 <_ZL17g_adc_initialized>
    5496:	cf 91       	pop	r28
    5498:	08 95       	ret

0000549a <_ZL20ADC0_SYSTEM_shutdownv>:
    549a:	e0 e0       	ldi	r30, 0x00	; 0
    549c:	f6 e0       	ldi	r31, 0x06	; 6
    549e:	14 86       	std	Z+12, r1	; 0x0c
    54a0:	10 82       	st	Z, r1
    54a2:	10 92 b6 47 	sts	0x47B6, r1	; 0x8047b6 <_ZL17g_adc_initialized>
    54a6:	08 95       	ret

000054a8 <_Z41__static_initialization_and_destruction_0ii>:
    54a8:	ef 92       	push	r14
    54aa:	ff 92       	push	r15
    54ac:	0f 93       	push	r16
    54ae:	1f 93       	push	r17
    54b0:	cf 93       	push	r28
    54b2:	df 93       	push	r29
    54b4:	ec 01       	movw	r28, r24
    54b6:	7b 01       	movw	r14, r22
    54b8:	01 97       	sbiw	r24, 0x01	; 1
    54ba:	79 f4       	brne	.+30     	; 0x54da <_Z41__static_initialization_and_destruction_0ii+0x32>
    54bc:	6f 3f       	cpi	r22, 0xFF	; 255
    54be:	7f 4f       	sbci	r23, 0xFF	; 255
    54c0:	61 f4       	brne	.+24     	; 0x54da <_Z41__static_initialization_and_destruction_0ii+0x32>
    54c2:	00 e0       	ldi	r16, 0x00	; 0
    54c4:	10 e4       	ldi	r17, 0x40	; 64
    54c6:	2c eb       	ldi	r18, 0xBC	; 188
    54c8:	36 e4       	ldi	r19, 0x46	; 70
    54ca:	40 e0       	ldi	r20, 0x00	; 0
    54cc:	50 e0       	ldi	r21, 0x00	; 0
    54ce:	69 e4       	ldi	r22, 0x49	; 73
    54d0:	73 e4       	ldi	r23, 0x43	; 67
    54d2:	85 eb       	ldi	r24, 0xB5	; 181
    54d4:	97 e4       	ldi	r25, 0x47	; 71
    54d6:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <_ZN8GoertzelC1Eff>
    54da:	cd 2b       	or	r28, r29
    54dc:	39 f4       	brne	.+14     	; 0x54ec <_Z41__static_initialization_and_destruction_0ii+0x44>
    54de:	ef 20       	and	r14, r15
    54e0:	e0 94       	com	r14
    54e2:	21 f4       	brne	.+8      	; 0x54ec <_Z41__static_initialization_and_destruction_0ii+0x44>
    54e4:	85 eb       	ldi	r24, 0xB5	; 181
    54e6:	97 e4       	ldi	r25, 0x47	; 71
    54e8:	0e 94 b9 35 	call	0x6b72	; 0x6b72 <_ZN8GoertzelD1Ev>
    54ec:	df 91       	pop	r29
    54ee:	cf 91       	pop	r28
    54f0:	1f 91       	pop	r17
    54f2:	0f 91       	pop	r16
    54f4:	ff 90       	pop	r15
    54f6:	ef 90       	pop	r14
    54f8:	08 95       	ret

000054fa <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
    54fa:	83 30       	cpi	r24, 0x03	; 3
    54fc:	c9 f0       	breq	.+50     	; 0x5530 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
    54fe:	28 f4       	brcc	.+10     	; 0x550a <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x10>
    5500:	81 30       	cpi	r24, 0x01	; 1
    5502:	41 f0       	breq	.+16     	; 0x5514 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x1a>
    5504:	82 30       	cpi	r24, 0x02	; 2
    5506:	69 f0       	breq	.+26     	; 0x5522 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x28>
    5508:	28 c0       	rjmp	.+80     	; 0x555a <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    550a:	84 30       	cpi	r24, 0x04	; 4
    550c:	c1 f0       	breq	.+48     	; 0x553e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x44>
    550e:	85 30       	cpi	r24, 0x05	; 5
    5510:	e9 f0       	breq	.+58     	; 0x554c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x52>
    5512:	23 c0       	rjmp	.+70     	; 0x555a <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    5514:	81 e0       	ldi	r24, 0x01	; 1
    5516:	0e 94 3f 2a 	call	0x547e	; 0x547e <_ZL16ADC0_SYSTEM_initb>
    551a:	82 e0       	ldi	r24, 0x02	; 2
    551c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5520:	08 95       	ret
    5522:	80 e0       	ldi	r24, 0x00	; 0
    5524:	0e 94 3f 2a 	call	0x547e	; 0x547e <_ZL16ADC0_SYSTEM_initb>
    5528:	83 e0       	ldi	r24, 0x03	; 3
    552a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    552e:	08 95       	ret
    5530:	80 e0       	ldi	r24, 0x00	; 0
    5532:	0e 94 3f 2a 	call	0x547e	; 0x547e <_ZL16ADC0_SYSTEM_initb>
    5536:	84 e0       	ldi	r24, 0x04	; 4
    5538:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    553c:	08 95       	ret
    553e:	80 e0       	ldi	r24, 0x00	; 0
    5540:	0e 94 3f 2a 	call	0x547e	; 0x547e <_ZL16ADC0_SYSTEM_initb>
    5544:	85 e0       	ldi	r24, 0x05	; 5
    5546:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    554a:	08 95       	ret
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	0e 94 3f 2a 	call	0x547e	; 0x547e <_ZL16ADC0_SYSTEM_initb>
    5552:	82 e4       	ldi	r24, 0x42	; 66
    5554:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5558:	08 95       	ret
    555a:	0e 94 4d 2a 	call	0x549a	; 0x549a <_ZL20ADC0_SYSTEM_shutdownv>
    555e:	08 95       	ret

00005560 <_Z9ADC0_readv>:
    5560:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    5564:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    5568:	08 95       	ret

0000556a <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    556a:	1f 92       	push	r1
    556c:	0f 92       	push	r0
    556e:	0f b6       	in	r0, 0x3f	; 63
    5570:	0f 92       	push	r0
    5572:	11 24       	eor	r1, r1
    5574:	0b b6       	in	r0, 0x3b	; 59
    5576:	0f 92       	push	r0
    5578:	2f 93       	push	r18
    557a:	3f 93       	push	r19
    557c:	4f 93       	push	r20
    557e:	5f 93       	push	r21
    5580:	6f 93       	push	r22
    5582:	7f 93       	push	r23
    5584:	8f 93       	push	r24
    5586:	9f 93       	push	r25
    5588:	af 93       	push	r26
    558a:	bf 93       	push	r27
    558c:	ef 93       	push	r30
    558e:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    5590:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    5594:	bc 01       	movw	r22, r24
    5596:	85 eb       	ldi	r24, 0xB5	; 181
    5598:	97 e4       	ldi	r25, 0x47	; 71
    559a:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <_ZN8Goertzel9DataPointEi>
    559e:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    55a0:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    55a4:	ff 91       	pop	r31
    55a6:	ef 91       	pop	r30
    55a8:	bf 91       	pop	r27
    55aa:	af 91       	pop	r26
    55ac:	9f 91       	pop	r25
    55ae:	8f 91       	pop	r24
    55b0:	7f 91       	pop	r23
    55b2:	6f 91       	pop	r22
    55b4:	5f 91       	pop	r21
    55b6:	4f 91       	pop	r20
    55b8:	3f 91       	pop	r19
    55ba:	2f 91       	pop	r18
    55bc:	0f 90       	pop	r0
    55be:	0b be       	out	0x3b, r0	; 59
    55c0:	0f 90       	pop	r0
    55c2:	0f be       	out	0x3f, r0	; 63
    55c4:	0f 90       	pop	r0
    55c6:	1f 90       	pop	r1
    55c8:	18 95       	reti

000055ca <_GLOBAL__sub_I_g_activeADCChannel>:
    55ca:	6f ef       	ldi	r22, 0xFF	; 255
    55cc:	7f ef       	ldi	r23, 0xFF	; 255
    55ce:	81 e0       	ldi	r24, 0x01	; 1
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <_Z41__static_initialization_and_destruction_0ii>
    55d6:	08 95       	ret

000055d8 <_GLOBAL__sub_D_g_activeADCChannel>:
    55d8:	6f ef       	ldi	r22, 0xFF	; 255
    55da:	7f ef       	ldi	r23, 0xFF	; 255
    55dc:	80 e0       	ldi	r24, 0x00	; 0
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <_Z41__static_initialization_and_destruction_0ii>
    55e4:	08 95       	ret

000055e6 <_Z10fet_driverb>:
{
} //~binio

void fet_driver(bool state)
{
	if(state == ON)
    55e6:	88 23       	and	r24, r24
    55e8:	21 f0       	breq	.+8      	; 0x55f2 <_Z10fet_driverb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    55ea:	81 b1       	in	r24, 0x01	; 1
    55ec:	88 60       	ori	r24, 0x08	; 8
    55ee:	81 b9       	out	0x01, r24	; 1
    55f0:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    55f2:	81 b1       	in	r24, 0x01	; 1
    55f4:	87 7f       	andi	r24, 0xF7	; 247
    55f6:	81 b9       	out	0x01, r24	; 1
    55f8:	08 95       	ret

000055fa <_Z10wifi_powerb>:
}


void wifi_power(bool state)
{
	if(state == ON)
    55fa:	88 23       	and	r24, r24
    55fc:	21 f0       	breq	.+8      	; 0x5606 <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    55fe:	81 b1       	in	r24, 0x01	; 1
    5600:	80 62       	ori	r24, 0x20	; 32
    5602:	81 b9       	out	0x01, r24	; 1
    5604:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5606:	81 b1       	in	r24, 0x01	; 1
    5608:	8f 7d       	andi	r24, 0xDF	; 223
    560a:	81 b9       	out	0x01, r24	; 1
    560c:	08 95       	ret

0000560e <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    560e:	88 23       	and	r24, r24
    5610:	21 f0       	breq	.+8      	; 0x561a <_Z10wifi_resetb+0xc>
    5612:	81 b1       	in	r24, 0x01	; 1
    5614:	8f 7b       	andi	r24, 0xBF	; 191
    5616:	81 b9       	out	0x01, r24	; 1
    5618:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    561a:	81 b1       	in	r24, 0x01	; 1
    561c:	80 64       	ori	r24, 0x40	; 64
    561e:	81 b9       	out	0x01, r24	; 1
    5620:	08 95       	ret

00005622 <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    5622:	2e b1       	in	r18, 0x0e	; 14
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	22 0f       	add	r18, r18
    5628:	23 2f       	mov	r18, r19
    562a:	22 1f       	adc	r18, r18
    562c:	33 0b       	sbc	r19, r19
    562e:	31 95       	neg	r19
	}
}

bool wifiPresent(void)
{
	return(!PORTD_get_pin_level(WIFI_MODULE_DETECT));
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	23 2b       	or	r18, r19
    5634:	09 f0       	breq	.+2      	; 0x5638 <_Z11wifiPresentv+0x16>
    5636:	80 e0       	ldi	r24, 0x00	; 0
}
    5638:	08 95       	ret

0000563a <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    563a:	1f 92       	push	r1
    563c:	0f 92       	push	r0
    563e:	0f b6       	in	r0, 0x3f	; 63
    5640:	0f 92       	push	r0
    5642:	11 24       	eor	r1, r1
    5644:	8f 93       	push	r24
    5646:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    5648:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    564c:	88 23       	and	r24, r24
    564e:	4c f4       	brge	.+18     	; 0x5662 <__vector_29+0x28>
	{
		count++;
    5650:	80 91 b9 47 	lds	r24, 0x47B9	; 0x8047b9 <_ZZ11__vector_29E5count>
    5654:	90 91 ba 47 	lds	r25, 0x47BA	; 0x8047ba <_ZZ11__vector_29E5count+0x1>
    5658:	01 96       	adiw	r24, 0x01	; 1
    565a:	80 93 b9 47 	sts	0x47B9, r24	; 0x8047b9 <_ZZ11__vector_29E5count>
    565e:	90 93 ba 47 	sts	0x47BA, r25	; 0x8047ba <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    5662:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    5666:	84 ff       	sbrs	r24, 4
    5668:	09 c0       	rjmp	.+18     	; 0x567c <__vector_29+0x42>
	{
		count++;
    566a:	80 91 b9 47 	lds	r24, 0x47B9	; 0x8047b9 <_ZZ11__vector_29E5count>
    566e:	90 91 ba 47 	lds	r25, 0x47BA	; 0x8047ba <_ZZ11__vector_29E5count+0x1>
    5672:	01 96       	adiw	r24, 0x01	; 1
    5674:	80 93 b9 47 	sts	0x47B9, r24	; 0x8047b9 <_ZZ11__vector_29E5count>
    5678:	90 93 ba 47 	sts	0x47BA, r25	; 0x8047ba <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    567c:	8f ef       	ldi	r24, 0xFF	; 255
    567e:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    5682:	9f 91       	pop	r25
    5684:	8f 91       	pop	r24
    5686:	0f 90       	pop	r0
    5688:	0f be       	out	0x3f, r0	; 63
    568a:	0f 90       	pop	r0
    568c:	1f 90       	pop	r1
    568e:	18 95       	reti

00005690 <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    5690:	1f 92       	push	r1
    5692:	0f 92       	push	r0
    5694:	0f b6       	in	r0, 0x3f	; 63
    5696:	0f 92       	push	r0
    5698:	11 24       	eor	r1, r1
    569a:	8f 93       	push	r24
    569c:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    569e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    56a2:	82 ff       	sbrs	r24, 2
    56a4:	09 c0       	rjmp	.+18     	; 0x56b8 <__vector_6+0x28>
	{
		count++;
    56a6:	80 91 b7 47 	lds	r24, 0x47B7	; 0x8047b7 <_ZZ10__vector_6E5count>
    56aa:	90 91 b8 47 	lds	r25, 0x47B8	; 0x8047b8 <_ZZ10__vector_6E5count+0x1>
    56ae:	01 96       	adiw	r24, 0x01	; 1
    56b0:	80 93 b7 47 	sts	0x47B7, r24	; 0x8047b7 <_ZZ10__vector_6E5count>
    56b4:	90 93 b8 47 	sts	0x47B8, r25	; 0x8047b8 <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    56b8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    56bc:	84 ff       	sbrs	r24, 4
    56be:	09 c0       	rjmp	.+18     	; 0x56d2 <__vector_6+0x42>
	{
		count++;
    56c0:	80 91 b7 47 	lds	r24, 0x47B7	; 0x8047b7 <_ZZ10__vector_6E5count>
    56c4:	90 91 b8 47 	lds	r25, 0x47B8	; 0x8047b8 <_ZZ10__vector_6E5count+0x1>
    56c8:	01 96       	adiw	r24, 0x01	; 1
    56ca:	80 93 b7 47 	sts	0x47B7, r24	; 0x8047b7 <_ZZ10__vector_6E5count>
    56ce:	90 93 b8 47 	sts	0x47B8, r25	; 0x8047b8 <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    56d2:	8f ef       	ldi	r24, 0xFF	; 255
    56d4:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    56d8:	9f 91       	pop	r25
    56da:	8f 91       	pop	r24
    56dc:	0f 90       	pop	r0
    56de:	0f be       	out	0x3f, r0	; 63
    56e0:	0f 90       	pop	r0
    56e2:	1f 90       	pop	r1
    56e4:	18 95       	reti

000056e6 <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    56e6:	80 b1       	in	r24, 0x00	; 0
    56e8:	8b 7f       	andi	r24, 0xFB	; 251
    56ea:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    56ec:	e2 e1       	ldi	r30, 0x12	; 18
    56ee:	f4 e0       	ldi	r31, 0x04	; 4
    56f0:	80 81       	ld	r24, Z
    56f2:	88 7f       	andi	r24, 0xF8	; 248
    56f4:	82 60       	ori	r24, 0x02	; 2
    56f6:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    56f8:	80 b1       	in	r24, 0x00	; 0
    56fa:	88 60       	ori	r24, 0x08	; 8
    56fc:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    56fe:	81 b1       	in	r24, 0x01	; 1
    5700:	87 7f       	andi	r24, 0xF7	; 247
    5702:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    5704:	80 b1       	in	r24, 0x00	; 0
    5706:	8f 7e       	andi	r24, 0xEF	; 239
    5708:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    570a:	e4 e1       	ldi	r30, 0x14	; 20
    570c:	f4 e0       	ldi	r31, 0x04	; 4
    570e:	80 81       	ld	r24, Z
    5710:	88 60       	ori	r24, 0x08	; 8
    5712:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5714:	80 81       	ld	r24, Z
    5716:	88 7f       	andi	r24, 0xF8	; 248
    5718:	83 60       	ori	r24, 0x03	; 3
    571a:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    571c:	80 b1       	in	r24, 0x00	; 0
    571e:	80 62       	ori	r24, 0x20	; 32
    5720:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5722:	81 b1       	in	r24, 0x01	; 1
    5724:	8f 7d       	andi	r24, 0xDF	; 223
    5726:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5728:	80 b1       	in	r24, 0x00	; 0
    572a:	80 64       	ori	r24, 0x40	; 64
    572c:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    572e:	81 b1       	in	r24, 0x01	; 1
    5730:	8f 7b       	andi	r24, 0xBF	; 191
    5732:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5734:	80 b1       	in	r24, 0x00	; 0
    5736:	80 68       	ori	r24, 0x80	; 128
    5738:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    573a:	81 b1       	in	r24, 0x01	; 1
    573c:	8f 77       	andi	r24, 0x7F	; 127
    573e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5740:	84 b1       	in	r24, 0x04	; 4
    5742:	81 60       	ori	r24, 0x01	; 1
    5744:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5746:	85 b1       	in	r24, 0x05	; 5
    5748:	8e 7f       	andi	r24, 0xFE	; 254
    574a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    574c:	84 b1       	in	r24, 0x04	; 4
    574e:	82 60       	ori	r24, 0x02	; 2
    5750:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5752:	85 b1       	in	r24, 0x05	; 5
    5754:	8d 7f       	andi	r24, 0xFD	; 253
    5756:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5758:	84 b1       	in	r24, 0x04	; 4
    575a:	80 61       	ori	r24, 0x10	; 16
    575c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    575e:	85 b1       	in	r24, 0x05	; 5
    5760:	8f 7e       	andi	r24, 0xEF	; 239
    5762:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5764:	84 b1       	in	r24, 0x04	; 4
    5766:	80 62       	ori	r24, 0x20	; 32
    5768:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    576a:	85 b1       	in	r24, 0x05	; 5
    576c:	8f 7d       	andi	r24, 0xDF	; 223
    576e:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    5770:	88 b1       	in	r24, 0x08	; 8
    5772:	8f 7e       	andi	r24, 0xEF	; 239
    5774:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5776:	88 b1       	in	r24, 0x08	; 8
    5778:	80 62       	ori	r24, 0x20	; 32
    577a:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    577c:	89 b1       	in	r24, 0x09	; 9
    577e:	8f 7d       	andi	r24, 0xDF	; 223
    5780:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5782:	88 b1       	in	r24, 0x08	; 8
    5784:	80 64       	ori	r24, 0x40	; 64
    5786:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5788:	89 b1       	in	r24, 0x09	; 9
    578a:	8f 7b       	andi	r24, 0xBF	; 191
    578c:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    578e:	88 b1       	in	r24, 0x08	; 8
    5790:	8f 77       	andi	r24, 0x7F	; 127
    5792:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5794:	e7 e5       	ldi	r30, 0x57	; 87
    5796:	f4 e0       	ldi	r31, 0x04	; 4
    5798:	80 81       	ld	r24, Z
    579a:	88 60       	ori	r24, 0x08	; 8
    579c:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    579e:	80 81       	ld	r24, Z
    57a0:	88 7f       	andi	r24, 0xF8	; 248
    57a2:	83 60       	ori	r24, 0x03	; 3
    57a4:	80 83       	st	Z, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    57a6:	8c b1       	in	r24, 0x0c	; 12
    57a8:	8e 7f       	andi	r24, 0xFE	; 254
    57aa:	8c b9       	out	0x0c, r24	; 12
    57ac:	8c b1       	in	r24, 0x0c	; 12
    57ae:	8d 7f       	andi	r24, 0xFD	; 253
    57b0:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    57b2:	a1 e7       	ldi	r26, 0x71	; 113
    57b4:	b4 e0       	ldi	r27, 0x04	; 4
    57b6:	8c 91       	ld	r24, X
    57b8:	88 60       	ori	r24, 0x08	; 8
    57ba:	8c 93       	st	X, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    57bc:	8c 91       	ld	r24, X
    57be:	88 7f       	andi	r24, 0xF8	; 248
    57c0:	83 60       	ori	r24, 0x03	; 3
    57c2:	8c 93       	st	X, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    57c4:	8c b1       	in	r24, 0x0c	; 12
    57c6:	8f 77       	andi	r24, 0x7F	; 127
    57c8:	8c b9       	out	0x0c, r24	; 12
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    57ca:	80 81       	ld	r24, Z
    57cc:	87 7f       	andi	r24, 0xF7	; 247
    57ce:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    57d0:	e0 e9       	ldi	r30, 0x90	; 144
    57d2:	f4 e0       	ldi	r31, 0x04	; 4
    57d4:	80 81       	ld	r24, Z
    57d6:	88 60       	ori	r24, 0x08	; 8
    57d8:	80 83       	st	Z, r24
    57da:	e1 e9       	ldi	r30, 0x91	; 145
    57dc:	f4 e0       	ldi	r31, 0x04	; 4
    57de:	80 81       	ld	r24, Z
    57e0:	88 60       	ori	r24, 0x08	; 8
    57e2:	80 83       	st	Z, r24
    57e4:	e2 e9       	ldi	r30, 0x92	; 146
    57e6:	f4 e0       	ldi	r31, 0x04	; 4
    57e8:	80 81       	ld	r24, Z
    57ea:	88 60       	ori	r24, 0x08	; 8
    57ec:	80 83       	st	Z, r24
    57ee:	e3 e9       	ldi	r30, 0x93	; 147
    57f0:	f4 e0       	ldi	r31, 0x04	; 4
    57f2:	80 81       	ld	r24, Z
    57f4:	88 60       	ori	r24, 0x08	; 8
    57f6:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    57f8:	e2 eb       	ldi	r30, 0xB2	; 178
    57fa:	f4 e0       	ldi	r31, 0x04	; 4
    57fc:	80 81       	ld	r24, Z
    57fe:	88 60       	ori	r24, 0x08	; 8
    5800:	80 83       	st	Z, r24
    5802:	e3 eb       	ldi	r30, 0xB3	; 179
    5804:	f4 e0       	ldi	r31, 0x04	; 4
    5806:	80 81       	ld	r24, Z
    5808:	88 60       	ori	r24, 0x08	; 8
    580a:	80 83       	st	Z, r24
    580c:	e4 eb       	ldi	r30, 0xB4	; 180
    580e:	f4 e0       	ldi	r31, 0x04	; 4
    5810:	80 81       	ld	r24, Z
    5812:	88 60       	ori	r24, 0x08	; 8
    5814:	80 83       	st	Z, r24
    5816:	e5 eb       	ldi	r30, 0xB5	; 181
    5818:	f4 e0       	ldi	r31, 0x04	; 4
    581a:	80 81       	ld	r24, Z
    581c:	88 60       	ori	r24, 0x08	; 8
    581e:	80 83       	st	Z, r24
    5820:	08 95       	ret

00005822 <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    5822:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    5826:	80 e0       	ldi	r24, 0x00	; 0
    5828:	08 95       	ret

0000582a <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    582a:	44 e2       	ldi	r20, 0x24	; 36
    582c:	68 ed       	ldi	r22, 0xD8	; 216
    582e:	88 e6       	ldi	r24, 0x68	; 104
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	0e 94 4c 3c 	call	0x7898	; 0x7898 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    5836:	80 e0       	ldi	r24, 0x00	; 0
    5838:	08 95       	ret

0000583a <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    583a:	78 94       	sei

	return 0;
}
    583c:	80 e0       	ldi	r24, 0x00	; 0
    583e:	08 95       	ret

00005840 <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    5840:	83 e0       	ldi	r24, 0x03	; 3
    5842:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
    5846:	6a e0       	ldi	r22, 0x0A	; 10
    5848:	70 e0       	ldi	r23, 0x00	; 0
    584a:	80 e0       	ldi	r24, 0x00	; 0
    584c:	90 e0       	ldi	r25, 0x00	; 0
    584e:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <util_delay_ms>
    5852:	81 11       	cpse	r24, r1
    5854:	f8 cf       	rjmp	.-16     	; 0x5846 <_ZL9VREF_initv+0x6>
}
    5856:	08 95       	ret

00005858 <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    5858:	28 2f       	mov	r18, r24
    585a:	22 95       	swap	r18
    585c:	22 0f       	add	r18, r18
    585e:	22 0f       	add	r18, r18
    5860:	20 7c       	andi	r18, 0xC0	; 192
    5862:	e0 ea       	ldi	r30, 0xA0	; 160
    5864:	f6 e0       	ldi	r31, 0x06	; 6
    5866:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    5868:	96 95       	lsr	r25
    586a:	87 95       	ror	r24
    586c:	96 95       	lsr	r25
    586e:	87 95       	ror	r24
    5870:	83 83       	std	Z+3, r24	; 0x03
    5872:	08 95       	ret

00005874 <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    5874:	0e 94 20 2c 	call	0x5840	; 0x5840 <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    5878:	e0 e6       	ldi	r30, 0x60	; 96
    587a:	f4 e0       	ldi	r31, 0x04	; 4
    587c:	86 89       	ldd	r24, Z+22	; 0x16
    587e:	88 7f       	andi	r24, 0xF8	; 248
    5880:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5882:	86 89       	ldd	r24, Z+22	; 0x16
    5884:	84 60       	ori	r24, 0x04	; 4
    5886:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    5888:	86 89       	ldd	r24, Z+22	; 0x16
    588a:	87 7f       	andi	r24, 0xF7	; 247
    588c:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    588e:	81 ec       	ldi	r24, 0xC1	; 193
    5890:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_Z11DAC0_setValj>
    589c:	08 95       	ret

0000589e <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    589e:	80 e0       	ldi	r24, 0x00	; 0
    58a0:	88 30       	cpi	r24, 0x08	; 8
    58a2:	48 f4       	brcc	.+18     	; 0x58b6 <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    58a4:	e8 2f       	mov	r30, r24
    58a6:	f0 e0       	ldi	r31, 0x00	; 0
    58a8:	e0 5f       	subi	r30, 0xF0	; 240
    58aa:	fb 4f       	sbci	r31, 0xFB	; 251
    58ac:	90 81       	ld	r25, Z
    58ae:	98 60       	ori	r25, 0x08	; 8
    58b0:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    58b2:	8f 5f       	subi	r24, 0xFF	; 255
    58b4:	f5 cf       	rjmp	.-22     	; 0x58a0 <mcu_init+0x2>
    58b6:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    58b8:	88 30       	cpi	r24, 0x08	; 8
    58ba:	48 f4       	brcc	.+18     	; 0x58ce <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    58bc:	e8 2f       	mov	r30, r24
    58be:	f0 e0       	ldi	r31, 0x00	; 0
    58c0:	e0 5d       	subi	r30, 0xD0	; 208
    58c2:	fb 4f       	sbci	r31, 0xFB	; 251
    58c4:	90 81       	ld	r25, Z
    58c6:	98 60       	ori	r25, 0x08	; 8
    58c8:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    58ca:	8f 5f       	subi	r24, 0xFF	; 255
    58cc:	f5 cf       	rjmp	.-22     	; 0x58b8 <mcu_init+0x1a>
    58ce:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    58d0:	88 30       	cpi	r24, 0x08	; 8
    58d2:	48 f4       	brcc	.+18     	; 0x58e6 <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    58d4:	e8 2f       	mov	r30, r24
    58d6:	f0 e0       	ldi	r31, 0x00	; 0
    58d8:	e0 5b       	subi	r30, 0xB0	; 176
    58da:	fb 4f       	sbci	r31, 0xFB	; 251
    58dc:	90 81       	ld	r25, Z
    58de:	98 60       	ori	r25, 0x08	; 8
    58e0:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    58e2:	8f 5f       	subi	r24, 0xFF	; 255
    58e4:	f5 cf       	rjmp	.-22     	; 0x58d0 <mcu_init+0x32>
    58e6:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    58e8:	88 30       	cpi	r24, 0x08	; 8
    58ea:	48 f4       	brcc	.+18     	; 0x58fe <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    58ec:	e8 2f       	mov	r30, r24
    58ee:	f0 e0       	ldi	r31, 0x00	; 0
    58f0:	e0 59       	subi	r30, 0x90	; 144
    58f2:	fb 4f       	sbci	r31, 0xFB	; 251
    58f4:	90 81       	ld	r25, Z
    58f6:	98 60       	ori	r25, 0x08	; 8
    58f8:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    58fa:	8f 5f       	subi	r24, 0xFF	; 255
    58fc:	f5 cf       	rjmp	.-22     	; 0x58e8 <mcu_init+0x4a>
    58fe:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5900:	88 30       	cpi	r24, 0x08	; 8
    5902:	48 f4       	brcc	.+18     	; 0x5916 <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5904:	e8 2f       	mov	r30, r24
    5906:	f0 e0       	ldi	r31, 0x00	; 0
    5908:	e0 57       	subi	r30, 0x70	; 112
    590a:	fb 4f       	sbci	r31, 0xFB	; 251
    590c:	90 81       	ld	r25, Z
    590e:	98 60       	ori	r25, 0x08	; 8
    5910:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5912:	8f 5f       	subi	r24, 0xFF	; 255
    5914:	f5 cf       	rjmp	.-22     	; 0x5900 <mcu_init+0x62>
    5916:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5918:	88 30       	cpi	r24, 0x08	; 8
    591a:	48 f4       	brcc	.+18     	; 0x592e <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    591c:	e8 2f       	mov	r30, r24
    591e:	f0 e0       	ldi	r31, 0x00	; 0
    5920:	e0 55       	subi	r30, 0x50	; 80
    5922:	fb 4f       	sbci	r31, 0xFB	; 251
    5924:	90 81       	ld	r25, Z
    5926:	98 60       	ori	r25, 0x08	; 8
    5928:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    592a:	8f 5f       	subi	r24, 0xFF	; 255
    592c:	f5 cf       	rjmp	.-22     	; 0x5918 <mcu_init+0x7a>
    592e:	08 95       	ret

00005930 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    5930:	0e 94 4f 2c 	call	0x589e	; 0x589e <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    5934:	0e 94 15 2c 	call	0x582a	; 0x582a <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
    5938:	0e 94 7f 45 	call	0x8afe	; 0x8afe <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    593c:	0e 94 1d 2c 	call	0x583a	; 0x583a <CPUINT_init>
	BINIO_init();
    5940:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5944:	88 b1       	in	r24, 0x08	; 8
    5946:	80 64       	ori	r24, 0x40	; 64
    5948:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    594a:	89 b1       	in	r24, 0x09	; 9
    594c:	80 64       	ori	r24, 0x40	; 64
    594e:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    5950:	0e 94 7d 45 	call	0x8afa	; 0x8afa <SLPCTRL_init>
	
	DAC0_init();
    5954:	0e 94 3a 2c 	call	0x5874	; 0x5874 <_Z9DAC0_initv>

	linkbus_init(LB_BAUD, LINKBUS_USART);
    5958:	44 e0       	ldi	r20, 0x04	; 4
    595a:	60 e8       	ldi	r22, 0x80	; 128
    595c:	75 e2       	ldi	r23, 0x25	; 37
    595e:	80 e0       	ldi	r24, 0x00	; 0
    5960:	90 e0       	ldi	r25, 0x00	; 0
    5962:	0e 94 21 39 	call	0x7242	; 0x7242 <_Z12linkbus_initm14USART_Number_t>
	serialbus_init(SB_BAUD, SERIALBUS_USART);
    5966:	41 e0       	ldi	r20, 0x01	; 1
    5968:	60 e8       	ldi	r22, 0x80	; 128
    596a:	75 e2       	ldi	r23, 0x25	; 37
    596c:	80 e0       	ldi	r24, 0x00	; 0
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <serialbus_init>

	BOD_init();
    5974:	0e 94 11 2c 	call	0x5822	; 0x5822 <BOD_init>
    5978:	08 95       	ret

0000597a <_Z7bcd2dech>:
				*val = second + 10 * second10 + 60 * (int32_t)minute + 600 * (int32_t)minute10 +  3600 * (int32_t)hour + 36000 * (int32_t)hour10;
			}
		}
		
		return(failure);
	}
    597a:	28 2f       	mov	r18, r24
    597c:	30 e0       	ldi	r19, 0x00	; 0
    597e:	35 95       	asr	r19
    5980:	27 95       	ror	r18
    5982:	35 95       	asr	r19
    5984:	27 95       	ror	r18
    5986:	35 95       	asr	r19
    5988:	27 95       	ror	r18
    598a:	35 95       	asr	r19
    598c:	27 95       	ror	r18
    598e:	22 0f       	add	r18, r18
    5990:	92 2f       	mov	r25, r18
    5992:	99 0f       	add	r25, r25
    5994:	99 0f       	add	r25, r25
    5996:	29 0f       	add	r18, r25
    5998:	8f 70       	andi	r24, 0x0F	; 15
    599a:	82 0f       	add	r24, r18
    599c:	08 95       	ret

0000599e <_Z7dec2bcdh>:
    599e:	2d ec       	ldi	r18, 0xCD	; 205
    59a0:	82 9f       	mul	r24, r18
    59a2:	21 2d       	mov	r18, r1
    59a4:	11 24       	eor	r1, r1
    59a6:	92 2f       	mov	r25, r18
    59a8:	96 95       	lsr	r25
    59aa:	96 95       	lsr	r25
    59ac:	96 95       	lsr	r25
    59ae:	99 0f       	add	r25, r25
    59b0:	39 2f       	mov	r19, r25
    59b2:	33 0f       	add	r19, r19
    59b4:	33 0f       	add	r19, r19
    59b6:	93 0f       	add	r25, r19
    59b8:	89 1b       	sub	r24, r25
    59ba:	98 2f       	mov	r25, r24
    59bc:	26 95       	lsr	r18
    59be:	26 95       	lsr	r18
    59c0:	26 95       	lsr	r18
    59c2:	80 e1       	ldi	r24, 0x10	; 16
    59c4:	28 9f       	mul	r18, r24
    59c6:	90 01       	movw	r18, r0
    59c8:	11 24       	eor	r1, r1
    59ca:	89 2f       	mov	r24, r25
    59cc:	82 2b       	or	r24, r18
    59ce:	08 95       	ret

000059d0 <_Z8char2bcdPc>:
    59d0:	fc 01       	movw	r30, r24
    59d2:	20 81       	ld	r18, Z
    59d4:	81 81       	ldd	r24, Z+1	; 0x01
    59d6:	f0 e1       	ldi	r31, 0x10	; 16
    59d8:	2f 9f       	mul	r18, r31
    59da:	80 0d       	add	r24, r0
    59dc:	11 24       	eor	r1, r1
    59de:	80 53       	subi	r24, 0x30	; 48
    59e0:	08 95       	ret

000059e2 <_Z14epoch_from_ltmP2tm>:
    59e2:	cf 92       	push	r12
    59e4:	df 92       	push	r13
    59e6:	ef 92       	push	r14
    59e8:	ff 92       	push	r15
    59ea:	fc 01       	movw	r30, r24
    59ec:	80 81       	ld	r24, Z
    59ee:	21 81       	ldd	r18, Z+1	; 0x01
    59f0:	08 2e       	mov	r0, r24
    59f2:	00 0c       	add	r0, r0
    59f4:	99 0b       	sbc	r25, r25
    59f6:	ac 01       	movw	r20, r24
    59f8:	3c e3       	ldi	r19, 0x3C	; 60
    59fa:	23 02       	muls	r18, r19
    59fc:	40 0d       	add	r20, r0
    59fe:	51 1d       	adc	r21, r1
    5a00:	11 24       	eor	r1, r1
    5a02:	a2 81       	ldd	r26, Z+2	; 0x02
    5a04:	0a 2e       	mov	r0, r26
    5a06:	00 0c       	add	r0, r0
    5a08:	bb 0b       	sbc	r27, r27
    5a0a:	20 e1       	ldi	r18, 0x10	; 16
    5a0c:	3e e0       	ldi	r19, 0x0E	; 14
    5a0e:	0e 94 56 4e 	call	0x9cac	; 0x9cac <__usmulhisi3>
    5a12:	6a 01       	movw	r12, r20
    5a14:	55 0f       	add	r21, r21
    5a16:	ee 08       	sbc	r14, r14
    5a18:	ff 08       	sbc	r15, r15
    5a1a:	c6 0e       	add	r12, r22
    5a1c:	d7 1e       	adc	r13, r23
    5a1e:	e8 1e       	adc	r14, r24
    5a20:	f9 1e       	adc	r15, r25
    5a22:	a0 85       	ldd	r26, Z+8	; 0x08
    5a24:	b1 85       	ldd	r27, Z+9	; 0x09
    5a26:	20 e8       	ldi	r18, 0x80	; 128
    5a28:	31 e5       	ldi	r19, 0x51	; 81
    5a2a:	41 e0       	ldi	r20, 0x01	; 1
    5a2c:	50 e0       	ldi	r21, 0x00	; 0
    5a2e:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5a32:	c6 0e       	add	r12, r22
    5a34:	d7 1e       	adc	r13, r23
    5a36:	e8 1e       	adc	r14, r24
    5a38:	f9 1e       	adc	r15, r25
    5a3a:	06 80       	ldd	r0, Z+6	; 0x06
    5a3c:	f7 81       	ldd	r31, Z+7	; 0x07
    5a3e:	e0 2d       	mov	r30, r0
    5a40:	df 01       	movw	r26, r30
    5a42:	a6 54       	subi	r26, 0x46	; 70
    5a44:	b1 09       	sbc	r27, r1
    5a46:	20 e8       	ldi	r18, 0x80	; 128
    5a48:	33 e3       	ldi	r19, 0x33	; 51
    5a4a:	41 ee       	ldi	r20, 0xE1	; 225
    5a4c:	51 e0       	ldi	r21, 0x01	; 1
    5a4e:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5a52:	c6 0e       	add	r12, r22
    5a54:	d7 1e       	adc	r13, r23
    5a56:	e8 1e       	adc	r14, r24
    5a58:	f9 1e       	adc	r15, r25
    5a5a:	cf 01       	movw	r24, r30
    5a5c:	85 54       	subi	r24, 0x45	; 69
    5a5e:	91 09       	sbc	r25, r1
    5a60:	dc 01       	movw	r26, r24
    5a62:	0a f4       	brpl	.+2      	; 0x5a66 <_Z14epoch_from_ltmP2tm+0x84>
    5a64:	13 96       	adiw	r26, 0x03	; 3
    5a66:	b5 95       	asr	r27
    5a68:	a7 95       	ror	r26
    5a6a:	b5 95       	asr	r27
    5a6c:	a7 95       	ror	r26
    5a6e:	20 e8       	ldi	r18, 0x80	; 128
    5a70:	31 e5       	ldi	r19, 0x51	; 81
    5a72:	41 e0       	ldi	r20, 0x01	; 1
    5a74:	50 e0       	ldi	r21, 0x00	; 0
    5a76:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5a7a:	c6 0e       	add	r12, r22
    5a7c:	d7 1e       	adc	r13, r23
    5a7e:	e8 1e       	adc	r14, r24
    5a80:	f9 1e       	adc	r15, r25
    5a82:	cf 01       	movw	r24, r30
    5a84:	01 97       	sbiw	r24, 0x01	; 1
    5a86:	64 e6       	ldi	r22, 0x64	; 100
    5a88:	70 e0       	ldi	r23, 0x00	; 0
    5a8a:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
    5a8e:	db 01       	movw	r26, r22
    5a90:	20 e8       	ldi	r18, 0x80	; 128
    5a92:	3e ea       	ldi	r19, 0xAE	; 174
    5a94:	4e ef       	ldi	r20, 0xFE	; 254
    5a96:	5f ef       	ldi	r21, 0xFF	; 255
    5a98:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5a9c:	c6 0e       	add	r12, r22
    5a9e:	d7 1e       	adc	r13, r23
    5aa0:	e8 1e       	adc	r14, r24
    5aa2:	f9 1e       	adc	r15, r25
    5aa4:	cf 01       	movw	r24, r30
    5aa6:	85 5d       	subi	r24, 0xD5	; 213
    5aa8:	9e 4f       	sbci	r25, 0xFE	; 254
    5aaa:	60 e9       	ldi	r22, 0x90	; 144
    5aac:	71 e0       	ldi	r23, 0x01	; 1
    5aae:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
    5ab2:	db 01       	movw	r26, r22
    5ab4:	20 e8       	ldi	r18, 0x80	; 128
    5ab6:	31 e5       	ldi	r19, 0x51	; 81
    5ab8:	41 e0       	ldi	r20, 0x01	; 1
    5aba:	50 e0       	ldi	r21, 0x00	; 0
    5abc:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5ac0:	6c 0d       	add	r22, r12
    5ac2:	7d 1d       	adc	r23, r13
    5ac4:	8e 1d       	adc	r24, r14
    5ac6:	9f 1d       	adc	r25, r15
    5ac8:	ff 90       	pop	r15
    5aca:	ef 90       	pop	r14
    5acc:	df 90       	pop	r13
    5ace:	cf 90       	pop	r12
    5ad0:	08 95       	ret

00005ad2 <ds3231_get_epoch>:
    5ad2:	4f 92       	push	r4
    5ad4:	5f 92       	push	r5
    5ad6:	6f 92       	push	r6
    5ad8:	7f 92       	push	r7
    5ada:	8f 92       	push	r8
    5adc:	9f 92       	push	r9
    5ade:	af 92       	push	r10
    5ae0:	bf 92       	push	r11
    5ae2:	cf 92       	push	r12
    5ae4:	df 92       	push	r13
    5ae6:	ef 92       	push	r14
    5ae8:	ff 92       	push	r15
    5aea:	0f 93       	push	r16
    5aec:	1f 93       	push	r17
    5aee:	cf 93       	push	r28
    5af0:	df 93       	push	r29
    5af2:	cd b7       	in	r28, 0x3d	; 61
    5af4:	de b7       	in	r29, 0x3e	; 62
    5af6:	63 97       	sbiw	r28, 0x13	; 19
    5af8:	cd bf       	out	0x3d, r28	; 61
    5afa:	de bf       	out	0x3e, r29	; 62
    5afc:	7c 01       	movw	r14, r24
    5afe:	fe 01       	movw	r30, r28
    5b00:	31 96       	adiw	r30, 0x01	; 1
    5b02:	87 e0       	ldi	r24, 0x07	; 7
    5b04:	df 01       	movw	r26, r30
    5b06:	1d 92       	st	X+, r1
    5b08:	8a 95       	dec	r24
    5b0a:	e9 f7       	brne	.-6      	; 0x5b06 <ds3231_get_epoch+0x34>
    5b0c:	8a e0       	ldi	r24, 0x0A	; 10
    5b0e:	1f ef       	ldi	r17, 0xFF	; 255
    5b10:	18 0f       	add	r17, r24
    5b12:	88 23       	and	r24, r24
    5b14:	81 f0       	breq	.+32     	; 0x5b36 <ds3231_get_epoch+0x64>
    5b16:	27 e0       	ldi	r18, 0x07	; 7
    5b18:	ae 01       	movw	r20, r28
    5b1a:	4f 5f       	subi	r20, 0xFF	; 255
    5b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b1e:	60 e0       	ldi	r22, 0x00	; 0
    5b20:	80 ed       	ldi	r24, 0xD0	; 208
    5b22:	0e 94 ab 36 	call	0x6d56	; 0x6d56 <I2C_0_GetData>
    5b26:	01 e0       	ldi	r16, 0x01	; 1
    5b28:	87 30       	cpi	r24, 0x07	; 7
    5b2a:	09 f4       	brne	.+2      	; 0x5b2e <ds3231_get_epoch+0x5c>
    5b2c:	00 e0       	ldi	r16, 0x00	; 0
    5b2e:	87 30       	cpi	r24, 0x07	; 7
    5b30:	21 f0       	breq	.+8      	; 0x5b3a <ds3231_get_epoch+0x68>
    5b32:	91 e0       	ldi	r25, 0x01	; 1
    5b34:	03 c0       	rjmp	.+6      	; 0x5b3c <ds3231_get_epoch+0x6a>
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	01 c0       	rjmp	.+2      	; 0x5b3c <ds3231_get_epoch+0x6a>
    5b3a:	90 e0       	ldi	r25, 0x00	; 0
    5b3c:	81 2f       	mov	r24, r17
    5b3e:	91 11       	cpse	r25, r1
    5b40:	e6 cf       	rjmp	.-52     	; 0x5b0e <ds3231_get_epoch+0x3c>
    5b42:	01 11       	cpse	r16, r1
    5b44:	f3 c0       	rjmp	.+486    	; 0x5d2c <ds3231_get_epoch+0x25a>
    5b46:	fe 01       	movw	r30, r28
    5b48:	38 96       	adiw	r30, 0x08	; 8
    5b4a:	8c e0       	ldi	r24, 0x0C	; 12
    5b4c:	df 01       	movw	r26, r30
    5b4e:	1d 92       	st	X+, r1
    5b50:	8a 95       	dec	r24
    5b52:	e9 f7       	brne	.-6      	; 0x5b4e <ds3231_get_epoch+0x7c>
    5b54:	2f 81       	ldd	r18, Y+7	; 0x07
    5b56:	82 2f       	mov	r24, r18
    5b58:	8f 70       	andi	r24, 0x0F	; 15
    5b5a:	a8 2e       	mov	r10, r24
    5b5c:	b1 2c       	mov	r11, r1
    5b5e:	c5 01       	movw	r24, r10
    5b60:	8c 59       	subi	r24, 0x9C	; 156
    5b62:	9f 4f       	sbci	r25, 0xFF	; 255
    5b64:	22 95       	swap	r18
    5b66:	2f 70       	andi	r18, 0x0F	; 15
    5b68:	30 e0       	ldi	r19, 0x00	; 0
    5b6a:	59 01       	movw	r10, r18
    5b6c:	aa 0c       	add	r10, r10
    5b6e:	bb 1c       	adc	r11, r11
    5b70:	22 0f       	add	r18, r18
    5b72:	33 1f       	adc	r19, r19
    5b74:	22 0f       	add	r18, r18
    5b76:	33 1f       	adc	r19, r19
    5b78:	22 0f       	add	r18, r18
    5b7a:	33 1f       	adc	r19, r19
    5b7c:	2a 0d       	add	r18, r10
    5b7e:	3b 1d       	adc	r19, r11
    5b80:	5c 01       	movw	r10, r24
    5b82:	a2 0e       	add	r10, r18
    5b84:	b3 1e       	adc	r11, r19
    5b86:	65 01       	movw	r12, r10
    5b88:	b4 e9       	ldi	r27, 0x94	; 148
    5b8a:	cb 1a       	sub	r12, r27
    5b8c:	b8 ef       	ldi	r27, 0xF8	; 248
    5b8e:	db 0a       	sbc	r13, r27
    5b90:	8e 81       	ldd	r24, Y+6	; 0x06
    5b92:	98 2f       	mov	r25, r24
    5b94:	9f 70       	andi	r25, 0x0F	; 15
    5b96:	82 95       	swap	r24
    5b98:	8f 70       	andi	r24, 0x0F	; 15
    5b9a:	88 0f       	add	r24, r24
    5b9c:	98 2e       	mov	r9, r24
    5b9e:	99 0c       	add	r9, r9
    5ba0:	99 0c       	add	r9, r9
    5ba2:	89 0d       	add	r24, r9
    5ba4:	98 2e       	mov	r9, r24
    5ba6:	99 0e       	add	r9, r25
    5ba8:	ed 81       	ldd	r30, Y+5	; 0x05
    5baa:	8e 2f       	mov	r24, r30
    5bac:	8f 70       	andi	r24, 0x0F	; 15
    5bae:	e2 95       	swap	r30
    5bb0:	ef 70       	andi	r30, 0x0F	; 15
    5bb2:	ee 0f       	add	r30, r30
    5bb4:	8e 2e       	mov	r8, r30
    5bb6:	88 0c       	add	r8, r8
    5bb8:	88 0c       	add	r8, r8
    5bba:	e8 0d       	add	r30, r8
    5bbc:	8e 2e       	mov	r8, r30
    5bbe:	88 0e       	add	r8, r24
    5bc0:	11 e0       	ldi	r17, 0x01	; 1
    5bc2:	19 15       	cp	r17, r9
    5bc4:	60 f4       	brcc	.+24     	; 0x5bde <ds3231_get_epoch+0x10c>
    5bc6:	61 2f       	mov	r22, r17
    5bc8:	c6 01       	movw	r24, r12
    5bca:	0e 94 47 02 	call	0x48e	; 0x48e <month_length>
    5bce:	28 89       	ldd	r18, Y+16	; 0x10
    5bd0:	39 89       	ldd	r19, Y+17	; 0x11
    5bd2:	28 0f       	add	r18, r24
    5bd4:	31 1d       	adc	r19, r1
    5bd6:	28 8b       	std	Y+16, r18	; 0x10
    5bd8:	39 8b       	std	Y+17, r19	; 0x11
    5bda:	1f 5f       	subi	r17, 0xFF	; 255
    5bdc:	f2 cf       	rjmp	.-28     	; 0x5bc2 <ds3231_get_epoch+0xf0>
    5bde:	e8 2d       	mov	r30, r8
    5be0:	88 0c       	add	r8, r8
    5be2:	ff 0b       	sbc	r31, r31
    5be4:	31 97       	sbiw	r30, 0x01	; 1
    5be6:	88 89       	ldd	r24, Y+16	; 0x10
    5be8:	99 89       	ldd	r25, Y+17	; 0x11
    5bea:	e8 0f       	add	r30, r24
    5bec:	f9 1f       	adc	r31, r25
    5bee:	29 81       	ldd	r18, Y+1	; 0x01
    5bf0:	42 2f       	mov	r20, r18
    5bf2:	42 95       	swap	r20
    5bf4:	4f 70       	andi	r20, 0x0F	; 15
    5bf6:	44 0f       	add	r20, r20
    5bf8:	94 2f       	mov	r25, r20
    5bfa:	99 0f       	add	r25, r25
    5bfc:	99 0f       	add	r25, r25
    5bfe:	84 2f       	mov	r24, r20
    5c00:	89 0f       	add	r24, r25
    5c02:	42 2f       	mov	r20, r18
    5c04:	4f 70       	andi	r20, 0x0F	; 15
    5c06:	48 0f       	add	r20, r24
    5c08:	3a 81       	ldd	r19, Y+2	; 0x02
    5c0a:	23 2f       	mov	r18, r19
    5c0c:	22 95       	swap	r18
    5c0e:	2f 70       	andi	r18, 0x0F	; 15
    5c10:	22 0f       	add	r18, r18
    5c12:	92 2f       	mov	r25, r18
    5c14:	99 0f       	add	r25, r25
    5c16:	99 0f       	add	r25, r25
    5c18:	82 2f       	mov	r24, r18
    5c1a:	89 0f       	add	r24, r25
    5c1c:	23 2f       	mov	r18, r19
    5c1e:	2f 70       	andi	r18, 0x0F	; 15
    5c20:	28 0f       	add	r18, r24
    5c22:	3b 81       	ldd	r19, Y+3	; 0x03
    5c24:	53 2f       	mov	r21, r19
    5c26:	50 72       	andi	r21, 0x20	; 32
    5c28:	83 2f       	mov	r24, r19
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	95 95       	asr	r25
    5c2e:	87 95       	ror	r24
    5c30:	95 95       	asr	r25
    5c32:	87 95       	ror	r24
    5c34:	95 95       	asr	r25
    5c36:	87 95       	ror	r24
    5c38:	95 95       	asr	r25
    5c3a:	87 95       	ror	r24
    5c3c:	81 70       	andi	r24, 0x01	; 1
    5c3e:	88 0f       	add	r24, r24
    5c40:	a8 2f       	mov	r26, r24
    5c42:	aa 0f       	add	r26, r26
    5c44:	aa 0f       	add	r26, r26
    5c46:	8a 0f       	add	r24, r26
    5c48:	a3 2f       	mov	r26, r19
    5c4a:	af 70       	andi	r26, 0x0F	; 15
    5c4c:	a8 0f       	add	r26, r24
    5c4e:	36 ff       	sbrs	r19, 6
    5c50:	04 c0       	rjmp	.+8      	; 0x5c5a <ds3231_get_epoch+0x188>
    5c52:	55 23       	and	r21, r21
    5c54:	21 f0       	breq	.+8      	; 0x5c5e <ds3231_get_epoch+0x18c>
    5c56:	a4 5f       	subi	r26, 0xF4	; 244
    5c58:	02 c0       	rjmp	.+4      	; 0x5c5e <ds3231_get_epoch+0x18c>
    5c5a:	51 11       	cpse	r21, r1
    5c5c:	ac 5e       	subi	r26, 0xEC	; 236
    5c5e:	04 2e       	mov	r0, r20
    5c60:	00 0c       	add	r0, r0
    5c62:	55 0b       	sbc	r21, r21
    5c64:	8c e3       	ldi	r24, 0x3C	; 60
    5c66:	28 02       	muls	r18, r24
    5c68:	40 0d       	add	r20, r0
    5c6a:	51 1d       	adc	r21, r1
    5c6c:	11 24       	eor	r1, r1
    5c6e:	0a 2e       	mov	r0, r26
    5c70:	00 0c       	add	r0, r0
    5c72:	bb 0b       	sbc	r27, r27
    5c74:	20 e1       	ldi	r18, 0x10	; 16
    5c76:	3e e0       	ldi	r19, 0x0E	; 14
    5c78:	0e 94 56 4e 	call	0x9cac	; 0x9cac <__usmulhisi3>
    5c7c:	2a 01       	movw	r4, r20
    5c7e:	55 0f       	add	r21, r21
    5c80:	66 08       	sbc	r6, r6
    5c82:	77 08       	sbc	r7, r7
    5c84:	46 0e       	add	r4, r22
    5c86:	57 1e       	adc	r5, r23
    5c88:	68 1e       	adc	r6, r24
    5c8a:	79 1e       	adc	r7, r25
    5c8c:	df 01       	movw	r26, r30
    5c8e:	20 e8       	ldi	r18, 0x80	; 128
    5c90:	31 e5       	ldi	r19, 0x51	; 81
    5c92:	41 e0       	ldi	r20, 0x01	; 1
    5c94:	50 e0       	ldi	r21, 0x00	; 0
    5c96:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5c9a:	46 0e       	add	r4, r22
    5c9c:	57 1e       	adc	r5, r23
    5c9e:	68 1e       	adc	r6, r24
    5ca0:	79 1e       	adc	r7, r25
    5ca2:	d5 01       	movw	r26, r10
    5ca4:	a6 54       	subi	r26, 0x46	; 70
    5ca6:	b1 09       	sbc	r27, r1
    5ca8:	20 e8       	ldi	r18, 0x80	; 128
    5caa:	33 e3       	ldi	r19, 0x33	; 51
    5cac:	41 ee       	ldi	r20, 0xE1	; 225
    5cae:	51 e0       	ldi	r21, 0x01	; 1
    5cb0:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5cb4:	46 0e       	add	r4, r22
    5cb6:	57 1e       	adc	r5, r23
    5cb8:	68 1e       	adc	r6, r24
    5cba:	79 1e       	adc	r7, r25
    5cbc:	c5 01       	movw	r24, r10
    5cbe:	85 54       	subi	r24, 0x45	; 69
    5cc0:	91 09       	sbc	r25, r1
    5cc2:	dc 01       	movw	r26, r24
    5cc4:	0a f4       	brpl	.+2      	; 0x5cc8 <ds3231_get_epoch+0x1f6>
    5cc6:	13 96       	adiw	r26, 0x03	; 3
    5cc8:	b5 95       	asr	r27
    5cca:	a7 95       	ror	r26
    5ccc:	b5 95       	asr	r27
    5cce:	a7 95       	ror	r26
    5cd0:	20 e8       	ldi	r18, 0x80	; 128
    5cd2:	31 e5       	ldi	r19, 0x51	; 81
    5cd4:	41 e0       	ldi	r20, 0x01	; 1
    5cd6:	50 e0       	ldi	r21, 0x00	; 0
    5cd8:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5cdc:	46 0e       	add	r4, r22
    5cde:	57 1e       	adc	r5, r23
    5ce0:	68 1e       	adc	r6, r24
    5ce2:	79 1e       	adc	r7, r25
    5ce4:	c5 01       	movw	r24, r10
    5ce6:	01 97       	sbiw	r24, 0x01	; 1
    5ce8:	64 e6       	ldi	r22, 0x64	; 100
    5cea:	70 e0       	ldi	r23, 0x00	; 0
    5cec:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
    5cf0:	db 01       	movw	r26, r22
    5cf2:	20 e8       	ldi	r18, 0x80	; 128
    5cf4:	3e ea       	ldi	r19, 0xAE	; 174
    5cf6:	4e ef       	ldi	r20, 0xFE	; 254
    5cf8:	5f ef       	ldi	r21, 0xFF	; 255
    5cfa:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5cfe:	46 0e       	add	r4, r22
    5d00:	57 1e       	adc	r5, r23
    5d02:	68 1e       	adc	r6, r24
    5d04:	79 1e       	adc	r7, r25
    5d06:	c5 01       	movw	r24, r10
    5d08:	85 5d       	subi	r24, 0xD5	; 213
    5d0a:	9e 4f       	sbci	r25, 0xFE	; 254
    5d0c:	60 e9       	ldi	r22, 0x90	; 144
    5d0e:	71 e0       	ldi	r23, 0x01	; 1
    5d10:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <__divmodhi4>
    5d14:	db 01       	movw	r26, r22
    5d16:	20 e8       	ldi	r18, 0x80	; 128
    5d18:	31 e5       	ldi	r19, 0x51	; 81
    5d1a:	41 e0       	ldi	r20, 0x01	; 1
    5d1c:	50 e0       	ldi	r21, 0x00	; 0
    5d1e:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <__mulshisi3>
    5d22:	64 0d       	add	r22, r4
    5d24:	75 1d       	adc	r23, r5
    5d26:	86 1d       	adc	r24, r6
    5d28:	97 1d       	adc	r25, r7
    5d2a:	03 c0       	rjmp	.+6      	; 0x5d32 <ds3231_get_epoch+0x260>
    5d2c:	60 e0       	ldi	r22, 0x00	; 0
    5d2e:	70 e0       	ldi	r23, 0x00	; 0
    5d30:	cb 01       	movw	r24, r22
    5d32:	e1 14       	cp	r14, r1
    5d34:	f1 04       	cpc	r15, r1
    5d36:	39 f0       	breq	.+14     	; 0x5d46 <ds3231_get_epoch+0x274>
    5d38:	00 23       	and	r16, r16
    5d3a:	11 f0       	breq	.+4      	; 0x5d40 <ds3231_get_epoch+0x26e>
    5d3c:	2c ef       	ldi	r18, 0xFC	; 252
    5d3e:	01 c0       	rjmp	.+2      	; 0x5d42 <ds3231_get_epoch+0x270>
    5d40:	20 e0       	ldi	r18, 0x00	; 0
    5d42:	d7 01       	movw	r26, r14
    5d44:	2c 93       	st	X, r18
    5d46:	63 96       	adiw	r28, 0x13	; 19
    5d48:	cd bf       	out	0x3d, r28	; 61
    5d4a:	de bf       	out	0x3e, r29	; 62
    5d4c:	df 91       	pop	r29
    5d4e:	cf 91       	pop	r28
    5d50:	1f 91       	pop	r17
    5d52:	0f 91       	pop	r16
    5d54:	ff 90       	pop	r15
    5d56:	ef 90       	pop	r14
    5d58:	df 90       	pop	r13
    5d5a:	cf 90       	pop	r12
    5d5c:	bf 90       	pop	r11
    5d5e:	af 90       	pop	r10
    5d60:	9f 90       	pop	r9
    5d62:	8f 90       	pop	r8
    5d64:	7f 90       	pop	r7
    5d66:	6f 90       	pop	r6
    5d68:	5f 90       	pop	r5
    5d6a:	4f 90       	pop	r4
    5d6c:	08 95       	ret

00005d6e <RTC_String2Epoch>:
    5d6e:	7f 92       	push	r7
    5d70:	8f 92       	push	r8
    5d72:	9f 92       	push	r9
    5d74:	af 92       	push	r10
    5d76:	bf 92       	push	r11
    5d78:	cf 92       	push	r12
    5d7a:	df 92       	push	r13
    5d7c:	ef 92       	push	r14
    5d7e:	ff 92       	push	r15
    5d80:	0f 93       	push	r16
    5d82:	1f 93       	push	r17
    5d84:	cf 93       	push	r28
    5d86:	df 93       	push	r29
    5d88:	cd b7       	in	r28, 0x3d	; 61
    5d8a:	de b7       	in	r29, 0x3e	; 62
    5d8c:	2c 97       	sbiw	r28, 0x0c	; 12
    5d8e:	cd bf       	out	0x3d, r28	; 61
    5d90:	de bf       	out	0x3e, r29	; 62
    5d92:	6c 01       	movw	r12, r24
    5d94:	8b 01       	movw	r16, r22
    5d96:	fe 01       	movw	r30, r28
    5d98:	31 96       	adiw	r30, 0x01	; 1
    5d9a:	8c e0       	ldi	r24, 0x0C	; 12
    5d9c:	df 01       	movw	r26, r30
    5d9e:	1d 92       	st	X+, r1
    5da0:	8a 95       	dec	r24
    5da2:	e9 f7       	brne	.-6      	; 0x5d9e <RTC_String2Epoch+0x30>
    5da4:	61 15       	cp	r22, r1
    5da6:	71 05       	cpc	r23, r1
    5da8:	09 f4       	brne	.+2      	; 0x5dac <RTC_String2Epoch+0x3e>
    5daa:	63 c0       	rjmp	.+198    	; 0x5e72 <RTC_String2Epoch+0x104>
    5dac:	cb 01       	movw	r24, r22
    5dae:	0a 96       	adiw	r24, 0x0a	; 10
    5db0:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5db4:	a8 2e       	mov	r10, r24
    5db6:	c8 01       	movw	r24, r16
    5db8:	08 96       	adiw	r24, 0x08	; 8
    5dba:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5dbe:	b8 2e       	mov	r11, r24
    5dc0:	c8 01       	movw	r24, r16
    5dc2:	06 96       	adiw	r24, 0x06	; 6
    5dc4:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5dc8:	f8 2e       	mov	r15, r24
    5dca:	c8 01       	movw	r24, r16
    5dcc:	04 96       	adiw	r24, 0x04	; 4
    5dce:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5dd2:	88 2e       	mov	r8, r24
    5dd4:	c8 01       	movw	r24, r16
    5dd6:	02 96       	adiw	r24, 0x02	; 2
    5dd8:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5ddc:	78 2e       	mov	r7, r24
    5dde:	c8 01       	movw	r24, r16
    5de0:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5de4:	18 2f       	mov	r17, r24
    5de6:	8f 2d       	mov	r24, r15
    5de8:	0e 94 bd 2c 	call	0x597a	; 0x597a <_Z7bcd2dech>
    5dec:	98 2e       	mov	r9, r24
    5dee:	81 2f       	mov	r24, r17
    5df0:	0e 94 bd 2c 	call	0x597a	; 0x597a <_Z7bcd2dech>
    5df4:	e8 2e       	mov	r14, r24
    5df6:	f1 2c       	mov	r15, r1
    5df8:	c7 01       	movw	r24, r14
    5dfa:	8c 59       	subi	r24, 0x9C	; 156
    5dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfe:	8f 83       	std	Y+7, r24	; 0x07
    5e00:	98 87       	std	Y+8, r25	; 0x08
    5e02:	b0 e3       	ldi	r27, 0x30	; 48
    5e04:	eb 1a       	sub	r14, r27
    5e06:	b8 ef       	ldi	r27, 0xF8	; 248
    5e08:	fb 0a       	sbc	r15, r27
    5e0a:	87 2d       	mov	r24, r7
    5e0c:	0e 94 bd 2c 	call	0x597a	; 0x597a <_Z7bcd2dech>
    5e10:	08 2f       	mov	r16, r24
    5e12:	8f ef       	ldi	r24, 0xFF	; 255
    5e14:	80 0f       	add	r24, r16
    5e16:	8e 83       	std	Y+6, r24	; 0x06
    5e18:	88 2d       	mov	r24, r8
    5e1a:	0e 94 bd 2c 	call	0x597a	; 0x597a <_Z7bcd2dech>
    5e1e:	8c 83       	std	Y+4, r24	; 0x04
    5e20:	11 e0       	ldi	r17, 0x01	; 1
    5e22:	10 17       	cp	r17, r16
    5e24:	60 f4       	brcc	.+24     	; 0x5e3e <RTC_String2Epoch+0xd0>
    5e26:	61 2f       	mov	r22, r17
    5e28:	c7 01       	movw	r24, r14
    5e2a:	0e 94 47 02 	call	0x48e	; 0x48e <month_length>
    5e2e:	29 85       	ldd	r18, Y+9	; 0x09
    5e30:	3a 85       	ldd	r19, Y+10	; 0x0a
    5e32:	28 0f       	add	r18, r24
    5e34:	31 1d       	adc	r19, r1
    5e36:	29 87       	std	Y+9, r18	; 0x09
    5e38:	3a 87       	std	Y+10, r19	; 0x0a
    5e3a:	1f 5f       	subi	r17, 0xFF	; 255
    5e3c:	f2 cf       	rjmp	.-28     	; 0x5e22 <RTC_String2Epoch+0xb4>
    5e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    5e40:	08 2e       	mov	r0, r24
    5e42:	00 0c       	add	r0, r0
    5e44:	99 0b       	sbc	r25, r25
    5e46:	01 97       	sbiw	r24, 0x01	; 1
    5e48:	29 85       	ldd	r18, Y+9	; 0x09
    5e4a:	3a 85       	ldd	r19, Y+10	; 0x0a
    5e4c:	82 0f       	add	r24, r18
    5e4e:	93 1f       	adc	r25, r19
    5e50:	89 87       	std	Y+9, r24	; 0x09
    5e52:	9a 87       	std	Y+10, r25	; 0x0a
    5e54:	8a 2d       	mov	r24, r10
    5e56:	0e 94 bd 2c 	call	0x597a	; 0x597a <_Z7bcd2dech>
    5e5a:	18 2f       	mov	r17, r24
    5e5c:	8b 2d       	mov	r24, r11
    5e5e:	0e 94 bd 2c 	call	0x597a	; 0x597a <_Z7bcd2dech>
    5e62:	9b 82       	std	Y+3, r9	; 0x03
    5e64:	8a 83       	std	Y+2, r24	; 0x02
    5e66:	19 83       	std	Y+1, r17	; 0x01
    5e68:	ce 01       	movw	r24, r28
    5e6a:	01 96       	adiw	r24, 0x01	; 1
    5e6c:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <_Z14epoch_from_ltmP2tm>
    5e70:	04 c0       	rjmp	.+8      	; 0x5e7a <RTC_String2Epoch+0x10c>
    5e72:	80 e0       	ldi	r24, 0x00	; 0
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <ds3231_get_epoch>
    5e7a:	c1 14       	cp	r12, r1
    5e7c:	d1 04       	cpc	r13, r1
    5e7e:	49 f0       	breq	.+18     	; 0x5e92 <RTC_String2Epoch+0x124>
    5e80:	21 e0       	ldi	r18, 0x01	; 1
    5e82:	61 15       	cp	r22, r1
    5e84:	71 05       	cpc	r23, r1
    5e86:	81 05       	cpc	r24, r1
    5e88:	91 05       	cpc	r25, r1
    5e8a:	09 f0       	breq	.+2      	; 0x5e8e <RTC_String2Epoch+0x120>
    5e8c:	20 e0       	ldi	r18, 0x00	; 0
    5e8e:	f6 01       	movw	r30, r12
    5e90:	20 83       	st	Z, r18
    5e92:	2c 96       	adiw	r28, 0x0c	; 12
    5e94:	cd bf       	out	0x3d, r28	; 61
    5e96:	de bf       	out	0x3e, r29	; 62
    5e98:	df 91       	pop	r29
    5e9a:	cf 91       	pop	r28
    5e9c:	1f 91       	pop	r17
    5e9e:	0f 91       	pop	r16
    5ea0:	ff 90       	pop	r15
    5ea2:	ef 90       	pop	r14
    5ea4:	df 90       	pop	r13
    5ea6:	cf 90       	pop	r12
    5ea8:	bf 90       	pop	r11
    5eaa:	af 90       	pop	r10
    5eac:	9f 90       	pop	r9
    5eae:	8f 90       	pop	r8
    5eb0:	7f 90       	pop	r7
    5eb2:	08 95       	ret

00005eb4 <ds3231_get_temp>:
    5eb4:	ef 92       	push	r14
    5eb6:	ff 92       	push	r15
    5eb8:	1f 93       	push	r17
    5eba:	cf 93       	push	r28
    5ebc:	df 93       	push	r29
    5ebe:	00 d0       	rcall	.+0      	; 0x5ec0 <ds3231_get_temp+0xc>
    5ec0:	cd b7       	in	r28, 0x3d	; 61
    5ec2:	de b7       	in	r29, 0x3e	; 62
    5ec4:	7c 01       	movw	r14, r24
    5ec6:	19 82       	std	Y+1, r1	; 0x01
    5ec8:	1a 82       	std	Y+2, r1	; 0x02
    5eca:	8a e0       	ldi	r24, 0x0A	; 10
    5ecc:	1f ef       	ldi	r17, 0xFF	; 255
    5ece:	18 0f       	add	r17, r24
    5ed0:	88 23       	and	r24, r24
    5ed2:	81 f0       	breq	.+32     	; 0x5ef4 <ds3231_get_temp+0x40>
    5ed4:	22 e0       	ldi	r18, 0x02	; 2
    5ed6:	ae 01       	movw	r20, r28
    5ed8:	4f 5f       	subi	r20, 0xFF	; 255
    5eda:	5f 4f       	sbci	r21, 0xFF	; 255
    5edc:	61 e1       	ldi	r22, 0x11	; 17
    5ede:	80 ed       	ldi	r24, 0xD0	; 208
    5ee0:	0e 94 ab 36 	call	0x6d56	; 0x6d56 <I2C_0_GetData>
    5ee4:	21 e0       	ldi	r18, 0x01	; 1
    5ee6:	82 30       	cpi	r24, 0x02	; 2
    5ee8:	09 f4       	brne	.+2      	; 0x5eec <ds3231_get_temp+0x38>
    5eea:	20 e0       	ldi	r18, 0x00	; 0
    5eec:	82 30       	cpi	r24, 0x02	; 2
    5eee:	21 f0       	breq	.+8      	; 0x5ef8 <ds3231_get_temp+0x44>
    5ef0:	91 e0       	ldi	r25, 0x01	; 1
    5ef2:	03 c0       	rjmp	.+6      	; 0x5efa <ds3231_get_temp+0x46>
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	01 c0       	rjmp	.+2      	; 0x5efa <ds3231_get_temp+0x46>
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	81 2f       	mov	r24, r17
    5efc:	91 11       	cpse	r25, r1
    5efe:	e6 cf       	rjmp	.-52     	; 0x5ecc <ds3231_get_temp+0x18>
    5f00:	21 11       	cpse	r18, r1
    5f02:	09 c0       	rjmp	.+18     	; 0x5f16 <ds3231_get_temp+0x62>
    5f04:	89 81       	ldd	r24, Y+1	; 0x01
    5f06:	90 e0       	ldi	r25, 0x00	; 0
    5f08:	98 2f       	mov	r25, r24
    5f0a:	88 27       	eor	r24, r24
    5f0c:	3a 81       	ldd	r19, Y+2	; 0x02
    5f0e:	83 2b       	or	r24, r19
    5f10:	f7 01       	movw	r30, r14
    5f12:	80 83       	st	Z, r24
    5f14:	91 83       	std	Z+1, r25	; 0x01
    5f16:	82 2f       	mov	r24, r18
    5f18:	0f 90       	pop	r0
    5f1a:	0f 90       	pop	r0
    5f1c:	df 91       	pop	r29
    5f1e:	cf 91       	pop	r28
    5f20:	1f 91       	pop	r17
    5f22:	ff 90       	pop	r15
    5f24:	ef 90       	pop	r14
    5f26:	08 95       	ret

00005f28 <ds3231_set_date_time_arducon>:
    5f28:	ff 92       	push	r15
    5f2a:	0f 93       	push	r16
    5f2c:	1f 93       	push	r17
    5f2e:	cf 93       	push	r28
    5f30:	df 93       	push	r29
    5f32:	cd b7       	in	r28, 0x3d	; 61
    5f34:	de b7       	in	r29, 0x3e	; 62
    5f36:	27 97       	sbiw	r28, 0x07	; 7
    5f38:	cd bf       	out	0x3d, r28	; 61
    5f3a:	de bf       	out	0x3e, r29	; 62
    5f3c:	fe 01       	movw	r30, r28
    5f3e:	31 96       	adiw	r30, 0x01	; 1
    5f40:	27 e0       	ldi	r18, 0x07	; 7
    5f42:	df 01       	movw	r26, r30
    5f44:	1d 92       	st	X+, r1
    5f46:	2a 95       	dec	r18
    5f48:	e9 f7       	brne	.-6      	; 0x5f44 <ds3231_set_date_time_arducon+0x1c>
    5f4a:	00 97       	sbiw	r24, 0x00	; 0
    5f4c:	09 f4       	brne	.+2      	; 0x5f50 <ds3231_set_date_time_arducon+0x28>
    5f4e:	3f c0       	rjmp	.+126    	; 0x5fce <ds3231_set_date_time_arducon+0xa6>
    5f50:	f6 2e       	mov	r15, r22
    5f52:	8c 01       	movw	r16, r24
    5f54:	0a 96       	adiw	r24, 0x0a	; 10
    5f56:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5f5a:	89 83       	std	Y+1, r24	; 0x01
    5f5c:	c8 01       	movw	r24, r16
    5f5e:	08 96       	adiw	r24, 0x08	; 8
    5f60:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5f64:	8a 83       	std	Y+2, r24	; 0x02
    5f66:	c8 01       	movw	r24, r16
    5f68:	06 96       	adiw	r24, 0x06	; 6
    5f6a:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5f6e:	8b 83       	std	Y+3, r24	; 0x03
    5f70:	c8 01       	movw	r24, r16
    5f72:	04 96       	adiw	r24, 0x04	; 4
    5f74:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5f78:	8d 83       	std	Y+5, r24	; 0x05
    5f7a:	c8 01       	movw	r24, r16
    5f7c:	02 96       	adiw	r24, 0x02	; 2
    5f7e:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5f82:	8e 83       	std	Y+6, r24	; 0x06
    5f84:	c8 01       	movw	r24, r16
    5f86:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_Z8char2bcdPc>
    5f8a:	8f 83       	std	Y+7, r24	; 0x07
    5f8c:	31 e0       	ldi	r19, 0x01	; 1
    5f8e:	9a e0       	ldi	r25, 0x0A	; 10
    5f90:	1f ef       	ldi	r17, 0xFF	; 255
    5f92:	19 0f       	add	r17, r25
    5f94:	99 23       	and	r25, r25
    5f96:	a1 f0       	breq	.+40     	; 0x5fc0 <ds3231_set_date_time_arducon+0x98>
    5f98:	6f 2d       	mov	r22, r15
    5f9a:	66 0f       	add	r22, r22
    5f9c:	66 0f       	add	r22, r22
    5f9e:	66 0f       	add	r22, r22
    5fa0:	6f 19       	sub	r22, r15
    5fa2:	27 e0       	ldi	r18, 0x07	; 7
    5fa4:	ae 01       	movw	r20, r28
    5fa6:	4f 5f       	subi	r20, 0xFF	; 255
    5fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    5faa:	80 ed       	ldi	r24, 0xD0	; 208
    5fac:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <I2C_0_SendData>
    5fb0:	31 e0       	ldi	r19, 0x01	; 1
    5fb2:	87 30       	cpi	r24, 0x07	; 7
    5fb4:	09 f4       	brne	.+2      	; 0x5fb8 <ds3231_set_date_time_arducon+0x90>
    5fb6:	30 e0       	ldi	r19, 0x00	; 0
    5fb8:	87 30       	cpi	r24, 0x07	; 7
    5fba:	21 f0       	breq	.+8      	; 0x5fc4 <ds3231_set_date_time_arducon+0x9c>
    5fbc:	21 e0       	ldi	r18, 0x01	; 1
    5fbe:	03 c0       	rjmp	.+6      	; 0x5fc6 <ds3231_set_date_time_arducon+0x9e>
    5fc0:	20 e0       	ldi	r18, 0x00	; 0
    5fc2:	01 c0       	rjmp	.+2      	; 0x5fc6 <ds3231_set_date_time_arducon+0x9e>
    5fc4:	20 e0       	ldi	r18, 0x00	; 0
    5fc6:	91 2f       	mov	r25, r17
    5fc8:	21 11       	cpse	r18, r1
    5fca:	e2 cf       	rjmp	.-60     	; 0x5f90 <ds3231_set_date_time_arducon+0x68>
    5fcc:	01 c0       	rjmp	.+2      	; 0x5fd0 <ds3231_set_date_time_arducon+0xa8>
    5fce:	31 e0       	ldi	r19, 0x01	; 1
    5fd0:	83 2f       	mov	r24, r19
    5fd2:	27 96       	adiw	r28, 0x07	; 7
    5fd4:	cd bf       	out	0x3d, r28	; 61
    5fd6:	de bf       	out	0x3e, r29	; 62
    5fd8:	df 91       	pop	r29
    5fda:	cf 91       	pop	r28
    5fdc:	1f 91       	pop	r17
    5fde:	0f 91       	pop	r16
    5fe0:	ff 90       	pop	r15
    5fe2:	08 95       	ret

00005fe4 <ds3231_set_date_time>:
    5fe4:	0f 93       	push	r16
    5fe6:	1f 93       	push	r17
    5fe8:	cf 93       	push	r28
    5fea:	df 93       	push	r29
    5fec:	cd b7       	in	r28, 0x3d	; 61
    5fee:	de b7       	in	r29, 0x3e	; 62
    5ff0:	27 97       	sbiw	r28, 0x07	; 7
    5ff2:	cd bf       	out	0x3d, r28	; 61
    5ff4:	de bf       	out	0x3e, r29	; 62
    5ff6:	fc 01       	movw	r30, r24
    5ff8:	06 2f       	mov	r16, r22
    5ffa:	81 e0       	ldi	r24, 0x01	; 1
    5ffc:	8c 83       	std	Y+4, r24	; 0x04
    5ffe:	82 89       	ldd	r24, Z+18	; 0x12
    6000:	20 ed       	ldi	r18, 0xD0	; 208
    6002:	28 0f       	add	r18, r24
    6004:	91 89       	ldd	r25, Z+17	; 0x11
    6006:	89 2f       	mov	r24, r25
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	c0 97       	sbiw	r24, 0x30	; 48
    600c:	82 95       	swap	r24
    600e:	92 95       	swap	r25
    6010:	90 7f       	andi	r25, 0xF0	; 240
    6012:	98 27       	eor	r25, r24
    6014:	80 7f       	andi	r24, 0xF0	; 240
    6016:	98 27       	eor	r25, r24
    6018:	82 2b       	or	r24, r18
    601a:	89 83       	std	Y+1, r24	; 0x01
    601c:	87 85       	ldd	r24, Z+15	; 0x0f
    601e:	20 ed       	ldi	r18, 0xD0	; 208
    6020:	28 0f       	add	r18, r24
    6022:	96 85       	ldd	r25, Z+14	; 0x0e
    6024:	89 2f       	mov	r24, r25
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	c0 97       	sbiw	r24, 0x30	; 48
    602a:	82 95       	swap	r24
    602c:	92 95       	swap	r25
    602e:	90 7f       	andi	r25, 0xF0	; 240
    6030:	98 27       	eor	r25, r24
    6032:	80 7f       	andi	r24, 0xF0	; 240
    6034:	98 27       	eor	r25, r24
    6036:	82 2b       	or	r24, r18
    6038:	8a 83       	std	Y+2, r24	; 0x02
    603a:	84 85       	ldd	r24, Z+12	; 0x0c
    603c:	20 ed       	ldi	r18, 0xD0	; 208
    603e:	28 0f       	add	r18, r24
    6040:	93 85       	ldd	r25, Z+11	; 0x0b
    6042:	89 2f       	mov	r24, r25
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	c0 97       	sbiw	r24, 0x30	; 48
    6048:	82 95       	swap	r24
    604a:	92 95       	swap	r25
    604c:	90 7f       	andi	r25, 0xF0	; 240
    604e:	98 27       	eor	r25, r24
    6050:	80 7f       	andi	r24, 0xF0	; 240
    6052:	98 27       	eor	r25, r24
    6054:	82 2b       	or	r24, r18
    6056:	8b 83       	std	Y+3, r24	; 0x03
    6058:	81 85       	ldd	r24, Z+9	; 0x09
    605a:	20 ed       	ldi	r18, 0xD0	; 208
    605c:	28 0f       	add	r18, r24
    605e:	90 85       	ldd	r25, Z+8	; 0x08
    6060:	89 2f       	mov	r24, r25
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	c0 97       	sbiw	r24, 0x30	; 48
    6066:	82 95       	swap	r24
    6068:	92 95       	swap	r25
    606a:	90 7f       	andi	r25, 0xF0	; 240
    606c:	98 27       	eor	r25, r24
    606e:	80 7f       	andi	r24, 0xF0	; 240
    6070:	98 27       	eor	r25, r24
    6072:	82 2b       	or	r24, r18
    6074:	8d 83       	std	Y+5, r24	; 0x05
    6076:	86 81       	ldd	r24, Z+6	; 0x06
    6078:	20 ed       	ldi	r18, 0xD0	; 208
    607a:	28 0f       	add	r18, r24
    607c:	95 81       	ldd	r25, Z+5	; 0x05
    607e:	89 2f       	mov	r24, r25
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	c0 97       	sbiw	r24, 0x30	; 48
    6084:	82 95       	swap	r24
    6086:	92 95       	swap	r25
    6088:	90 7f       	andi	r25, 0xF0	; 240
    608a:	98 27       	eor	r25, r24
    608c:	80 7f       	andi	r24, 0xF0	; 240
    608e:	98 27       	eor	r25, r24
    6090:	82 2b       	or	r24, r18
    6092:	8e 83       	std	Y+6, r24	; 0x06
    6094:	83 81       	ldd	r24, Z+3	; 0x03
    6096:	20 ed       	ldi	r18, 0xD0	; 208
    6098:	28 0f       	add	r18, r24
    609a:	92 81       	ldd	r25, Z+2	; 0x02
    609c:	89 2f       	mov	r24, r25
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	c0 97       	sbiw	r24, 0x30	; 48
    60a2:	82 95       	swap	r24
    60a4:	92 95       	swap	r25
    60a6:	90 7f       	andi	r25, 0xF0	; 240
    60a8:	98 27       	eor	r25, r24
    60aa:	80 7f       	andi	r24, 0xF0	; 240
    60ac:	98 27       	eor	r25, r24
    60ae:	82 2b       	or	r24, r18
    60b0:	8f 83       	std	Y+7, r24	; 0x07
    60b2:	8a e0       	ldi	r24, 0x0A	; 10
    60b4:	1f ef       	ldi	r17, 0xFF	; 255
    60b6:	18 0f       	add	r17, r24
    60b8:	88 23       	and	r24, r24
    60ba:	81 f0       	breq	.+32     	; 0x60dc <ds3231_set_date_time+0xf8>
    60bc:	60 2f       	mov	r22, r16
    60be:	66 0f       	add	r22, r22
    60c0:	66 0f       	add	r22, r22
    60c2:	66 0f       	add	r22, r22
    60c4:	60 1b       	sub	r22, r16
    60c6:	27 e0       	ldi	r18, 0x07	; 7
    60c8:	ae 01       	movw	r20, r28
    60ca:	4f 5f       	subi	r20, 0xFF	; 255
    60cc:	5f 4f       	sbci	r21, 0xFF	; 255
    60ce:	80 ed       	ldi	r24, 0xD0	; 208
    60d0:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <I2C_0_SendData>
    60d4:	88 23       	and	r24, r24
    60d6:	21 f0       	breq	.+8      	; 0x60e0 <ds3231_set_date_time+0xfc>
    60d8:	91 e0       	ldi	r25, 0x01	; 1
    60da:	03 c0       	rjmp	.+6      	; 0x60e2 <ds3231_set_date_time+0xfe>
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	01 c0       	rjmp	.+2      	; 0x60e2 <ds3231_set_date_time+0xfe>
    60e0:	90 e0       	ldi	r25, 0x00	; 0
    60e2:	81 2f       	mov	r24, r17
    60e4:	91 11       	cpse	r25, r1
    60e6:	e6 cf       	rjmp	.-52     	; 0x60b4 <ds3231_set_date_time+0xd0>
    60e8:	27 96       	adiw	r28, 0x07	; 7
    60ea:	cd bf       	out	0x3d, r28	; 61
    60ec:	de bf       	out	0x3e, r29	; 62
    60ee:	df 91       	pop	r29
    60f0:	cf 91       	pop	r28
    60f2:	1f 91       	pop	r17
    60f4:	0f 91       	pop	r16
    60f6:	08 95       	ret

000060f8 <ds3231_1s_sqw>:
#endif // DATE_STRING_SUPPORT_ENABLED
	
	bool ds3231_1s_sqw(bool enable)
	{
    60f8:	1f 93       	push	r17
    60fa:	cf 93       	push	r28
    60fc:	df 93       	push	r29
    60fe:	1f 92       	push	r1
    6100:	cd b7       	in	r28, 0x3d	; 61
    6102:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
		bool failure;
		uint8_t data[1];
		
		data[0] = enable ? 0x00:0x04;	
    6104:	88 23       	and	r24, r24
    6106:	11 f0       	breq	.+4      	; 0x610c <ds3231_1s_sqw+0x14>
    6108:	80 e0       	ldi	r24, 0x00	; 0
    610a:	01 c0       	rjmp	.+2      	; 0x610e <ds3231_1s_sqw+0x16>
    610c:	84 e0       	ldi	r24, 0x04	; 4
    610e:	89 83       	std	Y+1, r24	; 0x01
	}
#endif // DATE_STRING_SUPPORT_ENABLED
	
	bool ds3231_1s_sqw(bool enable)
	{
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    6110:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		uint8_t data[1];
		
		data[0] = enable ? 0x00:0x04;	
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, data, 1) != 1)));
    6112:	1f ef       	ldi	r17, 0xFF	; 255
    6114:	18 0f       	add	r17, r24
    6116:	88 23       	and	r24, r24
    6118:	81 f0       	breq	.+32     	; 0x613a <ds3231_1s_sqw+0x42>
    611a:	21 e0       	ldi	r18, 0x01	; 1
    611c:	ae 01       	movw	r20, r28
    611e:	4f 5f       	subi	r20, 0xFF	; 255
    6120:	5f 4f       	sbci	r21, 0xFF	; 255
    6122:	6e e0       	ldi	r22, 0x0E	; 14
    6124:	80 ed       	ldi	r24, 0xD0	; 208
    6126:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <I2C_0_SendData>
    612a:	21 e0       	ldi	r18, 0x01	; 1
    612c:	81 30       	cpi	r24, 0x01	; 1
    612e:	09 f4       	brne	.+2      	; 0x6132 <ds3231_1s_sqw+0x3a>
    6130:	20 e0       	ldi	r18, 0x00	; 0
    6132:	81 30       	cpi	r24, 0x01	; 1
    6134:	21 f0       	breq	.+8      	; 0x613e <ds3231_1s_sqw+0x46>
    6136:	91 e0       	ldi	r25, 0x01	; 1
    6138:	03 c0       	rjmp	.+6      	; 0x6140 <ds3231_1s_sqw+0x48>
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	01 c0       	rjmp	.+2      	; 0x6140 <ds3231_1s_sqw+0x48>
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	81 2f       	mov	r24, r17
    6142:	91 11       	cpse	r25, r1
    6144:	e6 cf       	rjmp	.-52     	; 0x6112 <ds3231_1s_sqw+0x1a>
		
		return(failure);
	}
    6146:	82 2f       	mov	r24, r18
    6148:	0f 90       	pop	r0
    614a:	df 91       	pop	r29
    614c:	cf 91       	pop	r28
    614e:	1f 91       	pop	r17
    6150:	08 95       	ret

00006152 <ds3231_set_aging>:


	bool ds3231_set_aging(int8_t data_in)
	{
    6152:	1f 93       	push	r17
    6154:	cf 93       	push	r28
    6156:	df 93       	push	r29
    6158:	1f 92       	push	r1
    615a:	cd b7       	in	r28, 0x3d	; 61
    615c:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
    615e:	89 83       	std	Y+1, r24	; 0x01
	}


	bool ds3231_set_aging(int8_t data_in)
	{
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    6160:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    6162:	1f ef       	ldi	r17, 0xFF	; 255
    6164:	18 0f       	add	r17, r24
    6166:	88 23       	and	r24, r24
    6168:	81 f0       	breq	.+32     	; 0x618a <ds3231_set_aging+0x38>
    616a:	21 e0       	ldi	r18, 0x01	; 1
    616c:	ae 01       	movw	r20, r28
    616e:	4f 5f       	subi	r20, 0xFF	; 255
    6170:	5f 4f       	sbci	r21, 0xFF	; 255
    6172:	60 e1       	ldi	r22, 0x10	; 16
    6174:	80 ed       	ldi	r24, 0xD0	; 208
    6176:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <I2C_0_SendData>
    617a:	21 e0       	ldi	r18, 0x01	; 1
    617c:	81 30       	cpi	r24, 0x01	; 1
    617e:	09 f4       	brne	.+2      	; 0x6182 <ds3231_set_aging+0x30>
    6180:	20 e0       	ldi	r18, 0x00	; 0
    6182:	81 30       	cpi	r24, 0x01	; 1
    6184:	21 f0       	breq	.+8      	; 0x618e <ds3231_set_aging+0x3c>
    6186:	91 e0       	ldi	r25, 0x01	; 1
    6188:	03 c0       	rjmp	.+6      	; 0x6190 <ds3231_set_aging+0x3e>
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	01 c0       	rjmp	.+2      	; 0x6190 <ds3231_set_aging+0x3e>
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	81 2f       	mov	r24, r17
    6192:	91 11       	cpse	r25, r1
    6194:	e6 cf       	rjmp	.-52     	; 0x6162 <ds3231_set_aging+0x10>
		return(failure);
	}
    6196:	82 2f       	mov	r24, r18
    6198:	0f 90       	pop	r0
    619a:	df 91       	pop	r29
    619c:	cf 91       	pop	r28
    619e:	1f 91       	pop	r17
    61a0:	08 95       	ret

000061a2 <ds3231_get_aging>:


	int8_t ds3231_get_aging()
	{
    61a2:	1f 93       	push	r17
    61a4:	cf 93       	push	r28
    61a6:	df 93       	push	r29
    61a8:	1f 92       	push	r1
    61aa:	cd b7       	in	r28, 0x3d	; 61
    61ac:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    61ae:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		while(tries-- && (failure = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    61b0:	1f ef       	ldi	r17, 0xFF	; 255
    61b2:	18 0f       	add	r17, r24
    61b4:	88 23       	and	r24, r24
    61b6:	61 f0       	breq	.+24     	; 0x61d0 <ds3231_get_aging+0x2e>
    61b8:	21 e0       	ldi	r18, 0x01	; 1
    61ba:	ae 01       	movw	r20, r28
    61bc:	4f 5f       	subi	r20, 0xFF	; 255
    61be:	5f 4f       	sbci	r21, 0xFF	; 255
    61c0:	60 e1       	ldi	r22, 0x10	; 16
    61c2:	80 ed       	ldi	r24, 0xD0	; 208
    61c4:	0e 94 ab 36 	call	0x6d56	; 0x6d56 <I2C_0_GetData>
    61c8:	81 30       	cpi	r24, 0x01	; 1
    61ca:	21 f0       	breq	.+8      	; 0x61d4 <ds3231_get_aging+0x32>
    61cc:	91 e0       	ldi	r25, 0x01	; 1
    61ce:	03 c0       	rjmp	.+6      	; 0x61d6 <ds3231_get_aging+0x34>
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	01 c0       	rjmp	.+2      	; 0x61d6 <ds3231_get_aging+0x34>
    61d4:	90 e0       	ldi	r25, 0x00	; 0
    61d6:	81 2f       	mov	r24, r17
    61d8:	91 11       	cpse	r25, r1
    61da:	ea cf       	rjmp	.-44     	; 0x61b0 <ds3231_get_aging+0xe>
		return(data[0]);
	}
    61dc:	89 81       	ldd	r24, Y+1	; 0x01
    61de:	0f 90       	pop	r0
    61e0:	df 91       	pop	r29
    61e2:	cf 91       	pop	r28
    61e4:	1f 91       	pop	r17
    61e6:	08 95       	ret

000061e8 <ds3231_responding>:

	bool ds3231_responding()
	{
    61e8:	1f 93       	push	r17
    61ea:	cf 93       	push	r28
    61ec:	df 93       	push	r29
    61ee:	1f 92       	push	r1
    61f0:	cd b7       	in	r28, 0x3d	; 61
    61f2:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
		uint8_t tries = 10;
    61f4:	9a e0       	ldi	r25, 0x0A	; 10
		return(data[0]);
	}

	bool ds3231_responding()
	{
		bool responseReceived = false;
    61f6:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t tries = 10;
		int8_t data[1];		
		while(tries-- && !(responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1)));
    61f8:	1f ef       	ldi	r17, 0xFF	; 255
    61fa:	19 0f       	add	r17, r25
    61fc:	99 23       	and	r25, r25
    61fe:	81 f0       	breq	.+32     	; 0x6220 <ds3231_responding+0x38>
    6200:	21 e0       	ldi	r18, 0x01	; 1
    6202:	ae 01       	movw	r20, r28
    6204:	4f 5f       	subi	r20, 0xFF	; 255
    6206:	5f 4f       	sbci	r21, 0xFF	; 255
    6208:	60 e1       	ldi	r22, 0x10	; 16
    620a:	80 ed       	ldi	r24, 0xD0	; 208
    620c:	0e 94 ab 36 	call	0x6d56	; 0x6d56 <I2C_0_GetData>
    6210:	31 e0       	ldi	r19, 0x01	; 1
    6212:	81 30       	cpi	r24, 0x01	; 1
    6214:	09 f0       	breq	.+2      	; 0x6218 <ds3231_responding+0x30>
    6216:	30 e0       	ldi	r19, 0x00	; 0
    6218:	81 30       	cpi	r24, 0x01	; 1
    621a:	21 f0       	breq	.+8      	; 0x6224 <ds3231_responding+0x3c>
    621c:	21 e0       	ldi	r18, 0x01	; 1
    621e:	03 c0       	rjmp	.+6      	; 0x6226 <ds3231_responding+0x3e>
    6220:	20 e0       	ldi	r18, 0x00	; 0
    6222:	01 c0       	rjmp	.+2      	; 0x6226 <ds3231_responding+0x3e>
    6224:	20 e0       	ldi	r18, 0x00	; 0
    6226:	91 2f       	mov	r25, r17
    6228:	21 11       	cpse	r18, r1
    622a:	e6 cf       	rjmp	.-52     	; 0x61f8 <ds3231_responding+0x10>
		return(responseReceived);
	}
    622c:	83 2f       	mov	r24, r19
    622e:	0f 90       	pop	r0
    6230:	df 91       	pop	r29
    6232:	cf 91       	pop	r28
    6234:	1f 91       	pop	r17
    6236:	08 95       	ret

00006238 <ds3231_init>:

time_t epoch_from_ltm(tm *ltm);

bool ds3231_init()
{
	I2C_0_Init();
    6238:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <I2C_0_Init>
	return (!ds3231_responding());
    623c:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <ds3231_responding>
}
    6240:	91 e0       	ldi	r25, 0x01	; 1
    6242:	89 27       	eor	r24, r25
    6244:	08 95       	ret

00006246 <ds3231_sync2nearestMinute>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
    6246:	cf 92       	push	r12
    6248:	df 92       	push	r13
    624a:	ef 92       	push	r14
    624c:	ff 92       	push	r15
    624e:	0f 93       	push	r16
    6250:	1f 93       	push	r17
    6252:	cf 93       	push	r28
    6254:	df 93       	push	r29
    6256:	cd b7       	in	r28, 0x3d	; 61
    6258:	de b7       	in	r29, 0x3e	; 62
    625a:	28 97       	sbiw	r28, 0x08	; 8
    625c:	cd bf       	out	0x3d, r28	; 61
    625e:	de bf       	out	0x3e, r29	; 62
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
    6260:	fe 01       	movw	r30, r28
    6262:	31 96       	adiw	r30, 0x01	; 1
    6264:	88 e0       	ldi	r24, 0x08	; 8
    6266:	df 01       	movw	r26, r30
    6268:	1d 92       	st	X+, r1
    626a:	8a 95       	dec	r24
    626c:	e9 f7       	brne	.-6      	; 0x6268 <ds3231_sync2nearestMinute+0x22>
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
    626e:	f1 2c       	mov	r15, r1
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
    6270:	8a e0       	ldi	r24, 0x0A	; 10
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
		
	while(tries-- && (err = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 3) != 3)));
    6272:	1f ef       	ldi	r17, 0xFF	; 255
    6274:	18 0f       	add	r17, r24
    6276:	88 23       	and	r24, r24
    6278:	89 f0       	breq	.+34     	; 0x629c <ds3231_sync2nearestMinute+0x56>
    627a:	23 e0       	ldi	r18, 0x03	; 3
    627c:	ae 01       	movw	r20, r28
    627e:	4f 5f       	subi	r20, 0xFF	; 255
    6280:	5f 4f       	sbci	r21, 0xFF	; 255
    6282:	60 e0       	ldi	r22, 0x00	; 0
    6284:	80 ed       	ldi	r24, 0xD0	; 208
    6286:	0e 94 ab 36 	call	0x6d56	; 0x6d56 <I2C_0_GetData>
    628a:	ff 24       	eor	r15, r15
    628c:	f3 94       	inc	r15
    628e:	83 30       	cpi	r24, 0x03	; 3
    6290:	09 f4       	brne	.+2      	; 0x6294 <ds3231_sync2nearestMinute+0x4e>
    6292:	f1 2c       	mov	r15, r1
    6294:	83 30       	cpi	r24, 0x03	; 3
    6296:	21 f0       	breq	.+8      	; 0x62a0 <ds3231_sync2nearestMinute+0x5a>
    6298:	01 e0       	ldi	r16, 0x01	; 1
    629a:	03 c0       	rjmp	.+6      	; 0x62a2 <ds3231_sync2nearestMinute+0x5c>
    629c:	00 e0       	ldi	r16, 0x00	; 0
    629e:	01 c0       	rjmp	.+2      	; 0x62a2 <ds3231_sync2nearestMinute+0x5c>
    62a0:	00 e0       	ldi	r16, 0x00	; 0
    62a2:	81 2f       	mov	r24, r17
    62a4:	01 11       	cpse	r16, r1
    62a6:	e5 cf       	rjmp	.-54     	; 0x6272 <ds3231_sync2nearestMinute+0x2c>

	if(!err)
    62a8:	f1 10       	cpse	r15, r1
    62aa:	82 c0       	rjmp	.+260    	; 0x63b0 <ds3231_sync2nearestMinute+0x16a>
		uint8_t hour10;
		uint8_t hour;
		bool am_pm;
		bool twelvehour;

		seconds = bcd2dec(data[0]);
    62ac:	89 81       	ldd	r24, Y+1	; 0x01
    62ae:	0e 94 bd 2c 	call	0x597a	; 0x597a <_Z7bcd2dech>
    62b2:	d8 2e       	mov	r13, r24
		minutes = bcd2dec(data[1]);
    62b4:	8a 81       	ldd	r24, Y+2	; 0x02
    62b6:	0e 94 bd 2c 	call	0x597a	; 0x597a <_Z7bcd2dech>
		am_pm = ((data[2] >> 5) & 0x01);
    62ba:	9b 81       	ldd	r25, Y+3	; 0x03
    62bc:	49 2f       	mov	r20, r25
    62be:	40 72       	andi	r20, 0x20	; 32
		hour10 = ((data[2] >> 4) & 0x01);
    62c0:	29 2f       	mov	r18, r25
    62c2:	30 e0       	ldi	r19, 0x00	; 0
    62c4:	35 95       	asr	r19
    62c6:	27 95       	ror	r18
    62c8:	35 95       	asr	r19
    62ca:	27 95       	ror	r18
    62cc:	35 95       	asr	r19
    62ce:	27 95       	ror	r18
    62d0:	35 95       	asr	r19
    62d2:	27 95       	ror	r18
    62d4:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
    62d6:	39 2f       	mov	r19, r25
    62d8:	3f 70       	andi	r19, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);

		if(!twelvehour && am_pm)
    62da:	b9 2f       	mov	r27, r25
    62dc:	b0 74       	andi	r27, 0x40	; 64
    62de:	cb 2e       	mov	r12, r27
    62e0:	96 fd       	sbrc	r25, 6
    62e2:	02 c0       	rjmp	.+4      	; 0x62e8 <ds3231_sync2nearestMinute+0xa2>
    62e4:	41 11       	cpse	r20, r1
		{
			hour10 = 2;
    62e6:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
    62e8:	22 0f       	add	r18, r18
    62ea:	e2 2e       	mov	r14, r18
    62ec:	ee 0c       	add	r14, r14
    62ee:	ee 0c       	add	r14, r14
    62f0:	2e 0d       	add	r18, r14
    62f2:	e2 2e       	mov	r14, r18
    62f4:	e3 0e       	add	r14, r19

		if(seconds > 30)
    62f6:	5e e1       	ldi	r21, 0x1E	; 30
    62f8:	5d 15       	cp	r21, r13
    62fa:	60 f4       	brcc	.+24     	; 0x6314 <ds3231_sync2nearestMinute+0xce>
		{
			minutes++;
    62fc:	8f 5f       	subi	r24, 0xFF	; 255

			if(minutes > 59)
    62fe:	8c 33       	cpi	r24, 0x3C	; 60
    6300:	48 f0       	brcs	.+18     	; 0x6314 <ds3231_sync2nearestMinute+0xce>
			{
				minutes = 0;
				hours++;
    6302:	e3 94       	inc	r14

				if(hours > 23) /* Don't attempt to synchronize at midnight */
    6304:	87 e1       	ldi	r24, 0x17	; 23
    6306:	8e 15       	cp	r24, r14
    6308:	10 f0       	brcs	.+4      	; 0x630e <ds3231_sync2nearestMinute+0xc8>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    630a:	80 e0       	ldi	r24, 0x00	; 0
    630c:	03 c0       	rjmp	.+6      	; 0x6314 <ds3231_sync2nearestMinute+0xce>
    630e:	80 e0       	ldi	r24, 0x00	; 0
				hours++;

				if(hours > 23) /* Don't attempt to synchronize at midnight */
				{
					err = true;
    6310:	ff 24       	eor	r15, r15
    6312:	f3 94       	inc	r15
				}
			}
		}

		if(!err)
    6314:	f1 10       	cpse	r15, r1
    6316:	4c c0       	rjmp	.+152    	; 0x63b0 <ds3231_sync2nearestMinute+0x16a>
		{
			data[0] = 0; /* seconds = 00 */
    6318:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
    631a:	0e 94 cf 2c 	call	0x599e	; 0x599e <_Z7dec2bcdh>
    631e:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;
    6320:	1b 82       	std	Y+3, r1	; 0x03

			if(twelvehour)
    6322:	cc 20       	and	r12, r12
    6324:	71 f0       	breq	.+28     	; 0x6342 <ds3231_sync2nearestMinute+0xfc>
			{
				data[2] |= 0x40; /* set  12-hour bit */
    6326:	80 e4       	ldi	r24, 0x40	; 64
    6328:	8b 83       	std	Y+3, r24	; 0x03

				if(hours >= 12)
    632a:	9b e0       	ldi	r25, 0x0B	; 11
    632c:	9e 15       	cp	r25, r14
    632e:	10 f4       	brcc	.+4      	; 0x6334 <ds3231_sync2nearestMinute+0xee>
				{
					data[2] |= 0x20; /* set pm bit */
    6330:	80 e6       	ldi	r24, 0x60	; 96
    6332:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
    6334:	a9 e0       	ldi	r26, 0x09	; 9
    6336:	ae 15       	cp	r26, r14
    6338:	78 f4       	brcc	.+30     	; 0x6358 <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10;
    633a:	8b 81       	ldd	r24, Y+3	; 0x03
    633c:	80 61       	ori	r24, 0x10	; 16
    633e:	8b 83       	std	Y+3, r24	; 0x03
    6340:	0b c0       	rjmp	.+22     	; 0x6358 <ds3231_sync2nearestMinute+0x112>
				}
			}
			else
			{
				if(hours >= 20)
    6342:	b3 e1       	ldi	r27, 0x13	; 19
    6344:	be 15       	cp	r27, r14
    6346:	18 f4       	brcc	.+6      	; 0x634e <ds3231_sync2nearestMinute+0x108>
				{
					data[2] |= 0x20; /* set 20 bit */
    6348:	80 e2       	ldi	r24, 0x20	; 32
    634a:	8b 83       	std	Y+3, r24	; 0x03
    634c:	05 c0       	rjmp	.+10     	; 0x6358 <ds3231_sync2nearestMinute+0x112>
				}
				else if(hours >= 10)
    634e:	59 e0       	ldi	r21, 0x09	; 9
    6350:	5e 15       	cp	r21, r14
    6352:	10 f4       	brcc	.+4      	; 0x6358 <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10; /* set 10 bit */
    6354:	80 e1       	ldi	r24, 0x10	; 16
    6356:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
    6358:	8d ec       	ldi	r24, 0xCD	; 205
    635a:	e8 9e       	mul	r14, r24
    635c:	81 2d       	mov	r24, r1
    635e:	11 24       	eor	r1, r1
    6360:	86 95       	lsr	r24
    6362:	86 95       	lsr	r24
    6364:	86 95       	lsr	r24
    6366:	88 0f       	add	r24, r24
    6368:	98 2f       	mov	r25, r24
    636a:	99 0f       	add	r25, r25
    636c:	99 0f       	add	r25, r25
    636e:	89 0f       	add	r24, r25
    6370:	e8 1a       	sub	r14, r24
    6372:	2b 81       	ldd	r18, Y+3	; 0x03
    6374:	e2 2a       	or	r14, r18
    6376:	eb 82       	std	Y+3, r14	; 0x03
			
			while(tries-- && (err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4)));
    6378:	ee 24       	eor	r14, r14
    637a:	ea 94       	dec	r14
    637c:	e1 0e       	add	r14, r17
    637e:	11 23       	and	r17, r17
    6380:	89 f0       	breq	.+34     	; 0x63a4 <ds3231_sync2nearestMinute+0x15e>
    6382:	24 e0       	ldi	r18, 0x04	; 4
    6384:	ae 01       	movw	r20, r28
    6386:	4f 5f       	subi	r20, 0xFF	; 255
    6388:	5f 4f       	sbci	r21, 0xFF	; 255
    638a:	60 e0       	ldi	r22, 0x00	; 0
    638c:	80 ed       	ldi	r24, 0xD0	; 208
    638e:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <I2C_0_SendData>
    6392:	ff 24       	eor	r15, r15
    6394:	f3 94       	inc	r15
    6396:	84 30       	cpi	r24, 0x04	; 4
    6398:	09 f4       	brne	.+2      	; 0x639c <ds3231_sync2nearestMinute+0x156>
    639a:	f1 2c       	mov	r15, r1
    639c:	84 30       	cpi	r24, 0x04	; 4
    639e:	21 f0       	breq	.+8      	; 0x63a8 <ds3231_sync2nearestMinute+0x162>
    63a0:	81 e0       	ldi	r24, 0x01	; 1
    63a2:	03 c0       	rjmp	.+6      	; 0x63aa <ds3231_sync2nearestMinute+0x164>
    63a4:	80 2f       	mov	r24, r16
    63a6:	01 c0       	rjmp	.+2      	; 0x63aa <ds3231_sync2nearestMinute+0x164>
    63a8:	80 2f       	mov	r24, r16
    63aa:	1e 2d       	mov	r17, r14
    63ac:	81 11       	cpse	r24, r1
    63ae:	e4 cf       	rjmp	.-56     	; 0x6378 <ds3231_sync2nearestMinute+0x132>
		}
	}

	return err;
}
    63b0:	8f 2d       	mov	r24, r15
    63b2:	28 96       	adiw	r28, 0x08	; 8
    63b4:	cd bf       	out	0x3d, r28	; 61
    63b6:	de bf       	out	0x3e, r29	; 62
    63b8:	df 91       	pop	r29
    63ba:	cf 91       	pop	r28
    63bc:	1f 91       	pop	r17
    63be:	0f 91       	pop	r16
    63c0:	ff 90       	pop	r15
    63c2:	ef 90       	pop	r14
    63c4:	df 90       	pop	r13
    63c6:	cf 90       	pop	r12
    63c8:	08 95       	ret

000063ca <convertEpochToTimeString>:
/**
 *   Converts an epoch (seconds since 1900)  into a string with format "ddd dd-mon-yyyy hh:mm:ss zzz"
 */
#define THIRTY_YEARS 946684800
char* convertEpochToTimeString(time_t epoch, char* buf, size_t size)
 {
    63ca:	ef 92       	push	r14
    63cc:	ff 92       	push	r15
    63ce:	0f 93       	push	r16
    63d0:	1f 93       	push	r17
    63d2:	cf 93       	push	r28
    63d4:	df 93       	push	r29
    63d6:	cd b7       	in	r28, 0x3d	; 61
    63d8:	de b7       	in	r29, 0x3e	; 62
    63da:	60 97       	sbiw	r28, 0x10	; 16
    63dc:	cd bf       	out	0x3d, r28	; 61
    63de:	de bf       	out	0x3e, r29	; 62
    63e0:	8a 01       	movw	r16, r20
    63e2:	79 01       	movw	r14, r18
   struct tm  ts;
	time_t t = epoch - THIRTY_YEARS;
    63e4:	dc 01       	movw	r26, r24
    63e6:	cb 01       	movw	r24, r22
    63e8:	80 58       	subi	r24, 0x80	; 128
    63ea:	93 44       	sbci	r25, 0x43	; 67
    63ec:	ad 46       	sbci	r26, 0x6D	; 109
    63ee:	b8 43       	sbci	r27, 0x38	; 56
    63f0:	8d 87       	std	Y+13, r24	; 0x0d
    63f2:	9e 87       	std	Y+14, r25	; 0x0e
    63f4:	af 87       	std	Y+15, r26	; 0x0f
    63f6:	b8 8b       	std	Y+16, r27	; 0x10

    // Format time, "ddd dd-mon-yyyy hh:mm:ss zzz"
    ts = *localtime(&t);
    63f8:	ce 01       	movw	r24, r28
    63fa:	0d 96       	adiw	r24, 0x0d	; 13
    63fc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <localtime>
    6400:	fc 01       	movw	r30, r24
    6402:	9c e0       	ldi	r25, 0x0C	; 12
    6404:	de 01       	movw	r26, r28
    6406:	11 96       	adiw	r26, 0x01	; 1
    6408:	01 90       	ld	r0, Z+
    640a:	0d 92       	st	X+, r0
    640c:	9a 95       	dec	r25
    640e:	e1 f7       	brne	.-8      	; 0x6408 <convertEpochToTimeString+0x3e>
    strftime(buf, size, "%a %d-%b-%Y %H:%M:%S", &ts);
    6410:	9e 01       	movw	r18, r28
    6412:	2f 5f       	subi	r18, 0xFF	; 255
    6414:	3f 4f       	sbci	r19, 0xFF	; 255
    6416:	43 eb       	ldi	r20, 0xB3	; 179
    6418:	54 e4       	ldi	r21, 0x44	; 68
    641a:	b7 01       	movw	r22, r14
    641c:	c8 01       	movw	r24, r16
    641e:	0e 94 99 02 	call	0x532	; 0x532 <strftime>
   return buf;
 }
    6422:	c8 01       	movw	r24, r16
    6424:	60 96       	adiw	r28, 0x10	; 16
    6426:	cd bf       	out	0x3d, r28	; 61
    6428:	de bf       	out	0x3e, r29	; 62
    642a:	df 91       	pop	r29
    642c:	cf 91       	pop	r28
    642e:	1f 91       	pop	r17
    6430:	0f 91       	pop	r16
    6432:	ff 90       	pop	r15
    6434:	ef 90       	pop	r14
    6436:	08 95       	ret

00006438 <_ZN13EepromManagerC1Ev>:
extern uint16_t g_80m_power_level_mW;

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
    6438:	08 95       	ret

0000643a <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
    643a:	08 95       	ret

0000643c <_Z21avr_eeprom_write_bytejh>:
#include <avr/io.h>

typedef uint16_t eeprom_addr_t;

// to write
void avr_eeprom_write_byte(eeprom_addr_t index, uint8_t in) {
    643c:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    643e:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    6442:	91 fd       	sbrc	r25, 1
    6444:	fc cf       	rjmp	.-8      	; 0x643e <_Z21avr_eeprom_write_bytejh+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    6446:	8d e9       	ldi	r24, 0x9D	; 157
    6448:	93 e1       	ldi	r25, 0x13	; 19
    644a:	84 bf       	out	0x34, r24	; 52
    644c:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    6450:	f9 01       	movw	r30, r18
    6452:	fc 5e       	subi	r31, 0xEC	; 236
    6454:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    6456:	90 e0       	ldi	r25, 0x00	; 0
    6458:	84 bf       	out	0x34, r24	; 52
    645a:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    645e:	08 95       	ret

00006460 <_Z21avr_eeprom_write_wordjj>:
}

void avr_eeprom_write_word(eeprom_addr_t index, uint16_t in) {
    6460:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    6462:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    6466:	91 fd       	sbrc	r25, 1
    6468:	fc cf       	rjmp	.-8      	; 0x6462 <_Z21avr_eeprom_write_wordjj+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    646a:	8d e9       	ldi	r24, 0x9D	; 157
    646c:	93 e1       	ldi	r25, 0x13	; 19
    646e:	84 bf       	out	0x34, r24	; 52
    6470:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint16_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    6474:	f9 01       	movw	r30, r18
    6476:	fc 5e       	subi	r31, 0xEC	; 236
    6478:	60 83       	st	Z, r22
    647a:	71 83       	std	Z+1, r23	; 0x01
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    647c:	90 e0       	ldi	r25, 0x00	; 0
    647e:	84 bf       	out	0x34, r24	; 52
    6480:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    6484:	08 95       	ret

00006486 <_Z22avr_eeprom_write_dwordjm>:
}

void avr_eeprom_write_dword(eeprom_addr_t index, uint32_t in) {
    6486:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    6488:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    648c:	91 fd       	sbrc	r25, 1
    648e:	fc cf       	rjmp	.-8      	; 0x6488 <_Z22avr_eeprom_write_dwordjm+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    6490:	8d e9       	ldi	r24, 0x9D	; 157
    6492:	93 e1       	ldi	r25, 0x13	; 19
    6494:	84 bf       	out	0x34, r24	; 52
    6496:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint32_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    649a:	f9 01       	movw	r30, r18
    649c:	fc 5e       	subi	r31, 0xEC	; 236
    649e:	40 83       	st	Z, r20
    64a0:	51 83       	std	Z+1, r21	; 0x01
    64a2:	62 83       	std	Z+2, r22	; 0x02
    64a4:	73 83       	std	Z+3, r23	; 0x03
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	84 bf       	out	0x34, r24	; 52
    64aa:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    64ae:	08 95       	ret

000064b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
}

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
    64b0:	0f 93       	push	r16
    64b2:	1f 93       	push	r17
    64b4:	cf 93       	push	r28
    64b6:	df 93       	push	r29
	if(!val)
    64b8:	41 15       	cp	r20, r1
    64ba:	51 05       	cpc	r21, r1
    64bc:	09 f4       	brne	.+2      	; 0x64c0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
    64be:	7c c0       	rjmp	.+248    	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
	{
		return;
	}

	switch(v)
    64c0:	86 2f       	mov	r24, r22
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	84 33       	cpi	r24, 0x34	; 52
    64c6:	91 05       	cpc	r25, r1
    64c8:	08 f0       	brcs	.+2      	; 0x64cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x1c>
    64ca:	76 c0       	rjmp	.+236    	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
    64cc:	ea 01       	movw	r28, r20
    64ce:	fc 01       	movw	r30, r24
    64d0:	eb 57       	subi	r30, 0x7B	; 123
    64d2:	ff 4f       	sbci	r31, 0xFF	; 255
    64d4:	0c 94 3e 4e 	jmp	0x9c7c	; 0x9c7c <__tablejump2__>
	{
		case Frequency:
		{
			avr_eeprom_write_dword(Frequency, *(uint32_t*)val);
    64d8:	48 81       	ld	r20, Y
    64da:	59 81       	ldd	r21, Y+1	; 0x01
    64dc:	6a 81       	ldd	r22, Y+2	; 0x02
    64de:	7b 81       	ldd	r23, Y+3	; 0x03
    64e0:	8b e2       	ldi	r24, 0x2B	; 43
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	0e 94 43 32 	call	0x6486	; 0x6486 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    64e8:	67 c0       	rjmp	.+206    	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RTTY_offset:
		{
			avr_eeprom_write_dword(RTTY_offset, *(uint32_t*)val);
    64ea:	48 81       	ld	r20, Y
    64ec:	59 81       	ldd	r21, Y+1	; 0x01
    64ee:	6a 81       	ldd	r22, Y+2	; 0x02
    64f0:	7b 81       	ldd	r23, Y+3	; 0x03
    64f2:	8f e2       	ldi	r24, 0x2F	; 47
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	0e 94 43 32 	call	0x6486	; 0x6486 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    64fa:	5e c0       	rjmp	.+188    	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RF_Power:
		{
			avr_eeprom_write_word(RF_Power, *(uint32_t*)val);			
    64fc:	68 81       	ld	r22, Y
    64fe:	79 81       	ldd	r23, Y+1	; 0x01
    6500:	83 e3       	ldi	r24, 0x33	; 51
    6502:	90 e0       	ldi	r25, 0x00	; 0
    6504:	0e 94 30 32 	call	0x6460	; 0x6460 <_Z21avr_eeprom_write_wordjj>
		}
		break;
    6508:	57 c0       	rjmp	.+174    	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
    650a:	8a 01       	movw	r16, r20
    650c:	0f 5f       	subi	r16, 0xFF	; 255
    650e:	1f 4f       	sbci	r17, 0xFF	; 255
    6510:	68 81       	ld	r22, Y
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;
    6512:	8a e0       	ldi	r24, 0x0A	; 10
    6514:	90 e0       	ldi	r25, 0x00	; 0

			while(c)
    6516:	66 23       	and	r22, r22
    6518:	51 f0       	breq	.+20     	; 0x652e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x7e>
			{
				avr_eeprom_write_byte(j++, c);
    651a:	ec 01       	movw	r28, r24
    651c:	21 96       	adiw	r28, 0x01	; 1
    651e:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>
				c = *char_addr++;
    6522:	f8 01       	movw	r30, r16
    6524:	60 81       	ld	r22, Z
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
			{
				avr_eeprom_write_byte(j++, c);
    6526:	ce 01       	movw	r24, r28
				c = *char_addr++;
    6528:	0f 5f       	subi	r16, 0xFF	; 255
    652a:	1f 4f       	sbci	r17, 0xFF	; 255
			char* char_addr = (char*)val;
			char c = *char_addr++;
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
    652c:	f4 cf       	rjmp	.-24     	; 0x6516 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x66>
			{
				avr_eeprom_write_byte(j++, c);
				c = *char_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    652e:	60 e0       	ldi	r22, 0x00	; 0
    6530:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6534:	41 c0       	rjmp	.+130    	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
    6536:	8a 01       	movw	r16, r20
    6538:	0f 5f       	subi	r16, 0xFF	; 255
    653a:	1f 4f       	sbci	r17, 0xFF	; 255
    653c:	68 81       	ld	r22, Y
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
    653e:	8f e1       	ldi	r24, 0x1F	; 31
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    6540:	66 23       	and	r22, r22
    6542:	59 f0       	breq	.+22     	; 0x655a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				avr_eeprom_write_byte(j++, c);
    6544:	c1 e0       	ldi	r28, 0x01	; 1
    6546:	c8 0f       	add	r28, r24
    6548:	90 e0       	ldi	r25, 0x00	; 0
    654a:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>
				c = *uint8_addr++;
    654e:	f8 01       	movw	r30, r16
    6550:	60 81       	ld	r22, Z
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
			{
				avr_eeprom_write_byte(j++, c);
    6552:	8c 2f       	mov	r24, r28
				c = *uint8_addr++;
    6554:	0f 5f       	subi	r16, 0xFF	; 255
    6556:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    6558:	f3 cf       	rjmp	.-26     	; 0x6540 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x90>
			{
				avr_eeprom_write_byte(j++, c);
				c = *uint8_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    655a:	60 e0       	ldi	r22, 0x00	; 0
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6562:	2a c0       	rjmp	.+84     	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Id_codespeed:
		{
			avr_eeprom_write_byte(Id_codespeed, *(uint8_t*)val);
    6564:	68 81       	ld	r22, Y
    6566:	88 e2       	ldi	r24, 0x28	; 40
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>
		}
		break;
    656e:	24 c0       	rjmp	.+72     	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Fox_setting:
		{
			avr_eeprom_write_byte(Fox_setting, *(uint8_t*)val);
    6570:	68 81       	ld	r22, Y
    6572:	89 e2       	ldi	r24, 0x29	; 41
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>
		}
		break;
    657a:	1e c0       	rjmp	.+60     	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_start_epoch:
		{
			avr_eeprom_write_dword(Event_start_epoch, *(uint32_t*)val);
    657c:	48 81       	ld	r20, Y
    657e:	59 81       	ldd	r21, Y+1	; 0x01
    6580:	6a 81       	ldd	r22, Y+2	; 0x02
    6582:	7b 81       	ldd	r23, Y+3	; 0x03
    6584:	82 e0       	ldi	r24, 0x02	; 2
    6586:	90 e0       	ldi	r25, 0x00	; 0
    6588:	0e 94 43 32 	call	0x6486	; 0x6486 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    658c:	15 c0       	rjmp	.+42     	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_finish_epoch:
		{
			avr_eeprom_write_dword(Event_finish_epoch, *(uint32_t*)val);
    658e:	48 81       	ld	r20, Y
    6590:	59 81       	ldd	r21, Y+1	; 0x01
    6592:	6a 81       	ldd	r22, Y+2	; 0x02
    6594:	7b 81       	ldd	r23, Y+3	; 0x03
    6596:	86 e0       	ldi	r24, 0x06	; 6
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	0e 94 43 32 	call	0x6486	; 0x6486 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    659e:	0c c0       	rjmp	.+24     	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Utc_offset:
		{
			avr_eeprom_write_byte(Utc_offset, *(uint8_t*)val);
    65a0:	68 81       	ld	r22, Y
    65a2:	8a e2       	ldi	r24, 0x2A	; 42
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>
		}
		break;
    65aa:	06 c0       	rjmp	.+12     	; 0x65b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Eeprom_initialization_flag:
		{
			avr_eeprom_write_word(Eeprom_initialization_flag, *(uint16_t*)val);
    65ac:	68 81       	ld	r22, Y
    65ae:	79 81       	ldd	r23, Y+1	; 0x01
    65b0:	80 e0       	ldi	r24, 0x00	; 0
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	0e 94 30 32 	call	0x6460	; 0x6460 <_Z21avr_eeprom_write_wordjj>
		{

		}
		break;
	}
}
    65b8:	df 91       	pop	r29
    65ba:	cf 91       	pop	r28
    65bc:	1f 91       	pop	r17
    65be:	0f 91       	pop	r16
    65c0:	08 95       	ret

000065c2 <_ZN13EepromManager13saveAllEEPROMEv>:

/** 
 * Store any changed EEPROM variables
 */
void EepromManager::saveAllEEPROM(void)
{
    65c2:	ef 92       	push	r14
    65c4:	ff 92       	push	r15
    65c6:	0f 93       	push	r16
    65c8:	1f 93       	push	r17
    65ca:	cf 93       	push	r28
    65cc:	df 93       	push	r29
    65ce:	7c 01       	movw	r14, r24
	uint16_t i;
	
	if(g_id_codespeed != eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)))
    65d0:	88 e2       	ldi	r24, 0x28	; 40
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    65d8:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <g_id_codespeed>
    65dc:	89 17       	cp	r24, r25
    65de:	31 f0       	breq	.+12     	; 0x65ec <_ZN13EepromManager13saveAllEEPROMEv+0x2a>
	{
		updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    65e0:	4b e0       	ldi	r20, 0x0B	; 11
    65e2:	50 e4       	ldi	r21, 0x40	; 64
    65e4:	68 e2       	ldi	r22, 0x28	; 40
    65e6:	c7 01       	movw	r24, r14
    65e8:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_fox != eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)))
    65ec:	89 e2       	ldi	r24, 0x29	; 41
    65ee:	90 e0       	ldi	r25, 0x00	; 0
    65f0:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    65f4:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <g_fox>
    65f8:	89 17       	cp	r24, r25
    65fa:	31 f0       	breq	.+12     	; 0x6608 <_ZN13EepromManager13saveAllEEPROMEv+0x46>
	{
		updateEEPROMVar(Fox_setting, (void*)&g_fox);
    65fc:	4b e1       	ldi	r20, 0x1B	; 27
    65fe:	50 e4       	ldi	r21, 0x40	; 64
    6600:	69 e2       	ldi	r22, 0x29	; 41
    6602:	c7 01       	movw	r24, r14
    6604:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_start_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch)))
    6608:	82 e0       	ldi	r24, 0x02	; 2
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	0e 94 99 54 	call	0xa932	; 0xa932 <eeprom_read_dword>
    6610:	00 91 76 47 	lds	r16, 0x4776	; 0x804776 <g_event_start_epoch>
    6614:	10 91 77 47 	lds	r17, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    6618:	20 91 78 47 	lds	r18, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    661c:	30 91 79 47 	lds	r19, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    6620:	60 17       	cp	r22, r16
    6622:	71 07       	cpc	r23, r17
    6624:	82 07       	cpc	r24, r18
    6626:	93 07       	cpc	r25, r19
    6628:	31 f0       	breq	.+12     	; 0x6636 <_ZN13EepromManager13saveAllEEPROMEv+0x74>
	{
		updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    662a:	46 e7       	ldi	r20, 0x76	; 118
    662c:	57 e4       	ldi	r21, 0x47	; 71
    662e:	62 e0       	ldi	r22, 0x02	; 2
    6630:	c7 01       	movw	r24, r14
    6632:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_finish_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch)))
    6636:	86 e0       	ldi	r24, 0x06	; 6
    6638:	90 e0       	ldi	r25, 0x00	; 0
    663a:	0e 94 99 54 	call	0xa932	; 0xa932 <eeprom_read_dword>
    663e:	00 91 7a 47 	lds	r16, 0x477A	; 0x80477a <g_event_finish_epoch>
    6642:	10 91 7b 47 	lds	r17, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    6646:	20 91 7c 47 	lds	r18, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    664a:	30 91 7d 47 	lds	r19, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    664e:	60 17       	cp	r22, r16
    6650:	71 07       	cpc	r23, r17
    6652:	82 07       	cpc	r24, r18
    6654:	93 07       	cpc	r25, r19
    6656:	31 f0       	breq	.+12     	; 0x6664 <_ZN13EepromManager13saveAllEEPROMEv+0xa2>
	{
		updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    6658:	4a e7       	ldi	r20, 0x7A	; 122
    665a:	57 e4       	ldi	r21, 0x47	; 71
    665c:	66 e0       	ldi	r22, 0x06	; 6
    665e:	c7 01       	movw	r24, r14
    6660:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
    6664:	c0 91 93 47 	lds	r28, 0x4793	; 0x804793 <g_utc_offset>
    6668:	0c 2e       	mov	r0, r28
    666a:	00 0c       	add	r0, r0
    666c:	dd 0b       	sbc	r29, r29
    666e:	8a e2       	ldi	r24, 0x2A	; 42
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    6676:	90 e0       	ldi	r25, 0x00	; 0
    6678:	c8 17       	cp	r28, r24
    667a:	d9 07       	cpc	r29, r25
    667c:	31 f0       	breq	.+12     	; 0x668a <_ZN13EepromManager13saveAllEEPROMEv+0xc8>
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    667e:	43 e9       	ldi	r20, 0x93	; 147
    6680:	57 e4       	ldi	r21, 0x47	; 71
    6682:	6a e2       	ldi	r22, 0x2A	; 42
    6684:	c7 01       	movw	r24, r14
    6686:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    668a:	c0 e0       	ldi	r28, 0x00	; 0
    668c:	d0 e0       	ldi	r29, 0x00	; 0
    668e:	c4 31       	cpi	r28, 0x14	; 20
    6690:	d1 05       	cpc	r29, r1
    6692:	a0 f4       	brcc	.+40     	; 0x66bc <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	{
		if(g_messages_text[STATION_ID][i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i]))))
    6694:	fe 01       	movw	r30, r28
    6696:	e8 5b       	subi	r30, 0xB8	; 184
    6698:	f8 4b       	sbci	r31, 0xB8	; 184
    669a:	15 89       	ldd	r17, Z+21	; 0x15
    669c:	ce 01       	movw	r24, r28
    669e:	86 5f       	subi	r24, 0xF6	; 246
    66a0:	9f 4f       	sbci	r25, 0xFF	; 255
    66a2:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    66a6:	18 17       	cp	r17, r24
    66a8:	39 f0       	breq	.+14     	; 0x66b8 <_ZN13EepromManager13saveAllEEPROMEv+0xf6>
		{
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    66aa:	4d e5       	ldi	r20, 0x5D	; 93
    66ac:	57 e4       	ldi	r21, 0x47	; 71
    66ae:	6a e0       	ldi	r22, 0x0A	; 10
    66b0:	c7 01       	movw	r24, r14
    66b2:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    66b6:	02 c0       	rjmp	.+4      	; 0x66bc <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    66b8:	21 96       	adiw	r28, 0x01	; 1
    66ba:	e9 cf       	rjmp	.-46     	; 0x668e <_ZN13EepromManager13saveAllEEPROMEv+0xcc>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    66bc:	c0 e0       	ldi	r28, 0x00	; 0
    66be:	d0 e0       	ldi	r29, 0x00	; 0
    66c0:	c8 30       	cpi	r28, 0x08	; 8
    66c2:	d1 05       	cpc	r29, r1
    66c4:	a0 f4       	brcc	.+40     	; 0x66ee <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
	{
		if(g_unlockCode[i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i]))))
    66c6:	fe 01       	movw	r30, r28
    66c8:	ec 56       	subi	r30, 0x6C	; 108
    66ca:	f8 4b       	sbci	r31, 0xB8	; 184
    66cc:	10 81       	ld	r17, Z
    66ce:	ce 01       	movw	r24, r28
    66d0:	81 5e       	subi	r24, 0xE1	; 225
    66d2:	9f 4f       	sbci	r25, 0xFF	; 255
    66d4:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    66d8:	18 17       	cp	r17, r24
    66da:	39 f0       	breq	.+14     	; 0x66ea <_ZN13EepromManager13saveAllEEPROMEv+0x128>
		{
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    66dc:	44 e9       	ldi	r20, 0x94	; 148
    66de:	57 e4       	ldi	r21, 0x47	; 71
    66e0:	6f e1       	ldi	r22, 0x1F	; 31
    66e2:	c7 01       	movw	r24, r14
    66e4:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    66e8:	02 c0       	rjmp	.+4      	; 0x66ee <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    66ea:	21 96       	adiw	r28, 0x01	; 1
    66ec:	e9 cf       	rjmp	.-46     	; 0x66c0 <_ZN13EepromManager13saveAllEEPROMEv+0xfe>
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
			break;
		}
	}
	
	if(g_80m_frequency != eeprom_read_dword(&(EepromManager::ee_vars.frequency)))
    66ee:	8b e2       	ldi	r24, 0x2B	; 43
    66f0:	90 e0       	ldi	r25, 0x00	; 0
    66f2:	0e 94 99 54 	call	0xa932	; 0xa932 <eeprom_read_dword>
    66f6:	00 91 2b 40 	lds	r16, 0x402B	; 0x80402b <g_80m_frequency>
    66fa:	10 91 2c 40 	lds	r17, 0x402C	; 0x80402c <g_80m_frequency+0x1>
    66fe:	20 91 2d 40 	lds	r18, 0x402D	; 0x80402d <g_80m_frequency+0x2>
    6702:	30 91 2e 40 	lds	r19, 0x402E	; 0x80402e <g_80m_frequency+0x3>
    6706:	60 17       	cp	r22, r16
    6708:	71 07       	cpc	r23, r17
    670a:	82 07       	cpc	r24, r18
    670c:	93 07       	cpc	r25, r19
    670e:	31 f0       	breq	.+12     	; 0x671c <_ZN13EepromManager13saveAllEEPROMEv+0x15a>
	{
		updateEEPROMVar(Frequency, (void*)&g_80m_frequency);
    6710:	4b e2       	ldi	r20, 0x2B	; 43
    6712:	50 e4       	ldi	r21, 0x40	; 64
    6714:	6b e2       	ldi	r22, 0x2B	; 43
    6716:	c7 01       	movw	r24, r14
    6718:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_rtty_offset != eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset)))
    671c:	8f e2       	ldi	r24, 0x2F	; 47
    671e:	90 e0       	ldi	r25, 0x00	; 0
    6720:	0e 94 99 54 	call	0xa932	; 0xa932 <eeprom_read_dword>
    6724:	00 91 31 40 	lds	r16, 0x4031	; 0x804031 <g_rtty_offset>
    6728:	10 91 32 40 	lds	r17, 0x4032	; 0x804032 <g_rtty_offset+0x1>
    672c:	20 91 33 40 	lds	r18, 0x4033	; 0x804033 <g_rtty_offset+0x2>
    6730:	30 91 34 40 	lds	r19, 0x4034	; 0x804034 <g_rtty_offset+0x3>
    6734:	60 17       	cp	r22, r16
    6736:	71 07       	cpc	r23, r17
    6738:	82 07       	cpc	r24, r18
    673a:	93 07       	cpc	r25, r19
    673c:	31 f0       	breq	.+12     	; 0x674a <_ZN13EepromManager13saveAllEEPROMEv+0x188>
	{
		updateEEPROMVar(RTTY_offset, (void*)&g_rtty_offset);
    673e:	41 e3       	ldi	r20, 0x31	; 49
    6740:	50 e4       	ldi	r21, 0x40	; 64
    6742:	6f e2       	ldi	r22, 0x2F	; 47
    6744:	c7 01       	movw	r24, r14
    6746:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
    674a:	83 e3       	ldi	r24, 0x33	; 51
    674c:	90 e0       	ldi	r25, 0x00	; 0
    674e:	0e 94 a0 54 	call	0xa940	; 0xa940 <eeprom_read_word>
    6752:	20 91 2f 40 	lds	r18, 0x402F	; 0x80402f <g_80m_power_level_mW>
    6756:	30 91 30 40 	lds	r19, 0x4030	; 0x804030 <g_80m_power_level_mW+0x1>
    675a:	82 17       	cp	r24, r18
    675c:	93 07       	cpc	r25, r19
    675e:	31 f0       	breq	.+12     	; 0x676c <_ZN13EepromManager13saveAllEEPROMEv+0x1aa>
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
    6760:	4f e2       	ldi	r20, 0x2F	; 47
    6762:	50 e4       	ldi	r21, 0x40	; 64
    6764:	63 e3       	ldi	r22, 0x33	; 51
    6766:	c7 01       	movw	r24, r14
    6768:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
}
    676c:	df 91       	pop	r29
    676e:	cf 91       	pop	r28
    6770:	1f 91       	pop	r17
    6772:	0f 91       	pop	r16
    6774:	ff 90       	pop	r15
    6776:	ef 90       	pop	r14
    6778:	08 95       	ret

0000677a <_ZN13EepromManager11readNonVolsEv>:


bool EepromManager::readNonVols(void)
{
    677a:	cf 93       	push	r28
    677c:	df 93       	push	r29
	bool failure = true;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    677e:	80 e0       	ldi	r24, 0x00	; 0
    6780:	90 e0       	ldi	r25, 0x00	; 0
    6782:	0e 94 a0 54 	call	0xa940	; 0xa940 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    6786:	8e 3c       	cpi	r24, 0xCE	; 206
    6788:	91 05       	cpc	r25, r1
    678a:	09 f0       	breq	.+2      	; 0x678e <_ZN13EepromManager11readNonVolsEv+0x14>
    678c:	dc c0       	rjmp	.+440    	; 0x6946 <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    678e:	88 e2       	ldi	r24, 0x28	; 40
    6790:	90 e0       	ldi	r25, 0x00	; 0
    6792:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    6796:	85 31       	cpi	r24, 0x15	; 21
    6798:	20 f4       	brcc	.+8      	; 0x67a2 <_ZN13EepromManager11readNonVolsEv+0x28>
    679a:	85 30       	cpi	r24, 0x05	; 5
    679c:	18 f4       	brcc	.+6      	; 0x67a4 <_ZN13EepromManager11readNonVolsEv+0x2a>
    679e:	85 e0       	ldi	r24, 0x05	; 5
    67a0:	01 c0       	rjmp	.+2      	; 0x67a4 <_ZN13EepromManager11readNonVolsEv+0x2a>
    67a2:	84 e1       	ldi	r24, 0x14	; 20
    67a4:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    67a8:	89 e2       	ldi	r24, 0x29	; 41
    67aa:	90 e0       	ldi	r25, 0x00	; 0
    67ac:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    67b0:	82 31       	cpi	r24, 0x12	; 18
    67b2:	08 f0       	brcs	.+2      	; 0x67b6 <_ZN13EepromManager11readNonVolsEv+0x3c>
    67b4:	81 e1       	ldi	r24, 0x11	; 17
    67b6:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    67ba:	82 e0       	ldi	r24, 0x02	; 2
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	0e 94 99 54 	call	0xa932	; 0xa932 <eeprom_read_dword>
    67c2:	60 93 76 47 	sts	0x4776, r22	; 0x804776 <g_event_start_epoch>
    67c6:	70 93 77 47 	sts	0x4777, r23	; 0x804777 <g_event_start_epoch+0x1>
    67ca:	80 93 78 47 	sts	0x4778, r24	; 0x804778 <g_event_start_epoch+0x2>
    67ce:	90 93 79 47 	sts	0x4779, r25	; 0x804779 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    67d2:	86 e0       	ldi	r24, 0x06	; 6
    67d4:	90 e0       	ldi	r25, 0x00	; 0
    67d6:	0e 94 99 54 	call	0xa932	; 0xa932 <eeprom_read_dword>
    67da:	60 93 7a 47 	sts	0x477A, r22	; 0x80477a <g_event_finish_epoch>
    67de:	70 93 7b 47 	sts	0x477B, r23	; 0x80477b <g_event_finish_epoch+0x1>
    67e2:	80 93 7c 47 	sts	0x477C, r24	; 0x80477c <g_event_finish_epoch+0x2>
    67e6:	90 93 7d 47 	sts	0x477D, r25	; 0x80477d <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    67ea:	8a e2       	ldi	r24, 0x2A	; 42
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    67f2:	80 93 93 47 	sts	0x4793, r24	; 0x804793 <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    67f6:	c0 e0       	ldi	r28, 0x00	; 0
    67f8:	d0 e0       	ldi	r29, 0x00	; 0
    67fa:	c4 31       	cpi	r28, 0x14	; 20
    67fc:	d1 05       	cpc	r29, r1
    67fe:	58 f4       	brcc	.+22     	; 0x6816 <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    6800:	ce 01       	movw	r24, r28
    6802:	86 5f       	subi	r24, 0xF6	; 246
    6804:	9f 4f       	sbci	r25, 0xFF	; 255
    6806:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    680a:	fe 01       	movw	r30, r28
    680c:	e8 5b       	subi	r30, 0xB8	; 184
    680e:	f8 4b       	sbci	r31, 0xB8	; 184
    6810:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    6812:	81 11       	cpse	r24, r1
    6814:	03 c0       	rjmp	.+6      	; 0x681c <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    6816:	c0 e0       	ldi	r28, 0x00	; 0
    6818:	d0 e0       	ldi	r29, 0x00	; 0
    681a:	02 c0       	rjmp	.+4      	; 0x6820 <_ZN13EepromManager11readNonVolsEv+0xa6>
    681c:	21 96       	adiw	r28, 0x01	; 1
    681e:	ed cf       	rjmp	.-38     	; 0x67fa <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6820:	c8 30       	cpi	r28, 0x08	; 8
    6822:	d1 05       	cpc	r29, r1
    6824:	68 f4       	brcc	.+26     	; 0x6840 <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    6826:	ce 01       	movw	r24, r28
    6828:	81 5e       	subi	r24, 0xE1	; 225
    682a:	9f 4f       	sbci	r25, 0xFF	; 255
    682c:	0e 94 91 54 	call	0xa922	; 0xa922 <eeprom_read_byte>
    6830:	fe 01       	movw	r30, r28
    6832:	ec 56       	subi	r30, 0x6C	; 108
    6834:	f8 4b       	sbci	r31, 0xB8	; 184
    6836:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    6838:	88 23       	and	r24, r24
    683a:	11 f0       	breq	.+4      	; 0x6840 <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    683c:	21 96       	adiw	r28, 0x01	; 1
    683e:	f0 cf       	rjmp	.-32     	; 0x6820 <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    6840:	8b e2       	ldi	r24, 0x2B	; 43
    6842:	90 e0       	ldi	r25, 0x00	; 0
    6844:	0e 94 99 54 	call	0xa932	; 0xa932 <eeprom_read_dword>
    6848:	61 30       	cpi	r22, 0x01	; 1
    684a:	29 e0       	ldi	r18, 0x09	; 9
    684c:	72 07       	cpc	r23, r18
    684e:	2d e3       	ldi	r18, 0x3D	; 61
    6850:	82 07       	cpc	r24, r18
    6852:	91 05       	cpc	r25, r1
    6854:	60 f4       	brcc	.+24     	; 0x686e <_ZN13EepromManager11readNonVolsEv+0xf4>
    6856:	60 3e       	cpi	r22, 0xE0	; 224
    6858:	27 e6       	ldi	r18, 0x67	; 103
    685a:	72 07       	cpc	r23, r18
    685c:	25 e3       	ldi	r18, 0x35	; 53
    685e:	82 07       	cpc	r24, r18
    6860:	91 05       	cpc	r25, r1
    6862:	50 f4       	brcc	.+20     	; 0x6878 <_ZN13EepromManager11readNonVolsEv+0xfe>
    6864:	40 ee       	ldi	r20, 0xE0	; 224
    6866:	37 e6       	ldi	r19, 0x67	; 103
    6868:	25 e3       	ldi	r18, 0x35	; 53
    686a:	80 e0       	ldi	r24, 0x00	; 0
    686c:	09 c0       	rjmp	.+18     	; 0x6880 <_ZN13EepromManager11readNonVolsEv+0x106>
    686e:	40 e0       	ldi	r20, 0x00	; 0
    6870:	39 e0       	ldi	r19, 0x09	; 9
    6872:	2d e3       	ldi	r18, 0x3D	; 61
    6874:	80 e0       	ldi	r24, 0x00	; 0
    6876:	04 c0       	rjmp	.+8      	; 0x6880 <_ZN13EepromManager11readNonVolsEv+0x106>
    6878:	46 2f       	mov	r20, r22
    687a:	37 2f       	mov	r19, r23
    687c:	28 2f       	mov	r18, r24
    687e:	89 2f       	mov	r24, r25
    6880:	40 93 2b 40 	sts	0x402B, r20	; 0x80402b <g_80m_frequency>
    6884:	30 93 2c 40 	sts	0x402C, r19	; 0x80402c <g_80m_frequency+0x1>
    6888:	20 93 2d 40 	sts	0x402D, r18	; 0x80402d <g_80m_frequency+0x2>
    688c:	80 93 2e 40 	sts	0x402E, r24	; 0x80402e <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    6890:	8f e2       	ldi	r24, 0x2F	; 47
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	0e 94 99 54 	call	0xa932	; 0xa932 <eeprom_read_dword>
    6898:	60 93 31 40 	sts	0x4031, r22	; 0x804031 <g_rtty_offset>
    689c:	70 93 32 40 	sts	0x4032, r23	; 0x804032 <g_rtty_offset+0x1>
    68a0:	80 93 33 40 	sts	0x4033, r24	; 0x804033 <g_rtty_offset+0x2>
    68a4:	90 93 34 40 	sts	0x4034, r25	; 0x804034 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    68a8:	83 e3       	ldi	r24, 0x33	; 51
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	0e 94 a0 54 	call	0xa940	; 0xa940 <eeprom_read_word>
    68b0:	89 38       	cpi	r24, 0x89	; 137
    68b2:	23 e1       	ldi	r18, 0x13	; 19
    68b4:	92 07       	cpc	r25, r18
    68b6:	18 f0       	brcs	.+6      	; 0x68be <_ZN13EepromManager11readNonVolsEv+0x144>
    68b8:	28 e8       	ldi	r18, 0x88	; 136
    68ba:	83 e1       	ldi	r24, 0x13	; 19
    68bc:	02 c0       	rjmp	.+4      	; 0x68c2 <_ZN13EepromManager11readNonVolsEv+0x148>
    68be:	28 2f       	mov	r18, r24
    68c0:	89 2f       	mov	r24, r25
    68c2:	20 93 2f 40 	sts	0x402F, r18	; 0x80402f <g_80m_power_level_mW>
    68c6:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    68ca:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    68ce:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    68d2:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    68d6:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    68da:	89 2b       	or	r24, r25
    68dc:	8a 2b       	or	r24, r26
    68de:	8b 2b       	or	r24, r27
    68e0:	b9 f0       	breq	.+46     	; 0x6910 <_ZN13EepromManager11readNonVolsEv+0x196>
    68e2:	40 91 7a 47 	lds	r20, 0x477A	; 0x80477a <g_event_finish_epoch>
    68e6:	50 91 7b 47 	lds	r21, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    68ea:	60 91 7c 47 	lds	r22, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    68ee:	70 91 7d 47 	lds	r23, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    68f2:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    68f6:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    68fa:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    68fe:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    6902:	84 17       	cp	r24, r20
    6904:	95 07       	cpc	r25, r21
    6906:	a6 07       	cpc	r26, r22
    6908:	b7 07       	cpc	r27, r23
    690a:	20 f4       	brcc	.+8      	; 0x6914 <_ZN13EepromManager11readNonVolsEv+0x19a>
    690c:	80 e0       	ldi	r24, 0x00	; 0
    690e:	03 c0       	rjmp	.+6      	; 0x6916 <_ZN13EepromManager11readNonVolsEv+0x19c>
    6910:	80 e0       	ldi	r24, 0x00	; 0
    6912:	01 c0       	rjmp	.+2      	; 0x6916 <_ZN13EepromManager11readNonVolsEv+0x19c>
    6914:	81 e0       	ldi	r24, 0x01	; 1
    6916:	88 23       	and	r24, r24
    6918:	c1 f0       	breq	.+48     	; 0x694a <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    691a:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <g_event_start_epoch>
    691e:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    6922:	a0 91 78 47 	lds	r26, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    6926:	b0 91 79 47 	lds	r27, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    692a:	80 58       	subi	r24, 0x80	; 128
    692c:	9e 4a       	sbci	r25, 0xAE	; 174
    692e:	ae 4f       	sbci	r26, 0xFE	; 254
    6930:	bf 4f       	sbci	r27, 0xFF	; 255
    6932:	80 93 7a 47 	sts	0x477A, r24	; 0x80477a <g_event_finish_epoch>
    6936:	90 93 7b 47 	sts	0x477B, r25	; 0x80477b <g_event_finish_epoch+0x1>
    693a:	a0 93 7c 47 	sts	0x477C, r26	; 0x80477c <g_event_finish_epoch+0x2>
    693e:	b0 93 7d 47 	sts	0x477D, r27	; 0x80477d <g_event_finish_epoch+0x3>
		}

		failure = false;
    6942:	80 e0       	ldi	r24, 0x00	; 0
    6944:	03 c0       	rjmp	.+6      	; 0x694c <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


bool EepromManager::readNonVols(void)
{
	bool failure = true;
    6946:	81 e0       	ldi	r24, 0x01	; 1
    6948:	01 c0       	rjmp	.+2      	; 0x694c <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = false;
    694a:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    694c:	df 91       	pop	r29
    694e:	cf 91       	pop	r28
    6950:	08 95       	ret

00006952 <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	bool EepromManager::initializeEEPROMVars(void)
	{
    6952:	ef 92       	push	r14
    6954:	ff 92       	push	r15
    6956:	0f 93       	push	r16
    6958:	1f 93       	push	r17
    695a:	cf 93       	push	r28
    695c:	df 93       	push	r29
		bool err = false;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    695e:	80 e0       	ldi	r24, 0x00	; 0
    6960:	90 e0       	ldi	r25, 0x00	; 0
    6962:	0e 94 a0 54 	call	0xa940	; 0xa940 <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    6966:	8e 3c       	cpi	r24, 0xCE	; 206
    6968:	91 05       	cpc	r25, r1
    696a:	09 f4       	brne	.+2      	; 0x696e <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    696c:	aa c0       	rjmp	.+340    	; 0x6ac2 <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    696e:	84 e1       	ldi	r24, 0x14	; 20
    6970:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    6974:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    6978:	88 e2       	ldi	r24, 0x28	; 40
    697a:	90 e0       	ldi	r25, 0x00	; 0
    697c:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    6980:	81 e0       	ldi	r24, 0x01	; 1
    6982:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    6986:	60 91 1b 40 	lds	r22, 0x401B	; 0x80401b <g_fox>
    698a:	89 e2       	ldi	r24, 0x29	; 41
    698c:	90 e0       	ldi	r25, 0x00	; 0
    698e:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    6992:	10 92 76 47 	sts	0x4776, r1	; 0x804776 <g_event_start_epoch>
    6996:	10 92 77 47 	sts	0x4777, r1	; 0x804777 <g_event_start_epoch+0x1>
    699a:	10 92 78 47 	sts	0x4778, r1	; 0x804778 <g_event_start_epoch+0x2>
    699e:	10 92 79 47 	sts	0x4779, r1	; 0x804779 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    69a2:	40 91 76 47 	lds	r20, 0x4776	; 0x804776 <g_event_start_epoch>
    69a6:	50 91 77 47 	lds	r21, 0x4777	; 0x804777 <g_event_start_epoch+0x1>
    69aa:	60 91 78 47 	lds	r22, 0x4778	; 0x804778 <g_event_start_epoch+0x2>
    69ae:	70 91 79 47 	lds	r23, 0x4779	; 0x804779 <g_event_start_epoch+0x3>
    69b2:	82 e0       	ldi	r24, 0x02	; 2
    69b4:	90 e0       	ldi	r25, 0x00	; 0
    69b6:	0e 94 43 32 	call	0x6486	; 0x6486 <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    69ba:	10 92 7a 47 	sts	0x477A, r1	; 0x80477a <g_event_finish_epoch>
    69be:	10 92 7b 47 	sts	0x477B, r1	; 0x80477b <g_event_finish_epoch+0x1>
    69c2:	10 92 7c 47 	sts	0x477C, r1	; 0x80477c <g_event_finish_epoch+0x2>
    69c6:	10 92 7d 47 	sts	0x477D, r1	; 0x80477d <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    69ca:	40 91 7a 47 	lds	r20, 0x477A	; 0x80477a <g_event_finish_epoch>
    69ce:	50 91 7b 47 	lds	r21, 0x477B	; 0x80477b <g_event_finish_epoch+0x1>
    69d2:	60 91 7c 47 	lds	r22, 0x477C	; 0x80477c <g_event_finish_epoch+0x2>
    69d6:	70 91 7d 47 	lds	r23, 0x477D	; 0x80477d <g_event_finish_epoch+0x3>
    69da:	86 e0       	ldi	r24, 0x06	; 6
    69dc:	90 e0       	ldi	r25, 0x00	; 0
    69de:	0e 94 43 32 	call	0x6486	; 0x6486 <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    69e2:	10 92 93 47 	sts	0x4793, r1	; 0x804793 <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    69e6:	60 91 93 47 	lds	r22, 0x4793	; 0x804793 <g_utc_offset>
    69ea:	8a e2       	ldi	r24, 0x2A	; 42
    69ec:	90 e0       	ldi	r25, 0x00	; 0
    69ee:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    69f2:	10 92 5d 47 	sts	0x475D, r1	; 0x80475d <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    69f6:	60 e0       	ldi	r22, 0x00	; 0
    69f8:	8a e0       	ldi	r24, 0x0A	; 10
    69fa:	90 e0       	ldi	r25, 0x00	; 0
    69fc:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    6a00:	e8 ec       	ldi	r30, 0xC8	; 200
    6a02:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6a04:	c0 e0       	ldi	r28, 0x00	; 0
    6a06:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    6a08:	8f e1       	ldi	r24, 0x1F	; 31
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6a0c:	c4 30       	cpi	r28, 0x04	; 4
    6a0e:	d1 05       	cpc	r29, r1
    6a10:	90 f4       	brcc	.+36     	; 0x6a36 <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    6a12:	df 01       	movw	r26, r30
    6a14:	2d 91       	ld	r18, X+
    6a16:	8d 01       	movw	r16, r26
    6a18:	de 01       	movw	r26, r28
    6a1a:	ac 56       	subi	r26, 0x6C	; 108
    6a1c:	b8 4b       	sbci	r27, 0xB8	; 184
    6a1e:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    6a20:	60 81       	ld	r22, Z
    6a22:	7c 01       	movw	r14, r24
    6a24:	bf ef       	ldi	r27, 0xFF	; 255
    6a26:	eb 1a       	sub	r14, r27
    6a28:	fb 0a       	sbc	r15, r27
    6a2a:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6a2e:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    6a30:	f8 01       	movw	r30, r16
    6a32:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6a34:	eb cf       	rjmp	.-42     	; 0x6a0c <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    6a36:	60 e0       	ldi	r22, 0x00	; 0
    6a38:	0e 94 1e 32 	call	0x643c	; 0x643c <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    6a3c:	cc 56       	subi	r28, 0x6C	; 108
    6a3e:	d8 4b       	sbci	r29, 0xB8	; 184
    6a40:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    6a42:	80 e2       	ldi	r24, 0x20	; 32
    6a44:	94 e0       	ldi	r25, 0x04	; 4
    6a46:	a6 e3       	ldi	r26, 0x36	; 54
    6a48:	b0 e0       	ldi	r27, 0x00	; 0
    6a4a:	80 93 2b 40 	sts	0x402B, r24	; 0x80402b <g_80m_frequency>
    6a4e:	90 93 2c 40 	sts	0x402C, r25	; 0x80402c <g_80m_frequency+0x1>
    6a52:	a0 93 2d 40 	sts	0x402D, r26	; 0x80402d <g_80m_frequency+0x2>
    6a56:	b0 93 2e 40 	sts	0x402E, r27	; 0x80402e <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    6a5a:	40 e2       	ldi	r20, 0x20	; 32
    6a5c:	54 e0       	ldi	r21, 0x04	; 4
    6a5e:	66 e3       	ldi	r22, 0x36	; 54
    6a60:	70 e0       	ldi	r23, 0x00	; 0
    6a62:	8b e2       	ldi	r24, 0x2B	; 43
    6a64:	90 e0       	ldi	r25, 0x00	; 0
    6a66:	0e 94 43 32 	call	0x6486	; 0x6486 <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    6a6a:	8a ea       	ldi	r24, 0xAA	; 170
    6a6c:	90 e0       	ldi	r25, 0x00	; 0
    6a6e:	a0 e0       	ldi	r26, 0x00	; 0
    6a70:	b0 e0       	ldi	r27, 0x00	; 0
    6a72:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_rtty_offset>
    6a76:	90 93 32 40 	sts	0x4032, r25	; 0x804032 <g_rtty_offset+0x1>
    6a7a:	a0 93 33 40 	sts	0x4033, r26	; 0x804033 <g_rtty_offset+0x2>
    6a7e:	b0 93 34 40 	sts	0x4034, r27	; 0x804034 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    6a82:	40 91 2b 40 	lds	r20, 0x402B	; 0x80402b <g_80m_frequency>
    6a86:	50 91 2c 40 	lds	r21, 0x402C	; 0x80402c <g_80m_frequency+0x1>
    6a8a:	60 91 2d 40 	lds	r22, 0x402D	; 0x80402d <g_80m_frequency+0x2>
    6a8e:	70 91 2e 40 	lds	r23, 0x402E	; 0x80402e <g_80m_frequency+0x3>
    6a92:	8b e2       	ldi	r24, 0x2B	; 43
    6a94:	90 e0       	ldi	r25, 0x00	; 0
    6a96:	0e 94 43 32 	call	0x6486	; 0x6486 <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    6a9a:	84 ef       	ldi	r24, 0xF4	; 244
    6a9c:	91 e0       	ldi	r25, 0x01	; 1
    6a9e:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_power_level_mW>
    6aa2:	90 93 30 40 	sts	0x4030, r25	; 0x804030 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    6aa6:	44 ef       	ldi	r20, 0xF4	; 244
    6aa8:	51 e0       	ldi	r21, 0x01	; 1
    6aaa:	60 e0       	ldi	r22, 0x00	; 0
    6aac:	70 e0       	ldi	r23, 0x00	; 0
    6aae:	83 e3       	ldi	r24, 0x33	; 51
    6ab0:	90 e0       	ldi	r25, 0x00	; 0
    6ab2:	0e 94 43 32 	call	0x6486	; 0x6486 <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    6ab6:	6e ec       	ldi	r22, 0xCE	; 206
    6ab8:	70 e0       	ldi	r23, 0x00	; 0
    6aba:	80 e0       	ldi	r24, 0x00	; 0
    6abc:	90 e0       	ldi	r25, 0x00	; 0
    6abe:	0e 94 30 32 	call	0x6460	; 0x6460 <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    6ac2:	80 e0       	ldi	r24, 0x00	; 0
    6ac4:	df 91       	pop	r29
    6ac6:	cf 91       	pop	r28
    6ac8:	1f 91       	pop	r17
    6aca:	0f 91       	pop	r16
    6acc:	ff 90       	pop	r15
    6ace:	ef 90       	pop	r14
    6ad0:	08 95       	ret

00006ad2 <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    6ad2:	ef 92       	push	r14
    6ad4:	ff 92       	push	r15
    6ad6:	0f 93       	push	r16
    6ad8:	1f 93       	push	r17
    6ada:	cf 93       	push	r28
    6adc:	df 93       	push	r29
    6ade:	e4 2e       	mov	r14, r20
    6ae0:	f5 2e       	mov	r15, r21
    6ae2:	d6 2f       	mov	r29, r22
    6ae4:	c7 2f       	mov	r28, r23
    6ae6:	00 93 c2 47 	sts	0x47C2, r16	; 0x8047c2 <_SAMPLING_FREQUENCY>
    6aea:	10 93 c3 47 	sts	0x47C3, r17	; 0x8047c3 <_SAMPLING_FREQUENCY+0x1>
    6aee:	20 93 c4 47 	sts	0x47C4, r18	; 0x8047c4 <_SAMPLING_FREQUENCY+0x2>
    6af2:	30 93 c5 47 	sts	0x47C5, r19	; 0x8047c5 <_SAMPLING_FREQUENCY+0x3>
    6af6:	20 e0       	ldi	r18, 0x00	; 0
    6af8:	30 e0       	ldi	r19, 0x00	; 0
    6afa:	41 e5       	ldi	r20, 0x51	; 81
    6afc:	53 e4       	ldi	r21, 0x43	; 67
    6afe:	6e 2d       	mov	r22, r14
    6b00:	7f 2d       	mov	r23, r15
    6b02:	8d 2f       	mov	r24, r29
    6b04:	9c 2f       	mov	r25, r28
    6b06:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <__gesf2>
    6b0a:	18 16       	cp	r1, r24
    6b0c:	8c f0       	brlt	.+34     	; 0x6b30 <_ZN8GoertzelC1Eff+0x5e>
    6b0e:	20 e0       	ldi	r18, 0x00	; 0
    6b10:	30 e0       	ldi	r19, 0x00	; 0
    6b12:	48 ec       	ldi	r20, 0xC8	; 200
    6b14:	52 e4       	ldi	r21, 0x42	; 66
    6b16:	6e 2d       	mov	r22, r14
    6b18:	7f 2d       	mov	r23, r15
    6b1a:	8d 2f       	mov	r24, r29
    6b1c:	9c 2f       	mov	r25, r28
    6b1e:	0e 94 b3 4b 	call	0x9766	; 0x9766 <__cmpsf2>
    6b22:	88 23       	and	r24, r24
    6b24:	4c f4       	brge	.+18     	; 0x6b38 <_ZN8GoertzelC1Eff+0x66>
    6b26:	e1 2c       	mov	r14, r1
    6b28:	f1 2c       	mov	r15, r1
    6b2a:	d8 ec       	ldi	r29, 0xC8	; 200
    6b2c:	c2 e4       	ldi	r28, 0x42	; 66
    6b2e:	04 c0       	rjmp	.+8      	; 0x6b38 <_ZN8GoertzelC1Eff+0x66>
    6b30:	e1 2c       	mov	r14, r1
    6b32:	f1 2c       	mov	r15, r1
    6b34:	d1 e5       	ldi	r29, 0x51	; 81
    6b36:	c3 e4       	ldi	r28, 0x43	; 67
    6b38:	6e 2d       	mov	r22, r14
    6b3a:	7f 2d       	mov	r23, r15
    6b3c:	8d 2f       	mov	r24, r29
    6b3e:	9c 2f       	mov	r25, r28
    6b40:	0e 94 2a 4c 	call	0x9854	; 0x9854 <__fixsfsi>
    6b44:	60 93 c0 47 	sts	0x47C0, r22	; 0x8047c0 <_N>
    6b48:	70 93 c1 47 	sts	0x47C1, r23	; 0x8047c1 <_N+0x1>
    6b4c:	80 91 c0 47 	lds	r24, 0x47C0	; 0x8047c0 <_N>
    6b50:	90 91 c1 47 	lds	r25, 0x47C1	; 0x8047c1 <_N+0x1>
    6b54:	88 0f       	add	r24, r24
    6b56:	99 1f       	adc	r25, r25
    6b58:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <malloc>
    6b5c:	80 93 bb 47 	sts	0x47BB, r24	; 0x8047bb <testData>
    6b60:	90 93 bc 47 	sts	0x47BC, r25	; 0x8047bc <testData+0x1>
    6b64:	df 91       	pop	r29
    6b66:	cf 91       	pop	r28
    6b68:	1f 91       	pop	r17
    6b6a:	0f 91       	pop	r16
    6b6c:	ff 90       	pop	r15
    6b6e:	ef 90       	pop	r14
    6b70:	08 95       	ret

00006b72 <_ZN8GoertzelD1Ev>:
    6b72:	80 91 bb 47 	lds	r24, 0x47BB	; 0x8047bb <testData>
    6b76:	90 91 bc 47 	lds	r25, 0x47BC	; 0x8047bc <testData+0x1>
    6b7a:	0e 94 08 4f 	call	0x9e10	; 0x9e10 <free>
    6b7e:	08 95       	ret

00006b80 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    6b80:	80 91 bd 47 	lds	r24, 0x47BD	; 0x8047bd <_samplesReady>
    6b84:	88 23       	and	r24, r24
    6b86:	19 f0       	breq	.+6      	; 0x6b8e <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    6b88:	80 91 bd 47 	lds	r24, 0x47BD	; 0x8047bd <_samplesReady>
    6b8c:	08 95       	ret
	}

	testData[_index] = data;
    6b8e:	e0 91 be 47 	lds	r30, 0x47BE	; 0x8047be <_index>
    6b92:	f0 91 bf 47 	lds	r31, 0x47BF	; 0x8047bf <_index+0x1>
    6b96:	ee 0f       	add	r30, r30
    6b98:	ff 1f       	adc	r31, r31
    6b9a:	80 91 bb 47 	lds	r24, 0x47BB	; 0x8047bb <testData>
    6b9e:	90 91 bc 47 	lds	r25, 0x47BC	; 0x8047bc <testData+0x1>
    6ba2:	e8 0f       	add	r30, r24
    6ba4:	f9 1f       	adc	r31, r25
    6ba6:	60 83       	st	Z, r22
    6ba8:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    6baa:	80 91 be 47 	lds	r24, 0x47BE	; 0x8047be <_index>
    6bae:	90 91 bf 47 	lds	r25, 0x47BF	; 0x8047bf <_index+0x1>
    6bb2:	01 96       	adiw	r24, 0x01	; 1
    6bb4:	80 93 be 47 	sts	0x47BE, r24	; 0x8047be <_index>
    6bb8:	90 93 bf 47 	sts	0x47BF, r25	; 0x8047bf <_index+0x1>
	if(_index >= _N)
    6bbc:	20 91 be 47 	lds	r18, 0x47BE	; 0x8047be <_index>
    6bc0:	30 91 bf 47 	lds	r19, 0x47BF	; 0x8047bf <_index+0x1>
    6bc4:	80 91 c0 47 	lds	r24, 0x47C0	; 0x8047c0 <_N>
    6bc8:	90 91 c1 47 	lds	r25, 0x47C1	; 0x8047c1 <_N+0x1>
    6bcc:	28 17       	cp	r18, r24
    6bce:	39 07       	cpc	r19, r25
    6bd0:	3c f0       	brlt	.+14     	; 0x6be0 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    6bd2:	10 92 be 47 	sts	0x47BE, r1	; 0x8047be <_index>
    6bd6:	10 92 bf 47 	sts	0x47BF, r1	; 0x8047bf <_index+0x1>
		_samplesReady = true;
    6bda:	81 e0       	ldi	r24, 0x01	; 1
    6bdc:	80 93 bd 47 	sts	0x47BD, r24	; 0x8047bd <_samplesReady>
	}

	return(_samplesReady);
    6be0:	80 91 bd 47 	lds	r24, 0x47BD	; 0x8047bd <_samplesReady>
}
    6be4:	08 95       	ret

00006be6 <_ZL11i2c_0_WaitWv>:

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
    6be6:	8c e2       	ldi	r24, 0x2C	; 44
    6be8:	91 e0       	ldi	r25, 0x01	; 1
    6bea:	80 93 1f 40 	sts	0x401F, r24	; 0x80401f <g_i2c0_timeout_ticks>
    6bee:	90 93 20 40 	sts	0x4020, r25	; 0x804020 <g_i2c0_timeout_ticks+0x1>
	PORTC_set_pin_pull_mode(3, PORT_PULL_UP);
}

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
    6bf2:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 300;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    6bf4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6bf8:	90 7c       	andi	r25, 0xC0	; 192
    6bfa:	31 f0       	breq	.+12     	; 0x6c08 <_ZL11i2c_0_WaitWv+0x22>
		{
			if(!(TWI0.MSTATUS & TWI_RXACK_bm))
    6bfc:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6c00:	84 fd       	sbrc	r24, 4
    6c02:	07 c0       	rjmp	.+14     	; 0x6c12 <_ZL11i2c_0_WaitWv+0x2c>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    6c04:	81 e0       	ldi	r24, 0x01	; 1
    6c06:	08 c0       	rjmp	.+16     	; 0x6c18 <_ZL11i2c_0_WaitWv+0x32>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6c08:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6c0c:	9c 70       	andi	r25, 0x0C	; 12
    6c0e:	19 f4       	brne	.+6      	; 0x6c16 <_ZL11i2c_0_WaitWv+0x30>
    6c10:	03 c0       	rjmp	.+6      	; 0x6c18 <_ZL11i2c_0_WaitWv+0x32>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    6c12:	82 e0       	ldi	r24, 0x02	; 2
    6c14:	01 c0       	rjmp	.+2      	; 0x6c18 <_ZL11i2c_0_WaitWv+0x32>
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    6c16:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    6c18:	81 11       	cpse	r24, r1
    6c1a:	08 c0       	rjmp	.+16     	; 0x6c2c <_ZL11i2c_0_WaitWv+0x46>
    6c1c:	20 91 1f 40 	lds	r18, 0x401F	; 0x80401f <g_i2c0_timeout_ticks>
    6c20:	30 91 20 40 	lds	r19, 0x4020	; 0x804020 <g_i2c0_timeout_ticks+0x1>
    6c24:	23 2b       	or	r18, r19
    6c26:	21 f4       	brne	.+8      	; 0x6c30 <_ZL11i2c_0_WaitWv+0x4a>
    6c28:	90 e0       	ldi	r25, 0x00	; 0
    6c2a:	03 c0       	rjmp	.+6      	; 0x6c32 <_ZL11i2c_0_WaitWv+0x4c>
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	01 c0       	rjmp	.+2      	; 0x6c32 <_ZL11i2c_0_WaitWv+0x4c>
    6c30:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
	
	do
    6c32:	91 11       	cpse	r25, r1
    6c34:	df cf       	rjmp	.-66     	; 0x6bf4 <_ZL11i2c_0_WaitWv+0xe>
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	if(!g_i2c0_timeout_ticks) 
    6c36:	20 91 1f 40 	lds	r18, 0x401F	; 0x80401f <g_i2c0_timeout_ticks>
    6c3a:	30 91 20 40 	lds	r19, 0x4020	; 0x804020 <g_i2c0_timeout_ticks+0x1>
    6c3e:	23 2b       	or	r18, r19
    6c40:	09 f4       	brne	.+2      	; 0x6c44 <_ZL11i2c_0_WaitWv+0x5e>
	{
		state = I2C_ERROR;
    6c42:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	return state;
}
    6c44:	08 95       	ret

00006c46 <_ZL11i2c_0_WaitRv>:

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    6c46:	88 ec       	ldi	r24, 0xC8	; 200
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	80 93 1f 40 	sts	0x401F, r24	; 0x80401f <g_i2c0_timeout_ticks>
    6c4e:	90 93 20 40 	sts	0x4020, r25	; 0x804020 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
    6c52:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    6c54:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6c58:	90 7c       	andi	r25, 0xC0	; 192
    6c5a:	29 f4       	brne	.+10     	; 0x6c66 <_ZL11i2c_0_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6c5c:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6c60:	9c 70       	andi	r25, 0x0C	; 12
    6c62:	19 f4       	brne	.+6      	; 0x6c6a <_ZL11i2c_0_WaitRv+0x24>
    6c64:	03 c0       	rjmp	.+6      	; 0x6c6c <_ZL11i2c_0_WaitRv+0x26>
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    6c66:	83 e0       	ldi	r24, 0x03	; 3
    6c68:	01 c0       	rjmp	.+2      	; 0x6c6c <_ZL11i2c_0_WaitRv+0x26>
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    6c6a:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    6c6c:	81 11       	cpse	r24, r1
    6c6e:	08 c0       	rjmp	.+16     	; 0x6c80 <_ZL11i2c_0_WaitRv+0x3a>
    6c70:	20 91 1f 40 	lds	r18, 0x401F	; 0x80401f <g_i2c0_timeout_ticks>
    6c74:	30 91 20 40 	lds	r19, 0x4020	; 0x804020 <g_i2c0_timeout_ticks+0x1>
    6c78:	23 2b       	or	r18, r19
    6c7a:	21 f4       	brne	.+8      	; 0x6c84 <_ZL11i2c_0_WaitRv+0x3e>
    6c7c:	90 e0       	ldi	r25, 0x00	; 0
    6c7e:	03 c0       	rjmp	.+6      	; 0x6c86 <_ZL11i2c_0_WaitRv+0x40>
    6c80:	90 e0       	ldi	r25, 0x00	; 0
    6c82:	01 c0       	rjmp	.+2      	; 0x6c86 <_ZL11i2c_0_WaitRv+0x40>
    6c84:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    6c86:	91 11       	cpse	r25, r1
    6c88:	e5 cf       	rjmp	.-54     	; 0x6c54 <_ZL11i2c_0_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    6c8a:	08 95       	ret

00006c8c <_ZL11i2c_1_WaitWv>:

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
    6c8c:	88 ec       	ldi	r24, 0xC8	; 200
    6c8e:	90 e0       	ldi	r25, 0x00	; 0
    6c90:	80 93 1d 40 	sts	0x401D, r24	; 0x80401d <g_i2c1_timeout_ticks>
    6c94:	90 93 1e 40 	sts	0x401E, r25	; 0x80401e <g_i2c1_timeout_ticks+0x1>
	PORTB_set_pin_pull_mode(3, PORT_PULL_UP);
}

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
    6c98:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c1_timeout_ticks = 200;
	
	do
	{
		uint8_t stat = TWI1.MSTATUS;
    6c9a:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
		if(stat & (TWI_WIF_bm | TWI_RIF_bm))
    6c9e:	29 2f       	mov	r18, r25
    6ca0:	20 7c       	andi	r18, 0xC0	; 192
    6ca2:	21 f0       	breq	.+8      	; 0x6cac <_ZL11i2c_1_WaitWv+0x20>
		{
			if(!(stat & TWI_RXACK_bm))
    6ca4:	94 fd       	sbrc	r25, 4
    6ca6:	05 c0       	rjmp	.+10     	; 0x6cb2 <_ZL11i2c_1_WaitWv+0x26>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    6ca8:	81 e0       	ldi	r24, 0x01	; 1
    6caa:	06 c0       	rjmp	.+12     	; 0x6cb8 <_ZL11i2c_1_WaitWv+0x2c>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6cac:	9c 70       	andi	r25, 0x0C	; 12
    6cae:	19 f4       	brne	.+6      	; 0x6cb6 <_ZL11i2c_1_WaitWv+0x2a>
    6cb0:	03 c0       	rjmp	.+6      	; 0x6cb8 <_ZL11i2c_1_WaitWv+0x2c>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    6cb2:	82 e0       	ldi	r24, 0x02	; 2
    6cb4:	01 c0       	rjmp	.+2      	; 0x6cb8 <_ZL11i2c_1_WaitWv+0x2c>
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    6cb6:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c1_timeout_ticks);
    6cb8:	81 11       	cpse	r24, r1
    6cba:	08 c0       	rjmp	.+16     	; 0x6ccc <_ZL11i2c_1_WaitWv+0x40>
    6cbc:	20 91 1d 40 	lds	r18, 0x401D	; 0x80401d <g_i2c1_timeout_ticks>
    6cc0:	30 91 1e 40 	lds	r19, 0x401E	; 0x80401e <g_i2c1_timeout_ticks+0x1>
    6cc4:	23 2b       	or	r18, r19
    6cc6:	21 f4       	brne	.+8      	; 0x6cd0 <_ZL11i2c_1_WaitWv+0x44>
    6cc8:	90 e0       	ldi	r25, 0x00	; 0
    6cca:	03 c0       	rjmp	.+6      	; 0x6cd2 <_ZL11i2c_1_WaitWv+0x46>
    6ccc:	90 e0       	ldi	r25, 0x00	; 0
    6cce:	01 c0       	rjmp	.+2      	; 0x6cd2 <_ZL11i2c_1_WaitWv+0x46>
    6cd0:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
	
	do
    6cd2:	91 11       	cpse	r25, r1
    6cd4:	e2 cf       	rjmp	.-60     	; 0x6c9a <_ZL11i2c_1_WaitWv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c1_timeout_ticks);
	
	return state;
}
    6cd6:	08 95       	ret

00006cd8 <_ZL11I2C_1_WaitRv>:

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    6cd8:	88 ec       	ldi	r24, 0xC8	; 200
    6cda:	90 e0       	ldi	r25, 0x00	; 0
    6cdc:	80 93 1f 40 	sts	0x401F, r24	; 0x80401f <g_i2c0_timeout_ticks>
    6ce0:	90 93 20 40 	sts	0x4020, r25	; 0x804020 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
    6ce4:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    6ce6:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    6cea:	90 7c       	andi	r25, 0xC0	; 192
    6cec:	29 f4       	brne	.+10     	; 0x6cf8 <_ZL11I2C_1_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6cee:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    6cf2:	9c 70       	andi	r25, 0x0C	; 12
    6cf4:	19 f4       	brne	.+6      	; 0x6cfc <_ZL11I2C_1_WaitRv+0x24>
    6cf6:	03 c0       	rjmp	.+6      	; 0x6cfe <_ZL11I2C_1_WaitRv+0x26>
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    6cf8:	83 e0       	ldi	r24, 0x03	; 3
    6cfa:	01 c0       	rjmp	.+2      	; 0x6cfe <_ZL11I2C_1_WaitRv+0x26>
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    6cfc:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    6cfe:	81 11       	cpse	r24, r1
    6d00:	08 c0       	rjmp	.+16     	; 0x6d12 <_ZL11I2C_1_WaitRv+0x3a>
    6d02:	20 91 1f 40 	lds	r18, 0x401F	; 0x80401f <g_i2c0_timeout_ticks>
    6d06:	30 91 20 40 	lds	r19, 0x4020	; 0x804020 <g_i2c0_timeout_ticks+0x1>
    6d0a:	23 2b       	or	r18, r19
    6d0c:	21 f4       	brne	.+8      	; 0x6d16 <_ZL11I2C_1_WaitRv+0x3e>
    6d0e:	90 e0       	ldi	r25, 0x00	; 0
    6d10:	03 c0       	rjmp	.+6      	; 0x6d18 <_ZL11I2C_1_WaitRv+0x40>
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	01 c0       	rjmp	.+2      	; 0x6d18 <_ZL11I2C_1_WaitRv+0x40>
    6d16:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    6d18:	91 11       	cpse	r25, r1
    6d1a:	e5 cf       	rjmp	.-54     	; 0x6ce6 <_ZL11I2C_1_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    6d1c:	08 95       	ret

00006d1e <I2C_0_Init>:
/************************************************************************/

void I2C_0_Init(void)
{
	/* Select I2C pins PC2/PC3 */
	PORTMUX.TWIROUTEA &= 0x0A;
    6d1e:	e0 ee       	ldi	r30, 0xE0	; 224
    6d20:	f5 e0       	ldi	r31, 0x05	; 5
    6d22:	85 81       	ldd	r24, Z+5	; 0x05
    6d24:	8a 70       	andi	r24, 0x0A	; 10
    6d26:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x02;
    6d28:	85 81       	ldd	r24, Z+5	; 0x05
    6d2a:	82 60       	ori	r24, 0x02	; 2
    6d2c:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI0.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    6d2e:	e0 e0       	ldi	r30, 0x00	; 0
    6d30:	f9 e0       	ldi	r31, 0x09	; 9
    6d32:	8f e6       	ldi	r24, 0x6F	; 111
    6d34:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI0.MCTRLA = TWI_ENABLE_bm;
    6d36:	81 e0       	ldi	r24, 0x01	; 1
    6d38:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI0.MADDR = 0x00;
    6d3a:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI0.MDATA = 0x00;
    6d3c:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6d3e:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6d40:	e2 e5       	ldi	r30, 0x52	; 82
    6d42:	f4 e0       	ldi	r31, 0x04	; 4
    6d44:	80 81       	ld	r24, Z
    6d46:	88 60       	ori	r24, 0x08	; 8
    6d48:	80 83       	st	Z, r24
    6d4a:	e3 e5       	ldi	r30, 0x53	; 83
    6d4c:	f4 e0       	ldi	r31, 0x04	; 4
    6d4e:	80 81       	ld	r24, Z
    6d50:	88 60       	ori	r24, 0x08	; 8
    6d52:	80 83       	st	Z, r24
    6d54:	08 95       	ret

00006d56 <I2C_0_GetData>:
	return retVal;
}

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_0_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6d56:	ef 92       	push	r14
    6d58:	ff 92       	push	r15
    6d5a:	1f 93       	push	r17
    6d5c:	cf 93       	push	r28
    6d5e:	df 93       	push	r29
    6d60:	c8 2f       	mov	r28, r24
    6d62:	d6 2f       	mov	r29, r22
    6d64:	7a 01       	movw	r14, r20
    6d66:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
    6d68:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6d6c:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <_ZL11i2c_0_WaitWv>
    6d70:	81 30       	cpi	r24, 0x01	; 1
    6d72:	61 f5       	brne	.+88     	; 0x6dcc <I2C_0_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    6d74:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    6d78:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <_ZL11i2c_0_WaitWv>
    6d7c:	81 30       	cpi	r24, 0x01	; 1
    6d7e:	41 f5       	brne	.+80     	; 0x6dd0 <I2C_0_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
    6d80:	c1 60       	ori	r28, 0x01	; 1
    6d82:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6d86:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <_ZL11i2c_0_WaitWv>
    6d8a:	81 30       	cpi	r24, 0x01	; 1
    6d8c:	19 f5       	brne	.+70     	; 0x6dd4 <I2C_0_GetData+0x7e>
	{
		return retVal;
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    6d8e:	11 23       	and	r17, r17
    6d90:	19 f1       	breq	.+70     	; 0x6dd8 <I2C_0_GetData+0x82>
    6d92:	e1 14       	cp	r14, r1
    6d94:	f1 04       	cpc	r15, r1
    6d96:	11 f1       	breq	.+68     	; 0x6ddc <I2C_0_GetData+0x86>
    6d98:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6d9a:	df ef       	ldi	r29, 0xFF	; 255
    6d9c:	d1 0f       	add	r29, r17
    6d9e:	11 23       	and	r17, r17
    6da0:	f9 f0       	breq	.+62     	; 0x6de0 <I2C_0_GetData+0x8a>
		{
			if(i2c_0_WaitR() == I2C_READY)
    6da2:	0e 94 23 36 	call	0x6c46	; 0x6c46 <_ZL11i2c_0_WaitRv>
    6da6:	83 30       	cpi	r24, 0x03	; 3
    6da8:	e9 f4       	brne	.+58     	; 0x6de4 <I2C_0_GetData+0x8e>
			{
				*pData = TWI0.MDATA;
    6daa:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    6dae:	f7 01       	movw	r30, r14
    6db0:	80 83       	st	Z, r24
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    6db2:	d1 11       	cpse	r29, r1
    6db4:	02 c0       	rjmp	.+4      	; 0x6dba <I2C_0_GetData+0x64>
    6db6:	87 e0       	ldi	r24, 0x07	; 7
    6db8:	01 c0       	rjmp	.+2      	; 0x6dbc <I2C_0_GetData+0x66>
    6dba:	82 e0       	ldi	r24, 0x02	; 2
    6dbc:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
				retVal++;
    6dc0:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6dc2:	ff ef       	ldi	r31, 0xFF	; 255
    6dc4:	ef 1a       	sub	r14, r31
    6dc6:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6dc8:	1d 2f       	mov	r17, r29
    6dca:	e7 cf       	rjmp	.-50     	; 0x6d9a <I2C_0_GetData+0x44>
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6dcc:	8f ef       	ldi	r24, 0xFF	; 255
    6dce:	0b c0       	rjmp	.+22     	; 0x6de6 <I2C_0_GetData+0x90>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6dd0:	8f ef       	ldi	r24, 0xFF	; 255
    6dd2:	09 c0       	rjmp	.+18     	; 0x6de6 <I2C_0_GetData+0x90>
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6dd4:	8f ef       	ldi	r24, 0xFF	; 255
    6dd6:	07 c0       	rjmp	.+14     	; 0x6de6 <I2C_0_GetData+0x90>
	}
	
	retVal = 0;
    6dd8:	80 e0       	ldi	r24, 0x00	; 0
    6dda:	05 c0       	rjmp	.+10     	; 0x6de6 <I2C_0_GetData+0x90>
    6ddc:	80 e0       	ldi	r24, 0x00	; 0
    6dde:	03 c0       	rjmp	.+6      	; 0x6de6 <I2C_0_GetData+0x90>
    6de0:	8c 2f       	mov	r24, r28
    6de2:	01 c0       	rjmp	.+2      	; 0x6de6 <I2C_0_GetData+0x90>
    6de4:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6de6:	df 91       	pop	r29
    6de8:	cf 91       	pop	r28
    6dea:	1f 91       	pop	r17
    6dec:	ff 90       	pop	r15
    6dee:	ef 90       	pop	r14
    6df0:	08 95       	ret

00006df2 <I2C_0_EndSession>:

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    6df2:	83 e0       	ldi	r24, 0x03	; 3
    6df4:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    6df8:	08 95       	ret

00006dfa <I2C_0_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_0_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6dfa:	ff 92       	push	r15
    6dfc:	0f 93       	push	r16
    6dfe:	1f 93       	push	r17
    6e00:	cf 93       	push	r28
    6e02:	df 93       	push	r29
    6e04:	c6 2f       	mov	r28, r22
    6e06:	8a 01       	movw	r16, r20
    6e08:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
    6e0a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6e0e:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <_ZL11i2c_0_WaitWv>
    6e12:	81 30       	cpi	r24, 0x01	; 1
    6e14:	29 f5       	brne	.+74     	; 0x6e60 <I2C_0_SendData+0x66>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    6e16:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    6e1a:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <_ZL11i2c_0_WaitWv>
    6e1e:	81 30       	cpi	r24, 0x01	; 1
    6e20:	09 f5       	brne	.+66     	; 0x6e64 <I2C_0_SendData+0x6a>
	{
		return retVal;
	}

	retVal = 0;
	if((len != 0) && (pData != null))
    6e22:	dd 23       	and	r29, r29
    6e24:	09 f1       	breq	.+66     	; 0x6e68 <I2C_0_SendData+0x6e>
    6e26:	01 15       	cp	r16, r1
    6e28:	11 05       	cpc	r17, r1
    6e2a:	21 f4       	brne	.+8      	; 0x6e34 <I2C_0_SendData+0x3a>
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}

	retVal = 0;
    6e2c:	80 e0       	ldi	r24, 0x00	; 0
    6e2e:	21 c0       	rjmp	.+66     	; 0x6e72 <I2C_0_SendData+0x78>
    6e30:	df 2d       	mov	r29, r15
    6e32:	01 c0       	rjmp	.+2      	; 0x6e36 <I2C_0_SendData+0x3c>
    6e34:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != null))
	{
		while(len--)
    6e36:	ff 24       	eor	r15, r15
    6e38:	fa 94       	dec	r15
    6e3a:	fd 0e       	add	r15, r29
    6e3c:	dd 23       	and	r29, r29
    6e3e:	b1 f0       	breq	.+44     	; 0x6e6c <I2C_0_SendData+0x72>
		{
			TWI0.MDATA = *pData;
    6e40:	f8 01       	movw	r30, r16
    6e42:	80 81       	ld	r24, Z
    6e44:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
			if(i2c_0_WaitW() == I2C_ACKED)
    6e48:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <_ZL11i2c_0_WaitWv>
    6e4c:	81 30       	cpi	r24, 0x01	; 1
    6e4e:	81 f4       	brne	.+32     	; 0x6e70 <I2C_0_SendData+0x76>
			{
				retVal++;
    6e50:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6e52:	0f 5f       	subi	r16, 0xFF	; 255
    6e54:	1f 4f       	sbci	r17, 0xFF	; 255
				if(!len) I2C_0_EndSession();
    6e56:	f1 10       	cpse	r15, r1
    6e58:	eb cf       	rjmp	.-42     	; 0x6e30 <I2C_0_SendData+0x36>
    6e5a:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <I2C_0_EndSession>
    6e5e:	e8 cf       	rjmp	.-48     	; 0x6e30 <I2C_0_SendData+0x36>
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6e60:	8f ef       	ldi	r24, 0xFF	; 255
    6e62:	07 c0       	rjmp	.+14     	; 0x6e72 <I2C_0_SendData+0x78>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6e64:	8f ef       	ldi	r24, 0xFF	; 255
    6e66:	05 c0       	rjmp	.+10     	; 0x6e72 <I2C_0_SendData+0x78>
	}

	retVal = 0;
    6e68:	80 e0       	ldi	r24, 0x00	; 0
    6e6a:	03 c0       	rjmp	.+6      	; 0x6e72 <I2C_0_SendData+0x78>
    6e6c:	8c 2f       	mov	r24, r28
    6e6e:	01 c0       	rjmp	.+2      	; 0x6e72 <I2C_0_SendData+0x78>
    6e70:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    6e72:	df 91       	pop	r29
    6e74:	cf 91       	pop	r28
    6e76:	1f 91       	pop	r17
    6e78:	0f 91       	pop	r16
    6e7a:	ff 90       	pop	r15
    6e7c:	08 95       	ret

00006e7e <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    6e7e:	e0 ee       	ldi	r30, 0xE0	; 224
    6e80:	f5 e0       	ldi	r31, 0x05	; 5
    6e82:	85 81       	ldd	r24, Z+5	; 0x05
    6e84:	83 70       	andi	r24, 0x03	; 3
    6e86:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    6e88:	85 81       	ldd	r24, Z+5	; 0x05
    6e8a:	88 60       	ori	r24, 0x08	; 8
    6e8c:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    6e8e:	e0 e2       	ldi	r30, 0x20	; 32
    6e90:	f9 e0       	ldi	r31, 0x09	; 9
    6e92:	8f e6       	ldi	r24, 0x6F	; 111
    6e94:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    6e96:	81 e0       	ldi	r24, 0x01	; 1
    6e98:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    6e9a:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    6e9c:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6e9e:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6ea0:	e2 e3       	ldi	r30, 0x32	; 50
    6ea2:	f4 e0       	ldi	r31, 0x04	; 4
    6ea4:	80 81       	ld	r24, Z
    6ea6:	88 60       	ori	r24, 0x08	; 8
    6ea8:	80 83       	st	Z, r24
    6eaa:	e3 e3       	ldi	r30, 0x33	; 51
    6eac:	f4 e0       	ldi	r31, 0x04	; 4
    6eae:	80 81       	ld	r24, Z
    6eb0:	88 60       	ori	r24, 0x08	; 8
    6eb2:	80 83       	st	Z, r24
    6eb4:	08 95       	ret

00006eb6 <I2C_1_GetData>:
}


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6eb6:	ef 92       	push	r14
    6eb8:	ff 92       	push	r15
    6eba:	1f 93       	push	r17
    6ebc:	cf 93       	push	r28
    6ebe:	df 93       	push	r29
    6ec0:	c8 2f       	mov	r28, r24
    6ec2:	d6 2f       	mov	r29, r22
    6ec4:	7a 01       	movw	r14, r20
    6ec6:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    6ec8:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6ecc:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <_ZL11i2c_1_WaitWv>
    6ed0:	81 30       	cpi	r24, 0x01	; 1
    6ed2:	61 f5       	brne	.+88     	; 0x6f2c <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6ed4:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    6ed8:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <_ZL11i2c_1_WaitWv>
    6edc:	81 30       	cpi	r24, 0x01	; 1
    6ede:	41 f5       	brne	.+80     	; 0x6f30 <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    6ee0:	c1 60       	ori	r28, 0x01	; 1
    6ee2:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6ee6:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <_ZL11i2c_1_WaitWv>
    6eea:	81 30       	cpi	r24, 0x01	; 1
    6eec:	19 f5       	brne	.+70     	; 0x6f34 <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    6eee:	11 23       	and	r17, r17
    6ef0:	19 f1       	breq	.+70     	; 0x6f38 <I2C_1_GetData+0x82>
    6ef2:	e1 14       	cp	r14, r1
    6ef4:	f1 04       	cpc	r15, r1
    6ef6:	11 f1       	breq	.+68     	; 0x6f3c <I2C_1_GetData+0x86>
    6ef8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6efa:	df ef       	ldi	r29, 0xFF	; 255
    6efc:	d1 0f       	add	r29, r17
    6efe:	11 23       	and	r17, r17
    6f00:	f9 f0       	breq	.+62     	; 0x6f40 <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    6f02:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <_ZL11I2C_1_WaitRv>
    6f06:	83 30       	cpi	r24, 0x03	; 3
    6f08:	e9 f4       	brne	.+58     	; 0x6f44 <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    6f0a:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    6f0e:	f7 01       	movw	r30, r14
    6f10:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    6f12:	d1 11       	cpse	r29, r1
    6f14:	02 c0       	rjmp	.+4      	; 0x6f1a <I2C_1_GetData+0x64>
    6f16:	87 e0       	ldi	r24, 0x07	; 7
    6f18:	01 c0       	rjmp	.+2      	; 0x6f1c <I2C_1_GetData+0x66>
    6f1a:	82 e0       	ldi	r24, 0x02	; 2
    6f1c:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    6f20:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6f22:	ff ef       	ldi	r31, 0xFF	; 255
    6f24:	ef 1a       	sub	r14, r31
    6f26:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6f28:	1d 2f       	mov	r17, r29
    6f2a:	e7 cf       	rjmp	.-50     	; 0x6efa <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6f2c:	8f ef       	ldi	r24, 0xFF	; 255
    6f2e:	0b c0       	rjmp	.+22     	; 0x6f46 <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6f30:	8f ef       	ldi	r24, 0xFF	; 255
    6f32:	09 c0       	rjmp	.+18     	; 0x6f46 <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    6f34:	8f ef       	ldi	r24, 0xFF	; 255
    6f36:	07 c0       	rjmp	.+14     	; 0x6f46 <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    6f38:	80 e0       	ldi	r24, 0x00	; 0
    6f3a:	05 c0       	rjmp	.+10     	; 0x6f46 <I2C_1_GetData+0x90>
    6f3c:	80 e0       	ldi	r24, 0x00	; 0
    6f3e:	03 c0       	rjmp	.+6      	; 0x6f46 <I2C_1_GetData+0x90>
    6f40:	8c 2f       	mov	r24, r28
    6f42:	01 c0       	rjmp	.+2      	; 0x6f46 <I2C_1_GetData+0x90>
    6f44:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6f46:	df 91       	pop	r29
    6f48:	cf 91       	pop	r28
    6f4a:	1f 91       	pop	r17
    6f4c:	ff 90       	pop	r15
    6f4e:	ef 90       	pop	r14
    6f50:	08 95       	ret

00006f52 <I2C_1_EndSession>:

void I2C_1_EndSession(void)
{
	TWI1.MCTRLB = TWI_MCMD_STOP_gc;
    6f52:	83 e0       	ldi	r24, 0x03	; 3
    6f54:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
    6f58:	08 95       	ret

00006f5a <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6f5a:	ff 92       	push	r15
    6f5c:	0f 93       	push	r16
    6f5e:	1f 93       	push	r17
    6f60:	cf 93       	push	r28
    6f62:	df 93       	push	r29
    6f64:	c6 2f       	mov	r28, r22
    6f66:	8a 01       	movw	r16, r20
    6f68:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    6f6a:	8e 7f       	andi	r24, 0xFE	; 254
    6f6c:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6f70:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <_ZL11i2c_1_WaitWv>
    6f74:	81 30       	cpi	r24, 0x01	; 1
    6f76:	29 f5       	brne	.+74     	; 0x6fc2 <I2C_1_SendData+0x68>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6f78:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    6f7c:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <_ZL11i2c_1_WaitWv>
    6f80:	81 30       	cpi	r24, 0x01	; 1
    6f82:	09 f5       	brne	.+66     	; 0x6fc6 <I2C_1_SendData+0x6c>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
    6f84:	dd 23       	and	r29, r29
    6f86:	09 f1       	breq	.+66     	; 0x6fca <I2C_1_SendData+0x70>
    6f88:	01 15       	cp	r16, r1
    6f8a:	11 05       	cpc	r17, r1
    6f8c:	21 f4       	brne	.+8      	; 0x6f96 <I2C_1_SendData+0x3c>
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
	}	

	retVal = 0;
    6f8e:	80 e0       	ldi	r24, 0x00	; 0
    6f90:	21 c0       	rjmp	.+66     	; 0x6fd4 <I2C_1_SendData+0x7a>
    6f92:	df 2d       	mov	r29, r15
    6f94:	01 c0       	rjmp	.+2      	; 0x6f98 <I2C_1_SendData+0x3e>
    6f96:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != null))
	{
		while(len--)
    6f98:	ff 24       	eor	r15, r15
    6f9a:	fa 94       	dec	r15
    6f9c:	fd 0e       	add	r15, r29
    6f9e:	dd 23       	and	r29, r29
    6fa0:	b1 f0       	breq	.+44     	; 0x6fce <I2C_1_SendData+0x74>
		{
			TWI1.MDATA = *pData;
    6fa2:	f8 01       	movw	r30, r16
    6fa4:	80 81       	ld	r24, Z
    6fa6:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    6faa:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <_ZL11i2c_1_WaitWv>
    6fae:	81 30       	cpi	r24, 0x01	; 1
    6fb0:	81 f4       	brne	.+32     	; 0x6fd2 <I2C_1_SendData+0x78>
			{
				retVal++;
    6fb2:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6fb4:	0f 5f       	subi	r16, 0xFF	; 255
    6fb6:	1f 4f       	sbci	r17, 0xFF	; 255
				if(!len) I2C_1_EndSession();
    6fb8:	f1 10       	cpse	r15, r1
    6fba:	eb cf       	rjmp	.-42     	; 0x6f92 <I2C_1_SendData+0x38>
    6fbc:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <I2C_1_EndSession>
    6fc0:	e8 cf       	rjmp	.-48     	; 0x6f92 <I2C_1_SendData+0x38>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6fc2:	8f ef       	ldi	r24, 0xFF	; 255
    6fc4:	07 c0       	rjmp	.+14     	; 0x6fd4 <I2C_1_SendData+0x7a>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6fc6:	8f ef       	ldi	r24, 0xFF	; 255
    6fc8:	05 c0       	rjmp	.+10     	; 0x6fd4 <I2C_1_SendData+0x7a>
	}	

	retVal = 0;
    6fca:	80 e0       	ldi	r24, 0x00	; 0
    6fcc:	03 c0       	rjmp	.+6      	; 0x6fd4 <I2C_1_SendData+0x7a>
    6fce:	8c 2f       	mov	r24, r28
    6fd0:	01 c0       	rjmp	.+2      	; 0x6fd4 <I2C_1_SendData+0x7a>
    6fd2:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    6fd4:	df 91       	pop	r29
    6fd6:	cf 91       	pop	r28
    6fd8:	1f 91       	pop	r17
    6fda:	0f 91       	pop	r16
    6fdc:	ff 90       	pop	r15
    6fde:	08 95       	ret

00006fe0 <_ZL21USART4_initializationm>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
	lb_send_text(g_tempMsgBuff);
    6fe0:	20 b3       	in	r18, 0x10	; 16
    6fe2:	2d 7f       	andi	r18, 0xFD	; 253
    6fe4:	20 bb       	out	0x10, r18	; 16
    6fe6:	e1 e9       	ldi	r30, 0x91	; 145
    6fe8:	f4 e0       	ldi	r31, 0x04	; 4
    6fea:	20 81       	ld	r18, Z
    6fec:	27 7f       	andi	r18, 0xF7	; 247
    6fee:	20 83       	st	Z, r18
    6ff0:	20 b3       	in	r18, 0x10	; 16
    6ff2:	21 60       	ori	r18, 0x01	; 1
    6ff4:	20 bb       	out	0x10, r18	; 16
    6ff6:	21 b3       	in	r18, 0x11	; 17
    6ff8:	21 60       	ori	r18, 0x01	; 1
    6ffa:	21 bb       	out	0x11, r18	; 17
    6ffc:	0e 94 a1 48 	call	0x9142	; 0x9142 <USART4_init>
    7000:	08 95       	ret

00007002 <_ZL21USART1_initializationm>:
    7002:	28 b1       	in	r18, 0x08	; 8
    7004:	2d 7f       	andi	r18, 0xFD	; 253
    7006:	28 b9       	out	0x08, r18	; 8
    7008:	e1 e5       	ldi	r30, 0x51	; 81
    700a:	f4 e0       	ldi	r31, 0x04	; 4
    700c:	20 81       	ld	r18, Z
    700e:	27 7f       	andi	r18, 0xF7	; 247
    7010:	20 83       	st	Z, r18
    7012:	28 b1       	in	r18, 0x08	; 8
    7014:	21 60       	ori	r18, 0x01	; 1
    7016:	28 b9       	out	0x08, r18	; 8
    7018:	29 b1       	in	r18, 0x09	; 9
    701a:	21 60       	ori	r18, 0x01	; 1
    701c:	29 b9       	out	0x09, r18	; 9
    701e:	0e 94 6d 48 	call	0x90da	; 0x90da <USART1_init>
    7022:	08 95       	ret

00007024 <_ZL16linkbus_start_txv>:
    7024:	cf 93       	push	r28
    7026:	c0 91 16 49 	lds	r28, 0x4916	; 0x804916 <_ZL17linkbus_tx_active>
    702a:	81 e0       	ldi	r24, 0x01	; 1
    702c:	c8 27       	eor	r28, r24
    702e:	59 f0       	breq	.+22     	; 0x7046 <_ZL16linkbus_start_txv+0x22>
    7030:	80 93 16 49 	sts	0x4916, r24	; 0x804916 <_ZL17linkbus_tx_active>
    7034:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    7038:	81 11       	cpse	r24, r1
    703a:	03 c0       	rjmp	.+6      	; 0x7042 <_ZL16linkbus_start_txv+0x1e>
    703c:	0e 94 c3 48 	call	0x9186	; 0x9186 <USART4_enable_tx>
    7040:	02 c0       	rjmp	.+4      	; 0x7046 <_ZL16linkbus_start_txv+0x22>
    7042:	0e 94 8f 48 	call	0x911e	; 0x911e <USART1_enable_tx>
    7046:	8c 2f       	mov	r24, r28
    7048:	cf 91       	pop	r28
    704a:	08 95       	ret

0000704c <_Z18nextFullLBTxBufferv>:
    704c:	90 e0       	ldi	r25, 0x00	; 0
    704e:	80 91 c9 47 	lds	r24, 0x47C9	; 0x8047c9 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    7052:	28 2f       	mov	r18, r24
    7054:	30 e0       	ldi	r19, 0x00	; 0
    7056:	42 e3       	ldi	r20, 0x32	; 50
    7058:	42 9f       	mul	r20, r18
    705a:	f0 01       	movw	r30, r0
    705c:	43 9f       	mul	r20, r19
    705e:	f0 0d       	add	r31, r0
    7060:	11 24       	eor	r1, r1
    7062:	e2 5b       	subi	r30, 0xB2	; 178
    7064:	f7 4b       	sbci	r31, 0xB7	; 183
    7066:	40 81       	ld	r20, Z
    7068:	41 11       	cpse	r20, r1
    706a:	0b c0       	rjmp	.+22     	; 0x7082 <_Z18nextFullLBTxBufferv+0x36>
    706c:	9f 5f       	subi	r25, 0xFF	; 255
    706e:	94 30       	cpi	r25, 0x04	; 4
    7070:	50 f4       	brcc	.+20     	; 0x7086 <_Z18nextFullLBTxBufferv+0x3a>
    7072:	8f 5f       	subi	r24, 0xFF	; 255
    7074:	80 93 c9 47 	sts	0x47C9, r24	; 0x8047c9 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    7078:	84 30       	cpi	r24, 0x04	; 4
    707a:	48 f3       	brcs	.-46     	; 0x704e <_Z18nextFullLBTxBufferv+0x2>
    707c:	10 92 c9 47 	sts	0x47C9, r1	; 0x8047c9 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    7080:	e6 cf       	rjmp	.-52     	; 0x704e <_Z18nextFullLBTxBufferv+0x2>
    7082:	81 e0       	ldi	r24, 0x01	; 1
    7084:	01 c0       	rjmp	.+2      	; 0x7088 <_Z18nextFullLBTxBufferv+0x3c>
    7086:	80 e0       	ldi	r24, 0x00	; 0
    7088:	88 23       	and	r24, r24
    708a:	49 f0       	breq	.+18     	; 0x709e <_Z18nextFullLBTxBufferv+0x52>
    708c:	42 e3       	ldi	r20, 0x32	; 50
    708e:	42 9f       	mul	r20, r18
    7090:	c0 01       	movw	r24, r0
    7092:	43 9f       	mul	r20, r19
    7094:	90 0d       	add	r25, r0
    7096:	11 24       	eor	r1, r1
    7098:	82 5b       	subi	r24, 0xB2	; 178
    709a:	97 4b       	sbci	r25, 0xB7	; 183
    709c:	08 95       	ret
    709e:	80 e0       	ldi	r24, 0x00	; 0
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	08 95       	ret

000070a4 <_Z19nextEmptyLBTxBufferv>:
    70a4:	90 e0       	ldi	r25, 0x00	; 0
    70a6:	80 91 c8 47 	lds	r24, 0x47C8	; 0x8047c8 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    70aa:	28 2f       	mov	r18, r24
    70ac:	30 e0       	ldi	r19, 0x00	; 0
    70ae:	42 e3       	ldi	r20, 0x32	; 50
    70b0:	42 9f       	mul	r20, r18
    70b2:	f0 01       	movw	r30, r0
    70b4:	43 9f       	mul	r20, r19
    70b6:	f0 0d       	add	r31, r0
    70b8:	11 24       	eor	r1, r1
    70ba:	e2 5b       	subi	r30, 0xB2	; 178
    70bc:	f7 4b       	sbci	r31, 0xB7	; 183
    70be:	40 81       	ld	r20, Z
    70c0:	44 23       	and	r20, r20
    70c2:	59 f0       	breq	.+22     	; 0x70da <_Z19nextEmptyLBTxBufferv+0x36>
    70c4:	9f 5f       	subi	r25, 0xFF	; 255
    70c6:	94 30       	cpi	r25, 0x04	; 4
    70c8:	50 f4       	brcc	.+20     	; 0x70de <_Z19nextEmptyLBTxBufferv+0x3a>
    70ca:	8f 5f       	subi	r24, 0xFF	; 255
    70cc:	80 93 c8 47 	sts	0x47C8, r24	; 0x8047c8 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    70d0:	84 30       	cpi	r24, 0x04	; 4
    70d2:	48 f3       	brcs	.-46     	; 0x70a6 <_Z19nextEmptyLBTxBufferv+0x2>
    70d4:	10 92 c8 47 	sts	0x47C8, r1	; 0x8047c8 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    70d8:	e6 cf       	rjmp	.-52     	; 0x70a6 <_Z19nextEmptyLBTxBufferv+0x2>
    70da:	81 e0       	ldi	r24, 0x01	; 1
    70dc:	01 c0       	rjmp	.+2      	; 0x70e0 <_Z19nextEmptyLBTxBufferv+0x3c>
    70de:	80 e0       	ldi	r24, 0x00	; 0
    70e0:	88 23       	and	r24, r24
    70e2:	49 f0       	breq	.+18     	; 0x70f6 <_Z19nextEmptyLBTxBufferv+0x52>
    70e4:	42 e3       	ldi	r20, 0x32	; 50
    70e6:	42 9f       	mul	r20, r18
    70e8:	c0 01       	movw	r24, r0
    70ea:	43 9f       	mul	r20, r19
    70ec:	90 0d       	add	r25, r0
    70ee:	11 24       	eor	r1, r1
    70f0:	82 5b       	subi	r24, 0xB2	; 178
    70f2:	97 4b       	sbci	r25, 0xB7	; 183
    70f4:	08 95       	ret
    70f6:	80 e0       	ldi	r24, 0x00	; 0
    70f8:	90 e0       	ldi	r25, 0x00	; 0
    70fa:	08 95       	ret

000070fc <_Z19nextEmptyLBRxBufferv>:
    70fc:	90 e0       	ldi	r25, 0x00	; 0
    70fe:	80 91 c7 47 	lds	r24, 0x47C7	; 0x8047c7 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    7102:	28 2f       	mov	r18, r24
    7104:	30 e0       	ldi	r19, 0x00	; 0
    7106:	42 e4       	ldi	r20, 0x42	; 66
    7108:	42 9f       	mul	r20, r18
    710a:	f0 01       	movw	r30, r0
    710c:	43 9f       	mul	r20, r19
    710e:	f0 0d       	add	r31, r0
    7110:	11 24       	eor	r1, r1
    7112:	e6 53       	subi	r30, 0x36	; 54
    7114:	f8 4b       	sbci	r31, 0xB8	; 184
    7116:	41 81       	ldd	r20, Z+1	; 0x01
    7118:	52 81       	ldd	r21, Z+2	; 0x02
    711a:	45 2b       	or	r20, r21
    711c:	59 f0       	breq	.+22     	; 0x7134 <_Z19nextEmptyLBRxBufferv+0x38>
    711e:	9f 5f       	subi	r25, 0xFF	; 255
    7120:	92 30       	cpi	r25, 0x02	; 2
    7122:	50 f4       	brcc	.+20     	; 0x7138 <_Z19nextEmptyLBRxBufferv+0x3c>
    7124:	8f 5f       	subi	r24, 0xFF	; 255
    7126:	80 93 c7 47 	sts	0x47C7, r24	; 0x8047c7 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    712a:	82 30       	cpi	r24, 0x02	; 2
    712c:	40 f3       	brcs	.-48     	; 0x70fe <_Z19nextEmptyLBRxBufferv+0x2>
    712e:	10 92 c7 47 	sts	0x47C7, r1	; 0x8047c7 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    7132:	e5 cf       	rjmp	.-54     	; 0x70fe <_Z19nextEmptyLBRxBufferv+0x2>
    7134:	81 e0       	ldi	r24, 0x01	; 1
    7136:	01 c0       	rjmp	.+2      	; 0x713a <_Z19nextEmptyLBRxBufferv+0x3e>
    7138:	80 e0       	ldi	r24, 0x00	; 0
    713a:	88 23       	and	r24, r24
    713c:	49 f0       	breq	.+18     	; 0x7150 <_Z19nextEmptyLBRxBufferv+0x54>
    713e:	42 e4       	ldi	r20, 0x42	; 66
    7140:	42 9f       	mul	r20, r18
    7142:	c0 01       	movw	r24, r0
    7144:	43 9f       	mul	r20, r19
    7146:	90 0d       	add	r25, r0
    7148:	11 24       	eor	r1, r1
    714a:	86 53       	subi	r24, 0x36	; 54
    714c:	98 4b       	sbci	r25, 0xB8	; 184
    714e:	08 95       	ret
    7150:	80 e0       	ldi	r24, 0x00	; 0
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	08 95       	ret

00007156 <_Z18nextFullLBRxBufferv>:
    7156:	90 e0       	ldi	r25, 0x00	; 0
    7158:	80 91 c6 47 	lds	r24, 0x47C6	; 0x8047c6 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    715c:	28 2f       	mov	r18, r24
    715e:	30 e0       	ldi	r19, 0x00	; 0
    7160:	42 e4       	ldi	r20, 0x42	; 66
    7162:	42 9f       	mul	r20, r18
    7164:	f0 01       	movw	r30, r0
    7166:	43 9f       	mul	r20, r19
    7168:	f0 0d       	add	r31, r0
    716a:	11 24       	eor	r1, r1
    716c:	e6 53       	subi	r30, 0x36	; 54
    716e:	f8 4b       	sbci	r31, 0xB8	; 184
    7170:	41 81       	ldd	r20, Z+1	; 0x01
    7172:	52 81       	ldd	r21, Z+2	; 0x02
    7174:	45 2b       	or	r20, r21
    7176:	59 f4       	brne	.+22     	; 0x718e <_Z18nextFullLBRxBufferv+0x38>
    7178:	9f 5f       	subi	r25, 0xFF	; 255
    717a:	92 30       	cpi	r25, 0x02	; 2
    717c:	50 f4       	brcc	.+20     	; 0x7192 <_Z18nextFullLBRxBufferv+0x3c>
    717e:	8f 5f       	subi	r24, 0xFF	; 255
    7180:	80 93 c6 47 	sts	0x47C6, r24	; 0x8047c6 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    7184:	82 30       	cpi	r24, 0x02	; 2
    7186:	40 f3       	brcs	.-48     	; 0x7158 <_Z18nextFullLBRxBufferv+0x2>
    7188:	10 92 c6 47 	sts	0x47C6, r1	; 0x8047c6 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    718c:	e5 cf       	rjmp	.-54     	; 0x7158 <_Z18nextFullLBRxBufferv+0x2>
    718e:	81 e0       	ldi	r24, 0x01	; 1
    7190:	01 c0       	rjmp	.+2      	; 0x7194 <_Z18nextFullLBRxBufferv+0x3e>
    7192:	80 e0       	ldi	r24, 0x00	; 0
    7194:	88 23       	and	r24, r24
    7196:	49 f0       	breq	.+18     	; 0x71aa <_Z18nextFullLBRxBufferv+0x54>
    7198:	42 e4       	ldi	r20, 0x42	; 66
    719a:	42 9f       	mul	r20, r18
    719c:	c0 01       	movw	r24, r0
    719e:	43 9f       	mul	r20, r19
    71a0:	90 0d       	add	r25, r0
    71a2:	11 24       	eor	r1, r1
    71a4:	86 53       	subi	r24, 0x36	; 54
    71a6:	98 4b       	sbci	r25, 0xB8	; 184
    71a8:	08 95       	ret
    71aa:	80 e0       	ldi	r24, 0x00	; 0
    71ac:	90 e0       	ldi	r25, 0x00	; 0
    71ae:	08 95       	ret

000071b0 <_Z19linkbusTxInProgressv>:
    71b0:	80 91 16 49 	lds	r24, 0x4916	; 0x804916 <_ZL17linkbus_tx_active>
    71b4:	08 95       	ret

000071b6 <_Z14linkbus_end_txv>:
    71b6:	80 91 16 49 	lds	r24, 0x4916	; 0x804916 <_ZL17linkbus_tx_active>
    71ba:	88 23       	and	r24, r24
    71bc:	89 f0       	breq	.+34     	; 0x71e0 <_Z14linkbus_end_txv+0x2a>
    71be:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    71c2:	81 11       	cpse	r24, r1
    71c4:	06 c0       	rjmp	.+12     	; 0x71d2 <_Z14linkbus_end_txv+0x1c>
    71c6:	e0 e8       	ldi	r30, 0x80	; 128
    71c8:	f8 e0       	ldi	r31, 0x08	; 8
    71ca:	85 81       	ldd	r24, Z+5	; 0x05
    71cc:	8f 7d       	andi	r24, 0xDF	; 223
    71ce:	85 83       	std	Z+5, r24	; 0x05
    71d0:	05 c0       	rjmp	.+10     	; 0x71dc <_Z14linkbus_end_txv+0x26>
    71d2:	e0 e2       	ldi	r30, 0x20	; 32
    71d4:	f8 e0       	ldi	r31, 0x08	; 8
    71d6:	85 81       	ldd	r24, Z+5	; 0x05
    71d8:	8f 7d       	andi	r24, 0xDF	; 223
    71da:	85 83       	std	Z+5, r24	; 0x05
    71dc:	10 92 16 49 	sts	0x4916, r1	; 0x804916 <_ZL17linkbus_tx_active>
    71e0:	08 95       	ret

000071e2 <_Z16linkbus_reset_rxv>:
    71e2:	cf 93       	push	r28
    71e4:	df 93       	push	r29
    71e6:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    71ea:	81 11       	cpse	r24, r1
    71ec:	14 c0       	rjmp	.+40     	; 0x7216 <_Z16linkbus_reset_rxv+0x34>
    71ee:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <__TEXT_REGION_LENGTH__+0x7e0886>
    71f2:	88 23       	and	r24, r24
    71f4:	1c f5       	brge	.+70     	; 0x723c <_Z16linkbus_reset_rxv+0x5a>
    71f6:	e0 e8       	ldi	r30, 0x80	; 128
    71f8:	f8 e0       	ldi	r31, 0x08	; 8
    71fa:	86 81       	ldd	r24, Z+6	; 0x06
    71fc:	8f 77       	andi	r24, 0x7F	; 127
    71fe:	86 83       	std	Z+6, r24	; 0x06
    7200:	84 e8       	ldi	r24, 0x84	; 132
    7202:	aa ec       	ldi	r26, 0xCA	; 202
    7204:	b7 e4       	ldi	r27, 0x47	; 71
    7206:	ed 01       	movw	r28, r26
    7208:	19 92       	st	Y+, r1
    720a:	8a 95       	dec	r24
    720c:	e9 f7       	brne	.-6      	; 0x7208 <_Z16linkbus_reset_rxv+0x26>
    720e:	86 81       	ldd	r24, Z+6	; 0x06
    7210:	80 68       	ori	r24, 0x80	; 128
    7212:	86 83       	std	Z+6, r24	; 0x06
    7214:	13 c0       	rjmp	.+38     	; 0x723c <_Z16linkbus_reset_rxv+0x5a>
    7216:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    721a:	88 23       	and	r24, r24
    721c:	7c f4       	brge	.+30     	; 0x723c <_Z16linkbus_reset_rxv+0x5a>
    721e:	e0 e2       	ldi	r30, 0x20	; 32
    7220:	f8 e0       	ldi	r31, 0x08	; 8
    7222:	86 81       	ldd	r24, Z+6	; 0x06
    7224:	8f 77       	andi	r24, 0x7F	; 127
    7226:	86 83       	std	Z+6, r24	; 0x06
    7228:	84 e8       	ldi	r24, 0x84	; 132
    722a:	aa ec       	ldi	r26, 0xCA	; 202
    722c:	b7 e4       	ldi	r27, 0x47	; 71
    722e:	ed 01       	movw	r28, r26
    7230:	19 92       	st	Y+, r1
    7232:	8a 95       	dec	r24
    7234:	e9 f7       	brne	.-6      	; 0x7230 <_Z16linkbus_reset_rxv+0x4e>
    7236:	86 81       	ldd	r24, Z+6	; 0x06
    7238:	80 68       	ori	r24, 0x80	; 128
    723a:	86 83       	std	Z+6, r24	; 0x06
    723c:	df 91       	pop	r29
    723e:	cf 91       	pop	r28
    7240:	08 95       	ret

00007242 <_Z12linkbus_initm14USART_Number_t>:
    7242:	cf 92       	push	r12
    7244:	df 92       	push	r13
    7246:	ef 92       	push	r14
    7248:	ff 92       	push	r15
    724a:	cf 93       	push	r28
    724c:	6b 01       	movw	r12, r22
    724e:	7c 01       	movw	r14, r24
    7250:	84 e8       	ldi	r24, 0x84	; 132
    7252:	ea ec       	ldi	r30, 0xCA	; 202
    7254:	f7 e4       	ldi	r31, 0x47	; 71
    7256:	df 01       	movw	r26, r30
    7258:	1d 92       	st	X+, r1
    725a:	8a 95       	dec	r24
    725c:	e9 f7       	brne	.-6      	; 0x7258 <_Z12linkbus_initm14USART_Number_t+0x16>
    725e:	80 e0       	ldi	r24, 0x00	; 0
    7260:	90 e0       	ldi	r25, 0x00	; 0
    7262:	84 30       	cpi	r24, 0x04	; 4
    7264:	91 05       	cpc	r25, r1
    7266:	5c f4       	brge	.+22     	; 0x727e <_Z12linkbus_initm14USART_Number_t+0x3c>
    7268:	22 e3       	ldi	r18, 0x32	; 50
    726a:	28 9f       	mul	r18, r24
    726c:	f0 01       	movw	r30, r0
    726e:	29 9f       	mul	r18, r25
    7270:	f0 0d       	add	r31, r0
    7272:	11 24       	eor	r1, r1
    7274:	e2 5b       	subi	r30, 0xB2	; 178
    7276:	f7 4b       	sbci	r31, 0xB7	; 183
    7278:	10 82       	st	Z, r1
    727a:	01 96       	adiw	r24, 0x01	; 1
    727c:	f2 cf       	rjmp	.-28     	; 0x7262 <_Z12linkbus_initm14USART_Number_t+0x20>
    727e:	46 30       	cpi	r20, 0x06	; 6
    7280:	21 f4       	brne	.+8      	; 0x728a <_Z12linkbus_initm14USART_Number_t+0x48>
    7282:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    7286:	87 30       	cpi	r24, 0x07	; 7
    7288:	61 f4       	brne	.+24     	; 0x72a2 <_Z12linkbus_initm14USART_Number_t+0x60>
    728a:	c4 2f       	mov	r28, r20
    728c:	c7 01       	movw	r24, r14
    728e:	b6 01       	movw	r22, r12
    7290:	41 11       	cpse	r20, r1
    7292:	03 c0       	rjmp	.+6      	; 0x729a <_Z12linkbus_initm14USART_Number_t+0x58>
    7294:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <_ZL21USART4_initializationm>
    7298:	02 c0       	rjmp	.+4      	; 0x729e <_Z12linkbus_initm14USART_Number_t+0x5c>
    729a:	0e 94 01 38 	call	0x7002	; 0x7002 <_ZL21USART1_initializationm>
    729e:	c0 93 21 40 	sts	0x4021, r28	; 0x804021 <g_linkbus_usart_number>
    72a2:	10 92 22 40 	sts	0x4022, r1	; 0x804022 <_ZL14g_bus_disabled>
    72a6:	cf 91       	pop	r28
    72a8:	ff 90       	pop	r15
    72aa:	ef 90       	pop	r14
    72ac:	df 90       	pop	r13
    72ae:	cf 90       	pop	r12
    72b0:	08 95       	ret

000072b2 <_Z15linkbus_disablev>:
    72b2:	81 e0       	ldi	r24, 0x01	; 1
    72b4:	80 93 22 40 	sts	0x4022, r24	; 0x804022 <_ZL14g_bus_disabled>
    72b8:	80 91 21 40 	lds	r24, 0x4021	; 0x804021 <g_linkbus_usart_number>
    72bc:	84 30       	cpi	r24, 0x04	; 4
    72be:	19 f4       	brne	.+6      	; 0x72c6 <_Z15linkbus_disablev+0x14>
    72c0:	0e 94 cc 48 	call	0x9198	; 0x9198 <USART4_disable>
    72c4:	02 c0       	rjmp	.+4      	; 0x72ca <_Z15linkbus_disablev+0x18>
    72c6:	0e 94 98 48 	call	0x9130	; 0x9130 <USART1_disable>
    72ca:	0e 94 db 38 	call	0x71b6	; 0x71b6 <_Z14linkbus_end_txv>
    72ce:	84 e8       	ldi	r24, 0x84	; 132
    72d0:	ea ec       	ldi	r30, 0xCA	; 202
    72d2:	f7 e4       	ldi	r31, 0x47	; 71
    72d4:	df 01       	movw	r26, r30
    72d6:	1d 92       	st	X+, r1
    72d8:	8a 95       	dec	r24
    72da:	e9 f7       	brne	.-6      	; 0x72d6 <_Z15linkbus_disablev+0x24>
    72dc:	80 e0       	ldi	r24, 0x00	; 0
    72de:	84 30       	cpi	r24, 0x04	; 4
    72e0:	48 f4       	brcc	.+18     	; 0x72f4 <_Z15linkbus_disablev+0x42>
    72e2:	b2 e3       	ldi	r27, 0x32	; 50
    72e4:	8b 9f       	mul	r24, r27
    72e6:	f0 01       	movw	r30, r0
    72e8:	11 24       	eor	r1, r1
    72ea:	e2 5b       	subi	r30, 0xB2	; 178
    72ec:	f7 4b       	sbci	r31, 0xB7	; 183
    72ee:	10 82       	st	Z, r1
    72f0:	8f 5f       	subi	r24, 0xFF	; 255
    72f2:	f5 cf       	rjmp	.-22     	; 0x72de <_Z15linkbus_disablev+0x2c>
    72f4:	08 95       	ret

000072f6 <_Z12lb_send_textPc>:
    72f6:	ef 92       	push	r14
    72f8:	ff 92       	push	r15
    72fa:	1f 93       	push	r17
    72fc:	cf 93       	push	r28
    72fe:	df 93       	push	r29
    7300:	10 91 22 40 	lds	r17, 0x4022	; 0x804022 <_ZL14g_bus_disabled>
    7304:	11 11       	cpse	r17, r1
    7306:	2d c0       	rjmp	.+90     	; 0x7362 <_Z12lb_send_textPc+0x6c>
    7308:	00 97       	sbiw	r24, 0x00	; 0
    730a:	69 f1       	breq	.+90     	; 0x7366 <_Z12lb_send_textPc+0x70>
    730c:	7c 01       	movw	r14, r24
    730e:	0e 94 52 38 	call	0x70a4	; 0x70a4 <_Z19nextEmptyLBTxBufferv>
    7312:	c8 ec       	ldi	r28, 0xC8	; 200
    7314:	d0 e0       	ldi	r29, 0x00	; 0
    7316:	00 97       	sbiw	r24, 0x00	; 0
    7318:	a1 f4       	brne	.+40     	; 0x7342 <_Z12lb_send_textPc+0x4c>
    731a:	20 97       	sbiw	r28, 0x00	; 0
    731c:	91 f0       	breq	.+36     	; 0x7342 <_Z12lb_send_textPc+0x4c>
    731e:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <_Z19linkbusTxInProgressv>
    7322:	88 23       	and	r24, r24
    7324:	21 f0       	breq	.+8      	; 0x732e <_Z12lb_send_textPc+0x38>
    7326:	20 97       	sbiw	r28, 0x00	; 0
    7328:	19 f4       	brne	.+6      	; 0x7330 <_Z12lb_send_textPc+0x3a>
    732a:	81 2f       	mov	r24, r17
    732c:	01 c0       	rjmp	.+2      	; 0x7330 <_Z12lb_send_textPc+0x3a>
    732e:	81 2f       	mov	r24, r17
    7330:	88 23       	and	r24, r24
    7332:	21 f0       	breq	.+8      	; 0x733c <_Z12lb_send_textPc+0x46>
    7334:	20 97       	sbiw	r28, 0x00	; 0
    7336:	99 f3       	breq	.-26     	; 0x731e <_Z12lb_send_textPc+0x28>
    7338:	21 97       	sbiw	r28, 0x01	; 1
    733a:	f1 cf       	rjmp	.-30     	; 0x731e <_Z12lb_send_textPc+0x28>
    733c:	0e 94 52 38 	call	0x70a4	; 0x70a4 <_Z19nextEmptyLBTxBufferv>
    7340:	ea cf       	rjmp	.-44     	; 0x7316 <_Z12lb_send_textPc+0x20>
    7342:	00 97       	sbiw	r24, 0x00	; 0
    7344:	91 f0       	breq	.+36     	; 0x736a <_Z12lb_send_textPc+0x74>
    7346:	ff 92       	push	r15
    7348:	ef 92       	push	r14
    734a:	9f 93       	push	r25
    734c:	8f 93       	push	r24
    734e:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    7352:	0e 94 12 38 	call	0x7024	; 0x7024 <_ZL16linkbus_start_txv>
    7356:	0f 90       	pop	r0
    7358:	0f 90       	pop	r0
    735a:	0f 90       	pop	r0
    735c:	0f 90       	pop	r0
    735e:	80 e0       	ldi	r24, 0x00	; 0
    7360:	05 c0       	rjmp	.+10     	; 0x736c <_Z12lb_send_textPc+0x76>
    7362:	81 e0       	ldi	r24, 0x01	; 1
    7364:	03 c0       	rjmp	.+6      	; 0x736c <_Z12lb_send_textPc+0x76>
    7366:	81 e0       	ldi	r24, 0x01	; 1
    7368:	01 c0       	rjmp	.+2      	; 0x736c <_Z12lb_send_textPc+0x76>
    736a:	81 e0       	ldi	r24, 0x01	; 1
    736c:	df 91       	pop	r29
    736e:	cf 91       	pop	r28
    7370:	1f 91       	pop	r17
    7372:	ff 90       	pop	r15
    7374:	ef 90       	pop	r14
    7376:	08 95       	ret

00007378 <_Z11lb_send_msg13LBMessageTypePKcPc>:
    7378:	83 30       	cpi	r24, 0x03	; 3
    737a:	29 f0       	breq	.+10     	; 0x7386 <_Z11lb_send_msg13LBMessageTypePKcPc+0xe>
    737c:	82 30       	cpi	r24, 0x02	; 2
    737e:	31 f0       	breq	.+12     	; 0x738c <_Z11lb_send_msg13LBMessageTypePKcPc+0x14>
    7380:	9b e3       	ldi	r25, 0x3B	; 59
    7382:	84 e2       	ldi	r24, 0x24	; 36
    7384:	05 c0       	rjmp	.+10     	; 0x7390 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    7386:	9b e3       	ldi	r25, 0x3B	; 59
    7388:	81 e2       	ldi	r24, 0x21	; 33
    738a:	02 c0       	rjmp	.+4      	; 0x7390 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    738c:	9f e3       	ldi	r25, 0x3F	; 63
    738e:	84 e2       	ldi	r24, 0x24	; 36
    7390:	1f 92       	push	r1
    7392:	9f 93       	push	r25
    7394:	5f 93       	push	r21
    7396:	4f 93       	push	r20
    7398:	7f 93       	push	r23
    739a:	6f 93       	push	r22
    739c:	1f 92       	push	r1
    739e:	8f 93       	push	r24
    73a0:	8d ec       	ldi	r24, 0xCD	; 205
    73a2:	94 e4       	ldi	r25, 0x44	; 68
    73a4:	9f 93       	push	r25
    73a6:	8f 93       	push	r24
    73a8:	87 e1       	ldi	r24, 0x17	; 23
    73aa:	99 e4       	ldi	r25, 0x49	; 73
    73ac:	9f 93       	push	r25
    73ae:	8f 93       	push	r24
    73b0:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    73b4:	87 e1       	ldi	r24, 0x17	; 23
    73b6:	99 e4       	ldi	r25, 0x49	; 73
    73b8:	0e 94 7b 39 	call	0x72f6	; 0x72f6 <_Z12lb_send_textPc>
    73bc:	8d b7       	in	r24, 0x3d	; 61
    73be:	9e b7       	in	r25, 0x3e	; 62
    73c0:	0c 96       	adiw	r24, 0x0c	; 12
    73c2:	8d bf       	out	0x3d, r24	; 61
    73c4:	9e bf       	out	0x3e, r25	; 62
    73c6:	08 95       	ret

000073c8 <_Z16lb_broadcast_numjPKc>:
}


void lb_broadcast_num(uint16_t data, const char* str)
{
    73c8:	0f 93       	push	r16
    73ca:	1f 93       	push	r17
    73cc:	cf 93       	push	r28
    73ce:	df 93       	push	r29
    73d0:	cd b7       	in	r28, 0x3d	; 61
    73d2:	de b7       	in	r29, 0x3e	; 62
    73d4:	26 97       	sbiw	r28, 0x06	; 6
    73d6:	cd bf       	out	0x3d, r28	; 61
    73d8:	de bf       	out	0x3e, r29	; 62
    73da:	8b 01       	movw	r16, r22
	char t[6] = "\0";
    73dc:	20 91 70 44 	lds	r18, 0x4470	; 0x804470 <g_80m_power_table+0x43a>
    73e0:	30 91 71 44 	lds	r19, 0x4471	; 0x804471 <g_80m_power_table+0x43b>
    73e4:	29 83       	std	Y+1, r18	; 0x01
    73e6:	3a 83       	std	Y+2, r19	; 0x02
    73e8:	fe 01       	movw	r30, r28
    73ea:	33 96       	adiw	r30, 0x03	; 3
    73ec:	24 e0       	ldi	r18, 0x04	; 4
    73ee:	df 01       	movw	r26, r30
    73f0:	1d 92       	st	X+, r1
    73f2:	2a 95       	dec	r18
    73f4:	e9 f7       	brne	.-6      	; 0x73f0 <_Z16lb_broadcast_numjPKc+0x28>

	sprintf(t, "%u", data);
    73f6:	9f 93       	push	r25
    73f8:	8f 93       	push	r24
    73fa:	8d ed       	ldi	r24, 0xDD	; 221
    73fc:	94 e4       	ldi	r25, 0x44	; 68
    73fe:	9f 93       	push	r25
    7400:	8f 93       	push	r24
    7402:	ce 01       	movw	r24, r28
    7404:	01 96       	adiw	r24, 0x01	; 1
    7406:	9f 93       	push	r25
    7408:	8f 93       	push	r24
    740a:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
	g_tempMsgBuff[0] = '\0';
    740e:	10 92 17 49 	sts	0x4917, r1	; 0x804917 <_ZL13g_tempMsgBuff>

	if(str)
    7412:	0f 90       	pop	r0
    7414:	0f 90       	pop	r0
    7416:	0f 90       	pop	r0
    7418:	0f 90       	pop	r0
    741a:	0f 90       	pop	r0
    741c:	0f 90       	pop	r0
    741e:	01 15       	cp	r16, r1
    7420:	11 05       	cpc	r17, r1
    7422:	91 f0       	breq	.+36     	; 0x7448 <_Z16lb_broadcast_numjPKc+0x80>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
    7424:	ce 01       	movw	r24, r28
    7426:	01 96       	adiw	r24, 0x01	; 1
    7428:	9f 93       	push	r25
    742a:	8f 93       	push	r24
    742c:	1f 93       	push	r17
    742e:	0f 93       	push	r16
    7430:	80 ee       	ldi	r24, 0xE0	; 224
    7432:	94 e4       	ldi	r25, 0x44	; 68
    7434:	9f 93       	push	r25
    7436:	8f 93       	push	r24
    7438:	87 e1       	ldi	r24, 0x17	; 23
    743a:	99 e4       	ldi	r25, 0x49	; 73
    743c:	9f 93       	push	r25
    743e:	8f 93       	push	r24
    7440:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    7444:	cd bf       	out	0x3d, r28	; 61
    7446:	de bf       	out	0x3e, r29	; 62
	}

	if(g_tempMsgBuff[0]) lb_send_text(g_tempMsgBuff);
    7448:	80 91 17 49 	lds	r24, 0x4917	; 0x804917 <_ZL13g_tempMsgBuff>
    744c:	88 23       	and	r24, r24
    744e:	21 f0       	breq	.+8      	; 0x7458 <_Z16lb_broadcast_numjPKc+0x90>
    7450:	87 e1       	ldi	r24, 0x17	; 23
    7452:	99 e4       	ldi	r25, 0x49	; 73
    7454:	0e 94 7b 39 	call	0x72f6	; 0x72f6 <_Z12lb_send_textPc>
}
    7458:	26 96       	adiw	r28, 0x06	; 6
    745a:	cd bf       	out	0x3d, r28	; 61
    745c:	de bf       	out	0x3e, r29	; 62
    745e:	df 91       	pop	r29
    7460:	cf 91       	pop	r28
    7462:	1f 91       	pop	r17
    7464:	0f 91       	pop	r16
    7466:	08 95       	ret

00007468 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    7468:	90 e0       	ldi	r25, 0x00	; 0
    746a:	fc 01       	movw	r30, r24
    746c:	b0 97       	sbiw	r30, 0x20	; 32
    746e:	ed 35       	cpi	r30, 0x5D	; 93
    7470:	f1 05       	cpc	r31, r1
    7472:	08 f0       	brcs	.+2      	; 0x7476 <_Z12getMorseCharc+0xe>
    7474:	e8 c0       	rjmp	.+464    	; 0x7646 <_Z12getMorseCharc+0x1de>
    7476:	e7 54       	subi	r30, 0x47	; 71
    7478:	ff 4f       	sbci	r31, 0xFF	; 255
    747a:	0c 94 3e 4e 	jmp	0x9c7c	; 0x9c7c <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    747e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    7480:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    7482:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    7484:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7486:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    7488:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    748a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    748c:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    748e:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    7490:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    7492:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7494:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7496:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    7498:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    749a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    749c:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    749e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    74a0:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    74a2:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    74a4:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    74a6:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    74a8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    74aa:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    74ac:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    74ae:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    74b0:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    74b2:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    74b4:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    74b6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    74b8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    74ba:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    74bc:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    74be:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    74c0:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    74c2:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    74c4:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    74c6:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    74c8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    74ca:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    74cc:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    74ce:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    74d0:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    74d2:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    74d4:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    74d6:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    74d8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    74da:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    74dc:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    74de:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    74e0:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    74e2:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    74e4:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    74e6:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    74e8:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    74ea:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    74ec:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    74ee:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    74f0:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    74f2:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    74f4:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    74f6:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    74f8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    74fa:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    74fc:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    74fe:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    7500:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    7502:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7504:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7506:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    7508:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    750a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    750c:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    750e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    7510:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    7512:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    7514:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7516:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    7518:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    751a:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    751c:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    751e:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    7520:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    7522:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    7524:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    7526:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    7528:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    752a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    752c:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    752e:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    7530:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    7532:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    7534:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    7536:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    7538:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    753a:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    753c:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    753e:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    7540:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    7542:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7544:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7546:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    7548:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    754a:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    754c:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    754e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    7550:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    7552:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7554:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    7556:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    7558:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    755a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    755c:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    755e:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    7560:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    7562:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7564:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    7566:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    7568:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    756a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    756c:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    756e:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    7570:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    7572:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7574:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7576:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    7578:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    757a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    757c:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    757e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    7580:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    7582:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7584:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7586:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    7588:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    758a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    758c:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    758e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    7590:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    7592:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7594:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    7596:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    7598:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    759a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    759c:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    759e:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    75a0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    75a2:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    75a4:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    75a6:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    75a8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    75aa:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    75ac:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    75ae:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    75b0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    75b2:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    75b4:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    75b6:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    75b8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    75ba:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    75bc:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    75be:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    75c0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    75c2:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    75c4:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    75c6:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    75c8:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    75ca:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    75cc:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    75ce:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    75d0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    75d2:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    75d4:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    75d6:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    75d8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    75da:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    75dc:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    75de:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    75e0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    75e2:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    75e4:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    75e6:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    75e8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    75ea:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    75ec:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    75ee:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    75f0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    75f2:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    75f4:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    75f6:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    75f8:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    75fa:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    75fc:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    75fe:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    7600:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    7602:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7604:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    7606:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    7608:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    760a:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    760c:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    760e:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    7610:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    7612:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7614:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    7616:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    7618:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    761a:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    761c:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    761e:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    7620:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    7622:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7624:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    7626:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    7628:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    762a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    762c:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    762e:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    7630:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    7632:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    7634:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    7636:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    7638:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    763a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    763c:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    763e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    7640:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    7642:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7644:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    7646:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    7648:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    764a:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    764c:	08 95       	ret

0000764e <_Z9makeMorsePcPbS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a bool indicating whether a CW carrier should be sent
 *  Pass in a pointer to a bool in the second and third arguments:
 */
bool makeMorse(char* s, bool* repeating, bool* finished)
{
    764e:	cf 93       	push	r28
    7650:	df 93       	push	r29
    7652:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static bool completedString = false;
	static bool carrierOn = false;
	static bool holdKeyDown = false;

	if(s)   /* load a new NULL-terminated string to send */
    7654:	00 97       	sbiw	r24, 0x00	; 0
    7656:	b1 f1       	breq	.+108    	; 0x76c4 <_Z9makeMorsePcPbS0_+0x76>
	{
		holdKeyDown = false;
    7658:	10 92 54 49 	sts	0x4954, r1	; 0x804954 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>

		if(repeating)
    765c:	61 15       	cp	r22, r1
    765e:	71 05       	cpc	r23, r1
    7660:	21 f0       	breq	.+8      	; 0x766a <_Z9makeMorsePcPbS0_+0x1c>
		{
			repeat = *repeating;
    7662:	db 01       	movw	r26, r22
    7664:	2c 91       	ld	r18, X
    7666:	20 93 24 40 	sts	0x4024, r18	; 0x804024 <_ZZ9makeMorsePcPbS0_E6repeat>
		}

		if(*s)
    766a:	fc 01       	movw	r30, r24
    766c:	20 81       	ld	r18, Z
    766e:	22 23       	and	r18, r18
    7670:	d9 f0       	breq	.+54     	; 0x76a8 <_Z9makeMorsePcPbS0_+0x5a>
		{
			str = s;
    7672:	80 93 52 49 	sts	0x4952, r24	; 0x804952 <_ZZ9makeMorsePcPbS0_E3str>
    7676:	90 93 53 49 	sts	0x4953, r25	; 0x804953 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			c = ' ';
    767a:	80 e2       	ldi	r24, 0x20	; 32
    767c:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZZ9makeMorsePcPbS0_E1c>
			morseInProgress = getMorseChar(*str);
    7680:	82 2f       	mov	r24, r18
    7682:	0e 94 34 3a 	call	0x7468	; 0x7468 <_Z12getMorseCharc>
    7686:	60 93 4f 49 	sts	0x494F, r22	; 0x80494f <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    768a:	70 93 50 49 	sts	0x4950, r23	; 0x804950 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    768e:	80 93 51 49 	sts	0x4951, r24	; 0x804951 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
			charIndex = 0;
    7692:	10 92 4e 49 	sts	0x494E, r1	; 0x80494e <_ZZ9makeMorsePcPbS0_E9charIndex>
			symbolIndex = 0;
    7696:	10 92 4d 49 	sts	0x494D, r1	; 0x80494d <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			elementIndex = 0;
    769a:	10 92 4c 49 	sts	0x494C, r1	; 0x80494c <_ZZ9makeMorsePcPbS0_E12elementIndex>
			addedSpace = 0;
    769e:	10 92 4b 49 	sts	0x494B, r1	; 0x80494b <_ZZ9makeMorsePcPbS0_E10addedSpace>
			completedString = false;
    76a2:	10 92 4a 49 	sts	0x494A, r1	; 0x80494a <_ZZ9makeMorsePcPbS0_E15completedString>
    76a6:	0a c0       	rjmp	.+20     	; 0x76bc <_Z9makeMorsePcPbS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    76a8:	10 92 52 49 	sts	0x4952, r1	; 0x804952 <_ZZ9makeMorsePcPbS0_E3str>
    76ac:	10 92 53 49 	sts	0x4953, r1	; 0x804953 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			completedString = true;
    76b0:	81 e0       	ldi	r24, 0x01	; 1
    76b2:	80 93 4a 49 	sts	0x494A, r24	; 0x80494a <_ZZ9makeMorsePcPbS0_E15completedString>
			if(finished)
    76b6:	20 97       	sbiw	r28, 0x00	; 0
    76b8:	09 f0       	breq	.+2      	; 0x76bc <_Z9makeMorsePcPbS0_+0x6e>
			{
				*finished = true;
    76ba:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    76bc:	10 92 49 49 	sts	0x4949, r1	; 0x804949 <_ZZ9makeMorsePcPbS0_E9carrierOn>
		return( OFF);
    76c0:	80 e0       	ldi	r24, 0x00	; 0
    76c2:	b8 c0       	rjmp	.+368    	; 0x7834 <_Z9makeMorsePcPbS0_+0x1e6>
	}
	else if(str)
    76c4:	e0 91 52 49 	lds	r30, 0x4952	; 0x804952 <_ZZ9makeMorsePcPbS0_E3str>
    76c8:	f0 91 53 49 	lds	r31, 0x4953	; 0x804953 <_ZZ9makeMorsePcPbS0_E3str+0x1>
    76cc:	30 97       	sbiw	r30, 0x00	; 0
    76ce:	09 f4       	brne	.+2      	; 0x76d2 <_Z9makeMorsePcPbS0_+0x84>
    76d0:	a4 c0       	rjmp	.+328    	; 0x781a <_Z9makeMorsePcPbS0_+0x1cc>
	{
		if(repeating)
    76d2:	61 15       	cp	r22, r1
    76d4:	71 05       	cpc	r23, r1
    76d6:	21 f0       	breq	.+8      	; 0x76e0 <_Z9makeMorsePcPbS0_+0x92>
		{
			*repeating = repeat;
    76d8:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E6repeat>
    76dc:	db 01       	movw	r26, r22
    76de:	8c 93       	st	X, r24
		}

		if(completedString)
    76e0:	80 91 4a 49 	lds	r24, 0x494A	; 0x80494a <_ZZ9makeMorsePcPbS0_E15completedString>
    76e4:	88 23       	and	r24, r24
    76e6:	49 f0       	breq	.+18     	; 0x76fa <_Z9makeMorsePcPbS0_+0xac>
		{
			if(finished)
    76e8:	20 97       	sbiw	r28, 0x00	; 0
    76ea:	09 f4       	brne	.+2      	; 0x76ee <_Z9makeMorsePcPbS0_+0xa0>
    76ec:	a2 c0       	rjmp	.+324    	; 0x7832 <_Z9makeMorsePcPbS0_+0x1e4>
			{
				*finished = true;
    76ee:	81 e0       	ldi	r24, 0x01	; 1
    76f0:	88 83       	st	Y, r24
				holdKeyDown = false;
    76f2:	10 92 54 49 	sts	0x4954, r1	; 0x804954 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
			}
			return( OFF);
    76f6:	80 e0       	ldi	r24, 0x00	; 0
    76f8:	9d c0       	rjmp	.+314    	; 0x7834 <_Z9makeMorsePcPbS0_+0x1e6>
		}

		if(elementIndex)
    76fa:	80 91 4c 49 	lds	r24, 0x494C	; 0x80494c <_ZZ9makeMorsePcPbS0_E12elementIndex>
    76fe:	88 23       	and	r24, r24
    7700:	21 f0       	breq	.+8      	; 0x770a <_Z9makeMorsePcPbS0_+0xbc>
		{
			elementIndex--;
    7702:	81 50       	subi	r24, 0x01	; 1
    7704:	80 93 4c 49 	sts	0x494C, r24	; 0x80494c <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7708:	7e c0       	rjmp	.+252    	; 0x7806 <_Z9makeMorsePcPbS0_+0x1b8>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    770a:	80 91 49 49 	lds	r24, 0x4949	; 0x804949 <_ZZ9makeMorsePcPbS0_E9carrierOn>
    770e:	88 23       	and	r24, r24
    7710:	81 f0       	breq	.+32     	; 0x7732 <_Z9makeMorsePcPbS0_+0xe4>
    7712:	80 91 54 49 	lds	r24, 0x4954	; 0x804954 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    7716:	81 11       	cpse	r24, r1
    7718:	0c c0       	rjmp	.+24     	; 0x7732 <_Z9makeMorsePcPbS0_+0xe4>
		{
			carrierOn = false;
    771a:	10 92 49 49 	sts	0x4949, r1	; 0x804949 <_ZZ9makeMorsePcPbS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    771e:	80 91 4b 49 	lds	r24, 0x494B	; 0x80494b <_ZZ9makeMorsePcPbS0_E10addedSpace>
    7722:	88 23       	and	r24, r24
    7724:	09 f4       	brne	.+2      	; 0x7728 <_Z9makeMorsePcPbS0_+0xda>
    7726:	6f c0       	rjmp	.+222    	; 0x7806 <_Z9makeMorsePcPbS0_+0x1b8>
			{
				elementIndex = addedSpace;
    7728:	80 93 4c 49 	sts	0x494C, r24	; 0x80494c <_ZZ9makeMorsePcPbS0_E12elementIndex>
				addedSpace = 0;
    772c:	10 92 4b 49 	sts	0x494B, r1	; 0x80494b <_ZZ9makeMorsePcPbS0_E10addedSpace>
    7730:	6a c0       	rjmp	.+212    	; 0x7806 <_Z9makeMorsePcPbS0_+0x1b8>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    7732:	90 91 50 49 	lds	r25, 0x4950	; 0x804950 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    7736:	80 91 4d 49 	lds	r24, 0x494D	; 0x80494d <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    773a:	89 17       	cp	r24, r25
    773c:	90 f1       	brcs	.+100    	; 0x77a2 <_Z9makeMorsePcPbS0_+0x154>
			{
				c = (*(str + ++charIndex));
    773e:	80 91 4e 49 	lds	r24, 0x494E	; 0x80494e <_ZZ9makeMorsePcPbS0_E9charIndex>
    7742:	8f 5f       	subi	r24, 0xFF	; 255
    7744:	80 93 4e 49 	sts	0x494E, r24	; 0x80494e <_ZZ9makeMorsePcPbS0_E9charIndex>
    7748:	df 01       	movw	r26, r30
    774a:	a8 0f       	add	r26, r24
    774c:	b1 1d       	adc	r27, r1
    774e:	8c 91       	ld	r24, X
    7750:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZZ9makeMorsePcPbS0_E1c>

				if(!c)  /* wrap to beginning of text */
    7754:	81 11       	cpse	r24, r1
    7756:	19 c0       	rjmp	.+50     	; 0x778a <_Z9makeMorsePcPbS0_+0x13c>
				{
					if(repeat)
    7758:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E6repeat>
    775c:	88 23       	and	r24, r24
    775e:	31 f0       	breq	.+12     	; 0x776c <_Z9makeMorsePcPbS0_+0x11e>
					{
						c = *str;
    7760:	80 81       	ld	r24, Z
    7762:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZZ9makeMorsePcPbS0_E1c>
						charIndex = 0;
    7766:	10 92 4e 49 	sts	0x494E, r1	; 0x80494e <_ZZ9makeMorsePcPbS0_E9charIndex>
    776a:	0f c0       	rjmp	.+30     	; 0x778a <_Z9makeMorsePcPbS0_+0x13c>
					}
					else
					{
						str = NULL;
    776c:	10 92 52 49 	sts	0x4952, r1	; 0x804952 <_ZZ9makeMorsePcPbS0_E3str>
    7770:	10 92 53 49 	sts	0x4953, r1	; 0x804953 <_ZZ9makeMorsePcPbS0_E3str+0x1>
						carrierOn = OFF;
    7774:	10 92 49 49 	sts	0x4949, r1	; 0x804949 <_ZZ9makeMorsePcPbS0_E9carrierOn>
						completedString = true;
    7778:	91 e0       	ldi	r25, 0x01	; 1
    777a:	90 93 4a 49 	sts	0x494A, r25	; 0x80494a <_ZZ9makeMorsePcPbS0_E15completedString>
						if(finished)
    777e:	20 97       	sbiw	r28, 0x00	; 0
    7780:	09 f0       	breq	.+2      	; 0x7784 <_Z9makeMorsePcPbS0_+0x136>
						{
							*finished = true;
    7782:	98 83       	st	Y, r25
						}
						holdKeyDown = false;
    7784:	10 92 54 49 	sts	0x4954, r1	; 0x804954 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
						return( OFF );
    7788:	55 c0       	rjmp	.+170    	; 0x7834 <_Z9makeMorsePcPbS0_+0x1e6>
					}
				}

				morseInProgress = getMorseChar(c);
    778a:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <_ZZ9makeMorsePcPbS0_E1c>
    778e:	0e 94 34 3a 	call	0x7468	; 0x7468 <_Z12getMorseCharc>
    7792:	60 93 4f 49 	sts	0x494F, r22	; 0x80494f <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    7796:	70 93 50 49 	sts	0x4950, r23	; 0x804950 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    779a:	80 93 51 49 	sts	0x4951, r24	; 0x804951 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    779e:	10 92 4d 49 	sts	0x494D, r1	; 0x80494d <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    77a2:	80 91 4f 49 	lds	r24, 0x494F	; 0x80494f <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    77a6:	8d 3f       	cpi	r24, 0xFD	; 253
    77a8:	f8 f4       	brcc	.+62     	; 0x77e8 <_Z9makeMorsePcPbS0_+0x19a>
			{
				bool isDah = morseInProgress.pattern & (1 << symbolIndex++);
    77aa:	30 91 4d 49 	lds	r19, 0x494D	; 0x80494d <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    77ae:	21 e0       	ldi	r18, 0x01	; 1
    77b0:	23 0f       	add	r18, r19
    77b2:	20 93 4d 49 	sts	0x494D, r18	; 0x80494d <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    77b6:	90 e0       	ldi	r25, 0x00	; 0
    77b8:	02 c0       	rjmp	.+4      	; 0x77be <_Z9makeMorsePcPbS0_+0x170>
    77ba:	95 95       	asr	r25
    77bc:	87 95       	ror	r24
    77be:	3a 95       	dec	r19
    77c0:	e2 f7       	brpl	.-8      	; 0x77ba <_Z9makeMorsePcPbS0_+0x16c>

				if(isDah)
    77c2:	80 ff       	sbrs	r24, 0
    77c4:	04 c0       	rjmp	.+8      	; 0x77ce <_Z9makeMorsePcPbS0_+0x180>
				{
					elementIndex = 2;
    77c6:	82 e0       	ldi	r24, 0x02	; 2
    77c8:	80 93 4c 49 	sts	0x494C, r24	; 0x80494c <_ZZ9makeMorsePcPbS0_E12elementIndex>
    77cc:	02 c0       	rjmp	.+4      	; 0x77d2 <_Z9makeMorsePcPbS0_+0x184>
				}
				else
				{
					elementIndex = 0;
    77ce:	10 92 4c 49 	sts	0x494C, r1	; 0x80494c <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}

				carrierOn = true;
    77d2:	81 e0       	ldi	r24, 0x01	; 1
    77d4:	80 93 49 49 	sts	0x4949, r24	; 0x804949 <_ZZ9makeMorsePcPbS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    77d8:	80 91 50 49 	lds	r24, 0x4950	; 0x804950 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    77dc:	28 17       	cp	r18, r24
    77de:	98 f0       	brcs	.+38     	; 0x7806 <_Z9makeMorsePcPbS0_+0x1b8>
				{
					addedSpace = 2;
    77e0:	82 e0       	ldi	r24, 0x02	; 2
    77e2:	80 93 4b 49 	sts	0x494B, r24	; 0x80494b <_ZZ9makeMorsePcPbS0_E10addedSpace>
    77e6:	0f c0       	rjmp	.+30     	; 0x7806 <_Z9makeMorsePcPbS0_+0x1b8>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    77e8:	80 91 50 49 	lds	r24, 0x4950	; 0x804950 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    77ec:	9f ef       	ldi	r25, 0xFF	; 255
    77ee:	90 93 4d 49 	sts	0x494D, r25	; 0x80494d <_ZZ9makeMorsePcPbS0_E11symbolIndex>
				carrierOn = false;
    77f2:	10 92 49 49 	sts	0x4949, r1	; 0x804949 <_ZZ9makeMorsePcPbS0_E9carrierOn>
				if(sym >= 4 )
    77f6:	84 30       	cpi	r24, 0x04	; 4
    77f8:	20 f0       	brcs	.+8      	; 0x7802 <_Z9makeMorsePcPbS0_+0x1b4>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    77fa:	84 50       	subi	r24, 0x04	; 4
    77fc:	80 93 4c 49 	sts	0x494C, r24	; 0x80494c <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7800:	02 c0       	rjmp	.+4      	; 0x7806 <_Z9makeMorsePcPbS0_+0x1b8>
				}
				else
				{
					elementIndex = 0;
    7802:	10 92 4c 49 	sts	0x494C, r1	; 0x80494c <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    7806:	80 91 23 40 	lds	r24, 0x4023	; 0x804023 <_ZZ9makeMorsePcPbS0_E1c>
    780a:	8c 33       	cpi	r24, 0x3C	; 60
    780c:	21 f4       	brne	.+8      	; 0x7816 <_Z9makeMorsePcPbS0_+0x1c8>
		{
			holdKeyDown = true;
    780e:	81 e0       	ldi	r24, 0x01	; 1
    7810:	80 93 54 49 	sts	0x4954, r24	; 0x804954 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    7814:	02 c0       	rjmp	.+4      	; 0x781a <_Z9makeMorsePcPbS0_+0x1cc>
		}
		else
		{
			holdKeyDown = false;
    7816:	10 92 54 49 	sts	0x4954, r1	; 0x804954 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
		}
	}

	if(finished)
    781a:	20 97       	sbiw	r28, 0x00	; 0
    781c:	19 f0       	breq	.+6      	; 0x7824 <_Z9makeMorsePcPbS0_+0x1d6>
	{
		*finished = completedString;
    781e:	80 91 4a 49 	lds	r24, 0x494A	; 0x80494a <_ZZ9makeMorsePcPbS0_E15completedString>
    7822:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    7824:	80 91 54 49 	lds	r24, 0x4954	; 0x804954 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    7828:	81 11       	cpse	r24, r1
    782a:	04 c0       	rjmp	.+8      	; 0x7834 <_Z9makeMorsePcPbS0_+0x1e6>
	{
		return(true);
	}
	else
	{
		return( carrierOn);
    782c:	80 91 49 49 	lds	r24, 0x4949	; 0x804949 <_ZZ9makeMorsePcPbS0_E9carrierOn>
    7830:	01 c0       	rjmp	.+2      	; 0x7834 <_Z9makeMorsePcPbS0_+0x1e6>
			if(finished)
			{
				*finished = true;
				holdKeyDown = false;
			}
			return( OFF);
    7832:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return( carrierOn);
	}
}
    7834:	df 91       	pop	r29
    7836:	cf 91       	pop	r28
    7838:	08 95       	ret

0000783a <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    783a:	cf 92       	push	r12
    783c:	df 92       	push	r13
    783e:	ef 92       	push	r14
    7840:	ff 92       	push	r15
    7842:	1f 93       	push	r17
    7844:	cf 93       	push	r28
    7846:	df 93       	push	r29
    7848:	6c 01       	movw	r12, r24
    784a:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    784c:	c0 e0       	ldi	r28, 0x00	; 0
    784e:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    7850:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    7852:	c4 31       	cpi	r28, 0x14	; 20
    7854:	d1 05       	cpc	r29, r1
    7856:	74 f4       	brge	.+28     	; 0x7874 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    7858:	f6 01       	movw	r30, r12
    785a:	ec 0f       	add	r30, r28
    785c:	fd 1f       	adc	r31, r29
    785e:	80 81       	ld	r24, Z
		if(!c)
    7860:	88 23       	and	r24, r24
    7862:	41 f0       	breq	.+16     	; 0x7874 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    7864:	0e 94 34 3a 	call	0x7468	; 0x7468 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    7868:	6d 3f       	cpi	r22, 0xFD	; 253
    786a:	08 f4       	brcc	.+2      	; 0x786e <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    786c:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    786e:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    7870:	21 96       	adiw	r28, 0x01	; 1
    7872:	ef cf       	rjmp	.-34     	; 0x7852 <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    7874:	80 eb       	ldi	r24, 0xB0	; 176
    7876:	94 e0       	ldi	r25, 0x04	; 4
    7878:	b7 01       	movw	r22, r14
    787a:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <__udivmodhi4>
}
    787e:	16 9f       	mul	r17, r22
    7880:	c0 01       	movw	r24, r0
    7882:	17 9f       	mul	r17, r23
    7884:	90 0d       	add	r25, r0
    7886:	11 24       	eor	r1, r1
    7888:	df 91       	pop	r29
    788a:	cf 91       	pop	r28
    788c:	1f 91       	pop	r17
    788e:	ff 90       	pop	r15
    7890:	ef 90       	pop	r14
    7892:	df 90       	pop	r13
    7894:	cf 90       	pop	r12
    7896:	08 95       	ret

00007898 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    7898:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    789a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    789c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    789e:	40 83       	st	Z, r20
	ret                             // Return to caller
    78a0:	08 95       	ret

000078a2 <_ZL21USART4_initializationm>:
	}
	
	serialbus_end_tx();
	memset((SerialbusRxBuffer*)rx_buffer, 0, sizeof(*(SerialbusRxBuffer*)rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    78a2:	20 b3       	in	r18, 0x10	; 16
    78a4:	2d 7f       	andi	r18, 0xFD	; 253
    78a6:	20 bb       	out	0x10, r18	; 16
    78a8:	e1 e9       	ldi	r30, 0x91	; 145
    78aa:	f4 e0       	ldi	r31, 0x04	; 4
    78ac:	20 81       	ld	r18, Z
    78ae:	27 7f       	andi	r18, 0xF7	; 247
    78b0:	20 83       	st	Z, r18
    78b2:	20 b3       	in	r18, 0x10	; 16
    78b4:	21 60       	ori	r18, 0x01	; 1
    78b6:	20 bb       	out	0x10, r18	; 16
    78b8:	21 b3       	in	r18, 0x11	; 17
    78ba:	21 60       	ori	r18, 0x01	; 1
    78bc:	21 bb       	out	0x11, r18	; 17
    78be:	0e 94 a1 48 	call	0x9142	; 0x9142 <USART4_init>
    78c2:	08 95       	ret

000078c4 <_ZL21USART1_initializationm>:
    78c4:	28 b1       	in	r18, 0x08	; 8
    78c6:	2d 7f       	andi	r18, 0xFD	; 253
    78c8:	28 b9       	out	0x08, r18	; 8
    78ca:	e1 e5       	ldi	r30, 0x51	; 81
    78cc:	f4 e0       	ldi	r31, 0x04	; 4
    78ce:	20 81       	ld	r18, Z
    78d0:	27 7f       	andi	r18, 0xF7	; 247
    78d2:	20 83       	st	Z, r18
    78d4:	28 b1       	in	r18, 0x08	; 8
    78d6:	21 60       	ori	r18, 0x01	; 1
    78d8:	28 b9       	out	0x08, r18	; 8
    78da:	29 b1       	in	r18, 0x09	; 9
    78dc:	21 60       	ori	r18, 0x01	; 1
    78de:	29 b9       	out	0x09, r18	; 9
    78e0:	0e 94 6d 48 	call	0x90da	; 0x90da <USART1_init>
    78e4:	08 95       	ret

000078e6 <nextFullSBTxBuffer>:
    78e6:	90 e0       	ldi	r25, 0x00	; 0
    78e8:	80 91 58 49 	lds	r24, 0x4958	; 0x804958 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    78ec:	28 2f       	mov	r18, r24
    78ee:	30 e0       	ldi	r19, 0x00	; 0
    78f0:	49 e2       	ldi	r20, 0x29	; 41
    78f2:	42 9f       	mul	r20, r18
    78f4:	f0 01       	movw	r30, r0
    78f6:	43 9f       	mul	r20, r19
    78f8:	f0 0d       	add	r31, r0
    78fa:	11 24       	eor	r1, r1
    78fc:	e9 52       	subi	r30, 0x29	; 41
    78fe:	f6 4b       	sbci	r31, 0xB6	; 182
    7900:	40 81       	ld	r20, Z
    7902:	41 11       	cpse	r20, r1
    7904:	0b c0       	rjmp	.+22     	; 0x791c <nextFullSBTxBuffer+0x36>
    7906:	9f 5f       	subi	r25, 0xFF	; 255
    7908:	93 30       	cpi	r25, 0x03	; 3
    790a:	50 f4       	brcc	.+20     	; 0x7920 <nextFullSBTxBuffer+0x3a>
    790c:	8f 5f       	subi	r24, 0xFF	; 255
    790e:	80 93 58 49 	sts	0x4958, r24	; 0x804958 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    7912:	83 30       	cpi	r24, 0x03	; 3
    7914:	48 f3       	brcs	.-46     	; 0x78e8 <nextFullSBTxBuffer+0x2>
    7916:	10 92 58 49 	sts	0x4958, r1	; 0x804958 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    791a:	e6 cf       	rjmp	.-52     	; 0x78e8 <nextFullSBTxBuffer+0x2>
    791c:	81 e0       	ldi	r24, 0x01	; 1
    791e:	01 c0       	rjmp	.+2      	; 0x7922 <nextFullSBTxBuffer+0x3c>
    7920:	80 e0       	ldi	r24, 0x00	; 0
    7922:	88 23       	and	r24, r24
    7924:	49 f0       	breq	.+18     	; 0x7938 <nextFullSBTxBuffer+0x52>
    7926:	49 e2       	ldi	r20, 0x29	; 41
    7928:	42 9f       	mul	r20, r18
    792a:	c0 01       	movw	r24, r0
    792c:	43 9f       	mul	r20, r19
    792e:	90 0d       	add	r25, r0
    7930:	11 24       	eor	r1, r1
    7932:	89 52       	subi	r24, 0x29	; 41
    7934:	96 4b       	sbci	r25, 0xB6	; 182
    7936:	08 95       	ret
    7938:	80 e0       	ldi	r24, 0x00	; 0
    793a:	90 e0       	ldi	r25, 0x00	; 0
    793c:	08 95       	ret

0000793e <nextEmptySBTxBuffer>:
    793e:	90 e0       	ldi	r25, 0x00	; 0
    7940:	80 91 57 49 	lds	r24, 0x4957	; 0x804957 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    7944:	28 2f       	mov	r18, r24
    7946:	30 e0       	ldi	r19, 0x00	; 0
    7948:	49 e2       	ldi	r20, 0x29	; 41
    794a:	42 9f       	mul	r20, r18
    794c:	f0 01       	movw	r30, r0
    794e:	43 9f       	mul	r20, r19
    7950:	f0 0d       	add	r31, r0
    7952:	11 24       	eor	r1, r1
    7954:	e9 52       	subi	r30, 0x29	; 41
    7956:	f6 4b       	sbci	r31, 0xB6	; 182
    7958:	40 81       	ld	r20, Z
    795a:	44 23       	and	r20, r20
    795c:	59 f0       	breq	.+22     	; 0x7974 <nextEmptySBTxBuffer+0x36>
    795e:	9f 5f       	subi	r25, 0xFF	; 255
    7960:	93 30       	cpi	r25, 0x03	; 3
    7962:	50 f4       	brcc	.+20     	; 0x7978 <nextEmptySBTxBuffer+0x3a>
    7964:	8f 5f       	subi	r24, 0xFF	; 255
    7966:	80 93 57 49 	sts	0x4957, r24	; 0x804957 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    796a:	83 30       	cpi	r24, 0x03	; 3
    796c:	48 f3       	brcs	.-46     	; 0x7940 <nextEmptySBTxBuffer+0x2>
    796e:	10 92 57 49 	sts	0x4957, r1	; 0x804957 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    7972:	e6 cf       	rjmp	.-52     	; 0x7940 <nextEmptySBTxBuffer+0x2>
    7974:	81 e0       	ldi	r24, 0x01	; 1
    7976:	01 c0       	rjmp	.+2      	; 0x797a <nextEmptySBTxBuffer+0x3c>
    7978:	80 e0       	ldi	r24, 0x00	; 0
    797a:	88 23       	and	r24, r24
    797c:	49 f0       	breq	.+18     	; 0x7990 <nextEmptySBTxBuffer+0x52>
    797e:	49 e2       	ldi	r20, 0x29	; 41
    7980:	42 9f       	mul	r20, r18
    7982:	c0 01       	movw	r24, r0
    7984:	43 9f       	mul	r20, r19
    7986:	90 0d       	add	r25, r0
    7988:	11 24       	eor	r1, r1
    798a:	89 52       	subi	r24, 0x29	; 41
    798c:	96 4b       	sbci	r25, 0xB6	; 182
    798e:	08 95       	ret
    7990:	80 e0       	ldi	r24, 0x00	; 0
    7992:	90 e0       	ldi	r25, 0x00	; 0
    7994:	08 95       	ret

00007996 <nextEmptySBRxBuffer>:
    7996:	90 e0       	ldi	r25, 0x00	; 0
    7998:	80 91 56 49 	lds	r24, 0x4956	; 0x804956 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    799c:	28 2f       	mov	r18, r24
    799e:	30 e0       	ldi	r19, 0x00	; 0
    79a0:	4f e3       	ldi	r20, 0x3F	; 63
    79a2:	42 9f       	mul	r20, r18
    79a4:	f0 01       	movw	r30, r0
    79a6:	43 9f       	mul	r20, r19
    79a8:	f0 0d       	add	r31, r0
    79aa:	11 24       	eor	r1, r1
    79ac:	e7 5a       	subi	r30, 0xA7	; 167
    79ae:	f6 4b       	sbci	r31, 0xB6	; 182
    79b0:	41 81       	ldd	r20, Z+1	; 0x01
    79b2:	52 81       	ldd	r21, Z+2	; 0x02
    79b4:	45 2b       	or	r20, r21
    79b6:	59 f0       	breq	.+22     	; 0x79ce <nextEmptySBRxBuffer+0x38>
    79b8:	9f 5f       	subi	r25, 0xFF	; 255
    79ba:	92 30       	cpi	r25, 0x02	; 2
    79bc:	50 f4       	brcc	.+20     	; 0x79d2 <nextEmptySBRxBuffer+0x3c>
    79be:	8f 5f       	subi	r24, 0xFF	; 255
    79c0:	80 93 56 49 	sts	0x4956, r24	; 0x804956 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    79c4:	82 30       	cpi	r24, 0x02	; 2
    79c6:	40 f3       	brcs	.-48     	; 0x7998 <nextEmptySBRxBuffer+0x2>
    79c8:	10 92 56 49 	sts	0x4956, r1	; 0x804956 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    79cc:	e5 cf       	rjmp	.-54     	; 0x7998 <nextEmptySBRxBuffer+0x2>
    79ce:	81 e0       	ldi	r24, 0x01	; 1
    79d0:	01 c0       	rjmp	.+2      	; 0x79d4 <nextEmptySBRxBuffer+0x3e>
    79d2:	80 e0       	ldi	r24, 0x00	; 0
    79d4:	88 23       	and	r24, r24
    79d6:	49 f0       	breq	.+18     	; 0x79ea <nextEmptySBRxBuffer+0x54>
    79d8:	4f e3       	ldi	r20, 0x3F	; 63
    79da:	42 9f       	mul	r20, r18
    79dc:	c0 01       	movw	r24, r0
    79de:	43 9f       	mul	r20, r19
    79e0:	90 0d       	add	r25, r0
    79e2:	11 24       	eor	r1, r1
    79e4:	87 5a       	subi	r24, 0xA7	; 167
    79e6:	96 4b       	sbci	r25, 0xB6	; 182
    79e8:	08 95       	ret
    79ea:	80 e0       	ldi	r24, 0x00	; 0
    79ec:	90 e0       	ldi	r25, 0x00	; 0
    79ee:	08 95       	ret

000079f0 <nextFullSBRxBuffer>:
    79f0:	90 e0       	ldi	r25, 0x00	; 0
    79f2:	80 91 55 49 	lds	r24, 0x4955	; 0x804955 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    79f6:	28 2f       	mov	r18, r24
    79f8:	30 e0       	ldi	r19, 0x00	; 0
    79fa:	4f e3       	ldi	r20, 0x3F	; 63
    79fc:	42 9f       	mul	r20, r18
    79fe:	f0 01       	movw	r30, r0
    7a00:	43 9f       	mul	r20, r19
    7a02:	f0 0d       	add	r31, r0
    7a04:	11 24       	eor	r1, r1
    7a06:	e7 5a       	subi	r30, 0xA7	; 167
    7a08:	f6 4b       	sbci	r31, 0xB6	; 182
    7a0a:	41 81       	ldd	r20, Z+1	; 0x01
    7a0c:	52 81       	ldd	r21, Z+2	; 0x02
    7a0e:	45 2b       	or	r20, r21
    7a10:	59 f4       	brne	.+22     	; 0x7a28 <nextFullSBRxBuffer+0x38>
    7a12:	9f 5f       	subi	r25, 0xFF	; 255
    7a14:	92 30       	cpi	r25, 0x02	; 2
    7a16:	50 f4       	brcc	.+20     	; 0x7a2c <nextFullSBRxBuffer+0x3c>
    7a18:	8f 5f       	subi	r24, 0xFF	; 255
    7a1a:	80 93 55 49 	sts	0x4955, r24	; 0x804955 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7a1e:	82 30       	cpi	r24, 0x02	; 2
    7a20:	40 f3       	brcs	.-48     	; 0x79f2 <nextFullSBRxBuffer+0x2>
    7a22:	10 92 55 49 	sts	0x4955, r1	; 0x804955 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7a26:	e5 cf       	rjmp	.-54     	; 0x79f2 <nextFullSBRxBuffer+0x2>
    7a28:	81 e0       	ldi	r24, 0x01	; 1
    7a2a:	01 c0       	rjmp	.+2      	; 0x7a2e <nextFullSBRxBuffer+0x3e>
    7a2c:	80 e0       	ldi	r24, 0x00	; 0
    7a2e:	88 23       	and	r24, r24
    7a30:	49 f0       	breq	.+18     	; 0x7a44 <nextFullSBRxBuffer+0x54>
    7a32:	4f e3       	ldi	r20, 0x3F	; 63
    7a34:	42 9f       	mul	r20, r18
    7a36:	c0 01       	movw	r24, r0
    7a38:	43 9f       	mul	r20, r19
    7a3a:	90 0d       	add	r25, r0
    7a3c:	11 24       	eor	r1, r1
    7a3e:	87 5a       	subi	r24, 0xA7	; 167
    7a40:	96 4b       	sbci	r25, 0xB6	; 182
    7a42:	08 95       	ret
    7a44:	80 e0       	ldi	r24, 0x00	; 0
    7a46:	90 e0       	ldi	r25, 0x00	; 0
    7a48:	08 95       	ret

00007a4a <serialbusTxInProgress>:
    7a4a:	80 91 52 4a 	lds	r24, 0x4A52	; 0x804a52 <_ZL19serialbus_tx_active>
    7a4e:	08 95       	ret

00007a50 <_Z18serialbus_start_txv>:
    7a50:	cf 93       	push	r28
    7a52:	c0 91 52 4a 	lds	r28, 0x4A52	; 0x804a52 <_ZL19serialbus_tx_active>
    7a56:	81 e0       	ldi	r24, 0x01	; 1
    7a58:	c8 27       	eor	r28, r24
    7a5a:	59 f0       	breq	.+22     	; 0x7a72 <_Z18serialbus_start_txv+0x22>
    7a5c:	80 93 52 4a 	sts	0x4A52, r24	; 0x804a52 <_ZL19serialbus_tx_active>
    7a60:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    7a64:	81 11       	cpse	r24, r1
    7a66:	03 c0       	rjmp	.+6      	; 0x7a6e <_Z18serialbus_start_txv+0x1e>
    7a68:	0e 94 c3 48 	call	0x9186	; 0x9186 <USART4_enable_tx>
    7a6c:	02 c0       	rjmp	.+4      	; 0x7a72 <_Z18serialbus_start_txv+0x22>
    7a6e:	0e 94 8f 48 	call	0x911e	; 0x911e <USART1_enable_tx>
    7a72:	8c 2f       	mov	r24, r28
    7a74:	cf 91       	pop	r28
    7a76:	08 95       	ret

00007a78 <serialbus_end_tx>:
    7a78:	80 91 52 4a 	lds	r24, 0x4A52	; 0x804a52 <_ZL19serialbus_tx_active>
    7a7c:	88 23       	and	r24, r24
    7a7e:	89 f0       	breq	.+34     	; 0x7aa2 <serialbus_end_tx+0x2a>
    7a80:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <g_serialbus_usart_number>
    7a84:	84 30       	cpi	r24, 0x04	; 4
    7a86:	31 f4       	brne	.+12     	; 0x7a94 <serialbus_end_tx+0x1c>
    7a88:	e0 e8       	ldi	r30, 0x80	; 128
    7a8a:	f8 e0       	ldi	r31, 0x08	; 8
    7a8c:	85 81       	ldd	r24, Z+5	; 0x05
    7a8e:	8f 7d       	andi	r24, 0xDF	; 223
    7a90:	85 83       	std	Z+5, r24	; 0x05
    7a92:	05 c0       	rjmp	.+10     	; 0x7a9e <serialbus_end_tx+0x26>
    7a94:	e0 e2       	ldi	r30, 0x20	; 32
    7a96:	f8 e0       	ldi	r31, 0x08	; 8
    7a98:	85 81       	ldd	r24, Z+5	; 0x05
    7a9a:	8f 7d       	andi	r24, 0xDF	; 223
    7a9c:	85 83       	std	Z+5, r24	; 0x05
    7a9e:	10 92 52 4a 	sts	0x4A52, r1	; 0x804a52 <_ZL19serialbus_tx_active>
    7aa2:	08 95       	ret

00007aa4 <serialbus_init>:
    7aa4:	cf 93       	push	r28
    7aa6:	2f e3       	ldi	r18, 0x3F	; 63
    7aa8:	e9 e5       	ldi	r30, 0x59	; 89
    7aaa:	f9 e4       	ldi	r31, 0x49	; 73
    7aac:	df 01       	movw	r26, r30
    7aae:	1d 92       	st	X+, r1
    7ab0:	2a 95       	dec	r18
    7ab2:	e9 f7       	brne	.-6      	; 0x7aae <serialbus_init+0xa>
    7ab4:	a0 e0       	ldi	r26, 0x00	; 0
    7ab6:	b0 e0       	ldi	r27, 0x00	; 0
    7ab8:	a3 30       	cpi	r26, 0x03	; 3
    7aba:	b1 05       	cpc	r27, r1
    7abc:	5c f4       	brge	.+22     	; 0x7ad4 <serialbus_init+0x30>
    7abe:	29 e2       	ldi	r18, 0x29	; 41
    7ac0:	2a 9f       	mul	r18, r26
    7ac2:	f0 01       	movw	r30, r0
    7ac4:	2b 9f       	mul	r18, r27
    7ac6:	f0 0d       	add	r31, r0
    7ac8:	11 24       	eor	r1, r1
    7aca:	e9 52       	subi	r30, 0x29	; 41
    7acc:	f6 4b       	sbci	r31, 0xB6	; 182
    7ace:	10 82       	st	Z, r1
    7ad0:	11 96       	adiw	r26, 0x01	; 1
    7ad2:	f2 cf       	rjmp	.-28     	; 0x7ab8 <serialbus_init+0x14>
    7ad4:	46 30       	cpi	r20, 0x06	; 6
    7ad6:	21 f4       	brne	.+8      	; 0x7ae0 <serialbus_init+0x3c>
    7ad8:	20 91 26 40 	lds	r18, 0x4026	; 0x804026 <g_serialbus_usart_number>
    7adc:	27 30       	cpi	r18, 0x07	; 7
    7ade:	51 f4       	brne	.+20     	; 0x7af4 <serialbus_init+0x50>
    7ae0:	c4 2f       	mov	r28, r20
    7ae2:	44 30       	cpi	r20, 0x04	; 4
    7ae4:	19 f4       	brne	.+6      	; 0x7aec <serialbus_init+0x48>
    7ae6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_ZL21USART4_initializationm>
    7aea:	02 c0       	rjmp	.+4      	; 0x7af0 <serialbus_init+0x4c>
    7aec:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_ZL21USART1_initializationm>
    7af0:	c0 93 26 40 	sts	0x4026, r28	; 0x804026 <g_serialbus_usart_number>
    7af4:	10 92 25 40 	sts	0x4025, r1	; 0x804025 <_ZL14g_bus_disabled>
    7af8:	cf 91       	pop	r28
    7afa:	08 95       	ret

00007afc <_Z19serialbus_send_textPc>:
	}
}


bool serialbus_send_text(char* text)
{
    7afc:	ef 92       	push	r14
    7afe:	ff 92       	push	r15
    7b00:	1f 93       	push	r17
    7b02:	cf 93       	push	r28
    7b04:	df 93       	push	r29
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
    7b06:	10 91 25 40 	lds	r17, 0x4025	; 0x804025 <_ZL14g_bus_disabled>
    7b0a:	11 11       	cpse	r17, r1
    7b0c:	2d c0       	rjmp	.+90     	; 0x7b68 <_Z19serialbus_send_textPc+0x6c>
	{
		return( err);
	}

	if(text)
    7b0e:	00 97       	sbiw	r24, 0x00	; 0
    7b10:	69 f1       	breq	.+90     	; 0x7b6c <_Z19serialbus_send_textPc+0x70>
    7b12:	7c 01       	movw	r14, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    7b14:	0e 94 9f 3c 	call	0x793e	; 0x793e <nextEmptySBTxBuffer>


bool serialbus_send_text(char* text)
{
	bool err = true;
	uint16_t tries = 200;
    7b18:	c8 ec       	ldi	r28, 0xC8	; 200
    7b1a:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    7b1c:	00 97       	sbiw	r24, 0x00	; 0
    7b1e:	a1 f4       	brne	.+40     	; 0x7b48 <_Z19serialbus_send_textPc+0x4c>
    7b20:	20 97       	sbiw	r28, 0x00	; 0
    7b22:	91 f0       	breq	.+36     	; 0x7b48 <_Z19serialbus_send_textPc+0x4c>
		{
			while(serialbusTxInProgress() && tries)
    7b24:	0e 94 25 3d 	call	0x7a4a	; 0x7a4a <serialbusTxInProgress>
    7b28:	88 23       	and	r24, r24
    7b2a:	21 f0       	breq	.+8      	; 0x7b34 <_Z19serialbus_send_textPc+0x38>
    7b2c:	20 97       	sbiw	r28, 0x00	; 0
    7b2e:	19 f4       	brne	.+6      	; 0x7b36 <_Z19serialbus_send_textPc+0x3a>
    7b30:	81 2f       	mov	r24, r17
    7b32:	01 c0       	rjmp	.+2      	; 0x7b36 <_Z19serialbus_send_textPc+0x3a>
    7b34:	81 2f       	mov	r24, r17
    7b36:	88 23       	and	r24, r24
    7b38:	21 f0       	breq	.+8      	; 0x7b42 <_Z19serialbus_send_textPc+0x46>
			{
				if(tries)
    7b3a:	20 97       	sbiw	r28, 0x00	; 0
    7b3c:	99 f3       	breq	.-26     	; 0x7b24 <_Z19serialbus_send_textPc+0x28>
				{
					tries--;    /* wait until transmit finishes */
    7b3e:	21 97       	sbiw	r28, 0x01	; 1
    7b40:	f1 cf       	rjmp	.-30     	; 0x7b24 <_Z19serialbus_send_textPc+0x28>
				}
			}
			buff = nextEmptySBTxBuffer();
    7b42:	0e 94 9f 3c 	call	0x793e	; 0x793e <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    7b46:	ea cf       	rjmp	.-44     	; 0x7b1c <_Z19serialbus_send_textPc+0x20>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    7b48:	00 97       	sbiw	r24, 0x00	; 0
    7b4a:	91 f0       	breq	.+36     	; 0x7b70 <_Z19serialbus_send_textPc+0x74>
		{
			sprintf(*buff, text);
    7b4c:	ff 92       	push	r15
    7b4e:	ef 92       	push	r14
    7b50:	9f 93       	push	r25
    7b52:	8f 93       	push	r24
    7b54:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>

			serialbus_start_tx();
    7b58:	0e 94 28 3d 	call	0x7a50	; 0x7a50 <_Z18serialbus_start_txv>
    7b5c:	0f 90       	pop	r0
    7b5e:	0f 90       	pop	r0
    7b60:	0f 90       	pop	r0
    7b62:	0f 90       	pop	r0
			err = false;
    7b64:	80 e0       	ldi	r24, 0x00	; 0
    7b66:	05 c0       	rjmp	.+10     	; 0x7b72 <_Z19serialbus_send_textPc+0x76>
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    7b68:	81 e0       	ldi	r24, 0x01	; 1
    7b6a:	03 c0       	rjmp	.+6      	; 0x7b72 <_Z19serialbus_send_textPc+0x76>
}


bool serialbus_send_text(char* text)
{
	bool err = true;
    7b6c:	81 e0       	ldi	r24, 0x01	; 1
    7b6e:	01 c0       	rjmp	.+2      	; 0x7b72 <_Z19serialbus_send_textPc+0x76>
    7b70:	81 e0       	ldi	r24, 0x01	; 1
			err = false;
		}
	}

	return(err);
}
    7b72:	df 91       	pop	r29
    7b74:	cf 91       	pop	r28
    7b76:	1f 91       	pop	r17
    7b78:	ff 90       	pop	r15
    7b7a:	ef 90       	pop	r14
    7b7c:	08 95       	ret

00007b7e <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    7b7e:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZL14g_bus_disabled>
    7b82:	81 11       	cpse	r24, r1
    7b84:	06 c0       	rjmp	.+12     	; 0x7b92 <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    7b86:	87 ee       	ldi	r24, 0xE7	; 231
    7b88:	94 e4       	ldi	r25, 0x44	; 68
    7b8a:	0e 94 7e 3d 	call	0x7afc	; 0x7afc <_Z19serialbus_send_textPc>
    7b8e:	81 11       	cpse	r24, r1
    7b90:	fa cf       	rjmp	.-12     	; 0x7b86 <sb_send_NewPrompt+0x8>
    7b92:	08 95       	ret

00007b94 <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    7b94:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZL14g_bus_disabled>
    7b98:	81 11       	cpse	r24, r1
    7b9a:	04 c0       	rjmp	.+8      	; 0x7ba4 <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    7b9c:	8a ee       	ldi	r24, 0xEA	; 234
    7b9e:	94 e4       	ldi	r25, 0x44	; 68
    7ba0:	0e 94 7e 3d 	call	0x7afc	; 0x7afc <_Z19serialbus_send_textPc>
    7ba4:	08 95       	ret

00007ba6 <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    7ba6:	90 91 25 40 	lds	r25, 0x4025	; 0x804025 <_ZL14g_bus_disabled>
    7baa:	91 11       	cpse	r25, r1
    7bac:	07 c0       	rjmp	.+14     	; 0x7bbc <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    7bae:	e3 e5       	ldi	r30, 0x53	; 83
    7bb0:	fa e4       	ldi	r31, 0x4A	; 74
    7bb2:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    7bb4:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    7bb6:	cf 01       	movw	r24, r30
    7bb8:	0e 94 7e 3d 	call	0x7afc	; 0x7afc <_Z19serialbus_send_textPc>
    7bbc:	08 95       	ret

00007bbe <sb_send_string>:
}

bool sb_send_string(char* str)
{
    7bbe:	8f 92       	push	r8
    7bc0:	9f 92       	push	r9
    7bc2:	af 92       	push	r10
    7bc4:	bf 92       	push	r11
    7bc6:	df 92       	push	r13
    7bc8:	ef 92       	push	r14
    7bca:	ff 92       	push	r15
    7bcc:	0f 93       	push	r16
    7bce:	1f 93       	push	r17
    7bd0:	cf 93       	push	r28
    7bd2:	df 93       	push	r29
    7bd4:	cd b7       	in	r28, 0x3d	; 61
    7bd6:	de b7       	in	r29, 0x3e	; 62
    7bd8:	aa 97       	sbiw	r28, 0x2a	; 42
    7bda:	cd bf       	out	0x3d, r28	; 61
    7bdc:	de bf       	out	0x3e, r29	; 62
    7bde:	fc 01       	movw	r30, r24
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    7be0:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZL14g_bus_disabled>
    7be4:	81 11       	cpse	r24, r1
    7be6:	45 c0       	rjmp	.+138    	; 0x7c72 <sb_send_string+0xb4>
	{
		return( true);
	}

	if(str == NULL)
    7be8:	30 97       	sbiw	r30, 0x00	; 0
    7bea:	09 f4       	brne	.+2      	; 0x7bee <sb_send_string+0x30>
    7bec:	3f c0       	rjmp	.+126    	; 0x7c6c <sb_send_string+0xae>
	{
		return( true);
	}

	if(!*str)
    7bee:	80 81       	ld	r24, Z
    7bf0:	88 23       	and	r24, r24
    7bf2:	f1 f1       	breq	.+124    	; 0x7c70 <sb_send_string+0xb2>
    7bf4:	4f 01       	movw	r8, r30
	{
		return(true);
	}

	length = strlen(str);
    7bf6:	01 90       	ld	r0, Z+
    7bf8:	00 20       	and	r0, r0
    7bfa:	e9 f7       	brne	.-6      	; 0x7bf6 <sb_send_string+0x38>
    7bfc:	31 97       	sbiw	r30, 0x01	; 1
    7bfe:	5f 01       	movw	r10, r30
    7c00:	a8 18       	sub	r10, r8
    7c02:	b9 08       	sbc	r11, r9

bool sb_send_string(char* str)
{
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
    7c04:	e1 2c       	mov	r14, r1
    7c06:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH);
    7c08:	85 01       	movw	r16, r10
    7c0a:	0e 19       	sub	r16, r14
    7c0c:	1f 09       	sbc	r17, r15
    7c0e:	09 32       	cpi	r16, 0x29	; 41
    7c10:	11 05       	cpc	r17, r1
    7c12:	10 f0       	brcs	.+4      	; 0x7c18 <sb_send_string+0x5a>
    7c14:	09 e2       	ldi	r16, 0x29	; 41
    7c16:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(buf, &str[lengthSent], lengthToSend);
    7c18:	a8 01       	movw	r20, r16
    7c1a:	b4 01       	movw	r22, r8
    7c1c:	6e 0d       	add	r22, r14
    7c1e:	7f 1d       	adc	r23, r15
    7c20:	ce 01       	movw	r24, r28
    7c22:	01 96       	adiw	r24, 0x01	; 1
    7c24:	0e 94 08 50 	call	0xa010	; 0xa010 <strncpy>

		buf[lengthToSend] = '\0';
    7c28:	e1 e0       	ldi	r30, 0x01	; 1
    7c2a:	f0 e0       	ldi	r31, 0x00	; 0
    7c2c:	ec 0f       	add	r30, r28
    7c2e:	fd 1f       	adc	r31, r29
    7c30:	e0 0f       	add	r30, r16
    7c32:	f1 1f       	adc	r31, r17
    7c34:	10 82       	st	Z, r1
		err = serialbus_send_text(buf);
    7c36:	ce 01       	movw	r24, r28
    7c38:	01 96       	adiw	r24, 0x01	; 1
    7c3a:	0e 94 7e 3d 	call	0x7afc	; 0x7afc <_Z19serialbus_send_textPc>
    7c3e:	d8 2e       	mov	r13, r24
		
		if(!err)
    7c40:	81 11       	cpse	r24, r1
    7c42:	04 c0       	rjmp	.+8      	; 0x7c4c <sb_send_string+0x8e>
		{
			while(serialbusTxInProgress())
    7c44:	0e 94 25 3d 	call	0x7a4a	; 0x7a4a <serialbusTxInProgress>
    7c48:	81 11       	cpse	r24, r1
    7c4a:	fc cf       	rjmp	.-8      	; 0x7c44 <sb_send_string+0x86>
			{
				;
			}
		}

		lengthSent += lengthToSend;
    7c4c:	e0 0e       	add	r14, r16
    7c4e:	f1 1e       	adc	r15, r17
		done = err || (lengthSent >= length);
    7c50:	d1 10       	cpse	r13, r1
    7c52:	05 c0       	rjmp	.+10     	; 0x7c5e <sb_send_string+0xa0>
    7c54:	ea 14       	cp	r14, r10
    7c56:	fb 04       	cpc	r15, r11
    7c58:	20 f0       	brcs	.+8      	; 0x7c62 <sb_send_string+0xa4>
    7c5a:	81 e0       	ldi	r24, 0x01	; 1
    7c5c:	03 c0       	rjmp	.+6      	; 0x7c64 <sb_send_string+0xa6>
    7c5e:	81 e0       	ldi	r24, 0x01	; 1
    7c60:	01 c0       	rjmp	.+2      	; 0x7c64 <sb_send_string+0xa6>
    7c62:	80 e0       	ldi	r24, 0x00	; 0
	}while(!done);
    7c64:	88 23       	and	r24, r24
    7c66:	81 f2       	breq	.-96     	; 0x7c08 <sb_send_string+0x4a>

	return( err);
    7c68:	8d 2d       	mov	r24, r13
    7c6a:	03 c0       	rjmp	.+6      	; 0x7c72 <sb_send_string+0xb4>
		return( true);
	}

	if(str == NULL)
	{
		return( true);
    7c6c:	81 e0       	ldi	r24, 0x01	; 1
    7c6e:	01 c0       	rjmp	.+2      	; 0x7c72 <sb_send_string+0xb4>
	}

	if(!*str)
	{
		return(true);
    7c70:	81 e0       	ldi	r24, 0x01	; 1
		lengthSent += lengthToSend;
		done = err || (lengthSent >= length);
	}while(!done);

	return( err);
}
    7c72:	aa 96       	adiw	r28, 0x2a	; 42
    7c74:	cd bf       	out	0x3d, r28	; 61
    7c76:	de bf       	out	0x3e, r29	; 62
    7c78:	df 91       	pop	r29
    7c7a:	cf 91       	pop	r28
    7c7c:	1f 91       	pop	r17
    7c7e:	0f 91       	pop	r16
    7c80:	ff 90       	pop	r15
    7c82:	ef 90       	pop	r14
    7c84:	df 90       	pop	r13
    7c86:	bf 90       	pop	r11
    7c88:	af 90       	pop	r10
    7c8a:	9f 90       	pop	r9
    7c8c:	8f 90       	pop	r8
    7c8e:	08 95       	ret

00007c90 <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    7c90:	4f 92       	push	r4
    7c92:	5f 92       	push	r5
    7c94:	6f 92       	push	r6
    7c96:	7f 92       	push	r7
    7c98:	8f 92       	push	r8
    7c9a:	9f 92       	push	r9
    7c9c:	af 92       	push	r10
    7c9e:	bf 92       	push	r11
    7ca0:	cf 92       	push	r12
    7ca2:	df 92       	push	r13
    7ca4:	ef 92       	push	r14
    7ca6:	ff 92       	push	r15
    7ca8:	0f 93       	push	r16
    7caa:	1f 93       	push	r17
    7cac:	cf 93       	push	r28
    7cae:	df 93       	push	r29
    7cb0:	8c 01       	movw	r16, r24
    7cb2:	eb 01       	movw	r28, r22
    7cb4:	fc 01       	movw	r30, r24
    7cb6:	40 80       	ld	r4, Z
    7cb8:	51 80       	ldd	r5, Z+1	; 0x01
    7cba:	62 80       	ldd	r6, Z+2	; 0x02
    7cbc:	73 80       	ldd	r7, Z+3	; 0x03
    7cbe:	88 80       	ld	r8, Y
    7cc0:	99 80       	ldd	r9, Y+1	; 0x01
    7cc2:	aa 80       	ldd	r10, Y+2	; 0x02
    7cc4:	bb 80       	ldd	r11, Y+3	; 0x03
    7cc6:	41 14       	cp	r4, r1
    7cc8:	51 04       	cpc	r5, r1
    7cca:	61 04       	cpc	r6, r1
    7ccc:	71 04       	cpc	r7, r1
    7cce:	e1 f1       	breq	.+120    	; 0x7d48 <_Z13reduce_by_gcdPmS_+0xb8>
    7cd0:	81 14       	cp	r8, r1
    7cd2:	91 04       	cpc	r9, r1
    7cd4:	a1 04       	cpc	r10, r1
    7cd6:	b1 04       	cpc	r11, r1
    7cd8:	b9 f1       	breq	.+110    	; 0x7d48 <_Z13reduce_by_gcdPmS_+0xb8>
    7cda:	c3 01       	movw	r24, r6
    7cdc:	b2 01       	movw	r22, r4
    7cde:	a5 01       	movw	r20, r10
    7ce0:	94 01       	movw	r18, r8
    7ce2:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    7ce6:	6b 01       	movw	r12, r22
    7ce8:	7c 01       	movw	r14, r24
    7cea:	c1 14       	cp	r12, r1
    7cec:	d1 04       	cpc	r13, r1
    7cee:	e1 04       	cpc	r14, r1
    7cf0:	f1 04       	cpc	r15, r1
    7cf2:	69 f0       	breq	.+26     	; 0x7d0e <_Z13reduce_by_gcdPmS_+0x7e>
    7cf4:	c5 01       	movw	r24, r10
    7cf6:	b4 01       	movw	r22, r8
    7cf8:	a7 01       	movw	r20, r14
    7cfa:	96 01       	movw	r18, r12
    7cfc:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    7d00:	46 01       	movw	r8, r12
    7d02:	57 01       	movw	r10, r14
    7d04:	c6 2e       	mov	r12, r22
    7d06:	d7 2e       	mov	r13, r23
    7d08:	e8 2e       	mov	r14, r24
    7d0a:	f9 2e       	mov	r15, r25
    7d0c:	ee cf       	rjmp	.-36     	; 0x7cea <_Z13reduce_by_gcdPmS_+0x5a>
    7d0e:	f2 e0       	ldi	r31, 0x02	; 2
    7d10:	8f 16       	cp	r8, r31
    7d12:	91 04       	cpc	r9, r1
    7d14:	a1 04       	cpc	r10, r1
    7d16:	b1 04       	cpc	r11, r1
    7d18:	b8 f0       	brcs	.+46     	; 0x7d48 <_Z13reduce_by_gcdPmS_+0xb8>
    7d1a:	c3 01       	movw	r24, r6
    7d1c:	b2 01       	movw	r22, r4
    7d1e:	a5 01       	movw	r20, r10
    7d20:	94 01       	movw	r18, r8
    7d22:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    7d26:	f8 01       	movw	r30, r16
    7d28:	20 83       	st	Z, r18
    7d2a:	31 83       	std	Z+1, r19	; 0x01
    7d2c:	42 83       	std	Z+2, r20	; 0x02
    7d2e:	53 83       	std	Z+3, r21	; 0x03
    7d30:	68 81       	ld	r22, Y
    7d32:	79 81       	ldd	r23, Y+1	; 0x01
    7d34:	8a 81       	ldd	r24, Y+2	; 0x02
    7d36:	9b 81       	ldd	r25, Y+3	; 0x03
    7d38:	a5 01       	movw	r20, r10
    7d3a:	94 01       	movw	r18, r8
    7d3c:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    7d40:	28 83       	st	Y, r18
    7d42:	39 83       	std	Y+1, r19	; 0x01
    7d44:	4a 83       	std	Y+2, r20	; 0x02
    7d46:	5b 83       	std	Y+3, r21	; 0x03
    7d48:	df 91       	pop	r29
    7d4a:	cf 91       	pop	r28
    7d4c:	1f 91       	pop	r17
    7d4e:	0f 91       	pop	r16
    7d50:	ff 90       	pop	r15
    7d52:	ef 90       	pop	r14
    7d54:	df 90       	pop	r13
    7d56:	cf 90       	pop	r12
    7d58:	bf 90       	pop	r11
    7d5a:	af 90       	pop	r10
    7d5c:	9f 90       	pop	r9
    7d5e:	8f 90       	pop	r8
    7d60:	7f 90       	pop	r7
    7d62:	6f 90       	pop	r6
    7d64:	5f 90       	pop	r5
    7d66:	4f 90       	pop	r4
    7d68:	08 95       	ret

00007d6a <_Z8pll_calcmP13u_si5351_regs>:
    7d6a:	4f 92       	push	r4
    7d6c:	5f 92       	push	r5
    7d6e:	6f 92       	push	r6
    7d70:	7f 92       	push	r7
    7d72:	8f 92       	push	r8
    7d74:	9f 92       	push	r9
    7d76:	af 92       	push	r10
    7d78:	bf 92       	push	r11
    7d7a:	cf 92       	push	r12
    7d7c:	df 92       	push	r13
    7d7e:	ef 92       	push	r14
    7d80:	ff 92       	push	r15
    7d82:	0f 93       	push	r16
    7d84:	1f 93       	push	r17
    7d86:	cf 93       	push	r28
    7d88:	df 93       	push	r29
    7d8a:	cd b7       	in	r28, 0x3d	; 61
    7d8c:	de b7       	in	r29, 0x3e	; 62
    7d8e:	28 97       	sbiw	r28, 0x08	; 8
    7d90:	cd bf       	out	0x3d, r28	; 61
    7d92:	de bf       	out	0x3e, r29	; 62
    7d94:	8a 01       	movw	r16, r20
    7d96:	80 90 27 40 	lds	r8, 0x4027	; 0x804027 <_ZL9xtal_freq>
    7d9a:	90 90 28 40 	lds	r9, 0x4028	; 0x804028 <_ZL9xtal_freq+0x1>
    7d9e:	a0 90 29 40 	lds	r10, 0x4029	; 0x804029 <_ZL9xtal_freq+0x2>
    7da2:	b0 90 2a 40 	lds	r11, 0x402A	; 0x80402a <_ZL9xtal_freq+0x3>
    7da6:	a5 01       	movw	r20, r10
    7da8:	94 01       	movw	r18, r8
    7daa:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    7dae:	69 01       	movw	r12, r18
    7db0:	7a 01       	movw	r14, r20
    7db2:	69 83       	std	Y+1, r22	; 0x01
    7db4:	7a 83       	std	Y+2, r23	; 0x02
    7db6:	8b 83       	std	Y+3, r24	; 0x03
    7db8:	9c 83       	std	Y+4, r25	; 0x04
    7dba:	8d 82       	std	Y+5, r8	; 0x05
    7dbc:	9e 82       	std	Y+6, r9	; 0x06
    7dbe:	af 82       	std	Y+7, r10	; 0x07
    7dc0:	b8 86       	std	Y+8, r11	; 0x08
    7dc2:	be 01       	movw	r22, r28
    7dc4:	6b 5f       	subi	r22, 0xFB	; 251
    7dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    7dc8:	ce 01       	movw	r24, r28
    7dca:	01 96       	adiw	r24, 0x01	; 1
    7dcc:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <_Z13reduce_by_gcdPmS_>
    7dd0:	89 80       	ldd	r8, Y+1	; 0x01
    7dd2:	9a 80       	ldd	r9, Y+2	; 0x02
    7dd4:	ab 80       	ldd	r10, Y+3	; 0x03
    7dd6:	bc 80       	ldd	r11, Y+4	; 0x04
    7dd8:	88 0c       	add	r8, r8
    7dda:	99 1c       	adc	r9, r9
    7ddc:	aa 1c       	adc	r10, r10
    7dde:	bb 1c       	adc	r11, r11
    7de0:	88 0c       	add	r8, r8
    7de2:	99 1c       	adc	r9, r9
    7de4:	aa 1c       	adc	r10, r10
    7de6:	bb 1c       	adc	r11, r11
    7de8:	88 0c       	add	r8, r8
    7dea:	99 1c       	adc	r9, r9
    7dec:	aa 1c       	adc	r10, r10
    7dee:	bb 1c       	adc	r11, r11
    7df0:	88 0c       	add	r8, r8
    7df2:	99 1c       	adc	r9, r9
    7df4:	aa 1c       	adc	r10, r10
    7df6:	bb 1c       	adc	r11, r11
    7df8:	88 0c       	add	r8, r8
    7dfa:	99 1c       	adc	r9, r9
    7dfc:	aa 1c       	adc	r10, r10
    7dfe:	bb 1c       	adc	r11, r11
    7e00:	88 0c       	add	r8, r8
    7e02:	99 1c       	adc	r9, r9
    7e04:	aa 1c       	adc	r10, r10
    7e06:	bb 1c       	adc	r11, r11
    7e08:	88 0c       	add	r8, r8
    7e0a:	99 1c       	adc	r9, r9
    7e0c:	aa 1c       	adc	r10, r10
    7e0e:	bb 1c       	adc	r11, r11
    7e10:	4d 80       	ldd	r4, Y+5	; 0x05
    7e12:	5e 80       	ldd	r5, Y+6	; 0x06
    7e14:	6f 80       	ldd	r6, Y+7	; 0x07
    7e16:	78 84       	ldd	r7, Y+8	; 0x08
    7e18:	c5 01       	movw	r24, r10
    7e1a:	b4 01       	movw	r22, r8
    7e1c:	a3 01       	movw	r20, r6
    7e1e:	92 01       	movw	r18, r4
    7e20:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    7e24:	cc 0c       	add	r12, r12
    7e26:	dd 1c       	adc	r13, r13
    7e28:	ee 1c       	adc	r14, r14
    7e2a:	ff 1c       	adc	r15, r15
    7e2c:	cc 0c       	add	r12, r12
    7e2e:	dd 1c       	adc	r13, r13
    7e30:	ee 1c       	adc	r14, r14
    7e32:	ff 1c       	adc	r15, r15
    7e34:	cc 0c       	add	r12, r12
    7e36:	dd 1c       	adc	r13, r13
    7e38:	ee 1c       	adc	r14, r14
    7e3a:	ff 1c       	adc	r15, r15
    7e3c:	cc 0c       	add	r12, r12
    7e3e:	dd 1c       	adc	r13, r13
    7e40:	ee 1c       	adc	r14, r14
    7e42:	ff 1c       	adc	r15, r15
    7e44:	cc 0c       	add	r12, r12
    7e46:	dd 1c       	adc	r13, r13
    7e48:	ee 1c       	adc	r14, r14
    7e4a:	ff 1c       	adc	r15, r15
    7e4c:	cc 0c       	add	r12, r12
    7e4e:	dd 1c       	adc	r13, r13
    7e50:	ee 1c       	adc	r14, r14
    7e52:	ff 1c       	adc	r15, r15
    7e54:	cc 0c       	add	r12, r12
    7e56:	dd 1c       	adc	r13, r13
    7e58:	ee 1c       	adc	r14, r14
    7e5a:	ff 1c       	adc	r15, r15
    7e5c:	c2 0e       	add	r12, r18
    7e5e:	d3 1e       	adc	r13, r19
    7e60:	e4 1e       	adc	r14, r20
    7e62:	f5 1e       	adc	r15, r21
    7e64:	82 e0       	ldi	r24, 0x02	; 2
    7e66:	d8 1a       	sub	r13, r24
    7e68:	e1 08       	sbc	r14, r1
    7e6a:	f1 08       	sbc	r15, r1
    7e6c:	f8 01       	movw	r30, r16
    7e6e:	c0 82       	st	Z, r12
    7e70:	d1 82       	std	Z+1, r13	; 0x01
    7e72:	e2 82       	std	Z+2, r14	; 0x02
    7e74:	f3 82       	std	Z+3, r15	; 0x03
    7e76:	c3 01       	movw	r24, r6
    7e78:	b2 01       	movw	r22, r4
    7e7a:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__mulsi3>
    7e7e:	86 1a       	sub	r8, r22
    7e80:	97 0a       	sbc	r9, r23
    7e82:	a8 0a       	sbc	r10, r24
    7e84:	b9 0a       	sbc	r11, r25
    7e86:	84 82       	std	Z+4, r8	; 0x04
    7e88:	95 82       	std	Z+5, r9	; 0x05
    7e8a:	a6 82       	std	Z+6, r10	; 0x06
    7e8c:	b7 82       	std	Z+7, r11	; 0x07
    7e8e:	40 86       	std	Z+8, r4	; 0x08
    7e90:	51 86       	std	Z+9, r5	; 0x09
    7e92:	62 86       	std	Z+10, r6	; 0x0a
    7e94:	73 86       	std	Z+11, r7	; 0x0b
    7e96:	80 e0       	ldi	r24, 0x00	; 0
    7e98:	28 96       	adiw	r28, 0x08	; 8
    7e9a:	cd bf       	out	0x3d, r28	; 61
    7e9c:	de bf       	out	0x3e, r29	; 62
    7e9e:	df 91       	pop	r29
    7ea0:	cf 91       	pop	r28
    7ea2:	1f 91       	pop	r17
    7ea4:	0f 91       	pop	r16
    7ea6:	ff 90       	pop	r15
    7ea8:	ef 90       	pop	r14
    7eaa:	df 90       	pop	r13
    7eac:	cf 90       	pop	r12
    7eae:	bf 90       	pop	r11
    7eb0:	af 90       	pop	r10
    7eb2:	9f 90       	pop	r9
    7eb4:	8f 90       	pop	r8
    7eb6:	7f 90       	pop	r7
    7eb8:	6f 90       	pop	r6
    7eba:	5f 90       	pop	r5
    7ebc:	4f 90       	pop	r4
    7ebe:	08 95       	ret

00007ec0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    7ec0:	2f 92       	push	r2
    7ec2:	3f 92       	push	r3
    7ec4:	4f 92       	push	r4
    7ec6:	5f 92       	push	r5
    7ec8:	6f 92       	push	r6
    7eca:	7f 92       	push	r7
    7ecc:	8f 92       	push	r8
    7ece:	9f 92       	push	r9
    7ed0:	af 92       	push	r10
    7ed2:	bf 92       	push	r11
    7ed4:	cf 92       	push	r12
    7ed6:	df 92       	push	r13
    7ed8:	ef 92       	push	r14
    7eda:	ff 92       	push	r15
    7edc:	0f 93       	push	r16
    7ede:	1f 93       	push	r17
    7ee0:	cf 93       	push	r28
    7ee2:	df 93       	push	r29
    7ee4:	cd b7       	in	r28, 0x3d	; 61
    7ee6:	de b7       	in	r29, 0x3e	; 62
    7ee8:	25 97       	sbiw	r28, 0x05	; 5
    7eea:	cd bf       	out	0x3d, r28	; 61
    7eec:	de bf       	out	0x3e, r29	; 62
    7eee:	2b 01       	movw	r4, r22
    7ef0:	3c 01       	movw	r6, r24
    7ef2:	4a 83       	std	Y+2, r20	; 0x02
    7ef4:	5b 83       	std	Y+3, r21	; 0x03
    7ef6:	18 01       	movw	r2, r16
    7ef8:	81 e0       	ldi	r24, 0x01	; 1
    7efa:	f9 01       	movw	r30, r18
    7efc:	80 83       	st	Z, r24
    7efe:	f0 e8       	ldi	r31, 0x80	; 128
    7f00:	4f 16       	cp	r4, r31
    7f02:	f1 ed       	ldi	r31, 0xD1	; 209
    7f04:	5f 06       	cpc	r5, r31
    7f06:	f0 ef       	ldi	r31, 0xF0	; 240
    7f08:	6f 06       	cpc	r6, r31
    7f0a:	f8 e0       	ldi	r31, 0x08	; 8
    7f0c:	7f 06       	cpc	r7, r31
    7f0e:	d0 f0       	brcs	.+52     	; 0x7f44 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x84>
    7f10:	c3 01       	movw	r24, r6
    7f12:	b2 01       	movw	r22, r4
    7f14:	66 0f       	add	r22, r22
    7f16:	77 1f       	adc	r23, r23
    7f18:	88 1f       	adc	r24, r24
    7f1a:	99 1f       	adc	r25, r25
    7f1c:	66 0f       	add	r22, r22
    7f1e:	77 1f       	adc	r23, r23
    7f20:	88 1f       	adc	r24, r24
    7f22:	99 1f       	adc	r25, r25
    7f24:	c1 2c       	mov	r12, r1
    7f26:	d1 2c       	mov	r13, r1
    7f28:	76 01       	movw	r14, r12
    7f2a:	68 94       	set
    7f2c:	c2 f8       	bld	r12, 2
    7f2e:	48 c0       	rjmp	.+144    	; 0x7fc0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7f30:	21 e0       	ldi	r18, 0x01	; 1
    7f32:	2d 83       	std	Y+5, r18	; 0x05
    7f34:	0d c0       	rjmp	.+26     	; 0x7f50 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7f36:	69 01       	movw	r12, r18
    7f38:	7a 01       	movw	r14, r20
    7f3a:	31 e0       	ldi	r19, 0x01	; 1
    7f3c:	39 83       	std	Y+1, r19	; 0x01
    7f3e:	81 e0       	ldi	r24, 0x01	; 1
    7f40:	8d 83       	std	Y+5, r24	; 0x05
    7f42:	06 c0       	rjmp	.+12     	; 0x7f50 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7f44:	1c 82       	std	Y+4, r1	; 0x04
    7f46:	19 82       	std	Y+1, r1	; 0x01
    7f48:	1d 82       	std	Y+5, r1	; 0x05
    7f4a:	c1 2c       	mov	r12, r1
    7f4c:	d1 2c       	mov	r13, r1
    7f4e:	76 01       	movw	r14, r12
    7f50:	8d 80       	ldd	r8, Y+5	; 0x05
    7f52:	81 10       	cpse	r8, r1
    7f54:	28 c0       	rjmp	.+80     	; 0x7fa6 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xe6>
    7f56:	9c 80       	ldd	r9, Y+4	; 0x04
    7f58:	a9 2d       	mov	r26, r9
    7f5a:	b0 e0       	ldi	r27, 0x00	; 0
    7f5c:	a3 01       	movw	r20, r6
    7f5e:	92 01       	movw	r18, r4
    7f60:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <__muluhisi3>
    7f64:	00 e0       	ldi	r16, 0x00	; 0
    7f66:	19 ee       	ldi	r17, 0xE9	; 233
    7f68:	24 ea       	ldi	r18, 0xA4	; 164
    7f6a:	35 e3       	ldi	r19, 0x35	; 53
    7f6c:	48 01       	movw	r8, r16
    7f6e:	59 01       	movw	r10, r18
    7f70:	86 1a       	sub	r8, r22
    7f72:	97 0a       	sbc	r9, r23
    7f74:	a8 0a       	sbc	r10, r24
    7f76:	b9 0a       	sbc	r11, r25
    7f78:	c5 01       	movw	r24, r10
    7f7a:	b4 01       	movw	r22, r8
    7f7c:	2c 81       	ldd	r18, Y+4	; 0x04
    7f7e:	2e 5f       	subi	r18, 0xFE	; 254
    7f80:	2c 83       	std	Y+4, r18	; 0x04
    7f82:	81 14       	cp	r8, r1
    7f84:	36 e4       	ldi	r19, 0x46	; 70
    7f86:	93 06       	cpc	r9, r19
    7f88:	33 ec       	ldi	r19, 0xC3	; 195
    7f8a:	a3 06       	cpc	r10, r19
    7f8c:	33 e2       	ldi	r19, 0x23	; 35
    7f8e:	b3 06       	cpc	r11, r19
    7f90:	78 f2       	brcs	.-98     	; 0x7f30 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x70>
    7f92:	a3 01       	movw	r20, r6
    7f94:	92 01       	movw	r18, r4
    7f96:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    7f9a:	24 30       	cpi	r18, 0x04	; 4
    7f9c:	31 05       	cpc	r19, r1
    7f9e:	41 05       	cpc	r20, r1
    7fa0:	51 05       	cpc	r21, r1
    7fa2:	48 f6       	brcc	.-110    	; 0x7f36 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x76>
    7fa4:	d5 cf       	rjmp	.-86     	; 0x7f50 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7fa6:	89 80       	ldd	r8, Y+1	; 0x01
    7fa8:	88 20       	and	r8, r8
    7faa:	39 f0       	breq	.+14     	; 0x7fba <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xfa>
    7fac:	a7 01       	movw	r20, r14
    7fae:	96 01       	movw	r18, r12
    7fb0:	c3 01       	movw	r24, r6
    7fb2:	b2 01       	movw	r22, r4
    7fb4:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__mulsi3>
    7fb8:	03 c0       	rjmp	.+6      	; 0x7fc0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7fba:	60 e0       	ldi	r22, 0x00	; 0
    7fbc:	70 e0       	ldi	r23, 0x00	; 0
    7fbe:	cb 01       	movw	r24, r22
    7fc0:	21 e0       	ldi	r18, 0x01	; 1
    7fc2:	34 e0       	ldi	r19, 0x04	; 4
    7fc4:	c3 16       	cp	r12, r19
    7fc6:	d1 04       	cpc	r13, r1
    7fc8:	e1 04       	cpc	r14, r1
    7fca:	f1 04       	cpc	r15, r1
    7fcc:	09 f0       	breq	.+2      	; 0x7fd0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x110>
    7fce:	20 e0       	ldi	r18, 0x00	; 0
    7fd0:	f1 01       	movw	r30, r2
    7fd2:	20 83       	st	Z, r18
    7fd4:	cc 0c       	add	r12, r12
    7fd6:	dd 1c       	adc	r13, r13
    7fd8:	ee 1c       	adc	r14, r14
    7fda:	ff 1c       	adc	r15, r15
    7fdc:	cc 0c       	add	r12, r12
    7fde:	dd 1c       	adc	r13, r13
    7fe0:	ee 1c       	adc	r14, r14
    7fe2:	ff 1c       	adc	r15, r15
    7fe4:	cc 0c       	add	r12, r12
    7fe6:	dd 1c       	adc	r13, r13
    7fe8:	ee 1c       	adc	r14, r14
    7fea:	ff 1c       	adc	r15, r15
    7fec:	cc 0c       	add	r12, r12
    7fee:	dd 1c       	adc	r13, r13
    7ff0:	ee 1c       	adc	r14, r14
    7ff2:	ff 1c       	adc	r15, r15
    7ff4:	cc 0c       	add	r12, r12
    7ff6:	dd 1c       	adc	r13, r13
    7ff8:	ee 1c       	adc	r14, r14
    7ffa:	ff 1c       	adc	r15, r15
    7ffc:	cc 0c       	add	r12, r12
    7ffe:	dd 1c       	adc	r13, r13
    8000:	ee 1c       	adc	r14, r14
    8002:	ff 1c       	adc	r15, r15
    8004:	cc 0c       	add	r12, r12
    8006:	dd 1c       	adc	r13, r13
    8008:	ee 1c       	adc	r14, r14
    800a:	ff 1c       	adc	r15, r15
    800c:	f2 e0       	ldi	r31, 0x02	; 2
    800e:	df 1a       	sub	r13, r31
    8010:	e1 08       	sbc	r14, r1
    8012:	f1 08       	sbc	r15, r1
    8014:	ea 81       	ldd	r30, Y+2	; 0x02
    8016:	fb 81       	ldd	r31, Y+3	; 0x03
    8018:	c0 82       	st	Z, r12
    801a:	d1 82       	std	Z+1, r13	; 0x01
    801c:	e2 82       	std	Z+2, r14	; 0x02
    801e:	f3 82       	std	Z+3, r15	; 0x03
    8020:	14 82       	std	Z+4, r1	; 0x04
    8022:	15 82       	std	Z+5, r1	; 0x05
    8024:	16 82       	std	Z+6, r1	; 0x06
    8026:	17 82       	std	Z+7, r1	; 0x07
    8028:	01 e0       	ldi	r16, 0x01	; 1
    802a:	10 e0       	ldi	r17, 0x00	; 0
    802c:	20 e0       	ldi	r18, 0x00	; 0
    802e:	30 e0       	ldi	r19, 0x00	; 0
    8030:	00 87       	std	Z+8, r16	; 0x08
    8032:	11 87       	std	Z+9, r17	; 0x09
    8034:	22 87       	std	Z+10, r18	; 0x0a
    8036:	33 87       	std	Z+11, r19	; 0x0b
    8038:	25 96       	adiw	r28, 0x05	; 5
    803a:	cd bf       	out	0x3d, r28	; 61
    803c:	de bf       	out	0x3e, r29	; 62
    803e:	df 91       	pop	r29
    8040:	cf 91       	pop	r28
    8042:	1f 91       	pop	r17
    8044:	0f 91       	pop	r16
    8046:	ff 90       	pop	r15
    8048:	ef 90       	pop	r14
    804a:	df 90       	pop	r13
    804c:	cf 90       	pop	r12
    804e:	bf 90       	pop	r11
    8050:	af 90       	pop	r10
    8052:	9f 90       	pop	r9
    8054:	8f 90       	pop	r8
    8056:	7f 90       	pop	r7
    8058:	6f 90       	pop	r6
    805a:	5f 90       	pop	r5
    805c:	4f 90       	pop	r4
    805e:	3f 90       	pop	r3
    8060:	2f 90       	pop	r2
    8062:	08 95       	ret

00008064 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
    8064:	2f 92       	push	r2
    8066:	3f 92       	push	r3
    8068:	4f 92       	push	r4
    806a:	5f 92       	push	r5
    806c:	6f 92       	push	r6
    806e:	7f 92       	push	r7
    8070:	8f 92       	push	r8
    8072:	9f 92       	push	r9
    8074:	af 92       	push	r10
    8076:	bf 92       	push	r11
    8078:	cf 92       	push	r12
    807a:	df 92       	push	r13
    807c:	ef 92       	push	r14
    807e:	ff 92       	push	r15
    8080:	0f 93       	push	r16
    8082:	1f 93       	push	r17
    8084:	cf 93       	push	r28
    8086:	df 93       	push	r29
    8088:	cd b7       	in	r28, 0x3d	; 61
    808a:	de b7       	in	r29, 0x3e	; 62
    808c:	62 97       	sbiw	r28, 0x12	; 18
    808e:	cd bf       	out	0x3d, r28	; 61
    8090:	de bf       	out	0x3e, r29	; 62
    8092:	4b 01       	movw	r8, r22
    8094:	5c 01       	movw	r10, r24
    8096:	1a 01       	movw	r2, r20
    8098:	29 8b       	std	Y+17, r18	; 0x11
    809a:	3a 8b       	std	Y+18, r19	; 0x12
    809c:	60 91 94 4a 	lds	r22, 0x4A94	; 0x804a94 <_ZL8freqVCOB>
    80a0:	70 91 95 4a 	lds	r23, 0x4A95	; 0x804a95 <_ZL8freqVCOB+0x1>
    80a4:	80 91 96 4a 	lds	r24, 0x4A96	; 0x804a96 <_ZL8freqVCOB+0x2>
    80a8:	90 91 97 4a 	lds	r25, 0x4A97	; 0x804a97 <_ZL8freqVCOB+0x3>
    80ac:	a5 01       	movw	r20, r10
    80ae:	94 01       	movw	r18, r8
    80b0:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    80b4:	29 87       	std	Y+9, r18	; 0x09
    80b6:	3a 87       	std	Y+10, r19	; 0x0a
    80b8:	4b 87       	std	Y+11, r20	; 0x0b
    80ba:	5c 87       	std	Y+12, r21	; 0x0c
    80bc:	69 01       	movw	r12, r18
    80be:	7a 01       	movw	r14, r20
    80c0:	69 83       	std	Y+1, r22	; 0x01
    80c2:	7a 83       	std	Y+2, r23	; 0x02
    80c4:	8b 83       	std	Y+3, r24	; 0x03
    80c6:	9c 83       	std	Y+4, r25	; 0x04
    80c8:	8d 82       	std	Y+5, r8	; 0x05
    80ca:	9e 82       	std	Y+6, r9	; 0x06
    80cc:	af 82       	std	Y+7, r10	; 0x07
    80ce:	b8 86       	std	Y+8, r11	; 0x08
    80d0:	be 01       	movw	r22, r28
    80d2:	6b 5f       	subi	r22, 0xFB	; 251
    80d4:	7f 4f       	sbci	r23, 0xFF	; 255
    80d6:	ce 01       	movw	r24, r28
    80d8:	01 96       	adiw	r24, 0x01	; 1
    80da:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <_Z13reduce_by_gcdPmS_>
    80de:	80 91 94 4a 	lds	r24, 0x4A94	; 0x804a94 <_ZL8freqVCOB>
    80e2:	90 91 95 4a 	lds	r25, 0x4A95	; 0x804a95 <_ZL8freqVCOB+0x1>
    80e6:	a0 91 96 4a 	lds	r26, 0x4A96	; 0x804a96 <_ZL8freqVCOB+0x2>
    80ea:	b0 91 97 4a 	lds	r27, 0x4A97	; 0x804a97 <_ZL8freqVCOB+0x3>
    80ee:	8d 87       	std	Y+13, r24	; 0x0d
    80f0:	9e 87       	std	Y+14, r25	; 0x0e
    80f2:	af 87       	std	Y+15, r26	; 0x0f
    80f4:	b8 8b       	std	Y+16, r27	; 0x10
    80f6:	4d 80       	ldd	r4, Y+5	; 0x05
    80f8:	5e 80       	ldd	r5, Y+6	; 0x06
    80fa:	6f 80       	ldd	r6, Y+7	; 0x07
    80fc:	78 84       	ldd	r7, Y+8	; 0x08
    80fe:	29 85       	ldd	r18, Y+9	; 0x09
    8100:	3a 85       	ldd	r19, Y+10	; 0x0a
    8102:	4b 85       	ldd	r20, Y+11	; 0x0b
    8104:	5c 85       	ldd	r21, Y+12	; 0x0c
    8106:	c3 01       	movw	r24, r6
    8108:	b2 01       	movw	r22, r4
    810a:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__mulsi3>
    810e:	89 80       	ldd	r8, Y+1	; 0x01
    8110:	9a 80       	ldd	r9, Y+2	; 0x02
    8112:	ab 80       	ldd	r10, Y+3	; 0x03
    8114:	bc 80       	ldd	r11, Y+4	; 0x04
    8116:	9b 01       	movw	r18, r22
    8118:	ac 01       	movw	r20, r24
    811a:	28 0d       	add	r18, r8
    811c:	39 1d       	adc	r19, r9
    811e:	4a 1d       	adc	r20, r10
    8120:	5b 1d       	adc	r21, r11
    8122:	6d 85       	ldd	r22, Y+13	; 0x0d
    8124:	7e 85       	ldd	r23, Y+14	; 0x0e
    8126:	8f 85       	ldd	r24, Y+15	; 0x0f
    8128:	98 89       	ldd	r25, Y+16	; 0x10
    812a:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    812e:	ca 01       	movw	r24, r20
    8130:	b9 01       	movw	r22, r18
    8132:	a3 01       	movw	r20, r6
    8134:	92 01       	movw	r18, r4
    8136:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__mulsi3>
    813a:	6d 87       	std	Y+13, r22	; 0x0d
    813c:	7e 87       	std	Y+14, r23	; 0x0e
    813e:	8f 87       	std	Y+15, r24	; 0x0f
    8140:	98 8b       	std	Y+16, r25	; 0x10
    8142:	89 28       	or	r8, r9
    8144:	8a 28       	or	r8, r10
    8146:	8b 28       	or	r8, r11
    8148:	29 f4       	brne	.+10     	; 0x8154 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf0>
    814a:	99 85       	ldd	r25, Y+9	; 0x09
    814c:	90 ff       	sbrs	r25, 0
    814e:	04 c0       	rjmp	.+8      	; 0x8158 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf4>
    8150:	80 e0       	ldi	r24, 0x00	; 0
    8152:	03 c0       	rjmp	.+6      	; 0x815a <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    8154:	80 e0       	ldi	r24, 0x00	; 0
    8156:	01 c0       	rjmp	.+2      	; 0x815a <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    8158:	81 e0       	ldi	r24, 0x01	; 1
    815a:	a9 89       	ldd	r26, Y+17	; 0x11
    815c:	ba 89       	ldd	r27, Y+18	; 0x12
    815e:	8c 93       	st	X, r24
    8160:	b4 e0       	ldi	r27, 0x04	; 4
    8162:	cb 16       	cp	r12, r27
    8164:	d1 04       	cpc	r13, r1
    8166:	e1 04       	cpc	r14, r1
    8168:	f1 04       	cpc	r15, r1
    816a:	09 f0       	breq	.+2      	; 0x816e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x10a>
    816c:	80 e0       	ldi	r24, 0x00	; 0
    816e:	f8 01       	movw	r30, r16
    8170:	80 83       	st	Z, r24
    8172:	88 23       	and	r24, r24
    8174:	a1 f0       	breq	.+40     	; 0x819e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x13a>
    8176:	d1 01       	movw	r26, r2
    8178:	1d 92       	st	X+, r1
    817a:	1d 92       	st	X+, r1
    817c:	1d 92       	st	X+, r1
    817e:	1c 92       	st	X, r1
    8180:	13 97       	sbiw	r26, 0x03	; 3
    8182:	f1 01       	movw	r30, r2
    8184:	14 82       	std	Z+4, r1	; 0x04
    8186:	15 82       	std	Z+5, r1	; 0x05
    8188:	16 82       	std	Z+6, r1	; 0x06
    818a:	17 82       	std	Z+7, r1	; 0x07
    818c:	81 e0       	ldi	r24, 0x01	; 1
    818e:	90 e0       	ldi	r25, 0x00	; 0
    8190:	a0 e0       	ldi	r26, 0x00	; 0
    8192:	b0 e0       	ldi	r27, 0x00	; 0
    8194:	80 87       	std	Z+8, r24	; 0x08
    8196:	91 87       	std	Z+9, r25	; 0x09
    8198:	a2 87       	std	Z+10, r26	; 0x0a
    819a:	b3 87       	std	Z+11, r27	; 0x0b
    819c:	69 c0       	rjmp	.+210    	; 0x8270 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x20c>
    819e:	89 80       	ldd	r8, Y+1	; 0x01
    81a0:	9a 80       	ldd	r9, Y+2	; 0x02
    81a2:	ab 80       	ldd	r10, Y+3	; 0x03
    81a4:	bc 80       	ldd	r11, Y+4	; 0x04
    81a6:	88 0c       	add	r8, r8
    81a8:	99 1c       	adc	r9, r9
    81aa:	aa 1c       	adc	r10, r10
    81ac:	bb 1c       	adc	r11, r11
    81ae:	88 0c       	add	r8, r8
    81b0:	99 1c       	adc	r9, r9
    81b2:	aa 1c       	adc	r10, r10
    81b4:	bb 1c       	adc	r11, r11
    81b6:	88 0c       	add	r8, r8
    81b8:	99 1c       	adc	r9, r9
    81ba:	aa 1c       	adc	r10, r10
    81bc:	bb 1c       	adc	r11, r11
    81be:	88 0c       	add	r8, r8
    81c0:	99 1c       	adc	r9, r9
    81c2:	aa 1c       	adc	r10, r10
    81c4:	bb 1c       	adc	r11, r11
    81c6:	88 0c       	add	r8, r8
    81c8:	99 1c       	adc	r9, r9
    81ca:	aa 1c       	adc	r10, r10
    81cc:	bb 1c       	adc	r11, r11
    81ce:	88 0c       	add	r8, r8
    81d0:	99 1c       	adc	r9, r9
    81d2:	aa 1c       	adc	r10, r10
    81d4:	bb 1c       	adc	r11, r11
    81d6:	88 0c       	add	r8, r8
    81d8:	99 1c       	adc	r9, r9
    81da:	aa 1c       	adc	r10, r10
    81dc:	bb 1c       	adc	r11, r11
    81de:	4d 80       	ldd	r4, Y+5	; 0x05
    81e0:	5e 80       	ldd	r5, Y+6	; 0x06
    81e2:	6f 80       	ldd	r6, Y+7	; 0x07
    81e4:	78 84       	ldd	r7, Y+8	; 0x08
    81e6:	c5 01       	movw	r24, r10
    81e8:	b4 01       	movw	r22, r8
    81ea:	a3 01       	movw	r20, r6
    81ec:	92 01       	movw	r18, r4
    81ee:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    81f2:	c9 84       	ldd	r12, Y+9	; 0x09
    81f4:	da 84       	ldd	r13, Y+10	; 0x0a
    81f6:	eb 84       	ldd	r14, Y+11	; 0x0b
    81f8:	fc 84       	ldd	r15, Y+12	; 0x0c
    81fa:	cc 0c       	add	r12, r12
    81fc:	dd 1c       	adc	r13, r13
    81fe:	ee 1c       	adc	r14, r14
    8200:	ff 1c       	adc	r15, r15
    8202:	cc 0c       	add	r12, r12
    8204:	dd 1c       	adc	r13, r13
    8206:	ee 1c       	adc	r14, r14
    8208:	ff 1c       	adc	r15, r15
    820a:	cc 0c       	add	r12, r12
    820c:	dd 1c       	adc	r13, r13
    820e:	ee 1c       	adc	r14, r14
    8210:	ff 1c       	adc	r15, r15
    8212:	cc 0c       	add	r12, r12
    8214:	dd 1c       	adc	r13, r13
    8216:	ee 1c       	adc	r14, r14
    8218:	ff 1c       	adc	r15, r15
    821a:	cc 0c       	add	r12, r12
    821c:	dd 1c       	adc	r13, r13
    821e:	ee 1c       	adc	r14, r14
    8220:	ff 1c       	adc	r15, r15
    8222:	cc 0c       	add	r12, r12
    8224:	dd 1c       	adc	r13, r13
    8226:	ee 1c       	adc	r14, r14
    8228:	ff 1c       	adc	r15, r15
    822a:	cc 0c       	add	r12, r12
    822c:	dd 1c       	adc	r13, r13
    822e:	ee 1c       	adc	r14, r14
    8230:	ff 1c       	adc	r15, r15
    8232:	c2 0e       	add	r12, r18
    8234:	d3 1e       	adc	r13, r19
    8236:	e4 1e       	adc	r14, r20
    8238:	f5 1e       	adc	r15, r21
    823a:	f2 e0       	ldi	r31, 0x02	; 2
    823c:	df 1a       	sub	r13, r31
    823e:	e1 08       	sbc	r14, r1
    8240:	f1 08       	sbc	r15, r1
    8242:	d1 01       	movw	r26, r2
    8244:	cd 92       	st	X+, r12
    8246:	dd 92       	st	X+, r13
    8248:	ed 92       	st	X+, r14
    824a:	fc 92       	st	X, r15
    824c:	13 97       	sbiw	r26, 0x03	; 3
    824e:	c3 01       	movw	r24, r6
    8250:	b2 01       	movw	r22, r4
    8252:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__mulsi3>
    8256:	86 1a       	sub	r8, r22
    8258:	97 0a       	sbc	r9, r23
    825a:	a8 0a       	sbc	r10, r24
    825c:	b9 0a       	sbc	r11, r25
    825e:	f1 01       	movw	r30, r2
    8260:	84 82       	std	Z+4, r8	; 0x04
    8262:	95 82       	std	Z+5, r9	; 0x05
    8264:	a6 82       	std	Z+6, r10	; 0x06
    8266:	b7 82       	std	Z+7, r11	; 0x07
    8268:	40 86       	std	Z+8, r4	; 0x08
    826a:	51 86       	std	Z+9, r5	; 0x09
    826c:	62 86       	std	Z+10, r6	; 0x0a
    826e:	73 86       	std	Z+11, r7	; 0x0b
    8270:	6d 85       	ldd	r22, Y+13	; 0x0d
    8272:	7e 85       	ldd	r23, Y+14	; 0x0e
    8274:	8f 85       	ldd	r24, Y+15	; 0x0f
    8276:	98 89       	ldd	r25, Y+16	; 0x10
    8278:	62 96       	adiw	r28, 0x12	; 18
    827a:	cd bf       	out	0x3d, r28	; 61
    827c:	de bf       	out	0x3e, r29	; 62
    827e:	df 91       	pop	r29
    8280:	cf 91       	pop	r28
    8282:	1f 91       	pop	r17
    8284:	0f 91       	pop	r16
    8286:	ff 90       	pop	r15
    8288:	ef 90       	pop	r14
    828a:	df 90       	pop	r13
    828c:	cf 90       	pop	r12
    828e:	bf 90       	pop	r11
    8290:	af 90       	pop	r10
    8292:	9f 90       	pop	r9
    8294:	8f 90       	pop	r8
    8296:	7f 90       	pop	r7
    8298:	6f 90       	pop	r6
    829a:	5f 90       	pop	r5
    829c:	4f 90       	pop	r4
    829e:	3f 90       	pop	r3
    82a0:	2f 90       	pop	r2
    82a2:	08 95       	ret

000082a4 <_Z17si5351_write_bulkhPhh>:
    82a4:	ff 92       	push	r15
    82a6:	0f 93       	push	r16
    82a8:	1f 93       	push	r17
    82aa:	cf 93       	push	r28
    82ac:	df 93       	push	r29
    82ae:	f8 2e       	mov	r15, r24
    82b0:	8b 01       	movw	r16, r22
    82b2:	d4 2f       	mov	r29, r20
    82b4:	8a e0       	ldi	r24, 0x0A	; 10
    82b6:	cf ef       	ldi	r28, 0xFF	; 255
    82b8:	c8 0f       	add	r28, r24
    82ba:	88 23       	and	r24, r24
    82bc:	71 f0       	breq	.+28     	; 0x82da <_Z17si5351_write_bulkhPhh+0x36>
    82be:	2d 2f       	mov	r18, r29
    82c0:	a8 01       	movw	r20, r16
    82c2:	6f 2d       	mov	r22, r15
    82c4:	80 ec       	ldi	r24, 0xC0	; 192
    82c6:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <I2C_1_SendData>
    82ca:	21 e0       	ldi	r18, 0x01	; 1
    82cc:	d8 13       	cpse	r29, r24
    82ce:	01 c0       	rjmp	.+2      	; 0x82d2 <_Z17si5351_write_bulkhPhh+0x2e>
    82d0:	20 e0       	ldi	r18, 0x00	; 0
    82d2:	d8 17       	cp	r29, r24
    82d4:	21 f0       	breq	.+8      	; 0x82de <_Z17si5351_write_bulkhPhh+0x3a>
    82d6:	91 e0       	ldi	r25, 0x01	; 1
    82d8:	03 c0       	rjmp	.+6      	; 0x82e0 <_Z17si5351_write_bulkhPhh+0x3c>
    82da:	90 e0       	ldi	r25, 0x00	; 0
    82dc:	01 c0       	rjmp	.+2      	; 0x82e0 <_Z17si5351_write_bulkhPhh+0x3c>
    82de:	90 e0       	ldi	r25, 0x00	; 0
    82e0:	8c 2f       	mov	r24, r28
    82e2:	91 11       	cpse	r25, r1
    82e4:	e8 cf       	rjmp	.-48     	; 0x82b6 <_Z17si5351_write_bulkhPhh+0x12>
    82e6:	82 2f       	mov	r24, r18
    82e8:	df 91       	pop	r29
    82ea:	cf 91       	pop	r28
    82ec:	1f 91       	pop	r17
    82ee:	0f 91       	pop	r16
    82f0:	ff 90       	pop	r15
    82f2:	08 95       	ret

000082f4 <_Z7set_pllm10si5351_pll>:
    82f4:	1f 93       	push	r17
    82f6:	cf 93       	push	r28
    82f8:	df 93       	push	r29
    82fa:	cd b7       	in	r28, 0x3d	; 61
    82fc:	de b7       	in	r29, 0x3e	; 62
    82fe:	66 97       	sbiw	r28, 0x16	; 22
    8300:	cd bf       	out	0x3d, r28	; 61
    8302:	de bf       	out	0x3e, r29	; 62
    8304:	14 2f       	mov	r17, r20
    8306:	ae 01       	movw	r20, r28
    8308:	4f 5f       	subi	r20, 0xFF	; 255
    830a:	5f 4f       	sbci	r21, 0xFF	; 255
    830c:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <_Z8pll_calcmP13u_si5351_regs>
    8310:	81 11       	cpse	r24, r1
    8312:	28 c0       	rjmp	.+80     	; 0x8364 <_Z7set_pllm10si5351_pll+0x70>
    8314:	8a 85       	ldd	r24, Y+10	; 0x0a
    8316:	8d 87       	std	Y+13, r24	; 0x0d
    8318:	89 85       	ldd	r24, Y+9	; 0x09
    831a:	8e 87       	std	Y+14, r24	; 0x0e
    831c:	8b 81       	ldd	r24, Y+3	; 0x03
    831e:	83 70       	andi	r24, 0x03	; 3
    8320:	8f 87       	std	Y+15, r24	; 0x0f
    8322:	8a 81       	ldd	r24, Y+2	; 0x02
    8324:	88 8b       	std	Y+16, r24	; 0x10
    8326:	89 81       	ldd	r24, Y+1	; 0x01
    8328:	89 8b       	std	Y+17, r24	; 0x11
    832a:	9b 85       	ldd	r25, Y+11	; 0x0b
    832c:	8f 81       	ldd	r24, Y+7	; 0x07
    832e:	8f 70       	andi	r24, 0x0F	; 15
    8330:	20 e1       	ldi	r18, 0x10	; 16
    8332:	92 9f       	mul	r25, r18
    8334:	80 0d       	add	r24, r0
    8336:	11 24       	eor	r1, r1
    8338:	8a 8b       	std	Y+18, r24	; 0x12
    833a:	8e 81       	ldd	r24, Y+6	; 0x06
    833c:	8b 8b       	std	Y+19, r24	; 0x13
    833e:	8d 81       	ldd	r24, Y+5	; 0x05
    8340:	8c 8b       	std	Y+20, r24	; 0x14
    8342:	11 30       	cpi	r17, 0x01	; 1
    8344:	41 f4       	brne	.+16     	; 0x8356 <_Z7set_pllm10si5351_pll+0x62>
    8346:	48 e0       	ldi	r20, 0x08	; 8
    8348:	be 01       	movw	r22, r28
    834a:	63 5f       	subi	r22, 0xF3	; 243
    834c:	7f 4f       	sbci	r23, 0xFF	; 255
    834e:	8a e1       	ldi	r24, 0x1A	; 26
    8350:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8354:	07 c0       	rjmp	.+14     	; 0x8364 <_Z7set_pllm10si5351_pll+0x70>
    8356:	48 e0       	ldi	r20, 0x08	; 8
    8358:	be 01       	movw	r22, r28
    835a:	63 5f       	subi	r22, 0xF3	; 243
    835c:	7f 4f       	sbci	r23, 0xFF	; 255
    835e:	82 e2       	ldi	r24, 0x22	; 34
    8360:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8364:	66 96       	adiw	r28, 0x16	; 22
    8366:	cd bf       	out	0x3d, r28	; 61
    8368:	de bf       	out	0x3e, r29	; 62
    836a:	df 91       	pop	r29
    836c:	cf 91       	pop	r28
    836e:	1f 91       	pop	r17
    8370:	08 95       	ret

00008372 <_Z16si5351_read_bulkhPhh>:
		while(tries-- && (fail = I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
		return(fail);
	}

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    8372:	ff 92       	push	r15
    8374:	0f 93       	push	r16
    8376:	1f 93       	push	r17
    8378:	cf 93       	push	r28
    837a:	df 93       	push	r29
    837c:	f8 2e       	mov	r15, r24
    837e:	8b 01       	movw	r16, r22
    8380:	d4 2f       	mov	r29, r20
		uint8_t tries = 10;
    8382:	8a e0       	ldi	r24, 0x0A	; 10
		bool fail;
		while(tries-- && (fail = I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    8384:	cf ef       	ldi	r28, 0xFF	; 255
    8386:	c8 0f       	add	r28, r24
    8388:	88 23       	and	r24, r24
    838a:	71 f0       	breq	.+28     	; 0x83a8 <_Z16si5351_read_bulkhPhh+0x36>
    838c:	2d 2f       	mov	r18, r29
    838e:	a8 01       	movw	r20, r16
    8390:	6f 2d       	mov	r22, r15
    8392:	80 ec       	ldi	r24, 0xC0	; 192
    8394:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <I2C_1_GetData>
    8398:	21 e0       	ldi	r18, 0x01	; 1
    839a:	d8 13       	cpse	r29, r24
    839c:	01 c0       	rjmp	.+2      	; 0x83a0 <_Z16si5351_read_bulkhPhh+0x2e>
    839e:	20 e0       	ldi	r18, 0x00	; 0
    83a0:	d8 17       	cp	r29, r24
    83a2:	21 f0       	breq	.+8      	; 0x83ac <_Z16si5351_read_bulkhPhh+0x3a>
    83a4:	91 e0       	ldi	r25, 0x01	; 1
    83a6:	03 c0       	rjmp	.+6      	; 0x83ae <_Z16si5351_read_bulkhPhh+0x3c>
    83a8:	90 e0       	ldi	r25, 0x00	; 0
    83aa:	01 c0       	rjmp	.+2      	; 0x83ae <_Z16si5351_read_bulkhPhh+0x3c>
    83ac:	90 e0       	ldi	r25, 0x00	; 0
    83ae:	8c 2f       	mov	r24, r28
    83b0:	91 11       	cpse	r25, r1
    83b2:	e8 cf       	rjmp	.-48     	; 0x8384 <_Z16si5351_read_bulkhPhh+0x12>
		return(fail);
	}
    83b4:	82 2f       	mov	r24, r18
    83b6:	df 91       	pop	r29
    83b8:	cf 91       	pop	r28
    83ba:	1f 91       	pop	r17
    83bc:	0f 91       	pop	r16
    83be:	ff 90       	pop	r15
    83c0:	08 95       	ret

000083c2 <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	bool si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    83c2:	cf 92       	push	r12
    83c4:	df 92       	push	r13
    83c6:	ef 92       	push	r14
    83c8:	ff 92       	push	r15
    83ca:	1f 93       	push	r17
    83cc:	cf 93       	push	r28
    83ce:	df 93       	push	r29
    83d0:	00 d0       	rcall	.+0      	; 0x83d2 <si5351_init+0x10>
    83d2:	cd b7       	in	r28, 0x3d	; 61
    83d4:	de b7       	in	r29, 0x3e	; 62
    83d6:	18 2f       	mov	r17, r24
    83d8:	6a 01       	movw	r12, r20
    83da:	7b 01       	movw	r14, r22
		static bool err = false;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    83dc:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <I2C_1_Init>
			uint8_t result_val = 0x00;
			bool result = false;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    83e0:	10 92 94 4a 	sts	0x4A94, r1	; 0x804a94 <_ZL8freqVCOB>
    83e4:	10 92 95 4a 	sts	0x4A95, r1	; 0x804a95 <_ZL8freqVCOB+0x1>
    83e8:	10 92 96 4a 	sts	0x4A96, r1	; 0x804a96 <_ZL8freqVCOB+0x2>
    83ec:	10 92 97 4a 	sts	0x4A97, r1	; 0x804a97 <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    83f0:	80 e4       	ldi	r24, 0x40	; 64
    83f2:	98 e7       	ldi	r25, 0x78	; 120
    83f4:	ad e7       	ldi	r26, 0x7D	; 125
    83f6:	b1 e0       	ldi	r27, 0x01	; 1
    83f8:	80 93 27 40 	sts	0x4027, r24	; 0x804027 <_ZL9xtal_freq>
    83fc:	90 93 28 40 	sts	0x4028, r25	; 0x804028 <_ZL9xtal_freq+0x1>
    8400:	a0 93 29 40 	sts	0x4029, r26	; 0x804029 <_ZL9xtal_freq+0x2>
    8404:	b0 93 2a 40 	sts	0x402A, r27	; 0x80402a <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    8408:	10 92 93 4a 	sts	0x4A93, r1	; 0x804a93 <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    840c:	8f ef       	ldi	r24, 0xFF	; 255
    840e:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    8410:	41 e0       	ldi	r20, 0x01	; 1
    8412:	be 01       	movw	r22, r28
    8414:	6f 5f       	subi	r22, 0xFF	; 255
    8416:	7f 4f       	sbci	r23, 0xFF	; 255
    8418:	83 e0       	ldi	r24, 0x03	; 3
    841a:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    841e:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZZ11si5351_initE3err>
		
		if(err) return err;
    8422:	81 11       	cpse	r24, r1
    8424:	76 c0       	rjmp	.+236    	; 0x8512 <si5351_init+0x150>
		/* Power down clocks */
		data[0] = 0xCC;
    8426:	8c ec       	ldi	r24, 0xCC	; 204
    8428:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    842a:	41 e0       	ldi	r20, 0x01	; 1
    842c:	be 01       	movw	r22, r28
    842e:	6f 5f       	subi	r22, 0xFF	; 255
    8430:	7f 4f       	sbci	r23, 0xFF	; 255
    8432:	80 e1       	ldi	r24, 0x10	; 16
    8434:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8438:	90 91 85 4a 	lds	r25, 0x4A85	; 0x804a85 <_ZZ11si5351_initE3err>
    843c:	89 2b       	or	r24, r25
    843e:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x11, data, 1);
    8442:	41 e0       	ldi	r20, 0x01	; 1
    8444:	be 01       	movw	r22, r28
    8446:	6f 5f       	subi	r22, 0xFF	; 255
    8448:	7f 4f       	sbci	r23, 0xFF	; 255
    844a:	81 e1       	ldi	r24, 0x11	; 17
    844c:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8450:	90 91 85 4a 	lds	r25, 0x4A85	; 0x804a85 <_ZZ11si5351_initE3err>
    8454:	89 2b       	or	r24, r25
    8456:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x12, data, 1);
    845a:	41 e0       	ldi	r20, 0x01	; 1
    845c:	be 01       	movw	r22, r28
    845e:	6f 5f       	subi	r22, 0xFF	; 255
    8460:	7f 4f       	sbci	r23, 0xFF	; 255
    8462:	82 e1       	ldi	r24, 0x12	; 18
    8464:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8468:	90 91 85 4a 	lds	r25, 0x4A85	; 0x804a85 <_ZZ11si5351_initE3err>
    846c:	89 2b       	or	r24, r25
    846e:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZZ11si5351_initE3err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    8472:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    8474:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    8476:	41 e0       	ldi	r20, 0x01	; 1
    8478:	be 01       	movw	r22, r28
    847a:	6f 5f       	subi	r22, 0xFF	; 255
    847c:	7f 4f       	sbci	r23, 0xFF	; 255
    847e:	87 eb       	ldi	r24, 0xB7	; 183
    8480:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8484:	90 91 85 4a 	lds	r25, 0x4A85	; 0x804a85 <_ZZ11si5351_initE3err>
    8488:	89 2b       	or	r24, r25
    848a:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZZ11si5351_initE3err>

		if(!ref_osc_freq)
    848e:	c1 14       	cp	r12, r1
    8490:	d1 04       	cpc	r13, r1
    8492:	e1 04       	cpc	r14, r1
    8494:	f1 04       	cpc	r15, r1
    8496:	51 f4       	brne	.+20     	; 0x84ac <si5351_init+0xea>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    8498:	0f 2e       	mov	r0, r31
    849a:	f0 e4       	ldi	r31, 0x40	; 64
    849c:	cf 2e       	mov	r12, r31
    849e:	f8 e7       	ldi	r31, 0x78	; 120
    84a0:	df 2e       	mov	r13, r31
    84a2:	fd e7       	ldi	r31, 0x7D	; 125
    84a4:	ef 2e       	mov	r14, r31
    84a6:	ff 24       	eor	r15, r15
    84a8:	f3 94       	inc	r15
    84aa:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    84ac:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <_ZL9xtal_freq>
    84b0:	90 91 28 40 	lds	r25, 0x4028	; 0x804028 <_ZL9xtal_freq+0x1>
    84b4:	a0 91 29 40 	lds	r26, 0x4029	; 0x804029 <_ZL9xtal_freq+0x2>
    84b8:	b0 91 2a 40 	lds	r27, 0x402A	; 0x80402a <_ZL9xtal_freq+0x3>
    84bc:	c8 16       	cp	r12, r24
    84be:	d9 06       	cpc	r13, r25
    84c0:	ea 06       	cpc	r14, r26
    84c2:	fb 06       	cpc	r15, r27
    84c4:	01 f1       	breq	.+64     	; 0x8506 <si5351_init+0x144>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    84c6:	41 e0       	ldi	r20, 0x01	; 1
    84c8:	be 01       	movw	r22, r28
    84ca:	6f 5f       	subi	r22, 0xFF	; 255
    84cc:	7f 4f       	sbci	r23, 0xFF	; 255
    84ce:	8f e0       	ldi	r24, 0x0F	; 15
    84d0:	0e 94 b9 41 	call	0x8372	; 0x8372 <_Z16si5351_read_bulkhPhh>
    84d4:	81 11       	cpse	r24, r1
    84d6:	1d c0       	rjmp	.+58     	; 0x8512 <si5351_init+0x150>
			{
				return true;
			}
			
			reg_val = data[0];
    84d8:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    84da:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    84dc:	c0 92 27 40 	sts	0x4027, r12	; 0x804027 <_ZL9xtal_freq>
    84e0:	d0 92 28 40 	sts	0x4028, r13	; 0x804028 <_ZL9xtal_freq+0x1>
    84e4:	e0 92 29 40 	sts	0x4029, r14	; 0x804029 <_ZL9xtal_freq+0x2>
    84e8:	f0 92 2a 40 	sts	0x402A, r15	; 0x80402a <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    84ec:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    84ee:	41 e0       	ldi	r20, 0x01	; 1
    84f0:	be 01       	movw	r22, r28
    84f2:	6f 5f       	subi	r22, 0xFF	; 255
    84f4:	7f 4f       	sbci	r23, 0xFF	; 255
    84f6:	8f e0       	ldi	r24, 0x0F	; 15
    84f8:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    84fc:	90 91 85 4a 	lds	r25, 0x4A85	; 0x804a85 <_ZZ11si5351_initE3err>
    8500:	89 2b       	or	r24, r25
    8502:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZZ11si5351_initE3err>
		}
		
		g_si5351_initialized = !err;
    8506:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZZ11si5351_initE3err>
    850a:	91 e0       	ldi	r25, 0x01	; 1
    850c:	98 27       	eor	r25, r24
    850e:	90 93 86 4a 	sts	0x4A86, r25	; 0x804a86 <g_si5351_initialized>

		return err;
	}
    8512:	0f 90       	pop	r0
    8514:	0f 90       	pop	r0
    8516:	df 91       	pop	r29
    8518:	cf 91       	pop	r28
    851a:	1f 91       	pop	r17
    851c:	ff 90       	pop	r15
    851e:	ef 90       	pop	r14
    8520:	df 90       	pop	r13
    8522:	cf 90       	pop	r12
    8524:	08 95       	ret

00008526 <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, bool enable)
	{
    8526:	0f 93       	push	r16
    8528:	1f 93       	push	r17
    852a:	cf 93       	push	r28
    852c:	df 93       	push	r29
    852e:	00 d0       	rcall	.+0      	; 0x8530 <si5351_clock_enable+0xa>
    8530:	cd b7       	in	r28, 0x3d	; 61
    8532:	de b7       	in	r29, 0x3e	; 62
    8534:	18 2f       	mov	r17, r24
    8536:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    8538:	41 e0       	ldi	r20, 0x01	; 1
    853a:	be 01       	movw	r22, r28
    853c:	6f 5f       	subi	r22, 0xFF	; 255
    853e:	7f 4f       	sbci	r23, 0xFF	; 255
    8540:	83 e0       	ldi	r24, 0x03	; 3
    8542:	0e 94 b9 41 	call	0x8372	; 0x8372 <_Z16si5351_read_bulkhPhh>
    8546:	81 11       	cpse	r24, r1
    8548:	23 c0       	rjmp	.+70     	; 0x8590 <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    854a:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    854c:	00 23       	and	r16, r16
    854e:	59 f0       	breq	.+22     	; 0x8566 <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    8550:	21 e0       	ldi	r18, 0x01	; 1
    8552:	30 e0       	ldi	r19, 0x00	; 0
    8554:	02 c0       	rjmp	.+4      	; 0x855a <si5351_clock_enable+0x34>
    8556:	22 0f       	add	r18, r18
    8558:	33 1f       	adc	r19, r19
    855a:	1a 95       	dec	r17
    855c:	e2 f7       	brpl	.-8      	; 0x8556 <si5351_clock_enable+0x30>
    855e:	82 2f       	mov	r24, r18
    8560:	80 95       	com	r24
    8562:	89 23       	and	r24, r25
    8564:	09 c0       	rjmp	.+18     	; 0x8578 <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    8566:	21 e0       	ldi	r18, 0x01	; 1
    8568:	30 e0       	ldi	r19, 0x00	; 0
    856a:	02 c0       	rjmp	.+4      	; 0x8570 <si5351_clock_enable+0x4a>
    856c:	22 0f       	add	r18, r18
    856e:	33 1f       	adc	r19, r19
    8570:	1a 95       	dec	r17
    8572:	e2 f7       	brpl	.-8      	; 0x856c <si5351_clock_enable+0x46>
    8574:	89 2f       	mov	r24, r25
    8576:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    8578:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    857a:	41 e0       	ldi	r20, 0x01	; 1
    857c:	be 01       	movw	r22, r28
    857e:	6f 5f       	subi	r22, 0xFF	; 255
    8580:	7f 4f       	sbci	r23, 0xFF	; 255
    8582:	83 e0       	ldi	r24, 0x03	; 3
    8584:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8588:	88 23       	and	r24, r24
    858a:	21 f0       	breq	.+8      	; 0x8594 <si5351_clock_enable+0x6e>
    858c:	8c ef       	ldi	r24, 0xFC	; 252
    858e:	03 c0       	rjmp	.+6      	; 0x8596 <si5351_clock_enable+0x70>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    8590:	8c ef       	ldi	r24, 0xFC	; 252
    8592:	01 c0       	rjmp	.+2      	; 0x8596 <si5351_clock_enable+0x70>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    8594:	80 e0       	ldi	r24, 0x00	; 0
	}
    8596:	0f 90       	pop	r0
    8598:	0f 90       	pop	r0
    859a:	df 91       	pop	r29
    859c:	cf 91       	pop	r28
    859e:	1f 91       	pop	r17
    85a0:	0f 91       	pop	r16
    85a2:	08 95       	ret

000085a4 <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    85a4:	0f 93       	push	r16
    85a6:	1f 93       	push	r17
    85a8:	cf 93       	push	r28
    85aa:	df 93       	push	r29
    85ac:	00 d0       	rcall	.+0      	; 0x85ae <si5351_drive_strength+0xa>
    85ae:	cd b7       	in	r28, 0x3d	; 61
    85b0:	de b7       	in	r29, 0x3e	; 62
    85b2:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    85b4:	10 e1       	ldi	r17, 0x10	; 16
    85b6:	18 0f       	add	r17, r24
    85b8:	41 e0       	ldi	r20, 0x01	; 1
    85ba:	be 01       	movw	r22, r28
    85bc:	6f 5f       	subi	r22, 0xFF	; 255
    85be:	7f 4f       	sbci	r23, 0xFF	; 255
    85c0:	81 2f       	mov	r24, r17
    85c2:	0e 94 b9 41 	call	0x8372	; 0x8372 <_Z16si5351_read_bulkhPhh>
    85c6:	81 11       	cpse	r24, r1
    85c8:	1e c0       	rjmp	.+60     	; 0x8606 <si5351_drive_strength+0x62>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    85ca:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    85cc:	01 30       	cpi	r16, 0x01	; 1
    85ce:	41 f0       	breq	.+16     	; 0x85e0 <si5351_drive_strength+0x3c>
    85d0:	28 f0       	brcs	.+10     	; 0x85dc <si5351_drive_strength+0x38>
    85d2:	02 30       	cpi	r16, 0x02	; 2
    85d4:	41 f0       	breq	.+16     	; 0x85e6 <si5351_drive_strength+0x42>
    85d6:	03 30       	cpi	r16, 0x03	; 3
    85d8:	49 f0       	breq	.+18     	; 0x85ec <si5351_drive_strength+0x48>
    85da:	09 c0       	rjmp	.+18     	; 0x85ee <si5351_drive_strength+0x4a>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    85dc:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    85de:	07 c0       	rjmp	.+14     	; 0x85ee <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    85e0:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    85e2:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    85e4:	04 c0       	rjmp	.+8      	; 0x85ee <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    85e6:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    85e8:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    85ea:	01 c0       	rjmp	.+2      	; 0x85ee <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    85ec:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    85ee:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    85f0:	41 e0       	ldi	r20, 0x01	; 1
    85f2:	be 01       	movw	r22, r28
    85f4:	6f 5f       	subi	r22, 0xFF	; 255
    85f6:	7f 4f       	sbci	r23, 0xFF	; 255
    85f8:	81 2f       	mov	r24, r17
    85fa:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    85fe:	88 23       	and	r24, r24
    8600:	21 f0       	breq	.+8      	; 0x860a <si5351_drive_strength+0x66>
    8602:	8b ef       	ldi	r24, 0xFB	; 251
    8604:	03 c0       	rjmp	.+6      	; 0x860c <si5351_drive_strength+0x68>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    8606:	8b ef       	ldi	r24, 0xFB	; 251
    8608:	01 c0       	rjmp	.+2      	; 0x860c <si5351_drive_strength+0x68>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    860a:	80 e0       	ldi	r24, 0x00	; 0
	}
    860c:	0f 90       	pop	r0
    860e:	0f 90       	pop	r0
    8610:	df 91       	pop	r29
    8612:	cf 91       	pop	r28
    8614:	1f 91       	pop	r17
    8616:	0f 91       	pop	r16
    8618:	08 95       	ret

0000861a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    861a:	0f 93       	push	r16
    861c:	1f 93       	push	r17
    861e:	cf 93       	push	r28
    8620:	df 93       	push	r29
    8622:	00 d0       	rcall	.+0      	; 0x8624 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    8624:	cd b7       	in	r28, 0x3d	; 61
    8626:	de b7       	in	r29, 0x3e	; 62
    8628:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    862a:	10 e1       	ldi	r17, 0x10	; 16
    862c:	18 0f       	add	r17, r24
    862e:	41 e0       	ldi	r20, 0x01	; 1
    8630:	be 01       	movw	r22, r28
    8632:	6f 5f       	subi	r22, 0xFF	; 255
    8634:	7f 4f       	sbci	r23, 0xFF	; 255
    8636:	81 2f       	mov	r24, r17
    8638:	0e 94 b9 41 	call	0x8372	; 0x8372 <_Z16si5351_read_bulkhPhh>
    863c:	81 11       	cpse	r24, r1
    863e:	10 c0       	rjmp	.+32     	; 0x8660 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x46>
		{
			return(true);
		}
		
		reg_val = data[0];
    8640:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    8642:	01 30       	cpi	r16, 0x01	; 1
    8644:	11 f4       	brne	.+4      	; 0x864a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    8646:	8f 7d       	andi	r24, 0xDF	; 223
    8648:	03 c0       	rjmp	.+6      	; 0x8650 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    864a:	02 30       	cpi	r16, 0x02	; 2
    864c:	09 f4       	brne	.+2      	; 0x8650 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    864e:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    8650:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    8652:	41 e0       	ldi	r20, 0x01	; 1
    8654:	be 01       	movw	r22, r28
    8656:	6f 5f       	subi	r22, 0xFF	; 255
    8658:	7f 4f       	sbci	r23, 0xFF	; 255
    865a:	81 2f       	mov	r24, r17
    865c:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
		{
			return(true);
		}
		
		return(false);
	}
    8660:	0f 90       	pop	r0
    8662:	0f 90       	pop	r0
    8664:	df 91       	pop	r29
    8666:	cf 91       	pop	r28
    8668:	1f 91       	pop	r17
    866a:	0f 91       	pop	r16
    866c:	08 95       	ret

0000866e <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    866e:	0f 93       	push	r16
    8670:	1f 93       	push	r17
    8672:	cf 93       	push	r28
    8674:	df 93       	push	r29
    8676:	00 d0       	rcall	.+0      	; 0x8678 <_Z16set_integer_mode12si5351_clockb+0xa>
    8678:	cd b7       	in	r28, 0x3d	; 61
    867a:	de b7       	in	r29, 0x3e	; 62
    867c:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    867e:	10 e1       	ldi	r17, 0x10	; 16
    8680:	18 0f       	add	r17, r24
    8682:	41 e0       	ldi	r20, 0x01	; 1
    8684:	be 01       	movw	r22, r28
    8686:	6f 5f       	subi	r22, 0xFF	; 255
    8688:	7f 4f       	sbci	r23, 0xFF	; 255
    868a:	81 2f       	mov	r24, r17
    868c:	0e 94 b9 41 	call	0x8372	; 0x8372 <_Z16si5351_read_bulkhPhh>
    8690:	81 11       	cpse	r24, r1
    8692:	0e c0       	rjmp	.+28     	; 0x86b0 <_Z16set_integer_mode12si5351_clockb+0x42>
		{
			return(true);
		}
		
		reg_val = data[0];
    8694:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    8696:	00 23       	and	r16, r16
    8698:	11 f0       	breq	.+4      	; 0x869e <_Z16set_integer_mode12si5351_clockb+0x30>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    869a:	80 64       	ori	r24, 0x40	; 64
    869c:	01 c0       	rjmp	.+2      	; 0x86a0 <_Z16set_integer_mode12si5351_clockb+0x32>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    869e:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    86a0:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    86a2:	41 e0       	ldi	r20, 0x01	; 1
    86a4:	be 01       	movw	r22, r28
    86a6:	6f 5f       	subi	r22, 0xFF	; 255
    86a8:	7f 4f       	sbci	r23, 0xFF	; 255
    86aa:	81 2f       	mov	r24, r17
    86ac:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
	}
    86b0:	0f 90       	pop	r0
    86b2:	0f 90       	pop	r0
    86b4:	df 91       	pop	r29
    86b6:	cf 91       	pop	r28
    86b8:	1f 91       	pop	r17
    86ba:	0f 91       	pop	r16
    86bc:	08 95       	ret

000086be <_Z6ms_div12si5351_clockhb>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    86be:	ff 92       	push	r15
    86c0:	0f 93       	push	r16
    86c2:	1f 93       	push	r17
    86c4:	cf 93       	push	r28
    86c6:	df 93       	push	r29
    86c8:	00 d0       	rcall	.+0      	; 0x86ca <_Z6ms_div12si5351_clockhb+0xc>
    86ca:	cd b7       	in	r28, 0x3d	; 61
    86cc:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    86ce:	81 30       	cpi	r24, 0x01	; 1
    86d0:	71 f0       	breq	.+28     	; 0x86ee <_Z6ms_div12si5351_clockhb+0x30>
    86d2:	18 f0       	brcs	.+6      	; 0x86da <_Z6ms_div12si5351_clockhb+0x1c>
    86d4:	82 30       	cpi	r24, 0x02	; 2
    86d6:	31 f0       	breq	.+12     	; 0x86e4 <_Z6ms_div12si5351_clockhb+0x26>
    86d8:	2c c0       	rjmp	.+88     	; 0x8732 <_Z6ms_div12si5351_clockhb+0x74>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    86da:	0f 2e       	mov	r0, r31
    86dc:	fc e2       	ldi	r31, 0x2C	; 44
    86de:	ff 2e       	mov	r15, r31
    86e0:	f0 2d       	mov	r31, r0
    86e2:	09 c0       	rjmp	.+18     	; 0x86f6 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    86e4:	0f 2e       	mov	r0, r31
    86e6:	fc e3       	ldi	r31, 0x3C	; 60
    86e8:	ff 2e       	mov	r15, r31
    86ea:	f0 2d       	mov	r31, r0
			}
			break;
    86ec:	04 c0       	rjmp	.+8      	; 0x86f6 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    86ee:	0f 2e       	mov	r0, r31
    86f0:	f4 e3       	ldi	r31, 0x34	; 52
    86f2:	ff 2e       	mov	r15, r31
    86f4:	f0 2d       	mov	r31, r0
    86f6:	04 2f       	mov	r16, r20
    86f8:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    86fa:	41 e0       	ldi	r20, 0x01	; 1
    86fc:	be 01       	movw	r22, r28
    86fe:	6f 5f       	subi	r22, 0xFF	; 255
    8700:	7f 4f       	sbci	r23, 0xFF	; 255
    8702:	8f 2d       	mov	r24, r15
    8704:	0e 94 b9 41 	call	0x8372	; 0x8372 <_Z16si5351_read_bulkhPhh>
    8708:	81 11       	cpse	r24, r1
    870a:	14 c0       	rjmp	.+40     	; 0x8734 <_Z6ms_div12si5351_clockhb+0x76>
		{
			return(true);
		}
		
		reg_val = data[0];
    870c:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    870e:	86 2f       	mov	r24, r22
    8710:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    8712:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    8714:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    8716:	90 e1       	ldi	r25, 0x10	; 16
    8718:	19 9f       	mul	r17, r25
    871a:	b0 01       	movw	r22, r0
    871c:	11 24       	eor	r1, r1
    871e:	68 2b       	or	r22, r24

		data[0] = reg_val;
    8720:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    8722:	41 e0       	ldi	r20, 0x01	; 1
    8724:	be 01       	movw	r22, r28
    8726:	6f 5f       	subi	r22, 0xFF	; 255
    8728:	7f 4f       	sbci	r23, 0xFF	; 255
    872a:	8f 2d       	mov	r24, r15
    872c:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8730:	01 c0       	rjmp	.+2      	; 0x8734 <_Z6ms_div12si5351_clockhb+0x76>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    8732:	81 e0       	ldi	r24, 0x01	; 1

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		data[0] = reg_val;
		return(si5351_write_bulk(reg_addr, data, 1));
	}
    8734:	0f 90       	pop	r0
    8736:	0f 90       	pop	r0
    8738:	df 91       	pop	r29
    873a:	cf 91       	pop	r28
    873c:	1f 91       	pop	r17
    873e:	0f 91       	pop	r16
    8740:	ff 90       	pop	r15
    8742:	08 95       	ret

00008744 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    8744:	8f 92       	push	r8
    8746:	af 92       	push	r10
    8748:	cf 92       	push	r12
    874a:	df 92       	push	r13
    874c:	ef 92       	push	r14
    874e:	ff 92       	push	r15
    8750:	0f 93       	push	r16
    8752:	1f 93       	push	r17
    8754:	cf 93       	push	r28
    8756:	df 93       	push	r29
    8758:	cd b7       	in	r28, 0x3d	; 61
    875a:	de b7       	in	r29, 0x3e	; 62
    875c:	69 97       	sbiw	r28, 0x19	; 25
    875e:	cd bf       	out	0x3d, r28	; 61
    8760:	de bf       	out	0x3e, r29	; 62
    8762:	f8 2e       	mov	r15, r24
    8764:	ce 86       	std	Y+14, r12	; 0x0e
    8766:	df 86       	std	Y+15, r13	; 0x0f
    8768:	e8 8a       	std	Y+16, r14	; 0x10
    876a:	0a 8b       	std	Y+18, r16	; 0x12
    876c:	1b 8b       	std	Y+19, r17	; 0x13
    876e:	2c 8b       	std	Y+20, r18	; 0x14
    8770:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    8772:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    8774:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    8776:	88 0f       	add	r24, r24
    8778:	88 0f       	add	r24, r24
    877a:	88 0f       	add	r24, r24
    877c:	41 e0       	ldi	r20, 0x01	; 1
    877e:	be 01       	movw	r22, r28
    8780:	64 5f       	subi	r22, 0xF4	; 244
    8782:	7f 4f       	sbci	r23, 0xFF	; 255
    8784:	84 5d       	subi	r24, 0xD4	; 212
    8786:	0e 94 b9 41 	call	0x8372	; 0x8372 <_Z16si5351_read_bulkhPhh>
    878a:	81 11       	cpse	r24, r1
    878c:	48 c0       	rjmp	.+144    	; 0x881e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		reg_val = data[0];
    878e:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    8790:	98 2f       	mov	r25, r24
    8792:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    8794:	88 89       	ldd	r24, Y+16	; 0x10
    8796:	83 70       	andi	r24, 0x03	; 3
    8798:	89 2b       	or	r24, r25
    879a:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    879c:	8f 85       	ldd	r24, Y+15	; 0x0f
    879e:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    87a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    87a2:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    87a4:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    87a6:	8c 89       	ldd	r24, Y+20	; 0x14
    87a8:	8f 70       	andi	r24, 0x0F	; 15
    87aa:	20 e1       	ldi	r18, 0x10	; 16
    87ac:	92 9f       	mul	r25, r18
    87ae:	80 0d       	add	r24, r0
    87b0:	11 24       	eor	r1, r1
    87b2:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    87b4:	8b 89       	ldd	r24, Y+19	; 0x13
    87b6:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    87b8:	8a 89       	ldd	r24, Y+18	; 0x12
    87ba:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    87bc:	81 e0       	ldi	r24, 0x01	; 1
    87be:	f8 16       	cp	r15, r24
    87c0:	81 f0       	breq	.+32     	; 0x87e2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x9e>
    87c2:	f8 16       	cp	r15, r24
    87c4:	20 f0       	brcs	.+8      	; 0x87ce <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    87c6:	22 e0       	ldi	r18, 0x02	; 2
    87c8:	f2 16       	cp	r15, r18
    87ca:	a9 f0       	breq	.+42     	; 0x87f6 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xb2>
    87cc:	1d c0       	rjmp	.+58     	; 0x8808 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    87ce:	48 e0       	ldi	r20, 0x08	; 8
    87d0:	be 01       	movw	r22, r28
    87d2:	6f 5f       	subi	r22, 0xFF	; 255
    87d4:	7f 4f       	sbci	r23, 0xFF	; 255
    87d6:	8a e2       	ldi	r24, 0x2A	; 42
    87d8:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    87dc:	88 23       	and	r24, r24
    87de:	a1 f0       	breq	.+40     	; 0x8808 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    87e0:	1e c0       	rjmp	.+60     	; 0x881e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    87e2:	48 e0       	ldi	r20, 0x08	; 8
    87e4:	be 01       	movw	r22, r28
    87e6:	6f 5f       	subi	r22, 0xFF	; 255
    87e8:	7f 4f       	sbci	r23, 0xFF	; 255
    87ea:	82 e3       	ldi	r24, 0x32	; 50
    87ec:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    87f0:	88 23       	and	r24, r24
    87f2:	51 f0       	breq	.+20     	; 0x8808 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    87f4:	14 c0       	rjmp	.+40     	; 0x881e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    87f6:	48 e0       	ldi	r20, 0x08	; 8
    87f8:	be 01       	movw	r22, r28
    87fa:	6f 5f       	subi	r22, 0xFF	; 255
    87fc:	7f 4f       	sbci	r23, 0xFF	; 255
    87fe:	8a e3       	ldi	r24, 0x3A	; 58
    8800:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8804:	81 11       	cpse	r24, r1
    8806:	0b c0       	rjmp	.+22     	; 0x881e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    8808:	6a 2d       	mov	r22, r10
    880a:	8f 2d       	mov	r24, r15
    880c:	0e 94 37 43 	call	0x866e	; 0x866e <_Z16set_integer_mode12si5351_clockb>
    8810:	81 11       	cpse	r24, r1
    8812:	05 c0       	rjmp	.+10     	; 0x881e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    8814:	4e a1       	ldd	r20, Y+38	; 0x26
    8816:	68 2d       	mov	r22, r8
    8818:	8f 2d       	mov	r24, r15
    881a:	0e 94 5f 43 	call	0x86be	; 0x86be <_Z6ms_div12si5351_clockhb>
		{
			return(true);
		}
		
		return(false);
	}
    881e:	69 96       	adiw	r28, 0x19	; 25
    8820:	cd bf       	out	0x3d, r28	; 61
    8822:	de bf       	out	0x3e, r29	; 62
    8824:	df 91       	pop	r29
    8826:	cf 91       	pop	r28
    8828:	1f 91       	pop	r17
    882a:	0f 91       	pop	r16
    882c:	ff 90       	pop	r15
    882e:	ef 90       	pop	r14
    8830:	df 90       	pop	r13
    8832:	cf 90       	pop	r12
    8834:	af 90       	pop	r10
    8836:	8f 90       	pop	r8
    8838:	08 95       	ret

0000883a <si5351_set_freq>:
 *
 * Returns true on failure
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
    883a:	2f 92       	push	r2
    883c:	3f 92       	push	r3
    883e:	4f 92       	push	r4
    8840:	5f 92       	push	r5
    8842:	6f 92       	push	r6
    8844:	7f 92       	push	r7
    8846:	8f 92       	push	r8
    8848:	9f 92       	push	r9
    884a:	af 92       	push	r10
    884c:	bf 92       	push	r11
    884e:	cf 92       	push	r12
    8850:	df 92       	push	r13
    8852:	ef 92       	push	r14
    8854:	ff 92       	push	r15
    8856:	0f 93       	push	r16
    8858:	1f 93       	push	r17
    885a:	cf 93       	push	r28
    885c:	df 93       	push	r29
    885e:	cd b7       	in	r28, 0x3d	; 61
    8860:	de b7       	in	r29, 0x3e	; 62
    8862:	60 97       	sbiw	r28, 0x10	; 16
    8864:	cd bf       	out	0x3d, r28	; 61
    8866:	de bf       	out	0x3e, r29	; 62
    8868:	6b 01       	movw	r12, r22
    886a:	7c 01       	movw	r14, r24
    886c:	b4 2e       	mov	r11, r20
    886e:	72 2e       	mov	r7, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		bool int_mode = false;
    8870:	1d 86       	std	Y+13, r1	; 0x0d
		bool div_by_4 = false;
    8872:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    8874:	10 91 86 4a 	lds	r17, 0x4A86	; 0x804a86 <g_si5351_initialized>
    8878:	11 23       	and	r17, r17
    887a:	09 f4       	brne	.+2      	; 0x887e <si5351_set_freq+0x44>
    887c:	1e c1       	rjmp	.+572    	; 0x8aba <si5351_set_freq+0x280>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    887e:	80 e4       	ldi	r24, 0x40	; 64
    8880:	c8 16       	cp	r12, r24
    8882:	82 e4       	ldi	r24, 0x42	; 66
    8884:	d8 06       	cpc	r13, r24
    8886:	8f e0       	ldi	r24, 0x0F	; 15
    8888:	e8 06       	cpc	r14, r24
    888a:	f1 04       	cpc	r15, r1
    888c:	70 f0       	brcs	.+28     	; 0x88aa <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    888e:	c7 01       	movw	r24, r14
    8890:	b6 01       	movw	r22, r12
    8892:	24 e6       	ldi	r18, 0x64	; 100
    8894:	30 e0       	ldi	r19, 0x00	; 0
    8896:	40 e0       	ldi	r20, 0x00	; 0
    8898:	50 e0       	ldi	r21, 0x00	; 0
    889a:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
				freq_Fout *= 100;
    889e:	a4 e6       	ldi	r26, 0x64	; 100
    88a0:	b0 e0       	ldi	r27, 0x00	; 0
    88a2:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <__muluhisi3>
    88a6:	6b 01       	movw	r12, r22
    88a8:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    88aa:	81 e0       	ldi	r24, 0x01	; 1
    88ac:	b8 16       	cp	r11, r24
    88ae:	c9 f0       	breq	.+50     	; 0x88e2 <si5351_set_freq+0xa8>
    88b0:	b8 16       	cp	r11, r24
    88b2:	20 f0       	brcs	.+8      	; 0x88bc <si5351_set_freq+0x82>
    88b4:	82 e0       	ldi	r24, 0x02	; 2
    88b6:	b8 16       	cp	r11, r24
    88b8:	b1 f1       	breq	.+108    	; 0x8926 <si5351_set_freq+0xec>
    88ba:	08 c1       	rjmp	.+528    	; 0x8acc <si5351_set_freq+0x292>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    88bc:	80 91 93 4a 	lds	r24, 0x4A93	; 0x804a93 <_ZL17enabledClocksMask>
    88c0:	81 60       	ori	r24, 0x01	; 1
    88c2:	80 93 93 4a 	sts	0x4A93, r24	; 0x804a93 <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    88c6:	c0 92 87 4a 	sts	0x4A87, r12	; 0x804a87 <_ZL9clock_out>
    88ca:	d0 92 88 4a 	sts	0x4A88, r13	; 0x804a88 <_ZL9clock_out+0x1>
    88ce:	e0 92 89 4a 	sts	0x4A89, r14	; 0x804a89 <_ZL9clock_out+0x2>
    88d2:	f0 92 8a 4a 	sts	0x4A8A, r15	; 0x804a8a <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    88d6:	68 94       	set
    88d8:	66 24       	eor	r6, r6
    88da:	64 f8       	bld	r6, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    88dc:	99 24       	eor	r9, r9
    88de:	93 94       	inc	r9
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    88e0:	43 c0       	rjmp	.+134    	; 0x8968 <si5351_set_freq+0x12e>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    88e2:	80 91 93 4a 	lds	r24, 0x4A93	; 0x804a93 <_ZL17enabledClocksMask>
    88e6:	82 60       	ori	r24, 0x02	; 2
    88e8:	80 93 93 4a 	sts	0x4A93, r24	; 0x804a93 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    88ec:	80 95       	com	r24
    88ee:	8a 6f       	ori	r24, 0xFA	; 250
    88f0:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    88f2:	41 e0       	ldi	r20, 0x01	; 1
    88f4:	be 01       	movw	r22, r28
    88f6:	61 5f       	subi	r22, 0xF1	; 241
    88f8:	7f 4f       	sbci	r23, 0xFF	; 255
    88fa:	83 e0       	ldi	r24, 0x03	; 3
    88fc:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8900:	18 2f       	mov	r17, r24
    8902:	81 11       	cpse	r24, r1
    8904:	e3 c0       	rjmp	.+454    	; 0x8acc <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    8906:	c0 92 8b 4a 	sts	0x4A8B, r12	; 0x804a8b <_ZL9clock_out+0x4>
    890a:	d0 92 8c 4a 	sts	0x4A8C, r13	; 0x804a8c <_ZL9clock_out+0x5>
    890e:	e0 92 8d 4a 	sts	0x4A8D, r14	; 0x804a8d <_ZL9clock_out+0x6>
    8912:	f0 92 8e 4a 	sts	0x4A8E, r15	; 0x804a8e <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    8916:	0f 2e       	mov	r0, r31
    8918:	f1 e1       	ldi	r31, 0x11	; 17
    891a:	6f 2e       	mov	r6, r31
    891c:	f0 2d       	mov	r31, r0
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    891e:	68 94       	set
    8920:	99 24       	eor	r9, r9
    8922:	91 f8       	bld	r9, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    8924:	21 c0       	rjmp	.+66     	; 0x8968 <si5351_set_freq+0x12e>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    8926:	80 91 93 4a 	lds	r24, 0x4A93	; 0x804a93 <_ZL17enabledClocksMask>
    892a:	84 60       	ori	r24, 0x04	; 4
    892c:	80 93 93 4a 	sts	0x4A93, r24	; 0x804a93 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    8930:	80 95       	com	r24
    8932:	8c 6f       	ori	r24, 0xFC	; 252
    8934:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    8936:	41 e0       	ldi	r20, 0x01	; 1
    8938:	be 01       	movw	r22, r28
    893a:	61 5f       	subi	r22, 0xF1	; 241
    893c:	7f 4f       	sbci	r23, 0xFF	; 255
    893e:	83 e0       	ldi	r24, 0x03	; 3
    8940:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8944:	18 2f       	mov	r17, r24
    8946:	81 11       	cpse	r24, r1
    8948:	c1 c0       	rjmp	.+386    	; 0x8acc <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    894a:	c0 92 8f 4a 	sts	0x4A8F, r12	; 0x804a8f <_ZL9clock_out+0x8>
    894e:	d0 92 90 4a 	sts	0x4A90, r13	; 0x804a90 <_ZL9clock_out+0x9>
    8952:	e0 92 91 4a 	sts	0x4A91, r14	; 0x804a91 <_ZL9clock_out+0xa>
    8956:	f0 92 92 4a 	sts	0x4A92, r15	; 0x804a92 <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    895a:	0f 2e       	mov	r0, r31
    895c:	f2 e1       	ldi	r31, 0x12	; 18
    895e:	6f 2e       	mov	r6, r31
    8960:	f0 2d       	mov	r31, r0
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    8962:	68 94       	set
    8964:	99 24       	eor	r9, r9
    8966:	91 f8       	bld	r9, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    8968:	81 e0       	ldi	r24, 0x01	; 1
    896a:	98 16       	cp	r9, r24
    896c:	61 f0       	breq	.+24     	; 0x8986 <si5351_set_freq+0x14c>
    896e:	80 91 94 4a 	lds	r24, 0x4A94	; 0x804a94 <_ZL8freqVCOB>
    8972:	90 91 95 4a 	lds	r25, 0x4A95	; 0x804a95 <_ZL8freqVCOB+0x1>
    8976:	a0 91 96 4a 	lds	r26, 0x4A96	; 0x804a96 <_ZL8freqVCOB+0x2>
    897a:	b0 91 97 4a 	lds	r27, 0x4A97	; 0x804a97 <_ZL8freqVCOB+0x3>
    897e:	89 2b       	or	r24, r25
    8980:	8a 2b       	or	r24, r26
    8982:	8b 2b       	or	r24, r27
    8984:	81 f4       	brne	.+32     	; 0x89a6 <si5351_set_freq+0x16c>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    8986:	8e 01       	movw	r16, r28
    8988:	02 5f       	subi	r16, 0xF2	; 242
    898a:	1f 4f       	sbci	r17, 0xFF	; 255
    898c:	9e 01       	movw	r18, r28
    898e:	23 5f       	subi	r18, 0xF3	; 243
    8990:	3f 4f       	sbci	r19, 0xFF	; 255
    8992:	ae 01       	movw	r20, r28
    8994:	4f 5f       	subi	r20, 0xFF	; 255
    8996:	5f 4f       	sbci	r21, 0xFF	; 255
    8998:	c7 01       	movw	r24, r14
    899a:	b6 01       	movw	r22, r12
    899c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    89a0:	1b 01       	movw	r2, r22
    89a2:	2c 01       	movw	r4, r24
    89a4:	10 c0       	rjmp	.+32     	; 0x89c6 <si5351_set_freq+0x18c>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    89a6:	8e 01       	movw	r16, r28
    89a8:	02 5f       	subi	r16, 0xF2	; 242
    89aa:	1f 4f       	sbci	r17, 0xFF	; 255
    89ac:	9e 01       	movw	r18, r28
    89ae:	23 5f       	subi	r18, 0xF3	; 243
    89b0:	3f 4f       	sbci	r19, 0xFF	; 255
    89b2:	ae 01       	movw	r20, r28
    89b4:	4f 5f       	subi	r20, 0xFF	; 255
    89b6:	5f 4f       	sbci	r21, 0xFF	; 255
    89b8:	c7 01       	movw	r24, r14
    89ba:	b6 01       	movw	r22, r12
    89bc:	0e 94 32 40 	call	0x8064	; 0x8064 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    89c0:	21 2c       	mov	r2, r1
    89c2:	31 2c       	mov	r3, r1
    89c4:	21 01       	movw	r4, r2
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    89c6:	69 2d       	mov	r22, r9
    89c8:	8b 2d       	mov	r24, r11
    89ca:	0e 94 0d 43 	call	0x861a	; 0x861a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    89ce:	18 2f       	mov	r17, r24
    89d0:	81 11       	cpse	r24, r1
    89d2:	7c c0       	rjmp	.+248    	; 0x8acc <si5351_set_freq+0x292>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    89d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    89d6:	ad 84       	ldd	r10, Y+13	; 0x0d
    89d8:	8f 93       	push	r24
    89da:	81 2c       	mov	r8, r1
    89dc:	c9 80       	ldd	r12, Y+1	; 0x01
    89de:	da 80       	ldd	r13, Y+2	; 0x02
    89e0:	eb 80       	ldd	r14, Y+3	; 0x03
    89e2:	fc 80       	ldd	r15, Y+4	; 0x04
    89e4:	0d 81       	ldd	r16, Y+5	; 0x05
    89e6:	1e 81       	ldd	r17, Y+6	; 0x06
    89e8:	2f 81       	ldd	r18, Y+7	; 0x07
    89ea:	38 85       	ldd	r19, Y+8	; 0x08
    89ec:	49 85       	ldd	r20, Y+9	; 0x09
    89ee:	5a 85       	ldd	r21, Y+10	; 0x0a
    89f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    89f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    89f4:	8b 2d       	mov	r24, r11
    89f6:	0e 94 a2 43 	call	0x8744	; 0x8744 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    89fa:	18 2f       	mov	r17, r24
    89fc:	0f 90       	pop	r0
    89fe:	81 11       	cpse	r24, r1
    8a00:	65 c0       	rjmp	.+202    	; 0x8acc <si5351_set_freq+0x292>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    8a02:	21 14       	cp	r2, r1
    8a04:	31 04       	cpc	r3, r1
    8a06:	41 04       	cpc	r4, r1
    8a08:	51 04       	cpc	r5, r1
    8a0a:	29 f0       	breq	.+10     	; 0x8a16 <si5351_set_freq+0x1dc>
			{
				set_pll(freq_VCO, target_pll);
    8a0c:	49 2d       	mov	r20, r9
    8a0e:	c2 01       	movw	r24, r4
    8a10:	b1 01       	movw	r22, r2
    8a12:	0e 94 7a 41 	call	0x82f4	; 0x82f4 <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    8a16:	77 20       	and	r7, r7
    8a18:	69 f0       	breq	.+26     	; 0x8a34 <si5351_set_freq+0x1fa>
		{
 			data[0] = enabledClocksMask;
    8a1a:	80 91 93 4a 	lds	r24, 0x4A93	; 0x804a93 <_ZL17enabledClocksMask>
    8a1e:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    8a20:	41 e0       	ldi	r20, 0x01	; 1
    8a22:	be 01       	movw	r22, r28
    8a24:	61 5f       	subi	r22, 0xF1	; 241
    8a26:	7f 4f       	sbci	r23, 0xFF	; 255
    8a28:	83 e0       	ldi	r24, 0x03	; 3
    8a2a:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8a2e:	88 23       	and	r24, r24
    8a30:	71 f0       	breq	.+28     	; 0x8a4e <si5351_set_freq+0x214>
    8a32:	45 c0       	rjmp	.+138    	; 0x8abe <si5351_set_freq+0x284>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    8a34:	80 91 93 4a 	lds	r24, 0x4A93	; 0x804a93 <_ZL17enabledClocksMask>
    8a38:	80 95       	com	r24
    8a3a:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    8a3c:	41 e0       	ldi	r20, 0x01	; 1
    8a3e:	be 01       	movw	r22, r28
    8a40:	61 5f       	subi	r22, 0xF1	; 241
    8a42:	7f 4f       	sbci	r23, 0xFF	; 255
    8a44:	83 e0       	ldi	r24, 0x03	; 3
    8a46:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8a4a:	81 11       	cpse	r24, r1
    8a4c:	3a c0       	rjmp	.+116    	; 0x8ac2 <si5351_set_freq+0x288>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    8a4e:	81 e0       	ldi	r24, 0x01	; 1
    8a50:	98 12       	cpse	r9, r24
    8a52:	0b c0       	rjmp	.+22     	; 0x8a6a <si5351_set_freq+0x230>
		{
 			data[0] = 0x4C;
    8a54:	8c e4       	ldi	r24, 0x4C	; 76
    8a56:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    8a58:	41 e0       	ldi	r20, 0x01	; 1
    8a5a:	be 01       	movw	r22, r28
    8a5c:	61 5f       	subi	r22, 0xF1	; 241
    8a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    8a60:	86 2d       	mov	r24, r6
    8a62:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8a66:	18 2f       	mov	r17, r24
    8a68:	31 c0       	rjmp	.+98     	; 0x8acc <si5351_set_freq+0x292>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    8a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a6c:	88 23       	and	r24, r24
    8a6e:	61 f0       	breq	.+24     	; 0x8a88 <si5351_set_freq+0x24e>
			{
 				data[0] = 0x6C;
    8a70:	8c e6       	ldi	r24, 0x6C	; 108
    8a72:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    8a74:	41 e0       	ldi	r20, 0x01	; 1
    8a76:	be 01       	movw	r22, r28
    8a78:	61 5f       	subi	r22, 0xF1	; 241
    8a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    8a7c:	86 2d       	mov	r24, r6
    8a7e:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8a82:	88 23       	and	r24, r24
    8a84:	61 f0       	breq	.+24     	; 0x8a9e <si5351_set_freq+0x264>
    8a86:	1f c0       	rjmp	.+62     	; 0x8ac6 <si5351_set_freq+0x28c>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    8a88:	8c e2       	ldi	r24, 0x2C	; 44
    8a8a:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    8a8c:	41 e0       	ldi	r20, 0x01	; 1
    8a8e:	be 01       	movw	r22, r28
    8a90:	61 5f       	subi	r22, 0xF1	; 241
    8a92:	7f 4f       	sbci	r23, 0xFF	; 255
    8a94:	86 2d       	mov	r24, r6
    8a96:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_Z17si5351_write_bulkhPhh>
    8a9a:	81 11       	cpse	r24, r1
    8a9c:	16 c0       	rjmp	.+44     	; 0x8aca <si5351_set_freq+0x290>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    8a9e:	21 14       	cp	r2, r1
    8aa0:	31 04       	cpc	r3, r1
    8aa2:	41 04       	cpc	r4, r1
    8aa4:	51 04       	cpc	r5, r1
    8aa6:	91 f0       	breq	.+36     	; 0x8acc <si5351_set_freq+0x292>
			{
				freqVCOB = freq_VCO;
    8aa8:	20 92 94 4a 	sts	0x4A94, r2	; 0x804a94 <_ZL8freqVCOB>
    8aac:	30 92 95 4a 	sts	0x4A95, r3	; 0x804a95 <_ZL8freqVCOB+0x1>
    8ab0:	40 92 96 4a 	sts	0x4A96, r4	; 0x804a96 <_ZL8freqVCOB+0x2>
    8ab4:	50 92 97 4a 	sts	0x4A97, r5	; 0x804a97 <_ZL8freqVCOB+0x3>
    8ab8:	09 c0       	rjmp	.+18     	; 0x8acc <si5351_set_freq+0x292>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    8aba:	11 e0       	ldi	r17, 0x01	; 1
    8abc:	07 c0       	rjmp	.+14     	; 0x8acc <si5351_set_freq+0x292>
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    8abe:	18 2f       	mov	r17, r24
    8ac0:	05 c0       	rjmp	.+10     	; 0x8acc <si5351_set_freq+0x292>
		else
		{
 			data[0] = ~enabledClocksMask;
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
			{
				return true;
    8ac2:	18 2f       	mov	r17, r24
    8ac4:	03 c0       	rjmp	.+6      	; 0x8acc <si5351_set_freq+0x292>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    8ac6:	18 2f       	mov	r17, r24
    8ac8:	01 c0       	rjmp	.+2      	; 0x8acc <si5351_set_freq+0x292>
			else
			{
 				data[0] = 0x2C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    8aca:	18 2f       	mov	r17, r24
				freqVCOB = freq_VCO;
			}
		}

		return(false);
	}
    8acc:	81 2f       	mov	r24, r17
    8ace:	60 96       	adiw	r28, 0x10	; 16
    8ad0:	cd bf       	out	0x3d, r28	; 61
    8ad2:	de bf       	out	0x3e, r29	; 62
    8ad4:	df 91       	pop	r29
    8ad6:	cf 91       	pop	r28
    8ad8:	1f 91       	pop	r17
    8ada:	0f 91       	pop	r16
    8adc:	ff 90       	pop	r15
    8ade:	ef 90       	pop	r14
    8ae0:	df 90       	pop	r13
    8ae2:	cf 90       	pop	r12
    8ae4:	bf 90       	pop	r11
    8ae6:	af 90       	pop	r10
    8ae8:	9f 90       	pop	r9
    8aea:	8f 90       	pop	r8
    8aec:	7f 90       	pop	r7
    8aee:	6f 90       	pop	r6
    8af0:	5f 90       	pop	r5
    8af2:	4f 90       	pop	r4
    8af4:	3f 90       	pop	r3
    8af6:	2f 90       	pop	r2
    8af8:	08 95       	ret

00008afa <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    8afa:	80 e0       	ldi	r24, 0x00	; 0
    8afc:	08 95       	ret

00008afe <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8afe:	e0 e0       	ldi	r30, 0x00	; 0
    8b00:	fb e0       	ldi	r31, 0x0B	; 11
    8b02:	81 e0       	ldi	r24, 0x01	; 1
    8b04:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    8b06:	20 e4       	ldi	r18, 0x40	; 64
    8b08:	3c e9       	ldi	r19, 0x9C	; 156
    8b0a:	24 87       	std	Z+12, r18	; 0x0c
    8b0c:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    8b0e:	93 e0       	ldi	r25, 0x03	; 3
    8b10:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    8b12:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8b14:	e0 e1       	ldi	r30, 0x10	; 16
    8b16:	fb e0       	ldi	r31, 0x0B	; 11
    8b18:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    8b1a:	40 ec       	ldi	r20, 0xC0	; 192
    8b1c:	5d e5       	ldi	r21, 0x5D	; 93
    8b1e:	44 87       	std	Z+12, r20	; 0x0c
    8b20:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    8b22:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    8b24:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8b26:	e0 e3       	ldi	r30, 0x30	; 48
    8b28:	fb e0       	ldi	r31, 0x0B	; 11
    8b2a:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    8b2c:	24 87       	std	Z+12, r18	; 0x0c
    8b2e:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    8b30:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    8b32:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    8b34:	80 e0       	ldi	r24, 0x00	; 0
    8b36:	08 95       	ret

00008b38 <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    8b38:	0f 93       	push	r16
    8b3a:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    8b3c:	61 15       	cp	r22, r1
    8b3e:	71 05       	cpc	r23, r1
    8b40:	81 05       	cpc	r24, r1
    8b42:	91 05       	cpc	r25, r1
    8b44:	09 f4       	brne	.+2      	; 0x8b48 <util_delay_ms+0x10>
    8b46:	67 c0       	rjmp	.+206    	; 0x8c16 <util_delay_ms+0xde>
	{
		if(counting)
    8b48:	20 91 9c 4a 	lds	r18, 0x4A9C	; 0x804a9c <_ZZ13util_delay_msE8counting>
    8b4c:	22 23       	and	r18, r18
    8b4e:	f1 f1       	breq	.+124    	; 0x8bcc <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    8b50:	00 91 9d 4a 	lds	r16, 0x4A9D	; 0x804a9d <_ZL12g_ms_counter>
    8b54:	10 91 9e 4a 	lds	r17, 0x4A9E	; 0x804a9e <_ZL12g_ms_counter+0x1>
    8b58:	20 91 9f 4a 	lds	r18, 0x4A9F	; 0x804a9f <_ZL12g_ms_counter+0x2>
    8b5c:	30 91 a0 4a 	lds	r19, 0x4AA0	; 0x804aa0 <_ZL12g_ms_counter+0x3>
    8b60:	01 2b       	or	r16, r17
    8b62:	02 2b       	or	r16, r18
    8b64:	03 2b       	or	r16, r19
    8b66:	71 f4       	brne	.+28     	; 0x8b84 <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8b68:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    8b6c:	10 92 9c 4a 	sts	0x4A9C, r1	; 0x804a9c <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    8b70:	10 92 98 4a 	sts	0x4A98, r1	; 0x804a98 <_ZZ13util_delay_msE14countdownValue>
    8b74:	10 92 99 4a 	sts	0x4A99, r1	; 0x804a99 <_ZZ13util_delay_msE14countdownValue+0x1>
    8b78:	10 92 9a 4a 	sts	0x4A9A, r1	; 0x804a9a <_ZZ13util_delay_msE14countdownValue+0x2>
    8b7c:	10 92 9b 4a 	sts	0x4A9B, r1	; 0x804a9b <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    8b80:	80 e0       	ldi	r24, 0x00	; 0
    8b82:	62 c0       	rjmp	.+196    	; 0x8c48 <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    8b84:	00 91 98 4a 	lds	r16, 0x4A98	; 0x804a98 <_ZZ13util_delay_msE14countdownValue>
    8b88:	10 91 99 4a 	lds	r17, 0x4A99	; 0x804a99 <_ZZ13util_delay_msE14countdownValue+0x1>
    8b8c:	20 91 9a 4a 	lds	r18, 0x4A9A	; 0x804a9a <_ZZ13util_delay_msE14countdownValue+0x2>
    8b90:	30 91 9b 4a 	lds	r19, 0x4A9B	; 0x804a9b <_ZZ13util_delay_msE14countdownValue+0x3>
    8b94:	60 17       	cp	r22, r16
    8b96:	71 07       	cpc	r23, r17
    8b98:	82 07       	cpc	r24, r18
    8b9a:	93 07       	cpc	r25, r19
    8b9c:	09 f4       	brne	.+2      	; 0x8ba0 <util_delay_ms+0x68>
    8b9e:	51 c0       	rjmp	.+162    	; 0x8c42 <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    8ba0:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    8ba4:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    8ba8:	60 93 98 4a 	sts	0x4A98, r22	; 0x804a98 <_ZZ13util_delay_msE14countdownValue>
    8bac:	70 93 99 4a 	sts	0x4A99, r23	; 0x804a99 <_ZZ13util_delay_msE14countdownValue+0x1>
    8bb0:	80 93 9a 4a 	sts	0x4A9A, r24	; 0x804a9a <_ZZ13util_delay_msE14countdownValue+0x2>
    8bb4:	90 93 9b 4a 	sts	0x4A9B, r25	; 0x804a9b <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    8bb8:	60 93 9d 4a 	sts	0x4A9D, r22	; 0x804a9d <_ZL12g_ms_counter>
    8bbc:	70 93 9e 4a 	sts	0x4A9E, r23	; 0x804a9e <_ZL12g_ms_counter+0x1>
    8bc0:	80 93 9f 4a 	sts	0x4A9F, r24	; 0x804a9f <_ZL12g_ms_counter+0x2>
    8bc4:	90 93 a0 4a 	sts	0x4AA0, r25	; 0x804aa0 <_ZL12g_ms_counter+0x3>
				return(false);
    8bc8:	80 e0       	ldi	r24, 0x00	; 0
    8bca:	3e c0       	rjmp	.+124    	; 0x8c48 <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    8bcc:	00 91 98 4a 	lds	r16, 0x4A98	; 0x804a98 <_ZZ13util_delay_msE14countdownValue>
    8bd0:	10 91 99 4a 	lds	r17, 0x4A99	; 0x804a99 <_ZZ13util_delay_msE14countdownValue+0x1>
    8bd4:	20 91 9a 4a 	lds	r18, 0x4A9A	; 0x804a9a <_ZZ13util_delay_msE14countdownValue+0x2>
    8bd8:	30 91 9b 4a 	lds	r19, 0x4A9B	; 0x804a9b <_ZZ13util_delay_msE14countdownValue+0x3>
    8bdc:	60 17       	cp	r22, r16
    8bde:	71 07       	cpc	r23, r17
    8be0:	82 07       	cpc	r24, r18
    8be2:	93 07       	cpc	r25, r19
    8be4:	71 f1       	breq	.+92     	; 0x8c42 <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    8be6:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    8bea:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    8bee:	60 93 98 4a 	sts	0x4A98, r22	; 0x804a98 <_ZZ13util_delay_msE14countdownValue>
    8bf2:	70 93 99 4a 	sts	0x4A99, r23	; 0x804a99 <_ZZ13util_delay_msE14countdownValue+0x1>
    8bf6:	80 93 9a 4a 	sts	0x4A9A, r24	; 0x804a9a <_ZZ13util_delay_msE14countdownValue+0x2>
    8bfa:	90 93 9b 4a 	sts	0x4A9B, r25	; 0x804a9b <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    8bfe:	60 93 9d 4a 	sts	0x4A9D, r22	; 0x804a9d <_ZL12g_ms_counter>
    8c02:	70 93 9e 4a 	sts	0x4A9E, r23	; 0x804a9e <_ZL12g_ms_counter+0x1>
    8c06:	80 93 9f 4a 	sts	0x4A9F, r24	; 0x804a9f <_ZL12g_ms_counter+0x2>
    8c0a:	90 93 a0 4a 	sts	0x4AA0, r25	; 0x804aa0 <_ZL12g_ms_counter+0x3>
			counting = true;
    8c0e:	81 e0       	ldi	r24, 0x01	; 1
    8c10:	80 93 9c 4a 	sts	0x4A9C, r24	; 0x804a9c <_ZZ13util_delay_msE8counting>
    8c14:	16 c0       	rjmp	.+44     	; 0x8c42 <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8c16:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    8c1a:	10 92 9c 4a 	sts	0x4A9C, r1	; 0x804a9c <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    8c1e:	10 92 98 4a 	sts	0x4A98, r1	; 0x804a98 <_ZZ13util_delay_msE14countdownValue>
    8c22:	10 92 99 4a 	sts	0x4A99, r1	; 0x804a99 <_ZZ13util_delay_msE14countdownValue+0x1>
    8c26:	10 92 9a 4a 	sts	0x4A9A, r1	; 0x804a9a <_ZZ13util_delay_msE14countdownValue+0x2>
    8c2a:	10 92 9b 4a 	sts	0x4A9B, r1	; 0x804a9b <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    8c2e:	10 92 9d 4a 	sts	0x4A9D, r1	; 0x804a9d <_ZL12g_ms_counter>
    8c32:	10 92 9e 4a 	sts	0x4A9E, r1	; 0x804a9e <_ZL12g_ms_counter+0x1>
    8c36:	10 92 9f 4a 	sts	0x4A9F, r1	; 0x804a9f <_ZL12g_ms_counter+0x2>
    8c3a:	10 92 a0 4a 	sts	0x4AA0, r1	; 0x804aa0 <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    8c3e:	80 e0       	ldi	r24, 0x00	; 0
    8c40:	03 c0       	rjmp	.+6      	; 0x8c48 <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8c42:	81 e0       	ldi	r24, 0x01	; 1
    8c44:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    8c48:	1f 91       	pop	r17
    8c4a:	0f 91       	pop	r16
    8c4c:	08 95       	ret

00008c4e <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    8c4e:	1f 92       	push	r1
    8c50:	0f 92       	push	r0
    8c52:	0f b6       	in	r0, 0x3f	; 63
    8c54:	0f 92       	push	r0
    8c56:	11 24       	eor	r1, r1
    8c58:	8f 93       	push	r24
    8c5a:	9f 93       	push	r25
    8c5c:	af 93       	push	r26
    8c5e:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    8c60:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    8c64:	80 ff       	sbrs	r24, 0
    8c66:	1d c0       	rjmp	.+58     	; 0x8ca2 <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    8c68:	80 91 9d 4a 	lds	r24, 0x4A9D	; 0x804a9d <_ZL12g_ms_counter>
    8c6c:	90 91 9e 4a 	lds	r25, 0x4A9E	; 0x804a9e <_ZL12g_ms_counter+0x1>
    8c70:	a0 91 9f 4a 	lds	r26, 0x4A9F	; 0x804a9f <_ZL12g_ms_counter+0x2>
    8c74:	b0 91 a0 4a 	lds	r27, 0x4AA0	; 0x804aa0 <_ZL12g_ms_counter+0x3>
    8c78:	00 97       	sbiw	r24, 0x00	; 0
    8c7a:	a1 05       	cpc	r26, r1
    8c7c:	b1 05       	cpc	r27, r1
    8c7e:	61 f0       	breq	.+24     	; 0x8c98 <__vector_13+0x4a>
		{
			g_ms_counter--;	
    8c80:	01 97       	sbiw	r24, 0x01	; 1
    8c82:	a1 09       	sbc	r26, r1
    8c84:	b1 09       	sbc	r27, r1
    8c86:	80 93 9d 4a 	sts	0x4A9D, r24	; 0x804a9d <_ZL12g_ms_counter>
    8c8a:	90 93 9e 4a 	sts	0x4A9E, r25	; 0x804a9e <_ZL12g_ms_counter+0x1>
    8c8e:	a0 93 9f 4a 	sts	0x4A9F, r26	; 0x804a9f <_ZL12g_ms_counter+0x2>
    8c92:	b0 93 a0 4a 	sts	0x4AA0, r27	; 0x804aa0 <_ZL12g_ms_counter+0x3>
    8c96:	02 c0       	rjmp	.+4      	; 0x8c9c <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8c98:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    8c9c:	81 e0       	ldi	r24, 0x01	; 1
    8c9e:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    8ca2:	bf 91       	pop	r27
    8ca4:	af 91       	pop	r26
    8ca6:	9f 91       	pop	r25
    8ca8:	8f 91       	pop	r24
    8caa:	0f 90       	pop	r0
    8cac:	0f be       	out	0x3f, r0	; 63
    8cae:	0f 90       	pop	r0
    8cb0:	1f 90       	pop	r1
    8cb2:	18 95       	reti

00008cb4 <_Z14txSetFrequencyPmb>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
    8cb4:	0f 93       	push	r16
    8cb6:	1f 93       	push	r17
    8cb8:	cf 93       	push	r28
    8cba:	df 93       	push	r29
    8cbc:	fc 01       	movw	r30, r24
    8cbe:	46 2f       	mov	r20, r22
		bool err = false;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    8cc0:	60 81       	ld	r22, Z
    8cc2:	71 81       	ldd	r23, Z+1	; 0x01
    8cc4:	82 81       	ldd	r24, Z+2	; 0x02
    8cc6:	93 81       	ldd	r25, Z+3	; 0x03
    8cc8:	8b 01       	movw	r16, r22
    8cca:	9c 01       	movw	r18, r24
    8ccc:	01 5e       	subi	r16, 0xE1	; 225
    8cce:	17 46       	sbci	r17, 0x67	; 103
    8cd0:	25 43       	sbci	r18, 0x35	; 53
    8cd2:	31 09       	sbc	r19, r1
    8cd4:	0f 31       	cpi	r16, 0x1F	; 31
    8cd6:	11 4a       	sbci	r17, 0xA1	; 161
    8cd8:	27 40       	sbci	r18, 0x07	; 7
    8cda:	31 05       	cpc	r19, r1
    8cdc:	a8 f4       	brcc	.+42     	; 0x8d08 <_Z14txSetFrequencyPmb+0x54>
    8cde:	24 2f       	mov	r18, r20
    8ce0:	ef 01       	movw	r28, r30
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
    8ce2:	41 e0       	ldi	r20, 0x01	; 1
    8ce4:	0e 94 1d 44 	call	0x883a	; 0x883a <si5351_set_freq>
    8ce8:	81 11       	cpse	r24, r1
    8cea:	10 c0       	rjmp	.+32     	; 0x8d0c <_Z14txSetFrequencyPmb+0x58>
			{
				err = true; 
			}
			else
			{
				g_80m_frequency = *freq;
    8cec:	88 81       	ld	r24, Y
    8cee:	99 81       	ldd	r25, Y+1	; 0x01
    8cf0:	aa 81       	ldd	r26, Y+2	; 0x02
    8cf2:	bb 81       	ldd	r27, Y+3	; 0x03
    8cf4:	80 93 2b 40 	sts	0x402B, r24	; 0x80402b <g_80m_frequency>
    8cf8:	90 93 2c 40 	sts	0x402C, r25	; 0x80402c <g_80m_frequency+0x1>
    8cfc:	a0 93 2d 40 	sts	0x402D, r26	; 0x80402d <g_80m_frequency+0x2>
    8d00:	b0 93 2e 40 	sts	0x402E, r27	; 0x80402e <g_80m_frequency+0x3>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
		bool err = false;
    8d04:	80 e0       	ldi	r24, 0x00	; 0
    8d06:	03 c0       	rjmp	.+6      	; 0x8d0e <_Z14txSetFrequencyPmb+0x5a>
    8d08:	80 e0       	ldi	r24, 0x00	; 0
    8d0a:	01 c0       	rjmp	.+2      	; 0x8d0e <_Z14txSetFrequencyPmb+0x5a>

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
			{
				err = true; 
    8d0c:	81 e0       	ldi	r24, 0x01	; 1
				g_80m_frequency = *freq;
			}
		}

		return(err);
	}
    8d0e:	df 91       	pop	r29
    8d10:	cf 91       	pop	r28
    8d12:	1f 91       	pop	r17
    8d14:	0f 91       	pop	r16
    8d16:	08 95       	ret

00008d18 <_Z14txGetFrequencyv>:

	Frequency_Hz txGetFrequency(void)
	{
		return( g_80m_frequency);
    8d18:	60 91 2b 40 	lds	r22, 0x402B	; 0x80402b <g_80m_frequency>
    8d1c:	70 91 2c 40 	lds	r23, 0x402C	; 0x80402c <g_80m_frequency+0x1>
    8d20:	80 91 2d 40 	lds	r24, 0x402D	; 0x80402d <g_80m_frequency+0x2>
    8d24:	90 91 2e 40 	lds	r25, 0x402E	; 0x80402e <g_80m_frequency+0x3>
	}
    8d28:	08 95       	ret

00008d2a <_Z18powerToTransmitterb>:

	EC powerToTransmitter(bool on)
	{
		fet_driver(on);
    8d2a:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <_Z10fet_driverb>

		return(ERROR_CODE_NO_ERROR);
	}
    8d2e:	80 e0       	ldi	r24, 0x00	; 0
    8d30:	08 95       	ret

00008d32 <_Z14keyTransmitterb>:

	void keyTransmitter(bool on)
	{
		if(g_tx_initialized)
    8d32:	90 91 a1 4a 	lds	r25, 0x4AA1	; 0x804aa1 <_ZL16g_tx_initialized>
    8d36:	99 23       	and	r25, r25
    8d38:	c1 f0       	breq	.+48     	; 0x8d6a <_Z14keyTransmitterb+0x38>
		{			
			if(on)
    8d3a:	88 23       	and	r24, r24
    8d3c:	71 f0       	breq	.+28     	; 0x8d5a <_Z14keyTransmitterb+0x28>
			{
				if(!g_transmitter_keyed)
    8d3e:	80 91 a2 4a 	lds	r24, 0x4AA2	; 0x804aa2 <_ZL19g_transmitter_keyed>
    8d42:	81 11       	cpse	r24, r1
    8d44:	12 c0       	rjmp	.+36     	; 0x8d6a <_Z14keyTransmitterb+0x38>
				{
					if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED) == ERROR_CODE_NO_ERROR)
    8d46:	61 e0       	ldi	r22, 0x01	; 1
    8d48:	81 e0       	ldi	r24, 0x01	; 1
    8d4a:	0e 94 93 42 	call	0x8526	; 0x8526 <si5351_clock_enable>
    8d4e:	81 11       	cpse	r24, r1
    8d50:	0c c0       	rjmp	.+24     	; 0x8d6a <_Z14keyTransmitterb+0x38>
					{
						g_transmitter_keyed = true;
    8d52:	81 e0       	ldi	r24, 0x01	; 1
    8d54:	80 93 a2 4a 	sts	0x4AA2, r24	; 0x804aa2 <_ZL19g_transmitter_keyed>
    8d58:	08 95       	ret
					}
				}
			}
			else
			{
				if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED) == ERROR_CODE_NO_ERROR)
    8d5a:	60 e0       	ldi	r22, 0x00	; 0
    8d5c:	81 e0       	ldi	r24, 0x01	; 1
    8d5e:	0e 94 93 42 	call	0x8526	; 0x8526 <si5351_clock_enable>
    8d62:	81 11       	cpse	r24, r1
    8d64:	02 c0       	rjmp	.+4      	; 0x8d6a <_Z14keyTransmitterb+0x38>
				{
					g_transmitter_keyed = false;
    8d66:	10 92 a2 4a 	sts	0x4AA2, r1	; 0x804aa2 <_ZL19g_transmitter_keyed>
    8d6a:	08 95       	ret

00008d6c <_Z12txGetPowerMwv>:
		}
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
    8d6c:	80 91 2f 40 	lds	r24, 0x402F	; 0x80402f <g_80m_power_level_mW>
    8d70:	90 91 30 40 	lds	r25, 0x4030	; 0x804030 <g_80m_power_level_mW+0x1>
	}
    8d74:	08 95       	ret

00008d76 <_Z15txSetParametersPjPb>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, bool* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, bool* enableDriverPwr) */
	{
    8d76:	cf 93       	push	r28
    8d78:	df 93       	push	r29
    8d7a:	cd b7       	in	r28, 0x3d	; 61
    8d7c:	de b7       	in	r29, 0x3e	; 62
    8d7e:	2b 97       	sbiw	r28, 0x0b	; 11
    8d80:	cd bf       	out	0x3d, r28	; 61
    8d82:	de bf       	out	0x3e, r29	; 62
    8d84:	88 87       	std	Y+8, r24	; 0x08
    8d86:	99 87       	std	Y+9, r25	; 0x09
    8d88:	6a 87       	std	Y+10, r22	; 0x0a
    8d8a:	7b 87       	std	Y+11, r23	; 0x0b
		bool err = false;
    8d8c:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    8d8e:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    8d90:	1b 82       	std	Y+3, r1	; 0x03
    8d92:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW != null)
    8d94:	88 85       	ldd	r24, Y+8	; 0x08
    8d96:	99 85       	ldd	r25, Y+9	; 0x09
    8d98:	89 2b       	or	r24, r25
    8d9a:	09 f4       	brne	.+2      	; 0x8d9e <_Z15txSetParametersPjPb+0x28>
    8d9c:	64 c0       	rjmp	.+200    	; 0x8e66 <_Z15txSetParametersPjPb+0xf0>
		{
			power = *power_mW;
    8d9e:	88 85       	ldd	r24, Y+8	; 0x08
    8da0:	99 85       	ldd	r25, Y+9	; 0x09
    8da2:	fc 01       	movw	r30, r24
    8da4:	80 81       	ld	r24, Z
    8da6:	91 81       	ldd	r25, Z+1	; 0x01
    8da8:	8b 83       	std	Y+3, r24	; 0x03
    8daa:	9c 83       	std	Y+4, r25	; 0x04

			if(power <= MAX_TX_POWER_80M_MW)
    8dac:	8b 81       	ldd	r24, Y+3	; 0x03
    8dae:	9c 81       	ldd	r25, Y+4	; 0x04
    8db0:	89 38       	cpi	r24, 0x89	; 137
    8db2:	93 41       	sbci	r25, 0x13	; 19
    8db4:	08 f0       	brcs	.+2      	; 0x8db8 <_Z15txSetParametersPjPb+0x42>
    8db6:	53 c0       	rjmp	.+166    	; 0x8e5e <_Z15txSetParametersPjPb+0xe8>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    8db8:	9e 01       	movw	r18, r28
    8dba:	29 5f       	subi	r18, 0xF9	; 249
    8dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    8dbe:	ae 01       	movw	r20, r28
    8dc0:	4a 5f       	subi	r20, 0xFA	; 250
    8dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    8dc4:	be 01       	movw	r22, r28
    8dc6:	6b 5f       	subi	r22, 0xFB	; 251
    8dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    8dca:	ce 01       	movw	r24, r28
    8dcc:	03 96       	adiw	r24, 0x03	; 3
    8dce:	0e 94 93 47 	call	0x8f26	; 0x8f26 <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    8dd2:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    8dd4:	81 e0       	ldi	r24, 0x01	; 1
    8dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    8dd8:	9f 3c       	cpi	r25, 0xCF	; 207
    8dda:	09 f0       	breq	.+2      	; 0x8dde <_Z15txSetParametersPjPb+0x68>
    8ddc:	80 e0       	ldi	r24, 0x00	; 0
    8dde:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    8de0:	8b 81       	ldd	r24, Y+3	; 0x03
    8de2:	9c 81       	ldd	r25, Y+4	; 0x04
    8de4:	21 e0       	ldi	r18, 0x01	; 1
    8de6:	89 2b       	or	r24, r25
    8de8:	09 f0       	breq	.+2      	; 0x8dec <_Z15txSetParametersPjPb+0x76>
    8dea:	20 e0       	ldi	r18, 0x00	; 0
    8dec:	20 93 35 40 	sts	0x4035, r18	; 0x804035 <g_tx_power_is_zero>

				if(!err)
    8df0:	99 81       	ldd	r25, Y+1	; 0x01
    8df2:	81 e0       	ldi	r24, 0x01	; 1
    8df4:	89 27       	eor	r24, r25
    8df6:	88 23       	and	r24, r24
    8df8:	51 f1       	breq	.+84     	; 0x8e4e <_Z15txSetParametersPjPb+0xd8>
				{
					g_80m_power_level_mW = power;
    8dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    8dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    8dfe:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_power_level_mW>
    8e02:	90 93 30 40 	sts	0x4030, r25	; 0x804030 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    8e06:	0e 94 55 48 	call	0x90aa	; 0x90aa <_Z18txIsAntennaForBandv>
    8e0a:	88 23       	and	r24, r24
    8e0c:	31 f0       	breq	.+12     	; 0x8e1a <_Z15txSetParametersPjPb+0xa4>
					{
						DAC0_setVal(drainVoltageDAC);
    8e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    8e10:	88 2f       	mov	r24, r24
    8e12:	90 e0       	ldi	r25, 0x00	; 0
    8e14:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_Z11DAC0_setValj>
    8e18:	07 c0       	rjmp	.+14     	; 0x8e28 <_Z15txSetParametersPjPb+0xb2>
					}
					else
					{
						g_tx_power_is_zero = true;
    8e1a:	81 e0       	ldi	r24, 0x01	; 1
    8e1c:	80 93 35 40 	sts	0x4035, r24	; 0x804035 <g_tx_power_is_zero>
						err = true;
    8e20:	81 e0       	ldi	r24, 0x01	; 1
    8e22:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    8e24:	86 ef       	ldi	r24, 0xF6	; 246
    8e26:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || (drainVoltageDAC == 0))
    8e28:	80 91 35 40 	lds	r24, 0x4035	; 0x804035 <g_tx_power_is_zero>
    8e2c:	88 23       	and	r24, r24
    8e2e:	19 f4       	brne	.+6      	; 0x8e36 <_Z15txSetParametersPjPb+0xc0>
    8e30:	8d 81       	ldd	r24, Y+5	; 0x05
    8e32:	88 23       	and	r24, r24
    8e34:	11 f4       	brne	.+4      	; 0x8e3a <_Z15txSetParametersPjPb+0xc4>
    8e36:	81 e0       	ldi	r24, 0x01	; 1
    8e38:	01 c0       	rjmp	.+2      	; 0x8e3c <_Z15txSetParametersPjPb+0xc6>
    8e3a:	80 e0       	ldi	r24, 0x00	; 0
    8e3c:	88 23       	and	r24, r24
    8e3e:	21 f0       	breq	.+8      	; 0x8e48 <_Z15txSetParametersPjPb+0xd2>
					{
						powerToTransmitter(OFF); /* Turn off FET driver */
    8e40:	80 e0       	ldi	r24, 0x00	; 0
    8e42:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <_Z18powerToTransmitterb>
    8e46:	03 c0       	rjmp	.+6      	; 0x8e4e <_Z15txSetParametersPjPb+0xd8>
					}
					else
					{
						powerToTransmitter(ON); /* Turn on FET driver */
    8e48:	81 e0       	ldi	r24, 0x01	; 1
    8e4a:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <_Z18powerToTransmitterb>
					}
				}

				*power_mW = power;
    8e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    8e50:	3c 81       	ldd	r19, Y+4	; 0x04
    8e52:	88 85       	ldd	r24, Y+8	; 0x08
    8e54:	99 85       	ldd	r25, Y+9	; 0x09
    8e56:	fc 01       	movw	r30, r24
    8e58:	20 83       	st	Z, r18
    8e5a:	31 83       	std	Z+1, r19	; 0x01
    8e5c:	04 c0       	rjmp	.+8      	; 0x8e66 <_Z15txSetParametersPjPb+0xf0>
			}
			else
			{
				err = true;
    8e5e:	81 e0       	ldi	r24, 0x01	; 1
    8e60:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8e62:	85 ef       	ldi	r24, 0xF5	; 245
    8e64:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    8e66:	99 81       	ldd	r25, Y+1	; 0x01
    8e68:	81 e0       	ldi	r24, 0x01	; 1
    8e6a:	89 27       	eor	r24, r25
    8e6c:	88 23       	and	r24, r24
    8e6e:	51 f0       	breq	.+20     	; 0x8e84 <_Z15txSetParametersPjPb+0x10e>
		{
			if(enableDriverPwr != NULL)
    8e70:	8a 85       	ldd	r24, Y+10	; 0x0a
    8e72:	9b 85       	ldd	r25, Y+11	; 0x0b
    8e74:	89 2b       	or	r24, r25
    8e76:	31 f0       	breq	.+12     	; 0x8e84 <_Z15txSetParametersPjPb+0x10e>
			{
				powerToTransmitter(*enableDriverPwr);
    8e78:	8a 85       	ldd	r24, Y+10	; 0x0a
    8e7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    8e7c:	fc 01       	movw	r30, r24
    8e7e:	80 81       	ld	r24, Z
    8e80:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <_Z18powerToTransmitterb>
			}
		}

		return(code);
    8e84:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    8e86:	2b 96       	adiw	r28, 0x0b	; 11
    8e88:	cd bf       	out	0x3d, r28	; 61
    8e8a:	de bf       	out	0x3e, r29	; 62
    8e8c:	df 91       	pop	r29
    8e8e:	cf 91       	pop	r28
    8e90:	08 95       	ret

00008e92 <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    8e92:	1f 93       	push	r17
    8e94:	cf 93       	push	r28
    8e96:	df 93       	push	r29
    8e98:	00 d0       	rcall	.+0      	; 0x8e9a <_Z16init_transmitterv+0x8>
    8e9a:	cd b7       	in	r28, 0x3d	; 61
    8e9c:	de b7       	in	r29, 0x3e	; 62
		EC code;
		bool err;
		
		DAC0_init();
    8e9e:	0e 94 3a 2c 	call	0x5874	; 0x5874 <_Z9DAC0_initv>

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    8ea2:	40 e0       	ldi	r20, 0x00	; 0
    8ea4:	50 e0       	ldi	r21, 0x00	; 0
    8ea6:	ba 01       	movw	r22, r20
    8ea8:	80 e4       	ldi	r24, 0x40	; 64
    8eaa:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <si5351_init>
    8eae:	81 11       	cpse	r24, r1
    8eb0:	30 c0       	rjmp	.+96     	; 0x8f12 <_Z16init_transmitterv+0x80>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
		}

		if((code = txSetParameters(NULL, NULL)))
    8eb2:	60 e0       	ldi	r22, 0x00	; 0
    8eb4:	70 e0       	ldi	r23, 0x00	; 0
    8eb6:	80 e0       	ldi	r24, 0x00	; 0
    8eb8:	90 e0       	ldi	r25, 0x00	; 0
    8eba:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <_Z15txSetParametersPjPb>
    8ebe:	81 11       	cpse	r24, r1
    8ec0:	2c c0       	rjmp	.+88     	; 0x8f1a <_Z16init_transmitterv+0x88>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    8ec2:	63 e0       	ldi	r22, 0x03	; 3
    8ec4:	81 e0       	ldi	r24, 0x01	; 1
    8ec6:	0e 94 d2 42 	call	0x85a4	; 0x85a4 <si5351_drive_strength>
    8eca:	81 11       	cpse	r24, r1
    8ecc:	26 c0       	rjmp	.+76     	; 0x8f1a <_Z16init_transmitterv+0x88>
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8ece:	60 e0       	ldi	r22, 0x00	; 0
    8ed0:	81 e0       	ldi	r24, 0x01	; 1
    8ed2:	0e 94 93 42 	call	0x8526	; 0x8526 <si5351_clock_enable>
    8ed6:	18 2f       	mov	r17, r24
    8ed8:	81 11       	cpse	r24, r1
    8eda:	1d c0       	rjmp	.+58     	; 0x8f16 <_Z16init_transmitterv+0x84>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    8edc:	80 91 2f 40 	lds	r24, 0x402F	; 0x80402f <g_80m_power_level_mW>
    8ee0:	90 91 30 40 	lds	r25, 0x4030	; 0x804030 <g_80m_power_level_mW+0x1>
    8ee4:	89 83       	std	Y+1, r24	; 0x01
    8ee6:	9a 83       	std	Y+2, r25	; 0x02
		
		err = txSetFrequency((Frequency_Hz*)&g_80m_frequency, true);
    8ee8:	61 e0       	ldi	r22, 0x01	; 1
    8eea:	8b e2       	ldi	r24, 0x2B	; 43
    8eec:	90 e4       	ldi	r25, 0x40	; 64
    8eee:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <_Z14txSetFrequencyPmb>
		if(!err)
    8ef2:	81 11       	cpse	r24, r1
    8ef4:	11 c0       	rjmp	.+34     	; 0x8f18 <_Z16init_transmitterv+0x86>
		{
			code = txSetParameters(&pwr_mW, NULL);
    8ef6:	60 e0       	ldi	r22, 0x00	; 0
    8ef8:	70 e0       	ldi	r23, 0x00	; 0
    8efa:	ce 01       	movw	r24, r28
    8efc:	01 96       	adiw	r24, 0x01	; 1
    8efe:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <_Z15txSetParametersPjPb>
			if((code == ERROR_CODE_NO_ERROR) || (code == ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING))
    8f02:	88 23       	and	r24, r24
    8f04:	11 f0       	breq	.+4      	; 0x8f0a <_Z16init_transmitterv+0x78>
    8f06:	86 3f       	cpi	r24, 0xF6	; 246
    8f08:	41 f4       	brne	.+16     	; 0x8f1a <_Z16init_transmitterv+0x88>
			{
				g_tx_initialized = true;
    8f0a:	91 e0       	ldi	r25, 0x01	; 1
    8f0c:	90 93 a1 4a 	sts	0x4AA1, r25	; 0x804aa1 <_ZL16g_tx_initialized>
    8f10:	04 c0       	rjmp	.+8      	; 0x8f1a <_Z16init_transmitterv+0x88>
		
		DAC0_init();

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
    8f12:	82 ed       	ldi	r24, 0xD2	; 210
    8f14:	02 c0       	rjmp	.+4      	; 0x8f1a <_Z16init_transmitterv+0x88>
    8f16:	01 c0       	rjmp	.+2      	; 0x8f1a <_Z16init_transmitterv+0x88>
		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8f18:	81 2f       	mov	r24, r17
				g_tx_initialized = true;
			}
		}

		return( code);
	}
    8f1a:	0f 90       	pop	r0
    8f1c:	0f 90       	pop	r0
    8f1e:	df 91       	pop	r29
    8f20:	cf 91       	pop	r28
    8f22:	1f 91       	pop	r17
    8f24:	08 95       	ret

00008f26 <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    8f26:	cf 93       	push	r28
    8f28:	df 93       	push	r29
    8f2a:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    8f2c:	89 2b       	or	r24, r25
    8f2e:	09 f4       	brne	.+2      	; 0x8f32 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    8f30:	b8 c0       	rjmp	.+368    	; 0x90a2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    8f32:	ed 91       	ld	r30, X+
    8f34:	fc 91       	ld	r31, X
    8f36:	11 97       	sbiw	r26, 0x01	; 1
    8f38:	e9 38       	cpi	r30, 0x89	; 137
    8f3a:	83 e1       	ldi	r24, 0x13	; 19
    8f3c:	f8 07       	cpc	r31, r24
    8f3e:	14 f4       	brge	.+4      	; 0x8f44 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    8f40:	80 e0       	ldi	r24, 0x00	; 0
    8f42:	01 c0       	rjmp	.+2      	; 0x8f46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8f44:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    8f46:	e9 38       	cpi	r30, 0x89	; 137
    8f48:	93 e1       	ldi	r25, 0x13	; 19
    8f4a:	f9 07       	cpc	r31, r25
    8f4c:	2c f4       	brge	.+10     	; 0x8f58 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    8f4e:	ff 23       	and	r31, r31
    8f50:	2c f4       	brge	.+10     	; 0x8f5c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8f52:	e0 e0       	ldi	r30, 0x00	; 0
    8f54:	f0 e0       	ldi	r31, 0x00	; 0
    8f56:	02 c0       	rjmp	.+4      	; 0x8f5c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8f58:	e8 e8       	ldi	r30, 0x88	; 136
    8f5a:	f3 e1       	ldi	r31, 0x13	; 19
    8f5c:	ef 01       	movw	r28, r30
    8f5e:	ed 93       	st	X+, r30
    8f60:	fc 93       	st	X, r31
    8f62:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    8f64:	e5 30       	cpi	r30, 0x05	; 5
    8f66:	f1 05       	cpc	r31, r1
    8f68:	20 f4       	brcc	.+8      	; 0x8f72 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    8f6a:	1d 92       	st	X+, r1
    8f6c:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    8f6e:	e0 e0       	ldi	r30, 0x00	; 0
    8f70:	8d c0       	rjmp	.+282    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    8f72:	e2 33       	cpi	r30, 0x32	; 50
    8f74:	f1 05       	cpc	r31, r1
    8f76:	30 f4       	brcc	.+12     	; 0x8f84 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    8f78:	ea e0       	ldi	r30, 0x0A	; 10
    8f7a:	f0 e0       	ldi	r31, 0x00	; 0
    8f7c:	ed 93       	st	X+, r30
    8f7e:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    8f80:	e1 e0       	ldi	r30, 0x01	; 1
    8f82:	84 c0       	rjmp	.+264    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    8f84:	e6 39       	cpi	r30, 0x96	; 150
    8f86:	f1 05       	cpc	r31, r1
    8f88:	30 f4       	brcc	.+12     	; 0x8f96 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    8f8a:	e4 e6       	ldi	r30, 0x64	; 100
    8f8c:	f0 e0       	ldi	r31, 0x00	; 0
    8f8e:	ed 93       	st	X+, r30
    8f90:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    8f92:	e2 e0       	ldi	r30, 0x02	; 2
    8f94:	7b c0       	rjmp	.+246    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    8f96:	ea 3f       	cpi	r30, 0xFA	; 250
    8f98:	f1 05       	cpc	r31, r1
    8f9a:	30 f4       	brcc	.+12     	; 0x8fa8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    8f9c:	e8 ec       	ldi	r30, 0xC8	; 200
    8f9e:	f0 e0       	ldi	r31, 0x00	; 0
    8fa0:	ed 93       	st	X+, r30
    8fa2:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    8fa4:	e3 e0       	ldi	r30, 0x03	; 3
    8fa6:	72 c0       	rjmp	.+228    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    8fa8:	ce 35       	cpi	r28, 0x5E	; 94
    8faa:	e1 e0       	ldi	r30, 0x01	; 1
    8fac:	de 07       	cpc	r29, r30
    8fae:	30 f4       	brcc	.+12     	; 0x8fbc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    8fb0:	ec e2       	ldi	r30, 0x2C	; 44
    8fb2:	f1 e0       	ldi	r31, 0x01	; 1
    8fb4:	ed 93       	st	X+, r30
    8fb6:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    8fb8:	e4 e0       	ldi	r30, 0x04	; 4
    8fba:	68 c0       	rjmp	.+208    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    8fbc:	c2 3c       	cpi	r28, 0xC2	; 194
    8fbe:	f1 e0       	ldi	r31, 0x01	; 1
    8fc0:	df 07       	cpc	r29, r31
    8fc2:	30 f4       	brcc	.+12     	; 0x8fd0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    8fc4:	e0 e9       	ldi	r30, 0x90	; 144
    8fc6:	f1 e0       	ldi	r31, 0x01	; 1
    8fc8:	ed 93       	st	X+, r30
    8fca:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    8fcc:	e5 e0       	ldi	r30, 0x05	; 5
    8fce:	5e c0       	rjmp	.+188    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    8fd0:	c6 32       	cpi	r28, 0x26	; 38
    8fd2:	92 e0       	ldi	r25, 0x02	; 2
    8fd4:	d9 07       	cpc	r29, r25
    8fd6:	30 f4       	brcc	.+12     	; 0x8fe4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    8fd8:	e4 ef       	ldi	r30, 0xF4	; 244
    8fda:	f1 e0       	ldi	r31, 0x01	; 1
    8fdc:	ed 93       	st	X+, r30
    8fde:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    8fe0:	e6 e0       	ldi	r30, 0x06	; 6
    8fe2:	54 c0       	rjmp	.+168    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    8fe4:	ca 38       	cpi	r28, 0x8A	; 138
    8fe6:	e2 e0       	ldi	r30, 0x02	; 2
    8fe8:	de 07       	cpc	r29, r30
    8fea:	30 f4       	brcc	.+12     	; 0x8ff8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    8fec:	e8 e5       	ldi	r30, 0x58	; 88
    8fee:	f2 e0       	ldi	r31, 0x02	; 2
    8ff0:	ed 93       	st	X+, r30
    8ff2:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    8ff4:	e7 e0       	ldi	r30, 0x07	; 7
    8ff6:	4a c0       	rjmp	.+148    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    8ff8:	c4 38       	cpi	r28, 0x84	; 132
    8ffa:	f3 e0       	ldi	r31, 0x03	; 3
    8ffc:	df 07       	cpc	r29, r31
    8ffe:	30 f4       	brcc	.+12     	; 0x900c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    9000:	e0 e2       	ldi	r30, 0x20	; 32
    9002:	f3 e0       	ldi	r31, 0x03	; 3
    9004:	ed 93       	st	X+, r30
    9006:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    9008:	e8 e0       	ldi	r30, 0x08	; 8
    900a:	40 c0       	rjmp	.+128    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    900c:	c2 3e       	cpi	r28, 0xE2	; 226
    900e:	94 e0       	ldi	r25, 0x04	; 4
    9010:	d9 07       	cpc	r29, r25
    9012:	30 f4       	brcc	.+12     	; 0x9020 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    9014:	e8 ee       	ldi	r30, 0xE8	; 232
    9016:	f3 e0       	ldi	r31, 0x03	; 3
    9018:	ed 93       	st	X+, r30
    901a:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    901c:	e9 e0       	ldi	r30, 0x09	; 9
    901e:	36 c0       	rjmp	.+108    	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    9020:	c6 3d       	cpi	r28, 0xD6	; 214
    9022:	e6 e0       	ldi	r30, 0x06	; 6
    9024:	de 07       	cpc	r29, r30
    9026:	30 f4       	brcc	.+12     	; 0x9034 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    9028:	ec ed       	ldi	r30, 0xDC	; 220
    902a:	f5 e0       	ldi	r31, 0x05	; 5
    902c:	ed 93       	st	X+, r30
    902e:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    9030:	ea e0       	ldi	r30, 0x0A	; 10
    9032:	2c c0       	rjmp	.+88     	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    9034:	ca 3c       	cpi	r28, 0xCA	; 202
    9036:	f8 e0       	ldi	r31, 0x08	; 8
    9038:	df 07       	cpc	r29, r31
    903a:	30 f4       	brcc	.+12     	; 0x9048 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    903c:	e0 ed       	ldi	r30, 0xD0	; 208
    903e:	f7 e0       	ldi	r31, 0x07	; 7
    9040:	ed 93       	st	X+, r30
    9042:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    9044:	eb e0       	ldi	r30, 0x0B	; 11
    9046:	22 c0       	rjmp	.+68     	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    9048:	ce 3b       	cpi	r28, 0xBE	; 190
    904a:	9a e0       	ldi	r25, 0x0A	; 10
    904c:	d9 07       	cpc	r29, r25
    904e:	30 f4       	brcc	.+12     	; 0x905c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    9050:	e4 ec       	ldi	r30, 0xC4	; 196
    9052:	f9 e0       	ldi	r31, 0x09	; 9
    9054:	ed 93       	st	X+, r30
    9056:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    9058:	ec e0       	ldi	r30, 0x0C	; 12
    905a:	18 c0       	rjmp	.+48     	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    905c:	cc 3a       	cpi	r28, 0xAC	; 172
    905e:	ed e0       	ldi	r30, 0x0D	; 13
    9060:	de 07       	cpc	r29, r30
    9062:	30 f4       	brcc	.+12     	; 0x9070 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    9064:	e8 eb       	ldi	r30, 0xB8	; 184
    9066:	fb e0       	ldi	r31, 0x0B	; 11
    9068:	ed 93       	st	X+, r30
    906a:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    906c:	ed e0       	ldi	r30, 0x0D	; 13
    906e:	0e c0       	rjmp	.+28     	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    9070:	c4 39       	cpi	r28, 0x94	; 148
    9072:	d1 41       	sbci	r29, 0x11	; 17
    9074:	30 f4       	brcc	.+12     	; 0x9082 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    9076:	e0 ea       	ldi	r30, 0xA0	; 160
    9078:	ff e0       	ldi	r31, 0x0F	; 15
    907a:	ed 93       	st	X+, r30
    907c:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    907e:	ee e0       	ldi	r30, 0x0E	; 14
    9080:	05 c0       	rjmp	.+10     	; 0x908c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    9082:	e8 e8       	ldi	r30, 0x88	; 136
    9084:	f3 e1       	ldi	r31, 0x13	; 19
    9086:	ed 93       	st	X+, r30
    9088:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    908a:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    908c:	f0 e0       	ldi	r31, 0x00	; 0
    908e:	ea 5c       	subi	r30, 0xCA	; 202
    9090:	ff 4b       	sbci	r31, 0xBF	; 191
    9092:	90 81       	ld	r25, Z
    9094:	fb 01       	movw	r30, r22
    9096:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    9098:	fa 01       	movw	r30, r20
    909a:	10 82       	st	Z, r1
	*modLevelLow = 0;
    909c:	f9 01       	movw	r30, r18
    909e:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    90a0:	01 c0       	rjmp	.+2      	; 0x90a4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    90a2:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    90a4:	df 91       	pop	r29
    90a6:	cf 91       	pop	r28
    90a8:	08 95       	ret

000090aa <_Z18txIsAntennaForBandv>:

/**
 */
bool __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    90aa:	cf 93       	push	r28
    90ac:	df 93       	push	r29
    90ae:	1f 92       	push	r1
    90b0:	cd b7       	in	r28, 0x3d	; 61
    90b2:	de b7       	in	r29, 0x3e	; 62
	bool result = false;
    90b4:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    90b6:	80 91 3d 47 	lds	r24, 0x473D	; 0x80473d <g_antenna_connect_state>
    90ba:	88 2f       	mov	r24, r24
    90bc:	90 e0       	ldi	r25, 0x00	; 0
    90be:	02 97       	sbiw	r24, 0x02	; 2
    90c0:	09 f0       	breq	.+2      	; 0x90c4 <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    90c2:	03 c0       	rjmp	.+6      	; 0x90ca <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = true;
    90c4:	81 e0       	ldi	r24, 0x01	; 1
    90c6:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    90c8:	00 00       	nop

		}
		break;
	}

	return( result);
    90ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    90cc:	0f 90       	pop	r0
    90ce:	df 91       	pop	r29
    90d0:	cf 91       	pop	r28
    90d2:	08 95       	ret

000090d4 <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_enable_rx()
{
	USART4.CTRLB |= USART_RXEN_bm;
    90d4:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    90d8:	08 95       	ret

000090da <USART1_init>:
    90da:	0e 94 60 4c 	call	0x98c0	; 0x98c0 <__floatunsisf>
    90de:	20 e0       	ldi	r18, 0x00	; 0
    90e0:	30 e0       	ldi	r19, 0x00	; 0
    90e2:	40 e8       	ldi	r20, 0x80	; 128
    90e4:	51 e4       	ldi	r21, 0x41	; 65
    90e6:	0e 94 58 4d 	call	0x9ab0	; 0x9ab0 <__mulsf3>
    90ea:	9b 01       	movw	r18, r22
    90ec:	ac 01       	movw	r20, r24
    90ee:	60 e0       	ldi	r22, 0x00	; 0
    90f0:	74 e2       	ldi	r23, 0x24	; 36
    90f2:	84 e7       	ldi	r24, 0x74	; 116
    90f4:	9d e4       	ldi	r25, 0x4D	; 77
    90f6:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__divsf3>
    90fa:	20 e0       	ldi	r18, 0x00	; 0
    90fc:	30 e0       	ldi	r19, 0x00	; 0
    90fe:	40 e0       	ldi	r20, 0x00	; 0
    9100:	5f e3       	ldi	r21, 0x3F	; 63
    9102:	0e 94 30 4b 	call	0x9660	; 0x9660 <__addsf3>
    9106:	0e 94 31 4c 	call	0x9862	; 0x9862 <__fixunssfsi>
    910a:	e0 e2       	ldi	r30, 0x20	; 32
    910c:	f8 e0       	ldi	r31, 0x08	; 8
    910e:	60 87       	std	Z+8, r22	; 0x08
    9110:	71 87       	std	Z+9, r23	; 0x09
    9112:	80 e8       	ldi	r24, 0x80	; 128
    9114:	85 83       	std	Z+5, r24	; 0x05
    9116:	80 ec       	ldi	r24, 0xC0	; 192
    9118:	86 83       	std	Z+6, r24	; 0x06
    911a:	80 e0       	ldi	r24, 0x00	; 0
    911c:	08 95       	ret

0000911e <USART1_enable_tx>:
    911e:	e0 e2       	ldi	r30, 0x20	; 32
    9120:	f8 e0       	ldi	r31, 0x08	; 8
    9122:	86 81       	ldd	r24, Z+6	; 0x06
    9124:	80 64       	ori	r24, 0x40	; 64
    9126:	86 83       	std	Z+6, r24	; 0x06
    9128:	85 81       	ldd	r24, Z+5	; 0x05
    912a:	80 62       	ori	r24, 0x20	; 32
    912c:	85 83       	std	Z+5, r24	; 0x05
    912e:	08 95       	ret

00009130 <USART1_disable>:
    9130:	e0 e2       	ldi	r30, 0x20	; 32
    9132:	f8 e0       	ldi	r31, 0x08	; 8
    9134:	86 81       	ldd	r24, Z+6	; 0x06
    9136:	8f 73       	andi	r24, 0x3F	; 63
    9138:	86 83       	std	Z+6, r24	; 0x06
    913a:	08 95       	ret

0000913c <USART1_get_data>:
    913c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    9140:	08 95       	ret

00009142 <USART4_init>:
    9142:	0e 94 60 4c 	call	0x98c0	; 0x98c0 <__floatunsisf>
    9146:	20 e0       	ldi	r18, 0x00	; 0
    9148:	30 e0       	ldi	r19, 0x00	; 0
    914a:	40 e8       	ldi	r20, 0x80	; 128
    914c:	51 e4       	ldi	r21, 0x41	; 65
    914e:	0e 94 58 4d 	call	0x9ab0	; 0x9ab0 <__mulsf3>
    9152:	9b 01       	movw	r18, r22
    9154:	ac 01       	movw	r20, r24
    9156:	60 e0       	ldi	r22, 0x00	; 0
    9158:	74 e2       	ldi	r23, 0x24	; 36
    915a:	84 e7       	ldi	r24, 0x74	; 116
    915c:	9d e4       	ldi	r25, 0x4D	; 77
    915e:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__divsf3>
    9162:	20 e0       	ldi	r18, 0x00	; 0
    9164:	30 e0       	ldi	r19, 0x00	; 0
    9166:	40 e0       	ldi	r20, 0x00	; 0
    9168:	5f e3       	ldi	r21, 0x3F	; 63
    916a:	0e 94 30 4b 	call	0x9660	; 0x9660 <__addsf3>
    916e:	0e 94 31 4c 	call	0x9862	; 0x9862 <__fixunssfsi>
    9172:	e0 e8       	ldi	r30, 0x80	; 128
    9174:	f8 e0       	ldi	r31, 0x08	; 8
    9176:	60 87       	std	Z+8, r22	; 0x08
    9178:	71 87       	std	Z+9, r23	; 0x09
    917a:	80 e8       	ldi	r24, 0x80	; 128
    917c:	85 83       	std	Z+5, r24	; 0x05
    917e:	80 ec       	ldi	r24, 0xC0	; 192
    9180:	86 83       	std	Z+6, r24	; 0x06
    9182:	80 e0       	ldi	r24, 0x00	; 0
    9184:	08 95       	ret

00009186 <USART4_enable_tx>:
 *
 * \return Nothing
 */
void USART4_enable_tx()
{
	USART4.CTRLB |= USART_TXEN_bm;
    9186:	e0 e8       	ldi	r30, 0x80	; 128
    9188:	f8 e0       	ldi	r31, 0x08	; 8
    918a:	86 81       	ldd	r24, Z+6	; 0x06
    918c:	80 64       	ori	r24, 0x40	; 64
    918e:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLA |= 1 << USART_DREIE_bp; /* Transmit Data Ready Interrupt Enable: enable */
    9190:	85 81       	ldd	r24, Z+5	; 0x05
    9192:	80 62       	ori	r24, 0x20	; 32
    9194:	85 83       	std	Z+5, r24	; 0x05
    9196:	08 95       	ret

00009198 <USART4_disable>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    9198:	e0 e8       	ldi	r30, 0x80	; 128
    919a:	f8 e0       	ldi	r31, 0x08	; 8
    919c:	86 81       	ldd	r24, Z+6	; 0x06
    919e:	8f 73       	andi	r24, 0x3F	; 63
    91a0:	86 83       	std	Z+6, r24	; 0x06
    91a2:	08 95       	ret

000091a4 <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    91a4:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    91a8:	08 95       	ret

000091aa <_Z7timeDifmm>:
    (ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    ((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
  }

  return result;
}
    91aa:	26 17       	cp	r18, r22
    91ac:	37 07       	cpc	r19, r23
    91ae:	48 07       	cpc	r20, r24
    91b0:	59 07       	cpc	r21, r25
    91b2:	28 f4       	brcc	.+10     	; 0x91be <_Z7timeDifmm+0x14>
    91b4:	62 1b       	sub	r22, r18
    91b6:	73 0b       	sbc	r23, r19
    91b8:	84 0b       	sbc	r24, r20
    91ba:	95 0b       	sbc	r25, r21
    91bc:	08 95       	ret
    91be:	62 1b       	sub	r22, r18
    91c0:	73 0b       	sbc	r23, r19
    91c2:	84 0b       	sbc	r24, r20
    91c4:	95 0b       	sbc	r25, r21
    91c6:	08 95       	ret

000091c8 <_Z11only_digitsPc>:

/** 
 * Checks a string to see if it contains only numerical characters
 */
bool only_digits(char *s)
{
    91c8:	fc 01       	movw	r30, r24
	while(*s)
    91ca:	20 81       	ld	r18, Z
    91cc:	22 23       	and	r18, r18
    91ce:	49 f0       	breq	.+18     	; 0x91e2 <_Z11only_digitsPc+0x1a>
	{
		if(isdigit(*s++) == 0)
    91d0:	31 96       	adiw	r30, 0x01	; 1
    91d2:	30 e0       	ldi	r19, 0x00	; 0
    91d4:	20 53       	subi	r18, 0x30	; 48
    91d6:	31 09       	sbc	r19, r1
    91d8:	2a 30       	cpi	r18, 0x0A	; 10
    91da:	31 05       	cpc	r19, r1
    91dc:	b0 f3       	brcs	.-20     	; 0x91ca <_Z11only_digitsPc+0x2>
		{
			return( false);
    91de:	80 e0       	ldi	r24, 0x00	; 0
    91e0:	08 95       	ret
		}
	}

	return( true);
    91e2:	81 e0       	ldi	r24, 0x01	; 1
}
    91e4:	08 95       	ret

000091e6 <_Z15frequencyStringPcm>:
 * result = pointer to a character sting to hold the frequency string
 * freq = the frequency value to be represented as a string
 * Returns 1 if an error is detected
 */
bool frequencyString(char* result, uint32_t freq)
{
    91e6:	ef 92       	push	r14
    91e8:	ff 92       	push	r15
    91ea:	0f 93       	push	r16
    91ec:	1f 93       	push	r17
    91ee:	cf 93       	push	r28
    91f0:	df 93       	push	r29
    91f2:	9c 01       	movw	r18, r24
	bool failure = true;
	
	if(!result)
    91f4:	89 2b       	or	r24, r25
    91f6:	a9 f1       	breq	.+106    	; 0x9262 <_Z15frequencyStringPcm+0x7c>
	{
		return(failure);
	}
	
	if((freq > 3500000) && (freq < 4000000)) // Accept only a Hz value to be expressed in kHz
    91f8:	db 01       	movw	r26, r22
    91fa:	ca 01       	movw	r24, r20
    91fc:	81 5e       	subi	r24, 0xE1	; 225
    91fe:	97 46       	sbci	r25, 0x67	; 103
    9200:	a5 43       	sbci	r26, 0x35	; 53
    9202:	b1 09       	sbc	r27, r1
    9204:	8f 31       	cpi	r24, 0x1F	; 31
    9206:	91 4a       	sbci	r25, 0xA1	; 161
    9208:	a7 40       	sbci	r26, 0x07	; 7
    920a:	b1 05       	cpc	r27, r1
    920c:	60 f5       	brcc	.+88     	; 0x9266 <_Z15frequencyStringPcm+0x80>
    920e:	cb 01       	movw	r24, r22
    9210:	ba 01       	movw	r22, r20
    9212:	e9 01       	movw	r28, r18
	{
		uint32_t frac = (freq % 1000)/100;		
    9214:	28 ee       	ldi	r18, 0xE8	; 232
    9216:	33 e0       	ldi	r19, 0x03	; 3
    9218:	40 e0       	ldi	r20, 0x00	; 0
    921a:	50 e0       	ldi	r21, 0x00	; 0
    921c:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    9220:	12 2f       	mov	r17, r18
    9222:	03 2f       	mov	r16, r19
    9224:	f4 2e       	mov	r15, r20
    9226:	e5 2e       	mov	r14, r21
    9228:	24 e6       	ldi	r18, 0x64	; 100
    922a:	30 e0       	ldi	r19, 0x00	; 0
    922c:	40 e0       	ldi	r20, 0x00	; 0
    922e:	50 e0       	ldi	r21, 0x00	; 0
    9230:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
		sprintf(result, "%lu.%1lu kHz", freq/1000, frac);
    9234:	5f 93       	push	r21
    9236:	4f 93       	push	r20
    9238:	3f 93       	push	r19
    923a:	2f 93       	push	r18
    923c:	ef 92       	push	r14
    923e:	ff 92       	push	r15
    9240:	0f 93       	push	r16
    9242:	1f 93       	push	r17
    9244:	8c ee       	ldi	r24, 0xEC	; 236
    9246:	94 e4       	ldi	r25, 0x44	; 68
    9248:	9f 93       	push	r25
    924a:	8f 93       	push	r24
    924c:	df 93       	push	r29
    924e:	cf 93       	push	r28
    9250:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    9254:	8d b7       	in	r24, 0x3d	; 61
    9256:	9e b7       	in	r25, 0x3e	; 62
    9258:	0c 96       	adiw	r24, 0x0c	; 12
    925a:	8d bf       	out	0x3d, r24	; 61
    925c:	9e bf       	out	0x3e, r25	; 62
		
		failure = false;
    925e:	80 e0       	ldi	r24, 0x00	; 0
    9260:	03 c0       	rjmp	.+6      	; 0x9268 <_Z15frequencyStringPcm+0x82>
{
	bool failure = true;
	
	if(!result)
	{
		return(failure);
    9262:	81 e0       	ldi	r24, 0x01	; 1
    9264:	01 c0       	rjmp	.+2      	; 0x9268 <_Z15frequencyStringPcm+0x82>
 * freq = the frequency value to be represented as a string
 * Returns 1 if an error is detected
 */
bool frequencyString(char* result, uint32_t freq)
{
	bool failure = true;
    9266:	81 e0       	ldi	r24, 0x01	; 1
		
		failure = false;
	}
	
	return(failure);	
}
    9268:	df 91       	pop	r29
    926a:	cf 91       	pop	r28
    926c:	1f 91       	pop	r17
    926e:	0f 91       	pop	r16
    9270:	ff 90       	pop	r15
    9272:	ef 90       	pop	r14
    9274:	08 95       	ret

00009276 <_Z12frequencyValPcPm>:
 * str = pointer to a string containing the frequency string
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
    9276:	4f 92       	push	r4
    9278:	5f 92       	push	r5
    927a:	6f 92       	push	r6
    927c:	7f 92       	push	r7
    927e:	bf 92       	push	r11
    9280:	cf 92       	push	r12
    9282:	df 92       	push	r13
    9284:	ef 92       	push	r14
    9286:	ff 92       	push	r15
    9288:	0f 93       	push	r16
    928a:	1f 93       	push	r17
    928c:	cf 93       	push	r28
    928e:	df 93       	push	r29
	bool failure = true;
	
	if(!str)
    9290:	00 97       	sbiw	r24, 0x00	; 0
    9292:	09 f4       	brne	.+2      	; 0x9296 <_Z12frequencyValPcPm+0x20>
    9294:	12 c1       	rjmp	.+548    	; 0x94ba <_Z12frequencyValPcPm+0x244>
    9296:	7b 01       	movw	r14, r22
    9298:	6c 01       	movw	r12, r24
	{
		return(failure);
	}
	
	int decimal = '.';
	char* decimalLocation = strchr(str, decimal);
    929a:	6e e2       	ldi	r22, 0x2E	; 46
    929c:	70 e0       	ldi	r23, 0x00	; 0
    929e:	0e 94 ed 4f 	call	0x9fda	; 0x9fda <strchr>
	Frequency_Hz temp;
	
	if(decimalLocation) // Assume Hz or kHz
    92a2:	89 2b       	or	r24, r25
    92a4:	09 f4       	brne	.+2      	; 0x92a8 <_Z12frequencyValPcPm+0x32>
    92a6:	a2 c0       	rjmp	.+324    	; 0x93ec <_Z12frequencyValPcPm+0x176>
	{
		float f = atof(str);
    92a8:	c6 01       	movw	r24, r12
    92aa:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <atof>
    92ae:	06 2f       	mov	r16, r22
    92b0:	17 2f       	mov	r17, r23
    92b2:	c8 2f       	mov	r28, r24
    92b4:	d9 2f       	mov	r29, r25
		
		if((f > 3.5) && (f < 4.0))
    92b6:	20 e0       	ldi	r18, 0x00	; 0
    92b8:	30 e0       	ldi	r19, 0x00	; 0
    92ba:	40 e6       	ldi	r20, 0x60	; 96
    92bc:	50 e4       	ldi	r21, 0x40	; 64
    92be:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <__gesf2>
    92c2:	18 16       	cp	r1, r24
    92c4:	e4 f4       	brge	.+56     	; 0x92fe <_Z12frequencyValPcPm+0x88>
    92c6:	20 e0       	ldi	r18, 0x00	; 0
    92c8:	30 e0       	ldi	r19, 0x00	; 0
    92ca:	40 e8       	ldi	r20, 0x80	; 128
    92cc:	50 e4       	ldi	r21, 0x40	; 64
    92ce:	60 2f       	mov	r22, r16
    92d0:	71 2f       	mov	r23, r17
    92d2:	8c 2f       	mov	r24, r28
    92d4:	9d 2f       	mov	r25, r29
    92d6:	0e 94 b3 4b 	call	0x9766	; 0x9766 <__cmpsf2>
    92da:	88 23       	and	r24, r24
    92dc:	84 f4       	brge	.+32     	; 0x92fe <_Z12frequencyValPcPm+0x88>
		{
			f *= 1000000.;
    92de:	20 e0       	ldi	r18, 0x00	; 0
    92e0:	34 e2       	ldi	r19, 0x24	; 36
    92e2:	44 e7       	ldi	r20, 0x74	; 116
    92e4:	59 e4       	ldi	r21, 0x49	; 73
    92e6:	60 2f       	mov	r22, r16
    92e8:	71 2f       	mov	r23, r17
    92ea:	8c 2f       	mov	r24, r28
    92ec:	9d 2f       	mov	r25, r29
    92ee:	0e 94 58 4d 	call	0x9ab0	; 0x9ab0 <__mulsf3>
    92f2:	06 2f       	mov	r16, r22
    92f4:	17 2f       	mov	r17, r23
    92f6:	c8 2f       	mov	r28, r24
    92f8:	d9 2f       	mov	r29, r25
			failure = false;
    92fa:	b1 2c       	mov	r11, r1
    92fc:	47 c0       	rjmp	.+142    	; 0x938c <_Z12frequencyValPcPm+0x116>
		}
		else if((f > 3500.) && (f < 4000.))
    92fe:	20 e0       	ldi	r18, 0x00	; 0
    9300:	30 ec       	ldi	r19, 0xC0	; 192
    9302:	4a e5       	ldi	r20, 0x5A	; 90
    9304:	55 e4       	ldi	r21, 0x45	; 69
    9306:	60 2f       	mov	r22, r16
    9308:	71 2f       	mov	r23, r17
    930a:	8c 2f       	mov	r24, r28
    930c:	9d 2f       	mov	r25, r29
    930e:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <__gesf2>
    9312:	18 16       	cp	r1, r24
    9314:	e4 f4       	brge	.+56     	; 0x934e <_Z12frequencyValPcPm+0xd8>
    9316:	20 e0       	ldi	r18, 0x00	; 0
    9318:	30 e0       	ldi	r19, 0x00	; 0
    931a:	4a e7       	ldi	r20, 0x7A	; 122
    931c:	55 e4       	ldi	r21, 0x45	; 69
    931e:	60 2f       	mov	r22, r16
    9320:	71 2f       	mov	r23, r17
    9322:	8c 2f       	mov	r24, r28
    9324:	9d 2f       	mov	r25, r29
    9326:	0e 94 b3 4b 	call	0x9766	; 0x9766 <__cmpsf2>
    932a:	88 23       	and	r24, r24
    932c:	84 f4       	brge	.+32     	; 0x934e <_Z12frequencyValPcPm+0xd8>
		{
			f *= 1000.;
    932e:	20 e0       	ldi	r18, 0x00	; 0
    9330:	30 e0       	ldi	r19, 0x00	; 0
    9332:	4a e7       	ldi	r20, 0x7A	; 122
    9334:	54 e4       	ldi	r21, 0x44	; 68
    9336:	60 2f       	mov	r22, r16
    9338:	71 2f       	mov	r23, r17
    933a:	8c 2f       	mov	r24, r28
    933c:	9d 2f       	mov	r25, r29
    933e:	0e 94 58 4d 	call	0x9ab0	; 0x9ab0 <__mulsf3>
    9342:	06 2f       	mov	r16, r22
    9344:	17 2f       	mov	r17, r23
    9346:	c8 2f       	mov	r28, r24
    9348:	d9 2f       	mov	r29, r25
			failure = false;
    934a:	b1 2c       	mov	r11, r1
    934c:	1f c0       	rjmp	.+62     	; 0x938c <_Z12frequencyValPcPm+0x116>
		}
		else if((f > 3500000.) && (f < 4000000.))
    934e:	20 e8       	ldi	r18, 0x80	; 128
    9350:	3f e9       	ldi	r19, 0x9F	; 159
    9352:	45 e5       	ldi	r20, 0x55	; 85
    9354:	5a e4       	ldi	r21, 0x4A	; 74
    9356:	60 2f       	mov	r22, r16
    9358:	71 2f       	mov	r23, r17
    935a:	8c 2f       	mov	r24, r28
    935c:	9d 2f       	mov	r25, r29
    935e:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <__gesf2>
    9362:	18 16       	cp	r1, r24
    9364:	7c f4       	brge	.+30     	; 0x9384 <_Z12frequencyValPcPm+0x10e>
    9366:	20 e0       	ldi	r18, 0x00	; 0
    9368:	34 e2       	ldi	r19, 0x24	; 36
    936a:	44 e7       	ldi	r20, 0x74	; 116
    936c:	5a e4       	ldi	r21, 0x4A	; 74
    936e:	60 2f       	mov	r22, r16
    9370:	71 2f       	mov	r23, r17
    9372:	8c 2f       	mov	r24, r28
    9374:	9d 2f       	mov	r25, r29
    9376:	0e 94 b3 4b 	call	0x9766	; 0x9766 <__cmpsf2>
    937a:	88 23       	and	r24, r24
    937c:	34 f0       	brlt	.+12     	; 0x938a <_Z12frequencyValPcPm+0x114>
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
	bool failure = true;
    937e:	bb 24       	eor	r11, r11
    9380:	b3 94       	inc	r11
    9382:	04 c0       	rjmp	.+8      	; 0x938c <_Z12frequencyValPcPm+0x116>
    9384:	bb 24       	eor	r11, r11
    9386:	b3 94       	inc	r11
    9388:	01 c0       	rjmp	.+2      	; 0x938c <_Z12frequencyValPcPm+0x116>
			f *= 1000.;
			failure = false;
		}
		else if((f > 3500000.) && (f < 4000000.))
		{
			failure = false;
    938a:	b1 2c       	mov	r11, r1
		}
		
		if(!failure)
    938c:	b1 10       	cpse	r11, r1
    938e:	97 c0       	rjmp	.+302    	; 0x94be <_Z12frequencyValPcPm+0x248>
		{
			temp = (Frequency_Hz)ceilf(f);
    9390:	60 2f       	mov	r22, r16
    9392:	71 2f       	mov	r23, r17
    9394:	8c 2f       	mov	r24, r28
    9396:	9d 2f       	mov	r25, r29
    9398:	0e 94 9c 4b 	call	0x9738	; 0x9738 <ceil>
    939c:	0e 94 31 4c 	call	0x9862	; 0x9862 <__fixunssfsi>
    93a0:	2b 01       	movw	r4, r22
    93a2:	3c 01       	movw	r6, r24
			temp = temp - (temp % 100);
    93a4:	24 e6       	ldi	r18, 0x64	; 100
    93a6:	30 e0       	ldi	r19, 0x00	; 0
    93a8:	40 e0       	ldi	r20, 0x00	; 0
    93aa:	50 e0       	ldi	r21, 0x00	; 0
    93ac:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    93b0:	46 1a       	sub	r4, r22
    93b2:	57 0a       	sbc	r5, r23
    93b4:	68 0a       	sbc	r6, r24
    93b6:	79 0a       	sbc	r7, r25
			if(result) *result = temp;
    93b8:	e1 14       	cp	r14, r1
    93ba:	f1 04       	cpc	r15, r1
    93bc:	29 f0       	breq	.+10     	; 0x93c8 <_Z12frequencyValPcPm+0x152>
    93be:	f7 01       	movw	r30, r14
    93c0:	40 82       	st	Z, r4
    93c2:	51 82       	std	Z+1, r5	; 0x01
    93c4:	62 82       	std	Z+2, r6	; 0x02
    93c6:	73 82       	std	Z+3, r7	; 0x03
			sprintf(str, "%4.1f kHz", (double)f);
    93c8:	df 93       	push	r29
    93ca:	cf 93       	push	r28
    93cc:	1f 93       	push	r17
    93ce:	0f 93       	push	r16
    93d0:	89 ef       	ldi	r24, 0xF9	; 249
    93d2:	94 e4       	ldi	r25, 0x44	; 68
    93d4:	9f 93       	push	r25
    93d6:	8f 93       	push	r24
    93d8:	df 92       	push	r13
    93da:	cf 92       	push	r12
    93dc:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    93e0:	8d b7       	in	r24, 0x3d	; 61
    93e2:	9e b7       	in	r25, 0x3e	; 62
    93e4:	08 96       	adiw	r24, 0x08	; 8
    93e6:	8d bf       	out	0x3d, r24	; 61
    93e8:	9e bf       	out	0x3e, r25	; 62
    93ea:	69 c0       	rjmp	.+210    	; 0x94be <_Z12frequencyValPcPm+0x248>
		}
	}
	else
	{
		Frequency_Hz f = (Frequency_Hz)atol(str);
    93ec:	c6 01       	movw	r24, r12
    93ee:	0e 94 b3 4f 	call	0x9f66	; 0x9f66 <atol>
    93f2:	2b 01       	movw	r4, r22
    93f4:	3c 01       	movw	r6, r24
		
		if((f > 3500) && (f < 4000))
    93f6:	dc 01       	movw	r26, r24
    93f8:	cb 01       	movw	r24, r22
    93fa:	8d 5a       	subi	r24, 0xAD	; 173
    93fc:	9d 40       	sbci	r25, 0x0D	; 13
    93fe:	a1 09       	sbc	r26, r1
    9400:	b1 09       	sbc	r27, r1
    9402:	83 3f       	cpi	r24, 0xF3	; 243
    9404:	91 40       	sbci	r25, 0x01	; 1
    9406:	a1 05       	cpc	r26, r1
    9408:	b1 05       	cpc	r27, r1
    940a:	50 f4       	brcc	.+20     	; 0x9420 <_Z12frequencyValPcPm+0x1aa>
		{
			f *= 1000;
    940c:	a8 ee       	ldi	r26, 0xE8	; 232
    940e:	b3 e0       	ldi	r27, 0x03	; 3
    9410:	a3 01       	movw	r20, r6
    9412:	92 01       	movw	r18, r4
    9414:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <__muluhisi3>
    9418:	2b 01       	movw	r4, r22
    941a:	3c 01       	movw	r6, r24
			failure = false;
    941c:	b1 2c       	mov	r11, r1
    941e:	1b c0       	rjmp	.+54     	; 0x9456 <_Z12frequencyValPcPm+0x1e0>
		}
		else if((f > 3500000) && (f < 4000000))
    9420:	d3 01       	movw	r26, r6
    9422:	c2 01       	movw	r24, r4
    9424:	81 5e       	subi	r24, 0xE1	; 225
    9426:	97 46       	sbci	r25, 0x67	; 103
    9428:	a5 43       	sbci	r26, 0x35	; 53
    942a:	b1 09       	sbc	r27, r1
    942c:	8f 31       	cpi	r24, 0x1F	; 31
    942e:	91 4a       	sbci	r25, 0xA1	; 161
    9430:	a7 40       	sbci	r26, 0x07	; 7
    9432:	b1 05       	cpc	r27, r1
    9434:	70 f4       	brcc	.+28     	; 0x9452 <_Z12frequencyValPcPm+0x1dc>
		{
			f = f - (f % 100);
    9436:	c3 01       	movw	r24, r6
    9438:	b2 01       	movw	r22, r4
    943a:	24 e6       	ldi	r18, 0x64	; 100
    943c:	30 e0       	ldi	r19, 0x00	; 0
    943e:	40 e0       	ldi	r20, 0x00	; 0
    9440:	50 e0       	ldi	r21, 0x00	; 0
    9442:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    9446:	46 1a       	sub	r4, r22
    9448:	57 0a       	sbc	r5, r23
    944a:	68 0a       	sbc	r6, r24
    944c:	79 0a       	sbc	r7, r25
			failure = false;
    944e:	b1 2c       	mov	r11, r1
    9450:	02 c0       	rjmp	.+4      	; 0x9456 <_Z12frequencyValPcPm+0x1e0>
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
	bool failure = true;
    9452:	bb 24       	eor	r11, r11
    9454:	b3 94       	inc	r11
		{
			f = f - (f % 100);
			failure = false;
		}
		
		if(!failure)
    9456:	b1 10       	cpse	r11, r1
    9458:	32 c0       	rjmp	.+100    	; 0x94be <_Z12frequencyValPcPm+0x248>
		{
			if(result) *result = f;
    945a:	e1 14       	cp	r14, r1
    945c:	f1 04       	cpc	r15, r1
    945e:	29 f0       	breq	.+10     	; 0x946a <_Z12frequencyValPcPm+0x1f4>
    9460:	f7 01       	movw	r30, r14
    9462:	40 82       	st	Z, r4
    9464:	51 82       	std	Z+1, r5	; 0x01
    9466:	62 82       	std	Z+2, r6	; 0x02
    9468:	73 82       	std	Z+3, r7	; 0x03
			sprintf(str, "%lu.%1lu kHz", f/1000, (f % 1000)/100);
    946a:	c3 01       	movw	r24, r6
    946c:	b2 01       	movw	r22, r4
    946e:	28 ee       	ldi	r18, 0xE8	; 232
    9470:	33 e0       	ldi	r19, 0x03	; 3
    9472:	40 e0       	ldi	r20, 0x00	; 0
    9474:	50 e0       	ldi	r21, 0x00	; 0
    9476:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    947a:	c2 2f       	mov	r28, r18
    947c:	d3 2f       	mov	r29, r19
    947e:	14 2f       	mov	r17, r20
    9480:	05 2f       	mov	r16, r21
    9482:	24 e6       	ldi	r18, 0x64	; 100
    9484:	30 e0       	ldi	r19, 0x00	; 0
    9486:	40 e0       	ldi	r20, 0x00	; 0
    9488:	50 e0       	ldi	r21, 0x00	; 0
    948a:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    948e:	5f 93       	push	r21
    9490:	4f 93       	push	r20
    9492:	3f 93       	push	r19
    9494:	2f 93       	push	r18
    9496:	0f 93       	push	r16
    9498:	1f 93       	push	r17
    949a:	df 93       	push	r29
    949c:	cf 93       	push	r28
    949e:	8c ee       	ldi	r24, 0xEC	; 236
    94a0:	94 e4       	ldi	r25, 0x44	; 68
    94a2:	9f 93       	push	r25
    94a4:	8f 93       	push	r24
    94a6:	df 92       	push	r13
    94a8:	cf 92       	push	r12
    94aa:	0e 94 34 50 	call	0xa068	; 0xa068 <sprintf>
    94ae:	8d b7       	in	r24, 0x3d	; 61
    94b0:	9e b7       	in	r25, 0x3e	; 62
    94b2:	0c 96       	adiw	r24, 0x0c	; 12
    94b4:	8d bf       	out	0x3d, r24	; 61
    94b6:	9e bf       	out	0x3e, r25	; 62
    94b8:	02 c0       	rjmp	.+4      	; 0x94be <_Z12frequencyValPcPm+0x248>
{
	bool failure = true;
	
	if(!str)
	{
		return(failure);
    94ba:	bb 24       	eor	r11, r11
    94bc:	b3 94       	inc	r11
			sprintf(str, "%lu.%1lu kHz", f/1000, (f % 1000)/100);
		}
	}
	
	return(failure);	
}
    94be:	8b 2d       	mov	r24, r11
    94c0:	df 91       	pop	r29
    94c2:	cf 91       	pop	r28
    94c4:	1f 91       	pop	r17
    94c6:	0f 91       	pop	r16
    94c8:	ff 90       	pop	r15
    94ca:	ef 90       	pop	r14
    94cc:	df 90       	pop	r13
    94ce:	cf 90       	pop	r12
    94d0:	bf 90       	pop	r11
    94d2:	7f 90       	pop	r7
    94d4:	6f 90       	pop	r6
    94d6:	5f 90       	pop	r5
    94d8:	4f 90       	pop	r4
    94da:	08 95       	ret

000094dc <_Z8fox2TextPc5Fox_t>:

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
	
	switch(fox)
    94dc:	46 2f       	mov	r20, r22
    94de:	50 e0       	ldi	r21, 0x00	; 0
    94e0:	42 31       	cpi	r20, 0x12	; 18
    94e2:	51 05       	cpc	r21, r1
    94e4:	08 f0       	brcs	.+2      	; 0x94e8 <_Z8fox2TextPc5Fox_t+0xc>
    94e6:	b9 c0       	rjmp	.+370    	; 0x965a <_Z8fox2TextPc5Fox_t+0x17e>
    94e8:	fa 01       	movw	r30, r20
    94ea:	ea 5e       	subi	r30, 0xEA	; 234
    94ec:	fe 4f       	sbci	r31, 0xFE	; 254
    94ee:	0c 94 3e 4e 	jmp	0x9c7c	; 0x9c7c <__tablejump2__>
	{
		case BEACON:
		{
			sprintf(str, "Finish \"MO\"");
    94f2:	2c e0       	ldi	r18, 0x0C	; 12
    94f4:	e3 e0       	ldi	r30, 0x03	; 3
    94f6:	f5 e4       	ldi	r31, 0x45	; 69
    94f8:	dc 01       	movw	r26, r24
    94fa:	01 90       	ld	r0, Z+
    94fc:	0d 92       	st	X+, r0
    94fe:	2a 95       	dec	r18
    9500:	e1 f7       	brne	.-8      	; 0x94fa <_Z8fox2TextPc5Fox_t+0x1e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9502:	80 e0       	ldi	r24, 0x00	; 0
	{
		case BEACON:
		{
			sprintf(str, "Finish \"MO\"");
		}
		break;
    9504:	08 95       	ret
		
		case FOX_1:
		{
			sprintf(str, "Classic Fox 1 \"MOE\"");
    9506:	24 e1       	ldi	r18, 0x14	; 20
    9508:	ef e0       	ldi	r30, 0x0F	; 15
    950a:	f5 e4       	ldi	r31, 0x45	; 69
    950c:	dc 01       	movw	r26, r24
    950e:	01 90       	ld	r0, Z+
    9510:	0d 92       	st	X+, r0
    9512:	2a 95       	dec	r18
    9514:	e1 f7       	brne	.-8      	; 0x950e <_Z8fox2TextPc5Fox_t+0x32>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9516:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_1:
		{
			sprintf(str, "Classic Fox 1 \"MOE\"");
		}
		break;
    9518:	08 95       	ret
		
		case FOX_2:
		{
			sprintf(str, "Classic Fox 2 \"MOI\"");
    951a:	24 e1       	ldi	r18, 0x14	; 20
    951c:	e3 e2       	ldi	r30, 0x23	; 35
    951e:	f5 e4       	ldi	r31, 0x45	; 69
    9520:	dc 01       	movw	r26, r24
    9522:	01 90       	ld	r0, Z+
    9524:	0d 92       	st	X+, r0
    9526:	2a 95       	dec	r18
    9528:	e1 f7       	brne	.-8      	; 0x9522 <_Z8fox2TextPc5Fox_t+0x46>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    952a:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_2:
		{
			sprintf(str, "Classic Fox 2 \"MOI\"");
		}
		break;
    952c:	08 95       	ret
		
		case FOX_3:
		{
			sprintf(str, "Classic Fox 3 \"MOS\"");
    952e:	24 e1       	ldi	r18, 0x14	; 20
    9530:	e7 e3       	ldi	r30, 0x37	; 55
    9532:	f5 e4       	ldi	r31, 0x45	; 69
    9534:	dc 01       	movw	r26, r24
    9536:	01 90       	ld	r0, Z+
    9538:	0d 92       	st	X+, r0
    953a:	2a 95       	dec	r18
    953c:	e1 f7       	brne	.-8      	; 0x9536 <_Z8fox2TextPc5Fox_t+0x5a>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    953e:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_3:
		{
			sprintf(str, "Classic Fox 3 \"MOS\"");
		}
		break;
    9540:	08 95       	ret
		
		case FOX_4:
		{
			sprintf(str, "Classic Fox 4 \"MOH\"");
    9542:	24 e1       	ldi	r18, 0x14	; 20
    9544:	eb e4       	ldi	r30, 0x4B	; 75
    9546:	f5 e4       	ldi	r31, 0x45	; 69
    9548:	dc 01       	movw	r26, r24
    954a:	01 90       	ld	r0, Z+
    954c:	0d 92       	st	X+, r0
    954e:	2a 95       	dec	r18
    9550:	e1 f7       	brne	.-8      	; 0x954a <_Z8fox2TextPc5Fox_t+0x6e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9552:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_4:
		{
			sprintf(str, "Classic Fox 4 \"MOH\"");
		}
		break;
    9554:	08 95       	ret
		
		case FOX_5:
		{
			sprintf(str, "Classic Fox 5 \"MO5\"");
    9556:	24 e1       	ldi	r18, 0x14	; 20
    9558:	ef e5       	ldi	r30, 0x5F	; 95
    955a:	f5 e4       	ldi	r31, 0x45	; 69
    955c:	dc 01       	movw	r26, r24
    955e:	01 90       	ld	r0, Z+
    9560:	0d 92       	st	X+, r0
    9562:	2a 95       	dec	r18
    9564:	e1 f7       	brne	.-8      	; 0x955e <_Z8fox2TextPc5Fox_t+0x82>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9566:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_5:
		{
			sprintf(str, "Classic Fox 5 \"MO5\"");
		}
		break;
    9568:	08 95       	ret
		
		case FOXORING:
		{
			sprintf(str, "Foxoring");
    956a:	29 e0       	ldi	r18, 0x09	; 9
    956c:	e3 e7       	ldi	r30, 0x73	; 115
    956e:	f5 e4       	ldi	r31, 0x45	; 69
    9570:	dc 01       	movw	r26, r24
    9572:	01 90       	ld	r0, Z+
    9574:	0d 92       	st	X+, r0
    9576:	2a 95       	dec	r18
    9578:	e1 f7       	brne	.-8      	; 0x9572 <_Z8fox2TextPc5Fox_t+0x96>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    957a:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOXORING:
		{
			sprintf(str, "Foxoring");
		}
		break;
    957c:	08 95       	ret
		
		case SPECTATOR:
		{
			sprintf(str, "Spectator \"S\"");
    957e:	2e e0       	ldi	r18, 0x0E	; 14
    9580:	ec e7       	ldi	r30, 0x7C	; 124
    9582:	f5 e4       	ldi	r31, 0x45	; 69
    9584:	dc 01       	movw	r26, r24
    9586:	01 90       	ld	r0, Z+
    9588:	0d 92       	st	X+, r0
    958a:	2a 95       	dec	r18
    958c:	e1 f7       	brne	.-8      	; 0x9586 <_Z8fox2TextPc5Fox_t+0xaa>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    958e:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPECTATOR:
		{
			sprintf(str, "Spectator \"S\"");
		}
		break;
    9590:	08 95       	ret
		
		case SPRINT_S1:
		{
			sprintf(str, "Sprint Slow 1 \"ME\"");
    9592:	23 e1       	ldi	r18, 0x13	; 19
    9594:	ea e8       	ldi	r30, 0x8A	; 138
    9596:	f5 e4       	ldi	r31, 0x45	; 69
    9598:	dc 01       	movw	r26, r24
    959a:	01 90       	ld	r0, Z+
    959c:	0d 92       	st	X+, r0
    959e:	2a 95       	dec	r18
    95a0:	e1 f7       	brne	.-8      	; 0x959a <_Z8fox2TextPc5Fox_t+0xbe>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    95a2:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S1:
		{
			sprintf(str, "Sprint Slow 1 \"ME\"");
		}
		break;
    95a4:	08 95       	ret
		
		case SPRINT_S2:
		{
			sprintf(str, "Sprint Slow 2 \"MI\"");
    95a6:	23 e1       	ldi	r18, 0x13	; 19
    95a8:	ed e9       	ldi	r30, 0x9D	; 157
    95aa:	f5 e4       	ldi	r31, 0x45	; 69
    95ac:	dc 01       	movw	r26, r24
    95ae:	01 90       	ld	r0, Z+
    95b0:	0d 92       	st	X+, r0
    95b2:	2a 95       	dec	r18
    95b4:	e1 f7       	brne	.-8      	; 0x95ae <_Z8fox2TextPc5Fox_t+0xd2>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    95b6:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S2:
		{
			sprintf(str, "Sprint Slow 2 \"MI\"");
		}
		break;
    95b8:	08 95       	ret
		
		case SPRINT_S3:
		{
			sprintf(str, "Sprint Slow 3 \"MS\"");
    95ba:	23 e1       	ldi	r18, 0x13	; 19
    95bc:	e0 eb       	ldi	r30, 0xB0	; 176
    95be:	f5 e4       	ldi	r31, 0x45	; 69
    95c0:	dc 01       	movw	r26, r24
    95c2:	01 90       	ld	r0, Z+
    95c4:	0d 92       	st	X+, r0
    95c6:	2a 95       	dec	r18
    95c8:	e1 f7       	brne	.-8      	; 0x95c2 <_Z8fox2TextPc5Fox_t+0xe6>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    95ca:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S3:
		{
			sprintf(str, "Sprint Slow 3 \"MS\"");
		}
		break;
    95cc:	08 95       	ret
		
		case SPRINT_S4:
		{
			sprintf(str, "Sprint Slow 4 \"MH\"");
    95ce:	23 e1       	ldi	r18, 0x13	; 19
    95d0:	e3 ec       	ldi	r30, 0xC3	; 195
    95d2:	f5 e4       	ldi	r31, 0x45	; 69
    95d4:	dc 01       	movw	r26, r24
    95d6:	01 90       	ld	r0, Z+
    95d8:	0d 92       	st	X+, r0
    95da:	2a 95       	dec	r18
    95dc:	e1 f7       	brne	.-8      	; 0x95d6 <_Z8fox2TextPc5Fox_t+0xfa>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    95de:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S4:
		{
			sprintf(str, "Sprint Slow 4 \"MH\"");
		}
		break;
    95e0:	08 95       	ret
		
		case SPRINT_S5:
		{
			sprintf(str, "Sprint Slow 5 \"M5\"");
    95e2:	23 e1       	ldi	r18, 0x13	; 19
    95e4:	e6 ed       	ldi	r30, 0xD6	; 214
    95e6:	f5 e4       	ldi	r31, 0x45	; 69
    95e8:	dc 01       	movw	r26, r24
    95ea:	01 90       	ld	r0, Z+
    95ec:	0d 92       	st	X+, r0
    95ee:	2a 95       	dec	r18
    95f0:	e1 f7       	brne	.-8      	; 0x95ea <_Z8fox2TextPc5Fox_t+0x10e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    95f2:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S5:
		{
			sprintf(str, "Sprint Slow 5 \"M5\"");
		}
		break;
    95f4:	08 95       	ret
		
		case SPRINT_F1:
		{
			sprintf(str, "Sprint Fast 1 \"OE\"");
    95f6:	23 e1       	ldi	r18, 0x13	; 19
    95f8:	e9 ee       	ldi	r30, 0xE9	; 233
    95fa:	f5 e4       	ldi	r31, 0x45	; 69
    95fc:	dc 01       	movw	r26, r24
    95fe:	01 90       	ld	r0, Z+
    9600:	0d 92       	st	X+, r0
    9602:	2a 95       	dec	r18
    9604:	e1 f7       	brne	.-8      	; 0x95fe <_Z8fox2TextPc5Fox_t+0x122>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9606:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F1:
		{
			sprintf(str, "Sprint Fast 1 \"OE\"");
		}
		break;
    9608:	08 95       	ret
		
		case SPRINT_F2:
		{
			sprintf(str, "Sprint Fast 2 \"OI\"");
    960a:	23 e1       	ldi	r18, 0x13	; 19
    960c:	ec ef       	ldi	r30, 0xFC	; 252
    960e:	f5 e4       	ldi	r31, 0x45	; 69
    9610:	dc 01       	movw	r26, r24
    9612:	01 90       	ld	r0, Z+
    9614:	0d 92       	st	X+, r0
    9616:	2a 95       	dec	r18
    9618:	e1 f7       	brne	.-8      	; 0x9612 <_Z8fox2TextPc5Fox_t+0x136>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    961a:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F2:
		{
			sprintf(str, "Sprint Fast 2 \"OI\"");
		}
		break;
    961c:	08 95       	ret
		
		case SPRINT_F3:
		{
			sprintf(str, "Sprint Fast 3 \"OS\"");
    961e:	23 e1       	ldi	r18, 0x13	; 19
    9620:	ef e0       	ldi	r30, 0x0F	; 15
    9622:	f6 e4       	ldi	r31, 0x46	; 70
    9624:	dc 01       	movw	r26, r24
    9626:	01 90       	ld	r0, Z+
    9628:	0d 92       	st	X+, r0
    962a:	2a 95       	dec	r18
    962c:	e1 f7       	brne	.-8      	; 0x9626 <_Z8fox2TextPc5Fox_t+0x14a>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    962e:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F3:
		{
			sprintf(str, "Sprint Fast 3 \"OS\"");
		}
		break;
    9630:	08 95       	ret
		
		case SPRINT_F4:
		{
			sprintf(str, "Sprint Fast 4 \"OH\"");
    9632:	23 e1       	ldi	r18, 0x13	; 19
    9634:	e2 e2       	ldi	r30, 0x22	; 34
    9636:	f6 e4       	ldi	r31, 0x46	; 70
    9638:	dc 01       	movw	r26, r24
    963a:	01 90       	ld	r0, Z+
    963c:	0d 92       	st	X+, r0
    963e:	2a 95       	dec	r18
    9640:	e1 f7       	brne	.-8      	; 0x963a <_Z8fox2TextPc5Fox_t+0x15e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9642:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F4:
		{
			sprintf(str, "Sprint Fast 4 \"OH\"");
		}
		break;
    9644:	08 95       	ret
		
		case SPRINT_F5:
		{
			sprintf(str, "Sprint Fast 5 \"O5\"");
    9646:	23 e1       	ldi	r18, 0x13	; 19
    9648:	e5 e3       	ldi	r30, 0x35	; 53
    964a:	f6 e4       	ldi	r31, 0x46	; 70
    964c:	dc 01       	movw	r26, r24
    964e:	01 90       	ld	r0, Z+
    9650:	0d 92       	st	X+, r0
    9652:	2a 95       	dec	r18
    9654:	e1 f7       	brne	.-8      	; 0x964e <_Z8fox2TextPc5Fox_t+0x172>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9656:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F5:
		{
			sprintf(str, "Sprint Fast 5 \"O5\"");
		}
		break;
    9658:	08 95       	ret
		
		default:
		{
			failure = true;
    965a:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	}
	
	return(failure);
    965c:	08 95       	ret

0000965e <__subsf3>:
    965e:	50 58       	subi	r21, 0x80	; 128

00009660 <__addsf3>:
    9660:	bb 27       	eor	r27, r27
    9662:	aa 27       	eor	r26, r26
    9664:	0e 94 47 4b 	call	0x968e	; 0x968e <__addsf3x>
    9668:	0c 94 01 4d 	jmp	0x9a02	; 0x9a02 <__fp_round>
    966c:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__fp_pscA>
    9670:	38 f0       	brcs	.+14     	; 0x9680 <__addsf3+0x20>
    9672:	0e 94 fa 4c 	call	0x99f4	; 0x99f4 <__fp_pscB>
    9676:	20 f0       	brcs	.+8      	; 0x9680 <__addsf3+0x20>
    9678:	39 f4       	brne	.+14     	; 0x9688 <__addsf3+0x28>
    967a:	9f 3f       	cpi	r25, 0xFF	; 255
    967c:	19 f4       	brne	.+6      	; 0x9684 <__addsf3+0x24>
    967e:	26 f4       	brtc	.+8      	; 0x9688 <__addsf3+0x28>
    9680:	0c 94 f0 4c 	jmp	0x99e0	; 0x99e0 <__fp_nan>
    9684:	0e f4       	brtc	.+2      	; 0x9688 <__addsf3+0x28>
    9686:	e0 95       	com	r30
    9688:	e7 fb       	bst	r30, 7
    968a:	0c 94 c1 4c 	jmp	0x9982	; 0x9982 <__fp_inf>

0000968e <__addsf3x>:
    968e:	e9 2f       	mov	r30, r25
    9690:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <__fp_split3>
    9694:	58 f3       	brcs	.-42     	; 0x966c <__addsf3+0xc>
    9696:	ba 17       	cp	r27, r26
    9698:	62 07       	cpc	r22, r18
    969a:	73 07       	cpc	r23, r19
    969c:	84 07       	cpc	r24, r20
    969e:	95 07       	cpc	r25, r21
    96a0:	20 f0       	brcs	.+8      	; 0x96aa <__addsf3x+0x1c>
    96a2:	79 f4       	brne	.+30     	; 0x96c2 <__addsf3x+0x34>
    96a4:	a6 f5       	brtc	.+104    	; 0x970e <__addsf3x+0x80>
    96a6:	0c 94 4c 4d 	jmp	0x9a98	; 0x9a98 <__fp_zero>
    96aa:	0e f4       	brtc	.+2      	; 0x96ae <__addsf3x+0x20>
    96ac:	e0 95       	com	r30
    96ae:	0b 2e       	mov	r0, r27
    96b0:	ba 2f       	mov	r27, r26
    96b2:	a0 2d       	mov	r26, r0
    96b4:	0b 01       	movw	r0, r22
    96b6:	b9 01       	movw	r22, r18
    96b8:	90 01       	movw	r18, r0
    96ba:	0c 01       	movw	r0, r24
    96bc:	ca 01       	movw	r24, r20
    96be:	a0 01       	movw	r20, r0
    96c0:	11 24       	eor	r1, r1
    96c2:	ff 27       	eor	r31, r31
    96c4:	59 1b       	sub	r21, r25
    96c6:	99 f0       	breq	.+38     	; 0x96ee <__addsf3x+0x60>
    96c8:	59 3f       	cpi	r21, 0xF9	; 249
    96ca:	50 f4       	brcc	.+20     	; 0x96e0 <__addsf3x+0x52>
    96cc:	50 3e       	cpi	r21, 0xE0	; 224
    96ce:	68 f1       	brcs	.+90     	; 0x972a <__addsf3x+0x9c>
    96d0:	1a 16       	cp	r1, r26
    96d2:	f0 40       	sbci	r31, 0x00	; 0
    96d4:	a2 2f       	mov	r26, r18
    96d6:	23 2f       	mov	r18, r19
    96d8:	34 2f       	mov	r19, r20
    96da:	44 27       	eor	r20, r20
    96dc:	58 5f       	subi	r21, 0xF8	; 248
    96de:	f3 cf       	rjmp	.-26     	; 0x96c6 <__addsf3x+0x38>
    96e0:	46 95       	lsr	r20
    96e2:	37 95       	ror	r19
    96e4:	27 95       	ror	r18
    96e6:	a7 95       	ror	r26
    96e8:	f0 40       	sbci	r31, 0x00	; 0
    96ea:	53 95       	inc	r21
    96ec:	c9 f7       	brne	.-14     	; 0x96e0 <__addsf3x+0x52>
    96ee:	7e f4       	brtc	.+30     	; 0x970e <__addsf3x+0x80>
    96f0:	1f 16       	cp	r1, r31
    96f2:	ba 0b       	sbc	r27, r26
    96f4:	62 0b       	sbc	r22, r18
    96f6:	73 0b       	sbc	r23, r19
    96f8:	84 0b       	sbc	r24, r20
    96fa:	ba f0       	brmi	.+46     	; 0x972a <__addsf3x+0x9c>
    96fc:	91 50       	subi	r25, 0x01	; 1
    96fe:	a1 f0       	breq	.+40     	; 0x9728 <__addsf3x+0x9a>
    9700:	ff 0f       	add	r31, r31
    9702:	bb 1f       	adc	r27, r27
    9704:	66 1f       	adc	r22, r22
    9706:	77 1f       	adc	r23, r23
    9708:	88 1f       	adc	r24, r24
    970a:	c2 f7       	brpl	.-16     	; 0x96fc <__addsf3x+0x6e>
    970c:	0e c0       	rjmp	.+28     	; 0x972a <__addsf3x+0x9c>
    970e:	ba 0f       	add	r27, r26
    9710:	62 1f       	adc	r22, r18
    9712:	73 1f       	adc	r23, r19
    9714:	84 1f       	adc	r24, r20
    9716:	48 f4       	brcc	.+18     	; 0x972a <__addsf3x+0x9c>
    9718:	87 95       	ror	r24
    971a:	77 95       	ror	r23
    971c:	67 95       	ror	r22
    971e:	b7 95       	ror	r27
    9720:	f7 95       	ror	r31
    9722:	9e 3f       	cpi	r25, 0xFE	; 254
    9724:	08 f0       	brcs	.+2      	; 0x9728 <__addsf3x+0x9a>
    9726:	b0 cf       	rjmp	.-160    	; 0x9688 <__addsf3+0x28>
    9728:	93 95       	inc	r25
    972a:	88 0f       	add	r24, r24
    972c:	08 f0       	brcs	.+2      	; 0x9730 <__addsf3x+0xa2>
    972e:	99 27       	eor	r25, r25
    9730:	ee 0f       	add	r30, r30
    9732:	97 95       	ror	r25
    9734:	87 95       	ror	r24
    9736:	08 95       	ret

00009738 <ceil>:
    9738:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <__fp_trunc>
    973c:	90 f0       	brcs	.+36     	; 0x9762 <ceil+0x2a>
    973e:	9f 37       	cpi	r25, 0x7F	; 127
    9740:	48 f4       	brcc	.+18     	; 0x9754 <ceil+0x1c>
    9742:	91 11       	cpse	r25, r1
    9744:	16 f4       	brtc	.+4      	; 0x974a <ceil+0x12>
    9746:	0c 94 4d 4d 	jmp	0x9a9a	; 0x9a9a <__fp_szero>
    974a:	60 e0       	ldi	r22, 0x00	; 0
    974c:	70 e0       	ldi	r23, 0x00	; 0
    974e:	80 e8       	ldi	r24, 0x80	; 128
    9750:	9f e3       	ldi	r25, 0x3F	; 63
    9752:	08 95       	ret
    9754:	26 f0       	brts	.+8      	; 0x975e <ceil+0x26>
    9756:	1b 16       	cp	r1, r27
    9758:	61 1d       	adc	r22, r1
    975a:	71 1d       	adc	r23, r1
    975c:	81 1d       	adc	r24, r1
    975e:	0c 94 c7 4c 	jmp	0x998e	; 0x998e <__fp_mintl>
    9762:	0c 94 e2 4c 	jmp	0x99c4	; 0x99c4 <__fp_mpack>

00009766 <__cmpsf2>:
    9766:	0e 94 9d 4c 	call	0x993a	; 0x993a <__fp_cmp>
    976a:	08 f4       	brcc	.+2      	; 0x976e <__cmpsf2+0x8>
    976c:	81 e0       	ldi	r24, 0x01	; 1
    976e:	08 95       	ret

00009770 <__divsf3>:
    9770:	0e 94 cc 4b 	call	0x9798	; 0x9798 <__divsf3x>
    9774:	0c 94 01 4d 	jmp	0x9a02	; 0x9a02 <__fp_round>
    9778:	0e 94 fa 4c 	call	0x99f4	; 0x99f4 <__fp_pscB>
    977c:	58 f0       	brcs	.+22     	; 0x9794 <__divsf3+0x24>
    977e:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__fp_pscA>
    9782:	40 f0       	brcs	.+16     	; 0x9794 <__divsf3+0x24>
    9784:	29 f4       	brne	.+10     	; 0x9790 <__divsf3+0x20>
    9786:	5f 3f       	cpi	r21, 0xFF	; 255
    9788:	29 f0       	breq	.+10     	; 0x9794 <__divsf3+0x24>
    978a:	0c 94 c1 4c 	jmp	0x9982	; 0x9982 <__fp_inf>
    978e:	51 11       	cpse	r21, r1
    9790:	0c 94 4d 4d 	jmp	0x9a9a	; 0x9a9a <__fp_szero>
    9794:	0c 94 f0 4c 	jmp	0x99e0	; 0x99e0 <__fp_nan>

00009798 <__divsf3x>:
    9798:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <__fp_split3>
    979c:	68 f3       	brcs	.-38     	; 0x9778 <__divsf3+0x8>

0000979e <__divsf3_pse>:
    979e:	99 23       	and	r25, r25
    97a0:	b1 f3       	breq	.-20     	; 0x978e <__divsf3+0x1e>
    97a2:	55 23       	and	r21, r21
    97a4:	91 f3       	breq	.-28     	; 0x978a <__divsf3+0x1a>
    97a6:	95 1b       	sub	r25, r21
    97a8:	55 0b       	sbc	r21, r21
    97aa:	bb 27       	eor	r27, r27
    97ac:	aa 27       	eor	r26, r26
    97ae:	62 17       	cp	r22, r18
    97b0:	73 07       	cpc	r23, r19
    97b2:	84 07       	cpc	r24, r20
    97b4:	38 f0       	brcs	.+14     	; 0x97c4 <__divsf3_pse+0x26>
    97b6:	9f 5f       	subi	r25, 0xFF	; 255
    97b8:	5f 4f       	sbci	r21, 0xFF	; 255
    97ba:	22 0f       	add	r18, r18
    97bc:	33 1f       	adc	r19, r19
    97be:	44 1f       	adc	r20, r20
    97c0:	aa 1f       	adc	r26, r26
    97c2:	a9 f3       	breq	.-22     	; 0x97ae <__divsf3_pse+0x10>
    97c4:	35 d0       	rcall	.+106    	; 0x9830 <__divsf3_pse+0x92>
    97c6:	0e 2e       	mov	r0, r30
    97c8:	3a f0       	brmi	.+14     	; 0x97d8 <__divsf3_pse+0x3a>
    97ca:	e0 e8       	ldi	r30, 0x80	; 128
    97cc:	32 d0       	rcall	.+100    	; 0x9832 <__divsf3_pse+0x94>
    97ce:	91 50       	subi	r25, 0x01	; 1
    97d0:	50 40       	sbci	r21, 0x00	; 0
    97d2:	e6 95       	lsr	r30
    97d4:	00 1c       	adc	r0, r0
    97d6:	ca f7       	brpl	.-14     	; 0x97ca <__divsf3_pse+0x2c>
    97d8:	2b d0       	rcall	.+86     	; 0x9830 <__divsf3_pse+0x92>
    97da:	fe 2f       	mov	r31, r30
    97dc:	29 d0       	rcall	.+82     	; 0x9830 <__divsf3_pse+0x92>
    97de:	66 0f       	add	r22, r22
    97e0:	77 1f       	adc	r23, r23
    97e2:	88 1f       	adc	r24, r24
    97e4:	bb 1f       	adc	r27, r27
    97e6:	26 17       	cp	r18, r22
    97e8:	37 07       	cpc	r19, r23
    97ea:	48 07       	cpc	r20, r24
    97ec:	ab 07       	cpc	r26, r27
    97ee:	b0 e8       	ldi	r27, 0x80	; 128
    97f0:	09 f0       	breq	.+2      	; 0x97f4 <__divsf3_pse+0x56>
    97f2:	bb 0b       	sbc	r27, r27
    97f4:	80 2d       	mov	r24, r0
    97f6:	bf 01       	movw	r22, r30
    97f8:	ff 27       	eor	r31, r31
    97fa:	93 58       	subi	r25, 0x83	; 131
    97fc:	5f 4f       	sbci	r21, 0xFF	; 255
    97fe:	3a f0       	brmi	.+14     	; 0x980e <__divsf3_pse+0x70>
    9800:	9e 3f       	cpi	r25, 0xFE	; 254
    9802:	51 05       	cpc	r21, r1
    9804:	78 f0       	brcs	.+30     	; 0x9824 <__divsf3_pse+0x86>
    9806:	0c 94 c1 4c 	jmp	0x9982	; 0x9982 <__fp_inf>
    980a:	0c 94 4d 4d 	jmp	0x9a9a	; 0x9a9a <__fp_szero>
    980e:	5f 3f       	cpi	r21, 0xFF	; 255
    9810:	e4 f3       	brlt	.-8      	; 0x980a <__divsf3_pse+0x6c>
    9812:	98 3e       	cpi	r25, 0xE8	; 232
    9814:	d4 f3       	brlt	.-12     	; 0x980a <__divsf3_pse+0x6c>
    9816:	86 95       	lsr	r24
    9818:	77 95       	ror	r23
    981a:	67 95       	ror	r22
    981c:	b7 95       	ror	r27
    981e:	f7 95       	ror	r31
    9820:	9f 5f       	subi	r25, 0xFF	; 255
    9822:	c9 f7       	brne	.-14     	; 0x9816 <__divsf3_pse+0x78>
    9824:	88 0f       	add	r24, r24
    9826:	91 1d       	adc	r25, r1
    9828:	96 95       	lsr	r25
    982a:	87 95       	ror	r24
    982c:	97 f9       	bld	r25, 7
    982e:	08 95       	ret
    9830:	e1 e0       	ldi	r30, 0x01	; 1
    9832:	66 0f       	add	r22, r22
    9834:	77 1f       	adc	r23, r23
    9836:	88 1f       	adc	r24, r24
    9838:	bb 1f       	adc	r27, r27
    983a:	62 17       	cp	r22, r18
    983c:	73 07       	cpc	r23, r19
    983e:	84 07       	cpc	r24, r20
    9840:	ba 07       	cpc	r27, r26
    9842:	20 f0       	brcs	.+8      	; 0x984c <__divsf3_pse+0xae>
    9844:	62 1b       	sub	r22, r18
    9846:	73 0b       	sbc	r23, r19
    9848:	84 0b       	sbc	r24, r20
    984a:	ba 0b       	sbc	r27, r26
    984c:	ee 1f       	adc	r30, r30
    984e:	88 f7       	brcc	.-30     	; 0x9832 <__divsf3_pse+0x94>
    9850:	e0 95       	com	r30
    9852:	08 95       	ret

00009854 <__fixsfsi>:
    9854:	0e 94 31 4c 	call	0x9862	; 0x9862 <__fixunssfsi>
    9858:	68 94       	set
    985a:	b1 11       	cpse	r27, r1
    985c:	0c 94 4d 4d 	jmp	0x9a9a	; 0x9a9a <__fp_szero>
    9860:	08 95       	ret

00009862 <__fixunssfsi>:
    9862:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <__fp_splitA>
    9866:	88 f0       	brcs	.+34     	; 0x988a <__fixunssfsi+0x28>
    9868:	9f 57       	subi	r25, 0x7F	; 127
    986a:	98 f0       	brcs	.+38     	; 0x9892 <__fixunssfsi+0x30>
    986c:	b9 2f       	mov	r27, r25
    986e:	99 27       	eor	r25, r25
    9870:	b7 51       	subi	r27, 0x17	; 23
    9872:	b0 f0       	brcs	.+44     	; 0x98a0 <__fixunssfsi+0x3e>
    9874:	e1 f0       	breq	.+56     	; 0x98ae <__fixunssfsi+0x4c>
    9876:	66 0f       	add	r22, r22
    9878:	77 1f       	adc	r23, r23
    987a:	88 1f       	adc	r24, r24
    987c:	99 1f       	adc	r25, r25
    987e:	1a f0       	brmi	.+6      	; 0x9886 <__fixunssfsi+0x24>
    9880:	ba 95       	dec	r27
    9882:	c9 f7       	brne	.-14     	; 0x9876 <__fixunssfsi+0x14>
    9884:	14 c0       	rjmp	.+40     	; 0x98ae <__fixunssfsi+0x4c>
    9886:	b1 30       	cpi	r27, 0x01	; 1
    9888:	91 f0       	breq	.+36     	; 0x98ae <__fixunssfsi+0x4c>
    988a:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <__fp_zero>
    988e:	b1 e0       	ldi	r27, 0x01	; 1
    9890:	08 95       	ret
    9892:	0c 94 4c 4d 	jmp	0x9a98	; 0x9a98 <__fp_zero>
    9896:	67 2f       	mov	r22, r23
    9898:	78 2f       	mov	r23, r24
    989a:	88 27       	eor	r24, r24
    989c:	b8 5f       	subi	r27, 0xF8	; 248
    989e:	39 f0       	breq	.+14     	; 0x98ae <__fixunssfsi+0x4c>
    98a0:	b9 3f       	cpi	r27, 0xF9	; 249
    98a2:	cc f3       	brlt	.-14     	; 0x9896 <__fixunssfsi+0x34>
    98a4:	86 95       	lsr	r24
    98a6:	77 95       	ror	r23
    98a8:	67 95       	ror	r22
    98aa:	b3 95       	inc	r27
    98ac:	d9 f7       	brne	.-10     	; 0x98a4 <__fixunssfsi+0x42>
    98ae:	3e f4       	brtc	.+14     	; 0x98be <__fixunssfsi+0x5c>
    98b0:	90 95       	com	r25
    98b2:	80 95       	com	r24
    98b4:	70 95       	com	r23
    98b6:	61 95       	neg	r22
    98b8:	7f 4f       	sbci	r23, 0xFF	; 255
    98ba:	8f 4f       	sbci	r24, 0xFF	; 255
    98bc:	9f 4f       	sbci	r25, 0xFF	; 255
    98be:	08 95       	ret

000098c0 <__floatunsisf>:
    98c0:	e8 94       	clt
    98c2:	09 c0       	rjmp	.+18     	; 0x98d6 <__floatsisf+0x12>

000098c4 <__floatsisf>:
    98c4:	97 fb       	bst	r25, 7
    98c6:	3e f4       	brtc	.+14     	; 0x98d6 <__floatsisf+0x12>
    98c8:	90 95       	com	r25
    98ca:	80 95       	com	r24
    98cc:	70 95       	com	r23
    98ce:	61 95       	neg	r22
    98d0:	7f 4f       	sbci	r23, 0xFF	; 255
    98d2:	8f 4f       	sbci	r24, 0xFF	; 255
    98d4:	9f 4f       	sbci	r25, 0xFF	; 255
    98d6:	99 23       	and	r25, r25
    98d8:	a9 f0       	breq	.+42     	; 0x9904 <__floatsisf+0x40>
    98da:	f9 2f       	mov	r31, r25
    98dc:	96 e9       	ldi	r25, 0x96	; 150
    98de:	bb 27       	eor	r27, r27
    98e0:	93 95       	inc	r25
    98e2:	f6 95       	lsr	r31
    98e4:	87 95       	ror	r24
    98e6:	77 95       	ror	r23
    98e8:	67 95       	ror	r22
    98ea:	b7 95       	ror	r27
    98ec:	f1 11       	cpse	r31, r1
    98ee:	f8 cf       	rjmp	.-16     	; 0x98e0 <__floatsisf+0x1c>
    98f0:	fa f4       	brpl	.+62     	; 0x9930 <__floatsisf+0x6c>
    98f2:	bb 0f       	add	r27, r27
    98f4:	11 f4       	brne	.+4      	; 0x98fa <__floatsisf+0x36>
    98f6:	60 ff       	sbrs	r22, 0
    98f8:	1b c0       	rjmp	.+54     	; 0x9930 <__floatsisf+0x6c>
    98fa:	6f 5f       	subi	r22, 0xFF	; 255
    98fc:	7f 4f       	sbci	r23, 0xFF	; 255
    98fe:	8f 4f       	sbci	r24, 0xFF	; 255
    9900:	9f 4f       	sbci	r25, 0xFF	; 255
    9902:	16 c0       	rjmp	.+44     	; 0x9930 <__floatsisf+0x6c>
    9904:	88 23       	and	r24, r24
    9906:	11 f0       	breq	.+4      	; 0x990c <__floatsisf+0x48>
    9908:	96 e9       	ldi	r25, 0x96	; 150
    990a:	11 c0       	rjmp	.+34     	; 0x992e <__floatsisf+0x6a>
    990c:	77 23       	and	r23, r23
    990e:	21 f0       	breq	.+8      	; 0x9918 <__floatsisf+0x54>
    9910:	9e e8       	ldi	r25, 0x8E	; 142
    9912:	87 2f       	mov	r24, r23
    9914:	76 2f       	mov	r23, r22
    9916:	05 c0       	rjmp	.+10     	; 0x9922 <__floatsisf+0x5e>
    9918:	66 23       	and	r22, r22
    991a:	71 f0       	breq	.+28     	; 0x9938 <__floatsisf+0x74>
    991c:	96 e8       	ldi	r25, 0x86	; 134
    991e:	86 2f       	mov	r24, r22
    9920:	70 e0       	ldi	r23, 0x00	; 0
    9922:	60 e0       	ldi	r22, 0x00	; 0
    9924:	2a f0       	brmi	.+10     	; 0x9930 <__floatsisf+0x6c>
    9926:	9a 95       	dec	r25
    9928:	66 0f       	add	r22, r22
    992a:	77 1f       	adc	r23, r23
    992c:	88 1f       	adc	r24, r24
    992e:	da f7       	brpl	.-10     	; 0x9926 <__floatsisf+0x62>
    9930:	88 0f       	add	r24, r24
    9932:	96 95       	lsr	r25
    9934:	87 95       	ror	r24
    9936:	97 f9       	bld	r25, 7
    9938:	08 95       	ret

0000993a <__fp_cmp>:
    993a:	99 0f       	add	r25, r25
    993c:	00 08       	sbc	r0, r0
    993e:	55 0f       	add	r21, r21
    9940:	aa 0b       	sbc	r26, r26
    9942:	e0 e8       	ldi	r30, 0x80	; 128
    9944:	fe ef       	ldi	r31, 0xFE	; 254
    9946:	16 16       	cp	r1, r22
    9948:	17 06       	cpc	r1, r23
    994a:	e8 07       	cpc	r30, r24
    994c:	f9 07       	cpc	r31, r25
    994e:	c0 f0       	brcs	.+48     	; 0x9980 <__fp_cmp+0x46>
    9950:	12 16       	cp	r1, r18
    9952:	13 06       	cpc	r1, r19
    9954:	e4 07       	cpc	r30, r20
    9956:	f5 07       	cpc	r31, r21
    9958:	98 f0       	brcs	.+38     	; 0x9980 <__fp_cmp+0x46>
    995a:	62 1b       	sub	r22, r18
    995c:	73 0b       	sbc	r23, r19
    995e:	84 0b       	sbc	r24, r20
    9960:	95 0b       	sbc	r25, r21
    9962:	39 f4       	brne	.+14     	; 0x9972 <__fp_cmp+0x38>
    9964:	0a 26       	eor	r0, r26
    9966:	61 f0       	breq	.+24     	; 0x9980 <__fp_cmp+0x46>
    9968:	23 2b       	or	r18, r19
    996a:	24 2b       	or	r18, r20
    996c:	25 2b       	or	r18, r21
    996e:	21 f4       	brne	.+8      	; 0x9978 <__fp_cmp+0x3e>
    9970:	08 95       	ret
    9972:	0a 26       	eor	r0, r26
    9974:	09 f4       	brne	.+2      	; 0x9978 <__fp_cmp+0x3e>
    9976:	a1 40       	sbci	r26, 0x01	; 1
    9978:	a6 95       	lsr	r26
    997a:	8f ef       	ldi	r24, 0xFF	; 255
    997c:	81 1d       	adc	r24, r1
    997e:	81 1d       	adc	r24, r1
    9980:	08 95       	ret

00009982 <__fp_inf>:
    9982:	97 f9       	bld	r25, 7
    9984:	9f 67       	ori	r25, 0x7F	; 127
    9986:	80 e8       	ldi	r24, 0x80	; 128
    9988:	70 e0       	ldi	r23, 0x00	; 0
    998a:	60 e0       	ldi	r22, 0x00	; 0
    998c:	08 95       	ret

0000998e <__fp_mintl>:
    998e:	88 23       	and	r24, r24
    9990:	71 f4       	brne	.+28     	; 0x99ae <__fp_mintl+0x20>
    9992:	77 23       	and	r23, r23
    9994:	21 f0       	breq	.+8      	; 0x999e <__fp_mintl+0x10>
    9996:	98 50       	subi	r25, 0x08	; 8
    9998:	87 2b       	or	r24, r23
    999a:	76 2f       	mov	r23, r22
    999c:	07 c0       	rjmp	.+14     	; 0x99ac <__fp_mintl+0x1e>
    999e:	66 23       	and	r22, r22
    99a0:	11 f4       	brne	.+4      	; 0x99a6 <__fp_mintl+0x18>
    99a2:	99 27       	eor	r25, r25
    99a4:	0d c0       	rjmp	.+26     	; 0x99c0 <__fp_mintl+0x32>
    99a6:	90 51       	subi	r25, 0x10	; 16
    99a8:	86 2b       	or	r24, r22
    99aa:	70 e0       	ldi	r23, 0x00	; 0
    99ac:	60 e0       	ldi	r22, 0x00	; 0
    99ae:	2a f0       	brmi	.+10     	; 0x99ba <__fp_mintl+0x2c>
    99b0:	9a 95       	dec	r25
    99b2:	66 0f       	add	r22, r22
    99b4:	77 1f       	adc	r23, r23
    99b6:	88 1f       	adc	r24, r24
    99b8:	da f7       	brpl	.-10     	; 0x99b0 <__fp_mintl+0x22>
    99ba:	88 0f       	add	r24, r24
    99bc:	96 95       	lsr	r25
    99be:	87 95       	ror	r24
    99c0:	97 f9       	bld	r25, 7
    99c2:	08 95       	ret

000099c4 <__fp_mpack>:
    99c4:	9f 3f       	cpi	r25, 0xFF	; 255
    99c6:	31 f0       	breq	.+12     	; 0x99d4 <__fp_mpack_finite+0xc>

000099c8 <__fp_mpack_finite>:
    99c8:	91 50       	subi	r25, 0x01	; 1
    99ca:	20 f4       	brcc	.+8      	; 0x99d4 <__fp_mpack_finite+0xc>
    99cc:	87 95       	ror	r24
    99ce:	77 95       	ror	r23
    99d0:	67 95       	ror	r22
    99d2:	b7 95       	ror	r27
    99d4:	88 0f       	add	r24, r24
    99d6:	91 1d       	adc	r25, r1
    99d8:	96 95       	lsr	r25
    99da:	87 95       	ror	r24
    99dc:	97 f9       	bld	r25, 7
    99de:	08 95       	ret

000099e0 <__fp_nan>:
    99e0:	9f ef       	ldi	r25, 0xFF	; 255
    99e2:	80 ec       	ldi	r24, 0xC0	; 192
    99e4:	08 95       	ret

000099e6 <__fp_pscA>:
    99e6:	00 24       	eor	r0, r0
    99e8:	0a 94       	dec	r0
    99ea:	16 16       	cp	r1, r22
    99ec:	17 06       	cpc	r1, r23
    99ee:	18 06       	cpc	r1, r24
    99f0:	09 06       	cpc	r0, r25
    99f2:	08 95       	ret

000099f4 <__fp_pscB>:
    99f4:	00 24       	eor	r0, r0
    99f6:	0a 94       	dec	r0
    99f8:	12 16       	cp	r1, r18
    99fa:	13 06       	cpc	r1, r19
    99fc:	14 06       	cpc	r1, r20
    99fe:	05 06       	cpc	r0, r21
    9a00:	08 95       	ret

00009a02 <__fp_round>:
    9a02:	09 2e       	mov	r0, r25
    9a04:	03 94       	inc	r0
    9a06:	00 0c       	add	r0, r0
    9a08:	11 f4       	brne	.+4      	; 0x9a0e <__fp_round+0xc>
    9a0a:	88 23       	and	r24, r24
    9a0c:	52 f0       	brmi	.+20     	; 0x9a22 <__fp_round+0x20>
    9a0e:	bb 0f       	add	r27, r27
    9a10:	40 f4       	brcc	.+16     	; 0x9a22 <__fp_round+0x20>
    9a12:	bf 2b       	or	r27, r31
    9a14:	11 f4       	brne	.+4      	; 0x9a1a <__fp_round+0x18>
    9a16:	60 ff       	sbrs	r22, 0
    9a18:	04 c0       	rjmp	.+8      	; 0x9a22 <__fp_round+0x20>
    9a1a:	6f 5f       	subi	r22, 0xFF	; 255
    9a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    9a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    9a20:	9f 4f       	sbci	r25, 0xFF	; 255
    9a22:	08 95       	ret

00009a24 <__fp_split3>:
    9a24:	57 fd       	sbrc	r21, 7
    9a26:	90 58       	subi	r25, 0x80	; 128
    9a28:	44 0f       	add	r20, r20
    9a2a:	55 1f       	adc	r21, r21
    9a2c:	59 f0       	breq	.+22     	; 0x9a44 <__fp_splitA+0x10>
    9a2e:	5f 3f       	cpi	r21, 0xFF	; 255
    9a30:	71 f0       	breq	.+28     	; 0x9a4e <__fp_splitA+0x1a>
    9a32:	47 95       	ror	r20

00009a34 <__fp_splitA>:
    9a34:	88 0f       	add	r24, r24
    9a36:	97 fb       	bst	r25, 7
    9a38:	99 1f       	adc	r25, r25
    9a3a:	61 f0       	breq	.+24     	; 0x9a54 <__fp_splitA+0x20>
    9a3c:	9f 3f       	cpi	r25, 0xFF	; 255
    9a3e:	79 f0       	breq	.+30     	; 0x9a5e <__fp_splitA+0x2a>
    9a40:	87 95       	ror	r24
    9a42:	08 95       	ret
    9a44:	12 16       	cp	r1, r18
    9a46:	13 06       	cpc	r1, r19
    9a48:	14 06       	cpc	r1, r20
    9a4a:	55 1f       	adc	r21, r21
    9a4c:	f2 cf       	rjmp	.-28     	; 0x9a32 <__fp_split3+0xe>
    9a4e:	46 95       	lsr	r20
    9a50:	f1 df       	rcall	.-30     	; 0x9a34 <__fp_splitA>
    9a52:	08 c0       	rjmp	.+16     	; 0x9a64 <__fp_splitA+0x30>
    9a54:	16 16       	cp	r1, r22
    9a56:	17 06       	cpc	r1, r23
    9a58:	18 06       	cpc	r1, r24
    9a5a:	99 1f       	adc	r25, r25
    9a5c:	f1 cf       	rjmp	.-30     	; 0x9a40 <__fp_splitA+0xc>
    9a5e:	86 95       	lsr	r24
    9a60:	71 05       	cpc	r23, r1
    9a62:	61 05       	cpc	r22, r1
    9a64:	08 94       	sec
    9a66:	08 95       	ret

00009a68 <__fp_trunc>:
    9a68:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <__fp_splitA>
    9a6c:	a0 f0       	brcs	.+40     	; 0x9a96 <__fp_trunc+0x2e>
    9a6e:	be e7       	ldi	r27, 0x7E	; 126
    9a70:	b9 17       	cp	r27, r25
    9a72:	88 f4       	brcc	.+34     	; 0x9a96 <__fp_trunc+0x2e>
    9a74:	bb 27       	eor	r27, r27
    9a76:	9f 38       	cpi	r25, 0x8F	; 143
    9a78:	60 f4       	brcc	.+24     	; 0x9a92 <__fp_trunc+0x2a>
    9a7a:	16 16       	cp	r1, r22
    9a7c:	b1 1d       	adc	r27, r1
    9a7e:	67 2f       	mov	r22, r23
    9a80:	78 2f       	mov	r23, r24
    9a82:	88 27       	eor	r24, r24
    9a84:	98 5f       	subi	r25, 0xF8	; 248
    9a86:	f7 cf       	rjmp	.-18     	; 0x9a76 <__fp_trunc+0xe>
    9a88:	86 95       	lsr	r24
    9a8a:	77 95       	ror	r23
    9a8c:	67 95       	ror	r22
    9a8e:	b1 1d       	adc	r27, r1
    9a90:	93 95       	inc	r25
    9a92:	96 39       	cpi	r25, 0x96	; 150
    9a94:	c8 f3       	brcs	.-14     	; 0x9a88 <__fp_trunc+0x20>
    9a96:	08 95       	ret

00009a98 <__fp_zero>:
    9a98:	e8 94       	clt

00009a9a <__fp_szero>:
    9a9a:	bb 27       	eor	r27, r27
    9a9c:	66 27       	eor	r22, r22
    9a9e:	77 27       	eor	r23, r23
    9aa0:	cb 01       	movw	r24, r22
    9aa2:	97 f9       	bld	r25, 7
    9aa4:	08 95       	ret

00009aa6 <__gesf2>:
    9aa6:	0e 94 9d 4c 	call	0x993a	; 0x993a <__fp_cmp>
    9aaa:	08 f4       	brcc	.+2      	; 0x9aae <__gesf2+0x8>
    9aac:	8f ef       	ldi	r24, 0xFF	; 255
    9aae:	08 95       	ret

00009ab0 <__mulsf3>:
    9ab0:	0e 94 6b 4d 	call	0x9ad6	; 0x9ad6 <__mulsf3x>
    9ab4:	0c 94 01 4d 	jmp	0x9a02	; 0x9a02 <__fp_round>
    9ab8:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__fp_pscA>
    9abc:	38 f0       	brcs	.+14     	; 0x9acc <__mulsf3+0x1c>
    9abe:	0e 94 fa 4c 	call	0x99f4	; 0x99f4 <__fp_pscB>
    9ac2:	20 f0       	brcs	.+8      	; 0x9acc <__mulsf3+0x1c>
    9ac4:	95 23       	and	r25, r21
    9ac6:	11 f0       	breq	.+4      	; 0x9acc <__mulsf3+0x1c>
    9ac8:	0c 94 c1 4c 	jmp	0x9982	; 0x9982 <__fp_inf>
    9acc:	0c 94 f0 4c 	jmp	0x99e0	; 0x99e0 <__fp_nan>
    9ad0:	11 24       	eor	r1, r1
    9ad2:	0c 94 4d 4d 	jmp	0x9a9a	; 0x9a9a <__fp_szero>

00009ad6 <__mulsf3x>:
    9ad6:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <__fp_split3>
    9ada:	70 f3       	brcs	.-36     	; 0x9ab8 <__mulsf3+0x8>

00009adc <__mulsf3_pse>:
    9adc:	95 9f       	mul	r25, r21
    9ade:	c1 f3       	breq	.-16     	; 0x9ad0 <__mulsf3+0x20>
    9ae0:	95 0f       	add	r25, r21
    9ae2:	50 e0       	ldi	r21, 0x00	; 0
    9ae4:	55 1f       	adc	r21, r21
    9ae6:	62 9f       	mul	r22, r18
    9ae8:	f0 01       	movw	r30, r0
    9aea:	72 9f       	mul	r23, r18
    9aec:	bb 27       	eor	r27, r27
    9aee:	f0 0d       	add	r31, r0
    9af0:	b1 1d       	adc	r27, r1
    9af2:	63 9f       	mul	r22, r19
    9af4:	aa 27       	eor	r26, r26
    9af6:	f0 0d       	add	r31, r0
    9af8:	b1 1d       	adc	r27, r1
    9afa:	aa 1f       	adc	r26, r26
    9afc:	64 9f       	mul	r22, r20
    9afe:	66 27       	eor	r22, r22
    9b00:	b0 0d       	add	r27, r0
    9b02:	a1 1d       	adc	r26, r1
    9b04:	66 1f       	adc	r22, r22
    9b06:	82 9f       	mul	r24, r18
    9b08:	22 27       	eor	r18, r18
    9b0a:	b0 0d       	add	r27, r0
    9b0c:	a1 1d       	adc	r26, r1
    9b0e:	62 1f       	adc	r22, r18
    9b10:	73 9f       	mul	r23, r19
    9b12:	b0 0d       	add	r27, r0
    9b14:	a1 1d       	adc	r26, r1
    9b16:	62 1f       	adc	r22, r18
    9b18:	83 9f       	mul	r24, r19
    9b1a:	a0 0d       	add	r26, r0
    9b1c:	61 1d       	adc	r22, r1
    9b1e:	22 1f       	adc	r18, r18
    9b20:	74 9f       	mul	r23, r20
    9b22:	33 27       	eor	r19, r19
    9b24:	a0 0d       	add	r26, r0
    9b26:	61 1d       	adc	r22, r1
    9b28:	23 1f       	adc	r18, r19
    9b2a:	84 9f       	mul	r24, r20
    9b2c:	60 0d       	add	r22, r0
    9b2e:	21 1d       	adc	r18, r1
    9b30:	82 2f       	mov	r24, r18
    9b32:	76 2f       	mov	r23, r22
    9b34:	6a 2f       	mov	r22, r26
    9b36:	11 24       	eor	r1, r1
    9b38:	9f 57       	subi	r25, 0x7F	; 127
    9b3a:	50 40       	sbci	r21, 0x00	; 0
    9b3c:	9a f0       	brmi	.+38     	; 0x9b64 <__mulsf3_pse+0x88>
    9b3e:	f1 f0       	breq	.+60     	; 0x9b7c <__mulsf3_pse+0xa0>
    9b40:	88 23       	and	r24, r24
    9b42:	4a f0       	brmi	.+18     	; 0x9b56 <__mulsf3_pse+0x7a>
    9b44:	ee 0f       	add	r30, r30
    9b46:	ff 1f       	adc	r31, r31
    9b48:	bb 1f       	adc	r27, r27
    9b4a:	66 1f       	adc	r22, r22
    9b4c:	77 1f       	adc	r23, r23
    9b4e:	88 1f       	adc	r24, r24
    9b50:	91 50       	subi	r25, 0x01	; 1
    9b52:	50 40       	sbci	r21, 0x00	; 0
    9b54:	a9 f7       	brne	.-22     	; 0x9b40 <__mulsf3_pse+0x64>
    9b56:	9e 3f       	cpi	r25, 0xFE	; 254
    9b58:	51 05       	cpc	r21, r1
    9b5a:	80 f0       	brcs	.+32     	; 0x9b7c <__mulsf3_pse+0xa0>
    9b5c:	0c 94 c1 4c 	jmp	0x9982	; 0x9982 <__fp_inf>
    9b60:	0c 94 4d 4d 	jmp	0x9a9a	; 0x9a9a <__fp_szero>
    9b64:	5f 3f       	cpi	r21, 0xFF	; 255
    9b66:	e4 f3       	brlt	.-8      	; 0x9b60 <__mulsf3_pse+0x84>
    9b68:	98 3e       	cpi	r25, 0xE8	; 232
    9b6a:	d4 f3       	brlt	.-12     	; 0x9b60 <__mulsf3_pse+0x84>
    9b6c:	86 95       	lsr	r24
    9b6e:	77 95       	ror	r23
    9b70:	67 95       	ror	r22
    9b72:	b7 95       	ror	r27
    9b74:	f7 95       	ror	r31
    9b76:	e7 95       	ror	r30
    9b78:	9f 5f       	subi	r25, 0xFF	; 255
    9b7a:	c1 f7       	brne	.-16     	; 0x9b6c <__mulsf3_pse+0x90>
    9b7c:	fe 2b       	or	r31, r30
    9b7e:	88 0f       	add	r24, r24
    9b80:	91 1d       	adc	r25, r1
    9b82:	96 95       	lsr	r25
    9b84:	87 95       	ror	r24
    9b86:	97 f9       	bld	r25, 7
    9b88:	08 95       	ret

00009b8a <__mulsi3>:
    9b8a:	db 01       	movw	r26, r22
    9b8c:	8f 93       	push	r24
    9b8e:	9f 93       	push	r25
    9b90:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <__muluhisi3>
    9b94:	bf 91       	pop	r27
    9b96:	af 91       	pop	r26
    9b98:	a2 9f       	mul	r26, r18
    9b9a:	80 0d       	add	r24, r0
    9b9c:	91 1d       	adc	r25, r1
    9b9e:	a3 9f       	mul	r26, r19
    9ba0:	90 0d       	add	r25, r0
    9ba2:	b2 9f       	mul	r27, r18
    9ba4:	90 0d       	add	r25, r0
    9ba6:	11 24       	eor	r1, r1
    9ba8:	08 95       	ret

00009baa <__udivmodhi4>:
    9baa:	aa 1b       	sub	r26, r26
    9bac:	bb 1b       	sub	r27, r27
    9bae:	51 e1       	ldi	r21, 0x11	; 17
    9bb0:	07 c0       	rjmp	.+14     	; 0x9bc0 <__udivmodhi4_ep>

00009bb2 <__udivmodhi4_loop>:
    9bb2:	aa 1f       	adc	r26, r26
    9bb4:	bb 1f       	adc	r27, r27
    9bb6:	a6 17       	cp	r26, r22
    9bb8:	b7 07       	cpc	r27, r23
    9bba:	10 f0       	brcs	.+4      	; 0x9bc0 <__udivmodhi4_ep>
    9bbc:	a6 1b       	sub	r26, r22
    9bbe:	b7 0b       	sbc	r27, r23

00009bc0 <__udivmodhi4_ep>:
    9bc0:	88 1f       	adc	r24, r24
    9bc2:	99 1f       	adc	r25, r25
    9bc4:	5a 95       	dec	r21
    9bc6:	a9 f7       	brne	.-22     	; 0x9bb2 <__udivmodhi4_loop>
    9bc8:	80 95       	com	r24
    9bca:	90 95       	com	r25
    9bcc:	bc 01       	movw	r22, r24
    9bce:	cd 01       	movw	r24, r26
    9bd0:	08 95       	ret

00009bd2 <__divmodhi4>:
    9bd2:	97 fb       	bst	r25, 7
    9bd4:	07 2e       	mov	r0, r23
    9bd6:	16 f4       	brtc	.+4      	; 0x9bdc <__divmodhi4+0xa>
    9bd8:	00 94       	com	r0
    9bda:	07 d0       	rcall	.+14     	; 0x9bea <__divmodhi4_neg1>
    9bdc:	77 fd       	sbrc	r23, 7
    9bde:	09 d0       	rcall	.+18     	; 0x9bf2 <__divmodhi4_neg2>
    9be0:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <__udivmodhi4>
    9be4:	07 fc       	sbrc	r0, 7
    9be6:	05 d0       	rcall	.+10     	; 0x9bf2 <__divmodhi4_neg2>
    9be8:	3e f4       	brtc	.+14     	; 0x9bf8 <__divmodhi4_exit>

00009bea <__divmodhi4_neg1>:
    9bea:	90 95       	com	r25
    9bec:	81 95       	neg	r24
    9bee:	9f 4f       	sbci	r25, 0xFF	; 255
    9bf0:	08 95       	ret

00009bf2 <__divmodhi4_neg2>:
    9bf2:	70 95       	com	r23
    9bf4:	61 95       	neg	r22
    9bf6:	7f 4f       	sbci	r23, 0xFF	; 255

00009bf8 <__divmodhi4_exit>:
    9bf8:	08 95       	ret

00009bfa <__udivmodsi4>:
    9bfa:	a1 e2       	ldi	r26, 0x21	; 33
    9bfc:	1a 2e       	mov	r1, r26
    9bfe:	aa 1b       	sub	r26, r26
    9c00:	bb 1b       	sub	r27, r27
    9c02:	fd 01       	movw	r30, r26
    9c04:	0d c0       	rjmp	.+26     	; 0x9c20 <__udivmodsi4_ep>

00009c06 <__udivmodsi4_loop>:
    9c06:	aa 1f       	adc	r26, r26
    9c08:	bb 1f       	adc	r27, r27
    9c0a:	ee 1f       	adc	r30, r30
    9c0c:	ff 1f       	adc	r31, r31
    9c0e:	a2 17       	cp	r26, r18
    9c10:	b3 07       	cpc	r27, r19
    9c12:	e4 07       	cpc	r30, r20
    9c14:	f5 07       	cpc	r31, r21
    9c16:	20 f0       	brcs	.+8      	; 0x9c20 <__udivmodsi4_ep>
    9c18:	a2 1b       	sub	r26, r18
    9c1a:	b3 0b       	sbc	r27, r19
    9c1c:	e4 0b       	sbc	r30, r20
    9c1e:	f5 0b       	sbc	r31, r21

00009c20 <__udivmodsi4_ep>:
    9c20:	66 1f       	adc	r22, r22
    9c22:	77 1f       	adc	r23, r23
    9c24:	88 1f       	adc	r24, r24
    9c26:	99 1f       	adc	r25, r25
    9c28:	1a 94       	dec	r1
    9c2a:	69 f7       	brne	.-38     	; 0x9c06 <__udivmodsi4_loop>
    9c2c:	60 95       	com	r22
    9c2e:	70 95       	com	r23
    9c30:	80 95       	com	r24
    9c32:	90 95       	com	r25
    9c34:	9b 01       	movw	r18, r22
    9c36:	ac 01       	movw	r20, r24
    9c38:	bd 01       	movw	r22, r26
    9c3a:	cf 01       	movw	r24, r30
    9c3c:	08 95       	ret

00009c3e <__divmodsi4>:
    9c3e:	05 2e       	mov	r0, r21
    9c40:	97 fb       	bst	r25, 7
    9c42:	1e f4       	brtc	.+6      	; 0x9c4a <__divmodsi4+0xc>
    9c44:	00 94       	com	r0
    9c46:	0e 94 36 4e 	call	0x9c6c	; 0x9c6c <__negsi2>
    9c4a:	57 fd       	sbrc	r21, 7
    9c4c:	07 d0       	rcall	.+14     	; 0x9c5c <__divmodsi4_neg2>
    9c4e:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__udivmodsi4>
    9c52:	07 fc       	sbrc	r0, 7
    9c54:	03 d0       	rcall	.+6      	; 0x9c5c <__divmodsi4_neg2>
    9c56:	4e f4       	brtc	.+18     	; 0x9c6a <__divmodsi4_exit>
    9c58:	0c 94 36 4e 	jmp	0x9c6c	; 0x9c6c <__negsi2>

00009c5c <__divmodsi4_neg2>:
    9c5c:	50 95       	com	r21
    9c5e:	40 95       	com	r20
    9c60:	30 95       	com	r19
    9c62:	21 95       	neg	r18
    9c64:	3f 4f       	sbci	r19, 0xFF	; 255
    9c66:	4f 4f       	sbci	r20, 0xFF	; 255
    9c68:	5f 4f       	sbci	r21, 0xFF	; 255

00009c6a <__divmodsi4_exit>:
    9c6a:	08 95       	ret

00009c6c <__negsi2>:
    9c6c:	90 95       	com	r25
    9c6e:	80 95       	com	r24
    9c70:	70 95       	com	r23
    9c72:	61 95       	neg	r22
    9c74:	7f 4f       	sbci	r23, 0xFF	; 255
    9c76:	8f 4f       	sbci	r24, 0xFF	; 255
    9c78:	9f 4f       	sbci	r25, 0xFF	; 255
    9c7a:	08 95       	ret

00009c7c <__tablejump2__>:
    9c7c:	ee 0f       	add	r30, r30
    9c7e:	ff 1f       	adc	r31, r31
    9c80:	00 24       	eor	r0, r0
    9c82:	00 1c       	adc	r0, r0
    9c84:	0b be       	out	0x3b, r0	; 59
    9c86:	07 90       	elpm	r0, Z+
    9c88:	f6 91       	elpm	r31, Z
    9c8a:	e0 2d       	mov	r30, r0
    9c8c:	09 94       	ijmp

00009c8e <__umulhisi3>:
    9c8e:	a2 9f       	mul	r26, r18
    9c90:	b0 01       	movw	r22, r0
    9c92:	b3 9f       	mul	r27, r19
    9c94:	c0 01       	movw	r24, r0
    9c96:	a3 9f       	mul	r26, r19
    9c98:	70 0d       	add	r23, r0
    9c9a:	81 1d       	adc	r24, r1
    9c9c:	11 24       	eor	r1, r1
    9c9e:	91 1d       	adc	r25, r1
    9ca0:	b2 9f       	mul	r27, r18
    9ca2:	70 0d       	add	r23, r0
    9ca4:	81 1d       	adc	r24, r1
    9ca6:	11 24       	eor	r1, r1
    9ca8:	91 1d       	adc	r25, r1
    9caa:	08 95       	ret

00009cac <__usmulhisi3>:
    9cac:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <__umulhisi3>

00009cb0 <__usmulhisi3_tail>:
    9cb0:	b7 ff       	sbrs	r27, 7
    9cb2:	08 95       	ret
    9cb4:	82 1b       	sub	r24, r18
    9cb6:	93 0b       	sbc	r25, r19
    9cb8:	08 95       	ret

00009cba <__muluhisi3>:
    9cba:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <__umulhisi3>
    9cbe:	a5 9f       	mul	r26, r21
    9cc0:	90 0d       	add	r25, r0
    9cc2:	b4 9f       	mul	r27, r20
    9cc4:	90 0d       	add	r25, r0
    9cc6:	a4 9f       	mul	r26, r20
    9cc8:	80 0d       	add	r24, r0
    9cca:	91 1d       	adc	r25, r1
    9ccc:	11 24       	eor	r1, r1
    9cce:	08 95       	ret

00009cd0 <__mulshisi3>:
    9cd0:	b7 ff       	sbrs	r27, 7
    9cd2:	0c 94 5d 4e 	jmp	0x9cba	; 0x9cba <__muluhisi3>

00009cd6 <__mulohisi3>:
    9cd6:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <__muluhisi3>
    9cda:	82 1b       	sub	r24, r18
    9cdc:	93 0b       	sbc	r25, r19
    9cde:	08 95       	ret

00009ce0 <malloc>:
    9ce0:	0f 93       	push	r16
    9ce2:	1f 93       	push	r17
    9ce4:	cf 93       	push	r28
    9ce6:	df 93       	push	r29
    9ce8:	82 30       	cpi	r24, 0x02	; 2
    9cea:	91 05       	cpc	r25, r1
    9cec:	10 f4       	brcc	.+4      	; 0x9cf2 <malloc+0x12>
    9cee:	82 e0       	ldi	r24, 0x02	; 2
    9cf0:	90 e0       	ldi	r25, 0x00	; 0
    9cf2:	e0 91 a5 4a 	lds	r30, 0x4AA5	; 0x804aa5 <__flp>
    9cf6:	f0 91 a6 4a 	lds	r31, 0x4AA6	; 0x804aa6 <__flp+0x1>
    9cfa:	20 e0       	ldi	r18, 0x00	; 0
    9cfc:	30 e0       	ldi	r19, 0x00	; 0
    9cfe:	a0 e0       	ldi	r26, 0x00	; 0
    9d00:	b0 e0       	ldi	r27, 0x00	; 0
    9d02:	30 97       	sbiw	r30, 0x00	; 0
    9d04:	19 f1       	breq	.+70     	; 0x9d4c <malloc+0x6c>
    9d06:	40 81       	ld	r20, Z
    9d08:	51 81       	ldd	r21, Z+1	; 0x01
    9d0a:	02 81       	ldd	r16, Z+2	; 0x02
    9d0c:	13 81       	ldd	r17, Z+3	; 0x03
    9d0e:	48 17       	cp	r20, r24
    9d10:	59 07       	cpc	r21, r25
    9d12:	c8 f0       	brcs	.+50     	; 0x9d46 <malloc+0x66>
    9d14:	84 17       	cp	r24, r20
    9d16:	95 07       	cpc	r25, r21
    9d18:	69 f4       	brne	.+26     	; 0x9d34 <malloc+0x54>
    9d1a:	10 97       	sbiw	r26, 0x00	; 0
    9d1c:	31 f0       	breq	.+12     	; 0x9d2a <malloc+0x4a>
    9d1e:	12 96       	adiw	r26, 0x02	; 2
    9d20:	0c 93       	st	X, r16
    9d22:	12 97       	sbiw	r26, 0x02	; 2
    9d24:	13 96       	adiw	r26, 0x03	; 3
    9d26:	1c 93       	st	X, r17
    9d28:	27 c0       	rjmp	.+78     	; 0x9d78 <malloc+0x98>
    9d2a:	00 93 a5 4a 	sts	0x4AA5, r16	; 0x804aa5 <__flp>
    9d2e:	10 93 a6 4a 	sts	0x4AA6, r17	; 0x804aa6 <__flp+0x1>
    9d32:	22 c0       	rjmp	.+68     	; 0x9d78 <malloc+0x98>
    9d34:	21 15       	cp	r18, r1
    9d36:	31 05       	cpc	r19, r1
    9d38:	19 f0       	breq	.+6      	; 0x9d40 <malloc+0x60>
    9d3a:	42 17       	cp	r20, r18
    9d3c:	53 07       	cpc	r21, r19
    9d3e:	18 f4       	brcc	.+6      	; 0x9d46 <malloc+0x66>
    9d40:	9a 01       	movw	r18, r20
    9d42:	bd 01       	movw	r22, r26
    9d44:	ef 01       	movw	r28, r30
    9d46:	df 01       	movw	r26, r30
    9d48:	f8 01       	movw	r30, r16
    9d4a:	db cf       	rjmp	.-74     	; 0x9d02 <malloc+0x22>
    9d4c:	21 15       	cp	r18, r1
    9d4e:	31 05       	cpc	r19, r1
    9d50:	f9 f0       	breq	.+62     	; 0x9d90 <malloc+0xb0>
    9d52:	28 1b       	sub	r18, r24
    9d54:	39 0b       	sbc	r19, r25
    9d56:	24 30       	cpi	r18, 0x04	; 4
    9d58:	31 05       	cpc	r19, r1
    9d5a:	80 f4       	brcc	.+32     	; 0x9d7c <malloc+0x9c>
    9d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    9d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    9d60:	61 15       	cp	r22, r1
    9d62:	71 05       	cpc	r23, r1
    9d64:	21 f0       	breq	.+8      	; 0x9d6e <malloc+0x8e>
    9d66:	fb 01       	movw	r30, r22
    9d68:	82 83       	std	Z+2, r24	; 0x02
    9d6a:	93 83       	std	Z+3, r25	; 0x03
    9d6c:	04 c0       	rjmp	.+8      	; 0x9d76 <malloc+0x96>
    9d6e:	80 93 a5 4a 	sts	0x4AA5, r24	; 0x804aa5 <__flp>
    9d72:	90 93 a6 4a 	sts	0x4AA6, r25	; 0x804aa6 <__flp+0x1>
    9d76:	fe 01       	movw	r30, r28
    9d78:	32 96       	adiw	r30, 0x02	; 2
    9d7a:	44 c0       	rjmp	.+136    	; 0x9e04 <malloc+0x124>
    9d7c:	fe 01       	movw	r30, r28
    9d7e:	e2 0f       	add	r30, r18
    9d80:	f3 1f       	adc	r31, r19
    9d82:	81 93       	st	Z+, r24
    9d84:	91 93       	st	Z+, r25
    9d86:	22 50       	subi	r18, 0x02	; 2
    9d88:	31 09       	sbc	r19, r1
    9d8a:	28 83       	st	Y, r18
    9d8c:	39 83       	std	Y+1, r19	; 0x01
    9d8e:	3a c0       	rjmp	.+116    	; 0x9e04 <malloc+0x124>
    9d90:	20 91 a3 4a 	lds	r18, 0x4AA3	; 0x804aa3 <__brkval>
    9d94:	30 91 a4 4a 	lds	r19, 0x4AA4	; 0x804aa4 <__brkval+0x1>
    9d98:	23 2b       	or	r18, r19
    9d9a:	41 f4       	brne	.+16     	; 0x9dac <malloc+0xcc>
    9d9c:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    9da0:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    9da4:	20 93 a3 4a 	sts	0x4AA3, r18	; 0x804aa3 <__brkval>
    9da8:	30 93 a4 4a 	sts	0x4AA4, r19	; 0x804aa4 <__brkval+0x1>
    9dac:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__data_start>
    9db0:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__data_start+0x1>
    9db4:	21 15       	cp	r18, r1
    9db6:	31 05       	cpc	r19, r1
    9db8:	41 f4       	brne	.+16     	; 0x9dca <malloc+0xea>
    9dba:	2d b7       	in	r18, 0x3d	; 61
    9dbc:	3e b7       	in	r19, 0x3e	; 62
    9dbe:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    9dc2:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    9dc6:	24 1b       	sub	r18, r20
    9dc8:	35 0b       	sbc	r19, r21
    9dca:	e0 91 a3 4a 	lds	r30, 0x4AA3	; 0x804aa3 <__brkval>
    9dce:	f0 91 a4 4a 	lds	r31, 0x4AA4	; 0x804aa4 <__brkval+0x1>
    9dd2:	e2 17       	cp	r30, r18
    9dd4:	f3 07       	cpc	r31, r19
    9dd6:	a0 f4       	brcc	.+40     	; 0x9e00 <malloc+0x120>
    9dd8:	2e 1b       	sub	r18, r30
    9dda:	3f 0b       	sbc	r19, r31
    9ddc:	28 17       	cp	r18, r24
    9dde:	39 07       	cpc	r19, r25
    9de0:	78 f0       	brcs	.+30     	; 0x9e00 <malloc+0x120>
    9de2:	ac 01       	movw	r20, r24
    9de4:	4e 5f       	subi	r20, 0xFE	; 254
    9de6:	5f 4f       	sbci	r21, 0xFF	; 255
    9de8:	24 17       	cp	r18, r20
    9dea:	35 07       	cpc	r19, r21
    9dec:	48 f0       	brcs	.+18     	; 0x9e00 <malloc+0x120>
    9dee:	4e 0f       	add	r20, r30
    9df0:	5f 1f       	adc	r21, r31
    9df2:	40 93 a3 4a 	sts	0x4AA3, r20	; 0x804aa3 <__brkval>
    9df6:	50 93 a4 4a 	sts	0x4AA4, r21	; 0x804aa4 <__brkval+0x1>
    9dfa:	81 93       	st	Z+, r24
    9dfc:	91 93       	st	Z+, r25
    9dfe:	02 c0       	rjmp	.+4      	; 0x9e04 <malloc+0x124>
    9e00:	e0 e0       	ldi	r30, 0x00	; 0
    9e02:	f0 e0       	ldi	r31, 0x00	; 0
    9e04:	cf 01       	movw	r24, r30
    9e06:	df 91       	pop	r29
    9e08:	cf 91       	pop	r28
    9e0a:	1f 91       	pop	r17
    9e0c:	0f 91       	pop	r16
    9e0e:	08 95       	ret

00009e10 <free>:
    9e10:	cf 93       	push	r28
    9e12:	df 93       	push	r29
    9e14:	00 97       	sbiw	r24, 0x00	; 0
    9e16:	09 f4       	brne	.+2      	; 0x9e1a <free+0xa>
    9e18:	81 c0       	rjmp	.+258    	; 0x9f1c <free+0x10c>
    9e1a:	fc 01       	movw	r30, r24
    9e1c:	32 97       	sbiw	r30, 0x02	; 2
    9e1e:	12 82       	std	Z+2, r1	; 0x02
    9e20:	13 82       	std	Z+3, r1	; 0x03
    9e22:	a0 91 a5 4a 	lds	r26, 0x4AA5	; 0x804aa5 <__flp>
    9e26:	b0 91 a6 4a 	lds	r27, 0x4AA6	; 0x804aa6 <__flp+0x1>
    9e2a:	10 97       	sbiw	r26, 0x00	; 0
    9e2c:	81 f4       	brne	.+32     	; 0x9e4e <free+0x3e>
    9e2e:	20 81       	ld	r18, Z
    9e30:	31 81       	ldd	r19, Z+1	; 0x01
    9e32:	82 0f       	add	r24, r18
    9e34:	93 1f       	adc	r25, r19
    9e36:	20 91 a3 4a 	lds	r18, 0x4AA3	; 0x804aa3 <__brkval>
    9e3a:	30 91 a4 4a 	lds	r19, 0x4AA4	; 0x804aa4 <__brkval+0x1>
    9e3e:	28 17       	cp	r18, r24
    9e40:	39 07       	cpc	r19, r25
    9e42:	51 f5       	brne	.+84     	; 0x9e98 <free+0x88>
    9e44:	e0 93 a3 4a 	sts	0x4AA3, r30	; 0x804aa3 <__brkval>
    9e48:	f0 93 a4 4a 	sts	0x4AA4, r31	; 0x804aa4 <__brkval+0x1>
    9e4c:	67 c0       	rjmp	.+206    	; 0x9f1c <free+0x10c>
    9e4e:	ed 01       	movw	r28, r26
    9e50:	20 e0       	ldi	r18, 0x00	; 0
    9e52:	30 e0       	ldi	r19, 0x00	; 0
    9e54:	ce 17       	cp	r28, r30
    9e56:	df 07       	cpc	r29, r31
    9e58:	40 f4       	brcc	.+16     	; 0x9e6a <free+0x5a>
    9e5a:	4a 81       	ldd	r20, Y+2	; 0x02
    9e5c:	5b 81       	ldd	r21, Y+3	; 0x03
    9e5e:	9e 01       	movw	r18, r28
    9e60:	41 15       	cp	r20, r1
    9e62:	51 05       	cpc	r21, r1
    9e64:	f1 f0       	breq	.+60     	; 0x9ea2 <free+0x92>
    9e66:	ea 01       	movw	r28, r20
    9e68:	f5 cf       	rjmp	.-22     	; 0x9e54 <free+0x44>
    9e6a:	c2 83       	std	Z+2, r28	; 0x02
    9e6c:	d3 83       	std	Z+3, r29	; 0x03
    9e6e:	40 81       	ld	r20, Z
    9e70:	51 81       	ldd	r21, Z+1	; 0x01
    9e72:	84 0f       	add	r24, r20
    9e74:	95 1f       	adc	r25, r21
    9e76:	c8 17       	cp	r28, r24
    9e78:	d9 07       	cpc	r29, r25
    9e7a:	59 f4       	brne	.+22     	; 0x9e92 <free+0x82>
    9e7c:	88 81       	ld	r24, Y
    9e7e:	99 81       	ldd	r25, Y+1	; 0x01
    9e80:	84 0f       	add	r24, r20
    9e82:	95 1f       	adc	r25, r21
    9e84:	02 96       	adiw	r24, 0x02	; 2
    9e86:	80 83       	st	Z, r24
    9e88:	91 83       	std	Z+1, r25	; 0x01
    9e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    9e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    9e8e:	82 83       	std	Z+2, r24	; 0x02
    9e90:	93 83       	std	Z+3, r25	; 0x03
    9e92:	21 15       	cp	r18, r1
    9e94:	31 05       	cpc	r19, r1
    9e96:	29 f4       	brne	.+10     	; 0x9ea2 <free+0x92>
    9e98:	e0 93 a5 4a 	sts	0x4AA5, r30	; 0x804aa5 <__flp>
    9e9c:	f0 93 a6 4a 	sts	0x4AA6, r31	; 0x804aa6 <__flp+0x1>
    9ea0:	3d c0       	rjmp	.+122    	; 0x9f1c <free+0x10c>
    9ea2:	e9 01       	movw	r28, r18
    9ea4:	ea 83       	std	Y+2, r30	; 0x02
    9ea6:	fb 83       	std	Y+3, r31	; 0x03
    9ea8:	49 91       	ld	r20, Y+
    9eaa:	59 91       	ld	r21, Y+
    9eac:	c4 0f       	add	r28, r20
    9eae:	d5 1f       	adc	r29, r21
    9eb0:	ec 17       	cp	r30, r28
    9eb2:	fd 07       	cpc	r31, r29
    9eb4:	61 f4       	brne	.+24     	; 0x9ece <free+0xbe>
    9eb6:	80 81       	ld	r24, Z
    9eb8:	91 81       	ldd	r25, Z+1	; 0x01
    9eba:	84 0f       	add	r24, r20
    9ebc:	95 1f       	adc	r25, r21
    9ebe:	02 96       	adiw	r24, 0x02	; 2
    9ec0:	e9 01       	movw	r28, r18
    9ec2:	88 83       	st	Y, r24
    9ec4:	99 83       	std	Y+1, r25	; 0x01
    9ec6:	82 81       	ldd	r24, Z+2	; 0x02
    9ec8:	93 81       	ldd	r25, Z+3	; 0x03
    9eca:	8a 83       	std	Y+2, r24	; 0x02
    9ecc:	9b 83       	std	Y+3, r25	; 0x03
    9ece:	e0 e0       	ldi	r30, 0x00	; 0
    9ed0:	f0 e0       	ldi	r31, 0x00	; 0
    9ed2:	12 96       	adiw	r26, 0x02	; 2
    9ed4:	8d 91       	ld	r24, X+
    9ed6:	9c 91       	ld	r25, X
    9ed8:	13 97       	sbiw	r26, 0x03	; 3
    9eda:	00 97       	sbiw	r24, 0x00	; 0
    9edc:	19 f0       	breq	.+6      	; 0x9ee4 <free+0xd4>
    9ede:	fd 01       	movw	r30, r26
    9ee0:	dc 01       	movw	r26, r24
    9ee2:	f7 cf       	rjmp	.-18     	; 0x9ed2 <free+0xc2>
    9ee4:	8d 91       	ld	r24, X+
    9ee6:	9c 91       	ld	r25, X
    9ee8:	11 97       	sbiw	r26, 0x01	; 1
    9eea:	9d 01       	movw	r18, r26
    9eec:	2e 5f       	subi	r18, 0xFE	; 254
    9eee:	3f 4f       	sbci	r19, 0xFF	; 255
    9ef0:	82 0f       	add	r24, r18
    9ef2:	93 1f       	adc	r25, r19
    9ef4:	20 91 a3 4a 	lds	r18, 0x4AA3	; 0x804aa3 <__brkval>
    9ef8:	30 91 a4 4a 	lds	r19, 0x4AA4	; 0x804aa4 <__brkval+0x1>
    9efc:	28 17       	cp	r18, r24
    9efe:	39 07       	cpc	r19, r25
    9f00:	69 f4       	brne	.+26     	; 0x9f1c <free+0x10c>
    9f02:	30 97       	sbiw	r30, 0x00	; 0
    9f04:	29 f4       	brne	.+10     	; 0x9f10 <free+0x100>
    9f06:	10 92 a5 4a 	sts	0x4AA5, r1	; 0x804aa5 <__flp>
    9f0a:	10 92 a6 4a 	sts	0x4AA6, r1	; 0x804aa6 <__flp+0x1>
    9f0e:	02 c0       	rjmp	.+4      	; 0x9f14 <free+0x104>
    9f10:	12 82       	std	Z+2, r1	; 0x02
    9f12:	13 82       	std	Z+3, r1	; 0x03
    9f14:	a0 93 a3 4a 	sts	0x4AA3, r26	; 0x804aa3 <__brkval>
    9f18:	b0 93 a4 4a 	sts	0x4AA4, r27	; 0x804aa4 <__brkval+0x1>
    9f1c:	df 91       	pop	r29
    9f1e:	cf 91       	pop	r28
    9f20:	08 95       	ret

00009f22 <atof>:
    9f22:	66 27       	eor	r22, r22
    9f24:	77 27       	eor	r23, r23
    9f26:	0c 94 61 52 	jmp	0xa4c2	; 0xa4c2 <strtod>

00009f2a <atoi>:
    9f2a:	fc 01       	movw	r30, r24
    9f2c:	88 27       	eor	r24, r24
    9f2e:	99 27       	eor	r25, r25
    9f30:	e8 94       	clt
    9f32:	21 91       	ld	r18, Z+
    9f34:	20 32       	cpi	r18, 0x20	; 32
    9f36:	e9 f3       	breq	.-6      	; 0x9f32 <atoi+0x8>
    9f38:	29 30       	cpi	r18, 0x09	; 9
    9f3a:	10 f0       	brcs	.+4      	; 0x9f40 <atoi+0x16>
    9f3c:	2e 30       	cpi	r18, 0x0E	; 14
    9f3e:	c8 f3       	brcs	.-14     	; 0x9f32 <atoi+0x8>
    9f40:	2b 32       	cpi	r18, 0x2B	; 43
    9f42:	41 f0       	breq	.+16     	; 0x9f54 <atoi+0x2a>
    9f44:	2d 32       	cpi	r18, 0x2D	; 45
    9f46:	39 f4       	brne	.+14     	; 0x9f56 <atoi+0x2c>
    9f48:	68 94       	set
    9f4a:	04 c0       	rjmp	.+8      	; 0x9f54 <atoi+0x2a>
    9f4c:	0e 94 2c 50 	call	0xa058	; 0xa058 <__mulhi_const_10>
    9f50:	82 0f       	add	r24, r18
    9f52:	91 1d       	adc	r25, r1
    9f54:	21 91       	ld	r18, Z+
    9f56:	20 53       	subi	r18, 0x30	; 48
    9f58:	2a 30       	cpi	r18, 0x0A	; 10
    9f5a:	c0 f3       	brcs	.-16     	; 0x9f4c <atoi+0x22>
    9f5c:	1e f4       	brtc	.+6      	; 0x9f64 <atoi+0x3a>
    9f5e:	90 95       	com	r25
    9f60:	81 95       	neg	r24
    9f62:	9f 4f       	sbci	r25, 0xFF	; 255
    9f64:	08 95       	ret

00009f66 <atol>:
    9f66:	1f 93       	push	r17
    9f68:	fc 01       	movw	r30, r24
    9f6a:	99 27       	eor	r25, r25
    9f6c:	88 27       	eor	r24, r24
    9f6e:	bc 01       	movw	r22, r24
    9f70:	e8 94       	clt
    9f72:	11 91       	ld	r17, Z+
    9f74:	10 32       	cpi	r17, 0x20	; 32
    9f76:	e9 f3       	breq	.-6      	; 0x9f72 <atol+0xc>
    9f78:	19 30       	cpi	r17, 0x09	; 9
    9f7a:	10 f0       	brcs	.+4      	; 0x9f80 <atol+0x1a>
    9f7c:	1e 30       	cpi	r17, 0x0E	; 14
    9f7e:	c8 f3       	brcs	.-14     	; 0x9f72 <atol+0xc>
    9f80:	1b 32       	cpi	r17, 0x2B	; 43
    9f82:	51 f0       	breq	.+20     	; 0x9f98 <atol+0x32>
    9f84:	1d 32       	cpi	r17, 0x2D	; 45
    9f86:	49 f4       	brne	.+18     	; 0x9f9a <atol+0x34>
    9f88:	68 94       	set
    9f8a:	06 c0       	rjmp	.+12     	; 0x9f98 <atol+0x32>
    9f8c:	0e 94 17 50 	call	0xa02e	; 0xa02e <__mulsi_const_10>
    9f90:	61 0f       	add	r22, r17
    9f92:	71 1d       	adc	r23, r1
    9f94:	81 1d       	adc	r24, r1
    9f96:	91 1d       	adc	r25, r1
    9f98:	11 91       	ld	r17, Z+
    9f9a:	10 53       	subi	r17, 0x30	; 48
    9f9c:	1a 30       	cpi	r17, 0x0A	; 10
    9f9e:	b0 f3       	brcs	.-20     	; 0x9f8c <atol+0x26>
    9fa0:	3e f4       	brtc	.+14     	; 0x9fb0 <atol+0x4a>
    9fa2:	90 95       	com	r25
    9fa4:	80 95       	com	r24
    9fa6:	70 95       	com	r23
    9fa8:	61 95       	neg	r22
    9faa:	7f 4f       	sbci	r23, 0xFF	; 255
    9fac:	8f 4f       	sbci	r24, 0xFF	; 255
    9fae:	9f 4f       	sbci	r25, 0xFF	; 255
    9fb0:	1f 91       	pop	r17
    9fb2:	08 95       	ret

00009fb4 <toupper>:
    9fb4:	91 11       	cpse	r25, r1
    9fb6:	08 95       	ret
    9fb8:	81 56       	subi	r24, 0x61	; 97
    9fba:	8a 51       	subi	r24, 0x1A	; 26
    9fbc:	08 f4       	brcc	.+2      	; 0x9fc0 <toupper+0xc>
    9fbe:	80 52       	subi	r24, 0x20	; 32
    9fc0:	85 58       	subi	r24, 0x85	; 133
    9fc2:	08 95       	ret

00009fc4 <strcat>:
    9fc4:	fb 01       	movw	r30, r22
    9fc6:	dc 01       	movw	r26, r24
    9fc8:	0d 90       	ld	r0, X+
    9fca:	00 20       	and	r0, r0
    9fcc:	e9 f7       	brne	.-6      	; 0x9fc8 <strcat+0x4>
    9fce:	11 97       	sbiw	r26, 0x01	; 1
    9fd0:	01 90       	ld	r0, Z+
    9fd2:	0d 92       	st	X+, r0
    9fd4:	00 20       	and	r0, r0
    9fd6:	e1 f7       	brne	.-8      	; 0x9fd0 <strcat+0xc>
    9fd8:	08 95       	ret

00009fda <strchr>:
    9fda:	fc 01       	movw	r30, r24
    9fdc:	81 91       	ld	r24, Z+
    9fde:	86 17       	cp	r24, r22
    9fe0:	21 f0       	breq	.+8      	; 0x9fea <strchr+0x10>
    9fe2:	88 23       	and	r24, r24
    9fe4:	d9 f7       	brne	.-10     	; 0x9fdc <strchr+0x2>
    9fe6:	99 27       	eor	r25, r25
    9fe8:	08 95       	ret
    9fea:	31 97       	sbiw	r30, 0x01	; 1
    9fec:	cf 01       	movw	r24, r30
    9fee:	08 95       	ret

00009ff0 <strcpy>:
    9ff0:	fb 01       	movw	r30, r22
    9ff2:	dc 01       	movw	r26, r24
    9ff4:	01 90       	ld	r0, Z+
    9ff6:	0d 92       	st	X+, r0
    9ff8:	00 20       	and	r0, r0
    9ffa:	e1 f7       	brne	.-8      	; 0x9ff4 <strcpy+0x4>
    9ffc:	08 95       	ret

00009ffe <strlen>:
    9ffe:	fc 01       	movw	r30, r24
    a000:	01 90       	ld	r0, Z+
    a002:	00 20       	and	r0, r0
    a004:	e9 f7       	brne	.-6      	; 0xa000 <strlen+0x2>
    a006:	80 95       	com	r24
    a008:	90 95       	com	r25
    a00a:	8e 0f       	add	r24, r30
    a00c:	9f 1f       	adc	r25, r31
    a00e:	08 95       	ret

0000a010 <strncpy>:
    a010:	fb 01       	movw	r30, r22
    a012:	dc 01       	movw	r26, r24
    a014:	41 50       	subi	r20, 0x01	; 1
    a016:	50 40       	sbci	r21, 0x00	; 0
    a018:	48 f0       	brcs	.+18     	; 0xa02c <strncpy+0x1c>
    a01a:	01 90       	ld	r0, Z+
    a01c:	0d 92       	st	X+, r0
    a01e:	00 20       	and	r0, r0
    a020:	c9 f7       	brne	.-14     	; 0xa014 <strncpy+0x4>
    a022:	01 c0       	rjmp	.+2      	; 0xa026 <strncpy+0x16>
    a024:	1d 92       	st	X+, r1
    a026:	41 50       	subi	r20, 0x01	; 1
    a028:	50 40       	sbci	r21, 0x00	; 0
    a02a:	e0 f7       	brcc	.-8      	; 0xa024 <strncpy+0x14>
    a02c:	08 95       	ret

0000a02e <__mulsi_const_10>:
    a02e:	59 2f       	mov	r21, r25
    a030:	48 2f       	mov	r20, r24
    a032:	37 2f       	mov	r19, r23
    a034:	26 2f       	mov	r18, r22
    a036:	66 0f       	add	r22, r22
    a038:	77 1f       	adc	r23, r23
    a03a:	88 1f       	adc	r24, r24
    a03c:	99 1f       	adc	r25, r25
    a03e:	66 0f       	add	r22, r22
    a040:	77 1f       	adc	r23, r23
    a042:	88 1f       	adc	r24, r24
    a044:	99 1f       	adc	r25, r25
    a046:	62 0f       	add	r22, r18
    a048:	73 1f       	adc	r23, r19
    a04a:	84 1f       	adc	r24, r20
    a04c:	95 1f       	adc	r25, r21
    a04e:	66 0f       	add	r22, r22
    a050:	77 1f       	adc	r23, r23
    a052:	88 1f       	adc	r24, r24
    a054:	99 1f       	adc	r25, r25
    a056:	08 95       	ret

0000a058 <__mulhi_const_10>:
    a058:	7a e0       	ldi	r23, 0x0A	; 10
    a05a:	97 9f       	mul	r25, r23
    a05c:	90 2d       	mov	r25, r0
    a05e:	87 9f       	mul	r24, r23
    a060:	80 2d       	mov	r24, r0
    a062:	91 0d       	add	r25, r1
    a064:	11 24       	eor	r1, r1
    a066:	08 95       	ret

0000a068 <sprintf>:
    a068:	0f 93       	push	r16
    a06a:	1f 93       	push	r17
    a06c:	cf 93       	push	r28
    a06e:	df 93       	push	r29
    a070:	cd b7       	in	r28, 0x3d	; 61
    a072:	de b7       	in	r29, 0x3e	; 62
    a074:	2e 97       	sbiw	r28, 0x0e	; 14
    a076:	cd bf       	out	0x3d, r28	; 61
    a078:	de bf       	out	0x3e, r29	; 62
    a07a:	0d 89       	ldd	r16, Y+21	; 0x15
    a07c:	1e 89       	ldd	r17, Y+22	; 0x16
    a07e:	86 e0       	ldi	r24, 0x06	; 6
    a080:	8c 83       	std	Y+4, r24	; 0x04
    a082:	09 83       	std	Y+1, r16	; 0x01
    a084:	1a 83       	std	Y+2, r17	; 0x02
    a086:	8f ef       	ldi	r24, 0xFF	; 255
    a088:	9f e7       	ldi	r25, 0x7F	; 127
    a08a:	8d 83       	std	Y+5, r24	; 0x05
    a08c:	9e 83       	std	Y+6, r25	; 0x06
    a08e:	ae 01       	movw	r20, r28
    a090:	47 5e       	subi	r20, 0xE7	; 231
    a092:	5f 4f       	sbci	r21, 0xFF	; 255
    a094:	6f 89       	ldd	r22, Y+23	; 0x17
    a096:	78 8d       	ldd	r23, Y+24	; 0x18
    a098:	ce 01       	movw	r24, r28
    a09a:	01 96       	adiw	r24, 0x01	; 1
    a09c:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <vfprintf>
    a0a0:	ef 81       	ldd	r30, Y+7	; 0x07
    a0a2:	f8 85       	ldd	r31, Y+8	; 0x08
    a0a4:	e0 0f       	add	r30, r16
    a0a6:	f1 1f       	adc	r31, r17
    a0a8:	10 82       	st	Z, r1
    a0aa:	2e 96       	adiw	r28, 0x0e	; 14
    a0ac:	cd bf       	out	0x3d, r28	; 61
    a0ae:	de bf       	out	0x3e, r29	; 62
    a0b0:	df 91       	pop	r29
    a0b2:	cf 91       	pop	r28
    a0b4:	1f 91       	pop	r17
    a0b6:	0f 91       	pop	r16
    a0b8:	08 95       	ret

0000a0ba <vfprintf>:
    a0ba:	2f 92       	push	r2
    a0bc:	3f 92       	push	r3
    a0be:	4f 92       	push	r4
    a0c0:	5f 92       	push	r5
    a0c2:	6f 92       	push	r6
    a0c4:	7f 92       	push	r7
    a0c6:	8f 92       	push	r8
    a0c8:	9f 92       	push	r9
    a0ca:	af 92       	push	r10
    a0cc:	bf 92       	push	r11
    a0ce:	cf 92       	push	r12
    a0d0:	df 92       	push	r13
    a0d2:	ef 92       	push	r14
    a0d4:	ff 92       	push	r15
    a0d6:	0f 93       	push	r16
    a0d8:	1f 93       	push	r17
    a0da:	cf 93       	push	r28
    a0dc:	df 93       	push	r29
    a0de:	cd b7       	in	r28, 0x3d	; 61
    a0e0:	de b7       	in	r29, 0x3e	; 62
    a0e2:	2b 97       	sbiw	r28, 0x0b	; 11
    a0e4:	cd bf       	out	0x3d, r28	; 61
    a0e6:	de bf       	out	0x3e, r29	; 62
    a0e8:	6c 01       	movw	r12, r24
    a0ea:	7b 01       	movw	r14, r22
    a0ec:	8a 01       	movw	r16, r20
    a0ee:	fc 01       	movw	r30, r24
    a0f0:	16 82       	std	Z+6, r1	; 0x06
    a0f2:	17 82       	std	Z+7, r1	; 0x07
    a0f4:	83 81       	ldd	r24, Z+3	; 0x03
    a0f6:	81 ff       	sbrs	r24, 1
    a0f8:	cc c1       	rjmp	.+920    	; 0xa492 <vfprintf+0x3d8>
    a0fa:	ce 01       	movw	r24, r28
    a0fc:	01 96       	adiw	r24, 0x01	; 1
    a0fe:	3c 01       	movw	r6, r24
    a100:	f6 01       	movw	r30, r12
    a102:	93 81       	ldd	r25, Z+3	; 0x03
    a104:	f7 01       	movw	r30, r14
    a106:	93 fd       	sbrc	r25, 3
    a108:	85 91       	lpm	r24, Z+
    a10a:	93 ff       	sbrs	r25, 3
    a10c:	81 91       	ld	r24, Z+
    a10e:	7f 01       	movw	r14, r30
    a110:	88 23       	and	r24, r24
    a112:	09 f4       	brne	.+2      	; 0xa116 <vfprintf+0x5c>
    a114:	ba c1       	rjmp	.+884    	; 0xa48a <vfprintf+0x3d0>
    a116:	85 32       	cpi	r24, 0x25	; 37
    a118:	39 f4       	brne	.+14     	; 0xa128 <vfprintf+0x6e>
    a11a:	93 fd       	sbrc	r25, 3
    a11c:	85 91       	lpm	r24, Z+
    a11e:	93 ff       	sbrs	r25, 3
    a120:	81 91       	ld	r24, Z+
    a122:	7f 01       	movw	r14, r30
    a124:	85 32       	cpi	r24, 0x25	; 37
    a126:	29 f4       	brne	.+10     	; 0xa132 <vfprintf+0x78>
    a128:	b6 01       	movw	r22, r12
    a12a:	90 e0       	ldi	r25, 0x00	; 0
    a12c:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <fputc>
    a130:	e7 cf       	rjmp	.-50     	; 0xa100 <vfprintf+0x46>
    a132:	91 2c       	mov	r9, r1
    a134:	21 2c       	mov	r2, r1
    a136:	31 2c       	mov	r3, r1
    a138:	ff e1       	ldi	r31, 0x1F	; 31
    a13a:	f3 15       	cp	r31, r3
    a13c:	d8 f0       	brcs	.+54     	; 0xa174 <vfprintf+0xba>
    a13e:	8b 32       	cpi	r24, 0x2B	; 43
    a140:	79 f0       	breq	.+30     	; 0xa160 <vfprintf+0xa6>
    a142:	38 f4       	brcc	.+14     	; 0xa152 <vfprintf+0x98>
    a144:	80 32       	cpi	r24, 0x20	; 32
    a146:	79 f0       	breq	.+30     	; 0xa166 <vfprintf+0xac>
    a148:	83 32       	cpi	r24, 0x23	; 35
    a14a:	a1 f4       	brne	.+40     	; 0xa174 <vfprintf+0xba>
    a14c:	23 2d       	mov	r18, r3
    a14e:	20 61       	ori	r18, 0x10	; 16
    a150:	1d c0       	rjmp	.+58     	; 0xa18c <vfprintf+0xd2>
    a152:	8d 32       	cpi	r24, 0x2D	; 45
    a154:	61 f0       	breq	.+24     	; 0xa16e <vfprintf+0xb4>
    a156:	80 33       	cpi	r24, 0x30	; 48
    a158:	69 f4       	brne	.+26     	; 0xa174 <vfprintf+0xba>
    a15a:	23 2d       	mov	r18, r3
    a15c:	21 60       	ori	r18, 0x01	; 1
    a15e:	16 c0       	rjmp	.+44     	; 0xa18c <vfprintf+0xd2>
    a160:	83 2d       	mov	r24, r3
    a162:	82 60       	ori	r24, 0x02	; 2
    a164:	38 2e       	mov	r3, r24
    a166:	e3 2d       	mov	r30, r3
    a168:	e4 60       	ori	r30, 0x04	; 4
    a16a:	3e 2e       	mov	r3, r30
    a16c:	2a c0       	rjmp	.+84     	; 0xa1c2 <vfprintf+0x108>
    a16e:	f3 2d       	mov	r31, r3
    a170:	f8 60       	ori	r31, 0x08	; 8
    a172:	1d c0       	rjmp	.+58     	; 0xa1ae <vfprintf+0xf4>
    a174:	37 fc       	sbrc	r3, 7
    a176:	2d c0       	rjmp	.+90     	; 0xa1d2 <vfprintf+0x118>
    a178:	20 ed       	ldi	r18, 0xD0	; 208
    a17a:	28 0f       	add	r18, r24
    a17c:	2a 30       	cpi	r18, 0x0A	; 10
    a17e:	40 f0       	brcs	.+16     	; 0xa190 <vfprintf+0xd6>
    a180:	8e 32       	cpi	r24, 0x2E	; 46
    a182:	b9 f4       	brne	.+46     	; 0xa1b2 <vfprintf+0xf8>
    a184:	36 fc       	sbrc	r3, 6
    a186:	81 c1       	rjmp	.+770    	; 0xa48a <vfprintf+0x3d0>
    a188:	23 2d       	mov	r18, r3
    a18a:	20 64       	ori	r18, 0x40	; 64
    a18c:	32 2e       	mov	r3, r18
    a18e:	19 c0       	rjmp	.+50     	; 0xa1c2 <vfprintf+0x108>
    a190:	36 fe       	sbrs	r3, 6
    a192:	06 c0       	rjmp	.+12     	; 0xa1a0 <vfprintf+0xe6>
    a194:	8a e0       	ldi	r24, 0x0A	; 10
    a196:	98 9e       	mul	r9, r24
    a198:	20 0d       	add	r18, r0
    a19a:	11 24       	eor	r1, r1
    a19c:	92 2e       	mov	r9, r18
    a19e:	11 c0       	rjmp	.+34     	; 0xa1c2 <vfprintf+0x108>
    a1a0:	ea e0       	ldi	r30, 0x0A	; 10
    a1a2:	2e 9e       	mul	r2, r30
    a1a4:	20 0d       	add	r18, r0
    a1a6:	11 24       	eor	r1, r1
    a1a8:	22 2e       	mov	r2, r18
    a1aa:	f3 2d       	mov	r31, r3
    a1ac:	f0 62       	ori	r31, 0x20	; 32
    a1ae:	3f 2e       	mov	r3, r31
    a1b0:	08 c0       	rjmp	.+16     	; 0xa1c2 <vfprintf+0x108>
    a1b2:	8c 36       	cpi	r24, 0x6C	; 108
    a1b4:	21 f4       	brne	.+8      	; 0xa1be <vfprintf+0x104>
    a1b6:	83 2d       	mov	r24, r3
    a1b8:	80 68       	ori	r24, 0x80	; 128
    a1ba:	38 2e       	mov	r3, r24
    a1bc:	02 c0       	rjmp	.+4      	; 0xa1c2 <vfprintf+0x108>
    a1be:	88 36       	cpi	r24, 0x68	; 104
    a1c0:	41 f4       	brne	.+16     	; 0xa1d2 <vfprintf+0x118>
    a1c2:	f7 01       	movw	r30, r14
    a1c4:	93 fd       	sbrc	r25, 3
    a1c6:	85 91       	lpm	r24, Z+
    a1c8:	93 ff       	sbrs	r25, 3
    a1ca:	81 91       	ld	r24, Z+
    a1cc:	7f 01       	movw	r14, r30
    a1ce:	81 11       	cpse	r24, r1
    a1d0:	b3 cf       	rjmp	.-154    	; 0xa138 <vfprintf+0x7e>
    a1d2:	98 2f       	mov	r25, r24
    a1d4:	9f 7d       	andi	r25, 0xDF	; 223
    a1d6:	95 54       	subi	r25, 0x45	; 69
    a1d8:	93 30       	cpi	r25, 0x03	; 3
    a1da:	28 f4       	brcc	.+10     	; 0xa1e6 <vfprintf+0x12c>
    a1dc:	0c 5f       	subi	r16, 0xFC	; 252
    a1de:	1f 4f       	sbci	r17, 0xFF	; 255
    a1e0:	9f e3       	ldi	r25, 0x3F	; 63
    a1e2:	99 83       	std	Y+1, r25	; 0x01
    a1e4:	0d c0       	rjmp	.+26     	; 0xa200 <vfprintf+0x146>
    a1e6:	83 36       	cpi	r24, 0x63	; 99
    a1e8:	31 f0       	breq	.+12     	; 0xa1f6 <vfprintf+0x13c>
    a1ea:	83 37       	cpi	r24, 0x73	; 115
    a1ec:	71 f0       	breq	.+28     	; 0xa20a <vfprintf+0x150>
    a1ee:	83 35       	cpi	r24, 0x53	; 83
    a1f0:	09 f0       	breq	.+2      	; 0xa1f4 <vfprintf+0x13a>
    a1f2:	59 c0       	rjmp	.+178    	; 0xa2a6 <vfprintf+0x1ec>
    a1f4:	21 c0       	rjmp	.+66     	; 0xa238 <vfprintf+0x17e>
    a1f6:	f8 01       	movw	r30, r16
    a1f8:	80 81       	ld	r24, Z
    a1fa:	89 83       	std	Y+1, r24	; 0x01
    a1fc:	0e 5f       	subi	r16, 0xFE	; 254
    a1fe:	1f 4f       	sbci	r17, 0xFF	; 255
    a200:	88 24       	eor	r8, r8
    a202:	83 94       	inc	r8
    a204:	91 2c       	mov	r9, r1
    a206:	53 01       	movw	r10, r6
    a208:	13 c0       	rjmp	.+38     	; 0xa230 <vfprintf+0x176>
    a20a:	28 01       	movw	r4, r16
    a20c:	f2 e0       	ldi	r31, 0x02	; 2
    a20e:	4f 0e       	add	r4, r31
    a210:	51 1c       	adc	r5, r1
    a212:	f8 01       	movw	r30, r16
    a214:	a0 80       	ld	r10, Z
    a216:	b1 80       	ldd	r11, Z+1	; 0x01
    a218:	36 fe       	sbrs	r3, 6
    a21a:	03 c0       	rjmp	.+6      	; 0xa222 <vfprintf+0x168>
    a21c:	69 2d       	mov	r22, r9
    a21e:	70 e0       	ldi	r23, 0x00	; 0
    a220:	02 c0       	rjmp	.+4      	; 0xa226 <vfprintf+0x16c>
    a222:	6f ef       	ldi	r22, 0xFF	; 255
    a224:	7f ef       	ldi	r23, 0xFF	; 255
    a226:	c5 01       	movw	r24, r10
    a228:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <strnlen>
    a22c:	4c 01       	movw	r8, r24
    a22e:	82 01       	movw	r16, r4
    a230:	f3 2d       	mov	r31, r3
    a232:	ff 77       	andi	r31, 0x7F	; 127
    a234:	3f 2e       	mov	r3, r31
    a236:	16 c0       	rjmp	.+44     	; 0xa264 <vfprintf+0x1aa>
    a238:	28 01       	movw	r4, r16
    a23a:	22 e0       	ldi	r18, 0x02	; 2
    a23c:	42 0e       	add	r4, r18
    a23e:	51 1c       	adc	r5, r1
    a240:	f8 01       	movw	r30, r16
    a242:	a0 80       	ld	r10, Z
    a244:	b1 80       	ldd	r11, Z+1	; 0x01
    a246:	36 fe       	sbrs	r3, 6
    a248:	03 c0       	rjmp	.+6      	; 0xa250 <vfprintf+0x196>
    a24a:	69 2d       	mov	r22, r9
    a24c:	70 e0       	ldi	r23, 0x00	; 0
    a24e:	02 c0       	rjmp	.+4      	; 0xa254 <vfprintf+0x19a>
    a250:	6f ef       	ldi	r22, 0xFF	; 255
    a252:	7f ef       	ldi	r23, 0xFF	; 255
    a254:	c5 01       	movw	r24, r10
    a256:	0e 94 de 53 	call	0xa7bc	; 0xa7bc <strnlen_P>
    a25a:	4c 01       	movw	r8, r24
    a25c:	f3 2d       	mov	r31, r3
    a25e:	f0 68       	ori	r31, 0x80	; 128
    a260:	3f 2e       	mov	r3, r31
    a262:	82 01       	movw	r16, r4
    a264:	33 fc       	sbrc	r3, 3
    a266:	1b c0       	rjmp	.+54     	; 0xa29e <vfprintf+0x1e4>
    a268:	82 2d       	mov	r24, r2
    a26a:	90 e0       	ldi	r25, 0x00	; 0
    a26c:	88 16       	cp	r8, r24
    a26e:	99 06       	cpc	r9, r25
    a270:	b0 f4       	brcc	.+44     	; 0xa29e <vfprintf+0x1e4>
    a272:	b6 01       	movw	r22, r12
    a274:	80 e2       	ldi	r24, 0x20	; 32
    a276:	90 e0       	ldi	r25, 0x00	; 0
    a278:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <fputc>
    a27c:	2a 94       	dec	r2
    a27e:	f4 cf       	rjmp	.-24     	; 0xa268 <vfprintf+0x1ae>
    a280:	f5 01       	movw	r30, r10
    a282:	37 fc       	sbrc	r3, 7
    a284:	85 91       	lpm	r24, Z+
    a286:	37 fe       	sbrs	r3, 7
    a288:	81 91       	ld	r24, Z+
    a28a:	5f 01       	movw	r10, r30
    a28c:	b6 01       	movw	r22, r12
    a28e:	90 e0       	ldi	r25, 0x00	; 0
    a290:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <fputc>
    a294:	21 10       	cpse	r2, r1
    a296:	2a 94       	dec	r2
    a298:	21 e0       	ldi	r18, 0x01	; 1
    a29a:	82 1a       	sub	r8, r18
    a29c:	91 08       	sbc	r9, r1
    a29e:	81 14       	cp	r8, r1
    a2a0:	91 04       	cpc	r9, r1
    a2a2:	71 f7       	brne	.-36     	; 0xa280 <vfprintf+0x1c6>
    a2a4:	e8 c0       	rjmp	.+464    	; 0xa476 <vfprintf+0x3bc>
    a2a6:	84 36       	cpi	r24, 0x64	; 100
    a2a8:	11 f0       	breq	.+4      	; 0xa2ae <vfprintf+0x1f4>
    a2aa:	89 36       	cpi	r24, 0x69	; 105
    a2ac:	41 f5       	brne	.+80     	; 0xa2fe <vfprintf+0x244>
    a2ae:	f8 01       	movw	r30, r16
    a2b0:	37 fe       	sbrs	r3, 7
    a2b2:	07 c0       	rjmp	.+14     	; 0xa2c2 <vfprintf+0x208>
    a2b4:	60 81       	ld	r22, Z
    a2b6:	71 81       	ldd	r23, Z+1	; 0x01
    a2b8:	82 81       	ldd	r24, Z+2	; 0x02
    a2ba:	93 81       	ldd	r25, Z+3	; 0x03
    a2bc:	0c 5f       	subi	r16, 0xFC	; 252
    a2be:	1f 4f       	sbci	r17, 0xFF	; 255
    a2c0:	08 c0       	rjmp	.+16     	; 0xa2d2 <vfprintf+0x218>
    a2c2:	60 81       	ld	r22, Z
    a2c4:	71 81       	ldd	r23, Z+1	; 0x01
    a2c6:	07 2e       	mov	r0, r23
    a2c8:	00 0c       	add	r0, r0
    a2ca:	88 0b       	sbc	r24, r24
    a2cc:	99 0b       	sbc	r25, r25
    a2ce:	0e 5f       	subi	r16, 0xFE	; 254
    a2d0:	1f 4f       	sbci	r17, 0xFF	; 255
    a2d2:	f3 2d       	mov	r31, r3
    a2d4:	ff 76       	andi	r31, 0x6F	; 111
    a2d6:	3f 2e       	mov	r3, r31
    a2d8:	97 ff       	sbrs	r25, 7
    a2da:	09 c0       	rjmp	.+18     	; 0xa2ee <vfprintf+0x234>
    a2dc:	90 95       	com	r25
    a2de:	80 95       	com	r24
    a2e0:	70 95       	com	r23
    a2e2:	61 95       	neg	r22
    a2e4:	7f 4f       	sbci	r23, 0xFF	; 255
    a2e6:	8f 4f       	sbci	r24, 0xFF	; 255
    a2e8:	9f 4f       	sbci	r25, 0xFF	; 255
    a2ea:	f0 68       	ori	r31, 0x80	; 128
    a2ec:	3f 2e       	mov	r3, r31
    a2ee:	2a e0       	ldi	r18, 0x0A	; 10
    a2f0:	30 e0       	ldi	r19, 0x00	; 0
    a2f2:	a3 01       	movw	r20, r6
    a2f4:	0e 94 30 54 	call	0xa860	; 0xa860 <__ultoa_invert>
    a2f8:	88 2e       	mov	r8, r24
    a2fa:	86 18       	sub	r8, r6
    a2fc:	45 c0       	rjmp	.+138    	; 0xa388 <vfprintf+0x2ce>
    a2fe:	85 37       	cpi	r24, 0x75	; 117
    a300:	31 f4       	brne	.+12     	; 0xa30e <vfprintf+0x254>
    a302:	23 2d       	mov	r18, r3
    a304:	2f 7e       	andi	r18, 0xEF	; 239
    a306:	b2 2e       	mov	r11, r18
    a308:	2a e0       	ldi	r18, 0x0A	; 10
    a30a:	30 e0       	ldi	r19, 0x00	; 0
    a30c:	25 c0       	rjmp	.+74     	; 0xa358 <vfprintf+0x29e>
    a30e:	93 2d       	mov	r25, r3
    a310:	99 7f       	andi	r25, 0xF9	; 249
    a312:	b9 2e       	mov	r11, r25
    a314:	8f 36       	cpi	r24, 0x6F	; 111
    a316:	c1 f0       	breq	.+48     	; 0xa348 <vfprintf+0x28e>
    a318:	18 f4       	brcc	.+6      	; 0xa320 <vfprintf+0x266>
    a31a:	88 35       	cpi	r24, 0x58	; 88
    a31c:	79 f0       	breq	.+30     	; 0xa33c <vfprintf+0x282>
    a31e:	b5 c0       	rjmp	.+362    	; 0xa48a <vfprintf+0x3d0>
    a320:	80 37       	cpi	r24, 0x70	; 112
    a322:	19 f0       	breq	.+6      	; 0xa32a <vfprintf+0x270>
    a324:	88 37       	cpi	r24, 0x78	; 120
    a326:	21 f0       	breq	.+8      	; 0xa330 <vfprintf+0x276>
    a328:	b0 c0       	rjmp	.+352    	; 0xa48a <vfprintf+0x3d0>
    a32a:	e9 2f       	mov	r30, r25
    a32c:	e0 61       	ori	r30, 0x10	; 16
    a32e:	be 2e       	mov	r11, r30
    a330:	b4 fe       	sbrs	r11, 4
    a332:	0d c0       	rjmp	.+26     	; 0xa34e <vfprintf+0x294>
    a334:	fb 2d       	mov	r31, r11
    a336:	f4 60       	ori	r31, 0x04	; 4
    a338:	bf 2e       	mov	r11, r31
    a33a:	09 c0       	rjmp	.+18     	; 0xa34e <vfprintf+0x294>
    a33c:	34 fe       	sbrs	r3, 4
    a33e:	0a c0       	rjmp	.+20     	; 0xa354 <vfprintf+0x29a>
    a340:	29 2f       	mov	r18, r25
    a342:	26 60       	ori	r18, 0x06	; 6
    a344:	b2 2e       	mov	r11, r18
    a346:	06 c0       	rjmp	.+12     	; 0xa354 <vfprintf+0x29a>
    a348:	28 e0       	ldi	r18, 0x08	; 8
    a34a:	30 e0       	ldi	r19, 0x00	; 0
    a34c:	05 c0       	rjmp	.+10     	; 0xa358 <vfprintf+0x29e>
    a34e:	20 e1       	ldi	r18, 0x10	; 16
    a350:	30 e0       	ldi	r19, 0x00	; 0
    a352:	02 c0       	rjmp	.+4      	; 0xa358 <vfprintf+0x29e>
    a354:	20 e1       	ldi	r18, 0x10	; 16
    a356:	32 e0       	ldi	r19, 0x02	; 2
    a358:	f8 01       	movw	r30, r16
    a35a:	b7 fe       	sbrs	r11, 7
    a35c:	07 c0       	rjmp	.+14     	; 0xa36c <vfprintf+0x2b2>
    a35e:	60 81       	ld	r22, Z
    a360:	71 81       	ldd	r23, Z+1	; 0x01
    a362:	82 81       	ldd	r24, Z+2	; 0x02
    a364:	93 81       	ldd	r25, Z+3	; 0x03
    a366:	0c 5f       	subi	r16, 0xFC	; 252
    a368:	1f 4f       	sbci	r17, 0xFF	; 255
    a36a:	06 c0       	rjmp	.+12     	; 0xa378 <vfprintf+0x2be>
    a36c:	60 81       	ld	r22, Z
    a36e:	71 81       	ldd	r23, Z+1	; 0x01
    a370:	80 e0       	ldi	r24, 0x00	; 0
    a372:	90 e0       	ldi	r25, 0x00	; 0
    a374:	0e 5f       	subi	r16, 0xFE	; 254
    a376:	1f 4f       	sbci	r17, 0xFF	; 255
    a378:	a3 01       	movw	r20, r6
    a37a:	0e 94 30 54 	call	0xa860	; 0xa860 <__ultoa_invert>
    a37e:	88 2e       	mov	r8, r24
    a380:	86 18       	sub	r8, r6
    a382:	fb 2d       	mov	r31, r11
    a384:	ff 77       	andi	r31, 0x7F	; 127
    a386:	3f 2e       	mov	r3, r31
    a388:	36 fe       	sbrs	r3, 6
    a38a:	0d c0       	rjmp	.+26     	; 0xa3a6 <vfprintf+0x2ec>
    a38c:	23 2d       	mov	r18, r3
    a38e:	2e 7f       	andi	r18, 0xFE	; 254
    a390:	a2 2e       	mov	r10, r18
    a392:	89 14       	cp	r8, r9
    a394:	58 f4       	brcc	.+22     	; 0xa3ac <vfprintf+0x2f2>
    a396:	34 fe       	sbrs	r3, 4
    a398:	0b c0       	rjmp	.+22     	; 0xa3b0 <vfprintf+0x2f6>
    a39a:	32 fc       	sbrc	r3, 2
    a39c:	09 c0       	rjmp	.+18     	; 0xa3b0 <vfprintf+0x2f6>
    a39e:	83 2d       	mov	r24, r3
    a3a0:	8e 7e       	andi	r24, 0xEE	; 238
    a3a2:	a8 2e       	mov	r10, r24
    a3a4:	05 c0       	rjmp	.+10     	; 0xa3b0 <vfprintf+0x2f6>
    a3a6:	b8 2c       	mov	r11, r8
    a3a8:	a3 2c       	mov	r10, r3
    a3aa:	03 c0       	rjmp	.+6      	; 0xa3b2 <vfprintf+0x2f8>
    a3ac:	b8 2c       	mov	r11, r8
    a3ae:	01 c0       	rjmp	.+2      	; 0xa3b2 <vfprintf+0x2f8>
    a3b0:	b9 2c       	mov	r11, r9
    a3b2:	a4 fe       	sbrs	r10, 4
    a3b4:	0f c0       	rjmp	.+30     	; 0xa3d4 <vfprintf+0x31a>
    a3b6:	fe 01       	movw	r30, r28
    a3b8:	e8 0d       	add	r30, r8
    a3ba:	f1 1d       	adc	r31, r1
    a3bc:	80 81       	ld	r24, Z
    a3be:	80 33       	cpi	r24, 0x30	; 48
    a3c0:	21 f4       	brne	.+8      	; 0xa3ca <vfprintf+0x310>
    a3c2:	9a 2d       	mov	r25, r10
    a3c4:	99 7e       	andi	r25, 0xE9	; 233
    a3c6:	a9 2e       	mov	r10, r25
    a3c8:	09 c0       	rjmp	.+18     	; 0xa3dc <vfprintf+0x322>
    a3ca:	a2 fe       	sbrs	r10, 2
    a3cc:	06 c0       	rjmp	.+12     	; 0xa3da <vfprintf+0x320>
    a3ce:	b3 94       	inc	r11
    a3d0:	b3 94       	inc	r11
    a3d2:	04 c0       	rjmp	.+8      	; 0xa3dc <vfprintf+0x322>
    a3d4:	8a 2d       	mov	r24, r10
    a3d6:	86 78       	andi	r24, 0x86	; 134
    a3d8:	09 f0       	breq	.+2      	; 0xa3dc <vfprintf+0x322>
    a3da:	b3 94       	inc	r11
    a3dc:	a3 fc       	sbrc	r10, 3
    a3de:	11 c0       	rjmp	.+34     	; 0xa402 <vfprintf+0x348>
    a3e0:	a0 fe       	sbrs	r10, 0
    a3e2:	06 c0       	rjmp	.+12     	; 0xa3f0 <vfprintf+0x336>
    a3e4:	b2 14       	cp	r11, r2
    a3e6:	88 f4       	brcc	.+34     	; 0xa40a <vfprintf+0x350>
    a3e8:	28 0c       	add	r2, r8
    a3ea:	92 2c       	mov	r9, r2
    a3ec:	9b 18       	sub	r9, r11
    a3ee:	0e c0       	rjmp	.+28     	; 0xa40c <vfprintf+0x352>
    a3f0:	b2 14       	cp	r11, r2
    a3f2:	60 f4       	brcc	.+24     	; 0xa40c <vfprintf+0x352>
    a3f4:	b6 01       	movw	r22, r12
    a3f6:	80 e2       	ldi	r24, 0x20	; 32
    a3f8:	90 e0       	ldi	r25, 0x00	; 0
    a3fa:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <fputc>
    a3fe:	b3 94       	inc	r11
    a400:	f7 cf       	rjmp	.-18     	; 0xa3f0 <vfprintf+0x336>
    a402:	b2 14       	cp	r11, r2
    a404:	18 f4       	brcc	.+6      	; 0xa40c <vfprintf+0x352>
    a406:	2b 18       	sub	r2, r11
    a408:	02 c0       	rjmp	.+4      	; 0xa40e <vfprintf+0x354>
    a40a:	98 2c       	mov	r9, r8
    a40c:	21 2c       	mov	r2, r1
    a40e:	a4 fe       	sbrs	r10, 4
    a410:	10 c0       	rjmp	.+32     	; 0xa432 <vfprintf+0x378>
    a412:	b6 01       	movw	r22, r12
    a414:	80 e3       	ldi	r24, 0x30	; 48
    a416:	90 e0       	ldi	r25, 0x00	; 0
    a418:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <fputc>
    a41c:	a2 fe       	sbrs	r10, 2
    a41e:	17 c0       	rjmp	.+46     	; 0xa44e <vfprintf+0x394>
    a420:	a1 fc       	sbrc	r10, 1
    a422:	03 c0       	rjmp	.+6      	; 0xa42a <vfprintf+0x370>
    a424:	88 e7       	ldi	r24, 0x78	; 120
    a426:	90 e0       	ldi	r25, 0x00	; 0
    a428:	02 c0       	rjmp	.+4      	; 0xa42e <vfprintf+0x374>
    a42a:	88 e5       	ldi	r24, 0x58	; 88
    a42c:	90 e0       	ldi	r25, 0x00	; 0
    a42e:	b6 01       	movw	r22, r12
    a430:	0c c0       	rjmp	.+24     	; 0xa44a <vfprintf+0x390>
    a432:	8a 2d       	mov	r24, r10
    a434:	86 78       	andi	r24, 0x86	; 134
    a436:	59 f0       	breq	.+22     	; 0xa44e <vfprintf+0x394>
    a438:	a1 fe       	sbrs	r10, 1
    a43a:	02 c0       	rjmp	.+4      	; 0xa440 <vfprintf+0x386>
    a43c:	8b e2       	ldi	r24, 0x2B	; 43
    a43e:	01 c0       	rjmp	.+2      	; 0xa442 <vfprintf+0x388>
    a440:	80 e2       	ldi	r24, 0x20	; 32
    a442:	a7 fc       	sbrc	r10, 7
    a444:	8d e2       	ldi	r24, 0x2D	; 45
    a446:	b6 01       	movw	r22, r12
    a448:	90 e0       	ldi	r25, 0x00	; 0
    a44a:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <fputc>
    a44e:	89 14       	cp	r8, r9
    a450:	38 f4       	brcc	.+14     	; 0xa460 <vfprintf+0x3a6>
    a452:	b6 01       	movw	r22, r12
    a454:	80 e3       	ldi	r24, 0x30	; 48
    a456:	90 e0       	ldi	r25, 0x00	; 0
    a458:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <fputc>
    a45c:	9a 94       	dec	r9
    a45e:	f7 cf       	rjmp	.-18     	; 0xa44e <vfprintf+0x394>
    a460:	8a 94       	dec	r8
    a462:	f3 01       	movw	r30, r6
    a464:	e8 0d       	add	r30, r8
    a466:	f1 1d       	adc	r31, r1
    a468:	80 81       	ld	r24, Z
    a46a:	b6 01       	movw	r22, r12
    a46c:	90 e0       	ldi	r25, 0x00	; 0
    a46e:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <fputc>
    a472:	81 10       	cpse	r8, r1
    a474:	f5 cf       	rjmp	.-22     	; 0xa460 <vfprintf+0x3a6>
    a476:	22 20       	and	r2, r2
    a478:	09 f4       	brne	.+2      	; 0xa47c <vfprintf+0x3c2>
    a47a:	42 ce       	rjmp	.-892    	; 0xa100 <vfprintf+0x46>
    a47c:	b6 01       	movw	r22, r12
    a47e:	80 e2       	ldi	r24, 0x20	; 32
    a480:	90 e0       	ldi	r25, 0x00	; 0
    a482:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <fputc>
    a486:	2a 94       	dec	r2
    a488:	f6 cf       	rjmp	.-20     	; 0xa476 <vfprintf+0x3bc>
    a48a:	f6 01       	movw	r30, r12
    a48c:	86 81       	ldd	r24, Z+6	; 0x06
    a48e:	97 81       	ldd	r25, Z+7	; 0x07
    a490:	02 c0       	rjmp	.+4      	; 0xa496 <vfprintf+0x3dc>
    a492:	8f ef       	ldi	r24, 0xFF	; 255
    a494:	9f ef       	ldi	r25, 0xFF	; 255
    a496:	2b 96       	adiw	r28, 0x0b	; 11
    a498:	cd bf       	out	0x3d, r28	; 61
    a49a:	de bf       	out	0x3e, r29	; 62
    a49c:	df 91       	pop	r29
    a49e:	cf 91       	pop	r28
    a4a0:	1f 91       	pop	r17
    a4a2:	0f 91       	pop	r16
    a4a4:	ff 90       	pop	r15
    a4a6:	ef 90       	pop	r14
    a4a8:	df 90       	pop	r13
    a4aa:	cf 90       	pop	r12
    a4ac:	bf 90       	pop	r11
    a4ae:	af 90       	pop	r10
    a4b0:	9f 90       	pop	r9
    a4b2:	8f 90       	pop	r8
    a4b4:	7f 90       	pop	r7
    a4b6:	6f 90       	pop	r6
    a4b8:	5f 90       	pop	r5
    a4ba:	4f 90       	pop	r4
    a4bc:	3f 90       	pop	r3
    a4be:	2f 90       	pop	r2
    a4c0:	08 95       	ret

0000a4c2 <strtod>:
    a4c2:	8f 92       	push	r8
    a4c4:	9f 92       	push	r9
    a4c6:	af 92       	push	r10
    a4c8:	bf 92       	push	r11
    a4ca:	cf 92       	push	r12
    a4cc:	df 92       	push	r13
    a4ce:	ef 92       	push	r14
    a4d0:	ff 92       	push	r15
    a4d2:	0f 93       	push	r16
    a4d4:	1f 93       	push	r17
    a4d6:	cf 93       	push	r28
    a4d8:	df 93       	push	r29
    a4da:	ec 01       	movw	r28, r24
    a4dc:	6b 01       	movw	r12, r22
    a4de:	61 15       	cp	r22, r1
    a4e0:	71 05       	cpc	r23, r1
    a4e2:	19 f0       	breq	.+6      	; 0xa4ea <strtod+0x28>
    a4e4:	fb 01       	movw	r30, r22
    a4e6:	80 83       	st	Z, r24
    a4e8:	91 83       	std	Z+1, r25	; 0x01
    a4ea:	7e 01       	movw	r14, r28
    a4ec:	ff ef       	ldi	r31, 0xFF	; 255
    a4ee:	ef 1a       	sub	r14, r31
    a4f0:	ff 0a       	sbc	r15, r31
    a4f2:	08 81       	ld	r16, Y
    a4f4:	80 2f       	mov	r24, r16
    a4f6:	90 e0       	ldi	r25, 0x00	; 0
    a4f8:	0e 94 bd 53 	call	0xa77a	; 0xa77a <isspace>
    a4fc:	89 2b       	or	r24, r25
    a4fe:	11 f0       	breq	.+4      	; 0xa504 <strtod+0x42>
    a500:	e7 01       	movw	r28, r14
    a502:	f3 cf       	rjmp	.-26     	; 0xa4ea <strtod+0x28>
    a504:	0d 32       	cpi	r16, 0x2D	; 45
    a506:	39 f4       	brne	.+14     	; 0xa516 <strtod+0x54>
    a508:	7e 01       	movw	r14, r28
    a50a:	82 e0       	ldi	r24, 0x02	; 2
    a50c:	e8 0e       	add	r14, r24
    a50e:	f1 1c       	adc	r15, r1
    a510:	09 81       	ldd	r16, Y+1	; 0x01
    a512:	11 e0       	ldi	r17, 0x01	; 1
    a514:	08 c0       	rjmp	.+16     	; 0xa526 <strtod+0x64>
    a516:	0b 32       	cpi	r16, 0x2B	; 43
    a518:	29 f4       	brne	.+10     	; 0xa524 <strtod+0x62>
    a51a:	7e 01       	movw	r14, r28
    a51c:	92 e0       	ldi	r25, 0x02	; 2
    a51e:	e9 0e       	add	r14, r25
    a520:	f1 1c       	adc	r15, r1
    a522:	09 81       	ldd	r16, Y+1	; 0x01
    a524:	10 e0       	ldi	r17, 0x00	; 0
    a526:	e7 01       	movw	r28, r14
    a528:	21 97       	sbiw	r28, 0x01	; 1
    a52a:	43 e0       	ldi	r20, 0x03	; 3
    a52c:	50 e0       	ldi	r21, 0x00	; 0
    a52e:	68 e5       	ldi	r22, 0x58	; 88
    a530:	72 e0       	ldi	r23, 0x02	; 2
    a532:	ce 01       	movw	r24, r28
    a534:	0e 94 c6 53 	call	0xa78c	; 0xa78c <strncasecmp_P>
    a538:	89 2b       	or	r24, r25
    a53a:	c1 f4       	brne	.+48     	; 0xa56c <strtod+0xaa>
    a53c:	23 96       	adiw	r28, 0x03	; 3
    a53e:	45 e0       	ldi	r20, 0x05	; 5
    a540:	50 e0       	ldi	r21, 0x00	; 0
    a542:	63 e5       	ldi	r22, 0x53	; 83
    a544:	72 e0       	ldi	r23, 0x02	; 2
    a546:	ce 01       	movw	r24, r28
    a548:	0e 94 c6 53 	call	0xa78c	; 0xa78c <strncasecmp_P>
    a54c:	89 2b       	or	r24, r25
    a54e:	09 f4       	brne	.+2      	; 0xa552 <strtod+0x90>
    a550:	25 96       	adiw	r28, 0x05	; 5
    a552:	c1 14       	cp	r12, r1
    a554:	d1 04       	cpc	r13, r1
    a556:	19 f0       	breq	.+6      	; 0xa55e <strtod+0x9c>
    a558:	f6 01       	movw	r30, r12
    a55a:	c0 83       	st	Z, r28
    a55c:	d1 83       	std	Z+1, r29	; 0x01
    a55e:	11 11       	cpse	r17, r1
    a560:	f6 c0       	rjmp	.+492    	; 0xa74e <strtod+0x28c>
    a562:	60 e0       	ldi	r22, 0x00	; 0
    a564:	70 e0       	ldi	r23, 0x00	; 0
    a566:	80 e8       	ldi	r24, 0x80	; 128
    a568:	9f e7       	ldi	r25, 0x7F	; 127
    a56a:	fa c0       	rjmp	.+500    	; 0xa760 <strtod+0x29e>
    a56c:	43 e0       	ldi	r20, 0x03	; 3
    a56e:	50 e0       	ldi	r21, 0x00	; 0
    a570:	60 e5       	ldi	r22, 0x50	; 80
    a572:	72 e0       	ldi	r23, 0x02	; 2
    a574:	ce 01       	movw	r24, r28
    a576:	0e 94 c6 53 	call	0xa78c	; 0xa78c <strncasecmp_P>
    a57a:	89 2b       	or	r24, r25
    a57c:	59 f4       	brne	.+22     	; 0xa594 <strtod+0xd2>
    a57e:	c1 14       	cp	r12, r1
    a580:	d1 04       	cpc	r13, r1
    a582:	09 f4       	brne	.+2      	; 0xa586 <strtod+0xc4>
    a584:	e9 c0       	rjmp	.+466    	; 0xa758 <strtod+0x296>
    a586:	f2 e0       	ldi	r31, 0x02	; 2
    a588:	ef 0e       	add	r14, r31
    a58a:	f1 1c       	adc	r15, r1
    a58c:	f6 01       	movw	r30, r12
    a58e:	e0 82       	st	Z, r14
    a590:	f1 82       	std	Z+1, r15	; 0x01
    a592:	e2 c0       	rjmp	.+452    	; 0xa758 <strtod+0x296>
    a594:	20 e0       	ldi	r18, 0x00	; 0
    a596:	30 e0       	ldi	r19, 0x00	; 0
    a598:	a9 01       	movw	r20, r18
    a59a:	c0 e0       	ldi	r28, 0x00	; 0
    a59c:	d0 e0       	ldi	r29, 0x00	; 0
    a59e:	f7 01       	movw	r30, r14
    a5a0:	60 ed       	ldi	r22, 0xD0	; 208
    a5a2:	a6 2e       	mov	r10, r22
    a5a4:	a0 0e       	add	r10, r16
    a5a6:	89 e0       	ldi	r24, 0x09	; 9
    a5a8:	8a 15       	cp	r24, r10
    a5aa:	30 f1       	brcs	.+76     	; 0xa5f8 <strtod+0x136>
    a5ac:	91 2f       	mov	r25, r17
    a5ae:	92 60       	ori	r25, 0x02	; 2
    a5b0:	b9 2e       	mov	r11, r25
    a5b2:	81 2f       	mov	r24, r17
    a5b4:	88 70       	andi	r24, 0x08	; 8
    a5b6:	12 ff       	sbrs	r17, 2
    a5b8:	04 c0       	rjmp	.+8      	; 0xa5c2 <strtod+0x100>
    a5ba:	81 11       	cpse	r24, r1
    a5bc:	24 c0       	rjmp	.+72     	; 0xa606 <strtod+0x144>
    a5be:	21 96       	adiw	r28, 0x01	; 1
    a5c0:	22 c0       	rjmp	.+68     	; 0xa606 <strtod+0x144>
    a5c2:	81 11       	cpse	r24, r1
    a5c4:	21 97       	sbiw	r28, 0x01	; 1
    a5c6:	a5 e0       	ldi	r26, 0x05	; 5
    a5c8:	b0 e0       	ldi	r27, 0x00	; 0
    a5ca:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <__muluhisi3>
    a5ce:	dc 01       	movw	r26, r24
    a5d0:	cb 01       	movw	r24, r22
    a5d2:	88 0f       	add	r24, r24
    a5d4:	99 1f       	adc	r25, r25
    a5d6:	aa 1f       	adc	r26, r26
    a5d8:	bb 1f       	adc	r27, r27
    a5da:	9c 01       	movw	r18, r24
    a5dc:	ad 01       	movw	r20, r26
    a5de:	2a 0d       	add	r18, r10
    a5e0:	31 1d       	adc	r19, r1
    a5e2:	41 1d       	adc	r20, r1
    a5e4:	51 1d       	adc	r21, r1
    a5e6:	28 39       	cpi	r18, 0x98	; 152
    a5e8:	89 e9       	ldi	r24, 0x99	; 153
    a5ea:	38 07       	cpc	r19, r24
    a5ec:	48 07       	cpc	r20, r24
    a5ee:	89 e1       	ldi	r24, 0x19	; 25
    a5f0:	58 07       	cpc	r21, r24
    a5f2:	48 f0       	brcs	.+18     	; 0xa606 <strtod+0x144>
    a5f4:	16 60       	ori	r17, 0x06	; 6
    a5f6:	06 c0       	rjmp	.+12     	; 0xa604 <strtod+0x142>
    a5f8:	9e ef       	ldi	r25, 0xFE	; 254
    a5fa:	a9 12       	cpse	r10, r25
    a5fc:	0a c0       	rjmp	.+20     	; 0xa612 <strtod+0x150>
    a5fe:	13 fd       	sbrc	r17, 3
    a600:	40 c0       	rjmp	.+128    	; 0xa682 <strtod+0x1c0>
    a602:	18 60       	ori	r17, 0x08	; 8
    a604:	b1 2e       	mov	r11, r17
    a606:	8f ef       	ldi	r24, 0xFF	; 255
    a608:	e8 1a       	sub	r14, r24
    a60a:	f8 0a       	sbc	r15, r24
    a60c:	00 81       	ld	r16, Z
    a60e:	1b 2d       	mov	r17, r11
    a610:	c6 cf       	rjmp	.-116    	; 0xa59e <strtod+0xdc>
    a612:	80 2f       	mov	r24, r16
    a614:	8f 7d       	andi	r24, 0xDF	; 223
    a616:	85 34       	cpi	r24, 0x45	; 69
    a618:	a1 f5       	brne	.+104    	; 0xa682 <strtod+0x1c0>
    a61a:	80 81       	ld	r24, Z
    a61c:	8d 32       	cpi	r24, 0x2D	; 45
    a61e:	11 f4       	brne	.+4      	; 0xa624 <strtod+0x162>
    a620:	10 61       	ori	r17, 0x10	; 16
    a622:	06 c0       	rjmp	.+12     	; 0xa630 <strtod+0x16e>
    a624:	8b 32       	cpi	r24, 0x2B	; 43
    a626:	21 f0       	breq	.+8      	; 0xa630 <strtod+0x16e>
    a628:	31 96       	adiw	r30, 0x01	; 1
    a62a:	61 e0       	ldi	r22, 0x01	; 1
    a62c:	70 e0       	ldi	r23, 0x00	; 0
    a62e:	04 c0       	rjmp	.+8      	; 0xa638 <strtod+0x176>
    a630:	81 81       	ldd	r24, Z+1	; 0x01
    a632:	32 96       	adiw	r30, 0x02	; 2
    a634:	62 e0       	ldi	r22, 0x02	; 2
    a636:	70 e0       	ldi	r23, 0x00	; 0
    a638:	80 53       	subi	r24, 0x30	; 48
    a63a:	8a 30       	cpi	r24, 0x0A	; 10
    a63c:	18 f0       	brcs	.+6      	; 0xa644 <strtod+0x182>
    a63e:	e6 1b       	sub	r30, r22
    a640:	f7 0b       	sbc	r31, r23
    a642:	1f c0       	rjmp	.+62     	; 0xa682 <strtod+0x1c0>
    a644:	60 e0       	ldi	r22, 0x00	; 0
    a646:	70 e0       	ldi	r23, 0x00	; 0
    a648:	60 38       	cpi	r22, 0x80	; 128
    a64a:	9c e0       	ldi	r25, 0x0C	; 12
    a64c:	79 07       	cpc	r23, r25
    a64e:	5c f4       	brge	.+22     	; 0xa666 <strtod+0x1a4>
    a650:	db 01       	movw	r26, r22
    a652:	aa 0f       	add	r26, r26
    a654:	bb 1f       	adc	r27, r27
    a656:	aa 0f       	add	r26, r26
    a658:	bb 1f       	adc	r27, r27
    a65a:	6a 0f       	add	r22, r26
    a65c:	7b 1f       	adc	r23, r27
    a65e:	66 0f       	add	r22, r22
    a660:	77 1f       	adc	r23, r23
    a662:	68 0f       	add	r22, r24
    a664:	71 1d       	adc	r23, r1
    a666:	31 96       	adiw	r30, 0x01	; 1
    a668:	df 01       	movw	r26, r30
    a66a:	11 97       	sbiw	r26, 0x01	; 1
    a66c:	8c 91       	ld	r24, X
    a66e:	80 53       	subi	r24, 0x30	; 48
    a670:	8a 30       	cpi	r24, 0x0A	; 10
    a672:	50 f3       	brcs	.-44     	; 0xa648 <strtod+0x186>
    a674:	14 ff       	sbrs	r17, 4
    a676:	03 c0       	rjmp	.+6      	; 0xa67e <strtod+0x1bc>
    a678:	71 95       	neg	r23
    a67a:	61 95       	neg	r22
    a67c:	71 09       	sbc	r23, r1
    a67e:	c6 0f       	add	r28, r22
    a680:	d7 1f       	adc	r29, r23
    a682:	11 ff       	sbrs	r17, 1
    a684:	08 c0       	rjmp	.+16     	; 0xa696 <strtod+0x1d4>
    a686:	c1 14       	cp	r12, r1
    a688:	d1 04       	cpc	r13, r1
    a68a:	29 f0       	breq	.+10     	; 0xa696 <strtod+0x1d4>
    a68c:	cf 01       	movw	r24, r30
    a68e:	01 97       	sbiw	r24, 0x01	; 1
    a690:	f6 01       	movw	r30, r12
    a692:	80 83       	st	Z, r24
    a694:	91 83       	std	Z+1, r25	; 0x01
    a696:	ca 01       	movw	r24, r20
    a698:	b9 01       	movw	r22, r18
    a69a:	0e 94 60 4c 	call	0x98c0	; 0x98c0 <__floatunsisf>
    a69e:	21 2f       	mov	r18, r17
    a6a0:	23 70       	andi	r18, 0x03	; 3
    a6a2:	23 30       	cpi	r18, 0x03	; 3
    a6a4:	19 f0       	breq	.+6      	; 0xa6ac <strtod+0x1ea>
    a6a6:	4b 01       	movw	r8, r22
    a6a8:	5c 01       	movw	r10, r24
    a6aa:	06 c0       	rjmp	.+12     	; 0xa6b8 <strtod+0x1f6>
    a6ac:	4b 01       	movw	r8, r22
    a6ae:	5c 01       	movw	r10, r24
    a6b0:	b7 fa       	bst	r11, 7
    a6b2:	b0 94       	com	r11
    a6b4:	b7 f8       	bld	r11, 7
    a6b6:	b0 94       	com	r11
    a6b8:	20 e0       	ldi	r18, 0x00	; 0
    a6ba:	30 e0       	ldi	r19, 0x00	; 0
    a6bc:	a9 01       	movw	r20, r18
    a6be:	c5 01       	movw	r24, r10
    a6c0:	b4 01       	movw	r22, r8
    a6c2:	0e 94 b3 4b 	call	0x9766	; 0x9766 <__cmpsf2>
    a6c6:	88 23       	and	r24, r24
    a6c8:	09 f4       	brne	.+2      	; 0xa6cc <strtod+0x20a>
    a6ca:	3e c0       	rjmp	.+124    	; 0xa748 <strtod+0x286>
    a6cc:	d7 ff       	sbrs	r29, 7
    a6ce:	06 c0       	rjmp	.+12     	; 0xa6dc <strtod+0x21a>
    a6d0:	d1 95       	neg	r29
    a6d2:	c1 95       	neg	r28
    a6d4:	d1 09       	sbc	r29, r1
    a6d6:	0f e6       	ldi	r16, 0x6F	; 111
    a6d8:	12 e0       	ldi	r17, 0x02	; 2
    a6da:	02 c0       	rjmp	.+4      	; 0xa6e0 <strtod+0x21e>
    a6dc:	07 e8       	ldi	r16, 0x87	; 135
    a6de:	12 e0       	ldi	r17, 0x02	; 2
    a6e0:	68 01       	movw	r12, r16
    a6e2:	f8 e1       	ldi	r31, 0x18	; 24
    a6e4:	cf 1a       	sub	r12, r31
    a6e6:	d1 08       	sbc	r13, r1
    a6e8:	90 e2       	ldi	r25, 0x20	; 32
    a6ea:	e9 2e       	mov	r14, r25
    a6ec:	f1 2c       	mov	r15, r1
    a6ee:	ce 15       	cp	r28, r14
    a6f0:	df 05       	cpc	r29, r15
    a6f2:	74 f0       	brlt	.+28     	; 0xa710 <strtod+0x24e>
    a6f4:	f8 01       	movw	r30, r16
    a6f6:	25 91       	lpm	r18, Z+
    a6f8:	35 91       	lpm	r19, Z+
    a6fa:	45 91       	lpm	r20, Z+
    a6fc:	54 91       	lpm	r21, Z
    a6fe:	c5 01       	movw	r24, r10
    a700:	b4 01       	movw	r22, r8
    a702:	0e 94 58 4d 	call	0x9ab0	; 0x9ab0 <__mulsf3>
    a706:	4b 01       	movw	r8, r22
    a708:	5c 01       	movw	r10, r24
    a70a:	ce 19       	sub	r28, r14
    a70c:	df 09       	sbc	r29, r15
    a70e:	ef cf       	rjmp	.-34     	; 0xa6ee <strtod+0x22c>
    a710:	04 50       	subi	r16, 0x04	; 4
    a712:	11 09       	sbc	r17, r1
    a714:	f5 94       	asr	r15
    a716:	e7 94       	ror	r14
    a718:	0c 15       	cp	r16, r12
    a71a:	1d 05       	cpc	r17, r13
    a71c:	41 f7       	brne	.-48     	; 0xa6ee <strtod+0x22c>
    a71e:	8a 2d       	mov	r24, r10
    a720:	88 0f       	add	r24, r24
    a722:	8b 2d       	mov	r24, r11
    a724:	88 1f       	adc	r24, r24
    a726:	8f 3f       	cpi	r24, 0xFF	; 255
    a728:	49 f0       	breq	.+18     	; 0xa73c <strtod+0x27a>
    a72a:	20 e0       	ldi	r18, 0x00	; 0
    a72c:	30 e0       	ldi	r19, 0x00	; 0
    a72e:	a9 01       	movw	r20, r18
    a730:	c5 01       	movw	r24, r10
    a732:	b4 01       	movw	r22, r8
    a734:	0e 94 b3 4b 	call	0x9766	; 0x9766 <__cmpsf2>
    a738:	81 11       	cpse	r24, r1
    a73a:	06 c0       	rjmp	.+12     	; 0xa748 <strtod+0x286>
    a73c:	82 e2       	ldi	r24, 0x22	; 34
    a73e:	90 e0       	ldi	r25, 0x00	; 0
    a740:	80 93 bd 4a 	sts	0x4ABD, r24	; 0x804abd <errno>
    a744:	90 93 be 4a 	sts	0x4ABE, r25	; 0x804abe <errno+0x1>
    a748:	c5 01       	movw	r24, r10
    a74a:	b4 01       	movw	r22, r8
    a74c:	09 c0       	rjmp	.+18     	; 0xa760 <strtod+0x29e>
    a74e:	60 e0       	ldi	r22, 0x00	; 0
    a750:	70 e0       	ldi	r23, 0x00	; 0
    a752:	80 e8       	ldi	r24, 0x80	; 128
    a754:	9f ef       	ldi	r25, 0xFF	; 255
    a756:	04 c0       	rjmp	.+8      	; 0xa760 <strtod+0x29e>
    a758:	60 e0       	ldi	r22, 0x00	; 0
    a75a:	70 e0       	ldi	r23, 0x00	; 0
    a75c:	80 ec       	ldi	r24, 0xC0	; 192
    a75e:	9f e7       	ldi	r25, 0x7F	; 127
    a760:	df 91       	pop	r29
    a762:	cf 91       	pop	r28
    a764:	1f 91       	pop	r17
    a766:	0f 91       	pop	r16
    a768:	ff 90       	pop	r15
    a76a:	ef 90       	pop	r14
    a76c:	df 90       	pop	r13
    a76e:	cf 90       	pop	r12
    a770:	bf 90       	pop	r11
    a772:	af 90       	pop	r10
    a774:	9f 90       	pop	r9
    a776:	8f 90       	pop	r8
    a778:	08 95       	ret

0000a77a <isspace>:
    a77a:	91 11       	cpse	r25, r1
    a77c:	0c 94 8e 54 	jmp	0xa91c	; 0xa91c <__ctype_isfalse>
    a780:	80 32       	cpi	r24, 0x20	; 32
    a782:	19 f0       	breq	.+6      	; 0xa78a <isspace+0x10>
    a784:	89 50       	subi	r24, 0x09	; 9
    a786:	85 50       	subi	r24, 0x05	; 5
    a788:	c8 f7       	brcc	.-14     	; 0xa77c <isspace+0x2>
    a78a:	08 95       	ret

0000a78c <strncasecmp_P>:
    a78c:	fb 01       	movw	r30, r22
    a78e:	dc 01       	movw	r26, r24
    a790:	41 50       	subi	r20, 0x01	; 1
    a792:	50 40       	sbci	r21, 0x00	; 0
    a794:	88 f0       	brcs	.+34     	; 0xa7b8 <strncasecmp_P+0x2c>
    a796:	8d 91       	ld	r24, X+
    a798:	81 34       	cpi	r24, 0x41	; 65
    a79a:	1c f0       	brlt	.+6      	; 0xa7a2 <strncasecmp_P+0x16>
    a79c:	8b 35       	cpi	r24, 0x5B	; 91
    a79e:	0c f4       	brge	.+2      	; 0xa7a2 <strncasecmp_P+0x16>
    a7a0:	80 5e       	subi	r24, 0xE0	; 224
    a7a2:	65 91       	lpm	r22, Z+
    a7a4:	61 34       	cpi	r22, 0x41	; 65
    a7a6:	1c f0       	brlt	.+6      	; 0xa7ae <strncasecmp_P+0x22>
    a7a8:	6b 35       	cpi	r22, 0x5B	; 91
    a7aa:	0c f4       	brge	.+2      	; 0xa7ae <strncasecmp_P+0x22>
    a7ac:	60 5e       	subi	r22, 0xE0	; 224
    a7ae:	86 1b       	sub	r24, r22
    a7b0:	61 11       	cpse	r22, r1
    a7b2:	71 f3       	breq	.-36     	; 0xa790 <strncasecmp_P+0x4>
    a7b4:	99 0b       	sbc	r25, r25
    a7b6:	08 95       	ret
    a7b8:	88 1b       	sub	r24, r24
    a7ba:	fc cf       	rjmp	.-8      	; 0xa7b4 <strncasecmp_P+0x28>

0000a7bc <strnlen_P>:
    a7bc:	fc 01       	movw	r30, r24
    a7be:	05 90       	lpm	r0, Z+
    a7c0:	61 50       	subi	r22, 0x01	; 1
    a7c2:	70 40       	sbci	r23, 0x00	; 0
    a7c4:	01 10       	cpse	r0, r1
    a7c6:	d8 f7       	brcc	.-10     	; 0xa7be <strnlen_P+0x2>
    a7c8:	80 95       	com	r24
    a7ca:	90 95       	com	r25
    a7cc:	8e 0f       	add	r24, r30
    a7ce:	9f 1f       	adc	r25, r31
    a7d0:	08 95       	ret

0000a7d2 <strnlen>:
    a7d2:	fc 01       	movw	r30, r24
    a7d4:	61 50       	subi	r22, 0x01	; 1
    a7d6:	70 40       	sbci	r23, 0x00	; 0
    a7d8:	01 90       	ld	r0, Z+
    a7da:	01 10       	cpse	r0, r1
    a7dc:	d8 f7       	brcc	.-10     	; 0xa7d4 <strnlen+0x2>
    a7de:	80 95       	com	r24
    a7e0:	90 95       	com	r25
    a7e2:	8e 0f       	add	r24, r30
    a7e4:	9f 1f       	adc	r25, r31
    a7e6:	08 95       	ret

0000a7e8 <fputc>:
    a7e8:	0f 93       	push	r16
    a7ea:	1f 93       	push	r17
    a7ec:	cf 93       	push	r28
    a7ee:	df 93       	push	r29
    a7f0:	fb 01       	movw	r30, r22
    a7f2:	23 81       	ldd	r18, Z+3	; 0x03
    a7f4:	21 fd       	sbrc	r18, 1
    a7f6:	03 c0       	rjmp	.+6      	; 0xa7fe <fputc+0x16>
    a7f8:	8f ef       	ldi	r24, 0xFF	; 255
    a7fa:	9f ef       	ldi	r25, 0xFF	; 255
    a7fc:	2c c0       	rjmp	.+88     	; 0xa856 <fputc+0x6e>
    a7fe:	22 ff       	sbrs	r18, 2
    a800:	16 c0       	rjmp	.+44     	; 0xa82e <fputc+0x46>
    a802:	46 81       	ldd	r20, Z+6	; 0x06
    a804:	57 81       	ldd	r21, Z+7	; 0x07
    a806:	24 81       	ldd	r18, Z+4	; 0x04
    a808:	35 81       	ldd	r19, Z+5	; 0x05
    a80a:	42 17       	cp	r20, r18
    a80c:	53 07       	cpc	r21, r19
    a80e:	44 f4       	brge	.+16     	; 0xa820 <fputc+0x38>
    a810:	a0 81       	ld	r26, Z
    a812:	b1 81       	ldd	r27, Z+1	; 0x01
    a814:	9d 01       	movw	r18, r26
    a816:	2f 5f       	subi	r18, 0xFF	; 255
    a818:	3f 4f       	sbci	r19, 0xFF	; 255
    a81a:	20 83       	st	Z, r18
    a81c:	31 83       	std	Z+1, r19	; 0x01
    a81e:	8c 93       	st	X, r24
    a820:	26 81       	ldd	r18, Z+6	; 0x06
    a822:	37 81       	ldd	r19, Z+7	; 0x07
    a824:	2f 5f       	subi	r18, 0xFF	; 255
    a826:	3f 4f       	sbci	r19, 0xFF	; 255
    a828:	26 83       	std	Z+6, r18	; 0x06
    a82a:	37 83       	std	Z+7, r19	; 0x07
    a82c:	14 c0       	rjmp	.+40     	; 0xa856 <fputc+0x6e>
    a82e:	8b 01       	movw	r16, r22
    a830:	ec 01       	movw	r28, r24
    a832:	fb 01       	movw	r30, r22
    a834:	00 84       	ldd	r0, Z+8	; 0x08
    a836:	f1 85       	ldd	r31, Z+9	; 0x09
    a838:	e0 2d       	mov	r30, r0
    a83a:	09 95       	icall
    a83c:	89 2b       	or	r24, r25
    a83e:	e1 f6       	brne	.-72     	; 0xa7f8 <fputc+0x10>
    a840:	d8 01       	movw	r26, r16
    a842:	16 96       	adiw	r26, 0x06	; 6
    a844:	8d 91       	ld	r24, X+
    a846:	9c 91       	ld	r25, X
    a848:	17 97       	sbiw	r26, 0x07	; 7
    a84a:	01 96       	adiw	r24, 0x01	; 1
    a84c:	16 96       	adiw	r26, 0x06	; 6
    a84e:	8d 93       	st	X+, r24
    a850:	9c 93       	st	X, r25
    a852:	17 97       	sbiw	r26, 0x07	; 7
    a854:	ce 01       	movw	r24, r28
    a856:	df 91       	pop	r29
    a858:	cf 91       	pop	r28
    a85a:	1f 91       	pop	r17
    a85c:	0f 91       	pop	r16
    a85e:	08 95       	ret

0000a860 <__ultoa_invert>:
    a860:	fa 01       	movw	r30, r20
    a862:	aa 27       	eor	r26, r26
    a864:	28 30       	cpi	r18, 0x08	; 8
    a866:	51 f1       	breq	.+84     	; 0xa8bc <__ultoa_invert+0x5c>
    a868:	20 31       	cpi	r18, 0x10	; 16
    a86a:	81 f1       	breq	.+96     	; 0xa8cc <__ultoa_invert+0x6c>
    a86c:	e8 94       	clt
    a86e:	6f 93       	push	r22
    a870:	6e 7f       	andi	r22, 0xFE	; 254
    a872:	6e 5f       	subi	r22, 0xFE	; 254
    a874:	7f 4f       	sbci	r23, 0xFF	; 255
    a876:	8f 4f       	sbci	r24, 0xFF	; 255
    a878:	9f 4f       	sbci	r25, 0xFF	; 255
    a87a:	af 4f       	sbci	r26, 0xFF	; 255
    a87c:	b1 e0       	ldi	r27, 0x01	; 1
    a87e:	3e d0       	rcall	.+124    	; 0xa8fc <__ultoa_invert+0x9c>
    a880:	b4 e0       	ldi	r27, 0x04	; 4
    a882:	3c d0       	rcall	.+120    	; 0xa8fc <__ultoa_invert+0x9c>
    a884:	67 0f       	add	r22, r23
    a886:	78 1f       	adc	r23, r24
    a888:	89 1f       	adc	r24, r25
    a88a:	9a 1f       	adc	r25, r26
    a88c:	a1 1d       	adc	r26, r1
    a88e:	68 0f       	add	r22, r24
    a890:	79 1f       	adc	r23, r25
    a892:	8a 1f       	adc	r24, r26
    a894:	91 1d       	adc	r25, r1
    a896:	a1 1d       	adc	r26, r1
    a898:	6a 0f       	add	r22, r26
    a89a:	71 1d       	adc	r23, r1
    a89c:	81 1d       	adc	r24, r1
    a89e:	91 1d       	adc	r25, r1
    a8a0:	a1 1d       	adc	r26, r1
    a8a2:	20 d0       	rcall	.+64     	; 0xa8e4 <__ultoa_invert+0x84>
    a8a4:	09 f4       	brne	.+2      	; 0xa8a8 <__ultoa_invert+0x48>
    a8a6:	68 94       	set
    a8a8:	3f 91       	pop	r19
    a8aa:	2a e0       	ldi	r18, 0x0A	; 10
    a8ac:	26 9f       	mul	r18, r22
    a8ae:	11 24       	eor	r1, r1
    a8b0:	30 19       	sub	r19, r0
    a8b2:	30 5d       	subi	r19, 0xD0	; 208
    a8b4:	31 93       	st	Z+, r19
    a8b6:	de f6       	brtc	.-74     	; 0xa86e <__ultoa_invert+0xe>
    a8b8:	cf 01       	movw	r24, r30
    a8ba:	08 95       	ret
    a8bc:	46 2f       	mov	r20, r22
    a8be:	47 70       	andi	r20, 0x07	; 7
    a8c0:	40 5d       	subi	r20, 0xD0	; 208
    a8c2:	41 93       	st	Z+, r20
    a8c4:	b3 e0       	ldi	r27, 0x03	; 3
    a8c6:	0f d0       	rcall	.+30     	; 0xa8e6 <__ultoa_invert+0x86>
    a8c8:	c9 f7       	brne	.-14     	; 0xa8bc <__ultoa_invert+0x5c>
    a8ca:	f6 cf       	rjmp	.-20     	; 0xa8b8 <__ultoa_invert+0x58>
    a8cc:	46 2f       	mov	r20, r22
    a8ce:	4f 70       	andi	r20, 0x0F	; 15
    a8d0:	40 5d       	subi	r20, 0xD0	; 208
    a8d2:	4a 33       	cpi	r20, 0x3A	; 58
    a8d4:	18 f0       	brcs	.+6      	; 0xa8dc <__ultoa_invert+0x7c>
    a8d6:	49 5d       	subi	r20, 0xD9	; 217
    a8d8:	31 fd       	sbrc	r19, 1
    a8da:	40 52       	subi	r20, 0x20	; 32
    a8dc:	41 93       	st	Z+, r20
    a8de:	02 d0       	rcall	.+4      	; 0xa8e4 <__ultoa_invert+0x84>
    a8e0:	a9 f7       	brne	.-22     	; 0xa8cc <__ultoa_invert+0x6c>
    a8e2:	ea cf       	rjmp	.-44     	; 0xa8b8 <__ultoa_invert+0x58>
    a8e4:	b4 e0       	ldi	r27, 0x04	; 4
    a8e6:	a6 95       	lsr	r26
    a8e8:	97 95       	ror	r25
    a8ea:	87 95       	ror	r24
    a8ec:	77 95       	ror	r23
    a8ee:	67 95       	ror	r22
    a8f0:	ba 95       	dec	r27
    a8f2:	c9 f7       	brne	.-14     	; 0xa8e6 <__ultoa_invert+0x86>
    a8f4:	00 97       	sbiw	r24, 0x00	; 0
    a8f6:	61 05       	cpc	r22, r1
    a8f8:	71 05       	cpc	r23, r1
    a8fa:	08 95       	ret
    a8fc:	9b 01       	movw	r18, r22
    a8fe:	ac 01       	movw	r20, r24
    a900:	0a 2e       	mov	r0, r26
    a902:	06 94       	lsr	r0
    a904:	57 95       	ror	r21
    a906:	47 95       	ror	r20
    a908:	37 95       	ror	r19
    a90a:	27 95       	ror	r18
    a90c:	ba 95       	dec	r27
    a90e:	c9 f7       	brne	.-14     	; 0xa902 <__ultoa_invert+0xa2>
    a910:	62 0f       	add	r22, r18
    a912:	73 1f       	adc	r23, r19
    a914:	84 1f       	adc	r24, r20
    a916:	95 1f       	adc	r25, r21
    a918:	a0 1d       	adc	r26, r0
    a91a:	08 95       	ret

0000a91c <__ctype_isfalse>:
    a91c:	99 27       	eor	r25, r25
    a91e:	88 27       	eor	r24, r24

0000a920 <__ctype_istrue>:
    a920:	08 95       	ret

0000a922 <eeprom_read_byte>:
    a922:	03 d0       	rcall	.+6      	; 0xa92a <eeprom_mapen>
    a924:	80 81       	ld	r24, Z
    a926:	99 27       	eor	r25, r25
    a928:	08 95       	ret

0000a92a <eeprom_mapen>:
    a92a:	fc 01       	movw	r30, r24
    a92c:	e0 50       	subi	r30, 0x00	; 0
    a92e:	fc 4e       	sbci	r31, 0xEC	; 236
    a930:	08 95       	ret

0000a932 <eeprom_read_dword>:
    a932:	0e 94 95 54 	call	0xa92a	; 0xa92a <eeprom_mapen>
    a936:	60 81       	ld	r22, Z
    a938:	71 81       	ldd	r23, Z+1	; 0x01
    a93a:	82 81       	ldd	r24, Z+2	; 0x02
    a93c:	93 81       	ldd	r25, Z+3	; 0x03
    a93e:	08 95       	ret

0000a940 <eeprom_read_word>:
    a940:	0e 94 95 54 	call	0xa92a	; 0xa92a <eeprom_mapen>
    a944:	80 81       	ld	r24, Z
    a946:	91 81       	ldd	r25, Z+1	; 0x01
    a948:	08 95       	ret

0000a94a <__divmodqi4>:
    a94a:	87 fb       	bst	r24, 7
    a94c:	08 2e       	mov	r0, r24
    a94e:	06 26       	eor	r0, r22
    a950:	87 fd       	sbrc	r24, 7
    a952:	81 95       	neg	r24
    a954:	67 fd       	sbrc	r22, 7
    a956:	61 95       	neg	r22
    a958:	0e 94 ba 54 	call	0xa974	; 0xa974 <__udivmodqi4>
    a95c:	0e f4       	brtc	.+2      	; 0xa960 <__divmodqi4_1>
    a95e:	91 95       	neg	r25

0000a960 <__divmodqi4_1>:
    a960:	07 fc       	sbrc	r0, 7
    a962:	81 95       	neg	r24

0000a964 <__divmodqi4_exit>:
    a964:	08 95       	ret

0000a966 <__xload_1>:
    a966:	57 fd       	sbrc	r21, 7
    a968:	03 c0       	rjmp	.+6      	; 0xa970 <__xload_1+0xa>
    a96a:	5b bf       	out	0x3b, r21	; 59
    a96c:	67 91       	elpm	r22, Z+
    a96e:	08 95       	ret
    a970:	60 81       	ld	r22, Z
    a972:	08 95       	ret

0000a974 <__udivmodqi4>:
    a974:	99 1b       	sub	r25, r25
    a976:	79 e0       	ldi	r23, 0x09	; 9
    a978:	04 c0       	rjmp	.+8      	; 0xa982 <__udivmodqi4_ep>

0000a97a <__udivmodqi4_loop>:
    a97a:	99 1f       	adc	r25, r25
    a97c:	96 17       	cp	r25, r22
    a97e:	08 f0       	brcs	.+2      	; 0xa982 <__udivmodqi4_ep>
    a980:	96 1b       	sub	r25, r22

0000a982 <__udivmodqi4_ep>:
    a982:	88 1f       	adc	r24, r24
    a984:	7a 95       	dec	r23
    a986:	c9 f7       	brne	.-14     	; 0xa97a <__udivmodqi4_loop>
    a988:	80 95       	com	r24
    a98a:	08 95       	ret

0000a98c <__do_global_dtors>:
    a98c:	11 e0       	ldi	r17, 0x01	; 1
    a98e:	ce ea       	ldi	r28, 0xAE	; 174
    a990:	d1 e0       	ldi	r29, 0x01	; 1
    a992:	04 c0       	rjmp	.+8      	; 0xa99c <__do_global_dtors+0x10>
    a994:	fe 01       	movw	r30, r28
    a996:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <__tablejump2__>
    a99a:	21 96       	adiw	r28, 0x01	; 1
    a99c:	c0 3b       	cpi	r28, 0xB0	; 176
    a99e:	d1 07       	cpc	r29, r17
    a9a0:	c9 f7       	brne	.-14     	; 0xa994 <__do_global_dtors+0x8>
    a9a2:	f8 94       	cli

0000a9a4 <__stop_program>:
    a9a4:	ff cf       	rjmp	.-2      	; 0xa9a4 <__stop_program>
