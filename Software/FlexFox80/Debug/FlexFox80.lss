
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00804000  000016ec  000017a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ec  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  00804026  00804026  000017c6  2**0
                  ALLOC
  3 .eeprom       0000001f  00810000  00810000  000017c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004f8  00000000  00000000  00001858  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000971a  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000433a  00000000  00000000  0000b46a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e8f  00000000  00000000  0000f7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e08  00000000  00000000  00013634  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003ba2  00000000  00000000  0001443c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000044b5  00000000  00000000  00017fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004c8  00000000  00000000  0001c493  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_12>
      34:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__vector_13>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      68:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      6c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      78:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_30>
      7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_31>
      80:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_32>
      84:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      8c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      90:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      94:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      98:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      9c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a4:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_41>
      a8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      ac:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      bc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      cc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      dc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e8:	dc 06       	cpc	r13, r28
      ea:	a0 06       	cpc	r10, r16
      ec:	cc 06       	cpc	r12, r28
      ee:	e4 06       	cpc	r14, r20
      f0:	d0 06       	cpc	r13, r16
      f2:	e4 06       	cpc	r14, r20
      f4:	b0 06       	cpc	r11, r16
      f6:	9c 06       	cpc	r9, r28
      f8:	a8 06       	cpc	r10, r24
      fa:	ac 06       	cpc	r10, r28
      fc:	e4 06       	cpc	r14, r20
      fe:	c0 06       	cpc	r12, r16
     100:	94 06       	cpc	r9, r20
     102:	c4 06       	cpc	r12, r20
     104:	90 06       	cpc	r9, r16
     106:	a4 06       	cpc	r10, r20
     108:	68 06       	cpc	r6, r24
     10a:	6c 06       	cpc	r6, r28
     10c:	70 06       	cpc	r7, r16
     10e:	74 06       	cpc	r7, r20
     110:	78 06       	cpc	r7, r24
     112:	7c 06       	cpc	r7, r28
     114:	80 06       	cpc	r8, r16
     116:	84 06       	cpc	r8, r20
     118:	88 06       	cpc	r8, r24
     11a:	8c 06       	cpc	r8, r28
     11c:	b4 06       	cpc	r11, r20
     11e:	b8 06       	cpc	r11, r24
     120:	e0 06       	cpc	r14, r16
     122:	bc 06       	cpc	r11, r28
     124:	e4 06       	cpc	r14, r20
     126:	98 06       	cpc	r9, r24
     128:	d4 06       	cpc	r13, r20
     12a:	00 06       	cpc	r0, r16
     12c:	04 06       	cpc	r0, r20
     12e:	08 06       	cpc	r0, r24
     130:	0c 06       	cpc	r0, r28
     132:	10 06       	cpc	r1, r16
     134:	14 06       	cpc	r1, r20
     136:	18 06       	cpc	r1, r24
     138:	1c 06       	cpc	r1, r28
     13a:	20 06       	cpc	r2, r16
     13c:	24 06       	cpc	r2, r20
     13e:	28 06       	cpc	r2, r24
     140:	2c 06       	cpc	r2, r28
     142:	30 06       	cpc	r3, r16
     144:	34 06       	cpc	r3, r20
     146:	38 06       	cpc	r3, r24
     148:	3c 06       	cpc	r3, r28
     14a:	40 06       	cpc	r4, r16
     14c:	44 06       	cpc	r4, r20
     14e:	48 06       	cpc	r4, r24
     150:	4c 06       	cpc	r4, r28
     152:	50 06       	cpc	r5, r16
     154:	54 06       	cpc	r5, r20
     156:	58 06       	cpc	r5, r24
     158:	5c 06       	cpc	r5, r28
     15a:	60 06       	cpc	r6, r16
     15c:	64 06       	cpc	r6, r20
     15e:	e4 06       	cpc	r14, r20
     160:	e4 06       	cpc	r14, r20
     162:	e4 06       	cpc	r14, r20
     164:	e4 06       	cpc	r14, r20
     166:	c8 06       	cpc	r12, r24
     168:	e4 06       	cpc	r14, r20
     16a:	e4 06       	cpc	r14, r20
     16c:	e4 06       	cpc	r14, r20
     16e:	e4 06       	cpc	r14, r20
     170:	e4 06       	cpc	r14, r20
     172:	e4 06       	cpc	r14, r20
     174:	e4 06       	cpc	r14, r20
     176:	e4 06       	cpc	r14, r20
     178:	e4 06       	cpc	r14, r20
     17a:	e4 06       	cpc	r14, r20
     17c:	e4 06       	cpc	r14, r20
     17e:	e4 06       	cpc	r14, r20
     180:	e4 06       	cpc	r14, r20
     182:	e4 06       	cpc	r14, r20
     184:	e4 06       	cpc	r14, r20
     186:	e4 06       	cpc	r14, r20
     188:	e4 06       	cpc	r14, r20
     18a:	e4 06       	cpc	r14, r20
     18c:	e4 06       	cpc	r14, r20
     18e:	e4 06       	cpc	r14, r20
     190:	e4 06       	cpc	r14, r20
     192:	e4 06       	cpc	r14, r20
     194:	e4 06       	cpc	r14, r20
     196:	e4 06       	cpc	r14, r20
     198:	e4 06       	cpc	r14, r20
     19a:	e4 06       	cpc	r14, r20
     19c:	e4 06       	cpc	r14, r20
     19e:	e4 06       	cpc	r14, r20
     1a0:	d8 06       	cpc	r13, r24

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	df e7       	ldi	r29, 0x7F	; 127
     1ac:	de bf       	out	0x3e, r29	; 62

000001ae <__do_copy_data>:
     1ae:	10 e4       	ldi	r17, 0x40	; 64
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b0 e4       	ldi	r27, 0x40	; 64
     1b4:	ec ee       	ldi	r30, 0xEC	; 236
     1b6:	f6 e1       	ldi	r31, 0x16	; 22
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	0b bf       	out	0x3b, r16	; 59
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x14>
     1be:	07 90       	elpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a6 32       	cpi	r26, 0x26	; 38
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0x10>

000001c8 <__do_clear_bss>:
     1c8:	21 e4       	ldi	r18, 0x41	; 65
     1ca:	a6 e2       	ldi	r26, 0x26	; 38
     1cc:	b0 e4       	ldi	r27, 0x40	; 64
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a4 3e       	cpi	r26, 0xE4	; 228
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 16 04 	call	0x82c	; 0x82c <main>
     1dc:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1e4:	0e 94 a3 04 	call	0x946	; 0x946 <system_init>
     1e8:	08 95       	ret

000001ea <__vector_30>:
#include "include/usart_basic.h"
#include "include/morse.h"


ISR(TCB2_INT_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     1f6:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     1fa:	80 ff       	sbrs	r24, 0
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     204:	8f 91       	pop	r24
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0b b6       	in	r0, 0x3b	; 59
     21c:	0f 92       	push	r0
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	2f 93       	push	r18
     224:	3f 93       	push	r19
     226:	4f 93       	push	r20
     228:	5f 93       	push	r21
     22a:	6f 93       	push	r22
     22c:	7f 93       	push	r23
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	af 93       	push	r26
     234:	bf 93       	push	r27
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static uint32_t msg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = USART1_get_data();
     23e:	0e 94 57 09 	call	0x12ae	; 0x12ae <USART1_get_data>
     242:	18 2f       	mov	r17, r24

	if(!buff)
     244:	80 91 31 40 	lds	r24, 0x4031	; 0x804031 <buff.4937>
     248:	90 91 32 40 	lds	r25, 0x4032	; 0x804032 <buff.4937+0x1>
     24c:	89 2b       	or	r24, r25
     24e:	31 f4       	brne	.+12     	; 0x25c <__vector_31+0x4c>
	{
		buff = nextEmptyRxBuffer();
     250:	0e 94 8b 05 	call	0xb16	; 0xb16 <nextEmptyRxBuffer>
     254:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <buff.4937>
     258:	90 93 32 40 	sts	0x4032, r25	; 0x804032 <buff.4937+0x1>
	}

	if(buff)
     25c:	c0 91 31 40 	lds	r28, 0x4031	; 0x804031 <buff.4937>
     260:	d0 91 32 40 	lds	r29, 0x4032	; 0x804032 <buff.4937+0x1>
     264:	20 97       	sbiw	r28, 0x00	; 0
     266:	09 f4       	brne	.+2      	; 0x26a <__vector_31+0x5a>
     268:	e3 c0       	rjmp	.+454    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		rx_char = toupper(rx_char);
     26a:	81 2f       	mov	r24, r17
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <toupper>
//		SMCR = 0x00;                                /* exit power-down mode */

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
     272:	84 32       	cpi	r24, 0x24	; 36
     274:	11 f0       	breq	.+4      	; 0x27a <__vector_31+0x6a>
     276:	81 32       	cpi	r24, 0x21	; 33
     278:	49 f5       	brne	.+82     	; 0x2cc <__vector_31+0xbc>
		{
			charIndex = 0;
     27a:	10 92 30 40 	sts	0x4030, r1	; 0x804030 <charIndex.4938>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
     27e:	81 32       	cpi	r24, 0x21	; 33
     280:	11 f4       	brne	.+4      	; 0x286 <__vector_31+0x76>
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	01 c0       	rjmp	.+2      	; 0x288 <__vector_31+0x78>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	88 83       	st	Y, r24
			field_len = 0;
     28a:	10 92 2f 40 	sts	0x402F, r1	; 0x80402f <field_len.4940>
			msg_ID = LINKBUS_MSG_UNKNOWN;
     28e:	10 92 2b 40 	sts	0x402B, r1	; 0x80402b <msg_ID.4941>
     292:	10 92 2c 40 	sts	0x402C, r1	; 0x80402c <msg_ID.4941+0x1>
     296:	10 92 2d 40 	sts	0x402D, r1	; 0x80402d <msg_ID.4941+0x2>
     29a:	10 92 2e 40 	sts	0x402E, r1	; 0x80402e <msg_ID.4941+0x3>
			receiving_msg = TRUE;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	80 93 2a 40 	sts	0x402A, r24	; 0x80402a <receiving_msg.4942>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     2a4:	10 92 29 40 	sts	0x4029, r1	; 0x804029 <field_index.4939>
     2a8:	0a c0       	rjmp	.+20     	; 0x2be <__vector_31+0xae>
			{
				buff->fields[field_index][0] = '\0';
     2aa:	fe 01       	movw	r30, r28
     2ac:	05 e1       	ldi	r16, 0x15	; 21
     2ae:	80 9f       	mul	r24, r16
     2b0:	e0 0d       	add	r30, r0
     2b2:	f1 1d       	adc	r31, r1
     2b4:	11 24       	eor	r1, r1
     2b6:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			msg_ID = LINKBUS_MSG_UNKNOWN;
			receiving_msg = TRUE;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     2b8:	8f 5f       	subi	r24, 0xFF	; 255
     2ba:	80 93 29 40 	sts	0x4029, r24	; 0x804029 <field_index.4939>
     2be:	80 91 29 40 	lds	r24, 0x4029	; 0x804029 <field_index.4939>
     2c2:	83 30       	cpi	r24, 0x03	; 3
     2c4:	90 f3       	brcs	.-28     	; 0x2aa <__vector_31+0x9a>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
     2c6:	10 92 29 40 	sts	0x4029, r1	; 0x804029 <field_index.4939>
     2ca:	a7 c0       	rjmp	.+334    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}
		else if(receiving_msg)
     2cc:	90 91 2a 40 	lds	r25, 0x402A	; 0x80402a <receiving_msg.4942>
     2d0:	99 23       	and	r25, r25
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <__vector_31+0xc6>
     2d4:	8b c0       	rjmp	.+278    	; 0x3ec <__vector_31+0x1dc>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
     2d6:	8c 32       	cpi	r24, 0x2C	; 44
     2d8:	29 f0       	breq	.+10     	; 0x2e4 <__vector_31+0xd4>
     2da:	8b 33       	cpi	r24, 0x3B	; 59
     2dc:	19 f0       	breq	.+6      	; 0x2e4 <__vector_31+0xd4>
     2de:	8f 33       	cpi	r24, 0x3F	; 63
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_31+0xd4>
     2e2:	42 c0       	rjmp	.+132    	; 0x368 <__vector_31+0x158>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
     2e4:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <field_index.4939>
     2e8:	99 23       	and	r25, r25
     2ea:	89 f0       	breq	.+34     	; 0x30e <__vector_31+0xfe>
				{
					buff->fields[field_index - 1][field_len] = 0;
     2ec:	29 2f       	mov	r18, r25
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	31 09       	sbc	r19, r1
     2f4:	40 91 2f 40 	lds	r20, 0x402F	; 0x80402f <field_len.4940>
     2f8:	55 e1       	ldi	r21, 0x15	; 21
     2fa:	52 9f       	mul	r21, r18
     2fc:	f0 01       	movw	r30, r0
     2fe:	53 9f       	mul	r21, r19
     300:	f0 0d       	add	r31, r0
     302:	11 24       	eor	r1, r1
     304:	ec 0f       	add	r30, r28
     306:	fd 1f       	adc	r31, r29
     308:	e4 0f       	add	r30, r20
     30a:	f1 1d       	adc	r31, r1
     30c:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
     30e:	9f 5f       	subi	r25, 0xFF	; 255
     310:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <field_index.4939>
				field_len = 0;
     314:	10 92 2f 40 	sts	0x402F, r1	; 0x80402f <field_len.4940>

				if(rx_char == ';')
     318:	8b 33       	cpi	r24, 0x3B	; 59
     31a:	69 f4       	brne	.+26     	; 0x336 <__vector_31+0x126>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     31c:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <charIndex.4938>
     320:	84 30       	cpi	r24, 0x04	; 4
     322:	30 f0       	brcs	.+12     	; 0x330 <__vector_31+0x120>
					{
						buff->id = (LBMessageID)msg_ID;
     324:	80 91 2b 40 	lds	r24, 0x402B	; 0x80402b <msg_ID.4941>
     328:	90 91 2c 40 	lds	r25, 0x402C	; 0x80402c <msg_ID.4941+0x1>
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     330:	10 92 2a 40 	sts	0x402A, r1	; 0x80402a <receiving_msg.4942>
     334:	10 c0       	rjmp	.+32     	; 0x356 <__vector_31+0x146>
				}
				else if(rx_char == '?')
     336:	8f 33       	cpi	r24, 0x3F	; 63
     338:	71 f4       	brne	.+28     	; 0x356 <__vector_31+0x146>
				{
					buff->type = LINKBUS_MSG_QUERY;
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	88 83       	st	Y, r24
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     33e:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <charIndex.4938>
     342:	84 30       	cpi	r24, 0x04	; 4
     344:	30 f0       	brcs	.+12     	; 0x352 <__vector_31+0x142>
					{
						buff->id = msg_ID;
     346:	80 91 2b 40 	lds	r24, 0x402B	; 0x80402b <msg_ID.4941>
     34a:	90 91 2c 40 	lds	r25, 0x402C	; 0x80402c <msg_ID.4941+0x1>
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     352:	10 92 2a 40 	sts	0x402A, r1	; 0x80402a <receiving_msg.4942>
				}

				if(!receiving_msg)
     356:	80 91 2a 40 	lds	r24, 0x402A	; 0x80402a <receiving_msg.4942>
     35a:	81 11       	cpse	r24, r1
     35c:	5e c0       	rjmp	.+188    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				{
					buff = 0;
     35e:	10 92 31 40 	sts	0x4031, r1	; 0x804031 <buff.4937>
     362:	10 92 32 40 	sts	0x4032, r1	; 0x804032 <buff.4937+0x1>
     366:	59 c0       	rjmp	.+178    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
     368:	20 91 29 40 	lds	r18, 0x4029	; 0x804029 <field_index.4939>
     36c:	21 11       	cpse	r18, r1
     36e:	29 c0       	rjmp	.+82     	; 0x3c2 <__vector_31+0x1b2>
				{
					msg_ID = msg_ID * 10 + rx_char;
     370:	40 91 2b 40 	lds	r20, 0x402B	; 0x80402b <msg_ID.4941>
     374:	50 91 2c 40 	lds	r21, 0x402C	; 0x80402c <msg_ID.4941+0x1>
     378:	60 91 2d 40 	lds	r22, 0x402D	; 0x80402d <msg_ID.4941+0x2>
     37c:	70 91 2e 40 	lds	r23, 0x402E	; 0x80402e <msg_ID.4941+0x3>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	66 1f       	adc	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	8a 01       	movw	r16, r20
     38a:	9b 01       	movw	r18, r22
     38c:	00 0f       	add	r16, r16
     38e:	11 1f       	adc	r17, r17
     390:	22 1f       	adc	r18, r18
     392:	33 1f       	adc	r19, r19
     394:	00 0f       	add	r16, r16
     396:	11 1f       	adc	r17, r17
     398:	22 1f       	adc	r18, r18
     39a:	33 1f       	adc	r19, r19
     39c:	40 0f       	add	r20, r16
     39e:	51 1f       	adc	r21, r17
     3a0:	62 1f       	adc	r22, r18
     3a2:	73 1f       	adc	r23, r19
     3a4:	8a 01       	movw	r16, r20
     3a6:	9b 01       	movw	r18, r22
     3a8:	08 0f       	add	r16, r24
     3aa:	11 1d       	adc	r17, r1
     3ac:	21 1d       	adc	r18, r1
     3ae:	31 1d       	adc	r19, r1
     3b0:	00 93 2b 40 	sts	0x402B, r16	; 0x80402b <msg_ID.4941>
     3b4:	10 93 2c 40 	sts	0x402C, r17	; 0x80402c <msg_ID.4941+0x1>
     3b8:	20 93 2d 40 	sts	0x402D, r18	; 0x80402d <msg_ID.4941+0x2>
     3bc:	30 93 2e 40 	sts	0x402E, r19	; 0x80402e <msg_ID.4941+0x3>
     3c0:	2c c0       	rjmp	.+88     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	31 09       	sbc	r19, r1
     3c8:	90 91 2f 40 	lds	r25, 0x402F	; 0x80402f <field_len.4940>
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	49 0f       	add	r20, r25
     3d0:	40 93 2f 40 	sts	0x402F, r20	; 0x80402f <field_len.4940>
     3d4:	65 e1       	ldi	r22, 0x15	; 21
     3d6:	62 9f       	mul	r22, r18
     3d8:	a0 01       	movw	r20, r0
     3da:	63 9f       	mul	r22, r19
     3dc:	50 0d       	add	r21, r0
     3de:	11 24       	eor	r1, r1
     3e0:	c4 0f       	add	r28, r20
     3e2:	d5 1f       	adc	r29, r21
     3e4:	c9 0f       	add	r28, r25
     3e6:	d1 1d       	adc	r29, r1
     3e8:	8b 83       	std	Y+3, r24	; 0x03
     3ea:	17 c0       	rjmp	.+46     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     3ec:	8d 30       	cpi	r24, 0x0D	; 13
     3ee:	a9 f4       	brne	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			buff->id = LINKBUS_MSG_UNKNOWN;
     3f0:	19 82       	std	Y+1, r1	; 0x01
     3f2:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
     3f4:	82 e3       	ldi	r24, 0x32	; 50
     3f6:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <charIndex.4938>
			field_len = 0;
     3fa:	10 92 2f 40 	sts	0x402F, r1	; 0x80402f <field_len.4940>
			msg_ID = LINKBUS_MSG_UNKNOWN;
     3fe:	10 92 2b 40 	sts	0x402B, r1	; 0x80402b <msg_ID.4941>
     402:	10 92 2c 40 	sts	0x402C, r1	; 0x80402c <msg_ID.4941+0x1>
     406:	10 92 2d 40 	sts	0x402D, r1	; 0x80402d <msg_ID.4941+0x2>
     40a:	10 92 2e 40 	sts	0x402E, r1	; 0x80402e <msg_ID.4941+0x3>
			field_index = 0;
     40e:	10 92 29 40 	sts	0x4029, r1	; 0x804029 <field_index.4939>
			buff = NULL;
     412:	10 92 31 40 	sts	0x4031, r1	; 0x804031 <buff.4937>
     416:	10 92 32 40 	sts	0x4032, r1	; 0x804032 <buff.4937+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
     41a:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <charIndex.4938>
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <charIndex.4938>
     424:	82 33       	cpi	r24, 0x32	; 50
     426:	20 f0       	brcs	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		{
			receiving_msg = FALSE;
     428:	10 92 2a 40 	sts	0x402A, r1	; 0x80402a <receiving_msg.4942>
			charIndex = 0;
     42c:	10 92 30 40 	sts	0x4030, r1	; 0x804030 <charIndex.4938>
		}
	}
}
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	bf 91       	pop	r27
     43a:	af 91       	pop	r26
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	7f 91       	pop	r23
     442:	6f 91       	pop	r22
     444:	5f 91       	pop	r21
     446:	4f 91       	pop	r20
     448:	3f 91       	pop	r19
     44a:	2f 91       	pop	r18
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	0f 90       	pop	r0
     452:	0b be       	out	0x3b, r0	; 59
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	0b b6       	in	r0, 0x3b	; 59
     46a:	0f 92       	push	r0
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	4f 93       	push	r20
     472:	5f 93       	push	r21
     474:	6f 93       	push	r22
     476:	7f 93       	push	r23
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
     47c:	af 93       	push	r26
     47e:	bf 93       	push	r27
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
     484:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <buff.4952>
     488:	90 91 28 40 	lds	r25, 0x4028	; 0x804028 <buff.4952+0x1>
     48c:	89 2b       	or	r24, r25
     48e:	31 f4       	brne	.+12     	; 0x49c <__vector_32+0x3e>
	{
		buff = nextFullTxBuffer();
     490:	0e 94 5f 05 	call	0xabe	; 0xabe <nextFullTxBuffer>
     494:	80 93 27 40 	sts	0x4027, r24	; 0x804027 <buff.4952>
     498:	90 93 28 40 	sts	0x4028, r25	; 0x804028 <buff.4952+0x1>
	}

	if((*buff)[charIndex])
     49c:	e0 91 27 40 	lds	r30, 0x4027	; 0x804027 <buff.4952>
     4a0:	f0 91 28 40 	lds	r31, 0x4028	; 0x804028 <buff.4952+0x1>
     4a4:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <__data_end>
     4a8:	df 01       	movw	r26, r30
     4aa:	a8 0f       	add	r26, r24
     4ac:	b1 1d       	adc	r27, r1
     4ae:	9c 91       	ld	r25, X
     4b0:	99 23       	and	r25, r25
     4b2:	31 f0       	breq	.+12     	; 0x4c0 <__vector_32+0x62>
	{
		/* Put data into buffer, sends the data */
		USART1.TXDATAL = (*buff)[charIndex++];
     4b4:	8f 5f       	subi	r24, 0xFF	; 255
     4b6:	80 93 26 40 	sts	0x4026, r24	; 0x804026 <__data_end>
     4ba:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     4be:	0d c0       	rjmp	.+26     	; 0x4da <__vector_32+0x7c>
	}
	else
	{
		charIndex = 0;
     4c0:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <__data_end>
		(*buff)[0] = '\0';
     4c4:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
     4c6:	0e 94 5f 05 	call	0xabe	; 0xabe <nextFullTxBuffer>
     4ca:	80 93 27 40 	sts	0x4027, r24	; 0x804027 <buff.4952>
     4ce:	90 93 28 40 	sts	0x4028, r25	; 0x804028 <buff.4952+0x1>
		if(!buff)
     4d2:	89 2b       	or	r24, r25
     4d4:	11 f4       	brne	.+4      	; 0x4da <__vector_32+0x7c>
		{
			linkbus_end_tx();
     4d6:	0e 94 b8 05 	call	0xb70	; 0xb70 <linkbus_end_tx>
		}
	}
}
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0b be       	out	0x3b, r0	; 59
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_41>:
{
	
}

void wdt_init(WDReset resetType)
{
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	2f 93       	push	r18
     50c:	3f 93       	push	r19
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
     512:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     516:	80 ff       	sbrs	r24, 0
     518:	18 c0       	rjmp	.+48     	; 0x54a <__vector_41+0x4a>
     51a:	80 91 76 40 	lds	r24, 0x4076	; 0x804076 <cnt.5647>
     51e:	90 91 77 40 	lds	r25, 0x4077	; 0x804077 <cnt.5647+0x1>
     522:	9c 01       	movw	r18, r24
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	20 93 76 40 	sts	0x4076, r18	; 0x804076 <cnt.5647>
     52c:	30 93 77 40 	sts	0x4077, r19	; 0x804077 <cnt.5647+0x1>
     530:	8b 32       	cpi	r24, 0x2B	; 43
     532:	91 40       	sbci	r25, 0x01	; 1
     534:	39 f4       	brne	.+14     	; 0x544 <__vector_41+0x44>
     536:	10 92 76 40 	sts	0x4076, r1	; 0x804076 <cnt.5647>
     53a:	10 92 77 40 	sts	0x4077, r1	; 0x804077 <cnt.5647+0x1>
     53e:	8a b1       	in	r24, 0x0a	; 10
     540:	80 64       	ori	r24, 0x40	; 64
     542:	8a b9       	out	0x0a, r24	; 10
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti

0000055c <__vector_12>:
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	0b b6       	in	r0, 0x3b	; 59
     568:	0f 92       	push	r0
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	00 d0       	rcall	.+0      	; 0x588 <__vector_12+0x2c>
     588:	1f 92       	push	r1
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     592:	80 ff       	sbrs	r24, 0
     594:	33 c1       	rjmp	.+614    	; 0x7fc <__vector_12+0x2a0>
     596:	80 91 34 40 	lds	r24, 0x4034	; 0x804034 <g_util_tick_countdown>
     59a:	90 91 35 40 	lds	r25, 0x4035	; 0x804035 <g_util_tick_countdown+0x1>
     59e:	89 2b       	or	r24, r25
     5a0:	49 f0       	breq	.+18     	; 0x5b4 <__vector_12+0x58>
     5a2:	80 91 34 40 	lds	r24, 0x4034	; 0x804034 <g_util_tick_countdown>
     5a6:	90 91 35 40 	lds	r25, 0x4035	; 0x804035 <g_util_tick_countdown+0x1>
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <g_util_tick_countdown>
     5b0:	90 93 35 40 	sts	0x4035, r25	; 0x804035 <g_util_tick_countdown+0x1>
     5b4:	80 91 65 40 	lds	r24, 0x4065	; 0x804065 <g_event_enabled>
     5b8:	88 23       	and	r24, r24
     5ba:	09 f4       	brne	.+2      	; 0x5be <__vector_12+0x62>
     5bc:	86 c0       	rjmp	.+268    	; 0x6ca <__vector_12+0x16e>
     5be:	80 91 66 40 	lds	r24, 0x4066	; 0x804066 <g_event_commenced>
     5c2:	88 23       	and	r24, r24
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <__vector_12+0x6c>
     5c6:	81 c0       	rjmp	.+258    	; 0x6ca <__vector_12+0x16e>
     5c8:	80 91 37 40 	lds	r24, 0x4037	; 0x804037 <g_on_the_air>
     5cc:	90 91 38 40 	lds	r25, 0x4038	; 0x804038 <g_on_the_air+0x1>
     5d0:	a0 91 39 40 	lds	r26, 0x4039	; 0x804039 <g_on_the_air+0x2>
     5d4:	b0 91 3a 40 	lds	r27, 0x403A	; 0x80403a <g_on_the_air+0x3>
     5d8:	18 16       	cp	r1, r24
     5da:	19 06       	cpc	r1, r25
     5dc:	1a 06       	cpc	r1, r26
     5de:	1b 06       	cpc	r1, r27
     5e0:	0c f0       	brlt	.+2      	; 0x5e4 <__vector_12+0x88>
     5e2:	58 c0       	rjmp	.+176    	; 0x694 <__vector_12+0x138>
     5e4:	80 91 78 40 	lds	r24, 0x4078	; 0x804078 <codeInc.5655>
     5e8:	90 91 79 40 	lds	r25, 0x4079	; 0x804079 <codeInc.5655+0x1>
     5ec:	00 97       	sbiw	r24, 0x00	; 0
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <__vector_12+0x96>
     5f0:	44 c0       	rjmp	.+136    	; 0x67a <__vector_12+0x11e>
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	80 93 78 40 	sts	0x4078, r24	; 0x804078 <codeInc.5655>
     5f8:	90 93 79 40 	sts	0x4079, r25	; 0x804079 <codeInc.5655+0x1>
     5fc:	89 2b       	or	r24, r25
     5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_12+0xa6>
     600:	64 c0       	rjmp	.+200    	; 0x6ca <__vector_12+0x16e>
     602:	ae 01       	movw	r20, r28
     604:	4e 5f       	subi	r20, 0xFE	; 254
     606:	5f 4f       	sbci	r21, 0xFF	; 255
     608:	be 01       	movw	r22, r28
     60a:	6d 5f       	subi	r22, 0xFD	; 253
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <makeMorse>
     616:	80 93 7a 40 	sts	0x407A, r24	; 0x80407a <key.5658>
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
     61c:	81 11       	cpse	r24, r1
     61e:	25 c0       	rjmp	.+74     	; 0x66a <__vector_12+0x10e>
     620:	8a 81       	ldd	r24, Y+2	; 0x02
     622:	88 23       	and	r24, r24
     624:	11 f1       	breq	.+68     	; 0x66a <__vector_12+0x10e>
     626:	8d ef       	ldi	r24, 0xFD	; 253
     628:	80 93 33 40 	sts	0x4033, r24	; 0x804033 <g_last_status_code>
     62c:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <g_pattern_codespeed>
     630:	0e 94 19 04 	call	0x832	; 0x832 <throttleValue>
     634:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <g_code_throttle>
     638:	90 93 02 40 	sts	0x4002, r25	; 0x804002 <g_code_throttle+0x1>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	8b 83       	std	Y+3, r24	; 0x03
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	be 01       	movw	r22, r28
     646:	6d 5f       	subi	r22, 0xFD	; 253
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	8b e3       	ldi	r24, 0x3B	; 59
     64c:	90 e4       	ldi	r25, 0x40	; 64
     64e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <makeMorse>
     652:	ae 01       	movw	r20, r28
     654:	4e 5f       	subi	r20, 0xFE	; 254
     656:	5f 4f       	sbci	r21, 0xFF	; 255
     658:	be 01       	movw	r22, r28
     65a:	6d 5f       	subi	r22, 0xFD	; 253
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <makeMorse>
     666:	80 93 7a 40 	sts	0x407A, r24	; 0x80407a <key.5658>
     66a:	80 91 7a 40 	lds	r24, 0x407A	; 0x80407a <key.5658>
     66e:	88 23       	and	r24, r24
     670:	61 f1       	breq	.+88     	; 0x6ca <__vector_12+0x16e>
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	0e 94 1e 09 	call	0x123c	; 0x123c <powerToTransmitter>
     678:	28 c0       	rjmp	.+80     	; 0x6ca <__vector_12+0x16e>
     67a:	80 91 7a 40 	lds	r24, 0x407A	; 0x80407a <key.5658>
     67e:	0e 94 20 09 	call	0x1240	; 0x1240 <keyTransmitter>
     682:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <g_code_throttle>
     686:	90 91 02 40 	lds	r25, 0x4002	; 0x804002 <g_code_throttle+0x1>
     68a:	80 93 78 40 	sts	0x4078, r24	; 0x804078 <codeInc.5655>
     68e:	90 93 79 40 	sts	0x4079, r25	; 0x804079 <codeInc.5655+0x1>
     692:	1b c0       	rjmp	.+54     	; 0x6ca <__vector_12+0x16e>
     694:	80 91 37 40 	lds	r24, 0x4037	; 0x804037 <g_on_the_air>
     698:	90 91 38 40 	lds	r25, 0x4038	; 0x804038 <g_on_the_air+0x1>
     69c:	a0 91 39 40 	lds	r26, 0x4039	; 0x804039 <g_on_the_air+0x2>
     6a0:	b0 91 3a 40 	lds	r27, 0x403A	; 0x80403a <g_on_the_air+0x3>
     6a4:	89 2b       	or	r24, r25
     6a6:	8a 2b       	or	r24, r26
     6a8:	8b 2b       	or	r24, r27
     6aa:	79 f4       	brne	.+30     	; 0x6ca <__vector_12+0x16e>
     6ac:	80 91 7a 40 	lds	r24, 0x407A	; 0x80407a <key.5658>
     6b0:	88 23       	and	r24, r24
     6b2:	59 f0       	breq	.+22     	; 0x6ca <__vector_12+0x16e>
     6b4:	10 92 7a 40 	sts	0x407A, r1	; 0x80407a <key.5658>
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 20 09 	call	0x1240	; 0x1240 <keyTransmitter>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	0e 94 1e 09 	call	0x123c	; 0x123c <powerToTransmitter>
     6c4:	8e ef       	ldi	r24, 0xFE	; 254
     6c6:	80 93 33 40 	sts	0x4033, r24	; 0x804033 <g_last_status_code>
     6ca:	80 91 7b 40 	lds	r24, 0x407B	; 0x80407b <conversionInProcess.5653>
     6ce:	81 11       	cpse	r24, r1
     6d0:	42 c0       	rjmp	.+132    	; 0x756 <__vector_12+0x1fa>
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	80 93 7c 40 	sts	0x407C, r24	; 0x80407c <indexConversionInProcess.5654>
     6d8:	19 82       	std	Y+1, r1	; 0x01
     6da:	25 c0       	rjmp	.+74     	; 0x726 <__vector_12+0x1ca>
     6dc:	e9 81       	ldd	r30, Y+1	; 0x01
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ec 5f       	subi	r30, 0xFC	; 252
     6e6:	ff 4b       	sbci	r31, 0xBF	; 191
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	89 2b       	or	r24, r25
     6ee:	59 f0       	breq	.+22     	; 0x706 <__vector_12+0x1aa>
     6f0:	e9 81       	ldd	r30, Y+1	; 0x01
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	ec 5f       	subi	r30, 0xFC	; 252
     6fa:	ff 4b       	sbci	r31, 0xBF	; 191
     6fc:	80 81       	ld	r24, Z
     6fe:	91 81       	ldd	r25, Z+1	; 0x01
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
     704:	91 83       	std	Z+1, r25	; 0x01
     706:	e9 81       	ldd	r30, Y+1	; 0x01
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ec 5f       	subi	r30, 0xFC	; 252
     710:	ff 4b       	sbci	r31, 0xBF	; 191
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	89 2b       	or	r24, r25
     718:	19 f4       	brne	.+6      	; 0x720 <__vector_12+0x1c4>
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	80 93 7c 40 	sts	0x407C, r24	; 0x80407c <indexConversionInProcess.5654>
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	89 83       	std	Y+1, r24	; 0x01
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	85 30       	cpi	r24, 0x05	; 5
     72a:	c0 f2       	brcs	.-80     	; 0x6dc <__vector_12+0x180>
     72c:	80 91 7c 40 	lds	r24, 0x407C	; 0x80407c <indexConversionInProcess.5654>
     730:	88 23       	and	r24, r24
     732:	0c f4       	brge	.+2      	; 0x736 <__vector_12+0x1da>
     734:	60 c0       	rjmp	.+192    	; 0x7f6 <__vector_12+0x29a>
     736:	88 0f       	add	r24, r24
     738:	99 0b       	sbc	r25, r25
     73a:	fc 01       	movw	r30, r24
     73c:	ef 5e       	subi	r30, 0xEF	; 239
     73e:	ff 4b       	sbci	r31, 0xBF	; 191
     740:	20 81       	ld	r18, Z
     742:	31 81       	ldd	r19, Z+1	; 0x01
     744:	fc 01       	movw	r30, r24
     746:	ec 5f       	subi	r30, 0xFC	; 252
     748:	ff 4b       	sbci	r31, 0xBF	; 191
     74a:	20 83       	st	Z, r18
     74c:	31 83       	std	Z+1, r19	; 0x01
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 7b 40 	sts	0x407B, r24	; 0x80407b <conversionInProcess.5653>
     754:	50 c0       	rjmp	.+160    	; 0x7f6 <__vector_12+0x29a>
     756:	10 92 7d 40 	sts	0x407D, r1	; 0x80407d <holdConversionResult.5664>
     75a:	10 92 7e 40 	sts	0x407E, r1	; 0x80407e <holdConversionResult.5664+0x1>
     75e:	40 91 7c 40 	lds	r20, 0x407C	; 0x80407c <indexConversionInProcess.5654>
     762:	84 2f       	mov	r24, r20
     764:	04 2e       	mov	r0, r20
     766:	00 0c       	add	r0, r0
     768:	99 0b       	sbc	r25, r25
     76a:	fc 01       	movw	r30, r24
     76c:	ee 0f       	add	r30, r30
     76e:	ff 1f       	adc	r31, r31
     770:	e4 59       	subi	r30, 0x94	; 148
     772:	ff 4b       	sbci	r31, 0xBF	; 191
     774:	20 81       	ld	r18, Z
     776:	31 81       	ldd	r19, Z+1	; 0x01
     778:	fc 01       	movw	r30, r24
     77a:	e9 59       	subi	r30, 0x99	; 153
     77c:	ff 4b       	sbci	r31, 0xBF	; 191
     77e:	51 e0       	ldi	r21, 0x01	; 1
     780:	50 83       	st	Z, r21
     782:	41 11       	cpse	r20, r1
     784:	2d c0       	rjmp	.+90     	; 0x7e0 <__vector_12+0x284>
     786:	fc 01       	movw	r30, r24
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	e5 5e       	subi	r30, 0xE5	; 229
     78e:	ff 4b       	sbci	r31, 0xBF	; 191
     790:	40 81       	ld	r20, Z
     792:	51 81       	ldd	r21, Z+1	; 0x01
     794:	42 17       	cp	r20, r18
     796:	53 07       	cpc	r21, r19
     798:	60 f4       	brcc	.+24     	; 0x7b2 <__vector_12+0x256>
     79a:	fc 01       	movw	r30, r24
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ec 5f       	subi	r30, 0xFC	; 252
     7a2:	ff 4b       	sbci	r31, 0xBF	; 191
     7a4:	24 e6       	ldi	r18, 0x64	; 100
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	20 83       	st	Z, r18
     7aa:	31 83       	std	Z+1, r19	; 0x01
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	19 c0       	rjmp	.+50     	; 0x7e4 <__vector_12+0x288>
     7b2:	21 15       	cp	r18, r1
     7b4:	31 05       	cpc	r19, r1
     7b6:	11 f0       	breq	.+4      	; 0x7bc <__vector_12+0x260>
     7b8:	21 50       	subi	r18, 0x01	; 1
     7ba:	31 09       	sbc	r19, r1
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	40 93 36 40 	sts	0x4036, r20	; 0x804036 <g_battery_measurements_active>
     7c2:	24 37       	cpi	r18, 0x74	; 116
     7c4:	44 e0       	ldi	r20, 0x04	; 4
     7c6:	34 07       	cpc	r19, r20
     7c8:	18 f0       	brcs	.+6      	; 0x7d0 <__vector_12+0x274>
     7ca:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <__vector_12+0x288>
     7d0:	2d 38       	cpi	r18, 0x8D	; 141
     7d2:	42 e0       	ldi	r20, 0x02	; 2
     7d4:	34 07       	cpc	r19, r20
     7d6:	30 f0       	brcs	.+12     	; 0x7e4 <__vector_12+0x288>
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	40 93 00 40 	sts	0x4000, r20	; 0x804000 <__DATA_REGION_ORIGIN__>
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <__vector_12+0x288>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	fc 01       	movw	r30, r24
     7ea:	e4 59       	subi	r30, 0x94	; 148
     7ec:	ff 4b       	sbci	r31, 0xBF	; 191
     7ee:	20 83       	st	Z, r18
     7f0:	31 83       	std	Z+1, r19	; 0x01
     7f2:	10 92 7b 40 	sts	0x407B, r1	; 0x80407b <conversionInProcess.5653>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     7fc:	23 96       	adiw	r28, 0x03	; 3
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	bf 91       	pop	r27
     80c:	af 91       	pop	r26
     80e:	9f 91       	pop	r25
     810:	8f 91       	pop	r24
     812:	7f 91       	pop	r23
     814:	6f 91       	pop	r22
     816:	5f 91       	pop	r21
     818:	4f 91       	pop	r20
     81a:	3f 91       	pop	r19
     81c:	2f 91       	pop	r18
     81e:	0f 90       	pop	r0
     820:	0b be       	out	0x3b, r0	; 59
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <main>:
     82c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <atmel_start_init>
     830:	ff cf       	rjmp	.-2      	; 0x830 <main+0x4>

00000832 <throttleValue>:
}

uint16_t throttleValue(uint8_t speed)
{
	return 0;
}
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	08 95       	ret

00000838 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
     838:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	08 95       	ret

00000840 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     840:	44 e2       	ldi	r20, 0x24	; 36
     842:	68 ed       	ldi	r22, 0xD8	; 216
     844:	88 e6       	ldi	r24, 0x68	; 104
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	08 95       	ret

00000850 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     850:	78 94       	sei

	return 0;
}
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	08 95       	ret

00000856 <VREF_init>:



static void VREF_init(void)
{
	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
     856:	81 e8       	ldi	r24, 0x81	; 129
     858:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
     85c:	6a e0       	ldi	r22, 0x0A	; 10
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 60 08 	call	0x10c0	; 0x10c0 <util_delay_ms>
     868:	81 11       	cpse	r24, r1
     86a:	f8 cf       	rjmp	.-16     	; 0x85c <VREF_init+0x6>
}
     86c:	08 95       	ret

0000086e <DAC0_setVal>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
     86e:	28 2f       	mov	r18, r24
     870:	22 95       	swap	r18
     872:	22 0f       	add	r18, r18
     874:	22 0f       	add	r18, r18
     876:	20 7c       	andi	r18, 0xC0	; 192
     878:	e0 ea       	ldi	r30, 0xA0	; 160
     87a:	f6 e0       	ldi	r31, 0x06	; 6
     87c:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
     87e:	96 95       	lsr	r25
     880:	87 95       	ror	r24
     882:	96 95       	lsr	r25
     884:	87 95       	ror	r24
     886:	83 83       	std	Z+3, r24	; 0x03
     888:	08 95       	ret

0000088a <DAC0_init>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
     88a:	0e 94 2b 04 	call	0x856	; 0x856 <VREF_init>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
     88e:	e0 e6       	ldi	r30, 0x60	; 96
     890:	f4 e0       	ldi	r31, 0x04	; 4
     892:	86 89       	ldd	r24, Z+22	; 0x16
     894:	88 7f       	andi	r24, 0xF8	; 248
     896:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     898:	86 89       	ldd	r24, Z+22	; 0x16
     89a:	84 60       	ori	r24, 0x04	; 4
     89c:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
     89e:	86 89       	ldd	r24, Z+22	; 0x16
     8a0:	87 7f       	andi	r24, 0xF7	; 247
     8a2:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
     8a4:	81 ec       	ldi	r24, 0xC1	; 193
     8a6:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 37 04 	call	0x86e	; 0x86e <DAC0_setVal>
     8b2:	08 95       	ret

000008b4 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8b8:	e8 2f       	mov	r30, r24
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	e0 5f       	subi	r30, 0xF0	; 240
     8be:	fb 4f       	sbci	r31, 0xFB	; 251
     8c0:	90 81       	ld	r25, Z
     8c2:	98 60       	ori	r25, 0x08	; 8
     8c4:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     8c6:	8f 5f       	subi	r24, 0xFF	; 255
     8c8:	88 30       	cpi	r24, 0x08	; 8
     8ca:	b0 f3       	brcs	.-20     	; 0x8b8 <mcu_init+0x4>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8d0:	e8 2f       	mov	r30, r24
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e0 5d       	subi	r30, 0xD0	; 208
     8d6:	fb 4f       	sbci	r31, 0xFB	; 251
     8d8:	90 81       	ld	r25, Z
     8da:	98 60       	ori	r25, 0x08	; 8
     8dc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8de:	8f 5f       	subi	r24, 0xFF	; 255
     8e0:	88 30       	cpi	r24, 0x08	; 8
     8e2:	b0 f3       	brcs	.-20     	; 0x8d0 <mcu_init+0x1c>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 c0       	rjmp	.+16     	; 0x8f8 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8e8:	e8 2f       	mov	r30, r24
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	e0 5b       	subi	r30, 0xB0	; 176
     8ee:	fb 4f       	sbci	r31, 0xFB	; 251
     8f0:	90 81       	ld	r25, Z
     8f2:	98 60       	ori	r25, 0x08	; 8
     8f4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	88 30       	cpi	r24, 0x08	; 8
     8fa:	b0 f3       	brcs	.-20     	; 0x8e8 <mcu_init+0x34>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	08 c0       	rjmp	.+16     	; 0x910 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     900:	e8 2f       	mov	r30, r24
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	e0 59       	subi	r30, 0x90	; 144
     906:	fb 4f       	sbci	r31, 0xFB	; 251
     908:	90 81       	ld	r25, Z
     90a:	98 60       	ori	r25, 0x08	; 8
     90c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     90e:	8f 5f       	subi	r24, 0xFF	; 255
     910:	88 30       	cpi	r24, 0x08	; 8
     912:	b0 f3       	brcs	.-20     	; 0x900 <mcu_init+0x4c>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	08 c0       	rjmp	.+16     	; 0x928 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     918:	e8 2f       	mov	r30, r24
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	e0 57       	subi	r30, 0x70	; 112
     91e:	fb 4f       	sbci	r31, 0xFB	; 251
     920:	90 81       	ld	r25, Z
     922:	98 60       	ori	r25, 0x08	; 8
     924:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	88 30       	cpi	r24, 0x08	; 8
     92a:	b0 f3       	brcs	.-20     	; 0x918 <mcu_init+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	08 c0       	rjmp	.+16     	; 0x940 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     930:	e8 2f       	mov	r30, r24
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	e0 55       	subi	r30, 0x50	; 80
     936:	fb 4f       	sbci	r31, 0xFB	; 251
     938:	90 81       	ld	r25, Z
     93a:	98 60       	ori	r25, 0x08	; 8
     93c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	88 30       	cpi	r24, 0x08	; 8
     942:	b0 f3       	brcs	.-20     	; 0x930 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     944:	08 95       	ret

00000946 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     946:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
     94a:	0e 94 20 04 	call	0x840	; 0x840 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
     94e:	0e 94 43 08 	call	0x1086	; 0x1086 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
     952:	0e 94 28 04 	call	0x850	; 0x850 <CPUINT_init>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     956:	89 b1       	in	r24, 0x09	; 9
     958:	8f 7b       	andi	r24, 0xBF	; 191
     95a:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     95c:	88 b1       	in	r24, 0x08	; 8
     95e:	80 64       	ori	r24, 0x40	; 64
     960:	88 b9       	out	0x08, r24	; 8
	    false);

	LED_set_dir(PORT_DIR_OUT);


	SLPCTRL_init();
     962:	0e 94 41 08 	call	0x1082	; 0x1082 <SLPCTRL_init>
	
	DAC0_init();
     966:	0e 94 45 04 	call	0x88a	; 0x88a <DAC0_init>

	CPUINT_init();
     96a:	0e 94 28 04 	call	0x850	; 0x850 <CPUINT_init>

	linkbus_init();
     96e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <linkbus_init>

	BOD_init();
     972:	0e 94 1c 04 	call	0x838	; 0x838 <BOD_init>
     976:	08 95       	ret

00000978 <I2C_1_WaitW>:
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     97e:	90 7c       	andi	r25, 0xC0	; 192
     980:	31 f0       	breq	.+12     	; 0x98e <I2C_1_WaitW+0x16>
     982:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     986:	84 fd       	sbrc	r24, 4
     988:	07 c0       	rjmp	.+14     	; 0x998 <I2C_1_WaitW+0x20>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	08 c0       	rjmp	.+16     	; 0x99e <I2C_1_WaitW+0x26>
     98e:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     992:	9c 70       	andi	r25, 0x0C	; 12
     994:	19 f4       	brne	.+6      	; 0x99c <I2C_1_WaitW+0x24>
     996:	03 c0       	rjmp	.+6      	; 0x99e <I2C_1_WaitW+0x26>
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	01 c0       	rjmp	.+2      	; 0x99e <I2C_1_WaitW+0x26>
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	88 23       	and	r24, r24
     9a0:	61 f3       	breq	.-40     	; 0x97a <I2C_1_WaitW+0x2>
     9a2:	08 95       	ret

000009a4 <I2C_1_WaitR>:
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     9aa:	90 7c       	andi	r25, 0xC0	; 192
     9ac:	29 f4       	brne	.+10     	; 0x9b8 <I2C_1_WaitR+0x14>
     9ae:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     9b2:	9c 70       	andi	r25, 0x0C	; 12
     9b4:	19 f4       	brne	.+6      	; 0x9bc <I2C_1_WaitR+0x18>
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <I2C_1_WaitR+0x1a>
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <I2C_1_WaitR+0x1a>
     9bc:	84 e0       	ldi	r24, 0x04	; 4
     9be:	88 23       	and	r24, r24
     9c0:	91 f3       	breq	.-28     	; 0x9a6 <I2C_1_WaitR+0x2>
     9c2:	08 95       	ret

000009c4 <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t address, uint8_t *pData, uint8_t len)
{
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	8b 01       	movw	r16, r22
     9d0:	d4 2f       	mov	r29, r20
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
     9d2:	8e 7f       	andi	r24, 0xFE	; 254
     9d4:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     9d8:	0e 94 bc 04 	call	0x978	; 0x978 <I2C_1_WaitW>
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	e1 f4       	brne	.+56     	; 0xa18 <I2C_1_SendData+0x54>
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
     9e0:	dd 23       	and	r29, r29
     9e2:	e1 f0       	breq	.+56     	; 0xa1c <I2C_1_SendData+0x58>
     9e4:	01 15       	cp	r16, r1
     9e6:	11 05       	cpc	r17, r1
     9e8:	79 f4       	brne	.+30     	; 0xa08 <I2C_1_SendData+0x44>
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;

	retVal = 0;
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	1a c0       	rjmp	.+52     	; 0xa22 <I2C_1_SendData+0x5e>
	if((len != 0) && (pData != NULL))
	{
		while(len--)
		{
			TWI1.MDATA = *pData;
     9ee:	f8 01       	movw	r30, r16
     9f0:	80 81       	ld	r24, Z
     9f2:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(I2C_1_WaitW() == I2C_ACKED)
     9f6:	0e 94 bc 04 	call	0x978	; 0x978 <I2C_1_WaitW>
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	89 f4       	brne	.+34     	; 0xa20 <I2C_1_SendData+0x5c>
			{
				retVal++;
     9fe:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
     a00:	0f 5f       	subi	r16, 0xFF	; 255
     a02:	1f 4f       	sbci	r17, 0xFF	; 255
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
     a04:	df 2d       	mov	r29, r15
			TWI1.MDATA = *pData;
			if(I2C_1_WaitW() == I2C_ACKED)
			{
				retVal++;
				pData++;
				continue;
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <I2C_1_SendData+0x46>
     a08:	c0 e0       	ldi	r28, 0x00	; 0
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
     a0a:	ff 24       	eor	r15, r15
     a0c:	fa 94       	dec	r15
     a0e:	fd 0e       	add	r15, r29
     a10:	d1 11       	cpse	r29, r1
     a12:	ed cf       	rjmp	.-38     	; 0x9ee <I2C_1_SendData+0x2a>
     a14:	8c 2f       	mov	r24, r28
     a16:	05 c0       	rjmp	.+10     	; 0xa22 <I2C_1_SendData+0x5e>
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <I2C_1_SendData+0x5e>

	retVal = 0;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <I2C_1_SendData+0x5e>
     a20:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	08 95       	ret

00000a2e <I2C_1_GetData>:

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t address, uint8_t *pData, uint8_t len)
{
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	8b 01       	movw	r16, r22
     a3a:	d4 2f       	mov	r29, r20
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
     a3c:	81 60       	ori	r24, 0x01	; 1
     a3e:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     a42:	0e 94 bc 04 	call	0x978	; 0x978 <I2C_1_WaitW>
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	69 f5       	brne	.+90     	; 0xaa4 <I2C_1_GetData+0x76>
	return retVal;
	
	/* if pData[0] contains a register address, send it first */
	if(pData[0])
     a4a:	f8 01       	movw	r30, r16
     a4c:	80 81       	ld	r24, Z
     a4e:	88 23       	and	r24, r24
     a50:	31 f0       	breq	.+12     	; 0xa5e <I2C_1_GetData+0x30>
	{
		TWI1.MDATA = pData[0];
     a52:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
		if(I2C_1_WaitW() != I2C_ACKED)
     a56:	0e 94 bc 04 	call	0x978	; 0x978 <I2C_1_WaitW>
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	29 f5       	brne	.+74     	; 0xaa8 <I2C_1_GetData+0x7a>
			return retVal;
		}
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
     a5e:	dd 23       	and	r29, r29
     a60:	29 f1       	breq	.+74     	; 0xaac <I2C_1_GetData+0x7e>
     a62:	01 15       	cp	r16, r1
     a64:	11 05       	cpc	r17, r1
     a66:	b1 f4       	brne	.+44     	; 0xa94 <I2C_1_GetData+0x66>
		{
			return retVal;
		}
	}

	retVal = 0;
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	23 c0       	rjmp	.+70     	; 0xab2 <I2C_1_GetData+0x84>
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
		{
			if(I2C_1_WaitR() == I2C_READY)
     a6c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <I2C_1_WaitR>
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	f1 f4       	brne	.+60     	; 0xab0 <I2C_1_GetData+0x82>
			{
				*pData = TWI1.MDATA;
     a74:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
     a78:	f8 01       	movw	r30, r16
     a7a:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
     a7c:	f1 10       	cpse	r15, r1
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <I2C_1_GetData+0x56>
     a80:	87 e0       	ldi	r24, 0x07	; 7
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <I2C_1_GetData+0x58>
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
     a8a:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
     a8c:	0f 5f       	subi	r16, 0xFF	; 255
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
     a90:	df 2d       	mov	r29, r15
			{
				*pData = TWI1.MDATA;
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
				retVal++;
				pData++;
				continue;
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <I2C_1_GetData+0x68>
     a94:	c0 e0       	ldi	r28, 0x00	; 0
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
     a96:	ff 24       	eor	r15, r15
     a98:	fa 94       	dec	r15
     a9a:	fd 0e       	add	r15, r29
     a9c:	d1 11       	cpse	r29, r1
     a9e:	e6 cf       	rjmp	.-52     	; 0xa6c <I2C_1_GetData+0x3e>
     aa0:	8c 2f       	mov	r24, r28
     aa2:	07 c0       	rjmp	.+14     	; 0xab2 <I2C_1_GetData+0x84>
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <I2C_1_GetData+0x84>
	if(pData[0])
	{
		TWI1.MDATA = pData[0];
		if(I2C_1_WaitW() != I2C_ACKED)
		{
			return retVal;
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <I2C_1_GetData+0x84>
		}
	}

	retVal = 0;
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <I2C_1_GetData+0x84>
     ab0:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	08 95       	ret

00000abe <nextFullTxBuffer>:
	{
		USART1.CTRLB &= ~(1 << USART_RXEN_bp);
		memset(rx_buffer, 0, sizeof(rx_buffer));
		USART1.CTRLB |= (1 << USART_RXEN_bp);
	}
}
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0a c0       	rjmp	.+20     	; 0xad6 <nextFullTxBuffer+0x18>
     ac2:	9f 5f       	subi	r25, 0xFF	; 255
     ac4:	94 30       	cpi	r25, 0x04	; 4
     ac6:	c0 f4       	brcc	.+48     	; 0xaf8 <nextFullTxBuffer+0x3a>
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	80 93 80 40 	sts	0x4080, r24	; 0x804080 <bufferIndex.5228>
     ace:	84 30       	cpi	r24, 0x04	; 4
     ad0:	10 f0       	brcs	.+4      	; 0xad6 <nextFullTxBuffer+0x18>
     ad2:	10 92 80 40 	sts	0x4080, r1	; 0x804080 <bufferIndex.5228>
     ad6:	80 91 80 40 	lds	r24, 0x4080	; 0x804080 <bufferIndex.5228>
     ada:	28 2f       	mov	r18, r24
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	42 e3       	ldi	r20, 0x32	; 50
     ae0:	42 9f       	mul	r20, r18
     ae2:	f0 01       	movw	r30, r0
     ae4:	43 9f       	mul	r20, r19
     ae6:	f0 0d       	add	r31, r0
     ae8:	11 24       	eor	r1, r1
     aea:	eb 5f       	subi	r30, 0xFB	; 251
     aec:	fe 4b       	sbci	r31, 0xBE	; 190
     aee:	40 81       	ld	r20, Z
     af0:	44 23       	and	r20, r20
     af2:	39 f3       	breq	.-50     	; 0xac2 <nextFullTxBuffer+0x4>
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	01 c0       	rjmp	.+2      	; 0xafa <nextFullTxBuffer+0x3c>
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	88 23       	and	r24, r24
     afc:	49 f0       	breq	.+18     	; 0xb10 <nextFullTxBuffer+0x52>
     afe:	42 e3       	ldi	r20, 0x32	; 50
     b00:	42 9f       	mul	r20, r18
     b02:	c0 01       	movw	r24, r0
     b04:	43 9f       	mul	r20, r19
     b06:	90 0d       	add	r25, r0
     b08:	11 24       	eor	r1, r1
     b0a:	8b 5f       	subi	r24, 0xFB	; 251
     b0c:	9e 4b       	sbci	r25, 0xBE	; 190
     b0e:	08 95       	ret
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	08 95       	ret

00000b16 <nextEmptyRxBuffer>:
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0a c0       	rjmp	.+20     	; 0xb2e <nextEmptyRxBuffer+0x18>
     b1a:	9f 5f       	subi	r25, 0xFF	; 255
     b1c:	92 30       	cpi	r25, 0x02	; 2
     b1e:	c8 f4       	brcc	.+50     	; 0xb52 <nextEmptyRxBuffer+0x3c>
     b20:	8f 5f       	subi	r24, 0xFF	; 255
     b22:	80 93 7f 40 	sts	0x407F, r24	; 0x80407f <bufferIndex.5246>
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	10 f0       	brcs	.+4      	; 0xb2e <nextEmptyRxBuffer+0x18>
     b2a:	10 92 7f 40 	sts	0x407F, r1	; 0x80407f <bufferIndex.5246>
     b2e:	80 91 7f 40 	lds	r24, 0x407F	; 0x80407f <bufferIndex.5246>
     b32:	28 2f       	mov	r18, r24
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	42 e4       	ldi	r20, 0x42	; 66
     b38:	42 9f       	mul	r20, r18
     b3a:	f0 01       	movw	r30, r0
     b3c:	43 9f       	mul	r20, r19
     b3e:	f0 0d       	add	r31, r0
     b40:	11 24       	eor	r1, r1
     b42:	ef 57       	subi	r30, 0x7F	; 127
     b44:	ff 4b       	sbci	r31, 0xBF	; 191
     b46:	41 81       	ldd	r20, Z+1	; 0x01
     b48:	52 81       	ldd	r21, Z+2	; 0x02
     b4a:	45 2b       	or	r20, r21
     b4c:	31 f7       	brne	.-52     	; 0xb1a <nextEmptyRxBuffer+0x4>
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <nextEmptyRxBuffer+0x3e>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	88 23       	and	r24, r24
     b56:	49 f0       	breq	.+18     	; 0xb6a <nextEmptyRxBuffer+0x54>
     b58:	42 e4       	ldi	r20, 0x42	; 66
     b5a:	42 9f       	mul	r20, r18
     b5c:	c0 01       	movw	r24, r0
     b5e:	43 9f       	mul	r20, r19
     b60:	90 0d       	add	r25, r0
     b62:	11 24       	eor	r1, r1
     b64:	8f 57       	subi	r24, 0x7F	; 127
     b66:	9f 4b       	sbci	r25, 0xBF	; 191
     b68:	08 95       	ret
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	08 95       	ret

00000b70 <linkbus_end_tx>:
     b70:	80 91 cd 41 	lds	r24, 0x41CD	; 0x8041cd <linkbus_tx_active>
     b74:	88 23       	and	r24, r24
     b76:	39 f0       	breq	.+14     	; 0xb86 <linkbus_end_tx+0x16>
     b78:	e0 e2       	ldi	r30, 0x20	; 32
     b7a:	f8 e0       	ldi	r31, 0x08	; 8
     b7c:	85 81       	ldd	r24, Z+5	; 0x05
     b7e:	8f 7d       	andi	r24, 0xDF	; 223
     b80:	85 83       	std	Z+5, r24	; 0x05
     b82:	10 92 cd 41 	sts	0x41CD, r1	; 0x8041cd <linkbus_tx_active>
     b86:	08 95       	ret

00000b88 <USART1_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     b88:	28 b1       	in	r18, 0x08	; 8
     b8a:	2d 7f       	andi	r18, 0xFD	; 253
     b8c:	28 b9       	out	0x08, r18	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     b8e:	e1 e5       	ldi	r30, 0x51	; 81
     b90:	f4 e0       	ldi	r31, 0x04	; 4
     b92:	20 81       	ld	r18, Z
     b94:	27 7f       	andi	r18, 0xF7	; 247
     b96:	20 83       	st	Z, r18
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     b98:	29 b1       	in	r18, 0x09	; 9
     b9a:	2e 7f       	andi	r18, 0xFE	; 254
     b9c:	29 b9       	out	0x09, r18	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     b9e:	28 b1       	in	r18, 0x08	; 8
     ba0:	21 60       	ori	r18, 0x01	; 1
     ba2:	28 b9       	out	0x08, r18	; 8
	// <true"> High
	false);

	PC0_set_dir(PORT_DIR_OUT);

	USART1_init(baud);
     ba4:	0e 94 35 09 	call	0x126a	; 0x126a <USART1_init>
     ba8:	08 95       	ret

00000baa <linkbus_init>:
}

void linkbus_init()
{
	memset(rx_buffer, 0, sizeof(rx_buffer));
     baa:	84 e8       	ldi	r24, 0x84	; 132
     bac:	e1 e8       	ldi	r30, 0x81	; 129
     bae:	f0 e4       	ldi	r31, 0x40	; 64
     bb0:	df 01       	movw	r26, r30
     bb2:	1d 92       	st	X+, r1
     bb4:	8a 95       	dec	r24
     bb6:	e9 f7       	brne	.-6      	; 0xbb2 <linkbus_init+0x8>

	for(int bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0a c0       	rjmp	.+20     	; 0xbd2 <linkbus_init+0x28>
	{
		tx_buffer[bufferIndex][0] = '\0';
     bbe:	22 e3       	ldi	r18, 0x32	; 50
     bc0:	28 9f       	mul	r18, r24
     bc2:	f0 01       	movw	r30, r0
     bc4:	29 9f       	mul	r18, r25
     bc6:	f0 0d       	add	r31, r0
     bc8:	11 24       	eor	r1, r1
     bca:	eb 5f       	subi	r30, 0xFB	; 251
     bcc:	fe 4b       	sbci	r31, 0xBE	; 190
     bce:	10 82       	st	Z, r1

void linkbus_init()
{
	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(int bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	84 30       	cpi	r24, 0x04	; 4
     bd4:	91 05       	cpc	r25, r1
     bd6:	9c f3       	brlt	.-26     	; 0xbbe <linkbus_init+0x14>
	{
		tx_buffer[bufferIndex][0] = '\0';
	}

	/*Set baud rate */
	USART1_initialization(BAUD);
     bd8:	60 e8       	ldi	r22, 0x80	; 128
     bda:	75 e2       	ldi	r23, 0x25	; 37
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART1_initialization>
	g_bus_disabled = FALSE;
     be4:	10 92 0e 40 	sts	0x400E, r1	; 0x80400e <g_bus_disabled>
     be8:	08 95       	ret

00000bea <getMorseChar>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	fc 01       	movw	r30, r24
     bee:	b0 97       	sbiw	r30, 0x20	; 32
     bf0:	ed 35       	cpi	r30, 0x5D	; 93
     bf2:	f1 05       	cpc	r31, r1
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <getMorseChar+0xe>
     bf6:	e8 c0       	rjmp	.+464    	; 0xdc8 <getMorseChar+0x1de>
     bf8:	ec 58       	subi	r30, 0x8C	; 140
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     c00:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
     c02:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
     c04:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     c06:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     c08:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
     c0a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     c0c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     c0e:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
     c10:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
     c12:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     c14:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     c16:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     c18:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
     c1a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     c1c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     c1e:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     c20:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
     c22:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
     c24:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
     c26:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
     c28:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
     c2a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     c2c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     c2e:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     c30:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
     c32:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     c34:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     c36:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     c38:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
     c3a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
     c3c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     c3e:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     c40:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
     c42:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
     c44:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
     c46:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
     c48:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
     c4a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     c4c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     c4e:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
     c50:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
     c52:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     c54:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     c56:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     c58:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
     c5a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     c5c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     c5e:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     c60:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
     c62:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
     c64:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     c66:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     c68:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
     c6a:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
     c6c:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     c6e:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     c70:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
     c72:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
     c74:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     c76:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
     c78:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
     c7a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     c7c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     c7e:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
     c80:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
     c82:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     c84:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     c86:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     c88:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
     c8a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     c8c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     c8e:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     c90:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
     c92:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
     c94:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     c96:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     c98:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
     c9a:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
     c9c:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
     c9e:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
     ca0:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
     ca2:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     ca4:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     ca6:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
     ca8:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
     caa:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     cac:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     cae:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
     cb0:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
     cb2:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     cb4:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     cb6:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
     cb8:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
     cba:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     cbc:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     cbe:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
     cc0:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
     cc2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     cc4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     cc6:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     cc8:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
     cca:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     ccc:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     cce:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
     cd0:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
     cd2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
     cd4:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     cd6:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
     cd8:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
     cda:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
     cdc:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     cde:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
     ce0:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
     ce2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     ce4:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     ce6:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
     ce8:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
     cea:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     cec:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     cee:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
     cf0:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
     cf2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     cf4:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     cf6:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     cf8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
     cfa:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
     cfc:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     cfe:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     d00:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
     d02:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     d04:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     d06:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     d08:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
     d0a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     d0c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     d0e:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     d10:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
     d12:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     d14:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     d16:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
     d18:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
     d1a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
     d1c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     d1e:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
     d20:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
     d22:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     d24:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     d26:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
     d28:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
     d2a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     d2c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     d2e:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
     d30:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
     d32:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     d34:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     d36:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
     d38:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
     d3a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     d3c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     d3e:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
     d40:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
     d42:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     d44:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     d46:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
     d48:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
     d4a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     d4c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     d4e:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
     d50:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
     d52:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     d54:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     d56:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
     d58:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
     d5a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     d5c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     d5e:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     d60:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
     d62:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     d64:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     d66:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     d68:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
     d6a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     d6c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     d6e:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
     d70:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
     d72:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
     d74:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
     d76:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
     d78:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
     d7a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     d7c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     d7e:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
     d80:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
     d82:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     d84:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     d86:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
     d88:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
     d8a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     d8c:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     d8e:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
     d90:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
     d92:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     d94:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     d96:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
     d98:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
     d9a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     d9c:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     d9e:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
     da0:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
     da2:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
     da4:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     da6:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
     da8:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
     daa:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     dac:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     dae:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
     db0:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
     db2:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
     db4:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
     db6:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
     db8:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
     dba:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
     dbc:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     dbe:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
     dc0:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
     dc2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
     dc4:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     dc6:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
     dc8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
     dca:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
     dce:	08 95       	ret

00000dd0 <makeMorse>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	b1 f1       	breq	.+108    	; 0xe46 <makeMorse+0x76>
	{
		holdKeyDown = FALSE;
     dda:	10 92 d9 41 	sts	0x41D9, r1	; 0x8041d9 <holdKeyDown.4196>

		if(repeating)
     dde:	61 15       	cp	r22, r1
     de0:	71 05       	cpc	r23, r1
     de2:	21 f0       	breq	.+8      	; 0xdec <makeMorse+0x1c>
		{
			repeat = *repeating;
     de4:	db 01       	movw	r26, r22
     de6:	2c 91       	ld	r18, X
     de8:	20 93 10 40 	sts	0x4010, r18	; 0x804010 <repeat.4188>
		}

		if(*s)
     dec:	fc 01       	movw	r30, r24
     dee:	20 81       	ld	r18, Z
     df0:	22 23       	and	r18, r18
     df2:	d9 f0       	breq	.+54     	; 0xe2a <makeMorse+0x5a>
		{
			str = s;
     df4:	80 93 d7 41 	sts	0x41D7, r24	; 0x8041d7 <str.4186>
     df8:	90 93 d8 41 	sts	0x41D8, r25	; 0x8041d8 <str.4186+0x1>
			c = ' ';
     dfc:	80 e2       	ldi	r24, 0x20	; 32
     dfe:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <c.4187>
			morseInProgress = getMorseChar(*str);
     e02:	82 2f       	mov	r24, r18
     e04:	0e 94 f5 05 	call	0xbea	; 0xbea <getMorseChar>
     e08:	60 93 d4 41 	sts	0x41D4, r22	; 0x8041d4 <morseInProgress.4189>
     e0c:	70 93 d5 41 	sts	0x41D5, r23	; 0x8041d5 <morseInProgress.4189+0x1>
     e10:	80 93 d6 41 	sts	0x41D6, r24	; 0x8041d6 <morseInProgress.4189+0x2>
			charIndex = 0;
     e14:	10 92 d3 41 	sts	0x41D3, r1	; 0x8041d3 <charIndex.4190>
			symbolIndex = 0;
     e18:	10 92 d2 41 	sts	0x41D2, r1	; 0x8041d2 <symbolIndex.4191>
			elementIndex = 0;
     e1c:	10 92 d1 41 	sts	0x41D1, r1	; 0x8041d1 <elementIndex.4192>
			addedSpace = 0;
     e20:	10 92 d0 41 	sts	0x41D0, r1	; 0x8041d0 <addedSpace.4193>
			completedString = FALSE;
     e24:	10 92 cf 41 	sts	0x41CF, r1	; 0x8041cf <completedString.4194>
     e28:	0a c0       	rjmp	.+20     	; 0xe3e <makeMorse+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
     e2a:	10 92 d7 41 	sts	0x41D7, r1	; 0x8041d7 <str.4186>
     e2e:	10 92 d8 41 	sts	0x41D8, r1	; 0x8041d8 <str.4186+0x1>
			completedString = TRUE;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 cf 41 	sts	0x41CF, r24	; 0x8041cf <completedString.4194>
			if(finished)
     e38:	20 97       	sbiw	r28, 0x00	; 0
     e3a:	09 f0       	breq	.+2      	; 0xe3e <makeMorse+0x6e>
			{
				*finished = TRUE;
     e3c:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
     e3e:	10 92 ce 41 	sts	0x41CE, r1	; 0x8041ce <carrierOn.4195>
		return( OFF);
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	bb c0       	rjmp	.+374    	; 0xfbc <makeMorse+0x1ec>
	}
	else if(str)
     e46:	e0 91 d7 41 	lds	r30, 0x41D7	; 0x8041d7 <str.4186>
     e4a:	f0 91 d8 41 	lds	r31, 0x41D8	; 0x8041d8 <str.4186+0x1>
     e4e:	30 97       	sbiw	r30, 0x00	; 0
     e50:	09 f4       	brne	.+2      	; 0xe54 <makeMorse+0x84>
     e52:	a5 c0       	rjmp	.+330    	; 0xf9e <makeMorse+0x1ce>
	{
		if(repeating)
     e54:	61 15       	cp	r22, r1
     e56:	71 05       	cpc	r23, r1
     e58:	21 f0       	breq	.+8      	; 0xe62 <makeMorse+0x92>
		{
			*repeating = repeat;
     e5a:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <repeat.4188>
     e5e:	db 01       	movw	r26, r22
     e60:	8c 93       	st	X, r24
		}

		if(completedString)
     e62:	80 91 cf 41 	lds	r24, 0x41CF	; 0x8041cf <completedString.4194>
     e66:	88 23       	and	r24, r24
     e68:	49 f0       	breq	.+18     	; 0xe7c <makeMorse+0xac>
		{
			if(finished)
     e6a:	20 97       	sbiw	r28, 0x00	; 0
     e6c:	09 f4       	brne	.+2      	; 0xe70 <makeMorse+0xa0>
     e6e:	a3 c0       	rjmp	.+326    	; 0xfb6 <makeMorse+0x1e6>
			{
				*finished = TRUE;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
     e74:	10 92 d9 41 	sts	0x41D9, r1	; 0x8041d9 <holdKeyDown.4196>
			}
			return( OFF);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	a0 c0       	rjmp	.+320    	; 0xfbc <makeMorse+0x1ec>
		}

		if(elementIndex)
     e7c:	80 91 d1 41 	lds	r24, 0x41D1	; 0x8041d1 <elementIndex.4192>
     e80:	88 23       	and	r24, r24
     e82:	21 f0       	breq	.+8      	; 0xe8c <makeMorse+0xbc>
		{
			elementIndex--;
     e84:	81 50       	subi	r24, 0x01	; 1
     e86:	80 93 d1 41 	sts	0x41D1, r24	; 0x8041d1 <elementIndex.4192>
     e8a:	7f c0       	rjmp	.+254    	; 0xf8a <makeMorse+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
     e8c:	80 91 ce 41 	lds	r24, 0x41CE	; 0x8041ce <carrierOn.4195>
     e90:	88 23       	and	r24, r24
     e92:	81 f0       	breq	.+32     	; 0xeb4 <makeMorse+0xe4>
     e94:	80 91 d9 41 	lds	r24, 0x41D9	; 0x8041d9 <holdKeyDown.4196>
     e98:	81 11       	cpse	r24, r1
     e9a:	0c c0       	rjmp	.+24     	; 0xeb4 <makeMorse+0xe4>
		{
			carrierOn = FALSE;
     e9c:	10 92 ce 41 	sts	0x41CE, r1	; 0x8041ce <carrierOn.4195>
			/* wait one element = inter-symbol space */
			if(addedSpace)
     ea0:	80 91 d0 41 	lds	r24, 0x41D0	; 0x8041d0 <addedSpace.4193>
     ea4:	88 23       	and	r24, r24
     ea6:	09 f4       	brne	.+2      	; 0xeaa <makeMorse+0xda>
     ea8:	70 c0       	rjmp	.+224    	; 0xf8a <makeMorse+0x1ba>
			{
				elementIndex = addedSpace;
     eaa:	80 93 d1 41 	sts	0x41D1, r24	; 0x8041d1 <elementIndex.4192>
				addedSpace = 0;
     eae:	10 92 d0 41 	sts	0x41D0, r1	; 0x8041d0 <addedSpace.4193>
     eb2:	6b c0       	rjmp	.+214    	; 0xf8a <makeMorse+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
     eb4:	90 91 d5 41 	lds	r25, 0x41D5	; 0x8041d5 <morseInProgress.4189+0x1>
     eb8:	80 91 d2 41 	lds	r24, 0x41D2	; 0x8041d2 <symbolIndex.4191>
     ebc:	89 17       	cp	r24, r25
     ebe:	90 f1       	brcs	.+100    	; 0xf24 <makeMorse+0x154>
			{
				c = (*(str + ++charIndex));
     ec0:	80 91 d3 41 	lds	r24, 0x41D3	; 0x8041d3 <charIndex.4190>
     ec4:	8f 5f       	subi	r24, 0xFF	; 255
     ec6:	80 93 d3 41 	sts	0x41D3, r24	; 0x8041d3 <charIndex.4190>
     eca:	df 01       	movw	r26, r30
     ecc:	a8 0f       	add	r26, r24
     ece:	b1 1d       	adc	r27, r1
     ed0:	8c 91       	ld	r24, X
     ed2:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <c.4187>

				if(!c)  /* wrap to beginning of text */
     ed6:	81 11       	cpse	r24, r1
     ed8:	19 c0       	rjmp	.+50     	; 0xf0c <makeMorse+0x13c>
				{
					if(repeat)
     eda:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <repeat.4188>
     ede:	88 23       	and	r24, r24
     ee0:	31 f0       	breq	.+12     	; 0xeee <makeMorse+0x11e>
					{
						c = *str;
     ee2:	80 81       	ld	r24, Z
     ee4:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <c.4187>
						charIndex = 0;
     ee8:	10 92 d3 41 	sts	0x41D3, r1	; 0x8041d3 <charIndex.4190>
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <makeMorse+0x13c>
					}
					else
					{
						str = NULL;
     eee:	10 92 d7 41 	sts	0x41D7, r1	; 0x8041d7 <str.4186>
     ef2:	10 92 d8 41 	sts	0x41D8, r1	; 0x8041d8 <str.4186+0x1>
						carrierOn = OFF;
     ef6:	10 92 ce 41 	sts	0x41CE, r1	; 0x8041ce <carrierOn.4195>
						completedString = TRUE;
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	90 93 cf 41 	sts	0x41CF, r25	; 0x8041cf <completedString.4194>
						if(finished)
     f00:	20 97       	sbiw	r28, 0x00	; 0
     f02:	09 f0       	breq	.+2      	; 0xf06 <makeMorse+0x136>
						{
							*finished = TRUE;
     f04:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
     f06:	10 92 d9 41 	sts	0x41D9, r1	; 0x8041d9 <holdKeyDown.4196>
						return( OFF );
     f0a:	58 c0       	rjmp	.+176    	; 0xfbc <makeMorse+0x1ec>
					}
				}

				morseInProgress = getMorseChar(c);
     f0c:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <c.4187>
     f10:	0e 94 f5 05 	call	0xbea	; 0xbea <getMorseChar>
     f14:	60 93 d4 41 	sts	0x41D4, r22	; 0x8041d4 <morseInProgress.4189>
     f18:	70 93 d5 41 	sts	0x41D5, r23	; 0x8041d5 <morseInProgress.4189+0x1>
     f1c:	80 93 d6 41 	sts	0x41D6, r24	; 0x8041d6 <morseInProgress.4189+0x2>
				symbolIndex = 0;
     f20:	10 92 d2 41 	sts	0x41D2, r1	; 0x8041d2 <symbolIndex.4191>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
     f24:	20 91 d4 41 	lds	r18, 0x41D4	; 0x8041d4 <morseInProgress.4189>
     f28:	2d 3f       	cpi	r18, 0xFD	; 253
     f2a:	00 f5       	brcc	.+64     	; 0xf6c <makeMorse+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
     f2c:	40 91 d2 41 	lds	r20, 0x41D2	; 0x8041d2 <symbolIndex.4191>
     f30:	31 e0       	ldi	r19, 0x01	; 1
     f32:	34 0f       	add	r19, r20
     f34:	30 93 d2 41 	sts	0x41D2, r19	; 0x8041d2 <symbolIndex.4191>
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <makeMorse+0x172>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	4a 95       	dec	r20
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <makeMorse+0x16e>
     f46:	82 23       	and	r24, r18

				if(isDah)
     f48:	21 f0       	breq	.+8      	; 0xf52 <makeMorse+0x182>
				{
					elementIndex = 2;
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	80 93 d1 41 	sts	0x41D1, r24	; 0x8041d1 <elementIndex.4192>
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <makeMorse+0x186>
				}
				else
				{
					elementIndex = 0;
     f52:	10 92 d1 41 	sts	0x41D1, r1	; 0x8041d1 <elementIndex.4192>
				}

				carrierOn = TRUE;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 ce 41 	sts	0x41CE, r24	; 0x8041ce <carrierOn.4195>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
     f5c:	80 91 d5 41 	lds	r24, 0x41D5	; 0x8041d5 <morseInProgress.4189+0x1>
     f60:	38 17       	cp	r19, r24
     f62:	98 f0       	brcs	.+38     	; 0xf8a <makeMorse+0x1ba>
				{
					addedSpace = 2;
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	80 93 d0 41 	sts	0x41D0, r24	; 0x8041d0 <addedSpace.4193>
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <makeMorse+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
     f6c:	80 91 d5 41 	lds	r24, 0x41D5	; 0x8041d5 <morseInProgress.4189+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
     f70:	9f ef       	ldi	r25, 0xFF	; 255
     f72:	90 93 d2 41 	sts	0x41D2, r25	; 0x8041d2 <symbolIndex.4191>
				carrierOn = FALSE;
     f76:	10 92 ce 41 	sts	0x41CE, r1	; 0x8041ce <carrierOn.4195>
				if(sym >= 4 )
     f7a:	84 30       	cpi	r24, 0x04	; 4
     f7c:	20 f0       	brcs	.+8      	; 0xf86 <makeMorse+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
     f7e:	84 50       	subi	r24, 0x04	; 4
     f80:	80 93 d1 41 	sts	0x41D1, r24	; 0x8041d1 <elementIndex.4192>
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <makeMorse+0x1ba>
				}
				else
				{
					elementIndex = 0;
     f86:	10 92 d1 41 	sts	0x41D1, r1	; 0x8041d1 <elementIndex.4192>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
     f8a:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <c.4187>
     f8e:	8c 33       	cpi	r24, 0x3C	; 60
     f90:	21 f4       	brne	.+8      	; 0xf9a <makeMorse+0x1ca>
		{
			holdKeyDown = TRUE;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	80 93 d9 41 	sts	0x41D9, r24	; 0x8041d9 <holdKeyDown.4196>
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <makeMorse+0x1ce>
		}
		else
		{
			holdKeyDown = FALSE;
     f9a:	10 92 d9 41 	sts	0x41D9, r1	; 0x8041d9 <holdKeyDown.4196>
		}
	}

	if(finished)
     f9e:	20 97       	sbiw	r28, 0x00	; 0
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <makeMorse+0x1d8>
	{
		*finished = completedString;
     fa2:	80 91 cf 41 	lds	r24, 0x41CF	; 0x8041cf <completedString.4194>
     fa6:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
     fa8:	80 91 d9 41 	lds	r24, 0x41D9	; 0x8041d9 <holdKeyDown.4196>
     fac:	81 11       	cpse	r24, r1
     fae:	05 c0       	rjmp	.+10     	; 0xfba <makeMorse+0x1ea>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
     fb0:	80 91 ce 41 	lds	r24, 0x41CE	; 0x8041ce <carrierOn.4195>
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <makeMorse+0x1ec>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <makeMorse+0x1ec>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
     fba:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     fc2:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     fc4:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     fc6:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     fc8:	40 83       	st	Z, r20
	ret                             // Return to caller
     fca:	08 95       	ret

00000fcc <si5351_write_bulk>:
			data[1] = reg_val;
			err |= si5351_write_bulk(data, 2);
		}

		return err;
	}
     fcc:	cf 93       	push	r28
     fce:	c6 2f       	mov	r28, r22
     fd0:	46 2f       	mov	r20, r22
     fd2:	bc 01       	movw	r22, r24
     fd4:	80 ec       	ldi	r24, 0xC0	; 192
     fd6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <I2C_1_SendData>
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	c8 13       	cpse	r28, r24
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <si5351_write_bulk+0x16>
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	89 2f       	mov	r24, r25
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <si5351_read_bulk>:
     fe8:	cf 93       	push	r28
     fea:	c6 2f       	mov	r28, r22
     fec:	46 2f       	mov	r20, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	80 ec       	ldi	r24, 0xC0	; 192
     ff2:	0e 94 17 05 	call	0xa2e	; 0xa2e <I2C_1_GetData>
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	c8 13       	cpse	r28, r24
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <si5351_read_bulk+0x16>
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	89 2f       	mov	r24, r25
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	00 d0       	rcall	.+0      	; 0x100e <si5351_clock_enable+0xa>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	18 2f       	mov	r17, r24
    1014:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    1016:	83 e0       	ldi	r24, 0x03	; 3
    1018:	89 83       	std	Y+1, r24	; 0x01

		if(si5351_read_bulk(data, 1)) 
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	ce 01       	movw	r24, r28
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <si5351_read_bulk>
    1024:	81 11       	cpse	r24, r1
    1026:	23 c0       	rjmp	.+70     	; 0x106e <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    1028:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    102a:	00 23       	and	r16, r16
    102c:	59 f0       	breq	.+22     	; 0x1044 <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    102e:	21 e0       	ldi	r18, 0x01	; 1
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <si5351_clock_enable+0x34>
    1034:	22 0f       	add	r18, r18
    1036:	33 1f       	adc	r19, r19
    1038:	1a 95       	dec	r17
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <si5351_clock_enable+0x30>
    103c:	82 2f       	mov	r24, r18
    103e:	80 95       	com	r24
    1040:	89 23       	and	r24, r25
    1042:	09 c0       	rjmp	.+18     	; 0x1056 <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <si5351_clock_enable+0x4a>
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	1a 95       	dec	r17
    1050:	e2 f7       	brpl	.-8      	; 0x104a <si5351_clock_enable+0x46>
    1052:	89 2f       	mov	r24, r25
    1054:	82 2b       	or	r24, r18
		}

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	99 83       	std	Y+1, r25	; 0x01
		data[1] = reg_val;
    105a:	8a 83       	std	Y+2, r24	; 0x02
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;
    105c:	62 e0       	ldi	r22, 0x02	; 2
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	0e 94 e6 07 	call	0xfcc	; 0xfcc <si5351_write_bulk>
    1066:	88 23       	and	r24, r24
    1068:	21 f0       	breq	.+8      	; 0x1072 <si5351_clock_enable+0x6e>
    106a:	8c ef       	ldi	r24, 0xFC	; 252
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <si5351_clock_enable+0x70>
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;

		if(si5351_read_bulk(data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    106e:	8c ef       	ldi	r24, 0xFC	; 252
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <si5351_clock_enable+0x70>

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
		data[1] = reg_val;
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    1072:	80 e0       	ldi	r24, 0x00	; 0
	}
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	08 95       	ret

00001082 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	08 95       	ret

00001086 <TIMERB_init>:
 *
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    1086:	e0 e0       	ldi	r30, 0x00	; 0
    1088:	fb e0       	ldi	r31, 0x0B	; 11
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB0.CCMP = 0x9C40;
    108e:	20 e4       	ldi	r18, 0x40	; 64
    1090:	3c e9       	ldi	r19, 0x9C	; 156
    1092:	24 87       	std	Z+12, r18	; 0x0c
    1094:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    109a:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    109c:	e0 e1       	ldi	r30, 0x10	; 16
    109e:	fb e0       	ldi	r31, 0x0B	; 11
    10a0:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB1.CCMP = 0x5DC0;
    10a2:	40 ec       	ldi	r20, 0xC0	; 192
    10a4:	5d e5       	ldi	r21, 0x5D	; 93
    10a6:	44 87       	std	Z+12, r20	; 0x0c
    10a8:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    10aa:	80 83       	st	Z, r24
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    10ac:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    10ae:	e0 e3       	ldi	r30, 0x30	; 48
    10b0:	fb e0       	ldi	r31, 0x0B	; 11
    10b2:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB3.CCMP = 0x9C40;
    10b4:	24 87       	std	Z+12, r18	; 0x0c
    10b6:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    10b8:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    10ba:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	08 95       	ret

000010c0 <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    10c4:	61 15       	cp	r22, r1
    10c6:	71 05       	cpc	r23, r1
    10c8:	81 05       	cpc	r24, r1
    10ca:	91 05       	cpc	r25, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <util_delay_ms+0x10>
    10ce:	67 c0       	rjmp	.+206    	; 0x119e <util_delay_ms+0xde>
	{
		if(counting)
    10d0:	20 91 de 41 	lds	r18, 0x41DE	; 0x8041de <counting.4075>
    10d4:	22 23       	and	r18, r18
    10d6:	f1 f1       	breq	.+124    	; 0x1154 <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    10d8:	00 91 df 41 	lds	r16, 0x41DF	; 0x8041df <g_ms_counter>
    10dc:	10 91 e0 41 	lds	r17, 0x41E0	; 0x8041e0 <g_ms_counter+0x1>
    10e0:	20 91 e1 41 	lds	r18, 0x41E1	; 0x8041e1 <g_ms_counter+0x2>
    10e4:	30 91 e2 41 	lds	r19, 0x41E2	; 0x8041e2 <g_ms_counter+0x3>
    10e8:	01 2b       	or	r16, r17
    10ea:	02 2b       	or	r16, r18
    10ec:	03 2b       	or	r16, r19
    10ee:	71 f4       	brne	.+28     	; 0x110c <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    10f0:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

				counting = false;
    10f4:	10 92 de 41 	sts	0x41DE, r1	; 0x8041de <counting.4075>
				countdownValue = 0;
    10f8:	10 92 da 41 	sts	0x41DA, r1	; 0x8041da <countdownValue.4074>
    10fc:	10 92 db 41 	sts	0x41DB, r1	; 0x8041db <countdownValue.4074+0x1>
    1100:	10 92 dc 41 	sts	0x41DC, r1	; 0x8041dc <countdownValue.4074+0x2>
    1104:	10 92 dd 41 	sts	0x41DD, r1	; 0x8041dd <countdownValue.4074+0x3>
				return(false); /* time expired */
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	62 c0       	rjmp	.+196    	; 0x11d0 <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    110c:	00 91 da 41 	lds	r16, 0x41DA	; 0x8041da <countdownValue.4074>
    1110:	10 91 db 41 	lds	r17, 0x41DB	; 0x8041db <countdownValue.4074+0x1>
    1114:	20 91 dc 41 	lds	r18, 0x41DC	; 0x8041dc <countdownValue.4074+0x2>
    1118:	30 91 dd 41 	lds	r19, 0x41DD	; 0x8041dd <countdownValue.4074+0x3>
    111c:	60 17       	cp	r22, r16
    111e:	71 07       	cpc	r23, r17
    1120:	82 07       	cpc	r24, r18
    1122:	93 07       	cpc	r25, r19
    1124:	09 f4       	brne	.+2      	; 0x1128 <util_delay_ms+0x68>
    1126:	51 c0       	rjmp	.+162    	; 0x11ca <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    1128:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    112c:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    1130:	60 93 da 41 	sts	0x41DA, r22	; 0x8041da <countdownValue.4074>
    1134:	70 93 db 41 	sts	0x41DB, r23	; 0x8041db <countdownValue.4074+0x1>
    1138:	80 93 dc 41 	sts	0x41DC, r24	; 0x8041dc <countdownValue.4074+0x2>
    113c:	90 93 dd 41 	sts	0x41DD, r25	; 0x8041dd <countdownValue.4074+0x3>
				g_ms_counter = delayValue;
    1140:	60 93 df 41 	sts	0x41DF, r22	; 0x8041df <g_ms_counter>
    1144:	70 93 e0 41 	sts	0x41E0, r23	; 0x8041e0 <g_ms_counter+0x1>
    1148:	80 93 e1 41 	sts	0x41E1, r24	; 0x8041e1 <g_ms_counter+0x2>
    114c:	90 93 e2 41 	sts	0x41E2, r25	; 0x8041e2 <g_ms_counter+0x3>
				return(false);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	3e c0       	rjmp	.+124    	; 0x11d0 <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    1154:	00 91 da 41 	lds	r16, 0x41DA	; 0x8041da <countdownValue.4074>
    1158:	10 91 db 41 	lds	r17, 0x41DB	; 0x8041db <countdownValue.4074+0x1>
    115c:	20 91 dc 41 	lds	r18, 0x41DC	; 0x8041dc <countdownValue.4074+0x2>
    1160:	30 91 dd 41 	lds	r19, 0x41DD	; 0x8041dd <countdownValue.4074+0x3>
    1164:	60 17       	cp	r22, r16
    1166:	71 07       	cpc	r23, r17
    1168:	82 07       	cpc	r24, r18
    116a:	93 07       	cpc	r25, r19
    116c:	71 f1       	breq	.+92     	; 0x11ca <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    116e:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    1172:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    1176:	60 93 da 41 	sts	0x41DA, r22	; 0x8041da <countdownValue.4074>
    117a:	70 93 db 41 	sts	0x41DB, r23	; 0x8041db <countdownValue.4074+0x1>
    117e:	80 93 dc 41 	sts	0x41DC, r24	; 0x8041dc <countdownValue.4074+0x2>
    1182:	90 93 dd 41 	sts	0x41DD, r25	; 0x8041dd <countdownValue.4074+0x3>
			g_ms_counter = delayValue;
    1186:	60 93 df 41 	sts	0x41DF, r22	; 0x8041df <g_ms_counter>
    118a:	70 93 e0 41 	sts	0x41E0, r23	; 0x8041e0 <g_ms_counter+0x1>
    118e:	80 93 e1 41 	sts	0x41E1, r24	; 0x8041e1 <g_ms_counter+0x2>
    1192:	90 93 e2 41 	sts	0x41E2, r25	; 0x8041e2 <g_ms_counter+0x3>
			counting = true;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 93 de 41 	sts	0x41DE, r24	; 0x8041de <counting.4075>
    119c:	16 c0       	rjmp	.+44     	; 0x11ca <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    119e:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

		counting = false;
    11a2:	10 92 de 41 	sts	0x41DE, r1	; 0x8041de <counting.4075>
		countdownValue = 0;
    11a6:	10 92 da 41 	sts	0x41DA, r1	; 0x8041da <countdownValue.4074>
    11aa:	10 92 db 41 	sts	0x41DB, r1	; 0x8041db <countdownValue.4074+0x1>
    11ae:	10 92 dc 41 	sts	0x41DC, r1	; 0x8041dc <countdownValue.4074+0x2>
    11b2:	10 92 dd 41 	sts	0x41DD, r1	; 0x8041dd <countdownValue.4074+0x3>
		g_ms_counter = 0;
    11b6:	10 92 df 41 	sts	0x41DF, r1	; 0x8041df <g_ms_counter>
    11ba:	10 92 e0 41 	sts	0x41E0, r1	; 0x8041e0 <g_ms_counter+0x1>
    11be:	10 92 e1 41 	sts	0x41E1, r1	; 0x8041e1 <g_ms_counter+0x2>
    11c2:	10 92 e2 41 	sts	0x41E2, r1	; 0x8041e2 <g_ms_counter+0x3>
		return(false); /* timer reset */
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
	
	return(true);
}
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    11d6:	1f 92       	push	r1
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	8f 93       	push	r24
    11e2:	9f 93       	push	r25
    11e4:	af 93       	push	r26
    11e6:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    11e8:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    11ec:	80 ff       	sbrs	r24, 0
    11ee:	1d c0       	rjmp	.+58     	; 0x122a <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    11f0:	80 91 df 41 	lds	r24, 0x41DF	; 0x8041df <g_ms_counter>
    11f4:	90 91 e0 41 	lds	r25, 0x41E0	; 0x8041e0 <g_ms_counter+0x1>
    11f8:	a0 91 e1 41 	lds	r26, 0x41E1	; 0x8041e1 <g_ms_counter+0x2>
    11fc:	b0 91 e2 41 	lds	r27, 0x41E2	; 0x8041e2 <g_ms_counter+0x3>
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	a1 05       	cpc	r26, r1
    1204:	b1 05       	cpc	r27, r1
    1206:	61 f0       	breq	.+24     	; 0x1220 <__vector_13+0x4a>
		{
			g_ms_counter--;	
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	a1 09       	sbc	r26, r1
    120c:	b1 09       	sbc	r27, r1
    120e:	80 93 df 41 	sts	0x41DF, r24	; 0x8041df <g_ms_counter>
    1212:	90 93 e0 41 	sts	0x41E0, r25	; 0x8041e0 <g_ms_counter+0x1>
    1216:	a0 93 e1 41 	sts	0x41E1, r26	; 0x8041e1 <g_ms_counter+0x2>
    121a:	b0 93 e2 41 	sts	0x41E2, r27	; 0x8041e2 <g_ms_counter+0x3>
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    1220:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    122a:	bf 91       	pop	r27
    122c:	af 91       	pop	r26
    122e:	9f 91       	pop	r25
    1230:	8f 91       	pop	r24
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	1f 90       	pop	r1
    123a:	18 95       	reti

0000123c <powerToTransmitter>:
		{
// 			PORTB &= ~(1 << PORTB1);  /* Turn off 80m band */
		}

		return(result);
	}
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	08 95       	ret

00001240 <keyTransmitter>:

	void keyTransmitter(BOOL on)
	{
		if(on)
    1240:	88 23       	and	r24, r24
    1242:	61 f0       	breq	.+24     	; 0x125c <keyTransmitter+0x1c>
		{
			if(!g_transmitter_keyed)
    1244:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <g_transmitter_keyed>
    1248:	81 11       	cpse	r24, r1
    124a:	0e c0       	rjmp	.+28     	; 0x1268 <keyTransmitter+0x28>
			{
				si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED);
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	0e 94 02 08 	call	0x1004	; 0x1004 <si5351_clock_enable>
				g_transmitter_keyed = TRUE;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 e3 41 	sts	0x41E3, r24	; 0x8041e3 <g_transmitter_keyed>
    125a:	08 95       	ret
			}
		}
		else
		{
			si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	0e 94 02 08 	call	0x1004	; 0x1004 <si5351_clock_enable>
			g_transmitter_keyed = FALSE;
    1264:	10 92 e3 41 	sts	0x41E3, r1	; 0x8041e3 <g_transmitter_keyed>
    1268:	08 95       	ret

0000126a <USART1_init>:
 *
 * \return Nothing
 */
void USART1_disable()
{
	USART1.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    126a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__floatunsisf>
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__mulsf3>
    127a:	9b 01       	movw	r18, r22
    127c:	ac 01       	movw	r20, r24
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	7b e1       	ldi	r23, 0x1B	; 27
    1282:	87 eb       	ldi	r24, 0xB7	; 183
    1284:	9e e4       	ldi	r25, 0x4E	; 78
    1286:	0e 94 c7 09 	call	0x138e	; 0x138e <__divsf3>
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3>
    1296:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fixunssfsi>
    129a:	e0 e2       	ldi	r30, 0x20	; 32
    129c:	f8 e0       	ldi	r31, 0x08	; 8
    129e:	60 87       	std	Z+8, r22	; 0x08
    12a0:	71 87       	std	Z+9, r23	; 0x09
    12a2:	80 e8       	ldi	r24, 0x80	; 128
    12a4:	85 83       	std	Z+5, r24	; 0x05
    12a6:	80 ec       	ldi	r24, 0xC0	; 192
    12a8:	86 83       	std	Z+6, r24	; 0x06
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	08 95       	ret

000012ae <USART1_get_data>:
 *
 * \return Data register from USART1 module
 */
uint8_t USART1_get_data()
{
	return USART1.RXDATAL;
    12ae:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
}
    12b2:	08 95       	ret

000012b4 <__subsf3>:
    12b4:	50 58       	subi	r21, 0x80	; 128

000012b6 <__addsf3>:
    12b6:	bb 27       	eor	r27, r27
    12b8:	aa 27       	eor	r26, r26
    12ba:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__addsf3x>
    12be:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__fp_round>
    12c2:	0e 94 ae 0a 	call	0x155c	; 0x155c <__fp_pscA>
    12c6:	38 f0       	brcs	.+14     	; 0x12d6 <__addsf3+0x20>
    12c8:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_pscB>
    12cc:	20 f0       	brcs	.+8      	; 0x12d6 <__addsf3+0x20>
    12ce:	39 f4       	brne	.+14     	; 0x12de <__addsf3+0x28>
    12d0:	9f 3f       	cpi	r25, 0xFF	; 255
    12d2:	19 f4       	brne	.+6      	; 0x12da <__addsf3+0x24>
    12d4:	26 f4       	brtc	.+8      	; 0x12de <__addsf3+0x28>
    12d6:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__fp_nan>
    12da:	0e f4       	brtc	.+2      	; 0x12de <__addsf3+0x28>
    12dc:	e0 95       	com	r30
    12de:	e7 fb       	bst	r30, 7
    12e0:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_inf>

000012e4 <__addsf3x>:
    12e4:	e9 2f       	mov	r30, r25
    12e6:	0e 94 cd 0a 	call	0x159a	; 0x159a <__fp_split3>
    12ea:	58 f3       	brcs	.-42     	; 0x12c2 <__addsf3+0xc>
    12ec:	ba 17       	cp	r27, r26
    12ee:	62 07       	cpc	r22, r18
    12f0:	73 07       	cpc	r23, r19
    12f2:	84 07       	cpc	r24, r20
    12f4:	95 07       	cpc	r25, r21
    12f6:	20 f0       	brcs	.+8      	; 0x1300 <__addsf3x+0x1c>
    12f8:	79 f4       	brne	.+30     	; 0x1318 <__addsf3x+0x34>
    12fa:	a6 f5       	brtc	.+104    	; 0x1364 <__addsf3x+0x80>
    12fc:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_zero>
    1300:	0e f4       	brtc	.+2      	; 0x1304 <__addsf3x+0x20>
    1302:	e0 95       	com	r30
    1304:	0b 2e       	mov	r0, r27
    1306:	ba 2f       	mov	r27, r26
    1308:	a0 2d       	mov	r26, r0
    130a:	0b 01       	movw	r0, r22
    130c:	b9 01       	movw	r22, r18
    130e:	90 01       	movw	r18, r0
    1310:	0c 01       	movw	r0, r24
    1312:	ca 01       	movw	r24, r20
    1314:	a0 01       	movw	r20, r0
    1316:	11 24       	eor	r1, r1
    1318:	ff 27       	eor	r31, r31
    131a:	59 1b       	sub	r21, r25
    131c:	99 f0       	breq	.+38     	; 0x1344 <__addsf3x+0x60>
    131e:	59 3f       	cpi	r21, 0xF9	; 249
    1320:	50 f4       	brcc	.+20     	; 0x1336 <__addsf3x+0x52>
    1322:	50 3e       	cpi	r21, 0xE0	; 224
    1324:	68 f1       	brcs	.+90     	; 0x1380 <__addsf3x+0x9c>
    1326:	1a 16       	cp	r1, r26
    1328:	f0 40       	sbci	r31, 0x00	; 0
    132a:	a2 2f       	mov	r26, r18
    132c:	23 2f       	mov	r18, r19
    132e:	34 2f       	mov	r19, r20
    1330:	44 27       	eor	r20, r20
    1332:	58 5f       	subi	r21, 0xF8	; 248
    1334:	f3 cf       	rjmp	.-26     	; 0x131c <__addsf3x+0x38>
    1336:	46 95       	lsr	r20
    1338:	37 95       	ror	r19
    133a:	27 95       	ror	r18
    133c:	a7 95       	ror	r26
    133e:	f0 40       	sbci	r31, 0x00	; 0
    1340:	53 95       	inc	r21
    1342:	c9 f7       	brne	.-14     	; 0x1336 <__addsf3x+0x52>
    1344:	7e f4       	brtc	.+30     	; 0x1364 <__addsf3x+0x80>
    1346:	1f 16       	cp	r1, r31
    1348:	ba 0b       	sbc	r27, r26
    134a:	62 0b       	sbc	r22, r18
    134c:	73 0b       	sbc	r23, r19
    134e:	84 0b       	sbc	r24, r20
    1350:	ba f0       	brmi	.+46     	; 0x1380 <__addsf3x+0x9c>
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	a1 f0       	breq	.+40     	; 0x137e <__addsf3x+0x9a>
    1356:	ff 0f       	add	r31, r31
    1358:	bb 1f       	adc	r27, r27
    135a:	66 1f       	adc	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	c2 f7       	brpl	.-16     	; 0x1352 <__addsf3x+0x6e>
    1362:	0e c0       	rjmp	.+28     	; 0x1380 <__addsf3x+0x9c>
    1364:	ba 0f       	add	r27, r26
    1366:	62 1f       	adc	r22, r18
    1368:	73 1f       	adc	r23, r19
    136a:	84 1f       	adc	r24, r20
    136c:	48 f4       	brcc	.+18     	; 0x1380 <__addsf3x+0x9c>
    136e:	87 95       	ror	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	9e 3f       	cpi	r25, 0xFE	; 254
    137a:	08 f0       	brcs	.+2      	; 0x137e <__addsf3x+0x9a>
    137c:	b0 cf       	rjmp	.-160    	; 0x12de <__addsf3+0x28>
    137e:	93 95       	inc	r25
    1380:	88 0f       	add	r24, r24
    1382:	08 f0       	brcs	.+2      	; 0x1386 <__addsf3x+0xa2>
    1384:	99 27       	eor	r25, r25
    1386:	ee 0f       	add	r30, r30
    1388:	97 95       	ror	r25
    138a:	87 95       	ror	r24
    138c:	08 95       	ret

0000138e <__divsf3>:
    138e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divsf3x>
    1392:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__fp_round>
    1396:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_pscB>
    139a:	58 f0       	brcs	.+22     	; 0x13b2 <__divsf3+0x24>
    139c:	0e 94 ae 0a 	call	0x155c	; 0x155c <__fp_pscA>
    13a0:	40 f0       	brcs	.+16     	; 0x13b2 <__divsf3+0x24>
    13a2:	29 f4       	brne	.+10     	; 0x13ae <__divsf3+0x20>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	29 f0       	breq	.+10     	; 0x13b2 <__divsf3+0x24>
    13a8:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_inf>
    13ac:	51 11       	cpse	r21, r1
    13ae:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__fp_szero>
    13b2:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__fp_nan>

000013b6 <__divsf3x>:
    13b6:	0e 94 cd 0a 	call	0x159a	; 0x159a <__fp_split3>
    13ba:	68 f3       	brcs	.-38     	; 0x1396 <__divsf3+0x8>

000013bc <__divsf3_pse>:
    13bc:	99 23       	and	r25, r25
    13be:	b1 f3       	breq	.-20     	; 0x13ac <__divsf3+0x1e>
    13c0:	55 23       	and	r21, r21
    13c2:	91 f3       	breq	.-28     	; 0x13a8 <__divsf3+0x1a>
    13c4:	95 1b       	sub	r25, r21
    13c6:	55 0b       	sbc	r21, r21
    13c8:	bb 27       	eor	r27, r27
    13ca:	aa 27       	eor	r26, r26
    13cc:	62 17       	cp	r22, r18
    13ce:	73 07       	cpc	r23, r19
    13d0:	84 07       	cpc	r24, r20
    13d2:	38 f0       	brcs	.+14     	; 0x13e2 <__divsf3_pse+0x26>
    13d4:	9f 5f       	subi	r25, 0xFF	; 255
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	22 0f       	add	r18, r18
    13da:	33 1f       	adc	r19, r19
    13dc:	44 1f       	adc	r20, r20
    13de:	aa 1f       	adc	r26, r26
    13e0:	a9 f3       	breq	.-22     	; 0x13cc <__divsf3_pse+0x10>
    13e2:	35 d0       	rcall	.+106    	; 0x144e <__divsf3_pse+0x92>
    13e4:	0e 2e       	mov	r0, r30
    13e6:	3a f0       	brmi	.+14     	; 0x13f6 <__divsf3_pse+0x3a>
    13e8:	e0 e8       	ldi	r30, 0x80	; 128
    13ea:	32 d0       	rcall	.+100    	; 0x1450 <__divsf3_pse+0x94>
    13ec:	91 50       	subi	r25, 0x01	; 1
    13ee:	50 40       	sbci	r21, 0x00	; 0
    13f0:	e6 95       	lsr	r30
    13f2:	00 1c       	adc	r0, r0
    13f4:	ca f7       	brpl	.-14     	; 0x13e8 <__divsf3_pse+0x2c>
    13f6:	2b d0       	rcall	.+86     	; 0x144e <__divsf3_pse+0x92>
    13f8:	fe 2f       	mov	r31, r30
    13fa:	29 d0       	rcall	.+82     	; 0x144e <__divsf3_pse+0x92>
    13fc:	66 0f       	add	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	88 1f       	adc	r24, r24
    1402:	bb 1f       	adc	r27, r27
    1404:	26 17       	cp	r18, r22
    1406:	37 07       	cpc	r19, r23
    1408:	48 07       	cpc	r20, r24
    140a:	ab 07       	cpc	r26, r27
    140c:	b0 e8       	ldi	r27, 0x80	; 128
    140e:	09 f0       	breq	.+2      	; 0x1412 <__divsf3_pse+0x56>
    1410:	bb 0b       	sbc	r27, r27
    1412:	80 2d       	mov	r24, r0
    1414:	bf 01       	movw	r22, r30
    1416:	ff 27       	eor	r31, r31
    1418:	93 58       	subi	r25, 0x83	; 131
    141a:	5f 4f       	sbci	r21, 0xFF	; 255
    141c:	3a f0       	brmi	.+14     	; 0x142c <__divsf3_pse+0x70>
    141e:	9e 3f       	cpi	r25, 0xFE	; 254
    1420:	51 05       	cpc	r21, r1
    1422:	78 f0       	brcs	.+30     	; 0x1442 <__divsf3_pse+0x86>
    1424:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_inf>
    1428:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__fp_szero>
    142c:	5f 3f       	cpi	r21, 0xFF	; 255
    142e:	e4 f3       	brlt	.-8      	; 0x1428 <__divsf3_pse+0x6c>
    1430:	98 3e       	cpi	r25, 0xE8	; 232
    1432:	d4 f3       	brlt	.-12     	; 0x1428 <__divsf3_pse+0x6c>
    1434:	86 95       	lsr	r24
    1436:	77 95       	ror	r23
    1438:	67 95       	ror	r22
    143a:	b7 95       	ror	r27
    143c:	f7 95       	ror	r31
    143e:	9f 5f       	subi	r25, 0xFF	; 255
    1440:	c9 f7       	brne	.-14     	; 0x1434 <__divsf3_pse+0x78>
    1442:	88 0f       	add	r24, r24
    1444:	91 1d       	adc	r25, r1
    1446:	96 95       	lsr	r25
    1448:	87 95       	ror	r24
    144a:	97 f9       	bld	r25, 7
    144c:	08 95       	ret
    144e:	e1 e0       	ldi	r30, 0x01	; 1
    1450:	66 0f       	add	r22, r22
    1452:	77 1f       	adc	r23, r23
    1454:	88 1f       	adc	r24, r24
    1456:	bb 1f       	adc	r27, r27
    1458:	62 17       	cp	r22, r18
    145a:	73 07       	cpc	r23, r19
    145c:	84 07       	cpc	r24, r20
    145e:	ba 07       	cpc	r27, r26
    1460:	20 f0       	brcs	.+8      	; 0x146a <__divsf3_pse+0xae>
    1462:	62 1b       	sub	r22, r18
    1464:	73 0b       	sbc	r23, r19
    1466:	84 0b       	sbc	r24, r20
    1468:	ba 0b       	sbc	r27, r26
    146a:	ee 1f       	adc	r30, r30
    146c:	88 f7       	brcc	.-30     	; 0x1450 <__divsf3_pse+0x94>
    146e:	e0 95       	com	r30
    1470:	08 95       	ret

00001472 <__fixunssfsi>:
    1472:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fp_splitA>
    1476:	88 f0       	brcs	.+34     	; 0x149a <__fixunssfsi+0x28>
    1478:	9f 57       	subi	r25, 0x7F	; 127
    147a:	98 f0       	brcs	.+38     	; 0x14a2 <__fixunssfsi+0x30>
    147c:	b9 2f       	mov	r27, r25
    147e:	99 27       	eor	r25, r25
    1480:	b7 51       	subi	r27, 0x17	; 23
    1482:	b0 f0       	brcs	.+44     	; 0x14b0 <__fixunssfsi+0x3e>
    1484:	e1 f0       	breq	.+56     	; 0x14be <__fixunssfsi+0x4c>
    1486:	66 0f       	add	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	1a f0       	brmi	.+6      	; 0x1496 <__fixunssfsi+0x24>
    1490:	ba 95       	dec	r27
    1492:	c9 f7       	brne	.-14     	; 0x1486 <__fixunssfsi+0x14>
    1494:	14 c0       	rjmp	.+40     	; 0x14be <__fixunssfsi+0x4c>
    1496:	b1 30       	cpi	r27, 0x01	; 1
    1498:	91 f0       	breq	.+36     	; 0x14be <__fixunssfsi+0x4c>
    149a:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fp_zero>
    149e:	b1 e0       	ldi	r27, 0x01	; 1
    14a0:	08 95       	ret
    14a2:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_zero>
    14a6:	67 2f       	mov	r22, r23
    14a8:	78 2f       	mov	r23, r24
    14aa:	88 27       	eor	r24, r24
    14ac:	b8 5f       	subi	r27, 0xF8	; 248
    14ae:	39 f0       	breq	.+14     	; 0x14be <__fixunssfsi+0x4c>
    14b0:	b9 3f       	cpi	r27, 0xF9	; 249
    14b2:	cc f3       	brlt	.-14     	; 0x14a6 <__fixunssfsi+0x34>
    14b4:	86 95       	lsr	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b3 95       	inc	r27
    14bc:	d9 f7       	brne	.-10     	; 0x14b4 <__fixunssfsi+0x42>
    14be:	3e f4       	brtc	.+14     	; 0x14ce <__fixunssfsi+0x5c>
    14c0:	90 95       	com	r25
    14c2:	80 95       	com	r24
    14c4:	70 95       	com	r23
    14c6:	61 95       	neg	r22
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ca:	8f 4f       	sbci	r24, 0xFF	; 255
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	08 95       	ret

000014d0 <__floatunsisf>:
    14d0:	e8 94       	clt
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <__floatsisf+0x12>

000014d4 <__floatsisf>:
    14d4:	97 fb       	bst	r25, 7
    14d6:	3e f4       	brtc	.+14     	; 0x14e6 <__floatsisf+0x12>
    14d8:	90 95       	com	r25
    14da:	80 95       	com	r24
    14dc:	70 95       	com	r23
    14de:	61 95       	neg	r22
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	8f 4f       	sbci	r24, 0xFF	; 255
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	99 23       	and	r25, r25
    14e8:	a9 f0       	breq	.+42     	; 0x1514 <__floatsisf+0x40>
    14ea:	f9 2f       	mov	r31, r25
    14ec:	96 e9       	ldi	r25, 0x96	; 150
    14ee:	bb 27       	eor	r27, r27
    14f0:	93 95       	inc	r25
    14f2:	f6 95       	lsr	r31
    14f4:	87 95       	ror	r24
    14f6:	77 95       	ror	r23
    14f8:	67 95       	ror	r22
    14fa:	b7 95       	ror	r27
    14fc:	f1 11       	cpse	r31, r1
    14fe:	f8 cf       	rjmp	.-16     	; 0x14f0 <__floatsisf+0x1c>
    1500:	fa f4       	brpl	.+62     	; 0x1540 <__floatsisf+0x6c>
    1502:	bb 0f       	add	r27, r27
    1504:	11 f4       	brne	.+4      	; 0x150a <__floatsisf+0x36>
    1506:	60 ff       	sbrs	r22, 0
    1508:	1b c0       	rjmp	.+54     	; 0x1540 <__floatsisf+0x6c>
    150a:	6f 5f       	subi	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	8f 4f       	sbci	r24, 0xFF	; 255
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	16 c0       	rjmp	.+44     	; 0x1540 <__floatsisf+0x6c>
    1514:	88 23       	and	r24, r24
    1516:	11 f0       	breq	.+4      	; 0x151c <__floatsisf+0x48>
    1518:	96 e9       	ldi	r25, 0x96	; 150
    151a:	11 c0       	rjmp	.+34     	; 0x153e <__floatsisf+0x6a>
    151c:	77 23       	and	r23, r23
    151e:	21 f0       	breq	.+8      	; 0x1528 <__floatsisf+0x54>
    1520:	9e e8       	ldi	r25, 0x8E	; 142
    1522:	87 2f       	mov	r24, r23
    1524:	76 2f       	mov	r23, r22
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <__floatsisf+0x5e>
    1528:	66 23       	and	r22, r22
    152a:	71 f0       	breq	.+28     	; 0x1548 <__floatsisf+0x74>
    152c:	96 e8       	ldi	r25, 0x86	; 134
    152e:	86 2f       	mov	r24, r22
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	2a f0       	brmi	.+10     	; 0x1540 <__floatsisf+0x6c>
    1536:	9a 95       	dec	r25
    1538:	66 0f       	add	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	da f7       	brpl	.-10     	; 0x1536 <__floatsisf+0x62>
    1540:	88 0f       	add	r24, r24
    1542:	96 95       	lsr	r25
    1544:	87 95       	ror	r24
    1546:	97 f9       	bld	r25, 7
    1548:	08 95       	ret

0000154a <__fp_inf>:
    154a:	97 f9       	bld	r25, 7
    154c:	9f 67       	ori	r25, 0x7F	; 127
    154e:	80 e8       	ldi	r24, 0x80	; 128
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	08 95       	ret

00001556 <__fp_nan>:
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	80 ec       	ldi	r24, 0xC0	; 192
    155a:	08 95       	ret

0000155c <__fp_pscA>:
    155c:	00 24       	eor	r0, r0
    155e:	0a 94       	dec	r0
    1560:	16 16       	cp	r1, r22
    1562:	17 06       	cpc	r1, r23
    1564:	18 06       	cpc	r1, r24
    1566:	09 06       	cpc	r0, r25
    1568:	08 95       	ret

0000156a <__fp_pscB>:
    156a:	00 24       	eor	r0, r0
    156c:	0a 94       	dec	r0
    156e:	12 16       	cp	r1, r18
    1570:	13 06       	cpc	r1, r19
    1572:	14 06       	cpc	r1, r20
    1574:	05 06       	cpc	r0, r21
    1576:	08 95       	ret

00001578 <__fp_round>:
    1578:	09 2e       	mov	r0, r25
    157a:	03 94       	inc	r0
    157c:	00 0c       	add	r0, r0
    157e:	11 f4       	brne	.+4      	; 0x1584 <__fp_round+0xc>
    1580:	88 23       	and	r24, r24
    1582:	52 f0       	brmi	.+20     	; 0x1598 <__fp_round+0x20>
    1584:	bb 0f       	add	r27, r27
    1586:	40 f4       	brcc	.+16     	; 0x1598 <__fp_round+0x20>
    1588:	bf 2b       	or	r27, r31
    158a:	11 f4       	brne	.+4      	; 0x1590 <__fp_round+0x18>
    158c:	60 ff       	sbrs	r22, 0
    158e:	04 c0       	rjmp	.+8      	; 0x1598 <__fp_round+0x20>
    1590:	6f 5f       	subi	r22, 0xFF	; 255
    1592:	7f 4f       	sbci	r23, 0xFF	; 255
    1594:	8f 4f       	sbci	r24, 0xFF	; 255
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	08 95       	ret

0000159a <__fp_split3>:
    159a:	57 fd       	sbrc	r21, 7
    159c:	90 58       	subi	r25, 0x80	; 128
    159e:	44 0f       	add	r20, r20
    15a0:	55 1f       	adc	r21, r21
    15a2:	59 f0       	breq	.+22     	; 0x15ba <__fp_splitA+0x10>
    15a4:	5f 3f       	cpi	r21, 0xFF	; 255
    15a6:	71 f0       	breq	.+28     	; 0x15c4 <__fp_splitA+0x1a>
    15a8:	47 95       	ror	r20

000015aa <__fp_splitA>:
    15aa:	88 0f       	add	r24, r24
    15ac:	97 fb       	bst	r25, 7
    15ae:	99 1f       	adc	r25, r25
    15b0:	61 f0       	breq	.+24     	; 0x15ca <__fp_splitA+0x20>
    15b2:	9f 3f       	cpi	r25, 0xFF	; 255
    15b4:	79 f0       	breq	.+30     	; 0x15d4 <__fp_splitA+0x2a>
    15b6:	87 95       	ror	r24
    15b8:	08 95       	ret
    15ba:	12 16       	cp	r1, r18
    15bc:	13 06       	cpc	r1, r19
    15be:	14 06       	cpc	r1, r20
    15c0:	55 1f       	adc	r21, r21
    15c2:	f2 cf       	rjmp	.-28     	; 0x15a8 <__fp_split3+0xe>
    15c4:	46 95       	lsr	r20
    15c6:	f1 df       	rcall	.-30     	; 0x15aa <__fp_splitA>
    15c8:	08 c0       	rjmp	.+16     	; 0x15da <__fp_splitA+0x30>
    15ca:	16 16       	cp	r1, r22
    15cc:	17 06       	cpc	r1, r23
    15ce:	18 06       	cpc	r1, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	f1 cf       	rjmp	.-30     	; 0x15b6 <__fp_splitA+0xc>
    15d4:	86 95       	lsr	r24
    15d6:	71 05       	cpc	r23, r1
    15d8:	61 05       	cpc	r22, r1
    15da:	08 94       	sec
    15dc:	08 95       	ret

000015de <__fp_zero>:
    15de:	e8 94       	clt

000015e0 <__fp_szero>:
    15e0:	bb 27       	eor	r27, r27
    15e2:	66 27       	eor	r22, r22
    15e4:	77 27       	eor	r23, r23
    15e6:	cb 01       	movw	r24, r22
    15e8:	97 f9       	bld	r25, 7
    15ea:	08 95       	ret

000015ec <__mulsf3>:
    15ec:	0e 94 09 0b 	call	0x1612	; 0x1612 <__mulsf3x>
    15f0:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__fp_round>
    15f4:	0e 94 ae 0a 	call	0x155c	; 0x155c <__fp_pscA>
    15f8:	38 f0       	brcs	.+14     	; 0x1608 <__mulsf3+0x1c>
    15fa:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_pscB>
    15fe:	20 f0       	brcs	.+8      	; 0x1608 <__mulsf3+0x1c>
    1600:	95 23       	and	r25, r21
    1602:	11 f0       	breq	.+4      	; 0x1608 <__mulsf3+0x1c>
    1604:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_inf>
    1608:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__fp_nan>
    160c:	11 24       	eor	r1, r1
    160e:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__fp_szero>

00001612 <__mulsf3x>:
    1612:	0e 94 cd 0a 	call	0x159a	; 0x159a <__fp_split3>
    1616:	70 f3       	brcs	.-36     	; 0x15f4 <__mulsf3+0x8>

00001618 <__mulsf3_pse>:
    1618:	95 9f       	mul	r25, r21
    161a:	c1 f3       	breq	.-16     	; 0x160c <__mulsf3+0x20>
    161c:	95 0f       	add	r25, r21
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	55 1f       	adc	r21, r21
    1622:	62 9f       	mul	r22, r18
    1624:	f0 01       	movw	r30, r0
    1626:	72 9f       	mul	r23, r18
    1628:	bb 27       	eor	r27, r27
    162a:	f0 0d       	add	r31, r0
    162c:	b1 1d       	adc	r27, r1
    162e:	63 9f       	mul	r22, r19
    1630:	aa 27       	eor	r26, r26
    1632:	f0 0d       	add	r31, r0
    1634:	b1 1d       	adc	r27, r1
    1636:	aa 1f       	adc	r26, r26
    1638:	64 9f       	mul	r22, r20
    163a:	66 27       	eor	r22, r22
    163c:	b0 0d       	add	r27, r0
    163e:	a1 1d       	adc	r26, r1
    1640:	66 1f       	adc	r22, r22
    1642:	82 9f       	mul	r24, r18
    1644:	22 27       	eor	r18, r18
    1646:	b0 0d       	add	r27, r0
    1648:	a1 1d       	adc	r26, r1
    164a:	62 1f       	adc	r22, r18
    164c:	73 9f       	mul	r23, r19
    164e:	b0 0d       	add	r27, r0
    1650:	a1 1d       	adc	r26, r1
    1652:	62 1f       	adc	r22, r18
    1654:	83 9f       	mul	r24, r19
    1656:	a0 0d       	add	r26, r0
    1658:	61 1d       	adc	r22, r1
    165a:	22 1f       	adc	r18, r18
    165c:	74 9f       	mul	r23, r20
    165e:	33 27       	eor	r19, r19
    1660:	a0 0d       	add	r26, r0
    1662:	61 1d       	adc	r22, r1
    1664:	23 1f       	adc	r18, r19
    1666:	84 9f       	mul	r24, r20
    1668:	60 0d       	add	r22, r0
    166a:	21 1d       	adc	r18, r1
    166c:	82 2f       	mov	r24, r18
    166e:	76 2f       	mov	r23, r22
    1670:	6a 2f       	mov	r22, r26
    1672:	11 24       	eor	r1, r1
    1674:	9f 57       	subi	r25, 0x7F	; 127
    1676:	50 40       	sbci	r21, 0x00	; 0
    1678:	9a f0       	brmi	.+38     	; 0x16a0 <__mulsf3_pse+0x88>
    167a:	f1 f0       	breq	.+60     	; 0x16b8 <__mulsf3_pse+0xa0>
    167c:	88 23       	and	r24, r24
    167e:	4a f0       	brmi	.+18     	; 0x1692 <__mulsf3_pse+0x7a>
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	bb 1f       	adc	r27, r27
    1686:	66 1f       	adc	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	88 1f       	adc	r24, r24
    168c:	91 50       	subi	r25, 0x01	; 1
    168e:	50 40       	sbci	r21, 0x00	; 0
    1690:	a9 f7       	brne	.-22     	; 0x167c <__mulsf3_pse+0x64>
    1692:	9e 3f       	cpi	r25, 0xFE	; 254
    1694:	51 05       	cpc	r21, r1
    1696:	80 f0       	brcs	.+32     	; 0x16b8 <__mulsf3_pse+0xa0>
    1698:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_inf>
    169c:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__fp_szero>
    16a0:	5f 3f       	cpi	r21, 0xFF	; 255
    16a2:	e4 f3       	brlt	.-8      	; 0x169c <__mulsf3_pse+0x84>
    16a4:	98 3e       	cpi	r25, 0xE8	; 232
    16a6:	d4 f3       	brlt	.-12     	; 0x169c <__mulsf3_pse+0x84>
    16a8:	86 95       	lsr	r24
    16aa:	77 95       	ror	r23
    16ac:	67 95       	ror	r22
    16ae:	b7 95       	ror	r27
    16b0:	f7 95       	ror	r31
    16b2:	e7 95       	ror	r30
    16b4:	9f 5f       	subi	r25, 0xFF	; 255
    16b6:	c1 f7       	brne	.-16     	; 0x16a8 <__mulsf3_pse+0x90>
    16b8:	fe 2b       	or	r31, r30
    16ba:	88 0f       	add	r24, r24
    16bc:	91 1d       	adc	r25, r1
    16be:	96 95       	lsr	r25
    16c0:	87 95       	ror	r24
    16c2:	97 f9       	bld	r25, 7
    16c4:	08 95       	ret

000016c6 <__tablejump2__>:
    16c6:	ee 0f       	add	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	00 24       	eor	r0, r0
    16cc:	00 1c       	adc	r0, r0
    16ce:	0b be       	out	0x3b, r0	; 59
    16d0:	07 90       	elpm	r0, Z+
    16d2:	f6 91       	elpm	r31, Z
    16d4:	e0 2d       	mov	r30, r0
    16d6:	09 94       	ijmp

000016d8 <toupper>:
    16d8:	91 11       	cpse	r25, r1
    16da:	08 95       	ret
    16dc:	81 56       	subi	r24, 0x61	; 97
    16de:	8a 51       	subi	r24, 0x1A	; 26
    16e0:	08 f4       	brcc	.+2      	; 0x16e4 <toupper+0xc>
    16e2:	80 52       	subi	r24, 0x20	; 32
    16e4:	85 58       	subi	r24, 0x85	; 133
    16e6:	08 95       	ret

000016e8 <_exit>:
    16e8:	f8 94       	cli

000016ea <__stop_program>:
    16ea:	ff cf       	rjmp	.-2      	; 0x16ea <__stop_program>
