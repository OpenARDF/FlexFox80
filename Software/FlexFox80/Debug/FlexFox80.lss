
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000069a  00804000  0000a654  0000a708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a654  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000417  0080469a  0080469a  0000ada2  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  0000ada2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000add7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000ae34  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000009c0  00000000  00000000  0000ae78  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000133b5  00000000  00000000  0000b838  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005cad  00000000  00000000  0001ebed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008145  00000000  00000000  0002489a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001f74  00000000  00000000  0002c9e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006085  00000000  00000000  0002e954  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b4c8  00000000  00000000  000349d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000978  00000000  00000000  0003fea1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__dtors_end>
       4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
       8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
       c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      10:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      14:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      18:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__vector_6>
      1c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      20:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      24:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      28:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      2c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      30:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__vector_12>
      34:	0c 94 80 44 	jmp	0x8900	; 0x8900 <__vector_13>
      38:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      3c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      40:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      44:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      48:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      4c:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_19>
      50:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_20>
      54:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      58:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      5c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      60:	0c 94 17 29 	jmp	0x522e	; 0x522e <__vector_24>
      64:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      68:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      6c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      70:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      74:	0c 94 7f 29 	jmp	0x52fe	; 0x52fe <__vector_29>
      78:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_30>
      7c:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_31>
      80:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_32>
      84:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      88:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      8c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      90:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      94:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      98:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      9c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      a0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      a4:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_41>
      a8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      ac:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      b0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      b4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      b8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      bc:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      c0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      c4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      c8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      cc:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      d0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      d4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      d8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      dc:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__vector_55>
      e0:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__vector_56>
      e4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      e8:	9a 23       	and	r25, r26
      ea:	a6 23       	and	r26, r22
      ec:	b5 23       	and	r27, r21
      ee:	c4 23       	and	r28, r20
      f0:	d3 23       	and	r29, r19
      f2:	cc 24       	eor	r12, r12
      f4:	c4 24       	eor	r12, r4
      f6:	04 24       	eor	r0, r4
      f8:	0d 24       	eor	r0, r13
      fa:	19 24       	eor	r1, r9
      fc:	25 24       	eor	r2, r5
      fe:	31 24       	eor	r3, r1
     100:	64 24       	eor	r6, r4
     102:	6d 24       	eor	r6, r13
     104:	79 24       	eor	r7, r9
     106:	85 24       	eor	r8, r5
     108:	91 24       	eor	r9, r1
     10a:	38 31       	cpi	r19, 0x18	; 24
     10c:	3e 31       	cpi	r19, 0x1E	; 30
     10e:	20 31       	cpi	r18, 0x10	; 16
     110:	3e 31       	cpi	r19, 0x1E	; 30
     112:	3e 31       	cpi	r19, 0x1E	; 30
     114:	3e 31       	cpi	r19, 0x1E	; 30
     116:	29 31       	cpi	r18, 0x19	; 25
     118:	3e 31       	cpi	r19, 0x1E	; 30
     11a:	3e 31       	cpi	r19, 0x1E	; 30
     11c:	3e 31       	cpi	r19, 0x1E	; 30
     11e:	e7 30       	cpi	r30, 0x07	; 7
     120:	3e 31       	cpi	r19, 0x1E	; 30
     122:	3e 31       	cpi	r19, 0x1E	; 30
     124:	3e 31       	cpi	r19, 0x1E	; 30
     126:	3e 31       	cpi	r19, 0x1E	; 30
     128:	3e 31       	cpi	r19, 0x1E	; 30
     12a:	3e 31       	cpi	r19, 0x1E	; 30
     12c:	3e 31       	cpi	r19, 0x1E	; 30
     12e:	3e 31       	cpi	r19, 0x1E	; 30
     130:	3e 31       	cpi	r19, 0x1E	; 30
     132:	3e 31       	cpi	r19, 0x1E	; 30
     134:	3e 31       	cpi	r19, 0x1E	; 30
     136:	3e 31       	cpi	r19, 0x1E	; 30
     138:	3e 31       	cpi	r19, 0x1E	; 30
     13a:	3e 31       	cpi	r19, 0x1E	; 30
     13c:	3e 31       	cpi	r19, 0x1E	; 30
     13e:	3e 31       	cpi	r19, 0x1E	; 30
     140:	3e 31       	cpi	r19, 0x1E	; 30
     142:	3e 31       	cpi	r19, 0x1E	; 30
     144:	3e 31       	cpi	r19, 0x1E	; 30
     146:	3e 31       	cpi	r19, 0x1E	; 30
     148:	fd 30       	cpi	r31, 0x0D	; 13
     14a:	3e 31       	cpi	r19, 0x1E	; 30
     14c:	3e 31       	cpi	r19, 0x1E	; 30
     14e:	3e 31       	cpi	r19, 0x1E	; 30
     150:	3e 31       	cpi	r19, 0x1E	; 30
     152:	3e 31       	cpi	r19, 0x1E	; 30
     154:	3e 31       	cpi	r19, 0x1E	; 30
     156:	3e 31       	cpi	r19, 0x1E	; 30
     158:	3e 31       	cpi	r19, 0x1E	; 30
     15a:	14 31       	cpi	r17, 0x14	; 20
     15c:	1a 31       	cpi	r17, 0x1A	; 26
     15e:	32 31       	cpi	r19, 0x12	; 18
     160:	ce 30       	cpi	r28, 0x0E	; 14
     162:	3e 31       	cpi	r19, 0x1E	; 30
     164:	3e 31       	cpi	r19, 0x1E	; 30
     166:	3e 31       	cpi	r19, 0x1E	; 30
     168:	d7 30       	cpi	r29, 0x07	; 7
     16a:	3e 31       	cpi	r19, 0x1E	; 30
     16c:	3e 31       	cpi	r19, 0x1E	; 30
     16e:	3e 31       	cpi	r19, 0x1E	; 30
     170:	e0 30       	cpi	r30, 0x00	; 0
     172:	74 39       	cpi	r23, 0x94	; 148
     174:	38 39       	cpi	r19, 0x98	; 152
     176:	64 39       	cpi	r22, 0x94	; 148
     178:	7c 39       	cpi	r23, 0x9C	; 156
     17a:	68 39       	cpi	r22, 0x98	; 152
     17c:	7c 39       	cpi	r23, 0x9C	; 156
     17e:	48 39       	cpi	r20, 0x98	; 152
     180:	34 39       	cpi	r19, 0x94	; 148
     182:	40 39       	cpi	r20, 0x90	; 144
     184:	44 39       	cpi	r20, 0x94	; 148
     186:	7c 39       	cpi	r23, 0x9C	; 156
     188:	58 39       	cpi	r21, 0x98	; 152
     18a:	2c 39       	cpi	r18, 0x9C	; 156
     18c:	5c 39       	cpi	r21, 0x9C	; 156
     18e:	28 39       	cpi	r18, 0x98	; 152
     190:	3c 39       	cpi	r19, 0x9C	; 156
     192:	00 39       	cpi	r16, 0x90	; 144
     194:	04 39       	cpi	r16, 0x94	; 148
     196:	08 39       	cpi	r16, 0x98	; 152
     198:	0c 39       	cpi	r16, 0x9C	; 156
     19a:	10 39       	cpi	r17, 0x90	; 144
     19c:	14 39       	cpi	r17, 0x94	; 148
     19e:	18 39       	cpi	r17, 0x98	; 152
     1a0:	1c 39       	cpi	r17, 0x9C	; 156
     1a2:	20 39       	cpi	r18, 0x90	; 144
     1a4:	24 39       	cpi	r18, 0x94	; 148
     1a6:	4c 39       	cpi	r20, 0x9C	; 156
     1a8:	50 39       	cpi	r21, 0x90	; 144
     1aa:	78 39       	cpi	r23, 0x98	; 152
     1ac:	54 39       	cpi	r21, 0x94	; 148
     1ae:	7c 39       	cpi	r23, 0x9C	; 156
     1b0:	30 39       	cpi	r19, 0x90	; 144
     1b2:	6c 39       	cpi	r22, 0x9C	; 156
     1b4:	98 38       	cpi	r25, 0x88	; 136
     1b6:	9c 38       	cpi	r25, 0x8C	; 140
     1b8:	a0 38       	cpi	r26, 0x80	; 128
     1ba:	a4 38       	cpi	r26, 0x84	; 132
     1bc:	a8 38       	cpi	r26, 0x88	; 136
     1be:	ac 38       	cpi	r26, 0x8C	; 140
     1c0:	b0 38       	cpi	r27, 0x80	; 128
     1c2:	b4 38       	cpi	r27, 0x84	; 132
     1c4:	b8 38       	cpi	r27, 0x88	; 136
     1c6:	bc 38       	cpi	r27, 0x8C	; 140
     1c8:	c0 38       	cpi	r28, 0x80	; 128
     1ca:	c4 38       	cpi	r28, 0x84	; 132
     1cc:	c8 38       	cpi	r28, 0x88	; 136
     1ce:	cc 38       	cpi	r28, 0x8C	; 140
     1d0:	d0 38       	cpi	r29, 0x80	; 128
     1d2:	d4 38       	cpi	r29, 0x84	; 132
     1d4:	d8 38       	cpi	r29, 0x88	; 136
     1d6:	dc 38       	cpi	r29, 0x8C	; 140
     1d8:	e0 38       	cpi	r30, 0x80	; 128
     1da:	e4 38       	cpi	r30, 0x84	; 132
     1dc:	e8 38       	cpi	r30, 0x88	; 136
     1de:	ec 38       	cpi	r30, 0x8C	; 140
     1e0:	f0 38       	cpi	r31, 0x80	; 128
     1e2:	f4 38       	cpi	r31, 0x84	; 132
     1e4:	f8 38       	cpi	r31, 0x88	; 136
     1e6:	fc 38       	cpi	r31, 0x8C	; 140
     1e8:	7c 39       	cpi	r23, 0x9C	; 156
     1ea:	7c 39       	cpi	r23, 0x9C	; 156
     1ec:	7c 39       	cpi	r23, 0x9C	; 156
     1ee:	7c 39       	cpi	r23, 0x9C	; 156
     1f0:	60 39       	cpi	r22, 0x90	; 144
     1f2:	7c 39       	cpi	r23, 0x9C	; 156
     1f4:	7c 39       	cpi	r23, 0x9C	; 156
     1f6:	7c 39       	cpi	r23, 0x9C	; 156
     1f8:	7c 39       	cpi	r23, 0x9C	; 156
     1fa:	7c 39       	cpi	r23, 0x9C	; 156
     1fc:	7c 39       	cpi	r23, 0x9C	; 156
     1fe:	7c 39       	cpi	r23, 0x9C	; 156
     200:	7c 39       	cpi	r23, 0x9C	; 156
     202:	7c 39       	cpi	r23, 0x9C	; 156
     204:	7c 39       	cpi	r23, 0x9C	; 156
     206:	7c 39       	cpi	r23, 0x9C	; 156
     208:	7c 39       	cpi	r23, 0x9C	; 156
     20a:	7c 39       	cpi	r23, 0x9C	; 156
     20c:	7c 39       	cpi	r23, 0x9C	; 156
     20e:	7c 39       	cpi	r23, 0x9C	; 156
     210:	7c 39       	cpi	r23, 0x9C	; 156
     212:	7c 39       	cpi	r23, 0x9C	; 156
     214:	7c 39       	cpi	r23, 0x9C	; 156
     216:	7c 39       	cpi	r23, 0x9C	; 156
     218:	7c 39       	cpi	r23, 0x9C	; 156
     21a:	7c 39       	cpi	r23, 0x9C	; 156
     21c:	7c 39       	cpi	r23, 0x9C	; 156
     21e:	7c 39       	cpi	r23, 0x9C	; 156
     220:	7c 39       	cpi	r23, 0x9C	; 156
     222:	7c 39       	cpi	r23, 0x9C	; 156
     224:	7c 39       	cpi	r23, 0x9C	; 156
     226:	7c 39       	cpi	r23, 0x9C	; 156
     228:	7c 39       	cpi	r23, 0x9C	; 156
     22a:	70 39       	cpi	r23, 0x90	; 144
     22c:	d0 48       	sbci	r29, 0x80	; 128
     22e:	da 48       	sbci	r29, 0x8A	; 138
     230:	e4 48       	sbci	r30, 0x84	; 132
     232:	ee 48       	sbci	r30, 0x8E	; 142
     234:	f8 48       	sbci	r31, 0x88	; 136
     236:	02 49       	sbci	r16, 0x92	; 146
     238:	0c 49       	sbci	r16, 0x9C	; 156
     23a:	16 49       	sbci	r17, 0x96	; 150
     23c:	20 49       	sbci	r18, 0x90	; 144
     23e:	2a 49       	sbci	r18, 0x9A	; 154
     240:	34 49       	sbci	r19, 0x94	; 148
     242:	3e 49       	sbci	r19, 0x9E	; 158
     244:	48 49       	sbci	r20, 0x98	; 152
     246:	52 49       	sbci	r21, 0x92	; 146
     248:	5c 49       	sbci	r21, 0x9C	; 156
     24a:	66 49       	sbci	r22, 0x96	; 150
     24c:	70 49       	sbci	r23, 0x90	; 144
     24e:	7a 49       	sbci	r23, 0x9A	; 154

00000250 <__trampolines_end>:
     250:	4e 41       	sbci	r20, 0x1E	; 30
     252:	4e 49       	Address 0x00000252 is out of bounds.
.word	0xffff	; ????

00000253 <pstr_inity>:
     253:	49 4e 49 54 59                                      INITY

00000258 <pstr_inf>:
     258:	49 4e 46                                            INF

0000025b <pwr_m10>:
     25b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     26b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000273 <pwr_p10>:
     273:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     283:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000028b <strfmonths>:
     28b:	4a 61 6e 75 61 72 79 20 46 65 62 72 75 61 72 79     January February
     29b:	20 4d 61 72 63 68 20 41 70 72 69 6c 20 4d 61 79      March April May
     2ab:	20 4a 75 6e 65 20 4a 75 6c 79 20 41 75 67 75 73      June July Augus
     2bb:	74 20 53 65 70 74 65 6d 62 65 72 20 4f 63 74 6f     t September Octo
     2cb:	62 65 72 20 4e 6f 76 65 6d 62 65 72 20 44 65 63     ber November Dec
     2db:	65 6d 62 65 72 20 00                                ember .

000002e2 <strfwkdays>:
     2e2:	53 75 6e 64 61 79 20 4d 6f 6e 64 61 79 20 54 75     Sunday Monday Tu
     2f2:	65 73 64 61 79 20 57 65 64 6e 65 73 64 61 79 20     esday Wednesday 
     302:	54 68 75 72 73 64 61 79 20 46 72 69 64 61 79 20     Thursday Friday 
     312:	53 61 74 75 72 64 61 79 20 00                       Saturday .

0000031c <ascdays>:
     31c:	53 75 6e 4d 6f 6e 54 75 65 57 65 64 54 68 75 46     SunMonTueWedThuF
     32c:	72 69 53 61 74 00                                   riSat.

00000332 <ascmonths>:
     332:	4a 61 6e 46 65 62 4d 61 72 41 70 72 4d 61 79 4a     JanFebMarAprMayJ
     342:	75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f     unJulAugSepOctNo
     352:	76 44 65 63 00 00                                   vDec..

00000358 <__ctors_start>:
     358:	55 28       	or	r5, r5
     35a:	47 29       	or	r20, r7

0000035c <__ctors_end>:
     35c:	5c 28       	or	r5, r12
     35e:	4e 29       	or	r20, r14

00000360 <__dtors_end>:
     360:	11 24       	eor	r1, r1
     362:	1f be       	out	0x3f, r1	; 63
     364:	cf ef       	ldi	r28, 0xFF	; 255
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df e7       	ldi	r29, 0x7F	; 127
     36a:	de bf       	out	0x3e, r29	; 62

0000036c <__do_copy_data>:
     36c:	16 e4       	ldi	r17, 0x46	; 70
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e4       	ldi	r27, 0x40	; 64
     372:	e4 e5       	ldi	r30, 0x54	; 84
     374:	f6 ea       	ldi	r31, 0xA6	; 166
     376:	00 e0       	ldi	r16, 0x00	; 0
     378:	0b bf       	out	0x3b, r16	; 59
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__do_copy_data+0x14>
     37c:	07 90       	elpm	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	aa 39       	cpi	r26, 0x9A	; 154
     382:	b1 07       	cpc	r27, r17
     384:	d9 f7       	brne	.-10     	; 0x37c <__do_copy_data+0x10>

00000386 <__do_clear_bss>:
     386:	2a e4       	ldi	r18, 0x4A	; 74
     388:	aa e9       	ldi	r26, 0x9A	; 154
     38a:	b6 e4       	ldi	r27, 0x46	; 70
     38c:	01 c0       	rjmp	.+2      	; 0x390 <.do_clear_bss_start>

0000038e <.do_clear_bss_loop>:
     38e:	1d 92       	st	X+, r1

00000390 <.do_clear_bss_start>:
     390:	a1 3b       	cpi	r26, 0xB1	; 177
     392:	b2 07       	cpc	r27, r18
     394:	e1 f7       	brne	.-8      	; 0x38e <.do_clear_bss_loop>

00000396 <__do_global_ctors>:
     396:	11 e0       	ldi	r17, 0x01	; 1
     398:	ce ea       	ldi	r28, 0xAE	; 174
     39a:	d1 e0       	ldi	r29, 0x01	; 1
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <__do_global_ctors+0x10>
     39e:	21 97       	sbiw	r28, 0x01	; 1
     3a0:	fe 01       	movw	r30, r28
     3a2:	0e 94 95 4c 	call	0x992a	; 0x992a <__tablejump2__>
     3a6:	cc 3a       	cpi	r28, 0xAC	; 172
     3a8:	d1 07       	cpc	r29, r17
     3aa:	c9 f7       	brne	.-14     	; 0x39e <__do_global_ctors+0x8>
     3ac:	0e 94 8e 11 	call	0x231c	; 0x231c <main>
     3b0:	0c 94 1d 53 	jmp	0xa63a	; 0xa63a <__do_global_dtors>

000003b4 <__bad_interrupt>:
     3b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b8 <is_leap_year>:
     3b8:	9c 01       	movw	r18, r24
     3ba:	23 70       	andi	r18, 0x03	; 3
     3bc:	33 27       	eor	r19, r19
     3be:	23 2b       	or	r18, r19
     3c0:	59 f4       	brne	.+22     	; 0x3d8 <is_leap_year+0x20>
     3c2:	64 e6       	ldi	r22, 0x64	; 100
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     3ca:	89 2b       	or	r24, r25
     3cc:	39 f4       	brne	.+14     	; 0x3dc <is_leap_year+0x24>
     3ce:	63 70       	andi	r22, 0x03	; 3
     3d0:	77 27       	eor	r23, r23
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	67 2b       	or	r22, r23
     3d6:	19 f0       	breq	.+6      	; 0x3de <is_leap_year+0x26>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	08 95       	ret
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	08 95       	ret

000003e0 <localtime>:
     3e0:	6d e9       	ldi	r22, 0x9D	; 157
     3e2:	7a e4       	ldi	r23, 0x4A	; 74
     3e4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <localtime_r>
     3e8:	8d e9       	ldi	r24, 0x9D	; 157
     3ea:	9a e4       	ldi	r25, 0x4A	; 74
     3ec:	08 95       	ret

000003ee <localtime_r>:
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
     400:	00 d0       	rcall	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	6c 01       	movw	r12, r24
     408:	7b 01       	movw	r14, r22
     40a:	e0 91 ad 4a 	lds	r30, 0x4AAD	; 0x804aad <__dst_ptr>
     40e:	f0 91 ae 4a 	lds	r31, 0x4AAE	; 0x804aae <__dst_ptr+0x1>
     412:	30 97       	sbiw	r30, 0x00	; 0
     414:	29 f0       	breq	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     416:	69 ea       	ldi	r22, 0xA9	; 169
     418:	7a e4       	ldi	r23, 0x4A	; 74
     41a:	09 95       	icall
     41c:	8c 01       	movw	r16, r24
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     420:	0f ef       	ldi	r16, 0xFF	; 255
     422:	1f ef       	ldi	r17, 0xFF	; 255
     424:	f6 01       	movw	r30, r12
     426:	40 81       	ld	r20, Z
     428:	51 81       	ldd	r21, Z+1	; 0x01
     42a:	62 81       	ldd	r22, Z+2	; 0x02
     42c:	73 81       	ldd	r23, Z+3	; 0x03
     42e:	80 91 a9 4a 	lds	r24, 0x4AA9	; 0x804aa9 <__utc_offset>
     432:	90 91 aa 4a 	lds	r25, 0x4AAA	; 0x804aaa <__utc_offset+0x1>
     436:	a0 91 ab 4a 	lds	r26, 0x4AAB	; 0x804aab <__utc_offset+0x2>
     43a:	b0 91 ac 4a 	lds	r27, 0x4AAC	; 0x804aac <__utc_offset+0x3>
     43e:	84 0f       	add	r24, r20
     440:	95 1f       	adc	r25, r21
     442:	a6 1f       	adc	r26, r22
     444:	b7 1f       	adc	r27, r23
     446:	10 16       	cp	r1, r16
     448:	11 06       	cpc	r1, r17
     44a:	4c f4       	brge	.+18     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     44c:	a8 01       	movw	r20, r16
     44e:	01 2e       	mov	r0, r17
     450:	00 0c       	add	r0, r0
     452:	66 0b       	sbc	r22, r22
     454:	77 0b       	sbc	r23, r23
     456:	84 0f       	add	r24, r20
     458:	95 1f       	adc	r25, r21
     45a:	a6 1f       	adc	r26, r22
     45c:	b7 1f       	adc	r27, r23
     45e:	89 83       	std	Y+1, r24	; 0x01
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	ab 83       	std	Y+3, r26	; 0x03
     464:	bc 83       	std	Y+4, r27	; 0x04
     466:	b7 01       	movw	r22, r14
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <gmtime_r>
     470:	f7 01       	movw	r30, r14
     472:	02 87       	std	Z+10, r16	; 0x0a
     474:	13 87       	std	Z+11, r17	; 0x0b
     476:	24 96       	adiw	r28, 0x04	; 4
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	08 95       	ret

0000048e <month_length>:
     48e:	62 30       	cpi	r22, 0x02	; 2
     490:	21 f4       	brne	.+8      	; 0x49a <month_length+0xc>
     492:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <is_leap_year>
     496:	84 5e       	subi	r24, 0xE4	; 228
     498:	08 95       	ret
     49a:	68 30       	cpi	r22, 0x08	; 8
     49c:	08 f0       	brcs	.+2      	; 0x4a0 <month_length+0x12>
     49e:	6f 5f       	subi	r22, 0xFF	; 255
     4a0:	61 70       	andi	r22, 0x01	; 1
     4a2:	8e e1       	ldi	r24, 0x1E	; 30
     4a4:	86 0f       	add	r24, r22
     4a6:	08 95       	ret

000004a8 <set_system_time>:
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	60 93 99 4a 	sts	0x4A99, r22	; 0x804a99 <__system_time>
     4b0:	70 93 9a 4a 	sts	0x4A9A, r23	; 0x804a9a <__system_time+0x1>
     4b4:	80 93 9b 4a 	sts	0x4A9B, r24	; 0x804a9b <__system_time+0x2>
     4b8:	90 93 9c 4a 	sts	0x4A9C, r25	; 0x804a9c <__system_time+0x3>
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	08 95       	ret

000004c0 <pgm_copystring>:
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	0f 93       	push	r16
     4c8:	6b 01       	movw	r12, r22
     4ca:	e8 2e       	mov	r14, r24
     4cc:	7c 2d       	mov	r23, r12
     4ce:	6d 2d       	mov	r22, r13
     4d0:	5e 2d       	mov	r21, r14
     4d2:	ae 2d       	mov	r26, r14
     4d4:	c6 01       	movw	r24, r12
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	a1 1d       	adc	r26, r1
     4da:	44 23       	and	r20, r20
     4dc:	51 f0       	breq	.+20     	; 0x4f2 <pgm_copystring+0x32>
     4de:	6c 01       	movw	r12, r24
     4e0:	ea 2e       	mov	r14, r26
     4e2:	e7 2f       	mov	r30, r23
     4e4:	f6 2f       	mov	r31, r22
     4e6:	0e 94 0a 53 	call	0xa614	; 0xa614 <__xload_1>
     4ea:	60 32       	cpi	r22, 0x20	; 32
     4ec:	79 f7       	brne	.-34     	; 0x4cc <pgm_copystring+0xc>
     4ee:	41 50       	subi	r20, 0x01	; 1
     4f0:	ed cf       	rjmp	.-38     	; 0x4cc <pgm_copystring+0xc>
     4f2:	f6 01       	movw	r30, r12
     4f4:	0e 94 0a 53 	call	0xa614	; 0xa614 <__xload_1>
     4f8:	6c 01       	movw	r12, r24
     4fa:	ea 2e       	mov	r14, r26
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	60 32       	cpi	r22, 0x20	; 32
     500:	39 f4       	brne	.+14     	; 0x510 <pgm_copystring+0x50>
     502:	f9 01       	movw	r30, r18
     504:	10 82       	st	Z, r1
     506:	0f 91       	pop	r16
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	08 95       	ret
     510:	80 17       	cp	r24, r16
     512:	b9 f3       	breq	.-18     	; 0x502 <pgm_copystring+0x42>
     514:	2f 5f       	subi	r18, 0xFF	; 255
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	f9 01       	movw	r30, r18
     51a:	31 97       	sbiw	r30, 0x01	; 1
     51c:	60 83       	st	Z, r22
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	f6 01       	movw	r30, r12
     522:	5e 2d       	mov	r21, r14
     524:	0e 94 0a 53 	call	0xa614	; 0xa614 <__xload_1>
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	c9 1a       	sub	r12, r25
     52c:	d9 0a       	sbc	r13, r25
     52e:	e9 0a       	sbc	r14, r25
     530:	e6 cf       	rjmp	.-52     	; 0x4fe <pgm_copystring+0x3e>

00000532 <strftime>:
     532:	2f 92       	push	r2
     534:	3f 92       	push	r3
     536:	4f 92       	push	r4
     538:	5f 92       	push	r5
     53a:	6f 92       	push	r6
     53c:	7f 92       	push	r7
     53e:	8f 92       	push	r8
     540:	9f 92       	push	r9
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	a2 97       	sbiw	r28, 0x22	; 34
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	de bf       	out	0x3e, r29	; 62
     560:	2c 01       	movw	r4, r24
     562:	69 a3       	std	Y+33, r22	; 0x21
     564:	7a a3       	std	Y+34, r23	; 0x22
     566:	4a 01       	movw	r8, r20
     568:	79 01       	movw	r14, r18
     56a:	61 2c       	mov	r6, r1
     56c:	71 2c       	mov	r7, r1
     56e:	9e 01       	movw	r18, r28
     570:	2f 5f       	subi	r18, 0xFF	; 255
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	69 01       	movw	r12, r18
     576:	84 e6       	ldi	r24, 0x64	; 100
     578:	28 2e       	mov	r2, r24
     57a:	31 2c       	mov	r3, r1
     57c:	9b e3       	ldi	r25, 0x3B	; 59
     57e:	a9 2e       	mov	r10, r25
     580:	96 e4       	ldi	r25, 0x46	; 70
     582:	b9 2e       	mov	r11, r25
     584:	29 a1       	ldd	r18, Y+33	; 0x21
     586:	3a a1       	ldd	r19, Y+34	; 0x22
     588:	62 16       	cp	r6, r18
     58a:	73 06       	cpc	r7, r19
     58c:	08 f0       	brcs	.+2      	; 0x590 <strftime+0x5e>
     58e:	cd c2       	rjmp	.+1434   	; 0xb2a <strftime+0x5f8>
     590:	d4 01       	movw	r26, r8
     592:	8c 91       	ld	r24, X
     594:	85 32       	cpi	r24, 0x25	; 37
     596:	09 f0       	breq	.+2      	; 0x59a <strftime+0x68>
     598:	bc c2       	rjmp	.+1400   	; 0xb12 <strftime+0x5e0>
     59a:	11 96       	adiw	r26, 0x01	; 1
     59c:	1c 91       	ld	r17, X
     59e:	15 34       	cpi	r17, 0x45	; 69
     5a0:	31 f0       	breq	.+12     	; 0x5ae <strftime+0x7c>
     5a2:	1f 34       	cpi	r17, 0x4F	; 79
     5a4:	21 f0       	breq	.+8      	; 0x5ae <strftime+0x7c>
     5a6:	b2 e0       	ldi	r27, 0x02	; 2
     5a8:	8b 0e       	add	r8, r27
     5aa:	91 1c       	adc	r9, r1
     5ac:	06 c0       	rjmp	.+12     	; 0x5ba <strftime+0x88>
     5ae:	f4 01       	movw	r30, r8
     5b0:	12 81       	ldd	r17, Z+2	; 0x02
     5b2:	94 01       	movw	r18, r8
     5b4:	2d 5f       	subi	r18, 0xFD	; 253
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	49 01       	movw	r8, r18
     5ba:	19 35       	cpi	r17, 0x59	; 89
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <strftime+0x8e>
     5be:	32 c2       	rjmp	.+1124   	; 0xa24 <strftime+0x4f2>
     5c0:	0c f0       	brlt	.+2      	; 0x5c4 <strftime+0x92>
     5c2:	60 c0       	rjmp	.+192    	; 0x684 <strftime+0x152>
     5c4:	19 34       	cpi	r17, 0x49	; 73
     5c6:	09 f4       	brne	.+2      	; 0x5ca <strftime+0x98>
     5c8:	3f c1       	rjmp	.+638    	; 0x848 <strftime+0x316>
     5ca:	44 f5       	brge	.+80     	; 0x61c <strftime+0xea>
     5cc:	13 34       	cpi	r17, 0x43	; 67
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <strftime+0xa0>
     5d0:	e7 c0       	rjmp	.+462    	; 0x7a0 <strftime+0x26e>
     5d2:	54 f4       	brge	.+20     	; 0x5e8 <strftime+0xb6>
     5d4:	11 34       	cpi	r17, 0x41	; 65
     5d6:	09 f4       	brne	.+2      	; 0x5da <strftime+0xa8>
     5d8:	be c0       	rjmp	.+380    	; 0x756 <strftime+0x224>
     5da:	0c f0       	brlt	.+2      	; 0x5de <strftime+0xac>
     5dc:	ca c0       	rjmp	.+404    	; 0x772 <strftime+0x240>
     5de:	15 32       	cpi	r17, 0x25	; 37
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <strftime+0xb2>
     5e2:	74 c2       	rjmp	.+1256   	; 0xacc <strftime+0x59a>
     5e4:	19 83       	std	Y+1, r17	; 0x01
     5e6:	75 c2       	rjmp	.+1258   	; 0xad2 <strftime+0x5a0>
     5e8:	16 34       	cpi	r17, 0x46	; 70
     5ea:	09 f4       	brne	.+2      	; 0x5ee <strftime+0xbc>
     5ec:	ea c0       	rjmp	.+468    	; 0x7c2 <strftime+0x290>
     5ee:	64 f4       	brge	.+24     	; 0x608 <strftime+0xd6>
     5f0:	14 34       	cpi	r17, 0x44	; 68
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <strftime+0xc4>
     5f4:	6b c2       	rjmp	.+1238   	; 0xacc <strftime+0x59a>
     5f6:	f7 01       	movw	r30, r14
     5f8:	86 81       	ldd	r24, Z+6	; 0x06
     5fa:	97 81       	ldd	r25, Z+7	; 0x07
     5fc:	b1 01       	movw	r22, r2
     5fe:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     602:	9f 93       	push	r25
     604:	8f 93       	push	r24
     606:	e7 c1       	rjmp	.+974    	; 0x9d6 <strftime+0x4a4>
     608:	17 34       	cpi	r17, 0x47	; 71
     60a:	09 f4       	brne	.+2      	; 0x60e <strftime+0xdc>
     60c:	f8 c0       	rjmp	.+496    	; 0x7fe <strftime+0x2cc>
     60e:	18 34       	cpi	r17, 0x48	; 72
     610:	09 f0       	breq	.+2      	; 0x614 <strftime+0xe2>
     612:	5c c2       	rjmp	.+1208   	; 0xacc <strftime+0x59a>
     614:	d7 01       	movw	r26, r14
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	8c 91       	ld	r24, X
     61a:	30 c1       	rjmp	.+608    	; 0x87c <strftime+0x34a>
     61c:	14 35       	cpi	r17, 0x54	; 84
     61e:	09 f4       	brne	.+2      	; 0x622 <strftime+0xf0>
     620:	89 c1       	rjmp	.+786    	; 0x934 <strftime+0x402>
     622:	64 f4       	brge	.+24     	; 0x63c <strftime+0x10a>
     624:	12 35       	cpi	r17, 0x52	; 82
     626:	09 f4       	brne	.+2      	; 0x62a <strftime+0xf8>
     628:	6e c1       	rjmp	.+732    	; 0x906 <strftime+0x3d4>
     62a:	0c f0       	brlt	.+2      	; 0x62e <strftime+0xfc>
     62c:	25 c1       	rjmp	.+586    	; 0x878 <strftime+0x346>
     62e:	1d 34       	cpi	r17, 0x4D	; 77
     630:	09 f0       	breq	.+2      	; 0x634 <strftime+0x102>
     632:	4c c2       	rjmp	.+1176   	; 0xacc <strftime+0x59a>
     634:	d7 01       	movw	r26, r14
     636:	11 96       	adiw	r26, 0x01	; 1
     638:	8c 91       	ld	r24, X
     63a:	20 c1       	rjmp	.+576    	; 0x87c <strftime+0x34a>
     63c:	16 35       	cpi	r17, 0x56	; 86
     63e:	09 f4       	brne	.+2      	; 0x642 <strftime+0x110>
     640:	a5 c1       	rjmp	.+842    	; 0x98c <strftime+0x45a>
     642:	0c f4       	brge	.+2      	; 0x646 <strftime+0x114>
     644:	a1 c1       	rjmp	.+834    	; 0x988 <strftime+0x456>
     646:	17 35       	cpi	r17, 0x57	; 87
     648:	09 f4       	brne	.+2      	; 0x64c <strftime+0x11a>
     64a:	b4 c1       	rjmp	.+872    	; 0x9b4 <strftime+0x482>
     64c:	18 35       	cpi	r17, 0x58	; 88
     64e:	09 f0       	breq	.+2      	; 0x652 <strftime+0x120>
     650:	3d c2       	rjmp	.+1146   	; 0xacc <strftime+0x59a>
     652:	f7 01       	movw	r30, r14
     654:	80 81       	ld	r24, Z
     656:	28 2f       	mov	r18, r24
     658:	08 2e       	mov	r0, r24
     65a:	00 0c       	add	r0, r0
     65c:	33 0b       	sbc	r19, r19
     65e:	3f 93       	push	r19
     660:	8f 93       	push	r24
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	28 2f       	mov	r18, r24
     666:	08 2e       	mov	r0, r24
     668:	00 0c       	add	r0, r0
     66a:	33 0b       	sbc	r19, r19
     66c:	3f 93       	push	r19
     66e:	8f 93       	push	r24
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	28 2f       	mov	r18, r24
     674:	08 2e       	mov	r0, r24
     676:	00 0c       	add	r0, r0
     678:	33 0b       	sbc	r19, r19
     67a:	3f 93       	push	r19
     67c:	8f 93       	push	r24
     67e:	80 e8       	ldi	r24, 0x80	; 128
     680:	96 e4       	ldi	r25, 0x46	; 70
     682:	c0 c1       	rjmp	.+896    	; 0xa04 <strftime+0x4d2>
     684:	1d 36       	cpi	r17, 0x6D	; 109
     686:	09 f4       	brne	.+2      	; 0x68a <strftime+0x158>
     688:	f0 c0       	rjmp	.+480    	; 0x86a <strftime+0x338>
     68a:	ac f5       	brge	.+106    	; 0x6f6 <strftime+0x1c4>
     68c:	14 36       	cpi	r17, 0x64	; 100
     68e:	09 f4       	brne	.+2      	; 0x692 <strftime+0x160>
     690:	94 c0       	rjmp	.+296    	; 0x7ba <strftime+0x288>
     692:	74 f4       	brge	.+28     	; 0x6b0 <strftime+0x17e>
     694:	12 36       	cpi	r17, 0x62	; 98
     696:	09 f4       	brne	.+2      	; 0x69a <strftime+0x168>
     698:	66 c0       	rjmp	.+204    	; 0x766 <strftime+0x234>
     69a:	0c f0       	brlt	.+2      	; 0x69e <strftime+0x16c>
     69c:	75 c0       	rjmp	.+234    	; 0x788 <strftime+0x256>
     69e:	11 36       	cpi	r17, 0x61	; 97
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <strftime+0x172>
     6a2:	14 c2       	rjmp	.+1064   	; 0xacc <strftime+0x59a>
     6a4:	03 e0       	ldi	r16, 0x03	; 3
     6a6:	96 01       	movw	r18, r12
     6a8:	d7 01       	movw	r26, r14
     6aa:	14 96       	adiw	r26, 0x04	; 4
     6ac:	4c 91       	ld	r20, X
     6ae:	57 c0       	rjmp	.+174    	; 0x75e <strftime+0x22c>
     6b0:	17 36       	cpi	r17, 0x67	; 103
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <strftime+0x184>
     6b4:	a4 c0       	rjmp	.+328    	; 0x7fe <strftime+0x2cc>
     6b6:	74 f4       	brge	.+28     	; 0x6d4 <strftime+0x1a2>
     6b8:	15 36       	cpi	r17, 0x65	; 101
     6ba:	09 f0       	breq	.+2      	; 0x6be <strftime+0x18c>
     6bc:	07 c2       	rjmp	.+1038   	; 0xacc <strftime+0x59a>
     6be:	f7 01       	movw	r30, r14
     6c0:	83 81       	ldd	r24, Z+3	; 0x03
     6c2:	28 2f       	mov	r18, r24
     6c4:	08 2e       	mov	r0, r24
     6c6:	00 0c       	add	r0, r0
     6c8:	33 0b       	sbc	r19, r19
     6ca:	3f 93       	push	r19
     6cc:	8f 93       	push	r24
     6ce:	80 e4       	ldi	r24, 0x40	; 64
     6d0:	96 e4       	ldi	r25, 0x46	; 70
     6d2:	c8 c0       	rjmp	.+400    	; 0x864 <strftime+0x332>
     6d4:	18 36       	cpi	r17, 0x68	; 104
     6d6:	09 f4       	brne	.+2      	; 0x6da <strftime+0x1a8>
     6d8:	46 c0       	rjmp	.+140    	; 0x766 <strftime+0x234>
     6da:	1a 36       	cpi	r17, 0x6A	; 106
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <strftime+0x1ae>
     6de:	f6 c1       	rjmp	.+1004   	; 0xacc <strftime+0x59a>
     6e0:	d7 01       	movw	r26, r14
     6e2:	18 96       	adiw	r26, 0x08	; 8
     6e4:	8d 91       	ld	r24, X+
     6e6:	9c 91       	ld	r25, X
     6e8:	19 97       	sbiw	r26, 0x09	; 9
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	86 e5       	ldi	r24, 0x56	; 86
     6f2:	96 e4       	ldi	r25, 0x46	; 70
     6f4:	b7 c0       	rjmp	.+366    	; 0x864 <strftime+0x332>
     6f6:	15 37       	cpi	r17, 0x75	; 117
     6f8:	09 f4       	brne	.+2      	; 0x6fc <strftime+0x1ca>
     6fa:	35 c1       	rjmp	.+618    	; 0x966 <strftime+0x434>
     6fc:	b4 f4       	brge	.+44     	; 0x72a <strftime+0x1f8>
     6fe:	10 37       	cpi	r17, 0x70	; 112
     700:	09 f4       	brne	.+2      	; 0x704 <strftime+0x1d2>
     702:	c2 c0       	rjmp	.+388    	; 0x888 <strftime+0x356>
     704:	34 f4       	brge	.+12     	; 0x712 <strftime+0x1e0>
     706:	1e 36       	cpi	r17, 0x6E	; 110
     708:	09 f0       	breq	.+2      	; 0x70c <strftime+0x1da>
     70a:	e0 c1       	rjmp	.+960    	; 0xacc <strftime+0x59a>
     70c:	8a e0       	ldi	r24, 0x0A	; 10
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	e0 c1       	rjmp	.+960    	; 0xad2 <strftime+0x5a0>
     712:	12 37       	cpi	r17, 0x72	; 114
     714:	09 f4       	brne	.+2      	; 0x718 <strftime+0x1e6>
     716:	c6 c0       	rjmp	.+396    	; 0x8a4 <strftime+0x372>
     718:	14 37       	cpi	r17, 0x74	; 116
     71a:	09 f0       	breq	.+2      	; 0x71e <strftime+0x1ec>
     71c:	d7 c1       	rjmp	.+942    	; 0xacc <strftime+0x59a>
     71e:	6c e6       	ldi	r22, 0x6C	; 108
     720:	76 e4       	ldi	r23, 0x46	; 70
     722:	c6 01       	movw	r24, r12
     724:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <strcpy>
     728:	d4 c1       	rjmp	.+936    	; 0xad2 <strftime+0x5a0>
     72a:	18 37       	cpi	r17, 0x78	; 120
     72c:	09 f4       	brne	.+2      	; 0x730 <strftime+0x1fe>
     72e:	48 c1       	rjmp	.+656    	; 0x9c0 <strftime+0x48e>
     730:	5c f4       	brge	.+22     	; 0x748 <strftime+0x216>
     732:	17 37       	cpi	r17, 0x77	; 119
     734:	09 f0       	breq	.+2      	; 0x738 <strftime+0x206>
     736:	ca c1       	rjmp	.+916    	; 0xacc <strftime+0x59a>
     738:	f7 01       	movw	r30, r14
     73a:	84 81       	ldd	r24, Z+4	; 0x04
     73c:	28 2f       	mov	r18, r24
     73e:	08 2e       	mov	r0, r24
     740:	00 0c       	add	r0, r0
     742:	33 0b       	sbc	r19, r19
     744:	3f 93       	push	r19
     746:	74 c1       	rjmp	.+744    	; 0xa30 <strftime+0x4fe>
     748:	19 37       	cpi	r17, 0x79	; 121
     74a:	09 f4       	brne	.+2      	; 0x74e <strftime+0x21c>
     74c:	5e c1       	rjmp	.+700    	; 0xa0a <strftime+0x4d8>
     74e:	1a 37       	cpi	r17, 0x7A	; 122
     750:	09 f4       	brne	.+2      	; 0x754 <strftime+0x222>
     752:	7e c1       	rjmp	.+764    	; 0xa50 <strftime+0x51e>
     754:	bb c1       	rjmp	.+886    	; 0xacc <strftime+0x59a>
     756:	0f ef       	ldi	r16, 0xFF	; 255
     758:	96 01       	movw	r18, r12
     75a:	f7 01       	movw	r30, r14
     75c:	44 81       	ldd	r20, Z+4	; 0x04
     75e:	62 ee       	ldi	r22, 0xE2	; 226
     760:	72 e0       	ldi	r23, 0x02	; 2
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0d c0       	rjmp	.+26     	; 0x780 <strftime+0x24e>
     766:	03 e0       	ldi	r16, 0x03	; 3
     768:	96 01       	movw	r18, r12
     76a:	d7 01       	movw	r26, r14
     76c:	15 96       	adiw	r26, 0x05	; 5
     76e:	4c 91       	ld	r20, X
     770:	04 c0       	rjmp	.+8      	; 0x77a <strftime+0x248>
     772:	0f ef       	ldi	r16, 0xFF	; 255
     774:	96 01       	movw	r18, r12
     776:	f7 01       	movw	r30, r14
     778:	45 81       	ldd	r20, Z+5	; 0x05
     77a:	6b e8       	ldi	r22, 0x8B	; 139
     77c:	72 e0       	ldi	r23, 0x02	; 2
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 60 02 	call	0x4c0	; 0x4c0 <pgm_copystring>
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a7 c1       	rjmp	.+846    	; 0xad6 <strftime+0x5a4>
     788:	b6 01       	movw	r22, r12
     78a:	c7 01       	movw	r24, r14
     78c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <asctime_r>
     790:	f6 01       	movw	r30, r12
     792:	cf 01       	movw	r24, r30
     794:	8c 19       	sub	r24, r12
     796:	9d 09       	sbc	r25, r13
     798:	21 91       	ld	r18, Z+
     79a:	21 11       	cpse	r18, r1
     79c:	fa cf       	rjmp	.-12     	; 0x792 <strftime+0x260>
     79e:	9b c1       	rjmp	.+822    	; 0xad6 <strftime+0x5a4>
     7a0:	d7 01       	movw	r26, r14
     7a2:	16 96       	adiw	r26, 0x06	; 6
     7a4:	8d 91       	ld	r24, X+
     7a6:	9c 91       	ld	r25, X
     7a8:	17 97       	sbiw	r26, 0x07	; 7
     7aa:	84 59       	subi	r24, 0x94	; 148
     7ac:	98 4f       	sbci	r25, 0xF8	; 248
     7ae:	b1 01       	movw	r22, r2
     7b0:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     7b4:	7f 93       	push	r23
     7b6:	6f 93       	push	r22
     7b8:	3b c0       	rjmp	.+118    	; 0x830 <strftime+0x2fe>
     7ba:	d7 01       	movw	r26, r14
     7bc:	13 96       	adiw	r26, 0x03	; 3
     7be:	8c 91       	ld	r24, X
     7c0:	5d c0       	rjmp	.+186    	; 0x87c <strftime+0x34a>
     7c2:	d7 01       	movw	r26, r14
     7c4:	13 96       	adiw	r26, 0x03	; 3
     7c6:	8c 91       	ld	r24, X
     7c8:	13 97       	sbiw	r26, 0x03	; 3
     7ca:	28 2f       	mov	r18, r24
     7cc:	08 2e       	mov	r0, r24
     7ce:	00 0c       	add	r0, r0
     7d0:	33 0b       	sbc	r19, r19
     7d2:	3f 93       	push	r19
     7d4:	8f 93       	push	r24
     7d6:	15 96       	adiw	r26, 0x05	; 5
     7d8:	8c 91       	ld	r24, X
     7da:	15 97       	sbiw	r26, 0x05	; 5
     7dc:	08 2e       	mov	r0, r24
     7de:	00 0c       	add	r0, r0
     7e0:	99 0b       	sbc	r25, r25
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	9f 93       	push	r25
     7e6:	8f 93       	push	r24
     7e8:	16 96       	adiw	r26, 0x06	; 6
     7ea:	8d 91       	ld	r24, X+
     7ec:	9c 91       	ld	r25, X
     7ee:	17 97       	sbiw	r26, 0x07	; 7
     7f0:	84 59       	subi	r24, 0x94	; 148
     7f2:	98 4f       	sbci	r25, 0xF8	; 248
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	84 e4       	ldi	r24, 0x44	; 68
     7fa:	96 e4       	ldi	r25, 0x46	; 70
     7fc:	03 c1       	rjmp	.+518    	; 0xa04 <strftime+0x4d2>
     7fe:	d7 01       	movw	r26, r14
     800:	18 96       	adiw	r26, 0x08	; 8
     802:	6d 91       	ld	r22, X+
     804:	7c 91       	ld	r23, X
     806:	19 97       	sbiw	r26, 0x09	; 9
     808:	16 96       	adiw	r26, 0x06	; 6
     80a:	8d 91       	ld	r24, X+
     80c:	9c 91       	ld	r25, X
     80e:	17 97       	sbiw	r26, 0x07	; 7
     810:	ae 01       	movw	r20, r28
     812:	45 5e       	subi	r20, 0xE5	; 229
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	84 59       	subi	r24, 0x94	; 148
     818:	98 4f       	sbci	r25, 0xF8	; 248
     81a:	0e 94 55 07 	call	0xeaa	; 0xeaa <iso_week_date_r>
     81e:	17 36       	cpi	r17, 0x67	; 103
     820:	51 f4       	brne	.+20     	; 0x836 <strftime+0x304>
     822:	8b 8d       	ldd	r24, Y+27	; 0x1b
     824:	9c 8d       	ldd	r25, Y+28	; 0x1c
     826:	b1 01       	movw	r22, r2
     828:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	ec e4       	ldi	r30, 0x4C	; 76
     832:	f6 e4       	ldi	r31, 0x46	; 70
     834:	a6 c0       	rjmp	.+332    	; 0x982 <strftime+0x450>
     836:	8c 8d       	ldd	r24, Y+28	; 0x1c
     838:	8f 93       	push	r24
     83a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     83c:	8f 93       	push	r24
     83e:	41 e5       	ldi	r20, 0x51	; 81
     840:	56 e4       	ldi	r21, 0x46	; 70
     842:	5f 93       	push	r21
     844:	4f 93       	push	r20
     846:	f9 c0       	rjmp	.+498    	; 0xa3a <strftime+0x508>
     848:	f7 01       	movw	r30, r14
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	6c e0       	ldi	r22, 0x0C	; 12
     84e:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <__divmodqi4>
     852:	99 23       	and	r25, r25
     854:	21 f0       	breq	.+8      	; 0x85e <strftime+0x32c>
     856:	89 2f       	mov	r24, r25
     858:	99 0f       	add	r25, r25
     85a:	99 0b       	sbc	r25, r25
     85c:	de c0       	rjmp	.+444    	; 0xa1a <strftime+0x4e8>
     85e:	8c e0       	ldi	r24, 0x0C	; 12
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	db c0       	rjmp	.+438    	; 0xa1a <strftime+0x4e8>
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	e8 c0       	rjmp	.+464    	; 0xa3a <strftime+0x508>
     86a:	f7 01       	movw	r30, r14
     86c:	85 81       	ldd	r24, Z+5	; 0x05
     86e:	08 2e       	mov	r0, r24
     870:	00 0c       	add	r0, r0
     872:	99 0b       	sbc	r25, r25
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	d1 c0       	rjmp	.+418    	; 0xa1a <strftime+0x4e8>
     878:	d7 01       	movw	r26, r14
     87a:	8c 91       	ld	r24, X
     87c:	28 2f       	mov	r18, r24
     87e:	08 2e       	mov	r0, r24
     880:	00 0c       	add	r0, r0
     882:	33 0b       	sbc	r19, r19
     884:	3f 93       	push	r19
     886:	ca c0       	rjmp	.+404    	; 0xa1c <strftime+0x4ea>
     888:	81 e4       	ldi	r24, 0x41	; 65
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	f7 01       	movw	r30, r14
     88e:	82 81       	ldd	r24, Z+2	; 0x02
     890:	8c 30       	cpi	r24, 0x0C	; 12
     892:	14 f0       	brlt	.+4      	; 0x898 <strftime+0x366>
     894:	80 e5       	ldi	r24, 0x50	; 80
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	8d e4       	ldi	r24, 0x4D	; 77
     89a:	8a 83       	std	Y+2, r24	; 0x02
     89c:	1b 82       	std	Y+3, r1	; 0x03
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	19 c1       	rjmp	.+562    	; 0xad6 <strftime+0x5a4>
     8a4:	d7 01       	movw	r26, r14
     8a6:	12 96       	adiw	r26, 0x02	; 2
     8a8:	8c 91       	ld	r24, X
     8aa:	6c e0       	ldi	r22, 0x0C	; 12
     8ac:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <__divmodqi4>
     8b0:	99 23       	and	r25, r25
     8b2:	21 f0       	breq	.+8      	; 0x8bc <strftime+0x38a>
     8b4:	89 2f       	mov	r24, r25
     8b6:	99 0f       	add	r25, r25
     8b8:	99 0b       	sbc	r25, r25
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <strftime+0x38e>
     8bc:	8c e0       	ldi	r24, 0x0C	; 12
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	f7 01       	movw	r30, r14
     8c2:	20 81       	ld	r18, Z
     8c4:	42 2f       	mov	r20, r18
     8c6:	02 2e       	mov	r0, r18
     8c8:	00 0c       	add	r0, r0
     8ca:	55 0b       	sbc	r21, r21
     8cc:	5f 93       	push	r21
     8ce:	2f 93       	push	r18
     8d0:	21 81       	ldd	r18, Z+1	; 0x01
     8d2:	42 2f       	mov	r20, r18
     8d4:	02 2e       	mov	r0, r18
     8d6:	00 0c       	add	r0, r0
     8d8:	55 0b       	sbc	r21, r21
     8da:	5f 93       	push	r21
     8dc:	2f 93       	push	r18
     8de:	9f 93       	push	r25
     8e0:	8f 93       	push	r24
     8e2:	2b e5       	ldi	r18, 0x5B	; 91
     8e4:	36 e4       	ldi	r19, 0x46	; 70
     8e6:	3f 93       	push	r19
     8e8:	2f 93       	push	r18
     8ea:	df 92       	push	r13
     8ec:	cf 92       	push	r12
     8ee:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	f7 01       	movw	r30, r14
     8f8:	22 81       	ldd	r18, Z+2	; 0x02
     8fa:	2c 30       	cpi	r18, 0x0C	; 12
     8fc:	0c f4       	brge	.+2      	; 0x900 <strftime+0x3ce>
     8fe:	eb c0       	rjmp	.+470    	; 0xad6 <strftime+0x5a4>
     900:	20 e5       	ldi	r18, 0x50	; 80
     902:	2b 87       	std	Y+11, r18	; 0x0b
     904:	e8 c0       	rjmp	.+464    	; 0xad6 <strftime+0x5a4>
     906:	d7 01       	movw	r26, r14
     908:	11 96       	adiw	r26, 0x01	; 1
     90a:	8c 91       	ld	r24, X
     90c:	11 97       	sbiw	r26, 0x01	; 1
     90e:	28 2f       	mov	r18, r24
     910:	08 2e       	mov	r0, r24
     912:	00 0c       	add	r0, r0
     914:	33 0b       	sbc	r19, r19
     916:	3f 93       	push	r19
     918:	8f 93       	push	r24
     91a:	12 96       	adiw	r26, 0x02	; 2
     91c:	8c 91       	ld	r24, X
     91e:	28 2f       	mov	r18, r24
     920:	08 2e       	mov	r0, r24
     922:	00 0c       	add	r0, r0
     924:	33 0b       	sbc	r19, r19
     926:	3f 93       	push	r19
     928:	8f 93       	push	r24
     92a:	83 e7       	ldi	r24, 0x73	; 115
     92c:	96 e4       	ldi	r25, 0x46	; 70
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	c5 c0       	rjmp	.+394    	; 0xabe <strftime+0x58c>
     934:	f7 01       	movw	r30, r14
     936:	80 81       	ld	r24, Z
     938:	28 2f       	mov	r18, r24
     93a:	08 2e       	mov	r0, r24
     93c:	00 0c       	add	r0, r0
     93e:	33 0b       	sbc	r19, r19
     940:	3f 93       	push	r19
     942:	8f 93       	push	r24
     944:	81 81       	ldd	r24, Z+1	; 0x01
     946:	28 2f       	mov	r18, r24
     948:	08 2e       	mov	r0, r24
     94a:	00 0c       	add	r0, r0
     94c:	33 0b       	sbc	r19, r19
     94e:	3f 93       	push	r19
     950:	8f 93       	push	r24
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	28 2f       	mov	r18, r24
     956:	08 2e       	mov	r0, r24
     958:	00 0c       	add	r0, r0
     95a:	33 0b       	sbc	r19, r19
     95c:	3f 93       	push	r19
     95e:	8f 93       	push	r24
     960:	8e e6       	ldi	r24, 0x6E	; 110
     962:	96 e4       	ldi	r25, 0x46	; 70
     964:	4f c0       	rjmp	.+158    	; 0xa04 <strftime+0x4d2>
     966:	d7 01       	movw	r26, r14
     968:	14 96       	adiw	r26, 0x04	; 4
     96a:	8c 91       	ld	r24, X
     96c:	08 2e       	mov	r0, r24
     96e:	00 0c       	add	r0, r0
     970:	99 0b       	sbc	r25, r25
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	11 f4       	brne	.+4      	; 0x97a <strftime+0x448>
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	ed e7       	ldi	r30, 0x7D	; 125
     980:	f6 e4       	ldi	r31, 0x46	; 70
     982:	ff 93       	push	r31
     984:	ef 93       	push	r30
     986:	59 c0       	rjmp	.+178    	; 0xa3a <strftime+0x508>
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	15 c0       	rjmp	.+42     	; 0x9b6 <strftime+0x484>
     98c:	d7 01       	movw	r26, r14
     98e:	18 96       	adiw	r26, 0x08	; 8
     990:	6d 91       	ld	r22, X+
     992:	7c 91       	ld	r23, X
     994:	19 97       	sbiw	r26, 0x09	; 9
     996:	16 96       	adiw	r26, 0x06	; 6
     998:	8d 91       	ld	r24, X+
     99a:	9c 91       	ld	r25, X
     99c:	17 97       	sbiw	r26, 0x07	; 7
     99e:	ae 01       	movw	r20, r28
     9a0:	45 5e       	subi	r20, 0xE5	; 229
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	84 59       	subi	r24, 0x94	; 148
     9a6:	98 4f       	sbci	r25, 0xF8	; 248
     9a8:	0e 94 55 07 	call	0xeaa	; 0xeaa <iso_week_date_r>
     9ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9ae:	8f 93       	push	r24
     9b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9b2:	34 c0       	rjmp	.+104    	; 0xa1c <strftime+0x4ea>
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	c7 01       	movw	r24, r14
     9b8:	0e 94 c1 05 	call	0xb82	; 0xb82 <week_of_year>
     9bc:	1f 92       	push	r1
     9be:	2e c0       	rjmp	.+92     	; 0xa1c <strftime+0x4ea>
     9c0:	d7 01       	movw	r26, r14
     9c2:	16 96       	adiw	r26, 0x06	; 6
     9c4:	8d 91       	ld	r24, X+
     9c6:	9c 91       	ld	r25, X
     9c8:	17 97       	sbiw	r26, 0x07	; 7
     9ca:	b1 01       	movw	r22, r2
     9cc:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	f7 01       	movw	r30, r14
     9d6:	83 81       	ldd	r24, Z+3	; 0x03
     9d8:	28 2f       	mov	r18, r24
     9da:	08 2e       	mov	r0, r24
     9dc:	00 0c       	add	r0, r0
     9de:	33 0b       	sbc	r19, r19
     9e0:	3f 93       	push	r19
     9e2:	8f 93       	push	r24
     9e4:	85 81       	ldd	r24, Z+5	; 0x05
     9e6:	08 2e       	mov	r0, r24
     9e8:	00 0c       	add	r0, r0
     9ea:	99 0b       	sbc	r25, r25
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	9f 93       	push	r25
     9f0:	8f 93       	push	r24
     9f2:	21 e3       	ldi	r18, 0x31	; 49
     9f4:	36 e4       	ldi	r19, 0x46	; 70
     9f6:	3f 93       	push	r19
     9f8:	2f 93       	push	r18
     9fa:	df 92       	push	r13
     9fc:	cf 92       	push	r12
     9fe:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
     a02:	61 c0       	rjmp	.+194    	; 0xac6 <strftime+0x594>
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	f8 cf       	rjmp	.-16     	; 0x9fa <strftime+0x4c8>
     a0a:	d7 01       	movw	r26, r14
     a0c:	16 96       	adiw	r26, 0x06	; 6
     a0e:	8d 91       	ld	r24, X+
     a10:	9c 91       	ld	r25, X
     a12:	17 97       	sbiw	r26, 0x07	; 7
     a14:	b1 01       	movw	r22, r2
     a16:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	bf 92       	push	r11
     a20:	af 92       	push	r10
     a22:	0b c0       	rjmp	.+22     	; 0xa3a <strftime+0x508>
     a24:	f7 01       	movw	r30, r14
     a26:	86 81       	ldd	r24, Z+6	; 0x06
     a28:	97 81       	ldd	r25, Z+7	; 0x07
     a2a:	84 59       	subi	r24, 0x94	; 148
     a2c:	98 4f       	sbci	r25, 0xF8	; 248
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	26 ec       	ldi	r18, 0xC6	; 198
     a34:	34 e4       	ldi	r19, 0x44	; 68
     a36:	3f 93       	push	r19
     a38:	2f 93       	push	r18
     a3a:	df 92       	push	r13
     a3c:	cf 92       	push	r12
     a3e:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	43 c0       	rjmp	.+134    	; 0xad6 <strftime+0x5a4>
     a50:	60 91 a9 4a 	lds	r22, 0x4AA9	; 0x804aa9 <__utc_offset>
     a54:	70 91 aa 4a 	lds	r23, 0x4AAA	; 0x804aaa <__utc_offset+0x1>
     a58:	80 91 ab 4a 	lds	r24, 0x4AAB	; 0x804aab <__utc_offset+0x2>
     a5c:	90 91 ac 4a 	lds	r25, 0x4AAC	; 0x804aac <__utc_offset+0x3>
     a60:	2c e3       	ldi	r18, 0x3C	; 60
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__divmodsi4>
     a6c:	89 01       	movw	r16, r18
     a6e:	9a 01       	movw	r18, r20
     a70:	f8 01       	movw	r30, r16
     a72:	d7 01       	movw	r26, r14
     a74:	1a 96       	adiw	r26, 0x0a	; 10
     a76:	8d 91       	ld	r24, X+
     a78:	9c 91       	ld	r25, X
     a7a:	1b 97       	sbiw	r26, 0x0b	; 11
     a7c:	6c e3       	ldi	r22, 0x3C	; 60
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     a84:	16 16       	cp	r1, r22
     a86:	17 06       	cpc	r1, r23
     a88:	1c f4       	brge	.+6      	; 0xa90 <strftime+0x55e>
     a8a:	fb 01       	movw	r30, r22
     a8c:	e0 0f       	add	r30, r16
     a8e:	f1 1f       	adc	r31, r17
     a90:	cf 01       	movw	r24, r30
     a92:	6c e3       	ldi	r22, 0x3C	; 60
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     a9a:	97 ff       	sbrs	r25, 7
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <strftime+0x572>
     a9e:	91 95       	neg	r25
     aa0:	81 95       	neg	r24
     aa2:	91 09       	sbc	r25, r1
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	cf 01       	movw	r24, r30
     aaa:	6c e3       	ldi	r22, 0x3C	; 60
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     ab2:	7f 93       	push	r23
     ab4:	6f 93       	push	r22
     ab6:	ef e8       	ldi	r30, 0x8F	; 143
     ab8:	f6 e4       	ldi	r31, 0x46	; 70
     aba:	ff 93       	push	r31
     abc:	ef 93       	push	r30
     abe:	df 92       	push	r13
     ac0:	cf 92       	push	r12
     ac2:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <strftime+0x5a4>
     acc:	8f e3       	ldi	r24, 0x3F	; 63
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	1a 82       	std	Y+2, r1	; 0x02
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	93 01       	movw	r18, r6
     ad8:	28 0f       	add	r18, r24
     ada:	39 1f       	adc	r19, r25
     adc:	a9 a1       	ldd	r26, Y+33	; 0x21
     ade:	ba a1       	ldd	r27, Y+34	; 0x22
     ae0:	2a 17       	cp	r18, r26
     ae2:	3b 07       	cpc	r19, r27
     ae4:	98 f4       	brcc	.+38     	; 0xb0c <strftime+0x5da>
     ae6:	d2 01       	movw	r26, r4
     ae8:	f6 01       	movw	r30, r12
     aea:	af 01       	movw	r20, r30
     aec:	4c 19       	sub	r20, r12
     aee:	5d 09       	sbc	r21, r13
     af0:	48 17       	cp	r20, r24
     af2:	59 07       	cpc	r21, r25
     af4:	1c f4       	brge	.+6      	; 0xafc <strftime+0x5ca>
     af6:	41 91       	ld	r20, Z+
     af8:	4d 93       	st	X+, r20
     afa:	f7 cf       	rjmp	.-18     	; 0xaea <strftime+0x5b8>
     afc:	97 ff       	sbrs	r25, 7
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <strftime+0x5d2>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	48 0e       	add	r4, r24
     b06:	59 1e       	adc	r5, r25
     b08:	39 01       	movw	r6, r18
     b0a:	3c cd       	rjmp	.-1416   	; 0x584 <strftime+0x52>
     b0c:	f2 01       	movw	r30, r4
     b0e:	10 82       	st	Z, r1
     b10:	0e c0       	rjmp	.+28     	; 0xb2e <strftime+0x5fc>
     b12:	d2 01       	movw	r26, r4
     b14:	8d 93       	st	X+, r24
     b16:	2d 01       	movw	r4, r26
     b18:	bf ef       	ldi	r27, 0xFF	; 255
     b1a:	6b 1a       	sub	r6, r27
     b1c:	7b 0a       	sbc	r7, r27
     b1e:	88 23       	and	r24, r24
     b20:	31 f0       	breq	.+12     	; 0xb2e <strftime+0x5fc>
     b22:	ef ef       	ldi	r30, 0xFF	; 255
     b24:	8e 1a       	sub	r8, r30
     b26:	9e 0a       	sbc	r9, r30
     b28:	2d cd       	rjmp	.-1446   	; 0x584 <strftime+0x52>
     b2a:	d2 01       	movw	r26, r4
     b2c:	1c 92       	st	X, r1
     b2e:	c3 01       	movw	r24, r6
     b30:	a2 96       	adiw	r28, 0x22	; 34
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	bf 90       	pop	r11
     b48:	af 90       	pop	r10
     b4a:	9f 90       	pop	r9
     b4c:	8f 90       	pop	r8
     b4e:	7f 90       	pop	r7
     b50:	6f 90       	pop	r6
     b52:	5f 90       	pop	r5
     b54:	4f 90       	pop	r4
     b56:	3f 90       	pop	r3
     b58:	2f 90       	pop	r2
     b5a:	08 95       	ret

00000b5c <time>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	60 91 99 4a 	lds	r22, 0x4A99	; 0x804a99 <__system_time>
     b66:	70 91 9a 4a 	lds	r23, 0x4A9A	; 0x804a9a <__system_time+0x1>
     b6a:	80 91 9b 4a 	lds	r24, 0x4A9B	; 0x804a9b <__system_time+0x2>
     b6e:	90 91 9c 4a 	lds	r25, 0x4A9C	; 0x804a9c <__system_time+0x3>
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	30 97       	sbiw	r30, 0x00	; 0
     b76:	21 f0       	breq	.+8      	; 0xb80 <time+0x24>
     b78:	60 83       	st	Z, r22
     b7a:	71 83       	std	Z+1, r23	; 0x01
     b7c:	82 83       	std	Z+2, r24	; 0x02
     b7e:	93 83       	std	Z+3, r25	; 0x03
     b80:	08 95       	ret

00000b82 <week_of_year>:
     b82:	fc 01       	movw	r30, r24
     b84:	20 85       	ldd	r18, Z+8	; 0x08
     b86:	31 85       	ldd	r19, Z+9	; 0x09
     b88:	c9 01       	movw	r24, r18
     b8a:	07 96       	adiw	r24, 0x07	; 7
     b8c:	44 81       	ldd	r20, Z+4	; 0x04
     b8e:	84 1b       	sub	r24, r20
     b90:	91 09       	sbc	r25, r1
     b92:	47 fd       	sbrc	r20, 7
     b94:	93 95       	inc	r25
     b96:	86 0f       	add	r24, r22
     b98:	91 1d       	adc	r25, r1
     b9a:	e7 e0       	ldi	r30, 0x07	; 7
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	bf 01       	movw	r22, r30
     ba0:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     ba4:	a9 01       	movw	r20, r18
     ba6:	48 1b       	sub	r20, r24
     ba8:	59 0b       	sbc	r21, r25
     baa:	ca 01       	movw	r24, r20
     bac:	57 fd       	sbrc	r21, 7
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <week_of_year+0x3a>
     bb0:	bf 01       	movw	r22, r30
     bb2:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	86 0f       	add	r24, r22
     bba:	08 95       	ret
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	08 95       	ret

00000bc0 <system_tick>:
     bc0:	8f 93       	push	r24
     bc2:	8f b7       	in	r24, 0x3f	; 63
     bc4:	8f 93       	push	r24
     bc6:	f8 94       	cli
     bc8:	80 91 99 4a 	lds	r24, 0x4A99	; 0x804a99 <__system_time>
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 99 4a 	sts	0x4A99, r24	; 0x804a99 <__system_time>
     bd2:	80 91 9a 4a 	lds	r24, 0x4A9A	; 0x804a9a <__system_time+0x1>
     bd6:	8f 4f       	sbci	r24, 0xFF	; 255
     bd8:	80 93 9a 4a 	sts	0x4A9A, r24	; 0x804a9a <__system_time+0x1>
     bdc:	80 91 9b 4a 	lds	r24, 0x4A9B	; 0x804a9b <__system_time+0x2>
     be0:	8f 4f       	sbci	r24, 0xFF	; 255
     be2:	80 93 9b 4a 	sts	0x4A9B, r24	; 0x804a9b <__system_time+0x2>
     be6:	80 91 9c 4a 	lds	r24, 0x4A9C	; 0x804a9c <__system_time+0x3>
     bea:	8f 4f       	sbci	r24, 0xFF	; 255
     bec:	80 93 9c 4a 	sts	0x4A9C, r24	; 0x804a9c <__system_time+0x3>
     bf0:	8f 91       	pop	r24
     bf2:	8f bf       	out	0x3f, r24	; 63
     bf4:	8f 91       	pop	r24
     bf6:	08 95       	ret

00000bf8 <asctime_r>:
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	8c 01       	movw	r16, r24
     c0a:	eb 01       	movw	r28, r22
     c0c:	fc 01       	movw	r30, r24
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	b8 2f       	mov	r27, r24
     c12:	bb 0f       	add	r27, r27
     c14:	b8 0f       	add	r27, r24
     c16:	85 81       	ldd	r24, Z+5	; 0x05
     c18:	78 2f       	mov	r23, r24
     c1a:	77 0f       	add	r23, r23
     c1c:	78 0f       	add	r23, r24
     c1e:	9e 01       	movw	r18, r28
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	8b 2f       	mov	r24, r27
     c24:	84 0f       	add	r24, r20
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	84 5e       	subi	r24, 0xE4	; 228
     c2c:	9c 4f       	sbci	r25, 0xFC	; 252
     c2e:	af 4f       	sbci	r26, 0xFF	; 255
     c30:	fc 01       	movw	r30, r24
     c32:	5a 2f       	mov	r21, r26
     c34:	0e 94 0a 53 	call	0xa614	; 0xa614 <__xload_1>
     c38:	f9 01       	movw	r30, r18
     c3a:	61 93       	st	Z+, r22
     c3c:	9f 01       	movw	r18, r30
     c3e:	87 2f       	mov	r24, r23
     c40:	84 0f       	add	r24, r20
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	8e 5c       	subi	r24, 0xCE	; 206
     c48:	9c 4f       	sbci	r25, 0xFC	; 252
     c4a:	af 4f       	sbci	r26, 0xFF	; 255
     c4c:	fc 01       	movw	r30, r24
     c4e:	5a 2f       	mov	r21, r26
     c50:	0e 94 0a 53 	call	0xa614	; 0xa614 <__xload_1>
     c54:	f9 01       	movw	r30, r18
     c56:	63 83       	std	Z+3, r22	; 0x03
     c58:	4f 5f       	subi	r20, 0xFF	; 255
     c5a:	43 30       	cpi	r20, 0x03	; 3
     c5c:	11 f7       	brne	.-60     	; 0xc22 <asctime_r+0x2a>
     c5e:	80 e2       	ldi	r24, 0x20	; 32
     c60:	8f 83       	std	Y+7, r24	; 0x07
     c62:	8b 83       	std	Y+3, r24	; 0x03
     c64:	be 01       	movw	r22, r28
     c66:	68 5f       	subi	r22, 0xF8	; 248
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	f8 01       	movw	r30, r16
     c6c:	83 81       	ldd	r24, Z+3	; 0x03
     c6e:	40 e2       	ldi	r20, 0x20	; 32
     c70:	08 2e       	mov	r0, r24
     c72:	00 0c       	add	r0, r0
     c74:	99 0b       	sbc	r25, r25
     c76:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     c7a:	be 01       	movw	r22, r28
     c7c:	65 5f       	subi	r22, 0xF5	; 245
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	f8 01       	movw	r30, r16
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	4a e3       	ldi	r20, 0x3A	; 58
     c86:	08 2e       	mov	r0, r24
     c88:	00 0c       	add	r0, r0
     c8a:	99 0b       	sbc	r25, r25
     c8c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     c90:	be 01       	movw	r22, r28
     c92:	62 5f       	subi	r22, 0xF2	; 242
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	f8 01       	movw	r30, r16
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	4a e3       	ldi	r20, 0x3A	; 58
     c9c:	08 2e       	mov	r0, r24
     c9e:	00 0c       	add	r0, r0
     ca0:	99 0b       	sbc	r25, r25
     ca2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     ca6:	be 01       	movw	r22, r28
     ca8:	6f 5e       	subi	r22, 0xEF	; 239
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	f8 01       	movw	r30, r16
     cae:	80 81       	ld	r24, Z
     cb0:	40 e2       	ldi	r20, 0x20	; 32
     cb2:	08 2e       	mov	r0, r24
     cb4:	00 0c       	add	r0, r0
     cb6:	99 0b       	sbc	r25, r25
     cb8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     cbc:	f8 01       	movw	r30, r16
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	64 e6       	ldi	r22, 0x64	; 100
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	84 59       	subi	r24, 0x94	; 148
     cc8:	98 4f       	sbci	r25, 0xF8	; 248
     cca:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
     cd2:	be 01       	movw	r22, r28
     cd4:	6c 5e       	subi	r22, 0xEC	; 236
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	40 e2       	ldi	r20, 0x20	; 32
     cda:	c6 01       	movw	r24, r12
     cdc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     ce0:	be 01       	movw	r22, r28
     ce2:	6a 5e       	subi	r22, 0xEA	; 234
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	c7 01       	movw	r24, r14
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__print_lz>

00000cfe <gmtime_r>:
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	28 97       	sbiw	r28, 0x08	; 8
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	8b 01       	movw	r16, r22
     d1a:	fc 01       	movw	r30, r24
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	20 e8       	ldi	r18, 0x80	; 128
     d26:	31 e5       	ldi	r19, 0x51	; 81
     d28:	41 e0       	ldi	r20, 0x01	; 1
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
     d30:	69 01       	movw	r12, r18
     d32:	7a 01       	movw	r14, r20
     d34:	2c e3       	ldi	r18, 0x3C	; 60
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__divmodsi4>
     d40:	29 83       	std	Y+1, r18	; 0x01
     d42:	3a 83       	std	Y+2, r19	; 0x02
     d44:	4b 83       	std	Y+3, r20	; 0x03
     d46:	5c 83       	std	Y+4, r21	; 0x04
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	ab 81       	ldd	r26, Y+3	; 0x03
     d4e:	bc 81       	ldd	r27, Y+4	; 0x04
     d50:	f8 01       	movw	r30, r16
     d52:	60 83       	st	Z, r22
     d54:	6c e3       	ldi	r22, 0x3C	; 60
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	f8 01       	movw	r30, r16
     d62:	a1 83       	std	Z+1, r26	; 0x01
     d64:	82 83       	std	Z+2, r24	; 0x02
     d66:	c6 01       	movw	r24, r12
     d68:	06 96       	adiw	r24, 0x06	; 6
     d6a:	67 e0       	ldi	r22, 0x07	; 7
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	0e 94 2c 4c 	call	0x9858	; 0x9858 <__udivmodhi4>
     d72:	84 83       	std	Z+4, r24	; 0x04
     d74:	2d ea       	ldi	r18, 0xAD	; 173
     d76:	3e e8       	ldi	r19, 0x8E	; 142
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	c7 01       	movw	r24, r14
     d7e:	b6 01       	movw	r22, r12
     d80:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__divmodsi4>
     d84:	29 83       	std	Y+1, r18	; 0x01
     d86:	3a 83       	std	Y+2, r19	; 0x02
     d88:	6d 83       	std	Y+5, r22	; 0x05
     d8a:	7e 83       	std	Y+6, r23	; 0x06
     d8c:	8f 83       	std	Y+7, r24	; 0x07
     d8e:	98 87       	std	Y+8, r25	; 0x08
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	24 e6       	ldi	r18, 0x64	; 100
     d96:	28 9f       	mul	r18, r24
     d98:	60 01       	movw	r12, r0
     d9a:	29 9f       	mul	r18, r25
     d9c:	d0 0c       	add	r13, r0
     d9e:	11 24       	eor	r1, r1
     da0:	6d 81       	ldd	r22, Y+5	; 0x05
     da2:	7e 81       	ldd	r23, Y+6	; 0x06
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	98 85       	ldd	r25, Y+8	; 0x08
     da8:	25 eb       	ldi	r18, 0xB5	; 181
     daa:	35 e0       	ldi	r19, 0x05	; 5
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__divmodsi4>
     db4:	29 83       	std	Y+1, r18	; 0x01
     db6:	3a 83       	std	Y+2, r19	; 0x02
     db8:	6d 83       	std	Y+5, r22	; 0x05
     dba:	7e 83       	std	Y+6, r23	; 0x06
     dbc:	e9 80       	ldd	r14, Y+1	; 0x01
     dbe:	fa 80       	ldd	r15, Y+2	; 0x02
     dc0:	ee 0c       	add	r14, r14
     dc2:	ff 1c       	adc	r15, r15
     dc4:	ee 0c       	add	r14, r14
     dc6:	ff 1c       	adc	r15, r15
     dc8:	ec 0c       	add	r14, r12
     dca:	fd 1c       	adc	r15, r13
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	f5 e6       	ldi	r31, 0x65	; 101
     dd2:	ef 16       	cp	r14, r31
     dd4:	f1 04       	cpc	r15, r1
     dd6:	10 f0       	brcs	.+4      	; 0xddc <gmtime_r+0xde>
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <gmtime_r+0xe6>
     ddc:	24 e6       	ldi	r18, 0x64	; 100
     dde:	e2 16       	cp	r14, r18
     de0:	f1 04       	cpc	r15, r1
     de2:	19 f0       	breq	.+6      	; 0xdea <gmtime_r+0xec>
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <gmtime_r+0xf0>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	a9 01       	movw	r20, r18
     df0:	44 59       	subi	r20, 0x94	; 148
     df2:	5e 4f       	sbci	r21, 0xFE	; 254
     df4:	48 17       	cp	r20, r24
     df6:	59 07       	cpc	r21, r25
     df8:	68 f4       	brcc	.+26     	; 0xe14 <gmtime_r+0x116>
     dfa:	6d e6       	ldi	r22, 0x6D	; 109
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	82 1b       	sub	r24, r18
     e00:	93 0b       	sbc	r25, r19
     e02:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	e8 0e       	add	r14, r24
     e0c:	f9 1e       	adc	r15, r25
     e0e:	cd 01       	movw	r24, r26
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	44 e6       	ldi	r20, 0x64	; 100
     e16:	e4 0e       	add	r14, r20
     e18:	f1 1c       	adc	r15, r1
     e1a:	f8 01       	movw	r30, r16
     e1c:	e6 82       	std	Z+6, r14	; 0x06
     e1e:	f7 82       	std	Z+7, r15	; 0x07
     e20:	80 87       	std	Z+8, r24	; 0x08
     e22:	91 87       	std	Z+9, r25	; 0x09
     e24:	25 5c       	subi	r18, 0xC5	; 197
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	82 17       	cp	r24, r18
     e2a:	93 07       	cpc	r25, r19
     e2c:	48 f4       	brcc	.+18     	; 0xe40 <gmtime_r+0x142>
     e2e:	6f e1       	ldi	r22, 0x1F	; 31
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	f8 01       	movw	r30, r16
     e3c:	85 83       	std	Z+5, r24	; 0x05
     e3e:	22 c0       	rjmp	.+68     	; 0xe84 <gmtime_r+0x186>
     e40:	69 e9       	ldi	r22, 0x99	; 153
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	82 1b       	sub	r24, r18
     e46:	93 0b       	sbc	r25, r19
     e48:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	f8 2e       	mov	r15, r24
     e52:	ff 0c       	add	r15, r15
     e54:	ff 0c       	add	r15, r15
     e56:	f8 0e       	add	r15, r24
     e58:	6d e3       	ldi	r22, 0x3D	; 61
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	cd 01       	movw	r24, r26
     e5e:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	e8 2e       	mov	r14, r24
     e68:	ee 0c       	add	r14, r14
     e6a:	6f e1       	ldi	r22, 0x1F	; 31
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	22 e0       	ldi	r18, 0x02	; 2
     e7a:	28 0f       	add	r18, r24
     e7c:	f2 0e       	add	r15, r18
     e7e:	fe 0c       	add	r15, r14
     e80:	f8 01       	movw	r30, r16
     e82:	f5 82       	std	Z+5, r15	; 0x05
     e84:	a3 83       	std	Z+3, r26	; 0x03
     e86:	f8 01       	movw	r30, r16
     e88:	12 86       	std	Z+10, r1	; 0x0a
     e8a:	13 86       	std	Z+11, r1	; 0x0b
     e8c:	83 81       	ldd	r24, Z+3	; 0x03
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	83 83       	std	Z+3, r24	; 0x03
     e92:	28 96       	adiw	r28, 0x08	; 8
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	08 95       	ret

00000eaa <iso_week_date_r>:
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	8c 01       	movw	r16, r24
     ebc:	7b 01       	movw	r14, r22
     ebe:	ea 01       	movw	r28, r20
     ec0:	88 83       	st	Y, r24
     ec2:	99 83       	std	Y+1, r25	; 0x01
     ec4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <is_leap_year>
     ec8:	28 2f       	mov	r18, r24
     eca:	a8 01       	movw	r20, r16
     ecc:	40 5d       	subi	r20, 0xD0	; 208
     ece:	57 40       	sbci	r21, 0x07	; 7
     ed0:	6d e6       	ldi	r22, 0x6D	; 109
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	46 9f       	mul	r20, r22
     ed6:	c0 01       	movw	r24, r0
     ed8:	47 9f       	mul	r20, r23
     eda:	90 0d       	add	r25, r0
     edc:	56 9f       	mul	r21, r22
     ede:	90 0d       	add	r25, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	8e 0d       	add	r24, r14
     ee4:	9f 1d       	adc	r25, r15
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	79 f0       	breq	.+30     	; 0xf0a <iso_week_date_r+0x60>
     eec:	ba 01       	movw	r22, r20
     eee:	76 95       	lsr	r23
     ef0:	67 95       	ror	r22
     ef2:	76 95       	lsr	r23
     ef4:	67 95       	ror	r22
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	86 0f       	add	r24, r22
     efc:	97 1f       	adc	r25, r23
     efe:	82 1b       	sub	r24, r18
     f00:	91 09       	sbc	r25, r1
     f02:	45 36       	cpi	r20, 0x65	; 101
     f04:	51 05       	cpc	r21, r1
     f06:	08 f0       	brcs	.+2      	; 0xf0a <iso_week_date_r+0x60>
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	06 96       	adiw	r24, 0x06	; 6
     f0c:	67 e0       	ldi	r22, 0x07	; 7
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	0e 94 2c 4c 	call	0x9858	; 0x9858 <__udivmodhi4>
     f14:	6c 01       	movw	r12, r24
     f16:	89 2b       	or	r24, r25
     f18:	19 f4       	brne	.+6      	; 0xf20 <iso_week_date_r+0x76>
     f1a:	87 e0       	ldi	r24, 0x07	; 7
     f1c:	c8 2e       	mov	r12, r24
     f1e:	d1 2c       	mov	r13, r1
     f20:	cc 82       	std	Y+4, r12	; 0x04
     f22:	dd 82       	std	Y+5, r13	; 0x05
     f24:	c7 01       	movw	r24, r14
     f26:	0b 96       	adiw	r24, 0x0b	; 11
     f28:	8c 19       	sub	r24, r12
     f2a:	9d 09       	sbc	r25, r13
     f2c:	67 e0       	ldi	r22, 0x07	; 7
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     f34:	65 33       	cpi	r22, 0x35	; 53
     f36:	71 05       	cpc	r23, r1
     f38:	b1 f4       	brne	.+44     	; 0xf66 <iso_week_date_r+0xbc>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	c8 1a       	sub	r12, r24
     f3e:	d1 08       	sbc	r13, r1
     f40:	ec 18       	sub	r14, r12
     f42:	fd 08       	sbc	r15, r13
     f44:	82 2f       	mov	r24, r18
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	84 59       	subi	r24, 0x94	; 148
     f4a:	9e 4f       	sbci	r25, 0xFE	; 254
     f4c:	23 e0       	ldi	r18, 0x03	; 3
     f4e:	e2 0e       	add	r14, r18
     f50:	f1 1c       	adc	r15, r1
     f52:	8e 15       	cp	r24, r14
     f54:	9f 05       	cpc	r25, r15
     f56:	3c f4       	brge	.+14     	; 0xf66 <iso_week_date_r+0xbc>
     f58:	88 81       	ld	r24, Y
     f5a:	99 81       	ldd	r25, Y+1	; 0x01
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	88 83       	st	Y, r24
     f60:	99 83       	std	Y+1, r25	; 0x01
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	6a 83       	std	Y+2, r22	; 0x02
     f68:	7b 83       	std	Y+3, r23	; 0x03
     f6a:	67 2b       	or	r22, r23
     f6c:	79 f4       	brne	.+30     	; 0xf8c <iso_week_date_r+0xe2>
     f6e:	01 50       	subi	r16, 0x01	; 1
     f70:	11 09       	sbc	r17, r1
     f72:	c8 01       	movw	r24, r16
     f74:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <is_leap_year>
     f78:	68 2f       	mov	r22, r24
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	64 59       	subi	r22, 0x94	; 148
     f7e:	7e 4f       	sbci	r23, 0xFE	; 254
     f80:	ae 01       	movw	r20, r28
     f82:	c8 01       	movw	r24, r16
     f84:	0e 94 55 07 	call	0xeaa	; 0xeaa <iso_week_date_r>
     f88:	cc 82       	std	Y+4, r12	; 0x04
     f8a:	dd 82       	std	Y+5, r13	; 0x05
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	08 95       	ret

00000f9e <__print_lz>:
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	eb 01       	movw	r28, r22
     fa6:	14 2f       	mov	r17, r20
     fa8:	6a e0       	ldi	r22, 0x0A	; 10
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
     fb0:	60 5d       	subi	r22, 0xD0	; 208
     fb2:	68 83       	st	Y, r22
     fb4:	80 5d       	subi	r24, 0xD0	; 208
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	1a 83       	std	Y+2, r17	; 0x02
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	08 95       	ret

00000fc2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     fc2:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <system_init>
     fc6:	08 95       	ret

00000fc8 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     fd4:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     fd8:	80 ff       	sbrs	r24, 0
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     fe2:	8f 91       	pop	r24
     fe4:	0f 90       	pop	r0
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	0f 90       	pop	r0
     fea:	1f 90       	pop	r1
     fec:	18 95       	reti

00000fee <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     ff6:	80 91 ef 46 	lds	r24, 0x46EF	; 0x8046ef <_ZZ9serial_RxhE4buff>
     ffa:	90 91 f0 46 	lds	r25, 0x46F0	; 0x8046f0 <_ZZ9serial_RxhE4buff+0x1>
     ffe:	89 2b       	or	r24, r25
    1000:	31 f4       	brne	.+12     	; 0x100e <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
    1002:	0e 94 24 3b 	call	0x7648	; 0x7648 <nextEmptySBRxBuffer>
    1006:	80 93 ef 46 	sts	0x46EF, r24	; 0x8046ef <_ZZ9serial_RxhE4buff>
    100a:	90 93 f0 46 	sts	0x46F0, r25	; 0x8046f0 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
    100e:	c0 91 ef 46 	lds	r28, 0x46EF	; 0x8046ef <_ZZ9serial_RxhE4buff>
    1012:	d0 91 f0 46 	lds	r29, 0x46F0	; 0x8046f0 <_ZZ9serial_RxhE4buff+0x1>
    1016:	20 97       	sbiw	r28, 0x00	; 0
    1018:	09 f4       	brne	.+2      	; 0x101c <_Z9serial_Rxh+0x2e>
    101a:	73 c1       	rjmp	.+742    	; 0x1302 <_Z9serial_Rxh+0x314>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
    101c:	81 2f       	mov	r24, r17
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <toupper>
    1024:	ac 01       	movw	r20, r24
    1026:	28 2f       	mov	r18, r24

		if(ignoreCount)
    1028:	90 91 ee 46 	lds	r25, 0x46EE	; 0x8046ee <_ZZ9serial_RxhE11ignoreCount>
    102c:	99 23       	and	r25, r25
    102e:	21 f0       	breq	.+8      	; 0x1038 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
    1030:	91 50       	subi	r25, 0x01	; 1
    1032:	90 93 ee 46 	sts	0x46EE, r25	; 0x8046ee <_ZZ9serial_RxhE11ignoreCount>
    1036:	65 c1       	rjmp	.+714    	; 0x1302 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
    1038:	4b 31       	cpi	r20, 0x1B	; 27
    103a:	21 f4       	brne	.+8      	; 0x1044 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	80 93 ee 46 	sts	0x46EE, r24	; 0x8046ee <_ZZ9serial_RxhE11ignoreCount>
    1042:	5f c1       	rjmp	.+702    	; 0x1302 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
    1044:	4d 30       	cpi	r20, 0x0D	; 13
    1046:	09 f0       	breq	.+2      	; 0x104a <_Z9serial_Rxh+0x5c>
    1048:	3f c0       	rjmp	.+126    	; 0x10c8 <_Z9serial_Rxh+0xda>
		{
			if(receiving_msg)
    104a:	80 91 ba 46 	lds	r24, 0x46BA	; 0x8046ba <_ZZ9serial_RxhE13receiving_msg>
    104e:	88 23       	and	r24, r24
    1050:	31 f1       	breq	.+76     	; 0x109e <_Z9serial_Rxh+0xb0>
			{
				if(charIndex > 0)
    1052:	e0 91 ed 46 	lds	r30, 0x46ED	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    1056:	ee 23       	and	r30, r30
    1058:	f9 f0       	breq	.+62     	; 0x1098 <_Z9serial_Rxh+0xaa>
				{
					buff->type = SERIALBUS_MSG_QUERY;
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
    105e:	80 91 b8 46 	lds	r24, 0x46B8	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1062:	90 91 b9 46 	lds	r25, 0x46B9	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
    106a:	80 91 b7 46 	lds	r24, 0x46B7	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
    106e:	88 23       	and	r24, r24
    1070:	79 f0       	breq	.+30     	; 0x1090 <_Z9serial_Rxh+0xa2>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	40 91 b6 46 	lds	r20, 0x46B6	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    107a:	54 e1       	ldi	r21, 0x14	; 20
    107c:	58 9f       	mul	r21, r24
    107e:	90 01       	movw	r18, r0
    1080:	59 9f       	mul	r21, r25
    1082:	30 0d       	add	r19, r0
    1084:	11 24       	eor	r1, r1
    1086:	c2 0f       	add	r28, r18
    1088:	d3 1f       	adc	r29, r19
    108a:	c4 0f       	add	r28, r20
    108c:	d1 1d       	adc	r29, r1
    108e:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	e5 54       	subi	r30, 0x45	; 69
    1094:	f9 4b       	sbci	r31, 0xB9	; 185
    1096:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
    1098:	0e 94 23 3c 	call	0x7846	; 0x7846 <sb_send_NewLine>
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <_Z9serial_Rxh+0xb8>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
    10a6:	10 92 ed 46 	sts	0x46ED, r1	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
    10aa:	10 92 b6 46 	sts	0x46B6, r1	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
    10ae:	10 92 b8 46 	sts	0x46B8, r1	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    10b2:	10 92 b9 46 	sts	0x46B9, r1	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
    10b6:	10 92 b7 46 	sts	0x46B7, r1	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
			buff = NULL;
    10ba:	10 92 ef 46 	sts	0x46EF, r1	; 0x8046ef <_ZZ9serial_RxhE4buff>
    10be:	10 92 f0 46 	sts	0x46F0, r1	; 0x8046f0 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = false;
    10c2:	10 92 ba 46 	sts	0x46BA, r1	; 0x8046ba <_ZZ9serial_RxhE13receiving_msg>
    10c6:	1d c1       	rjmp	.+570    	; 0x1302 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char)
    10c8:	44 23       	and	r20, r20
    10ca:	09 f4       	brne	.+2      	; 0x10ce <_Z9serial_Rxh+0xe0>
    10cc:	1a c1       	rjmp	.+564    	; 0x1302 <_Z9serial_Rxh+0x314>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    10ce:	e0 91 ed 46 	lds	r30, 0x46ED	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    10d2:	8e 2f       	mov	r24, r30
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	dc 01       	movw	r26, r24
    10d8:	a5 54       	subi	r26, 0x45	; 69
    10da:	b9 4b       	sbci	r27, 0xB9	; 185
    10dc:	4c 93       	st	X, r20

			if(charIndex)
    10de:	ee 23       	and	r30, r30
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <_Z9serial_Rxh+0xf6>
    10e2:	d7 c0       	rjmp	.+430    	; 0x1292 <_Z9serial_Rxh+0x2a4>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
    10e4:	4f 37       	cpi	r20, 0x7F	; 127
    10e6:	09 f0       	breq	.+2      	; 0x10ea <_Z9serial_Rxh+0xfc>
    10e8:	5f c0       	rjmp	.+190    	; 0x11a8 <_Z9serial_Rxh+0x1ba>
				{
					charIndex--;
    10ea:	e1 50       	subi	r30, 0x01	; 1
    10ec:	e0 93 ed 46 	sts	0x46ED, r30	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
    10f0:	80 91 b7 46 	lds	r24, 0x46B7	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
    10f4:	81 11       	cpse	r24, r1
    10f6:	13 c0       	rjmp	.+38     	; 0x111e <_Z9serial_Rxh+0x130>
					{
						msg_ID -= textBuff[charIndex];
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	e5 54       	subi	r30, 0x45	; 69
    10fc:	f9 4b       	sbci	r31, 0xB9	; 185
    10fe:	30 81       	ld	r19, Z
    1100:	80 91 b8 46 	lds	r24, 0x46B8	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1104:	90 91 b9 46 	lds	r25, 0x46B9	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    1108:	83 1b       	sub	r24, r19
    110a:	91 09       	sbc	r25, r1
						msg_ID /= 10;
    110c:	6a e0       	ldi	r22, 0x0A	; 10
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
    1114:	60 93 b8 46 	sts	0x46B8, r22	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1118:	70 93 b9 46 	sts	0x46B9, r23	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    111c:	39 c0       	rjmp	.+114    	; 0x1190 <_Z9serial_Rxh+0x1a2>
					}
					else if(field_len)
    111e:	90 91 b6 46 	lds	r25, 0x46B6	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    1122:	99 23       	and	r25, r25
    1124:	91 f0       	breq	.+36     	; 0x114a <_Z9serial_Rxh+0x15c>
					{
						field_len--;
    1126:	3f ef       	ldi	r19, 0xFF	; 255
    1128:	39 0f       	add	r19, r25
    112a:	30 93 b6 46 	sts	0x46B6, r19	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	64 e1       	ldi	r22, 0x14	; 20
    1134:	68 9f       	mul	r22, r24
    1136:	a0 01       	movw	r20, r0
    1138:	69 9f       	mul	r22, r25
    113a:	50 0d       	add	r21, r0
    113c:	11 24       	eor	r1, r1
    113e:	c4 0f       	add	r28, r20
    1140:	d5 1f       	adc	r29, r21
    1142:	c3 0f       	add	r28, r19
    1144:	d1 1d       	adc	r29, r1
    1146:	1b 82       	std	Y+3, r1	; 0x03
    1148:	23 c0       	rjmp	.+70     	; 0x1190 <_Z9serial_Rxh+0x1a2>
					}
					else if(textBuff[charIndex] == ' ')
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	e5 54       	subi	r30, 0x45	; 69
    114e:	f9 4b       	sbci	r31, 0xB9	; 185
    1150:	90 81       	ld	r25, Z
    1152:	90 32       	cpi	r25, 0x20	; 32
    1154:	a1 f4       	brne	.+40     	; 0x117e <_Z9serial_Rxh+0x190>
					{
						field_index--;
    1156:	81 50       	subi	r24, 0x01	; 1
    1158:	80 93 b7 46 	sts	0x46B7, r24	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
    115c:	34 e1       	ldi	r19, 0x14	; 20
    115e:	83 9f       	mul	r24, r19
    1160:	c0 01       	movw	r24, r0
    1162:	11 24       	eor	r1, r1
    1164:	03 96       	adiw	r24, 0x03	; 3
    1166:	c8 0f       	add	r28, r24
    1168:	d9 1f       	adc	r29, r25
    116a:	fe 01       	movw	r30, r28
    116c:	01 90       	ld	r0, Z+
    116e:	00 20       	and	r0, r0
    1170:	e9 f7       	brne	.-6      	; 0x116c <_Z9serial_Rxh+0x17e>
    1172:	31 97       	sbiw	r30, 0x01	; 1
    1174:	ec 1b       	sub	r30, r28
    1176:	fd 0b       	sbc	r31, r29
    1178:	e0 93 b6 46 	sts	0x46B6, r30	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <_Z9serial_Rxh+0x1a2>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
    117e:	94 e1       	ldi	r25, 0x14	; 20
    1180:	89 9f       	mul	r24, r25
    1182:	c0 0d       	add	r28, r0
    1184:	d1 1d       	adc	r29, r1
    1186:	11 24       	eor	r1, r1
    1188:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
    118a:	81 50       	subi	r24, 0x01	; 1
    118c:	80 93 b7 46 	sts	0x46B7, r24	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
    1190:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    1194:	e8 2f       	mov	r30, r24
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	e5 54       	subi	r30, 0x45	; 69
    119a:	f9 4b       	sbci	r31, 0xB9	; 185
    119c:	10 82       	st	Z, r1

					if(charIndex == 0)
    119e:	81 11       	cpse	r24, r1
    11a0:	ab c0       	rjmp	.+342    	; 0x12f8 <_Z9serial_Rxh+0x30a>
					{
						receiving_msg = false;
    11a2:	10 92 ba 46 	sts	0x46BA, r1	; 0x8046ba <_ZZ9serial_RxhE13receiving_msg>
    11a6:	a8 c0       	rjmp	.+336    	; 0x12f8 <_Z9serial_Rxh+0x30a>
					}
				}
				else
				{
					if(rx_char == ' ')
    11a8:	40 32       	cpi	r20, 0x20	; 32
    11aa:	81 f5       	brne	.+96     	; 0x120c <_Z9serial_Rxh+0x21e>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
    11ac:	fc 01       	movw	r30, r24
    11ae:	e6 54       	subi	r30, 0x46	; 70
    11b0:	f9 4b       	sbci	r31, 0xB9	; 185
    11b2:	30 81       	ld	r19, Z
    11b4:	30 32       	cpi	r19, 0x20	; 32
    11b6:	09 f4       	brne	.+2      	; 0x11ba <_Z9serial_Rxh+0x1cc>
    11b8:	98 c0       	rjmp	.+304    	; 0x12ea <_Z9serial_Rxh+0x2fc>
    11ba:	30 91 b7 46 	lds	r19, 0x46B7	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
    11be:	43 2f       	mov	r20, r19
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	ba 01       	movw	r22, r20
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	63 30       	cpi	r22, 0x03	; 3
    11ca:	71 05       	cpc	r23, r1
    11cc:	0c f0       	brlt	.+2      	; 0x11d0 <_Z9serial_Rxh+0x1e2>
    11ce:	8f c0       	rjmp	.+286    	; 0x12ee <_Z9serial_Rxh+0x300>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
    11d0:	33 23       	and	r19, r19
    11d2:	79 f0       	breq	.+30     	; 0x11f2 <_Z9serial_Rxh+0x204>
							{
								buff->fields[field_index - 1][field_len] = '\0';
    11d4:	41 50       	subi	r20, 0x01	; 1
    11d6:	51 09       	sbc	r21, r1
    11d8:	e0 91 b6 46 	lds	r30, 0x46B6	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    11dc:	f4 e1       	ldi	r31, 0x14	; 20
    11de:	f4 9f       	mul	r31, r20
    11e0:	b0 01       	movw	r22, r0
    11e2:	f5 9f       	mul	r31, r21
    11e4:	70 0d       	add	r23, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	c6 0f       	add	r28, r22
    11ea:	d7 1f       	adc	r29, r23
    11ec:	ce 0f       	add	r28, r30
    11ee:	d1 1d       	adc	r29, r1
    11f0:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
    11f2:	3f 5f       	subi	r19, 0xFF	; 255
    11f4:	30 93 b7 46 	sts	0x46B7, r19	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
							field_len = 0;
    11f8:	10 92 b6 46 	sts	0x46B6, r1	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	81 33       	cpi	r24, 0x31	; 49
    1200:	91 05       	cpc	r25, r1
    1202:	0c f0       	brlt	.+2      	; 0x1206 <_Z9serial_Rxh+0x218>
    1204:	81 e3       	ldi	r24, 0x31	; 49
    1206:	80 93 ed 46 	sts	0x46ED, r24	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    120a:	76 c0       	rjmp	.+236    	; 0x12f8 <_Z9serial_Rxh+0x30a>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
    120c:	80 91 b6 46 	lds	r24, 0x46B6	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    1210:	85 31       	cpi	r24, 0x15	; 21
    1212:	08 f0       	brcs	.+2      	; 0x1216 <_Z9serial_Rxh+0x228>
    1214:	6e c0       	rjmp	.+220    	; 0x12f2 <_Z9serial_Rxh+0x304>
					{
						if(field_index == 0)    /* message ID received */
    1216:	60 91 b7 46 	lds	r22, 0x46B7	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
    121a:	61 11       	cpse	r22, r1
    121c:	19 c0       	rjmp	.+50     	; 0x1250 <_Z9serial_Rxh+0x262>
						{
							msg_ID = msg_ID * 10 + rx_char;
    121e:	60 91 b8 46 	lds	r22, 0x46B8	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1222:	70 91 b9 46 	lds	r23, 0x46B9	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    1226:	fb 01       	movw	r30, r22
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	66 0f       	add	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	66 0f       	add	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	6e 0f       	add	r22, r30
    123a:	7f 1f       	adc	r23, r31
    123c:	64 0f       	add	r22, r20
    123e:	71 1d       	adc	r23, r1
    1240:	60 93 b8 46 	sts	0x46B8, r22	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1244:	70 93 b9 46 	sts	0x46B9, r23	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	80 93 b6 46 	sts	0x46B6, r24	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    124e:	16 c0       	rjmp	.+44     	; 0x127c <_Z9serial_Rxh+0x28e>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	61 50       	subi	r22, 0x01	; 1
    1254:	71 09       	sbc	r23, r1
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	98 0f       	add	r25, r24
    125a:	90 93 b6 46 	sts	0x46B6, r25	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    125e:	34 e1       	ldi	r19, 0x14	; 20
    1260:	36 9f       	mul	r19, r22
    1262:	f0 01       	movw	r30, r0
    1264:	37 9f       	mul	r19, r23
    1266:	f0 0d       	add	r31, r0
    1268:	11 24       	eor	r1, r1
    126a:	ce 0f       	add	r28, r30
    126c:	df 1f       	adc	r29, r31
    126e:	fe 01       	movw	r30, r28
    1270:	e8 0f       	add	r30, r24
    1272:	f1 1d       	adc	r31, r1
    1274:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
    1276:	c9 0f       	add	r28, r25
    1278:	d1 1d       	adc	r29, r1
    127a:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    127c:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	81 33       	cpi	r24, 0x31	; 49
    1286:	91 05       	cpc	r25, r1
    1288:	0c f0       	brlt	.+2      	; 0x128c <_Z9serial_Rxh+0x29e>
    128a:	81 e3       	ldi	r24, 0x31	; 49
    128c:	80 93 ed 46 	sts	0x46ED, r24	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    1290:	33 c0       	rjmp	.+102    	; 0x12f8 <_Z9serial_Rxh+0x30a>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
    1292:	4f 37       	cpi	r20, 0x7F	; 127
    1294:	69 f4       	brne	.+26     	; 0x12b0 <_Z9serial_Rxh+0x2c2>
				{
					if(msg_ID <= 0)
    1296:	80 91 b8 46 	lds	r24, 0x46B8	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    129a:	90 91 b9 46 	lds	r25, 0x46B9	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    129e:	18 16       	cp	r1, r24
    12a0:	19 06       	cpc	r1, r25
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <_Z9serial_Rxh+0x2b8>
					{
						rx_char = '\0';
    12a4:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
    12a6:	10 92 b8 46 	sts	0x46B8, r1	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    12aa:	10 92 b9 46 	sts	0x46B9, r1	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    12ae:	24 c0       	rjmp	.+72     	; 0x12f8 <_Z9serial_Rxh+0x30a>
				}
				else if(rx_char == ' ') /* Handle Space */
    12b0:	40 32       	cpi	r20, 0x20	; 32
    12b2:	09 f1       	breq	.+66     	; 0x12f6 <_Z9serial_Rxh+0x308>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
    12b4:	10 92 b7 46 	sts	0x46B7, r1	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
    12b8:	55 27       	eor	r21, r21
    12ba:	40 93 b8 46 	sts	0x46B8, r20	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    12be:	50 93 b9 46 	sts	0x46B9, r21	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	50 f4       	brcc	.+20     	; 0x12dc <_Z9serial_Rxh+0x2ee>
					{
						buff->fields[i][0] = '\0';
    12c8:	de 01       	movw	r26, r28
    12ca:	34 e1       	ldi	r19, 0x14	; 20
    12cc:	83 9f       	mul	r24, r19
    12ce:	a0 0d       	add	r26, r0
    12d0:	b1 1d       	adc	r27, r1
    12d2:	11 24       	eor	r1, r1
    12d4:	13 96       	adiw	r26, 0x03	; 3
    12d6:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	f4 cf       	rjmp	.-24     	; 0x12c4 <_Z9serial_Rxh+0x2d6>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = true;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 93 ba 46 	sts	0x46BA, r24	; 0x8046ba <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
    12e2:	ef 5f       	subi	r30, 0xFF	; 255
    12e4:	e0 93 ed 46 	sts	0x46ED, r30	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    12e8:	07 c0       	rjmp	.+14     	; 0x12f8 <_Z9serial_Rxh+0x30a>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <_Z9serial_Rxh+0x30a>
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <_Z9serial_Rxh+0x30a>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <_Z9serial_Rxh+0x30a>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
    12f6:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = true;
					charIndex++;
				}
			}

			if(rx_char)
    12f8:	22 23       	and	r18, r18
    12fa:	19 f0       	breq	.+6      	; 0x1302 <_Z9serial_Rxh+0x314>
			{
				sb_echo_char(rx_char);
    12fc:	82 2f       	mov	r24, r18
    12fe:	0e 94 2c 3c 	call	0x7858	; 0x7858 <sb_echo_char>
			}
		}
	}	
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	08 95       	ret

0000130a <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	0b b6       	in	r0, 0x3b	; 59
    1316:	0f 92       	push	r0
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
    1330:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1334:	81 11       	cpse	r24, r1
    1336:	2b c0       	rjmp	.+86     	; 0x138e <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1338:	80 91 b4 46 	lds	r24, 0x46B4	; 0x8046b4 <_ZZ11__vector_20E4buff>
    133c:	90 91 b5 46 	lds	r25, 0x46B5	; 0x8046b5 <_ZZ11__vector_20E4buff+0x1>
    1340:	89 2b       	or	r24, r25
    1342:	31 f4       	brne	.+12     	; 0x1350 <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
    1344:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_Z18nextFullLBTxBufferv>
    1348:	80 93 b4 46 	sts	0x46B4, r24	; 0x8046b4 <_ZZ11__vector_20E4buff>
    134c:	90 93 b5 46 	sts	0x46B5, r25	; 0x8046b5 <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
    1350:	e0 91 b4 46 	lds	r30, 0x46B4	; 0x8046b4 <_ZZ11__vector_20E4buff>
    1354:	f0 91 b5 46 	lds	r31, 0x46B5	; 0x8046b5 <_ZZ11__vector_20E4buff+0x1>
    1358:	80 91 b3 46 	lds	r24, 0x46B3	; 0x8046b3 <_ZZ11__vector_20E9charIndex>
    135c:	df 01       	movw	r26, r30
    135e:	a8 0f       	add	r26, r24
    1360:	b1 1d       	adc	r27, r1
    1362:	9c 91       	ld	r25, X
    1364:	99 23       	and	r25, r25
    1366:	31 f0       	breq	.+12     	; 0x1374 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	80 93 b3 46 	sts	0x46B3, r24	; 0x8046b3 <_ZZ11__vector_20E9charIndex>
    136e:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    1372:	0d c0       	rjmp	.+26     	; 0x138e <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
    1374:	10 92 b3 46 	sts	0x46B3, r1	; 0x8046b3 <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
    1378:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    137a:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_Z18nextFullLBTxBufferv>
    137e:	80 93 b4 46 	sts	0x46B4, r24	; 0x8046b4 <_ZZ11__vector_20E4buff>
    1382:	90 93 b5 46 	sts	0x46B5, r25	; 0x8046b5 <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
    1386:	89 2b       	or	r24, r25
    1388:	11 f4       	brne	.+4      	; 0x138e <__vector_20+0x84>
			{
				linkbus_end_tx();
    138a:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
    138e:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    1392:	81 11       	cpse	r24, r1
    1394:	2b c0       	rjmp	.+86     	; 0x13ec <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1396:	80 91 b1 46 	lds	r24, 0x46B1	; 0x8046b1 <_ZZ11__vector_20E4buff_0>
    139a:	90 91 b2 46 	lds	r25, 0x46B2	; 0x8046b2 <_ZZ11__vector_20E4buff_0+0x1>
    139e:	89 2b       	or	r24, r25
    13a0:	31 f4       	brne	.+12     	; 0x13ae <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
    13a2:	0e 94 cc 3a 	call	0x7598	; 0x7598 <nextFullSBTxBuffer>
    13a6:	80 93 b1 46 	sts	0x46B1, r24	; 0x8046b1 <_ZZ11__vector_20E4buff_0>
    13aa:	90 93 b2 46 	sts	0x46B2, r25	; 0x8046b2 <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    13ae:	e0 91 b1 46 	lds	r30, 0x46B1	; 0x8046b1 <_ZZ11__vector_20E4buff_0>
    13b2:	f0 91 b2 46 	lds	r31, 0x46B2	; 0x8046b2 <_ZZ11__vector_20E4buff_0+0x1>
    13b6:	80 91 b0 46 	lds	r24, 0x46B0	; 0x8046b0 <_ZZ11__vector_20E9charIndex_0>
    13ba:	df 01       	movw	r26, r30
    13bc:	a8 0f       	add	r26, r24
    13be:	b1 1d       	adc	r27, r1
    13c0:	9c 91       	ld	r25, X
    13c2:	99 23       	and	r25, r25
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	80 93 b0 46 	sts	0x46B0, r24	; 0x8046b0 <_ZZ11__vector_20E9charIndex_0>
    13cc:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    13d0:	0d c0       	rjmp	.+26     	; 0x13ec <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
    13d2:	10 92 b0 46 	sts	0x46B0, r1	; 0x8046b0 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
    13d6:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    13d8:	0e 94 cc 3a 	call	0x7598	; 0x7598 <nextFullSBTxBuffer>
    13dc:	80 93 b1 46 	sts	0x46B1, r24	; 0x8046b1 <_ZZ11__vector_20E4buff_0>
    13e0:	90 93 b2 46 	sts	0x46B2, r25	; 0x8046b2 <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
    13e4:	89 2b       	or	r24, r25
    13e6:	11 f4       	brne	.+4      	; 0x13ec <__vector_20+0xe2>
			{
				serialbus_end_tx();
    13e8:	0e 94 95 3b 	call	0x772a	; 0x772a <serialbus_end_tx>
			}
		}
	}
}
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0b be       	out	0x3b, r0	; 59
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	0f 90       	pop	r0
    140e:	1f 90       	pop	r1
    1410:	18 95       	reti

00001412 <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
    1412:	1f 92       	push	r1
    1414:	0f 92       	push	r0
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	0b b6       	in	r0, 0x3b	; 59
    141e:	0f 92       	push	r0
    1420:	2f 93       	push	r18
    1422:	3f 93       	push	r19
    1424:	4f 93       	push	r20
    1426:	5f 93       	push	r21
    1428:	6f 93       	push	r22
    142a:	7f 93       	push	r23
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
    1438:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    143c:	84 30       	cpi	r24, 0x04	; 4
    143e:	59 f5       	brne	.+86     	; 0x1496 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1440:	80 91 ae 46 	lds	r24, 0x46AE	; 0x8046ae <_ZZ11__vector_56E4buff>
    1444:	90 91 af 46 	lds	r25, 0x46AF	; 0x8046af <_ZZ11__vector_56E4buff+0x1>
    1448:	89 2b       	or	r24, r25
    144a:	31 f4       	brne	.+12     	; 0x1458 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
    144c:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_Z18nextFullLBTxBufferv>
    1450:	80 93 ae 46 	sts	0x46AE, r24	; 0x8046ae <_ZZ11__vector_56E4buff>
    1454:	90 93 af 46 	sts	0x46AF, r25	; 0x8046af <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
    1458:	e0 91 ae 46 	lds	r30, 0x46AE	; 0x8046ae <_ZZ11__vector_56E4buff>
    145c:	f0 91 af 46 	lds	r31, 0x46AF	; 0x8046af <_ZZ11__vector_56E4buff+0x1>
    1460:	80 91 ad 46 	lds	r24, 0x46AD	; 0x8046ad <_ZZ11__vector_56E9charIndex>
    1464:	df 01       	movw	r26, r30
    1466:	a8 0f       	add	r26, r24
    1468:	b1 1d       	adc	r27, r1
    146a:	9c 91       	ld	r25, X
    146c:	99 23       	and	r25, r25
    146e:	31 f0       	breq	.+12     	; 0x147c <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 ad 46 	sts	0x46AD, r24	; 0x8046ad <_ZZ11__vector_56E9charIndex>
    1476:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
    147c:	10 92 ad 46 	sts	0x46AD, r1	; 0x8046ad <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
    1480:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    1482:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_Z18nextFullLBTxBufferv>
    1486:	80 93 ae 46 	sts	0x46AE, r24	; 0x8046ae <_ZZ11__vector_56E4buff>
    148a:	90 93 af 46 	sts	0x46AF, r25	; 0x8046af <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
    148e:	89 2b       	or	r24, r25
    1490:	11 f4       	brne	.+4      	; 0x1496 <__vector_56+0x84>
			{
				linkbus_end_tx();
    1492:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
    1496:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	59 f5       	brne	.+86     	; 0x14f4 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    149e:	80 91 ab 46 	lds	r24, 0x46AB	; 0x8046ab <_ZZ11__vector_56E4buff_0>
    14a2:	90 91 ac 46 	lds	r25, 0x46AC	; 0x8046ac <_ZZ11__vector_56E4buff_0+0x1>
    14a6:	89 2b       	or	r24, r25
    14a8:	31 f4       	brne	.+12     	; 0x14b6 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
    14aa:	0e 94 cc 3a 	call	0x7598	; 0x7598 <nextFullSBTxBuffer>
    14ae:	80 93 ab 46 	sts	0x46AB, r24	; 0x8046ab <_ZZ11__vector_56E4buff_0>
    14b2:	90 93 ac 46 	sts	0x46AC, r25	; 0x8046ac <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    14b6:	e0 91 ab 46 	lds	r30, 0x46AB	; 0x8046ab <_ZZ11__vector_56E4buff_0>
    14ba:	f0 91 ac 46 	lds	r31, 0x46AC	; 0x8046ac <_ZZ11__vector_56E4buff_0+0x1>
    14be:	80 91 aa 46 	lds	r24, 0x46AA	; 0x8046aa <_ZZ11__vector_56E9charIndex_0>
    14c2:	df 01       	movw	r26, r30
    14c4:	a8 0f       	add	r26, r24
    14c6:	b1 1d       	adc	r27, r1
    14c8:	9c 91       	ld	r25, X
    14ca:	99 23       	and	r25, r25
    14cc:	31 f0       	breq	.+12     	; 0x14da <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	80 93 aa 46 	sts	0x46AA, r24	; 0x8046aa <_ZZ11__vector_56E9charIndex_0>
    14d4:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    14d8:	0d c0       	rjmp	.+26     	; 0x14f4 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
    14da:	10 92 aa 46 	sts	0x46AA, r1	; 0x8046aa <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
    14de:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    14e0:	0e 94 cc 3a 	call	0x7598	; 0x7598 <nextFullSBTxBuffer>
    14e4:	80 93 ab 46 	sts	0x46AB, r24	; 0x8046ab <_ZZ11__vector_56E4buff_0>
    14e8:	90 93 ac 46 	sts	0x46AC, r25	; 0x8046ac <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
    14ec:	89 2b       	or	r24, r25
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <__vector_56+0xe2>
			{
				serialbus_end_tx();
    14f0:	0e 94 95 3b 	call	0x772a	; 0x772a <serialbus_end_tx>
			}
		}
	}
}
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0b be       	out	0x3b, r0	; 59
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
    1524:	80 91 a8 46 	lds	r24, 0x46A8	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    1528:	90 91 a9 46 	lds	r25, 0x46A9	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
    152c:	89 2b       	or	r24, r25
    152e:	31 f4       	brne	.+12     	; 0x153c <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
    1530:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_Z19nextEmptyLBRxBufferv>
    1534:	80 93 a8 46 	sts	0x46A8, r24	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    1538:	90 93 a9 46 	sts	0x46A9, r25	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
    153c:	c0 91 a8 46 	lds	r28, 0x46A8	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    1540:	d0 91 a9 46 	lds	r29, 0x46A9	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
    1544:	20 97       	sbiw	r28, 0x00	; 0
    1546:	09 f4       	brne	.+2      	; 0x154a <_Z10linkbus_Rxh+0x30>
    1548:	e3 c0       	rjmp	.+454    	; 0x1710 <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
    154a:	81 2f       	mov	r24, r17
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    1552:	84 32       	cpi	r24, 0x24	; 36
    1554:	11 f0       	breq	.+4      	; 0x155a <_Z10linkbus_Rxh+0x40>
    1556:	81 32       	cpi	r24, 0x21	; 33
    1558:	49 f5       	brne	.+82     	; 0x15ac <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
    155a:	10 92 a7 46 	sts	0x46A7, r1	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    155e:	81 32       	cpi	r24, 0x21	; 33
    1560:	11 f4       	brne	.+4      	; 0x1566 <_Z10linkbus_Rxh+0x4c>
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <_Z10linkbus_Rxh+0x4e>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	88 83       	st	Y, r24
			field_len = 0;
    156a:	10 92 a6 46 	sts	0x46A6, r1	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    156e:	10 92 a2 46 	sts	0x46A2, r1	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1572:	10 92 a3 46 	sts	0x46A3, r1	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1576:	10 92 a4 46 	sts	0x46A4, r1	; 0x8046a4 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    157a:	10 92 a5 46 	sts	0x46A5, r1	; 0x8046a5 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = true;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 a1 46 	sts	0x46A1, r24	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1584:	10 92 a0 46 	sts	0x46A0, r1	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    1588:	80 91 a0 46 	lds	r24, 0x46A0	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	58 f4       	brcc	.+22     	; 0x15a6 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
    1590:	fe 01       	movw	r30, r28
    1592:	05 e1       	ldi	r16, 0x15	; 21
    1594:	80 9f       	mul	r24, r16
    1596:	e0 0d       	add	r30, r0
    1598:	f1 1d       	adc	r31, r1
    159a:	11 24       	eor	r1, r1
    159c:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = true;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	80 93 a0 46 	sts	0x46A0, r24	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    15a4:	f1 cf       	rjmp	.-30     	; 0x1588 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
    15a6:	10 92 a0 46 	sts	0x46A0, r1	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    15aa:	a7 c0       	rjmp	.+334    	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
    15ac:	90 91 a1 46 	lds	r25, 0x46A1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
    15b0:	99 23       	and	r25, r25
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <_Z10linkbus_Rxh+0x9c>
    15b4:	8b c0       	rjmp	.+278    	; 0x16cc <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    15b6:	8c 32       	cpi	r24, 0x2C	; 44
    15b8:	29 f0       	breq	.+10     	; 0x15c4 <_Z10linkbus_Rxh+0xaa>
    15ba:	8b 33       	cpi	r24, 0x3B	; 59
    15bc:	19 f0       	breq	.+6      	; 0x15c4 <_Z10linkbus_Rxh+0xaa>
    15be:	8f 33       	cpi	r24, 0x3F	; 63
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <_Z10linkbus_Rxh+0xaa>
    15c2:	42 c0       	rjmp	.+132    	; 0x1648 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    15c4:	90 91 a0 46 	lds	r25, 0x46A0	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    15c8:	99 23       	and	r25, r25
    15ca:	89 f0       	breq	.+34     	; 0x15ee <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
    15cc:	29 2f       	mov	r18, r25
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	21 50       	subi	r18, 0x01	; 1
    15d2:	31 09       	sbc	r19, r1
    15d4:	40 91 a6 46 	lds	r20, 0x46A6	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
    15d8:	55 e1       	ldi	r21, 0x15	; 21
    15da:	52 9f       	mul	r21, r18
    15dc:	f0 01       	movw	r30, r0
    15de:	53 9f       	mul	r21, r19
    15e0:	f0 0d       	add	r31, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	ec 0f       	add	r30, r28
    15e6:	fd 1f       	adc	r31, r29
    15e8:	e4 0f       	add	r30, r20
    15ea:	f1 1d       	adc	r31, r1
    15ec:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
    15ee:	9f 5f       	subi	r25, 0xFF	; 255
    15f0:	90 93 a0 46 	sts	0x46A0, r25	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
    15f4:	10 92 a6 46 	sts	0x46A6, r1	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
    15f8:	8b 33       	cpi	r24, 0x3B	; 59
    15fa:	69 f4       	brne	.+26     	; 0x1616 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    15fc:	80 91 a7 46 	lds	r24, 0x46A7	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
    1600:	84 30       	cpi	r24, 0x04	; 4
    1602:	30 f0       	brcs	.+12     	; 0x1610 <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    1604:	80 91 a2 46 	lds	r24, 0x46A2	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1608:	90 91 a3 46 	lds	r25, 0x46A3	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    1610:	10 92 a1 46 	sts	0x46A1, r1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
    1614:	10 c0       	rjmp	.+32     	; 0x1636 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
    1616:	8f 33       	cpi	r24, 0x3F	; 63
    1618:	71 f4       	brne	.+28     	; 0x1636 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
    161e:	80 91 a7 46 	lds	r24, 0x46A7	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	30 f0       	brcs	.+12     	; 0x1632 <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    1626:	80 91 a2 46 	lds	r24, 0x46A2	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    162a:	90 91 a3 46 	lds	r25, 0x46A3	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    1632:	10 92 a1 46 	sts	0x46A1, r1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
    1636:	80 91 a1 46 	lds	r24, 0x46A1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
    163a:	81 11       	cpse	r24, r1
    163c:	5e c0       	rjmp	.+188    	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
    163e:	10 92 a8 46 	sts	0x46A8, r1	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    1642:	10 92 a9 46 	sts	0x46A9, r1	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
    1646:	59 c0       	rjmp	.+178    	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
    1648:	20 91 a0 46 	lds	r18, 0x46A0	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    164c:	21 11       	cpse	r18, r1
    164e:	29 c0       	rjmp	.+82     	; 0x16a2 <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
    1650:	40 91 a2 46 	lds	r20, 0x46A2	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1654:	50 91 a3 46 	lds	r21, 0x46A3	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1658:	60 91 a4 46 	lds	r22, 0x46A4	; 0x8046a4 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    165c:	70 91 a5 46 	lds	r23, 0x46A5	; 0x8046a5 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    1660:	44 0f       	add	r20, r20
    1662:	55 1f       	adc	r21, r21
    1664:	66 1f       	adc	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	8a 01       	movw	r16, r20
    166a:	9b 01       	movw	r18, r22
    166c:	00 0f       	add	r16, r16
    166e:	11 1f       	adc	r17, r17
    1670:	22 1f       	adc	r18, r18
    1672:	33 1f       	adc	r19, r19
    1674:	00 0f       	add	r16, r16
    1676:	11 1f       	adc	r17, r17
    1678:	22 1f       	adc	r18, r18
    167a:	33 1f       	adc	r19, r19
    167c:	40 0f       	add	r20, r16
    167e:	51 1f       	adc	r21, r17
    1680:	62 1f       	adc	r22, r18
    1682:	73 1f       	adc	r23, r19
    1684:	8a 01       	movw	r16, r20
    1686:	9b 01       	movw	r18, r22
    1688:	08 0f       	add	r16, r24
    168a:	11 1d       	adc	r17, r1
    168c:	21 1d       	adc	r18, r1
    168e:	31 1d       	adc	r19, r1
    1690:	00 93 a2 46 	sts	0x46A2, r16	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1694:	10 93 a3 46 	sts	0x46A3, r17	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1698:	20 93 a4 46 	sts	0x46A4, r18	; 0x8046a4 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    169c:	30 93 a5 46 	sts	0x46A5, r19	; 0x8046a5 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    16a0:	2c c0       	rjmp	.+88     	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	21 50       	subi	r18, 0x01	; 1
    16a6:	31 09       	sbc	r19, r1
    16a8:	90 91 a6 46 	lds	r25, 0x46A6	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	49 0f       	add	r20, r25
    16b0:	40 93 a6 46 	sts	0x46A6, r20	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
    16b4:	65 e1       	ldi	r22, 0x15	; 21
    16b6:	62 9f       	mul	r22, r18
    16b8:	a0 01       	movw	r20, r0
    16ba:	63 9f       	mul	r22, r19
    16bc:	50 0d       	add	r21, r0
    16be:	11 24       	eor	r1, r1
    16c0:	c4 0f       	add	r28, r20
    16c2:	d5 1f       	adc	r29, r21
    16c4:	c9 0f       	add	r28, r25
    16c6:	d1 1d       	adc	r29, r1
    16c8:	8b 83       	std	Y+3, r24	; 0x03
    16ca:	17 c0       	rjmp	.+46     	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
    16cc:	8d 30       	cpi	r24, 0x0D	; 13
    16ce:	a9 f4       	brne	.+42     	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
    16d0:	19 82       	std	Y+1, r1	; 0x01
    16d2:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
    16d4:	82 e3       	ldi	r24, 0x32	; 50
    16d6:	80 93 a7 46 	sts	0x46A7, r24	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
    16da:	10 92 a6 46 	sts	0x46A6, r1	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    16de:	10 92 a2 46 	sts	0x46A2, r1	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    16e2:	10 92 a3 46 	sts	0x46A3, r1	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    16e6:	10 92 a4 46 	sts	0x46A4, r1	; 0x8046a4 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    16ea:	10 92 a5 46 	sts	0x46A5, r1	; 0x8046a5 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
    16ee:	10 92 a0 46 	sts	0x46A0, r1	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
    16f2:	10 92 a8 46 	sts	0x46A8, r1	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    16f6:	10 92 a9 46 	sts	0x46A9, r1	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    16fa:	80 91 a7 46 	lds	r24, 0x46A7	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	80 93 a7 46 	sts	0x46A7, r24	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
    1704:	82 33       	cpi	r24, 0x32	; 50
    1706:	20 f0       	brcs	.+8      	; 0x1710 <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = false;
    1708:	10 92 a1 46 	sts	0x46A1, r1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
    170c:	10 92 a7 46 	sts	0x46A7, r1	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	08 95       	ret

0000171a <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	0b b6       	in	r0, 0x3b	; 59
    1726:	0f 92       	push	r0
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	cf 93       	push	r28
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
    1742:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <USART0_get_data>
    1746:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
    1748:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    174c:	81 11       	cpse	r24, r1
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
    1750:	8c 2f       	mov	r24, r28
    1752:	0e 94 8d 0a 	call	0x151a	; 0x151a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
    1756:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    175a:	81 11       	cpse	r24, r1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
    175e:	8c 2f       	mov	r24, r28
    1760:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z9serial_Rxh>
	}
}
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	cf 91       	pop	r28
    176a:	bf 91       	pop	r27
    176c:	af 91       	pop	r26
    176e:	9f 91       	pop	r25
    1770:	8f 91       	pop	r24
    1772:	7f 91       	pop	r23
    1774:	6f 91       	pop	r22
    1776:	5f 91       	pop	r21
    1778:	4f 91       	pop	r20
    177a:	3f 91       	pop	r19
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0b be       	out	0x3b, r0	; 59
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	18 95       	reti

0000178c <__vector_55>:

ISR(USART4_RXC_vect)
{
    178c:	1f 92       	push	r1
    178e:	0f 92       	push	r0
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	0f 92       	push	r0
    1794:	11 24       	eor	r1, r1
    1796:	0b b6       	in	r0, 0x3b	; 59
    1798:	0f 92       	push	r0
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	cf 93       	push	r28
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
    17b4:	0e 94 29 47 	call	0x8e52	; 0x8e52 <USART4_get_data>
    17b8:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
    17ba:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	19 f4       	brne	.+6      	; 0x17c8 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
    17c2:	8c 2f       	mov	r24, r28
    17c4:	0e 94 8d 0a 	call	0x151a	; 0x151a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
    17c8:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	19 f4       	brne	.+6      	; 0x17d6 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
    17d0:	8c 2f       	mov	r24, r28
    17d2:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z9serial_Rxh>
	}
}
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	cf 91       	pop	r28
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	7f 91       	pop	r23
    17e6:	6f 91       	pop	r22
    17e8:	5f 91       	pop	r21
    17ea:	4f 91       	pop	r20
    17ec:	3f 91       	pop	r19
    17ee:	2f 91       	pop	r18
    17f0:	0f 90       	pop	r0
    17f2:	0b be       	out	0x3b, r0	; 59
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	0b b6       	in	r0, 0x3b	; 59
    180a:	0f 92       	push	r0
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	cf 93       	push	r28
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
    1826:	0e 94 f5 46 	call	0x8dea	; 0x8dea <USART1_get_data>
    182a:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
    182c:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	19 f4       	brne	.+6      	; 0x183a <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
    1834:	8c 2f       	mov	r24, r28
    1836:	0e 94 8d 0a 	call	0x151a	; 0x151a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
    183a:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	19 f4       	brne	.+6      	; 0x1848 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
    1842:	8c 2f       	mov	r24, r28
    1844:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z9serial_Rxh>
	}
}
    1848:	ff 91       	pop	r31
    184a:	ef 91       	pop	r30
    184c:	cf 91       	pop	r28
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0b be       	out	0x3b, r0	; 59
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	0b b6       	in	r0, 0x3b	; 59
    187c:	0f 92       	push	r0
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
    1896:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	59 f5       	brne	.+86     	; 0x18f4 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    189e:	80 91 9e 46 	lds	r24, 0x469E	; 0x80469e <_ZZ11__vector_32E4buff>
    18a2:	90 91 9f 46 	lds	r25, 0x469F	; 0x80469f <_ZZ11__vector_32E4buff+0x1>
    18a6:	89 2b       	or	r24, r25
    18a8:	31 f4       	brne	.+12     	; 0x18b6 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
    18aa:	0e 94 cc 3a 	call	0x7598	; 0x7598 <nextFullSBTxBuffer>
    18ae:	80 93 9e 46 	sts	0x469E, r24	; 0x80469e <_ZZ11__vector_32E4buff>
    18b2:	90 93 9f 46 	sts	0x469F, r25	; 0x80469f <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
    18b6:	e0 91 9e 46 	lds	r30, 0x469E	; 0x80469e <_ZZ11__vector_32E4buff>
    18ba:	f0 91 9f 46 	lds	r31, 0x469F	; 0x80469f <_ZZ11__vector_32E4buff+0x1>
    18be:	80 91 9d 46 	lds	r24, 0x469D	; 0x80469d <_ZZ11__vector_32E9charIndex>
    18c2:	df 01       	movw	r26, r30
    18c4:	a8 0f       	add	r26, r24
    18c6:	b1 1d       	adc	r27, r1
    18c8:	9c 91       	ld	r25, X
    18ca:	99 23       	and	r25, r25
    18cc:	31 f0       	breq	.+12     	; 0x18da <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	80 93 9d 46 	sts	0x469D, r24	; 0x80469d <_ZZ11__vector_32E9charIndex>
    18d4:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    18d8:	0d c0       	rjmp	.+26     	; 0x18f4 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
    18da:	10 92 9d 46 	sts	0x469D, r1	; 0x80469d <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
    18de:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    18e0:	0e 94 cc 3a 	call	0x7598	; 0x7598 <nextFullSBTxBuffer>
    18e4:	80 93 9e 46 	sts	0x469E, r24	; 0x80469e <_ZZ11__vector_32E4buff>
    18e8:	90 93 9f 46 	sts	0x469F, r25	; 0x80469f <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
    18ec:	89 2b       	or	r24, r25
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <__vector_32+0x84>
			{
				serialbus_end_tx();
    18f0:	0e 94 95 3b 	call	0x772a	; 0x772a <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
    18f4:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	59 f5       	brne	.+86     	; 0x1952 <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    18fc:	80 91 9b 46 	lds	r24, 0x469B	; 0x80469b <_ZZ11__vector_32E4buff_0>
    1900:	90 91 9c 46 	lds	r25, 0x469C	; 0x80469c <_ZZ11__vector_32E4buff_0+0x1>
    1904:	89 2b       	or	r24, r25
    1906:	31 f4       	brne	.+12     	; 0x1914 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
    1908:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_Z18nextFullLBTxBufferv>
    190c:	80 93 9b 46 	sts	0x469B, r24	; 0x80469b <_ZZ11__vector_32E4buff_0>
    1910:	90 93 9c 46 	sts	0x469C, r25	; 0x80469c <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    1914:	e0 91 9b 46 	lds	r30, 0x469B	; 0x80469b <_ZZ11__vector_32E4buff_0>
    1918:	f0 91 9c 46 	lds	r31, 0x469C	; 0x80469c <_ZZ11__vector_32E4buff_0+0x1>
    191c:	80 91 9a 46 	lds	r24, 0x469A	; 0x80469a <__data_end>
    1920:	df 01       	movw	r26, r30
    1922:	a8 0f       	add	r26, r24
    1924:	b1 1d       	adc	r27, r1
    1926:	9c 91       	ld	r25, X
    1928:	99 23       	and	r25, r25
    192a:	31 f0       	breq	.+12     	; 0x1938 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	80 93 9a 46 	sts	0x469A, r24	; 0x80469a <__data_end>
    1932:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    1936:	0d c0       	rjmp	.+26     	; 0x1952 <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
    1938:	10 92 9a 46 	sts	0x469A, r1	; 0x80469a <__data_end>
			(*buff)[0] = '\0';
    193c:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    193e:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_Z18nextFullLBTxBufferv>
    1942:	80 93 9b 46 	sts	0x469B, r24	; 0x80469b <_ZZ11__vector_32E4buff_0>
    1946:	90 93 9c 46 	sts	0x469C, r25	; 0x80469c <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
    194a:	89 2b       	or	r24, r25
    194c:	11 f4       	brne	.+4      	; 0x1952 <__vector_32+0xe2>
			{
				linkbus_end_tx();
    194e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_Z14linkbus_end_txv>
			}
		}
	}
}
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	7f 91       	pop	r23
    1960:	6f 91       	pop	r22
    1962:	5f 91       	pop	r21
    1964:	4f 91       	pop	r20
    1966:	3f 91       	pop	r19
    1968:	2f 91       	pop	r18
    196a:	0f 90       	pop	r0
    196c:	0b be       	out	0x3b, r0	; 59
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <__vector_41>:
{
	
}

void suspendEvent()
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	0b b6       	in	r0, 0x3b	; 59
    1984:	0f 92       	push	r0
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	6f 93       	push	r22
    1994:	7f 93       	push	r23
    1996:	8f 93       	push	r24
    1998:	9f 93       	push	r25
    199a:	af 93       	push	r26
    199c:	bf 93       	push	r27
    199e:	ef 93       	push	r30
    19a0:	ff 93       	push	r31
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	25 97       	sbiw	r28, 0x05	; 5
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    19b4:	80 ff       	sbrs	r24, 0
    19b6:	98 c3       	rjmp	.+1840   	; 0x20e8 <__vector_41+0x770>
    19b8:	80 91 93 47 	lds	r24, 0x4793	; 0x804793 <_ZZ11__vector_41E3cnt>
    19bc:	90 91 94 47 	lds	r25, 0x4794	; 0x804794 <_ZZ11__vector_41E3cnt+0x1>
    19c0:	9c 01       	movw	r18, r24
    19c2:	2f 5f       	subi	r18, 0xFF	; 255
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	20 93 93 47 	sts	0x4793, r18	; 0x804793 <_ZZ11__vector_41E3cnt>
    19ca:	30 93 94 47 	sts	0x4794, r19	; 0x804794 <_ZZ11__vector_41E3cnt+0x1>
    19ce:	8b 32       	cpi	r24, 0x2B	; 43
    19d0:	91 40       	sbci	r25, 0x01	; 1
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <__vector_41+0x5e>
    19d4:	86 c3       	rjmp	.+1804   	; 0x20e2 <__vector_41+0x76a>
    19d6:	10 92 93 47 	sts	0x4793, r1	; 0x804793 <_ZZ11__vector_41E3cnt>
    19da:	10 92 94 47 	sts	0x4794, r1	; 0x804794 <_ZZ11__vector_41E3cnt+0x1>
    19de:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    19e2:	81 11       	cpse	r24, r1
    19e4:	03 c0       	rjmp	.+6      	; 0x19ec <__vector_41+0x74>
    19e6:	8a b1       	in	r24, 0x0a	; 10
    19e8:	80 64       	ori	r24, 0x40	; 64
    19ea:	8a b9       	out	0x0a, r24	; 10
    19ec:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_Z18antennaIsConnectedv>
    19f0:	81 11       	cpse	r24, r1
    19f2:	0a c0       	rjmp	.+20     	; 0x1a08 <__vector_41+0x90>
    19f4:	90 91 27 47 	lds	r25, 0x4727	; 0x804727 <g_antenna_connect_state>
    19f8:	91 30       	cpi	r25, 0x01	; 1
    19fa:	19 f1       	breq	.+70     	; 0x1a42 <__vector_41+0xca>
    19fc:	91 e0       	ldi	r25, 0x01	; 1
    19fe:	90 93 27 47 	sts	0x4727, r25	; 0x804727 <g_antenna_connect_state>
    1a02:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a06:	1d c0       	rjmp	.+58     	; 0x1a42 <__vector_41+0xca>
    1a08:	90 91 27 47 	lds	r25, 0x4727	; 0x804727 <g_antenna_connect_state>
    1a0c:	91 30       	cpi	r25, 0x01	; 1
    1a0e:	c9 f4       	brne	.+50     	; 0x1a42 <__vector_41+0xca>
    1a10:	90 91 95 47 	lds	r25, 0x4795	; 0x804795 <_ZZ11__vector_41E26lastAntennaConnectionState>
    1a14:	89 13       	cpse	r24, r25
    1a16:	12 c0       	rjmp	.+36     	; 0x1a3c <__vector_41+0xc4>
    1a18:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a1c:	99 23       	and	r25, r25
    1a1e:	89 f0       	breq	.+34     	; 0x1a42 <__vector_41+0xca>
    1a20:	91 50       	subi	r25, 0x01	; 1
    1a22:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a26:	91 11       	cpse	r25, r1
    1a28:	0c c0       	rjmp	.+24     	; 0x1a42 <__vector_41+0xca>
    1a2a:	10 92 27 47 	sts	0x4727, r1	; 0x804727 <g_antenna_connect_state>
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a34:	93 e0       	ldi	r25, 0x03	; 3
    1a36:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <__vector_41+0xca>
    1a3c:	93 e0       	ldi	r25, 0x03	; 3
    1a3e:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a42:	80 93 95 47 	sts	0x4795, r24	; 0x804795 <_ZZ11__vector_41E26lastAntennaConnectionState>
    1a46:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <system_tick>
    1a4a:	10 91 6d 47 	lds	r17, 0x476D	; 0x80476d <_ZL10g_sleeping>
    1a4e:	11 23       	and	r17, r17
    1a50:	a9 f1       	breq	.+106    	; 0x1abc <__vector_41+0x144>
    1a52:	80 91 6e 47 	lds	r24, 0x476E	; 0x80476e <_ZL23g_seconds_left_to_sleep>
    1a56:	90 91 6f 47 	lds	r25, 0x476F	; 0x80476f <_ZL23g_seconds_left_to_sleep+0x1>
    1a5a:	a0 91 70 47 	lds	r26, 0x4770	; 0x804770 <_ZL23g_seconds_left_to_sleep+0x2>
    1a5e:	b0 91 71 47 	lds	r27, 0x4771	; 0x804771 <_ZL23g_seconds_left_to_sleep+0x3>
    1a62:	89 2b       	or	r24, r25
    1a64:	8a 2b       	or	r24, r26
    1a66:	8b 2b       	or	r24, r27
    1a68:	99 f0       	breq	.+38     	; 0x1a90 <__vector_41+0x118>
    1a6a:	80 91 6e 47 	lds	r24, 0x476E	; 0x80476e <_ZL23g_seconds_left_to_sleep>
    1a6e:	90 91 6f 47 	lds	r25, 0x476F	; 0x80476f <_ZL23g_seconds_left_to_sleep+0x1>
    1a72:	a0 91 70 47 	lds	r26, 0x4770	; 0x804770 <_ZL23g_seconds_left_to_sleep+0x2>
    1a76:	b0 91 71 47 	lds	r27, 0x4771	; 0x804771 <_ZL23g_seconds_left_to_sleep+0x3>
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	a1 09       	sbc	r26, r1
    1a7e:	b1 09       	sbc	r27, r1
    1a80:	80 93 6e 47 	sts	0x476E, r24	; 0x80476e <_ZL23g_seconds_left_to_sleep>
    1a84:	90 93 6f 47 	sts	0x476F, r25	; 0x80476f <_ZL23g_seconds_left_to_sleep+0x1>
    1a88:	a0 93 70 47 	sts	0x4770, r26	; 0x804770 <_ZL23g_seconds_left_to_sleep+0x2>
    1a8c:	b0 93 71 47 	sts	0x4771, r27	; 0x804771 <_ZL23g_seconds_left_to_sleep+0x3>
    1a90:	80 91 6e 47 	lds	r24, 0x476E	; 0x80476e <_ZL23g_seconds_left_to_sleep>
    1a94:	90 91 6f 47 	lds	r25, 0x476F	; 0x80476f <_ZL23g_seconds_left_to_sleep+0x1>
    1a98:	a0 91 70 47 	lds	r26, 0x4770	; 0x804770 <_ZL23g_seconds_left_to_sleep+0x2>
    1a9c:	b0 91 71 47 	lds	r27, 0x4771	; 0x804771 <_ZL23g_seconds_left_to_sleep+0x3>
    1aa0:	89 2b       	or	r24, r25
    1aa2:	8a 2b       	or	r24, r26
    1aa4:	8b 2b       	or	r24, r27
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <__vector_41+0x134>
    1aa8:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
    1aac:	11 23       	and	r17, r17
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <__vector_41+0x13a>
    1ab0:	18 c3       	rjmp	.+1584   	; 0x20e2 <__vector_41+0x76a>
    1ab2:	10 92 6c 47 	sts	0x476C, r1	; 0x80476c <_ZL13g_go_to_sleep>
    1ab6:	10 92 6d 47 	sts	0x476D, r1	; 0x80476d <_ZL10g_sleeping>
    1aba:	13 c3       	rjmp	.+1574   	; 0x20e2 <__vector_41+0x76a>
    1abc:	19 82       	std	Y+1, r1	; 0x01
    1abe:	1a 82       	std	Y+2, r1	; 0x02
    1ac0:	1b 82       	std	Y+3, r1	; 0x03
    1ac2:	1c 82       	std	Y+4, r1	; 0x04
    1ac4:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1ac8:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1acc:	89 2b       	or	r24, r25
    1ace:	49 f0       	breq	.+18     	; 0x1ae2 <__vector_41+0x16a>
    1ad0:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1ad4:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1ade:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1ae2:	80 91 69 47 	lds	r24, 0x4769	; 0x804769 <g_event_commenced>
    1ae6:	88 23       	and	r24, r24
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <__vector_41+0x174>
    1aea:	52 c0       	rjmp	.+164    	; 0x1b90 <__vector_41+0x218>
    1aec:	40 91 64 47 	lds	r20, 0x4764	; 0x804764 <g_event_finish_time>
    1af0:	50 91 65 47 	lds	r21, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    1af4:	60 91 66 47 	lds	r22, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    1af8:	70 91 67 47 	lds	r23, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    1afc:	45 2b       	or	r20, r21
    1afe:	46 2b       	or	r20, r22
    1b00:	47 2b       	or	r20, r23
    1b02:	51 f0       	breq	.+20     	; 0x1b18 <__vector_41+0x1a0>
    1b04:	90 91 6a 47 	lds	r25, 0x476A	; 0x80476a <g_check_for_next_event>
    1b08:	91 11       	cpse	r25, r1
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <__vector_41+0x1a4>
    1b0c:	90 91 30 47 	lds	r25, 0x4730	; 0x804730 <_ZL20g_shutting_down_wifi>
    1b10:	99 23       	and	r25, r25
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <__vector_41+0x1a6>
    1b14:	81 2f       	mov	r24, r17
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <__vector_41+0x1a6>
    1b18:	81 2f       	mov	r24, r17
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <__vector_41+0x1a6>
    1b1c:	81 2f       	mov	r24, r17
    1b1e:	88 23       	and	r24, r24
    1b20:	b9 f1       	breq	.+110    	; 0x1b90 <__vector_41+0x218>
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    1b2a:	49 81       	ldd	r20, Y+1	; 0x01
    1b2c:	5a 81       	ldd	r21, Y+2	; 0x02
    1b2e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b30:	7c 81       	ldd	r23, Y+4	; 0x04
    1b32:	80 91 64 47 	lds	r24, 0x4764	; 0x804764 <g_event_finish_time>
    1b36:	90 91 65 47 	lds	r25, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    1b3a:	a0 91 66 47 	lds	r26, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    1b3e:	b0 91 67 47 	lds	r27, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    1b42:	48 17       	cp	r20, r24
    1b44:	59 07       	cpc	r21, r25
    1b46:	6a 07       	cpc	r22, r26
    1b48:	7b 07       	cpc	r23, r27
    1b4a:	10 f1       	brcs	.+68     	; 0x1b90 <__vector_41+0x218>
    1b4c:	8c ef       	ldi	r24, 0xFC	; 252
    1b4e:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1b52:	10 92 28 47 	sts	0x4728, r1	; 0x804728 <_ZL12g_on_the_air>
    1b56:	10 92 29 47 	sts	0x4729, r1	; 0x804729 <_ZL12g_on_the_air+0x1>
    1b5a:	10 92 2a 47 	sts	0x472A, r1	; 0x80472a <_ZL12g_on_the_air+0x2>
    1b5e:	10 92 2b 47 	sts	0x472B, r1	; 0x80472b <_ZL12g_on_the_air+0x3>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <_Z14keyTransmitterb>
    1b68:	10 92 68 47 	sts	0x4768, r1	; 0x804768 <g_event_enabled>
    1b6c:	10 92 69 47 	sts	0x4769, r1	; 0x804769 <g_event_commenced>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	80 93 6a 47 	sts	0x476A, r24	; 0x80476a <g_check_for_next_event>
    1b76:	8a e5       	ldi	r24, 0x5A	; 90
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1b7e:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1b82:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1b86:	88 23       	and	r24, r24
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <__vector_41+0x218>
    1b8a:	8c e3       	ldi	r24, 0x3C	; 60
    1b8c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b90:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    1b94:	88 23       	and	r24, r24
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <__vector_41+0x222>
    1b98:	32 c2       	rjmp	.+1124   	; 0x1ffe <__vector_41+0x686>
    1b9a:	00 91 69 47 	lds	r16, 0x4769	; 0x804769 <g_event_commenced>
    1b9e:	00 23       	and	r16, r16
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <__vector_41+0x22c>
    1ba2:	a2 c1       	rjmp	.+836    	; 0x1ee8 <__vector_41+0x570>
    1ba4:	80 91 2c 47 	lds	r24, 0x472C	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1ba8:	90 91 2d 47 	lds	r25, 0x472D	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1bac:	89 2b       	or	r24, r25
    1bae:	49 f0       	breq	.+18     	; 0x1bc2 <__vector_41+0x24a>
    1bb0:	80 91 2c 47 	lds	r24, 0x472C	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1bb4:	90 91 2d 47 	lds	r25, 0x472D	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1bbe:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1bc2:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1bc6:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1bca:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1bce:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1bd2:	89 2b       	or	r24, r25
    1bd4:	8a 2b       	or	r24, r26
    1bd6:	8b 2b       	or	r24, r27
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <__vector_41+0x264>
    1bda:	11 c2       	rjmp	.+1058   	; 0x1ffe <__vector_41+0x686>
    1bdc:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1be0:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1be4:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1be8:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1bec:	18 16       	cp	r1, r24
    1bee:	19 06       	cpc	r1, r25
    1bf0:	1a 06       	cpc	r1, r26
    1bf2:	1b 06       	cpc	r1, r27
    1bf4:	0c f0       	brlt	.+2      	; 0x1bf8 <__vector_41+0x280>
    1bf6:	26 c1       	rjmp	.+588    	; 0x1e44 <__vector_41+0x4cc>
    1bf8:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1bfc:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1c00:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1c04:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	a1 09       	sbc	r26, r1
    1c0c:	b1 09       	sbc	r27, r1
    1c0e:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1c12:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1c16:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1c1a:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1c1e:	80 91 2c 47 	lds	r24, 0x472C	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1c22:	90 91 2d 47 	lds	r25, 0x472D	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1c26:	89 2b       	or	r24, r25
    1c28:	41 f4       	brne	.+16     	; 0x1c3a <__vector_41+0x2c2>
    1c2a:	80 91 5c 47 	lds	r24, 0x475C	; 0x80475c <g_time_needed_for_ID>
    1c2e:	90 91 5d 47 	lds	r25, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    1c32:	89 2b       	or	r24, r25
    1c34:	21 f4       	brne	.+8      	; 0x1c3e <__vector_41+0x2c6>
    1c36:	81 2f       	mov	r24, r17
    1c38:	03 c0       	rjmp	.+6      	; 0x1c40 <__vector_41+0x2c8>
    1c3a:	81 2f       	mov	r24, r17
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <__vector_41+0x2c8>
    1c3e:	80 2f       	mov	r24, r16
    1c40:	88 23       	and	r24, r24
    1c42:	81 f1       	breq	.+96     	; 0x1ca4 <__vector_41+0x32c>
    1c44:	80 91 5c 47 	lds	r24, 0x475C	; 0x80475c <g_time_needed_for_ID>
    1c48:	90 91 5d 47 	lds	r25, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    1c4c:	a0 e0       	ldi	r26, 0x00	; 0
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	40 91 28 47 	lds	r20, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1c54:	50 91 29 47 	lds	r21, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1c58:	60 91 2a 47 	lds	r22, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1c5c:	70 91 2b 47 	lds	r23, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1c60:	84 17       	cp	r24, r20
    1c62:	95 07       	cpc	r25, r21
    1c64:	a6 07       	cpc	r26, r22
    1c66:	b7 07       	cpc	r27, r23
    1c68:	e9 f4       	brne	.+58     	; 0x1ca4 <__vector_41+0x32c>
    1c6a:	8f ee       	ldi	r24, 0xEF	; 239
    1c6c:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1c70:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1c74:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1c78:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1c7c:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1c80:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1c84:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    1c88:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1c8c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1c90:	1d 82       	std	Y+5, r1	; 0x05
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	be 01       	movw	r22, r28
    1c98:	6b 5f       	subi	r22, 0xFB	; 251
    1c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9c:	87 e4       	ldi	r24, 0x47	; 71
    1c9e:	97 e4       	ldi	r25, 0x47	; 71
    1ca0:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
    1ca4:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1ca8:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1cac:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1cb0:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1cb4:	89 2b       	or	r24, r25
    1cb6:	8a 2b       	or	r24, r26
    1cb8:	8b 2b       	or	r24, r27
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <__vector_41+0x346>
    1cbc:	a0 c1       	rjmp	.+832    	; 0x1ffe <__vector_41+0x686>
    1cbe:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1cc2:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1cc6:	89 2b       	or	r24, r25
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <__vector_41+0x354>
    1cca:	a3 c0       	rjmp	.+326    	; 0x1e12 <__vector_41+0x49a>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <_Z14keyTransmitterb>
    1cd2:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1cd6:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1cda:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1cde:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1ce2:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1ce6:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1cea:	05 2e       	mov	r0, r21
    1cec:	00 0c       	add	r0, r0
    1cee:	66 0b       	sbc	r22, r22
    1cf0:	77 0b       	sbc	r23, r23
    1cf2:	84 1b       	sub	r24, r20
    1cf4:	95 0b       	sbc	r25, r21
    1cf6:	a6 0b       	sbc	r26, r22
    1cf8:	b7 0b       	sbc	r27, r23
    1cfa:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1cfe:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1d02:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1d06:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	be 01       	movw	r22, r28
    1d14:	6b 5f       	subi	r22, 0xFB	; 251
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	82 e3       	ldi	r24, 0x32	; 50
    1d1a:	97 e4       	ldi	r25, 0x47	; 71
    1d1c:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
    1d20:	8e ef       	ldi	r24, 0xFE	; 254
    1d22:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1d26:	ce 01       	movw	r24, r28
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    1d2e:	29 81       	ldd	r18, Y+1	; 0x01
    1d30:	3a 81       	ldd	r19, Y+2	; 0x02
    1d32:	4b 81       	ldd	r20, Y+3	; 0x03
    1d34:	5c 81       	ldd	r21, Y+4	; 0x04
    1d36:	80 91 64 47 	lds	r24, 0x4764	; 0x804764 <g_event_finish_time>
    1d3a:	90 91 65 47 	lds	r25, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    1d3e:	a0 91 66 47 	lds	r26, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    1d42:	b0 91 67 47 	lds	r27, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    1d46:	28 17       	cp	r18, r24
    1d48:	39 07       	cpc	r19, r25
    1d4a:	4a 07       	cpc	r20, r26
    1d4c:	5b 07       	cpc	r21, r27
    1d4e:	58 f4       	brcc	.+22     	; 0x1d66 <__vector_41+0x3ee>
    1d50:	60 91 64 47 	lds	r22, 0x4764	; 0x804764 <g_event_finish_time>
    1d54:	70 91 65 47 	lds	r23, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    1d58:	80 91 66 47 	lds	r24, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    1d5c:	90 91 67 47 	lds	r25, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    1d60:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <_Z7timeDifmm>
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <__vector_41+0x3f4>
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    1d70:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d74:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    1d78:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1d7c:	24 0f       	add	r18, r20
    1d7e:	35 1f       	adc	r19, r21
    1d80:	21 5f       	subi	r18, 0xF1	; 241
    1d82:	3f 4f       	sbci	r19, 0xFF	; 255
    1d84:	03 2e       	mov	r0, r19
    1d86:	00 0c       	add	r0, r0
    1d88:	44 0b       	sbc	r20, r20
    1d8a:	55 0b       	sbc	r21, r21
    1d8c:	26 17       	cp	r18, r22
    1d8e:	37 07       	cpc	r19, r23
    1d90:	48 07       	cpc	r20, r24
    1d92:	59 07       	cpc	r21, r25
    1d94:	0c f0       	brlt	.+2      	; 0x1d98 <__vector_41+0x420>
    1d96:	33 c1       	rjmp	.+614    	; 0x1ffe <__vector_41+0x686>
    1d98:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d9c:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1da0:	40 97       	sbiw	r24, 0x10	; 16
    1da2:	2c f0       	brlt	.+10     	; 0x1dae <__vector_41+0x436>
    1da4:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1da8:	81 11       	cpse	r24, r1
    1daa:	01 c0       	rjmp	.+2      	; 0x1dae <__vector_41+0x436>
    1dac:	10 2f       	mov	r17, r16
    1dae:	11 23       	and	r17, r17
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <__vector_41+0x43c>
    1db2:	25 c1       	rjmp	.+586    	; 0x1ffe <__vector_41+0x686>
    1db4:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1db8:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1dbc:	0a 97       	sbiw	r24, 0x0a	; 10
    1dbe:	09 2e       	mov	r0, r25
    1dc0:	00 0c       	add	r0, r0
    1dc2:	aa 0b       	sbc	r26, r26
    1dc4:	bb 0b       	sbc	r27, r27
    1dc6:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1dca:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1dce:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1dd2:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	80 93 31 47 	sts	0x4731, r24	; 0x804731 <_ZL11g_sleepType>
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	80 93 6c 47 	sts	0x476C, r24	; 0x80476c <_ZL13g_go_to_sleep>
    1de2:	80 91 2c 47 	lds	r24, 0x472C	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1de6:	90 91 2d 47 	lds	r25, 0x472D	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1dea:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep>
    1dee:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1df2:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1df6:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1dfa:	84 1b       	sub	r24, r20
    1dfc:	95 0b       	sbc	r25, r21
    1dfe:	18 16       	cp	r1, r24
    1e00:	19 06       	cpc	r1, r25
    1e02:	14 f0       	brlt	.+4      	; 0x1e08 <__vector_41+0x490>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1e0c:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1e10:	f6 c0       	rjmp	.+492    	; 0x1ffe <__vector_41+0x686>
    1e12:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1e16:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1e1a:	09 2e       	mov	r0, r25
    1e1c:	00 0c       	add	r0, r0
    1e1e:	aa 0b       	sbc	r26, r26
    1e20:	bb 0b       	sbc	r27, r27
    1e22:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1e26:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e2a:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e2e:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e32:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1e36:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    1e3a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1e3e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1e42:	dd c0       	rjmp	.+442    	; 0x1ffe <__vector_41+0x686>
    1e44:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1e48:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e4c:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e50:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e54:	bb 23       	and	r27, r27
    1e56:	0c f0       	brlt	.+2      	; 0x1e5a <__vector_41+0x4e2>
    1e58:	d2 c0       	rjmp	.+420    	; 0x1ffe <__vector_41+0x686>
    1e5a:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1e5e:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e62:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e66:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	a1 1d       	adc	r26, r1
    1e6e:	b1 1d       	adc	r27, r1
    1e70:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1e74:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e78:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e7c:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e80:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1e84:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e88:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e8c:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e90:	89 2b       	or	r24, r25
    1e92:	8a 2b       	or	r24, r26
    1e94:	8b 2b       	or	r24, r27
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <__vector_41+0x522>
    1e98:	b2 c0       	rjmp	.+356    	; 0x1ffe <__vector_41+0x686>
    1e9a:	8d ef       	ldi	r24, 0xFD	; 253
    1e9c:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1ea0:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1ea4:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1ea8:	09 2e       	mov	r0, r25
    1eaa:	00 0c       	add	r0, r0
    1eac:	aa 0b       	sbc	r26, r26
    1eae:	bb 0b       	sbc	r27, r27
    1eb0:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1eb4:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1eb8:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1ebc:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1ec0:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1ec4:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    1ec8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1ecc:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	be 01       	movw	r22, r28
    1eda:	6b 5f       	subi	r22, 0xFB	; 251
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	82 e3       	ldi	r24, 0x32	; 50
    1ee0:	97 e4       	ldi	r25, 0x47	; 71
    1ee2:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
    1ee6:	8b c0       	rjmp	.+278    	; 0x1ffe <__vector_41+0x686>
    1ee8:	80 91 60 47 	lds	r24, 0x4760	; 0x804760 <g_event_start_time>
    1eec:	90 91 61 47 	lds	r25, 0x4761	; 0x804761 <g_event_start_time+0x1>
    1ef0:	a0 91 62 47 	lds	r26, 0x4762	; 0x804762 <g_event_start_time+0x2>
    1ef4:	b0 91 63 47 	lds	r27, 0x4763	; 0x804763 <g_event_start_time+0x3>
    1ef8:	89 2b       	or	r24, r25
    1efa:	8a 2b       	or	r24, r26
    1efc:	8b 2b       	or	r24, r27
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <__vector_41+0x58a>
    1f00:	7e c0       	rjmp	.+252    	; 0x1ffe <__vector_41+0x686>
    1f02:	ce 01       	movw	r24, r28
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    1f0a:	49 81       	ldd	r20, Y+1	; 0x01
    1f0c:	5a 81       	ldd	r21, Y+2	; 0x02
    1f0e:	6b 81       	ldd	r22, Y+3	; 0x03
    1f10:	7c 81       	ldd	r23, Y+4	; 0x04
    1f12:	80 91 60 47 	lds	r24, 0x4760	; 0x804760 <g_event_start_time>
    1f16:	90 91 61 47 	lds	r25, 0x4761	; 0x804761 <g_event_start_time+0x1>
    1f1a:	a0 91 62 47 	lds	r26, 0x4762	; 0x804762 <g_event_start_time+0x2>
    1f1e:	b0 91 63 47 	lds	r27, 0x4763	; 0x804763 <g_event_start_time+0x3>
    1f22:	48 17       	cp	r20, r24
    1f24:	59 07       	cpc	r21, r25
    1f26:	6a 07       	cpc	r22, r26
    1f28:	7b 07       	cpc	r23, r27
    1f2a:	08 f4       	brcc	.+2      	; 0x1f2e <__vector_41+0x5b6>
    1f2c:	68 c0       	rjmp	.+208    	; 0x1ffe <__vector_41+0x686>
    1f2e:	80 91 5e 47 	lds	r24, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    1f32:	90 91 5f 47 	lds	r25, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    1f36:	89 2b       	or	r24, r25
    1f38:	59 f1       	breq	.+86     	; 0x1f90 <__vector_41+0x618>
    1f3a:	8e ef       	ldi	r24, 0xFE	; 254
    1f3c:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1f40:	80 91 5e 47 	lds	r24, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    1f44:	90 91 5f 47 	lds	r25, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    1f48:	91 95       	neg	r25
    1f4a:	81 95       	neg	r24
    1f4c:	91 09       	sbc	r25, r1
    1f4e:	09 2e       	mov	r0, r25
    1f50:	00 0c       	add	r0, r0
    1f52:	aa 0b       	sbc	r26, r26
    1f54:	bb 0b       	sbc	r27, r27
    1f56:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1f5a:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1f5e:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1f62:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1f66:	20 91 5e 47 	lds	r18, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    1f6a:	30 91 5f 47 	lds	r19, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    1f6e:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f72:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f76:	82 0f       	add	r24, r18
    1f78:	93 1f       	adc	r25, r19
    1f7a:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    1f7e:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    1f82:	82 1b       	sub	r24, r18
    1f84:	93 0b       	sbc	r25, r19
    1f86:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1f8a:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1f8e:	34 c0       	rjmp	.+104    	; 0x1ff8 <__vector_41+0x680>
    1f90:	8d ef       	ldi	r24, 0xFD	; 253
    1f92:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1f96:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f9a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f9e:	09 2e       	mov	r0, r25
    1fa0:	00 0c       	add	r0, r0
    1fa2:	aa 0b       	sbc	r26, r26
    1fa4:	bb 0b       	sbc	r27, r27
    1fa6:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1faa:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1fae:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1fb2:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1fb6:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1fba:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1fbe:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    1fc2:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    1fc6:	82 1b       	sub	r24, r18
    1fc8:	93 0b       	sbc	r25, r19
    1fca:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1fce:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1fd2:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1fd6:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    1fda:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1fde:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	be 01       	movw	r22, r28
    1fec:	6b 5f       	subi	r22, 0xFB	; 251
    1fee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff0:	82 e3       	ldi	r24, 0x32	; 50
    1ff2:	97 e4       	ldi	r25, 0x47	; 71
    1ff4:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	80 93 69 47 	sts	0x4769, r24	; 0x804769 <g_event_commenced>
    1ffe:	80 91 2f 47 	lds	r24, 0x472F	; 0x80472f <_ZL19g_wifi_enable_delay>
    2002:	88 23       	and	r24, r24
    2004:	e1 f0       	breq	.+56     	; 0x203e <__vector_41+0x6c6>
    2006:	80 91 2f 47 	lds	r24, 0x472F	; 0x80472f <_ZL19g_wifi_enable_delay>
    200a:	81 50       	subi	r24, 0x01	; 1
    200c:	80 93 2f 47 	sts	0x472F, r24	; 0x80472f <_ZL19g_wifi_enable_delay>
    2010:	80 91 2f 47 	lds	r24, 0x472F	; 0x80472f <_ZL19g_wifi_enable_delay>
    2014:	85 30       	cpi	r24, 0x05	; 5
    2016:	39 f4       	brne	.+14     	; 0x2026 <__vector_41+0x6ae>
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 5f 29 	call	0x52be	; 0x52be <_Z10wifi_powerb>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	0e 94 69 29 	call	0x52d2	; 0x52d2 <_Z10wifi_resetb>
    2024:	5e c0       	rjmp	.+188    	; 0x20e2 <__vector_41+0x76a>
    2026:	80 91 2f 47 	lds	r24, 0x472F	; 0x80472f <_ZL19g_wifi_enable_delay>
    202a:	81 11       	cpse	r24, r1
    202c:	5a c0       	rjmp	.+180    	; 0x20e2 <__vector_41+0x76a>
    202e:	46 e0       	ldi	r20, 0x06	; 6
    2030:	60 e8       	ldi	r22, 0x80	; 128
    2032:	75 e2       	ldi	r23, 0x25	; 37
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <_Z12linkbus_initm14USART_Number_t>
    203c:	52 c0       	rjmp	.+164    	; 0x20e2 <__vector_41+0x76a>
    203e:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    2042:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    2046:	89 2b       	or	r24, r25
    2048:	69 f0       	breq	.+26     	; 0x2064 <__vector_41+0x6ec>
    204a:	80 91 30 47 	lds	r24, 0x4730	; 0x804730 <_ZL20g_shutting_down_wifi>
    204e:	81 11       	cpse	r24, r1
    2050:	0c c0       	rjmp	.+24     	; 0x206a <__vector_41+0x6f2>
    2052:	90 91 6a 47 	lds	r25, 0x476A	; 0x80476a <g_check_for_next_event>
    2056:	91 11       	cpse	r25, r1
    2058:	08 c0       	rjmp	.+16     	; 0x206a <__vector_41+0x6f2>
    205a:	90 91 6b 47 	lds	r25, 0x476B	; 0x80476b <g_waiting_for_next_event>
    205e:	99 23       	and	r25, r25
    2060:	19 f0       	breq	.+6      	; 0x2068 <__vector_41+0x6f0>
    2062:	03 c0       	rjmp	.+6      	; 0x206a <__vector_41+0x6f2>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	01 c0       	rjmp	.+2      	; 0x206a <__vector_41+0x6f2>
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	88 23       	and	r24, r24
    206c:	99 f1       	breq	.+102    	; 0x20d4 <__vector_41+0x75c>
    206e:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2072:	88 23       	and	r24, r24
    2074:	79 f1       	breq	.+94     	; 0x20d4 <__vector_41+0x75c>
    2076:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    207a:	81 50       	subi	r24, 0x01	; 1
    207c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2080:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2084:	81 11       	cpse	r24, r1
    2086:	26 c0       	rjmp	.+76     	; 0x20d4 <__vector_41+0x75c>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	0e 94 69 29 	call	0x52d2	; 0x52d2 <_Z10wifi_resetb>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	0e 94 5f 29 	call	0x52be	; 0x52be <_Z10wifi_powerb>
    2094:	10 92 30 47 	sts	0x4730, r1	; 0x804730 <_ZL20g_shutting_down_wifi>
    2098:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    209c:	81 11       	cpse	r24, r1
    209e:	12 c0       	rjmp	.+36     	; 0x20c4 <__vector_41+0x74c>
    20a0:	84 e0       	ldi	r24, 0x04	; 4
    20a2:	80 93 31 47 	sts	0x4731, r24	; 0x804731 <_ZL11g_sleepType>
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	80 93 6c 47 	sts	0x476C, r24	; 0x80476c <_ZL13g_go_to_sleep>
    20ac:	8f ef       	ldi	r24, 0xFF	; 255
    20ae:	9f ef       	ldi	r25, 0xFF	; 255
    20b0:	dc 01       	movw	r26, r24
    20b2:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    20b6:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    20ba:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    20be:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    20c2:	06 c0       	rjmp	.+12     	; 0x20d0 <__vector_41+0x758>
    20c4:	80 91 31 47 	lds	r24, 0x4731	; 0x804731 <_ZL11g_sleepType>
    20c8:	83 30       	cpi	r24, 0x03	; 3
    20ca:	11 f4       	brne	.+4      	; 0x20d0 <__vector_41+0x758>
    20cc:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_Z12eventEnabledv>
    20d0:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    20d4:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    20d8:	88 23       	and	r24, r24
    20da:	19 f0       	breq	.+6      	; 0x20e2 <__vector_41+0x76a>
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	80 93 2e 47 	sts	0x472E, r24	; 0x80472e <_ZL16g_report_seconds>
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    20e8:	25 96       	adiw	r28, 0x05	; 5
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	ff 91       	pop	r31
    20f4:	ef 91       	pop	r30
    20f6:	bf 91       	pop	r27
    20f8:	af 91       	pop	r26
    20fa:	9f 91       	pop	r25
    20fc:	8f 91       	pop	r24
    20fe:	7f 91       	pop	r23
    2100:	6f 91       	pop	r22
    2102:	5f 91       	pop	r21
    2104:	4f 91       	pop	r20
    2106:	3f 91       	pop	r19
    2108:	2f 91       	pop	r18
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	0f 90       	pop	r0
    2110:	0b be       	out	0x3b, r0	; 59
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	0f 90       	pop	r0
    2118:	1f 90       	pop	r1
    211a:	18 95       	reti

0000211c <__vector_12>:
    211c:	1f 92       	push	r1
    211e:	0f 92       	push	r0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	0f 92       	push	r0
    2124:	11 24       	eor	r1, r1
    2126:	0b b6       	in	r0, 0x3b	; 59
    2128:	0f 92       	push	r0
    212a:	2f 93       	push	r18
    212c:	3f 93       	push	r19
    212e:	4f 93       	push	r20
    2130:	5f 93       	push	r21
    2132:	6f 93       	push	r22
    2134:	7f 93       	push	r23
    2136:	8f 93       	push	r24
    2138:	9f 93       	push	r25
    213a:	af 93       	push	r26
    213c:	bf 93       	push	r27
    213e:	ef 93       	push	r30
    2140:	ff 93       	push	r31
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	00 d0       	rcall	.+0      	; 0x2148 <__vector_12+0x2c>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    2150:	80 ff       	sbrs	r24, 0
    2152:	cd c0       	rjmp	.+410    	; 0x22ee <__vector_12+0x1d2>
    2154:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2158:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    215c:	89 2b       	or	r24, r25
    215e:	49 f0       	breq	.+18     	; 0x2172 <__vector_12+0x56>
    2160:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2164:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    216e:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2172:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2176:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    217a:	89 2b       	or	r24, r25
    217c:	49 f0       	breq	.+18     	; 0x2190 <__vector_12+0x74>
    217e:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2182:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    218c:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2190:	80 91 25 47 	lds	r24, 0x4725	; 0x804725 <_ZL21g_util_tick_countdown>
    2194:	90 91 26 47 	lds	r25, 0x4726	; 0x804726 <_ZL21g_util_tick_countdown+0x1>
    2198:	89 2b       	or	r24, r25
    219a:	49 f0       	breq	.+18     	; 0x21ae <__vector_12+0x92>
    219c:	80 91 25 47 	lds	r24, 0x4725	; 0x804725 <_ZL21g_util_tick_countdown>
    21a0:	90 91 26 47 	lds	r25, 0x4726	; 0x804726 <_ZL21g_util_tick_countdown+0x1>
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	80 93 25 47 	sts	0x4725, r24	; 0x804725 <_ZL21g_util_tick_countdown>
    21aa:	90 93 26 47 	sts	0x4726, r25	; 0x804726 <_ZL21g_util_tick_countdown+0x1>
    21ae:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    21b2:	88 23       	and	r24, r24
    21b4:	19 f0       	breq	.+6      	; 0x21bc <__vector_12+0xa0>
    21b6:	80 91 69 47 	lds	r24, 0x4769	; 0x804769 <g_event_commenced>
    21ba:	01 c0       	rjmp	.+2      	; 0x21be <__vector_12+0xa2>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	88 23       	and	r24, r24
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <__vector_12+0xa8>
    21c2:	92 c0       	rjmp	.+292    	; 0x22e8 <__vector_12+0x1cc>
    21c4:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    21c8:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    21cc:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    21d0:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    21d4:	18 16       	cp	r1, r24
    21d6:	19 06       	cpc	r1, r25
    21d8:	1a 06       	cpc	r1, r26
    21da:	1b 06       	cpc	r1, r27
    21dc:	0c f0       	brlt	.+2      	; 0x21e0 <__vector_12+0xc4>
    21de:	66 c0       	rjmp	.+204    	; 0x22ac <__vector_12+0x190>
    21e0:	80 91 96 47 	lds	r24, 0x4796	; 0x804796 <_ZZ11__vector_12E7codeInc>
    21e4:	90 91 97 47 	lds	r25, 0x4797	; 0x804797 <_ZZ11__vector_12E7codeInc+0x1>
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	09 f4       	brne	.+2      	; 0x21ee <__vector_12+0xd2>
    21ec:	47 c0       	rjmp	.+142    	; 0x227c <__vector_12+0x160>
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	80 93 96 47 	sts	0x4796, r24	; 0x804796 <_ZZ11__vector_12E7codeInc>
    21f4:	90 93 97 47 	sts	0x4797, r25	; 0x804797 <_ZZ11__vector_12E7codeInc+0x1>
    21f8:	89 2b       	or	r24, r25
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__vector_12+0xe2>
    21fc:	75 c0       	rjmp	.+234    	; 0x22e8 <__vector_12+0x1cc>
    21fe:	ae 01       	movw	r20, r28
    2200:	4f 5f       	subi	r20, 0xFF	; 255
    2202:	5f 4f       	sbci	r21, 0xFF	; 255
    2204:	be 01       	movw	r22, r28
    2206:	6e 5f       	subi	r22, 0xFE	; 254
    2208:	7f 4f       	sbci	r23, 0xFF	; 255
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
    2212:	80 93 98 47 	sts	0x4798, r24	; 0x804798 <_ZZ11__vector_12E3key>
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	81 11       	cpse	r24, r1
    221a:	25 c0       	rjmp	.+74     	; 0x2266 <__vector_12+0x14a>
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	88 23       	and	r24, r24
    2220:	11 f1       	breq	.+68     	; 0x2266 <__vector_12+0x14a>
    2222:	8d ef       	ldi	r24, 0xFD	; 253
    2224:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    2228:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    222c:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    2230:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2234:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	be 01       	movw	r22, r28
    2242:	6e 5f       	subi	r22, 0xFE	; 254
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	82 e3       	ldi	r24, 0x32	; 50
    2248:	97 e4       	ldi	r25, 0x47	; 71
    224a:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
    224e:	ae 01       	movw	r20, r28
    2250:	4f 5f       	subi	r20, 0xFF	; 255
    2252:	5f 4f       	sbci	r21, 0xFF	; 255
    2254:	be 01       	movw	r22, r28
    2256:	6e 5f       	subi	r22, 0xFE	; 254
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
    2262:	80 93 98 47 	sts	0x4798, r24	; 0x804798 <_ZZ11__vector_12E3key>
    2266:	80 91 98 47 	lds	r24, 0x4798	; 0x804798 <_ZZ11__vector_12E3key>
    226a:	88 23       	and	r24, r24
    226c:	e9 f1       	breq	.+122    	; 0x22e8 <__vector_12+0x1cc>
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	0e 94 ee 44 	call	0x89dc	; 0x89dc <_Z18powerToTransmitterb>
    2274:	89 b1       	in	r24, 0x09	; 9
    2276:	8f 7b       	andi	r24, 0xBF	; 191
    2278:	89 b9       	out	0x09, r24	; 9
    227a:	36 c0       	rjmp	.+108    	; 0x22e8 <__vector_12+0x1cc>
    227c:	80 91 98 47 	lds	r24, 0x4798	; 0x804798 <_ZZ11__vector_12E3key>
    2280:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <_Z14keyTransmitterb>
    2284:	80 91 98 47 	lds	r24, 0x4798	; 0x804798 <_ZZ11__vector_12E3key>
    2288:	81 11       	cpse	r24, r1
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <__vector_12+0x178>
    228c:	89 b1       	in	r24, 0x09	; 9
    228e:	80 64       	ori	r24, 0x40	; 64
    2290:	89 b9       	out	0x09, r24	; 9
    2292:	03 c0       	rjmp	.+6      	; 0x229a <__vector_12+0x17e>
    2294:	89 b1       	in	r24, 0x09	; 9
    2296:	8f 7b       	andi	r24, 0xBF	; 191
    2298:	89 b9       	out	0x09, r24	; 9
    229a:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    229e:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    22a2:	80 93 96 47 	sts	0x4796, r24	; 0x804796 <_ZZ11__vector_12E7codeInc>
    22a6:	90 93 97 47 	sts	0x4797, r25	; 0x804797 <_ZZ11__vector_12E7codeInc+0x1>
    22aa:	1e c0       	rjmp	.+60     	; 0x22e8 <__vector_12+0x1cc>
    22ac:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    22b0:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    22b4:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    22b8:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    22bc:	89 2b       	or	r24, r25
    22be:	8a 2b       	or	r24, r26
    22c0:	8b 2b       	or	r24, r27
    22c2:	91 f4       	brne	.+36     	; 0x22e8 <__vector_12+0x1cc>
    22c4:	80 91 98 47 	lds	r24, 0x4798	; 0x804798 <_ZZ11__vector_12E3key>
    22c8:	88 23       	and	r24, r24
    22ca:	71 f0       	breq	.+28     	; 0x22e8 <__vector_12+0x1cc>
    22cc:	10 92 98 47 	sts	0x4798, r1	; 0x804798 <_ZZ11__vector_12E3key>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <_Z14keyTransmitterb>
    22d6:	89 b1       	in	r24, 0x09	; 9
    22d8:	80 64       	ori	r24, 0x40	; 64
    22da:	89 b9       	out	0x09, r24	; 9
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	0e 94 ee 44 	call	0x89dc	; 0x89dc <_Z18powerToTransmitterb>
    22e2:	8e ef       	ldi	r24, 0xFE	; 254
    22e4:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	ff 91       	pop	r31
    22f8:	ef 91       	pop	r30
    22fa:	bf 91       	pop	r27
    22fc:	af 91       	pop	r26
    22fe:	9f 91       	pop	r25
    2300:	8f 91       	pop	r24
    2302:	7f 91       	pop	r23
    2304:	6f 91       	pop	r22
    2306:	5f 91       	pop	r21
    2308:	4f 91       	pop	r20
    230a:	3f 91       	pop	r19
    230c:	2f 91       	pop	r18
    230e:	0f 90       	pop	r0
    2310:	0b be       	out	0x3b, r0	; 59
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	0f 90       	pop	r0
    2318:	1f 90       	pop	r1
    231a:	18 95       	reti

0000231c <main>:
    231c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <atmel_start_init>
    2320:	89 b1       	in	r24, 0x09	; 9
    2322:	80 64       	ori	r24, 0x40	; 64
    2324:	89 b9       	out	0x09, r24	; 9
    2326:	8c e7       	ldi	r24, 0x7C	; 124
    2328:	97 e4       	ldi	r25, 0x47	; 71
    232a:	0e 94 0b 33 	call	0x6616	; 0x6616 <_ZN13EepromManager20initializeEEPROMVarsEv>
    232e:	8c e7       	ldi	r24, 0x7C	; 124
    2330:	97 e4       	ldi	r25, 0x47	; 71
    2332:	0e 94 1f 32 	call	0x643e	; 0x643e <_ZN13EepromManager11readNonVolsEv>
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	0e 94 df 28 	call	0x51be	; 0x51be <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
    233c:	0e 94 23 3c 	call	0x7846	; 0x7846 <sb_send_NewLine>
    2340:	87 e4       	ldi	r24, 0x47	; 71
    2342:	90 e4       	ldi	r25, 0x40	; 64
    2344:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2348:	84 e6       	ldi	r24, 0x64	; 100
    234a:	90 e4       	ldi	r25, 0x40	; 64
    234c:	9f 93       	push	r25
    234e:	8f 93       	push	r24
    2350:	88 e6       	ldi	r24, 0x68	; 104
    2352:	90 e4       	ldi	r25, 0x40	; 64
    2354:	9f 93       	push	r25
    2356:	8f 93       	push	r24
    2358:	81 ef       	ldi	r24, 0xF1	; 241
    235a:	96 e4       	ldi	r25, 0x46	; 70
    235c:	9f 93       	push	r25
    235e:	8f 93       	push	r24
    2360:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    2364:	81 ef       	ldi	r24, 0xF1	; 241
    2366:	96 e4       	ldi	r25, 0x46	; 70
    2368:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    236c:	85 e7       	ldi	r24, 0x75	; 117
    236e:	90 e4       	ldi	r25, 0x40	; 64
    2370:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2374:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <_Z16init_transmitterv>
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	82 3d       	cpi	r24, 0xD2	; 210
    2386:	31 f4       	brne	.+12     	; 0x2394 <main+0x78>
    2388:	0e 94 23 3c 	call	0x7846	; 0x7846 <sb_send_NewLine>
    238c:	8c eb       	ldi	r24, 0xBC	; 188
    238e:	91 e4       	ldi	r25, 0x41	; 65
    2390:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2394:	0e 94 42 22 	call	0x4484	; 0x4484 <_Z8rtc_initv>
    2398:	8c 3f       	cpi	r24, 0xFC	; 252
    239a:	31 f4       	brne	.+12     	; 0x23a8 <main+0x8c>
    239c:	0e 94 23 3c 	call	0x7846	; 0x7846 <sb_send_NewLine>
    23a0:	87 ee       	ldi	r24, 0xE7	; 231
    23a2:	91 e4       	ldi	r25, 0x41	; 65
    23a4:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    23a8:	0e 94 73 29 	call	0x52e6	; 0x52e6 <_Z11wifiPresentv>
    23ac:	81 11       	cpse	r24, r1
    23ae:	06 c0       	rjmp	.+12     	; 0x23bc <main+0xa0>
    23b0:	0e 94 23 3c 	call	0x7846	; 0x7846 <sb_send_NewLine>
    23b4:	8f e0       	ldi	r24, 0x0F	; 15
    23b6:	92 e4       	ldi	r25, 0x42	; 66
    23b8:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    23bc:	0e 94 23 3c 	call	0x7846	; 0x7846 <sb_send_NewLine>
    23c0:	0e 94 18 3c 	call	0x7830	; 0x7830 <sb_send_NewPrompt>
    23c4:	6a ef       	ldi	r22, 0xFA	; 250
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	0e 94 f5 43 	call	0x87ea	; 0x87ea <util_delay_ms>
    23d0:	88 23       	and	r24, r24
    23d2:	c1 f3       	breq	.-16     	; 0x23c4 <main+0xa8>
    23d4:	0e 94 dd 18 	call	0x31ba	; 0x31ba <_Z17handleLinkBusMsgsv>
    23d8:	0e 94 ef 11 	call	0x23de	; 0x23de <_Z19handleSerialBusMsgsv>
    23dc:	f3 cf       	rjmp	.-26     	; 0x23c4 <main+0xa8>

000023de <_Z19handleSerialBusMsgsv>:
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	c6 59       	subi	r28, 0x96	; 150
    23f0:	d1 09       	sbc	r29, r1
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0e 94 51 3b 	call	0x76a2	; 0x76a2 <nextFullSBRxBuffer>
    23fa:	8e 83       	std	Y+6, r24	; 0x06
    23fc:	9f 83       	std	Y+7, r25	; 0x07
    23fe:	21 e0       	ldi	r18, 0x01	; 1
    2400:	8e 81       	ldd	r24, Y+6	; 0x06
    2402:	9f 81       	ldd	r25, Y+7	; 0x07
    2404:	89 2b       	or	r24, r25
    2406:	09 f4       	brne	.+2      	; 0x240a <_Z19handleSerialBusMsgsv+0x2c>
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	22 23       	and	r18, r18
    240c:	09 f4       	brne	.+2      	; 0x2410 <_Z19handleSerialBusMsgsv+0x32>
    240e:	c9 c6       	rjmp	.+3474   	; 0x31a2 <_Z19handleSerialBusMsgsv+0xdc4>
    2410:	8e 81       	ldd	r24, Y+6	; 0x06
    2412:	9f 81       	ldd	r25, Y+7	; 0x07
    2414:	fc 01       	movw	r30, r24
    2416:	81 81       	ldd	r24, Z+1	; 0x01
    2418:	92 81       	ldd	r25, Z+2	; 0x02
    241a:	88 87       	std	Y+8, r24	; 0x08
    241c:	99 87       	std	Y+9, r25	; 0x09
    241e:	88 85       	ldd	r24, Y+8	; 0x08
    2420:	99 85       	ldd	r25, Y+9	; 0x09
    2422:	8a 3e       	cpi	r24, 0xEA	; 234
    2424:	f2 e2       	ldi	r31, 0x22	; 34
    2426:	9f 07       	cpc	r25, r31
    2428:	09 f4       	brne	.+2      	; 0x242c <_Z19handleSerialBusMsgsv+0x4e>
    242a:	a5 c3       	rjmp	.+1866   	; 0x2b76 <_Z19handleSerialBusMsgsv+0x798>
    242c:	8b 3e       	cpi	r24, 0xEB	; 235
    242e:	22 e2       	ldi	r18, 0x22	; 34
    2430:	92 07       	cpc	r25, r18
    2432:	b8 f4       	brcc	.+46     	; 0x2462 <_Z19handleSerialBusMsgsv+0x84>
    2434:	8f 36       	cpi	r24, 0x6F	; 111
    2436:	ed e1       	ldi	r30, 0x1D	; 29
    2438:	9e 07       	cpc	r25, r30
    243a:	09 f4       	brne	.+2      	; 0x243e <_Z19handleSerialBusMsgsv+0x60>
    243c:	ee c3       	rjmp	.+2012   	; 0x2c1a <_Z19handleSerialBusMsgsv+0x83c>
    243e:	80 37       	cpi	r24, 0x70	; 112
    2440:	fd e1       	ldi	r31, 0x1D	; 29
    2442:	9f 07       	cpc	r25, r31
    2444:	28 f4       	brcc	.+10     	; 0x2450 <_Z19handleSerialBusMsgsv+0x72>
    2446:	8e 31       	cpi	r24, 0x1E	; 30
    2448:	93 40       	sbci	r25, 0x03	; 3
    244a:	09 f4       	brne	.+2      	; 0x244e <_Z19handleSerialBusMsgsv+0x70>
    244c:	82 c2       	rjmp	.+1284   	; 0x2952 <_Z19handleSerialBusMsgsv+0x574>
    244e:	97 c6       	rjmp	.+3374   	; 0x317e <_Z19handleSerialBusMsgsv+0xda0>
    2450:	86 3c       	cpi	r24, 0xC6	; 198
    2452:	ee e1       	ldi	r30, 0x1E	; 30
    2454:	9e 07       	cpc	r25, r30
    2456:	e9 f0       	breq	.+58     	; 0x2492 <_Z19handleSerialBusMsgsv+0xb4>
    2458:	81 3d       	cpi	r24, 0xD1	; 209
    245a:	9e 41       	sbci	r25, 0x1E	; 30
    245c:	09 f4       	brne	.+2      	; 0x2460 <_Z19handleSerialBusMsgsv+0x82>
    245e:	a9 c1       	rjmp	.+850    	; 0x27b2 <_Z19handleSerialBusMsgsv+0x3d4>
    2460:	8e c6       	rjmp	.+3356   	; 0x317e <_Z19handleSerialBusMsgsv+0xda0>
    2462:	82 37       	cpi	r24, 0x72	; 114
    2464:	23 e2       	ldi	r18, 0x23	; 35
    2466:	92 07       	cpc	r25, r18
    2468:	09 f4       	brne	.+2      	; 0x246c <_Z19handleSerialBusMsgsv+0x8e>
    246a:	01 c3       	rjmp	.+1538   	; 0x2a6e <_Z19handleSerialBusMsgsv+0x690>
    246c:	83 37       	cpi	r24, 0x73	; 115
    246e:	e3 e2       	ldi	r30, 0x23	; 35
    2470:	9e 07       	cpc	r25, r30
    2472:	28 f4       	brcc	.+10     	; 0x247e <_Z19handleSerialBusMsgsv+0xa0>
    2474:	88 3f       	cpi	r24, 0xF8	; 248
    2476:	92 42       	sbci	r25, 0x22	; 34
    2478:	09 f4       	brne	.+2      	; 0x247c <_Z19handleSerialBusMsgsv+0x9e>
    247a:	38 c1       	rjmp	.+624    	; 0x26ec <_Z19handleSerialBusMsgsv+0x30e>
    247c:	80 c6       	rjmp	.+3328   	; 0x317e <_Z19handleSerialBusMsgsv+0xda0>
    247e:	84 33       	cpi	r24, 0x34	; 52
    2480:	24 e2       	ldi	r18, 0x24	; 36
    2482:	92 07       	cpc	r25, r18
    2484:	09 f4       	brne	.+2      	; 0x2488 <_Z19handleSerialBusMsgsv+0xaa>
    2486:	29 c2       	rjmp	.+1106   	; 0x28da <_Z19handleSerialBusMsgsv+0x4fc>
    2488:	85 3c       	cpi	r24, 0xC5	; 197
    248a:	94 42       	sbci	r25, 0x24	; 36
    248c:	09 f4       	brne	.+2      	; 0x2490 <_Z19handleSerialBusMsgsv+0xb2>
    248e:	63 c6       	rjmp	.+3270   	; 0x3156 <_Z19handleSerialBusMsgsv+0xd78>
    2490:	76 c6       	rjmp	.+3308   	; 0x317e <_Z19handleSerialBusMsgsv+0xda0>
    2492:	8e 81       	ldd	r24, Y+6	; 0x06
    2494:	9f 81       	ldd	r25, Y+7	; 0x07
    2496:	fc 01       	movw	r30, r24
    2498:	83 81       	ldd	r24, Z+3	; 0x03
    249a:	88 2f       	mov	r24, r24
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	9a 83       	std	Y+2, r25	; 0x02
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	89 2b       	or	r24, r25
    24a8:	09 f4       	brne	.+2      	; 0x24ac <_Z19handleSerialBusMsgsv+0xce>
    24aa:	d0 c0       	rjmp	.+416    	; 0x264c <_Z19handleSerialBusMsgsv+0x26e>
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	82 34       	cpi	r24, 0x42	; 66
    24b2:	91 05       	cpc	r25, r1
    24b4:	19 f4       	brne	.+6      	; 0x24bc <_Z19handleSerialBusMsgsv+0xde>
    24b6:	19 82       	std	Y+1, r1	; 0x01
    24b8:	1a 82       	std	Y+2, r1	; 0x02
    24ba:	ac c0       	rjmp	.+344    	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	86 34       	cpi	r24, 0x46	; 70
    24c2:	91 05       	cpc	r25, r1
    24c4:	29 f4       	brne	.+10     	; 0x24d0 <_Z19handleSerialBusMsgsv+0xf2>
    24c6:	86 e0       	ldi	r24, 0x06	; 6
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	a2 c0       	rjmp	.+324    	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	9a 81       	ldd	r25, Y+2	; 0x02
    24d4:	83 34       	cpi	r24, 0x43	; 67
    24d6:	91 05       	cpc	r25, r1
    24d8:	b9 f5       	brne	.+110    	; 0x2548 <_Z19handleSerialBusMsgsv+0x16a>
    24da:	8e 81       	ldd	r24, Y+6	; 0x06
    24dc:	9f 81       	ldd	r25, Y+7	; 0x07
    24de:	fc 01       	movw	r30, r24
    24e0:	87 89       	ldd	r24, Z+23	; 0x17
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	8e 81       	ldd	r24, Y+6	; 0x06
    24e6:	9f 81       	ldd	r25, Y+7	; 0x07
    24e8:	fc 01       	movw	r30, r24
    24ea:	10 8e       	std	Z+24, r1	; 0x18
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	82 34       	cpi	r24, 0x42	; 66
    24f0:	11 f4       	brne	.+4      	; 0x24f6 <_Z19handleSerialBusMsgsv+0x118>
    24f2:	80 e3       	ldi	r24, 0x30	; 48
    24f4:	8b 83       	std	Y+3, r24	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	88 2f       	mov	r24, r24
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	c0 97       	sbiw	r24, 0x30	; 48
    24fe:	0a 97       	sbiw	r24, 0x0a	; 10
    2500:	08 f0       	brcs	.+2      	; 0x2504 <_Z19handleSerialBusMsgsv+0x126>
    2502:	88 c0       	rjmp	.+272    	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    2504:	8e 81       	ldd	r24, Y+6	; 0x06
    2506:	9f 81       	ldd	r25, Y+7	; 0x07
    2508:	47 96       	adiw	r24, 0x17	; 23
    250a:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <atoi>
    250e:	8a 87       	std	Y+10, r24	; 0x0a
    2510:	9b 87       	std	Y+11, r25	; 0x0b
    2512:	1c 86       	std	Y+12, r1	; 0x0c
    2514:	85 e0       	ldi	r24, 0x05	; 5
    2516:	8d 87       	std	Y+13, r24	; 0x0d
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2520:	9b 85       	ldd	r25, Y+11	; 0x0b
    2522:	28 17       	cp	r18, r24
    2524:	39 07       	cpc	r19, r25
    2526:	24 f4       	brge	.+8      	; 0x2530 <_Z19handleSerialBusMsgsv+0x152>
    2528:	8d 85       	ldd	r24, Y+13	; 0x0d
    252a:	88 2f       	mov	r24, r24
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <_Z19handleSerialBusMsgsv+0x164>
    2530:	8c 85       	ldd	r24, Y+12	; 0x0c
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	2a 85       	ldd	r18, Y+10	; 0x0a
    2538:	3b 85       	ldd	r19, Y+11	; 0x0b
    253a:	82 17       	cp	r24, r18
    253c:	93 07       	cpc	r25, r19
    253e:	0c f4       	brge	.+2      	; 0x2542 <_Z19handleSerialBusMsgsv+0x164>
    2540:	c9 01       	movw	r24, r18
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	9a 83       	std	Y+2, r25	; 0x02
    2546:	66 c0       	rjmp	.+204    	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	83 35       	cpi	r24, 0x53	; 83
    254e:	91 05       	cpc	r25, r1
    2550:	09 f0       	breq	.+2      	; 0x2554 <_Z19handleSerialBusMsgsv+0x176>
    2552:	59 c0       	rjmp	.+178    	; 0x2606 <_Z19handleSerialBusMsgsv+0x228>
    2554:	1c 82       	std	Y+4, r1	; 0x04
    2556:	8e 81       	ldd	r24, Y+6	; 0x06
    2558:	9f 81       	ldd	r25, Y+7	; 0x07
    255a:	fc 01       	movw	r30, r24
    255c:	87 89       	ldd	r24, Z+23	; 0x17
    255e:	8e 87       	std	Y+14, r24	; 0x0e
    2560:	8e 81       	ldd	r24, Y+6	; 0x06
    2562:	9f 81       	ldd	r25, Y+7	; 0x07
    2564:	fc 01       	movw	r30, r24
    2566:	80 8d       	ldd	r24, Z+24	; 0x18
    2568:	8f 87       	std	Y+15, r24	; 0x0f
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    256c:	9f 81       	ldd	r25, Y+7	; 0x07
    256e:	fc 01       	movw	r30, r24
    2570:	11 8e       	std	Z+25, r1	; 0x19
    2572:	8e 85       	ldd	r24, Y+14	; 0x0e
    2574:	82 34       	cpi	r24, 0x42	; 66
    2576:	11 f4       	brne	.+4      	; 0x257c <_Z19handleSerialBusMsgsv+0x19e>
    2578:	1c 82       	std	Y+4, r1	; 0x04
    257a:	36 c0       	rjmp	.+108    	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    257c:	8e 85       	ldd	r24, Y+14	; 0x0e
    257e:	86 34       	cpi	r24, 0x46	; 70
    2580:	51 f4       	brne	.+20     	; 0x2596 <_Z19handleSerialBusMsgsv+0x1b8>
    2582:	8f 85       	ldd	r24, Y+15	; 0x0f
    2584:	81 33       	cpi	r24, 0x31	; 49
    2586:	80 f1       	brcs	.+96     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    2588:	8f 85       	ldd	r24, Y+15	; 0x0f
    258a:	86 33       	cpi	r24, 0x36	; 54
    258c:	68 f5       	brcc	.+90     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    258e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2590:	84 52       	subi	r24, 0x24	; 36
    2592:	8c 83       	std	Y+4, r24	; 0x04
    2594:	29 c0       	rjmp	.+82     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    2596:	8e 85       	ldd	r24, Y+14	; 0x0e
    2598:	83 35       	cpi	r24, 0x53	; 83
    259a:	69 f4       	brne	.+26     	; 0x25b6 <_Z19handleSerialBusMsgsv+0x1d8>
    259c:	8f 85       	ldd	r24, Y+15	; 0x0f
    259e:	81 33       	cpi	r24, 0x31	; 49
    25a0:	38 f0       	brcs	.+14     	; 0x25b0 <_Z19handleSerialBusMsgsv+0x1d2>
    25a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a4:	86 33       	cpi	r24, 0x36	; 54
    25a6:	20 f4       	brcc	.+8      	; 0x25b0 <_Z19handleSerialBusMsgsv+0x1d2>
    25a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25aa:	89 52       	subi	r24, 0x29	; 41
    25ac:	8c 83       	std	Y+4, r24	; 0x04
    25ae:	1c c0       	rjmp	.+56     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25b0:	87 e0       	ldi	r24, 0x07	; 7
    25b2:	8c 83       	std	Y+4, r24	; 0x04
    25b4:	19 c0       	rjmp	.+50     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b8:	86 34       	cpi	r24, 0x46	; 70
    25ba:	51 f4       	brne	.+20     	; 0x25d0 <_Z19handleSerialBusMsgsv+0x1f2>
    25bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25be:	81 33       	cpi	r24, 0x31	; 49
    25c0:	98 f0       	brcs	.+38     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c4:	86 33       	cpi	r24, 0x36	; 54
    25c6:	80 f4       	brcc	.+32     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ca:	84 52       	subi	r24, 0x24	; 36
    25cc:	8c 83       	std	Y+4, r24	; 0x04
    25ce:	0c c0       	rjmp	.+24     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d2:	83 35       	cpi	r24, 0x53	; 83
    25d4:	49 f4       	brne	.+18     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25d8:	81 33       	cpi	r24, 0x31	; 49
    25da:	30 f0       	brcs	.+12     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25de:	86 33       	cpi	r24, 0x36	; 54
    25e0:	18 f4       	brcc	.+6      	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25e4:	89 52       	subi	r24, 0x29	; 41
    25e6:	8c 83       	std	Y+4, r24	; 0x04
    25e8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ea:	87 30       	cpi	r24, 0x07	; 7
    25ec:	48 f0       	brcs	.+18     	; 0x2600 <_Z19handleSerialBusMsgsv+0x222>
    25ee:	8c 81       	ldd	r24, Y+4	; 0x04
    25f0:	82 31       	cpi	r24, 0x12	; 18
    25f2:	30 f4       	brcc	.+12     	; 0x2600 <_Z19handleSerialBusMsgsv+0x222>
    25f4:	8c 81       	ldd	r24, Y+4	; 0x04
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	0a c0       	rjmp	.+20     	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    2600:	19 82       	std	Y+1, r1	; 0x01
    2602:	1a 82       	std	Y+2, r1	; 0x02
    2604:	07 c0       	rjmp	.+14     	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    2606:	8e 81       	ldd	r24, Y+6	; 0x06
    2608:	9f 81       	ldd	r25, Y+7	; 0x07
    260a:	03 96       	adiw	r24, 0x03	; 3
    260c:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <atoi>
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	9a 83       	std	Y+2, r25	; 0x02
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	99 23       	and	r25, r25
    261a:	c4 f0       	brlt	.+48     	; 0x264c <_Z19handleSerialBusMsgsv+0x26e>
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	42 97       	sbiw	r24, 0x12	; 18
    2622:	a4 f4       	brge	.+40     	; 0x264c <_Z19handleSerialBusMsgsv+0x26e>
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8a ab       	std	Y+50, r24	; 0x32
    2628:	ce 01       	movw	r24, r28
    262a:	c2 96       	adiw	r24, 0x32	; 50
    262c:	ac 01       	movw	r20, r24
    262e:	69 e2       	ldi	r22, 0x29	; 41
    2630:	8c e7       	ldi	r24, 0x7C	; 124
    2632:	97 e4       	ldi	r25, 0x47	; 71
    2634:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2638:	9a a9       	ldd	r25, Y+50	; 0x32
    263a:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    263e:	98 17       	cp	r25, r24
    2640:	29 f0       	breq	.+10     	; 0x264c <_Z19handleSerialBusMsgsv+0x26e>
    2642:	ce 01       	movw	r24, r28
    2644:	c2 96       	adiw	r24, 0x32	; 50
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    264c:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    2650:	68 2f       	mov	r22, r24
    2652:	81 ef       	ldi	r24, 0xF1	; 241
    2654:	96 e4       	ldi	r25, 0x46	; 70
    2656:	0e 94 c5 48 	call	0x918a	; 0x918a <_Z8fox2TextPc5Fox_t>
    265a:	98 2f       	mov	r25, r24
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	89 27       	eor	r24, r25
    2660:	88 23       	and	r24, r24
    2662:	11 f1       	breq	.+68     	; 0x26a8 <_Z19handleSerialBusMsgsv+0x2ca>
    2664:	ce 01       	movw	r24, r28
    2666:	c3 96       	adiw	r24, 0x33	; 51
    2668:	61 ef       	ldi	r22, 0xF1	; 241
    266a:	76 e4       	ldi	r23, 0x46	; 70
    266c:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <strcpy>
    2670:	ce 01       	movw	r24, r28
    2672:	c3 96       	adiw	r24, 0x33	; 51
    2674:	29 2f       	mov	r18, r25
    2676:	2f 93       	push	r18
    2678:	8f 93       	push	r24
    267a:	84 e3       	ldi	r24, 0x34	; 52
    267c:	92 e4       	ldi	r25, 0x42	; 66
    267e:	89 2f       	mov	r24, r25
    2680:	8f 93       	push	r24
    2682:	84 e3       	ldi	r24, 0x34	; 52
    2684:	92 e4       	ldi	r25, 0x42	; 66
    2686:	8f 93       	push	r24
    2688:	81 ef       	ldi	r24, 0xF1	; 241
    268a:	96 e4       	ldi	r25, 0x46	; 70
    268c:	89 2f       	mov	r24, r25
    268e:	8f 93       	push	r24
    2690:	81 ef       	ldi	r24, 0xF1	; 241
    2692:	96 e4       	ldi	r25, 0x46	; 70
    2694:	8f 93       	push	r24
    2696:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	1d c0       	rjmp	.+58     	; 0x26e2 <_Z19handleSerialBusMsgsv+0x304>
    26a8:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	29 2f       	mov	r18, r25
    26b2:	2f 93       	push	r18
    26b4:	8f 93       	push	r24
    26b6:	8c e3       	ldi	r24, 0x3C	; 60
    26b8:	92 e4       	ldi	r25, 0x42	; 66
    26ba:	89 2f       	mov	r24, r25
    26bc:	8f 93       	push	r24
    26be:	8c e3       	ldi	r24, 0x3C	; 60
    26c0:	92 e4       	ldi	r25, 0x42	; 66
    26c2:	8f 93       	push	r24
    26c4:	81 ef       	ldi	r24, 0xF1	; 241
    26c6:	96 e4       	ldi	r25, 0x46	; 70
    26c8:	89 2f       	mov	r24, r25
    26ca:	8f 93       	push	r24
    26cc:	81 ef       	ldi	r24, 0xF1	; 241
    26ce:	96 e4       	ldi	r25, 0x46	; 70
    26d0:	8f 93       	push	r24
    26d2:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	81 ef       	ldi	r24, 0xF1	; 241
    26e4:	96 e4       	ldi	r25, 0x46	; 70
    26e6:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    26ea:	53 c5       	rjmp	.+2726   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    26ec:	8e 81       	ldd	r24, Y+6	; 0x06
    26ee:	9f 81       	ldd	r25, Y+7	; 0x07
    26f0:	fc 01       	movw	r30, r24
    26f2:	83 81       	ldd	r24, Z+3	; 0x03
    26f4:	88 23       	and	r24, r24
    26f6:	e9 f1       	breq	.+122    	; 0x2772 <_Z19handleSerialBusMsgsv+0x394>
    26f8:	8e 81       	ldd	r24, Y+6	; 0x06
    26fa:	9f 81       	ldd	r25, Y+7	; 0x07
    26fc:	03 96       	adiw	r24, 0x03	; 3
    26fe:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <atoi>
    2702:	80 93 99 47 	sts	0x4799, r24	; 0x804799 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    2706:	90 93 9a 47 	sts	0x479A, r25	; 0x80479a <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    270a:	80 91 99 47 	lds	r24, 0x4799	; 0x804799 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    270e:	90 91 9a 47 	lds	r25, 0x479A	; 0x80479a <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    2712:	89 38       	cpi	r24, 0x89	; 137
    2714:	93 41       	sbci	r25, 0x13	; 19
    2716:	68 f4       	brcc	.+26     	; 0x2732 <_Z19handleSerialBusMsgsv+0x354>
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	89 e9       	ldi	r24, 0x99	; 153
    271e:	97 e4       	ldi	r25, 0x47	; 71
    2720:	0e 94 14 45 	call	0x8a28	; 0x8a28 <_Z15txSetParametersPjPb>
    2724:	88 8b       	std	Y+16, r24	; 0x10
    2726:	88 89       	ldd	r24, Y+16	; 0x10
    2728:	88 23       	and	r24, r24
    272a:	19 f0       	breq	.+6      	; 0x2732 <_Z19handleSerialBusMsgsv+0x354>
    272c:	88 89       	ldd	r24, Y+16	; 0x10
    272e:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    2732:	0e 94 0f 45 	call	0x8a1e	; 0x8a1e <_Z12txGetPowerMwv>
    2736:	29 2f       	mov	r18, r25
    2738:	2f 93       	push	r18
    273a:	8f 93       	push	r24
    273c:	84 e4       	ldi	r24, 0x44	; 68
    273e:	92 e4       	ldi	r25, 0x42	; 66
    2740:	89 2f       	mov	r24, r25
    2742:	8f 93       	push	r24
    2744:	84 e4       	ldi	r24, 0x44	; 68
    2746:	92 e4       	ldi	r25, 0x42	; 66
    2748:	8f 93       	push	r24
    274a:	81 ef       	ldi	r24, 0xF1	; 241
    274c:	96 e4       	ldi	r25, 0x46	; 70
    274e:	89 2f       	mov	r24, r25
    2750:	8f 93       	push	r24
    2752:	81 ef       	ldi	r24, 0xF1	; 241
    2754:	96 e4       	ldi	r25, 0x46	; 70
    2756:	8f 93       	push	r24
    2758:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	81 ef       	ldi	r24, 0xF1	; 241
    276a:	96 e4       	ldi	r25, 0x46	; 70
    276c:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2770:	10 c5       	rjmp	.+2592   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2772:	0e 94 0f 45 	call	0x8a1e	; 0x8a1e <_Z12txGetPowerMwv>
    2776:	29 2f       	mov	r18, r25
    2778:	2f 93       	push	r18
    277a:	8f 93       	push	r24
    277c:	84 e4       	ldi	r24, 0x44	; 68
    277e:	92 e4       	ldi	r25, 0x42	; 66
    2780:	89 2f       	mov	r24, r25
    2782:	8f 93       	push	r24
    2784:	84 e4       	ldi	r24, 0x44	; 68
    2786:	92 e4       	ldi	r25, 0x42	; 66
    2788:	8f 93       	push	r24
    278a:	81 ef       	ldi	r24, 0xF1	; 241
    278c:	96 e4       	ldi	r25, 0x46	; 70
    278e:	89 2f       	mov	r24, r25
    2790:	8f 93       	push	r24
    2792:	81 ef       	ldi	r24, 0xF1	; 241
    2794:	96 e4       	ldi	r25, 0x46	; 70
    2796:	8f 93       	push	r24
    2798:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	81 ef       	ldi	r24, 0xF1	; 241
    27aa:	96 e4       	ldi	r25, 0x46	; 70
    27ac:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    27b0:	f0 c4       	rjmp	.+2528   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    27b2:	19 8a       	std	Y+17, r1	; 0x11
    27b4:	1a 8a       	std	Y+18, r1	; 0x12
    27b6:	1b 8a       	std	Y+19, r1	; 0x13
    27b8:	1c 8a       	std	Y+20, r1	; 0x14
    27ba:	8e 81       	ldd	r24, Y+6	; 0x06
    27bc:	9f 81       	ldd	r25, Y+7	; 0x07
    27be:	fc 01       	movw	r30, r24
    27c0:	83 81       	ldd	r24, Z+3	; 0x03
    27c2:	88 23       	and	r24, r24
    27c4:	49 f1       	breq	.+82     	; 0x2818 <_Z19handleSerialBusMsgsv+0x43a>
    27c6:	8e 81       	ldd	r24, Y+6	; 0x06
    27c8:	9f 81       	ldd	r25, Y+7	; 0x07
    27ca:	03 96       	adiw	r24, 0x03	; 3
    27cc:	9e 01       	movw	r18, r28
    27ce:	24 5b       	subi	r18, 0xB4	; 180
    27d0:	3f 4f       	sbci	r19, 0xFF	; 255
    27d2:	b9 01       	movw	r22, r18
    27d4:	0e 94 92 47 	call	0x8f24	; 0x8f24 <_Z12frequencyValPcPm>
    27d8:	ce 01       	movw	r24, r28
    27da:	84 5b       	subi	r24, 0xB4	; 180
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	0e 94 b3 44 	call	0x8966	; 0x8966 <_Z14txSetFrequencyPmb>
    27e4:	98 2f       	mov	r25, r24
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	89 27       	eor	r24, r25
    27ea:	88 23       	and	r24, r24
    27ec:	89 f0       	breq	.+34     	; 0x2810 <_Z19handleSerialBusMsgsv+0x432>
    27ee:	ce 01       	movw	r24, r28
    27f0:	84 5b       	subi	r24, 0xB4	; 180
    27f2:	9f 4f       	sbci	r25, 0xFF	; 255
    27f4:	fc 01       	movw	r30, r24
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	a2 81       	ldd	r26, Z+2	; 0x02
    27fc:	b3 81       	ldd	r27, Z+3	; 0x03
    27fe:	89 8b       	std	Y+17, r24	; 0x11
    2800:	9a 8b       	std	Y+18, r25	; 0x12
    2802:	ab 8b       	std	Y+19, r26	; 0x13
    2804:	bc 8b       	std	Y+20, r27	; 0x14
    2806:	8c e7       	ldi	r24, 0x7C	; 124
    2808:	97 e4       	ldi	r25, 0x47	; 71
    280a:	0e 94 43 31 	call	0x6286	; 0x6286 <_ZN13EepromManager13saveAllEEPROMEv>
    280e:	04 c0       	rjmp	.+8      	; 0x2818 <_Z19handleSerialBusMsgsv+0x43a>
    2810:	8c eb       	ldi	r24, 0xBC	; 188
    2812:	91 e4       	ldi	r25, 0x41	; 65
    2814:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2818:	0e 94 e5 44 	call	0x89ca	; 0x89ca <_Z14txGetFrequencyv>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	89 8b       	std	Y+17, r24	; 0x11
    2822:	9a 8b       	std	Y+18, r25	; 0x12
    2824:	ab 8b       	std	Y+19, r26	; 0x13
    2826:	bc 8b       	std	Y+20, r27	; 0x14
    2828:	89 89       	ldd	r24, Y+17	; 0x11
    282a:	9a 89       	ldd	r25, Y+18	; 0x12
    282c:	ab 89       	ldd	r26, Y+19	; 0x13
    282e:	bc 89       	ldd	r27, Y+20	; 0x14
    2830:	89 2b       	or	r24, r25
    2832:	8a 2b       	or	r24, r26
    2834:	8b 2b       	or	r24, r27
    2836:	09 f4       	brne	.+2      	; 0x283a <_Z19handleSerialBusMsgsv+0x45c>
    2838:	a7 c4       	rjmp	.+2382   	; 0x3188 <_Z19handleSerialBusMsgsv+0xdaa>
    283a:	89 89       	ldd	r24, Y+17	; 0x11
    283c:	9a 89       	ldd	r25, Y+18	; 0x12
    283e:	ab 89       	ldd	r26, Y+19	; 0x13
    2840:	bc 89       	ldd	r27, Y+20	; 0x14
    2842:	9e 01       	movw	r18, r28
    2844:	20 5b       	subi	r18, 0xB0	; 176
    2846:	3f 4f       	sbci	r19, 0xFF	; 255
    2848:	ac 01       	movw	r20, r24
    284a:	bd 01       	movw	r22, r26
    284c:	c9 01       	movw	r24, r18
    284e:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <_Z15frequencyStringPcm>
    2852:	98 2f       	mov	r25, r24
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	89 27       	eor	r24, r25
    2858:	88 23       	and	r24, r24
    285a:	e9 f0       	breq	.+58     	; 0x2896 <_Z19handleSerialBusMsgsv+0x4b8>
    285c:	ce 01       	movw	r24, r28
    285e:	80 5b       	subi	r24, 0xB0	; 176
    2860:	9f 4f       	sbci	r25, 0xFF	; 255
    2862:	29 2f       	mov	r18, r25
    2864:	2f 93       	push	r18
    2866:	8f 93       	push	r24
    2868:	8f e4       	ldi	r24, 0x4F	; 79
    286a:	92 e4       	ldi	r25, 0x42	; 66
    286c:	89 2f       	mov	r24, r25
    286e:	8f 93       	push	r24
    2870:	8f e4       	ldi	r24, 0x4F	; 79
    2872:	92 e4       	ldi	r25, 0x42	; 66
    2874:	8f 93       	push	r24
    2876:	81 ef       	ldi	r24, 0xF1	; 241
    2878:	96 e4       	ldi	r25, 0x46	; 70
    287a:	89 2f       	mov	r24, r25
    287c:	8f 93       	push	r24
    287e:	81 ef       	ldi	r24, 0xF1	; 241
    2880:	96 e4       	ldi	r25, 0x46	; 70
    2882:	8f 93       	push	r24
    2884:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	1d c0       	rjmp	.+58     	; 0x28d0 <_Z19handleSerialBusMsgsv+0x4f2>
    2896:	8c 89       	ldd	r24, Y+20	; 0x14
    2898:	8f 93       	push	r24
    289a:	8b 89       	ldd	r24, Y+19	; 0x13
    289c:	8f 93       	push	r24
    289e:	8a 89       	ldd	r24, Y+18	; 0x12
    28a0:	8f 93       	push	r24
    28a2:	89 89       	ldd	r24, Y+17	; 0x11
    28a4:	8f 93       	push	r24
    28a6:	87 e5       	ldi	r24, 0x57	; 87
    28a8:	92 e4       	ldi	r25, 0x42	; 66
    28aa:	89 2f       	mov	r24, r25
    28ac:	8f 93       	push	r24
    28ae:	87 e5       	ldi	r24, 0x57	; 87
    28b0:	92 e4       	ldi	r25, 0x42	; 66
    28b2:	8f 93       	push	r24
    28b4:	81 ef       	ldi	r24, 0xF1	; 241
    28b6:	96 e4       	ldi	r25, 0x46	; 70
    28b8:	89 2f       	mov	r24, r25
    28ba:	8f 93       	push	r24
    28bc:	81 ef       	ldi	r24, 0xF1	; 241
    28be:	96 e4       	ldi	r25, 0x46	; 70
    28c0:	8f 93       	push	r24
    28c2:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    28c6:	8d b7       	in	r24, 0x3d	; 61
    28c8:	9e b7       	in	r25, 0x3e	; 62
    28ca:	08 96       	adiw	r24, 0x08	; 8
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	81 ef       	ldi	r24, 0xF1	; 241
    28d2:	96 e4       	ldi	r25, 0x46	; 70
    28d4:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    28d8:	57 c4       	rjmp	.+2222   	; 0x3188 <_Z19handleSerialBusMsgsv+0xdaa>
    28da:	8e 81       	ldd	r24, Y+6	; 0x06
    28dc:	9f 81       	ldd	r25, Y+7	; 0x07
    28de:	fc 01       	movw	r30, r24
    28e0:	83 81       	ldd	r24, Z+3	; 0x03
    28e2:	88 23       	and	r24, r24
    28e4:	89 f1       	breq	.+98     	; 0x2948 <_Z19handleSerialBusMsgsv+0x56a>
    28e6:	8e 81       	ldd	r24, Y+6	; 0x06
    28e8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ea:	fc 01       	movw	r30, r24
    28ec:	83 81       	ldd	r24, Z+3	; 0x03
    28ee:	80 33       	cpi	r24, 0x30	; 48
    28f0:	21 f4       	brne	.+8      	; 0x28fa <_Z19handleSerialBusMsgsv+0x51c>
    28f2:	82 e0       	ldi	r24, 0x02	; 2
    28f4:	0e 94 ce 22 	call	0x459c	; 0x459c <_Z12stopEventNow19EventActionSource_t>
    28f8:	4c c4       	rjmp	.+2200   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    28fa:	8e 81       	ldd	r24, Y+6	; 0x06
    28fc:	9f 81       	ldd	r25, Y+7	; 0x07
    28fe:	fc 01       	movw	r30, r24
    2900:	83 81       	ldd	r24, Z+3	; 0x03
    2902:	81 33       	cpi	r24, 0x31	; 49
    2904:	21 f4       	brne	.+8      	; 0x290e <_Z19handleSerialBusMsgsv+0x530>
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	0e 94 7d 22 	call	0x44fa	; 0x44fa <_Z13startEventNow19EventActionSource_t>
    290c:	42 c4       	rjmp	.+2180   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    290e:	8e 81       	ldd	r24, Y+6	; 0x06
    2910:	9f 81       	ldd	r25, Y+7	; 0x07
    2912:	fc 01       	movw	r30, r24
    2914:	83 81       	ldd	r24, Z+3	; 0x03
    2916:	82 33       	cpi	r24, 0x32	; 50
    2918:	31 f4       	brne	.+12     	; 0x2926 <_Z19handleSerialBusMsgsv+0x548>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    2920:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_Z18startEventUsingRTCv>
    2924:	36 c4       	rjmp	.+2156   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2926:	8e 81       	ldd	r24, Y+6	; 0x06
    2928:	9f 81       	ldd	r25, Y+7	; 0x07
    292a:	fc 01       	movw	r30, r24
    292c:	83 81       	ldd	r24, Z+3	; 0x03
    292e:	83 33       	cpi	r24, 0x33	; 51
    2930:	31 f4       	brne	.+12     	; 0x293e <_Z19handleSerialBusMsgsv+0x560>
    2932:	62 e0       	ldi	r22, 0x02	; 2
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    293c:	2a c4       	rjmp	.+2132   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    293e:	80 e6       	ldi	r24, 0x60	; 96
    2940:	92 e4       	ldi	r25, 0x42	; 66
    2942:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2946:	25 c4       	rjmp	.+2122   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2948:	80 e6       	ldi	r24, 0x60	; 96
    294a:	92 e4       	ldi	r25, 0x42	; 66
    294c:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2950:	20 c4       	rjmp	.+2112   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2952:	8e 81       	ldd	r24, Y+6	; 0x06
    2954:	9f 81       	ldd	r25, Y+7	; 0x07
    2956:	fc 01       	movw	r30, r24
    2958:	83 81       	ldd	r24, Z+3	; 0x03
    295a:	88 23       	and	r24, r24
    295c:	09 f4       	brne	.+2      	; 0x2960 <_Z19handleSerialBusMsgsv+0x582>
    295e:	41 c0       	rjmp	.+130    	; 0x29e2 <_Z19handleSerialBusMsgsv+0x604>
    2960:	80 e2       	ldi	r24, 0x20	; 32
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	80 93 f1 46 	sts	0x46F1, r24	; 0x8046f1 <_ZL9g_tempStr>
    2968:	90 93 f2 46 	sts	0x46F2, r25	; 0x8046f2 <_ZL9g_tempStr+0x1>
    296c:	8e 81       	ldd	r24, Y+6	; 0x06
    296e:	9f 81       	ldd	r25, Y+7	; 0x07
    2970:	03 96       	adiw	r24, 0x03	; 3
    2972:	bc 01       	movw	r22, r24
    2974:	81 ef       	ldi	r24, 0xF1	; 241
    2976:	96 e4       	ldi	r25, 0x46	; 70
    2978:	0e 94 39 4e 	call	0x9c72	; 0x9c72 <strcat>
    297c:	8e 81       	ldd	r24, Y+6	; 0x06
    297e:	9f 81       	ldd	r25, Y+7	; 0x07
    2980:	fc 01       	movw	r30, r24
    2982:	87 89       	ldd	r24, Z+23	; 0x17
    2984:	88 23       	and	r24, r24
    2986:	d1 f0       	breq	.+52     	; 0x29bc <_Z19handleSerialBusMsgsv+0x5de>
    2988:	81 ef       	ldi	r24, 0xF1	; 241
    298a:	96 e4       	ldi	r25, 0x46	; 70
    298c:	9c 01       	movw	r18, r24
    298e:	f9 01       	movw	r30, r18
    2990:	01 90       	ld	r0, Z+
    2992:	00 20       	and	r0, r0
    2994:	e9 f7       	brne	.-6      	; 0x2990 <_Z19handleSerialBusMsgsv+0x5b2>
    2996:	cf 01       	movw	r24, r30
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	82 1b       	sub	r24, r18
    299c:	93 0b       	sbc	r25, r19
    299e:	8f 50       	subi	r24, 0x0F	; 15
    29a0:	99 4b       	sbci	r25, 0xB9	; 185
    29a2:	20 e2       	ldi	r18, 0x20	; 32
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	fc 01       	movw	r30, r24
    29a8:	20 83       	st	Z, r18
    29aa:	31 83       	std	Z+1, r19	; 0x01
    29ac:	8e 81       	ldd	r24, Y+6	; 0x06
    29ae:	9f 81       	ldd	r25, Y+7	; 0x07
    29b0:	47 96       	adiw	r24, 0x17	; 23
    29b2:	bc 01       	movw	r22, r24
    29b4:	81 ef       	ldi	r24, 0xF1	; 241
    29b6:	96 e4       	ldi	r25, 0x46	; 70
    29b8:	0e 94 39 4e 	call	0x9c72	; 0x9c72 <strcat>
    29bc:	81 ef       	ldi	r24, 0xF1	; 241
    29be:	96 e4       	ldi	r25, 0x46	; 70
    29c0:	0e 94 56 4e 	call	0x9cac	; 0x9cac <strlen>
    29c4:	45 97       	sbiw	r24, 0x15	; 21
    29c6:	68 f4       	brcc	.+26     	; 0x29e2 <_Z19handleSerialBusMsgsv+0x604>
    29c8:	61 ef       	ldi	r22, 0xF1	; 241
    29ca:	76 e4       	ldi	r23, 0x46	; 70
    29cc:	87 e4       	ldi	r24, 0x47	; 71
    29ce:	97 e4       	ldi	r25, 0x47	; 71
    29d0:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <strcpy>
    29d4:	41 ef       	ldi	r20, 0xF1	; 241
    29d6:	56 e4       	ldi	r21, 0x46	; 70
    29d8:	6a e0       	ldi	r22, 0x0A	; 10
    29da:	8c e7       	ldi	r24, 0x7C	; 124
    29dc:	97 e4       	ldi	r25, 0x47	; 71
    29de:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    29e2:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    29e6:	88 23       	and	r24, r24
    29e8:	01 f1       	breq	.+64     	; 0x2a2a <_Z19handleSerialBusMsgsv+0x64c>
    29ea:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    29ee:	88 2f       	mov	r24, r24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	bc 01       	movw	r22, r24
    29f4:	87 e4       	ldi	r24, 0x47	; 71
    29f6:	97 e4       	ldi	r25, 0x47	; 71
    29f8:	0e 94 76 3a 	call	0x74ec	; 0x74ec <_Z26timeRequiredToSendStrAtWPMPcj>
    29fc:	88 5a       	subi	r24, 0xA8	; 168
    29fe:	9d 4f       	sbci	r25, 0xFD	; 253
    2a00:	96 95       	lsr	r25
    2a02:	87 95       	ror	r24
    2a04:	96 95       	lsr	r25
    2a06:	87 95       	ror	r24
    2a08:	96 95       	lsr	r25
    2a0a:	87 95       	ror	r24
    2a0c:	9c 01       	movw	r18, r24
    2a0e:	a5 ec       	ldi	r26, 0xC5	; 197
    2a10:	b0 e2       	ldi	r27, 0x20	; 32
    2a12:	0e 94 9e 4c 	call	0x993c	; 0x993c <__umulhisi3>
    2a16:	92 95       	swap	r25
    2a18:	82 95       	swap	r24
    2a1a:	8f 70       	andi	r24, 0x0F	; 15
    2a1c:	89 27       	eor	r24, r25
    2a1e:	9f 70       	andi	r25, 0x0F	; 15
    2a20:	89 27       	eor	r24, r25
    2a22:	80 93 5c 47 	sts	0x475C, r24	; 0x80475c <g_time_needed_for_ID>
    2a26:	90 93 5d 47 	sts	0x475D, r25	; 0x80475d <g_time_needed_for_ID+0x1>
    2a2a:	87 e4       	ldi	r24, 0x47	; 71
    2a2c:	97 e4       	ldi	r25, 0x47	; 71
    2a2e:	89 2f       	mov	r24, r25
    2a30:	8f 93       	push	r24
    2a32:	87 e4       	ldi	r24, 0x47	; 71
    2a34:	97 e4       	ldi	r25, 0x47	; 71
    2a36:	8f 93       	push	r24
    2a38:	85 e6       	ldi	r24, 0x65	; 101
    2a3a:	92 e4       	ldi	r25, 0x42	; 66
    2a3c:	89 2f       	mov	r24, r25
    2a3e:	8f 93       	push	r24
    2a40:	85 e6       	ldi	r24, 0x65	; 101
    2a42:	92 e4       	ldi	r25, 0x42	; 66
    2a44:	8f 93       	push	r24
    2a46:	81 ef       	ldi	r24, 0xF1	; 241
    2a48:	96 e4       	ldi	r25, 0x46	; 70
    2a4a:	89 2f       	mov	r24, r25
    2a4c:	8f 93       	push	r24
    2a4e:	81 ef       	ldi	r24, 0xF1	; 241
    2a50:	96 e4       	ldi	r25, 0x46	; 70
    2a52:	8f 93       	push	r24
    2a54:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	81 ef       	ldi	r24, 0xF1	; 241
    2a66:	96 e4       	ldi	r25, 0x46	; 70
    2a68:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2a6c:	92 c3       	rjmp	.+1828   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a70:	9f 81       	ldd	r25, Y+7	; 0x07
    2a72:	fc 01       	movw	r30, r24
    2a74:	83 81       	ldd	r24, Z+3	; 0x03
    2a76:	83 35       	cpi	r24, 0x53	; 83
    2a78:	09 f0       	breq	.+2      	; 0x2a7c <_Z19handleSerialBusMsgsv+0x69e>
    2a7a:	6f c0       	rjmp	.+222    	; 0x2b5a <_Z19handleSerialBusMsgsv+0x77c>
    2a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a80:	fc 01       	movw	r30, r24
    2a82:	87 89       	ldd	r24, Z+23	; 0x17
    2a84:	8d 8b       	std	Y+21, r24	; 0x15
    2a86:	8d 89       	ldd	r24, Y+21	; 0x15
    2a88:	88 23       	and	r24, r24
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <_Z19handleSerialBusMsgsv+0x6b0>
    2a8c:	48 c0       	rjmp	.+144    	; 0x2b1e <_Z19handleSerialBusMsgsv+0x740>
    2a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a90:	9f 81       	ldd	r25, Y+7	; 0x07
    2a92:	47 96       	adiw	r24, 0x17	; 23
    2a94:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	8e 8b       	std	Y+22, r24	; 0x16
    2a9e:	8e 89       	ldd	r24, Y+22	; 0x16
    2aa0:	8f 8b       	std	Y+23, r24	; 0x17
    2aa2:	85 e0       	ldi	r24, 0x05	; 5
    2aa4:	88 8f       	std	Y+24, r24	; 0x18
    2aa6:	84 e1       	ldi	r24, 0x14	; 20
    2aa8:	89 8f       	std	Y+25, r24	; 0x19
    2aaa:	9f 89       	ldd	r25, Y+23	; 0x17
    2aac:	89 8d       	ldd	r24, Y+25	; 0x19
    2aae:	89 17       	cp	r24, r25
    2ab0:	40 f0       	brcs	.+16     	; 0x2ac2 <_Z19handleSerialBusMsgsv+0x6e4>
    2ab2:	9f 89       	ldd	r25, Y+23	; 0x17
    2ab4:	88 8d       	ldd	r24, Y+24	; 0x18
    2ab6:	98 17       	cp	r25, r24
    2ab8:	10 f4       	brcc	.+4      	; 0x2abe <_Z19handleSerialBusMsgsv+0x6e0>
    2aba:	88 8d       	ldd	r24, Y+24	; 0x18
    2abc:	03 c0       	rjmp	.+6      	; 0x2ac4 <_Z19handleSerialBusMsgsv+0x6e6>
    2abe:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac0:	01 c0       	rjmp	.+2      	; 0x2ac4 <_Z19handleSerialBusMsgsv+0x6e6>
    2ac2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ac4:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    2ac8:	4b e0       	ldi	r20, 0x0B	; 11
    2aca:	50 e4       	ldi	r21, 0x40	; 64
    2acc:	68 e2       	ldi	r22, 0x28	; 40
    2ace:	8c e7       	ldi	r24, 0x7C	; 124
    2ad0:	97 e4       	ldi	r25, 0x47	; 71
    2ad2:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2ad6:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    2ada:	88 23       	and	r24, r24
    2adc:	01 f1       	breq	.+64     	; 0x2b1e <_Z19handleSerialBusMsgsv+0x740>
    2ade:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2ae2:	88 2f       	mov	r24, r24
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	87 e4       	ldi	r24, 0x47	; 71
    2aea:	97 e4       	ldi	r25, 0x47	; 71
    2aec:	0e 94 76 3a 	call	0x74ec	; 0x74ec <_Z26timeRequiredToSendStrAtWPMPcj>
    2af0:	88 5a       	subi	r24, 0xA8	; 168
    2af2:	9d 4f       	sbci	r25, 0xFD	; 253
    2af4:	96 95       	lsr	r25
    2af6:	87 95       	ror	r24
    2af8:	96 95       	lsr	r25
    2afa:	87 95       	ror	r24
    2afc:	96 95       	lsr	r25
    2afe:	87 95       	ror	r24
    2b00:	9c 01       	movw	r18, r24
    2b02:	a5 ec       	ldi	r26, 0xC5	; 197
    2b04:	b0 e2       	ldi	r27, 0x20	; 32
    2b06:	0e 94 9e 4c 	call	0x993c	; 0x993c <__umulhisi3>
    2b0a:	92 95       	swap	r25
    2b0c:	82 95       	swap	r24
    2b0e:	8f 70       	andi	r24, 0x0F	; 15
    2b10:	89 27       	eor	r24, r25
    2b12:	9f 70       	andi	r25, 0x0F	; 15
    2b14:	89 27       	eor	r24, r25
    2b16:	80 93 5c 47 	sts	0x475C, r24	; 0x80475c <g_time_needed_for_ID>
    2b1a:	90 93 5d 47 	sts	0x475D, r25	; 0x80475d <g_time_needed_for_ID+0x1>
    2b1e:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	29 2f       	mov	r18, r25
    2b28:	2f 93       	push	r18
    2b2a:	8f 93       	push	r24
    2b2c:	8c e6       	ldi	r24, 0x6C	; 108
    2b2e:	92 e4       	ldi	r25, 0x42	; 66
    2b30:	89 2f       	mov	r24, r25
    2b32:	8f 93       	push	r24
    2b34:	8c e6       	ldi	r24, 0x6C	; 108
    2b36:	92 e4       	ldi	r25, 0x42	; 66
    2b38:	8f 93       	push	r24
    2b3a:	81 ef       	ldi	r24, 0xF1	; 241
    2b3c:	96 e4       	ldi	r25, 0x46	; 70
    2b3e:	89 2f       	mov	r24, r25
    2b40:	8f 93       	push	r24
    2b42:	81 ef       	ldi	r24, 0xF1	; 241
    2b44:	96 e4       	ldi	r25, 0x46	; 70
    2b46:	8f 93       	push	r24
    2b48:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	09 c0       	rjmp	.+18     	; 0x2b6c <_Z19handleSerialBusMsgsv+0x78e>
    2b5a:	85 e0       	ldi	r24, 0x05	; 5
    2b5c:	e0 e6       	ldi	r30, 0x60	; 96
    2b5e:	f2 e4       	ldi	r31, 0x42	; 66
    2b60:	a1 ef       	ldi	r26, 0xF1	; 241
    2b62:	b6 e4       	ldi	r27, 0x46	; 70
    2b64:	01 90       	ld	r0, Z+
    2b66:	0d 92       	st	X+, r0
    2b68:	8a 95       	dec	r24
    2b6a:	e1 f7       	brne	.-8      	; 0x2b64 <_Z19handleSerialBusMsgsv+0x786>
    2b6c:	81 ef       	ldi	r24, 0xF1	; 241
    2b6e:	96 e4       	ldi	r25, 0x46	; 70
    2b70:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2b74:	0e c3       	rjmp	.+1564   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2b76:	8e 81       	ldd	r24, Y+6	; 0x06
    2b78:	9f 81       	ldd	r25, Y+7	; 0x07
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	83 81       	ldd	r24, Z+3	; 0x03
    2b7e:	88 23       	and	r24, r24
    2b80:	51 f1       	breq	.+84     	; 0x2bd6 <_Z19handleSerialBusMsgsv+0x7f8>
    2b82:	8e 81       	ldd	r24, Y+6	; 0x06
    2b84:	9f 81       	ldd	r25, Y+7	; 0x07
    2b86:	03 96       	adiw	r24, 0x03	; 3
    2b88:	48 e0       	ldi	r20, 0x08	; 8
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	81 ef       	ldi	r24, 0xF1	; 241
    2b90:	96 e4       	ldi	r25, 0x46	; 70
    2b92:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <strncpy>
    2b96:	10 92 f9 46 	sts	0x46F9, r1	; 0x8046f9 <_ZL9g_tempStr+0x8>
    2b9a:	81 ef       	ldi	r24, 0xF1	; 241
    2b9c:	96 e4       	ldi	r25, 0x46	; 70
    2b9e:	0e 94 3b 47 	call	0x8e76	; 0x8e76 <_Z11only_digitsPc>
    2ba2:	88 23       	and	r24, r24
    2ba4:	41 f0       	breq	.+16     	; 0x2bb6 <_Z19handleSerialBusMsgsv+0x7d8>
    2ba6:	81 ef       	ldi	r24, 0xF1	; 241
    2ba8:	96 e4       	ldi	r25, 0x46	; 70
    2baa:	0e 94 56 4e 	call	0x9cac	; 0x9cac <strlen>
    2bae:	04 97       	sbiw	r24, 0x04	; 4
    2bb0:	10 f0       	brcs	.+4      	; 0x2bb6 <_Z19handleSerialBusMsgsv+0x7d8>
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	01 c0       	rjmp	.+2      	; 0x2bb8 <_Z19handleSerialBusMsgsv+0x7da>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	88 23       	and	r24, r24
    2bba:	69 f0       	breq	.+26     	; 0x2bd6 <_Z19handleSerialBusMsgsv+0x7f8>
    2bbc:	61 ef       	ldi	r22, 0xF1	; 241
    2bbe:	76 e4       	ldi	r23, 0x46	; 70
    2bc0:	86 e8       	ldi	r24, 0x86	; 134
    2bc2:	97 e4       	ldi	r25, 0x47	; 71
    2bc4:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <strcpy>
    2bc8:	46 e8       	ldi	r20, 0x86	; 134
    2bca:	57 e4       	ldi	r21, 0x47	; 71
    2bcc:	6f e1       	ldi	r22, 0x1F	; 31
    2bce:	8c e7       	ldi	r24, 0x7C	; 124
    2bd0:	97 e4       	ldi	r25, 0x47	; 71
    2bd2:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2bd6:	86 e8       	ldi	r24, 0x86	; 134
    2bd8:	97 e4       	ldi	r25, 0x47	; 71
    2bda:	89 2f       	mov	r24, r25
    2bdc:	8f 93       	push	r24
    2bde:	86 e8       	ldi	r24, 0x86	; 134
    2be0:	97 e4       	ldi	r25, 0x47	; 71
    2be2:	8f 93       	push	r24
    2be4:	8e e7       	ldi	r24, 0x7E	; 126
    2be6:	92 e4       	ldi	r25, 0x42	; 66
    2be8:	89 2f       	mov	r24, r25
    2bea:	8f 93       	push	r24
    2bec:	8e e7       	ldi	r24, 0x7E	; 126
    2bee:	92 e4       	ldi	r25, 0x42	; 66
    2bf0:	8f 93       	push	r24
    2bf2:	81 ef       	ldi	r24, 0xF1	; 241
    2bf4:	96 e4       	ldi	r25, 0x46	; 70
    2bf6:	89 2f       	mov	r24, r25
    2bf8:	8f 93       	push	r24
    2bfa:	81 ef       	ldi	r24, 0xF1	; 241
    2bfc:	96 e4       	ldi	r25, 0x46	; 70
    2bfe:	8f 93       	push	r24
    2c00:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	81 ef       	ldi	r24, 0xF1	; 241
    2c12:	96 e4       	ldi	r25, 0x46	; 70
    2c14:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    2c18:	bc c2       	rjmp	.+1400   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2c1a:	1d 82       	std	Y+5, r1	; 0x05
    2c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c20:	fc 01       	movw	r30, r24
    2c22:	83 81       	ldd	r24, Z+3	; 0x03
    2c24:	88 23       	and	r24, r24
    2c26:	39 f0       	breq	.+14     	; 0x2c36 <_Z19handleSerialBusMsgsv+0x858>
    2c28:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	83 81       	ldd	r24, Z+3	; 0x03
    2c30:	84 35       	cpi	r24, 0x54	; 84
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <_Z19handleSerialBusMsgsv+0x858>
    2c34:	ca c0       	rjmp	.+404    	; 0x2dca <_Z19handleSerialBusMsgsv+0x9ec>
    2c36:	8e 81       	ldd	r24, Y+6	; 0x06
    2c38:	9f 81       	ldd	r25, Y+7	; 0x07
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	87 89       	ldd	r24, Z+23	; 0x17
    2c3e:	88 23       	and	r24, r24
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <_Z19handleSerialBusMsgsv+0x866>
    2c42:	76 c0       	rjmp	.+236    	; 0x2d30 <_Z19handleSerialBusMsgsv+0x952>
    2c44:	8e 81       	ldd	r24, Y+6	; 0x06
    2c46:	9f 81       	ldd	r25, Y+7	; 0x07
    2c48:	47 96       	adiw	r24, 0x17	; 23
    2c4a:	4c e0       	ldi	r20, 0x0C	; 12
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	bc 01       	movw	r22, r24
    2c50:	81 ef       	ldi	r24, 0xF1	; 241
    2c52:	96 e4       	ldi	r25, 0x46	; 70
    2c54:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <strncpy>
    2c58:	10 92 fd 46 	sts	0x46FD, r1	; 0x8046fd <_ZL9g_tempStr+0xc>
    2c5c:	80 91 85 47 	lds	r24, 0x4785	; 0x804785 <g_utc_offset>
    2c60:	81 95       	neg	r24
    2c62:	48 2f       	mov	r20, r24
    2c64:	6e e8       	ldi	r22, 0x8E	; 142
    2c66:	77 e4       	ldi	r23, 0x47	; 71
    2c68:	81 ef       	ldi	r24, 0xF1	; 241
    2c6a:	96 e4       	ldi	r25, 0x46	; 70
    2c6c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_Z18validateTimeStringPcPma>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8b a7       	std	Y+43, r24	; 0x2b
    2c76:	9c a7       	std	Y+44, r25	; 0x2c
    2c78:	ad a7       	std	Y+45, r26	; 0x2d
    2c7a:	be a7       	std	Y+46, r27	; 0x2e
    2c7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c80:	ad a5       	ldd	r26, Y+45	; 0x2d
    2c82:	be a5       	ldd	r27, Y+46	; 0x2e
    2c84:	89 2b       	or	r24, r25
    2c86:	8a 2b       	or	r24, r26
    2c88:	8b 2b       	or	r24, r27
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <_Z19handleSerialBusMsgsv+0x8b0>
    2c8c:	9b c0       	rjmp	.+310    	; 0x2dc4 <_Z19handleSerialBusMsgsv+0x9e6>
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	81 ef       	ldi	r24, 0xF1	; 241
    2c92:	96 e4       	ldi	r25, 0x46	; 70
    2c94:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <ds3231_set_date_time_arducon>
    2c98:	8f a7       	std	Y+47, r24	; 0x2f
    2c9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9c:	88 23       	and	r24, r24
    2c9e:	51 f0       	breq	.+20     	; 0x2cb4 <_Z19handleSerialBusMsgsv+0x8d6>
    2ca0:	88 e2       	ldi	r24, 0x28	; 40
    2ca2:	e7 ee       	ldi	r30, 0xE7	; 231
    2ca4:	f1 e4       	ldi	r31, 0x41	; 65
    2ca6:	a1 ef       	ldi	r26, 0xF1	; 241
    2ca8:	b6 e4       	ldi	r27, 0x46	; 70
    2caa:	01 90       	ld	r0, Z+
    2cac:	0d 92       	st	X+, r0
    2cae:	8a 95       	dec	r24
    2cb0:	e1 f7       	brne	.-8      	; 0x2caa <_Z19handleSerialBusMsgsv+0x8cc>
    2cb2:	88 c0       	rjmp	.+272    	; 0x2dc4 <_Z19handleSerialBusMsgsv+0x9e6>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	80 93 8e 47 	sts	0x478E, r24	; 0x80478e <g_current_epoch>
    2cc4:	90 93 8f 47 	sts	0x478F, r25	; 0x80478f <g_current_epoch+0x1>
    2cc8:	a0 93 90 47 	sts	0x4790, r26	; 0x804790 <g_current_epoch+0x2>
    2ccc:	b0 93 91 47 	sts	0x4791, r27	; 0x804791 <g_current_epoch+0x3>
    2cd0:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    2cd4:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    2cd8:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    2cdc:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    2ce0:	ae 01       	movw	r20, r28
    2ce2:	4b 59       	subi	r20, 0x9B	; 155
    2ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce6:	22 e3       	ldi	r18, 0x32	; 50
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 47 30 	call	0x608e	; 0x608e <convertEpochToTimeString>
    2cf2:	29 2f       	mov	r18, r25
    2cf4:	2f 93       	push	r18
    2cf6:	8f 93       	push	r24
    2cf8:	86 e8       	ldi	r24, 0x86	; 134
    2cfa:	92 e4       	ldi	r25, 0x42	; 66
    2cfc:	89 2f       	mov	r24, r25
    2cfe:	8f 93       	push	r24
    2d00:	86 e8       	ldi	r24, 0x86	; 134
    2d02:	92 e4       	ldi	r25, 0x42	; 66
    2d04:	8f 93       	push	r24
    2d06:	81 ef       	ldi	r24, 0xF1	; 241
    2d08:	96 e4       	ldi	r25, 0x46	; 70
    2d0a:	89 2f       	mov	r24, r25
    2d0c:	8f 93       	push	r24
    2d0e:	81 ef       	ldi	r24, 0xF1	; 241
    2d10:	96 e4       	ldi	r25, 0x46	; 70
    2d12:	8f 93       	push	r24
    2d14:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d2e:	4a c0       	rjmp	.+148    	; 0x2dc4 <_Z19handleSerialBusMsgsv+0x9e6>
    2d30:	ce 01       	movw	r24, r28
    2d32:	8c 59       	subi	r24, 0x9C	; 156
    2d34:	9f 4f       	sbci	r25, 0xFF	; 255
    2d36:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	80 93 8e 47 	sts	0x478E, r24	; 0x80478e <g_current_epoch>
    2d42:	90 93 8f 47 	sts	0x478F, r25	; 0x80478f <g_current_epoch+0x1>
    2d46:	a0 93 90 47 	sts	0x4790, r26	; 0x804790 <g_current_epoch+0x2>
    2d4a:	b0 93 91 47 	sts	0x4791, r27	; 0x804791 <g_current_epoch+0x3>
    2d4e:	ce 01       	movw	r24, r28
    2d50:	8c 59       	subi	r24, 0x9C	; 156
    2d52:	9f 4f       	sbci	r25, 0xFF	; 255
    2d54:	fc 01       	movw	r30, r24
    2d56:	80 81       	ld	r24, Z
    2d58:	88 23       	and	r24, r24
    2d5a:	51 f0       	breq	.+20     	; 0x2d70 <_Z19handleSerialBusMsgsv+0x992>
    2d5c:	88 e2       	ldi	r24, 0x28	; 40
    2d5e:	e7 ee       	ldi	r30, 0xE7	; 231
    2d60:	f1 e4       	ldi	r31, 0x41	; 65
    2d62:	a1 ef       	ldi	r26, 0xF1	; 241
    2d64:	b6 e4       	ldi	r27, 0x46	; 70
    2d66:	01 90       	ld	r0, Z+
    2d68:	0d 92       	st	X+, r0
    2d6a:	8a 95       	dec	r24
    2d6c:	e1 f7       	brne	.-8      	; 0x2d66 <_Z19handleSerialBusMsgsv+0x988>
    2d6e:	2a c0       	rjmp	.+84     	; 0x2dc4 <_Z19handleSerialBusMsgsv+0x9e6>
    2d70:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    2d74:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    2d78:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    2d7c:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    2d80:	ae 01       	movw	r20, r28
    2d82:	4b 59       	subi	r20, 0x9B	; 155
    2d84:	5f 4f       	sbci	r21, 0xFF	; 255
    2d86:	22 e3       	ldi	r18, 0x32	; 50
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 47 30 	call	0x608e	; 0x608e <convertEpochToTimeString>
    2d92:	29 2f       	mov	r18, r25
    2d94:	2f 93       	push	r18
    2d96:	8f 93       	push	r24
    2d98:	86 e8       	ldi	r24, 0x86	; 134
    2d9a:	92 e4       	ldi	r25, 0x42	; 66
    2d9c:	89 2f       	mov	r24, r25
    2d9e:	8f 93       	push	r24
    2da0:	86 e8       	ldi	r24, 0x86	; 134
    2da2:	92 e4       	ldi	r25, 0x42	; 66
    2da4:	8f 93       	push	r24
    2da6:	81 ef       	ldi	r24, 0xF1	; 241
    2da8:	96 e4       	ldi	r25, 0x46	; 70
    2daa:	89 2f       	mov	r24, r25
    2dac:	8f 93       	push	r24
    2dae:	81 ef       	ldi	r24, 0xF1	; 241
    2db0:	96 e4       	ldi	r25, 0x46	; 70
    2db2:	8f 93       	push	r24
    2db4:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	8d 83       	std	Y+5, r24	; 0x05
    2dc8:	be c1       	rjmp	.+892    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    2dca:	8e 81       	ldd	r24, Y+6	; 0x06
    2dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dce:	fc 01       	movw	r30, r24
    2dd0:	83 81       	ldd	r24, Z+3	; 0x03
    2dd2:	83 35       	cpi	r24, 0x53	; 83
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <_Z19handleSerialBusMsgsv+0x9fa>
    2dd6:	be c0       	rjmp	.+380    	; 0x2f54 <_Z19handleSerialBusMsgsv+0xb76>
    2dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dda:	9f 81       	ldd	r25, Y+7	; 0x07
    2ddc:	47 96       	adiw	r24, 0x17	; 23
    2dde:	bc 01       	movw	r22, r24
    2de0:	81 ef       	ldi	r24, 0xF1	; 241
    2de2:	96 e4       	ldi	r25, 0x46	; 70
    2de4:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <strcpy>
    2de8:	80 91 85 47 	lds	r24, 0x4785	; 0x804785 <g_utc_offset>
    2dec:	81 95       	neg	r24
    2dee:	48 2f       	mov	r20, r24
    2df0:	6d e7       	ldi	r22, 0x7D	; 125
    2df2:	77 e4       	ldi	r23, 0x47	; 71
    2df4:	81 ef       	ldi	r24, 0xF1	; 241
    2df6:	96 e4       	ldi	r25, 0x46	; 70
    2df8:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_Z18validateTimeStringPcPma>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	8a 8f       	std	Y+26, r24	; 0x1a
    2e02:	9b 8f       	std	Y+27, r25	; 0x1b
    2e04:	ac 8f       	std	Y+28, r26	; 0x1c
    2e06:	bd 8f       	std	Y+29, r27	; 0x1d
    2e08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e0c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2e0e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2e10:	89 2b       	or	r24, r25
    2e12:	8a 2b       	or	r24, r26
    2e14:	8b 2b       	or	r24, r27
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <_Z19handleSerialBusMsgsv+0xa3c>
    2e18:	70 c0       	rjmp	.+224    	; 0x2efa <_Z19handleSerialBusMsgsv+0xb1c>
    2e1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e1e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2e20:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2e22:	80 93 7d 47 	sts	0x477D, r24	; 0x80477d <g_event_start_epoch>
    2e26:	90 93 7e 47 	sts	0x477E, r25	; 0x80477e <g_event_start_epoch+0x1>
    2e2a:	a0 93 7f 47 	sts	0x477F, r26	; 0x80477f <g_event_start_epoch+0x2>
    2e2e:	b0 93 80 47 	sts	0x4780, r27	; 0x804780 <g_event_start_epoch+0x3>
    2e32:	4d e7       	ldi	r20, 0x7D	; 125
    2e34:	57 e4       	ldi	r21, 0x47	; 71
    2e36:	62 e0       	ldi	r22, 0x02	; 2
    2e38:	8c e7       	ldi	r24, 0x7C	; 124
    2e3a:	97 e4       	ldi	r25, 0x47	; 71
    2e3c:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2e40:	80 91 81 47 	lds	r24, 0x4781	; 0x804781 <g_event_finish_epoch>
    2e44:	90 91 82 47 	lds	r25, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    2e48:	a0 91 83 47 	lds	r26, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    2e4c:	b0 91 84 47 	lds	r27, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    2e50:	8e 8f       	std	Y+30, r24	; 0x1e
    2e52:	9f 8f       	std	Y+31, r25	; 0x1f
    2e54:	a8 a3       	std	Y+32, r26	; 0x20
    2e56:	b9 a3       	std	Y+33, r27	; 0x21
    2e58:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    2e5c:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    2e60:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    2e64:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    2e68:	80 58       	subi	r24, 0x80	; 128
    2e6a:	9e 4a       	sbci	r25, 0xAE	; 174
    2e6c:	ae 4f       	sbci	r26, 0xFE	; 254
    2e6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e70:	8a a3       	std	Y+34, r24	; 0x22
    2e72:	9b a3       	std	Y+35, r25	; 0x23
    2e74:	ac a3       	std	Y+36, r26	; 0x24
    2e76:	bd a3       	std	Y+37, r27	; 0x25
    2e78:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2e7a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2e7c:	48 a1       	ldd	r20, Y+32	; 0x20
    2e7e:	59 a1       	ldd	r21, Y+33	; 0x21
    2e80:	8a a1       	ldd	r24, Y+34	; 0x22
    2e82:	9b a1       	ldd	r25, Y+35	; 0x23
    2e84:	ac a1       	ldd	r26, Y+36	; 0x24
    2e86:	bd a1       	ldd	r27, Y+37	; 0x25
    2e88:	28 17       	cp	r18, r24
    2e8a:	39 07       	cpc	r19, r25
    2e8c:	4a 07       	cpc	r20, r26
    2e8e:	5b 07       	cpc	r21, r27
    2e90:	28 f4       	brcc	.+10     	; 0x2e9c <_Z19handleSerialBusMsgsv+0xabe>
    2e92:	8a a1       	ldd	r24, Y+34	; 0x22
    2e94:	9b a1       	ldd	r25, Y+35	; 0x23
    2e96:	ac a1       	ldd	r26, Y+36	; 0x24
    2e98:	bd a1       	ldd	r27, Y+37	; 0x25
    2e9a:	04 c0       	rjmp	.+8      	; 0x2ea4 <_Z19handleSerialBusMsgsv+0xac6>
    2e9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ea0:	a8 a1       	ldd	r26, Y+32	; 0x20
    2ea2:	b9 a1       	ldd	r27, Y+33	; 0x21
    2ea4:	80 93 81 47 	sts	0x4781, r24	; 0x804781 <g_event_finish_epoch>
    2ea8:	90 93 82 47 	sts	0x4782, r25	; 0x804782 <g_event_finish_epoch+0x1>
    2eac:	a0 93 83 47 	sts	0x4783, r26	; 0x804783 <g_event_finish_epoch+0x2>
    2eb0:	b0 93 84 47 	sts	0x4784, r27	; 0x804784 <g_event_finish_epoch+0x3>
    2eb4:	41 e8       	ldi	r20, 0x81	; 129
    2eb6:	57 e4       	ldi	r21, 0x47	; 71
    2eb8:	66 e0       	ldi	r22, 0x06	; 6
    2eba:	8c e7       	ldi	r24, 0x7C	; 124
    2ebc:	97 e4       	ldi	r25, 0x47	; 71
    2ebe:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2ec2:	63 e0       	ldi	r22, 0x03	; 3
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2ecc:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    2ed0:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    2ed4:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    2ed8:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    2edc:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    2ee0:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    2ee4:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    2ee8:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    2eec:	82 17       	cp	r24, r18
    2eee:	93 07       	cpc	r25, r19
    2ef0:	a4 07       	cpc	r26, r20
    2ef2:	b5 07       	cpc	r27, r21
    2ef4:	10 f4       	brcc	.+4      	; 0x2efa <_Z19handleSerialBusMsgsv+0xb1c>
    2ef6:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_Z18startEventUsingRTCv>
    2efa:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    2efe:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    2f02:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    2f06:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    2f0a:	ae 01       	movw	r20, r28
    2f0c:	4b 59       	subi	r20, 0x9B	; 155
    2f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f10:	22 e3       	ldi	r18, 0x32	; 50
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	bc 01       	movw	r22, r24
    2f16:	cd 01       	movw	r24, r26
    2f18:	0e 94 47 30 	call	0x608e	; 0x608e <convertEpochToTimeString>
    2f1c:	29 2f       	mov	r18, r25
    2f1e:	2f 93       	push	r18
    2f20:	8f 93       	push	r24
    2f22:	80 e9       	ldi	r24, 0x90	; 144
    2f24:	92 e4       	ldi	r25, 0x42	; 66
    2f26:	89 2f       	mov	r24, r25
    2f28:	8f 93       	push	r24
    2f2a:	80 e9       	ldi	r24, 0x90	; 144
    2f2c:	92 e4       	ldi	r25, 0x42	; 66
    2f2e:	8f 93       	push	r24
    2f30:	81 ef       	ldi	r24, 0xF1	; 241
    2f32:	96 e4       	ldi	r25, 0x46	; 70
    2f34:	89 2f       	mov	r24, r25
    2f36:	8f 93       	push	r24
    2f38:	81 ef       	ldi	r24, 0xF1	; 241
    2f3a:	96 e4       	ldi	r25, 0x46	; 70
    2f3c:	8f 93       	push	r24
    2f3e:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	8d 83       	std	Y+5, r24	; 0x05
    2f52:	f9 c0       	rjmp	.+498    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    2f54:	8e 81       	ldd	r24, Y+6	; 0x06
    2f56:	9f 81       	ldd	r25, Y+7	; 0x07
    2f58:	fc 01       	movw	r30, r24
    2f5a:	83 81       	ldd	r24, Z+3	; 0x03
    2f5c:	86 34       	cpi	r24, 0x46	; 70
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <_Z19handleSerialBusMsgsv+0xb84>
    2f60:	7c c0       	rjmp	.+248    	; 0x305a <_Z19handleSerialBusMsgsv+0xc7c>
    2f62:	8e 81       	ldd	r24, Y+6	; 0x06
    2f64:	9f 81       	ldd	r25, Y+7	; 0x07
    2f66:	47 96       	adiw	r24, 0x17	; 23
    2f68:	bc 01       	movw	r22, r24
    2f6a:	81 ef       	ldi	r24, 0xF1	; 241
    2f6c:	96 e4       	ldi	r25, 0x46	; 70
    2f6e:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <strcpy>
    2f72:	80 91 85 47 	lds	r24, 0x4785	; 0x804785 <g_utc_offset>
    2f76:	81 95       	neg	r24
    2f78:	48 2f       	mov	r20, r24
    2f7a:	61 e8       	ldi	r22, 0x81	; 129
    2f7c:	77 e4       	ldi	r23, 0x47	; 71
    2f7e:	81 ef       	ldi	r24, 0xF1	; 241
    2f80:	96 e4       	ldi	r25, 0x46	; 70
    2f82:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_Z18validateTimeStringPcPma>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8e a3       	std	Y+38, r24	; 0x26
    2f8c:	9f a3       	std	Y+39, r25	; 0x27
    2f8e:	a8 a7       	std	Y+40, r26	; 0x28
    2f90:	b9 a7       	std	Y+41, r27	; 0x29
    2f92:	8e a1       	ldd	r24, Y+38	; 0x26
    2f94:	9f a1       	ldd	r25, Y+39	; 0x27
    2f96:	a8 a5       	ldd	r26, Y+40	; 0x28
    2f98:	b9 a5       	ldd	r27, Y+41	; 0x29
    2f9a:	89 2b       	or	r24, r25
    2f9c:	8a 2b       	or	r24, r26
    2f9e:	8b 2b       	or	r24, r27
    2fa0:	79 f1       	breq	.+94     	; 0x3000 <_Z19handleSerialBusMsgsv+0xc22>
    2fa2:	8e a1       	ldd	r24, Y+38	; 0x26
    2fa4:	9f a1       	ldd	r25, Y+39	; 0x27
    2fa6:	a8 a5       	ldd	r26, Y+40	; 0x28
    2fa8:	b9 a5       	ldd	r27, Y+41	; 0x29
    2faa:	80 93 81 47 	sts	0x4781, r24	; 0x804781 <g_event_finish_epoch>
    2fae:	90 93 82 47 	sts	0x4782, r25	; 0x804782 <g_event_finish_epoch+0x1>
    2fb2:	a0 93 83 47 	sts	0x4783, r26	; 0x804783 <g_event_finish_epoch+0x2>
    2fb6:	b0 93 84 47 	sts	0x4784, r27	; 0x804784 <g_event_finish_epoch+0x3>
    2fba:	41 e8       	ldi	r20, 0x81	; 129
    2fbc:	57 e4       	ldi	r21, 0x47	; 71
    2fbe:	66 e0       	ldi	r22, 0x06	; 6
    2fc0:	8c e7       	ldi	r24, 0x7C	; 124
    2fc2:	97 e4       	ldi	r25, 0x47	; 71
    2fc4:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2fc8:	63 e0       	ldi	r22, 0x03	; 3
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2fd2:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    2fd6:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    2fda:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    2fde:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    2fe2:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    2fe6:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    2fea:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    2fee:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    2ff2:	82 17       	cp	r24, r18
    2ff4:	93 07       	cpc	r25, r19
    2ff6:	a4 07       	cpc	r26, r20
    2ff8:	b5 07       	cpc	r27, r21
    2ffa:	10 f4       	brcc	.+4      	; 0x3000 <_Z19handleSerialBusMsgsv+0xc22>
    2ffc:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_Z18startEventUsingRTCv>
    3000:	80 91 81 47 	lds	r24, 0x4781	; 0x804781 <g_event_finish_epoch>
    3004:	90 91 82 47 	lds	r25, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    3008:	a0 91 83 47 	lds	r26, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    300c:	b0 91 84 47 	lds	r27, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    3010:	ae 01       	movw	r20, r28
    3012:	4b 59       	subi	r20, 0x9B	; 155
    3014:	5f 4f       	sbci	r21, 0xFF	; 255
    3016:	22 e3       	ldi	r18, 0x32	; 50
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 47 30 	call	0x608e	; 0x608e <convertEpochToTimeString>
    3022:	29 2f       	mov	r18, r25
    3024:	2f 93       	push	r18
    3026:	8f 93       	push	r24
    3028:	8b e9       	ldi	r24, 0x9B	; 155
    302a:	92 e4       	ldi	r25, 0x42	; 66
    302c:	89 2f       	mov	r24, r25
    302e:	8f 93       	push	r24
    3030:	8b e9       	ldi	r24, 0x9B	; 155
    3032:	92 e4       	ldi	r25, 0x42	; 66
    3034:	8f 93       	push	r24
    3036:	81 ef       	ldi	r24, 0xF1	; 241
    3038:	96 e4       	ldi	r25, 0x46	; 70
    303a:	89 2f       	mov	r24, r25
    303c:	8f 93       	push	r24
    303e:	81 ef       	ldi	r24, 0xF1	; 241
    3040:	96 e4       	ldi	r25, 0x46	; 70
    3042:	8f 93       	push	r24
    3044:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	76 c0       	rjmp	.+236    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    305a:	8e 81       	ldd	r24, Y+6	; 0x06
    305c:	9f 81       	ldd	r25, Y+7	; 0x07
    305e:	fc 01       	movw	r30, r24
    3060:	83 81       	ldd	r24, Z+3	; 0x03
    3062:	8a 32       	cpi	r24, 0x2A	; 42
    3064:	19 f4       	brne	.+6      	; 0x306c <_Z19handleSerialBusMsgsv+0xc8e>
    3066:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <ds3231_sync2nearestMinute>
    306a:	6d c0       	rjmp	.+218    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    306c:	0e 94 6f 27 	call	0x4ede	; 0x4ede <_Z23clockConfigurationCheckv>
    3070:	8a a7       	std	Y+42, r24	; 0x2a
    3072:	8a a5       	ldd	r24, Y+42	; 0x2a
    3074:	81 30       	cpi	r24, 0x01	; 1
    3076:	31 f0       	breq	.+12     	; 0x3084 <_Z19handleSerialBusMsgsv+0xca6>
    3078:	8a a5       	ldd	r24, Y+42	; 0x2a
    307a:	85 30       	cpi	r24, 0x05	; 5
    307c:	19 f0       	breq	.+6      	; 0x3084 <_Z19handleSerialBusMsgsv+0xca6>
    307e:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <_Z18reportConfigErrorsv>
    3082:	61 c0       	rjmp	.+194    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    3084:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    3088:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    308c:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    3090:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    3094:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    3098:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    309c:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    30a0:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    30a4:	0f 2e       	mov	r0, r31
    30a6:	f7 ea       	ldi	r31, 0xA7	; 167
    30a8:	ef 2e       	mov	r14, r31
    30aa:	f2 e4       	ldi	r31, 0x42	; 66
    30ac:	ff 2e       	mov	r15, r31
    30ae:	f0 2d       	mov	r31, r0
    30b0:	04 eb       	ldi	r16, 0xB4	; 180
    30b2:	12 e4       	ldi	r17, 0x42	; 66
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <_Z14reportTimeTillmmPKcS0_>
    30bc:	20 91 81 47 	lds	r18, 0x4781	; 0x804781 <g_event_finish_epoch>
    30c0:	30 91 82 47 	lds	r19, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    30c4:	40 91 83 47 	lds	r20, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    30c8:	50 91 84 47 	lds	r21, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    30cc:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    30d0:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    30d4:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    30d8:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    30dc:	e1 2c       	mov	r14, r1
    30de:	f1 2c       	mov	r15, r1
    30e0:	00 ec       	ldi	r16, 0xC0	; 192
    30e2:	12 e4       	ldi	r17, 0x42	; 66
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <_Z14reportTimeTillmmPKcS0_>
    30ec:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    30f0:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    30f4:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    30f8:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    30fc:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    3100:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    3104:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    3108:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    310c:	28 17       	cp	r18, r24
    310e:	39 07       	cpc	r19, r25
    3110:	4a 07       	cpc	r20, r26
    3112:	5b 07       	cpc	r21, r27
    3114:	c0 f4       	brcc	.+48     	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    3116:	20 91 81 47 	lds	r18, 0x4781	; 0x804781 <g_event_finish_epoch>
    311a:	30 91 82 47 	lds	r19, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    311e:	40 91 83 47 	lds	r20, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    3122:	50 91 84 47 	lds	r21, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    3126:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    312a:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    312e:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    3132:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    3136:	e1 2c       	mov	r14, r1
    3138:	f1 2c       	mov	r15, r1
    313a:	08 ec       	ldi	r16, 0xC8	; 200
    313c:	12 e4       	ldi	r17, 0x42	; 66
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <_Z14reportTimeTillmmPKcS0_>
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	88 23       	and	r24, r24
    314a:	01 f1       	breq	.+64     	; 0x318c <_Z19handleSerialBusMsgsv+0xdae>
    314c:	81 ef       	ldi	r24, 0xF1	; 241
    314e:	96 e4       	ldi	r25, 0x46	; 70
    3150:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    3154:	1b c0       	rjmp	.+54     	; 0x318c <_Z19handleSerialBusMsgsv+0xdae>
    3156:	8e 81       	ldd	r24, Y+6	; 0x06
    3158:	9f 81       	ldd	r25, Y+7	; 0x07
    315a:	fc 01       	movw	r30, r24
    315c:	83 81       	ldd	r24, Z+3	; 0x03
    315e:	83 34       	cpi	r24, 0x43	; 67
    3160:	b9 f4       	brne	.+46     	; 0x3190 <_Z19handleSerialBusMsgsv+0xdb2>
    3162:	8e 81       	ldd	r24, Y+6	; 0x06
    3164:	9f 81       	ldd	r25, Y+7	; 0x07
    3166:	fc 01       	movw	r30, r24
    3168:	87 89       	ldd	r24, Z+23	; 0x17
    316a:	88 23       	and	r24, r24
    316c:	89 f0       	breq	.+34     	; 0x3190 <_Z19handleSerialBusMsgsv+0xdb2>
    316e:	8e 81       	ldd	r24, Y+6	; 0x06
    3170:	9f 81       	ldd	r25, Y+7	; 0x07
    3172:	47 96       	adiw	r24, 0x17	; 23
    3174:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <atoi>
    3178:	88 ab       	std	Y+48, r24	; 0x30
    317a:	99 ab       	std	Y+49, r25	; 0x31
    317c:	09 c0       	rjmp	.+18     	; 0x3190 <_Z19handleSerialBusMsgsv+0xdb2>
    317e:	85 e7       	ldi	r24, 0x75	; 117
    3180:	90 e4       	ldi	r25, 0x40	; 64
    3182:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    3188:	00 00       	nop
    318a:	03 c0       	rjmp	.+6      	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    318c:	00 00       	nop
    318e:	01 c0       	rjmp	.+2      	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    3190:	00 00       	nop
    3192:	8e 81       	ldd	r24, Y+6	; 0x06
    3194:	9f 81       	ldd	r25, Y+7	; 0x07
    3196:	fc 01       	movw	r30, r24
    3198:	11 82       	std	Z+1, r1	; 0x01
    319a:	12 82       	std	Z+2, r1	; 0x02
    319c:	0e 94 18 3c 	call	0x7830	; 0x7830 <sb_send_NewPrompt>
    31a0:	2a c9       	rjmp	.-3500   	; 0x23f6 <_Z19handleSerialBusMsgsv+0x18>
    31a2:	00 00       	nop
    31a4:	ca 56       	subi	r28, 0x6A	; 106
    31a6:	df 4f       	sbci	r29, 0xFF	; 255
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	08 95       	ret

000031ba <_Z17handleLinkBusMsgsv>:
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	e3 97       	sbiw	r28, 0x33	; 51
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	0e 94 04 37 	call	0x6e08	; 0x6e08 <_Z18nextFullLBRxBufferv>
    31d8:	8c 87       	std	Y+12, r24	; 0x0c
    31da:	9d 87       	std	Y+13, r25	; 0x0d
    31dc:	21 e0       	ldi	r18, 0x01	; 1
    31de:	8c 85       	ldd	r24, Y+12	; 0x0c
    31e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31e2:	89 2b       	or	r24, r25
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <_Z17handleLinkBusMsgsv+0x2e>
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	22 23       	and	r18, r18
    31ea:	09 f4       	brne	.+2      	; 0x31ee <_Z17handleLinkBusMsgsv+0x34>
    31ec:	8b c6       	rjmp	.+3350   	; 0x3f04 <_Z17handleLinkBusMsgsv+0xd4a>
    31ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    31f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31f2:	fc 01       	movw	r30, r24
    31f4:	81 81       	ldd	r24, Z+1	; 0x01
    31f6:	92 81       	ldd	r25, Z+2	; 0x02
    31f8:	8e 87       	std	Y+14, r24	; 0x0e
    31fa:	9f 87       	std	Y+15, r25	; 0x0f
    31fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    31fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3200:	82 38       	cpi	r24, 0x82	; 130
    3202:	fe e1       	ldi	r31, 0x1E	; 30
    3204:	9f 07       	cpc	r25, r31
    3206:	09 f4       	brne	.+2      	; 0x320a <_Z17handleLinkBusMsgsv+0x50>
    3208:	71 c0       	rjmp	.+226    	; 0x32ec <_Z17handleLinkBusMsgsv+0x132>
    320a:	83 38       	cpi	r24, 0x83	; 131
    320c:	2e e1       	ldi	r18, 0x1E	; 30
    320e:	92 07       	cpc	r25, r18
    3210:	30 f5       	brcc	.+76     	; 0x325e <_Z17handleLinkBusMsgsv+0xa4>
    3212:	81 36       	cpi	r24, 0x61	; 97
    3214:	33 e0       	ldi	r19, 0x03	; 3
    3216:	93 07       	cpc	r25, r19
    3218:	09 f4       	brne	.+2      	; 0x321c <_Z17handleLinkBusMsgsv+0x62>
    321a:	de c4       	rjmp	.+2492   	; 0x3bd8 <_Z17handleLinkBusMsgsv+0xa1e>
    321c:	82 36       	cpi	r24, 0x62	; 98
    321e:	e3 e0       	ldi	r30, 0x03	; 3
    3220:	9e 07       	cpc	r25, r30
    3222:	78 f4       	brcc	.+30     	; 0x3242 <_Z17handleLinkBusMsgsv+0x88>
    3224:	85 31       	cpi	r24, 0x15	; 21
    3226:	f3 e0       	ldi	r31, 0x03	; 3
    3228:	9f 07       	cpc	r25, r31
    322a:	09 f4       	brne	.+2      	; 0x322e <_Z17handleLinkBusMsgsv+0x74>
    322c:	1e c1       	rjmp	.+572    	; 0x346a <_Z17handleLinkBusMsgsv+0x2b0>
    322e:	8e 31       	cpi	r24, 0x1E	; 30
    3230:	23 e0       	ldi	r18, 0x03	; 3
    3232:	92 07       	cpc	r25, r18
    3234:	09 f4       	brne	.+2      	; 0x3238 <_Z17handleLinkBusMsgsv+0x7e>
    3236:	45 c3       	rjmp	.+1674   	; 0x38c2 <_Z17handleLinkBusMsgsv+0x708>
    3238:	84 35       	cpi	r24, 0x54	; 84
    323a:	91 05       	cpc	r25, r1
    323c:	09 f4       	brne	.+2      	; 0x3240 <_Z17handleLinkBusMsgsv+0x86>
    323e:	41 c4       	rjmp	.+2178   	; 0x3ac2 <_Z17handleLinkBusMsgsv+0x908>
    3240:	36 c6       	rjmp	.+3180   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    3242:	8f 3a       	cpi	r24, 0xAF	; 175
    3244:	33 e0       	ldi	r19, 0x03	; 3
    3246:	93 07       	cpc	r25, r19
    3248:	d1 f1       	breq	.+116    	; 0x32be <_Z17handleLinkBusMsgsv+0x104>
    324a:	86 3a       	cpi	r24, 0xA6	; 166
    324c:	ec e1       	ldi	r30, 0x1C	; 28
    324e:	9e 07       	cpc	r25, r30
    3250:	09 f4       	brne	.+2      	; 0x3254 <_Z17handleLinkBusMsgsv+0x9a>
    3252:	4d c5       	rjmp	.+2714   	; 0x3cee <_Z17handleLinkBusMsgsv+0xb34>
    3254:	84 38       	cpi	r24, 0x84	; 132
    3256:	93 40       	sbci	r25, 0x03	; 3
    3258:	09 f4       	brne	.+2      	; 0x325c <_Z17handleLinkBusMsgsv+0xa2>
    325a:	cd c1       	rjmp	.+922    	; 0x35f6 <_Z17handleLinkBusMsgsv+0x43c>
    325c:	28 c6       	rjmp	.+3152   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    325e:	8a 39       	cpi	r24, 0x9A	; 154
    3260:	23 e2       	ldi	r18, 0x23	; 35
    3262:	92 07       	cpc	r25, r18
    3264:	09 f4       	brne	.+2      	; 0x3268 <_Z17handleLinkBusMsgsv+0xae>
    3266:	41 c0       	rjmp	.+130    	; 0x32ea <_Z17handleLinkBusMsgsv+0x130>
    3268:	8b 39       	cpi	r24, 0x9B	; 155
    326a:	33 e2       	ldi	r19, 0x23	; 35
    326c:	93 07       	cpc	r25, r19
    326e:	78 f4       	brcc	.+30     	; 0x328e <_Z17handleLinkBusMsgsv+0xd4>
    3270:	8d 3a       	cpi	r24, 0xAD	; 173
    3272:	e2 e2       	ldi	r30, 0x22	; 34
    3274:	9e 07       	cpc	r25, r30
    3276:	09 f4       	brne	.+2      	; 0x327a <_Z17handleLinkBusMsgsv+0xc0>
    3278:	96 c0       	rjmp	.+300    	; 0x33a6 <_Z17handleLinkBusMsgsv+0x1ec>
    327a:	81 3c       	cpi	r24, 0xC1	; 193
    327c:	f2 e2       	ldi	r31, 0x22	; 34
    327e:	9f 07       	cpc	r25, r31
    3280:	09 f4       	brne	.+2      	; 0x3284 <_Z17handleLinkBusMsgsv+0xca>
    3282:	ee c0       	rjmp	.+476    	; 0x3460 <_Z17handleLinkBusMsgsv+0x2a6>
    3284:	81 3d       	cpi	r24, 0xD1	; 209
    3286:	9e 41       	sbci	r25, 0x1E	; 30
    3288:	09 f4       	brne	.+2      	; 0x328c <_Z17handleLinkBusMsgsv+0xd2>
    328a:	bd c4       	rjmp	.+2426   	; 0x3c06 <_Z17handleLinkBusMsgsv+0xa4c>
    328c:	10 c6       	rjmp	.+3104   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    328e:	80 3d       	cpi	r24, 0xD0	; 208
    3290:	33 e2       	ldi	r19, 0x23	; 35
    3292:	93 07       	cpc	r25, r19
    3294:	09 f4       	brne	.+2      	; 0x3298 <_Z17handleLinkBusMsgsv+0xde>
    3296:	78 c3       	rjmp	.+1776   	; 0x3988 <_Z17handleLinkBusMsgsv+0x7ce>
    3298:	81 3d       	cpi	r24, 0xD1	; 209
    329a:	e3 e2       	ldi	r30, 0x23	; 35
    329c:	9e 07       	cpc	r25, r30
    329e:	28 f4       	brcc	.+10     	; 0x32aa <_Z17handleLinkBusMsgsv+0xf0>
    32a0:	8f 3c       	cpi	r24, 0xCF	; 207
    32a2:	93 42       	sbci	r25, 0x23	; 35
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <_Z17handleLinkBusMsgsv+0xee>
    32a6:	eb c5       	rjmp	.+3030   	; 0x3e7e <_Z17handleLinkBusMsgsv+0xcc4>
    32a8:	02 c6       	rjmp	.+3076   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    32aa:	87 3f       	cpi	r24, 0xF7	; 247
    32ac:	23 e2       	ldi	r18, 0x23	; 35
    32ae:	92 07       	cpc	r25, r18
    32b0:	09 f4       	brne	.+2      	; 0x32b4 <_Z17handleLinkBusMsgsv+0xfa>
    32b2:	16 c2       	rjmp	.+1068   	; 0x36e0 <_Z17handleLinkBusMsgsv+0x526>
    32b4:	8c 39       	cpi	r24, 0x9C	; 156
    32b6:	94 42       	sbci	r25, 0x24	; 36
    32b8:	09 f4       	brne	.+2      	; 0x32bc <_Z17handleLinkBusMsgsv+0x102>
    32ba:	f1 c5       	rjmp	.+3042   	; 0x3e9e <_Z17handleLinkBusMsgsv+0xce4>
    32bc:	f8 c5       	rjmp	.+3056   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    32be:	8c 85       	ldd	r24, Y+12	; 0x0c
    32c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    32c2:	fc 01       	movw	r30, r24
    32c4:	83 81       	ldd	r24, Z+3	; 0x03
    32c6:	88 23       	and	r24, r24
    32c8:	09 f4       	brne	.+2      	; 0x32cc <_Z17handleLinkBusMsgsv+0x112>
    32ca:	f7 c5       	rjmp	.+3054   	; 0x3eba <_Z17handleLinkBusMsgsv+0xd00>
    32cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    32d0:	03 96       	adiw	r24, 0x03	; 3
    32d2:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <atoi>
    32d6:	21 e0       	ldi	r18, 0x01	; 1
    32d8:	89 2b       	or	r24, r25
    32da:	09 f4       	brne	.+2      	; 0x32de <_Z17handleLinkBusMsgsv+0x124>
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	28 8b       	std	Y+16, r18	; 0x10
    32e0:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_Z15linkbus_disablev>
    32e4:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    32e8:	e8 c5       	rjmp	.+3024   	; 0x3eba <_Z17handleLinkBusMsgsv+0xd00>
    32ea:	ff cf       	rjmp	.-2      	; 0x32ea <_Z17handleLinkBusMsgsv+0x130>
    32ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    32f0:	fc 01       	movw	r30, r24
    32f2:	83 81       	ldd	r24, Z+3	; 0x03
    32f4:	89 8b       	std	Y+17, r24	; 0x11
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    32fc:	89 89       	ldd	r24, Y+17	; 0x11
    32fe:	8a 35       	cpi	r24, 0x5A	; 90
    3300:	21 f4       	brne	.+8      	; 0x330a <_Z17handleLinkBusMsgsv+0x150>
    3302:	88 e7       	ldi	r24, 0x78	; 120
    3304:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3308:	da c5       	rjmp	.+2996   	; 0x3ebe <_Z17handleLinkBusMsgsv+0xd04>
    330a:	89 89       	ldd	r24, Y+17	; 0x11
    330c:	80 33       	cpi	r24, 0x30	; 48
    330e:	b1 f5       	brne	.+108    	; 0x337c <_Z17handleLinkBusMsgsv+0x1c2>
    3310:	80 91 6b 47 	lds	r24, 0x476B	; 0x80476b <g_waiting_for_next_event>
    3314:	88 23       	and	r24, r24
    3316:	39 f0       	breq	.+14     	; 0x3326 <_Z17handleLinkBusMsgsv+0x16c>
    3318:	49 ed       	ldi	r20, 0xD9	; 217
    331a:	52 e4       	ldi	r21, 0x42	; 66
    331c:	6b ed       	ldi	r22, 0xDB	; 219
    331e:	72 e4       	ldi	r23, 0x42	; 66
    3320:	83 e0       	ldi	r24, 0x03	; 3
    3322:	0e 94 15 38 	call	0x702a	; 0x702a <_Z11lb_send_msg13LBMessageTypePKcPc>
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	2b 2f       	mov	r18, r27
    3334:	2f 93       	push	r18
    3336:	2a 2f       	mov	r18, r26
    3338:	2f 93       	push	r18
    333a:	29 2f       	mov	r18, r25
    333c:	2f 93       	push	r18
    333e:	8f 93       	push	r24
    3340:	8f ed       	ldi	r24, 0xDF	; 223
    3342:	92 e4       	ldi	r25, 0x42	; 66
    3344:	89 2f       	mov	r24, r25
    3346:	8f 93       	push	r24
    3348:	8f ed       	ldi	r24, 0xDF	; 223
    334a:	92 e4       	ldi	r25, 0x42	; 66
    334c:	8f 93       	push	r24
    334e:	81 ef       	ldi	r24, 0xF1	; 241
    3350:	96 e4       	ldi	r25, 0x46	; 70
    3352:	89 2f       	mov	r24, r25
    3354:	8f 93       	push	r24
    3356:	81 ef       	ldi	r24, 0xF1	; 241
    3358:	96 e4       	ldi	r25, 0x46	; 70
    335a:	8f 93       	push	r24
    335c:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    3360:	2d b7       	in	r18, 0x3d	; 61
    3362:	3e b7       	in	r19, 0x3e	; 62
    3364:	28 5f       	subi	r18, 0xF8	; 248
    3366:	3f 4f       	sbci	r19, 0xFF	; 255
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	41 ef       	ldi	r20, 0xF1	; 241
    336e:	56 e4       	ldi	r21, 0x46	; 70
    3370:	63 ee       	ldi	r22, 0xE3	; 227
    3372:	72 e4       	ldi	r23, 0x42	; 66
    3374:	83 e0       	ldi	r24, 0x03	; 3
    3376:	0e 94 15 38 	call	0x702a	; 0x702a <_Z11lb_send_msg13LBMessageTypePKcPc>
    337a:	a1 c5       	rjmp	.+2882   	; 0x3ebe <_Z17handleLinkBusMsgsv+0xd04>
    337c:	89 89       	ldd	r24, Y+17	; 0x11
    337e:	83 33       	cpi	r24, 0x33	; 51
    3380:	09 f0       	breq	.+2      	; 0x3384 <_Z17handleLinkBusMsgsv+0x1ca>
    3382:	9d c5       	rjmp	.+2874   	; 0x3ebe <_Z17handleLinkBusMsgsv+0xd04>
    3384:	f8 94       	cli
    3386:	10 92 2f 47 	sts	0x472F, r1	; 0x80472f <_ZL19g_wifi_enable_delay>
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3390:	10 92 6b 47 	sts	0x476B, r1	; 0x80476b <g_waiting_for_next_event>
    3394:	10 92 6a 47 	sts	0x476A, r1	; 0x80476a <g_check_for_next_event>
    3398:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	80 93 30 47 	sts	0x4730, r24	; 0x804730 <_ZL20g_shutting_down_wifi>
    33a2:	78 94       	sei
    33a4:	8c c5       	rjmp	.+2840   	; 0x3ebe <_Z17handleLinkBusMsgsv+0xd04>
    33a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    33a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    33aa:	fc 01       	movw	r30, r24
    33ac:	83 81       	ldd	r24, Z+3	; 0x03
    33ae:	88 23       	and	r24, r24
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <_Z17handleLinkBusMsgsv+0x1fa>
    33b2:	87 c5       	rjmp	.+2830   	; 0x3ec2 <_Z17handleLinkBusMsgsv+0xd08>
    33b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    33b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    33b8:	fc 01       	movw	r30, r24
    33ba:	83 81       	ldd	r24, Z+3	; 0x03
    33bc:	8d 34       	cpi	r24, 0x4D	; 77
    33be:	a9 f4       	brne	.+42     	; 0x33ea <_Z17handleLinkBusMsgsv+0x230>
    33c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    33c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    33c4:	fc 01       	movw	r30, r24
    33c6:	80 8d       	ldd	r24, Z+24	; 0x18
    33c8:	88 23       	and	r24, r24
    33ca:	79 f0       	breq	.+30     	; 0x33ea <_Z17handleLinkBusMsgsv+0x230>
    33cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    33d0:	48 96       	adiw	r24, 0x18	; 24
    33d2:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <atoi>
    33d6:	80 93 9b 47 	sts	0x479B, r24	; 0x80479b <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    33da:	90 93 9c 47 	sts	0x479C, r25	; 0x80479c <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    33de:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    33e2:	8f 5f       	subi	r24, 0xFF	; 255
    33e4:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    33e8:	09 c0       	rjmp	.+18     	; 0x33fc <_Z17handleLinkBusMsgsv+0x242>
    33ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    33ee:	03 96       	adiw	r24, 0x03	; 3
    33f0:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <atoi>
    33f4:	80 93 9b 47 	sts	0x479B, r24	; 0x80479b <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    33f8:	90 93 9c 47 	sts	0x479C, r25	; 0x80479c <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    33fc:	60 e0       	ldi	r22, 0x00	; 0
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	8b e9       	ldi	r24, 0x9B	; 155
    3402:	97 e4       	ldi	r25, 0x47	; 71
    3404:	0e 94 14 45 	call	0x8a28	; 0x8a28 <_Z15txSetParametersPjPb>
    3408:	8a 8b       	std	Y+18, r24	; 0x12
    340a:	8a 89       	ldd	r24, Y+18	; 0x12
    340c:	88 23       	and	r24, r24
    340e:	19 f0       	breq	.+6      	; 0x3416 <_Z17handleLinkBusMsgsv+0x25c>
    3410:	8a 89       	ldd	r24, Y+18	; 0x12
    3412:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    3416:	80 91 9b 47 	lds	r24, 0x479B	; 0x80479b <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    341a:	90 91 9c 47 	lds	r25, 0x479C	; 0x80479c <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    341e:	29 2f       	mov	r18, r25
    3420:	2f 93       	push	r18
    3422:	8f 93       	push	r24
    3424:	87 ee       	ldi	r24, 0xE7	; 231
    3426:	92 e4       	ldi	r25, 0x42	; 66
    3428:	89 2f       	mov	r24, r25
    342a:	8f 93       	push	r24
    342c:	87 ee       	ldi	r24, 0xE7	; 231
    342e:	92 e4       	ldi	r25, 0x42	; 66
    3430:	8f 93       	push	r24
    3432:	81 ef       	ldi	r24, 0xF1	; 241
    3434:	96 e4       	ldi	r25, 0x46	; 70
    3436:	89 2f       	mov	r24, r25
    3438:	8f 93       	push	r24
    343a:	81 ef       	ldi	r24, 0xF1	; 241
    343c:	96 e4       	ldi	r25, 0x46	; 70
    343e:	8f 93       	push	r24
    3440:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	41 ef       	ldi	r20, 0xF1	; 241
    3452:	56 e4       	ldi	r21, 0x46	; 70
    3454:	6c ee       	ldi	r22, 0xEC	; 236
    3456:	72 e4       	ldi	r23, 0x42	; 66
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	0e 94 15 38 	call	0x702a	; 0x702a <_Z11lb_send_msg13LBMessageTypePKcPc>
    345e:	31 c5       	rjmp	.+2658   	; 0x3ec2 <_Z17handleLinkBusMsgsv+0xd08>
    3460:	8c e7       	ldi	r24, 0x7C	; 124
    3462:	97 e4       	ldi	r25, 0x47	; 71
    3464:	0e 94 43 31 	call	0x6286	; 0x6286 <_ZN13EepromManager13saveAllEEPROMEv>
    3468:	3f c5       	rjmp	.+2686   	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    346a:	8c 85       	ldd	r24, Y+12	; 0x0c
    346c:	9d 85       	ldd	r25, Y+13	; 0x0d
    346e:	fc 01       	movw	r30, r24
    3470:	83 81       	ldd	r24, Z+3	; 0x03
    3472:	8b 8b       	std	Y+19, r24	; 0x13
    3474:	8b 89       	ldd	r24, Y+19	; 0x13
    3476:	81 33       	cpi	r24, 0x31	; 49
    3478:	21 f0       	breq	.+8      	; 0x3482 <_Z17handleLinkBusMsgsv+0x2c8>
    347a:	8b 89       	ldd	r24, Y+19	; 0x13
    347c:	82 33       	cpi	r24, 0x32	; 50
    347e:	09 f0       	breq	.+2      	; 0x3482 <_Z17handleLinkBusMsgsv+0x2c8>
    3480:	ae c0       	rjmp	.+348    	; 0x35de <_Z17handleLinkBusMsgsv+0x424>
    3482:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <_Z18txIsAntennaForBandv>
    3486:	98 2f       	mov	r25, r24
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	89 27       	eor	r24, r25
    348c:	88 23       	and	r24, r24
    348e:	41 f0       	breq	.+16     	; 0x34a0 <_Z17handleLinkBusMsgsv+0x2e6>
    3490:	90 91 36 40 	lds	r25, 0x4036	; 0x804036 <g_tx_power_is_zero>
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	89 27       	eor	r24, r25
    3498:	88 23       	and	r24, r24
    349a:	11 f0       	breq	.+4      	; 0x34a0 <_Z17handleLinkBusMsgsv+0x2e6>
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	01 c0       	rjmp	.+2      	; 0x34a2 <_Z17handleLinkBusMsgsv+0x2e8>
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	88 23       	and	r24, r24
    34a4:	21 f0       	breq	.+8      	; 0x34ae <_Z17handleLinkBusMsgsv+0x2f4>
    34a6:	87 ef       	ldi	r24, 0xF7	; 247
    34a8:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    34ac:	a2 c0       	rjmp	.+324    	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    34ae:	8b 89       	ldd	r24, Y+19	; 0x13
    34b0:	81 33       	cpi	r24, 0x31	; 49
    34b2:	09 f0       	breq	.+2      	; 0x34b6 <_Z17handleLinkBusMsgsv+0x2fc>
    34b4:	64 c0       	rjmp	.+200    	; 0x357e <_Z17handleLinkBusMsgsv+0x3c4>
    34b6:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <_Z18txIsAntennaForBandv>
    34ba:	88 23       	and	r24, r24
    34bc:	21 f4       	brne	.+8      	; 0x34c6 <_Z17handleLinkBusMsgsv+0x30c>
    34be:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    34c2:	88 23       	and	r24, r24
    34c4:	11 f0       	breq	.+4      	; 0x34ca <_Z17handleLinkBusMsgsv+0x310>
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <_Z17handleLinkBusMsgsv+0x312>
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	88 23       	and	r24, r24
    34ce:	09 f4       	brne	.+2      	; 0x34d2 <_Z17handleLinkBusMsgsv+0x318>
    34d0:	52 c0       	rjmp	.+164    	; 0x3576 <_Z17handleLinkBusMsgsv+0x3bc>
    34d2:	f8 94       	cli
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	8c a7       	std	Y+44, r24	; 0x2c
    34d8:	ce 01       	movw	r24, r28
    34da:	8c 96       	adiw	r24, 0x2c	; 44
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	bc 01       	movw	r22, r24
    34e2:	82 e3       	ldi	r24, 0x32	; 50
    34e4:	97 e4       	ldi	r25, 0x47	; 71
    34e6:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
    34ea:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    34ee:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    34f2:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    34f6:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    34fa:	78 94       	sei
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	a0 e0       	ldi	r26, 0x00	; 0
    3502:	b0 e0       	ldi	r27, 0x00	; 0
    3504:	80 93 60 47 	sts	0x4760, r24	; 0x804760 <g_event_start_time>
    3508:	90 93 61 47 	sts	0x4761, r25	; 0x804761 <g_event_start_time+0x1>
    350c:	a0 93 62 47 	sts	0x4762, r26	; 0x804762 <g_event_start_time+0x2>
    3510:	b0 93 63 47 	sts	0x4763, r27	; 0x804763 <g_event_start_time+0x3>
    3514:	8f ef       	ldi	r24, 0xFF	; 255
    3516:	9f ef       	ldi	r25, 0xFF	; 255
    3518:	dc 01       	movw	r26, r24
    351a:	80 93 64 47 	sts	0x4764, r24	; 0x804764 <g_event_finish_time>
    351e:	90 93 65 47 	sts	0x4765, r25	; 0x804765 <g_event_finish_time+0x1>
    3522:	a0 93 66 47 	sts	0x4766, r26	; 0x804766 <g_event_finish_time+0x2>
    3526:	b0 93 67 47 	sts	0x4767, r27	; 0x804767 <g_event_finish_time+0x3>
    352a:	8f e0       	ldi	r24, 0x0F	; 15
    352c:	97 e2       	ldi	r25, 0x27	; 39
    352e:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3532:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3536:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    353a:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    353e:	8f e0       	ldi	r24, 0x0F	; 15
    3540:	97 e2       	ldi	r25, 0x27	; 39
    3542:	a0 e0       	ldi	r26, 0x00	; 0
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    354a:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    354e:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    3552:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    3556:	8f ef       	ldi	r24, 0xFF	; 255
    3558:	9f ef       	ldi	r25, 0xFF	; 255
    355a:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    355e:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	80 93 69 47 	sts	0x4769, r24	; 0x804769 <g_event_commenced>
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	80 93 68 47 	sts	0x4768, r24	; 0x804768 <g_event_enabled>
    356e:	8d ef       	ldi	r24, 0xFD	; 253
    3570:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    3574:	3e c0       	rjmp	.+124    	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    3576:	87 ef       	ldi	r24, 0xF7	; 247
    3578:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    357c:	3a c0       	rjmp	.+116    	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    357e:	8b 89       	ldd	r24, Y+19	; 0x13
    3580:	82 33       	cpi	r24, 0x32	; 50
    3582:	b9 f5       	brne	.+110    	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    3584:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3588:	8e 30       	cpi	r24, 0x0E	; 14
    358a:	20 f4       	brcc	.+8      	; 0x3594 <_Z17handleLinkBusMsgsv+0x3da>
    358c:	8d ec       	ldi	r24, 0xCD	; 205
    358e:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    3592:	2f c0       	rjmp	.+94     	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    3594:	1d a6       	std	Y+45, r1	; 0x2d
    3596:	ce 01       	movw	r24, r28
    3598:	8d 96       	adiw	r24, 0x2d	; 45
    359a:	0e 94 55 20 	call	0x40aa	; 0x40aa <_Z11launchEventP2SC>
    359e:	80 93 9e 47 	sts	0x479E, r24	; 0x80479e <_ZZ17handleLinkBusMsgsvE2ec>
    35a2:	80 91 6c 47 	lds	r24, 0x476C	; 0x80476c <_ZL13g_go_to_sleep>
    35a6:	88 23       	and	r24, r24
    35a8:	31 f0       	breq	.+12     	; 0x35b6 <_Z17handleLinkBusMsgsv+0x3fc>
    35aa:	80 91 31 47 	lds	r24, 0x4731	; 0x804731 <_ZL11g_sleepType>
    35ae:	88 23       	and	r24, r24
    35b0:	11 f0       	breq	.+4      	; 0x35b6 <_Z17handleLinkBusMsgsv+0x3fc>
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	01 c0       	rjmp	.+2      	; 0x35b8 <_Z17handleLinkBusMsgsv+0x3fe>
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	88 23       	and	r24, r24
    35ba:	29 f0       	breq	.+10     	; 0x35c6 <_Z17handleLinkBusMsgsv+0x40c>
    35bc:	83 e0       	ldi	r24, 0x03	; 3
    35be:	80 93 31 47 	sts	0x4731, r24	; 0x804731 <_ZL11g_sleepType>
    35c2:	10 92 6c 47 	sts	0x476C, r1	; 0x80476c <_ZL13g_go_to_sleep>
    35c6:	8c e3       	ldi	r24, 0x3C	; 60
    35c8:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    35cc:	80 91 9e 47 	lds	r24, 0x479E	; 0x80479e <_ZZ17handleLinkBusMsgsvE2ec>
    35d0:	88 23       	and	r24, r24
    35d2:	79 f4       	brne	.+30     	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    35d4:	8c e7       	ldi	r24, 0x7C	; 124
    35d6:	97 e4       	ldi	r25, 0x47	; 71
    35d8:	0e 94 43 31 	call	0x6286	; 0x6286 <_ZN13EepromManager13saveAllEEPROMEv>
    35dc:	0a c0       	rjmp	.+20     	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    35de:	8b 89       	ldd	r24, Y+19	; 0x13
    35e0:	80 33       	cpi	r24, 0x30	; 48
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <_Z17handleLinkBusMsgsv+0x42c>
    35e4:	70 c4       	rjmp	.+2272   	; 0x3ec6 <_Z17handleLinkBusMsgsv+0xd0c>
    35e6:	10 92 9d 47 	sts	0x479D, r1	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35ea:	8c ee       	ldi	r24, 0xEC	; 236
    35ec:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    35f0:	6a c4       	rjmp	.+2260   	; 0x3ec6 <_Z17handleLinkBusMsgsv+0xd0c>
    35f2:	00 00       	nop
    35f4:	68 c4       	rjmp	.+2256   	; 0x3ec6 <_Z17handleLinkBusMsgsv+0xd0c>
    35f6:	1a 82       	std	Y+2, r1	; 0x02
    35f8:	1b 82       	std	Y+3, r1	; 0x03
    35fa:	1c 82       	std	Y+4, r1	; 0x04
    35fc:	1d 82       	std	Y+5, r1	; 0x05
    35fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    3600:	9d 85       	ldd	r25, Y+13	; 0x0d
    3602:	fc 01       	movw	r30, r24
    3604:	83 81       	ldd	r24, Z+3	; 0x03
    3606:	83 35       	cpi	r24, 0x53	; 83
    3608:	c1 f5       	brne	.+112    	; 0x367a <_Z17handleLinkBusMsgsv+0x4c0>
    360a:	8c 85       	ldd	r24, Y+12	; 0x0c
    360c:	9d 85       	ldd	r25, Y+13	; 0x0d
    360e:	fc 01       	movw	r30, r24
    3610:	80 8d       	ldd	r24, Z+24	; 0x18
    3612:	88 23       	and	r24, r24
    3614:	59 f0       	breq	.+22     	; 0x362c <_Z17handleLinkBusMsgsv+0x472>
    3616:	8c 85       	ldd	r24, Y+12	; 0x0c
    3618:	9d 85       	ldd	r25, Y+13	; 0x0d
    361a:	48 96       	adiw	r24, 0x18	; 24
    361c:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	8a 83       	std	Y+2, r24	; 0x02
    3626:	9b 83       	std	Y+3, r25	; 0x03
    3628:	ac 83       	std	Y+4, r26	; 0x04
    362a:	bd 83       	std	Y+5, r27	; 0x05
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	9b 81       	ldd	r25, Y+3	; 0x03
    3630:	ac 81       	ldd	r26, Y+4	; 0x04
    3632:	bd 81       	ldd	r27, Y+5	; 0x05
    3634:	89 2b       	or	r24, r25
    3636:	8a 2b       	or	r24, r26
    3638:	8b 2b       	or	r24, r27
    363a:	09 f4       	brne	.+2      	; 0x363e <_Z17handleLinkBusMsgsv+0x484>
    363c:	46 c4       	rjmp	.+2188   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	9b 81       	ldd	r25, Y+3	; 0x03
    3642:	ac 81       	ldd	r26, Y+4	; 0x04
    3644:	bd 81       	ldd	r27, Y+5	; 0x05
    3646:	80 93 60 47 	sts	0x4760, r24	; 0x804760 <g_event_start_time>
    364a:	90 93 61 47 	sts	0x4761, r25	; 0x804761 <g_event_start_time+0x1>
    364e:	a0 93 62 47 	sts	0x4762, r26	; 0x804762 <g_event_start_time+0x2>
    3652:	b0 93 63 47 	sts	0x4763, r27	; 0x804763 <g_event_start_time+0x3>
    3656:	f8 94       	cli
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    366c:	78 94       	sei
    366e:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3672:	8f 5f       	subi	r24, 0xFF	; 255
    3674:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3678:	28 c4       	rjmp	.+2128   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    367a:	8c 85       	ldd	r24, Y+12	; 0x0c
    367c:	9d 85       	ldd	r25, Y+13	; 0x0d
    367e:	fc 01       	movw	r30, r24
    3680:	83 81       	ldd	r24, Z+3	; 0x03
    3682:	86 34       	cpi	r24, 0x46	; 70
    3684:	09 f0       	breq	.+2      	; 0x3688 <_Z17handleLinkBusMsgsv+0x4ce>
    3686:	21 c4       	rjmp	.+2114   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    3688:	8c 85       	ldd	r24, Y+12	; 0x0c
    368a:	9d 85       	ldd	r25, Y+13	; 0x0d
    368c:	fc 01       	movw	r30, r24
    368e:	80 8d       	ldd	r24, Z+24	; 0x18
    3690:	88 23       	and	r24, r24
    3692:	59 f0       	breq	.+22     	; 0x36aa <_Z17handleLinkBusMsgsv+0x4f0>
    3694:	8c 85       	ldd	r24, Y+12	; 0x0c
    3696:	9d 85       	ldd	r25, Y+13	; 0x0d
    3698:	48 96       	adiw	r24, 0x18	; 24
    369a:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	8a 83       	std	Y+2, r24	; 0x02
    36a4:	9b 83       	std	Y+3, r25	; 0x03
    36a6:	ac 83       	std	Y+4, r26	; 0x04
    36a8:	bd 83       	std	Y+5, r27	; 0x05
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	9b 81       	ldd	r25, Y+3	; 0x03
    36ae:	ac 81       	ldd	r26, Y+4	; 0x04
    36b0:	bd 81       	ldd	r27, Y+5	; 0x05
    36b2:	89 2b       	or	r24, r25
    36b4:	8a 2b       	or	r24, r26
    36b6:	8b 2b       	or	r24, r27
    36b8:	09 f4       	brne	.+2      	; 0x36bc <_Z17handleLinkBusMsgsv+0x502>
    36ba:	07 c4       	rjmp	.+2062   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	9b 81       	ldd	r25, Y+3	; 0x03
    36c0:	ac 81       	ldd	r26, Y+4	; 0x04
    36c2:	bd 81       	ldd	r27, Y+5	; 0x05
    36c4:	80 93 64 47 	sts	0x4764, r24	; 0x804764 <g_event_finish_time>
    36c8:	90 93 65 47 	sts	0x4765, r25	; 0x804765 <g_event_finish_time+0x1>
    36cc:	a0 93 66 47 	sts	0x4766, r26	; 0x804766 <g_event_finish_time+0x2>
    36d0:	b0 93 67 47 	sts	0x4767, r27	; 0x804767 <g_event_finish_time+0x3>
    36d4:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    36d8:	8f 5f       	subi	r24, 0xFF	; 255
    36da:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    36de:	f5 c3       	rjmp	.+2026   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    36e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    36e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    36ea:	fc 01       	movw	r30, r24
    36ec:	80 81       	ld	r24, Z
    36ee:	81 30       	cpi	r24, 0x01	; 1
    36f0:	09 f0       	breq	.+2      	; 0x36f4 <_Z17handleLinkBusMsgsv+0x53a>
    36f2:	4b c0       	rjmp	.+150    	; 0x378a <_Z17handleLinkBusMsgsv+0x5d0>
    36f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    36f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    36f8:	fc 01       	movw	r30, r24
    36fa:	83 81       	ldd	r24, Z+3	; 0x03
    36fc:	88 23       	and	r24, r24
    36fe:	d1 f0       	breq	.+52     	; 0x3734 <_Z17handleLinkBusMsgsv+0x57a>
    3700:	8c 85       	ldd	r24, Y+12	; 0x0c
    3702:	9d 85       	ldd	r25, Y+13	; 0x0d
    3704:	03 96       	adiw	r24, 0x03	; 3
    3706:	44 e1       	ldi	r20, 0x14	; 20
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	bc 01       	movw	r22, r24
    370c:	81 ef       	ldi	r24, 0xF1	; 241
    370e:	96 e4       	ldi	r25, 0x46	; 70
    3710:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <strncpy>
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	81 ef       	ldi	r24, 0xF1	; 241
    3718:	96 e4       	ldi	r25, 0x46	; 70
    371a:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <ds3231_set_date_time>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    3732:	cd c3       	rjmp	.+1946   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	2b 2f       	mov	r18, r27
    3742:	2f 93       	push	r18
    3744:	2a 2f       	mov	r18, r26
    3746:	2f 93       	push	r18
    3748:	29 2f       	mov	r18, r25
    374a:	2f 93       	push	r18
    374c:	8f 93       	push	r24
    374e:	8f ed       	ldi	r24, 0xDF	; 223
    3750:	92 e4       	ldi	r25, 0x42	; 66
    3752:	89 2f       	mov	r24, r25
    3754:	8f 93       	push	r24
    3756:	8f ed       	ldi	r24, 0xDF	; 223
    3758:	92 e4       	ldi	r25, 0x42	; 66
    375a:	8f 93       	push	r24
    375c:	81 ef       	ldi	r24, 0xF1	; 241
    375e:	96 e4       	ldi	r25, 0x46	; 70
    3760:	89 2f       	mov	r24, r25
    3762:	8f 93       	push	r24
    3764:	81 ef       	ldi	r24, 0xF1	; 241
    3766:	96 e4       	ldi	r25, 0x46	; 70
    3768:	8f 93       	push	r24
    376a:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    376e:	2d b7       	in	r18, 0x3d	; 61
    3770:	3e b7       	in	r19, 0x3e	; 62
    3772:	28 5f       	subi	r18, 0xF8	; 248
    3774:	3f 4f       	sbci	r19, 0xFF	; 255
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	41 ef       	ldi	r20, 0xF1	; 241
    377c:	56 e4       	ldi	r21, 0x46	; 70
    377e:	63 ee       	ldi	r22, 0xE3	; 227
    3780:	72 e4       	ldi	r23, 0x42	; 66
    3782:	83 e0       	ldi	r24, 0x03	; 3
    3784:	0e 94 15 38 	call	0x702a	; 0x702a <_Z11lb_send_msg13LBMessageTypePKcPc>
    3788:	a2 c3       	rjmp	.+1860   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    378a:	8c 85       	ldd	r24, Y+12	; 0x0c
    378c:	9d 85       	ldd	r25, Y+13	; 0x0d
    378e:	fc 01       	movw	r30, r24
    3790:	80 81       	ld	r24, Z
    3792:	82 30       	cpi	r24, 0x02	; 2
    3794:	09 f0       	breq	.+2      	; 0x3798 <_Z17handleLinkBusMsgsv+0x5de>
    3796:	9b c3       	rjmp	.+1846   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    3798:	8c 85       	ldd	r24, Y+12	; 0x0c
    379a:	9d 85       	ldd	r25, Y+13	; 0x0d
    379c:	fc 01       	movw	r30, r24
    379e:	83 81       	ldd	r24, Z+3	; 0x03
    37a0:	88 35       	cpi	r24, 0x58	; 88
    37a2:	c9 f5       	brne	.+114    	; 0x3816 <_Z17handleLinkBusMsgsv+0x65c>
    37a4:	1c 8a       	std	Y+20, r1	; 0x14
    37a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    37a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    37aa:	fc 01       	movw	r30, r24
    37ac:	80 8d       	ldd	r24, Z+24	; 0x18
    37ae:	88 23       	and	r24, r24
    37b0:	51 f0       	breq	.+20     	; 0x37c6 <_Z17handleLinkBusMsgsv+0x60c>
    37b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    37b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    37b6:	48 96       	adiw	r24, 0x18	; 24
    37b8:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <atoi>
    37bc:	8c 8b       	std	Y+20, r24	; 0x14
    37be:	8c 89       	ldd	r24, Y+20	; 0x14
    37c0:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <ds3231_set_aging>
    37c4:	84 c3       	rjmp	.+1800   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    37c6:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <ds3231_get_aging>
    37ca:	8c 8b       	std	Y+20, r24	; 0x14
    37cc:	8c 89       	ldd	r24, Y+20	; 0x14
    37ce:	08 2e       	mov	r0, r24
    37d0:	00 0c       	add	r0, r0
    37d2:	99 0b       	sbc	r25, r25
    37d4:	29 2f       	mov	r18, r25
    37d6:	2f 93       	push	r18
    37d8:	8f 93       	push	r24
    37da:	80 ef       	ldi	r24, 0xF0	; 240
    37dc:	92 e4       	ldi	r25, 0x42	; 66
    37de:	89 2f       	mov	r24, r25
    37e0:	8f 93       	push	r24
    37e2:	80 ef       	ldi	r24, 0xF0	; 240
    37e4:	92 e4       	ldi	r25, 0x42	; 66
    37e6:	8f 93       	push	r24
    37e8:	81 ef       	ldi	r24, 0xF1	; 241
    37ea:	96 e4       	ldi	r25, 0x46	; 70
    37ec:	89 2f       	mov	r24, r25
    37ee:	8f 93       	push	r24
    37f0:	81 ef       	ldi	r24, 0xF1	; 241
    37f2:	96 e4       	ldi	r25, 0x46	; 70
    37f4:	8f 93       	push	r24
    37f6:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	41 ef       	ldi	r20, 0xF1	; 241
    3808:	56 e4       	ldi	r21, 0x46	; 70
    380a:	63 ee       	ldi	r22, 0xE3	; 227
    380c:	72 e4       	ldi	r23, 0x42	; 66
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	0e 94 15 38 	call	0x702a	; 0x702a <_Z11lb_send_msg13LBMessageTypePKcPc>
    3814:	5c c3       	rjmp	.+1720   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	8d 8b       	std	Y+21, r24	; 0x15
    3824:	9e 8b       	std	Y+22, r25	; 0x16
    3826:	af 8b       	std	Y+23, r26	; 0x17
    3828:	b8 8f       	std	Y+24, r27	; 0x18
    382a:	8d 89       	ldd	r24, Y+21	; 0x15
    382c:	9e 89       	ldd	r25, Y+22	; 0x16
    382e:	af 89       	ldd	r26, Y+23	; 0x17
    3830:	b8 8d       	ldd	r27, Y+24	; 0x18
    3832:	bc 01       	movw	r22, r24
    3834:	cd 01       	movw	r24, r26
    3836:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    383a:	80 91 9f 47 	lds	r24, 0x479F	; 0x80479f <_ZZ17handleLinkBusMsgsvE8lastTime>
    383e:	90 91 a0 47 	lds	r25, 0x47A0	; 0x8047a0 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    3842:	a0 91 a1 47 	lds	r26, 0x47A1	; 0x8047a1 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    3846:	b0 91 a2 47 	lds	r27, 0x47A2	; 0x8047a2 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    384a:	2d 89       	ldd	r18, Y+21	; 0x15
    384c:	3e 89       	ldd	r19, Y+22	; 0x16
    384e:	4f 89       	ldd	r20, Y+23	; 0x17
    3850:	58 8d       	ldd	r21, Y+24	; 0x18
    3852:	28 17       	cp	r18, r24
    3854:	39 07       	cpc	r19, r25
    3856:	4a 07       	cpc	r20, r26
    3858:	5b 07       	cpc	r21, r27
    385a:	09 f4       	brne	.+2      	; 0x385e <_Z17handleLinkBusMsgsv+0x6a4>
    385c:	38 c3       	rjmp	.+1648   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    385e:	88 8d       	ldd	r24, Y+24	; 0x18
    3860:	8f 93       	push	r24
    3862:	8f 89       	ldd	r24, Y+23	; 0x17
    3864:	8f 93       	push	r24
    3866:	8e 89       	ldd	r24, Y+22	; 0x16
    3868:	8f 93       	push	r24
    386a:	8d 89       	ldd	r24, Y+21	; 0x15
    386c:	8f 93       	push	r24
    386e:	8f ed       	ldi	r24, 0xDF	; 223
    3870:	92 e4       	ldi	r25, 0x42	; 66
    3872:	89 2f       	mov	r24, r25
    3874:	8f 93       	push	r24
    3876:	8f ed       	ldi	r24, 0xDF	; 223
    3878:	92 e4       	ldi	r25, 0x42	; 66
    387a:	8f 93       	push	r24
    387c:	81 ef       	ldi	r24, 0xF1	; 241
    387e:	96 e4       	ldi	r25, 0x46	; 70
    3880:	89 2f       	mov	r24, r25
    3882:	8f 93       	push	r24
    3884:	81 ef       	ldi	r24, 0xF1	; 241
    3886:	96 e4       	ldi	r25, 0x46	; 70
    3888:	8f 93       	push	r24
    388a:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    388e:	2d b7       	in	r18, 0x3d	; 61
    3890:	3e b7       	in	r19, 0x3e	; 62
    3892:	28 5f       	subi	r18, 0xF8	; 248
    3894:	3f 4f       	sbci	r19, 0xFF	; 255
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	41 ef       	ldi	r20, 0xF1	; 241
    389c:	56 e4       	ldi	r21, 0x46	; 70
    389e:	63 ee       	ldi	r22, 0xE3	; 227
    38a0:	72 e4       	ldi	r23, 0x42	; 66
    38a2:	83 e0       	ldi	r24, 0x03	; 3
    38a4:	0e 94 15 38 	call	0x702a	; 0x702a <_Z11lb_send_msg13LBMessageTypePKcPc>
    38a8:	8d 89       	ldd	r24, Y+21	; 0x15
    38aa:	9e 89       	ldd	r25, Y+22	; 0x16
    38ac:	af 89       	ldd	r26, Y+23	; 0x17
    38ae:	b8 8d       	ldd	r27, Y+24	; 0x18
    38b0:	80 93 9f 47 	sts	0x479F, r24	; 0x80479f <_ZZ17handleLinkBusMsgsvE8lastTime>
    38b4:	90 93 a0 47 	sts	0x47A0, r25	; 0x8047a0 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    38b8:	a0 93 a1 47 	sts	0x47A1, r26	; 0x8047a1 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    38bc:	b0 93 a2 47 	sts	0x47A2, r27	; 0x8047a2 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    38c0:	06 c3       	rjmp	.+1548   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    38c2:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    38c6:	8f 5f       	subi	r24, 0xFF	; 255
    38c8:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    38cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    38d0:	fc 01       	movw	r30, r24
    38d2:	83 81       	ldd	r24, Z+3	; 0x03
    38d4:	88 23       	and	r24, r24
    38d6:	81 f1       	breq	.+96     	; 0x3938 <_Z17handleLinkBusMsgsv+0x77e>
    38d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    38da:	9d 85       	ldd	r25, Y+13	; 0x0d
    38dc:	03 96       	adiw	r24, 0x03	; 3
    38de:	44 e1       	ldi	r20, 0x14	; 20
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	bc 01       	movw	r22, r24
    38e4:	87 e4       	ldi	r24, 0x47	; 71
    38e6:	97 e4       	ldi	r25, 0x47	; 71
    38e8:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <strncpy>
    38ec:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    38f0:	88 23       	and	r24, r24
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <_Z17handleLinkBusMsgsv+0x73c>
    38f4:	ee c2       	rjmp	.+1500   	; 0x3ed2 <_Z17handleLinkBusMsgsv+0xd18>
    38f6:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	bc 01       	movw	r22, r24
    3900:	87 e4       	ldi	r24, 0x47	; 71
    3902:	97 e4       	ldi	r25, 0x47	; 71
    3904:	0e 94 76 3a 	call	0x74ec	; 0x74ec <_Z26timeRequiredToSendStrAtWPMPcj>
    3908:	8c 50       	subi	r24, 0x0C	; 12
    390a:	9e 4f       	sbci	r25, 0xFE	; 254
    390c:	96 95       	lsr	r25
    390e:	87 95       	ror	r24
    3910:	96 95       	lsr	r25
    3912:	87 95       	ror	r24
    3914:	96 95       	lsr	r25
    3916:	87 95       	ror	r24
    3918:	9c 01       	movw	r18, r24
    391a:	a5 ec       	ldi	r26, 0xC5	; 197
    391c:	b0 e2       	ldi	r27, 0x20	; 32
    391e:	0e 94 9e 4c 	call	0x993c	; 0x993c <__umulhisi3>
    3922:	92 95       	swap	r25
    3924:	82 95       	swap	r24
    3926:	8f 70       	andi	r24, 0x0F	; 15
    3928:	89 27       	eor	r24, r25
    392a:	9f 70       	andi	r25, 0x0F	; 15
    392c:	89 27       	eor	r24, r25
    392e:	80 93 5c 47 	sts	0x475C, r24	; 0x80475c <g_time_needed_for_ID>
    3932:	90 93 5d 47 	sts	0x475D, r25	; 0x80475d <g_time_needed_for_ID+0x1>
    3936:	cd c2       	rjmp	.+1434   	; 0x3ed2 <_Z17handleLinkBusMsgsv+0xd18>
    3938:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <_Z17handleLinkBusMsgsv+0x788>
    3940:	c8 c2       	rjmp	.+1424   	; 0x3ed2 <_Z17handleLinkBusMsgsv+0xd18>
    3942:	87 e4       	ldi	r24, 0x47	; 71
    3944:	97 e4       	ldi	r25, 0x47	; 71
    3946:	89 2f       	mov	r24, r25
    3948:	8f 93       	push	r24
    394a:	87 e4       	ldi	r24, 0x47	; 71
    394c:	97 e4       	ldi	r25, 0x47	; 71
    394e:	8f 93       	push	r24
    3950:	85 ef       	ldi	r24, 0xF5	; 245
    3952:	92 e4       	ldi	r25, 0x42	; 66
    3954:	89 2f       	mov	r24, r25
    3956:	8f 93       	push	r24
    3958:	85 ef       	ldi	r24, 0xF5	; 245
    395a:	92 e4       	ldi	r25, 0x42	; 66
    395c:	8f 93       	push	r24
    395e:	81 ef       	ldi	r24, 0xF1	; 241
    3960:	96 e4       	ldi	r25, 0x46	; 70
    3962:	89 2f       	mov	r24, r25
    3964:	8f 93       	push	r24
    3966:	81 ef       	ldi	r24, 0xF1	; 241
    3968:	96 e4       	ldi	r25, 0x46	; 70
    396a:	8f 93       	push	r24
    396c:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	81 ef       	ldi	r24, 0xF1	; 241
    397e:	96 e4       	ldi	r25, 0x46	; 70
    3980:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <_Z12lb_send_textPc>
    3984:	19 82       	std	Y+1, r1	; 0x01
    3986:	a5 c2       	rjmp	.+1354   	; 0x3ed2 <_Z17handleLinkBusMsgsv+0xd18>
    3988:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    398c:	89 8f       	std	Y+25, r24	; 0x19
    398e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3990:	9d 85       	ldd	r25, Y+13	; 0x0d
    3992:	fc 01       	movw	r30, r24
    3994:	83 81       	ldd	r24, Z+3	; 0x03
    3996:	89 34       	cpi	r24, 0x49	; 73
    3998:	09 f0       	breq	.+2      	; 0x399c <_Z17handleLinkBusMsgsv+0x7e2>
    399a:	4f c0       	rjmp	.+158    	; 0x3a3a <_Z17handleLinkBusMsgsv+0x880>
    399c:	8c 85       	ldd	r24, Y+12	; 0x0c
    399e:	9d 85       	ldd	r25, Y+13	; 0x0d
    39a0:	fc 01       	movw	r30, r24
    39a2:	80 8d       	ldd	r24, Z+24	; 0x18
    39a4:	88 23       	and	r24, r24
    39a6:	09 f4       	brne	.+2      	; 0x39aa <_Z17handleLinkBusMsgsv+0x7f0>
    39a8:	96 c2       	rjmp	.+1324   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    39aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    39ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    39ae:	48 96       	adiw	r24, 0x18	; 24
    39b0:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	89 8f       	std	Y+25, r24	; 0x19
    39ba:	89 8d       	ldd	r24, Y+25	; 0x19
    39bc:	8a 8f       	std	Y+26, r24	; 0x1a
    39be:	85 e0       	ldi	r24, 0x05	; 5
    39c0:	8b 8f       	std	Y+27, r24	; 0x1b
    39c2:	84 e1       	ldi	r24, 0x14	; 20
    39c4:	8c 8f       	std	Y+28, r24	; 0x1c
    39c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39ca:	89 17       	cp	r24, r25
    39cc:	40 f0       	brcs	.+16     	; 0x39de <_Z17handleLinkBusMsgsv+0x824>
    39ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d2:	98 17       	cp	r25, r24
    39d4:	10 f4       	brcc	.+4      	; 0x39da <_Z17handleLinkBusMsgsv+0x820>
    39d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d8:	03 c0       	rjmp	.+6      	; 0x39e0 <_Z17handleLinkBusMsgsv+0x826>
    39da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    39dc:	01 c0       	rjmp	.+2      	; 0x39e0 <_Z17handleLinkBusMsgsv+0x826>
    39de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39e0:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    39e4:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39e8:	8f 5f       	subi	r24, 0xFF	; 255
    39ea:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39ee:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    39f2:	88 23       	and	r24, r24
    39f4:	09 f4       	brne	.+2      	; 0x39f8 <_Z17handleLinkBusMsgsv+0x83e>
    39f6:	6f c2       	rjmp	.+1246   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    39f8:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    39fc:	88 2f       	mov	r24, r24
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	bc 01       	movw	r22, r24
    3a02:	87 e4       	ldi	r24, 0x47	; 71
    3a04:	97 e4       	ldi	r25, 0x47	; 71
    3a06:	0e 94 76 3a 	call	0x74ec	; 0x74ec <_Z26timeRequiredToSendStrAtWPMPcj>
    3a0a:	8c 50       	subi	r24, 0x0C	; 12
    3a0c:	9e 4f       	sbci	r25, 0xFE	; 254
    3a0e:	96 95       	lsr	r25
    3a10:	87 95       	ror	r24
    3a12:	96 95       	lsr	r25
    3a14:	87 95       	ror	r24
    3a16:	96 95       	lsr	r25
    3a18:	87 95       	ror	r24
    3a1a:	9c 01       	movw	r18, r24
    3a1c:	a5 ec       	ldi	r26, 0xC5	; 197
    3a1e:	b0 e2       	ldi	r27, 0x20	; 32
    3a20:	0e 94 9e 4c 	call	0x993c	; 0x993c <__umulhisi3>
    3a24:	92 95       	swap	r25
    3a26:	82 95       	swap	r24
    3a28:	8f 70       	andi	r24, 0x0F	; 15
    3a2a:	89 27       	eor	r24, r25
    3a2c:	9f 70       	andi	r25, 0x0F	; 15
    3a2e:	89 27       	eor	r24, r25
    3a30:	80 93 5c 47 	sts	0x475C, r24	; 0x80475c <g_time_needed_for_ID>
    3a34:	90 93 5d 47 	sts	0x475D, r25	; 0x80475d <g_time_needed_for_ID+0x1>
    3a38:	4e c2       	rjmp	.+1180   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    3a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a3e:	fc 01       	movw	r30, r24
    3a40:	83 81       	ldd	r24, Z+3	; 0x03
    3a42:	80 35       	cpi	r24, 0x50	; 80
    3a44:	09 f0       	breq	.+2      	; 0x3a48 <_Z17handleLinkBusMsgsv+0x88e>
    3a46:	47 c2       	rjmp	.+1166   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    3a48:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	80 8d       	ldd	r24, Z+24	; 0x18
    3a50:	88 23       	and	r24, r24
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <_Z17handleLinkBusMsgsv+0x89c>
    3a54:	40 c2       	rjmp	.+1152   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    3a56:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a58:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a5a:	48 96       	adiw	r24, 0x18	; 24
    3a5c:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	89 8f       	std	Y+25, r24	; 0x19
    3a66:	89 8d       	ldd	r24, Y+25	; 0x19
    3a68:	8d 8f       	std	Y+29, r24	; 0x1d
    3a6a:	85 e0       	ldi	r24, 0x05	; 5
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	8e 8f       	std	Y+30, r24	; 0x1e
    3a70:	9f 8f       	std	Y+31, r25	; 0x1f
    3a72:	84 e1       	ldi	r24, 0x14	; 20
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	88 a3       	std	Y+32, r24	; 0x20
    3a78:	99 a3       	std	Y+33, r25	; 0x21
    3a7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a7c:	28 2f       	mov	r18, r24
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	88 a1       	ldd	r24, Y+32	; 0x20
    3a82:	99 a1       	ldd	r25, Y+33	; 0x21
    3a84:	82 17       	cp	r24, r18
    3a86:	93 07       	cpc	r25, r19
    3a88:	54 f0       	brlt	.+20     	; 0x3a9e <_Z17handleLinkBusMsgsv+0x8e4>
    3a8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a8c:	88 2f       	mov	r24, r24
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3a92:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3a94:	82 17       	cp	r24, r18
    3a96:	93 07       	cpc	r25, r19
    3a98:	24 f4       	brge	.+8      	; 0x3aa2 <_Z17handleLinkBusMsgsv+0x8e8>
    3a9a:	c9 01       	movw	r24, r18
    3a9c:	02 c0       	rjmp	.+4      	; 0x3aa2 <_Z17handleLinkBusMsgsv+0x8e8>
    3a9e:	88 a1       	ldd	r24, Y+32	; 0x20
    3aa0:	99 a1       	ldd	r25, Y+33	; 0x21
    3aa2:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    3aa6:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3aaa:	8f 5f       	subi	r24, 0xFF	; 255
    3aac:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3ab0:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3ab4:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    3ab8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    3abc:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    3ac0:	0a c2       	rjmp	.+1044   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    3ac2:	1a a2       	std	Y+34, r1	; 0x22
    3ac4:	1b a2       	std	Y+35, r1	; 0x23
    3ac6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ac8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aca:	fc 01       	movw	r30, r24
    3acc:	83 81       	ldd	r24, Z+3	; 0x03
    3ace:	80 33       	cpi	r24, 0x30	; 48
    3ad0:	e1 f4       	brne	.+56     	; 0x3b0a <_Z17handleLinkBusMsgsv+0x950>
    3ad2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ad4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	80 8d       	ldd	r24, Z+24	; 0x18
    3ada:	88 23       	and	r24, r24
    3adc:	09 f4       	brne	.+2      	; 0x3ae0 <_Z17handleLinkBusMsgsv+0x926>
    3ade:	fd c1       	rjmp	.+1018   	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3ae0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ae2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ae4:	48 96       	adiw	r24, 0x18	; 24
    3ae6:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	8a a3       	std	Y+34, r24	; 0x22
    3af0:	9b a3       	std	Y+35, r25	; 0x23
    3af2:	8a a1       	ldd	r24, Y+34	; 0x22
    3af4:	9b a1       	ldd	r25, Y+35	; 0x23
    3af6:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    3afa:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    3afe:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b02:	8f 5f       	subi	r24, 0xFF	; 255
    3b04:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b08:	e8 c1       	rjmp	.+976    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b0e:	fc 01       	movw	r30, r24
    3b10:	83 81       	ldd	r24, Z+3	; 0x03
    3b12:	81 33       	cpi	r24, 0x31	; 49
    3b14:	e1 f4       	brne	.+56     	; 0x3b4e <_Z17handleLinkBusMsgsv+0x994>
    3b16:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b18:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	80 8d       	ldd	r24, Z+24	; 0x18
    3b1e:	88 23       	and	r24, r24
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <_Z17handleLinkBusMsgsv+0x96a>
    3b22:	db c1       	rjmp	.+950    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b24:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b26:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b28:	48 96       	adiw	r24, 0x18	; 24
    3b2a:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	8a a3       	std	Y+34, r24	; 0x22
    3b34:	9b a3       	std	Y+35, r25	; 0x23
    3b36:	8a a1       	ldd	r24, Y+34	; 0x22
    3b38:	9b a1       	ldd	r25, Y+35	; 0x23
    3b3a:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3b3e:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3b42:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b46:	8f 5f       	subi	r24, 0xFF	; 255
    3b48:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b4c:	c6 c1       	rjmp	.+908    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b50:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b52:	fc 01       	movw	r30, r24
    3b54:	83 81       	ldd	r24, Z+3	; 0x03
    3b56:	89 34       	cpi	r24, 0x49	; 73
    3b58:	e1 f4       	brne	.+56     	; 0x3b92 <_Z17handleLinkBusMsgsv+0x9d8>
    3b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b5e:	fc 01       	movw	r30, r24
    3b60:	80 8d       	ldd	r24, Z+24	; 0x18
    3b62:	88 23       	and	r24, r24
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <_Z17handleLinkBusMsgsv+0x9ae>
    3b66:	b9 c1       	rjmp	.+882    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b68:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b6c:	48 96       	adiw	r24, 0x18	; 24
    3b6e:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	8a a3       	std	Y+34, r24	; 0x22
    3b78:	9b a3       	std	Y+35, r25	; 0x23
    3b7a:	8a a1       	ldd	r24, Y+34	; 0x22
    3b7c:	9b a1       	ldd	r25, Y+35	; 0x23
    3b7e:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <g_ID_period_seconds>
    3b82:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <g_ID_period_seconds+0x1>
    3b86:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b8a:	8f 5f       	subi	r24, 0xFF	; 255
    3b8c:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b90:	a4 c1       	rjmp	.+840    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b92:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b94:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b96:	fc 01       	movw	r30, r24
    3b98:	83 81       	ldd	r24, Z+3	; 0x03
    3b9a:	84 34       	cpi	r24, 0x44	; 68
    3b9c:	09 f0       	breq	.+2      	; 0x3ba0 <_Z17handleLinkBusMsgsv+0x9e6>
    3b9e:	9d c1       	rjmp	.+826    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ba2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	80 8d       	ldd	r24, Z+24	; 0x18
    3ba8:	88 23       	and	r24, r24
    3baa:	09 f4       	brne	.+2      	; 0x3bae <_Z17handleLinkBusMsgsv+0x9f4>
    3bac:	96 c1       	rjmp	.+812    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3bae:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bb2:	48 96       	adiw	r24, 0x18	; 24
    3bb4:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	8a a3       	std	Y+34, r24	; 0x22
    3bbe:	9b a3       	std	Y+35, r25	; 0x23
    3bc0:	8a a1       	ldd	r24, Y+34	; 0x22
    3bc2:	9b a1       	ldd	r25, Y+35	; 0x23
    3bc4:	80 93 5e 47 	sts	0x475E, r24	; 0x80475e <g_intra_cycle_delay_time>
    3bc8:	90 93 5f 47 	sts	0x475F, r25	; 0x80475f <g_intra_cycle_delay_time+0x1>
    3bcc:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3bd0:	8f 5f       	subi	r24, 0xFF	; 255
    3bd2:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3bd6:	81 c1       	rjmp	.+770    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3bd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bda:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bdc:	fc 01       	movw	r30, r24
    3bde:	83 81       	ldd	r24, Z+3	; 0x03
    3be0:	88 23       	and	r24, r24
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <_Z17handleLinkBusMsgsv+0xa2c>
    3be4:	7c c1       	rjmp	.+760    	; 0x3ede <_Z17handleLinkBusMsgsv+0xd24>
    3be6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3be8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bea:	03 96       	adiw	r24, 0x03	; 3
    3bec:	44 e1       	ldi	r20, 0x14	; 20
    3bee:	50 e0       	ldi	r21, 0x00	; 0
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	82 e3       	ldi	r24, 0x32	; 50
    3bf4:	97 e4       	ldi	r25, 0x47	; 71
    3bf6:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <strncpy>
    3bfa:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3bfe:	8f 5f       	subi	r24, 0xFF	; 255
    3c00:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c04:	6c c1       	rjmp	.+728    	; 0x3ede <_Z17handleLinkBusMsgsv+0xd24>
    3c06:	1e 82       	std	Y+6, r1	; 0x06
    3c08:	1f 82       	std	Y+7, r1	; 0x07
    3c0a:	18 86       	std	Y+8, r1	; 0x08
    3c0c:	19 86       	std	Y+9, r1	; 0x09
    3c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c10:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c12:	fc 01       	movw	r30, r24
    3c14:	83 81       	ldd	r24, Z+3	; 0x03
    3c16:	88 23       	and	r24, r24
    3c18:	99 f1       	breq	.+102    	; 0x3c80 <_Z17handleLinkBusMsgsv+0xac6>
    3c1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c1e:	03 96       	adiw	r24, 0x03	; 3
    3c20:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	80 93 a3 47 	sts	0x47A3, r24	; 0x8047a3 <_ZZ17handleLinkBusMsgsvE1f>
    3c2c:	90 93 a4 47 	sts	0x47A4, r25	; 0x8047a4 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3c30:	a0 93 a5 47 	sts	0x47A5, r26	; 0x8047a5 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3c34:	b0 93 a6 47 	sts	0x47A6, r27	; 0x8047a6 <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3c38:	80 91 a3 47 	lds	r24, 0x47A3	; 0x8047a3 <_ZZ17handleLinkBusMsgsvE1f>
    3c3c:	90 91 a4 47 	lds	r25, 0x47A4	; 0x8047a4 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3c40:	a0 91 a5 47 	lds	r26, 0x47A5	; 0x8047a5 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3c44:	b0 91 a6 47 	lds	r27, 0x47A6	; 0x8047a6 <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3c48:	8e a7       	std	Y+46, r24	; 0x2e
    3c4a:	9f a7       	std	Y+47, r25	; 0x2f
    3c4c:	a8 ab       	std	Y+48, r26	; 0x30
    3c4e:	b9 ab       	std	Y+49, r27	; 0x31
    3c50:	ce 01       	movw	r24, r28
    3c52:	8e 96       	adiw	r24, 0x2e	; 46
    3c54:	61 e0       	ldi	r22, 0x01	; 1
    3c56:	0e 94 b3 44 	call	0x8966	; 0x8966 <_Z14txSetFrequencyPmb>
    3c5a:	98 2f       	mov	r25, r24
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	89 27       	eor	r24, r25
    3c60:	88 23       	and	r24, r24
    3c62:	b1 f0       	breq	.+44     	; 0x3c90 <_Z17handleLinkBusMsgsv+0xad6>
    3c64:	8e a5       	ldd	r24, Y+46	; 0x2e
    3c66:	9f a5       	ldd	r25, Y+47	; 0x2f
    3c68:	a8 a9       	ldd	r26, Y+48	; 0x30
    3c6a:	b9 a9       	ldd	r27, Y+49	; 0x31
    3c6c:	8e 83       	std	Y+6, r24	; 0x06
    3c6e:	9f 83       	std	Y+7, r25	; 0x07
    3c70:	a8 87       	std	Y+8, r26	; 0x08
    3c72:	b9 87       	std	Y+9, r27	; 0x09
    3c74:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c78:	8f 5f       	subi	r24, 0xFF	; 255
    3c7a:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c7e:	08 c0       	rjmp	.+16     	; 0x3c90 <_Z17handleLinkBusMsgsv+0xad6>
    3c80:	0e 94 e5 44 	call	0x89ca	; 0x89ca <_Z14txGetFrequencyv>
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22
    3c88:	8e 83       	std	Y+6, r24	; 0x06
    3c8a:	9f 83       	std	Y+7, r25	; 0x07
    3c8c:	a8 87       	std	Y+8, r26	; 0x08
    3c8e:	b9 87       	std	Y+9, r27	; 0x09
    3c90:	8e 81       	ldd	r24, Y+6	; 0x06
    3c92:	9f 81       	ldd	r25, Y+7	; 0x07
    3c94:	a8 85       	ldd	r26, Y+8	; 0x08
    3c96:	b9 85       	ldd	r27, Y+9	; 0x09
    3c98:	89 2b       	or	r24, r25
    3c9a:	8a 2b       	or	r24, r26
    3c9c:	8b 2b       	or	r24, r27
    3c9e:	09 f4       	brne	.+2      	; 0x3ca2 <_Z17handleLinkBusMsgsv+0xae8>
    3ca0:	20 c1       	rjmp	.+576    	; 0x3ee2 <_Z17handleLinkBusMsgsv+0xd28>
    3ca2:	89 85       	ldd	r24, Y+9	; 0x09
    3ca4:	8f 93       	push	r24
    3ca6:	88 85       	ldd	r24, Y+8	; 0x08
    3ca8:	8f 93       	push	r24
    3caa:	8f 81       	ldd	r24, Y+7	; 0x07
    3cac:	8f 93       	push	r24
    3cae:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb0:	8f 93       	push	r24
    3cb2:	8e ef       	ldi	r24, 0xFE	; 254
    3cb4:	92 e4       	ldi	r25, 0x42	; 66
    3cb6:	89 2f       	mov	r24, r25
    3cb8:	8f 93       	push	r24
    3cba:	8e ef       	ldi	r24, 0xFE	; 254
    3cbc:	92 e4       	ldi	r25, 0x42	; 66
    3cbe:	8f 93       	push	r24
    3cc0:	81 ef       	ldi	r24, 0xF1	; 241
    3cc2:	96 e4       	ldi	r25, 0x46	; 70
    3cc4:	89 2f       	mov	r24, r25
    3cc6:	8f 93       	push	r24
    3cc8:	81 ef       	ldi	r24, 0xF1	; 241
    3cca:	96 e4       	ldi	r25, 0x46	; 70
    3ccc:	8f 93       	push	r24
    3cce:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    3cd2:	2d b7       	in	r18, 0x3d	; 61
    3cd4:	3e b7       	in	r19, 0x3e	; 62
    3cd6:	28 5f       	subi	r18, 0xF8	; 248
    3cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	41 ef       	ldi	r20, 0xF1	; 241
    3ce0:	56 e4       	ldi	r21, 0x46	; 70
    3ce2:	63 e0       	ldi	r22, 0x03	; 3
    3ce4:	73 e4       	ldi	r23, 0x43	; 67
    3ce6:	83 e0       	ldi	r24, 0x03	; 3
    3ce8:	0e 94 15 38 	call	0x702a	; 0x702a <_Z11lb_send_msg13LBMessageTypePKcPc>
    3cec:	fa c0       	rjmp	.+500    	; 0x3ee2 <_Z17handleLinkBusMsgsv+0xd28>
    3cee:	80 91 72 47 	lds	r24, 0x4772	; 0x804772 <_ZL22g_lastConversionResult>
    3cf2:	90 91 73 47 	lds	r25, 0x4773	; 0x804773 <_ZL22g_lastConversionResult+0x1>
    3cf6:	21 e0       	ldi	r18, 0x01	; 1
    3cf8:	8d 38       	cpi	r24, 0x8D	; 141
    3cfa:	92 40       	sbci	r25, 0x02	; 2
    3cfc:	08 f4       	brcc	.+2      	; 0x3d00 <_Z17handleLinkBusMsgsv+0xb46>
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	22 23       	and	r18, r18
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <_Z17handleLinkBusMsgsv+0xb4c>
    3d04:	7c c0       	rjmp	.+248    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xc44>
    3d06:	80 91 72 47 	lds	r24, 0x4772	; 0x804772 <_ZL22g_lastConversionResult>
    3d0a:	90 91 73 47 	lds	r25, 0x4773	; 0x804773 <_ZL22g_lastConversionResult+0x1>
    3d0e:	cc 01       	movw	r24, r24
    3d10:	a0 e0       	ldi	r26, 0x00	; 0
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	9c 01       	movw	r18, r24
    3d16:	ad 01       	movw	r20, r26
    3d18:	60 ea       	ldi	r22, 0xA0	; 160
    3d1a:	78 e6       	ldi	r23, 0x68	; 104
    3d1c:	86 e0       	ldi	r24, 0x06	; 6
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	0e 94 1c 4c 	call	0x9838	; 0x9838 <__mulsi3>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	7c 01       	movw	r14, r24
    3d2a:	8d 01       	movw	r16, r26
    3d2c:	ed e7       	ldi	r30, 0x7D	; 125
    3d2e:	fe 1a       	sub	r15, r30
    3d30:	0c 40       	sbci	r16, 0x0C	; 12
    3d32:	1e 4f       	sbci	r17, 0xFE	; 254
    3d34:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3d38:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3d3c:	cc 01       	movw	r24, r24
    3d3e:	a0 e0       	ldi	r26, 0x00	; 0
    3d40:	b0 e0       	ldi	r27, 0x00	; 0
    3d42:	9c 01       	movw	r18, r24
    3d44:	ad 01       	movw	r20, r26
    3d46:	64 e6       	ldi	r22, 0x64	; 100
    3d48:	70 e7       	ldi	r23, 0x70	; 112
    3d4a:	8e ef       	ldi	r24, 0xFE	; 254
    3d4c:	9f ef       	ldi	r25, 0xFF	; 255
    3d4e:	0e 94 1c 4c 	call	0x9838	; 0x9838 <__mulsi3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	e8 0e       	add	r14, r24
    3d58:	f9 1e       	adc	r15, r25
    3d5a:	0a 1f       	adc	r16, r26
    3d5c:	1b 1f       	adc	r17, r27
    3d5e:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3d62:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3d66:	cc 01       	movw	r24, r24
    3d68:	a0 e0       	ldi	r26, 0x00	; 0
    3d6a:	b0 e0       	ldi	r27, 0x00	; 0
    3d6c:	28 e6       	ldi	r18, 0x68	; 104
    3d6e:	30 e1       	ldi	r19, 0x10	; 16
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	50 e0       	ldi	r21, 0x00	; 0
    3d74:	28 1b       	sub	r18, r24
    3d76:	39 0b       	sbc	r19, r25
    3d78:	4a 0b       	sbc	r20, r26
    3d7a:	5b 0b       	sbc	r21, r27
    3d7c:	8f ef       	ldi	r24, 0xFF	; 255
    3d7e:	93 e0       	ldi	r25, 0x03	; 3
    3d80:	dc 01       	movw	r26, r24
    3d82:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__muluhisi3>
    3d86:	9b 01       	movw	r18, r22
    3d88:	ac 01       	movw	r20, r24
    3d8a:	c8 01       	movw	r24, r16
    3d8c:	b7 01       	movw	r22, r14
    3d8e:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__divmodsi4>
    3d92:	da 01       	movw	r26, r20
    3d94:	c9 01       	movw	r24, r18
    3d96:	8c a3       	std	Y+36, r24	; 0x24
    3d98:	9d a3       	std	Y+37, r25	; 0x25
    3d9a:	ae a3       	std	Y+38, r26	; 0x26
    3d9c:	bf a3       	std	Y+39, r27	; 0x27
    3d9e:	18 a6       	std	Y+40, r1	; 0x28
    3da0:	19 a6       	std	Y+41, r1	; 0x29
    3da2:	84 e6       	ldi	r24, 0x64	; 100
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	8a a7       	std	Y+42, r24	; 0x2a
    3da8:	9b a7       	std	Y+43, r25	; 0x2b
    3daa:	8a a5       	ldd	r24, Y+42	; 0x2a
    3dac:	9b a5       	ldd	r25, Y+43	; 0x2b
    3dae:	9c 01       	movw	r18, r24
    3db0:	99 0f       	add	r25, r25
    3db2:	44 0b       	sbc	r20, r20
    3db4:	55 0b       	sbc	r21, r21
    3db6:	8c a1       	ldd	r24, Y+36	; 0x24
    3db8:	9d a1       	ldd	r25, Y+37	; 0x25
    3dba:	ae a1       	ldd	r26, Y+38	; 0x26
    3dbc:	bf a1       	ldd	r27, Y+39	; 0x27
    3dbe:	28 17       	cp	r18, r24
    3dc0:	39 07       	cpc	r19, r25
    3dc2:	4a 07       	cpc	r20, r26
    3dc4:	5b 07       	cpc	r21, r27
    3dc6:	3c f4       	brge	.+14     	; 0x3dd6 <_Z17handleLinkBusMsgsv+0xc1c>
    3dc8:	8a a5       	ldd	r24, Y+42	; 0x2a
    3dca:	9b a5       	ldd	r25, Y+43	; 0x2b
    3dcc:	09 2e       	mov	r0, r25
    3dce:	00 0c       	add	r0, r0
    3dd0:	aa 0b       	sbc	r26, r26
    3dd2:	bb 0b       	sbc	r27, r27
    3dd4:	11 c0       	rjmp	.+34     	; 0x3df8 <_Z17handleLinkBusMsgsv+0xc3e>
    3dd6:	88 a5       	ldd	r24, Y+40	; 0x28
    3dd8:	99 a5       	ldd	r25, Y+41	; 0x29
    3dda:	09 2e       	mov	r0, r25
    3ddc:	00 0c       	add	r0, r0
    3dde:	aa 0b       	sbc	r26, r26
    3de0:	bb 0b       	sbc	r27, r27
    3de2:	2c a1       	ldd	r18, Y+36	; 0x24
    3de4:	3d a1       	ldd	r19, Y+37	; 0x25
    3de6:	4e a1       	ldd	r20, Y+38	; 0x26
    3de8:	5f a1       	ldd	r21, Y+39	; 0x27
    3dea:	82 17       	cp	r24, r18
    3dec:	93 07       	cpc	r25, r19
    3dee:	a4 07       	cpc	r26, r20
    3df0:	b5 07       	cpc	r27, r21
    3df2:	14 f4       	brge	.+4      	; 0x3df8 <_Z17handleLinkBusMsgsv+0xc3e>
    3df4:	da 01       	movw	r26, r20
    3df6:	c9 01       	movw	r24, r18
    3df8:	8a 87       	std	Y+10, r24	; 0x0a
    3dfa:	9b 87       	std	Y+11, r25	; 0x0b
    3dfc:	2f c0       	rjmp	.+94     	; 0x3e5c <_Z17handleLinkBusMsgsv+0xca2>
    3dfe:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <_ZL22g_lastConversionResult+0x4>
    3e02:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <_ZL22g_lastConversionResult+0x5>
    3e06:	9c 01       	movw	r18, r24
    3e08:	40 e0       	ldi	r20, 0x00	; 0
    3e0a:	50 e0       	ldi	r21, 0x00	; 0
    3e0c:	da 01       	movw	r26, r20
    3e0e:	c9 01       	movw	r24, r18
    3e10:	88 0f       	add	r24, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	aa 1f       	adc	r26, r26
    3e16:	bb 1f       	adc	r27, r27
    3e18:	88 0f       	add	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	aa 1f       	adc	r26, r26
    3e1e:	bb 1f       	adc	r27, r27
    3e20:	88 0f       	add	r24, r24
    3e22:	99 1f       	adc	r25, r25
    3e24:	aa 1f       	adc	r26, r26
    3e26:	bb 1f       	adc	r27, r27
    3e28:	82 1b       	sub	r24, r18
    3e2a:	93 0b       	sbc	r25, r19
    3e2c:	a4 0b       	sbc	r26, r20
    3e2e:	b5 0b       	sbc	r27, r21
    3e30:	88 0f       	add	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	aa 1f       	adc	r26, r26
    3e36:	bb 1f       	adc	r27, r27
    3e38:	8a 5c       	subi	r24, 0xCA	; 202
    3e3a:	9e 4f       	sbci	r25, 0xFE	; 254
    3e3c:	af 4f       	sbci	r26, 0xFF	; 255
    3e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e40:	24 e6       	ldi	r18, 0x64	; 100
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e0       	ldi	r20, 0x00	; 0
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	bc 01       	movw	r22, r24
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__divmodsi4>
    3e50:	da 01       	movw	r26, r20
    3e52:	c9 01       	movw	r24, r18
    3e54:	80 5f       	subi	r24, 0xF0	; 240
    3e56:	98 4d       	sbci	r25, 0xD8	; 216
    3e58:	8a 87       	std	Y+10, r24	; 0x0a
    3e5a:	9b 87       	std	Y+11, r25	; 0x0b
    3e5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e60:	67 e0       	ldi	r22, 0x07	; 7
    3e62:	73 e4       	ldi	r23, 0x43	; 67
    3e64:	0e 94 3d 38 	call	0x707a	; 0x707a <_Z16lb_broadcast_numjPKc>
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	bc 01       	movw	r22, r24
    3e76:	cd 01       	movw	r24, r26
    3e78:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    3e7c:	35 c0       	rjmp	.+106    	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3e7e:	ce 01       	movw	r24, r28
    3e80:	c2 96       	adiw	r24, 0x32	; 50
    3e82:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <ds3231_get_temp>
    3e86:	98 2f       	mov	r25, r24
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	89 27       	eor	r24, r25
    3e8c:	88 23       	and	r24, r24
    3e8e:	59 f1       	breq	.+86     	; 0x3ee6 <_Z17handleLinkBusMsgsv+0xd2c>
    3e90:	8a a9       	ldd	r24, Y+50	; 0x32
    3e92:	9b a9       	ldd	r25, Y+51	; 0x33
    3e94:	6c e0       	ldi	r22, 0x0C	; 12
    3e96:	73 e4       	ldi	r23, 0x43	; 67
    3e98:	0e 94 3d 38 	call	0x707a	; 0x707a <_Z16lb_broadcast_numjPKc>
    3e9c:	24 c0       	rjmp	.+72     	; 0x3ee6 <_Z17handleLinkBusMsgsv+0xd2c>
    3e9e:	44 e6       	ldi	r20, 0x64	; 100
    3ea0:	50 e4       	ldi	r21, 0x40	; 64
    3ea2:	61 e1       	ldi	r22, 0x11	; 17
    3ea4:	73 e4       	ldi	r23, 0x43	; 67
    3ea6:	83 e0       	ldi	r24, 0x03	; 3
    3ea8:	0e 94 15 38 	call	0x702a	; 0x702a <_Z11lb_send_msg13LBMessageTypePKcPc>
    3eac:	1d c0       	rjmp	.+58     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3eae:	0e 94 4a 37 	call	0x6e94	; 0x6e94 <_Z16linkbus_reset_rxv>
    3eb2:	8e ec       	ldi	r24, 0xCE	; 206
    3eb4:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    3eb8:	17 c0       	rjmp	.+46     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3eba:	00 00       	nop
    3ebc:	15 c0       	rjmp	.+42     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ebe:	00 00       	nop
    3ec0:	13 c0       	rjmp	.+38     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ec2:	00 00       	nop
    3ec4:	11 c0       	rjmp	.+34     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ec6:	00 00       	nop
    3ec8:	0f c0       	rjmp	.+30     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3eca:	00 00       	nop
    3ecc:	0d c0       	rjmp	.+26     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ece:	00 00       	nop
    3ed0:	0b c0       	rjmp	.+22     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ed2:	00 00       	nop
    3ed4:	09 c0       	rjmp	.+18     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ed6:	00 00       	nop
    3ed8:	07 c0       	rjmp	.+14     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3eda:	00 00       	nop
    3edc:	05 c0       	rjmp	.+10     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ede:	00 00       	nop
    3ee0:	03 c0       	rjmp	.+6      	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ee2:	00 00       	nop
    3ee4:	01 c0       	rjmp	.+2      	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ee6:	00 00       	nop
    3ee8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3eea:	9d 85       	ldd	r25, Y+13	; 0x0d
    3eec:	fc 01       	movw	r30, r24
    3eee:	11 82       	std	Z+1, r1	; 0x01
    3ef0:	12 82       	std	Z+2, r1	; 0x02
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	88 23       	and	r24, r24
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <_Z17handleLinkBusMsgsv+0xd40>
    3ef8:	6d c9       	rjmp	.-3366   	; 0x31d4 <_Z17handleLinkBusMsgsv+0x1a>
    3efa:	85 e1       	ldi	r24, 0x15	; 21
    3efc:	93 e4       	ldi	r25, 0x43	; 67
    3efe:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <_Z12lb_send_textPc>
    3f02:	68 c9       	rjmp	.-3376   	; 0x31d4 <_Z17handleLinkBusMsgsv+0x1a>
    3f04:	00 00       	nop
    3f06:	e3 96       	adiw	r28, 0x33	; 51
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	df 91       	pop	r29
    3f0e:	cf 91       	pop	r28
    3f10:	1f 91       	pop	r17
    3f12:	0f 91       	pop	r16
    3f14:	ff 90       	pop	r15
    3f16:	ef 90       	pop	r14
    3f18:	08 95       	ret

00003f1a <_Z12eventEnabledv>:
    3f1a:	ef 92       	push	r14
    3f1c:	ff 92       	push	r15
    3f1e:	0f 93       	push	r16
    3f20:	1f 93       	push	r17
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	29 97       	sbiw	r28, 0x09	; 9
    3f2c:	cd bf       	out	0x3d, r28	; 61
    3f2e:	de bf       	out	0x3e, r29	; 62
    3f30:	20 91 60 47 	lds	r18, 0x4760	; 0x804760 <g_event_start_time>
    3f34:	30 91 61 47 	lds	r19, 0x4761	; 0x804761 <g_event_start_time+0x1>
    3f38:	40 91 62 47 	lds	r20, 0x4762	; 0x804762 <g_event_start_time+0x2>
    3f3c:	50 91 63 47 	lds	r21, 0x4763	; 0x804763 <g_event_start_time+0x3>
    3f40:	80 91 64 47 	lds	r24, 0x4764	; 0x804764 <g_event_finish_time>
    3f44:	90 91 65 47 	lds	r25, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    3f48:	a0 91 66 47 	lds	r26, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    3f4c:	b0 91 67 47 	lds	r27, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    3f50:	bc 01       	movw	r22, r24
    3f52:	cd 01       	movw	r24, r26
    3f54:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <_Z7timeDifmm>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	89 83       	std	Y+1, r24	; 0x01
    3f5e:	9a 83       	std	Y+2, r25	; 0x02
    3f60:	ab 83       	std	Y+3, r26	; 0x03
    3f62:	bc 83       	std	Y+4, r27	; 0x04
    3f64:	21 e0       	ldi	r18, 0x01	; 1
    3f66:	89 81       	ldd	r24, Y+1	; 0x01
    3f68:	9a 81       	ldd	r25, Y+2	; 0x02
    3f6a:	ab 81       	ldd	r26, Y+3	; 0x03
    3f6c:	bc 81       	ldd	r27, Y+4	; 0x04
    3f6e:	18 16       	cp	r1, r24
    3f70:	19 06       	cpc	r1, r25
    3f72:	1a 06       	cpc	r1, r26
    3f74:	1b 06       	cpc	r1, r27
    3f76:	0c f0       	brlt	.+2      	; 0x3f7a <_Z12eventEnabledv+0x60>
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	2d 83       	std	Y+5, r18	; 0x05
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	06 96       	adiw	r24, 0x06	; 6
    3f80:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    3f84:	20 91 64 47 	lds	r18, 0x4764	; 0x804764 <g_event_finish_time>
    3f88:	30 91 65 47 	lds	r19, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    3f8c:	40 91 66 47 	lds	r20, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    3f90:	50 91 67 47 	lds	r21, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    3f94:	8e 81       	ldd	r24, Y+6	; 0x06
    3f96:	9f 81       	ldd	r25, Y+7	; 0x07
    3f98:	a8 85       	ldd	r26, Y+8	; 0x08
    3f9a:	b9 85       	ldd	r27, Y+9	; 0x09
    3f9c:	bc 01       	movw	r22, r24
    3f9e:	cd 01       	movw	r24, r26
    3fa0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <_Z7timeDifmm>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	89 83       	std	Y+1, r24	; 0x01
    3faa:	9a 83       	std	Y+2, r25	; 0x02
    3fac:	ab 83       	std	Y+3, r26	; 0x03
    3fae:	bc 83       	std	Y+4, r27	; 0x04
    3fb0:	89 81       	ldd	r24, Y+1	; 0x01
    3fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb4:	ab 81       	ldd	r26, Y+3	; 0x03
    3fb6:	bc 81       	ldd	r27, Y+4	; 0x04
    3fb8:	bb 23       	and	r27, r27
    3fba:	2c f0       	brlt	.+10     	; 0x3fc6 <_Z12eventEnabledv+0xac>
    3fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbe:	88 23       	and	r24, r24
    3fc0:	11 f0       	breq	.+4      	; 0x3fc6 <_Z12eventEnabledv+0xac>
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	4a c0       	rjmp	.+148    	; 0x405a <__DATA_REGION_LENGTH__+0x5a>
    3fc6:	20 91 60 47 	lds	r18, 0x4760	; 0x804760 <g_event_start_time>
    3fca:	30 91 61 47 	lds	r19, 0x4761	; 0x804761 <g_event_start_time+0x1>
    3fce:	40 91 62 47 	lds	r20, 0x4762	; 0x804762 <g_event_start_time+0x2>
    3fd2:	50 91 63 47 	lds	r21, 0x4763	; 0x804763 <g_event_start_time+0x3>
    3fd6:	8e 81       	ldd	r24, Y+6	; 0x06
    3fd8:	9f 81       	ldd	r25, Y+7	; 0x07
    3fda:	a8 85       	ldd	r26, Y+8	; 0x08
    3fdc:	b9 85       	ldd	r27, Y+9	; 0x09
    3fde:	bc 01       	movw	r22, r24
    3fe0:	cd 01       	movw	r24, r26
    3fe2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <_Z7timeDifmm>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	89 83       	std	Y+1, r24	; 0x01
    3fec:	9a 83       	std	Y+2, r25	; 0x02
    3fee:	ab 83       	std	Y+3, r26	; 0x03
    3ff0:	bc 83       	std	Y+4, r27	; 0x04
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ff8:	bc 81       	ldd	r27, Y+4	; 0x04
    3ffa:	84 3c       	cpi	r24, 0xC4	; 196
    3ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ffe:	af 4f       	sbci	r26, 0xFF	; 255
    4000:	bf 4f       	sbci	r27, 0xFF	; 255
    4002:	64 f0       	brlt	.+24     	; 0x401c <__DATA_REGION_LENGTH__+0x1c>
    4004:	10 92 31 47 	sts	0x4731, r1	; 0x804731 <_ZL11g_sleepType>
    4008:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep>
    400c:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    4010:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    4014:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	1f c0       	rjmp	.+62     	; 0x405a <__DATA_REGION_LENGTH__+0x5a>
    401c:	24 ec       	ldi	r18, 0xC4	; 196
    401e:	3f ef       	ldi	r19, 0xFF	; 255
    4020:	4f ef       	ldi	r20, 0xFF	; 255
    4022:	5f ef       	ldi	r21, 0xFF	; 255
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	9a 81       	ldd	r25, Y+2	; 0x02
    4028:	ab 81       	ldd	r26, Y+3	; 0x03
    402a:	bc 81       	ldd	r27, Y+4	; 0x04
    402c:	79 01       	movw	r14, r18
    402e:	8a 01       	movw	r16, r20
    4030:	e8 1a       	sub	r14, r24
    4032:	f9 0a       	sbc	r15, r25
    4034:	0a 0b       	sbc	r16, r26
    4036:	1b 0b       	sbc	r17, r27
    4038:	d8 01       	movw	r26, r16
    403a:	c7 01       	movw	r24, r14
    403c:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    4040:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    4044:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    4048:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	80 93 31 47 	sts	0x4731, r24	; 0x804731 <_ZL11g_sleepType>
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	80 93 6c 47 	sts	0x476C, r24	; 0x80476c <_ZL13g_go_to_sleep>
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	29 96       	adiw	r28, 0x09	; 9
    405c:	cd bf       	out	0x3d, r28	; 61
    405e:	de bf       	out	0x3e, r29	; 62
    4060:	df 91       	pop	r29
    4062:	cf 91       	pop	r28
    4064:	1f 91       	pop	r17
    4066:	0f 91       	pop	r16
    4068:	ff 90       	pop	r15
    406a:	ef 90       	pop	r14
    406c:	08 95       	ret

0000406e <_Z13throttleValueh>:
    406e:	85 31       	cpi	r24, 0x15	; 21
    4070:	4c f4       	brge	.+18     	; 0x4084 <_Z13throttleValueh+0x16>
    4072:	28 2f       	mov	r18, r24
    4074:	88 0f       	add	r24, r24
    4076:	33 0b       	sbc	r19, r19
    4078:	25 30       	cpi	r18, 0x05	; 5
    407a:	31 05       	cpc	r19, r1
    407c:	2c f4       	brge	.+10     	; 0x4088 <_Z13throttleValueh+0x1a>
    407e:	25 e0       	ldi	r18, 0x05	; 5
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	02 c0       	rjmp	.+4      	; 0x4088 <_Z13throttleValueh+0x1a>
    4084:	24 e1       	ldi	r18, 0x14	; 20
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e0       	ldi	r20, 0x00	; 0
    408c:	50 e0       	ldi	r21, 0x00	; 0
    408e:	62 ec       	ldi	r22, 0xC2	; 194
    4090:	71 e0       	ldi	r23, 0x01	; 1
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__divmodsi4>
    409a:	ca 01       	movw	r24, r20
    409c:	b9 01       	movw	r22, r18
    409e:	0e 94 b9 4a 	call	0x9572	; 0x9572 <__floatsisf>
    40a2:	0e 94 88 4a 	call	0x9510	; 0x9510 <__fixunssfsi>
    40a6:	cb 01       	movw	r24, r22
    40a8:	08 95       	ret

000040aa <_Z11launchEventP2SC>:
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	00 d0       	rcall	.+0      	; 0x40b0 <_Z11launchEventP2SC+0x6>
    40b0:	1f 92       	push	r1
    40b2:	cd b7       	in	r28, 0x3d	; 61
    40b4:	de b7       	in	r29, 0x3e	; 62
    40b6:	8a 83       	std	Y+2, r24	; 0x02
    40b8:	9b 83       	std	Y+3, r25	; 0x03
    40ba:	8a 81       	ldd	r24, Y+2	; 0x02
    40bc:	9b 81       	ldd	r25, Y+3	; 0x03
    40be:	0e 94 80 20 	call	0x4100	; 0x4100 <_Z33activateEventUsingCurrentSettingsP2SC>
    40c2:	89 83       	std	Y+1, r24	; 0x01
    40c4:	8a 81       	ldd	r24, Y+2	; 0x02
    40c6:	9b 81       	ldd	r25, Y+3	; 0x03
    40c8:	fc 01       	movw	r30, r24
    40ca:	80 81       	ld	r24, Z
    40cc:	88 23       	and	r24, r24
    40ce:	31 f0       	breq	.+12     	; 0x40dc <_Z11launchEventP2SC+0x32>
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	9b 81       	ldd	r25, Y+3	; 0x03
    40d4:	fc 01       	movw	r30, r24
    40d6:	80 81       	ld	r24, Z
    40d8:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	88 23       	and	r24, r24
    40e0:	21 f0       	breq	.+8      	; 0x40ea <_Z11launchEventP2SC+0x40>
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    40e8:	04 c0       	rjmp	.+8      	; 0x40f2 <_Z11launchEventP2SC+0x48>
    40ea:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_Z12eventEnabledv>
    40ee:	80 93 68 47 	sts	0x4768, r24	; 0x804768 <g_event_enabled>
    40f2:	89 81       	ldd	r24, Y+1	; 0x01
    40f4:	23 96       	adiw	r28, 0x03	; 3
    40f6:	cd bf       	out	0x3d, r28	; 61
    40f8:	de bf       	out	0x3e, r29	; 62
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	08 95       	ret

00004100 <_Z33activateEventUsingCurrentSettingsP2SC>:
    4100:	cf 92       	push	r12
    4102:	df 92       	push	r13
    4104:	ef 92       	push	r14
    4106:	ff 92       	push	r15
    4108:	0f 93       	push	r16
    410a:	1f 93       	push	r17
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	1f 92       	push	r1
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
    4116:	40 91 60 47 	lds	r20, 0x4760	; 0x804760 <g_event_start_time>
    411a:	50 91 61 47 	lds	r21, 0x4761	; 0x804761 <g_event_start_time+0x1>
    411e:	60 91 62 47 	lds	r22, 0x4762	; 0x804762 <g_event_start_time+0x2>
    4122:	70 91 63 47 	lds	r23, 0x4763	; 0x804763 <g_event_start_time+0x3>
    4126:	45 2b       	or	r20, r21
    4128:	46 2b       	or	r20, r22
    412a:	47 2b       	or	r20, r23
    412c:	09 f4       	brne	.+2      	; 0x4130 <_Z33activateEventUsingCurrentSettingsP2SC+0x30>
    412e:	91 c1       	rjmp	.+802    	; 0x4452 <_Z33activateEventUsingCurrentSettingsP2SC+0x352>
    4130:	00 91 60 47 	lds	r16, 0x4760	; 0x804760 <g_event_start_time>
    4134:	10 91 61 47 	lds	r17, 0x4761	; 0x804761 <g_event_start_time+0x1>
    4138:	20 91 62 47 	lds	r18, 0x4762	; 0x804762 <g_event_start_time+0x2>
    413c:	30 91 63 47 	lds	r19, 0x4763	; 0x804763 <g_event_start_time+0x3>
    4140:	40 91 64 47 	lds	r20, 0x4764	; 0x804764 <g_event_finish_time>
    4144:	50 91 65 47 	lds	r21, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    4148:	60 91 66 47 	lds	r22, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    414c:	70 91 67 47 	lds	r23, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    4150:	04 17       	cp	r16, r20
    4152:	15 07       	cpc	r17, r21
    4154:	26 07       	cpc	r18, r22
    4156:	37 07       	cpc	r19, r23
    4158:	08 f0       	brcs	.+2      	; 0x415c <_Z33activateEventUsingCurrentSettingsP2SC+0x5c>
    415a:	7d c1       	rjmp	.+762    	; 0x4456 <_Z33activateEventUsingCurrentSettingsP2SC+0x356>
    415c:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4160:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4164:	23 2b       	or	r18, r19
    4166:	09 f4       	brne	.+2      	; 0x416a <_Z33activateEventUsingCurrentSettingsP2SC+0x6a>
    4168:	78 c1       	rjmp	.+752    	; 0x445a <_Z33activateEventUsingCurrentSettingsP2SC+0x35a>
    416a:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    416e:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    4172:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4176:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    417a:	24 0f       	add	r18, r20
    417c:	35 1f       	adc	r19, r21
    417e:	40 91 5e 47 	lds	r20, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    4182:	50 91 5f 47 	lds	r21, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    4186:	24 17       	cp	r18, r20
    4188:	35 07       	cpc	r19, r21
    418a:	0c f4       	brge	.+2      	; 0x418e <_Z33activateEventUsingCurrentSettingsP2SC+0x8e>
    418c:	68 c1       	rjmp	.+720    	; 0x445e <_Z33activateEventUsingCurrentSettingsP2SC+0x35e>
    418e:	20 91 32 47 	lds	r18, 0x4732	; 0x804732 <g_messages_text>
    4192:	22 23       	and	r18, r18
    4194:	09 f4       	brne	.+2      	; 0x4198 <_Z33activateEventUsingCurrentSettingsP2SC+0x98>
    4196:	65 c1       	rjmp	.+714    	; 0x4462 <_Z33activateEventUsingCurrentSettingsP2SC+0x362>
    4198:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    419c:	22 23       	and	r18, r18
    419e:	09 f4       	brne	.+2      	; 0x41a2 <_Z33activateEventUsingCurrentSettingsP2SC+0xa2>
    41a0:	62 c1       	rjmp	.+708    	; 0x4466 <_Z33activateEventUsingCurrentSettingsP2SC+0x366>
    41a2:	8c 01       	movw	r16, r24
    41a4:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    41a8:	88 23       	and	r24, r24
    41aa:	19 f1       	breq	.+70     	; 0x41f2 <_Z33activateEventUsingCurrentSettingsP2SC+0xf2>
    41ac:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    41b0:	88 23       	and	r24, r24
    41b2:	41 f0       	breq	.+16     	; 0x41c4 <_Z33activateEventUsingCurrentSettingsP2SC+0xc4>
    41b4:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    41b8:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    41bc:	89 2b       	or	r24, r25
    41be:	21 f4       	brne	.+8      	; 0x41c8 <_Z33activateEventUsingCurrentSettingsP2SC+0xc8>
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	03 c0       	rjmp	.+6      	; 0x41ca <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	01 c0       	rjmp	.+2      	; 0x41ca <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	81 11       	cpse	r24, r1
    41cc:	4e c1       	rjmp	.+668    	; 0x446a <_Z33activateEventUsingCurrentSettingsP2SC+0x36a>
    41ce:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    41d2:	70 e0       	ldi	r23, 0x00	; 0
    41d4:	87 e4       	ldi	r24, 0x47	; 71
    41d6:	97 e4       	ldi	r25, 0x47	; 71
    41d8:	0e 94 76 3a 	call	0x74ec	; 0x74ec <_Z26timeRequiredToSendStrAtWPMPcj>
    41dc:	8c 50       	subi	r24, 0x0C	; 12
    41de:	9e 4f       	sbci	r25, 0xFE	; 254
    41e0:	68 ee       	ldi	r22, 0xE8	; 232
    41e2:	73 e0       	ldi	r23, 0x03	; 3
    41e4:	0e 94 2c 4c 	call	0x9858	; 0x9858 <__udivmodhi4>
    41e8:	60 93 5c 47 	sts	0x475C, r22	; 0x80475c <g_time_needed_for_ID>
    41ec:	70 93 5d 47 	sts	0x475D, r23	; 0x80475d <g_time_needed_for_ID+0x1>
    41f0:	04 c0       	rjmp	.+8      	; 0x41fa <_Z33activateEventUsingCurrentSettingsP2SC+0xfa>
    41f2:	10 92 5c 47 	sts	0x475C, r1	; 0x80475c <g_time_needed_for_ID>
    41f6:	10 92 5d 47 	sts	0x475D, r1	; 0x80475d <g_time_needed_for_ID+0x1>
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    4202:	c0 90 64 47 	lds	r12, 0x4764	; 0x804764 <g_event_finish_time>
    4206:	d0 90 65 47 	lds	r13, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    420a:	e0 90 66 47 	lds	r14, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    420e:	f0 90 67 47 	lds	r15, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    4212:	c6 16       	cp	r12, r22
    4214:	d7 06       	cpc	r13, r23
    4216:	e8 06       	cpc	r14, r24
    4218:	f9 06       	cpc	r15, r25
    421a:	48 f4       	brcc	.+18     	; 0x422e <_Z33activateEventUsingCurrentSettingsP2SC+0x12e>
    421c:	01 15       	cp	r16, r1
    421e:	11 05       	cpc	r17, r1
    4220:	09 f4       	brne	.+2      	; 0x4224 <_Z33activateEventUsingCurrentSettingsP2SC+0x124>
    4222:	25 c1       	rjmp	.+586    	; 0x446e <_Z33activateEventUsingCurrentSettingsP2SC+0x36e>
    4224:	8a ef       	ldi	r24, 0xFA	; 250
    4226:	f8 01       	movw	r30, r16
    4228:	80 83       	st	Z, r24
    422a:	80 e0       	ldi	r24, 0x00	; 0
    422c:	21 c1       	rjmp	.+578    	; 0x4470 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    422e:	20 91 60 47 	lds	r18, 0x4760	; 0x804760 <g_event_start_time>
    4232:	30 91 61 47 	lds	r19, 0x4761	; 0x804761 <g_event_start_time+0x1>
    4236:	40 91 62 47 	lds	r20, 0x4762	; 0x804762 <g_event_start_time+0x2>
    423a:	50 91 63 47 	lds	r21, 0x4763	; 0x804763 <g_event_start_time+0x3>
    423e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <_Z7timeDifmm>
    4242:	99 23       	and	r25, r25
    4244:	0c f4       	brge	.+2      	; 0x4248 <_Z33activateEventUsingCurrentSettingsP2SC+0x148>
    4246:	f2 c0       	rjmp	.+484    	; 0x442c <_Z33activateEventUsingCurrentSettingsP2SC+0x32c>
    4248:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    424c:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4250:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    4254:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    4258:	e2 0e       	add	r14, r18
    425a:	f3 1e       	adc	r15, r19
    425c:	97 01       	movw	r18, r14
    425e:	0f 2c       	mov	r0, r15
    4260:	00 0c       	add	r0, r0
    4262:	44 0b       	sbc	r20, r20
    4264:	55 0b       	sbc	r21, r21
    4266:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__divmodsi4>
    426a:	20 91 5e 47 	lds	r18, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    426e:	30 91 5f 47 	lds	r19, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    4272:	c9 01       	movw	r24, r18
    4274:	86 1b       	sub	r24, r22
    4276:	97 0b       	sbc	r25, r23
    4278:	18 16       	cp	r1, r24
    427a:	19 06       	cpc	r1, r25
    427c:	0c f4       	brge	.+2      	; 0x4280 <_Z33activateEventUsingCurrentSettingsP2SC+0x180>
    427e:	84 c0       	rjmp	.+264    	; 0x4388 <_Z33activateEventUsingCurrentSettingsP2SC+0x288>
    4280:	22 27       	eor	r18, r18
    4282:	33 27       	eor	r19, r19
    4284:	28 1b       	sub	r18, r24
    4286:	39 0b       	sbc	r19, r25
    4288:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    428c:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4290:	24 17       	cp	r18, r20
    4292:	35 07       	cpc	r19, r21
    4294:	ac f1       	brlt	.+106    	; 0x4300 <_Z33activateEventUsingCurrentSettingsP2SC+0x200>
    4296:	8e 0d       	add	r24, r14
    4298:	9f 1d       	adc	r25, r15
    429a:	91 95       	neg	r25
    429c:	81 95       	neg	r24
    429e:	91 09       	sbc	r25, r1
    42a0:	09 2e       	mov	r0, r25
    42a2:	00 0c       	add	r0, r0
    42a4:	aa 0b       	sbc	r26, r26
    42a6:	bb 0b       	sbc	r27, r27
    42a8:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    42ac:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    42b0:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    42b4:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    42b8:	01 15       	cp	r16, r1
    42ba:	11 05       	cpc	r17, r1
    42bc:	19 f0       	breq	.+6      	; 0x42c4 <_Z33activateEventUsingCurrentSettingsP2SC+0x1c4>
    42be:	8e ef       	ldi	r24, 0xFE	; 254
    42c0:	f8 01       	movw	r30, r16
    42c2:	80 83       	st	Z, r24
    42c4:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    42c8:	81 11       	cpse	r24, r1
    42ca:	8a c0       	rjmp	.+276    	; 0x43e0 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e0>
    42cc:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    42d0:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    42d4:	40 91 28 47 	lds	r20, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    42d8:	50 91 29 47 	lds	r21, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    42dc:	60 91 2a 47 	lds	r22, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    42e0:	70 91 2b 47 	lds	r23, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    42e4:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    42e8:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    42ec:	84 1b       	sub	r24, r20
    42ee:	95 0b       	sbc	r25, r21
    42f0:	82 1b       	sub	r24, r18
    42f2:	93 0b       	sbc	r25, r19
    42f4:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    42f8:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    42fc:	80 e0       	ldi	r24, 0x00	; 0
    42fe:	77 c0       	rjmp	.+238    	; 0x43ee <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4300:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4304:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4308:	82 0f       	add	r24, r18
    430a:	93 1f       	adc	r25, r19
    430c:	09 2e       	mov	r0, r25
    430e:	00 0c       	add	r0, r0
    4310:	aa 0b       	sbc	r26, r26
    4312:	bb 0b       	sbc	r27, r27
    4314:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    4318:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    431c:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    4320:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    4324:	01 15       	cp	r16, r1
    4326:	11 05       	cpc	r17, r1
    4328:	19 f0       	breq	.+6      	; 0x4330 <_Z33activateEventUsingCurrentSettingsP2SC+0x230>
    432a:	8d ef       	ldi	r24, 0xFD	; 253
    432c:	f8 01       	movw	r30, r16
    432e:	80 83       	st	Z, r24
    4330:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    4334:	81 11       	cpse	r24, r1
    4336:	56 c0       	rjmp	.+172    	; 0x43e4 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e4>
    4338:	80 91 5c 47 	lds	r24, 0x475C	; 0x80475c <g_time_needed_for_ID>
    433c:	90 91 5d 47 	lds	r25, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    4340:	a0 e0       	ldi	r26, 0x00	; 0
    4342:	b0 e0       	ldi	r27, 0x00	; 0
    4344:	40 91 28 47 	lds	r20, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    4348:	50 91 29 47 	lds	r21, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    434c:	60 91 2a 47 	lds	r22, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    4350:	70 91 2b 47 	lds	r23, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    4354:	84 17       	cp	r24, r20
    4356:	95 07       	cpc	r25, r21
    4358:	a6 07       	cpc	r26, r22
    435a:	b7 07       	cpc	r27, r23
    435c:	0c f0       	brlt	.+2      	; 0x4360 <_Z33activateEventUsingCurrentSettingsP2SC+0x260>
    435e:	44 c0       	rjmp	.+136    	; 0x43e8 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e8>
    4360:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    4364:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    4368:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    436c:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    4370:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    4374:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    4378:	82 1b       	sub	r24, r18
    437a:	93 0b       	sbc	r25, r19
    437c:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    4380:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	33 c0       	rjmp	.+102    	; 0x43ee <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4388:	44 27       	eor	r20, r20
    438a:	55 27       	eor	r21, r21
    438c:	48 1b       	sub	r20, r24
    438e:	59 0b       	sbc	r21, r25
    4390:	05 2e       	mov	r0, r21
    4392:	00 0c       	add	r0, r0
    4394:	66 0b       	sbc	r22, r22
    4396:	77 0b       	sbc	r23, r23
    4398:	40 93 28 47 	sts	0x4728, r20	; 0x804728 <_ZL12g_on_the_air>
    439c:	50 93 29 47 	sts	0x4729, r21	; 0x804729 <_ZL12g_on_the_air+0x1>
    43a0:	60 93 2a 47 	sts	0x472A, r22	; 0x80472a <_ZL12g_on_the_air+0x2>
    43a4:	70 93 2b 47 	sts	0x472B, r23	; 0x80472b <_ZL12g_on_the_air+0x3>
    43a8:	01 15       	cp	r16, r1
    43aa:	11 05       	cpc	r17, r1
    43ac:	19 f0       	breq	.+6      	; 0x43b4 <_Z33activateEventUsingCurrentSettingsP2SC+0x2b4>
    43ae:	2e ef       	ldi	r18, 0xFE	; 254
    43b0:	f8 01       	movw	r30, r16
    43b2:	20 83       	st	Z, r18
    43b4:	20 91 68 47 	lds	r18, 0x4768	; 0x804768 <g_event_enabled>
    43b8:	21 11       	cpse	r18, r1
    43ba:	18 c0       	rjmp	.+48     	; 0x43ec <_Z33activateEventUsingCurrentSettingsP2SC+0x2ec>
    43bc:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    43c0:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    43c4:	82 0f       	add	r24, r18
    43c6:	93 1f       	adc	r25, r19
    43c8:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    43cc:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    43d0:	82 1b       	sub	r24, r18
    43d2:	93 0b       	sbc	r25, r19
    43d4:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    43d8:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	07 c0       	rjmp	.+14     	; 0x43ee <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	05 c0       	rjmp	.+10     	; 0x43ee <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	03 c0       	rjmp	.+6      	; 0x43ee <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	01 c0       	rjmp	.+2      	; 0x43ee <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	88 23       	and	r24, r24
    43f0:	b1 f0       	breq	.+44     	; 0x441e <_Z33activateEventUsingCurrentSettingsP2SC+0x31e>
    43f2:	f8 94       	cli
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	89 83       	std	Y+1, r24	; 0x01
    43f8:	40 e0       	ldi	r20, 0x00	; 0
    43fa:	50 e0       	ldi	r21, 0x00	; 0
    43fc:	be 01       	movw	r22, r28
    43fe:	6f 5f       	subi	r22, 0xFF	; 255
    4400:	7f 4f       	sbci	r23, 0xFF	; 255
    4402:	82 e3       	ldi	r24, 0x32	; 50
    4404:	97 e4       	ldi	r25, 0x47	; 71
    4406:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
    440a:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    440e:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    4412:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4416:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    441a:	78 94       	sei
    441c:	03 c0       	rjmp	.+6      	; 0x4424 <_Z33activateEventUsingCurrentSettingsP2SC+0x324>
    441e:	80 e0       	ldi	r24, 0x00	; 0
    4420:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <_Z14keyTransmitterb>
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	80 93 69 47 	sts	0x4769, r24	; 0x804769 <g_event_commenced>
    442a:	09 c0       	rjmp	.+18     	; 0x443e <_Z33activateEventUsingCurrentSettingsP2SC+0x33e>
    442c:	01 15       	cp	r16, r1
    442e:	11 05       	cpc	r17, r1
    4430:	19 f0       	breq	.+6      	; 0x4438 <_Z33activateEventUsingCurrentSettingsP2SC+0x338>
    4432:	8f ef       	ldi	r24, 0xFF	; 255
    4434:	f8 01       	movw	r30, r16
    4436:	80 83       	st	Z, r24
    4438:	80 e0       	ldi	r24, 0x00	; 0
    443a:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <_Z14keyTransmitterb>
    443e:	10 92 6b 47 	sts	0x476B, r1	; 0x80476b <g_waiting_for_next_event>
    4442:	8a e5       	ldi	r24, 0x5A	; 90
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    444a:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    444e:	80 e0       	ldi	r24, 0x00	; 0
    4450:	0f c0       	rjmp	.+30     	; 0x4470 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4452:	8c ec       	ldi	r24, 0xCC	; 204
    4454:	0d c0       	rjmp	.+26     	; 0x4470 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4456:	8d ec       	ldi	r24, 0xCD	; 205
    4458:	0b c0       	rjmp	.+22     	; 0x4470 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    445a:	8b ec       	ldi	r24, 0xCB	; 203
    445c:	09 c0       	rjmp	.+18     	; 0x4470 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    445e:	8a ec       	ldi	r24, 0xCA	; 202
    4460:	07 c0       	rjmp	.+14     	; 0x4470 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4462:	89 ec       	ldi	r24, 0xC9	; 201
    4464:	05 c0       	rjmp	.+10     	; 0x4470 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4466:	88 ec       	ldi	r24, 0xC8	; 200
    4468:	03 c0       	rjmp	.+6      	; 0x4470 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    446a:	87 ec       	ldi	r24, 0xC7	; 199
    446c:	01 c0       	rjmp	.+2      	; 0x4470 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    446e:	80 e0       	ldi	r24, 0x00	; 0
    4470:	0f 90       	pop	r0
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	1f 91       	pop	r17
    4478:	0f 91       	pop	r16
    447a:	ff 90       	pop	r15
    447c:	ef 90       	pop	r14
    447e:	df 90       	pop	r13
    4480:	cf 90       	pop	r12
    4482:	08 95       	ret

00004484 <_Z8rtc_initv>:
    4484:	cf 93       	push	r28
    4486:	df 93       	push	r29
    4488:	88 b1       	in	r24, 0x08	; 8
    448a:	88 60       	ori	r24, 0x08	; 8
    448c:	88 b9       	out	0x08, r24	; 8
    448e:	c0 e0       	ldi	r28, 0x00	; 0
    4490:	d0 e0       	ldi	r29, 0x00	; 0
    4492:	c2 33       	cpi	r28, 0x32	; 50
    4494:	d1 05       	cpc	r29, r1
    4496:	c4 f4       	brge	.+48     	; 0x44c8 <_Z8rtc_initv+0x44>
    4498:	89 b1       	in	r24, 0x09	; 9
    449a:	87 7f       	andi	r24, 0xF7	; 247
    449c:	89 b9       	out	0x09, r24	; 9
    449e:	64 e1       	ldi	r22, 0x14	; 20
    44a0:	70 e0       	ldi	r23, 0x00	; 0
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	0e 94 f5 43 	call	0x87ea	; 0x87ea <util_delay_ms>
    44aa:	81 11       	cpse	r24, r1
    44ac:	f8 cf       	rjmp	.-16     	; 0x449e <_Z8rtc_initv+0x1a>
    44ae:	89 b1       	in	r24, 0x09	; 9
    44b0:	88 60       	ori	r24, 0x08	; 8
    44b2:	89 b9       	out	0x09, r24	; 9
    44b4:	64 e1       	ldi	r22, 0x14	; 20
    44b6:	70 e0       	ldi	r23, 0x00	; 0
    44b8:	80 e0       	ldi	r24, 0x00	; 0
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	0e 94 f5 43 	call	0x87ea	; 0x87ea <util_delay_ms>
    44c0:	81 11       	cpse	r24, r1
    44c2:	f8 cf       	rjmp	.-16     	; 0x44b4 <_Z8rtc_initv+0x30>
    44c4:	21 96       	adiw	r28, 0x01	; 1
    44c6:	e5 cf       	rjmp	.-54     	; 0x4492 <_Z8rtc_initv+0xe>
    44c8:	e3 e5       	ldi	r30, 0x53	; 83
    44ca:	f4 e0       	ldi	r31, 0x04	; 4
    44cc:	80 81       	ld	r24, Z
    44ce:	88 60       	ori	r24, 0x08	; 8
    44d0:	80 83       	st	Z, r24
    44d2:	e2 e5       	ldi	r30, 0x52	; 82
    44d4:	f4 e0       	ldi	r31, 0x04	; 4
    44d6:	80 81       	ld	r24, Z
    44d8:	88 60       	ori	r24, 0x08	; 8
    44da:	80 83       	st	Z, r24
    44dc:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <ds3231_init>
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <ds3231_1s_sqw>
    44e6:	88 23       	and	r24, r24
    44e8:	11 f0       	breq	.+4      	; 0x44ee <_Z8rtc_initv+0x6a>
    44ea:	8c ef       	ldi	r24, 0xFC	; 252
    44ec:	01 c0       	rjmp	.+2      	; 0x44f0 <_Z8rtc_initv+0x6c>
    44ee:	80 e0       	ldi	r24, 0x00	; 0
    44f0:	df 91       	pop	r29
    44f2:	cf 91       	pop	r28
    44f4:	08 95       	ret

000044f6 <_Z18antennaIsConnectedv>:
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	08 95       	ret

000044fa <_Z13startEventNow19EventActionSource_t>:
	
}


void startEventNow(EventActionSource_t activationSource)
{
    44fa:	cf 93       	push	r28
    44fc:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    44fe:	0e 94 6f 27 	call	0x4ede	; 0x4ede <_Z23clockConfigurationCheckv>

	cli();
    4502:	f8 94       	cli
	if(activationSource == POWER_UP)
    4504:	c1 11       	cpse	r28, r1
    4506:	0e c0       	rjmp	.+28     	; 0x4524 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    4508:	82 30       	cpi	r24, 0x02	; 2
    450a:	31 f4       	brne	.+12     	; 0x4518 <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    450c:	60 e0       	ldi	r22, 0x00	; 0
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4516:	3f c0       	rjmp	.+126    	; 0x4596 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4518:	63 e0       	ldi	r22, 0x03	; 3
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4522:	39 c0       	rjmp	.+114    	; 0x4596 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    4524:	c2 30       	cpi	r28, 0x02	; 2
    4526:	d1 f4       	brne	.+52     	; 0x455c <_Z13startEventNow19EventActionSource_t+0x62>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    4528:	82 30       	cpi	r24, 0x02	; 2
    452a:	31 f4       	brne	.+12     	; 0x4538 <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    452c:	61 e0       	ldi	r22, 0x01	; 1
    452e:	80 e0       	ldi	r24, 0x00	; 0
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4536:	2f c0       	rjmp	.+94     	; 0x4596 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    4538:	81 30       	cpi	r24, 0x01	; 1
    453a:	21 f0       	breq	.+8      	; 0x4544 <_Z13startEventNow19EventActionSource_t+0x4a>
    453c:	84 30       	cpi	r24, 0x04	; 4
    453e:	11 f0       	breq	.+4      	; 0x4544 <_Z13startEventNow19EventActionSource_t+0x4a>
    4540:	83 30       	cpi	r24, 0x03	; 3
    4542:	31 f4       	brne	.+12     	; 0x4550 <_Z13startEventNow19EventActionSource_t+0x56>
		{
			setupForFox(NULL, START_EVENT_NOW);
    4544:	61 e0       	ldi	r22, 0x01	; 1
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    454e:	23 c0       	rjmp	.+70     	; 0x4596 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    4550:	63 e0       	ldi	r22, 0x03	; 3
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    455a:	1d c0       	rjmp	.+58     	; 0x4596 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    455c:	82 30       	cpi	r24, 0x02	; 2
    455e:	31 f4       	brne	.+12     	; 0x456c <_Z13startEventNow19EventActionSource_t+0x72>
		{
			setupForFox(NULL, START_EVENT_NOW);
    4560:	61 e0       	ldi	r22, 0x01	; 1
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    456a:	15 c0       	rjmp	.+42     	; 0x4596 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    456c:	81 30       	cpi	r24, 0x01	; 1
    456e:	31 f4       	brne	.+12     	; 0x457c <_Z13startEventNow19EventActionSource_t+0x82>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    4570:	62 e0       	ldi	r22, 0x02	; 2
    4572:	80 e0       	ldi	r24, 0x00	; 0
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    457a:	0d c0       	rjmp	.+26     	; 0x4596 <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    457c:	84 30       	cpi	r24, 0x04	; 4
    457e:	31 f4       	brne	.+12     	; 0x458c <_Z13startEventNow19EventActionSource_t+0x92>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    4580:	63 e0       	ldi	r22, 0x03	; 3
    4582:	80 e0       	ldi	r24, 0x00	; 0
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    458a:	05 c0       	rjmp	.+10     	; 0x4596 <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    458c:	63 e0       	ldi	r22, 0x03	; 3
    458e:	80 e0       	ldi	r24, 0x00	; 0
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

// 	g_LED_enunciating = false;
	sei();
    4596:	78 94       	sei
}
    4598:	cf 91       	pop	r28
    459a:	08 95       	ret

0000459c <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    459c:	cf 93       	push	r28
    459e:	df 93       	push	r29
    45a0:	d8 2f       	mov	r29, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    45a2:	0e 94 6f 27 	call	0x4ede	; 0x4ede <_Z23clockConfigurationCheckv>
    45a6:	c8 2f       	mov	r28, r24

	cli();
    45a8:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    45aa:	d2 30       	cpi	r29, 0x02	; 2
    45ac:	31 f4       	brne	.+12     	; 0x45ba <_Z12stopEventNow19EventActionSource_t+0x1e>
	{
		setupForFox(NULL, START_NOTHING);
    45ae:	60 e0       	ldi	r22, 0x00	; 0
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    45b8:	14 c0       	rjmp	.+40     	; 0x45e2 <_Z12stopEventNow19EventActionSource_t+0x46>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    45ba:	81 30       	cpi	r24, 0x01	; 1
    45bc:	29 f4       	brne	.+10     	; 0x45c8 <_Z12stopEventNow19EventActionSource_t+0x2c>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    45be:	62 e0       	ldi	r22, 0x02	; 2
    45c0:	80 e0       	ldi	r24, 0x00	; 0
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    45c8:	c4 30       	cpi	r28, 0x04	; 4
    45ca:	31 f4       	brne	.+12     	; 0x45d8 <_Z12stopEventNow19EventActionSource_t+0x3c>
		{
			setupForFox(NULL, START_NOTHING);
    45cc:	60 e0       	ldi	r22, 0x00	; 0
    45ce:	80 e0       	ldi	r24, 0x00	; 0
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
    45d6:	05 c0       	rjmp	.+10     	; 0x45e2 <_Z12stopEventNow19EventActionSource_t+0x46>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    45d8:	60 e0       	ldi	r22, 0x00	; 0
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>

// 	if(g_sync_pin_stable == STABLE_LOW)
// 	{
// 		digitalWrite(PIN_LED, OFF); /*  LED Off */
// 	}
}
    45e2:	df 91       	pop	r29
    45e4:	cf 91       	pop	r28
    45e6:	08 95       	ret

000045e8 <_Z18startEventUsingRTCv>:

void startEventUsingRTC(void)
{
    45e8:	8f 92       	push	r8
    45ea:	9f 92       	push	r9
    45ec:	af 92       	push	r10
    45ee:	bf 92       	push	r11
    45f0:	ef 92       	push	r14
    45f2:	ff 92       	push	r15
    45f4:	0f 93       	push	r16
    45f6:	1f 93       	push	r17
	g_current_epoch = ds3231_get_epoch(null);
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    4600:	60 93 8e 47 	sts	0x478E, r22	; 0x80478e <g_current_epoch>
    4604:	70 93 8f 47 	sts	0x478F, r23	; 0x80478f <g_current_epoch+0x1>
    4608:	80 93 90 47 	sts	0x4790, r24	; 0x804790 <g_current_epoch+0x2>
    460c:	90 93 91 47 	sts	0x4791, r25	; 0x804791 <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    4610:	0e 94 6f 27 	call	0x4ede	; 0x4ede <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    4614:	82 30       	cpi	r24, 0x02	; 2
    4616:	09 f4       	brne	.+2      	; 0x461a <_Z18startEventUsingRTCv+0x32>
    4618:	54 c0       	rjmp	.+168    	; 0x46c2 <_Z18startEventUsingRTCv+0xda>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    461a:	63 e0       	ldi	r22, 0x03	; 3
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    4624:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    4628:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    462c:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    4630:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    4634:	60 91 8e 47 	lds	r22, 0x478E	; 0x80478e <g_current_epoch>
    4638:	70 91 8f 47 	lds	r23, 0x478F	; 0x80478f <g_current_epoch+0x1>
    463c:	80 91 90 47 	lds	r24, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4640:	90 91 91 47 	lds	r25, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4644:	0f 2e       	mov	r0, r31
    4646:	f7 ea       	ldi	r31, 0xA7	; 167
    4648:	ef 2e       	mov	r14, r31
    464a:	f2 e4       	ldi	r31, 0x42	; 66
    464c:	ff 2e       	mov	r15, r31
    464e:	f0 2d       	mov	r31, r0
    4650:	04 eb       	ldi	r16, 0xB4	; 180
    4652:	12 e4       	ldi	r17, 0x42	; 66
    4654:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    4658:	60 91 7d 47 	lds	r22, 0x477D	; 0x80477d <g_event_start_epoch>
    465c:	70 91 7e 47 	lds	r23, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    4660:	80 91 7f 47 	lds	r24, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    4664:	90 91 80 47 	lds	r25, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    4668:	80 90 8e 47 	lds	r8, 0x478E	; 0x80478e <g_current_epoch>
    466c:	90 90 8f 47 	lds	r9, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4670:	a0 90 90 47 	lds	r10, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4674:	b0 90 91 47 	lds	r11, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4678:	68 15       	cp	r22, r8
    467a:	79 05       	cpc	r23, r9
    467c:	8a 05       	cpc	r24, r10
    467e:	9b 05       	cpc	r25, r11
    4680:	88 f4       	brcc	.+34     	; 0x46a4 <_Z18startEventUsingRTCv+0xbc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    4682:	20 91 81 47 	lds	r18, 0x4781	; 0x804781 <g_event_finish_epoch>
    4686:	30 91 82 47 	lds	r19, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    468a:	40 91 83 47 	lds	r20, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    468e:	50 91 84 47 	lds	r21, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    4692:	e1 2c       	mov	r14, r1
    4694:	f1 2c       	mov	r15, r1
    4696:	08 ec       	ldi	r16, 0xC8	; 200
    4698:	12 e4       	ldi	r17, 0x42	; 66
    469a:	c5 01       	movw	r24, r10
    469c:	b4 01       	movw	r22, r8
    469e:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <_Z14reportTimeTillmmPKcS0_>
    46a2:	11 c0       	rjmp	.+34     	; 0x46c6 <_Z18startEventUsingRTCv+0xde>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    46a4:	20 91 81 47 	lds	r18, 0x4781	; 0x804781 <g_event_finish_epoch>
    46a8:	30 91 82 47 	lds	r19, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    46ac:	40 91 83 47 	lds	r20, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    46b0:	50 91 84 47 	lds	r21, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    46b4:	e1 2c       	mov	r14, r1
    46b6:	f1 2c       	mov	r15, r1
    46b8:	00 ec       	ldi	r16, 0xC0	; 192
    46ba:	12 e4       	ldi	r17, 0x42	; 66
    46bc:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <_Z14reportTimeTillmmPKcS0_>
    46c0:	02 c0       	rjmp	.+4      	; 0x46c6 <_Z18startEventUsingRTCv+0xde>
		}
	}
	else
	{
		reportConfigErrors();
    46c2:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <_Z18reportConfigErrorsv>
	}
}
    46c6:	1f 91       	pop	r17
    46c8:	0f 91       	pop	r16
    46ca:	ff 90       	pop	r15
    46cc:	ef 90       	pop	r14
    46ce:	bf 90       	pop	r11
    46d0:	af 90       	pop	r10
    46d2:	9f 90       	pop	r9
    46d4:	8f 90       	pop	r8
    46d6:	08 95       	ret

000046d8 <_Z11setupForFoxP5Fox_t13EventAction_t>:



void setupForFox(Fox_t* fox, EventAction_t action)
{
    46d8:	1f 93       	push	r17
    46da:	cf 93       	push	r28
    46dc:	df 93       	push	r29
    46de:	1f 92       	push	r1
    46e0:	cd b7       	in	r28, 0x3d	; 61
    46e2:	de b7       	in	r29, 0x3e	; 62
    46e4:	16 2f       	mov	r17, r22
	bool patternNotSet = true;
	
	if(fox)
    46e6:	00 97       	sbiw	r24, 0x00	; 0
    46e8:	31 f0       	breq	.+12     	; 0x46f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    46ea:	fc 01       	movw	r30, r24
    46ec:	80 81       	ld	r24, Z
    46ee:	82 31       	cpi	r24, 0x12	; 18
    46f0:	11 f0       	breq	.+4      	; 0x46f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    46f2:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		}
	}

 	g_current_epoch = ds3231_get_epoch(null);
    46f6:	80 e0       	ldi	r24, 0x00	; 0
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    46fe:	60 93 8e 47 	sts	0x478E, r22	; 0x80478e <g_current_epoch>
    4702:	70 93 8f 47 	sts	0x478F, r23	; 0x80478f <g_current_epoch+0x1>
    4706:	80 93 90 47 	sts	0x4790, r24	; 0x804790 <g_current_epoch+0x2>
    470a:	90 93 91 47 	sts	0x4791, r25	; 0x804791 <g_current_epoch+0x3>

	cli();
    470e:	f8 94       	cli
	
	g_event_commenced = false;					/* get things running immediately */
    4710:	10 92 69 47 	sts	0x4769, r1	; 0x804769 <g_event_commenced>
	g_event_enabled = false;					/* get things running immediately */
    4714:	10 92 68 47 	sts	0x4768, r1	; 0x804768 <g_event_enabled>

	switch(g_fox)
    4718:	e0 91 1b 40 	lds	r30, 0x401B	; 0x80401b <g_fox>
    471c:	8e 2f       	mov	r24, r30
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	fc 01       	movw	r30, r24
    4722:	31 97       	sbiw	r30, 0x01	; 1
    4724:	e1 31       	cpi	r30, 0x11	; 17
    4726:	f1 05       	cpc	r31, r1
    4728:	08 f0       	brcs	.+2      	; 0x472c <_Z11setupForFoxP5Fox_t13EventAction_t+0x54>
    472a:	36 c1       	rjmp	.+620    	; 0x4998 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c0>
    472c:	ec 58       	subi	r30, 0x8C	; 140
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	0c 94 95 4c 	jmp	0x992a	; 0x992a <__tablejump2__>
	{
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
    4734:	e2 e3       	ldi	r30, 0x32	; 50
    4736:	f7 e4       	ldi	r31, 0x47	; 71
    4738:	8d e4       	ldi	r24, 0x4D	; 77
    473a:	9f e4       	ldi	r25, 0x4F	; 79
    473c:	80 83       	st	Z, r24
    473e:	91 83       	std	Z+1, r25	; 0x01
    4740:	85 e4       	ldi	r24, 0x45	; 69
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	82 83       	std	Z+2, r24	; 0x02
    4746:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4748:	80 e0       	ldi	r24, 0x00	; 0
    474a:	01 c0       	rjmp	.+2      	; 0x474e <_Z11setupForFoxP5Fox_t13EventAction_t+0x76>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    474c:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_2:
		{
			if(patternNotSet)
    474e:	88 23       	and	r24, r24
    4750:	69 f0       	breq	.+26     	; 0x476c <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
    4752:	e2 e3       	ldi	r30, 0x32	; 50
    4754:	f7 e4       	ldi	r31, 0x47	; 71
    4756:	8d e4       	ldi	r24, 0x4D	; 77
    4758:	9f e4       	ldi	r25, 0x4F	; 79
    475a:	80 83       	st	Z, r24
    475c:	91 83       	std	Z+1, r25	; 0x01
    475e:	89 e4       	ldi	r24, 0x49	; 73
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	82 83       	std	Z+2, r24	; 0x02
    4764:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	01 c0       	rjmp	.+2      	; 0x476c <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    476a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_3:
		{
			if(patternNotSet)
    476c:	88 23       	and	r24, r24
    476e:	69 f0       	breq	.+26     	; 0x478a <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
    4770:	e2 e3       	ldi	r30, 0x32	; 50
    4772:	f7 e4       	ldi	r31, 0x47	; 71
    4774:	8d e4       	ldi	r24, 0x4D	; 77
    4776:	9f e4       	ldi	r25, 0x4F	; 79
    4778:	80 83       	st	Z, r24
    477a:	91 83       	std	Z+1, r25	; 0x01
    477c:	83 e5       	ldi	r24, 0x53	; 83
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	82 83       	std	Z+2, r24	; 0x02
    4782:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	01 c0       	rjmp	.+2      	; 0x478a <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4788:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_4:
		{
			if(patternNotSet)
    478a:	88 23       	and	r24, r24
    478c:	69 f0       	breq	.+26     	; 0x47a8 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
    478e:	e2 e3       	ldi	r30, 0x32	; 50
    4790:	f7 e4       	ldi	r31, 0x47	; 71
    4792:	8d e4       	ldi	r24, 0x4D	; 77
    4794:	9f e4       	ldi	r25, 0x4F	; 79
    4796:	80 83       	st	Z, r24
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	88 e4       	ldi	r24, 0x48	; 72
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	82 83       	std	Z+2, r24	; 0x02
    47a0:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    47a2:	80 e0       	ldi	r24, 0x00	; 0
    47a4:	01 c0       	rjmp	.+2      	; 0x47a8 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    47a6:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case FOX_5:
		{
			/* Set the Morse code pattern and speed */
			if(patternNotSet)
    47a8:	88 23       	and	r24, r24
    47aa:	51 f0       	breq	.+20     	; 0x47c0 <_Z11setupForFoxP5Fox_t13EventAction_t+0xe8>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO5");
    47ac:	e2 e3       	ldi	r30, 0x32	; 50
    47ae:	f7 e4       	ldi	r31, 0x47	; 71
    47b0:	8d e4       	ldi	r24, 0x4D	; 77
    47b2:	9f e4       	ldi	r25, 0x4F	; 79
    47b4:	80 83       	st	Z, r24
    47b6:	91 83       	std	Z+1, r25	; 0x01
    47b8:	85 e3       	ldi	r24, 0x35	; 53
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	82 83       	std	Z+2, r24	; 0x02
    47be:	93 83       	std	Z+3, r25	; 0x03
			}
			
			bool repeat = true;
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    47c4:	40 e0       	ldi	r20, 0x00	; 0
    47c6:	50 e0       	ldi	r21, 0x00	; 0
    47c8:	be 01       	movw	r22, r28
    47ca:	6f 5f       	subi	r22, 0xFF	; 255
    47cc:	7f 4f       	sbci	r23, 0xFF	; 255
    47ce:	82 e3       	ldi	r24, 0x32	; 50
    47d0:	97 e4       	ldi	r25, 0x47	; 71
    47d2:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    47d6:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    47da:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    47de:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    47e2:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 60;			/* wait 10 minutes send the ID */
    47e6:	8c e3       	ldi	r24, 0x3C	; 60
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    47ee:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    47f2:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    47f6:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 240;                    /* off period is very short */
    47fa:	80 ef       	ldi	r24, 0xF0	; 240
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4802:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4806:	f8 c0       	rjmp	.+496    	; 0x49f8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x320>

		case SPRINT_S1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "ME");
    4808:	e2 e3       	ldi	r30, 0x32	; 50
    480a:	f7 e4       	ldi	r31, 0x47	; 71
    480c:	8d e4       	ldi	r24, 0x4D	; 77
    480e:	95 e4       	ldi	r25, 0x45	; 69
    4810:	80 83       	st	Z, r24
    4812:	91 83       	std	Z+1, r25	; 0x01
    4814:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	01 c0       	rjmp	.+2      	; 0x481c <_Z11setupForFoxP5Fox_t13EventAction_t+0x144>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    481a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S2:
		{
			if(patternNotSet)
    481c:	88 23       	and	r24, r24
    481e:	51 f0       	breq	.+20     	; 0x4834 <_Z11setupForFoxP5Fox_t13EventAction_t+0x15c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MI");
    4820:	e2 e3       	ldi	r30, 0x32	; 50
    4822:	f7 e4       	ldi	r31, 0x47	; 71
    4824:	8d e4       	ldi	r24, 0x4D	; 77
    4826:	99 e4       	ldi	r25, 0x49	; 73
    4828:	80 83       	st	Z, r24
    482a:	91 83       	std	Z+1, r25	; 0x01
    482c:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	01 c0       	rjmp	.+2      	; 0x4834 <_Z11setupForFoxP5Fox_t13EventAction_t+0x15c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4832:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S3:
		{
			if(patternNotSet)
    4834:	88 23       	and	r24, r24
    4836:	51 f0       	breq	.+20     	; 0x484c <_Z11setupForFoxP5Fox_t13EventAction_t+0x174>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MS");
    4838:	e2 e3       	ldi	r30, 0x32	; 50
    483a:	f7 e4       	ldi	r31, 0x47	; 71
    483c:	8d e4       	ldi	r24, 0x4D	; 77
    483e:	93 e5       	ldi	r25, 0x53	; 83
    4840:	80 83       	st	Z, r24
    4842:	91 83       	std	Z+1, r25	; 0x01
    4844:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4846:	80 e0       	ldi	r24, 0x00	; 0
    4848:	01 c0       	rjmp	.+2      	; 0x484c <_Z11setupForFoxP5Fox_t13EventAction_t+0x174>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    484a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S4:
		{
			if(patternNotSet)
    484c:	88 23       	and	r24, r24
    484e:	51 f0       	breq	.+20     	; 0x4864 <_Z11setupForFoxP5Fox_t13EventAction_t+0x18c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MH");
    4850:	e2 e3       	ldi	r30, 0x32	; 50
    4852:	f7 e4       	ldi	r31, 0x47	; 71
    4854:	8d e4       	ldi	r24, 0x4D	; 77
    4856:	98 e4       	ldi	r25, 0x48	; 72
    4858:	80 83       	st	Z, r24
    485a:	91 83       	std	Z+1, r25	; 0x01
    485c:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	01 c0       	rjmp	.+2      	; 0x4864 <_Z11setupForFoxP5Fox_t13EventAction_t+0x18c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4862:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case SPRINT_S5:
		{
			{
				if(patternNotSet)
    4864:	88 23       	and	r24, r24
    4866:	39 f0       	breq	.+14     	; 0x4876 <_Z11setupForFoxP5Fox_t13EventAction_t+0x19e>
				{
					sprintf(g_messages_text[PATTERN_TEXT], "M5");
    4868:	e2 e3       	ldi	r30, 0x32	; 50
    486a:	f7 e4       	ldi	r31, 0x47	; 71
    486c:	8d e4       	ldi	r24, 0x4D	; 77
    486e:	95 e3       	ldi	r25, 0x35	; 53
    4870:	80 83       	st	Z, r24
    4872:	91 83       	std	Z+1, r25	; 0x01
    4874:	12 82       	std	Z+2, r1	; 0x02
				}
			}
			
			bool repeat = true;
    4876:	81 e0       	ldi	r24, 0x01	; 1
    4878:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    487a:	40 e0       	ldi	r20, 0x00	; 0
    487c:	50 e0       	ldi	r21, 0x00	; 0
    487e:	be 01       	movw	r22, r28
    4880:	6f 5f       	subi	r22, 0xFF	; 255
    4882:	7f 4f       	sbci	r23, 0xFF	; 255
    4884:	82 e3       	ldi	r24, 0x32	; 50
    4886:	97 e4       	ldi	r25, 0x47	; 71
    4888:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    488c:	88 e0       	ldi	r24, 0x08	; 8
    488e:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4892:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4896:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    489a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    489e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    48a2:	88 e5       	ldi	r24, 0x58	; 88
    48a4:	92 e0       	ldi	r25, 0x02	; 2
    48a6:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    48aa:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    48ae:	8c e0       	ldi	r24, 0x0C	; 12
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    48b6:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    48ba:	80 e3       	ldi	r24, 0x30	; 48
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    48c2:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    48c6:	98 c0       	rjmp	.+304    	; 0x49f8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x320>

		case SPRINT_F1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OE");
    48c8:	e2 e3       	ldi	r30, 0x32	; 50
    48ca:	f7 e4       	ldi	r31, 0x47	; 71
    48cc:	8f e4       	ldi	r24, 0x4F	; 79
    48ce:	95 e4       	ldi	r25, 0x45	; 69
    48d0:	80 83       	st	Z, r24
    48d2:	91 83       	std	Z+1, r25	; 0x01
    48d4:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    48d6:	80 e0       	ldi	r24, 0x00	; 0
    48d8:	01 c0       	rjmp	.+2      	; 0x48dc <_Z11setupForFoxP5Fox_t13EventAction_t+0x204>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    48da:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F2:
		{
			if(patternNotSet)
    48dc:	88 23       	and	r24, r24
    48de:	51 f0       	breq	.+20     	; 0x48f4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x21c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OI");
    48e0:	e2 e3       	ldi	r30, 0x32	; 50
    48e2:	f7 e4       	ldi	r31, 0x47	; 71
    48e4:	8f e4       	ldi	r24, 0x4F	; 79
    48e6:	99 e4       	ldi	r25, 0x49	; 73
    48e8:	80 83       	st	Z, r24
    48ea:	91 83       	std	Z+1, r25	; 0x01
    48ec:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    48ee:	80 e0       	ldi	r24, 0x00	; 0
    48f0:	01 c0       	rjmp	.+2      	; 0x48f4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x21c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    48f2:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F3:
		{
			if(patternNotSet)
    48f4:	88 23       	and	r24, r24
    48f6:	51 f0       	breq	.+20     	; 0x490c <_Z11setupForFoxP5Fox_t13EventAction_t+0x234>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OS");
    48f8:	e2 e3       	ldi	r30, 0x32	; 50
    48fa:	f7 e4       	ldi	r31, 0x47	; 71
    48fc:	8f e4       	ldi	r24, 0x4F	; 79
    48fe:	93 e5       	ldi	r25, 0x53	; 83
    4900:	80 83       	st	Z, r24
    4902:	91 83       	std	Z+1, r25	; 0x01
    4904:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	01 c0       	rjmp	.+2      	; 0x490c <_Z11setupForFoxP5Fox_t13EventAction_t+0x234>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    490a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F4:
		{
			if(patternNotSet)
    490c:	88 23       	and	r24, r24
    490e:	51 f0       	breq	.+20     	; 0x4924 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OH");
    4910:	e2 e3       	ldi	r30, 0x32	; 50
    4912:	f7 e4       	ldi	r31, 0x47	; 71
    4914:	8f e4       	ldi	r24, 0x4F	; 79
    4916:	98 e4       	ldi	r25, 0x48	; 72
    4918:	80 83       	st	Z, r24
    491a:	91 83       	std	Z+1, r25	; 0x01
    491c:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    491e:	80 e0       	ldi	r24, 0x00	; 0
    4920:	01 c0       	rjmp	.+2      	; 0x4924 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4922:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F5:
		{
			if(patternNotSet)
    4924:	88 23       	and	r24, r24
    4926:	39 f0       	breq	.+14     	; 0x4936 <_Z11setupForFoxP5Fox_t13EventAction_t+0x25e>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "O5");
    4928:	e2 e3       	ldi	r30, 0x32	; 50
    492a:	f7 e4       	ldi	r31, 0x47	; 71
    492c:	8f e4       	ldi	r24, 0x4F	; 79
    492e:	95 e3       	ldi	r25, 0x35	; 53
    4930:	80 83       	st	Z, r24
    4932:	91 83       	std	Z+1, r25	; 0x01
    4934:	12 82       	std	Z+2, r1	; 0x02
			}
			
			bool repeat = true;
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	be 01       	movw	r22, r28
    4940:	6f 5f       	subi	r22, 0xFF	; 255
    4942:	7f 4f       	sbci	r23, 0xFF	; 255
    4944:	82 e3       	ldi	r24, 0x32	; 50
    4946:	97 e4       	ldi	r25, 0x47	; 71
    4948:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 15;
    494c:	8f e0       	ldi	r24, 0x0F	; 15
    494e:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4952:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4956:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    495a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    495e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    4962:	88 e5       	ldi	r24, 0x58	; 88
    4964:	92 e0       	ldi	r25, 0x02	; 2
    4966:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    496a:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    496e:	8c e0       	ldi	r24, 0x0C	; 12
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4976:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    497a:	80 e3       	ldi	r24, 0x30	; 48
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4982:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4986:	38 c0       	rjmp	.+112    	; 0x49f8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x320>
#endif // SUPPORT_TEMP_AND_VOLTAGE_REPORTING


		case SPECTATOR:
		{
			sprintf(g_messages_text[PATTERN_TEXT], "S");
    4988:	83 e5       	ldi	r24, 0x53	; 83
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	80 93 32 47 	sts	0x4732, r24	; 0x804732 <g_messages_text>
    4990:	90 93 33 47 	sts	0x4733, r25	; 0x804733 <g_messages_text+0x1>
			patternNotSet = false;
    4994:	80 e0       	ldi	r24, 0x00	; 0
    4996:	01 c0       	rjmp	.+2      	; 0x499a <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c2>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4998:	81 e0       	ldi	r24, 0x01	; 1
			patternNotSet = false;
		}
		case BEACON:
		default:
		{
			if(patternNotSet)
    499a:	88 23       	and	r24, r24
    499c:	39 f0       	breq	.+14     	; 0x49ac <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d4>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO");
    499e:	e2 e3       	ldi	r30, 0x32	; 50
    49a0:	f7 e4       	ldi	r31, 0x47	; 71
    49a2:	8d e4       	ldi	r24, 0x4D	; 77
    49a4:	9f e4       	ldi	r25, 0x4F	; 79
    49a6:	80 83       	st	Z, r24
    49a8:	91 83       	std	Z+1, r25	; 0x01
    49aa:	12 82       	std	Z+2, r1	; 0x02
			}
			
			bool repeat = true;
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    49b0:	40 e0       	ldi	r20, 0x00	; 0
    49b2:	50 e0       	ldi	r21, 0x00	; 0
    49b4:	be 01       	movw	r22, r28
    49b6:	6f 5f       	subi	r22, 0xFF	; 255
    49b8:	7f 4f       	sbci	r23, 0xFF	; 255
    49ba:	82 e3       	ldi	r24, 0x32	; 50
    49bc:	97 e4       	ldi	r25, 0x47	; 71
    49be:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    49c2:	88 e0       	ldi	r24, 0x08	; 8
    49c4:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    49c8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    49cc:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    49d0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    49d4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    49d8:	88 e5       	ldi	r24, 0x58	; 88
    49da:	92 e0       	ldi	r25, 0x02	; 2
    49dc:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    49e0:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    49e4:	8c e3       	ldi	r24, 0x3C	; 60
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    49ec:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 0;						/* off period is very short */
    49f0:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    49f4:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
	}

	if(action == START_NOTHING)
    49f8:	11 11       	cpse	r17, r1
    49fa:	0a c0       	rjmp	.+20     	; 0x4a10 <_Z11setupForFoxP5Fox_t13EventAction_t+0x338>
	{
		g_event_commenced = false;                   /* get things running immediately */
    49fc:	10 92 69 47 	sts	0x4769, r1	; 0x804769 <g_event_commenced>
		g_event_enabled = false;                     /* get things running immediately */
    4a00:	10 92 68 47 	sts	0x4768, r1	; 0x804768 <g_event_enabled>

 		g_use_rtc_for_startstop = false;
    4a04:	10 92 92 47 	sts	0x4792, r1	; 0x804792 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    4a0e:	46 c0       	rjmp	.+140    	; 0x4a9c <_Z11setupForFoxP5Fox_t13EventAction_t+0x3c4>
	}
	else if(action == START_EVENT_NOW)
    4a10:	11 30       	cpi	r17, 0x01	; 1
    4a12:	51 f4       	brne	.+20     	; 0x4a28 <_Z11setupForFoxP5Fox_t13EventAction_t+0x350>
	{
// 		g_seconds_since_sync = 0;                   /* Total elapsed time since synchronization */
 		g_use_rtc_for_startstop = false;
    4a14:	10 92 92 47 	sts	0x4792, r1	; 0x804792 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = false;
    4a18:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
		g_event_commenced = true;					/* get things running immediately */
    4a1c:	81 e0       	ldi	r24, 0x01	; 1
    4a1e:	80 93 69 47 	sts	0x4769, r24	; 0x804769 <g_event_commenced>
		g_event_enabled = true;						/* get things running immediately */
    4a22:	80 93 68 47 	sts	0x4768, r24	; 0x804768 <g_event_enabled>
    4a26:	3a c0       	rjmp	.+116    	; 0x4a9c <_Z11setupForFoxP5Fox_t13EventAction_t+0x3c4>
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    4a28:	12 30       	cpi	r17, 0x02	; 2
    4a2a:	79 f5       	brne	.+94     	; 0x4a8a <_Z11setupForFoxP5Fox_t13EventAction_t+0x3b2>
	{
		bool repeat = true;
    4a2c:	11 e0       	ldi	r17, 0x01	; 1
    4a2e:	19 83       	std	Y+1, r17	; 0x01
		makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4a30:	40 e0       	ldi	r20, 0x00	; 0
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	be 01       	movw	r22, r28
    4a36:	6f 5f       	subi	r22, 0xFF	; 255
    4a38:	7f 4f       	sbci	r23, 0xFF	; 255
    4a3a:	82 e3       	ldi	r24, 0x32	; 50
    4a3c:	97 e4       	ldi	r25, 0x47	; 71
    4a3e:	0e 94 80 39 	call	0x7300	; 0x7300 <_Z9makeMorsePcPbS0_>
		g_code_throttle = throttleValue(g_pattern_codespeed);
    4a42:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4a46:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    4a4a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4a4e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

// 		g_event_start_time = 1;                     /* have it start a long time ago */
// 		g_event_finish_time = MAX_TIME;             /* run for a long long time */
		g_on_the_air = g_on_air_seconds;			/* start out transmitting */
    4a52:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    4a56:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4a5a:	09 2e       	mov	r0, r25
    4a5c:	00 0c       	add	r0, r0
    4a5e:	aa 0b       	sbc	r26, r26
    4a60:	bb 0b       	sbc	r27, r27
    4a62:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    4a66:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    4a6a:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    4a6e:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
		g_event_commenced = true;                   /* get things running immediately */
    4a72:	10 93 69 47 	sts	0x4769, r17	; 0x804769 <g_event_commenced>
		g_event_enabled = true;                     /* get things running immediately */
    4a76:	10 93 68 47 	sts	0x4768, r17	; 0x804768 <g_event_enabled>
		g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    4a7a:	8d ef       	ldi	r24, 0xFD	; 253
    4a7c:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
		
// 		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
 		g_use_rtc_for_startstop = false;
    4a80:	10 92 92 47 	sts	0x4792, r1	; 0x804792 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = false;
    4a84:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    4a88:	09 c0       	rjmp	.+18     	; 0x4a9c <_Z11setupForFoxP5Fox_t13EventAction_t+0x3c4>
	}
	else         /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		SC sc;
 //		EC ec = 
		activateEventUsingCurrentSettings(&sc);
    4a8a:	ce 01       	movw	r24, r28
    4a8c:	01 96       	adiw	r24, 0x01	; 1
    4a8e:	0e 94 80 20 	call	0x4100	; 0x4100 <_Z33activateEventUsingCurrentSettingsP2SC>
 
 		g_use_rtc_for_startstop = true;
    4a92:	81 e0       	ldi	r24, 0x01	; 1
    4a94:	80 93 92 47 	sts	0x4792, r24	; 0x804792 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    4a98:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
// 	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
// 	g_sendAMmodulation = false;
// 	g_LED_enunciating = false;
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */

	sei();
    4a9c:	78 94       	sei
}
    4a9e:	0f 90       	pop	r0
    4aa0:	df 91       	pop	r29
    4aa2:	cf 91       	pop	r28
    4aa4:	1f 91       	pop	r17
    4aa6:	08 95       	ret

00004aa8 <_Z18validateTimeStringPcPma>:

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    4aa8:	4f 92       	push	r4
    4aaa:	5f 92       	push	r5
    4aac:	6f 92       	push	r6
    4aae:	7f 92       	push	r7
    4ab0:	af 92       	push	r10
    4ab2:	bf 92       	push	r11
    4ab4:	cf 92       	push	r12
    4ab6:	df 92       	push	r13
    4ab8:	ef 92       	push	r14
    4aba:	ff 92       	push	r15
    4abc:	0f 93       	push	r16
    4abe:	1f 93       	push	r17
    4ac0:	cf 93       	push	r28
    4ac2:	df 93       	push	r29
    4ac4:	8c 01       	movw	r16, r24
    4ac6:	a4 2e       	mov	r10, r20
	time_t valid = 0;
	int len = strlen(str);
    4ac8:	fc 01       	movw	r30, r24
    4aca:	01 90       	ld	r0, Z+
    4acc:	00 20       	and	r0, r0
    4ace:	e9 f7       	brne	.-6      	; 0x4aca <_Z18validateTimeStringPcPma+0x22>
    4ad0:	31 97       	sbiw	r30, 0x01	; 1
    4ad2:	ef 01       	movw	r28, r30
    4ad4:	c8 1b       	sub	r28, r24
    4ad6:	d9 0b       	sbc	r29, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    4ad8:	27 e4       	ldi	r18, 0x47	; 71
    4ada:	6d 37       	cpi	r22, 0x7D	; 125
    4adc:	72 07       	cpc	r23, r18
    4ade:	e1 f4       	brne	.+56     	; 0x4b18 <_Z18validateTimeStringPcPma+0x70>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4ae0:	c0 90 8e 47 	lds	r12, 0x478E	; 0x80478e <g_current_epoch>
    4ae4:	d0 90 8f 47 	lds	r13, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4ae8:	e0 90 90 47 	lds	r14, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4aec:	f0 90 91 47 	lds	r15, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4af0:	c1 14       	cp	r12, r1
    4af2:	86 e6       	ldi	r24, 0x66	; 102
    4af4:	d8 06       	cpc	r13, r24
    4af6:	8e ee       	ldi	r24, 0xEE	; 238
    4af8:	e8 06       	cpc	r14, r24
    4afa:	8f e5       	ldi	r24, 0x5F	; 95
    4afc:	f8 06       	cpc	r15, r24
    4afe:	50 f5       	brcc	.+84     	; 0x4b54 <_Z18validateTimeStringPcPma+0xac>
		validationType = 1;
    4b00:	bb 24       	eor	r11, r11
    4b02:	b3 94       	inc	r11
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4b04:	0f 2e       	mov	r0, r31
    4b06:	c1 2c       	mov	r12, r1
    4b08:	f6 e6       	ldi	r31, 0x66	; 102
    4b0a:	df 2e       	mov	r13, r31
    4b0c:	fe ee       	ldi	r31, 0xEE	; 238
    4b0e:	ef 2e       	mov	r14, r31
    4b10:	ff e5       	ldi	r31, 0x5F	; 95
    4b12:	ff 2e       	mov	r15, r31
    4b14:	f0 2d       	mov	r31, r0
    4b16:	2f c0       	rjmp	.+94     	; 0x4b76 <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
    4b18:	61 58       	subi	r22, 0x81	; 129
    4b1a:	77 44       	sbci	r23, 0x47	; 71
    4b1c:	f1 f4       	brne	.+60     	; 0x4b5a <_Z18validateTimeStringPcPma+0xb2>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    4b1e:	c0 90 7d 47 	lds	r12, 0x477D	; 0x80477d <g_event_start_epoch>
    4b22:	d0 90 7e 47 	lds	r13, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    4b26:	e0 90 7f 47 	lds	r14, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    4b2a:	f0 90 80 47 	lds	r15, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    4b2e:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    4b32:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4b36:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4b3a:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4b3e:	c8 16       	cp	r12, r24
    4b40:	d9 06       	cpc	r13, r25
    4b42:	ea 06       	cpc	r14, r26
    4b44:	fb 06       	cpc	r15, r27
    4b46:	a0 f4       	brcc	.+40     	; 0x4b70 <_Z18validateTimeStringPcPma+0xc8>
    4b48:	6c 01       	movw	r12, r24
    4b4a:	7d 01       	movw	r14, r26
		validationType = 2;
    4b4c:	68 94       	set
    4b4e:	bb 24       	eor	r11, r11
    4b50:	b1 f8       	bld	r11, 1
    4b52:	11 c0       	rjmp	.+34     	; 0x4b76 <_Z18validateTimeStringPcPma+0xce>
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
    4b54:	bb 24       	eor	r11, r11
    4b56:	b3 94       	inc	r11
    4b58:	0e c0       	rjmp	.+28     	; 0x4b76 <_Z18validateTimeStringPcPma+0xce>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    4b5a:	b1 2c       	mov	r11, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    4b5c:	0f 2e       	mov	r0, r31
    4b5e:	c1 2c       	mov	r12, r1
    4b60:	f6 e6       	ldi	r31, 0x66	; 102
    4b62:	df 2e       	mov	r13, r31
    4b64:	fe ee       	ldi	r31, 0xEE	; 238
    4b66:	ef 2e       	mov	r14, r31
    4b68:	ff e5       	ldi	r31, 0x5F	; 95
    4b6a:	ff 2e       	mov	r15, r31
    4b6c:	f0 2d       	mov	r31, r0
    4b6e:	03 c0       	rjmp	.+6      	; 0x4b76 <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
    4b70:	68 94       	set
    4b72:	bb 24       	eor	r11, r11
    4b74:	b1 f8       	bld	r11, 1
	}
	
	if(len == 10)
    4b76:	ca 30       	cpi	r28, 0x0A	; 10
    4b78:	d1 05       	cpc	r29, r1
    4b7a:	39 f4       	brne	.+14     	; 0x4b8a <_Z18validateTimeStringPcPma+0xe2>
	{
		str[10] = '0';
    4b7c:	80 e3       	ldi	r24, 0x30	; 48
    4b7e:	f8 01       	movw	r30, r16
    4b80:	82 87       	std	Z+10, r24	; 0x0a
		str[11] = '0';
    4b82:	83 87       	std	Z+11, r24	; 0x0b
		str[12] = '\0';
    4b84:	14 86       	std	Z+12, r1	; 0x0c
		len = 12;
    4b86:	cc e0       	ldi	r28, 0x0C	; 12
    4b88:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if((len == 12) && (only_digits(str)))
    4b8a:	cc 30       	cpi	r28, 0x0C	; 12
    4b8c:	d1 05       	cpc	r29, r1
    4b8e:	21 f4       	brne	.+8      	; 0x4b98 <_Z18validateTimeStringPcPma+0xf0>
    4b90:	c8 01       	movw	r24, r16
    4b92:	0e 94 3b 47 	call	0x8e76	; 0x8e76 <_Z11only_digitsPc>
    4b96:	01 c0       	rjmp	.+2      	; 0x4b9a <_Z18validateTimeStringPcPma+0xf2>
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	88 23       	and	r24, r24
    4b9c:	09 f4       	brne	.+2      	; 0x4ba0 <_Z18validateTimeStringPcPma+0xf8>
    4b9e:	4b c0       	rjmp	.+150    	; 0x4c36 <_Z18validateTimeStringPcPma+0x18e>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    4ba0:	b8 01       	movw	r22, r16
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <RTC_String2Epoch>
    4baa:	2b 01       	movw	r4, r22
    4bac:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    4bae:	aa 2d       	mov	r26, r10
    4bb0:	aa 0c       	add	r10, r10
    4bb2:	bb 0b       	sbc	r27, r27
    4bb4:	20 e1       	ldi	r18, 0x10	; 16
    4bb6:	3e e0       	ldi	r19, 0x0E	; 14
    4bb8:	0e 94 ad 4c 	call	0x995a	; 0x995a <__usmulhisi3>
    4bbc:	64 0d       	add	r22, r4
    4bbe:	75 1d       	adc	r23, r5
    4bc0:	86 1d       	adc	r24, r6
    4bc2:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    4bc4:	c6 16       	cp	r12, r22
    4bc6:	d7 06       	cpc	r13, r23
    4bc8:	e8 06       	cpc	r14, r24
    4bca:	f9 06       	cpc	r15, r25
    4bcc:	08 f4       	brcc	.+2      	; 0x4bd0 <_Z18validateTimeStringPcPma+0x128>
    4bce:	40 c0       	rjmp	.+128    	; 0x4c50 <_Z18validateTimeStringPcPma+0x1a8>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    4bd0:	f1 e0       	ldi	r31, 0x01	; 1
    4bd2:	bf 12       	cpse	r11, r31
    4bd4:	08 c0       	rjmp	.+16     	; 0x4be6 <_Z18validateTimeStringPcPma+0x13e>
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
    4bd6:	8b e1       	ldi	r24, 0x1B	; 27
    4bd8:	93 e4       	ldi	r25, 0x43	; 67
    4bda:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4bde:	60 e0       	ldi	r22, 0x00	; 0
    4be0:	70 e0       	ldi	r23, 0x00	; 0
    4be2:	cb 01       	movw	r24, r22
    4be4:	35 c0       	rjmp	.+106    	; 0x4c50 <_Z18validateTimeStringPcPma+0x1a8>
		{
			if(validationType == 1)         /* start time validation */
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
			}
			else if(validationType == 2)    /* finish time validation */
    4be6:	22 e0       	ldi	r18, 0x02	; 2
    4be8:	b2 12       	cpse	r11, r18
    4bea:	1d c0       	rjmp	.+58     	; 0x4c26 <_Z18validateTimeStringPcPma+0x17e>
			{
				if(ep < g_current_epoch)
    4bec:	00 91 8e 47 	lds	r16, 0x478E	; 0x80478e <g_current_epoch>
    4bf0:	10 91 8f 47 	lds	r17, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4bf4:	20 91 90 47 	lds	r18, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4bf8:	30 91 91 47 	lds	r19, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4bfc:	60 17       	cp	r22, r16
    4bfe:	71 07       	cpc	r23, r17
    4c00:	82 07       	cpc	r24, r18
    4c02:	93 07       	cpc	r25, r19
    4c04:	40 f4       	brcc	.+16     	; 0x4c16 <_Z18validateTimeStringPcPma+0x16e>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
    4c06:	80 e3       	ldi	r24, 0x30	; 48
    4c08:	93 e4       	ldi	r25, 0x43	; 67
    4c0a:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4c0e:	60 e0       	ldi	r22, 0x00	; 0
    4c10:	70 e0       	ldi	r23, 0x00	; 0
    4c12:	cb 01       	movw	r24, r22
    4c14:	1d c0       	rjmp	.+58     	; 0x4c50 <_Z18validateTimeStringPcPma+0x1a8>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
				}
				else
				{
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
    4c16:	86 e4       	ldi	r24, 0x46	; 70
    4c18:	93 e4       	ldi	r25, 0x43	; 67
    4c1a:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4c1e:	60 e0       	ldi	r22, 0x00	; 0
    4c20:	70 e0       	ldi	r23, 0x00	; 0
    4c22:	cb 01       	movw	r24, r22
    4c24:	15 c0       	rjmp	.+42     	; 0x4c50 <_Z18validateTimeStringPcPma+0x1a8>
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
				}
			}
			else    /* current time validation */
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
    4c26:	81 e6       	ldi	r24, 0x61	; 97
    4c28:	93 e4       	ldi	r25, 0x43	; 67
    4c2a:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4c2e:	60 e0       	ldi	r22, 0x00	; 0
    4c30:	70 e0       	ldi	r23, 0x00	; 0
    4c32:	cb 01       	movw	r24, r22
    4c34:	0d c0       	rjmp	.+26     	; 0x4c50 <_Z18validateTimeStringPcPma+0x1a8>
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
			}
		}
	}
	else if(len)
    4c36:	cd 2b       	or	r28, r29
    4c38:	41 f0       	breq	.+16     	; 0x4c4a <_Z18validateTimeStringPcPma+0x1a2>
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
    4c3a:	85 e7       	ldi	r24, 0x75	; 117
    4c3c:	93 e4       	ldi	r25, 0x43	; 67
    4c3e:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4c42:	60 e0       	ldi	r22, 0x00	; 0
    4c44:	70 e0       	ldi	r23, 0x00	; 0
    4c46:	cb 01       	movw	r24, r22
    4c48:	03 c0       	rjmp	.+6      	; 0x4c50 <_Z18validateTimeStringPcPma+0x1a8>
    4c4a:	60 e0       	ldi	r22, 0x00	; 0
    4c4c:	70 e0       	ldi	r23, 0x00	; 0
    4c4e:	cb 01       	movw	r24, r22
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
	}

	return(valid);
}
    4c50:	df 91       	pop	r29
    4c52:	cf 91       	pop	r28
    4c54:	1f 91       	pop	r17
    4c56:	0f 91       	pop	r16
    4c58:	ff 90       	pop	r15
    4c5a:	ef 90       	pop	r14
    4c5c:	df 90       	pop	r13
    4c5e:	cf 90       	pop	r12
    4c60:	bf 90       	pop	r11
    4c62:	af 90       	pop	r10
    4c64:	7f 90       	pop	r7
    4c66:	6f 90       	pop	r6
    4c68:	5f 90       	pop	r5
    4c6a:	4f 90       	pop	r4
    4c6c:	08 95       	ret

00004c6e <_Z14reportTimeTillmmPKcS0_>:


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    4c6e:	2f 92       	push	r2
    4c70:	3f 92       	push	r3
    4c72:	4f 92       	push	r4
    4c74:	5f 92       	push	r5
    4c76:	6f 92       	push	r6
    4c78:	7f 92       	push	r7
    4c7a:	8f 92       	push	r8
    4c7c:	9f 92       	push	r9
    4c7e:	af 92       	push	r10
    4c80:	bf 92       	push	r11
    4c82:	cf 92       	push	r12
    4c84:	df 92       	push	r13
    4c86:	ef 92       	push	r14
    4c88:	ff 92       	push	r15
    4c8a:	0f 93       	push	r16
    4c8c:	1f 93       	push	r17
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	cd b7       	in	r28, 0x3d	; 61
    4c94:	de b7       	in	r29, 0x3e	; 62
    4c96:	2c 97       	sbiw	r28, 0x0c	; 12
    4c98:	cd bf       	out	0x3d, r28	; 61
    4c9a:	de bf       	out	0x3e, r29	; 62
    4c9c:	2b 01       	movw	r4, r22
    4c9e:	3c 01       	movw	r6, r24
    4ca0:	49 01       	movw	r8, r18
    4ca2:	5a 01       	movw	r10, r20
	bool failure = false;

	if(from >= until)   /* Negative time */
    4ca4:	62 17       	cp	r22, r18
    4ca6:	73 07       	cpc	r23, r19
    4ca8:	84 07       	cpc	r24, r20
    4caa:	95 07       	cpc	r25, r21
    4cac:	48 f0       	brcs	.+18     	; 0x4cc0 <_Z14reportTimeTillmmPKcS0_+0x52>
	{
		failure = true;
		if(failMsg)
    4cae:	e1 14       	cp	r14, r1
    4cb0:	f1 04       	cpc	r15, r1
    4cb2:	09 f4       	brne	.+2      	; 0x4cb6 <_Z14reportTimeTillmmPKcS0_+0x48>
    4cb4:	fd c0       	rjmp	.+506    	; 0x4eb0 <_Z14reportTimeTillmmPKcS0_+0x242>
		{
			sb_send_string((char*)failMsg);
    4cb6:	c7 01       	movw	r24, r14
    4cb8:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
{
	bool failure = false;

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	f9 c0       	rjmp	.+498    	; 0x4eb2 <_Z14reportTimeTillmmPKcS0_+0x244>
			sb_send_string((char*)failMsg);
		}
	}
	else
	{
		if(prefix)
    4cc0:	01 15       	cp	r16, r1
    4cc2:	11 05       	cpc	r17, r1
    4cc4:	19 f0       	breq	.+6      	; 0x4ccc <_Z14reportTimeTillmmPKcS0_+0x5e>
		{
			sb_send_string((char*)prefix);
    4cc6:	c8 01       	movw	r24, r16
    4cc8:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
		}
		time_t dif = until - from;
    4ccc:	75 01       	movw	r14, r10
    4cce:	64 01       	movw	r12, r8
    4cd0:	c4 18       	sub	r12, r4
    4cd2:	d5 08       	sbc	r13, r5
    4cd4:	e6 08       	sbc	r14, r6
    4cd6:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    4cd8:	c7 01       	movw	r24, r14
    4cda:	b6 01       	movw	r22, r12
    4cdc:	20 e8       	ldi	r18, 0x80	; 128
    4cde:	33 e3       	ldi	r19, 0x33	; 51
    4ce0:	41 ee       	ldi	r20, 0xE1	; 225
    4ce2:	51 e0       	ldi	r21, 0x01	; 1
    4ce4:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    4ce8:	29 01       	movw	r4, r18
    4cea:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    4cec:	44 27       	eor	r20, r20
    4cee:	55 27       	eor	r21, r21
    4cf0:	60 e8       	ldi	r22, 0x80	; 128
    4cf2:	73 e3       	ldi	r23, 0x33	; 51
    4cf4:	81 ee       	ldi	r24, 0xE1	; 225
    4cf6:	91 e0       	ldi	r25, 0x01	; 1
    4cf8:	0e 94 1c 4c 	call	0x9838	; 0x9838 <__mulsi3>
    4cfc:	c6 1a       	sub	r12, r22
    4cfe:	d7 0a       	sbc	r13, r23
    4d00:	e8 0a       	sbc	r14, r24
    4d02:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    4d04:	c7 01       	movw	r24, r14
    4d06:	b6 01       	movw	r22, r12
    4d08:	20 e8       	ldi	r18, 0x80	; 128
    4d0a:	31 e5       	ldi	r19, 0x51	; 81
    4d0c:	41 e0       	ldi	r20, 0x01	; 1
    4d0e:	50 e0       	ldi	r21, 0x00	; 0
    4d10:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    4d14:	49 01       	movw	r8, r18
    4d16:	5a 01       	movw	r10, r20
    4d18:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    4d1a:	44 27       	eor	r20, r20
    4d1c:	55 27       	eor	r21, r21
    4d1e:	60 e8       	ldi	r22, 0x80	; 128
    4d20:	71 e5       	ldi	r23, 0x51	; 81
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	0e 94 1c 4c 	call	0x9838	; 0x9838 <__mulsi3>
    4d2a:	c6 1a       	sub	r12, r22
    4d2c:	d7 0a       	sbc	r13, r23
    4d2e:	e8 0a       	sbc	r14, r24
    4d30:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    4d32:	c7 01       	movw	r24, r14
    4d34:	b6 01       	movw	r22, r12
    4d36:	20 e1       	ldi	r18, 0x10	; 16
    4d38:	3e e0       	ldi	r19, 0x0E	; 14
    4d3a:	40 e0       	ldi	r20, 0x00	; 0
    4d3c:	50 e0       	ldi	r21, 0x00	; 0
    4d3e:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    4d42:	29 83       	std	Y+1, r18	; 0x01
    4d44:	3a 83       	std	Y+2, r19	; 0x02
    4d46:	4b 83       	std	Y+3, r20	; 0x03
    4d48:	5c 83       	std	Y+4, r21	; 0x04
    4d4a:	29 81       	ldd	r18, Y+1	; 0x01
    4d4c:	3a 81       	ldd	r19, Y+2	; 0x02
    4d4e:	29 87       	std	Y+9, r18	; 0x09
    4d50:	3a 87       	std	Y+10, r19	; 0x0a
		hold -= (hours * HOUR);
    4d52:	29 81       	ldd	r18, Y+1	; 0x01
    4d54:	3a 81       	ldd	r19, Y+2	; 0x02
    4d56:	4b 81       	ldd	r20, Y+3	; 0x03
    4d58:	5c 81       	ldd	r21, Y+4	; 0x04
    4d5a:	44 27       	eor	r20, r20
    4d5c:	55 27       	eor	r21, r21
    4d5e:	a0 e1       	ldi	r26, 0x10	; 16
    4d60:	be e0       	ldi	r27, 0x0E	; 14
    4d62:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__muluhisi3>
    4d66:	c6 1a       	sub	r12, r22
    4d68:	d7 0a       	sbc	r13, r23
    4d6a:	e8 0a       	sbc	r14, r24
    4d6c:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    4d6e:	c7 01       	movw	r24, r14
    4d70:	b6 01       	movw	r22, r12
    4d72:	2c e3       	ldi	r18, 0x3C	; 60
    4d74:	30 e0       	ldi	r19, 0x00	; 0
    4d76:	40 e0       	ldi	r20, 0x00	; 0
    4d78:	50 e0       	ldi	r21, 0x00	; 0
    4d7a:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    4d7e:	2d 83       	std	Y+5, r18	; 0x05
    4d80:	3e 83       	std	Y+6, r19	; 0x06
    4d82:	4f 83       	std	Y+7, r20	; 0x07
    4d84:	58 87       	std	Y+8, r21	; 0x08
    4d86:	0d 81       	ldd	r16, Y+5	; 0x05
    4d88:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    4d8a:	2c e3       	ldi	r18, 0x3C	; 60
    4d8c:	20 9f       	mul	r18, r16
    4d8e:	c0 01       	movw	r24, r0
    4d90:	21 9f       	mul	r18, r17
    4d92:	90 0d       	add	r25, r0
    4d94:	11 24       	eor	r1, r1
    4d96:	a6 01       	movw	r20, r12
    4d98:	48 1b       	sub	r20, r24
    4d9a:	59 0b       	sbc	r21, r25
    4d9c:	4b 87       	std	Y+11, r20	; 0x0b
    4d9e:	5c 87       	std	Y+12, r21	; 0x0c

		g_tempStr[0] = '\0';
    4da0:	10 92 f1 46 	sts	0x46F1, r1	; 0x8046f1 <_ZL9g_tempStr>

		if(years)
    4da4:	41 14       	cp	r4, r1
    4da6:	51 04       	cpc	r5, r1
    4da8:	b1 f0       	breq	.+44     	; 0x4dd6 <_Z14reportTimeTillmmPKcS0_+0x168>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    4daa:	5f 92       	push	r5
    4dac:	4f 92       	push	r4
    4dae:	89 e8       	ldi	r24, 0x89	; 137
    4db0:	93 e4       	ldi	r25, 0x43	; 67
    4db2:	9f 93       	push	r25
    4db4:	8f 93       	push	r24
    4db6:	81 ef       	ldi	r24, 0xF1	; 241
    4db8:	96 e4       	ldi	r25, 0x46	; 70
    4dba:	9f 93       	push	r25
    4dbc:	8f 93       	push	r24
    4dbe:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
			sb_send_string(g_tempStr);
    4dc2:	81 ef       	ldi	r24, 0xF1	; 241
    4dc4:	96 e4       	ldi	r25, 0x46	; 70
    4dc6:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    4dca:	0f 90       	pop	r0
    4dcc:	0f 90       	pop	r0
    4dce:	0f 90       	pop	r0
    4dd0:	0f 90       	pop	r0
    4dd2:	0f 90       	pop	r0
    4dd4:	0f 90       	pop	r0
		}

		if(days)
    4dd6:	23 28       	or	r2, r3
    4dd8:	b1 f0       	breq	.+44     	; 0x4e06 <_Z14reportTimeTillmmPKcS0_+0x198>
		{
			sprintf(g_tempStr, "%d days ", days);
    4dda:	9f 92       	push	r9
    4ddc:	8f 92       	push	r8
    4dde:	81 e9       	ldi	r24, 0x91	; 145
    4de0:	93 e4       	ldi	r25, 0x43	; 67
    4de2:	9f 93       	push	r25
    4de4:	8f 93       	push	r24
    4de6:	81 ef       	ldi	r24, 0xF1	; 241
    4de8:	96 e4       	ldi	r25, 0x46	; 70
    4dea:	9f 93       	push	r25
    4dec:	8f 93       	push	r24
    4dee:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
			sb_send_string(g_tempStr);
    4df2:	81 ef       	ldi	r24, 0xF1	; 241
    4df4:	96 e4       	ldi	r25, 0x46	; 70
    4df6:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    4dfa:	0f 90       	pop	r0
    4dfc:	0f 90       	pop	r0
    4dfe:	0f 90       	pop	r0
    4e00:	0f 90       	pop	r0
    4e02:	0f 90       	pop	r0
    4e04:	0f 90       	pop	r0
		}

		if(hours)
    4e06:	89 85       	ldd	r24, Y+9	; 0x09
    4e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e0a:	89 2b       	or	r24, r25
    4e0c:	c1 f0       	breq	.+48     	; 0x4e3e <_Z14reportTimeTillmmPKcS0_+0x1d0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    4e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e10:	9f 93       	push	r25
    4e12:	e9 81       	ldd	r30, Y+1	; 0x01
    4e14:	ef 93       	push	r30
    4e16:	8a e9       	ldi	r24, 0x9A	; 154
    4e18:	93 e4       	ldi	r25, 0x43	; 67
    4e1a:	9f 93       	push	r25
    4e1c:	8f 93       	push	r24
    4e1e:	81 ef       	ldi	r24, 0xF1	; 241
    4e20:	96 e4       	ldi	r25, 0x46	; 70
    4e22:	9f 93       	push	r25
    4e24:	8f 93       	push	r24
    4e26:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
			sb_send_string(g_tempStr);
    4e2a:	81 ef       	ldi	r24, 0xF1	; 241
    4e2c:	96 e4       	ldi	r25, 0x46	; 70
    4e2e:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    4e32:	0f 90       	pop	r0
    4e34:	0f 90       	pop	r0
    4e36:	0f 90       	pop	r0
    4e38:	0f 90       	pop	r0
    4e3a:	0f 90       	pop	r0
    4e3c:	0f 90       	pop	r0
		}

		if(minutes)
    4e3e:	01 2b       	or	r16, r17
    4e40:	c1 f0       	breq	.+48     	; 0x4e72 <_Z14reportTimeTillmmPKcS0_+0x204>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    4e42:	fe 81       	ldd	r31, Y+6	; 0x06
    4e44:	ff 93       	push	r31
    4e46:	2d 81       	ldd	r18, Y+5	; 0x05
    4e48:	2f 93       	push	r18
    4e4a:	82 ea       	ldi	r24, 0xA2	; 162
    4e4c:	93 e4       	ldi	r25, 0x43	; 67
    4e4e:	9f 93       	push	r25
    4e50:	8f 93       	push	r24
    4e52:	81 ef       	ldi	r24, 0xF1	; 241
    4e54:	96 e4       	ldi	r25, 0x46	; 70
    4e56:	9f 93       	push	r25
    4e58:	8f 93       	push	r24
    4e5a:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
			sb_send_string(g_tempStr);
    4e5e:	81 ef       	ldi	r24, 0xF1	; 241
    4e60:	96 e4       	ldi	r25, 0x46	; 70
    4e62:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    4e66:	0f 90       	pop	r0
    4e68:	0f 90       	pop	r0
    4e6a:	0f 90       	pop	r0
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    4e72:	3c 85       	ldd	r19, Y+12	; 0x0c
    4e74:	3f 93       	push	r19
    4e76:	4b 85       	ldd	r20, Y+11	; 0x0b
    4e78:	4f 93       	push	r20
    4e7a:	8a ea       	ldi	r24, 0xAA	; 170
    4e7c:	93 e4       	ldi	r25, 0x43	; 67
    4e7e:	9f 93       	push	r25
    4e80:	8f 93       	push	r24
    4e82:	81 ef       	ldi	r24, 0xF1	; 241
    4e84:	96 e4       	ldi	r25, 0x46	; 70
    4e86:	9f 93       	push	r25
    4e88:	8f 93       	push	r24
    4e8a:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
		sb_send_string(g_tempStr);
    4e8e:	81 ef       	ldi	r24, 0xF1	; 241
    4e90:	96 e4       	ldi	r25, 0x46	; 70
    4e92:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>

		sb_send_NewLine();
    4e96:	0e 94 23 3c 	call	0x7846	; 0x7846 <sb_send_NewLine>
		g_tempStr[0] = '\0';
    4e9a:	e1 ef       	ldi	r30, 0xF1	; 241
    4e9c:	f6 e4       	ldi	r31, 0x46	; 70
    4e9e:	10 82       	st	Z, r1
    4ea0:	0f 90       	pop	r0
    4ea2:	0f 90       	pop	r0
    4ea4:	0f 90       	pop	r0
    4ea6:	0f 90       	pop	r0
    4ea8:	0f 90       	pop	r0
    4eaa:	0f 90       	pop	r0
}


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	bool failure = false;
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	01 c0       	rjmp	.+2      	; 0x4eb2 <_Z14reportTimeTillmmPKcS0_+0x244>

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4eb0:	81 e0       	ldi	r24, 0x01	; 1
		sb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    4eb2:	2c 96       	adiw	r28, 0x0c	; 12
    4eb4:	cd bf       	out	0x3d, r28	; 61
    4eb6:	de bf       	out	0x3e, r29	; 62
    4eb8:	df 91       	pop	r29
    4eba:	cf 91       	pop	r28
    4ebc:	1f 91       	pop	r17
    4ebe:	0f 91       	pop	r16
    4ec0:	ff 90       	pop	r15
    4ec2:	ef 90       	pop	r14
    4ec4:	df 90       	pop	r13
    4ec6:	cf 90       	pop	r12
    4ec8:	bf 90       	pop	r11
    4eca:	af 90       	pop	r10
    4ecc:	9f 90       	pop	r9
    4ece:	8f 90       	pop	r8
    4ed0:	7f 90       	pop	r7
    4ed2:	6f 90       	pop	r6
    4ed4:	5f 90       	pop	r5
    4ed6:	4f 90       	pop	r4
    4ed8:	3f 90       	pop	r3
    4eda:	2f 90       	pop	r2
    4edc:	08 95       	ret

00004ede <_Z23clockConfigurationCheckv>:



ConfigurationState_t clockConfigurationCheck(void)
{
    4ede:	0f 93       	push	r16
    4ee0:	1f 93       	push	r17
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
    4ee2:	80 91 81 47 	lds	r24, 0x4781	; 0x804781 <g_event_finish_epoch>
    4ee6:	90 91 82 47 	lds	r25, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    4eea:	a0 91 83 47 	lds	r26, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    4eee:	b0 91 84 47 	lds	r27, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    4ef2:	81 15       	cp	r24, r1
    4ef4:	26 e6       	ldi	r18, 0x66	; 102
    4ef6:	92 07       	cpc	r25, r18
    4ef8:	2e ee       	ldi	r18, 0xEE	; 238
    4efa:	a2 07       	cpc	r26, r18
    4efc:	2f e5       	ldi	r18, 0x5F	; 95
    4efe:	b2 07       	cpc	r27, r18
    4f00:	d8 f1       	brcs	.+118    	; 0x4f78 <_Z23clockConfigurationCheckv+0x9a>
    4f02:	40 91 7d 47 	lds	r20, 0x477D	; 0x80477d <g_event_start_epoch>
    4f06:	50 91 7e 47 	lds	r21, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    4f0a:	60 91 7f 47 	lds	r22, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    4f0e:	70 91 80 47 	lds	r23, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    4f12:	41 15       	cp	r20, r1
    4f14:	e6 e6       	ldi	r30, 0x66	; 102
    4f16:	5e 07       	cpc	r21, r30
    4f18:	ee ee       	ldi	r30, 0xEE	; 238
    4f1a:	6e 07       	cpc	r22, r30
    4f1c:	ef e5       	ldi	r30, 0x5F	; 95
    4f1e:	7e 07       	cpc	r23, r30
    4f20:	68 f1       	brcs	.+90     	; 0x4f7c <_Z23clockConfigurationCheckv+0x9e>
    4f22:	00 91 8e 47 	lds	r16, 0x478E	; 0x80478e <g_current_epoch>
    4f26:	10 91 8f 47 	lds	r17, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4f2a:	20 91 90 47 	lds	r18, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4f2e:	30 91 91 47 	lds	r19, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4f32:	01 15       	cp	r16, r1
    4f34:	e6 e6       	ldi	r30, 0x66	; 102
    4f36:	1e 07       	cpc	r17, r30
    4f38:	ee ee       	ldi	r30, 0xEE	; 238
    4f3a:	2e 07       	cpc	r18, r30
    4f3c:	ef e5       	ldi	r30, 0x5F	; 95
    4f3e:	3e 07       	cpc	r19, r30
    4f40:	f8 f0       	brcs	.+62     	; 0x4f80 <_Z23clockConfigurationCheckv+0xa2>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
    4f42:	48 17       	cp	r20, r24
    4f44:	59 07       	cpc	r21, r25
    4f46:	6a 07       	cpc	r22, r26
    4f48:	7b 07       	cpc	r23, r27
    4f4a:	e0 f4       	brcc	.+56     	; 0x4f84 <_Z23clockConfigurationCheckv+0xa6>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
    4f4c:	80 17       	cp	r24, r16
    4f4e:	91 07       	cpc	r25, r17
    4f50:	a2 07       	cpc	r26, r18
    4f52:	b3 07       	cpc	r27, r19
    4f54:	c8 f0       	brcs	.+50     	; 0x4f88 <_Z23clockConfigurationCheckv+0xaa>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_start_epoch)       /* Event should be running */
    4f56:	40 17       	cp	r20, r16
    4f58:	51 07       	cpc	r21, r17
    4f5a:	62 07       	cpc	r22, r18
    4f5c:	73 07       	cpc	r23, r19
    4f5e:	30 f4       	brcc	.+12     	; 0x4f6c <_Z23clockConfigurationCheckv+0x8e>
	{
		if(g_transmissions_disabled)
    4f60:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <g_transmissions_disabled>
    4f64:	88 23       	and	r24, r24
    4f66:	91 f0       	breq	.+36     	; 0x4f8c <_Z23clockConfigurationCheckv+0xae>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
    4f68:	83 e0       	ldi	r24, 0x03	; 3
    4f6a:	13 c0       	rjmp	.+38     	; 0x4f92 <_Z23clockConfigurationCheckv+0xb4>
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
		}
	}
	else if(!g_use_rtc_for_startstop)
    4f6c:	80 91 92 47 	lds	r24, 0x4792	; 0x804792 <g_use_rtc_for_startstop>
    4f70:	81 11       	cpse	r24, r1
    4f72:	0e c0       	rjmp	.+28     	; 0x4f90 <_Z23clockConfigurationCheckv+0xb2>
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
    4f74:	84 e0       	ldi	r24, 0x04	; 4
    4f76:	0d c0       	rjmp	.+26     	; 0x4f92 <_Z23clockConfigurationCheckv+0xb4>

ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
	{
		return(CONFIGURATION_ERROR);
    4f78:	82 e0       	ldi	r24, 0x02	; 2
    4f7a:	0b c0       	rjmp	.+22     	; 0x4f92 <_Z23clockConfigurationCheckv+0xb4>
    4f7c:	82 e0       	ldi	r24, 0x02	; 2
    4f7e:	09 c0       	rjmp	.+18     	; 0x4f92 <_Z23clockConfigurationCheckv+0xb4>
    4f80:	82 e0       	ldi	r24, 0x02	; 2
    4f82:	07 c0       	rjmp	.+14     	; 0x4f92 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
	{
		return(CONFIGURATION_ERROR);
    4f84:	82 e0       	ldi	r24, 0x02	; 2
    4f86:	05 c0       	rjmp	.+10     	; 0x4f92 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
	{
		return(CONFIGURATION_ERROR);
    4f88:	82 e0       	ldi	r24, 0x02	; 2
    4f8a:	03 c0       	rjmp	.+6      	; 0x4f92 <_Z23clockConfigurationCheckv+0xb4>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
		}
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
    4f8c:	85 e0       	ldi	r24, 0x05	; 5
    4f8e:	01 c0       	rjmp	.+2      	; 0x4f92 <_Z23clockConfigurationCheckv+0xb4>
	else if(!g_use_rtc_for_startstop)
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
	}

	return(WAITING_FOR_START);  /* Future event hasn't started yet */
    4f90:	81 e0       	ldi	r24, 0x01	; 1
}
    4f92:	1f 91       	pop	r17
    4f94:	0f 91       	pop	r16
    4f96:	08 95       	ret

00004f98 <_Z18reportConfigErrorsv>:

void reportConfigErrors(void)
{
	g_current_epoch = ds3231_get_epoch(null);
    4f98:	80 e0       	ldi	r24, 0x00	; 0
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    4fa0:	60 93 8e 47 	sts	0x478E, r22	; 0x80478e <g_current_epoch>
    4fa4:	70 93 8f 47 	sts	0x478F, r23	; 0x80478f <g_current_epoch+0x1>
    4fa8:	80 93 90 47 	sts	0x4790, r24	; 0x804790 <g_current_epoch+0x2>
    4fac:	90 93 91 47 	sts	0x4791, r25	; 0x804791 <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    4fb0:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    4fb4:	81 11       	cpse	r24, r1
    4fb6:	04 c0       	rjmp	.+8      	; 0x4fc0 <_Z18reportConfigErrorsv+0x28>
	{
		sb_send_string(TEXT_SET_ID_TXT);
    4fb8:	81 eb       	ldi	r24, 0xB1	; 177
    4fba:	93 e4       	ldi	r25, 0x43	; 67
    4fbc:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    4fc0:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    4fc4:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4fc8:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4fcc:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4fd0:	81 15       	cp	r24, r1
    4fd2:	96 46       	sbci	r25, 0x66	; 102
    4fd4:	ae 4e       	sbci	r26, 0xEE	; 238
    4fd6:	bf 45       	sbci	r27, 0x5F	; 95
    4fd8:	20 f4       	brcc	.+8      	; 0x4fe2 <_Z18reportConfigErrorsv+0x4a>
	{
		sb_send_string(TEXT_SET_TIME_TXT);
    4fda:	82 ed       	ldi	r24, 0xD2	; 210
    4fdc:	93 e4       	ldi	r25, 0x43	; 67
    4fde:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    4fe2:	40 91 81 47 	lds	r20, 0x4781	; 0x804781 <g_event_finish_epoch>
    4fe6:	50 91 82 47 	lds	r21, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    4fea:	60 91 83 47 	lds	r22, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    4fee:	70 91 84 47 	lds	r23, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    4ff2:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    4ff6:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4ffa:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4ffe:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    5002:	48 17       	cp	r20, r24
    5004:	59 07       	cpc	r21, r25
    5006:	6a 07       	cpc	r22, r26
    5008:	7b 07       	cpc	r23, r27
    500a:	b0 f4       	brcc	.+44     	; 0x5038 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    500c:	40 91 7d 47 	lds	r20, 0x477D	; 0x80477d <g_event_start_epoch>
    5010:	50 91 7e 47 	lds	r21, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    5014:	60 91 7f 47 	lds	r22, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    5018:	70 91 80 47 	lds	r23, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    501c:	48 17       	cp	r20, r24
    501e:	59 07       	cpc	r21, r25
    5020:	6a 07       	cpc	r22, r26
    5022:	7b 07       	cpc	r23, r27
    5024:	20 f4       	brcc	.+8      	; 0x502e <_Z18reportConfigErrorsv+0x96>
		{
			sb_send_string(TEXT_SET_START_TXT);
    5026:	8a ef       	ldi	r24, 0xFA	; 250
    5028:	93 e4       	ldi	r25, 0x43	; 67
    502a:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
		}

		sb_send_string(TEXT_SET_FINISH_TXT);
    502e:	80 e2       	ldi	r24, 0x20	; 32
    5030:	94 e4       	ldi	r25, 0x44	; 68
    5032:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    5036:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    5038:	40 91 7d 47 	lds	r20, 0x477D	; 0x80477d <g_event_start_epoch>
    503c:	50 91 7e 47 	lds	r21, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    5040:	60 91 7f 47 	lds	r22, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    5044:	70 91 80 47 	lds	r23, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    5048:	48 17       	cp	r20, r24
    504a:	59 07       	cpc	r21, r25
    504c:	6a 07       	cpc	r22, r26
    504e:	7b 07       	cpc	r23, r27
    5050:	70 f4       	brcc	.+28     	; 0x506e <_Z18reportConfigErrorsv+0xd6>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    5052:	41 15       	cp	r20, r1
    5054:	56 46       	sbci	r21, 0x66	; 102
    5056:	6e 4e       	sbci	r22, 0xEE	; 238
    5058:	7f 45       	sbci	r23, 0x5F	; 95
    505a:	28 f4       	brcc	.+10     	; 0x5066 <_Z18reportConfigErrorsv+0xce>
		{
			sb_send_string(TEXT_SET_START_TXT);
    505c:	8a ef       	ldi	r24, 0xFA	; 250
    505e:	93 e4       	ldi	r25, 0x43	; 67
    5060:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    5064:	08 95       	ret
		}
		else
		{
			sb_send_string((char*)"Event running...\n");
    5066:	87 e4       	ldi	r24, 0x47	; 71
    5068:	94 e4       	ldi	r25, 0x44	; 68
    506a:	0e 94 38 3c 	call	0x7870	; 0x7870 <sb_send_string>
    506e:	08 95       	ret

00005070 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
    5070:	0f 93       	push	r16
    5072:	1f 93       	push	r17
    5074:	cf 93       	push	r28
    5076:	df 93       	push	r29
    5078:	ec 01       	movw	r28, r24
    507a:	8b 01       	movw	r16, r22
    507c:	01 97       	sbiw	r24, 0x01	; 1
    507e:	39 f4       	brne	.+14     	; 0x508e <_Z41__static_initialization_and_destruction_0ii+0x1e>
    5080:	6f 3f       	cpi	r22, 0xFF	; 255
    5082:	7f 4f       	sbci	r23, 0xFF	; 255
    5084:	21 f4       	brne	.+8      	; 0x508e <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile bool g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { false, false, false, false, false };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    5086:	8c e7       	ldi	r24, 0x7C	; 124
    5088:	97 e4       	ldi	r25, 0x47	; 71
    508a:	0e 94 7e 30 	call	0x60fc	; 0x60fc <_ZN13EepromManagerC1Ev>
    508e:	cd 2b       	or	r28, r29
    5090:	39 f4       	brne	.+14     	; 0x50a0 <_Z41__static_initialization_and_destruction_0ii+0x30>
    5092:	0f 3f       	cpi	r16, 0xFF	; 255
    5094:	1f 4f       	sbci	r17, 0xFF	; 255
    5096:	21 f4       	brne	.+8      	; 0x50a0 <_Z41__static_initialization_and_destruction_0ii+0x30>
    5098:	8c e7       	ldi	r24, 0x7C	; 124
    509a:	97 e4       	ldi	r25, 0x47	; 71
    509c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    50a0:	df 91       	pop	r29
    50a2:	cf 91       	pop	r28
    50a4:	1f 91       	pop	r17
    50a6:	0f 91       	pop	r16
    50a8:	08 95       	ret

000050aa <_GLOBAL__sub_I_g_battery_type>:
    50aa:	6f ef       	ldi	r22, 0xFF	; 255
    50ac:	7f ef       	ldi	r23, 0xFF	; 255
    50ae:	81 e0       	ldi	r24, 0x01	; 1
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	0e 94 38 28 	call	0x5070	; 0x5070 <_Z41__static_initialization_and_destruction_0ii>
    50b6:	08 95       	ret

000050b8 <_GLOBAL__sub_D_g_battery_type>:
    50b8:	6f ef       	ldi	r22, 0xFF	; 255
    50ba:	7f ef       	ldi	r23, 0xFF	; 255
    50bc:	80 e0       	ldi	r24, 0x00	; 0
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	0e 94 38 28 	call	0x5070	; 0x5070 <_Z41__static_initialization_and_destruction_0ii>
    50c4:	08 95       	ret

000050c6 <_ZL9PORT_initv>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    50c6:	e0 e6       	ldi	r30, 0x60	; 96
    50c8:	f4 e0       	ldi	r31, 0x04	; 4
    50ca:	82 89       	ldd	r24, Z+18	; 0x12
    50cc:	88 7f       	andi	r24, 0xF8	; 248
    50ce:	82 8b       	std	Z+18, r24	; 0x12
    50d0:	82 89       	ldd	r24, Z+18	; 0x12
    50d2:	84 60       	ori	r24, 0x04	; 4
    50d4:	82 8b       	std	Z+18, r24	; 0x12
    50d6:	83 89       	ldd	r24, Z+19	; 0x13
    50d8:	88 7f       	andi	r24, 0xF8	; 248
    50da:	83 8b       	std	Z+19, r24	; 0x13
    50dc:	83 89       	ldd	r24, Z+19	; 0x13
    50de:	84 60       	ori	r24, 0x04	; 4
    50e0:	83 8b       	std	Z+19, r24	; 0x13
    50e2:	84 89       	ldd	r24, Z+20	; 0x14
    50e4:	88 7f       	andi	r24, 0xF8	; 248
    50e6:	84 8b       	std	Z+20, r24	; 0x14
    50e8:	84 89       	ldd	r24, Z+20	; 0x14
    50ea:	84 60       	ori	r24, 0x04	; 4
    50ec:	84 8b       	std	Z+20, r24	; 0x14
    50ee:	85 89       	ldd	r24, Z+21	; 0x15
    50f0:	88 7f       	andi	r24, 0xF8	; 248
    50f2:	85 8b       	std	Z+21, r24	; 0x15
    50f4:	85 89       	ldd	r24, Z+21	; 0x15
    50f6:	84 60       	ori	r24, 0x04	; 4
    50f8:	85 8b       	std	Z+21, r24	; 0x15
    50fa:	82 89       	ldd	r24, Z+18	; 0x12
    50fc:	87 7f       	andi	r24, 0xF7	; 247
    50fe:	82 8b       	std	Z+18, r24	; 0x12
    5100:	83 89       	ldd	r24, Z+19	; 0x13
    5102:	87 7f       	andi	r24, 0xF7	; 247
    5104:	83 8b       	std	Z+19, r24	; 0x13
    5106:	84 89       	ldd	r24, Z+20	; 0x14
    5108:	87 7f       	andi	r24, 0xF7	; 247
    510a:	84 8b       	std	Z+20, r24	; 0x14
    510c:	85 89       	ldd	r24, Z+21	; 0x15
    510e:	87 7f       	andi	r24, 0xF7	; 247
    5110:	85 8b       	std	Z+21, r24	; 0x15
    5112:	08 95       	ret

00005114 <_ZL10VREF0_initv>:
    5114:	81 e0       	ldi	r24, 0x01	; 1
    5116:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    511a:	08 95       	ret

0000511c <_ZL9ADC0_initb>:
    511c:	9a e0       	ldi	r25, 0x0A	; 10
    511e:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
    5122:	88 23       	and	r24, r24
    5124:	41 f0       	breq	.+16     	; 0x5136 <_ZL9ADC0_initb+0x1a>
    5126:	e0 e0       	ldi	r30, 0x00	; 0
    5128:	f6 e0       	ldi	r31, 0x06	; 6
    512a:	83 e0       	ldi	r24, 0x03	; 3
    512c:	80 83       	st	Z, r24
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	84 87       	std	Z+12, r24	; 0x0c
    5132:	82 87       	std	Z+10, r24	; 0x0a
    5134:	08 95       	ret
    5136:	e0 e0       	ldi	r30, 0x00	; 0
    5138:	f6 e0       	ldi	r31, 0x06	; 6
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	80 83       	st	Z, r24
    513e:	14 86       	std	Z+12, r1	; 0x0c
    5140:	08 95       	ret

00005142 <_ZL16ADC0_SYSTEM_initb>:
    5142:	cf 93       	push	r28
    5144:	c8 2f       	mov	r28, r24
    5146:	0e 94 63 28 	call	0x50c6	; 0x50c6 <_ZL9PORT_initv>
    514a:	0e 94 8a 28 	call	0x5114	; 0x5114 <_ZL10VREF0_initv>
    514e:	8c 2f       	mov	r24, r28
    5150:	0e 94 8e 28 	call	0x511c	; 0x511c <_ZL9ADC0_initb>
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	80 93 a8 47 	sts	0x47A8, r24	; 0x8047a8 <_ZL17g_adc_initialized>
    515a:	cf 91       	pop	r28
    515c:	08 95       	ret

0000515e <_ZL20ADC0_SYSTEM_shutdownv>:
    515e:	e0 e0       	ldi	r30, 0x00	; 0
    5160:	f6 e0       	ldi	r31, 0x06	; 6
    5162:	14 86       	std	Z+12, r1	; 0x0c
    5164:	10 82       	st	Z, r1
    5166:	10 92 a8 47 	sts	0x47A8, r1	; 0x8047a8 <_ZL17g_adc_initialized>
    516a:	08 95       	ret

0000516c <_Z41__static_initialization_and_destruction_0ii>:
    516c:	ef 92       	push	r14
    516e:	ff 92       	push	r15
    5170:	0f 93       	push	r16
    5172:	1f 93       	push	r17
    5174:	cf 93       	push	r28
    5176:	df 93       	push	r29
    5178:	ec 01       	movw	r28, r24
    517a:	7b 01       	movw	r14, r22
    517c:	01 97       	sbiw	r24, 0x01	; 1
    517e:	79 f4       	brne	.+30     	; 0x519e <_Z41__static_initialization_and_destruction_0ii+0x32>
    5180:	6f 3f       	cpi	r22, 0xFF	; 255
    5182:	7f 4f       	sbci	r23, 0xFF	; 255
    5184:	61 f4       	brne	.+24     	; 0x519e <_Z41__static_initialization_and_destruction_0ii+0x32>
    5186:	00 e0       	ldi	r16, 0x00	; 0
    5188:	10 e4       	ldi	r17, 0x40	; 64
    518a:	2c eb       	ldi	r18, 0xBC	; 188
    518c:	36 e4       	ldi	r19, 0x46	; 70
    518e:	40 e0       	ldi	r20, 0x00	; 0
    5190:	50 e0       	ldi	r21, 0x00	; 0
    5192:	69 e4       	ldi	r22, 0x49	; 73
    5194:	73 e4       	ldi	r23, 0x43	; 67
    5196:	87 ea       	ldi	r24, 0xA7	; 167
    5198:	97 e4       	ldi	r25, 0x47	; 71
    519a:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN8GoertzelC1Eff>
    519e:	cd 2b       	or	r28, r29
    51a0:	39 f4       	brne	.+14     	; 0x51b0 <_Z41__static_initialization_and_destruction_0ii+0x44>
    51a2:	ef 20       	and	r14, r15
    51a4:	e0 94       	com	r14
    51a6:	21 f4       	brne	.+8      	; 0x51b0 <_Z41__static_initialization_and_destruction_0ii+0x44>
    51a8:	87 ea       	ldi	r24, 0xA7	; 167
    51aa:	97 e4       	ldi	r25, 0x47	; 71
    51ac:	0e 94 1b 34 	call	0x6836	; 0x6836 <_ZN8GoertzelD1Ev>
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	1f 91       	pop	r17
    51b6:	0f 91       	pop	r16
    51b8:	ff 90       	pop	r15
    51ba:	ef 90       	pop	r14
    51bc:	08 95       	ret

000051be <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
    51be:	83 30       	cpi	r24, 0x03	; 3
    51c0:	c9 f0       	breq	.+50     	; 0x51f4 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
    51c2:	28 f4       	brcc	.+10     	; 0x51ce <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x10>
    51c4:	81 30       	cpi	r24, 0x01	; 1
    51c6:	41 f0       	breq	.+16     	; 0x51d8 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x1a>
    51c8:	82 30       	cpi	r24, 0x02	; 2
    51ca:	69 f0       	breq	.+26     	; 0x51e6 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x28>
    51cc:	28 c0       	rjmp	.+80     	; 0x521e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    51ce:	84 30       	cpi	r24, 0x04	; 4
    51d0:	c1 f0       	breq	.+48     	; 0x5202 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x44>
    51d2:	85 30       	cpi	r24, 0x05	; 5
    51d4:	e9 f0       	breq	.+58     	; 0x5210 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x52>
    51d6:	23 c0       	rjmp	.+70     	; 0x521e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	0e 94 a1 28 	call	0x5142	; 0x5142 <_ZL16ADC0_SYSTEM_initb>
    51de:	82 e0       	ldi	r24, 0x02	; 2
    51e0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    51e4:	08 95       	ret
    51e6:	80 e0       	ldi	r24, 0x00	; 0
    51e8:	0e 94 a1 28 	call	0x5142	; 0x5142 <_ZL16ADC0_SYSTEM_initb>
    51ec:	83 e0       	ldi	r24, 0x03	; 3
    51ee:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    51f2:	08 95       	ret
    51f4:	80 e0       	ldi	r24, 0x00	; 0
    51f6:	0e 94 a1 28 	call	0x5142	; 0x5142 <_ZL16ADC0_SYSTEM_initb>
    51fa:	84 e0       	ldi	r24, 0x04	; 4
    51fc:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5200:	08 95       	ret
    5202:	80 e0       	ldi	r24, 0x00	; 0
    5204:	0e 94 a1 28 	call	0x5142	; 0x5142 <_ZL16ADC0_SYSTEM_initb>
    5208:	85 e0       	ldi	r24, 0x05	; 5
    520a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    520e:	08 95       	ret
    5210:	80 e0       	ldi	r24, 0x00	; 0
    5212:	0e 94 a1 28 	call	0x5142	; 0x5142 <_ZL16ADC0_SYSTEM_initb>
    5216:	82 e4       	ldi	r24, 0x42	; 66
    5218:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    521c:	08 95       	ret
    521e:	0e 94 af 28 	call	0x515e	; 0x515e <_ZL20ADC0_SYSTEM_shutdownv>
    5222:	08 95       	ret

00005224 <_Z9ADC0_readv>:
    5224:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    5228:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    522c:	08 95       	ret

0000522e <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    522e:	1f 92       	push	r1
    5230:	0f 92       	push	r0
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	0f 92       	push	r0
    5236:	11 24       	eor	r1, r1
    5238:	0b b6       	in	r0, 0x3b	; 59
    523a:	0f 92       	push	r0
    523c:	2f 93       	push	r18
    523e:	3f 93       	push	r19
    5240:	4f 93       	push	r20
    5242:	5f 93       	push	r21
    5244:	6f 93       	push	r22
    5246:	7f 93       	push	r23
    5248:	8f 93       	push	r24
    524a:	9f 93       	push	r25
    524c:	af 93       	push	r26
    524e:	bf 93       	push	r27
    5250:	ef 93       	push	r30
    5252:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    5254:	0e 94 12 29 	call	0x5224	; 0x5224 <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    5258:	bc 01       	movw	r22, r24
    525a:	87 ea       	ldi	r24, 0xA7	; 167
    525c:	97 e4       	ldi	r25, 0x47	; 71
    525e:	0e 94 22 34 	call	0x6844	; 0x6844 <_ZN8Goertzel9DataPointEi>
    5262:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    5264:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    5268:	ff 91       	pop	r31
    526a:	ef 91       	pop	r30
    526c:	bf 91       	pop	r27
    526e:	af 91       	pop	r26
    5270:	9f 91       	pop	r25
    5272:	8f 91       	pop	r24
    5274:	7f 91       	pop	r23
    5276:	6f 91       	pop	r22
    5278:	5f 91       	pop	r21
    527a:	4f 91       	pop	r20
    527c:	3f 91       	pop	r19
    527e:	2f 91       	pop	r18
    5280:	0f 90       	pop	r0
    5282:	0b be       	out	0x3b, r0	; 59
    5284:	0f 90       	pop	r0
    5286:	0f be       	out	0x3f, r0	; 63
    5288:	0f 90       	pop	r0
    528a:	1f 90       	pop	r1
    528c:	18 95       	reti

0000528e <_GLOBAL__sub_I_g_activeADCChannel>:
    528e:	6f ef       	ldi	r22, 0xFF	; 255
    5290:	7f ef       	ldi	r23, 0xFF	; 255
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	0e 94 b6 28 	call	0x516c	; 0x516c <_Z41__static_initialization_and_destruction_0ii>
    529a:	08 95       	ret

0000529c <_GLOBAL__sub_D_g_activeADCChannel>:
    529c:	6f ef       	ldi	r22, 0xFF	; 255
    529e:	7f ef       	ldi	r23, 0xFF	; 255
    52a0:	80 e0       	ldi	r24, 0x00	; 0
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	0e 94 b6 28 	call	0x516c	; 0x516c <_Z41__static_initialization_and_destruction_0ii>
    52a8:	08 95       	ret

000052aa <_Z10fet_driverb>:
{
} //~binio

void fet_driver(bool state)
{
	if(state == ON)
    52aa:	88 23       	and	r24, r24
    52ac:	21 f0       	breq	.+8      	; 0x52b6 <_Z10fet_driverb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    52ae:	81 b1       	in	r24, 0x01	; 1
    52b0:	88 60       	ori	r24, 0x08	; 8
    52b2:	81 b9       	out	0x01, r24	; 1
    52b4:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    52b6:	81 b1       	in	r24, 0x01	; 1
    52b8:	87 7f       	andi	r24, 0xF7	; 247
    52ba:	81 b9       	out	0x01, r24	; 1
    52bc:	08 95       	ret

000052be <_Z10wifi_powerb>:
}


void wifi_power(bool state)
{
	if(state == ON)
    52be:	88 23       	and	r24, r24
    52c0:	21 f0       	breq	.+8      	; 0x52ca <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    52c2:	81 b1       	in	r24, 0x01	; 1
    52c4:	80 62       	ori	r24, 0x20	; 32
    52c6:	81 b9       	out	0x01, r24	; 1
    52c8:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    52ca:	81 b1       	in	r24, 0x01	; 1
    52cc:	8f 7d       	andi	r24, 0xDF	; 223
    52ce:	81 b9       	out	0x01, r24	; 1
    52d0:	08 95       	ret

000052d2 <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    52d2:	88 23       	and	r24, r24
    52d4:	21 f0       	breq	.+8      	; 0x52de <_Z10wifi_resetb+0xc>
    52d6:	81 b1       	in	r24, 0x01	; 1
    52d8:	8f 7b       	andi	r24, 0xBF	; 191
    52da:	81 b9       	out	0x01, r24	; 1
    52dc:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    52de:	81 b1       	in	r24, 0x01	; 1
    52e0:	80 64       	ori	r24, 0x40	; 64
    52e2:	81 b9       	out	0x01, r24	; 1
    52e4:	08 95       	ret

000052e6 <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    52e6:	2e b1       	in	r18, 0x0e	; 14
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	22 0f       	add	r18, r18
    52ec:	23 2f       	mov	r18, r19
    52ee:	22 1f       	adc	r18, r18
    52f0:	33 0b       	sbc	r19, r19
    52f2:	31 95       	neg	r19
	}
}

bool wifiPresent(void)
{
	return(!PORTD_get_pin_level(WIFI_MODULE_DETECT));
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	23 2b       	or	r18, r19
    52f8:	09 f0       	breq	.+2      	; 0x52fc <_Z11wifiPresentv+0x16>
    52fa:	80 e0       	ldi	r24, 0x00	; 0
}
    52fc:	08 95       	ret

000052fe <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    52fe:	1f 92       	push	r1
    5300:	0f 92       	push	r0
    5302:	0f b6       	in	r0, 0x3f	; 63
    5304:	0f 92       	push	r0
    5306:	11 24       	eor	r1, r1
    5308:	8f 93       	push	r24
    530a:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    530c:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    5310:	88 23       	and	r24, r24
    5312:	4c f4       	brge	.+18     	; 0x5326 <__vector_29+0x28>
	{
		count++;
    5314:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ11__vector_29E5count>
    5318:	90 91 ac 47 	lds	r25, 0x47AC	; 0x8047ac <_ZZ11__vector_29E5count+0x1>
    531c:	01 96       	adiw	r24, 0x01	; 1
    531e:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ11__vector_29E5count>
    5322:	90 93 ac 47 	sts	0x47AC, r25	; 0x8047ac <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    5326:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    532a:	84 ff       	sbrs	r24, 4
    532c:	09 c0       	rjmp	.+18     	; 0x5340 <__vector_29+0x42>
	{
		count++;
    532e:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ11__vector_29E5count>
    5332:	90 91 ac 47 	lds	r25, 0x47AC	; 0x8047ac <_ZZ11__vector_29E5count+0x1>
    5336:	01 96       	adiw	r24, 0x01	; 1
    5338:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ11__vector_29E5count>
    533c:	90 93 ac 47 	sts	0x47AC, r25	; 0x8047ac <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    5340:	8f ef       	ldi	r24, 0xFF	; 255
    5342:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    5346:	9f 91       	pop	r25
    5348:	8f 91       	pop	r24
    534a:	0f 90       	pop	r0
    534c:	0f be       	out	0x3f, r0	; 63
    534e:	0f 90       	pop	r0
    5350:	1f 90       	pop	r1
    5352:	18 95       	reti

00005354 <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    5354:	1f 92       	push	r1
    5356:	0f 92       	push	r0
    5358:	0f b6       	in	r0, 0x3f	; 63
    535a:	0f 92       	push	r0
    535c:	11 24       	eor	r1, r1
    535e:	8f 93       	push	r24
    5360:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    5362:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    5366:	82 ff       	sbrs	r24, 2
    5368:	09 c0       	rjmp	.+18     	; 0x537c <__vector_6+0x28>
	{
		count++;
    536a:	80 91 a9 47 	lds	r24, 0x47A9	; 0x8047a9 <_ZZ10__vector_6E5count>
    536e:	90 91 aa 47 	lds	r25, 0x47AA	; 0x8047aa <_ZZ10__vector_6E5count+0x1>
    5372:	01 96       	adiw	r24, 0x01	; 1
    5374:	80 93 a9 47 	sts	0x47A9, r24	; 0x8047a9 <_ZZ10__vector_6E5count>
    5378:	90 93 aa 47 	sts	0x47AA, r25	; 0x8047aa <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    537c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    5380:	84 ff       	sbrs	r24, 4
    5382:	09 c0       	rjmp	.+18     	; 0x5396 <__vector_6+0x42>
	{
		count++;
    5384:	80 91 a9 47 	lds	r24, 0x47A9	; 0x8047a9 <_ZZ10__vector_6E5count>
    5388:	90 91 aa 47 	lds	r25, 0x47AA	; 0x8047aa <_ZZ10__vector_6E5count+0x1>
    538c:	01 96       	adiw	r24, 0x01	; 1
    538e:	80 93 a9 47 	sts	0x47A9, r24	; 0x8047a9 <_ZZ10__vector_6E5count>
    5392:	90 93 aa 47 	sts	0x47AA, r25	; 0x8047aa <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    5396:	8f ef       	ldi	r24, 0xFF	; 255
    5398:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    539c:	9f 91       	pop	r25
    539e:	8f 91       	pop	r24
    53a0:	0f 90       	pop	r0
    53a2:	0f be       	out	0x3f, r0	; 63
    53a4:	0f 90       	pop	r0
    53a6:	1f 90       	pop	r1
    53a8:	18 95       	reti

000053aa <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    53aa:	80 b1       	in	r24, 0x00	; 0
    53ac:	8b 7f       	andi	r24, 0xFB	; 251
    53ae:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    53b0:	e2 e1       	ldi	r30, 0x12	; 18
    53b2:	f4 e0       	ldi	r31, 0x04	; 4
    53b4:	80 81       	ld	r24, Z
    53b6:	88 7f       	andi	r24, 0xF8	; 248
    53b8:	82 60       	ori	r24, 0x02	; 2
    53ba:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    53bc:	80 b1       	in	r24, 0x00	; 0
    53be:	88 60       	ori	r24, 0x08	; 8
    53c0:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    53c2:	81 b1       	in	r24, 0x01	; 1
    53c4:	87 7f       	andi	r24, 0xF7	; 247
    53c6:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    53c8:	80 b1       	in	r24, 0x00	; 0
    53ca:	8f 7e       	andi	r24, 0xEF	; 239
    53cc:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    53ce:	e4 e1       	ldi	r30, 0x14	; 20
    53d0:	f4 e0       	ldi	r31, 0x04	; 4
    53d2:	80 81       	ld	r24, Z
    53d4:	88 60       	ori	r24, 0x08	; 8
    53d6:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    53d8:	80 81       	ld	r24, Z
    53da:	88 7f       	andi	r24, 0xF8	; 248
    53dc:	83 60       	ori	r24, 0x03	; 3
    53de:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    53e0:	80 b1       	in	r24, 0x00	; 0
    53e2:	80 62       	ori	r24, 0x20	; 32
    53e4:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    53e6:	81 b1       	in	r24, 0x01	; 1
    53e8:	8f 7d       	andi	r24, 0xDF	; 223
    53ea:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    53ec:	80 b1       	in	r24, 0x00	; 0
    53ee:	80 64       	ori	r24, 0x40	; 64
    53f0:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    53f2:	81 b1       	in	r24, 0x01	; 1
    53f4:	8f 7b       	andi	r24, 0xBF	; 191
    53f6:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    53f8:	80 b1       	in	r24, 0x00	; 0
    53fa:	80 68       	ori	r24, 0x80	; 128
    53fc:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    53fe:	81 b1       	in	r24, 0x01	; 1
    5400:	8f 77       	andi	r24, 0x7F	; 127
    5402:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5404:	84 b1       	in	r24, 0x04	; 4
    5406:	81 60       	ori	r24, 0x01	; 1
    5408:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    540a:	85 b1       	in	r24, 0x05	; 5
    540c:	8e 7f       	andi	r24, 0xFE	; 254
    540e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5410:	84 b1       	in	r24, 0x04	; 4
    5412:	82 60       	ori	r24, 0x02	; 2
    5414:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5416:	85 b1       	in	r24, 0x05	; 5
    5418:	8d 7f       	andi	r24, 0xFD	; 253
    541a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    541c:	84 b1       	in	r24, 0x04	; 4
    541e:	80 61       	ori	r24, 0x10	; 16
    5420:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5422:	85 b1       	in	r24, 0x05	; 5
    5424:	8f 7e       	andi	r24, 0xEF	; 239
    5426:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5428:	84 b1       	in	r24, 0x04	; 4
    542a:	80 62       	ori	r24, 0x20	; 32
    542c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    542e:	85 b1       	in	r24, 0x05	; 5
    5430:	8f 7d       	andi	r24, 0xDF	; 223
    5432:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    5434:	88 b1       	in	r24, 0x08	; 8
    5436:	8f 7e       	andi	r24, 0xEF	; 239
    5438:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    543a:	88 b1       	in	r24, 0x08	; 8
    543c:	80 62       	ori	r24, 0x20	; 32
    543e:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5440:	89 b1       	in	r24, 0x09	; 9
    5442:	8f 7d       	andi	r24, 0xDF	; 223
    5444:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5446:	88 b1       	in	r24, 0x08	; 8
    5448:	80 64       	ori	r24, 0x40	; 64
    544a:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    544c:	89 b1       	in	r24, 0x09	; 9
    544e:	8f 7b       	andi	r24, 0xBF	; 191
    5450:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    5452:	88 b1       	in	r24, 0x08	; 8
    5454:	8f 77       	andi	r24, 0x7F	; 127
    5456:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5458:	e7 e5       	ldi	r30, 0x57	; 87
    545a:	f4 e0       	ldi	r31, 0x04	; 4
    545c:	80 81       	ld	r24, Z
    545e:	88 60       	ori	r24, 0x08	; 8
    5460:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5462:	80 81       	ld	r24, Z
    5464:	88 7f       	andi	r24, 0xF8	; 248
    5466:	83 60       	ori	r24, 0x03	; 3
    5468:	80 83       	st	Z, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    546a:	8c b1       	in	r24, 0x0c	; 12
    546c:	8e 7f       	andi	r24, 0xFE	; 254
    546e:	8c b9       	out	0x0c, r24	; 12
    5470:	8c b1       	in	r24, 0x0c	; 12
    5472:	8d 7f       	andi	r24, 0xFD	; 253
    5474:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5476:	a1 e7       	ldi	r26, 0x71	; 113
    5478:	b4 e0       	ldi	r27, 0x04	; 4
    547a:	8c 91       	ld	r24, X
    547c:	88 60       	ori	r24, 0x08	; 8
    547e:	8c 93       	st	X, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5480:	8c 91       	ld	r24, X
    5482:	88 7f       	andi	r24, 0xF8	; 248
    5484:	83 60       	ori	r24, 0x03	; 3
    5486:	8c 93       	st	X, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    5488:	8c b1       	in	r24, 0x0c	; 12
    548a:	8f 77       	andi	r24, 0x7F	; 127
    548c:	8c b9       	out	0x0c, r24	; 12
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    548e:	80 81       	ld	r24, Z
    5490:	87 7f       	andi	r24, 0xF7	; 247
    5492:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    5494:	e0 e9       	ldi	r30, 0x90	; 144
    5496:	f4 e0       	ldi	r31, 0x04	; 4
    5498:	80 81       	ld	r24, Z
    549a:	88 60       	ori	r24, 0x08	; 8
    549c:	80 83       	st	Z, r24
    549e:	e1 e9       	ldi	r30, 0x91	; 145
    54a0:	f4 e0       	ldi	r31, 0x04	; 4
    54a2:	80 81       	ld	r24, Z
    54a4:	88 60       	ori	r24, 0x08	; 8
    54a6:	80 83       	st	Z, r24
    54a8:	e2 e9       	ldi	r30, 0x92	; 146
    54aa:	f4 e0       	ldi	r31, 0x04	; 4
    54ac:	80 81       	ld	r24, Z
    54ae:	88 60       	ori	r24, 0x08	; 8
    54b0:	80 83       	st	Z, r24
    54b2:	e3 e9       	ldi	r30, 0x93	; 147
    54b4:	f4 e0       	ldi	r31, 0x04	; 4
    54b6:	80 81       	ld	r24, Z
    54b8:	88 60       	ori	r24, 0x08	; 8
    54ba:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    54bc:	e2 eb       	ldi	r30, 0xB2	; 178
    54be:	f4 e0       	ldi	r31, 0x04	; 4
    54c0:	80 81       	ld	r24, Z
    54c2:	88 60       	ori	r24, 0x08	; 8
    54c4:	80 83       	st	Z, r24
    54c6:	e3 eb       	ldi	r30, 0xB3	; 179
    54c8:	f4 e0       	ldi	r31, 0x04	; 4
    54ca:	80 81       	ld	r24, Z
    54cc:	88 60       	ori	r24, 0x08	; 8
    54ce:	80 83       	st	Z, r24
    54d0:	e4 eb       	ldi	r30, 0xB4	; 180
    54d2:	f4 e0       	ldi	r31, 0x04	; 4
    54d4:	80 81       	ld	r24, Z
    54d6:	88 60       	ori	r24, 0x08	; 8
    54d8:	80 83       	st	Z, r24
    54da:	e5 eb       	ldi	r30, 0xB5	; 181
    54dc:	f4 e0       	ldi	r31, 0x04	; 4
    54de:	80 81       	ld	r24, Z
    54e0:	88 60       	ori	r24, 0x08	; 8
    54e2:	80 83       	st	Z, r24
    54e4:	08 95       	ret

000054e6 <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    54e6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    54ea:	80 e0       	ldi	r24, 0x00	; 0
    54ec:	08 95       	ret

000054ee <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    54ee:	44 e2       	ldi	r20, 0x24	; 36
    54f0:	68 ed       	ldi	r22, 0xD8	; 216
    54f2:	88 e6       	ldi	r24, 0x68	; 104
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	0e 94 a5 3a 	call	0x754a	; 0x754a <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    54fa:	80 e0       	ldi	r24, 0x00	; 0
    54fc:	08 95       	ret

000054fe <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    54fe:	78 94       	sei

	return 0;
}
    5500:	80 e0       	ldi	r24, 0x00	; 0
    5502:	08 95       	ret

00005504 <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    5504:	83 e0       	ldi	r24, 0x03	; 3
    5506:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
    550a:	6a e0       	ldi	r22, 0x0A	; 10
    550c:	70 e0       	ldi	r23, 0x00	; 0
    550e:	80 e0       	ldi	r24, 0x00	; 0
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	0e 94 f5 43 	call	0x87ea	; 0x87ea <util_delay_ms>
    5516:	81 11       	cpse	r24, r1
    5518:	f8 cf       	rjmp	.-16     	; 0x550a <_ZL9VREF_initv+0x6>
}
    551a:	08 95       	ret

0000551c <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    551c:	28 2f       	mov	r18, r24
    551e:	22 95       	swap	r18
    5520:	22 0f       	add	r18, r18
    5522:	22 0f       	add	r18, r18
    5524:	20 7c       	andi	r18, 0xC0	; 192
    5526:	e0 ea       	ldi	r30, 0xA0	; 160
    5528:	f6 e0       	ldi	r31, 0x06	; 6
    552a:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    552c:	96 95       	lsr	r25
    552e:	87 95       	ror	r24
    5530:	96 95       	lsr	r25
    5532:	87 95       	ror	r24
    5534:	83 83       	std	Z+3, r24	; 0x03
    5536:	08 95       	ret

00005538 <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    5538:	0e 94 82 2a 	call	0x5504	; 0x5504 <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    553c:	e0 e6       	ldi	r30, 0x60	; 96
    553e:	f4 e0       	ldi	r31, 0x04	; 4
    5540:	86 89       	ldd	r24, Z+22	; 0x16
    5542:	88 7f       	andi	r24, 0xF8	; 248
    5544:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5546:	86 89       	ldd	r24, Z+22	; 0x16
    5548:	84 60       	ori	r24, 0x04	; 4
    554a:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    554c:	86 89       	ldd	r24, Z+22	; 0x16
    554e:	87 7f       	andi	r24, 0xF7	; 247
    5550:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    5552:	81 ec       	ldi	r24, 0xC1	; 193
    5554:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    5558:	80 e0       	ldi	r24, 0x00	; 0
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	0e 94 8e 2a 	call	0x551c	; 0x551c <_Z11DAC0_setValj>
    5560:	08 95       	ret

00005562 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    5562:	80 e0       	ldi	r24, 0x00	; 0
    5564:	88 30       	cpi	r24, 0x08	; 8
    5566:	48 f4       	brcc	.+18     	; 0x557a <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5568:	e8 2f       	mov	r30, r24
    556a:	f0 e0       	ldi	r31, 0x00	; 0
    556c:	e0 5f       	subi	r30, 0xF0	; 240
    556e:	fb 4f       	sbci	r31, 0xFB	; 251
    5570:	90 81       	ld	r25, Z
    5572:	98 60       	ori	r25, 0x08	; 8
    5574:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    5576:	8f 5f       	subi	r24, 0xFF	; 255
    5578:	f5 cf       	rjmp	.-22     	; 0x5564 <mcu_init+0x2>
    557a:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    557c:	88 30       	cpi	r24, 0x08	; 8
    557e:	48 f4       	brcc	.+18     	; 0x5592 <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5580:	e8 2f       	mov	r30, r24
    5582:	f0 e0       	ldi	r31, 0x00	; 0
    5584:	e0 5d       	subi	r30, 0xD0	; 208
    5586:	fb 4f       	sbci	r31, 0xFB	; 251
    5588:	90 81       	ld	r25, Z
    558a:	98 60       	ori	r25, 0x08	; 8
    558c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    558e:	8f 5f       	subi	r24, 0xFF	; 255
    5590:	f5 cf       	rjmp	.-22     	; 0x557c <mcu_init+0x1a>
    5592:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5594:	88 30       	cpi	r24, 0x08	; 8
    5596:	48 f4       	brcc	.+18     	; 0x55aa <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5598:	e8 2f       	mov	r30, r24
    559a:	f0 e0       	ldi	r31, 0x00	; 0
    559c:	e0 5b       	subi	r30, 0xB0	; 176
    559e:	fb 4f       	sbci	r31, 0xFB	; 251
    55a0:	90 81       	ld	r25, Z
    55a2:	98 60       	ori	r25, 0x08	; 8
    55a4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    55a6:	8f 5f       	subi	r24, 0xFF	; 255
    55a8:	f5 cf       	rjmp	.-22     	; 0x5594 <mcu_init+0x32>
    55aa:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    55ac:	88 30       	cpi	r24, 0x08	; 8
    55ae:	48 f4       	brcc	.+18     	; 0x55c2 <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    55b0:	e8 2f       	mov	r30, r24
    55b2:	f0 e0       	ldi	r31, 0x00	; 0
    55b4:	e0 59       	subi	r30, 0x90	; 144
    55b6:	fb 4f       	sbci	r31, 0xFB	; 251
    55b8:	90 81       	ld	r25, Z
    55ba:	98 60       	ori	r25, 0x08	; 8
    55bc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    55be:	8f 5f       	subi	r24, 0xFF	; 255
    55c0:	f5 cf       	rjmp	.-22     	; 0x55ac <mcu_init+0x4a>
    55c2:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    55c4:	88 30       	cpi	r24, 0x08	; 8
    55c6:	48 f4       	brcc	.+18     	; 0x55da <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    55c8:	e8 2f       	mov	r30, r24
    55ca:	f0 e0       	ldi	r31, 0x00	; 0
    55cc:	e0 57       	subi	r30, 0x70	; 112
    55ce:	fb 4f       	sbci	r31, 0xFB	; 251
    55d0:	90 81       	ld	r25, Z
    55d2:	98 60       	ori	r25, 0x08	; 8
    55d4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    55d6:	8f 5f       	subi	r24, 0xFF	; 255
    55d8:	f5 cf       	rjmp	.-22     	; 0x55c4 <mcu_init+0x62>
    55da:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    55dc:	88 30       	cpi	r24, 0x08	; 8
    55de:	48 f4       	brcc	.+18     	; 0x55f2 <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    55e0:	e8 2f       	mov	r30, r24
    55e2:	f0 e0       	ldi	r31, 0x00	; 0
    55e4:	e0 55       	subi	r30, 0x50	; 80
    55e6:	fb 4f       	sbci	r31, 0xFB	; 251
    55e8:	90 81       	ld	r25, Z
    55ea:	98 60       	ori	r25, 0x08	; 8
    55ec:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    55ee:	8f 5f       	subi	r24, 0xFF	; 255
    55f0:	f5 cf       	rjmp	.-22     	; 0x55dc <mcu_init+0x7a>
    55f2:	08 95       	ret

000055f4 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    55f4:	0e 94 b1 2a 	call	0x5562	; 0x5562 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    55f8:	0e 94 77 2a 	call	0x54ee	; 0x54ee <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
    55fc:	0e 94 d8 43 	call	0x87b0	; 0x87b0 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    5600:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <CPUINT_init>
	BINIO_init();
    5604:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5608:	88 b1       	in	r24, 0x08	; 8
    560a:	80 64       	ori	r24, 0x40	; 64
    560c:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    560e:	89 b1       	in	r24, 0x09	; 9
    5610:	80 64       	ori	r24, 0x40	; 64
    5612:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    5614:	0e 94 d6 43 	call	0x87ac	; 0x87ac <SLPCTRL_init>
	
	DAC0_init();
    5618:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_Z9DAC0_initv>

	linkbus_init(LB_BAUD, LINKBUS_USART);
    561c:	44 e0       	ldi	r20, 0x04	; 4
    561e:	60 e8       	ldi	r22, 0x80	; 128
    5620:	75 e2       	ldi	r23, 0x25	; 37
    5622:	80 e0       	ldi	r24, 0x00	; 0
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <_Z12linkbus_initm14USART_Number_t>
	serialbus_init(SB_BAUD, SERIALBUS_USART);
    562a:	41 e0       	ldi	r20, 0x01	; 1
    562c:	60 e8       	ldi	r22, 0x80	; 128
    562e:	75 e2       	ldi	r23, 0x25	; 37
    5630:	80 e0       	ldi	r24, 0x00	; 0
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	0e 94 ab 3b 	call	0x7756	; 0x7756 <serialbus_init>

	BOD_init();
    5638:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <BOD_init>
    563c:	08 95       	ret

0000563e <_Z7bcd2dech>:
				*val = second + 10 * second10 + 60 * (int32_t)minute + 600 * (int32_t)minute10 +  3600 * (int32_t)hour + 36000 * (int32_t)hour10;
			}
		}
		
		return(failure);
	}
    563e:	28 2f       	mov	r18, r24
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	35 95       	asr	r19
    5644:	27 95       	ror	r18
    5646:	35 95       	asr	r19
    5648:	27 95       	ror	r18
    564a:	35 95       	asr	r19
    564c:	27 95       	ror	r18
    564e:	35 95       	asr	r19
    5650:	27 95       	ror	r18
    5652:	22 0f       	add	r18, r18
    5654:	92 2f       	mov	r25, r18
    5656:	99 0f       	add	r25, r25
    5658:	99 0f       	add	r25, r25
    565a:	29 0f       	add	r18, r25
    565c:	8f 70       	andi	r24, 0x0F	; 15
    565e:	82 0f       	add	r24, r18
    5660:	08 95       	ret

00005662 <_Z7dec2bcdh>:
    5662:	2d ec       	ldi	r18, 0xCD	; 205
    5664:	82 9f       	mul	r24, r18
    5666:	21 2d       	mov	r18, r1
    5668:	11 24       	eor	r1, r1
    566a:	92 2f       	mov	r25, r18
    566c:	96 95       	lsr	r25
    566e:	96 95       	lsr	r25
    5670:	96 95       	lsr	r25
    5672:	99 0f       	add	r25, r25
    5674:	39 2f       	mov	r19, r25
    5676:	33 0f       	add	r19, r19
    5678:	33 0f       	add	r19, r19
    567a:	93 0f       	add	r25, r19
    567c:	89 1b       	sub	r24, r25
    567e:	98 2f       	mov	r25, r24
    5680:	26 95       	lsr	r18
    5682:	26 95       	lsr	r18
    5684:	26 95       	lsr	r18
    5686:	80 e1       	ldi	r24, 0x10	; 16
    5688:	28 9f       	mul	r18, r24
    568a:	90 01       	movw	r18, r0
    568c:	11 24       	eor	r1, r1
    568e:	89 2f       	mov	r24, r25
    5690:	82 2b       	or	r24, r18
    5692:	08 95       	ret

00005694 <_Z8char2bcdPc>:
    5694:	fc 01       	movw	r30, r24
    5696:	20 81       	ld	r18, Z
    5698:	81 81       	ldd	r24, Z+1	; 0x01
    569a:	f0 e1       	ldi	r31, 0x10	; 16
    569c:	2f 9f       	mul	r18, r31
    569e:	80 0d       	add	r24, r0
    56a0:	11 24       	eor	r1, r1
    56a2:	80 53       	subi	r24, 0x30	; 48
    56a4:	08 95       	ret

000056a6 <_Z14epoch_from_ltmP2tm>:
    56a6:	cf 92       	push	r12
    56a8:	df 92       	push	r13
    56aa:	ef 92       	push	r14
    56ac:	ff 92       	push	r15
    56ae:	fc 01       	movw	r30, r24
    56b0:	80 81       	ld	r24, Z
    56b2:	21 81       	ldd	r18, Z+1	; 0x01
    56b4:	08 2e       	mov	r0, r24
    56b6:	00 0c       	add	r0, r0
    56b8:	99 0b       	sbc	r25, r25
    56ba:	ac 01       	movw	r20, r24
    56bc:	3c e3       	ldi	r19, 0x3C	; 60
    56be:	23 02       	muls	r18, r19
    56c0:	40 0d       	add	r20, r0
    56c2:	51 1d       	adc	r21, r1
    56c4:	11 24       	eor	r1, r1
    56c6:	a2 81       	ldd	r26, Z+2	; 0x02
    56c8:	0a 2e       	mov	r0, r26
    56ca:	00 0c       	add	r0, r0
    56cc:	bb 0b       	sbc	r27, r27
    56ce:	20 e1       	ldi	r18, 0x10	; 16
    56d0:	3e e0       	ldi	r19, 0x0E	; 14
    56d2:	0e 94 ad 4c 	call	0x995a	; 0x995a <__usmulhisi3>
    56d6:	6a 01       	movw	r12, r20
    56d8:	55 0f       	add	r21, r21
    56da:	ee 08       	sbc	r14, r14
    56dc:	ff 08       	sbc	r15, r15
    56de:	c6 0e       	add	r12, r22
    56e0:	d7 1e       	adc	r13, r23
    56e2:	e8 1e       	adc	r14, r24
    56e4:	f9 1e       	adc	r15, r25
    56e6:	a0 85       	ldd	r26, Z+8	; 0x08
    56e8:	b1 85       	ldd	r27, Z+9	; 0x09
    56ea:	20 e8       	ldi	r18, 0x80	; 128
    56ec:	31 e5       	ldi	r19, 0x51	; 81
    56ee:	41 e0       	ldi	r20, 0x01	; 1
    56f0:	50 e0       	ldi	r21, 0x00	; 0
    56f2:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    56f6:	c6 0e       	add	r12, r22
    56f8:	d7 1e       	adc	r13, r23
    56fa:	e8 1e       	adc	r14, r24
    56fc:	f9 1e       	adc	r15, r25
    56fe:	06 80       	ldd	r0, Z+6	; 0x06
    5700:	f7 81       	ldd	r31, Z+7	; 0x07
    5702:	e0 2d       	mov	r30, r0
    5704:	df 01       	movw	r26, r30
    5706:	a6 54       	subi	r26, 0x46	; 70
    5708:	b1 09       	sbc	r27, r1
    570a:	20 e8       	ldi	r18, 0x80	; 128
    570c:	33 e3       	ldi	r19, 0x33	; 51
    570e:	41 ee       	ldi	r20, 0xE1	; 225
    5710:	51 e0       	ldi	r21, 0x01	; 1
    5712:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    5716:	c6 0e       	add	r12, r22
    5718:	d7 1e       	adc	r13, r23
    571a:	e8 1e       	adc	r14, r24
    571c:	f9 1e       	adc	r15, r25
    571e:	cf 01       	movw	r24, r30
    5720:	85 54       	subi	r24, 0x45	; 69
    5722:	91 09       	sbc	r25, r1
    5724:	dc 01       	movw	r26, r24
    5726:	0a f4       	brpl	.+2      	; 0x572a <_Z14epoch_from_ltmP2tm+0x84>
    5728:	13 96       	adiw	r26, 0x03	; 3
    572a:	b5 95       	asr	r27
    572c:	a7 95       	ror	r26
    572e:	b5 95       	asr	r27
    5730:	a7 95       	ror	r26
    5732:	20 e8       	ldi	r18, 0x80	; 128
    5734:	31 e5       	ldi	r19, 0x51	; 81
    5736:	41 e0       	ldi	r20, 0x01	; 1
    5738:	50 e0       	ldi	r21, 0x00	; 0
    573a:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    573e:	c6 0e       	add	r12, r22
    5740:	d7 1e       	adc	r13, r23
    5742:	e8 1e       	adc	r14, r24
    5744:	f9 1e       	adc	r15, r25
    5746:	cf 01       	movw	r24, r30
    5748:	01 97       	sbiw	r24, 0x01	; 1
    574a:	64 e6       	ldi	r22, 0x64	; 100
    574c:	70 e0       	ldi	r23, 0x00	; 0
    574e:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
    5752:	db 01       	movw	r26, r22
    5754:	20 e8       	ldi	r18, 0x80	; 128
    5756:	3e ea       	ldi	r19, 0xAE	; 174
    5758:	4e ef       	ldi	r20, 0xFE	; 254
    575a:	5f ef       	ldi	r21, 0xFF	; 255
    575c:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    5760:	c6 0e       	add	r12, r22
    5762:	d7 1e       	adc	r13, r23
    5764:	e8 1e       	adc	r14, r24
    5766:	f9 1e       	adc	r15, r25
    5768:	cf 01       	movw	r24, r30
    576a:	85 5d       	subi	r24, 0xD5	; 213
    576c:	9e 4f       	sbci	r25, 0xFE	; 254
    576e:	60 e9       	ldi	r22, 0x90	; 144
    5770:	71 e0       	ldi	r23, 0x01	; 1
    5772:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
    5776:	db 01       	movw	r26, r22
    5778:	20 e8       	ldi	r18, 0x80	; 128
    577a:	31 e5       	ldi	r19, 0x51	; 81
    577c:	41 e0       	ldi	r20, 0x01	; 1
    577e:	50 e0       	ldi	r21, 0x00	; 0
    5780:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    5784:	6c 0d       	add	r22, r12
    5786:	7d 1d       	adc	r23, r13
    5788:	8e 1d       	adc	r24, r14
    578a:	9f 1d       	adc	r25, r15
    578c:	ff 90       	pop	r15
    578e:	ef 90       	pop	r14
    5790:	df 90       	pop	r13
    5792:	cf 90       	pop	r12
    5794:	08 95       	ret

00005796 <ds3231_get_epoch>:
    5796:	4f 92       	push	r4
    5798:	5f 92       	push	r5
    579a:	6f 92       	push	r6
    579c:	7f 92       	push	r7
    579e:	8f 92       	push	r8
    57a0:	9f 92       	push	r9
    57a2:	af 92       	push	r10
    57a4:	bf 92       	push	r11
    57a6:	cf 92       	push	r12
    57a8:	df 92       	push	r13
    57aa:	ef 92       	push	r14
    57ac:	ff 92       	push	r15
    57ae:	0f 93       	push	r16
    57b0:	1f 93       	push	r17
    57b2:	cf 93       	push	r28
    57b4:	df 93       	push	r29
    57b6:	cd b7       	in	r28, 0x3d	; 61
    57b8:	de b7       	in	r29, 0x3e	; 62
    57ba:	63 97       	sbiw	r28, 0x13	; 19
    57bc:	cd bf       	out	0x3d, r28	; 61
    57be:	de bf       	out	0x3e, r29	; 62
    57c0:	7c 01       	movw	r14, r24
    57c2:	fe 01       	movw	r30, r28
    57c4:	31 96       	adiw	r30, 0x01	; 1
    57c6:	87 e0       	ldi	r24, 0x07	; 7
    57c8:	df 01       	movw	r26, r30
    57ca:	1d 92       	st	X+, r1
    57cc:	8a 95       	dec	r24
    57ce:	e9 f7       	brne	.-6      	; 0x57ca <ds3231_get_epoch+0x34>
    57d0:	8a e0       	ldi	r24, 0x0A	; 10
    57d2:	1f ef       	ldi	r17, 0xFF	; 255
    57d4:	18 0f       	add	r17, r24
    57d6:	88 23       	and	r24, r24
    57d8:	81 f0       	breq	.+32     	; 0x57fa <ds3231_get_epoch+0x64>
    57da:	27 e0       	ldi	r18, 0x07	; 7
    57dc:	ae 01       	movw	r20, r28
    57de:	4f 5f       	subi	r20, 0xFF	; 255
    57e0:	5f 4f       	sbci	r21, 0xFF	; 255
    57e2:	60 e0       	ldi	r22, 0x00	; 0
    57e4:	80 ed       	ldi	r24, 0xD0	; 208
    57e6:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <I2C_0_GetData>
    57ea:	01 e0       	ldi	r16, 0x01	; 1
    57ec:	87 30       	cpi	r24, 0x07	; 7
    57ee:	09 f4       	brne	.+2      	; 0x57f2 <ds3231_get_epoch+0x5c>
    57f0:	00 e0       	ldi	r16, 0x00	; 0
    57f2:	87 30       	cpi	r24, 0x07	; 7
    57f4:	21 f0       	breq	.+8      	; 0x57fe <ds3231_get_epoch+0x68>
    57f6:	91 e0       	ldi	r25, 0x01	; 1
    57f8:	03 c0       	rjmp	.+6      	; 0x5800 <ds3231_get_epoch+0x6a>
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	01 c0       	rjmp	.+2      	; 0x5800 <ds3231_get_epoch+0x6a>
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	81 2f       	mov	r24, r17
    5802:	91 11       	cpse	r25, r1
    5804:	e6 cf       	rjmp	.-52     	; 0x57d2 <ds3231_get_epoch+0x3c>
    5806:	01 11       	cpse	r16, r1
    5808:	f3 c0       	rjmp	.+486    	; 0x59f0 <ds3231_get_epoch+0x25a>
    580a:	fe 01       	movw	r30, r28
    580c:	38 96       	adiw	r30, 0x08	; 8
    580e:	8c e0       	ldi	r24, 0x0C	; 12
    5810:	df 01       	movw	r26, r30
    5812:	1d 92       	st	X+, r1
    5814:	8a 95       	dec	r24
    5816:	e9 f7       	brne	.-6      	; 0x5812 <ds3231_get_epoch+0x7c>
    5818:	2f 81       	ldd	r18, Y+7	; 0x07
    581a:	82 2f       	mov	r24, r18
    581c:	8f 70       	andi	r24, 0x0F	; 15
    581e:	a8 2e       	mov	r10, r24
    5820:	b1 2c       	mov	r11, r1
    5822:	c5 01       	movw	r24, r10
    5824:	8c 59       	subi	r24, 0x9C	; 156
    5826:	9f 4f       	sbci	r25, 0xFF	; 255
    5828:	22 95       	swap	r18
    582a:	2f 70       	andi	r18, 0x0F	; 15
    582c:	30 e0       	ldi	r19, 0x00	; 0
    582e:	59 01       	movw	r10, r18
    5830:	aa 0c       	add	r10, r10
    5832:	bb 1c       	adc	r11, r11
    5834:	22 0f       	add	r18, r18
    5836:	33 1f       	adc	r19, r19
    5838:	22 0f       	add	r18, r18
    583a:	33 1f       	adc	r19, r19
    583c:	22 0f       	add	r18, r18
    583e:	33 1f       	adc	r19, r19
    5840:	2a 0d       	add	r18, r10
    5842:	3b 1d       	adc	r19, r11
    5844:	5c 01       	movw	r10, r24
    5846:	a2 0e       	add	r10, r18
    5848:	b3 1e       	adc	r11, r19
    584a:	65 01       	movw	r12, r10
    584c:	b4 e9       	ldi	r27, 0x94	; 148
    584e:	cb 1a       	sub	r12, r27
    5850:	b8 ef       	ldi	r27, 0xF8	; 248
    5852:	db 0a       	sbc	r13, r27
    5854:	8e 81       	ldd	r24, Y+6	; 0x06
    5856:	98 2f       	mov	r25, r24
    5858:	9f 70       	andi	r25, 0x0F	; 15
    585a:	82 95       	swap	r24
    585c:	8f 70       	andi	r24, 0x0F	; 15
    585e:	88 0f       	add	r24, r24
    5860:	98 2e       	mov	r9, r24
    5862:	99 0c       	add	r9, r9
    5864:	99 0c       	add	r9, r9
    5866:	89 0d       	add	r24, r9
    5868:	98 2e       	mov	r9, r24
    586a:	99 0e       	add	r9, r25
    586c:	ed 81       	ldd	r30, Y+5	; 0x05
    586e:	8e 2f       	mov	r24, r30
    5870:	8f 70       	andi	r24, 0x0F	; 15
    5872:	e2 95       	swap	r30
    5874:	ef 70       	andi	r30, 0x0F	; 15
    5876:	ee 0f       	add	r30, r30
    5878:	8e 2e       	mov	r8, r30
    587a:	88 0c       	add	r8, r8
    587c:	88 0c       	add	r8, r8
    587e:	e8 0d       	add	r30, r8
    5880:	8e 2e       	mov	r8, r30
    5882:	88 0e       	add	r8, r24
    5884:	11 e0       	ldi	r17, 0x01	; 1
    5886:	19 15       	cp	r17, r9
    5888:	60 f4       	brcc	.+24     	; 0x58a2 <ds3231_get_epoch+0x10c>
    588a:	61 2f       	mov	r22, r17
    588c:	c6 01       	movw	r24, r12
    588e:	0e 94 47 02 	call	0x48e	; 0x48e <month_length>
    5892:	28 89       	ldd	r18, Y+16	; 0x10
    5894:	39 89       	ldd	r19, Y+17	; 0x11
    5896:	28 0f       	add	r18, r24
    5898:	31 1d       	adc	r19, r1
    589a:	28 8b       	std	Y+16, r18	; 0x10
    589c:	39 8b       	std	Y+17, r19	; 0x11
    589e:	1f 5f       	subi	r17, 0xFF	; 255
    58a0:	f2 cf       	rjmp	.-28     	; 0x5886 <ds3231_get_epoch+0xf0>
    58a2:	e8 2d       	mov	r30, r8
    58a4:	88 0c       	add	r8, r8
    58a6:	ff 0b       	sbc	r31, r31
    58a8:	31 97       	sbiw	r30, 0x01	; 1
    58aa:	88 89       	ldd	r24, Y+16	; 0x10
    58ac:	99 89       	ldd	r25, Y+17	; 0x11
    58ae:	e8 0f       	add	r30, r24
    58b0:	f9 1f       	adc	r31, r25
    58b2:	29 81       	ldd	r18, Y+1	; 0x01
    58b4:	42 2f       	mov	r20, r18
    58b6:	42 95       	swap	r20
    58b8:	4f 70       	andi	r20, 0x0F	; 15
    58ba:	44 0f       	add	r20, r20
    58bc:	94 2f       	mov	r25, r20
    58be:	99 0f       	add	r25, r25
    58c0:	99 0f       	add	r25, r25
    58c2:	84 2f       	mov	r24, r20
    58c4:	89 0f       	add	r24, r25
    58c6:	42 2f       	mov	r20, r18
    58c8:	4f 70       	andi	r20, 0x0F	; 15
    58ca:	48 0f       	add	r20, r24
    58cc:	3a 81       	ldd	r19, Y+2	; 0x02
    58ce:	23 2f       	mov	r18, r19
    58d0:	22 95       	swap	r18
    58d2:	2f 70       	andi	r18, 0x0F	; 15
    58d4:	22 0f       	add	r18, r18
    58d6:	92 2f       	mov	r25, r18
    58d8:	99 0f       	add	r25, r25
    58da:	99 0f       	add	r25, r25
    58dc:	82 2f       	mov	r24, r18
    58de:	89 0f       	add	r24, r25
    58e0:	23 2f       	mov	r18, r19
    58e2:	2f 70       	andi	r18, 0x0F	; 15
    58e4:	28 0f       	add	r18, r24
    58e6:	3b 81       	ldd	r19, Y+3	; 0x03
    58e8:	53 2f       	mov	r21, r19
    58ea:	50 72       	andi	r21, 0x20	; 32
    58ec:	83 2f       	mov	r24, r19
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	95 95       	asr	r25
    58f2:	87 95       	ror	r24
    58f4:	95 95       	asr	r25
    58f6:	87 95       	ror	r24
    58f8:	95 95       	asr	r25
    58fa:	87 95       	ror	r24
    58fc:	95 95       	asr	r25
    58fe:	87 95       	ror	r24
    5900:	81 70       	andi	r24, 0x01	; 1
    5902:	88 0f       	add	r24, r24
    5904:	a8 2f       	mov	r26, r24
    5906:	aa 0f       	add	r26, r26
    5908:	aa 0f       	add	r26, r26
    590a:	8a 0f       	add	r24, r26
    590c:	a3 2f       	mov	r26, r19
    590e:	af 70       	andi	r26, 0x0F	; 15
    5910:	a8 0f       	add	r26, r24
    5912:	36 ff       	sbrs	r19, 6
    5914:	04 c0       	rjmp	.+8      	; 0x591e <ds3231_get_epoch+0x188>
    5916:	55 23       	and	r21, r21
    5918:	21 f0       	breq	.+8      	; 0x5922 <ds3231_get_epoch+0x18c>
    591a:	a4 5f       	subi	r26, 0xF4	; 244
    591c:	02 c0       	rjmp	.+4      	; 0x5922 <ds3231_get_epoch+0x18c>
    591e:	51 11       	cpse	r21, r1
    5920:	ac 5e       	subi	r26, 0xEC	; 236
    5922:	04 2e       	mov	r0, r20
    5924:	00 0c       	add	r0, r0
    5926:	55 0b       	sbc	r21, r21
    5928:	8c e3       	ldi	r24, 0x3C	; 60
    592a:	28 02       	muls	r18, r24
    592c:	40 0d       	add	r20, r0
    592e:	51 1d       	adc	r21, r1
    5930:	11 24       	eor	r1, r1
    5932:	0a 2e       	mov	r0, r26
    5934:	00 0c       	add	r0, r0
    5936:	bb 0b       	sbc	r27, r27
    5938:	20 e1       	ldi	r18, 0x10	; 16
    593a:	3e e0       	ldi	r19, 0x0E	; 14
    593c:	0e 94 ad 4c 	call	0x995a	; 0x995a <__usmulhisi3>
    5940:	2a 01       	movw	r4, r20
    5942:	55 0f       	add	r21, r21
    5944:	66 08       	sbc	r6, r6
    5946:	77 08       	sbc	r7, r7
    5948:	46 0e       	add	r4, r22
    594a:	57 1e       	adc	r5, r23
    594c:	68 1e       	adc	r6, r24
    594e:	79 1e       	adc	r7, r25
    5950:	df 01       	movw	r26, r30
    5952:	20 e8       	ldi	r18, 0x80	; 128
    5954:	31 e5       	ldi	r19, 0x51	; 81
    5956:	41 e0       	ldi	r20, 0x01	; 1
    5958:	50 e0       	ldi	r21, 0x00	; 0
    595a:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    595e:	46 0e       	add	r4, r22
    5960:	57 1e       	adc	r5, r23
    5962:	68 1e       	adc	r6, r24
    5964:	79 1e       	adc	r7, r25
    5966:	d5 01       	movw	r26, r10
    5968:	a6 54       	subi	r26, 0x46	; 70
    596a:	b1 09       	sbc	r27, r1
    596c:	20 e8       	ldi	r18, 0x80	; 128
    596e:	33 e3       	ldi	r19, 0x33	; 51
    5970:	41 ee       	ldi	r20, 0xE1	; 225
    5972:	51 e0       	ldi	r21, 0x01	; 1
    5974:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    5978:	46 0e       	add	r4, r22
    597a:	57 1e       	adc	r5, r23
    597c:	68 1e       	adc	r6, r24
    597e:	79 1e       	adc	r7, r25
    5980:	c5 01       	movw	r24, r10
    5982:	85 54       	subi	r24, 0x45	; 69
    5984:	91 09       	sbc	r25, r1
    5986:	dc 01       	movw	r26, r24
    5988:	0a f4       	brpl	.+2      	; 0x598c <ds3231_get_epoch+0x1f6>
    598a:	13 96       	adiw	r26, 0x03	; 3
    598c:	b5 95       	asr	r27
    598e:	a7 95       	ror	r26
    5990:	b5 95       	asr	r27
    5992:	a7 95       	ror	r26
    5994:	20 e8       	ldi	r18, 0x80	; 128
    5996:	31 e5       	ldi	r19, 0x51	; 81
    5998:	41 e0       	ldi	r20, 0x01	; 1
    599a:	50 e0       	ldi	r21, 0x00	; 0
    599c:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    59a0:	46 0e       	add	r4, r22
    59a2:	57 1e       	adc	r5, r23
    59a4:	68 1e       	adc	r6, r24
    59a6:	79 1e       	adc	r7, r25
    59a8:	c5 01       	movw	r24, r10
    59aa:	01 97       	sbiw	r24, 0x01	; 1
    59ac:	64 e6       	ldi	r22, 0x64	; 100
    59ae:	70 e0       	ldi	r23, 0x00	; 0
    59b0:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
    59b4:	db 01       	movw	r26, r22
    59b6:	20 e8       	ldi	r18, 0x80	; 128
    59b8:	3e ea       	ldi	r19, 0xAE	; 174
    59ba:	4e ef       	ldi	r20, 0xFE	; 254
    59bc:	5f ef       	ldi	r21, 0xFF	; 255
    59be:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    59c2:	46 0e       	add	r4, r22
    59c4:	57 1e       	adc	r5, r23
    59c6:	68 1e       	adc	r6, r24
    59c8:	79 1e       	adc	r7, r25
    59ca:	c5 01       	movw	r24, r10
    59cc:	85 5d       	subi	r24, 0xD5	; 213
    59ce:	9e 4f       	sbci	r25, 0xFE	; 254
    59d0:	60 e9       	ldi	r22, 0x90	; 144
    59d2:	71 e0       	ldi	r23, 0x01	; 1
    59d4:	0e 94 40 4c 	call	0x9880	; 0x9880 <__divmodhi4>
    59d8:	db 01       	movw	r26, r22
    59da:	20 e8       	ldi	r18, 0x80	; 128
    59dc:	31 e5       	ldi	r19, 0x51	; 81
    59de:	41 e0       	ldi	r20, 0x01	; 1
    59e0:	50 e0       	ldi	r21, 0x00	; 0
    59e2:	0e 94 bf 4c 	call	0x997e	; 0x997e <__mulshisi3>
    59e6:	64 0d       	add	r22, r4
    59e8:	75 1d       	adc	r23, r5
    59ea:	86 1d       	adc	r24, r6
    59ec:	97 1d       	adc	r25, r7
    59ee:	03 c0       	rjmp	.+6      	; 0x59f6 <ds3231_get_epoch+0x260>
    59f0:	60 e0       	ldi	r22, 0x00	; 0
    59f2:	70 e0       	ldi	r23, 0x00	; 0
    59f4:	cb 01       	movw	r24, r22
    59f6:	e1 14       	cp	r14, r1
    59f8:	f1 04       	cpc	r15, r1
    59fa:	39 f0       	breq	.+14     	; 0x5a0a <ds3231_get_epoch+0x274>
    59fc:	00 23       	and	r16, r16
    59fe:	11 f0       	breq	.+4      	; 0x5a04 <ds3231_get_epoch+0x26e>
    5a00:	2c ef       	ldi	r18, 0xFC	; 252
    5a02:	01 c0       	rjmp	.+2      	; 0x5a06 <ds3231_get_epoch+0x270>
    5a04:	20 e0       	ldi	r18, 0x00	; 0
    5a06:	d7 01       	movw	r26, r14
    5a08:	2c 93       	st	X, r18
    5a0a:	63 96       	adiw	r28, 0x13	; 19
    5a0c:	cd bf       	out	0x3d, r28	; 61
    5a0e:	de bf       	out	0x3e, r29	; 62
    5a10:	df 91       	pop	r29
    5a12:	cf 91       	pop	r28
    5a14:	1f 91       	pop	r17
    5a16:	0f 91       	pop	r16
    5a18:	ff 90       	pop	r15
    5a1a:	ef 90       	pop	r14
    5a1c:	df 90       	pop	r13
    5a1e:	cf 90       	pop	r12
    5a20:	bf 90       	pop	r11
    5a22:	af 90       	pop	r10
    5a24:	9f 90       	pop	r9
    5a26:	8f 90       	pop	r8
    5a28:	7f 90       	pop	r7
    5a2a:	6f 90       	pop	r6
    5a2c:	5f 90       	pop	r5
    5a2e:	4f 90       	pop	r4
    5a30:	08 95       	ret

00005a32 <RTC_String2Epoch>:
    5a32:	7f 92       	push	r7
    5a34:	8f 92       	push	r8
    5a36:	9f 92       	push	r9
    5a38:	af 92       	push	r10
    5a3a:	bf 92       	push	r11
    5a3c:	cf 92       	push	r12
    5a3e:	df 92       	push	r13
    5a40:	ef 92       	push	r14
    5a42:	ff 92       	push	r15
    5a44:	0f 93       	push	r16
    5a46:	1f 93       	push	r17
    5a48:	cf 93       	push	r28
    5a4a:	df 93       	push	r29
    5a4c:	cd b7       	in	r28, 0x3d	; 61
    5a4e:	de b7       	in	r29, 0x3e	; 62
    5a50:	2c 97       	sbiw	r28, 0x0c	; 12
    5a52:	cd bf       	out	0x3d, r28	; 61
    5a54:	de bf       	out	0x3e, r29	; 62
    5a56:	6c 01       	movw	r12, r24
    5a58:	8b 01       	movw	r16, r22
    5a5a:	fe 01       	movw	r30, r28
    5a5c:	31 96       	adiw	r30, 0x01	; 1
    5a5e:	8c e0       	ldi	r24, 0x0C	; 12
    5a60:	df 01       	movw	r26, r30
    5a62:	1d 92       	st	X+, r1
    5a64:	8a 95       	dec	r24
    5a66:	e9 f7       	brne	.-6      	; 0x5a62 <RTC_String2Epoch+0x30>
    5a68:	61 15       	cp	r22, r1
    5a6a:	71 05       	cpc	r23, r1
    5a6c:	09 f4       	brne	.+2      	; 0x5a70 <RTC_String2Epoch+0x3e>
    5a6e:	63 c0       	rjmp	.+198    	; 0x5b36 <RTC_String2Epoch+0x104>
    5a70:	cb 01       	movw	r24, r22
    5a72:	0a 96       	adiw	r24, 0x0a	; 10
    5a74:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5a78:	a8 2e       	mov	r10, r24
    5a7a:	c8 01       	movw	r24, r16
    5a7c:	08 96       	adiw	r24, 0x08	; 8
    5a7e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5a82:	b8 2e       	mov	r11, r24
    5a84:	c8 01       	movw	r24, r16
    5a86:	06 96       	adiw	r24, 0x06	; 6
    5a88:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5a8c:	f8 2e       	mov	r15, r24
    5a8e:	c8 01       	movw	r24, r16
    5a90:	04 96       	adiw	r24, 0x04	; 4
    5a92:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5a96:	88 2e       	mov	r8, r24
    5a98:	c8 01       	movw	r24, r16
    5a9a:	02 96       	adiw	r24, 0x02	; 2
    5a9c:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5aa0:	78 2e       	mov	r7, r24
    5aa2:	c8 01       	movw	r24, r16
    5aa4:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5aa8:	18 2f       	mov	r17, r24
    5aaa:	8f 2d       	mov	r24, r15
    5aac:	0e 94 1f 2b 	call	0x563e	; 0x563e <_Z7bcd2dech>
    5ab0:	98 2e       	mov	r9, r24
    5ab2:	81 2f       	mov	r24, r17
    5ab4:	0e 94 1f 2b 	call	0x563e	; 0x563e <_Z7bcd2dech>
    5ab8:	e8 2e       	mov	r14, r24
    5aba:	f1 2c       	mov	r15, r1
    5abc:	c7 01       	movw	r24, r14
    5abe:	8c 59       	subi	r24, 0x9C	; 156
    5ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac2:	8f 83       	std	Y+7, r24	; 0x07
    5ac4:	98 87       	std	Y+8, r25	; 0x08
    5ac6:	b0 e3       	ldi	r27, 0x30	; 48
    5ac8:	eb 1a       	sub	r14, r27
    5aca:	b8 ef       	ldi	r27, 0xF8	; 248
    5acc:	fb 0a       	sbc	r15, r27
    5ace:	87 2d       	mov	r24, r7
    5ad0:	0e 94 1f 2b 	call	0x563e	; 0x563e <_Z7bcd2dech>
    5ad4:	08 2f       	mov	r16, r24
    5ad6:	8f ef       	ldi	r24, 0xFF	; 255
    5ad8:	80 0f       	add	r24, r16
    5ada:	8e 83       	std	Y+6, r24	; 0x06
    5adc:	88 2d       	mov	r24, r8
    5ade:	0e 94 1f 2b 	call	0x563e	; 0x563e <_Z7bcd2dech>
    5ae2:	8c 83       	std	Y+4, r24	; 0x04
    5ae4:	11 e0       	ldi	r17, 0x01	; 1
    5ae6:	10 17       	cp	r17, r16
    5ae8:	60 f4       	brcc	.+24     	; 0x5b02 <RTC_String2Epoch+0xd0>
    5aea:	61 2f       	mov	r22, r17
    5aec:	c7 01       	movw	r24, r14
    5aee:	0e 94 47 02 	call	0x48e	; 0x48e <month_length>
    5af2:	29 85       	ldd	r18, Y+9	; 0x09
    5af4:	3a 85       	ldd	r19, Y+10	; 0x0a
    5af6:	28 0f       	add	r18, r24
    5af8:	31 1d       	adc	r19, r1
    5afa:	29 87       	std	Y+9, r18	; 0x09
    5afc:	3a 87       	std	Y+10, r19	; 0x0a
    5afe:	1f 5f       	subi	r17, 0xFF	; 255
    5b00:	f2 cf       	rjmp	.-28     	; 0x5ae6 <RTC_String2Epoch+0xb4>
    5b02:	8c 81       	ldd	r24, Y+4	; 0x04
    5b04:	08 2e       	mov	r0, r24
    5b06:	00 0c       	add	r0, r0
    5b08:	99 0b       	sbc	r25, r25
    5b0a:	01 97       	sbiw	r24, 0x01	; 1
    5b0c:	29 85       	ldd	r18, Y+9	; 0x09
    5b0e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5b10:	82 0f       	add	r24, r18
    5b12:	93 1f       	adc	r25, r19
    5b14:	89 87       	std	Y+9, r24	; 0x09
    5b16:	9a 87       	std	Y+10, r25	; 0x0a
    5b18:	8a 2d       	mov	r24, r10
    5b1a:	0e 94 1f 2b 	call	0x563e	; 0x563e <_Z7bcd2dech>
    5b1e:	18 2f       	mov	r17, r24
    5b20:	8b 2d       	mov	r24, r11
    5b22:	0e 94 1f 2b 	call	0x563e	; 0x563e <_Z7bcd2dech>
    5b26:	9b 82       	std	Y+3, r9	; 0x03
    5b28:	8a 83       	std	Y+2, r24	; 0x02
    5b2a:	19 83       	std	Y+1, r17	; 0x01
    5b2c:	ce 01       	movw	r24, r28
    5b2e:	01 96       	adiw	r24, 0x01	; 1
    5b30:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <_Z14epoch_from_ltmP2tm>
    5b34:	04 c0       	rjmp	.+8      	; 0x5b3e <RTC_String2Epoch+0x10c>
    5b36:	80 e0       	ldi	r24, 0x00	; 0
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	0e 94 cb 2b 	call	0x5796	; 0x5796 <ds3231_get_epoch>
    5b3e:	c1 14       	cp	r12, r1
    5b40:	d1 04       	cpc	r13, r1
    5b42:	49 f0       	breq	.+18     	; 0x5b56 <RTC_String2Epoch+0x124>
    5b44:	21 e0       	ldi	r18, 0x01	; 1
    5b46:	61 15       	cp	r22, r1
    5b48:	71 05       	cpc	r23, r1
    5b4a:	81 05       	cpc	r24, r1
    5b4c:	91 05       	cpc	r25, r1
    5b4e:	09 f0       	breq	.+2      	; 0x5b52 <RTC_String2Epoch+0x120>
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	f6 01       	movw	r30, r12
    5b54:	20 83       	st	Z, r18
    5b56:	2c 96       	adiw	r28, 0x0c	; 12
    5b58:	cd bf       	out	0x3d, r28	; 61
    5b5a:	de bf       	out	0x3e, r29	; 62
    5b5c:	df 91       	pop	r29
    5b5e:	cf 91       	pop	r28
    5b60:	1f 91       	pop	r17
    5b62:	0f 91       	pop	r16
    5b64:	ff 90       	pop	r15
    5b66:	ef 90       	pop	r14
    5b68:	df 90       	pop	r13
    5b6a:	cf 90       	pop	r12
    5b6c:	bf 90       	pop	r11
    5b6e:	af 90       	pop	r10
    5b70:	9f 90       	pop	r9
    5b72:	8f 90       	pop	r8
    5b74:	7f 90       	pop	r7
    5b76:	08 95       	ret

00005b78 <ds3231_get_temp>:
    5b78:	ef 92       	push	r14
    5b7a:	ff 92       	push	r15
    5b7c:	1f 93       	push	r17
    5b7e:	cf 93       	push	r28
    5b80:	df 93       	push	r29
    5b82:	00 d0       	rcall	.+0      	; 0x5b84 <ds3231_get_temp+0xc>
    5b84:	cd b7       	in	r28, 0x3d	; 61
    5b86:	de b7       	in	r29, 0x3e	; 62
    5b88:	7c 01       	movw	r14, r24
    5b8a:	19 82       	std	Y+1, r1	; 0x01
    5b8c:	1a 82       	std	Y+2, r1	; 0x02
    5b8e:	8a e0       	ldi	r24, 0x0A	; 10
    5b90:	1f ef       	ldi	r17, 0xFF	; 255
    5b92:	18 0f       	add	r17, r24
    5b94:	88 23       	and	r24, r24
    5b96:	81 f0       	breq	.+32     	; 0x5bb8 <ds3231_get_temp+0x40>
    5b98:	22 e0       	ldi	r18, 0x02	; 2
    5b9a:	ae 01       	movw	r20, r28
    5b9c:	4f 5f       	subi	r20, 0xFF	; 255
    5b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba0:	61 e1       	ldi	r22, 0x11	; 17
    5ba2:	80 ed       	ldi	r24, 0xD0	; 208
    5ba4:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <I2C_0_GetData>
    5ba8:	21 e0       	ldi	r18, 0x01	; 1
    5baa:	82 30       	cpi	r24, 0x02	; 2
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <ds3231_get_temp+0x38>
    5bae:	20 e0       	ldi	r18, 0x00	; 0
    5bb0:	82 30       	cpi	r24, 0x02	; 2
    5bb2:	21 f0       	breq	.+8      	; 0x5bbc <ds3231_get_temp+0x44>
    5bb4:	91 e0       	ldi	r25, 0x01	; 1
    5bb6:	03 c0       	rjmp	.+6      	; 0x5bbe <ds3231_get_temp+0x46>
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	01 c0       	rjmp	.+2      	; 0x5bbe <ds3231_get_temp+0x46>
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	81 2f       	mov	r24, r17
    5bc0:	91 11       	cpse	r25, r1
    5bc2:	e6 cf       	rjmp	.-52     	; 0x5b90 <ds3231_get_temp+0x18>
    5bc4:	21 11       	cpse	r18, r1
    5bc6:	09 c0       	rjmp	.+18     	; 0x5bda <ds3231_get_temp+0x62>
    5bc8:	89 81       	ldd	r24, Y+1	; 0x01
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	98 2f       	mov	r25, r24
    5bce:	88 27       	eor	r24, r24
    5bd0:	3a 81       	ldd	r19, Y+2	; 0x02
    5bd2:	83 2b       	or	r24, r19
    5bd4:	f7 01       	movw	r30, r14
    5bd6:	80 83       	st	Z, r24
    5bd8:	91 83       	std	Z+1, r25	; 0x01
    5bda:	82 2f       	mov	r24, r18
    5bdc:	0f 90       	pop	r0
    5bde:	0f 90       	pop	r0
    5be0:	df 91       	pop	r29
    5be2:	cf 91       	pop	r28
    5be4:	1f 91       	pop	r17
    5be6:	ff 90       	pop	r15
    5be8:	ef 90       	pop	r14
    5bea:	08 95       	ret

00005bec <ds3231_set_date_time_arducon>:
    5bec:	ff 92       	push	r15
    5bee:	0f 93       	push	r16
    5bf0:	1f 93       	push	r17
    5bf2:	cf 93       	push	r28
    5bf4:	df 93       	push	r29
    5bf6:	cd b7       	in	r28, 0x3d	; 61
    5bf8:	de b7       	in	r29, 0x3e	; 62
    5bfa:	27 97       	sbiw	r28, 0x07	; 7
    5bfc:	cd bf       	out	0x3d, r28	; 61
    5bfe:	de bf       	out	0x3e, r29	; 62
    5c00:	fe 01       	movw	r30, r28
    5c02:	31 96       	adiw	r30, 0x01	; 1
    5c04:	27 e0       	ldi	r18, 0x07	; 7
    5c06:	df 01       	movw	r26, r30
    5c08:	1d 92       	st	X+, r1
    5c0a:	2a 95       	dec	r18
    5c0c:	e9 f7       	brne	.-6      	; 0x5c08 <ds3231_set_date_time_arducon+0x1c>
    5c0e:	00 97       	sbiw	r24, 0x00	; 0
    5c10:	09 f4       	brne	.+2      	; 0x5c14 <ds3231_set_date_time_arducon+0x28>
    5c12:	3f c0       	rjmp	.+126    	; 0x5c92 <ds3231_set_date_time_arducon+0xa6>
    5c14:	f6 2e       	mov	r15, r22
    5c16:	8c 01       	movw	r16, r24
    5c18:	0a 96       	adiw	r24, 0x0a	; 10
    5c1a:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5c1e:	89 83       	std	Y+1, r24	; 0x01
    5c20:	c8 01       	movw	r24, r16
    5c22:	08 96       	adiw	r24, 0x08	; 8
    5c24:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5c28:	8a 83       	std	Y+2, r24	; 0x02
    5c2a:	c8 01       	movw	r24, r16
    5c2c:	06 96       	adiw	r24, 0x06	; 6
    5c2e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5c32:	8b 83       	std	Y+3, r24	; 0x03
    5c34:	c8 01       	movw	r24, r16
    5c36:	04 96       	adiw	r24, 0x04	; 4
    5c38:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5c3c:	8d 83       	std	Y+5, r24	; 0x05
    5c3e:	c8 01       	movw	r24, r16
    5c40:	02 96       	adiw	r24, 0x02	; 2
    5c42:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5c46:	8e 83       	std	Y+6, r24	; 0x06
    5c48:	c8 01       	movw	r24, r16
    5c4a:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_Z8char2bcdPc>
    5c4e:	8f 83       	std	Y+7, r24	; 0x07
    5c50:	31 e0       	ldi	r19, 0x01	; 1
    5c52:	9a e0       	ldi	r25, 0x0A	; 10
    5c54:	1f ef       	ldi	r17, 0xFF	; 255
    5c56:	19 0f       	add	r17, r25
    5c58:	99 23       	and	r25, r25
    5c5a:	a1 f0       	breq	.+40     	; 0x5c84 <ds3231_set_date_time_arducon+0x98>
    5c5c:	6f 2d       	mov	r22, r15
    5c5e:	66 0f       	add	r22, r22
    5c60:	66 0f       	add	r22, r22
    5c62:	66 0f       	add	r22, r22
    5c64:	6f 19       	sub	r22, r15
    5c66:	27 e0       	ldi	r18, 0x07	; 7
    5c68:	ae 01       	movw	r20, r28
    5c6a:	4f 5f       	subi	r20, 0xFF	; 255
    5c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c6e:	80 ed       	ldi	r24, 0xD0	; 208
    5c70:	0e 94 5f 35 	call	0x6abe	; 0x6abe <I2C_0_SendData>
    5c74:	31 e0       	ldi	r19, 0x01	; 1
    5c76:	87 30       	cpi	r24, 0x07	; 7
    5c78:	09 f4       	brne	.+2      	; 0x5c7c <ds3231_set_date_time_arducon+0x90>
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	87 30       	cpi	r24, 0x07	; 7
    5c7e:	21 f0       	breq	.+8      	; 0x5c88 <ds3231_set_date_time_arducon+0x9c>
    5c80:	21 e0       	ldi	r18, 0x01	; 1
    5c82:	03 c0       	rjmp	.+6      	; 0x5c8a <ds3231_set_date_time_arducon+0x9e>
    5c84:	20 e0       	ldi	r18, 0x00	; 0
    5c86:	01 c0       	rjmp	.+2      	; 0x5c8a <ds3231_set_date_time_arducon+0x9e>
    5c88:	20 e0       	ldi	r18, 0x00	; 0
    5c8a:	91 2f       	mov	r25, r17
    5c8c:	21 11       	cpse	r18, r1
    5c8e:	e2 cf       	rjmp	.-60     	; 0x5c54 <ds3231_set_date_time_arducon+0x68>
    5c90:	01 c0       	rjmp	.+2      	; 0x5c94 <ds3231_set_date_time_arducon+0xa8>
    5c92:	31 e0       	ldi	r19, 0x01	; 1
    5c94:	83 2f       	mov	r24, r19
    5c96:	27 96       	adiw	r28, 0x07	; 7
    5c98:	cd bf       	out	0x3d, r28	; 61
    5c9a:	de bf       	out	0x3e, r29	; 62
    5c9c:	df 91       	pop	r29
    5c9e:	cf 91       	pop	r28
    5ca0:	1f 91       	pop	r17
    5ca2:	0f 91       	pop	r16
    5ca4:	ff 90       	pop	r15
    5ca6:	08 95       	ret

00005ca8 <ds3231_set_date_time>:
    5ca8:	0f 93       	push	r16
    5caa:	1f 93       	push	r17
    5cac:	cf 93       	push	r28
    5cae:	df 93       	push	r29
    5cb0:	cd b7       	in	r28, 0x3d	; 61
    5cb2:	de b7       	in	r29, 0x3e	; 62
    5cb4:	27 97       	sbiw	r28, 0x07	; 7
    5cb6:	cd bf       	out	0x3d, r28	; 61
    5cb8:	de bf       	out	0x3e, r29	; 62
    5cba:	fc 01       	movw	r30, r24
    5cbc:	06 2f       	mov	r16, r22
    5cbe:	81 e0       	ldi	r24, 0x01	; 1
    5cc0:	8c 83       	std	Y+4, r24	; 0x04
    5cc2:	82 89       	ldd	r24, Z+18	; 0x12
    5cc4:	20 ed       	ldi	r18, 0xD0	; 208
    5cc6:	28 0f       	add	r18, r24
    5cc8:	91 89       	ldd	r25, Z+17	; 0x11
    5cca:	89 2f       	mov	r24, r25
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	c0 97       	sbiw	r24, 0x30	; 48
    5cd0:	82 95       	swap	r24
    5cd2:	92 95       	swap	r25
    5cd4:	90 7f       	andi	r25, 0xF0	; 240
    5cd6:	98 27       	eor	r25, r24
    5cd8:	80 7f       	andi	r24, 0xF0	; 240
    5cda:	98 27       	eor	r25, r24
    5cdc:	82 2b       	or	r24, r18
    5cde:	89 83       	std	Y+1, r24	; 0x01
    5ce0:	87 85       	ldd	r24, Z+15	; 0x0f
    5ce2:	20 ed       	ldi	r18, 0xD0	; 208
    5ce4:	28 0f       	add	r18, r24
    5ce6:	96 85       	ldd	r25, Z+14	; 0x0e
    5ce8:	89 2f       	mov	r24, r25
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	c0 97       	sbiw	r24, 0x30	; 48
    5cee:	82 95       	swap	r24
    5cf0:	92 95       	swap	r25
    5cf2:	90 7f       	andi	r25, 0xF0	; 240
    5cf4:	98 27       	eor	r25, r24
    5cf6:	80 7f       	andi	r24, 0xF0	; 240
    5cf8:	98 27       	eor	r25, r24
    5cfa:	82 2b       	or	r24, r18
    5cfc:	8a 83       	std	Y+2, r24	; 0x02
    5cfe:	84 85       	ldd	r24, Z+12	; 0x0c
    5d00:	20 ed       	ldi	r18, 0xD0	; 208
    5d02:	28 0f       	add	r18, r24
    5d04:	93 85       	ldd	r25, Z+11	; 0x0b
    5d06:	89 2f       	mov	r24, r25
    5d08:	90 e0       	ldi	r25, 0x00	; 0
    5d0a:	c0 97       	sbiw	r24, 0x30	; 48
    5d0c:	82 95       	swap	r24
    5d0e:	92 95       	swap	r25
    5d10:	90 7f       	andi	r25, 0xF0	; 240
    5d12:	98 27       	eor	r25, r24
    5d14:	80 7f       	andi	r24, 0xF0	; 240
    5d16:	98 27       	eor	r25, r24
    5d18:	82 2b       	or	r24, r18
    5d1a:	8b 83       	std	Y+3, r24	; 0x03
    5d1c:	81 85       	ldd	r24, Z+9	; 0x09
    5d1e:	20 ed       	ldi	r18, 0xD0	; 208
    5d20:	28 0f       	add	r18, r24
    5d22:	90 85       	ldd	r25, Z+8	; 0x08
    5d24:	89 2f       	mov	r24, r25
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	c0 97       	sbiw	r24, 0x30	; 48
    5d2a:	82 95       	swap	r24
    5d2c:	92 95       	swap	r25
    5d2e:	90 7f       	andi	r25, 0xF0	; 240
    5d30:	98 27       	eor	r25, r24
    5d32:	80 7f       	andi	r24, 0xF0	; 240
    5d34:	98 27       	eor	r25, r24
    5d36:	82 2b       	or	r24, r18
    5d38:	8d 83       	std	Y+5, r24	; 0x05
    5d3a:	86 81       	ldd	r24, Z+6	; 0x06
    5d3c:	20 ed       	ldi	r18, 0xD0	; 208
    5d3e:	28 0f       	add	r18, r24
    5d40:	95 81       	ldd	r25, Z+5	; 0x05
    5d42:	89 2f       	mov	r24, r25
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	c0 97       	sbiw	r24, 0x30	; 48
    5d48:	82 95       	swap	r24
    5d4a:	92 95       	swap	r25
    5d4c:	90 7f       	andi	r25, 0xF0	; 240
    5d4e:	98 27       	eor	r25, r24
    5d50:	80 7f       	andi	r24, 0xF0	; 240
    5d52:	98 27       	eor	r25, r24
    5d54:	82 2b       	or	r24, r18
    5d56:	8e 83       	std	Y+6, r24	; 0x06
    5d58:	83 81       	ldd	r24, Z+3	; 0x03
    5d5a:	20 ed       	ldi	r18, 0xD0	; 208
    5d5c:	28 0f       	add	r18, r24
    5d5e:	92 81       	ldd	r25, Z+2	; 0x02
    5d60:	89 2f       	mov	r24, r25
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	c0 97       	sbiw	r24, 0x30	; 48
    5d66:	82 95       	swap	r24
    5d68:	92 95       	swap	r25
    5d6a:	90 7f       	andi	r25, 0xF0	; 240
    5d6c:	98 27       	eor	r25, r24
    5d6e:	80 7f       	andi	r24, 0xF0	; 240
    5d70:	98 27       	eor	r25, r24
    5d72:	82 2b       	or	r24, r18
    5d74:	8f 83       	std	Y+7, r24	; 0x07
    5d76:	8a e0       	ldi	r24, 0x0A	; 10
    5d78:	1f ef       	ldi	r17, 0xFF	; 255
    5d7a:	18 0f       	add	r17, r24
    5d7c:	88 23       	and	r24, r24
    5d7e:	81 f0       	breq	.+32     	; 0x5da0 <ds3231_set_date_time+0xf8>
    5d80:	60 2f       	mov	r22, r16
    5d82:	66 0f       	add	r22, r22
    5d84:	66 0f       	add	r22, r22
    5d86:	66 0f       	add	r22, r22
    5d88:	60 1b       	sub	r22, r16
    5d8a:	27 e0       	ldi	r18, 0x07	; 7
    5d8c:	ae 01       	movw	r20, r28
    5d8e:	4f 5f       	subi	r20, 0xFF	; 255
    5d90:	5f 4f       	sbci	r21, 0xFF	; 255
    5d92:	80 ed       	ldi	r24, 0xD0	; 208
    5d94:	0e 94 5f 35 	call	0x6abe	; 0x6abe <I2C_0_SendData>
    5d98:	88 23       	and	r24, r24
    5d9a:	21 f0       	breq	.+8      	; 0x5da4 <ds3231_set_date_time+0xfc>
    5d9c:	91 e0       	ldi	r25, 0x01	; 1
    5d9e:	03 c0       	rjmp	.+6      	; 0x5da6 <ds3231_set_date_time+0xfe>
    5da0:	90 e0       	ldi	r25, 0x00	; 0
    5da2:	01 c0       	rjmp	.+2      	; 0x5da6 <ds3231_set_date_time+0xfe>
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	81 2f       	mov	r24, r17
    5da8:	91 11       	cpse	r25, r1
    5daa:	e6 cf       	rjmp	.-52     	; 0x5d78 <ds3231_set_date_time+0xd0>
    5dac:	27 96       	adiw	r28, 0x07	; 7
    5dae:	cd bf       	out	0x3d, r28	; 61
    5db0:	de bf       	out	0x3e, r29	; 62
    5db2:	df 91       	pop	r29
    5db4:	cf 91       	pop	r28
    5db6:	1f 91       	pop	r17
    5db8:	0f 91       	pop	r16
    5dba:	08 95       	ret

00005dbc <ds3231_1s_sqw>:
#endif // DATE_STRING_SUPPORT_ENABLED
	
	bool ds3231_1s_sqw(bool enable)
	{
    5dbc:	1f 93       	push	r17
    5dbe:	cf 93       	push	r28
    5dc0:	df 93       	push	r29
    5dc2:	1f 92       	push	r1
    5dc4:	cd b7       	in	r28, 0x3d	; 61
    5dc6:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
		bool failure;
		uint8_t data[1];
		
		data[0] = enable ? 0x40:0x00;	
    5dc8:	88 23       	and	r24, r24
    5dca:	11 f0       	breq	.+4      	; 0x5dd0 <ds3231_1s_sqw+0x14>
    5dcc:	80 e4       	ldi	r24, 0x40	; 64
    5dce:	01 c0       	rjmp	.+2      	; 0x5dd2 <ds3231_1s_sqw+0x16>
    5dd0:	80 e0       	ldi	r24, 0x00	; 0
    5dd2:	89 83       	std	Y+1, r24	; 0x01
	}
#endif // DATE_STRING_SUPPORT_ENABLED
	
	bool ds3231_1s_sqw(bool enable)
	{
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5dd4:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		uint8_t data[1];
		
		data[0] = enable ? 0x40:0x00;	
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, data, 1) != 1)));
    5dd6:	1f ef       	ldi	r17, 0xFF	; 255
    5dd8:	18 0f       	add	r17, r24
    5dda:	88 23       	and	r24, r24
    5ddc:	81 f0       	breq	.+32     	; 0x5dfe <ds3231_1s_sqw+0x42>
    5dde:	21 e0       	ldi	r18, 0x01	; 1
    5de0:	ae 01       	movw	r20, r28
    5de2:	4f 5f       	subi	r20, 0xFF	; 255
    5de4:	5f 4f       	sbci	r21, 0xFF	; 255
    5de6:	6e e0       	ldi	r22, 0x0E	; 14
    5de8:	80 ed       	ldi	r24, 0xD0	; 208
    5dea:	0e 94 5f 35 	call	0x6abe	; 0x6abe <I2C_0_SendData>
    5dee:	21 e0       	ldi	r18, 0x01	; 1
    5df0:	81 30       	cpi	r24, 0x01	; 1
    5df2:	09 f4       	brne	.+2      	; 0x5df6 <ds3231_1s_sqw+0x3a>
    5df4:	20 e0       	ldi	r18, 0x00	; 0
    5df6:	81 30       	cpi	r24, 0x01	; 1
    5df8:	21 f0       	breq	.+8      	; 0x5e02 <ds3231_1s_sqw+0x46>
    5dfa:	91 e0       	ldi	r25, 0x01	; 1
    5dfc:	03 c0       	rjmp	.+6      	; 0x5e04 <ds3231_1s_sqw+0x48>
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	01 c0       	rjmp	.+2      	; 0x5e04 <ds3231_1s_sqw+0x48>
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	81 2f       	mov	r24, r17
    5e06:	91 11       	cpse	r25, r1
    5e08:	e6 cf       	rjmp	.-52     	; 0x5dd6 <ds3231_1s_sqw+0x1a>
		
		return(failure);
	}
    5e0a:	82 2f       	mov	r24, r18
    5e0c:	0f 90       	pop	r0
    5e0e:	df 91       	pop	r29
    5e10:	cf 91       	pop	r28
    5e12:	1f 91       	pop	r17
    5e14:	08 95       	ret

00005e16 <ds3231_set_aging>:


	bool ds3231_set_aging(int8_t data_in)
	{
    5e16:	1f 93       	push	r17
    5e18:	cf 93       	push	r28
    5e1a:	df 93       	push	r29
    5e1c:	1f 92       	push	r1
    5e1e:	cd b7       	in	r28, 0x3d	; 61
    5e20:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
    5e22:	89 83       	std	Y+1, r24	; 0x01
	}


	bool ds3231_set_aging(int8_t data_in)
	{
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5e24:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    5e26:	1f ef       	ldi	r17, 0xFF	; 255
    5e28:	18 0f       	add	r17, r24
    5e2a:	88 23       	and	r24, r24
    5e2c:	81 f0       	breq	.+32     	; 0x5e4e <ds3231_set_aging+0x38>
    5e2e:	21 e0       	ldi	r18, 0x01	; 1
    5e30:	ae 01       	movw	r20, r28
    5e32:	4f 5f       	subi	r20, 0xFF	; 255
    5e34:	5f 4f       	sbci	r21, 0xFF	; 255
    5e36:	60 e1       	ldi	r22, 0x10	; 16
    5e38:	80 ed       	ldi	r24, 0xD0	; 208
    5e3a:	0e 94 5f 35 	call	0x6abe	; 0x6abe <I2C_0_SendData>
    5e3e:	21 e0       	ldi	r18, 0x01	; 1
    5e40:	81 30       	cpi	r24, 0x01	; 1
    5e42:	09 f4       	brne	.+2      	; 0x5e46 <ds3231_set_aging+0x30>
    5e44:	20 e0       	ldi	r18, 0x00	; 0
    5e46:	81 30       	cpi	r24, 0x01	; 1
    5e48:	21 f0       	breq	.+8      	; 0x5e52 <ds3231_set_aging+0x3c>
    5e4a:	91 e0       	ldi	r25, 0x01	; 1
    5e4c:	03 c0       	rjmp	.+6      	; 0x5e54 <ds3231_set_aging+0x3e>
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	01 c0       	rjmp	.+2      	; 0x5e54 <ds3231_set_aging+0x3e>
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	81 2f       	mov	r24, r17
    5e56:	91 11       	cpse	r25, r1
    5e58:	e6 cf       	rjmp	.-52     	; 0x5e26 <ds3231_set_aging+0x10>
		return(failure);
	}
    5e5a:	82 2f       	mov	r24, r18
    5e5c:	0f 90       	pop	r0
    5e5e:	df 91       	pop	r29
    5e60:	cf 91       	pop	r28
    5e62:	1f 91       	pop	r17
    5e64:	08 95       	ret

00005e66 <ds3231_get_aging>:


	int8_t ds3231_get_aging()
	{
    5e66:	1f 93       	push	r17
    5e68:	cf 93       	push	r28
    5e6a:	df 93       	push	r29
    5e6c:	1f 92       	push	r1
    5e6e:	cd b7       	in	r28, 0x3d	; 61
    5e70:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5e72:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		while(tries-- && (failure = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    5e74:	1f ef       	ldi	r17, 0xFF	; 255
    5e76:	18 0f       	add	r17, r24
    5e78:	88 23       	and	r24, r24
    5e7a:	61 f0       	breq	.+24     	; 0x5e94 <ds3231_get_aging+0x2e>
    5e7c:	21 e0       	ldi	r18, 0x01	; 1
    5e7e:	ae 01       	movw	r20, r28
    5e80:	4f 5f       	subi	r20, 0xFF	; 255
    5e82:	5f 4f       	sbci	r21, 0xFF	; 255
    5e84:	60 e1       	ldi	r22, 0x10	; 16
    5e86:	80 ed       	ldi	r24, 0xD0	; 208
    5e88:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <I2C_0_GetData>
    5e8c:	81 30       	cpi	r24, 0x01	; 1
    5e8e:	21 f0       	breq	.+8      	; 0x5e98 <ds3231_get_aging+0x32>
    5e90:	91 e0       	ldi	r25, 0x01	; 1
    5e92:	03 c0       	rjmp	.+6      	; 0x5e9a <ds3231_get_aging+0x34>
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	01 c0       	rjmp	.+2      	; 0x5e9a <ds3231_get_aging+0x34>
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	81 2f       	mov	r24, r17
    5e9c:	91 11       	cpse	r25, r1
    5e9e:	ea cf       	rjmp	.-44     	; 0x5e74 <ds3231_get_aging+0xe>
		return(data[0]);
	}
    5ea0:	89 81       	ldd	r24, Y+1	; 0x01
    5ea2:	0f 90       	pop	r0
    5ea4:	df 91       	pop	r29
    5ea6:	cf 91       	pop	r28
    5ea8:	1f 91       	pop	r17
    5eaa:	08 95       	ret

00005eac <ds3231_responding>:

	bool ds3231_responding()
	{
    5eac:	1f 93       	push	r17
    5eae:	cf 93       	push	r28
    5eb0:	df 93       	push	r29
    5eb2:	1f 92       	push	r1
    5eb4:	cd b7       	in	r28, 0x3d	; 61
    5eb6:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
		uint8_t tries = 10;
    5eb8:	9a e0       	ldi	r25, 0x0A	; 10
		return(data[0]);
	}

	bool ds3231_responding()
	{
		bool responseReceived = false;
    5eba:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t tries = 10;
		int8_t data[1];		
		while(tries-- && !(responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1)));
    5ebc:	1f ef       	ldi	r17, 0xFF	; 255
    5ebe:	19 0f       	add	r17, r25
    5ec0:	99 23       	and	r25, r25
    5ec2:	81 f0       	breq	.+32     	; 0x5ee4 <ds3231_responding+0x38>
    5ec4:	21 e0       	ldi	r18, 0x01	; 1
    5ec6:	ae 01       	movw	r20, r28
    5ec8:	4f 5f       	subi	r20, 0xFF	; 255
    5eca:	5f 4f       	sbci	r21, 0xFF	; 255
    5ecc:	60 e1       	ldi	r22, 0x10	; 16
    5ece:	80 ed       	ldi	r24, 0xD0	; 208
    5ed0:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <I2C_0_GetData>
    5ed4:	31 e0       	ldi	r19, 0x01	; 1
    5ed6:	81 30       	cpi	r24, 0x01	; 1
    5ed8:	09 f0       	breq	.+2      	; 0x5edc <ds3231_responding+0x30>
    5eda:	30 e0       	ldi	r19, 0x00	; 0
    5edc:	81 30       	cpi	r24, 0x01	; 1
    5ede:	21 f0       	breq	.+8      	; 0x5ee8 <ds3231_responding+0x3c>
    5ee0:	21 e0       	ldi	r18, 0x01	; 1
    5ee2:	03 c0       	rjmp	.+6      	; 0x5eea <ds3231_responding+0x3e>
    5ee4:	20 e0       	ldi	r18, 0x00	; 0
    5ee6:	01 c0       	rjmp	.+2      	; 0x5eea <ds3231_responding+0x3e>
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	91 2f       	mov	r25, r17
    5eec:	21 11       	cpse	r18, r1
    5eee:	e6 cf       	rjmp	.-52     	; 0x5ebc <ds3231_responding+0x10>
		return(responseReceived);
	}
    5ef0:	83 2f       	mov	r24, r19
    5ef2:	0f 90       	pop	r0
    5ef4:	df 91       	pop	r29
    5ef6:	cf 91       	pop	r28
    5ef8:	1f 91       	pop	r17
    5efa:	08 95       	ret

00005efc <ds3231_init>:

time_t epoch_from_ltm(tm *ltm);

bool ds3231_init()
{
	I2C_0_Init();
    5efc:	0e 94 f1 34 	call	0x69e2	; 0x69e2 <I2C_0_Init>
	return (!ds3231_responding());
    5f00:	0e 94 56 2f 	call	0x5eac	; 0x5eac <ds3231_responding>
}
    5f04:	91 e0       	ldi	r25, 0x01	; 1
    5f06:	89 27       	eor	r24, r25
    5f08:	08 95       	ret

00005f0a <ds3231_sync2nearestMinute>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
    5f0a:	cf 92       	push	r12
    5f0c:	df 92       	push	r13
    5f0e:	ef 92       	push	r14
    5f10:	ff 92       	push	r15
    5f12:	0f 93       	push	r16
    5f14:	1f 93       	push	r17
    5f16:	cf 93       	push	r28
    5f18:	df 93       	push	r29
    5f1a:	cd b7       	in	r28, 0x3d	; 61
    5f1c:	de b7       	in	r29, 0x3e	; 62
    5f1e:	28 97       	sbiw	r28, 0x08	; 8
    5f20:	cd bf       	out	0x3d, r28	; 61
    5f22:	de bf       	out	0x3e, r29	; 62
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
    5f24:	fe 01       	movw	r30, r28
    5f26:	31 96       	adiw	r30, 0x01	; 1
    5f28:	88 e0       	ldi	r24, 0x08	; 8
    5f2a:	df 01       	movw	r26, r30
    5f2c:	1d 92       	st	X+, r1
    5f2e:	8a 95       	dec	r24
    5f30:	e9 f7       	brne	.-6      	; 0x5f2c <ds3231_sync2nearestMinute+0x22>
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
    5f32:	f1 2c       	mov	r15, r1
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
    5f34:	8a e0       	ldi	r24, 0x0A	; 10
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
		
	while(tries-- && (err = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 3) != 3)));
    5f36:	1f ef       	ldi	r17, 0xFF	; 255
    5f38:	18 0f       	add	r17, r24
    5f3a:	88 23       	and	r24, r24
    5f3c:	89 f0       	breq	.+34     	; 0x5f60 <ds3231_sync2nearestMinute+0x56>
    5f3e:	23 e0       	ldi	r18, 0x03	; 3
    5f40:	ae 01       	movw	r20, r28
    5f42:	4f 5f       	subi	r20, 0xFF	; 255
    5f44:	5f 4f       	sbci	r21, 0xFF	; 255
    5f46:	60 e0       	ldi	r22, 0x00	; 0
    5f48:	80 ed       	ldi	r24, 0xD0	; 208
    5f4a:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <I2C_0_GetData>
    5f4e:	ff 24       	eor	r15, r15
    5f50:	f3 94       	inc	r15
    5f52:	83 30       	cpi	r24, 0x03	; 3
    5f54:	09 f4       	brne	.+2      	; 0x5f58 <ds3231_sync2nearestMinute+0x4e>
    5f56:	f1 2c       	mov	r15, r1
    5f58:	83 30       	cpi	r24, 0x03	; 3
    5f5a:	21 f0       	breq	.+8      	; 0x5f64 <ds3231_sync2nearestMinute+0x5a>
    5f5c:	01 e0       	ldi	r16, 0x01	; 1
    5f5e:	03 c0       	rjmp	.+6      	; 0x5f66 <ds3231_sync2nearestMinute+0x5c>
    5f60:	00 e0       	ldi	r16, 0x00	; 0
    5f62:	01 c0       	rjmp	.+2      	; 0x5f66 <ds3231_sync2nearestMinute+0x5c>
    5f64:	00 e0       	ldi	r16, 0x00	; 0
    5f66:	81 2f       	mov	r24, r17
    5f68:	01 11       	cpse	r16, r1
    5f6a:	e5 cf       	rjmp	.-54     	; 0x5f36 <ds3231_sync2nearestMinute+0x2c>

	if(!err)
    5f6c:	f1 10       	cpse	r15, r1
    5f6e:	82 c0       	rjmp	.+260    	; 0x6074 <ds3231_sync2nearestMinute+0x16a>
		uint8_t hour10;
		uint8_t hour;
		bool am_pm;
		bool twelvehour;

		seconds = bcd2dec(data[0]);
    5f70:	89 81       	ldd	r24, Y+1	; 0x01
    5f72:	0e 94 1f 2b 	call	0x563e	; 0x563e <_Z7bcd2dech>
    5f76:	d8 2e       	mov	r13, r24
		minutes = bcd2dec(data[1]);
    5f78:	8a 81       	ldd	r24, Y+2	; 0x02
    5f7a:	0e 94 1f 2b 	call	0x563e	; 0x563e <_Z7bcd2dech>
		am_pm = ((data[2] >> 5) & 0x01);
    5f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    5f80:	49 2f       	mov	r20, r25
    5f82:	40 72       	andi	r20, 0x20	; 32
		hour10 = ((data[2] >> 4) & 0x01);
    5f84:	29 2f       	mov	r18, r25
    5f86:	30 e0       	ldi	r19, 0x00	; 0
    5f88:	35 95       	asr	r19
    5f8a:	27 95       	ror	r18
    5f8c:	35 95       	asr	r19
    5f8e:	27 95       	ror	r18
    5f90:	35 95       	asr	r19
    5f92:	27 95       	ror	r18
    5f94:	35 95       	asr	r19
    5f96:	27 95       	ror	r18
    5f98:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
    5f9a:	39 2f       	mov	r19, r25
    5f9c:	3f 70       	andi	r19, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);

		if(!twelvehour && am_pm)
    5f9e:	b9 2f       	mov	r27, r25
    5fa0:	b0 74       	andi	r27, 0x40	; 64
    5fa2:	cb 2e       	mov	r12, r27
    5fa4:	96 fd       	sbrc	r25, 6
    5fa6:	02 c0       	rjmp	.+4      	; 0x5fac <ds3231_sync2nearestMinute+0xa2>
    5fa8:	41 11       	cpse	r20, r1
		{
			hour10 = 2;
    5faa:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
    5fac:	22 0f       	add	r18, r18
    5fae:	e2 2e       	mov	r14, r18
    5fb0:	ee 0c       	add	r14, r14
    5fb2:	ee 0c       	add	r14, r14
    5fb4:	2e 0d       	add	r18, r14
    5fb6:	e2 2e       	mov	r14, r18
    5fb8:	e3 0e       	add	r14, r19

		if(seconds > 30)
    5fba:	5e e1       	ldi	r21, 0x1E	; 30
    5fbc:	5d 15       	cp	r21, r13
    5fbe:	60 f4       	brcc	.+24     	; 0x5fd8 <ds3231_sync2nearestMinute+0xce>
		{
			minutes++;
    5fc0:	8f 5f       	subi	r24, 0xFF	; 255

			if(minutes > 59)
    5fc2:	8c 33       	cpi	r24, 0x3C	; 60
    5fc4:	48 f0       	brcs	.+18     	; 0x5fd8 <ds3231_sync2nearestMinute+0xce>
			{
				minutes = 0;
				hours++;
    5fc6:	e3 94       	inc	r14

				if(hours > 23) /* Don't attempt to synchronize at midnight */
    5fc8:	87 e1       	ldi	r24, 0x17	; 23
    5fca:	8e 15       	cp	r24, r14
    5fcc:	10 f0       	brcs	.+4      	; 0x5fd2 <ds3231_sync2nearestMinute+0xc8>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    5fce:	80 e0       	ldi	r24, 0x00	; 0
    5fd0:	03 c0       	rjmp	.+6      	; 0x5fd8 <ds3231_sync2nearestMinute+0xce>
    5fd2:	80 e0       	ldi	r24, 0x00	; 0
				hours++;

				if(hours > 23) /* Don't attempt to synchronize at midnight */
				{
					err = true;
    5fd4:	ff 24       	eor	r15, r15
    5fd6:	f3 94       	inc	r15
				}
			}
		}

		if(!err)
    5fd8:	f1 10       	cpse	r15, r1
    5fda:	4c c0       	rjmp	.+152    	; 0x6074 <ds3231_sync2nearestMinute+0x16a>
		{
			data[0] = 0; /* seconds = 00 */
    5fdc:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
    5fde:	0e 94 31 2b 	call	0x5662	; 0x5662 <_Z7dec2bcdh>
    5fe2:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;
    5fe4:	1b 82       	std	Y+3, r1	; 0x03

			if(twelvehour)
    5fe6:	cc 20       	and	r12, r12
    5fe8:	71 f0       	breq	.+28     	; 0x6006 <ds3231_sync2nearestMinute+0xfc>
			{
				data[2] |= 0x40; /* set  12-hour bit */
    5fea:	80 e4       	ldi	r24, 0x40	; 64
    5fec:	8b 83       	std	Y+3, r24	; 0x03

				if(hours >= 12)
    5fee:	9b e0       	ldi	r25, 0x0B	; 11
    5ff0:	9e 15       	cp	r25, r14
    5ff2:	10 f4       	brcc	.+4      	; 0x5ff8 <ds3231_sync2nearestMinute+0xee>
				{
					data[2] |= 0x20; /* set pm bit */
    5ff4:	80 e6       	ldi	r24, 0x60	; 96
    5ff6:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
    5ff8:	a9 e0       	ldi	r26, 0x09	; 9
    5ffa:	ae 15       	cp	r26, r14
    5ffc:	78 f4       	brcc	.+30     	; 0x601c <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10;
    5ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    6000:	80 61       	ori	r24, 0x10	; 16
    6002:	8b 83       	std	Y+3, r24	; 0x03
    6004:	0b c0       	rjmp	.+22     	; 0x601c <ds3231_sync2nearestMinute+0x112>
				}
			}
			else
			{
				if(hours >= 20)
    6006:	b3 e1       	ldi	r27, 0x13	; 19
    6008:	be 15       	cp	r27, r14
    600a:	18 f4       	brcc	.+6      	; 0x6012 <ds3231_sync2nearestMinute+0x108>
				{
					data[2] |= 0x20; /* set 20 bit */
    600c:	80 e2       	ldi	r24, 0x20	; 32
    600e:	8b 83       	std	Y+3, r24	; 0x03
    6010:	05 c0       	rjmp	.+10     	; 0x601c <ds3231_sync2nearestMinute+0x112>
				}
				else if(hours >= 10)
    6012:	59 e0       	ldi	r21, 0x09	; 9
    6014:	5e 15       	cp	r21, r14
    6016:	10 f4       	brcc	.+4      	; 0x601c <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10; /* set 10 bit */
    6018:	80 e1       	ldi	r24, 0x10	; 16
    601a:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
    601c:	8d ec       	ldi	r24, 0xCD	; 205
    601e:	e8 9e       	mul	r14, r24
    6020:	81 2d       	mov	r24, r1
    6022:	11 24       	eor	r1, r1
    6024:	86 95       	lsr	r24
    6026:	86 95       	lsr	r24
    6028:	86 95       	lsr	r24
    602a:	88 0f       	add	r24, r24
    602c:	98 2f       	mov	r25, r24
    602e:	99 0f       	add	r25, r25
    6030:	99 0f       	add	r25, r25
    6032:	89 0f       	add	r24, r25
    6034:	e8 1a       	sub	r14, r24
    6036:	2b 81       	ldd	r18, Y+3	; 0x03
    6038:	e2 2a       	or	r14, r18
    603a:	eb 82       	std	Y+3, r14	; 0x03
			
			while(tries-- && (err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4)));
    603c:	ee 24       	eor	r14, r14
    603e:	ea 94       	dec	r14
    6040:	e1 0e       	add	r14, r17
    6042:	11 23       	and	r17, r17
    6044:	89 f0       	breq	.+34     	; 0x6068 <ds3231_sync2nearestMinute+0x15e>
    6046:	24 e0       	ldi	r18, 0x04	; 4
    6048:	ae 01       	movw	r20, r28
    604a:	4f 5f       	subi	r20, 0xFF	; 255
    604c:	5f 4f       	sbci	r21, 0xFF	; 255
    604e:	60 e0       	ldi	r22, 0x00	; 0
    6050:	80 ed       	ldi	r24, 0xD0	; 208
    6052:	0e 94 5f 35 	call	0x6abe	; 0x6abe <I2C_0_SendData>
    6056:	ff 24       	eor	r15, r15
    6058:	f3 94       	inc	r15
    605a:	84 30       	cpi	r24, 0x04	; 4
    605c:	09 f4       	brne	.+2      	; 0x6060 <ds3231_sync2nearestMinute+0x156>
    605e:	f1 2c       	mov	r15, r1
    6060:	84 30       	cpi	r24, 0x04	; 4
    6062:	21 f0       	breq	.+8      	; 0x606c <ds3231_sync2nearestMinute+0x162>
    6064:	81 e0       	ldi	r24, 0x01	; 1
    6066:	03 c0       	rjmp	.+6      	; 0x606e <ds3231_sync2nearestMinute+0x164>
    6068:	80 2f       	mov	r24, r16
    606a:	01 c0       	rjmp	.+2      	; 0x606e <ds3231_sync2nearestMinute+0x164>
    606c:	80 2f       	mov	r24, r16
    606e:	1e 2d       	mov	r17, r14
    6070:	81 11       	cpse	r24, r1
    6072:	e4 cf       	rjmp	.-56     	; 0x603c <ds3231_sync2nearestMinute+0x132>
		}
	}

	return err;
}
    6074:	8f 2d       	mov	r24, r15
    6076:	28 96       	adiw	r28, 0x08	; 8
    6078:	cd bf       	out	0x3d, r28	; 61
    607a:	de bf       	out	0x3e, r29	; 62
    607c:	df 91       	pop	r29
    607e:	cf 91       	pop	r28
    6080:	1f 91       	pop	r17
    6082:	0f 91       	pop	r16
    6084:	ff 90       	pop	r15
    6086:	ef 90       	pop	r14
    6088:	df 90       	pop	r13
    608a:	cf 90       	pop	r12
    608c:	08 95       	ret

0000608e <convertEpochToTimeString>:
/**
 *   Converts an epoch (seconds since 1900)  into a string with format "ddd dd-mon-yyyy hh:mm:ss zzz"
 */
#define THIRTY_YEARS 946684800
char* convertEpochToTimeString(time_t epoch, char* buf, size_t size)
 {
    608e:	ef 92       	push	r14
    6090:	ff 92       	push	r15
    6092:	0f 93       	push	r16
    6094:	1f 93       	push	r17
    6096:	cf 93       	push	r28
    6098:	df 93       	push	r29
    609a:	cd b7       	in	r28, 0x3d	; 61
    609c:	de b7       	in	r29, 0x3e	; 62
    609e:	60 97       	sbiw	r28, 0x10	; 16
    60a0:	cd bf       	out	0x3d, r28	; 61
    60a2:	de bf       	out	0x3e, r29	; 62
    60a4:	8a 01       	movw	r16, r20
    60a6:	79 01       	movw	r14, r18
   struct tm  ts;
	time_t t = epoch - THIRTY_YEARS;
    60a8:	dc 01       	movw	r26, r24
    60aa:	cb 01       	movw	r24, r22
    60ac:	80 58       	subi	r24, 0x80	; 128
    60ae:	93 44       	sbci	r25, 0x43	; 67
    60b0:	ad 46       	sbci	r26, 0x6D	; 109
    60b2:	b8 43       	sbci	r27, 0x38	; 56
    60b4:	8d 87       	std	Y+13, r24	; 0x0d
    60b6:	9e 87       	std	Y+14, r25	; 0x0e
    60b8:	af 87       	std	Y+15, r26	; 0x0f
    60ba:	b8 8b       	std	Y+16, r27	; 0x10

    // Format time, "ddd dd-mon-yyyy hh:mm:ss zzz"
    ts = *localtime(&t);
    60bc:	ce 01       	movw	r24, r28
    60be:	0d 96       	adiw	r24, 0x0d	; 13
    60c0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <localtime>
    60c4:	fc 01       	movw	r30, r24
    60c6:	9c e0       	ldi	r25, 0x0C	; 12
    60c8:	de 01       	movw	r26, r28
    60ca:	11 96       	adiw	r26, 0x01	; 1
    60cc:	01 90       	ld	r0, Z+
    60ce:	0d 92       	st	X+, r0
    60d0:	9a 95       	dec	r25
    60d2:	e1 f7       	brne	.-8      	; 0x60cc <convertEpochToTimeString+0x3e>
    strftime(buf, size, "%a %d-%b-%Y %H:%M:%S", &ts);
    60d4:	9e 01       	movw	r18, r28
    60d6:	2f 5f       	subi	r18, 0xFF	; 255
    60d8:	3f 4f       	sbci	r19, 0xFF	; 255
    60da:	4c e9       	ldi	r20, 0x9C	; 156
    60dc:	54 e4       	ldi	r21, 0x44	; 68
    60de:	b7 01       	movw	r22, r14
    60e0:	c8 01       	movw	r24, r16
    60e2:	0e 94 99 02 	call	0x532	; 0x532 <strftime>
   return buf;
 }
    60e6:	c8 01       	movw	r24, r16
    60e8:	60 96       	adiw	r28, 0x10	; 16
    60ea:	cd bf       	out	0x3d, r28	; 61
    60ec:	de bf       	out	0x3e, r29	; 62
    60ee:	df 91       	pop	r29
    60f0:	cf 91       	pop	r28
    60f2:	1f 91       	pop	r17
    60f4:	0f 91       	pop	r16
    60f6:	ff 90       	pop	r15
    60f8:	ef 90       	pop	r14
    60fa:	08 95       	ret

000060fc <_ZN13EepromManagerC1Ev>:
extern uint16_t g_80m_power_level_mW;

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
    60fc:	08 95       	ret

000060fe <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
    60fe:	08 95       	ret

00006100 <_Z21avr_eeprom_write_bytejh>:
#include <avr/io.h>

typedef uint16_t eeprom_addr_t;

// to write
void avr_eeprom_write_byte(eeprom_addr_t index, uint8_t in) {
    6100:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    6102:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    6106:	91 fd       	sbrc	r25, 1
    6108:	fc cf       	rjmp	.-8      	; 0x6102 <_Z21avr_eeprom_write_bytejh+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    610a:	8d e9       	ldi	r24, 0x9D	; 157
    610c:	93 e1       	ldi	r25, 0x13	; 19
    610e:	84 bf       	out	0x34, r24	; 52
    6110:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    6114:	f9 01       	movw	r30, r18
    6116:	fc 5e       	subi	r31, 0xEC	; 236
    6118:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	84 bf       	out	0x34, r24	; 52
    611e:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    6122:	08 95       	ret

00006124 <_Z21avr_eeprom_write_wordjj>:
}

void avr_eeprom_write_word(eeprom_addr_t index, uint16_t in) {
    6124:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    6126:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    612a:	91 fd       	sbrc	r25, 1
    612c:	fc cf       	rjmp	.-8      	; 0x6126 <_Z21avr_eeprom_write_wordjj+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    612e:	8d e9       	ldi	r24, 0x9D	; 157
    6130:	93 e1       	ldi	r25, 0x13	; 19
    6132:	84 bf       	out	0x34, r24	; 52
    6134:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint16_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    6138:	f9 01       	movw	r30, r18
    613a:	fc 5e       	subi	r31, 0xEC	; 236
    613c:	60 83       	st	Z, r22
    613e:	71 83       	std	Z+1, r23	; 0x01
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	84 bf       	out	0x34, r24	; 52
    6144:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    6148:	08 95       	ret

0000614a <_Z22avr_eeprom_write_dwordjm>:
}

void avr_eeprom_write_dword(eeprom_addr_t index, uint32_t in) {
    614a:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    614c:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    6150:	91 fd       	sbrc	r25, 1
    6152:	fc cf       	rjmp	.-8      	; 0x614c <_Z22avr_eeprom_write_dwordjm+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    6154:	8d e9       	ldi	r24, 0x9D	; 157
    6156:	93 e1       	ldi	r25, 0x13	; 19
    6158:	84 bf       	out	0x34, r24	; 52
    615a:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint32_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    615e:	f9 01       	movw	r30, r18
    6160:	fc 5e       	subi	r31, 0xEC	; 236
    6162:	40 83       	st	Z, r20
    6164:	51 83       	std	Z+1, r21	; 0x01
    6166:	62 83       	std	Z+2, r22	; 0x02
    6168:	73 83       	std	Z+3, r23	; 0x03
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	84 bf       	out	0x34, r24	; 52
    616e:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    6172:	08 95       	ret

00006174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
}

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
    6174:	0f 93       	push	r16
    6176:	1f 93       	push	r17
    6178:	cf 93       	push	r28
    617a:	df 93       	push	r29
	if(!val)
    617c:	41 15       	cp	r20, r1
    617e:	51 05       	cpc	r21, r1
    6180:	09 f4       	brne	.+2      	; 0x6184 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
    6182:	7c c0       	rjmp	.+248    	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
	{
		return;
	}

	switch(v)
    6184:	86 2f       	mov	r24, r22
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	84 33       	cpi	r24, 0x34	; 52
    618a:	91 05       	cpc	r25, r1
    618c:	08 f0       	brcs	.+2      	; 0x6190 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x1c>
    618e:	76 c0       	rjmp	.+236    	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
    6190:	ea 01       	movw	r28, r20
    6192:	fc 01       	movw	r30, r24
    6194:	eb 57       	subi	r30, 0x7B	; 123
    6196:	ff 4f       	sbci	r31, 0xFF	; 255
    6198:	0c 94 95 4c 	jmp	0x992a	; 0x992a <__tablejump2__>
	{
		case Frequency:
		{
			avr_eeprom_write_dword(Frequency, *(uint32_t*)val);
    619c:	48 81       	ld	r20, Y
    619e:	59 81       	ldd	r21, Y+1	; 0x01
    61a0:	6a 81       	ldd	r22, Y+2	; 0x02
    61a2:	7b 81       	ldd	r23, Y+3	; 0x03
    61a4:	8b e2       	ldi	r24, 0x2B	; 43
    61a6:	90 e0       	ldi	r25, 0x00	; 0
    61a8:	0e 94 a5 30 	call	0x614a	; 0x614a <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    61ac:	67 c0       	rjmp	.+206    	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RTTY_offset:
		{
			avr_eeprom_write_dword(RTTY_offset, *(uint32_t*)val);
    61ae:	48 81       	ld	r20, Y
    61b0:	59 81       	ldd	r21, Y+1	; 0x01
    61b2:	6a 81       	ldd	r22, Y+2	; 0x02
    61b4:	7b 81       	ldd	r23, Y+3	; 0x03
    61b6:	8f e2       	ldi	r24, 0x2F	; 47
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	0e 94 a5 30 	call	0x614a	; 0x614a <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    61be:	5e c0       	rjmp	.+188    	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RF_Power:
		{
			avr_eeprom_write_word(RF_Power, *(uint32_t*)val);			
    61c0:	68 81       	ld	r22, Y
    61c2:	79 81       	ldd	r23, Y+1	; 0x01
    61c4:	83 e3       	ldi	r24, 0x33	; 51
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	0e 94 92 30 	call	0x6124	; 0x6124 <_Z21avr_eeprom_write_wordjj>
		}
		break;
    61cc:	57 c0       	rjmp	.+174    	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
    61ce:	8a 01       	movw	r16, r20
    61d0:	0f 5f       	subi	r16, 0xFF	; 255
    61d2:	1f 4f       	sbci	r17, 0xFF	; 255
    61d4:	68 81       	ld	r22, Y
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;
    61d6:	8a e0       	ldi	r24, 0x0A	; 10
    61d8:	90 e0       	ldi	r25, 0x00	; 0

			while(c)
    61da:	66 23       	and	r22, r22
    61dc:	51 f0       	breq	.+20     	; 0x61f2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x7e>
			{
				avr_eeprom_write_byte(j++, c);
    61de:	ec 01       	movw	r28, r24
    61e0:	21 96       	adiw	r28, 0x01	; 1
    61e2:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>
				c = *char_addr++;
    61e6:	f8 01       	movw	r30, r16
    61e8:	60 81       	ld	r22, Z
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
			{
				avr_eeprom_write_byte(j++, c);
    61ea:	ce 01       	movw	r24, r28
				c = *char_addr++;
    61ec:	0f 5f       	subi	r16, 0xFF	; 255
    61ee:	1f 4f       	sbci	r17, 0xFF	; 255
			char* char_addr = (char*)val;
			char c = *char_addr++;
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
    61f0:	f4 cf       	rjmp	.-24     	; 0x61da <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x66>
			{
				avr_eeprom_write_byte(j++, c);
				c = *char_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    61f2:	60 e0       	ldi	r22, 0x00	; 0
    61f4:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    61f8:	41 c0       	rjmp	.+130    	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
    61fa:	8a 01       	movw	r16, r20
    61fc:	0f 5f       	subi	r16, 0xFF	; 255
    61fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6200:	68 81       	ld	r22, Y
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
    6202:	8f e1       	ldi	r24, 0x1F	; 31
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    6204:	66 23       	and	r22, r22
    6206:	59 f0       	breq	.+22     	; 0x621e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				avr_eeprom_write_byte(j++, c);
    6208:	c1 e0       	ldi	r28, 0x01	; 1
    620a:	c8 0f       	add	r28, r24
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>
				c = *uint8_addr++;
    6212:	f8 01       	movw	r30, r16
    6214:	60 81       	ld	r22, Z
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
			{
				avr_eeprom_write_byte(j++, c);
    6216:	8c 2f       	mov	r24, r28
				c = *uint8_addr++;
    6218:	0f 5f       	subi	r16, 0xFF	; 255
    621a:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    621c:	f3 cf       	rjmp	.-26     	; 0x6204 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x90>
			{
				avr_eeprom_write_byte(j++, c);
				c = *uint8_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    621e:	60 e0       	ldi	r22, 0x00	; 0
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6226:	2a c0       	rjmp	.+84     	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Id_codespeed:
		{
			avr_eeprom_write_byte(Id_codespeed, *(uint8_t*)val);
    6228:	68 81       	ld	r22, Y
    622a:	88 e2       	ldi	r24, 0x28	; 40
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6232:	24 c0       	rjmp	.+72     	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Fox_setting:
		{
			avr_eeprom_write_byte(Fox_setting, *(uint8_t*)val);
    6234:	68 81       	ld	r22, Y
    6236:	89 e2       	ldi	r24, 0x29	; 41
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    623e:	1e c0       	rjmp	.+60     	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_start_epoch:
		{
			avr_eeprom_write_dword(Event_start_epoch, *(uint32_t*)val);
    6240:	48 81       	ld	r20, Y
    6242:	59 81       	ldd	r21, Y+1	; 0x01
    6244:	6a 81       	ldd	r22, Y+2	; 0x02
    6246:	7b 81       	ldd	r23, Y+3	; 0x03
    6248:	82 e0       	ldi	r24, 0x02	; 2
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	0e 94 a5 30 	call	0x614a	; 0x614a <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6250:	15 c0       	rjmp	.+42     	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_finish_epoch:
		{
			avr_eeprom_write_dword(Event_finish_epoch, *(uint32_t*)val);
    6252:	48 81       	ld	r20, Y
    6254:	59 81       	ldd	r21, Y+1	; 0x01
    6256:	6a 81       	ldd	r22, Y+2	; 0x02
    6258:	7b 81       	ldd	r23, Y+3	; 0x03
    625a:	86 e0       	ldi	r24, 0x06	; 6
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	0e 94 a5 30 	call	0x614a	; 0x614a <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6262:	0c c0       	rjmp	.+24     	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Utc_offset:
		{
			avr_eeprom_write_byte(Utc_offset, *(uint8_t*)val);
    6264:	68 81       	ld	r22, Y
    6266:	8a e2       	ldi	r24, 0x2A	; 42
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    626e:	06 c0       	rjmp	.+12     	; 0x627c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Eeprom_initialization_flag:
		{
			avr_eeprom_write_word(Eeprom_initialization_flag, *(uint16_t*)val);
    6270:	68 81       	ld	r22, Y
    6272:	79 81       	ldd	r23, Y+1	; 0x01
    6274:	80 e0       	ldi	r24, 0x00	; 0
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	0e 94 92 30 	call	0x6124	; 0x6124 <_Z21avr_eeprom_write_wordjj>
		{

		}
		break;
	}
}
    627c:	df 91       	pop	r29
    627e:	cf 91       	pop	r28
    6280:	1f 91       	pop	r17
    6282:	0f 91       	pop	r16
    6284:	08 95       	ret

00006286 <_ZN13EepromManager13saveAllEEPROMEv>:

/** 
 * Store any changed EEPROM variables
 */
void EepromManager::saveAllEEPROM(void)
{
    6286:	ef 92       	push	r14
    6288:	ff 92       	push	r15
    628a:	0f 93       	push	r16
    628c:	1f 93       	push	r17
    628e:	cf 93       	push	r28
    6290:	df 93       	push	r29
    6292:	7c 01       	movw	r14, r24
	uint16_t i;
	
	if(g_id_codespeed != eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)))
    6294:	88 e2       	ldi	r24, 0x28	; 40
    6296:	90 e0       	ldi	r25, 0x00	; 0
    6298:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    629c:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <g_id_codespeed>
    62a0:	89 17       	cp	r24, r25
    62a2:	31 f0       	breq	.+12     	; 0x62b0 <_ZN13EepromManager13saveAllEEPROMEv+0x2a>
	{
		updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    62a4:	4b e0       	ldi	r20, 0x0B	; 11
    62a6:	50 e4       	ldi	r21, 0x40	; 64
    62a8:	68 e2       	ldi	r22, 0x28	; 40
    62aa:	c7 01       	movw	r24, r14
    62ac:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_fox != eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)))
    62b0:	89 e2       	ldi	r24, 0x29	; 41
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    62b8:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <g_fox>
    62bc:	89 17       	cp	r24, r25
    62be:	31 f0       	breq	.+12     	; 0x62cc <_ZN13EepromManager13saveAllEEPROMEv+0x46>
	{
		updateEEPROMVar(Fox_setting, (void*)&g_fox);
    62c0:	4b e1       	ldi	r20, 0x1B	; 27
    62c2:	50 e4       	ldi	r21, 0x40	; 64
    62c4:	69 e2       	ldi	r22, 0x29	; 41
    62c6:	c7 01       	movw	r24, r14
    62c8:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_start_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch)))
    62cc:	82 e0       	ldi	r24, 0x02	; 2
    62ce:	90 e0       	ldi	r25, 0x00	; 0
    62d0:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <eeprom_read_dword>
    62d4:	00 91 7d 47 	lds	r16, 0x477D	; 0x80477d <g_event_start_epoch>
    62d8:	10 91 7e 47 	lds	r17, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    62dc:	20 91 7f 47 	lds	r18, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    62e0:	30 91 80 47 	lds	r19, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    62e4:	60 17       	cp	r22, r16
    62e6:	71 07       	cpc	r23, r17
    62e8:	82 07       	cpc	r24, r18
    62ea:	93 07       	cpc	r25, r19
    62ec:	31 f0       	breq	.+12     	; 0x62fa <_ZN13EepromManager13saveAllEEPROMEv+0x74>
	{
		updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    62ee:	4d e7       	ldi	r20, 0x7D	; 125
    62f0:	57 e4       	ldi	r21, 0x47	; 71
    62f2:	62 e0       	ldi	r22, 0x02	; 2
    62f4:	c7 01       	movw	r24, r14
    62f6:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_finish_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch)))
    62fa:	86 e0       	ldi	r24, 0x06	; 6
    62fc:	90 e0       	ldi	r25, 0x00	; 0
    62fe:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <eeprom_read_dword>
    6302:	00 91 81 47 	lds	r16, 0x4781	; 0x804781 <g_event_finish_epoch>
    6306:	10 91 82 47 	lds	r17, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    630a:	20 91 83 47 	lds	r18, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    630e:	30 91 84 47 	lds	r19, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    6312:	60 17       	cp	r22, r16
    6314:	71 07       	cpc	r23, r17
    6316:	82 07       	cpc	r24, r18
    6318:	93 07       	cpc	r25, r19
    631a:	31 f0       	breq	.+12     	; 0x6328 <_ZN13EepromManager13saveAllEEPROMEv+0xa2>
	{
		updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    631c:	41 e8       	ldi	r20, 0x81	; 129
    631e:	57 e4       	ldi	r21, 0x47	; 71
    6320:	66 e0       	ldi	r22, 0x06	; 6
    6322:	c7 01       	movw	r24, r14
    6324:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
    6328:	c0 91 85 47 	lds	r28, 0x4785	; 0x804785 <g_utc_offset>
    632c:	0c 2e       	mov	r0, r28
    632e:	00 0c       	add	r0, r0
    6330:	dd 0b       	sbc	r29, r29
    6332:	8a e2       	ldi	r24, 0x2A	; 42
    6334:	90 e0       	ldi	r25, 0x00	; 0
    6336:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	c8 17       	cp	r28, r24
    633e:	d9 07       	cpc	r29, r25
    6340:	31 f0       	breq	.+12     	; 0x634e <_ZN13EepromManager13saveAllEEPROMEv+0xc8>
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    6342:	45 e8       	ldi	r20, 0x85	; 133
    6344:	57 e4       	ldi	r21, 0x47	; 71
    6346:	6a e2       	ldi	r22, 0x2A	; 42
    6348:	c7 01       	movw	r24, r14
    634a:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    634e:	c0 e0       	ldi	r28, 0x00	; 0
    6350:	d0 e0       	ldi	r29, 0x00	; 0
    6352:	c4 31       	cpi	r28, 0x14	; 20
    6354:	d1 05       	cpc	r29, r1
    6356:	a0 f4       	brcc	.+40     	; 0x6380 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	{
		if(g_messages_text[STATION_ID][i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i]))))
    6358:	fe 01       	movw	r30, r28
    635a:	ee 5c       	subi	r30, 0xCE	; 206
    635c:	f8 4b       	sbci	r31, 0xB8	; 184
    635e:	15 89       	ldd	r17, Z+21	; 0x15
    6360:	ce 01       	movw	r24, r28
    6362:	86 5f       	subi	r24, 0xF6	; 246
    6364:	9f 4f       	sbci	r25, 0xFF	; 255
    6366:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    636a:	18 17       	cp	r17, r24
    636c:	39 f0       	breq	.+14     	; 0x637c <_ZN13EepromManager13saveAllEEPROMEv+0xf6>
		{
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    636e:	47 e4       	ldi	r20, 0x47	; 71
    6370:	57 e4       	ldi	r21, 0x47	; 71
    6372:	6a e0       	ldi	r22, 0x0A	; 10
    6374:	c7 01       	movw	r24, r14
    6376:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    637a:	02 c0       	rjmp	.+4      	; 0x6380 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    637c:	21 96       	adiw	r28, 0x01	; 1
    637e:	e9 cf       	rjmp	.-46     	; 0x6352 <_ZN13EepromManager13saveAllEEPROMEv+0xcc>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6380:	c0 e0       	ldi	r28, 0x00	; 0
    6382:	d0 e0       	ldi	r29, 0x00	; 0
    6384:	c8 30       	cpi	r28, 0x08	; 8
    6386:	d1 05       	cpc	r29, r1
    6388:	a0 f4       	brcc	.+40     	; 0x63b2 <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
	{
		if(g_unlockCode[i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i]))))
    638a:	fe 01       	movw	r30, r28
    638c:	ea 57       	subi	r30, 0x7A	; 122
    638e:	f8 4b       	sbci	r31, 0xB8	; 184
    6390:	10 81       	ld	r17, Z
    6392:	ce 01       	movw	r24, r28
    6394:	81 5e       	subi	r24, 0xE1	; 225
    6396:	9f 4f       	sbci	r25, 0xFF	; 255
    6398:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    639c:	18 17       	cp	r17, r24
    639e:	39 f0       	breq	.+14     	; 0x63ae <_ZN13EepromManager13saveAllEEPROMEv+0x128>
		{
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    63a0:	46 e8       	ldi	r20, 0x86	; 134
    63a2:	57 e4       	ldi	r21, 0x47	; 71
    63a4:	6f e1       	ldi	r22, 0x1F	; 31
    63a6:	c7 01       	movw	r24, r14
    63a8:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    63ac:	02 c0       	rjmp	.+4      	; 0x63b2 <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    63ae:	21 96       	adiw	r28, 0x01	; 1
    63b0:	e9 cf       	rjmp	.-46     	; 0x6384 <_ZN13EepromManager13saveAllEEPROMEv+0xfe>
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
			break;
		}
	}
	
	if(g_80m_frequency != eeprom_read_dword(&(EepromManager::ee_vars.frequency)))
    63b2:	8b e2       	ldi	r24, 0x2B	; 43
    63b4:	90 e0       	ldi	r25, 0x00	; 0
    63b6:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <eeprom_read_dword>
    63ba:	00 91 2c 40 	lds	r16, 0x402C	; 0x80402c <g_80m_frequency>
    63be:	10 91 2d 40 	lds	r17, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    63c2:	20 91 2e 40 	lds	r18, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    63c6:	30 91 2f 40 	lds	r19, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    63ca:	60 17       	cp	r22, r16
    63cc:	71 07       	cpc	r23, r17
    63ce:	82 07       	cpc	r24, r18
    63d0:	93 07       	cpc	r25, r19
    63d2:	31 f0       	breq	.+12     	; 0x63e0 <_ZN13EepromManager13saveAllEEPROMEv+0x15a>
	{
		updateEEPROMVar(Frequency, (void*)&g_80m_frequency);
    63d4:	4c e2       	ldi	r20, 0x2C	; 44
    63d6:	50 e4       	ldi	r21, 0x40	; 64
    63d8:	6b e2       	ldi	r22, 0x2B	; 43
    63da:	c7 01       	movw	r24, r14
    63dc:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_rtty_offset != eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset)))
    63e0:	8f e2       	ldi	r24, 0x2F	; 47
    63e2:	90 e0       	ldi	r25, 0x00	; 0
    63e4:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <eeprom_read_dword>
    63e8:	00 91 32 40 	lds	r16, 0x4032	; 0x804032 <g_rtty_offset>
    63ec:	10 91 33 40 	lds	r17, 0x4033	; 0x804033 <g_rtty_offset+0x1>
    63f0:	20 91 34 40 	lds	r18, 0x4034	; 0x804034 <g_rtty_offset+0x2>
    63f4:	30 91 35 40 	lds	r19, 0x4035	; 0x804035 <g_rtty_offset+0x3>
    63f8:	60 17       	cp	r22, r16
    63fa:	71 07       	cpc	r23, r17
    63fc:	82 07       	cpc	r24, r18
    63fe:	93 07       	cpc	r25, r19
    6400:	31 f0       	breq	.+12     	; 0x640e <_ZN13EepromManager13saveAllEEPROMEv+0x188>
	{
		updateEEPROMVar(RTTY_offset, (void*)&g_rtty_offset);
    6402:	42 e3       	ldi	r20, 0x32	; 50
    6404:	50 e4       	ldi	r21, 0x40	; 64
    6406:	6f e2       	ldi	r22, 0x2F	; 47
    6408:	c7 01       	movw	r24, r14
    640a:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
    640e:	83 e3       	ldi	r24, 0x33	; 51
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	0e 94 f7 52 	call	0xa5ee	; 0xa5ee <eeprom_read_word>
    6416:	20 91 30 40 	lds	r18, 0x4030	; 0x804030 <g_80m_power_level_mW>
    641a:	30 91 31 40 	lds	r19, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    641e:	82 17       	cp	r24, r18
    6420:	93 07       	cpc	r25, r19
    6422:	31 f0       	breq	.+12     	; 0x6430 <_ZN13EepromManager13saveAllEEPROMEv+0x1aa>
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
    6424:	40 e3       	ldi	r20, 0x30	; 48
    6426:	50 e4       	ldi	r21, 0x40	; 64
    6428:	63 e3       	ldi	r22, 0x33	; 51
    642a:	c7 01       	movw	r24, r14
    642c:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
}
    6430:	df 91       	pop	r29
    6432:	cf 91       	pop	r28
    6434:	1f 91       	pop	r17
    6436:	0f 91       	pop	r16
    6438:	ff 90       	pop	r15
    643a:	ef 90       	pop	r14
    643c:	08 95       	ret

0000643e <_ZN13EepromManager11readNonVolsEv>:


bool EepromManager::readNonVols(void)
{
    643e:	cf 93       	push	r28
    6440:	df 93       	push	r29
	bool failure = true;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    6442:	80 e0       	ldi	r24, 0x00	; 0
    6444:	90 e0       	ldi	r25, 0x00	; 0
    6446:	0e 94 f7 52 	call	0xa5ee	; 0xa5ee <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    644a:	8e 3c       	cpi	r24, 0xCE	; 206
    644c:	91 05       	cpc	r25, r1
    644e:	09 f0       	breq	.+2      	; 0x6452 <_ZN13EepromManager11readNonVolsEv+0x14>
    6450:	dc c0       	rjmp	.+440    	; 0x660a <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    6452:	88 e2       	ldi	r24, 0x28	; 40
    6454:	90 e0       	ldi	r25, 0x00	; 0
    6456:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    645a:	85 31       	cpi	r24, 0x15	; 21
    645c:	20 f4       	brcc	.+8      	; 0x6466 <_ZN13EepromManager11readNonVolsEv+0x28>
    645e:	85 30       	cpi	r24, 0x05	; 5
    6460:	18 f4       	brcc	.+6      	; 0x6468 <_ZN13EepromManager11readNonVolsEv+0x2a>
    6462:	85 e0       	ldi	r24, 0x05	; 5
    6464:	01 c0       	rjmp	.+2      	; 0x6468 <_ZN13EepromManager11readNonVolsEv+0x2a>
    6466:	84 e1       	ldi	r24, 0x14	; 20
    6468:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    646c:	89 e2       	ldi	r24, 0x29	; 41
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    6474:	82 31       	cpi	r24, 0x12	; 18
    6476:	08 f0       	brcs	.+2      	; 0x647a <_ZN13EepromManager11readNonVolsEv+0x3c>
    6478:	81 e1       	ldi	r24, 0x11	; 17
    647a:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    647e:	82 e0       	ldi	r24, 0x02	; 2
    6480:	90 e0       	ldi	r25, 0x00	; 0
    6482:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <eeprom_read_dword>
    6486:	60 93 7d 47 	sts	0x477D, r22	; 0x80477d <g_event_start_epoch>
    648a:	70 93 7e 47 	sts	0x477E, r23	; 0x80477e <g_event_start_epoch+0x1>
    648e:	80 93 7f 47 	sts	0x477F, r24	; 0x80477f <g_event_start_epoch+0x2>
    6492:	90 93 80 47 	sts	0x4780, r25	; 0x804780 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    6496:	86 e0       	ldi	r24, 0x06	; 6
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <eeprom_read_dword>
    649e:	60 93 81 47 	sts	0x4781, r22	; 0x804781 <g_event_finish_epoch>
    64a2:	70 93 82 47 	sts	0x4782, r23	; 0x804782 <g_event_finish_epoch+0x1>
    64a6:	80 93 83 47 	sts	0x4783, r24	; 0x804783 <g_event_finish_epoch+0x2>
    64aa:	90 93 84 47 	sts	0x4784, r25	; 0x804784 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    64ae:	8a e2       	ldi	r24, 0x2A	; 42
    64b0:	90 e0       	ldi	r25, 0x00	; 0
    64b2:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    64b6:	80 93 85 47 	sts	0x4785, r24	; 0x804785 <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    64ba:	c0 e0       	ldi	r28, 0x00	; 0
    64bc:	d0 e0       	ldi	r29, 0x00	; 0
    64be:	c4 31       	cpi	r28, 0x14	; 20
    64c0:	d1 05       	cpc	r29, r1
    64c2:	58 f4       	brcc	.+22     	; 0x64da <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    64c4:	ce 01       	movw	r24, r28
    64c6:	86 5f       	subi	r24, 0xF6	; 246
    64c8:	9f 4f       	sbci	r25, 0xFF	; 255
    64ca:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    64ce:	fe 01       	movw	r30, r28
    64d0:	ee 5c       	subi	r30, 0xCE	; 206
    64d2:	f8 4b       	sbci	r31, 0xB8	; 184
    64d4:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    64d6:	81 11       	cpse	r24, r1
    64d8:	03 c0       	rjmp	.+6      	; 0x64e0 <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    64da:	c0 e0       	ldi	r28, 0x00	; 0
    64dc:	d0 e0       	ldi	r29, 0x00	; 0
    64de:	02 c0       	rjmp	.+4      	; 0x64e4 <_ZN13EepromManager11readNonVolsEv+0xa6>
    64e0:	21 96       	adiw	r28, 0x01	; 1
    64e2:	ed cf       	rjmp	.-38     	; 0x64be <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    64e4:	c8 30       	cpi	r28, 0x08	; 8
    64e6:	d1 05       	cpc	r29, r1
    64e8:	68 f4       	brcc	.+26     	; 0x6504 <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    64ea:	ce 01       	movw	r24, r28
    64ec:	81 5e       	subi	r24, 0xE1	; 225
    64ee:	9f 4f       	sbci	r25, 0xFF	; 255
    64f0:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <eeprom_read_byte>
    64f4:	fe 01       	movw	r30, r28
    64f6:	ea 57       	subi	r30, 0x7A	; 122
    64f8:	f8 4b       	sbci	r31, 0xB8	; 184
    64fa:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    64fc:	88 23       	and	r24, r24
    64fe:	11 f0       	breq	.+4      	; 0x6504 <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6500:	21 96       	adiw	r28, 0x01	; 1
    6502:	f0 cf       	rjmp	.-32     	; 0x64e4 <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    6504:	8b e2       	ldi	r24, 0x2B	; 43
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <eeprom_read_dword>
    650c:	61 30       	cpi	r22, 0x01	; 1
    650e:	29 e0       	ldi	r18, 0x09	; 9
    6510:	72 07       	cpc	r23, r18
    6512:	2d e3       	ldi	r18, 0x3D	; 61
    6514:	82 07       	cpc	r24, r18
    6516:	91 05       	cpc	r25, r1
    6518:	60 f4       	brcc	.+24     	; 0x6532 <_ZN13EepromManager11readNonVolsEv+0xf4>
    651a:	60 3e       	cpi	r22, 0xE0	; 224
    651c:	27 e6       	ldi	r18, 0x67	; 103
    651e:	72 07       	cpc	r23, r18
    6520:	25 e3       	ldi	r18, 0x35	; 53
    6522:	82 07       	cpc	r24, r18
    6524:	91 05       	cpc	r25, r1
    6526:	50 f4       	brcc	.+20     	; 0x653c <_ZN13EepromManager11readNonVolsEv+0xfe>
    6528:	40 ee       	ldi	r20, 0xE0	; 224
    652a:	37 e6       	ldi	r19, 0x67	; 103
    652c:	25 e3       	ldi	r18, 0x35	; 53
    652e:	80 e0       	ldi	r24, 0x00	; 0
    6530:	09 c0       	rjmp	.+18     	; 0x6544 <_ZN13EepromManager11readNonVolsEv+0x106>
    6532:	40 e0       	ldi	r20, 0x00	; 0
    6534:	39 e0       	ldi	r19, 0x09	; 9
    6536:	2d e3       	ldi	r18, 0x3D	; 61
    6538:	80 e0       	ldi	r24, 0x00	; 0
    653a:	04 c0       	rjmp	.+8      	; 0x6544 <_ZN13EepromManager11readNonVolsEv+0x106>
    653c:	46 2f       	mov	r20, r22
    653e:	37 2f       	mov	r19, r23
    6540:	28 2f       	mov	r18, r24
    6542:	89 2f       	mov	r24, r25
    6544:	40 93 2c 40 	sts	0x402C, r20	; 0x80402c <g_80m_frequency>
    6548:	30 93 2d 40 	sts	0x402D, r19	; 0x80402d <g_80m_frequency+0x1>
    654c:	20 93 2e 40 	sts	0x402E, r18	; 0x80402e <g_80m_frequency+0x2>
    6550:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    6554:	8f e2       	ldi	r24, 0x2F	; 47
    6556:	90 e0       	ldi	r25, 0x00	; 0
    6558:	0e 94 f0 52 	call	0xa5e0	; 0xa5e0 <eeprom_read_dword>
    655c:	60 93 32 40 	sts	0x4032, r22	; 0x804032 <g_rtty_offset>
    6560:	70 93 33 40 	sts	0x4033, r23	; 0x804033 <g_rtty_offset+0x1>
    6564:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <g_rtty_offset+0x2>
    6568:	90 93 35 40 	sts	0x4035, r25	; 0x804035 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    656c:	83 e3       	ldi	r24, 0x33	; 51
    656e:	90 e0       	ldi	r25, 0x00	; 0
    6570:	0e 94 f7 52 	call	0xa5ee	; 0xa5ee <eeprom_read_word>
    6574:	89 38       	cpi	r24, 0x89	; 137
    6576:	23 e1       	ldi	r18, 0x13	; 19
    6578:	92 07       	cpc	r25, r18
    657a:	18 f0       	brcs	.+6      	; 0x6582 <_ZN13EepromManager11readNonVolsEv+0x144>
    657c:	28 e8       	ldi	r18, 0x88	; 136
    657e:	83 e1       	ldi	r24, 0x13	; 19
    6580:	02 c0       	rjmp	.+4      	; 0x6586 <_ZN13EepromManager11readNonVolsEv+0x148>
    6582:	28 2f       	mov	r18, r24
    6584:	89 2f       	mov	r24, r25
    6586:	20 93 30 40 	sts	0x4030, r18	; 0x804030 <g_80m_power_level_mW>
    658a:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    658e:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    6592:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    6596:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    659a:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    659e:	89 2b       	or	r24, r25
    65a0:	8a 2b       	or	r24, r26
    65a2:	8b 2b       	or	r24, r27
    65a4:	b9 f0       	breq	.+46     	; 0x65d4 <_ZN13EepromManager11readNonVolsEv+0x196>
    65a6:	40 91 81 47 	lds	r20, 0x4781	; 0x804781 <g_event_finish_epoch>
    65aa:	50 91 82 47 	lds	r21, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    65ae:	60 91 83 47 	lds	r22, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    65b2:	70 91 84 47 	lds	r23, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    65b6:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    65ba:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    65be:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    65c2:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    65c6:	84 17       	cp	r24, r20
    65c8:	95 07       	cpc	r25, r21
    65ca:	a6 07       	cpc	r26, r22
    65cc:	b7 07       	cpc	r27, r23
    65ce:	20 f4       	brcc	.+8      	; 0x65d8 <_ZN13EepromManager11readNonVolsEv+0x19a>
    65d0:	80 e0       	ldi	r24, 0x00	; 0
    65d2:	03 c0       	rjmp	.+6      	; 0x65da <_ZN13EepromManager11readNonVolsEv+0x19c>
    65d4:	80 e0       	ldi	r24, 0x00	; 0
    65d6:	01 c0       	rjmp	.+2      	; 0x65da <_ZN13EepromManager11readNonVolsEv+0x19c>
    65d8:	81 e0       	ldi	r24, 0x01	; 1
    65da:	88 23       	and	r24, r24
    65dc:	c1 f0       	breq	.+48     	; 0x660e <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    65de:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    65e2:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    65e6:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    65ea:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    65ee:	80 58       	subi	r24, 0x80	; 128
    65f0:	9e 4a       	sbci	r25, 0xAE	; 174
    65f2:	ae 4f       	sbci	r26, 0xFE	; 254
    65f4:	bf 4f       	sbci	r27, 0xFF	; 255
    65f6:	80 93 81 47 	sts	0x4781, r24	; 0x804781 <g_event_finish_epoch>
    65fa:	90 93 82 47 	sts	0x4782, r25	; 0x804782 <g_event_finish_epoch+0x1>
    65fe:	a0 93 83 47 	sts	0x4783, r26	; 0x804783 <g_event_finish_epoch+0x2>
    6602:	b0 93 84 47 	sts	0x4784, r27	; 0x804784 <g_event_finish_epoch+0x3>
		}

		failure = false;
    6606:	80 e0       	ldi	r24, 0x00	; 0
    6608:	03 c0       	rjmp	.+6      	; 0x6610 <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


bool EepromManager::readNonVols(void)
{
	bool failure = true;
    660a:	81 e0       	ldi	r24, 0x01	; 1
    660c:	01 c0       	rjmp	.+2      	; 0x6610 <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = false;
    660e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    6610:	df 91       	pop	r29
    6612:	cf 91       	pop	r28
    6614:	08 95       	ret

00006616 <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	bool EepromManager::initializeEEPROMVars(void)
	{
    6616:	ef 92       	push	r14
    6618:	ff 92       	push	r15
    661a:	0f 93       	push	r16
    661c:	1f 93       	push	r17
    661e:	cf 93       	push	r28
    6620:	df 93       	push	r29
		bool err = false;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    6622:	80 e0       	ldi	r24, 0x00	; 0
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	0e 94 f7 52 	call	0xa5ee	; 0xa5ee <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    662a:	8e 3c       	cpi	r24, 0xCE	; 206
    662c:	91 05       	cpc	r25, r1
    662e:	09 f4       	brne	.+2      	; 0x6632 <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    6630:	aa c0       	rjmp	.+340    	; 0x6786 <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    6632:	84 e1       	ldi	r24, 0x14	; 20
    6634:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    6638:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    663c:	88 e2       	ldi	r24, 0x28	; 40
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    6644:	81 e0       	ldi	r24, 0x01	; 1
    6646:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    664a:	60 91 1b 40 	lds	r22, 0x401B	; 0x80401b <g_fox>
    664e:	89 e2       	ldi	r24, 0x29	; 41
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    6656:	10 92 7d 47 	sts	0x477D, r1	; 0x80477d <g_event_start_epoch>
    665a:	10 92 7e 47 	sts	0x477E, r1	; 0x80477e <g_event_start_epoch+0x1>
    665e:	10 92 7f 47 	sts	0x477F, r1	; 0x80477f <g_event_start_epoch+0x2>
    6662:	10 92 80 47 	sts	0x4780, r1	; 0x804780 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    6666:	40 91 7d 47 	lds	r20, 0x477D	; 0x80477d <g_event_start_epoch>
    666a:	50 91 7e 47 	lds	r21, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    666e:	60 91 7f 47 	lds	r22, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    6672:	70 91 80 47 	lds	r23, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    6676:	82 e0       	ldi	r24, 0x02	; 2
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	0e 94 a5 30 	call	0x614a	; 0x614a <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    667e:	10 92 81 47 	sts	0x4781, r1	; 0x804781 <g_event_finish_epoch>
    6682:	10 92 82 47 	sts	0x4782, r1	; 0x804782 <g_event_finish_epoch+0x1>
    6686:	10 92 83 47 	sts	0x4783, r1	; 0x804783 <g_event_finish_epoch+0x2>
    668a:	10 92 84 47 	sts	0x4784, r1	; 0x804784 <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    668e:	40 91 81 47 	lds	r20, 0x4781	; 0x804781 <g_event_finish_epoch>
    6692:	50 91 82 47 	lds	r21, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    6696:	60 91 83 47 	lds	r22, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    669a:	70 91 84 47 	lds	r23, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    669e:	86 e0       	ldi	r24, 0x06	; 6
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	0e 94 a5 30 	call	0x614a	; 0x614a <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    66a6:	10 92 85 47 	sts	0x4785, r1	; 0x804785 <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    66aa:	60 91 85 47 	lds	r22, 0x4785	; 0x804785 <g_utc_offset>
    66ae:	8a e2       	ldi	r24, 0x2A	; 42
    66b0:	90 e0       	ldi	r25, 0x00	; 0
    66b2:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    66b6:	10 92 47 47 	sts	0x4747, r1	; 0x804747 <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    66ba:	60 e0       	ldi	r22, 0x00	; 0
    66bc:	8a e0       	ldi	r24, 0x0A	; 10
    66be:	90 e0       	ldi	r25, 0x00	; 0
    66c0:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    66c4:	e1 eb       	ldi	r30, 0xB1	; 177
    66c6:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    66c8:	c0 e0       	ldi	r28, 0x00	; 0
    66ca:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    66cc:	8f e1       	ldi	r24, 0x1F	; 31
    66ce:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    66d0:	c4 30       	cpi	r28, 0x04	; 4
    66d2:	d1 05       	cpc	r29, r1
    66d4:	90 f4       	brcc	.+36     	; 0x66fa <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    66d6:	df 01       	movw	r26, r30
    66d8:	2d 91       	ld	r18, X+
    66da:	8d 01       	movw	r16, r26
    66dc:	de 01       	movw	r26, r28
    66de:	aa 57       	subi	r26, 0x7A	; 122
    66e0:	b8 4b       	sbci	r27, 0xB8	; 184
    66e2:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    66e4:	60 81       	ld	r22, Z
    66e6:	7c 01       	movw	r14, r24
    66e8:	bf ef       	ldi	r27, 0xFF	; 255
    66ea:	eb 1a       	sub	r14, r27
    66ec:	fb 0a       	sbc	r15, r27
    66ee:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    66f2:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    66f4:	f8 01       	movw	r30, r16
    66f6:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    66f8:	eb cf       	rjmp	.-42     	; 0x66d0 <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    66fa:	60 e0       	ldi	r22, 0x00	; 0
    66fc:	0e 94 80 30 	call	0x6100	; 0x6100 <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    6700:	ca 57       	subi	r28, 0x7A	; 122
    6702:	d8 4b       	sbci	r29, 0xB8	; 184
    6704:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    6706:	80 e2       	ldi	r24, 0x20	; 32
    6708:	94 e0       	ldi	r25, 0x04	; 4
    670a:	a6 e3       	ldi	r26, 0x36	; 54
    670c:	b0 e0       	ldi	r27, 0x00	; 0
    670e:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    6712:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    6716:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    671a:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    671e:	40 e2       	ldi	r20, 0x20	; 32
    6720:	54 e0       	ldi	r21, 0x04	; 4
    6722:	66 e3       	ldi	r22, 0x36	; 54
    6724:	70 e0       	ldi	r23, 0x00	; 0
    6726:	8b e2       	ldi	r24, 0x2B	; 43
    6728:	90 e0       	ldi	r25, 0x00	; 0
    672a:	0e 94 a5 30 	call	0x614a	; 0x614a <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    672e:	8a ea       	ldi	r24, 0xAA	; 170
    6730:	90 e0       	ldi	r25, 0x00	; 0
    6732:	a0 e0       	ldi	r26, 0x00	; 0
    6734:	b0 e0       	ldi	r27, 0x00	; 0
    6736:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <g_rtty_offset>
    673a:	90 93 33 40 	sts	0x4033, r25	; 0x804033 <g_rtty_offset+0x1>
    673e:	a0 93 34 40 	sts	0x4034, r26	; 0x804034 <g_rtty_offset+0x2>
    6742:	b0 93 35 40 	sts	0x4035, r27	; 0x804035 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    6746:	40 91 2c 40 	lds	r20, 0x402C	; 0x80402c <g_80m_frequency>
    674a:	50 91 2d 40 	lds	r21, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    674e:	60 91 2e 40 	lds	r22, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    6752:	70 91 2f 40 	lds	r23, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    6756:	8b e2       	ldi	r24, 0x2B	; 43
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	0e 94 a5 30 	call	0x614a	; 0x614a <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    675e:	84 ef       	ldi	r24, 0xF4	; 244
    6760:	91 e0       	ldi	r25, 0x01	; 1
    6762:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    6766:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    676a:	44 ef       	ldi	r20, 0xF4	; 244
    676c:	51 e0       	ldi	r21, 0x01	; 1
    676e:	60 e0       	ldi	r22, 0x00	; 0
    6770:	70 e0       	ldi	r23, 0x00	; 0
    6772:	83 e3       	ldi	r24, 0x33	; 51
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	0e 94 a5 30 	call	0x614a	; 0x614a <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    677a:	6e ec       	ldi	r22, 0xCE	; 206
    677c:	70 e0       	ldi	r23, 0x00	; 0
    677e:	80 e0       	ldi	r24, 0x00	; 0
    6780:	90 e0       	ldi	r25, 0x00	; 0
    6782:	0e 94 92 30 	call	0x6124	; 0x6124 <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    6786:	80 e0       	ldi	r24, 0x00	; 0
    6788:	df 91       	pop	r29
    678a:	cf 91       	pop	r28
    678c:	1f 91       	pop	r17
    678e:	0f 91       	pop	r16
    6790:	ff 90       	pop	r15
    6792:	ef 90       	pop	r14
    6794:	08 95       	ret

00006796 <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    6796:	ef 92       	push	r14
    6798:	ff 92       	push	r15
    679a:	0f 93       	push	r16
    679c:	1f 93       	push	r17
    679e:	cf 93       	push	r28
    67a0:	df 93       	push	r29
    67a2:	e4 2e       	mov	r14, r20
    67a4:	f5 2e       	mov	r15, r21
    67a6:	d6 2f       	mov	r29, r22
    67a8:	c7 2f       	mov	r28, r23
    67aa:	00 93 b4 47 	sts	0x47B4, r16	; 0x8047b4 <_SAMPLING_FREQUENCY>
    67ae:	10 93 b5 47 	sts	0x47B5, r17	; 0x8047b5 <_SAMPLING_FREQUENCY+0x1>
    67b2:	20 93 b6 47 	sts	0x47B6, r18	; 0x8047b6 <_SAMPLING_FREQUENCY+0x2>
    67b6:	30 93 b7 47 	sts	0x47B7, r19	; 0x8047b7 <_SAMPLING_FREQUENCY+0x3>
    67ba:	20 e0       	ldi	r18, 0x00	; 0
    67bc:	30 e0       	ldi	r19, 0x00	; 0
    67be:	41 e5       	ldi	r20, 0x51	; 81
    67c0:	53 e4       	ldi	r21, 0x43	; 67
    67c2:	6e 2d       	mov	r22, r14
    67c4:	7f 2d       	mov	r23, r15
    67c6:	8d 2f       	mov	r24, r29
    67c8:	9c 2f       	mov	r25, r28
    67ca:	0e 94 aa 4b 	call	0x9754	; 0x9754 <__gesf2>
    67ce:	18 16       	cp	r1, r24
    67d0:	8c f0       	brlt	.+34     	; 0x67f4 <_ZN8GoertzelC1Eff+0x5e>
    67d2:	20 e0       	ldi	r18, 0x00	; 0
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	48 ec       	ldi	r20, 0xC8	; 200
    67d8:	52 e4       	ldi	r21, 0x42	; 66
    67da:	6e 2d       	mov	r22, r14
    67dc:	7f 2d       	mov	r23, r15
    67de:	8d 2f       	mov	r24, r29
    67e0:	9c 2f       	mov	r25, r28
    67e2:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__cmpsf2>
    67e6:	88 23       	and	r24, r24
    67e8:	4c f4       	brge	.+18     	; 0x67fc <_ZN8GoertzelC1Eff+0x66>
    67ea:	e1 2c       	mov	r14, r1
    67ec:	f1 2c       	mov	r15, r1
    67ee:	d8 ec       	ldi	r29, 0xC8	; 200
    67f0:	c2 e4       	ldi	r28, 0x42	; 66
    67f2:	04 c0       	rjmp	.+8      	; 0x67fc <_ZN8GoertzelC1Eff+0x66>
    67f4:	e1 2c       	mov	r14, r1
    67f6:	f1 2c       	mov	r15, r1
    67f8:	d1 e5       	ldi	r29, 0x51	; 81
    67fa:	c3 e4       	ldi	r28, 0x43	; 67
    67fc:	6e 2d       	mov	r22, r14
    67fe:	7f 2d       	mov	r23, r15
    6800:	8d 2f       	mov	r24, r29
    6802:	9c 2f       	mov	r25, r28
    6804:	0e 94 81 4a 	call	0x9502	; 0x9502 <__fixsfsi>
    6808:	60 93 b2 47 	sts	0x47B2, r22	; 0x8047b2 <_N>
    680c:	70 93 b3 47 	sts	0x47B3, r23	; 0x8047b3 <_N+0x1>
    6810:	80 91 b2 47 	lds	r24, 0x47B2	; 0x8047b2 <_N>
    6814:	90 91 b3 47 	lds	r25, 0x47B3	; 0x8047b3 <_N+0x1>
    6818:	88 0f       	add	r24, r24
    681a:	99 1f       	adc	r25, r25
    681c:	0e 94 c7 4c 	call	0x998e	; 0x998e <malloc>
    6820:	80 93 ad 47 	sts	0x47AD, r24	; 0x8047ad <testData>
    6824:	90 93 ae 47 	sts	0x47AE, r25	; 0x8047ae <testData+0x1>
    6828:	df 91       	pop	r29
    682a:	cf 91       	pop	r28
    682c:	1f 91       	pop	r17
    682e:	0f 91       	pop	r16
    6830:	ff 90       	pop	r15
    6832:	ef 90       	pop	r14
    6834:	08 95       	ret

00006836 <_ZN8GoertzelD1Ev>:
    6836:	80 91 ad 47 	lds	r24, 0x47AD	; 0x8047ad <testData>
    683a:	90 91 ae 47 	lds	r25, 0x47AE	; 0x8047ae <testData+0x1>
    683e:	0e 94 5f 4d 	call	0x9abe	; 0x9abe <free>
    6842:	08 95       	ret

00006844 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    6844:	80 91 af 47 	lds	r24, 0x47AF	; 0x8047af <_samplesReady>
    6848:	88 23       	and	r24, r24
    684a:	19 f0       	breq	.+6      	; 0x6852 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    684c:	80 91 af 47 	lds	r24, 0x47AF	; 0x8047af <_samplesReady>
    6850:	08 95       	ret
	}

	testData[_index] = data;
    6852:	e0 91 b0 47 	lds	r30, 0x47B0	; 0x8047b0 <_index>
    6856:	f0 91 b1 47 	lds	r31, 0x47B1	; 0x8047b1 <_index+0x1>
    685a:	ee 0f       	add	r30, r30
    685c:	ff 1f       	adc	r31, r31
    685e:	80 91 ad 47 	lds	r24, 0x47AD	; 0x8047ad <testData>
    6862:	90 91 ae 47 	lds	r25, 0x47AE	; 0x8047ae <testData+0x1>
    6866:	e8 0f       	add	r30, r24
    6868:	f9 1f       	adc	r31, r25
    686a:	60 83       	st	Z, r22
    686c:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    686e:	80 91 b0 47 	lds	r24, 0x47B0	; 0x8047b0 <_index>
    6872:	90 91 b1 47 	lds	r25, 0x47B1	; 0x8047b1 <_index+0x1>
    6876:	01 96       	adiw	r24, 0x01	; 1
    6878:	80 93 b0 47 	sts	0x47B0, r24	; 0x8047b0 <_index>
    687c:	90 93 b1 47 	sts	0x47B1, r25	; 0x8047b1 <_index+0x1>
	if(_index >= _N)
    6880:	20 91 b0 47 	lds	r18, 0x47B0	; 0x8047b0 <_index>
    6884:	30 91 b1 47 	lds	r19, 0x47B1	; 0x8047b1 <_index+0x1>
    6888:	80 91 b2 47 	lds	r24, 0x47B2	; 0x8047b2 <_N>
    688c:	90 91 b3 47 	lds	r25, 0x47B3	; 0x8047b3 <_N+0x1>
    6890:	28 17       	cp	r18, r24
    6892:	39 07       	cpc	r19, r25
    6894:	3c f0       	brlt	.+14     	; 0x68a4 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    6896:	10 92 b0 47 	sts	0x47B0, r1	; 0x8047b0 <_index>
    689a:	10 92 b1 47 	sts	0x47B1, r1	; 0x8047b1 <_index+0x1>
		_samplesReady = true;
    689e:	81 e0       	ldi	r24, 0x01	; 1
    68a0:	80 93 af 47 	sts	0x47AF, r24	; 0x8047af <_samplesReady>
	}

	return(_samplesReady);
    68a4:	80 91 af 47 	lds	r24, 0x47AF	; 0x8047af <_samplesReady>
}
    68a8:	08 95       	ret

000068aa <_ZL11i2c_0_WaitWv>:

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
    68aa:	8c e2       	ldi	r24, 0x2C	; 44
    68ac:	91 e0       	ldi	r25, 0x01	; 1
    68ae:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    68b2:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	PORTC_set_pin_pull_mode(3, PORT_PULL_UP);
}

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
    68b6:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 300;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    68b8:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    68bc:	90 7c       	andi	r25, 0xC0	; 192
    68be:	31 f0       	breq	.+12     	; 0x68cc <_ZL11i2c_0_WaitWv+0x22>
		{
			if(!(TWI0.MSTATUS & TWI_RXACK_bm))
    68c0:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    68c4:	84 fd       	sbrc	r24, 4
    68c6:	07 c0       	rjmp	.+14     	; 0x68d6 <_ZL11i2c_0_WaitWv+0x2c>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    68c8:	81 e0       	ldi	r24, 0x01	; 1
    68ca:	08 c0       	rjmp	.+16     	; 0x68dc <_ZL11i2c_0_WaitWv+0x32>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    68cc:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    68d0:	9c 70       	andi	r25, 0x0C	; 12
    68d2:	19 f4       	brne	.+6      	; 0x68da <_ZL11i2c_0_WaitWv+0x30>
    68d4:	03 c0       	rjmp	.+6      	; 0x68dc <_ZL11i2c_0_WaitWv+0x32>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    68d6:	82 e0       	ldi	r24, 0x02	; 2
    68d8:	01 c0       	rjmp	.+2      	; 0x68dc <_ZL11i2c_0_WaitWv+0x32>
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    68da:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    68dc:	81 11       	cpse	r24, r1
    68de:	08 c0       	rjmp	.+16     	; 0x68f0 <_ZL11i2c_0_WaitWv+0x46>
    68e0:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    68e4:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    68e8:	23 2b       	or	r18, r19
    68ea:	21 f4       	brne	.+8      	; 0x68f4 <_ZL11i2c_0_WaitWv+0x4a>
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	03 c0       	rjmp	.+6      	; 0x68f6 <_ZL11i2c_0_WaitWv+0x4c>
    68f0:	90 e0       	ldi	r25, 0x00	; 0
    68f2:	01 c0       	rjmp	.+2      	; 0x68f6 <_ZL11i2c_0_WaitWv+0x4c>
    68f4:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
	
	do
    68f6:	91 11       	cpse	r25, r1
    68f8:	df cf       	rjmp	.-66     	; 0x68b8 <_ZL11i2c_0_WaitWv+0xe>
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	if(!g_i2c0_timeout_ticks) 
    68fa:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    68fe:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6902:	23 2b       	or	r18, r19
    6904:	09 f4       	brne	.+2      	; 0x6908 <_ZL11i2c_0_WaitWv+0x5e>
	{
		state = I2C_ERROR;
    6906:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	return state;
}
    6908:	08 95       	ret

0000690a <_ZL11i2c_0_WaitRv>:

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    690a:	88 ec       	ldi	r24, 0xC8	; 200
    690c:	90 e0       	ldi	r25, 0x00	; 0
    690e:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    6912:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
    6916:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    6918:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    691c:	90 7c       	andi	r25, 0xC0	; 192
    691e:	29 f4       	brne	.+10     	; 0x692a <_ZL11i2c_0_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6920:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6924:	9c 70       	andi	r25, 0x0C	; 12
    6926:	19 f4       	brne	.+6      	; 0x692e <_ZL11i2c_0_WaitRv+0x24>
    6928:	03 c0       	rjmp	.+6      	; 0x6930 <_ZL11i2c_0_WaitRv+0x26>
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    692a:	83 e0       	ldi	r24, 0x03	; 3
    692c:	01 c0       	rjmp	.+2      	; 0x6930 <_ZL11i2c_0_WaitRv+0x26>
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    692e:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    6930:	81 11       	cpse	r24, r1
    6932:	08 c0       	rjmp	.+16     	; 0x6944 <_ZL11i2c_0_WaitRv+0x3a>
    6934:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    6938:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    693c:	23 2b       	or	r18, r19
    693e:	21 f4       	brne	.+8      	; 0x6948 <_ZL11i2c_0_WaitRv+0x3e>
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	03 c0       	rjmp	.+6      	; 0x694a <_ZL11i2c_0_WaitRv+0x40>
    6944:	90 e0       	ldi	r25, 0x00	; 0
    6946:	01 c0       	rjmp	.+2      	; 0x694a <_ZL11i2c_0_WaitRv+0x40>
    6948:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    694a:	91 11       	cpse	r25, r1
    694c:	e5 cf       	rjmp	.-54     	; 0x6918 <_ZL11i2c_0_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    694e:	08 95       	ret

00006950 <_ZL11i2c_1_WaitWv>:

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
    6950:	88 ec       	ldi	r24, 0xC8	; 200
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    6958:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
	PORTB_set_pin_pull_mode(3, PORT_PULL_UP);
}

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
    695c:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c1_timeout_ticks = 200;
	
	do
	{
		uint8_t stat = TWI1.MSTATUS;
    695e:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
		if(stat & (TWI_WIF_bm | TWI_RIF_bm))
    6962:	29 2f       	mov	r18, r25
    6964:	20 7c       	andi	r18, 0xC0	; 192
    6966:	21 f0       	breq	.+8      	; 0x6970 <_ZL11i2c_1_WaitWv+0x20>
		{
			if(!(stat & TWI_RXACK_bm))
    6968:	94 fd       	sbrc	r25, 4
    696a:	05 c0       	rjmp	.+10     	; 0x6976 <_ZL11i2c_1_WaitWv+0x26>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    696c:	81 e0       	ldi	r24, 0x01	; 1
    696e:	06 c0       	rjmp	.+12     	; 0x697c <_ZL11i2c_1_WaitWv+0x2c>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6970:	9c 70       	andi	r25, 0x0C	; 12
    6972:	19 f4       	brne	.+6      	; 0x697a <_ZL11i2c_1_WaitWv+0x2a>
    6974:	03 c0       	rjmp	.+6      	; 0x697c <_ZL11i2c_1_WaitWv+0x2c>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    6976:	82 e0       	ldi	r24, 0x02	; 2
    6978:	01 c0       	rjmp	.+2      	; 0x697c <_ZL11i2c_1_WaitWv+0x2c>
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    697a:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c1_timeout_ticks);
    697c:	81 11       	cpse	r24, r1
    697e:	08 c0       	rjmp	.+16     	; 0x6990 <_ZL11i2c_1_WaitWv+0x40>
    6980:	20 91 1e 40 	lds	r18, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    6984:	30 91 1f 40 	lds	r19, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    6988:	23 2b       	or	r18, r19
    698a:	21 f4       	brne	.+8      	; 0x6994 <_ZL11i2c_1_WaitWv+0x44>
    698c:	90 e0       	ldi	r25, 0x00	; 0
    698e:	03 c0       	rjmp	.+6      	; 0x6996 <_ZL11i2c_1_WaitWv+0x46>
    6990:	90 e0       	ldi	r25, 0x00	; 0
    6992:	01 c0       	rjmp	.+2      	; 0x6996 <_ZL11i2c_1_WaitWv+0x46>
    6994:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
	
	do
    6996:	91 11       	cpse	r25, r1
    6998:	e2 cf       	rjmp	.-60     	; 0x695e <_ZL11i2c_1_WaitWv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c1_timeout_ticks);
	
	return state;
}
    699a:	08 95       	ret

0000699c <_ZL11I2C_1_WaitRv>:

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    699c:	88 ec       	ldi	r24, 0xC8	; 200
    699e:	90 e0       	ldi	r25, 0x00	; 0
    69a0:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    69a4:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
    69a8:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    69aa:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    69ae:	90 7c       	andi	r25, 0xC0	; 192
    69b0:	29 f4       	brne	.+10     	; 0x69bc <_ZL11I2C_1_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    69b2:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    69b6:	9c 70       	andi	r25, 0x0C	; 12
    69b8:	19 f4       	brne	.+6      	; 0x69c0 <_ZL11I2C_1_WaitRv+0x24>
    69ba:	03 c0       	rjmp	.+6      	; 0x69c2 <_ZL11I2C_1_WaitRv+0x26>
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    69bc:	83 e0       	ldi	r24, 0x03	; 3
    69be:	01 c0       	rjmp	.+2      	; 0x69c2 <_ZL11I2C_1_WaitRv+0x26>
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    69c0:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    69c2:	81 11       	cpse	r24, r1
    69c4:	08 c0       	rjmp	.+16     	; 0x69d6 <_ZL11I2C_1_WaitRv+0x3a>
    69c6:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    69ca:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    69ce:	23 2b       	or	r18, r19
    69d0:	21 f4       	brne	.+8      	; 0x69da <_ZL11I2C_1_WaitRv+0x3e>
    69d2:	90 e0       	ldi	r25, 0x00	; 0
    69d4:	03 c0       	rjmp	.+6      	; 0x69dc <_ZL11I2C_1_WaitRv+0x40>
    69d6:	90 e0       	ldi	r25, 0x00	; 0
    69d8:	01 c0       	rjmp	.+2      	; 0x69dc <_ZL11I2C_1_WaitRv+0x40>
    69da:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    69dc:	91 11       	cpse	r25, r1
    69de:	e5 cf       	rjmp	.-54     	; 0x69aa <_ZL11I2C_1_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    69e0:	08 95       	ret

000069e2 <I2C_0_Init>:
/************************************************************************/

void I2C_0_Init(void)
{
	/* Select I2C pins PC2/PC3 */
	PORTMUX.TWIROUTEA &= 0x0A;
    69e2:	e0 ee       	ldi	r30, 0xE0	; 224
    69e4:	f5 e0       	ldi	r31, 0x05	; 5
    69e6:	85 81       	ldd	r24, Z+5	; 0x05
    69e8:	8a 70       	andi	r24, 0x0A	; 10
    69ea:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x02;
    69ec:	85 81       	ldd	r24, Z+5	; 0x05
    69ee:	82 60       	ori	r24, 0x02	; 2
    69f0:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI0.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    69f2:	e0 e0       	ldi	r30, 0x00	; 0
    69f4:	f9 e0       	ldi	r31, 0x09	; 9
    69f6:	8f e6       	ldi	r24, 0x6F	; 111
    69f8:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI0.MCTRLA = TWI_ENABLE_bm;
    69fa:	81 e0       	ldi	r24, 0x01	; 1
    69fc:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI0.MADDR = 0x00;
    69fe:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI0.MDATA = 0x00;
    6a00:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6a02:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6a04:	e2 e5       	ldi	r30, 0x52	; 82
    6a06:	f4 e0       	ldi	r31, 0x04	; 4
    6a08:	80 81       	ld	r24, Z
    6a0a:	88 60       	ori	r24, 0x08	; 8
    6a0c:	80 83       	st	Z, r24
    6a0e:	e3 e5       	ldi	r30, 0x53	; 83
    6a10:	f4 e0       	ldi	r31, 0x04	; 4
    6a12:	80 81       	ld	r24, Z
    6a14:	88 60       	ori	r24, 0x08	; 8
    6a16:	80 83       	st	Z, r24
    6a18:	08 95       	ret

00006a1a <I2C_0_GetData>:
	return retVal;
}

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_0_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6a1a:	ef 92       	push	r14
    6a1c:	ff 92       	push	r15
    6a1e:	1f 93       	push	r17
    6a20:	cf 93       	push	r28
    6a22:	df 93       	push	r29
    6a24:	c8 2f       	mov	r28, r24
    6a26:	d6 2f       	mov	r29, r22
    6a28:	7a 01       	movw	r14, r20
    6a2a:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
    6a2c:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6a30:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZL11i2c_0_WaitWv>
    6a34:	81 30       	cpi	r24, 0x01	; 1
    6a36:	61 f5       	brne	.+88     	; 0x6a90 <I2C_0_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    6a38:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    6a3c:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZL11i2c_0_WaitWv>
    6a40:	81 30       	cpi	r24, 0x01	; 1
    6a42:	41 f5       	brne	.+80     	; 0x6a94 <I2C_0_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
    6a44:	c1 60       	ori	r28, 0x01	; 1
    6a46:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6a4a:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZL11i2c_0_WaitWv>
    6a4e:	81 30       	cpi	r24, 0x01	; 1
    6a50:	19 f5       	brne	.+70     	; 0x6a98 <I2C_0_GetData+0x7e>
	{
		return retVal;
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    6a52:	11 23       	and	r17, r17
    6a54:	19 f1       	breq	.+70     	; 0x6a9c <I2C_0_GetData+0x82>
    6a56:	e1 14       	cp	r14, r1
    6a58:	f1 04       	cpc	r15, r1
    6a5a:	11 f1       	breq	.+68     	; 0x6aa0 <I2C_0_GetData+0x86>
    6a5c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6a5e:	df ef       	ldi	r29, 0xFF	; 255
    6a60:	d1 0f       	add	r29, r17
    6a62:	11 23       	and	r17, r17
    6a64:	f9 f0       	breq	.+62     	; 0x6aa4 <I2C_0_GetData+0x8a>
		{
			if(i2c_0_WaitR() == I2C_READY)
    6a66:	0e 94 85 34 	call	0x690a	; 0x690a <_ZL11i2c_0_WaitRv>
    6a6a:	83 30       	cpi	r24, 0x03	; 3
    6a6c:	e9 f4       	brne	.+58     	; 0x6aa8 <I2C_0_GetData+0x8e>
			{
				*pData = TWI0.MDATA;
    6a6e:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    6a72:	f7 01       	movw	r30, r14
    6a74:	80 83       	st	Z, r24
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    6a76:	d1 11       	cpse	r29, r1
    6a78:	02 c0       	rjmp	.+4      	; 0x6a7e <I2C_0_GetData+0x64>
    6a7a:	87 e0       	ldi	r24, 0x07	; 7
    6a7c:	01 c0       	rjmp	.+2      	; 0x6a80 <I2C_0_GetData+0x66>
    6a7e:	82 e0       	ldi	r24, 0x02	; 2
    6a80:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
				retVal++;
    6a84:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6a86:	ff ef       	ldi	r31, 0xFF	; 255
    6a88:	ef 1a       	sub	r14, r31
    6a8a:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6a8c:	1d 2f       	mov	r17, r29
    6a8e:	e7 cf       	rjmp	.-50     	; 0x6a5e <I2C_0_GetData+0x44>
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a90:	8f ef       	ldi	r24, 0xFF	; 255
    6a92:	0b c0       	rjmp	.+22     	; 0x6aaa <I2C_0_GetData+0x90>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a94:	8f ef       	ldi	r24, 0xFF	; 255
    6a96:	09 c0       	rjmp	.+18     	; 0x6aaa <I2C_0_GetData+0x90>
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a98:	8f ef       	ldi	r24, 0xFF	; 255
    6a9a:	07 c0       	rjmp	.+14     	; 0x6aaa <I2C_0_GetData+0x90>
	}
	
	retVal = 0;
    6a9c:	80 e0       	ldi	r24, 0x00	; 0
    6a9e:	05 c0       	rjmp	.+10     	; 0x6aaa <I2C_0_GetData+0x90>
    6aa0:	80 e0       	ldi	r24, 0x00	; 0
    6aa2:	03 c0       	rjmp	.+6      	; 0x6aaa <I2C_0_GetData+0x90>
    6aa4:	8c 2f       	mov	r24, r28
    6aa6:	01 c0       	rjmp	.+2      	; 0x6aaa <I2C_0_GetData+0x90>
    6aa8:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6aaa:	df 91       	pop	r29
    6aac:	cf 91       	pop	r28
    6aae:	1f 91       	pop	r17
    6ab0:	ff 90       	pop	r15
    6ab2:	ef 90       	pop	r14
    6ab4:	08 95       	ret

00006ab6 <I2C_0_EndSession>:

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    6ab6:	83 e0       	ldi	r24, 0x03	; 3
    6ab8:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    6abc:	08 95       	ret

00006abe <I2C_0_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_0_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6abe:	ff 92       	push	r15
    6ac0:	0f 93       	push	r16
    6ac2:	1f 93       	push	r17
    6ac4:	cf 93       	push	r28
    6ac6:	df 93       	push	r29
    6ac8:	c6 2f       	mov	r28, r22
    6aca:	8a 01       	movw	r16, r20
    6acc:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
    6ace:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6ad2:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZL11i2c_0_WaitWv>
    6ad6:	81 30       	cpi	r24, 0x01	; 1
    6ad8:	29 f5       	brne	.+74     	; 0x6b24 <I2C_0_SendData+0x66>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    6ada:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    6ade:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZL11i2c_0_WaitWv>
    6ae2:	81 30       	cpi	r24, 0x01	; 1
    6ae4:	09 f5       	brne	.+66     	; 0x6b28 <I2C_0_SendData+0x6a>
	{
		return retVal;
	}

	retVal = 0;
	if((len != 0) && (pData != null))
    6ae6:	dd 23       	and	r29, r29
    6ae8:	09 f1       	breq	.+66     	; 0x6b2c <I2C_0_SendData+0x6e>
    6aea:	01 15       	cp	r16, r1
    6aec:	11 05       	cpc	r17, r1
    6aee:	21 f4       	brne	.+8      	; 0x6af8 <I2C_0_SendData+0x3a>
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}

	retVal = 0;
    6af0:	80 e0       	ldi	r24, 0x00	; 0
    6af2:	21 c0       	rjmp	.+66     	; 0x6b36 <I2C_0_SendData+0x78>
    6af4:	df 2d       	mov	r29, r15
    6af6:	01 c0       	rjmp	.+2      	; 0x6afa <I2C_0_SendData+0x3c>
    6af8:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != null))
	{
		while(len--)
    6afa:	ff 24       	eor	r15, r15
    6afc:	fa 94       	dec	r15
    6afe:	fd 0e       	add	r15, r29
    6b00:	dd 23       	and	r29, r29
    6b02:	b1 f0       	breq	.+44     	; 0x6b30 <I2C_0_SendData+0x72>
		{
			TWI0.MDATA = *pData;
    6b04:	f8 01       	movw	r30, r16
    6b06:	80 81       	ld	r24, Z
    6b08:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
			if(i2c_0_WaitW() == I2C_ACKED)
    6b0c:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZL11i2c_0_WaitWv>
    6b10:	81 30       	cpi	r24, 0x01	; 1
    6b12:	81 f4       	brne	.+32     	; 0x6b34 <I2C_0_SendData+0x76>
			{
				retVal++;
    6b14:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6b16:	0f 5f       	subi	r16, 0xFF	; 255
    6b18:	1f 4f       	sbci	r17, 0xFF	; 255
				if(!len) I2C_0_EndSession();
    6b1a:	f1 10       	cpse	r15, r1
    6b1c:	eb cf       	rjmp	.-42     	; 0x6af4 <I2C_0_SendData+0x36>
    6b1e:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <I2C_0_EndSession>
    6b22:	e8 cf       	rjmp	.-48     	; 0x6af4 <I2C_0_SendData+0x36>
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6b24:	8f ef       	ldi	r24, 0xFF	; 255
    6b26:	07 c0       	rjmp	.+14     	; 0x6b36 <I2C_0_SendData+0x78>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6b28:	8f ef       	ldi	r24, 0xFF	; 255
    6b2a:	05 c0       	rjmp	.+10     	; 0x6b36 <I2C_0_SendData+0x78>
	}

	retVal = 0;
    6b2c:	80 e0       	ldi	r24, 0x00	; 0
    6b2e:	03 c0       	rjmp	.+6      	; 0x6b36 <I2C_0_SendData+0x78>
    6b30:	8c 2f       	mov	r24, r28
    6b32:	01 c0       	rjmp	.+2      	; 0x6b36 <I2C_0_SendData+0x78>
    6b34:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    6b36:	df 91       	pop	r29
    6b38:	cf 91       	pop	r28
    6b3a:	1f 91       	pop	r17
    6b3c:	0f 91       	pop	r16
    6b3e:	ff 90       	pop	r15
    6b40:	08 95       	ret

00006b42 <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    6b42:	e0 ee       	ldi	r30, 0xE0	; 224
    6b44:	f5 e0       	ldi	r31, 0x05	; 5
    6b46:	85 81       	ldd	r24, Z+5	; 0x05
    6b48:	83 70       	andi	r24, 0x03	; 3
    6b4a:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    6b4c:	85 81       	ldd	r24, Z+5	; 0x05
    6b4e:	88 60       	ori	r24, 0x08	; 8
    6b50:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    6b52:	e0 e2       	ldi	r30, 0x20	; 32
    6b54:	f9 e0       	ldi	r31, 0x09	; 9
    6b56:	8f e6       	ldi	r24, 0x6F	; 111
    6b58:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    6b5a:	81 e0       	ldi	r24, 0x01	; 1
    6b5c:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    6b5e:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    6b60:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6b62:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6b64:	e2 e3       	ldi	r30, 0x32	; 50
    6b66:	f4 e0       	ldi	r31, 0x04	; 4
    6b68:	80 81       	ld	r24, Z
    6b6a:	88 60       	ori	r24, 0x08	; 8
    6b6c:	80 83       	st	Z, r24
    6b6e:	e3 e3       	ldi	r30, 0x33	; 51
    6b70:	f4 e0       	ldi	r31, 0x04	; 4
    6b72:	80 81       	ld	r24, Z
    6b74:	88 60       	ori	r24, 0x08	; 8
    6b76:	80 83       	st	Z, r24
    6b78:	08 95       	ret

00006b7a <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6b7a:	ff 92       	push	r15
    6b7c:	0f 93       	push	r16
    6b7e:	1f 93       	push	r17
    6b80:	cf 93       	push	r28
    6b82:	df 93       	push	r29
    6b84:	c6 2f       	mov	r28, r22
    6b86:	8a 01       	movw	r16, r20
    6b88:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    6b8a:	8e 7f       	andi	r24, 0xFE	; 254
    6b8c:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6b90:	0e 94 a8 34 	call	0x6950	; 0x6950 <_ZL11i2c_1_WaitWv>
    6b94:	81 30       	cpi	r24, 0x01	; 1
    6b96:	f1 f4       	brne	.+60     	; 0x6bd4 <I2C_1_SendData+0x5a>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6b98:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    6b9c:	0e 94 a8 34 	call	0x6950	; 0x6950 <_ZL11i2c_1_WaitWv>
    6ba0:	81 30       	cpi	r24, 0x01	; 1
    6ba2:	d1 f4       	brne	.+52     	; 0x6bd8 <I2C_1_SendData+0x5e>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
    6ba4:	dd 23       	and	r29, r29
    6ba6:	d1 f0       	breq	.+52     	; 0x6bdc <I2C_1_SendData+0x62>
    6ba8:	01 15       	cp	r16, r1
    6baa:	11 05       	cpc	r17, r1
    6bac:	c9 f0       	breq	.+50     	; 0x6be0 <I2C_1_SendData+0x66>
    6bae:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6bb0:	ff 24       	eor	r15, r15
    6bb2:	fa 94       	dec	r15
    6bb4:	fd 0e       	add	r15, r29
    6bb6:	dd 23       	and	r29, r29
    6bb8:	a9 f0       	breq	.+42     	; 0x6be4 <I2C_1_SendData+0x6a>
		{
			TWI1.MDATA = *pData;
    6bba:	f8 01       	movw	r30, r16
    6bbc:	80 81       	ld	r24, Z
    6bbe:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    6bc2:	0e 94 a8 34 	call	0x6950	; 0x6950 <_ZL11i2c_1_WaitWv>
    6bc6:	81 30       	cpi	r24, 0x01	; 1
    6bc8:	79 f4       	brne	.+30     	; 0x6be8 <I2C_1_SendData+0x6e>
			{
				retVal++;
    6bca:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6bcc:	0f 5f       	subi	r16, 0xFF	; 255
    6bce:	1f 4f       	sbci	r17, 0xFF	; 255
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
    6bd0:	df 2d       	mov	r29, r15
    6bd2:	ee cf       	rjmp	.-36     	; 0x6bb0 <I2C_1_SendData+0x36>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6bd4:	8f ef       	ldi	r24, 0xFF	; 255
    6bd6:	09 c0       	rjmp	.+18     	; 0x6bea <I2C_1_SendData+0x70>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6bd8:	8f ef       	ldi	r24, 0xFF	; 255
    6bda:	07 c0       	rjmp	.+14     	; 0x6bea <I2C_1_SendData+0x70>
	}	

	retVal = 0;
    6bdc:	80 e0       	ldi	r24, 0x00	; 0
    6bde:	05 c0       	rjmp	.+10     	; 0x6bea <I2C_1_SendData+0x70>
    6be0:	80 e0       	ldi	r24, 0x00	; 0
    6be2:	03 c0       	rjmp	.+6      	; 0x6bea <I2C_1_SendData+0x70>
    6be4:	8c 2f       	mov	r24, r28
    6be6:	01 c0       	rjmp	.+2      	; 0x6bea <I2C_1_SendData+0x70>
    6be8:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    6bea:	df 91       	pop	r29
    6bec:	cf 91       	pop	r28
    6bee:	1f 91       	pop	r17
    6bf0:	0f 91       	pop	r16
    6bf2:	ff 90       	pop	r15
    6bf4:	08 95       	ret

00006bf6 <I2C_1_GetData>:


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6bf6:	ef 92       	push	r14
    6bf8:	ff 92       	push	r15
    6bfa:	1f 93       	push	r17
    6bfc:	cf 93       	push	r28
    6bfe:	df 93       	push	r29
    6c00:	c8 2f       	mov	r28, r24
    6c02:	d6 2f       	mov	r29, r22
    6c04:	7a 01       	movw	r14, r20
    6c06:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    6c08:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6c0c:	0e 94 a8 34 	call	0x6950	; 0x6950 <_ZL11i2c_1_WaitWv>
    6c10:	81 30       	cpi	r24, 0x01	; 1
    6c12:	61 f5       	brne	.+88     	; 0x6c6c <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6c14:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    6c18:	0e 94 a8 34 	call	0x6950	; 0x6950 <_ZL11i2c_1_WaitWv>
    6c1c:	81 30       	cpi	r24, 0x01	; 1
    6c1e:	41 f5       	brne	.+80     	; 0x6c70 <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    6c20:	c1 60       	ori	r28, 0x01	; 1
    6c22:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6c26:	0e 94 a8 34 	call	0x6950	; 0x6950 <_ZL11i2c_1_WaitWv>
    6c2a:	81 30       	cpi	r24, 0x01	; 1
    6c2c:	19 f5       	brne	.+70     	; 0x6c74 <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    6c2e:	11 23       	and	r17, r17
    6c30:	19 f1       	breq	.+70     	; 0x6c78 <I2C_1_GetData+0x82>
    6c32:	e1 14       	cp	r14, r1
    6c34:	f1 04       	cpc	r15, r1
    6c36:	11 f1       	breq	.+68     	; 0x6c7c <I2C_1_GetData+0x86>
    6c38:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6c3a:	df ef       	ldi	r29, 0xFF	; 255
    6c3c:	d1 0f       	add	r29, r17
    6c3e:	11 23       	and	r17, r17
    6c40:	f9 f0       	breq	.+62     	; 0x6c80 <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    6c42:	0e 94 ce 34 	call	0x699c	; 0x699c <_ZL11I2C_1_WaitRv>
    6c46:	83 30       	cpi	r24, 0x03	; 3
    6c48:	e9 f4       	brne	.+58     	; 0x6c84 <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    6c4a:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    6c4e:	f7 01       	movw	r30, r14
    6c50:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    6c52:	d1 11       	cpse	r29, r1
    6c54:	02 c0       	rjmp	.+4      	; 0x6c5a <I2C_1_GetData+0x64>
    6c56:	87 e0       	ldi	r24, 0x07	; 7
    6c58:	01 c0       	rjmp	.+2      	; 0x6c5c <I2C_1_GetData+0x66>
    6c5a:	82 e0       	ldi	r24, 0x02	; 2
    6c5c:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    6c60:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6c62:	ff ef       	ldi	r31, 0xFF	; 255
    6c64:	ef 1a       	sub	r14, r31
    6c66:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6c68:	1d 2f       	mov	r17, r29
    6c6a:	e7 cf       	rjmp	.-50     	; 0x6c3a <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6c6c:	8f ef       	ldi	r24, 0xFF	; 255
    6c6e:	0b c0       	rjmp	.+22     	; 0x6c86 <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6c70:	8f ef       	ldi	r24, 0xFF	; 255
    6c72:	09 c0       	rjmp	.+18     	; 0x6c86 <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    6c74:	8f ef       	ldi	r24, 0xFF	; 255
    6c76:	07 c0       	rjmp	.+14     	; 0x6c86 <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    6c78:	80 e0       	ldi	r24, 0x00	; 0
    6c7a:	05 c0       	rjmp	.+10     	; 0x6c86 <I2C_1_GetData+0x90>
    6c7c:	80 e0       	ldi	r24, 0x00	; 0
    6c7e:	03 c0       	rjmp	.+6      	; 0x6c86 <I2C_1_GetData+0x90>
    6c80:	8c 2f       	mov	r24, r28
    6c82:	01 c0       	rjmp	.+2      	; 0x6c86 <I2C_1_GetData+0x90>
    6c84:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6c86:	df 91       	pop	r29
    6c88:	cf 91       	pop	r28
    6c8a:	1f 91       	pop	r17
    6c8c:	ff 90       	pop	r15
    6c8e:	ef 90       	pop	r14
    6c90:	08 95       	ret

00006c92 <_ZL21USART4_initializationm>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
	lb_send_text(g_tempMsgBuff);
    6c92:	20 b3       	in	r18, 0x10	; 16
    6c94:	2d 7f       	andi	r18, 0xFD	; 253
    6c96:	20 bb       	out	0x10, r18	; 16
    6c98:	e1 e9       	ldi	r30, 0x91	; 145
    6c9a:	f4 e0       	ldi	r31, 0x04	; 4
    6c9c:	20 81       	ld	r18, Z
    6c9e:	27 7f       	andi	r18, 0xF7	; 247
    6ca0:	20 83       	st	Z, r18
    6ca2:	20 b3       	in	r18, 0x10	; 16
    6ca4:	21 60       	ori	r18, 0x01	; 1
    6ca6:	20 bb       	out	0x10, r18	; 16
    6ca8:	21 b3       	in	r18, 0x11	; 17
    6caa:	21 60       	ori	r18, 0x01	; 1
    6cac:	21 bb       	out	0x11, r18	; 17
    6cae:	0e 94 f8 46 	call	0x8df0	; 0x8df0 <USART4_init>
    6cb2:	08 95       	ret

00006cb4 <_ZL21USART1_initializationm>:
    6cb4:	28 b1       	in	r18, 0x08	; 8
    6cb6:	2d 7f       	andi	r18, 0xFD	; 253
    6cb8:	28 b9       	out	0x08, r18	; 8
    6cba:	e1 e5       	ldi	r30, 0x51	; 81
    6cbc:	f4 e0       	ldi	r31, 0x04	; 4
    6cbe:	20 81       	ld	r18, Z
    6cc0:	27 7f       	andi	r18, 0xF7	; 247
    6cc2:	20 83       	st	Z, r18
    6cc4:	28 b1       	in	r18, 0x08	; 8
    6cc6:	21 60       	ori	r18, 0x01	; 1
    6cc8:	28 b9       	out	0x08, r18	; 8
    6cca:	29 b1       	in	r18, 0x09	; 9
    6ccc:	21 60       	ori	r18, 0x01	; 1
    6cce:	29 b9       	out	0x09, r18	; 9
    6cd0:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <USART1_init>
    6cd4:	08 95       	ret

00006cd6 <_ZL16linkbus_start_txv>:
    6cd6:	cf 93       	push	r28
    6cd8:	c0 91 08 49 	lds	r28, 0x4908	; 0x804908 <_ZL17linkbus_tx_active>
    6cdc:	81 e0       	ldi	r24, 0x01	; 1
    6cde:	c8 27       	eor	r28, r24
    6ce0:	59 f0       	breq	.+22     	; 0x6cf8 <_ZL16linkbus_start_txv+0x22>
    6ce2:	80 93 08 49 	sts	0x4908, r24	; 0x804908 <_ZL17linkbus_tx_active>
    6ce6:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6cea:	81 11       	cpse	r24, r1
    6cec:	03 c0       	rjmp	.+6      	; 0x6cf4 <_ZL16linkbus_start_txv+0x1e>
    6cee:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <USART4_enable_tx>
    6cf2:	02 c0       	rjmp	.+4      	; 0x6cf8 <_ZL16linkbus_start_txv+0x22>
    6cf4:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <USART1_enable_tx>
    6cf8:	8c 2f       	mov	r24, r28
    6cfa:	cf 91       	pop	r28
    6cfc:	08 95       	ret

00006cfe <_Z18nextFullLBTxBufferv>:
    6cfe:	90 e0       	ldi	r25, 0x00	; 0
    6d00:	80 91 bb 47 	lds	r24, 0x47BB	; 0x8047bb <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6d04:	28 2f       	mov	r18, r24
    6d06:	30 e0       	ldi	r19, 0x00	; 0
    6d08:	42 e3       	ldi	r20, 0x32	; 50
    6d0a:	42 9f       	mul	r20, r18
    6d0c:	f0 01       	movw	r30, r0
    6d0e:	43 9f       	mul	r20, r19
    6d10:	f0 0d       	add	r31, r0
    6d12:	11 24       	eor	r1, r1
    6d14:	e0 5c       	subi	r30, 0xC0	; 192
    6d16:	f7 4b       	sbci	r31, 0xB7	; 183
    6d18:	40 81       	ld	r20, Z
    6d1a:	41 11       	cpse	r20, r1
    6d1c:	0b c0       	rjmp	.+22     	; 0x6d34 <_Z18nextFullLBTxBufferv+0x36>
    6d1e:	9f 5f       	subi	r25, 0xFF	; 255
    6d20:	94 30       	cpi	r25, 0x04	; 4
    6d22:	50 f4       	brcc	.+20     	; 0x6d38 <_Z18nextFullLBTxBufferv+0x3a>
    6d24:	8f 5f       	subi	r24, 0xFF	; 255
    6d26:	80 93 bb 47 	sts	0x47BB, r24	; 0x8047bb <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6d2a:	84 30       	cpi	r24, 0x04	; 4
    6d2c:	48 f3       	brcs	.-46     	; 0x6d00 <_Z18nextFullLBTxBufferv+0x2>
    6d2e:	10 92 bb 47 	sts	0x47BB, r1	; 0x8047bb <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6d32:	e6 cf       	rjmp	.-52     	; 0x6d00 <_Z18nextFullLBTxBufferv+0x2>
    6d34:	81 e0       	ldi	r24, 0x01	; 1
    6d36:	01 c0       	rjmp	.+2      	; 0x6d3a <_Z18nextFullLBTxBufferv+0x3c>
    6d38:	80 e0       	ldi	r24, 0x00	; 0
    6d3a:	88 23       	and	r24, r24
    6d3c:	49 f0       	breq	.+18     	; 0x6d50 <_Z18nextFullLBTxBufferv+0x52>
    6d3e:	42 e3       	ldi	r20, 0x32	; 50
    6d40:	42 9f       	mul	r20, r18
    6d42:	c0 01       	movw	r24, r0
    6d44:	43 9f       	mul	r20, r19
    6d46:	90 0d       	add	r25, r0
    6d48:	11 24       	eor	r1, r1
    6d4a:	80 5c       	subi	r24, 0xC0	; 192
    6d4c:	97 4b       	sbci	r25, 0xB7	; 183
    6d4e:	08 95       	ret
    6d50:	80 e0       	ldi	r24, 0x00	; 0
    6d52:	90 e0       	ldi	r25, 0x00	; 0
    6d54:	08 95       	ret

00006d56 <_Z19nextEmptyLBTxBufferv>:
    6d56:	90 e0       	ldi	r25, 0x00	; 0
    6d58:	80 91 ba 47 	lds	r24, 0x47BA	; 0x8047ba <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6d5c:	28 2f       	mov	r18, r24
    6d5e:	30 e0       	ldi	r19, 0x00	; 0
    6d60:	42 e3       	ldi	r20, 0x32	; 50
    6d62:	42 9f       	mul	r20, r18
    6d64:	f0 01       	movw	r30, r0
    6d66:	43 9f       	mul	r20, r19
    6d68:	f0 0d       	add	r31, r0
    6d6a:	11 24       	eor	r1, r1
    6d6c:	e0 5c       	subi	r30, 0xC0	; 192
    6d6e:	f7 4b       	sbci	r31, 0xB7	; 183
    6d70:	40 81       	ld	r20, Z
    6d72:	44 23       	and	r20, r20
    6d74:	59 f0       	breq	.+22     	; 0x6d8c <_Z19nextEmptyLBTxBufferv+0x36>
    6d76:	9f 5f       	subi	r25, 0xFF	; 255
    6d78:	94 30       	cpi	r25, 0x04	; 4
    6d7a:	50 f4       	brcc	.+20     	; 0x6d90 <_Z19nextEmptyLBTxBufferv+0x3a>
    6d7c:	8f 5f       	subi	r24, 0xFF	; 255
    6d7e:	80 93 ba 47 	sts	0x47BA, r24	; 0x8047ba <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6d82:	84 30       	cpi	r24, 0x04	; 4
    6d84:	48 f3       	brcs	.-46     	; 0x6d58 <_Z19nextEmptyLBTxBufferv+0x2>
    6d86:	10 92 ba 47 	sts	0x47BA, r1	; 0x8047ba <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6d8a:	e6 cf       	rjmp	.-52     	; 0x6d58 <_Z19nextEmptyLBTxBufferv+0x2>
    6d8c:	81 e0       	ldi	r24, 0x01	; 1
    6d8e:	01 c0       	rjmp	.+2      	; 0x6d92 <_Z19nextEmptyLBTxBufferv+0x3c>
    6d90:	80 e0       	ldi	r24, 0x00	; 0
    6d92:	88 23       	and	r24, r24
    6d94:	49 f0       	breq	.+18     	; 0x6da8 <_Z19nextEmptyLBTxBufferv+0x52>
    6d96:	42 e3       	ldi	r20, 0x32	; 50
    6d98:	42 9f       	mul	r20, r18
    6d9a:	c0 01       	movw	r24, r0
    6d9c:	43 9f       	mul	r20, r19
    6d9e:	90 0d       	add	r25, r0
    6da0:	11 24       	eor	r1, r1
    6da2:	80 5c       	subi	r24, 0xC0	; 192
    6da4:	97 4b       	sbci	r25, 0xB7	; 183
    6da6:	08 95       	ret
    6da8:	80 e0       	ldi	r24, 0x00	; 0
    6daa:	90 e0       	ldi	r25, 0x00	; 0
    6dac:	08 95       	ret

00006dae <_Z19nextEmptyLBRxBufferv>:
    6dae:	90 e0       	ldi	r25, 0x00	; 0
    6db0:	80 91 b9 47 	lds	r24, 0x47B9	; 0x8047b9 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6db4:	28 2f       	mov	r18, r24
    6db6:	30 e0       	ldi	r19, 0x00	; 0
    6db8:	42 e4       	ldi	r20, 0x42	; 66
    6dba:	42 9f       	mul	r20, r18
    6dbc:	f0 01       	movw	r30, r0
    6dbe:	43 9f       	mul	r20, r19
    6dc0:	f0 0d       	add	r31, r0
    6dc2:	11 24       	eor	r1, r1
    6dc4:	e4 54       	subi	r30, 0x44	; 68
    6dc6:	f8 4b       	sbci	r31, 0xB8	; 184
    6dc8:	41 81       	ldd	r20, Z+1	; 0x01
    6dca:	52 81       	ldd	r21, Z+2	; 0x02
    6dcc:	45 2b       	or	r20, r21
    6dce:	59 f0       	breq	.+22     	; 0x6de6 <_Z19nextEmptyLBRxBufferv+0x38>
    6dd0:	9f 5f       	subi	r25, 0xFF	; 255
    6dd2:	92 30       	cpi	r25, 0x02	; 2
    6dd4:	50 f4       	brcc	.+20     	; 0x6dea <_Z19nextEmptyLBRxBufferv+0x3c>
    6dd6:	8f 5f       	subi	r24, 0xFF	; 255
    6dd8:	80 93 b9 47 	sts	0x47B9, r24	; 0x8047b9 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6ddc:	82 30       	cpi	r24, 0x02	; 2
    6dde:	40 f3       	brcs	.-48     	; 0x6db0 <_Z19nextEmptyLBRxBufferv+0x2>
    6de0:	10 92 b9 47 	sts	0x47B9, r1	; 0x8047b9 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6de4:	e5 cf       	rjmp	.-54     	; 0x6db0 <_Z19nextEmptyLBRxBufferv+0x2>
    6de6:	81 e0       	ldi	r24, 0x01	; 1
    6de8:	01 c0       	rjmp	.+2      	; 0x6dec <_Z19nextEmptyLBRxBufferv+0x3e>
    6dea:	80 e0       	ldi	r24, 0x00	; 0
    6dec:	88 23       	and	r24, r24
    6dee:	49 f0       	breq	.+18     	; 0x6e02 <_Z19nextEmptyLBRxBufferv+0x54>
    6df0:	42 e4       	ldi	r20, 0x42	; 66
    6df2:	42 9f       	mul	r20, r18
    6df4:	c0 01       	movw	r24, r0
    6df6:	43 9f       	mul	r20, r19
    6df8:	90 0d       	add	r25, r0
    6dfa:	11 24       	eor	r1, r1
    6dfc:	84 54       	subi	r24, 0x44	; 68
    6dfe:	98 4b       	sbci	r25, 0xB8	; 184
    6e00:	08 95       	ret
    6e02:	80 e0       	ldi	r24, 0x00	; 0
    6e04:	90 e0       	ldi	r25, 0x00	; 0
    6e06:	08 95       	ret

00006e08 <_Z18nextFullLBRxBufferv>:
    6e08:	90 e0       	ldi	r25, 0x00	; 0
    6e0a:	80 91 b8 47 	lds	r24, 0x47B8	; 0x8047b8 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6e0e:	28 2f       	mov	r18, r24
    6e10:	30 e0       	ldi	r19, 0x00	; 0
    6e12:	42 e4       	ldi	r20, 0x42	; 66
    6e14:	42 9f       	mul	r20, r18
    6e16:	f0 01       	movw	r30, r0
    6e18:	43 9f       	mul	r20, r19
    6e1a:	f0 0d       	add	r31, r0
    6e1c:	11 24       	eor	r1, r1
    6e1e:	e4 54       	subi	r30, 0x44	; 68
    6e20:	f8 4b       	sbci	r31, 0xB8	; 184
    6e22:	41 81       	ldd	r20, Z+1	; 0x01
    6e24:	52 81       	ldd	r21, Z+2	; 0x02
    6e26:	45 2b       	or	r20, r21
    6e28:	59 f4       	brne	.+22     	; 0x6e40 <_Z18nextFullLBRxBufferv+0x38>
    6e2a:	9f 5f       	subi	r25, 0xFF	; 255
    6e2c:	92 30       	cpi	r25, 0x02	; 2
    6e2e:	50 f4       	brcc	.+20     	; 0x6e44 <_Z18nextFullLBRxBufferv+0x3c>
    6e30:	8f 5f       	subi	r24, 0xFF	; 255
    6e32:	80 93 b8 47 	sts	0x47B8, r24	; 0x8047b8 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6e36:	82 30       	cpi	r24, 0x02	; 2
    6e38:	40 f3       	brcs	.-48     	; 0x6e0a <_Z18nextFullLBRxBufferv+0x2>
    6e3a:	10 92 b8 47 	sts	0x47B8, r1	; 0x8047b8 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6e3e:	e5 cf       	rjmp	.-54     	; 0x6e0a <_Z18nextFullLBRxBufferv+0x2>
    6e40:	81 e0       	ldi	r24, 0x01	; 1
    6e42:	01 c0       	rjmp	.+2      	; 0x6e46 <_Z18nextFullLBRxBufferv+0x3e>
    6e44:	80 e0       	ldi	r24, 0x00	; 0
    6e46:	88 23       	and	r24, r24
    6e48:	49 f0       	breq	.+18     	; 0x6e5c <_Z18nextFullLBRxBufferv+0x54>
    6e4a:	42 e4       	ldi	r20, 0x42	; 66
    6e4c:	42 9f       	mul	r20, r18
    6e4e:	c0 01       	movw	r24, r0
    6e50:	43 9f       	mul	r20, r19
    6e52:	90 0d       	add	r25, r0
    6e54:	11 24       	eor	r1, r1
    6e56:	84 54       	subi	r24, 0x44	; 68
    6e58:	98 4b       	sbci	r25, 0xB8	; 184
    6e5a:	08 95       	ret
    6e5c:	80 e0       	ldi	r24, 0x00	; 0
    6e5e:	90 e0       	ldi	r25, 0x00	; 0
    6e60:	08 95       	ret

00006e62 <_Z19linkbusTxInProgressv>:
    6e62:	80 91 08 49 	lds	r24, 0x4908	; 0x804908 <_ZL17linkbus_tx_active>
    6e66:	08 95       	ret

00006e68 <_Z14linkbus_end_txv>:
    6e68:	80 91 08 49 	lds	r24, 0x4908	; 0x804908 <_ZL17linkbus_tx_active>
    6e6c:	88 23       	and	r24, r24
    6e6e:	89 f0       	breq	.+34     	; 0x6e92 <_Z14linkbus_end_txv+0x2a>
    6e70:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6e74:	81 11       	cpse	r24, r1
    6e76:	06 c0       	rjmp	.+12     	; 0x6e84 <_Z14linkbus_end_txv+0x1c>
    6e78:	e0 e8       	ldi	r30, 0x80	; 128
    6e7a:	f8 e0       	ldi	r31, 0x08	; 8
    6e7c:	85 81       	ldd	r24, Z+5	; 0x05
    6e7e:	8f 7d       	andi	r24, 0xDF	; 223
    6e80:	85 83       	std	Z+5, r24	; 0x05
    6e82:	05 c0       	rjmp	.+10     	; 0x6e8e <_Z14linkbus_end_txv+0x26>
    6e84:	e0 e2       	ldi	r30, 0x20	; 32
    6e86:	f8 e0       	ldi	r31, 0x08	; 8
    6e88:	85 81       	ldd	r24, Z+5	; 0x05
    6e8a:	8f 7d       	andi	r24, 0xDF	; 223
    6e8c:	85 83       	std	Z+5, r24	; 0x05
    6e8e:	10 92 08 49 	sts	0x4908, r1	; 0x804908 <_ZL17linkbus_tx_active>
    6e92:	08 95       	ret

00006e94 <_Z16linkbus_reset_rxv>:
    6e94:	cf 93       	push	r28
    6e96:	df 93       	push	r29
    6e98:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6e9c:	81 11       	cpse	r24, r1
    6e9e:	14 c0       	rjmp	.+40     	; 0x6ec8 <_Z16linkbus_reset_rxv+0x34>
    6ea0:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <__TEXT_REGION_LENGTH__+0x7e0886>
    6ea4:	88 23       	and	r24, r24
    6ea6:	1c f5       	brge	.+70     	; 0x6eee <_Z16linkbus_reset_rxv+0x5a>
    6ea8:	e0 e8       	ldi	r30, 0x80	; 128
    6eaa:	f8 e0       	ldi	r31, 0x08	; 8
    6eac:	86 81       	ldd	r24, Z+6	; 0x06
    6eae:	8f 77       	andi	r24, 0x7F	; 127
    6eb0:	86 83       	std	Z+6, r24	; 0x06
    6eb2:	84 e8       	ldi	r24, 0x84	; 132
    6eb4:	ac eb       	ldi	r26, 0xBC	; 188
    6eb6:	b7 e4       	ldi	r27, 0x47	; 71
    6eb8:	ed 01       	movw	r28, r26
    6eba:	19 92       	st	Y+, r1
    6ebc:	8a 95       	dec	r24
    6ebe:	e9 f7       	brne	.-6      	; 0x6eba <_Z16linkbus_reset_rxv+0x26>
    6ec0:	86 81       	ldd	r24, Z+6	; 0x06
    6ec2:	80 68       	ori	r24, 0x80	; 128
    6ec4:	86 83       	std	Z+6, r24	; 0x06
    6ec6:	13 c0       	rjmp	.+38     	; 0x6eee <_Z16linkbus_reset_rxv+0x5a>
    6ec8:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    6ecc:	88 23       	and	r24, r24
    6ece:	7c f4       	brge	.+30     	; 0x6eee <_Z16linkbus_reset_rxv+0x5a>
    6ed0:	e0 e2       	ldi	r30, 0x20	; 32
    6ed2:	f8 e0       	ldi	r31, 0x08	; 8
    6ed4:	86 81       	ldd	r24, Z+6	; 0x06
    6ed6:	8f 77       	andi	r24, 0x7F	; 127
    6ed8:	86 83       	std	Z+6, r24	; 0x06
    6eda:	84 e8       	ldi	r24, 0x84	; 132
    6edc:	ac eb       	ldi	r26, 0xBC	; 188
    6ede:	b7 e4       	ldi	r27, 0x47	; 71
    6ee0:	ed 01       	movw	r28, r26
    6ee2:	19 92       	st	Y+, r1
    6ee4:	8a 95       	dec	r24
    6ee6:	e9 f7       	brne	.-6      	; 0x6ee2 <_Z16linkbus_reset_rxv+0x4e>
    6ee8:	86 81       	ldd	r24, Z+6	; 0x06
    6eea:	80 68       	ori	r24, 0x80	; 128
    6eec:	86 83       	std	Z+6, r24	; 0x06
    6eee:	df 91       	pop	r29
    6ef0:	cf 91       	pop	r28
    6ef2:	08 95       	ret

00006ef4 <_Z12linkbus_initm14USART_Number_t>:
    6ef4:	cf 92       	push	r12
    6ef6:	df 92       	push	r13
    6ef8:	ef 92       	push	r14
    6efa:	ff 92       	push	r15
    6efc:	cf 93       	push	r28
    6efe:	6b 01       	movw	r12, r22
    6f00:	7c 01       	movw	r14, r24
    6f02:	84 e8       	ldi	r24, 0x84	; 132
    6f04:	ec eb       	ldi	r30, 0xBC	; 188
    6f06:	f7 e4       	ldi	r31, 0x47	; 71
    6f08:	df 01       	movw	r26, r30
    6f0a:	1d 92       	st	X+, r1
    6f0c:	8a 95       	dec	r24
    6f0e:	e9 f7       	brne	.-6      	; 0x6f0a <_Z12linkbus_initm14USART_Number_t+0x16>
    6f10:	80 e0       	ldi	r24, 0x00	; 0
    6f12:	90 e0       	ldi	r25, 0x00	; 0
    6f14:	84 30       	cpi	r24, 0x04	; 4
    6f16:	91 05       	cpc	r25, r1
    6f18:	5c f4       	brge	.+22     	; 0x6f30 <_Z12linkbus_initm14USART_Number_t+0x3c>
    6f1a:	22 e3       	ldi	r18, 0x32	; 50
    6f1c:	28 9f       	mul	r18, r24
    6f1e:	f0 01       	movw	r30, r0
    6f20:	29 9f       	mul	r18, r25
    6f22:	f0 0d       	add	r31, r0
    6f24:	11 24       	eor	r1, r1
    6f26:	e0 5c       	subi	r30, 0xC0	; 192
    6f28:	f7 4b       	sbci	r31, 0xB7	; 183
    6f2a:	10 82       	st	Z, r1
    6f2c:	01 96       	adiw	r24, 0x01	; 1
    6f2e:	f2 cf       	rjmp	.-28     	; 0x6f14 <_Z12linkbus_initm14USART_Number_t+0x20>
    6f30:	46 30       	cpi	r20, 0x06	; 6
    6f32:	21 f4       	brne	.+8      	; 0x6f3c <_Z12linkbus_initm14USART_Number_t+0x48>
    6f34:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6f38:	87 30       	cpi	r24, 0x07	; 7
    6f3a:	61 f4       	brne	.+24     	; 0x6f54 <_Z12linkbus_initm14USART_Number_t+0x60>
    6f3c:	c4 2f       	mov	r28, r20
    6f3e:	c7 01       	movw	r24, r14
    6f40:	b6 01       	movw	r22, r12
    6f42:	41 11       	cpse	r20, r1
    6f44:	03 c0       	rjmp	.+6      	; 0x6f4c <_Z12linkbus_initm14USART_Number_t+0x58>
    6f46:	0e 94 49 36 	call	0x6c92	; 0x6c92 <_ZL21USART4_initializationm>
    6f4a:	02 c0       	rjmp	.+4      	; 0x6f50 <_Z12linkbus_initm14USART_Number_t+0x5c>
    6f4c:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <_ZL21USART1_initializationm>
    6f50:	c0 93 22 40 	sts	0x4022, r28	; 0x804022 <g_linkbus_usart_number>
    6f54:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <_ZL14g_bus_disabled>
    6f58:	cf 91       	pop	r28
    6f5a:	ff 90       	pop	r15
    6f5c:	ef 90       	pop	r14
    6f5e:	df 90       	pop	r13
    6f60:	cf 90       	pop	r12
    6f62:	08 95       	ret

00006f64 <_Z15linkbus_disablev>:
    6f64:	81 e0       	ldi	r24, 0x01	; 1
    6f66:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZL14g_bus_disabled>
    6f6a:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6f6e:	84 30       	cpi	r24, 0x04	; 4
    6f70:	19 f4       	brne	.+6      	; 0x6f78 <_Z15linkbus_disablev+0x14>
    6f72:	0e 94 23 47 	call	0x8e46	; 0x8e46 <USART4_disable>
    6f76:	02 c0       	rjmp	.+4      	; 0x6f7c <_Z15linkbus_disablev+0x18>
    6f78:	0e 94 ef 46 	call	0x8dde	; 0x8dde <USART1_disable>
    6f7c:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_Z14linkbus_end_txv>
    6f80:	84 e8       	ldi	r24, 0x84	; 132
    6f82:	ec eb       	ldi	r30, 0xBC	; 188
    6f84:	f7 e4       	ldi	r31, 0x47	; 71
    6f86:	df 01       	movw	r26, r30
    6f88:	1d 92       	st	X+, r1
    6f8a:	8a 95       	dec	r24
    6f8c:	e9 f7       	brne	.-6      	; 0x6f88 <_Z15linkbus_disablev+0x24>
    6f8e:	80 e0       	ldi	r24, 0x00	; 0
    6f90:	84 30       	cpi	r24, 0x04	; 4
    6f92:	48 f4       	brcc	.+18     	; 0x6fa6 <_Z15linkbus_disablev+0x42>
    6f94:	b2 e3       	ldi	r27, 0x32	; 50
    6f96:	8b 9f       	mul	r24, r27
    6f98:	f0 01       	movw	r30, r0
    6f9a:	11 24       	eor	r1, r1
    6f9c:	e0 5c       	subi	r30, 0xC0	; 192
    6f9e:	f7 4b       	sbci	r31, 0xB7	; 183
    6fa0:	10 82       	st	Z, r1
    6fa2:	8f 5f       	subi	r24, 0xFF	; 255
    6fa4:	f5 cf       	rjmp	.-22     	; 0x6f90 <_Z15linkbus_disablev+0x2c>
    6fa6:	08 95       	ret

00006fa8 <_Z12lb_send_textPc>:
    6fa8:	ef 92       	push	r14
    6faa:	ff 92       	push	r15
    6fac:	1f 93       	push	r17
    6fae:	cf 93       	push	r28
    6fb0:	df 93       	push	r29
    6fb2:	10 91 23 40 	lds	r17, 0x4023	; 0x804023 <_ZL14g_bus_disabled>
    6fb6:	11 11       	cpse	r17, r1
    6fb8:	2d c0       	rjmp	.+90     	; 0x7014 <_Z12lb_send_textPc+0x6c>
    6fba:	00 97       	sbiw	r24, 0x00	; 0
    6fbc:	69 f1       	breq	.+90     	; 0x7018 <_Z12lb_send_textPc+0x70>
    6fbe:	7c 01       	movw	r14, r24
    6fc0:	0e 94 ab 36 	call	0x6d56	; 0x6d56 <_Z19nextEmptyLBTxBufferv>
    6fc4:	c8 ec       	ldi	r28, 0xC8	; 200
    6fc6:	d0 e0       	ldi	r29, 0x00	; 0
    6fc8:	00 97       	sbiw	r24, 0x00	; 0
    6fca:	a1 f4       	brne	.+40     	; 0x6ff4 <_Z12lb_send_textPc+0x4c>
    6fcc:	20 97       	sbiw	r28, 0x00	; 0
    6fce:	91 f0       	breq	.+36     	; 0x6ff4 <_Z12lb_send_textPc+0x4c>
    6fd0:	0e 94 31 37 	call	0x6e62	; 0x6e62 <_Z19linkbusTxInProgressv>
    6fd4:	88 23       	and	r24, r24
    6fd6:	21 f0       	breq	.+8      	; 0x6fe0 <_Z12lb_send_textPc+0x38>
    6fd8:	20 97       	sbiw	r28, 0x00	; 0
    6fda:	19 f4       	brne	.+6      	; 0x6fe2 <_Z12lb_send_textPc+0x3a>
    6fdc:	81 2f       	mov	r24, r17
    6fde:	01 c0       	rjmp	.+2      	; 0x6fe2 <_Z12lb_send_textPc+0x3a>
    6fe0:	81 2f       	mov	r24, r17
    6fe2:	88 23       	and	r24, r24
    6fe4:	21 f0       	breq	.+8      	; 0x6fee <_Z12lb_send_textPc+0x46>
    6fe6:	20 97       	sbiw	r28, 0x00	; 0
    6fe8:	99 f3       	breq	.-26     	; 0x6fd0 <_Z12lb_send_textPc+0x28>
    6fea:	21 97       	sbiw	r28, 0x01	; 1
    6fec:	f1 cf       	rjmp	.-30     	; 0x6fd0 <_Z12lb_send_textPc+0x28>
    6fee:	0e 94 ab 36 	call	0x6d56	; 0x6d56 <_Z19nextEmptyLBTxBufferv>
    6ff2:	ea cf       	rjmp	.-44     	; 0x6fc8 <_Z12lb_send_textPc+0x20>
    6ff4:	00 97       	sbiw	r24, 0x00	; 0
    6ff6:	91 f0       	breq	.+36     	; 0x701c <_Z12lb_send_textPc+0x74>
    6ff8:	ff 92       	push	r15
    6ffa:	ef 92       	push	r14
    6ffc:	9f 93       	push	r25
    6ffe:	8f 93       	push	r24
    7000:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    7004:	0e 94 6b 36 	call	0x6cd6	; 0x6cd6 <_ZL16linkbus_start_txv>
    7008:	0f 90       	pop	r0
    700a:	0f 90       	pop	r0
    700c:	0f 90       	pop	r0
    700e:	0f 90       	pop	r0
    7010:	80 e0       	ldi	r24, 0x00	; 0
    7012:	05 c0       	rjmp	.+10     	; 0x701e <_Z12lb_send_textPc+0x76>
    7014:	81 e0       	ldi	r24, 0x01	; 1
    7016:	03 c0       	rjmp	.+6      	; 0x701e <_Z12lb_send_textPc+0x76>
    7018:	81 e0       	ldi	r24, 0x01	; 1
    701a:	01 c0       	rjmp	.+2      	; 0x701e <_Z12lb_send_textPc+0x76>
    701c:	81 e0       	ldi	r24, 0x01	; 1
    701e:	df 91       	pop	r29
    7020:	cf 91       	pop	r28
    7022:	1f 91       	pop	r17
    7024:	ff 90       	pop	r15
    7026:	ef 90       	pop	r14
    7028:	08 95       	ret

0000702a <_Z11lb_send_msg13LBMessageTypePKcPc>:
    702a:	83 30       	cpi	r24, 0x03	; 3
    702c:	29 f0       	breq	.+10     	; 0x7038 <_Z11lb_send_msg13LBMessageTypePKcPc+0xe>
    702e:	82 30       	cpi	r24, 0x02	; 2
    7030:	31 f0       	breq	.+12     	; 0x703e <_Z11lb_send_msg13LBMessageTypePKcPc+0x14>
    7032:	9b e3       	ldi	r25, 0x3B	; 59
    7034:	84 e2       	ldi	r24, 0x24	; 36
    7036:	05 c0       	rjmp	.+10     	; 0x7042 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    7038:	9b e3       	ldi	r25, 0x3B	; 59
    703a:	81 e2       	ldi	r24, 0x21	; 33
    703c:	02 c0       	rjmp	.+4      	; 0x7042 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    703e:	9f e3       	ldi	r25, 0x3F	; 63
    7040:	84 e2       	ldi	r24, 0x24	; 36
    7042:	1f 92       	push	r1
    7044:	9f 93       	push	r25
    7046:	5f 93       	push	r21
    7048:	4f 93       	push	r20
    704a:	7f 93       	push	r23
    704c:	6f 93       	push	r22
    704e:	1f 92       	push	r1
    7050:	8f 93       	push	r24
    7052:	86 eb       	ldi	r24, 0xB6	; 182
    7054:	94 e4       	ldi	r25, 0x44	; 68
    7056:	9f 93       	push	r25
    7058:	8f 93       	push	r24
    705a:	89 e0       	ldi	r24, 0x09	; 9
    705c:	99 e4       	ldi	r25, 0x49	; 73
    705e:	9f 93       	push	r25
    7060:	8f 93       	push	r24
    7062:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    7066:	89 e0       	ldi	r24, 0x09	; 9
    7068:	99 e4       	ldi	r25, 0x49	; 73
    706a:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <_Z12lb_send_textPc>
    706e:	8d b7       	in	r24, 0x3d	; 61
    7070:	9e b7       	in	r25, 0x3e	; 62
    7072:	0c 96       	adiw	r24, 0x0c	; 12
    7074:	8d bf       	out	0x3d, r24	; 61
    7076:	9e bf       	out	0x3e, r25	; 62
    7078:	08 95       	ret

0000707a <_Z16lb_broadcast_numjPKc>:
}


void lb_broadcast_num(uint16_t data, const char* str)
{
    707a:	0f 93       	push	r16
    707c:	1f 93       	push	r17
    707e:	cf 93       	push	r28
    7080:	df 93       	push	r29
    7082:	cd b7       	in	r28, 0x3d	; 61
    7084:	de b7       	in	r29, 0x3e	; 62
    7086:	26 97       	sbiw	r28, 0x06	; 6
    7088:	cd bf       	out	0x3d, r28	; 61
    708a:	de bf       	out	0x3e, r29	; 62
    708c:	8b 01       	movw	r16, r22
	char t[6] = "\0";
    708e:	20 91 59 44 	lds	r18, 0x4459	; 0x804459 <g_80m_power_table+0x422>
    7092:	30 91 5a 44 	lds	r19, 0x445A	; 0x80445a <g_80m_power_table+0x423>
    7096:	29 83       	std	Y+1, r18	; 0x01
    7098:	3a 83       	std	Y+2, r19	; 0x02
    709a:	fe 01       	movw	r30, r28
    709c:	33 96       	adiw	r30, 0x03	; 3
    709e:	24 e0       	ldi	r18, 0x04	; 4
    70a0:	df 01       	movw	r26, r30
    70a2:	1d 92       	st	X+, r1
    70a4:	2a 95       	dec	r18
    70a6:	e9 f7       	brne	.-6      	; 0x70a2 <_Z16lb_broadcast_numjPKc+0x28>

	sprintf(t, "%u", data);
    70a8:	9f 93       	push	r25
    70aa:	8f 93       	push	r24
    70ac:	86 ec       	ldi	r24, 0xC6	; 198
    70ae:	94 e4       	ldi	r25, 0x44	; 68
    70b0:	9f 93       	push	r25
    70b2:	8f 93       	push	r24
    70b4:	ce 01       	movw	r24, r28
    70b6:	01 96       	adiw	r24, 0x01	; 1
    70b8:	9f 93       	push	r25
    70ba:	8f 93       	push	r24
    70bc:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
	g_tempMsgBuff[0] = '\0';
    70c0:	10 92 09 49 	sts	0x4909, r1	; 0x804909 <_ZL13g_tempMsgBuff>

	if(str)
    70c4:	0f 90       	pop	r0
    70c6:	0f 90       	pop	r0
    70c8:	0f 90       	pop	r0
    70ca:	0f 90       	pop	r0
    70cc:	0f 90       	pop	r0
    70ce:	0f 90       	pop	r0
    70d0:	01 15       	cp	r16, r1
    70d2:	11 05       	cpc	r17, r1
    70d4:	91 f0       	breq	.+36     	; 0x70fa <_Z16lb_broadcast_numjPKc+0x80>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
    70d6:	ce 01       	movw	r24, r28
    70d8:	01 96       	adiw	r24, 0x01	; 1
    70da:	9f 93       	push	r25
    70dc:	8f 93       	push	r24
    70de:	1f 93       	push	r17
    70e0:	0f 93       	push	r16
    70e2:	89 ec       	ldi	r24, 0xC9	; 201
    70e4:	94 e4       	ldi	r25, 0x44	; 68
    70e6:	9f 93       	push	r25
    70e8:	8f 93       	push	r24
    70ea:	89 e0       	ldi	r24, 0x09	; 9
    70ec:	99 e4       	ldi	r25, 0x49	; 73
    70ee:	9f 93       	push	r25
    70f0:	8f 93       	push	r24
    70f2:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    70f6:	cd bf       	out	0x3d, r28	; 61
    70f8:	de bf       	out	0x3e, r29	; 62
	}

	if(g_tempMsgBuff[0]) lb_send_text(g_tempMsgBuff);
    70fa:	80 91 09 49 	lds	r24, 0x4909	; 0x804909 <_ZL13g_tempMsgBuff>
    70fe:	88 23       	and	r24, r24
    7100:	21 f0       	breq	.+8      	; 0x710a <_Z16lb_broadcast_numjPKc+0x90>
    7102:	89 e0       	ldi	r24, 0x09	; 9
    7104:	99 e4       	ldi	r25, 0x49	; 73
    7106:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <_Z12lb_send_textPc>
}
    710a:	26 96       	adiw	r28, 0x06	; 6
    710c:	cd bf       	out	0x3d, r28	; 61
    710e:	de bf       	out	0x3e, r29	; 62
    7110:	df 91       	pop	r29
    7112:	cf 91       	pop	r28
    7114:	1f 91       	pop	r17
    7116:	0f 91       	pop	r16
    7118:	08 95       	ret

0000711a <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    711a:	90 e0       	ldi	r25, 0x00	; 0
    711c:	fc 01       	movw	r30, r24
    711e:	b0 97       	sbiw	r30, 0x20	; 32
    7120:	ed 35       	cpi	r30, 0x5D	; 93
    7122:	f1 05       	cpc	r31, r1
    7124:	08 f0       	brcs	.+2      	; 0x7128 <_Z12getMorseCharc+0xe>
    7126:	e8 c0       	rjmp	.+464    	; 0x72f8 <_Z12getMorseCharc+0x1de>
    7128:	e7 54       	subi	r30, 0x47	; 71
    712a:	ff 4f       	sbci	r31, 0xFF	; 255
    712c:	0c 94 95 4c 	jmp	0x992a	; 0x992a <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7130:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    7132:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    7134:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    7136:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7138:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    713a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    713c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    713e:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    7140:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    7142:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    7144:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7146:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7148:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    714a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    714c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    714e:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7150:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    7152:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    7154:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    7156:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    7158:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    715a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    715c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    715e:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7160:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    7162:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    7164:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    7166:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7168:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    716a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    716c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    716e:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7170:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    7172:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    7174:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    7176:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    7178:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    717a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    717c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    717e:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    7180:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    7182:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    7184:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    7186:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7188:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    718a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    718c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    718e:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7190:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    7192:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    7194:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    7196:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7198:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    719a:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    719c:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    719e:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    71a0:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    71a2:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    71a4:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    71a6:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    71a8:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    71aa:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    71ac:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    71ae:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    71b0:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    71b2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    71b4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    71b6:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    71b8:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    71ba:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    71bc:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    71be:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    71c0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    71c2:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    71c4:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    71c6:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    71c8:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    71ca:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    71cc:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    71ce:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    71d0:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    71d2:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    71d4:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    71d6:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    71d8:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    71da:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    71dc:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    71de:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    71e0:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    71e2:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    71e4:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    71e6:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    71e8:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    71ea:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    71ec:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    71ee:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    71f0:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    71f2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    71f4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    71f6:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    71f8:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    71fa:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    71fc:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    71fe:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    7200:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    7202:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    7204:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7206:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    7208:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    720a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    720c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    720e:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    7210:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    7212:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    7214:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7216:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    7218:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    721a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    721c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    721e:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    7220:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    7222:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    7224:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7226:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7228:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    722a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    722c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    722e:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7230:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    7232:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    7234:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7236:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7238:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    723a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    723c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    723e:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    7240:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    7242:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    7244:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7246:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    7248:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    724a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    724c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    724e:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    7250:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    7252:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    7254:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7256:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    7258:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    725a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    725c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    725e:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    7260:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    7262:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    7264:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7266:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    7268:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    726a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    726c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    726e:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    7270:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    7272:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    7274:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7276:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    7278:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    727a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    727c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    727e:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    7280:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    7282:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    7284:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7286:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    7288:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    728a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    728c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    728e:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7290:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    7292:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    7294:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7296:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    7298:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    729a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    729c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    729e:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    72a0:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    72a2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    72a4:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    72a6:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    72a8:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    72aa:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    72ac:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    72ae:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    72b0:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    72b2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    72b4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    72b6:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    72b8:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    72ba:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    72bc:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    72be:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    72c0:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    72c2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    72c4:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    72c6:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    72c8:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    72ca:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    72cc:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    72ce:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    72d0:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    72d2:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    72d4:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    72d6:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    72d8:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    72da:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    72dc:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    72de:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    72e0:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    72e2:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    72e4:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    72e6:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    72e8:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    72ea:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    72ec:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    72ee:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    72f0:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    72f2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    72f4:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    72f6:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    72f8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    72fa:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    72fc:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    72fe:	08 95       	ret

00007300 <_Z9makeMorsePcPbS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a bool indicating whether a CW carrier should be sent
 *  Pass in a pointer to a bool in the second and third arguments:
 */
bool makeMorse(char* s, bool* repeating, bool* finished)
{
    7300:	cf 93       	push	r28
    7302:	df 93       	push	r29
    7304:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static bool completedString = false;
	static bool carrierOn = false;
	static bool holdKeyDown = false;

	if(s)   /* load a new NULL-terminated string to send */
    7306:	00 97       	sbiw	r24, 0x00	; 0
    7308:	b1 f1       	breq	.+108    	; 0x7376 <_Z9makeMorsePcPbS0_+0x76>
	{
		holdKeyDown = false;
    730a:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>

		if(repeating)
    730e:	61 15       	cp	r22, r1
    7310:	71 05       	cpc	r23, r1
    7312:	21 f0       	breq	.+8      	; 0x731c <_Z9makeMorsePcPbS0_+0x1c>
		{
			repeat = *repeating;
    7314:	db 01       	movw	r26, r22
    7316:	2c 91       	ld	r18, X
    7318:	20 93 25 40 	sts	0x4025, r18	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
		}

		if(*s)
    731c:	fc 01       	movw	r30, r24
    731e:	20 81       	ld	r18, Z
    7320:	22 23       	and	r18, r18
    7322:	d9 f0       	breq	.+54     	; 0x735a <_Z9makeMorsePcPbS0_+0x5a>
		{
			str = s;
    7324:	80 93 44 49 	sts	0x4944, r24	; 0x804944 <_ZZ9makeMorsePcPbS0_E3str>
    7328:	90 93 45 49 	sts	0x4945, r25	; 0x804945 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			c = ' ';
    732c:	80 e2       	ldi	r24, 0x20	; 32
    732e:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
			morseInProgress = getMorseChar(*str);
    7332:	82 2f       	mov	r24, r18
    7334:	0e 94 8d 38 	call	0x711a	; 0x711a <_Z12getMorseCharc>
    7338:	60 93 41 49 	sts	0x4941, r22	; 0x804941 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    733c:	70 93 42 49 	sts	0x4942, r23	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    7340:	80 93 43 49 	sts	0x4943, r24	; 0x804943 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
			charIndex = 0;
    7344:	10 92 40 49 	sts	0x4940, r1	; 0x804940 <_ZZ9makeMorsePcPbS0_E9charIndex>
			symbolIndex = 0;
    7348:	10 92 3f 49 	sts	0x493F, r1	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			elementIndex = 0;
    734c:	10 92 3e 49 	sts	0x493E, r1	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
			addedSpace = 0;
    7350:	10 92 3d 49 	sts	0x493D, r1	; 0x80493d <_ZZ9makeMorsePcPbS0_E10addedSpace>
			completedString = false;
    7354:	10 92 3c 49 	sts	0x493C, r1	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
    7358:	0a c0       	rjmp	.+20     	; 0x736e <_Z9makeMorsePcPbS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    735a:	10 92 44 49 	sts	0x4944, r1	; 0x804944 <_ZZ9makeMorsePcPbS0_E3str>
    735e:	10 92 45 49 	sts	0x4945, r1	; 0x804945 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			completedString = true;
    7362:	81 e0       	ldi	r24, 0x01	; 1
    7364:	80 93 3c 49 	sts	0x493C, r24	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
			if(finished)
    7368:	20 97       	sbiw	r28, 0x00	; 0
    736a:	09 f0       	breq	.+2      	; 0x736e <_Z9makeMorsePcPbS0_+0x6e>
			{
				*finished = true;
    736c:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    736e:	10 92 3b 49 	sts	0x493B, r1	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
		return( OFF);
    7372:	80 e0       	ldi	r24, 0x00	; 0
    7374:	b8 c0       	rjmp	.+368    	; 0x74e6 <_Z9makeMorsePcPbS0_+0x1e6>
	}
	else if(str)
    7376:	e0 91 44 49 	lds	r30, 0x4944	; 0x804944 <_ZZ9makeMorsePcPbS0_E3str>
    737a:	f0 91 45 49 	lds	r31, 0x4945	; 0x804945 <_ZZ9makeMorsePcPbS0_E3str+0x1>
    737e:	30 97       	sbiw	r30, 0x00	; 0
    7380:	09 f4       	brne	.+2      	; 0x7384 <_Z9makeMorsePcPbS0_+0x84>
    7382:	a4 c0       	rjmp	.+328    	; 0x74cc <_Z9makeMorsePcPbS0_+0x1cc>
	{
		if(repeating)
    7384:	61 15       	cp	r22, r1
    7386:	71 05       	cpc	r23, r1
    7388:	21 f0       	breq	.+8      	; 0x7392 <_Z9makeMorsePcPbS0_+0x92>
		{
			*repeating = repeat;
    738a:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    738e:	db 01       	movw	r26, r22
    7390:	8c 93       	st	X, r24
		}

		if(completedString)
    7392:	80 91 3c 49 	lds	r24, 0x493C	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
    7396:	88 23       	and	r24, r24
    7398:	49 f0       	breq	.+18     	; 0x73ac <_Z9makeMorsePcPbS0_+0xac>
		{
			if(finished)
    739a:	20 97       	sbiw	r28, 0x00	; 0
    739c:	09 f4       	brne	.+2      	; 0x73a0 <_Z9makeMorsePcPbS0_+0xa0>
    739e:	a2 c0       	rjmp	.+324    	; 0x74e4 <_Z9makeMorsePcPbS0_+0x1e4>
			{
				*finished = true;
    73a0:	81 e0       	ldi	r24, 0x01	; 1
    73a2:	88 83       	st	Y, r24
				holdKeyDown = false;
    73a4:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
			}
			return( OFF);
    73a8:	80 e0       	ldi	r24, 0x00	; 0
    73aa:	9d c0       	rjmp	.+314    	; 0x74e6 <_Z9makeMorsePcPbS0_+0x1e6>
		}

		if(elementIndex)
    73ac:	80 91 3e 49 	lds	r24, 0x493E	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
    73b0:	88 23       	and	r24, r24
    73b2:	21 f0       	breq	.+8      	; 0x73bc <_Z9makeMorsePcPbS0_+0xbc>
		{
			elementIndex--;
    73b4:	81 50       	subi	r24, 0x01	; 1
    73b6:	80 93 3e 49 	sts	0x493E, r24	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
    73ba:	7e c0       	rjmp	.+252    	; 0x74b8 <_Z9makeMorsePcPbS0_+0x1b8>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    73bc:	80 91 3b 49 	lds	r24, 0x493B	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
    73c0:	88 23       	and	r24, r24
    73c2:	81 f0       	breq	.+32     	; 0x73e4 <_Z9makeMorsePcPbS0_+0xe4>
    73c4:	80 91 46 49 	lds	r24, 0x4946	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    73c8:	81 11       	cpse	r24, r1
    73ca:	0c c0       	rjmp	.+24     	; 0x73e4 <_Z9makeMorsePcPbS0_+0xe4>
		{
			carrierOn = false;
    73cc:	10 92 3b 49 	sts	0x493B, r1	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    73d0:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <_ZZ9makeMorsePcPbS0_E10addedSpace>
    73d4:	88 23       	and	r24, r24
    73d6:	09 f4       	brne	.+2      	; 0x73da <_Z9makeMorsePcPbS0_+0xda>
    73d8:	6f c0       	rjmp	.+222    	; 0x74b8 <_Z9makeMorsePcPbS0_+0x1b8>
			{
				elementIndex = addedSpace;
    73da:	80 93 3e 49 	sts	0x493E, r24	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
				addedSpace = 0;
    73de:	10 92 3d 49 	sts	0x493D, r1	; 0x80493d <_ZZ9makeMorsePcPbS0_E10addedSpace>
    73e2:	6a c0       	rjmp	.+212    	; 0x74b8 <_Z9makeMorsePcPbS0_+0x1b8>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    73e4:	90 91 42 49 	lds	r25, 0x4942	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    73e8:	80 91 3f 49 	lds	r24, 0x493F	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    73ec:	89 17       	cp	r24, r25
    73ee:	90 f1       	brcs	.+100    	; 0x7454 <_Z9makeMorsePcPbS0_+0x154>
			{
				c = (*(str + ++charIndex));
    73f0:	80 91 40 49 	lds	r24, 0x4940	; 0x804940 <_ZZ9makeMorsePcPbS0_E9charIndex>
    73f4:	8f 5f       	subi	r24, 0xFF	; 255
    73f6:	80 93 40 49 	sts	0x4940, r24	; 0x804940 <_ZZ9makeMorsePcPbS0_E9charIndex>
    73fa:	df 01       	movw	r26, r30
    73fc:	a8 0f       	add	r26, r24
    73fe:	b1 1d       	adc	r27, r1
    7400:	8c 91       	ld	r24, X
    7402:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>

				if(!c)  /* wrap to beginning of text */
    7406:	81 11       	cpse	r24, r1
    7408:	19 c0       	rjmp	.+50     	; 0x743c <_Z9makeMorsePcPbS0_+0x13c>
				{
					if(repeat)
    740a:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    740e:	88 23       	and	r24, r24
    7410:	31 f0       	breq	.+12     	; 0x741e <_Z9makeMorsePcPbS0_+0x11e>
					{
						c = *str;
    7412:	80 81       	ld	r24, Z
    7414:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
						charIndex = 0;
    7418:	10 92 40 49 	sts	0x4940, r1	; 0x804940 <_ZZ9makeMorsePcPbS0_E9charIndex>
    741c:	0f c0       	rjmp	.+30     	; 0x743c <_Z9makeMorsePcPbS0_+0x13c>
					}
					else
					{
						str = NULL;
    741e:	10 92 44 49 	sts	0x4944, r1	; 0x804944 <_ZZ9makeMorsePcPbS0_E3str>
    7422:	10 92 45 49 	sts	0x4945, r1	; 0x804945 <_ZZ9makeMorsePcPbS0_E3str+0x1>
						carrierOn = OFF;
    7426:	10 92 3b 49 	sts	0x493B, r1	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
						completedString = true;
    742a:	91 e0       	ldi	r25, 0x01	; 1
    742c:	90 93 3c 49 	sts	0x493C, r25	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
						if(finished)
    7430:	20 97       	sbiw	r28, 0x00	; 0
    7432:	09 f0       	breq	.+2      	; 0x7436 <_Z9makeMorsePcPbS0_+0x136>
						{
							*finished = true;
    7434:	98 83       	st	Y, r25
						}
						holdKeyDown = false;
    7436:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
						return( OFF );
    743a:	55 c0       	rjmp	.+170    	; 0x74e6 <_Z9makeMorsePcPbS0_+0x1e6>
					}
				}

				morseInProgress = getMorseChar(c);
    743c:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    7440:	0e 94 8d 38 	call	0x711a	; 0x711a <_Z12getMorseCharc>
    7444:	60 93 41 49 	sts	0x4941, r22	; 0x804941 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    7448:	70 93 42 49 	sts	0x4942, r23	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    744c:	80 93 43 49 	sts	0x4943, r24	; 0x804943 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    7450:	10 92 3f 49 	sts	0x493F, r1	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    7454:	80 91 41 49 	lds	r24, 0x4941	; 0x804941 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    7458:	8d 3f       	cpi	r24, 0xFD	; 253
    745a:	f8 f4       	brcc	.+62     	; 0x749a <_Z9makeMorsePcPbS0_+0x19a>
			{
				bool isDah = morseInProgress.pattern & (1 << symbolIndex++);
    745c:	30 91 3f 49 	lds	r19, 0x493F	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    7460:	21 e0       	ldi	r18, 0x01	; 1
    7462:	23 0f       	add	r18, r19
    7464:	20 93 3f 49 	sts	0x493F, r18	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    7468:	90 e0       	ldi	r25, 0x00	; 0
    746a:	02 c0       	rjmp	.+4      	; 0x7470 <_Z9makeMorsePcPbS0_+0x170>
    746c:	95 95       	asr	r25
    746e:	87 95       	ror	r24
    7470:	3a 95       	dec	r19
    7472:	e2 f7       	brpl	.-8      	; 0x746c <_Z9makeMorsePcPbS0_+0x16c>

				if(isDah)
    7474:	80 ff       	sbrs	r24, 0
    7476:	04 c0       	rjmp	.+8      	; 0x7480 <_Z9makeMorsePcPbS0_+0x180>
				{
					elementIndex = 2;
    7478:	82 e0       	ldi	r24, 0x02	; 2
    747a:	80 93 3e 49 	sts	0x493E, r24	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
    747e:	02 c0       	rjmp	.+4      	; 0x7484 <_Z9makeMorsePcPbS0_+0x184>
				}
				else
				{
					elementIndex = 0;
    7480:	10 92 3e 49 	sts	0x493E, r1	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}

				carrierOn = true;
    7484:	81 e0       	ldi	r24, 0x01	; 1
    7486:	80 93 3b 49 	sts	0x493B, r24	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    748a:	80 91 42 49 	lds	r24, 0x4942	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    748e:	28 17       	cp	r18, r24
    7490:	98 f0       	brcs	.+38     	; 0x74b8 <_Z9makeMorsePcPbS0_+0x1b8>
				{
					addedSpace = 2;
    7492:	82 e0       	ldi	r24, 0x02	; 2
    7494:	80 93 3d 49 	sts	0x493D, r24	; 0x80493d <_ZZ9makeMorsePcPbS0_E10addedSpace>
    7498:	0f c0       	rjmp	.+30     	; 0x74b8 <_Z9makeMorsePcPbS0_+0x1b8>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    749a:	80 91 42 49 	lds	r24, 0x4942	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    749e:	9f ef       	ldi	r25, 0xFF	; 255
    74a0:	90 93 3f 49 	sts	0x493F, r25	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
				carrierOn = false;
    74a4:	10 92 3b 49 	sts	0x493B, r1	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
				if(sym >= 4 )
    74a8:	84 30       	cpi	r24, 0x04	; 4
    74aa:	20 f0       	brcs	.+8      	; 0x74b4 <_Z9makeMorsePcPbS0_+0x1b4>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    74ac:	84 50       	subi	r24, 0x04	; 4
    74ae:	80 93 3e 49 	sts	0x493E, r24	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
    74b2:	02 c0       	rjmp	.+4      	; 0x74b8 <_Z9makeMorsePcPbS0_+0x1b8>
				}
				else
				{
					elementIndex = 0;
    74b4:	10 92 3e 49 	sts	0x493E, r1	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    74b8:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    74bc:	8c 33       	cpi	r24, 0x3C	; 60
    74be:	21 f4       	brne	.+8      	; 0x74c8 <_Z9makeMorsePcPbS0_+0x1c8>
		{
			holdKeyDown = true;
    74c0:	81 e0       	ldi	r24, 0x01	; 1
    74c2:	80 93 46 49 	sts	0x4946, r24	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    74c6:	02 c0       	rjmp	.+4      	; 0x74cc <_Z9makeMorsePcPbS0_+0x1cc>
		}
		else
		{
			holdKeyDown = false;
    74c8:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
		}
	}

	if(finished)
    74cc:	20 97       	sbiw	r28, 0x00	; 0
    74ce:	19 f0       	breq	.+6      	; 0x74d6 <_Z9makeMorsePcPbS0_+0x1d6>
	{
		*finished = completedString;
    74d0:	80 91 3c 49 	lds	r24, 0x493C	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
    74d4:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    74d6:	80 91 46 49 	lds	r24, 0x4946	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    74da:	81 11       	cpse	r24, r1
    74dc:	04 c0       	rjmp	.+8      	; 0x74e6 <_Z9makeMorsePcPbS0_+0x1e6>
	{
		return(true);
	}
	else
	{
		return( carrierOn);
    74de:	80 91 3b 49 	lds	r24, 0x493B	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
    74e2:	01 c0       	rjmp	.+2      	; 0x74e6 <_Z9makeMorsePcPbS0_+0x1e6>
			if(finished)
			{
				*finished = true;
				holdKeyDown = false;
			}
			return( OFF);
    74e4:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return( carrierOn);
	}
}
    74e6:	df 91       	pop	r29
    74e8:	cf 91       	pop	r28
    74ea:	08 95       	ret

000074ec <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    74ec:	cf 92       	push	r12
    74ee:	df 92       	push	r13
    74f0:	ef 92       	push	r14
    74f2:	ff 92       	push	r15
    74f4:	1f 93       	push	r17
    74f6:	cf 93       	push	r28
    74f8:	df 93       	push	r29
    74fa:	6c 01       	movw	r12, r24
    74fc:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    74fe:	c0 e0       	ldi	r28, 0x00	; 0
    7500:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    7502:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    7504:	c4 31       	cpi	r28, 0x14	; 20
    7506:	d1 05       	cpc	r29, r1
    7508:	74 f4       	brge	.+28     	; 0x7526 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    750a:	f6 01       	movw	r30, r12
    750c:	ec 0f       	add	r30, r28
    750e:	fd 1f       	adc	r31, r29
    7510:	80 81       	ld	r24, Z
		if(!c)
    7512:	88 23       	and	r24, r24
    7514:	41 f0       	breq	.+16     	; 0x7526 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    7516:	0e 94 8d 38 	call	0x711a	; 0x711a <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    751a:	6d 3f       	cpi	r22, 0xFD	; 253
    751c:	08 f4       	brcc	.+2      	; 0x7520 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    751e:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    7520:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    7522:	21 96       	adiw	r28, 0x01	; 1
    7524:	ef cf       	rjmp	.-34     	; 0x7504 <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    7526:	80 eb       	ldi	r24, 0xB0	; 176
    7528:	94 e0       	ldi	r25, 0x04	; 4
    752a:	b7 01       	movw	r22, r14
    752c:	0e 94 2c 4c 	call	0x9858	; 0x9858 <__udivmodhi4>
}
    7530:	16 9f       	mul	r17, r22
    7532:	c0 01       	movw	r24, r0
    7534:	17 9f       	mul	r17, r23
    7536:	90 0d       	add	r25, r0
    7538:	11 24       	eor	r1, r1
    753a:	df 91       	pop	r29
    753c:	cf 91       	pop	r28
    753e:	1f 91       	pop	r17
    7540:	ff 90       	pop	r15
    7542:	ef 90       	pop	r14
    7544:	df 90       	pop	r13
    7546:	cf 90       	pop	r12
    7548:	08 95       	ret

0000754a <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    754a:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    754c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    754e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    7550:	40 83       	st	Z, r20
	ret                             // Return to caller
    7552:	08 95       	ret

00007554 <_ZL21USART4_initializationm>:
	}
	
	serialbus_end_tx();
	memset((SerialbusRxBuffer*)rx_buffer, 0, sizeof(*(SerialbusRxBuffer*)rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    7554:	20 b3       	in	r18, 0x10	; 16
    7556:	2d 7f       	andi	r18, 0xFD	; 253
    7558:	20 bb       	out	0x10, r18	; 16
    755a:	e1 e9       	ldi	r30, 0x91	; 145
    755c:	f4 e0       	ldi	r31, 0x04	; 4
    755e:	20 81       	ld	r18, Z
    7560:	27 7f       	andi	r18, 0xF7	; 247
    7562:	20 83       	st	Z, r18
    7564:	20 b3       	in	r18, 0x10	; 16
    7566:	21 60       	ori	r18, 0x01	; 1
    7568:	20 bb       	out	0x10, r18	; 16
    756a:	21 b3       	in	r18, 0x11	; 17
    756c:	21 60       	ori	r18, 0x01	; 1
    756e:	21 bb       	out	0x11, r18	; 17
    7570:	0e 94 f8 46 	call	0x8df0	; 0x8df0 <USART4_init>
    7574:	08 95       	ret

00007576 <_ZL21USART1_initializationm>:
    7576:	28 b1       	in	r18, 0x08	; 8
    7578:	2d 7f       	andi	r18, 0xFD	; 253
    757a:	28 b9       	out	0x08, r18	; 8
    757c:	e1 e5       	ldi	r30, 0x51	; 81
    757e:	f4 e0       	ldi	r31, 0x04	; 4
    7580:	20 81       	ld	r18, Z
    7582:	27 7f       	andi	r18, 0xF7	; 247
    7584:	20 83       	st	Z, r18
    7586:	28 b1       	in	r18, 0x08	; 8
    7588:	21 60       	ori	r18, 0x01	; 1
    758a:	28 b9       	out	0x08, r18	; 8
    758c:	29 b1       	in	r18, 0x09	; 9
    758e:	21 60       	ori	r18, 0x01	; 1
    7590:	29 b9       	out	0x09, r18	; 9
    7592:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <USART1_init>
    7596:	08 95       	ret

00007598 <nextFullSBTxBuffer>:
    7598:	90 e0       	ldi	r25, 0x00	; 0
    759a:	80 91 4a 49 	lds	r24, 0x494A	; 0x80494a <_ZZ18nextFullSBTxBufferE11bufferIndex>
    759e:	28 2f       	mov	r18, r24
    75a0:	30 e0       	ldi	r19, 0x00	; 0
    75a2:	49 e2       	ldi	r20, 0x29	; 41
    75a4:	42 9f       	mul	r20, r18
    75a6:	f0 01       	movw	r30, r0
    75a8:	43 9f       	mul	r20, r19
    75aa:	f0 0d       	add	r31, r0
    75ac:	11 24       	eor	r1, r1
    75ae:	e7 53       	subi	r30, 0x37	; 55
    75b0:	f6 4b       	sbci	r31, 0xB6	; 182
    75b2:	40 81       	ld	r20, Z
    75b4:	41 11       	cpse	r20, r1
    75b6:	0b c0       	rjmp	.+22     	; 0x75ce <nextFullSBTxBuffer+0x36>
    75b8:	9f 5f       	subi	r25, 0xFF	; 255
    75ba:	93 30       	cpi	r25, 0x03	; 3
    75bc:	50 f4       	brcc	.+20     	; 0x75d2 <nextFullSBTxBuffer+0x3a>
    75be:	8f 5f       	subi	r24, 0xFF	; 255
    75c0:	80 93 4a 49 	sts	0x494A, r24	; 0x80494a <_ZZ18nextFullSBTxBufferE11bufferIndex>
    75c4:	83 30       	cpi	r24, 0x03	; 3
    75c6:	48 f3       	brcs	.-46     	; 0x759a <nextFullSBTxBuffer+0x2>
    75c8:	10 92 4a 49 	sts	0x494A, r1	; 0x80494a <_ZZ18nextFullSBTxBufferE11bufferIndex>
    75cc:	e6 cf       	rjmp	.-52     	; 0x759a <nextFullSBTxBuffer+0x2>
    75ce:	81 e0       	ldi	r24, 0x01	; 1
    75d0:	01 c0       	rjmp	.+2      	; 0x75d4 <nextFullSBTxBuffer+0x3c>
    75d2:	80 e0       	ldi	r24, 0x00	; 0
    75d4:	88 23       	and	r24, r24
    75d6:	49 f0       	breq	.+18     	; 0x75ea <nextFullSBTxBuffer+0x52>
    75d8:	49 e2       	ldi	r20, 0x29	; 41
    75da:	42 9f       	mul	r20, r18
    75dc:	c0 01       	movw	r24, r0
    75de:	43 9f       	mul	r20, r19
    75e0:	90 0d       	add	r25, r0
    75e2:	11 24       	eor	r1, r1
    75e4:	87 53       	subi	r24, 0x37	; 55
    75e6:	96 4b       	sbci	r25, 0xB6	; 182
    75e8:	08 95       	ret
    75ea:	80 e0       	ldi	r24, 0x00	; 0
    75ec:	90 e0       	ldi	r25, 0x00	; 0
    75ee:	08 95       	ret

000075f0 <nextEmptySBTxBuffer>:
    75f0:	90 e0       	ldi	r25, 0x00	; 0
    75f2:	80 91 49 49 	lds	r24, 0x4949	; 0x804949 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    75f6:	28 2f       	mov	r18, r24
    75f8:	30 e0       	ldi	r19, 0x00	; 0
    75fa:	49 e2       	ldi	r20, 0x29	; 41
    75fc:	42 9f       	mul	r20, r18
    75fe:	f0 01       	movw	r30, r0
    7600:	43 9f       	mul	r20, r19
    7602:	f0 0d       	add	r31, r0
    7604:	11 24       	eor	r1, r1
    7606:	e7 53       	subi	r30, 0x37	; 55
    7608:	f6 4b       	sbci	r31, 0xB6	; 182
    760a:	40 81       	ld	r20, Z
    760c:	44 23       	and	r20, r20
    760e:	59 f0       	breq	.+22     	; 0x7626 <nextEmptySBTxBuffer+0x36>
    7610:	9f 5f       	subi	r25, 0xFF	; 255
    7612:	93 30       	cpi	r25, 0x03	; 3
    7614:	50 f4       	brcc	.+20     	; 0x762a <nextEmptySBTxBuffer+0x3a>
    7616:	8f 5f       	subi	r24, 0xFF	; 255
    7618:	80 93 49 49 	sts	0x4949, r24	; 0x804949 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    761c:	83 30       	cpi	r24, 0x03	; 3
    761e:	48 f3       	brcs	.-46     	; 0x75f2 <nextEmptySBTxBuffer+0x2>
    7620:	10 92 49 49 	sts	0x4949, r1	; 0x804949 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    7624:	e6 cf       	rjmp	.-52     	; 0x75f2 <nextEmptySBTxBuffer+0x2>
    7626:	81 e0       	ldi	r24, 0x01	; 1
    7628:	01 c0       	rjmp	.+2      	; 0x762c <nextEmptySBTxBuffer+0x3c>
    762a:	80 e0       	ldi	r24, 0x00	; 0
    762c:	88 23       	and	r24, r24
    762e:	49 f0       	breq	.+18     	; 0x7642 <nextEmptySBTxBuffer+0x52>
    7630:	49 e2       	ldi	r20, 0x29	; 41
    7632:	42 9f       	mul	r20, r18
    7634:	c0 01       	movw	r24, r0
    7636:	43 9f       	mul	r20, r19
    7638:	90 0d       	add	r25, r0
    763a:	11 24       	eor	r1, r1
    763c:	87 53       	subi	r24, 0x37	; 55
    763e:	96 4b       	sbci	r25, 0xB6	; 182
    7640:	08 95       	ret
    7642:	80 e0       	ldi	r24, 0x00	; 0
    7644:	90 e0       	ldi	r25, 0x00	; 0
    7646:	08 95       	ret

00007648 <nextEmptySBRxBuffer>:
    7648:	90 e0       	ldi	r25, 0x00	; 0
    764a:	80 91 48 49 	lds	r24, 0x4948	; 0x804948 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    764e:	28 2f       	mov	r18, r24
    7650:	30 e0       	ldi	r19, 0x00	; 0
    7652:	4f e3       	ldi	r20, 0x3F	; 63
    7654:	42 9f       	mul	r20, r18
    7656:	f0 01       	movw	r30, r0
    7658:	43 9f       	mul	r20, r19
    765a:	f0 0d       	add	r31, r0
    765c:	11 24       	eor	r1, r1
    765e:	e5 5b       	subi	r30, 0xB5	; 181
    7660:	f6 4b       	sbci	r31, 0xB6	; 182
    7662:	41 81       	ldd	r20, Z+1	; 0x01
    7664:	52 81       	ldd	r21, Z+2	; 0x02
    7666:	45 2b       	or	r20, r21
    7668:	59 f0       	breq	.+22     	; 0x7680 <nextEmptySBRxBuffer+0x38>
    766a:	9f 5f       	subi	r25, 0xFF	; 255
    766c:	92 30       	cpi	r25, 0x02	; 2
    766e:	50 f4       	brcc	.+20     	; 0x7684 <nextEmptySBRxBuffer+0x3c>
    7670:	8f 5f       	subi	r24, 0xFF	; 255
    7672:	80 93 48 49 	sts	0x4948, r24	; 0x804948 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    7676:	82 30       	cpi	r24, 0x02	; 2
    7678:	40 f3       	brcs	.-48     	; 0x764a <nextEmptySBRxBuffer+0x2>
    767a:	10 92 48 49 	sts	0x4948, r1	; 0x804948 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    767e:	e5 cf       	rjmp	.-54     	; 0x764a <nextEmptySBRxBuffer+0x2>
    7680:	81 e0       	ldi	r24, 0x01	; 1
    7682:	01 c0       	rjmp	.+2      	; 0x7686 <nextEmptySBRxBuffer+0x3e>
    7684:	80 e0       	ldi	r24, 0x00	; 0
    7686:	88 23       	and	r24, r24
    7688:	49 f0       	breq	.+18     	; 0x769c <nextEmptySBRxBuffer+0x54>
    768a:	4f e3       	ldi	r20, 0x3F	; 63
    768c:	42 9f       	mul	r20, r18
    768e:	c0 01       	movw	r24, r0
    7690:	43 9f       	mul	r20, r19
    7692:	90 0d       	add	r25, r0
    7694:	11 24       	eor	r1, r1
    7696:	85 5b       	subi	r24, 0xB5	; 181
    7698:	96 4b       	sbci	r25, 0xB6	; 182
    769a:	08 95       	ret
    769c:	80 e0       	ldi	r24, 0x00	; 0
    769e:	90 e0       	ldi	r25, 0x00	; 0
    76a0:	08 95       	ret

000076a2 <nextFullSBRxBuffer>:
    76a2:	90 e0       	ldi	r25, 0x00	; 0
    76a4:	80 91 47 49 	lds	r24, 0x4947	; 0x804947 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    76a8:	28 2f       	mov	r18, r24
    76aa:	30 e0       	ldi	r19, 0x00	; 0
    76ac:	4f e3       	ldi	r20, 0x3F	; 63
    76ae:	42 9f       	mul	r20, r18
    76b0:	f0 01       	movw	r30, r0
    76b2:	43 9f       	mul	r20, r19
    76b4:	f0 0d       	add	r31, r0
    76b6:	11 24       	eor	r1, r1
    76b8:	e5 5b       	subi	r30, 0xB5	; 181
    76ba:	f6 4b       	sbci	r31, 0xB6	; 182
    76bc:	41 81       	ldd	r20, Z+1	; 0x01
    76be:	52 81       	ldd	r21, Z+2	; 0x02
    76c0:	45 2b       	or	r20, r21
    76c2:	59 f4       	brne	.+22     	; 0x76da <nextFullSBRxBuffer+0x38>
    76c4:	9f 5f       	subi	r25, 0xFF	; 255
    76c6:	92 30       	cpi	r25, 0x02	; 2
    76c8:	50 f4       	brcc	.+20     	; 0x76de <nextFullSBRxBuffer+0x3c>
    76ca:	8f 5f       	subi	r24, 0xFF	; 255
    76cc:	80 93 47 49 	sts	0x4947, r24	; 0x804947 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    76d0:	82 30       	cpi	r24, 0x02	; 2
    76d2:	40 f3       	brcs	.-48     	; 0x76a4 <nextFullSBRxBuffer+0x2>
    76d4:	10 92 47 49 	sts	0x4947, r1	; 0x804947 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    76d8:	e5 cf       	rjmp	.-54     	; 0x76a4 <nextFullSBRxBuffer+0x2>
    76da:	81 e0       	ldi	r24, 0x01	; 1
    76dc:	01 c0       	rjmp	.+2      	; 0x76e0 <nextFullSBRxBuffer+0x3e>
    76de:	80 e0       	ldi	r24, 0x00	; 0
    76e0:	88 23       	and	r24, r24
    76e2:	49 f0       	breq	.+18     	; 0x76f6 <nextFullSBRxBuffer+0x54>
    76e4:	4f e3       	ldi	r20, 0x3F	; 63
    76e6:	42 9f       	mul	r20, r18
    76e8:	c0 01       	movw	r24, r0
    76ea:	43 9f       	mul	r20, r19
    76ec:	90 0d       	add	r25, r0
    76ee:	11 24       	eor	r1, r1
    76f0:	85 5b       	subi	r24, 0xB5	; 181
    76f2:	96 4b       	sbci	r25, 0xB6	; 182
    76f4:	08 95       	ret
    76f6:	80 e0       	ldi	r24, 0x00	; 0
    76f8:	90 e0       	ldi	r25, 0x00	; 0
    76fa:	08 95       	ret

000076fc <serialbusTxInProgress>:
    76fc:	80 91 44 4a 	lds	r24, 0x4A44	; 0x804a44 <_ZL19serialbus_tx_active>
    7700:	08 95       	ret

00007702 <_Z18serialbus_start_txv>:
    7702:	cf 93       	push	r28
    7704:	c0 91 44 4a 	lds	r28, 0x4A44	; 0x804a44 <_ZL19serialbus_tx_active>
    7708:	81 e0       	ldi	r24, 0x01	; 1
    770a:	c8 27       	eor	r28, r24
    770c:	59 f0       	breq	.+22     	; 0x7724 <_Z18serialbus_start_txv+0x22>
    770e:	80 93 44 4a 	sts	0x4A44, r24	; 0x804a44 <_ZL19serialbus_tx_active>
    7712:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    7716:	81 11       	cpse	r24, r1
    7718:	03 c0       	rjmp	.+6      	; 0x7720 <_Z18serialbus_start_txv+0x1e>
    771a:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <USART4_enable_tx>
    771e:	02 c0       	rjmp	.+4      	; 0x7724 <_Z18serialbus_start_txv+0x22>
    7720:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <USART1_enable_tx>
    7724:	8c 2f       	mov	r24, r28
    7726:	cf 91       	pop	r28
    7728:	08 95       	ret

0000772a <serialbus_end_tx>:
    772a:	80 91 44 4a 	lds	r24, 0x4A44	; 0x804a44 <_ZL19serialbus_tx_active>
    772e:	88 23       	and	r24, r24
    7730:	89 f0       	breq	.+34     	; 0x7754 <serialbus_end_tx+0x2a>
    7732:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    7736:	84 30       	cpi	r24, 0x04	; 4
    7738:	31 f4       	brne	.+12     	; 0x7746 <serialbus_end_tx+0x1c>
    773a:	e0 e8       	ldi	r30, 0x80	; 128
    773c:	f8 e0       	ldi	r31, 0x08	; 8
    773e:	85 81       	ldd	r24, Z+5	; 0x05
    7740:	8f 7d       	andi	r24, 0xDF	; 223
    7742:	85 83       	std	Z+5, r24	; 0x05
    7744:	05 c0       	rjmp	.+10     	; 0x7750 <serialbus_end_tx+0x26>
    7746:	e0 e2       	ldi	r30, 0x20	; 32
    7748:	f8 e0       	ldi	r31, 0x08	; 8
    774a:	85 81       	ldd	r24, Z+5	; 0x05
    774c:	8f 7d       	andi	r24, 0xDF	; 223
    774e:	85 83       	std	Z+5, r24	; 0x05
    7750:	10 92 44 4a 	sts	0x4A44, r1	; 0x804a44 <_ZL19serialbus_tx_active>
    7754:	08 95       	ret

00007756 <serialbus_init>:
    7756:	cf 93       	push	r28
    7758:	2f e3       	ldi	r18, 0x3F	; 63
    775a:	eb e4       	ldi	r30, 0x4B	; 75
    775c:	f9 e4       	ldi	r31, 0x49	; 73
    775e:	df 01       	movw	r26, r30
    7760:	1d 92       	st	X+, r1
    7762:	2a 95       	dec	r18
    7764:	e9 f7       	brne	.-6      	; 0x7760 <serialbus_init+0xa>
    7766:	a0 e0       	ldi	r26, 0x00	; 0
    7768:	b0 e0       	ldi	r27, 0x00	; 0
    776a:	a3 30       	cpi	r26, 0x03	; 3
    776c:	b1 05       	cpc	r27, r1
    776e:	5c f4       	brge	.+22     	; 0x7786 <serialbus_init+0x30>
    7770:	29 e2       	ldi	r18, 0x29	; 41
    7772:	2a 9f       	mul	r18, r26
    7774:	f0 01       	movw	r30, r0
    7776:	2b 9f       	mul	r18, r27
    7778:	f0 0d       	add	r31, r0
    777a:	11 24       	eor	r1, r1
    777c:	e7 53       	subi	r30, 0x37	; 55
    777e:	f6 4b       	sbci	r31, 0xB6	; 182
    7780:	10 82       	st	Z, r1
    7782:	11 96       	adiw	r26, 0x01	; 1
    7784:	f2 cf       	rjmp	.-28     	; 0x776a <serialbus_init+0x14>
    7786:	46 30       	cpi	r20, 0x06	; 6
    7788:	21 f4       	brne	.+8      	; 0x7792 <serialbus_init+0x3c>
    778a:	20 91 27 40 	lds	r18, 0x4027	; 0x804027 <g_serialbus_usart_number>
    778e:	27 30       	cpi	r18, 0x07	; 7
    7790:	51 f4       	brne	.+20     	; 0x77a6 <serialbus_init+0x50>
    7792:	c4 2f       	mov	r28, r20
    7794:	44 30       	cpi	r20, 0x04	; 4
    7796:	19 f4       	brne	.+6      	; 0x779e <serialbus_init+0x48>
    7798:	0e 94 aa 3a 	call	0x7554	; 0x7554 <_ZL21USART4_initializationm>
    779c:	02 c0       	rjmp	.+4      	; 0x77a2 <serialbus_init+0x4c>
    779e:	0e 94 bb 3a 	call	0x7576	; 0x7576 <_ZL21USART1_initializationm>
    77a2:	c0 93 27 40 	sts	0x4027, r28	; 0x804027 <g_serialbus_usart_number>
    77a6:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <_ZL14g_bus_disabled>
    77aa:	cf 91       	pop	r28
    77ac:	08 95       	ret

000077ae <_Z19serialbus_send_textPc>:
	}
}


bool serialbus_send_text(char* text)
{
    77ae:	ef 92       	push	r14
    77b0:	ff 92       	push	r15
    77b2:	1f 93       	push	r17
    77b4:	cf 93       	push	r28
    77b6:	df 93       	push	r29
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
    77b8:	10 91 26 40 	lds	r17, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    77bc:	11 11       	cpse	r17, r1
    77be:	2d c0       	rjmp	.+90     	; 0x781a <_Z19serialbus_send_textPc+0x6c>
	{
		return( err);
	}

	if(text)
    77c0:	00 97       	sbiw	r24, 0x00	; 0
    77c2:	69 f1       	breq	.+90     	; 0x781e <_Z19serialbus_send_textPc+0x70>
    77c4:	7c 01       	movw	r14, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    77c6:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <nextEmptySBTxBuffer>


bool serialbus_send_text(char* text)
{
	bool err = true;
	uint16_t tries = 200;
    77ca:	c8 ec       	ldi	r28, 0xC8	; 200
    77cc:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    77ce:	00 97       	sbiw	r24, 0x00	; 0
    77d0:	a1 f4       	brne	.+40     	; 0x77fa <_Z19serialbus_send_textPc+0x4c>
    77d2:	20 97       	sbiw	r28, 0x00	; 0
    77d4:	91 f0       	breq	.+36     	; 0x77fa <_Z19serialbus_send_textPc+0x4c>
		{
			while(serialbusTxInProgress() && tries)
    77d6:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <serialbusTxInProgress>
    77da:	88 23       	and	r24, r24
    77dc:	21 f0       	breq	.+8      	; 0x77e6 <_Z19serialbus_send_textPc+0x38>
    77de:	20 97       	sbiw	r28, 0x00	; 0
    77e0:	19 f4       	brne	.+6      	; 0x77e8 <_Z19serialbus_send_textPc+0x3a>
    77e2:	81 2f       	mov	r24, r17
    77e4:	01 c0       	rjmp	.+2      	; 0x77e8 <_Z19serialbus_send_textPc+0x3a>
    77e6:	81 2f       	mov	r24, r17
    77e8:	88 23       	and	r24, r24
    77ea:	21 f0       	breq	.+8      	; 0x77f4 <_Z19serialbus_send_textPc+0x46>
			{
				if(tries)
    77ec:	20 97       	sbiw	r28, 0x00	; 0
    77ee:	99 f3       	breq	.-26     	; 0x77d6 <_Z19serialbus_send_textPc+0x28>
				{
					tries--;    /* wait until transmit finishes */
    77f0:	21 97       	sbiw	r28, 0x01	; 1
    77f2:	f1 cf       	rjmp	.-30     	; 0x77d6 <_Z19serialbus_send_textPc+0x28>
				}
			}
			buff = nextEmptySBTxBuffer();
    77f4:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    77f8:	ea cf       	rjmp	.-44     	; 0x77ce <_Z19serialbus_send_textPc+0x20>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    77fa:	00 97       	sbiw	r24, 0x00	; 0
    77fc:	91 f0       	breq	.+36     	; 0x7822 <_Z19serialbus_send_textPc+0x74>
		{
			sprintf(*buff, text);
    77fe:	ff 92       	push	r15
    7800:	ef 92       	push	r14
    7802:	9f 93       	push	r25
    7804:	8f 93       	push	r24
    7806:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>

			serialbus_start_tx();
    780a:	0e 94 81 3b 	call	0x7702	; 0x7702 <_Z18serialbus_start_txv>
    780e:	0f 90       	pop	r0
    7810:	0f 90       	pop	r0
    7812:	0f 90       	pop	r0
    7814:	0f 90       	pop	r0
			err = false;
    7816:	80 e0       	ldi	r24, 0x00	; 0
    7818:	05 c0       	rjmp	.+10     	; 0x7824 <_Z19serialbus_send_textPc+0x76>
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    781a:	81 e0       	ldi	r24, 0x01	; 1
    781c:	03 c0       	rjmp	.+6      	; 0x7824 <_Z19serialbus_send_textPc+0x76>
}


bool serialbus_send_text(char* text)
{
	bool err = true;
    781e:	81 e0       	ldi	r24, 0x01	; 1
    7820:	01 c0       	rjmp	.+2      	; 0x7824 <_Z19serialbus_send_textPc+0x76>
    7822:	81 e0       	ldi	r24, 0x01	; 1
			err = false;
		}
	}

	return(err);
}
    7824:	df 91       	pop	r29
    7826:	cf 91       	pop	r28
    7828:	1f 91       	pop	r17
    782a:	ff 90       	pop	r15
    782c:	ef 90       	pop	r14
    782e:	08 95       	ret

00007830 <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    7830:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7834:	81 11       	cpse	r24, r1
    7836:	06 c0       	rjmp	.+12     	; 0x7844 <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    7838:	80 ed       	ldi	r24, 0xD0	; 208
    783a:	94 e4       	ldi	r25, 0x44	; 68
    783c:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_Z19serialbus_send_textPc>
    7840:	81 11       	cpse	r24, r1
    7842:	fa cf       	rjmp	.-12     	; 0x7838 <sb_send_NewPrompt+0x8>
    7844:	08 95       	ret

00007846 <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    7846:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    784a:	81 11       	cpse	r24, r1
    784c:	04 c0       	rjmp	.+8      	; 0x7856 <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    784e:	83 ed       	ldi	r24, 0xD3	; 211
    7850:	94 e4       	ldi	r25, 0x44	; 68
    7852:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_Z19serialbus_send_textPc>
    7856:	08 95       	ret

00007858 <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    7858:	90 91 26 40 	lds	r25, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    785c:	91 11       	cpse	r25, r1
    785e:	07 c0       	rjmp	.+14     	; 0x786e <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    7860:	e5 e4       	ldi	r30, 0x45	; 69
    7862:	fa e4       	ldi	r31, 0x4A	; 74
    7864:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    7866:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    7868:	cf 01       	movw	r24, r30
    786a:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_Z19serialbus_send_textPc>
    786e:	08 95       	ret

00007870 <sb_send_string>:
}

bool sb_send_string(char* str)
{
    7870:	8f 92       	push	r8
    7872:	9f 92       	push	r9
    7874:	af 92       	push	r10
    7876:	bf 92       	push	r11
    7878:	df 92       	push	r13
    787a:	ef 92       	push	r14
    787c:	ff 92       	push	r15
    787e:	0f 93       	push	r16
    7880:	1f 93       	push	r17
    7882:	cf 93       	push	r28
    7884:	df 93       	push	r29
    7886:	cd b7       	in	r28, 0x3d	; 61
    7888:	de b7       	in	r29, 0x3e	; 62
    788a:	aa 97       	sbiw	r28, 0x2a	; 42
    788c:	cd bf       	out	0x3d, r28	; 61
    788e:	de bf       	out	0x3e, r29	; 62
    7890:	fc 01       	movw	r30, r24
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    7892:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7896:	81 11       	cpse	r24, r1
    7898:	45 c0       	rjmp	.+138    	; 0x7924 <sb_send_string+0xb4>
	{
		return( true);
	}

	if(str == NULL)
    789a:	30 97       	sbiw	r30, 0x00	; 0
    789c:	09 f4       	brne	.+2      	; 0x78a0 <sb_send_string+0x30>
    789e:	3f c0       	rjmp	.+126    	; 0x791e <sb_send_string+0xae>
	{
		return( true);
	}

	if(!*str)
    78a0:	80 81       	ld	r24, Z
    78a2:	88 23       	and	r24, r24
    78a4:	f1 f1       	breq	.+124    	; 0x7922 <sb_send_string+0xb2>
    78a6:	4f 01       	movw	r8, r30
	{
		return(true);
	}

	length = strlen(str);
    78a8:	01 90       	ld	r0, Z+
    78aa:	00 20       	and	r0, r0
    78ac:	e9 f7       	brne	.-6      	; 0x78a8 <sb_send_string+0x38>
    78ae:	31 97       	sbiw	r30, 0x01	; 1
    78b0:	5f 01       	movw	r10, r30
    78b2:	a8 18       	sub	r10, r8
    78b4:	b9 08       	sbc	r11, r9

bool sb_send_string(char* str)
{
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
    78b6:	e1 2c       	mov	r14, r1
    78b8:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH);
    78ba:	85 01       	movw	r16, r10
    78bc:	0e 19       	sub	r16, r14
    78be:	1f 09       	sbc	r17, r15
    78c0:	09 32       	cpi	r16, 0x29	; 41
    78c2:	11 05       	cpc	r17, r1
    78c4:	10 f0       	brcs	.+4      	; 0x78ca <sb_send_string+0x5a>
    78c6:	09 e2       	ldi	r16, 0x29	; 41
    78c8:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(buf, &str[lengthSent], lengthToSend);
    78ca:	a8 01       	movw	r20, r16
    78cc:	b4 01       	movw	r22, r8
    78ce:	6e 0d       	add	r22, r14
    78d0:	7f 1d       	adc	r23, r15
    78d2:	ce 01       	movw	r24, r28
    78d4:	01 96       	adiw	r24, 0x01	; 1
    78d6:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <strncpy>

		buf[lengthToSend] = '\0';
    78da:	e1 e0       	ldi	r30, 0x01	; 1
    78dc:	f0 e0       	ldi	r31, 0x00	; 0
    78de:	ec 0f       	add	r30, r28
    78e0:	fd 1f       	adc	r31, r29
    78e2:	e0 0f       	add	r30, r16
    78e4:	f1 1f       	adc	r31, r17
    78e6:	10 82       	st	Z, r1
		err = serialbus_send_text(buf);
    78e8:	ce 01       	movw	r24, r28
    78ea:	01 96       	adiw	r24, 0x01	; 1
    78ec:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_Z19serialbus_send_textPc>
    78f0:	d8 2e       	mov	r13, r24
		
		if(!err)
    78f2:	81 11       	cpse	r24, r1
    78f4:	04 c0       	rjmp	.+8      	; 0x78fe <sb_send_string+0x8e>
		{
			while(serialbusTxInProgress())
    78f6:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <serialbusTxInProgress>
    78fa:	81 11       	cpse	r24, r1
    78fc:	fc cf       	rjmp	.-8      	; 0x78f6 <sb_send_string+0x86>
			{
				;
			}
		}

		lengthSent += lengthToSend;
    78fe:	e0 0e       	add	r14, r16
    7900:	f1 1e       	adc	r15, r17
		done = err || (lengthSent >= length);
    7902:	d1 10       	cpse	r13, r1
    7904:	05 c0       	rjmp	.+10     	; 0x7910 <sb_send_string+0xa0>
    7906:	ea 14       	cp	r14, r10
    7908:	fb 04       	cpc	r15, r11
    790a:	20 f0       	brcs	.+8      	; 0x7914 <sb_send_string+0xa4>
    790c:	81 e0       	ldi	r24, 0x01	; 1
    790e:	03 c0       	rjmp	.+6      	; 0x7916 <sb_send_string+0xa6>
    7910:	81 e0       	ldi	r24, 0x01	; 1
    7912:	01 c0       	rjmp	.+2      	; 0x7916 <sb_send_string+0xa6>
    7914:	80 e0       	ldi	r24, 0x00	; 0
	}while(!done);
    7916:	88 23       	and	r24, r24
    7918:	81 f2       	breq	.-96     	; 0x78ba <sb_send_string+0x4a>

	return( err);
    791a:	8d 2d       	mov	r24, r13
    791c:	03 c0       	rjmp	.+6      	; 0x7924 <sb_send_string+0xb4>
		return( true);
	}

	if(str == NULL)
	{
		return( true);
    791e:	81 e0       	ldi	r24, 0x01	; 1
    7920:	01 c0       	rjmp	.+2      	; 0x7924 <sb_send_string+0xb4>
	}

	if(!*str)
	{
		return(true);
    7922:	81 e0       	ldi	r24, 0x01	; 1
		lengthSent += lengthToSend;
		done = err || (lengthSent >= length);
	}while(!done);

	return( err);
}
    7924:	aa 96       	adiw	r28, 0x2a	; 42
    7926:	cd bf       	out	0x3d, r28	; 61
    7928:	de bf       	out	0x3e, r29	; 62
    792a:	df 91       	pop	r29
    792c:	cf 91       	pop	r28
    792e:	1f 91       	pop	r17
    7930:	0f 91       	pop	r16
    7932:	ff 90       	pop	r15
    7934:	ef 90       	pop	r14
    7936:	df 90       	pop	r13
    7938:	bf 90       	pop	r11
    793a:	af 90       	pop	r10
    793c:	9f 90       	pop	r9
    793e:	8f 90       	pop	r8
    7940:	08 95       	ret

00007942 <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    7942:	4f 92       	push	r4
    7944:	5f 92       	push	r5
    7946:	6f 92       	push	r6
    7948:	7f 92       	push	r7
    794a:	8f 92       	push	r8
    794c:	9f 92       	push	r9
    794e:	af 92       	push	r10
    7950:	bf 92       	push	r11
    7952:	cf 92       	push	r12
    7954:	df 92       	push	r13
    7956:	ef 92       	push	r14
    7958:	ff 92       	push	r15
    795a:	0f 93       	push	r16
    795c:	1f 93       	push	r17
    795e:	cf 93       	push	r28
    7960:	df 93       	push	r29
    7962:	8c 01       	movw	r16, r24
    7964:	eb 01       	movw	r28, r22
    7966:	fc 01       	movw	r30, r24
    7968:	40 80       	ld	r4, Z
    796a:	51 80       	ldd	r5, Z+1	; 0x01
    796c:	62 80       	ldd	r6, Z+2	; 0x02
    796e:	73 80       	ldd	r7, Z+3	; 0x03
    7970:	88 80       	ld	r8, Y
    7972:	99 80       	ldd	r9, Y+1	; 0x01
    7974:	aa 80       	ldd	r10, Y+2	; 0x02
    7976:	bb 80       	ldd	r11, Y+3	; 0x03
    7978:	41 14       	cp	r4, r1
    797a:	51 04       	cpc	r5, r1
    797c:	61 04       	cpc	r6, r1
    797e:	71 04       	cpc	r7, r1
    7980:	e1 f1       	breq	.+120    	; 0x79fa <_Z13reduce_by_gcdPmS_+0xb8>
    7982:	81 14       	cp	r8, r1
    7984:	91 04       	cpc	r9, r1
    7986:	a1 04       	cpc	r10, r1
    7988:	b1 04       	cpc	r11, r1
    798a:	b9 f1       	breq	.+110    	; 0x79fa <_Z13reduce_by_gcdPmS_+0xb8>
    798c:	c3 01       	movw	r24, r6
    798e:	b2 01       	movw	r22, r4
    7990:	a5 01       	movw	r20, r10
    7992:	94 01       	movw	r18, r8
    7994:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    7998:	6b 01       	movw	r12, r22
    799a:	7c 01       	movw	r14, r24
    799c:	c1 14       	cp	r12, r1
    799e:	d1 04       	cpc	r13, r1
    79a0:	e1 04       	cpc	r14, r1
    79a2:	f1 04       	cpc	r15, r1
    79a4:	69 f0       	breq	.+26     	; 0x79c0 <_Z13reduce_by_gcdPmS_+0x7e>
    79a6:	c5 01       	movw	r24, r10
    79a8:	b4 01       	movw	r22, r8
    79aa:	a7 01       	movw	r20, r14
    79ac:	96 01       	movw	r18, r12
    79ae:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    79b2:	46 01       	movw	r8, r12
    79b4:	57 01       	movw	r10, r14
    79b6:	c6 2e       	mov	r12, r22
    79b8:	d7 2e       	mov	r13, r23
    79ba:	e8 2e       	mov	r14, r24
    79bc:	f9 2e       	mov	r15, r25
    79be:	ee cf       	rjmp	.-36     	; 0x799c <_Z13reduce_by_gcdPmS_+0x5a>
    79c0:	f2 e0       	ldi	r31, 0x02	; 2
    79c2:	8f 16       	cp	r8, r31
    79c4:	91 04       	cpc	r9, r1
    79c6:	a1 04       	cpc	r10, r1
    79c8:	b1 04       	cpc	r11, r1
    79ca:	b8 f0       	brcs	.+46     	; 0x79fa <_Z13reduce_by_gcdPmS_+0xb8>
    79cc:	c3 01       	movw	r24, r6
    79ce:	b2 01       	movw	r22, r4
    79d0:	a5 01       	movw	r20, r10
    79d2:	94 01       	movw	r18, r8
    79d4:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    79d8:	f8 01       	movw	r30, r16
    79da:	20 83       	st	Z, r18
    79dc:	31 83       	std	Z+1, r19	; 0x01
    79de:	42 83       	std	Z+2, r20	; 0x02
    79e0:	53 83       	std	Z+3, r21	; 0x03
    79e2:	68 81       	ld	r22, Y
    79e4:	79 81       	ldd	r23, Y+1	; 0x01
    79e6:	8a 81       	ldd	r24, Y+2	; 0x02
    79e8:	9b 81       	ldd	r25, Y+3	; 0x03
    79ea:	a5 01       	movw	r20, r10
    79ec:	94 01       	movw	r18, r8
    79ee:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    79f2:	28 83       	st	Y, r18
    79f4:	39 83       	std	Y+1, r19	; 0x01
    79f6:	4a 83       	std	Y+2, r20	; 0x02
    79f8:	5b 83       	std	Y+3, r21	; 0x03
    79fa:	df 91       	pop	r29
    79fc:	cf 91       	pop	r28
    79fe:	1f 91       	pop	r17
    7a00:	0f 91       	pop	r16
    7a02:	ff 90       	pop	r15
    7a04:	ef 90       	pop	r14
    7a06:	df 90       	pop	r13
    7a08:	cf 90       	pop	r12
    7a0a:	bf 90       	pop	r11
    7a0c:	af 90       	pop	r10
    7a0e:	9f 90       	pop	r9
    7a10:	8f 90       	pop	r8
    7a12:	7f 90       	pop	r7
    7a14:	6f 90       	pop	r6
    7a16:	5f 90       	pop	r5
    7a18:	4f 90       	pop	r4
    7a1a:	08 95       	ret

00007a1c <_Z8pll_calcmP13u_si5351_regs>:
    7a1c:	4f 92       	push	r4
    7a1e:	5f 92       	push	r5
    7a20:	6f 92       	push	r6
    7a22:	7f 92       	push	r7
    7a24:	8f 92       	push	r8
    7a26:	9f 92       	push	r9
    7a28:	af 92       	push	r10
    7a2a:	bf 92       	push	r11
    7a2c:	cf 92       	push	r12
    7a2e:	df 92       	push	r13
    7a30:	ef 92       	push	r14
    7a32:	ff 92       	push	r15
    7a34:	0f 93       	push	r16
    7a36:	1f 93       	push	r17
    7a38:	cf 93       	push	r28
    7a3a:	df 93       	push	r29
    7a3c:	cd b7       	in	r28, 0x3d	; 61
    7a3e:	de b7       	in	r29, 0x3e	; 62
    7a40:	28 97       	sbiw	r28, 0x08	; 8
    7a42:	cd bf       	out	0x3d, r28	; 61
    7a44:	de bf       	out	0x3e, r29	; 62
    7a46:	8a 01       	movw	r16, r20
    7a48:	80 90 28 40 	lds	r8, 0x4028	; 0x804028 <_ZL9xtal_freq>
    7a4c:	90 90 29 40 	lds	r9, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    7a50:	a0 90 2a 40 	lds	r10, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    7a54:	b0 90 2b 40 	lds	r11, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    7a58:	a5 01       	movw	r20, r10
    7a5a:	94 01       	movw	r18, r8
    7a5c:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    7a60:	69 01       	movw	r12, r18
    7a62:	7a 01       	movw	r14, r20
    7a64:	69 83       	std	Y+1, r22	; 0x01
    7a66:	7a 83       	std	Y+2, r23	; 0x02
    7a68:	8b 83       	std	Y+3, r24	; 0x03
    7a6a:	9c 83       	std	Y+4, r25	; 0x04
    7a6c:	8d 82       	std	Y+5, r8	; 0x05
    7a6e:	9e 82       	std	Y+6, r9	; 0x06
    7a70:	af 82       	std	Y+7, r10	; 0x07
    7a72:	b8 86       	std	Y+8, r11	; 0x08
    7a74:	be 01       	movw	r22, r28
    7a76:	6b 5f       	subi	r22, 0xFB	; 251
    7a78:	7f 4f       	sbci	r23, 0xFF	; 255
    7a7a:	ce 01       	movw	r24, r28
    7a7c:	01 96       	adiw	r24, 0x01	; 1
    7a7e:	0e 94 a1 3c 	call	0x7942	; 0x7942 <_Z13reduce_by_gcdPmS_>
    7a82:	89 80       	ldd	r8, Y+1	; 0x01
    7a84:	9a 80       	ldd	r9, Y+2	; 0x02
    7a86:	ab 80       	ldd	r10, Y+3	; 0x03
    7a88:	bc 80       	ldd	r11, Y+4	; 0x04
    7a8a:	88 0c       	add	r8, r8
    7a8c:	99 1c       	adc	r9, r9
    7a8e:	aa 1c       	adc	r10, r10
    7a90:	bb 1c       	adc	r11, r11
    7a92:	88 0c       	add	r8, r8
    7a94:	99 1c       	adc	r9, r9
    7a96:	aa 1c       	adc	r10, r10
    7a98:	bb 1c       	adc	r11, r11
    7a9a:	88 0c       	add	r8, r8
    7a9c:	99 1c       	adc	r9, r9
    7a9e:	aa 1c       	adc	r10, r10
    7aa0:	bb 1c       	adc	r11, r11
    7aa2:	88 0c       	add	r8, r8
    7aa4:	99 1c       	adc	r9, r9
    7aa6:	aa 1c       	adc	r10, r10
    7aa8:	bb 1c       	adc	r11, r11
    7aaa:	88 0c       	add	r8, r8
    7aac:	99 1c       	adc	r9, r9
    7aae:	aa 1c       	adc	r10, r10
    7ab0:	bb 1c       	adc	r11, r11
    7ab2:	88 0c       	add	r8, r8
    7ab4:	99 1c       	adc	r9, r9
    7ab6:	aa 1c       	adc	r10, r10
    7ab8:	bb 1c       	adc	r11, r11
    7aba:	88 0c       	add	r8, r8
    7abc:	99 1c       	adc	r9, r9
    7abe:	aa 1c       	adc	r10, r10
    7ac0:	bb 1c       	adc	r11, r11
    7ac2:	4d 80       	ldd	r4, Y+5	; 0x05
    7ac4:	5e 80       	ldd	r5, Y+6	; 0x06
    7ac6:	6f 80       	ldd	r6, Y+7	; 0x07
    7ac8:	78 84       	ldd	r7, Y+8	; 0x08
    7aca:	c5 01       	movw	r24, r10
    7acc:	b4 01       	movw	r22, r8
    7ace:	a3 01       	movw	r20, r6
    7ad0:	92 01       	movw	r18, r4
    7ad2:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    7ad6:	cc 0c       	add	r12, r12
    7ad8:	dd 1c       	adc	r13, r13
    7ada:	ee 1c       	adc	r14, r14
    7adc:	ff 1c       	adc	r15, r15
    7ade:	cc 0c       	add	r12, r12
    7ae0:	dd 1c       	adc	r13, r13
    7ae2:	ee 1c       	adc	r14, r14
    7ae4:	ff 1c       	adc	r15, r15
    7ae6:	cc 0c       	add	r12, r12
    7ae8:	dd 1c       	adc	r13, r13
    7aea:	ee 1c       	adc	r14, r14
    7aec:	ff 1c       	adc	r15, r15
    7aee:	cc 0c       	add	r12, r12
    7af0:	dd 1c       	adc	r13, r13
    7af2:	ee 1c       	adc	r14, r14
    7af4:	ff 1c       	adc	r15, r15
    7af6:	cc 0c       	add	r12, r12
    7af8:	dd 1c       	adc	r13, r13
    7afa:	ee 1c       	adc	r14, r14
    7afc:	ff 1c       	adc	r15, r15
    7afe:	cc 0c       	add	r12, r12
    7b00:	dd 1c       	adc	r13, r13
    7b02:	ee 1c       	adc	r14, r14
    7b04:	ff 1c       	adc	r15, r15
    7b06:	cc 0c       	add	r12, r12
    7b08:	dd 1c       	adc	r13, r13
    7b0a:	ee 1c       	adc	r14, r14
    7b0c:	ff 1c       	adc	r15, r15
    7b0e:	c2 0e       	add	r12, r18
    7b10:	d3 1e       	adc	r13, r19
    7b12:	e4 1e       	adc	r14, r20
    7b14:	f5 1e       	adc	r15, r21
    7b16:	82 e0       	ldi	r24, 0x02	; 2
    7b18:	d8 1a       	sub	r13, r24
    7b1a:	e1 08       	sbc	r14, r1
    7b1c:	f1 08       	sbc	r15, r1
    7b1e:	f8 01       	movw	r30, r16
    7b20:	c0 82       	st	Z, r12
    7b22:	d1 82       	std	Z+1, r13	; 0x01
    7b24:	e2 82       	std	Z+2, r14	; 0x02
    7b26:	f3 82       	std	Z+3, r15	; 0x03
    7b28:	c3 01       	movw	r24, r6
    7b2a:	b2 01       	movw	r22, r4
    7b2c:	0e 94 1c 4c 	call	0x9838	; 0x9838 <__mulsi3>
    7b30:	86 1a       	sub	r8, r22
    7b32:	97 0a       	sbc	r9, r23
    7b34:	a8 0a       	sbc	r10, r24
    7b36:	b9 0a       	sbc	r11, r25
    7b38:	84 82       	std	Z+4, r8	; 0x04
    7b3a:	95 82       	std	Z+5, r9	; 0x05
    7b3c:	a6 82       	std	Z+6, r10	; 0x06
    7b3e:	b7 82       	std	Z+7, r11	; 0x07
    7b40:	40 86       	std	Z+8, r4	; 0x08
    7b42:	51 86       	std	Z+9, r5	; 0x09
    7b44:	62 86       	std	Z+10, r6	; 0x0a
    7b46:	73 86       	std	Z+11, r7	; 0x0b
    7b48:	80 e0       	ldi	r24, 0x00	; 0
    7b4a:	28 96       	adiw	r28, 0x08	; 8
    7b4c:	cd bf       	out	0x3d, r28	; 61
    7b4e:	de bf       	out	0x3e, r29	; 62
    7b50:	df 91       	pop	r29
    7b52:	cf 91       	pop	r28
    7b54:	1f 91       	pop	r17
    7b56:	0f 91       	pop	r16
    7b58:	ff 90       	pop	r15
    7b5a:	ef 90       	pop	r14
    7b5c:	df 90       	pop	r13
    7b5e:	cf 90       	pop	r12
    7b60:	bf 90       	pop	r11
    7b62:	af 90       	pop	r10
    7b64:	9f 90       	pop	r9
    7b66:	8f 90       	pop	r8
    7b68:	7f 90       	pop	r7
    7b6a:	6f 90       	pop	r6
    7b6c:	5f 90       	pop	r5
    7b6e:	4f 90       	pop	r4
    7b70:	08 95       	ret

00007b72 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    7b72:	2f 92       	push	r2
    7b74:	3f 92       	push	r3
    7b76:	4f 92       	push	r4
    7b78:	5f 92       	push	r5
    7b7a:	6f 92       	push	r6
    7b7c:	7f 92       	push	r7
    7b7e:	8f 92       	push	r8
    7b80:	9f 92       	push	r9
    7b82:	af 92       	push	r10
    7b84:	bf 92       	push	r11
    7b86:	cf 92       	push	r12
    7b88:	df 92       	push	r13
    7b8a:	ef 92       	push	r14
    7b8c:	ff 92       	push	r15
    7b8e:	0f 93       	push	r16
    7b90:	1f 93       	push	r17
    7b92:	cf 93       	push	r28
    7b94:	df 93       	push	r29
    7b96:	cd b7       	in	r28, 0x3d	; 61
    7b98:	de b7       	in	r29, 0x3e	; 62
    7b9a:	25 97       	sbiw	r28, 0x05	; 5
    7b9c:	cd bf       	out	0x3d, r28	; 61
    7b9e:	de bf       	out	0x3e, r29	; 62
    7ba0:	2b 01       	movw	r4, r22
    7ba2:	3c 01       	movw	r6, r24
    7ba4:	4a 83       	std	Y+2, r20	; 0x02
    7ba6:	5b 83       	std	Y+3, r21	; 0x03
    7ba8:	18 01       	movw	r2, r16
    7baa:	81 e0       	ldi	r24, 0x01	; 1
    7bac:	f9 01       	movw	r30, r18
    7bae:	80 83       	st	Z, r24
    7bb0:	f0 e8       	ldi	r31, 0x80	; 128
    7bb2:	4f 16       	cp	r4, r31
    7bb4:	f1 ed       	ldi	r31, 0xD1	; 209
    7bb6:	5f 06       	cpc	r5, r31
    7bb8:	f0 ef       	ldi	r31, 0xF0	; 240
    7bba:	6f 06       	cpc	r6, r31
    7bbc:	f8 e0       	ldi	r31, 0x08	; 8
    7bbe:	7f 06       	cpc	r7, r31
    7bc0:	d0 f0       	brcs	.+52     	; 0x7bf6 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x84>
    7bc2:	c3 01       	movw	r24, r6
    7bc4:	b2 01       	movw	r22, r4
    7bc6:	66 0f       	add	r22, r22
    7bc8:	77 1f       	adc	r23, r23
    7bca:	88 1f       	adc	r24, r24
    7bcc:	99 1f       	adc	r25, r25
    7bce:	66 0f       	add	r22, r22
    7bd0:	77 1f       	adc	r23, r23
    7bd2:	88 1f       	adc	r24, r24
    7bd4:	99 1f       	adc	r25, r25
    7bd6:	c1 2c       	mov	r12, r1
    7bd8:	d1 2c       	mov	r13, r1
    7bda:	76 01       	movw	r14, r12
    7bdc:	68 94       	set
    7bde:	c2 f8       	bld	r12, 2
    7be0:	48 c0       	rjmp	.+144    	; 0x7c72 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7be2:	21 e0       	ldi	r18, 0x01	; 1
    7be4:	2d 83       	std	Y+5, r18	; 0x05
    7be6:	0d c0       	rjmp	.+26     	; 0x7c02 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7be8:	69 01       	movw	r12, r18
    7bea:	7a 01       	movw	r14, r20
    7bec:	31 e0       	ldi	r19, 0x01	; 1
    7bee:	39 83       	std	Y+1, r19	; 0x01
    7bf0:	81 e0       	ldi	r24, 0x01	; 1
    7bf2:	8d 83       	std	Y+5, r24	; 0x05
    7bf4:	06 c0       	rjmp	.+12     	; 0x7c02 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7bf6:	1c 82       	std	Y+4, r1	; 0x04
    7bf8:	19 82       	std	Y+1, r1	; 0x01
    7bfa:	1d 82       	std	Y+5, r1	; 0x05
    7bfc:	c1 2c       	mov	r12, r1
    7bfe:	d1 2c       	mov	r13, r1
    7c00:	76 01       	movw	r14, r12
    7c02:	8d 80       	ldd	r8, Y+5	; 0x05
    7c04:	81 10       	cpse	r8, r1
    7c06:	28 c0       	rjmp	.+80     	; 0x7c58 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xe6>
    7c08:	9c 80       	ldd	r9, Y+4	; 0x04
    7c0a:	a9 2d       	mov	r26, r9
    7c0c:	b0 e0       	ldi	r27, 0x00	; 0
    7c0e:	a3 01       	movw	r20, r6
    7c10:	92 01       	movw	r18, r4
    7c12:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__muluhisi3>
    7c16:	00 e0       	ldi	r16, 0x00	; 0
    7c18:	19 ee       	ldi	r17, 0xE9	; 233
    7c1a:	24 ea       	ldi	r18, 0xA4	; 164
    7c1c:	35 e3       	ldi	r19, 0x35	; 53
    7c1e:	48 01       	movw	r8, r16
    7c20:	59 01       	movw	r10, r18
    7c22:	86 1a       	sub	r8, r22
    7c24:	97 0a       	sbc	r9, r23
    7c26:	a8 0a       	sbc	r10, r24
    7c28:	b9 0a       	sbc	r11, r25
    7c2a:	c5 01       	movw	r24, r10
    7c2c:	b4 01       	movw	r22, r8
    7c2e:	2c 81       	ldd	r18, Y+4	; 0x04
    7c30:	2e 5f       	subi	r18, 0xFE	; 254
    7c32:	2c 83       	std	Y+4, r18	; 0x04
    7c34:	81 14       	cp	r8, r1
    7c36:	36 e4       	ldi	r19, 0x46	; 70
    7c38:	93 06       	cpc	r9, r19
    7c3a:	33 ec       	ldi	r19, 0xC3	; 195
    7c3c:	a3 06       	cpc	r10, r19
    7c3e:	33 e2       	ldi	r19, 0x23	; 35
    7c40:	b3 06       	cpc	r11, r19
    7c42:	78 f2       	brcs	.-98     	; 0x7be2 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x70>
    7c44:	a3 01       	movw	r20, r6
    7c46:	92 01       	movw	r18, r4
    7c48:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    7c4c:	24 30       	cpi	r18, 0x04	; 4
    7c4e:	31 05       	cpc	r19, r1
    7c50:	41 05       	cpc	r20, r1
    7c52:	51 05       	cpc	r21, r1
    7c54:	48 f6       	brcc	.-110    	; 0x7be8 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x76>
    7c56:	d5 cf       	rjmp	.-86     	; 0x7c02 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7c58:	89 80       	ldd	r8, Y+1	; 0x01
    7c5a:	88 20       	and	r8, r8
    7c5c:	39 f0       	breq	.+14     	; 0x7c6c <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xfa>
    7c5e:	a7 01       	movw	r20, r14
    7c60:	96 01       	movw	r18, r12
    7c62:	c3 01       	movw	r24, r6
    7c64:	b2 01       	movw	r22, r4
    7c66:	0e 94 1c 4c 	call	0x9838	; 0x9838 <__mulsi3>
    7c6a:	03 c0       	rjmp	.+6      	; 0x7c72 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7c6c:	60 e0       	ldi	r22, 0x00	; 0
    7c6e:	70 e0       	ldi	r23, 0x00	; 0
    7c70:	cb 01       	movw	r24, r22
    7c72:	21 e0       	ldi	r18, 0x01	; 1
    7c74:	34 e0       	ldi	r19, 0x04	; 4
    7c76:	c3 16       	cp	r12, r19
    7c78:	d1 04       	cpc	r13, r1
    7c7a:	e1 04       	cpc	r14, r1
    7c7c:	f1 04       	cpc	r15, r1
    7c7e:	09 f0       	breq	.+2      	; 0x7c82 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x110>
    7c80:	20 e0       	ldi	r18, 0x00	; 0
    7c82:	f1 01       	movw	r30, r2
    7c84:	20 83       	st	Z, r18
    7c86:	cc 0c       	add	r12, r12
    7c88:	dd 1c       	adc	r13, r13
    7c8a:	ee 1c       	adc	r14, r14
    7c8c:	ff 1c       	adc	r15, r15
    7c8e:	cc 0c       	add	r12, r12
    7c90:	dd 1c       	adc	r13, r13
    7c92:	ee 1c       	adc	r14, r14
    7c94:	ff 1c       	adc	r15, r15
    7c96:	cc 0c       	add	r12, r12
    7c98:	dd 1c       	adc	r13, r13
    7c9a:	ee 1c       	adc	r14, r14
    7c9c:	ff 1c       	adc	r15, r15
    7c9e:	cc 0c       	add	r12, r12
    7ca0:	dd 1c       	adc	r13, r13
    7ca2:	ee 1c       	adc	r14, r14
    7ca4:	ff 1c       	adc	r15, r15
    7ca6:	cc 0c       	add	r12, r12
    7ca8:	dd 1c       	adc	r13, r13
    7caa:	ee 1c       	adc	r14, r14
    7cac:	ff 1c       	adc	r15, r15
    7cae:	cc 0c       	add	r12, r12
    7cb0:	dd 1c       	adc	r13, r13
    7cb2:	ee 1c       	adc	r14, r14
    7cb4:	ff 1c       	adc	r15, r15
    7cb6:	cc 0c       	add	r12, r12
    7cb8:	dd 1c       	adc	r13, r13
    7cba:	ee 1c       	adc	r14, r14
    7cbc:	ff 1c       	adc	r15, r15
    7cbe:	f2 e0       	ldi	r31, 0x02	; 2
    7cc0:	df 1a       	sub	r13, r31
    7cc2:	e1 08       	sbc	r14, r1
    7cc4:	f1 08       	sbc	r15, r1
    7cc6:	ea 81       	ldd	r30, Y+2	; 0x02
    7cc8:	fb 81       	ldd	r31, Y+3	; 0x03
    7cca:	c0 82       	st	Z, r12
    7ccc:	d1 82       	std	Z+1, r13	; 0x01
    7cce:	e2 82       	std	Z+2, r14	; 0x02
    7cd0:	f3 82       	std	Z+3, r15	; 0x03
    7cd2:	14 82       	std	Z+4, r1	; 0x04
    7cd4:	15 82       	std	Z+5, r1	; 0x05
    7cd6:	16 82       	std	Z+6, r1	; 0x06
    7cd8:	17 82       	std	Z+7, r1	; 0x07
    7cda:	01 e0       	ldi	r16, 0x01	; 1
    7cdc:	10 e0       	ldi	r17, 0x00	; 0
    7cde:	20 e0       	ldi	r18, 0x00	; 0
    7ce0:	30 e0       	ldi	r19, 0x00	; 0
    7ce2:	00 87       	std	Z+8, r16	; 0x08
    7ce4:	11 87       	std	Z+9, r17	; 0x09
    7ce6:	22 87       	std	Z+10, r18	; 0x0a
    7ce8:	33 87       	std	Z+11, r19	; 0x0b
    7cea:	25 96       	adiw	r28, 0x05	; 5
    7cec:	cd bf       	out	0x3d, r28	; 61
    7cee:	de bf       	out	0x3e, r29	; 62
    7cf0:	df 91       	pop	r29
    7cf2:	cf 91       	pop	r28
    7cf4:	1f 91       	pop	r17
    7cf6:	0f 91       	pop	r16
    7cf8:	ff 90       	pop	r15
    7cfa:	ef 90       	pop	r14
    7cfc:	df 90       	pop	r13
    7cfe:	cf 90       	pop	r12
    7d00:	bf 90       	pop	r11
    7d02:	af 90       	pop	r10
    7d04:	9f 90       	pop	r9
    7d06:	8f 90       	pop	r8
    7d08:	7f 90       	pop	r7
    7d0a:	6f 90       	pop	r6
    7d0c:	5f 90       	pop	r5
    7d0e:	4f 90       	pop	r4
    7d10:	3f 90       	pop	r3
    7d12:	2f 90       	pop	r2
    7d14:	08 95       	ret

00007d16 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
    7d16:	2f 92       	push	r2
    7d18:	3f 92       	push	r3
    7d1a:	4f 92       	push	r4
    7d1c:	5f 92       	push	r5
    7d1e:	6f 92       	push	r6
    7d20:	7f 92       	push	r7
    7d22:	8f 92       	push	r8
    7d24:	9f 92       	push	r9
    7d26:	af 92       	push	r10
    7d28:	bf 92       	push	r11
    7d2a:	cf 92       	push	r12
    7d2c:	df 92       	push	r13
    7d2e:	ef 92       	push	r14
    7d30:	ff 92       	push	r15
    7d32:	0f 93       	push	r16
    7d34:	1f 93       	push	r17
    7d36:	cf 93       	push	r28
    7d38:	df 93       	push	r29
    7d3a:	cd b7       	in	r28, 0x3d	; 61
    7d3c:	de b7       	in	r29, 0x3e	; 62
    7d3e:	62 97       	sbiw	r28, 0x12	; 18
    7d40:	cd bf       	out	0x3d, r28	; 61
    7d42:	de bf       	out	0x3e, r29	; 62
    7d44:	4b 01       	movw	r8, r22
    7d46:	5c 01       	movw	r10, r24
    7d48:	1a 01       	movw	r2, r20
    7d4a:	29 8b       	std	Y+17, r18	; 0x11
    7d4c:	3a 8b       	std	Y+18, r19	; 0x12
    7d4e:	60 91 86 4a 	lds	r22, 0x4A86	; 0x804a86 <_ZL8freqVCOB>
    7d52:	70 91 87 4a 	lds	r23, 0x4A87	; 0x804a87 <_ZL8freqVCOB+0x1>
    7d56:	80 91 88 4a 	lds	r24, 0x4A88	; 0x804a88 <_ZL8freqVCOB+0x2>
    7d5a:	90 91 89 4a 	lds	r25, 0x4A89	; 0x804a89 <_ZL8freqVCOB+0x3>
    7d5e:	a5 01       	movw	r20, r10
    7d60:	94 01       	movw	r18, r8
    7d62:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    7d66:	29 87       	std	Y+9, r18	; 0x09
    7d68:	3a 87       	std	Y+10, r19	; 0x0a
    7d6a:	4b 87       	std	Y+11, r20	; 0x0b
    7d6c:	5c 87       	std	Y+12, r21	; 0x0c
    7d6e:	69 01       	movw	r12, r18
    7d70:	7a 01       	movw	r14, r20
    7d72:	69 83       	std	Y+1, r22	; 0x01
    7d74:	7a 83       	std	Y+2, r23	; 0x02
    7d76:	8b 83       	std	Y+3, r24	; 0x03
    7d78:	9c 83       	std	Y+4, r25	; 0x04
    7d7a:	8d 82       	std	Y+5, r8	; 0x05
    7d7c:	9e 82       	std	Y+6, r9	; 0x06
    7d7e:	af 82       	std	Y+7, r10	; 0x07
    7d80:	b8 86       	std	Y+8, r11	; 0x08
    7d82:	be 01       	movw	r22, r28
    7d84:	6b 5f       	subi	r22, 0xFB	; 251
    7d86:	7f 4f       	sbci	r23, 0xFF	; 255
    7d88:	ce 01       	movw	r24, r28
    7d8a:	01 96       	adiw	r24, 0x01	; 1
    7d8c:	0e 94 a1 3c 	call	0x7942	; 0x7942 <_Z13reduce_by_gcdPmS_>
    7d90:	80 91 86 4a 	lds	r24, 0x4A86	; 0x804a86 <_ZL8freqVCOB>
    7d94:	90 91 87 4a 	lds	r25, 0x4A87	; 0x804a87 <_ZL8freqVCOB+0x1>
    7d98:	a0 91 88 4a 	lds	r26, 0x4A88	; 0x804a88 <_ZL8freqVCOB+0x2>
    7d9c:	b0 91 89 4a 	lds	r27, 0x4A89	; 0x804a89 <_ZL8freqVCOB+0x3>
    7da0:	8d 87       	std	Y+13, r24	; 0x0d
    7da2:	9e 87       	std	Y+14, r25	; 0x0e
    7da4:	af 87       	std	Y+15, r26	; 0x0f
    7da6:	b8 8b       	std	Y+16, r27	; 0x10
    7da8:	4d 80       	ldd	r4, Y+5	; 0x05
    7daa:	5e 80       	ldd	r5, Y+6	; 0x06
    7dac:	6f 80       	ldd	r6, Y+7	; 0x07
    7dae:	78 84       	ldd	r7, Y+8	; 0x08
    7db0:	29 85       	ldd	r18, Y+9	; 0x09
    7db2:	3a 85       	ldd	r19, Y+10	; 0x0a
    7db4:	4b 85       	ldd	r20, Y+11	; 0x0b
    7db6:	5c 85       	ldd	r21, Y+12	; 0x0c
    7db8:	c3 01       	movw	r24, r6
    7dba:	b2 01       	movw	r22, r4
    7dbc:	0e 94 1c 4c 	call	0x9838	; 0x9838 <__mulsi3>
    7dc0:	89 80       	ldd	r8, Y+1	; 0x01
    7dc2:	9a 80       	ldd	r9, Y+2	; 0x02
    7dc4:	ab 80       	ldd	r10, Y+3	; 0x03
    7dc6:	bc 80       	ldd	r11, Y+4	; 0x04
    7dc8:	9b 01       	movw	r18, r22
    7dca:	ac 01       	movw	r20, r24
    7dcc:	28 0d       	add	r18, r8
    7dce:	39 1d       	adc	r19, r9
    7dd0:	4a 1d       	adc	r20, r10
    7dd2:	5b 1d       	adc	r21, r11
    7dd4:	6d 85       	ldd	r22, Y+13	; 0x0d
    7dd6:	7e 85       	ldd	r23, Y+14	; 0x0e
    7dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    7dda:	98 89       	ldd	r25, Y+16	; 0x10
    7ddc:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    7de0:	ca 01       	movw	r24, r20
    7de2:	b9 01       	movw	r22, r18
    7de4:	a3 01       	movw	r20, r6
    7de6:	92 01       	movw	r18, r4
    7de8:	0e 94 1c 4c 	call	0x9838	; 0x9838 <__mulsi3>
    7dec:	6d 87       	std	Y+13, r22	; 0x0d
    7dee:	7e 87       	std	Y+14, r23	; 0x0e
    7df0:	8f 87       	std	Y+15, r24	; 0x0f
    7df2:	98 8b       	std	Y+16, r25	; 0x10
    7df4:	89 28       	or	r8, r9
    7df6:	8a 28       	or	r8, r10
    7df8:	8b 28       	or	r8, r11
    7dfa:	29 f4       	brne	.+10     	; 0x7e06 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf0>
    7dfc:	99 85       	ldd	r25, Y+9	; 0x09
    7dfe:	90 ff       	sbrs	r25, 0
    7e00:	04 c0       	rjmp	.+8      	; 0x7e0a <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf4>
    7e02:	80 e0       	ldi	r24, 0x00	; 0
    7e04:	03 c0       	rjmp	.+6      	; 0x7e0c <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7e06:	80 e0       	ldi	r24, 0x00	; 0
    7e08:	01 c0       	rjmp	.+2      	; 0x7e0c <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7e0a:	81 e0       	ldi	r24, 0x01	; 1
    7e0c:	a9 89       	ldd	r26, Y+17	; 0x11
    7e0e:	ba 89       	ldd	r27, Y+18	; 0x12
    7e10:	8c 93       	st	X, r24
    7e12:	b4 e0       	ldi	r27, 0x04	; 4
    7e14:	cb 16       	cp	r12, r27
    7e16:	d1 04       	cpc	r13, r1
    7e18:	e1 04       	cpc	r14, r1
    7e1a:	f1 04       	cpc	r15, r1
    7e1c:	09 f0       	breq	.+2      	; 0x7e20 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x10a>
    7e1e:	80 e0       	ldi	r24, 0x00	; 0
    7e20:	f8 01       	movw	r30, r16
    7e22:	80 83       	st	Z, r24
    7e24:	88 23       	and	r24, r24
    7e26:	a1 f0       	breq	.+40     	; 0x7e50 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x13a>
    7e28:	d1 01       	movw	r26, r2
    7e2a:	1d 92       	st	X+, r1
    7e2c:	1d 92       	st	X+, r1
    7e2e:	1d 92       	st	X+, r1
    7e30:	1c 92       	st	X, r1
    7e32:	13 97       	sbiw	r26, 0x03	; 3
    7e34:	f1 01       	movw	r30, r2
    7e36:	14 82       	std	Z+4, r1	; 0x04
    7e38:	15 82       	std	Z+5, r1	; 0x05
    7e3a:	16 82       	std	Z+6, r1	; 0x06
    7e3c:	17 82       	std	Z+7, r1	; 0x07
    7e3e:	81 e0       	ldi	r24, 0x01	; 1
    7e40:	90 e0       	ldi	r25, 0x00	; 0
    7e42:	a0 e0       	ldi	r26, 0x00	; 0
    7e44:	b0 e0       	ldi	r27, 0x00	; 0
    7e46:	80 87       	std	Z+8, r24	; 0x08
    7e48:	91 87       	std	Z+9, r25	; 0x09
    7e4a:	a2 87       	std	Z+10, r26	; 0x0a
    7e4c:	b3 87       	std	Z+11, r27	; 0x0b
    7e4e:	69 c0       	rjmp	.+210    	; 0x7f22 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x20c>
    7e50:	89 80       	ldd	r8, Y+1	; 0x01
    7e52:	9a 80       	ldd	r9, Y+2	; 0x02
    7e54:	ab 80       	ldd	r10, Y+3	; 0x03
    7e56:	bc 80       	ldd	r11, Y+4	; 0x04
    7e58:	88 0c       	add	r8, r8
    7e5a:	99 1c       	adc	r9, r9
    7e5c:	aa 1c       	adc	r10, r10
    7e5e:	bb 1c       	adc	r11, r11
    7e60:	88 0c       	add	r8, r8
    7e62:	99 1c       	adc	r9, r9
    7e64:	aa 1c       	adc	r10, r10
    7e66:	bb 1c       	adc	r11, r11
    7e68:	88 0c       	add	r8, r8
    7e6a:	99 1c       	adc	r9, r9
    7e6c:	aa 1c       	adc	r10, r10
    7e6e:	bb 1c       	adc	r11, r11
    7e70:	88 0c       	add	r8, r8
    7e72:	99 1c       	adc	r9, r9
    7e74:	aa 1c       	adc	r10, r10
    7e76:	bb 1c       	adc	r11, r11
    7e78:	88 0c       	add	r8, r8
    7e7a:	99 1c       	adc	r9, r9
    7e7c:	aa 1c       	adc	r10, r10
    7e7e:	bb 1c       	adc	r11, r11
    7e80:	88 0c       	add	r8, r8
    7e82:	99 1c       	adc	r9, r9
    7e84:	aa 1c       	adc	r10, r10
    7e86:	bb 1c       	adc	r11, r11
    7e88:	88 0c       	add	r8, r8
    7e8a:	99 1c       	adc	r9, r9
    7e8c:	aa 1c       	adc	r10, r10
    7e8e:	bb 1c       	adc	r11, r11
    7e90:	4d 80       	ldd	r4, Y+5	; 0x05
    7e92:	5e 80       	ldd	r5, Y+6	; 0x06
    7e94:	6f 80       	ldd	r6, Y+7	; 0x07
    7e96:	78 84       	ldd	r7, Y+8	; 0x08
    7e98:	c5 01       	movw	r24, r10
    7e9a:	b4 01       	movw	r22, r8
    7e9c:	a3 01       	movw	r20, r6
    7e9e:	92 01       	movw	r18, r4
    7ea0:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    7ea4:	c9 84       	ldd	r12, Y+9	; 0x09
    7ea6:	da 84       	ldd	r13, Y+10	; 0x0a
    7ea8:	eb 84       	ldd	r14, Y+11	; 0x0b
    7eaa:	fc 84       	ldd	r15, Y+12	; 0x0c
    7eac:	cc 0c       	add	r12, r12
    7eae:	dd 1c       	adc	r13, r13
    7eb0:	ee 1c       	adc	r14, r14
    7eb2:	ff 1c       	adc	r15, r15
    7eb4:	cc 0c       	add	r12, r12
    7eb6:	dd 1c       	adc	r13, r13
    7eb8:	ee 1c       	adc	r14, r14
    7eba:	ff 1c       	adc	r15, r15
    7ebc:	cc 0c       	add	r12, r12
    7ebe:	dd 1c       	adc	r13, r13
    7ec0:	ee 1c       	adc	r14, r14
    7ec2:	ff 1c       	adc	r15, r15
    7ec4:	cc 0c       	add	r12, r12
    7ec6:	dd 1c       	adc	r13, r13
    7ec8:	ee 1c       	adc	r14, r14
    7eca:	ff 1c       	adc	r15, r15
    7ecc:	cc 0c       	add	r12, r12
    7ece:	dd 1c       	adc	r13, r13
    7ed0:	ee 1c       	adc	r14, r14
    7ed2:	ff 1c       	adc	r15, r15
    7ed4:	cc 0c       	add	r12, r12
    7ed6:	dd 1c       	adc	r13, r13
    7ed8:	ee 1c       	adc	r14, r14
    7eda:	ff 1c       	adc	r15, r15
    7edc:	cc 0c       	add	r12, r12
    7ede:	dd 1c       	adc	r13, r13
    7ee0:	ee 1c       	adc	r14, r14
    7ee2:	ff 1c       	adc	r15, r15
    7ee4:	c2 0e       	add	r12, r18
    7ee6:	d3 1e       	adc	r13, r19
    7ee8:	e4 1e       	adc	r14, r20
    7eea:	f5 1e       	adc	r15, r21
    7eec:	f2 e0       	ldi	r31, 0x02	; 2
    7eee:	df 1a       	sub	r13, r31
    7ef0:	e1 08       	sbc	r14, r1
    7ef2:	f1 08       	sbc	r15, r1
    7ef4:	d1 01       	movw	r26, r2
    7ef6:	cd 92       	st	X+, r12
    7ef8:	dd 92       	st	X+, r13
    7efa:	ed 92       	st	X+, r14
    7efc:	fc 92       	st	X, r15
    7efe:	13 97       	sbiw	r26, 0x03	; 3
    7f00:	c3 01       	movw	r24, r6
    7f02:	b2 01       	movw	r22, r4
    7f04:	0e 94 1c 4c 	call	0x9838	; 0x9838 <__mulsi3>
    7f08:	86 1a       	sub	r8, r22
    7f0a:	97 0a       	sbc	r9, r23
    7f0c:	a8 0a       	sbc	r10, r24
    7f0e:	b9 0a       	sbc	r11, r25
    7f10:	f1 01       	movw	r30, r2
    7f12:	84 82       	std	Z+4, r8	; 0x04
    7f14:	95 82       	std	Z+5, r9	; 0x05
    7f16:	a6 82       	std	Z+6, r10	; 0x06
    7f18:	b7 82       	std	Z+7, r11	; 0x07
    7f1a:	40 86       	std	Z+8, r4	; 0x08
    7f1c:	51 86       	std	Z+9, r5	; 0x09
    7f1e:	62 86       	std	Z+10, r6	; 0x0a
    7f20:	73 86       	std	Z+11, r7	; 0x0b
    7f22:	6d 85       	ldd	r22, Y+13	; 0x0d
    7f24:	7e 85       	ldd	r23, Y+14	; 0x0e
    7f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    7f28:	98 89       	ldd	r25, Y+16	; 0x10
    7f2a:	62 96       	adiw	r28, 0x12	; 18
    7f2c:	cd bf       	out	0x3d, r28	; 61
    7f2e:	de bf       	out	0x3e, r29	; 62
    7f30:	df 91       	pop	r29
    7f32:	cf 91       	pop	r28
    7f34:	1f 91       	pop	r17
    7f36:	0f 91       	pop	r16
    7f38:	ff 90       	pop	r15
    7f3a:	ef 90       	pop	r14
    7f3c:	df 90       	pop	r13
    7f3e:	cf 90       	pop	r12
    7f40:	bf 90       	pop	r11
    7f42:	af 90       	pop	r10
    7f44:	9f 90       	pop	r9
    7f46:	8f 90       	pop	r8
    7f48:	7f 90       	pop	r7
    7f4a:	6f 90       	pop	r6
    7f4c:	5f 90       	pop	r5
    7f4e:	4f 90       	pop	r4
    7f50:	3f 90       	pop	r3
    7f52:	2f 90       	pop	r2
    7f54:	08 95       	ret

00007f56 <_Z17si5351_write_bulkhPhh>:
    7f56:	ff 92       	push	r15
    7f58:	0f 93       	push	r16
    7f5a:	1f 93       	push	r17
    7f5c:	cf 93       	push	r28
    7f5e:	df 93       	push	r29
    7f60:	f8 2e       	mov	r15, r24
    7f62:	8b 01       	movw	r16, r22
    7f64:	d4 2f       	mov	r29, r20
    7f66:	8a e0       	ldi	r24, 0x0A	; 10
    7f68:	cf ef       	ldi	r28, 0xFF	; 255
    7f6a:	c8 0f       	add	r28, r24
    7f6c:	88 23       	and	r24, r24
    7f6e:	71 f0       	breq	.+28     	; 0x7f8c <_Z17si5351_write_bulkhPhh+0x36>
    7f70:	2d 2f       	mov	r18, r29
    7f72:	a8 01       	movw	r20, r16
    7f74:	6f 2d       	mov	r22, r15
    7f76:	80 ec       	ldi	r24, 0xC0	; 192
    7f78:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <I2C_1_SendData>
    7f7c:	21 e0       	ldi	r18, 0x01	; 1
    7f7e:	d8 13       	cpse	r29, r24
    7f80:	01 c0       	rjmp	.+2      	; 0x7f84 <_Z17si5351_write_bulkhPhh+0x2e>
    7f82:	20 e0       	ldi	r18, 0x00	; 0
    7f84:	d8 17       	cp	r29, r24
    7f86:	21 f0       	breq	.+8      	; 0x7f90 <_Z17si5351_write_bulkhPhh+0x3a>
    7f88:	91 e0       	ldi	r25, 0x01	; 1
    7f8a:	03 c0       	rjmp	.+6      	; 0x7f92 <_Z17si5351_write_bulkhPhh+0x3c>
    7f8c:	90 e0       	ldi	r25, 0x00	; 0
    7f8e:	01 c0       	rjmp	.+2      	; 0x7f92 <_Z17si5351_write_bulkhPhh+0x3c>
    7f90:	90 e0       	ldi	r25, 0x00	; 0
    7f92:	8c 2f       	mov	r24, r28
    7f94:	91 11       	cpse	r25, r1
    7f96:	e8 cf       	rjmp	.-48     	; 0x7f68 <_Z17si5351_write_bulkhPhh+0x12>
    7f98:	82 2f       	mov	r24, r18
    7f9a:	df 91       	pop	r29
    7f9c:	cf 91       	pop	r28
    7f9e:	1f 91       	pop	r17
    7fa0:	0f 91       	pop	r16
    7fa2:	ff 90       	pop	r15
    7fa4:	08 95       	ret

00007fa6 <_Z7set_pllm10si5351_pll>:
    7fa6:	1f 93       	push	r17
    7fa8:	cf 93       	push	r28
    7faa:	df 93       	push	r29
    7fac:	cd b7       	in	r28, 0x3d	; 61
    7fae:	de b7       	in	r29, 0x3e	; 62
    7fb0:	66 97       	sbiw	r28, 0x16	; 22
    7fb2:	cd bf       	out	0x3d, r28	; 61
    7fb4:	de bf       	out	0x3e, r29	; 62
    7fb6:	14 2f       	mov	r17, r20
    7fb8:	ae 01       	movw	r20, r28
    7fba:	4f 5f       	subi	r20, 0xFF	; 255
    7fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    7fbe:	0e 94 0e 3d 	call	0x7a1c	; 0x7a1c <_Z8pll_calcmP13u_si5351_regs>
    7fc2:	81 11       	cpse	r24, r1
    7fc4:	28 c0       	rjmp	.+80     	; 0x8016 <__RODATA_PM_OFFSET__+0x16>
    7fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    7fc8:	8d 87       	std	Y+13, r24	; 0x0d
    7fca:	89 85       	ldd	r24, Y+9	; 0x09
    7fcc:	8e 87       	std	Y+14, r24	; 0x0e
    7fce:	8b 81       	ldd	r24, Y+3	; 0x03
    7fd0:	83 70       	andi	r24, 0x03	; 3
    7fd2:	8f 87       	std	Y+15, r24	; 0x0f
    7fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    7fd6:	88 8b       	std	Y+16, r24	; 0x10
    7fd8:	89 81       	ldd	r24, Y+1	; 0x01
    7fda:	89 8b       	std	Y+17, r24	; 0x11
    7fdc:	9b 85       	ldd	r25, Y+11	; 0x0b
    7fde:	8f 81       	ldd	r24, Y+7	; 0x07
    7fe0:	8f 70       	andi	r24, 0x0F	; 15
    7fe2:	20 e1       	ldi	r18, 0x10	; 16
    7fe4:	92 9f       	mul	r25, r18
    7fe6:	80 0d       	add	r24, r0
    7fe8:	11 24       	eor	r1, r1
    7fea:	8a 8b       	std	Y+18, r24	; 0x12
    7fec:	8e 81       	ldd	r24, Y+6	; 0x06
    7fee:	8b 8b       	std	Y+19, r24	; 0x13
    7ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    7ff2:	8c 8b       	std	Y+20, r24	; 0x14
    7ff4:	11 30       	cpi	r17, 0x01	; 1
    7ff6:	41 f4       	brne	.+16     	; 0x8008 <__RODATA_PM_OFFSET__+0x8>
    7ff8:	48 e0       	ldi	r20, 0x08	; 8
    7ffa:	be 01       	movw	r22, r28
    7ffc:	63 5f       	subi	r22, 0xF3	; 243
    7ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    8000:	8a e1       	ldi	r24, 0x1A	; 26
    8002:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    8006:	07 c0       	rjmp	.+14     	; 0x8016 <__RODATA_PM_OFFSET__+0x16>
    8008:	48 e0       	ldi	r20, 0x08	; 8
    800a:	be 01       	movw	r22, r28
    800c:	63 5f       	subi	r22, 0xF3	; 243
    800e:	7f 4f       	sbci	r23, 0xFF	; 255
    8010:	82 e2       	ldi	r24, 0x22	; 34
    8012:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    8016:	66 96       	adiw	r28, 0x16	; 22
    8018:	cd bf       	out	0x3d, r28	; 61
    801a:	de bf       	out	0x3e, r29	; 62
    801c:	df 91       	pop	r29
    801e:	cf 91       	pop	r28
    8020:	1f 91       	pop	r17
    8022:	08 95       	ret

00008024 <_Z16si5351_read_bulkhPhh>:
		while(tries-- && (fail = I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
		return(fail);
	}

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    8024:	ff 92       	push	r15
    8026:	0f 93       	push	r16
    8028:	1f 93       	push	r17
    802a:	cf 93       	push	r28
    802c:	df 93       	push	r29
    802e:	f8 2e       	mov	r15, r24
    8030:	8b 01       	movw	r16, r22
    8032:	d4 2f       	mov	r29, r20
		uint8_t tries = 10;
    8034:	8a e0       	ldi	r24, 0x0A	; 10
		bool fail;
		while(tries-- && (fail = I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    8036:	cf ef       	ldi	r28, 0xFF	; 255
    8038:	c8 0f       	add	r28, r24
    803a:	88 23       	and	r24, r24
    803c:	71 f0       	breq	.+28     	; 0x805a <_Z16si5351_read_bulkhPhh+0x36>
    803e:	2d 2f       	mov	r18, r29
    8040:	a8 01       	movw	r20, r16
    8042:	6f 2d       	mov	r22, r15
    8044:	80 ec       	ldi	r24, 0xC0	; 192
    8046:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <I2C_1_GetData>
    804a:	21 e0       	ldi	r18, 0x01	; 1
    804c:	d8 13       	cpse	r29, r24
    804e:	01 c0       	rjmp	.+2      	; 0x8052 <_Z16si5351_read_bulkhPhh+0x2e>
    8050:	20 e0       	ldi	r18, 0x00	; 0
    8052:	d8 17       	cp	r29, r24
    8054:	21 f0       	breq	.+8      	; 0x805e <_Z16si5351_read_bulkhPhh+0x3a>
    8056:	91 e0       	ldi	r25, 0x01	; 1
    8058:	03 c0       	rjmp	.+6      	; 0x8060 <_Z16si5351_read_bulkhPhh+0x3c>
    805a:	90 e0       	ldi	r25, 0x00	; 0
    805c:	01 c0       	rjmp	.+2      	; 0x8060 <_Z16si5351_read_bulkhPhh+0x3c>
    805e:	90 e0       	ldi	r25, 0x00	; 0
    8060:	8c 2f       	mov	r24, r28
    8062:	91 11       	cpse	r25, r1
    8064:	e8 cf       	rjmp	.-48     	; 0x8036 <_Z16si5351_read_bulkhPhh+0x12>
		return(fail);
	}
    8066:	82 2f       	mov	r24, r18
    8068:	df 91       	pop	r29
    806a:	cf 91       	pop	r28
    806c:	1f 91       	pop	r17
    806e:	0f 91       	pop	r16
    8070:	ff 90       	pop	r15
    8072:	08 95       	ret

00008074 <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	bool si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    8074:	cf 92       	push	r12
    8076:	df 92       	push	r13
    8078:	ef 92       	push	r14
    807a:	ff 92       	push	r15
    807c:	1f 93       	push	r17
    807e:	cf 93       	push	r28
    8080:	df 93       	push	r29
    8082:	00 d0       	rcall	.+0      	; 0x8084 <si5351_init+0x10>
    8084:	cd b7       	in	r28, 0x3d	; 61
    8086:	de b7       	in	r29, 0x3e	; 62
    8088:	18 2f       	mov	r17, r24
    808a:	6a 01       	movw	r12, r20
    808c:	7b 01       	movw	r14, r22
		static bool err = false;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    808e:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <I2C_1_Init>
			uint8_t result_val = 0x00;
			bool result = false;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    8092:	10 92 86 4a 	sts	0x4A86, r1	; 0x804a86 <_ZL8freqVCOB>
    8096:	10 92 87 4a 	sts	0x4A87, r1	; 0x804a87 <_ZL8freqVCOB+0x1>
    809a:	10 92 88 4a 	sts	0x4A88, r1	; 0x804a88 <_ZL8freqVCOB+0x2>
    809e:	10 92 89 4a 	sts	0x4A89, r1	; 0x804a89 <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    80a2:	80 e4       	ldi	r24, 0x40	; 64
    80a4:	98 e7       	ldi	r25, 0x78	; 120
    80a6:	ad e7       	ldi	r26, 0x7D	; 125
    80a8:	b1 e0       	ldi	r27, 0x01	; 1
    80aa:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    80ae:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    80b2:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    80b6:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    80ba:	10 92 85 4a 	sts	0x4A85, r1	; 0x804a85 <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    80be:	8f ef       	ldi	r24, 0xFF	; 255
    80c0:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    80c2:	41 e0       	ldi	r20, 0x01	; 1
    80c4:	be 01       	movw	r22, r28
    80c6:	6f 5f       	subi	r22, 0xFF	; 255
    80c8:	7f 4f       	sbci	r23, 0xFF	; 255
    80ca:	83 e0       	ldi	r24, 0x03	; 3
    80cc:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    80d0:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>
		
		if(err) return err;
    80d4:	81 11       	cpse	r24, r1
    80d6:	76 c0       	rjmp	.+236    	; 0x81c4 <si5351_init+0x150>
		/* Power down clocks */
		data[0] = 0xCC;
    80d8:	8c ec       	ldi	r24, 0xCC	; 204
    80da:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    80dc:	41 e0       	ldi	r20, 0x01	; 1
    80de:	be 01       	movw	r22, r28
    80e0:	6f 5f       	subi	r22, 0xFF	; 255
    80e2:	7f 4f       	sbci	r23, 0xFF	; 255
    80e4:	80 e1       	ldi	r24, 0x10	; 16
    80e6:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    80ea:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    80ee:	89 2b       	or	r24, r25
    80f0:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x11, data, 1);
    80f4:	41 e0       	ldi	r20, 0x01	; 1
    80f6:	be 01       	movw	r22, r28
    80f8:	6f 5f       	subi	r22, 0xFF	; 255
    80fa:	7f 4f       	sbci	r23, 0xFF	; 255
    80fc:	81 e1       	ldi	r24, 0x11	; 17
    80fe:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    8102:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    8106:	89 2b       	or	r24, r25
    8108:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x12, data, 1);
    810c:	41 e0       	ldi	r20, 0x01	; 1
    810e:	be 01       	movw	r22, r28
    8110:	6f 5f       	subi	r22, 0xFF	; 255
    8112:	7f 4f       	sbci	r23, 0xFF	; 255
    8114:	82 e1       	ldi	r24, 0x12	; 18
    8116:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    811a:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    811e:	89 2b       	or	r24, r25
    8120:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    8124:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    8126:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    8128:	41 e0       	ldi	r20, 0x01	; 1
    812a:	be 01       	movw	r22, r28
    812c:	6f 5f       	subi	r22, 0xFF	; 255
    812e:	7f 4f       	sbci	r23, 0xFF	; 255
    8130:	87 eb       	ldi	r24, 0xB7	; 183
    8132:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    8136:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    813a:	89 2b       	or	r24, r25
    813c:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>

		if(!ref_osc_freq)
    8140:	c1 14       	cp	r12, r1
    8142:	d1 04       	cpc	r13, r1
    8144:	e1 04       	cpc	r14, r1
    8146:	f1 04       	cpc	r15, r1
    8148:	51 f4       	brne	.+20     	; 0x815e <si5351_init+0xea>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    814a:	0f 2e       	mov	r0, r31
    814c:	f0 e4       	ldi	r31, 0x40	; 64
    814e:	cf 2e       	mov	r12, r31
    8150:	f8 e7       	ldi	r31, 0x78	; 120
    8152:	df 2e       	mov	r13, r31
    8154:	fd e7       	ldi	r31, 0x7D	; 125
    8156:	ef 2e       	mov	r14, r31
    8158:	ff 24       	eor	r15, r15
    815a:	f3 94       	inc	r15
    815c:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    815e:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    8162:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    8166:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    816a:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    816e:	c8 16       	cp	r12, r24
    8170:	d9 06       	cpc	r13, r25
    8172:	ea 06       	cpc	r14, r26
    8174:	fb 06       	cpc	r15, r27
    8176:	01 f1       	breq	.+64     	; 0x81b8 <si5351_init+0x144>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    8178:	41 e0       	ldi	r20, 0x01	; 1
    817a:	be 01       	movw	r22, r28
    817c:	6f 5f       	subi	r22, 0xFF	; 255
    817e:	7f 4f       	sbci	r23, 0xFF	; 255
    8180:	8f e0       	ldi	r24, 0x0F	; 15
    8182:	0e 94 12 40 	call	0x8024	; 0x8024 <_Z16si5351_read_bulkhPhh>
    8186:	81 11       	cpse	r24, r1
    8188:	1d c0       	rjmp	.+58     	; 0x81c4 <si5351_init+0x150>
			{
				return true;
			}
			
			reg_val = data[0];
    818a:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    818c:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    818e:	c0 92 28 40 	sts	0x4028, r12	; 0x804028 <_ZL9xtal_freq>
    8192:	d0 92 29 40 	sts	0x4029, r13	; 0x804029 <_ZL9xtal_freq+0x1>
    8196:	e0 92 2a 40 	sts	0x402A, r14	; 0x80402a <_ZL9xtal_freq+0x2>
    819a:	f0 92 2b 40 	sts	0x402B, r15	; 0x80402b <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    819e:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    81a0:	41 e0       	ldi	r20, 0x01	; 1
    81a2:	be 01       	movw	r22, r28
    81a4:	6f 5f       	subi	r22, 0xFF	; 255
    81a6:	7f 4f       	sbci	r23, 0xFF	; 255
    81a8:	8f e0       	ldi	r24, 0x0F	; 15
    81aa:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    81ae:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    81b2:	89 2b       	or	r24, r25
    81b4:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>
		}
		
		g_si5351_initialized = !err;
    81b8:	80 91 77 4a 	lds	r24, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    81bc:	91 e0       	ldi	r25, 0x01	; 1
    81be:	98 27       	eor	r25, r24
    81c0:	90 93 78 4a 	sts	0x4A78, r25	; 0x804a78 <g_si5351_initialized>

		return err;
	}
    81c4:	0f 90       	pop	r0
    81c6:	0f 90       	pop	r0
    81c8:	df 91       	pop	r29
    81ca:	cf 91       	pop	r28
    81cc:	1f 91       	pop	r17
    81ce:	ff 90       	pop	r15
    81d0:	ef 90       	pop	r14
    81d2:	df 90       	pop	r13
    81d4:	cf 90       	pop	r12
    81d6:	08 95       	ret

000081d8 <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, bool enable)
	{
    81d8:	0f 93       	push	r16
    81da:	1f 93       	push	r17
    81dc:	cf 93       	push	r28
    81de:	df 93       	push	r29
    81e0:	00 d0       	rcall	.+0      	; 0x81e2 <si5351_clock_enable+0xa>
    81e2:	cd b7       	in	r28, 0x3d	; 61
    81e4:	de b7       	in	r29, 0x3e	; 62
    81e6:	18 2f       	mov	r17, r24
    81e8:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    81ea:	41 e0       	ldi	r20, 0x01	; 1
    81ec:	be 01       	movw	r22, r28
    81ee:	6f 5f       	subi	r22, 0xFF	; 255
    81f0:	7f 4f       	sbci	r23, 0xFF	; 255
    81f2:	83 e0       	ldi	r24, 0x03	; 3
    81f4:	0e 94 12 40 	call	0x8024	; 0x8024 <_Z16si5351_read_bulkhPhh>
    81f8:	81 11       	cpse	r24, r1
    81fa:	23 c0       	rjmp	.+70     	; 0x8242 <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    81fc:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    81fe:	00 23       	and	r16, r16
    8200:	59 f0       	breq	.+22     	; 0x8218 <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    8202:	21 e0       	ldi	r18, 0x01	; 1
    8204:	30 e0       	ldi	r19, 0x00	; 0
    8206:	02 c0       	rjmp	.+4      	; 0x820c <si5351_clock_enable+0x34>
    8208:	22 0f       	add	r18, r18
    820a:	33 1f       	adc	r19, r19
    820c:	1a 95       	dec	r17
    820e:	e2 f7       	brpl	.-8      	; 0x8208 <si5351_clock_enable+0x30>
    8210:	82 2f       	mov	r24, r18
    8212:	80 95       	com	r24
    8214:	89 23       	and	r24, r25
    8216:	09 c0       	rjmp	.+18     	; 0x822a <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    8218:	21 e0       	ldi	r18, 0x01	; 1
    821a:	30 e0       	ldi	r19, 0x00	; 0
    821c:	02 c0       	rjmp	.+4      	; 0x8222 <si5351_clock_enable+0x4a>
    821e:	22 0f       	add	r18, r18
    8220:	33 1f       	adc	r19, r19
    8222:	1a 95       	dec	r17
    8224:	e2 f7       	brpl	.-8      	; 0x821e <si5351_clock_enable+0x46>
    8226:	89 2f       	mov	r24, r25
    8228:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    822a:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    822c:	41 e0       	ldi	r20, 0x01	; 1
    822e:	be 01       	movw	r22, r28
    8230:	6f 5f       	subi	r22, 0xFF	; 255
    8232:	7f 4f       	sbci	r23, 0xFF	; 255
    8234:	83 e0       	ldi	r24, 0x03	; 3
    8236:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    823a:	88 23       	and	r24, r24
    823c:	21 f0       	breq	.+8      	; 0x8246 <si5351_clock_enable+0x6e>
    823e:	8c ef       	ldi	r24, 0xFC	; 252
    8240:	03 c0       	rjmp	.+6      	; 0x8248 <si5351_clock_enable+0x70>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    8242:	8c ef       	ldi	r24, 0xFC	; 252
    8244:	01 c0       	rjmp	.+2      	; 0x8248 <si5351_clock_enable+0x70>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    8246:	80 e0       	ldi	r24, 0x00	; 0
	}
    8248:	0f 90       	pop	r0
    824a:	0f 90       	pop	r0
    824c:	df 91       	pop	r29
    824e:	cf 91       	pop	r28
    8250:	1f 91       	pop	r17
    8252:	0f 91       	pop	r16
    8254:	08 95       	ret

00008256 <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    8256:	0f 93       	push	r16
    8258:	1f 93       	push	r17
    825a:	cf 93       	push	r28
    825c:	df 93       	push	r29
    825e:	00 d0       	rcall	.+0      	; 0x8260 <si5351_drive_strength+0xa>
    8260:	cd b7       	in	r28, 0x3d	; 61
    8262:	de b7       	in	r29, 0x3e	; 62
    8264:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    8266:	10 e1       	ldi	r17, 0x10	; 16
    8268:	18 0f       	add	r17, r24
    826a:	41 e0       	ldi	r20, 0x01	; 1
    826c:	be 01       	movw	r22, r28
    826e:	6f 5f       	subi	r22, 0xFF	; 255
    8270:	7f 4f       	sbci	r23, 0xFF	; 255
    8272:	81 2f       	mov	r24, r17
    8274:	0e 94 12 40 	call	0x8024	; 0x8024 <_Z16si5351_read_bulkhPhh>
    8278:	81 11       	cpse	r24, r1
    827a:	1e c0       	rjmp	.+60     	; 0x82b8 <si5351_drive_strength+0x62>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    827c:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    827e:	01 30       	cpi	r16, 0x01	; 1
    8280:	41 f0       	breq	.+16     	; 0x8292 <si5351_drive_strength+0x3c>
    8282:	28 f0       	brcs	.+10     	; 0x828e <si5351_drive_strength+0x38>
    8284:	02 30       	cpi	r16, 0x02	; 2
    8286:	41 f0       	breq	.+16     	; 0x8298 <si5351_drive_strength+0x42>
    8288:	03 30       	cpi	r16, 0x03	; 3
    828a:	49 f0       	breq	.+18     	; 0x829e <si5351_drive_strength+0x48>
    828c:	09 c0       	rjmp	.+18     	; 0x82a0 <si5351_drive_strength+0x4a>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    828e:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    8290:	07 c0       	rjmp	.+14     	; 0x82a0 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    8292:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    8294:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    8296:	04 c0       	rjmp	.+8      	; 0x82a0 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    8298:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    829a:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    829c:	01 c0       	rjmp	.+2      	; 0x82a0 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    829e:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    82a0:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    82a2:	41 e0       	ldi	r20, 0x01	; 1
    82a4:	be 01       	movw	r22, r28
    82a6:	6f 5f       	subi	r22, 0xFF	; 255
    82a8:	7f 4f       	sbci	r23, 0xFF	; 255
    82aa:	81 2f       	mov	r24, r17
    82ac:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    82b0:	88 23       	and	r24, r24
    82b2:	21 f0       	breq	.+8      	; 0x82bc <si5351_drive_strength+0x66>
    82b4:	8b ef       	ldi	r24, 0xFB	; 251
    82b6:	03 c0       	rjmp	.+6      	; 0x82be <si5351_drive_strength+0x68>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    82b8:	8b ef       	ldi	r24, 0xFB	; 251
    82ba:	01 c0       	rjmp	.+2      	; 0x82be <si5351_drive_strength+0x68>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    82bc:	80 e0       	ldi	r24, 0x00	; 0
	}
    82be:	0f 90       	pop	r0
    82c0:	0f 90       	pop	r0
    82c2:	df 91       	pop	r29
    82c4:	cf 91       	pop	r28
    82c6:	1f 91       	pop	r17
    82c8:	0f 91       	pop	r16
    82ca:	08 95       	ret

000082cc <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    82cc:	0f 93       	push	r16
    82ce:	1f 93       	push	r17
    82d0:	cf 93       	push	r28
    82d2:	df 93       	push	r29
    82d4:	00 d0       	rcall	.+0      	; 0x82d6 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    82d6:	cd b7       	in	r28, 0x3d	; 61
    82d8:	de b7       	in	r29, 0x3e	; 62
    82da:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    82dc:	10 e1       	ldi	r17, 0x10	; 16
    82de:	18 0f       	add	r17, r24
    82e0:	41 e0       	ldi	r20, 0x01	; 1
    82e2:	be 01       	movw	r22, r28
    82e4:	6f 5f       	subi	r22, 0xFF	; 255
    82e6:	7f 4f       	sbci	r23, 0xFF	; 255
    82e8:	81 2f       	mov	r24, r17
    82ea:	0e 94 12 40 	call	0x8024	; 0x8024 <_Z16si5351_read_bulkhPhh>
    82ee:	81 11       	cpse	r24, r1
    82f0:	10 c0       	rjmp	.+32     	; 0x8312 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x46>
		{
			return(true);
		}
		
		reg_val = data[0];
    82f2:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    82f4:	01 30       	cpi	r16, 0x01	; 1
    82f6:	11 f4       	brne	.+4      	; 0x82fc <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    82f8:	8f 7d       	andi	r24, 0xDF	; 223
    82fa:	03 c0       	rjmp	.+6      	; 0x8302 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    82fc:	02 30       	cpi	r16, 0x02	; 2
    82fe:	09 f4       	brne	.+2      	; 0x8302 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    8300:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    8302:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    8304:	41 e0       	ldi	r20, 0x01	; 1
    8306:	be 01       	movw	r22, r28
    8308:	6f 5f       	subi	r22, 0xFF	; 255
    830a:	7f 4f       	sbci	r23, 0xFF	; 255
    830c:	81 2f       	mov	r24, r17
    830e:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
		{
			return(true);
		}
		
		return(false);
	}
    8312:	0f 90       	pop	r0
    8314:	0f 90       	pop	r0
    8316:	df 91       	pop	r29
    8318:	cf 91       	pop	r28
    831a:	1f 91       	pop	r17
    831c:	0f 91       	pop	r16
    831e:	08 95       	ret

00008320 <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    8320:	0f 93       	push	r16
    8322:	1f 93       	push	r17
    8324:	cf 93       	push	r28
    8326:	df 93       	push	r29
    8328:	00 d0       	rcall	.+0      	; 0x832a <_Z16set_integer_mode12si5351_clockb+0xa>
    832a:	cd b7       	in	r28, 0x3d	; 61
    832c:	de b7       	in	r29, 0x3e	; 62
    832e:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    8330:	10 e1       	ldi	r17, 0x10	; 16
    8332:	18 0f       	add	r17, r24
    8334:	41 e0       	ldi	r20, 0x01	; 1
    8336:	be 01       	movw	r22, r28
    8338:	6f 5f       	subi	r22, 0xFF	; 255
    833a:	7f 4f       	sbci	r23, 0xFF	; 255
    833c:	81 2f       	mov	r24, r17
    833e:	0e 94 12 40 	call	0x8024	; 0x8024 <_Z16si5351_read_bulkhPhh>
    8342:	81 11       	cpse	r24, r1
    8344:	0e c0       	rjmp	.+28     	; 0x8362 <_Z16set_integer_mode12si5351_clockb+0x42>
		{
			return(true);
		}
		
		reg_val = data[0];
    8346:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    8348:	00 23       	and	r16, r16
    834a:	11 f0       	breq	.+4      	; 0x8350 <_Z16set_integer_mode12si5351_clockb+0x30>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    834c:	80 64       	ori	r24, 0x40	; 64
    834e:	01 c0       	rjmp	.+2      	; 0x8352 <_Z16set_integer_mode12si5351_clockb+0x32>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    8350:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    8352:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    8354:	41 e0       	ldi	r20, 0x01	; 1
    8356:	be 01       	movw	r22, r28
    8358:	6f 5f       	subi	r22, 0xFF	; 255
    835a:	7f 4f       	sbci	r23, 0xFF	; 255
    835c:	81 2f       	mov	r24, r17
    835e:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
	}
    8362:	0f 90       	pop	r0
    8364:	0f 90       	pop	r0
    8366:	df 91       	pop	r29
    8368:	cf 91       	pop	r28
    836a:	1f 91       	pop	r17
    836c:	0f 91       	pop	r16
    836e:	08 95       	ret

00008370 <_Z6ms_div12si5351_clockhb>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    8370:	ff 92       	push	r15
    8372:	0f 93       	push	r16
    8374:	1f 93       	push	r17
    8376:	cf 93       	push	r28
    8378:	df 93       	push	r29
    837a:	00 d0       	rcall	.+0      	; 0x837c <_Z6ms_div12si5351_clockhb+0xc>
    837c:	cd b7       	in	r28, 0x3d	; 61
    837e:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    8380:	81 30       	cpi	r24, 0x01	; 1
    8382:	71 f0       	breq	.+28     	; 0x83a0 <_Z6ms_div12si5351_clockhb+0x30>
    8384:	18 f0       	brcs	.+6      	; 0x838c <_Z6ms_div12si5351_clockhb+0x1c>
    8386:	82 30       	cpi	r24, 0x02	; 2
    8388:	31 f0       	breq	.+12     	; 0x8396 <_Z6ms_div12si5351_clockhb+0x26>
    838a:	2c c0       	rjmp	.+88     	; 0x83e4 <_Z6ms_div12si5351_clockhb+0x74>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    838c:	0f 2e       	mov	r0, r31
    838e:	fc e2       	ldi	r31, 0x2C	; 44
    8390:	ff 2e       	mov	r15, r31
    8392:	f0 2d       	mov	r31, r0
    8394:	09 c0       	rjmp	.+18     	; 0x83a8 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    8396:	0f 2e       	mov	r0, r31
    8398:	fc e3       	ldi	r31, 0x3C	; 60
    839a:	ff 2e       	mov	r15, r31
    839c:	f0 2d       	mov	r31, r0
			}
			break;
    839e:	04 c0       	rjmp	.+8      	; 0x83a8 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    83a0:	0f 2e       	mov	r0, r31
    83a2:	f4 e3       	ldi	r31, 0x34	; 52
    83a4:	ff 2e       	mov	r15, r31
    83a6:	f0 2d       	mov	r31, r0
    83a8:	04 2f       	mov	r16, r20
    83aa:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    83ac:	41 e0       	ldi	r20, 0x01	; 1
    83ae:	be 01       	movw	r22, r28
    83b0:	6f 5f       	subi	r22, 0xFF	; 255
    83b2:	7f 4f       	sbci	r23, 0xFF	; 255
    83b4:	8f 2d       	mov	r24, r15
    83b6:	0e 94 12 40 	call	0x8024	; 0x8024 <_Z16si5351_read_bulkhPhh>
    83ba:	81 11       	cpse	r24, r1
    83bc:	14 c0       	rjmp	.+40     	; 0x83e6 <_Z6ms_div12si5351_clockhb+0x76>
		{
			return(true);
		}
		
		reg_val = data[0];
    83be:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    83c0:	86 2f       	mov	r24, r22
    83c2:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    83c4:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    83c6:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    83c8:	90 e1       	ldi	r25, 0x10	; 16
    83ca:	19 9f       	mul	r17, r25
    83cc:	b0 01       	movw	r22, r0
    83ce:	11 24       	eor	r1, r1
    83d0:	68 2b       	or	r22, r24

		data[0] = reg_val;
    83d2:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    83d4:	41 e0       	ldi	r20, 0x01	; 1
    83d6:	be 01       	movw	r22, r28
    83d8:	6f 5f       	subi	r22, 0xFF	; 255
    83da:	7f 4f       	sbci	r23, 0xFF	; 255
    83dc:	8f 2d       	mov	r24, r15
    83de:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    83e2:	01 c0       	rjmp	.+2      	; 0x83e6 <_Z6ms_div12si5351_clockhb+0x76>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    83e4:	81 e0       	ldi	r24, 0x01	; 1

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		data[0] = reg_val;
		return(si5351_write_bulk(reg_addr, data, 1));
	}
    83e6:	0f 90       	pop	r0
    83e8:	0f 90       	pop	r0
    83ea:	df 91       	pop	r29
    83ec:	cf 91       	pop	r28
    83ee:	1f 91       	pop	r17
    83f0:	0f 91       	pop	r16
    83f2:	ff 90       	pop	r15
    83f4:	08 95       	ret

000083f6 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    83f6:	8f 92       	push	r8
    83f8:	af 92       	push	r10
    83fa:	cf 92       	push	r12
    83fc:	df 92       	push	r13
    83fe:	ef 92       	push	r14
    8400:	ff 92       	push	r15
    8402:	0f 93       	push	r16
    8404:	1f 93       	push	r17
    8406:	cf 93       	push	r28
    8408:	df 93       	push	r29
    840a:	cd b7       	in	r28, 0x3d	; 61
    840c:	de b7       	in	r29, 0x3e	; 62
    840e:	69 97       	sbiw	r28, 0x19	; 25
    8410:	cd bf       	out	0x3d, r28	; 61
    8412:	de bf       	out	0x3e, r29	; 62
    8414:	f8 2e       	mov	r15, r24
    8416:	ce 86       	std	Y+14, r12	; 0x0e
    8418:	df 86       	std	Y+15, r13	; 0x0f
    841a:	e8 8a       	std	Y+16, r14	; 0x10
    841c:	0a 8b       	std	Y+18, r16	; 0x12
    841e:	1b 8b       	std	Y+19, r17	; 0x13
    8420:	2c 8b       	std	Y+20, r18	; 0x14
    8422:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    8424:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    8426:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    8428:	88 0f       	add	r24, r24
    842a:	88 0f       	add	r24, r24
    842c:	88 0f       	add	r24, r24
    842e:	41 e0       	ldi	r20, 0x01	; 1
    8430:	be 01       	movw	r22, r28
    8432:	64 5f       	subi	r22, 0xF4	; 244
    8434:	7f 4f       	sbci	r23, 0xFF	; 255
    8436:	84 5d       	subi	r24, 0xD4	; 212
    8438:	0e 94 12 40 	call	0x8024	; 0x8024 <_Z16si5351_read_bulkhPhh>
    843c:	81 11       	cpse	r24, r1
    843e:	48 c0       	rjmp	.+144    	; 0x84d0 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		reg_val = data[0];
    8440:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    8442:	98 2f       	mov	r25, r24
    8444:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    8446:	88 89       	ldd	r24, Y+16	; 0x10
    8448:	83 70       	andi	r24, 0x03	; 3
    844a:	89 2b       	or	r24, r25
    844c:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    844e:	8f 85       	ldd	r24, Y+15	; 0x0f
    8450:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    8452:	8e 85       	ldd	r24, Y+14	; 0x0e
    8454:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    8456:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    8458:	8c 89       	ldd	r24, Y+20	; 0x14
    845a:	8f 70       	andi	r24, 0x0F	; 15
    845c:	20 e1       	ldi	r18, 0x10	; 16
    845e:	92 9f       	mul	r25, r18
    8460:	80 0d       	add	r24, r0
    8462:	11 24       	eor	r1, r1
    8464:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    8466:	8b 89       	ldd	r24, Y+19	; 0x13
    8468:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    846a:	8a 89       	ldd	r24, Y+18	; 0x12
    846c:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    846e:	81 e0       	ldi	r24, 0x01	; 1
    8470:	f8 16       	cp	r15, r24
    8472:	81 f0       	breq	.+32     	; 0x8494 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x9e>
    8474:	f8 16       	cp	r15, r24
    8476:	20 f0       	brcs	.+8      	; 0x8480 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    8478:	22 e0       	ldi	r18, 0x02	; 2
    847a:	f2 16       	cp	r15, r18
    847c:	a9 f0       	breq	.+42     	; 0x84a8 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xb2>
    847e:	1d c0       	rjmp	.+58     	; 0x84ba <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    8480:	48 e0       	ldi	r20, 0x08	; 8
    8482:	be 01       	movw	r22, r28
    8484:	6f 5f       	subi	r22, 0xFF	; 255
    8486:	7f 4f       	sbci	r23, 0xFF	; 255
    8488:	8a e2       	ldi	r24, 0x2A	; 42
    848a:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    848e:	88 23       	and	r24, r24
    8490:	a1 f0       	breq	.+40     	; 0x84ba <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    8492:	1e c0       	rjmp	.+60     	; 0x84d0 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    8494:	48 e0       	ldi	r20, 0x08	; 8
    8496:	be 01       	movw	r22, r28
    8498:	6f 5f       	subi	r22, 0xFF	; 255
    849a:	7f 4f       	sbci	r23, 0xFF	; 255
    849c:	82 e3       	ldi	r24, 0x32	; 50
    849e:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    84a2:	88 23       	and	r24, r24
    84a4:	51 f0       	breq	.+20     	; 0x84ba <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    84a6:	14 c0       	rjmp	.+40     	; 0x84d0 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    84a8:	48 e0       	ldi	r20, 0x08	; 8
    84aa:	be 01       	movw	r22, r28
    84ac:	6f 5f       	subi	r22, 0xFF	; 255
    84ae:	7f 4f       	sbci	r23, 0xFF	; 255
    84b0:	8a e3       	ldi	r24, 0x3A	; 58
    84b2:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    84b6:	81 11       	cpse	r24, r1
    84b8:	0b c0       	rjmp	.+22     	; 0x84d0 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    84ba:	6a 2d       	mov	r22, r10
    84bc:	8f 2d       	mov	r24, r15
    84be:	0e 94 90 41 	call	0x8320	; 0x8320 <_Z16set_integer_mode12si5351_clockb>
    84c2:	81 11       	cpse	r24, r1
    84c4:	05 c0       	rjmp	.+10     	; 0x84d0 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    84c6:	4e a1       	ldd	r20, Y+38	; 0x26
    84c8:	68 2d       	mov	r22, r8
    84ca:	8f 2d       	mov	r24, r15
    84cc:	0e 94 b8 41 	call	0x8370	; 0x8370 <_Z6ms_div12si5351_clockhb>
		{
			return(true);
		}
		
		return(false);
	}
    84d0:	69 96       	adiw	r28, 0x19	; 25
    84d2:	cd bf       	out	0x3d, r28	; 61
    84d4:	de bf       	out	0x3e, r29	; 62
    84d6:	df 91       	pop	r29
    84d8:	cf 91       	pop	r28
    84da:	1f 91       	pop	r17
    84dc:	0f 91       	pop	r16
    84de:	ff 90       	pop	r15
    84e0:	ef 90       	pop	r14
    84e2:	df 90       	pop	r13
    84e4:	cf 90       	pop	r12
    84e6:	af 90       	pop	r10
    84e8:	8f 90       	pop	r8
    84ea:	08 95       	ret

000084ec <si5351_set_freq>:
 *
 * Returns true on failure
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
    84ec:	2f 92       	push	r2
    84ee:	3f 92       	push	r3
    84f0:	4f 92       	push	r4
    84f2:	5f 92       	push	r5
    84f4:	6f 92       	push	r6
    84f6:	7f 92       	push	r7
    84f8:	8f 92       	push	r8
    84fa:	9f 92       	push	r9
    84fc:	af 92       	push	r10
    84fe:	bf 92       	push	r11
    8500:	cf 92       	push	r12
    8502:	df 92       	push	r13
    8504:	ef 92       	push	r14
    8506:	ff 92       	push	r15
    8508:	0f 93       	push	r16
    850a:	1f 93       	push	r17
    850c:	cf 93       	push	r28
    850e:	df 93       	push	r29
    8510:	cd b7       	in	r28, 0x3d	; 61
    8512:	de b7       	in	r29, 0x3e	; 62
    8514:	60 97       	sbiw	r28, 0x10	; 16
    8516:	cd bf       	out	0x3d, r28	; 61
    8518:	de bf       	out	0x3e, r29	; 62
    851a:	6b 01       	movw	r12, r22
    851c:	7c 01       	movw	r14, r24
    851e:	b4 2e       	mov	r11, r20
    8520:	72 2e       	mov	r7, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		bool int_mode = false;
    8522:	1d 86       	std	Y+13, r1	; 0x0d
		bool div_by_4 = false;
    8524:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    8526:	10 91 78 4a 	lds	r17, 0x4A78	; 0x804a78 <g_si5351_initialized>
    852a:	11 23       	and	r17, r17
    852c:	09 f4       	brne	.+2      	; 0x8530 <si5351_set_freq+0x44>
    852e:	1e c1       	rjmp	.+572    	; 0x876c <si5351_set_freq+0x280>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    8530:	80 e4       	ldi	r24, 0x40	; 64
    8532:	c8 16       	cp	r12, r24
    8534:	82 e4       	ldi	r24, 0x42	; 66
    8536:	d8 06       	cpc	r13, r24
    8538:	8f e0       	ldi	r24, 0x0F	; 15
    853a:	e8 06       	cpc	r14, r24
    853c:	f1 04       	cpc	r15, r1
    853e:	70 f0       	brcs	.+28     	; 0x855c <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    8540:	c7 01       	movw	r24, r14
    8542:	b6 01       	movw	r22, r12
    8544:	24 e6       	ldi	r18, 0x64	; 100
    8546:	30 e0       	ldi	r19, 0x00	; 0
    8548:	40 e0       	ldi	r20, 0x00	; 0
    854a:	50 e0       	ldi	r21, 0x00	; 0
    854c:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
				freq_Fout *= 100;
    8550:	a4 e6       	ldi	r26, 0x64	; 100
    8552:	b0 e0       	ldi	r27, 0x00	; 0
    8554:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__muluhisi3>
    8558:	6b 01       	movw	r12, r22
    855a:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    855c:	81 e0       	ldi	r24, 0x01	; 1
    855e:	b8 16       	cp	r11, r24
    8560:	c9 f0       	breq	.+50     	; 0x8594 <si5351_set_freq+0xa8>
    8562:	b8 16       	cp	r11, r24
    8564:	20 f0       	brcs	.+8      	; 0x856e <si5351_set_freq+0x82>
    8566:	82 e0       	ldi	r24, 0x02	; 2
    8568:	b8 16       	cp	r11, r24
    856a:	b1 f1       	breq	.+108    	; 0x85d8 <si5351_set_freq+0xec>
    856c:	08 c1       	rjmp	.+528    	; 0x877e <si5351_set_freq+0x292>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    856e:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    8572:	81 60       	ori	r24, 0x01	; 1
    8574:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    8578:	c0 92 79 4a 	sts	0x4A79, r12	; 0x804a79 <_ZL9clock_out>
    857c:	d0 92 7a 4a 	sts	0x4A7A, r13	; 0x804a7a <_ZL9clock_out+0x1>
    8580:	e0 92 7b 4a 	sts	0x4A7B, r14	; 0x804a7b <_ZL9clock_out+0x2>
    8584:	f0 92 7c 4a 	sts	0x4A7C, r15	; 0x804a7c <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    8588:	68 94       	set
    858a:	66 24       	eor	r6, r6
    858c:	64 f8       	bld	r6, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    858e:	99 24       	eor	r9, r9
    8590:	93 94       	inc	r9
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    8592:	43 c0       	rjmp	.+134    	; 0x861a <si5351_set_freq+0x12e>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    8594:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    8598:	82 60       	ori	r24, 0x02	; 2
    859a:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    859e:	80 95       	com	r24
    85a0:	8a 6f       	ori	r24, 0xFA	; 250
    85a2:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    85a4:	41 e0       	ldi	r20, 0x01	; 1
    85a6:	be 01       	movw	r22, r28
    85a8:	61 5f       	subi	r22, 0xF1	; 241
    85aa:	7f 4f       	sbci	r23, 0xFF	; 255
    85ac:	83 e0       	ldi	r24, 0x03	; 3
    85ae:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    85b2:	18 2f       	mov	r17, r24
    85b4:	81 11       	cpse	r24, r1
    85b6:	e3 c0       	rjmp	.+454    	; 0x877e <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    85b8:	c0 92 7d 4a 	sts	0x4A7D, r12	; 0x804a7d <_ZL9clock_out+0x4>
    85bc:	d0 92 7e 4a 	sts	0x4A7E, r13	; 0x804a7e <_ZL9clock_out+0x5>
    85c0:	e0 92 7f 4a 	sts	0x4A7F, r14	; 0x804a7f <_ZL9clock_out+0x6>
    85c4:	f0 92 80 4a 	sts	0x4A80, r15	; 0x804a80 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    85c8:	0f 2e       	mov	r0, r31
    85ca:	f1 e1       	ldi	r31, 0x11	; 17
    85cc:	6f 2e       	mov	r6, r31
    85ce:	f0 2d       	mov	r31, r0
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    85d0:	68 94       	set
    85d2:	99 24       	eor	r9, r9
    85d4:	91 f8       	bld	r9, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    85d6:	21 c0       	rjmp	.+66     	; 0x861a <si5351_set_freq+0x12e>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    85d8:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    85dc:	84 60       	ori	r24, 0x04	; 4
    85de:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    85e2:	80 95       	com	r24
    85e4:	8c 6f       	ori	r24, 0xFC	; 252
    85e6:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    85e8:	41 e0       	ldi	r20, 0x01	; 1
    85ea:	be 01       	movw	r22, r28
    85ec:	61 5f       	subi	r22, 0xF1	; 241
    85ee:	7f 4f       	sbci	r23, 0xFF	; 255
    85f0:	83 e0       	ldi	r24, 0x03	; 3
    85f2:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    85f6:	18 2f       	mov	r17, r24
    85f8:	81 11       	cpse	r24, r1
    85fa:	c1 c0       	rjmp	.+386    	; 0x877e <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    85fc:	c0 92 81 4a 	sts	0x4A81, r12	; 0x804a81 <_ZL9clock_out+0x8>
    8600:	d0 92 82 4a 	sts	0x4A82, r13	; 0x804a82 <_ZL9clock_out+0x9>
    8604:	e0 92 83 4a 	sts	0x4A83, r14	; 0x804a83 <_ZL9clock_out+0xa>
    8608:	f0 92 84 4a 	sts	0x4A84, r15	; 0x804a84 <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    860c:	0f 2e       	mov	r0, r31
    860e:	f2 e1       	ldi	r31, 0x12	; 18
    8610:	6f 2e       	mov	r6, r31
    8612:	f0 2d       	mov	r31, r0
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    8614:	68 94       	set
    8616:	99 24       	eor	r9, r9
    8618:	91 f8       	bld	r9, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    861a:	81 e0       	ldi	r24, 0x01	; 1
    861c:	98 16       	cp	r9, r24
    861e:	61 f0       	breq	.+24     	; 0x8638 <si5351_set_freq+0x14c>
    8620:	80 91 86 4a 	lds	r24, 0x4A86	; 0x804a86 <_ZL8freqVCOB>
    8624:	90 91 87 4a 	lds	r25, 0x4A87	; 0x804a87 <_ZL8freqVCOB+0x1>
    8628:	a0 91 88 4a 	lds	r26, 0x4A88	; 0x804a88 <_ZL8freqVCOB+0x2>
    862c:	b0 91 89 4a 	lds	r27, 0x4A89	; 0x804a89 <_ZL8freqVCOB+0x3>
    8630:	89 2b       	or	r24, r25
    8632:	8a 2b       	or	r24, r26
    8634:	8b 2b       	or	r24, r27
    8636:	81 f4       	brne	.+32     	; 0x8658 <si5351_set_freq+0x16c>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    8638:	8e 01       	movw	r16, r28
    863a:	02 5f       	subi	r16, 0xF2	; 242
    863c:	1f 4f       	sbci	r17, 0xFF	; 255
    863e:	9e 01       	movw	r18, r28
    8640:	23 5f       	subi	r18, 0xF3	; 243
    8642:	3f 4f       	sbci	r19, 0xFF	; 255
    8644:	ae 01       	movw	r20, r28
    8646:	4f 5f       	subi	r20, 0xFF	; 255
    8648:	5f 4f       	sbci	r21, 0xFF	; 255
    864a:	c7 01       	movw	r24, r14
    864c:	b6 01       	movw	r22, r12
    864e:	0e 94 b9 3d 	call	0x7b72	; 0x7b72 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    8652:	1b 01       	movw	r2, r22
    8654:	2c 01       	movw	r4, r24
    8656:	10 c0       	rjmp	.+32     	; 0x8678 <si5351_set_freq+0x18c>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    8658:	8e 01       	movw	r16, r28
    865a:	02 5f       	subi	r16, 0xF2	; 242
    865c:	1f 4f       	sbci	r17, 0xFF	; 255
    865e:	9e 01       	movw	r18, r28
    8660:	23 5f       	subi	r18, 0xF3	; 243
    8662:	3f 4f       	sbci	r19, 0xFF	; 255
    8664:	ae 01       	movw	r20, r28
    8666:	4f 5f       	subi	r20, 0xFF	; 255
    8668:	5f 4f       	sbci	r21, 0xFF	; 255
    866a:	c7 01       	movw	r24, r14
    866c:	b6 01       	movw	r22, r12
    866e:	0e 94 8b 3e 	call	0x7d16	; 0x7d16 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    8672:	21 2c       	mov	r2, r1
    8674:	31 2c       	mov	r3, r1
    8676:	21 01       	movw	r4, r2
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    8678:	69 2d       	mov	r22, r9
    867a:	8b 2d       	mov	r24, r11
    867c:	0e 94 66 41 	call	0x82cc	; 0x82cc <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    8680:	18 2f       	mov	r17, r24
    8682:	81 11       	cpse	r24, r1
    8684:	7c c0       	rjmp	.+248    	; 0x877e <si5351_set_freq+0x292>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    8686:	8e 85       	ldd	r24, Y+14	; 0x0e
    8688:	ad 84       	ldd	r10, Y+13	; 0x0d
    868a:	8f 93       	push	r24
    868c:	81 2c       	mov	r8, r1
    868e:	c9 80       	ldd	r12, Y+1	; 0x01
    8690:	da 80       	ldd	r13, Y+2	; 0x02
    8692:	eb 80       	ldd	r14, Y+3	; 0x03
    8694:	fc 80       	ldd	r15, Y+4	; 0x04
    8696:	0d 81       	ldd	r16, Y+5	; 0x05
    8698:	1e 81       	ldd	r17, Y+6	; 0x06
    869a:	2f 81       	ldd	r18, Y+7	; 0x07
    869c:	38 85       	ldd	r19, Y+8	; 0x08
    869e:	49 85       	ldd	r20, Y+9	; 0x09
    86a0:	5a 85       	ldd	r21, Y+10	; 0x0a
    86a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    86a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    86a6:	8b 2d       	mov	r24, r11
    86a8:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    86ac:	18 2f       	mov	r17, r24
    86ae:	0f 90       	pop	r0
    86b0:	81 11       	cpse	r24, r1
    86b2:	65 c0       	rjmp	.+202    	; 0x877e <si5351_set_freq+0x292>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    86b4:	21 14       	cp	r2, r1
    86b6:	31 04       	cpc	r3, r1
    86b8:	41 04       	cpc	r4, r1
    86ba:	51 04       	cpc	r5, r1
    86bc:	29 f0       	breq	.+10     	; 0x86c8 <si5351_set_freq+0x1dc>
			{
				set_pll(freq_VCO, target_pll);
    86be:	49 2d       	mov	r20, r9
    86c0:	c2 01       	movw	r24, r4
    86c2:	b1 01       	movw	r22, r2
    86c4:	0e 94 d3 3f 	call	0x7fa6	; 0x7fa6 <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    86c8:	77 20       	and	r7, r7
    86ca:	69 f0       	breq	.+26     	; 0x86e6 <si5351_set_freq+0x1fa>
		{
 			data[0] = enabledClocksMask;
    86cc:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    86d0:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    86d2:	41 e0       	ldi	r20, 0x01	; 1
    86d4:	be 01       	movw	r22, r28
    86d6:	61 5f       	subi	r22, 0xF1	; 241
    86d8:	7f 4f       	sbci	r23, 0xFF	; 255
    86da:	83 e0       	ldi	r24, 0x03	; 3
    86dc:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    86e0:	88 23       	and	r24, r24
    86e2:	71 f0       	breq	.+28     	; 0x8700 <si5351_set_freq+0x214>
    86e4:	45 c0       	rjmp	.+138    	; 0x8770 <si5351_set_freq+0x284>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    86e6:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    86ea:	80 95       	com	r24
    86ec:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    86ee:	41 e0       	ldi	r20, 0x01	; 1
    86f0:	be 01       	movw	r22, r28
    86f2:	61 5f       	subi	r22, 0xF1	; 241
    86f4:	7f 4f       	sbci	r23, 0xFF	; 255
    86f6:	83 e0       	ldi	r24, 0x03	; 3
    86f8:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    86fc:	81 11       	cpse	r24, r1
    86fe:	3a c0       	rjmp	.+116    	; 0x8774 <si5351_set_freq+0x288>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    8700:	81 e0       	ldi	r24, 0x01	; 1
    8702:	98 12       	cpse	r9, r24
    8704:	0b c0       	rjmp	.+22     	; 0x871c <si5351_set_freq+0x230>
		{
 			data[0] = 0x4C;
    8706:	8c e4       	ldi	r24, 0x4C	; 76
    8708:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    870a:	41 e0       	ldi	r20, 0x01	; 1
    870c:	be 01       	movw	r22, r28
    870e:	61 5f       	subi	r22, 0xF1	; 241
    8710:	7f 4f       	sbci	r23, 0xFF	; 255
    8712:	86 2d       	mov	r24, r6
    8714:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    8718:	18 2f       	mov	r17, r24
    871a:	31 c0       	rjmp	.+98     	; 0x877e <si5351_set_freq+0x292>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    871c:	8d 85       	ldd	r24, Y+13	; 0x0d
    871e:	88 23       	and	r24, r24
    8720:	61 f0       	breq	.+24     	; 0x873a <si5351_set_freq+0x24e>
			{
 				data[0] = 0x6C;
    8722:	8c e6       	ldi	r24, 0x6C	; 108
    8724:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    8726:	41 e0       	ldi	r20, 0x01	; 1
    8728:	be 01       	movw	r22, r28
    872a:	61 5f       	subi	r22, 0xF1	; 241
    872c:	7f 4f       	sbci	r23, 0xFF	; 255
    872e:	86 2d       	mov	r24, r6
    8730:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    8734:	88 23       	and	r24, r24
    8736:	61 f0       	breq	.+24     	; 0x8750 <si5351_set_freq+0x264>
    8738:	1f c0       	rjmp	.+62     	; 0x8778 <si5351_set_freq+0x28c>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    873a:	8c e2       	ldi	r24, 0x2C	; 44
    873c:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    873e:	41 e0       	ldi	r20, 0x01	; 1
    8740:	be 01       	movw	r22, r28
    8742:	61 5f       	subi	r22, 0xF1	; 241
    8744:	7f 4f       	sbci	r23, 0xFF	; 255
    8746:	86 2d       	mov	r24, r6
    8748:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_Z17si5351_write_bulkhPhh>
    874c:	81 11       	cpse	r24, r1
    874e:	16 c0       	rjmp	.+44     	; 0x877c <si5351_set_freq+0x290>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    8750:	21 14       	cp	r2, r1
    8752:	31 04       	cpc	r3, r1
    8754:	41 04       	cpc	r4, r1
    8756:	51 04       	cpc	r5, r1
    8758:	91 f0       	breq	.+36     	; 0x877e <si5351_set_freq+0x292>
			{
				freqVCOB = freq_VCO;
    875a:	20 92 86 4a 	sts	0x4A86, r2	; 0x804a86 <_ZL8freqVCOB>
    875e:	30 92 87 4a 	sts	0x4A87, r3	; 0x804a87 <_ZL8freqVCOB+0x1>
    8762:	40 92 88 4a 	sts	0x4A88, r4	; 0x804a88 <_ZL8freqVCOB+0x2>
    8766:	50 92 89 4a 	sts	0x4A89, r5	; 0x804a89 <_ZL8freqVCOB+0x3>
    876a:	09 c0       	rjmp	.+18     	; 0x877e <si5351_set_freq+0x292>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    876c:	11 e0       	ldi	r17, 0x01	; 1
    876e:	07 c0       	rjmp	.+14     	; 0x877e <si5351_set_freq+0x292>
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    8770:	18 2f       	mov	r17, r24
    8772:	05 c0       	rjmp	.+10     	; 0x877e <si5351_set_freq+0x292>
		else
		{
 			data[0] = ~enabledClocksMask;
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
			{
				return true;
    8774:	18 2f       	mov	r17, r24
    8776:	03 c0       	rjmp	.+6      	; 0x877e <si5351_set_freq+0x292>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    8778:	18 2f       	mov	r17, r24
    877a:	01 c0       	rjmp	.+2      	; 0x877e <si5351_set_freq+0x292>
			else
			{
 				data[0] = 0x2C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    877c:	18 2f       	mov	r17, r24
				freqVCOB = freq_VCO;
			}
		}

		return(false);
	}
    877e:	81 2f       	mov	r24, r17
    8780:	60 96       	adiw	r28, 0x10	; 16
    8782:	cd bf       	out	0x3d, r28	; 61
    8784:	de bf       	out	0x3e, r29	; 62
    8786:	df 91       	pop	r29
    8788:	cf 91       	pop	r28
    878a:	1f 91       	pop	r17
    878c:	0f 91       	pop	r16
    878e:	ff 90       	pop	r15
    8790:	ef 90       	pop	r14
    8792:	df 90       	pop	r13
    8794:	cf 90       	pop	r12
    8796:	bf 90       	pop	r11
    8798:	af 90       	pop	r10
    879a:	9f 90       	pop	r9
    879c:	8f 90       	pop	r8
    879e:	7f 90       	pop	r7
    87a0:	6f 90       	pop	r6
    87a2:	5f 90       	pop	r5
    87a4:	4f 90       	pop	r4
    87a6:	3f 90       	pop	r3
    87a8:	2f 90       	pop	r2
    87aa:	08 95       	ret

000087ac <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    87ac:	80 e0       	ldi	r24, 0x00	; 0
    87ae:	08 95       	ret

000087b0 <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    87b0:	e0 e0       	ldi	r30, 0x00	; 0
    87b2:	fb e0       	ldi	r31, 0x0B	; 11
    87b4:	81 e0       	ldi	r24, 0x01	; 1
    87b6:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    87b8:	20 e4       	ldi	r18, 0x40	; 64
    87ba:	3c e9       	ldi	r19, 0x9C	; 156
    87bc:	24 87       	std	Z+12, r18	; 0x0c
    87be:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    87c0:	93 e0       	ldi	r25, 0x03	; 3
    87c2:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    87c4:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    87c6:	e0 e1       	ldi	r30, 0x10	; 16
    87c8:	fb e0       	ldi	r31, 0x0B	; 11
    87ca:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    87cc:	40 ec       	ldi	r20, 0xC0	; 192
    87ce:	5d e5       	ldi	r21, 0x5D	; 93
    87d0:	44 87       	std	Z+12, r20	; 0x0c
    87d2:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    87d4:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    87d6:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    87d8:	e0 e3       	ldi	r30, 0x30	; 48
    87da:	fb e0       	ldi	r31, 0x0B	; 11
    87dc:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    87de:	24 87       	std	Z+12, r18	; 0x0c
    87e0:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    87e2:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    87e4:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    87e6:	80 e0       	ldi	r24, 0x00	; 0
    87e8:	08 95       	ret

000087ea <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    87ea:	0f 93       	push	r16
    87ec:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    87ee:	61 15       	cp	r22, r1
    87f0:	71 05       	cpc	r23, r1
    87f2:	81 05       	cpc	r24, r1
    87f4:	91 05       	cpc	r25, r1
    87f6:	09 f4       	brne	.+2      	; 0x87fa <util_delay_ms+0x10>
    87f8:	67 c0       	rjmp	.+206    	; 0x88c8 <util_delay_ms+0xde>
	{
		if(counting)
    87fa:	20 91 8e 4a 	lds	r18, 0x4A8E	; 0x804a8e <_ZZ13util_delay_msE8counting>
    87fe:	22 23       	and	r18, r18
    8800:	f1 f1       	breq	.+124    	; 0x887e <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    8802:	00 91 8f 4a 	lds	r16, 0x4A8F	; 0x804a8f <_ZL12g_ms_counter>
    8806:	10 91 90 4a 	lds	r17, 0x4A90	; 0x804a90 <_ZL12g_ms_counter+0x1>
    880a:	20 91 91 4a 	lds	r18, 0x4A91	; 0x804a91 <_ZL12g_ms_counter+0x2>
    880e:	30 91 92 4a 	lds	r19, 0x4A92	; 0x804a92 <_ZL12g_ms_counter+0x3>
    8812:	01 2b       	or	r16, r17
    8814:	02 2b       	or	r16, r18
    8816:	03 2b       	or	r16, r19
    8818:	71 f4       	brne	.+28     	; 0x8836 <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    881a:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    881e:	10 92 8e 4a 	sts	0x4A8E, r1	; 0x804a8e <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    8822:	10 92 8a 4a 	sts	0x4A8A, r1	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    8826:	10 92 8b 4a 	sts	0x4A8B, r1	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    882a:	10 92 8c 4a 	sts	0x4A8C, r1	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    882e:	10 92 8d 4a 	sts	0x4A8D, r1	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    8832:	80 e0       	ldi	r24, 0x00	; 0
    8834:	62 c0       	rjmp	.+196    	; 0x88fa <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    8836:	00 91 8a 4a 	lds	r16, 0x4A8A	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    883a:	10 91 8b 4a 	lds	r17, 0x4A8B	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    883e:	20 91 8c 4a 	lds	r18, 0x4A8C	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    8842:	30 91 8d 4a 	lds	r19, 0x4A8D	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
    8846:	60 17       	cp	r22, r16
    8848:	71 07       	cpc	r23, r17
    884a:	82 07       	cpc	r24, r18
    884c:	93 07       	cpc	r25, r19
    884e:	09 f4       	brne	.+2      	; 0x8852 <util_delay_ms+0x68>
    8850:	51 c0       	rjmp	.+162    	; 0x88f4 <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    8852:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    8856:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    885a:	60 93 8a 4a 	sts	0x4A8A, r22	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    885e:	70 93 8b 4a 	sts	0x4A8B, r23	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    8862:	80 93 8c 4a 	sts	0x4A8C, r24	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    8866:	90 93 8d 4a 	sts	0x4A8D, r25	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    886a:	60 93 8f 4a 	sts	0x4A8F, r22	; 0x804a8f <_ZL12g_ms_counter>
    886e:	70 93 90 4a 	sts	0x4A90, r23	; 0x804a90 <_ZL12g_ms_counter+0x1>
    8872:	80 93 91 4a 	sts	0x4A91, r24	; 0x804a91 <_ZL12g_ms_counter+0x2>
    8876:	90 93 92 4a 	sts	0x4A92, r25	; 0x804a92 <_ZL12g_ms_counter+0x3>
				return(false);
    887a:	80 e0       	ldi	r24, 0x00	; 0
    887c:	3e c0       	rjmp	.+124    	; 0x88fa <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    887e:	00 91 8a 4a 	lds	r16, 0x4A8A	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    8882:	10 91 8b 4a 	lds	r17, 0x4A8B	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    8886:	20 91 8c 4a 	lds	r18, 0x4A8C	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    888a:	30 91 8d 4a 	lds	r19, 0x4A8D	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
    888e:	60 17       	cp	r22, r16
    8890:	71 07       	cpc	r23, r17
    8892:	82 07       	cpc	r24, r18
    8894:	93 07       	cpc	r25, r19
    8896:	71 f1       	breq	.+92     	; 0x88f4 <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    8898:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    889c:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    88a0:	60 93 8a 4a 	sts	0x4A8A, r22	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    88a4:	70 93 8b 4a 	sts	0x4A8B, r23	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    88a8:	80 93 8c 4a 	sts	0x4A8C, r24	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    88ac:	90 93 8d 4a 	sts	0x4A8D, r25	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    88b0:	60 93 8f 4a 	sts	0x4A8F, r22	; 0x804a8f <_ZL12g_ms_counter>
    88b4:	70 93 90 4a 	sts	0x4A90, r23	; 0x804a90 <_ZL12g_ms_counter+0x1>
    88b8:	80 93 91 4a 	sts	0x4A91, r24	; 0x804a91 <_ZL12g_ms_counter+0x2>
    88bc:	90 93 92 4a 	sts	0x4A92, r25	; 0x804a92 <_ZL12g_ms_counter+0x3>
			counting = true;
    88c0:	81 e0       	ldi	r24, 0x01	; 1
    88c2:	80 93 8e 4a 	sts	0x4A8E, r24	; 0x804a8e <_ZZ13util_delay_msE8counting>
    88c6:	16 c0       	rjmp	.+44     	; 0x88f4 <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    88c8:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    88cc:	10 92 8e 4a 	sts	0x4A8E, r1	; 0x804a8e <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    88d0:	10 92 8a 4a 	sts	0x4A8A, r1	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    88d4:	10 92 8b 4a 	sts	0x4A8B, r1	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    88d8:	10 92 8c 4a 	sts	0x4A8C, r1	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    88dc:	10 92 8d 4a 	sts	0x4A8D, r1	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    88e0:	10 92 8f 4a 	sts	0x4A8F, r1	; 0x804a8f <_ZL12g_ms_counter>
    88e4:	10 92 90 4a 	sts	0x4A90, r1	; 0x804a90 <_ZL12g_ms_counter+0x1>
    88e8:	10 92 91 4a 	sts	0x4A91, r1	; 0x804a91 <_ZL12g_ms_counter+0x2>
    88ec:	10 92 92 4a 	sts	0x4A92, r1	; 0x804a92 <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    88f0:	80 e0       	ldi	r24, 0x00	; 0
    88f2:	03 c0       	rjmp	.+6      	; 0x88fa <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    88f4:	81 e0       	ldi	r24, 0x01	; 1
    88f6:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    88fa:	1f 91       	pop	r17
    88fc:	0f 91       	pop	r16
    88fe:	08 95       	ret

00008900 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    8900:	1f 92       	push	r1
    8902:	0f 92       	push	r0
    8904:	0f b6       	in	r0, 0x3f	; 63
    8906:	0f 92       	push	r0
    8908:	11 24       	eor	r1, r1
    890a:	8f 93       	push	r24
    890c:	9f 93       	push	r25
    890e:	af 93       	push	r26
    8910:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    8912:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    8916:	80 ff       	sbrs	r24, 0
    8918:	1d c0       	rjmp	.+58     	; 0x8954 <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    891a:	80 91 8f 4a 	lds	r24, 0x4A8F	; 0x804a8f <_ZL12g_ms_counter>
    891e:	90 91 90 4a 	lds	r25, 0x4A90	; 0x804a90 <_ZL12g_ms_counter+0x1>
    8922:	a0 91 91 4a 	lds	r26, 0x4A91	; 0x804a91 <_ZL12g_ms_counter+0x2>
    8926:	b0 91 92 4a 	lds	r27, 0x4A92	; 0x804a92 <_ZL12g_ms_counter+0x3>
    892a:	00 97       	sbiw	r24, 0x00	; 0
    892c:	a1 05       	cpc	r26, r1
    892e:	b1 05       	cpc	r27, r1
    8930:	61 f0       	breq	.+24     	; 0x894a <__vector_13+0x4a>
		{
			g_ms_counter--;	
    8932:	01 97       	sbiw	r24, 0x01	; 1
    8934:	a1 09       	sbc	r26, r1
    8936:	b1 09       	sbc	r27, r1
    8938:	80 93 8f 4a 	sts	0x4A8F, r24	; 0x804a8f <_ZL12g_ms_counter>
    893c:	90 93 90 4a 	sts	0x4A90, r25	; 0x804a90 <_ZL12g_ms_counter+0x1>
    8940:	a0 93 91 4a 	sts	0x4A91, r26	; 0x804a91 <_ZL12g_ms_counter+0x2>
    8944:	b0 93 92 4a 	sts	0x4A92, r27	; 0x804a92 <_ZL12g_ms_counter+0x3>
    8948:	02 c0       	rjmp	.+4      	; 0x894e <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    894a:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    894e:	81 e0       	ldi	r24, 0x01	; 1
    8950:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    8954:	bf 91       	pop	r27
    8956:	af 91       	pop	r26
    8958:	9f 91       	pop	r25
    895a:	8f 91       	pop	r24
    895c:	0f 90       	pop	r0
    895e:	0f be       	out	0x3f, r0	; 63
    8960:	0f 90       	pop	r0
    8962:	1f 90       	pop	r1
    8964:	18 95       	reti

00008966 <_Z14txSetFrequencyPmb>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
    8966:	0f 93       	push	r16
    8968:	1f 93       	push	r17
    896a:	cf 93       	push	r28
    896c:	df 93       	push	r29
    896e:	fc 01       	movw	r30, r24
    8970:	46 2f       	mov	r20, r22
		bool err = false;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    8972:	60 81       	ld	r22, Z
    8974:	71 81       	ldd	r23, Z+1	; 0x01
    8976:	82 81       	ldd	r24, Z+2	; 0x02
    8978:	93 81       	ldd	r25, Z+3	; 0x03
    897a:	8b 01       	movw	r16, r22
    897c:	9c 01       	movw	r18, r24
    897e:	01 5e       	subi	r16, 0xE1	; 225
    8980:	17 46       	sbci	r17, 0x67	; 103
    8982:	25 43       	sbci	r18, 0x35	; 53
    8984:	31 09       	sbc	r19, r1
    8986:	0f 31       	cpi	r16, 0x1F	; 31
    8988:	11 4a       	sbci	r17, 0xA1	; 161
    898a:	27 40       	sbci	r18, 0x07	; 7
    898c:	31 05       	cpc	r19, r1
    898e:	a8 f4       	brcc	.+42     	; 0x89ba <_Z14txSetFrequencyPmb+0x54>
    8990:	24 2f       	mov	r18, r20
    8992:	ef 01       	movw	r28, r30
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
    8994:	41 e0       	ldi	r20, 0x01	; 1
    8996:	0e 94 76 42 	call	0x84ec	; 0x84ec <si5351_set_freq>
    899a:	81 11       	cpse	r24, r1
    899c:	10 c0       	rjmp	.+32     	; 0x89be <_Z14txSetFrequencyPmb+0x58>
			{
				err = true; 
			}
			else
			{
				g_80m_frequency = *freq;
    899e:	88 81       	ld	r24, Y
    89a0:	99 81       	ldd	r25, Y+1	; 0x01
    89a2:	aa 81       	ldd	r26, Y+2	; 0x02
    89a4:	bb 81       	ldd	r27, Y+3	; 0x03
    89a6:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    89aa:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    89ae:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    89b2:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
		bool err = false;
    89b6:	80 e0       	ldi	r24, 0x00	; 0
    89b8:	03 c0       	rjmp	.+6      	; 0x89c0 <_Z14txSetFrequencyPmb+0x5a>
    89ba:	80 e0       	ldi	r24, 0x00	; 0
    89bc:	01 c0       	rjmp	.+2      	; 0x89c0 <_Z14txSetFrequencyPmb+0x5a>

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
			{
				err = true; 
    89be:	81 e0       	ldi	r24, 0x01	; 1
				g_80m_frequency = *freq;
			}
		}

		return(err);
	}
    89c0:	df 91       	pop	r29
    89c2:	cf 91       	pop	r28
    89c4:	1f 91       	pop	r17
    89c6:	0f 91       	pop	r16
    89c8:	08 95       	ret

000089ca <_Z14txGetFrequencyv>:

	Frequency_Hz txGetFrequency(void)
	{
		return( g_80m_frequency);
    89ca:	60 91 2c 40 	lds	r22, 0x402C	; 0x80402c <g_80m_frequency>
    89ce:	70 91 2d 40 	lds	r23, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    89d2:	80 91 2e 40 	lds	r24, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    89d6:	90 91 2f 40 	lds	r25, 0x402F	; 0x80402f <g_80m_frequency+0x3>
	}
    89da:	08 95       	ret

000089dc <_Z18powerToTransmitterb>:

	EC powerToTransmitter(bool on)
	{
		fet_driver(on);
    89dc:	0e 94 55 29 	call	0x52aa	; 0x52aa <_Z10fet_driverb>

		return(ERROR_CODE_NO_ERROR);
	}
    89e0:	80 e0       	ldi	r24, 0x00	; 0
    89e2:	08 95       	ret

000089e4 <_Z14keyTransmitterb>:

	void keyTransmitter(bool on)
	{
		if(g_tx_initialized)
    89e4:	90 91 93 4a 	lds	r25, 0x4A93	; 0x804a93 <_ZL16g_tx_initialized>
    89e8:	99 23       	and	r25, r25
    89ea:	c1 f0       	breq	.+48     	; 0x8a1c <_Z14keyTransmitterb+0x38>
		{			
			if(on)
    89ec:	88 23       	and	r24, r24
    89ee:	71 f0       	breq	.+28     	; 0x8a0c <_Z14keyTransmitterb+0x28>
			{
				if(!g_transmitter_keyed)
    89f0:	80 91 94 4a 	lds	r24, 0x4A94	; 0x804a94 <_ZL19g_transmitter_keyed>
    89f4:	81 11       	cpse	r24, r1
    89f6:	12 c0       	rjmp	.+36     	; 0x8a1c <_Z14keyTransmitterb+0x38>
				{
					if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED) == ERROR_CODE_NO_ERROR)
    89f8:	61 e0       	ldi	r22, 0x01	; 1
    89fa:	81 e0       	ldi	r24, 0x01	; 1
    89fc:	0e 94 ec 40 	call	0x81d8	; 0x81d8 <si5351_clock_enable>
    8a00:	81 11       	cpse	r24, r1
    8a02:	0c c0       	rjmp	.+24     	; 0x8a1c <_Z14keyTransmitterb+0x38>
					{
						g_transmitter_keyed = true;
    8a04:	81 e0       	ldi	r24, 0x01	; 1
    8a06:	80 93 94 4a 	sts	0x4A94, r24	; 0x804a94 <_ZL19g_transmitter_keyed>
    8a0a:	08 95       	ret
					}
				}
			}
			else
			{
				if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED) == ERROR_CODE_NO_ERROR)
    8a0c:	60 e0       	ldi	r22, 0x00	; 0
    8a0e:	81 e0       	ldi	r24, 0x01	; 1
    8a10:	0e 94 ec 40 	call	0x81d8	; 0x81d8 <si5351_clock_enable>
    8a14:	81 11       	cpse	r24, r1
    8a16:	02 c0       	rjmp	.+4      	; 0x8a1c <_Z14keyTransmitterb+0x38>
				{
					g_transmitter_keyed = false;
    8a18:	10 92 94 4a 	sts	0x4A94, r1	; 0x804a94 <_ZL19g_transmitter_keyed>
    8a1c:	08 95       	ret

00008a1e <_Z12txGetPowerMwv>:
		}
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
    8a1e:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    8a22:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
	}
    8a26:	08 95       	ret

00008a28 <_Z15txSetParametersPjPb>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, bool* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, bool* enableDriverPwr) */
	{
    8a28:	cf 93       	push	r28
    8a2a:	df 93       	push	r29
    8a2c:	cd b7       	in	r28, 0x3d	; 61
    8a2e:	de b7       	in	r29, 0x3e	; 62
    8a30:	2b 97       	sbiw	r28, 0x0b	; 11
    8a32:	cd bf       	out	0x3d, r28	; 61
    8a34:	de bf       	out	0x3e, r29	; 62
    8a36:	88 87       	std	Y+8, r24	; 0x08
    8a38:	99 87       	std	Y+9, r25	; 0x09
    8a3a:	6a 87       	std	Y+10, r22	; 0x0a
    8a3c:	7b 87       	std	Y+11, r23	; 0x0b
		bool err = false;
    8a3e:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    8a40:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    8a42:	1b 82       	std	Y+3, r1	; 0x03
    8a44:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW != null)
    8a46:	88 85       	ldd	r24, Y+8	; 0x08
    8a48:	99 85       	ldd	r25, Y+9	; 0x09
    8a4a:	89 2b       	or	r24, r25
    8a4c:	09 f4       	brne	.+2      	; 0x8a50 <_Z15txSetParametersPjPb+0x28>
    8a4e:	64 c0       	rjmp	.+200    	; 0x8b18 <_Z15txSetParametersPjPb+0xf0>
		{
			power = *power_mW;
    8a50:	88 85       	ldd	r24, Y+8	; 0x08
    8a52:	99 85       	ldd	r25, Y+9	; 0x09
    8a54:	fc 01       	movw	r30, r24
    8a56:	80 81       	ld	r24, Z
    8a58:	91 81       	ldd	r25, Z+1	; 0x01
    8a5a:	8b 83       	std	Y+3, r24	; 0x03
    8a5c:	9c 83       	std	Y+4, r25	; 0x04

			if(power <= MAX_TX_POWER_80M_MW)
    8a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    8a60:	9c 81       	ldd	r25, Y+4	; 0x04
    8a62:	89 38       	cpi	r24, 0x89	; 137
    8a64:	93 41       	sbci	r25, 0x13	; 19
    8a66:	08 f0       	brcs	.+2      	; 0x8a6a <_Z15txSetParametersPjPb+0x42>
    8a68:	53 c0       	rjmp	.+166    	; 0x8b10 <_Z15txSetParametersPjPb+0xe8>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    8a6a:	9e 01       	movw	r18, r28
    8a6c:	29 5f       	subi	r18, 0xF9	; 249
    8a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    8a70:	ae 01       	movw	r20, r28
    8a72:	4a 5f       	subi	r20, 0xFA	; 250
    8a74:	5f 4f       	sbci	r21, 0xFF	; 255
    8a76:	be 01       	movw	r22, r28
    8a78:	6b 5f       	subi	r22, 0xFB	; 251
    8a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    8a7c:	ce 01       	movw	r24, r28
    8a7e:	03 96       	adiw	r24, 0x03	; 3
    8a80:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    8a84:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    8a86:	81 e0       	ldi	r24, 0x01	; 1
    8a88:	9a 81       	ldd	r25, Y+2	; 0x02
    8a8a:	9f 3c       	cpi	r25, 0xCF	; 207
    8a8c:	09 f0       	breq	.+2      	; 0x8a90 <_Z15txSetParametersPjPb+0x68>
    8a8e:	80 e0       	ldi	r24, 0x00	; 0
    8a90:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    8a92:	8b 81       	ldd	r24, Y+3	; 0x03
    8a94:	9c 81       	ldd	r25, Y+4	; 0x04
    8a96:	21 e0       	ldi	r18, 0x01	; 1
    8a98:	89 2b       	or	r24, r25
    8a9a:	09 f0       	breq	.+2      	; 0x8a9e <_Z15txSetParametersPjPb+0x76>
    8a9c:	20 e0       	ldi	r18, 0x00	; 0
    8a9e:	20 93 36 40 	sts	0x4036, r18	; 0x804036 <g_tx_power_is_zero>

				if(!err)
    8aa2:	99 81       	ldd	r25, Y+1	; 0x01
    8aa4:	81 e0       	ldi	r24, 0x01	; 1
    8aa6:	89 27       	eor	r24, r25
    8aa8:	88 23       	and	r24, r24
    8aaa:	51 f1       	breq	.+84     	; 0x8b00 <_Z15txSetParametersPjPb+0xd8>
				{
					g_80m_power_level_mW = power;
    8aac:	8b 81       	ldd	r24, Y+3	; 0x03
    8aae:	9c 81       	ldd	r25, Y+4	; 0x04
    8ab0:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    8ab4:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    8ab8:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <_Z18txIsAntennaForBandv>
    8abc:	88 23       	and	r24, r24
    8abe:	31 f0       	breq	.+12     	; 0x8acc <_Z15txSetParametersPjPb+0xa4>
					{
						DAC0_setVal(drainVoltageDAC);
    8ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    8ac2:	88 2f       	mov	r24, r24
    8ac4:	90 e0       	ldi	r25, 0x00	; 0
    8ac6:	0e 94 8e 2a 	call	0x551c	; 0x551c <_Z11DAC0_setValj>
    8aca:	07 c0       	rjmp	.+14     	; 0x8ada <_Z15txSetParametersPjPb+0xb2>
					}
					else
					{
						g_tx_power_is_zero = true;
    8acc:	81 e0       	ldi	r24, 0x01	; 1
    8ace:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>
						err = true;
    8ad2:	81 e0       	ldi	r24, 0x01	; 1
    8ad4:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    8ad6:	86 ef       	ldi	r24, 0xF6	; 246
    8ad8:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || (drainVoltageDAC == 0))
    8ada:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    8ade:	88 23       	and	r24, r24
    8ae0:	19 f4       	brne	.+6      	; 0x8ae8 <_Z15txSetParametersPjPb+0xc0>
    8ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    8ae4:	88 23       	and	r24, r24
    8ae6:	11 f4       	brne	.+4      	; 0x8aec <_Z15txSetParametersPjPb+0xc4>
    8ae8:	81 e0       	ldi	r24, 0x01	; 1
    8aea:	01 c0       	rjmp	.+2      	; 0x8aee <_Z15txSetParametersPjPb+0xc6>
    8aec:	80 e0       	ldi	r24, 0x00	; 0
    8aee:	88 23       	and	r24, r24
    8af0:	21 f0       	breq	.+8      	; 0x8afa <_Z15txSetParametersPjPb+0xd2>
					{
						powerToTransmitter(OFF); /* Turn off FET driver */
    8af2:	80 e0       	ldi	r24, 0x00	; 0
    8af4:	0e 94 ee 44 	call	0x89dc	; 0x89dc <_Z18powerToTransmitterb>
    8af8:	03 c0       	rjmp	.+6      	; 0x8b00 <_Z15txSetParametersPjPb+0xd8>
					}
					else
					{
						powerToTransmitter(ON); /* Turn on FET driver */
    8afa:	81 e0       	ldi	r24, 0x01	; 1
    8afc:	0e 94 ee 44 	call	0x89dc	; 0x89dc <_Z18powerToTransmitterb>
					}
				}

				*power_mW = power;
    8b00:	2b 81       	ldd	r18, Y+3	; 0x03
    8b02:	3c 81       	ldd	r19, Y+4	; 0x04
    8b04:	88 85       	ldd	r24, Y+8	; 0x08
    8b06:	99 85       	ldd	r25, Y+9	; 0x09
    8b08:	fc 01       	movw	r30, r24
    8b0a:	20 83       	st	Z, r18
    8b0c:	31 83       	std	Z+1, r19	; 0x01
    8b0e:	04 c0       	rjmp	.+8      	; 0x8b18 <_Z15txSetParametersPjPb+0xf0>
			}
			else
			{
				err = true;
    8b10:	81 e0       	ldi	r24, 0x01	; 1
    8b12:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8b14:	85 ef       	ldi	r24, 0xF5	; 245
    8b16:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    8b18:	99 81       	ldd	r25, Y+1	; 0x01
    8b1a:	81 e0       	ldi	r24, 0x01	; 1
    8b1c:	89 27       	eor	r24, r25
    8b1e:	88 23       	and	r24, r24
    8b20:	51 f0       	breq	.+20     	; 0x8b36 <_Z15txSetParametersPjPb+0x10e>
		{
			if(enableDriverPwr != NULL)
    8b22:	8a 85       	ldd	r24, Y+10	; 0x0a
    8b24:	9b 85       	ldd	r25, Y+11	; 0x0b
    8b26:	89 2b       	or	r24, r25
    8b28:	31 f0       	breq	.+12     	; 0x8b36 <_Z15txSetParametersPjPb+0x10e>
			{
				powerToTransmitter(*enableDriverPwr);
    8b2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    8b2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    8b2e:	fc 01       	movw	r30, r24
    8b30:	80 81       	ld	r24, Z
    8b32:	0e 94 ee 44 	call	0x89dc	; 0x89dc <_Z18powerToTransmitterb>
			}
		}

		return(code);
    8b36:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    8b38:	2b 96       	adiw	r28, 0x0b	; 11
    8b3a:	cd bf       	out	0x3d, r28	; 61
    8b3c:	de bf       	out	0x3e, r29	; 62
    8b3e:	df 91       	pop	r29
    8b40:	cf 91       	pop	r28
    8b42:	08 95       	ret

00008b44 <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    8b44:	1f 93       	push	r17
    8b46:	cf 93       	push	r28
    8b48:	df 93       	push	r29
    8b4a:	00 d0       	rcall	.+0      	; 0x8b4c <_Z16init_transmitterv+0x8>
    8b4c:	cd b7       	in	r28, 0x3d	; 61
    8b4e:	de b7       	in	r29, 0x3e	; 62
		EC code;
		bool err;
		
		DAC0_init();
    8b50:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_Z9DAC0_initv>

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    8b54:	40 e0       	ldi	r20, 0x00	; 0
    8b56:	50 e0       	ldi	r21, 0x00	; 0
    8b58:	ba 01       	movw	r22, r20
    8b5a:	80 e4       	ldi	r24, 0x40	; 64
    8b5c:	0e 94 3a 40 	call	0x8074	; 0x8074 <si5351_init>
    8b60:	81 11       	cpse	r24, r1
    8b62:	2e c0       	rjmp	.+92     	; 0x8bc0 <_Z16init_transmitterv+0x7c>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
		}

		if((code = txSetParameters(NULL, NULL)))
    8b64:	60 e0       	ldi	r22, 0x00	; 0
    8b66:	70 e0       	ldi	r23, 0x00	; 0
    8b68:	80 e0       	ldi	r24, 0x00	; 0
    8b6a:	90 e0       	ldi	r25, 0x00	; 0
    8b6c:	0e 94 14 45 	call	0x8a28	; 0x8a28 <_Z15txSetParametersPjPb>
    8b70:	81 11       	cpse	r24, r1
    8b72:	2a c0       	rjmp	.+84     	; 0x8bc8 <_Z16init_transmitterv+0x84>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    8b74:	63 e0       	ldi	r22, 0x03	; 3
    8b76:	81 e0       	ldi	r24, 0x01	; 1
    8b78:	0e 94 2b 41 	call	0x8256	; 0x8256 <si5351_drive_strength>
    8b7c:	81 11       	cpse	r24, r1
    8b7e:	24 c0       	rjmp	.+72     	; 0x8bc8 <_Z16init_transmitterv+0x84>
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8b80:	60 e0       	ldi	r22, 0x00	; 0
    8b82:	81 e0       	ldi	r24, 0x01	; 1
    8b84:	0e 94 ec 40 	call	0x81d8	; 0x81d8 <si5351_clock_enable>
    8b88:	18 2f       	mov	r17, r24
    8b8a:	81 11       	cpse	r24, r1
    8b8c:	1b c0       	rjmp	.+54     	; 0x8bc4 <_Z16init_transmitterv+0x80>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    8b8e:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    8b92:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    8b96:	89 83       	std	Y+1, r24	; 0x01
    8b98:	9a 83       	std	Y+2, r25	; 0x02
		
		err = txSetFrequency((Frequency_Hz*)&g_80m_frequency, true);
    8b9a:	61 e0       	ldi	r22, 0x01	; 1
    8b9c:	8c e2       	ldi	r24, 0x2C	; 44
    8b9e:	90 e4       	ldi	r25, 0x40	; 64
    8ba0:	0e 94 b3 44 	call	0x8966	; 0x8966 <_Z14txSetFrequencyPmb>
		if(!err)
    8ba4:	81 11       	cpse	r24, r1
    8ba6:	0f c0       	rjmp	.+30     	; 0x8bc6 <_Z16init_transmitterv+0x82>
		{
			code = txSetParameters(&pwr_mW, NULL);
    8ba8:	60 e0       	ldi	r22, 0x00	; 0
    8baa:	70 e0       	ldi	r23, 0x00	; 0
    8bac:	ce 01       	movw	r24, r28
    8bae:	01 96       	adiw	r24, 0x01	; 1
    8bb0:	0e 94 14 45 	call	0x8a28	; 0x8a28 <_Z15txSetParametersPjPb>
			if(code == ERROR_CODE_NO_ERROR)
    8bb4:	81 11       	cpse	r24, r1
    8bb6:	08 c0       	rjmp	.+16     	; 0x8bc8 <_Z16init_transmitterv+0x84>
			{
				g_tx_initialized = true;
    8bb8:	91 e0       	ldi	r25, 0x01	; 1
    8bba:	90 93 93 4a 	sts	0x4A93, r25	; 0x804a93 <_ZL16g_tx_initialized>
    8bbe:	04 c0       	rjmp	.+8      	; 0x8bc8 <_Z16init_transmitterv+0x84>
		
		DAC0_init();

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
    8bc0:	82 ed       	ldi	r24, 0xD2	; 210
    8bc2:	02 c0       	rjmp	.+4      	; 0x8bc8 <_Z16init_transmitterv+0x84>
    8bc4:	01 c0       	rjmp	.+2      	; 0x8bc8 <_Z16init_transmitterv+0x84>
		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8bc6:	81 2f       	mov	r24, r17
				g_tx_initialized = true;
			}
		}

		return( code);
	}
    8bc8:	0f 90       	pop	r0
    8bca:	0f 90       	pop	r0
    8bcc:	df 91       	pop	r29
    8bce:	cf 91       	pop	r28
    8bd0:	1f 91       	pop	r17
    8bd2:	08 95       	ret

00008bd4 <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    8bd4:	cf 93       	push	r28
    8bd6:	df 93       	push	r29
    8bd8:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    8bda:	89 2b       	or	r24, r25
    8bdc:	09 f4       	brne	.+2      	; 0x8be0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    8bde:	b8 c0       	rjmp	.+368    	; 0x8d50 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    8be0:	ed 91       	ld	r30, X+
    8be2:	fc 91       	ld	r31, X
    8be4:	11 97       	sbiw	r26, 0x01	; 1
    8be6:	e9 38       	cpi	r30, 0x89	; 137
    8be8:	83 e1       	ldi	r24, 0x13	; 19
    8bea:	f8 07       	cpc	r31, r24
    8bec:	14 f4       	brge	.+4      	; 0x8bf2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    8bee:	80 e0       	ldi	r24, 0x00	; 0
    8bf0:	01 c0       	rjmp	.+2      	; 0x8bf4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8bf2:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    8bf4:	e9 38       	cpi	r30, 0x89	; 137
    8bf6:	93 e1       	ldi	r25, 0x13	; 19
    8bf8:	f9 07       	cpc	r31, r25
    8bfa:	2c f4       	brge	.+10     	; 0x8c06 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    8bfc:	ff 23       	and	r31, r31
    8bfe:	2c f4       	brge	.+10     	; 0x8c0a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8c00:	e0 e0       	ldi	r30, 0x00	; 0
    8c02:	f0 e0       	ldi	r31, 0x00	; 0
    8c04:	02 c0       	rjmp	.+4      	; 0x8c0a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8c06:	e8 e8       	ldi	r30, 0x88	; 136
    8c08:	f3 e1       	ldi	r31, 0x13	; 19
    8c0a:	ef 01       	movw	r28, r30
    8c0c:	ed 93       	st	X+, r30
    8c0e:	fc 93       	st	X, r31
    8c10:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    8c12:	e5 30       	cpi	r30, 0x05	; 5
    8c14:	f1 05       	cpc	r31, r1
    8c16:	20 f4       	brcc	.+8      	; 0x8c20 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    8c18:	1d 92       	st	X+, r1
    8c1a:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    8c1c:	e0 e0       	ldi	r30, 0x00	; 0
    8c1e:	8d c0       	rjmp	.+282    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    8c20:	e2 33       	cpi	r30, 0x32	; 50
    8c22:	f1 05       	cpc	r31, r1
    8c24:	30 f4       	brcc	.+12     	; 0x8c32 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    8c26:	ea e0       	ldi	r30, 0x0A	; 10
    8c28:	f0 e0       	ldi	r31, 0x00	; 0
    8c2a:	ed 93       	st	X+, r30
    8c2c:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    8c2e:	e1 e0       	ldi	r30, 0x01	; 1
    8c30:	84 c0       	rjmp	.+264    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    8c32:	e6 39       	cpi	r30, 0x96	; 150
    8c34:	f1 05       	cpc	r31, r1
    8c36:	30 f4       	brcc	.+12     	; 0x8c44 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    8c38:	e4 e6       	ldi	r30, 0x64	; 100
    8c3a:	f0 e0       	ldi	r31, 0x00	; 0
    8c3c:	ed 93       	st	X+, r30
    8c3e:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    8c40:	e2 e0       	ldi	r30, 0x02	; 2
    8c42:	7b c0       	rjmp	.+246    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    8c44:	ea 3f       	cpi	r30, 0xFA	; 250
    8c46:	f1 05       	cpc	r31, r1
    8c48:	30 f4       	brcc	.+12     	; 0x8c56 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    8c4a:	e8 ec       	ldi	r30, 0xC8	; 200
    8c4c:	f0 e0       	ldi	r31, 0x00	; 0
    8c4e:	ed 93       	st	X+, r30
    8c50:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    8c52:	e3 e0       	ldi	r30, 0x03	; 3
    8c54:	72 c0       	rjmp	.+228    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    8c56:	ce 35       	cpi	r28, 0x5E	; 94
    8c58:	e1 e0       	ldi	r30, 0x01	; 1
    8c5a:	de 07       	cpc	r29, r30
    8c5c:	30 f4       	brcc	.+12     	; 0x8c6a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    8c5e:	ec e2       	ldi	r30, 0x2C	; 44
    8c60:	f1 e0       	ldi	r31, 0x01	; 1
    8c62:	ed 93       	st	X+, r30
    8c64:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    8c66:	e4 e0       	ldi	r30, 0x04	; 4
    8c68:	68 c0       	rjmp	.+208    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    8c6a:	c2 3c       	cpi	r28, 0xC2	; 194
    8c6c:	f1 e0       	ldi	r31, 0x01	; 1
    8c6e:	df 07       	cpc	r29, r31
    8c70:	30 f4       	brcc	.+12     	; 0x8c7e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    8c72:	e0 e9       	ldi	r30, 0x90	; 144
    8c74:	f1 e0       	ldi	r31, 0x01	; 1
    8c76:	ed 93       	st	X+, r30
    8c78:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    8c7a:	e5 e0       	ldi	r30, 0x05	; 5
    8c7c:	5e c0       	rjmp	.+188    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    8c7e:	c6 32       	cpi	r28, 0x26	; 38
    8c80:	92 e0       	ldi	r25, 0x02	; 2
    8c82:	d9 07       	cpc	r29, r25
    8c84:	30 f4       	brcc	.+12     	; 0x8c92 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    8c86:	e4 ef       	ldi	r30, 0xF4	; 244
    8c88:	f1 e0       	ldi	r31, 0x01	; 1
    8c8a:	ed 93       	st	X+, r30
    8c8c:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    8c8e:	e6 e0       	ldi	r30, 0x06	; 6
    8c90:	54 c0       	rjmp	.+168    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    8c92:	ca 38       	cpi	r28, 0x8A	; 138
    8c94:	e2 e0       	ldi	r30, 0x02	; 2
    8c96:	de 07       	cpc	r29, r30
    8c98:	30 f4       	brcc	.+12     	; 0x8ca6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    8c9a:	e8 e5       	ldi	r30, 0x58	; 88
    8c9c:	f2 e0       	ldi	r31, 0x02	; 2
    8c9e:	ed 93       	st	X+, r30
    8ca0:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    8ca2:	e7 e0       	ldi	r30, 0x07	; 7
    8ca4:	4a c0       	rjmp	.+148    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    8ca6:	c4 38       	cpi	r28, 0x84	; 132
    8ca8:	f3 e0       	ldi	r31, 0x03	; 3
    8caa:	df 07       	cpc	r29, r31
    8cac:	30 f4       	brcc	.+12     	; 0x8cba <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    8cae:	e0 e2       	ldi	r30, 0x20	; 32
    8cb0:	f3 e0       	ldi	r31, 0x03	; 3
    8cb2:	ed 93       	st	X+, r30
    8cb4:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    8cb6:	e8 e0       	ldi	r30, 0x08	; 8
    8cb8:	40 c0       	rjmp	.+128    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    8cba:	c2 3e       	cpi	r28, 0xE2	; 226
    8cbc:	94 e0       	ldi	r25, 0x04	; 4
    8cbe:	d9 07       	cpc	r29, r25
    8cc0:	30 f4       	brcc	.+12     	; 0x8cce <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    8cc2:	e8 ee       	ldi	r30, 0xE8	; 232
    8cc4:	f3 e0       	ldi	r31, 0x03	; 3
    8cc6:	ed 93       	st	X+, r30
    8cc8:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    8cca:	e9 e0       	ldi	r30, 0x09	; 9
    8ccc:	36 c0       	rjmp	.+108    	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    8cce:	c6 3d       	cpi	r28, 0xD6	; 214
    8cd0:	e6 e0       	ldi	r30, 0x06	; 6
    8cd2:	de 07       	cpc	r29, r30
    8cd4:	30 f4       	brcc	.+12     	; 0x8ce2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    8cd6:	ec ed       	ldi	r30, 0xDC	; 220
    8cd8:	f5 e0       	ldi	r31, 0x05	; 5
    8cda:	ed 93       	st	X+, r30
    8cdc:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    8cde:	ea e0       	ldi	r30, 0x0A	; 10
    8ce0:	2c c0       	rjmp	.+88     	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    8ce2:	ca 3c       	cpi	r28, 0xCA	; 202
    8ce4:	f8 e0       	ldi	r31, 0x08	; 8
    8ce6:	df 07       	cpc	r29, r31
    8ce8:	30 f4       	brcc	.+12     	; 0x8cf6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    8cea:	e0 ed       	ldi	r30, 0xD0	; 208
    8cec:	f7 e0       	ldi	r31, 0x07	; 7
    8cee:	ed 93       	st	X+, r30
    8cf0:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    8cf2:	eb e0       	ldi	r30, 0x0B	; 11
    8cf4:	22 c0       	rjmp	.+68     	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    8cf6:	ce 3b       	cpi	r28, 0xBE	; 190
    8cf8:	9a e0       	ldi	r25, 0x0A	; 10
    8cfa:	d9 07       	cpc	r29, r25
    8cfc:	30 f4       	brcc	.+12     	; 0x8d0a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    8cfe:	e4 ec       	ldi	r30, 0xC4	; 196
    8d00:	f9 e0       	ldi	r31, 0x09	; 9
    8d02:	ed 93       	st	X+, r30
    8d04:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    8d06:	ec e0       	ldi	r30, 0x0C	; 12
    8d08:	18 c0       	rjmp	.+48     	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    8d0a:	cc 3a       	cpi	r28, 0xAC	; 172
    8d0c:	ed e0       	ldi	r30, 0x0D	; 13
    8d0e:	de 07       	cpc	r29, r30
    8d10:	30 f4       	brcc	.+12     	; 0x8d1e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    8d12:	e8 eb       	ldi	r30, 0xB8	; 184
    8d14:	fb e0       	ldi	r31, 0x0B	; 11
    8d16:	ed 93       	st	X+, r30
    8d18:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    8d1a:	ed e0       	ldi	r30, 0x0D	; 13
    8d1c:	0e c0       	rjmp	.+28     	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    8d1e:	c4 39       	cpi	r28, 0x94	; 148
    8d20:	d1 41       	sbci	r29, 0x11	; 17
    8d22:	30 f4       	brcc	.+12     	; 0x8d30 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    8d24:	e0 ea       	ldi	r30, 0xA0	; 160
    8d26:	ff e0       	ldi	r31, 0x0F	; 15
    8d28:	ed 93       	st	X+, r30
    8d2a:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    8d2c:	ee e0       	ldi	r30, 0x0E	; 14
    8d2e:	05 c0       	rjmp	.+10     	; 0x8d3a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    8d30:	e8 e8       	ldi	r30, 0x88	; 136
    8d32:	f3 e1       	ldi	r31, 0x13	; 19
    8d34:	ed 93       	st	X+, r30
    8d36:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    8d38:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    8d3a:	f0 e0       	ldi	r31, 0x00	; 0
    8d3c:	e9 5c       	subi	r30, 0xC9	; 201
    8d3e:	ff 4b       	sbci	r31, 0xBF	; 191
    8d40:	90 81       	ld	r25, Z
    8d42:	fb 01       	movw	r30, r22
    8d44:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    8d46:	fa 01       	movw	r30, r20
    8d48:	10 82       	st	Z, r1
	*modLevelLow = 0;
    8d4a:	f9 01       	movw	r30, r18
    8d4c:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    8d4e:	01 c0       	rjmp	.+2      	; 0x8d52 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    8d50:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    8d52:	df 91       	pop	r29
    8d54:	cf 91       	pop	r28
    8d56:	08 95       	ret

00008d58 <_Z18txIsAntennaForBandv>:

/**
 */
bool __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    8d58:	cf 93       	push	r28
    8d5a:	df 93       	push	r29
    8d5c:	1f 92       	push	r1
    8d5e:	cd b7       	in	r28, 0x3d	; 61
    8d60:	de b7       	in	r29, 0x3e	; 62
	bool result = false;
    8d62:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    8d64:	80 91 27 47 	lds	r24, 0x4727	; 0x804727 <g_antenna_connect_state>
    8d68:	88 2f       	mov	r24, r24
    8d6a:	90 e0       	ldi	r25, 0x00	; 0
    8d6c:	02 97       	sbiw	r24, 0x02	; 2
    8d6e:	09 f0       	breq	.+2      	; 0x8d72 <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    8d70:	03 c0       	rjmp	.+6      	; 0x8d78 <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = true;
    8d72:	81 e0       	ldi	r24, 0x01	; 1
    8d74:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    8d76:	00 00       	nop

		}
		break;
	}

	return( result);
    8d78:	89 81       	ldd	r24, Y+1	; 0x01
}
    8d7a:	0f 90       	pop	r0
    8d7c:	df 91       	pop	r29
    8d7e:	cf 91       	pop	r28
    8d80:	08 95       	ret

00008d82 <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_enable_rx()
{
	USART4.CTRLB |= USART_RXEN_bm;
    8d82:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    8d86:	08 95       	ret

00008d88 <USART1_init>:
    8d88:	0e 94 b7 4a 	call	0x956e	; 0x956e <__floatunsisf>
    8d8c:	20 e0       	ldi	r18, 0x00	; 0
    8d8e:	30 e0       	ldi	r19, 0x00	; 0
    8d90:	40 e8       	ldi	r20, 0x80	; 128
    8d92:	51 e4       	ldi	r21, 0x41	; 65
    8d94:	0e 94 af 4b 	call	0x975e	; 0x975e <__mulsf3>
    8d98:	9b 01       	movw	r18, r22
    8d9a:	ac 01       	movw	r20, r24
    8d9c:	60 e0       	ldi	r22, 0x00	; 0
    8d9e:	74 e2       	ldi	r23, 0x24	; 36
    8da0:	84 e7       	ldi	r24, 0x74	; 116
    8da2:	9d e4       	ldi	r25, 0x4D	; 77
    8da4:	0e 94 0f 4a 	call	0x941e	; 0x941e <__divsf3>
    8da8:	20 e0       	ldi	r18, 0x00	; 0
    8daa:	30 e0       	ldi	r19, 0x00	; 0
    8dac:	40 e0       	ldi	r20, 0x00	; 0
    8dae:	5f e3       	ldi	r21, 0x3F	; 63
    8db0:	0e 94 87 49 	call	0x930e	; 0x930e <__addsf3>
    8db4:	0e 94 88 4a 	call	0x9510	; 0x9510 <__fixunssfsi>
    8db8:	e0 e2       	ldi	r30, 0x20	; 32
    8dba:	f8 e0       	ldi	r31, 0x08	; 8
    8dbc:	60 87       	std	Z+8, r22	; 0x08
    8dbe:	71 87       	std	Z+9, r23	; 0x09
    8dc0:	80 e8       	ldi	r24, 0x80	; 128
    8dc2:	85 83       	std	Z+5, r24	; 0x05
    8dc4:	80 ec       	ldi	r24, 0xC0	; 192
    8dc6:	86 83       	std	Z+6, r24	; 0x06
    8dc8:	80 e0       	ldi	r24, 0x00	; 0
    8dca:	08 95       	ret

00008dcc <USART1_enable_tx>:
    8dcc:	e0 e2       	ldi	r30, 0x20	; 32
    8dce:	f8 e0       	ldi	r31, 0x08	; 8
    8dd0:	86 81       	ldd	r24, Z+6	; 0x06
    8dd2:	80 64       	ori	r24, 0x40	; 64
    8dd4:	86 83       	std	Z+6, r24	; 0x06
    8dd6:	85 81       	ldd	r24, Z+5	; 0x05
    8dd8:	80 62       	ori	r24, 0x20	; 32
    8dda:	85 83       	std	Z+5, r24	; 0x05
    8ddc:	08 95       	ret

00008dde <USART1_disable>:
    8dde:	e0 e2       	ldi	r30, 0x20	; 32
    8de0:	f8 e0       	ldi	r31, 0x08	; 8
    8de2:	86 81       	ldd	r24, Z+6	; 0x06
    8de4:	8f 73       	andi	r24, 0x3F	; 63
    8de6:	86 83       	std	Z+6, r24	; 0x06
    8de8:	08 95       	ret

00008dea <USART1_get_data>:
    8dea:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    8dee:	08 95       	ret

00008df0 <USART4_init>:
    8df0:	0e 94 b7 4a 	call	0x956e	; 0x956e <__floatunsisf>
    8df4:	20 e0       	ldi	r18, 0x00	; 0
    8df6:	30 e0       	ldi	r19, 0x00	; 0
    8df8:	40 e8       	ldi	r20, 0x80	; 128
    8dfa:	51 e4       	ldi	r21, 0x41	; 65
    8dfc:	0e 94 af 4b 	call	0x975e	; 0x975e <__mulsf3>
    8e00:	9b 01       	movw	r18, r22
    8e02:	ac 01       	movw	r20, r24
    8e04:	60 e0       	ldi	r22, 0x00	; 0
    8e06:	74 e2       	ldi	r23, 0x24	; 36
    8e08:	84 e7       	ldi	r24, 0x74	; 116
    8e0a:	9d e4       	ldi	r25, 0x4D	; 77
    8e0c:	0e 94 0f 4a 	call	0x941e	; 0x941e <__divsf3>
    8e10:	20 e0       	ldi	r18, 0x00	; 0
    8e12:	30 e0       	ldi	r19, 0x00	; 0
    8e14:	40 e0       	ldi	r20, 0x00	; 0
    8e16:	5f e3       	ldi	r21, 0x3F	; 63
    8e18:	0e 94 87 49 	call	0x930e	; 0x930e <__addsf3>
    8e1c:	0e 94 88 4a 	call	0x9510	; 0x9510 <__fixunssfsi>
    8e20:	e0 e8       	ldi	r30, 0x80	; 128
    8e22:	f8 e0       	ldi	r31, 0x08	; 8
    8e24:	60 87       	std	Z+8, r22	; 0x08
    8e26:	71 87       	std	Z+9, r23	; 0x09
    8e28:	80 e8       	ldi	r24, 0x80	; 128
    8e2a:	85 83       	std	Z+5, r24	; 0x05
    8e2c:	80 ec       	ldi	r24, 0xC0	; 192
    8e2e:	86 83       	std	Z+6, r24	; 0x06
    8e30:	80 e0       	ldi	r24, 0x00	; 0
    8e32:	08 95       	ret

00008e34 <USART4_enable_tx>:
 *
 * \return Nothing
 */
void USART4_enable_tx()
{
	USART4.CTRLB |= USART_TXEN_bm;
    8e34:	e0 e8       	ldi	r30, 0x80	; 128
    8e36:	f8 e0       	ldi	r31, 0x08	; 8
    8e38:	86 81       	ldd	r24, Z+6	; 0x06
    8e3a:	80 64       	ori	r24, 0x40	; 64
    8e3c:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLA |= 1 << USART_DREIE_bp; /* Transmit Data Ready Interrupt Enable: enable */
    8e3e:	85 81       	ldd	r24, Z+5	; 0x05
    8e40:	80 62       	ori	r24, 0x20	; 32
    8e42:	85 83       	std	Z+5, r24	; 0x05
    8e44:	08 95       	ret

00008e46 <USART4_disable>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    8e46:	e0 e8       	ldi	r30, 0x80	; 128
    8e48:	f8 e0       	ldi	r31, 0x08	; 8
    8e4a:	86 81       	ldd	r24, Z+6	; 0x06
    8e4c:	8f 73       	andi	r24, 0x3F	; 63
    8e4e:	86 83       	std	Z+6, r24	; 0x06
    8e50:	08 95       	ret

00008e52 <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    8e52:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    8e56:	08 95       	ret

00008e58 <_Z7timeDifmm>:
    (ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    ((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
  }

  return result;
}
    8e58:	26 17       	cp	r18, r22
    8e5a:	37 07       	cpc	r19, r23
    8e5c:	48 07       	cpc	r20, r24
    8e5e:	59 07       	cpc	r21, r25
    8e60:	28 f4       	brcc	.+10     	; 0x8e6c <_Z7timeDifmm+0x14>
    8e62:	62 1b       	sub	r22, r18
    8e64:	73 0b       	sbc	r23, r19
    8e66:	84 0b       	sbc	r24, r20
    8e68:	95 0b       	sbc	r25, r21
    8e6a:	08 95       	ret
    8e6c:	62 1b       	sub	r22, r18
    8e6e:	73 0b       	sbc	r23, r19
    8e70:	84 0b       	sbc	r24, r20
    8e72:	95 0b       	sbc	r25, r21
    8e74:	08 95       	ret

00008e76 <_Z11only_digitsPc>:

/** 
 * Checks a string to see if it contains only numerical characters
 */
bool only_digits(char *s)
{
    8e76:	fc 01       	movw	r30, r24
	while(*s)
    8e78:	20 81       	ld	r18, Z
    8e7a:	22 23       	and	r18, r18
    8e7c:	49 f0       	breq	.+18     	; 0x8e90 <_Z11only_digitsPc+0x1a>
	{
		if(isdigit(*s++) == 0)
    8e7e:	31 96       	adiw	r30, 0x01	; 1
    8e80:	30 e0       	ldi	r19, 0x00	; 0
    8e82:	20 53       	subi	r18, 0x30	; 48
    8e84:	31 09       	sbc	r19, r1
    8e86:	2a 30       	cpi	r18, 0x0A	; 10
    8e88:	31 05       	cpc	r19, r1
    8e8a:	b0 f3       	brcs	.-20     	; 0x8e78 <_Z11only_digitsPc+0x2>
		{
			return( false);
    8e8c:	80 e0       	ldi	r24, 0x00	; 0
    8e8e:	08 95       	ret
		}
	}

	return( true);
    8e90:	81 e0       	ldi	r24, 0x01	; 1
}
    8e92:	08 95       	ret

00008e94 <_Z15frequencyStringPcm>:
 * result = pointer to a character sting to hold the frequency string
 * freq = the frequency value to be represented as a string
 * Returns 1 if an error is detected
 */
bool frequencyString(char* result, uint32_t freq)
{
    8e94:	ef 92       	push	r14
    8e96:	ff 92       	push	r15
    8e98:	0f 93       	push	r16
    8e9a:	1f 93       	push	r17
    8e9c:	cf 93       	push	r28
    8e9e:	df 93       	push	r29
    8ea0:	9c 01       	movw	r18, r24
	bool failure = true;
	
	if(!result)
    8ea2:	89 2b       	or	r24, r25
    8ea4:	a9 f1       	breq	.+106    	; 0x8f10 <_Z15frequencyStringPcm+0x7c>
	{
		return(failure);
	}
	
	if((freq > 3500000) && (freq < 4000000)) // Accept only a Hz value to be expressed in kHz
    8ea6:	db 01       	movw	r26, r22
    8ea8:	ca 01       	movw	r24, r20
    8eaa:	81 5e       	subi	r24, 0xE1	; 225
    8eac:	97 46       	sbci	r25, 0x67	; 103
    8eae:	a5 43       	sbci	r26, 0x35	; 53
    8eb0:	b1 09       	sbc	r27, r1
    8eb2:	8f 31       	cpi	r24, 0x1F	; 31
    8eb4:	91 4a       	sbci	r25, 0xA1	; 161
    8eb6:	a7 40       	sbci	r26, 0x07	; 7
    8eb8:	b1 05       	cpc	r27, r1
    8eba:	60 f5       	brcc	.+88     	; 0x8f14 <_Z15frequencyStringPcm+0x80>
    8ebc:	cb 01       	movw	r24, r22
    8ebe:	ba 01       	movw	r22, r20
    8ec0:	e9 01       	movw	r28, r18
	{
		uint32_t frac = (freq % 1000)/100;		
    8ec2:	28 ee       	ldi	r18, 0xE8	; 232
    8ec4:	33 e0       	ldi	r19, 0x03	; 3
    8ec6:	40 e0       	ldi	r20, 0x00	; 0
    8ec8:	50 e0       	ldi	r21, 0x00	; 0
    8eca:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    8ece:	12 2f       	mov	r17, r18
    8ed0:	03 2f       	mov	r16, r19
    8ed2:	f4 2e       	mov	r15, r20
    8ed4:	e5 2e       	mov	r14, r21
    8ed6:	24 e6       	ldi	r18, 0x64	; 100
    8ed8:	30 e0       	ldi	r19, 0x00	; 0
    8eda:	40 e0       	ldi	r20, 0x00	; 0
    8edc:	50 e0       	ldi	r21, 0x00	; 0
    8ede:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
		sprintf(result, "%lu.%1lu kHz", freq/1000, frac);
    8ee2:	5f 93       	push	r21
    8ee4:	4f 93       	push	r20
    8ee6:	3f 93       	push	r19
    8ee8:	2f 93       	push	r18
    8eea:	ef 92       	push	r14
    8eec:	ff 92       	push	r15
    8eee:	0f 93       	push	r16
    8ef0:	1f 93       	push	r17
    8ef2:	85 ed       	ldi	r24, 0xD5	; 213
    8ef4:	94 e4       	ldi	r25, 0x44	; 68
    8ef6:	9f 93       	push	r25
    8ef8:	8f 93       	push	r24
    8efa:	df 93       	push	r29
    8efc:	cf 93       	push	r28
    8efe:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    8f02:	8d b7       	in	r24, 0x3d	; 61
    8f04:	9e b7       	in	r25, 0x3e	; 62
    8f06:	0c 96       	adiw	r24, 0x0c	; 12
    8f08:	8d bf       	out	0x3d, r24	; 61
    8f0a:	9e bf       	out	0x3e, r25	; 62
		
		failure = false;
    8f0c:	80 e0       	ldi	r24, 0x00	; 0
    8f0e:	03 c0       	rjmp	.+6      	; 0x8f16 <_Z15frequencyStringPcm+0x82>
{
	bool failure = true;
	
	if(!result)
	{
		return(failure);
    8f10:	81 e0       	ldi	r24, 0x01	; 1
    8f12:	01 c0       	rjmp	.+2      	; 0x8f16 <_Z15frequencyStringPcm+0x82>
 * freq = the frequency value to be represented as a string
 * Returns 1 if an error is detected
 */
bool frequencyString(char* result, uint32_t freq)
{
	bool failure = true;
    8f14:	81 e0       	ldi	r24, 0x01	; 1
		
		failure = false;
	}
	
	return(failure);	
}
    8f16:	df 91       	pop	r29
    8f18:	cf 91       	pop	r28
    8f1a:	1f 91       	pop	r17
    8f1c:	0f 91       	pop	r16
    8f1e:	ff 90       	pop	r15
    8f20:	ef 90       	pop	r14
    8f22:	08 95       	ret

00008f24 <_Z12frequencyValPcPm>:
 * str = pointer to a string containing the frequency string
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
    8f24:	4f 92       	push	r4
    8f26:	5f 92       	push	r5
    8f28:	6f 92       	push	r6
    8f2a:	7f 92       	push	r7
    8f2c:	bf 92       	push	r11
    8f2e:	cf 92       	push	r12
    8f30:	df 92       	push	r13
    8f32:	ef 92       	push	r14
    8f34:	ff 92       	push	r15
    8f36:	0f 93       	push	r16
    8f38:	1f 93       	push	r17
    8f3a:	cf 93       	push	r28
    8f3c:	df 93       	push	r29
	bool failure = true;
	
	if(!str)
    8f3e:	00 97       	sbiw	r24, 0x00	; 0
    8f40:	09 f4       	brne	.+2      	; 0x8f44 <_Z12frequencyValPcPm+0x20>
    8f42:	12 c1       	rjmp	.+548    	; 0x9168 <_Z12frequencyValPcPm+0x244>
    8f44:	7b 01       	movw	r14, r22
    8f46:	6c 01       	movw	r12, r24
	{
		return(failure);
	}
	
	int decimal = '.';
	char* decimalLocation = strchr(str, decimal);
    8f48:	6e e2       	ldi	r22, 0x2E	; 46
    8f4a:	70 e0       	ldi	r23, 0x00	; 0
    8f4c:	0e 94 44 4e 	call	0x9c88	; 0x9c88 <strchr>
	Frequency_Hz temp;
	
	if(decimalLocation) // Assume Hz or kHz
    8f50:	89 2b       	or	r24, r25
    8f52:	09 f4       	brne	.+2      	; 0x8f56 <_Z12frequencyValPcPm+0x32>
    8f54:	a2 c0       	rjmp	.+324    	; 0x909a <_Z12frequencyValPcPm+0x176>
	{
		float f = atof(str);
    8f56:	c6 01       	movw	r24, r12
    8f58:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <atof>
    8f5c:	06 2f       	mov	r16, r22
    8f5e:	17 2f       	mov	r17, r23
    8f60:	c8 2f       	mov	r28, r24
    8f62:	d9 2f       	mov	r29, r25
		
		if((f > 3.5) && (f < 4.0))
    8f64:	20 e0       	ldi	r18, 0x00	; 0
    8f66:	30 e0       	ldi	r19, 0x00	; 0
    8f68:	40 e6       	ldi	r20, 0x60	; 96
    8f6a:	50 e4       	ldi	r21, 0x40	; 64
    8f6c:	0e 94 aa 4b 	call	0x9754	; 0x9754 <__gesf2>
    8f70:	18 16       	cp	r1, r24
    8f72:	e4 f4       	brge	.+56     	; 0x8fac <_Z12frequencyValPcPm+0x88>
    8f74:	20 e0       	ldi	r18, 0x00	; 0
    8f76:	30 e0       	ldi	r19, 0x00	; 0
    8f78:	40 e8       	ldi	r20, 0x80	; 128
    8f7a:	50 e4       	ldi	r21, 0x40	; 64
    8f7c:	60 2f       	mov	r22, r16
    8f7e:	71 2f       	mov	r23, r17
    8f80:	8c 2f       	mov	r24, r28
    8f82:	9d 2f       	mov	r25, r29
    8f84:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__cmpsf2>
    8f88:	88 23       	and	r24, r24
    8f8a:	84 f4       	brge	.+32     	; 0x8fac <_Z12frequencyValPcPm+0x88>
		{
			f *= 1000000.;
    8f8c:	20 e0       	ldi	r18, 0x00	; 0
    8f8e:	34 e2       	ldi	r19, 0x24	; 36
    8f90:	44 e7       	ldi	r20, 0x74	; 116
    8f92:	59 e4       	ldi	r21, 0x49	; 73
    8f94:	60 2f       	mov	r22, r16
    8f96:	71 2f       	mov	r23, r17
    8f98:	8c 2f       	mov	r24, r28
    8f9a:	9d 2f       	mov	r25, r29
    8f9c:	0e 94 af 4b 	call	0x975e	; 0x975e <__mulsf3>
    8fa0:	06 2f       	mov	r16, r22
    8fa2:	17 2f       	mov	r17, r23
    8fa4:	c8 2f       	mov	r28, r24
    8fa6:	d9 2f       	mov	r29, r25
			failure = false;
    8fa8:	b1 2c       	mov	r11, r1
    8faa:	47 c0       	rjmp	.+142    	; 0x903a <_Z12frequencyValPcPm+0x116>
		}
		else if((f > 3500.) && (f < 4000.))
    8fac:	20 e0       	ldi	r18, 0x00	; 0
    8fae:	30 ec       	ldi	r19, 0xC0	; 192
    8fb0:	4a e5       	ldi	r20, 0x5A	; 90
    8fb2:	55 e4       	ldi	r21, 0x45	; 69
    8fb4:	60 2f       	mov	r22, r16
    8fb6:	71 2f       	mov	r23, r17
    8fb8:	8c 2f       	mov	r24, r28
    8fba:	9d 2f       	mov	r25, r29
    8fbc:	0e 94 aa 4b 	call	0x9754	; 0x9754 <__gesf2>
    8fc0:	18 16       	cp	r1, r24
    8fc2:	e4 f4       	brge	.+56     	; 0x8ffc <_Z12frequencyValPcPm+0xd8>
    8fc4:	20 e0       	ldi	r18, 0x00	; 0
    8fc6:	30 e0       	ldi	r19, 0x00	; 0
    8fc8:	4a e7       	ldi	r20, 0x7A	; 122
    8fca:	55 e4       	ldi	r21, 0x45	; 69
    8fcc:	60 2f       	mov	r22, r16
    8fce:	71 2f       	mov	r23, r17
    8fd0:	8c 2f       	mov	r24, r28
    8fd2:	9d 2f       	mov	r25, r29
    8fd4:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__cmpsf2>
    8fd8:	88 23       	and	r24, r24
    8fda:	84 f4       	brge	.+32     	; 0x8ffc <_Z12frequencyValPcPm+0xd8>
		{
			f *= 1000.;
    8fdc:	20 e0       	ldi	r18, 0x00	; 0
    8fde:	30 e0       	ldi	r19, 0x00	; 0
    8fe0:	4a e7       	ldi	r20, 0x7A	; 122
    8fe2:	54 e4       	ldi	r21, 0x44	; 68
    8fe4:	60 2f       	mov	r22, r16
    8fe6:	71 2f       	mov	r23, r17
    8fe8:	8c 2f       	mov	r24, r28
    8fea:	9d 2f       	mov	r25, r29
    8fec:	0e 94 af 4b 	call	0x975e	; 0x975e <__mulsf3>
    8ff0:	06 2f       	mov	r16, r22
    8ff2:	17 2f       	mov	r17, r23
    8ff4:	c8 2f       	mov	r28, r24
    8ff6:	d9 2f       	mov	r29, r25
			failure = false;
    8ff8:	b1 2c       	mov	r11, r1
    8ffa:	1f c0       	rjmp	.+62     	; 0x903a <_Z12frequencyValPcPm+0x116>
		}
		else if((f > 3500000.) && (f < 4000000.))
    8ffc:	20 e8       	ldi	r18, 0x80	; 128
    8ffe:	3f e9       	ldi	r19, 0x9F	; 159
    9000:	45 e5       	ldi	r20, 0x55	; 85
    9002:	5a e4       	ldi	r21, 0x4A	; 74
    9004:	60 2f       	mov	r22, r16
    9006:	71 2f       	mov	r23, r17
    9008:	8c 2f       	mov	r24, r28
    900a:	9d 2f       	mov	r25, r29
    900c:	0e 94 aa 4b 	call	0x9754	; 0x9754 <__gesf2>
    9010:	18 16       	cp	r1, r24
    9012:	7c f4       	brge	.+30     	; 0x9032 <_Z12frequencyValPcPm+0x10e>
    9014:	20 e0       	ldi	r18, 0x00	; 0
    9016:	34 e2       	ldi	r19, 0x24	; 36
    9018:	44 e7       	ldi	r20, 0x74	; 116
    901a:	5a e4       	ldi	r21, 0x4A	; 74
    901c:	60 2f       	mov	r22, r16
    901e:	71 2f       	mov	r23, r17
    9020:	8c 2f       	mov	r24, r28
    9022:	9d 2f       	mov	r25, r29
    9024:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__cmpsf2>
    9028:	88 23       	and	r24, r24
    902a:	34 f0       	brlt	.+12     	; 0x9038 <_Z12frequencyValPcPm+0x114>
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
	bool failure = true;
    902c:	bb 24       	eor	r11, r11
    902e:	b3 94       	inc	r11
    9030:	04 c0       	rjmp	.+8      	; 0x903a <_Z12frequencyValPcPm+0x116>
    9032:	bb 24       	eor	r11, r11
    9034:	b3 94       	inc	r11
    9036:	01 c0       	rjmp	.+2      	; 0x903a <_Z12frequencyValPcPm+0x116>
			f *= 1000.;
			failure = false;
		}
		else if((f > 3500000.) && (f < 4000000.))
		{
			failure = false;
    9038:	b1 2c       	mov	r11, r1
		}
		
		if(!failure)
    903a:	b1 10       	cpse	r11, r1
    903c:	97 c0       	rjmp	.+302    	; 0x916c <_Z12frequencyValPcPm+0x248>
		{
			temp = (Frequency_Hz)ceilf(f);
    903e:	60 2f       	mov	r22, r16
    9040:	71 2f       	mov	r23, r17
    9042:	8c 2f       	mov	r24, r28
    9044:	9d 2f       	mov	r25, r29
    9046:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <ceil>
    904a:	0e 94 88 4a 	call	0x9510	; 0x9510 <__fixunssfsi>
    904e:	2b 01       	movw	r4, r22
    9050:	3c 01       	movw	r6, r24
			temp = temp - (temp % 100);
    9052:	24 e6       	ldi	r18, 0x64	; 100
    9054:	30 e0       	ldi	r19, 0x00	; 0
    9056:	40 e0       	ldi	r20, 0x00	; 0
    9058:	50 e0       	ldi	r21, 0x00	; 0
    905a:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    905e:	46 1a       	sub	r4, r22
    9060:	57 0a       	sbc	r5, r23
    9062:	68 0a       	sbc	r6, r24
    9064:	79 0a       	sbc	r7, r25
			if(result) *result = temp;
    9066:	e1 14       	cp	r14, r1
    9068:	f1 04       	cpc	r15, r1
    906a:	29 f0       	breq	.+10     	; 0x9076 <_Z12frequencyValPcPm+0x152>
    906c:	f7 01       	movw	r30, r14
    906e:	40 82       	st	Z, r4
    9070:	51 82       	std	Z+1, r5	; 0x01
    9072:	62 82       	std	Z+2, r6	; 0x02
    9074:	73 82       	std	Z+3, r7	; 0x03
			sprintf(str, "%4.1f kHz", (double)f);
    9076:	df 93       	push	r29
    9078:	cf 93       	push	r28
    907a:	1f 93       	push	r17
    907c:	0f 93       	push	r16
    907e:	82 ee       	ldi	r24, 0xE2	; 226
    9080:	94 e4       	ldi	r25, 0x44	; 68
    9082:	9f 93       	push	r25
    9084:	8f 93       	push	r24
    9086:	df 92       	push	r13
    9088:	cf 92       	push	r12
    908a:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    908e:	8d b7       	in	r24, 0x3d	; 61
    9090:	9e b7       	in	r25, 0x3e	; 62
    9092:	08 96       	adiw	r24, 0x08	; 8
    9094:	8d bf       	out	0x3d, r24	; 61
    9096:	9e bf       	out	0x3e, r25	; 62
    9098:	69 c0       	rjmp	.+210    	; 0x916c <_Z12frequencyValPcPm+0x248>
		}
	}
	else
	{
		Frequency_Hz f = (Frequency_Hz)atol(str);
    909a:	c6 01       	movw	r24, r12
    909c:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <atol>
    90a0:	2b 01       	movw	r4, r22
    90a2:	3c 01       	movw	r6, r24
		
		if((f > 3500) && (f < 4000))
    90a4:	dc 01       	movw	r26, r24
    90a6:	cb 01       	movw	r24, r22
    90a8:	8d 5a       	subi	r24, 0xAD	; 173
    90aa:	9d 40       	sbci	r25, 0x0D	; 13
    90ac:	a1 09       	sbc	r26, r1
    90ae:	b1 09       	sbc	r27, r1
    90b0:	83 3f       	cpi	r24, 0xF3	; 243
    90b2:	91 40       	sbci	r25, 0x01	; 1
    90b4:	a1 05       	cpc	r26, r1
    90b6:	b1 05       	cpc	r27, r1
    90b8:	50 f4       	brcc	.+20     	; 0x90ce <_Z12frequencyValPcPm+0x1aa>
		{
			f *= 1000;
    90ba:	a8 ee       	ldi	r26, 0xE8	; 232
    90bc:	b3 e0       	ldi	r27, 0x03	; 3
    90be:	a3 01       	movw	r20, r6
    90c0:	92 01       	movw	r18, r4
    90c2:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__muluhisi3>
    90c6:	2b 01       	movw	r4, r22
    90c8:	3c 01       	movw	r6, r24
			failure = false;
    90ca:	b1 2c       	mov	r11, r1
    90cc:	1b c0       	rjmp	.+54     	; 0x9104 <_Z12frequencyValPcPm+0x1e0>
		}
		else if((f > 3500000) && (f < 4000000))
    90ce:	d3 01       	movw	r26, r6
    90d0:	c2 01       	movw	r24, r4
    90d2:	81 5e       	subi	r24, 0xE1	; 225
    90d4:	97 46       	sbci	r25, 0x67	; 103
    90d6:	a5 43       	sbci	r26, 0x35	; 53
    90d8:	b1 09       	sbc	r27, r1
    90da:	8f 31       	cpi	r24, 0x1F	; 31
    90dc:	91 4a       	sbci	r25, 0xA1	; 161
    90de:	a7 40       	sbci	r26, 0x07	; 7
    90e0:	b1 05       	cpc	r27, r1
    90e2:	70 f4       	brcc	.+28     	; 0x9100 <_Z12frequencyValPcPm+0x1dc>
		{
			f = f - (f % 100);
    90e4:	c3 01       	movw	r24, r6
    90e6:	b2 01       	movw	r22, r4
    90e8:	24 e6       	ldi	r18, 0x64	; 100
    90ea:	30 e0       	ldi	r19, 0x00	; 0
    90ec:	40 e0       	ldi	r20, 0x00	; 0
    90ee:	50 e0       	ldi	r21, 0x00	; 0
    90f0:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    90f4:	46 1a       	sub	r4, r22
    90f6:	57 0a       	sbc	r5, r23
    90f8:	68 0a       	sbc	r6, r24
    90fa:	79 0a       	sbc	r7, r25
			failure = false;
    90fc:	b1 2c       	mov	r11, r1
    90fe:	02 c0       	rjmp	.+4      	; 0x9104 <_Z12frequencyValPcPm+0x1e0>
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
	bool failure = true;
    9100:	bb 24       	eor	r11, r11
    9102:	b3 94       	inc	r11
		{
			f = f - (f % 100);
			failure = false;
		}
		
		if(!failure)
    9104:	b1 10       	cpse	r11, r1
    9106:	32 c0       	rjmp	.+100    	; 0x916c <_Z12frequencyValPcPm+0x248>
		{
			if(result) *result = f;
    9108:	e1 14       	cp	r14, r1
    910a:	f1 04       	cpc	r15, r1
    910c:	29 f0       	breq	.+10     	; 0x9118 <_Z12frequencyValPcPm+0x1f4>
    910e:	f7 01       	movw	r30, r14
    9110:	40 82       	st	Z, r4
    9112:	51 82       	std	Z+1, r5	; 0x01
    9114:	62 82       	std	Z+2, r6	; 0x02
    9116:	73 82       	std	Z+3, r7	; 0x03
			sprintf(str, "%lu.%1lu kHz", f/1000, (f % 1000)/100);
    9118:	c3 01       	movw	r24, r6
    911a:	b2 01       	movw	r22, r4
    911c:	28 ee       	ldi	r18, 0xE8	; 232
    911e:	33 e0       	ldi	r19, 0x03	; 3
    9120:	40 e0       	ldi	r20, 0x00	; 0
    9122:	50 e0       	ldi	r21, 0x00	; 0
    9124:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    9128:	c2 2f       	mov	r28, r18
    912a:	d3 2f       	mov	r29, r19
    912c:	14 2f       	mov	r17, r20
    912e:	05 2f       	mov	r16, r21
    9130:	24 e6       	ldi	r18, 0x64	; 100
    9132:	30 e0       	ldi	r19, 0x00	; 0
    9134:	40 e0       	ldi	r20, 0x00	; 0
    9136:	50 e0       	ldi	r21, 0x00	; 0
    9138:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    913c:	5f 93       	push	r21
    913e:	4f 93       	push	r20
    9140:	3f 93       	push	r19
    9142:	2f 93       	push	r18
    9144:	0f 93       	push	r16
    9146:	1f 93       	push	r17
    9148:	df 93       	push	r29
    914a:	cf 93       	push	r28
    914c:	85 ed       	ldi	r24, 0xD5	; 213
    914e:	94 e4       	ldi	r25, 0x44	; 68
    9150:	9f 93       	push	r25
    9152:	8f 93       	push	r24
    9154:	df 92       	push	r13
    9156:	cf 92       	push	r12
    9158:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <sprintf>
    915c:	8d b7       	in	r24, 0x3d	; 61
    915e:	9e b7       	in	r25, 0x3e	; 62
    9160:	0c 96       	adiw	r24, 0x0c	; 12
    9162:	8d bf       	out	0x3d, r24	; 61
    9164:	9e bf       	out	0x3e, r25	; 62
    9166:	02 c0       	rjmp	.+4      	; 0x916c <_Z12frequencyValPcPm+0x248>
{
	bool failure = true;
	
	if(!str)
	{
		return(failure);
    9168:	bb 24       	eor	r11, r11
    916a:	b3 94       	inc	r11
			sprintf(str, "%lu.%1lu kHz", f/1000, (f % 1000)/100);
		}
	}
	
	return(failure);	
}
    916c:	8b 2d       	mov	r24, r11
    916e:	df 91       	pop	r29
    9170:	cf 91       	pop	r28
    9172:	1f 91       	pop	r17
    9174:	0f 91       	pop	r16
    9176:	ff 90       	pop	r15
    9178:	ef 90       	pop	r14
    917a:	df 90       	pop	r13
    917c:	cf 90       	pop	r12
    917e:	bf 90       	pop	r11
    9180:	7f 90       	pop	r7
    9182:	6f 90       	pop	r6
    9184:	5f 90       	pop	r5
    9186:	4f 90       	pop	r4
    9188:	08 95       	ret

0000918a <_Z8fox2TextPc5Fox_t>:

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
	
	switch(fox)
    918a:	46 2f       	mov	r20, r22
    918c:	50 e0       	ldi	r21, 0x00	; 0
    918e:	42 31       	cpi	r20, 0x12	; 18
    9190:	51 05       	cpc	r21, r1
    9192:	08 f0       	brcs	.+2      	; 0x9196 <_Z8fox2TextPc5Fox_t+0xc>
    9194:	b9 c0       	rjmp	.+370    	; 0x9308 <_Z8fox2TextPc5Fox_t+0x17e>
    9196:	fa 01       	movw	r30, r20
    9198:	ea 5e       	subi	r30, 0xEA	; 234
    919a:	fe 4f       	sbci	r31, 0xFE	; 254
    919c:	0c 94 95 4c 	jmp	0x992a	; 0x992a <__tablejump2__>
	{
		case BEACON:
		{
			sprintf(str, "Finish \"MO\"");
    91a0:	2c e0       	ldi	r18, 0x0C	; 12
    91a2:	ec ee       	ldi	r30, 0xEC	; 236
    91a4:	f4 e4       	ldi	r31, 0x44	; 68
    91a6:	dc 01       	movw	r26, r24
    91a8:	01 90       	ld	r0, Z+
    91aa:	0d 92       	st	X+, r0
    91ac:	2a 95       	dec	r18
    91ae:	e1 f7       	brne	.-8      	; 0x91a8 <_Z8fox2TextPc5Fox_t+0x1e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    91b0:	80 e0       	ldi	r24, 0x00	; 0
	{
		case BEACON:
		{
			sprintf(str, "Finish \"MO\"");
		}
		break;
    91b2:	08 95       	ret
		
		case FOX_1:
		{
			sprintf(str, "Classic Fox 1 \"MOE\"");
    91b4:	24 e1       	ldi	r18, 0x14	; 20
    91b6:	e8 ef       	ldi	r30, 0xF8	; 248
    91b8:	f4 e4       	ldi	r31, 0x44	; 68
    91ba:	dc 01       	movw	r26, r24
    91bc:	01 90       	ld	r0, Z+
    91be:	0d 92       	st	X+, r0
    91c0:	2a 95       	dec	r18
    91c2:	e1 f7       	brne	.-8      	; 0x91bc <_Z8fox2TextPc5Fox_t+0x32>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    91c4:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_1:
		{
			sprintf(str, "Classic Fox 1 \"MOE\"");
		}
		break;
    91c6:	08 95       	ret
		
		case FOX_2:
		{
			sprintf(str, "Classic Fox 2 \"MOI\"");
    91c8:	24 e1       	ldi	r18, 0x14	; 20
    91ca:	ec e0       	ldi	r30, 0x0C	; 12
    91cc:	f5 e4       	ldi	r31, 0x45	; 69
    91ce:	dc 01       	movw	r26, r24
    91d0:	01 90       	ld	r0, Z+
    91d2:	0d 92       	st	X+, r0
    91d4:	2a 95       	dec	r18
    91d6:	e1 f7       	brne	.-8      	; 0x91d0 <_Z8fox2TextPc5Fox_t+0x46>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    91d8:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_2:
		{
			sprintf(str, "Classic Fox 2 \"MOI\"");
		}
		break;
    91da:	08 95       	ret
		
		case FOX_3:
		{
			sprintf(str, "Classic Fox 3 \"MOS\"");
    91dc:	24 e1       	ldi	r18, 0x14	; 20
    91de:	e0 e2       	ldi	r30, 0x20	; 32
    91e0:	f5 e4       	ldi	r31, 0x45	; 69
    91e2:	dc 01       	movw	r26, r24
    91e4:	01 90       	ld	r0, Z+
    91e6:	0d 92       	st	X+, r0
    91e8:	2a 95       	dec	r18
    91ea:	e1 f7       	brne	.-8      	; 0x91e4 <_Z8fox2TextPc5Fox_t+0x5a>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    91ec:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_3:
		{
			sprintf(str, "Classic Fox 3 \"MOS\"");
		}
		break;
    91ee:	08 95       	ret
		
		case FOX_4:
		{
			sprintf(str, "Classic Fox 4 \"MOH\"");
    91f0:	24 e1       	ldi	r18, 0x14	; 20
    91f2:	e4 e3       	ldi	r30, 0x34	; 52
    91f4:	f5 e4       	ldi	r31, 0x45	; 69
    91f6:	dc 01       	movw	r26, r24
    91f8:	01 90       	ld	r0, Z+
    91fa:	0d 92       	st	X+, r0
    91fc:	2a 95       	dec	r18
    91fe:	e1 f7       	brne	.-8      	; 0x91f8 <_Z8fox2TextPc5Fox_t+0x6e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9200:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_4:
		{
			sprintf(str, "Classic Fox 4 \"MOH\"");
		}
		break;
    9202:	08 95       	ret
		
		case FOX_5:
		{
			sprintf(str, "Classic Fox 5 \"MO5\"");
    9204:	24 e1       	ldi	r18, 0x14	; 20
    9206:	e8 e4       	ldi	r30, 0x48	; 72
    9208:	f5 e4       	ldi	r31, 0x45	; 69
    920a:	dc 01       	movw	r26, r24
    920c:	01 90       	ld	r0, Z+
    920e:	0d 92       	st	X+, r0
    9210:	2a 95       	dec	r18
    9212:	e1 f7       	brne	.-8      	; 0x920c <_Z8fox2TextPc5Fox_t+0x82>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9214:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_5:
		{
			sprintf(str, "Classic Fox 5 \"MO5\"");
		}
		break;
    9216:	08 95       	ret
		
		case FOXORING:
		{
			sprintf(str, "Foxoring");
    9218:	29 e0       	ldi	r18, 0x09	; 9
    921a:	ec e5       	ldi	r30, 0x5C	; 92
    921c:	f5 e4       	ldi	r31, 0x45	; 69
    921e:	dc 01       	movw	r26, r24
    9220:	01 90       	ld	r0, Z+
    9222:	0d 92       	st	X+, r0
    9224:	2a 95       	dec	r18
    9226:	e1 f7       	brne	.-8      	; 0x9220 <_Z8fox2TextPc5Fox_t+0x96>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9228:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOXORING:
		{
			sprintf(str, "Foxoring");
		}
		break;
    922a:	08 95       	ret
		
		case SPECTATOR:
		{
			sprintf(str, "Spectator \"S\"");
    922c:	2e e0       	ldi	r18, 0x0E	; 14
    922e:	e5 e6       	ldi	r30, 0x65	; 101
    9230:	f5 e4       	ldi	r31, 0x45	; 69
    9232:	dc 01       	movw	r26, r24
    9234:	01 90       	ld	r0, Z+
    9236:	0d 92       	st	X+, r0
    9238:	2a 95       	dec	r18
    923a:	e1 f7       	brne	.-8      	; 0x9234 <_Z8fox2TextPc5Fox_t+0xaa>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    923c:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPECTATOR:
		{
			sprintf(str, "Spectator \"S\"");
		}
		break;
    923e:	08 95       	ret
		
		case SPRINT_S1:
		{
			sprintf(str, "Sprint Slow 1 \"ME\"");
    9240:	23 e1       	ldi	r18, 0x13	; 19
    9242:	e3 e7       	ldi	r30, 0x73	; 115
    9244:	f5 e4       	ldi	r31, 0x45	; 69
    9246:	dc 01       	movw	r26, r24
    9248:	01 90       	ld	r0, Z+
    924a:	0d 92       	st	X+, r0
    924c:	2a 95       	dec	r18
    924e:	e1 f7       	brne	.-8      	; 0x9248 <_Z8fox2TextPc5Fox_t+0xbe>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9250:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S1:
		{
			sprintf(str, "Sprint Slow 1 \"ME\"");
		}
		break;
    9252:	08 95       	ret
		
		case SPRINT_S2:
		{
			sprintf(str, "Sprint Slow 2 \"MI\"");
    9254:	23 e1       	ldi	r18, 0x13	; 19
    9256:	e6 e8       	ldi	r30, 0x86	; 134
    9258:	f5 e4       	ldi	r31, 0x45	; 69
    925a:	dc 01       	movw	r26, r24
    925c:	01 90       	ld	r0, Z+
    925e:	0d 92       	st	X+, r0
    9260:	2a 95       	dec	r18
    9262:	e1 f7       	brne	.-8      	; 0x925c <_Z8fox2TextPc5Fox_t+0xd2>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9264:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S2:
		{
			sprintf(str, "Sprint Slow 2 \"MI\"");
		}
		break;
    9266:	08 95       	ret
		
		case SPRINT_S3:
		{
			sprintf(str, "Sprint Slow 3 \"MS\"");
    9268:	23 e1       	ldi	r18, 0x13	; 19
    926a:	e9 e9       	ldi	r30, 0x99	; 153
    926c:	f5 e4       	ldi	r31, 0x45	; 69
    926e:	dc 01       	movw	r26, r24
    9270:	01 90       	ld	r0, Z+
    9272:	0d 92       	st	X+, r0
    9274:	2a 95       	dec	r18
    9276:	e1 f7       	brne	.-8      	; 0x9270 <_Z8fox2TextPc5Fox_t+0xe6>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9278:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S3:
		{
			sprintf(str, "Sprint Slow 3 \"MS\"");
		}
		break;
    927a:	08 95       	ret
		
		case SPRINT_S4:
		{
			sprintf(str, "Sprint Slow 4 \"MH\"");
    927c:	23 e1       	ldi	r18, 0x13	; 19
    927e:	ec ea       	ldi	r30, 0xAC	; 172
    9280:	f5 e4       	ldi	r31, 0x45	; 69
    9282:	dc 01       	movw	r26, r24
    9284:	01 90       	ld	r0, Z+
    9286:	0d 92       	st	X+, r0
    9288:	2a 95       	dec	r18
    928a:	e1 f7       	brne	.-8      	; 0x9284 <_Z8fox2TextPc5Fox_t+0xfa>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    928c:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S4:
		{
			sprintf(str, "Sprint Slow 4 \"MH\"");
		}
		break;
    928e:	08 95       	ret
		
		case SPRINT_S5:
		{
			sprintf(str, "Sprint Slow 5 \"M5\"");
    9290:	23 e1       	ldi	r18, 0x13	; 19
    9292:	ef eb       	ldi	r30, 0xBF	; 191
    9294:	f5 e4       	ldi	r31, 0x45	; 69
    9296:	dc 01       	movw	r26, r24
    9298:	01 90       	ld	r0, Z+
    929a:	0d 92       	st	X+, r0
    929c:	2a 95       	dec	r18
    929e:	e1 f7       	brne	.-8      	; 0x9298 <_Z8fox2TextPc5Fox_t+0x10e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92a0:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S5:
		{
			sprintf(str, "Sprint Slow 5 \"M5\"");
		}
		break;
    92a2:	08 95       	ret
		
		case SPRINT_F1:
		{
			sprintf(str, "Sprint Fast 1 \"OE\"");
    92a4:	23 e1       	ldi	r18, 0x13	; 19
    92a6:	e2 ed       	ldi	r30, 0xD2	; 210
    92a8:	f5 e4       	ldi	r31, 0x45	; 69
    92aa:	dc 01       	movw	r26, r24
    92ac:	01 90       	ld	r0, Z+
    92ae:	0d 92       	st	X+, r0
    92b0:	2a 95       	dec	r18
    92b2:	e1 f7       	brne	.-8      	; 0x92ac <_Z8fox2TextPc5Fox_t+0x122>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92b4:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F1:
		{
			sprintf(str, "Sprint Fast 1 \"OE\"");
		}
		break;
    92b6:	08 95       	ret
		
		case SPRINT_F2:
		{
			sprintf(str, "Sprint Fast 2 \"OI\"");
    92b8:	23 e1       	ldi	r18, 0x13	; 19
    92ba:	e5 ee       	ldi	r30, 0xE5	; 229
    92bc:	f5 e4       	ldi	r31, 0x45	; 69
    92be:	dc 01       	movw	r26, r24
    92c0:	01 90       	ld	r0, Z+
    92c2:	0d 92       	st	X+, r0
    92c4:	2a 95       	dec	r18
    92c6:	e1 f7       	brne	.-8      	; 0x92c0 <_Z8fox2TextPc5Fox_t+0x136>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92c8:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F2:
		{
			sprintf(str, "Sprint Fast 2 \"OI\"");
		}
		break;
    92ca:	08 95       	ret
		
		case SPRINT_F3:
		{
			sprintf(str, "Sprint Fast 3 \"OS\"");
    92cc:	23 e1       	ldi	r18, 0x13	; 19
    92ce:	e8 ef       	ldi	r30, 0xF8	; 248
    92d0:	f5 e4       	ldi	r31, 0x45	; 69
    92d2:	dc 01       	movw	r26, r24
    92d4:	01 90       	ld	r0, Z+
    92d6:	0d 92       	st	X+, r0
    92d8:	2a 95       	dec	r18
    92da:	e1 f7       	brne	.-8      	; 0x92d4 <_Z8fox2TextPc5Fox_t+0x14a>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92dc:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F3:
		{
			sprintf(str, "Sprint Fast 3 \"OS\"");
		}
		break;
    92de:	08 95       	ret
		
		case SPRINT_F4:
		{
			sprintf(str, "Sprint Fast 4 \"OH\"");
    92e0:	23 e1       	ldi	r18, 0x13	; 19
    92e2:	eb e0       	ldi	r30, 0x0B	; 11
    92e4:	f6 e4       	ldi	r31, 0x46	; 70
    92e6:	dc 01       	movw	r26, r24
    92e8:	01 90       	ld	r0, Z+
    92ea:	0d 92       	st	X+, r0
    92ec:	2a 95       	dec	r18
    92ee:	e1 f7       	brne	.-8      	; 0x92e8 <_Z8fox2TextPc5Fox_t+0x15e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92f0:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F4:
		{
			sprintf(str, "Sprint Fast 4 \"OH\"");
		}
		break;
    92f2:	08 95       	ret
		
		case SPRINT_F5:
		{
			sprintf(str, "Sprint Fast 5 \"O5\"");
    92f4:	23 e1       	ldi	r18, 0x13	; 19
    92f6:	ee e1       	ldi	r30, 0x1E	; 30
    92f8:	f6 e4       	ldi	r31, 0x46	; 70
    92fa:	dc 01       	movw	r26, r24
    92fc:	01 90       	ld	r0, Z+
    92fe:	0d 92       	st	X+, r0
    9300:	2a 95       	dec	r18
    9302:	e1 f7       	brne	.-8      	; 0x92fc <_Z8fox2TextPc5Fox_t+0x172>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9304:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F5:
		{
			sprintf(str, "Sprint Fast 5 \"O5\"");
		}
		break;
    9306:	08 95       	ret
		
		default:
		{
			failure = true;
    9308:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	}
	
	return(failure);
    930a:	08 95       	ret

0000930c <__subsf3>:
    930c:	50 58       	subi	r21, 0x80	; 128

0000930e <__addsf3>:
    930e:	bb 27       	eor	r27, r27
    9310:	aa 27       	eor	r26, r26
    9312:	0e 94 9e 49 	call	0x933c	; 0x933c <__addsf3x>
    9316:	0c 94 58 4b 	jmp	0x96b0	; 0x96b0 <__fp_round>
    931a:	0e 94 4a 4b 	call	0x9694	; 0x9694 <__fp_pscA>
    931e:	38 f0       	brcs	.+14     	; 0x932e <__addsf3+0x20>
    9320:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <__fp_pscB>
    9324:	20 f0       	brcs	.+8      	; 0x932e <__addsf3+0x20>
    9326:	39 f4       	brne	.+14     	; 0x9336 <__addsf3+0x28>
    9328:	9f 3f       	cpi	r25, 0xFF	; 255
    932a:	19 f4       	brne	.+6      	; 0x9332 <__addsf3+0x24>
    932c:	26 f4       	brtc	.+8      	; 0x9336 <__addsf3+0x28>
    932e:	0c 94 47 4b 	jmp	0x968e	; 0x968e <__fp_nan>
    9332:	0e f4       	brtc	.+2      	; 0x9336 <__addsf3+0x28>
    9334:	e0 95       	com	r30
    9336:	e7 fb       	bst	r30, 7
    9338:	0c 94 18 4b 	jmp	0x9630	; 0x9630 <__fp_inf>

0000933c <__addsf3x>:
    933c:	e9 2f       	mov	r30, r25
    933e:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__fp_split3>
    9342:	58 f3       	brcs	.-42     	; 0x931a <__addsf3+0xc>
    9344:	ba 17       	cp	r27, r26
    9346:	62 07       	cpc	r22, r18
    9348:	73 07       	cpc	r23, r19
    934a:	84 07       	cpc	r24, r20
    934c:	95 07       	cpc	r25, r21
    934e:	20 f0       	brcs	.+8      	; 0x9358 <__addsf3x+0x1c>
    9350:	79 f4       	brne	.+30     	; 0x9370 <__addsf3x+0x34>
    9352:	a6 f5       	brtc	.+104    	; 0x93bc <__addsf3x+0x80>
    9354:	0c 94 a3 4b 	jmp	0x9746	; 0x9746 <__fp_zero>
    9358:	0e f4       	brtc	.+2      	; 0x935c <__addsf3x+0x20>
    935a:	e0 95       	com	r30
    935c:	0b 2e       	mov	r0, r27
    935e:	ba 2f       	mov	r27, r26
    9360:	a0 2d       	mov	r26, r0
    9362:	0b 01       	movw	r0, r22
    9364:	b9 01       	movw	r22, r18
    9366:	90 01       	movw	r18, r0
    9368:	0c 01       	movw	r0, r24
    936a:	ca 01       	movw	r24, r20
    936c:	a0 01       	movw	r20, r0
    936e:	11 24       	eor	r1, r1
    9370:	ff 27       	eor	r31, r31
    9372:	59 1b       	sub	r21, r25
    9374:	99 f0       	breq	.+38     	; 0x939c <__addsf3x+0x60>
    9376:	59 3f       	cpi	r21, 0xF9	; 249
    9378:	50 f4       	brcc	.+20     	; 0x938e <__addsf3x+0x52>
    937a:	50 3e       	cpi	r21, 0xE0	; 224
    937c:	68 f1       	brcs	.+90     	; 0x93d8 <__addsf3x+0x9c>
    937e:	1a 16       	cp	r1, r26
    9380:	f0 40       	sbci	r31, 0x00	; 0
    9382:	a2 2f       	mov	r26, r18
    9384:	23 2f       	mov	r18, r19
    9386:	34 2f       	mov	r19, r20
    9388:	44 27       	eor	r20, r20
    938a:	58 5f       	subi	r21, 0xF8	; 248
    938c:	f3 cf       	rjmp	.-26     	; 0x9374 <__addsf3x+0x38>
    938e:	46 95       	lsr	r20
    9390:	37 95       	ror	r19
    9392:	27 95       	ror	r18
    9394:	a7 95       	ror	r26
    9396:	f0 40       	sbci	r31, 0x00	; 0
    9398:	53 95       	inc	r21
    939a:	c9 f7       	brne	.-14     	; 0x938e <__addsf3x+0x52>
    939c:	7e f4       	brtc	.+30     	; 0x93bc <__addsf3x+0x80>
    939e:	1f 16       	cp	r1, r31
    93a0:	ba 0b       	sbc	r27, r26
    93a2:	62 0b       	sbc	r22, r18
    93a4:	73 0b       	sbc	r23, r19
    93a6:	84 0b       	sbc	r24, r20
    93a8:	ba f0       	brmi	.+46     	; 0x93d8 <__addsf3x+0x9c>
    93aa:	91 50       	subi	r25, 0x01	; 1
    93ac:	a1 f0       	breq	.+40     	; 0x93d6 <__addsf3x+0x9a>
    93ae:	ff 0f       	add	r31, r31
    93b0:	bb 1f       	adc	r27, r27
    93b2:	66 1f       	adc	r22, r22
    93b4:	77 1f       	adc	r23, r23
    93b6:	88 1f       	adc	r24, r24
    93b8:	c2 f7       	brpl	.-16     	; 0x93aa <__addsf3x+0x6e>
    93ba:	0e c0       	rjmp	.+28     	; 0x93d8 <__addsf3x+0x9c>
    93bc:	ba 0f       	add	r27, r26
    93be:	62 1f       	adc	r22, r18
    93c0:	73 1f       	adc	r23, r19
    93c2:	84 1f       	adc	r24, r20
    93c4:	48 f4       	brcc	.+18     	; 0x93d8 <__addsf3x+0x9c>
    93c6:	87 95       	ror	r24
    93c8:	77 95       	ror	r23
    93ca:	67 95       	ror	r22
    93cc:	b7 95       	ror	r27
    93ce:	f7 95       	ror	r31
    93d0:	9e 3f       	cpi	r25, 0xFE	; 254
    93d2:	08 f0       	brcs	.+2      	; 0x93d6 <__addsf3x+0x9a>
    93d4:	b0 cf       	rjmp	.-160    	; 0x9336 <__addsf3+0x28>
    93d6:	93 95       	inc	r25
    93d8:	88 0f       	add	r24, r24
    93da:	08 f0       	brcs	.+2      	; 0x93de <__addsf3x+0xa2>
    93dc:	99 27       	eor	r25, r25
    93de:	ee 0f       	add	r30, r30
    93e0:	97 95       	ror	r25
    93e2:	87 95       	ror	r24
    93e4:	08 95       	ret

000093e6 <ceil>:
    93e6:	0e 94 8b 4b 	call	0x9716	; 0x9716 <__fp_trunc>
    93ea:	90 f0       	brcs	.+36     	; 0x9410 <ceil+0x2a>
    93ec:	9f 37       	cpi	r25, 0x7F	; 127
    93ee:	48 f4       	brcc	.+18     	; 0x9402 <ceil+0x1c>
    93f0:	91 11       	cpse	r25, r1
    93f2:	16 f4       	brtc	.+4      	; 0x93f8 <ceil+0x12>
    93f4:	0c 94 a4 4b 	jmp	0x9748	; 0x9748 <__fp_szero>
    93f8:	60 e0       	ldi	r22, 0x00	; 0
    93fa:	70 e0       	ldi	r23, 0x00	; 0
    93fc:	80 e8       	ldi	r24, 0x80	; 128
    93fe:	9f e3       	ldi	r25, 0x3F	; 63
    9400:	08 95       	ret
    9402:	26 f0       	brts	.+8      	; 0x940c <ceil+0x26>
    9404:	1b 16       	cp	r1, r27
    9406:	61 1d       	adc	r22, r1
    9408:	71 1d       	adc	r23, r1
    940a:	81 1d       	adc	r24, r1
    940c:	0c 94 1e 4b 	jmp	0x963c	; 0x963c <__fp_mintl>
    9410:	0c 94 39 4b 	jmp	0x9672	; 0x9672 <__fp_mpack>

00009414 <__cmpsf2>:
    9414:	0e 94 f4 4a 	call	0x95e8	; 0x95e8 <__fp_cmp>
    9418:	08 f4       	brcc	.+2      	; 0x941c <__cmpsf2+0x8>
    941a:	81 e0       	ldi	r24, 0x01	; 1
    941c:	08 95       	ret

0000941e <__divsf3>:
    941e:	0e 94 23 4a 	call	0x9446	; 0x9446 <__divsf3x>
    9422:	0c 94 58 4b 	jmp	0x96b0	; 0x96b0 <__fp_round>
    9426:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <__fp_pscB>
    942a:	58 f0       	brcs	.+22     	; 0x9442 <__divsf3+0x24>
    942c:	0e 94 4a 4b 	call	0x9694	; 0x9694 <__fp_pscA>
    9430:	40 f0       	brcs	.+16     	; 0x9442 <__divsf3+0x24>
    9432:	29 f4       	brne	.+10     	; 0x943e <__divsf3+0x20>
    9434:	5f 3f       	cpi	r21, 0xFF	; 255
    9436:	29 f0       	breq	.+10     	; 0x9442 <__divsf3+0x24>
    9438:	0c 94 18 4b 	jmp	0x9630	; 0x9630 <__fp_inf>
    943c:	51 11       	cpse	r21, r1
    943e:	0c 94 a4 4b 	jmp	0x9748	; 0x9748 <__fp_szero>
    9442:	0c 94 47 4b 	jmp	0x968e	; 0x968e <__fp_nan>

00009446 <__divsf3x>:
    9446:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__fp_split3>
    944a:	68 f3       	brcs	.-38     	; 0x9426 <__divsf3+0x8>

0000944c <__divsf3_pse>:
    944c:	99 23       	and	r25, r25
    944e:	b1 f3       	breq	.-20     	; 0x943c <__divsf3+0x1e>
    9450:	55 23       	and	r21, r21
    9452:	91 f3       	breq	.-28     	; 0x9438 <__divsf3+0x1a>
    9454:	95 1b       	sub	r25, r21
    9456:	55 0b       	sbc	r21, r21
    9458:	bb 27       	eor	r27, r27
    945a:	aa 27       	eor	r26, r26
    945c:	62 17       	cp	r22, r18
    945e:	73 07       	cpc	r23, r19
    9460:	84 07       	cpc	r24, r20
    9462:	38 f0       	brcs	.+14     	; 0x9472 <__divsf3_pse+0x26>
    9464:	9f 5f       	subi	r25, 0xFF	; 255
    9466:	5f 4f       	sbci	r21, 0xFF	; 255
    9468:	22 0f       	add	r18, r18
    946a:	33 1f       	adc	r19, r19
    946c:	44 1f       	adc	r20, r20
    946e:	aa 1f       	adc	r26, r26
    9470:	a9 f3       	breq	.-22     	; 0x945c <__divsf3_pse+0x10>
    9472:	35 d0       	rcall	.+106    	; 0x94de <__divsf3_pse+0x92>
    9474:	0e 2e       	mov	r0, r30
    9476:	3a f0       	brmi	.+14     	; 0x9486 <__divsf3_pse+0x3a>
    9478:	e0 e8       	ldi	r30, 0x80	; 128
    947a:	32 d0       	rcall	.+100    	; 0x94e0 <__divsf3_pse+0x94>
    947c:	91 50       	subi	r25, 0x01	; 1
    947e:	50 40       	sbci	r21, 0x00	; 0
    9480:	e6 95       	lsr	r30
    9482:	00 1c       	adc	r0, r0
    9484:	ca f7       	brpl	.-14     	; 0x9478 <__divsf3_pse+0x2c>
    9486:	2b d0       	rcall	.+86     	; 0x94de <__divsf3_pse+0x92>
    9488:	fe 2f       	mov	r31, r30
    948a:	29 d0       	rcall	.+82     	; 0x94de <__divsf3_pse+0x92>
    948c:	66 0f       	add	r22, r22
    948e:	77 1f       	adc	r23, r23
    9490:	88 1f       	adc	r24, r24
    9492:	bb 1f       	adc	r27, r27
    9494:	26 17       	cp	r18, r22
    9496:	37 07       	cpc	r19, r23
    9498:	48 07       	cpc	r20, r24
    949a:	ab 07       	cpc	r26, r27
    949c:	b0 e8       	ldi	r27, 0x80	; 128
    949e:	09 f0       	breq	.+2      	; 0x94a2 <__divsf3_pse+0x56>
    94a0:	bb 0b       	sbc	r27, r27
    94a2:	80 2d       	mov	r24, r0
    94a4:	bf 01       	movw	r22, r30
    94a6:	ff 27       	eor	r31, r31
    94a8:	93 58       	subi	r25, 0x83	; 131
    94aa:	5f 4f       	sbci	r21, 0xFF	; 255
    94ac:	3a f0       	brmi	.+14     	; 0x94bc <__divsf3_pse+0x70>
    94ae:	9e 3f       	cpi	r25, 0xFE	; 254
    94b0:	51 05       	cpc	r21, r1
    94b2:	78 f0       	brcs	.+30     	; 0x94d2 <__divsf3_pse+0x86>
    94b4:	0c 94 18 4b 	jmp	0x9630	; 0x9630 <__fp_inf>
    94b8:	0c 94 a4 4b 	jmp	0x9748	; 0x9748 <__fp_szero>
    94bc:	5f 3f       	cpi	r21, 0xFF	; 255
    94be:	e4 f3       	brlt	.-8      	; 0x94b8 <__divsf3_pse+0x6c>
    94c0:	98 3e       	cpi	r25, 0xE8	; 232
    94c2:	d4 f3       	brlt	.-12     	; 0x94b8 <__divsf3_pse+0x6c>
    94c4:	86 95       	lsr	r24
    94c6:	77 95       	ror	r23
    94c8:	67 95       	ror	r22
    94ca:	b7 95       	ror	r27
    94cc:	f7 95       	ror	r31
    94ce:	9f 5f       	subi	r25, 0xFF	; 255
    94d0:	c9 f7       	brne	.-14     	; 0x94c4 <__divsf3_pse+0x78>
    94d2:	88 0f       	add	r24, r24
    94d4:	91 1d       	adc	r25, r1
    94d6:	96 95       	lsr	r25
    94d8:	87 95       	ror	r24
    94da:	97 f9       	bld	r25, 7
    94dc:	08 95       	ret
    94de:	e1 e0       	ldi	r30, 0x01	; 1
    94e0:	66 0f       	add	r22, r22
    94e2:	77 1f       	adc	r23, r23
    94e4:	88 1f       	adc	r24, r24
    94e6:	bb 1f       	adc	r27, r27
    94e8:	62 17       	cp	r22, r18
    94ea:	73 07       	cpc	r23, r19
    94ec:	84 07       	cpc	r24, r20
    94ee:	ba 07       	cpc	r27, r26
    94f0:	20 f0       	brcs	.+8      	; 0x94fa <__divsf3_pse+0xae>
    94f2:	62 1b       	sub	r22, r18
    94f4:	73 0b       	sbc	r23, r19
    94f6:	84 0b       	sbc	r24, r20
    94f8:	ba 0b       	sbc	r27, r26
    94fa:	ee 1f       	adc	r30, r30
    94fc:	88 f7       	brcc	.-30     	; 0x94e0 <__divsf3_pse+0x94>
    94fe:	e0 95       	com	r30
    9500:	08 95       	ret

00009502 <__fixsfsi>:
    9502:	0e 94 88 4a 	call	0x9510	; 0x9510 <__fixunssfsi>
    9506:	68 94       	set
    9508:	b1 11       	cpse	r27, r1
    950a:	0c 94 a4 4b 	jmp	0x9748	; 0x9748 <__fp_szero>
    950e:	08 95       	ret

00009510 <__fixunssfsi>:
    9510:	0e 94 71 4b 	call	0x96e2	; 0x96e2 <__fp_splitA>
    9514:	88 f0       	brcs	.+34     	; 0x9538 <__fixunssfsi+0x28>
    9516:	9f 57       	subi	r25, 0x7F	; 127
    9518:	98 f0       	brcs	.+38     	; 0x9540 <__fixunssfsi+0x30>
    951a:	b9 2f       	mov	r27, r25
    951c:	99 27       	eor	r25, r25
    951e:	b7 51       	subi	r27, 0x17	; 23
    9520:	b0 f0       	brcs	.+44     	; 0x954e <__fixunssfsi+0x3e>
    9522:	e1 f0       	breq	.+56     	; 0x955c <__fixunssfsi+0x4c>
    9524:	66 0f       	add	r22, r22
    9526:	77 1f       	adc	r23, r23
    9528:	88 1f       	adc	r24, r24
    952a:	99 1f       	adc	r25, r25
    952c:	1a f0       	brmi	.+6      	; 0x9534 <__fixunssfsi+0x24>
    952e:	ba 95       	dec	r27
    9530:	c9 f7       	brne	.-14     	; 0x9524 <__fixunssfsi+0x14>
    9532:	14 c0       	rjmp	.+40     	; 0x955c <__fixunssfsi+0x4c>
    9534:	b1 30       	cpi	r27, 0x01	; 1
    9536:	91 f0       	breq	.+36     	; 0x955c <__fixunssfsi+0x4c>
    9538:	0e 94 a3 4b 	call	0x9746	; 0x9746 <__fp_zero>
    953c:	b1 e0       	ldi	r27, 0x01	; 1
    953e:	08 95       	ret
    9540:	0c 94 a3 4b 	jmp	0x9746	; 0x9746 <__fp_zero>
    9544:	67 2f       	mov	r22, r23
    9546:	78 2f       	mov	r23, r24
    9548:	88 27       	eor	r24, r24
    954a:	b8 5f       	subi	r27, 0xF8	; 248
    954c:	39 f0       	breq	.+14     	; 0x955c <__fixunssfsi+0x4c>
    954e:	b9 3f       	cpi	r27, 0xF9	; 249
    9550:	cc f3       	brlt	.-14     	; 0x9544 <__fixunssfsi+0x34>
    9552:	86 95       	lsr	r24
    9554:	77 95       	ror	r23
    9556:	67 95       	ror	r22
    9558:	b3 95       	inc	r27
    955a:	d9 f7       	brne	.-10     	; 0x9552 <__fixunssfsi+0x42>
    955c:	3e f4       	brtc	.+14     	; 0x956c <__fixunssfsi+0x5c>
    955e:	90 95       	com	r25
    9560:	80 95       	com	r24
    9562:	70 95       	com	r23
    9564:	61 95       	neg	r22
    9566:	7f 4f       	sbci	r23, 0xFF	; 255
    9568:	8f 4f       	sbci	r24, 0xFF	; 255
    956a:	9f 4f       	sbci	r25, 0xFF	; 255
    956c:	08 95       	ret

0000956e <__floatunsisf>:
    956e:	e8 94       	clt
    9570:	09 c0       	rjmp	.+18     	; 0x9584 <__floatsisf+0x12>

00009572 <__floatsisf>:
    9572:	97 fb       	bst	r25, 7
    9574:	3e f4       	brtc	.+14     	; 0x9584 <__floatsisf+0x12>
    9576:	90 95       	com	r25
    9578:	80 95       	com	r24
    957a:	70 95       	com	r23
    957c:	61 95       	neg	r22
    957e:	7f 4f       	sbci	r23, 0xFF	; 255
    9580:	8f 4f       	sbci	r24, 0xFF	; 255
    9582:	9f 4f       	sbci	r25, 0xFF	; 255
    9584:	99 23       	and	r25, r25
    9586:	a9 f0       	breq	.+42     	; 0x95b2 <__floatsisf+0x40>
    9588:	f9 2f       	mov	r31, r25
    958a:	96 e9       	ldi	r25, 0x96	; 150
    958c:	bb 27       	eor	r27, r27
    958e:	93 95       	inc	r25
    9590:	f6 95       	lsr	r31
    9592:	87 95       	ror	r24
    9594:	77 95       	ror	r23
    9596:	67 95       	ror	r22
    9598:	b7 95       	ror	r27
    959a:	f1 11       	cpse	r31, r1
    959c:	f8 cf       	rjmp	.-16     	; 0x958e <__floatsisf+0x1c>
    959e:	fa f4       	brpl	.+62     	; 0x95de <__floatsisf+0x6c>
    95a0:	bb 0f       	add	r27, r27
    95a2:	11 f4       	brne	.+4      	; 0x95a8 <__floatsisf+0x36>
    95a4:	60 ff       	sbrs	r22, 0
    95a6:	1b c0       	rjmp	.+54     	; 0x95de <__floatsisf+0x6c>
    95a8:	6f 5f       	subi	r22, 0xFF	; 255
    95aa:	7f 4f       	sbci	r23, 0xFF	; 255
    95ac:	8f 4f       	sbci	r24, 0xFF	; 255
    95ae:	9f 4f       	sbci	r25, 0xFF	; 255
    95b0:	16 c0       	rjmp	.+44     	; 0x95de <__floatsisf+0x6c>
    95b2:	88 23       	and	r24, r24
    95b4:	11 f0       	breq	.+4      	; 0x95ba <__floatsisf+0x48>
    95b6:	96 e9       	ldi	r25, 0x96	; 150
    95b8:	11 c0       	rjmp	.+34     	; 0x95dc <__floatsisf+0x6a>
    95ba:	77 23       	and	r23, r23
    95bc:	21 f0       	breq	.+8      	; 0x95c6 <__floatsisf+0x54>
    95be:	9e e8       	ldi	r25, 0x8E	; 142
    95c0:	87 2f       	mov	r24, r23
    95c2:	76 2f       	mov	r23, r22
    95c4:	05 c0       	rjmp	.+10     	; 0x95d0 <__floatsisf+0x5e>
    95c6:	66 23       	and	r22, r22
    95c8:	71 f0       	breq	.+28     	; 0x95e6 <__floatsisf+0x74>
    95ca:	96 e8       	ldi	r25, 0x86	; 134
    95cc:	86 2f       	mov	r24, r22
    95ce:	70 e0       	ldi	r23, 0x00	; 0
    95d0:	60 e0       	ldi	r22, 0x00	; 0
    95d2:	2a f0       	brmi	.+10     	; 0x95de <__floatsisf+0x6c>
    95d4:	9a 95       	dec	r25
    95d6:	66 0f       	add	r22, r22
    95d8:	77 1f       	adc	r23, r23
    95da:	88 1f       	adc	r24, r24
    95dc:	da f7       	brpl	.-10     	; 0x95d4 <__floatsisf+0x62>
    95de:	88 0f       	add	r24, r24
    95e0:	96 95       	lsr	r25
    95e2:	87 95       	ror	r24
    95e4:	97 f9       	bld	r25, 7
    95e6:	08 95       	ret

000095e8 <__fp_cmp>:
    95e8:	99 0f       	add	r25, r25
    95ea:	00 08       	sbc	r0, r0
    95ec:	55 0f       	add	r21, r21
    95ee:	aa 0b       	sbc	r26, r26
    95f0:	e0 e8       	ldi	r30, 0x80	; 128
    95f2:	fe ef       	ldi	r31, 0xFE	; 254
    95f4:	16 16       	cp	r1, r22
    95f6:	17 06       	cpc	r1, r23
    95f8:	e8 07       	cpc	r30, r24
    95fa:	f9 07       	cpc	r31, r25
    95fc:	c0 f0       	brcs	.+48     	; 0x962e <__fp_cmp+0x46>
    95fe:	12 16       	cp	r1, r18
    9600:	13 06       	cpc	r1, r19
    9602:	e4 07       	cpc	r30, r20
    9604:	f5 07       	cpc	r31, r21
    9606:	98 f0       	brcs	.+38     	; 0x962e <__fp_cmp+0x46>
    9608:	62 1b       	sub	r22, r18
    960a:	73 0b       	sbc	r23, r19
    960c:	84 0b       	sbc	r24, r20
    960e:	95 0b       	sbc	r25, r21
    9610:	39 f4       	brne	.+14     	; 0x9620 <__fp_cmp+0x38>
    9612:	0a 26       	eor	r0, r26
    9614:	61 f0       	breq	.+24     	; 0x962e <__fp_cmp+0x46>
    9616:	23 2b       	or	r18, r19
    9618:	24 2b       	or	r18, r20
    961a:	25 2b       	or	r18, r21
    961c:	21 f4       	brne	.+8      	; 0x9626 <__fp_cmp+0x3e>
    961e:	08 95       	ret
    9620:	0a 26       	eor	r0, r26
    9622:	09 f4       	brne	.+2      	; 0x9626 <__fp_cmp+0x3e>
    9624:	a1 40       	sbci	r26, 0x01	; 1
    9626:	a6 95       	lsr	r26
    9628:	8f ef       	ldi	r24, 0xFF	; 255
    962a:	81 1d       	adc	r24, r1
    962c:	81 1d       	adc	r24, r1
    962e:	08 95       	ret

00009630 <__fp_inf>:
    9630:	97 f9       	bld	r25, 7
    9632:	9f 67       	ori	r25, 0x7F	; 127
    9634:	80 e8       	ldi	r24, 0x80	; 128
    9636:	70 e0       	ldi	r23, 0x00	; 0
    9638:	60 e0       	ldi	r22, 0x00	; 0
    963a:	08 95       	ret

0000963c <__fp_mintl>:
    963c:	88 23       	and	r24, r24
    963e:	71 f4       	brne	.+28     	; 0x965c <__fp_mintl+0x20>
    9640:	77 23       	and	r23, r23
    9642:	21 f0       	breq	.+8      	; 0x964c <__fp_mintl+0x10>
    9644:	98 50       	subi	r25, 0x08	; 8
    9646:	87 2b       	or	r24, r23
    9648:	76 2f       	mov	r23, r22
    964a:	07 c0       	rjmp	.+14     	; 0x965a <__fp_mintl+0x1e>
    964c:	66 23       	and	r22, r22
    964e:	11 f4       	brne	.+4      	; 0x9654 <__fp_mintl+0x18>
    9650:	99 27       	eor	r25, r25
    9652:	0d c0       	rjmp	.+26     	; 0x966e <__fp_mintl+0x32>
    9654:	90 51       	subi	r25, 0x10	; 16
    9656:	86 2b       	or	r24, r22
    9658:	70 e0       	ldi	r23, 0x00	; 0
    965a:	60 e0       	ldi	r22, 0x00	; 0
    965c:	2a f0       	brmi	.+10     	; 0x9668 <__fp_mintl+0x2c>
    965e:	9a 95       	dec	r25
    9660:	66 0f       	add	r22, r22
    9662:	77 1f       	adc	r23, r23
    9664:	88 1f       	adc	r24, r24
    9666:	da f7       	brpl	.-10     	; 0x965e <__fp_mintl+0x22>
    9668:	88 0f       	add	r24, r24
    966a:	96 95       	lsr	r25
    966c:	87 95       	ror	r24
    966e:	97 f9       	bld	r25, 7
    9670:	08 95       	ret

00009672 <__fp_mpack>:
    9672:	9f 3f       	cpi	r25, 0xFF	; 255
    9674:	31 f0       	breq	.+12     	; 0x9682 <__fp_mpack_finite+0xc>

00009676 <__fp_mpack_finite>:
    9676:	91 50       	subi	r25, 0x01	; 1
    9678:	20 f4       	brcc	.+8      	; 0x9682 <__fp_mpack_finite+0xc>
    967a:	87 95       	ror	r24
    967c:	77 95       	ror	r23
    967e:	67 95       	ror	r22
    9680:	b7 95       	ror	r27
    9682:	88 0f       	add	r24, r24
    9684:	91 1d       	adc	r25, r1
    9686:	96 95       	lsr	r25
    9688:	87 95       	ror	r24
    968a:	97 f9       	bld	r25, 7
    968c:	08 95       	ret

0000968e <__fp_nan>:
    968e:	9f ef       	ldi	r25, 0xFF	; 255
    9690:	80 ec       	ldi	r24, 0xC0	; 192
    9692:	08 95       	ret

00009694 <__fp_pscA>:
    9694:	00 24       	eor	r0, r0
    9696:	0a 94       	dec	r0
    9698:	16 16       	cp	r1, r22
    969a:	17 06       	cpc	r1, r23
    969c:	18 06       	cpc	r1, r24
    969e:	09 06       	cpc	r0, r25
    96a0:	08 95       	ret

000096a2 <__fp_pscB>:
    96a2:	00 24       	eor	r0, r0
    96a4:	0a 94       	dec	r0
    96a6:	12 16       	cp	r1, r18
    96a8:	13 06       	cpc	r1, r19
    96aa:	14 06       	cpc	r1, r20
    96ac:	05 06       	cpc	r0, r21
    96ae:	08 95       	ret

000096b0 <__fp_round>:
    96b0:	09 2e       	mov	r0, r25
    96b2:	03 94       	inc	r0
    96b4:	00 0c       	add	r0, r0
    96b6:	11 f4       	brne	.+4      	; 0x96bc <__fp_round+0xc>
    96b8:	88 23       	and	r24, r24
    96ba:	52 f0       	brmi	.+20     	; 0x96d0 <__fp_round+0x20>
    96bc:	bb 0f       	add	r27, r27
    96be:	40 f4       	brcc	.+16     	; 0x96d0 <__fp_round+0x20>
    96c0:	bf 2b       	or	r27, r31
    96c2:	11 f4       	brne	.+4      	; 0x96c8 <__fp_round+0x18>
    96c4:	60 ff       	sbrs	r22, 0
    96c6:	04 c0       	rjmp	.+8      	; 0x96d0 <__fp_round+0x20>
    96c8:	6f 5f       	subi	r22, 0xFF	; 255
    96ca:	7f 4f       	sbci	r23, 0xFF	; 255
    96cc:	8f 4f       	sbci	r24, 0xFF	; 255
    96ce:	9f 4f       	sbci	r25, 0xFF	; 255
    96d0:	08 95       	ret

000096d2 <__fp_split3>:
    96d2:	57 fd       	sbrc	r21, 7
    96d4:	90 58       	subi	r25, 0x80	; 128
    96d6:	44 0f       	add	r20, r20
    96d8:	55 1f       	adc	r21, r21
    96da:	59 f0       	breq	.+22     	; 0x96f2 <__fp_splitA+0x10>
    96dc:	5f 3f       	cpi	r21, 0xFF	; 255
    96de:	71 f0       	breq	.+28     	; 0x96fc <__fp_splitA+0x1a>
    96e0:	47 95       	ror	r20

000096e2 <__fp_splitA>:
    96e2:	88 0f       	add	r24, r24
    96e4:	97 fb       	bst	r25, 7
    96e6:	99 1f       	adc	r25, r25
    96e8:	61 f0       	breq	.+24     	; 0x9702 <__fp_splitA+0x20>
    96ea:	9f 3f       	cpi	r25, 0xFF	; 255
    96ec:	79 f0       	breq	.+30     	; 0x970c <__fp_splitA+0x2a>
    96ee:	87 95       	ror	r24
    96f0:	08 95       	ret
    96f2:	12 16       	cp	r1, r18
    96f4:	13 06       	cpc	r1, r19
    96f6:	14 06       	cpc	r1, r20
    96f8:	55 1f       	adc	r21, r21
    96fa:	f2 cf       	rjmp	.-28     	; 0x96e0 <__fp_split3+0xe>
    96fc:	46 95       	lsr	r20
    96fe:	f1 df       	rcall	.-30     	; 0x96e2 <__fp_splitA>
    9700:	08 c0       	rjmp	.+16     	; 0x9712 <__fp_splitA+0x30>
    9702:	16 16       	cp	r1, r22
    9704:	17 06       	cpc	r1, r23
    9706:	18 06       	cpc	r1, r24
    9708:	99 1f       	adc	r25, r25
    970a:	f1 cf       	rjmp	.-30     	; 0x96ee <__fp_splitA+0xc>
    970c:	86 95       	lsr	r24
    970e:	71 05       	cpc	r23, r1
    9710:	61 05       	cpc	r22, r1
    9712:	08 94       	sec
    9714:	08 95       	ret

00009716 <__fp_trunc>:
    9716:	0e 94 71 4b 	call	0x96e2	; 0x96e2 <__fp_splitA>
    971a:	a0 f0       	brcs	.+40     	; 0x9744 <__fp_trunc+0x2e>
    971c:	be e7       	ldi	r27, 0x7E	; 126
    971e:	b9 17       	cp	r27, r25
    9720:	88 f4       	brcc	.+34     	; 0x9744 <__fp_trunc+0x2e>
    9722:	bb 27       	eor	r27, r27
    9724:	9f 38       	cpi	r25, 0x8F	; 143
    9726:	60 f4       	brcc	.+24     	; 0x9740 <__fp_trunc+0x2a>
    9728:	16 16       	cp	r1, r22
    972a:	b1 1d       	adc	r27, r1
    972c:	67 2f       	mov	r22, r23
    972e:	78 2f       	mov	r23, r24
    9730:	88 27       	eor	r24, r24
    9732:	98 5f       	subi	r25, 0xF8	; 248
    9734:	f7 cf       	rjmp	.-18     	; 0x9724 <__fp_trunc+0xe>
    9736:	86 95       	lsr	r24
    9738:	77 95       	ror	r23
    973a:	67 95       	ror	r22
    973c:	b1 1d       	adc	r27, r1
    973e:	93 95       	inc	r25
    9740:	96 39       	cpi	r25, 0x96	; 150
    9742:	c8 f3       	brcs	.-14     	; 0x9736 <__fp_trunc+0x20>
    9744:	08 95       	ret

00009746 <__fp_zero>:
    9746:	e8 94       	clt

00009748 <__fp_szero>:
    9748:	bb 27       	eor	r27, r27
    974a:	66 27       	eor	r22, r22
    974c:	77 27       	eor	r23, r23
    974e:	cb 01       	movw	r24, r22
    9750:	97 f9       	bld	r25, 7
    9752:	08 95       	ret

00009754 <__gesf2>:
    9754:	0e 94 f4 4a 	call	0x95e8	; 0x95e8 <__fp_cmp>
    9758:	08 f4       	brcc	.+2      	; 0x975c <__gesf2+0x8>
    975a:	8f ef       	ldi	r24, 0xFF	; 255
    975c:	08 95       	ret

0000975e <__mulsf3>:
    975e:	0e 94 c2 4b 	call	0x9784	; 0x9784 <__mulsf3x>
    9762:	0c 94 58 4b 	jmp	0x96b0	; 0x96b0 <__fp_round>
    9766:	0e 94 4a 4b 	call	0x9694	; 0x9694 <__fp_pscA>
    976a:	38 f0       	brcs	.+14     	; 0x977a <__mulsf3+0x1c>
    976c:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <__fp_pscB>
    9770:	20 f0       	brcs	.+8      	; 0x977a <__mulsf3+0x1c>
    9772:	95 23       	and	r25, r21
    9774:	11 f0       	breq	.+4      	; 0x977a <__mulsf3+0x1c>
    9776:	0c 94 18 4b 	jmp	0x9630	; 0x9630 <__fp_inf>
    977a:	0c 94 47 4b 	jmp	0x968e	; 0x968e <__fp_nan>
    977e:	11 24       	eor	r1, r1
    9780:	0c 94 a4 4b 	jmp	0x9748	; 0x9748 <__fp_szero>

00009784 <__mulsf3x>:
    9784:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <__fp_split3>
    9788:	70 f3       	brcs	.-36     	; 0x9766 <__mulsf3+0x8>

0000978a <__mulsf3_pse>:
    978a:	95 9f       	mul	r25, r21
    978c:	c1 f3       	breq	.-16     	; 0x977e <__mulsf3+0x20>
    978e:	95 0f       	add	r25, r21
    9790:	50 e0       	ldi	r21, 0x00	; 0
    9792:	55 1f       	adc	r21, r21
    9794:	62 9f       	mul	r22, r18
    9796:	f0 01       	movw	r30, r0
    9798:	72 9f       	mul	r23, r18
    979a:	bb 27       	eor	r27, r27
    979c:	f0 0d       	add	r31, r0
    979e:	b1 1d       	adc	r27, r1
    97a0:	63 9f       	mul	r22, r19
    97a2:	aa 27       	eor	r26, r26
    97a4:	f0 0d       	add	r31, r0
    97a6:	b1 1d       	adc	r27, r1
    97a8:	aa 1f       	adc	r26, r26
    97aa:	64 9f       	mul	r22, r20
    97ac:	66 27       	eor	r22, r22
    97ae:	b0 0d       	add	r27, r0
    97b0:	a1 1d       	adc	r26, r1
    97b2:	66 1f       	adc	r22, r22
    97b4:	82 9f       	mul	r24, r18
    97b6:	22 27       	eor	r18, r18
    97b8:	b0 0d       	add	r27, r0
    97ba:	a1 1d       	adc	r26, r1
    97bc:	62 1f       	adc	r22, r18
    97be:	73 9f       	mul	r23, r19
    97c0:	b0 0d       	add	r27, r0
    97c2:	a1 1d       	adc	r26, r1
    97c4:	62 1f       	adc	r22, r18
    97c6:	83 9f       	mul	r24, r19
    97c8:	a0 0d       	add	r26, r0
    97ca:	61 1d       	adc	r22, r1
    97cc:	22 1f       	adc	r18, r18
    97ce:	74 9f       	mul	r23, r20
    97d0:	33 27       	eor	r19, r19
    97d2:	a0 0d       	add	r26, r0
    97d4:	61 1d       	adc	r22, r1
    97d6:	23 1f       	adc	r18, r19
    97d8:	84 9f       	mul	r24, r20
    97da:	60 0d       	add	r22, r0
    97dc:	21 1d       	adc	r18, r1
    97de:	82 2f       	mov	r24, r18
    97e0:	76 2f       	mov	r23, r22
    97e2:	6a 2f       	mov	r22, r26
    97e4:	11 24       	eor	r1, r1
    97e6:	9f 57       	subi	r25, 0x7F	; 127
    97e8:	50 40       	sbci	r21, 0x00	; 0
    97ea:	9a f0       	brmi	.+38     	; 0x9812 <__mulsf3_pse+0x88>
    97ec:	f1 f0       	breq	.+60     	; 0x982a <__mulsf3_pse+0xa0>
    97ee:	88 23       	and	r24, r24
    97f0:	4a f0       	brmi	.+18     	; 0x9804 <__mulsf3_pse+0x7a>
    97f2:	ee 0f       	add	r30, r30
    97f4:	ff 1f       	adc	r31, r31
    97f6:	bb 1f       	adc	r27, r27
    97f8:	66 1f       	adc	r22, r22
    97fa:	77 1f       	adc	r23, r23
    97fc:	88 1f       	adc	r24, r24
    97fe:	91 50       	subi	r25, 0x01	; 1
    9800:	50 40       	sbci	r21, 0x00	; 0
    9802:	a9 f7       	brne	.-22     	; 0x97ee <__mulsf3_pse+0x64>
    9804:	9e 3f       	cpi	r25, 0xFE	; 254
    9806:	51 05       	cpc	r21, r1
    9808:	80 f0       	brcs	.+32     	; 0x982a <__mulsf3_pse+0xa0>
    980a:	0c 94 18 4b 	jmp	0x9630	; 0x9630 <__fp_inf>
    980e:	0c 94 a4 4b 	jmp	0x9748	; 0x9748 <__fp_szero>
    9812:	5f 3f       	cpi	r21, 0xFF	; 255
    9814:	e4 f3       	brlt	.-8      	; 0x980e <__mulsf3_pse+0x84>
    9816:	98 3e       	cpi	r25, 0xE8	; 232
    9818:	d4 f3       	brlt	.-12     	; 0x980e <__mulsf3_pse+0x84>
    981a:	86 95       	lsr	r24
    981c:	77 95       	ror	r23
    981e:	67 95       	ror	r22
    9820:	b7 95       	ror	r27
    9822:	f7 95       	ror	r31
    9824:	e7 95       	ror	r30
    9826:	9f 5f       	subi	r25, 0xFF	; 255
    9828:	c1 f7       	brne	.-16     	; 0x981a <__mulsf3_pse+0x90>
    982a:	fe 2b       	or	r31, r30
    982c:	88 0f       	add	r24, r24
    982e:	91 1d       	adc	r25, r1
    9830:	96 95       	lsr	r25
    9832:	87 95       	ror	r24
    9834:	97 f9       	bld	r25, 7
    9836:	08 95       	ret

00009838 <__mulsi3>:
    9838:	db 01       	movw	r26, r22
    983a:	8f 93       	push	r24
    983c:	9f 93       	push	r25
    983e:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__muluhisi3>
    9842:	bf 91       	pop	r27
    9844:	af 91       	pop	r26
    9846:	a2 9f       	mul	r26, r18
    9848:	80 0d       	add	r24, r0
    984a:	91 1d       	adc	r25, r1
    984c:	a3 9f       	mul	r26, r19
    984e:	90 0d       	add	r25, r0
    9850:	b2 9f       	mul	r27, r18
    9852:	90 0d       	add	r25, r0
    9854:	11 24       	eor	r1, r1
    9856:	08 95       	ret

00009858 <__udivmodhi4>:
    9858:	aa 1b       	sub	r26, r26
    985a:	bb 1b       	sub	r27, r27
    985c:	51 e1       	ldi	r21, 0x11	; 17
    985e:	07 c0       	rjmp	.+14     	; 0x986e <__udivmodhi4_ep>

00009860 <__udivmodhi4_loop>:
    9860:	aa 1f       	adc	r26, r26
    9862:	bb 1f       	adc	r27, r27
    9864:	a6 17       	cp	r26, r22
    9866:	b7 07       	cpc	r27, r23
    9868:	10 f0       	brcs	.+4      	; 0x986e <__udivmodhi4_ep>
    986a:	a6 1b       	sub	r26, r22
    986c:	b7 0b       	sbc	r27, r23

0000986e <__udivmodhi4_ep>:
    986e:	88 1f       	adc	r24, r24
    9870:	99 1f       	adc	r25, r25
    9872:	5a 95       	dec	r21
    9874:	a9 f7       	brne	.-22     	; 0x9860 <__udivmodhi4_loop>
    9876:	80 95       	com	r24
    9878:	90 95       	com	r25
    987a:	bc 01       	movw	r22, r24
    987c:	cd 01       	movw	r24, r26
    987e:	08 95       	ret

00009880 <__divmodhi4>:
    9880:	97 fb       	bst	r25, 7
    9882:	07 2e       	mov	r0, r23
    9884:	16 f4       	brtc	.+4      	; 0x988a <__divmodhi4+0xa>
    9886:	00 94       	com	r0
    9888:	07 d0       	rcall	.+14     	; 0x9898 <__divmodhi4_neg1>
    988a:	77 fd       	sbrc	r23, 7
    988c:	09 d0       	rcall	.+18     	; 0x98a0 <__divmodhi4_neg2>
    988e:	0e 94 2c 4c 	call	0x9858	; 0x9858 <__udivmodhi4>
    9892:	07 fc       	sbrc	r0, 7
    9894:	05 d0       	rcall	.+10     	; 0x98a0 <__divmodhi4_neg2>
    9896:	3e f4       	brtc	.+14     	; 0x98a6 <__divmodhi4_exit>

00009898 <__divmodhi4_neg1>:
    9898:	90 95       	com	r25
    989a:	81 95       	neg	r24
    989c:	9f 4f       	sbci	r25, 0xFF	; 255
    989e:	08 95       	ret

000098a0 <__divmodhi4_neg2>:
    98a0:	70 95       	com	r23
    98a2:	61 95       	neg	r22
    98a4:	7f 4f       	sbci	r23, 0xFF	; 255

000098a6 <__divmodhi4_exit>:
    98a6:	08 95       	ret

000098a8 <__udivmodsi4>:
    98a8:	a1 e2       	ldi	r26, 0x21	; 33
    98aa:	1a 2e       	mov	r1, r26
    98ac:	aa 1b       	sub	r26, r26
    98ae:	bb 1b       	sub	r27, r27
    98b0:	fd 01       	movw	r30, r26
    98b2:	0d c0       	rjmp	.+26     	; 0x98ce <__udivmodsi4_ep>

000098b4 <__udivmodsi4_loop>:
    98b4:	aa 1f       	adc	r26, r26
    98b6:	bb 1f       	adc	r27, r27
    98b8:	ee 1f       	adc	r30, r30
    98ba:	ff 1f       	adc	r31, r31
    98bc:	a2 17       	cp	r26, r18
    98be:	b3 07       	cpc	r27, r19
    98c0:	e4 07       	cpc	r30, r20
    98c2:	f5 07       	cpc	r31, r21
    98c4:	20 f0       	brcs	.+8      	; 0x98ce <__udivmodsi4_ep>
    98c6:	a2 1b       	sub	r26, r18
    98c8:	b3 0b       	sbc	r27, r19
    98ca:	e4 0b       	sbc	r30, r20
    98cc:	f5 0b       	sbc	r31, r21

000098ce <__udivmodsi4_ep>:
    98ce:	66 1f       	adc	r22, r22
    98d0:	77 1f       	adc	r23, r23
    98d2:	88 1f       	adc	r24, r24
    98d4:	99 1f       	adc	r25, r25
    98d6:	1a 94       	dec	r1
    98d8:	69 f7       	brne	.-38     	; 0x98b4 <__udivmodsi4_loop>
    98da:	60 95       	com	r22
    98dc:	70 95       	com	r23
    98de:	80 95       	com	r24
    98e0:	90 95       	com	r25
    98e2:	9b 01       	movw	r18, r22
    98e4:	ac 01       	movw	r20, r24
    98e6:	bd 01       	movw	r22, r26
    98e8:	cf 01       	movw	r24, r30
    98ea:	08 95       	ret

000098ec <__divmodsi4>:
    98ec:	05 2e       	mov	r0, r21
    98ee:	97 fb       	bst	r25, 7
    98f0:	1e f4       	brtc	.+6      	; 0x98f8 <__divmodsi4+0xc>
    98f2:	00 94       	com	r0
    98f4:	0e 94 8d 4c 	call	0x991a	; 0x991a <__negsi2>
    98f8:	57 fd       	sbrc	r21, 7
    98fa:	07 d0       	rcall	.+14     	; 0x990a <__divmodsi4_neg2>
    98fc:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <__udivmodsi4>
    9900:	07 fc       	sbrc	r0, 7
    9902:	03 d0       	rcall	.+6      	; 0x990a <__divmodsi4_neg2>
    9904:	4e f4       	brtc	.+18     	; 0x9918 <__divmodsi4_exit>
    9906:	0c 94 8d 4c 	jmp	0x991a	; 0x991a <__negsi2>

0000990a <__divmodsi4_neg2>:
    990a:	50 95       	com	r21
    990c:	40 95       	com	r20
    990e:	30 95       	com	r19
    9910:	21 95       	neg	r18
    9912:	3f 4f       	sbci	r19, 0xFF	; 255
    9914:	4f 4f       	sbci	r20, 0xFF	; 255
    9916:	5f 4f       	sbci	r21, 0xFF	; 255

00009918 <__divmodsi4_exit>:
    9918:	08 95       	ret

0000991a <__negsi2>:
    991a:	90 95       	com	r25
    991c:	80 95       	com	r24
    991e:	70 95       	com	r23
    9920:	61 95       	neg	r22
    9922:	7f 4f       	sbci	r23, 0xFF	; 255
    9924:	8f 4f       	sbci	r24, 0xFF	; 255
    9926:	9f 4f       	sbci	r25, 0xFF	; 255
    9928:	08 95       	ret

0000992a <__tablejump2__>:
    992a:	ee 0f       	add	r30, r30
    992c:	ff 1f       	adc	r31, r31
    992e:	00 24       	eor	r0, r0
    9930:	00 1c       	adc	r0, r0
    9932:	0b be       	out	0x3b, r0	; 59
    9934:	07 90       	elpm	r0, Z+
    9936:	f6 91       	elpm	r31, Z
    9938:	e0 2d       	mov	r30, r0
    993a:	09 94       	ijmp

0000993c <__umulhisi3>:
    993c:	a2 9f       	mul	r26, r18
    993e:	b0 01       	movw	r22, r0
    9940:	b3 9f       	mul	r27, r19
    9942:	c0 01       	movw	r24, r0
    9944:	a3 9f       	mul	r26, r19
    9946:	70 0d       	add	r23, r0
    9948:	81 1d       	adc	r24, r1
    994a:	11 24       	eor	r1, r1
    994c:	91 1d       	adc	r25, r1
    994e:	b2 9f       	mul	r27, r18
    9950:	70 0d       	add	r23, r0
    9952:	81 1d       	adc	r24, r1
    9954:	11 24       	eor	r1, r1
    9956:	91 1d       	adc	r25, r1
    9958:	08 95       	ret

0000995a <__usmulhisi3>:
    995a:	0e 94 9e 4c 	call	0x993c	; 0x993c <__umulhisi3>

0000995e <__usmulhisi3_tail>:
    995e:	b7 ff       	sbrs	r27, 7
    9960:	08 95       	ret
    9962:	82 1b       	sub	r24, r18
    9964:	93 0b       	sbc	r25, r19
    9966:	08 95       	ret

00009968 <__muluhisi3>:
    9968:	0e 94 9e 4c 	call	0x993c	; 0x993c <__umulhisi3>
    996c:	a5 9f       	mul	r26, r21
    996e:	90 0d       	add	r25, r0
    9970:	b4 9f       	mul	r27, r20
    9972:	90 0d       	add	r25, r0
    9974:	a4 9f       	mul	r26, r20
    9976:	80 0d       	add	r24, r0
    9978:	91 1d       	adc	r25, r1
    997a:	11 24       	eor	r1, r1
    997c:	08 95       	ret

0000997e <__mulshisi3>:
    997e:	b7 ff       	sbrs	r27, 7
    9980:	0c 94 b4 4c 	jmp	0x9968	; 0x9968 <__muluhisi3>

00009984 <__mulohisi3>:
    9984:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__muluhisi3>
    9988:	82 1b       	sub	r24, r18
    998a:	93 0b       	sbc	r25, r19
    998c:	08 95       	ret

0000998e <malloc>:
    998e:	0f 93       	push	r16
    9990:	1f 93       	push	r17
    9992:	cf 93       	push	r28
    9994:	df 93       	push	r29
    9996:	82 30       	cpi	r24, 0x02	; 2
    9998:	91 05       	cpc	r25, r1
    999a:	10 f4       	brcc	.+4      	; 0x99a0 <malloc+0x12>
    999c:	82 e0       	ldi	r24, 0x02	; 2
    999e:	90 e0       	ldi	r25, 0x00	; 0
    99a0:	e0 91 97 4a 	lds	r30, 0x4A97	; 0x804a97 <__flp>
    99a4:	f0 91 98 4a 	lds	r31, 0x4A98	; 0x804a98 <__flp+0x1>
    99a8:	20 e0       	ldi	r18, 0x00	; 0
    99aa:	30 e0       	ldi	r19, 0x00	; 0
    99ac:	a0 e0       	ldi	r26, 0x00	; 0
    99ae:	b0 e0       	ldi	r27, 0x00	; 0
    99b0:	30 97       	sbiw	r30, 0x00	; 0
    99b2:	19 f1       	breq	.+70     	; 0x99fa <malloc+0x6c>
    99b4:	40 81       	ld	r20, Z
    99b6:	51 81       	ldd	r21, Z+1	; 0x01
    99b8:	02 81       	ldd	r16, Z+2	; 0x02
    99ba:	13 81       	ldd	r17, Z+3	; 0x03
    99bc:	48 17       	cp	r20, r24
    99be:	59 07       	cpc	r21, r25
    99c0:	c8 f0       	brcs	.+50     	; 0x99f4 <malloc+0x66>
    99c2:	84 17       	cp	r24, r20
    99c4:	95 07       	cpc	r25, r21
    99c6:	69 f4       	brne	.+26     	; 0x99e2 <malloc+0x54>
    99c8:	10 97       	sbiw	r26, 0x00	; 0
    99ca:	31 f0       	breq	.+12     	; 0x99d8 <malloc+0x4a>
    99cc:	12 96       	adiw	r26, 0x02	; 2
    99ce:	0c 93       	st	X, r16
    99d0:	12 97       	sbiw	r26, 0x02	; 2
    99d2:	13 96       	adiw	r26, 0x03	; 3
    99d4:	1c 93       	st	X, r17
    99d6:	27 c0       	rjmp	.+78     	; 0x9a26 <malloc+0x98>
    99d8:	00 93 97 4a 	sts	0x4A97, r16	; 0x804a97 <__flp>
    99dc:	10 93 98 4a 	sts	0x4A98, r17	; 0x804a98 <__flp+0x1>
    99e0:	22 c0       	rjmp	.+68     	; 0x9a26 <malloc+0x98>
    99e2:	21 15       	cp	r18, r1
    99e4:	31 05       	cpc	r19, r1
    99e6:	19 f0       	breq	.+6      	; 0x99ee <malloc+0x60>
    99e8:	42 17       	cp	r20, r18
    99ea:	53 07       	cpc	r21, r19
    99ec:	18 f4       	brcc	.+6      	; 0x99f4 <malloc+0x66>
    99ee:	9a 01       	movw	r18, r20
    99f0:	bd 01       	movw	r22, r26
    99f2:	ef 01       	movw	r28, r30
    99f4:	df 01       	movw	r26, r30
    99f6:	f8 01       	movw	r30, r16
    99f8:	db cf       	rjmp	.-74     	; 0x99b0 <malloc+0x22>
    99fa:	21 15       	cp	r18, r1
    99fc:	31 05       	cpc	r19, r1
    99fe:	f9 f0       	breq	.+62     	; 0x9a3e <malloc+0xb0>
    9a00:	28 1b       	sub	r18, r24
    9a02:	39 0b       	sbc	r19, r25
    9a04:	24 30       	cpi	r18, 0x04	; 4
    9a06:	31 05       	cpc	r19, r1
    9a08:	80 f4       	brcc	.+32     	; 0x9a2a <malloc+0x9c>
    9a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    9a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    9a0e:	61 15       	cp	r22, r1
    9a10:	71 05       	cpc	r23, r1
    9a12:	21 f0       	breq	.+8      	; 0x9a1c <malloc+0x8e>
    9a14:	fb 01       	movw	r30, r22
    9a16:	82 83       	std	Z+2, r24	; 0x02
    9a18:	93 83       	std	Z+3, r25	; 0x03
    9a1a:	04 c0       	rjmp	.+8      	; 0x9a24 <malloc+0x96>
    9a1c:	80 93 97 4a 	sts	0x4A97, r24	; 0x804a97 <__flp>
    9a20:	90 93 98 4a 	sts	0x4A98, r25	; 0x804a98 <__flp+0x1>
    9a24:	fe 01       	movw	r30, r28
    9a26:	32 96       	adiw	r30, 0x02	; 2
    9a28:	44 c0       	rjmp	.+136    	; 0x9ab2 <malloc+0x124>
    9a2a:	fe 01       	movw	r30, r28
    9a2c:	e2 0f       	add	r30, r18
    9a2e:	f3 1f       	adc	r31, r19
    9a30:	81 93       	st	Z+, r24
    9a32:	91 93       	st	Z+, r25
    9a34:	22 50       	subi	r18, 0x02	; 2
    9a36:	31 09       	sbc	r19, r1
    9a38:	28 83       	st	Y, r18
    9a3a:	39 83       	std	Y+1, r19	; 0x01
    9a3c:	3a c0       	rjmp	.+116    	; 0x9ab2 <malloc+0x124>
    9a3e:	20 91 95 4a 	lds	r18, 0x4A95	; 0x804a95 <__brkval>
    9a42:	30 91 96 4a 	lds	r19, 0x4A96	; 0x804a96 <__brkval+0x1>
    9a46:	23 2b       	or	r18, r19
    9a48:	41 f4       	brne	.+16     	; 0x9a5a <malloc+0xcc>
    9a4a:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    9a4e:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    9a52:	20 93 95 4a 	sts	0x4A95, r18	; 0x804a95 <__brkval>
    9a56:	30 93 96 4a 	sts	0x4A96, r19	; 0x804a96 <__brkval+0x1>
    9a5a:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    9a5e:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    9a62:	21 15       	cp	r18, r1
    9a64:	31 05       	cpc	r19, r1
    9a66:	41 f4       	brne	.+16     	; 0x9a78 <malloc+0xea>
    9a68:	2d b7       	in	r18, 0x3d	; 61
    9a6a:	3e b7       	in	r19, 0x3e	; 62
    9a6c:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    9a70:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    9a74:	24 1b       	sub	r18, r20
    9a76:	35 0b       	sbc	r19, r21
    9a78:	e0 91 95 4a 	lds	r30, 0x4A95	; 0x804a95 <__brkval>
    9a7c:	f0 91 96 4a 	lds	r31, 0x4A96	; 0x804a96 <__brkval+0x1>
    9a80:	e2 17       	cp	r30, r18
    9a82:	f3 07       	cpc	r31, r19
    9a84:	a0 f4       	brcc	.+40     	; 0x9aae <malloc+0x120>
    9a86:	2e 1b       	sub	r18, r30
    9a88:	3f 0b       	sbc	r19, r31
    9a8a:	28 17       	cp	r18, r24
    9a8c:	39 07       	cpc	r19, r25
    9a8e:	78 f0       	brcs	.+30     	; 0x9aae <malloc+0x120>
    9a90:	ac 01       	movw	r20, r24
    9a92:	4e 5f       	subi	r20, 0xFE	; 254
    9a94:	5f 4f       	sbci	r21, 0xFF	; 255
    9a96:	24 17       	cp	r18, r20
    9a98:	35 07       	cpc	r19, r21
    9a9a:	48 f0       	brcs	.+18     	; 0x9aae <malloc+0x120>
    9a9c:	4e 0f       	add	r20, r30
    9a9e:	5f 1f       	adc	r21, r31
    9aa0:	40 93 95 4a 	sts	0x4A95, r20	; 0x804a95 <__brkval>
    9aa4:	50 93 96 4a 	sts	0x4A96, r21	; 0x804a96 <__brkval+0x1>
    9aa8:	81 93       	st	Z+, r24
    9aaa:	91 93       	st	Z+, r25
    9aac:	02 c0       	rjmp	.+4      	; 0x9ab2 <malloc+0x124>
    9aae:	e0 e0       	ldi	r30, 0x00	; 0
    9ab0:	f0 e0       	ldi	r31, 0x00	; 0
    9ab2:	cf 01       	movw	r24, r30
    9ab4:	df 91       	pop	r29
    9ab6:	cf 91       	pop	r28
    9ab8:	1f 91       	pop	r17
    9aba:	0f 91       	pop	r16
    9abc:	08 95       	ret

00009abe <free>:
    9abe:	cf 93       	push	r28
    9ac0:	df 93       	push	r29
    9ac2:	00 97       	sbiw	r24, 0x00	; 0
    9ac4:	09 f4       	brne	.+2      	; 0x9ac8 <free+0xa>
    9ac6:	81 c0       	rjmp	.+258    	; 0x9bca <free+0x10c>
    9ac8:	fc 01       	movw	r30, r24
    9aca:	32 97       	sbiw	r30, 0x02	; 2
    9acc:	12 82       	std	Z+2, r1	; 0x02
    9ace:	13 82       	std	Z+3, r1	; 0x03
    9ad0:	a0 91 97 4a 	lds	r26, 0x4A97	; 0x804a97 <__flp>
    9ad4:	b0 91 98 4a 	lds	r27, 0x4A98	; 0x804a98 <__flp+0x1>
    9ad8:	10 97       	sbiw	r26, 0x00	; 0
    9ada:	81 f4       	brne	.+32     	; 0x9afc <free+0x3e>
    9adc:	20 81       	ld	r18, Z
    9ade:	31 81       	ldd	r19, Z+1	; 0x01
    9ae0:	82 0f       	add	r24, r18
    9ae2:	93 1f       	adc	r25, r19
    9ae4:	20 91 95 4a 	lds	r18, 0x4A95	; 0x804a95 <__brkval>
    9ae8:	30 91 96 4a 	lds	r19, 0x4A96	; 0x804a96 <__brkval+0x1>
    9aec:	28 17       	cp	r18, r24
    9aee:	39 07       	cpc	r19, r25
    9af0:	51 f5       	brne	.+84     	; 0x9b46 <free+0x88>
    9af2:	e0 93 95 4a 	sts	0x4A95, r30	; 0x804a95 <__brkval>
    9af6:	f0 93 96 4a 	sts	0x4A96, r31	; 0x804a96 <__brkval+0x1>
    9afa:	67 c0       	rjmp	.+206    	; 0x9bca <free+0x10c>
    9afc:	ed 01       	movw	r28, r26
    9afe:	20 e0       	ldi	r18, 0x00	; 0
    9b00:	30 e0       	ldi	r19, 0x00	; 0
    9b02:	ce 17       	cp	r28, r30
    9b04:	df 07       	cpc	r29, r31
    9b06:	40 f4       	brcc	.+16     	; 0x9b18 <free+0x5a>
    9b08:	4a 81       	ldd	r20, Y+2	; 0x02
    9b0a:	5b 81       	ldd	r21, Y+3	; 0x03
    9b0c:	9e 01       	movw	r18, r28
    9b0e:	41 15       	cp	r20, r1
    9b10:	51 05       	cpc	r21, r1
    9b12:	f1 f0       	breq	.+60     	; 0x9b50 <free+0x92>
    9b14:	ea 01       	movw	r28, r20
    9b16:	f5 cf       	rjmp	.-22     	; 0x9b02 <free+0x44>
    9b18:	c2 83       	std	Z+2, r28	; 0x02
    9b1a:	d3 83       	std	Z+3, r29	; 0x03
    9b1c:	40 81       	ld	r20, Z
    9b1e:	51 81       	ldd	r21, Z+1	; 0x01
    9b20:	84 0f       	add	r24, r20
    9b22:	95 1f       	adc	r25, r21
    9b24:	c8 17       	cp	r28, r24
    9b26:	d9 07       	cpc	r29, r25
    9b28:	59 f4       	brne	.+22     	; 0x9b40 <free+0x82>
    9b2a:	88 81       	ld	r24, Y
    9b2c:	99 81       	ldd	r25, Y+1	; 0x01
    9b2e:	84 0f       	add	r24, r20
    9b30:	95 1f       	adc	r25, r21
    9b32:	02 96       	adiw	r24, 0x02	; 2
    9b34:	80 83       	st	Z, r24
    9b36:	91 83       	std	Z+1, r25	; 0x01
    9b38:	8a 81       	ldd	r24, Y+2	; 0x02
    9b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    9b3c:	82 83       	std	Z+2, r24	; 0x02
    9b3e:	93 83       	std	Z+3, r25	; 0x03
    9b40:	21 15       	cp	r18, r1
    9b42:	31 05       	cpc	r19, r1
    9b44:	29 f4       	brne	.+10     	; 0x9b50 <free+0x92>
    9b46:	e0 93 97 4a 	sts	0x4A97, r30	; 0x804a97 <__flp>
    9b4a:	f0 93 98 4a 	sts	0x4A98, r31	; 0x804a98 <__flp+0x1>
    9b4e:	3d c0       	rjmp	.+122    	; 0x9bca <free+0x10c>
    9b50:	e9 01       	movw	r28, r18
    9b52:	ea 83       	std	Y+2, r30	; 0x02
    9b54:	fb 83       	std	Y+3, r31	; 0x03
    9b56:	49 91       	ld	r20, Y+
    9b58:	59 91       	ld	r21, Y+
    9b5a:	c4 0f       	add	r28, r20
    9b5c:	d5 1f       	adc	r29, r21
    9b5e:	ec 17       	cp	r30, r28
    9b60:	fd 07       	cpc	r31, r29
    9b62:	61 f4       	brne	.+24     	; 0x9b7c <free+0xbe>
    9b64:	80 81       	ld	r24, Z
    9b66:	91 81       	ldd	r25, Z+1	; 0x01
    9b68:	84 0f       	add	r24, r20
    9b6a:	95 1f       	adc	r25, r21
    9b6c:	02 96       	adiw	r24, 0x02	; 2
    9b6e:	e9 01       	movw	r28, r18
    9b70:	88 83       	st	Y, r24
    9b72:	99 83       	std	Y+1, r25	; 0x01
    9b74:	82 81       	ldd	r24, Z+2	; 0x02
    9b76:	93 81       	ldd	r25, Z+3	; 0x03
    9b78:	8a 83       	std	Y+2, r24	; 0x02
    9b7a:	9b 83       	std	Y+3, r25	; 0x03
    9b7c:	e0 e0       	ldi	r30, 0x00	; 0
    9b7e:	f0 e0       	ldi	r31, 0x00	; 0
    9b80:	12 96       	adiw	r26, 0x02	; 2
    9b82:	8d 91       	ld	r24, X+
    9b84:	9c 91       	ld	r25, X
    9b86:	13 97       	sbiw	r26, 0x03	; 3
    9b88:	00 97       	sbiw	r24, 0x00	; 0
    9b8a:	19 f0       	breq	.+6      	; 0x9b92 <free+0xd4>
    9b8c:	fd 01       	movw	r30, r26
    9b8e:	dc 01       	movw	r26, r24
    9b90:	f7 cf       	rjmp	.-18     	; 0x9b80 <free+0xc2>
    9b92:	8d 91       	ld	r24, X+
    9b94:	9c 91       	ld	r25, X
    9b96:	11 97       	sbiw	r26, 0x01	; 1
    9b98:	9d 01       	movw	r18, r26
    9b9a:	2e 5f       	subi	r18, 0xFE	; 254
    9b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    9b9e:	82 0f       	add	r24, r18
    9ba0:	93 1f       	adc	r25, r19
    9ba2:	20 91 95 4a 	lds	r18, 0x4A95	; 0x804a95 <__brkval>
    9ba6:	30 91 96 4a 	lds	r19, 0x4A96	; 0x804a96 <__brkval+0x1>
    9baa:	28 17       	cp	r18, r24
    9bac:	39 07       	cpc	r19, r25
    9bae:	69 f4       	brne	.+26     	; 0x9bca <free+0x10c>
    9bb0:	30 97       	sbiw	r30, 0x00	; 0
    9bb2:	29 f4       	brne	.+10     	; 0x9bbe <free+0x100>
    9bb4:	10 92 97 4a 	sts	0x4A97, r1	; 0x804a97 <__flp>
    9bb8:	10 92 98 4a 	sts	0x4A98, r1	; 0x804a98 <__flp+0x1>
    9bbc:	02 c0       	rjmp	.+4      	; 0x9bc2 <free+0x104>
    9bbe:	12 82       	std	Z+2, r1	; 0x02
    9bc0:	13 82       	std	Z+3, r1	; 0x03
    9bc2:	a0 93 95 4a 	sts	0x4A95, r26	; 0x804a95 <__brkval>
    9bc6:	b0 93 96 4a 	sts	0x4A96, r27	; 0x804a96 <__brkval+0x1>
    9bca:	df 91       	pop	r29
    9bcc:	cf 91       	pop	r28
    9bce:	08 95       	ret

00009bd0 <atof>:
    9bd0:	66 27       	eor	r22, r22
    9bd2:	77 27       	eor	r23, r23
    9bd4:	0c 94 b8 50 	jmp	0xa170	; 0xa170 <strtod>

00009bd8 <atoi>:
    9bd8:	fc 01       	movw	r30, r24
    9bda:	88 27       	eor	r24, r24
    9bdc:	99 27       	eor	r25, r25
    9bde:	e8 94       	clt
    9be0:	21 91       	ld	r18, Z+
    9be2:	20 32       	cpi	r18, 0x20	; 32
    9be4:	e9 f3       	breq	.-6      	; 0x9be0 <atoi+0x8>
    9be6:	29 30       	cpi	r18, 0x09	; 9
    9be8:	10 f0       	brcs	.+4      	; 0x9bee <atoi+0x16>
    9bea:	2e 30       	cpi	r18, 0x0E	; 14
    9bec:	c8 f3       	brcs	.-14     	; 0x9be0 <atoi+0x8>
    9bee:	2b 32       	cpi	r18, 0x2B	; 43
    9bf0:	41 f0       	breq	.+16     	; 0x9c02 <atoi+0x2a>
    9bf2:	2d 32       	cpi	r18, 0x2D	; 45
    9bf4:	39 f4       	brne	.+14     	; 0x9c04 <atoi+0x2c>
    9bf6:	68 94       	set
    9bf8:	04 c0       	rjmp	.+8      	; 0x9c02 <atoi+0x2a>
    9bfa:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <__mulhi_const_10>
    9bfe:	82 0f       	add	r24, r18
    9c00:	91 1d       	adc	r25, r1
    9c02:	21 91       	ld	r18, Z+
    9c04:	20 53       	subi	r18, 0x30	; 48
    9c06:	2a 30       	cpi	r18, 0x0A	; 10
    9c08:	c0 f3       	brcs	.-16     	; 0x9bfa <atoi+0x22>
    9c0a:	1e f4       	brtc	.+6      	; 0x9c12 <atoi+0x3a>
    9c0c:	90 95       	com	r25
    9c0e:	81 95       	neg	r24
    9c10:	9f 4f       	sbci	r25, 0xFF	; 255
    9c12:	08 95       	ret

00009c14 <atol>:
    9c14:	1f 93       	push	r17
    9c16:	fc 01       	movw	r30, r24
    9c18:	99 27       	eor	r25, r25
    9c1a:	88 27       	eor	r24, r24
    9c1c:	bc 01       	movw	r22, r24
    9c1e:	e8 94       	clt
    9c20:	11 91       	ld	r17, Z+
    9c22:	10 32       	cpi	r17, 0x20	; 32
    9c24:	e9 f3       	breq	.-6      	; 0x9c20 <atol+0xc>
    9c26:	19 30       	cpi	r17, 0x09	; 9
    9c28:	10 f0       	brcs	.+4      	; 0x9c2e <atol+0x1a>
    9c2a:	1e 30       	cpi	r17, 0x0E	; 14
    9c2c:	c8 f3       	brcs	.-14     	; 0x9c20 <atol+0xc>
    9c2e:	1b 32       	cpi	r17, 0x2B	; 43
    9c30:	51 f0       	breq	.+20     	; 0x9c46 <atol+0x32>
    9c32:	1d 32       	cpi	r17, 0x2D	; 45
    9c34:	49 f4       	brne	.+18     	; 0x9c48 <atol+0x34>
    9c36:	68 94       	set
    9c38:	06 c0       	rjmp	.+12     	; 0x9c46 <atol+0x32>
    9c3a:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <__mulsi_const_10>
    9c3e:	61 0f       	add	r22, r17
    9c40:	71 1d       	adc	r23, r1
    9c42:	81 1d       	adc	r24, r1
    9c44:	91 1d       	adc	r25, r1
    9c46:	11 91       	ld	r17, Z+
    9c48:	10 53       	subi	r17, 0x30	; 48
    9c4a:	1a 30       	cpi	r17, 0x0A	; 10
    9c4c:	b0 f3       	brcs	.-20     	; 0x9c3a <atol+0x26>
    9c4e:	3e f4       	brtc	.+14     	; 0x9c5e <atol+0x4a>
    9c50:	90 95       	com	r25
    9c52:	80 95       	com	r24
    9c54:	70 95       	com	r23
    9c56:	61 95       	neg	r22
    9c58:	7f 4f       	sbci	r23, 0xFF	; 255
    9c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    9c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    9c5e:	1f 91       	pop	r17
    9c60:	08 95       	ret

00009c62 <toupper>:
    9c62:	91 11       	cpse	r25, r1
    9c64:	08 95       	ret
    9c66:	81 56       	subi	r24, 0x61	; 97
    9c68:	8a 51       	subi	r24, 0x1A	; 26
    9c6a:	08 f4       	brcc	.+2      	; 0x9c6e <toupper+0xc>
    9c6c:	80 52       	subi	r24, 0x20	; 32
    9c6e:	85 58       	subi	r24, 0x85	; 133
    9c70:	08 95       	ret

00009c72 <strcat>:
    9c72:	fb 01       	movw	r30, r22
    9c74:	dc 01       	movw	r26, r24
    9c76:	0d 90       	ld	r0, X+
    9c78:	00 20       	and	r0, r0
    9c7a:	e9 f7       	brne	.-6      	; 0x9c76 <strcat+0x4>
    9c7c:	11 97       	sbiw	r26, 0x01	; 1
    9c7e:	01 90       	ld	r0, Z+
    9c80:	0d 92       	st	X+, r0
    9c82:	00 20       	and	r0, r0
    9c84:	e1 f7       	brne	.-8      	; 0x9c7e <strcat+0xc>
    9c86:	08 95       	ret

00009c88 <strchr>:
    9c88:	fc 01       	movw	r30, r24
    9c8a:	81 91       	ld	r24, Z+
    9c8c:	86 17       	cp	r24, r22
    9c8e:	21 f0       	breq	.+8      	; 0x9c98 <strchr+0x10>
    9c90:	88 23       	and	r24, r24
    9c92:	d9 f7       	brne	.-10     	; 0x9c8a <strchr+0x2>
    9c94:	99 27       	eor	r25, r25
    9c96:	08 95       	ret
    9c98:	31 97       	sbiw	r30, 0x01	; 1
    9c9a:	cf 01       	movw	r24, r30
    9c9c:	08 95       	ret

00009c9e <strcpy>:
    9c9e:	fb 01       	movw	r30, r22
    9ca0:	dc 01       	movw	r26, r24
    9ca2:	01 90       	ld	r0, Z+
    9ca4:	0d 92       	st	X+, r0
    9ca6:	00 20       	and	r0, r0
    9ca8:	e1 f7       	brne	.-8      	; 0x9ca2 <strcpy+0x4>
    9caa:	08 95       	ret

00009cac <strlen>:
    9cac:	fc 01       	movw	r30, r24
    9cae:	01 90       	ld	r0, Z+
    9cb0:	00 20       	and	r0, r0
    9cb2:	e9 f7       	brne	.-6      	; 0x9cae <strlen+0x2>
    9cb4:	80 95       	com	r24
    9cb6:	90 95       	com	r25
    9cb8:	8e 0f       	add	r24, r30
    9cba:	9f 1f       	adc	r25, r31
    9cbc:	08 95       	ret

00009cbe <strncpy>:
    9cbe:	fb 01       	movw	r30, r22
    9cc0:	dc 01       	movw	r26, r24
    9cc2:	41 50       	subi	r20, 0x01	; 1
    9cc4:	50 40       	sbci	r21, 0x00	; 0
    9cc6:	48 f0       	brcs	.+18     	; 0x9cda <strncpy+0x1c>
    9cc8:	01 90       	ld	r0, Z+
    9cca:	0d 92       	st	X+, r0
    9ccc:	00 20       	and	r0, r0
    9cce:	c9 f7       	brne	.-14     	; 0x9cc2 <strncpy+0x4>
    9cd0:	01 c0       	rjmp	.+2      	; 0x9cd4 <strncpy+0x16>
    9cd2:	1d 92       	st	X+, r1
    9cd4:	41 50       	subi	r20, 0x01	; 1
    9cd6:	50 40       	sbci	r21, 0x00	; 0
    9cd8:	e0 f7       	brcc	.-8      	; 0x9cd2 <strncpy+0x14>
    9cda:	08 95       	ret

00009cdc <__mulsi_const_10>:
    9cdc:	59 2f       	mov	r21, r25
    9cde:	48 2f       	mov	r20, r24
    9ce0:	37 2f       	mov	r19, r23
    9ce2:	26 2f       	mov	r18, r22
    9ce4:	66 0f       	add	r22, r22
    9ce6:	77 1f       	adc	r23, r23
    9ce8:	88 1f       	adc	r24, r24
    9cea:	99 1f       	adc	r25, r25
    9cec:	66 0f       	add	r22, r22
    9cee:	77 1f       	adc	r23, r23
    9cf0:	88 1f       	adc	r24, r24
    9cf2:	99 1f       	adc	r25, r25
    9cf4:	62 0f       	add	r22, r18
    9cf6:	73 1f       	adc	r23, r19
    9cf8:	84 1f       	adc	r24, r20
    9cfa:	95 1f       	adc	r25, r21
    9cfc:	66 0f       	add	r22, r22
    9cfe:	77 1f       	adc	r23, r23
    9d00:	88 1f       	adc	r24, r24
    9d02:	99 1f       	adc	r25, r25
    9d04:	08 95       	ret

00009d06 <__mulhi_const_10>:
    9d06:	7a e0       	ldi	r23, 0x0A	; 10
    9d08:	97 9f       	mul	r25, r23
    9d0a:	90 2d       	mov	r25, r0
    9d0c:	87 9f       	mul	r24, r23
    9d0e:	80 2d       	mov	r24, r0
    9d10:	91 0d       	add	r25, r1
    9d12:	11 24       	eor	r1, r1
    9d14:	08 95       	ret

00009d16 <sprintf>:
    9d16:	0f 93       	push	r16
    9d18:	1f 93       	push	r17
    9d1a:	cf 93       	push	r28
    9d1c:	df 93       	push	r29
    9d1e:	cd b7       	in	r28, 0x3d	; 61
    9d20:	de b7       	in	r29, 0x3e	; 62
    9d22:	2e 97       	sbiw	r28, 0x0e	; 14
    9d24:	cd bf       	out	0x3d, r28	; 61
    9d26:	de bf       	out	0x3e, r29	; 62
    9d28:	0d 89       	ldd	r16, Y+21	; 0x15
    9d2a:	1e 89       	ldd	r17, Y+22	; 0x16
    9d2c:	86 e0       	ldi	r24, 0x06	; 6
    9d2e:	8c 83       	std	Y+4, r24	; 0x04
    9d30:	09 83       	std	Y+1, r16	; 0x01
    9d32:	1a 83       	std	Y+2, r17	; 0x02
    9d34:	8f ef       	ldi	r24, 0xFF	; 255
    9d36:	9f e7       	ldi	r25, 0x7F	; 127
    9d38:	8d 83       	std	Y+5, r24	; 0x05
    9d3a:	9e 83       	std	Y+6, r25	; 0x06
    9d3c:	ae 01       	movw	r20, r28
    9d3e:	47 5e       	subi	r20, 0xE7	; 231
    9d40:	5f 4f       	sbci	r21, 0xFF	; 255
    9d42:	6f 89       	ldd	r22, Y+23	; 0x17
    9d44:	78 8d       	ldd	r23, Y+24	; 0x18
    9d46:	ce 01       	movw	r24, r28
    9d48:	01 96       	adiw	r24, 0x01	; 1
    9d4a:	0e 94 b4 4e 	call	0x9d68	; 0x9d68 <vfprintf>
    9d4e:	ef 81       	ldd	r30, Y+7	; 0x07
    9d50:	f8 85       	ldd	r31, Y+8	; 0x08
    9d52:	e0 0f       	add	r30, r16
    9d54:	f1 1f       	adc	r31, r17
    9d56:	10 82       	st	Z, r1
    9d58:	2e 96       	adiw	r28, 0x0e	; 14
    9d5a:	cd bf       	out	0x3d, r28	; 61
    9d5c:	de bf       	out	0x3e, r29	; 62
    9d5e:	df 91       	pop	r29
    9d60:	cf 91       	pop	r28
    9d62:	1f 91       	pop	r17
    9d64:	0f 91       	pop	r16
    9d66:	08 95       	ret

00009d68 <vfprintf>:
    9d68:	2f 92       	push	r2
    9d6a:	3f 92       	push	r3
    9d6c:	4f 92       	push	r4
    9d6e:	5f 92       	push	r5
    9d70:	6f 92       	push	r6
    9d72:	7f 92       	push	r7
    9d74:	8f 92       	push	r8
    9d76:	9f 92       	push	r9
    9d78:	af 92       	push	r10
    9d7a:	bf 92       	push	r11
    9d7c:	cf 92       	push	r12
    9d7e:	df 92       	push	r13
    9d80:	ef 92       	push	r14
    9d82:	ff 92       	push	r15
    9d84:	0f 93       	push	r16
    9d86:	1f 93       	push	r17
    9d88:	cf 93       	push	r28
    9d8a:	df 93       	push	r29
    9d8c:	cd b7       	in	r28, 0x3d	; 61
    9d8e:	de b7       	in	r29, 0x3e	; 62
    9d90:	2b 97       	sbiw	r28, 0x0b	; 11
    9d92:	cd bf       	out	0x3d, r28	; 61
    9d94:	de bf       	out	0x3e, r29	; 62
    9d96:	6c 01       	movw	r12, r24
    9d98:	7b 01       	movw	r14, r22
    9d9a:	8a 01       	movw	r16, r20
    9d9c:	fc 01       	movw	r30, r24
    9d9e:	16 82       	std	Z+6, r1	; 0x06
    9da0:	17 82       	std	Z+7, r1	; 0x07
    9da2:	83 81       	ldd	r24, Z+3	; 0x03
    9da4:	81 ff       	sbrs	r24, 1
    9da6:	cc c1       	rjmp	.+920    	; 0xa140 <vfprintf+0x3d8>
    9da8:	ce 01       	movw	r24, r28
    9daa:	01 96       	adiw	r24, 0x01	; 1
    9dac:	3c 01       	movw	r6, r24
    9dae:	f6 01       	movw	r30, r12
    9db0:	93 81       	ldd	r25, Z+3	; 0x03
    9db2:	f7 01       	movw	r30, r14
    9db4:	93 fd       	sbrc	r25, 3
    9db6:	85 91       	lpm	r24, Z+
    9db8:	93 ff       	sbrs	r25, 3
    9dba:	81 91       	ld	r24, Z+
    9dbc:	7f 01       	movw	r14, r30
    9dbe:	88 23       	and	r24, r24
    9dc0:	09 f4       	brne	.+2      	; 0x9dc4 <vfprintf+0x5c>
    9dc2:	ba c1       	rjmp	.+884    	; 0xa138 <vfprintf+0x3d0>
    9dc4:	85 32       	cpi	r24, 0x25	; 37
    9dc6:	39 f4       	brne	.+14     	; 0x9dd6 <vfprintf+0x6e>
    9dc8:	93 fd       	sbrc	r25, 3
    9dca:	85 91       	lpm	r24, Z+
    9dcc:	93 ff       	sbrs	r25, 3
    9dce:	81 91       	ld	r24, Z+
    9dd0:	7f 01       	movw	r14, r30
    9dd2:	85 32       	cpi	r24, 0x25	; 37
    9dd4:	29 f4       	brne	.+10     	; 0x9de0 <vfprintf+0x78>
    9dd6:	b6 01       	movw	r22, r12
    9dd8:	90 e0       	ldi	r25, 0x00	; 0
    9dda:	0e 94 4b 52 	call	0xa496	; 0xa496 <fputc>
    9dde:	e7 cf       	rjmp	.-50     	; 0x9dae <vfprintf+0x46>
    9de0:	91 2c       	mov	r9, r1
    9de2:	21 2c       	mov	r2, r1
    9de4:	31 2c       	mov	r3, r1
    9de6:	ff e1       	ldi	r31, 0x1F	; 31
    9de8:	f3 15       	cp	r31, r3
    9dea:	d8 f0       	brcs	.+54     	; 0x9e22 <vfprintf+0xba>
    9dec:	8b 32       	cpi	r24, 0x2B	; 43
    9dee:	79 f0       	breq	.+30     	; 0x9e0e <vfprintf+0xa6>
    9df0:	38 f4       	brcc	.+14     	; 0x9e00 <vfprintf+0x98>
    9df2:	80 32       	cpi	r24, 0x20	; 32
    9df4:	79 f0       	breq	.+30     	; 0x9e14 <vfprintf+0xac>
    9df6:	83 32       	cpi	r24, 0x23	; 35
    9df8:	a1 f4       	brne	.+40     	; 0x9e22 <vfprintf+0xba>
    9dfa:	23 2d       	mov	r18, r3
    9dfc:	20 61       	ori	r18, 0x10	; 16
    9dfe:	1d c0       	rjmp	.+58     	; 0x9e3a <vfprintf+0xd2>
    9e00:	8d 32       	cpi	r24, 0x2D	; 45
    9e02:	61 f0       	breq	.+24     	; 0x9e1c <vfprintf+0xb4>
    9e04:	80 33       	cpi	r24, 0x30	; 48
    9e06:	69 f4       	brne	.+26     	; 0x9e22 <vfprintf+0xba>
    9e08:	23 2d       	mov	r18, r3
    9e0a:	21 60       	ori	r18, 0x01	; 1
    9e0c:	16 c0       	rjmp	.+44     	; 0x9e3a <vfprintf+0xd2>
    9e0e:	83 2d       	mov	r24, r3
    9e10:	82 60       	ori	r24, 0x02	; 2
    9e12:	38 2e       	mov	r3, r24
    9e14:	e3 2d       	mov	r30, r3
    9e16:	e4 60       	ori	r30, 0x04	; 4
    9e18:	3e 2e       	mov	r3, r30
    9e1a:	2a c0       	rjmp	.+84     	; 0x9e70 <vfprintf+0x108>
    9e1c:	f3 2d       	mov	r31, r3
    9e1e:	f8 60       	ori	r31, 0x08	; 8
    9e20:	1d c0       	rjmp	.+58     	; 0x9e5c <vfprintf+0xf4>
    9e22:	37 fc       	sbrc	r3, 7
    9e24:	2d c0       	rjmp	.+90     	; 0x9e80 <vfprintf+0x118>
    9e26:	20 ed       	ldi	r18, 0xD0	; 208
    9e28:	28 0f       	add	r18, r24
    9e2a:	2a 30       	cpi	r18, 0x0A	; 10
    9e2c:	40 f0       	brcs	.+16     	; 0x9e3e <vfprintf+0xd6>
    9e2e:	8e 32       	cpi	r24, 0x2E	; 46
    9e30:	b9 f4       	brne	.+46     	; 0x9e60 <vfprintf+0xf8>
    9e32:	36 fc       	sbrc	r3, 6
    9e34:	81 c1       	rjmp	.+770    	; 0xa138 <vfprintf+0x3d0>
    9e36:	23 2d       	mov	r18, r3
    9e38:	20 64       	ori	r18, 0x40	; 64
    9e3a:	32 2e       	mov	r3, r18
    9e3c:	19 c0       	rjmp	.+50     	; 0x9e70 <vfprintf+0x108>
    9e3e:	36 fe       	sbrs	r3, 6
    9e40:	06 c0       	rjmp	.+12     	; 0x9e4e <vfprintf+0xe6>
    9e42:	8a e0       	ldi	r24, 0x0A	; 10
    9e44:	98 9e       	mul	r9, r24
    9e46:	20 0d       	add	r18, r0
    9e48:	11 24       	eor	r1, r1
    9e4a:	92 2e       	mov	r9, r18
    9e4c:	11 c0       	rjmp	.+34     	; 0x9e70 <vfprintf+0x108>
    9e4e:	ea e0       	ldi	r30, 0x0A	; 10
    9e50:	2e 9e       	mul	r2, r30
    9e52:	20 0d       	add	r18, r0
    9e54:	11 24       	eor	r1, r1
    9e56:	22 2e       	mov	r2, r18
    9e58:	f3 2d       	mov	r31, r3
    9e5a:	f0 62       	ori	r31, 0x20	; 32
    9e5c:	3f 2e       	mov	r3, r31
    9e5e:	08 c0       	rjmp	.+16     	; 0x9e70 <vfprintf+0x108>
    9e60:	8c 36       	cpi	r24, 0x6C	; 108
    9e62:	21 f4       	brne	.+8      	; 0x9e6c <vfprintf+0x104>
    9e64:	83 2d       	mov	r24, r3
    9e66:	80 68       	ori	r24, 0x80	; 128
    9e68:	38 2e       	mov	r3, r24
    9e6a:	02 c0       	rjmp	.+4      	; 0x9e70 <vfprintf+0x108>
    9e6c:	88 36       	cpi	r24, 0x68	; 104
    9e6e:	41 f4       	brne	.+16     	; 0x9e80 <vfprintf+0x118>
    9e70:	f7 01       	movw	r30, r14
    9e72:	93 fd       	sbrc	r25, 3
    9e74:	85 91       	lpm	r24, Z+
    9e76:	93 ff       	sbrs	r25, 3
    9e78:	81 91       	ld	r24, Z+
    9e7a:	7f 01       	movw	r14, r30
    9e7c:	81 11       	cpse	r24, r1
    9e7e:	b3 cf       	rjmp	.-154    	; 0x9de6 <vfprintf+0x7e>
    9e80:	98 2f       	mov	r25, r24
    9e82:	9f 7d       	andi	r25, 0xDF	; 223
    9e84:	95 54       	subi	r25, 0x45	; 69
    9e86:	93 30       	cpi	r25, 0x03	; 3
    9e88:	28 f4       	brcc	.+10     	; 0x9e94 <vfprintf+0x12c>
    9e8a:	0c 5f       	subi	r16, 0xFC	; 252
    9e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    9e8e:	9f e3       	ldi	r25, 0x3F	; 63
    9e90:	99 83       	std	Y+1, r25	; 0x01
    9e92:	0d c0       	rjmp	.+26     	; 0x9eae <vfprintf+0x146>
    9e94:	83 36       	cpi	r24, 0x63	; 99
    9e96:	31 f0       	breq	.+12     	; 0x9ea4 <vfprintf+0x13c>
    9e98:	83 37       	cpi	r24, 0x73	; 115
    9e9a:	71 f0       	breq	.+28     	; 0x9eb8 <vfprintf+0x150>
    9e9c:	83 35       	cpi	r24, 0x53	; 83
    9e9e:	09 f0       	breq	.+2      	; 0x9ea2 <vfprintf+0x13a>
    9ea0:	59 c0       	rjmp	.+178    	; 0x9f54 <vfprintf+0x1ec>
    9ea2:	21 c0       	rjmp	.+66     	; 0x9ee6 <vfprintf+0x17e>
    9ea4:	f8 01       	movw	r30, r16
    9ea6:	80 81       	ld	r24, Z
    9ea8:	89 83       	std	Y+1, r24	; 0x01
    9eaa:	0e 5f       	subi	r16, 0xFE	; 254
    9eac:	1f 4f       	sbci	r17, 0xFF	; 255
    9eae:	88 24       	eor	r8, r8
    9eb0:	83 94       	inc	r8
    9eb2:	91 2c       	mov	r9, r1
    9eb4:	53 01       	movw	r10, r6
    9eb6:	13 c0       	rjmp	.+38     	; 0x9ede <vfprintf+0x176>
    9eb8:	28 01       	movw	r4, r16
    9eba:	f2 e0       	ldi	r31, 0x02	; 2
    9ebc:	4f 0e       	add	r4, r31
    9ebe:	51 1c       	adc	r5, r1
    9ec0:	f8 01       	movw	r30, r16
    9ec2:	a0 80       	ld	r10, Z
    9ec4:	b1 80       	ldd	r11, Z+1	; 0x01
    9ec6:	36 fe       	sbrs	r3, 6
    9ec8:	03 c0       	rjmp	.+6      	; 0x9ed0 <vfprintf+0x168>
    9eca:	69 2d       	mov	r22, r9
    9ecc:	70 e0       	ldi	r23, 0x00	; 0
    9ece:	02 c0       	rjmp	.+4      	; 0x9ed4 <vfprintf+0x16c>
    9ed0:	6f ef       	ldi	r22, 0xFF	; 255
    9ed2:	7f ef       	ldi	r23, 0xFF	; 255
    9ed4:	c5 01       	movw	r24, r10
    9ed6:	0e 94 40 52 	call	0xa480	; 0xa480 <strnlen>
    9eda:	4c 01       	movw	r8, r24
    9edc:	82 01       	movw	r16, r4
    9ede:	f3 2d       	mov	r31, r3
    9ee0:	ff 77       	andi	r31, 0x7F	; 127
    9ee2:	3f 2e       	mov	r3, r31
    9ee4:	16 c0       	rjmp	.+44     	; 0x9f12 <vfprintf+0x1aa>
    9ee6:	28 01       	movw	r4, r16
    9ee8:	22 e0       	ldi	r18, 0x02	; 2
    9eea:	42 0e       	add	r4, r18
    9eec:	51 1c       	adc	r5, r1
    9eee:	f8 01       	movw	r30, r16
    9ef0:	a0 80       	ld	r10, Z
    9ef2:	b1 80       	ldd	r11, Z+1	; 0x01
    9ef4:	36 fe       	sbrs	r3, 6
    9ef6:	03 c0       	rjmp	.+6      	; 0x9efe <vfprintf+0x196>
    9ef8:	69 2d       	mov	r22, r9
    9efa:	70 e0       	ldi	r23, 0x00	; 0
    9efc:	02 c0       	rjmp	.+4      	; 0x9f02 <vfprintf+0x19a>
    9efe:	6f ef       	ldi	r22, 0xFF	; 255
    9f00:	7f ef       	ldi	r23, 0xFF	; 255
    9f02:	c5 01       	movw	r24, r10
    9f04:	0e 94 35 52 	call	0xa46a	; 0xa46a <strnlen_P>
    9f08:	4c 01       	movw	r8, r24
    9f0a:	f3 2d       	mov	r31, r3
    9f0c:	f0 68       	ori	r31, 0x80	; 128
    9f0e:	3f 2e       	mov	r3, r31
    9f10:	82 01       	movw	r16, r4
    9f12:	33 fc       	sbrc	r3, 3
    9f14:	1b c0       	rjmp	.+54     	; 0x9f4c <vfprintf+0x1e4>
    9f16:	82 2d       	mov	r24, r2
    9f18:	90 e0       	ldi	r25, 0x00	; 0
    9f1a:	88 16       	cp	r8, r24
    9f1c:	99 06       	cpc	r9, r25
    9f1e:	b0 f4       	brcc	.+44     	; 0x9f4c <vfprintf+0x1e4>
    9f20:	b6 01       	movw	r22, r12
    9f22:	80 e2       	ldi	r24, 0x20	; 32
    9f24:	90 e0       	ldi	r25, 0x00	; 0
    9f26:	0e 94 4b 52 	call	0xa496	; 0xa496 <fputc>
    9f2a:	2a 94       	dec	r2
    9f2c:	f4 cf       	rjmp	.-24     	; 0x9f16 <vfprintf+0x1ae>
    9f2e:	f5 01       	movw	r30, r10
    9f30:	37 fc       	sbrc	r3, 7
    9f32:	85 91       	lpm	r24, Z+
    9f34:	37 fe       	sbrs	r3, 7
    9f36:	81 91       	ld	r24, Z+
    9f38:	5f 01       	movw	r10, r30
    9f3a:	b6 01       	movw	r22, r12
    9f3c:	90 e0       	ldi	r25, 0x00	; 0
    9f3e:	0e 94 4b 52 	call	0xa496	; 0xa496 <fputc>
    9f42:	21 10       	cpse	r2, r1
    9f44:	2a 94       	dec	r2
    9f46:	21 e0       	ldi	r18, 0x01	; 1
    9f48:	82 1a       	sub	r8, r18
    9f4a:	91 08       	sbc	r9, r1
    9f4c:	81 14       	cp	r8, r1
    9f4e:	91 04       	cpc	r9, r1
    9f50:	71 f7       	brne	.-36     	; 0x9f2e <vfprintf+0x1c6>
    9f52:	e8 c0       	rjmp	.+464    	; 0xa124 <vfprintf+0x3bc>
    9f54:	84 36       	cpi	r24, 0x64	; 100
    9f56:	11 f0       	breq	.+4      	; 0x9f5c <vfprintf+0x1f4>
    9f58:	89 36       	cpi	r24, 0x69	; 105
    9f5a:	41 f5       	brne	.+80     	; 0x9fac <vfprintf+0x244>
    9f5c:	f8 01       	movw	r30, r16
    9f5e:	37 fe       	sbrs	r3, 7
    9f60:	07 c0       	rjmp	.+14     	; 0x9f70 <vfprintf+0x208>
    9f62:	60 81       	ld	r22, Z
    9f64:	71 81       	ldd	r23, Z+1	; 0x01
    9f66:	82 81       	ldd	r24, Z+2	; 0x02
    9f68:	93 81       	ldd	r25, Z+3	; 0x03
    9f6a:	0c 5f       	subi	r16, 0xFC	; 252
    9f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    9f6e:	08 c0       	rjmp	.+16     	; 0x9f80 <vfprintf+0x218>
    9f70:	60 81       	ld	r22, Z
    9f72:	71 81       	ldd	r23, Z+1	; 0x01
    9f74:	07 2e       	mov	r0, r23
    9f76:	00 0c       	add	r0, r0
    9f78:	88 0b       	sbc	r24, r24
    9f7a:	99 0b       	sbc	r25, r25
    9f7c:	0e 5f       	subi	r16, 0xFE	; 254
    9f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    9f80:	f3 2d       	mov	r31, r3
    9f82:	ff 76       	andi	r31, 0x6F	; 111
    9f84:	3f 2e       	mov	r3, r31
    9f86:	97 ff       	sbrs	r25, 7
    9f88:	09 c0       	rjmp	.+18     	; 0x9f9c <vfprintf+0x234>
    9f8a:	90 95       	com	r25
    9f8c:	80 95       	com	r24
    9f8e:	70 95       	com	r23
    9f90:	61 95       	neg	r22
    9f92:	7f 4f       	sbci	r23, 0xFF	; 255
    9f94:	8f 4f       	sbci	r24, 0xFF	; 255
    9f96:	9f 4f       	sbci	r25, 0xFF	; 255
    9f98:	f0 68       	ori	r31, 0x80	; 128
    9f9a:	3f 2e       	mov	r3, r31
    9f9c:	2a e0       	ldi	r18, 0x0A	; 10
    9f9e:	30 e0       	ldi	r19, 0x00	; 0
    9fa0:	a3 01       	movw	r20, r6
    9fa2:	0e 94 87 52 	call	0xa50e	; 0xa50e <__ultoa_invert>
    9fa6:	88 2e       	mov	r8, r24
    9fa8:	86 18       	sub	r8, r6
    9faa:	45 c0       	rjmp	.+138    	; 0xa036 <vfprintf+0x2ce>
    9fac:	85 37       	cpi	r24, 0x75	; 117
    9fae:	31 f4       	brne	.+12     	; 0x9fbc <vfprintf+0x254>
    9fb0:	23 2d       	mov	r18, r3
    9fb2:	2f 7e       	andi	r18, 0xEF	; 239
    9fb4:	b2 2e       	mov	r11, r18
    9fb6:	2a e0       	ldi	r18, 0x0A	; 10
    9fb8:	30 e0       	ldi	r19, 0x00	; 0
    9fba:	25 c0       	rjmp	.+74     	; 0xa006 <vfprintf+0x29e>
    9fbc:	93 2d       	mov	r25, r3
    9fbe:	99 7f       	andi	r25, 0xF9	; 249
    9fc0:	b9 2e       	mov	r11, r25
    9fc2:	8f 36       	cpi	r24, 0x6F	; 111
    9fc4:	c1 f0       	breq	.+48     	; 0x9ff6 <vfprintf+0x28e>
    9fc6:	18 f4       	brcc	.+6      	; 0x9fce <vfprintf+0x266>
    9fc8:	88 35       	cpi	r24, 0x58	; 88
    9fca:	79 f0       	breq	.+30     	; 0x9fea <vfprintf+0x282>
    9fcc:	b5 c0       	rjmp	.+362    	; 0xa138 <vfprintf+0x3d0>
    9fce:	80 37       	cpi	r24, 0x70	; 112
    9fd0:	19 f0       	breq	.+6      	; 0x9fd8 <vfprintf+0x270>
    9fd2:	88 37       	cpi	r24, 0x78	; 120
    9fd4:	21 f0       	breq	.+8      	; 0x9fde <vfprintf+0x276>
    9fd6:	b0 c0       	rjmp	.+352    	; 0xa138 <vfprintf+0x3d0>
    9fd8:	e9 2f       	mov	r30, r25
    9fda:	e0 61       	ori	r30, 0x10	; 16
    9fdc:	be 2e       	mov	r11, r30
    9fde:	b4 fe       	sbrs	r11, 4
    9fe0:	0d c0       	rjmp	.+26     	; 0x9ffc <vfprintf+0x294>
    9fe2:	fb 2d       	mov	r31, r11
    9fe4:	f4 60       	ori	r31, 0x04	; 4
    9fe6:	bf 2e       	mov	r11, r31
    9fe8:	09 c0       	rjmp	.+18     	; 0x9ffc <vfprintf+0x294>
    9fea:	34 fe       	sbrs	r3, 4
    9fec:	0a c0       	rjmp	.+20     	; 0xa002 <vfprintf+0x29a>
    9fee:	29 2f       	mov	r18, r25
    9ff0:	26 60       	ori	r18, 0x06	; 6
    9ff2:	b2 2e       	mov	r11, r18
    9ff4:	06 c0       	rjmp	.+12     	; 0xa002 <vfprintf+0x29a>
    9ff6:	28 e0       	ldi	r18, 0x08	; 8
    9ff8:	30 e0       	ldi	r19, 0x00	; 0
    9ffa:	05 c0       	rjmp	.+10     	; 0xa006 <vfprintf+0x29e>
    9ffc:	20 e1       	ldi	r18, 0x10	; 16
    9ffe:	30 e0       	ldi	r19, 0x00	; 0
    a000:	02 c0       	rjmp	.+4      	; 0xa006 <vfprintf+0x29e>
    a002:	20 e1       	ldi	r18, 0x10	; 16
    a004:	32 e0       	ldi	r19, 0x02	; 2
    a006:	f8 01       	movw	r30, r16
    a008:	b7 fe       	sbrs	r11, 7
    a00a:	07 c0       	rjmp	.+14     	; 0xa01a <vfprintf+0x2b2>
    a00c:	60 81       	ld	r22, Z
    a00e:	71 81       	ldd	r23, Z+1	; 0x01
    a010:	82 81       	ldd	r24, Z+2	; 0x02
    a012:	93 81       	ldd	r25, Z+3	; 0x03
    a014:	0c 5f       	subi	r16, 0xFC	; 252
    a016:	1f 4f       	sbci	r17, 0xFF	; 255
    a018:	06 c0       	rjmp	.+12     	; 0xa026 <vfprintf+0x2be>
    a01a:	60 81       	ld	r22, Z
    a01c:	71 81       	ldd	r23, Z+1	; 0x01
    a01e:	80 e0       	ldi	r24, 0x00	; 0
    a020:	90 e0       	ldi	r25, 0x00	; 0
    a022:	0e 5f       	subi	r16, 0xFE	; 254
    a024:	1f 4f       	sbci	r17, 0xFF	; 255
    a026:	a3 01       	movw	r20, r6
    a028:	0e 94 87 52 	call	0xa50e	; 0xa50e <__ultoa_invert>
    a02c:	88 2e       	mov	r8, r24
    a02e:	86 18       	sub	r8, r6
    a030:	fb 2d       	mov	r31, r11
    a032:	ff 77       	andi	r31, 0x7F	; 127
    a034:	3f 2e       	mov	r3, r31
    a036:	36 fe       	sbrs	r3, 6
    a038:	0d c0       	rjmp	.+26     	; 0xa054 <vfprintf+0x2ec>
    a03a:	23 2d       	mov	r18, r3
    a03c:	2e 7f       	andi	r18, 0xFE	; 254
    a03e:	a2 2e       	mov	r10, r18
    a040:	89 14       	cp	r8, r9
    a042:	58 f4       	brcc	.+22     	; 0xa05a <vfprintf+0x2f2>
    a044:	34 fe       	sbrs	r3, 4
    a046:	0b c0       	rjmp	.+22     	; 0xa05e <vfprintf+0x2f6>
    a048:	32 fc       	sbrc	r3, 2
    a04a:	09 c0       	rjmp	.+18     	; 0xa05e <vfprintf+0x2f6>
    a04c:	83 2d       	mov	r24, r3
    a04e:	8e 7e       	andi	r24, 0xEE	; 238
    a050:	a8 2e       	mov	r10, r24
    a052:	05 c0       	rjmp	.+10     	; 0xa05e <vfprintf+0x2f6>
    a054:	b8 2c       	mov	r11, r8
    a056:	a3 2c       	mov	r10, r3
    a058:	03 c0       	rjmp	.+6      	; 0xa060 <vfprintf+0x2f8>
    a05a:	b8 2c       	mov	r11, r8
    a05c:	01 c0       	rjmp	.+2      	; 0xa060 <vfprintf+0x2f8>
    a05e:	b9 2c       	mov	r11, r9
    a060:	a4 fe       	sbrs	r10, 4
    a062:	0f c0       	rjmp	.+30     	; 0xa082 <vfprintf+0x31a>
    a064:	fe 01       	movw	r30, r28
    a066:	e8 0d       	add	r30, r8
    a068:	f1 1d       	adc	r31, r1
    a06a:	80 81       	ld	r24, Z
    a06c:	80 33       	cpi	r24, 0x30	; 48
    a06e:	21 f4       	brne	.+8      	; 0xa078 <vfprintf+0x310>
    a070:	9a 2d       	mov	r25, r10
    a072:	99 7e       	andi	r25, 0xE9	; 233
    a074:	a9 2e       	mov	r10, r25
    a076:	09 c0       	rjmp	.+18     	; 0xa08a <vfprintf+0x322>
    a078:	a2 fe       	sbrs	r10, 2
    a07a:	06 c0       	rjmp	.+12     	; 0xa088 <vfprintf+0x320>
    a07c:	b3 94       	inc	r11
    a07e:	b3 94       	inc	r11
    a080:	04 c0       	rjmp	.+8      	; 0xa08a <vfprintf+0x322>
    a082:	8a 2d       	mov	r24, r10
    a084:	86 78       	andi	r24, 0x86	; 134
    a086:	09 f0       	breq	.+2      	; 0xa08a <vfprintf+0x322>
    a088:	b3 94       	inc	r11
    a08a:	a3 fc       	sbrc	r10, 3
    a08c:	11 c0       	rjmp	.+34     	; 0xa0b0 <vfprintf+0x348>
    a08e:	a0 fe       	sbrs	r10, 0
    a090:	06 c0       	rjmp	.+12     	; 0xa09e <vfprintf+0x336>
    a092:	b2 14       	cp	r11, r2
    a094:	88 f4       	brcc	.+34     	; 0xa0b8 <vfprintf+0x350>
    a096:	28 0c       	add	r2, r8
    a098:	92 2c       	mov	r9, r2
    a09a:	9b 18       	sub	r9, r11
    a09c:	0e c0       	rjmp	.+28     	; 0xa0ba <vfprintf+0x352>
    a09e:	b2 14       	cp	r11, r2
    a0a0:	60 f4       	brcc	.+24     	; 0xa0ba <vfprintf+0x352>
    a0a2:	b6 01       	movw	r22, r12
    a0a4:	80 e2       	ldi	r24, 0x20	; 32
    a0a6:	90 e0       	ldi	r25, 0x00	; 0
    a0a8:	0e 94 4b 52 	call	0xa496	; 0xa496 <fputc>
    a0ac:	b3 94       	inc	r11
    a0ae:	f7 cf       	rjmp	.-18     	; 0xa09e <vfprintf+0x336>
    a0b0:	b2 14       	cp	r11, r2
    a0b2:	18 f4       	brcc	.+6      	; 0xa0ba <vfprintf+0x352>
    a0b4:	2b 18       	sub	r2, r11
    a0b6:	02 c0       	rjmp	.+4      	; 0xa0bc <vfprintf+0x354>
    a0b8:	98 2c       	mov	r9, r8
    a0ba:	21 2c       	mov	r2, r1
    a0bc:	a4 fe       	sbrs	r10, 4
    a0be:	10 c0       	rjmp	.+32     	; 0xa0e0 <vfprintf+0x378>
    a0c0:	b6 01       	movw	r22, r12
    a0c2:	80 e3       	ldi	r24, 0x30	; 48
    a0c4:	90 e0       	ldi	r25, 0x00	; 0
    a0c6:	0e 94 4b 52 	call	0xa496	; 0xa496 <fputc>
    a0ca:	a2 fe       	sbrs	r10, 2
    a0cc:	17 c0       	rjmp	.+46     	; 0xa0fc <vfprintf+0x394>
    a0ce:	a1 fc       	sbrc	r10, 1
    a0d0:	03 c0       	rjmp	.+6      	; 0xa0d8 <vfprintf+0x370>
    a0d2:	88 e7       	ldi	r24, 0x78	; 120
    a0d4:	90 e0       	ldi	r25, 0x00	; 0
    a0d6:	02 c0       	rjmp	.+4      	; 0xa0dc <vfprintf+0x374>
    a0d8:	88 e5       	ldi	r24, 0x58	; 88
    a0da:	90 e0       	ldi	r25, 0x00	; 0
    a0dc:	b6 01       	movw	r22, r12
    a0de:	0c c0       	rjmp	.+24     	; 0xa0f8 <vfprintf+0x390>
    a0e0:	8a 2d       	mov	r24, r10
    a0e2:	86 78       	andi	r24, 0x86	; 134
    a0e4:	59 f0       	breq	.+22     	; 0xa0fc <vfprintf+0x394>
    a0e6:	a1 fe       	sbrs	r10, 1
    a0e8:	02 c0       	rjmp	.+4      	; 0xa0ee <vfprintf+0x386>
    a0ea:	8b e2       	ldi	r24, 0x2B	; 43
    a0ec:	01 c0       	rjmp	.+2      	; 0xa0f0 <vfprintf+0x388>
    a0ee:	80 e2       	ldi	r24, 0x20	; 32
    a0f0:	a7 fc       	sbrc	r10, 7
    a0f2:	8d e2       	ldi	r24, 0x2D	; 45
    a0f4:	b6 01       	movw	r22, r12
    a0f6:	90 e0       	ldi	r25, 0x00	; 0
    a0f8:	0e 94 4b 52 	call	0xa496	; 0xa496 <fputc>
    a0fc:	89 14       	cp	r8, r9
    a0fe:	38 f4       	brcc	.+14     	; 0xa10e <vfprintf+0x3a6>
    a100:	b6 01       	movw	r22, r12
    a102:	80 e3       	ldi	r24, 0x30	; 48
    a104:	90 e0       	ldi	r25, 0x00	; 0
    a106:	0e 94 4b 52 	call	0xa496	; 0xa496 <fputc>
    a10a:	9a 94       	dec	r9
    a10c:	f7 cf       	rjmp	.-18     	; 0xa0fc <vfprintf+0x394>
    a10e:	8a 94       	dec	r8
    a110:	f3 01       	movw	r30, r6
    a112:	e8 0d       	add	r30, r8
    a114:	f1 1d       	adc	r31, r1
    a116:	80 81       	ld	r24, Z
    a118:	b6 01       	movw	r22, r12
    a11a:	90 e0       	ldi	r25, 0x00	; 0
    a11c:	0e 94 4b 52 	call	0xa496	; 0xa496 <fputc>
    a120:	81 10       	cpse	r8, r1
    a122:	f5 cf       	rjmp	.-22     	; 0xa10e <vfprintf+0x3a6>
    a124:	22 20       	and	r2, r2
    a126:	09 f4       	brne	.+2      	; 0xa12a <vfprintf+0x3c2>
    a128:	42 ce       	rjmp	.-892    	; 0x9dae <vfprintf+0x46>
    a12a:	b6 01       	movw	r22, r12
    a12c:	80 e2       	ldi	r24, 0x20	; 32
    a12e:	90 e0       	ldi	r25, 0x00	; 0
    a130:	0e 94 4b 52 	call	0xa496	; 0xa496 <fputc>
    a134:	2a 94       	dec	r2
    a136:	f6 cf       	rjmp	.-20     	; 0xa124 <vfprintf+0x3bc>
    a138:	f6 01       	movw	r30, r12
    a13a:	86 81       	ldd	r24, Z+6	; 0x06
    a13c:	97 81       	ldd	r25, Z+7	; 0x07
    a13e:	02 c0       	rjmp	.+4      	; 0xa144 <vfprintf+0x3dc>
    a140:	8f ef       	ldi	r24, 0xFF	; 255
    a142:	9f ef       	ldi	r25, 0xFF	; 255
    a144:	2b 96       	adiw	r28, 0x0b	; 11
    a146:	cd bf       	out	0x3d, r28	; 61
    a148:	de bf       	out	0x3e, r29	; 62
    a14a:	df 91       	pop	r29
    a14c:	cf 91       	pop	r28
    a14e:	1f 91       	pop	r17
    a150:	0f 91       	pop	r16
    a152:	ff 90       	pop	r15
    a154:	ef 90       	pop	r14
    a156:	df 90       	pop	r13
    a158:	cf 90       	pop	r12
    a15a:	bf 90       	pop	r11
    a15c:	af 90       	pop	r10
    a15e:	9f 90       	pop	r9
    a160:	8f 90       	pop	r8
    a162:	7f 90       	pop	r7
    a164:	6f 90       	pop	r6
    a166:	5f 90       	pop	r5
    a168:	4f 90       	pop	r4
    a16a:	3f 90       	pop	r3
    a16c:	2f 90       	pop	r2
    a16e:	08 95       	ret

0000a170 <strtod>:
    a170:	8f 92       	push	r8
    a172:	9f 92       	push	r9
    a174:	af 92       	push	r10
    a176:	bf 92       	push	r11
    a178:	cf 92       	push	r12
    a17a:	df 92       	push	r13
    a17c:	ef 92       	push	r14
    a17e:	ff 92       	push	r15
    a180:	0f 93       	push	r16
    a182:	1f 93       	push	r17
    a184:	cf 93       	push	r28
    a186:	df 93       	push	r29
    a188:	ec 01       	movw	r28, r24
    a18a:	6b 01       	movw	r12, r22
    a18c:	61 15       	cp	r22, r1
    a18e:	71 05       	cpc	r23, r1
    a190:	19 f0       	breq	.+6      	; 0xa198 <strtod+0x28>
    a192:	fb 01       	movw	r30, r22
    a194:	80 83       	st	Z, r24
    a196:	91 83       	std	Z+1, r25	; 0x01
    a198:	7e 01       	movw	r14, r28
    a19a:	ff ef       	ldi	r31, 0xFF	; 255
    a19c:	ef 1a       	sub	r14, r31
    a19e:	ff 0a       	sbc	r15, r31
    a1a0:	08 81       	ld	r16, Y
    a1a2:	80 2f       	mov	r24, r16
    a1a4:	90 e0       	ldi	r25, 0x00	; 0
    a1a6:	0e 94 14 52 	call	0xa428	; 0xa428 <isspace>
    a1aa:	89 2b       	or	r24, r25
    a1ac:	11 f0       	breq	.+4      	; 0xa1b2 <strtod+0x42>
    a1ae:	e7 01       	movw	r28, r14
    a1b0:	f3 cf       	rjmp	.-26     	; 0xa198 <strtod+0x28>
    a1b2:	0d 32       	cpi	r16, 0x2D	; 45
    a1b4:	39 f4       	brne	.+14     	; 0xa1c4 <strtod+0x54>
    a1b6:	7e 01       	movw	r14, r28
    a1b8:	82 e0       	ldi	r24, 0x02	; 2
    a1ba:	e8 0e       	add	r14, r24
    a1bc:	f1 1c       	adc	r15, r1
    a1be:	09 81       	ldd	r16, Y+1	; 0x01
    a1c0:	11 e0       	ldi	r17, 0x01	; 1
    a1c2:	08 c0       	rjmp	.+16     	; 0xa1d4 <strtod+0x64>
    a1c4:	0b 32       	cpi	r16, 0x2B	; 43
    a1c6:	29 f4       	brne	.+10     	; 0xa1d2 <strtod+0x62>
    a1c8:	7e 01       	movw	r14, r28
    a1ca:	92 e0       	ldi	r25, 0x02	; 2
    a1cc:	e9 0e       	add	r14, r25
    a1ce:	f1 1c       	adc	r15, r1
    a1d0:	09 81       	ldd	r16, Y+1	; 0x01
    a1d2:	10 e0       	ldi	r17, 0x00	; 0
    a1d4:	e7 01       	movw	r28, r14
    a1d6:	21 97       	sbiw	r28, 0x01	; 1
    a1d8:	43 e0       	ldi	r20, 0x03	; 3
    a1da:	50 e0       	ldi	r21, 0x00	; 0
    a1dc:	68 e5       	ldi	r22, 0x58	; 88
    a1de:	72 e0       	ldi	r23, 0x02	; 2
    a1e0:	ce 01       	movw	r24, r28
    a1e2:	0e 94 1d 52 	call	0xa43a	; 0xa43a <strncasecmp_P>
    a1e6:	89 2b       	or	r24, r25
    a1e8:	c1 f4       	brne	.+48     	; 0xa21a <strtod+0xaa>
    a1ea:	23 96       	adiw	r28, 0x03	; 3
    a1ec:	45 e0       	ldi	r20, 0x05	; 5
    a1ee:	50 e0       	ldi	r21, 0x00	; 0
    a1f0:	63 e5       	ldi	r22, 0x53	; 83
    a1f2:	72 e0       	ldi	r23, 0x02	; 2
    a1f4:	ce 01       	movw	r24, r28
    a1f6:	0e 94 1d 52 	call	0xa43a	; 0xa43a <strncasecmp_P>
    a1fa:	89 2b       	or	r24, r25
    a1fc:	09 f4       	brne	.+2      	; 0xa200 <strtod+0x90>
    a1fe:	25 96       	adiw	r28, 0x05	; 5
    a200:	c1 14       	cp	r12, r1
    a202:	d1 04       	cpc	r13, r1
    a204:	19 f0       	breq	.+6      	; 0xa20c <strtod+0x9c>
    a206:	f6 01       	movw	r30, r12
    a208:	c0 83       	st	Z, r28
    a20a:	d1 83       	std	Z+1, r29	; 0x01
    a20c:	11 11       	cpse	r17, r1
    a20e:	f6 c0       	rjmp	.+492    	; 0xa3fc <strtod+0x28c>
    a210:	60 e0       	ldi	r22, 0x00	; 0
    a212:	70 e0       	ldi	r23, 0x00	; 0
    a214:	80 e8       	ldi	r24, 0x80	; 128
    a216:	9f e7       	ldi	r25, 0x7F	; 127
    a218:	fa c0       	rjmp	.+500    	; 0xa40e <strtod+0x29e>
    a21a:	43 e0       	ldi	r20, 0x03	; 3
    a21c:	50 e0       	ldi	r21, 0x00	; 0
    a21e:	60 e5       	ldi	r22, 0x50	; 80
    a220:	72 e0       	ldi	r23, 0x02	; 2
    a222:	ce 01       	movw	r24, r28
    a224:	0e 94 1d 52 	call	0xa43a	; 0xa43a <strncasecmp_P>
    a228:	89 2b       	or	r24, r25
    a22a:	59 f4       	brne	.+22     	; 0xa242 <strtod+0xd2>
    a22c:	c1 14       	cp	r12, r1
    a22e:	d1 04       	cpc	r13, r1
    a230:	09 f4       	brne	.+2      	; 0xa234 <strtod+0xc4>
    a232:	e9 c0       	rjmp	.+466    	; 0xa406 <strtod+0x296>
    a234:	f2 e0       	ldi	r31, 0x02	; 2
    a236:	ef 0e       	add	r14, r31
    a238:	f1 1c       	adc	r15, r1
    a23a:	f6 01       	movw	r30, r12
    a23c:	e0 82       	st	Z, r14
    a23e:	f1 82       	std	Z+1, r15	; 0x01
    a240:	e2 c0       	rjmp	.+452    	; 0xa406 <strtod+0x296>
    a242:	20 e0       	ldi	r18, 0x00	; 0
    a244:	30 e0       	ldi	r19, 0x00	; 0
    a246:	a9 01       	movw	r20, r18
    a248:	c0 e0       	ldi	r28, 0x00	; 0
    a24a:	d0 e0       	ldi	r29, 0x00	; 0
    a24c:	f7 01       	movw	r30, r14
    a24e:	60 ed       	ldi	r22, 0xD0	; 208
    a250:	a6 2e       	mov	r10, r22
    a252:	a0 0e       	add	r10, r16
    a254:	89 e0       	ldi	r24, 0x09	; 9
    a256:	8a 15       	cp	r24, r10
    a258:	30 f1       	brcs	.+76     	; 0xa2a6 <strtod+0x136>
    a25a:	91 2f       	mov	r25, r17
    a25c:	92 60       	ori	r25, 0x02	; 2
    a25e:	b9 2e       	mov	r11, r25
    a260:	81 2f       	mov	r24, r17
    a262:	88 70       	andi	r24, 0x08	; 8
    a264:	12 ff       	sbrs	r17, 2
    a266:	04 c0       	rjmp	.+8      	; 0xa270 <strtod+0x100>
    a268:	81 11       	cpse	r24, r1
    a26a:	24 c0       	rjmp	.+72     	; 0xa2b4 <strtod+0x144>
    a26c:	21 96       	adiw	r28, 0x01	; 1
    a26e:	22 c0       	rjmp	.+68     	; 0xa2b4 <strtod+0x144>
    a270:	81 11       	cpse	r24, r1
    a272:	21 97       	sbiw	r28, 0x01	; 1
    a274:	a5 e0       	ldi	r26, 0x05	; 5
    a276:	b0 e0       	ldi	r27, 0x00	; 0
    a278:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__muluhisi3>
    a27c:	dc 01       	movw	r26, r24
    a27e:	cb 01       	movw	r24, r22
    a280:	88 0f       	add	r24, r24
    a282:	99 1f       	adc	r25, r25
    a284:	aa 1f       	adc	r26, r26
    a286:	bb 1f       	adc	r27, r27
    a288:	9c 01       	movw	r18, r24
    a28a:	ad 01       	movw	r20, r26
    a28c:	2a 0d       	add	r18, r10
    a28e:	31 1d       	adc	r19, r1
    a290:	41 1d       	adc	r20, r1
    a292:	51 1d       	adc	r21, r1
    a294:	28 39       	cpi	r18, 0x98	; 152
    a296:	89 e9       	ldi	r24, 0x99	; 153
    a298:	38 07       	cpc	r19, r24
    a29a:	48 07       	cpc	r20, r24
    a29c:	89 e1       	ldi	r24, 0x19	; 25
    a29e:	58 07       	cpc	r21, r24
    a2a0:	48 f0       	brcs	.+18     	; 0xa2b4 <strtod+0x144>
    a2a2:	16 60       	ori	r17, 0x06	; 6
    a2a4:	06 c0       	rjmp	.+12     	; 0xa2b2 <strtod+0x142>
    a2a6:	9e ef       	ldi	r25, 0xFE	; 254
    a2a8:	a9 12       	cpse	r10, r25
    a2aa:	0a c0       	rjmp	.+20     	; 0xa2c0 <strtod+0x150>
    a2ac:	13 fd       	sbrc	r17, 3
    a2ae:	40 c0       	rjmp	.+128    	; 0xa330 <strtod+0x1c0>
    a2b0:	18 60       	ori	r17, 0x08	; 8
    a2b2:	b1 2e       	mov	r11, r17
    a2b4:	8f ef       	ldi	r24, 0xFF	; 255
    a2b6:	e8 1a       	sub	r14, r24
    a2b8:	f8 0a       	sbc	r15, r24
    a2ba:	00 81       	ld	r16, Z
    a2bc:	1b 2d       	mov	r17, r11
    a2be:	c6 cf       	rjmp	.-116    	; 0xa24c <strtod+0xdc>
    a2c0:	80 2f       	mov	r24, r16
    a2c2:	8f 7d       	andi	r24, 0xDF	; 223
    a2c4:	85 34       	cpi	r24, 0x45	; 69
    a2c6:	a1 f5       	brne	.+104    	; 0xa330 <strtod+0x1c0>
    a2c8:	80 81       	ld	r24, Z
    a2ca:	8d 32       	cpi	r24, 0x2D	; 45
    a2cc:	11 f4       	brne	.+4      	; 0xa2d2 <strtod+0x162>
    a2ce:	10 61       	ori	r17, 0x10	; 16
    a2d0:	06 c0       	rjmp	.+12     	; 0xa2de <strtod+0x16e>
    a2d2:	8b 32       	cpi	r24, 0x2B	; 43
    a2d4:	21 f0       	breq	.+8      	; 0xa2de <strtod+0x16e>
    a2d6:	31 96       	adiw	r30, 0x01	; 1
    a2d8:	61 e0       	ldi	r22, 0x01	; 1
    a2da:	70 e0       	ldi	r23, 0x00	; 0
    a2dc:	04 c0       	rjmp	.+8      	; 0xa2e6 <strtod+0x176>
    a2de:	81 81       	ldd	r24, Z+1	; 0x01
    a2e0:	32 96       	adiw	r30, 0x02	; 2
    a2e2:	62 e0       	ldi	r22, 0x02	; 2
    a2e4:	70 e0       	ldi	r23, 0x00	; 0
    a2e6:	80 53       	subi	r24, 0x30	; 48
    a2e8:	8a 30       	cpi	r24, 0x0A	; 10
    a2ea:	18 f0       	brcs	.+6      	; 0xa2f2 <strtod+0x182>
    a2ec:	e6 1b       	sub	r30, r22
    a2ee:	f7 0b       	sbc	r31, r23
    a2f0:	1f c0       	rjmp	.+62     	; 0xa330 <strtod+0x1c0>
    a2f2:	60 e0       	ldi	r22, 0x00	; 0
    a2f4:	70 e0       	ldi	r23, 0x00	; 0
    a2f6:	60 38       	cpi	r22, 0x80	; 128
    a2f8:	9c e0       	ldi	r25, 0x0C	; 12
    a2fa:	79 07       	cpc	r23, r25
    a2fc:	5c f4       	brge	.+22     	; 0xa314 <strtod+0x1a4>
    a2fe:	db 01       	movw	r26, r22
    a300:	aa 0f       	add	r26, r26
    a302:	bb 1f       	adc	r27, r27
    a304:	aa 0f       	add	r26, r26
    a306:	bb 1f       	adc	r27, r27
    a308:	6a 0f       	add	r22, r26
    a30a:	7b 1f       	adc	r23, r27
    a30c:	66 0f       	add	r22, r22
    a30e:	77 1f       	adc	r23, r23
    a310:	68 0f       	add	r22, r24
    a312:	71 1d       	adc	r23, r1
    a314:	31 96       	adiw	r30, 0x01	; 1
    a316:	df 01       	movw	r26, r30
    a318:	11 97       	sbiw	r26, 0x01	; 1
    a31a:	8c 91       	ld	r24, X
    a31c:	80 53       	subi	r24, 0x30	; 48
    a31e:	8a 30       	cpi	r24, 0x0A	; 10
    a320:	50 f3       	brcs	.-44     	; 0xa2f6 <strtod+0x186>
    a322:	14 ff       	sbrs	r17, 4
    a324:	03 c0       	rjmp	.+6      	; 0xa32c <strtod+0x1bc>
    a326:	71 95       	neg	r23
    a328:	61 95       	neg	r22
    a32a:	71 09       	sbc	r23, r1
    a32c:	c6 0f       	add	r28, r22
    a32e:	d7 1f       	adc	r29, r23
    a330:	11 ff       	sbrs	r17, 1
    a332:	08 c0       	rjmp	.+16     	; 0xa344 <strtod+0x1d4>
    a334:	c1 14       	cp	r12, r1
    a336:	d1 04       	cpc	r13, r1
    a338:	29 f0       	breq	.+10     	; 0xa344 <strtod+0x1d4>
    a33a:	cf 01       	movw	r24, r30
    a33c:	01 97       	sbiw	r24, 0x01	; 1
    a33e:	f6 01       	movw	r30, r12
    a340:	80 83       	st	Z, r24
    a342:	91 83       	std	Z+1, r25	; 0x01
    a344:	ca 01       	movw	r24, r20
    a346:	b9 01       	movw	r22, r18
    a348:	0e 94 b7 4a 	call	0x956e	; 0x956e <__floatunsisf>
    a34c:	21 2f       	mov	r18, r17
    a34e:	23 70       	andi	r18, 0x03	; 3
    a350:	23 30       	cpi	r18, 0x03	; 3
    a352:	19 f0       	breq	.+6      	; 0xa35a <strtod+0x1ea>
    a354:	4b 01       	movw	r8, r22
    a356:	5c 01       	movw	r10, r24
    a358:	06 c0       	rjmp	.+12     	; 0xa366 <strtod+0x1f6>
    a35a:	4b 01       	movw	r8, r22
    a35c:	5c 01       	movw	r10, r24
    a35e:	b7 fa       	bst	r11, 7
    a360:	b0 94       	com	r11
    a362:	b7 f8       	bld	r11, 7
    a364:	b0 94       	com	r11
    a366:	20 e0       	ldi	r18, 0x00	; 0
    a368:	30 e0       	ldi	r19, 0x00	; 0
    a36a:	a9 01       	movw	r20, r18
    a36c:	c5 01       	movw	r24, r10
    a36e:	b4 01       	movw	r22, r8
    a370:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__cmpsf2>
    a374:	88 23       	and	r24, r24
    a376:	09 f4       	brne	.+2      	; 0xa37a <strtod+0x20a>
    a378:	3e c0       	rjmp	.+124    	; 0xa3f6 <strtod+0x286>
    a37a:	d7 ff       	sbrs	r29, 7
    a37c:	06 c0       	rjmp	.+12     	; 0xa38a <strtod+0x21a>
    a37e:	d1 95       	neg	r29
    a380:	c1 95       	neg	r28
    a382:	d1 09       	sbc	r29, r1
    a384:	0f e6       	ldi	r16, 0x6F	; 111
    a386:	12 e0       	ldi	r17, 0x02	; 2
    a388:	02 c0       	rjmp	.+4      	; 0xa38e <strtod+0x21e>
    a38a:	07 e8       	ldi	r16, 0x87	; 135
    a38c:	12 e0       	ldi	r17, 0x02	; 2
    a38e:	68 01       	movw	r12, r16
    a390:	f8 e1       	ldi	r31, 0x18	; 24
    a392:	cf 1a       	sub	r12, r31
    a394:	d1 08       	sbc	r13, r1
    a396:	90 e2       	ldi	r25, 0x20	; 32
    a398:	e9 2e       	mov	r14, r25
    a39a:	f1 2c       	mov	r15, r1
    a39c:	ce 15       	cp	r28, r14
    a39e:	df 05       	cpc	r29, r15
    a3a0:	74 f0       	brlt	.+28     	; 0xa3be <strtod+0x24e>
    a3a2:	f8 01       	movw	r30, r16
    a3a4:	25 91       	lpm	r18, Z+
    a3a6:	35 91       	lpm	r19, Z+
    a3a8:	45 91       	lpm	r20, Z+
    a3aa:	54 91       	lpm	r21, Z
    a3ac:	c5 01       	movw	r24, r10
    a3ae:	b4 01       	movw	r22, r8
    a3b0:	0e 94 af 4b 	call	0x975e	; 0x975e <__mulsf3>
    a3b4:	4b 01       	movw	r8, r22
    a3b6:	5c 01       	movw	r10, r24
    a3b8:	ce 19       	sub	r28, r14
    a3ba:	df 09       	sbc	r29, r15
    a3bc:	ef cf       	rjmp	.-34     	; 0xa39c <strtod+0x22c>
    a3be:	04 50       	subi	r16, 0x04	; 4
    a3c0:	11 09       	sbc	r17, r1
    a3c2:	f5 94       	asr	r15
    a3c4:	e7 94       	ror	r14
    a3c6:	0c 15       	cp	r16, r12
    a3c8:	1d 05       	cpc	r17, r13
    a3ca:	41 f7       	brne	.-48     	; 0xa39c <strtod+0x22c>
    a3cc:	8a 2d       	mov	r24, r10
    a3ce:	88 0f       	add	r24, r24
    a3d0:	8b 2d       	mov	r24, r11
    a3d2:	88 1f       	adc	r24, r24
    a3d4:	8f 3f       	cpi	r24, 0xFF	; 255
    a3d6:	49 f0       	breq	.+18     	; 0xa3ea <strtod+0x27a>
    a3d8:	20 e0       	ldi	r18, 0x00	; 0
    a3da:	30 e0       	ldi	r19, 0x00	; 0
    a3dc:	a9 01       	movw	r20, r18
    a3de:	c5 01       	movw	r24, r10
    a3e0:	b4 01       	movw	r22, r8
    a3e2:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__cmpsf2>
    a3e6:	81 11       	cpse	r24, r1
    a3e8:	06 c0       	rjmp	.+12     	; 0xa3f6 <strtod+0x286>
    a3ea:	82 e2       	ldi	r24, 0x22	; 34
    a3ec:	90 e0       	ldi	r25, 0x00	; 0
    a3ee:	80 93 af 4a 	sts	0x4AAF, r24	; 0x804aaf <errno>
    a3f2:	90 93 b0 4a 	sts	0x4AB0, r25	; 0x804ab0 <errno+0x1>
    a3f6:	c5 01       	movw	r24, r10
    a3f8:	b4 01       	movw	r22, r8
    a3fa:	09 c0       	rjmp	.+18     	; 0xa40e <strtod+0x29e>
    a3fc:	60 e0       	ldi	r22, 0x00	; 0
    a3fe:	70 e0       	ldi	r23, 0x00	; 0
    a400:	80 e8       	ldi	r24, 0x80	; 128
    a402:	9f ef       	ldi	r25, 0xFF	; 255
    a404:	04 c0       	rjmp	.+8      	; 0xa40e <strtod+0x29e>
    a406:	60 e0       	ldi	r22, 0x00	; 0
    a408:	70 e0       	ldi	r23, 0x00	; 0
    a40a:	80 ec       	ldi	r24, 0xC0	; 192
    a40c:	9f e7       	ldi	r25, 0x7F	; 127
    a40e:	df 91       	pop	r29
    a410:	cf 91       	pop	r28
    a412:	1f 91       	pop	r17
    a414:	0f 91       	pop	r16
    a416:	ff 90       	pop	r15
    a418:	ef 90       	pop	r14
    a41a:	df 90       	pop	r13
    a41c:	cf 90       	pop	r12
    a41e:	bf 90       	pop	r11
    a420:	af 90       	pop	r10
    a422:	9f 90       	pop	r9
    a424:	8f 90       	pop	r8
    a426:	08 95       	ret

0000a428 <isspace>:
    a428:	91 11       	cpse	r25, r1
    a42a:	0c 94 e5 52 	jmp	0xa5ca	; 0xa5ca <__ctype_isfalse>
    a42e:	80 32       	cpi	r24, 0x20	; 32
    a430:	19 f0       	breq	.+6      	; 0xa438 <isspace+0x10>
    a432:	89 50       	subi	r24, 0x09	; 9
    a434:	85 50       	subi	r24, 0x05	; 5
    a436:	c8 f7       	brcc	.-14     	; 0xa42a <isspace+0x2>
    a438:	08 95       	ret

0000a43a <strncasecmp_P>:
    a43a:	fb 01       	movw	r30, r22
    a43c:	dc 01       	movw	r26, r24
    a43e:	41 50       	subi	r20, 0x01	; 1
    a440:	50 40       	sbci	r21, 0x00	; 0
    a442:	88 f0       	brcs	.+34     	; 0xa466 <strncasecmp_P+0x2c>
    a444:	8d 91       	ld	r24, X+
    a446:	81 34       	cpi	r24, 0x41	; 65
    a448:	1c f0       	brlt	.+6      	; 0xa450 <strncasecmp_P+0x16>
    a44a:	8b 35       	cpi	r24, 0x5B	; 91
    a44c:	0c f4       	brge	.+2      	; 0xa450 <strncasecmp_P+0x16>
    a44e:	80 5e       	subi	r24, 0xE0	; 224
    a450:	65 91       	lpm	r22, Z+
    a452:	61 34       	cpi	r22, 0x41	; 65
    a454:	1c f0       	brlt	.+6      	; 0xa45c <strncasecmp_P+0x22>
    a456:	6b 35       	cpi	r22, 0x5B	; 91
    a458:	0c f4       	brge	.+2      	; 0xa45c <strncasecmp_P+0x22>
    a45a:	60 5e       	subi	r22, 0xE0	; 224
    a45c:	86 1b       	sub	r24, r22
    a45e:	61 11       	cpse	r22, r1
    a460:	71 f3       	breq	.-36     	; 0xa43e <strncasecmp_P+0x4>
    a462:	99 0b       	sbc	r25, r25
    a464:	08 95       	ret
    a466:	88 1b       	sub	r24, r24
    a468:	fc cf       	rjmp	.-8      	; 0xa462 <strncasecmp_P+0x28>

0000a46a <strnlen_P>:
    a46a:	fc 01       	movw	r30, r24
    a46c:	05 90       	lpm	r0, Z+
    a46e:	61 50       	subi	r22, 0x01	; 1
    a470:	70 40       	sbci	r23, 0x00	; 0
    a472:	01 10       	cpse	r0, r1
    a474:	d8 f7       	brcc	.-10     	; 0xa46c <strnlen_P+0x2>
    a476:	80 95       	com	r24
    a478:	90 95       	com	r25
    a47a:	8e 0f       	add	r24, r30
    a47c:	9f 1f       	adc	r25, r31
    a47e:	08 95       	ret

0000a480 <strnlen>:
    a480:	fc 01       	movw	r30, r24
    a482:	61 50       	subi	r22, 0x01	; 1
    a484:	70 40       	sbci	r23, 0x00	; 0
    a486:	01 90       	ld	r0, Z+
    a488:	01 10       	cpse	r0, r1
    a48a:	d8 f7       	brcc	.-10     	; 0xa482 <strnlen+0x2>
    a48c:	80 95       	com	r24
    a48e:	90 95       	com	r25
    a490:	8e 0f       	add	r24, r30
    a492:	9f 1f       	adc	r25, r31
    a494:	08 95       	ret

0000a496 <fputc>:
    a496:	0f 93       	push	r16
    a498:	1f 93       	push	r17
    a49a:	cf 93       	push	r28
    a49c:	df 93       	push	r29
    a49e:	fb 01       	movw	r30, r22
    a4a0:	23 81       	ldd	r18, Z+3	; 0x03
    a4a2:	21 fd       	sbrc	r18, 1
    a4a4:	03 c0       	rjmp	.+6      	; 0xa4ac <fputc+0x16>
    a4a6:	8f ef       	ldi	r24, 0xFF	; 255
    a4a8:	9f ef       	ldi	r25, 0xFF	; 255
    a4aa:	2c c0       	rjmp	.+88     	; 0xa504 <fputc+0x6e>
    a4ac:	22 ff       	sbrs	r18, 2
    a4ae:	16 c0       	rjmp	.+44     	; 0xa4dc <fputc+0x46>
    a4b0:	46 81       	ldd	r20, Z+6	; 0x06
    a4b2:	57 81       	ldd	r21, Z+7	; 0x07
    a4b4:	24 81       	ldd	r18, Z+4	; 0x04
    a4b6:	35 81       	ldd	r19, Z+5	; 0x05
    a4b8:	42 17       	cp	r20, r18
    a4ba:	53 07       	cpc	r21, r19
    a4bc:	44 f4       	brge	.+16     	; 0xa4ce <fputc+0x38>
    a4be:	a0 81       	ld	r26, Z
    a4c0:	b1 81       	ldd	r27, Z+1	; 0x01
    a4c2:	9d 01       	movw	r18, r26
    a4c4:	2f 5f       	subi	r18, 0xFF	; 255
    a4c6:	3f 4f       	sbci	r19, 0xFF	; 255
    a4c8:	20 83       	st	Z, r18
    a4ca:	31 83       	std	Z+1, r19	; 0x01
    a4cc:	8c 93       	st	X, r24
    a4ce:	26 81       	ldd	r18, Z+6	; 0x06
    a4d0:	37 81       	ldd	r19, Z+7	; 0x07
    a4d2:	2f 5f       	subi	r18, 0xFF	; 255
    a4d4:	3f 4f       	sbci	r19, 0xFF	; 255
    a4d6:	26 83       	std	Z+6, r18	; 0x06
    a4d8:	37 83       	std	Z+7, r19	; 0x07
    a4da:	14 c0       	rjmp	.+40     	; 0xa504 <fputc+0x6e>
    a4dc:	8b 01       	movw	r16, r22
    a4de:	ec 01       	movw	r28, r24
    a4e0:	fb 01       	movw	r30, r22
    a4e2:	00 84       	ldd	r0, Z+8	; 0x08
    a4e4:	f1 85       	ldd	r31, Z+9	; 0x09
    a4e6:	e0 2d       	mov	r30, r0
    a4e8:	09 95       	icall
    a4ea:	89 2b       	or	r24, r25
    a4ec:	e1 f6       	brne	.-72     	; 0xa4a6 <fputc+0x10>
    a4ee:	d8 01       	movw	r26, r16
    a4f0:	16 96       	adiw	r26, 0x06	; 6
    a4f2:	8d 91       	ld	r24, X+
    a4f4:	9c 91       	ld	r25, X
    a4f6:	17 97       	sbiw	r26, 0x07	; 7
    a4f8:	01 96       	adiw	r24, 0x01	; 1
    a4fa:	16 96       	adiw	r26, 0x06	; 6
    a4fc:	8d 93       	st	X+, r24
    a4fe:	9c 93       	st	X, r25
    a500:	17 97       	sbiw	r26, 0x07	; 7
    a502:	ce 01       	movw	r24, r28
    a504:	df 91       	pop	r29
    a506:	cf 91       	pop	r28
    a508:	1f 91       	pop	r17
    a50a:	0f 91       	pop	r16
    a50c:	08 95       	ret

0000a50e <__ultoa_invert>:
    a50e:	fa 01       	movw	r30, r20
    a510:	aa 27       	eor	r26, r26
    a512:	28 30       	cpi	r18, 0x08	; 8
    a514:	51 f1       	breq	.+84     	; 0xa56a <__ultoa_invert+0x5c>
    a516:	20 31       	cpi	r18, 0x10	; 16
    a518:	81 f1       	breq	.+96     	; 0xa57a <__ultoa_invert+0x6c>
    a51a:	e8 94       	clt
    a51c:	6f 93       	push	r22
    a51e:	6e 7f       	andi	r22, 0xFE	; 254
    a520:	6e 5f       	subi	r22, 0xFE	; 254
    a522:	7f 4f       	sbci	r23, 0xFF	; 255
    a524:	8f 4f       	sbci	r24, 0xFF	; 255
    a526:	9f 4f       	sbci	r25, 0xFF	; 255
    a528:	af 4f       	sbci	r26, 0xFF	; 255
    a52a:	b1 e0       	ldi	r27, 0x01	; 1
    a52c:	3e d0       	rcall	.+124    	; 0xa5aa <__ultoa_invert+0x9c>
    a52e:	b4 e0       	ldi	r27, 0x04	; 4
    a530:	3c d0       	rcall	.+120    	; 0xa5aa <__ultoa_invert+0x9c>
    a532:	67 0f       	add	r22, r23
    a534:	78 1f       	adc	r23, r24
    a536:	89 1f       	adc	r24, r25
    a538:	9a 1f       	adc	r25, r26
    a53a:	a1 1d       	adc	r26, r1
    a53c:	68 0f       	add	r22, r24
    a53e:	79 1f       	adc	r23, r25
    a540:	8a 1f       	adc	r24, r26
    a542:	91 1d       	adc	r25, r1
    a544:	a1 1d       	adc	r26, r1
    a546:	6a 0f       	add	r22, r26
    a548:	71 1d       	adc	r23, r1
    a54a:	81 1d       	adc	r24, r1
    a54c:	91 1d       	adc	r25, r1
    a54e:	a1 1d       	adc	r26, r1
    a550:	20 d0       	rcall	.+64     	; 0xa592 <__ultoa_invert+0x84>
    a552:	09 f4       	brne	.+2      	; 0xa556 <__ultoa_invert+0x48>
    a554:	68 94       	set
    a556:	3f 91       	pop	r19
    a558:	2a e0       	ldi	r18, 0x0A	; 10
    a55a:	26 9f       	mul	r18, r22
    a55c:	11 24       	eor	r1, r1
    a55e:	30 19       	sub	r19, r0
    a560:	30 5d       	subi	r19, 0xD0	; 208
    a562:	31 93       	st	Z+, r19
    a564:	de f6       	brtc	.-74     	; 0xa51c <__ultoa_invert+0xe>
    a566:	cf 01       	movw	r24, r30
    a568:	08 95       	ret
    a56a:	46 2f       	mov	r20, r22
    a56c:	47 70       	andi	r20, 0x07	; 7
    a56e:	40 5d       	subi	r20, 0xD0	; 208
    a570:	41 93       	st	Z+, r20
    a572:	b3 e0       	ldi	r27, 0x03	; 3
    a574:	0f d0       	rcall	.+30     	; 0xa594 <__ultoa_invert+0x86>
    a576:	c9 f7       	brne	.-14     	; 0xa56a <__ultoa_invert+0x5c>
    a578:	f6 cf       	rjmp	.-20     	; 0xa566 <__ultoa_invert+0x58>
    a57a:	46 2f       	mov	r20, r22
    a57c:	4f 70       	andi	r20, 0x0F	; 15
    a57e:	40 5d       	subi	r20, 0xD0	; 208
    a580:	4a 33       	cpi	r20, 0x3A	; 58
    a582:	18 f0       	brcs	.+6      	; 0xa58a <__ultoa_invert+0x7c>
    a584:	49 5d       	subi	r20, 0xD9	; 217
    a586:	31 fd       	sbrc	r19, 1
    a588:	40 52       	subi	r20, 0x20	; 32
    a58a:	41 93       	st	Z+, r20
    a58c:	02 d0       	rcall	.+4      	; 0xa592 <__ultoa_invert+0x84>
    a58e:	a9 f7       	brne	.-22     	; 0xa57a <__ultoa_invert+0x6c>
    a590:	ea cf       	rjmp	.-44     	; 0xa566 <__ultoa_invert+0x58>
    a592:	b4 e0       	ldi	r27, 0x04	; 4
    a594:	a6 95       	lsr	r26
    a596:	97 95       	ror	r25
    a598:	87 95       	ror	r24
    a59a:	77 95       	ror	r23
    a59c:	67 95       	ror	r22
    a59e:	ba 95       	dec	r27
    a5a0:	c9 f7       	brne	.-14     	; 0xa594 <__ultoa_invert+0x86>
    a5a2:	00 97       	sbiw	r24, 0x00	; 0
    a5a4:	61 05       	cpc	r22, r1
    a5a6:	71 05       	cpc	r23, r1
    a5a8:	08 95       	ret
    a5aa:	9b 01       	movw	r18, r22
    a5ac:	ac 01       	movw	r20, r24
    a5ae:	0a 2e       	mov	r0, r26
    a5b0:	06 94       	lsr	r0
    a5b2:	57 95       	ror	r21
    a5b4:	47 95       	ror	r20
    a5b6:	37 95       	ror	r19
    a5b8:	27 95       	ror	r18
    a5ba:	ba 95       	dec	r27
    a5bc:	c9 f7       	brne	.-14     	; 0xa5b0 <__ultoa_invert+0xa2>
    a5be:	62 0f       	add	r22, r18
    a5c0:	73 1f       	adc	r23, r19
    a5c2:	84 1f       	adc	r24, r20
    a5c4:	95 1f       	adc	r25, r21
    a5c6:	a0 1d       	adc	r26, r0
    a5c8:	08 95       	ret

0000a5ca <__ctype_isfalse>:
    a5ca:	99 27       	eor	r25, r25
    a5cc:	88 27       	eor	r24, r24

0000a5ce <__ctype_istrue>:
    a5ce:	08 95       	ret

0000a5d0 <eeprom_read_byte>:
    a5d0:	03 d0       	rcall	.+6      	; 0xa5d8 <eeprom_mapen>
    a5d2:	80 81       	ld	r24, Z
    a5d4:	99 27       	eor	r25, r25
    a5d6:	08 95       	ret

0000a5d8 <eeprom_mapen>:
    a5d8:	fc 01       	movw	r30, r24
    a5da:	e0 50       	subi	r30, 0x00	; 0
    a5dc:	fc 4e       	sbci	r31, 0xEC	; 236
    a5de:	08 95       	ret

0000a5e0 <eeprom_read_dword>:
    a5e0:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <eeprom_mapen>
    a5e4:	60 81       	ld	r22, Z
    a5e6:	71 81       	ldd	r23, Z+1	; 0x01
    a5e8:	82 81       	ldd	r24, Z+2	; 0x02
    a5ea:	93 81       	ldd	r25, Z+3	; 0x03
    a5ec:	08 95       	ret

0000a5ee <eeprom_read_word>:
    a5ee:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <eeprom_mapen>
    a5f2:	80 81       	ld	r24, Z
    a5f4:	91 81       	ldd	r25, Z+1	; 0x01
    a5f6:	08 95       	ret

0000a5f8 <__divmodqi4>:
    a5f8:	87 fb       	bst	r24, 7
    a5fa:	08 2e       	mov	r0, r24
    a5fc:	06 26       	eor	r0, r22
    a5fe:	87 fd       	sbrc	r24, 7
    a600:	81 95       	neg	r24
    a602:	67 fd       	sbrc	r22, 7
    a604:	61 95       	neg	r22
    a606:	0e 94 11 53 	call	0xa622	; 0xa622 <__udivmodqi4>
    a60a:	0e f4       	brtc	.+2      	; 0xa60e <__divmodqi4_1>
    a60c:	91 95       	neg	r25

0000a60e <__divmodqi4_1>:
    a60e:	07 fc       	sbrc	r0, 7
    a610:	81 95       	neg	r24

0000a612 <__divmodqi4_exit>:
    a612:	08 95       	ret

0000a614 <__xload_1>:
    a614:	57 fd       	sbrc	r21, 7
    a616:	03 c0       	rjmp	.+6      	; 0xa61e <__xload_1+0xa>
    a618:	5b bf       	out	0x3b, r21	; 59
    a61a:	67 91       	elpm	r22, Z+
    a61c:	08 95       	ret
    a61e:	60 81       	ld	r22, Z
    a620:	08 95       	ret

0000a622 <__udivmodqi4>:
    a622:	99 1b       	sub	r25, r25
    a624:	79 e0       	ldi	r23, 0x09	; 9
    a626:	04 c0       	rjmp	.+8      	; 0xa630 <__udivmodqi4_ep>

0000a628 <__udivmodqi4_loop>:
    a628:	99 1f       	adc	r25, r25
    a62a:	96 17       	cp	r25, r22
    a62c:	08 f0       	brcs	.+2      	; 0xa630 <__udivmodqi4_ep>
    a62e:	96 1b       	sub	r25, r22

0000a630 <__udivmodqi4_ep>:
    a630:	88 1f       	adc	r24, r24
    a632:	7a 95       	dec	r23
    a634:	c9 f7       	brne	.-14     	; 0xa628 <__udivmodqi4_loop>
    a636:	80 95       	com	r24
    a638:	08 95       	ret

0000a63a <__do_global_dtors>:
    a63a:	11 e0       	ldi	r17, 0x01	; 1
    a63c:	ce ea       	ldi	r28, 0xAE	; 174
    a63e:	d1 e0       	ldi	r29, 0x01	; 1
    a640:	04 c0       	rjmp	.+8      	; 0xa64a <__do_global_dtors+0x10>
    a642:	fe 01       	movw	r30, r28
    a644:	0e 94 95 4c 	call	0x992a	; 0x992a <__tablejump2__>
    a648:	21 96       	adiw	r28, 0x01	; 1
    a64a:	c0 3b       	cpi	r28, 0xB0	; 176
    a64c:	d1 07       	cpc	r29, r17
    a64e:	c9 f7       	brne	.-14     	; 0xa642 <__do_global_dtors+0x8>
    a650:	f8 94       	cli

0000a652 <__stop_program>:
    a652:	ff cf       	rjmp	.-2      	; 0xa652 <__stop_program>
