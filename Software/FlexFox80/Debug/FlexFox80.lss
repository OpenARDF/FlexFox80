
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00804000  00001bfc  00001cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bfc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b6  0080406a  0080406a  00001d1a  2**0
                  ALLOC
  3 .eeprom       0000001f  00810000  00810000  00001d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00001d39  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004c8  00000000  00000000  00001dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009860  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000041bb  00000000  00000000  0000bb00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003c4b  00000000  00000000  0000fcbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000db8  00000000  00000000  00013908  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003b3f  00000000  00000000  000146c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004475  00000000  00000000  000181ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004a8  00000000  00000000  0001c674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_7>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_12>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_13>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      68:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      6c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      78:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_30>
      7c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_31>
      80:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_32>
      84:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      8c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      90:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      94:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      98:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      9c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_41>
      a8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      ac:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      bc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      cc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      dc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e8:	45 07       	cpc	r20, r21
      ea:	09 07       	cpc	r16, r25
      ec:	35 07       	cpc	r19, r21
      ee:	4d 07       	cpc	r20, r29
      f0:	39 07       	cpc	r19, r25
      f2:	4d 07       	cpc	r20, r29
      f4:	19 07       	cpc	r17, r25
      f6:	05 07       	cpc	r16, r21
      f8:	11 07       	cpc	r17, r17
      fa:	15 07       	cpc	r17, r21
      fc:	4d 07       	cpc	r20, r29
      fe:	29 07       	cpc	r18, r25
     100:	fd 06       	cpc	r15, r29
     102:	2d 07       	cpc	r18, r29
     104:	f9 06       	cpc	r15, r25
     106:	0d 07       	cpc	r16, r29
     108:	d1 06       	cpc	r13, r17
     10a:	d5 06       	cpc	r13, r21
     10c:	d9 06       	cpc	r13, r25
     10e:	dd 06       	cpc	r13, r29
     110:	e1 06       	cpc	r14, r17
     112:	e5 06       	cpc	r14, r21
     114:	e9 06       	cpc	r14, r25
     116:	ed 06       	cpc	r14, r29
     118:	f1 06       	cpc	r15, r17
     11a:	f5 06       	cpc	r15, r21
     11c:	1d 07       	cpc	r17, r29
     11e:	21 07       	cpc	r18, r17
     120:	49 07       	cpc	r20, r25
     122:	25 07       	cpc	r18, r21
     124:	4d 07       	cpc	r20, r29
     126:	01 07       	cpc	r16, r17
     128:	3d 07       	cpc	r19, r29
     12a:	69 06       	cpc	r6, r25
     12c:	6d 06       	cpc	r6, r29
     12e:	71 06       	cpc	r7, r17
     130:	75 06       	cpc	r7, r21
     132:	79 06       	cpc	r7, r25
     134:	7d 06       	cpc	r7, r29
     136:	81 06       	cpc	r8, r17
     138:	85 06       	cpc	r8, r21
     13a:	89 06       	cpc	r8, r25
     13c:	8d 06       	cpc	r8, r29
     13e:	91 06       	cpc	r9, r17
     140:	95 06       	cpc	r9, r21
     142:	99 06       	cpc	r9, r25
     144:	9d 06       	cpc	r9, r29
     146:	a1 06       	cpc	r10, r17
     148:	a5 06       	cpc	r10, r21
     14a:	a9 06       	cpc	r10, r25
     14c:	ad 06       	cpc	r10, r29
     14e:	b1 06       	cpc	r11, r17
     150:	b5 06       	cpc	r11, r21
     152:	b9 06       	cpc	r11, r25
     154:	bd 06       	cpc	r11, r29
     156:	c1 06       	cpc	r12, r17
     158:	c5 06       	cpc	r12, r21
     15a:	c9 06       	cpc	r12, r25
     15c:	cd 06       	cpc	r12, r29
     15e:	4d 07       	cpc	r20, r29
     160:	4d 07       	cpc	r20, r29
     162:	4d 07       	cpc	r20, r29
     164:	4d 07       	cpc	r20, r29
     166:	31 07       	cpc	r19, r17
     168:	4d 07       	cpc	r20, r29
     16a:	4d 07       	cpc	r20, r29
     16c:	4d 07       	cpc	r20, r29
     16e:	4d 07       	cpc	r20, r29
     170:	4d 07       	cpc	r20, r29
     172:	4d 07       	cpc	r20, r29
     174:	4d 07       	cpc	r20, r29
     176:	4d 07       	cpc	r20, r29
     178:	4d 07       	cpc	r20, r29
     17a:	4d 07       	cpc	r20, r29
     17c:	4d 07       	cpc	r20, r29
     17e:	4d 07       	cpc	r20, r29
     180:	4d 07       	cpc	r20, r29
     182:	4d 07       	cpc	r20, r29
     184:	4d 07       	cpc	r20, r29
     186:	4d 07       	cpc	r20, r29
     188:	4d 07       	cpc	r20, r29
     18a:	4d 07       	cpc	r20, r29
     18c:	4d 07       	cpc	r20, r29
     18e:	4d 07       	cpc	r20, r29
     190:	4d 07       	cpc	r20, r29
     192:	4d 07       	cpc	r20, r29
     194:	4d 07       	cpc	r20, r29
     196:	4d 07       	cpc	r20, r29
     198:	4d 07       	cpc	r20, r29
     19a:	4d 07       	cpc	r20, r29
     19c:	4d 07       	cpc	r20, r29
     19e:	4d 07       	cpc	r20, r29
     1a0:	41 07       	cpc	r20, r17

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	df e7       	ldi	r29, 0x7F	; 127
     1ac:	de bf       	out	0x3e, r29	; 62

000001ae <__do_copy_data>:
     1ae:	10 e4       	ldi	r17, 0x40	; 64
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b0 e4       	ldi	r27, 0x40	; 64
     1b4:	ec ef       	ldi	r30, 0xFC	; 252
     1b6:	fb e1       	ldi	r31, 0x1B	; 27
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	0b bf       	out	0x3b, r16	; 59
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x14>
     1be:	07 90       	elpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	aa 36       	cpi	r26, 0x6A	; 106
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0x10>

000001c8 <__do_clear_bss>:
     1c8:	22 e4       	ldi	r18, 0x42	; 66
     1ca:	aa e6       	ldi	r26, 0x6A	; 106
     1cc:	b0 e4       	ldi	r27, 0x40	; 64
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a0 32       	cpi	r26, 0x20	; 32
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 35 04 	call	0x86a	; 0x86a <main>
     1dc:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1e4:	0e 94 97 04 	call	0x92e	; 0x92e <system_init>
     1e8:	08 95       	ret

000001ea <__vector_7>:
#include "include/linkbus.h"
#include "include/usart_basic.h"
#include "include/morse.h"

ISR(TCA0_OVF_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
	/* Insert your TCA overflow interrupt handling code */
//	LED_toggle_level();

	/* The interrupt flag has to be cleared manually */
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
}
     1fc:	8f 91       	pop	r24
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <__vector_13>:

ISR(TCB1_INT_vect)
{
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	8f 93       	push	r24
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
     214:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
     218:	80 ff       	sbrs	r24, 0
     21a:	03 c0       	rjmp	.+6      	; 0x222 <__vector_13+0x1a>
    {
        TCB1.INTFLAGS = TCB_CAPT_bm;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
     222:	8f 91       	pop	r24
     224:	0f 90       	pop	r0
     226:	0f be       	out	0x3f, r0	; 63
     228:	0f 90       	pop	r0
     22a:	1f 90       	pop	r1
     22c:	18 95       	reti

0000022e <__vector_30>:

ISR(TCB2_INT_vect)
{
     22e:	1f 92       	push	r1
     230:	0f 92       	push	r0
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	0f 92       	push	r0
     236:	11 24       	eor	r1, r1
     238:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     23a:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     23e:	80 ff       	sbrs	r24, 0
     240:	03 c0       	rjmp	.+6      	; 0x248 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     248:	8f 91       	pop	r24
     24a:	0f 90       	pop	r0
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	0f 90       	pop	r0
     250:	1f 90       	pop	r1
     252:	18 95       	reti

00000254 <__vector_41>:

/**
One-second counter based on CPU clock.
*/
ISR(TCB3_INT_vect)
{
     254:	1f 92       	push	r1
     256:	0f 92       	push	r0
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	0f 92       	push	r0
     25c:	11 24       	eor	r1, r1
     25e:	2f 93       	push	r18
     260:	3f 93       	push	r19
     262:	8f 93       	push	r24
     264:	9f 93       	push	r25
    /**
     * The interrupt flag is cleared by writing 1 to it, or when the Capture register
     * is read in Capture mode
     */

    if(TCB3.INTFLAGS & TCB_CAPT_bm)
     266:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     26a:	80 ff       	sbrs	r24, 0
     26c:	18 c0       	rjmp	.+48     	; 0x29e <__vector_41+0x4a>
    {
		if(cnt++ == 299)
     26e:	80 91 77 40 	lds	r24, 0x4077	; 0x804077 <cnt.4945>
     272:	90 91 78 40 	lds	r25, 0x4078	; 0x804078 <cnt.4945+0x1>
     276:	9c 01       	movw	r18, r24
     278:	2f 5f       	subi	r18, 0xFF	; 255
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	20 93 77 40 	sts	0x4077, r18	; 0x804077 <cnt.4945>
     280:	30 93 78 40 	sts	0x4078, r19	; 0x804078 <cnt.4945+0x1>
     284:	8b 32       	cpi	r24, 0x2B	; 43
     286:	91 40       	sbci	r25, 0x01	; 1
     288:	39 f4       	brne	.+14     	; 0x298 <__vector_41+0x44>
		{
			cnt = 0;
     28a:	10 92 77 40 	sts	0x4077, r1	; 0x804077 <cnt.4945>
     28e:	10 92 78 40 	sts	0x4078, r1	; 0x804078 <cnt.4945+0x1>
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
     292:	8a b1       	in	r24, 0x0a	; 10
     294:	80 64       	ori	r24, 0x40	; 64
     296:	8a b9       	out	0x0a, r24	; 10
			LED_toggle_level();
		}

        TCB3.INTFLAGS = TCB_CAPT_bm;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    }
}
     29e:	9f 91       	pop	r25
     2a0:	8f 91       	pop	r24
     2a2:	3f 91       	pop	r19
     2a4:	2f 91       	pop	r18
     2a6:	0f 90       	pop	r0
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	0f 90       	pop	r0
     2ac:	1f 90       	pop	r1
     2ae:	18 95       	reti

000002b0 <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	0b b6       	in	r0, 0x3b	; 59
     2bc:	0f 92       	push	r0
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	2f 93       	push	r18
     2c4:	3f 93       	push	r19
     2c6:	4f 93       	push	r20
     2c8:	5f 93       	push	r21
     2ca:	6f 93       	push	r22
     2cc:	7f 93       	push	r23
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	af 93       	push	r26
     2d4:	bf 93       	push	r27
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static uint32_t msg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = USART1_get_data();
     2de:	0e 94 02 09 	call	0x1204	; 0x1204 <USART1_get_data>
     2e2:	18 2f       	mov	r17, r24

	if(!buff)
     2e4:	80 91 75 40 	lds	r24, 0x4075	; 0x804075 <buff.4951>
     2e8:	90 91 76 40 	lds	r25, 0x4076	; 0x804076 <buff.4951+0x1>
     2ec:	89 2b       	or	r24, r25
     2ee:	31 f4       	brne	.+12     	; 0x2fc <__vector_31+0x4c>
	{
		buff = nextEmptyRxBuffer();
     2f0:	0e 94 a7 05 	call	0xb4e	; 0xb4e <nextEmptyRxBuffer>
     2f4:	80 93 75 40 	sts	0x4075, r24	; 0x804075 <buff.4951>
     2f8:	90 93 76 40 	sts	0x4076, r25	; 0x804076 <buff.4951+0x1>
	}

	if(buff)
     2fc:	c0 91 75 40 	lds	r28, 0x4075	; 0x804075 <buff.4951>
     300:	d0 91 76 40 	lds	r29, 0x4076	; 0x804076 <buff.4951+0x1>
     304:	20 97       	sbiw	r28, 0x00	; 0
     306:	09 f4       	brne	.+2      	; 0x30a <__vector_31+0x5a>
     308:	e3 c0       	rjmp	.+454    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
	{
		rx_char = toupper(rx_char);
     30a:	81 2f       	mov	r24, r17
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 17 0b 	call	0x162e	; 0x162e <toupper>
//		SMCR = 0x00;                                /* exit power-down mode */

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
     312:	84 32       	cpi	r24, 0x24	; 36
     314:	11 f0       	breq	.+4      	; 0x31a <__vector_31+0x6a>
     316:	81 32       	cpi	r24, 0x21	; 33
     318:	49 f5       	brne	.+82     	; 0x36c <__vector_31+0xbc>
		{
			charIndex = 0;
     31a:	10 92 74 40 	sts	0x4074, r1	; 0x804074 <charIndex.4952>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
     31e:	81 32       	cpi	r24, 0x21	; 33
     320:	11 f4       	brne	.+4      	; 0x326 <__vector_31+0x76>
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	01 c0       	rjmp	.+2      	; 0x328 <__vector_31+0x78>
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	88 83       	st	Y, r24
			field_len = 0;
     32a:	10 92 73 40 	sts	0x4073, r1	; 0x804073 <field_len.4954>
			msg_ID = LINKBUS_MSG_UNKNOWN;
     32e:	10 92 6f 40 	sts	0x406F, r1	; 0x80406f <msg_ID.4955>
     332:	10 92 70 40 	sts	0x4070, r1	; 0x804070 <msg_ID.4955+0x1>
     336:	10 92 71 40 	sts	0x4071, r1	; 0x804071 <msg_ID.4955+0x2>
     33a:	10 92 72 40 	sts	0x4072, r1	; 0x804072 <msg_ID.4955+0x3>
			receiving_msg = TRUE;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 6e 40 	sts	0x406E, r24	; 0x80406e <receiving_msg.4956>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     344:	10 92 6d 40 	sts	0x406D, r1	; 0x80406d <field_index.4953>
     348:	0a c0       	rjmp	.+20     	; 0x35e <__vector_31+0xae>
			{
				buff->fields[field_index][0] = '\0';
     34a:	fe 01       	movw	r30, r28
     34c:	05 e1       	ldi	r16, 0x15	; 21
     34e:	80 9f       	mul	r24, r16
     350:	e0 0d       	add	r30, r0
     352:	f1 1d       	adc	r31, r1
     354:	11 24       	eor	r1, r1
     356:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			msg_ID = LINKBUS_MSG_UNKNOWN;
			receiving_msg = TRUE;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     358:	8f 5f       	subi	r24, 0xFF	; 255
     35a:	80 93 6d 40 	sts	0x406D, r24	; 0x80406d <field_index.4953>
     35e:	80 91 6d 40 	lds	r24, 0x406D	; 0x80406d <field_index.4953>
     362:	83 30       	cpi	r24, 0x03	; 3
     364:	90 f3       	brcs	.-28     	; 0x34a <__vector_31+0x9a>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
     366:	10 92 6d 40 	sts	0x406D, r1	; 0x80406d <field_index.4953>
     36a:	a7 c0       	rjmp	.+334    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		}
		else if(receiving_msg)
     36c:	90 91 6e 40 	lds	r25, 0x406E	; 0x80406e <receiving_msg.4956>
     370:	99 23       	and	r25, r25
     372:	09 f4       	brne	.+2      	; 0x376 <__vector_31+0xc6>
     374:	8b c0       	rjmp	.+278    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
     376:	8c 32       	cpi	r24, 0x2C	; 44
     378:	29 f0       	breq	.+10     	; 0x384 <__vector_31+0xd4>
     37a:	8b 33       	cpi	r24, 0x3B	; 59
     37c:	19 f0       	breq	.+6      	; 0x384 <__vector_31+0xd4>
     37e:	8f 33       	cpi	r24, 0x3F	; 63
     380:	09 f0       	breq	.+2      	; 0x384 <__vector_31+0xd4>
     382:	42 c0       	rjmp	.+132    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
     384:	90 91 6d 40 	lds	r25, 0x406D	; 0x80406d <field_index.4953>
     388:	99 23       	and	r25, r25
     38a:	89 f0       	breq	.+34     	; 0x3ae <__vector_31+0xfe>
				{
					buff->fields[field_index - 1][field_len] = 0;
     38c:	29 2f       	mov	r18, r25
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	21 50       	subi	r18, 0x01	; 1
     392:	31 09       	sbc	r19, r1
     394:	40 91 73 40 	lds	r20, 0x4073	; 0x804073 <field_len.4954>
     398:	55 e1       	ldi	r21, 0x15	; 21
     39a:	52 9f       	mul	r21, r18
     39c:	f0 01       	movw	r30, r0
     39e:	53 9f       	mul	r21, r19
     3a0:	f0 0d       	add	r31, r0
     3a2:	11 24       	eor	r1, r1
     3a4:	ec 0f       	add	r30, r28
     3a6:	fd 1f       	adc	r31, r29
     3a8:	e4 0f       	add	r30, r20
     3aa:	f1 1d       	adc	r31, r1
     3ac:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
     3ae:	9f 5f       	subi	r25, 0xFF	; 255
     3b0:	90 93 6d 40 	sts	0x406D, r25	; 0x80406d <field_index.4953>
				field_len = 0;
     3b4:	10 92 73 40 	sts	0x4073, r1	; 0x804073 <field_len.4954>

				if(rx_char == ';')
     3b8:	8b 33       	cpi	r24, 0x3B	; 59
     3ba:	69 f4       	brne	.+26     	; 0x3d6 <__vector_31+0x126>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     3bc:	80 91 74 40 	lds	r24, 0x4074	; 0x804074 <charIndex.4952>
     3c0:	84 30       	cpi	r24, 0x04	; 4
     3c2:	30 f0       	brcs	.+12     	; 0x3d0 <__vector_31+0x120>
					{
						buff->id = (LBMessageID)msg_ID;
     3c4:	80 91 6f 40 	lds	r24, 0x406F	; 0x80406f <msg_ID.4955>
     3c8:	90 91 70 40 	lds	r25, 0x4070	; 0x804070 <msg_ID.4955+0x1>
     3cc:	89 83       	std	Y+1, r24	; 0x01
     3ce:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     3d0:	10 92 6e 40 	sts	0x406E, r1	; 0x80406e <receiving_msg.4956>
     3d4:	10 c0       	rjmp	.+32     	; 0x3f6 <__vector_31+0x146>
				}
				else if(rx_char == '?')
     3d6:	8f 33       	cpi	r24, 0x3F	; 63
     3d8:	71 f4       	brne	.+28     	; 0x3f6 <__vector_31+0x146>
				{
					buff->type = LINKBUS_MSG_QUERY;
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	88 83       	st	Y, r24
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     3de:	80 91 74 40 	lds	r24, 0x4074	; 0x804074 <charIndex.4952>
     3e2:	84 30       	cpi	r24, 0x04	; 4
     3e4:	30 f0       	brcs	.+12     	; 0x3f2 <__vector_31+0x142>
					{
						buff->id = msg_ID;
     3e6:	80 91 6f 40 	lds	r24, 0x406F	; 0x80406f <msg_ID.4955>
     3ea:	90 91 70 40 	lds	r25, 0x4070	; 0x804070 <msg_ID.4955+0x1>
     3ee:	89 83       	std	Y+1, r24	; 0x01
     3f0:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     3f2:	10 92 6e 40 	sts	0x406E, r1	; 0x80406e <receiving_msg.4956>
				}

				if(!receiving_msg)
     3f6:	80 91 6e 40 	lds	r24, 0x406E	; 0x80406e <receiving_msg.4956>
     3fa:	81 11       	cpse	r24, r1
     3fc:	5e c0       	rjmp	.+188    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				{
					buff = 0;
     3fe:	10 92 75 40 	sts	0x4075, r1	; 0x804075 <buff.4951>
     402:	10 92 76 40 	sts	0x4076, r1	; 0x804076 <buff.4951+0x1>
     406:	59 c0       	rjmp	.+178    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
     408:	20 91 6d 40 	lds	r18, 0x406D	; 0x80406d <field_index.4953>
     40c:	21 11       	cpse	r18, r1
     40e:	29 c0       	rjmp	.+82     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				{
					msg_ID = msg_ID * 10 + rx_char;
     410:	40 91 6f 40 	lds	r20, 0x406F	; 0x80406f <msg_ID.4955>
     414:	50 91 70 40 	lds	r21, 0x4070	; 0x804070 <msg_ID.4955+0x1>
     418:	60 91 71 40 	lds	r22, 0x4071	; 0x804071 <msg_ID.4955+0x2>
     41c:	70 91 72 40 	lds	r23, 0x4072	; 0x804072 <msg_ID.4955+0x3>
     420:	44 0f       	add	r20, r20
     422:	55 1f       	adc	r21, r21
     424:	66 1f       	adc	r22, r22
     426:	77 1f       	adc	r23, r23
     428:	8a 01       	movw	r16, r20
     42a:	9b 01       	movw	r18, r22
     42c:	00 0f       	add	r16, r16
     42e:	11 1f       	adc	r17, r17
     430:	22 1f       	adc	r18, r18
     432:	33 1f       	adc	r19, r19
     434:	00 0f       	add	r16, r16
     436:	11 1f       	adc	r17, r17
     438:	22 1f       	adc	r18, r18
     43a:	33 1f       	adc	r19, r19
     43c:	40 0f       	add	r20, r16
     43e:	51 1f       	adc	r21, r17
     440:	62 1f       	adc	r22, r18
     442:	73 1f       	adc	r23, r19
     444:	8a 01       	movw	r16, r20
     446:	9b 01       	movw	r18, r22
     448:	08 0f       	add	r16, r24
     44a:	11 1d       	adc	r17, r1
     44c:	21 1d       	adc	r18, r1
     44e:	31 1d       	adc	r19, r1
     450:	00 93 6f 40 	sts	0x406F, r16	; 0x80406f <msg_ID.4955>
     454:	10 93 70 40 	sts	0x4070, r17	; 0x804070 <msg_ID.4955+0x1>
     458:	20 93 71 40 	sts	0x4071, r18	; 0x804071 <msg_ID.4955+0x2>
     45c:	30 93 72 40 	sts	0x4072, r19	; 0x804072 <msg_ID.4955+0x3>
     460:	2c c0       	rjmp	.+88     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	21 50       	subi	r18, 0x01	; 1
     466:	31 09       	sbc	r19, r1
     468:	90 91 73 40 	lds	r25, 0x4073	; 0x804073 <field_len.4954>
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	49 0f       	add	r20, r25
     470:	40 93 73 40 	sts	0x4073, r20	; 0x804073 <field_len.4954>
     474:	65 e1       	ldi	r22, 0x15	; 21
     476:	62 9f       	mul	r22, r18
     478:	a0 01       	movw	r20, r0
     47a:	63 9f       	mul	r22, r19
     47c:	50 0d       	add	r21, r0
     47e:	11 24       	eor	r1, r1
     480:	c4 0f       	add	r28, r20
     482:	d5 1f       	adc	r29, r21
     484:	c9 0f       	add	r28, r25
     486:	d1 1d       	adc	r29, r1
     488:	8b 83       	std	Y+3, r24	; 0x03
     48a:	17 c0       	rjmp	.+46     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     48c:	8d 30       	cpi	r24, 0x0D	; 13
     48e:	a9 f4       	brne	.+42     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		{
			buff->id = LINKBUS_MSG_UNKNOWN;
     490:	19 82       	std	Y+1, r1	; 0x01
     492:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
     494:	82 e3       	ldi	r24, 0x32	; 50
     496:	80 93 74 40 	sts	0x4074, r24	; 0x804074 <charIndex.4952>
			field_len = 0;
     49a:	10 92 73 40 	sts	0x4073, r1	; 0x804073 <field_len.4954>
			msg_ID = LINKBUS_MSG_UNKNOWN;
     49e:	10 92 6f 40 	sts	0x406F, r1	; 0x80406f <msg_ID.4955>
     4a2:	10 92 70 40 	sts	0x4070, r1	; 0x804070 <msg_ID.4955+0x1>
     4a6:	10 92 71 40 	sts	0x4071, r1	; 0x804071 <msg_ID.4955+0x2>
     4aa:	10 92 72 40 	sts	0x4072, r1	; 0x804072 <msg_ID.4955+0x3>
			field_index = 0;
     4ae:	10 92 6d 40 	sts	0x406D, r1	; 0x80406d <field_index.4953>
			buff = NULL;
     4b2:	10 92 75 40 	sts	0x4075, r1	; 0x804075 <buff.4951>
     4b6:	10 92 76 40 	sts	0x4076, r1	; 0x804076 <buff.4951+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
     4ba:	80 91 74 40 	lds	r24, 0x4074	; 0x804074 <charIndex.4952>
     4be:	8f 5f       	subi	r24, 0xFF	; 255
     4c0:	80 93 74 40 	sts	0x4074, r24	; 0x804074 <charIndex.4952>
     4c4:	82 33       	cpi	r24, 0x32	; 50
     4c6:	20 f0       	brcs	.+8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		{
			receiving_msg = FALSE;
     4c8:	10 92 6e 40 	sts	0x406E, r1	; 0x80406e <receiving_msg.4956>
			charIndex = 0;
     4cc:	10 92 74 40 	sts	0x4074, r1	; 0x804074 <charIndex.4952>
		}
	}
}
     4d0:	ff 91       	pop	r31
     4d2:	ef 91       	pop	r30
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	bf 91       	pop	r27
     4da:	af 91       	pop	r26
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	7f 91       	pop	r23
     4e2:	6f 91       	pop	r22
     4e4:	5f 91       	pop	r21
     4e6:	4f 91       	pop	r20
     4e8:	3f 91       	pop	r19
     4ea:	2f 91       	pop	r18
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	0f 90       	pop	r0
     4f2:	0b be       	out	0x3b, r0	; 59
     4f4:	0f 90       	pop	r0
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	0f 90       	pop	r0
     4fa:	1f 90       	pop	r1
     4fc:	18 95       	reti

000004fe <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	0b b6       	in	r0, 0x3b	; 59
     50a:	0f 92       	push	r0
     50c:	2f 93       	push	r18
     50e:	3f 93       	push	r19
     510:	4f 93       	push	r20
     512:	5f 93       	push	r21
     514:	6f 93       	push	r22
     516:	7f 93       	push	r23
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
     51c:	af 93       	push	r26
     51e:	bf 93       	push	r27
     520:	ef 93       	push	r30
     522:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
     524:	80 91 6b 40 	lds	r24, 0x406B	; 0x80406b <buff.4966>
     528:	90 91 6c 40 	lds	r25, 0x406C	; 0x80406c <buff.4966+0x1>
     52c:	89 2b       	or	r24, r25
     52e:	31 f4       	brne	.+12     	; 0x53c <__vector_32+0x3e>
	{
		buff = nextFullTxBuffer();
     530:	0e 94 4f 05 	call	0xa9e	; 0xa9e <nextFullTxBuffer>
     534:	80 93 6b 40 	sts	0x406B, r24	; 0x80406b <buff.4966>
     538:	90 93 6c 40 	sts	0x406C, r25	; 0x80406c <buff.4966+0x1>
	}

	if((*buff)[charIndex])
     53c:	e0 91 6b 40 	lds	r30, 0x406B	; 0x80406b <buff.4966>
     540:	f0 91 6c 40 	lds	r31, 0x406C	; 0x80406c <buff.4966+0x1>
     544:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <__data_end>
     548:	df 01       	movw	r26, r30
     54a:	a8 0f       	add	r26, r24
     54c:	b1 1d       	adc	r27, r1
     54e:	9c 91       	ld	r25, X
     550:	99 23       	and	r25, r25
     552:	31 f0       	breq	.+12     	; 0x560 <__vector_32+0x62>
	{
		/* Put data into buffer, sends the data */
		USART1.TXDATAL = (*buff)[charIndex++];
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	80 93 6a 40 	sts	0x406A, r24	; 0x80406a <__data_end>
     55a:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     55e:	0d c0       	rjmp	.+26     	; 0x57a <__vector_32+0x7c>
	}
	else
	{
		charIndex = 0;
     560:	10 92 6a 40 	sts	0x406A, r1	; 0x80406a <__data_end>
		(*buff)[0] = '\0';
     564:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
     566:	0e 94 4f 05 	call	0xa9e	; 0xa9e <nextFullTxBuffer>
     56a:	80 93 6b 40 	sts	0x406B, r24	; 0x80406b <buff.4966>
     56e:	90 93 6c 40 	sts	0x406C, r25	; 0x80406c <buff.4966+0x1>
		if(!buff)
     572:	89 2b       	or	r24, r25
     574:	11 f4       	brne	.+4      	; 0x57a <__vector_32+0x7c>
		{
			linkbus_end_tx();
     576:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <linkbus_end_tx>
		}
	}
}
     57a:	ff 91       	pop	r31
     57c:	ef 91       	pop	r30
     57e:	bf 91       	pop	r27
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	0b be       	out	0x3b, r0	; 59
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <__vector_12>:
{
	
}

void wdt_init(WDReset resetType)
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	0b b6       	in	r0, 0x3b	; 59
     5ac:	0f 92       	push	r0
     5ae:	2f 93       	push	r18
     5b0:	3f 93       	push	r19
     5b2:	4f 93       	push	r20
     5b4:	5f 93       	push	r21
     5b6:	6f 93       	push	r22
     5b8:	7f 93       	push	r23
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
     5be:	af 93       	push	r26
     5c0:	bf 93       	push	r27
     5c2:	ef 93       	push	r30
     5c4:	ff 93       	push	r31
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <__vector_12+0x2c>
     5cc:	1f 92       	push	r1
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     5d6:	80 ff       	sbrs	r24, 0
     5d8:	30 c1       	rjmp	.+608    	; 0x83a <__vector_12+0x29a>
     5da:	80 91 7a 40 	lds	r24, 0x407A	; 0x80407a <g_util_tick_countdown>
     5de:	90 91 7b 40 	lds	r25, 0x407B	; 0x80407b <g_util_tick_countdown+0x1>
     5e2:	89 2b       	or	r24, r25
     5e4:	49 f0       	breq	.+18     	; 0x5f8 <__vector_12+0x58>
     5e6:	80 91 7a 40 	lds	r24, 0x407A	; 0x80407a <g_util_tick_countdown>
     5ea:	90 91 7b 40 	lds	r25, 0x407B	; 0x80407b <g_util_tick_countdown+0x1>
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	80 93 7a 40 	sts	0x407A, r24	; 0x80407a <g_util_tick_countdown>
     5f4:	90 93 7b 40 	sts	0x407B, r25	; 0x80407b <g_util_tick_countdown+0x1>
     5f8:	80 91 ab 40 	lds	r24, 0x40AB	; 0x8040ab <g_event_enabled>
     5fc:	88 23       	and	r24, r24
     5fe:	09 f4       	brne	.+2      	; 0x602 <__vector_12+0x62>
     600:	86 c0       	rjmp	.+268    	; 0x70e <__vector_12+0x16e>
     602:	80 91 ac 40 	lds	r24, 0x40AC	; 0x8040ac <g_event_commenced>
     606:	88 23       	and	r24, r24
     608:	09 f4       	brne	.+2      	; 0x60c <__vector_12+0x6c>
     60a:	81 c0       	rjmp	.+258    	; 0x70e <__vector_12+0x16e>
     60c:	80 91 7d 40 	lds	r24, 0x407D	; 0x80407d <g_on_the_air>
     610:	90 91 7e 40 	lds	r25, 0x407E	; 0x80407e <g_on_the_air+0x1>
     614:	a0 91 7f 40 	lds	r26, 0x407F	; 0x80407f <g_on_the_air+0x2>
     618:	b0 91 80 40 	lds	r27, 0x4080	; 0x804080 <g_on_the_air+0x3>
     61c:	18 16       	cp	r1, r24
     61e:	19 06       	cpc	r1, r25
     620:	1a 06       	cpc	r1, r26
     622:	1b 06       	cpc	r1, r27
     624:	0c f0       	brlt	.+2      	; 0x628 <__vector_12+0x88>
     626:	58 c0       	rjmp	.+176    	; 0x6d8 <__vector_12+0x138>
     628:	80 91 bc 40 	lds	r24, 0x40BC	; 0x8040bc <codeInc.5647>
     62c:	90 91 bd 40 	lds	r25, 0x40BD	; 0x8040bd <codeInc.5647+0x1>
     630:	00 97       	sbiw	r24, 0x00	; 0
     632:	09 f4       	brne	.+2      	; 0x636 <__vector_12+0x96>
     634:	44 c0       	rjmp	.+136    	; 0x6be <__vector_12+0x11e>
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	80 93 bc 40 	sts	0x40BC, r24	; 0x8040bc <codeInc.5647>
     63c:	90 93 bd 40 	sts	0x40BD, r25	; 0x8040bd <codeInc.5647+0x1>
     640:	89 2b       	or	r24, r25
     642:	09 f0       	breq	.+2      	; 0x646 <__vector_12+0xa6>
     644:	64 c0       	rjmp	.+200    	; 0x70e <__vector_12+0x16e>
     646:	ae 01       	movw	r20, r28
     648:	4e 5f       	subi	r20, 0xFE	; 254
     64a:	5f 4f       	sbci	r21, 0xFF	; 255
     64c:	be 01       	movw	r22, r28
     64e:	6d 5f       	subi	r22, 0xFD	; 253
     650:	7f 4f       	sbci	r23, 0xFF	; 255
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 51 07 	call	0xea2	; 0xea2 <makeMorse>
     65a:	80 93 be 40 	sts	0x40BE, r24	; 0x8040be <key.5650>
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	81 11       	cpse	r24, r1
     662:	25 c0       	rjmp	.+74     	; 0x6ae <__vector_12+0x10e>
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	88 23       	and	r24, r24
     668:	11 f1       	breq	.+68     	; 0x6ae <__vector_12+0x10e>
     66a:	8d ef       	ldi	r24, 0xFD	; 253
     66c:	80 93 79 40 	sts	0x4079, r24	; 0x804079 <g_last_status_code>
     670:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <g_pattern_codespeed>
     674:	0e 94 3c 04 	call	0x878	; 0x878 <throttleValue>
     678:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <g_code_throttle>
     67c:	90 93 02 40 	sts	0x4002, r25	; 0x804002 <g_code_throttle+0x1>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	8b 83       	std	Y+3, r24	; 0x03
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	be 01       	movw	r22, r28
     68a:	6d 5f       	subi	r22, 0xFD	; 253
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	81 e8       	ldi	r24, 0x81	; 129
     690:	90 e4       	ldi	r25, 0x40	; 64
     692:	0e 94 51 07 	call	0xea2	; 0xea2 <makeMorse>
     696:	ae 01       	movw	r20, r28
     698:	4e 5f       	subi	r20, 0xFE	; 254
     69a:	5f 4f       	sbci	r21, 0xFF	; 255
     69c:	be 01       	movw	r22, r28
     69e:	6d 5f       	subi	r22, 0xFD	; 253
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 51 07 	call	0xea2	; 0xea2 <makeMorse>
     6aa:	80 93 be 40 	sts	0x40BE, r24	; 0x8040be <key.5650>
     6ae:	80 91 be 40 	lds	r24, 0x40BE	; 0x8040be <key.5650>
     6b2:	88 23       	and	r24, r24
     6b4:	61 f1       	breq	.+88     	; 0x70e <__vector_12+0x16e>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 c0 08 	call	0x1180	; 0x1180 <powerToTransmitter>
     6bc:	28 c0       	rjmp	.+80     	; 0x70e <__vector_12+0x16e>
     6be:	80 91 be 40 	lds	r24, 0x40BE	; 0x8040be <key.5650>
     6c2:	0e 94 c2 08 	call	0x1184	; 0x1184 <keyTransmitter>
     6c6:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <g_code_throttle>
     6ca:	90 91 02 40 	lds	r25, 0x4002	; 0x804002 <g_code_throttle+0x1>
     6ce:	80 93 bc 40 	sts	0x40BC, r24	; 0x8040bc <codeInc.5647>
     6d2:	90 93 bd 40 	sts	0x40BD, r25	; 0x8040bd <codeInc.5647+0x1>
     6d6:	1b c0       	rjmp	.+54     	; 0x70e <__vector_12+0x16e>
     6d8:	80 91 7d 40 	lds	r24, 0x407D	; 0x80407d <g_on_the_air>
     6dc:	90 91 7e 40 	lds	r25, 0x407E	; 0x80407e <g_on_the_air+0x1>
     6e0:	a0 91 7f 40 	lds	r26, 0x407F	; 0x80407f <g_on_the_air+0x2>
     6e4:	b0 91 80 40 	lds	r27, 0x4080	; 0x804080 <g_on_the_air+0x3>
     6e8:	89 2b       	or	r24, r25
     6ea:	8a 2b       	or	r24, r26
     6ec:	8b 2b       	or	r24, r27
     6ee:	79 f4       	brne	.+30     	; 0x70e <__vector_12+0x16e>
     6f0:	80 91 be 40 	lds	r24, 0x40BE	; 0x8040be <key.5650>
     6f4:	88 23       	and	r24, r24
     6f6:	59 f0       	breq	.+22     	; 0x70e <__vector_12+0x16e>
     6f8:	10 92 be 40 	sts	0x40BE, r1	; 0x8040be <key.5650>
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 c2 08 	call	0x1184	; 0x1184 <keyTransmitter>
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 c0 08 	call	0x1180	; 0x1180 <powerToTransmitter>
     708:	8e ef       	ldi	r24, 0xFE	; 254
     70a:	80 93 79 40 	sts	0x4079, r24	; 0x804079 <g_last_status_code>
     70e:	80 91 bf 40 	lds	r24, 0x40BF	; 0x8040bf <conversionInProcess.5645>
     712:	81 11       	cpse	r24, r1
     714:	42 c0       	rjmp	.+132    	; 0x79a <__vector_12+0x1fa>
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	80 93 c0 40 	sts	0x40C0, r24	; 0x8040c0 <indexConversionInProcess.5646>
     71c:	19 82       	std	Y+1, r1	; 0x01
     71e:	25 c0       	rjmp	.+74     	; 0x76a <__vector_12+0x1ca>
     720:	e9 81       	ldd	r30, Y+1	; 0x01
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	ec 5f       	subi	r30, 0xFC	; 252
     72a:	ff 4b       	sbci	r31, 0xBF	; 191
     72c:	80 81       	ld	r24, Z
     72e:	91 81       	ldd	r25, Z+1	; 0x01
     730:	89 2b       	or	r24, r25
     732:	59 f0       	breq	.+22     	; 0x74a <__vector_12+0x1aa>
     734:	e9 81       	ldd	r30, Y+1	; 0x01
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	ec 5f       	subi	r30, 0xFC	; 252
     73e:	ff 4b       	sbci	r31, 0xBF	; 191
     740:	80 81       	ld	r24, Z
     742:	91 81       	ldd	r25, Z+1	; 0x01
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	80 83       	st	Z, r24
     748:	91 83       	std	Z+1, r25	; 0x01
     74a:	e9 81       	ldd	r30, Y+1	; 0x01
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	ee 0f       	add	r30, r30
     750:	ff 1f       	adc	r31, r31
     752:	ec 5f       	subi	r30, 0xFC	; 252
     754:	ff 4b       	sbci	r31, 0xBF	; 191
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	89 2b       	or	r24, r25
     75c:	19 f4       	brne	.+6      	; 0x764 <__vector_12+0x1c4>
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	80 93 c0 40 	sts	0x40C0, r24	; 0x8040c0 <indexConversionInProcess.5646>
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	89 83       	std	Y+1, r24	; 0x01
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	85 30       	cpi	r24, 0x05	; 5
     76e:	c0 f2       	brcs	.-80     	; 0x720 <__vector_12+0x180>
     770:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <indexConversionInProcess.5646>
     774:	88 23       	and	r24, r24
     776:	0c f4       	brge	.+2      	; 0x77a <__vector_12+0x1da>
     778:	60 c0       	rjmp	.+192    	; 0x83a <__vector_12+0x29a>
     77a:	88 0f       	add	r24, r24
     77c:	99 0b       	sbc	r25, r25
     77e:	fc 01       	movw	r30, r24
     780:	ea 5a       	subi	r30, 0xAA	; 170
     782:	ff 4b       	sbci	r31, 0xBF	; 191
     784:	20 81       	ld	r18, Z
     786:	31 81       	ldd	r19, Z+1	; 0x01
     788:	fc 01       	movw	r30, r24
     78a:	ec 5f       	subi	r30, 0xFC	; 252
     78c:	ff 4b       	sbci	r31, 0xBF	; 191
     78e:	20 83       	st	Z, r18
     790:	31 83       	std	Z+1, r19	; 0x01
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 93 bf 40 	sts	0x40BF, r24	; 0x8040bf <conversionInProcess.5645>
     798:	50 c0       	rjmp	.+160    	; 0x83a <__vector_12+0x29a>
     79a:	10 92 c1 40 	sts	0x40C1, r1	; 0x8040c1 <holdConversionResult.5656>
     79e:	10 92 c2 40 	sts	0x40C2, r1	; 0x8040c2 <holdConversionResult.5656+0x1>
     7a2:	40 91 c0 40 	lds	r20, 0x40C0	; 0x8040c0 <indexConversionInProcess.5646>
     7a6:	84 2f       	mov	r24, r20
     7a8:	04 2e       	mov	r0, r20
     7aa:	00 0c       	add	r0, r0
     7ac:	99 0b       	sbc	r25, r25
     7ae:	fc 01       	movw	r30, r24
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	ee 54       	subi	r30, 0x4E	; 78
     7b6:	ff 4b       	sbci	r31, 0xBF	; 191
     7b8:	20 81       	ld	r18, Z
     7ba:	31 81       	ldd	r19, Z+1	; 0x01
     7bc:	fc 01       	movw	r30, r24
     7be:	e3 55       	subi	r30, 0x53	; 83
     7c0:	ff 4b       	sbci	r31, 0xBF	; 191
     7c2:	51 e0       	ldi	r21, 0x01	; 1
     7c4:	50 83       	st	Z, r21
     7c6:	41 11       	cpse	r20, r1
     7c8:	2d c0       	rjmp	.+90     	; 0x824 <__vector_12+0x284>
     7ca:	fc 01       	movw	r30, r24
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	e0 5a       	subi	r30, 0xA0	; 160
     7d2:	ff 4b       	sbci	r31, 0xBF	; 191
     7d4:	40 81       	ld	r20, Z
     7d6:	51 81       	ldd	r21, Z+1	; 0x01
     7d8:	42 17       	cp	r20, r18
     7da:	53 07       	cpc	r21, r19
     7dc:	60 f4       	brcc	.+24     	; 0x7f6 <__vector_12+0x256>
     7de:	fc 01       	movw	r30, r24
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ec 5f       	subi	r30, 0xFC	; 252
     7e6:	ff 4b       	sbci	r31, 0xBF	; 191
     7e8:	24 e6       	ldi	r18, 0x64	; 100
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	20 83       	st	Z, r18
     7ee:	31 83       	std	Z+1, r19	; 0x01
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	19 c0       	rjmp	.+50     	; 0x828 <__vector_12+0x288>
     7f6:	21 15       	cp	r18, r1
     7f8:	31 05       	cpc	r19, r1
     7fa:	11 f0       	breq	.+4      	; 0x800 <__vector_12+0x260>
     7fc:	21 50       	subi	r18, 0x01	; 1
     7fe:	31 09       	sbc	r19, r1
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	40 93 7c 40 	sts	0x407C, r20	; 0x80407c <g_battery_measurements_active>
     806:	24 37       	cpi	r18, 0x74	; 116
     808:	44 e0       	ldi	r20, 0x04	; 4
     80a:	34 07       	cpc	r19, r20
     80c:	18 f0       	brcs	.+6      	; 0x814 <__vector_12+0x274>
     80e:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
     812:	0a c0       	rjmp	.+20     	; 0x828 <__vector_12+0x288>
     814:	2d 38       	cpi	r18, 0x8D	; 141
     816:	42 e0       	ldi	r20, 0x02	; 2
     818:	34 07       	cpc	r19, r20
     81a:	30 f0       	brcs	.+12     	; 0x828 <__vector_12+0x288>
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	40 93 00 40 	sts	0x4000, r20	; 0x804000 <__DATA_REGION_ORIGIN__>
     822:	02 c0       	rjmp	.+4      	; 0x828 <__vector_12+0x288>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	fc 01       	movw	r30, r24
     82e:	ee 54       	subi	r30, 0x4E	; 78
     830:	ff 4b       	sbci	r31, 0xBF	; 191
     832:	20 83       	st	Z, r18
     834:	31 83       	std	Z+1, r19	; 0x01
     836:	10 92 bf 40 	sts	0x40BF, r1	; 0x8040bf <conversionInProcess.5645>
     83a:	23 96       	adiw	r28, 0x03	; 3
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	de bf       	out	0x3e, r29	; 62
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	ff 91       	pop	r31
     846:	ef 91       	pop	r30
     848:	bf 91       	pop	r27
     84a:	af 91       	pop	r26
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	7f 91       	pop	r23
     852:	6f 91       	pop	r22
     854:	5f 91       	pop	r21
     856:	4f 91       	pop	r20
     858:	3f 91       	pop	r19
     85a:	2f 91       	pop	r18
     85c:	0f 90       	pop	r0
     85e:	0b be       	out	0x3b, r0	; 59
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <main>:
     86a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <atmel_start_init>
     86e:	81 e1       	ldi	r24, 0x11	; 17
     870:	90 e4       	ldi	r25, 0x40	; 64
     872:	0e 94 25 06 	call	0xc4a	; 0xc4a <linkbus_send_text>
     876:	ff cf       	rjmp	.-2      	; 0x876 <main+0xc>

00000878 <throttleValue>:
}

uint16_t throttleValue(uint8_t speed)
{
	return 0;
}
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	08 95       	ret

0000087e <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
     87e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret

00000886 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     886:	44 e2       	ldi	r20, 0x24	; 36
     888:	68 ed       	ldi	r22, 0xD8	; 216
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 4a 08 	call	0x1094	; 0x1094 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	08 95       	ret

00000896 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     896:	78 94       	sei

	return 0;
}
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	08 95       	ret

0000089c <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 c0       	rjmp	.+16     	; 0x8b0 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8a0:	e8 2f       	mov	r30, r24
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	e0 5f       	subi	r30, 0xF0	; 240
     8a6:	fb 4f       	sbci	r31, 0xFB	; 251
     8a8:	90 81       	ld	r25, Z
     8aa:	98 60       	ori	r25, 0x08	; 8
     8ac:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	88 30       	cpi	r24, 0x08	; 8
     8b2:	b0 f3       	brcs	.-20     	; 0x8a0 <mcu_init+0x4>
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8b8:	e8 2f       	mov	r30, r24
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	e0 5d       	subi	r30, 0xD0	; 208
     8be:	fb 4f       	sbci	r31, 0xFB	; 251
     8c0:	90 81       	ld	r25, Z
     8c2:	98 60       	ori	r25, 0x08	; 8
     8c4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8c6:	8f 5f       	subi	r24, 0xFF	; 255
     8c8:	88 30       	cpi	r24, 0x08	; 8
     8ca:	b0 f3       	brcs	.-20     	; 0x8b8 <mcu_init+0x1c>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8d0:	e8 2f       	mov	r30, r24
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e0 5b       	subi	r30, 0xB0	; 176
     8d6:	fb 4f       	sbci	r31, 0xFB	; 251
     8d8:	90 81       	ld	r25, Z
     8da:	98 60       	ori	r25, 0x08	; 8
     8dc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8de:	8f 5f       	subi	r24, 0xFF	; 255
     8e0:	88 30       	cpi	r24, 0x08	; 8
     8e2:	b0 f3       	brcs	.-20     	; 0x8d0 <mcu_init+0x34>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 c0       	rjmp	.+16     	; 0x8f8 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8e8:	e8 2f       	mov	r30, r24
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	e0 59       	subi	r30, 0x90	; 144
     8ee:	fb 4f       	sbci	r31, 0xFB	; 251
     8f0:	90 81       	ld	r25, Z
     8f2:	98 60       	ori	r25, 0x08	; 8
     8f4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	88 30       	cpi	r24, 0x08	; 8
     8fa:	b0 f3       	brcs	.-20     	; 0x8e8 <mcu_init+0x4c>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	08 c0       	rjmp	.+16     	; 0x910 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     900:	e8 2f       	mov	r30, r24
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	e0 57       	subi	r30, 0x70	; 112
     906:	fb 4f       	sbci	r31, 0xFB	; 251
     908:	90 81       	ld	r25, Z
     90a:	98 60       	ori	r25, 0x08	; 8
     90c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     90e:	8f 5f       	subi	r24, 0xFF	; 255
     910:	88 30       	cpi	r24, 0x08	; 8
     912:	b0 f3       	brcs	.-20     	; 0x900 <mcu_init+0x64>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	08 c0       	rjmp	.+16     	; 0x928 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     918:	e8 2f       	mov	r30, r24
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	e0 55       	subi	r30, 0x50	; 80
     91e:	fb 4f       	sbci	r31, 0xFB	; 251
     920:	90 81       	ld	r25, Z
     922:	98 60       	ori	r25, 0x08	; 8
     924:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	88 30       	cpi	r24, 0x08	; 8
     92a:	b0 f3       	brcs	.-20     	; 0x918 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     92c:	08 95       	ret

0000092e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     92e:	0e 94 4e 04 	call	0x89c	; 0x89c <mcu_init>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     932:	89 b1       	in	r24, 0x09	; 9
     934:	8f 7b       	andi	r24, 0xBF	; 191
     936:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     938:	88 b1       	in	r24, 0x08	; 8
     93a:	80 64       	ori	r24, 0x40	; 64
     93c:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	LED_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     93e:	0e 94 43 04 	call	0x886	; 0x886 <CLKCTRL_init>

	SLPCTRL_init();
     942:	0e 94 aa 08 	call	0x1154	; 0x1154 <SLPCTRL_init>

	CPUINT_init();
     946:	0e 94 4b 04 	call	0x896	; 0x896 <CPUINT_init>

	TIMERB_init();
     94a:	0e 94 ac 08 	call	0x1158	; 0x1158 <TIMERB_init>
	linkbus_init();
     94e:	0e 94 05 06 	call	0xc0a	; 0xc0a <linkbus_init>

	BOD_init();
     952:	0e 94 3f 04 	call	0x87e	; 0x87e <BOD_init>
     956:	08 95       	ret

00000958 <I2C_1_WaitW>:
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     95e:	90 7c       	andi	r25, 0xC0	; 192
     960:	31 f0       	breq	.+12     	; 0x96e <I2C_1_WaitW+0x16>
     962:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     966:	84 fd       	sbrc	r24, 4
     968:	07 c0       	rjmp	.+14     	; 0x978 <I2C_1_WaitW+0x20>
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	08 c0       	rjmp	.+16     	; 0x97e <I2C_1_WaitW+0x26>
     96e:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     972:	9c 70       	andi	r25, 0x0C	; 12
     974:	19 f4       	brne	.+6      	; 0x97c <I2C_1_WaitW+0x24>
     976:	03 c0       	rjmp	.+6      	; 0x97e <I2C_1_WaitW+0x26>
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	01 c0       	rjmp	.+2      	; 0x97e <I2C_1_WaitW+0x26>
     97c:	84 e0       	ldi	r24, 0x04	; 4
     97e:	88 23       	and	r24, r24
     980:	61 f3       	breq	.-40     	; 0x95a <I2C_1_WaitW+0x2>
     982:	08 95       	ret

00000984 <I2C_1_WaitR>:
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     98a:	90 7c       	andi	r25, 0xC0	; 192
     98c:	29 f4       	brne	.+10     	; 0x998 <I2C_1_WaitR+0x14>
     98e:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     992:	9c 70       	andi	r25, 0x0C	; 12
     994:	19 f4       	brne	.+6      	; 0x99c <I2C_1_WaitR+0x18>
     996:	03 c0       	rjmp	.+6      	; 0x99e <I2C_1_WaitR+0x1a>
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	01 c0       	rjmp	.+2      	; 0x99e <I2C_1_WaitR+0x1a>
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	88 23       	and	r24, r24
     9a0:	91 f3       	breq	.-28     	; 0x986 <I2C_1_WaitR+0x2>
     9a2:	08 95       	ret

000009a4 <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t address, uint8_t *pData, uint8_t len)
{
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	8b 01       	movw	r16, r22
     9b0:	d4 2f       	mov	r29, r20
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
     9b2:	8e 7f       	andi	r24, 0xFE	; 254
     9b4:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     9b8:	0e 94 ac 04 	call	0x958	; 0x958 <I2C_1_WaitW>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	e1 f4       	brne	.+56     	; 0x9f8 <I2C_1_SendData+0x54>
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
     9c0:	dd 23       	and	r29, r29
     9c2:	e1 f0       	breq	.+56     	; 0x9fc <I2C_1_SendData+0x58>
     9c4:	01 15       	cp	r16, r1
     9c6:	11 05       	cpc	r17, r1
     9c8:	79 f4       	brne	.+30     	; 0x9e8 <I2C_1_SendData+0x44>
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;

	retVal = 0;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	1a c0       	rjmp	.+52     	; 0xa02 <I2C_1_SendData+0x5e>
	if((len != 0) && (pData != NULL))
	{
		while(len--)
		{
			TWI1.MDATA = *pData;
     9ce:	f8 01       	movw	r30, r16
     9d0:	80 81       	ld	r24, Z
     9d2:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(I2C_1_WaitW() == I2C_ACKED)
     9d6:	0e 94 ac 04 	call	0x958	; 0x958 <I2C_1_WaitW>
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	89 f4       	brne	.+34     	; 0xa00 <I2C_1_SendData+0x5c>
			{
				retVal++;
     9de:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
     9e0:	0f 5f       	subi	r16, 0xFF	; 255
     9e2:	1f 4f       	sbci	r17, 0xFF	; 255
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
     9e4:	df 2d       	mov	r29, r15
			TWI1.MDATA = *pData;
			if(I2C_1_WaitW() == I2C_ACKED)
			{
				retVal++;
				pData++;
				continue;
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <I2C_1_SendData+0x46>
     9e8:	c0 e0       	ldi	r28, 0x00	; 0
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
     9ea:	ff 24       	eor	r15, r15
     9ec:	fa 94       	dec	r15
     9ee:	fd 0e       	add	r15, r29
     9f0:	d1 11       	cpse	r29, r1
     9f2:	ed cf       	rjmp	.-38     	; 0x9ce <I2C_1_SendData+0x2a>
     9f4:	8c 2f       	mov	r24, r28
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <I2C_1_SendData+0x5e>
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <I2C_1_SendData+0x5e>

	retVal = 0;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <I2C_1_SendData+0x5e>
     a00:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ff 90       	pop	r15
     a0c:	08 95       	ret

00000a0e <I2C_1_GetData>:

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t address, uint8_t *pData, uint8_t len)
{
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	8b 01       	movw	r16, r22
     a1a:	d4 2f       	mov	r29, r20
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     a22:	0e 94 ac 04 	call	0x958	; 0x958 <I2C_1_WaitW>
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	69 f5       	brne	.+90     	; 0xa84 <I2C_1_GetData+0x76>
	return retVal;
	
	/* if pData[0] contains a register address, send it first */
	if(pData[0])
     a2a:	f8 01       	movw	r30, r16
     a2c:	80 81       	ld	r24, Z
     a2e:	88 23       	and	r24, r24
     a30:	31 f0       	breq	.+12     	; 0xa3e <I2C_1_GetData+0x30>
	{
		TWI1.MDATA = pData[0];
     a32:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
		if(I2C_1_WaitW() != I2C_ACKED)
     a36:	0e 94 ac 04 	call	0x958	; 0x958 <I2C_1_WaitW>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	29 f5       	brne	.+74     	; 0xa88 <I2C_1_GetData+0x7a>
			return retVal;
		}
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
     a3e:	dd 23       	and	r29, r29
     a40:	29 f1       	breq	.+74     	; 0xa8c <I2C_1_GetData+0x7e>
     a42:	01 15       	cp	r16, r1
     a44:	11 05       	cpc	r17, r1
     a46:	b1 f4       	brne	.+44     	; 0xa74 <I2C_1_GetData+0x66>
		{
			return retVal;
		}
	}

	retVal = 0;
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	23 c0       	rjmp	.+70     	; 0xa92 <I2C_1_GetData+0x84>
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
		{
			if(I2C_1_WaitR() == I2C_READY)
     a4c:	0e 94 c2 04 	call	0x984	; 0x984 <I2C_1_WaitR>
     a50:	83 30       	cpi	r24, 0x03	; 3
     a52:	f1 f4       	brne	.+60     	; 0xa90 <I2C_1_GetData+0x82>
			{
				*pData = TWI1.MDATA;
     a54:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
     a58:	f8 01       	movw	r30, r16
     a5a:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
     a5c:	f1 10       	cpse	r15, r1
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <I2C_1_GetData+0x56>
     a60:	87 e0       	ldi	r24, 0x07	; 7
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <I2C_1_GetData+0x58>
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
     a6a:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
     a6c:	0f 5f       	subi	r16, 0xFF	; 255
     a6e:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
     a70:	df 2d       	mov	r29, r15
			{
				*pData = TWI1.MDATA;
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
				retVal++;
				pData++;
				continue;
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <I2C_1_GetData+0x68>
     a74:	c0 e0       	ldi	r28, 0x00	; 0
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
     a76:	ff 24       	eor	r15, r15
     a78:	fa 94       	dec	r15
     a7a:	fd 0e       	add	r15, r29
     a7c:	d1 11       	cpse	r29, r1
     a7e:	e6 cf       	rjmp	.-52     	; 0xa4c <I2C_1_GetData+0x3e>
     a80:	8c 2f       	mov	r24, r28
     a82:	07 c0       	rjmp	.+14     	; 0xa92 <I2C_1_GetData+0x84>
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <I2C_1_GetData+0x84>
	if(pData[0])
	{
		TWI1.MDATA = pData[0];
		if(I2C_1_WaitW() != I2C_ACKED)
		{
			return retVal;
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <I2C_1_GetData+0x84>
		}
	}

	retVal = 0;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <I2C_1_GetData+0x84>
     a90:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	08 95       	ret

00000a9e <nextFullTxBuffer>:

	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
	{
		tx_buffer[bufferIndex][0] = '\0';
	}
}
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0a c0       	rjmp	.+20     	; 0xab6 <nextFullTxBuffer+0x18>
     aa2:	9f 5f       	subi	r25, 0xFF	; 255
     aa4:	94 30       	cpi	r25, 0x04	; 4
     aa6:	c0 f4       	brcc	.+48     	; 0xad8 <nextFullTxBuffer+0x3a>
     aa8:	8f 5f       	subi	r24, 0xFF	; 255
     aaa:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <bufferIndex.5226>
     aae:	84 30       	cpi	r24, 0x04	; 4
     ab0:	10 f0       	brcs	.+4      	; 0xab6 <nextFullTxBuffer+0x18>
     ab2:	10 92 c5 40 	sts	0x40C5, r1	; 0x8040c5 <bufferIndex.5226>
     ab6:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <bufferIndex.5226>
     aba:	28 2f       	mov	r18, r24
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	42 e3       	ldi	r20, 0x32	; 50
     ac0:	42 9f       	mul	r20, r18
     ac2:	f0 01       	movw	r30, r0
     ac4:	43 9f       	mul	r20, r19
     ac6:	f0 0d       	add	r31, r0
     ac8:	11 24       	eor	r1, r1
     aca:	e6 5b       	subi	r30, 0xB6	; 182
     acc:	fe 4b       	sbci	r31, 0xBE	; 190
     ace:	40 81       	ld	r20, Z
     ad0:	44 23       	and	r20, r20
     ad2:	39 f3       	breq	.-50     	; 0xaa2 <nextFullTxBuffer+0x4>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	01 c0       	rjmp	.+2      	; 0xada <nextFullTxBuffer+0x3c>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	88 23       	and	r24, r24
     adc:	49 f0       	breq	.+18     	; 0xaf0 <nextFullTxBuffer+0x52>
     ade:	42 e3       	ldi	r20, 0x32	; 50
     ae0:	42 9f       	mul	r20, r18
     ae2:	c0 01       	movw	r24, r0
     ae4:	43 9f       	mul	r20, r19
     ae6:	90 0d       	add	r25, r0
     ae8:	11 24       	eor	r1, r1
     aea:	86 5b       	subi	r24, 0xB6	; 182
     aec:	9e 4b       	sbci	r25, 0xBE	; 190
     aee:	08 95       	ret
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	08 95       	ret

00000af6 <nextEmptyTxBuffer>:
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0a c0       	rjmp	.+20     	; 0xb0e <nextEmptyTxBuffer+0x18>
     afa:	9f 5f       	subi	r25, 0xFF	; 255
     afc:	94 30       	cpi	r25, 0x04	; 4
     afe:	c0 f4       	brcc	.+48     	; 0xb30 <nextEmptyTxBuffer+0x3a>
     b00:	8f 5f       	subi	r24, 0xFF	; 255
     b02:	80 93 c4 40 	sts	0x40C4, r24	; 0x8040c4 <bufferIndex.5235>
     b06:	84 30       	cpi	r24, 0x04	; 4
     b08:	10 f0       	brcs	.+4      	; 0xb0e <nextEmptyTxBuffer+0x18>
     b0a:	10 92 c4 40 	sts	0x40C4, r1	; 0x8040c4 <bufferIndex.5235>
     b0e:	80 91 c4 40 	lds	r24, 0x40C4	; 0x8040c4 <bufferIndex.5235>
     b12:	28 2f       	mov	r18, r24
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	42 e3       	ldi	r20, 0x32	; 50
     b18:	42 9f       	mul	r20, r18
     b1a:	f0 01       	movw	r30, r0
     b1c:	43 9f       	mul	r20, r19
     b1e:	f0 0d       	add	r31, r0
     b20:	11 24       	eor	r1, r1
     b22:	e6 5b       	subi	r30, 0xB6	; 182
     b24:	fe 4b       	sbci	r31, 0xBE	; 190
     b26:	40 81       	ld	r20, Z
     b28:	41 11       	cpse	r20, r1
     b2a:	e7 cf       	rjmp	.-50     	; 0xafa <nextEmptyTxBuffer+0x4>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <nextEmptyTxBuffer+0x3c>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	88 23       	and	r24, r24
     b34:	49 f0       	breq	.+18     	; 0xb48 <nextEmptyTxBuffer+0x52>
     b36:	42 e3       	ldi	r20, 0x32	; 50
     b38:	42 9f       	mul	r20, r18
     b3a:	c0 01       	movw	r24, r0
     b3c:	43 9f       	mul	r20, r19
     b3e:	90 0d       	add	r25, r0
     b40:	11 24       	eor	r1, r1
     b42:	86 5b       	subi	r24, 0xB6	; 182
     b44:	9e 4b       	sbci	r25, 0xBE	; 190
     b46:	08 95       	ret
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	08 95       	ret

00000b4e <nextEmptyRxBuffer>:
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0a c0       	rjmp	.+20     	; 0xb66 <nextEmptyRxBuffer+0x18>
     b52:	9f 5f       	subi	r25, 0xFF	; 255
     b54:	92 30       	cpi	r25, 0x02	; 2
     b56:	c8 f4       	brcc	.+50     	; 0xb8a <nextEmptyRxBuffer+0x3c>
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	80 93 c3 40 	sts	0x40C3, r24	; 0x8040c3 <bufferIndex.5244>
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	10 f0       	brcs	.+4      	; 0xb66 <nextEmptyRxBuffer+0x18>
     b62:	10 92 c3 40 	sts	0x40C3, r1	; 0x8040c3 <bufferIndex.5244>
     b66:	80 91 c3 40 	lds	r24, 0x40C3	; 0x8040c3 <bufferIndex.5244>
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	42 e4       	ldi	r20, 0x42	; 66
     b70:	42 9f       	mul	r20, r18
     b72:	f0 01       	movw	r30, r0
     b74:	43 9f       	mul	r20, r19
     b76:	f0 0d       	add	r31, r0
     b78:	11 24       	eor	r1, r1
     b7a:	ea 53       	subi	r30, 0x3A	; 58
     b7c:	ff 4b       	sbci	r31, 0xBF	; 191
     b7e:	41 81       	ldd	r20, Z+1	; 0x01
     b80:	52 81       	ldd	r21, Z+2	; 0x02
     b82:	45 2b       	or	r20, r21
     b84:	31 f7       	brne	.-52     	; 0xb52 <nextEmptyRxBuffer+0x4>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <nextEmptyRxBuffer+0x3e>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	88 23       	and	r24, r24
     b8e:	49 f0       	breq	.+18     	; 0xba2 <nextEmptyRxBuffer+0x54>
     b90:	42 e4       	ldi	r20, 0x42	; 66
     b92:	42 9f       	mul	r20, r18
     b94:	c0 01       	movw	r24, r0
     b96:	43 9f       	mul	r20, r19
     b98:	90 0d       	add	r25, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	8a 53       	subi	r24, 0x3A	; 58
     b9e:	9f 4b       	sbci	r25, 0xBF	; 191
     ba0:	08 95       	ret
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	08 95       	ret

00000ba8 <linkbusTxInProgress>:
     ba8:	80 91 12 42 	lds	r24, 0x4212	; 0x804212 <linkbus_tx_active>
     bac:	08 95       	ret

00000bae <linkbus_start_tx>:
     bae:	cf 93       	push	r28
     bb0:	90 91 12 42 	lds	r25, 0x4212	; 0x804212 <linkbus_tx_active>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	91 11       	cpse	r25, r1
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	c8 2f       	mov	r28, r24
     bbc:	91 11       	cpse	r25, r1
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <linkbus_start_tx+0x1c>
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 12 42 	sts	0x4212, r24	; 0x804212 <linkbus_tx_active>
     bc6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <USART1_enable_tx>
     bca:	8c 2f       	mov	r24, r28
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <linkbus_end_tx>:
     bd0:	80 91 12 42 	lds	r24, 0x4212	; 0x804212 <linkbus_tx_active>
     bd4:	88 23       	and	r24, r24
     bd6:	39 f0       	breq	.+14     	; 0xbe6 <linkbus_end_tx+0x16>
     bd8:	e0 e2       	ldi	r30, 0x20	; 32
     bda:	f8 e0       	ldi	r31, 0x08	; 8
     bdc:	85 81       	ldd	r24, Z+5	; 0x05
     bde:	8f 7d       	andi	r24, 0xDF	; 223
     be0:	85 83       	std	Z+5, r24	; 0x05
     be2:	10 92 12 42 	sts	0x4212, r1	; 0x804212 <linkbus_tx_active>
     be6:	08 95       	ret

00000be8 <USART1_initialization>:
     be8:	28 b1       	in	r18, 0x08	; 8
     bea:	2d 7f       	andi	r18, 0xFD	; 253
     bec:	28 b9       	out	0x08, r18	; 8
     bee:	e1 e5       	ldi	r30, 0x51	; 81
     bf0:	f4 e0       	ldi	r31, 0x04	; 4
     bf2:	20 81       	ld	r18, Z
     bf4:	27 7f       	andi	r18, 0xF7	; 247
     bf6:	20 83       	st	Z, r18
     bf8:	29 b1       	in	r18, 0x09	; 9
     bfa:	2e 7f       	andi	r18, 0xFE	; 254
     bfc:	29 b9       	out	0x09, r18	; 9
     bfe:	28 b1       	in	r18, 0x08	; 8
     c00:	21 60       	ori	r18, 0x01	; 1
     c02:	28 b9       	out	0x08, r18	; 8
     c04:	0e 94 d7 08 	call	0x11ae	; 0x11ae <USART1_init>
     c08:	08 95       	ret

00000c0a <linkbus_init>:
     c0a:	84 e8       	ldi	r24, 0x84	; 132
     c0c:	e6 ec       	ldi	r30, 0xC6	; 198
     c0e:	f0 e4       	ldi	r31, 0x40	; 64
     c10:	df 01       	movw	r26, r30
     c12:	1d 92       	st	X+, r1
     c14:	8a 95       	dec	r24
     c16:	e9 f7       	brne	.-6      	; 0xc12 <linkbus_init+0x8>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0a c0       	rjmp	.+20     	; 0xc32 <linkbus_init+0x28>
     c1e:	22 e3       	ldi	r18, 0x32	; 50
     c20:	28 9f       	mul	r18, r24
     c22:	f0 01       	movw	r30, r0
     c24:	29 9f       	mul	r18, r25
     c26:	f0 0d       	add	r31, r0
     c28:	11 24       	eor	r1, r1
     c2a:	e6 5b       	subi	r30, 0xB6	; 182
     c2c:	fe 4b       	sbci	r31, 0xBE	; 190
     c2e:	10 82       	st	Z, r1
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	91 05       	cpc	r25, r1
     c36:	9c f3       	brlt	.-26     	; 0xc1e <linkbus_init+0x14>
     c38:	60 e8       	ldi	r22, 0x80	; 128
     c3a:	75 e2       	ldi	r23, 0x25	; 37
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <USART1_initialization>
     c44:	10 92 0e 40 	sts	0x400E, r1	; 0x80400e <g_bus_disabled>
     c48:	08 95       	ret

00000c4a <linkbus_send_text>:


BOOL linkbus_send_text(char* text)
{
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
     c52:	20 91 0e 40 	lds	r18, 0x400E	; 0x80400e <g_bus_disabled>
     c56:	21 11       	cpse	r18, r1
     c58:	27 c0       	rjmp	.+78     	; 0xca8 <linkbus_send_text+0x5e>

	if(text)
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	39 f1       	breq	.+78     	; 0xcac <linkbus_send_text+0x62>
     c5e:	8c 01       	movw	r16, r24
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
     c60:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <nextEmptyTxBuffer>


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;
     c64:	c8 ec       	ldi	r28, 0xC8	; 200
     c66:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
     c68:	0b c0       	rjmp	.+22     	; 0xc80 <linkbus_send_text+0x36>
		{
			while(linkbusTxInProgress() && tries)
			{
				if(tries) tries--;   /* wait until transmit finishes */
     c6a:	20 97       	sbiw	r28, 0x00	; 0
     c6c:	09 f0       	breq	.+2      	; 0xc70 <linkbus_send_text+0x26>
     c6e:	21 97       	sbiw	r28, 0x01	; 1
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
		{
			while(linkbusTxInProgress() && tries)
     c70:	0e 94 d4 05 	call	0xba8	; 0xba8 <linkbusTxInProgress>
     c74:	88 23       	and	r24, r24
     c76:	11 f0       	breq	.+4      	; 0xc7c <linkbus_send_text+0x32>
     c78:	20 97       	sbiw	r28, 0x00	; 0
     c7a:	b9 f7       	brne	.-18     	; 0xc6a <linkbus_send_text+0x20>
			{
				if(tries) tries--;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
     c7c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <nextEmptyTxBuffer>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	11 f4       	brne	.+4      	; 0xc88 <linkbus_send_text+0x3e>
     c84:	20 97       	sbiw	r28, 0x00	; 0
     c86:	a1 f7       	brne	.-24     	; 0xc70 <linkbus_send_text+0x26>
				if(tries) tries--;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
		}

		if(buff)
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	91 f0       	breq	.+36     	; 0xcb0 <linkbus_send_text+0x66>
		{
			sprintf(*buff, text);
     c8c:	1f 93       	push	r17
     c8e:	0f 93       	push	r16
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	0e 94 1f 0b 	call	0x163e	; 0x163e <sprintf>

			linkbus_start_tx();
     c98:	0e 94 d7 05 	call	0xbae	; 0xbae <linkbus_start_tx>
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
//			USART1.TXDATAL = (*buff)[0]; /* send the first character */
			err = FALSE;
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <linkbus_send_text+0x68>
BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <linkbus_send_text+0x68>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <linkbus_send_text+0x68>
     cb0:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <getMorseChar>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	fc 01       	movw	r30, r24
     cc0:	b0 97       	sbiw	r30, 0x20	; 32
     cc2:	ed 35       	cpi	r30, 0x5D	; 93
     cc4:	f1 05       	cpc	r31, r1
     cc6:	08 f0       	brcs	.+2      	; 0xcca <getMorseChar+0xe>
     cc8:	e8 c0       	rjmp	.+464    	; 0xe9a <getMorseChar+0x1de>
     cca:	ec 58       	subi	r30, 0x8C	; 140
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     cd2:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
     cd4:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
     cd6:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     cd8:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     cda:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
     cdc:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     cde:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     ce0:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
     ce2:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
     ce4:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     ce6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     ce8:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     cea:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
     cec:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     cee:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     cf0:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     cf2:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
     cf4:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
     cf8:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
     cfa:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
     cfc:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     cfe:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     d00:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     d02:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
     d04:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     d06:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     d08:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     d0a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
     d0c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
     d0e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     d10:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     d12:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
     d14:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
     d16:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
     d18:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
     d1a:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
     d1c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     d1e:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     d20:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
     d22:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
     d24:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     d26:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     d28:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     d2a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
     d2c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     d2e:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     d30:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     d32:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
     d34:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
     d36:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     d38:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     d3a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
     d3c:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
     d3e:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     d40:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     d42:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
     d44:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
     d46:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     d48:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
     d4a:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
     d4c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     d4e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     d50:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
     d52:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
     d54:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     d56:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     d58:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     d5a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
     d5c:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     d5e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     d60:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     d62:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
     d64:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
     d66:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     d68:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     d6a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
     d6c:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
     d6e:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
     d70:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
     d72:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
     d74:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     d76:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     d78:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
     d7a:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
     d7c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     d7e:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     d80:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
     d82:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
     d84:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     d86:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     d88:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
     d8a:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
     d8c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     d8e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     d90:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
     d92:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
     d94:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     d96:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     d98:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     d9a:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
     d9c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     d9e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     da0:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
     da2:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
     da4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
     da6:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     da8:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
     daa:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
     dac:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
     dae:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     db0:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
     db2:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
     db4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     db6:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     db8:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
     dba:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
     dbc:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     dbe:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     dc0:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
     dc2:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
     dc4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     dc6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     dc8:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     dca:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
     dcc:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
     dce:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     dd0:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     dd2:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
     dd4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     dd6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     dd8:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     dda:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
     ddc:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     dde:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     de0:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     de2:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
     de4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     de6:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     de8:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
     dea:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
     dec:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
     dee:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     df0:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
     df2:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
     df4:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     df6:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     df8:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
     dfa:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
     dfc:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     dfe:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     e00:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
     e02:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
     e04:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     e06:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     e08:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
     e0a:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
     e0c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     e0e:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     e10:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
     e12:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
     e14:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     e16:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     e18:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
     e1a:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
     e1c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     e1e:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     e20:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
     e22:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
     e24:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     e26:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     e28:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
     e2a:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
     e2c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     e2e:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     e30:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     e32:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
     e34:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     e36:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     e38:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     e3a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
     e3c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     e3e:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     e40:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
     e42:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
     e44:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
     e46:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
     e48:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
     e4a:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
     e4c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     e4e:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     e50:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
     e52:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
     e54:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     e56:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     e58:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
     e5a:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
     e5c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     e5e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     e60:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
     e62:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
     e64:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     e66:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     e68:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
     e6a:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
     e6c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     e6e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     e70:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
     e72:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
     e74:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
     e76:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     e78:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
     e7a:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
     e7c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     e7e:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     e80:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
     e82:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
     e84:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
     e86:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
     e88:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
     e8a:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
     e8c:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
     e8e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     e90:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
     e92:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
     e94:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
     e96:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     e98:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
     e9a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
     e9c:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
     e9e:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
     ea0:	08 95       	ret

00000ea2 <makeMorse>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	b1 f1       	breq	.+108    	; 0xf18 <makeMorse+0x76>
	{
		holdKeyDown = FALSE;
     eac:	10 92 1e 42 	sts	0x421E, r1	; 0x80421e <holdKeyDown.4196>

		if(repeating)
     eb0:	61 15       	cp	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	21 f0       	breq	.+8      	; 0xebe <makeMorse+0x1c>
		{
			repeat = *repeating;
     eb6:	db 01       	movw	r26, r22
     eb8:	2c 91       	ld	r18, X
     eba:	20 93 10 40 	sts	0x4010, r18	; 0x804010 <repeat.4188>
		}

		if(*s)
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 81       	ld	r18, Z
     ec2:	22 23       	and	r18, r18
     ec4:	d9 f0       	breq	.+54     	; 0xefc <makeMorse+0x5a>
		{
			str = s;
     ec6:	80 93 1c 42 	sts	0x421C, r24	; 0x80421c <str.4186>
     eca:	90 93 1d 42 	sts	0x421D, r25	; 0x80421d <str.4186+0x1>
			c = ' ';
     ece:	80 e2       	ldi	r24, 0x20	; 32
     ed0:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <c.4187>
			morseInProgress = getMorseChar(*str);
     ed4:	82 2f       	mov	r24, r18
     ed6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <getMorseChar>
     eda:	60 93 19 42 	sts	0x4219, r22	; 0x804219 <morseInProgress.4189>
     ede:	70 93 1a 42 	sts	0x421A, r23	; 0x80421a <morseInProgress.4189+0x1>
     ee2:	80 93 1b 42 	sts	0x421B, r24	; 0x80421b <morseInProgress.4189+0x2>
			charIndex = 0;
     ee6:	10 92 18 42 	sts	0x4218, r1	; 0x804218 <charIndex.4190>
			symbolIndex = 0;
     eea:	10 92 17 42 	sts	0x4217, r1	; 0x804217 <symbolIndex.4191>
			elementIndex = 0;
     eee:	10 92 16 42 	sts	0x4216, r1	; 0x804216 <elementIndex.4192>
			addedSpace = 0;
     ef2:	10 92 15 42 	sts	0x4215, r1	; 0x804215 <addedSpace.4193>
			completedString = FALSE;
     ef6:	10 92 14 42 	sts	0x4214, r1	; 0x804214 <completedString.4194>
     efa:	0a c0       	rjmp	.+20     	; 0xf10 <makeMorse+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
     efc:	10 92 1c 42 	sts	0x421C, r1	; 0x80421c <str.4186>
     f00:	10 92 1d 42 	sts	0x421D, r1	; 0x80421d <str.4186+0x1>
			completedString = TRUE;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 14 42 	sts	0x4214, r24	; 0x804214 <completedString.4194>
			if(finished)
     f0a:	20 97       	sbiw	r28, 0x00	; 0
     f0c:	09 f0       	breq	.+2      	; 0xf10 <makeMorse+0x6e>
			{
				*finished = TRUE;
     f0e:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
     f10:	10 92 13 42 	sts	0x4213, r1	; 0x804213 <carrierOn.4195>
		return( OFF);
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	bb c0       	rjmp	.+374    	; 0x108e <makeMorse+0x1ec>
	}
	else if(str)
     f18:	e0 91 1c 42 	lds	r30, 0x421C	; 0x80421c <str.4186>
     f1c:	f0 91 1d 42 	lds	r31, 0x421D	; 0x80421d <str.4186+0x1>
     f20:	30 97       	sbiw	r30, 0x00	; 0
     f22:	09 f4       	brne	.+2      	; 0xf26 <makeMorse+0x84>
     f24:	a5 c0       	rjmp	.+330    	; 0x1070 <makeMorse+0x1ce>
	{
		if(repeating)
     f26:	61 15       	cp	r22, r1
     f28:	71 05       	cpc	r23, r1
     f2a:	21 f0       	breq	.+8      	; 0xf34 <makeMorse+0x92>
		{
			*repeating = repeat;
     f2c:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <repeat.4188>
     f30:	db 01       	movw	r26, r22
     f32:	8c 93       	st	X, r24
		}

		if(completedString)
     f34:	80 91 14 42 	lds	r24, 0x4214	; 0x804214 <completedString.4194>
     f38:	88 23       	and	r24, r24
     f3a:	49 f0       	breq	.+18     	; 0xf4e <makeMorse+0xac>
		{
			if(finished)
     f3c:	20 97       	sbiw	r28, 0x00	; 0
     f3e:	09 f4       	brne	.+2      	; 0xf42 <makeMorse+0xa0>
     f40:	a3 c0       	rjmp	.+326    	; 0x1088 <makeMorse+0x1e6>
			{
				*finished = TRUE;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
     f46:	10 92 1e 42 	sts	0x421E, r1	; 0x80421e <holdKeyDown.4196>
			}
			return( OFF);
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	a0 c0       	rjmp	.+320    	; 0x108e <makeMorse+0x1ec>
		}

		if(elementIndex)
     f4e:	80 91 16 42 	lds	r24, 0x4216	; 0x804216 <elementIndex.4192>
     f52:	88 23       	and	r24, r24
     f54:	21 f0       	breq	.+8      	; 0xf5e <makeMorse+0xbc>
		{
			elementIndex--;
     f56:	81 50       	subi	r24, 0x01	; 1
     f58:	80 93 16 42 	sts	0x4216, r24	; 0x804216 <elementIndex.4192>
     f5c:	7f c0       	rjmp	.+254    	; 0x105c <makeMorse+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
     f5e:	80 91 13 42 	lds	r24, 0x4213	; 0x804213 <carrierOn.4195>
     f62:	88 23       	and	r24, r24
     f64:	81 f0       	breq	.+32     	; 0xf86 <makeMorse+0xe4>
     f66:	80 91 1e 42 	lds	r24, 0x421E	; 0x80421e <holdKeyDown.4196>
     f6a:	81 11       	cpse	r24, r1
     f6c:	0c c0       	rjmp	.+24     	; 0xf86 <makeMorse+0xe4>
		{
			carrierOn = FALSE;
     f6e:	10 92 13 42 	sts	0x4213, r1	; 0x804213 <carrierOn.4195>
			/* wait one element = inter-symbol space */
			if(addedSpace)
     f72:	80 91 15 42 	lds	r24, 0x4215	; 0x804215 <addedSpace.4193>
     f76:	88 23       	and	r24, r24
     f78:	09 f4       	brne	.+2      	; 0xf7c <makeMorse+0xda>
     f7a:	70 c0       	rjmp	.+224    	; 0x105c <makeMorse+0x1ba>
			{
				elementIndex = addedSpace;
     f7c:	80 93 16 42 	sts	0x4216, r24	; 0x804216 <elementIndex.4192>
				addedSpace = 0;
     f80:	10 92 15 42 	sts	0x4215, r1	; 0x804215 <addedSpace.4193>
     f84:	6b c0       	rjmp	.+214    	; 0x105c <makeMorse+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
     f86:	90 91 1a 42 	lds	r25, 0x421A	; 0x80421a <morseInProgress.4189+0x1>
     f8a:	80 91 17 42 	lds	r24, 0x4217	; 0x804217 <symbolIndex.4191>
     f8e:	89 17       	cp	r24, r25
     f90:	90 f1       	brcs	.+100    	; 0xff6 <makeMorse+0x154>
			{
				c = (*(str + ++charIndex));
     f92:	80 91 18 42 	lds	r24, 0x4218	; 0x804218 <charIndex.4190>
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 18 42 	sts	0x4218, r24	; 0x804218 <charIndex.4190>
     f9c:	df 01       	movw	r26, r30
     f9e:	a8 0f       	add	r26, r24
     fa0:	b1 1d       	adc	r27, r1
     fa2:	8c 91       	ld	r24, X
     fa4:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <c.4187>

				if(!c)  /* wrap to beginning of text */
     fa8:	81 11       	cpse	r24, r1
     faa:	19 c0       	rjmp	.+50     	; 0xfde <makeMorse+0x13c>
				{
					if(repeat)
     fac:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <repeat.4188>
     fb0:	88 23       	and	r24, r24
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <makeMorse+0x11e>
					{
						c = *str;
     fb4:	80 81       	ld	r24, Z
     fb6:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <c.4187>
						charIndex = 0;
     fba:	10 92 18 42 	sts	0x4218, r1	; 0x804218 <charIndex.4190>
     fbe:	0f c0       	rjmp	.+30     	; 0xfde <makeMorse+0x13c>
					}
					else
					{
						str = NULL;
     fc0:	10 92 1c 42 	sts	0x421C, r1	; 0x80421c <str.4186>
     fc4:	10 92 1d 42 	sts	0x421D, r1	; 0x80421d <str.4186+0x1>
						carrierOn = OFF;
     fc8:	10 92 13 42 	sts	0x4213, r1	; 0x804213 <carrierOn.4195>
						completedString = TRUE;
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	90 93 14 42 	sts	0x4214, r25	; 0x804214 <completedString.4194>
						if(finished)
     fd2:	20 97       	sbiw	r28, 0x00	; 0
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <makeMorse+0x136>
						{
							*finished = TRUE;
     fd6:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
     fd8:	10 92 1e 42 	sts	0x421E, r1	; 0x80421e <holdKeyDown.4196>
						return( OFF );
     fdc:	58 c0       	rjmp	.+176    	; 0x108e <makeMorse+0x1ec>
					}
				}

				morseInProgress = getMorseChar(c);
     fde:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <c.4187>
     fe2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <getMorseChar>
     fe6:	60 93 19 42 	sts	0x4219, r22	; 0x804219 <morseInProgress.4189>
     fea:	70 93 1a 42 	sts	0x421A, r23	; 0x80421a <morseInProgress.4189+0x1>
     fee:	80 93 1b 42 	sts	0x421B, r24	; 0x80421b <morseInProgress.4189+0x2>
				symbolIndex = 0;
     ff2:	10 92 17 42 	sts	0x4217, r1	; 0x804217 <symbolIndex.4191>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
     ff6:	20 91 19 42 	lds	r18, 0x4219	; 0x804219 <morseInProgress.4189>
     ffa:	2d 3f       	cpi	r18, 0xFD	; 253
     ffc:	00 f5       	brcc	.+64     	; 0x103e <makeMorse+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
     ffe:	40 91 17 42 	lds	r20, 0x4217	; 0x804217 <symbolIndex.4191>
    1002:	31 e0       	ldi	r19, 0x01	; 1
    1004:	34 0f       	add	r19, r20
    1006:	30 93 17 42 	sts	0x4217, r19	; 0x804217 <symbolIndex.4191>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <makeMorse+0x172>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	4a 95       	dec	r20
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <makeMorse+0x16e>
    1018:	82 23       	and	r24, r18

				if(isDah)
    101a:	21 f0       	breq	.+8      	; 0x1024 <makeMorse+0x182>
				{
					elementIndex = 2;
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	80 93 16 42 	sts	0x4216, r24	; 0x804216 <elementIndex.4192>
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <makeMorse+0x186>
				}
				else
				{
					elementIndex = 0;
    1024:	10 92 16 42 	sts	0x4216, r1	; 0x804216 <elementIndex.4192>
				}

				carrierOn = TRUE;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	80 93 13 42 	sts	0x4213, r24	; 0x804213 <carrierOn.4195>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    102e:	80 91 1a 42 	lds	r24, 0x421A	; 0x80421a <morseInProgress.4189+0x1>
    1032:	38 17       	cp	r19, r24
    1034:	98 f0       	brcs	.+38     	; 0x105c <makeMorse+0x1ba>
				{
					addedSpace = 2;
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	80 93 15 42 	sts	0x4215, r24	; 0x804215 <addedSpace.4193>
    103c:	0f c0       	rjmp	.+30     	; 0x105c <makeMorse+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    103e:	80 91 1a 42 	lds	r24, 0x421A	; 0x80421a <morseInProgress.4189+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	90 93 17 42 	sts	0x4217, r25	; 0x804217 <symbolIndex.4191>
				carrierOn = FALSE;
    1048:	10 92 13 42 	sts	0x4213, r1	; 0x804213 <carrierOn.4195>
				if(sym >= 4 )
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	20 f0       	brcs	.+8      	; 0x1058 <makeMorse+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    1050:	84 50       	subi	r24, 0x04	; 4
    1052:	80 93 16 42 	sts	0x4216, r24	; 0x804216 <elementIndex.4192>
    1056:	02 c0       	rjmp	.+4      	; 0x105c <makeMorse+0x1ba>
				}
				else
				{
					elementIndex = 0;
    1058:	10 92 16 42 	sts	0x4216, r1	; 0x804216 <elementIndex.4192>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    105c:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <c.4187>
    1060:	8c 33       	cpi	r24, 0x3C	; 60
    1062:	21 f4       	brne	.+8      	; 0x106c <makeMorse+0x1ca>
		{
			holdKeyDown = TRUE;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	80 93 1e 42 	sts	0x421E, r24	; 0x80421e <holdKeyDown.4196>
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <makeMorse+0x1ce>
		}
		else
		{
			holdKeyDown = FALSE;
    106c:	10 92 1e 42 	sts	0x421E, r1	; 0x80421e <holdKeyDown.4196>
		}
	}

	if(finished)
    1070:	20 97       	sbiw	r28, 0x00	; 0
    1072:	19 f0       	breq	.+6      	; 0x107a <makeMorse+0x1d8>
	{
		*finished = completedString;
    1074:	80 91 14 42 	lds	r24, 0x4214	; 0x804214 <completedString.4194>
    1078:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    107a:	80 91 1e 42 	lds	r24, 0x421E	; 0x80421e <holdKeyDown.4196>
    107e:	81 11       	cpse	r24, r1
    1080:	05 c0       	rjmp	.+10     	; 0x108c <makeMorse+0x1ea>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    1082:	80 91 13 42 	lds	r24, 0x4213	; 0x804213 <carrierOn.4195>
    1086:	03 c0       	rjmp	.+6      	; 0x108e <makeMorse+0x1ec>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	01 c0       	rjmp	.+2      	; 0x108e <makeMorse+0x1ec>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    108c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    1094:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    1096:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    1098:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    109a:	40 83       	st	Z, r20
	ret                             // Return to caller
    109c:	08 95       	ret

0000109e <si5351_write_bulk>:
			data[1] = reg_val;
			err |= si5351_write_bulk(data, 2);
		}

		return err;
	}
    109e:	cf 93       	push	r28
    10a0:	c6 2f       	mov	r28, r22
    10a2:	46 2f       	mov	r20, r22
    10a4:	bc 01       	movw	r22, r24
    10a6:	80 ec       	ldi	r24, 0xC0	; 192
    10a8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <I2C_1_SendData>
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	c8 13       	cpse	r28, r24
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <si5351_write_bulk+0x16>
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	89 2f       	mov	r24, r25
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <si5351_read_bulk>:
    10ba:	cf 93       	push	r28
    10bc:	c6 2f       	mov	r28, r22
    10be:	46 2f       	mov	r20, r22
    10c0:	bc 01       	movw	r22, r24
    10c2:	80 ec       	ldi	r24, 0xC0	; 192
    10c4:	0e 94 07 05 	call	0xa0e	; 0xa0e <I2C_1_GetData>
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	c8 13       	cpse	r28, r24
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <si5351_read_bulk+0x16>
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	89 2f       	mov	r24, r25
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <si5351_clock_enable+0xa>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	18 2f       	mov	r17, r24
    10e6:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	89 83       	std	Y+1, r24	; 0x01

		if(si5351_read_bulk(data, 1)) 
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	ce 01       	movw	r24, r28
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <si5351_read_bulk>
    10f6:	81 11       	cpse	r24, r1
    10f8:	23 c0       	rjmp	.+70     	; 0x1140 <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    10fa:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    10fc:	00 23       	and	r16, r16
    10fe:	59 f0       	breq	.+22     	; 0x1116 <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <si5351_clock_enable+0x34>
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	1a 95       	dec	r17
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <si5351_clock_enable+0x30>
    110e:	82 2f       	mov	r24, r18
    1110:	80 95       	com	r24
    1112:	89 23       	and	r24, r25
    1114:	09 c0       	rjmp	.+18     	; 0x1128 <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    1116:	21 e0       	ldi	r18, 0x01	; 1
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <si5351_clock_enable+0x4a>
    111c:	22 0f       	add	r18, r18
    111e:	33 1f       	adc	r19, r19
    1120:	1a 95       	dec	r17
    1122:	e2 f7       	brpl	.-8      	; 0x111c <si5351_clock_enable+0x46>
    1124:	89 2f       	mov	r24, r25
    1126:	82 2b       	or	r24, r18
		}

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    1128:	93 e0       	ldi	r25, 0x03	; 3
    112a:	99 83       	std	Y+1, r25	; 0x01
		data[1] = reg_val;
    112c:	8a 83       	std	Y+2, r24	; 0x02
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;
    112e:	62 e0       	ldi	r22, 0x02	; 2
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	0e 94 4f 08 	call	0x109e	; 0x109e <si5351_write_bulk>
    1138:	88 23       	and	r24, r24
    113a:	21 f0       	breq	.+8      	; 0x1144 <si5351_clock_enable+0x6e>
    113c:	8c ef       	ldi	r24, 0xFC	; 252
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <si5351_clock_enable+0x70>
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;

		if(si5351_read_bulk(data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    1140:	8c ef       	ldi	r24, 0xFC	; 252
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <si5351_clock_enable+0x70>

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
		data[1] = reg_val;
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    1144:	80 e0       	ldi	r24, 0x00	; 0
	}
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	08 95       	ret

00001158 <TIMERB_init>:
 *
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    1158:	e0 e0       	ldi	r30, 0x00	; 0
    115a:	fb e0       	ldi	r31, 0x0B	; 11
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB0.CCMP = 0x9C40;
    1160:	20 e4       	ldi	r18, 0x40	; 64
    1162:	3c e9       	ldi	r19, 0x9C	; 156
    1164:	24 87       	std	Z+12, r18	; 0x0c
    1166:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    116c:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    116e:	e0 e3       	ldi	r30, 0x30	; 48
    1170:	fb e0       	ldi	r31, 0x0B	; 11
    1172:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB3.CCMP = 0x9C40;
    1174:	24 87       	std	Z+12, r18	; 0x0c
    1176:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    1178:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    117a:	86 83       	std	Z+6, r24	; 0x06

	return 0;
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	08 95       	ret

00001180 <powerToTransmitter>:
		{
// 			PORTB &= ~(1 << PORTB1);  /* Turn off 80m band */
		}

		return(result);
	}
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	08 95       	ret

00001184 <keyTransmitter>:

	void keyTransmitter(BOOL on)
	{
		if(on)
    1184:	88 23       	and	r24, r24
    1186:	61 f0       	breq	.+24     	; 0x11a0 <keyTransmitter+0x1c>
		{
			if(!g_transmitter_keyed)
    1188:	80 91 1f 42 	lds	r24, 0x421F	; 0x80421f <g_transmitter_keyed>
    118c:	81 11       	cpse	r24, r1
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <keyTransmitter+0x28>
			{
				si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED);
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <si5351_clock_enable>
				g_transmitter_keyed = TRUE;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	80 93 1f 42 	sts	0x421F, r24	; 0x80421f <g_transmitter_keyed>
    119e:	08 95       	ret
			}
		}
		else
		{
			si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <si5351_clock_enable>
			g_transmitter_keyed = FALSE;
    11a8:	10 92 1f 42 	sts	0x421F, r1	; 0x80421f <g_transmitter_keyed>
    11ac:	08 95       	ret

000011ae <USART1_init>:
 *
 * \return Nothing
 */
void USART1_disable()
{
	USART1.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    11ae:	0e 94 13 0a 	call	0x1426	; 0x1426 <__floatunsisf>
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e8       	ldi	r20, 0x80	; 128
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__mulsf3>
    11be:	9b 01       	movw	r18, r22
    11c0:	ac 01       	movw	r20, r24
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	7b e1       	ldi	r23, 0x1B	; 27
    11c6:	87 eb       	ldi	r24, 0xB7	; 183
    11c8:	9e e4       	ldi	r25, 0x4E	; 78
    11ca:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divsf3>
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	5f e3       	ldi	r21, 0x3F	; 63
    11d6:	0e 94 06 09 	call	0x120c	; 0x120c <__addsf3>
    11da:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__fixunssfsi>
    11de:	e0 e2       	ldi	r30, 0x20	; 32
    11e0:	f8 e0       	ldi	r31, 0x08	; 8
    11e2:	60 87       	std	Z+8, r22	; 0x08
    11e4:	71 87       	std	Z+9, r23	; 0x09
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	85 83       	std	Z+5, r24	; 0x05
    11ea:	80 ec       	ldi	r24, 0xC0	; 192
    11ec:	86 83       	std	Z+6, r24	; 0x06
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	08 95       	ret

000011f2 <USART1_enable_tx>:
    11f2:	e0 e2       	ldi	r30, 0x20	; 32
    11f4:	f8 e0       	ldi	r31, 0x08	; 8
    11f6:	86 81       	ldd	r24, Z+6	; 0x06
    11f8:	80 64       	ori	r24, 0x40	; 64
    11fa:	86 83       	std	Z+6, r24	; 0x06
    11fc:	85 81       	ldd	r24, Z+5	; 0x05
    11fe:	80 62       	ori	r24, 0x20	; 32
    1200:	85 83       	std	Z+5, r24	; 0x05
    1202:	08 95       	ret

00001204 <USART1_get_data>:
 *
 * \return Data register from USART1 module
 */
uint8_t USART1_get_data()
{
	return USART1.RXDATAL;
    1204:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
}
    1208:	08 95       	ret

0000120a <__subsf3>:
    120a:	50 58       	subi	r21, 0x80	; 128

0000120c <__addsf3>:
    120c:	bb 27       	eor	r27, r27
    120e:	aa 27       	eor	r26, r26
    1210:	0e 94 1d 09 	call	0x123a	; 0x123a <__addsf3x>
    1214:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__fp_round>
    1218:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__fp_pscA>
    121c:	38 f0       	brcs	.+14     	; 0x122c <__addsf3+0x20>
    121e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fp_pscB>
    1222:	20 f0       	brcs	.+8      	; 0x122c <__addsf3+0x20>
    1224:	39 f4       	brne	.+14     	; 0x1234 <__addsf3+0x28>
    1226:	9f 3f       	cpi	r25, 0xFF	; 255
    1228:	19 f4       	brne	.+6      	; 0x1230 <__addsf3+0x24>
    122a:	26 f4       	brtc	.+8      	; 0x1234 <__addsf3+0x28>
    122c:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__fp_nan>
    1230:	0e f4       	brtc	.+2      	; 0x1234 <__addsf3+0x28>
    1232:	e0 95       	com	r30
    1234:	e7 fb       	bst	r30, 7
    1236:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_inf>

0000123a <__addsf3x>:
    123a:	e9 2f       	mov	r30, r25
    123c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__fp_split3>
    1240:	58 f3       	brcs	.-42     	; 0x1218 <__addsf3+0xc>
    1242:	ba 17       	cp	r27, r26
    1244:	62 07       	cpc	r22, r18
    1246:	73 07       	cpc	r23, r19
    1248:	84 07       	cpc	r24, r20
    124a:	95 07       	cpc	r25, r21
    124c:	20 f0       	brcs	.+8      	; 0x1256 <__addsf3x+0x1c>
    124e:	79 f4       	brne	.+30     	; 0x126e <__addsf3x+0x34>
    1250:	a6 f5       	brtc	.+104    	; 0x12ba <__addsf3x+0x80>
    1252:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_zero>
    1256:	0e f4       	brtc	.+2      	; 0x125a <__addsf3x+0x20>
    1258:	e0 95       	com	r30
    125a:	0b 2e       	mov	r0, r27
    125c:	ba 2f       	mov	r27, r26
    125e:	a0 2d       	mov	r26, r0
    1260:	0b 01       	movw	r0, r22
    1262:	b9 01       	movw	r22, r18
    1264:	90 01       	movw	r18, r0
    1266:	0c 01       	movw	r0, r24
    1268:	ca 01       	movw	r24, r20
    126a:	a0 01       	movw	r20, r0
    126c:	11 24       	eor	r1, r1
    126e:	ff 27       	eor	r31, r31
    1270:	59 1b       	sub	r21, r25
    1272:	99 f0       	breq	.+38     	; 0x129a <__addsf3x+0x60>
    1274:	59 3f       	cpi	r21, 0xF9	; 249
    1276:	50 f4       	brcc	.+20     	; 0x128c <__addsf3x+0x52>
    1278:	50 3e       	cpi	r21, 0xE0	; 224
    127a:	68 f1       	brcs	.+90     	; 0x12d6 <__addsf3x+0x9c>
    127c:	1a 16       	cp	r1, r26
    127e:	f0 40       	sbci	r31, 0x00	; 0
    1280:	a2 2f       	mov	r26, r18
    1282:	23 2f       	mov	r18, r19
    1284:	34 2f       	mov	r19, r20
    1286:	44 27       	eor	r20, r20
    1288:	58 5f       	subi	r21, 0xF8	; 248
    128a:	f3 cf       	rjmp	.-26     	; 0x1272 <__addsf3x+0x38>
    128c:	46 95       	lsr	r20
    128e:	37 95       	ror	r19
    1290:	27 95       	ror	r18
    1292:	a7 95       	ror	r26
    1294:	f0 40       	sbci	r31, 0x00	; 0
    1296:	53 95       	inc	r21
    1298:	c9 f7       	brne	.-14     	; 0x128c <__addsf3x+0x52>
    129a:	7e f4       	brtc	.+30     	; 0x12ba <__addsf3x+0x80>
    129c:	1f 16       	cp	r1, r31
    129e:	ba 0b       	sbc	r27, r26
    12a0:	62 0b       	sbc	r22, r18
    12a2:	73 0b       	sbc	r23, r19
    12a4:	84 0b       	sbc	r24, r20
    12a6:	ba f0       	brmi	.+46     	; 0x12d6 <__addsf3x+0x9c>
    12a8:	91 50       	subi	r25, 0x01	; 1
    12aa:	a1 f0       	breq	.+40     	; 0x12d4 <__addsf3x+0x9a>
    12ac:	ff 0f       	add	r31, r31
    12ae:	bb 1f       	adc	r27, r27
    12b0:	66 1f       	adc	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	88 1f       	adc	r24, r24
    12b6:	c2 f7       	brpl	.-16     	; 0x12a8 <__addsf3x+0x6e>
    12b8:	0e c0       	rjmp	.+28     	; 0x12d6 <__addsf3x+0x9c>
    12ba:	ba 0f       	add	r27, r26
    12bc:	62 1f       	adc	r22, r18
    12be:	73 1f       	adc	r23, r19
    12c0:	84 1f       	adc	r24, r20
    12c2:	48 f4       	brcc	.+18     	; 0x12d6 <__addsf3x+0x9c>
    12c4:	87 95       	ror	r24
    12c6:	77 95       	ror	r23
    12c8:	67 95       	ror	r22
    12ca:	b7 95       	ror	r27
    12cc:	f7 95       	ror	r31
    12ce:	9e 3f       	cpi	r25, 0xFE	; 254
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <__addsf3x+0x9a>
    12d2:	b0 cf       	rjmp	.-160    	; 0x1234 <__addsf3+0x28>
    12d4:	93 95       	inc	r25
    12d6:	88 0f       	add	r24, r24
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <__addsf3x+0xa2>
    12da:	99 27       	eor	r25, r25
    12dc:	ee 0f       	add	r30, r30
    12de:	97 95       	ror	r25
    12e0:	87 95       	ror	r24
    12e2:	08 95       	ret

000012e4 <__divsf3>:
    12e4:	0e 94 86 09 	call	0x130c	; 0x130c <__divsf3x>
    12e8:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__fp_round>
    12ec:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fp_pscB>
    12f0:	58 f0       	brcs	.+22     	; 0x1308 <__divsf3+0x24>
    12f2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__fp_pscA>
    12f6:	40 f0       	brcs	.+16     	; 0x1308 <__divsf3+0x24>
    12f8:	29 f4       	brne	.+10     	; 0x1304 <__divsf3+0x20>
    12fa:	5f 3f       	cpi	r21, 0xFF	; 255
    12fc:	29 f0       	breq	.+10     	; 0x1308 <__divsf3+0x24>
    12fe:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_inf>
    1302:	51 11       	cpse	r21, r1
    1304:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_szero>
    1308:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__fp_nan>

0000130c <__divsf3x>:
    130c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__fp_split3>
    1310:	68 f3       	brcs	.-38     	; 0x12ec <__divsf3+0x8>

00001312 <__divsf3_pse>:
    1312:	99 23       	and	r25, r25
    1314:	b1 f3       	breq	.-20     	; 0x1302 <__divsf3+0x1e>
    1316:	55 23       	and	r21, r21
    1318:	91 f3       	breq	.-28     	; 0x12fe <__divsf3+0x1a>
    131a:	95 1b       	sub	r25, r21
    131c:	55 0b       	sbc	r21, r21
    131e:	bb 27       	eor	r27, r27
    1320:	aa 27       	eor	r26, r26
    1322:	62 17       	cp	r22, r18
    1324:	73 07       	cpc	r23, r19
    1326:	84 07       	cpc	r24, r20
    1328:	38 f0       	brcs	.+14     	; 0x1338 <__divsf3_pse+0x26>
    132a:	9f 5f       	subi	r25, 0xFF	; 255
    132c:	5f 4f       	sbci	r21, 0xFF	; 255
    132e:	22 0f       	add	r18, r18
    1330:	33 1f       	adc	r19, r19
    1332:	44 1f       	adc	r20, r20
    1334:	aa 1f       	adc	r26, r26
    1336:	a9 f3       	breq	.-22     	; 0x1322 <__divsf3_pse+0x10>
    1338:	35 d0       	rcall	.+106    	; 0x13a4 <__divsf3_pse+0x92>
    133a:	0e 2e       	mov	r0, r30
    133c:	3a f0       	brmi	.+14     	; 0x134c <__divsf3_pse+0x3a>
    133e:	e0 e8       	ldi	r30, 0x80	; 128
    1340:	32 d0       	rcall	.+100    	; 0x13a6 <__divsf3_pse+0x94>
    1342:	91 50       	subi	r25, 0x01	; 1
    1344:	50 40       	sbci	r21, 0x00	; 0
    1346:	e6 95       	lsr	r30
    1348:	00 1c       	adc	r0, r0
    134a:	ca f7       	brpl	.-14     	; 0x133e <__divsf3_pse+0x2c>
    134c:	2b d0       	rcall	.+86     	; 0x13a4 <__divsf3_pse+0x92>
    134e:	fe 2f       	mov	r31, r30
    1350:	29 d0       	rcall	.+82     	; 0x13a4 <__divsf3_pse+0x92>
    1352:	66 0f       	add	r22, r22
    1354:	77 1f       	adc	r23, r23
    1356:	88 1f       	adc	r24, r24
    1358:	bb 1f       	adc	r27, r27
    135a:	26 17       	cp	r18, r22
    135c:	37 07       	cpc	r19, r23
    135e:	48 07       	cpc	r20, r24
    1360:	ab 07       	cpc	r26, r27
    1362:	b0 e8       	ldi	r27, 0x80	; 128
    1364:	09 f0       	breq	.+2      	; 0x1368 <__divsf3_pse+0x56>
    1366:	bb 0b       	sbc	r27, r27
    1368:	80 2d       	mov	r24, r0
    136a:	bf 01       	movw	r22, r30
    136c:	ff 27       	eor	r31, r31
    136e:	93 58       	subi	r25, 0x83	; 131
    1370:	5f 4f       	sbci	r21, 0xFF	; 255
    1372:	3a f0       	brmi	.+14     	; 0x1382 <__divsf3_pse+0x70>
    1374:	9e 3f       	cpi	r25, 0xFE	; 254
    1376:	51 05       	cpc	r21, r1
    1378:	78 f0       	brcs	.+30     	; 0x1398 <__divsf3_pse+0x86>
    137a:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_inf>
    137e:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_szero>
    1382:	5f 3f       	cpi	r21, 0xFF	; 255
    1384:	e4 f3       	brlt	.-8      	; 0x137e <__divsf3_pse+0x6c>
    1386:	98 3e       	cpi	r25, 0xE8	; 232
    1388:	d4 f3       	brlt	.-12     	; 0x137e <__divsf3_pse+0x6c>
    138a:	86 95       	lsr	r24
    138c:	77 95       	ror	r23
    138e:	67 95       	ror	r22
    1390:	b7 95       	ror	r27
    1392:	f7 95       	ror	r31
    1394:	9f 5f       	subi	r25, 0xFF	; 255
    1396:	c9 f7       	brne	.-14     	; 0x138a <__divsf3_pse+0x78>
    1398:	88 0f       	add	r24, r24
    139a:	91 1d       	adc	r25, r1
    139c:	96 95       	lsr	r25
    139e:	87 95       	ror	r24
    13a0:	97 f9       	bld	r25, 7
    13a2:	08 95       	ret
    13a4:	e1 e0       	ldi	r30, 0x01	; 1
    13a6:	66 0f       	add	r22, r22
    13a8:	77 1f       	adc	r23, r23
    13aa:	88 1f       	adc	r24, r24
    13ac:	bb 1f       	adc	r27, r27
    13ae:	62 17       	cp	r22, r18
    13b0:	73 07       	cpc	r23, r19
    13b2:	84 07       	cpc	r24, r20
    13b4:	ba 07       	cpc	r27, r26
    13b6:	20 f0       	brcs	.+8      	; 0x13c0 <__divsf3_pse+0xae>
    13b8:	62 1b       	sub	r22, r18
    13ba:	73 0b       	sbc	r23, r19
    13bc:	84 0b       	sbc	r24, r20
    13be:	ba 0b       	sbc	r27, r26
    13c0:	ee 1f       	adc	r30, r30
    13c2:	88 f7       	brcc	.-30     	; 0x13a6 <__divsf3_pse+0x94>
    13c4:	e0 95       	com	r30
    13c6:	08 95       	ret

000013c8 <__fixunssfsi>:
    13c8:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fp_splitA>
    13cc:	88 f0       	brcs	.+34     	; 0x13f0 <__fixunssfsi+0x28>
    13ce:	9f 57       	subi	r25, 0x7F	; 127
    13d0:	98 f0       	brcs	.+38     	; 0x13f8 <__fixunssfsi+0x30>
    13d2:	b9 2f       	mov	r27, r25
    13d4:	99 27       	eor	r25, r25
    13d6:	b7 51       	subi	r27, 0x17	; 23
    13d8:	b0 f0       	brcs	.+44     	; 0x1406 <__fixunssfsi+0x3e>
    13da:	e1 f0       	breq	.+56     	; 0x1414 <__fixunssfsi+0x4c>
    13dc:	66 0f       	add	r22, r22
    13de:	77 1f       	adc	r23, r23
    13e0:	88 1f       	adc	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	1a f0       	brmi	.+6      	; 0x13ec <__fixunssfsi+0x24>
    13e6:	ba 95       	dec	r27
    13e8:	c9 f7       	brne	.-14     	; 0x13dc <__fixunssfsi+0x14>
    13ea:	14 c0       	rjmp	.+40     	; 0x1414 <__fixunssfsi+0x4c>
    13ec:	b1 30       	cpi	r27, 0x01	; 1
    13ee:	91 f0       	breq	.+36     	; 0x1414 <__fixunssfsi+0x4c>
    13f0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fp_zero>
    13f4:	b1 e0       	ldi	r27, 0x01	; 1
    13f6:	08 95       	ret
    13f8:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_zero>
    13fc:	67 2f       	mov	r22, r23
    13fe:	78 2f       	mov	r23, r24
    1400:	88 27       	eor	r24, r24
    1402:	b8 5f       	subi	r27, 0xF8	; 248
    1404:	39 f0       	breq	.+14     	; 0x1414 <__fixunssfsi+0x4c>
    1406:	b9 3f       	cpi	r27, 0xF9	; 249
    1408:	cc f3       	brlt	.-14     	; 0x13fc <__fixunssfsi+0x34>
    140a:	86 95       	lsr	r24
    140c:	77 95       	ror	r23
    140e:	67 95       	ror	r22
    1410:	b3 95       	inc	r27
    1412:	d9 f7       	brne	.-10     	; 0x140a <__fixunssfsi+0x42>
    1414:	3e f4       	brtc	.+14     	; 0x1424 <__fixunssfsi+0x5c>
    1416:	90 95       	com	r25
    1418:	80 95       	com	r24
    141a:	70 95       	com	r23
    141c:	61 95       	neg	r22
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	8f 4f       	sbci	r24, 0xFF	; 255
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	08 95       	ret

00001426 <__floatunsisf>:
    1426:	e8 94       	clt
    1428:	09 c0       	rjmp	.+18     	; 0x143c <__floatsisf+0x12>

0000142a <__floatsisf>:
    142a:	97 fb       	bst	r25, 7
    142c:	3e f4       	brtc	.+14     	; 0x143c <__floatsisf+0x12>
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	99 23       	and	r25, r25
    143e:	a9 f0       	breq	.+42     	; 0x146a <__floatsisf+0x40>
    1440:	f9 2f       	mov	r31, r25
    1442:	96 e9       	ldi	r25, 0x96	; 150
    1444:	bb 27       	eor	r27, r27
    1446:	93 95       	inc	r25
    1448:	f6 95       	lsr	r31
    144a:	87 95       	ror	r24
    144c:	77 95       	ror	r23
    144e:	67 95       	ror	r22
    1450:	b7 95       	ror	r27
    1452:	f1 11       	cpse	r31, r1
    1454:	f8 cf       	rjmp	.-16     	; 0x1446 <__floatsisf+0x1c>
    1456:	fa f4       	brpl	.+62     	; 0x1496 <__floatsisf+0x6c>
    1458:	bb 0f       	add	r27, r27
    145a:	11 f4       	brne	.+4      	; 0x1460 <__floatsisf+0x36>
    145c:	60 ff       	sbrs	r22, 0
    145e:	1b c0       	rjmp	.+54     	; 0x1496 <__floatsisf+0x6c>
    1460:	6f 5f       	subi	r22, 0xFF	; 255
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	8f 4f       	sbci	r24, 0xFF	; 255
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	16 c0       	rjmp	.+44     	; 0x1496 <__floatsisf+0x6c>
    146a:	88 23       	and	r24, r24
    146c:	11 f0       	breq	.+4      	; 0x1472 <__floatsisf+0x48>
    146e:	96 e9       	ldi	r25, 0x96	; 150
    1470:	11 c0       	rjmp	.+34     	; 0x1494 <__floatsisf+0x6a>
    1472:	77 23       	and	r23, r23
    1474:	21 f0       	breq	.+8      	; 0x147e <__floatsisf+0x54>
    1476:	9e e8       	ldi	r25, 0x8E	; 142
    1478:	87 2f       	mov	r24, r23
    147a:	76 2f       	mov	r23, r22
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <__floatsisf+0x5e>
    147e:	66 23       	and	r22, r22
    1480:	71 f0       	breq	.+28     	; 0x149e <__floatsisf+0x74>
    1482:	96 e8       	ldi	r25, 0x86	; 134
    1484:	86 2f       	mov	r24, r22
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	2a f0       	brmi	.+10     	; 0x1496 <__floatsisf+0x6c>
    148c:	9a 95       	dec	r25
    148e:	66 0f       	add	r22, r22
    1490:	77 1f       	adc	r23, r23
    1492:	88 1f       	adc	r24, r24
    1494:	da f7       	brpl	.-10     	; 0x148c <__floatsisf+0x62>
    1496:	88 0f       	add	r24, r24
    1498:	96 95       	lsr	r25
    149a:	87 95       	ror	r24
    149c:	97 f9       	bld	r25, 7
    149e:	08 95       	ret

000014a0 <__fp_inf>:
    14a0:	97 f9       	bld	r25, 7
    14a2:	9f 67       	ori	r25, 0x7F	; 127
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	08 95       	ret

000014ac <__fp_nan>:
    14ac:	9f ef       	ldi	r25, 0xFF	; 255
    14ae:	80 ec       	ldi	r24, 0xC0	; 192
    14b0:	08 95       	ret

000014b2 <__fp_pscA>:
    14b2:	00 24       	eor	r0, r0
    14b4:	0a 94       	dec	r0
    14b6:	16 16       	cp	r1, r22
    14b8:	17 06       	cpc	r1, r23
    14ba:	18 06       	cpc	r1, r24
    14bc:	09 06       	cpc	r0, r25
    14be:	08 95       	ret

000014c0 <__fp_pscB>:
    14c0:	00 24       	eor	r0, r0
    14c2:	0a 94       	dec	r0
    14c4:	12 16       	cp	r1, r18
    14c6:	13 06       	cpc	r1, r19
    14c8:	14 06       	cpc	r1, r20
    14ca:	05 06       	cpc	r0, r21
    14cc:	08 95       	ret

000014ce <__fp_round>:
    14ce:	09 2e       	mov	r0, r25
    14d0:	03 94       	inc	r0
    14d2:	00 0c       	add	r0, r0
    14d4:	11 f4       	brne	.+4      	; 0x14da <__fp_round+0xc>
    14d6:	88 23       	and	r24, r24
    14d8:	52 f0       	brmi	.+20     	; 0x14ee <__fp_round+0x20>
    14da:	bb 0f       	add	r27, r27
    14dc:	40 f4       	brcc	.+16     	; 0x14ee <__fp_round+0x20>
    14de:	bf 2b       	or	r27, r31
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <__fp_round+0x18>
    14e2:	60 ff       	sbrs	r22, 0
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <__fp_round+0x20>
    14e6:	6f 5f       	subi	r22, 0xFF	; 255
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8f 4f       	sbci	r24, 0xFF	; 255
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	08 95       	ret

000014f0 <__fp_split3>:
    14f0:	57 fd       	sbrc	r21, 7
    14f2:	90 58       	subi	r25, 0x80	; 128
    14f4:	44 0f       	add	r20, r20
    14f6:	55 1f       	adc	r21, r21
    14f8:	59 f0       	breq	.+22     	; 0x1510 <__fp_splitA+0x10>
    14fa:	5f 3f       	cpi	r21, 0xFF	; 255
    14fc:	71 f0       	breq	.+28     	; 0x151a <__fp_splitA+0x1a>
    14fe:	47 95       	ror	r20

00001500 <__fp_splitA>:
    1500:	88 0f       	add	r24, r24
    1502:	97 fb       	bst	r25, 7
    1504:	99 1f       	adc	r25, r25
    1506:	61 f0       	breq	.+24     	; 0x1520 <__fp_splitA+0x20>
    1508:	9f 3f       	cpi	r25, 0xFF	; 255
    150a:	79 f0       	breq	.+30     	; 0x152a <__fp_splitA+0x2a>
    150c:	87 95       	ror	r24
    150e:	08 95       	ret
    1510:	12 16       	cp	r1, r18
    1512:	13 06       	cpc	r1, r19
    1514:	14 06       	cpc	r1, r20
    1516:	55 1f       	adc	r21, r21
    1518:	f2 cf       	rjmp	.-28     	; 0x14fe <__fp_split3+0xe>
    151a:	46 95       	lsr	r20
    151c:	f1 df       	rcall	.-30     	; 0x1500 <__fp_splitA>
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <__fp_splitA+0x30>
    1520:	16 16       	cp	r1, r22
    1522:	17 06       	cpc	r1, r23
    1524:	18 06       	cpc	r1, r24
    1526:	99 1f       	adc	r25, r25
    1528:	f1 cf       	rjmp	.-30     	; 0x150c <__fp_splitA+0xc>
    152a:	86 95       	lsr	r24
    152c:	71 05       	cpc	r23, r1
    152e:	61 05       	cpc	r22, r1
    1530:	08 94       	sec
    1532:	08 95       	ret

00001534 <__fp_zero>:
    1534:	e8 94       	clt

00001536 <__fp_szero>:
    1536:	bb 27       	eor	r27, r27
    1538:	66 27       	eor	r22, r22
    153a:	77 27       	eor	r23, r23
    153c:	cb 01       	movw	r24, r22
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret

00001542 <__mulsf3>:
    1542:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__mulsf3x>
    1546:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__fp_round>
    154a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__fp_pscA>
    154e:	38 f0       	brcs	.+14     	; 0x155e <__mulsf3+0x1c>
    1550:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fp_pscB>
    1554:	20 f0       	brcs	.+8      	; 0x155e <__mulsf3+0x1c>
    1556:	95 23       	and	r25, r21
    1558:	11 f0       	breq	.+4      	; 0x155e <__mulsf3+0x1c>
    155a:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_inf>
    155e:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__fp_nan>
    1562:	11 24       	eor	r1, r1
    1564:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_szero>

00001568 <__mulsf3x>:
    1568:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__fp_split3>
    156c:	70 f3       	brcs	.-36     	; 0x154a <__mulsf3+0x8>

0000156e <__mulsf3_pse>:
    156e:	95 9f       	mul	r25, r21
    1570:	c1 f3       	breq	.-16     	; 0x1562 <__mulsf3+0x20>
    1572:	95 0f       	add	r25, r21
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	55 1f       	adc	r21, r21
    1578:	62 9f       	mul	r22, r18
    157a:	f0 01       	movw	r30, r0
    157c:	72 9f       	mul	r23, r18
    157e:	bb 27       	eor	r27, r27
    1580:	f0 0d       	add	r31, r0
    1582:	b1 1d       	adc	r27, r1
    1584:	63 9f       	mul	r22, r19
    1586:	aa 27       	eor	r26, r26
    1588:	f0 0d       	add	r31, r0
    158a:	b1 1d       	adc	r27, r1
    158c:	aa 1f       	adc	r26, r26
    158e:	64 9f       	mul	r22, r20
    1590:	66 27       	eor	r22, r22
    1592:	b0 0d       	add	r27, r0
    1594:	a1 1d       	adc	r26, r1
    1596:	66 1f       	adc	r22, r22
    1598:	82 9f       	mul	r24, r18
    159a:	22 27       	eor	r18, r18
    159c:	b0 0d       	add	r27, r0
    159e:	a1 1d       	adc	r26, r1
    15a0:	62 1f       	adc	r22, r18
    15a2:	73 9f       	mul	r23, r19
    15a4:	b0 0d       	add	r27, r0
    15a6:	a1 1d       	adc	r26, r1
    15a8:	62 1f       	adc	r22, r18
    15aa:	83 9f       	mul	r24, r19
    15ac:	a0 0d       	add	r26, r0
    15ae:	61 1d       	adc	r22, r1
    15b0:	22 1f       	adc	r18, r18
    15b2:	74 9f       	mul	r23, r20
    15b4:	33 27       	eor	r19, r19
    15b6:	a0 0d       	add	r26, r0
    15b8:	61 1d       	adc	r22, r1
    15ba:	23 1f       	adc	r18, r19
    15bc:	84 9f       	mul	r24, r20
    15be:	60 0d       	add	r22, r0
    15c0:	21 1d       	adc	r18, r1
    15c2:	82 2f       	mov	r24, r18
    15c4:	76 2f       	mov	r23, r22
    15c6:	6a 2f       	mov	r22, r26
    15c8:	11 24       	eor	r1, r1
    15ca:	9f 57       	subi	r25, 0x7F	; 127
    15cc:	50 40       	sbci	r21, 0x00	; 0
    15ce:	9a f0       	brmi	.+38     	; 0x15f6 <__mulsf3_pse+0x88>
    15d0:	f1 f0       	breq	.+60     	; 0x160e <__mulsf3_pse+0xa0>
    15d2:	88 23       	and	r24, r24
    15d4:	4a f0       	brmi	.+18     	; 0x15e8 <__mulsf3_pse+0x7a>
    15d6:	ee 0f       	add	r30, r30
    15d8:	ff 1f       	adc	r31, r31
    15da:	bb 1f       	adc	r27, r27
    15dc:	66 1f       	adc	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	91 50       	subi	r25, 0x01	; 1
    15e4:	50 40       	sbci	r21, 0x00	; 0
    15e6:	a9 f7       	brne	.-22     	; 0x15d2 <__mulsf3_pse+0x64>
    15e8:	9e 3f       	cpi	r25, 0xFE	; 254
    15ea:	51 05       	cpc	r21, r1
    15ec:	80 f0       	brcs	.+32     	; 0x160e <__mulsf3_pse+0xa0>
    15ee:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_inf>
    15f2:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_szero>
    15f6:	5f 3f       	cpi	r21, 0xFF	; 255
    15f8:	e4 f3       	brlt	.-8      	; 0x15f2 <__mulsf3_pse+0x84>
    15fa:	98 3e       	cpi	r25, 0xE8	; 232
    15fc:	d4 f3       	brlt	.-12     	; 0x15f2 <__mulsf3_pse+0x84>
    15fe:	86 95       	lsr	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	b7 95       	ror	r27
    1606:	f7 95       	ror	r31
    1608:	e7 95       	ror	r30
    160a:	9f 5f       	subi	r25, 0xFF	; 255
    160c:	c1 f7       	brne	.-16     	; 0x15fe <__mulsf3_pse+0x90>
    160e:	fe 2b       	or	r31, r30
    1610:	88 0f       	add	r24, r24
    1612:	91 1d       	adc	r25, r1
    1614:	96 95       	lsr	r25
    1616:	87 95       	ror	r24
    1618:	97 f9       	bld	r25, 7
    161a:	08 95       	ret

0000161c <__tablejump2__>:
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	00 24       	eor	r0, r0
    1622:	00 1c       	adc	r0, r0
    1624:	0b be       	out	0x3b, r0	; 59
    1626:	07 90       	elpm	r0, Z+
    1628:	f6 91       	elpm	r31, Z
    162a:	e0 2d       	mov	r30, r0
    162c:	09 94       	ijmp

0000162e <toupper>:
    162e:	91 11       	cpse	r25, r1
    1630:	08 95       	ret
    1632:	81 56       	subi	r24, 0x61	; 97
    1634:	8a 51       	subi	r24, 0x1A	; 26
    1636:	08 f4       	brcc	.+2      	; 0x163a <toupper+0xc>
    1638:	80 52       	subi	r24, 0x20	; 32
    163a:	85 58       	subi	r24, 0x85	; 133
    163c:	08 95       	ret

0000163e <sprintf>:
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	2e 97       	sbiw	r28, 0x0e	; 14
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0d 89       	ldd	r16, Y+21	; 0x15
    1652:	1e 89       	ldd	r17, Y+22	; 0x16
    1654:	86 e0       	ldi	r24, 0x06	; 6
    1656:	8c 83       	std	Y+4, r24	; 0x04
    1658:	09 83       	std	Y+1, r16	; 0x01
    165a:	1a 83       	std	Y+2, r17	; 0x02
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	9f e7       	ldi	r25, 0x7F	; 127
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	ae 01       	movw	r20, r28
    1666:	47 5e       	subi	r20, 0xE7	; 231
    1668:	5f 4f       	sbci	r21, 0xFF	; 255
    166a:	6f 89       	ldd	r22, Y+23	; 0x17
    166c:	78 8d       	ldd	r23, Y+24	; 0x18
    166e:	ce 01       	movw	r24, r28
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	0e 94 48 0b 	call	0x1690	; 0x1690 <vfprintf>
    1676:	ef 81       	ldd	r30, Y+7	; 0x07
    1678:	f8 85       	ldd	r31, Y+8	; 0x08
    167a:	e0 0f       	add	r30, r16
    167c:	f1 1f       	adc	r31, r17
    167e:	10 82       	st	Z, r1
    1680:	2e 96       	adiw	r28, 0x0e	; 14
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	08 95       	ret

00001690 <vfprintf>:
    1690:	2f 92       	push	r2
    1692:	3f 92       	push	r3
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	8f 92       	push	r8
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	2b 97       	sbiw	r28, 0x0b	; 11
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	6c 01       	movw	r12, r24
    16c0:	7b 01       	movw	r14, r22
    16c2:	8a 01       	movw	r16, r20
    16c4:	fc 01       	movw	r30, r24
    16c6:	16 82       	std	Z+6, r1	; 0x06
    16c8:	17 82       	std	Z+7, r1	; 0x07
    16ca:	83 81       	ldd	r24, Z+3	; 0x03
    16cc:	81 ff       	sbrs	r24, 1
    16ce:	cc c1       	rjmp	.+920    	; 0x1a68 <vfprintf+0x3d8>
    16d0:	ce 01       	movw	r24, r28
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	3c 01       	movw	r6, r24
    16d6:	f6 01       	movw	r30, r12
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	f7 01       	movw	r30, r14
    16dc:	93 fd       	sbrc	r25, 3
    16de:	85 91       	lpm	r24, Z+
    16e0:	93 ff       	sbrs	r25, 3
    16e2:	81 91       	ld	r24, Z+
    16e4:	7f 01       	movw	r14, r30
    16e6:	88 23       	and	r24, r24
    16e8:	09 f4       	brne	.+2      	; 0x16ec <vfprintf+0x5c>
    16ea:	ba c1       	rjmp	.+884    	; 0x1a60 <vfprintf+0x3d0>
    16ec:	85 32       	cpi	r24, 0x25	; 37
    16ee:	39 f4       	brne	.+14     	; 0x16fe <vfprintf+0x6e>
    16f0:	93 fd       	sbrc	r25, 3
    16f2:	85 91       	lpm	r24, Z+
    16f4:	93 ff       	sbrs	r25, 3
    16f6:	81 91       	ld	r24, Z+
    16f8:	7f 01       	movw	r14, r30
    16fa:	85 32       	cpi	r24, 0x25	; 37
    16fc:	29 f4       	brne	.+10     	; 0x1708 <vfprintf+0x78>
    16fe:	b6 01       	movw	r22, r12
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <fputc>
    1706:	e7 cf       	rjmp	.-50     	; 0x16d6 <vfprintf+0x46>
    1708:	91 2c       	mov	r9, r1
    170a:	21 2c       	mov	r2, r1
    170c:	31 2c       	mov	r3, r1
    170e:	ff e1       	ldi	r31, 0x1F	; 31
    1710:	f3 15       	cp	r31, r3
    1712:	d8 f0       	brcs	.+54     	; 0x174a <vfprintf+0xba>
    1714:	8b 32       	cpi	r24, 0x2B	; 43
    1716:	79 f0       	breq	.+30     	; 0x1736 <vfprintf+0xa6>
    1718:	38 f4       	brcc	.+14     	; 0x1728 <vfprintf+0x98>
    171a:	80 32       	cpi	r24, 0x20	; 32
    171c:	79 f0       	breq	.+30     	; 0x173c <vfprintf+0xac>
    171e:	83 32       	cpi	r24, 0x23	; 35
    1720:	a1 f4       	brne	.+40     	; 0x174a <vfprintf+0xba>
    1722:	23 2d       	mov	r18, r3
    1724:	20 61       	ori	r18, 0x10	; 16
    1726:	1d c0       	rjmp	.+58     	; 0x1762 <vfprintf+0xd2>
    1728:	8d 32       	cpi	r24, 0x2D	; 45
    172a:	61 f0       	breq	.+24     	; 0x1744 <vfprintf+0xb4>
    172c:	80 33       	cpi	r24, 0x30	; 48
    172e:	69 f4       	brne	.+26     	; 0x174a <vfprintf+0xba>
    1730:	23 2d       	mov	r18, r3
    1732:	21 60       	ori	r18, 0x01	; 1
    1734:	16 c0       	rjmp	.+44     	; 0x1762 <vfprintf+0xd2>
    1736:	83 2d       	mov	r24, r3
    1738:	82 60       	ori	r24, 0x02	; 2
    173a:	38 2e       	mov	r3, r24
    173c:	e3 2d       	mov	r30, r3
    173e:	e4 60       	ori	r30, 0x04	; 4
    1740:	3e 2e       	mov	r3, r30
    1742:	2a c0       	rjmp	.+84     	; 0x1798 <vfprintf+0x108>
    1744:	f3 2d       	mov	r31, r3
    1746:	f8 60       	ori	r31, 0x08	; 8
    1748:	1d c0       	rjmp	.+58     	; 0x1784 <vfprintf+0xf4>
    174a:	37 fc       	sbrc	r3, 7
    174c:	2d c0       	rjmp	.+90     	; 0x17a8 <vfprintf+0x118>
    174e:	20 ed       	ldi	r18, 0xD0	; 208
    1750:	28 0f       	add	r18, r24
    1752:	2a 30       	cpi	r18, 0x0A	; 10
    1754:	40 f0       	brcs	.+16     	; 0x1766 <vfprintf+0xd6>
    1756:	8e 32       	cpi	r24, 0x2E	; 46
    1758:	b9 f4       	brne	.+46     	; 0x1788 <vfprintf+0xf8>
    175a:	36 fc       	sbrc	r3, 6
    175c:	81 c1       	rjmp	.+770    	; 0x1a60 <vfprintf+0x3d0>
    175e:	23 2d       	mov	r18, r3
    1760:	20 64       	ori	r18, 0x40	; 64
    1762:	32 2e       	mov	r3, r18
    1764:	19 c0       	rjmp	.+50     	; 0x1798 <vfprintf+0x108>
    1766:	36 fe       	sbrs	r3, 6
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <vfprintf+0xe6>
    176a:	8a e0       	ldi	r24, 0x0A	; 10
    176c:	98 9e       	mul	r9, r24
    176e:	20 0d       	add	r18, r0
    1770:	11 24       	eor	r1, r1
    1772:	92 2e       	mov	r9, r18
    1774:	11 c0       	rjmp	.+34     	; 0x1798 <vfprintf+0x108>
    1776:	ea e0       	ldi	r30, 0x0A	; 10
    1778:	2e 9e       	mul	r2, r30
    177a:	20 0d       	add	r18, r0
    177c:	11 24       	eor	r1, r1
    177e:	22 2e       	mov	r2, r18
    1780:	f3 2d       	mov	r31, r3
    1782:	f0 62       	ori	r31, 0x20	; 32
    1784:	3f 2e       	mov	r3, r31
    1786:	08 c0       	rjmp	.+16     	; 0x1798 <vfprintf+0x108>
    1788:	8c 36       	cpi	r24, 0x6C	; 108
    178a:	21 f4       	brne	.+8      	; 0x1794 <vfprintf+0x104>
    178c:	83 2d       	mov	r24, r3
    178e:	80 68       	ori	r24, 0x80	; 128
    1790:	38 2e       	mov	r3, r24
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <vfprintf+0x108>
    1794:	88 36       	cpi	r24, 0x68	; 104
    1796:	41 f4       	brne	.+16     	; 0x17a8 <vfprintf+0x118>
    1798:	f7 01       	movw	r30, r14
    179a:	93 fd       	sbrc	r25, 3
    179c:	85 91       	lpm	r24, Z+
    179e:	93 ff       	sbrs	r25, 3
    17a0:	81 91       	ld	r24, Z+
    17a2:	7f 01       	movw	r14, r30
    17a4:	81 11       	cpse	r24, r1
    17a6:	b3 cf       	rjmp	.-154    	; 0x170e <vfprintf+0x7e>
    17a8:	98 2f       	mov	r25, r24
    17aa:	9f 7d       	andi	r25, 0xDF	; 223
    17ac:	95 54       	subi	r25, 0x45	; 69
    17ae:	93 30       	cpi	r25, 0x03	; 3
    17b0:	28 f4       	brcc	.+10     	; 0x17bc <vfprintf+0x12c>
    17b2:	0c 5f       	subi	r16, 0xFC	; 252
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	9f e3       	ldi	r25, 0x3F	; 63
    17b8:	99 83       	std	Y+1, r25	; 0x01
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <vfprintf+0x146>
    17bc:	83 36       	cpi	r24, 0x63	; 99
    17be:	31 f0       	breq	.+12     	; 0x17cc <vfprintf+0x13c>
    17c0:	83 37       	cpi	r24, 0x73	; 115
    17c2:	71 f0       	breq	.+28     	; 0x17e0 <vfprintf+0x150>
    17c4:	83 35       	cpi	r24, 0x53	; 83
    17c6:	09 f0       	breq	.+2      	; 0x17ca <vfprintf+0x13a>
    17c8:	59 c0       	rjmp	.+178    	; 0x187c <vfprintf+0x1ec>
    17ca:	21 c0       	rjmp	.+66     	; 0x180e <vfprintf+0x17e>
    17cc:	f8 01       	movw	r30, r16
    17ce:	80 81       	ld	r24, Z
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	0e 5f       	subi	r16, 0xFE	; 254
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	88 24       	eor	r8, r8
    17d8:	83 94       	inc	r8
    17da:	91 2c       	mov	r9, r1
    17dc:	53 01       	movw	r10, r6
    17de:	13 c0       	rjmp	.+38     	; 0x1806 <vfprintf+0x176>
    17e0:	28 01       	movw	r4, r16
    17e2:	f2 e0       	ldi	r31, 0x02	; 2
    17e4:	4f 0e       	add	r4, r31
    17e6:	51 1c       	adc	r5, r1
    17e8:	f8 01       	movw	r30, r16
    17ea:	a0 80       	ld	r10, Z
    17ec:	b1 80       	ldd	r11, Z+1	; 0x01
    17ee:	36 fe       	sbrs	r3, 6
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <vfprintf+0x168>
    17f2:	69 2d       	mov	r22, r9
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <vfprintf+0x16c>
    17f8:	6f ef       	ldi	r22, 0xFF	; 255
    17fa:	7f ef       	ldi	r23, 0xFF	; 255
    17fc:	c5 01       	movw	r24, r10
    17fe:	0e 94 57 0d 	call	0x1aae	; 0x1aae <strnlen>
    1802:	4c 01       	movw	r8, r24
    1804:	82 01       	movw	r16, r4
    1806:	f3 2d       	mov	r31, r3
    1808:	ff 77       	andi	r31, 0x7F	; 127
    180a:	3f 2e       	mov	r3, r31
    180c:	16 c0       	rjmp	.+44     	; 0x183a <vfprintf+0x1aa>
    180e:	28 01       	movw	r4, r16
    1810:	22 e0       	ldi	r18, 0x02	; 2
    1812:	42 0e       	add	r4, r18
    1814:	51 1c       	adc	r5, r1
    1816:	f8 01       	movw	r30, r16
    1818:	a0 80       	ld	r10, Z
    181a:	b1 80       	ldd	r11, Z+1	; 0x01
    181c:	36 fe       	sbrs	r3, 6
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <vfprintf+0x196>
    1820:	69 2d       	mov	r22, r9
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	02 c0       	rjmp	.+4      	; 0x182a <vfprintf+0x19a>
    1826:	6f ef       	ldi	r22, 0xFF	; 255
    1828:	7f ef       	ldi	r23, 0xFF	; 255
    182a:	c5 01       	movw	r24, r10
    182c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <strnlen_P>
    1830:	4c 01       	movw	r8, r24
    1832:	f3 2d       	mov	r31, r3
    1834:	f0 68       	ori	r31, 0x80	; 128
    1836:	3f 2e       	mov	r3, r31
    1838:	82 01       	movw	r16, r4
    183a:	33 fc       	sbrc	r3, 3
    183c:	1b c0       	rjmp	.+54     	; 0x1874 <vfprintf+0x1e4>
    183e:	82 2d       	mov	r24, r2
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	88 16       	cp	r8, r24
    1844:	99 06       	cpc	r9, r25
    1846:	b0 f4       	brcc	.+44     	; 0x1874 <vfprintf+0x1e4>
    1848:	b6 01       	movw	r22, r12
    184a:	80 e2       	ldi	r24, 0x20	; 32
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <fputc>
    1852:	2a 94       	dec	r2
    1854:	f4 cf       	rjmp	.-24     	; 0x183e <vfprintf+0x1ae>
    1856:	f5 01       	movw	r30, r10
    1858:	37 fc       	sbrc	r3, 7
    185a:	85 91       	lpm	r24, Z+
    185c:	37 fe       	sbrs	r3, 7
    185e:	81 91       	ld	r24, Z+
    1860:	5f 01       	movw	r10, r30
    1862:	b6 01       	movw	r22, r12
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <fputc>
    186a:	21 10       	cpse	r2, r1
    186c:	2a 94       	dec	r2
    186e:	21 e0       	ldi	r18, 0x01	; 1
    1870:	82 1a       	sub	r8, r18
    1872:	91 08       	sbc	r9, r1
    1874:	81 14       	cp	r8, r1
    1876:	91 04       	cpc	r9, r1
    1878:	71 f7       	brne	.-36     	; 0x1856 <vfprintf+0x1c6>
    187a:	e8 c0       	rjmp	.+464    	; 0x1a4c <vfprintf+0x3bc>
    187c:	84 36       	cpi	r24, 0x64	; 100
    187e:	11 f0       	breq	.+4      	; 0x1884 <vfprintf+0x1f4>
    1880:	89 36       	cpi	r24, 0x69	; 105
    1882:	41 f5       	brne	.+80     	; 0x18d4 <vfprintf+0x244>
    1884:	f8 01       	movw	r30, r16
    1886:	37 fe       	sbrs	r3, 7
    1888:	07 c0       	rjmp	.+14     	; 0x1898 <vfprintf+0x208>
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	0c 5f       	subi	r16, 0xFC	; 252
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	08 c0       	rjmp	.+16     	; 0x18a8 <vfprintf+0x218>
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	07 2e       	mov	r0, r23
    189e:	00 0c       	add	r0, r0
    18a0:	88 0b       	sbc	r24, r24
    18a2:	99 0b       	sbc	r25, r25
    18a4:	0e 5f       	subi	r16, 0xFE	; 254
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	f3 2d       	mov	r31, r3
    18aa:	ff 76       	andi	r31, 0x6F	; 111
    18ac:	3f 2e       	mov	r3, r31
    18ae:	97 ff       	sbrs	r25, 7
    18b0:	09 c0       	rjmp	.+18     	; 0x18c4 <vfprintf+0x234>
    18b2:	90 95       	com	r25
    18b4:	80 95       	com	r24
    18b6:	70 95       	com	r23
    18b8:	61 95       	neg	r22
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	8f 4f       	sbci	r24, 0xFF	; 255
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	f0 68       	ori	r31, 0x80	; 128
    18c2:	3f 2e       	mov	r3, r31
    18c4:	2a e0       	ldi	r18, 0x0A	; 10
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	a3 01       	movw	r20, r6
    18ca:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__ultoa_invert>
    18ce:	88 2e       	mov	r8, r24
    18d0:	86 18       	sub	r8, r6
    18d2:	45 c0       	rjmp	.+138    	; 0x195e <vfprintf+0x2ce>
    18d4:	85 37       	cpi	r24, 0x75	; 117
    18d6:	31 f4       	brne	.+12     	; 0x18e4 <vfprintf+0x254>
    18d8:	23 2d       	mov	r18, r3
    18da:	2f 7e       	andi	r18, 0xEF	; 239
    18dc:	b2 2e       	mov	r11, r18
    18de:	2a e0       	ldi	r18, 0x0A	; 10
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	25 c0       	rjmp	.+74     	; 0x192e <vfprintf+0x29e>
    18e4:	93 2d       	mov	r25, r3
    18e6:	99 7f       	andi	r25, 0xF9	; 249
    18e8:	b9 2e       	mov	r11, r25
    18ea:	8f 36       	cpi	r24, 0x6F	; 111
    18ec:	c1 f0       	breq	.+48     	; 0x191e <vfprintf+0x28e>
    18ee:	18 f4       	brcc	.+6      	; 0x18f6 <vfprintf+0x266>
    18f0:	88 35       	cpi	r24, 0x58	; 88
    18f2:	79 f0       	breq	.+30     	; 0x1912 <vfprintf+0x282>
    18f4:	b5 c0       	rjmp	.+362    	; 0x1a60 <vfprintf+0x3d0>
    18f6:	80 37       	cpi	r24, 0x70	; 112
    18f8:	19 f0       	breq	.+6      	; 0x1900 <vfprintf+0x270>
    18fa:	88 37       	cpi	r24, 0x78	; 120
    18fc:	21 f0       	breq	.+8      	; 0x1906 <vfprintf+0x276>
    18fe:	b0 c0       	rjmp	.+352    	; 0x1a60 <vfprintf+0x3d0>
    1900:	e9 2f       	mov	r30, r25
    1902:	e0 61       	ori	r30, 0x10	; 16
    1904:	be 2e       	mov	r11, r30
    1906:	b4 fe       	sbrs	r11, 4
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <vfprintf+0x294>
    190a:	fb 2d       	mov	r31, r11
    190c:	f4 60       	ori	r31, 0x04	; 4
    190e:	bf 2e       	mov	r11, r31
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <vfprintf+0x294>
    1912:	34 fe       	sbrs	r3, 4
    1914:	0a c0       	rjmp	.+20     	; 0x192a <vfprintf+0x29a>
    1916:	29 2f       	mov	r18, r25
    1918:	26 60       	ori	r18, 0x06	; 6
    191a:	b2 2e       	mov	r11, r18
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfprintf+0x29a>
    191e:	28 e0       	ldi	r18, 0x08	; 8
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	05 c0       	rjmp	.+10     	; 0x192e <vfprintf+0x29e>
    1924:	20 e1       	ldi	r18, 0x10	; 16
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x29e>
    192a:	20 e1       	ldi	r18, 0x10	; 16
    192c:	32 e0       	ldi	r19, 0x02	; 2
    192e:	f8 01       	movw	r30, r16
    1930:	b7 fe       	sbrs	r11, 7
    1932:	07 c0       	rjmp	.+14     	; 0x1942 <vfprintf+0x2b2>
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	0c 5f       	subi	r16, 0xFC	; 252
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	06 c0       	rjmp	.+12     	; 0x194e <vfprintf+0x2be>
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 5f       	subi	r16, 0xFE	; 254
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	a3 01       	movw	r20, r6
    1950:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__ultoa_invert>
    1954:	88 2e       	mov	r8, r24
    1956:	86 18       	sub	r8, r6
    1958:	fb 2d       	mov	r31, r11
    195a:	ff 77       	andi	r31, 0x7F	; 127
    195c:	3f 2e       	mov	r3, r31
    195e:	36 fe       	sbrs	r3, 6
    1960:	0d c0       	rjmp	.+26     	; 0x197c <vfprintf+0x2ec>
    1962:	23 2d       	mov	r18, r3
    1964:	2e 7f       	andi	r18, 0xFE	; 254
    1966:	a2 2e       	mov	r10, r18
    1968:	89 14       	cp	r8, r9
    196a:	58 f4       	brcc	.+22     	; 0x1982 <vfprintf+0x2f2>
    196c:	34 fe       	sbrs	r3, 4
    196e:	0b c0       	rjmp	.+22     	; 0x1986 <vfprintf+0x2f6>
    1970:	32 fc       	sbrc	r3, 2
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <vfprintf+0x2f6>
    1974:	83 2d       	mov	r24, r3
    1976:	8e 7e       	andi	r24, 0xEE	; 238
    1978:	a8 2e       	mov	r10, r24
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <vfprintf+0x2f6>
    197c:	b8 2c       	mov	r11, r8
    197e:	a3 2c       	mov	r10, r3
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <vfprintf+0x2f8>
    1982:	b8 2c       	mov	r11, r8
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <vfprintf+0x2f8>
    1986:	b9 2c       	mov	r11, r9
    1988:	a4 fe       	sbrs	r10, 4
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <vfprintf+0x31a>
    198c:	fe 01       	movw	r30, r28
    198e:	e8 0d       	add	r30, r8
    1990:	f1 1d       	adc	r31, r1
    1992:	80 81       	ld	r24, Z
    1994:	80 33       	cpi	r24, 0x30	; 48
    1996:	21 f4       	brne	.+8      	; 0x19a0 <vfprintf+0x310>
    1998:	9a 2d       	mov	r25, r10
    199a:	99 7e       	andi	r25, 0xE9	; 233
    199c:	a9 2e       	mov	r10, r25
    199e:	09 c0       	rjmp	.+18     	; 0x19b2 <vfprintf+0x322>
    19a0:	a2 fe       	sbrs	r10, 2
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <vfprintf+0x320>
    19a4:	b3 94       	inc	r11
    19a6:	b3 94       	inc	r11
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <vfprintf+0x322>
    19aa:	8a 2d       	mov	r24, r10
    19ac:	86 78       	andi	r24, 0x86	; 134
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <vfprintf+0x322>
    19b0:	b3 94       	inc	r11
    19b2:	a3 fc       	sbrc	r10, 3
    19b4:	11 c0       	rjmp	.+34     	; 0x19d8 <vfprintf+0x348>
    19b6:	a0 fe       	sbrs	r10, 0
    19b8:	06 c0       	rjmp	.+12     	; 0x19c6 <vfprintf+0x336>
    19ba:	b2 14       	cp	r11, r2
    19bc:	88 f4       	brcc	.+34     	; 0x19e0 <vfprintf+0x350>
    19be:	28 0c       	add	r2, r8
    19c0:	92 2c       	mov	r9, r2
    19c2:	9b 18       	sub	r9, r11
    19c4:	0e c0       	rjmp	.+28     	; 0x19e2 <vfprintf+0x352>
    19c6:	b2 14       	cp	r11, r2
    19c8:	60 f4       	brcc	.+24     	; 0x19e2 <vfprintf+0x352>
    19ca:	b6 01       	movw	r22, r12
    19cc:	80 e2       	ldi	r24, 0x20	; 32
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <fputc>
    19d4:	b3 94       	inc	r11
    19d6:	f7 cf       	rjmp	.-18     	; 0x19c6 <vfprintf+0x336>
    19d8:	b2 14       	cp	r11, r2
    19da:	18 f4       	brcc	.+6      	; 0x19e2 <vfprintf+0x352>
    19dc:	2b 18       	sub	r2, r11
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <vfprintf+0x354>
    19e0:	98 2c       	mov	r9, r8
    19e2:	21 2c       	mov	r2, r1
    19e4:	a4 fe       	sbrs	r10, 4
    19e6:	10 c0       	rjmp	.+32     	; 0x1a08 <vfprintf+0x378>
    19e8:	b6 01       	movw	r22, r12
    19ea:	80 e3       	ldi	r24, 0x30	; 48
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <fputc>
    19f2:	a2 fe       	sbrs	r10, 2
    19f4:	17 c0       	rjmp	.+46     	; 0x1a24 <vfprintf+0x394>
    19f6:	a1 fc       	sbrc	r10, 1
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <vfprintf+0x370>
    19fa:	88 e7       	ldi	r24, 0x78	; 120
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <vfprintf+0x374>
    1a00:	88 e5       	ldi	r24, 0x58	; 88
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	b6 01       	movw	r22, r12
    1a06:	0c c0       	rjmp	.+24     	; 0x1a20 <vfprintf+0x390>
    1a08:	8a 2d       	mov	r24, r10
    1a0a:	86 78       	andi	r24, 0x86	; 134
    1a0c:	59 f0       	breq	.+22     	; 0x1a24 <vfprintf+0x394>
    1a0e:	a1 fe       	sbrs	r10, 1
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <vfprintf+0x386>
    1a12:	8b e2       	ldi	r24, 0x2B	; 43
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <vfprintf+0x388>
    1a16:	80 e2       	ldi	r24, 0x20	; 32
    1a18:	a7 fc       	sbrc	r10, 7
    1a1a:	8d e2       	ldi	r24, 0x2D	; 45
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <fputc>
    1a24:	89 14       	cp	r8, r9
    1a26:	38 f4       	brcc	.+14     	; 0x1a36 <vfprintf+0x3a6>
    1a28:	b6 01       	movw	r22, r12
    1a2a:	80 e3       	ldi	r24, 0x30	; 48
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <fputc>
    1a32:	9a 94       	dec	r9
    1a34:	f7 cf       	rjmp	.-18     	; 0x1a24 <vfprintf+0x394>
    1a36:	8a 94       	dec	r8
    1a38:	f3 01       	movw	r30, r6
    1a3a:	e8 0d       	add	r30, r8
    1a3c:	f1 1d       	adc	r31, r1
    1a3e:	80 81       	ld	r24, Z
    1a40:	b6 01       	movw	r22, r12
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <fputc>
    1a48:	81 10       	cpse	r8, r1
    1a4a:	f5 cf       	rjmp	.-22     	; 0x1a36 <vfprintf+0x3a6>
    1a4c:	22 20       	and	r2, r2
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <vfprintf+0x3c2>
    1a50:	42 ce       	rjmp	.-892    	; 0x16d6 <vfprintf+0x46>
    1a52:	b6 01       	movw	r22, r12
    1a54:	80 e2       	ldi	r24, 0x20	; 32
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <fputc>
    1a5c:	2a 94       	dec	r2
    1a5e:	f6 cf       	rjmp	.-20     	; 0x1a4c <vfprintf+0x3bc>
    1a60:	f6 01       	movw	r30, r12
    1a62:	86 81       	ldd	r24, Z+6	; 0x06
    1a64:	97 81       	ldd	r25, Z+7	; 0x07
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <vfprintf+0x3dc>
    1a68:	8f ef       	ldi	r24, 0xFF	; 255
    1a6a:	9f ef       	ldi	r25, 0xFF	; 255
    1a6c:	2b 96       	adiw	r28, 0x0b	; 11
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	df 90       	pop	r13
    1a80:	cf 90       	pop	r12
    1a82:	bf 90       	pop	r11
    1a84:	af 90       	pop	r10
    1a86:	9f 90       	pop	r9
    1a88:	8f 90       	pop	r8
    1a8a:	7f 90       	pop	r7
    1a8c:	6f 90       	pop	r6
    1a8e:	5f 90       	pop	r5
    1a90:	4f 90       	pop	r4
    1a92:	3f 90       	pop	r3
    1a94:	2f 90       	pop	r2
    1a96:	08 95       	ret

00001a98 <strnlen_P>:
    1a98:	fc 01       	movw	r30, r24
    1a9a:	05 90       	lpm	r0, Z+
    1a9c:	61 50       	subi	r22, 0x01	; 1
    1a9e:	70 40       	sbci	r23, 0x00	; 0
    1aa0:	01 10       	cpse	r0, r1
    1aa2:	d8 f7       	brcc	.-10     	; 0x1a9a <strnlen_P+0x2>
    1aa4:	80 95       	com	r24
    1aa6:	90 95       	com	r25
    1aa8:	8e 0f       	add	r24, r30
    1aaa:	9f 1f       	adc	r25, r31
    1aac:	08 95       	ret

00001aae <strnlen>:
    1aae:	fc 01       	movw	r30, r24
    1ab0:	61 50       	subi	r22, 0x01	; 1
    1ab2:	70 40       	sbci	r23, 0x00	; 0
    1ab4:	01 90       	ld	r0, Z+
    1ab6:	01 10       	cpse	r0, r1
    1ab8:	d8 f7       	brcc	.-10     	; 0x1ab0 <strnlen+0x2>
    1aba:	80 95       	com	r24
    1abc:	90 95       	com	r25
    1abe:	8e 0f       	add	r24, r30
    1ac0:	9f 1f       	adc	r25, r31
    1ac2:	08 95       	ret

00001ac4 <fputc>:
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	fb 01       	movw	r30, r22
    1ace:	23 81       	ldd	r18, Z+3	; 0x03
    1ad0:	21 fd       	sbrc	r18, 1
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <fputc+0x16>
    1ad4:	8f ef       	ldi	r24, 0xFF	; 255
    1ad6:	9f ef       	ldi	r25, 0xFF	; 255
    1ad8:	2c c0       	rjmp	.+88     	; 0x1b32 <fputc+0x6e>
    1ada:	22 ff       	sbrs	r18, 2
    1adc:	16 c0       	rjmp	.+44     	; 0x1b0a <fputc+0x46>
    1ade:	46 81       	ldd	r20, Z+6	; 0x06
    1ae0:	57 81       	ldd	r21, Z+7	; 0x07
    1ae2:	24 81       	ldd	r18, Z+4	; 0x04
    1ae4:	35 81       	ldd	r19, Z+5	; 0x05
    1ae6:	42 17       	cp	r20, r18
    1ae8:	53 07       	cpc	r21, r19
    1aea:	44 f4       	brge	.+16     	; 0x1afc <fputc+0x38>
    1aec:	a0 81       	ld	r26, Z
    1aee:	b1 81       	ldd	r27, Z+1	; 0x01
    1af0:	9d 01       	movw	r18, r26
    1af2:	2f 5f       	subi	r18, 0xFF	; 255
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255
    1af6:	20 83       	st	Z, r18
    1af8:	31 83       	std	Z+1, r19	; 0x01
    1afa:	8c 93       	st	X, r24
    1afc:	26 81       	ldd	r18, Z+6	; 0x06
    1afe:	37 81       	ldd	r19, Z+7	; 0x07
    1b00:	2f 5f       	subi	r18, 0xFF	; 255
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	26 83       	std	Z+6, r18	; 0x06
    1b06:	37 83       	std	Z+7, r19	; 0x07
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <fputc+0x6e>
    1b0a:	8b 01       	movw	r16, r22
    1b0c:	ec 01       	movw	r28, r24
    1b0e:	fb 01       	movw	r30, r22
    1b10:	00 84       	ldd	r0, Z+8	; 0x08
    1b12:	f1 85       	ldd	r31, Z+9	; 0x09
    1b14:	e0 2d       	mov	r30, r0
    1b16:	09 95       	icall
    1b18:	89 2b       	or	r24, r25
    1b1a:	e1 f6       	brne	.-72     	; 0x1ad4 <fputc+0x10>
    1b1c:	d8 01       	movw	r26, r16
    1b1e:	16 96       	adiw	r26, 0x06	; 6
    1b20:	8d 91       	ld	r24, X+
    1b22:	9c 91       	ld	r25, X
    1b24:	17 97       	sbiw	r26, 0x07	; 7
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	16 96       	adiw	r26, 0x06	; 6
    1b2a:	8d 93       	st	X+, r24
    1b2c:	9c 93       	st	X, r25
    1b2e:	17 97       	sbiw	r26, 0x07	; 7
    1b30:	ce 01       	movw	r24, r28
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	08 95       	ret

00001b3c <__ultoa_invert>:
    1b3c:	fa 01       	movw	r30, r20
    1b3e:	aa 27       	eor	r26, r26
    1b40:	28 30       	cpi	r18, 0x08	; 8
    1b42:	51 f1       	breq	.+84     	; 0x1b98 <__ultoa_invert+0x5c>
    1b44:	20 31       	cpi	r18, 0x10	; 16
    1b46:	81 f1       	breq	.+96     	; 0x1ba8 <__ultoa_invert+0x6c>
    1b48:	e8 94       	clt
    1b4a:	6f 93       	push	r22
    1b4c:	6e 7f       	andi	r22, 0xFE	; 254
    1b4e:	6e 5f       	subi	r22, 0xFE	; 254
    1b50:	7f 4f       	sbci	r23, 0xFF	; 255
    1b52:	8f 4f       	sbci	r24, 0xFF	; 255
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	af 4f       	sbci	r26, 0xFF	; 255
    1b58:	b1 e0       	ldi	r27, 0x01	; 1
    1b5a:	3e d0       	rcall	.+124    	; 0x1bd8 <__ultoa_invert+0x9c>
    1b5c:	b4 e0       	ldi	r27, 0x04	; 4
    1b5e:	3c d0       	rcall	.+120    	; 0x1bd8 <__ultoa_invert+0x9c>
    1b60:	67 0f       	add	r22, r23
    1b62:	78 1f       	adc	r23, r24
    1b64:	89 1f       	adc	r24, r25
    1b66:	9a 1f       	adc	r25, r26
    1b68:	a1 1d       	adc	r26, r1
    1b6a:	68 0f       	add	r22, r24
    1b6c:	79 1f       	adc	r23, r25
    1b6e:	8a 1f       	adc	r24, r26
    1b70:	91 1d       	adc	r25, r1
    1b72:	a1 1d       	adc	r26, r1
    1b74:	6a 0f       	add	r22, r26
    1b76:	71 1d       	adc	r23, r1
    1b78:	81 1d       	adc	r24, r1
    1b7a:	91 1d       	adc	r25, r1
    1b7c:	a1 1d       	adc	r26, r1
    1b7e:	20 d0       	rcall	.+64     	; 0x1bc0 <__ultoa_invert+0x84>
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <__ultoa_invert+0x48>
    1b82:	68 94       	set
    1b84:	3f 91       	pop	r19
    1b86:	2a e0       	ldi	r18, 0x0A	; 10
    1b88:	26 9f       	mul	r18, r22
    1b8a:	11 24       	eor	r1, r1
    1b8c:	30 19       	sub	r19, r0
    1b8e:	30 5d       	subi	r19, 0xD0	; 208
    1b90:	31 93       	st	Z+, r19
    1b92:	de f6       	brtc	.-74     	; 0x1b4a <__ultoa_invert+0xe>
    1b94:	cf 01       	movw	r24, r30
    1b96:	08 95       	ret
    1b98:	46 2f       	mov	r20, r22
    1b9a:	47 70       	andi	r20, 0x07	; 7
    1b9c:	40 5d       	subi	r20, 0xD0	; 208
    1b9e:	41 93       	st	Z+, r20
    1ba0:	b3 e0       	ldi	r27, 0x03	; 3
    1ba2:	0f d0       	rcall	.+30     	; 0x1bc2 <__ultoa_invert+0x86>
    1ba4:	c9 f7       	brne	.-14     	; 0x1b98 <__ultoa_invert+0x5c>
    1ba6:	f6 cf       	rjmp	.-20     	; 0x1b94 <__ultoa_invert+0x58>
    1ba8:	46 2f       	mov	r20, r22
    1baa:	4f 70       	andi	r20, 0x0F	; 15
    1bac:	40 5d       	subi	r20, 0xD0	; 208
    1bae:	4a 33       	cpi	r20, 0x3A	; 58
    1bb0:	18 f0       	brcs	.+6      	; 0x1bb8 <__ultoa_invert+0x7c>
    1bb2:	49 5d       	subi	r20, 0xD9	; 217
    1bb4:	31 fd       	sbrc	r19, 1
    1bb6:	40 52       	subi	r20, 0x20	; 32
    1bb8:	41 93       	st	Z+, r20
    1bba:	02 d0       	rcall	.+4      	; 0x1bc0 <__ultoa_invert+0x84>
    1bbc:	a9 f7       	brne	.-22     	; 0x1ba8 <__ultoa_invert+0x6c>
    1bbe:	ea cf       	rjmp	.-44     	; 0x1b94 <__ultoa_invert+0x58>
    1bc0:	b4 e0       	ldi	r27, 0x04	; 4
    1bc2:	a6 95       	lsr	r26
    1bc4:	97 95       	ror	r25
    1bc6:	87 95       	ror	r24
    1bc8:	77 95       	ror	r23
    1bca:	67 95       	ror	r22
    1bcc:	ba 95       	dec	r27
    1bce:	c9 f7       	brne	.-14     	; 0x1bc2 <__ultoa_invert+0x86>
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	61 05       	cpc	r22, r1
    1bd4:	71 05       	cpc	r23, r1
    1bd6:	08 95       	ret
    1bd8:	9b 01       	movw	r18, r22
    1bda:	ac 01       	movw	r20, r24
    1bdc:	0a 2e       	mov	r0, r26
    1bde:	06 94       	lsr	r0
    1be0:	57 95       	ror	r21
    1be2:	47 95       	ror	r20
    1be4:	37 95       	ror	r19
    1be6:	27 95       	ror	r18
    1be8:	ba 95       	dec	r27
    1bea:	c9 f7       	brne	.-14     	; 0x1bde <__ultoa_invert+0xa2>
    1bec:	62 0f       	add	r22, r18
    1bee:	73 1f       	adc	r23, r19
    1bf0:	84 1f       	adc	r24, r20
    1bf2:	95 1f       	adc	r25, r21
    1bf4:	a0 1d       	adc	r26, r0
    1bf6:	08 95       	ret

00001bf8 <_exit>:
    1bf8:	f8 94       	cli

00001bfa <__stop_program>:
    1bfa:	ff cf       	rjmp	.-2      	; 0x1bfa <__stop_program>
