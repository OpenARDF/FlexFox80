
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000069a  00804000  0000a730  0000a7e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a730  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000417  0080469a  0080469a  0000ae7e  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  0000ae7e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000aeb3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000af10  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000009c0  00000000  00000000  0000af50  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00013483  00000000  00000000  0000b910  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005cad  00000000  00000000  0001ed93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000081b1  00000000  00000000  00024a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001f74  00000000  00000000  0002cbf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006085  00000000  00000000  0002eb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b54b  00000000  00000000  00034bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000978  00000000  00000000  00040138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__dtors_end>
       4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
       8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
       c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      10:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      14:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      18:	0c 94 0d 2a 	jmp	0x541a	; 0x541a <__vector_6>
      1c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      20:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      24:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      28:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      2c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      30:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__vector_12>
      34:	0c 94 ec 44 	jmp	0x89d8	; 0x89d8 <__vector_13>
      38:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      3c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      40:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      44:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      48:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      4c:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_19>
      50:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_20>
      54:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      58:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      5c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      60:	0c 94 7a 29 	jmp	0x52f4	; 0x52f4 <__vector_24>
      64:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      68:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      6c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      70:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      74:	0c 94 e2 29 	jmp	0x53c4	; 0x53c4 <__vector_29>
      78:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_30>
      7c:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_31>
      80:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_32>
      84:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      88:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      8c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      90:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      94:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      98:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      9c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      a0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      a4:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_41>
      a8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      ac:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      b0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      b4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      b8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      bc:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      c0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      c4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      c8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      cc:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      d0:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      d4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      d8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      dc:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__vector_55>
      e0:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__vector_56>
      e4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__bad_interrupt>
      e8:	9b 23       	and	r25, r27
      ea:	a7 23       	and	r26, r23
      ec:	b6 23       	and	r27, r22
      ee:	c5 23       	and	r28, r21
      f0:	d4 23       	and	r29, r20
      f2:	cd 24       	eor	r12, r13
      f4:	c5 24       	eor	r12, r5
      f6:	05 24       	eor	r0, r5
      f8:	0e 24       	eor	r0, r14
      fa:	1a 24       	eor	r1, r10
      fc:	26 24       	eor	r2, r6
      fe:	32 24       	eor	r3, r2
     100:	65 24       	eor	r6, r5
     102:	6e 24       	eor	r6, r14
     104:	7a 24       	eor	r7, r10
     106:	86 24       	eor	r8, r6
     108:	92 24       	eor	r9, r2
     10a:	9b 31       	cpi	r25, 0x1B	; 27
     10c:	a1 31       	cpi	r26, 0x11	; 17
     10e:	83 31       	cpi	r24, 0x13	; 19
     110:	a1 31       	cpi	r26, 0x11	; 17
     112:	a1 31       	cpi	r26, 0x11	; 17
     114:	a1 31       	cpi	r26, 0x11	; 17
     116:	8c 31       	cpi	r24, 0x1C	; 28
     118:	a1 31       	cpi	r26, 0x11	; 17
     11a:	a1 31       	cpi	r26, 0x11	; 17
     11c:	a1 31       	cpi	r26, 0x11	; 17
     11e:	4a 31       	cpi	r20, 0x1A	; 26
     120:	a1 31       	cpi	r26, 0x11	; 17
     122:	a1 31       	cpi	r26, 0x11	; 17
     124:	a1 31       	cpi	r26, 0x11	; 17
     126:	a1 31       	cpi	r26, 0x11	; 17
     128:	a1 31       	cpi	r26, 0x11	; 17
     12a:	a1 31       	cpi	r26, 0x11	; 17
     12c:	a1 31       	cpi	r26, 0x11	; 17
     12e:	a1 31       	cpi	r26, 0x11	; 17
     130:	a1 31       	cpi	r26, 0x11	; 17
     132:	a1 31       	cpi	r26, 0x11	; 17
     134:	a1 31       	cpi	r26, 0x11	; 17
     136:	a1 31       	cpi	r26, 0x11	; 17
     138:	a1 31       	cpi	r26, 0x11	; 17
     13a:	a1 31       	cpi	r26, 0x11	; 17
     13c:	a1 31       	cpi	r26, 0x11	; 17
     13e:	a1 31       	cpi	r26, 0x11	; 17
     140:	a1 31       	cpi	r26, 0x11	; 17
     142:	a1 31       	cpi	r26, 0x11	; 17
     144:	a1 31       	cpi	r26, 0x11	; 17
     146:	a1 31       	cpi	r26, 0x11	; 17
     148:	60 31       	cpi	r22, 0x10	; 16
     14a:	a1 31       	cpi	r26, 0x11	; 17
     14c:	a1 31       	cpi	r26, 0x11	; 17
     14e:	a1 31       	cpi	r26, 0x11	; 17
     150:	a1 31       	cpi	r26, 0x11	; 17
     152:	a1 31       	cpi	r26, 0x11	; 17
     154:	a1 31       	cpi	r26, 0x11	; 17
     156:	a1 31       	cpi	r26, 0x11	; 17
     158:	a1 31       	cpi	r26, 0x11	; 17
     15a:	77 31       	cpi	r23, 0x17	; 23
     15c:	7d 31       	cpi	r23, 0x1D	; 29
     15e:	95 31       	cpi	r25, 0x15	; 21
     160:	31 31       	cpi	r19, 0x11	; 17
     162:	a1 31       	cpi	r26, 0x11	; 17
     164:	a1 31       	cpi	r26, 0x11	; 17
     166:	a1 31       	cpi	r26, 0x11	; 17
     168:	3a 31       	cpi	r19, 0x1A	; 26
     16a:	a1 31       	cpi	r26, 0x11	; 17
     16c:	a1 31       	cpi	r26, 0x11	; 17
     16e:	a1 31       	cpi	r26, 0x11	; 17
     170:	43 31       	cpi	r20, 0x13	; 19
     172:	e0 39       	cpi	r30, 0x90	; 144
     174:	a4 39       	cpi	r26, 0x94	; 148
     176:	d0 39       	cpi	r29, 0x90	; 144
     178:	e8 39       	cpi	r30, 0x98	; 152
     17a:	d4 39       	cpi	r29, 0x94	; 148
     17c:	e8 39       	cpi	r30, 0x98	; 152
     17e:	b4 39       	cpi	r27, 0x94	; 148
     180:	a0 39       	cpi	r26, 0x90	; 144
     182:	ac 39       	cpi	r26, 0x9C	; 156
     184:	b0 39       	cpi	r27, 0x90	; 144
     186:	e8 39       	cpi	r30, 0x98	; 152
     188:	c4 39       	cpi	r28, 0x94	; 148
     18a:	98 39       	cpi	r25, 0x98	; 152
     18c:	c8 39       	cpi	r28, 0x98	; 152
     18e:	94 39       	cpi	r25, 0x94	; 148
     190:	a8 39       	cpi	r26, 0x98	; 152
     192:	6c 39       	cpi	r22, 0x9C	; 156
     194:	70 39       	cpi	r23, 0x90	; 144
     196:	74 39       	cpi	r23, 0x94	; 148
     198:	78 39       	cpi	r23, 0x98	; 152
     19a:	7c 39       	cpi	r23, 0x9C	; 156
     19c:	80 39       	cpi	r24, 0x90	; 144
     19e:	84 39       	cpi	r24, 0x94	; 148
     1a0:	88 39       	cpi	r24, 0x98	; 152
     1a2:	8c 39       	cpi	r24, 0x9C	; 156
     1a4:	90 39       	cpi	r25, 0x90	; 144
     1a6:	b8 39       	cpi	r27, 0x98	; 152
     1a8:	bc 39       	cpi	r27, 0x9C	; 156
     1aa:	e4 39       	cpi	r30, 0x94	; 148
     1ac:	c0 39       	cpi	r28, 0x90	; 144
     1ae:	e8 39       	cpi	r30, 0x98	; 152
     1b0:	9c 39       	cpi	r25, 0x9C	; 156
     1b2:	d8 39       	cpi	r29, 0x98	; 152
     1b4:	04 39       	cpi	r16, 0x94	; 148
     1b6:	08 39       	cpi	r16, 0x98	; 152
     1b8:	0c 39       	cpi	r16, 0x9C	; 156
     1ba:	10 39       	cpi	r17, 0x90	; 144
     1bc:	14 39       	cpi	r17, 0x94	; 148
     1be:	18 39       	cpi	r17, 0x98	; 152
     1c0:	1c 39       	cpi	r17, 0x9C	; 156
     1c2:	20 39       	cpi	r18, 0x90	; 144
     1c4:	24 39       	cpi	r18, 0x94	; 148
     1c6:	28 39       	cpi	r18, 0x98	; 152
     1c8:	2c 39       	cpi	r18, 0x9C	; 156
     1ca:	30 39       	cpi	r19, 0x90	; 144
     1cc:	34 39       	cpi	r19, 0x94	; 148
     1ce:	38 39       	cpi	r19, 0x98	; 152
     1d0:	3c 39       	cpi	r19, 0x9C	; 156
     1d2:	40 39       	cpi	r20, 0x90	; 144
     1d4:	44 39       	cpi	r20, 0x94	; 148
     1d6:	48 39       	cpi	r20, 0x98	; 152
     1d8:	4c 39       	cpi	r20, 0x9C	; 156
     1da:	50 39       	cpi	r21, 0x90	; 144
     1dc:	54 39       	cpi	r21, 0x94	; 148
     1de:	58 39       	cpi	r21, 0x98	; 152
     1e0:	5c 39       	cpi	r21, 0x9C	; 156
     1e2:	60 39       	cpi	r22, 0x90	; 144
     1e4:	64 39       	cpi	r22, 0x94	; 148
     1e6:	68 39       	cpi	r22, 0x98	; 152
     1e8:	e8 39       	cpi	r30, 0x98	; 152
     1ea:	e8 39       	cpi	r30, 0x98	; 152
     1ec:	e8 39       	cpi	r30, 0x98	; 152
     1ee:	e8 39       	cpi	r30, 0x98	; 152
     1f0:	cc 39       	cpi	r28, 0x9C	; 156
     1f2:	e8 39       	cpi	r30, 0x98	; 152
     1f4:	e8 39       	cpi	r30, 0x98	; 152
     1f6:	e8 39       	cpi	r30, 0x98	; 152
     1f8:	e8 39       	cpi	r30, 0x98	; 152
     1fa:	e8 39       	cpi	r30, 0x98	; 152
     1fc:	e8 39       	cpi	r30, 0x98	; 152
     1fe:	e8 39       	cpi	r30, 0x98	; 152
     200:	e8 39       	cpi	r30, 0x98	; 152
     202:	e8 39       	cpi	r30, 0x98	; 152
     204:	e8 39       	cpi	r30, 0x98	; 152
     206:	e8 39       	cpi	r30, 0x98	; 152
     208:	e8 39       	cpi	r30, 0x98	; 152
     20a:	e8 39       	cpi	r30, 0x98	; 152
     20c:	e8 39       	cpi	r30, 0x98	; 152
     20e:	e8 39       	cpi	r30, 0x98	; 152
     210:	e8 39       	cpi	r30, 0x98	; 152
     212:	e8 39       	cpi	r30, 0x98	; 152
     214:	e8 39       	cpi	r30, 0x98	; 152
     216:	e8 39       	cpi	r30, 0x98	; 152
     218:	e8 39       	cpi	r30, 0x98	; 152
     21a:	e8 39       	cpi	r30, 0x98	; 152
     21c:	e8 39       	cpi	r30, 0x98	; 152
     21e:	e8 39       	cpi	r30, 0x98	; 152
     220:	e8 39       	cpi	r30, 0x98	; 152
     222:	e8 39       	cpi	r30, 0x98	; 152
     224:	e8 39       	cpi	r30, 0x98	; 152
     226:	e8 39       	cpi	r30, 0x98	; 152
     228:	e8 39       	cpi	r30, 0x98	; 152
     22a:	dc 39       	cpi	r29, 0x9C	; 156
     22c:	3e 49       	sbci	r19, 0x9E	; 158
     22e:	48 49       	sbci	r20, 0x98	; 152
     230:	52 49       	sbci	r21, 0x92	; 146
     232:	5c 49       	sbci	r21, 0x9C	; 156
     234:	66 49       	sbci	r22, 0x96	; 150
     236:	70 49       	sbci	r23, 0x90	; 144
     238:	7a 49       	sbci	r23, 0x9A	; 154
     23a:	84 49       	sbci	r24, 0x94	; 148
     23c:	8e 49       	sbci	r24, 0x9E	; 158
     23e:	98 49       	sbci	r25, 0x98	; 152
     240:	a2 49       	sbci	r26, 0x92	; 146
     242:	ac 49       	sbci	r26, 0x9C	; 156
     244:	b6 49       	sbci	r27, 0x96	; 150
     246:	c0 49       	sbci	r28, 0x90	; 144
     248:	ca 49       	sbci	r28, 0x9A	; 154
     24a:	d4 49       	sbci	r29, 0x94	; 148
     24c:	de 49       	sbci	r29, 0x9E	; 158
     24e:	e8 49       	sbci	r30, 0x98	; 152

00000250 <__trampolines_end>:
     250:	4e 41       	sbci	r20, 0x1E	; 30
     252:	4e 49       	Address 0x00000252 is out of bounds.
.word	0xffff	; ????

00000253 <pstr_inity>:
     253:	49 4e 49 54 59                                      INITY

00000258 <pstr_inf>:
     258:	49 4e 46                                            INF

0000025b <pwr_m10>:
     25b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     26b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000273 <pwr_p10>:
     273:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     283:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000028b <strfmonths>:
     28b:	4a 61 6e 75 61 72 79 20 46 65 62 72 75 61 72 79     January February
     29b:	20 4d 61 72 63 68 20 41 70 72 69 6c 20 4d 61 79      March April May
     2ab:	20 4a 75 6e 65 20 4a 75 6c 79 20 41 75 67 75 73      June July Augus
     2bb:	74 20 53 65 70 74 65 6d 62 65 72 20 4f 63 74 6f     t September Octo
     2cb:	62 65 72 20 4e 6f 76 65 6d 62 65 72 20 44 65 63     ber November Dec
     2db:	65 6d 62 65 72 20 00                                ember .

000002e2 <strfwkdays>:
     2e2:	53 75 6e 64 61 79 20 4d 6f 6e 64 61 79 20 54 75     Sunday Monday Tu
     2f2:	65 73 64 61 79 20 57 65 64 6e 65 73 64 61 79 20     esday Wednesday 
     302:	54 68 75 72 73 64 61 79 20 46 72 69 64 61 79 20     Thursday Friday 
     312:	53 61 74 75 72 64 61 79 20 00                       Saturday .

0000031c <ascdays>:
     31c:	53 75 6e 4d 6f 6e 54 75 65 57 65 64 54 68 75 46     SunMonTueWedThuF
     32c:	72 69 53 61 74 00                                   riSat.

00000332 <ascmonths>:
     332:	4a 61 6e 46 65 62 4d 61 72 41 70 72 4d 61 79 4a     JanFebMarAprMayJ
     342:	75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f     unJulAugSepOctNo
     352:	76 44 65 63 00 00                                   vDec..

00000358 <__ctors_start>:
     358:	b8 28       	or	r11, r8
     35a:	aa 29       	or	r26, r10

0000035c <__ctors_end>:
     35c:	bf 28       	or	r11, r15
     35e:	b1 29       	or	r27, r1

00000360 <__dtors_end>:
     360:	11 24       	eor	r1, r1
     362:	1f be       	out	0x3f, r1	; 63
     364:	cf ef       	ldi	r28, 0xFF	; 255
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df e7       	ldi	r29, 0x7F	; 127
     36a:	de bf       	out	0x3e, r29	; 62

0000036c <__do_copy_data>:
     36c:	16 e4       	ldi	r17, 0x46	; 70
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e4       	ldi	r27, 0x40	; 64
     372:	e0 e3       	ldi	r30, 0x30	; 48
     374:	f7 ea       	ldi	r31, 0xA7	; 167
     376:	00 e0       	ldi	r16, 0x00	; 0
     378:	0b bf       	out	0x3b, r16	; 59
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__do_copy_data+0x14>
     37c:	07 90       	elpm	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	aa 39       	cpi	r26, 0x9A	; 154
     382:	b1 07       	cpc	r27, r17
     384:	d9 f7       	brne	.-10     	; 0x37c <__do_copy_data+0x10>

00000386 <__do_clear_bss>:
     386:	2a e4       	ldi	r18, 0x4A	; 74
     388:	aa e9       	ldi	r26, 0x9A	; 154
     38a:	b6 e4       	ldi	r27, 0x46	; 70
     38c:	01 c0       	rjmp	.+2      	; 0x390 <.do_clear_bss_start>

0000038e <.do_clear_bss_loop>:
     38e:	1d 92       	st	X+, r1

00000390 <.do_clear_bss_start>:
     390:	a1 3b       	cpi	r26, 0xB1	; 177
     392:	b2 07       	cpc	r27, r18
     394:	e1 f7       	brne	.-8      	; 0x38e <.do_clear_bss_loop>

00000396 <__do_global_ctors>:
     396:	11 e0       	ldi	r17, 0x01	; 1
     398:	ce ea       	ldi	r28, 0xAE	; 174
     39a:	d1 e0       	ldi	r29, 0x01	; 1
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <__do_global_ctors+0x10>
     39e:	21 97       	sbiw	r28, 0x01	; 1
     3a0:	fe 01       	movw	r30, r28
     3a2:	0e 94 03 4d 	call	0x9a06	; 0x9a06 <__tablejump2__>
     3a6:	cc 3a       	cpi	r28, 0xAC	; 172
     3a8:	d1 07       	cpc	r29, r17
     3aa:	c9 f7       	brne	.-14     	; 0x39e <__do_global_ctors+0x8>
     3ac:	0e 94 8e 11 	call	0x231c	; 0x231c <main>
     3b0:	0c 94 8b 53 	jmp	0xa716	; 0xa716 <__do_global_dtors>

000003b4 <__bad_interrupt>:
     3b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b8 <is_leap_year>:
     3b8:	9c 01       	movw	r18, r24
     3ba:	23 70       	andi	r18, 0x03	; 3
     3bc:	33 27       	eor	r19, r19
     3be:	23 2b       	or	r18, r19
     3c0:	59 f4       	brne	.+22     	; 0x3d8 <is_leap_year+0x20>
     3c2:	64 e6       	ldi	r22, 0x64	; 100
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     3ca:	89 2b       	or	r24, r25
     3cc:	39 f4       	brne	.+14     	; 0x3dc <is_leap_year+0x24>
     3ce:	63 70       	andi	r22, 0x03	; 3
     3d0:	77 27       	eor	r23, r23
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	67 2b       	or	r22, r23
     3d6:	19 f0       	breq	.+6      	; 0x3de <is_leap_year+0x26>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	08 95       	ret
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	08 95       	ret

000003e0 <localtime>:
     3e0:	6d e9       	ldi	r22, 0x9D	; 157
     3e2:	7a e4       	ldi	r23, 0x4A	; 74
     3e4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <localtime_r>
     3e8:	8d e9       	ldi	r24, 0x9D	; 157
     3ea:	9a e4       	ldi	r25, 0x4A	; 74
     3ec:	08 95       	ret

000003ee <localtime_r>:
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
     400:	00 d0       	rcall	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	6c 01       	movw	r12, r24
     408:	7b 01       	movw	r14, r22
     40a:	e0 91 ad 4a 	lds	r30, 0x4AAD	; 0x804aad <__dst_ptr>
     40e:	f0 91 ae 4a 	lds	r31, 0x4AAE	; 0x804aae <__dst_ptr+0x1>
     412:	30 97       	sbiw	r30, 0x00	; 0
     414:	29 f0       	breq	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     416:	69 ea       	ldi	r22, 0xA9	; 169
     418:	7a e4       	ldi	r23, 0x4A	; 74
     41a:	09 95       	icall
     41c:	8c 01       	movw	r16, r24
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     420:	0f ef       	ldi	r16, 0xFF	; 255
     422:	1f ef       	ldi	r17, 0xFF	; 255
     424:	f6 01       	movw	r30, r12
     426:	40 81       	ld	r20, Z
     428:	51 81       	ldd	r21, Z+1	; 0x01
     42a:	62 81       	ldd	r22, Z+2	; 0x02
     42c:	73 81       	ldd	r23, Z+3	; 0x03
     42e:	80 91 a9 4a 	lds	r24, 0x4AA9	; 0x804aa9 <__utc_offset>
     432:	90 91 aa 4a 	lds	r25, 0x4AAA	; 0x804aaa <__utc_offset+0x1>
     436:	a0 91 ab 4a 	lds	r26, 0x4AAB	; 0x804aab <__utc_offset+0x2>
     43a:	b0 91 ac 4a 	lds	r27, 0x4AAC	; 0x804aac <__utc_offset+0x3>
     43e:	84 0f       	add	r24, r20
     440:	95 1f       	adc	r25, r21
     442:	a6 1f       	adc	r26, r22
     444:	b7 1f       	adc	r27, r23
     446:	10 16       	cp	r1, r16
     448:	11 06       	cpc	r1, r17
     44a:	4c f4       	brge	.+18     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     44c:	a8 01       	movw	r20, r16
     44e:	01 2e       	mov	r0, r17
     450:	00 0c       	add	r0, r0
     452:	66 0b       	sbc	r22, r22
     454:	77 0b       	sbc	r23, r23
     456:	84 0f       	add	r24, r20
     458:	95 1f       	adc	r25, r21
     45a:	a6 1f       	adc	r26, r22
     45c:	b7 1f       	adc	r27, r23
     45e:	89 83       	std	Y+1, r24	; 0x01
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	ab 83       	std	Y+3, r26	; 0x03
     464:	bc 83       	std	Y+4, r27	; 0x04
     466:	b7 01       	movw	r22, r14
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <gmtime_r>
     470:	f7 01       	movw	r30, r14
     472:	02 87       	std	Z+10, r16	; 0x0a
     474:	13 87       	std	Z+11, r17	; 0x0b
     476:	24 96       	adiw	r28, 0x04	; 4
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	08 95       	ret

0000048e <month_length>:
     48e:	62 30       	cpi	r22, 0x02	; 2
     490:	21 f4       	brne	.+8      	; 0x49a <month_length+0xc>
     492:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <is_leap_year>
     496:	84 5e       	subi	r24, 0xE4	; 228
     498:	08 95       	ret
     49a:	68 30       	cpi	r22, 0x08	; 8
     49c:	08 f0       	brcs	.+2      	; 0x4a0 <month_length+0x12>
     49e:	6f 5f       	subi	r22, 0xFF	; 255
     4a0:	61 70       	andi	r22, 0x01	; 1
     4a2:	8e e1       	ldi	r24, 0x1E	; 30
     4a4:	86 0f       	add	r24, r22
     4a6:	08 95       	ret

000004a8 <set_system_time>:
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	60 93 99 4a 	sts	0x4A99, r22	; 0x804a99 <__system_time>
     4b0:	70 93 9a 4a 	sts	0x4A9A, r23	; 0x804a9a <__system_time+0x1>
     4b4:	80 93 9b 4a 	sts	0x4A9B, r24	; 0x804a9b <__system_time+0x2>
     4b8:	90 93 9c 4a 	sts	0x4A9C, r25	; 0x804a9c <__system_time+0x3>
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	08 95       	ret

000004c0 <pgm_copystring>:
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	0f 93       	push	r16
     4c8:	6b 01       	movw	r12, r22
     4ca:	e8 2e       	mov	r14, r24
     4cc:	7c 2d       	mov	r23, r12
     4ce:	6d 2d       	mov	r22, r13
     4d0:	5e 2d       	mov	r21, r14
     4d2:	ae 2d       	mov	r26, r14
     4d4:	c6 01       	movw	r24, r12
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	a1 1d       	adc	r26, r1
     4da:	44 23       	and	r20, r20
     4dc:	51 f0       	breq	.+20     	; 0x4f2 <pgm_copystring+0x32>
     4de:	6c 01       	movw	r12, r24
     4e0:	ea 2e       	mov	r14, r26
     4e2:	e7 2f       	mov	r30, r23
     4e4:	f6 2f       	mov	r31, r22
     4e6:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__xload_1>
     4ea:	60 32       	cpi	r22, 0x20	; 32
     4ec:	79 f7       	brne	.-34     	; 0x4cc <pgm_copystring+0xc>
     4ee:	41 50       	subi	r20, 0x01	; 1
     4f0:	ed cf       	rjmp	.-38     	; 0x4cc <pgm_copystring+0xc>
     4f2:	f6 01       	movw	r30, r12
     4f4:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__xload_1>
     4f8:	6c 01       	movw	r12, r24
     4fa:	ea 2e       	mov	r14, r26
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	60 32       	cpi	r22, 0x20	; 32
     500:	39 f4       	brne	.+14     	; 0x510 <pgm_copystring+0x50>
     502:	f9 01       	movw	r30, r18
     504:	10 82       	st	Z, r1
     506:	0f 91       	pop	r16
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	08 95       	ret
     510:	80 17       	cp	r24, r16
     512:	b9 f3       	breq	.-18     	; 0x502 <pgm_copystring+0x42>
     514:	2f 5f       	subi	r18, 0xFF	; 255
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	f9 01       	movw	r30, r18
     51a:	31 97       	sbiw	r30, 0x01	; 1
     51c:	60 83       	st	Z, r22
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	f6 01       	movw	r30, r12
     522:	5e 2d       	mov	r21, r14
     524:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__xload_1>
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	c9 1a       	sub	r12, r25
     52c:	d9 0a       	sbc	r13, r25
     52e:	e9 0a       	sbc	r14, r25
     530:	e6 cf       	rjmp	.-52     	; 0x4fe <pgm_copystring+0x3e>

00000532 <strftime>:
     532:	2f 92       	push	r2
     534:	3f 92       	push	r3
     536:	4f 92       	push	r4
     538:	5f 92       	push	r5
     53a:	6f 92       	push	r6
     53c:	7f 92       	push	r7
     53e:	8f 92       	push	r8
     540:	9f 92       	push	r9
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	a2 97       	sbiw	r28, 0x22	; 34
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	de bf       	out	0x3e, r29	; 62
     560:	2c 01       	movw	r4, r24
     562:	69 a3       	std	Y+33, r22	; 0x21
     564:	7a a3       	std	Y+34, r23	; 0x22
     566:	4a 01       	movw	r8, r20
     568:	79 01       	movw	r14, r18
     56a:	61 2c       	mov	r6, r1
     56c:	71 2c       	mov	r7, r1
     56e:	9e 01       	movw	r18, r28
     570:	2f 5f       	subi	r18, 0xFF	; 255
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	69 01       	movw	r12, r18
     576:	84 e6       	ldi	r24, 0x64	; 100
     578:	28 2e       	mov	r2, r24
     57a:	31 2c       	mov	r3, r1
     57c:	9b e3       	ldi	r25, 0x3B	; 59
     57e:	a9 2e       	mov	r10, r25
     580:	96 e4       	ldi	r25, 0x46	; 70
     582:	b9 2e       	mov	r11, r25
     584:	29 a1       	ldd	r18, Y+33	; 0x21
     586:	3a a1       	ldd	r19, Y+34	; 0x22
     588:	62 16       	cp	r6, r18
     58a:	73 06       	cpc	r7, r19
     58c:	08 f0       	brcs	.+2      	; 0x590 <strftime+0x5e>
     58e:	cd c2       	rjmp	.+1434   	; 0xb2a <strftime+0x5f8>
     590:	d4 01       	movw	r26, r8
     592:	8c 91       	ld	r24, X
     594:	85 32       	cpi	r24, 0x25	; 37
     596:	09 f0       	breq	.+2      	; 0x59a <strftime+0x68>
     598:	bc c2       	rjmp	.+1400   	; 0xb12 <strftime+0x5e0>
     59a:	11 96       	adiw	r26, 0x01	; 1
     59c:	1c 91       	ld	r17, X
     59e:	15 34       	cpi	r17, 0x45	; 69
     5a0:	31 f0       	breq	.+12     	; 0x5ae <strftime+0x7c>
     5a2:	1f 34       	cpi	r17, 0x4F	; 79
     5a4:	21 f0       	breq	.+8      	; 0x5ae <strftime+0x7c>
     5a6:	b2 e0       	ldi	r27, 0x02	; 2
     5a8:	8b 0e       	add	r8, r27
     5aa:	91 1c       	adc	r9, r1
     5ac:	06 c0       	rjmp	.+12     	; 0x5ba <strftime+0x88>
     5ae:	f4 01       	movw	r30, r8
     5b0:	12 81       	ldd	r17, Z+2	; 0x02
     5b2:	94 01       	movw	r18, r8
     5b4:	2d 5f       	subi	r18, 0xFD	; 253
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	49 01       	movw	r8, r18
     5ba:	19 35       	cpi	r17, 0x59	; 89
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <strftime+0x8e>
     5be:	32 c2       	rjmp	.+1124   	; 0xa24 <strftime+0x4f2>
     5c0:	0c f0       	brlt	.+2      	; 0x5c4 <strftime+0x92>
     5c2:	60 c0       	rjmp	.+192    	; 0x684 <strftime+0x152>
     5c4:	19 34       	cpi	r17, 0x49	; 73
     5c6:	09 f4       	brne	.+2      	; 0x5ca <strftime+0x98>
     5c8:	3f c1       	rjmp	.+638    	; 0x848 <strftime+0x316>
     5ca:	44 f5       	brge	.+80     	; 0x61c <strftime+0xea>
     5cc:	13 34       	cpi	r17, 0x43	; 67
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <strftime+0xa0>
     5d0:	e7 c0       	rjmp	.+462    	; 0x7a0 <strftime+0x26e>
     5d2:	54 f4       	brge	.+20     	; 0x5e8 <strftime+0xb6>
     5d4:	11 34       	cpi	r17, 0x41	; 65
     5d6:	09 f4       	brne	.+2      	; 0x5da <strftime+0xa8>
     5d8:	be c0       	rjmp	.+380    	; 0x756 <strftime+0x224>
     5da:	0c f0       	brlt	.+2      	; 0x5de <strftime+0xac>
     5dc:	ca c0       	rjmp	.+404    	; 0x772 <strftime+0x240>
     5de:	15 32       	cpi	r17, 0x25	; 37
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <strftime+0xb2>
     5e2:	74 c2       	rjmp	.+1256   	; 0xacc <strftime+0x59a>
     5e4:	19 83       	std	Y+1, r17	; 0x01
     5e6:	75 c2       	rjmp	.+1258   	; 0xad2 <strftime+0x5a0>
     5e8:	16 34       	cpi	r17, 0x46	; 70
     5ea:	09 f4       	brne	.+2      	; 0x5ee <strftime+0xbc>
     5ec:	ea c0       	rjmp	.+468    	; 0x7c2 <strftime+0x290>
     5ee:	64 f4       	brge	.+24     	; 0x608 <strftime+0xd6>
     5f0:	14 34       	cpi	r17, 0x44	; 68
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <strftime+0xc4>
     5f4:	6b c2       	rjmp	.+1238   	; 0xacc <strftime+0x59a>
     5f6:	f7 01       	movw	r30, r14
     5f8:	86 81       	ldd	r24, Z+6	; 0x06
     5fa:	97 81       	ldd	r25, Z+7	; 0x07
     5fc:	b1 01       	movw	r22, r2
     5fe:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     602:	9f 93       	push	r25
     604:	8f 93       	push	r24
     606:	e7 c1       	rjmp	.+974    	; 0x9d6 <strftime+0x4a4>
     608:	17 34       	cpi	r17, 0x47	; 71
     60a:	09 f4       	brne	.+2      	; 0x60e <strftime+0xdc>
     60c:	f8 c0       	rjmp	.+496    	; 0x7fe <strftime+0x2cc>
     60e:	18 34       	cpi	r17, 0x48	; 72
     610:	09 f0       	breq	.+2      	; 0x614 <strftime+0xe2>
     612:	5c c2       	rjmp	.+1208   	; 0xacc <strftime+0x59a>
     614:	d7 01       	movw	r26, r14
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	8c 91       	ld	r24, X
     61a:	30 c1       	rjmp	.+608    	; 0x87c <strftime+0x34a>
     61c:	14 35       	cpi	r17, 0x54	; 84
     61e:	09 f4       	brne	.+2      	; 0x622 <strftime+0xf0>
     620:	89 c1       	rjmp	.+786    	; 0x934 <strftime+0x402>
     622:	64 f4       	brge	.+24     	; 0x63c <strftime+0x10a>
     624:	12 35       	cpi	r17, 0x52	; 82
     626:	09 f4       	brne	.+2      	; 0x62a <strftime+0xf8>
     628:	6e c1       	rjmp	.+732    	; 0x906 <strftime+0x3d4>
     62a:	0c f0       	brlt	.+2      	; 0x62e <strftime+0xfc>
     62c:	25 c1       	rjmp	.+586    	; 0x878 <strftime+0x346>
     62e:	1d 34       	cpi	r17, 0x4D	; 77
     630:	09 f0       	breq	.+2      	; 0x634 <strftime+0x102>
     632:	4c c2       	rjmp	.+1176   	; 0xacc <strftime+0x59a>
     634:	d7 01       	movw	r26, r14
     636:	11 96       	adiw	r26, 0x01	; 1
     638:	8c 91       	ld	r24, X
     63a:	20 c1       	rjmp	.+576    	; 0x87c <strftime+0x34a>
     63c:	16 35       	cpi	r17, 0x56	; 86
     63e:	09 f4       	brne	.+2      	; 0x642 <strftime+0x110>
     640:	a5 c1       	rjmp	.+842    	; 0x98c <strftime+0x45a>
     642:	0c f4       	brge	.+2      	; 0x646 <strftime+0x114>
     644:	a1 c1       	rjmp	.+834    	; 0x988 <strftime+0x456>
     646:	17 35       	cpi	r17, 0x57	; 87
     648:	09 f4       	brne	.+2      	; 0x64c <strftime+0x11a>
     64a:	b4 c1       	rjmp	.+872    	; 0x9b4 <strftime+0x482>
     64c:	18 35       	cpi	r17, 0x58	; 88
     64e:	09 f0       	breq	.+2      	; 0x652 <strftime+0x120>
     650:	3d c2       	rjmp	.+1146   	; 0xacc <strftime+0x59a>
     652:	f7 01       	movw	r30, r14
     654:	80 81       	ld	r24, Z
     656:	28 2f       	mov	r18, r24
     658:	08 2e       	mov	r0, r24
     65a:	00 0c       	add	r0, r0
     65c:	33 0b       	sbc	r19, r19
     65e:	3f 93       	push	r19
     660:	8f 93       	push	r24
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	28 2f       	mov	r18, r24
     666:	08 2e       	mov	r0, r24
     668:	00 0c       	add	r0, r0
     66a:	33 0b       	sbc	r19, r19
     66c:	3f 93       	push	r19
     66e:	8f 93       	push	r24
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	28 2f       	mov	r18, r24
     674:	08 2e       	mov	r0, r24
     676:	00 0c       	add	r0, r0
     678:	33 0b       	sbc	r19, r19
     67a:	3f 93       	push	r19
     67c:	8f 93       	push	r24
     67e:	80 e8       	ldi	r24, 0x80	; 128
     680:	96 e4       	ldi	r25, 0x46	; 70
     682:	c0 c1       	rjmp	.+896    	; 0xa04 <strftime+0x4d2>
     684:	1d 36       	cpi	r17, 0x6D	; 109
     686:	09 f4       	brne	.+2      	; 0x68a <strftime+0x158>
     688:	f0 c0       	rjmp	.+480    	; 0x86a <strftime+0x338>
     68a:	ac f5       	brge	.+106    	; 0x6f6 <strftime+0x1c4>
     68c:	14 36       	cpi	r17, 0x64	; 100
     68e:	09 f4       	brne	.+2      	; 0x692 <strftime+0x160>
     690:	94 c0       	rjmp	.+296    	; 0x7ba <strftime+0x288>
     692:	74 f4       	brge	.+28     	; 0x6b0 <strftime+0x17e>
     694:	12 36       	cpi	r17, 0x62	; 98
     696:	09 f4       	brne	.+2      	; 0x69a <strftime+0x168>
     698:	66 c0       	rjmp	.+204    	; 0x766 <strftime+0x234>
     69a:	0c f0       	brlt	.+2      	; 0x69e <strftime+0x16c>
     69c:	75 c0       	rjmp	.+234    	; 0x788 <strftime+0x256>
     69e:	11 36       	cpi	r17, 0x61	; 97
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <strftime+0x172>
     6a2:	14 c2       	rjmp	.+1064   	; 0xacc <strftime+0x59a>
     6a4:	03 e0       	ldi	r16, 0x03	; 3
     6a6:	96 01       	movw	r18, r12
     6a8:	d7 01       	movw	r26, r14
     6aa:	14 96       	adiw	r26, 0x04	; 4
     6ac:	4c 91       	ld	r20, X
     6ae:	57 c0       	rjmp	.+174    	; 0x75e <strftime+0x22c>
     6b0:	17 36       	cpi	r17, 0x67	; 103
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <strftime+0x184>
     6b4:	a4 c0       	rjmp	.+328    	; 0x7fe <strftime+0x2cc>
     6b6:	74 f4       	brge	.+28     	; 0x6d4 <strftime+0x1a2>
     6b8:	15 36       	cpi	r17, 0x65	; 101
     6ba:	09 f0       	breq	.+2      	; 0x6be <strftime+0x18c>
     6bc:	07 c2       	rjmp	.+1038   	; 0xacc <strftime+0x59a>
     6be:	f7 01       	movw	r30, r14
     6c0:	83 81       	ldd	r24, Z+3	; 0x03
     6c2:	28 2f       	mov	r18, r24
     6c4:	08 2e       	mov	r0, r24
     6c6:	00 0c       	add	r0, r0
     6c8:	33 0b       	sbc	r19, r19
     6ca:	3f 93       	push	r19
     6cc:	8f 93       	push	r24
     6ce:	80 e4       	ldi	r24, 0x40	; 64
     6d0:	96 e4       	ldi	r25, 0x46	; 70
     6d2:	c8 c0       	rjmp	.+400    	; 0x864 <strftime+0x332>
     6d4:	18 36       	cpi	r17, 0x68	; 104
     6d6:	09 f4       	brne	.+2      	; 0x6da <strftime+0x1a8>
     6d8:	46 c0       	rjmp	.+140    	; 0x766 <strftime+0x234>
     6da:	1a 36       	cpi	r17, 0x6A	; 106
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <strftime+0x1ae>
     6de:	f6 c1       	rjmp	.+1004   	; 0xacc <strftime+0x59a>
     6e0:	d7 01       	movw	r26, r14
     6e2:	18 96       	adiw	r26, 0x08	; 8
     6e4:	8d 91       	ld	r24, X+
     6e6:	9c 91       	ld	r25, X
     6e8:	19 97       	sbiw	r26, 0x09	; 9
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	86 e5       	ldi	r24, 0x56	; 86
     6f2:	96 e4       	ldi	r25, 0x46	; 70
     6f4:	b7 c0       	rjmp	.+366    	; 0x864 <strftime+0x332>
     6f6:	15 37       	cpi	r17, 0x75	; 117
     6f8:	09 f4       	brne	.+2      	; 0x6fc <strftime+0x1ca>
     6fa:	35 c1       	rjmp	.+618    	; 0x966 <strftime+0x434>
     6fc:	b4 f4       	brge	.+44     	; 0x72a <strftime+0x1f8>
     6fe:	10 37       	cpi	r17, 0x70	; 112
     700:	09 f4       	brne	.+2      	; 0x704 <strftime+0x1d2>
     702:	c2 c0       	rjmp	.+388    	; 0x888 <strftime+0x356>
     704:	34 f4       	brge	.+12     	; 0x712 <strftime+0x1e0>
     706:	1e 36       	cpi	r17, 0x6E	; 110
     708:	09 f0       	breq	.+2      	; 0x70c <strftime+0x1da>
     70a:	e0 c1       	rjmp	.+960    	; 0xacc <strftime+0x59a>
     70c:	8a e0       	ldi	r24, 0x0A	; 10
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	e0 c1       	rjmp	.+960    	; 0xad2 <strftime+0x5a0>
     712:	12 37       	cpi	r17, 0x72	; 114
     714:	09 f4       	brne	.+2      	; 0x718 <strftime+0x1e6>
     716:	c6 c0       	rjmp	.+396    	; 0x8a4 <strftime+0x372>
     718:	14 37       	cpi	r17, 0x74	; 116
     71a:	09 f0       	breq	.+2      	; 0x71e <strftime+0x1ec>
     71c:	d7 c1       	rjmp	.+942    	; 0xacc <strftime+0x59a>
     71e:	6c e6       	ldi	r22, 0x6C	; 108
     720:	76 e4       	ldi	r23, 0x46	; 70
     722:	c6 01       	movw	r24, r12
     724:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <strcpy>
     728:	d4 c1       	rjmp	.+936    	; 0xad2 <strftime+0x5a0>
     72a:	18 37       	cpi	r17, 0x78	; 120
     72c:	09 f4       	brne	.+2      	; 0x730 <strftime+0x1fe>
     72e:	48 c1       	rjmp	.+656    	; 0x9c0 <strftime+0x48e>
     730:	5c f4       	brge	.+22     	; 0x748 <strftime+0x216>
     732:	17 37       	cpi	r17, 0x77	; 119
     734:	09 f0       	breq	.+2      	; 0x738 <strftime+0x206>
     736:	ca c1       	rjmp	.+916    	; 0xacc <strftime+0x59a>
     738:	f7 01       	movw	r30, r14
     73a:	84 81       	ldd	r24, Z+4	; 0x04
     73c:	28 2f       	mov	r18, r24
     73e:	08 2e       	mov	r0, r24
     740:	00 0c       	add	r0, r0
     742:	33 0b       	sbc	r19, r19
     744:	3f 93       	push	r19
     746:	74 c1       	rjmp	.+744    	; 0xa30 <strftime+0x4fe>
     748:	19 37       	cpi	r17, 0x79	; 121
     74a:	09 f4       	brne	.+2      	; 0x74e <strftime+0x21c>
     74c:	5e c1       	rjmp	.+700    	; 0xa0a <strftime+0x4d8>
     74e:	1a 37       	cpi	r17, 0x7A	; 122
     750:	09 f4       	brne	.+2      	; 0x754 <strftime+0x222>
     752:	7e c1       	rjmp	.+764    	; 0xa50 <strftime+0x51e>
     754:	bb c1       	rjmp	.+886    	; 0xacc <strftime+0x59a>
     756:	0f ef       	ldi	r16, 0xFF	; 255
     758:	96 01       	movw	r18, r12
     75a:	f7 01       	movw	r30, r14
     75c:	44 81       	ldd	r20, Z+4	; 0x04
     75e:	62 ee       	ldi	r22, 0xE2	; 226
     760:	72 e0       	ldi	r23, 0x02	; 2
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0d c0       	rjmp	.+26     	; 0x780 <strftime+0x24e>
     766:	03 e0       	ldi	r16, 0x03	; 3
     768:	96 01       	movw	r18, r12
     76a:	d7 01       	movw	r26, r14
     76c:	15 96       	adiw	r26, 0x05	; 5
     76e:	4c 91       	ld	r20, X
     770:	04 c0       	rjmp	.+8      	; 0x77a <strftime+0x248>
     772:	0f ef       	ldi	r16, 0xFF	; 255
     774:	96 01       	movw	r18, r12
     776:	f7 01       	movw	r30, r14
     778:	45 81       	ldd	r20, Z+5	; 0x05
     77a:	6b e8       	ldi	r22, 0x8B	; 139
     77c:	72 e0       	ldi	r23, 0x02	; 2
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 60 02 	call	0x4c0	; 0x4c0 <pgm_copystring>
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a7 c1       	rjmp	.+846    	; 0xad6 <strftime+0x5a4>
     788:	b6 01       	movw	r22, r12
     78a:	c7 01       	movw	r24, r14
     78c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <asctime_r>
     790:	f6 01       	movw	r30, r12
     792:	cf 01       	movw	r24, r30
     794:	8c 19       	sub	r24, r12
     796:	9d 09       	sbc	r25, r13
     798:	21 91       	ld	r18, Z+
     79a:	21 11       	cpse	r18, r1
     79c:	fa cf       	rjmp	.-12     	; 0x792 <strftime+0x260>
     79e:	9b c1       	rjmp	.+822    	; 0xad6 <strftime+0x5a4>
     7a0:	d7 01       	movw	r26, r14
     7a2:	16 96       	adiw	r26, 0x06	; 6
     7a4:	8d 91       	ld	r24, X+
     7a6:	9c 91       	ld	r25, X
     7a8:	17 97       	sbiw	r26, 0x07	; 7
     7aa:	84 59       	subi	r24, 0x94	; 148
     7ac:	98 4f       	sbci	r25, 0xF8	; 248
     7ae:	b1 01       	movw	r22, r2
     7b0:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     7b4:	7f 93       	push	r23
     7b6:	6f 93       	push	r22
     7b8:	3b c0       	rjmp	.+118    	; 0x830 <strftime+0x2fe>
     7ba:	d7 01       	movw	r26, r14
     7bc:	13 96       	adiw	r26, 0x03	; 3
     7be:	8c 91       	ld	r24, X
     7c0:	5d c0       	rjmp	.+186    	; 0x87c <strftime+0x34a>
     7c2:	d7 01       	movw	r26, r14
     7c4:	13 96       	adiw	r26, 0x03	; 3
     7c6:	8c 91       	ld	r24, X
     7c8:	13 97       	sbiw	r26, 0x03	; 3
     7ca:	28 2f       	mov	r18, r24
     7cc:	08 2e       	mov	r0, r24
     7ce:	00 0c       	add	r0, r0
     7d0:	33 0b       	sbc	r19, r19
     7d2:	3f 93       	push	r19
     7d4:	8f 93       	push	r24
     7d6:	15 96       	adiw	r26, 0x05	; 5
     7d8:	8c 91       	ld	r24, X
     7da:	15 97       	sbiw	r26, 0x05	; 5
     7dc:	08 2e       	mov	r0, r24
     7de:	00 0c       	add	r0, r0
     7e0:	99 0b       	sbc	r25, r25
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	9f 93       	push	r25
     7e6:	8f 93       	push	r24
     7e8:	16 96       	adiw	r26, 0x06	; 6
     7ea:	8d 91       	ld	r24, X+
     7ec:	9c 91       	ld	r25, X
     7ee:	17 97       	sbiw	r26, 0x07	; 7
     7f0:	84 59       	subi	r24, 0x94	; 148
     7f2:	98 4f       	sbci	r25, 0xF8	; 248
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	84 e4       	ldi	r24, 0x44	; 68
     7fa:	96 e4       	ldi	r25, 0x46	; 70
     7fc:	03 c1       	rjmp	.+518    	; 0xa04 <strftime+0x4d2>
     7fe:	d7 01       	movw	r26, r14
     800:	18 96       	adiw	r26, 0x08	; 8
     802:	6d 91       	ld	r22, X+
     804:	7c 91       	ld	r23, X
     806:	19 97       	sbiw	r26, 0x09	; 9
     808:	16 96       	adiw	r26, 0x06	; 6
     80a:	8d 91       	ld	r24, X+
     80c:	9c 91       	ld	r25, X
     80e:	17 97       	sbiw	r26, 0x07	; 7
     810:	ae 01       	movw	r20, r28
     812:	45 5e       	subi	r20, 0xE5	; 229
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	84 59       	subi	r24, 0x94	; 148
     818:	98 4f       	sbci	r25, 0xF8	; 248
     81a:	0e 94 55 07 	call	0xeaa	; 0xeaa <iso_week_date_r>
     81e:	17 36       	cpi	r17, 0x67	; 103
     820:	51 f4       	brne	.+20     	; 0x836 <strftime+0x304>
     822:	8b 8d       	ldd	r24, Y+27	; 0x1b
     824:	9c 8d       	ldd	r25, Y+28	; 0x1c
     826:	b1 01       	movw	r22, r2
     828:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	ec e4       	ldi	r30, 0x4C	; 76
     832:	f6 e4       	ldi	r31, 0x46	; 70
     834:	a6 c0       	rjmp	.+332    	; 0x982 <strftime+0x450>
     836:	8c 8d       	ldd	r24, Y+28	; 0x1c
     838:	8f 93       	push	r24
     83a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     83c:	8f 93       	push	r24
     83e:	41 e5       	ldi	r20, 0x51	; 81
     840:	56 e4       	ldi	r21, 0x46	; 70
     842:	5f 93       	push	r21
     844:	4f 93       	push	r20
     846:	f9 c0       	rjmp	.+498    	; 0xa3a <strftime+0x508>
     848:	f7 01       	movw	r30, r14
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	6c e0       	ldi	r22, 0x0C	; 12
     84e:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <__divmodqi4>
     852:	99 23       	and	r25, r25
     854:	21 f0       	breq	.+8      	; 0x85e <strftime+0x32c>
     856:	89 2f       	mov	r24, r25
     858:	99 0f       	add	r25, r25
     85a:	99 0b       	sbc	r25, r25
     85c:	de c0       	rjmp	.+444    	; 0xa1a <strftime+0x4e8>
     85e:	8c e0       	ldi	r24, 0x0C	; 12
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	db c0       	rjmp	.+438    	; 0xa1a <strftime+0x4e8>
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	e8 c0       	rjmp	.+464    	; 0xa3a <strftime+0x508>
     86a:	f7 01       	movw	r30, r14
     86c:	85 81       	ldd	r24, Z+5	; 0x05
     86e:	08 2e       	mov	r0, r24
     870:	00 0c       	add	r0, r0
     872:	99 0b       	sbc	r25, r25
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	d1 c0       	rjmp	.+418    	; 0xa1a <strftime+0x4e8>
     878:	d7 01       	movw	r26, r14
     87a:	8c 91       	ld	r24, X
     87c:	28 2f       	mov	r18, r24
     87e:	08 2e       	mov	r0, r24
     880:	00 0c       	add	r0, r0
     882:	33 0b       	sbc	r19, r19
     884:	3f 93       	push	r19
     886:	ca c0       	rjmp	.+404    	; 0xa1c <strftime+0x4ea>
     888:	81 e4       	ldi	r24, 0x41	; 65
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	f7 01       	movw	r30, r14
     88e:	82 81       	ldd	r24, Z+2	; 0x02
     890:	8c 30       	cpi	r24, 0x0C	; 12
     892:	14 f0       	brlt	.+4      	; 0x898 <strftime+0x366>
     894:	80 e5       	ldi	r24, 0x50	; 80
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	8d e4       	ldi	r24, 0x4D	; 77
     89a:	8a 83       	std	Y+2, r24	; 0x02
     89c:	1b 82       	std	Y+3, r1	; 0x03
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	19 c1       	rjmp	.+562    	; 0xad6 <strftime+0x5a4>
     8a4:	d7 01       	movw	r26, r14
     8a6:	12 96       	adiw	r26, 0x02	; 2
     8a8:	8c 91       	ld	r24, X
     8aa:	6c e0       	ldi	r22, 0x0C	; 12
     8ac:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <__divmodqi4>
     8b0:	99 23       	and	r25, r25
     8b2:	21 f0       	breq	.+8      	; 0x8bc <strftime+0x38a>
     8b4:	89 2f       	mov	r24, r25
     8b6:	99 0f       	add	r25, r25
     8b8:	99 0b       	sbc	r25, r25
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <strftime+0x38e>
     8bc:	8c e0       	ldi	r24, 0x0C	; 12
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	f7 01       	movw	r30, r14
     8c2:	20 81       	ld	r18, Z
     8c4:	42 2f       	mov	r20, r18
     8c6:	02 2e       	mov	r0, r18
     8c8:	00 0c       	add	r0, r0
     8ca:	55 0b       	sbc	r21, r21
     8cc:	5f 93       	push	r21
     8ce:	2f 93       	push	r18
     8d0:	21 81       	ldd	r18, Z+1	; 0x01
     8d2:	42 2f       	mov	r20, r18
     8d4:	02 2e       	mov	r0, r18
     8d6:	00 0c       	add	r0, r0
     8d8:	55 0b       	sbc	r21, r21
     8da:	5f 93       	push	r21
     8dc:	2f 93       	push	r18
     8de:	9f 93       	push	r25
     8e0:	8f 93       	push	r24
     8e2:	2b e5       	ldi	r18, 0x5B	; 91
     8e4:	36 e4       	ldi	r19, 0x46	; 70
     8e6:	3f 93       	push	r19
     8e8:	2f 93       	push	r18
     8ea:	df 92       	push	r13
     8ec:	cf 92       	push	r12
     8ee:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	f7 01       	movw	r30, r14
     8f8:	22 81       	ldd	r18, Z+2	; 0x02
     8fa:	2c 30       	cpi	r18, 0x0C	; 12
     8fc:	0c f4       	brge	.+2      	; 0x900 <strftime+0x3ce>
     8fe:	eb c0       	rjmp	.+470    	; 0xad6 <strftime+0x5a4>
     900:	20 e5       	ldi	r18, 0x50	; 80
     902:	2b 87       	std	Y+11, r18	; 0x0b
     904:	e8 c0       	rjmp	.+464    	; 0xad6 <strftime+0x5a4>
     906:	d7 01       	movw	r26, r14
     908:	11 96       	adiw	r26, 0x01	; 1
     90a:	8c 91       	ld	r24, X
     90c:	11 97       	sbiw	r26, 0x01	; 1
     90e:	28 2f       	mov	r18, r24
     910:	08 2e       	mov	r0, r24
     912:	00 0c       	add	r0, r0
     914:	33 0b       	sbc	r19, r19
     916:	3f 93       	push	r19
     918:	8f 93       	push	r24
     91a:	12 96       	adiw	r26, 0x02	; 2
     91c:	8c 91       	ld	r24, X
     91e:	28 2f       	mov	r18, r24
     920:	08 2e       	mov	r0, r24
     922:	00 0c       	add	r0, r0
     924:	33 0b       	sbc	r19, r19
     926:	3f 93       	push	r19
     928:	8f 93       	push	r24
     92a:	83 e7       	ldi	r24, 0x73	; 115
     92c:	96 e4       	ldi	r25, 0x46	; 70
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	c5 c0       	rjmp	.+394    	; 0xabe <strftime+0x58c>
     934:	f7 01       	movw	r30, r14
     936:	80 81       	ld	r24, Z
     938:	28 2f       	mov	r18, r24
     93a:	08 2e       	mov	r0, r24
     93c:	00 0c       	add	r0, r0
     93e:	33 0b       	sbc	r19, r19
     940:	3f 93       	push	r19
     942:	8f 93       	push	r24
     944:	81 81       	ldd	r24, Z+1	; 0x01
     946:	28 2f       	mov	r18, r24
     948:	08 2e       	mov	r0, r24
     94a:	00 0c       	add	r0, r0
     94c:	33 0b       	sbc	r19, r19
     94e:	3f 93       	push	r19
     950:	8f 93       	push	r24
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	28 2f       	mov	r18, r24
     956:	08 2e       	mov	r0, r24
     958:	00 0c       	add	r0, r0
     95a:	33 0b       	sbc	r19, r19
     95c:	3f 93       	push	r19
     95e:	8f 93       	push	r24
     960:	8e e6       	ldi	r24, 0x6E	; 110
     962:	96 e4       	ldi	r25, 0x46	; 70
     964:	4f c0       	rjmp	.+158    	; 0xa04 <strftime+0x4d2>
     966:	d7 01       	movw	r26, r14
     968:	14 96       	adiw	r26, 0x04	; 4
     96a:	8c 91       	ld	r24, X
     96c:	08 2e       	mov	r0, r24
     96e:	00 0c       	add	r0, r0
     970:	99 0b       	sbc	r25, r25
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	11 f4       	brne	.+4      	; 0x97a <strftime+0x448>
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	ed e7       	ldi	r30, 0x7D	; 125
     980:	f6 e4       	ldi	r31, 0x46	; 70
     982:	ff 93       	push	r31
     984:	ef 93       	push	r30
     986:	59 c0       	rjmp	.+178    	; 0xa3a <strftime+0x508>
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	15 c0       	rjmp	.+42     	; 0x9b6 <strftime+0x484>
     98c:	d7 01       	movw	r26, r14
     98e:	18 96       	adiw	r26, 0x08	; 8
     990:	6d 91       	ld	r22, X+
     992:	7c 91       	ld	r23, X
     994:	19 97       	sbiw	r26, 0x09	; 9
     996:	16 96       	adiw	r26, 0x06	; 6
     998:	8d 91       	ld	r24, X+
     99a:	9c 91       	ld	r25, X
     99c:	17 97       	sbiw	r26, 0x07	; 7
     99e:	ae 01       	movw	r20, r28
     9a0:	45 5e       	subi	r20, 0xE5	; 229
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	84 59       	subi	r24, 0x94	; 148
     9a6:	98 4f       	sbci	r25, 0xF8	; 248
     9a8:	0e 94 55 07 	call	0xeaa	; 0xeaa <iso_week_date_r>
     9ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9ae:	8f 93       	push	r24
     9b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9b2:	34 c0       	rjmp	.+104    	; 0xa1c <strftime+0x4ea>
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	c7 01       	movw	r24, r14
     9b8:	0e 94 c1 05 	call	0xb82	; 0xb82 <week_of_year>
     9bc:	1f 92       	push	r1
     9be:	2e c0       	rjmp	.+92     	; 0xa1c <strftime+0x4ea>
     9c0:	d7 01       	movw	r26, r14
     9c2:	16 96       	adiw	r26, 0x06	; 6
     9c4:	8d 91       	ld	r24, X+
     9c6:	9c 91       	ld	r25, X
     9c8:	17 97       	sbiw	r26, 0x07	; 7
     9ca:	b1 01       	movw	r22, r2
     9cc:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	f7 01       	movw	r30, r14
     9d6:	83 81       	ldd	r24, Z+3	; 0x03
     9d8:	28 2f       	mov	r18, r24
     9da:	08 2e       	mov	r0, r24
     9dc:	00 0c       	add	r0, r0
     9de:	33 0b       	sbc	r19, r19
     9e0:	3f 93       	push	r19
     9e2:	8f 93       	push	r24
     9e4:	85 81       	ldd	r24, Z+5	; 0x05
     9e6:	08 2e       	mov	r0, r24
     9e8:	00 0c       	add	r0, r0
     9ea:	99 0b       	sbc	r25, r25
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	9f 93       	push	r25
     9f0:	8f 93       	push	r24
     9f2:	21 e3       	ldi	r18, 0x31	; 49
     9f4:	36 e4       	ldi	r19, 0x46	; 70
     9f6:	3f 93       	push	r19
     9f8:	2f 93       	push	r18
     9fa:	df 92       	push	r13
     9fc:	cf 92       	push	r12
     9fe:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
     a02:	61 c0       	rjmp	.+194    	; 0xac6 <strftime+0x594>
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	f8 cf       	rjmp	.-16     	; 0x9fa <strftime+0x4c8>
     a0a:	d7 01       	movw	r26, r14
     a0c:	16 96       	adiw	r26, 0x06	; 6
     a0e:	8d 91       	ld	r24, X+
     a10:	9c 91       	ld	r25, X
     a12:	17 97       	sbiw	r26, 0x07	; 7
     a14:	b1 01       	movw	r22, r2
     a16:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	bf 92       	push	r11
     a20:	af 92       	push	r10
     a22:	0b c0       	rjmp	.+22     	; 0xa3a <strftime+0x508>
     a24:	f7 01       	movw	r30, r14
     a26:	86 81       	ldd	r24, Z+6	; 0x06
     a28:	97 81       	ldd	r25, Z+7	; 0x07
     a2a:	84 59       	subi	r24, 0x94	; 148
     a2c:	98 4f       	sbci	r25, 0xF8	; 248
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	26 ec       	ldi	r18, 0xC6	; 198
     a34:	34 e4       	ldi	r19, 0x44	; 68
     a36:	3f 93       	push	r19
     a38:	2f 93       	push	r18
     a3a:	df 92       	push	r13
     a3c:	cf 92       	push	r12
     a3e:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	43 c0       	rjmp	.+134    	; 0xad6 <strftime+0x5a4>
     a50:	60 91 a9 4a 	lds	r22, 0x4AA9	; 0x804aa9 <__utc_offset>
     a54:	70 91 aa 4a 	lds	r23, 0x4AAA	; 0x804aaa <__utc_offset+0x1>
     a58:	80 91 ab 4a 	lds	r24, 0x4AAB	; 0x804aab <__utc_offset+0x2>
     a5c:	90 91 ac 4a 	lds	r25, 0x4AAC	; 0x804aac <__utc_offset+0x3>
     a60:	2c e3       	ldi	r18, 0x3C	; 60
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	0e 94 e4 4c 	call	0x99c8	; 0x99c8 <__divmodsi4>
     a6c:	89 01       	movw	r16, r18
     a6e:	9a 01       	movw	r18, r20
     a70:	f8 01       	movw	r30, r16
     a72:	d7 01       	movw	r26, r14
     a74:	1a 96       	adiw	r26, 0x0a	; 10
     a76:	8d 91       	ld	r24, X+
     a78:	9c 91       	ld	r25, X
     a7a:	1b 97       	sbiw	r26, 0x0b	; 11
     a7c:	6c e3       	ldi	r22, 0x3C	; 60
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     a84:	16 16       	cp	r1, r22
     a86:	17 06       	cpc	r1, r23
     a88:	1c f4       	brge	.+6      	; 0xa90 <strftime+0x55e>
     a8a:	fb 01       	movw	r30, r22
     a8c:	e0 0f       	add	r30, r16
     a8e:	f1 1f       	adc	r31, r17
     a90:	cf 01       	movw	r24, r30
     a92:	6c e3       	ldi	r22, 0x3C	; 60
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     a9a:	97 ff       	sbrs	r25, 7
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <strftime+0x572>
     a9e:	91 95       	neg	r25
     aa0:	81 95       	neg	r24
     aa2:	91 09       	sbc	r25, r1
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	cf 01       	movw	r24, r30
     aaa:	6c e3       	ldi	r22, 0x3C	; 60
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     ab2:	7f 93       	push	r23
     ab4:	6f 93       	push	r22
     ab6:	ef e8       	ldi	r30, 0x8F	; 143
     ab8:	f6 e4       	ldi	r31, 0x46	; 70
     aba:	ff 93       	push	r31
     abc:	ef 93       	push	r30
     abe:	df 92       	push	r13
     ac0:	cf 92       	push	r12
     ac2:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <strftime+0x5a4>
     acc:	8f e3       	ldi	r24, 0x3F	; 63
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	1a 82       	std	Y+2, r1	; 0x02
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	93 01       	movw	r18, r6
     ad8:	28 0f       	add	r18, r24
     ada:	39 1f       	adc	r19, r25
     adc:	a9 a1       	ldd	r26, Y+33	; 0x21
     ade:	ba a1       	ldd	r27, Y+34	; 0x22
     ae0:	2a 17       	cp	r18, r26
     ae2:	3b 07       	cpc	r19, r27
     ae4:	98 f4       	brcc	.+38     	; 0xb0c <strftime+0x5da>
     ae6:	d2 01       	movw	r26, r4
     ae8:	f6 01       	movw	r30, r12
     aea:	af 01       	movw	r20, r30
     aec:	4c 19       	sub	r20, r12
     aee:	5d 09       	sbc	r21, r13
     af0:	48 17       	cp	r20, r24
     af2:	59 07       	cpc	r21, r25
     af4:	1c f4       	brge	.+6      	; 0xafc <strftime+0x5ca>
     af6:	41 91       	ld	r20, Z+
     af8:	4d 93       	st	X+, r20
     afa:	f7 cf       	rjmp	.-18     	; 0xaea <strftime+0x5b8>
     afc:	97 ff       	sbrs	r25, 7
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <strftime+0x5d2>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	48 0e       	add	r4, r24
     b06:	59 1e       	adc	r5, r25
     b08:	39 01       	movw	r6, r18
     b0a:	3c cd       	rjmp	.-1416   	; 0x584 <strftime+0x52>
     b0c:	f2 01       	movw	r30, r4
     b0e:	10 82       	st	Z, r1
     b10:	0e c0       	rjmp	.+28     	; 0xb2e <strftime+0x5fc>
     b12:	d2 01       	movw	r26, r4
     b14:	8d 93       	st	X+, r24
     b16:	2d 01       	movw	r4, r26
     b18:	bf ef       	ldi	r27, 0xFF	; 255
     b1a:	6b 1a       	sub	r6, r27
     b1c:	7b 0a       	sbc	r7, r27
     b1e:	88 23       	and	r24, r24
     b20:	31 f0       	breq	.+12     	; 0xb2e <strftime+0x5fc>
     b22:	ef ef       	ldi	r30, 0xFF	; 255
     b24:	8e 1a       	sub	r8, r30
     b26:	9e 0a       	sbc	r9, r30
     b28:	2d cd       	rjmp	.-1446   	; 0x584 <strftime+0x52>
     b2a:	d2 01       	movw	r26, r4
     b2c:	1c 92       	st	X, r1
     b2e:	c3 01       	movw	r24, r6
     b30:	a2 96       	adiw	r28, 0x22	; 34
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	bf 90       	pop	r11
     b48:	af 90       	pop	r10
     b4a:	9f 90       	pop	r9
     b4c:	8f 90       	pop	r8
     b4e:	7f 90       	pop	r7
     b50:	6f 90       	pop	r6
     b52:	5f 90       	pop	r5
     b54:	4f 90       	pop	r4
     b56:	3f 90       	pop	r3
     b58:	2f 90       	pop	r2
     b5a:	08 95       	ret

00000b5c <time>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	60 91 99 4a 	lds	r22, 0x4A99	; 0x804a99 <__system_time>
     b66:	70 91 9a 4a 	lds	r23, 0x4A9A	; 0x804a9a <__system_time+0x1>
     b6a:	80 91 9b 4a 	lds	r24, 0x4A9B	; 0x804a9b <__system_time+0x2>
     b6e:	90 91 9c 4a 	lds	r25, 0x4A9C	; 0x804a9c <__system_time+0x3>
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	30 97       	sbiw	r30, 0x00	; 0
     b76:	21 f0       	breq	.+8      	; 0xb80 <time+0x24>
     b78:	60 83       	st	Z, r22
     b7a:	71 83       	std	Z+1, r23	; 0x01
     b7c:	82 83       	std	Z+2, r24	; 0x02
     b7e:	93 83       	std	Z+3, r25	; 0x03
     b80:	08 95       	ret

00000b82 <week_of_year>:
     b82:	fc 01       	movw	r30, r24
     b84:	20 85       	ldd	r18, Z+8	; 0x08
     b86:	31 85       	ldd	r19, Z+9	; 0x09
     b88:	c9 01       	movw	r24, r18
     b8a:	07 96       	adiw	r24, 0x07	; 7
     b8c:	44 81       	ldd	r20, Z+4	; 0x04
     b8e:	84 1b       	sub	r24, r20
     b90:	91 09       	sbc	r25, r1
     b92:	47 fd       	sbrc	r20, 7
     b94:	93 95       	inc	r25
     b96:	86 0f       	add	r24, r22
     b98:	91 1d       	adc	r25, r1
     b9a:	e7 e0       	ldi	r30, 0x07	; 7
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	bf 01       	movw	r22, r30
     ba0:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     ba4:	a9 01       	movw	r20, r18
     ba6:	48 1b       	sub	r20, r24
     ba8:	59 0b       	sbc	r21, r25
     baa:	ca 01       	movw	r24, r20
     bac:	57 fd       	sbrc	r21, 7
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <week_of_year+0x3a>
     bb0:	bf 01       	movw	r22, r30
     bb2:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	86 0f       	add	r24, r22
     bba:	08 95       	ret
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	08 95       	ret

00000bc0 <system_tick>:
     bc0:	8f 93       	push	r24
     bc2:	8f b7       	in	r24, 0x3f	; 63
     bc4:	8f 93       	push	r24
     bc6:	f8 94       	cli
     bc8:	80 91 99 4a 	lds	r24, 0x4A99	; 0x804a99 <__system_time>
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 99 4a 	sts	0x4A99, r24	; 0x804a99 <__system_time>
     bd2:	80 91 9a 4a 	lds	r24, 0x4A9A	; 0x804a9a <__system_time+0x1>
     bd6:	8f 4f       	sbci	r24, 0xFF	; 255
     bd8:	80 93 9a 4a 	sts	0x4A9A, r24	; 0x804a9a <__system_time+0x1>
     bdc:	80 91 9b 4a 	lds	r24, 0x4A9B	; 0x804a9b <__system_time+0x2>
     be0:	8f 4f       	sbci	r24, 0xFF	; 255
     be2:	80 93 9b 4a 	sts	0x4A9B, r24	; 0x804a9b <__system_time+0x2>
     be6:	80 91 9c 4a 	lds	r24, 0x4A9C	; 0x804a9c <__system_time+0x3>
     bea:	8f 4f       	sbci	r24, 0xFF	; 255
     bec:	80 93 9c 4a 	sts	0x4A9C, r24	; 0x804a9c <__system_time+0x3>
     bf0:	8f 91       	pop	r24
     bf2:	8f bf       	out	0x3f, r24	; 63
     bf4:	8f 91       	pop	r24
     bf6:	08 95       	ret

00000bf8 <asctime_r>:
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	8c 01       	movw	r16, r24
     c0a:	eb 01       	movw	r28, r22
     c0c:	fc 01       	movw	r30, r24
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	b8 2f       	mov	r27, r24
     c12:	bb 0f       	add	r27, r27
     c14:	b8 0f       	add	r27, r24
     c16:	85 81       	ldd	r24, Z+5	; 0x05
     c18:	78 2f       	mov	r23, r24
     c1a:	77 0f       	add	r23, r23
     c1c:	78 0f       	add	r23, r24
     c1e:	9e 01       	movw	r18, r28
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	8b 2f       	mov	r24, r27
     c24:	84 0f       	add	r24, r20
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	84 5e       	subi	r24, 0xE4	; 228
     c2c:	9c 4f       	sbci	r25, 0xFC	; 252
     c2e:	af 4f       	sbci	r26, 0xFF	; 255
     c30:	fc 01       	movw	r30, r24
     c32:	5a 2f       	mov	r21, r26
     c34:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__xload_1>
     c38:	f9 01       	movw	r30, r18
     c3a:	61 93       	st	Z+, r22
     c3c:	9f 01       	movw	r18, r30
     c3e:	87 2f       	mov	r24, r23
     c40:	84 0f       	add	r24, r20
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	8e 5c       	subi	r24, 0xCE	; 206
     c48:	9c 4f       	sbci	r25, 0xFC	; 252
     c4a:	af 4f       	sbci	r26, 0xFF	; 255
     c4c:	fc 01       	movw	r30, r24
     c4e:	5a 2f       	mov	r21, r26
     c50:	0e 94 78 53 	call	0xa6f0	; 0xa6f0 <__xload_1>
     c54:	f9 01       	movw	r30, r18
     c56:	63 83       	std	Z+3, r22	; 0x03
     c58:	4f 5f       	subi	r20, 0xFF	; 255
     c5a:	43 30       	cpi	r20, 0x03	; 3
     c5c:	11 f7       	brne	.-60     	; 0xc22 <asctime_r+0x2a>
     c5e:	80 e2       	ldi	r24, 0x20	; 32
     c60:	8f 83       	std	Y+7, r24	; 0x07
     c62:	8b 83       	std	Y+3, r24	; 0x03
     c64:	be 01       	movw	r22, r28
     c66:	68 5f       	subi	r22, 0xF8	; 248
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	f8 01       	movw	r30, r16
     c6c:	83 81       	ldd	r24, Z+3	; 0x03
     c6e:	40 e2       	ldi	r20, 0x20	; 32
     c70:	08 2e       	mov	r0, r24
     c72:	00 0c       	add	r0, r0
     c74:	99 0b       	sbc	r25, r25
     c76:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     c7a:	be 01       	movw	r22, r28
     c7c:	65 5f       	subi	r22, 0xF5	; 245
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	f8 01       	movw	r30, r16
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	4a e3       	ldi	r20, 0x3A	; 58
     c86:	08 2e       	mov	r0, r24
     c88:	00 0c       	add	r0, r0
     c8a:	99 0b       	sbc	r25, r25
     c8c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     c90:	be 01       	movw	r22, r28
     c92:	62 5f       	subi	r22, 0xF2	; 242
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	f8 01       	movw	r30, r16
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	4a e3       	ldi	r20, 0x3A	; 58
     c9c:	08 2e       	mov	r0, r24
     c9e:	00 0c       	add	r0, r0
     ca0:	99 0b       	sbc	r25, r25
     ca2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     ca6:	be 01       	movw	r22, r28
     ca8:	6f 5e       	subi	r22, 0xEF	; 239
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	f8 01       	movw	r30, r16
     cae:	80 81       	ld	r24, Z
     cb0:	40 e2       	ldi	r20, 0x20	; 32
     cb2:	08 2e       	mov	r0, r24
     cb4:	00 0c       	add	r0, r0
     cb6:	99 0b       	sbc	r25, r25
     cb8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     cbc:	f8 01       	movw	r30, r16
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	64 e6       	ldi	r22, 0x64	; 100
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	84 59       	subi	r24, 0x94	; 148
     cc8:	98 4f       	sbci	r25, 0xF8	; 248
     cca:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
     cd2:	be 01       	movw	r22, r28
     cd4:	6c 5e       	subi	r22, 0xEC	; 236
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	40 e2       	ldi	r20, 0x20	; 32
     cda:	c6 01       	movw	r24, r12
     cdc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__print_lz>
     ce0:	be 01       	movw	r22, r28
     ce2:	6a 5e       	subi	r22, 0xEA	; 234
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	c7 01       	movw	r24, r14
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__print_lz>

00000cfe <gmtime_r>:
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	28 97       	sbiw	r28, 0x08	; 8
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	8b 01       	movw	r16, r22
     d1a:	fc 01       	movw	r30, r24
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	20 e8       	ldi	r18, 0x80	; 128
     d26:	31 e5       	ldi	r19, 0x51	; 81
     d28:	41 e0       	ldi	r20, 0x01	; 1
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
     d30:	69 01       	movw	r12, r18
     d32:	7a 01       	movw	r14, r20
     d34:	2c e3       	ldi	r18, 0x3C	; 60
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	0e 94 e4 4c 	call	0x99c8	; 0x99c8 <__divmodsi4>
     d40:	29 83       	std	Y+1, r18	; 0x01
     d42:	3a 83       	std	Y+2, r19	; 0x02
     d44:	4b 83       	std	Y+3, r20	; 0x03
     d46:	5c 83       	std	Y+4, r21	; 0x04
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	ab 81       	ldd	r26, Y+3	; 0x03
     d4e:	bc 81       	ldd	r27, Y+4	; 0x04
     d50:	f8 01       	movw	r30, r16
     d52:	60 83       	st	Z, r22
     d54:	6c e3       	ldi	r22, 0x3C	; 60
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	f8 01       	movw	r30, r16
     d62:	a1 83       	std	Z+1, r26	; 0x01
     d64:	82 83       	std	Z+2, r24	; 0x02
     d66:	c6 01       	movw	r24, r12
     d68:	06 96       	adiw	r24, 0x06	; 6
     d6a:	67 e0       	ldi	r22, 0x07	; 7
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	0e 94 9a 4c 	call	0x9934	; 0x9934 <__udivmodhi4>
     d72:	84 83       	std	Z+4, r24	; 0x04
     d74:	2d ea       	ldi	r18, 0xAD	; 173
     d76:	3e e8       	ldi	r19, 0x8E	; 142
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	c7 01       	movw	r24, r14
     d7e:	b6 01       	movw	r22, r12
     d80:	0e 94 e4 4c 	call	0x99c8	; 0x99c8 <__divmodsi4>
     d84:	29 83       	std	Y+1, r18	; 0x01
     d86:	3a 83       	std	Y+2, r19	; 0x02
     d88:	6d 83       	std	Y+5, r22	; 0x05
     d8a:	7e 83       	std	Y+6, r23	; 0x06
     d8c:	8f 83       	std	Y+7, r24	; 0x07
     d8e:	98 87       	std	Y+8, r25	; 0x08
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	24 e6       	ldi	r18, 0x64	; 100
     d96:	28 9f       	mul	r18, r24
     d98:	60 01       	movw	r12, r0
     d9a:	29 9f       	mul	r18, r25
     d9c:	d0 0c       	add	r13, r0
     d9e:	11 24       	eor	r1, r1
     da0:	6d 81       	ldd	r22, Y+5	; 0x05
     da2:	7e 81       	ldd	r23, Y+6	; 0x06
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	98 85       	ldd	r25, Y+8	; 0x08
     da8:	25 eb       	ldi	r18, 0xB5	; 181
     daa:	35 e0       	ldi	r19, 0x05	; 5
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	0e 94 e4 4c 	call	0x99c8	; 0x99c8 <__divmodsi4>
     db4:	29 83       	std	Y+1, r18	; 0x01
     db6:	3a 83       	std	Y+2, r19	; 0x02
     db8:	6d 83       	std	Y+5, r22	; 0x05
     dba:	7e 83       	std	Y+6, r23	; 0x06
     dbc:	e9 80       	ldd	r14, Y+1	; 0x01
     dbe:	fa 80       	ldd	r15, Y+2	; 0x02
     dc0:	ee 0c       	add	r14, r14
     dc2:	ff 1c       	adc	r15, r15
     dc4:	ee 0c       	add	r14, r14
     dc6:	ff 1c       	adc	r15, r15
     dc8:	ec 0c       	add	r14, r12
     dca:	fd 1c       	adc	r15, r13
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	f5 e6       	ldi	r31, 0x65	; 101
     dd2:	ef 16       	cp	r14, r31
     dd4:	f1 04       	cpc	r15, r1
     dd6:	10 f0       	brcs	.+4      	; 0xddc <gmtime_r+0xde>
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <gmtime_r+0xe6>
     ddc:	24 e6       	ldi	r18, 0x64	; 100
     dde:	e2 16       	cp	r14, r18
     de0:	f1 04       	cpc	r15, r1
     de2:	19 f0       	breq	.+6      	; 0xdea <gmtime_r+0xec>
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <gmtime_r+0xf0>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	a9 01       	movw	r20, r18
     df0:	44 59       	subi	r20, 0x94	; 148
     df2:	5e 4f       	sbci	r21, 0xFE	; 254
     df4:	48 17       	cp	r20, r24
     df6:	59 07       	cpc	r21, r25
     df8:	68 f4       	brcc	.+26     	; 0xe14 <gmtime_r+0x116>
     dfa:	6d e6       	ldi	r22, 0x6D	; 109
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	82 1b       	sub	r24, r18
     e00:	93 0b       	sbc	r25, r19
     e02:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	e8 0e       	add	r14, r24
     e0c:	f9 1e       	adc	r15, r25
     e0e:	cd 01       	movw	r24, r26
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	44 e6       	ldi	r20, 0x64	; 100
     e16:	e4 0e       	add	r14, r20
     e18:	f1 1c       	adc	r15, r1
     e1a:	f8 01       	movw	r30, r16
     e1c:	e6 82       	std	Z+6, r14	; 0x06
     e1e:	f7 82       	std	Z+7, r15	; 0x07
     e20:	80 87       	std	Z+8, r24	; 0x08
     e22:	91 87       	std	Z+9, r25	; 0x09
     e24:	25 5c       	subi	r18, 0xC5	; 197
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	82 17       	cp	r24, r18
     e2a:	93 07       	cpc	r25, r19
     e2c:	48 f4       	brcc	.+18     	; 0xe40 <gmtime_r+0x142>
     e2e:	6f e1       	ldi	r22, 0x1F	; 31
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	f8 01       	movw	r30, r16
     e3c:	85 83       	std	Z+5, r24	; 0x05
     e3e:	22 c0       	rjmp	.+68     	; 0xe84 <gmtime_r+0x186>
     e40:	69 e9       	ldi	r22, 0x99	; 153
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	82 1b       	sub	r24, r18
     e46:	93 0b       	sbc	r25, r19
     e48:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	f8 2e       	mov	r15, r24
     e52:	ff 0c       	add	r15, r15
     e54:	ff 0c       	add	r15, r15
     e56:	f8 0e       	add	r15, r24
     e58:	6d e3       	ldi	r22, 0x3D	; 61
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	cd 01       	movw	r24, r26
     e5e:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	e8 2e       	mov	r14, r24
     e68:	ee 0c       	add	r14, r14
     e6a:	6f e1       	ldi	r22, 0x1F	; 31
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	22 e0       	ldi	r18, 0x02	; 2
     e7a:	28 0f       	add	r18, r24
     e7c:	f2 0e       	add	r15, r18
     e7e:	fe 0c       	add	r15, r14
     e80:	f8 01       	movw	r30, r16
     e82:	f5 82       	std	Z+5, r15	; 0x05
     e84:	a3 83       	std	Z+3, r26	; 0x03
     e86:	f8 01       	movw	r30, r16
     e88:	12 86       	std	Z+10, r1	; 0x0a
     e8a:	13 86       	std	Z+11, r1	; 0x0b
     e8c:	83 81       	ldd	r24, Z+3	; 0x03
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	83 83       	std	Z+3, r24	; 0x03
     e92:	28 96       	adiw	r28, 0x08	; 8
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	08 95       	ret

00000eaa <iso_week_date_r>:
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	8c 01       	movw	r16, r24
     ebc:	7b 01       	movw	r14, r22
     ebe:	ea 01       	movw	r28, r20
     ec0:	88 83       	st	Y, r24
     ec2:	99 83       	std	Y+1, r25	; 0x01
     ec4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <is_leap_year>
     ec8:	28 2f       	mov	r18, r24
     eca:	a8 01       	movw	r20, r16
     ecc:	40 5d       	subi	r20, 0xD0	; 208
     ece:	57 40       	sbci	r21, 0x07	; 7
     ed0:	6d e6       	ldi	r22, 0x6D	; 109
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	46 9f       	mul	r20, r22
     ed6:	c0 01       	movw	r24, r0
     ed8:	47 9f       	mul	r20, r23
     eda:	90 0d       	add	r25, r0
     edc:	56 9f       	mul	r21, r22
     ede:	90 0d       	add	r25, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	8e 0d       	add	r24, r14
     ee4:	9f 1d       	adc	r25, r15
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	79 f0       	breq	.+30     	; 0xf0a <iso_week_date_r+0x60>
     eec:	ba 01       	movw	r22, r20
     eee:	76 95       	lsr	r23
     ef0:	67 95       	ror	r22
     ef2:	76 95       	lsr	r23
     ef4:	67 95       	ror	r22
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	86 0f       	add	r24, r22
     efc:	97 1f       	adc	r25, r23
     efe:	82 1b       	sub	r24, r18
     f00:	91 09       	sbc	r25, r1
     f02:	45 36       	cpi	r20, 0x65	; 101
     f04:	51 05       	cpc	r21, r1
     f06:	08 f0       	brcs	.+2      	; 0xf0a <iso_week_date_r+0x60>
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	06 96       	adiw	r24, 0x06	; 6
     f0c:	67 e0       	ldi	r22, 0x07	; 7
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	0e 94 9a 4c 	call	0x9934	; 0x9934 <__udivmodhi4>
     f14:	6c 01       	movw	r12, r24
     f16:	89 2b       	or	r24, r25
     f18:	19 f4       	brne	.+6      	; 0xf20 <iso_week_date_r+0x76>
     f1a:	87 e0       	ldi	r24, 0x07	; 7
     f1c:	c8 2e       	mov	r12, r24
     f1e:	d1 2c       	mov	r13, r1
     f20:	cc 82       	std	Y+4, r12	; 0x04
     f22:	dd 82       	std	Y+5, r13	; 0x05
     f24:	c7 01       	movw	r24, r14
     f26:	0b 96       	adiw	r24, 0x0b	; 11
     f28:	8c 19       	sub	r24, r12
     f2a:	9d 09       	sbc	r25, r13
     f2c:	67 e0       	ldi	r22, 0x07	; 7
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     f34:	65 33       	cpi	r22, 0x35	; 53
     f36:	71 05       	cpc	r23, r1
     f38:	b1 f4       	brne	.+44     	; 0xf66 <iso_week_date_r+0xbc>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	c8 1a       	sub	r12, r24
     f3e:	d1 08       	sbc	r13, r1
     f40:	ec 18       	sub	r14, r12
     f42:	fd 08       	sbc	r15, r13
     f44:	82 2f       	mov	r24, r18
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	84 59       	subi	r24, 0x94	; 148
     f4a:	9e 4f       	sbci	r25, 0xFE	; 254
     f4c:	23 e0       	ldi	r18, 0x03	; 3
     f4e:	e2 0e       	add	r14, r18
     f50:	f1 1c       	adc	r15, r1
     f52:	8e 15       	cp	r24, r14
     f54:	9f 05       	cpc	r25, r15
     f56:	3c f4       	brge	.+14     	; 0xf66 <iso_week_date_r+0xbc>
     f58:	88 81       	ld	r24, Y
     f5a:	99 81       	ldd	r25, Y+1	; 0x01
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	88 83       	st	Y, r24
     f60:	99 83       	std	Y+1, r25	; 0x01
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	6a 83       	std	Y+2, r22	; 0x02
     f68:	7b 83       	std	Y+3, r23	; 0x03
     f6a:	67 2b       	or	r22, r23
     f6c:	79 f4       	brne	.+30     	; 0xf8c <iso_week_date_r+0xe2>
     f6e:	01 50       	subi	r16, 0x01	; 1
     f70:	11 09       	sbc	r17, r1
     f72:	c8 01       	movw	r24, r16
     f74:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <is_leap_year>
     f78:	68 2f       	mov	r22, r24
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	64 59       	subi	r22, 0x94	; 148
     f7e:	7e 4f       	sbci	r23, 0xFE	; 254
     f80:	ae 01       	movw	r20, r28
     f82:	c8 01       	movw	r24, r16
     f84:	0e 94 55 07 	call	0xeaa	; 0xeaa <iso_week_date_r>
     f88:	cc 82       	std	Y+4, r12	; 0x04
     f8a:	dd 82       	std	Y+5, r13	; 0x05
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	08 95       	ret

00000f9e <__print_lz>:
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	eb 01       	movw	r28, r22
     fa6:	14 2f       	mov	r17, r20
     fa8:	6a e0       	ldi	r22, 0x0A	; 10
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
     fb0:	60 5d       	subi	r22, 0xD0	; 208
     fb2:	68 83       	st	Y, r22
     fb4:	80 5d       	subi	r24, 0xD0	; 208
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	1a 83       	std	Y+2, r17	; 0x02
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	08 95       	ret

00000fc2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     fc2:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <system_init>
     fc6:	08 95       	ret

00000fc8 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     fd4:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     fd8:	80 ff       	sbrs	r24, 0
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     fe2:	8f 91       	pop	r24
     fe4:	0f 90       	pop	r0
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	0f 90       	pop	r0
     fea:	1f 90       	pop	r1
     fec:	18 95       	reti

00000fee <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     ff6:	80 91 ef 46 	lds	r24, 0x46EF	; 0x8046ef <_ZZ9serial_RxhE4buff>
     ffa:	90 91 f0 46 	lds	r25, 0x46F0	; 0x8046f0 <_ZZ9serial_RxhE4buff+0x1>
     ffe:	89 2b       	or	r24, r25
    1000:	31 f4       	brne	.+12     	; 0x100e <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
    1002:	0e 94 90 3b 	call	0x7720	; 0x7720 <nextEmptySBRxBuffer>
    1006:	80 93 ef 46 	sts	0x46EF, r24	; 0x8046ef <_ZZ9serial_RxhE4buff>
    100a:	90 93 f0 46 	sts	0x46F0, r25	; 0x8046f0 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
    100e:	c0 91 ef 46 	lds	r28, 0x46EF	; 0x8046ef <_ZZ9serial_RxhE4buff>
    1012:	d0 91 f0 46 	lds	r29, 0x46F0	; 0x8046f0 <_ZZ9serial_RxhE4buff+0x1>
    1016:	20 97       	sbiw	r28, 0x00	; 0
    1018:	09 f4       	brne	.+2      	; 0x101c <_Z9serial_Rxh+0x2e>
    101a:	73 c1       	rjmp	.+742    	; 0x1302 <_Z9serial_Rxh+0x314>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
    101c:	81 2f       	mov	r24, r17
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 9f 4e 	call	0x9d3e	; 0x9d3e <toupper>
    1024:	ac 01       	movw	r20, r24
    1026:	28 2f       	mov	r18, r24

		if(ignoreCount)
    1028:	90 91 ee 46 	lds	r25, 0x46EE	; 0x8046ee <_ZZ9serial_RxhE11ignoreCount>
    102c:	99 23       	and	r25, r25
    102e:	21 f0       	breq	.+8      	; 0x1038 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
    1030:	91 50       	subi	r25, 0x01	; 1
    1032:	90 93 ee 46 	sts	0x46EE, r25	; 0x8046ee <_ZZ9serial_RxhE11ignoreCount>
    1036:	65 c1       	rjmp	.+714    	; 0x1302 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
    1038:	4b 31       	cpi	r20, 0x1B	; 27
    103a:	21 f4       	brne	.+8      	; 0x1044 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	80 93 ee 46 	sts	0x46EE, r24	; 0x8046ee <_ZZ9serial_RxhE11ignoreCount>
    1042:	5f c1       	rjmp	.+702    	; 0x1302 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
    1044:	4d 30       	cpi	r20, 0x0D	; 13
    1046:	09 f0       	breq	.+2      	; 0x104a <_Z9serial_Rxh+0x5c>
    1048:	3f c0       	rjmp	.+126    	; 0x10c8 <_Z9serial_Rxh+0xda>
		{
			if(receiving_msg)
    104a:	80 91 ba 46 	lds	r24, 0x46BA	; 0x8046ba <_ZZ9serial_RxhE13receiving_msg>
    104e:	88 23       	and	r24, r24
    1050:	31 f1       	breq	.+76     	; 0x109e <_Z9serial_Rxh+0xb0>
			{
				if(charIndex > 0)
    1052:	e0 91 ed 46 	lds	r30, 0x46ED	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    1056:	ee 23       	and	r30, r30
    1058:	f9 f0       	breq	.+62     	; 0x1098 <_Z9serial_Rxh+0xaa>
				{
					buff->type = SERIALBUS_MSG_QUERY;
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
    105e:	80 91 b8 46 	lds	r24, 0x46B8	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1062:	90 91 b9 46 	lds	r25, 0x46B9	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
    106a:	80 91 b7 46 	lds	r24, 0x46B7	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
    106e:	88 23       	and	r24, r24
    1070:	79 f0       	breq	.+30     	; 0x1090 <_Z9serial_Rxh+0xa2>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	40 91 b6 46 	lds	r20, 0x46B6	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    107a:	54 e1       	ldi	r21, 0x14	; 20
    107c:	58 9f       	mul	r21, r24
    107e:	90 01       	movw	r18, r0
    1080:	59 9f       	mul	r21, r25
    1082:	30 0d       	add	r19, r0
    1084:	11 24       	eor	r1, r1
    1086:	c2 0f       	add	r28, r18
    1088:	d3 1f       	adc	r29, r19
    108a:	c4 0f       	add	r28, r20
    108c:	d1 1d       	adc	r29, r1
    108e:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	e5 54       	subi	r30, 0x45	; 69
    1094:	f9 4b       	sbci	r31, 0xB9	; 185
    1096:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
    1098:	0e 94 8f 3c 	call	0x791e	; 0x791e <sb_send_NewLine>
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <_Z9serial_Rxh+0xb8>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
    10a6:	10 92 ed 46 	sts	0x46ED, r1	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
    10aa:	10 92 b6 46 	sts	0x46B6, r1	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
    10ae:	10 92 b8 46 	sts	0x46B8, r1	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    10b2:	10 92 b9 46 	sts	0x46B9, r1	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
    10b6:	10 92 b7 46 	sts	0x46B7, r1	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
			buff = NULL;
    10ba:	10 92 ef 46 	sts	0x46EF, r1	; 0x8046ef <_ZZ9serial_RxhE4buff>
    10be:	10 92 f0 46 	sts	0x46F0, r1	; 0x8046f0 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = false;
    10c2:	10 92 ba 46 	sts	0x46BA, r1	; 0x8046ba <_ZZ9serial_RxhE13receiving_msg>
    10c6:	1d c1       	rjmp	.+570    	; 0x1302 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char)
    10c8:	44 23       	and	r20, r20
    10ca:	09 f4       	brne	.+2      	; 0x10ce <_Z9serial_Rxh+0xe0>
    10cc:	1a c1       	rjmp	.+564    	; 0x1302 <_Z9serial_Rxh+0x314>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    10ce:	e0 91 ed 46 	lds	r30, 0x46ED	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    10d2:	8e 2f       	mov	r24, r30
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	dc 01       	movw	r26, r24
    10d8:	a5 54       	subi	r26, 0x45	; 69
    10da:	b9 4b       	sbci	r27, 0xB9	; 185
    10dc:	4c 93       	st	X, r20

			if(charIndex)
    10de:	ee 23       	and	r30, r30
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <_Z9serial_Rxh+0xf6>
    10e2:	d7 c0       	rjmp	.+430    	; 0x1292 <_Z9serial_Rxh+0x2a4>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
    10e4:	4f 37       	cpi	r20, 0x7F	; 127
    10e6:	09 f0       	breq	.+2      	; 0x10ea <_Z9serial_Rxh+0xfc>
    10e8:	5f c0       	rjmp	.+190    	; 0x11a8 <_Z9serial_Rxh+0x1ba>
				{
					charIndex--;
    10ea:	e1 50       	subi	r30, 0x01	; 1
    10ec:	e0 93 ed 46 	sts	0x46ED, r30	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
    10f0:	80 91 b7 46 	lds	r24, 0x46B7	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
    10f4:	81 11       	cpse	r24, r1
    10f6:	13 c0       	rjmp	.+38     	; 0x111e <_Z9serial_Rxh+0x130>
					{
						msg_ID -= textBuff[charIndex];
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	e5 54       	subi	r30, 0x45	; 69
    10fc:	f9 4b       	sbci	r31, 0xB9	; 185
    10fe:	30 81       	ld	r19, Z
    1100:	80 91 b8 46 	lds	r24, 0x46B8	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1104:	90 91 b9 46 	lds	r25, 0x46B9	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    1108:	83 1b       	sub	r24, r19
    110a:	91 09       	sbc	r25, r1
						msg_ID /= 10;
    110c:	6a e0       	ldi	r22, 0x0A	; 10
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
    1114:	60 93 b8 46 	sts	0x46B8, r22	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1118:	70 93 b9 46 	sts	0x46B9, r23	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    111c:	39 c0       	rjmp	.+114    	; 0x1190 <_Z9serial_Rxh+0x1a2>
					}
					else if(field_len)
    111e:	90 91 b6 46 	lds	r25, 0x46B6	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    1122:	99 23       	and	r25, r25
    1124:	91 f0       	breq	.+36     	; 0x114a <_Z9serial_Rxh+0x15c>
					{
						field_len--;
    1126:	3f ef       	ldi	r19, 0xFF	; 255
    1128:	39 0f       	add	r19, r25
    112a:	30 93 b6 46 	sts	0x46B6, r19	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	64 e1       	ldi	r22, 0x14	; 20
    1134:	68 9f       	mul	r22, r24
    1136:	a0 01       	movw	r20, r0
    1138:	69 9f       	mul	r22, r25
    113a:	50 0d       	add	r21, r0
    113c:	11 24       	eor	r1, r1
    113e:	c4 0f       	add	r28, r20
    1140:	d5 1f       	adc	r29, r21
    1142:	c3 0f       	add	r28, r19
    1144:	d1 1d       	adc	r29, r1
    1146:	1b 82       	std	Y+3, r1	; 0x03
    1148:	23 c0       	rjmp	.+70     	; 0x1190 <_Z9serial_Rxh+0x1a2>
					}
					else if(textBuff[charIndex] == ' ')
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	e5 54       	subi	r30, 0x45	; 69
    114e:	f9 4b       	sbci	r31, 0xB9	; 185
    1150:	90 81       	ld	r25, Z
    1152:	90 32       	cpi	r25, 0x20	; 32
    1154:	a1 f4       	brne	.+40     	; 0x117e <_Z9serial_Rxh+0x190>
					{
						field_index--;
    1156:	81 50       	subi	r24, 0x01	; 1
    1158:	80 93 b7 46 	sts	0x46B7, r24	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
    115c:	34 e1       	ldi	r19, 0x14	; 20
    115e:	83 9f       	mul	r24, r19
    1160:	c0 01       	movw	r24, r0
    1162:	11 24       	eor	r1, r1
    1164:	03 96       	adiw	r24, 0x03	; 3
    1166:	c8 0f       	add	r28, r24
    1168:	d9 1f       	adc	r29, r25
    116a:	fe 01       	movw	r30, r28
    116c:	01 90       	ld	r0, Z+
    116e:	00 20       	and	r0, r0
    1170:	e9 f7       	brne	.-6      	; 0x116c <_Z9serial_Rxh+0x17e>
    1172:	31 97       	sbiw	r30, 0x01	; 1
    1174:	ec 1b       	sub	r30, r28
    1176:	fd 0b       	sbc	r31, r29
    1178:	e0 93 b6 46 	sts	0x46B6, r30	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <_Z9serial_Rxh+0x1a2>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
    117e:	94 e1       	ldi	r25, 0x14	; 20
    1180:	89 9f       	mul	r24, r25
    1182:	c0 0d       	add	r28, r0
    1184:	d1 1d       	adc	r29, r1
    1186:	11 24       	eor	r1, r1
    1188:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
    118a:	81 50       	subi	r24, 0x01	; 1
    118c:	80 93 b7 46 	sts	0x46B7, r24	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
    1190:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    1194:	e8 2f       	mov	r30, r24
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	e5 54       	subi	r30, 0x45	; 69
    119a:	f9 4b       	sbci	r31, 0xB9	; 185
    119c:	10 82       	st	Z, r1

					if(charIndex == 0)
    119e:	81 11       	cpse	r24, r1
    11a0:	ab c0       	rjmp	.+342    	; 0x12f8 <_Z9serial_Rxh+0x30a>
					{
						receiving_msg = false;
    11a2:	10 92 ba 46 	sts	0x46BA, r1	; 0x8046ba <_ZZ9serial_RxhE13receiving_msg>
    11a6:	a8 c0       	rjmp	.+336    	; 0x12f8 <_Z9serial_Rxh+0x30a>
					}
				}
				else
				{
					if(rx_char == ' ')
    11a8:	40 32       	cpi	r20, 0x20	; 32
    11aa:	81 f5       	brne	.+96     	; 0x120c <_Z9serial_Rxh+0x21e>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
    11ac:	fc 01       	movw	r30, r24
    11ae:	e6 54       	subi	r30, 0x46	; 70
    11b0:	f9 4b       	sbci	r31, 0xB9	; 185
    11b2:	30 81       	ld	r19, Z
    11b4:	30 32       	cpi	r19, 0x20	; 32
    11b6:	09 f4       	brne	.+2      	; 0x11ba <_Z9serial_Rxh+0x1cc>
    11b8:	98 c0       	rjmp	.+304    	; 0x12ea <_Z9serial_Rxh+0x2fc>
    11ba:	30 91 b7 46 	lds	r19, 0x46B7	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
    11be:	43 2f       	mov	r20, r19
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	ba 01       	movw	r22, r20
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	63 30       	cpi	r22, 0x03	; 3
    11ca:	71 05       	cpc	r23, r1
    11cc:	0c f0       	brlt	.+2      	; 0x11d0 <_Z9serial_Rxh+0x1e2>
    11ce:	8f c0       	rjmp	.+286    	; 0x12ee <_Z9serial_Rxh+0x300>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
    11d0:	33 23       	and	r19, r19
    11d2:	79 f0       	breq	.+30     	; 0x11f2 <_Z9serial_Rxh+0x204>
							{
								buff->fields[field_index - 1][field_len] = '\0';
    11d4:	41 50       	subi	r20, 0x01	; 1
    11d6:	51 09       	sbc	r21, r1
    11d8:	e0 91 b6 46 	lds	r30, 0x46B6	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    11dc:	f4 e1       	ldi	r31, 0x14	; 20
    11de:	f4 9f       	mul	r31, r20
    11e0:	b0 01       	movw	r22, r0
    11e2:	f5 9f       	mul	r31, r21
    11e4:	70 0d       	add	r23, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	c6 0f       	add	r28, r22
    11ea:	d7 1f       	adc	r29, r23
    11ec:	ce 0f       	add	r28, r30
    11ee:	d1 1d       	adc	r29, r1
    11f0:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
    11f2:	3f 5f       	subi	r19, 0xFF	; 255
    11f4:	30 93 b7 46 	sts	0x46B7, r19	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
							field_len = 0;
    11f8:	10 92 b6 46 	sts	0x46B6, r1	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	81 33       	cpi	r24, 0x31	; 49
    1200:	91 05       	cpc	r25, r1
    1202:	0c f0       	brlt	.+2      	; 0x1206 <_Z9serial_Rxh+0x218>
    1204:	81 e3       	ldi	r24, 0x31	; 49
    1206:	80 93 ed 46 	sts	0x46ED, r24	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    120a:	76 c0       	rjmp	.+236    	; 0x12f8 <_Z9serial_Rxh+0x30a>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
    120c:	80 91 b6 46 	lds	r24, 0x46B6	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    1210:	85 31       	cpi	r24, 0x15	; 21
    1212:	08 f0       	brcs	.+2      	; 0x1216 <_Z9serial_Rxh+0x228>
    1214:	6e c0       	rjmp	.+220    	; 0x12f2 <_Z9serial_Rxh+0x304>
					{
						if(field_index == 0)    /* message ID received */
    1216:	60 91 b7 46 	lds	r22, 0x46B7	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
    121a:	61 11       	cpse	r22, r1
    121c:	19 c0       	rjmp	.+50     	; 0x1250 <_Z9serial_Rxh+0x262>
						{
							msg_ID = msg_ID * 10 + rx_char;
    121e:	60 91 b8 46 	lds	r22, 0x46B8	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1222:	70 91 b9 46 	lds	r23, 0x46B9	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    1226:	fb 01       	movw	r30, r22
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	66 0f       	add	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	66 0f       	add	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	6e 0f       	add	r22, r30
    123a:	7f 1f       	adc	r23, r31
    123c:	64 0f       	add	r22, r20
    123e:	71 1d       	adc	r23, r1
    1240:	60 93 b8 46 	sts	0x46B8, r22	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    1244:	70 93 b9 46 	sts	0x46B9, r23	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	80 93 b6 46 	sts	0x46B6, r24	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    124e:	16 c0       	rjmp	.+44     	; 0x127c <_Z9serial_Rxh+0x28e>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	61 50       	subi	r22, 0x01	; 1
    1254:	71 09       	sbc	r23, r1
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	98 0f       	add	r25, r24
    125a:	90 93 b6 46 	sts	0x46B6, r25	; 0x8046b6 <_ZZ9serial_RxhE9field_len>
    125e:	34 e1       	ldi	r19, 0x14	; 20
    1260:	36 9f       	mul	r19, r22
    1262:	f0 01       	movw	r30, r0
    1264:	37 9f       	mul	r19, r23
    1266:	f0 0d       	add	r31, r0
    1268:	11 24       	eor	r1, r1
    126a:	ce 0f       	add	r28, r30
    126c:	df 1f       	adc	r29, r31
    126e:	fe 01       	movw	r30, r28
    1270:	e8 0f       	add	r30, r24
    1272:	f1 1d       	adc	r31, r1
    1274:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
    1276:	c9 0f       	add	r28, r25
    1278:	d1 1d       	adc	r29, r1
    127a:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    127c:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	81 33       	cpi	r24, 0x31	; 49
    1286:	91 05       	cpc	r25, r1
    1288:	0c f0       	brlt	.+2      	; 0x128c <_Z9serial_Rxh+0x29e>
    128a:	81 e3       	ldi	r24, 0x31	; 49
    128c:	80 93 ed 46 	sts	0x46ED, r24	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    1290:	33 c0       	rjmp	.+102    	; 0x12f8 <_Z9serial_Rxh+0x30a>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
    1292:	4f 37       	cpi	r20, 0x7F	; 127
    1294:	69 f4       	brne	.+26     	; 0x12b0 <_Z9serial_Rxh+0x2c2>
				{
					if(msg_ID <= 0)
    1296:	80 91 b8 46 	lds	r24, 0x46B8	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    129a:	90 91 b9 46 	lds	r25, 0x46B9	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    129e:	18 16       	cp	r1, r24
    12a0:	19 06       	cpc	r1, r25
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <_Z9serial_Rxh+0x2b8>
					{
						rx_char = '\0';
    12a4:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
    12a6:	10 92 b8 46 	sts	0x46B8, r1	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    12aa:	10 92 b9 46 	sts	0x46B9, r1	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>
    12ae:	24 c0       	rjmp	.+72     	; 0x12f8 <_Z9serial_Rxh+0x30a>
				}
				else if(rx_char == ' ') /* Handle Space */
    12b0:	40 32       	cpi	r20, 0x20	; 32
    12b2:	09 f1       	breq	.+66     	; 0x12f6 <_Z9serial_Rxh+0x308>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
    12b4:	10 92 b7 46 	sts	0x46B7, r1	; 0x8046b7 <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
    12b8:	55 27       	eor	r21, r21
    12ba:	40 93 b8 46 	sts	0x46B8, r20	; 0x8046b8 <_ZZ9serial_RxhE6msg_ID>
    12be:	50 93 b9 46 	sts	0x46B9, r21	; 0x8046b9 <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	50 f4       	brcc	.+20     	; 0x12dc <_Z9serial_Rxh+0x2ee>
					{
						buff->fields[i][0] = '\0';
    12c8:	de 01       	movw	r26, r28
    12ca:	34 e1       	ldi	r19, 0x14	; 20
    12cc:	83 9f       	mul	r24, r19
    12ce:	a0 0d       	add	r26, r0
    12d0:	b1 1d       	adc	r27, r1
    12d2:	11 24       	eor	r1, r1
    12d4:	13 96       	adiw	r26, 0x03	; 3
    12d6:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	f4 cf       	rjmp	.-24     	; 0x12c4 <_Z9serial_Rxh+0x2d6>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = true;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 93 ba 46 	sts	0x46BA, r24	; 0x8046ba <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
    12e2:	ef 5f       	subi	r30, 0xFF	; 255
    12e4:	e0 93 ed 46 	sts	0x46ED, r30	; 0x8046ed <_ZZ9serial_RxhE9charIndex>
    12e8:	07 c0       	rjmp	.+14     	; 0x12f8 <_Z9serial_Rxh+0x30a>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <_Z9serial_Rxh+0x30a>
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <_Z9serial_Rxh+0x30a>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <_Z9serial_Rxh+0x30a>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
    12f6:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = true;
					charIndex++;
				}
			}

			if(rx_char)
    12f8:	22 23       	and	r18, r18
    12fa:	19 f0       	breq	.+6      	; 0x1302 <_Z9serial_Rxh+0x314>
			{
				sb_echo_char(rx_char);
    12fc:	82 2f       	mov	r24, r18
    12fe:	0e 94 98 3c 	call	0x7930	; 0x7930 <sb_echo_char>
			}
		}
	}	
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	08 95       	ret

0000130a <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	0b b6       	in	r0, 0x3b	; 59
    1316:	0f 92       	push	r0
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
    1330:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1334:	81 11       	cpse	r24, r1
    1336:	2b c0       	rjmp	.+86     	; 0x138e <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1338:	80 91 b4 46 	lds	r24, 0x46B4	; 0x8046b4 <_ZZ11__vector_20E4buff>
    133c:	90 91 b5 46 	lds	r25, 0x46B5	; 0x8046b5 <_ZZ11__vector_20E4buff+0x1>
    1340:	89 2b       	or	r24, r25
    1342:	31 f4       	brne	.+12     	; 0x1350 <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
    1344:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_Z18nextFullLBTxBufferv>
    1348:	80 93 b4 46 	sts	0x46B4, r24	; 0x8046b4 <_ZZ11__vector_20E4buff>
    134c:	90 93 b5 46 	sts	0x46B5, r25	; 0x8046b5 <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
    1350:	e0 91 b4 46 	lds	r30, 0x46B4	; 0x8046b4 <_ZZ11__vector_20E4buff>
    1354:	f0 91 b5 46 	lds	r31, 0x46B5	; 0x8046b5 <_ZZ11__vector_20E4buff+0x1>
    1358:	80 91 b3 46 	lds	r24, 0x46B3	; 0x8046b3 <_ZZ11__vector_20E9charIndex>
    135c:	df 01       	movw	r26, r30
    135e:	a8 0f       	add	r26, r24
    1360:	b1 1d       	adc	r27, r1
    1362:	9c 91       	ld	r25, X
    1364:	99 23       	and	r25, r25
    1366:	31 f0       	breq	.+12     	; 0x1374 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	80 93 b3 46 	sts	0x46B3, r24	; 0x8046b3 <_ZZ11__vector_20E9charIndex>
    136e:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    1372:	0d c0       	rjmp	.+26     	; 0x138e <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
    1374:	10 92 b3 46 	sts	0x46B3, r1	; 0x8046b3 <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
    1378:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    137a:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_Z18nextFullLBTxBufferv>
    137e:	80 93 b4 46 	sts	0x46B4, r24	; 0x8046b4 <_ZZ11__vector_20E4buff>
    1382:	90 93 b5 46 	sts	0x46B5, r25	; 0x8046b5 <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
    1386:	89 2b       	or	r24, r25
    1388:	11 f4       	brne	.+4      	; 0x138e <__vector_20+0x84>
			{
				linkbus_end_tx();
    138a:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
    138e:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    1392:	81 11       	cpse	r24, r1
    1394:	2b c0       	rjmp	.+86     	; 0x13ec <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1396:	80 91 b1 46 	lds	r24, 0x46B1	; 0x8046b1 <_ZZ11__vector_20E4buff_0>
    139a:	90 91 b2 46 	lds	r25, 0x46B2	; 0x8046b2 <_ZZ11__vector_20E4buff_0+0x1>
    139e:	89 2b       	or	r24, r25
    13a0:	31 f4       	brne	.+12     	; 0x13ae <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
    13a2:	0e 94 38 3b 	call	0x7670	; 0x7670 <nextFullSBTxBuffer>
    13a6:	80 93 b1 46 	sts	0x46B1, r24	; 0x8046b1 <_ZZ11__vector_20E4buff_0>
    13aa:	90 93 b2 46 	sts	0x46B2, r25	; 0x8046b2 <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    13ae:	e0 91 b1 46 	lds	r30, 0x46B1	; 0x8046b1 <_ZZ11__vector_20E4buff_0>
    13b2:	f0 91 b2 46 	lds	r31, 0x46B2	; 0x8046b2 <_ZZ11__vector_20E4buff_0+0x1>
    13b6:	80 91 b0 46 	lds	r24, 0x46B0	; 0x8046b0 <_ZZ11__vector_20E9charIndex_0>
    13ba:	df 01       	movw	r26, r30
    13bc:	a8 0f       	add	r26, r24
    13be:	b1 1d       	adc	r27, r1
    13c0:	9c 91       	ld	r25, X
    13c2:	99 23       	and	r25, r25
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	80 93 b0 46 	sts	0x46B0, r24	; 0x8046b0 <_ZZ11__vector_20E9charIndex_0>
    13cc:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    13d0:	0d c0       	rjmp	.+26     	; 0x13ec <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
    13d2:	10 92 b0 46 	sts	0x46B0, r1	; 0x8046b0 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
    13d6:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    13d8:	0e 94 38 3b 	call	0x7670	; 0x7670 <nextFullSBTxBuffer>
    13dc:	80 93 b1 46 	sts	0x46B1, r24	; 0x8046b1 <_ZZ11__vector_20E4buff_0>
    13e0:	90 93 b2 46 	sts	0x46B2, r25	; 0x8046b2 <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
    13e4:	89 2b       	or	r24, r25
    13e6:	11 f4       	brne	.+4      	; 0x13ec <__vector_20+0xe2>
			{
				serialbus_end_tx();
    13e8:	0e 94 01 3c 	call	0x7802	; 0x7802 <serialbus_end_tx>
			}
		}
	}
}
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0b be       	out	0x3b, r0	; 59
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	0f 90       	pop	r0
    140e:	1f 90       	pop	r1
    1410:	18 95       	reti

00001412 <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
    1412:	1f 92       	push	r1
    1414:	0f 92       	push	r0
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	0b b6       	in	r0, 0x3b	; 59
    141e:	0f 92       	push	r0
    1420:	2f 93       	push	r18
    1422:	3f 93       	push	r19
    1424:	4f 93       	push	r20
    1426:	5f 93       	push	r21
    1428:	6f 93       	push	r22
    142a:	7f 93       	push	r23
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
    1438:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    143c:	84 30       	cpi	r24, 0x04	; 4
    143e:	59 f5       	brne	.+86     	; 0x1496 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1440:	80 91 ae 46 	lds	r24, 0x46AE	; 0x8046ae <_ZZ11__vector_56E4buff>
    1444:	90 91 af 46 	lds	r25, 0x46AF	; 0x8046af <_ZZ11__vector_56E4buff+0x1>
    1448:	89 2b       	or	r24, r25
    144a:	31 f4       	brne	.+12     	; 0x1458 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
    144c:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_Z18nextFullLBTxBufferv>
    1450:	80 93 ae 46 	sts	0x46AE, r24	; 0x8046ae <_ZZ11__vector_56E4buff>
    1454:	90 93 af 46 	sts	0x46AF, r25	; 0x8046af <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
    1458:	e0 91 ae 46 	lds	r30, 0x46AE	; 0x8046ae <_ZZ11__vector_56E4buff>
    145c:	f0 91 af 46 	lds	r31, 0x46AF	; 0x8046af <_ZZ11__vector_56E4buff+0x1>
    1460:	80 91 ad 46 	lds	r24, 0x46AD	; 0x8046ad <_ZZ11__vector_56E9charIndex>
    1464:	df 01       	movw	r26, r30
    1466:	a8 0f       	add	r26, r24
    1468:	b1 1d       	adc	r27, r1
    146a:	9c 91       	ld	r25, X
    146c:	99 23       	and	r25, r25
    146e:	31 f0       	breq	.+12     	; 0x147c <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 ad 46 	sts	0x46AD, r24	; 0x8046ad <_ZZ11__vector_56E9charIndex>
    1476:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
    147c:	10 92 ad 46 	sts	0x46AD, r1	; 0x8046ad <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
    1480:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    1482:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_Z18nextFullLBTxBufferv>
    1486:	80 93 ae 46 	sts	0x46AE, r24	; 0x8046ae <_ZZ11__vector_56E4buff>
    148a:	90 93 af 46 	sts	0x46AF, r25	; 0x8046af <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
    148e:	89 2b       	or	r24, r25
    1490:	11 f4       	brne	.+4      	; 0x1496 <__vector_56+0x84>
			{
				linkbus_end_tx();
    1492:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
    1496:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	59 f5       	brne	.+86     	; 0x14f4 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    149e:	80 91 ab 46 	lds	r24, 0x46AB	; 0x8046ab <_ZZ11__vector_56E4buff_0>
    14a2:	90 91 ac 46 	lds	r25, 0x46AC	; 0x8046ac <_ZZ11__vector_56E4buff_0+0x1>
    14a6:	89 2b       	or	r24, r25
    14a8:	31 f4       	brne	.+12     	; 0x14b6 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
    14aa:	0e 94 38 3b 	call	0x7670	; 0x7670 <nextFullSBTxBuffer>
    14ae:	80 93 ab 46 	sts	0x46AB, r24	; 0x8046ab <_ZZ11__vector_56E4buff_0>
    14b2:	90 93 ac 46 	sts	0x46AC, r25	; 0x8046ac <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    14b6:	e0 91 ab 46 	lds	r30, 0x46AB	; 0x8046ab <_ZZ11__vector_56E4buff_0>
    14ba:	f0 91 ac 46 	lds	r31, 0x46AC	; 0x8046ac <_ZZ11__vector_56E4buff_0+0x1>
    14be:	80 91 aa 46 	lds	r24, 0x46AA	; 0x8046aa <_ZZ11__vector_56E9charIndex_0>
    14c2:	df 01       	movw	r26, r30
    14c4:	a8 0f       	add	r26, r24
    14c6:	b1 1d       	adc	r27, r1
    14c8:	9c 91       	ld	r25, X
    14ca:	99 23       	and	r25, r25
    14cc:	31 f0       	breq	.+12     	; 0x14da <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	80 93 aa 46 	sts	0x46AA, r24	; 0x8046aa <_ZZ11__vector_56E9charIndex_0>
    14d4:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    14d8:	0d c0       	rjmp	.+26     	; 0x14f4 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
    14da:	10 92 aa 46 	sts	0x46AA, r1	; 0x8046aa <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
    14de:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    14e0:	0e 94 38 3b 	call	0x7670	; 0x7670 <nextFullSBTxBuffer>
    14e4:	80 93 ab 46 	sts	0x46AB, r24	; 0x8046ab <_ZZ11__vector_56E4buff_0>
    14e8:	90 93 ac 46 	sts	0x46AC, r25	; 0x8046ac <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
    14ec:	89 2b       	or	r24, r25
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <__vector_56+0xe2>
			{
				serialbus_end_tx();
    14f0:	0e 94 01 3c 	call	0x7802	; 0x7802 <serialbus_end_tx>
			}
		}
	}
}
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0b be       	out	0x3b, r0	; 59
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
    1524:	80 91 a8 46 	lds	r24, 0x46A8	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    1528:	90 91 a9 46 	lds	r25, 0x46A9	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
    152c:	89 2b       	or	r24, r25
    152e:	31 f4       	brne	.+12     	; 0x153c <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
    1530:	0e 94 43 37 	call	0x6e86	; 0x6e86 <_Z19nextEmptyLBRxBufferv>
    1534:	80 93 a8 46 	sts	0x46A8, r24	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    1538:	90 93 a9 46 	sts	0x46A9, r25	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
    153c:	c0 91 a8 46 	lds	r28, 0x46A8	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    1540:	d0 91 a9 46 	lds	r29, 0x46A9	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
    1544:	20 97       	sbiw	r28, 0x00	; 0
    1546:	09 f4       	brne	.+2      	; 0x154a <_Z10linkbus_Rxh+0x30>
    1548:	e3 c0       	rjmp	.+454    	; 0x1710 <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
    154a:	81 2f       	mov	r24, r17
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 9f 4e 	call	0x9d3e	; 0x9d3e <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    1552:	84 32       	cpi	r24, 0x24	; 36
    1554:	11 f0       	breq	.+4      	; 0x155a <_Z10linkbus_Rxh+0x40>
    1556:	81 32       	cpi	r24, 0x21	; 33
    1558:	49 f5       	brne	.+82     	; 0x15ac <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
    155a:	10 92 a7 46 	sts	0x46A7, r1	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    155e:	81 32       	cpi	r24, 0x21	; 33
    1560:	11 f4       	brne	.+4      	; 0x1566 <_Z10linkbus_Rxh+0x4c>
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <_Z10linkbus_Rxh+0x4e>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	88 83       	st	Y, r24
			field_len = 0;
    156a:	10 92 a6 46 	sts	0x46A6, r1	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    156e:	10 92 a2 46 	sts	0x46A2, r1	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1572:	10 92 a3 46 	sts	0x46A3, r1	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1576:	10 92 a4 46 	sts	0x46A4, r1	; 0x8046a4 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    157a:	10 92 a5 46 	sts	0x46A5, r1	; 0x8046a5 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = true;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 a1 46 	sts	0x46A1, r24	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1584:	10 92 a0 46 	sts	0x46A0, r1	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    1588:	80 91 a0 46 	lds	r24, 0x46A0	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	58 f4       	brcc	.+22     	; 0x15a6 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
    1590:	fe 01       	movw	r30, r28
    1592:	05 e1       	ldi	r16, 0x15	; 21
    1594:	80 9f       	mul	r24, r16
    1596:	e0 0d       	add	r30, r0
    1598:	f1 1d       	adc	r31, r1
    159a:	11 24       	eor	r1, r1
    159c:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = true;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	80 93 a0 46 	sts	0x46A0, r24	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    15a4:	f1 cf       	rjmp	.-30     	; 0x1588 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
    15a6:	10 92 a0 46 	sts	0x46A0, r1	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    15aa:	a7 c0       	rjmp	.+334    	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
    15ac:	90 91 a1 46 	lds	r25, 0x46A1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
    15b0:	99 23       	and	r25, r25
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <_Z10linkbus_Rxh+0x9c>
    15b4:	8b c0       	rjmp	.+278    	; 0x16cc <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    15b6:	8c 32       	cpi	r24, 0x2C	; 44
    15b8:	29 f0       	breq	.+10     	; 0x15c4 <_Z10linkbus_Rxh+0xaa>
    15ba:	8b 33       	cpi	r24, 0x3B	; 59
    15bc:	19 f0       	breq	.+6      	; 0x15c4 <_Z10linkbus_Rxh+0xaa>
    15be:	8f 33       	cpi	r24, 0x3F	; 63
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <_Z10linkbus_Rxh+0xaa>
    15c2:	42 c0       	rjmp	.+132    	; 0x1648 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    15c4:	90 91 a0 46 	lds	r25, 0x46A0	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    15c8:	99 23       	and	r25, r25
    15ca:	89 f0       	breq	.+34     	; 0x15ee <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
    15cc:	29 2f       	mov	r18, r25
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	21 50       	subi	r18, 0x01	; 1
    15d2:	31 09       	sbc	r19, r1
    15d4:	40 91 a6 46 	lds	r20, 0x46A6	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
    15d8:	55 e1       	ldi	r21, 0x15	; 21
    15da:	52 9f       	mul	r21, r18
    15dc:	f0 01       	movw	r30, r0
    15de:	53 9f       	mul	r21, r19
    15e0:	f0 0d       	add	r31, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	ec 0f       	add	r30, r28
    15e6:	fd 1f       	adc	r31, r29
    15e8:	e4 0f       	add	r30, r20
    15ea:	f1 1d       	adc	r31, r1
    15ec:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
    15ee:	9f 5f       	subi	r25, 0xFF	; 255
    15f0:	90 93 a0 46 	sts	0x46A0, r25	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
    15f4:	10 92 a6 46 	sts	0x46A6, r1	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
    15f8:	8b 33       	cpi	r24, 0x3B	; 59
    15fa:	69 f4       	brne	.+26     	; 0x1616 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    15fc:	80 91 a7 46 	lds	r24, 0x46A7	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
    1600:	84 30       	cpi	r24, 0x04	; 4
    1602:	30 f0       	brcs	.+12     	; 0x1610 <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    1604:	80 91 a2 46 	lds	r24, 0x46A2	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1608:	90 91 a3 46 	lds	r25, 0x46A3	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    1610:	10 92 a1 46 	sts	0x46A1, r1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
    1614:	10 c0       	rjmp	.+32     	; 0x1636 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
    1616:	8f 33       	cpi	r24, 0x3F	; 63
    1618:	71 f4       	brne	.+28     	; 0x1636 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
    161e:	80 91 a7 46 	lds	r24, 0x46A7	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	30 f0       	brcs	.+12     	; 0x1632 <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    1626:	80 91 a2 46 	lds	r24, 0x46A2	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    162a:	90 91 a3 46 	lds	r25, 0x46A3	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    1632:	10 92 a1 46 	sts	0x46A1, r1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
    1636:	80 91 a1 46 	lds	r24, 0x46A1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
    163a:	81 11       	cpse	r24, r1
    163c:	5e c0       	rjmp	.+188    	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
    163e:	10 92 a8 46 	sts	0x46A8, r1	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    1642:	10 92 a9 46 	sts	0x46A9, r1	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
    1646:	59 c0       	rjmp	.+178    	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
    1648:	20 91 a0 46 	lds	r18, 0x46A0	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
    164c:	21 11       	cpse	r18, r1
    164e:	29 c0       	rjmp	.+82     	; 0x16a2 <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
    1650:	40 91 a2 46 	lds	r20, 0x46A2	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1654:	50 91 a3 46 	lds	r21, 0x46A3	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1658:	60 91 a4 46 	lds	r22, 0x46A4	; 0x8046a4 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    165c:	70 91 a5 46 	lds	r23, 0x46A5	; 0x8046a5 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    1660:	44 0f       	add	r20, r20
    1662:	55 1f       	adc	r21, r21
    1664:	66 1f       	adc	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	8a 01       	movw	r16, r20
    166a:	9b 01       	movw	r18, r22
    166c:	00 0f       	add	r16, r16
    166e:	11 1f       	adc	r17, r17
    1670:	22 1f       	adc	r18, r18
    1672:	33 1f       	adc	r19, r19
    1674:	00 0f       	add	r16, r16
    1676:	11 1f       	adc	r17, r17
    1678:	22 1f       	adc	r18, r18
    167a:	33 1f       	adc	r19, r19
    167c:	40 0f       	add	r20, r16
    167e:	51 1f       	adc	r21, r17
    1680:	62 1f       	adc	r22, r18
    1682:	73 1f       	adc	r23, r19
    1684:	8a 01       	movw	r16, r20
    1686:	9b 01       	movw	r18, r22
    1688:	08 0f       	add	r16, r24
    168a:	11 1d       	adc	r17, r1
    168c:	21 1d       	adc	r18, r1
    168e:	31 1d       	adc	r19, r1
    1690:	00 93 a2 46 	sts	0x46A2, r16	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1694:	10 93 a3 46 	sts	0x46A3, r17	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1698:	20 93 a4 46 	sts	0x46A4, r18	; 0x8046a4 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    169c:	30 93 a5 46 	sts	0x46A5, r19	; 0x8046a5 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    16a0:	2c c0       	rjmp	.+88     	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	21 50       	subi	r18, 0x01	; 1
    16a6:	31 09       	sbc	r19, r1
    16a8:	90 91 a6 46 	lds	r25, 0x46A6	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	49 0f       	add	r20, r25
    16b0:	40 93 a6 46 	sts	0x46A6, r20	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
    16b4:	65 e1       	ldi	r22, 0x15	; 21
    16b6:	62 9f       	mul	r22, r18
    16b8:	a0 01       	movw	r20, r0
    16ba:	63 9f       	mul	r22, r19
    16bc:	50 0d       	add	r21, r0
    16be:	11 24       	eor	r1, r1
    16c0:	c4 0f       	add	r28, r20
    16c2:	d5 1f       	adc	r29, r21
    16c4:	c9 0f       	add	r28, r25
    16c6:	d1 1d       	adc	r29, r1
    16c8:	8b 83       	std	Y+3, r24	; 0x03
    16ca:	17 c0       	rjmp	.+46     	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
    16cc:	8d 30       	cpi	r24, 0x0D	; 13
    16ce:	a9 f4       	brne	.+42     	; 0x16fa <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
    16d0:	19 82       	std	Y+1, r1	; 0x01
    16d2:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
    16d4:	82 e3       	ldi	r24, 0x32	; 50
    16d6:	80 93 a7 46 	sts	0x46A7, r24	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
    16da:	10 92 a6 46 	sts	0x46A6, r1	; 0x8046a6 <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    16de:	10 92 a2 46 	sts	0x46A2, r1	; 0x8046a2 <_ZZ10linkbus_RxhE10tempMsg_ID>
    16e2:	10 92 a3 46 	sts	0x46A3, r1	; 0x8046a3 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    16e6:	10 92 a4 46 	sts	0x46A4, r1	; 0x8046a4 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    16ea:	10 92 a5 46 	sts	0x46A5, r1	; 0x8046a5 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
    16ee:	10 92 a0 46 	sts	0x46A0, r1	; 0x8046a0 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
    16f2:	10 92 a8 46 	sts	0x46A8, r1	; 0x8046a8 <_ZZ10linkbus_RxhE4buff>
    16f6:	10 92 a9 46 	sts	0x46A9, r1	; 0x8046a9 <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    16fa:	80 91 a7 46 	lds	r24, 0x46A7	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	80 93 a7 46 	sts	0x46A7, r24	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
    1704:	82 33       	cpi	r24, 0x32	; 50
    1706:	20 f0       	brcs	.+8      	; 0x1710 <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = false;
    1708:	10 92 a1 46 	sts	0x46A1, r1	; 0x8046a1 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
    170c:	10 92 a7 46 	sts	0x46A7, r1	; 0x8046a7 <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	08 95       	ret

0000171a <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	0b b6       	in	r0, 0x3b	; 59
    1726:	0f 92       	push	r0
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	cf 93       	push	r28
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
    1742:	0e 94 2f 47 	call	0x8e5e	; 0x8e5e <USART0_get_data>
    1746:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
    1748:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    174c:	81 11       	cpse	r24, r1
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
    1750:	8c 2f       	mov	r24, r28
    1752:	0e 94 8d 0a 	call	0x151a	; 0x151a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
    1756:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    175a:	81 11       	cpse	r24, r1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
    175e:	8c 2f       	mov	r24, r28
    1760:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z9serial_Rxh>
	}
}
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	cf 91       	pop	r28
    176a:	bf 91       	pop	r27
    176c:	af 91       	pop	r26
    176e:	9f 91       	pop	r25
    1770:	8f 91       	pop	r24
    1772:	7f 91       	pop	r23
    1774:	6f 91       	pop	r22
    1776:	5f 91       	pop	r21
    1778:	4f 91       	pop	r20
    177a:	3f 91       	pop	r19
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0b be       	out	0x3b, r0	; 59
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	18 95       	reti

0000178c <__vector_55>:

ISR(USART4_RXC_vect)
{
    178c:	1f 92       	push	r1
    178e:	0f 92       	push	r0
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	0f 92       	push	r0
    1794:	11 24       	eor	r1, r1
    1796:	0b b6       	in	r0, 0x3b	; 59
    1798:	0f 92       	push	r0
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	cf 93       	push	r28
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
    17b4:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <USART4_get_data>
    17b8:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
    17ba:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	19 f4       	brne	.+6      	; 0x17c8 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
    17c2:	8c 2f       	mov	r24, r28
    17c4:	0e 94 8d 0a 	call	0x151a	; 0x151a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
    17c8:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	19 f4       	brne	.+6      	; 0x17d6 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
    17d0:	8c 2f       	mov	r24, r28
    17d2:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z9serial_Rxh>
	}
}
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	cf 91       	pop	r28
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	7f 91       	pop	r23
    17e6:	6f 91       	pop	r22
    17e8:	5f 91       	pop	r21
    17ea:	4f 91       	pop	r20
    17ec:	3f 91       	pop	r19
    17ee:	2f 91       	pop	r18
    17f0:	0f 90       	pop	r0
    17f2:	0b be       	out	0x3b, r0	; 59
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	0b b6       	in	r0, 0x3b	; 59
    180a:	0f 92       	push	r0
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	cf 93       	push	r28
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
    1826:	0e 94 63 47 	call	0x8ec6	; 0x8ec6 <USART1_get_data>
    182a:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
    182c:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	19 f4       	brne	.+6      	; 0x183a <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
    1834:	8c 2f       	mov	r24, r28
    1836:	0e 94 8d 0a 	call	0x151a	; 0x151a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
    183a:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	19 f4       	brne	.+6      	; 0x1848 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
    1842:	8c 2f       	mov	r24, r28
    1844:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z9serial_Rxh>
	}
}
    1848:	ff 91       	pop	r31
    184a:	ef 91       	pop	r30
    184c:	cf 91       	pop	r28
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0b be       	out	0x3b, r0	; 59
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	0b b6       	in	r0, 0x3b	; 59
    187c:	0f 92       	push	r0
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
    1896:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	59 f5       	brne	.+86     	; 0x18f4 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    189e:	80 91 9e 46 	lds	r24, 0x469E	; 0x80469e <_ZZ11__vector_32E4buff>
    18a2:	90 91 9f 46 	lds	r25, 0x469F	; 0x80469f <_ZZ11__vector_32E4buff+0x1>
    18a6:	89 2b       	or	r24, r25
    18a8:	31 f4       	brne	.+12     	; 0x18b6 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
    18aa:	0e 94 38 3b 	call	0x7670	; 0x7670 <nextFullSBTxBuffer>
    18ae:	80 93 9e 46 	sts	0x469E, r24	; 0x80469e <_ZZ11__vector_32E4buff>
    18b2:	90 93 9f 46 	sts	0x469F, r25	; 0x80469f <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
    18b6:	e0 91 9e 46 	lds	r30, 0x469E	; 0x80469e <_ZZ11__vector_32E4buff>
    18ba:	f0 91 9f 46 	lds	r31, 0x469F	; 0x80469f <_ZZ11__vector_32E4buff+0x1>
    18be:	80 91 9d 46 	lds	r24, 0x469D	; 0x80469d <_ZZ11__vector_32E9charIndex>
    18c2:	df 01       	movw	r26, r30
    18c4:	a8 0f       	add	r26, r24
    18c6:	b1 1d       	adc	r27, r1
    18c8:	9c 91       	ld	r25, X
    18ca:	99 23       	and	r25, r25
    18cc:	31 f0       	breq	.+12     	; 0x18da <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	80 93 9d 46 	sts	0x469D, r24	; 0x80469d <_ZZ11__vector_32E9charIndex>
    18d4:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    18d8:	0d c0       	rjmp	.+26     	; 0x18f4 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
    18da:	10 92 9d 46 	sts	0x469D, r1	; 0x80469d <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
    18de:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    18e0:	0e 94 38 3b 	call	0x7670	; 0x7670 <nextFullSBTxBuffer>
    18e4:	80 93 9e 46 	sts	0x469E, r24	; 0x80469e <_ZZ11__vector_32E4buff>
    18e8:	90 93 9f 46 	sts	0x469F, r25	; 0x80469f <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
    18ec:	89 2b       	or	r24, r25
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <__vector_32+0x84>
			{
				serialbus_end_tx();
    18f0:	0e 94 01 3c 	call	0x7802	; 0x7802 <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
    18f4:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	59 f5       	brne	.+86     	; 0x1952 <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    18fc:	80 91 9b 46 	lds	r24, 0x469B	; 0x80469b <_ZZ11__vector_32E4buff_0>
    1900:	90 91 9c 46 	lds	r25, 0x469C	; 0x80469c <_ZZ11__vector_32E4buff_0+0x1>
    1904:	89 2b       	or	r24, r25
    1906:	31 f4       	brne	.+12     	; 0x1914 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
    1908:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_Z18nextFullLBTxBufferv>
    190c:	80 93 9b 46 	sts	0x469B, r24	; 0x80469b <_ZZ11__vector_32E4buff_0>
    1910:	90 93 9c 46 	sts	0x469C, r25	; 0x80469c <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    1914:	e0 91 9b 46 	lds	r30, 0x469B	; 0x80469b <_ZZ11__vector_32E4buff_0>
    1918:	f0 91 9c 46 	lds	r31, 0x469C	; 0x80469c <_ZZ11__vector_32E4buff_0+0x1>
    191c:	80 91 9a 46 	lds	r24, 0x469A	; 0x80469a <__data_end>
    1920:	df 01       	movw	r26, r30
    1922:	a8 0f       	add	r26, r24
    1924:	b1 1d       	adc	r27, r1
    1926:	9c 91       	ld	r25, X
    1928:	99 23       	and	r25, r25
    192a:	31 f0       	breq	.+12     	; 0x1938 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	80 93 9a 46 	sts	0x469A, r24	; 0x80469a <__data_end>
    1932:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    1936:	0d c0       	rjmp	.+26     	; 0x1952 <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
    1938:	10 92 9a 46 	sts	0x469A, r1	; 0x80469a <__data_end>
			(*buff)[0] = '\0';
    193c:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    193e:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_Z18nextFullLBTxBufferv>
    1942:	80 93 9b 46 	sts	0x469B, r24	; 0x80469b <_ZZ11__vector_32E4buff_0>
    1946:	90 93 9c 46 	sts	0x469C, r25	; 0x80469c <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
    194a:	89 2b       	or	r24, r25
    194c:	11 f4       	brne	.+4      	; 0x1952 <__vector_32+0xe2>
			{
				linkbus_end_tx();
    194e:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <_Z14linkbus_end_txv>
			}
		}
	}
}
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	7f 91       	pop	r23
    1960:	6f 91       	pop	r22
    1962:	5f 91       	pop	r21
    1964:	4f 91       	pop	r20
    1966:	3f 91       	pop	r19
    1968:	2f 91       	pop	r18
    196a:	0f 90       	pop	r0
    196c:	0b be       	out	0x3b, r0	; 59
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <__vector_41>:
{
	
}

void suspendEvent()
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	0b b6       	in	r0, 0x3b	; 59
    1984:	0f 92       	push	r0
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	6f 93       	push	r22
    1994:	7f 93       	push	r23
    1996:	8f 93       	push	r24
    1998:	9f 93       	push	r25
    199a:	af 93       	push	r26
    199c:	bf 93       	push	r27
    199e:	ef 93       	push	r30
    19a0:	ff 93       	push	r31
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	25 97       	sbiw	r28, 0x05	; 5
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    19b4:	80 ff       	sbrs	r24, 0
    19b6:	98 c3       	rjmp	.+1840   	; 0x20e8 <__vector_41+0x770>
    19b8:	80 91 93 47 	lds	r24, 0x4793	; 0x804793 <_ZZ11__vector_41E3cnt>
    19bc:	90 91 94 47 	lds	r25, 0x4794	; 0x804794 <_ZZ11__vector_41E3cnt+0x1>
    19c0:	9c 01       	movw	r18, r24
    19c2:	2f 5f       	subi	r18, 0xFF	; 255
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	20 93 93 47 	sts	0x4793, r18	; 0x804793 <_ZZ11__vector_41E3cnt>
    19ca:	30 93 94 47 	sts	0x4794, r19	; 0x804794 <_ZZ11__vector_41E3cnt+0x1>
    19ce:	8b 32       	cpi	r24, 0x2B	; 43
    19d0:	91 40       	sbci	r25, 0x01	; 1
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <__vector_41+0x5e>
    19d4:	86 c3       	rjmp	.+1804   	; 0x20e2 <__vector_41+0x76a>
    19d6:	10 92 93 47 	sts	0x4793, r1	; 0x804793 <_ZZ11__vector_41E3cnt>
    19da:	10 92 94 47 	sts	0x4794, r1	; 0x804794 <_ZZ11__vector_41E3cnt+0x1>
    19de:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    19e2:	81 11       	cpse	r24, r1
    19e4:	03 c0       	rjmp	.+6      	; 0x19ec <__vector_41+0x74>
    19e6:	8a b1       	in	r24, 0x0a	; 10
    19e8:	80 64       	ori	r24, 0x40	; 64
    19ea:	8a b9       	out	0x0a, r24	; 10
    19ec:	0e 94 7f 22 	call	0x44fe	; 0x44fe <_Z18antennaIsConnectedv>
    19f0:	81 11       	cpse	r24, r1
    19f2:	0a c0       	rjmp	.+20     	; 0x1a08 <__vector_41+0x90>
    19f4:	90 91 27 47 	lds	r25, 0x4727	; 0x804727 <g_antenna_connect_state>
    19f8:	91 30       	cpi	r25, 0x01	; 1
    19fa:	19 f1       	breq	.+70     	; 0x1a42 <__vector_41+0xca>
    19fc:	91 e0       	ldi	r25, 0x01	; 1
    19fe:	90 93 27 47 	sts	0x4727, r25	; 0x804727 <g_antenna_connect_state>
    1a02:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a06:	1d c0       	rjmp	.+58     	; 0x1a42 <__vector_41+0xca>
    1a08:	90 91 27 47 	lds	r25, 0x4727	; 0x804727 <g_antenna_connect_state>
    1a0c:	91 30       	cpi	r25, 0x01	; 1
    1a0e:	c9 f4       	brne	.+50     	; 0x1a42 <__vector_41+0xca>
    1a10:	90 91 95 47 	lds	r25, 0x4795	; 0x804795 <_ZZ11__vector_41E26lastAntennaConnectionState>
    1a14:	89 13       	cpse	r24, r25
    1a16:	12 c0       	rjmp	.+36     	; 0x1a3c <__vector_41+0xc4>
    1a18:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a1c:	99 23       	and	r25, r25
    1a1e:	89 f0       	breq	.+34     	; 0x1a42 <__vector_41+0xca>
    1a20:	91 50       	subi	r25, 0x01	; 1
    1a22:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a26:	91 11       	cpse	r25, r1
    1a28:	0c c0       	rjmp	.+24     	; 0x1a42 <__vector_41+0xca>
    1a2a:	10 92 27 47 	sts	0x4727, r1	; 0x804727 <g_antenna_connect_state>
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a34:	93 e0       	ldi	r25, 0x03	; 3
    1a36:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <__vector_41+0xca>
    1a3c:	93 e0       	ldi	r25, 0x03	; 3
    1a3e:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    1a42:	80 93 95 47 	sts	0x4795, r24	; 0x804795 <_ZZ11__vector_41E26lastAntennaConnectionState>
    1a46:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <system_tick>
    1a4a:	10 91 6d 47 	lds	r17, 0x476D	; 0x80476d <_ZL10g_sleeping>
    1a4e:	11 23       	and	r17, r17
    1a50:	a9 f1       	breq	.+106    	; 0x1abc <__vector_41+0x144>
    1a52:	80 91 6e 47 	lds	r24, 0x476E	; 0x80476e <_ZL23g_seconds_left_to_sleep>
    1a56:	90 91 6f 47 	lds	r25, 0x476F	; 0x80476f <_ZL23g_seconds_left_to_sleep+0x1>
    1a5a:	a0 91 70 47 	lds	r26, 0x4770	; 0x804770 <_ZL23g_seconds_left_to_sleep+0x2>
    1a5e:	b0 91 71 47 	lds	r27, 0x4771	; 0x804771 <_ZL23g_seconds_left_to_sleep+0x3>
    1a62:	89 2b       	or	r24, r25
    1a64:	8a 2b       	or	r24, r26
    1a66:	8b 2b       	or	r24, r27
    1a68:	99 f0       	breq	.+38     	; 0x1a90 <__vector_41+0x118>
    1a6a:	80 91 6e 47 	lds	r24, 0x476E	; 0x80476e <_ZL23g_seconds_left_to_sleep>
    1a6e:	90 91 6f 47 	lds	r25, 0x476F	; 0x80476f <_ZL23g_seconds_left_to_sleep+0x1>
    1a72:	a0 91 70 47 	lds	r26, 0x4770	; 0x804770 <_ZL23g_seconds_left_to_sleep+0x2>
    1a76:	b0 91 71 47 	lds	r27, 0x4771	; 0x804771 <_ZL23g_seconds_left_to_sleep+0x3>
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	a1 09       	sbc	r26, r1
    1a7e:	b1 09       	sbc	r27, r1
    1a80:	80 93 6e 47 	sts	0x476E, r24	; 0x80476e <_ZL23g_seconds_left_to_sleep>
    1a84:	90 93 6f 47 	sts	0x476F, r25	; 0x80476f <_ZL23g_seconds_left_to_sleep+0x1>
    1a88:	a0 93 70 47 	sts	0x4770, r26	; 0x804770 <_ZL23g_seconds_left_to_sleep+0x2>
    1a8c:	b0 93 71 47 	sts	0x4771, r27	; 0x804771 <_ZL23g_seconds_left_to_sleep+0x3>
    1a90:	80 91 6e 47 	lds	r24, 0x476E	; 0x80476e <_ZL23g_seconds_left_to_sleep>
    1a94:	90 91 6f 47 	lds	r25, 0x476F	; 0x80476f <_ZL23g_seconds_left_to_sleep+0x1>
    1a98:	a0 91 70 47 	lds	r26, 0x4770	; 0x804770 <_ZL23g_seconds_left_to_sleep+0x2>
    1a9c:	b0 91 71 47 	lds	r27, 0x4771	; 0x804771 <_ZL23g_seconds_left_to_sleep+0x3>
    1aa0:	89 2b       	or	r24, r25
    1aa2:	8a 2b       	or	r24, r26
    1aa4:	8b 2b       	or	r24, r27
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <__vector_41+0x134>
    1aa8:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
    1aac:	11 23       	and	r17, r17
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <__vector_41+0x13a>
    1ab0:	18 c3       	rjmp	.+1584   	; 0x20e2 <__vector_41+0x76a>
    1ab2:	10 92 6c 47 	sts	0x476C, r1	; 0x80476c <_ZL13g_go_to_sleep>
    1ab6:	10 92 6d 47 	sts	0x476D, r1	; 0x80476d <_ZL10g_sleeping>
    1aba:	13 c3       	rjmp	.+1574   	; 0x20e2 <__vector_41+0x76a>
    1abc:	19 82       	std	Y+1, r1	; 0x01
    1abe:	1a 82       	std	Y+2, r1	; 0x02
    1ac0:	1b 82       	std	Y+3, r1	; 0x03
    1ac2:	1c 82       	std	Y+4, r1	; 0x04
    1ac4:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1ac8:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1acc:	89 2b       	or	r24, r25
    1ace:	49 f0       	breq	.+18     	; 0x1ae2 <__vector_41+0x16a>
    1ad0:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1ad4:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1ade:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1ae2:	80 91 69 47 	lds	r24, 0x4769	; 0x804769 <g_event_commenced>
    1ae6:	88 23       	and	r24, r24
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <__vector_41+0x174>
    1aea:	52 c0       	rjmp	.+164    	; 0x1b90 <__vector_41+0x218>
    1aec:	40 91 64 47 	lds	r20, 0x4764	; 0x804764 <g_event_finish_time>
    1af0:	50 91 65 47 	lds	r21, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    1af4:	60 91 66 47 	lds	r22, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    1af8:	70 91 67 47 	lds	r23, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    1afc:	45 2b       	or	r20, r21
    1afe:	46 2b       	or	r20, r22
    1b00:	47 2b       	or	r20, r23
    1b02:	51 f0       	breq	.+20     	; 0x1b18 <__vector_41+0x1a0>
    1b04:	90 91 6a 47 	lds	r25, 0x476A	; 0x80476a <g_check_for_next_event>
    1b08:	91 11       	cpse	r25, r1
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <__vector_41+0x1a4>
    1b0c:	90 91 30 47 	lds	r25, 0x4730	; 0x804730 <_ZL20g_shutting_down_wifi>
    1b10:	99 23       	and	r25, r25
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <__vector_41+0x1a6>
    1b14:	81 2f       	mov	r24, r17
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <__vector_41+0x1a6>
    1b18:	81 2f       	mov	r24, r17
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <__vector_41+0x1a6>
    1b1c:	81 2f       	mov	r24, r17
    1b1e:	88 23       	and	r24, r24
    1b20:	b9 f1       	breq	.+110    	; 0x1b90 <__vector_41+0x218>
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    1b2a:	49 81       	ldd	r20, Y+1	; 0x01
    1b2c:	5a 81       	ldd	r21, Y+2	; 0x02
    1b2e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b30:	7c 81       	ldd	r23, Y+4	; 0x04
    1b32:	80 91 64 47 	lds	r24, 0x4764	; 0x804764 <g_event_finish_time>
    1b36:	90 91 65 47 	lds	r25, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    1b3a:	a0 91 66 47 	lds	r26, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    1b3e:	b0 91 67 47 	lds	r27, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    1b42:	48 17       	cp	r20, r24
    1b44:	59 07       	cpc	r21, r25
    1b46:	6a 07       	cpc	r22, r26
    1b48:	7b 07       	cpc	r23, r27
    1b4a:	10 f1       	brcs	.+68     	; 0x1b90 <__vector_41+0x218>
    1b4c:	8c ef       	ldi	r24, 0xFC	; 252
    1b4e:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1b52:	10 92 28 47 	sts	0x4728, r1	; 0x804728 <_ZL12g_on_the_air>
    1b56:	10 92 29 47 	sts	0x4729, r1	; 0x804729 <_ZL12g_on_the_air+0x1>
    1b5a:	10 92 2a 47 	sts	0x472A, r1	; 0x80472a <_ZL12g_on_the_air+0x2>
    1b5e:	10 92 2b 47 	sts	0x472B, r1	; 0x80472b <_ZL12g_on_the_air+0x3>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	0e 94 5e 45 	call	0x8abc	; 0x8abc <_Z14keyTransmitterb>
    1b68:	10 92 68 47 	sts	0x4768, r1	; 0x804768 <g_event_enabled>
    1b6c:	10 92 69 47 	sts	0x4769, r1	; 0x804769 <g_event_commenced>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	80 93 6a 47 	sts	0x476A, r24	; 0x80476a <g_check_for_next_event>
    1b76:	8a e5       	ldi	r24, 0x5A	; 90
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1b7e:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1b82:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1b86:	88 23       	and	r24, r24
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <__vector_41+0x218>
    1b8a:	8c e3       	ldi	r24, 0x3C	; 60
    1b8c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b90:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    1b94:	88 23       	and	r24, r24
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <__vector_41+0x222>
    1b98:	32 c2       	rjmp	.+1124   	; 0x1ffe <__vector_41+0x686>
    1b9a:	00 91 69 47 	lds	r16, 0x4769	; 0x804769 <g_event_commenced>
    1b9e:	00 23       	and	r16, r16
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <__vector_41+0x22c>
    1ba2:	a2 c1       	rjmp	.+836    	; 0x1ee8 <__vector_41+0x570>
    1ba4:	80 91 2c 47 	lds	r24, 0x472C	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1ba8:	90 91 2d 47 	lds	r25, 0x472D	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1bac:	89 2b       	or	r24, r25
    1bae:	49 f0       	breq	.+18     	; 0x1bc2 <__vector_41+0x24a>
    1bb0:	80 91 2c 47 	lds	r24, 0x472C	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1bb4:	90 91 2d 47 	lds	r25, 0x472D	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1bbe:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1bc2:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1bc6:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1bca:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1bce:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1bd2:	89 2b       	or	r24, r25
    1bd4:	8a 2b       	or	r24, r26
    1bd6:	8b 2b       	or	r24, r27
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <__vector_41+0x264>
    1bda:	11 c2       	rjmp	.+1058   	; 0x1ffe <__vector_41+0x686>
    1bdc:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1be0:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1be4:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1be8:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1bec:	18 16       	cp	r1, r24
    1bee:	19 06       	cpc	r1, r25
    1bf0:	1a 06       	cpc	r1, r26
    1bf2:	1b 06       	cpc	r1, r27
    1bf4:	0c f0       	brlt	.+2      	; 0x1bf8 <__vector_41+0x280>
    1bf6:	26 c1       	rjmp	.+588    	; 0x1e44 <__vector_41+0x4cc>
    1bf8:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1bfc:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1c00:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1c04:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	a1 09       	sbc	r26, r1
    1c0c:	b1 09       	sbc	r27, r1
    1c0e:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1c12:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1c16:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1c1a:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1c1e:	80 91 2c 47 	lds	r24, 0x472C	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1c22:	90 91 2d 47 	lds	r25, 0x472D	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1c26:	89 2b       	or	r24, r25
    1c28:	41 f4       	brne	.+16     	; 0x1c3a <__vector_41+0x2c2>
    1c2a:	80 91 5c 47 	lds	r24, 0x475C	; 0x80475c <g_time_needed_for_ID>
    1c2e:	90 91 5d 47 	lds	r25, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    1c32:	89 2b       	or	r24, r25
    1c34:	21 f4       	brne	.+8      	; 0x1c3e <__vector_41+0x2c6>
    1c36:	81 2f       	mov	r24, r17
    1c38:	03 c0       	rjmp	.+6      	; 0x1c40 <__vector_41+0x2c8>
    1c3a:	81 2f       	mov	r24, r17
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <__vector_41+0x2c8>
    1c3e:	80 2f       	mov	r24, r16
    1c40:	88 23       	and	r24, r24
    1c42:	81 f1       	breq	.+96     	; 0x1ca4 <__vector_41+0x32c>
    1c44:	80 91 5c 47 	lds	r24, 0x475C	; 0x80475c <g_time_needed_for_ID>
    1c48:	90 91 5d 47 	lds	r25, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    1c4c:	a0 e0       	ldi	r26, 0x00	; 0
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	40 91 28 47 	lds	r20, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1c54:	50 91 29 47 	lds	r21, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1c58:	60 91 2a 47 	lds	r22, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1c5c:	70 91 2b 47 	lds	r23, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1c60:	84 17       	cp	r24, r20
    1c62:	95 07       	cpc	r25, r21
    1c64:	a6 07       	cpc	r26, r22
    1c66:	b7 07       	cpc	r27, r23
    1c68:	e9 f4       	brne	.+58     	; 0x1ca4 <__vector_41+0x32c>
    1c6a:	8f ee       	ldi	r24, 0xEF	; 239
    1c6c:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1c70:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1c74:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1c78:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1c7c:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1c80:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1c84:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    1c88:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1c8c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1c90:	1d 82       	std	Y+5, r1	; 0x05
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	be 01       	movw	r22, r28
    1c98:	6b 5f       	subi	r22, 0xFB	; 251
    1c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9c:	87 e4       	ldi	r24, 0x47	; 71
    1c9e:	97 e4       	ldi	r25, 0x47	; 71
    1ca0:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
    1ca4:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1ca8:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1cac:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1cb0:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1cb4:	89 2b       	or	r24, r25
    1cb6:	8a 2b       	or	r24, r26
    1cb8:	8b 2b       	or	r24, r27
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <__vector_41+0x346>
    1cbc:	a0 c1       	rjmp	.+832    	; 0x1ffe <__vector_41+0x686>
    1cbe:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1cc2:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1cc6:	89 2b       	or	r24, r25
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <__vector_41+0x354>
    1cca:	a3 c0       	rjmp	.+326    	; 0x1e12 <__vector_41+0x49a>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	0e 94 5e 45 	call	0x8abc	; 0x8abc <_Z14keyTransmitterb>
    1cd2:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1cd6:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1cda:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1cde:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1ce2:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1ce6:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1cea:	05 2e       	mov	r0, r21
    1cec:	00 0c       	add	r0, r0
    1cee:	66 0b       	sbc	r22, r22
    1cf0:	77 0b       	sbc	r23, r23
    1cf2:	84 1b       	sub	r24, r20
    1cf4:	95 0b       	sbc	r25, r21
    1cf6:	a6 0b       	sbc	r26, r22
    1cf8:	b7 0b       	sbc	r27, r23
    1cfa:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1cfe:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1d02:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1d06:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	be 01       	movw	r22, r28
    1d14:	6b 5f       	subi	r22, 0xFB	; 251
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	82 e3       	ldi	r24, 0x32	; 50
    1d1a:	97 e4       	ldi	r25, 0x47	; 71
    1d1c:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
    1d20:	8e ef       	ldi	r24, 0xFE	; 254
    1d22:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1d26:	ce 01       	movw	r24, r28
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    1d2e:	29 81       	ldd	r18, Y+1	; 0x01
    1d30:	3a 81       	ldd	r19, Y+2	; 0x02
    1d32:	4b 81       	ldd	r20, Y+3	; 0x03
    1d34:	5c 81       	ldd	r21, Y+4	; 0x04
    1d36:	80 91 64 47 	lds	r24, 0x4764	; 0x804764 <g_event_finish_time>
    1d3a:	90 91 65 47 	lds	r25, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    1d3e:	a0 91 66 47 	lds	r26, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    1d42:	b0 91 67 47 	lds	r27, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    1d46:	28 17       	cp	r18, r24
    1d48:	39 07       	cpc	r19, r25
    1d4a:	4a 07       	cpc	r20, r26
    1d4c:	5b 07       	cpc	r21, r27
    1d4e:	58 f4       	brcc	.+22     	; 0x1d66 <__vector_41+0x3ee>
    1d50:	60 91 64 47 	lds	r22, 0x4764	; 0x804764 <g_event_finish_time>
    1d54:	70 91 65 47 	lds	r23, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    1d58:	80 91 66 47 	lds	r24, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    1d5c:	90 91 67 47 	lds	r25, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    1d60:	0e 94 9a 47 	call	0x8f34	; 0x8f34 <_Z7timeDifmm>
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <__vector_41+0x3f4>
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    1d70:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d74:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    1d78:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1d7c:	24 0f       	add	r18, r20
    1d7e:	35 1f       	adc	r19, r21
    1d80:	21 5f       	subi	r18, 0xF1	; 241
    1d82:	3f 4f       	sbci	r19, 0xFF	; 255
    1d84:	03 2e       	mov	r0, r19
    1d86:	00 0c       	add	r0, r0
    1d88:	44 0b       	sbc	r20, r20
    1d8a:	55 0b       	sbc	r21, r21
    1d8c:	26 17       	cp	r18, r22
    1d8e:	37 07       	cpc	r19, r23
    1d90:	48 07       	cpc	r20, r24
    1d92:	59 07       	cpc	r21, r25
    1d94:	0c f0       	brlt	.+2      	; 0x1d98 <__vector_41+0x420>
    1d96:	33 c1       	rjmp	.+614    	; 0x1ffe <__vector_41+0x686>
    1d98:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d9c:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1da0:	40 97       	sbiw	r24, 0x10	; 16
    1da2:	2c f0       	brlt	.+10     	; 0x1dae <__vector_41+0x436>
    1da4:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1da8:	81 11       	cpse	r24, r1
    1daa:	01 c0       	rjmp	.+2      	; 0x1dae <__vector_41+0x436>
    1dac:	10 2f       	mov	r17, r16
    1dae:	11 23       	and	r17, r17
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <__vector_41+0x43c>
    1db2:	25 c1       	rjmp	.+586    	; 0x1ffe <__vector_41+0x686>
    1db4:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1db8:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1dbc:	0a 97       	sbiw	r24, 0x0a	; 10
    1dbe:	09 2e       	mov	r0, r25
    1dc0:	00 0c       	add	r0, r0
    1dc2:	aa 0b       	sbc	r26, r26
    1dc4:	bb 0b       	sbc	r27, r27
    1dc6:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1dca:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1dce:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1dd2:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	80 93 31 47 	sts	0x4731, r24	; 0x804731 <_ZL11g_sleepType>
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	80 93 6c 47 	sts	0x476C, r24	; 0x80476c <_ZL13g_go_to_sleep>
    1de2:	80 91 2c 47 	lds	r24, 0x472C	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1de6:	90 91 2d 47 	lds	r25, 0x472D	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1dea:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep>
    1dee:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1df2:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1df6:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1dfa:	84 1b       	sub	r24, r20
    1dfc:	95 0b       	sbc	r25, r21
    1dfe:	18 16       	cp	r1, r24
    1e00:	19 06       	cpc	r1, r25
    1e02:	14 f0       	brlt	.+4      	; 0x1e08 <__vector_41+0x490>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1e0c:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1e10:	f6 c0       	rjmp	.+492    	; 0x1ffe <__vector_41+0x686>
    1e12:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1e16:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1e1a:	09 2e       	mov	r0, r25
    1e1c:	00 0c       	add	r0, r0
    1e1e:	aa 0b       	sbc	r26, r26
    1e20:	bb 0b       	sbc	r27, r27
    1e22:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1e26:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e2a:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e2e:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e32:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1e36:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    1e3a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1e3e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1e42:	dd c0       	rjmp	.+442    	; 0x1ffe <__vector_41+0x686>
    1e44:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1e48:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e4c:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e50:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e54:	bb 23       	and	r27, r27
    1e56:	0c f0       	brlt	.+2      	; 0x1e5a <__vector_41+0x4e2>
    1e58:	d2 c0       	rjmp	.+420    	; 0x1ffe <__vector_41+0x686>
    1e5a:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1e5e:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e62:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e66:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	a1 1d       	adc	r26, r1
    1e6e:	b1 1d       	adc	r27, r1
    1e70:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1e74:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e78:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e7c:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e80:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    1e84:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    1e88:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    1e8c:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    1e90:	89 2b       	or	r24, r25
    1e92:	8a 2b       	or	r24, r26
    1e94:	8b 2b       	or	r24, r27
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <__vector_41+0x522>
    1e98:	b2 c0       	rjmp	.+356    	; 0x1ffe <__vector_41+0x686>
    1e9a:	8d ef       	ldi	r24, 0xFD	; 253
    1e9c:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1ea0:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1ea4:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1ea8:	09 2e       	mov	r0, r25
    1eaa:	00 0c       	add	r0, r0
    1eac:	aa 0b       	sbc	r26, r26
    1eae:	bb 0b       	sbc	r27, r27
    1eb0:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1eb4:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1eb8:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1ebc:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1ec0:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1ec4:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    1ec8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1ecc:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	be 01       	movw	r22, r28
    1eda:	6b 5f       	subi	r22, 0xFB	; 251
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	82 e3       	ldi	r24, 0x32	; 50
    1ee0:	97 e4       	ldi	r25, 0x47	; 71
    1ee2:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
    1ee6:	8b c0       	rjmp	.+278    	; 0x1ffe <__vector_41+0x686>
    1ee8:	80 91 60 47 	lds	r24, 0x4760	; 0x804760 <g_event_start_time>
    1eec:	90 91 61 47 	lds	r25, 0x4761	; 0x804761 <g_event_start_time+0x1>
    1ef0:	a0 91 62 47 	lds	r26, 0x4762	; 0x804762 <g_event_start_time+0x2>
    1ef4:	b0 91 63 47 	lds	r27, 0x4763	; 0x804763 <g_event_start_time+0x3>
    1ef8:	89 2b       	or	r24, r25
    1efa:	8a 2b       	or	r24, r26
    1efc:	8b 2b       	or	r24, r27
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <__vector_41+0x58a>
    1f00:	7e c0       	rjmp	.+252    	; 0x1ffe <__vector_41+0x686>
    1f02:	ce 01       	movw	r24, r28
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    1f0a:	49 81       	ldd	r20, Y+1	; 0x01
    1f0c:	5a 81       	ldd	r21, Y+2	; 0x02
    1f0e:	6b 81       	ldd	r22, Y+3	; 0x03
    1f10:	7c 81       	ldd	r23, Y+4	; 0x04
    1f12:	80 91 60 47 	lds	r24, 0x4760	; 0x804760 <g_event_start_time>
    1f16:	90 91 61 47 	lds	r25, 0x4761	; 0x804761 <g_event_start_time+0x1>
    1f1a:	a0 91 62 47 	lds	r26, 0x4762	; 0x804762 <g_event_start_time+0x2>
    1f1e:	b0 91 63 47 	lds	r27, 0x4763	; 0x804763 <g_event_start_time+0x3>
    1f22:	48 17       	cp	r20, r24
    1f24:	59 07       	cpc	r21, r25
    1f26:	6a 07       	cpc	r22, r26
    1f28:	7b 07       	cpc	r23, r27
    1f2a:	08 f4       	brcc	.+2      	; 0x1f2e <__vector_41+0x5b6>
    1f2c:	68 c0       	rjmp	.+208    	; 0x1ffe <__vector_41+0x686>
    1f2e:	80 91 5e 47 	lds	r24, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    1f32:	90 91 5f 47 	lds	r25, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    1f36:	89 2b       	or	r24, r25
    1f38:	59 f1       	breq	.+86     	; 0x1f90 <__vector_41+0x618>
    1f3a:	8e ef       	ldi	r24, 0xFE	; 254
    1f3c:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1f40:	80 91 5e 47 	lds	r24, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    1f44:	90 91 5f 47 	lds	r25, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    1f48:	91 95       	neg	r25
    1f4a:	81 95       	neg	r24
    1f4c:	91 09       	sbc	r25, r1
    1f4e:	09 2e       	mov	r0, r25
    1f50:	00 0c       	add	r0, r0
    1f52:	aa 0b       	sbc	r26, r26
    1f54:	bb 0b       	sbc	r27, r27
    1f56:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1f5a:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1f5e:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1f62:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1f66:	20 91 5e 47 	lds	r18, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    1f6a:	30 91 5f 47 	lds	r19, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    1f6e:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f72:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f76:	82 0f       	add	r24, r18
    1f78:	93 1f       	adc	r25, r19
    1f7a:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    1f7e:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    1f82:	82 1b       	sub	r24, r18
    1f84:	93 0b       	sbc	r25, r19
    1f86:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1f8a:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1f8e:	34 c0       	rjmp	.+104    	; 0x1ff8 <__vector_41+0x680>
    1f90:	8d ef       	ldi	r24, 0xFD	; 253
    1f92:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    1f96:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f9a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f9e:	09 2e       	mov	r0, r25
    1fa0:	00 0c       	add	r0, r0
    1fa2:	aa 0b       	sbc	r26, r26
    1fa4:	bb 0b       	sbc	r27, r27
    1fa6:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    1faa:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    1fae:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    1fb2:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    1fb6:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1fba:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1fbe:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    1fc2:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    1fc6:	82 1b       	sub	r24, r18
    1fc8:	93 0b       	sbc	r25, r19
    1fca:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    1fce:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    1fd2:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1fd6:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    1fda:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1fde:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	be 01       	movw	r22, r28
    1fec:	6b 5f       	subi	r22, 0xFB	; 251
    1fee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff0:	82 e3       	ldi	r24, 0x32	; 50
    1ff2:	97 e4       	ldi	r25, 0x47	; 71
    1ff4:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	80 93 69 47 	sts	0x4769, r24	; 0x804769 <g_event_commenced>
    1ffe:	80 91 2f 47 	lds	r24, 0x472F	; 0x80472f <_ZL19g_wifi_enable_delay>
    2002:	88 23       	and	r24, r24
    2004:	e1 f0       	breq	.+56     	; 0x203e <__vector_41+0x6c6>
    2006:	80 91 2f 47 	lds	r24, 0x472F	; 0x80472f <_ZL19g_wifi_enable_delay>
    200a:	81 50       	subi	r24, 0x01	; 1
    200c:	80 93 2f 47 	sts	0x472F, r24	; 0x80472f <_ZL19g_wifi_enable_delay>
    2010:	80 91 2f 47 	lds	r24, 0x472F	; 0x80472f <_ZL19g_wifi_enable_delay>
    2014:	85 30       	cpi	r24, 0x05	; 5
    2016:	39 f4       	brne	.+14     	; 0x2026 <__vector_41+0x6ae>
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 c2 29 	call	0x5384	; 0x5384 <_Z10wifi_powerb>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	0e 94 cc 29 	call	0x5398	; 0x5398 <_Z10wifi_resetb>
    2024:	5e c0       	rjmp	.+188    	; 0x20e2 <__vector_41+0x76a>
    2026:	80 91 2f 47 	lds	r24, 0x472F	; 0x80472f <_ZL19g_wifi_enable_delay>
    202a:	81 11       	cpse	r24, r1
    202c:	5a c0       	rjmp	.+180    	; 0x20e2 <__vector_41+0x76a>
    202e:	46 e0       	ldi	r20, 0x06	; 6
    2030:	60 e8       	ldi	r22, 0x80	; 128
    2032:	75 e2       	ldi	r23, 0x25	; 37
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <_Z12linkbus_initm14USART_Number_t>
    203c:	52 c0       	rjmp	.+164    	; 0x20e2 <__vector_41+0x76a>
    203e:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    2042:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    2046:	89 2b       	or	r24, r25
    2048:	69 f0       	breq	.+26     	; 0x2064 <__vector_41+0x6ec>
    204a:	80 91 30 47 	lds	r24, 0x4730	; 0x804730 <_ZL20g_shutting_down_wifi>
    204e:	81 11       	cpse	r24, r1
    2050:	0c c0       	rjmp	.+24     	; 0x206a <__vector_41+0x6f2>
    2052:	90 91 6a 47 	lds	r25, 0x476A	; 0x80476a <g_check_for_next_event>
    2056:	91 11       	cpse	r25, r1
    2058:	08 c0       	rjmp	.+16     	; 0x206a <__vector_41+0x6f2>
    205a:	90 91 6b 47 	lds	r25, 0x476B	; 0x80476b <g_waiting_for_next_event>
    205e:	99 23       	and	r25, r25
    2060:	19 f0       	breq	.+6      	; 0x2068 <__vector_41+0x6f0>
    2062:	03 c0       	rjmp	.+6      	; 0x206a <__vector_41+0x6f2>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	01 c0       	rjmp	.+2      	; 0x206a <__vector_41+0x6f2>
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	88 23       	and	r24, r24
    206c:	99 f1       	breq	.+102    	; 0x20d4 <__vector_41+0x75c>
    206e:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2072:	88 23       	and	r24, r24
    2074:	79 f1       	breq	.+94     	; 0x20d4 <__vector_41+0x75c>
    2076:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    207a:	81 50       	subi	r24, 0x01	; 1
    207c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2080:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2084:	81 11       	cpse	r24, r1
    2086:	26 c0       	rjmp	.+76     	; 0x20d4 <__vector_41+0x75c>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	0e 94 cc 29 	call	0x5398	; 0x5398 <_Z10wifi_resetb>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	0e 94 c2 29 	call	0x5384	; 0x5384 <_Z10wifi_powerb>
    2094:	10 92 30 47 	sts	0x4730, r1	; 0x804730 <_ZL20g_shutting_down_wifi>
    2098:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    209c:	81 11       	cpse	r24, r1
    209e:	12 c0       	rjmp	.+36     	; 0x20c4 <__vector_41+0x74c>
    20a0:	84 e0       	ldi	r24, 0x04	; 4
    20a2:	80 93 31 47 	sts	0x4731, r24	; 0x804731 <_ZL11g_sleepType>
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	80 93 6c 47 	sts	0x476C, r24	; 0x80476c <_ZL13g_go_to_sleep>
    20ac:	8f ef       	ldi	r24, 0xFF	; 255
    20ae:	9f ef       	ldi	r25, 0xFF	; 255
    20b0:	dc 01       	movw	r26, r24
    20b2:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    20b6:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    20ba:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    20be:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    20c2:	06 c0       	rjmp	.+12     	; 0x20d0 <__vector_41+0x758>
    20c4:	80 91 31 47 	lds	r24, 0x4731	; 0x804731 <_ZL11g_sleepType>
    20c8:	83 30       	cpi	r24, 0x03	; 3
    20ca:	11 f4       	brne	.+4      	; 0x20d0 <__vector_41+0x758>
    20cc:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_Z12eventEnabledv>
    20d0:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    20d4:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    20d8:	88 23       	and	r24, r24
    20da:	19 f0       	breq	.+6      	; 0x20e2 <__vector_41+0x76a>
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	80 93 2e 47 	sts	0x472E, r24	; 0x80472e <_ZL16g_report_seconds>
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    20e8:	25 96       	adiw	r28, 0x05	; 5
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	ff 91       	pop	r31
    20f4:	ef 91       	pop	r30
    20f6:	bf 91       	pop	r27
    20f8:	af 91       	pop	r26
    20fa:	9f 91       	pop	r25
    20fc:	8f 91       	pop	r24
    20fe:	7f 91       	pop	r23
    2100:	6f 91       	pop	r22
    2102:	5f 91       	pop	r21
    2104:	4f 91       	pop	r20
    2106:	3f 91       	pop	r19
    2108:	2f 91       	pop	r18
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	0f 90       	pop	r0
    2110:	0b be       	out	0x3b, r0	; 59
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	0f 90       	pop	r0
    2118:	1f 90       	pop	r1
    211a:	18 95       	reti

0000211c <__vector_12>:
    211c:	1f 92       	push	r1
    211e:	0f 92       	push	r0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	0f 92       	push	r0
    2124:	11 24       	eor	r1, r1
    2126:	0b b6       	in	r0, 0x3b	; 59
    2128:	0f 92       	push	r0
    212a:	2f 93       	push	r18
    212c:	3f 93       	push	r19
    212e:	4f 93       	push	r20
    2130:	5f 93       	push	r21
    2132:	6f 93       	push	r22
    2134:	7f 93       	push	r23
    2136:	8f 93       	push	r24
    2138:	9f 93       	push	r25
    213a:	af 93       	push	r26
    213c:	bf 93       	push	r27
    213e:	ef 93       	push	r30
    2140:	ff 93       	push	r31
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	00 d0       	rcall	.+0      	; 0x2148 <__vector_12+0x2c>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    2150:	80 ff       	sbrs	r24, 0
    2152:	ca c0       	rjmp	.+404    	; 0x22e8 <__vector_12+0x1cc>
    2154:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2158:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    215c:	89 2b       	or	r24, r25
    215e:	49 f0       	breq	.+18     	; 0x2172 <__vector_12+0x56>
    2160:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2164:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    216e:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2172:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2176:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    217a:	89 2b       	or	r24, r25
    217c:	49 f0       	breq	.+18     	; 0x2190 <__vector_12+0x74>
    217e:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2182:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    218c:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2190:	80 91 25 47 	lds	r24, 0x4725	; 0x804725 <_ZL21g_util_tick_countdown>
    2194:	90 91 26 47 	lds	r25, 0x4726	; 0x804726 <_ZL21g_util_tick_countdown+0x1>
    2198:	89 2b       	or	r24, r25
    219a:	49 f0       	breq	.+18     	; 0x21ae <__vector_12+0x92>
    219c:	80 91 25 47 	lds	r24, 0x4725	; 0x804725 <_ZL21g_util_tick_countdown>
    21a0:	90 91 26 47 	lds	r25, 0x4726	; 0x804726 <_ZL21g_util_tick_countdown+0x1>
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	80 93 25 47 	sts	0x4725, r24	; 0x804725 <_ZL21g_util_tick_countdown>
    21aa:	90 93 26 47 	sts	0x4726, r25	; 0x804726 <_ZL21g_util_tick_countdown+0x1>
    21ae:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    21b2:	88 23       	and	r24, r24
    21b4:	19 f0       	breq	.+6      	; 0x21bc <__vector_12+0xa0>
    21b6:	80 91 69 47 	lds	r24, 0x4769	; 0x804769 <g_event_commenced>
    21ba:	01 c0       	rjmp	.+2      	; 0x21be <__vector_12+0xa2>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	88 23       	and	r24, r24
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <__vector_12+0xa8>
    21c2:	92 c0       	rjmp	.+292    	; 0x22e8 <__vector_12+0x1cc>
    21c4:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    21c8:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    21cc:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    21d0:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    21d4:	18 16       	cp	r1, r24
    21d6:	19 06       	cpc	r1, r25
    21d8:	1a 06       	cpc	r1, r26
    21da:	1b 06       	cpc	r1, r27
    21dc:	0c f0       	brlt	.+2      	; 0x21e0 <__vector_12+0xc4>
    21de:	66 c0       	rjmp	.+204    	; 0x22ac <__vector_12+0x190>
    21e0:	80 91 96 47 	lds	r24, 0x4796	; 0x804796 <_ZZ11__vector_12E7codeInc>
    21e4:	90 91 97 47 	lds	r25, 0x4797	; 0x804797 <_ZZ11__vector_12E7codeInc+0x1>
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	09 f4       	brne	.+2      	; 0x21ee <__vector_12+0xd2>
    21ec:	47 c0       	rjmp	.+142    	; 0x227c <__vector_12+0x160>
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	80 93 96 47 	sts	0x4796, r24	; 0x804796 <_ZZ11__vector_12E7codeInc>
    21f4:	90 93 97 47 	sts	0x4797, r25	; 0x804797 <_ZZ11__vector_12E7codeInc+0x1>
    21f8:	89 2b       	or	r24, r25
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__vector_12+0xe2>
    21fc:	75 c0       	rjmp	.+234    	; 0x22e8 <__vector_12+0x1cc>
    21fe:	ae 01       	movw	r20, r28
    2200:	4f 5f       	subi	r20, 0xFF	; 255
    2202:	5f 4f       	sbci	r21, 0xFF	; 255
    2204:	be 01       	movw	r22, r28
    2206:	6e 5f       	subi	r22, 0xFE	; 254
    2208:	7f 4f       	sbci	r23, 0xFF	; 255
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
    2212:	80 93 98 47 	sts	0x4798, r24	; 0x804798 <_ZZ11__vector_12E3key>
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	81 11       	cpse	r24, r1
    221a:	25 c0       	rjmp	.+74     	; 0x2266 <__vector_12+0x14a>
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	88 23       	and	r24, r24
    2220:	11 f1       	breq	.+68     	; 0x2266 <__vector_12+0x14a>
    2222:	8d ef       	ldi	r24, 0xFD	; 253
    2224:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    2228:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    222c:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    2230:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2234:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	be 01       	movw	r22, r28
    2242:	6e 5f       	subi	r22, 0xFE	; 254
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	82 e3       	ldi	r24, 0x32	; 50
    2248:	97 e4       	ldi	r25, 0x47	; 71
    224a:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
    224e:	ae 01       	movw	r20, r28
    2250:	4f 5f       	subi	r20, 0xFF	; 255
    2252:	5f 4f       	sbci	r21, 0xFF	; 255
    2254:	be 01       	movw	r22, r28
    2256:	6e 5f       	subi	r22, 0xFE	; 254
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
    2262:	80 93 98 47 	sts	0x4798, r24	; 0x804798 <_ZZ11__vector_12E3key>
    2266:	80 91 98 47 	lds	r24, 0x4798	; 0x804798 <_ZZ11__vector_12E3key>
    226a:	88 23       	and	r24, r24
    226c:	e9 f1       	breq	.+122    	; 0x22e8 <__vector_12+0x1cc>
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	0e 94 5a 45 	call	0x8ab4	; 0x8ab4 <_Z18powerToTransmitterb>
    2274:	89 b1       	in	r24, 0x09	; 9
    2276:	8f 7b       	andi	r24, 0xBF	; 191
    2278:	89 b9       	out	0x09, r24	; 9
    227a:	36 c0       	rjmp	.+108    	; 0x22e8 <__vector_12+0x1cc>
    227c:	80 91 98 47 	lds	r24, 0x4798	; 0x804798 <_ZZ11__vector_12E3key>
    2280:	0e 94 5e 45 	call	0x8abc	; 0x8abc <_Z14keyTransmitterb>
    2284:	80 91 98 47 	lds	r24, 0x4798	; 0x804798 <_ZZ11__vector_12E3key>
    2288:	81 11       	cpse	r24, r1
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <__vector_12+0x178>
    228c:	89 b1       	in	r24, 0x09	; 9
    228e:	80 64       	ori	r24, 0x40	; 64
    2290:	89 b9       	out	0x09, r24	; 9
    2292:	03 c0       	rjmp	.+6      	; 0x229a <__vector_12+0x17e>
    2294:	89 b1       	in	r24, 0x09	; 9
    2296:	8f 7b       	andi	r24, 0xBF	; 191
    2298:	89 b9       	out	0x09, r24	; 9
    229a:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    229e:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    22a2:	80 93 96 47 	sts	0x4796, r24	; 0x804796 <_ZZ11__vector_12E7codeInc>
    22a6:	90 93 97 47 	sts	0x4797, r25	; 0x804797 <_ZZ11__vector_12E7codeInc+0x1>
    22aa:	1e c0       	rjmp	.+60     	; 0x22e8 <__vector_12+0x1cc>
    22ac:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    22b0:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    22b4:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    22b8:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    22bc:	89 2b       	or	r24, r25
    22be:	8a 2b       	or	r24, r26
    22c0:	8b 2b       	or	r24, r27
    22c2:	91 f4       	brne	.+36     	; 0x22e8 <__vector_12+0x1cc>
    22c4:	80 91 98 47 	lds	r24, 0x4798	; 0x804798 <_ZZ11__vector_12E3key>
    22c8:	88 23       	and	r24, r24
    22ca:	71 f0       	breq	.+28     	; 0x22e8 <__vector_12+0x1cc>
    22cc:	10 92 98 47 	sts	0x4798, r1	; 0x804798 <_ZZ11__vector_12E3key>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	0e 94 5e 45 	call	0x8abc	; 0x8abc <_Z14keyTransmitterb>
    22d6:	89 b1       	in	r24, 0x09	; 9
    22d8:	80 64       	ori	r24, 0x40	; 64
    22da:	89 b9       	out	0x09, r24	; 9
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	0e 94 5a 45 	call	0x8ab4	; 0x8ab4 <_Z18powerToTransmitterb>
    22e2:	8e ef       	ldi	r24, 0xFE	; 254
    22e4:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	ff 91       	pop	r31
    22f8:	ef 91       	pop	r30
    22fa:	bf 91       	pop	r27
    22fc:	af 91       	pop	r26
    22fe:	9f 91       	pop	r25
    2300:	8f 91       	pop	r24
    2302:	7f 91       	pop	r23
    2304:	6f 91       	pop	r22
    2306:	5f 91       	pop	r21
    2308:	4f 91       	pop	r20
    230a:	3f 91       	pop	r19
    230c:	2f 91       	pop	r18
    230e:	0f 90       	pop	r0
    2310:	0b be       	out	0x3b, r0	; 59
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	0f 90       	pop	r0
    2318:	1f 90       	pop	r1
    231a:	18 95       	reti

0000231c <main>:
    231c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <atmel_start_init>
    2320:	89 b1       	in	r24, 0x09	; 9
    2322:	80 64       	ori	r24, 0x40	; 64
    2324:	89 b9       	out	0x09, r24	; 9
    2326:	8c e7       	ldi	r24, 0x7C	; 124
    2328:	97 e4       	ldi	r25, 0x47	; 71
    232a:	0e 94 6e 33 	call	0x66dc	; 0x66dc <_ZN13EepromManager20initializeEEPROMVarsEv>
    232e:	8c e7       	ldi	r24, 0x7C	; 124
    2330:	97 e4       	ldi	r25, 0x47	; 71
    2332:	0e 94 82 32 	call	0x6504	; 0x6504 <_ZN13EepromManager11readNonVolsEv>
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	0e 94 42 29 	call	0x5284	; 0x5284 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
    233c:	0e 94 8f 3c 	call	0x791e	; 0x791e <sb_send_NewLine>
    2340:	87 e4       	ldi	r24, 0x47	; 71
    2342:	90 e4       	ldi	r25, 0x40	; 64
    2344:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2348:	84 e6       	ldi	r24, 0x64	; 100
    234a:	90 e4       	ldi	r25, 0x40	; 64
    234c:	9f 93       	push	r25
    234e:	8f 93       	push	r24
    2350:	88 e6       	ldi	r24, 0x68	; 104
    2352:	90 e4       	ldi	r25, 0x40	; 64
    2354:	9f 93       	push	r25
    2356:	8f 93       	push	r24
    2358:	81 ef       	ldi	r24, 0xF1	; 241
    235a:	96 e4       	ldi	r25, 0x46	; 70
    235c:	9f 93       	push	r25
    235e:	8f 93       	push	r24
    2360:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    2364:	81 ef       	ldi	r24, 0xF1	; 241
    2366:	96 e4       	ldi	r25, 0x46	; 70
    2368:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    236c:	85 e7       	ldi	r24, 0x75	; 117
    236e:	90 e4       	ldi	r25, 0x40	; 64
    2370:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2374:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <_Z16init_transmitterv>
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	82 3d       	cpi	r24, 0xD2	; 210
    2386:	31 f4       	brne	.+12     	; 0x2394 <main+0x78>
    2388:	0e 94 8f 3c 	call	0x791e	; 0x791e <sb_send_NewLine>
    238c:	8c eb       	ldi	r24, 0xBC	; 188
    238e:	91 e4       	ldi	r25, 0x41	; 65
    2390:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2394:	0e 94 46 22 	call	0x448c	; 0x448c <_Z8rtc_initv>
    2398:	8c 3f       	cpi	r24, 0xFC	; 252
    239a:	31 f4       	brne	.+12     	; 0x23a8 <main+0x8c>
    239c:	0e 94 8f 3c 	call	0x791e	; 0x791e <sb_send_NewLine>
    23a0:	87 ee       	ldi	r24, 0xE7	; 231
    23a2:	91 e4       	ldi	r25, 0x41	; 65
    23a4:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    23a8:	0e 94 d6 29 	call	0x53ac	; 0x53ac <_Z11wifiPresentv>
    23ac:	81 11       	cpse	r24, r1
    23ae:	06 c0       	rjmp	.+12     	; 0x23bc <main+0xa0>
    23b0:	0e 94 8f 3c 	call	0x791e	; 0x791e <sb_send_NewLine>
    23b4:	8f e0       	ldi	r24, 0x0F	; 15
    23b6:	92 e4       	ldi	r25, 0x42	; 66
    23b8:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    23bc:	0e 94 8f 3c 	call	0x791e	; 0x791e <sb_send_NewLine>
    23c0:	0e 94 84 3c 	call	0x7908	; 0x7908 <sb_send_NewPrompt>
    23c4:	6a ef       	ldi	r22, 0xFA	; 250
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	0e 94 61 44 	call	0x88c2	; 0x88c2 <util_delay_ms>
    23d0:	88 23       	and	r24, r24
    23d2:	c1 f3       	breq	.-16     	; 0x23c4 <main+0xa8>
    23d4:	0e 94 dd 18 	call	0x31ba	; 0x31ba <_Z17handleLinkBusMsgsv>
    23d8:	0e 94 ef 11 	call	0x23de	; 0x23de <_Z19handleSerialBusMsgsv>
    23dc:	f3 cf       	rjmp	.-26     	; 0x23c4 <main+0xa8>

000023de <_Z19handleSerialBusMsgsv>:
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	c6 59       	subi	r28, 0x96	; 150
    23f0:	d1 09       	sbc	r29, r1
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0e 94 bd 3b 	call	0x777a	; 0x777a <nextFullSBRxBuffer>
    23fa:	8e 83       	std	Y+6, r24	; 0x06
    23fc:	9f 83       	std	Y+7, r25	; 0x07
    23fe:	21 e0       	ldi	r18, 0x01	; 1
    2400:	8e 81       	ldd	r24, Y+6	; 0x06
    2402:	9f 81       	ldd	r25, Y+7	; 0x07
    2404:	89 2b       	or	r24, r25
    2406:	09 f4       	brne	.+2      	; 0x240a <_Z19handleSerialBusMsgsv+0x2c>
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	22 23       	and	r18, r18
    240c:	09 f4       	brne	.+2      	; 0x2410 <_Z19handleSerialBusMsgsv+0x32>
    240e:	c9 c6       	rjmp	.+3474   	; 0x31a2 <_Z19handleSerialBusMsgsv+0xdc4>
    2410:	8e 81       	ldd	r24, Y+6	; 0x06
    2412:	9f 81       	ldd	r25, Y+7	; 0x07
    2414:	fc 01       	movw	r30, r24
    2416:	81 81       	ldd	r24, Z+1	; 0x01
    2418:	92 81       	ldd	r25, Z+2	; 0x02
    241a:	88 87       	std	Y+8, r24	; 0x08
    241c:	99 87       	std	Y+9, r25	; 0x09
    241e:	88 85       	ldd	r24, Y+8	; 0x08
    2420:	99 85       	ldd	r25, Y+9	; 0x09
    2422:	8a 3e       	cpi	r24, 0xEA	; 234
    2424:	f2 e2       	ldi	r31, 0x22	; 34
    2426:	9f 07       	cpc	r25, r31
    2428:	09 f4       	brne	.+2      	; 0x242c <_Z19handleSerialBusMsgsv+0x4e>
    242a:	a5 c3       	rjmp	.+1866   	; 0x2b76 <_Z19handleSerialBusMsgsv+0x798>
    242c:	8b 3e       	cpi	r24, 0xEB	; 235
    242e:	22 e2       	ldi	r18, 0x22	; 34
    2430:	92 07       	cpc	r25, r18
    2432:	b8 f4       	brcc	.+46     	; 0x2462 <_Z19handleSerialBusMsgsv+0x84>
    2434:	8f 36       	cpi	r24, 0x6F	; 111
    2436:	ed e1       	ldi	r30, 0x1D	; 29
    2438:	9e 07       	cpc	r25, r30
    243a:	09 f4       	brne	.+2      	; 0x243e <_Z19handleSerialBusMsgsv+0x60>
    243c:	ee c3       	rjmp	.+2012   	; 0x2c1a <_Z19handleSerialBusMsgsv+0x83c>
    243e:	80 37       	cpi	r24, 0x70	; 112
    2440:	fd e1       	ldi	r31, 0x1D	; 29
    2442:	9f 07       	cpc	r25, r31
    2444:	28 f4       	brcc	.+10     	; 0x2450 <_Z19handleSerialBusMsgsv+0x72>
    2446:	8e 31       	cpi	r24, 0x1E	; 30
    2448:	93 40       	sbci	r25, 0x03	; 3
    244a:	09 f4       	brne	.+2      	; 0x244e <_Z19handleSerialBusMsgsv+0x70>
    244c:	82 c2       	rjmp	.+1284   	; 0x2952 <_Z19handleSerialBusMsgsv+0x574>
    244e:	97 c6       	rjmp	.+3374   	; 0x317e <_Z19handleSerialBusMsgsv+0xda0>
    2450:	86 3c       	cpi	r24, 0xC6	; 198
    2452:	ee e1       	ldi	r30, 0x1E	; 30
    2454:	9e 07       	cpc	r25, r30
    2456:	e9 f0       	breq	.+58     	; 0x2492 <_Z19handleSerialBusMsgsv+0xb4>
    2458:	81 3d       	cpi	r24, 0xD1	; 209
    245a:	9e 41       	sbci	r25, 0x1E	; 30
    245c:	09 f4       	brne	.+2      	; 0x2460 <_Z19handleSerialBusMsgsv+0x82>
    245e:	a9 c1       	rjmp	.+850    	; 0x27b2 <_Z19handleSerialBusMsgsv+0x3d4>
    2460:	8e c6       	rjmp	.+3356   	; 0x317e <_Z19handleSerialBusMsgsv+0xda0>
    2462:	82 37       	cpi	r24, 0x72	; 114
    2464:	23 e2       	ldi	r18, 0x23	; 35
    2466:	92 07       	cpc	r25, r18
    2468:	09 f4       	brne	.+2      	; 0x246c <_Z19handleSerialBusMsgsv+0x8e>
    246a:	01 c3       	rjmp	.+1538   	; 0x2a6e <_Z19handleSerialBusMsgsv+0x690>
    246c:	83 37       	cpi	r24, 0x73	; 115
    246e:	e3 e2       	ldi	r30, 0x23	; 35
    2470:	9e 07       	cpc	r25, r30
    2472:	28 f4       	brcc	.+10     	; 0x247e <_Z19handleSerialBusMsgsv+0xa0>
    2474:	88 3f       	cpi	r24, 0xF8	; 248
    2476:	92 42       	sbci	r25, 0x22	; 34
    2478:	09 f4       	brne	.+2      	; 0x247c <_Z19handleSerialBusMsgsv+0x9e>
    247a:	38 c1       	rjmp	.+624    	; 0x26ec <_Z19handleSerialBusMsgsv+0x30e>
    247c:	80 c6       	rjmp	.+3328   	; 0x317e <_Z19handleSerialBusMsgsv+0xda0>
    247e:	84 33       	cpi	r24, 0x34	; 52
    2480:	24 e2       	ldi	r18, 0x24	; 36
    2482:	92 07       	cpc	r25, r18
    2484:	09 f4       	brne	.+2      	; 0x2488 <_Z19handleSerialBusMsgsv+0xaa>
    2486:	29 c2       	rjmp	.+1106   	; 0x28da <_Z19handleSerialBusMsgsv+0x4fc>
    2488:	85 3c       	cpi	r24, 0xC5	; 197
    248a:	94 42       	sbci	r25, 0x24	; 36
    248c:	09 f4       	brne	.+2      	; 0x2490 <_Z19handleSerialBusMsgsv+0xb2>
    248e:	63 c6       	rjmp	.+3270   	; 0x3156 <_Z19handleSerialBusMsgsv+0xd78>
    2490:	76 c6       	rjmp	.+3308   	; 0x317e <_Z19handleSerialBusMsgsv+0xda0>
    2492:	8e 81       	ldd	r24, Y+6	; 0x06
    2494:	9f 81       	ldd	r25, Y+7	; 0x07
    2496:	fc 01       	movw	r30, r24
    2498:	83 81       	ldd	r24, Z+3	; 0x03
    249a:	88 2f       	mov	r24, r24
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	9a 83       	std	Y+2, r25	; 0x02
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	89 2b       	or	r24, r25
    24a8:	09 f4       	brne	.+2      	; 0x24ac <_Z19handleSerialBusMsgsv+0xce>
    24aa:	d0 c0       	rjmp	.+416    	; 0x264c <_Z19handleSerialBusMsgsv+0x26e>
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	82 34       	cpi	r24, 0x42	; 66
    24b2:	91 05       	cpc	r25, r1
    24b4:	19 f4       	brne	.+6      	; 0x24bc <_Z19handleSerialBusMsgsv+0xde>
    24b6:	19 82       	std	Y+1, r1	; 0x01
    24b8:	1a 82       	std	Y+2, r1	; 0x02
    24ba:	ac c0       	rjmp	.+344    	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	86 34       	cpi	r24, 0x46	; 70
    24c2:	91 05       	cpc	r25, r1
    24c4:	29 f4       	brne	.+10     	; 0x24d0 <_Z19handleSerialBusMsgsv+0xf2>
    24c6:	86 e0       	ldi	r24, 0x06	; 6
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	a2 c0       	rjmp	.+324    	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	9a 81       	ldd	r25, Y+2	; 0x02
    24d4:	83 34       	cpi	r24, 0x43	; 67
    24d6:	91 05       	cpc	r25, r1
    24d8:	b9 f5       	brne	.+110    	; 0x2548 <_Z19handleSerialBusMsgsv+0x16a>
    24da:	8e 81       	ldd	r24, Y+6	; 0x06
    24dc:	9f 81       	ldd	r25, Y+7	; 0x07
    24de:	fc 01       	movw	r30, r24
    24e0:	87 89       	ldd	r24, Z+23	; 0x17
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	8e 81       	ldd	r24, Y+6	; 0x06
    24e6:	9f 81       	ldd	r25, Y+7	; 0x07
    24e8:	fc 01       	movw	r30, r24
    24ea:	10 8e       	std	Z+24, r1	; 0x18
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	82 34       	cpi	r24, 0x42	; 66
    24f0:	11 f4       	brne	.+4      	; 0x24f6 <_Z19handleSerialBusMsgsv+0x118>
    24f2:	80 e3       	ldi	r24, 0x30	; 48
    24f4:	8b 83       	std	Y+3, r24	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	88 2f       	mov	r24, r24
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	c0 97       	sbiw	r24, 0x30	; 48
    24fe:	0a 97       	sbiw	r24, 0x0a	; 10
    2500:	08 f0       	brcs	.+2      	; 0x2504 <_Z19handleSerialBusMsgsv+0x126>
    2502:	88 c0       	rjmp	.+272    	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    2504:	8e 81       	ldd	r24, Y+6	; 0x06
    2506:	9f 81       	ldd	r25, Y+7	; 0x07
    2508:	47 96       	adiw	r24, 0x17	; 23
    250a:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <atoi>
    250e:	8a 87       	std	Y+10, r24	; 0x0a
    2510:	9b 87       	std	Y+11, r25	; 0x0b
    2512:	1c 86       	std	Y+12, r1	; 0x0c
    2514:	85 e0       	ldi	r24, 0x05	; 5
    2516:	8d 87       	std	Y+13, r24	; 0x0d
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2520:	9b 85       	ldd	r25, Y+11	; 0x0b
    2522:	28 17       	cp	r18, r24
    2524:	39 07       	cpc	r19, r25
    2526:	24 f4       	brge	.+8      	; 0x2530 <_Z19handleSerialBusMsgsv+0x152>
    2528:	8d 85       	ldd	r24, Y+13	; 0x0d
    252a:	88 2f       	mov	r24, r24
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <_Z19handleSerialBusMsgsv+0x164>
    2530:	8c 85       	ldd	r24, Y+12	; 0x0c
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	2a 85       	ldd	r18, Y+10	; 0x0a
    2538:	3b 85       	ldd	r19, Y+11	; 0x0b
    253a:	82 17       	cp	r24, r18
    253c:	93 07       	cpc	r25, r19
    253e:	0c f4       	brge	.+2      	; 0x2542 <_Z19handleSerialBusMsgsv+0x164>
    2540:	c9 01       	movw	r24, r18
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	9a 83       	std	Y+2, r25	; 0x02
    2546:	66 c0       	rjmp	.+204    	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	83 35       	cpi	r24, 0x53	; 83
    254e:	91 05       	cpc	r25, r1
    2550:	09 f0       	breq	.+2      	; 0x2554 <_Z19handleSerialBusMsgsv+0x176>
    2552:	59 c0       	rjmp	.+178    	; 0x2606 <_Z19handleSerialBusMsgsv+0x228>
    2554:	1c 82       	std	Y+4, r1	; 0x04
    2556:	8e 81       	ldd	r24, Y+6	; 0x06
    2558:	9f 81       	ldd	r25, Y+7	; 0x07
    255a:	fc 01       	movw	r30, r24
    255c:	87 89       	ldd	r24, Z+23	; 0x17
    255e:	8e 87       	std	Y+14, r24	; 0x0e
    2560:	8e 81       	ldd	r24, Y+6	; 0x06
    2562:	9f 81       	ldd	r25, Y+7	; 0x07
    2564:	fc 01       	movw	r30, r24
    2566:	80 8d       	ldd	r24, Z+24	; 0x18
    2568:	8f 87       	std	Y+15, r24	; 0x0f
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    256c:	9f 81       	ldd	r25, Y+7	; 0x07
    256e:	fc 01       	movw	r30, r24
    2570:	11 8e       	std	Z+25, r1	; 0x19
    2572:	8e 85       	ldd	r24, Y+14	; 0x0e
    2574:	82 34       	cpi	r24, 0x42	; 66
    2576:	11 f4       	brne	.+4      	; 0x257c <_Z19handleSerialBusMsgsv+0x19e>
    2578:	1c 82       	std	Y+4, r1	; 0x04
    257a:	36 c0       	rjmp	.+108    	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    257c:	8e 85       	ldd	r24, Y+14	; 0x0e
    257e:	86 34       	cpi	r24, 0x46	; 70
    2580:	51 f4       	brne	.+20     	; 0x2596 <_Z19handleSerialBusMsgsv+0x1b8>
    2582:	8f 85       	ldd	r24, Y+15	; 0x0f
    2584:	81 33       	cpi	r24, 0x31	; 49
    2586:	80 f1       	brcs	.+96     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    2588:	8f 85       	ldd	r24, Y+15	; 0x0f
    258a:	86 33       	cpi	r24, 0x36	; 54
    258c:	68 f5       	brcc	.+90     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    258e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2590:	84 52       	subi	r24, 0x24	; 36
    2592:	8c 83       	std	Y+4, r24	; 0x04
    2594:	29 c0       	rjmp	.+82     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    2596:	8e 85       	ldd	r24, Y+14	; 0x0e
    2598:	83 35       	cpi	r24, 0x53	; 83
    259a:	69 f4       	brne	.+26     	; 0x25b6 <_Z19handleSerialBusMsgsv+0x1d8>
    259c:	8f 85       	ldd	r24, Y+15	; 0x0f
    259e:	81 33       	cpi	r24, 0x31	; 49
    25a0:	38 f0       	brcs	.+14     	; 0x25b0 <_Z19handleSerialBusMsgsv+0x1d2>
    25a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a4:	86 33       	cpi	r24, 0x36	; 54
    25a6:	20 f4       	brcc	.+8      	; 0x25b0 <_Z19handleSerialBusMsgsv+0x1d2>
    25a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25aa:	89 52       	subi	r24, 0x29	; 41
    25ac:	8c 83       	std	Y+4, r24	; 0x04
    25ae:	1c c0       	rjmp	.+56     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25b0:	87 e0       	ldi	r24, 0x07	; 7
    25b2:	8c 83       	std	Y+4, r24	; 0x04
    25b4:	19 c0       	rjmp	.+50     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b8:	86 34       	cpi	r24, 0x46	; 70
    25ba:	51 f4       	brne	.+20     	; 0x25d0 <_Z19handleSerialBusMsgsv+0x1f2>
    25bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25be:	81 33       	cpi	r24, 0x31	; 49
    25c0:	98 f0       	brcs	.+38     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c4:	86 33       	cpi	r24, 0x36	; 54
    25c6:	80 f4       	brcc	.+32     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ca:	84 52       	subi	r24, 0x24	; 36
    25cc:	8c 83       	std	Y+4, r24	; 0x04
    25ce:	0c c0       	rjmp	.+24     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d2:	83 35       	cpi	r24, 0x53	; 83
    25d4:	49 f4       	brne	.+18     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25d8:	81 33       	cpi	r24, 0x31	; 49
    25da:	30 f0       	brcs	.+12     	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25de:	86 33       	cpi	r24, 0x36	; 54
    25e0:	18 f4       	brcc	.+6      	; 0x25e8 <_Z19handleSerialBusMsgsv+0x20a>
    25e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25e4:	89 52       	subi	r24, 0x29	; 41
    25e6:	8c 83       	std	Y+4, r24	; 0x04
    25e8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ea:	87 30       	cpi	r24, 0x07	; 7
    25ec:	48 f0       	brcs	.+18     	; 0x2600 <_Z19handleSerialBusMsgsv+0x222>
    25ee:	8c 81       	ldd	r24, Y+4	; 0x04
    25f0:	82 31       	cpi	r24, 0x12	; 18
    25f2:	30 f4       	brcc	.+12     	; 0x2600 <_Z19handleSerialBusMsgsv+0x222>
    25f4:	8c 81       	ldd	r24, Y+4	; 0x04
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	0a c0       	rjmp	.+20     	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    2600:	19 82       	std	Y+1, r1	; 0x01
    2602:	1a 82       	std	Y+2, r1	; 0x02
    2604:	07 c0       	rjmp	.+14     	; 0x2614 <_Z19handleSerialBusMsgsv+0x236>
    2606:	8e 81       	ldd	r24, Y+6	; 0x06
    2608:	9f 81       	ldd	r25, Y+7	; 0x07
    260a:	03 96       	adiw	r24, 0x03	; 3
    260c:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <atoi>
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	9a 83       	std	Y+2, r25	; 0x02
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	99 23       	and	r25, r25
    261a:	c4 f0       	brlt	.+48     	; 0x264c <_Z19handleSerialBusMsgsv+0x26e>
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	42 97       	sbiw	r24, 0x12	; 18
    2622:	a4 f4       	brge	.+40     	; 0x264c <_Z19handleSerialBusMsgsv+0x26e>
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8a ab       	std	Y+50, r24	; 0x32
    2628:	ce 01       	movw	r24, r28
    262a:	c2 96       	adiw	r24, 0x32	; 50
    262c:	ac 01       	movw	r20, r24
    262e:	69 e2       	ldi	r22, 0x29	; 41
    2630:	8c e7       	ldi	r24, 0x7C	; 124
    2632:	97 e4       	ldi	r25, 0x47	; 71
    2634:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2638:	9a a9       	ldd	r25, Y+50	; 0x32
    263a:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    263e:	98 17       	cp	r25, r24
    2640:	29 f0       	breq	.+10     	; 0x264c <_Z19handleSerialBusMsgsv+0x26e>
    2642:	ce 01       	movw	r24, r28
    2644:	c2 96       	adiw	r24, 0x32	; 50
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    264c:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    2650:	68 2f       	mov	r22, r24
    2652:	81 ef       	ldi	r24, 0xF1	; 241
    2654:	96 e4       	ldi	r25, 0x46	; 70
    2656:	0e 94 33 49 	call	0x9266	; 0x9266 <_Z8fox2TextPc5Fox_t>
    265a:	98 2f       	mov	r25, r24
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	89 27       	eor	r24, r25
    2660:	88 23       	and	r24, r24
    2662:	11 f1       	breq	.+68     	; 0x26a8 <_Z19handleSerialBusMsgsv+0x2ca>
    2664:	ce 01       	movw	r24, r28
    2666:	c3 96       	adiw	r24, 0x33	; 51
    2668:	61 ef       	ldi	r22, 0xF1	; 241
    266a:	76 e4       	ldi	r23, 0x46	; 70
    266c:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <strcpy>
    2670:	ce 01       	movw	r24, r28
    2672:	c3 96       	adiw	r24, 0x33	; 51
    2674:	29 2f       	mov	r18, r25
    2676:	2f 93       	push	r18
    2678:	8f 93       	push	r24
    267a:	84 e3       	ldi	r24, 0x34	; 52
    267c:	92 e4       	ldi	r25, 0x42	; 66
    267e:	89 2f       	mov	r24, r25
    2680:	8f 93       	push	r24
    2682:	84 e3       	ldi	r24, 0x34	; 52
    2684:	92 e4       	ldi	r25, 0x42	; 66
    2686:	8f 93       	push	r24
    2688:	81 ef       	ldi	r24, 0xF1	; 241
    268a:	96 e4       	ldi	r25, 0x46	; 70
    268c:	89 2f       	mov	r24, r25
    268e:	8f 93       	push	r24
    2690:	81 ef       	ldi	r24, 0xF1	; 241
    2692:	96 e4       	ldi	r25, 0x46	; 70
    2694:	8f 93       	push	r24
    2696:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	1d c0       	rjmp	.+58     	; 0x26e2 <_Z19handleSerialBusMsgsv+0x304>
    26a8:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	29 2f       	mov	r18, r25
    26b2:	2f 93       	push	r18
    26b4:	8f 93       	push	r24
    26b6:	8c e3       	ldi	r24, 0x3C	; 60
    26b8:	92 e4       	ldi	r25, 0x42	; 66
    26ba:	89 2f       	mov	r24, r25
    26bc:	8f 93       	push	r24
    26be:	8c e3       	ldi	r24, 0x3C	; 60
    26c0:	92 e4       	ldi	r25, 0x42	; 66
    26c2:	8f 93       	push	r24
    26c4:	81 ef       	ldi	r24, 0xF1	; 241
    26c6:	96 e4       	ldi	r25, 0x46	; 70
    26c8:	89 2f       	mov	r24, r25
    26ca:	8f 93       	push	r24
    26cc:	81 ef       	ldi	r24, 0xF1	; 241
    26ce:	96 e4       	ldi	r25, 0x46	; 70
    26d0:	8f 93       	push	r24
    26d2:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	81 ef       	ldi	r24, 0xF1	; 241
    26e4:	96 e4       	ldi	r25, 0x46	; 70
    26e6:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    26ea:	53 c5       	rjmp	.+2726   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    26ec:	8e 81       	ldd	r24, Y+6	; 0x06
    26ee:	9f 81       	ldd	r25, Y+7	; 0x07
    26f0:	fc 01       	movw	r30, r24
    26f2:	83 81       	ldd	r24, Z+3	; 0x03
    26f4:	88 23       	and	r24, r24
    26f6:	e9 f1       	breq	.+122    	; 0x2772 <_Z19handleSerialBusMsgsv+0x394>
    26f8:	8e 81       	ldd	r24, Y+6	; 0x06
    26fa:	9f 81       	ldd	r25, Y+7	; 0x07
    26fc:	03 96       	adiw	r24, 0x03	; 3
    26fe:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <atoi>
    2702:	80 93 99 47 	sts	0x4799, r24	; 0x804799 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    2706:	90 93 9a 47 	sts	0x479A, r25	; 0x80479a <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    270a:	80 91 99 47 	lds	r24, 0x4799	; 0x804799 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    270e:	90 91 9a 47 	lds	r25, 0x479A	; 0x80479a <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    2712:	89 38       	cpi	r24, 0x89	; 137
    2714:	93 41       	sbci	r25, 0x13	; 19
    2716:	68 f4       	brcc	.+26     	; 0x2732 <_Z19handleSerialBusMsgsv+0x354>
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	89 e9       	ldi	r24, 0x99	; 153
    271e:	97 e4       	ldi	r25, 0x47	; 71
    2720:	0e 94 80 45 	call	0x8b00	; 0x8b00 <_Z15txSetParametersPjPb>
    2724:	88 8b       	std	Y+16, r24	; 0x10
    2726:	88 89       	ldd	r24, Y+16	; 0x10
    2728:	88 23       	and	r24, r24
    272a:	19 f0       	breq	.+6      	; 0x2732 <_Z19handleSerialBusMsgsv+0x354>
    272c:	88 89       	ldd	r24, Y+16	; 0x10
    272e:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    2732:	0e 94 7b 45 	call	0x8af6	; 0x8af6 <_Z12txGetPowerMwv>
    2736:	29 2f       	mov	r18, r25
    2738:	2f 93       	push	r18
    273a:	8f 93       	push	r24
    273c:	84 e4       	ldi	r24, 0x44	; 68
    273e:	92 e4       	ldi	r25, 0x42	; 66
    2740:	89 2f       	mov	r24, r25
    2742:	8f 93       	push	r24
    2744:	84 e4       	ldi	r24, 0x44	; 68
    2746:	92 e4       	ldi	r25, 0x42	; 66
    2748:	8f 93       	push	r24
    274a:	81 ef       	ldi	r24, 0xF1	; 241
    274c:	96 e4       	ldi	r25, 0x46	; 70
    274e:	89 2f       	mov	r24, r25
    2750:	8f 93       	push	r24
    2752:	81 ef       	ldi	r24, 0xF1	; 241
    2754:	96 e4       	ldi	r25, 0x46	; 70
    2756:	8f 93       	push	r24
    2758:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	81 ef       	ldi	r24, 0xF1	; 241
    276a:	96 e4       	ldi	r25, 0x46	; 70
    276c:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2770:	10 c5       	rjmp	.+2592   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2772:	0e 94 7b 45 	call	0x8af6	; 0x8af6 <_Z12txGetPowerMwv>
    2776:	29 2f       	mov	r18, r25
    2778:	2f 93       	push	r18
    277a:	8f 93       	push	r24
    277c:	84 e4       	ldi	r24, 0x44	; 68
    277e:	92 e4       	ldi	r25, 0x42	; 66
    2780:	89 2f       	mov	r24, r25
    2782:	8f 93       	push	r24
    2784:	84 e4       	ldi	r24, 0x44	; 68
    2786:	92 e4       	ldi	r25, 0x42	; 66
    2788:	8f 93       	push	r24
    278a:	81 ef       	ldi	r24, 0xF1	; 241
    278c:	96 e4       	ldi	r25, 0x46	; 70
    278e:	89 2f       	mov	r24, r25
    2790:	8f 93       	push	r24
    2792:	81 ef       	ldi	r24, 0xF1	; 241
    2794:	96 e4       	ldi	r25, 0x46	; 70
    2796:	8f 93       	push	r24
    2798:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	81 ef       	ldi	r24, 0xF1	; 241
    27aa:	96 e4       	ldi	r25, 0x46	; 70
    27ac:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    27b0:	f0 c4       	rjmp	.+2528   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    27b2:	19 8a       	std	Y+17, r1	; 0x11
    27b4:	1a 8a       	std	Y+18, r1	; 0x12
    27b6:	1b 8a       	std	Y+19, r1	; 0x13
    27b8:	1c 8a       	std	Y+20, r1	; 0x14
    27ba:	8e 81       	ldd	r24, Y+6	; 0x06
    27bc:	9f 81       	ldd	r25, Y+7	; 0x07
    27be:	fc 01       	movw	r30, r24
    27c0:	83 81       	ldd	r24, Z+3	; 0x03
    27c2:	88 23       	and	r24, r24
    27c4:	49 f1       	breq	.+82     	; 0x2818 <_Z19handleSerialBusMsgsv+0x43a>
    27c6:	8e 81       	ldd	r24, Y+6	; 0x06
    27c8:	9f 81       	ldd	r25, Y+7	; 0x07
    27ca:	03 96       	adiw	r24, 0x03	; 3
    27cc:	9e 01       	movw	r18, r28
    27ce:	24 5b       	subi	r18, 0xB4	; 180
    27d0:	3f 4f       	sbci	r19, 0xFF	; 255
    27d2:	b9 01       	movw	r22, r18
    27d4:	0e 94 00 48 	call	0x9000	; 0x9000 <_Z12frequencyValPcPm>
    27d8:	ce 01       	movw	r24, r28
    27da:	84 5b       	subi	r24, 0xB4	; 180
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <_Z14txSetFrequencyPmb>
    27e4:	98 2f       	mov	r25, r24
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	89 27       	eor	r24, r25
    27ea:	88 23       	and	r24, r24
    27ec:	89 f0       	breq	.+34     	; 0x2810 <_Z19handleSerialBusMsgsv+0x432>
    27ee:	ce 01       	movw	r24, r28
    27f0:	84 5b       	subi	r24, 0xB4	; 180
    27f2:	9f 4f       	sbci	r25, 0xFF	; 255
    27f4:	fc 01       	movw	r30, r24
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	a2 81       	ldd	r26, Z+2	; 0x02
    27fc:	b3 81       	ldd	r27, Z+3	; 0x03
    27fe:	89 8b       	std	Y+17, r24	; 0x11
    2800:	9a 8b       	std	Y+18, r25	; 0x12
    2802:	ab 8b       	std	Y+19, r26	; 0x13
    2804:	bc 8b       	std	Y+20, r27	; 0x14
    2806:	8c e7       	ldi	r24, 0x7C	; 124
    2808:	97 e4       	ldi	r25, 0x47	; 71
    280a:	0e 94 a6 31 	call	0x634c	; 0x634c <_ZN13EepromManager13saveAllEEPROMEv>
    280e:	04 c0       	rjmp	.+8      	; 0x2818 <_Z19handleSerialBusMsgsv+0x43a>
    2810:	8c eb       	ldi	r24, 0xBC	; 188
    2812:	91 e4       	ldi	r25, 0x41	; 65
    2814:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2818:	0e 94 51 45 	call	0x8aa2	; 0x8aa2 <_Z14txGetFrequencyv>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	89 8b       	std	Y+17, r24	; 0x11
    2822:	9a 8b       	std	Y+18, r25	; 0x12
    2824:	ab 8b       	std	Y+19, r26	; 0x13
    2826:	bc 8b       	std	Y+20, r27	; 0x14
    2828:	89 89       	ldd	r24, Y+17	; 0x11
    282a:	9a 89       	ldd	r25, Y+18	; 0x12
    282c:	ab 89       	ldd	r26, Y+19	; 0x13
    282e:	bc 89       	ldd	r27, Y+20	; 0x14
    2830:	89 2b       	or	r24, r25
    2832:	8a 2b       	or	r24, r26
    2834:	8b 2b       	or	r24, r27
    2836:	09 f4       	brne	.+2      	; 0x283a <_Z19handleSerialBusMsgsv+0x45c>
    2838:	a7 c4       	rjmp	.+2382   	; 0x3188 <_Z19handleSerialBusMsgsv+0xdaa>
    283a:	89 89       	ldd	r24, Y+17	; 0x11
    283c:	9a 89       	ldd	r25, Y+18	; 0x12
    283e:	ab 89       	ldd	r26, Y+19	; 0x13
    2840:	bc 89       	ldd	r27, Y+20	; 0x14
    2842:	9e 01       	movw	r18, r28
    2844:	20 5b       	subi	r18, 0xB0	; 176
    2846:	3f 4f       	sbci	r19, 0xFF	; 255
    2848:	ac 01       	movw	r20, r24
    284a:	bd 01       	movw	r22, r26
    284c:	c9 01       	movw	r24, r18
    284e:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <_Z15frequencyStringPcm>
    2852:	98 2f       	mov	r25, r24
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	89 27       	eor	r24, r25
    2858:	88 23       	and	r24, r24
    285a:	e9 f0       	breq	.+58     	; 0x2896 <_Z19handleSerialBusMsgsv+0x4b8>
    285c:	ce 01       	movw	r24, r28
    285e:	80 5b       	subi	r24, 0xB0	; 176
    2860:	9f 4f       	sbci	r25, 0xFF	; 255
    2862:	29 2f       	mov	r18, r25
    2864:	2f 93       	push	r18
    2866:	8f 93       	push	r24
    2868:	8f e4       	ldi	r24, 0x4F	; 79
    286a:	92 e4       	ldi	r25, 0x42	; 66
    286c:	89 2f       	mov	r24, r25
    286e:	8f 93       	push	r24
    2870:	8f e4       	ldi	r24, 0x4F	; 79
    2872:	92 e4       	ldi	r25, 0x42	; 66
    2874:	8f 93       	push	r24
    2876:	81 ef       	ldi	r24, 0xF1	; 241
    2878:	96 e4       	ldi	r25, 0x46	; 70
    287a:	89 2f       	mov	r24, r25
    287c:	8f 93       	push	r24
    287e:	81 ef       	ldi	r24, 0xF1	; 241
    2880:	96 e4       	ldi	r25, 0x46	; 70
    2882:	8f 93       	push	r24
    2884:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	1d c0       	rjmp	.+58     	; 0x28d0 <_Z19handleSerialBusMsgsv+0x4f2>
    2896:	8c 89       	ldd	r24, Y+20	; 0x14
    2898:	8f 93       	push	r24
    289a:	8b 89       	ldd	r24, Y+19	; 0x13
    289c:	8f 93       	push	r24
    289e:	8a 89       	ldd	r24, Y+18	; 0x12
    28a0:	8f 93       	push	r24
    28a2:	89 89       	ldd	r24, Y+17	; 0x11
    28a4:	8f 93       	push	r24
    28a6:	87 e5       	ldi	r24, 0x57	; 87
    28a8:	92 e4       	ldi	r25, 0x42	; 66
    28aa:	89 2f       	mov	r24, r25
    28ac:	8f 93       	push	r24
    28ae:	87 e5       	ldi	r24, 0x57	; 87
    28b0:	92 e4       	ldi	r25, 0x42	; 66
    28b2:	8f 93       	push	r24
    28b4:	81 ef       	ldi	r24, 0xF1	; 241
    28b6:	96 e4       	ldi	r25, 0x46	; 70
    28b8:	89 2f       	mov	r24, r25
    28ba:	8f 93       	push	r24
    28bc:	81 ef       	ldi	r24, 0xF1	; 241
    28be:	96 e4       	ldi	r25, 0x46	; 70
    28c0:	8f 93       	push	r24
    28c2:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    28c6:	8d b7       	in	r24, 0x3d	; 61
    28c8:	9e b7       	in	r25, 0x3e	; 62
    28ca:	08 96       	adiw	r24, 0x08	; 8
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	81 ef       	ldi	r24, 0xF1	; 241
    28d2:	96 e4       	ldi	r25, 0x46	; 70
    28d4:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    28d8:	57 c4       	rjmp	.+2222   	; 0x3188 <_Z19handleSerialBusMsgsv+0xdaa>
    28da:	8e 81       	ldd	r24, Y+6	; 0x06
    28dc:	9f 81       	ldd	r25, Y+7	; 0x07
    28de:	fc 01       	movw	r30, r24
    28e0:	83 81       	ldd	r24, Z+3	; 0x03
    28e2:	88 23       	and	r24, r24
    28e4:	89 f1       	breq	.+98     	; 0x2948 <_Z19handleSerialBusMsgsv+0x56a>
    28e6:	8e 81       	ldd	r24, Y+6	; 0x06
    28e8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ea:	fc 01       	movw	r30, r24
    28ec:	83 81       	ldd	r24, Z+3	; 0x03
    28ee:	80 33       	cpi	r24, 0x30	; 48
    28f0:	21 f4       	brne	.+8      	; 0x28fa <_Z19handleSerialBusMsgsv+0x51c>
    28f2:	82 e0       	ldi	r24, 0x02	; 2
    28f4:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <_Z12stopEventNow19EventActionSource_t>
    28f8:	4c c4       	rjmp	.+2200   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    28fa:	8e 81       	ldd	r24, Y+6	; 0x06
    28fc:	9f 81       	ldd	r25, Y+7	; 0x07
    28fe:	fc 01       	movw	r30, r24
    2900:	83 81       	ldd	r24, Z+3	; 0x03
    2902:	81 33       	cpi	r24, 0x31	; 49
    2904:	21 f4       	brne	.+8      	; 0x290e <_Z19handleSerialBusMsgsv+0x530>
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	0e 94 81 22 	call	0x4502	; 0x4502 <_Z13startEventNow19EventActionSource_t>
    290c:	42 c4       	rjmp	.+2180   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    290e:	8e 81       	ldd	r24, Y+6	; 0x06
    2910:	9f 81       	ldd	r25, Y+7	; 0x07
    2912:	fc 01       	movw	r30, r24
    2914:	83 81       	ldd	r24, Z+3	; 0x03
    2916:	82 33       	cpi	r24, 0x32	; 50
    2918:	31 f4       	brne	.+12     	; 0x2926 <_Z19handleSerialBusMsgsv+0x548>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    2920:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_Z18startEventUsingRTCv>
    2924:	36 c4       	rjmp	.+2156   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2926:	8e 81       	ldd	r24, Y+6	; 0x06
    2928:	9f 81       	ldd	r25, Y+7	; 0x07
    292a:	fc 01       	movw	r30, r24
    292c:	83 81       	ldd	r24, Z+3	; 0x03
    292e:	83 33       	cpi	r24, 0x33	; 51
    2930:	31 f4       	brne	.+12     	; 0x293e <_Z19handleSerialBusMsgsv+0x560>
    2932:	62 e0       	ldi	r22, 0x02	; 2
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    293c:	2a c4       	rjmp	.+2132   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    293e:	80 e6       	ldi	r24, 0x60	; 96
    2940:	92 e4       	ldi	r25, 0x42	; 66
    2942:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2946:	25 c4       	rjmp	.+2122   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2948:	80 e6       	ldi	r24, 0x60	; 96
    294a:	92 e4       	ldi	r25, 0x42	; 66
    294c:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2950:	20 c4       	rjmp	.+2112   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2952:	8e 81       	ldd	r24, Y+6	; 0x06
    2954:	9f 81       	ldd	r25, Y+7	; 0x07
    2956:	fc 01       	movw	r30, r24
    2958:	83 81       	ldd	r24, Z+3	; 0x03
    295a:	88 23       	and	r24, r24
    295c:	09 f4       	brne	.+2      	; 0x2960 <_Z19handleSerialBusMsgsv+0x582>
    295e:	41 c0       	rjmp	.+130    	; 0x29e2 <_Z19handleSerialBusMsgsv+0x604>
    2960:	80 e2       	ldi	r24, 0x20	; 32
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	80 93 f1 46 	sts	0x46F1, r24	; 0x8046f1 <_ZL9g_tempStr>
    2968:	90 93 f2 46 	sts	0x46F2, r25	; 0x8046f2 <_ZL9g_tempStr+0x1>
    296c:	8e 81       	ldd	r24, Y+6	; 0x06
    296e:	9f 81       	ldd	r25, Y+7	; 0x07
    2970:	03 96       	adiw	r24, 0x03	; 3
    2972:	bc 01       	movw	r22, r24
    2974:	81 ef       	ldi	r24, 0xF1	; 241
    2976:	96 e4       	ldi	r25, 0x46	; 70
    2978:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <strcat>
    297c:	8e 81       	ldd	r24, Y+6	; 0x06
    297e:	9f 81       	ldd	r25, Y+7	; 0x07
    2980:	fc 01       	movw	r30, r24
    2982:	87 89       	ldd	r24, Z+23	; 0x17
    2984:	88 23       	and	r24, r24
    2986:	d1 f0       	breq	.+52     	; 0x29bc <_Z19handleSerialBusMsgsv+0x5de>
    2988:	81 ef       	ldi	r24, 0xF1	; 241
    298a:	96 e4       	ldi	r25, 0x46	; 70
    298c:	9c 01       	movw	r18, r24
    298e:	f9 01       	movw	r30, r18
    2990:	01 90       	ld	r0, Z+
    2992:	00 20       	and	r0, r0
    2994:	e9 f7       	brne	.-6      	; 0x2990 <_Z19handleSerialBusMsgsv+0x5b2>
    2996:	cf 01       	movw	r24, r30
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	82 1b       	sub	r24, r18
    299c:	93 0b       	sbc	r25, r19
    299e:	8f 50       	subi	r24, 0x0F	; 15
    29a0:	99 4b       	sbci	r25, 0xB9	; 185
    29a2:	20 e2       	ldi	r18, 0x20	; 32
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	fc 01       	movw	r30, r24
    29a8:	20 83       	st	Z, r18
    29aa:	31 83       	std	Z+1, r19	; 0x01
    29ac:	8e 81       	ldd	r24, Y+6	; 0x06
    29ae:	9f 81       	ldd	r25, Y+7	; 0x07
    29b0:	47 96       	adiw	r24, 0x17	; 23
    29b2:	bc 01       	movw	r22, r24
    29b4:	81 ef       	ldi	r24, 0xF1	; 241
    29b6:	96 e4       	ldi	r25, 0x46	; 70
    29b8:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <strcat>
    29bc:	81 ef       	ldi	r24, 0xF1	; 241
    29be:	96 e4       	ldi	r25, 0x46	; 70
    29c0:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <strlen>
    29c4:	45 97       	sbiw	r24, 0x15	; 21
    29c6:	68 f4       	brcc	.+26     	; 0x29e2 <_Z19handleSerialBusMsgsv+0x604>
    29c8:	61 ef       	ldi	r22, 0xF1	; 241
    29ca:	76 e4       	ldi	r23, 0x46	; 70
    29cc:	87 e4       	ldi	r24, 0x47	; 71
    29ce:	97 e4       	ldi	r25, 0x47	; 71
    29d0:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <strcpy>
    29d4:	41 ef       	ldi	r20, 0xF1	; 241
    29d6:	56 e4       	ldi	r21, 0x46	; 70
    29d8:	6a e0       	ldi	r22, 0x0A	; 10
    29da:	8c e7       	ldi	r24, 0x7C	; 124
    29dc:	97 e4       	ldi	r25, 0x47	; 71
    29de:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    29e2:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    29e6:	88 23       	and	r24, r24
    29e8:	01 f1       	breq	.+64     	; 0x2a2a <_Z19handleSerialBusMsgsv+0x64c>
    29ea:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    29ee:	88 2f       	mov	r24, r24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	bc 01       	movw	r22, r24
    29f4:	87 e4       	ldi	r24, 0x47	; 71
    29f6:	97 e4       	ldi	r25, 0x47	; 71
    29f8:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <_Z26timeRequiredToSendStrAtWPMPcj>
    29fc:	88 5a       	subi	r24, 0xA8	; 168
    29fe:	9d 4f       	sbci	r25, 0xFD	; 253
    2a00:	96 95       	lsr	r25
    2a02:	87 95       	ror	r24
    2a04:	96 95       	lsr	r25
    2a06:	87 95       	ror	r24
    2a08:	96 95       	lsr	r25
    2a0a:	87 95       	ror	r24
    2a0c:	9c 01       	movw	r18, r24
    2a0e:	a5 ec       	ldi	r26, 0xC5	; 197
    2a10:	b0 e2       	ldi	r27, 0x20	; 32
    2a12:	0e 94 0c 4d 	call	0x9a18	; 0x9a18 <__umulhisi3>
    2a16:	92 95       	swap	r25
    2a18:	82 95       	swap	r24
    2a1a:	8f 70       	andi	r24, 0x0F	; 15
    2a1c:	89 27       	eor	r24, r25
    2a1e:	9f 70       	andi	r25, 0x0F	; 15
    2a20:	89 27       	eor	r24, r25
    2a22:	80 93 5c 47 	sts	0x475C, r24	; 0x80475c <g_time_needed_for_ID>
    2a26:	90 93 5d 47 	sts	0x475D, r25	; 0x80475d <g_time_needed_for_ID+0x1>
    2a2a:	87 e4       	ldi	r24, 0x47	; 71
    2a2c:	97 e4       	ldi	r25, 0x47	; 71
    2a2e:	89 2f       	mov	r24, r25
    2a30:	8f 93       	push	r24
    2a32:	87 e4       	ldi	r24, 0x47	; 71
    2a34:	97 e4       	ldi	r25, 0x47	; 71
    2a36:	8f 93       	push	r24
    2a38:	85 e6       	ldi	r24, 0x65	; 101
    2a3a:	92 e4       	ldi	r25, 0x42	; 66
    2a3c:	89 2f       	mov	r24, r25
    2a3e:	8f 93       	push	r24
    2a40:	85 e6       	ldi	r24, 0x65	; 101
    2a42:	92 e4       	ldi	r25, 0x42	; 66
    2a44:	8f 93       	push	r24
    2a46:	81 ef       	ldi	r24, 0xF1	; 241
    2a48:	96 e4       	ldi	r25, 0x46	; 70
    2a4a:	89 2f       	mov	r24, r25
    2a4c:	8f 93       	push	r24
    2a4e:	81 ef       	ldi	r24, 0xF1	; 241
    2a50:	96 e4       	ldi	r25, 0x46	; 70
    2a52:	8f 93       	push	r24
    2a54:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	81 ef       	ldi	r24, 0xF1	; 241
    2a66:	96 e4       	ldi	r25, 0x46	; 70
    2a68:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2a6c:	92 c3       	rjmp	.+1828   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a70:	9f 81       	ldd	r25, Y+7	; 0x07
    2a72:	fc 01       	movw	r30, r24
    2a74:	83 81       	ldd	r24, Z+3	; 0x03
    2a76:	83 35       	cpi	r24, 0x53	; 83
    2a78:	09 f0       	breq	.+2      	; 0x2a7c <_Z19handleSerialBusMsgsv+0x69e>
    2a7a:	6f c0       	rjmp	.+222    	; 0x2b5a <_Z19handleSerialBusMsgsv+0x77c>
    2a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a80:	fc 01       	movw	r30, r24
    2a82:	87 89       	ldd	r24, Z+23	; 0x17
    2a84:	8d 8b       	std	Y+21, r24	; 0x15
    2a86:	8d 89       	ldd	r24, Y+21	; 0x15
    2a88:	88 23       	and	r24, r24
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <_Z19handleSerialBusMsgsv+0x6b0>
    2a8c:	48 c0       	rjmp	.+144    	; 0x2b1e <_Z19handleSerialBusMsgsv+0x740>
    2a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a90:	9f 81       	ldd	r25, Y+7	; 0x07
    2a92:	47 96       	adiw	r24, 0x17	; 23
    2a94:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	8e 8b       	std	Y+22, r24	; 0x16
    2a9e:	8e 89       	ldd	r24, Y+22	; 0x16
    2aa0:	8f 8b       	std	Y+23, r24	; 0x17
    2aa2:	85 e0       	ldi	r24, 0x05	; 5
    2aa4:	88 8f       	std	Y+24, r24	; 0x18
    2aa6:	84 e1       	ldi	r24, 0x14	; 20
    2aa8:	89 8f       	std	Y+25, r24	; 0x19
    2aaa:	9f 89       	ldd	r25, Y+23	; 0x17
    2aac:	89 8d       	ldd	r24, Y+25	; 0x19
    2aae:	89 17       	cp	r24, r25
    2ab0:	40 f0       	brcs	.+16     	; 0x2ac2 <_Z19handleSerialBusMsgsv+0x6e4>
    2ab2:	9f 89       	ldd	r25, Y+23	; 0x17
    2ab4:	88 8d       	ldd	r24, Y+24	; 0x18
    2ab6:	98 17       	cp	r25, r24
    2ab8:	10 f4       	brcc	.+4      	; 0x2abe <_Z19handleSerialBusMsgsv+0x6e0>
    2aba:	88 8d       	ldd	r24, Y+24	; 0x18
    2abc:	03 c0       	rjmp	.+6      	; 0x2ac4 <_Z19handleSerialBusMsgsv+0x6e6>
    2abe:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac0:	01 c0       	rjmp	.+2      	; 0x2ac4 <_Z19handleSerialBusMsgsv+0x6e6>
    2ac2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ac4:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    2ac8:	4b e0       	ldi	r20, 0x0B	; 11
    2aca:	50 e4       	ldi	r21, 0x40	; 64
    2acc:	68 e2       	ldi	r22, 0x28	; 40
    2ace:	8c e7       	ldi	r24, 0x7C	; 124
    2ad0:	97 e4       	ldi	r25, 0x47	; 71
    2ad2:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2ad6:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    2ada:	88 23       	and	r24, r24
    2adc:	01 f1       	breq	.+64     	; 0x2b1e <_Z19handleSerialBusMsgsv+0x740>
    2ade:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2ae2:	88 2f       	mov	r24, r24
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	87 e4       	ldi	r24, 0x47	; 71
    2aea:	97 e4       	ldi	r25, 0x47	; 71
    2aec:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <_Z26timeRequiredToSendStrAtWPMPcj>
    2af0:	88 5a       	subi	r24, 0xA8	; 168
    2af2:	9d 4f       	sbci	r25, 0xFD	; 253
    2af4:	96 95       	lsr	r25
    2af6:	87 95       	ror	r24
    2af8:	96 95       	lsr	r25
    2afa:	87 95       	ror	r24
    2afc:	96 95       	lsr	r25
    2afe:	87 95       	ror	r24
    2b00:	9c 01       	movw	r18, r24
    2b02:	a5 ec       	ldi	r26, 0xC5	; 197
    2b04:	b0 e2       	ldi	r27, 0x20	; 32
    2b06:	0e 94 0c 4d 	call	0x9a18	; 0x9a18 <__umulhisi3>
    2b0a:	92 95       	swap	r25
    2b0c:	82 95       	swap	r24
    2b0e:	8f 70       	andi	r24, 0x0F	; 15
    2b10:	89 27       	eor	r24, r25
    2b12:	9f 70       	andi	r25, 0x0F	; 15
    2b14:	89 27       	eor	r24, r25
    2b16:	80 93 5c 47 	sts	0x475C, r24	; 0x80475c <g_time_needed_for_ID>
    2b1a:	90 93 5d 47 	sts	0x475D, r25	; 0x80475d <g_time_needed_for_ID+0x1>
    2b1e:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	29 2f       	mov	r18, r25
    2b28:	2f 93       	push	r18
    2b2a:	8f 93       	push	r24
    2b2c:	8c e6       	ldi	r24, 0x6C	; 108
    2b2e:	92 e4       	ldi	r25, 0x42	; 66
    2b30:	89 2f       	mov	r24, r25
    2b32:	8f 93       	push	r24
    2b34:	8c e6       	ldi	r24, 0x6C	; 108
    2b36:	92 e4       	ldi	r25, 0x42	; 66
    2b38:	8f 93       	push	r24
    2b3a:	81 ef       	ldi	r24, 0xF1	; 241
    2b3c:	96 e4       	ldi	r25, 0x46	; 70
    2b3e:	89 2f       	mov	r24, r25
    2b40:	8f 93       	push	r24
    2b42:	81 ef       	ldi	r24, 0xF1	; 241
    2b44:	96 e4       	ldi	r25, 0x46	; 70
    2b46:	8f 93       	push	r24
    2b48:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	09 c0       	rjmp	.+18     	; 0x2b6c <_Z19handleSerialBusMsgsv+0x78e>
    2b5a:	85 e0       	ldi	r24, 0x05	; 5
    2b5c:	e0 e6       	ldi	r30, 0x60	; 96
    2b5e:	f2 e4       	ldi	r31, 0x42	; 66
    2b60:	a1 ef       	ldi	r26, 0xF1	; 241
    2b62:	b6 e4       	ldi	r27, 0x46	; 70
    2b64:	01 90       	ld	r0, Z+
    2b66:	0d 92       	st	X+, r0
    2b68:	8a 95       	dec	r24
    2b6a:	e1 f7       	brne	.-8      	; 0x2b64 <_Z19handleSerialBusMsgsv+0x786>
    2b6c:	81 ef       	ldi	r24, 0xF1	; 241
    2b6e:	96 e4       	ldi	r25, 0x46	; 70
    2b70:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2b74:	0e c3       	rjmp	.+1564   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2b76:	8e 81       	ldd	r24, Y+6	; 0x06
    2b78:	9f 81       	ldd	r25, Y+7	; 0x07
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	83 81       	ldd	r24, Z+3	; 0x03
    2b7e:	88 23       	and	r24, r24
    2b80:	51 f1       	breq	.+84     	; 0x2bd6 <_Z19handleSerialBusMsgsv+0x7f8>
    2b82:	8e 81       	ldd	r24, Y+6	; 0x06
    2b84:	9f 81       	ldd	r25, Y+7	; 0x07
    2b86:	03 96       	adiw	r24, 0x03	; 3
    2b88:	48 e0       	ldi	r20, 0x08	; 8
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	81 ef       	ldi	r24, 0xF1	; 241
    2b90:	96 e4       	ldi	r25, 0x46	; 70
    2b92:	0e 94 cd 4e 	call	0x9d9a	; 0x9d9a <strncpy>
    2b96:	10 92 f9 46 	sts	0x46F9, r1	; 0x8046f9 <_ZL9g_tempStr+0x8>
    2b9a:	81 ef       	ldi	r24, 0xF1	; 241
    2b9c:	96 e4       	ldi	r25, 0x46	; 70
    2b9e:	0e 94 a9 47 	call	0x8f52	; 0x8f52 <_Z11only_digitsPc>
    2ba2:	88 23       	and	r24, r24
    2ba4:	41 f0       	breq	.+16     	; 0x2bb6 <_Z19handleSerialBusMsgsv+0x7d8>
    2ba6:	81 ef       	ldi	r24, 0xF1	; 241
    2ba8:	96 e4       	ldi	r25, 0x46	; 70
    2baa:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <strlen>
    2bae:	04 97       	sbiw	r24, 0x04	; 4
    2bb0:	10 f0       	brcs	.+4      	; 0x2bb6 <_Z19handleSerialBusMsgsv+0x7d8>
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	01 c0       	rjmp	.+2      	; 0x2bb8 <_Z19handleSerialBusMsgsv+0x7da>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	88 23       	and	r24, r24
    2bba:	69 f0       	breq	.+26     	; 0x2bd6 <_Z19handleSerialBusMsgsv+0x7f8>
    2bbc:	61 ef       	ldi	r22, 0xF1	; 241
    2bbe:	76 e4       	ldi	r23, 0x46	; 70
    2bc0:	86 e8       	ldi	r24, 0x86	; 134
    2bc2:	97 e4       	ldi	r25, 0x47	; 71
    2bc4:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <strcpy>
    2bc8:	46 e8       	ldi	r20, 0x86	; 134
    2bca:	57 e4       	ldi	r21, 0x47	; 71
    2bcc:	6f e1       	ldi	r22, 0x1F	; 31
    2bce:	8c e7       	ldi	r24, 0x7C	; 124
    2bd0:	97 e4       	ldi	r25, 0x47	; 71
    2bd2:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2bd6:	86 e8       	ldi	r24, 0x86	; 134
    2bd8:	97 e4       	ldi	r25, 0x47	; 71
    2bda:	89 2f       	mov	r24, r25
    2bdc:	8f 93       	push	r24
    2bde:	86 e8       	ldi	r24, 0x86	; 134
    2be0:	97 e4       	ldi	r25, 0x47	; 71
    2be2:	8f 93       	push	r24
    2be4:	8e e7       	ldi	r24, 0x7E	; 126
    2be6:	92 e4       	ldi	r25, 0x42	; 66
    2be8:	89 2f       	mov	r24, r25
    2bea:	8f 93       	push	r24
    2bec:	8e e7       	ldi	r24, 0x7E	; 126
    2bee:	92 e4       	ldi	r25, 0x42	; 66
    2bf0:	8f 93       	push	r24
    2bf2:	81 ef       	ldi	r24, 0xF1	; 241
    2bf4:	96 e4       	ldi	r25, 0x46	; 70
    2bf6:	89 2f       	mov	r24, r25
    2bf8:	8f 93       	push	r24
    2bfa:	81 ef       	ldi	r24, 0xF1	; 241
    2bfc:	96 e4       	ldi	r25, 0x46	; 70
    2bfe:	8f 93       	push	r24
    2c00:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	81 ef       	ldi	r24, 0xF1	; 241
    2c12:	96 e4       	ldi	r25, 0x46	; 70
    2c14:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    2c18:	bc c2       	rjmp	.+1400   	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    2c1a:	1d 82       	std	Y+5, r1	; 0x05
    2c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c20:	fc 01       	movw	r30, r24
    2c22:	83 81       	ldd	r24, Z+3	; 0x03
    2c24:	88 23       	and	r24, r24
    2c26:	39 f0       	breq	.+14     	; 0x2c36 <_Z19handleSerialBusMsgsv+0x858>
    2c28:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	83 81       	ldd	r24, Z+3	; 0x03
    2c30:	84 35       	cpi	r24, 0x54	; 84
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <_Z19handleSerialBusMsgsv+0x858>
    2c34:	ca c0       	rjmp	.+404    	; 0x2dca <_Z19handleSerialBusMsgsv+0x9ec>
    2c36:	8e 81       	ldd	r24, Y+6	; 0x06
    2c38:	9f 81       	ldd	r25, Y+7	; 0x07
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	87 89       	ldd	r24, Z+23	; 0x17
    2c3e:	88 23       	and	r24, r24
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <_Z19handleSerialBusMsgsv+0x866>
    2c42:	76 c0       	rjmp	.+236    	; 0x2d30 <_Z19handleSerialBusMsgsv+0x952>
    2c44:	8e 81       	ldd	r24, Y+6	; 0x06
    2c46:	9f 81       	ldd	r25, Y+7	; 0x07
    2c48:	47 96       	adiw	r24, 0x17	; 23
    2c4a:	4c e0       	ldi	r20, 0x0C	; 12
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	bc 01       	movw	r22, r24
    2c50:	81 ef       	ldi	r24, 0xF1	; 241
    2c52:	96 e4       	ldi	r25, 0x46	; 70
    2c54:	0e 94 cd 4e 	call	0x9d9a	; 0x9d9a <strncpy>
    2c58:	10 92 fd 46 	sts	0x46FD, r1	; 0x8046fd <_ZL9g_tempStr+0xc>
    2c5c:	80 91 85 47 	lds	r24, 0x4785	; 0x804785 <g_utc_offset>
    2c60:	81 95       	neg	r24
    2c62:	48 2f       	mov	r20, r24
    2c64:	6e e8       	ldi	r22, 0x8E	; 142
    2c66:	77 e4       	ldi	r23, 0x47	; 71
    2c68:	81 ef       	ldi	r24, 0xF1	; 241
    2c6a:	96 e4       	ldi	r25, 0x46	; 70
    2c6c:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <_Z18validateTimeStringPcPma>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8b a7       	std	Y+43, r24	; 0x2b
    2c76:	9c a7       	std	Y+44, r25	; 0x2c
    2c78:	ad a7       	std	Y+45, r26	; 0x2d
    2c7a:	be a7       	std	Y+46, r27	; 0x2e
    2c7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c80:	ad a5       	ldd	r26, Y+45	; 0x2d
    2c82:	be a5       	ldd	r27, Y+46	; 0x2e
    2c84:	89 2b       	or	r24, r25
    2c86:	8a 2b       	or	r24, r26
    2c88:	8b 2b       	or	r24, r27
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <_Z19handleSerialBusMsgsv+0x8b0>
    2c8c:	9b c0       	rjmp	.+310    	; 0x2dc4 <_Z19handleSerialBusMsgsv+0x9e6>
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	81 ef       	ldi	r24, 0xF1	; 241
    2c92:	96 e4       	ldi	r25, 0x46	; 70
    2c94:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <ds3231_set_date_time_arducon>
    2c98:	8f a7       	std	Y+47, r24	; 0x2f
    2c9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9c:	88 23       	and	r24, r24
    2c9e:	51 f0       	breq	.+20     	; 0x2cb4 <_Z19handleSerialBusMsgsv+0x8d6>
    2ca0:	88 e2       	ldi	r24, 0x28	; 40
    2ca2:	e7 ee       	ldi	r30, 0xE7	; 231
    2ca4:	f1 e4       	ldi	r31, 0x41	; 65
    2ca6:	a1 ef       	ldi	r26, 0xF1	; 241
    2ca8:	b6 e4       	ldi	r27, 0x46	; 70
    2caa:	01 90       	ld	r0, Z+
    2cac:	0d 92       	st	X+, r0
    2cae:	8a 95       	dec	r24
    2cb0:	e1 f7       	brne	.-8      	; 0x2caa <_Z19handleSerialBusMsgsv+0x8cc>
    2cb2:	88 c0       	rjmp	.+272    	; 0x2dc4 <_Z19handleSerialBusMsgsv+0x9e6>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	80 93 8e 47 	sts	0x478E, r24	; 0x80478e <g_current_epoch>
    2cc4:	90 93 8f 47 	sts	0x478F, r25	; 0x80478f <g_current_epoch+0x1>
    2cc8:	a0 93 90 47 	sts	0x4790, r26	; 0x804790 <g_current_epoch+0x2>
    2ccc:	b0 93 91 47 	sts	0x4791, r27	; 0x804791 <g_current_epoch+0x3>
    2cd0:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    2cd4:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    2cd8:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    2cdc:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    2ce0:	ae 01       	movw	r20, r28
    2ce2:	4b 59       	subi	r20, 0x9B	; 155
    2ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce6:	22 e3       	ldi	r18, 0x32	; 50
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 aa 30 	call	0x6154	; 0x6154 <convertEpochToTimeString>
    2cf2:	29 2f       	mov	r18, r25
    2cf4:	2f 93       	push	r18
    2cf6:	8f 93       	push	r24
    2cf8:	86 e8       	ldi	r24, 0x86	; 134
    2cfa:	92 e4       	ldi	r25, 0x42	; 66
    2cfc:	89 2f       	mov	r24, r25
    2cfe:	8f 93       	push	r24
    2d00:	86 e8       	ldi	r24, 0x86	; 134
    2d02:	92 e4       	ldi	r25, 0x42	; 66
    2d04:	8f 93       	push	r24
    2d06:	81 ef       	ldi	r24, 0xF1	; 241
    2d08:	96 e4       	ldi	r25, 0x46	; 70
    2d0a:	89 2f       	mov	r24, r25
    2d0c:	8f 93       	push	r24
    2d0e:	81 ef       	ldi	r24, 0xF1	; 241
    2d10:	96 e4       	ldi	r25, 0x46	; 70
    2d12:	8f 93       	push	r24
    2d14:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d2e:	4a c0       	rjmp	.+148    	; 0x2dc4 <_Z19handleSerialBusMsgsv+0x9e6>
    2d30:	ce 01       	movw	r24, r28
    2d32:	8c 59       	subi	r24, 0x9C	; 156
    2d34:	9f 4f       	sbci	r25, 0xFF	; 255
    2d36:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	80 93 8e 47 	sts	0x478E, r24	; 0x80478e <g_current_epoch>
    2d42:	90 93 8f 47 	sts	0x478F, r25	; 0x80478f <g_current_epoch+0x1>
    2d46:	a0 93 90 47 	sts	0x4790, r26	; 0x804790 <g_current_epoch+0x2>
    2d4a:	b0 93 91 47 	sts	0x4791, r27	; 0x804791 <g_current_epoch+0x3>
    2d4e:	ce 01       	movw	r24, r28
    2d50:	8c 59       	subi	r24, 0x9C	; 156
    2d52:	9f 4f       	sbci	r25, 0xFF	; 255
    2d54:	fc 01       	movw	r30, r24
    2d56:	80 81       	ld	r24, Z
    2d58:	88 23       	and	r24, r24
    2d5a:	51 f0       	breq	.+20     	; 0x2d70 <_Z19handleSerialBusMsgsv+0x992>
    2d5c:	88 e2       	ldi	r24, 0x28	; 40
    2d5e:	e7 ee       	ldi	r30, 0xE7	; 231
    2d60:	f1 e4       	ldi	r31, 0x41	; 65
    2d62:	a1 ef       	ldi	r26, 0xF1	; 241
    2d64:	b6 e4       	ldi	r27, 0x46	; 70
    2d66:	01 90       	ld	r0, Z+
    2d68:	0d 92       	st	X+, r0
    2d6a:	8a 95       	dec	r24
    2d6c:	e1 f7       	brne	.-8      	; 0x2d66 <_Z19handleSerialBusMsgsv+0x988>
    2d6e:	2a c0       	rjmp	.+84     	; 0x2dc4 <_Z19handleSerialBusMsgsv+0x9e6>
    2d70:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    2d74:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    2d78:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    2d7c:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    2d80:	ae 01       	movw	r20, r28
    2d82:	4b 59       	subi	r20, 0x9B	; 155
    2d84:	5f 4f       	sbci	r21, 0xFF	; 255
    2d86:	22 e3       	ldi	r18, 0x32	; 50
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 aa 30 	call	0x6154	; 0x6154 <convertEpochToTimeString>
    2d92:	29 2f       	mov	r18, r25
    2d94:	2f 93       	push	r18
    2d96:	8f 93       	push	r24
    2d98:	86 e8       	ldi	r24, 0x86	; 134
    2d9a:	92 e4       	ldi	r25, 0x42	; 66
    2d9c:	89 2f       	mov	r24, r25
    2d9e:	8f 93       	push	r24
    2da0:	86 e8       	ldi	r24, 0x86	; 134
    2da2:	92 e4       	ldi	r25, 0x42	; 66
    2da4:	8f 93       	push	r24
    2da6:	81 ef       	ldi	r24, 0xF1	; 241
    2da8:	96 e4       	ldi	r25, 0x46	; 70
    2daa:	89 2f       	mov	r24, r25
    2dac:	8f 93       	push	r24
    2dae:	81 ef       	ldi	r24, 0xF1	; 241
    2db0:	96 e4       	ldi	r25, 0x46	; 70
    2db2:	8f 93       	push	r24
    2db4:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	8d 83       	std	Y+5, r24	; 0x05
    2dc8:	be c1       	rjmp	.+892    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    2dca:	8e 81       	ldd	r24, Y+6	; 0x06
    2dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dce:	fc 01       	movw	r30, r24
    2dd0:	83 81       	ldd	r24, Z+3	; 0x03
    2dd2:	83 35       	cpi	r24, 0x53	; 83
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <_Z19handleSerialBusMsgsv+0x9fa>
    2dd6:	be c0       	rjmp	.+380    	; 0x2f54 <_Z19handleSerialBusMsgsv+0xb76>
    2dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dda:	9f 81       	ldd	r25, Y+7	; 0x07
    2ddc:	47 96       	adiw	r24, 0x17	; 23
    2dde:	bc 01       	movw	r22, r24
    2de0:	81 ef       	ldi	r24, 0xF1	; 241
    2de2:	96 e4       	ldi	r25, 0x46	; 70
    2de4:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <strcpy>
    2de8:	80 91 85 47 	lds	r24, 0x4785	; 0x804785 <g_utc_offset>
    2dec:	81 95       	neg	r24
    2dee:	48 2f       	mov	r20, r24
    2df0:	6d e7       	ldi	r22, 0x7D	; 125
    2df2:	77 e4       	ldi	r23, 0x47	; 71
    2df4:	81 ef       	ldi	r24, 0xF1	; 241
    2df6:	96 e4       	ldi	r25, 0x46	; 70
    2df8:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <_Z18validateTimeStringPcPma>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	8a 8f       	std	Y+26, r24	; 0x1a
    2e02:	9b 8f       	std	Y+27, r25	; 0x1b
    2e04:	ac 8f       	std	Y+28, r26	; 0x1c
    2e06:	bd 8f       	std	Y+29, r27	; 0x1d
    2e08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e0c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2e0e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2e10:	89 2b       	or	r24, r25
    2e12:	8a 2b       	or	r24, r26
    2e14:	8b 2b       	or	r24, r27
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <_Z19handleSerialBusMsgsv+0xa3c>
    2e18:	70 c0       	rjmp	.+224    	; 0x2efa <_Z19handleSerialBusMsgsv+0xb1c>
    2e1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e1e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2e20:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2e22:	80 93 7d 47 	sts	0x477D, r24	; 0x80477d <g_event_start_epoch>
    2e26:	90 93 7e 47 	sts	0x477E, r25	; 0x80477e <g_event_start_epoch+0x1>
    2e2a:	a0 93 7f 47 	sts	0x477F, r26	; 0x80477f <g_event_start_epoch+0x2>
    2e2e:	b0 93 80 47 	sts	0x4780, r27	; 0x804780 <g_event_start_epoch+0x3>
    2e32:	4d e7       	ldi	r20, 0x7D	; 125
    2e34:	57 e4       	ldi	r21, 0x47	; 71
    2e36:	62 e0       	ldi	r22, 0x02	; 2
    2e38:	8c e7       	ldi	r24, 0x7C	; 124
    2e3a:	97 e4       	ldi	r25, 0x47	; 71
    2e3c:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2e40:	80 91 81 47 	lds	r24, 0x4781	; 0x804781 <g_event_finish_epoch>
    2e44:	90 91 82 47 	lds	r25, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    2e48:	a0 91 83 47 	lds	r26, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    2e4c:	b0 91 84 47 	lds	r27, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    2e50:	8e 8f       	std	Y+30, r24	; 0x1e
    2e52:	9f 8f       	std	Y+31, r25	; 0x1f
    2e54:	a8 a3       	std	Y+32, r26	; 0x20
    2e56:	b9 a3       	std	Y+33, r27	; 0x21
    2e58:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    2e5c:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    2e60:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    2e64:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    2e68:	80 58       	subi	r24, 0x80	; 128
    2e6a:	9e 4a       	sbci	r25, 0xAE	; 174
    2e6c:	ae 4f       	sbci	r26, 0xFE	; 254
    2e6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e70:	8a a3       	std	Y+34, r24	; 0x22
    2e72:	9b a3       	std	Y+35, r25	; 0x23
    2e74:	ac a3       	std	Y+36, r26	; 0x24
    2e76:	bd a3       	std	Y+37, r27	; 0x25
    2e78:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2e7a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2e7c:	48 a1       	ldd	r20, Y+32	; 0x20
    2e7e:	59 a1       	ldd	r21, Y+33	; 0x21
    2e80:	8a a1       	ldd	r24, Y+34	; 0x22
    2e82:	9b a1       	ldd	r25, Y+35	; 0x23
    2e84:	ac a1       	ldd	r26, Y+36	; 0x24
    2e86:	bd a1       	ldd	r27, Y+37	; 0x25
    2e88:	28 17       	cp	r18, r24
    2e8a:	39 07       	cpc	r19, r25
    2e8c:	4a 07       	cpc	r20, r26
    2e8e:	5b 07       	cpc	r21, r27
    2e90:	28 f4       	brcc	.+10     	; 0x2e9c <_Z19handleSerialBusMsgsv+0xabe>
    2e92:	8a a1       	ldd	r24, Y+34	; 0x22
    2e94:	9b a1       	ldd	r25, Y+35	; 0x23
    2e96:	ac a1       	ldd	r26, Y+36	; 0x24
    2e98:	bd a1       	ldd	r27, Y+37	; 0x25
    2e9a:	04 c0       	rjmp	.+8      	; 0x2ea4 <_Z19handleSerialBusMsgsv+0xac6>
    2e9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ea0:	a8 a1       	ldd	r26, Y+32	; 0x20
    2ea2:	b9 a1       	ldd	r27, Y+33	; 0x21
    2ea4:	80 93 81 47 	sts	0x4781, r24	; 0x804781 <g_event_finish_epoch>
    2ea8:	90 93 82 47 	sts	0x4782, r25	; 0x804782 <g_event_finish_epoch+0x1>
    2eac:	a0 93 83 47 	sts	0x4783, r26	; 0x804783 <g_event_finish_epoch+0x2>
    2eb0:	b0 93 84 47 	sts	0x4784, r27	; 0x804784 <g_event_finish_epoch+0x3>
    2eb4:	41 e8       	ldi	r20, 0x81	; 129
    2eb6:	57 e4       	ldi	r21, 0x47	; 71
    2eb8:	66 e0       	ldi	r22, 0x06	; 6
    2eba:	8c e7       	ldi	r24, 0x7C	; 124
    2ebc:	97 e4       	ldi	r25, 0x47	; 71
    2ebe:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2ec2:	63 e0       	ldi	r22, 0x03	; 3
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    2ecc:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    2ed0:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    2ed4:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    2ed8:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    2edc:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    2ee0:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    2ee4:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    2ee8:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    2eec:	82 17       	cp	r24, r18
    2eee:	93 07       	cpc	r25, r19
    2ef0:	a4 07       	cpc	r26, r20
    2ef2:	b5 07       	cpc	r27, r21
    2ef4:	10 f4       	brcc	.+4      	; 0x2efa <_Z19handleSerialBusMsgsv+0xb1c>
    2ef6:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_Z18startEventUsingRTCv>
    2efa:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    2efe:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    2f02:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    2f06:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    2f0a:	ae 01       	movw	r20, r28
    2f0c:	4b 59       	subi	r20, 0x9B	; 155
    2f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f10:	22 e3       	ldi	r18, 0x32	; 50
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	bc 01       	movw	r22, r24
    2f16:	cd 01       	movw	r24, r26
    2f18:	0e 94 aa 30 	call	0x6154	; 0x6154 <convertEpochToTimeString>
    2f1c:	29 2f       	mov	r18, r25
    2f1e:	2f 93       	push	r18
    2f20:	8f 93       	push	r24
    2f22:	80 e9       	ldi	r24, 0x90	; 144
    2f24:	92 e4       	ldi	r25, 0x42	; 66
    2f26:	89 2f       	mov	r24, r25
    2f28:	8f 93       	push	r24
    2f2a:	80 e9       	ldi	r24, 0x90	; 144
    2f2c:	92 e4       	ldi	r25, 0x42	; 66
    2f2e:	8f 93       	push	r24
    2f30:	81 ef       	ldi	r24, 0xF1	; 241
    2f32:	96 e4       	ldi	r25, 0x46	; 70
    2f34:	89 2f       	mov	r24, r25
    2f36:	8f 93       	push	r24
    2f38:	81 ef       	ldi	r24, 0xF1	; 241
    2f3a:	96 e4       	ldi	r25, 0x46	; 70
    2f3c:	8f 93       	push	r24
    2f3e:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	8d 83       	std	Y+5, r24	; 0x05
    2f52:	f9 c0       	rjmp	.+498    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    2f54:	8e 81       	ldd	r24, Y+6	; 0x06
    2f56:	9f 81       	ldd	r25, Y+7	; 0x07
    2f58:	fc 01       	movw	r30, r24
    2f5a:	83 81       	ldd	r24, Z+3	; 0x03
    2f5c:	86 34       	cpi	r24, 0x46	; 70
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <_Z19handleSerialBusMsgsv+0xb84>
    2f60:	7c c0       	rjmp	.+248    	; 0x305a <_Z19handleSerialBusMsgsv+0xc7c>
    2f62:	8e 81       	ldd	r24, Y+6	; 0x06
    2f64:	9f 81       	ldd	r25, Y+7	; 0x07
    2f66:	47 96       	adiw	r24, 0x17	; 23
    2f68:	bc 01       	movw	r22, r24
    2f6a:	81 ef       	ldi	r24, 0xF1	; 241
    2f6c:	96 e4       	ldi	r25, 0x46	; 70
    2f6e:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <strcpy>
    2f72:	80 91 85 47 	lds	r24, 0x4785	; 0x804785 <g_utc_offset>
    2f76:	81 95       	neg	r24
    2f78:	48 2f       	mov	r20, r24
    2f7a:	61 e8       	ldi	r22, 0x81	; 129
    2f7c:	77 e4       	ldi	r23, 0x47	; 71
    2f7e:	81 ef       	ldi	r24, 0xF1	; 241
    2f80:	96 e4       	ldi	r25, 0x46	; 70
    2f82:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <_Z18validateTimeStringPcPma>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8e a3       	std	Y+38, r24	; 0x26
    2f8c:	9f a3       	std	Y+39, r25	; 0x27
    2f8e:	a8 a7       	std	Y+40, r26	; 0x28
    2f90:	b9 a7       	std	Y+41, r27	; 0x29
    2f92:	8e a1       	ldd	r24, Y+38	; 0x26
    2f94:	9f a1       	ldd	r25, Y+39	; 0x27
    2f96:	a8 a5       	ldd	r26, Y+40	; 0x28
    2f98:	b9 a5       	ldd	r27, Y+41	; 0x29
    2f9a:	89 2b       	or	r24, r25
    2f9c:	8a 2b       	or	r24, r26
    2f9e:	8b 2b       	or	r24, r27
    2fa0:	79 f1       	breq	.+94     	; 0x3000 <_Z19handleSerialBusMsgsv+0xc22>
    2fa2:	8e a1       	ldd	r24, Y+38	; 0x26
    2fa4:	9f a1       	ldd	r25, Y+39	; 0x27
    2fa6:	a8 a5       	ldd	r26, Y+40	; 0x28
    2fa8:	b9 a5       	ldd	r27, Y+41	; 0x29
    2faa:	80 93 81 47 	sts	0x4781, r24	; 0x804781 <g_event_finish_epoch>
    2fae:	90 93 82 47 	sts	0x4782, r25	; 0x804782 <g_event_finish_epoch+0x1>
    2fb2:	a0 93 83 47 	sts	0x4783, r26	; 0x804783 <g_event_finish_epoch+0x2>
    2fb6:	b0 93 84 47 	sts	0x4784, r27	; 0x804784 <g_event_finish_epoch+0x3>
    2fba:	41 e8       	ldi	r20, 0x81	; 129
    2fbc:	57 e4       	ldi	r21, 0x47	; 71
    2fbe:	66 e0       	ldi	r22, 0x06	; 6
    2fc0:	8c e7       	ldi	r24, 0x7C	; 124
    2fc2:	97 e4       	ldi	r25, 0x47	; 71
    2fc4:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2fc8:	63 e0       	ldi	r22, 0x03	; 3
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    2fd2:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    2fd6:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    2fda:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    2fde:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    2fe2:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    2fe6:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    2fea:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    2fee:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    2ff2:	82 17       	cp	r24, r18
    2ff4:	93 07       	cpc	r25, r19
    2ff6:	a4 07       	cpc	r26, r20
    2ff8:	b5 07       	cpc	r27, r21
    2ffa:	10 f4       	brcc	.+4      	; 0x3000 <_Z19handleSerialBusMsgsv+0xc22>
    2ffc:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_Z18startEventUsingRTCv>
    3000:	80 91 81 47 	lds	r24, 0x4781	; 0x804781 <g_event_finish_epoch>
    3004:	90 91 82 47 	lds	r25, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    3008:	a0 91 83 47 	lds	r26, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    300c:	b0 91 84 47 	lds	r27, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    3010:	ae 01       	movw	r20, r28
    3012:	4b 59       	subi	r20, 0x9B	; 155
    3014:	5f 4f       	sbci	r21, 0xFF	; 255
    3016:	22 e3       	ldi	r18, 0x32	; 50
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 aa 30 	call	0x6154	; 0x6154 <convertEpochToTimeString>
    3022:	29 2f       	mov	r18, r25
    3024:	2f 93       	push	r18
    3026:	8f 93       	push	r24
    3028:	8b e9       	ldi	r24, 0x9B	; 155
    302a:	92 e4       	ldi	r25, 0x42	; 66
    302c:	89 2f       	mov	r24, r25
    302e:	8f 93       	push	r24
    3030:	8b e9       	ldi	r24, 0x9B	; 155
    3032:	92 e4       	ldi	r25, 0x42	; 66
    3034:	8f 93       	push	r24
    3036:	81 ef       	ldi	r24, 0xF1	; 241
    3038:	96 e4       	ldi	r25, 0x46	; 70
    303a:	89 2f       	mov	r24, r25
    303c:	8f 93       	push	r24
    303e:	81 ef       	ldi	r24, 0xF1	; 241
    3040:	96 e4       	ldi	r25, 0x46	; 70
    3042:	8f 93       	push	r24
    3044:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	76 c0       	rjmp	.+236    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    305a:	8e 81       	ldd	r24, Y+6	; 0x06
    305c:	9f 81       	ldd	r25, Y+7	; 0x07
    305e:	fc 01       	movw	r30, r24
    3060:	83 81       	ldd	r24, Z+3	; 0x03
    3062:	8a 32       	cpi	r24, 0x2A	; 42
    3064:	19 f4       	brne	.+6      	; 0x306c <_Z19handleSerialBusMsgsv+0xc8e>
    3066:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <ds3231_sync2nearestMinute>
    306a:	6d c0       	rjmp	.+218    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    306c:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <_Z23clockConfigurationCheckv>
    3070:	8a a7       	std	Y+42, r24	; 0x2a
    3072:	8a a5       	ldd	r24, Y+42	; 0x2a
    3074:	81 30       	cpi	r24, 0x01	; 1
    3076:	31 f0       	breq	.+12     	; 0x3084 <_Z19handleSerialBusMsgsv+0xca6>
    3078:	8a a5       	ldd	r24, Y+42	; 0x2a
    307a:	85 30       	cpi	r24, 0x05	; 5
    307c:	19 f0       	breq	.+6      	; 0x3084 <_Z19handleSerialBusMsgsv+0xca6>
    307e:	0e 94 2f 28 	call	0x505e	; 0x505e <_Z18reportConfigErrorsv>
    3082:	61 c0       	rjmp	.+194    	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    3084:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    3088:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    308c:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    3090:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    3094:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    3098:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    309c:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    30a0:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    30a4:	0f 2e       	mov	r0, r31
    30a6:	f7 ea       	ldi	r31, 0xA7	; 167
    30a8:	ef 2e       	mov	r14, r31
    30aa:	f2 e4       	ldi	r31, 0x42	; 66
    30ac:	ff 2e       	mov	r15, r31
    30ae:	f0 2d       	mov	r31, r0
    30b0:	04 eb       	ldi	r16, 0xB4	; 180
    30b2:	12 e4       	ldi	r17, 0x42	; 66
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <_Z14reportTimeTillmmPKcS0_>
    30bc:	20 91 81 47 	lds	r18, 0x4781	; 0x804781 <g_event_finish_epoch>
    30c0:	30 91 82 47 	lds	r19, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    30c4:	40 91 83 47 	lds	r20, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    30c8:	50 91 84 47 	lds	r21, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    30cc:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    30d0:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    30d4:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    30d8:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    30dc:	e1 2c       	mov	r14, r1
    30de:	f1 2c       	mov	r15, r1
    30e0:	00 ec       	ldi	r16, 0xC0	; 192
    30e2:	12 e4       	ldi	r17, 0x42	; 66
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <_Z14reportTimeTillmmPKcS0_>
    30ec:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    30f0:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    30f4:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    30f8:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    30fc:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    3100:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    3104:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    3108:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    310c:	28 17       	cp	r18, r24
    310e:	39 07       	cpc	r19, r25
    3110:	4a 07       	cpc	r20, r26
    3112:	5b 07       	cpc	r21, r27
    3114:	c0 f4       	brcc	.+48     	; 0x3146 <_Z19handleSerialBusMsgsv+0xd68>
    3116:	20 91 81 47 	lds	r18, 0x4781	; 0x804781 <g_event_finish_epoch>
    311a:	30 91 82 47 	lds	r19, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    311e:	40 91 83 47 	lds	r20, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    3122:	50 91 84 47 	lds	r21, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    3126:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    312a:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    312e:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    3132:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    3136:	e1 2c       	mov	r14, r1
    3138:	f1 2c       	mov	r15, r1
    313a:	08 ec       	ldi	r16, 0xC8	; 200
    313c:	12 e4       	ldi	r17, 0x42	; 66
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <_Z14reportTimeTillmmPKcS0_>
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	88 23       	and	r24, r24
    314a:	01 f1       	breq	.+64     	; 0x318c <_Z19handleSerialBusMsgsv+0xdae>
    314c:	81 ef       	ldi	r24, 0xF1	; 241
    314e:	96 e4       	ldi	r25, 0x46	; 70
    3150:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    3154:	1b c0       	rjmp	.+54     	; 0x318c <_Z19handleSerialBusMsgsv+0xdae>
    3156:	8e 81       	ldd	r24, Y+6	; 0x06
    3158:	9f 81       	ldd	r25, Y+7	; 0x07
    315a:	fc 01       	movw	r30, r24
    315c:	83 81       	ldd	r24, Z+3	; 0x03
    315e:	83 34       	cpi	r24, 0x43	; 67
    3160:	b9 f4       	brne	.+46     	; 0x3190 <_Z19handleSerialBusMsgsv+0xdb2>
    3162:	8e 81       	ldd	r24, Y+6	; 0x06
    3164:	9f 81       	ldd	r25, Y+7	; 0x07
    3166:	fc 01       	movw	r30, r24
    3168:	87 89       	ldd	r24, Z+23	; 0x17
    316a:	88 23       	and	r24, r24
    316c:	89 f0       	breq	.+34     	; 0x3190 <_Z19handleSerialBusMsgsv+0xdb2>
    316e:	8e 81       	ldd	r24, Y+6	; 0x06
    3170:	9f 81       	ldd	r25, Y+7	; 0x07
    3172:	47 96       	adiw	r24, 0x17	; 23
    3174:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <atoi>
    3178:	88 ab       	std	Y+48, r24	; 0x30
    317a:	99 ab       	std	Y+49, r25	; 0x31
    317c:	09 c0       	rjmp	.+18     	; 0x3190 <_Z19handleSerialBusMsgsv+0xdb2>
    317e:	85 e7       	ldi	r24, 0x75	; 117
    3180:	90 e4       	ldi	r25, 0x40	; 64
    3182:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    3188:	00 00       	nop
    318a:	03 c0       	rjmp	.+6      	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    318c:	00 00       	nop
    318e:	01 c0       	rjmp	.+2      	; 0x3192 <_Z19handleSerialBusMsgsv+0xdb4>
    3190:	00 00       	nop
    3192:	8e 81       	ldd	r24, Y+6	; 0x06
    3194:	9f 81       	ldd	r25, Y+7	; 0x07
    3196:	fc 01       	movw	r30, r24
    3198:	11 82       	std	Z+1, r1	; 0x01
    319a:	12 82       	std	Z+2, r1	; 0x02
    319c:	0e 94 84 3c 	call	0x7908	; 0x7908 <sb_send_NewPrompt>
    31a0:	2a c9       	rjmp	.-3500   	; 0x23f6 <_Z19handleSerialBusMsgsv+0x18>
    31a2:	00 00       	nop
    31a4:	ca 56       	subi	r28, 0x6A	; 106
    31a6:	df 4f       	sbci	r29, 0xFF	; 255
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	08 95       	ret

000031ba <_Z17handleLinkBusMsgsv>:
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	e3 97       	sbiw	r28, 0x33	; 51
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <_Z18nextFullLBRxBufferv>
    31d8:	8c 87       	std	Y+12, r24	; 0x0c
    31da:	9d 87       	std	Y+13, r25	; 0x0d
    31dc:	21 e0       	ldi	r18, 0x01	; 1
    31de:	8c 85       	ldd	r24, Y+12	; 0x0c
    31e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31e2:	89 2b       	or	r24, r25
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <_Z17handleLinkBusMsgsv+0x2e>
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	22 23       	and	r18, r18
    31ea:	09 f4       	brne	.+2      	; 0x31ee <_Z17handleLinkBusMsgsv+0x34>
    31ec:	8b c6       	rjmp	.+3350   	; 0x3f04 <_Z17handleLinkBusMsgsv+0xd4a>
    31ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    31f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31f2:	fc 01       	movw	r30, r24
    31f4:	81 81       	ldd	r24, Z+1	; 0x01
    31f6:	92 81       	ldd	r25, Z+2	; 0x02
    31f8:	8e 87       	std	Y+14, r24	; 0x0e
    31fa:	9f 87       	std	Y+15, r25	; 0x0f
    31fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    31fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3200:	82 38       	cpi	r24, 0x82	; 130
    3202:	fe e1       	ldi	r31, 0x1E	; 30
    3204:	9f 07       	cpc	r25, r31
    3206:	09 f4       	brne	.+2      	; 0x320a <_Z17handleLinkBusMsgsv+0x50>
    3208:	71 c0       	rjmp	.+226    	; 0x32ec <_Z17handleLinkBusMsgsv+0x132>
    320a:	83 38       	cpi	r24, 0x83	; 131
    320c:	2e e1       	ldi	r18, 0x1E	; 30
    320e:	92 07       	cpc	r25, r18
    3210:	30 f5       	brcc	.+76     	; 0x325e <_Z17handleLinkBusMsgsv+0xa4>
    3212:	81 36       	cpi	r24, 0x61	; 97
    3214:	33 e0       	ldi	r19, 0x03	; 3
    3216:	93 07       	cpc	r25, r19
    3218:	09 f4       	brne	.+2      	; 0x321c <_Z17handleLinkBusMsgsv+0x62>
    321a:	de c4       	rjmp	.+2492   	; 0x3bd8 <_Z17handleLinkBusMsgsv+0xa1e>
    321c:	82 36       	cpi	r24, 0x62	; 98
    321e:	e3 e0       	ldi	r30, 0x03	; 3
    3220:	9e 07       	cpc	r25, r30
    3222:	78 f4       	brcc	.+30     	; 0x3242 <_Z17handleLinkBusMsgsv+0x88>
    3224:	85 31       	cpi	r24, 0x15	; 21
    3226:	f3 e0       	ldi	r31, 0x03	; 3
    3228:	9f 07       	cpc	r25, r31
    322a:	09 f4       	brne	.+2      	; 0x322e <_Z17handleLinkBusMsgsv+0x74>
    322c:	1e c1       	rjmp	.+572    	; 0x346a <_Z17handleLinkBusMsgsv+0x2b0>
    322e:	8e 31       	cpi	r24, 0x1E	; 30
    3230:	23 e0       	ldi	r18, 0x03	; 3
    3232:	92 07       	cpc	r25, r18
    3234:	09 f4       	brne	.+2      	; 0x3238 <_Z17handleLinkBusMsgsv+0x7e>
    3236:	45 c3       	rjmp	.+1674   	; 0x38c2 <_Z17handleLinkBusMsgsv+0x708>
    3238:	84 35       	cpi	r24, 0x54	; 84
    323a:	91 05       	cpc	r25, r1
    323c:	09 f4       	brne	.+2      	; 0x3240 <_Z17handleLinkBusMsgsv+0x86>
    323e:	41 c4       	rjmp	.+2178   	; 0x3ac2 <_Z17handleLinkBusMsgsv+0x908>
    3240:	36 c6       	rjmp	.+3180   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    3242:	8f 3a       	cpi	r24, 0xAF	; 175
    3244:	33 e0       	ldi	r19, 0x03	; 3
    3246:	93 07       	cpc	r25, r19
    3248:	d1 f1       	breq	.+116    	; 0x32be <_Z17handleLinkBusMsgsv+0x104>
    324a:	86 3a       	cpi	r24, 0xA6	; 166
    324c:	ec e1       	ldi	r30, 0x1C	; 28
    324e:	9e 07       	cpc	r25, r30
    3250:	09 f4       	brne	.+2      	; 0x3254 <_Z17handleLinkBusMsgsv+0x9a>
    3252:	4d c5       	rjmp	.+2714   	; 0x3cee <_Z17handleLinkBusMsgsv+0xb34>
    3254:	84 38       	cpi	r24, 0x84	; 132
    3256:	93 40       	sbci	r25, 0x03	; 3
    3258:	09 f4       	brne	.+2      	; 0x325c <_Z17handleLinkBusMsgsv+0xa2>
    325a:	cd c1       	rjmp	.+922    	; 0x35f6 <_Z17handleLinkBusMsgsv+0x43c>
    325c:	28 c6       	rjmp	.+3152   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    325e:	8a 39       	cpi	r24, 0x9A	; 154
    3260:	23 e2       	ldi	r18, 0x23	; 35
    3262:	92 07       	cpc	r25, r18
    3264:	09 f4       	brne	.+2      	; 0x3268 <_Z17handleLinkBusMsgsv+0xae>
    3266:	41 c0       	rjmp	.+130    	; 0x32ea <_Z17handleLinkBusMsgsv+0x130>
    3268:	8b 39       	cpi	r24, 0x9B	; 155
    326a:	33 e2       	ldi	r19, 0x23	; 35
    326c:	93 07       	cpc	r25, r19
    326e:	78 f4       	brcc	.+30     	; 0x328e <_Z17handleLinkBusMsgsv+0xd4>
    3270:	8d 3a       	cpi	r24, 0xAD	; 173
    3272:	e2 e2       	ldi	r30, 0x22	; 34
    3274:	9e 07       	cpc	r25, r30
    3276:	09 f4       	brne	.+2      	; 0x327a <_Z17handleLinkBusMsgsv+0xc0>
    3278:	96 c0       	rjmp	.+300    	; 0x33a6 <_Z17handleLinkBusMsgsv+0x1ec>
    327a:	81 3c       	cpi	r24, 0xC1	; 193
    327c:	f2 e2       	ldi	r31, 0x22	; 34
    327e:	9f 07       	cpc	r25, r31
    3280:	09 f4       	brne	.+2      	; 0x3284 <_Z17handleLinkBusMsgsv+0xca>
    3282:	ee c0       	rjmp	.+476    	; 0x3460 <_Z17handleLinkBusMsgsv+0x2a6>
    3284:	81 3d       	cpi	r24, 0xD1	; 209
    3286:	9e 41       	sbci	r25, 0x1E	; 30
    3288:	09 f4       	brne	.+2      	; 0x328c <_Z17handleLinkBusMsgsv+0xd2>
    328a:	bd c4       	rjmp	.+2426   	; 0x3c06 <_Z17handleLinkBusMsgsv+0xa4c>
    328c:	10 c6       	rjmp	.+3104   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    328e:	80 3d       	cpi	r24, 0xD0	; 208
    3290:	33 e2       	ldi	r19, 0x23	; 35
    3292:	93 07       	cpc	r25, r19
    3294:	09 f4       	brne	.+2      	; 0x3298 <_Z17handleLinkBusMsgsv+0xde>
    3296:	78 c3       	rjmp	.+1776   	; 0x3988 <_Z17handleLinkBusMsgsv+0x7ce>
    3298:	81 3d       	cpi	r24, 0xD1	; 209
    329a:	e3 e2       	ldi	r30, 0x23	; 35
    329c:	9e 07       	cpc	r25, r30
    329e:	28 f4       	brcc	.+10     	; 0x32aa <_Z17handleLinkBusMsgsv+0xf0>
    32a0:	8f 3c       	cpi	r24, 0xCF	; 207
    32a2:	93 42       	sbci	r25, 0x23	; 35
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <_Z17handleLinkBusMsgsv+0xee>
    32a6:	eb c5       	rjmp	.+3030   	; 0x3e7e <_Z17handleLinkBusMsgsv+0xcc4>
    32a8:	02 c6       	rjmp	.+3076   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    32aa:	87 3f       	cpi	r24, 0xF7	; 247
    32ac:	23 e2       	ldi	r18, 0x23	; 35
    32ae:	92 07       	cpc	r25, r18
    32b0:	09 f4       	brne	.+2      	; 0x32b4 <_Z17handleLinkBusMsgsv+0xfa>
    32b2:	16 c2       	rjmp	.+1068   	; 0x36e0 <_Z17handleLinkBusMsgsv+0x526>
    32b4:	8c 39       	cpi	r24, 0x9C	; 156
    32b6:	94 42       	sbci	r25, 0x24	; 36
    32b8:	09 f4       	brne	.+2      	; 0x32bc <_Z17handleLinkBusMsgsv+0x102>
    32ba:	f1 c5       	rjmp	.+3042   	; 0x3e9e <_Z17handleLinkBusMsgsv+0xce4>
    32bc:	f8 c5       	rjmp	.+3056   	; 0x3eae <_Z17handleLinkBusMsgsv+0xcf4>
    32be:	8c 85       	ldd	r24, Y+12	; 0x0c
    32c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    32c2:	fc 01       	movw	r30, r24
    32c4:	83 81       	ldd	r24, Z+3	; 0x03
    32c6:	88 23       	and	r24, r24
    32c8:	09 f4       	brne	.+2      	; 0x32cc <_Z17handleLinkBusMsgsv+0x112>
    32ca:	f7 c5       	rjmp	.+3054   	; 0x3eba <_Z17handleLinkBusMsgsv+0xd00>
    32cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    32d0:	03 96       	adiw	r24, 0x03	; 3
    32d2:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <atoi>
    32d6:	21 e0       	ldi	r18, 0x01	; 1
    32d8:	89 2b       	or	r24, r25
    32da:	09 f4       	brne	.+2      	; 0x32de <_Z17handleLinkBusMsgsv+0x124>
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	28 8b       	std	Y+16, r18	; 0x10
    32e0:	0e 94 1e 38 	call	0x703c	; 0x703c <_Z15linkbus_disablev>
    32e4:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    32e8:	e8 c5       	rjmp	.+3024   	; 0x3eba <_Z17handleLinkBusMsgsv+0xd00>
    32ea:	ff cf       	rjmp	.-2      	; 0x32ea <_Z17handleLinkBusMsgsv+0x130>
    32ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    32f0:	fc 01       	movw	r30, r24
    32f2:	83 81       	ldd	r24, Z+3	; 0x03
    32f4:	89 8b       	std	Y+17, r24	; 0x11
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    32fc:	89 89       	ldd	r24, Y+17	; 0x11
    32fe:	8a 35       	cpi	r24, 0x5A	; 90
    3300:	21 f4       	brne	.+8      	; 0x330a <_Z17handleLinkBusMsgsv+0x150>
    3302:	88 e7       	ldi	r24, 0x78	; 120
    3304:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3308:	da c5       	rjmp	.+2996   	; 0x3ebe <_Z17handleLinkBusMsgsv+0xd04>
    330a:	89 89       	ldd	r24, Y+17	; 0x11
    330c:	80 33       	cpi	r24, 0x30	; 48
    330e:	b1 f5       	brne	.+108    	; 0x337c <_Z17handleLinkBusMsgsv+0x1c2>
    3310:	80 91 6b 47 	lds	r24, 0x476B	; 0x80476b <g_waiting_for_next_event>
    3314:	88 23       	and	r24, r24
    3316:	39 f0       	breq	.+14     	; 0x3326 <_Z17handleLinkBusMsgsv+0x16c>
    3318:	49 ed       	ldi	r20, 0xD9	; 217
    331a:	52 e4       	ldi	r21, 0x42	; 66
    331c:	6b ed       	ldi	r22, 0xDB	; 219
    331e:	72 e4       	ldi	r23, 0x42	; 66
    3320:	83 e0       	ldi	r24, 0x03	; 3
    3322:	0e 94 81 38 	call	0x7102	; 0x7102 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	2b 2f       	mov	r18, r27
    3334:	2f 93       	push	r18
    3336:	2a 2f       	mov	r18, r26
    3338:	2f 93       	push	r18
    333a:	29 2f       	mov	r18, r25
    333c:	2f 93       	push	r18
    333e:	8f 93       	push	r24
    3340:	8f ed       	ldi	r24, 0xDF	; 223
    3342:	92 e4       	ldi	r25, 0x42	; 66
    3344:	89 2f       	mov	r24, r25
    3346:	8f 93       	push	r24
    3348:	8f ed       	ldi	r24, 0xDF	; 223
    334a:	92 e4       	ldi	r25, 0x42	; 66
    334c:	8f 93       	push	r24
    334e:	81 ef       	ldi	r24, 0xF1	; 241
    3350:	96 e4       	ldi	r25, 0x46	; 70
    3352:	89 2f       	mov	r24, r25
    3354:	8f 93       	push	r24
    3356:	81 ef       	ldi	r24, 0xF1	; 241
    3358:	96 e4       	ldi	r25, 0x46	; 70
    335a:	8f 93       	push	r24
    335c:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    3360:	2d b7       	in	r18, 0x3d	; 61
    3362:	3e b7       	in	r19, 0x3e	; 62
    3364:	28 5f       	subi	r18, 0xF8	; 248
    3366:	3f 4f       	sbci	r19, 0xFF	; 255
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	41 ef       	ldi	r20, 0xF1	; 241
    336e:	56 e4       	ldi	r21, 0x46	; 70
    3370:	63 ee       	ldi	r22, 0xE3	; 227
    3372:	72 e4       	ldi	r23, 0x42	; 66
    3374:	83 e0       	ldi	r24, 0x03	; 3
    3376:	0e 94 81 38 	call	0x7102	; 0x7102 <_Z11lb_send_msg13LBMessageTypePKcPc>
    337a:	a1 c5       	rjmp	.+2882   	; 0x3ebe <_Z17handleLinkBusMsgsv+0xd04>
    337c:	89 89       	ldd	r24, Y+17	; 0x11
    337e:	83 33       	cpi	r24, 0x33	; 51
    3380:	09 f0       	breq	.+2      	; 0x3384 <_Z17handleLinkBusMsgsv+0x1ca>
    3382:	9d c5       	rjmp	.+2874   	; 0x3ebe <_Z17handleLinkBusMsgsv+0xd04>
    3384:	f8 94       	cli
    3386:	10 92 2f 47 	sts	0x472F, r1	; 0x80472f <_ZL19g_wifi_enable_delay>
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3390:	10 92 6b 47 	sts	0x476B, r1	; 0x80476b <g_waiting_for_next_event>
    3394:	10 92 6a 47 	sts	0x476A, r1	; 0x80476a <g_check_for_next_event>
    3398:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	80 93 30 47 	sts	0x4730, r24	; 0x804730 <_ZL20g_shutting_down_wifi>
    33a2:	78 94       	sei
    33a4:	8c c5       	rjmp	.+2840   	; 0x3ebe <_Z17handleLinkBusMsgsv+0xd04>
    33a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    33a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    33aa:	fc 01       	movw	r30, r24
    33ac:	83 81       	ldd	r24, Z+3	; 0x03
    33ae:	88 23       	and	r24, r24
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <_Z17handleLinkBusMsgsv+0x1fa>
    33b2:	87 c5       	rjmp	.+2830   	; 0x3ec2 <_Z17handleLinkBusMsgsv+0xd08>
    33b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    33b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    33b8:	fc 01       	movw	r30, r24
    33ba:	83 81       	ldd	r24, Z+3	; 0x03
    33bc:	8d 34       	cpi	r24, 0x4D	; 77
    33be:	a9 f4       	brne	.+42     	; 0x33ea <_Z17handleLinkBusMsgsv+0x230>
    33c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    33c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    33c4:	fc 01       	movw	r30, r24
    33c6:	80 8d       	ldd	r24, Z+24	; 0x18
    33c8:	88 23       	and	r24, r24
    33ca:	79 f0       	breq	.+30     	; 0x33ea <_Z17handleLinkBusMsgsv+0x230>
    33cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    33d0:	48 96       	adiw	r24, 0x18	; 24
    33d2:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <atoi>
    33d6:	80 93 9b 47 	sts	0x479B, r24	; 0x80479b <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    33da:	90 93 9c 47 	sts	0x479C, r25	; 0x80479c <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    33de:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    33e2:	8f 5f       	subi	r24, 0xFF	; 255
    33e4:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    33e8:	09 c0       	rjmp	.+18     	; 0x33fc <_Z17handleLinkBusMsgsv+0x242>
    33ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    33ee:	03 96       	adiw	r24, 0x03	; 3
    33f0:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <atoi>
    33f4:	80 93 9b 47 	sts	0x479B, r24	; 0x80479b <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    33f8:	90 93 9c 47 	sts	0x479C, r25	; 0x80479c <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    33fc:	60 e0       	ldi	r22, 0x00	; 0
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	8b e9       	ldi	r24, 0x9B	; 155
    3402:	97 e4       	ldi	r25, 0x47	; 71
    3404:	0e 94 80 45 	call	0x8b00	; 0x8b00 <_Z15txSetParametersPjPb>
    3408:	8a 8b       	std	Y+18, r24	; 0x12
    340a:	8a 89       	ldd	r24, Y+18	; 0x12
    340c:	88 23       	and	r24, r24
    340e:	19 f0       	breq	.+6      	; 0x3416 <_Z17handleLinkBusMsgsv+0x25c>
    3410:	8a 89       	ldd	r24, Y+18	; 0x12
    3412:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    3416:	80 91 9b 47 	lds	r24, 0x479B	; 0x80479b <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    341a:	90 91 9c 47 	lds	r25, 0x479C	; 0x80479c <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    341e:	29 2f       	mov	r18, r25
    3420:	2f 93       	push	r18
    3422:	8f 93       	push	r24
    3424:	87 ee       	ldi	r24, 0xE7	; 231
    3426:	92 e4       	ldi	r25, 0x42	; 66
    3428:	89 2f       	mov	r24, r25
    342a:	8f 93       	push	r24
    342c:	87 ee       	ldi	r24, 0xE7	; 231
    342e:	92 e4       	ldi	r25, 0x42	; 66
    3430:	8f 93       	push	r24
    3432:	81 ef       	ldi	r24, 0xF1	; 241
    3434:	96 e4       	ldi	r25, 0x46	; 70
    3436:	89 2f       	mov	r24, r25
    3438:	8f 93       	push	r24
    343a:	81 ef       	ldi	r24, 0xF1	; 241
    343c:	96 e4       	ldi	r25, 0x46	; 70
    343e:	8f 93       	push	r24
    3440:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	41 ef       	ldi	r20, 0xF1	; 241
    3452:	56 e4       	ldi	r21, 0x46	; 70
    3454:	6c ee       	ldi	r22, 0xEC	; 236
    3456:	72 e4       	ldi	r23, 0x42	; 66
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	0e 94 81 38 	call	0x7102	; 0x7102 <_Z11lb_send_msg13LBMessageTypePKcPc>
    345e:	31 c5       	rjmp	.+2658   	; 0x3ec2 <_Z17handleLinkBusMsgsv+0xd08>
    3460:	8c e7       	ldi	r24, 0x7C	; 124
    3462:	97 e4       	ldi	r25, 0x47	; 71
    3464:	0e 94 a6 31 	call	0x634c	; 0x634c <_ZN13EepromManager13saveAllEEPROMEv>
    3468:	3f c5       	rjmp	.+2686   	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    346a:	8c 85       	ldd	r24, Y+12	; 0x0c
    346c:	9d 85       	ldd	r25, Y+13	; 0x0d
    346e:	fc 01       	movw	r30, r24
    3470:	83 81       	ldd	r24, Z+3	; 0x03
    3472:	8b 8b       	std	Y+19, r24	; 0x13
    3474:	8b 89       	ldd	r24, Y+19	; 0x13
    3476:	81 33       	cpi	r24, 0x31	; 49
    3478:	21 f0       	breq	.+8      	; 0x3482 <_Z17handleLinkBusMsgsv+0x2c8>
    347a:	8b 89       	ldd	r24, Y+19	; 0x13
    347c:	82 33       	cpi	r24, 0x32	; 50
    347e:	09 f0       	breq	.+2      	; 0x3482 <_Z17handleLinkBusMsgsv+0x2c8>
    3480:	ae c0       	rjmp	.+348    	; 0x35de <_Z17handleLinkBusMsgsv+0x424>
    3482:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <_Z18txIsAntennaForBandv>
    3486:	98 2f       	mov	r25, r24
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	89 27       	eor	r24, r25
    348c:	88 23       	and	r24, r24
    348e:	41 f0       	breq	.+16     	; 0x34a0 <_Z17handleLinkBusMsgsv+0x2e6>
    3490:	90 91 36 40 	lds	r25, 0x4036	; 0x804036 <g_tx_power_is_zero>
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	89 27       	eor	r24, r25
    3498:	88 23       	and	r24, r24
    349a:	11 f0       	breq	.+4      	; 0x34a0 <_Z17handleLinkBusMsgsv+0x2e6>
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	01 c0       	rjmp	.+2      	; 0x34a2 <_Z17handleLinkBusMsgsv+0x2e8>
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	88 23       	and	r24, r24
    34a4:	21 f0       	breq	.+8      	; 0x34ae <_Z17handleLinkBusMsgsv+0x2f4>
    34a6:	87 ef       	ldi	r24, 0xF7	; 247
    34a8:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    34ac:	a2 c0       	rjmp	.+324    	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    34ae:	8b 89       	ldd	r24, Y+19	; 0x13
    34b0:	81 33       	cpi	r24, 0x31	; 49
    34b2:	09 f0       	breq	.+2      	; 0x34b6 <_Z17handleLinkBusMsgsv+0x2fc>
    34b4:	64 c0       	rjmp	.+200    	; 0x357e <_Z17handleLinkBusMsgsv+0x3c4>
    34b6:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <_Z18txIsAntennaForBandv>
    34ba:	88 23       	and	r24, r24
    34bc:	21 f4       	brne	.+8      	; 0x34c6 <_Z17handleLinkBusMsgsv+0x30c>
    34be:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    34c2:	88 23       	and	r24, r24
    34c4:	11 f0       	breq	.+4      	; 0x34ca <_Z17handleLinkBusMsgsv+0x310>
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <_Z17handleLinkBusMsgsv+0x312>
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	88 23       	and	r24, r24
    34ce:	09 f4       	brne	.+2      	; 0x34d2 <_Z17handleLinkBusMsgsv+0x318>
    34d0:	52 c0       	rjmp	.+164    	; 0x3576 <_Z17handleLinkBusMsgsv+0x3bc>
    34d2:	f8 94       	cli
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	8c a7       	std	Y+44, r24	; 0x2c
    34d8:	ce 01       	movw	r24, r28
    34da:	8c 96       	adiw	r24, 0x2c	; 44
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	bc 01       	movw	r22, r24
    34e2:	82 e3       	ldi	r24, 0x32	; 50
    34e4:	97 e4       	ldi	r25, 0x47	; 71
    34e6:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
    34ea:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    34ee:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    34f2:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    34f6:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    34fa:	78 94       	sei
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	a0 e0       	ldi	r26, 0x00	; 0
    3502:	b0 e0       	ldi	r27, 0x00	; 0
    3504:	80 93 60 47 	sts	0x4760, r24	; 0x804760 <g_event_start_time>
    3508:	90 93 61 47 	sts	0x4761, r25	; 0x804761 <g_event_start_time+0x1>
    350c:	a0 93 62 47 	sts	0x4762, r26	; 0x804762 <g_event_start_time+0x2>
    3510:	b0 93 63 47 	sts	0x4763, r27	; 0x804763 <g_event_start_time+0x3>
    3514:	8f ef       	ldi	r24, 0xFF	; 255
    3516:	9f ef       	ldi	r25, 0xFF	; 255
    3518:	dc 01       	movw	r26, r24
    351a:	80 93 64 47 	sts	0x4764, r24	; 0x804764 <g_event_finish_time>
    351e:	90 93 65 47 	sts	0x4765, r25	; 0x804765 <g_event_finish_time+0x1>
    3522:	a0 93 66 47 	sts	0x4766, r26	; 0x804766 <g_event_finish_time+0x2>
    3526:	b0 93 67 47 	sts	0x4767, r27	; 0x804767 <g_event_finish_time+0x3>
    352a:	8f e0       	ldi	r24, 0x0F	; 15
    352c:	97 e2       	ldi	r25, 0x27	; 39
    352e:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3532:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3536:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    353a:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    353e:	8f e0       	ldi	r24, 0x0F	; 15
    3540:	97 e2       	ldi	r25, 0x27	; 39
    3542:	a0 e0       	ldi	r26, 0x00	; 0
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    354a:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    354e:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    3552:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    3556:	8f ef       	ldi	r24, 0xFF	; 255
    3558:	9f ef       	ldi	r25, 0xFF	; 255
    355a:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    355e:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	80 93 69 47 	sts	0x4769, r24	; 0x804769 <g_event_commenced>
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	80 93 68 47 	sts	0x4768, r24	; 0x804768 <g_event_enabled>
    356e:	8d ef       	ldi	r24, 0xFD	; 253
    3570:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    3574:	3e c0       	rjmp	.+124    	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    3576:	87 ef       	ldi	r24, 0xF7	; 247
    3578:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    357c:	3a c0       	rjmp	.+116    	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    357e:	8b 89       	ldd	r24, Y+19	; 0x13
    3580:	82 33       	cpi	r24, 0x32	; 50
    3582:	b9 f5       	brne	.+110    	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    3584:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3588:	8e 30       	cpi	r24, 0x0E	; 14
    358a:	20 f4       	brcc	.+8      	; 0x3594 <_Z17handleLinkBusMsgsv+0x3da>
    358c:	8d ec       	ldi	r24, 0xCD	; 205
    358e:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    3592:	2f c0       	rjmp	.+94     	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    3594:	1d a6       	std	Y+45, r1	; 0x2d
    3596:	ce 01       	movw	r24, r28
    3598:	8d 96       	adiw	r24, 0x2d	; 45
    359a:	0e 94 55 20 	call	0x40aa	; 0x40aa <_Z11launchEventP2SC>
    359e:	80 93 9e 47 	sts	0x479E, r24	; 0x80479e <_ZZ17handleLinkBusMsgsvE2ec>
    35a2:	80 91 6c 47 	lds	r24, 0x476C	; 0x80476c <_ZL13g_go_to_sleep>
    35a6:	88 23       	and	r24, r24
    35a8:	31 f0       	breq	.+12     	; 0x35b6 <_Z17handleLinkBusMsgsv+0x3fc>
    35aa:	80 91 31 47 	lds	r24, 0x4731	; 0x804731 <_ZL11g_sleepType>
    35ae:	88 23       	and	r24, r24
    35b0:	11 f0       	breq	.+4      	; 0x35b6 <_Z17handleLinkBusMsgsv+0x3fc>
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	01 c0       	rjmp	.+2      	; 0x35b8 <_Z17handleLinkBusMsgsv+0x3fe>
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	88 23       	and	r24, r24
    35ba:	29 f0       	breq	.+10     	; 0x35c6 <_Z17handleLinkBusMsgsv+0x40c>
    35bc:	83 e0       	ldi	r24, 0x03	; 3
    35be:	80 93 31 47 	sts	0x4731, r24	; 0x804731 <_ZL11g_sleepType>
    35c2:	10 92 6c 47 	sts	0x476C, r1	; 0x80476c <_ZL13g_go_to_sleep>
    35c6:	8c e3       	ldi	r24, 0x3C	; 60
    35c8:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    35cc:	80 91 9e 47 	lds	r24, 0x479E	; 0x80479e <_ZZ17handleLinkBusMsgsvE2ec>
    35d0:	88 23       	and	r24, r24
    35d2:	79 f4       	brne	.+30     	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    35d4:	8c e7       	ldi	r24, 0x7C	; 124
    35d6:	97 e4       	ldi	r25, 0x47	; 71
    35d8:	0e 94 a6 31 	call	0x634c	; 0x634c <_ZN13EepromManager13saveAllEEPROMEv>
    35dc:	0a c0       	rjmp	.+20     	; 0x35f2 <_Z17handleLinkBusMsgsv+0x438>
    35de:	8b 89       	ldd	r24, Y+19	; 0x13
    35e0:	80 33       	cpi	r24, 0x30	; 48
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <_Z17handleLinkBusMsgsv+0x42c>
    35e4:	70 c4       	rjmp	.+2272   	; 0x3ec6 <_Z17handleLinkBusMsgsv+0xd0c>
    35e6:	10 92 9d 47 	sts	0x479D, r1	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35ea:	8c ee       	ldi	r24, 0xEC	; 236
    35ec:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    35f0:	6a c4       	rjmp	.+2260   	; 0x3ec6 <_Z17handleLinkBusMsgsv+0xd0c>
    35f2:	00 00       	nop
    35f4:	68 c4       	rjmp	.+2256   	; 0x3ec6 <_Z17handleLinkBusMsgsv+0xd0c>
    35f6:	1a 82       	std	Y+2, r1	; 0x02
    35f8:	1b 82       	std	Y+3, r1	; 0x03
    35fa:	1c 82       	std	Y+4, r1	; 0x04
    35fc:	1d 82       	std	Y+5, r1	; 0x05
    35fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    3600:	9d 85       	ldd	r25, Y+13	; 0x0d
    3602:	fc 01       	movw	r30, r24
    3604:	83 81       	ldd	r24, Z+3	; 0x03
    3606:	83 35       	cpi	r24, 0x53	; 83
    3608:	c1 f5       	brne	.+112    	; 0x367a <_Z17handleLinkBusMsgsv+0x4c0>
    360a:	8c 85       	ldd	r24, Y+12	; 0x0c
    360c:	9d 85       	ldd	r25, Y+13	; 0x0d
    360e:	fc 01       	movw	r30, r24
    3610:	80 8d       	ldd	r24, Z+24	; 0x18
    3612:	88 23       	and	r24, r24
    3614:	59 f0       	breq	.+22     	; 0x362c <_Z17handleLinkBusMsgsv+0x472>
    3616:	8c 85       	ldd	r24, Y+12	; 0x0c
    3618:	9d 85       	ldd	r25, Y+13	; 0x0d
    361a:	48 96       	adiw	r24, 0x18	; 24
    361c:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	8a 83       	std	Y+2, r24	; 0x02
    3626:	9b 83       	std	Y+3, r25	; 0x03
    3628:	ac 83       	std	Y+4, r26	; 0x04
    362a:	bd 83       	std	Y+5, r27	; 0x05
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	9b 81       	ldd	r25, Y+3	; 0x03
    3630:	ac 81       	ldd	r26, Y+4	; 0x04
    3632:	bd 81       	ldd	r27, Y+5	; 0x05
    3634:	89 2b       	or	r24, r25
    3636:	8a 2b       	or	r24, r26
    3638:	8b 2b       	or	r24, r27
    363a:	09 f4       	brne	.+2      	; 0x363e <_Z17handleLinkBusMsgsv+0x484>
    363c:	46 c4       	rjmp	.+2188   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	9b 81       	ldd	r25, Y+3	; 0x03
    3642:	ac 81       	ldd	r26, Y+4	; 0x04
    3644:	bd 81       	ldd	r27, Y+5	; 0x05
    3646:	80 93 60 47 	sts	0x4760, r24	; 0x804760 <g_event_start_time>
    364a:	90 93 61 47 	sts	0x4761, r25	; 0x804761 <g_event_start_time+0x1>
    364e:	a0 93 62 47 	sts	0x4762, r26	; 0x804762 <g_event_start_time+0x2>
    3652:	b0 93 63 47 	sts	0x4763, r27	; 0x804763 <g_event_start_time+0x3>
    3656:	f8 94       	cli
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    366c:	78 94       	sei
    366e:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3672:	8f 5f       	subi	r24, 0xFF	; 255
    3674:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3678:	28 c4       	rjmp	.+2128   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    367a:	8c 85       	ldd	r24, Y+12	; 0x0c
    367c:	9d 85       	ldd	r25, Y+13	; 0x0d
    367e:	fc 01       	movw	r30, r24
    3680:	83 81       	ldd	r24, Z+3	; 0x03
    3682:	86 34       	cpi	r24, 0x46	; 70
    3684:	09 f0       	breq	.+2      	; 0x3688 <_Z17handleLinkBusMsgsv+0x4ce>
    3686:	21 c4       	rjmp	.+2114   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    3688:	8c 85       	ldd	r24, Y+12	; 0x0c
    368a:	9d 85       	ldd	r25, Y+13	; 0x0d
    368c:	fc 01       	movw	r30, r24
    368e:	80 8d       	ldd	r24, Z+24	; 0x18
    3690:	88 23       	and	r24, r24
    3692:	59 f0       	breq	.+22     	; 0x36aa <_Z17handleLinkBusMsgsv+0x4f0>
    3694:	8c 85       	ldd	r24, Y+12	; 0x0c
    3696:	9d 85       	ldd	r25, Y+13	; 0x0d
    3698:	48 96       	adiw	r24, 0x18	; 24
    369a:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	8a 83       	std	Y+2, r24	; 0x02
    36a4:	9b 83       	std	Y+3, r25	; 0x03
    36a6:	ac 83       	std	Y+4, r26	; 0x04
    36a8:	bd 83       	std	Y+5, r27	; 0x05
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	9b 81       	ldd	r25, Y+3	; 0x03
    36ae:	ac 81       	ldd	r26, Y+4	; 0x04
    36b0:	bd 81       	ldd	r27, Y+5	; 0x05
    36b2:	89 2b       	or	r24, r25
    36b4:	8a 2b       	or	r24, r26
    36b6:	8b 2b       	or	r24, r27
    36b8:	09 f4       	brne	.+2      	; 0x36bc <_Z17handleLinkBusMsgsv+0x502>
    36ba:	07 c4       	rjmp	.+2062   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	9b 81       	ldd	r25, Y+3	; 0x03
    36c0:	ac 81       	ldd	r26, Y+4	; 0x04
    36c2:	bd 81       	ldd	r27, Y+5	; 0x05
    36c4:	80 93 64 47 	sts	0x4764, r24	; 0x804764 <g_event_finish_time>
    36c8:	90 93 65 47 	sts	0x4765, r25	; 0x804765 <g_event_finish_time+0x1>
    36cc:	a0 93 66 47 	sts	0x4766, r26	; 0x804766 <g_event_finish_time+0x2>
    36d0:	b0 93 67 47 	sts	0x4767, r27	; 0x804767 <g_event_finish_time+0x3>
    36d4:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    36d8:	8f 5f       	subi	r24, 0xFF	; 255
    36da:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    36de:	f5 c3       	rjmp	.+2026   	; 0x3eca <_Z17handleLinkBusMsgsv+0xd10>
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    36e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    36e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    36ea:	fc 01       	movw	r30, r24
    36ec:	80 81       	ld	r24, Z
    36ee:	81 30       	cpi	r24, 0x01	; 1
    36f0:	09 f0       	breq	.+2      	; 0x36f4 <_Z17handleLinkBusMsgsv+0x53a>
    36f2:	4b c0       	rjmp	.+150    	; 0x378a <_Z17handleLinkBusMsgsv+0x5d0>
    36f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    36f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    36f8:	fc 01       	movw	r30, r24
    36fa:	83 81       	ldd	r24, Z+3	; 0x03
    36fc:	88 23       	and	r24, r24
    36fe:	d1 f0       	breq	.+52     	; 0x3734 <_Z17handleLinkBusMsgsv+0x57a>
    3700:	8c 85       	ldd	r24, Y+12	; 0x0c
    3702:	9d 85       	ldd	r25, Y+13	; 0x0d
    3704:	03 96       	adiw	r24, 0x03	; 3
    3706:	44 e1       	ldi	r20, 0x14	; 20
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	bc 01       	movw	r22, r24
    370c:	81 ef       	ldi	r24, 0xF1	; 241
    370e:	96 e4       	ldi	r25, 0x46	; 70
    3710:	0e 94 cd 4e 	call	0x9d9a	; 0x9d9a <strncpy>
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	81 ef       	ldi	r24, 0xF1	; 241
    3718:	96 e4       	ldi	r25, 0x46	; 70
    371a:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <ds3231_set_date_time>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    3732:	cd c3       	rjmp	.+1946   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	2b 2f       	mov	r18, r27
    3742:	2f 93       	push	r18
    3744:	2a 2f       	mov	r18, r26
    3746:	2f 93       	push	r18
    3748:	29 2f       	mov	r18, r25
    374a:	2f 93       	push	r18
    374c:	8f 93       	push	r24
    374e:	8f ed       	ldi	r24, 0xDF	; 223
    3750:	92 e4       	ldi	r25, 0x42	; 66
    3752:	89 2f       	mov	r24, r25
    3754:	8f 93       	push	r24
    3756:	8f ed       	ldi	r24, 0xDF	; 223
    3758:	92 e4       	ldi	r25, 0x42	; 66
    375a:	8f 93       	push	r24
    375c:	81 ef       	ldi	r24, 0xF1	; 241
    375e:	96 e4       	ldi	r25, 0x46	; 70
    3760:	89 2f       	mov	r24, r25
    3762:	8f 93       	push	r24
    3764:	81 ef       	ldi	r24, 0xF1	; 241
    3766:	96 e4       	ldi	r25, 0x46	; 70
    3768:	8f 93       	push	r24
    376a:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    376e:	2d b7       	in	r18, 0x3d	; 61
    3770:	3e b7       	in	r19, 0x3e	; 62
    3772:	28 5f       	subi	r18, 0xF8	; 248
    3774:	3f 4f       	sbci	r19, 0xFF	; 255
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	41 ef       	ldi	r20, 0xF1	; 241
    377c:	56 e4       	ldi	r21, 0x46	; 70
    377e:	63 ee       	ldi	r22, 0xE3	; 227
    3780:	72 e4       	ldi	r23, 0x42	; 66
    3782:	83 e0       	ldi	r24, 0x03	; 3
    3784:	0e 94 81 38 	call	0x7102	; 0x7102 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3788:	a2 c3       	rjmp	.+1860   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    378a:	8c 85       	ldd	r24, Y+12	; 0x0c
    378c:	9d 85       	ldd	r25, Y+13	; 0x0d
    378e:	fc 01       	movw	r30, r24
    3790:	80 81       	ld	r24, Z
    3792:	82 30       	cpi	r24, 0x02	; 2
    3794:	09 f0       	breq	.+2      	; 0x3798 <_Z17handleLinkBusMsgsv+0x5de>
    3796:	9b c3       	rjmp	.+1846   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    3798:	8c 85       	ldd	r24, Y+12	; 0x0c
    379a:	9d 85       	ldd	r25, Y+13	; 0x0d
    379c:	fc 01       	movw	r30, r24
    379e:	83 81       	ldd	r24, Z+3	; 0x03
    37a0:	88 35       	cpi	r24, 0x58	; 88
    37a2:	c9 f5       	brne	.+114    	; 0x3816 <_Z17handleLinkBusMsgsv+0x65c>
    37a4:	1c 8a       	std	Y+20, r1	; 0x14
    37a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    37a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    37aa:	fc 01       	movw	r30, r24
    37ac:	80 8d       	ldd	r24, Z+24	; 0x18
    37ae:	88 23       	and	r24, r24
    37b0:	51 f0       	breq	.+20     	; 0x37c6 <_Z17handleLinkBusMsgsv+0x60c>
    37b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    37b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    37b6:	48 96       	adiw	r24, 0x18	; 24
    37b8:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <atoi>
    37bc:	8c 8b       	std	Y+20, r24	; 0x14
    37be:	8c 89       	ldd	r24, Y+20	; 0x14
    37c0:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <ds3231_set_aging>
    37c4:	84 c3       	rjmp	.+1800   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    37c6:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <ds3231_get_aging>
    37ca:	8c 8b       	std	Y+20, r24	; 0x14
    37cc:	8c 89       	ldd	r24, Y+20	; 0x14
    37ce:	08 2e       	mov	r0, r24
    37d0:	00 0c       	add	r0, r0
    37d2:	99 0b       	sbc	r25, r25
    37d4:	29 2f       	mov	r18, r25
    37d6:	2f 93       	push	r18
    37d8:	8f 93       	push	r24
    37da:	80 ef       	ldi	r24, 0xF0	; 240
    37dc:	92 e4       	ldi	r25, 0x42	; 66
    37de:	89 2f       	mov	r24, r25
    37e0:	8f 93       	push	r24
    37e2:	80 ef       	ldi	r24, 0xF0	; 240
    37e4:	92 e4       	ldi	r25, 0x42	; 66
    37e6:	8f 93       	push	r24
    37e8:	81 ef       	ldi	r24, 0xF1	; 241
    37ea:	96 e4       	ldi	r25, 0x46	; 70
    37ec:	89 2f       	mov	r24, r25
    37ee:	8f 93       	push	r24
    37f0:	81 ef       	ldi	r24, 0xF1	; 241
    37f2:	96 e4       	ldi	r25, 0x46	; 70
    37f4:	8f 93       	push	r24
    37f6:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	41 ef       	ldi	r20, 0xF1	; 241
    3808:	56 e4       	ldi	r21, 0x46	; 70
    380a:	63 ee       	ldi	r22, 0xE3	; 227
    380c:	72 e4       	ldi	r23, 0x42	; 66
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	0e 94 81 38 	call	0x7102	; 0x7102 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3814:	5c c3       	rjmp	.+1720   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	8d 8b       	std	Y+21, r24	; 0x15
    3824:	9e 8b       	std	Y+22, r25	; 0x16
    3826:	af 8b       	std	Y+23, r26	; 0x17
    3828:	b8 8f       	std	Y+24, r27	; 0x18
    382a:	8d 89       	ldd	r24, Y+21	; 0x15
    382c:	9e 89       	ldd	r25, Y+22	; 0x16
    382e:	af 89       	ldd	r26, Y+23	; 0x17
    3830:	b8 8d       	ldd	r27, Y+24	; 0x18
    3832:	bc 01       	movw	r22, r24
    3834:	cd 01       	movw	r24, r26
    3836:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    383a:	80 91 9f 47 	lds	r24, 0x479F	; 0x80479f <_ZZ17handleLinkBusMsgsvE8lastTime>
    383e:	90 91 a0 47 	lds	r25, 0x47A0	; 0x8047a0 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    3842:	a0 91 a1 47 	lds	r26, 0x47A1	; 0x8047a1 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    3846:	b0 91 a2 47 	lds	r27, 0x47A2	; 0x8047a2 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    384a:	2d 89       	ldd	r18, Y+21	; 0x15
    384c:	3e 89       	ldd	r19, Y+22	; 0x16
    384e:	4f 89       	ldd	r20, Y+23	; 0x17
    3850:	58 8d       	ldd	r21, Y+24	; 0x18
    3852:	28 17       	cp	r18, r24
    3854:	39 07       	cpc	r19, r25
    3856:	4a 07       	cpc	r20, r26
    3858:	5b 07       	cpc	r21, r27
    385a:	09 f4       	brne	.+2      	; 0x385e <_Z17handleLinkBusMsgsv+0x6a4>
    385c:	38 c3       	rjmp	.+1648   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    385e:	88 8d       	ldd	r24, Y+24	; 0x18
    3860:	8f 93       	push	r24
    3862:	8f 89       	ldd	r24, Y+23	; 0x17
    3864:	8f 93       	push	r24
    3866:	8e 89       	ldd	r24, Y+22	; 0x16
    3868:	8f 93       	push	r24
    386a:	8d 89       	ldd	r24, Y+21	; 0x15
    386c:	8f 93       	push	r24
    386e:	8f ed       	ldi	r24, 0xDF	; 223
    3870:	92 e4       	ldi	r25, 0x42	; 66
    3872:	89 2f       	mov	r24, r25
    3874:	8f 93       	push	r24
    3876:	8f ed       	ldi	r24, 0xDF	; 223
    3878:	92 e4       	ldi	r25, 0x42	; 66
    387a:	8f 93       	push	r24
    387c:	81 ef       	ldi	r24, 0xF1	; 241
    387e:	96 e4       	ldi	r25, 0x46	; 70
    3880:	89 2f       	mov	r24, r25
    3882:	8f 93       	push	r24
    3884:	81 ef       	ldi	r24, 0xF1	; 241
    3886:	96 e4       	ldi	r25, 0x46	; 70
    3888:	8f 93       	push	r24
    388a:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    388e:	2d b7       	in	r18, 0x3d	; 61
    3890:	3e b7       	in	r19, 0x3e	; 62
    3892:	28 5f       	subi	r18, 0xF8	; 248
    3894:	3f 4f       	sbci	r19, 0xFF	; 255
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	41 ef       	ldi	r20, 0xF1	; 241
    389c:	56 e4       	ldi	r21, 0x46	; 70
    389e:	63 ee       	ldi	r22, 0xE3	; 227
    38a0:	72 e4       	ldi	r23, 0x42	; 66
    38a2:	83 e0       	ldi	r24, 0x03	; 3
    38a4:	0e 94 81 38 	call	0x7102	; 0x7102 <_Z11lb_send_msg13LBMessageTypePKcPc>
    38a8:	8d 89       	ldd	r24, Y+21	; 0x15
    38aa:	9e 89       	ldd	r25, Y+22	; 0x16
    38ac:	af 89       	ldd	r26, Y+23	; 0x17
    38ae:	b8 8d       	ldd	r27, Y+24	; 0x18
    38b0:	80 93 9f 47 	sts	0x479F, r24	; 0x80479f <_ZZ17handleLinkBusMsgsvE8lastTime>
    38b4:	90 93 a0 47 	sts	0x47A0, r25	; 0x8047a0 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    38b8:	a0 93 a1 47 	sts	0x47A1, r26	; 0x8047a1 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    38bc:	b0 93 a2 47 	sts	0x47A2, r27	; 0x8047a2 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    38c0:	06 c3       	rjmp	.+1548   	; 0x3ece <_Z17handleLinkBusMsgsv+0xd14>
    38c2:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    38c6:	8f 5f       	subi	r24, 0xFF	; 255
    38c8:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    38cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    38d0:	fc 01       	movw	r30, r24
    38d2:	83 81       	ldd	r24, Z+3	; 0x03
    38d4:	88 23       	and	r24, r24
    38d6:	81 f1       	breq	.+96     	; 0x3938 <_Z17handleLinkBusMsgsv+0x77e>
    38d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    38da:	9d 85       	ldd	r25, Y+13	; 0x0d
    38dc:	03 96       	adiw	r24, 0x03	; 3
    38de:	44 e1       	ldi	r20, 0x14	; 20
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	bc 01       	movw	r22, r24
    38e4:	87 e4       	ldi	r24, 0x47	; 71
    38e6:	97 e4       	ldi	r25, 0x47	; 71
    38e8:	0e 94 cd 4e 	call	0x9d9a	; 0x9d9a <strncpy>
    38ec:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    38f0:	88 23       	and	r24, r24
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <_Z17handleLinkBusMsgsv+0x73c>
    38f4:	ee c2       	rjmp	.+1500   	; 0x3ed2 <_Z17handleLinkBusMsgsv+0xd18>
    38f6:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	bc 01       	movw	r22, r24
    3900:	87 e4       	ldi	r24, 0x47	; 71
    3902:	97 e4       	ldi	r25, 0x47	; 71
    3904:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <_Z26timeRequiredToSendStrAtWPMPcj>
    3908:	8c 50       	subi	r24, 0x0C	; 12
    390a:	9e 4f       	sbci	r25, 0xFE	; 254
    390c:	96 95       	lsr	r25
    390e:	87 95       	ror	r24
    3910:	96 95       	lsr	r25
    3912:	87 95       	ror	r24
    3914:	96 95       	lsr	r25
    3916:	87 95       	ror	r24
    3918:	9c 01       	movw	r18, r24
    391a:	a5 ec       	ldi	r26, 0xC5	; 197
    391c:	b0 e2       	ldi	r27, 0x20	; 32
    391e:	0e 94 0c 4d 	call	0x9a18	; 0x9a18 <__umulhisi3>
    3922:	92 95       	swap	r25
    3924:	82 95       	swap	r24
    3926:	8f 70       	andi	r24, 0x0F	; 15
    3928:	89 27       	eor	r24, r25
    392a:	9f 70       	andi	r25, 0x0F	; 15
    392c:	89 27       	eor	r24, r25
    392e:	80 93 5c 47 	sts	0x475C, r24	; 0x80475c <g_time_needed_for_ID>
    3932:	90 93 5d 47 	sts	0x475D, r25	; 0x80475d <g_time_needed_for_ID+0x1>
    3936:	cd c2       	rjmp	.+1434   	; 0x3ed2 <_Z17handleLinkBusMsgsv+0xd18>
    3938:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <_Z17handleLinkBusMsgsv+0x788>
    3940:	c8 c2       	rjmp	.+1424   	; 0x3ed2 <_Z17handleLinkBusMsgsv+0xd18>
    3942:	87 e4       	ldi	r24, 0x47	; 71
    3944:	97 e4       	ldi	r25, 0x47	; 71
    3946:	89 2f       	mov	r24, r25
    3948:	8f 93       	push	r24
    394a:	87 e4       	ldi	r24, 0x47	; 71
    394c:	97 e4       	ldi	r25, 0x47	; 71
    394e:	8f 93       	push	r24
    3950:	85 ef       	ldi	r24, 0xF5	; 245
    3952:	92 e4       	ldi	r25, 0x42	; 66
    3954:	89 2f       	mov	r24, r25
    3956:	8f 93       	push	r24
    3958:	85 ef       	ldi	r24, 0xF5	; 245
    395a:	92 e4       	ldi	r25, 0x42	; 66
    395c:	8f 93       	push	r24
    395e:	81 ef       	ldi	r24, 0xF1	; 241
    3960:	96 e4       	ldi	r25, 0x46	; 70
    3962:	89 2f       	mov	r24, r25
    3964:	8f 93       	push	r24
    3966:	81 ef       	ldi	r24, 0xF1	; 241
    3968:	96 e4       	ldi	r25, 0x46	; 70
    396a:	8f 93       	push	r24
    396c:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	81 ef       	ldi	r24, 0xF1	; 241
    397e:	96 e4       	ldi	r25, 0x46	; 70
    3980:	0e 94 40 38 	call	0x7080	; 0x7080 <_Z12lb_send_textPc>
    3984:	19 82       	std	Y+1, r1	; 0x01
    3986:	a5 c2       	rjmp	.+1354   	; 0x3ed2 <_Z17handleLinkBusMsgsv+0xd18>
    3988:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    398c:	89 8f       	std	Y+25, r24	; 0x19
    398e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3990:	9d 85       	ldd	r25, Y+13	; 0x0d
    3992:	fc 01       	movw	r30, r24
    3994:	83 81       	ldd	r24, Z+3	; 0x03
    3996:	89 34       	cpi	r24, 0x49	; 73
    3998:	09 f0       	breq	.+2      	; 0x399c <_Z17handleLinkBusMsgsv+0x7e2>
    399a:	4f c0       	rjmp	.+158    	; 0x3a3a <_Z17handleLinkBusMsgsv+0x880>
    399c:	8c 85       	ldd	r24, Y+12	; 0x0c
    399e:	9d 85       	ldd	r25, Y+13	; 0x0d
    39a0:	fc 01       	movw	r30, r24
    39a2:	80 8d       	ldd	r24, Z+24	; 0x18
    39a4:	88 23       	and	r24, r24
    39a6:	09 f4       	brne	.+2      	; 0x39aa <_Z17handleLinkBusMsgsv+0x7f0>
    39a8:	96 c2       	rjmp	.+1324   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    39aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    39ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    39ae:	48 96       	adiw	r24, 0x18	; 24
    39b0:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	89 8f       	std	Y+25, r24	; 0x19
    39ba:	89 8d       	ldd	r24, Y+25	; 0x19
    39bc:	8a 8f       	std	Y+26, r24	; 0x1a
    39be:	85 e0       	ldi	r24, 0x05	; 5
    39c0:	8b 8f       	std	Y+27, r24	; 0x1b
    39c2:	84 e1       	ldi	r24, 0x14	; 20
    39c4:	8c 8f       	std	Y+28, r24	; 0x1c
    39c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39ca:	89 17       	cp	r24, r25
    39cc:	40 f0       	brcs	.+16     	; 0x39de <_Z17handleLinkBusMsgsv+0x824>
    39ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d2:	98 17       	cp	r25, r24
    39d4:	10 f4       	brcc	.+4      	; 0x39da <_Z17handleLinkBusMsgsv+0x820>
    39d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d8:	03 c0       	rjmp	.+6      	; 0x39e0 <_Z17handleLinkBusMsgsv+0x826>
    39da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    39dc:	01 c0       	rjmp	.+2      	; 0x39e0 <_Z17handleLinkBusMsgsv+0x826>
    39de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39e0:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    39e4:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39e8:	8f 5f       	subi	r24, 0xFF	; 255
    39ea:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39ee:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    39f2:	88 23       	and	r24, r24
    39f4:	09 f4       	brne	.+2      	; 0x39f8 <_Z17handleLinkBusMsgsv+0x83e>
    39f6:	6f c2       	rjmp	.+1246   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    39f8:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    39fc:	88 2f       	mov	r24, r24
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	bc 01       	movw	r22, r24
    3a02:	87 e4       	ldi	r24, 0x47	; 71
    3a04:	97 e4       	ldi	r25, 0x47	; 71
    3a06:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <_Z26timeRequiredToSendStrAtWPMPcj>
    3a0a:	8c 50       	subi	r24, 0x0C	; 12
    3a0c:	9e 4f       	sbci	r25, 0xFE	; 254
    3a0e:	96 95       	lsr	r25
    3a10:	87 95       	ror	r24
    3a12:	96 95       	lsr	r25
    3a14:	87 95       	ror	r24
    3a16:	96 95       	lsr	r25
    3a18:	87 95       	ror	r24
    3a1a:	9c 01       	movw	r18, r24
    3a1c:	a5 ec       	ldi	r26, 0xC5	; 197
    3a1e:	b0 e2       	ldi	r27, 0x20	; 32
    3a20:	0e 94 0c 4d 	call	0x9a18	; 0x9a18 <__umulhisi3>
    3a24:	92 95       	swap	r25
    3a26:	82 95       	swap	r24
    3a28:	8f 70       	andi	r24, 0x0F	; 15
    3a2a:	89 27       	eor	r24, r25
    3a2c:	9f 70       	andi	r25, 0x0F	; 15
    3a2e:	89 27       	eor	r24, r25
    3a30:	80 93 5c 47 	sts	0x475C, r24	; 0x80475c <g_time_needed_for_ID>
    3a34:	90 93 5d 47 	sts	0x475D, r25	; 0x80475d <g_time_needed_for_ID+0x1>
    3a38:	4e c2       	rjmp	.+1180   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    3a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a3e:	fc 01       	movw	r30, r24
    3a40:	83 81       	ldd	r24, Z+3	; 0x03
    3a42:	80 35       	cpi	r24, 0x50	; 80
    3a44:	09 f0       	breq	.+2      	; 0x3a48 <_Z17handleLinkBusMsgsv+0x88e>
    3a46:	47 c2       	rjmp	.+1166   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    3a48:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	80 8d       	ldd	r24, Z+24	; 0x18
    3a50:	88 23       	and	r24, r24
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <_Z17handleLinkBusMsgsv+0x89c>
    3a54:	40 c2       	rjmp	.+1152   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    3a56:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a58:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a5a:	48 96       	adiw	r24, 0x18	; 24
    3a5c:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	89 8f       	std	Y+25, r24	; 0x19
    3a66:	89 8d       	ldd	r24, Y+25	; 0x19
    3a68:	8d 8f       	std	Y+29, r24	; 0x1d
    3a6a:	85 e0       	ldi	r24, 0x05	; 5
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	8e 8f       	std	Y+30, r24	; 0x1e
    3a70:	9f 8f       	std	Y+31, r25	; 0x1f
    3a72:	84 e1       	ldi	r24, 0x14	; 20
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	88 a3       	std	Y+32, r24	; 0x20
    3a78:	99 a3       	std	Y+33, r25	; 0x21
    3a7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a7c:	28 2f       	mov	r18, r24
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	88 a1       	ldd	r24, Y+32	; 0x20
    3a82:	99 a1       	ldd	r25, Y+33	; 0x21
    3a84:	82 17       	cp	r24, r18
    3a86:	93 07       	cpc	r25, r19
    3a88:	54 f0       	brlt	.+20     	; 0x3a9e <_Z17handleLinkBusMsgsv+0x8e4>
    3a8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a8c:	88 2f       	mov	r24, r24
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3a92:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3a94:	82 17       	cp	r24, r18
    3a96:	93 07       	cpc	r25, r19
    3a98:	24 f4       	brge	.+8      	; 0x3aa2 <_Z17handleLinkBusMsgsv+0x8e8>
    3a9a:	c9 01       	movw	r24, r18
    3a9c:	02 c0       	rjmp	.+4      	; 0x3aa2 <_Z17handleLinkBusMsgsv+0x8e8>
    3a9e:	88 a1       	ldd	r24, Y+32	; 0x20
    3aa0:	99 a1       	ldd	r25, Y+33	; 0x21
    3aa2:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    3aa6:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3aaa:	8f 5f       	subi	r24, 0xFF	; 255
    3aac:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3ab0:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3ab4:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    3ab8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    3abc:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    3ac0:	0a c2       	rjmp	.+1044   	; 0x3ed6 <_Z17handleLinkBusMsgsv+0xd1c>
    3ac2:	1a a2       	std	Y+34, r1	; 0x22
    3ac4:	1b a2       	std	Y+35, r1	; 0x23
    3ac6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ac8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aca:	fc 01       	movw	r30, r24
    3acc:	83 81       	ldd	r24, Z+3	; 0x03
    3ace:	80 33       	cpi	r24, 0x30	; 48
    3ad0:	e1 f4       	brne	.+56     	; 0x3b0a <_Z17handleLinkBusMsgsv+0x950>
    3ad2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ad4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	80 8d       	ldd	r24, Z+24	; 0x18
    3ada:	88 23       	and	r24, r24
    3adc:	09 f4       	brne	.+2      	; 0x3ae0 <_Z17handleLinkBusMsgsv+0x926>
    3ade:	fd c1       	rjmp	.+1018   	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3ae0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ae2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ae4:	48 96       	adiw	r24, 0x18	; 24
    3ae6:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	8a a3       	std	Y+34, r24	; 0x22
    3af0:	9b a3       	std	Y+35, r25	; 0x23
    3af2:	8a a1       	ldd	r24, Y+34	; 0x22
    3af4:	9b a1       	ldd	r25, Y+35	; 0x23
    3af6:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    3afa:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    3afe:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b02:	8f 5f       	subi	r24, 0xFF	; 255
    3b04:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b08:	e8 c1       	rjmp	.+976    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b0e:	fc 01       	movw	r30, r24
    3b10:	83 81       	ldd	r24, Z+3	; 0x03
    3b12:	81 33       	cpi	r24, 0x31	; 49
    3b14:	e1 f4       	brne	.+56     	; 0x3b4e <_Z17handleLinkBusMsgsv+0x994>
    3b16:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b18:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	80 8d       	ldd	r24, Z+24	; 0x18
    3b1e:	88 23       	and	r24, r24
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <_Z17handleLinkBusMsgsv+0x96a>
    3b22:	db c1       	rjmp	.+950    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b24:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b26:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b28:	48 96       	adiw	r24, 0x18	; 24
    3b2a:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	8a a3       	std	Y+34, r24	; 0x22
    3b34:	9b a3       	std	Y+35, r25	; 0x23
    3b36:	8a a1       	ldd	r24, Y+34	; 0x22
    3b38:	9b a1       	ldd	r25, Y+35	; 0x23
    3b3a:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3b3e:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3b42:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b46:	8f 5f       	subi	r24, 0xFF	; 255
    3b48:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b4c:	c6 c1       	rjmp	.+908    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b50:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b52:	fc 01       	movw	r30, r24
    3b54:	83 81       	ldd	r24, Z+3	; 0x03
    3b56:	89 34       	cpi	r24, 0x49	; 73
    3b58:	e1 f4       	brne	.+56     	; 0x3b92 <_Z17handleLinkBusMsgsv+0x9d8>
    3b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b5e:	fc 01       	movw	r30, r24
    3b60:	80 8d       	ldd	r24, Z+24	; 0x18
    3b62:	88 23       	and	r24, r24
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <_Z17handleLinkBusMsgsv+0x9ae>
    3b66:	b9 c1       	rjmp	.+882    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b68:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b6c:	48 96       	adiw	r24, 0x18	; 24
    3b6e:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	8a a3       	std	Y+34, r24	; 0x22
    3b78:	9b a3       	std	Y+35, r25	; 0x23
    3b7a:	8a a1       	ldd	r24, Y+34	; 0x22
    3b7c:	9b a1       	ldd	r25, Y+35	; 0x23
    3b7e:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <g_ID_period_seconds>
    3b82:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <g_ID_period_seconds+0x1>
    3b86:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b8a:	8f 5f       	subi	r24, 0xFF	; 255
    3b8c:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b90:	a4 c1       	rjmp	.+840    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3b92:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b94:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b96:	fc 01       	movw	r30, r24
    3b98:	83 81       	ldd	r24, Z+3	; 0x03
    3b9a:	84 34       	cpi	r24, 0x44	; 68
    3b9c:	09 f0       	breq	.+2      	; 0x3ba0 <_Z17handleLinkBusMsgsv+0x9e6>
    3b9e:	9d c1       	rjmp	.+826    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ba2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	80 8d       	ldd	r24, Z+24	; 0x18
    3ba8:	88 23       	and	r24, r24
    3baa:	09 f4       	brne	.+2      	; 0x3bae <_Z17handleLinkBusMsgsv+0x9f4>
    3bac:	96 c1       	rjmp	.+812    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3bae:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bb2:	48 96       	adiw	r24, 0x18	; 24
    3bb4:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	8a a3       	std	Y+34, r24	; 0x22
    3bbe:	9b a3       	std	Y+35, r25	; 0x23
    3bc0:	8a a1       	ldd	r24, Y+34	; 0x22
    3bc2:	9b a1       	ldd	r25, Y+35	; 0x23
    3bc4:	80 93 5e 47 	sts	0x475E, r24	; 0x80475e <g_intra_cycle_delay_time>
    3bc8:	90 93 5f 47 	sts	0x475F, r25	; 0x80475f <g_intra_cycle_delay_time+0x1>
    3bcc:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3bd0:	8f 5f       	subi	r24, 0xFF	; 255
    3bd2:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3bd6:	81 c1       	rjmp	.+770    	; 0x3eda <_Z17handleLinkBusMsgsv+0xd20>
    3bd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bda:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bdc:	fc 01       	movw	r30, r24
    3bde:	83 81       	ldd	r24, Z+3	; 0x03
    3be0:	88 23       	and	r24, r24
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <_Z17handleLinkBusMsgsv+0xa2c>
    3be4:	7c c1       	rjmp	.+760    	; 0x3ede <_Z17handleLinkBusMsgsv+0xd24>
    3be6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3be8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bea:	03 96       	adiw	r24, 0x03	; 3
    3bec:	44 e1       	ldi	r20, 0x14	; 20
    3bee:	50 e0       	ldi	r21, 0x00	; 0
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	82 e3       	ldi	r24, 0x32	; 50
    3bf4:	97 e4       	ldi	r25, 0x47	; 71
    3bf6:	0e 94 cd 4e 	call	0x9d9a	; 0x9d9a <strncpy>
    3bfa:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3bfe:	8f 5f       	subi	r24, 0xFF	; 255
    3c00:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c04:	6c c1       	rjmp	.+728    	; 0x3ede <_Z17handleLinkBusMsgsv+0xd24>
    3c06:	1e 82       	std	Y+6, r1	; 0x06
    3c08:	1f 82       	std	Y+7, r1	; 0x07
    3c0a:	18 86       	std	Y+8, r1	; 0x08
    3c0c:	19 86       	std	Y+9, r1	; 0x09
    3c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c10:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c12:	fc 01       	movw	r30, r24
    3c14:	83 81       	ldd	r24, Z+3	; 0x03
    3c16:	88 23       	and	r24, r24
    3c18:	99 f1       	breq	.+102    	; 0x3c80 <_Z17handleLinkBusMsgsv+0xac6>
    3c1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c1e:	03 96       	adiw	r24, 0x03	; 3
    3c20:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	80 93 a3 47 	sts	0x47A3, r24	; 0x8047a3 <_ZZ17handleLinkBusMsgsvE1f>
    3c2c:	90 93 a4 47 	sts	0x47A4, r25	; 0x8047a4 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3c30:	a0 93 a5 47 	sts	0x47A5, r26	; 0x8047a5 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3c34:	b0 93 a6 47 	sts	0x47A6, r27	; 0x8047a6 <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3c38:	80 91 a3 47 	lds	r24, 0x47A3	; 0x8047a3 <_ZZ17handleLinkBusMsgsvE1f>
    3c3c:	90 91 a4 47 	lds	r25, 0x47A4	; 0x8047a4 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3c40:	a0 91 a5 47 	lds	r26, 0x47A5	; 0x8047a5 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3c44:	b0 91 a6 47 	lds	r27, 0x47A6	; 0x8047a6 <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3c48:	8e a7       	std	Y+46, r24	; 0x2e
    3c4a:	9f a7       	std	Y+47, r25	; 0x2f
    3c4c:	a8 ab       	std	Y+48, r26	; 0x30
    3c4e:	b9 ab       	std	Y+49, r27	; 0x31
    3c50:	ce 01       	movw	r24, r28
    3c52:	8e 96       	adiw	r24, 0x2e	; 46
    3c54:	61 e0       	ldi	r22, 0x01	; 1
    3c56:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <_Z14txSetFrequencyPmb>
    3c5a:	98 2f       	mov	r25, r24
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	89 27       	eor	r24, r25
    3c60:	88 23       	and	r24, r24
    3c62:	b1 f0       	breq	.+44     	; 0x3c90 <_Z17handleLinkBusMsgsv+0xad6>
    3c64:	8e a5       	ldd	r24, Y+46	; 0x2e
    3c66:	9f a5       	ldd	r25, Y+47	; 0x2f
    3c68:	a8 a9       	ldd	r26, Y+48	; 0x30
    3c6a:	b9 a9       	ldd	r27, Y+49	; 0x31
    3c6c:	8e 83       	std	Y+6, r24	; 0x06
    3c6e:	9f 83       	std	Y+7, r25	; 0x07
    3c70:	a8 87       	std	Y+8, r26	; 0x08
    3c72:	b9 87       	std	Y+9, r27	; 0x09
    3c74:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c78:	8f 5f       	subi	r24, 0xFF	; 255
    3c7a:	80 93 9d 47 	sts	0x479D, r24	; 0x80479d <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3c7e:	08 c0       	rjmp	.+16     	; 0x3c90 <_Z17handleLinkBusMsgsv+0xad6>
    3c80:	0e 94 51 45 	call	0x8aa2	; 0x8aa2 <_Z14txGetFrequencyv>
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22
    3c88:	8e 83       	std	Y+6, r24	; 0x06
    3c8a:	9f 83       	std	Y+7, r25	; 0x07
    3c8c:	a8 87       	std	Y+8, r26	; 0x08
    3c8e:	b9 87       	std	Y+9, r27	; 0x09
    3c90:	8e 81       	ldd	r24, Y+6	; 0x06
    3c92:	9f 81       	ldd	r25, Y+7	; 0x07
    3c94:	a8 85       	ldd	r26, Y+8	; 0x08
    3c96:	b9 85       	ldd	r27, Y+9	; 0x09
    3c98:	89 2b       	or	r24, r25
    3c9a:	8a 2b       	or	r24, r26
    3c9c:	8b 2b       	or	r24, r27
    3c9e:	09 f4       	brne	.+2      	; 0x3ca2 <_Z17handleLinkBusMsgsv+0xae8>
    3ca0:	20 c1       	rjmp	.+576    	; 0x3ee2 <_Z17handleLinkBusMsgsv+0xd28>
    3ca2:	89 85       	ldd	r24, Y+9	; 0x09
    3ca4:	8f 93       	push	r24
    3ca6:	88 85       	ldd	r24, Y+8	; 0x08
    3ca8:	8f 93       	push	r24
    3caa:	8f 81       	ldd	r24, Y+7	; 0x07
    3cac:	8f 93       	push	r24
    3cae:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb0:	8f 93       	push	r24
    3cb2:	8e ef       	ldi	r24, 0xFE	; 254
    3cb4:	92 e4       	ldi	r25, 0x42	; 66
    3cb6:	89 2f       	mov	r24, r25
    3cb8:	8f 93       	push	r24
    3cba:	8e ef       	ldi	r24, 0xFE	; 254
    3cbc:	92 e4       	ldi	r25, 0x42	; 66
    3cbe:	8f 93       	push	r24
    3cc0:	81 ef       	ldi	r24, 0xF1	; 241
    3cc2:	96 e4       	ldi	r25, 0x46	; 70
    3cc4:	89 2f       	mov	r24, r25
    3cc6:	8f 93       	push	r24
    3cc8:	81 ef       	ldi	r24, 0xF1	; 241
    3cca:	96 e4       	ldi	r25, 0x46	; 70
    3ccc:	8f 93       	push	r24
    3cce:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    3cd2:	2d b7       	in	r18, 0x3d	; 61
    3cd4:	3e b7       	in	r19, 0x3e	; 62
    3cd6:	28 5f       	subi	r18, 0xF8	; 248
    3cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	41 ef       	ldi	r20, 0xF1	; 241
    3ce0:	56 e4       	ldi	r21, 0x46	; 70
    3ce2:	63 e0       	ldi	r22, 0x03	; 3
    3ce4:	73 e4       	ldi	r23, 0x43	; 67
    3ce6:	83 e0       	ldi	r24, 0x03	; 3
    3ce8:	0e 94 81 38 	call	0x7102	; 0x7102 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3cec:	fa c0       	rjmp	.+500    	; 0x3ee2 <_Z17handleLinkBusMsgsv+0xd28>
    3cee:	80 91 72 47 	lds	r24, 0x4772	; 0x804772 <_ZL22g_lastConversionResult>
    3cf2:	90 91 73 47 	lds	r25, 0x4773	; 0x804773 <_ZL22g_lastConversionResult+0x1>
    3cf6:	21 e0       	ldi	r18, 0x01	; 1
    3cf8:	8d 38       	cpi	r24, 0x8D	; 141
    3cfa:	92 40       	sbci	r25, 0x02	; 2
    3cfc:	08 f4       	brcc	.+2      	; 0x3d00 <_Z17handleLinkBusMsgsv+0xb46>
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	22 23       	and	r18, r18
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <_Z17handleLinkBusMsgsv+0xb4c>
    3d04:	7c c0       	rjmp	.+248    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xc44>
    3d06:	80 91 72 47 	lds	r24, 0x4772	; 0x804772 <_ZL22g_lastConversionResult>
    3d0a:	90 91 73 47 	lds	r25, 0x4773	; 0x804773 <_ZL22g_lastConversionResult+0x1>
    3d0e:	cc 01       	movw	r24, r24
    3d10:	a0 e0       	ldi	r26, 0x00	; 0
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	9c 01       	movw	r18, r24
    3d16:	ad 01       	movw	r20, r26
    3d18:	60 ea       	ldi	r22, 0xA0	; 160
    3d1a:	78 e6       	ldi	r23, 0x68	; 104
    3d1c:	86 e0       	ldi	r24, 0x06	; 6
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	0e 94 8a 4c 	call	0x9914	; 0x9914 <__mulsi3>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	7c 01       	movw	r14, r24
    3d2a:	8d 01       	movw	r16, r26
    3d2c:	ed e7       	ldi	r30, 0x7D	; 125
    3d2e:	fe 1a       	sub	r15, r30
    3d30:	0c 40       	sbci	r16, 0x0C	; 12
    3d32:	1e 4f       	sbci	r17, 0xFE	; 254
    3d34:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3d38:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3d3c:	cc 01       	movw	r24, r24
    3d3e:	a0 e0       	ldi	r26, 0x00	; 0
    3d40:	b0 e0       	ldi	r27, 0x00	; 0
    3d42:	9c 01       	movw	r18, r24
    3d44:	ad 01       	movw	r20, r26
    3d46:	64 e6       	ldi	r22, 0x64	; 100
    3d48:	70 e7       	ldi	r23, 0x70	; 112
    3d4a:	8e ef       	ldi	r24, 0xFE	; 254
    3d4c:	9f ef       	ldi	r25, 0xFF	; 255
    3d4e:	0e 94 8a 4c 	call	0x9914	; 0x9914 <__mulsi3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	e8 0e       	add	r14, r24
    3d58:	f9 1e       	adc	r15, r25
    3d5a:	0a 1f       	adc	r16, r26
    3d5c:	1b 1f       	adc	r17, r27
    3d5e:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3d62:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3d66:	cc 01       	movw	r24, r24
    3d68:	a0 e0       	ldi	r26, 0x00	; 0
    3d6a:	b0 e0       	ldi	r27, 0x00	; 0
    3d6c:	28 e6       	ldi	r18, 0x68	; 104
    3d6e:	30 e1       	ldi	r19, 0x10	; 16
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	50 e0       	ldi	r21, 0x00	; 0
    3d74:	28 1b       	sub	r18, r24
    3d76:	39 0b       	sbc	r19, r25
    3d78:	4a 0b       	sbc	r20, r26
    3d7a:	5b 0b       	sbc	r21, r27
    3d7c:	8f ef       	ldi	r24, 0xFF	; 255
    3d7e:	93 e0       	ldi	r25, 0x03	; 3
    3d80:	dc 01       	movw	r26, r24
    3d82:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <__muluhisi3>
    3d86:	9b 01       	movw	r18, r22
    3d88:	ac 01       	movw	r20, r24
    3d8a:	c8 01       	movw	r24, r16
    3d8c:	b7 01       	movw	r22, r14
    3d8e:	0e 94 e4 4c 	call	0x99c8	; 0x99c8 <__divmodsi4>
    3d92:	da 01       	movw	r26, r20
    3d94:	c9 01       	movw	r24, r18
    3d96:	8c a3       	std	Y+36, r24	; 0x24
    3d98:	9d a3       	std	Y+37, r25	; 0x25
    3d9a:	ae a3       	std	Y+38, r26	; 0x26
    3d9c:	bf a3       	std	Y+39, r27	; 0x27
    3d9e:	18 a6       	std	Y+40, r1	; 0x28
    3da0:	19 a6       	std	Y+41, r1	; 0x29
    3da2:	84 e6       	ldi	r24, 0x64	; 100
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	8a a7       	std	Y+42, r24	; 0x2a
    3da8:	9b a7       	std	Y+43, r25	; 0x2b
    3daa:	8a a5       	ldd	r24, Y+42	; 0x2a
    3dac:	9b a5       	ldd	r25, Y+43	; 0x2b
    3dae:	9c 01       	movw	r18, r24
    3db0:	99 0f       	add	r25, r25
    3db2:	44 0b       	sbc	r20, r20
    3db4:	55 0b       	sbc	r21, r21
    3db6:	8c a1       	ldd	r24, Y+36	; 0x24
    3db8:	9d a1       	ldd	r25, Y+37	; 0x25
    3dba:	ae a1       	ldd	r26, Y+38	; 0x26
    3dbc:	bf a1       	ldd	r27, Y+39	; 0x27
    3dbe:	28 17       	cp	r18, r24
    3dc0:	39 07       	cpc	r19, r25
    3dc2:	4a 07       	cpc	r20, r26
    3dc4:	5b 07       	cpc	r21, r27
    3dc6:	3c f4       	brge	.+14     	; 0x3dd6 <_Z17handleLinkBusMsgsv+0xc1c>
    3dc8:	8a a5       	ldd	r24, Y+42	; 0x2a
    3dca:	9b a5       	ldd	r25, Y+43	; 0x2b
    3dcc:	09 2e       	mov	r0, r25
    3dce:	00 0c       	add	r0, r0
    3dd0:	aa 0b       	sbc	r26, r26
    3dd2:	bb 0b       	sbc	r27, r27
    3dd4:	11 c0       	rjmp	.+34     	; 0x3df8 <_Z17handleLinkBusMsgsv+0xc3e>
    3dd6:	88 a5       	ldd	r24, Y+40	; 0x28
    3dd8:	99 a5       	ldd	r25, Y+41	; 0x29
    3dda:	09 2e       	mov	r0, r25
    3ddc:	00 0c       	add	r0, r0
    3dde:	aa 0b       	sbc	r26, r26
    3de0:	bb 0b       	sbc	r27, r27
    3de2:	2c a1       	ldd	r18, Y+36	; 0x24
    3de4:	3d a1       	ldd	r19, Y+37	; 0x25
    3de6:	4e a1       	ldd	r20, Y+38	; 0x26
    3de8:	5f a1       	ldd	r21, Y+39	; 0x27
    3dea:	82 17       	cp	r24, r18
    3dec:	93 07       	cpc	r25, r19
    3dee:	a4 07       	cpc	r26, r20
    3df0:	b5 07       	cpc	r27, r21
    3df2:	14 f4       	brge	.+4      	; 0x3df8 <_Z17handleLinkBusMsgsv+0xc3e>
    3df4:	da 01       	movw	r26, r20
    3df6:	c9 01       	movw	r24, r18
    3df8:	8a 87       	std	Y+10, r24	; 0x0a
    3dfa:	9b 87       	std	Y+11, r25	; 0x0b
    3dfc:	2f c0       	rjmp	.+94     	; 0x3e5c <_Z17handleLinkBusMsgsv+0xca2>
    3dfe:	80 91 76 47 	lds	r24, 0x4776	; 0x804776 <_ZL22g_lastConversionResult+0x4>
    3e02:	90 91 77 47 	lds	r25, 0x4777	; 0x804777 <_ZL22g_lastConversionResult+0x5>
    3e06:	9c 01       	movw	r18, r24
    3e08:	40 e0       	ldi	r20, 0x00	; 0
    3e0a:	50 e0       	ldi	r21, 0x00	; 0
    3e0c:	da 01       	movw	r26, r20
    3e0e:	c9 01       	movw	r24, r18
    3e10:	88 0f       	add	r24, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	aa 1f       	adc	r26, r26
    3e16:	bb 1f       	adc	r27, r27
    3e18:	88 0f       	add	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	aa 1f       	adc	r26, r26
    3e1e:	bb 1f       	adc	r27, r27
    3e20:	88 0f       	add	r24, r24
    3e22:	99 1f       	adc	r25, r25
    3e24:	aa 1f       	adc	r26, r26
    3e26:	bb 1f       	adc	r27, r27
    3e28:	82 1b       	sub	r24, r18
    3e2a:	93 0b       	sbc	r25, r19
    3e2c:	a4 0b       	sbc	r26, r20
    3e2e:	b5 0b       	sbc	r27, r21
    3e30:	88 0f       	add	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	aa 1f       	adc	r26, r26
    3e36:	bb 1f       	adc	r27, r27
    3e38:	8a 5c       	subi	r24, 0xCA	; 202
    3e3a:	9e 4f       	sbci	r25, 0xFE	; 254
    3e3c:	af 4f       	sbci	r26, 0xFF	; 255
    3e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e40:	24 e6       	ldi	r18, 0x64	; 100
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e0       	ldi	r20, 0x00	; 0
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	bc 01       	movw	r22, r24
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	0e 94 e4 4c 	call	0x99c8	; 0x99c8 <__divmodsi4>
    3e50:	da 01       	movw	r26, r20
    3e52:	c9 01       	movw	r24, r18
    3e54:	80 5f       	subi	r24, 0xF0	; 240
    3e56:	98 4d       	sbci	r25, 0xD8	; 216
    3e58:	8a 87       	std	Y+10, r24	; 0x0a
    3e5a:	9b 87       	std	Y+11, r25	; 0x0b
    3e5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e60:	67 e0       	ldi	r22, 0x07	; 7
    3e62:	73 e4       	ldi	r23, 0x43	; 67
    3e64:	0e 94 a9 38 	call	0x7152	; 0x7152 <_Z16lb_broadcast_numjPKc>
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	bc 01       	movw	r22, r24
    3e76:	cd 01       	movw	r24, r26
    3e78:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_system_time>
    3e7c:	35 c0       	rjmp	.+106    	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3e7e:	ce 01       	movw	r24, r28
    3e80:	c2 96       	adiw	r24, 0x32	; 50
    3e82:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <ds3231_get_temp>
    3e86:	98 2f       	mov	r25, r24
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	89 27       	eor	r24, r25
    3e8c:	88 23       	and	r24, r24
    3e8e:	59 f1       	breq	.+86     	; 0x3ee6 <_Z17handleLinkBusMsgsv+0xd2c>
    3e90:	8a a9       	ldd	r24, Y+50	; 0x32
    3e92:	9b a9       	ldd	r25, Y+51	; 0x33
    3e94:	6c e0       	ldi	r22, 0x0C	; 12
    3e96:	73 e4       	ldi	r23, 0x43	; 67
    3e98:	0e 94 a9 38 	call	0x7152	; 0x7152 <_Z16lb_broadcast_numjPKc>
    3e9c:	24 c0       	rjmp	.+72     	; 0x3ee6 <_Z17handleLinkBusMsgsv+0xd2c>
    3e9e:	44 e6       	ldi	r20, 0x64	; 100
    3ea0:	50 e4       	ldi	r21, 0x40	; 64
    3ea2:	61 e1       	ldi	r22, 0x11	; 17
    3ea4:	73 e4       	ldi	r23, 0x43	; 67
    3ea6:	83 e0       	ldi	r24, 0x03	; 3
    3ea8:	0e 94 81 38 	call	0x7102	; 0x7102 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3eac:	1d c0       	rjmp	.+58     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3eae:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_Z16linkbus_reset_rxv>
    3eb2:	8e ec       	ldi	r24, 0xCE	; 206
    3eb4:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    3eb8:	17 c0       	rjmp	.+46     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3eba:	00 00       	nop
    3ebc:	15 c0       	rjmp	.+42     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ebe:	00 00       	nop
    3ec0:	13 c0       	rjmp	.+38     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ec2:	00 00       	nop
    3ec4:	11 c0       	rjmp	.+34     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ec6:	00 00       	nop
    3ec8:	0f c0       	rjmp	.+30     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3eca:	00 00       	nop
    3ecc:	0d c0       	rjmp	.+26     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ece:	00 00       	nop
    3ed0:	0b c0       	rjmp	.+22     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ed2:	00 00       	nop
    3ed4:	09 c0       	rjmp	.+18     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ed6:	00 00       	nop
    3ed8:	07 c0       	rjmp	.+14     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3eda:	00 00       	nop
    3edc:	05 c0       	rjmp	.+10     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ede:	00 00       	nop
    3ee0:	03 c0       	rjmp	.+6      	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ee2:	00 00       	nop
    3ee4:	01 c0       	rjmp	.+2      	; 0x3ee8 <_Z17handleLinkBusMsgsv+0xd2e>
    3ee6:	00 00       	nop
    3ee8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3eea:	9d 85       	ldd	r25, Y+13	; 0x0d
    3eec:	fc 01       	movw	r30, r24
    3eee:	11 82       	std	Z+1, r1	; 0x01
    3ef0:	12 82       	std	Z+2, r1	; 0x02
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	88 23       	and	r24, r24
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <_Z17handleLinkBusMsgsv+0xd40>
    3ef8:	6d c9       	rjmp	.-3366   	; 0x31d4 <_Z17handleLinkBusMsgsv+0x1a>
    3efa:	85 e1       	ldi	r24, 0x15	; 21
    3efc:	93 e4       	ldi	r25, 0x43	; 67
    3efe:	0e 94 40 38 	call	0x7080	; 0x7080 <_Z12lb_send_textPc>
    3f02:	68 c9       	rjmp	.-3376   	; 0x31d4 <_Z17handleLinkBusMsgsv+0x1a>
    3f04:	00 00       	nop
    3f06:	e3 96       	adiw	r28, 0x33	; 51
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	df 91       	pop	r29
    3f0e:	cf 91       	pop	r28
    3f10:	1f 91       	pop	r17
    3f12:	0f 91       	pop	r16
    3f14:	ff 90       	pop	r15
    3f16:	ef 90       	pop	r14
    3f18:	08 95       	ret

00003f1a <_Z12eventEnabledv>:
    3f1a:	ef 92       	push	r14
    3f1c:	ff 92       	push	r15
    3f1e:	0f 93       	push	r16
    3f20:	1f 93       	push	r17
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	29 97       	sbiw	r28, 0x09	; 9
    3f2c:	cd bf       	out	0x3d, r28	; 61
    3f2e:	de bf       	out	0x3e, r29	; 62
    3f30:	20 91 60 47 	lds	r18, 0x4760	; 0x804760 <g_event_start_time>
    3f34:	30 91 61 47 	lds	r19, 0x4761	; 0x804761 <g_event_start_time+0x1>
    3f38:	40 91 62 47 	lds	r20, 0x4762	; 0x804762 <g_event_start_time+0x2>
    3f3c:	50 91 63 47 	lds	r21, 0x4763	; 0x804763 <g_event_start_time+0x3>
    3f40:	80 91 64 47 	lds	r24, 0x4764	; 0x804764 <g_event_finish_time>
    3f44:	90 91 65 47 	lds	r25, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    3f48:	a0 91 66 47 	lds	r26, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    3f4c:	b0 91 67 47 	lds	r27, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    3f50:	bc 01       	movw	r22, r24
    3f52:	cd 01       	movw	r24, r26
    3f54:	0e 94 9a 47 	call	0x8f34	; 0x8f34 <_Z7timeDifmm>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	89 83       	std	Y+1, r24	; 0x01
    3f5e:	9a 83       	std	Y+2, r25	; 0x02
    3f60:	ab 83       	std	Y+3, r26	; 0x03
    3f62:	bc 83       	std	Y+4, r27	; 0x04
    3f64:	21 e0       	ldi	r18, 0x01	; 1
    3f66:	89 81       	ldd	r24, Y+1	; 0x01
    3f68:	9a 81       	ldd	r25, Y+2	; 0x02
    3f6a:	ab 81       	ldd	r26, Y+3	; 0x03
    3f6c:	bc 81       	ldd	r27, Y+4	; 0x04
    3f6e:	18 16       	cp	r1, r24
    3f70:	19 06       	cpc	r1, r25
    3f72:	1a 06       	cpc	r1, r26
    3f74:	1b 06       	cpc	r1, r27
    3f76:	0c f0       	brlt	.+2      	; 0x3f7a <_Z12eventEnabledv+0x60>
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	2d 83       	std	Y+5, r18	; 0x05
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	06 96       	adiw	r24, 0x06	; 6
    3f80:	0e 94 ae 05 	call	0xb5c	; 0xb5c <time>
    3f84:	20 91 64 47 	lds	r18, 0x4764	; 0x804764 <g_event_finish_time>
    3f88:	30 91 65 47 	lds	r19, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    3f8c:	40 91 66 47 	lds	r20, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    3f90:	50 91 67 47 	lds	r21, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    3f94:	8e 81       	ldd	r24, Y+6	; 0x06
    3f96:	9f 81       	ldd	r25, Y+7	; 0x07
    3f98:	a8 85       	ldd	r26, Y+8	; 0x08
    3f9a:	b9 85       	ldd	r27, Y+9	; 0x09
    3f9c:	bc 01       	movw	r22, r24
    3f9e:	cd 01       	movw	r24, r26
    3fa0:	0e 94 9a 47 	call	0x8f34	; 0x8f34 <_Z7timeDifmm>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	89 83       	std	Y+1, r24	; 0x01
    3faa:	9a 83       	std	Y+2, r25	; 0x02
    3fac:	ab 83       	std	Y+3, r26	; 0x03
    3fae:	bc 83       	std	Y+4, r27	; 0x04
    3fb0:	89 81       	ldd	r24, Y+1	; 0x01
    3fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb4:	ab 81       	ldd	r26, Y+3	; 0x03
    3fb6:	bc 81       	ldd	r27, Y+4	; 0x04
    3fb8:	bb 23       	and	r27, r27
    3fba:	2c f0       	brlt	.+10     	; 0x3fc6 <_Z12eventEnabledv+0xac>
    3fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbe:	88 23       	and	r24, r24
    3fc0:	11 f0       	breq	.+4      	; 0x3fc6 <_Z12eventEnabledv+0xac>
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	4a c0       	rjmp	.+148    	; 0x405a <__DATA_REGION_LENGTH__+0x5a>
    3fc6:	20 91 60 47 	lds	r18, 0x4760	; 0x804760 <g_event_start_time>
    3fca:	30 91 61 47 	lds	r19, 0x4761	; 0x804761 <g_event_start_time+0x1>
    3fce:	40 91 62 47 	lds	r20, 0x4762	; 0x804762 <g_event_start_time+0x2>
    3fd2:	50 91 63 47 	lds	r21, 0x4763	; 0x804763 <g_event_start_time+0x3>
    3fd6:	8e 81       	ldd	r24, Y+6	; 0x06
    3fd8:	9f 81       	ldd	r25, Y+7	; 0x07
    3fda:	a8 85       	ldd	r26, Y+8	; 0x08
    3fdc:	b9 85       	ldd	r27, Y+9	; 0x09
    3fde:	bc 01       	movw	r22, r24
    3fe0:	cd 01       	movw	r24, r26
    3fe2:	0e 94 9a 47 	call	0x8f34	; 0x8f34 <_Z7timeDifmm>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	89 83       	std	Y+1, r24	; 0x01
    3fec:	9a 83       	std	Y+2, r25	; 0x02
    3fee:	ab 83       	std	Y+3, r26	; 0x03
    3ff0:	bc 83       	std	Y+4, r27	; 0x04
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ff8:	bc 81       	ldd	r27, Y+4	; 0x04
    3ffa:	84 3c       	cpi	r24, 0xC4	; 196
    3ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ffe:	af 4f       	sbci	r26, 0xFF	; 255
    4000:	bf 4f       	sbci	r27, 0xFF	; 255
    4002:	64 f0       	brlt	.+24     	; 0x401c <__DATA_REGION_LENGTH__+0x1c>
    4004:	10 92 31 47 	sts	0x4731, r1	; 0x804731 <_ZL11g_sleepType>
    4008:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep>
    400c:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    4010:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    4014:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	1f c0       	rjmp	.+62     	; 0x405a <__DATA_REGION_LENGTH__+0x5a>
    401c:	24 ec       	ldi	r18, 0xC4	; 196
    401e:	3f ef       	ldi	r19, 0xFF	; 255
    4020:	4f ef       	ldi	r20, 0xFF	; 255
    4022:	5f ef       	ldi	r21, 0xFF	; 255
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	9a 81       	ldd	r25, Y+2	; 0x02
    4028:	ab 81       	ldd	r26, Y+3	; 0x03
    402a:	bc 81       	ldd	r27, Y+4	; 0x04
    402c:	79 01       	movw	r14, r18
    402e:	8a 01       	movw	r16, r20
    4030:	e8 1a       	sub	r14, r24
    4032:	f9 0a       	sbc	r15, r25
    4034:	0a 0b       	sbc	r16, r26
    4036:	1b 0b       	sbc	r17, r27
    4038:	d8 01       	movw	r26, r16
    403a:	c7 01       	movw	r24, r14
    403c:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    4040:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    4044:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    4048:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	80 93 31 47 	sts	0x4731, r24	; 0x804731 <_ZL11g_sleepType>
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	80 93 6c 47 	sts	0x476C, r24	; 0x80476c <_ZL13g_go_to_sleep>
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	29 96       	adiw	r28, 0x09	; 9
    405c:	cd bf       	out	0x3d, r28	; 61
    405e:	de bf       	out	0x3e, r29	; 62
    4060:	df 91       	pop	r29
    4062:	cf 91       	pop	r28
    4064:	1f 91       	pop	r17
    4066:	0f 91       	pop	r16
    4068:	ff 90       	pop	r15
    406a:	ef 90       	pop	r14
    406c:	08 95       	ret

0000406e <_Z13throttleValueh>:
    406e:	85 31       	cpi	r24, 0x15	; 21
    4070:	4c f4       	brge	.+18     	; 0x4084 <_Z13throttleValueh+0x16>
    4072:	28 2f       	mov	r18, r24
    4074:	88 0f       	add	r24, r24
    4076:	33 0b       	sbc	r19, r19
    4078:	25 30       	cpi	r18, 0x05	; 5
    407a:	31 05       	cpc	r19, r1
    407c:	2c f4       	brge	.+10     	; 0x4088 <_Z13throttleValueh+0x1a>
    407e:	25 e0       	ldi	r18, 0x05	; 5
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	02 c0       	rjmp	.+4      	; 0x4088 <_Z13throttleValueh+0x1a>
    4084:	24 e1       	ldi	r18, 0x14	; 20
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e0       	ldi	r20, 0x00	; 0
    408c:	50 e0       	ldi	r21, 0x00	; 0
    408e:	62 ec       	ldi	r22, 0xC2	; 194
    4090:	71 e0       	ldi	r23, 0x01	; 1
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 e4 4c 	call	0x99c8	; 0x99c8 <__divmodsi4>
    409a:	ca 01       	movw	r24, r20
    409c:	b9 01       	movw	r22, r18
    409e:	0e 94 27 4b 	call	0x964e	; 0x964e <__floatsisf>
    40a2:	0e 94 f6 4a 	call	0x95ec	; 0x95ec <__fixunssfsi>
    40a6:	cb 01       	movw	r24, r22
    40a8:	08 95       	ret

000040aa <_Z11launchEventP2SC>:
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	00 d0       	rcall	.+0      	; 0x40b0 <_Z11launchEventP2SC+0x6>
    40b0:	1f 92       	push	r1
    40b2:	cd b7       	in	r28, 0x3d	; 61
    40b4:	de b7       	in	r29, 0x3e	; 62
    40b6:	8a 83       	std	Y+2, r24	; 0x02
    40b8:	9b 83       	std	Y+3, r25	; 0x03
    40ba:	8a 81       	ldd	r24, Y+2	; 0x02
    40bc:	9b 81       	ldd	r25, Y+3	; 0x03
    40be:	0e 94 80 20 	call	0x4100	; 0x4100 <_Z33activateEventUsingCurrentSettingsP2SC>
    40c2:	89 83       	std	Y+1, r24	; 0x01
    40c4:	8a 81       	ldd	r24, Y+2	; 0x02
    40c6:	9b 81       	ldd	r25, Y+3	; 0x03
    40c8:	fc 01       	movw	r30, r24
    40ca:	80 81       	ld	r24, Z
    40cc:	88 23       	and	r24, r24
    40ce:	31 f0       	breq	.+12     	; 0x40dc <_Z11launchEventP2SC+0x32>
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	9b 81       	ldd	r25, Y+3	; 0x03
    40d4:	fc 01       	movw	r30, r24
    40d6:	80 81       	ld	r24, Z
    40d8:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	88 23       	and	r24, r24
    40e0:	21 f0       	breq	.+8      	; 0x40ea <_Z11launchEventP2SC+0x40>
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	80 93 23 47 	sts	0x4723, r24	; 0x804723 <_ZL17g_last_error_code>
    40e8:	04 c0       	rjmp	.+8      	; 0x40f2 <_Z11launchEventP2SC+0x48>
    40ea:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_Z12eventEnabledv>
    40ee:	80 93 68 47 	sts	0x4768, r24	; 0x804768 <g_event_enabled>
    40f2:	89 81       	ldd	r24, Y+1	; 0x01
    40f4:	23 96       	adiw	r28, 0x03	; 3
    40f6:	cd bf       	out	0x3d, r28	; 61
    40f8:	de bf       	out	0x3e, r29	; 62
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	08 95       	ret

00004100 <_Z33activateEventUsingCurrentSettingsP2SC>:
    4100:	cf 92       	push	r12
    4102:	df 92       	push	r13
    4104:	ef 92       	push	r14
    4106:	ff 92       	push	r15
    4108:	0f 93       	push	r16
    410a:	1f 93       	push	r17
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	1f 92       	push	r1
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
    4116:	40 91 60 47 	lds	r20, 0x4760	; 0x804760 <g_event_start_time>
    411a:	50 91 61 47 	lds	r21, 0x4761	; 0x804761 <g_event_start_time+0x1>
    411e:	60 91 62 47 	lds	r22, 0x4762	; 0x804762 <g_event_start_time+0x2>
    4122:	70 91 63 47 	lds	r23, 0x4763	; 0x804763 <g_event_start_time+0x3>
    4126:	45 2b       	or	r20, r21
    4128:	46 2b       	or	r20, r22
    412a:	47 2b       	or	r20, r23
    412c:	09 f4       	brne	.+2      	; 0x4130 <_Z33activateEventUsingCurrentSettingsP2SC+0x30>
    412e:	95 c1       	rjmp	.+810    	; 0x445a <_Z33activateEventUsingCurrentSettingsP2SC+0x35a>
    4130:	00 91 60 47 	lds	r16, 0x4760	; 0x804760 <g_event_start_time>
    4134:	10 91 61 47 	lds	r17, 0x4761	; 0x804761 <g_event_start_time+0x1>
    4138:	20 91 62 47 	lds	r18, 0x4762	; 0x804762 <g_event_start_time+0x2>
    413c:	30 91 63 47 	lds	r19, 0x4763	; 0x804763 <g_event_start_time+0x3>
    4140:	40 91 64 47 	lds	r20, 0x4764	; 0x804764 <g_event_finish_time>
    4144:	50 91 65 47 	lds	r21, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    4148:	60 91 66 47 	lds	r22, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    414c:	70 91 67 47 	lds	r23, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    4150:	04 17       	cp	r16, r20
    4152:	15 07       	cpc	r17, r21
    4154:	26 07       	cpc	r18, r22
    4156:	37 07       	cpc	r19, r23
    4158:	08 f0       	brcs	.+2      	; 0x415c <_Z33activateEventUsingCurrentSettingsP2SC+0x5c>
    415a:	81 c1       	rjmp	.+770    	; 0x445e <_Z33activateEventUsingCurrentSettingsP2SC+0x35e>
    415c:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4160:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4164:	23 2b       	or	r18, r19
    4166:	09 f4       	brne	.+2      	; 0x416a <_Z33activateEventUsingCurrentSettingsP2SC+0x6a>
    4168:	7c c1       	rjmp	.+760    	; 0x4462 <_Z33activateEventUsingCurrentSettingsP2SC+0x362>
    416a:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    416e:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    4172:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4176:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    417a:	24 0f       	add	r18, r20
    417c:	35 1f       	adc	r19, r21
    417e:	40 91 5e 47 	lds	r20, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    4182:	50 91 5f 47 	lds	r21, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    4186:	24 17       	cp	r18, r20
    4188:	35 07       	cpc	r19, r21
    418a:	0c f4       	brge	.+2      	; 0x418e <_Z33activateEventUsingCurrentSettingsP2SC+0x8e>
    418c:	6c c1       	rjmp	.+728    	; 0x4466 <_Z33activateEventUsingCurrentSettingsP2SC+0x366>
    418e:	20 91 32 47 	lds	r18, 0x4732	; 0x804732 <g_messages_text>
    4192:	22 23       	and	r18, r18
    4194:	09 f4       	brne	.+2      	; 0x4198 <_Z33activateEventUsingCurrentSettingsP2SC+0x98>
    4196:	69 c1       	rjmp	.+722    	; 0x446a <_Z33activateEventUsingCurrentSettingsP2SC+0x36a>
    4198:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    419c:	22 23       	and	r18, r18
    419e:	09 f4       	brne	.+2      	; 0x41a2 <_Z33activateEventUsingCurrentSettingsP2SC+0xa2>
    41a0:	66 c1       	rjmp	.+716    	; 0x446e <_Z33activateEventUsingCurrentSettingsP2SC+0x36e>
    41a2:	8c 01       	movw	r16, r24
    41a4:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    41a8:	88 23       	and	r24, r24
    41aa:	19 f1       	breq	.+70     	; 0x41f2 <_Z33activateEventUsingCurrentSettingsP2SC+0xf2>
    41ac:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    41b0:	88 23       	and	r24, r24
    41b2:	41 f0       	breq	.+16     	; 0x41c4 <_Z33activateEventUsingCurrentSettingsP2SC+0xc4>
    41b4:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    41b8:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    41bc:	89 2b       	or	r24, r25
    41be:	21 f4       	brne	.+8      	; 0x41c8 <_Z33activateEventUsingCurrentSettingsP2SC+0xc8>
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	03 c0       	rjmp	.+6      	; 0x41ca <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	01 c0       	rjmp	.+2      	; 0x41ca <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	81 11       	cpse	r24, r1
    41cc:	52 c1       	rjmp	.+676    	; 0x4472 <_Z33activateEventUsingCurrentSettingsP2SC+0x372>
    41ce:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    41d2:	70 e0       	ldi	r23, 0x00	; 0
    41d4:	87 e4       	ldi	r24, 0x47	; 71
    41d6:	97 e4       	ldi	r25, 0x47	; 71
    41d8:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <_Z26timeRequiredToSendStrAtWPMPcj>
    41dc:	8c 50       	subi	r24, 0x0C	; 12
    41de:	9e 4f       	sbci	r25, 0xFE	; 254
    41e0:	68 ee       	ldi	r22, 0xE8	; 232
    41e2:	73 e0       	ldi	r23, 0x03	; 3
    41e4:	0e 94 9a 4c 	call	0x9934	; 0x9934 <__udivmodhi4>
    41e8:	60 93 5c 47 	sts	0x475C, r22	; 0x80475c <g_time_needed_for_ID>
    41ec:	70 93 5d 47 	sts	0x475D, r23	; 0x80475d <g_time_needed_for_ID+0x1>
    41f0:	04 c0       	rjmp	.+8      	; 0x41fa <_Z33activateEventUsingCurrentSettingsP2SC+0xfa>
    41f2:	10 92 5c 47 	sts	0x475C, r1	; 0x80475c <g_time_needed_for_ID>
    41f6:	10 92 5d 47 	sts	0x475D, r1	; 0x80475d <g_time_needed_for_ID+0x1>
    41fa:	60 91 8e 47 	lds	r22, 0x478E	; 0x80478e <g_current_epoch>
    41fe:	70 91 8f 47 	lds	r23, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4202:	80 91 90 47 	lds	r24, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4206:	90 91 91 47 	lds	r25, 0x4791	; 0x804791 <g_current_epoch+0x3>
    420a:	c0 90 64 47 	lds	r12, 0x4764	; 0x804764 <g_event_finish_time>
    420e:	d0 90 65 47 	lds	r13, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    4212:	e0 90 66 47 	lds	r14, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    4216:	f0 90 67 47 	lds	r15, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    421a:	c6 16       	cp	r12, r22
    421c:	d7 06       	cpc	r13, r23
    421e:	e8 06       	cpc	r14, r24
    4220:	f9 06       	cpc	r15, r25
    4222:	48 f4       	brcc	.+18     	; 0x4236 <_Z33activateEventUsingCurrentSettingsP2SC+0x136>
    4224:	01 15       	cp	r16, r1
    4226:	11 05       	cpc	r17, r1
    4228:	09 f4       	brne	.+2      	; 0x422c <_Z33activateEventUsingCurrentSettingsP2SC+0x12c>
    422a:	25 c1       	rjmp	.+586    	; 0x4476 <_Z33activateEventUsingCurrentSettingsP2SC+0x376>
    422c:	8a ef       	ldi	r24, 0xFA	; 250
    422e:	f8 01       	movw	r30, r16
    4230:	80 83       	st	Z, r24
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	21 c1       	rjmp	.+578    	; 0x4478 <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    4236:	20 91 60 47 	lds	r18, 0x4760	; 0x804760 <g_event_start_time>
    423a:	30 91 61 47 	lds	r19, 0x4761	; 0x804761 <g_event_start_time+0x1>
    423e:	40 91 62 47 	lds	r20, 0x4762	; 0x804762 <g_event_start_time+0x2>
    4242:	50 91 63 47 	lds	r21, 0x4763	; 0x804763 <g_event_start_time+0x3>
    4246:	0e 94 9a 47 	call	0x8f34	; 0x8f34 <_Z7timeDifmm>
    424a:	99 23       	and	r25, r25
    424c:	0c f4       	brge	.+2      	; 0x4250 <_Z33activateEventUsingCurrentSettingsP2SC+0x150>
    424e:	f2 c0       	rjmp	.+484    	; 0x4434 <_Z33activateEventUsingCurrentSettingsP2SC+0x334>
    4250:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    4254:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4258:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    425c:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    4260:	e2 0e       	add	r14, r18
    4262:	f3 1e       	adc	r15, r19
    4264:	97 01       	movw	r18, r14
    4266:	0f 2c       	mov	r0, r15
    4268:	00 0c       	add	r0, r0
    426a:	44 0b       	sbc	r20, r20
    426c:	55 0b       	sbc	r21, r21
    426e:	0e 94 e4 4c 	call	0x99c8	; 0x99c8 <__divmodsi4>
    4272:	20 91 5e 47 	lds	r18, 0x475E	; 0x80475e <g_intra_cycle_delay_time>
    4276:	30 91 5f 47 	lds	r19, 0x475F	; 0x80475f <g_intra_cycle_delay_time+0x1>
    427a:	c9 01       	movw	r24, r18
    427c:	86 1b       	sub	r24, r22
    427e:	97 0b       	sbc	r25, r23
    4280:	18 16       	cp	r1, r24
    4282:	19 06       	cpc	r1, r25
    4284:	0c f4       	brge	.+2      	; 0x4288 <_Z33activateEventUsingCurrentSettingsP2SC+0x188>
    4286:	84 c0       	rjmp	.+264    	; 0x4390 <_Z33activateEventUsingCurrentSettingsP2SC+0x290>
    4288:	22 27       	eor	r18, r18
    428a:	33 27       	eor	r19, r19
    428c:	28 1b       	sub	r18, r24
    428e:	39 0b       	sbc	r19, r25
    4290:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    4294:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4298:	24 17       	cp	r18, r20
    429a:	35 07       	cpc	r19, r21
    429c:	ac f1       	brlt	.+106    	; 0x4308 <_Z33activateEventUsingCurrentSettingsP2SC+0x208>
    429e:	8e 0d       	add	r24, r14
    42a0:	9f 1d       	adc	r25, r15
    42a2:	91 95       	neg	r25
    42a4:	81 95       	neg	r24
    42a6:	91 09       	sbc	r25, r1
    42a8:	09 2e       	mov	r0, r25
    42aa:	00 0c       	add	r0, r0
    42ac:	aa 0b       	sbc	r26, r26
    42ae:	bb 0b       	sbc	r27, r27
    42b0:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    42b4:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    42b8:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    42bc:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    42c0:	01 15       	cp	r16, r1
    42c2:	11 05       	cpc	r17, r1
    42c4:	19 f0       	breq	.+6      	; 0x42cc <_Z33activateEventUsingCurrentSettingsP2SC+0x1cc>
    42c6:	8e ef       	ldi	r24, 0xFE	; 254
    42c8:	f8 01       	movw	r30, r16
    42ca:	80 83       	st	Z, r24
    42cc:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    42d0:	81 11       	cpse	r24, r1
    42d2:	8a c0       	rjmp	.+276    	; 0x43e8 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e8>
    42d4:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    42d8:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    42dc:	40 91 28 47 	lds	r20, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    42e0:	50 91 29 47 	lds	r21, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    42e4:	60 91 2a 47 	lds	r22, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    42e8:	70 91 2b 47 	lds	r23, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    42ec:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    42f0:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    42f4:	84 1b       	sub	r24, r20
    42f6:	95 0b       	sbc	r25, r21
    42f8:	82 1b       	sub	r24, r18
    42fa:	93 0b       	sbc	r25, r19
    42fc:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    4300:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	77 c0       	rjmp	.+238    	; 0x43f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    4308:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    430c:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4310:	82 0f       	add	r24, r18
    4312:	93 1f       	adc	r25, r19
    4314:	09 2e       	mov	r0, r25
    4316:	00 0c       	add	r0, r0
    4318:	aa 0b       	sbc	r26, r26
    431a:	bb 0b       	sbc	r27, r27
    431c:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    4320:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    4324:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    4328:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
    432c:	01 15       	cp	r16, r1
    432e:	11 05       	cpc	r17, r1
    4330:	19 f0       	breq	.+6      	; 0x4338 <_Z33activateEventUsingCurrentSettingsP2SC+0x238>
    4332:	8d ef       	ldi	r24, 0xFD	; 253
    4334:	f8 01       	movw	r30, r16
    4336:	80 83       	st	Z, r24
    4338:	80 91 68 47 	lds	r24, 0x4768	; 0x804768 <g_event_enabled>
    433c:	81 11       	cpse	r24, r1
    433e:	56 c0       	rjmp	.+172    	; 0x43ec <_Z33activateEventUsingCurrentSettingsP2SC+0x2ec>
    4340:	80 91 5c 47 	lds	r24, 0x475C	; 0x80475c <g_time_needed_for_ID>
    4344:	90 91 5d 47 	lds	r25, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    4348:	a0 e0       	ldi	r26, 0x00	; 0
    434a:	b0 e0       	ldi	r27, 0x00	; 0
    434c:	40 91 28 47 	lds	r20, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    4350:	50 91 29 47 	lds	r21, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    4354:	60 91 2a 47 	lds	r22, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    4358:	70 91 2b 47 	lds	r23, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    435c:	84 17       	cp	r24, r20
    435e:	95 07       	cpc	r25, r21
    4360:	a6 07       	cpc	r26, r22
    4362:	b7 07       	cpc	r27, r23
    4364:	0c f0       	brlt	.+2      	; 0x4368 <_Z33activateEventUsingCurrentSettingsP2SC+0x268>
    4366:	44 c0       	rjmp	.+136    	; 0x43f0 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f0>
    4368:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <_ZL12g_on_the_air>
    436c:	90 91 29 47 	lds	r25, 0x4729	; 0x804729 <_ZL12g_on_the_air+0x1>
    4370:	a0 91 2a 47 	lds	r26, 0x472A	; 0x80472a <_ZL12g_on_the_air+0x2>
    4374:	b0 91 2b 47 	lds	r27, 0x472B	; 0x80472b <_ZL12g_on_the_air+0x3>
    4378:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    437c:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    4380:	82 1b       	sub	r24, r18
    4382:	93 0b       	sbc	r25, r19
    4384:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    4388:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	33 c0       	rjmp	.+102    	; 0x43f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    4390:	44 27       	eor	r20, r20
    4392:	55 27       	eor	r21, r21
    4394:	48 1b       	sub	r20, r24
    4396:	59 0b       	sbc	r21, r25
    4398:	05 2e       	mov	r0, r21
    439a:	00 0c       	add	r0, r0
    439c:	66 0b       	sbc	r22, r22
    439e:	77 0b       	sbc	r23, r23
    43a0:	40 93 28 47 	sts	0x4728, r20	; 0x804728 <_ZL12g_on_the_air>
    43a4:	50 93 29 47 	sts	0x4729, r21	; 0x804729 <_ZL12g_on_the_air+0x1>
    43a8:	60 93 2a 47 	sts	0x472A, r22	; 0x80472a <_ZL12g_on_the_air+0x2>
    43ac:	70 93 2b 47 	sts	0x472B, r23	; 0x80472b <_ZL12g_on_the_air+0x3>
    43b0:	01 15       	cp	r16, r1
    43b2:	11 05       	cpc	r17, r1
    43b4:	19 f0       	breq	.+6      	; 0x43bc <_Z33activateEventUsingCurrentSettingsP2SC+0x2bc>
    43b6:	2e ef       	ldi	r18, 0xFE	; 254
    43b8:	f8 01       	movw	r30, r16
    43ba:	20 83       	st	Z, r18
    43bc:	20 91 68 47 	lds	r18, 0x4768	; 0x804768 <g_event_enabled>
    43c0:	21 11       	cpse	r18, r1
    43c2:	18 c0       	rjmp	.+48     	; 0x43f4 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f4>
    43c4:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    43c8:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    43cc:	82 0f       	add	r24, r18
    43ce:	93 1f       	adc	r25, r19
    43d0:	20 91 5c 47 	lds	r18, 0x475C	; 0x80475c <g_time_needed_for_ID>
    43d4:	30 91 5d 47 	lds	r19, 0x475D	; 0x80475d <g_time_needed_for_ID+0x1>
    43d8:	82 1b       	sub	r24, r18
    43da:	93 0b       	sbc	r25, r19
    43dc:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    43e0:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	07 c0       	rjmp	.+14     	; 0x43f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	05 c0       	rjmp	.+10     	; 0x43f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	03 c0       	rjmp	.+6      	; 0x43f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	01 c0       	rjmp	.+2      	; 0x43f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x2f6>
    43f4:	80 e0       	ldi	r24, 0x00	; 0
    43f6:	88 23       	and	r24, r24
    43f8:	b1 f0       	breq	.+44     	; 0x4426 <_Z33activateEventUsingCurrentSettingsP2SC+0x326>
    43fa:	f8 94       	cli
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	89 83       	std	Y+1, r24	; 0x01
    4400:	40 e0       	ldi	r20, 0x00	; 0
    4402:	50 e0       	ldi	r21, 0x00	; 0
    4404:	be 01       	movw	r22, r28
    4406:	6f 5f       	subi	r22, 0xFF	; 255
    4408:	7f 4f       	sbci	r23, 0xFF	; 255
    440a:	82 e3       	ldi	r24, 0x32	; 50
    440c:	97 e4       	ldi	r25, 0x47	; 71
    440e:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
    4412:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4416:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    441a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    441e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    4422:	78 94       	sei
    4424:	03 c0       	rjmp	.+6      	; 0x442c <_Z33activateEventUsingCurrentSettingsP2SC+0x32c>
    4426:	80 e0       	ldi	r24, 0x00	; 0
    4428:	0e 94 5e 45 	call	0x8abc	; 0x8abc <_Z14keyTransmitterb>
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	80 93 69 47 	sts	0x4769, r24	; 0x804769 <g_event_commenced>
    4432:	09 c0       	rjmp	.+18     	; 0x4446 <_Z33activateEventUsingCurrentSettingsP2SC+0x346>
    4434:	01 15       	cp	r16, r1
    4436:	11 05       	cpc	r17, r1
    4438:	19 f0       	breq	.+6      	; 0x4440 <_Z33activateEventUsingCurrentSettingsP2SC+0x340>
    443a:	8f ef       	ldi	r24, 0xFF	; 255
    443c:	f8 01       	movw	r30, r16
    443e:	80 83       	st	Z, r24
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	0e 94 5e 45 	call	0x8abc	; 0x8abc <_Z14keyTransmitterb>
    4446:	10 92 6b 47 	sts	0x476B, r1	; 0x80476b <g_waiting_for_next_event>
    444a:	8a e5       	ldi	r24, 0x5A	; 90
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    4452:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	0f c0       	rjmp	.+30     	; 0x4478 <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    445a:	8c ec       	ldi	r24, 0xCC	; 204
    445c:	0d c0       	rjmp	.+26     	; 0x4478 <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    445e:	8d ec       	ldi	r24, 0xCD	; 205
    4460:	0b c0       	rjmp	.+22     	; 0x4478 <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    4462:	8b ec       	ldi	r24, 0xCB	; 203
    4464:	09 c0       	rjmp	.+18     	; 0x4478 <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    4466:	8a ec       	ldi	r24, 0xCA	; 202
    4468:	07 c0       	rjmp	.+14     	; 0x4478 <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    446a:	89 ec       	ldi	r24, 0xC9	; 201
    446c:	05 c0       	rjmp	.+10     	; 0x4478 <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    446e:	88 ec       	ldi	r24, 0xC8	; 200
    4470:	03 c0       	rjmp	.+6      	; 0x4478 <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    4472:	87 ec       	ldi	r24, 0xC7	; 199
    4474:	01 c0       	rjmp	.+2      	; 0x4478 <_Z33activateEventUsingCurrentSettingsP2SC+0x378>
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	0f 90       	pop	r0
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	ff 90       	pop	r15
    4484:	ef 90       	pop	r14
    4486:	df 90       	pop	r13
    4488:	cf 90       	pop	r12
    448a:	08 95       	ret

0000448c <_Z8rtc_initv>:
    448c:	cf 93       	push	r28
    448e:	df 93       	push	r29
    4490:	88 b1       	in	r24, 0x08	; 8
    4492:	88 60       	ori	r24, 0x08	; 8
    4494:	88 b9       	out	0x08, r24	; 8
    4496:	c0 e0       	ldi	r28, 0x00	; 0
    4498:	d0 e0       	ldi	r29, 0x00	; 0
    449a:	c2 33       	cpi	r28, 0x32	; 50
    449c:	d1 05       	cpc	r29, r1
    449e:	c4 f4       	brge	.+48     	; 0x44d0 <_Z8rtc_initv+0x44>
    44a0:	89 b1       	in	r24, 0x09	; 9
    44a2:	87 7f       	andi	r24, 0xF7	; 247
    44a4:	89 b9       	out	0x09, r24	; 9
    44a6:	64 e1       	ldi	r22, 0x14	; 20
    44a8:	70 e0       	ldi	r23, 0x00	; 0
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	0e 94 61 44 	call	0x88c2	; 0x88c2 <util_delay_ms>
    44b2:	81 11       	cpse	r24, r1
    44b4:	f8 cf       	rjmp	.-16     	; 0x44a6 <_Z8rtc_initv+0x1a>
    44b6:	89 b1       	in	r24, 0x09	; 9
    44b8:	88 60       	ori	r24, 0x08	; 8
    44ba:	89 b9       	out	0x09, r24	; 9
    44bc:	64 e1       	ldi	r22, 0x14	; 20
    44be:	70 e0       	ldi	r23, 0x00	; 0
    44c0:	80 e0       	ldi	r24, 0x00	; 0
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	0e 94 61 44 	call	0x88c2	; 0x88c2 <util_delay_ms>
    44c8:	81 11       	cpse	r24, r1
    44ca:	f8 cf       	rjmp	.-16     	; 0x44bc <_Z8rtc_initv+0x30>
    44cc:	21 96       	adiw	r28, 0x01	; 1
    44ce:	e5 cf       	rjmp	.-54     	; 0x449a <_Z8rtc_initv+0xe>
    44d0:	e3 e5       	ldi	r30, 0x53	; 83
    44d2:	f4 e0       	ldi	r31, 0x04	; 4
    44d4:	80 81       	ld	r24, Z
    44d6:	88 60       	ori	r24, 0x08	; 8
    44d8:	80 83       	st	Z, r24
    44da:	e2 e5       	ldi	r30, 0x52	; 82
    44dc:	f4 e0       	ldi	r31, 0x04	; 4
    44de:	80 81       	ld	r24, Z
    44e0:	88 60       	ori	r24, 0x08	; 8
    44e2:	80 83       	st	Z, r24
    44e4:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <ds3231_init>
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <ds3231_1s_sqw>
    44ee:	88 23       	and	r24, r24
    44f0:	11 f0       	breq	.+4      	; 0x44f6 <_Z8rtc_initv+0x6a>
    44f2:	8c ef       	ldi	r24, 0xFC	; 252
    44f4:	01 c0       	rjmp	.+2      	; 0x44f8 <_Z8rtc_initv+0x6c>
    44f6:	80 e0       	ldi	r24, 0x00	; 0
    44f8:	df 91       	pop	r29
    44fa:	cf 91       	pop	r28
    44fc:	08 95       	ret

000044fe <_Z18antennaIsConnectedv>:
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	08 95       	ret

00004502 <_Z13startEventNow19EventActionSource_t>:
	
}


void startEventNow(EventActionSource_t activationSource)
{
    4502:	cf 93       	push	r28
    4504:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    4506:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <_Z23clockConfigurationCheckv>

	if(activationSource == POWER_UP)
    450a:	c1 11       	cpse	r28, r1
    450c:	0e c0       	rjmp	.+28     	; 0x452a <_Z13startEventNow19EventActionSource_t+0x28>
	{
		if(conf == CONFIGURATION_ERROR)
    450e:	82 30       	cpi	r24, 0x02	; 2
    4510:	31 f4       	brne	.+12     	; 0x451e <_Z13startEventNow19EventActionSource_t+0x1c>
		{
			setupForFox(NULL, START_NOTHING);
    4512:	60 e0       	ldi	r22, 0x00	; 0
    4514:	80 e0       	ldi	r24, 0x00	; 0
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    451c:	3f c0       	rjmp	.+126    	; 0x459c <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    451e:	63 e0       	ldi	r22, 0x03	; 3
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    4528:	39 c0       	rjmp	.+114    	; 0x459c <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    452a:	c2 30       	cpi	r28, 0x02	; 2
    452c:	d1 f4       	brne	.+52     	; 0x4562 <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    452e:	82 30       	cpi	r24, 0x02	; 2
    4530:	31 f4       	brne	.+12     	; 0x453e <_Z13startEventNow19EventActionSource_t+0x3c>
		{
			setupForFox(NULL, START_EVENT_NOW);
    4532:	61 e0       	ldi	r22, 0x01	; 1
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    453c:	2f c0       	rjmp	.+94     	; 0x459c <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    453e:	81 30       	cpi	r24, 0x01	; 1
    4540:	21 f0       	breq	.+8      	; 0x454a <_Z13startEventNow19EventActionSource_t+0x48>
    4542:	84 30       	cpi	r24, 0x04	; 4
    4544:	11 f0       	breq	.+4      	; 0x454a <_Z13startEventNow19EventActionSource_t+0x48>
    4546:	83 30       	cpi	r24, 0x03	; 3
    4548:	31 f4       	brne	.+12     	; 0x4556 <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    454a:	61 e0       	ldi	r22, 0x01	; 1
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    4554:	23 c0       	rjmp	.+70     	; 0x459c <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    4556:	63 e0       	ldi	r22, 0x03	; 3
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    4560:	1d c0       	rjmp	.+58     	; 0x459c <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    4562:	82 30       	cpi	r24, 0x02	; 2
    4564:	31 f4       	brne	.+12     	; 0x4572 <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    4566:	61 e0       	ldi	r22, 0x01	; 1
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    4570:	15 c0       	rjmp	.+42     	; 0x459c <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    4572:	81 30       	cpi	r24, 0x01	; 1
    4574:	31 f4       	brne	.+12     	; 0x4582 <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    4576:	62 e0       	ldi	r22, 0x02	; 2
    4578:	80 e0       	ldi	r24, 0x00	; 0
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    4580:	0d c0       	rjmp	.+26     	; 0x459c <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    4582:	84 30       	cpi	r24, 0x04	; 4
    4584:	31 f4       	brne	.+12     	; 0x4592 <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    4586:	63 e0       	ldi	r22, 0x03	; 3
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    4590:	05 c0       	rjmp	.+10     	; 0x459c <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    4592:	63 e0       	ldi	r22, 0x03	; 3
    4594:	80 e0       	ldi	r24, 0x00	; 0
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

// 	g_LED_enunciating = false;
}
    459c:	cf 91       	pop	r28
    459e:	08 95       	ret

000045a0 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    45a0:	cf 93       	push	r28
    45a2:	df 93       	push	r29
    45a4:	d8 2f       	mov	r29, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    45a6:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <_Z23clockConfigurationCheckv>
    45aa:	c8 2f       	mov	r28, r24

	cli();
    45ac:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    45ae:	d2 30       	cpi	r29, 0x02	; 2
    45b0:	31 f4       	brne	.+12     	; 0x45be <_Z12stopEventNow19EventActionSource_t+0x1e>
	{
		setupForFox(NULL, START_NOTHING);
    45b2:	60 e0       	ldi	r22, 0x00	; 0
    45b4:	80 e0       	ldi	r24, 0x00	; 0
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    45bc:	14 c0       	rjmp	.+40     	; 0x45e6 <_Z12stopEventNow19EventActionSource_t+0x46>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    45be:	81 30       	cpi	r24, 0x01	; 1
    45c0:	29 f4       	brne	.+10     	; 0x45cc <_Z12stopEventNow19EventActionSource_t+0x2c>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    45c2:	62 e0       	ldi	r22, 0x02	; 2
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    45cc:	c4 30       	cpi	r28, 0x04	; 4
    45ce:	31 f4       	brne	.+12     	; 0x45dc <_Z12stopEventNow19EventActionSource_t+0x3c>
		{
			setupForFox(NULL, START_NOTHING);
    45d0:	60 e0       	ldi	r22, 0x00	; 0
    45d2:	80 e0       	ldi	r24, 0x00	; 0
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
    45da:	05 c0       	rjmp	.+10     	; 0x45e6 <_Z12stopEventNow19EventActionSource_t+0x46>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    45dc:	60 e0       	ldi	r22, 0x00	; 0
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>

// 	if(g_sync_pin_stable == STABLE_LOW)
// 	{
// 		digitalWrite(PIN_LED, OFF); /*  LED Off */
// 	}
}
    45e6:	df 91       	pop	r29
    45e8:	cf 91       	pop	r28
    45ea:	08 95       	ret

000045ec <_Z18startEventUsingRTCv>:

void startEventUsingRTC(void)
{
    45ec:	8f 92       	push	r8
    45ee:	9f 92       	push	r9
    45f0:	af 92       	push	r10
    45f2:	bf 92       	push	r11
    45f4:	ef 92       	push	r14
    45f6:	ff 92       	push	r15
    45f8:	0f 93       	push	r16
    45fa:	1f 93       	push	r17
	g_current_epoch = ds3231_get_epoch(null);
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    4604:	60 93 8e 47 	sts	0x478E, r22	; 0x80478e <g_current_epoch>
    4608:	70 93 8f 47 	sts	0x478F, r23	; 0x80478f <g_current_epoch+0x1>
    460c:	80 93 90 47 	sts	0x4790, r24	; 0x804790 <g_current_epoch+0x2>
    4610:	90 93 91 47 	sts	0x4791, r25	; 0x804791 <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    4614:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    4618:	82 30       	cpi	r24, 0x02	; 2
    461a:	09 f4       	brne	.+2      	; 0x461e <_Z18startEventUsingRTCv+0x32>
    461c:	54 c0       	rjmp	.+168    	; 0x46c6 <_Z18startEventUsingRTCv+0xda>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    461e:	63 e0       	ldi	r22, 0x03	; 3
    4620:	80 e0       	ldi	r24, 0x00	; 0
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    4628:	20 91 7d 47 	lds	r18, 0x477D	; 0x80477d <g_event_start_epoch>
    462c:	30 91 7e 47 	lds	r19, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    4630:	40 91 7f 47 	lds	r20, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    4634:	50 91 80 47 	lds	r21, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    4638:	60 91 8e 47 	lds	r22, 0x478E	; 0x80478e <g_current_epoch>
    463c:	70 91 8f 47 	lds	r23, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4640:	80 91 90 47 	lds	r24, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4644:	90 91 91 47 	lds	r25, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4648:	0f 2e       	mov	r0, r31
    464a:	f7 ea       	ldi	r31, 0xA7	; 167
    464c:	ef 2e       	mov	r14, r31
    464e:	f2 e4       	ldi	r31, 0x42	; 66
    4650:	ff 2e       	mov	r15, r31
    4652:	f0 2d       	mov	r31, r0
    4654:	04 eb       	ldi	r16, 0xB4	; 180
    4656:	12 e4       	ldi	r17, 0x42	; 66
    4658:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    465c:	60 91 7d 47 	lds	r22, 0x477D	; 0x80477d <g_event_start_epoch>
    4660:	70 91 7e 47 	lds	r23, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    4664:	80 91 7f 47 	lds	r24, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    4668:	90 91 80 47 	lds	r25, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    466c:	80 90 8e 47 	lds	r8, 0x478E	; 0x80478e <g_current_epoch>
    4670:	90 90 8f 47 	lds	r9, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4674:	a0 90 90 47 	lds	r10, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4678:	b0 90 91 47 	lds	r11, 0x4791	; 0x804791 <g_current_epoch+0x3>
    467c:	68 15       	cp	r22, r8
    467e:	79 05       	cpc	r23, r9
    4680:	8a 05       	cpc	r24, r10
    4682:	9b 05       	cpc	r25, r11
    4684:	88 f4       	brcc	.+34     	; 0x46a8 <_Z18startEventUsingRTCv+0xbc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    4686:	20 91 81 47 	lds	r18, 0x4781	; 0x804781 <g_event_finish_epoch>
    468a:	30 91 82 47 	lds	r19, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    468e:	40 91 83 47 	lds	r20, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    4692:	50 91 84 47 	lds	r21, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    4696:	e1 2c       	mov	r14, r1
    4698:	f1 2c       	mov	r15, r1
    469a:	08 ec       	ldi	r16, 0xC8	; 200
    469c:	12 e4       	ldi	r17, 0x42	; 66
    469e:	c5 01       	movw	r24, r10
    46a0:	b4 01       	movw	r22, r8
    46a2:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <_Z14reportTimeTillmmPKcS0_>
    46a6:	11 c0       	rjmp	.+34     	; 0x46ca <_Z18startEventUsingRTCv+0xde>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    46a8:	20 91 81 47 	lds	r18, 0x4781	; 0x804781 <g_event_finish_epoch>
    46ac:	30 91 82 47 	lds	r19, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    46b0:	40 91 83 47 	lds	r20, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    46b4:	50 91 84 47 	lds	r21, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    46b8:	e1 2c       	mov	r14, r1
    46ba:	f1 2c       	mov	r15, r1
    46bc:	00 ec       	ldi	r16, 0xC0	; 192
    46be:	12 e4       	ldi	r17, 0x42	; 66
    46c0:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <_Z14reportTimeTillmmPKcS0_>
    46c4:	02 c0       	rjmp	.+4      	; 0x46ca <_Z18startEventUsingRTCv+0xde>
		}
	}
	else
	{
		reportConfigErrors();
    46c6:	0e 94 2f 28 	call	0x505e	; 0x505e <_Z18reportConfigErrorsv>
	}
}
    46ca:	1f 91       	pop	r17
    46cc:	0f 91       	pop	r16
    46ce:	ff 90       	pop	r15
    46d0:	ef 90       	pop	r14
    46d2:	bf 90       	pop	r11
    46d4:	af 90       	pop	r10
    46d6:	9f 90       	pop	r9
    46d8:	8f 90       	pop	r8
    46da:	08 95       	ret

000046dc <_Z11setupForFoxP5Fox_t13EventAction_t>:



void setupForFox(Fox_t* fox, EventAction_t action)
{
    46dc:	1f 93       	push	r17
    46de:	cf 93       	push	r28
    46e0:	df 93       	push	r29
    46e2:	00 d0       	rcall	.+0      	; 0x46e4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x8>
    46e4:	cd b7       	in	r28, 0x3d	; 61
    46e6:	de b7       	in	r29, 0x3e	; 62
    46e8:	16 2f       	mov	r17, r22
	bool patternNotSet = true;
	
	if(fox)
    46ea:	00 97       	sbiw	r24, 0x00	; 0
    46ec:	31 f0       	breq	.+12     	; 0x46fa <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    46ee:	fc 01       	movw	r30, r24
    46f0:	80 81       	ld	r24, Z
    46f2:	82 31       	cpi	r24, 0x12	; 18
    46f4:	11 f0       	breq	.+4      	; 0x46fa <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    46f6:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		}
	}

 	g_current_epoch = ds3231_get_epoch(null);
    46fa:	80 e0       	ldi	r24, 0x00	; 0
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    4702:	60 93 8e 47 	sts	0x478E, r22	; 0x80478e <g_current_epoch>
    4706:	70 93 8f 47 	sts	0x478F, r23	; 0x80478f <g_current_epoch+0x1>
    470a:	80 93 90 47 	sts	0x4790, r24	; 0x804790 <g_current_epoch+0x2>
    470e:	90 93 91 47 	sts	0x4791, r25	; 0x804791 <g_current_epoch+0x3>

	g_event_commenced = false;					/* get things running immediately */
    4712:	10 92 69 47 	sts	0x4769, r1	; 0x804769 <g_event_commenced>
	g_event_enabled = false;					/* get things running immediately */
    4716:	10 92 68 47 	sts	0x4768, r1	; 0x804768 <g_event_enabled>

	switch(g_fox)
    471a:	e0 91 1b 40 	lds	r30, 0x401B	; 0x80401b <g_fox>
    471e:	8e 2f       	mov	r24, r30
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	fc 01       	movw	r30, r24
    4724:	31 97       	sbiw	r30, 0x01	; 1
    4726:	e1 31       	cpi	r30, 0x11	; 17
    4728:	f1 05       	cpc	r31, r1
    472a:	08 f0       	brcs	.+2      	; 0x472e <_Z11setupForFoxP5Fox_t13EventAction_t+0x52>
    472c:	36 c1       	rjmp	.+620    	; 0x499a <_Z11setupForFoxP5Fox_t13EventAction_t+0x2be>
    472e:	ec 58       	subi	r30, 0x8C	; 140
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	0c 94 03 4d 	jmp	0x9a06	; 0x9a06 <__tablejump2__>
	{
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
    4736:	e2 e3       	ldi	r30, 0x32	; 50
    4738:	f7 e4       	ldi	r31, 0x47	; 71
    473a:	8d e4       	ldi	r24, 0x4D	; 77
    473c:	9f e4       	ldi	r25, 0x4F	; 79
    473e:	80 83       	st	Z, r24
    4740:	91 83       	std	Z+1, r25	; 0x01
    4742:	85 e4       	ldi	r24, 0x45	; 69
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	82 83       	std	Z+2, r24	; 0x02
    4748:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    474a:	80 e0       	ldi	r24, 0x00	; 0
    474c:	01 c0       	rjmp	.+2      	; 0x4750 <_Z11setupForFoxP5Fox_t13EventAction_t+0x74>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    474e:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_2:
		{
			if(patternNotSet)
    4750:	88 23       	and	r24, r24
    4752:	69 f0       	breq	.+26     	; 0x476e <_Z11setupForFoxP5Fox_t13EventAction_t+0x92>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
    4754:	e2 e3       	ldi	r30, 0x32	; 50
    4756:	f7 e4       	ldi	r31, 0x47	; 71
    4758:	8d e4       	ldi	r24, 0x4D	; 77
    475a:	9f e4       	ldi	r25, 0x4F	; 79
    475c:	80 83       	st	Z, r24
    475e:	91 83       	std	Z+1, r25	; 0x01
    4760:	89 e4       	ldi	r24, 0x49	; 73
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	82 83       	std	Z+2, r24	; 0x02
    4766:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4768:	80 e0       	ldi	r24, 0x00	; 0
    476a:	01 c0       	rjmp	.+2      	; 0x476e <_Z11setupForFoxP5Fox_t13EventAction_t+0x92>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    476c:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_3:
		{
			if(patternNotSet)
    476e:	88 23       	and	r24, r24
    4770:	69 f0       	breq	.+26     	; 0x478c <_Z11setupForFoxP5Fox_t13EventAction_t+0xb0>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
    4772:	e2 e3       	ldi	r30, 0x32	; 50
    4774:	f7 e4       	ldi	r31, 0x47	; 71
    4776:	8d e4       	ldi	r24, 0x4D	; 77
    4778:	9f e4       	ldi	r25, 0x4F	; 79
    477a:	80 83       	st	Z, r24
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	83 e5       	ldi	r24, 0x53	; 83
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	82 83       	std	Z+2, r24	; 0x02
    4784:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	01 c0       	rjmp	.+2      	; 0x478c <_Z11setupForFoxP5Fox_t13EventAction_t+0xb0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    478a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_4:
		{
			if(patternNotSet)
    478c:	88 23       	and	r24, r24
    478e:	69 f0       	breq	.+26     	; 0x47aa <_Z11setupForFoxP5Fox_t13EventAction_t+0xce>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
    4790:	e2 e3       	ldi	r30, 0x32	; 50
    4792:	f7 e4       	ldi	r31, 0x47	; 71
    4794:	8d e4       	ldi	r24, 0x4D	; 77
    4796:	9f e4       	ldi	r25, 0x4F	; 79
    4798:	80 83       	st	Z, r24
    479a:	91 83       	std	Z+1, r25	; 0x01
    479c:	88 e4       	ldi	r24, 0x48	; 72
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	82 83       	std	Z+2, r24	; 0x02
    47a2:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	01 c0       	rjmp	.+2      	; 0x47aa <_Z11setupForFoxP5Fox_t13EventAction_t+0xce>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    47a8:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case FOX_5:
		{
			/* Set the Morse code pattern and speed */
			if(patternNotSet)
    47aa:	88 23       	and	r24, r24
    47ac:	51 f0       	breq	.+20     	; 0x47c2 <_Z11setupForFoxP5Fox_t13EventAction_t+0xe6>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO5");
    47ae:	e2 e3       	ldi	r30, 0x32	; 50
    47b0:	f7 e4       	ldi	r31, 0x47	; 71
    47b2:	8d e4       	ldi	r24, 0x4D	; 77
    47b4:	9f e4       	ldi	r25, 0x4F	; 79
    47b6:	80 83       	st	Z, r24
    47b8:	91 83       	std	Z+1, r25	; 0x01
    47ba:	85 e3       	ldi	r24, 0x35	; 53
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	82 83       	std	Z+2, r24	; 0x02
    47c0:	93 83       	std	Z+3, r25	; 0x03
			}
			
			bool repeat = true;
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    47c6:	40 e0       	ldi	r20, 0x00	; 0
    47c8:	50 e0       	ldi	r21, 0x00	; 0
    47ca:	be 01       	movw	r22, r28
    47cc:	6f 5f       	subi	r22, 0xFF	; 255
    47ce:	7f 4f       	sbci	r23, 0xFF	; 255
    47d0:	82 e3       	ldi	r24, 0x32	; 50
    47d2:	97 e4       	ldi	r25, 0x47	; 71
    47d4:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    47d8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    47dc:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    47e0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    47e4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 60;			/* wait 10 minutes send the ID */
    47e8:	8c e3       	ldi	r24, 0x3C	; 60
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    47f0:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    47f4:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    47f8:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 240;                    /* off period is very short */
    47fc:	80 ef       	ldi	r24, 0xF0	; 240
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4804:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4808:	f8 c0       	rjmp	.+496    	; 0x49fa <_Z11setupForFoxP5Fox_t13EventAction_t+0x31e>

		case SPRINT_S1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "ME");
    480a:	e2 e3       	ldi	r30, 0x32	; 50
    480c:	f7 e4       	ldi	r31, 0x47	; 71
    480e:	8d e4       	ldi	r24, 0x4D	; 77
    4810:	95 e4       	ldi	r25, 0x45	; 69
    4812:	80 83       	st	Z, r24
    4814:	91 83       	std	Z+1, r25	; 0x01
    4816:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4818:	80 e0       	ldi	r24, 0x00	; 0
    481a:	01 c0       	rjmp	.+2      	; 0x481e <_Z11setupForFoxP5Fox_t13EventAction_t+0x142>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    481c:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S2:
		{
			if(patternNotSet)
    481e:	88 23       	and	r24, r24
    4820:	51 f0       	breq	.+20     	; 0x4836 <_Z11setupForFoxP5Fox_t13EventAction_t+0x15a>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MI");
    4822:	e2 e3       	ldi	r30, 0x32	; 50
    4824:	f7 e4       	ldi	r31, 0x47	; 71
    4826:	8d e4       	ldi	r24, 0x4D	; 77
    4828:	99 e4       	ldi	r25, 0x49	; 73
    482a:	80 83       	st	Z, r24
    482c:	91 83       	std	Z+1, r25	; 0x01
    482e:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4830:	80 e0       	ldi	r24, 0x00	; 0
    4832:	01 c0       	rjmp	.+2      	; 0x4836 <_Z11setupForFoxP5Fox_t13EventAction_t+0x15a>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4834:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S3:
		{
			if(patternNotSet)
    4836:	88 23       	and	r24, r24
    4838:	51 f0       	breq	.+20     	; 0x484e <_Z11setupForFoxP5Fox_t13EventAction_t+0x172>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MS");
    483a:	e2 e3       	ldi	r30, 0x32	; 50
    483c:	f7 e4       	ldi	r31, 0x47	; 71
    483e:	8d e4       	ldi	r24, 0x4D	; 77
    4840:	93 e5       	ldi	r25, 0x53	; 83
    4842:	80 83       	st	Z, r24
    4844:	91 83       	std	Z+1, r25	; 0x01
    4846:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4848:	80 e0       	ldi	r24, 0x00	; 0
    484a:	01 c0       	rjmp	.+2      	; 0x484e <_Z11setupForFoxP5Fox_t13EventAction_t+0x172>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    484c:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S4:
		{
			if(patternNotSet)
    484e:	88 23       	and	r24, r24
    4850:	51 f0       	breq	.+20     	; 0x4866 <_Z11setupForFoxP5Fox_t13EventAction_t+0x18a>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MH");
    4852:	e2 e3       	ldi	r30, 0x32	; 50
    4854:	f7 e4       	ldi	r31, 0x47	; 71
    4856:	8d e4       	ldi	r24, 0x4D	; 77
    4858:	98 e4       	ldi	r25, 0x48	; 72
    485a:	80 83       	st	Z, r24
    485c:	91 83       	std	Z+1, r25	; 0x01
    485e:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4860:	80 e0       	ldi	r24, 0x00	; 0
    4862:	01 c0       	rjmp	.+2      	; 0x4866 <_Z11setupForFoxP5Fox_t13EventAction_t+0x18a>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4864:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case SPRINT_S5:
		{
			{
				if(patternNotSet)
    4866:	88 23       	and	r24, r24
    4868:	39 f0       	breq	.+14     	; 0x4878 <_Z11setupForFoxP5Fox_t13EventAction_t+0x19c>
				{
					sprintf(g_messages_text[PATTERN_TEXT], "M5");
    486a:	e2 e3       	ldi	r30, 0x32	; 50
    486c:	f7 e4       	ldi	r31, 0x47	; 71
    486e:	8d e4       	ldi	r24, 0x4D	; 77
    4870:	95 e3       	ldi	r25, 0x35	; 53
    4872:	80 83       	st	Z, r24
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	12 82       	std	Z+2, r1	; 0x02
				}
			}
			
			bool repeat = true;
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    487c:	40 e0       	ldi	r20, 0x00	; 0
    487e:	50 e0       	ldi	r21, 0x00	; 0
    4880:	be 01       	movw	r22, r28
    4882:	6f 5f       	subi	r22, 0xFF	; 255
    4884:	7f 4f       	sbci	r23, 0xFF	; 255
    4886:	82 e3       	ldi	r24, 0x32	; 50
    4888:	97 e4       	ldi	r25, 0x47	; 71
    488a:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    488e:	88 e0       	ldi	r24, 0x08	; 8
    4890:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4894:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4898:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    489c:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    48a0:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    48a4:	88 e5       	ldi	r24, 0x58	; 88
    48a6:	92 e0       	ldi	r25, 0x02	; 2
    48a8:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    48ac:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    48b0:	8c e0       	ldi	r24, 0x0C	; 12
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    48b8:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    48bc:	80 e3       	ldi	r24, 0x30	; 48
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    48c4:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    48c8:	98 c0       	rjmp	.+304    	; 0x49fa <_Z11setupForFoxP5Fox_t13EventAction_t+0x31e>

		case SPRINT_F1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OE");
    48ca:	e2 e3       	ldi	r30, 0x32	; 50
    48cc:	f7 e4       	ldi	r31, 0x47	; 71
    48ce:	8f e4       	ldi	r24, 0x4F	; 79
    48d0:	95 e4       	ldi	r25, 0x45	; 69
    48d2:	80 83       	st	Z, r24
    48d4:	91 83       	std	Z+1, r25	; 0x01
    48d6:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	01 c0       	rjmp	.+2      	; 0x48de <_Z11setupForFoxP5Fox_t13EventAction_t+0x202>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    48dc:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F2:
		{
			if(patternNotSet)
    48de:	88 23       	and	r24, r24
    48e0:	51 f0       	breq	.+20     	; 0x48f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x21a>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OI");
    48e2:	e2 e3       	ldi	r30, 0x32	; 50
    48e4:	f7 e4       	ldi	r31, 0x47	; 71
    48e6:	8f e4       	ldi	r24, 0x4F	; 79
    48e8:	99 e4       	ldi	r25, 0x49	; 73
    48ea:	80 83       	st	Z, r24
    48ec:	91 83       	std	Z+1, r25	; 0x01
    48ee:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	01 c0       	rjmp	.+2      	; 0x48f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x21a>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    48f4:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F3:
		{
			if(patternNotSet)
    48f6:	88 23       	and	r24, r24
    48f8:	51 f0       	breq	.+20     	; 0x490e <_Z11setupForFoxP5Fox_t13EventAction_t+0x232>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OS");
    48fa:	e2 e3       	ldi	r30, 0x32	; 50
    48fc:	f7 e4       	ldi	r31, 0x47	; 71
    48fe:	8f e4       	ldi	r24, 0x4F	; 79
    4900:	93 e5       	ldi	r25, 0x53	; 83
    4902:	80 83       	st	Z, r24
    4904:	91 83       	std	Z+1, r25	; 0x01
    4906:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4908:	80 e0       	ldi	r24, 0x00	; 0
    490a:	01 c0       	rjmp	.+2      	; 0x490e <_Z11setupForFoxP5Fox_t13EventAction_t+0x232>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    490c:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F4:
		{
			if(patternNotSet)
    490e:	88 23       	and	r24, r24
    4910:	51 f0       	breq	.+20     	; 0x4926 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24a>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OH");
    4912:	e2 e3       	ldi	r30, 0x32	; 50
    4914:	f7 e4       	ldi	r31, 0x47	; 71
    4916:	8f e4       	ldi	r24, 0x4F	; 79
    4918:	98 e4       	ldi	r25, 0x48	; 72
    491a:	80 83       	st	Z, r24
    491c:	91 83       	std	Z+1, r25	; 0x01
    491e:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	01 c0       	rjmp	.+2      	; 0x4926 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24a>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4924:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F5:
		{
			if(patternNotSet)
    4926:	88 23       	and	r24, r24
    4928:	39 f0       	breq	.+14     	; 0x4938 <_Z11setupForFoxP5Fox_t13EventAction_t+0x25c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "O5");
    492a:	e2 e3       	ldi	r30, 0x32	; 50
    492c:	f7 e4       	ldi	r31, 0x47	; 71
    492e:	8f e4       	ldi	r24, 0x4F	; 79
    4930:	95 e3       	ldi	r25, 0x35	; 53
    4932:	80 83       	st	Z, r24
    4934:	91 83       	std	Z+1, r25	; 0x01
    4936:	12 82       	std	Z+2, r1	; 0x02
			}
			
			bool repeat = true;
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    493c:	40 e0       	ldi	r20, 0x00	; 0
    493e:	50 e0       	ldi	r21, 0x00	; 0
    4940:	be 01       	movw	r22, r28
    4942:	6f 5f       	subi	r22, 0xFF	; 255
    4944:	7f 4f       	sbci	r23, 0xFF	; 255
    4946:	82 e3       	ldi	r24, 0x32	; 50
    4948:	97 e4       	ldi	r25, 0x47	; 71
    494a:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 15;
    494e:	8f e0       	ldi	r24, 0x0F	; 15
    4950:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4954:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4958:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    495c:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4960:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    4964:	88 e5       	ldi	r24, 0x58	; 88
    4966:	92 e0       	ldi	r25, 0x02	; 2
    4968:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    496c:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    4970:	8c e0       	ldi	r24, 0x0C	; 12
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4978:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    497c:	80 e3       	ldi	r24, 0x30	; 48
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4984:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4988:	38 c0       	rjmp	.+112    	; 0x49fa <_Z11setupForFoxP5Fox_t13EventAction_t+0x31e>
#endif // SUPPORT_TEMP_AND_VOLTAGE_REPORTING


		case SPECTATOR:
		{
			sprintf(g_messages_text[PATTERN_TEXT], "S");
    498a:	83 e5       	ldi	r24, 0x53	; 83
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	80 93 32 47 	sts	0x4732, r24	; 0x804732 <g_messages_text>
    4992:	90 93 33 47 	sts	0x4733, r25	; 0x804733 <g_messages_text+0x1>
			patternNotSet = false;
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	01 c0       	rjmp	.+2      	; 0x499c <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    499a:	81 e0       	ldi	r24, 0x01	; 1
			patternNotSet = false;
		}
		case BEACON:
		default:
		{
			if(patternNotSet)
    499c:	88 23       	and	r24, r24
    499e:	39 f0       	breq	.+14     	; 0x49ae <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d2>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO");
    49a0:	e2 e3       	ldi	r30, 0x32	; 50
    49a2:	f7 e4       	ldi	r31, 0x47	; 71
    49a4:	8d e4       	ldi	r24, 0x4D	; 77
    49a6:	9f e4       	ldi	r25, 0x4F	; 79
    49a8:	80 83       	st	Z, r24
    49aa:	91 83       	std	Z+1, r25	; 0x01
    49ac:	12 82       	std	Z+2, r1	; 0x02
			}
			
			bool repeat = true;
    49ae:	81 e0       	ldi	r24, 0x01	; 1
    49b0:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    49b2:	40 e0       	ldi	r20, 0x00	; 0
    49b4:	50 e0       	ldi	r21, 0x00	; 0
    49b6:	be 01       	movw	r22, r28
    49b8:	6f 5f       	subi	r22, 0xFF	; 255
    49ba:	7f 4f       	sbci	r23, 0xFF	; 255
    49bc:	82 e3       	ldi	r24, 0x32	; 50
    49be:	97 e4       	ldi	r25, 0x47	; 71
    49c0:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    49c4:	88 e0       	ldi	r24, 0x08	; 8
    49c6:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    49ca:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    49ce:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    49d2:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    49d6:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    49da:	88 e5       	ldi	r24, 0x58	; 88
    49dc:	92 e0       	ldi	r25, 0x02	; 2
    49de:	80 93 2c 47 	sts	0x472C, r24	; 0x80472c <_ZL26g_sendID_seconds_countdown>
    49e2:	90 93 2d 47 	sts	0x472D, r25	; 0x80472d <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    49e6:	8c e3       	ldi	r24, 0x3C	; 60
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    49ee:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 0;						/* off period is very short */
    49f2:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    49f6:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
	}

	if(action == START_NOTHING)
    49fa:	11 11       	cpse	r17, r1
    49fc:	13 c0       	rjmp	.+38     	; 0x4a24 <_Z11setupForFoxP5Fox_t13EventAction_t+0x348>
	{
		g_event_commenced = false;                   /* get things running immediately */
    49fe:	10 92 69 47 	sts	0x4769, r1	; 0x804769 <g_event_commenced>
		g_event_enabled = false;                     /* get things running immediately */
    4a02:	10 92 68 47 	sts	0x4768, r1	; 0x804768 <g_event_enabled>

 		g_use_rtc_for_startstop = false;
    4a06:	10 92 92 47 	sts	0x4792, r1	; 0x804792 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    4a0a:	81 e0       	ldi	r24, 0x01	; 1
    4a0c:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
		keyTransmitter(OFF);
    4a10:	80 e0       	ldi	r24, 0x00	; 0
    4a12:	0e 94 5e 45 	call	0x8abc	; 0x8abc <_Z14keyTransmitterb>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    4a16:	89 b1       	in	r24, 0x09	; 9
    4a18:	80 64       	ori	r24, 0x40	; 64
    4a1a:	89 b9       	out	0x09, r24	; 9
		LED_set_level(OFF);
		powerToTransmitter(OFF);
    4a1c:	80 e0       	ldi	r24, 0x00	; 0
    4a1e:	0e 94 5a 45 	call	0x8ab4	; 0x8ab4 <_Z18powerToTransmitterb>
    4a22:	9f c0       	rjmp	.+318    	; 0x4b62 <_Z11setupForFoxP5Fox_t13EventAction_t+0x486>
	}
	else if(action == START_EVENT_NOW)
    4a24:	11 30       	cpi	r17, 0x01	; 1
    4a26:	09 f0       	breq	.+2      	; 0x4a2a <_Z11setupForFoxP5Fox_t13EventAction_t+0x34e>
    4a28:	62 c0       	rjmp	.+196    	; 0x4aee <_Z11setupForFoxP5Fox_t13EventAction_t+0x412>
//  		g_transmissions_disabled = false;
// 		g_event_commenced = true;					/* get things running immediately */
// 		g_event_enabled = true;						/* get things running immediately */

		EC result;
		g_current_epoch = ds3231_get_epoch(&result);
    4a2a:	ce 01       	movw	r24, r28
    4a2c:	02 96       	adiw	r24, 0x02	; 2
    4a2e:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    4a32:	60 93 8e 47 	sts	0x478E, r22	; 0x80478e <g_current_epoch>
    4a36:	70 93 8f 47 	sts	0x478F, r23	; 0x80478f <g_current_epoch+0x1>
    4a3a:	80 93 90 47 	sts	0x4790, r24	; 0x804790 <g_current_epoch+0x2>
    4a3e:	90 93 91 47 	sts	0x4791, r25	; 0x804791 <g_current_epoch+0x3>
		
		if(result == ERROR_CODE_NO_ERROR)
    4a42:	2a 81       	ldd	r18, Y+2	; 0x02
    4a44:	21 11       	cpse	r18, r1
    4a46:	31 c0       	rjmp	.+98     	; 0x4aaa <_Z11setupForFoxP5Fox_t13EventAction_t+0x3ce>
		{
			g_event_start_time = g_current_epoch;
    4a48:	60 93 60 47 	sts	0x4760, r22	; 0x804760 <g_event_start_time>
    4a4c:	70 93 61 47 	sts	0x4761, r23	; 0x804761 <g_event_start_time+0x1>
    4a50:	80 93 62 47 	sts	0x4762, r24	; 0x804762 <g_event_start_time+0x2>
    4a54:	90 93 63 47 	sts	0x4763, r25	; 0x804763 <g_event_start_time+0x3>
			if(g_event_start_time > g_event_finish_time)
    4a58:	40 91 60 47 	lds	r20, 0x4760	; 0x804760 <g_event_start_time>
    4a5c:	50 91 61 47 	lds	r21, 0x4761	; 0x804761 <g_event_start_time+0x1>
    4a60:	60 91 62 47 	lds	r22, 0x4762	; 0x804762 <g_event_start_time+0x2>
    4a64:	70 91 63 47 	lds	r23, 0x4763	; 0x804763 <g_event_start_time+0x3>
    4a68:	80 91 64 47 	lds	r24, 0x4764	; 0x804764 <g_event_finish_time>
    4a6c:	90 91 65 47 	lds	r25, 0x4765	; 0x804765 <g_event_finish_time+0x1>
    4a70:	a0 91 66 47 	lds	r26, 0x4766	; 0x804766 <g_event_finish_time+0x2>
    4a74:	b0 91 67 47 	lds	r27, 0x4767	; 0x804767 <g_event_finish_time+0x3>
    4a78:	84 17       	cp	r24, r20
    4a7a:	95 07       	cpc	r25, r21
    4a7c:	a6 07       	cpc	r26, r22
    4a7e:	b7 07       	cpc	r27, r23
    4a80:	a0 f4       	brcc	.+40     	; 0x4aaa <_Z11setupForFoxP5Fox_t13EventAction_t+0x3ce>
			{
				g_event_finish_time = g_event_start_time + DAY;
    4a82:	80 91 60 47 	lds	r24, 0x4760	; 0x804760 <g_event_start_time>
    4a86:	90 91 61 47 	lds	r25, 0x4761	; 0x804761 <g_event_start_time+0x1>
    4a8a:	a0 91 62 47 	lds	r26, 0x4762	; 0x804762 <g_event_start_time+0x2>
    4a8e:	b0 91 63 47 	lds	r27, 0x4763	; 0x804763 <g_event_start_time+0x3>
    4a92:	80 58       	subi	r24, 0x80	; 128
    4a94:	9e 4a       	sbci	r25, 0xAE	; 174
    4a96:	ae 4f       	sbci	r26, 0xFE	; 254
    4a98:	bf 4f       	sbci	r27, 0xFF	; 255
    4a9a:	80 93 64 47 	sts	0x4764, r24	; 0x804764 <g_event_finish_time>
    4a9e:	90 93 65 47 	sts	0x4765, r25	; 0x804765 <g_event_finish_time+0x1>
    4aa2:	a0 93 66 47 	sts	0x4766, r26	; 0x804766 <g_event_finish_time+0x2>
    4aa6:	b0 93 67 47 	sts	0x4767, r27	; 0x804767 <g_event_finish_time+0x3>
			}
		}
		
		SC status = STATUS_CODE_IDLE;
    4aaa:	19 82       	std	Y+1, r1	; 0x01
		result = launchEvent(&status);
    4aac:	ce 01       	movw	r24, r28
    4aae:	01 96       	adiw	r24, 0x01	; 1
    4ab0:	0e 94 55 20 	call	0x40aa	; 0x40aa <_Z11launchEventP2SC>
    4ab4:	8a 83       	std	Y+2, r24	; 0x02
		
		if(g_go_to_sleep && g_sleepType)
    4ab6:	90 91 6c 47 	lds	r25, 0x476C	; 0x80476c <_ZL13g_go_to_sleep>
    4aba:	99 23       	and	r25, r25
    4abc:	31 f0       	breq	.+12     	; 0x4aca <_Z11setupForFoxP5Fox_t13EventAction_t+0x3ee>
    4abe:	20 91 31 47 	lds	r18, 0x4731	; 0x804731 <_ZL11g_sleepType>
    4ac2:	21 11       	cpse	r18, r1
    4ac4:	03 c0       	rjmp	.+6      	; 0x4acc <_Z11setupForFoxP5Fox_t13EventAction_t+0x3f0>
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	01 c0       	rjmp	.+2      	; 0x4acc <_Z11setupForFoxP5Fox_t13EventAction_t+0x3f0>
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	99 23       	and	r25, r25
    4ace:	29 f0       	breq	.+10     	; 0x4ada <_Z11setupForFoxP5Fox_t13EventAction_t+0x3fe>
		{
			g_sleepType = SLEEP_AFTER_WIFI_GOES_OFF;
    4ad0:	93 e0       	ldi	r25, 0x03	; 3
    4ad2:	90 93 31 47 	sts	0x4731, r25	; 0x804731 <_ZL11g_sleepType>
			g_go_to_sleep = false;
    4ad6:	10 92 6c 47 	sts	0x476C, r1	; 0x80476c <_ZL13g_go_to_sleep>
		}

		g_WiFi_shutdown_seconds = 60;
    4ada:	9c e3       	ldi	r25, 0x3C	; 60
    4adc:	90 93 09 40 	sts	0x4009, r25	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>

		if(!result)
    4ae0:	81 11       	cpse	r24, r1
    4ae2:	3f c0       	rjmp	.+126    	; 0x4b62 <_Z11setupForFoxP5Fox_t13EventAction_t+0x486>
		{
			g_ee_mgr.saveAllEEPROM();
    4ae4:	8c e7       	ldi	r24, 0x7C	; 124
    4ae6:	97 e4       	ldi	r25, 0x47	; 71
    4ae8:	0e 94 a6 31 	call	0x634c	; 0x634c <_ZN13EepromManager13saveAllEEPROMEv>
    4aec:	3a c0       	rjmp	.+116    	; 0x4b62 <_Z11setupForFoxP5Fox_t13EventAction_t+0x486>
		}
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    4aee:	12 30       	cpi	r17, 0x02	; 2
    4af0:	79 f5       	brne	.+94     	; 0x4b50 <_Z11setupForFoxP5Fox_t13EventAction_t+0x474>
	{
		bool repeat = true;
    4af2:	11 e0       	ldi	r17, 0x01	; 1
    4af4:	19 83       	std	Y+1, r17	; 0x01
		makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4af6:	40 e0       	ldi	r20, 0x00	; 0
    4af8:	50 e0       	ldi	r21, 0x00	; 0
    4afa:	be 01       	movw	r22, r28
    4afc:	6f 5f       	subi	r22, 0xFF	; 255
    4afe:	7f 4f       	sbci	r23, 0xFF	; 255
    4b00:	82 e3       	ldi	r24, 0x32	; 50
    4b02:	97 e4       	ldi	r25, 0x47	; 71
    4b04:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z9makeMorsePcPbS0_>
		g_code_throttle = throttleValue(g_pattern_codespeed);
    4b08:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4b0c:	0e 94 37 20 	call	0x406e	; 0x406e <_Z13throttleValueh>
    4b10:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4b14:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

// 		g_event_start_time = 1;                     /* have it start a long time ago */
// 		g_event_finish_time = MAX_TIME;             /* run for a long long time */
		g_on_the_air = g_on_air_seconds;			/* start out transmitting */
    4b18:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    4b1c:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4b20:	09 2e       	mov	r0, r25
    4b22:	00 0c       	add	r0, r0
    4b24:	aa 0b       	sbc	r26, r26
    4b26:	bb 0b       	sbc	r27, r27
    4b28:	80 93 28 47 	sts	0x4728, r24	; 0x804728 <_ZL12g_on_the_air>
    4b2c:	90 93 29 47 	sts	0x4729, r25	; 0x804729 <_ZL12g_on_the_air+0x1>
    4b30:	a0 93 2a 47 	sts	0x472A, r26	; 0x80472a <_ZL12g_on_the_air+0x2>
    4b34:	b0 93 2b 47 	sts	0x472B, r27	; 0x80472b <_ZL12g_on_the_air+0x3>
		g_event_commenced = true;                   /* get things running immediately */
    4b38:	10 93 69 47 	sts	0x4769, r17	; 0x804769 <g_event_commenced>
		g_event_enabled = true;                     /* get things running immediately */
    4b3c:	10 93 68 47 	sts	0x4768, r17	; 0x804768 <g_event_enabled>
		g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    4b40:	8d ef       	ldi	r24, 0xFD	; 253
    4b42:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <_ZL18g_last_status_code>
		
// 		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
 		g_use_rtc_for_startstop = false;
    4b46:	10 92 92 47 	sts	0x4792, r1	; 0x804792 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = false;
    4b4a:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    4b4e:	09 c0       	rjmp	.+18     	; 0x4b62 <_Z11setupForFoxP5Fox_t13EventAction_t+0x486>
	}
	else         /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		SC sc;
 //		EC ec = 
		activateEventUsingCurrentSettings(&sc);
    4b50:	ce 01       	movw	r24, r28
    4b52:	01 96       	adiw	r24, 0x01	; 1
    4b54:	0e 94 80 20 	call	0x4100	; 0x4100 <_Z33activateEventUsingCurrentSettingsP2SC>
 
 		g_use_rtc_for_startstop = true;
    4b58:	81 e0       	ldi	r24, 0x01	; 1
    4b5a:	80 93 92 47 	sts	0x4792, r24	; 0x804792 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    4b5e:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
// 
// 	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
// 	g_sendAMmodulation = false;
// 	g_LED_enunciating = false;
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}
    4b62:	0f 90       	pop	r0
    4b64:	0f 90       	pop	r0
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	1f 91       	pop	r17
    4b6c:	08 95       	ret

00004b6e <_Z18validateTimeStringPcPma>:

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    4b6e:	4f 92       	push	r4
    4b70:	5f 92       	push	r5
    4b72:	6f 92       	push	r6
    4b74:	7f 92       	push	r7
    4b76:	af 92       	push	r10
    4b78:	bf 92       	push	r11
    4b7a:	cf 92       	push	r12
    4b7c:	df 92       	push	r13
    4b7e:	ef 92       	push	r14
    4b80:	ff 92       	push	r15
    4b82:	0f 93       	push	r16
    4b84:	1f 93       	push	r17
    4b86:	cf 93       	push	r28
    4b88:	df 93       	push	r29
    4b8a:	8c 01       	movw	r16, r24
    4b8c:	a4 2e       	mov	r10, r20
	time_t valid = 0;
	int len = strlen(str);
    4b8e:	fc 01       	movw	r30, r24
    4b90:	01 90       	ld	r0, Z+
    4b92:	00 20       	and	r0, r0
    4b94:	e9 f7       	brne	.-6      	; 0x4b90 <_Z18validateTimeStringPcPma+0x22>
    4b96:	31 97       	sbiw	r30, 0x01	; 1
    4b98:	ef 01       	movw	r28, r30
    4b9a:	c8 1b       	sub	r28, r24
    4b9c:	d9 0b       	sbc	r29, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    4b9e:	27 e4       	ldi	r18, 0x47	; 71
    4ba0:	6d 37       	cpi	r22, 0x7D	; 125
    4ba2:	72 07       	cpc	r23, r18
    4ba4:	e1 f4       	brne	.+56     	; 0x4bde <_Z18validateTimeStringPcPma+0x70>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4ba6:	c0 90 8e 47 	lds	r12, 0x478E	; 0x80478e <g_current_epoch>
    4baa:	d0 90 8f 47 	lds	r13, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4bae:	e0 90 90 47 	lds	r14, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4bb2:	f0 90 91 47 	lds	r15, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4bb6:	c1 14       	cp	r12, r1
    4bb8:	86 e6       	ldi	r24, 0x66	; 102
    4bba:	d8 06       	cpc	r13, r24
    4bbc:	8e ee       	ldi	r24, 0xEE	; 238
    4bbe:	e8 06       	cpc	r14, r24
    4bc0:	8f e5       	ldi	r24, 0x5F	; 95
    4bc2:	f8 06       	cpc	r15, r24
    4bc4:	50 f5       	brcc	.+84     	; 0x4c1a <_Z18validateTimeStringPcPma+0xac>
		validationType = 1;
    4bc6:	bb 24       	eor	r11, r11
    4bc8:	b3 94       	inc	r11
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4bca:	0f 2e       	mov	r0, r31
    4bcc:	c1 2c       	mov	r12, r1
    4bce:	f6 e6       	ldi	r31, 0x66	; 102
    4bd0:	df 2e       	mov	r13, r31
    4bd2:	fe ee       	ldi	r31, 0xEE	; 238
    4bd4:	ef 2e       	mov	r14, r31
    4bd6:	ff e5       	ldi	r31, 0x5F	; 95
    4bd8:	ff 2e       	mov	r15, r31
    4bda:	f0 2d       	mov	r31, r0
    4bdc:	2f c0       	rjmp	.+94     	; 0x4c3c <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
    4bde:	61 58       	subi	r22, 0x81	; 129
    4be0:	77 44       	sbci	r23, 0x47	; 71
    4be2:	f1 f4       	brne	.+60     	; 0x4c20 <_Z18validateTimeStringPcPma+0xb2>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    4be4:	c0 90 7d 47 	lds	r12, 0x477D	; 0x80477d <g_event_start_epoch>
    4be8:	d0 90 7e 47 	lds	r13, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    4bec:	e0 90 7f 47 	lds	r14, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    4bf0:	f0 90 80 47 	lds	r15, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    4bf4:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    4bf8:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4bfc:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4c00:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4c04:	c8 16       	cp	r12, r24
    4c06:	d9 06       	cpc	r13, r25
    4c08:	ea 06       	cpc	r14, r26
    4c0a:	fb 06       	cpc	r15, r27
    4c0c:	a0 f4       	brcc	.+40     	; 0x4c36 <_Z18validateTimeStringPcPma+0xc8>
    4c0e:	6c 01       	movw	r12, r24
    4c10:	7d 01       	movw	r14, r26
		validationType = 2;
    4c12:	68 94       	set
    4c14:	bb 24       	eor	r11, r11
    4c16:	b1 f8       	bld	r11, 1
    4c18:	11 c0       	rjmp	.+34     	; 0x4c3c <_Z18validateTimeStringPcPma+0xce>
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
    4c1a:	bb 24       	eor	r11, r11
    4c1c:	b3 94       	inc	r11
    4c1e:	0e c0       	rjmp	.+28     	; 0x4c3c <_Z18validateTimeStringPcPma+0xce>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    4c20:	b1 2c       	mov	r11, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    4c22:	0f 2e       	mov	r0, r31
    4c24:	c1 2c       	mov	r12, r1
    4c26:	f6 e6       	ldi	r31, 0x66	; 102
    4c28:	df 2e       	mov	r13, r31
    4c2a:	fe ee       	ldi	r31, 0xEE	; 238
    4c2c:	ef 2e       	mov	r14, r31
    4c2e:	ff e5       	ldi	r31, 0x5F	; 95
    4c30:	ff 2e       	mov	r15, r31
    4c32:	f0 2d       	mov	r31, r0
    4c34:	03 c0       	rjmp	.+6      	; 0x4c3c <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
    4c36:	68 94       	set
    4c38:	bb 24       	eor	r11, r11
    4c3a:	b1 f8       	bld	r11, 1
	}
	
	if(len == 10)
    4c3c:	ca 30       	cpi	r28, 0x0A	; 10
    4c3e:	d1 05       	cpc	r29, r1
    4c40:	39 f4       	brne	.+14     	; 0x4c50 <_Z18validateTimeStringPcPma+0xe2>
	{
		str[10] = '0';
    4c42:	80 e3       	ldi	r24, 0x30	; 48
    4c44:	f8 01       	movw	r30, r16
    4c46:	82 87       	std	Z+10, r24	; 0x0a
		str[11] = '0';
    4c48:	83 87       	std	Z+11, r24	; 0x0b
		str[12] = '\0';
    4c4a:	14 86       	std	Z+12, r1	; 0x0c
		len = 12;
    4c4c:	cc e0       	ldi	r28, 0x0C	; 12
    4c4e:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if((len == 12) && (only_digits(str)))
    4c50:	cc 30       	cpi	r28, 0x0C	; 12
    4c52:	d1 05       	cpc	r29, r1
    4c54:	21 f4       	brne	.+8      	; 0x4c5e <_Z18validateTimeStringPcPma+0xf0>
    4c56:	c8 01       	movw	r24, r16
    4c58:	0e 94 a9 47 	call	0x8f52	; 0x8f52 <_Z11only_digitsPc>
    4c5c:	01 c0       	rjmp	.+2      	; 0x4c60 <_Z18validateTimeStringPcPma+0xf2>
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	88 23       	and	r24, r24
    4c62:	09 f4       	brne	.+2      	; 0x4c66 <_Z18validateTimeStringPcPma+0xf8>
    4c64:	4b c0       	rjmp	.+150    	; 0x4cfc <_Z18validateTimeStringPcPma+0x18e>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    4c66:	b8 01       	movw	r22, r16
    4c68:	80 e0       	ldi	r24, 0x00	; 0
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <RTC_String2Epoch>
    4c70:	2b 01       	movw	r4, r22
    4c72:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    4c74:	aa 2d       	mov	r26, r10
    4c76:	aa 0c       	add	r10, r10
    4c78:	bb 0b       	sbc	r27, r27
    4c7a:	20 e1       	ldi	r18, 0x10	; 16
    4c7c:	3e e0       	ldi	r19, 0x0E	; 14
    4c7e:	0e 94 1b 4d 	call	0x9a36	; 0x9a36 <__usmulhisi3>
    4c82:	64 0d       	add	r22, r4
    4c84:	75 1d       	adc	r23, r5
    4c86:	86 1d       	adc	r24, r6
    4c88:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    4c8a:	c6 16       	cp	r12, r22
    4c8c:	d7 06       	cpc	r13, r23
    4c8e:	e8 06       	cpc	r14, r24
    4c90:	f9 06       	cpc	r15, r25
    4c92:	08 f4       	brcc	.+2      	; 0x4c96 <_Z18validateTimeStringPcPma+0x128>
    4c94:	40 c0       	rjmp	.+128    	; 0x4d16 <_Z18validateTimeStringPcPma+0x1a8>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    4c96:	f1 e0       	ldi	r31, 0x01	; 1
    4c98:	bf 12       	cpse	r11, r31
    4c9a:	08 c0       	rjmp	.+16     	; 0x4cac <_Z18validateTimeStringPcPma+0x13e>
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
    4c9c:	8b e1       	ldi	r24, 0x1B	; 27
    4c9e:	93 e4       	ldi	r25, 0x43	; 67
    4ca0:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4ca4:	60 e0       	ldi	r22, 0x00	; 0
    4ca6:	70 e0       	ldi	r23, 0x00	; 0
    4ca8:	cb 01       	movw	r24, r22
    4caa:	35 c0       	rjmp	.+106    	; 0x4d16 <_Z18validateTimeStringPcPma+0x1a8>
		{
			if(validationType == 1)         /* start time validation */
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
			}
			else if(validationType == 2)    /* finish time validation */
    4cac:	22 e0       	ldi	r18, 0x02	; 2
    4cae:	b2 12       	cpse	r11, r18
    4cb0:	1d c0       	rjmp	.+58     	; 0x4cec <_Z18validateTimeStringPcPma+0x17e>
			{
				if(ep < g_current_epoch)
    4cb2:	00 91 8e 47 	lds	r16, 0x478E	; 0x80478e <g_current_epoch>
    4cb6:	10 91 8f 47 	lds	r17, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4cba:	20 91 90 47 	lds	r18, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4cbe:	30 91 91 47 	lds	r19, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4cc2:	60 17       	cp	r22, r16
    4cc4:	71 07       	cpc	r23, r17
    4cc6:	82 07       	cpc	r24, r18
    4cc8:	93 07       	cpc	r25, r19
    4cca:	40 f4       	brcc	.+16     	; 0x4cdc <_Z18validateTimeStringPcPma+0x16e>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
    4ccc:	80 e3       	ldi	r24, 0x30	; 48
    4cce:	93 e4       	ldi	r25, 0x43	; 67
    4cd0:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4cd4:	60 e0       	ldi	r22, 0x00	; 0
    4cd6:	70 e0       	ldi	r23, 0x00	; 0
    4cd8:	cb 01       	movw	r24, r22
    4cda:	1d c0       	rjmp	.+58     	; 0x4d16 <_Z18validateTimeStringPcPma+0x1a8>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
				}
				else
				{
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
    4cdc:	86 e4       	ldi	r24, 0x46	; 70
    4cde:	93 e4       	ldi	r25, 0x43	; 67
    4ce0:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4ce4:	60 e0       	ldi	r22, 0x00	; 0
    4ce6:	70 e0       	ldi	r23, 0x00	; 0
    4ce8:	cb 01       	movw	r24, r22
    4cea:	15 c0       	rjmp	.+42     	; 0x4d16 <_Z18validateTimeStringPcPma+0x1a8>
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
				}
			}
			else    /* current time validation */
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
    4cec:	81 e6       	ldi	r24, 0x61	; 97
    4cee:	93 e4       	ldi	r25, 0x43	; 67
    4cf0:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4cf4:	60 e0       	ldi	r22, 0x00	; 0
    4cf6:	70 e0       	ldi	r23, 0x00	; 0
    4cf8:	cb 01       	movw	r24, r22
    4cfa:	0d c0       	rjmp	.+26     	; 0x4d16 <_Z18validateTimeStringPcPma+0x1a8>
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
			}
		}
	}
	else if(len)
    4cfc:	cd 2b       	or	r28, r29
    4cfe:	41 f0       	breq	.+16     	; 0x4d10 <_Z18validateTimeStringPcPma+0x1a2>
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
    4d00:	85 e7       	ldi	r24, 0x75	; 117
    4d02:	93 e4       	ldi	r25, 0x43	; 67
    4d04:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4d08:	60 e0       	ldi	r22, 0x00	; 0
    4d0a:	70 e0       	ldi	r23, 0x00	; 0
    4d0c:	cb 01       	movw	r24, r22
    4d0e:	03 c0       	rjmp	.+6      	; 0x4d16 <_Z18validateTimeStringPcPma+0x1a8>
    4d10:	60 e0       	ldi	r22, 0x00	; 0
    4d12:	70 e0       	ldi	r23, 0x00	; 0
    4d14:	cb 01       	movw	r24, r22
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
	}

	return(valid);
}
    4d16:	df 91       	pop	r29
    4d18:	cf 91       	pop	r28
    4d1a:	1f 91       	pop	r17
    4d1c:	0f 91       	pop	r16
    4d1e:	ff 90       	pop	r15
    4d20:	ef 90       	pop	r14
    4d22:	df 90       	pop	r13
    4d24:	cf 90       	pop	r12
    4d26:	bf 90       	pop	r11
    4d28:	af 90       	pop	r10
    4d2a:	7f 90       	pop	r7
    4d2c:	6f 90       	pop	r6
    4d2e:	5f 90       	pop	r5
    4d30:	4f 90       	pop	r4
    4d32:	08 95       	ret

00004d34 <_Z14reportTimeTillmmPKcS0_>:


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    4d34:	2f 92       	push	r2
    4d36:	3f 92       	push	r3
    4d38:	4f 92       	push	r4
    4d3a:	5f 92       	push	r5
    4d3c:	6f 92       	push	r6
    4d3e:	7f 92       	push	r7
    4d40:	8f 92       	push	r8
    4d42:	9f 92       	push	r9
    4d44:	af 92       	push	r10
    4d46:	bf 92       	push	r11
    4d48:	cf 92       	push	r12
    4d4a:	df 92       	push	r13
    4d4c:	ef 92       	push	r14
    4d4e:	ff 92       	push	r15
    4d50:	0f 93       	push	r16
    4d52:	1f 93       	push	r17
    4d54:	cf 93       	push	r28
    4d56:	df 93       	push	r29
    4d58:	cd b7       	in	r28, 0x3d	; 61
    4d5a:	de b7       	in	r29, 0x3e	; 62
    4d5c:	2c 97       	sbiw	r28, 0x0c	; 12
    4d5e:	cd bf       	out	0x3d, r28	; 61
    4d60:	de bf       	out	0x3e, r29	; 62
    4d62:	2b 01       	movw	r4, r22
    4d64:	3c 01       	movw	r6, r24
    4d66:	49 01       	movw	r8, r18
    4d68:	5a 01       	movw	r10, r20
	bool failure = false;

	if(from >= until)   /* Negative time */
    4d6a:	62 17       	cp	r22, r18
    4d6c:	73 07       	cpc	r23, r19
    4d6e:	84 07       	cpc	r24, r20
    4d70:	95 07       	cpc	r25, r21
    4d72:	48 f0       	brcs	.+18     	; 0x4d86 <_Z14reportTimeTillmmPKcS0_+0x52>
	{
		failure = true;
		if(failMsg)
    4d74:	e1 14       	cp	r14, r1
    4d76:	f1 04       	cpc	r15, r1
    4d78:	09 f4       	brne	.+2      	; 0x4d7c <_Z14reportTimeTillmmPKcS0_+0x48>
    4d7a:	fd c0       	rjmp	.+506    	; 0x4f76 <_Z14reportTimeTillmmPKcS0_+0x242>
		{
			sb_send_string((char*)failMsg);
    4d7c:	c7 01       	movw	r24, r14
    4d7e:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
{
	bool failure = false;

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	f9 c0       	rjmp	.+498    	; 0x4f78 <_Z14reportTimeTillmmPKcS0_+0x244>
			sb_send_string((char*)failMsg);
		}
	}
	else
	{
		if(prefix)
    4d86:	01 15       	cp	r16, r1
    4d88:	11 05       	cpc	r17, r1
    4d8a:	19 f0       	breq	.+6      	; 0x4d92 <_Z14reportTimeTillmmPKcS0_+0x5e>
		{
			sb_send_string((char*)prefix);
    4d8c:	c8 01       	movw	r24, r16
    4d8e:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
		}
		time_t dif = until - from;
    4d92:	75 01       	movw	r14, r10
    4d94:	64 01       	movw	r12, r8
    4d96:	c4 18       	sub	r12, r4
    4d98:	d5 08       	sbc	r13, r5
    4d9a:	e6 08       	sbc	r14, r6
    4d9c:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    4d9e:	c7 01       	movw	r24, r14
    4da0:	b6 01       	movw	r22, r12
    4da2:	20 e8       	ldi	r18, 0x80	; 128
    4da4:	33 e3       	ldi	r19, 0x33	; 51
    4da6:	41 ee       	ldi	r20, 0xE1	; 225
    4da8:	51 e0       	ldi	r21, 0x01	; 1
    4daa:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    4dae:	29 01       	movw	r4, r18
    4db0:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    4db2:	44 27       	eor	r20, r20
    4db4:	55 27       	eor	r21, r21
    4db6:	60 e8       	ldi	r22, 0x80	; 128
    4db8:	73 e3       	ldi	r23, 0x33	; 51
    4dba:	81 ee       	ldi	r24, 0xE1	; 225
    4dbc:	91 e0       	ldi	r25, 0x01	; 1
    4dbe:	0e 94 8a 4c 	call	0x9914	; 0x9914 <__mulsi3>
    4dc2:	c6 1a       	sub	r12, r22
    4dc4:	d7 0a       	sbc	r13, r23
    4dc6:	e8 0a       	sbc	r14, r24
    4dc8:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    4dca:	c7 01       	movw	r24, r14
    4dcc:	b6 01       	movw	r22, r12
    4dce:	20 e8       	ldi	r18, 0x80	; 128
    4dd0:	31 e5       	ldi	r19, 0x51	; 81
    4dd2:	41 e0       	ldi	r20, 0x01	; 1
    4dd4:	50 e0       	ldi	r21, 0x00	; 0
    4dd6:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    4dda:	49 01       	movw	r8, r18
    4ddc:	5a 01       	movw	r10, r20
    4dde:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    4de0:	44 27       	eor	r20, r20
    4de2:	55 27       	eor	r21, r21
    4de4:	60 e8       	ldi	r22, 0x80	; 128
    4de6:	71 e5       	ldi	r23, 0x51	; 81
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	0e 94 8a 4c 	call	0x9914	; 0x9914 <__mulsi3>
    4df0:	c6 1a       	sub	r12, r22
    4df2:	d7 0a       	sbc	r13, r23
    4df4:	e8 0a       	sbc	r14, r24
    4df6:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    4df8:	c7 01       	movw	r24, r14
    4dfa:	b6 01       	movw	r22, r12
    4dfc:	20 e1       	ldi	r18, 0x10	; 16
    4dfe:	3e e0       	ldi	r19, 0x0E	; 14
    4e00:	40 e0       	ldi	r20, 0x00	; 0
    4e02:	50 e0       	ldi	r21, 0x00	; 0
    4e04:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    4e08:	29 83       	std	Y+1, r18	; 0x01
    4e0a:	3a 83       	std	Y+2, r19	; 0x02
    4e0c:	4b 83       	std	Y+3, r20	; 0x03
    4e0e:	5c 83       	std	Y+4, r21	; 0x04
    4e10:	29 81       	ldd	r18, Y+1	; 0x01
    4e12:	3a 81       	ldd	r19, Y+2	; 0x02
    4e14:	29 87       	std	Y+9, r18	; 0x09
    4e16:	3a 87       	std	Y+10, r19	; 0x0a
		hold -= (hours * HOUR);
    4e18:	29 81       	ldd	r18, Y+1	; 0x01
    4e1a:	3a 81       	ldd	r19, Y+2	; 0x02
    4e1c:	4b 81       	ldd	r20, Y+3	; 0x03
    4e1e:	5c 81       	ldd	r21, Y+4	; 0x04
    4e20:	44 27       	eor	r20, r20
    4e22:	55 27       	eor	r21, r21
    4e24:	a0 e1       	ldi	r26, 0x10	; 16
    4e26:	be e0       	ldi	r27, 0x0E	; 14
    4e28:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <__muluhisi3>
    4e2c:	c6 1a       	sub	r12, r22
    4e2e:	d7 0a       	sbc	r13, r23
    4e30:	e8 0a       	sbc	r14, r24
    4e32:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    4e34:	c7 01       	movw	r24, r14
    4e36:	b6 01       	movw	r22, r12
    4e38:	2c e3       	ldi	r18, 0x3C	; 60
    4e3a:	30 e0       	ldi	r19, 0x00	; 0
    4e3c:	40 e0       	ldi	r20, 0x00	; 0
    4e3e:	50 e0       	ldi	r21, 0x00	; 0
    4e40:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    4e44:	2d 83       	std	Y+5, r18	; 0x05
    4e46:	3e 83       	std	Y+6, r19	; 0x06
    4e48:	4f 83       	std	Y+7, r20	; 0x07
    4e4a:	58 87       	std	Y+8, r21	; 0x08
    4e4c:	0d 81       	ldd	r16, Y+5	; 0x05
    4e4e:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    4e50:	2c e3       	ldi	r18, 0x3C	; 60
    4e52:	20 9f       	mul	r18, r16
    4e54:	c0 01       	movw	r24, r0
    4e56:	21 9f       	mul	r18, r17
    4e58:	90 0d       	add	r25, r0
    4e5a:	11 24       	eor	r1, r1
    4e5c:	a6 01       	movw	r20, r12
    4e5e:	48 1b       	sub	r20, r24
    4e60:	59 0b       	sbc	r21, r25
    4e62:	4b 87       	std	Y+11, r20	; 0x0b
    4e64:	5c 87       	std	Y+12, r21	; 0x0c

		g_tempStr[0] = '\0';
    4e66:	10 92 f1 46 	sts	0x46F1, r1	; 0x8046f1 <_ZL9g_tempStr>

		if(years)
    4e6a:	41 14       	cp	r4, r1
    4e6c:	51 04       	cpc	r5, r1
    4e6e:	b1 f0       	breq	.+44     	; 0x4e9c <_Z14reportTimeTillmmPKcS0_+0x168>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    4e70:	5f 92       	push	r5
    4e72:	4f 92       	push	r4
    4e74:	89 e8       	ldi	r24, 0x89	; 137
    4e76:	93 e4       	ldi	r25, 0x43	; 67
    4e78:	9f 93       	push	r25
    4e7a:	8f 93       	push	r24
    4e7c:	81 ef       	ldi	r24, 0xF1	; 241
    4e7e:	96 e4       	ldi	r25, 0x46	; 70
    4e80:	9f 93       	push	r25
    4e82:	8f 93       	push	r24
    4e84:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
			sb_send_string(g_tempStr);
    4e88:	81 ef       	ldi	r24, 0xF1	; 241
    4e8a:	96 e4       	ldi	r25, 0x46	; 70
    4e8c:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    4e90:	0f 90       	pop	r0
    4e92:	0f 90       	pop	r0
    4e94:	0f 90       	pop	r0
    4e96:	0f 90       	pop	r0
    4e98:	0f 90       	pop	r0
    4e9a:	0f 90       	pop	r0
		}

		if(days)
    4e9c:	23 28       	or	r2, r3
    4e9e:	b1 f0       	breq	.+44     	; 0x4ecc <_Z14reportTimeTillmmPKcS0_+0x198>
		{
			sprintf(g_tempStr, "%d days ", days);
    4ea0:	9f 92       	push	r9
    4ea2:	8f 92       	push	r8
    4ea4:	81 e9       	ldi	r24, 0x91	; 145
    4ea6:	93 e4       	ldi	r25, 0x43	; 67
    4ea8:	9f 93       	push	r25
    4eaa:	8f 93       	push	r24
    4eac:	81 ef       	ldi	r24, 0xF1	; 241
    4eae:	96 e4       	ldi	r25, 0x46	; 70
    4eb0:	9f 93       	push	r25
    4eb2:	8f 93       	push	r24
    4eb4:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
			sb_send_string(g_tempStr);
    4eb8:	81 ef       	ldi	r24, 0xF1	; 241
    4eba:	96 e4       	ldi	r25, 0x46	; 70
    4ebc:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	0f 90       	pop	r0
    4ec8:	0f 90       	pop	r0
    4eca:	0f 90       	pop	r0
		}

		if(hours)
    4ecc:	89 85       	ldd	r24, Y+9	; 0x09
    4ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ed0:	89 2b       	or	r24, r25
    4ed2:	c1 f0       	breq	.+48     	; 0x4f04 <_Z14reportTimeTillmmPKcS0_+0x1d0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    4ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed6:	9f 93       	push	r25
    4ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    4eda:	ef 93       	push	r30
    4edc:	8a e9       	ldi	r24, 0x9A	; 154
    4ede:	93 e4       	ldi	r25, 0x43	; 67
    4ee0:	9f 93       	push	r25
    4ee2:	8f 93       	push	r24
    4ee4:	81 ef       	ldi	r24, 0xF1	; 241
    4ee6:	96 e4       	ldi	r25, 0x46	; 70
    4ee8:	9f 93       	push	r25
    4eea:	8f 93       	push	r24
    4eec:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
			sb_send_string(g_tempStr);
    4ef0:	81 ef       	ldi	r24, 0xF1	; 241
    4ef2:	96 e4       	ldi	r25, 0x46	; 70
    4ef4:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    4ef8:	0f 90       	pop	r0
    4efa:	0f 90       	pop	r0
    4efc:	0f 90       	pop	r0
    4efe:	0f 90       	pop	r0
    4f00:	0f 90       	pop	r0
    4f02:	0f 90       	pop	r0
		}

		if(minutes)
    4f04:	01 2b       	or	r16, r17
    4f06:	c1 f0       	breq	.+48     	; 0x4f38 <_Z14reportTimeTillmmPKcS0_+0x204>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    4f08:	fe 81       	ldd	r31, Y+6	; 0x06
    4f0a:	ff 93       	push	r31
    4f0c:	2d 81       	ldd	r18, Y+5	; 0x05
    4f0e:	2f 93       	push	r18
    4f10:	82 ea       	ldi	r24, 0xA2	; 162
    4f12:	93 e4       	ldi	r25, 0x43	; 67
    4f14:	9f 93       	push	r25
    4f16:	8f 93       	push	r24
    4f18:	81 ef       	ldi	r24, 0xF1	; 241
    4f1a:	96 e4       	ldi	r25, 0x46	; 70
    4f1c:	9f 93       	push	r25
    4f1e:	8f 93       	push	r24
    4f20:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
			sb_send_string(g_tempStr);
    4f24:	81 ef       	ldi	r24, 0xF1	; 241
    4f26:	96 e4       	ldi	r25, 0x46	; 70
    4f28:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    4f2c:	0f 90       	pop	r0
    4f2e:	0f 90       	pop	r0
    4f30:	0f 90       	pop	r0
    4f32:	0f 90       	pop	r0
    4f34:	0f 90       	pop	r0
    4f36:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    4f38:	3c 85       	ldd	r19, Y+12	; 0x0c
    4f3a:	3f 93       	push	r19
    4f3c:	4b 85       	ldd	r20, Y+11	; 0x0b
    4f3e:	4f 93       	push	r20
    4f40:	8a ea       	ldi	r24, 0xAA	; 170
    4f42:	93 e4       	ldi	r25, 0x43	; 67
    4f44:	9f 93       	push	r25
    4f46:	8f 93       	push	r24
    4f48:	81 ef       	ldi	r24, 0xF1	; 241
    4f4a:	96 e4       	ldi	r25, 0x46	; 70
    4f4c:	9f 93       	push	r25
    4f4e:	8f 93       	push	r24
    4f50:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
		sb_send_string(g_tempStr);
    4f54:	81 ef       	ldi	r24, 0xF1	; 241
    4f56:	96 e4       	ldi	r25, 0x46	; 70
    4f58:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>

		sb_send_NewLine();
    4f5c:	0e 94 8f 3c 	call	0x791e	; 0x791e <sb_send_NewLine>
		g_tempStr[0] = '\0';
    4f60:	e1 ef       	ldi	r30, 0xF1	; 241
    4f62:	f6 e4       	ldi	r31, 0x46	; 70
    4f64:	10 82       	st	Z, r1
    4f66:	0f 90       	pop	r0
    4f68:	0f 90       	pop	r0
    4f6a:	0f 90       	pop	r0
    4f6c:	0f 90       	pop	r0
    4f6e:	0f 90       	pop	r0
    4f70:	0f 90       	pop	r0
}


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	bool failure = false;
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	01 c0       	rjmp	.+2      	; 0x4f78 <_Z14reportTimeTillmmPKcS0_+0x244>

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4f76:	81 e0       	ldi	r24, 0x01	; 1
		sb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    4f78:	2c 96       	adiw	r28, 0x0c	; 12
    4f7a:	cd bf       	out	0x3d, r28	; 61
    4f7c:	de bf       	out	0x3e, r29	; 62
    4f7e:	df 91       	pop	r29
    4f80:	cf 91       	pop	r28
    4f82:	1f 91       	pop	r17
    4f84:	0f 91       	pop	r16
    4f86:	ff 90       	pop	r15
    4f88:	ef 90       	pop	r14
    4f8a:	df 90       	pop	r13
    4f8c:	cf 90       	pop	r12
    4f8e:	bf 90       	pop	r11
    4f90:	af 90       	pop	r10
    4f92:	9f 90       	pop	r9
    4f94:	8f 90       	pop	r8
    4f96:	7f 90       	pop	r7
    4f98:	6f 90       	pop	r6
    4f9a:	5f 90       	pop	r5
    4f9c:	4f 90       	pop	r4
    4f9e:	3f 90       	pop	r3
    4fa0:	2f 90       	pop	r2
    4fa2:	08 95       	ret

00004fa4 <_Z23clockConfigurationCheckv>:



ConfigurationState_t clockConfigurationCheck(void)
{
    4fa4:	0f 93       	push	r16
    4fa6:	1f 93       	push	r17
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
    4fa8:	80 91 81 47 	lds	r24, 0x4781	; 0x804781 <g_event_finish_epoch>
    4fac:	90 91 82 47 	lds	r25, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    4fb0:	a0 91 83 47 	lds	r26, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    4fb4:	b0 91 84 47 	lds	r27, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    4fb8:	81 15       	cp	r24, r1
    4fba:	26 e6       	ldi	r18, 0x66	; 102
    4fbc:	92 07       	cpc	r25, r18
    4fbe:	2e ee       	ldi	r18, 0xEE	; 238
    4fc0:	a2 07       	cpc	r26, r18
    4fc2:	2f e5       	ldi	r18, 0x5F	; 95
    4fc4:	b2 07       	cpc	r27, r18
    4fc6:	d8 f1       	brcs	.+118    	; 0x503e <_Z23clockConfigurationCheckv+0x9a>
    4fc8:	40 91 7d 47 	lds	r20, 0x477D	; 0x80477d <g_event_start_epoch>
    4fcc:	50 91 7e 47 	lds	r21, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    4fd0:	60 91 7f 47 	lds	r22, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    4fd4:	70 91 80 47 	lds	r23, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    4fd8:	41 15       	cp	r20, r1
    4fda:	e6 e6       	ldi	r30, 0x66	; 102
    4fdc:	5e 07       	cpc	r21, r30
    4fde:	ee ee       	ldi	r30, 0xEE	; 238
    4fe0:	6e 07       	cpc	r22, r30
    4fe2:	ef e5       	ldi	r30, 0x5F	; 95
    4fe4:	7e 07       	cpc	r23, r30
    4fe6:	68 f1       	brcs	.+90     	; 0x5042 <_Z23clockConfigurationCheckv+0x9e>
    4fe8:	00 91 8e 47 	lds	r16, 0x478E	; 0x80478e <g_current_epoch>
    4fec:	10 91 8f 47 	lds	r17, 0x478F	; 0x80478f <g_current_epoch+0x1>
    4ff0:	20 91 90 47 	lds	r18, 0x4790	; 0x804790 <g_current_epoch+0x2>
    4ff4:	30 91 91 47 	lds	r19, 0x4791	; 0x804791 <g_current_epoch+0x3>
    4ff8:	01 15       	cp	r16, r1
    4ffa:	e6 e6       	ldi	r30, 0x66	; 102
    4ffc:	1e 07       	cpc	r17, r30
    4ffe:	ee ee       	ldi	r30, 0xEE	; 238
    5000:	2e 07       	cpc	r18, r30
    5002:	ef e5       	ldi	r30, 0x5F	; 95
    5004:	3e 07       	cpc	r19, r30
    5006:	f8 f0       	brcs	.+62     	; 0x5046 <_Z23clockConfigurationCheckv+0xa2>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
    5008:	48 17       	cp	r20, r24
    500a:	59 07       	cpc	r21, r25
    500c:	6a 07       	cpc	r22, r26
    500e:	7b 07       	cpc	r23, r27
    5010:	e0 f4       	brcc	.+56     	; 0x504a <_Z23clockConfigurationCheckv+0xa6>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
    5012:	80 17       	cp	r24, r16
    5014:	91 07       	cpc	r25, r17
    5016:	a2 07       	cpc	r26, r18
    5018:	b3 07       	cpc	r27, r19
    501a:	c8 f0       	brcs	.+50     	; 0x504e <_Z23clockConfigurationCheckv+0xaa>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_start_epoch)       /* Event should be running */
    501c:	40 17       	cp	r20, r16
    501e:	51 07       	cpc	r21, r17
    5020:	62 07       	cpc	r22, r18
    5022:	73 07       	cpc	r23, r19
    5024:	30 f4       	brcc	.+12     	; 0x5032 <_Z23clockConfigurationCheckv+0x8e>
	{
		if(g_transmissions_disabled)
    5026:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <g_transmissions_disabled>
    502a:	88 23       	and	r24, r24
    502c:	91 f0       	breq	.+36     	; 0x5052 <_Z23clockConfigurationCheckv+0xae>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
    502e:	83 e0       	ldi	r24, 0x03	; 3
    5030:	13 c0       	rjmp	.+38     	; 0x5058 <_Z23clockConfigurationCheckv+0xb4>
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
		}
	}
	else if(!g_use_rtc_for_startstop)
    5032:	80 91 92 47 	lds	r24, 0x4792	; 0x804792 <g_use_rtc_for_startstop>
    5036:	81 11       	cpse	r24, r1
    5038:	0e c0       	rjmp	.+28     	; 0x5056 <_Z23clockConfigurationCheckv+0xb2>
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
    503a:	84 e0       	ldi	r24, 0x04	; 4
    503c:	0d c0       	rjmp	.+26     	; 0x5058 <_Z23clockConfigurationCheckv+0xb4>

ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
	{
		return(CONFIGURATION_ERROR);
    503e:	82 e0       	ldi	r24, 0x02	; 2
    5040:	0b c0       	rjmp	.+22     	; 0x5058 <_Z23clockConfigurationCheckv+0xb4>
    5042:	82 e0       	ldi	r24, 0x02	; 2
    5044:	09 c0       	rjmp	.+18     	; 0x5058 <_Z23clockConfigurationCheckv+0xb4>
    5046:	82 e0       	ldi	r24, 0x02	; 2
    5048:	07 c0       	rjmp	.+14     	; 0x5058 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
	{
		return(CONFIGURATION_ERROR);
    504a:	82 e0       	ldi	r24, 0x02	; 2
    504c:	05 c0       	rjmp	.+10     	; 0x5058 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
	{
		return(CONFIGURATION_ERROR);
    504e:	82 e0       	ldi	r24, 0x02	; 2
    5050:	03 c0       	rjmp	.+6      	; 0x5058 <_Z23clockConfigurationCheckv+0xb4>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
		}
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
    5052:	85 e0       	ldi	r24, 0x05	; 5
    5054:	01 c0       	rjmp	.+2      	; 0x5058 <_Z23clockConfigurationCheckv+0xb4>
	else if(!g_use_rtc_for_startstop)
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
	}

	return(WAITING_FOR_START);  /* Future event hasn't started yet */
    5056:	81 e0       	ldi	r24, 0x01	; 1
}
    5058:	1f 91       	pop	r17
    505a:	0f 91       	pop	r16
    505c:	08 95       	ret

0000505e <_Z18reportConfigErrorsv>:

void reportConfigErrors(void)
{
	g_current_epoch = ds3231_get_epoch(null);
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    5066:	60 93 8e 47 	sts	0x478E, r22	; 0x80478e <g_current_epoch>
    506a:	70 93 8f 47 	sts	0x478F, r23	; 0x80478f <g_current_epoch+0x1>
    506e:	80 93 90 47 	sts	0x4790, r24	; 0x804790 <g_current_epoch+0x2>
    5072:	90 93 91 47 	sts	0x4791, r25	; 0x804791 <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    5076:	80 91 47 47 	lds	r24, 0x4747	; 0x804747 <g_messages_text+0x15>
    507a:	81 11       	cpse	r24, r1
    507c:	04 c0       	rjmp	.+8      	; 0x5086 <_Z18reportConfigErrorsv+0x28>
	{
		sb_send_string(TEXT_SET_ID_TXT);
    507e:	81 eb       	ldi	r24, 0xB1	; 177
    5080:	93 e4       	ldi	r25, 0x43	; 67
    5082:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    5086:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    508a:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    508e:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    5092:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    5096:	81 15       	cp	r24, r1
    5098:	96 46       	sbci	r25, 0x66	; 102
    509a:	ae 4e       	sbci	r26, 0xEE	; 238
    509c:	bf 45       	sbci	r27, 0x5F	; 95
    509e:	20 f4       	brcc	.+8      	; 0x50a8 <_Z18reportConfigErrorsv+0x4a>
	{
		sb_send_string(TEXT_SET_TIME_TXT);
    50a0:	82 ed       	ldi	r24, 0xD2	; 210
    50a2:	93 e4       	ldi	r25, 0x43	; 67
    50a4:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    50a8:	40 91 81 47 	lds	r20, 0x4781	; 0x804781 <g_event_finish_epoch>
    50ac:	50 91 82 47 	lds	r21, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    50b0:	60 91 83 47 	lds	r22, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    50b4:	70 91 84 47 	lds	r23, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    50b8:	80 91 8e 47 	lds	r24, 0x478E	; 0x80478e <g_current_epoch>
    50bc:	90 91 8f 47 	lds	r25, 0x478F	; 0x80478f <g_current_epoch+0x1>
    50c0:	a0 91 90 47 	lds	r26, 0x4790	; 0x804790 <g_current_epoch+0x2>
    50c4:	b0 91 91 47 	lds	r27, 0x4791	; 0x804791 <g_current_epoch+0x3>
    50c8:	48 17       	cp	r20, r24
    50ca:	59 07       	cpc	r21, r25
    50cc:	6a 07       	cpc	r22, r26
    50ce:	7b 07       	cpc	r23, r27
    50d0:	b0 f4       	brcc	.+44     	; 0x50fe <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    50d2:	40 91 7d 47 	lds	r20, 0x477D	; 0x80477d <g_event_start_epoch>
    50d6:	50 91 7e 47 	lds	r21, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    50da:	60 91 7f 47 	lds	r22, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    50de:	70 91 80 47 	lds	r23, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    50e2:	48 17       	cp	r20, r24
    50e4:	59 07       	cpc	r21, r25
    50e6:	6a 07       	cpc	r22, r26
    50e8:	7b 07       	cpc	r23, r27
    50ea:	20 f4       	brcc	.+8      	; 0x50f4 <_Z18reportConfigErrorsv+0x96>
		{
			sb_send_string(TEXT_SET_START_TXT);
    50ec:	8a ef       	ldi	r24, 0xFA	; 250
    50ee:	93 e4       	ldi	r25, 0x43	; 67
    50f0:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
		}

		sb_send_string(TEXT_SET_FINISH_TXT);
    50f4:	80 e2       	ldi	r24, 0x20	; 32
    50f6:	94 e4       	ldi	r25, 0x44	; 68
    50f8:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    50fc:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    50fe:	40 91 7d 47 	lds	r20, 0x477D	; 0x80477d <g_event_start_epoch>
    5102:	50 91 7e 47 	lds	r21, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    5106:	60 91 7f 47 	lds	r22, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    510a:	70 91 80 47 	lds	r23, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    510e:	48 17       	cp	r20, r24
    5110:	59 07       	cpc	r21, r25
    5112:	6a 07       	cpc	r22, r26
    5114:	7b 07       	cpc	r23, r27
    5116:	70 f4       	brcc	.+28     	; 0x5134 <_Z18reportConfigErrorsv+0xd6>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    5118:	41 15       	cp	r20, r1
    511a:	56 46       	sbci	r21, 0x66	; 102
    511c:	6e 4e       	sbci	r22, 0xEE	; 238
    511e:	7f 45       	sbci	r23, 0x5F	; 95
    5120:	28 f4       	brcc	.+10     	; 0x512c <_Z18reportConfigErrorsv+0xce>
		{
			sb_send_string(TEXT_SET_START_TXT);
    5122:	8a ef       	ldi	r24, 0xFA	; 250
    5124:	93 e4       	ldi	r25, 0x43	; 67
    5126:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    512a:	08 95       	ret
		}
		else
		{
			sb_send_string((char*)"Event running...\n");
    512c:	87 e4       	ldi	r24, 0x47	; 71
    512e:	94 e4       	ldi	r25, 0x44	; 68
    5130:	0e 94 a4 3c 	call	0x7948	; 0x7948 <sb_send_string>
    5134:	08 95       	ret

00005136 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
    5136:	0f 93       	push	r16
    5138:	1f 93       	push	r17
    513a:	cf 93       	push	r28
    513c:	df 93       	push	r29
    513e:	ec 01       	movw	r28, r24
    5140:	8b 01       	movw	r16, r22
    5142:	01 97       	sbiw	r24, 0x01	; 1
    5144:	39 f4       	brne	.+14     	; 0x5154 <_Z41__static_initialization_and_destruction_0ii+0x1e>
    5146:	6f 3f       	cpi	r22, 0xFF	; 255
    5148:	7f 4f       	sbci	r23, 0xFF	; 255
    514a:	21 f4       	brne	.+8      	; 0x5154 <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile bool g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { false, false, false, false, false };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    514c:	8c e7       	ldi	r24, 0x7C	; 124
    514e:	97 e4       	ldi	r25, 0x47	; 71
    5150:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_ZN13EepromManagerC1Ev>
    5154:	cd 2b       	or	r28, r29
    5156:	39 f4       	brne	.+14     	; 0x5166 <_Z41__static_initialization_and_destruction_0ii+0x30>
    5158:	0f 3f       	cpi	r16, 0xFF	; 255
    515a:	1f 4f       	sbci	r17, 0xFF	; 255
    515c:	21 f4       	brne	.+8      	; 0x5166 <_Z41__static_initialization_and_destruction_0ii+0x30>
    515e:	8c e7       	ldi	r24, 0x7C	; 124
    5160:	97 e4       	ldi	r25, 0x47	; 71
    5162:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    5166:	df 91       	pop	r29
    5168:	cf 91       	pop	r28
    516a:	1f 91       	pop	r17
    516c:	0f 91       	pop	r16
    516e:	08 95       	ret

00005170 <_GLOBAL__sub_I_g_battery_type>:
    5170:	6f ef       	ldi	r22, 0xFF	; 255
    5172:	7f ef       	ldi	r23, 0xFF	; 255
    5174:	81 e0       	ldi	r24, 0x01	; 1
    5176:	90 e0       	ldi	r25, 0x00	; 0
    5178:	0e 94 9b 28 	call	0x5136	; 0x5136 <_Z41__static_initialization_and_destruction_0ii>
    517c:	08 95       	ret

0000517e <_GLOBAL__sub_D_g_battery_type>:
    517e:	6f ef       	ldi	r22, 0xFF	; 255
    5180:	7f ef       	ldi	r23, 0xFF	; 255
    5182:	80 e0       	ldi	r24, 0x00	; 0
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	0e 94 9b 28 	call	0x5136	; 0x5136 <_Z41__static_initialization_and_destruction_0ii>
    518a:	08 95       	ret

0000518c <_ZL9PORT_initv>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    518c:	e0 e6       	ldi	r30, 0x60	; 96
    518e:	f4 e0       	ldi	r31, 0x04	; 4
    5190:	82 89       	ldd	r24, Z+18	; 0x12
    5192:	88 7f       	andi	r24, 0xF8	; 248
    5194:	82 8b       	std	Z+18, r24	; 0x12
    5196:	82 89       	ldd	r24, Z+18	; 0x12
    5198:	84 60       	ori	r24, 0x04	; 4
    519a:	82 8b       	std	Z+18, r24	; 0x12
    519c:	83 89       	ldd	r24, Z+19	; 0x13
    519e:	88 7f       	andi	r24, 0xF8	; 248
    51a0:	83 8b       	std	Z+19, r24	; 0x13
    51a2:	83 89       	ldd	r24, Z+19	; 0x13
    51a4:	84 60       	ori	r24, 0x04	; 4
    51a6:	83 8b       	std	Z+19, r24	; 0x13
    51a8:	84 89       	ldd	r24, Z+20	; 0x14
    51aa:	88 7f       	andi	r24, 0xF8	; 248
    51ac:	84 8b       	std	Z+20, r24	; 0x14
    51ae:	84 89       	ldd	r24, Z+20	; 0x14
    51b0:	84 60       	ori	r24, 0x04	; 4
    51b2:	84 8b       	std	Z+20, r24	; 0x14
    51b4:	85 89       	ldd	r24, Z+21	; 0x15
    51b6:	88 7f       	andi	r24, 0xF8	; 248
    51b8:	85 8b       	std	Z+21, r24	; 0x15
    51ba:	85 89       	ldd	r24, Z+21	; 0x15
    51bc:	84 60       	ori	r24, 0x04	; 4
    51be:	85 8b       	std	Z+21, r24	; 0x15
    51c0:	82 89       	ldd	r24, Z+18	; 0x12
    51c2:	87 7f       	andi	r24, 0xF7	; 247
    51c4:	82 8b       	std	Z+18, r24	; 0x12
    51c6:	83 89       	ldd	r24, Z+19	; 0x13
    51c8:	87 7f       	andi	r24, 0xF7	; 247
    51ca:	83 8b       	std	Z+19, r24	; 0x13
    51cc:	84 89       	ldd	r24, Z+20	; 0x14
    51ce:	87 7f       	andi	r24, 0xF7	; 247
    51d0:	84 8b       	std	Z+20, r24	; 0x14
    51d2:	85 89       	ldd	r24, Z+21	; 0x15
    51d4:	87 7f       	andi	r24, 0xF7	; 247
    51d6:	85 8b       	std	Z+21, r24	; 0x15
    51d8:	08 95       	ret

000051da <_ZL10VREF0_initv>:
    51da:	81 e0       	ldi	r24, 0x01	; 1
    51dc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    51e0:	08 95       	ret

000051e2 <_ZL9ADC0_initb>:
    51e2:	9a e0       	ldi	r25, 0x0A	; 10
    51e4:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
    51e8:	88 23       	and	r24, r24
    51ea:	41 f0       	breq	.+16     	; 0x51fc <_ZL9ADC0_initb+0x1a>
    51ec:	e0 e0       	ldi	r30, 0x00	; 0
    51ee:	f6 e0       	ldi	r31, 0x06	; 6
    51f0:	83 e0       	ldi	r24, 0x03	; 3
    51f2:	80 83       	st	Z, r24
    51f4:	81 e0       	ldi	r24, 0x01	; 1
    51f6:	84 87       	std	Z+12, r24	; 0x0c
    51f8:	82 87       	std	Z+10, r24	; 0x0a
    51fa:	08 95       	ret
    51fc:	e0 e0       	ldi	r30, 0x00	; 0
    51fe:	f6 e0       	ldi	r31, 0x06	; 6
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	80 83       	st	Z, r24
    5204:	14 86       	std	Z+12, r1	; 0x0c
    5206:	08 95       	ret

00005208 <_ZL16ADC0_SYSTEM_initb>:
    5208:	cf 93       	push	r28
    520a:	c8 2f       	mov	r28, r24
    520c:	0e 94 c6 28 	call	0x518c	; 0x518c <_ZL9PORT_initv>
    5210:	0e 94 ed 28 	call	0x51da	; 0x51da <_ZL10VREF0_initv>
    5214:	8c 2f       	mov	r24, r28
    5216:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <_ZL9ADC0_initb>
    521a:	81 e0       	ldi	r24, 0x01	; 1
    521c:	80 93 a8 47 	sts	0x47A8, r24	; 0x8047a8 <_ZL17g_adc_initialized>
    5220:	cf 91       	pop	r28
    5222:	08 95       	ret

00005224 <_ZL20ADC0_SYSTEM_shutdownv>:
    5224:	e0 e0       	ldi	r30, 0x00	; 0
    5226:	f6 e0       	ldi	r31, 0x06	; 6
    5228:	14 86       	std	Z+12, r1	; 0x0c
    522a:	10 82       	st	Z, r1
    522c:	10 92 a8 47 	sts	0x47A8, r1	; 0x8047a8 <_ZL17g_adc_initialized>
    5230:	08 95       	ret

00005232 <_Z41__static_initialization_and_destruction_0ii>:
    5232:	ef 92       	push	r14
    5234:	ff 92       	push	r15
    5236:	0f 93       	push	r16
    5238:	1f 93       	push	r17
    523a:	cf 93       	push	r28
    523c:	df 93       	push	r29
    523e:	ec 01       	movw	r28, r24
    5240:	7b 01       	movw	r14, r22
    5242:	01 97       	sbiw	r24, 0x01	; 1
    5244:	79 f4       	brne	.+30     	; 0x5264 <_Z41__static_initialization_and_destruction_0ii+0x32>
    5246:	6f 3f       	cpi	r22, 0xFF	; 255
    5248:	7f 4f       	sbci	r23, 0xFF	; 255
    524a:	61 f4       	brne	.+24     	; 0x5264 <_Z41__static_initialization_and_destruction_0ii+0x32>
    524c:	00 e0       	ldi	r16, 0x00	; 0
    524e:	10 e4       	ldi	r17, 0x40	; 64
    5250:	2c eb       	ldi	r18, 0xBC	; 188
    5252:	36 e4       	ldi	r19, 0x46	; 70
    5254:	40 e0       	ldi	r20, 0x00	; 0
    5256:	50 e0       	ldi	r21, 0x00	; 0
    5258:	69 e4       	ldi	r22, 0x49	; 73
    525a:	73 e4       	ldi	r23, 0x43	; 67
    525c:	87 ea       	ldi	r24, 0xA7	; 167
    525e:	97 e4       	ldi	r25, 0x47	; 71
    5260:	0e 94 2e 34 	call	0x685c	; 0x685c <_ZN8GoertzelC1Eff>
    5264:	cd 2b       	or	r28, r29
    5266:	39 f4       	brne	.+14     	; 0x5276 <_Z41__static_initialization_and_destruction_0ii+0x44>
    5268:	ef 20       	and	r14, r15
    526a:	e0 94       	com	r14
    526c:	21 f4       	brne	.+8      	; 0x5276 <_Z41__static_initialization_and_destruction_0ii+0x44>
    526e:	87 ea       	ldi	r24, 0xA7	; 167
    5270:	97 e4       	ldi	r25, 0x47	; 71
    5272:	0e 94 7e 34 	call	0x68fc	; 0x68fc <_ZN8GoertzelD1Ev>
    5276:	df 91       	pop	r29
    5278:	cf 91       	pop	r28
    527a:	1f 91       	pop	r17
    527c:	0f 91       	pop	r16
    527e:	ff 90       	pop	r15
    5280:	ef 90       	pop	r14
    5282:	08 95       	ret

00005284 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
    5284:	83 30       	cpi	r24, 0x03	; 3
    5286:	c9 f0       	breq	.+50     	; 0x52ba <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
    5288:	28 f4       	brcc	.+10     	; 0x5294 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x10>
    528a:	81 30       	cpi	r24, 0x01	; 1
    528c:	41 f0       	breq	.+16     	; 0x529e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x1a>
    528e:	82 30       	cpi	r24, 0x02	; 2
    5290:	69 f0       	breq	.+26     	; 0x52ac <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x28>
    5292:	28 c0       	rjmp	.+80     	; 0x52e4 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    5294:	84 30       	cpi	r24, 0x04	; 4
    5296:	c1 f0       	breq	.+48     	; 0x52c8 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x44>
    5298:	85 30       	cpi	r24, 0x05	; 5
    529a:	e9 f0       	breq	.+58     	; 0x52d6 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x52>
    529c:	23 c0       	rjmp	.+70     	; 0x52e4 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	0e 94 04 29 	call	0x5208	; 0x5208 <_ZL16ADC0_SYSTEM_initb>
    52a4:	82 e0       	ldi	r24, 0x02	; 2
    52a6:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    52aa:	08 95       	ret
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	0e 94 04 29 	call	0x5208	; 0x5208 <_ZL16ADC0_SYSTEM_initb>
    52b2:	83 e0       	ldi	r24, 0x03	; 3
    52b4:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    52b8:	08 95       	ret
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	0e 94 04 29 	call	0x5208	; 0x5208 <_ZL16ADC0_SYSTEM_initb>
    52c0:	84 e0       	ldi	r24, 0x04	; 4
    52c2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    52c6:	08 95       	ret
    52c8:	80 e0       	ldi	r24, 0x00	; 0
    52ca:	0e 94 04 29 	call	0x5208	; 0x5208 <_ZL16ADC0_SYSTEM_initb>
    52ce:	85 e0       	ldi	r24, 0x05	; 5
    52d0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    52d4:	08 95       	ret
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	0e 94 04 29 	call	0x5208	; 0x5208 <_ZL16ADC0_SYSTEM_initb>
    52dc:	82 e4       	ldi	r24, 0x42	; 66
    52de:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    52e2:	08 95       	ret
    52e4:	0e 94 12 29 	call	0x5224	; 0x5224 <_ZL20ADC0_SYSTEM_shutdownv>
    52e8:	08 95       	ret

000052ea <_Z9ADC0_readv>:
    52ea:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    52ee:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    52f2:	08 95       	ret

000052f4 <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    52f4:	1f 92       	push	r1
    52f6:	0f 92       	push	r0
    52f8:	0f b6       	in	r0, 0x3f	; 63
    52fa:	0f 92       	push	r0
    52fc:	11 24       	eor	r1, r1
    52fe:	0b b6       	in	r0, 0x3b	; 59
    5300:	0f 92       	push	r0
    5302:	2f 93       	push	r18
    5304:	3f 93       	push	r19
    5306:	4f 93       	push	r20
    5308:	5f 93       	push	r21
    530a:	6f 93       	push	r22
    530c:	7f 93       	push	r23
    530e:	8f 93       	push	r24
    5310:	9f 93       	push	r25
    5312:	af 93       	push	r26
    5314:	bf 93       	push	r27
    5316:	ef 93       	push	r30
    5318:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    531a:	0e 94 75 29 	call	0x52ea	; 0x52ea <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    531e:	bc 01       	movw	r22, r24
    5320:	87 ea       	ldi	r24, 0xA7	; 167
    5322:	97 e4       	ldi	r25, 0x47	; 71
    5324:	0e 94 85 34 	call	0x690a	; 0x690a <_ZN8Goertzel9DataPointEi>
    5328:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    532a:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    532e:	ff 91       	pop	r31
    5330:	ef 91       	pop	r30
    5332:	bf 91       	pop	r27
    5334:	af 91       	pop	r26
    5336:	9f 91       	pop	r25
    5338:	8f 91       	pop	r24
    533a:	7f 91       	pop	r23
    533c:	6f 91       	pop	r22
    533e:	5f 91       	pop	r21
    5340:	4f 91       	pop	r20
    5342:	3f 91       	pop	r19
    5344:	2f 91       	pop	r18
    5346:	0f 90       	pop	r0
    5348:	0b be       	out	0x3b, r0	; 59
    534a:	0f 90       	pop	r0
    534c:	0f be       	out	0x3f, r0	; 63
    534e:	0f 90       	pop	r0
    5350:	1f 90       	pop	r1
    5352:	18 95       	reti

00005354 <_GLOBAL__sub_I_g_activeADCChannel>:
    5354:	6f ef       	ldi	r22, 0xFF	; 255
    5356:	7f ef       	ldi	r23, 0xFF	; 255
    5358:	81 e0       	ldi	r24, 0x01	; 1
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	0e 94 19 29 	call	0x5232	; 0x5232 <_Z41__static_initialization_and_destruction_0ii>
    5360:	08 95       	ret

00005362 <_GLOBAL__sub_D_g_activeADCChannel>:
    5362:	6f ef       	ldi	r22, 0xFF	; 255
    5364:	7f ef       	ldi	r23, 0xFF	; 255
    5366:	80 e0       	ldi	r24, 0x00	; 0
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	0e 94 19 29 	call	0x5232	; 0x5232 <_Z41__static_initialization_and_destruction_0ii>
    536e:	08 95       	ret

00005370 <_Z10fet_driverb>:
{
} //~binio

void fet_driver(bool state)
{
	if(state == ON)
    5370:	88 23       	and	r24, r24
    5372:	21 f0       	breq	.+8      	; 0x537c <_Z10fet_driverb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    5374:	81 b1       	in	r24, 0x01	; 1
    5376:	88 60       	ori	r24, 0x08	; 8
    5378:	81 b9       	out	0x01, r24	; 1
    537a:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    537c:	81 b1       	in	r24, 0x01	; 1
    537e:	87 7f       	andi	r24, 0xF7	; 247
    5380:	81 b9       	out	0x01, r24	; 1
    5382:	08 95       	ret

00005384 <_Z10wifi_powerb>:
}


void wifi_power(bool state)
{
	if(state == ON)
    5384:	88 23       	and	r24, r24
    5386:	21 f0       	breq	.+8      	; 0x5390 <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    5388:	81 b1       	in	r24, 0x01	; 1
    538a:	80 62       	ori	r24, 0x20	; 32
    538c:	81 b9       	out	0x01, r24	; 1
    538e:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5390:	81 b1       	in	r24, 0x01	; 1
    5392:	8f 7d       	andi	r24, 0xDF	; 223
    5394:	81 b9       	out	0x01, r24	; 1
    5396:	08 95       	ret

00005398 <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    5398:	88 23       	and	r24, r24
    539a:	21 f0       	breq	.+8      	; 0x53a4 <_Z10wifi_resetb+0xc>
    539c:	81 b1       	in	r24, 0x01	; 1
    539e:	8f 7b       	andi	r24, 0xBF	; 191
    53a0:	81 b9       	out	0x01, r24	; 1
    53a2:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    53a4:	81 b1       	in	r24, 0x01	; 1
    53a6:	80 64       	ori	r24, 0x40	; 64
    53a8:	81 b9       	out	0x01, r24	; 1
    53aa:	08 95       	ret

000053ac <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    53ac:	2e b1       	in	r18, 0x0e	; 14
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	22 0f       	add	r18, r18
    53b2:	23 2f       	mov	r18, r19
    53b4:	22 1f       	adc	r18, r18
    53b6:	33 0b       	sbc	r19, r19
    53b8:	31 95       	neg	r19
	}
}

bool wifiPresent(void)
{
	return(!PORTD_get_pin_level(WIFI_MODULE_DETECT));
    53ba:	81 e0       	ldi	r24, 0x01	; 1
    53bc:	23 2b       	or	r18, r19
    53be:	09 f0       	breq	.+2      	; 0x53c2 <_Z11wifiPresentv+0x16>
    53c0:	80 e0       	ldi	r24, 0x00	; 0
}
    53c2:	08 95       	ret

000053c4 <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    53c4:	1f 92       	push	r1
    53c6:	0f 92       	push	r0
    53c8:	0f b6       	in	r0, 0x3f	; 63
    53ca:	0f 92       	push	r0
    53cc:	11 24       	eor	r1, r1
    53ce:	8f 93       	push	r24
    53d0:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    53d2:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    53d6:	88 23       	and	r24, r24
    53d8:	4c f4       	brge	.+18     	; 0x53ec <__vector_29+0x28>
	{
		count++;
    53da:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ11__vector_29E5count>
    53de:	90 91 ac 47 	lds	r25, 0x47AC	; 0x8047ac <_ZZ11__vector_29E5count+0x1>
    53e2:	01 96       	adiw	r24, 0x01	; 1
    53e4:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ11__vector_29E5count>
    53e8:	90 93 ac 47 	sts	0x47AC, r25	; 0x8047ac <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    53ec:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    53f0:	84 ff       	sbrs	r24, 4
    53f2:	09 c0       	rjmp	.+18     	; 0x5406 <__vector_29+0x42>
	{
		count++;
    53f4:	80 91 ab 47 	lds	r24, 0x47AB	; 0x8047ab <_ZZ11__vector_29E5count>
    53f8:	90 91 ac 47 	lds	r25, 0x47AC	; 0x8047ac <_ZZ11__vector_29E5count+0x1>
    53fc:	01 96       	adiw	r24, 0x01	; 1
    53fe:	80 93 ab 47 	sts	0x47AB, r24	; 0x8047ab <_ZZ11__vector_29E5count>
    5402:	90 93 ac 47 	sts	0x47AC, r25	; 0x8047ac <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    5406:	8f ef       	ldi	r24, 0xFF	; 255
    5408:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    540c:	9f 91       	pop	r25
    540e:	8f 91       	pop	r24
    5410:	0f 90       	pop	r0
    5412:	0f be       	out	0x3f, r0	; 63
    5414:	0f 90       	pop	r0
    5416:	1f 90       	pop	r1
    5418:	18 95       	reti

0000541a <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    541a:	1f 92       	push	r1
    541c:	0f 92       	push	r0
    541e:	0f b6       	in	r0, 0x3f	; 63
    5420:	0f 92       	push	r0
    5422:	11 24       	eor	r1, r1
    5424:	8f 93       	push	r24
    5426:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    5428:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    542c:	82 ff       	sbrs	r24, 2
    542e:	09 c0       	rjmp	.+18     	; 0x5442 <__vector_6+0x28>
	{
		count++;
    5430:	80 91 a9 47 	lds	r24, 0x47A9	; 0x8047a9 <_ZZ10__vector_6E5count>
    5434:	90 91 aa 47 	lds	r25, 0x47AA	; 0x8047aa <_ZZ10__vector_6E5count+0x1>
    5438:	01 96       	adiw	r24, 0x01	; 1
    543a:	80 93 a9 47 	sts	0x47A9, r24	; 0x8047a9 <_ZZ10__vector_6E5count>
    543e:	90 93 aa 47 	sts	0x47AA, r25	; 0x8047aa <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    5442:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    5446:	84 ff       	sbrs	r24, 4
    5448:	09 c0       	rjmp	.+18     	; 0x545c <__vector_6+0x42>
	{
		count++;
    544a:	80 91 a9 47 	lds	r24, 0x47A9	; 0x8047a9 <_ZZ10__vector_6E5count>
    544e:	90 91 aa 47 	lds	r25, 0x47AA	; 0x8047aa <_ZZ10__vector_6E5count+0x1>
    5452:	01 96       	adiw	r24, 0x01	; 1
    5454:	80 93 a9 47 	sts	0x47A9, r24	; 0x8047a9 <_ZZ10__vector_6E5count>
    5458:	90 93 aa 47 	sts	0x47AA, r25	; 0x8047aa <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    545c:	8f ef       	ldi	r24, 0xFF	; 255
    545e:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    5462:	9f 91       	pop	r25
    5464:	8f 91       	pop	r24
    5466:	0f 90       	pop	r0
    5468:	0f be       	out	0x3f, r0	; 63
    546a:	0f 90       	pop	r0
    546c:	1f 90       	pop	r1
    546e:	18 95       	reti

00005470 <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    5470:	80 b1       	in	r24, 0x00	; 0
    5472:	8b 7f       	andi	r24, 0xFB	; 251
    5474:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5476:	e2 e1       	ldi	r30, 0x12	; 18
    5478:	f4 e0       	ldi	r31, 0x04	; 4
    547a:	80 81       	ld	r24, Z
    547c:	88 7f       	andi	r24, 0xF8	; 248
    547e:	82 60       	ori	r24, 0x02	; 2
    5480:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5482:	80 b1       	in	r24, 0x00	; 0
    5484:	88 60       	ori	r24, 0x08	; 8
    5486:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5488:	81 b1       	in	r24, 0x01	; 1
    548a:	87 7f       	andi	r24, 0xF7	; 247
    548c:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    548e:	80 b1       	in	r24, 0x00	; 0
    5490:	8f 7e       	andi	r24, 0xEF	; 239
    5492:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5494:	e4 e1       	ldi	r30, 0x14	; 20
    5496:	f4 e0       	ldi	r31, 0x04	; 4
    5498:	80 81       	ld	r24, Z
    549a:	88 60       	ori	r24, 0x08	; 8
    549c:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    549e:	80 81       	ld	r24, Z
    54a0:	88 7f       	andi	r24, 0xF8	; 248
    54a2:	83 60       	ori	r24, 0x03	; 3
    54a4:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    54a6:	80 b1       	in	r24, 0x00	; 0
    54a8:	80 62       	ori	r24, 0x20	; 32
    54aa:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    54ac:	81 b1       	in	r24, 0x01	; 1
    54ae:	8f 7d       	andi	r24, 0xDF	; 223
    54b0:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    54b2:	80 b1       	in	r24, 0x00	; 0
    54b4:	80 64       	ori	r24, 0x40	; 64
    54b6:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    54b8:	81 b1       	in	r24, 0x01	; 1
    54ba:	8f 7b       	andi	r24, 0xBF	; 191
    54bc:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    54be:	80 b1       	in	r24, 0x00	; 0
    54c0:	80 68       	ori	r24, 0x80	; 128
    54c2:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    54c4:	81 b1       	in	r24, 0x01	; 1
    54c6:	8f 77       	andi	r24, 0x7F	; 127
    54c8:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    54ca:	84 b1       	in	r24, 0x04	; 4
    54cc:	81 60       	ori	r24, 0x01	; 1
    54ce:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    54d0:	85 b1       	in	r24, 0x05	; 5
    54d2:	8e 7f       	andi	r24, 0xFE	; 254
    54d4:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    54d6:	84 b1       	in	r24, 0x04	; 4
    54d8:	82 60       	ori	r24, 0x02	; 2
    54da:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    54dc:	85 b1       	in	r24, 0x05	; 5
    54de:	8d 7f       	andi	r24, 0xFD	; 253
    54e0:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    54e2:	84 b1       	in	r24, 0x04	; 4
    54e4:	80 61       	ori	r24, 0x10	; 16
    54e6:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    54e8:	85 b1       	in	r24, 0x05	; 5
    54ea:	8f 7e       	andi	r24, 0xEF	; 239
    54ec:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    54ee:	84 b1       	in	r24, 0x04	; 4
    54f0:	80 62       	ori	r24, 0x20	; 32
    54f2:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    54f4:	85 b1       	in	r24, 0x05	; 5
    54f6:	8f 7d       	andi	r24, 0xDF	; 223
    54f8:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    54fa:	88 b1       	in	r24, 0x08	; 8
    54fc:	8f 7e       	andi	r24, 0xEF	; 239
    54fe:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5500:	88 b1       	in	r24, 0x08	; 8
    5502:	80 62       	ori	r24, 0x20	; 32
    5504:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5506:	89 b1       	in	r24, 0x09	; 9
    5508:	8f 7d       	andi	r24, 0xDF	; 223
    550a:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    550c:	88 b1       	in	r24, 0x08	; 8
    550e:	80 64       	ori	r24, 0x40	; 64
    5510:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5512:	89 b1       	in	r24, 0x09	; 9
    5514:	8f 7b       	andi	r24, 0xBF	; 191
    5516:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    5518:	88 b1       	in	r24, 0x08	; 8
    551a:	8f 77       	andi	r24, 0x7F	; 127
    551c:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    551e:	e7 e5       	ldi	r30, 0x57	; 87
    5520:	f4 e0       	ldi	r31, 0x04	; 4
    5522:	80 81       	ld	r24, Z
    5524:	88 60       	ori	r24, 0x08	; 8
    5526:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5528:	80 81       	ld	r24, Z
    552a:	88 7f       	andi	r24, 0xF8	; 248
    552c:	83 60       	ori	r24, 0x03	; 3
    552e:	80 83       	st	Z, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    5530:	8c b1       	in	r24, 0x0c	; 12
    5532:	8e 7f       	andi	r24, 0xFE	; 254
    5534:	8c b9       	out	0x0c, r24	; 12
    5536:	8c b1       	in	r24, 0x0c	; 12
    5538:	8d 7f       	andi	r24, 0xFD	; 253
    553a:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    553c:	a1 e7       	ldi	r26, 0x71	; 113
    553e:	b4 e0       	ldi	r27, 0x04	; 4
    5540:	8c 91       	ld	r24, X
    5542:	88 60       	ori	r24, 0x08	; 8
    5544:	8c 93       	st	X, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5546:	8c 91       	ld	r24, X
    5548:	88 7f       	andi	r24, 0xF8	; 248
    554a:	83 60       	ori	r24, 0x03	; 3
    554c:	8c 93       	st	X, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    554e:	8c b1       	in	r24, 0x0c	; 12
    5550:	8f 77       	andi	r24, 0x7F	; 127
    5552:	8c b9       	out	0x0c, r24	; 12
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    5554:	80 81       	ld	r24, Z
    5556:	87 7f       	andi	r24, 0xF7	; 247
    5558:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    555a:	e0 e9       	ldi	r30, 0x90	; 144
    555c:	f4 e0       	ldi	r31, 0x04	; 4
    555e:	80 81       	ld	r24, Z
    5560:	88 60       	ori	r24, 0x08	; 8
    5562:	80 83       	st	Z, r24
    5564:	e1 e9       	ldi	r30, 0x91	; 145
    5566:	f4 e0       	ldi	r31, 0x04	; 4
    5568:	80 81       	ld	r24, Z
    556a:	88 60       	ori	r24, 0x08	; 8
    556c:	80 83       	st	Z, r24
    556e:	e2 e9       	ldi	r30, 0x92	; 146
    5570:	f4 e0       	ldi	r31, 0x04	; 4
    5572:	80 81       	ld	r24, Z
    5574:	88 60       	ori	r24, 0x08	; 8
    5576:	80 83       	st	Z, r24
    5578:	e3 e9       	ldi	r30, 0x93	; 147
    557a:	f4 e0       	ldi	r31, 0x04	; 4
    557c:	80 81       	ld	r24, Z
    557e:	88 60       	ori	r24, 0x08	; 8
    5580:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    5582:	e2 eb       	ldi	r30, 0xB2	; 178
    5584:	f4 e0       	ldi	r31, 0x04	; 4
    5586:	80 81       	ld	r24, Z
    5588:	88 60       	ori	r24, 0x08	; 8
    558a:	80 83       	st	Z, r24
    558c:	e3 eb       	ldi	r30, 0xB3	; 179
    558e:	f4 e0       	ldi	r31, 0x04	; 4
    5590:	80 81       	ld	r24, Z
    5592:	88 60       	ori	r24, 0x08	; 8
    5594:	80 83       	st	Z, r24
    5596:	e4 eb       	ldi	r30, 0xB4	; 180
    5598:	f4 e0       	ldi	r31, 0x04	; 4
    559a:	80 81       	ld	r24, Z
    559c:	88 60       	ori	r24, 0x08	; 8
    559e:	80 83       	st	Z, r24
    55a0:	e5 eb       	ldi	r30, 0xB5	; 181
    55a2:	f4 e0       	ldi	r31, 0x04	; 4
    55a4:	80 81       	ld	r24, Z
    55a6:	88 60       	ori	r24, 0x08	; 8
    55a8:	80 83       	st	Z, r24
    55aa:	08 95       	ret

000055ac <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    55ac:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    55b0:	80 e0       	ldi	r24, 0x00	; 0
    55b2:	08 95       	ret

000055b4 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    55b4:	44 e2       	ldi	r20, 0x24	; 36
    55b6:	68 ed       	ldi	r22, 0xD8	; 216
    55b8:	88 e6       	ldi	r24, 0x68	; 104
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	0e 94 11 3b 	call	0x7622	; 0x7622 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    55c0:	80 e0       	ldi	r24, 0x00	; 0
    55c2:	08 95       	ret

000055c4 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    55c4:	78 94       	sei

	return 0;
}
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	08 95       	ret

000055ca <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    55ca:	83 e0       	ldi	r24, 0x03	; 3
    55cc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
    55d0:	6a e0       	ldi	r22, 0x0A	; 10
    55d2:	70 e0       	ldi	r23, 0x00	; 0
    55d4:	80 e0       	ldi	r24, 0x00	; 0
    55d6:	90 e0       	ldi	r25, 0x00	; 0
    55d8:	0e 94 61 44 	call	0x88c2	; 0x88c2 <util_delay_ms>
    55dc:	81 11       	cpse	r24, r1
    55de:	f8 cf       	rjmp	.-16     	; 0x55d0 <_ZL9VREF_initv+0x6>
}
    55e0:	08 95       	ret

000055e2 <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    55e2:	28 2f       	mov	r18, r24
    55e4:	22 95       	swap	r18
    55e6:	22 0f       	add	r18, r18
    55e8:	22 0f       	add	r18, r18
    55ea:	20 7c       	andi	r18, 0xC0	; 192
    55ec:	e0 ea       	ldi	r30, 0xA0	; 160
    55ee:	f6 e0       	ldi	r31, 0x06	; 6
    55f0:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    55f2:	96 95       	lsr	r25
    55f4:	87 95       	ror	r24
    55f6:	96 95       	lsr	r25
    55f8:	87 95       	ror	r24
    55fa:	83 83       	std	Z+3, r24	; 0x03
    55fc:	08 95       	ret

000055fe <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    55fe:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    5602:	e0 e6       	ldi	r30, 0x60	; 96
    5604:	f4 e0       	ldi	r31, 0x04	; 4
    5606:	86 89       	ldd	r24, Z+22	; 0x16
    5608:	88 7f       	andi	r24, 0xF8	; 248
    560a:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    560c:	86 89       	ldd	r24, Z+22	; 0x16
    560e:	84 60       	ori	r24, 0x04	; 4
    5610:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    5612:	86 89       	ldd	r24, Z+22	; 0x16
    5614:	87 7f       	andi	r24, 0xF7	; 247
    5616:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    5618:	81 ec       	ldi	r24, 0xC1	; 193
    561a:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    561e:	80 e0       	ldi	r24, 0x00	; 0
    5620:	90 e0       	ldi	r25, 0x00	; 0
    5622:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_Z11DAC0_setValj>
    5626:	08 95       	ret

00005628 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	88 30       	cpi	r24, 0x08	; 8
    562c:	48 f4       	brcc	.+18     	; 0x5640 <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    562e:	e8 2f       	mov	r30, r24
    5630:	f0 e0       	ldi	r31, 0x00	; 0
    5632:	e0 5f       	subi	r30, 0xF0	; 240
    5634:	fb 4f       	sbci	r31, 0xFB	; 251
    5636:	90 81       	ld	r25, Z
    5638:	98 60       	ori	r25, 0x08	; 8
    563a:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    563c:	8f 5f       	subi	r24, 0xFF	; 255
    563e:	f5 cf       	rjmp	.-22     	; 0x562a <mcu_init+0x2>
    5640:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5642:	88 30       	cpi	r24, 0x08	; 8
    5644:	48 f4       	brcc	.+18     	; 0x5658 <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5646:	e8 2f       	mov	r30, r24
    5648:	f0 e0       	ldi	r31, 0x00	; 0
    564a:	e0 5d       	subi	r30, 0xD0	; 208
    564c:	fb 4f       	sbci	r31, 0xFB	; 251
    564e:	90 81       	ld	r25, Z
    5650:	98 60       	ori	r25, 0x08	; 8
    5652:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5654:	8f 5f       	subi	r24, 0xFF	; 255
    5656:	f5 cf       	rjmp	.-22     	; 0x5642 <mcu_init+0x1a>
    5658:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    565a:	88 30       	cpi	r24, 0x08	; 8
    565c:	48 f4       	brcc	.+18     	; 0x5670 <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    565e:	e8 2f       	mov	r30, r24
    5660:	f0 e0       	ldi	r31, 0x00	; 0
    5662:	e0 5b       	subi	r30, 0xB0	; 176
    5664:	fb 4f       	sbci	r31, 0xFB	; 251
    5666:	90 81       	ld	r25, Z
    5668:	98 60       	ori	r25, 0x08	; 8
    566a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    566c:	8f 5f       	subi	r24, 0xFF	; 255
    566e:	f5 cf       	rjmp	.-22     	; 0x565a <mcu_init+0x32>
    5670:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5672:	88 30       	cpi	r24, 0x08	; 8
    5674:	48 f4       	brcc	.+18     	; 0x5688 <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5676:	e8 2f       	mov	r30, r24
    5678:	f0 e0       	ldi	r31, 0x00	; 0
    567a:	e0 59       	subi	r30, 0x90	; 144
    567c:	fb 4f       	sbci	r31, 0xFB	; 251
    567e:	90 81       	ld	r25, Z
    5680:	98 60       	ori	r25, 0x08	; 8
    5682:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5684:	8f 5f       	subi	r24, 0xFF	; 255
    5686:	f5 cf       	rjmp	.-22     	; 0x5672 <mcu_init+0x4a>
    5688:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    568a:	88 30       	cpi	r24, 0x08	; 8
    568c:	48 f4       	brcc	.+18     	; 0x56a0 <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    568e:	e8 2f       	mov	r30, r24
    5690:	f0 e0       	ldi	r31, 0x00	; 0
    5692:	e0 57       	subi	r30, 0x70	; 112
    5694:	fb 4f       	sbci	r31, 0xFB	; 251
    5696:	90 81       	ld	r25, Z
    5698:	98 60       	ori	r25, 0x08	; 8
    569a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    569c:	8f 5f       	subi	r24, 0xFF	; 255
    569e:	f5 cf       	rjmp	.-22     	; 0x568a <mcu_init+0x62>
    56a0:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    56a2:	88 30       	cpi	r24, 0x08	; 8
    56a4:	48 f4       	brcc	.+18     	; 0x56b8 <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    56a6:	e8 2f       	mov	r30, r24
    56a8:	f0 e0       	ldi	r31, 0x00	; 0
    56aa:	e0 55       	subi	r30, 0x50	; 80
    56ac:	fb 4f       	sbci	r31, 0xFB	; 251
    56ae:	90 81       	ld	r25, Z
    56b0:	98 60       	ori	r25, 0x08	; 8
    56b2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    56b4:	8f 5f       	subi	r24, 0xFF	; 255
    56b6:	f5 cf       	rjmp	.-22     	; 0x56a2 <mcu_init+0x7a>
    56b8:	08 95       	ret

000056ba <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    56ba:	0e 94 14 2b 	call	0x5628	; 0x5628 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    56be:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
    56c2:	0e 94 44 44 	call	0x8888	; 0x8888 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    56c6:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <CPUINT_init>
	BINIO_init();
    56ca:	0e 94 38 2a 	call	0x5470	; 0x5470 <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    56ce:	88 b1       	in	r24, 0x08	; 8
    56d0:	80 64       	ori	r24, 0x40	; 64
    56d2:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    56d4:	89 b1       	in	r24, 0x09	; 9
    56d6:	80 64       	ori	r24, 0x40	; 64
    56d8:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    56da:	0e 94 42 44 	call	0x8884	; 0x8884 <SLPCTRL_init>
	
	DAC0_init();
    56de:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <_Z9DAC0_initv>

	linkbus_init(LB_BAUD, LINKBUS_USART);
    56e2:	44 e0       	ldi	r20, 0x04	; 4
    56e4:	60 e8       	ldi	r22, 0x80	; 128
    56e6:	75 e2       	ldi	r23, 0x25	; 37
    56e8:	80 e0       	ldi	r24, 0x00	; 0
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <_Z12linkbus_initm14USART_Number_t>
	serialbus_init(SB_BAUD, SERIALBUS_USART);
    56f0:	41 e0       	ldi	r20, 0x01	; 1
    56f2:	60 e8       	ldi	r22, 0x80	; 128
    56f4:	75 e2       	ldi	r23, 0x25	; 37
    56f6:	80 e0       	ldi	r24, 0x00	; 0
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	0e 94 17 3c 	call	0x782e	; 0x782e <serialbus_init>

	BOD_init();
    56fe:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <BOD_init>
    5702:	08 95       	ret

00005704 <_Z7bcd2dech>:
				*val = second + 10 * second10 + 60 * (int32_t)minute + 600 * (int32_t)minute10 +  3600 * (int32_t)hour + 36000 * (int32_t)hour10;
			}
		}
		
		return(failure);
	}
    5704:	28 2f       	mov	r18, r24
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	35 95       	asr	r19
    570a:	27 95       	ror	r18
    570c:	35 95       	asr	r19
    570e:	27 95       	ror	r18
    5710:	35 95       	asr	r19
    5712:	27 95       	ror	r18
    5714:	35 95       	asr	r19
    5716:	27 95       	ror	r18
    5718:	22 0f       	add	r18, r18
    571a:	92 2f       	mov	r25, r18
    571c:	99 0f       	add	r25, r25
    571e:	99 0f       	add	r25, r25
    5720:	29 0f       	add	r18, r25
    5722:	8f 70       	andi	r24, 0x0F	; 15
    5724:	82 0f       	add	r24, r18
    5726:	08 95       	ret

00005728 <_Z7dec2bcdh>:
    5728:	2d ec       	ldi	r18, 0xCD	; 205
    572a:	82 9f       	mul	r24, r18
    572c:	21 2d       	mov	r18, r1
    572e:	11 24       	eor	r1, r1
    5730:	92 2f       	mov	r25, r18
    5732:	96 95       	lsr	r25
    5734:	96 95       	lsr	r25
    5736:	96 95       	lsr	r25
    5738:	99 0f       	add	r25, r25
    573a:	39 2f       	mov	r19, r25
    573c:	33 0f       	add	r19, r19
    573e:	33 0f       	add	r19, r19
    5740:	93 0f       	add	r25, r19
    5742:	89 1b       	sub	r24, r25
    5744:	98 2f       	mov	r25, r24
    5746:	26 95       	lsr	r18
    5748:	26 95       	lsr	r18
    574a:	26 95       	lsr	r18
    574c:	80 e1       	ldi	r24, 0x10	; 16
    574e:	28 9f       	mul	r18, r24
    5750:	90 01       	movw	r18, r0
    5752:	11 24       	eor	r1, r1
    5754:	89 2f       	mov	r24, r25
    5756:	82 2b       	or	r24, r18
    5758:	08 95       	ret

0000575a <_Z8char2bcdPc>:
    575a:	fc 01       	movw	r30, r24
    575c:	20 81       	ld	r18, Z
    575e:	81 81       	ldd	r24, Z+1	; 0x01
    5760:	f0 e1       	ldi	r31, 0x10	; 16
    5762:	2f 9f       	mul	r18, r31
    5764:	80 0d       	add	r24, r0
    5766:	11 24       	eor	r1, r1
    5768:	80 53       	subi	r24, 0x30	; 48
    576a:	08 95       	ret

0000576c <_Z14epoch_from_ltmP2tm>:
    576c:	cf 92       	push	r12
    576e:	df 92       	push	r13
    5770:	ef 92       	push	r14
    5772:	ff 92       	push	r15
    5774:	fc 01       	movw	r30, r24
    5776:	80 81       	ld	r24, Z
    5778:	21 81       	ldd	r18, Z+1	; 0x01
    577a:	08 2e       	mov	r0, r24
    577c:	00 0c       	add	r0, r0
    577e:	99 0b       	sbc	r25, r25
    5780:	ac 01       	movw	r20, r24
    5782:	3c e3       	ldi	r19, 0x3C	; 60
    5784:	23 02       	muls	r18, r19
    5786:	40 0d       	add	r20, r0
    5788:	51 1d       	adc	r21, r1
    578a:	11 24       	eor	r1, r1
    578c:	a2 81       	ldd	r26, Z+2	; 0x02
    578e:	0a 2e       	mov	r0, r26
    5790:	00 0c       	add	r0, r0
    5792:	bb 0b       	sbc	r27, r27
    5794:	20 e1       	ldi	r18, 0x10	; 16
    5796:	3e e0       	ldi	r19, 0x0E	; 14
    5798:	0e 94 1b 4d 	call	0x9a36	; 0x9a36 <__usmulhisi3>
    579c:	6a 01       	movw	r12, r20
    579e:	55 0f       	add	r21, r21
    57a0:	ee 08       	sbc	r14, r14
    57a2:	ff 08       	sbc	r15, r15
    57a4:	c6 0e       	add	r12, r22
    57a6:	d7 1e       	adc	r13, r23
    57a8:	e8 1e       	adc	r14, r24
    57aa:	f9 1e       	adc	r15, r25
    57ac:	a0 85       	ldd	r26, Z+8	; 0x08
    57ae:	b1 85       	ldd	r27, Z+9	; 0x09
    57b0:	20 e8       	ldi	r18, 0x80	; 128
    57b2:	31 e5       	ldi	r19, 0x51	; 81
    57b4:	41 e0       	ldi	r20, 0x01	; 1
    57b6:	50 e0       	ldi	r21, 0x00	; 0
    57b8:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    57bc:	c6 0e       	add	r12, r22
    57be:	d7 1e       	adc	r13, r23
    57c0:	e8 1e       	adc	r14, r24
    57c2:	f9 1e       	adc	r15, r25
    57c4:	06 80       	ldd	r0, Z+6	; 0x06
    57c6:	f7 81       	ldd	r31, Z+7	; 0x07
    57c8:	e0 2d       	mov	r30, r0
    57ca:	df 01       	movw	r26, r30
    57cc:	a6 54       	subi	r26, 0x46	; 70
    57ce:	b1 09       	sbc	r27, r1
    57d0:	20 e8       	ldi	r18, 0x80	; 128
    57d2:	33 e3       	ldi	r19, 0x33	; 51
    57d4:	41 ee       	ldi	r20, 0xE1	; 225
    57d6:	51 e0       	ldi	r21, 0x01	; 1
    57d8:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    57dc:	c6 0e       	add	r12, r22
    57de:	d7 1e       	adc	r13, r23
    57e0:	e8 1e       	adc	r14, r24
    57e2:	f9 1e       	adc	r15, r25
    57e4:	cf 01       	movw	r24, r30
    57e6:	85 54       	subi	r24, 0x45	; 69
    57e8:	91 09       	sbc	r25, r1
    57ea:	dc 01       	movw	r26, r24
    57ec:	0a f4       	brpl	.+2      	; 0x57f0 <_Z14epoch_from_ltmP2tm+0x84>
    57ee:	13 96       	adiw	r26, 0x03	; 3
    57f0:	b5 95       	asr	r27
    57f2:	a7 95       	ror	r26
    57f4:	b5 95       	asr	r27
    57f6:	a7 95       	ror	r26
    57f8:	20 e8       	ldi	r18, 0x80	; 128
    57fa:	31 e5       	ldi	r19, 0x51	; 81
    57fc:	41 e0       	ldi	r20, 0x01	; 1
    57fe:	50 e0       	ldi	r21, 0x00	; 0
    5800:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    5804:	c6 0e       	add	r12, r22
    5806:	d7 1e       	adc	r13, r23
    5808:	e8 1e       	adc	r14, r24
    580a:	f9 1e       	adc	r15, r25
    580c:	cf 01       	movw	r24, r30
    580e:	01 97       	sbiw	r24, 0x01	; 1
    5810:	64 e6       	ldi	r22, 0x64	; 100
    5812:	70 e0       	ldi	r23, 0x00	; 0
    5814:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
    5818:	db 01       	movw	r26, r22
    581a:	20 e8       	ldi	r18, 0x80	; 128
    581c:	3e ea       	ldi	r19, 0xAE	; 174
    581e:	4e ef       	ldi	r20, 0xFE	; 254
    5820:	5f ef       	ldi	r21, 0xFF	; 255
    5822:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    5826:	c6 0e       	add	r12, r22
    5828:	d7 1e       	adc	r13, r23
    582a:	e8 1e       	adc	r14, r24
    582c:	f9 1e       	adc	r15, r25
    582e:	cf 01       	movw	r24, r30
    5830:	85 5d       	subi	r24, 0xD5	; 213
    5832:	9e 4f       	sbci	r25, 0xFE	; 254
    5834:	60 e9       	ldi	r22, 0x90	; 144
    5836:	71 e0       	ldi	r23, 0x01	; 1
    5838:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
    583c:	db 01       	movw	r26, r22
    583e:	20 e8       	ldi	r18, 0x80	; 128
    5840:	31 e5       	ldi	r19, 0x51	; 81
    5842:	41 e0       	ldi	r20, 0x01	; 1
    5844:	50 e0       	ldi	r21, 0x00	; 0
    5846:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    584a:	6c 0d       	add	r22, r12
    584c:	7d 1d       	adc	r23, r13
    584e:	8e 1d       	adc	r24, r14
    5850:	9f 1d       	adc	r25, r15
    5852:	ff 90       	pop	r15
    5854:	ef 90       	pop	r14
    5856:	df 90       	pop	r13
    5858:	cf 90       	pop	r12
    585a:	08 95       	ret

0000585c <ds3231_get_epoch>:
    585c:	4f 92       	push	r4
    585e:	5f 92       	push	r5
    5860:	6f 92       	push	r6
    5862:	7f 92       	push	r7
    5864:	8f 92       	push	r8
    5866:	9f 92       	push	r9
    5868:	af 92       	push	r10
    586a:	bf 92       	push	r11
    586c:	cf 92       	push	r12
    586e:	df 92       	push	r13
    5870:	ef 92       	push	r14
    5872:	ff 92       	push	r15
    5874:	0f 93       	push	r16
    5876:	1f 93       	push	r17
    5878:	cf 93       	push	r28
    587a:	df 93       	push	r29
    587c:	cd b7       	in	r28, 0x3d	; 61
    587e:	de b7       	in	r29, 0x3e	; 62
    5880:	63 97       	sbiw	r28, 0x13	; 19
    5882:	cd bf       	out	0x3d, r28	; 61
    5884:	de bf       	out	0x3e, r29	; 62
    5886:	7c 01       	movw	r14, r24
    5888:	fe 01       	movw	r30, r28
    588a:	31 96       	adiw	r30, 0x01	; 1
    588c:	87 e0       	ldi	r24, 0x07	; 7
    588e:	df 01       	movw	r26, r30
    5890:	1d 92       	st	X+, r1
    5892:	8a 95       	dec	r24
    5894:	e9 f7       	brne	.-6      	; 0x5890 <ds3231_get_epoch+0x34>
    5896:	8a e0       	ldi	r24, 0x0A	; 10
    5898:	1f ef       	ldi	r17, 0xFF	; 255
    589a:	18 0f       	add	r17, r24
    589c:	88 23       	and	r24, r24
    589e:	81 f0       	breq	.+32     	; 0x58c0 <ds3231_get_epoch+0x64>
    58a0:	27 e0       	ldi	r18, 0x07	; 7
    58a2:	ae 01       	movw	r20, r28
    58a4:	4f 5f       	subi	r20, 0xFF	; 255
    58a6:	5f 4f       	sbci	r21, 0xFF	; 255
    58a8:	60 e0       	ldi	r22, 0x00	; 0
    58aa:	80 ed       	ldi	r24, 0xD0	; 208
    58ac:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <I2C_0_GetData>
    58b0:	01 e0       	ldi	r16, 0x01	; 1
    58b2:	87 30       	cpi	r24, 0x07	; 7
    58b4:	09 f4       	brne	.+2      	; 0x58b8 <ds3231_get_epoch+0x5c>
    58b6:	00 e0       	ldi	r16, 0x00	; 0
    58b8:	87 30       	cpi	r24, 0x07	; 7
    58ba:	21 f0       	breq	.+8      	; 0x58c4 <ds3231_get_epoch+0x68>
    58bc:	91 e0       	ldi	r25, 0x01	; 1
    58be:	03 c0       	rjmp	.+6      	; 0x58c6 <ds3231_get_epoch+0x6a>
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	01 c0       	rjmp	.+2      	; 0x58c6 <ds3231_get_epoch+0x6a>
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	81 2f       	mov	r24, r17
    58c8:	91 11       	cpse	r25, r1
    58ca:	e6 cf       	rjmp	.-52     	; 0x5898 <ds3231_get_epoch+0x3c>
    58cc:	01 11       	cpse	r16, r1
    58ce:	f3 c0       	rjmp	.+486    	; 0x5ab6 <ds3231_get_epoch+0x25a>
    58d0:	fe 01       	movw	r30, r28
    58d2:	38 96       	adiw	r30, 0x08	; 8
    58d4:	8c e0       	ldi	r24, 0x0C	; 12
    58d6:	df 01       	movw	r26, r30
    58d8:	1d 92       	st	X+, r1
    58da:	8a 95       	dec	r24
    58dc:	e9 f7       	brne	.-6      	; 0x58d8 <ds3231_get_epoch+0x7c>
    58de:	2f 81       	ldd	r18, Y+7	; 0x07
    58e0:	82 2f       	mov	r24, r18
    58e2:	8f 70       	andi	r24, 0x0F	; 15
    58e4:	a8 2e       	mov	r10, r24
    58e6:	b1 2c       	mov	r11, r1
    58e8:	c5 01       	movw	r24, r10
    58ea:	8c 59       	subi	r24, 0x9C	; 156
    58ec:	9f 4f       	sbci	r25, 0xFF	; 255
    58ee:	22 95       	swap	r18
    58f0:	2f 70       	andi	r18, 0x0F	; 15
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	59 01       	movw	r10, r18
    58f6:	aa 0c       	add	r10, r10
    58f8:	bb 1c       	adc	r11, r11
    58fa:	22 0f       	add	r18, r18
    58fc:	33 1f       	adc	r19, r19
    58fe:	22 0f       	add	r18, r18
    5900:	33 1f       	adc	r19, r19
    5902:	22 0f       	add	r18, r18
    5904:	33 1f       	adc	r19, r19
    5906:	2a 0d       	add	r18, r10
    5908:	3b 1d       	adc	r19, r11
    590a:	5c 01       	movw	r10, r24
    590c:	a2 0e       	add	r10, r18
    590e:	b3 1e       	adc	r11, r19
    5910:	65 01       	movw	r12, r10
    5912:	b4 e9       	ldi	r27, 0x94	; 148
    5914:	cb 1a       	sub	r12, r27
    5916:	b8 ef       	ldi	r27, 0xF8	; 248
    5918:	db 0a       	sbc	r13, r27
    591a:	8e 81       	ldd	r24, Y+6	; 0x06
    591c:	98 2f       	mov	r25, r24
    591e:	9f 70       	andi	r25, 0x0F	; 15
    5920:	82 95       	swap	r24
    5922:	8f 70       	andi	r24, 0x0F	; 15
    5924:	88 0f       	add	r24, r24
    5926:	98 2e       	mov	r9, r24
    5928:	99 0c       	add	r9, r9
    592a:	99 0c       	add	r9, r9
    592c:	89 0d       	add	r24, r9
    592e:	98 2e       	mov	r9, r24
    5930:	99 0e       	add	r9, r25
    5932:	ed 81       	ldd	r30, Y+5	; 0x05
    5934:	8e 2f       	mov	r24, r30
    5936:	8f 70       	andi	r24, 0x0F	; 15
    5938:	e2 95       	swap	r30
    593a:	ef 70       	andi	r30, 0x0F	; 15
    593c:	ee 0f       	add	r30, r30
    593e:	8e 2e       	mov	r8, r30
    5940:	88 0c       	add	r8, r8
    5942:	88 0c       	add	r8, r8
    5944:	e8 0d       	add	r30, r8
    5946:	8e 2e       	mov	r8, r30
    5948:	88 0e       	add	r8, r24
    594a:	11 e0       	ldi	r17, 0x01	; 1
    594c:	19 15       	cp	r17, r9
    594e:	60 f4       	brcc	.+24     	; 0x5968 <ds3231_get_epoch+0x10c>
    5950:	61 2f       	mov	r22, r17
    5952:	c6 01       	movw	r24, r12
    5954:	0e 94 47 02 	call	0x48e	; 0x48e <month_length>
    5958:	28 89       	ldd	r18, Y+16	; 0x10
    595a:	39 89       	ldd	r19, Y+17	; 0x11
    595c:	28 0f       	add	r18, r24
    595e:	31 1d       	adc	r19, r1
    5960:	28 8b       	std	Y+16, r18	; 0x10
    5962:	39 8b       	std	Y+17, r19	; 0x11
    5964:	1f 5f       	subi	r17, 0xFF	; 255
    5966:	f2 cf       	rjmp	.-28     	; 0x594c <ds3231_get_epoch+0xf0>
    5968:	e8 2d       	mov	r30, r8
    596a:	88 0c       	add	r8, r8
    596c:	ff 0b       	sbc	r31, r31
    596e:	31 97       	sbiw	r30, 0x01	; 1
    5970:	88 89       	ldd	r24, Y+16	; 0x10
    5972:	99 89       	ldd	r25, Y+17	; 0x11
    5974:	e8 0f       	add	r30, r24
    5976:	f9 1f       	adc	r31, r25
    5978:	29 81       	ldd	r18, Y+1	; 0x01
    597a:	42 2f       	mov	r20, r18
    597c:	42 95       	swap	r20
    597e:	4f 70       	andi	r20, 0x0F	; 15
    5980:	44 0f       	add	r20, r20
    5982:	94 2f       	mov	r25, r20
    5984:	99 0f       	add	r25, r25
    5986:	99 0f       	add	r25, r25
    5988:	84 2f       	mov	r24, r20
    598a:	89 0f       	add	r24, r25
    598c:	42 2f       	mov	r20, r18
    598e:	4f 70       	andi	r20, 0x0F	; 15
    5990:	48 0f       	add	r20, r24
    5992:	3a 81       	ldd	r19, Y+2	; 0x02
    5994:	23 2f       	mov	r18, r19
    5996:	22 95       	swap	r18
    5998:	2f 70       	andi	r18, 0x0F	; 15
    599a:	22 0f       	add	r18, r18
    599c:	92 2f       	mov	r25, r18
    599e:	99 0f       	add	r25, r25
    59a0:	99 0f       	add	r25, r25
    59a2:	82 2f       	mov	r24, r18
    59a4:	89 0f       	add	r24, r25
    59a6:	23 2f       	mov	r18, r19
    59a8:	2f 70       	andi	r18, 0x0F	; 15
    59aa:	28 0f       	add	r18, r24
    59ac:	3b 81       	ldd	r19, Y+3	; 0x03
    59ae:	53 2f       	mov	r21, r19
    59b0:	50 72       	andi	r21, 0x20	; 32
    59b2:	83 2f       	mov	r24, r19
    59b4:	90 e0       	ldi	r25, 0x00	; 0
    59b6:	95 95       	asr	r25
    59b8:	87 95       	ror	r24
    59ba:	95 95       	asr	r25
    59bc:	87 95       	ror	r24
    59be:	95 95       	asr	r25
    59c0:	87 95       	ror	r24
    59c2:	95 95       	asr	r25
    59c4:	87 95       	ror	r24
    59c6:	81 70       	andi	r24, 0x01	; 1
    59c8:	88 0f       	add	r24, r24
    59ca:	a8 2f       	mov	r26, r24
    59cc:	aa 0f       	add	r26, r26
    59ce:	aa 0f       	add	r26, r26
    59d0:	8a 0f       	add	r24, r26
    59d2:	a3 2f       	mov	r26, r19
    59d4:	af 70       	andi	r26, 0x0F	; 15
    59d6:	a8 0f       	add	r26, r24
    59d8:	36 ff       	sbrs	r19, 6
    59da:	04 c0       	rjmp	.+8      	; 0x59e4 <ds3231_get_epoch+0x188>
    59dc:	55 23       	and	r21, r21
    59de:	21 f0       	breq	.+8      	; 0x59e8 <ds3231_get_epoch+0x18c>
    59e0:	a4 5f       	subi	r26, 0xF4	; 244
    59e2:	02 c0       	rjmp	.+4      	; 0x59e8 <ds3231_get_epoch+0x18c>
    59e4:	51 11       	cpse	r21, r1
    59e6:	ac 5e       	subi	r26, 0xEC	; 236
    59e8:	04 2e       	mov	r0, r20
    59ea:	00 0c       	add	r0, r0
    59ec:	55 0b       	sbc	r21, r21
    59ee:	8c e3       	ldi	r24, 0x3C	; 60
    59f0:	28 02       	muls	r18, r24
    59f2:	40 0d       	add	r20, r0
    59f4:	51 1d       	adc	r21, r1
    59f6:	11 24       	eor	r1, r1
    59f8:	0a 2e       	mov	r0, r26
    59fa:	00 0c       	add	r0, r0
    59fc:	bb 0b       	sbc	r27, r27
    59fe:	20 e1       	ldi	r18, 0x10	; 16
    5a00:	3e e0       	ldi	r19, 0x0E	; 14
    5a02:	0e 94 1b 4d 	call	0x9a36	; 0x9a36 <__usmulhisi3>
    5a06:	2a 01       	movw	r4, r20
    5a08:	55 0f       	add	r21, r21
    5a0a:	66 08       	sbc	r6, r6
    5a0c:	77 08       	sbc	r7, r7
    5a0e:	46 0e       	add	r4, r22
    5a10:	57 1e       	adc	r5, r23
    5a12:	68 1e       	adc	r6, r24
    5a14:	79 1e       	adc	r7, r25
    5a16:	df 01       	movw	r26, r30
    5a18:	20 e8       	ldi	r18, 0x80	; 128
    5a1a:	31 e5       	ldi	r19, 0x51	; 81
    5a1c:	41 e0       	ldi	r20, 0x01	; 1
    5a1e:	50 e0       	ldi	r21, 0x00	; 0
    5a20:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    5a24:	46 0e       	add	r4, r22
    5a26:	57 1e       	adc	r5, r23
    5a28:	68 1e       	adc	r6, r24
    5a2a:	79 1e       	adc	r7, r25
    5a2c:	d5 01       	movw	r26, r10
    5a2e:	a6 54       	subi	r26, 0x46	; 70
    5a30:	b1 09       	sbc	r27, r1
    5a32:	20 e8       	ldi	r18, 0x80	; 128
    5a34:	33 e3       	ldi	r19, 0x33	; 51
    5a36:	41 ee       	ldi	r20, 0xE1	; 225
    5a38:	51 e0       	ldi	r21, 0x01	; 1
    5a3a:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    5a3e:	46 0e       	add	r4, r22
    5a40:	57 1e       	adc	r5, r23
    5a42:	68 1e       	adc	r6, r24
    5a44:	79 1e       	adc	r7, r25
    5a46:	c5 01       	movw	r24, r10
    5a48:	85 54       	subi	r24, 0x45	; 69
    5a4a:	91 09       	sbc	r25, r1
    5a4c:	dc 01       	movw	r26, r24
    5a4e:	0a f4       	brpl	.+2      	; 0x5a52 <ds3231_get_epoch+0x1f6>
    5a50:	13 96       	adiw	r26, 0x03	; 3
    5a52:	b5 95       	asr	r27
    5a54:	a7 95       	ror	r26
    5a56:	b5 95       	asr	r27
    5a58:	a7 95       	ror	r26
    5a5a:	20 e8       	ldi	r18, 0x80	; 128
    5a5c:	31 e5       	ldi	r19, 0x51	; 81
    5a5e:	41 e0       	ldi	r20, 0x01	; 1
    5a60:	50 e0       	ldi	r21, 0x00	; 0
    5a62:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    5a66:	46 0e       	add	r4, r22
    5a68:	57 1e       	adc	r5, r23
    5a6a:	68 1e       	adc	r6, r24
    5a6c:	79 1e       	adc	r7, r25
    5a6e:	c5 01       	movw	r24, r10
    5a70:	01 97       	sbiw	r24, 0x01	; 1
    5a72:	64 e6       	ldi	r22, 0x64	; 100
    5a74:	70 e0       	ldi	r23, 0x00	; 0
    5a76:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
    5a7a:	db 01       	movw	r26, r22
    5a7c:	20 e8       	ldi	r18, 0x80	; 128
    5a7e:	3e ea       	ldi	r19, 0xAE	; 174
    5a80:	4e ef       	ldi	r20, 0xFE	; 254
    5a82:	5f ef       	ldi	r21, 0xFF	; 255
    5a84:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    5a88:	46 0e       	add	r4, r22
    5a8a:	57 1e       	adc	r5, r23
    5a8c:	68 1e       	adc	r6, r24
    5a8e:	79 1e       	adc	r7, r25
    5a90:	c5 01       	movw	r24, r10
    5a92:	85 5d       	subi	r24, 0xD5	; 213
    5a94:	9e 4f       	sbci	r25, 0xFE	; 254
    5a96:	60 e9       	ldi	r22, 0x90	; 144
    5a98:	71 e0       	ldi	r23, 0x01	; 1
    5a9a:	0e 94 ae 4c 	call	0x995c	; 0x995c <__divmodhi4>
    5a9e:	db 01       	movw	r26, r22
    5aa0:	20 e8       	ldi	r18, 0x80	; 128
    5aa2:	31 e5       	ldi	r19, 0x51	; 81
    5aa4:	41 e0       	ldi	r20, 0x01	; 1
    5aa6:	50 e0       	ldi	r21, 0x00	; 0
    5aa8:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <__mulshisi3>
    5aac:	64 0d       	add	r22, r4
    5aae:	75 1d       	adc	r23, r5
    5ab0:	86 1d       	adc	r24, r6
    5ab2:	97 1d       	adc	r25, r7
    5ab4:	03 c0       	rjmp	.+6      	; 0x5abc <ds3231_get_epoch+0x260>
    5ab6:	60 e0       	ldi	r22, 0x00	; 0
    5ab8:	70 e0       	ldi	r23, 0x00	; 0
    5aba:	cb 01       	movw	r24, r22
    5abc:	e1 14       	cp	r14, r1
    5abe:	f1 04       	cpc	r15, r1
    5ac0:	39 f0       	breq	.+14     	; 0x5ad0 <ds3231_get_epoch+0x274>
    5ac2:	00 23       	and	r16, r16
    5ac4:	11 f0       	breq	.+4      	; 0x5aca <ds3231_get_epoch+0x26e>
    5ac6:	2c ef       	ldi	r18, 0xFC	; 252
    5ac8:	01 c0       	rjmp	.+2      	; 0x5acc <ds3231_get_epoch+0x270>
    5aca:	20 e0       	ldi	r18, 0x00	; 0
    5acc:	d7 01       	movw	r26, r14
    5ace:	2c 93       	st	X, r18
    5ad0:	63 96       	adiw	r28, 0x13	; 19
    5ad2:	cd bf       	out	0x3d, r28	; 61
    5ad4:	de bf       	out	0x3e, r29	; 62
    5ad6:	df 91       	pop	r29
    5ad8:	cf 91       	pop	r28
    5ada:	1f 91       	pop	r17
    5adc:	0f 91       	pop	r16
    5ade:	ff 90       	pop	r15
    5ae0:	ef 90       	pop	r14
    5ae2:	df 90       	pop	r13
    5ae4:	cf 90       	pop	r12
    5ae6:	bf 90       	pop	r11
    5ae8:	af 90       	pop	r10
    5aea:	9f 90       	pop	r9
    5aec:	8f 90       	pop	r8
    5aee:	7f 90       	pop	r7
    5af0:	6f 90       	pop	r6
    5af2:	5f 90       	pop	r5
    5af4:	4f 90       	pop	r4
    5af6:	08 95       	ret

00005af8 <RTC_String2Epoch>:
    5af8:	7f 92       	push	r7
    5afa:	8f 92       	push	r8
    5afc:	9f 92       	push	r9
    5afe:	af 92       	push	r10
    5b00:	bf 92       	push	r11
    5b02:	cf 92       	push	r12
    5b04:	df 92       	push	r13
    5b06:	ef 92       	push	r14
    5b08:	ff 92       	push	r15
    5b0a:	0f 93       	push	r16
    5b0c:	1f 93       	push	r17
    5b0e:	cf 93       	push	r28
    5b10:	df 93       	push	r29
    5b12:	cd b7       	in	r28, 0x3d	; 61
    5b14:	de b7       	in	r29, 0x3e	; 62
    5b16:	2c 97       	sbiw	r28, 0x0c	; 12
    5b18:	cd bf       	out	0x3d, r28	; 61
    5b1a:	de bf       	out	0x3e, r29	; 62
    5b1c:	6c 01       	movw	r12, r24
    5b1e:	8b 01       	movw	r16, r22
    5b20:	fe 01       	movw	r30, r28
    5b22:	31 96       	adiw	r30, 0x01	; 1
    5b24:	8c e0       	ldi	r24, 0x0C	; 12
    5b26:	df 01       	movw	r26, r30
    5b28:	1d 92       	st	X+, r1
    5b2a:	8a 95       	dec	r24
    5b2c:	e9 f7       	brne	.-6      	; 0x5b28 <RTC_String2Epoch+0x30>
    5b2e:	61 15       	cp	r22, r1
    5b30:	71 05       	cpc	r23, r1
    5b32:	09 f4       	brne	.+2      	; 0x5b36 <RTC_String2Epoch+0x3e>
    5b34:	63 c0       	rjmp	.+198    	; 0x5bfc <RTC_String2Epoch+0x104>
    5b36:	cb 01       	movw	r24, r22
    5b38:	0a 96       	adiw	r24, 0x0a	; 10
    5b3a:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5b3e:	a8 2e       	mov	r10, r24
    5b40:	c8 01       	movw	r24, r16
    5b42:	08 96       	adiw	r24, 0x08	; 8
    5b44:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5b48:	b8 2e       	mov	r11, r24
    5b4a:	c8 01       	movw	r24, r16
    5b4c:	06 96       	adiw	r24, 0x06	; 6
    5b4e:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5b52:	f8 2e       	mov	r15, r24
    5b54:	c8 01       	movw	r24, r16
    5b56:	04 96       	adiw	r24, 0x04	; 4
    5b58:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5b5c:	88 2e       	mov	r8, r24
    5b5e:	c8 01       	movw	r24, r16
    5b60:	02 96       	adiw	r24, 0x02	; 2
    5b62:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5b66:	78 2e       	mov	r7, r24
    5b68:	c8 01       	movw	r24, r16
    5b6a:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5b6e:	18 2f       	mov	r17, r24
    5b70:	8f 2d       	mov	r24, r15
    5b72:	0e 94 82 2b 	call	0x5704	; 0x5704 <_Z7bcd2dech>
    5b76:	98 2e       	mov	r9, r24
    5b78:	81 2f       	mov	r24, r17
    5b7a:	0e 94 82 2b 	call	0x5704	; 0x5704 <_Z7bcd2dech>
    5b7e:	e8 2e       	mov	r14, r24
    5b80:	f1 2c       	mov	r15, r1
    5b82:	c7 01       	movw	r24, r14
    5b84:	8c 59       	subi	r24, 0x9C	; 156
    5b86:	9f 4f       	sbci	r25, 0xFF	; 255
    5b88:	8f 83       	std	Y+7, r24	; 0x07
    5b8a:	98 87       	std	Y+8, r25	; 0x08
    5b8c:	b0 e3       	ldi	r27, 0x30	; 48
    5b8e:	eb 1a       	sub	r14, r27
    5b90:	b8 ef       	ldi	r27, 0xF8	; 248
    5b92:	fb 0a       	sbc	r15, r27
    5b94:	87 2d       	mov	r24, r7
    5b96:	0e 94 82 2b 	call	0x5704	; 0x5704 <_Z7bcd2dech>
    5b9a:	08 2f       	mov	r16, r24
    5b9c:	8f ef       	ldi	r24, 0xFF	; 255
    5b9e:	80 0f       	add	r24, r16
    5ba0:	8e 83       	std	Y+6, r24	; 0x06
    5ba2:	88 2d       	mov	r24, r8
    5ba4:	0e 94 82 2b 	call	0x5704	; 0x5704 <_Z7bcd2dech>
    5ba8:	8c 83       	std	Y+4, r24	; 0x04
    5baa:	11 e0       	ldi	r17, 0x01	; 1
    5bac:	10 17       	cp	r17, r16
    5bae:	60 f4       	brcc	.+24     	; 0x5bc8 <RTC_String2Epoch+0xd0>
    5bb0:	61 2f       	mov	r22, r17
    5bb2:	c7 01       	movw	r24, r14
    5bb4:	0e 94 47 02 	call	0x48e	; 0x48e <month_length>
    5bb8:	29 85       	ldd	r18, Y+9	; 0x09
    5bba:	3a 85       	ldd	r19, Y+10	; 0x0a
    5bbc:	28 0f       	add	r18, r24
    5bbe:	31 1d       	adc	r19, r1
    5bc0:	29 87       	std	Y+9, r18	; 0x09
    5bc2:	3a 87       	std	Y+10, r19	; 0x0a
    5bc4:	1f 5f       	subi	r17, 0xFF	; 255
    5bc6:	f2 cf       	rjmp	.-28     	; 0x5bac <RTC_String2Epoch+0xb4>
    5bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    5bca:	08 2e       	mov	r0, r24
    5bcc:	00 0c       	add	r0, r0
    5bce:	99 0b       	sbc	r25, r25
    5bd0:	01 97       	sbiw	r24, 0x01	; 1
    5bd2:	29 85       	ldd	r18, Y+9	; 0x09
    5bd4:	3a 85       	ldd	r19, Y+10	; 0x0a
    5bd6:	82 0f       	add	r24, r18
    5bd8:	93 1f       	adc	r25, r19
    5bda:	89 87       	std	Y+9, r24	; 0x09
    5bdc:	9a 87       	std	Y+10, r25	; 0x0a
    5bde:	8a 2d       	mov	r24, r10
    5be0:	0e 94 82 2b 	call	0x5704	; 0x5704 <_Z7bcd2dech>
    5be4:	18 2f       	mov	r17, r24
    5be6:	8b 2d       	mov	r24, r11
    5be8:	0e 94 82 2b 	call	0x5704	; 0x5704 <_Z7bcd2dech>
    5bec:	9b 82       	std	Y+3, r9	; 0x03
    5bee:	8a 83       	std	Y+2, r24	; 0x02
    5bf0:	19 83       	std	Y+1, r17	; 0x01
    5bf2:	ce 01       	movw	r24, r28
    5bf4:	01 96       	adiw	r24, 0x01	; 1
    5bf6:	0e 94 b6 2b 	call	0x576c	; 0x576c <_Z14epoch_from_ltmP2tm>
    5bfa:	04 c0       	rjmp	.+8      	; 0x5c04 <RTC_String2Epoch+0x10c>
    5bfc:	80 e0       	ldi	r24, 0x00	; 0
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	0e 94 2e 2c 	call	0x585c	; 0x585c <ds3231_get_epoch>
    5c04:	c1 14       	cp	r12, r1
    5c06:	d1 04       	cpc	r13, r1
    5c08:	49 f0       	breq	.+18     	; 0x5c1c <RTC_String2Epoch+0x124>
    5c0a:	21 e0       	ldi	r18, 0x01	; 1
    5c0c:	61 15       	cp	r22, r1
    5c0e:	71 05       	cpc	r23, r1
    5c10:	81 05       	cpc	r24, r1
    5c12:	91 05       	cpc	r25, r1
    5c14:	09 f0       	breq	.+2      	; 0x5c18 <RTC_String2Epoch+0x120>
    5c16:	20 e0       	ldi	r18, 0x00	; 0
    5c18:	f6 01       	movw	r30, r12
    5c1a:	20 83       	st	Z, r18
    5c1c:	2c 96       	adiw	r28, 0x0c	; 12
    5c1e:	cd bf       	out	0x3d, r28	; 61
    5c20:	de bf       	out	0x3e, r29	; 62
    5c22:	df 91       	pop	r29
    5c24:	cf 91       	pop	r28
    5c26:	1f 91       	pop	r17
    5c28:	0f 91       	pop	r16
    5c2a:	ff 90       	pop	r15
    5c2c:	ef 90       	pop	r14
    5c2e:	df 90       	pop	r13
    5c30:	cf 90       	pop	r12
    5c32:	bf 90       	pop	r11
    5c34:	af 90       	pop	r10
    5c36:	9f 90       	pop	r9
    5c38:	8f 90       	pop	r8
    5c3a:	7f 90       	pop	r7
    5c3c:	08 95       	ret

00005c3e <ds3231_get_temp>:
    5c3e:	ef 92       	push	r14
    5c40:	ff 92       	push	r15
    5c42:	1f 93       	push	r17
    5c44:	cf 93       	push	r28
    5c46:	df 93       	push	r29
    5c48:	00 d0       	rcall	.+0      	; 0x5c4a <ds3231_get_temp+0xc>
    5c4a:	cd b7       	in	r28, 0x3d	; 61
    5c4c:	de b7       	in	r29, 0x3e	; 62
    5c4e:	7c 01       	movw	r14, r24
    5c50:	19 82       	std	Y+1, r1	; 0x01
    5c52:	1a 82       	std	Y+2, r1	; 0x02
    5c54:	8a e0       	ldi	r24, 0x0A	; 10
    5c56:	1f ef       	ldi	r17, 0xFF	; 255
    5c58:	18 0f       	add	r17, r24
    5c5a:	88 23       	and	r24, r24
    5c5c:	81 f0       	breq	.+32     	; 0x5c7e <ds3231_get_temp+0x40>
    5c5e:	22 e0       	ldi	r18, 0x02	; 2
    5c60:	ae 01       	movw	r20, r28
    5c62:	4f 5f       	subi	r20, 0xFF	; 255
    5c64:	5f 4f       	sbci	r21, 0xFF	; 255
    5c66:	61 e1       	ldi	r22, 0x11	; 17
    5c68:	80 ed       	ldi	r24, 0xD0	; 208
    5c6a:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <I2C_0_GetData>
    5c6e:	21 e0       	ldi	r18, 0x01	; 1
    5c70:	82 30       	cpi	r24, 0x02	; 2
    5c72:	09 f4       	brne	.+2      	; 0x5c76 <ds3231_get_temp+0x38>
    5c74:	20 e0       	ldi	r18, 0x00	; 0
    5c76:	82 30       	cpi	r24, 0x02	; 2
    5c78:	21 f0       	breq	.+8      	; 0x5c82 <ds3231_get_temp+0x44>
    5c7a:	91 e0       	ldi	r25, 0x01	; 1
    5c7c:	03 c0       	rjmp	.+6      	; 0x5c84 <ds3231_get_temp+0x46>
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	01 c0       	rjmp	.+2      	; 0x5c84 <ds3231_get_temp+0x46>
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	81 2f       	mov	r24, r17
    5c86:	91 11       	cpse	r25, r1
    5c88:	e6 cf       	rjmp	.-52     	; 0x5c56 <ds3231_get_temp+0x18>
    5c8a:	21 11       	cpse	r18, r1
    5c8c:	09 c0       	rjmp	.+18     	; 0x5ca0 <ds3231_get_temp+0x62>
    5c8e:	89 81       	ldd	r24, Y+1	; 0x01
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	98 2f       	mov	r25, r24
    5c94:	88 27       	eor	r24, r24
    5c96:	3a 81       	ldd	r19, Y+2	; 0x02
    5c98:	83 2b       	or	r24, r19
    5c9a:	f7 01       	movw	r30, r14
    5c9c:	80 83       	st	Z, r24
    5c9e:	91 83       	std	Z+1, r25	; 0x01
    5ca0:	82 2f       	mov	r24, r18
    5ca2:	0f 90       	pop	r0
    5ca4:	0f 90       	pop	r0
    5ca6:	df 91       	pop	r29
    5ca8:	cf 91       	pop	r28
    5caa:	1f 91       	pop	r17
    5cac:	ff 90       	pop	r15
    5cae:	ef 90       	pop	r14
    5cb0:	08 95       	ret

00005cb2 <ds3231_set_date_time_arducon>:
    5cb2:	ff 92       	push	r15
    5cb4:	0f 93       	push	r16
    5cb6:	1f 93       	push	r17
    5cb8:	cf 93       	push	r28
    5cba:	df 93       	push	r29
    5cbc:	cd b7       	in	r28, 0x3d	; 61
    5cbe:	de b7       	in	r29, 0x3e	; 62
    5cc0:	27 97       	sbiw	r28, 0x07	; 7
    5cc2:	cd bf       	out	0x3d, r28	; 61
    5cc4:	de bf       	out	0x3e, r29	; 62
    5cc6:	fe 01       	movw	r30, r28
    5cc8:	31 96       	adiw	r30, 0x01	; 1
    5cca:	27 e0       	ldi	r18, 0x07	; 7
    5ccc:	df 01       	movw	r26, r30
    5cce:	1d 92       	st	X+, r1
    5cd0:	2a 95       	dec	r18
    5cd2:	e9 f7       	brne	.-6      	; 0x5cce <ds3231_set_date_time_arducon+0x1c>
    5cd4:	00 97       	sbiw	r24, 0x00	; 0
    5cd6:	09 f4       	brne	.+2      	; 0x5cda <ds3231_set_date_time_arducon+0x28>
    5cd8:	3f c0       	rjmp	.+126    	; 0x5d58 <ds3231_set_date_time_arducon+0xa6>
    5cda:	f6 2e       	mov	r15, r22
    5cdc:	8c 01       	movw	r16, r24
    5cde:	0a 96       	adiw	r24, 0x0a	; 10
    5ce0:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5ce4:	89 83       	std	Y+1, r24	; 0x01
    5ce6:	c8 01       	movw	r24, r16
    5ce8:	08 96       	adiw	r24, 0x08	; 8
    5cea:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5cee:	8a 83       	std	Y+2, r24	; 0x02
    5cf0:	c8 01       	movw	r24, r16
    5cf2:	06 96       	adiw	r24, 0x06	; 6
    5cf4:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5cf8:	8b 83       	std	Y+3, r24	; 0x03
    5cfa:	c8 01       	movw	r24, r16
    5cfc:	04 96       	adiw	r24, 0x04	; 4
    5cfe:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5d02:	8d 83       	std	Y+5, r24	; 0x05
    5d04:	c8 01       	movw	r24, r16
    5d06:	02 96       	adiw	r24, 0x02	; 2
    5d08:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5d0c:	8e 83       	std	Y+6, r24	; 0x06
    5d0e:	c8 01       	movw	r24, r16
    5d10:	0e 94 ad 2b 	call	0x575a	; 0x575a <_Z8char2bcdPc>
    5d14:	8f 83       	std	Y+7, r24	; 0x07
    5d16:	31 e0       	ldi	r19, 0x01	; 1
    5d18:	9a e0       	ldi	r25, 0x0A	; 10
    5d1a:	1f ef       	ldi	r17, 0xFF	; 255
    5d1c:	19 0f       	add	r17, r25
    5d1e:	99 23       	and	r25, r25
    5d20:	a1 f0       	breq	.+40     	; 0x5d4a <ds3231_set_date_time_arducon+0x98>
    5d22:	6f 2d       	mov	r22, r15
    5d24:	66 0f       	add	r22, r22
    5d26:	66 0f       	add	r22, r22
    5d28:	66 0f       	add	r22, r22
    5d2a:	6f 19       	sub	r22, r15
    5d2c:	27 e0       	ldi	r18, 0x07	; 7
    5d2e:	ae 01       	movw	r20, r28
    5d30:	4f 5f       	subi	r20, 0xFF	; 255
    5d32:	5f 4f       	sbci	r21, 0xFF	; 255
    5d34:	80 ed       	ldi	r24, 0xD0	; 208
    5d36:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <I2C_0_SendData>
    5d3a:	31 e0       	ldi	r19, 0x01	; 1
    5d3c:	87 30       	cpi	r24, 0x07	; 7
    5d3e:	09 f4       	brne	.+2      	; 0x5d42 <ds3231_set_date_time_arducon+0x90>
    5d40:	30 e0       	ldi	r19, 0x00	; 0
    5d42:	87 30       	cpi	r24, 0x07	; 7
    5d44:	21 f0       	breq	.+8      	; 0x5d4e <ds3231_set_date_time_arducon+0x9c>
    5d46:	21 e0       	ldi	r18, 0x01	; 1
    5d48:	03 c0       	rjmp	.+6      	; 0x5d50 <ds3231_set_date_time_arducon+0x9e>
    5d4a:	20 e0       	ldi	r18, 0x00	; 0
    5d4c:	01 c0       	rjmp	.+2      	; 0x5d50 <ds3231_set_date_time_arducon+0x9e>
    5d4e:	20 e0       	ldi	r18, 0x00	; 0
    5d50:	91 2f       	mov	r25, r17
    5d52:	21 11       	cpse	r18, r1
    5d54:	e2 cf       	rjmp	.-60     	; 0x5d1a <ds3231_set_date_time_arducon+0x68>
    5d56:	01 c0       	rjmp	.+2      	; 0x5d5a <ds3231_set_date_time_arducon+0xa8>
    5d58:	31 e0       	ldi	r19, 0x01	; 1
    5d5a:	83 2f       	mov	r24, r19
    5d5c:	27 96       	adiw	r28, 0x07	; 7
    5d5e:	cd bf       	out	0x3d, r28	; 61
    5d60:	de bf       	out	0x3e, r29	; 62
    5d62:	df 91       	pop	r29
    5d64:	cf 91       	pop	r28
    5d66:	1f 91       	pop	r17
    5d68:	0f 91       	pop	r16
    5d6a:	ff 90       	pop	r15
    5d6c:	08 95       	ret

00005d6e <ds3231_set_date_time>:
    5d6e:	0f 93       	push	r16
    5d70:	1f 93       	push	r17
    5d72:	cf 93       	push	r28
    5d74:	df 93       	push	r29
    5d76:	cd b7       	in	r28, 0x3d	; 61
    5d78:	de b7       	in	r29, 0x3e	; 62
    5d7a:	27 97       	sbiw	r28, 0x07	; 7
    5d7c:	cd bf       	out	0x3d, r28	; 61
    5d7e:	de bf       	out	0x3e, r29	; 62
    5d80:	fc 01       	movw	r30, r24
    5d82:	06 2f       	mov	r16, r22
    5d84:	81 e0       	ldi	r24, 0x01	; 1
    5d86:	8c 83       	std	Y+4, r24	; 0x04
    5d88:	82 89       	ldd	r24, Z+18	; 0x12
    5d8a:	20 ed       	ldi	r18, 0xD0	; 208
    5d8c:	28 0f       	add	r18, r24
    5d8e:	91 89       	ldd	r25, Z+17	; 0x11
    5d90:	89 2f       	mov	r24, r25
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	c0 97       	sbiw	r24, 0x30	; 48
    5d96:	82 95       	swap	r24
    5d98:	92 95       	swap	r25
    5d9a:	90 7f       	andi	r25, 0xF0	; 240
    5d9c:	98 27       	eor	r25, r24
    5d9e:	80 7f       	andi	r24, 0xF0	; 240
    5da0:	98 27       	eor	r25, r24
    5da2:	82 2b       	or	r24, r18
    5da4:	89 83       	std	Y+1, r24	; 0x01
    5da6:	87 85       	ldd	r24, Z+15	; 0x0f
    5da8:	20 ed       	ldi	r18, 0xD0	; 208
    5daa:	28 0f       	add	r18, r24
    5dac:	96 85       	ldd	r25, Z+14	; 0x0e
    5dae:	89 2f       	mov	r24, r25
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	c0 97       	sbiw	r24, 0x30	; 48
    5db4:	82 95       	swap	r24
    5db6:	92 95       	swap	r25
    5db8:	90 7f       	andi	r25, 0xF0	; 240
    5dba:	98 27       	eor	r25, r24
    5dbc:	80 7f       	andi	r24, 0xF0	; 240
    5dbe:	98 27       	eor	r25, r24
    5dc0:	82 2b       	or	r24, r18
    5dc2:	8a 83       	std	Y+2, r24	; 0x02
    5dc4:	84 85       	ldd	r24, Z+12	; 0x0c
    5dc6:	20 ed       	ldi	r18, 0xD0	; 208
    5dc8:	28 0f       	add	r18, r24
    5dca:	93 85       	ldd	r25, Z+11	; 0x0b
    5dcc:	89 2f       	mov	r24, r25
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	c0 97       	sbiw	r24, 0x30	; 48
    5dd2:	82 95       	swap	r24
    5dd4:	92 95       	swap	r25
    5dd6:	90 7f       	andi	r25, 0xF0	; 240
    5dd8:	98 27       	eor	r25, r24
    5dda:	80 7f       	andi	r24, 0xF0	; 240
    5ddc:	98 27       	eor	r25, r24
    5dde:	82 2b       	or	r24, r18
    5de0:	8b 83       	std	Y+3, r24	; 0x03
    5de2:	81 85       	ldd	r24, Z+9	; 0x09
    5de4:	20 ed       	ldi	r18, 0xD0	; 208
    5de6:	28 0f       	add	r18, r24
    5de8:	90 85       	ldd	r25, Z+8	; 0x08
    5dea:	89 2f       	mov	r24, r25
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	c0 97       	sbiw	r24, 0x30	; 48
    5df0:	82 95       	swap	r24
    5df2:	92 95       	swap	r25
    5df4:	90 7f       	andi	r25, 0xF0	; 240
    5df6:	98 27       	eor	r25, r24
    5df8:	80 7f       	andi	r24, 0xF0	; 240
    5dfa:	98 27       	eor	r25, r24
    5dfc:	82 2b       	or	r24, r18
    5dfe:	8d 83       	std	Y+5, r24	; 0x05
    5e00:	86 81       	ldd	r24, Z+6	; 0x06
    5e02:	20 ed       	ldi	r18, 0xD0	; 208
    5e04:	28 0f       	add	r18, r24
    5e06:	95 81       	ldd	r25, Z+5	; 0x05
    5e08:	89 2f       	mov	r24, r25
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	c0 97       	sbiw	r24, 0x30	; 48
    5e0e:	82 95       	swap	r24
    5e10:	92 95       	swap	r25
    5e12:	90 7f       	andi	r25, 0xF0	; 240
    5e14:	98 27       	eor	r25, r24
    5e16:	80 7f       	andi	r24, 0xF0	; 240
    5e18:	98 27       	eor	r25, r24
    5e1a:	82 2b       	or	r24, r18
    5e1c:	8e 83       	std	Y+6, r24	; 0x06
    5e1e:	83 81       	ldd	r24, Z+3	; 0x03
    5e20:	20 ed       	ldi	r18, 0xD0	; 208
    5e22:	28 0f       	add	r18, r24
    5e24:	92 81       	ldd	r25, Z+2	; 0x02
    5e26:	89 2f       	mov	r24, r25
    5e28:	90 e0       	ldi	r25, 0x00	; 0
    5e2a:	c0 97       	sbiw	r24, 0x30	; 48
    5e2c:	82 95       	swap	r24
    5e2e:	92 95       	swap	r25
    5e30:	90 7f       	andi	r25, 0xF0	; 240
    5e32:	98 27       	eor	r25, r24
    5e34:	80 7f       	andi	r24, 0xF0	; 240
    5e36:	98 27       	eor	r25, r24
    5e38:	82 2b       	or	r24, r18
    5e3a:	8f 83       	std	Y+7, r24	; 0x07
    5e3c:	8a e0       	ldi	r24, 0x0A	; 10
    5e3e:	1f ef       	ldi	r17, 0xFF	; 255
    5e40:	18 0f       	add	r17, r24
    5e42:	88 23       	and	r24, r24
    5e44:	81 f0       	breq	.+32     	; 0x5e66 <ds3231_set_date_time+0xf8>
    5e46:	60 2f       	mov	r22, r16
    5e48:	66 0f       	add	r22, r22
    5e4a:	66 0f       	add	r22, r22
    5e4c:	66 0f       	add	r22, r22
    5e4e:	60 1b       	sub	r22, r16
    5e50:	27 e0       	ldi	r18, 0x07	; 7
    5e52:	ae 01       	movw	r20, r28
    5e54:	4f 5f       	subi	r20, 0xFF	; 255
    5e56:	5f 4f       	sbci	r21, 0xFF	; 255
    5e58:	80 ed       	ldi	r24, 0xD0	; 208
    5e5a:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <I2C_0_SendData>
    5e5e:	88 23       	and	r24, r24
    5e60:	21 f0       	breq	.+8      	; 0x5e6a <ds3231_set_date_time+0xfc>
    5e62:	91 e0       	ldi	r25, 0x01	; 1
    5e64:	03 c0       	rjmp	.+6      	; 0x5e6c <ds3231_set_date_time+0xfe>
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	01 c0       	rjmp	.+2      	; 0x5e6c <ds3231_set_date_time+0xfe>
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	81 2f       	mov	r24, r17
    5e6e:	91 11       	cpse	r25, r1
    5e70:	e6 cf       	rjmp	.-52     	; 0x5e3e <ds3231_set_date_time+0xd0>
    5e72:	27 96       	adiw	r28, 0x07	; 7
    5e74:	cd bf       	out	0x3d, r28	; 61
    5e76:	de bf       	out	0x3e, r29	; 62
    5e78:	df 91       	pop	r29
    5e7a:	cf 91       	pop	r28
    5e7c:	1f 91       	pop	r17
    5e7e:	0f 91       	pop	r16
    5e80:	08 95       	ret

00005e82 <ds3231_1s_sqw>:
#endif // DATE_STRING_SUPPORT_ENABLED
	
	bool ds3231_1s_sqw(bool enable)
	{
    5e82:	1f 93       	push	r17
    5e84:	cf 93       	push	r28
    5e86:	df 93       	push	r29
    5e88:	1f 92       	push	r1
    5e8a:	cd b7       	in	r28, 0x3d	; 61
    5e8c:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
		bool failure;
		uint8_t data[1];
		
		data[0] = enable ? 0x40:0x00;	
    5e8e:	88 23       	and	r24, r24
    5e90:	11 f0       	breq	.+4      	; 0x5e96 <ds3231_1s_sqw+0x14>
    5e92:	80 e4       	ldi	r24, 0x40	; 64
    5e94:	01 c0       	rjmp	.+2      	; 0x5e98 <ds3231_1s_sqw+0x16>
    5e96:	80 e0       	ldi	r24, 0x00	; 0
    5e98:	89 83       	std	Y+1, r24	; 0x01
	}
#endif // DATE_STRING_SUPPORT_ENABLED
	
	bool ds3231_1s_sqw(bool enable)
	{
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5e9a:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		uint8_t data[1];
		
		data[0] = enable ? 0x40:0x00;	
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, data, 1) != 1)));
    5e9c:	1f ef       	ldi	r17, 0xFF	; 255
    5e9e:	18 0f       	add	r17, r24
    5ea0:	88 23       	and	r24, r24
    5ea2:	81 f0       	breq	.+32     	; 0x5ec4 <ds3231_1s_sqw+0x42>
    5ea4:	21 e0       	ldi	r18, 0x01	; 1
    5ea6:	ae 01       	movw	r20, r28
    5ea8:	4f 5f       	subi	r20, 0xFF	; 255
    5eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    5eac:	6e e0       	ldi	r22, 0x0E	; 14
    5eae:	80 ed       	ldi	r24, 0xD0	; 208
    5eb0:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <I2C_0_SendData>
    5eb4:	21 e0       	ldi	r18, 0x01	; 1
    5eb6:	81 30       	cpi	r24, 0x01	; 1
    5eb8:	09 f4       	brne	.+2      	; 0x5ebc <ds3231_1s_sqw+0x3a>
    5eba:	20 e0       	ldi	r18, 0x00	; 0
    5ebc:	81 30       	cpi	r24, 0x01	; 1
    5ebe:	21 f0       	breq	.+8      	; 0x5ec8 <ds3231_1s_sqw+0x46>
    5ec0:	91 e0       	ldi	r25, 0x01	; 1
    5ec2:	03 c0       	rjmp	.+6      	; 0x5eca <ds3231_1s_sqw+0x48>
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	01 c0       	rjmp	.+2      	; 0x5eca <ds3231_1s_sqw+0x48>
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	81 2f       	mov	r24, r17
    5ecc:	91 11       	cpse	r25, r1
    5ece:	e6 cf       	rjmp	.-52     	; 0x5e9c <ds3231_1s_sqw+0x1a>
		
		return(failure);
	}
    5ed0:	82 2f       	mov	r24, r18
    5ed2:	0f 90       	pop	r0
    5ed4:	df 91       	pop	r29
    5ed6:	cf 91       	pop	r28
    5ed8:	1f 91       	pop	r17
    5eda:	08 95       	ret

00005edc <ds3231_set_aging>:


	bool ds3231_set_aging(int8_t data_in)
	{
    5edc:	1f 93       	push	r17
    5ede:	cf 93       	push	r28
    5ee0:	df 93       	push	r29
    5ee2:	1f 92       	push	r1
    5ee4:	cd b7       	in	r28, 0x3d	; 61
    5ee6:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
    5ee8:	89 83       	std	Y+1, r24	; 0x01
	}


	bool ds3231_set_aging(int8_t data_in)
	{
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5eea:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    5eec:	1f ef       	ldi	r17, 0xFF	; 255
    5eee:	18 0f       	add	r17, r24
    5ef0:	88 23       	and	r24, r24
    5ef2:	81 f0       	breq	.+32     	; 0x5f14 <ds3231_set_aging+0x38>
    5ef4:	21 e0       	ldi	r18, 0x01	; 1
    5ef6:	ae 01       	movw	r20, r28
    5ef8:	4f 5f       	subi	r20, 0xFF	; 255
    5efa:	5f 4f       	sbci	r21, 0xFF	; 255
    5efc:	60 e1       	ldi	r22, 0x10	; 16
    5efe:	80 ed       	ldi	r24, 0xD0	; 208
    5f00:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <I2C_0_SendData>
    5f04:	21 e0       	ldi	r18, 0x01	; 1
    5f06:	81 30       	cpi	r24, 0x01	; 1
    5f08:	09 f4       	brne	.+2      	; 0x5f0c <ds3231_set_aging+0x30>
    5f0a:	20 e0       	ldi	r18, 0x00	; 0
    5f0c:	81 30       	cpi	r24, 0x01	; 1
    5f0e:	21 f0       	breq	.+8      	; 0x5f18 <ds3231_set_aging+0x3c>
    5f10:	91 e0       	ldi	r25, 0x01	; 1
    5f12:	03 c0       	rjmp	.+6      	; 0x5f1a <ds3231_set_aging+0x3e>
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	01 c0       	rjmp	.+2      	; 0x5f1a <ds3231_set_aging+0x3e>
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	81 2f       	mov	r24, r17
    5f1c:	91 11       	cpse	r25, r1
    5f1e:	e6 cf       	rjmp	.-52     	; 0x5eec <ds3231_set_aging+0x10>
		return(failure);
	}
    5f20:	82 2f       	mov	r24, r18
    5f22:	0f 90       	pop	r0
    5f24:	df 91       	pop	r29
    5f26:	cf 91       	pop	r28
    5f28:	1f 91       	pop	r17
    5f2a:	08 95       	ret

00005f2c <ds3231_get_aging>:


	int8_t ds3231_get_aging()
	{
    5f2c:	1f 93       	push	r17
    5f2e:	cf 93       	push	r28
    5f30:	df 93       	push	r29
    5f32:	1f 92       	push	r1
    5f34:	cd b7       	in	r28, 0x3d	; 61
    5f36:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5f38:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		while(tries-- && (failure = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    5f3a:	1f ef       	ldi	r17, 0xFF	; 255
    5f3c:	18 0f       	add	r17, r24
    5f3e:	88 23       	and	r24, r24
    5f40:	61 f0       	breq	.+24     	; 0x5f5a <ds3231_get_aging+0x2e>
    5f42:	21 e0       	ldi	r18, 0x01	; 1
    5f44:	ae 01       	movw	r20, r28
    5f46:	4f 5f       	subi	r20, 0xFF	; 255
    5f48:	5f 4f       	sbci	r21, 0xFF	; 255
    5f4a:	60 e1       	ldi	r22, 0x10	; 16
    5f4c:	80 ed       	ldi	r24, 0xD0	; 208
    5f4e:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <I2C_0_GetData>
    5f52:	81 30       	cpi	r24, 0x01	; 1
    5f54:	21 f0       	breq	.+8      	; 0x5f5e <ds3231_get_aging+0x32>
    5f56:	91 e0       	ldi	r25, 0x01	; 1
    5f58:	03 c0       	rjmp	.+6      	; 0x5f60 <ds3231_get_aging+0x34>
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	01 c0       	rjmp	.+2      	; 0x5f60 <ds3231_get_aging+0x34>
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    5f60:	81 2f       	mov	r24, r17
    5f62:	91 11       	cpse	r25, r1
    5f64:	ea cf       	rjmp	.-44     	; 0x5f3a <ds3231_get_aging+0xe>
		return(data[0]);
	}
    5f66:	89 81       	ldd	r24, Y+1	; 0x01
    5f68:	0f 90       	pop	r0
    5f6a:	df 91       	pop	r29
    5f6c:	cf 91       	pop	r28
    5f6e:	1f 91       	pop	r17
    5f70:	08 95       	ret

00005f72 <ds3231_responding>:

	bool ds3231_responding()
	{
    5f72:	1f 93       	push	r17
    5f74:	cf 93       	push	r28
    5f76:	df 93       	push	r29
    5f78:	1f 92       	push	r1
    5f7a:	cd b7       	in	r28, 0x3d	; 61
    5f7c:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
		uint8_t tries = 10;
    5f7e:	9a e0       	ldi	r25, 0x0A	; 10
		return(data[0]);
	}

	bool ds3231_responding()
	{
		bool responseReceived = false;
    5f80:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t tries = 10;
		int8_t data[1];		
		while(tries-- && !(responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1)));
    5f82:	1f ef       	ldi	r17, 0xFF	; 255
    5f84:	19 0f       	add	r17, r25
    5f86:	99 23       	and	r25, r25
    5f88:	81 f0       	breq	.+32     	; 0x5faa <ds3231_responding+0x38>
    5f8a:	21 e0       	ldi	r18, 0x01	; 1
    5f8c:	ae 01       	movw	r20, r28
    5f8e:	4f 5f       	subi	r20, 0xFF	; 255
    5f90:	5f 4f       	sbci	r21, 0xFF	; 255
    5f92:	60 e1       	ldi	r22, 0x10	; 16
    5f94:	80 ed       	ldi	r24, 0xD0	; 208
    5f96:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <I2C_0_GetData>
    5f9a:	31 e0       	ldi	r19, 0x01	; 1
    5f9c:	81 30       	cpi	r24, 0x01	; 1
    5f9e:	09 f0       	breq	.+2      	; 0x5fa2 <ds3231_responding+0x30>
    5fa0:	30 e0       	ldi	r19, 0x00	; 0
    5fa2:	81 30       	cpi	r24, 0x01	; 1
    5fa4:	21 f0       	breq	.+8      	; 0x5fae <ds3231_responding+0x3c>
    5fa6:	21 e0       	ldi	r18, 0x01	; 1
    5fa8:	03 c0       	rjmp	.+6      	; 0x5fb0 <ds3231_responding+0x3e>
    5faa:	20 e0       	ldi	r18, 0x00	; 0
    5fac:	01 c0       	rjmp	.+2      	; 0x5fb0 <ds3231_responding+0x3e>
    5fae:	20 e0       	ldi	r18, 0x00	; 0
    5fb0:	91 2f       	mov	r25, r17
    5fb2:	21 11       	cpse	r18, r1
    5fb4:	e6 cf       	rjmp	.-52     	; 0x5f82 <ds3231_responding+0x10>
		return(responseReceived);
	}
    5fb6:	83 2f       	mov	r24, r19
    5fb8:	0f 90       	pop	r0
    5fba:	df 91       	pop	r29
    5fbc:	cf 91       	pop	r28
    5fbe:	1f 91       	pop	r17
    5fc0:	08 95       	ret

00005fc2 <ds3231_init>:

time_t epoch_from_ltm(tm *ltm);

bool ds3231_init()
{
	I2C_0_Init();
    5fc2:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <I2C_0_Init>
	return (!ds3231_responding());
    5fc6:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <ds3231_responding>
}
    5fca:	91 e0       	ldi	r25, 0x01	; 1
    5fcc:	89 27       	eor	r24, r25
    5fce:	08 95       	ret

00005fd0 <ds3231_sync2nearestMinute>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
    5fd0:	cf 92       	push	r12
    5fd2:	df 92       	push	r13
    5fd4:	ef 92       	push	r14
    5fd6:	ff 92       	push	r15
    5fd8:	0f 93       	push	r16
    5fda:	1f 93       	push	r17
    5fdc:	cf 93       	push	r28
    5fde:	df 93       	push	r29
    5fe0:	cd b7       	in	r28, 0x3d	; 61
    5fe2:	de b7       	in	r29, 0x3e	; 62
    5fe4:	28 97       	sbiw	r28, 0x08	; 8
    5fe6:	cd bf       	out	0x3d, r28	; 61
    5fe8:	de bf       	out	0x3e, r29	; 62
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
    5fea:	fe 01       	movw	r30, r28
    5fec:	31 96       	adiw	r30, 0x01	; 1
    5fee:	88 e0       	ldi	r24, 0x08	; 8
    5ff0:	df 01       	movw	r26, r30
    5ff2:	1d 92       	st	X+, r1
    5ff4:	8a 95       	dec	r24
    5ff6:	e9 f7       	brne	.-6      	; 0x5ff2 <ds3231_sync2nearestMinute+0x22>
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
    5ff8:	f1 2c       	mov	r15, r1
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
    5ffa:	8a e0       	ldi	r24, 0x0A	; 10
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
		
	while(tries-- && (err = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 3) != 3)));
    5ffc:	1f ef       	ldi	r17, 0xFF	; 255
    5ffe:	18 0f       	add	r17, r24
    6000:	88 23       	and	r24, r24
    6002:	89 f0       	breq	.+34     	; 0x6026 <ds3231_sync2nearestMinute+0x56>
    6004:	23 e0       	ldi	r18, 0x03	; 3
    6006:	ae 01       	movw	r20, r28
    6008:	4f 5f       	subi	r20, 0xFF	; 255
    600a:	5f 4f       	sbci	r21, 0xFF	; 255
    600c:	60 e0       	ldi	r22, 0x00	; 0
    600e:	80 ed       	ldi	r24, 0xD0	; 208
    6010:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <I2C_0_GetData>
    6014:	ff 24       	eor	r15, r15
    6016:	f3 94       	inc	r15
    6018:	83 30       	cpi	r24, 0x03	; 3
    601a:	09 f4       	brne	.+2      	; 0x601e <ds3231_sync2nearestMinute+0x4e>
    601c:	f1 2c       	mov	r15, r1
    601e:	83 30       	cpi	r24, 0x03	; 3
    6020:	21 f0       	breq	.+8      	; 0x602a <ds3231_sync2nearestMinute+0x5a>
    6022:	01 e0       	ldi	r16, 0x01	; 1
    6024:	03 c0       	rjmp	.+6      	; 0x602c <ds3231_sync2nearestMinute+0x5c>
    6026:	00 e0       	ldi	r16, 0x00	; 0
    6028:	01 c0       	rjmp	.+2      	; 0x602c <ds3231_sync2nearestMinute+0x5c>
    602a:	00 e0       	ldi	r16, 0x00	; 0
    602c:	81 2f       	mov	r24, r17
    602e:	01 11       	cpse	r16, r1
    6030:	e5 cf       	rjmp	.-54     	; 0x5ffc <ds3231_sync2nearestMinute+0x2c>

	if(!err)
    6032:	f1 10       	cpse	r15, r1
    6034:	82 c0       	rjmp	.+260    	; 0x613a <ds3231_sync2nearestMinute+0x16a>
		uint8_t hour10;
		uint8_t hour;
		bool am_pm;
		bool twelvehour;

		seconds = bcd2dec(data[0]);
    6036:	89 81       	ldd	r24, Y+1	; 0x01
    6038:	0e 94 82 2b 	call	0x5704	; 0x5704 <_Z7bcd2dech>
    603c:	d8 2e       	mov	r13, r24
		minutes = bcd2dec(data[1]);
    603e:	8a 81       	ldd	r24, Y+2	; 0x02
    6040:	0e 94 82 2b 	call	0x5704	; 0x5704 <_Z7bcd2dech>
		am_pm = ((data[2] >> 5) & 0x01);
    6044:	9b 81       	ldd	r25, Y+3	; 0x03
    6046:	49 2f       	mov	r20, r25
    6048:	40 72       	andi	r20, 0x20	; 32
		hour10 = ((data[2] >> 4) & 0x01);
    604a:	29 2f       	mov	r18, r25
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	35 95       	asr	r19
    6050:	27 95       	ror	r18
    6052:	35 95       	asr	r19
    6054:	27 95       	ror	r18
    6056:	35 95       	asr	r19
    6058:	27 95       	ror	r18
    605a:	35 95       	asr	r19
    605c:	27 95       	ror	r18
    605e:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
    6060:	39 2f       	mov	r19, r25
    6062:	3f 70       	andi	r19, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);

		if(!twelvehour && am_pm)
    6064:	b9 2f       	mov	r27, r25
    6066:	b0 74       	andi	r27, 0x40	; 64
    6068:	cb 2e       	mov	r12, r27
    606a:	96 fd       	sbrc	r25, 6
    606c:	02 c0       	rjmp	.+4      	; 0x6072 <ds3231_sync2nearestMinute+0xa2>
    606e:	41 11       	cpse	r20, r1
		{
			hour10 = 2;
    6070:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
    6072:	22 0f       	add	r18, r18
    6074:	e2 2e       	mov	r14, r18
    6076:	ee 0c       	add	r14, r14
    6078:	ee 0c       	add	r14, r14
    607a:	2e 0d       	add	r18, r14
    607c:	e2 2e       	mov	r14, r18
    607e:	e3 0e       	add	r14, r19

		if(seconds > 30)
    6080:	5e e1       	ldi	r21, 0x1E	; 30
    6082:	5d 15       	cp	r21, r13
    6084:	60 f4       	brcc	.+24     	; 0x609e <ds3231_sync2nearestMinute+0xce>
		{
			minutes++;
    6086:	8f 5f       	subi	r24, 0xFF	; 255

			if(minutes > 59)
    6088:	8c 33       	cpi	r24, 0x3C	; 60
    608a:	48 f0       	brcs	.+18     	; 0x609e <ds3231_sync2nearestMinute+0xce>
			{
				minutes = 0;
				hours++;
    608c:	e3 94       	inc	r14

				if(hours > 23) /* Don't attempt to synchronize at midnight */
    608e:	87 e1       	ldi	r24, 0x17	; 23
    6090:	8e 15       	cp	r24, r14
    6092:	10 f0       	brcs	.+4      	; 0x6098 <ds3231_sync2nearestMinute+0xc8>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    6094:	80 e0       	ldi	r24, 0x00	; 0
    6096:	03 c0       	rjmp	.+6      	; 0x609e <ds3231_sync2nearestMinute+0xce>
    6098:	80 e0       	ldi	r24, 0x00	; 0
				hours++;

				if(hours > 23) /* Don't attempt to synchronize at midnight */
				{
					err = true;
    609a:	ff 24       	eor	r15, r15
    609c:	f3 94       	inc	r15
				}
			}
		}

		if(!err)
    609e:	f1 10       	cpse	r15, r1
    60a0:	4c c0       	rjmp	.+152    	; 0x613a <ds3231_sync2nearestMinute+0x16a>
		{
			data[0] = 0; /* seconds = 00 */
    60a2:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
    60a4:	0e 94 94 2b 	call	0x5728	; 0x5728 <_Z7dec2bcdh>
    60a8:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;
    60aa:	1b 82       	std	Y+3, r1	; 0x03

			if(twelvehour)
    60ac:	cc 20       	and	r12, r12
    60ae:	71 f0       	breq	.+28     	; 0x60cc <ds3231_sync2nearestMinute+0xfc>
			{
				data[2] |= 0x40; /* set  12-hour bit */
    60b0:	80 e4       	ldi	r24, 0x40	; 64
    60b2:	8b 83       	std	Y+3, r24	; 0x03

				if(hours >= 12)
    60b4:	9b e0       	ldi	r25, 0x0B	; 11
    60b6:	9e 15       	cp	r25, r14
    60b8:	10 f4       	brcc	.+4      	; 0x60be <ds3231_sync2nearestMinute+0xee>
				{
					data[2] |= 0x20; /* set pm bit */
    60ba:	80 e6       	ldi	r24, 0x60	; 96
    60bc:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
    60be:	a9 e0       	ldi	r26, 0x09	; 9
    60c0:	ae 15       	cp	r26, r14
    60c2:	78 f4       	brcc	.+30     	; 0x60e2 <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10;
    60c4:	8b 81       	ldd	r24, Y+3	; 0x03
    60c6:	80 61       	ori	r24, 0x10	; 16
    60c8:	8b 83       	std	Y+3, r24	; 0x03
    60ca:	0b c0       	rjmp	.+22     	; 0x60e2 <ds3231_sync2nearestMinute+0x112>
				}
			}
			else
			{
				if(hours >= 20)
    60cc:	b3 e1       	ldi	r27, 0x13	; 19
    60ce:	be 15       	cp	r27, r14
    60d0:	18 f4       	brcc	.+6      	; 0x60d8 <ds3231_sync2nearestMinute+0x108>
				{
					data[2] |= 0x20; /* set 20 bit */
    60d2:	80 e2       	ldi	r24, 0x20	; 32
    60d4:	8b 83       	std	Y+3, r24	; 0x03
    60d6:	05 c0       	rjmp	.+10     	; 0x60e2 <ds3231_sync2nearestMinute+0x112>
				}
				else if(hours >= 10)
    60d8:	59 e0       	ldi	r21, 0x09	; 9
    60da:	5e 15       	cp	r21, r14
    60dc:	10 f4       	brcc	.+4      	; 0x60e2 <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10; /* set 10 bit */
    60de:	80 e1       	ldi	r24, 0x10	; 16
    60e0:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
    60e2:	8d ec       	ldi	r24, 0xCD	; 205
    60e4:	e8 9e       	mul	r14, r24
    60e6:	81 2d       	mov	r24, r1
    60e8:	11 24       	eor	r1, r1
    60ea:	86 95       	lsr	r24
    60ec:	86 95       	lsr	r24
    60ee:	86 95       	lsr	r24
    60f0:	88 0f       	add	r24, r24
    60f2:	98 2f       	mov	r25, r24
    60f4:	99 0f       	add	r25, r25
    60f6:	99 0f       	add	r25, r25
    60f8:	89 0f       	add	r24, r25
    60fa:	e8 1a       	sub	r14, r24
    60fc:	2b 81       	ldd	r18, Y+3	; 0x03
    60fe:	e2 2a       	or	r14, r18
    6100:	eb 82       	std	Y+3, r14	; 0x03
			
			while(tries-- && (err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4)));
    6102:	ee 24       	eor	r14, r14
    6104:	ea 94       	dec	r14
    6106:	e1 0e       	add	r14, r17
    6108:	11 23       	and	r17, r17
    610a:	89 f0       	breq	.+34     	; 0x612e <ds3231_sync2nearestMinute+0x15e>
    610c:	24 e0       	ldi	r18, 0x04	; 4
    610e:	ae 01       	movw	r20, r28
    6110:	4f 5f       	subi	r20, 0xFF	; 255
    6112:	5f 4f       	sbci	r21, 0xFF	; 255
    6114:	60 e0       	ldi	r22, 0x00	; 0
    6116:	80 ed       	ldi	r24, 0xD0	; 208
    6118:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <I2C_0_SendData>
    611c:	ff 24       	eor	r15, r15
    611e:	f3 94       	inc	r15
    6120:	84 30       	cpi	r24, 0x04	; 4
    6122:	09 f4       	brne	.+2      	; 0x6126 <ds3231_sync2nearestMinute+0x156>
    6124:	f1 2c       	mov	r15, r1
    6126:	84 30       	cpi	r24, 0x04	; 4
    6128:	21 f0       	breq	.+8      	; 0x6132 <ds3231_sync2nearestMinute+0x162>
    612a:	81 e0       	ldi	r24, 0x01	; 1
    612c:	03 c0       	rjmp	.+6      	; 0x6134 <ds3231_sync2nearestMinute+0x164>
    612e:	80 2f       	mov	r24, r16
    6130:	01 c0       	rjmp	.+2      	; 0x6134 <ds3231_sync2nearestMinute+0x164>
    6132:	80 2f       	mov	r24, r16
    6134:	1e 2d       	mov	r17, r14
    6136:	81 11       	cpse	r24, r1
    6138:	e4 cf       	rjmp	.-56     	; 0x6102 <ds3231_sync2nearestMinute+0x132>
		}
	}

	return err;
}
    613a:	8f 2d       	mov	r24, r15
    613c:	28 96       	adiw	r28, 0x08	; 8
    613e:	cd bf       	out	0x3d, r28	; 61
    6140:	de bf       	out	0x3e, r29	; 62
    6142:	df 91       	pop	r29
    6144:	cf 91       	pop	r28
    6146:	1f 91       	pop	r17
    6148:	0f 91       	pop	r16
    614a:	ff 90       	pop	r15
    614c:	ef 90       	pop	r14
    614e:	df 90       	pop	r13
    6150:	cf 90       	pop	r12
    6152:	08 95       	ret

00006154 <convertEpochToTimeString>:
/**
 *   Converts an epoch (seconds since 1900)  into a string with format "ddd dd-mon-yyyy hh:mm:ss zzz"
 */
#define THIRTY_YEARS 946684800
char* convertEpochToTimeString(time_t epoch, char* buf, size_t size)
 {
    6154:	ef 92       	push	r14
    6156:	ff 92       	push	r15
    6158:	0f 93       	push	r16
    615a:	1f 93       	push	r17
    615c:	cf 93       	push	r28
    615e:	df 93       	push	r29
    6160:	cd b7       	in	r28, 0x3d	; 61
    6162:	de b7       	in	r29, 0x3e	; 62
    6164:	60 97       	sbiw	r28, 0x10	; 16
    6166:	cd bf       	out	0x3d, r28	; 61
    6168:	de bf       	out	0x3e, r29	; 62
    616a:	8a 01       	movw	r16, r20
    616c:	79 01       	movw	r14, r18
   struct tm  ts;
	time_t t = epoch - THIRTY_YEARS;
    616e:	dc 01       	movw	r26, r24
    6170:	cb 01       	movw	r24, r22
    6172:	80 58       	subi	r24, 0x80	; 128
    6174:	93 44       	sbci	r25, 0x43	; 67
    6176:	ad 46       	sbci	r26, 0x6D	; 109
    6178:	b8 43       	sbci	r27, 0x38	; 56
    617a:	8d 87       	std	Y+13, r24	; 0x0d
    617c:	9e 87       	std	Y+14, r25	; 0x0e
    617e:	af 87       	std	Y+15, r26	; 0x0f
    6180:	b8 8b       	std	Y+16, r27	; 0x10

    // Format time, "ddd dd-mon-yyyy hh:mm:ss zzz"
    ts = *localtime(&t);
    6182:	ce 01       	movw	r24, r28
    6184:	0d 96       	adiw	r24, 0x0d	; 13
    6186:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <localtime>
    618a:	fc 01       	movw	r30, r24
    618c:	9c e0       	ldi	r25, 0x0C	; 12
    618e:	de 01       	movw	r26, r28
    6190:	11 96       	adiw	r26, 0x01	; 1
    6192:	01 90       	ld	r0, Z+
    6194:	0d 92       	st	X+, r0
    6196:	9a 95       	dec	r25
    6198:	e1 f7       	brne	.-8      	; 0x6192 <convertEpochToTimeString+0x3e>
    strftime(buf, size, "%a %d-%b-%Y %H:%M:%S", &ts);
    619a:	9e 01       	movw	r18, r28
    619c:	2f 5f       	subi	r18, 0xFF	; 255
    619e:	3f 4f       	sbci	r19, 0xFF	; 255
    61a0:	4c e9       	ldi	r20, 0x9C	; 156
    61a2:	54 e4       	ldi	r21, 0x44	; 68
    61a4:	b7 01       	movw	r22, r14
    61a6:	c8 01       	movw	r24, r16
    61a8:	0e 94 99 02 	call	0x532	; 0x532 <strftime>
   return buf;
 }
    61ac:	c8 01       	movw	r24, r16
    61ae:	60 96       	adiw	r28, 0x10	; 16
    61b0:	cd bf       	out	0x3d, r28	; 61
    61b2:	de bf       	out	0x3e, r29	; 62
    61b4:	df 91       	pop	r29
    61b6:	cf 91       	pop	r28
    61b8:	1f 91       	pop	r17
    61ba:	0f 91       	pop	r16
    61bc:	ff 90       	pop	r15
    61be:	ef 90       	pop	r14
    61c0:	08 95       	ret

000061c2 <_ZN13EepromManagerC1Ev>:
extern uint16_t g_80m_power_level_mW;

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
    61c2:	08 95       	ret

000061c4 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
    61c4:	08 95       	ret

000061c6 <_Z21avr_eeprom_write_bytejh>:
#include <avr/io.h>

typedef uint16_t eeprom_addr_t;

// to write
void avr_eeprom_write_byte(eeprom_addr_t index, uint8_t in) {
    61c6:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    61c8:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    61cc:	91 fd       	sbrc	r25, 1
    61ce:	fc cf       	rjmp	.-8      	; 0x61c8 <_Z21avr_eeprom_write_bytejh+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    61d0:	8d e9       	ldi	r24, 0x9D	; 157
    61d2:	93 e1       	ldi	r25, 0x13	; 19
    61d4:	84 bf       	out	0x34, r24	; 52
    61d6:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    61da:	f9 01       	movw	r30, r18
    61dc:	fc 5e       	subi	r31, 0xEC	; 236
    61de:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	84 bf       	out	0x34, r24	; 52
    61e4:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    61e8:	08 95       	ret

000061ea <_Z21avr_eeprom_write_wordjj>:
}

void avr_eeprom_write_word(eeprom_addr_t index, uint16_t in) {
    61ea:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    61ec:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    61f0:	91 fd       	sbrc	r25, 1
    61f2:	fc cf       	rjmp	.-8      	; 0x61ec <_Z21avr_eeprom_write_wordjj+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    61f4:	8d e9       	ldi	r24, 0x9D	; 157
    61f6:	93 e1       	ldi	r25, 0x13	; 19
    61f8:	84 bf       	out	0x34, r24	; 52
    61fa:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint16_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    61fe:	f9 01       	movw	r30, r18
    6200:	fc 5e       	subi	r31, 0xEC	; 236
    6202:	60 83       	st	Z, r22
    6204:	71 83       	std	Z+1, r23	; 0x01
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    6206:	90 e0       	ldi	r25, 0x00	; 0
    6208:	84 bf       	out	0x34, r24	; 52
    620a:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    620e:	08 95       	ret

00006210 <_Z22avr_eeprom_write_dwordjm>:
}

void avr_eeprom_write_dword(eeprom_addr_t index, uint32_t in) {
    6210:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    6212:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    6216:	91 fd       	sbrc	r25, 1
    6218:	fc cf       	rjmp	.-8      	; 0x6212 <_Z22avr_eeprom_write_dwordjm+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    621a:	8d e9       	ldi	r24, 0x9D	; 157
    621c:	93 e1       	ldi	r25, 0x13	; 19
    621e:	84 bf       	out	0x34, r24	; 52
    6220:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint32_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    6224:	f9 01       	movw	r30, r18
    6226:	fc 5e       	subi	r31, 0xEC	; 236
    6228:	40 83       	st	Z, r20
    622a:	51 83       	std	Z+1, r21	; 0x01
    622c:	62 83       	std	Z+2, r22	; 0x02
    622e:	73 83       	std	Z+3, r23	; 0x03
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	84 bf       	out	0x34, r24	; 52
    6234:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    6238:	08 95       	ret

0000623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
}

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
    623a:	0f 93       	push	r16
    623c:	1f 93       	push	r17
    623e:	cf 93       	push	r28
    6240:	df 93       	push	r29
	if(!val)
    6242:	41 15       	cp	r20, r1
    6244:	51 05       	cpc	r21, r1
    6246:	09 f4       	brne	.+2      	; 0x624a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
    6248:	7c c0       	rjmp	.+248    	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
	{
		return;
	}

	switch(v)
    624a:	86 2f       	mov	r24, r22
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	84 33       	cpi	r24, 0x34	; 52
    6250:	91 05       	cpc	r25, r1
    6252:	08 f0       	brcs	.+2      	; 0x6256 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x1c>
    6254:	76 c0       	rjmp	.+236    	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
    6256:	ea 01       	movw	r28, r20
    6258:	fc 01       	movw	r30, r24
    625a:	eb 57       	subi	r30, 0x7B	; 123
    625c:	ff 4f       	sbci	r31, 0xFF	; 255
    625e:	0c 94 03 4d 	jmp	0x9a06	; 0x9a06 <__tablejump2__>
	{
		case Frequency:
		{
			avr_eeprom_write_dword(Frequency, *(uint32_t*)val);
    6262:	48 81       	ld	r20, Y
    6264:	59 81       	ldd	r21, Y+1	; 0x01
    6266:	6a 81       	ldd	r22, Y+2	; 0x02
    6268:	7b 81       	ldd	r23, Y+3	; 0x03
    626a:	8b e2       	ldi	r24, 0x2B	; 43
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	0e 94 08 31 	call	0x6210	; 0x6210 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6272:	67 c0       	rjmp	.+206    	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RTTY_offset:
		{
			avr_eeprom_write_dword(RTTY_offset, *(uint32_t*)val);
    6274:	48 81       	ld	r20, Y
    6276:	59 81       	ldd	r21, Y+1	; 0x01
    6278:	6a 81       	ldd	r22, Y+2	; 0x02
    627a:	7b 81       	ldd	r23, Y+3	; 0x03
    627c:	8f e2       	ldi	r24, 0x2F	; 47
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	0e 94 08 31 	call	0x6210	; 0x6210 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6284:	5e c0       	rjmp	.+188    	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RF_Power:
		{
			avr_eeprom_write_word(RF_Power, *(uint32_t*)val);			
    6286:	68 81       	ld	r22, Y
    6288:	79 81       	ldd	r23, Y+1	; 0x01
    628a:	83 e3       	ldi	r24, 0x33	; 51
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_Z21avr_eeprom_write_wordjj>
		}
		break;
    6292:	57 c0       	rjmp	.+174    	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
    6294:	8a 01       	movw	r16, r20
    6296:	0f 5f       	subi	r16, 0xFF	; 255
    6298:	1f 4f       	sbci	r17, 0xFF	; 255
    629a:	68 81       	ld	r22, Y
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;
    629c:	8a e0       	ldi	r24, 0x0A	; 10
    629e:	90 e0       	ldi	r25, 0x00	; 0

			while(c)
    62a0:	66 23       	and	r22, r22
    62a2:	51 f0       	breq	.+20     	; 0x62b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x7e>
			{
				avr_eeprom_write_byte(j++, c);
    62a4:	ec 01       	movw	r28, r24
    62a6:	21 96       	adiw	r28, 0x01	; 1
    62a8:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>
				c = *char_addr++;
    62ac:	f8 01       	movw	r30, r16
    62ae:	60 81       	ld	r22, Z
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
			{
				avr_eeprom_write_byte(j++, c);
    62b0:	ce 01       	movw	r24, r28
				c = *char_addr++;
    62b2:	0f 5f       	subi	r16, 0xFF	; 255
    62b4:	1f 4f       	sbci	r17, 0xFF	; 255
			char* char_addr = (char*)val;
			char c = *char_addr++;
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
    62b6:	f4 cf       	rjmp	.-24     	; 0x62a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x66>
			{
				avr_eeprom_write_byte(j++, c);
				c = *char_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    62b8:	60 e0       	ldi	r22, 0x00	; 0
    62ba:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    62be:	41 c0       	rjmp	.+130    	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
    62c0:	8a 01       	movw	r16, r20
    62c2:	0f 5f       	subi	r16, 0xFF	; 255
    62c4:	1f 4f       	sbci	r17, 0xFF	; 255
    62c6:	68 81       	ld	r22, Y
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
    62c8:	8f e1       	ldi	r24, 0x1F	; 31
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    62ca:	66 23       	and	r22, r22
    62cc:	59 f0       	breq	.+22     	; 0x62e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				avr_eeprom_write_byte(j++, c);
    62ce:	c1 e0       	ldi	r28, 0x01	; 1
    62d0:	c8 0f       	add	r28, r24
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>
				c = *uint8_addr++;
    62d8:	f8 01       	movw	r30, r16
    62da:	60 81       	ld	r22, Z
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
			{
				avr_eeprom_write_byte(j++, c);
    62dc:	8c 2f       	mov	r24, r28
				c = *uint8_addr++;
    62de:	0f 5f       	subi	r16, 0xFF	; 255
    62e0:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    62e2:	f3 cf       	rjmp	.-26     	; 0x62ca <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x90>
			{
				avr_eeprom_write_byte(j++, c);
				c = *uint8_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    62e4:	60 e0       	ldi	r22, 0x00	; 0
    62e6:	90 e0       	ldi	r25, 0x00	; 0
    62e8:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    62ec:	2a c0       	rjmp	.+84     	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Id_codespeed:
		{
			avr_eeprom_write_byte(Id_codespeed, *(uint8_t*)val);
    62ee:	68 81       	ld	r22, Y
    62f0:	88 e2       	ldi	r24, 0x28	; 40
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    62f8:	24 c0       	rjmp	.+72     	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Fox_setting:
		{
			avr_eeprom_write_byte(Fox_setting, *(uint8_t*)val);
    62fa:	68 81       	ld	r22, Y
    62fc:	89 e2       	ldi	r24, 0x29	; 41
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6304:	1e c0       	rjmp	.+60     	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_start_epoch:
		{
			avr_eeprom_write_dword(Event_start_epoch, *(uint32_t*)val);
    6306:	48 81       	ld	r20, Y
    6308:	59 81       	ldd	r21, Y+1	; 0x01
    630a:	6a 81       	ldd	r22, Y+2	; 0x02
    630c:	7b 81       	ldd	r23, Y+3	; 0x03
    630e:	82 e0       	ldi	r24, 0x02	; 2
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	0e 94 08 31 	call	0x6210	; 0x6210 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6316:	15 c0       	rjmp	.+42     	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_finish_epoch:
		{
			avr_eeprom_write_dword(Event_finish_epoch, *(uint32_t*)val);
    6318:	48 81       	ld	r20, Y
    631a:	59 81       	ldd	r21, Y+1	; 0x01
    631c:	6a 81       	ldd	r22, Y+2	; 0x02
    631e:	7b 81       	ldd	r23, Y+3	; 0x03
    6320:	86 e0       	ldi	r24, 0x06	; 6
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	0e 94 08 31 	call	0x6210	; 0x6210 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6328:	0c c0       	rjmp	.+24     	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Utc_offset:
		{
			avr_eeprom_write_byte(Utc_offset, *(uint8_t*)val);
    632a:	68 81       	ld	r22, Y
    632c:	8a e2       	ldi	r24, 0x2A	; 42
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6334:	06 c0       	rjmp	.+12     	; 0x6342 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Eeprom_initialization_flag:
		{
			avr_eeprom_write_word(Eeprom_initialization_flag, *(uint16_t*)val);
    6336:	68 81       	ld	r22, Y
    6338:	79 81       	ldd	r23, Y+1	; 0x01
    633a:	80 e0       	ldi	r24, 0x00	; 0
    633c:	90 e0       	ldi	r25, 0x00	; 0
    633e:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_Z21avr_eeprom_write_wordjj>
		{

		}
		break;
	}
}
    6342:	df 91       	pop	r29
    6344:	cf 91       	pop	r28
    6346:	1f 91       	pop	r17
    6348:	0f 91       	pop	r16
    634a:	08 95       	ret

0000634c <_ZN13EepromManager13saveAllEEPROMEv>:

/** 
 * Store any changed EEPROM variables
 */
void EepromManager::saveAllEEPROM(void)
{
    634c:	ef 92       	push	r14
    634e:	ff 92       	push	r15
    6350:	0f 93       	push	r16
    6352:	1f 93       	push	r17
    6354:	cf 93       	push	r28
    6356:	df 93       	push	r29
    6358:	7c 01       	movw	r14, r24
	uint16_t i;
	
	if(g_id_codespeed != eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)))
    635a:	88 e2       	ldi	r24, 0x28	; 40
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    6362:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <g_id_codespeed>
    6366:	89 17       	cp	r24, r25
    6368:	31 f0       	breq	.+12     	; 0x6376 <_ZN13EepromManager13saveAllEEPROMEv+0x2a>
	{
		updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    636a:	4b e0       	ldi	r20, 0x0B	; 11
    636c:	50 e4       	ldi	r21, 0x40	; 64
    636e:	68 e2       	ldi	r22, 0x28	; 40
    6370:	c7 01       	movw	r24, r14
    6372:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_fox != eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)))
    6376:	89 e2       	ldi	r24, 0x29	; 41
    6378:	90 e0       	ldi	r25, 0x00	; 0
    637a:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    637e:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <g_fox>
    6382:	89 17       	cp	r24, r25
    6384:	31 f0       	breq	.+12     	; 0x6392 <_ZN13EepromManager13saveAllEEPROMEv+0x46>
	{
		updateEEPROMVar(Fox_setting, (void*)&g_fox);
    6386:	4b e1       	ldi	r20, 0x1B	; 27
    6388:	50 e4       	ldi	r21, 0x40	; 64
    638a:	69 e2       	ldi	r22, 0x29	; 41
    638c:	c7 01       	movw	r24, r14
    638e:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_start_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch)))
    6392:	82 e0       	ldi	r24, 0x02	; 2
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <eeprom_read_dword>
    639a:	00 91 7d 47 	lds	r16, 0x477D	; 0x80477d <g_event_start_epoch>
    639e:	10 91 7e 47 	lds	r17, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    63a2:	20 91 7f 47 	lds	r18, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    63a6:	30 91 80 47 	lds	r19, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    63aa:	60 17       	cp	r22, r16
    63ac:	71 07       	cpc	r23, r17
    63ae:	82 07       	cpc	r24, r18
    63b0:	93 07       	cpc	r25, r19
    63b2:	31 f0       	breq	.+12     	; 0x63c0 <_ZN13EepromManager13saveAllEEPROMEv+0x74>
	{
		updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    63b4:	4d e7       	ldi	r20, 0x7D	; 125
    63b6:	57 e4       	ldi	r21, 0x47	; 71
    63b8:	62 e0       	ldi	r22, 0x02	; 2
    63ba:	c7 01       	movw	r24, r14
    63bc:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_finish_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch)))
    63c0:	86 e0       	ldi	r24, 0x06	; 6
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <eeprom_read_dword>
    63c8:	00 91 81 47 	lds	r16, 0x4781	; 0x804781 <g_event_finish_epoch>
    63cc:	10 91 82 47 	lds	r17, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    63d0:	20 91 83 47 	lds	r18, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    63d4:	30 91 84 47 	lds	r19, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    63d8:	60 17       	cp	r22, r16
    63da:	71 07       	cpc	r23, r17
    63dc:	82 07       	cpc	r24, r18
    63de:	93 07       	cpc	r25, r19
    63e0:	31 f0       	breq	.+12     	; 0x63ee <_ZN13EepromManager13saveAllEEPROMEv+0xa2>
	{
		updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    63e2:	41 e8       	ldi	r20, 0x81	; 129
    63e4:	57 e4       	ldi	r21, 0x47	; 71
    63e6:	66 e0       	ldi	r22, 0x06	; 6
    63e8:	c7 01       	movw	r24, r14
    63ea:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
    63ee:	c0 91 85 47 	lds	r28, 0x4785	; 0x804785 <g_utc_offset>
    63f2:	0c 2e       	mov	r0, r28
    63f4:	00 0c       	add	r0, r0
    63f6:	dd 0b       	sbc	r29, r29
    63f8:	8a e2       	ldi	r24, 0x2A	; 42
    63fa:	90 e0       	ldi	r25, 0x00	; 0
    63fc:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	c8 17       	cp	r28, r24
    6404:	d9 07       	cpc	r29, r25
    6406:	31 f0       	breq	.+12     	; 0x6414 <_ZN13EepromManager13saveAllEEPROMEv+0xc8>
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    6408:	45 e8       	ldi	r20, 0x85	; 133
    640a:	57 e4       	ldi	r21, 0x47	; 71
    640c:	6a e2       	ldi	r22, 0x2A	; 42
    640e:	c7 01       	movw	r24, r14
    6410:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    6414:	c0 e0       	ldi	r28, 0x00	; 0
    6416:	d0 e0       	ldi	r29, 0x00	; 0
    6418:	c4 31       	cpi	r28, 0x14	; 20
    641a:	d1 05       	cpc	r29, r1
    641c:	a0 f4       	brcc	.+40     	; 0x6446 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	{
		if(g_messages_text[STATION_ID][i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i]))))
    641e:	fe 01       	movw	r30, r28
    6420:	ee 5c       	subi	r30, 0xCE	; 206
    6422:	f8 4b       	sbci	r31, 0xB8	; 184
    6424:	15 89       	ldd	r17, Z+21	; 0x15
    6426:	ce 01       	movw	r24, r28
    6428:	86 5f       	subi	r24, 0xF6	; 246
    642a:	9f 4f       	sbci	r25, 0xFF	; 255
    642c:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    6430:	18 17       	cp	r17, r24
    6432:	39 f0       	breq	.+14     	; 0x6442 <_ZN13EepromManager13saveAllEEPROMEv+0xf6>
		{
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    6434:	47 e4       	ldi	r20, 0x47	; 71
    6436:	57 e4       	ldi	r21, 0x47	; 71
    6438:	6a e0       	ldi	r22, 0x0A	; 10
    643a:	c7 01       	movw	r24, r14
    643c:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    6440:	02 c0       	rjmp	.+4      	; 0x6446 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    6442:	21 96       	adiw	r28, 0x01	; 1
    6444:	e9 cf       	rjmp	.-46     	; 0x6418 <_ZN13EepromManager13saveAllEEPROMEv+0xcc>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6446:	c0 e0       	ldi	r28, 0x00	; 0
    6448:	d0 e0       	ldi	r29, 0x00	; 0
    644a:	c8 30       	cpi	r28, 0x08	; 8
    644c:	d1 05       	cpc	r29, r1
    644e:	a0 f4       	brcc	.+40     	; 0x6478 <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
	{
		if(g_unlockCode[i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i]))))
    6450:	fe 01       	movw	r30, r28
    6452:	ea 57       	subi	r30, 0x7A	; 122
    6454:	f8 4b       	sbci	r31, 0xB8	; 184
    6456:	10 81       	ld	r17, Z
    6458:	ce 01       	movw	r24, r28
    645a:	81 5e       	subi	r24, 0xE1	; 225
    645c:	9f 4f       	sbci	r25, 0xFF	; 255
    645e:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    6462:	18 17       	cp	r17, r24
    6464:	39 f0       	breq	.+14     	; 0x6474 <_ZN13EepromManager13saveAllEEPROMEv+0x128>
		{
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    6466:	46 e8       	ldi	r20, 0x86	; 134
    6468:	57 e4       	ldi	r21, 0x47	; 71
    646a:	6f e1       	ldi	r22, 0x1F	; 31
    646c:	c7 01       	movw	r24, r14
    646e:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    6472:	02 c0       	rjmp	.+4      	; 0x6478 <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6474:	21 96       	adiw	r28, 0x01	; 1
    6476:	e9 cf       	rjmp	.-46     	; 0x644a <_ZN13EepromManager13saveAllEEPROMEv+0xfe>
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
			break;
		}
	}
	
	if(g_80m_frequency != eeprom_read_dword(&(EepromManager::ee_vars.frequency)))
    6478:	8b e2       	ldi	r24, 0x2B	; 43
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <eeprom_read_dword>
    6480:	00 91 2c 40 	lds	r16, 0x402C	; 0x80402c <g_80m_frequency>
    6484:	10 91 2d 40 	lds	r17, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    6488:	20 91 2e 40 	lds	r18, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    648c:	30 91 2f 40 	lds	r19, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    6490:	60 17       	cp	r22, r16
    6492:	71 07       	cpc	r23, r17
    6494:	82 07       	cpc	r24, r18
    6496:	93 07       	cpc	r25, r19
    6498:	31 f0       	breq	.+12     	; 0x64a6 <_ZN13EepromManager13saveAllEEPROMEv+0x15a>
	{
		updateEEPROMVar(Frequency, (void*)&g_80m_frequency);
    649a:	4c e2       	ldi	r20, 0x2C	; 44
    649c:	50 e4       	ldi	r21, 0x40	; 64
    649e:	6b e2       	ldi	r22, 0x2B	; 43
    64a0:	c7 01       	movw	r24, r14
    64a2:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_rtty_offset != eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset)))
    64a6:	8f e2       	ldi	r24, 0x2F	; 47
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <eeprom_read_dword>
    64ae:	00 91 32 40 	lds	r16, 0x4032	; 0x804032 <g_rtty_offset>
    64b2:	10 91 33 40 	lds	r17, 0x4033	; 0x804033 <g_rtty_offset+0x1>
    64b6:	20 91 34 40 	lds	r18, 0x4034	; 0x804034 <g_rtty_offset+0x2>
    64ba:	30 91 35 40 	lds	r19, 0x4035	; 0x804035 <g_rtty_offset+0x3>
    64be:	60 17       	cp	r22, r16
    64c0:	71 07       	cpc	r23, r17
    64c2:	82 07       	cpc	r24, r18
    64c4:	93 07       	cpc	r25, r19
    64c6:	31 f0       	breq	.+12     	; 0x64d4 <_ZN13EepromManager13saveAllEEPROMEv+0x188>
	{
		updateEEPROMVar(RTTY_offset, (void*)&g_rtty_offset);
    64c8:	42 e3       	ldi	r20, 0x32	; 50
    64ca:	50 e4       	ldi	r21, 0x40	; 64
    64cc:	6f e2       	ldi	r22, 0x2F	; 47
    64ce:	c7 01       	movw	r24, r14
    64d0:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
    64d4:	83 e3       	ldi	r24, 0x33	; 51
    64d6:	90 e0       	ldi	r25, 0x00	; 0
    64d8:	0e 94 65 53 	call	0xa6ca	; 0xa6ca <eeprom_read_word>
    64dc:	20 91 30 40 	lds	r18, 0x4030	; 0x804030 <g_80m_power_level_mW>
    64e0:	30 91 31 40 	lds	r19, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    64e4:	82 17       	cp	r24, r18
    64e6:	93 07       	cpc	r25, r19
    64e8:	31 f0       	breq	.+12     	; 0x64f6 <_ZN13EepromManager13saveAllEEPROMEv+0x1aa>
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
    64ea:	40 e3       	ldi	r20, 0x30	; 48
    64ec:	50 e4       	ldi	r21, 0x40	; 64
    64ee:	63 e3       	ldi	r22, 0x33	; 51
    64f0:	c7 01       	movw	r24, r14
    64f2:	0e 94 1d 31 	call	0x623a	; 0x623a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
}
    64f6:	df 91       	pop	r29
    64f8:	cf 91       	pop	r28
    64fa:	1f 91       	pop	r17
    64fc:	0f 91       	pop	r16
    64fe:	ff 90       	pop	r15
    6500:	ef 90       	pop	r14
    6502:	08 95       	ret

00006504 <_ZN13EepromManager11readNonVolsEv>:


bool EepromManager::readNonVols(void)
{
    6504:	cf 93       	push	r28
    6506:	df 93       	push	r29
	bool failure = true;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    6508:	80 e0       	ldi	r24, 0x00	; 0
    650a:	90 e0       	ldi	r25, 0x00	; 0
    650c:	0e 94 65 53 	call	0xa6ca	; 0xa6ca <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    6510:	8e 3c       	cpi	r24, 0xCE	; 206
    6512:	91 05       	cpc	r25, r1
    6514:	09 f0       	breq	.+2      	; 0x6518 <_ZN13EepromManager11readNonVolsEv+0x14>
    6516:	dc c0       	rjmp	.+440    	; 0x66d0 <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    6518:	88 e2       	ldi	r24, 0x28	; 40
    651a:	90 e0       	ldi	r25, 0x00	; 0
    651c:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    6520:	85 31       	cpi	r24, 0x15	; 21
    6522:	20 f4       	brcc	.+8      	; 0x652c <_ZN13EepromManager11readNonVolsEv+0x28>
    6524:	85 30       	cpi	r24, 0x05	; 5
    6526:	18 f4       	brcc	.+6      	; 0x652e <_ZN13EepromManager11readNonVolsEv+0x2a>
    6528:	85 e0       	ldi	r24, 0x05	; 5
    652a:	01 c0       	rjmp	.+2      	; 0x652e <_ZN13EepromManager11readNonVolsEv+0x2a>
    652c:	84 e1       	ldi	r24, 0x14	; 20
    652e:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    6532:	89 e2       	ldi	r24, 0x29	; 41
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    653a:	82 31       	cpi	r24, 0x12	; 18
    653c:	08 f0       	brcs	.+2      	; 0x6540 <_ZN13EepromManager11readNonVolsEv+0x3c>
    653e:	81 e1       	ldi	r24, 0x11	; 17
    6540:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    6544:	82 e0       	ldi	r24, 0x02	; 2
    6546:	90 e0       	ldi	r25, 0x00	; 0
    6548:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <eeprom_read_dword>
    654c:	60 93 7d 47 	sts	0x477D, r22	; 0x80477d <g_event_start_epoch>
    6550:	70 93 7e 47 	sts	0x477E, r23	; 0x80477e <g_event_start_epoch+0x1>
    6554:	80 93 7f 47 	sts	0x477F, r24	; 0x80477f <g_event_start_epoch+0x2>
    6558:	90 93 80 47 	sts	0x4780, r25	; 0x804780 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    655c:	86 e0       	ldi	r24, 0x06	; 6
    655e:	90 e0       	ldi	r25, 0x00	; 0
    6560:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <eeprom_read_dword>
    6564:	60 93 81 47 	sts	0x4781, r22	; 0x804781 <g_event_finish_epoch>
    6568:	70 93 82 47 	sts	0x4782, r23	; 0x804782 <g_event_finish_epoch+0x1>
    656c:	80 93 83 47 	sts	0x4783, r24	; 0x804783 <g_event_finish_epoch+0x2>
    6570:	90 93 84 47 	sts	0x4784, r25	; 0x804784 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    6574:	8a e2       	ldi	r24, 0x2A	; 42
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    657c:	80 93 85 47 	sts	0x4785, r24	; 0x804785 <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    6580:	c0 e0       	ldi	r28, 0x00	; 0
    6582:	d0 e0       	ldi	r29, 0x00	; 0
    6584:	c4 31       	cpi	r28, 0x14	; 20
    6586:	d1 05       	cpc	r29, r1
    6588:	58 f4       	brcc	.+22     	; 0x65a0 <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    658a:	ce 01       	movw	r24, r28
    658c:	86 5f       	subi	r24, 0xF6	; 246
    658e:	9f 4f       	sbci	r25, 0xFF	; 255
    6590:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    6594:	fe 01       	movw	r30, r28
    6596:	ee 5c       	subi	r30, 0xCE	; 206
    6598:	f8 4b       	sbci	r31, 0xB8	; 184
    659a:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    659c:	81 11       	cpse	r24, r1
    659e:	03 c0       	rjmp	.+6      	; 0x65a6 <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    65a0:	c0 e0       	ldi	r28, 0x00	; 0
    65a2:	d0 e0       	ldi	r29, 0x00	; 0
    65a4:	02 c0       	rjmp	.+4      	; 0x65aa <_ZN13EepromManager11readNonVolsEv+0xa6>
    65a6:	21 96       	adiw	r28, 0x01	; 1
    65a8:	ed cf       	rjmp	.-38     	; 0x6584 <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    65aa:	c8 30       	cpi	r28, 0x08	; 8
    65ac:	d1 05       	cpc	r29, r1
    65ae:	68 f4       	brcc	.+26     	; 0x65ca <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    65b0:	ce 01       	movw	r24, r28
    65b2:	81 5e       	subi	r24, 0xE1	; 225
    65b4:	9f 4f       	sbci	r25, 0xFF	; 255
    65b6:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <eeprom_read_byte>
    65ba:	fe 01       	movw	r30, r28
    65bc:	ea 57       	subi	r30, 0x7A	; 122
    65be:	f8 4b       	sbci	r31, 0xB8	; 184
    65c0:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    65c2:	88 23       	and	r24, r24
    65c4:	11 f0       	breq	.+4      	; 0x65ca <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    65c6:	21 96       	adiw	r28, 0x01	; 1
    65c8:	f0 cf       	rjmp	.-32     	; 0x65aa <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    65ca:	8b e2       	ldi	r24, 0x2B	; 43
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <eeprom_read_dword>
    65d2:	61 30       	cpi	r22, 0x01	; 1
    65d4:	29 e0       	ldi	r18, 0x09	; 9
    65d6:	72 07       	cpc	r23, r18
    65d8:	2d e3       	ldi	r18, 0x3D	; 61
    65da:	82 07       	cpc	r24, r18
    65dc:	91 05       	cpc	r25, r1
    65de:	60 f4       	brcc	.+24     	; 0x65f8 <_ZN13EepromManager11readNonVolsEv+0xf4>
    65e0:	60 3e       	cpi	r22, 0xE0	; 224
    65e2:	27 e6       	ldi	r18, 0x67	; 103
    65e4:	72 07       	cpc	r23, r18
    65e6:	25 e3       	ldi	r18, 0x35	; 53
    65e8:	82 07       	cpc	r24, r18
    65ea:	91 05       	cpc	r25, r1
    65ec:	50 f4       	brcc	.+20     	; 0x6602 <_ZN13EepromManager11readNonVolsEv+0xfe>
    65ee:	40 ee       	ldi	r20, 0xE0	; 224
    65f0:	37 e6       	ldi	r19, 0x67	; 103
    65f2:	25 e3       	ldi	r18, 0x35	; 53
    65f4:	80 e0       	ldi	r24, 0x00	; 0
    65f6:	09 c0       	rjmp	.+18     	; 0x660a <_ZN13EepromManager11readNonVolsEv+0x106>
    65f8:	40 e0       	ldi	r20, 0x00	; 0
    65fa:	39 e0       	ldi	r19, 0x09	; 9
    65fc:	2d e3       	ldi	r18, 0x3D	; 61
    65fe:	80 e0       	ldi	r24, 0x00	; 0
    6600:	04 c0       	rjmp	.+8      	; 0x660a <_ZN13EepromManager11readNonVolsEv+0x106>
    6602:	46 2f       	mov	r20, r22
    6604:	37 2f       	mov	r19, r23
    6606:	28 2f       	mov	r18, r24
    6608:	89 2f       	mov	r24, r25
    660a:	40 93 2c 40 	sts	0x402C, r20	; 0x80402c <g_80m_frequency>
    660e:	30 93 2d 40 	sts	0x402D, r19	; 0x80402d <g_80m_frequency+0x1>
    6612:	20 93 2e 40 	sts	0x402E, r18	; 0x80402e <g_80m_frequency+0x2>
    6616:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    661a:	8f e2       	ldi	r24, 0x2F	; 47
    661c:	90 e0       	ldi	r25, 0x00	; 0
    661e:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <eeprom_read_dword>
    6622:	60 93 32 40 	sts	0x4032, r22	; 0x804032 <g_rtty_offset>
    6626:	70 93 33 40 	sts	0x4033, r23	; 0x804033 <g_rtty_offset+0x1>
    662a:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <g_rtty_offset+0x2>
    662e:	90 93 35 40 	sts	0x4035, r25	; 0x804035 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    6632:	83 e3       	ldi	r24, 0x33	; 51
    6634:	90 e0       	ldi	r25, 0x00	; 0
    6636:	0e 94 65 53 	call	0xa6ca	; 0xa6ca <eeprom_read_word>
    663a:	89 38       	cpi	r24, 0x89	; 137
    663c:	23 e1       	ldi	r18, 0x13	; 19
    663e:	92 07       	cpc	r25, r18
    6640:	18 f0       	brcs	.+6      	; 0x6648 <_ZN13EepromManager11readNonVolsEv+0x144>
    6642:	28 e8       	ldi	r18, 0x88	; 136
    6644:	83 e1       	ldi	r24, 0x13	; 19
    6646:	02 c0       	rjmp	.+4      	; 0x664c <_ZN13EepromManager11readNonVolsEv+0x148>
    6648:	28 2f       	mov	r18, r24
    664a:	89 2f       	mov	r24, r25
    664c:	20 93 30 40 	sts	0x4030, r18	; 0x804030 <g_80m_power_level_mW>
    6650:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    6654:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    6658:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    665c:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    6660:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    6664:	89 2b       	or	r24, r25
    6666:	8a 2b       	or	r24, r26
    6668:	8b 2b       	or	r24, r27
    666a:	b9 f0       	breq	.+46     	; 0x669a <_ZN13EepromManager11readNonVolsEv+0x196>
    666c:	40 91 81 47 	lds	r20, 0x4781	; 0x804781 <g_event_finish_epoch>
    6670:	50 91 82 47 	lds	r21, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    6674:	60 91 83 47 	lds	r22, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    6678:	70 91 84 47 	lds	r23, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    667c:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    6680:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    6684:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    6688:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    668c:	84 17       	cp	r24, r20
    668e:	95 07       	cpc	r25, r21
    6690:	a6 07       	cpc	r26, r22
    6692:	b7 07       	cpc	r27, r23
    6694:	20 f4       	brcc	.+8      	; 0x669e <_ZN13EepromManager11readNonVolsEv+0x19a>
    6696:	80 e0       	ldi	r24, 0x00	; 0
    6698:	03 c0       	rjmp	.+6      	; 0x66a0 <_ZN13EepromManager11readNonVolsEv+0x19c>
    669a:	80 e0       	ldi	r24, 0x00	; 0
    669c:	01 c0       	rjmp	.+2      	; 0x66a0 <_ZN13EepromManager11readNonVolsEv+0x19c>
    669e:	81 e0       	ldi	r24, 0x01	; 1
    66a0:	88 23       	and	r24, r24
    66a2:	c1 f0       	breq	.+48     	; 0x66d4 <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    66a4:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <g_event_start_epoch>
    66a8:	90 91 7e 47 	lds	r25, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    66ac:	a0 91 7f 47 	lds	r26, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    66b0:	b0 91 80 47 	lds	r27, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    66b4:	80 58       	subi	r24, 0x80	; 128
    66b6:	9e 4a       	sbci	r25, 0xAE	; 174
    66b8:	ae 4f       	sbci	r26, 0xFE	; 254
    66ba:	bf 4f       	sbci	r27, 0xFF	; 255
    66bc:	80 93 81 47 	sts	0x4781, r24	; 0x804781 <g_event_finish_epoch>
    66c0:	90 93 82 47 	sts	0x4782, r25	; 0x804782 <g_event_finish_epoch+0x1>
    66c4:	a0 93 83 47 	sts	0x4783, r26	; 0x804783 <g_event_finish_epoch+0x2>
    66c8:	b0 93 84 47 	sts	0x4784, r27	; 0x804784 <g_event_finish_epoch+0x3>
		}

		failure = false;
    66cc:	80 e0       	ldi	r24, 0x00	; 0
    66ce:	03 c0       	rjmp	.+6      	; 0x66d6 <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


bool EepromManager::readNonVols(void)
{
	bool failure = true;
    66d0:	81 e0       	ldi	r24, 0x01	; 1
    66d2:	01 c0       	rjmp	.+2      	; 0x66d6 <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = false;
    66d4:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    66d6:	df 91       	pop	r29
    66d8:	cf 91       	pop	r28
    66da:	08 95       	ret

000066dc <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	bool EepromManager::initializeEEPROMVars(void)
	{
    66dc:	ef 92       	push	r14
    66de:	ff 92       	push	r15
    66e0:	0f 93       	push	r16
    66e2:	1f 93       	push	r17
    66e4:	cf 93       	push	r28
    66e6:	df 93       	push	r29
		bool err = false;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    66e8:	80 e0       	ldi	r24, 0x00	; 0
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	0e 94 65 53 	call	0xa6ca	; 0xa6ca <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    66f0:	8e 3c       	cpi	r24, 0xCE	; 206
    66f2:	91 05       	cpc	r25, r1
    66f4:	09 f4       	brne	.+2      	; 0x66f8 <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    66f6:	aa c0       	rjmp	.+340    	; 0x684c <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    66f8:	84 e1       	ldi	r24, 0x14	; 20
    66fa:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    66fe:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    6702:	88 e2       	ldi	r24, 0x28	; 40
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    670a:	81 e0       	ldi	r24, 0x01	; 1
    670c:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    6710:	60 91 1b 40 	lds	r22, 0x401B	; 0x80401b <g_fox>
    6714:	89 e2       	ldi	r24, 0x29	; 41
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    671c:	10 92 7d 47 	sts	0x477D, r1	; 0x80477d <g_event_start_epoch>
    6720:	10 92 7e 47 	sts	0x477E, r1	; 0x80477e <g_event_start_epoch+0x1>
    6724:	10 92 7f 47 	sts	0x477F, r1	; 0x80477f <g_event_start_epoch+0x2>
    6728:	10 92 80 47 	sts	0x4780, r1	; 0x804780 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    672c:	40 91 7d 47 	lds	r20, 0x477D	; 0x80477d <g_event_start_epoch>
    6730:	50 91 7e 47 	lds	r21, 0x477E	; 0x80477e <g_event_start_epoch+0x1>
    6734:	60 91 7f 47 	lds	r22, 0x477F	; 0x80477f <g_event_start_epoch+0x2>
    6738:	70 91 80 47 	lds	r23, 0x4780	; 0x804780 <g_event_start_epoch+0x3>
    673c:	82 e0       	ldi	r24, 0x02	; 2
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	0e 94 08 31 	call	0x6210	; 0x6210 <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    6744:	10 92 81 47 	sts	0x4781, r1	; 0x804781 <g_event_finish_epoch>
    6748:	10 92 82 47 	sts	0x4782, r1	; 0x804782 <g_event_finish_epoch+0x1>
    674c:	10 92 83 47 	sts	0x4783, r1	; 0x804783 <g_event_finish_epoch+0x2>
    6750:	10 92 84 47 	sts	0x4784, r1	; 0x804784 <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    6754:	40 91 81 47 	lds	r20, 0x4781	; 0x804781 <g_event_finish_epoch>
    6758:	50 91 82 47 	lds	r21, 0x4782	; 0x804782 <g_event_finish_epoch+0x1>
    675c:	60 91 83 47 	lds	r22, 0x4783	; 0x804783 <g_event_finish_epoch+0x2>
    6760:	70 91 84 47 	lds	r23, 0x4784	; 0x804784 <g_event_finish_epoch+0x3>
    6764:	86 e0       	ldi	r24, 0x06	; 6
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	0e 94 08 31 	call	0x6210	; 0x6210 <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    676c:	10 92 85 47 	sts	0x4785, r1	; 0x804785 <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    6770:	60 91 85 47 	lds	r22, 0x4785	; 0x804785 <g_utc_offset>
    6774:	8a e2       	ldi	r24, 0x2A	; 42
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    677c:	10 92 47 47 	sts	0x4747, r1	; 0x804747 <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    6780:	60 e0       	ldi	r22, 0x00	; 0
    6782:	8a e0       	ldi	r24, 0x0A	; 10
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    678a:	e1 eb       	ldi	r30, 0xB1	; 177
    678c:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    678e:	c0 e0       	ldi	r28, 0x00	; 0
    6790:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    6792:	8f e1       	ldi	r24, 0x1F	; 31
    6794:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6796:	c4 30       	cpi	r28, 0x04	; 4
    6798:	d1 05       	cpc	r29, r1
    679a:	90 f4       	brcc	.+36     	; 0x67c0 <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    679c:	df 01       	movw	r26, r30
    679e:	2d 91       	ld	r18, X+
    67a0:	8d 01       	movw	r16, r26
    67a2:	de 01       	movw	r26, r28
    67a4:	aa 57       	subi	r26, 0x7A	; 122
    67a6:	b8 4b       	sbci	r27, 0xB8	; 184
    67a8:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    67aa:	60 81       	ld	r22, Z
    67ac:	7c 01       	movw	r14, r24
    67ae:	bf ef       	ldi	r27, 0xFF	; 255
    67b0:	eb 1a       	sub	r14, r27
    67b2:	fb 0a       	sbc	r15, r27
    67b4:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    67b8:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    67ba:	f8 01       	movw	r30, r16
    67bc:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    67be:	eb cf       	rjmp	.-42     	; 0x6796 <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    67c0:	60 e0       	ldi	r22, 0x00	; 0
    67c2:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    67c6:	ca 57       	subi	r28, 0x7A	; 122
    67c8:	d8 4b       	sbci	r29, 0xB8	; 184
    67ca:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    67cc:	80 e2       	ldi	r24, 0x20	; 32
    67ce:	94 e0       	ldi	r25, 0x04	; 4
    67d0:	a6 e3       	ldi	r26, 0x36	; 54
    67d2:	b0 e0       	ldi	r27, 0x00	; 0
    67d4:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    67d8:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    67dc:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    67e0:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    67e4:	40 e2       	ldi	r20, 0x20	; 32
    67e6:	54 e0       	ldi	r21, 0x04	; 4
    67e8:	66 e3       	ldi	r22, 0x36	; 54
    67ea:	70 e0       	ldi	r23, 0x00	; 0
    67ec:	8b e2       	ldi	r24, 0x2B	; 43
    67ee:	90 e0       	ldi	r25, 0x00	; 0
    67f0:	0e 94 08 31 	call	0x6210	; 0x6210 <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    67f4:	8a ea       	ldi	r24, 0xAA	; 170
    67f6:	90 e0       	ldi	r25, 0x00	; 0
    67f8:	a0 e0       	ldi	r26, 0x00	; 0
    67fa:	b0 e0       	ldi	r27, 0x00	; 0
    67fc:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <g_rtty_offset>
    6800:	90 93 33 40 	sts	0x4033, r25	; 0x804033 <g_rtty_offset+0x1>
    6804:	a0 93 34 40 	sts	0x4034, r26	; 0x804034 <g_rtty_offset+0x2>
    6808:	b0 93 35 40 	sts	0x4035, r27	; 0x804035 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    680c:	40 91 2c 40 	lds	r20, 0x402C	; 0x80402c <g_80m_frequency>
    6810:	50 91 2d 40 	lds	r21, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    6814:	60 91 2e 40 	lds	r22, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    6818:	70 91 2f 40 	lds	r23, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    681c:	8b e2       	ldi	r24, 0x2B	; 43
    681e:	90 e0       	ldi	r25, 0x00	; 0
    6820:	0e 94 08 31 	call	0x6210	; 0x6210 <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    6824:	84 ef       	ldi	r24, 0xF4	; 244
    6826:	91 e0       	ldi	r25, 0x01	; 1
    6828:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    682c:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    6830:	44 ef       	ldi	r20, 0xF4	; 244
    6832:	51 e0       	ldi	r21, 0x01	; 1
    6834:	60 e0       	ldi	r22, 0x00	; 0
    6836:	70 e0       	ldi	r23, 0x00	; 0
    6838:	83 e3       	ldi	r24, 0x33	; 51
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	0e 94 08 31 	call	0x6210	; 0x6210 <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    6840:	6e ec       	ldi	r22, 0xCE	; 206
    6842:	70 e0       	ldi	r23, 0x00	; 0
    6844:	80 e0       	ldi	r24, 0x00	; 0
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    684c:	80 e0       	ldi	r24, 0x00	; 0
    684e:	df 91       	pop	r29
    6850:	cf 91       	pop	r28
    6852:	1f 91       	pop	r17
    6854:	0f 91       	pop	r16
    6856:	ff 90       	pop	r15
    6858:	ef 90       	pop	r14
    685a:	08 95       	ret

0000685c <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    685c:	ef 92       	push	r14
    685e:	ff 92       	push	r15
    6860:	0f 93       	push	r16
    6862:	1f 93       	push	r17
    6864:	cf 93       	push	r28
    6866:	df 93       	push	r29
    6868:	e4 2e       	mov	r14, r20
    686a:	f5 2e       	mov	r15, r21
    686c:	d6 2f       	mov	r29, r22
    686e:	c7 2f       	mov	r28, r23
    6870:	00 93 b4 47 	sts	0x47B4, r16	; 0x8047b4 <_SAMPLING_FREQUENCY>
    6874:	10 93 b5 47 	sts	0x47B5, r17	; 0x8047b5 <_SAMPLING_FREQUENCY+0x1>
    6878:	20 93 b6 47 	sts	0x47B6, r18	; 0x8047b6 <_SAMPLING_FREQUENCY+0x2>
    687c:	30 93 b7 47 	sts	0x47B7, r19	; 0x8047b7 <_SAMPLING_FREQUENCY+0x3>
    6880:	20 e0       	ldi	r18, 0x00	; 0
    6882:	30 e0       	ldi	r19, 0x00	; 0
    6884:	41 e5       	ldi	r20, 0x51	; 81
    6886:	53 e4       	ldi	r21, 0x43	; 67
    6888:	6e 2d       	mov	r22, r14
    688a:	7f 2d       	mov	r23, r15
    688c:	8d 2f       	mov	r24, r29
    688e:	9c 2f       	mov	r25, r28
    6890:	0e 94 18 4c 	call	0x9830	; 0x9830 <__gesf2>
    6894:	18 16       	cp	r1, r24
    6896:	8c f0       	brlt	.+34     	; 0x68ba <_ZN8GoertzelC1Eff+0x5e>
    6898:	20 e0       	ldi	r18, 0x00	; 0
    689a:	30 e0       	ldi	r19, 0x00	; 0
    689c:	48 ec       	ldi	r20, 0xC8	; 200
    689e:	52 e4       	ldi	r21, 0x42	; 66
    68a0:	6e 2d       	mov	r22, r14
    68a2:	7f 2d       	mov	r23, r15
    68a4:	8d 2f       	mov	r24, r29
    68a6:	9c 2f       	mov	r25, r28
    68a8:	0e 94 78 4a 	call	0x94f0	; 0x94f0 <__cmpsf2>
    68ac:	88 23       	and	r24, r24
    68ae:	4c f4       	brge	.+18     	; 0x68c2 <_ZN8GoertzelC1Eff+0x66>
    68b0:	e1 2c       	mov	r14, r1
    68b2:	f1 2c       	mov	r15, r1
    68b4:	d8 ec       	ldi	r29, 0xC8	; 200
    68b6:	c2 e4       	ldi	r28, 0x42	; 66
    68b8:	04 c0       	rjmp	.+8      	; 0x68c2 <_ZN8GoertzelC1Eff+0x66>
    68ba:	e1 2c       	mov	r14, r1
    68bc:	f1 2c       	mov	r15, r1
    68be:	d1 e5       	ldi	r29, 0x51	; 81
    68c0:	c3 e4       	ldi	r28, 0x43	; 67
    68c2:	6e 2d       	mov	r22, r14
    68c4:	7f 2d       	mov	r23, r15
    68c6:	8d 2f       	mov	r24, r29
    68c8:	9c 2f       	mov	r25, r28
    68ca:	0e 94 ef 4a 	call	0x95de	; 0x95de <__fixsfsi>
    68ce:	60 93 b2 47 	sts	0x47B2, r22	; 0x8047b2 <_N>
    68d2:	70 93 b3 47 	sts	0x47B3, r23	; 0x8047b3 <_N+0x1>
    68d6:	80 91 b2 47 	lds	r24, 0x47B2	; 0x8047b2 <_N>
    68da:	90 91 b3 47 	lds	r25, 0x47B3	; 0x8047b3 <_N+0x1>
    68de:	88 0f       	add	r24, r24
    68e0:	99 1f       	adc	r25, r25
    68e2:	0e 94 35 4d 	call	0x9a6a	; 0x9a6a <malloc>
    68e6:	80 93 ad 47 	sts	0x47AD, r24	; 0x8047ad <testData>
    68ea:	90 93 ae 47 	sts	0x47AE, r25	; 0x8047ae <testData+0x1>
    68ee:	df 91       	pop	r29
    68f0:	cf 91       	pop	r28
    68f2:	1f 91       	pop	r17
    68f4:	0f 91       	pop	r16
    68f6:	ff 90       	pop	r15
    68f8:	ef 90       	pop	r14
    68fa:	08 95       	ret

000068fc <_ZN8GoertzelD1Ev>:
    68fc:	80 91 ad 47 	lds	r24, 0x47AD	; 0x8047ad <testData>
    6900:	90 91 ae 47 	lds	r25, 0x47AE	; 0x8047ae <testData+0x1>
    6904:	0e 94 cd 4d 	call	0x9b9a	; 0x9b9a <free>
    6908:	08 95       	ret

0000690a <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    690a:	80 91 af 47 	lds	r24, 0x47AF	; 0x8047af <_samplesReady>
    690e:	88 23       	and	r24, r24
    6910:	19 f0       	breq	.+6      	; 0x6918 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    6912:	80 91 af 47 	lds	r24, 0x47AF	; 0x8047af <_samplesReady>
    6916:	08 95       	ret
	}

	testData[_index] = data;
    6918:	e0 91 b0 47 	lds	r30, 0x47B0	; 0x8047b0 <_index>
    691c:	f0 91 b1 47 	lds	r31, 0x47B1	; 0x8047b1 <_index+0x1>
    6920:	ee 0f       	add	r30, r30
    6922:	ff 1f       	adc	r31, r31
    6924:	80 91 ad 47 	lds	r24, 0x47AD	; 0x8047ad <testData>
    6928:	90 91 ae 47 	lds	r25, 0x47AE	; 0x8047ae <testData+0x1>
    692c:	e8 0f       	add	r30, r24
    692e:	f9 1f       	adc	r31, r25
    6930:	60 83       	st	Z, r22
    6932:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    6934:	80 91 b0 47 	lds	r24, 0x47B0	; 0x8047b0 <_index>
    6938:	90 91 b1 47 	lds	r25, 0x47B1	; 0x8047b1 <_index+0x1>
    693c:	01 96       	adiw	r24, 0x01	; 1
    693e:	80 93 b0 47 	sts	0x47B0, r24	; 0x8047b0 <_index>
    6942:	90 93 b1 47 	sts	0x47B1, r25	; 0x8047b1 <_index+0x1>
	if(_index >= _N)
    6946:	20 91 b0 47 	lds	r18, 0x47B0	; 0x8047b0 <_index>
    694a:	30 91 b1 47 	lds	r19, 0x47B1	; 0x8047b1 <_index+0x1>
    694e:	80 91 b2 47 	lds	r24, 0x47B2	; 0x8047b2 <_N>
    6952:	90 91 b3 47 	lds	r25, 0x47B3	; 0x8047b3 <_N+0x1>
    6956:	28 17       	cp	r18, r24
    6958:	39 07       	cpc	r19, r25
    695a:	3c f0       	brlt	.+14     	; 0x696a <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    695c:	10 92 b0 47 	sts	0x47B0, r1	; 0x8047b0 <_index>
    6960:	10 92 b1 47 	sts	0x47B1, r1	; 0x8047b1 <_index+0x1>
		_samplesReady = true;
    6964:	81 e0       	ldi	r24, 0x01	; 1
    6966:	80 93 af 47 	sts	0x47AF, r24	; 0x8047af <_samplesReady>
	}

	return(_samplesReady);
    696a:	80 91 af 47 	lds	r24, 0x47AF	; 0x8047af <_samplesReady>
}
    696e:	08 95       	ret

00006970 <_ZL11i2c_0_WaitWv>:

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
    6970:	8c e2       	ldi	r24, 0x2C	; 44
    6972:	91 e0       	ldi	r25, 0x01	; 1
    6974:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    6978:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	PORTC_set_pin_pull_mode(3, PORT_PULL_UP);
}

static uint8_t i2c_0_WaitW(void)
{
	uint8_t state = I2C_INIT;
    697c:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 300;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    697e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6982:	90 7c       	andi	r25, 0xC0	; 192
    6984:	31 f0       	breq	.+12     	; 0x6992 <_ZL11i2c_0_WaitWv+0x22>
		{
			if(!(TWI0.MSTATUS & TWI_RXACK_bm))
    6986:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    698a:	84 fd       	sbrc	r24, 4
    698c:	07 c0       	rjmp	.+14     	; 0x699c <_ZL11i2c_0_WaitWv+0x2c>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    698e:	81 e0       	ldi	r24, 0x01	; 1
    6990:	08 c0       	rjmp	.+16     	; 0x69a2 <_ZL11i2c_0_WaitWv+0x32>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6992:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6996:	9c 70       	andi	r25, 0x0C	; 12
    6998:	19 f4       	brne	.+6      	; 0x69a0 <_ZL11i2c_0_WaitWv+0x30>
    699a:	03 c0       	rjmp	.+6      	; 0x69a2 <_ZL11i2c_0_WaitWv+0x32>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    699c:	82 e0       	ldi	r24, 0x02	; 2
    699e:	01 c0       	rjmp	.+2      	; 0x69a2 <_ZL11i2c_0_WaitWv+0x32>
			}
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    69a0:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    69a2:	81 11       	cpse	r24, r1
    69a4:	08 c0       	rjmp	.+16     	; 0x69b6 <_ZL11i2c_0_WaitWv+0x46>
    69a6:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    69aa:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    69ae:	23 2b       	or	r18, r19
    69b0:	21 f4       	brne	.+8      	; 0x69ba <_ZL11i2c_0_WaitWv+0x4a>
    69b2:	90 e0       	ldi	r25, 0x00	; 0
    69b4:	03 c0       	rjmp	.+6      	; 0x69bc <_ZL11i2c_0_WaitWv+0x4c>
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	01 c0       	rjmp	.+2      	; 0x69bc <_ZL11i2c_0_WaitWv+0x4c>
    69ba:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 300;
	
	do
    69bc:	91 11       	cpse	r25, r1
    69be:	df cf       	rjmp	.-66     	; 0x697e <_ZL11i2c_0_WaitWv+0xe>
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	if(!g_i2c0_timeout_ticks) 
    69c0:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    69c4:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    69c8:	23 2b       	or	r18, r19
    69ca:	09 f4       	brne	.+2      	; 0x69ce <_ZL11i2c_0_WaitWv+0x5e>
	{
		state = I2C_ERROR;
    69cc:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	return state;
}
    69ce:	08 95       	ret

000069d0 <_ZL11i2c_0_WaitRv>:

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    69d0:	88 ec       	ldi	r24, 0xC8	; 200
    69d2:	90 e0       	ldi	r25, 0x00	; 0
    69d4:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    69d8:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
    69dc:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    69de:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    69e2:	90 7c       	andi	r25, 0xC0	; 192
    69e4:	29 f4       	brne	.+10     	; 0x69f0 <_ZL11i2c_0_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    69e6:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    69ea:	9c 70       	andi	r25, 0x0C	; 12
    69ec:	19 f4       	brne	.+6      	; 0x69f4 <_ZL11i2c_0_WaitRv+0x24>
    69ee:	03 c0       	rjmp	.+6      	; 0x69f6 <_ZL11i2c_0_WaitRv+0x26>
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    69f0:	83 e0       	ldi	r24, 0x03	; 3
    69f2:	01 c0       	rjmp	.+2      	; 0x69f6 <_ZL11i2c_0_WaitRv+0x26>
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    69f4:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    69f6:	81 11       	cpse	r24, r1
    69f8:	08 c0       	rjmp	.+16     	; 0x6a0a <_ZL11i2c_0_WaitRv+0x3a>
    69fa:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    69fe:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6a02:	23 2b       	or	r18, r19
    6a04:	21 f4       	brne	.+8      	; 0x6a0e <_ZL11i2c_0_WaitRv+0x3e>
    6a06:	90 e0       	ldi	r25, 0x00	; 0
    6a08:	03 c0       	rjmp	.+6      	; 0x6a10 <_ZL11i2c_0_WaitRv+0x40>
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
    6a0c:	01 c0       	rjmp	.+2      	; 0x6a10 <_ZL11i2c_0_WaitRv+0x40>
    6a0e:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    6a10:	91 11       	cpse	r25, r1
    6a12:	e5 cf       	rjmp	.-54     	; 0x69de <_ZL11i2c_0_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    6a14:	08 95       	ret

00006a16 <_ZL11i2c_1_WaitWv>:

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
    6a16:	88 ec       	ldi	r24, 0xC8	; 200
    6a18:	90 e0       	ldi	r25, 0x00	; 0
    6a1a:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    6a1e:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
	PORTB_set_pin_pull_mode(3, PORT_PULL_UP);
}

static uint8_t i2c_1_WaitW(void)
{
	uint8_t state = I2C_INIT;
    6a22:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c1_timeout_ticks = 200;
	
	do
	{
		uint8_t stat = TWI1.MSTATUS;
    6a24:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
		if(stat & (TWI_WIF_bm | TWI_RIF_bm))
    6a28:	29 2f       	mov	r18, r25
    6a2a:	20 7c       	andi	r18, 0xC0	; 192
    6a2c:	21 f0       	breq	.+8      	; 0x6a36 <_ZL11i2c_1_WaitWv+0x20>
		{
			if(!(stat & TWI_RXACK_bm))
    6a2e:	94 fd       	sbrc	r25, 4
    6a30:	05 c0       	rjmp	.+10     	; 0x6a3c <_ZL11i2c_1_WaitWv+0x26>
			{
				/* client responded with ack - TWI goes to M1 state */
				state = I2C_ACKED;
    6a32:	81 e0       	ldi	r24, 0x01	; 1
    6a34:	06 c0       	rjmp	.+12     	; 0x6a42 <_ZL11i2c_1_WaitWv+0x2c>
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6a36:	9c 70       	andi	r25, 0x0C	; 12
    6a38:	19 f4       	brne	.+6      	; 0x6a40 <_ZL11i2c_1_WaitWv+0x2a>
    6a3a:	03 c0       	rjmp	.+6      	; 0x6a42 <_ZL11i2c_1_WaitWv+0x2c>
				state = I2C_ACKED;
			}
			else
			{
				/* address sent but no ack received - TWI goes to M3 state */
				state = I2C_NACKED;
    6a3c:	82 e0       	ldi	r24, 0x02	; 2
    6a3e:	01 c0       	rjmp	.+2      	; 0x6a42 <_ZL11i2c_1_WaitWv+0x2c>
			}
		}
		else if(stat & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    6a40:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c1_timeout_ticks);
    6a42:	81 11       	cpse	r24, r1
    6a44:	08 c0       	rjmp	.+16     	; 0x6a56 <_ZL11i2c_1_WaitWv+0x40>
    6a46:	20 91 1e 40 	lds	r18, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    6a4a:	30 91 1f 40 	lds	r19, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    6a4e:	23 2b       	or	r18, r19
    6a50:	21 f4       	brne	.+8      	; 0x6a5a <_ZL11i2c_1_WaitWv+0x44>
    6a52:	90 e0       	ldi	r25, 0x00	; 0
    6a54:	03 c0       	rjmp	.+6      	; 0x6a5c <_ZL11i2c_1_WaitWv+0x46>
    6a56:	90 e0       	ldi	r25, 0x00	; 0
    6a58:	01 c0       	rjmp	.+2      	; 0x6a5c <_ZL11i2c_1_WaitWv+0x46>
    6a5a:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c1_timeout_ticks = 200;
	
	do
    6a5c:	91 11       	cpse	r25, r1
    6a5e:	e2 cf       	rjmp	.-60     	; 0x6a24 <_ZL11i2c_1_WaitWv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c1_timeout_ticks);
	
	return state;
}
    6a60:	08 95       	ret

00006a62 <_ZL11I2C_1_WaitRv>:

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
    6a62:	88 ec       	ldi	r24, 0xC8	; 200
    6a64:	90 e0       	ldi	r25, 0x00	; 0
    6a66:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    6a6a:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
	return state;
}

static uint8_t I2C_1_WaitR(void)
{
	uint8_t state = I2C_INIT;
    6a6e:	80 e0       	ldi	r24, 0x00	; 0
	
	g_i2c0_timeout_ticks = 200;
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    6a70:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    6a74:	90 7c       	andi	r25, 0xC0	; 192
    6a76:	29 f4       	brne	.+10     	; 0x6a82 <_ZL11I2C_1_WaitRv+0x20>
		{
			state = I2C_READY;
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    6a78:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    6a7c:	9c 70       	andi	r25, 0x0C	; 12
    6a7e:	19 f4       	brne	.+6      	; 0x6a86 <_ZL11I2C_1_WaitRv+0x24>
    6a80:	03 c0       	rjmp	.+6      	; 0x6a88 <_ZL11I2C_1_WaitRv+0x26>
	
	do
	{
		if(TWI1.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
		{
			state = I2C_READY;
    6a82:	83 e0       	ldi	r24, 0x03	; 3
    6a84:	01 c0       	rjmp	.+2      	; 0x6a88 <_ZL11I2C_1_WaitRv+0x26>
		}
		else if(TWI1.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
    6a86:	84 e0       	ldi	r24, 0x04	; 4
		}
	} while(!state && g_i2c0_timeout_ticks);
    6a88:	81 11       	cpse	r24, r1
    6a8a:	08 c0       	rjmp	.+16     	; 0x6a9c <_ZL11I2C_1_WaitRv+0x3a>
    6a8c:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    6a90:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6a94:	23 2b       	or	r18, r19
    6a96:	21 f4       	brne	.+8      	; 0x6aa0 <_ZL11I2C_1_WaitRv+0x3e>
    6a98:	90 e0       	ldi	r25, 0x00	; 0
    6a9a:	03 c0       	rjmp	.+6      	; 0x6aa2 <_ZL11I2C_1_WaitRv+0x40>
    6a9c:	90 e0       	ldi	r25, 0x00	; 0
    6a9e:	01 c0       	rjmp	.+2      	; 0x6aa2 <_ZL11I2C_1_WaitRv+0x40>
    6aa0:	91 e0       	ldi	r25, 0x01	; 1
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 200;
	
	do
    6aa2:	91 11       	cpse	r25, r1
    6aa4:	e5 cf       	rjmp	.-54     	; 0x6a70 <_ZL11I2C_1_WaitRv+0xe>
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
	
	return state;
}
    6aa6:	08 95       	ret

00006aa8 <I2C_0_Init>:
/************************************************************************/

void I2C_0_Init(void)
{
	/* Select I2C pins PC2/PC3 */
	PORTMUX.TWIROUTEA &= 0x0A;
    6aa8:	e0 ee       	ldi	r30, 0xE0	; 224
    6aaa:	f5 e0       	ldi	r31, 0x05	; 5
    6aac:	85 81       	ldd	r24, Z+5	; 0x05
    6aae:	8a 70       	andi	r24, 0x0A	; 10
    6ab0:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x02;
    6ab2:	85 81       	ldd	r24, Z+5	; 0x05
    6ab4:	82 60       	ori	r24, 0x02	; 2
    6ab6:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI0.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    6ab8:	e0 e0       	ldi	r30, 0x00	; 0
    6aba:	f9 e0       	ldi	r31, 0x09	; 9
    6abc:	8f e6       	ldi	r24, 0x6F	; 111
    6abe:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI0.MCTRLA = TWI_ENABLE_bm;
    6ac0:	81 e0       	ldi	r24, 0x01	; 1
    6ac2:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI0.MADDR = 0x00;
    6ac4:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI0.MDATA = 0x00;
    6ac6:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6ac8:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6aca:	e2 e5       	ldi	r30, 0x52	; 82
    6acc:	f4 e0       	ldi	r31, 0x04	; 4
    6ace:	80 81       	ld	r24, Z
    6ad0:	88 60       	ori	r24, 0x08	; 8
    6ad2:	80 83       	st	Z, r24
    6ad4:	e3 e5       	ldi	r30, 0x53	; 83
    6ad6:	f4 e0       	ldi	r31, 0x04	; 4
    6ad8:	80 81       	ld	r24, Z
    6ada:	88 60       	ori	r24, 0x08	; 8
    6adc:	80 83       	st	Z, r24
    6ade:	08 95       	ret

00006ae0 <I2C_0_GetData>:
	return retVal;
}

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_0_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6ae0:	ef 92       	push	r14
    6ae2:	ff 92       	push	r15
    6ae4:	1f 93       	push	r17
    6ae6:	cf 93       	push	r28
    6ae8:	df 93       	push	r29
    6aea:	c8 2f       	mov	r28, r24
    6aec:	d6 2f       	mov	r29, r22
    6aee:	7a 01       	movw	r14, r20
    6af0:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
    6af2:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6af6:	0e 94 b8 34 	call	0x6970	; 0x6970 <_ZL11i2c_0_WaitWv>
    6afa:	81 30       	cpi	r24, 0x01	; 1
    6afc:	61 f5       	brne	.+88     	; 0x6b56 <I2C_0_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    6afe:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    6b02:	0e 94 b8 34 	call	0x6970	; 0x6970 <_ZL11i2c_0_WaitWv>
    6b06:	81 30       	cpi	r24, 0x01	; 1
    6b08:	41 f5       	brne	.+80     	; 0x6b5a <I2C_0_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
    6b0a:	c1 60       	ori	r28, 0x01	; 1
    6b0c:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6b10:	0e 94 b8 34 	call	0x6970	; 0x6970 <_ZL11i2c_0_WaitWv>
    6b14:	81 30       	cpi	r24, 0x01	; 1
    6b16:	19 f5       	brne	.+70     	; 0x6b5e <I2C_0_GetData+0x7e>
	{
		return retVal;
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    6b18:	11 23       	and	r17, r17
    6b1a:	19 f1       	breq	.+70     	; 0x6b62 <I2C_0_GetData+0x82>
    6b1c:	e1 14       	cp	r14, r1
    6b1e:	f1 04       	cpc	r15, r1
    6b20:	11 f1       	breq	.+68     	; 0x6b66 <I2C_0_GetData+0x86>
    6b22:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6b24:	df ef       	ldi	r29, 0xFF	; 255
    6b26:	d1 0f       	add	r29, r17
    6b28:	11 23       	and	r17, r17
    6b2a:	f9 f0       	breq	.+62     	; 0x6b6a <I2C_0_GetData+0x8a>
		{
			if(i2c_0_WaitR() == I2C_READY)
    6b2c:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <_ZL11i2c_0_WaitRv>
    6b30:	83 30       	cpi	r24, 0x03	; 3
    6b32:	e9 f4       	brne	.+58     	; 0x6b6e <I2C_0_GetData+0x8e>
			{
				*pData = TWI0.MDATA;
    6b34:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    6b38:	f7 01       	movw	r30, r14
    6b3a:	80 83       	st	Z, r24
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    6b3c:	d1 11       	cpse	r29, r1
    6b3e:	02 c0       	rjmp	.+4      	; 0x6b44 <I2C_0_GetData+0x64>
    6b40:	87 e0       	ldi	r24, 0x07	; 7
    6b42:	01 c0       	rjmp	.+2      	; 0x6b46 <I2C_0_GetData+0x66>
    6b44:	82 e0       	ldi	r24, 0x02	; 2
    6b46:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
				retVal++;
    6b4a:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6b4c:	ff ef       	ldi	r31, 0xFF	; 255
    6b4e:	ef 1a       	sub	r14, r31
    6b50:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6b52:	1d 2f       	mov	r17, r29
    6b54:	e7 cf       	rjmp	.-50     	; 0x6b24 <I2C_0_GetData+0x44>
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6b56:	8f ef       	ldi	r24, 0xFF	; 255
    6b58:	0b c0       	rjmp	.+22     	; 0x6b70 <I2C_0_GetData+0x90>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6b5a:	8f ef       	ldi	r24, 0xFF	; 255
    6b5c:	09 c0       	rjmp	.+18     	; 0x6b70 <I2C_0_GetData+0x90>
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6b5e:	8f ef       	ldi	r24, 0xFF	; 255
    6b60:	07 c0       	rjmp	.+14     	; 0x6b70 <I2C_0_GetData+0x90>
	}
	
	retVal = 0;
    6b62:	80 e0       	ldi	r24, 0x00	; 0
    6b64:	05 c0       	rjmp	.+10     	; 0x6b70 <I2C_0_GetData+0x90>
    6b66:	80 e0       	ldi	r24, 0x00	; 0
    6b68:	03 c0       	rjmp	.+6      	; 0x6b70 <I2C_0_GetData+0x90>
    6b6a:	8c 2f       	mov	r24, r28
    6b6c:	01 c0       	rjmp	.+2      	; 0x6b70 <I2C_0_GetData+0x90>
    6b6e:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6b70:	df 91       	pop	r29
    6b72:	cf 91       	pop	r28
    6b74:	1f 91       	pop	r17
    6b76:	ff 90       	pop	r15
    6b78:	ef 90       	pop	r14
    6b7a:	08 95       	ret

00006b7c <I2C_0_EndSession>:

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    6b7c:	83 e0       	ldi	r24, 0x03	; 3
    6b7e:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    6b82:	08 95       	ret

00006b84 <I2C_0_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_0_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6b84:	ff 92       	push	r15
    6b86:	0f 93       	push	r16
    6b88:	1f 93       	push	r17
    6b8a:	cf 93       	push	r28
    6b8c:	df 93       	push	r29
    6b8e:	c6 2f       	mov	r28, r22
    6b90:	8a 01       	movw	r16, r20
    6b92:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
    6b94:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    6b98:	0e 94 b8 34 	call	0x6970	; 0x6970 <_ZL11i2c_0_WaitWv>
    6b9c:	81 30       	cpi	r24, 0x01	; 1
    6b9e:	29 f5       	brne	.+74     	; 0x6bea <I2C_0_SendData+0x66>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    6ba0:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    6ba4:	0e 94 b8 34 	call	0x6970	; 0x6970 <_ZL11i2c_0_WaitWv>
    6ba8:	81 30       	cpi	r24, 0x01	; 1
    6baa:	09 f5       	brne	.+66     	; 0x6bee <I2C_0_SendData+0x6a>
	{
		return retVal;
	}

	retVal = 0;
	if((len != 0) && (pData != null))
    6bac:	dd 23       	and	r29, r29
    6bae:	09 f1       	breq	.+66     	; 0x6bf2 <I2C_0_SendData+0x6e>
    6bb0:	01 15       	cp	r16, r1
    6bb2:	11 05       	cpc	r17, r1
    6bb4:	21 f4       	brne	.+8      	; 0x6bbe <I2C_0_SendData+0x3a>
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}

	retVal = 0;
    6bb6:	80 e0       	ldi	r24, 0x00	; 0
    6bb8:	21 c0       	rjmp	.+66     	; 0x6bfc <I2C_0_SendData+0x78>
    6bba:	df 2d       	mov	r29, r15
    6bbc:	01 c0       	rjmp	.+2      	; 0x6bc0 <I2C_0_SendData+0x3c>
    6bbe:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != null))
	{
		while(len--)
    6bc0:	ff 24       	eor	r15, r15
    6bc2:	fa 94       	dec	r15
    6bc4:	fd 0e       	add	r15, r29
    6bc6:	dd 23       	and	r29, r29
    6bc8:	b1 f0       	breq	.+44     	; 0x6bf6 <I2C_0_SendData+0x72>
		{
			TWI0.MDATA = *pData;
    6bca:	f8 01       	movw	r30, r16
    6bcc:	80 81       	ld	r24, Z
    6bce:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
			if(i2c_0_WaitW() == I2C_ACKED)
    6bd2:	0e 94 b8 34 	call	0x6970	; 0x6970 <_ZL11i2c_0_WaitWv>
    6bd6:	81 30       	cpi	r24, 0x01	; 1
    6bd8:	81 f4       	brne	.+32     	; 0x6bfa <I2C_0_SendData+0x76>
			{
				retVal++;
    6bda:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6bdc:	0f 5f       	subi	r16, 0xFF	; 255
    6bde:	1f 4f       	sbci	r17, 0xFF	; 255
				if(!len) I2C_0_EndSession();
    6be0:	f1 10       	cpse	r15, r1
    6be2:	eb cf       	rjmp	.-42     	; 0x6bba <I2C_0_SendData+0x36>
    6be4:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <I2C_0_EndSession>
    6be8:	e8 cf       	rjmp	.-48     	; 0x6bba <I2C_0_SendData+0x36>
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6bea:	8f ef       	ldi	r24, 0xFF	; 255
    6bec:	07 c0       	rjmp	.+14     	; 0x6bfc <I2C_0_SendData+0x78>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    6bee:	8f ef       	ldi	r24, 0xFF	; 255
    6bf0:	05 c0       	rjmp	.+10     	; 0x6bfc <I2C_0_SendData+0x78>
	}

	retVal = 0;
    6bf2:	80 e0       	ldi	r24, 0x00	; 0
    6bf4:	03 c0       	rjmp	.+6      	; 0x6bfc <I2C_0_SendData+0x78>
    6bf6:	8c 2f       	mov	r24, r28
    6bf8:	01 c0       	rjmp	.+2      	; 0x6bfc <I2C_0_SendData+0x78>
    6bfa:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    6bfc:	df 91       	pop	r29
    6bfe:	cf 91       	pop	r28
    6c00:	1f 91       	pop	r17
    6c02:	0f 91       	pop	r16
    6c04:	ff 90       	pop	r15
    6c06:	08 95       	ret

00006c08 <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    6c08:	e0 ee       	ldi	r30, 0xE0	; 224
    6c0a:	f5 e0       	ldi	r31, 0x05	; 5
    6c0c:	85 81       	ldd	r24, Z+5	; 0x05
    6c0e:	83 70       	andi	r24, 0x03	; 3
    6c10:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    6c12:	85 81       	ldd	r24, Z+5	; 0x05
    6c14:	88 60       	ori	r24, 0x08	; 8
    6c16:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    6c18:	e0 e2       	ldi	r30, 0x20	; 32
    6c1a:	f9 e0       	ldi	r31, 0x09	; 9
    6c1c:	8f e6       	ldi	r24, 0x6F	; 111
    6c1e:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    6c20:	81 e0       	ldi	r24, 0x01	; 1
    6c22:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    6c24:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    6c26:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6c28:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6c2a:	e2 e3       	ldi	r30, 0x32	; 50
    6c2c:	f4 e0       	ldi	r31, 0x04	; 4
    6c2e:	80 81       	ld	r24, Z
    6c30:	88 60       	ori	r24, 0x08	; 8
    6c32:	80 83       	st	Z, r24
    6c34:	e3 e3       	ldi	r30, 0x33	; 51
    6c36:	f4 e0       	ldi	r31, 0x04	; 4
    6c38:	80 81       	ld	r24, Z
    6c3a:	88 60       	ori	r24, 0x08	; 8
    6c3c:	80 83       	st	Z, r24
    6c3e:	08 95       	ret

00006c40 <I2C_1_GetData>:
}


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6c40:	ef 92       	push	r14
    6c42:	ff 92       	push	r15
    6c44:	1f 93       	push	r17
    6c46:	cf 93       	push	r28
    6c48:	df 93       	push	r29
    6c4a:	c8 2f       	mov	r28, r24
    6c4c:	d6 2f       	mov	r29, r22
    6c4e:	7a 01       	movw	r14, r20
    6c50:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    6c52:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6c56:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZL11i2c_1_WaitWv>
    6c5a:	81 30       	cpi	r24, 0x01	; 1
    6c5c:	61 f5       	brne	.+88     	; 0x6cb6 <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6c5e:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    6c62:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZL11i2c_1_WaitWv>
    6c66:	81 30       	cpi	r24, 0x01	; 1
    6c68:	41 f5       	brne	.+80     	; 0x6cba <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    6c6a:	c1 60       	ori	r28, 0x01	; 1
    6c6c:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6c70:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZL11i2c_1_WaitWv>
    6c74:	81 30       	cpi	r24, 0x01	; 1
    6c76:	19 f5       	brne	.+70     	; 0x6cbe <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    6c78:	11 23       	and	r17, r17
    6c7a:	19 f1       	breq	.+70     	; 0x6cc2 <I2C_1_GetData+0x82>
    6c7c:	e1 14       	cp	r14, r1
    6c7e:	f1 04       	cpc	r15, r1
    6c80:	11 f1       	breq	.+68     	; 0x6cc6 <I2C_1_GetData+0x86>
    6c82:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6c84:	df ef       	ldi	r29, 0xFF	; 255
    6c86:	d1 0f       	add	r29, r17
    6c88:	11 23       	and	r17, r17
    6c8a:	f9 f0       	breq	.+62     	; 0x6cca <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    6c8c:	0e 94 31 35 	call	0x6a62	; 0x6a62 <_ZL11I2C_1_WaitRv>
    6c90:	83 30       	cpi	r24, 0x03	; 3
    6c92:	e9 f4       	brne	.+58     	; 0x6cce <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    6c94:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    6c98:	f7 01       	movw	r30, r14
    6c9a:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    6c9c:	d1 11       	cpse	r29, r1
    6c9e:	02 c0       	rjmp	.+4      	; 0x6ca4 <I2C_1_GetData+0x64>
    6ca0:	87 e0       	ldi	r24, 0x07	; 7
    6ca2:	01 c0       	rjmp	.+2      	; 0x6ca6 <I2C_1_GetData+0x66>
    6ca4:	82 e0       	ldi	r24, 0x02	; 2
    6ca6:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    6caa:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6cac:	ff ef       	ldi	r31, 0xFF	; 255
    6cae:	ef 1a       	sub	r14, r31
    6cb0:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6cb2:	1d 2f       	mov	r17, r29
    6cb4:	e7 cf       	rjmp	.-50     	; 0x6c84 <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6cb6:	8f ef       	ldi	r24, 0xFF	; 255
    6cb8:	0b c0       	rjmp	.+22     	; 0x6cd0 <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6cba:	8f ef       	ldi	r24, 0xFF	; 255
    6cbc:	09 c0       	rjmp	.+18     	; 0x6cd0 <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    6cbe:	8f ef       	ldi	r24, 0xFF	; 255
    6cc0:	07 c0       	rjmp	.+14     	; 0x6cd0 <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    6cc2:	80 e0       	ldi	r24, 0x00	; 0
    6cc4:	05 c0       	rjmp	.+10     	; 0x6cd0 <I2C_1_GetData+0x90>
    6cc6:	80 e0       	ldi	r24, 0x00	; 0
    6cc8:	03 c0       	rjmp	.+6      	; 0x6cd0 <I2C_1_GetData+0x90>
    6cca:	8c 2f       	mov	r24, r28
    6ccc:	01 c0       	rjmp	.+2      	; 0x6cd0 <I2C_1_GetData+0x90>
    6cce:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6cd0:	df 91       	pop	r29
    6cd2:	cf 91       	pop	r28
    6cd4:	1f 91       	pop	r17
    6cd6:	ff 90       	pop	r15
    6cd8:	ef 90       	pop	r14
    6cda:	08 95       	ret

00006cdc <I2C_1_EndSession>:

void I2C_1_EndSession(void)
{
	TWI1.MCTRLB = TWI_MCMD_STOP_gc;
    6cdc:	83 e0       	ldi	r24, 0x03	; 3
    6cde:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
    6ce2:	08 95       	ret

00006ce4 <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6ce4:	ff 92       	push	r15
    6ce6:	0f 93       	push	r16
    6ce8:	1f 93       	push	r17
    6cea:	cf 93       	push	r28
    6cec:	df 93       	push	r29
    6cee:	c6 2f       	mov	r28, r22
    6cf0:	8a 01       	movw	r16, r20
    6cf2:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    6cf4:	8e 7f       	andi	r24, 0xFE	; 254
    6cf6:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6cfa:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZL11i2c_1_WaitWv>
    6cfe:	81 30       	cpi	r24, 0x01	; 1
    6d00:	29 f5       	brne	.+74     	; 0x6d4c <I2C_1_SendData+0x68>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6d02:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    6d06:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZL11i2c_1_WaitWv>
    6d0a:	81 30       	cpi	r24, 0x01	; 1
    6d0c:	09 f5       	brne	.+66     	; 0x6d50 <I2C_1_SendData+0x6c>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
    6d0e:	dd 23       	and	r29, r29
    6d10:	09 f1       	breq	.+66     	; 0x6d54 <I2C_1_SendData+0x70>
    6d12:	01 15       	cp	r16, r1
    6d14:	11 05       	cpc	r17, r1
    6d16:	21 f4       	brne	.+8      	; 0x6d20 <I2C_1_SendData+0x3c>
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
	}	

	retVal = 0;
    6d18:	80 e0       	ldi	r24, 0x00	; 0
    6d1a:	21 c0       	rjmp	.+66     	; 0x6d5e <I2C_1_SendData+0x7a>
    6d1c:	df 2d       	mov	r29, r15
    6d1e:	01 c0       	rjmp	.+2      	; 0x6d22 <I2C_1_SendData+0x3e>
    6d20:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != null))
	{
		while(len--)
    6d22:	ff 24       	eor	r15, r15
    6d24:	fa 94       	dec	r15
    6d26:	fd 0e       	add	r15, r29
    6d28:	dd 23       	and	r29, r29
    6d2a:	b1 f0       	breq	.+44     	; 0x6d58 <I2C_1_SendData+0x74>
		{
			TWI1.MDATA = *pData;
    6d2c:	f8 01       	movw	r30, r16
    6d2e:	80 81       	ld	r24, Z
    6d30:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    6d34:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZL11i2c_1_WaitWv>
    6d38:	81 30       	cpi	r24, 0x01	; 1
    6d3a:	81 f4       	brne	.+32     	; 0x6d5c <I2C_1_SendData+0x78>
			{
				retVal++;
    6d3c:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6d3e:	0f 5f       	subi	r16, 0xFF	; 255
    6d40:	1f 4f       	sbci	r17, 0xFF	; 255
				if(!len) I2C_1_EndSession();
    6d42:	f1 10       	cpse	r15, r1
    6d44:	eb cf       	rjmp	.-42     	; 0x6d1c <I2C_1_SendData+0x38>
    6d46:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <I2C_1_EndSession>
    6d4a:	e8 cf       	rjmp	.-48     	; 0x6d1c <I2C_1_SendData+0x38>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6d4c:	8f ef       	ldi	r24, 0xFF	; 255
    6d4e:	07 c0       	rjmp	.+14     	; 0x6d5e <I2C_1_SendData+0x7a>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6d50:	8f ef       	ldi	r24, 0xFF	; 255
    6d52:	05 c0       	rjmp	.+10     	; 0x6d5e <I2C_1_SendData+0x7a>
	}	

	retVal = 0;
    6d54:	80 e0       	ldi	r24, 0x00	; 0
    6d56:	03 c0       	rjmp	.+6      	; 0x6d5e <I2C_1_SendData+0x7a>
    6d58:	8c 2f       	mov	r24, r28
    6d5a:	01 c0       	rjmp	.+2      	; 0x6d5e <I2C_1_SendData+0x7a>
    6d5c:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    6d5e:	df 91       	pop	r29
    6d60:	cf 91       	pop	r28
    6d62:	1f 91       	pop	r17
    6d64:	0f 91       	pop	r16
    6d66:	ff 90       	pop	r15
    6d68:	08 95       	ret

00006d6a <_ZL21USART4_initializationm>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
	lb_send_text(g_tempMsgBuff);
    6d6a:	20 b3       	in	r18, 0x10	; 16
    6d6c:	2d 7f       	andi	r18, 0xFD	; 253
    6d6e:	20 bb       	out	0x10, r18	; 16
    6d70:	e1 e9       	ldi	r30, 0x91	; 145
    6d72:	f4 e0       	ldi	r31, 0x04	; 4
    6d74:	20 81       	ld	r18, Z
    6d76:	27 7f       	andi	r18, 0xF7	; 247
    6d78:	20 83       	st	Z, r18
    6d7a:	20 b3       	in	r18, 0x10	; 16
    6d7c:	21 60       	ori	r18, 0x01	; 1
    6d7e:	20 bb       	out	0x10, r18	; 16
    6d80:	21 b3       	in	r18, 0x11	; 17
    6d82:	21 60       	ori	r18, 0x01	; 1
    6d84:	21 bb       	out	0x11, r18	; 17
    6d86:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <USART4_init>
    6d8a:	08 95       	ret

00006d8c <_ZL21USART1_initializationm>:
    6d8c:	28 b1       	in	r18, 0x08	; 8
    6d8e:	2d 7f       	andi	r18, 0xFD	; 253
    6d90:	28 b9       	out	0x08, r18	; 8
    6d92:	e1 e5       	ldi	r30, 0x51	; 81
    6d94:	f4 e0       	ldi	r31, 0x04	; 4
    6d96:	20 81       	ld	r18, Z
    6d98:	27 7f       	andi	r18, 0xF7	; 247
    6d9a:	20 83       	st	Z, r18
    6d9c:	28 b1       	in	r18, 0x08	; 8
    6d9e:	21 60       	ori	r18, 0x01	; 1
    6da0:	28 b9       	out	0x08, r18	; 8
    6da2:	29 b1       	in	r18, 0x09	; 9
    6da4:	21 60       	ori	r18, 0x01	; 1
    6da6:	29 b9       	out	0x09, r18	; 9
    6da8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <USART1_init>
    6dac:	08 95       	ret

00006dae <_ZL16linkbus_start_txv>:
    6dae:	cf 93       	push	r28
    6db0:	c0 91 08 49 	lds	r28, 0x4908	; 0x804908 <_ZL17linkbus_tx_active>
    6db4:	81 e0       	ldi	r24, 0x01	; 1
    6db6:	c8 27       	eor	r28, r24
    6db8:	59 f0       	breq	.+22     	; 0x6dd0 <_ZL16linkbus_start_txv+0x22>
    6dba:	80 93 08 49 	sts	0x4908, r24	; 0x804908 <_ZL17linkbus_tx_active>
    6dbe:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6dc2:	81 11       	cpse	r24, r1
    6dc4:	03 c0       	rjmp	.+6      	; 0x6dcc <_ZL16linkbus_start_txv+0x1e>
    6dc6:	0e 94 88 47 	call	0x8f10	; 0x8f10 <USART4_enable_tx>
    6dca:	02 c0       	rjmp	.+4      	; 0x6dd0 <_ZL16linkbus_start_txv+0x22>
    6dcc:	0e 94 54 47 	call	0x8ea8	; 0x8ea8 <USART1_enable_tx>
    6dd0:	8c 2f       	mov	r24, r28
    6dd2:	cf 91       	pop	r28
    6dd4:	08 95       	ret

00006dd6 <_Z18nextFullLBTxBufferv>:
    6dd6:	90 e0       	ldi	r25, 0x00	; 0
    6dd8:	80 91 bb 47 	lds	r24, 0x47BB	; 0x8047bb <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6ddc:	28 2f       	mov	r18, r24
    6dde:	30 e0       	ldi	r19, 0x00	; 0
    6de0:	42 e3       	ldi	r20, 0x32	; 50
    6de2:	42 9f       	mul	r20, r18
    6de4:	f0 01       	movw	r30, r0
    6de6:	43 9f       	mul	r20, r19
    6de8:	f0 0d       	add	r31, r0
    6dea:	11 24       	eor	r1, r1
    6dec:	e0 5c       	subi	r30, 0xC0	; 192
    6dee:	f7 4b       	sbci	r31, 0xB7	; 183
    6df0:	40 81       	ld	r20, Z
    6df2:	41 11       	cpse	r20, r1
    6df4:	0b c0       	rjmp	.+22     	; 0x6e0c <_Z18nextFullLBTxBufferv+0x36>
    6df6:	9f 5f       	subi	r25, 0xFF	; 255
    6df8:	94 30       	cpi	r25, 0x04	; 4
    6dfa:	50 f4       	brcc	.+20     	; 0x6e10 <_Z18nextFullLBTxBufferv+0x3a>
    6dfc:	8f 5f       	subi	r24, 0xFF	; 255
    6dfe:	80 93 bb 47 	sts	0x47BB, r24	; 0x8047bb <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6e02:	84 30       	cpi	r24, 0x04	; 4
    6e04:	48 f3       	brcs	.-46     	; 0x6dd8 <_Z18nextFullLBTxBufferv+0x2>
    6e06:	10 92 bb 47 	sts	0x47BB, r1	; 0x8047bb <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6e0a:	e6 cf       	rjmp	.-52     	; 0x6dd8 <_Z18nextFullLBTxBufferv+0x2>
    6e0c:	81 e0       	ldi	r24, 0x01	; 1
    6e0e:	01 c0       	rjmp	.+2      	; 0x6e12 <_Z18nextFullLBTxBufferv+0x3c>
    6e10:	80 e0       	ldi	r24, 0x00	; 0
    6e12:	88 23       	and	r24, r24
    6e14:	49 f0       	breq	.+18     	; 0x6e28 <_Z18nextFullLBTxBufferv+0x52>
    6e16:	42 e3       	ldi	r20, 0x32	; 50
    6e18:	42 9f       	mul	r20, r18
    6e1a:	c0 01       	movw	r24, r0
    6e1c:	43 9f       	mul	r20, r19
    6e1e:	90 0d       	add	r25, r0
    6e20:	11 24       	eor	r1, r1
    6e22:	80 5c       	subi	r24, 0xC0	; 192
    6e24:	97 4b       	sbci	r25, 0xB7	; 183
    6e26:	08 95       	ret
    6e28:	80 e0       	ldi	r24, 0x00	; 0
    6e2a:	90 e0       	ldi	r25, 0x00	; 0
    6e2c:	08 95       	ret

00006e2e <_Z19nextEmptyLBTxBufferv>:
    6e2e:	90 e0       	ldi	r25, 0x00	; 0
    6e30:	80 91 ba 47 	lds	r24, 0x47BA	; 0x8047ba <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6e34:	28 2f       	mov	r18, r24
    6e36:	30 e0       	ldi	r19, 0x00	; 0
    6e38:	42 e3       	ldi	r20, 0x32	; 50
    6e3a:	42 9f       	mul	r20, r18
    6e3c:	f0 01       	movw	r30, r0
    6e3e:	43 9f       	mul	r20, r19
    6e40:	f0 0d       	add	r31, r0
    6e42:	11 24       	eor	r1, r1
    6e44:	e0 5c       	subi	r30, 0xC0	; 192
    6e46:	f7 4b       	sbci	r31, 0xB7	; 183
    6e48:	40 81       	ld	r20, Z
    6e4a:	44 23       	and	r20, r20
    6e4c:	59 f0       	breq	.+22     	; 0x6e64 <_Z19nextEmptyLBTxBufferv+0x36>
    6e4e:	9f 5f       	subi	r25, 0xFF	; 255
    6e50:	94 30       	cpi	r25, 0x04	; 4
    6e52:	50 f4       	brcc	.+20     	; 0x6e68 <_Z19nextEmptyLBTxBufferv+0x3a>
    6e54:	8f 5f       	subi	r24, 0xFF	; 255
    6e56:	80 93 ba 47 	sts	0x47BA, r24	; 0x8047ba <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6e5a:	84 30       	cpi	r24, 0x04	; 4
    6e5c:	48 f3       	brcs	.-46     	; 0x6e30 <_Z19nextEmptyLBTxBufferv+0x2>
    6e5e:	10 92 ba 47 	sts	0x47BA, r1	; 0x8047ba <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6e62:	e6 cf       	rjmp	.-52     	; 0x6e30 <_Z19nextEmptyLBTxBufferv+0x2>
    6e64:	81 e0       	ldi	r24, 0x01	; 1
    6e66:	01 c0       	rjmp	.+2      	; 0x6e6a <_Z19nextEmptyLBTxBufferv+0x3c>
    6e68:	80 e0       	ldi	r24, 0x00	; 0
    6e6a:	88 23       	and	r24, r24
    6e6c:	49 f0       	breq	.+18     	; 0x6e80 <_Z19nextEmptyLBTxBufferv+0x52>
    6e6e:	42 e3       	ldi	r20, 0x32	; 50
    6e70:	42 9f       	mul	r20, r18
    6e72:	c0 01       	movw	r24, r0
    6e74:	43 9f       	mul	r20, r19
    6e76:	90 0d       	add	r25, r0
    6e78:	11 24       	eor	r1, r1
    6e7a:	80 5c       	subi	r24, 0xC0	; 192
    6e7c:	97 4b       	sbci	r25, 0xB7	; 183
    6e7e:	08 95       	ret
    6e80:	80 e0       	ldi	r24, 0x00	; 0
    6e82:	90 e0       	ldi	r25, 0x00	; 0
    6e84:	08 95       	ret

00006e86 <_Z19nextEmptyLBRxBufferv>:
    6e86:	90 e0       	ldi	r25, 0x00	; 0
    6e88:	80 91 b9 47 	lds	r24, 0x47B9	; 0x8047b9 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6e8c:	28 2f       	mov	r18, r24
    6e8e:	30 e0       	ldi	r19, 0x00	; 0
    6e90:	42 e4       	ldi	r20, 0x42	; 66
    6e92:	42 9f       	mul	r20, r18
    6e94:	f0 01       	movw	r30, r0
    6e96:	43 9f       	mul	r20, r19
    6e98:	f0 0d       	add	r31, r0
    6e9a:	11 24       	eor	r1, r1
    6e9c:	e4 54       	subi	r30, 0x44	; 68
    6e9e:	f8 4b       	sbci	r31, 0xB8	; 184
    6ea0:	41 81       	ldd	r20, Z+1	; 0x01
    6ea2:	52 81       	ldd	r21, Z+2	; 0x02
    6ea4:	45 2b       	or	r20, r21
    6ea6:	59 f0       	breq	.+22     	; 0x6ebe <_Z19nextEmptyLBRxBufferv+0x38>
    6ea8:	9f 5f       	subi	r25, 0xFF	; 255
    6eaa:	92 30       	cpi	r25, 0x02	; 2
    6eac:	50 f4       	brcc	.+20     	; 0x6ec2 <_Z19nextEmptyLBRxBufferv+0x3c>
    6eae:	8f 5f       	subi	r24, 0xFF	; 255
    6eb0:	80 93 b9 47 	sts	0x47B9, r24	; 0x8047b9 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6eb4:	82 30       	cpi	r24, 0x02	; 2
    6eb6:	40 f3       	brcs	.-48     	; 0x6e88 <_Z19nextEmptyLBRxBufferv+0x2>
    6eb8:	10 92 b9 47 	sts	0x47B9, r1	; 0x8047b9 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6ebc:	e5 cf       	rjmp	.-54     	; 0x6e88 <_Z19nextEmptyLBRxBufferv+0x2>
    6ebe:	81 e0       	ldi	r24, 0x01	; 1
    6ec0:	01 c0       	rjmp	.+2      	; 0x6ec4 <_Z19nextEmptyLBRxBufferv+0x3e>
    6ec2:	80 e0       	ldi	r24, 0x00	; 0
    6ec4:	88 23       	and	r24, r24
    6ec6:	49 f0       	breq	.+18     	; 0x6eda <_Z19nextEmptyLBRxBufferv+0x54>
    6ec8:	42 e4       	ldi	r20, 0x42	; 66
    6eca:	42 9f       	mul	r20, r18
    6ecc:	c0 01       	movw	r24, r0
    6ece:	43 9f       	mul	r20, r19
    6ed0:	90 0d       	add	r25, r0
    6ed2:	11 24       	eor	r1, r1
    6ed4:	84 54       	subi	r24, 0x44	; 68
    6ed6:	98 4b       	sbci	r25, 0xB8	; 184
    6ed8:	08 95       	ret
    6eda:	80 e0       	ldi	r24, 0x00	; 0
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	08 95       	ret

00006ee0 <_Z18nextFullLBRxBufferv>:
    6ee0:	90 e0       	ldi	r25, 0x00	; 0
    6ee2:	80 91 b8 47 	lds	r24, 0x47B8	; 0x8047b8 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6ee6:	28 2f       	mov	r18, r24
    6ee8:	30 e0       	ldi	r19, 0x00	; 0
    6eea:	42 e4       	ldi	r20, 0x42	; 66
    6eec:	42 9f       	mul	r20, r18
    6eee:	f0 01       	movw	r30, r0
    6ef0:	43 9f       	mul	r20, r19
    6ef2:	f0 0d       	add	r31, r0
    6ef4:	11 24       	eor	r1, r1
    6ef6:	e4 54       	subi	r30, 0x44	; 68
    6ef8:	f8 4b       	sbci	r31, 0xB8	; 184
    6efa:	41 81       	ldd	r20, Z+1	; 0x01
    6efc:	52 81       	ldd	r21, Z+2	; 0x02
    6efe:	45 2b       	or	r20, r21
    6f00:	59 f4       	brne	.+22     	; 0x6f18 <_Z18nextFullLBRxBufferv+0x38>
    6f02:	9f 5f       	subi	r25, 0xFF	; 255
    6f04:	92 30       	cpi	r25, 0x02	; 2
    6f06:	50 f4       	brcc	.+20     	; 0x6f1c <_Z18nextFullLBRxBufferv+0x3c>
    6f08:	8f 5f       	subi	r24, 0xFF	; 255
    6f0a:	80 93 b8 47 	sts	0x47B8, r24	; 0x8047b8 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6f0e:	82 30       	cpi	r24, 0x02	; 2
    6f10:	40 f3       	brcs	.-48     	; 0x6ee2 <_Z18nextFullLBRxBufferv+0x2>
    6f12:	10 92 b8 47 	sts	0x47B8, r1	; 0x8047b8 <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6f16:	e5 cf       	rjmp	.-54     	; 0x6ee2 <_Z18nextFullLBRxBufferv+0x2>
    6f18:	81 e0       	ldi	r24, 0x01	; 1
    6f1a:	01 c0       	rjmp	.+2      	; 0x6f1e <_Z18nextFullLBRxBufferv+0x3e>
    6f1c:	80 e0       	ldi	r24, 0x00	; 0
    6f1e:	88 23       	and	r24, r24
    6f20:	49 f0       	breq	.+18     	; 0x6f34 <_Z18nextFullLBRxBufferv+0x54>
    6f22:	42 e4       	ldi	r20, 0x42	; 66
    6f24:	42 9f       	mul	r20, r18
    6f26:	c0 01       	movw	r24, r0
    6f28:	43 9f       	mul	r20, r19
    6f2a:	90 0d       	add	r25, r0
    6f2c:	11 24       	eor	r1, r1
    6f2e:	84 54       	subi	r24, 0x44	; 68
    6f30:	98 4b       	sbci	r25, 0xB8	; 184
    6f32:	08 95       	ret
    6f34:	80 e0       	ldi	r24, 0x00	; 0
    6f36:	90 e0       	ldi	r25, 0x00	; 0
    6f38:	08 95       	ret

00006f3a <_Z19linkbusTxInProgressv>:
    6f3a:	80 91 08 49 	lds	r24, 0x4908	; 0x804908 <_ZL17linkbus_tx_active>
    6f3e:	08 95       	ret

00006f40 <_Z14linkbus_end_txv>:
    6f40:	80 91 08 49 	lds	r24, 0x4908	; 0x804908 <_ZL17linkbus_tx_active>
    6f44:	88 23       	and	r24, r24
    6f46:	89 f0       	breq	.+34     	; 0x6f6a <_Z14linkbus_end_txv+0x2a>
    6f48:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6f4c:	81 11       	cpse	r24, r1
    6f4e:	06 c0       	rjmp	.+12     	; 0x6f5c <_Z14linkbus_end_txv+0x1c>
    6f50:	e0 e8       	ldi	r30, 0x80	; 128
    6f52:	f8 e0       	ldi	r31, 0x08	; 8
    6f54:	85 81       	ldd	r24, Z+5	; 0x05
    6f56:	8f 7d       	andi	r24, 0xDF	; 223
    6f58:	85 83       	std	Z+5, r24	; 0x05
    6f5a:	05 c0       	rjmp	.+10     	; 0x6f66 <_Z14linkbus_end_txv+0x26>
    6f5c:	e0 e2       	ldi	r30, 0x20	; 32
    6f5e:	f8 e0       	ldi	r31, 0x08	; 8
    6f60:	85 81       	ldd	r24, Z+5	; 0x05
    6f62:	8f 7d       	andi	r24, 0xDF	; 223
    6f64:	85 83       	std	Z+5, r24	; 0x05
    6f66:	10 92 08 49 	sts	0x4908, r1	; 0x804908 <_ZL17linkbus_tx_active>
    6f6a:	08 95       	ret

00006f6c <_Z16linkbus_reset_rxv>:
    6f6c:	cf 93       	push	r28
    6f6e:	df 93       	push	r29
    6f70:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6f74:	81 11       	cpse	r24, r1
    6f76:	14 c0       	rjmp	.+40     	; 0x6fa0 <_Z16linkbus_reset_rxv+0x34>
    6f78:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <__TEXT_REGION_LENGTH__+0x7e0886>
    6f7c:	88 23       	and	r24, r24
    6f7e:	1c f5       	brge	.+70     	; 0x6fc6 <_Z16linkbus_reset_rxv+0x5a>
    6f80:	e0 e8       	ldi	r30, 0x80	; 128
    6f82:	f8 e0       	ldi	r31, 0x08	; 8
    6f84:	86 81       	ldd	r24, Z+6	; 0x06
    6f86:	8f 77       	andi	r24, 0x7F	; 127
    6f88:	86 83       	std	Z+6, r24	; 0x06
    6f8a:	84 e8       	ldi	r24, 0x84	; 132
    6f8c:	ac eb       	ldi	r26, 0xBC	; 188
    6f8e:	b7 e4       	ldi	r27, 0x47	; 71
    6f90:	ed 01       	movw	r28, r26
    6f92:	19 92       	st	Y+, r1
    6f94:	8a 95       	dec	r24
    6f96:	e9 f7       	brne	.-6      	; 0x6f92 <_Z16linkbus_reset_rxv+0x26>
    6f98:	86 81       	ldd	r24, Z+6	; 0x06
    6f9a:	80 68       	ori	r24, 0x80	; 128
    6f9c:	86 83       	std	Z+6, r24	; 0x06
    6f9e:	13 c0       	rjmp	.+38     	; 0x6fc6 <_Z16linkbus_reset_rxv+0x5a>
    6fa0:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    6fa4:	88 23       	and	r24, r24
    6fa6:	7c f4       	brge	.+30     	; 0x6fc6 <_Z16linkbus_reset_rxv+0x5a>
    6fa8:	e0 e2       	ldi	r30, 0x20	; 32
    6faa:	f8 e0       	ldi	r31, 0x08	; 8
    6fac:	86 81       	ldd	r24, Z+6	; 0x06
    6fae:	8f 77       	andi	r24, 0x7F	; 127
    6fb0:	86 83       	std	Z+6, r24	; 0x06
    6fb2:	84 e8       	ldi	r24, 0x84	; 132
    6fb4:	ac eb       	ldi	r26, 0xBC	; 188
    6fb6:	b7 e4       	ldi	r27, 0x47	; 71
    6fb8:	ed 01       	movw	r28, r26
    6fba:	19 92       	st	Y+, r1
    6fbc:	8a 95       	dec	r24
    6fbe:	e9 f7       	brne	.-6      	; 0x6fba <_Z16linkbus_reset_rxv+0x4e>
    6fc0:	86 81       	ldd	r24, Z+6	; 0x06
    6fc2:	80 68       	ori	r24, 0x80	; 128
    6fc4:	86 83       	std	Z+6, r24	; 0x06
    6fc6:	df 91       	pop	r29
    6fc8:	cf 91       	pop	r28
    6fca:	08 95       	ret

00006fcc <_Z12linkbus_initm14USART_Number_t>:
    6fcc:	cf 92       	push	r12
    6fce:	df 92       	push	r13
    6fd0:	ef 92       	push	r14
    6fd2:	ff 92       	push	r15
    6fd4:	cf 93       	push	r28
    6fd6:	6b 01       	movw	r12, r22
    6fd8:	7c 01       	movw	r14, r24
    6fda:	84 e8       	ldi	r24, 0x84	; 132
    6fdc:	ec eb       	ldi	r30, 0xBC	; 188
    6fde:	f7 e4       	ldi	r31, 0x47	; 71
    6fe0:	df 01       	movw	r26, r30
    6fe2:	1d 92       	st	X+, r1
    6fe4:	8a 95       	dec	r24
    6fe6:	e9 f7       	brne	.-6      	; 0x6fe2 <_Z12linkbus_initm14USART_Number_t+0x16>
    6fe8:	80 e0       	ldi	r24, 0x00	; 0
    6fea:	90 e0       	ldi	r25, 0x00	; 0
    6fec:	84 30       	cpi	r24, 0x04	; 4
    6fee:	91 05       	cpc	r25, r1
    6ff0:	5c f4       	brge	.+22     	; 0x7008 <_Z12linkbus_initm14USART_Number_t+0x3c>
    6ff2:	22 e3       	ldi	r18, 0x32	; 50
    6ff4:	28 9f       	mul	r18, r24
    6ff6:	f0 01       	movw	r30, r0
    6ff8:	29 9f       	mul	r18, r25
    6ffa:	f0 0d       	add	r31, r0
    6ffc:	11 24       	eor	r1, r1
    6ffe:	e0 5c       	subi	r30, 0xC0	; 192
    7000:	f7 4b       	sbci	r31, 0xB7	; 183
    7002:	10 82       	st	Z, r1
    7004:	01 96       	adiw	r24, 0x01	; 1
    7006:	f2 cf       	rjmp	.-28     	; 0x6fec <_Z12linkbus_initm14USART_Number_t+0x20>
    7008:	46 30       	cpi	r20, 0x06	; 6
    700a:	21 f4       	brne	.+8      	; 0x7014 <_Z12linkbus_initm14USART_Number_t+0x48>
    700c:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    7010:	87 30       	cpi	r24, 0x07	; 7
    7012:	61 f4       	brne	.+24     	; 0x702c <_Z12linkbus_initm14USART_Number_t+0x60>
    7014:	c4 2f       	mov	r28, r20
    7016:	c7 01       	movw	r24, r14
    7018:	b6 01       	movw	r22, r12
    701a:	41 11       	cpse	r20, r1
    701c:	03 c0       	rjmp	.+6      	; 0x7024 <_Z12linkbus_initm14USART_Number_t+0x58>
    701e:	0e 94 b5 36 	call	0x6d6a	; 0x6d6a <_ZL21USART4_initializationm>
    7022:	02 c0       	rjmp	.+4      	; 0x7028 <_Z12linkbus_initm14USART_Number_t+0x5c>
    7024:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <_ZL21USART1_initializationm>
    7028:	c0 93 22 40 	sts	0x4022, r28	; 0x804022 <g_linkbus_usart_number>
    702c:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <_ZL14g_bus_disabled>
    7030:	cf 91       	pop	r28
    7032:	ff 90       	pop	r15
    7034:	ef 90       	pop	r14
    7036:	df 90       	pop	r13
    7038:	cf 90       	pop	r12
    703a:	08 95       	ret

0000703c <_Z15linkbus_disablev>:
    703c:	81 e0       	ldi	r24, 0x01	; 1
    703e:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZL14g_bus_disabled>
    7042:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    7046:	84 30       	cpi	r24, 0x04	; 4
    7048:	19 f4       	brne	.+6      	; 0x7050 <_Z15linkbus_disablev+0x14>
    704a:	0e 94 91 47 	call	0x8f22	; 0x8f22 <USART4_disable>
    704e:	02 c0       	rjmp	.+4      	; 0x7054 <_Z15linkbus_disablev+0x18>
    7050:	0e 94 5d 47 	call	0x8eba	; 0x8eba <USART1_disable>
    7054:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <_Z14linkbus_end_txv>
    7058:	84 e8       	ldi	r24, 0x84	; 132
    705a:	ec eb       	ldi	r30, 0xBC	; 188
    705c:	f7 e4       	ldi	r31, 0x47	; 71
    705e:	df 01       	movw	r26, r30
    7060:	1d 92       	st	X+, r1
    7062:	8a 95       	dec	r24
    7064:	e9 f7       	brne	.-6      	; 0x7060 <_Z15linkbus_disablev+0x24>
    7066:	80 e0       	ldi	r24, 0x00	; 0
    7068:	84 30       	cpi	r24, 0x04	; 4
    706a:	48 f4       	brcc	.+18     	; 0x707e <_Z15linkbus_disablev+0x42>
    706c:	b2 e3       	ldi	r27, 0x32	; 50
    706e:	8b 9f       	mul	r24, r27
    7070:	f0 01       	movw	r30, r0
    7072:	11 24       	eor	r1, r1
    7074:	e0 5c       	subi	r30, 0xC0	; 192
    7076:	f7 4b       	sbci	r31, 0xB7	; 183
    7078:	10 82       	st	Z, r1
    707a:	8f 5f       	subi	r24, 0xFF	; 255
    707c:	f5 cf       	rjmp	.-22     	; 0x7068 <_Z15linkbus_disablev+0x2c>
    707e:	08 95       	ret

00007080 <_Z12lb_send_textPc>:
    7080:	ef 92       	push	r14
    7082:	ff 92       	push	r15
    7084:	1f 93       	push	r17
    7086:	cf 93       	push	r28
    7088:	df 93       	push	r29
    708a:	10 91 23 40 	lds	r17, 0x4023	; 0x804023 <_ZL14g_bus_disabled>
    708e:	11 11       	cpse	r17, r1
    7090:	2d c0       	rjmp	.+90     	; 0x70ec <_Z12lb_send_textPc+0x6c>
    7092:	00 97       	sbiw	r24, 0x00	; 0
    7094:	69 f1       	breq	.+90     	; 0x70f0 <_Z12lb_send_textPc+0x70>
    7096:	7c 01       	movw	r14, r24
    7098:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <_Z19nextEmptyLBTxBufferv>
    709c:	c8 ec       	ldi	r28, 0xC8	; 200
    709e:	d0 e0       	ldi	r29, 0x00	; 0
    70a0:	00 97       	sbiw	r24, 0x00	; 0
    70a2:	a1 f4       	brne	.+40     	; 0x70cc <_Z12lb_send_textPc+0x4c>
    70a4:	20 97       	sbiw	r28, 0x00	; 0
    70a6:	91 f0       	breq	.+36     	; 0x70cc <_Z12lb_send_textPc+0x4c>
    70a8:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <_Z19linkbusTxInProgressv>
    70ac:	88 23       	and	r24, r24
    70ae:	21 f0       	breq	.+8      	; 0x70b8 <_Z12lb_send_textPc+0x38>
    70b0:	20 97       	sbiw	r28, 0x00	; 0
    70b2:	19 f4       	brne	.+6      	; 0x70ba <_Z12lb_send_textPc+0x3a>
    70b4:	81 2f       	mov	r24, r17
    70b6:	01 c0       	rjmp	.+2      	; 0x70ba <_Z12lb_send_textPc+0x3a>
    70b8:	81 2f       	mov	r24, r17
    70ba:	88 23       	and	r24, r24
    70bc:	21 f0       	breq	.+8      	; 0x70c6 <_Z12lb_send_textPc+0x46>
    70be:	20 97       	sbiw	r28, 0x00	; 0
    70c0:	99 f3       	breq	.-26     	; 0x70a8 <_Z12lb_send_textPc+0x28>
    70c2:	21 97       	sbiw	r28, 0x01	; 1
    70c4:	f1 cf       	rjmp	.-30     	; 0x70a8 <_Z12lb_send_textPc+0x28>
    70c6:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <_Z19nextEmptyLBTxBufferv>
    70ca:	ea cf       	rjmp	.-44     	; 0x70a0 <_Z12lb_send_textPc+0x20>
    70cc:	00 97       	sbiw	r24, 0x00	; 0
    70ce:	91 f0       	breq	.+36     	; 0x70f4 <_Z12lb_send_textPc+0x74>
    70d0:	ff 92       	push	r15
    70d2:	ef 92       	push	r14
    70d4:	9f 93       	push	r25
    70d6:	8f 93       	push	r24
    70d8:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    70dc:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZL16linkbus_start_txv>
    70e0:	0f 90       	pop	r0
    70e2:	0f 90       	pop	r0
    70e4:	0f 90       	pop	r0
    70e6:	0f 90       	pop	r0
    70e8:	80 e0       	ldi	r24, 0x00	; 0
    70ea:	05 c0       	rjmp	.+10     	; 0x70f6 <_Z12lb_send_textPc+0x76>
    70ec:	81 e0       	ldi	r24, 0x01	; 1
    70ee:	03 c0       	rjmp	.+6      	; 0x70f6 <_Z12lb_send_textPc+0x76>
    70f0:	81 e0       	ldi	r24, 0x01	; 1
    70f2:	01 c0       	rjmp	.+2      	; 0x70f6 <_Z12lb_send_textPc+0x76>
    70f4:	81 e0       	ldi	r24, 0x01	; 1
    70f6:	df 91       	pop	r29
    70f8:	cf 91       	pop	r28
    70fa:	1f 91       	pop	r17
    70fc:	ff 90       	pop	r15
    70fe:	ef 90       	pop	r14
    7100:	08 95       	ret

00007102 <_Z11lb_send_msg13LBMessageTypePKcPc>:
    7102:	83 30       	cpi	r24, 0x03	; 3
    7104:	29 f0       	breq	.+10     	; 0x7110 <_Z11lb_send_msg13LBMessageTypePKcPc+0xe>
    7106:	82 30       	cpi	r24, 0x02	; 2
    7108:	31 f0       	breq	.+12     	; 0x7116 <_Z11lb_send_msg13LBMessageTypePKcPc+0x14>
    710a:	9b e3       	ldi	r25, 0x3B	; 59
    710c:	84 e2       	ldi	r24, 0x24	; 36
    710e:	05 c0       	rjmp	.+10     	; 0x711a <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    7110:	9b e3       	ldi	r25, 0x3B	; 59
    7112:	81 e2       	ldi	r24, 0x21	; 33
    7114:	02 c0       	rjmp	.+4      	; 0x711a <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    7116:	9f e3       	ldi	r25, 0x3F	; 63
    7118:	84 e2       	ldi	r24, 0x24	; 36
    711a:	1f 92       	push	r1
    711c:	9f 93       	push	r25
    711e:	5f 93       	push	r21
    7120:	4f 93       	push	r20
    7122:	7f 93       	push	r23
    7124:	6f 93       	push	r22
    7126:	1f 92       	push	r1
    7128:	8f 93       	push	r24
    712a:	86 eb       	ldi	r24, 0xB6	; 182
    712c:	94 e4       	ldi	r25, 0x44	; 68
    712e:	9f 93       	push	r25
    7130:	8f 93       	push	r24
    7132:	89 e0       	ldi	r24, 0x09	; 9
    7134:	99 e4       	ldi	r25, 0x49	; 73
    7136:	9f 93       	push	r25
    7138:	8f 93       	push	r24
    713a:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    713e:	89 e0       	ldi	r24, 0x09	; 9
    7140:	99 e4       	ldi	r25, 0x49	; 73
    7142:	0e 94 40 38 	call	0x7080	; 0x7080 <_Z12lb_send_textPc>
    7146:	8d b7       	in	r24, 0x3d	; 61
    7148:	9e b7       	in	r25, 0x3e	; 62
    714a:	0c 96       	adiw	r24, 0x0c	; 12
    714c:	8d bf       	out	0x3d, r24	; 61
    714e:	9e bf       	out	0x3e, r25	; 62
    7150:	08 95       	ret

00007152 <_Z16lb_broadcast_numjPKc>:
}


void lb_broadcast_num(uint16_t data, const char* str)
{
    7152:	0f 93       	push	r16
    7154:	1f 93       	push	r17
    7156:	cf 93       	push	r28
    7158:	df 93       	push	r29
    715a:	cd b7       	in	r28, 0x3d	; 61
    715c:	de b7       	in	r29, 0x3e	; 62
    715e:	26 97       	sbiw	r28, 0x06	; 6
    7160:	cd bf       	out	0x3d, r28	; 61
    7162:	de bf       	out	0x3e, r29	; 62
    7164:	8b 01       	movw	r16, r22
	char t[6] = "\0";
    7166:	20 91 59 44 	lds	r18, 0x4459	; 0x804459 <g_80m_power_table+0x422>
    716a:	30 91 5a 44 	lds	r19, 0x445A	; 0x80445a <g_80m_power_table+0x423>
    716e:	29 83       	std	Y+1, r18	; 0x01
    7170:	3a 83       	std	Y+2, r19	; 0x02
    7172:	fe 01       	movw	r30, r28
    7174:	33 96       	adiw	r30, 0x03	; 3
    7176:	24 e0       	ldi	r18, 0x04	; 4
    7178:	df 01       	movw	r26, r30
    717a:	1d 92       	st	X+, r1
    717c:	2a 95       	dec	r18
    717e:	e9 f7       	brne	.-6      	; 0x717a <_Z16lb_broadcast_numjPKc+0x28>

	sprintf(t, "%u", data);
    7180:	9f 93       	push	r25
    7182:	8f 93       	push	r24
    7184:	86 ec       	ldi	r24, 0xC6	; 198
    7186:	94 e4       	ldi	r25, 0x44	; 68
    7188:	9f 93       	push	r25
    718a:	8f 93       	push	r24
    718c:	ce 01       	movw	r24, r28
    718e:	01 96       	adiw	r24, 0x01	; 1
    7190:	9f 93       	push	r25
    7192:	8f 93       	push	r24
    7194:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
	g_tempMsgBuff[0] = '\0';
    7198:	10 92 09 49 	sts	0x4909, r1	; 0x804909 <_ZL13g_tempMsgBuff>

	if(str)
    719c:	0f 90       	pop	r0
    719e:	0f 90       	pop	r0
    71a0:	0f 90       	pop	r0
    71a2:	0f 90       	pop	r0
    71a4:	0f 90       	pop	r0
    71a6:	0f 90       	pop	r0
    71a8:	01 15       	cp	r16, r1
    71aa:	11 05       	cpc	r17, r1
    71ac:	91 f0       	breq	.+36     	; 0x71d2 <_Z16lb_broadcast_numjPKc+0x80>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
    71ae:	ce 01       	movw	r24, r28
    71b0:	01 96       	adiw	r24, 0x01	; 1
    71b2:	9f 93       	push	r25
    71b4:	8f 93       	push	r24
    71b6:	1f 93       	push	r17
    71b8:	0f 93       	push	r16
    71ba:	89 ec       	ldi	r24, 0xC9	; 201
    71bc:	94 e4       	ldi	r25, 0x44	; 68
    71be:	9f 93       	push	r25
    71c0:	8f 93       	push	r24
    71c2:	89 e0       	ldi	r24, 0x09	; 9
    71c4:	99 e4       	ldi	r25, 0x49	; 73
    71c6:	9f 93       	push	r25
    71c8:	8f 93       	push	r24
    71ca:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    71ce:	cd bf       	out	0x3d, r28	; 61
    71d0:	de bf       	out	0x3e, r29	; 62
	}

	if(g_tempMsgBuff[0]) lb_send_text(g_tempMsgBuff);
    71d2:	80 91 09 49 	lds	r24, 0x4909	; 0x804909 <_ZL13g_tempMsgBuff>
    71d6:	88 23       	and	r24, r24
    71d8:	21 f0       	breq	.+8      	; 0x71e2 <_Z16lb_broadcast_numjPKc+0x90>
    71da:	89 e0       	ldi	r24, 0x09	; 9
    71dc:	99 e4       	ldi	r25, 0x49	; 73
    71de:	0e 94 40 38 	call	0x7080	; 0x7080 <_Z12lb_send_textPc>
}
    71e2:	26 96       	adiw	r28, 0x06	; 6
    71e4:	cd bf       	out	0x3d, r28	; 61
    71e6:	de bf       	out	0x3e, r29	; 62
    71e8:	df 91       	pop	r29
    71ea:	cf 91       	pop	r28
    71ec:	1f 91       	pop	r17
    71ee:	0f 91       	pop	r16
    71f0:	08 95       	ret

000071f2 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    71f2:	90 e0       	ldi	r25, 0x00	; 0
    71f4:	fc 01       	movw	r30, r24
    71f6:	b0 97       	sbiw	r30, 0x20	; 32
    71f8:	ed 35       	cpi	r30, 0x5D	; 93
    71fa:	f1 05       	cpc	r31, r1
    71fc:	08 f0       	brcs	.+2      	; 0x7200 <_Z12getMorseCharc+0xe>
    71fe:	e8 c0       	rjmp	.+464    	; 0x73d0 <_Z12getMorseCharc+0x1de>
    7200:	e7 54       	subi	r30, 0x47	; 71
    7202:	ff 4f       	sbci	r31, 0xFF	; 255
    7204:	0c 94 03 4d 	jmp	0x9a06	; 0x9a06 <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7208:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    720a:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    720c:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    720e:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7210:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    7212:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    7214:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    7216:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    7218:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    721a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    721c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    721e:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7220:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    7222:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    7224:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    7226:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7228:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    722a:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    722c:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    722e:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    7230:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    7232:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    7234:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    7236:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7238:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    723a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    723c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    723e:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7240:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    7242:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    7244:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    7246:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7248:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    724a:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    724c:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    724e:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    7250:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    7252:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    7254:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7256:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    7258:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    725a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    725c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    725e:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7260:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    7262:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    7264:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    7266:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7268:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    726a:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    726c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    726e:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7270:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    7272:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    7274:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    7276:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    7278:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    727a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    727c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    727e:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    7280:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    7282:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    7284:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7286:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    7288:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    728a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    728c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    728e:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7290:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    7292:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    7294:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    7296:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7298:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    729a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    729c:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    729e:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    72a0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    72a2:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    72a4:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    72a6:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    72a8:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    72aa:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    72ac:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    72ae:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    72b0:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    72b2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    72b4:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    72b6:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    72b8:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    72ba:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    72bc:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    72be:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    72c0:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    72c2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    72c4:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    72c6:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    72c8:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    72ca:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    72cc:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    72ce:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    72d0:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    72d2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    72d4:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    72d6:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    72d8:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    72da:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    72dc:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    72de:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    72e0:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    72e2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    72e4:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    72e6:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    72e8:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    72ea:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    72ec:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    72ee:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    72f0:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    72f2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    72f4:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    72f6:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    72f8:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    72fa:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    72fc:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    72fe:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    7300:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    7302:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    7304:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    7306:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    7308:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    730a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    730c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    730e:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7310:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    7312:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    7314:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7316:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    7318:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    731a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    731c:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    731e:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    7320:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    7322:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    7324:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7326:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    7328:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    732a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    732c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    732e:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    7330:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    7332:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    7334:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7336:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    7338:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    733a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    733c:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    733e:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    7340:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    7342:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    7344:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7346:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    7348:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    734a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    734c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    734e:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    7350:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    7352:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    7354:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7356:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    7358:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    735a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    735c:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    735e:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    7360:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    7362:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    7364:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7366:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7368:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    736a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    736c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    736e:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    7370:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    7372:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    7374:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7376:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    7378:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    737a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    737c:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    737e:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    7380:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    7382:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    7384:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7386:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    7388:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    738a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    738c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    738e:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    7390:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    7392:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    7394:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7396:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    7398:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    739a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    739c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    739e:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    73a0:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    73a2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    73a4:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    73a6:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    73a8:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    73aa:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    73ac:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    73ae:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    73b0:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    73b2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    73b4:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    73b6:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    73b8:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    73ba:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    73bc:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    73be:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    73c0:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    73c2:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    73c4:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    73c6:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    73c8:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    73ca:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    73cc:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    73ce:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    73d0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    73d2:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    73d4:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    73d6:	08 95       	ret

000073d8 <_Z9makeMorsePcPbS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a bool indicating whether a CW carrier should be sent
 *  Pass in a pointer to a bool in the second and third arguments:
 */
bool makeMorse(char* s, bool* repeating, bool* finished)
{
    73d8:	cf 93       	push	r28
    73da:	df 93       	push	r29
    73dc:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static bool completedString = false;
	static bool carrierOn = false;
	static bool holdKeyDown = false;

	if(s)   /* load a new NULL-terminated string to send */
    73de:	00 97       	sbiw	r24, 0x00	; 0
    73e0:	b1 f1       	breq	.+108    	; 0x744e <_Z9makeMorsePcPbS0_+0x76>
	{
		holdKeyDown = false;
    73e2:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>

		if(repeating)
    73e6:	61 15       	cp	r22, r1
    73e8:	71 05       	cpc	r23, r1
    73ea:	21 f0       	breq	.+8      	; 0x73f4 <_Z9makeMorsePcPbS0_+0x1c>
		{
			repeat = *repeating;
    73ec:	db 01       	movw	r26, r22
    73ee:	2c 91       	ld	r18, X
    73f0:	20 93 25 40 	sts	0x4025, r18	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
		}

		if(*s)
    73f4:	fc 01       	movw	r30, r24
    73f6:	20 81       	ld	r18, Z
    73f8:	22 23       	and	r18, r18
    73fa:	d9 f0       	breq	.+54     	; 0x7432 <_Z9makeMorsePcPbS0_+0x5a>
		{
			str = s;
    73fc:	80 93 44 49 	sts	0x4944, r24	; 0x804944 <_ZZ9makeMorsePcPbS0_E3str>
    7400:	90 93 45 49 	sts	0x4945, r25	; 0x804945 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			c = ' ';
    7404:	80 e2       	ldi	r24, 0x20	; 32
    7406:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
			morseInProgress = getMorseChar(*str);
    740a:	82 2f       	mov	r24, r18
    740c:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <_Z12getMorseCharc>
    7410:	60 93 41 49 	sts	0x4941, r22	; 0x804941 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    7414:	70 93 42 49 	sts	0x4942, r23	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    7418:	80 93 43 49 	sts	0x4943, r24	; 0x804943 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
			charIndex = 0;
    741c:	10 92 40 49 	sts	0x4940, r1	; 0x804940 <_ZZ9makeMorsePcPbS0_E9charIndex>
			symbolIndex = 0;
    7420:	10 92 3f 49 	sts	0x493F, r1	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			elementIndex = 0;
    7424:	10 92 3e 49 	sts	0x493E, r1	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
			addedSpace = 0;
    7428:	10 92 3d 49 	sts	0x493D, r1	; 0x80493d <_ZZ9makeMorsePcPbS0_E10addedSpace>
			completedString = false;
    742c:	10 92 3c 49 	sts	0x493C, r1	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
    7430:	0a c0       	rjmp	.+20     	; 0x7446 <_Z9makeMorsePcPbS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    7432:	10 92 44 49 	sts	0x4944, r1	; 0x804944 <_ZZ9makeMorsePcPbS0_E3str>
    7436:	10 92 45 49 	sts	0x4945, r1	; 0x804945 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			completedString = true;
    743a:	81 e0       	ldi	r24, 0x01	; 1
    743c:	80 93 3c 49 	sts	0x493C, r24	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
			if(finished)
    7440:	20 97       	sbiw	r28, 0x00	; 0
    7442:	09 f0       	breq	.+2      	; 0x7446 <_Z9makeMorsePcPbS0_+0x6e>
			{
				*finished = true;
    7444:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    7446:	10 92 3b 49 	sts	0x493B, r1	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
		return( OFF);
    744a:	80 e0       	ldi	r24, 0x00	; 0
    744c:	b8 c0       	rjmp	.+368    	; 0x75be <_Z9makeMorsePcPbS0_+0x1e6>
	}
	else if(str)
    744e:	e0 91 44 49 	lds	r30, 0x4944	; 0x804944 <_ZZ9makeMorsePcPbS0_E3str>
    7452:	f0 91 45 49 	lds	r31, 0x4945	; 0x804945 <_ZZ9makeMorsePcPbS0_E3str+0x1>
    7456:	30 97       	sbiw	r30, 0x00	; 0
    7458:	09 f4       	brne	.+2      	; 0x745c <_Z9makeMorsePcPbS0_+0x84>
    745a:	a4 c0       	rjmp	.+328    	; 0x75a4 <_Z9makeMorsePcPbS0_+0x1cc>
	{
		if(repeating)
    745c:	61 15       	cp	r22, r1
    745e:	71 05       	cpc	r23, r1
    7460:	21 f0       	breq	.+8      	; 0x746a <_Z9makeMorsePcPbS0_+0x92>
		{
			*repeating = repeat;
    7462:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    7466:	db 01       	movw	r26, r22
    7468:	8c 93       	st	X, r24
		}

		if(completedString)
    746a:	80 91 3c 49 	lds	r24, 0x493C	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
    746e:	88 23       	and	r24, r24
    7470:	49 f0       	breq	.+18     	; 0x7484 <_Z9makeMorsePcPbS0_+0xac>
		{
			if(finished)
    7472:	20 97       	sbiw	r28, 0x00	; 0
    7474:	09 f4       	brne	.+2      	; 0x7478 <_Z9makeMorsePcPbS0_+0xa0>
    7476:	a2 c0       	rjmp	.+324    	; 0x75bc <_Z9makeMorsePcPbS0_+0x1e4>
			{
				*finished = true;
    7478:	81 e0       	ldi	r24, 0x01	; 1
    747a:	88 83       	st	Y, r24
				holdKeyDown = false;
    747c:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
			}
			return( OFF);
    7480:	80 e0       	ldi	r24, 0x00	; 0
    7482:	9d c0       	rjmp	.+314    	; 0x75be <_Z9makeMorsePcPbS0_+0x1e6>
		}

		if(elementIndex)
    7484:	80 91 3e 49 	lds	r24, 0x493E	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7488:	88 23       	and	r24, r24
    748a:	21 f0       	breq	.+8      	; 0x7494 <_Z9makeMorsePcPbS0_+0xbc>
		{
			elementIndex--;
    748c:	81 50       	subi	r24, 0x01	; 1
    748e:	80 93 3e 49 	sts	0x493E, r24	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7492:	7e c0       	rjmp	.+252    	; 0x7590 <_Z9makeMorsePcPbS0_+0x1b8>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    7494:	80 91 3b 49 	lds	r24, 0x493B	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
    7498:	88 23       	and	r24, r24
    749a:	81 f0       	breq	.+32     	; 0x74bc <_Z9makeMorsePcPbS0_+0xe4>
    749c:	80 91 46 49 	lds	r24, 0x4946	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    74a0:	81 11       	cpse	r24, r1
    74a2:	0c c0       	rjmp	.+24     	; 0x74bc <_Z9makeMorsePcPbS0_+0xe4>
		{
			carrierOn = false;
    74a4:	10 92 3b 49 	sts	0x493B, r1	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    74a8:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <_ZZ9makeMorsePcPbS0_E10addedSpace>
    74ac:	88 23       	and	r24, r24
    74ae:	09 f4       	brne	.+2      	; 0x74b2 <_Z9makeMorsePcPbS0_+0xda>
    74b0:	6f c0       	rjmp	.+222    	; 0x7590 <_Z9makeMorsePcPbS0_+0x1b8>
			{
				elementIndex = addedSpace;
    74b2:	80 93 3e 49 	sts	0x493E, r24	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
				addedSpace = 0;
    74b6:	10 92 3d 49 	sts	0x493D, r1	; 0x80493d <_ZZ9makeMorsePcPbS0_E10addedSpace>
    74ba:	6a c0       	rjmp	.+212    	; 0x7590 <_Z9makeMorsePcPbS0_+0x1b8>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    74bc:	90 91 42 49 	lds	r25, 0x4942	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    74c0:	80 91 3f 49 	lds	r24, 0x493F	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    74c4:	89 17       	cp	r24, r25
    74c6:	90 f1       	brcs	.+100    	; 0x752c <_Z9makeMorsePcPbS0_+0x154>
			{
				c = (*(str + ++charIndex));
    74c8:	80 91 40 49 	lds	r24, 0x4940	; 0x804940 <_ZZ9makeMorsePcPbS0_E9charIndex>
    74cc:	8f 5f       	subi	r24, 0xFF	; 255
    74ce:	80 93 40 49 	sts	0x4940, r24	; 0x804940 <_ZZ9makeMorsePcPbS0_E9charIndex>
    74d2:	df 01       	movw	r26, r30
    74d4:	a8 0f       	add	r26, r24
    74d6:	b1 1d       	adc	r27, r1
    74d8:	8c 91       	ld	r24, X
    74da:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>

				if(!c)  /* wrap to beginning of text */
    74de:	81 11       	cpse	r24, r1
    74e0:	19 c0       	rjmp	.+50     	; 0x7514 <_Z9makeMorsePcPbS0_+0x13c>
				{
					if(repeat)
    74e2:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    74e6:	88 23       	and	r24, r24
    74e8:	31 f0       	breq	.+12     	; 0x74f6 <_Z9makeMorsePcPbS0_+0x11e>
					{
						c = *str;
    74ea:	80 81       	ld	r24, Z
    74ec:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
						charIndex = 0;
    74f0:	10 92 40 49 	sts	0x4940, r1	; 0x804940 <_ZZ9makeMorsePcPbS0_E9charIndex>
    74f4:	0f c0       	rjmp	.+30     	; 0x7514 <_Z9makeMorsePcPbS0_+0x13c>
					}
					else
					{
						str = NULL;
    74f6:	10 92 44 49 	sts	0x4944, r1	; 0x804944 <_ZZ9makeMorsePcPbS0_E3str>
    74fa:	10 92 45 49 	sts	0x4945, r1	; 0x804945 <_ZZ9makeMorsePcPbS0_E3str+0x1>
						carrierOn = OFF;
    74fe:	10 92 3b 49 	sts	0x493B, r1	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
						completedString = true;
    7502:	91 e0       	ldi	r25, 0x01	; 1
    7504:	90 93 3c 49 	sts	0x493C, r25	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
						if(finished)
    7508:	20 97       	sbiw	r28, 0x00	; 0
    750a:	09 f0       	breq	.+2      	; 0x750e <_Z9makeMorsePcPbS0_+0x136>
						{
							*finished = true;
    750c:	98 83       	st	Y, r25
						}
						holdKeyDown = false;
    750e:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
						return( OFF );
    7512:	55 c0       	rjmp	.+170    	; 0x75be <_Z9makeMorsePcPbS0_+0x1e6>
					}
				}

				morseInProgress = getMorseChar(c);
    7514:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    7518:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <_Z12getMorseCharc>
    751c:	60 93 41 49 	sts	0x4941, r22	; 0x804941 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    7520:	70 93 42 49 	sts	0x4942, r23	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    7524:	80 93 43 49 	sts	0x4943, r24	; 0x804943 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    7528:	10 92 3f 49 	sts	0x493F, r1	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    752c:	80 91 41 49 	lds	r24, 0x4941	; 0x804941 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    7530:	8d 3f       	cpi	r24, 0xFD	; 253
    7532:	f8 f4       	brcc	.+62     	; 0x7572 <_Z9makeMorsePcPbS0_+0x19a>
			{
				bool isDah = morseInProgress.pattern & (1 << symbolIndex++);
    7534:	30 91 3f 49 	lds	r19, 0x493F	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    7538:	21 e0       	ldi	r18, 0x01	; 1
    753a:	23 0f       	add	r18, r19
    753c:	20 93 3f 49 	sts	0x493F, r18	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    7540:	90 e0       	ldi	r25, 0x00	; 0
    7542:	02 c0       	rjmp	.+4      	; 0x7548 <_Z9makeMorsePcPbS0_+0x170>
    7544:	95 95       	asr	r25
    7546:	87 95       	ror	r24
    7548:	3a 95       	dec	r19
    754a:	e2 f7       	brpl	.-8      	; 0x7544 <_Z9makeMorsePcPbS0_+0x16c>

				if(isDah)
    754c:	80 ff       	sbrs	r24, 0
    754e:	04 c0       	rjmp	.+8      	; 0x7558 <_Z9makeMorsePcPbS0_+0x180>
				{
					elementIndex = 2;
    7550:	82 e0       	ldi	r24, 0x02	; 2
    7552:	80 93 3e 49 	sts	0x493E, r24	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7556:	02 c0       	rjmp	.+4      	; 0x755c <_Z9makeMorsePcPbS0_+0x184>
				}
				else
				{
					elementIndex = 0;
    7558:	10 92 3e 49 	sts	0x493E, r1	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}

				carrierOn = true;
    755c:	81 e0       	ldi	r24, 0x01	; 1
    755e:	80 93 3b 49 	sts	0x493B, r24	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    7562:	80 91 42 49 	lds	r24, 0x4942	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    7566:	28 17       	cp	r18, r24
    7568:	98 f0       	brcs	.+38     	; 0x7590 <_Z9makeMorsePcPbS0_+0x1b8>
				{
					addedSpace = 2;
    756a:	82 e0       	ldi	r24, 0x02	; 2
    756c:	80 93 3d 49 	sts	0x493D, r24	; 0x80493d <_ZZ9makeMorsePcPbS0_E10addedSpace>
    7570:	0f c0       	rjmp	.+30     	; 0x7590 <_Z9makeMorsePcPbS0_+0x1b8>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    7572:	80 91 42 49 	lds	r24, 0x4942	; 0x804942 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    7576:	9f ef       	ldi	r25, 0xFF	; 255
    7578:	90 93 3f 49 	sts	0x493F, r25	; 0x80493f <_ZZ9makeMorsePcPbS0_E11symbolIndex>
				carrierOn = false;
    757c:	10 92 3b 49 	sts	0x493B, r1	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
				if(sym >= 4 )
    7580:	84 30       	cpi	r24, 0x04	; 4
    7582:	20 f0       	brcs	.+8      	; 0x758c <_Z9makeMorsePcPbS0_+0x1b4>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    7584:	84 50       	subi	r24, 0x04	; 4
    7586:	80 93 3e 49 	sts	0x493E, r24	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
    758a:	02 c0       	rjmp	.+4      	; 0x7590 <_Z9makeMorsePcPbS0_+0x1b8>
				}
				else
				{
					elementIndex = 0;
    758c:	10 92 3e 49 	sts	0x493E, r1	; 0x80493e <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    7590:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    7594:	8c 33       	cpi	r24, 0x3C	; 60
    7596:	21 f4       	brne	.+8      	; 0x75a0 <_Z9makeMorsePcPbS0_+0x1c8>
		{
			holdKeyDown = true;
    7598:	81 e0       	ldi	r24, 0x01	; 1
    759a:	80 93 46 49 	sts	0x4946, r24	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    759e:	02 c0       	rjmp	.+4      	; 0x75a4 <_Z9makeMorsePcPbS0_+0x1cc>
		}
		else
		{
			holdKeyDown = false;
    75a0:	10 92 46 49 	sts	0x4946, r1	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
		}
	}

	if(finished)
    75a4:	20 97       	sbiw	r28, 0x00	; 0
    75a6:	19 f0       	breq	.+6      	; 0x75ae <_Z9makeMorsePcPbS0_+0x1d6>
	{
		*finished = completedString;
    75a8:	80 91 3c 49 	lds	r24, 0x493C	; 0x80493c <_ZZ9makeMorsePcPbS0_E15completedString>
    75ac:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    75ae:	80 91 46 49 	lds	r24, 0x4946	; 0x804946 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    75b2:	81 11       	cpse	r24, r1
    75b4:	04 c0       	rjmp	.+8      	; 0x75be <_Z9makeMorsePcPbS0_+0x1e6>
	{
		return(true);
	}
	else
	{
		return( carrierOn);
    75b6:	80 91 3b 49 	lds	r24, 0x493B	; 0x80493b <_ZZ9makeMorsePcPbS0_E9carrierOn>
    75ba:	01 c0       	rjmp	.+2      	; 0x75be <_Z9makeMorsePcPbS0_+0x1e6>
			if(finished)
			{
				*finished = true;
				holdKeyDown = false;
			}
			return( OFF);
    75bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return( carrierOn);
	}
}
    75be:	df 91       	pop	r29
    75c0:	cf 91       	pop	r28
    75c2:	08 95       	ret

000075c4 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    75c4:	cf 92       	push	r12
    75c6:	df 92       	push	r13
    75c8:	ef 92       	push	r14
    75ca:	ff 92       	push	r15
    75cc:	1f 93       	push	r17
    75ce:	cf 93       	push	r28
    75d0:	df 93       	push	r29
    75d2:	6c 01       	movw	r12, r24
    75d4:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    75d6:	c0 e0       	ldi	r28, 0x00	; 0
    75d8:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    75da:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    75dc:	c4 31       	cpi	r28, 0x14	; 20
    75de:	d1 05       	cpc	r29, r1
    75e0:	74 f4       	brge	.+28     	; 0x75fe <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    75e2:	f6 01       	movw	r30, r12
    75e4:	ec 0f       	add	r30, r28
    75e6:	fd 1f       	adc	r31, r29
    75e8:	80 81       	ld	r24, Z
		if(!c)
    75ea:	88 23       	and	r24, r24
    75ec:	41 f0       	breq	.+16     	; 0x75fe <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    75ee:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    75f2:	6d 3f       	cpi	r22, 0xFD	; 253
    75f4:	08 f4       	brcc	.+2      	; 0x75f8 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    75f6:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    75f8:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    75fa:	21 96       	adiw	r28, 0x01	; 1
    75fc:	ef cf       	rjmp	.-34     	; 0x75dc <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    75fe:	80 eb       	ldi	r24, 0xB0	; 176
    7600:	94 e0       	ldi	r25, 0x04	; 4
    7602:	b7 01       	movw	r22, r14
    7604:	0e 94 9a 4c 	call	0x9934	; 0x9934 <__udivmodhi4>
}
    7608:	16 9f       	mul	r17, r22
    760a:	c0 01       	movw	r24, r0
    760c:	17 9f       	mul	r17, r23
    760e:	90 0d       	add	r25, r0
    7610:	11 24       	eor	r1, r1
    7612:	df 91       	pop	r29
    7614:	cf 91       	pop	r28
    7616:	1f 91       	pop	r17
    7618:	ff 90       	pop	r15
    761a:	ef 90       	pop	r14
    761c:	df 90       	pop	r13
    761e:	cf 90       	pop	r12
    7620:	08 95       	ret

00007622 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    7622:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    7624:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    7626:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    7628:	40 83       	st	Z, r20
	ret                             // Return to caller
    762a:	08 95       	ret

0000762c <_ZL21USART4_initializationm>:
	}
	
	serialbus_end_tx();
	memset((SerialbusRxBuffer*)rx_buffer, 0, sizeof(*(SerialbusRxBuffer*)rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    762c:	20 b3       	in	r18, 0x10	; 16
    762e:	2d 7f       	andi	r18, 0xFD	; 253
    7630:	20 bb       	out	0x10, r18	; 16
    7632:	e1 e9       	ldi	r30, 0x91	; 145
    7634:	f4 e0       	ldi	r31, 0x04	; 4
    7636:	20 81       	ld	r18, Z
    7638:	27 7f       	andi	r18, 0xF7	; 247
    763a:	20 83       	st	Z, r18
    763c:	20 b3       	in	r18, 0x10	; 16
    763e:	21 60       	ori	r18, 0x01	; 1
    7640:	20 bb       	out	0x10, r18	; 16
    7642:	21 b3       	in	r18, 0x11	; 17
    7644:	21 60       	ori	r18, 0x01	; 1
    7646:	21 bb       	out	0x11, r18	; 17
    7648:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <USART4_init>
    764c:	08 95       	ret

0000764e <_ZL21USART1_initializationm>:
    764e:	28 b1       	in	r18, 0x08	; 8
    7650:	2d 7f       	andi	r18, 0xFD	; 253
    7652:	28 b9       	out	0x08, r18	; 8
    7654:	e1 e5       	ldi	r30, 0x51	; 81
    7656:	f4 e0       	ldi	r31, 0x04	; 4
    7658:	20 81       	ld	r18, Z
    765a:	27 7f       	andi	r18, 0xF7	; 247
    765c:	20 83       	st	Z, r18
    765e:	28 b1       	in	r18, 0x08	; 8
    7660:	21 60       	ori	r18, 0x01	; 1
    7662:	28 b9       	out	0x08, r18	; 8
    7664:	29 b1       	in	r18, 0x09	; 9
    7666:	21 60       	ori	r18, 0x01	; 1
    7668:	29 b9       	out	0x09, r18	; 9
    766a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <USART1_init>
    766e:	08 95       	ret

00007670 <nextFullSBTxBuffer>:
    7670:	90 e0       	ldi	r25, 0x00	; 0
    7672:	80 91 4a 49 	lds	r24, 0x494A	; 0x80494a <_ZZ18nextFullSBTxBufferE11bufferIndex>
    7676:	28 2f       	mov	r18, r24
    7678:	30 e0       	ldi	r19, 0x00	; 0
    767a:	49 e2       	ldi	r20, 0x29	; 41
    767c:	42 9f       	mul	r20, r18
    767e:	f0 01       	movw	r30, r0
    7680:	43 9f       	mul	r20, r19
    7682:	f0 0d       	add	r31, r0
    7684:	11 24       	eor	r1, r1
    7686:	e7 53       	subi	r30, 0x37	; 55
    7688:	f6 4b       	sbci	r31, 0xB6	; 182
    768a:	40 81       	ld	r20, Z
    768c:	41 11       	cpse	r20, r1
    768e:	0b c0       	rjmp	.+22     	; 0x76a6 <nextFullSBTxBuffer+0x36>
    7690:	9f 5f       	subi	r25, 0xFF	; 255
    7692:	93 30       	cpi	r25, 0x03	; 3
    7694:	50 f4       	brcc	.+20     	; 0x76aa <nextFullSBTxBuffer+0x3a>
    7696:	8f 5f       	subi	r24, 0xFF	; 255
    7698:	80 93 4a 49 	sts	0x494A, r24	; 0x80494a <_ZZ18nextFullSBTxBufferE11bufferIndex>
    769c:	83 30       	cpi	r24, 0x03	; 3
    769e:	48 f3       	brcs	.-46     	; 0x7672 <nextFullSBTxBuffer+0x2>
    76a0:	10 92 4a 49 	sts	0x494A, r1	; 0x80494a <_ZZ18nextFullSBTxBufferE11bufferIndex>
    76a4:	e6 cf       	rjmp	.-52     	; 0x7672 <nextFullSBTxBuffer+0x2>
    76a6:	81 e0       	ldi	r24, 0x01	; 1
    76a8:	01 c0       	rjmp	.+2      	; 0x76ac <nextFullSBTxBuffer+0x3c>
    76aa:	80 e0       	ldi	r24, 0x00	; 0
    76ac:	88 23       	and	r24, r24
    76ae:	49 f0       	breq	.+18     	; 0x76c2 <nextFullSBTxBuffer+0x52>
    76b0:	49 e2       	ldi	r20, 0x29	; 41
    76b2:	42 9f       	mul	r20, r18
    76b4:	c0 01       	movw	r24, r0
    76b6:	43 9f       	mul	r20, r19
    76b8:	90 0d       	add	r25, r0
    76ba:	11 24       	eor	r1, r1
    76bc:	87 53       	subi	r24, 0x37	; 55
    76be:	96 4b       	sbci	r25, 0xB6	; 182
    76c0:	08 95       	ret
    76c2:	80 e0       	ldi	r24, 0x00	; 0
    76c4:	90 e0       	ldi	r25, 0x00	; 0
    76c6:	08 95       	ret

000076c8 <nextEmptySBTxBuffer>:
    76c8:	90 e0       	ldi	r25, 0x00	; 0
    76ca:	80 91 49 49 	lds	r24, 0x4949	; 0x804949 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    76ce:	28 2f       	mov	r18, r24
    76d0:	30 e0       	ldi	r19, 0x00	; 0
    76d2:	49 e2       	ldi	r20, 0x29	; 41
    76d4:	42 9f       	mul	r20, r18
    76d6:	f0 01       	movw	r30, r0
    76d8:	43 9f       	mul	r20, r19
    76da:	f0 0d       	add	r31, r0
    76dc:	11 24       	eor	r1, r1
    76de:	e7 53       	subi	r30, 0x37	; 55
    76e0:	f6 4b       	sbci	r31, 0xB6	; 182
    76e2:	40 81       	ld	r20, Z
    76e4:	44 23       	and	r20, r20
    76e6:	59 f0       	breq	.+22     	; 0x76fe <nextEmptySBTxBuffer+0x36>
    76e8:	9f 5f       	subi	r25, 0xFF	; 255
    76ea:	93 30       	cpi	r25, 0x03	; 3
    76ec:	50 f4       	brcc	.+20     	; 0x7702 <nextEmptySBTxBuffer+0x3a>
    76ee:	8f 5f       	subi	r24, 0xFF	; 255
    76f0:	80 93 49 49 	sts	0x4949, r24	; 0x804949 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    76f4:	83 30       	cpi	r24, 0x03	; 3
    76f6:	48 f3       	brcs	.-46     	; 0x76ca <nextEmptySBTxBuffer+0x2>
    76f8:	10 92 49 49 	sts	0x4949, r1	; 0x804949 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    76fc:	e6 cf       	rjmp	.-52     	; 0x76ca <nextEmptySBTxBuffer+0x2>
    76fe:	81 e0       	ldi	r24, 0x01	; 1
    7700:	01 c0       	rjmp	.+2      	; 0x7704 <nextEmptySBTxBuffer+0x3c>
    7702:	80 e0       	ldi	r24, 0x00	; 0
    7704:	88 23       	and	r24, r24
    7706:	49 f0       	breq	.+18     	; 0x771a <nextEmptySBTxBuffer+0x52>
    7708:	49 e2       	ldi	r20, 0x29	; 41
    770a:	42 9f       	mul	r20, r18
    770c:	c0 01       	movw	r24, r0
    770e:	43 9f       	mul	r20, r19
    7710:	90 0d       	add	r25, r0
    7712:	11 24       	eor	r1, r1
    7714:	87 53       	subi	r24, 0x37	; 55
    7716:	96 4b       	sbci	r25, 0xB6	; 182
    7718:	08 95       	ret
    771a:	80 e0       	ldi	r24, 0x00	; 0
    771c:	90 e0       	ldi	r25, 0x00	; 0
    771e:	08 95       	ret

00007720 <nextEmptySBRxBuffer>:
    7720:	90 e0       	ldi	r25, 0x00	; 0
    7722:	80 91 48 49 	lds	r24, 0x4948	; 0x804948 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    7726:	28 2f       	mov	r18, r24
    7728:	30 e0       	ldi	r19, 0x00	; 0
    772a:	4f e3       	ldi	r20, 0x3F	; 63
    772c:	42 9f       	mul	r20, r18
    772e:	f0 01       	movw	r30, r0
    7730:	43 9f       	mul	r20, r19
    7732:	f0 0d       	add	r31, r0
    7734:	11 24       	eor	r1, r1
    7736:	e5 5b       	subi	r30, 0xB5	; 181
    7738:	f6 4b       	sbci	r31, 0xB6	; 182
    773a:	41 81       	ldd	r20, Z+1	; 0x01
    773c:	52 81       	ldd	r21, Z+2	; 0x02
    773e:	45 2b       	or	r20, r21
    7740:	59 f0       	breq	.+22     	; 0x7758 <nextEmptySBRxBuffer+0x38>
    7742:	9f 5f       	subi	r25, 0xFF	; 255
    7744:	92 30       	cpi	r25, 0x02	; 2
    7746:	50 f4       	brcc	.+20     	; 0x775c <nextEmptySBRxBuffer+0x3c>
    7748:	8f 5f       	subi	r24, 0xFF	; 255
    774a:	80 93 48 49 	sts	0x4948, r24	; 0x804948 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    774e:	82 30       	cpi	r24, 0x02	; 2
    7750:	40 f3       	brcs	.-48     	; 0x7722 <nextEmptySBRxBuffer+0x2>
    7752:	10 92 48 49 	sts	0x4948, r1	; 0x804948 <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    7756:	e5 cf       	rjmp	.-54     	; 0x7722 <nextEmptySBRxBuffer+0x2>
    7758:	81 e0       	ldi	r24, 0x01	; 1
    775a:	01 c0       	rjmp	.+2      	; 0x775e <nextEmptySBRxBuffer+0x3e>
    775c:	80 e0       	ldi	r24, 0x00	; 0
    775e:	88 23       	and	r24, r24
    7760:	49 f0       	breq	.+18     	; 0x7774 <nextEmptySBRxBuffer+0x54>
    7762:	4f e3       	ldi	r20, 0x3F	; 63
    7764:	42 9f       	mul	r20, r18
    7766:	c0 01       	movw	r24, r0
    7768:	43 9f       	mul	r20, r19
    776a:	90 0d       	add	r25, r0
    776c:	11 24       	eor	r1, r1
    776e:	85 5b       	subi	r24, 0xB5	; 181
    7770:	96 4b       	sbci	r25, 0xB6	; 182
    7772:	08 95       	ret
    7774:	80 e0       	ldi	r24, 0x00	; 0
    7776:	90 e0       	ldi	r25, 0x00	; 0
    7778:	08 95       	ret

0000777a <nextFullSBRxBuffer>:
    777a:	90 e0       	ldi	r25, 0x00	; 0
    777c:	80 91 47 49 	lds	r24, 0x4947	; 0x804947 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7780:	28 2f       	mov	r18, r24
    7782:	30 e0       	ldi	r19, 0x00	; 0
    7784:	4f e3       	ldi	r20, 0x3F	; 63
    7786:	42 9f       	mul	r20, r18
    7788:	f0 01       	movw	r30, r0
    778a:	43 9f       	mul	r20, r19
    778c:	f0 0d       	add	r31, r0
    778e:	11 24       	eor	r1, r1
    7790:	e5 5b       	subi	r30, 0xB5	; 181
    7792:	f6 4b       	sbci	r31, 0xB6	; 182
    7794:	41 81       	ldd	r20, Z+1	; 0x01
    7796:	52 81       	ldd	r21, Z+2	; 0x02
    7798:	45 2b       	or	r20, r21
    779a:	59 f4       	brne	.+22     	; 0x77b2 <nextFullSBRxBuffer+0x38>
    779c:	9f 5f       	subi	r25, 0xFF	; 255
    779e:	92 30       	cpi	r25, 0x02	; 2
    77a0:	50 f4       	brcc	.+20     	; 0x77b6 <nextFullSBRxBuffer+0x3c>
    77a2:	8f 5f       	subi	r24, 0xFF	; 255
    77a4:	80 93 47 49 	sts	0x4947, r24	; 0x804947 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    77a8:	82 30       	cpi	r24, 0x02	; 2
    77aa:	40 f3       	brcs	.-48     	; 0x777c <nextFullSBRxBuffer+0x2>
    77ac:	10 92 47 49 	sts	0x4947, r1	; 0x804947 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    77b0:	e5 cf       	rjmp	.-54     	; 0x777c <nextFullSBRxBuffer+0x2>
    77b2:	81 e0       	ldi	r24, 0x01	; 1
    77b4:	01 c0       	rjmp	.+2      	; 0x77b8 <nextFullSBRxBuffer+0x3e>
    77b6:	80 e0       	ldi	r24, 0x00	; 0
    77b8:	88 23       	and	r24, r24
    77ba:	49 f0       	breq	.+18     	; 0x77ce <nextFullSBRxBuffer+0x54>
    77bc:	4f e3       	ldi	r20, 0x3F	; 63
    77be:	42 9f       	mul	r20, r18
    77c0:	c0 01       	movw	r24, r0
    77c2:	43 9f       	mul	r20, r19
    77c4:	90 0d       	add	r25, r0
    77c6:	11 24       	eor	r1, r1
    77c8:	85 5b       	subi	r24, 0xB5	; 181
    77ca:	96 4b       	sbci	r25, 0xB6	; 182
    77cc:	08 95       	ret
    77ce:	80 e0       	ldi	r24, 0x00	; 0
    77d0:	90 e0       	ldi	r25, 0x00	; 0
    77d2:	08 95       	ret

000077d4 <serialbusTxInProgress>:
    77d4:	80 91 44 4a 	lds	r24, 0x4A44	; 0x804a44 <_ZL19serialbus_tx_active>
    77d8:	08 95       	ret

000077da <_Z18serialbus_start_txv>:
    77da:	cf 93       	push	r28
    77dc:	c0 91 44 4a 	lds	r28, 0x4A44	; 0x804a44 <_ZL19serialbus_tx_active>
    77e0:	81 e0       	ldi	r24, 0x01	; 1
    77e2:	c8 27       	eor	r28, r24
    77e4:	59 f0       	breq	.+22     	; 0x77fc <_Z18serialbus_start_txv+0x22>
    77e6:	80 93 44 4a 	sts	0x4A44, r24	; 0x804a44 <_ZL19serialbus_tx_active>
    77ea:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    77ee:	81 11       	cpse	r24, r1
    77f0:	03 c0       	rjmp	.+6      	; 0x77f8 <_Z18serialbus_start_txv+0x1e>
    77f2:	0e 94 88 47 	call	0x8f10	; 0x8f10 <USART4_enable_tx>
    77f6:	02 c0       	rjmp	.+4      	; 0x77fc <_Z18serialbus_start_txv+0x22>
    77f8:	0e 94 54 47 	call	0x8ea8	; 0x8ea8 <USART1_enable_tx>
    77fc:	8c 2f       	mov	r24, r28
    77fe:	cf 91       	pop	r28
    7800:	08 95       	ret

00007802 <serialbus_end_tx>:
    7802:	80 91 44 4a 	lds	r24, 0x4A44	; 0x804a44 <_ZL19serialbus_tx_active>
    7806:	88 23       	and	r24, r24
    7808:	89 f0       	breq	.+34     	; 0x782c <serialbus_end_tx+0x2a>
    780a:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    780e:	84 30       	cpi	r24, 0x04	; 4
    7810:	31 f4       	brne	.+12     	; 0x781e <serialbus_end_tx+0x1c>
    7812:	e0 e8       	ldi	r30, 0x80	; 128
    7814:	f8 e0       	ldi	r31, 0x08	; 8
    7816:	85 81       	ldd	r24, Z+5	; 0x05
    7818:	8f 7d       	andi	r24, 0xDF	; 223
    781a:	85 83       	std	Z+5, r24	; 0x05
    781c:	05 c0       	rjmp	.+10     	; 0x7828 <serialbus_end_tx+0x26>
    781e:	e0 e2       	ldi	r30, 0x20	; 32
    7820:	f8 e0       	ldi	r31, 0x08	; 8
    7822:	85 81       	ldd	r24, Z+5	; 0x05
    7824:	8f 7d       	andi	r24, 0xDF	; 223
    7826:	85 83       	std	Z+5, r24	; 0x05
    7828:	10 92 44 4a 	sts	0x4A44, r1	; 0x804a44 <_ZL19serialbus_tx_active>
    782c:	08 95       	ret

0000782e <serialbus_init>:
    782e:	cf 93       	push	r28
    7830:	2f e3       	ldi	r18, 0x3F	; 63
    7832:	eb e4       	ldi	r30, 0x4B	; 75
    7834:	f9 e4       	ldi	r31, 0x49	; 73
    7836:	df 01       	movw	r26, r30
    7838:	1d 92       	st	X+, r1
    783a:	2a 95       	dec	r18
    783c:	e9 f7       	brne	.-6      	; 0x7838 <serialbus_init+0xa>
    783e:	a0 e0       	ldi	r26, 0x00	; 0
    7840:	b0 e0       	ldi	r27, 0x00	; 0
    7842:	a3 30       	cpi	r26, 0x03	; 3
    7844:	b1 05       	cpc	r27, r1
    7846:	5c f4       	brge	.+22     	; 0x785e <serialbus_init+0x30>
    7848:	29 e2       	ldi	r18, 0x29	; 41
    784a:	2a 9f       	mul	r18, r26
    784c:	f0 01       	movw	r30, r0
    784e:	2b 9f       	mul	r18, r27
    7850:	f0 0d       	add	r31, r0
    7852:	11 24       	eor	r1, r1
    7854:	e7 53       	subi	r30, 0x37	; 55
    7856:	f6 4b       	sbci	r31, 0xB6	; 182
    7858:	10 82       	st	Z, r1
    785a:	11 96       	adiw	r26, 0x01	; 1
    785c:	f2 cf       	rjmp	.-28     	; 0x7842 <serialbus_init+0x14>
    785e:	46 30       	cpi	r20, 0x06	; 6
    7860:	21 f4       	brne	.+8      	; 0x786a <serialbus_init+0x3c>
    7862:	20 91 27 40 	lds	r18, 0x4027	; 0x804027 <g_serialbus_usart_number>
    7866:	27 30       	cpi	r18, 0x07	; 7
    7868:	51 f4       	brne	.+20     	; 0x787e <serialbus_init+0x50>
    786a:	c4 2f       	mov	r28, r20
    786c:	44 30       	cpi	r20, 0x04	; 4
    786e:	19 f4       	brne	.+6      	; 0x7876 <serialbus_init+0x48>
    7870:	0e 94 16 3b 	call	0x762c	; 0x762c <_ZL21USART4_initializationm>
    7874:	02 c0       	rjmp	.+4      	; 0x787a <serialbus_init+0x4c>
    7876:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZL21USART1_initializationm>
    787a:	c0 93 27 40 	sts	0x4027, r28	; 0x804027 <g_serialbus_usart_number>
    787e:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <_ZL14g_bus_disabled>
    7882:	cf 91       	pop	r28
    7884:	08 95       	ret

00007886 <_Z19serialbus_send_textPc>:
	}
}


bool serialbus_send_text(char* text)
{
    7886:	ef 92       	push	r14
    7888:	ff 92       	push	r15
    788a:	1f 93       	push	r17
    788c:	cf 93       	push	r28
    788e:	df 93       	push	r29
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
    7890:	10 91 26 40 	lds	r17, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7894:	11 11       	cpse	r17, r1
    7896:	2d c0       	rjmp	.+90     	; 0x78f2 <_Z19serialbus_send_textPc+0x6c>
	{
		return( err);
	}

	if(text)
    7898:	00 97       	sbiw	r24, 0x00	; 0
    789a:	69 f1       	breq	.+90     	; 0x78f6 <_Z19serialbus_send_textPc+0x70>
    789c:	7c 01       	movw	r14, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    789e:	0e 94 64 3b 	call	0x76c8	; 0x76c8 <nextEmptySBTxBuffer>


bool serialbus_send_text(char* text)
{
	bool err = true;
	uint16_t tries = 200;
    78a2:	c8 ec       	ldi	r28, 0xC8	; 200
    78a4:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    78a6:	00 97       	sbiw	r24, 0x00	; 0
    78a8:	a1 f4       	brne	.+40     	; 0x78d2 <_Z19serialbus_send_textPc+0x4c>
    78aa:	20 97       	sbiw	r28, 0x00	; 0
    78ac:	91 f0       	breq	.+36     	; 0x78d2 <_Z19serialbus_send_textPc+0x4c>
		{
			while(serialbusTxInProgress() && tries)
    78ae:	0e 94 ea 3b 	call	0x77d4	; 0x77d4 <serialbusTxInProgress>
    78b2:	88 23       	and	r24, r24
    78b4:	21 f0       	breq	.+8      	; 0x78be <_Z19serialbus_send_textPc+0x38>
    78b6:	20 97       	sbiw	r28, 0x00	; 0
    78b8:	19 f4       	brne	.+6      	; 0x78c0 <_Z19serialbus_send_textPc+0x3a>
    78ba:	81 2f       	mov	r24, r17
    78bc:	01 c0       	rjmp	.+2      	; 0x78c0 <_Z19serialbus_send_textPc+0x3a>
    78be:	81 2f       	mov	r24, r17
    78c0:	88 23       	and	r24, r24
    78c2:	21 f0       	breq	.+8      	; 0x78cc <_Z19serialbus_send_textPc+0x46>
			{
				if(tries)
    78c4:	20 97       	sbiw	r28, 0x00	; 0
    78c6:	99 f3       	breq	.-26     	; 0x78ae <_Z19serialbus_send_textPc+0x28>
				{
					tries--;    /* wait until transmit finishes */
    78c8:	21 97       	sbiw	r28, 0x01	; 1
    78ca:	f1 cf       	rjmp	.-30     	; 0x78ae <_Z19serialbus_send_textPc+0x28>
				}
			}
			buff = nextEmptySBTxBuffer();
    78cc:	0e 94 64 3b 	call	0x76c8	; 0x76c8 <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    78d0:	ea cf       	rjmp	.-44     	; 0x78a6 <_Z19serialbus_send_textPc+0x20>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    78d2:	00 97       	sbiw	r24, 0x00	; 0
    78d4:	91 f0       	breq	.+36     	; 0x78fa <_Z19serialbus_send_textPc+0x74>
		{
			sprintf(*buff, text);
    78d6:	ff 92       	push	r15
    78d8:	ef 92       	push	r14
    78da:	9f 93       	push	r25
    78dc:	8f 93       	push	r24
    78de:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>

			serialbus_start_tx();
    78e2:	0e 94 ed 3b 	call	0x77da	; 0x77da <_Z18serialbus_start_txv>
    78e6:	0f 90       	pop	r0
    78e8:	0f 90       	pop	r0
    78ea:	0f 90       	pop	r0
    78ec:	0f 90       	pop	r0
			err = false;
    78ee:	80 e0       	ldi	r24, 0x00	; 0
    78f0:	05 c0       	rjmp	.+10     	; 0x78fc <_Z19serialbus_send_textPc+0x76>
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    78f2:	81 e0       	ldi	r24, 0x01	; 1
    78f4:	03 c0       	rjmp	.+6      	; 0x78fc <_Z19serialbus_send_textPc+0x76>
}


bool serialbus_send_text(char* text)
{
	bool err = true;
    78f6:	81 e0       	ldi	r24, 0x01	; 1
    78f8:	01 c0       	rjmp	.+2      	; 0x78fc <_Z19serialbus_send_textPc+0x76>
    78fa:	81 e0       	ldi	r24, 0x01	; 1
			err = false;
		}
	}

	return(err);
}
    78fc:	df 91       	pop	r29
    78fe:	cf 91       	pop	r28
    7900:	1f 91       	pop	r17
    7902:	ff 90       	pop	r15
    7904:	ef 90       	pop	r14
    7906:	08 95       	ret

00007908 <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    7908:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    790c:	81 11       	cpse	r24, r1
    790e:	06 c0       	rjmp	.+12     	; 0x791c <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    7910:	80 ed       	ldi	r24, 0xD0	; 208
    7912:	94 e4       	ldi	r25, 0x44	; 68
    7914:	0e 94 43 3c 	call	0x7886	; 0x7886 <_Z19serialbus_send_textPc>
    7918:	81 11       	cpse	r24, r1
    791a:	fa cf       	rjmp	.-12     	; 0x7910 <sb_send_NewPrompt+0x8>
    791c:	08 95       	ret

0000791e <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    791e:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7922:	81 11       	cpse	r24, r1
    7924:	04 c0       	rjmp	.+8      	; 0x792e <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    7926:	83 ed       	ldi	r24, 0xD3	; 211
    7928:	94 e4       	ldi	r25, 0x44	; 68
    792a:	0e 94 43 3c 	call	0x7886	; 0x7886 <_Z19serialbus_send_textPc>
    792e:	08 95       	ret

00007930 <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    7930:	90 91 26 40 	lds	r25, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7934:	91 11       	cpse	r25, r1
    7936:	07 c0       	rjmp	.+14     	; 0x7946 <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    7938:	e5 e4       	ldi	r30, 0x45	; 69
    793a:	fa e4       	ldi	r31, 0x4A	; 74
    793c:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    793e:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    7940:	cf 01       	movw	r24, r30
    7942:	0e 94 43 3c 	call	0x7886	; 0x7886 <_Z19serialbus_send_textPc>
    7946:	08 95       	ret

00007948 <sb_send_string>:
}

bool sb_send_string(char* str)
{
    7948:	8f 92       	push	r8
    794a:	9f 92       	push	r9
    794c:	af 92       	push	r10
    794e:	bf 92       	push	r11
    7950:	df 92       	push	r13
    7952:	ef 92       	push	r14
    7954:	ff 92       	push	r15
    7956:	0f 93       	push	r16
    7958:	1f 93       	push	r17
    795a:	cf 93       	push	r28
    795c:	df 93       	push	r29
    795e:	cd b7       	in	r28, 0x3d	; 61
    7960:	de b7       	in	r29, 0x3e	; 62
    7962:	aa 97       	sbiw	r28, 0x2a	; 42
    7964:	cd bf       	out	0x3d, r28	; 61
    7966:	de bf       	out	0x3e, r29	; 62
    7968:	fc 01       	movw	r30, r24
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    796a:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    796e:	81 11       	cpse	r24, r1
    7970:	45 c0       	rjmp	.+138    	; 0x79fc <sb_send_string+0xb4>
	{
		return( true);
	}

	if(str == NULL)
    7972:	30 97       	sbiw	r30, 0x00	; 0
    7974:	09 f4       	brne	.+2      	; 0x7978 <sb_send_string+0x30>
    7976:	3f c0       	rjmp	.+126    	; 0x79f6 <sb_send_string+0xae>
	{
		return( true);
	}

	if(!*str)
    7978:	80 81       	ld	r24, Z
    797a:	88 23       	and	r24, r24
    797c:	f1 f1       	breq	.+124    	; 0x79fa <sb_send_string+0xb2>
    797e:	4f 01       	movw	r8, r30
	{
		return(true);
	}

	length = strlen(str);
    7980:	01 90       	ld	r0, Z+
    7982:	00 20       	and	r0, r0
    7984:	e9 f7       	brne	.-6      	; 0x7980 <sb_send_string+0x38>
    7986:	31 97       	sbiw	r30, 0x01	; 1
    7988:	5f 01       	movw	r10, r30
    798a:	a8 18       	sub	r10, r8
    798c:	b9 08       	sbc	r11, r9

bool sb_send_string(char* str)
{
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
    798e:	e1 2c       	mov	r14, r1
    7990:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH);
    7992:	85 01       	movw	r16, r10
    7994:	0e 19       	sub	r16, r14
    7996:	1f 09       	sbc	r17, r15
    7998:	09 32       	cpi	r16, 0x29	; 41
    799a:	11 05       	cpc	r17, r1
    799c:	10 f0       	brcs	.+4      	; 0x79a2 <sb_send_string+0x5a>
    799e:	09 e2       	ldi	r16, 0x29	; 41
    79a0:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(buf, &str[lengthSent], lengthToSend);
    79a2:	a8 01       	movw	r20, r16
    79a4:	b4 01       	movw	r22, r8
    79a6:	6e 0d       	add	r22, r14
    79a8:	7f 1d       	adc	r23, r15
    79aa:	ce 01       	movw	r24, r28
    79ac:	01 96       	adiw	r24, 0x01	; 1
    79ae:	0e 94 cd 4e 	call	0x9d9a	; 0x9d9a <strncpy>

		buf[lengthToSend] = '\0';
    79b2:	e1 e0       	ldi	r30, 0x01	; 1
    79b4:	f0 e0       	ldi	r31, 0x00	; 0
    79b6:	ec 0f       	add	r30, r28
    79b8:	fd 1f       	adc	r31, r29
    79ba:	e0 0f       	add	r30, r16
    79bc:	f1 1f       	adc	r31, r17
    79be:	10 82       	st	Z, r1
		err = serialbus_send_text(buf);
    79c0:	ce 01       	movw	r24, r28
    79c2:	01 96       	adiw	r24, 0x01	; 1
    79c4:	0e 94 43 3c 	call	0x7886	; 0x7886 <_Z19serialbus_send_textPc>
    79c8:	d8 2e       	mov	r13, r24
		
		if(!err)
    79ca:	81 11       	cpse	r24, r1
    79cc:	04 c0       	rjmp	.+8      	; 0x79d6 <sb_send_string+0x8e>
		{
			while(serialbusTxInProgress())
    79ce:	0e 94 ea 3b 	call	0x77d4	; 0x77d4 <serialbusTxInProgress>
    79d2:	81 11       	cpse	r24, r1
    79d4:	fc cf       	rjmp	.-8      	; 0x79ce <sb_send_string+0x86>
			{
				;
			}
		}

		lengthSent += lengthToSend;
    79d6:	e0 0e       	add	r14, r16
    79d8:	f1 1e       	adc	r15, r17
		done = err || (lengthSent >= length);
    79da:	d1 10       	cpse	r13, r1
    79dc:	05 c0       	rjmp	.+10     	; 0x79e8 <sb_send_string+0xa0>
    79de:	ea 14       	cp	r14, r10
    79e0:	fb 04       	cpc	r15, r11
    79e2:	20 f0       	brcs	.+8      	; 0x79ec <sb_send_string+0xa4>
    79e4:	81 e0       	ldi	r24, 0x01	; 1
    79e6:	03 c0       	rjmp	.+6      	; 0x79ee <sb_send_string+0xa6>
    79e8:	81 e0       	ldi	r24, 0x01	; 1
    79ea:	01 c0       	rjmp	.+2      	; 0x79ee <sb_send_string+0xa6>
    79ec:	80 e0       	ldi	r24, 0x00	; 0
	}while(!done);
    79ee:	88 23       	and	r24, r24
    79f0:	81 f2       	breq	.-96     	; 0x7992 <sb_send_string+0x4a>

	return( err);
    79f2:	8d 2d       	mov	r24, r13
    79f4:	03 c0       	rjmp	.+6      	; 0x79fc <sb_send_string+0xb4>
		return( true);
	}

	if(str == NULL)
	{
		return( true);
    79f6:	81 e0       	ldi	r24, 0x01	; 1
    79f8:	01 c0       	rjmp	.+2      	; 0x79fc <sb_send_string+0xb4>
	}

	if(!*str)
	{
		return(true);
    79fa:	81 e0       	ldi	r24, 0x01	; 1
		lengthSent += lengthToSend;
		done = err || (lengthSent >= length);
	}while(!done);

	return( err);
}
    79fc:	aa 96       	adiw	r28, 0x2a	; 42
    79fe:	cd bf       	out	0x3d, r28	; 61
    7a00:	de bf       	out	0x3e, r29	; 62
    7a02:	df 91       	pop	r29
    7a04:	cf 91       	pop	r28
    7a06:	1f 91       	pop	r17
    7a08:	0f 91       	pop	r16
    7a0a:	ff 90       	pop	r15
    7a0c:	ef 90       	pop	r14
    7a0e:	df 90       	pop	r13
    7a10:	bf 90       	pop	r11
    7a12:	af 90       	pop	r10
    7a14:	9f 90       	pop	r9
    7a16:	8f 90       	pop	r8
    7a18:	08 95       	ret

00007a1a <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    7a1a:	4f 92       	push	r4
    7a1c:	5f 92       	push	r5
    7a1e:	6f 92       	push	r6
    7a20:	7f 92       	push	r7
    7a22:	8f 92       	push	r8
    7a24:	9f 92       	push	r9
    7a26:	af 92       	push	r10
    7a28:	bf 92       	push	r11
    7a2a:	cf 92       	push	r12
    7a2c:	df 92       	push	r13
    7a2e:	ef 92       	push	r14
    7a30:	ff 92       	push	r15
    7a32:	0f 93       	push	r16
    7a34:	1f 93       	push	r17
    7a36:	cf 93       	push	r28
    7a38:	df 93       	push	r29
    7a3a:	8c 01       	movw	r16, r24
    7a3c:	eb 01       	movw	r28, r22
    7a3e:	fc 01       	movw	r30, r24
    7a40:	40 80       	ld	r4, Z
    7a42:	51 80       	ldd	r5, Z+1	; 0x01
    7a44:	62 80       	ldd	r6, Z+2	; 0x02
    7a46:	73 80       	ldd	r7, Z+3	; 0x03
    7a48:	88 80       	ld	r8, Y
    7a4a:	99 80       	ldd	r9, Y+1	; 0x01
    7a4c:	aa 80       	ldd	r10, Y+2	; 0x02
    7a4e:	bb 80       	ldd	r11, Y+3	; 0x03
    7a50:	41 14       	cp	r4, r1
    7a52:	51 04       	cpc	r5, r1
    7a54:	61 04       	cpc	r6, r1
    7a56:	71 04       	cpc	r7, r1
    7a58:	e1 f1       	breq	.+120    	; 0x7ad2 <_Z13reduce_by_gcdPmS_+0xb8>
    7a5a:	81 14       	cp	r8, r1
    7a5c:	91 04       	cpc	r9, r1
    7a5e:	a1 04       	cpc	r10, r1
    7a60:	b1 04       	cpc	r11, r1
    7a62:	b9 f1       	breq	.+110    	; 0x7ad2 <_Z13reduce_by_gcdPmS_+0xb8>
    7a64:	c3 01       	movw	r24, r6
    7a66:	b2 01       	movw	r22, r4
    7a68:	a5 01       	movw	r20, r10
    7a6a:	94 01       	movw	r18, r8
    7a6c:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7a70:	6b 01       	movw	r12, r22
    7a72:	7c 01       	movw	r14, r24
    7a74:	c1 14       	cp	r12, r1
    7a76:	d1 04       	cpc	r13, r1
    7a78:	e1 04       	cpc	r14, r1
    7a7a:	f1 04       	cpc	r15, r1
    7a7c:	69 f0       	breq	.+26     	; 0x7a98 <_Z13reduce_by_gcdPmS_+0x7e>
    7a7e:	c5 01       	movw	r24, r10
    7a80:	b4 01       	movw	r22, r8
    7a82:	a7 01       	movw	r20, r14
    7a84:	96 01       	movw	r18, r12
    7a86:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7a8a:	46 01       	movw	r8, r12
    7a8c:	57 01       	movw	r10, r14
    7a8e:	c6 2e       	mov	r12, r22
    7a90:	d7 2e       	mov	r13, r23
    7a92:	e8 2e       	mov	r14, r24
    7a94:	f9 2e       	mov	r15, r25
    7a96:	ee cf       	rjmp	.-36     	; 0x7a74 <_Z13reduce_by_gcdPmS_+0x5a>
    7a98:	f2 e0       	ldi	r31, 0x02	; 2
    7a9a:	8f 16       	cp	r8, r31
    7a9c:	91 04       	cpc	r9, r1
    7a9e:	a1 04       	cpc	r10, r1
    7aa0:	b1 04       	cpc	r11, r1
    7aa2:	b8 f0       	brcs	.+46     	; 0x7ad2 <_Z13reduce_by_gcdPmS_+0xb8>
    7aa4:	c3 01       	movw	r24, r6
    7aa6:	b2 01       	movw	r22, r4
    7aa8:	a5 01       	movw	r20, r10
    7aaa:	94 01       	movw	r18, r8
    7aac:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7ab0:	f8 01       	movw	r30, r16
    7ab2:	20 83       	st	Z, r18
    7ab4:	31 83       	std	Z+1, r19	; 0x01
    7ab6:	42 83       	std	Z+2, r20	; 0x02
    7ab8:	53 83       	std	Z+3, r21	; 0x03
    7aba:	68 81       	ld	r22, Y
    7abc:	79 81       	ldd	r23, Y+1	; 0x01
    7abe:	8a 81       	ldd	r24, Y+2	; 0x02
    7ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    7ac2:	a5 01       	movw	r20, r10
    7ac4:	94 01       	movw	r18, r8
    7ac6:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7aca:	28 83       	st	Y, r18
    7acc:	39 83       	std	Y+1, r19	; 0x01
    7ace:	4a 83       	std	Y+2, r20	; 0x02
    7ad0:	5b 83       	std	Y+3, r21	; 0x03
    7ad2:	df 91       	pop	r29
    7ad4:	cf 91       	pop	r28
    7ad6:	1f 91       	pop	r17
    7ad8:	0f 91       	pop	r16
    7ada:	ff 90       	pop	r15
    7adc:	ef 90       	pop	r14
    7ade:	df 90       	pop	r13
    7ae0:	cf 90       	pop	r12
    7ae2:	bf 90       	pop	r11
    7ae4:	af 90       	pop	r10
    7ae6:	9f 90       	pop	r9
    7ae8:	8f 90       	pop	r8
    7aea:	7f 90       	pop	r7
    7aec:	6f 90       	pop	r6
    7aee:	5f 90       	pop	r5
    7af0:	4f 90       	pop	r4
    7af2:	08 95       	ret

00007af4 <_Z8pll_calcmP13u_si5351_regs>:
    7af4:	4f 92       	push	r4
    7af6:	5f 92       	push	r5
    7af8:	6f 92       	push	r6
    7afa:	7f 92       	push	r7
    7afc:	8f 92       	push	r8
    7afe:	9f 92       	push	r9
    7b00:	af 92       	push	r10
    7b02:	bf 92       	push	r11
    7b04:	cf 92       	push	r12
    7b06:	df 92       	push	r13
    7b08:	ef 92       	push	r14
    7b0a:	ff 92       	push	r15
    7b0c:	0f 93       	push	r16
    7b0e:	1f 93       	push	r17
    7b10:	cf 93       	push	r28
    7b12:	df 93       	push	r29
    7b14:	cd b7       	in	r28, 0x3d	; 61
    7b16:	de b7       	in	r29, 0x3e	; 62
    7b18:	28 97       	sbiw	r28, 0x08	; 8
    7b1a:	cd bf       	out	0x3d, r28	; 61
    7b1c:	de bf       	out	0x3e, r29	; 62
    7b1e:	8a 01       	movw	r16, r20
    7b20:	80 90 28 40 	lds	r8, 0x4028	; 0x804028 <_ZL9xtal_freq>
    7b24:	90 90 29 40 	lds	r9, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    7b28:	a0 90 2a 40 	lds	r10, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    7b2c:	b0 90 2b 40 	lds	r11, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    7b30:	a5 01       	movw	r20, r10
    7b32:	94 01       	movw	r18, r8
    7b34:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7b38:	69 01       	movw	r12, r18
    7b3a:	7a 01       	movw	r14, r20
    7b3c:	69 83       	std	Y+1, r22	; 0x01
    7b3e:	7a 83       	std	Y+2, r23	; 0x02
    7b40:	8b 83       	std	Y+3, r24	; 0x03
    7b42:	9c 83       	std	Y+4, r25	; 0x04
    7b44:	8d 82       	std	Y+5, r8	; 0x05
    7b46:	9e 82       	std	Y+6, r9	; 0x06
    7b48:	af 82       	std	Y+7, r10	; 0x07
    7b4a:	b8 86       	std	Y+8, r11	; 0x08
    7b4c:	be 01       	movw	r22, r28
    7b4e:	6b 5f       	subi	r22, 0xFB	; 251
    7b50:	7f 4f       	sbci	r23, 0xFF	; 255
    7b52:	ce 01       	movw	r24, r28
    7b54:	01 96       	adiw	r24, 0x01	; 1
    7b56:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_Z13reduce_by_gcdPmS_>
    7b5a:	89 80       	ldd	r8, Y+1	; 0x01
    7b5c:	9a 80       	ldd	r9, Y+2	; 0x02
    7b5e:	ab 80       	ldd	r10, Y+3	; 0x03
    7b60:	bc 80       	ldd	r11, Y+4	; 0x04
    7b62:	88 0c       	add	r8, r8
    7b64:	99 1c       	adc	r9, r9
    7b66:	aa 1c       	adc	r10, r10
    7b68:	bb 1c       	adc	r11, r11
    7b6a:	88 0c       	add	r8, r8
    7b6c:	99 1c       	adc	r9, r9
    7b6e:	aa 1c       	adc	r10, r10
    7b70:	bb 1c       	adc	r11, r11
    7b72:	88 0c       	add	r8, r8
    7b74:	99 1c       	adc	r9, r9
    7b76:	aa 1c       	adc	r10, r10
    7b78:	bb 1c       	adc	r11, r11
    7b7a:	88 0c       	add	r8, r8
    7b7c:	99 1c       	adc	r9, r9
    7b7e:	aa 1c       	adc	r10, r10
    7b80:	bb 1c       	adc	r11, r11
    7b82:	88 0c       	add	r8, r8
    7b84:	99 1c       	adc	r9, r9
    7b86:	aa 1c       	adc	r10, r10
    7b88:	bb 1c       	adc	r11, r11
    7b8a:	88 0c       	add	r8, r8
    7b8c:	99 1c       	adc	r9, r9
    7b8e:	aa 1c       	adc	r10, r10
    7b90:	bb 1c       	adc	r11, r11
    7b92:	88 0c       	add	r8, r8
    7b94:	99 1c       	adc	r9, r9
    7b96:	aa 1c       	adc	r10, r10
    7b98:	bb 1c       	adc	r11, r11
    7b9a:	4d 80       	ldd	r4, Y+5	; 0x05
    7b9c:	5e 80       	ldd	r5, Y+6	; 0x06
    7b9e:	6f 80       	ldd	r6, Y+7	; 0x07
    7ba0:	78 84       	ldd	r7, Y+8	; 0x08
    7ba2:	c5 01       	movw	r24, r10
    7ba4:	b4 01       	movw	r22, r8
    7ba6:	a3 01       	movw	r20, r6
    7ba8:	92 01       	movw	r18, r4
    7baa:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7bae:	cc 0c       	add	r12, r12
    7bb0:	dd 1c       	adc	r13, r13
    7bb2:	ee 1c       	adc	r14, r14
    7bb4:	ff 1c       	adc	r15, r15
    7bb6:	cc 0c       	add	r12, r12
    7bb8:	dd 1c       	adc	r13, r13
    7bba:	ee 1c       	adc	r14, r14
    7bbc:	ff 1c       	adc	r15, r15
    7bbe:	cc 0c       	add	r12, r12
    7bc0:	dd 1c       	adc	r13, r13
    7bc2:	ee 1c       	adc	r14, r14
    7bc4:	ff 1c       	adc	r15, r15
    7bc6:	cc 0c       	add	r12, r12
    7bc8:	dd 1c       	adc	r13, r13
    7bca:	ee 1c       	adc	r14, r14
    7bcc:	ff 1c       	adc	r15, r15
    7bce:	cc 0c       	add	r12, r12
    7bd0:	dd 1c       	adc	r13, r13
    7bd2:	ee 1c       	adc	r14, r14
    7bd4:	ff 1c       	adc	r15, r15
    7bd6:	cc 0c       	add	r12, r12
    7bd8:	dd 1c       	adc	r13, r13
    7bda:	ee 1c       	adc	r14, r14
    7bdc:	ff 1c       	adc	r15, r15
    7bde:	cc 0c       	add	r12, r12
    7be0:	dd 1c       	adc	r13, r13
    7be2:	ee 1c       	adc	r14, r14
    7be4:	ff 1c       	adc	r15, r15
    7be6:	c2 0e       	add	r12, r18
    7be8:	d3 1e       	adc	r13, r19
    7bea:	e4 1e       	adc	r14, r20
    7bec:	f5 1e       	adc	r15, r21
    7bee:	82 e0       	ldi	r24, 0x02	; 2
    7bf0:	d8 1a       	sub	r13, r24
    7bf2:	e1 08       	sbc	r14, r1
    7bf4:	f1 08       	sbc	r15, r1
    7bf6:	f8 01       	movw	r30, r16
    7bf8:	c0 82       	st	Z, r12
    7bfa:	d1 82       	std	Z+1, r13	; 0x01
    7bfc:	e2 82       	std	Z+2, r14	; 0x02
    7bfe:	f3 82       	std	Z+3, r15	; 0x03
    7c00:	c3 01       	movw	r24, r6
    7c02:	b2 01       	movw	r22, r4
    7c04:	0e 94 8a 4c 	call	0x9914	; 0x9914 <__mulsi3>
    7c08:	86 1a       	sub	r8, r22
    7c0a:	97 0a       	sbc	r9, r23
    7c0c:	a8 0a       	sbc	r10, r24
    7c0e:	b9 0a       	sbc	r11, r25
    7c10:	84 82       	std	Z+4, r8	; 0x04
    7c12:	95 82       	std	Z+5, r9	; 0x05
    7c14:	a6 82       	std	Z+6, r10	; 0x06
    7c16:	b7 82       	std	Z+7, r11	; 0x07
    7c18:	40 86       	std	Z+8, r4	; 0x08
    7c1a:	51 86       	std	Z+9, r5	; 0x09
    7c1c:	62 86       	std	Z+10, r6	; 0x0a
    7c1e:	73 86       	std	Z+11, r7	; 0x0b
    7c20:	80 e0       	ldi	r24, 0x00	; 0
    7c22:	28 96       	adiw	r28, 0x08	; 8
    7c24:	cd bf       	out	0x3d, r28	; 61
    7c26:	de bf       	out	0x3e, r29	; 62
    7c28:	df 91       	pop	r29
    7c2a:	cf 91       	pop	r28
    7c2c:	1f 91       	pop	r17
    7c2e:	0f 91       	pop	r16
    7c30:	ff 90       	pop	r15
    7c32:	ef 90       	pop	r14
    7c34:	df 90       	pop	r13
    7c36:	cf 90       	pop	r12
    7c38:	bf 90       	pop	r11
    7c3a:	af 90       	pop	r10
    7c3c:	9f 90       	pop	r9
    7c3e:	8f 90       	pop	r8
    7c40:	7f 90       	pop	r7
    7c42:	6f 90       	pop	r6
    7c44:	5f 90       	pop	r5
    7c46:	4f 90       	pop	r4
    7c48:	08 95       	ret

00007c4a <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    7c4a:	2f 92       	push	r2
    7c4c:	3f 92       	push	r3
    7c4e:	4f 92       	push	r4
    7c50:	5f 92       	push	r5
    7c52:	6f 92       	push	r6
    7c54:	7f 92       	push	r7
    7c56:	8f 92       	push	r8
    7c58:	9f 92       	push	r9
    7c5a:	af 92       	push	r10
    7c5c:	bf 92       	push	r11
    7c5e:	cf 92       	push	r12
    7c60:	df 92       	push	r13
    7c62:	ef 92       	push	r14
    7c64:	ff 92       	push	r15
    7c66:	0f 93       	push	r16
    7c68:	1f 93       	push	r17
    7c6a:	cf 93       	push	r28
    7c6c:	df 93       	push	r29
    7c6e:	cd b7       	in	r28, 0x3d	; 61
    7c70:	de b7       	in	r29, 0x3e	; 62
    7c72:	25 97       	sbiw	r28, 0x05	; 5
    7c74:	cd bf       	out	0x3d, r28	; 61
    7c76:	de bf       	out	0x3e, r29	; 62
    7c78:	2b 01       	movw	r4, r22
    7c7a:	3c 01       	movw	r6, r24
    7c7c:	4a 83       	std	Y+2, r20	; 0x02
    7c7e:	5b 83       	std	Y+3, r21	; 0x03
    7c80:	18 01       	movw	r2, r16
    7c82:	81 e0       	ldi	r24, 0x01	; 1
    7c84:	f9 01       	movw	r30, r18
    7c86:	80 83       	st	Z, r24
    7c88:	f0 e8       	ldi	r31, 0x80	; 128
    7c8a:	4f 16       	cp	r4, r31
    7c8c:	f1 ed       	ldi	r31, 0xD1	; 209
    7c8e:	5f 06       	cpc	r5, r31
    7c90:	f0 ef       	ldi	r31, 0xF0	; 240
    7c92:	6f 06       	cpc	r6, r31
    7c94:	f8 e0       	ldi	r31, 0x08	; 8
    7c96:	7f 06       	cpc	r7, r31
    7c98:	d0 f0       	brcs	.+52     	; 0x7cce <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x84>
    7c9a:	c3 01       	movw	r24, r6
    7c9c:	b2 01       	movw	r22, r4
    7c9e:	66 0f       	add	r22, r22
    7ca0:	77 1f       	adc	r23, r23
    7ca2:	88 1f       	adc	r24, r24
    7ca4:	99 1f       	adc	r25, r25
    7ca6:	66 0f       	add	r22, r22
    7ca8:	77 1f       	adc	r23, r23
    7caa:	88 1f       	adc	r24, r24
    7cac:	99 1f       	adc	r25, r25
    7cae:	c1 2c       	mov	r12, r1
    7cb0:	d1 2c       	mov	r13, r1
    7cb2:	76 01       	movw	r14, r12
    7cb4:	68 94       	set
    7cb6:	c2 f8       	bld	r12, 2
    7cb8:	48 c0       	rjmp	.+144    	; 0x7d4a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7cba:	21 e0       	ldi	r18, 0x01	; 1
    7cbc:	2d 83       	std	Y+5, r18	; 0x05
    7cbe:	0d c0       	rjmp	.+26     	; 0x7cda <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7cc0:	69 01       	movw	r12, r18
    7cc2:	7a 01       	movw	r14, r20
    7cc4:	31 e0       	ldi	r19, 0x01	; 1
    7cc6:	39 83       	std	Y+1, r19	; 0x01
    7cc8:	81 e0       	ldi	r24, 0x01	; 1
    7cca:	8d 83       	std	Y+5, r24	; 0x05
    7ccc:	06 c0       	rjmp	.+12     	; 0x7cda <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7cce:	1c 82       	std	Y+4, r1	; 0x04
    7cd0:	19 82       	std	Y+1, r1	; 0x01
    7cd2:	1d 82       	std	Y+5, r1	; 0x05
    7cd4:	c1 2c       	mov	r12, r1
    7cd6:	d1 2c       	mov	r13, r1
    7cd8:	76 01       	movw	r14, r12
    7cda:	8d 80       	ldd	r8, Y+5	; 0x05
    7cdc:	81 10       	cpse	r8, r1
    7cde:	28 c0       	rjmp	.+80     	; 0x7d30 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xe6>
    7ce0:	9c 80       	ldd	r9, Y+4	; 0x04
    7ce2:	a9 2d       	mov	r26, r9
    7ce4:	b0 e0       	ldi	r27, 0x00	; 0
    7ce6:	a3 01       	movw	r20, r6
    7ce8:	92 01       	movw	r18, r4
    7cea:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <__muluhisi3>
    7cee:	00 e0       	ldi	r16, 0x00	; 0
    7cf0:	19 ee       	ldi	r17, 0xE9	; 233
    7cf2:	24 ea       	ldi	r18, 0xA4	; 164
    7cf4:	35 e3       	ldi	r19, 0x35	; 53
    7cf6:	48 01       	movw	r8, r16
    7cf8:	59 01       	movw	r10, r18
    7cfa:	86 1a       	sub	r8, r22
    7cfc:	97 0a       	sbc	r9, r23
    7cfe:	a8 0a       	sbc	r10, r24
    7d00:	b9 0a       	sbc	r11, r25
    7d02:	c5 01       	movw	r24, r10
    7d04:	b4 01       	movw	r22, r8
    7d06:	2c 81       	ldd	r18, Y+4	; 0x04
    7d08:	2e 5f       	subi	r18, 0xFE	; 254
    7d0a:	2c 83       	std	Y+4, r18	; 0x04
    7d0c:	81 14       	cp	r8, r1
    7d0e:	36 e4       	ldi	r19, 0x46	; 70
    7d10:	93 06       	cpc	r9, r19
    7d12:	33 ec       	ldi	r19, 0xC3	; 195
    7d14:	a3 06       	cpc	r10, r19
    7d16:	33 e2       	ldi	r19, 0x23	; 35
    7d18:	b3 06       	cpc	r11, r19
    7d1a:	78 f2       	brcs	.-98     	; 0x7cba <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x70>
    7d1c:	a3 01       	movw	r20, r6
    7d1e:	92 01       	movw	r18, r4
    7d20:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7d24:	24 30       	cpi	r18, 0x04	; 4
    7d26:	31 05       	cpc	r19, r1
    7d28:	41 05       	cpc	r20, r1
    7d2a:	51 05       	cpc	r21, r1
    7d2c:	48 f6       	brcc	.-110    	; 0x7cc0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x76>
    7d2e:	d5 cf       	rjmp	.-86     	; 0x7cda <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7d30:	89 80       	ldd	r8, Y+1	; 0x01
    7d32:	88 20       	and	r8, r8
    7d34:	39 f0       	breq	.+14     	; 0x7d44 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xfa>
    7d36:	a7 01       	movw	r20, r14
    7d38:	96 01       	movw	r18, r12
    7d3a:	c3 01       	movw	r24, r6
    7d3c:	b2 01       	movw	r22, r4
    7d3e:	0e 94 8a 4c 	call	0x9914	; 0x9914 <__mulsi3>
    7d42:	03 c0       	rjmp	.+6      	; 0x7d4a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7d44:	60 e0       	ldi	r22, 0x00	; 0
    7d46:	70 e0       	ldi	r23, 0x00	; 0
    7d48:	cb 01       	movw	r24, r22
    7d4a:	21 e0       	ldi	r18, 0x01	; 1
    7d4c:	34 e0       	ldi	r19, 0x04	; 4
    7d4e:	c3 16       	cp	r12, r19
    7d50:	d1 04       	cpc	r13, r1
    7d52:	e1 04       	cpc	r14, r1
    7d54:	f1 04       	cpc	r15, r1
    7d56:	09 f0       	breq	.+2      	; 0x7d5a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x110>
    7d58:	20 e0       	ldi	r18, 0x00	; 0
    7d5a:	f1 01       	movw	r30, r2
    7d5c:	20 83       	st	Z, r18
    7d5e:	cc 0c       	add	r12, r12
    7d60:	dd 1c       	adc	r13, r13
    7d62:	ee 1c       	adc	r14, r14
    7d64:	ff 1c       	adc	r15, r15
    7d66:	cc 0c       	add	r12, r12
    7d68:	dd 1c       	adc	r13, r13
    7d6a:	ee 1c       	adc	r14, r14
    7d6c:	ff 1c       	adc	r15, r15
    7d6e:	cc 0c       	add	r12, r12
    7d70:	dd 1c       	adc	r13, r13
    7d72:	ee 1c       	adc	r14, r14
    7d74:	ff 1c       	adc	r15, r15
    7d76:	cc 0c       	add	r12, r12
    7d78:	dd 1c       	adc	r13, r13
    7d7a:	ee 1c       	adc	r14, r14
    7d7c:	ff 1c       	adc	r15, r15
    7d7e:	cc 0c       	add	r12, r12
    7d80:	dd 1c       	adc	r13, r13
    7d82:	ee 1c       	adc	r14, r14
    7d84:	ff 1c       	adc	r15, r15
    7d86:	cc 0c       	add	r12, r12
    7d88:	dd 1c       	adc	r13, r13
    7d8a:	ee 1c       	adc	r14, r14
    7d8c:	ff 1c       	adc	r15, r15
    7d8e:	cc 0c       	add	r12, r12
    7d90:	dd 1c       	adc	r13, r13
    7d92:	ee 1c       	adc	r14, r14
    7d94:	ff 1c       	adc	r15, r15
    7d96:	f2 e0       	ldi	r31, 0x02	; 2
    7d98:	df 1a       	sub	r13, r31
    7d9a:	e1 08       	sbc	r14, r1
    7d9c:	f1 08       	sbc	r15, r1
    7d9e:	ea 81       	ldd	r30, Y+2	; 0x02
    7da0:	fb 81       	ldd	r31, Y+3	; 0x03
    7da2:	c0 82       	st	Z, r12
    7da4:	d1 82       	std	Z+1, r13	; 0x01
    7da6:	e2 82       	std	Z+2, r14	; 0x02
    7da8:	f3 82       	std	Z+3, r15	; 0x03
    7daa:	14 82       	std	Z+4, r1	; 0x04
    7dac:	15 82       	std	Z+5, r1	; 0x05
    7dae:	16 82       	std	Z+6, r1	; 0x06
    7db0:	17 82       	std	Z+7, r1	; 0x07
    7db2:	01 e0       	ldi	r16, 0x01	; 1
    7db4:	10 e0       	ldi	r17, 0x00	; 0
    7db6:	20 e0       	ldi	r18, 0x00	; 0
    7db8:	30 e0       	ldi	r19, 0x00	; 0
    7dba:	00 87       	std	Z+8, r16	; 0x08
    7dbc:	11 87       	std	Z+9, r17	; 0x09
    7dbe:	22 87       	std	Z+10, r18	; 0x0a
    7dc0:	33 87       	std	Z+11, r19	; 0x0b
    7dc2:	25 96       	adiw	r28, 0x05	; 5
    7dc4:	cd bf       	out	0x3d, r28	; 61
    7dc6:	de bf       	out	0x3e, r29	; 62
    7dc8:	df 91       	pop	r29
    7dca:	cf 91       	pop	r28
    7dcc:	1f 91       	pop	r17
    7dce:	0f 91       	pop	r16
    7dd0:	ff 90       	pop	r15
    7dd2:	ef 90       	pop	r14
    7dd4:	df 90       	pop	r13
    7dd6:	cf 90       	pop	r12
    7dd8:	bf 90       	pop	r11
    7dda:	af 90       	pop	r10
    7ddc:	9f 90       	pop	r9
    7dde:	8f 90       	pop	r8
    7de0:	7f 90       	pop	r7
    7de2:	6f 90       	pop	r6
    7de4:	5f 90       	pop	r5
    7de6:	4f 90       	pop	r4
    7de8:	3f 90       	pop	r3
    7dea:	2f 90       	pop	r2
    7dec:	08 95       	ret

00007dee <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
    7dee:	2f 92       	push	r2
    7df0:	3f 92       	push	r3
    7df2:	4f 92       	push	r4
    7df4:	5f 92       	push	r5
    7df6:	6f 92       	push	r6
    7df8:	7f 92       	push	r7
    7dfa:	8f 92       	push	r8
    7dfc:	9f 92       	push	r9
    7dfe:	af 92       	push	r10
    7e00:	bf 92       	push	r11
    7e02:	cf 92       	push	r12
    7e04:	df 92       	push	r13
    7e06:	ef 92       	push	r14
    7e08:	ff 92       	push	r15
    7e0a:	0f 93       	push	r16
    7e0c:	1f 93       	push	r17
    7e0e:	cf 93       	push	r28
    7e10:	df 93       	push	r29
    7e12:	cd b7       	in	r28, 0x3d	; 61
    7e14:	de b7       	in	r29, 0x3e	; 62
    7e16:	62 97       	sbiw	r28, 0x12	; 18
    7e18:	cd bf       	out	0x3d, r28	; 61
    7e1a:	de bf       	out	0x3e, r29	; 62
    7e1c:	4b 01       	movw	r8, r22
    7e1e:	5c 01       	movw	r10, r24
    7e20:	1a 01       	movw	r2, r20
    7e22:	29 8b       	std	Y+17, r18	; 0x11
    7e24:	3a 8b       	std	Y+18, r19	; 0x12
    7e26:	60 91 86 4a 	lds	r22, 0x4A86	; 0x804a86 <_ZL8freqVCOB>
    7e2a:	70 91 87 4a 	lds	r23, 0x4A87	; 0x804a87 <_ZL8freqVCOB+0x1>
    7e2e:	80 91 88 4a 	lds	r24, 0x4A88	; 0x804a88 <_ZL8freqVCOB+0x2>
    7e32:	90 91 89 4a 	lds	r25, 0x4A89	; 0x804a89 <_ZL8freqVCOB+0x3>
    7e36:	a5 01       	movw	r20, r10
    7e38:	94 01       	movw	r18, r8
    7e3a:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7e3e:	29 87       	std	Y+9, r18	; 0x09
    7e40:	3a 87       	std	Y+10, r19	; 0x0a
    7e42:	4b 87       	std	Y+11, r20	; 0x0b
    7e44:	5c 87       	std	Y+12, r21	; 0x0c
    7e46:	69 01       	movw	r12, r18
    7e48:	7a 01       	movw	r14, r20
    7e4a:	69 83       	std	Y+1, r22	; 0x01
    7e4c:	7a 83       	std	Y+2, r23	; 0x02
    7e4e:	8b 83       	std	Y+3, r24	; 0x03
    7e50:	9c 83       	std	Y+4, r25	; 0x04
    7e52:	8d 82       	std	Y+5, r8	; 0x05
    7e54:	9e 82       	std	Y+6, r9	; 0x06
    7e56:	af 82       	std	Y+7, r10	; 0x07
    7e58:	b8 86       	std	Y+8, r11	; 0x08
    7e5a:	be 01       	movw	r22, r28
    7e5c:	6b 5f       	subi	r22, 0xFB	; 251
    7e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    7e60:	ce 01       	movw	r24, r28
    7e62:	01 96       	adiw	r24, 0x01	; 1
    7e64:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_Z13reduce_by_gcdPmS_>
    7e68:	80 91 86 4a 	lds	r24, 0x4A86	; 0x804a86 <_ZL8freqVCOB>
    7e6c:	90 91 87 4a 	lds	r25, 0x4A87	; 0x804a87 <_ZL8freqVCOB+0x1>
    7e70:	a0 91 88 4a 	lds	r26, 0x4A88	; 0x804a88 <_ZL8freqVCOB+0x2>
    7e74:	b0 91 89 4a 	lds	r27, 0x4A89	; 0x804a89 <_ZL8freqVCOB+0x3>
    7e78:	8d 87       	std	Y+13, r24	; 0x0d
    7e7a:	9e 87       	std	Y+14, r25	; 0x0e
    7e7c:	af 87       	std	Y+15, r26	; 0x0f
    7e7e:	b8 8b       	std	Y+16, r27	; 0x10
    7e80:	4d 80       	ldd	r4, Y+5	; 0x05
    7e82:	5e 80       	ldd	r5, Y+6	; 0x06
    7e84:	6f 80       	ldd	r6, Y+7	; 0x07
    7e86:	78 84       	ldd	r7, Y+8	; 0x08
    7e88:	29 85       	ldd	r18, Y+9	; 0x09
    7e8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    7e8c:	4b 85       	ldd	r20, Y+11	; 0x0b
    7e8e:	5c 85       	ldd	r21, Y+12	; 0x0c
    7e90:	c3 01       	movw	r24, r6
    7e92:	b2 01       	movw	r22, r4
    7e94:	0e 94 8a 4c 	call	0x9914	; 0x9914 <__mulsi3>
    7e98:	89 80       	ldd	r8, Y+1	; 0x01
    7e9a:	9a 80       	ldd	r9, Y+2	; 0x02
    7e9c:	ab 80       	ldd	r10, Y+3	; 0x03
    7e9e:	bc 80       	ldd	r11, Y+4	; 0x04
    7ea0:	9b 01       	movw	r18, r22
    7ea2:	ac 01       	movw	r20, r24
    7ea4:	28 0d       	add	r18, r8
    7ea6:	39 1d       	adc	r19, r9
    7ea8:	4a 1d       	adc	r20, r10
    7eaa:	5b 1d       	adc	r21, r11
    7eac:	6d 85       	ldd	r22, Y+13	; 0x0d
    7eae:	7e 85       	ldd	r23, Y+14	; 0x0e
    7eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    7eb2:	98 89       	ldd	r25, Y+16	; 0x10
    7eb4:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7eb8:	ca 01       	movw	r24, r20
    7eba:	b9 01       	movw	r22, r18
    7ebc:	a3 01       	movw	r20, r6
    7ebe:	92 01       	movw	r18, r4
    7ec0:	0e 94 8a 4c 	call	0x9914	; 0x9914 <__mulsi3>
    7ec4:	6d 87       	std	Y+13, r22	; 0x0d
    7ec6:	7e 87       	std	Y+14, r23	; 0x0e
    7ec8:	8f 87       	std	Y+15, r24	; 0x0f
    7eca:	98 8b       	std	Y+16, r25	; 0x10
    7ecc:	89 28       	or	r8, r9
    7ece:	8a 28       	or	r8, r10
    7ed0:	8b 28       	or	r8, r11
    7ed2:	29 f4       	brne	.+10     	; 0x7ede <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf0>
    7ed4:	99 85       	ldd	r25, Y+9	; 0x09
    7ed6:	90 ff       	sbrs	r25, 0
    7ed8:	04 c0       	rjmp	.+8      	; 0x7ee2 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf4>
    7eda:	80 e0       	ldi	r24, 0x00	; 0
    7edc:	03 c0       	rjmp	.+6      	; 0x7ee4 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7ede:	80 e0       	ldi	r24, 0x00	; 0
    7ee0:	01 c0       	rjmp	.+2      	; 0x7ee4 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7ee2:	81 e0       	ldi	r24, 0x01	; 1
    7ee4:	a9 89       	ldd	r26, Y+17	; 0x11
    7ee6:	ba 89       	ldd	r27, Y+18	; 0x12
    7ee8:	8c 93       	st	X, r24
    7eea:	b4 e0       	ldi	r27, 0x04	; 4
    7eec:	cb 16       	cp	r12, r27
    7eee:	d1 04       	cpc	r13, r1
    7ef0:	e1 04       	cpc	r14, r1
    7ef2:	f1 04       	cpc	r15, r1
    7ef4:	09 f0       	breq	.+2      	; 0x7ef8 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x10a>
    7ef6:	80 e0       	ldi	r24, 0x00	; 0
    7ef8:	f8 01       	movw	r30, r16
    7efa:	80 83       	st	Z, r24
    7efc:	88 23       	and	r24, r24
    7efe:	a1 f0       	breq	.+40     	; 0x7f28 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x13a>
    7f00:	d1 01       	movw	r26, r2
    7f02:	1d 92       	st	X+, r1
    7f04:	1d 92       	st	X+, r1
    7f06:	1d 92       	st	X+, r1
    7f08:	1c 92       	st	X, r1
    7f0a:	13 97       	sbiw	r26, 0x03	; 3
    7f0c:	f1 01       	movw	r30, r2
    7f0e:	14 82       	std	Z+4, r1	; 0x04
    7f10:	15 82       	std	Z+5, r1	; 0x05
    7f12:	16 82       	std	Z+6, r1	; 0x06
    7f14:	17 82       	std	Z+7, r1	; 0x07
    7f16:	81 e0       	ldi	r24, 0x01	; 1
    7f18:	90 e0       	ldi	r25, 0x00	; 0
    7f1a:	a0 e0       	ldi	r26, 0x00	; 0
    7f1c:	b0 e0       	ldi	r27, 0x00	; 0
    7f1e:	80 87       	std	Z+8, r24	; 0x08
    7f20:	91 87       	std	Z+9, r25	; 0x09
    7f22:	a2 87       	std	Z+10, r26	; 0x0a
    7f24:	b3 87       	std	Z+11, r27	; 0x0b
    7f26:	69 c0       	rjmp	.+210    	; 0x7ffa <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x20c>
    7f28:	89 80       	ldd	r8, Y+1	; 0x01
    7f2a:	9a 80       	ldd	r9, Y+2	; 0x02
    7f2c:	ab 80       	ldd	r10, Y+3	; 0x03
    7f2e:	bc 80       	ldd	r11, Y+4	; 0x04
    7f30:	88 0c       	add	r8, r8
    7f32:	99 1c       	adc	r9, r9
    7f34:	aa 1c       	adc	r10, r10
    7f36:	bb 1c       	adc	r11, r11
    7f38:	88 0c       	add	r8, r8
    7f3a:	99 1c       	adc	r9, r9
    7f3c:	aa 1c       	adc	r10, r10
    7f3e:	bb 1c       	adc	r11, r11
    7f40:	88 0c       	add	r8, r8
    7f42:	99 1c       	adc	r9, r9
    7f44:	aa 1c       	adc	r10, r10
    7f46:	bb 1c       	adc	r11, r11
    7f48:	88 0c       	add	r8, r8
    7f4a:	99 1c       	adc	r9, r9
    7f4c:	aa 1c       	adc	r10, r10
    7f4e:	bb 1c       	adc	r11, r11
    7f50:	88 0c       	add	r8, r8
    7f52:	99 1c       	adc	r9, r9
    7f54:	aa 1c       	adc	r10, r10
    7f56:	bb 1c       	adc	r11, r11
    7f58:	88 0c       	add	r8, r8
    7f5a:	99 1c       	adc	r9, r9
    7f5c:	aa 1c       	adc	r10, r10
    7f5e:	bb 1c       	adc	r11, r11
    7f60:	88 0c       	add	r8, r8
    7f62:	99 1c       	adc	r9, r9
    7f64:	aa 1c       	adc	r10, r10
    7f66:	bb 1c       	adc	r11, r11
    7f68:	4d 80       	ldd	r4, Y+5	; 0x05
    7f6a:	5e 80       	ldd	r5, Y+6	; 0x06
    7f6c:	6f 80       	ldd	r6, Y+7	; 0x07
    7f6e:	78 84       	ldd	r7, Y+8	; 0x08
    7f70:	c5 01       	movw	r24, r10
    7f72:	b4 01       	movw	r22, r8
    7f74:	a3 01       	movw	r20, r6
    7f76:	92 01       	movw	r18, r4
    7f78:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    7f7c:	c9 84       	ldd	r12, Y+9	; 0x09
    7f7e:	da 84       	ldd	r13, Y+10	; 0x0a
    7f80:	eb 84       	ldd	r14, Y+11	; 0x0b
    7f82:	fc 84       	ldd	r15, Y+12	; 0x0c
    7f84:	cc 0c       	add	r12, r12
    7f86:	dd 1c       	adc	r13, r13
    7f88:	ee 1c       	adc	r14, r14
    7f8a:	ff 1c       	adc	r15, r15
    7f8c:	cc 0c       	add	r12, r12
    7f8e:	dd 1c       	adc	r13, r13
    7f90:	ee 1c       	adc	r14, r14
    7f92:	ff 1c       	adc	r15, r15
    7f94:	cc 0c       	add	r12, r12
    7f96:	dd 1c       	adc	r13, r13
    7f98:	ee 1c       	adc	r14, r14
    7f9a:	ff 1c       	adc	r15, r15
    7f9c:	cc 0c       	add	r12, r12
    7f9e:	dd 1c       	adc	r13, r13
    7fa0:	ee 1c       	adc	r14, r14
    7fa2:	ff 1c       	adc	r15, r15
    7fa4:	cc 0c       	add	r12, r12
    7fa6:	dd 1c       	adc	r13, r13
    7fa8:	ee 1c       	adc	r14, r14
    7faa:	ff 1c       	adc	r15, r15
    7fac:	cc 0c       	add	r12, r12
    7fae:	dd 1c       	adc	r13, r13
    7fb0:	ee 1c       	adc	r14, r14
    7fb2:	ff 1c       	adc	r15, r15
    7fb4:	cc 0c       	add	r12, r12
    7fb6:	dd 1c       	adc	r13, r13
    7fb8:	ee 1c       	adc	r14, r14
    7fba:	ff 1c       	adc	r15, r15
    7fbc:	c2 0e       	add	r12, r18
    7fbe:	d3 1e       	adc	r13, r19
    7fc0:	e4 1e       	adc	r14, r20
    7fc2:	f5 1e       	adc	r15, r21
    7fc4:	f2 e0       	ldi	r31, 0x02	; 2
    7fc6:	df 1a       	sub	r13, r31
    7fc8:	e1 08       	sbc	r14, r1
    7fca:	f1 08       	sbc	r15, r1
    7fcc:	d1 01       	movw	r26, r2
    7fce:	cd 92       	st	X+, r12
    7fd0:	dd 92       	st	X+, r13
    7fd2:	ed 92       	st	X+, r14
    7fd4:	fc 92       	st	X, r15
    7fd6:	13 97       	sbiw	r26, 0x03	; 3
    7fd8:	c3 01       	movw	r24, r6
    7fda:	b2 01       	movw	r22, r4
    7fdc:	0e 94 8a 4c 	call	0x9914	; 0x9914 <__mulsi3>
    7fe0:	86 1a       	sub	r8, r22
    7fe2:	97 0a       	sbc	r9, r23
    7fe4:	a8 0a       	sbc	r10, r24
    7fe6:	b9 0a       	sbc	r11, r25
    7fe8:	f1 01       	movw	r30, r2
    7fea:	84 82       	std	Z+4, r8	; 0x04
    7fec:	95 82       	std	Z+5, r9	; 0x05
    7fee:	a6 82       	std	Z+6, r10	; 0x06
    7ff0:	b7 82       	std	Z+7, r11	; 0x07
    7ff2:	40 86       	std	Z+8, r4	; 0x08
    7ff4:	51 86       	std	Z+9, r5	; 0x09
    7ff6:	62 86       	std	Z+10, r6	; 0x0a
    7ff8:	73 86       	std	Z+11, r7	; 0x0b
    7ffa:	6d 85       	ldd	r22, Y+13	; 0x0d
    7ffc:	7e 85       	ldd	r23, Y+14	; 0x0e
    7ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    8000:	98 89       	ldd	r25, Y+16	; 0x10
    8002:	62 96       	adiw	r28, 0x12	; 18
    8004:	cd bf       	out	0x3d, r28	; 61
    8006:	de bf       	out	0x3e, r29	; 62
    8008:	df 91       	pop	r29
    800a:	cf 91       	pop	r28
    800c:	1f 91       	pop	r17
    800e:	0f 91       	pop	r16
    8010:	ff 90       	pop	r15
    8012:	ef 90       	pop	r14
    8014:	df 90       	pop	r13
    8016:	cf 90       	pop	r12
    8018:	bf 90       	pop	r11
    801a:	af 90       	pop	r10
    801c:	9f 90       	pop	r9
    801e:	8f 90       	pop	r8
    8020:	7f 90       	pop	r7
    8022:	6f 90       	pop	r6
    8024:	5f 90       	pop	r5
    8026:	4f 90       	pop	r4
    8028:	3f 90       	pop	r3
    802a:	2f 90       	pop	r2
    802c:	08 95       	ret

0000802e <_Z17si5351_write_bulkhPhh>:
    802e:	ff 92       	push	r15
    8030:	0f 93       	push	r16
    8032:	1f 93       	push	r17
    8034:	cf 93       	push	r28
    8036:	df 93       	push	r29
    8038:	f8 2e       	mov	r15, r24
    803a:	8b 01       	movw	r16, r22
    803c:	d4 2f       	mov	r29, r20
    803e:	8a e0       	ldi	r24, 0x0A	; 10
    8040:	cf ef       	ldi	r28, 0xFF	; 255
    8042:	c8 0f       	add	r28, r24
    8044:	88 23       	and	r24, r24
    8046:	71 f0       	breq	.+28     	; 0x8064 <_Z17si5351_write_bulkhPhh+0x36>
    8048:	2d 2f       	mov	r18, r29
    804a:	a8 01       	movw	r20, r16
    804c:	6f 2d       	mov	r22, r15
    804e:	80 ec       	ldi	r24, 0xC0	; 192
    8050:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <I2C_1_SendData>
    8054:	21 e0       	ldi	r18, 0x01	; 1
    8056:	d8 13       	cpse	r29, r24
    8058:	01 c0       	rjmp	.+2      	; 0x805c <_Z17si5351_write_bulkhPhh+0x2e>
    805a:	20 e0       	ldi	r18, 0x00	; 0
    805c:	d8 17       	cp	r29, r24
    805e:	21 f0       	breq	.+8      	; 0x8068 <_Z17si5351_write_bulkhPhh+0x3a>
    8060:	91 e0       	ldi	r25, 0x01	; 1
    8062:	03 c0       	rjmp	.+6      	; 0x806a <_Z17si5351_write_bulkhPhh+0x3c>
    8064:	90 e0       	ldi	r25, 0x00	; 0
    8066:	01 c0       	rjmp	.+2      	; 0x806a <_Z17si5351_write_bulkhPhh+0x3c>
    8068:	90 e0       	ldi	r25, 0x00	; 0
    806a:	8c 2f       	mov	r24, r28
    806c:	91 11       	cpse	r25, r1
    806e:	e8 cf       	rjmp	.-48     	; 0x8040 <_Z17si5351_write_bulkhPhh+0x12>
    8070:	82 2f       	mov	r24, r18
    8072:	df 91       	pop	r29
    8074:	cf 91       	pop	r28
    8076:	1f 91       	pop	r17
    8078:	0f 91       	pop	r16
    807a:	ff 90       	pop	r15
    807c:	08 95       	ret

0000807e <_Z7set_pllm10si5351_pll>:
    807e:	1f 93       	push	r17
    8080:	cf 93       	push	r28
    8082:	df 93       	push	r29
    8084:	cd b7       	in	r28, 0x3d	; 61
    8086:	de b7       	in	r29, 0x3e	; 62
    8088:	66 97       	sbiw	r28, 0x16	; 22
    808a:	cd bf       	out	0x3d, r28	; 61
    808c:	de bf       	out	0x3e, r29	; 62
    808e:	14 2f       	mov	r17, r20
    8090:	ae 01       	movw	r20, r28
    8092:	4f 5f       	subi	r20, 0xFF	; 255
    8094:	5f 4f       	sbci	r21, 0xFF	; 255
    8096:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <_Z8pll_calcmP13u_si5351_regs>
    809a:	81 11       	cpse	r24, r1
    809c:	28 c0       	rjmp	.+80     	; 0x80ee <_Z7set_pllm10si5351_pll+0x70>
    809e:	8a 85       	ldd	r24, Y+10	; 0x0a
    80a0:	8d 87       	std	Y+13, r24	; 0x0d
    80a2:	89 85       	ldd	r24, Y+9	; 0x09
    80a4:	8e 87       	std	Y+14, r24	; 0x0e
    80a6:	8b 81       	ldd	r24, Y+3	; 0x03
    80a8:	83 70       	andi	r24, 0x03	; 3
    80aa:	8f 87       	std	Y+15, r24	; 0x0f
    80ac:	8a 81       	ldd	r24, Y+2	; 0x02
    80ae:	88 8b       	std	Y+16, r24	; 0x10
    80b0:	89 81       	ldd	r24, Y+1	; 0x01
    80b2:	89 8b       	std	Y+17, r24	; 0x11
    80b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    80b6:	8f 81       	ldd	r24, Y+7	; 0x07
    80b8:	8f 70       	andi	r24, 0x0F	; 15
    80ba:	20 e1       	ldi	r18, 0x10	; 16
    80bc:	92 9f       	mul	r25, r18
    80be:	80 0d       	add	r24, r0
    80c0:	11 24       	eor	r1, r1
    80c2:	8a 8b       	std	Y+18, r24	; 0x12
    80c4:	8e 81       	ldd	r24, Y+6	; 0x06
    80c6:	8b 8b       	std	Y+19, r24	; 0x13
    80c8:	8d 81       	ldd	r24, Y+5	; 0x05
    80ca:	8c 8b       	std	Y+20, r24	; 0x14
    80cc:	11 30       	cpi	r17, 0x01	; 1
    80ce:	41 f4       	brne	.+16     	; 0x80e0 <_Z7set_pllm10si5351_pll+0x62>
    80d0:	48 e0       	ldi	r20, 0x08	; 8
    80d2:	be 01       	movw	r22, r28
    80d4:	63 5f       	subi	r22, 0xF3	; 243
    80d6:	7f 4f       	sbci	r23, 0xFF	; 255
    80d8:	8a e1       	ldi	r24, 0x1A	; 26
    80da:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    80de:	07 c0       	rjmp	.+14     	; 0x80ee <_Z7set_pllm10si5351_pll+0x70>
    80e0:	48 e0       	ldi	r20, 0x08	; 8
    80e2:	be 01       	movw	r22, r28
    80e4:	63 5f       	subi	r22, 0xF3	; 243
    80e6:	7f 4f       	sbci	r23, 0xFF	; 255
    80e8:	82 e2       	ldi	r24, 0x22	; 34
    80ea:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    80ee:	66 96       	adiw	r28, 0x16	; 22
    80f0:	cd bf       	out	0x3d, r28	; 61
    80f2:	de bf       	out	0x3e, r29	; 62
    80f4:	df 91       	pop	r29
    80f6:	cf 91       	pop	r28
    80f8:	1f 91       	pop	r17
    80fa:	08 95       	ret

000080fc <_Z16si5351_read_bulkhPhh>:
		while(tries-- && (fail = I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
		return(fail);
	}

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    80fc:	ff 92       	push	r15
    80fe:	0f 93       	push	r16
    8100:	1f 93       	push	r17
    8102:	cf 93       	push	r28
    8104:	df 93       	push	r29
    8106:	f8 2e       	mov	r15, r24
    8108:	8b 01       	movw	r16, r22
    810a:	d4 2f       	mov	r29, r20
		uint8_t tries = 10;
    810c:	8a e0       	ldi	r24, 0x0A	; 10
		bool fail;
		while(tries-- && (fail = I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    810e:	cf ef       	ldi	r28, 0xFF	; 255
    8110:	c8 0f       	add	r28, r24
    8112:	88 23       	and	r24, r24
    8114:	71 f0       	breq	.+28     	; 0x8132 <_Z16si5351_read_bulkhPhh+0x36>
    8116:	2d 2f       	mov	r18, r29
    8118:	a8 01       	movw	r20, r16
    811a:	6f 2d       	mov	r22, r15
    811c:	80 ec       	ldi	r24, 0xC0	; 192
    811e:	0e 94 20 36 	call	0x6c40	; 0x6c40 <I2C_1_GetData>
    8122:	21 e0       	ldi	r18, 0x01	; 1
    8124:	d8 13       	cpse	r29, r24
    8126:	01 c0       	rjmp	.+2      	; 0x812a <_Z16si5351_read_bulkhPhh+0x2e>
    8128:	20 e0       	ldi	r18, 0x00	; 0
    812a:	d8 17       	cp	r29, r24
    812c:	21 f0       	breq	.+8      	; 0x8136 <_Z16si5351_read_bulkhPhh+0x3a>
    812e:	91 e0       	ldi	r25, 0x01	; 1
    8130:	03 c0       	rjmp	.+6      	; 0x8138 <_Z16si5351_read_bulkhPhh+0x3c>
    8132:	90 e0       	ldi	r25, 0x00	; 0
    8134:	01 c0       	rjmp	.+2      	; 0x8138 <_Z16si5351_read_bulkhPhh+0x3c>
    8136:	90 e0       	ldi	r25, 0x00	; 0
    8138:	8c 2f       	mov	r24, r28
    813a:	91 11       	cpse	r25, r1
    813c:	e8 cf       	rjmp	.-48     	; 0x810e <_Z16si5351_read_bulkhPhh+0x12>
		return(fail);
	}
    813e:	82 2f       	mov	r24, r18
    8140:	df 91       	pop	r29
    8142:	cf 91       	pop	r28
    8144:	1f 91       	pop	r17
    8146:	0f 91       	pop	r16
    8148:	ff 90       	pop	r15
    814a:	08 95       	ret

0000814c <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	bool si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    814c:	cf 92       	push	r12
    814e:	df 92       	push	r13
    8150:	ef 92       	push	r14
    8152:	ff 92       	push	r15
    8154:	1f 93       	push	r17
    8156:	cf 93       	push	r28
    8158:	df 93       	push	r29
    815a:	00 d0       	rcall	.+0      	; 0x815c <si5351_init+0x10>
    815c:	cd b7       	in	r28, 0x3d	; 61
    815e:	de b7       	in	r29, 0x3e	; 62
    8160:	18 2f       	mov	r17, r24
    8162:	6a 01       	movw	r12, r20
    8164:	7b 01       	movw	r14, r22
		static bool err = false;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    8166:	0e 94 04 36 	call	0x6c08	; 0x6c08 <I2C_1_Init>
			uint8_t result_val = 0x00;
			bool result = false;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    816a:	10 92 86 4a 	sts	0x4A86, r1	; 0x804a86 <_ZL8freqVCOB>
    816e:	10 92 87 4a 	sts	0x4A87, r1	; 0x804a87 <_ZL8freqVCOB+0x1>
    8172:	10 92 88 4a 	sts	0x4A88, r1	; 0x804a88 <_ZL8freqVCOB+0x2>
    8176:	10 92 89 4a 	sts	0x4A89, r1	; 0x804a89 <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    817a:	80 e4       	ldi	r24, 0x40	; 64
    817c:	98 e7       	ldi	r25, 0x78	; 120
    817e:	ad e7       	ldi	r26, 0x7D	; 125
    8180:	b1 e0       	ldi	r27, 0x01	; 1
    8182:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    8186:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    818a:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    818e:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    8192:	10 92 85 4a 	sts	0x4A85, r1	; 0x804a85 <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    8196:	8f ef       	ldi	r24, 0xFF	; 255
    8198:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    819a:	41 e0       	ldi	r20, 0x01	; 1
    819c:	be 01       	movw	r22, r28
    819e:	6f 5f       	subi	r22, 0xFF	; 255
    81a0:	7f 4f       	sbci	r23, 0xFF	; 255
    81a2:	83 e0       	ldi	r24, 0x03	; 3
    81a4:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    81a8:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>
		
		if(err) return err;
    81ac:	81 11       	cpse	r24, r1
    81ae:	76 c0       	rjmp	.+236    	; 0x829c <si5351_init+0x150>
		/* Power down clocks */
		data[0] = 0xCC;
    81b0:	8c ec       	ldi	r24, 0xCC	; 204
    81b2:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    81b4:	41 e0       	ldi	r20, 0x01	; 1
    81b6:	be 01       	movw	r22, r28
    81b8:	6f 5f       	subi	r22, 0xFF	; 255
    81ba:	7f 4f       	sbci	r23, 0xFF	; 255
    81bc:	80 e1       	ldi	r24, 0x10	; 16
    81be:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    81c2:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    81c6:	89 2b       	or	r24, r25
    81c8:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x11, data, 1);
    81cc:	41 e0       	ldi	r20, 0x01	; 1
    81ce:	be 01       	movw	r22, r28
    81d0:	6f 5f       	subi	r22, 0xFF	; 255
    81d2:	7f 4f       	sbci	r23, 0xFF	; 255
    81d4:	81 e1       	ldi	r24, 0x11	; 17
    81d6:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    81da:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    81de:	89 2b       	or	r24, r25
    81e0:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x12, data, 1);
    81e4:	41 e0       	ldi	r20, 0x01	; 1
    81e6:	be 01       	movw	r22, r28
    81e8:	6f 5f       	subi	r22, 0xFF	; 255
    81ea:	7f 4f       	sbci	r23, 0xFF	; 255
    81ec:	82 e1       	ldi	r24, 0x12	; 18
    81ee:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    81f2:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    81f6:	89 2b       	or	r24, r25
    81f8:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    81fc:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    81fe:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    8200:	41 e0       	ldi	r20, 0x01	; 1
    8202:	be 01       	movw	r22, r28
    8204:	6f 5f       	subi	r22, 0xFF	; 255
    8206:	7f 4f       	sbci	r23, 0xFF	; 255
    8208:	87 eb       	ldi	r24, 0xB7	; 183
    820a:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    820e:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    8212:	89 2b       	or	r24, r25
    8214:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>

		if(!ref_osc_freq)
    8218:	c1 14       	cp	r12, r1
    821a:	d1 04       	cpc	r13, r1
    821c:	e1 04       	cpc	r14, r1
    821e:	f1 04       	cpc	r15, r1
    8220:	51 f4       	brne	.+20     	; 0x8236 <si5351_init+0xea>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    8222:	0f 2e       	mov	r0, r31
    8224:	f0 e4       	ldi	r31, 0x40	; 64
    8226:	cf 2e       	mov	r12, r31
    8228:	f8 e7       	ldi	r31, 0x78	; 120
    822a:	df 2e       	mov	r13, r31
    822c:	fd e7       	ldi	r31, 0x7D	; 125
    822e:	ef 2e       	mov	r14, r31
    8230:	ff 24       	eor	r15, r15
    8232:	f3 94       	inc	r15
    8234:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    8236:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    823a:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    823e:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    8242:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    8246:	c8 16       	cp	r12, r24
    8248:	d9 06       	cpc	r13, r25
    824a:	ea 06       	cpc	r14, r26
    824c:	fb 06       	cpc	r15, r27
    824e:	01 f1       	breq	.+64     	; 0x8290 <si5351_init+0x144>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    8250:	41 e0       	ldi	r20, 0x01	; 1
    8252:	be 01       	movw	r22, r28
    8254:	6f 5f       	subi	r22, 0xFF	; 255
    8256:	7f 4f       	sbci	r23, 0xFF	; 255
    8258:	8f e0       	ldi	r24, 0x0F	; 15
    825a:	0e 94 7e 40 	call	0x80fc	; 0x80fc <_Z16si5351_read_bulkhPhh>
    825e:	81 11       	cpse	r24, r1
    8260:	1d c0       	rjmp	.+58     	; 0x829c <si5351_init+0x150>
			{
				return true;
			}
			
			reg_val = data[0];
    8262:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    8264:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    8266:	c0 92 28 40 	sts	0x4028, r12	; 0x804028 <_ZL9xtal_freq>
    826a:	d0 92 29 40 	sts	0x4029, r13	; 0x804029 <_ZL9xtal_freq+0x1>
    826e:	e0 92 2a 40 	sts	0x402A, r14	; 0x80402a <_ZL9xtal_freq+0x2>
    8272:	f0 92 2b 40 	sts	0x402B, r15	; 0x80402b <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    8276:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    8278:	41 e0       	ldi	r20, 0x01	; 1
    827a:	be 01       	movw	r22, r28
    827c:	6f 5f       	subi	r22, 0xFF	; 255
    827e:	7f 4f       	sbci	r23, 0xFF	; 255
    8280:	8f e0       	ldi	r24, 0x0F	; 15
    8282:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    8286:	90 91 77 4a 	lds	r25, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    828a:	89 2b       	or	r24, r25
    828c:	80 93 77 4a 	sts	0x4A77, r24	; 0x804a77 <_ZZ11si5351_initE3err>
		}
		
		g_si5351_initialized = !err;
    8290:	80 91 77 4a 	lds	r24, 0x4A77	; 0x804a77 <_ZZ11si5351_initE3err>
    8294:	91 e0       	ldi	r25, 0x01	; 1
    8296:	98 27       	eor	r25, r24
    8298:	90 93 78 4a 	sts	0x4A78, r25	; 0x804a78 <g_si5351_initialized>

		return err;
	}
    829c:	0f 90       	pop	r0
    829e:	0f 90       	pop	r0
    82a0:	df 91       	pop	r29
    82a2:	cf 91       	pop	r28
    82a4:	1f 91       	pop	r17
    82a6:	ff 90       	pop	r15
    82a8:	ef 90       	pop	r14
    82aa:	df 90       	pop	r13
    82ac:	cf 90       	pop	r12
    82ae:	08 95       	ret

000082b0 <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, bool enable)
	{
    82b0:	0f 93       	push	r16
    82b2:	1f 93       	push	r17
    82b4:	cf 93       	push	r28
    82b6:	df 93       	push	r29
    82b8:	00 d0       	rcall	.+0      	; 0x82ba <si5351_clock_enable+0xa>
    82ba:	cd b7       	in	r28, 0x3d	; 61
    82bc:	de b7       	in	r29, 0x3e	; 62
    82be:	18 2f       	mov	r17, r24
    82c0:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    82c2:	41 e0       	ldi	r20, 0x01	; 1
    82c4:	be 01       	movw	r22, r28
    82c6:	6f 5f       	subi	r22, 0xFF	; 255
    82c8:	7f 4f       	sbci	r23, 0xFF	; 255
    82ca:	83 e0       	ldi	r24, 0x03	; 3
    82cc:	0e 94 7e 40 	call	0x80fc	; 0x80fc <_Z16si5351_read_bulkhPhh>
    82d0:	81 11       	cpse	r24, r1
    82d2:	23 c0       	rjmp	.+70     	; 0x831a <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    82d4:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    82d6:	00 23       	and	r16, r16
    82d8:	59 f0       	breq	.+22     	; 0x82f0 <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    82da:	21 e0       	ldi	r18, 0x01	; 1
    82dc:	30 e0       	ldi	r19, 0x00	; 0
    82de:	02 c0       	rjmp	.+4      	; 0x82e4 <si5351_clock_enable+0x34>
    82e0:	22 0f       	add	r18, r18
    82e2:	33 1f       	adc	r19, r19
    82e4:	1a 95       	dec	r17
    82e6:	e2 f7       	brpl	.-8      	; 0x82e0 <si5351_clock_enable+0x30>
    82e8:	82 2f       	mov	r24, r18
    82ea:	80 95       	com	r24
    82ec:	89 23       	and	r24, r25
    82ee:	09 c0       	rjmp	.+18     	; 0x8302 <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    82f0:	21 e0       	ldi	r18, 0x01	; 1
    82f2:	30 e0       	ldi	r19, 0x00	; 0
    82f4:	02 c0       	rjmp	.+4      	; 0x82fa <si5351_clock_enable+0x4a>
    82f6:	22 0f       	add	r18, r18
    82f8:	33 1f       	adc	r19, r19
    82fa:	1a 95       	dec	r17
    82fc:	e2 f7       	brpl	.-8      	; 0x82f6 <si5351_clock_enable+0x46>
    82fe:	89 2f       	mov	r24, r25
    8300:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    8302:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    8304:	41 e0       	ldi	r20, 0x01	; 1
    8306:	be 01       	movw	r22, r28
    8308:	6f 5f       	subi	r22, 0xFF	; 255
    830a:	7f 4f       	sbci	r23, 0xFF	; 255
    830c:	83 e0       	ldi	r24, 0x03	; 3
    830e:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    8312:	88 23       	and	r24, r24
    8314:	21 f0       	breq	.+8      	; 0x831e <si5351_clock_enable+0x6e>
    8316:	8c ef       	ldi	r24, 0xFC	; 252
    8318:	03 c0       	rjmp	.+6      	; 0x8320 <si5351_clock_enable+0x70>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    831a:	8c ef       	ldi	r24, 0xFC	; 252
    831c:	01 c0       	rjmp	.+2      	; 0x8320 <si5351_clock_enable+0x70>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    831e:	80 e0       	ldi	r24, 0x00	; 0
	}
    8320:	0f 90       	pop	r0
    8322:	0f 90       	pop	r0
    8324:	df 91       	pop	r29
    8326:	cf 91       	pop	r28
    8328:	1f 91       	pop	r17
    832a:	0f 91       	pop	r16
    832c:	08 95       	ret

0000832e <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    832e:	0f 93       	push	r16
    8330:	1f 93       	push	r17
    8332:	cf 93       	push	r28
    8334:	df 93       	push	r29
    8336:	00 d0       	rcall	.+0      	; 0x8338 <si5351_drive_strength+0xa>
    8338:	cd b7       	in	r28, 0x3d	; 61
    833a:	de b7       	in	r29, 0x3e	; 62
    833c:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    833e:	10 e1       	ldi	r17, 0x10	; 16
    8340:	18 0f       	add	r17, r24
    8342:	41 e0       	ldi	r20, 0x01	; 1
    8344:	be 01       	movw	r22, r28
    8346:	6f 5f       	subi	r22, 0xFF	; 255
    8348:	7f 4f       	sbci	r23, 0xFF	; 255
    834a:	81 2f       	mov	r24, r17
    834c:	0e 94 7e 40 	call	0x80fc	; 0x80fc <_Z16si5351_read_bulkhPhh>
    8350:	81 11       	cpse	r24, r1
    8352:	1e c0       	rjmp	.+60     	; 0x8390 <si5351_drive_strength+0x62>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    8354:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    8356:	01 30       	cpi	r16, 0x01	; 1
    8358:	41 f0       	breq	.+16     	; 0x836a <si5351_drive_strength+0x3c>
    835a:	28 f0       	brcs	.+10     	; 0x8366 <si5351_drive_strength+0x38>
    835c:	02 30       	cpi	r16, 0x02	; 2
    835e:	41 f0       	breq	.+16     	; 0x8370 <si5351_drive_strength+0x42>
    8360:	03 30       	cpi	r16, 0x03	; 3
    8362:	49 f0       	breq	.+18     	; 0x8376 <si5351_drive_strength+0x48>
    8364:	09 c0       	rjmp	.+18     	; 0x8378 <si5351_drive_strength+0x4a>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    8366:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    8368:	07 c0       	rjmp	.+14     	; 0x8378 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    836a:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    836c:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    836e:	04 c0       	rjmp	.+8      	; 0x8378 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    8370:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    8372:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    8374:	01 c0       	rjmp	.+2      	; 0x8378 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    8376:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    8378:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    837a:	41 e0       	ldi	r20, 0x01	; 1
    837c:	be 01       	movw	r22, r28
    837e:	6f 5f       	subi	r22, 0xFF	; 255
    8380:	7f 4f       	sbci	r23, 0xFF	; 255
    8382:	81 2f       	mov	r24, r17
    8384:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    8388:	88 23       	and	r24, r24
    838a:	21 f0       	breq	.+8      	; 0x8394 <si5351_drive_strength+0x66>
    838c:	8b ef       	ldi	r24, 0xFB	; 251
    838e:	03 c0       	rjmp	.+6      	; 0x8396 <si5351_drive_strength+0x68>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    8390:	8b ef       	ldi	r24, 0xFB	; 251
    8392:	01 c0       	rjmp	.+2      	; 0x8396 <si5351_drive_strength+0x68>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    8394:	80 e0       	ldi	r24, 0x00	; 0
	}
    8396:	0f 90       	pop	r0
    8398:	0f 90       	pop	r0
    839a:	df 91       	pop	r29
    839c:	cf 91       	pop	r28
    839e:	1f 91       	pop	r17
    83a0:	0f 91       	pop	r16
    83a2:	08 95       	ret

000083a4 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    83a4:	0f 93       	push	r16
    83a6:	1f 93       	push	r17
    83a8:	cf 93       	push	r28
    83aa:	df 93       	push	r29
    83ac:	00 d0       	rcall	.+0      	; 0x83ae <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    83ae:	cd b7       	in	r28, 0x3d	; 61
    83b0:	de b7       	in	r29, 0x3e	; 62
    83b2:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    83b4:	10 e1       	ldi	r17, 0x10	; 16
    83b6:	18 0f       	add	r17, r24
    83b8:	41 e0       	ldi	r20, 0x01	; 1
    83ba:	be 01       	movw	r22, r28
    83bc:	6f 5f       	subi	r22, 0xFF	; 255
    83be:	7f 4f       	sbci	r23, 0xFF	; 255
    83c0:	81 2f       	mov	r24, r17
    83c2:	0e 94 7e 40 	call	0x80fc	; 0x80fc <_Z16si5351_read_bulkhPhh>
    83c6:	81 11       	cpse	r24, r1
    83c8:	10 c0       	rjmp	.+32     	; 0x83ea <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x46>
		{
			return(true);
		}
		
		reg_val = data[0];
    83ca:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    83cc:	01 30       	cpi	r16, 0x01	; 1
    83ce:	11 f4       	brne	.+4      	; 0x83d4 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    83d0:	8f 7d       	andi	r24, 0xDF	; 223
    83d2:	03 c0       	rjmp	.+6      	; 0x83da <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    83d4:	02 30       	cpi	r16, 0x02	; 2
    83d6:	09 f4       	brne	.+2      	; 0x83da <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    83d8:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    83da:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    83dc:	41 e0       	ldi	r20, 0x01	; 1
    83de:	be 01       	movw	r22, r28
    83e0:	6f 5f       	subi	r22, 0xFF	; 255
    83e2:	7f 4f       	sbci	r23, 0xFF	; 255
    83e4:	81 2f       	mov	r24, r17
    83e6:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
		{
			return(true);
		}
		
		return(false);
	}
    83ea:	0f 90       	pop	r0
    83ec:	0f 90       	pop	r0
    83ee:	df 91       	pop	r29
    83f0:	cf 91       	pop	r28
    83f2:	1f 91       	pop	r17
    83f4:	0f 91       	pop	r16
    83f6:	08 95       	ret

000083f8 <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    83f8:	0f 93       	push	r16
    83fa:	1f 93       	push	r17
    83fc:	cf 93       	push	r28
    83fe:	df 93       	push	r29
    8400:	00 d0       	rcall	.+0      	; 0x8402 <_Z16set_integer_mode12si5351_clockb+0xa>
    8402:	cd b7       	in	r28, 0x3d	; 61
    8404:	de b7       	in	r29, 0x3e	; 62
    8406:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    8408:	10 e1       	ldi	r17, 0x10	; 16
    840a:	18 0f       	add	r17, r24
    840c:	41 e0       	ldi	r20, 0x01	; 1
    840e:	be 01       	movw	r22, r28
    8410:	6f 5f       	subi	r22, 0xFF	; 255
    8412:	7f 4f       	sbci	r23, 0xFF	; 255
    8414:	81 2f       	mov	r24, r17
    8416:	0e 94 7e 40 	call	0x80fc	; 0x80fc <_Z16si5351_read_bulkhPhh>
    841a:	81 11       	cpse	r24, r1
    841c:	0e c0       	rjmp	.+28     	; 0x843a <_Z16set_integer_mode12si5351_clockb+0x42>
		{
			return(true);
		}
		
		reg_val = data[0];
    841e:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    8420:	00 23       	and	r16, r16
    8422:	11 f0       	breq	.+4      	; 0x8428 <_Z16set_integer_mode12si5351_clockb+0x30>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    8424:	80 64       	ori	r24, 0x40	; 64
    8426:	01 c0       	rjmp	.+2      	; 0x842a <_Z16set_integer_mode12si5351_clockb+0x32>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    8428:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    842a:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    842c:	41 e0       	ldi	r20, 0x01	; 1
    842e:	be 01       	movw	r22, r28
    8430:	6f 5f       	subi	r22, 0xFF	; 255
    8432:	7f 4f       	sbci	r23, 0xFF	; 255
    8434:	81 2f       	mov	r24, r17
    8436:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
	}
    843a:	0f 90       	pop	r0
    843c:	0f 90       	pop	r0
    843e:	df 91       	pop	r29
    8440:	cf 91       	pop	r28
    8442:	1f 91       	pop	r17
    8444:	0f 91       	pop	r16
    8446:	08 95       	ret

00008448 <_Z6ms_div12si5351_clockhb>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    8448:	ff 92       	push	r15
    844a:	0f 93       	push	r16
    844c:	1f 93       	push	r17
    844e:	cf 93       	push	r28
    8450:	df 93       	push	r29
    8452:	00 d0       	rcall	.+0      	; 0x8454 <_Z6ms_div12si5351_clockhb+0xc>
    8454:	cd b7       	in	r28, 0x3d	; 61
    8456:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    8458:	81 30       	cpi	r24, 0x01	; 1
    845a:	71 f0       	breq	.+28     	; 0x8478 <_Z6ms_div12si5351_clockhb+0x30>
    845c:	18 f0       	brcs	.+6      	; 0x8464 <_Z6ms_div12si5351_clockhb+0x1c>
    845e:	82 30       	cpi	r24, 0x02	; 2
    8460:	31 f0       	breq	.+12     	; 0x846e <_Z6ms_div12si5351_clockhb+0x26>
    8462:	2c c0       	rjmp	.+88     	; 0x84bc <_Z6ms_div12si5351_clockhb+0x74>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    8464:	0f 2e       	mov	r0, r31
    8466:	fc e2       	ldi	r31, 0x2C	; 44
    8468:	ff 2e       	mov	r15, r31
    846a:	f0 2d       	mov	r31, r0
    846c:	09 c0       	rjmp	.+18     	; 0x8480 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    846e:	0f 2e       	mov	r0, r31
    8470:	fc e3       	ldi	r31, 0x3C	; 60
    8472:	ff 2e       	mov	r15, r31
    8474:	f0 2d       	mov	r31, r0
			}
			break;
    8476:	04 c0       	rjmp	.+8      	; 0x8480 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    8478:	0f 2e       	mov	r0, r31
    847a:	f4 e3       	ldi	r31, 0x34	; 52
    847c:	ff 2e       	mov	r15, r31
    847e:	f0 2d       	mov	r31, r0
    8480:	04 2f       	mov	r16, r20
    8482:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    8484:	41 e0       	ldi	r20, 0x01	; 1
    8486:	be 01       	movw	r22, r28
    8488:	6f 5f       	subi	r22, 0xFF	; 255
    848a:	7f 4f       	sbci	r23, 0xFF	; 255
    848c:	8f 2d       	mov	r24, r15
    848e:	0e 94 7e 40 	call	0x80fc	; 0x80fc <_Z16si5351_read_bulkhPhh>
    8492:	81 11       	cpse	r24, r1
    8494:	14 c0       	rjmp	.+40     	; 0x84be <_Z6ms_div12si5351_clockhb+0x76>
		{
			return(true);
		}
		
		reg_val = data[0];
    8496:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    8498:	86 2f       	mov	r24, r22
    849a:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    849c:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    849e:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    84a0:	90 e1       	ldi	r25, 0x10	; 16
    84a2:	19 9f       	mul	r17, r25
    84a4:	b0 01       	movw	r22, r0
    84a6:	11 24       	eor	r1, r1
    84a8:	68 2b       	or	r22, r24

		data[0] = reg_val;
    84aa:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    84ac:	41 e0       	ldi	r20, 0x01	; 1
    84ae:	be 01       	movw	r22, r28
    84b0:	6f 5f       	subi	r22, 0xFF	; 255
    84b2:	7f 4f       	sbci	r23, 0xFF	; 255
    84b4:	8f 2d       	mov	r24, r15
    84b6:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    84ba:	01 c0       	rjmp	.+2      	; 0x84be <_Z6ms_div12si5351_clockhb+0x76>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    84bc:	81 e0       	ldi	r24, 0x01	; 1

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		data[0] = reg_val;
		return(si5351_write_bulk(reg_addr, data, 1));
	}
    84be:	0f 90       	pop	r0
    84c0:	0f 90       	pop	r0
    84c2:	df 91       	pop	r29
    84c4:	cf 91       	pop	r28
    84c6:	1f 91       	pop	r17
    84c8:	0f 91       	pop	r16
    84ca:	ff 90       	pop	r15
    84cc:	08 95       	ret

000084ce <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    84ce:	8f 92       	push	r8
    84d0:	af 92       	push	r10
    84d2:	cf 92       	push	r12
    84d4:	df 92       	push	r13
    84d6:	ef 92       	push	r14
    84d8:	ff 92       	push	r15
    84da:	0f 93       	push	r16
    84dc:	1f 93       	push	r17
    84de:	cf 93       	push	r28
    84e0:	df 93       	push	r29
    84e2:	cd b7       	in	r28, 0x3d	; 61
    84e4:	de b7       	in	r29, 0x3e	; 62
    84e6:	69 97       	sbiw	r28, 0x19	; 25
    84e8:	cd bf       	out	0x3d, r28	; 61
    84ea:	de bf       	out	0x3e, r29	; 62
    84ec:	f8 2e       	mov	r15, r24
    84ee:	ce 86       	std	Y+14, r12	; 0x0e
    84f0:	df 86       	std	Y+15, r13	; 0x0f
    84f2:	e8 8a       	std	Y+16, r14	; 0x10
    84f4:	0a 8b       	std	Y+18, r16	; 0x12
    84f6:	1b 8b       	std	Y+19, r17	; 0x13
    84f8:	2c 8b       	std	Y+20, r18	; 0x14
    84fa:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    84fc:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    84fe:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    8500:	88 0f       	add	r24, r24
    8502:	88 0f       	add	r24, r24
    8504:	88 0f       	add	r24, r24
    8506:	41 e0       	ldi	r20, 0x01	; 1
    8508:	be 01       	movw	r22, r28
    850a:	64 5f       	subi	r22, 0xF4	; 244
    850c:	7f 4f       	sbci	r23, 0xFF	; 255
    850e:	84 5d       	subi	r24, 0xD4	; 212
    8510:	0e 94 7e 40 	call	0x80fc	; 0x80fc <_Z16si5351_read_bulkhPhh>
    8514:	81 11       	cpse	r24, r1
    8516:	48 c0       	rjmp	.+144    	; 0x85a8 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		reg_val = data[0];
    8518:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    851a:	98 2f       	mov	r25, r24
    851c:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    851e:	88 89       	ldd	r24, Y+16	; 0x10
    8520:	83 70       	andi	r24, 0x03	; 3
    8522:	89 2b       	or	r24, r25
    8524:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    8526:	8f 85       	ldd	r24, Y+15	; 0x0f
    8528:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    852a:	8e 85       	ldd	r24, Y+14	; 0x0e
    852c:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    852e:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    8530:	8c 89       	ldd	r24, Y+20	; 0x14
    8532:	8f 70       	andi	r24, 0x0F	; 15
    8534:	20 e1       	ldi	r18, 0x10	; 16
    8536:	92 9f       	mul	r25, r18
    8538:	80 0d       	add	r24, r0
    853a:	11 24       	eor	r1, r1
    853c:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    853e:	8b 89       	ldd	r24, Y+19	; 0x13
    8540:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    8542:	8a 89       	ldd	r24, Y+18	; 0x12
    8544:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    8546:	81 e0       	ldi	r24, 0x01	; 1
    8548:	f8 16       	cp	r15, r24
    854a:	81 f0       	breq	.+32     	; 0x856c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x9e>
    854c:	f8 16       	cp	r15, r24
    854e:	20 f0       	brcs	.+8      	; 0x8558 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    8550:	22 e0       	ldi	r18, 0x02	; 2
    8552:	f2 16       	cp	r15, r18
    8554:	a9 f0       	breq	.+42     	; 0x8580 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xb2>
    8556:	1d c0       	rjmp	.+58     	; 0x8592 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    8558:	48 e0       	ldi	r20, 0x08	; 8
    855a:	be 01       	movw	r22, r28
    855c:	6f 5f       	subi	r22, 0xFF	; 255
    855e:	7f 4f       	sbci	r23, 0xFF	; 255
    8560:	8a e2       	ldi	r24, 0x2A	; 42
    8562:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    8566:	88 23       	and	r24, r24
    8568:	a1 f0       	breq	.+40     	; 0x8592 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    856a:	1e c0       	rjmp	.+60     	; 0x85a8 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    856c:	48 e0       	ldi	r20, 0x08	; 8
    856e:	be 01       	movw	r22, r28
    8570:	6f 5f       	subi	r22, 0xFF	; 255
    8572:	7f 4f       	sbci	r23, 0xFF	; 255
    8574:	82 e3       	ldi	r24, 0x32	; 50
    8576:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    857a:	88 23       	and	r24, r24
    857c:	51 f0       	breq	.+20     	; 0x8592 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    857e:	14 c0       	rjmp	.+40     	; 0x85a8 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    8580:	48 e0       	ldi	r20, 0x08	; 8
    8582:	be 01       	movw	r22, r28
    8584:	6f 5f       	subi	r22, 0xFF	; 255
    8586:	7f 4f       	sbci	r23, 0xFF	; 255
    8588:	8a e3       	ldi	r24, 0x3A	; 58
    858a:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    858e:	81 11       	cpse	r24, r1
    8590:	0b c0       	rjmp	.+22     	; 0x85a8 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    8592:	6a 2d       	mov	r22, r10
    8594:	8f 2d       	mov	r24, r15
    8596:	0e 94 fc 41 	call	0x83f8	; 0x83f8 <_Z16set_integer_mode12si5351_clockb>
    859a:	81 11       	cpse	r24, r1
    859c:	05 c0       	rjmp	.+10     	; 0x85a8 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    859e:	4e a1       	ldd	r20, Y+38	; 0x26
    85a0:	68 2d       	mov	r22, r8
    85a2:	8f 2d       	mov	r24, r15
    85a4:	0e 94 24 42 	call	0x8448	; 0x8448 <_Z6ms_div12si5351_clockhb>
		{
			return(true);
		}
		
		return(false);
	}
    85a8:	69 96       	adiw	r28, 0x19	; 25
    85aa:	cd bf       	out	0x3d, r28	; 61
    85ac:	de bf       	out	0x3e, r29	; 62
    85ae:	df 91       	pop	r29
    85b0:	cf 91       	pop	r28
    85b2:	1f 91       	pop	r17
    85b4:	0f 91       	pop	r16
    85b6:	ff 90       	pop	r15
    85b8:	ef 90       	pop	r14
    85ba:	df 90       	pop	r13
    85bc:	cf 90       	pop	r12
    85be:	af 90       	pop	r10
    85c0:	8f 90       	pop	r8
    85c2:	08 95       	ret

000085c4 <si5351_set_freq>:
 *
 * Returns true on failure
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
    85c4:	2f 92       	push	r2
    85c6:	3f 92       	push	r3
    85c8:	4f 92       	push	r4
    85ca:	5f 92       	push	r5
    85cc:	6f 92       	push	r6
    85ce:	7f 92       	push	r7
    85d0:	8f 92       	push	r8
    85d2:	9f 92       	push	r9
    85d4:	af 92       	push	r10
    85d6:	bf 92       	push	r11
    85d8:	cf 92       	push	r12
    85da:	df 92       	push	r13
    85dc:	ef 92       	push	r14
    85de:	ff 92       	push	r15
    85e0:	0f 93       	push	r16
    85e2:	1f 93       	push	r17
    85e4:	cf 93       	push	r28
    85e6:	df 93       	push	r29
    85e8:	cd b7       	in	r28, 0x3d	; 61
    85ea:	de b7       	in	r29, 0x3e	; 62
    85ec:	60 97       	sbiw	r28, 0x10	; 16
    85ee:	cd bf       	out	0x3d, r28	; 61
    85f0:	de bf       	out	0x3e, r29	; 62
    85f2:	6b 01       	movw	r12, r22
    85f4:	7c 01       	movw	r14, r24
    85f6:	b4 2e       	mov	r11, r20
    85f8:	72 2e       	mov	r7, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		bool int_mode = false;
    85fa:	1d 86       	std	Y+13, r1	; 0x0d
		bool div_by_4 = false;
    85fc:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    85fe:	10 91 78 4a 	lds	r17, 0x4A78	; 0x804a78 <g_si5351_initialized>
    8602:	11 23       	and	r17, r17
    8604:	09 f4       	brne	.+2      	; 0x8608 <si5351_set_freq+0x44>
    8606:	1e c1       	rjmp	.+572    	; 0x8844 <si5351_set_freq+0x280>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    8608:	80 e4       	ldi	r24, 0x40	; 64
    860a:	c8 16       	cp	r12, r24
    860c:	82 e4       	ldi	r24, 0x42	; 66
    860e:	d8 06       	cpc	r13, r24
    8610:	8f e0       	ldi	r24, 0x0F	; 15
    8612:	e8 06       	cpc	r14, r24
    8614:	f1 04       	cpc	r15, r1
    8616:	70 f0       	brcs	.+28     	; 0x8634 <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    8618:	c7 01       	movw	r24, r14
    861a:	b6 01       	movw	r22, r12
    861c:	24 e6       	ldi	r18, 0x64	; 100
    861e:	30 e0       	ldi	r19, 0x00	; 0
    8620:	40 e0       	ldi	r20, 0x00	; 0
    8622:	50 e0       	ldi	r21, 0x00	; 0
    8624:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
				freq_Fout *= 100;
    8628:	a4 e6       	ldi	r26, 0x64	; 100
    862a:	b0 e0       	ldi	r27, 0x00	; 0
    862c:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <__muluhisi3>
    8630:	6b 01       	movw	r12, r22
    8632:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    8634:	81 e0       	ldi	r24, 0x01	; 1
    8636:	b8 16       	cp	r11, r24
    8638:	c9 f0       	breq	.+50     	; 0x866c <si5351_set_freq+0xa8>
    863a:	b8 16       	cp	r11, r24
    863c:	20 f0       	brcs	.+8      	; 0x8646 <si5351_set_freq+0x82>
    863e:	82 e0       	ldi	r24, 0x02	; 2
    8640:	b8 16       	cp	r11, r24
    8642:	b1 f1       	breq	.+108    	; 0x86b0 <si5351_set_freq+0xec>
    8644:	08 c1       	rjmp	.+528    	; 0x8856 <si5351_set_freq+0x292>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    8646:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    864a:	81 60       	ori	r24, 0x01	; 1
    864c:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    8650:	c0 92 79 4a 	sts	0x4A79, r12	; 0x804a79 <_ZL9clock_out>
    8654:	d0 92 7a 4a 	sts	0x4A7A, r13	; 0x804a7a <_ZL9clock_out+0x1>
    8658:	e0 92 7b 4a 	sts	0x4A7B, r14	; 0x804a7b <_ZL9clock_out+0x2>
    865c:	f0 92 7c 4a 	sts	0x4A7C, r15	; 0x804a7c <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    8660:	68 94       	set
    8662:	66 24       	eor	r6, r6
    8664:	64 f8       	bld	r6, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    8666:	99 24       	eor	r9, r9
    8668:	93 94       	inc	r9
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    866a:	43 c0       	rjmp	.+134    	; 0x86f2 <si5351_set_freq+0x12e>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    866c:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    8670:	82 60       	ori	r24, 0x02	; 2
    8672:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    8676:	80 95       	com	r24
    8678:	8a 6f       	ori	r24, 0xFA	; 250
    867a:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    867c:	41 e0       	ldi	r20, 0x01	; 1
    867e:	be 01       	movw	r22, r28
    8680:	61 5f       	subi	r22, 0xF1	; 241
    8682:	7f 4f       	sbci	r23, 0xFF	; 255
    8684:	83 e0       	ldi	r24, 0x03	; 3
    8686:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    868a:	18 2f       	mov	r17, r24
    868c:	81 11       	cpse	r24, r1
    868e:	e3 c0       	rjmp	.+454    	; 0x8856 <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    8690:	c0 92 7d 4a 	sts	0x4A7D, r12	; 0x804a7d <_ZL9clock_out+0x4>
    8694:	d0 92 7e 4a 	sts	0x4A7E, r13	; 0x804a7e <_ZL9clock_out+0x5>
    8698:	e0 92 7f 4a 	sts	0x4A7F, r14	; 0x804a7f <_ZL9clock_out+0x6>
    869c:	f0 92 80 4a 	sts	0x4A80, r15	; 0x804a80 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    86a0:	0f 2e       	mov	r0, r31
    86a2:	f1 e1       	ldi	r31, 0x11	; 17
    86a4:	6f 2e       	mov	r6, r31
    86a6:	f0 2d       	mov	r31, r0
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    86a8:	68 94       	set
    86aa:	99 24       	eor	r9, r9
    86ac:	91 f8       	bld	r9, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    86ae:	21 c0       	rjmp	.+66     	; 0x86f2 <si5351_set_freq+0x12e>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    86b0:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    86b4:	84 60       	ori	r24, 0x04	; 4
    86b6:	80 93 85 4a 	sts	0x4A85, r24	; 0x804a85 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    86ba:	80 95       	com	r24
    86bc:	8c 6f       	ori	r24, 0xFC	; 252
    86be:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    86c0:	41 e0       	ldi	r20, 0x01	; 1
    86c2:	be 01       	movw	r22, r28
    86c4:	61 5f       	subi	r22, 0xF1	; 241
    86c6:	7f 4f       	sbci	r23, 0xFF	; 255
    86c8:	83 e0       	ldi	r24, 0x03	; 3
    86ca:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    86ce:	18 2f       	mov	r17, r24
    86d0:	81 11       	cpse	r24, r1
    86d2:	c1 c0       	rjmp	.+386    	; 0x8856 <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    86d4:	c0 92 81 4a 	sts	0x4A81, r12	; 0x804a81 <_ZL9clock_out+0x8>
    86d8:	d0 92 82 4a 	sts	0x4A82, r13	; 0x804a82 <_ZL9clock_out+0x9>
    86dc:	e0 92 83 4a 	sts	0x4A83, r14	; 0x804a83 <_ZL9clock_out+0xa>
    86e0:	f0 92 84 4a 	sts	0x4A84, r15	; 0x804a84 <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    86e4:	0f 2e       	mov	r0, r31
    86e6:	f2 e1       	ldi	r31, 0x12	; 18
    86e8:	6f 2e       	mov	r6, r31
    86ea:	f0 2d       	mov	r31, r0
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    86ec:	68 94       	set
    86ee:	99 24       	eor	r9, r9
    86f0:	91 f8       	bld	r9, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    86f2:	81 e0       	ldi	r24, 0x01	; 1
    86f4:	98 16       	cp	r9, r24
    86f6:	61 f0       	breq	.+24     	; 0x8710 <si5351_set_freq+0x14c>
    86f8:	80 91 86 4a 	lds	r24, 0x4A86	; 0x804a86 <_ZL8freqVCOB>
    86fc:	90 91 87 4a 	lds	r25, 0x4A87	; 0x804a87 <_ZL8freqVCOB+0x1>
    8700:	a0 91 88 4a 	lds	r26, 0x4A88	; 0x804a88 <_ZL8freqVCOB+0x2>
    8704:	b0 91 89 4a 	lds	r27, 0x4A89	; 0x804a89 <_ZL8freqVCOB+0x3>
    8708:	89 2b       	or	r24, r25
    870a:	8a 2b       	or	r24, r26
    870c:	8b 2b       	or	r24, r27
    870e:	81 f4       	brne	.+32     	; 0x8730 <si5351_set_freq+0x16c>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    8710:	8e 01       	movw	r16, r28
    8712:	02 5f       	subi	r16, 0xF2	; 242
    8714:	1f 4f       	sbci	r17, 0xFF	; 255
    8716:	9e 01       	movw	r18, r28
    8718:	23 5f       	subi	r18, 0xF3	; 243
    871a:	3f 4f       	sbci	r19, 0xFF	; 255
    871c:	ae 01       	movw	r20, r28
    871e:	4f 5f       	subi	r20, 0xFF	; 255
    8720:	5f 4f       	sbci	r21, 0xFF	; 255
    8722:	c7 01       	movw	r24, r14
    8724:	b6 01       	movw	r22, r12
    8726:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    872a:	1b 01       	movw	r2, r22
    872c:	2c 01       	movw	r4, r24
    872e:	10 c0       	rjmp	.+32     	; 0x8750 <si5351_set_freq+0x18c>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    8730:	8e 01       	movw	r16, r28
    8732:	02 5f       	subi	r16, 0xF2	; 242
    8734:	1f 4f       	sbci	r17, 0xFF	; 255
    8736:	9e 01       	movw	r18, r28
    8738:	23 5f       	subi	r18, 0xF3	; 243
    873a:	3f 4f       	sbci	r19, 0xFF	; 255
    873c:	ae 01       	movw	r20, r28
    873e:	4f 5f       	subi	r20, 0xFF	; 255
    8740:	5f 4f       	sbci	r21, 0xFF	; 255
    8742:	c7 01       	movw	r24, r14
    8744:	b6 01       	movw	r22, r12
    8746:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    874a:	21 2c       	mov	r2, r1
    874c:	31 2c       	mov	r3, r1
    874e:	21 01       	movw	r4, r2
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    8750:	69 2d       	mov	r22, r9
    8752:	8b 2d       	mov	r24, r11
    8754:	0e 94 d2 41 	call	0x83a4	; 0x83a4 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    8758:	18 2f       	mov	r17, r24
    875a:	81 11       	cpse	r24, r1
    875c:	7c c0       	rjmp	.+248    	; 0x8856 <si5351_set_freq+0x292>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    875e:	8e 85       	ldd	r24, Y+14	; 0x0e
    8760:	ad 84       	ldd	r10, Y+13	; 0x0d
    8762:	8f 93       	push	r24
    8764:	81 2c       	mov	r8, r1
    8766:	c9 80       	ldd	r12, Y+1	; 0x01
    8768:	da 80       	ldd	r13, Y+2	; 0x02
    876a:	eb 80       	ldd	r14, Y+3	; 0x03
    876c:	fc 80       	ldd	r15, Y+4	; 0x04
    876e:	0d 81       	ldd	r16, Y+5	; 0x05
    8770:	1e 81       	ldd	r17, Y+6	; 0x06
    8772:	2f 81       	ldd	r18, Y+7	; 0x07
    8774:	38 85       	ldd	r19, Y+8	; 0x08
    8776:	49 85       	ldd	r20, Y+9	; 0x09
    8778:	5a 85       	ldd	r21, Y+10	; 0x0a
    877a:	6b 85       	ldd	r22, Y+11	; 0x0b
    877c:	7c 85       	ldd	r23, Y+12	; 0x0c
    877e:	8b 2d       	mov	r24, r11
    8780:	0e 94 67 42 	call	0x84ce	; 0x84ce <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    8784:	18 2f       	mov	r17, r24
    8786:	0f 90       	pop	r0
    8788:	81 11       	cpse	r24, r1
    878a:	65 c0       	rjmp	.+202    	; 0x8856 <si5351_set_freq+0x292>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    878c:	21 14       	cp	r2, r1
    878e:	31 04       	cpc	r3, r1
    8790:	41 04       	cpc	r4, r1
    8792:	51 04       	cpc	r5, r1
    8794:	29 f0       	breq	.+10     	; 0x87a0 <si5351_set_freq+0x1dc>
			{
				set_pll(freq_VCO, target_pll);
    8796:	49 2d       	mov	r20, r9
    8798:	c2 01       	movw	r24, r4
    879a:	b1 01       	movw	r22, r2
    879c:	0e 94 3f 40 	call	0x807e	; 0x807e <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    87a0:	77 20       	and	r7, r7
    87a2:	69 f0       	breq	.+26     	; 0x87be <si5351_set_freq+0x1fa>
		{
 			data[0] = enabledClocksMask;
    87a4:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    87a8:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    87aa:	41 e0       	ldi	r20, 0x01	; 1
    87ac:	be 01       	movw	r22, r28
    87ae:	61 5f       	subi	r22, 0xF1	; 241
    87b0:	7f 4f       	sbci	r23, 0xFF	; 255
    87b2:	83 e0       	ldi	r24, 0x03	; 3
    87b4:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    87b8:	88 23       	and	r24, r24
    87ba:	71 f0       	breq	.+28     	; 0x87d8 <si5351_set_freq+0x214>
    87bc:	45 c0       	rjmp	.+138    	; 0x8848 <si5351_set_freq+0x284>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    87be:	80 91 85 4a 	lds	r24, 0x4A85	; 0x804a85 <_ZL17enabledClocksMask>
    87c2:	80 95       	com	r24
    87c4:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    87c6:	41 e0       	ldi	r20, 0x01	; 1
    87c8:	be 01       	movw	r22, r28
    87ca:	61 5f       	subi	r22, 0xF1	; 241
    87cc:	7f 4f       	sbci	r23, 0xFF	; 255
    87ce:	83 e0       	ldi	r24, 0x03	; 3
    87d0:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    87d4:	81 11       	cpse	r24, r1
    87d6:	3a c0       	rjmp	.+116    	; 0x884c <si5351_set_freq+0x288>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    87d8:	81 e0       	ldi	r24, 0x01	; 1
    87da:	98 12       	cpse	r9, r24
    87dc:	0b c0       	rjmp	.+22     	; 0x87f4 <si5351_set_freq+0x230>
		{
 			data[0] = 0x4C;
    87de:	8c e4       	ldi	r24, 0x4C	; 76
    87e0:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    87e2:	41 e0       	ldi	r20, 0x01	; 1
    87e4:	be 01       	movw	r22, r28
    87e6:	61 5f       	subi	r22, 0xF1	; 241
    87e8:	7f 4f       	sbci	r23, 0xFF	; 255
    87ea:	86 2d       	mov	r24, r6
    87ec:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    87f0:	18 2f       	mov	r17, r24
    87f2:	31 c0       	rjmp	.+98     	; 0x8856 <si5351_set_freq+0x292>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    87f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    87f6:	88 23       	and	r24, r24
    87f8:	61 f0       	breq	.+24     	; 0x8812 <si5351_set_freq+0x24e>
			{
 				data[0] = 0x6C;
    87fa:	8c e6       	ldi	r24, 0x6C	; 108
    87fc:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    87fe:	41 e0       	ldi	r20, 0x01	; 1
    8800:	be 01       	movw	r22, r28
    8802:	61 5f       	subi	r22, 0xF1	; 241
    8804:	7f 4f       	sbci	r23, 0xFF	; 255
    8806:	86 2d       	mov	r24, r6
    8808:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    880c:	88 23       	and	r24, r24
    880e:	61 f0       	breq	.+24     	; 0x8828 <si5351_set_freq+0x264>
    8810:	1f c0       	rjmp	.+62     	; 0x8850 <si5351_set_freq+0x28c>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    8812:	8c e2       	ldi	r24, 0x2C	; 44
    8814:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    8816:	41 e0       	ldi	r20, 0x01	; 1
    8818:	be 01       	movw	r22, r28
    881a:	61 5f       	subi	r22, 0xF1	; 241
    881c:	7f 4f       	sbci	r23, 0xFF	; 255
    881e:	86 2d       	mov	r24, r6
    8820:	0e 94 17 40 	call	0x802e	; 0x802e <_Z17si5351_write_bulkhPhh>
    8824:	81 11       	cpse	r24, r1
    8826:	16 c0       	rjmp	.+44     	; 0x8854 <si5351_set_freq+0x290>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    8828:	21 14       	cp	r2, r1
    882a:	31 04       	cpc	r3, r1
    882c:	41 04       	cpc	r4, r1
    882e:	51 04       	cpc	r5, r1
    8830:	91 f0       	breq	.+36     	; 0x8856 <si5351_set_freq+0x292>
			{
				freqVCOB = freq_VCO;
    8832:	20 92 86 4a 	sts	0x4A86, r2	; 0x804a86 <_ZL8freqVCOB>
    8836:	30 92 87 4a 	sts	0x4A87, r3	; 0x804a87 <_ZL8freqVCOB+0x1>
    883a:	40 92 88 4a 	sts	0x4A88, r4	; 0x804a88 <_ZL8freqVCOB+0x2>
    883e:	50 92 89 4a 	sts	0x4A89, r5	; 0x804a89 <_ZL8freqVCOB+0x3>
    8842:	09 c0       	rjmp	.+18     	; 0x8856 <si5351_set_freq+0x292>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    8844:	11 e0       	ldi	r17, 0x01	; 1
    8846:	07 c0       	rjmp	.+14     	; 0x8856 <si5351_set_freq+0x292>
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    8848:	18 2f       	mov	r17, r24
    884a:	05 c0       	rjmp	.+10     	; 0x8856 <si5351_set_freq+0x292>
		else
		{
 			data[0] = ~enabledClocksMask;
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
			{
				return true;
    884c:	18 2f       	mov	r17, r24
    884e:	03 c0       	rjmp	.+6      	; 0x8856 <si5351_set_freq+0x292>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    8850:	18 2f       	mov	r17, r24
    8852:	01 c0       	rjmp	.+2      	; 0x8856 <si5351_set_freq+0x292>
			else
			{
 				data[0] = 0x2C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    8854:	18 2f       	mov	r17, r24
				freqVCOB = freq_VCO;
			}
		}

		return(false);
	}
    8856:	81 2f       	mov	r24, r17
    8858:	60 96       	adiw	r28, 0x10	; 16
    885a:	cd bf       	out	0x3d, r28	; 61
    885c:	de bf       	out	0x3e, r29	; 62
    885e:	df 91       	pop	r29
    8860:	cf 91       	pop	r28
    8862:	1f 91       	pop	r17
    8864:	0f 91       	pop	r16
    8866:	ff 90       	pop	r15
    8868:	ef 90       	pop	r14
    886a:	df 90       	pop	r13
    886c:	cf 90       	pop	r12
    886e:	bf 90       	pop	r11
    8870:	af 90       	pop	r10
    8872:	9f 90       	pop	r9
    8874:	8f 90       	pop	r8
    8876:	7f 90       	pop	r7
    8878:	6f 90       	pop	r6
    887a:	5f 90       	pop	r5
    887c:	4f 90       	pop	r4
    887e:	3f 90       	pop	r3
    8880:	2f 90       	pop	r2
    8882:	08 95       	ret

00008884 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    8884:	80 e0       	ldi	r24, 0x00	; 0
    8886:	08 95       	ret

00008888 <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8888:	e0 e0       	ldi	r30, 0x00	; 0
    888a:	fb e0       	ldi	r31, 0x0B	; 11
    888c:	81 e0       	ldi	r24, 0x01	; 1
    888e:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    8890:	20 e4       	ldi	r18, 0x40	; 64
    8892:	3c e9       	ldi	r19, 0x9C	; 156
    8894:	24 87       	std	Z+12, r18	; 0x0c
    8896:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    8898:	93 e0       	ldi	r25, 0x03	; 3
    889a:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    889c:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    889e:	e0 e1       	ldi	r30, 0x10	; 16
    88a0:	fb e0       	ldi	r31, 0x0B	; 11
    88a2:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    88a4:	40 ec       	ldi	r20, 0xC0	; 192
    88a6:	5d e5       	ldi	r21, 0x5D	; 93
    88a8:	44 87       	std	Z+12, r20	; 0x0c
    88aa:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    88ac:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    88ae:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    88b0:	e0 e3       	ldi	r30, 0x30	; 48
    88b2:	fb e0       	ldi	r31, 0x0B	; 11
    88b4:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    88b6:	24 87       	std	Z+12, r18	; 0x0c
    88b8:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    88ba:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    88bc:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    88be:	80 e0       	ldi	r24, 0x00	; 0
    88c0:	08 95       	ret

000088c2 <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    88c2:	0f 93       	push	r16
    88c4:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    88c6:	61 15       	cp	r22, r1
    88c8:	71 05       	cpc	r23, r1
    88ca:	81 05       	cpc	r24, r1
    88cc:	91 05       	cpc	r25, r1
    88ce:	09 f4       	brne	.+2      	; 0x88d2 <util_delay_ms+0x10>
    88d0:	67 c0       	rjmp	.+206    	; 0x89a0 <util_delay_ms+0xde>
	{
		if(counting)
    88d2:	20 91 8e 4a 	lds	r18, 0x4A8E	; 0x804a8e <_ZZ13util_delay_msE8counting>
    88d6:	22 23       	and	r18, r18
    88d8:	f1 f1       	breq	.+124    	; 0x8956 <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    88da:	00 91 8f 4a 	lds	r16, 0x4A8F	; 0x804a8f <_ZL12g_ms_counter>
    88de:	10 91 90 4a 	lds	r17, 0x4A90	; 0x804a90 <_ZL12g_ms_counter+0x1>
    88e2:	20 91 91 4a 	lds	r18, 0x4A91	; 0x804a91 <_ZL12g_ms_counter+0x2>
    88e6:	30 91 92 4a 	lds	r19, 0x4A92	; 0x804a92 <_ZL12g_ms_counter+0x3>
    88ea:	01 2b       	or	r16, r17
    88ec:	02 2b       	or	r16, r18
    88ee:	03 2b       	or	r16, r19
    88f0:	71 f4       	brne	.+28     	; 0x890e <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    88f2:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    88f6:	10 92 8e 4a 	sts	0x4A8E, r1	; 0x804a8e <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    88fa:	10 92 8a 4a 	sts	0x4A8A, r1	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    88fe:	10 92 8b 4a 	sts	0x4A8B, r1	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    8902:	10 92 8c 4a 	sts	0x4A8C, r1	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    8906:	10 92 8d 4a 	sts	0x4A8D, r1	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    890a:	80 e0       	ldi	r24, 0x00	; 0
    890c:	62 c0       	rjmp	.+196    	; 0x89d2 <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    890e:	00 91 8a 4a 	lds	r16, 0x4A8A	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    8912:	10 91 8b 4a 	lds	r17, 0x4A8B	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    8916:	20 91 8c 4a 	lds	r18, 0x4A8C	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    891a:	30 91 8d 4a 	lds	r19, 0x4A8D	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
    891e:	60 17       	cp	r22, r16
    8920:	71 07       	cpc	r23, r17
    8922:	82 07       	cpc	r24, r18
    8924:	93 07       	cpc	r25, r19
    8926:	09 f4       	brne	.+2      	; 0x892a <util_delay_ms+0x68>
    8928:	51 c0       	rjmp	.+162    	; 0x89cc <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    892a:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    892e:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    8932:	60 93 8a 4a 	sts	0x4A8A, r22	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    8936:	70 93 8b 4a 	sts	0x4A8B, r23	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    893a:	80 93 8c 4a 	sts	0x4A8C, r24	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    893e:	90 93 8d 4a 	sts	0x4A8D, r25	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    8942:	60 93 8f 4a 	sts	0x4A8F, r22	; 0x804a8f <_ZL12g_ms_counter>
    8946:	70 93 90 4a 	sts	0x4A90, r23	; 0x804a90 <_ZL12g_ms_counter+0x1>
    894a:	80 93 91 4a 	sts	0x4A91, r24	; 0x804a91 <_ZL12g_ms_counter+0x2>
    894e:	90 93 92 4a 	sts	0x4A92, r25	; 0x804a92 <_ZL12g_ms_counter+0x3>
				return(false);
    8952:	80 e0       	ldi	r24, 0x00	; 0
    8954:	3e c0       	rjmp	.+124    	; 0x89d2 <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    8956:	00 91 8a 4a 	lds	r16, 0x4A8A	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    895a:	10 91 8b 4a 	lds	r17, 0x4A8B	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    895e:	20 91 8c 4a 	lds	r18, 0x4A8C	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    8962:	30 91 8d 4a 	lds	r19, 0x4A8D	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
    8966:	60 17       	cp	r22, r16
    8968:	71 07       	cpc	r23, r17
    896a:	82 07       	cpc	r24, r18
    896c:	93 07       	cpc	r25, r19
    896e:	71 f1       	breq	.+92     	; 0x89cc <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    8970:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    8974:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    8978:	60 93 8a 4a 	sts	0x4A8A, r22	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    897c:	70 93 8b 4a 	sts	0x4A8B, r23	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    8980:	80 93 8c 4a 	sts	0x4A8C, r24	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    8984:	90 93 8d 4a 	sts	0x4A8D, r25	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    8988:	60 93 8f 4a 	sts	0x4A8F, r22	; 0x804a8f <_ZL12g_ms_counter>
    898c:	70 93 90 4a 	sts	0x4A90, r23	; 0x804a90 <_ZL12g_ms_counter+0x1>
    8990:	80 93 91 4a 	sts	0x4A91, r24	; 0x804a91 <_ZL12g_ms_counter+0x2>
    8994:	90 93 92 4a 	sts	0x4A92, r25	; 0x804a92 <_ZL12g_ms_counter+0x3>
			counting = true;
    8998:	81 e0       	ldi	r24, 0x01	; 1
    899a:	80 93 8e 4a 	sts	0x4A8E, r24	; 0x804a8e <_ZZ13util_delay_msE8counting>
    899e:	16 c0       	rjmp	.+44     	; 0x89cc <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    89a0:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    89a4:	10 92 8e 4a 	sts	0x4A8E, r1	; 0x804a8e <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    89a8:	10 92 8a 4a 	sts	0x4A8A, r1	; 0x804a8a <_ZZ13util_delay_msE14countdownValue>
    89ac:	10 92 8b 4a 	sts	0x4A8B, r1	; 0x804a8b <_ZZ13util_delay_msE14countdownValue+0x1>
    89b0:	10 92 8c 4a 	sts	0x4A8C, r1	; 0x804a8c <_ZZ13util_delay_msE14countdownValue+0x2>
    89b4:	10 92 8d 4a 	sts	0x4A8D, r1	; 0x804a8d <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    89b8:	10 92 8f 4a 	sts	0x4A8F, r1	; 0x804a8f <_ZL12g_ms_counter>
    89bc:	10 92 90 4a 	sts	0x4A90, r1	; 0x804a90 <_ZL12g_ms_counter+0x1>
    89c0:	10 92 91 4a 	sts	0x4A91, r1	; 0x804a91 <_ZL12g_ms_counter+0x2>
    89c4:	10 92 92 4a 	sts	0x4A92, r1	; 0x804a92 <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    89c8:	80 e0       	ldi	r24, 0x00	; 0
    89ca:	03 c0       	rjmp	.+6      	; 0x89d2 <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    89cc:	81 e0       	ldi	r24, 0x01	; 1
    89ce:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    89d2:	1f 91       	pop	r17
    89d4:	0f 91       	pop	r16
    89d6:	08 95       	ret

000089d8 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    89d8:	1f 92       	push	r1
    89da:	0f 92       	push	r0
    89dc:	0f b6       	in	r0, 0x3f	; 63
    89de:	0f 92       	push	r0
    89e0:	11 24       	eor	r1, r1
    89e2:	8f 93       	push	r24
    89e4:	9f 93       	push	r25
    89e6:	af 93       	push	r26
    89e8:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    89ea:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    89ee:	80 ff       	sbrs	r24, 0
    89f0:	1d c0       	rjmp	.+58     	; 0x8a2c <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    89f2:	80 91 8f 4a 	lds	r24, 0x4A8F	; 0x804a8f <_ZL12g_ms_counter>
    89f6:	90 91 90 4a 	lds	r25, 0x4A90	; 0x804a90 <_ZL12g_ms_counter+0x1>
    89fa:	a0 91 91 4a 	lds	r26, 0x4A91	; 0x804a91 <_ZL12g_ms_counter+0x2>
    89fe:	b0 91 92 4a 	lds	r27, 0x4A92	; 0x804a92 <_ZL12g_ms_counter+0x3>
    8a02:	00 97       	sbiw	r24, 0x00	; 0
    8a04:	a1 05       	cpc	r26, r1
    8a06:	b1 05       	cpc	r27, r1
    8a08:	61 f0       	breq	.+24     	; 0x8a22 <__vector_13+0x4a>
		{
			g_ms_counter--;	
    8a0a:	01 97       	sbiw	r24, 0x01	; 1
    8a0c:	a1 09       	sbc	r26, r1
    8a0e:	b1 09       	sbc	r27, r1
    8a10:	80 93 8f 4a 	sts	0x4A8F, r24	; 0x804a8f <_ZL12g_ms_counter>
    8a14:	90 93 90 4a 	sts	0x4A90, r25	; 0x804a90 <_ZL12g_ms_counter+0x1>
    8a18:	a0 93 91 4a 	sts	0x4A91, r26	; 0x804a91 <_ZL12g_ms_counter+0x2>
    8a1c:	b0 93 92 4a 	sts	0x4A92, r27	; 0x804a92 <_ZL12g_ms_counter+0x3>
    8a20:	02 c0       	rjmp	.+4      	; 0x8a26 <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8a22:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    8a26:	81 e0       	ldi	r24, 0x01	; 1
    8a28:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    8a2c:	bf 91       	pop	r27
    8a2e:	af 91       	pop	r26
    8a30:	9f 91       	pop	r25
    8a32:	8f 91       	pop	r24
    8a34:	0f 90       	pop	r0
    8a36:	0f be       	out	0x3f, r0	; 63
    8a38:	0f 90       	pop	r0
    8a3a:	1f 90       	pop	r1
    8a3c:	18 95       	reti

00008a3e <_Z14txSetFrequencyPmb>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
    8a3e:	0f 93       	push	r16
    8a40:	1f 93       	push	r17
    8a42:	cf 93       	push	r28
    8a44:	df 93       	push	r29
    8a46:	fc 01       	movw	r30, r24
    8a48:	46 2f       	mov	r20, r22
		bool err = false;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    8a4a:	60 81       	ld	r22, Z
    8a4c:	71 81       	ldd	r23, Z+1	; 0x01
    8a4e:	82 81       	ldd	r24, Z+2	; 0x02
    8a50:	93 81       	ldd	r25, Z+3	; 0x03
    8a52:	8b 01       	movw	r16, r22
    8a54:	9c 01       	movw	r18, r24
    8a56:	01 5e       	subi	r16, 0xE1	; 225
    8a58:	17 46       	sbci	r17, 0x67	; 103
    8a5a:	25 43       	sbci	r18, 0x35	; 53
    8a5c:	31 09       	sbc	r19, r1
    8a5e:	0f 31       	cpi	r16, 0x1F	; 31
    8a60:	11 4a       	sbci	r17, 0xA1	; 161
    8a62:	27 40       	sbci	r18, 0x07	; 7
    8a64:	31 05       	cpc	r19, r1
    8a66:	a8 f4       	brcc	.+42     	; 0x8a92 <_Z14txSetFrequencyPmb+0x54>
    8a68:	24 2f       	mov	r18, r20
    8a6a:	ef 01       	movw	r28, r30
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
    8a6c:	41 e0       	ldi	r20, 0x01	; 1
    8a6e:	0e 94 e2 42 	call	0x85c4	; 0x85c4 <si5351_set_freq>
    8a72:	81 11       	cpse	r24, r1
    8a74:	10 c0       	rjmp	.+32     	; 0x8a96 <_Z14txSetFrequencyPmb+0x58>
			{
				err = true; 
			}
			else
			{
				g_80m_frequency = *freq;
    8a76:	88 81       	ld	r24, Y
    8a78:	99 81       	ldd	r25, Y+1	; 0x01
    8a7a:	aa 81       	ldd	r26, Y+2	; 0x02
    8a7c:	bb 81       	ldd	r27, Y+3	; 0x03
    8a7e:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    8a82:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    8a86:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    8a8a:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
		bool err = false;
    8a8e:	80 e0       	ldi	r24, 0x00	; 0
    8a90:	03 c0       	rjmp	.+6      	; 0x8a98 <_Z14txSetFrequencyPmb+0x5a>
    8a92:	80 e0       	ldi	r24, 0x00	; 0
    8a94:	01 c0       	rjmp	.+2      	; 0x8a98 <_Z14txSetFrequencyPmb+0x5a>

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
			{
				err = true; 
    8a96:	81 e0       	ldi	r24, 0x01	; 1
				g_80m_frequency = *freq;
			}
		}

		return(err);
	}
    8a98:	df 91       	pop	r29
    8a9a:	cf 91       	pop	r28
    8a9c:	1f 91       	pop	r17
    8a9e:	0f 91       	pop	r16
    8aa0:	08 95       	ret

00008aa2 <_Z14txGetFrequencyv>:

	Frequency_Hz txGetFrequency(void)
	{
		return( g_80m_frequency);
    8aa2:	60 91 2c 40 	lds	r22, 0x402C	; 0x80402c <g_80m_frequency>
    8aa6:	70 91 2d 40 	lds	r23, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    8aaa:	80 91 2e 40 	lds	r24, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    8aae:	90 91 2f 40 	lds	r25, 0x402F	; 0x80402f <g_80m_frequency+0x3>
	}
    8ab2:	08 95       	ret

00008ab4 <_Z18powerToTransmitterb>:

	EC powerToTransmitter(bool on)
	{
		fet_driver(on);
    8ab4:	0e 94 b8 29 	call	0x5370	; 0x5370 <_Z10fet_driverb>

		return(ERROR_CODE_NO_ERROR);
	}
    8ab8:	80 e0       	ldi	r24, 0x00	; 0
    8aba:	08 95       	ret

00008abc <_Z14keyTransmitterb>:

	void keyTransmitter(bool on)
	{
		if(g_tx_initialized)
    8abc:	90 91 93 4a 	lds	r25, 0x4A93	; 0x804a93 <_ZL16g_tx_initialized>
    8ac0:	99 23       	and	r25, r25
    8ac2:	c1 f0       	breq	.+48     	; 0x8af4 <_Z14keyTransmitterb+0x38>
		{			
			if(on)
    8ac4:	88 23       	and	r24, r24
    8ac6:	71 f0       	breq	.+28     	; 0x8ae4 <_Z14keyTransmitterb+0x28>
			{
				if(!g_transmitter_keyed)
    8ac8:	80 91 94 4a 	lds	r24, 0x4A94	; 0x804a94 <_ZL19g_transmitter_keyed>
    8acc:	81 11       	cpse	r24, r1
    8ace:	12 c0       	rjmp	.+36     	; 0x8af4 <_Z14keyTransmitterb+0x38>
				{
					if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED) == ERROR_CODE_NO_ERROR)
    8ad0:	61 e0       	ldi	r22, 0x01	; 1
    8ad2:	81 e0       	ldi	r24, 0x01	; 1
    8ad4:	0e 94 58 41 	call	0x82b0	; 0x82b0 <si5351_clock_enable>
    8ad8:	81 11       	cpse	r24, r1
    8ada:	0c c0       	rjmp	.+24     	; 0x8af4 <_Z14keyTransmitterb+0x38>
					{
						g_transmitter_keyed = true;
    8adc:	81 e0       	ldi	r24, 0x01	; 1
    8ade:	80 93 94 4a 	sts	0x4A94, r24	; 0x804a94 <_ZL19g_transmitter_keyed>
    8ae2:	08 95       	ret
					}
				}
			}
			else
			{
				if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED) == ERROR_CODE_NO_ERROR)
    8ae4:	60 e0       	ldi	r22, 0x00	; 0
    8ae6:	81 e0       	ldi	r24, 0x01	; 1
    8ae8:	0e 94 58 41 	call	0x82b0	; 0x82b0 <si5351_clock_enable>
    8aec:	81 11       	cpse	r24, r1
    8aee:	02 c0       	rjmp	.+4      	; 0x8af4 <_Z14keyTransmitterb+0x38>
				{
					g_transmitter_keyed = false;
    8af0:	10 92 94 4a 	sts	0x4A94, r1	; 0x804a94 <_ZL19g_transmitter_keyed>
    8af4:	08 95       	ret

00008af6 <_Z12txGetPowerMwv>:
		}
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
    8af6:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    8afa:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
	}
    8afe:	08 95       	ret

00008b00 <_Z15txSetParametersPjPb>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, bool* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, bool* enableDriverPwr) */
	{
    8b00:	cf 93       	push	r28
    8b02:	df 93       	push	r29
    8b04:	cd b7       	in	r28, 0x3d	; 61
    8b06:	de b7       	in	r29, 0x3e	; 62
    8b08:	2b 97       	sbiw	r28, 0x0b	; 11
    8b0a:	cd bf       	out	0x3d, r28	; 61
    8b0c:	de bf       	out	0x3e, r29	; 62
    8b0e:	88 87       	std	Y+8, r24	; 0x08
    8b10:	99 87       	std	Y+9, r25	; 0x09
    8b12:	6a 87       	std	Y+10, r22	; 0x0a
    8b14:	7b 87       	std	Y+11, r23	; 0x0b
		bool err = false;
    8b16:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    8b18:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    8b1a:	1b 82       	std	Y+3, r1	; 0x03
    8b1c:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW != null)
    8b1e:	88 85       	ldd	r24, Y+8	; 0x08
    8b20:	99 85       	ldd	r25, Y+9	; 0x09
    8b22:	89 2b       	or	r24, r25
    8b24:	09 f4       	brne	.+2      	; 0x8b28 <_Z15txSetParametersPjPb+0x28>
    8b26:	64 c0       	rjmp	.+200    	; 0x8bf0 <_Z15txSetParametersPjPb+0xf0>
		{
			power = *power_mW;
    8b28:	88 85       	ldd	r24, Y+8	; 0x08
    8b2a:	99 85       	ldd	r25, Y+9	; 0x09
    8b2c:	fc 01       	movw	r30, r24
    8b2e:	80 81       	ld	r24, Z
    8b30:	91 81       	ldd	r25, Z+1	; 0x01
    8b32:	8b 83       	std	Y+3, r24	; 0x03
    8b34:	9c 83       	std	Y+4, r25	; 0x04

			if(power <= MAX_TX_POWER_80M_MW)
    8b36:	8b 81       	ldd	r24, Y+3	; 0x03
    8b38:	9c 81       	ldd	r25, Y+4	; 0x04
    8b3a:	89 38       	cpi	r24, 0x89	; 137
    8b3c:	93 41       	sbci	r25, 0x13	; 19
    8b3e:	08 f0       	brcs	.+2      	; 0x8b42 <_Z15txSetParametersPjPb+0x42>
    8b40:	53 c0       	rjmp	.+166    	; 0x8be8 <_Z15txSetParametersPjPb+0xe8>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    8b42:	9e 01       	movw	r18, r28
    8b44:	29 5f       	subi	r18, 0xF9	; 249
    8b46:	3f 4f       	sbci	r19, 0xFF	; 255
    8b48:	ae 01       	movw	r20, r28
    8b4a:	4a 5f       	subi	r20, 0xFA	; 250
    8b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    8b4e:	be 01       	movw	r22, r28
    8b50:	6b 5f       	subi	r22, 0xFB	; 251
    8b52:	7f 4f       	sbci	r23, 0xFF	; 255
    8b54:	ce 01       	movw	r24, r28
    8b56:	03 96       	adiw	r24, 0x03	; 3
    8b58:	0e 94 58 46 	call	0x8cb0	; 0x8cb0 <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    8b5c:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    8b5e:	81 e0       	ldi	r24, 0x01	; 1
    8b60:	9a 81       	ldd	r25, Y+2	; 0x02
    8b62:	9f 3c       	cpi	r25, 0xCF	; 207
    8b64:	09 f0       	breq	.+2      	; 0x8b68 <_Z15txSetParametersPjPb+0x68>
    8b66:	80 e0       	ldi	r24, 0x00	; 0
    8b68:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    8b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    8b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    8b6e:	21 e0       	ldi	r18, 0x01	; 1
    8b70:	89 2b       	or	r24, r25
    8b72:	09 f0       	breq	.+2      	; 0x8b76 <_Z15txSetParametersPjPb+0x76>
    8b74:	20 e0       	ldi	r18, 0x00	; 0
    8b76:	20 93 36 40 	sts	0x4036, r18	; 0x804036 <g_tx_power_is_zero>

				if(!err)
    8b7a:	99 81       	ldd	r25, Y+1	; 0x01
    8b7c:	81 e0       	ldi	r24, 0x01	; 1
    8b7e:	89 27       	eor	r24, r25
    8b80:	88 23       	and	r24, r24
    8b82:	51 f1       	breq	.+84     	; 0x8bd8 <_Z15txSetParametersPjPb+0xd8>
				{
					g_80m_power_level_mW = power;
    8b84:	8b 81       	ldd	r24, Y+3	; 0x03
    8b86:	9c 81       	ldd	r25, Y+4	; 0x04
    8b88:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    8b8c:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    8b90:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <_Z18txIsAntennaForBandv>
    8b94:	88 23       	and	r24, r24
    8b96:	31 f0       	breq	.+12     	; 0x8ba4 <_Z15txSetParametersPjPb+0xa4>
					{
						DAC0_setVal(drainVoltageDAC);
    8b98:	8d 81       	ldd	r24, Y+5	; 0x05
    8b9a:	88 2f       	mov	r24, r24
    8b9c:	90 e0       	ldi	r25, 0x00	; 0
    8b9e:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_Z11DAC0_setValj>
    8ba2:	07 c0       	rjmp	.+14     	; 0x8bb2 <_Z15txSetParametersPjPb+0xb2>
					}
					else
					{
						g_tx_power_is_zero = true;
    8ba4:	81 e0       	ldi	r24, 0x01	; 1
    8ba6:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>
						err = true;
    8baa:	81 e0       	ldi	r24, 0x01	; 1
    8bac:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    8bae:	86 ef       	ldi	r24, 0xF6	; 246
    8bb0:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || (drainVoltageDAC == 0))
    8bb2:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    8bb6:	88 23       	and	r24, r24
    8bb8:	19 f4       	brne	.+6      	; 0x8bc0 <_Z15txSetParametersPjPb+0xc0>
    8bba:	8d 81       	ldd	r24, Y+5	; 0x05
    8bbc:	88 23       	and	r24, r24
    8bbe:	11 f4       	brne	.+4      	; 0x8bc4 <_Z15txSetParametersPjPb+0xc4>
    8bc0:	81 e0       	ldi	r24, 0x01	; 1
    8bc2:	01 c0       	rjmp	.+2      	; 0x8bc6 <_Z15txSetParametersPjPb+0xc6>
    8bc4:	80 e0       	ldi	r24, 0x00	; 0
    8bc6:	88 23       	and	r24, r24
    8bc8:	21 f0       	breq	.+8      	; 0x8bd2 <_Z15txSetParametersPjPb+0xd2>
					{
						powerToTransmitter(OFF); /* Turn off FET driver */
    8bca:	80 e0       	ldi	r24, 0x00	; 0
    8bcc:	0e 94 5a 45 	call	0x8ab4	; 0x8ab4 <_Z18powerToTransmitterb>
    8bd0:	03 c0       	rjmp	.+6      	; 0x8bd8 <_Z15txSetParametersPjPb+0xd8>
					}
					else
					{
						powerToTransmitter(ON); /* Turn on FET driver */
    8bd2:	81 e0       	ldi	r24, 0x01	; 1
    8bd4:	0e 94 5a 45 	call	0x8ab4	; 0x8ab4 <_Z18powerToTransmitterb>
					}
				}

				*power_mW = power;
    8bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    8bda:	3c 81       	ldd	r19, Y+4	; 0x04
    8bdc:	88 85       	ldd	r24, Y+8	; 0x08
    8bde:	99 85       	ldd	r25, Y+9	; 0x09
    8be0:	fc 01       	movw	r30, r24
    8be2:	20 83       	st	Z, r18
    8be4:	31 83       	std	Z+1, r19	; 0x01
    8be6:	04 c0       	rjmp	.+8      	; 0x8bf0 <_Z15txSetParametersPjPb+0xf0>
			}
			else
			{
				err = true;
    8be8:	81 e0       	ldi	r24, 0x01	; 1
    8bea:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8bec:	85 ef       	ldi	r24, 0xF5	; 245
    8bee:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    8bf0:	99 81       	ldd	r25, Y+1	; 0x01
    8bf2:	81 e0       	ldi	r24, 0x01	; 1
    8bf4:	89 27       	eor	r24, r25
    8bf6:	88 23       	and	r24, r24
    8bf8:	51 f0       	breq	.+20     	; 0x8c0e <_Z15txSetParametersPjPb+0x10e>
		{
			if(enableDriverPwr != NULL)
    8bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    8bfc:	9b 85       	ldd	r25, Y+11	; 0x0b
    8bfe:	89 2b       	or	r24, r25
    8c00:	31 f0       	breq	.+12     	; 0x8c0e <_Z15txSetParametersPjPb+0x10e>
			{
				powerToTransmitter(*enableDriverPwr);
    8c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    8c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    8c06:	fc 01       	movw	r30, r24
    8c08:	80 81       	ld	r24, Z
    8c0a:	0e 94 5a 45 	call	0x8ab4	; 0x8ab4 <_Z18powerToTransmitterb>
			}
		}

		return(code);
    8c0e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    8c10:	2b 96       	adiw	r28, 0x0b	; 11
    8c12:	cd bf       	out	0x3d, r28	; 61
    8c14:	de bf       	out	0x3e, r29	; 62
    8c16:	df 91       	pop	r29
    8c18:	cf 91       	pop	r28
    8c1a:	08 95       	ret

00008c1c <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    8c1c:	1f 93       	push	r17
    8c1e:	cf 93       	push	r28
    8c20:	df 93       	push	r29
    8c22:	00 d0       	rcall	.+0      	; 0x8c24 <_Z16init_transmitterv+0x8>
    8c24:	cd b7       	in	r28, 0x3d	; 61
    8c26:	de b7       	in	r29, 0x3e	; 62
		EC code;
		bool err;
		
		DAC0_init();
    8c28:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <_Z9DAC0_initv>

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    8c2c:	40 e0       	ldi	r20, 0x00	; 0
    8c2e:	50 e0       	ldi	r21, 0x00	; 0
    8c30:	ba 01       	movw	r22, r20
    8c32:	80 e4       	ldi	r24, 0x40	; 64
    8c34:	0e 94 a6 40 	call	0x814c	; 0x814c <si5351_init>
    8c38:	81 11       	cpse	r24, r1
    8c3a:	30 c0       	rjmp	.+96     	; 0x8c9c <_Z16init_transmitterv+0x80>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
		}

		if((code = txSetParameters(NULL, NULL)))
    8c3c:	60 e0       	ldi	r22, 0x00	; 0
    8c3e:	70 e0       	ldi	r23, 0x00	; 0
    8c40:	80 e0       	ldi	r24, 0x00	; 0
    8c42:	90 e0       	ldi	r25, 0x00	; 0
    8c44:	0e 94 80 45 	call	0x8b00	; 0x8b00 <_Z15txSetParametersPjPb>
    8c48:	81 11       	cpse	r24, r1
    8c4a:	2c c0       	rjmp	.+88     	; 0x8ca4 <_Z16init_transmitterv+0x88>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    8c4c:	63 e0       	ldi	r22, 0x03	; 3
    8c4e:	81 e0       	ldi	r24, 0x01	; 1
    8c50:	0e 94 97 41 	call	0x832e	; 0x832e <si5351_drive_strength>
    8c54:	81 11       	cpse	r24, r1
    8c56:	26 c0       	rjmp	.+76     	; 0x8ca4 <_Z16init_transmitterv+0x88>
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8c58:	60 e0       	ldi	r22, 0x00	; 0
    8c5a:	81 e0       	ldi	r24, 0x01	; 1
    8c5c:	0e 94 58 41 	call	0x82b0	; 0x82b0 <si5351_clock_enable>
    8c60:	18 2f       	mov	r17, r24
    8c62:	81 11       	cpse	r24, r1
    8c64:	1d c0       	rjmp	.+58     	; 0x8ca0 <_Z16init_transmitterv+0x84>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    8c66:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    8c6a:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    8c6e:	89 83       	std	Y+1, r24	; 0x01
    8c70:	9a 83       	std	Y+2, r25	; 0x02
		
		err = txSetFrequency((Frequency_Hz*)&g_80m_frequency, true);
    8c72:	61 e0       	ldi	r22, 0x01	; 1
    8c74:	8c e2       	ldi	r24, 0x2C	; 44
    8c76:	90 e4       	ldi	r25, 0x40	; 64
    8c78:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <_Z14txSetFrequencyPmb>
		if(!err)
    8c7c:	81 11       	cpse	r24, r1
    8c7e:	11 c0       	rjmp	.+34     	; 0x8ca2 <_Z16init_transmitterv+0x86>
		{
			code = txSetParameters(&pwr_mW, NULL);
    8c80:	60 e0       	ldi	r22, 0x00	; 0
    8c82:	70 e0       	ldi	r23, 0x00	; 0
    8c84:	ce 01       	movw	r24, r28
    8c86:	01 96       	adiw	r24, 0x01	; 1
    8c88:	0e 94 80 45 	call	0x8b00	; 0x8b00 <_Z15txSetParametersPjPb>
			if((code == ERROR_CODE_NO_ERROR) || (code == ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING))
    8c8c:	88 23       	and	r24, r24
    8c8e:	11 f0       	breq	.+4      	; 0x8c94 <_Z16init_transmitterv+0x78>
    8c90:	86 3f       	cpi	r24, 0xF6	; 246
    8c92:	41 f4       	brne	.+16     	; 0x8ca4 <_Z16init_transmitterv+0x88>
			{
				g_tx_initialized = true;
    8c94:	91 e0       	ldi	r25, 0x01	; 1
    8c96:	90 93 93 4a 	sts	0x4A93, r25	; 0x804a93 <_ZL16g_tx_initialized>
    8c9a:	04 c0       	rjmp	.+8      	; 0x8ca4 <_Z16init_transmitterv+0x88>
		
		DAC0_init();

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
    8c9c:	82 ed       	ldi	r24, 0xD2	; 210
    8c9e:	02 c0       	rjmp	.+4      	; 0x8ca4 <_Z16init_transmitterv+0x88>
    8ca0:	01 c0       	rjmp	.+2      	; 0x8ca4 <_Z16init_transmitterv+0x88>
		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8ca2:	81 2f       	mov	r24, r17
				g_tx_initialized = true;
			}
		}

		return( code);
	}
    8ca4:	0f 90       	pop	r0
    8ca6:	0f 90       	pop	r0
    8ca8:	df 91       	pop	r29
    8caa:	cf 91       	pop	r28
    8cac:	1f 91       	pop	r17
    8cae:	08 95       	ret

00008cb0 <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    8cb0:	cf 93       	push	r28
    8cb2:	df 93       	push	r29
    8cb4:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    8cb6:	89 2b       	or	r24, r25
    8cb8:	09 f4       	brne	.+2      	; 0x8cbc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    8cba:	b8 c0       	rjmp	.+368    	; 0x8e2c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    8cbc:	ed 91       	ld	r30, X+
    8cbe:	fc 91       	ld	r31, X
    8cc0:	11 97       	sbiw	r26, 0x01	; 1
    8cc2:	e9 38       	cpi	r30, 0x89	; 137
    8cc4:	83 e1       	ldi	r24, 0x13	; 19
    8cc6:	f8 07       	cpc	r31, r24
    8cc8:	14 f4       	brge	.+4      	; 0x8cce <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    8cca:	80 e0       	ldi	r24, 0x00	; 0
    8ccc:	01 c0       	rjmp	.+2      	; 0x8cd0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8cce:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    8cd0:	e9 38       	cpi	r30, 0x89	; 137
    8cd2:	93 e1       	ldi	r25, 0x13	; 19
    8cd4:	f9 07       	cpc	r31, r25
    8cd6:	2c f4       	brge	.+10     	; 0x8ce2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    8cd8:	ff 23       	and	r31, r31
    8cda:	2c f4       	brge	.+10     	; 0x8ce6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8cdc:	e0 e0       	ldi	r30, 0x00	; 0
    8cde:	f0 e0       	ldi	r31, 0x00	; 0
    8ce0:	02 c0       	rjmp	.+4      	; 0x8ce6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8ce2:	e8 e8       	ldi	r30, 0x88	; 136
    8ce4:	f3 e1       	ldi	r31, 0x13	; 19
    8ce6:	ef 01       	movw	r28, r30
    8ce8:	ed 93       	st	X+, r30
    8cea:	fc 93       	st	X, r31
    8cec:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    8cee:	e5 30       	cpi	r30, 0x05	; 5
    8cf0:	f1 05       	cpc	r31, r1
    8cf2:	20 f4       	brcc	.+8      	; 0x8cfc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    8cf4:	1d 92       	st	X+, r1
    8cf6:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    8cf8:	e0 e0       	ldi	r30, 0x00	; 0
    8cfa:	8d c0       	rjmp	.+282    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    8cfc:	e2 33       	cpi	r30, 0x32	; 50
    8cfe:	f1 05       	cpc	r31, r1
    8d00:	30 f4       	brcc	.+12     	; 0x8d0e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    8d02:	ea e0       	ldi	r30, 0x0A	; 10
    8d04:	f0 e0       	ldi	r31, 0x00	; 0
    8d06:	ed 93       	st	X+, r30
    8d08:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    8d0a:	e1 e0       	ldi	r30, 0x01	; 1
    8d0c:	84 c0       	rjmp	.+264    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    8d0e:	e6 39       	cpi	r30, 0x96	; 150
    8d10:	f1 05       	cpc	r31, r1
    8d12:	30 f4       	brcc	.+12     	; 0x8d20 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    8d14:	e4 e6       	ldi	r30, 0x64	; 100
    8d16:	f0 e0       	ldi	r31, 0x00	; 0
    8d18:	ed 93       	st	X+, r30
    8d1a:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    8d1c:	e2 e0       	ldi	r30, 0x02	; 2
    8d1e:	7b c0       	rjmp	.+246    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    8d20:	ea 3f       	cpi	r30, 0xFA	; 250
    8d22:	f1 05       	cpc	r31, r1
    8d24:	30 f4       	brcc	.+12     	; 0x8d32 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    8d26:	e8 ec       	ldi	r30, 0xC8	; 200
    8d28:	f0 e0       	ldi	r31, 0x00	; 0
    8d2a:	ed 93       	st	X+, r30
    8d2c:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    8d2e:	e3 e0       	ldi	r30, 0x03	; 3
    8d30:	72 c0       	rjmp	.+228    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    8d32:	ce 35       	cpi	r28, 0x5E	; 94
    8d34:	e1 e0       	ldi	r30, 0x01	; 1
    8d36:	de 07       	cpc	r29, r30
    8d38:	30 f4       	brcc	.+12     	; 0x8d46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    8d3a:	ec e2       	ldi	r30, 0x2C	; 44
    8d3c:	f1 e0       	ldi	r31, 0x01	; 1
    8d3e:	ed 93       	st	X+, r30
    8d40:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    8d42:	e4 e0       	ldi	r30, 0x04	; 4
    8d44:	68 c0       	rjmp	.+208    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    8d46:	c2 3c       	cpi	r28, 0xC2	; 194
    8d48:	f1 e0       	ldi	r31, 0x01	; 1
    8d4a:	df 07       	cpc	r29, r31
    8d4c:	30 f4       	brcc	.+12     	; 0x8d5a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    8d4e:	e0 e9       	ldi	r30, 0x90	; 144
    8d50:	f1 e0       	ldi	r31, 0x01	; 1
    8d52:	ed 93       	st	X+, r30
    8d54:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    8d56:	e5 e0       	ldi	r30, 0x05	; 5
    8d58:	5e c0       	rjmp	.+188    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    8d5a:	c6 32       	cpi	r28, 0x26	; 38
    8d5c:	92 e0       	ldi	r25, 0x02	; 2
    8d5e:	d9 07       	cpc	r29, r25
    8d60:	30 f4       	brcc	.+12     	; 0x8d6e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    8d62:	e4 ef       	ldi	r30, 0xF4	; 244
    8d64:	f1 e0       	ldi	r31, 0x01	; 1
    8d66:	ed 93       	st	X+, r30
    8d68:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    8d6a:	e6 e0       	ldi	r30, 0x06	; 6
    8d6c:	54 c0       	rjmp	.+168    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    8d6e:	ca 38       	cpi	r28, 0x8A	; 138
    8d70:	e2 e0       	ldi	r30, 0x02	; 2
    8d72:	de 07       	cpc	r29, r30
    8d74:	30 f4       	brcc	.+12     	; 0x8d82 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    8d76:	e8 e5       	ldi	r30, 0x58	; 88
    8d78:	f2 e0       	ldi	r31, 0x02	; 2
    8d7a:	ed 93       	st	X+, r30
    8d7c:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    8d7e:	e7 e0       	ldi	r30, 0x07	; 7
    8d80:	4a c0       	rjmp	.+148    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    8d82:	c4 38       	cpi	r28, 0x84	; 132
    8d84:	f3 e0       	ldi	r31, 0x03	; 3
    8d86:	df 07       	cpc	r29, r31
    8d88:	30 f4       	brcc	.+12     	; 0x8d96 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    8d8a:	e0 e2       	ldi	r30, 0x20	; 32
    8d8c:	f3 e0       	ldi	r31, 0x03	; 3
    8d8e:	ed 93       	st	X+, r30
    8d90:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    8d92:	e8 e0       	ldi	r30, 0x08	; 8
    8d94:	40 c0       	rjmp	.+128    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    8d96:	c2 3e       	cpi	r28, 0xE2	; 226
    8d98:	94 e0       	ldi	r25, 0x04	; 4
    8d9a:	d9 07       	cpc	r29, r25
    8d9c:	30 f4       	brcc	.+12     	; 0x8daa <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    8d9e:	e8 ee       	ldi	r30, 0xE8	; 232
    8da0:	f3 e0       	ldi	r31, 0x03	; 3
    8da2:	ed 93       	st	X+, r30
    8da4:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    8da6:	e9 e0       	ldi	r30, 0x09	; 9
    8da8:	36 c0       	rjmp	.+108    	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    8daa:	c6 3d       	cpi	r28, 0xD6	; 214
    8dac:	e6 e0       	ldi	r30, 0x06	; 6
    8dae:	de 07       	cpc	r29, r30
    8db0:	30 f4       	brcc	.+12     	; 0x8dbe <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    8db2:	ec ed       	ldi	r30, 0xDC	; 220
    8db4:	f5 e0       	ldi	r31, 0x05	; 5
    8db6:	ed 93       	st	X+, r30
    8db8:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    8dba:	ea e0       	ldi	r30, 0x0A	; 10
    8dbc:	2c c0       	rjmp	.+88     	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    8dbe:	ca 3c       	cpi	r28, 0xCA	; 202
    8dc0:	f8 e0       	ldi	r31, 0x08	; 8
    8dc2:	df 07       	cpc	r29, r31
    8dc4:	30 f4       	brcc	.+12     	; 0x8dd2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    8dc6:	e0 ed       	ldi	r30, 0xD0	; 208
    8dc8:	f7 e0       	ldi	r31, 0x07	; 7
    8dca:	ed 93       	st	X+, r30
    8dcc:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    8dce:	eb e0       	ldi	r30, 0x0B	; 11
    8dd0:	22 c0       	rjmp	.+68     	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    8dd2:	ce 3b       	cpi	r28, 0xBE	; 190
    8dd4:	9a e0       	ldi	r25, 0x0A	; 10
    8dd6:	d9 07       	cpc	r29, r25
    8dd8:	30 f4       	brcc	.+12     	; 0x8de6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    8dda:	e4 ec       	ldi	r30, 0xC4	; 196
    8ddc:	f9 e0       	ldi	r31, 0x09	; 9
    8dde:	ed 93       	st	X+, r30
    8de0:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    8de2:	ec e0       	ldi	r30, 0x0C	; 12
    8de4:	18 c0       	rjmp	.+48     	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    8de6:	cc 3a       	cpi	r28, 0xAC	; 172
    8de8:	ed e0       	ldi	r30, 0x0D	; 13
    8dea:	de 07       	cpc	r29, r30
    8dec:	30 f4       	brcc	.+12     	; 0x8dfa <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    8dee:	e8 eb       	ldi	r30, 0xB8	; 184
    8df0:	fb e0       	ldi	r31, 0x0B	; 11
    8df2:	ed 93       	st	X+, r30
    8df4:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    8df6:	ed e0       	ldi	r30, 0x0D	; 13
    8df8:	0e c0       	rjmp	.+28     	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    8dfa:	c4 39       	cpi	r28, 0x94	; 148
    8dfc:	d1 41       	sbci	r29, 0x11	; 17
    8dfe:	30 f4       	brcc	.+12     	; 0x8e0c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    8e00:	e0 ea       	ldi	r30, 0xA0	; 160
    8e02:	ff e0       	ldi	r31, 0x0F	; 15
    8e04:	ed 93       	st	X+, r30
    8e06:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    8e08:	ee e0       	ldi	r30, 0x0E	; 14
    8e0a:	05 c0       	rjmp	.+10     	; 0x8e16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    8e0c:	e8 e8       	ldi	r30, 0x88	; 136
    8e0e:	f3 e1       	ldi	r31, 0x13	; 19
    8e10:	ed 93       	st	X+, r30
    8e12:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    8e14:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    8e16:	f0 e0       	ldi	r31, 0x00	; 0
    8e18:	e9 5c       	subi	r30, 0xC9	; 201
    8e1a:	ff 4b       	sbci	r31, 0xBF	; 191
    8e1c:	90 81       	ld	r25, Z
    8e1e:	fb 01       	movw	r30, r22
    8e20:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    8e22:	fa 01       	movw	r30, r20
    8e24:	10 82       	st	Z, r1
	*modLevelLow = 0;
    8e26:	f9 01       	movw	r30, r18
    8e28:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    8e2a:	01 c0       	rjmp	.+2      	; 0x8e2e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    8e2c:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    8e2e:	df 91       	pop	r29
    8e30:	cf 91       	pop	r28
    8e32:	08 95       	ret

00008e34 <_Z18txIsAntennaForBandv>:

/**
 */
bool __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    8e34:	cf 93       	push	r28
    8e36:	df 93       	push	r29
    8e38:	1f 92       	push	r1
    8e3a:	cd b7       	in	r28, 0x3d	; 61
    8e3c:	de b7       	in	r29, 0x3e	; 62
	bool result = false;
    8e3e:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    8e40:	80 91 27 47 	lds	r24, 0x4727	; 0x804727 <g_antenna_connect_state>
    8e44:	88 2f       	mov	r24, r24
    8e46:	90 e0       	ldi	r25, 0x00	; 0
    8e48:	02 97       	sbiw	r24, 0x02	; 2
    8e4a:	09 f0       	breq	.+2      	; 0x8e4e <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    8e4c:	03 c0       	rjmp	.+6      	; 0x8e54 <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = true;
    8e4e:	81 e0       	ldi	r24, 0x01	; 1
    8e50:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    8e52:	00 00       	nop

		}
		break;
	}

	return( result);
    8e54:	89 81       	ldd	r24, Y+1	; 0x01
}
    8e56:	0f 90       	pop	r0
    8e58:	df 91       	pop	r29
    8e5a:	cf 91       	pop	r28
    8e5c:	08 95       	ret

00008e5e <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_enable_rx()
{
	USART4.CTRLB |= USART_RXEN_bm;
    8e5e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    8e62:	08 95       	ret

00008e64 <USART1_init>:
    8e64:	0e 94 25 4b 	call	0x964a	; 0x964a <__floatunsisf>
    8e68:	20 e0       	ldi	r18, 0x00	; 0
    8e6a:	30 e0       	ldi	r19, 0x00	; 0
    8e6c:	40 e8       	ldi	r20, 0x80	; 128
    8e6e:	51 e4       	ldi	r21, 0x41	; 65
    8e70:	0e 94 1d 4c 	call	0x983a	; 0x983a <__mulsf3>
    8e74:	9b 01       	movw	r18, r22
    8e76:	ac 01       	movw	r20, r24
    8e78:	60 e0       	ldi	r22, 0x00	; 0
    8e7a:	74 e2       	ldi	r23, 0x24	; 36
    8e7c:	84 e7       	ldi	r24, 0x74	; 116
    8e7e:	9d e4       	ldi	r25, 0x4D	; 77
    8e80:	0e 94 7d 4a 	call	0x94fa	; 0x94fa <__divsf3>
    8e84:	20 e0       	ldi	r18, 0x00	; 0
    8e86:	30 e0       	ldi	r19, 0x00	; 0
    8e88:	40 e0       	ldi	r20, 0x00	; 0
    8e8a:	5f e3       	ldi	r21, 0x3F	; 63
    8e8c:	0e 94 f5 49 	call	0x93ea	; 0x93ea <__addsf3>
    8e90:	0e 94 f6 4a 	call	0x95ec	; 0x95ec <__fixunssfsi>
    8e94:	e0 e2       	ldi	r30, 0x20	; 32
    8e96:	f8 e0       	ldi	r31, 0x08	; 8
    8e98:	60 87       	std	Z+8, r22	; 0x08
    8e9a:	71 87       	std	Z+9, r23	; 0x09
    8e9c:	80 e8       	ldi	r24, 0x80	; 128
    8e9e:	85 83       	std	Z+5, r24	; 0x05
    8ea0:	80 ec       	ldi	r24, 0xC0	; 192
    8ea2:	86 83       	std	Z+6, r24	; 0x06
    8ea4:	80 e0       	ldi	r24, 0x00	; 0
    8ea6:	08 95       	ret

00008ea8 <USART1_enable_tx>:
    8ea8:	e0 e2       	ldi	r30, 0x20	; 32
    8eaa:	f8 e0       	ldi	r31, 0x08	; 8
    8eac:	86 81       	ldd	r24, Z+6	; 0x06
    8eae:	80 64       	ori	r24, 0x40	; 64
    8eb0:	86 83       	std	Z+6, r24	; 0x06
    8eb2:	85 81       	ldd	r24, Z+5	; 0x05
    8eb4:	80 62       	ori	r24, 0x20	; 32
    8eb6:	85 83       	std	Z+5, r24	; 0x05
    8eb8:	08 95       	ret

00008eba <USART1_disable>:
    8eba:	e0 e2       	ldi	r30, 0x20	; 32
    8ebc:	f8 e0       	ldi	r31, 0x08	; 8
    8ebe:	86 81       	ldd	r24, Z+6	; 0x06
    8ec0:	8f 73       	andi	r24, 0x3F	; 63
    8ec2:	86 83       	std	Z+6, r24	; 0x06
    8ec4:	08 95       	ret

00008ec6 <USART1_get_data>:
    8ec6:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    8eca:	08 95       	ret

00008ecc <USART4_init>:
    8ecc:	0e 94 25 4b 	call	0x964a	; 0x964a <__floatunsisf>
    8ed0:	20 e0       	ldi	r18, 0x00	; 0
    8ed2:	30 e0       	ldi	r19, 0x00	; 0
    8ed4:	40 e8       	ldi	r20, 0x80	; 128
    8ed6:	51 e4       	ldi	r21, 0x41	; 65
    8ed8:	0e 94 1d 4c 	call	0x983a	; 0x983a <__mulsf3>
    8edc:	9b 01       	movw	r18, r22
    8ede:	ac 01       	movw	r20, r24
    8ee0:	60 e0       	ldi	r22, 0x00	; 0
    8ee2:	74 e2       	ldi	r23, 0x24	; 36
    8ee4:	84 e7       	ldi	r24, 0x74	; 116
    8ee6:	9d e4       	ldi	r25, 0x4D	; 77
    8ee8:	0e 94 7d 4a 	call	0x94fa	; 0x94fa <__divsf3>
    8eec:	20 e0       	ldi	r18, 0x00	; 0
    8eee:	30 e0       	ldi	r19, 0x00	; 0
    8ef0:	40 e0       	ldi	r20, 0x00	; 0
    8ef2:	5f e3       	ldi	r21, 0x3F	; 63
    8ef4:	0e 94 f5 49 	call	0x93ea	; 0x93ea <__addsf3>
    8ef8:	0e 94 f6 4a 	call	0x95ec	; 0x95ec <__fixunssfsi>
    8efc:	e0 e8       	ldi	r30, 0x80	; 128
    8efe:	f8 e0       	ldi	r31, 0x08	; 8
    8f00:	60 87       	std	Z+8, r22	; 0x08
    8f02:	71 87       	std	Z+9, r23	; 0x09
    8f04:	80 e8       	ldi	r24, 0x80	; 128
    8f06:	85 83       	std	Z+5, r24	; 0x05
    8f08:	80 ec       	ldi	r24, 0xC0	; 192
    8f0a:	86 83       	std	Z+6, r24	; 0x06
    8f0c:	80 e0       	ldi	r24, 0x00	; 0
    8f0e:	08 95       	ret

00008f10 <USART4_enable_tx>:
 *
 * \return Nothing
 */
void USART4_enable_tx()
{
	USART4.CTRLB |= USART_TXEN_bm;
    8f10:	e0 e8       	ldi	r30, 0x80	; 128
    8f12:	f8 e0       	ldi	r31, 0x08	; 8
    8f14:	86 81       	ldd	r24, Z+6	; 0x06
    8f16:	80 64       	ori	r24, 0x40	; 64
    8f18:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLA |= 1 << USART_DREIE_bp; /* Transmit Data Ready Interrupt Enable: enable */
    8f1a:	85 81       	ldd	r24, Z+5	; 0x05
    8f1c:	80 62       	ori	r24, 0x20	; 32
    8f1e:	85 83       	std	Z+5, r24	; 0x05
    8f20:	08 95       	ret

00008f22 <USART4_disable>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    8f22:	e0 e8       	ldi	r30, 0x80	; 128
    8f24:	f8 e0       	ldi	r31, 0x08	; 8
    8f26:	86 81       	ldd	r24, Z+6	; 0x06
    8f28:	8f 73       	andi	r24, 0x3F	; 63
    8f2a:	86 83       	std	Z+6, r24	; 0x06
    8f2c:	08 95       	ret

00008f2e <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    8f2e:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    8f32:	08 95       	ret

00008f34 <_Z7timeDifmm>:
    (ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    ((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
  }

  return result;
}
    8f34:	26 17       	cp	r18, r22
    8f36:	37 07       	cpc	r19, r23
    8f38:	48 07       	cpc	r20, r24
    8f3a:	59 07       	cpc	r21, r25
    8f3c:	28 f4       	brcc	.+10     	; 0x8f48 <_Z7timeDifmm+0x14>
    8f3e:	62 1b       	sub	r22, r18
    8f40:	73 0b       	sbc	r23, r19
    8f42:	84 0b       	sbc	r24, r20
    8f44:	95 0b       	sbc	r25, r21
    8f46:	08 95       	ret
    8f48:	62 1b       	sub	r22, r18
    8f4a:	73 0b       	sbc	r23, r19
    8f4c:	84 0b       	sbc	r24, r20
    8f4e:	95 0b       	sbc	r25, r21
    8f50:	08 95       	ret

00008f52 <_Z11only_digitsPc>:

/** 
 * Checks a string to see if it contains only numerical characters
 */
bool only_digits(char *s)
{
    8f52:	fc 01       	movw	r30, r24
	while(*s)
    8f54:	20 81       	ld	r18, Z
    8f56:	22 23       	and	r18, r18
    8f58:	49 f0       	breq	.+18     	; 0x8f6c <_Z11only_digitsPc+0x1a>
	{
		if(isdigit(*s++) == 0)
    8f5a:	31 96       	adiw	r30, 0x01	; 1
    8f5c:	30 e0       	ldi	r19, 0x00	; 0
    8f5e:	20 53       	subi	r18, 0x30	; 48
    8f60:	31 09       	sbc	r19, r1
    8f62:	2a 30       	cpi	r18, 0x0A	; 10
    8f64:	31 05       	cpc	r19, r1
    8f66:	b0 f3       	brcs	.-20     	; 0x8f54 <_Z11only_digitsPc+0x2>
		{
			return( false);
    8f68:	80 e0       	ldi	r24, 0x00	; 0
    8f6a:	08 95       	ret
		}
	}

	return( true);
    8f6c:	81 e0       	ldi	r24, 0x01	; 1
}
    8f6e:	08 95       	ret

00008f70 <_Z15frequencyStringPcm>:
 * result = pointer to a character sting to hold the frequency string
 * freq = the frequency value to be represented as a string
 * Returns 1 if an error is detected
 */
bool frequencyString(char* result, uint32_t freq)
{
    8f70:	ef 92       	push	r14
    8f72:	ff 92       	push	r15
    8f74:	0f 93       	push	r16
    8f76:	1f 93       	push	r17
    8f78:	cf 93       	push	r28
    8f7a:	df 93       	push	r29
    8f7c:	9c 01       	movw	r18, r24
	bool failure = true;
	
	if(!result)
    8f7e:	89 2b       	or	r24, r25
    8f80:	a9 f1       	breq	.+106    	; 0x8fec <_Z15frequencyStringPcm+0x7c>
	{
		return(failure);
	}
	
	if((freq > 3500000) && (freq < 4000000)) // Accept only a Hz value to be expressed in kHz
    8f82:	db 01       	movw	r26, r22
    8f84:	ca 01       	movw	r24, r20
    8f86:	81 5e       	subi	r24, 0xE1	; 225
    8f88:	97 46       	sbci	r25, 0x67	; 103
    8f8a:	a5 43       	sbci	r26, 0x35	; 53
    8f8c:	b1 09       	sbc	r27, r1
    8f8e:	8f 31       	cpi	r24, 0x1F	; 31
    8f90:	91 4a       	sbci	r25, 0xA1	; 161
    8f92:	a7 40       	sbci	r26, 0x07	; 7
    8f94:	b1 05       	cpc	r27, r1
    8f96:	60 f5       	brcc	.+88     	; 0x8ff0 <_Z15frequencyStringPcm+0x80>
    8f98:	cb 01       	movw	r24, r22
    8f9a:	ba 01       	movw	r22, r20
    8f9c:	e9 01       	movw	r28, r18
	{
		uint32_t frac = (freq % 1000)/100;		
    8f9e:	28 ee       	ldi	r18, 0xE8	; 232
    8fa0:	33 e0       	ldi	r19, 0x03	; 3
    8fa2:	40 e0       	ldi	r20, 0x00	; 0
    8fa4:	50 e0       	ldi	r21, 0x00	; 0
    8fa6:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    8faa:	12 2f       	mov	r17, r18
    8fac:	03 2f       	mov	r16, r19
    8fae:	f4 2e       	mov	r15, r20
    8fb0:	e5 2e       	mov	r14, r21
    8fb2:	24 e6       	ldi	r18, 0x64	; 100
    8fb4:	30 e0       	ldi	r19, 0x00	; 0
    8fb6:	40 e0       	ldi	r20, 0x00	; 0
    8fb8:	50 e0       	ldi	r21, 0x00	; 0
    8fba:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
		sprintf(result, "%lu.%1lu kHz", freq/1000, frac);
    8fbe:	5f 93       	push	r21
    8fc0:	4f 93       	push	r20
    8fc2:	3f 93       	push	r19
    8fc4:	2f 93       	push	r18
    8fc6:	ef 92       	push	r14
    8fc8:	ff 92       	push	r15
    8fca:	0f 93       	push	r16
    8fcc:	1f 93       	push	r17
    8fce:	85 ed       	ldi	r24, 0xD5	; 213
    8fd0:	94 e4       	ldi	r25, 0x44	; 68
    8fd2:	9f 93       	push	r25
    8fd4:	8f 93       	push	r24
    8fd6:	df 93       	push	r29
    8fd8:	cf 93       	push	r28
    8fda:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    8fde:	8d b7       	in	r24, 0x3d	; 61
    8fe0:	9e b7       	in	r25, 0x3e	; 62
    8fe2:	0c 96       	adiw	r24, 0x0c	; 12
    8fe4:	8d bf       	out	0x3d, r24	; 61
    8fe6:	9e bf       	out	0x3e, r25	; 62
		
		failure = false;
    8fe8:	80 e0       	ldi	r24, 0x00	; 0
    8fea:	03 c0       	rjmp	.+6      	; 0x8ff2 <_Z15frequencyStringPcm+0x82>
{
	bool failure = true;
	
	if(!result)
	{
		return(failure);
    8fec:	81 e0       	ldi	r24, 0x01	; 1
    8fee:	01 c0       	rjmp	.+2      	; 0x8ff2 <_Z15frequencyStringPcm+0x82>
 * freq = the frequency value to be represented as a string
 * Returns 1 if an error is detected
 */
bool frequencyString(char* result, uint32_t freq)
{
	bool failure = true;
    8ff0:	81 e0       	ldi	r24, 0x01	; 1
		
		failure = false;
	}
	
	return(failure);	
}
    8ff2:	df 91       	pop	r29
    8ff4:	cf 91       	pop	r28
    8ff6:	1f 91       	pop	r17
    8ff8:	0f 91       	pop	r16
    8ffa:	ff 90       	pop	r15
    8ffc:	ef 90       	pop	r14
    8ffe:	08 95       	ret

00009000 <_Z12frequencyValPcPm>:
 * str = pointer to a string containing the frequency string
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
    9000:	4f 92       	push	r4
    9002:	5f 92       	push	r5
    9004:	6f 92       	push	r6
    9006:	7f 92       	push	r7
    9008:	bf 92       	push	r11
    900a:	cf 92       	push	r12
    900c:	df 92       	push	r13
    900e:	ef 92       	push	r14
    9010:	ff 92       	push	r15
    9012:	0f 93       	push	r16
    9014:	1f 93       	push	r17
    9016:	cf 93       	push	r28
    9018:	df 93       	push	r29
	bool failure = true;
	
	if(!str)
    901a:	00 97       	sbiw	r24, 0x00	; 0
    901c:	09 f4       	brne	.+2      	; 0x9020 <_Z12frequencyValPcPm+0x20>
    901e:	12 c1       	rjmp	.+548    	; 0x9244 <_Z12frequencyValPcPm+0x244>
    9020:	7b 01       	movw	r14, r22
    9022:	6c 01       	movw	r12, r24
	{
		return(failure);
	}
	
	int decimal = '.';
	char* decimalLocation = strchr(str, decimal);
    9024:	6e e2       	ldi	r22, 0x2E	; 46
    9026:	70 e0       	ldi	r23, 0x00	; 0
    9028:	0e 94 b2 4e 	call	0x9d64	; 0x9d64 <strchr>
	Frequency_Hz temp;
	
	if(decimalLocation) // Assume Hz or kHz
    902c:	89 2b       	or	r24, r25
    902e:	09 f4       	brne	.+2      	; 0x9032 <_Z12frequencyValPcPm+0x32>
    9030:	a2 c0       	rjmp	.+324    	; 0x9176 <_Z12frequencyValPcPm+0x176>
	{
		float f = atof(str);
    9032:	c6 01       	movw	r24, r12
    9034:	0e 94 56 4e 	call	0x9cac	; 0x9cac <atof>
    9038:	06 2f       	mov	r16, r22
    903a:	17 2f       	mov	r17, r23
    903c:	c8 2f       	mov	r28, r24
    903e:	d9 2f       	mov	r29, r25
		
		if((f > 3.5) && (f < 4.0))
    9040:	20 e0       	ldi	r18, 0x00	; 0
    9042:	30 e0       	ldi	r19, 0x00	; 0
    9044:	40 e6       	ldi	r20, 0x60	; 96
    9046:	50 e4       	ldi	r21, 0x40	; 64
    9048:	0e 94 18 4c 	call	0x9830	; 0x9830 <__gesf2>
    904c:	18 16       	cp	r1, r24
    904e:	e4 f4       	brge	.+56     	; 0x9088 <_Z12frequencyValPcPm+0x88>
    9050:	20 e0       	ldi	r18, 0x00	; 0
    9052:	30 e0       	ldi	r19, 0x00	; 0
    9054:	40 e8       	ldi	r20, 0x80	; 128
    9056:	50 e4       	ldi	r21, 0x40	; 64
    9058:	60 2f       	mov	r22, r16
    905a:	71 2f       	mov	r23, r17
    905c:	8c 2f       	mov	r24, r28
    905e:	9d 2f       	mov	r25, r29
    9060:	0e 94 78 4a 	call	0x94f0	; 0x94f0 <__cmpsf2>
    9064:	88 23       	and	r24, r24
    9066:	84 f4       	brge	.+32     	; 0x9088 <_Z12frequencyValPcPm+0x88>
		{
			f *= 1000000.;
    9068:	20 e0       	ldi	r18, 0x00	; 0
    906a:	34 e2       	ldi	r19, 0x24	; 36
    906c:	44 e7       	ldi	r20, 0x74	; 116
    906e:	59 e4       	ldi	r21, 0x49	; 73
    9070:	60 2f       	mov	r22, r16
    9072:	71 2f       	mov	r23, r17
    9074:	8c 2f       	mov	r24, r28
    9076:	9d 2f       	mov	r25, r29
    9078:	0e 94 1d 4c 	call	0x983a	; 0x983a <__mulsf3>
    907c:	06 2f       	mov	r16, r22
    907e:	17 2f       	mov	r17, r23
    9080:	c8 2f       	mov	r28, r24
    9082:	d9 2f       	mov	r29, r25
			failure = false;
    9084:	b1 2c       	mov	r11, r1
    9086:	47 c0       	rjmp	.+142    	; 0x9116 <_Z12frequencyValPcPm+0x116>
		}
		else if((f > 3500.) && (f < 4000.))
    9088:	20 e0       	ldi	r18, 0x00	; 0
    908a:	30 ec       	ldi	r19, 0xC0	; 192
    908c:	4a e5       	ldi	r20, 0x5A	; 90
    908e:	55 e4       	ldi	r21, 0x45	; 69
    9090:	60 2f       	mov	r22, r16
    9092:	71 2f       	mov	r23, r17
    9094:	8c 2f       	mov	r24, r28
    9096:	9d 2f       	mov	r25, r29
    9098:	0e 94 18 4c 	call	0x9830	; 0x9830 <__gesf2>
    909c:	18 16       	cp	r1, r24
    909e:	e4 f4       	brge	.+56     	; 0x90d8 <_Z12frequencyValPcPm+0xd8>
    90a0:	20 e0       	ldi	r18, 0x00	; 0
    90a2:	30 e0       	ldi	r19, 0x00	; 0
    90a4:	4a e7       	ldi	r20, 0x7A	; 122
    90a6:	55 e4       	ldi	r21, 0x45	; 69
    90a8:	60 2f       	mov	r22, r16
    90aa:	71 2f       	mov	r23, r17
    90ac:	8c 2f       	mov	r24, r28
    90ae:	9d 2f       	mov	r25, r29
    90b0:	0e 94 78 4a 	call	0x94f0	; 0x94f0 <__cmpsf2>
    90b4:	88 23       	and	r24, r24
    90b6:	84 f4       	brge	.+32     	; 0x90d8 <_Z12frequencyValPcPm+0xd8>
		{
			f *= 1000.;
    90b8:	20 e0       	ldi	r18, 0x00	; 0
    90ba:	30 e0       	ldi	r19, 0x00	; 0
    90bc:	4a e7       	ldi	r20, 0x7A	; 122
    90be:	54 e4       	ldi	r21, 0x44	; 68
    90c0:	60 2f       	mov	r22, r16
    90c2:	71 2f       	mov	r23, r17
    90c4:	8c 2f       	mov	r24, r28
    90c6:	9d 2f       	mov	r25, r29
    90c8:	0e 94 1d 4c 	call	0x983a	; 0x983a <__mulsf3>
    90cc:	06 2f       	mov	r16, r22
    90ce:	17 2f       	mov	r17, r23
    90d0:	c8 2f       	mov	r28, r24
    90d2:	d9 2f       	mov	r29, r25
			failure = false;
    90d4:	b1 2c       	mov	r11, r1
    90d6:	1f c0       	rjmp	.+62     	; 0x9116 <_Z12frequencyValPcPm+0x116>
		}
		else if((f > 3500000.) && (f < 4000000.))
    90d8:	20 e8       	ldi	r18, 0x80	; 128
    90da:	3f e9       	ldi	r19, 0x9F	; 159
    90dc:	45 e5       	ldi	r20, 0x55	; 85
    90de:	5a e4       	ldi	r21, 0x4A	; 74
    90e0:	60 2f       	mov	r22, r16
    90e2:	71 2f       	mov	r23, r17
    90e4:	8c 2f       	mov	r24, r28
    90e6:	9d 2f       	mov	r25, r29
    90e8:	0e 94 18 4c 	call	0x9830	; 0x9830 <__gesf2>
    90ec:	18 16       	cp	r1, r24
    90ee:	7c f4       	brge	.+30     	; 0x910e <_Z12frequencyValPcPm+0x10e>
    90f0:	20 e0       	ldi	r18, 0x00	; 0
    90f2:	34 e2       	ldi	r19, 0x24	; 36
    90f4:	44 e7       	ldi	r20, 0x74	; 116
    90f6:	5a e4       	ldi	r21, 0x4A	; 74
    90f8:	60 2f       	mov	r22, r16
    90fa:	71 2f       	mov	r23, r17
    90fc:	8c 2f       	mov	r24, r28
    90fe:	9d 2f       	mov	r25, r29
    9100:	0e 94 78 4a 	call	0x94f0	; 0x94f0 <__cmpsf2>
    9104:	88 23       	and	r24, r24
    9106:	34 f0       	brlt	.+12     	; 0x9114 <_Z12frequencyValPcPm+0x114>
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
	bool failure = true;
    9108:	bb 24       	eor	r11, r11
    910a:	b3 94       	inc	r11
    910c:	04 c0       	rjmp	.+8      	; 0x9116 <_Z12frequencyValPcPm+0x116>
    910e:	bb 24       	eor	r11, r11
    9110:	b3 94       	inc	r11
    9112:	01 c0       	rjmp	.+2      	; 0x9116 <_Z12frequencyValPcPm+0x116>
			f *= 1000.;
			failure = false;
		}
		else if((f > 3500000.) && (f < 4000000.))
		{
			failure = false;
    9114:	b1 2c       	mov	r11, r1
		}
		
		if(!failure)
    9116:	b1 10       	cpse	r11, r1
    9118:	97 c0       	rjmp	.+302    	; 0x9248 <_Z12frequencyValPcPm+0x248>
		{
			temp = (Frequency_Hz)ceilf(f);
    911a:	60 2f       	mov	r22, r16
    911c:	71 2f       	mov	r23, r17
    911e:	8c 2f       	mov	r24, r28
    9120:	9d 2f       	mov	r25, r29
    9122:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <ceil>
    9126:	0e 94 f6 4a 	call	0x95ec	; 0x95ec <__fixunssfsi>
    912a:	2b 01       	movw	r4, r22
    912c:	3c 01       	movw	r6, r24
			temp = temp - (temp % 100);
    912e:	24 e6       	ldi	r18, 0x64	; 100
    9130:	30 e0       	ldi	r19, 0x00	; 0
    9132:	40 e0       	ldi	r20, 0x00	; 0
    9134:	50 e0       	ldi	r21, 0x00	; 0
    9136:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    913a:	46 1a       	sub	r4, r22
    913c:	57 0a       	sbc	r5, r23
    913e:	68 0a       	sbc	r6, r24
    9140:	79 0a       	sbc	r7, r25
			if(result) *result = temp;
    9142:	e1 14       	cp	r14, r1
    9144:	f1 04       	cpc	r15, r1
    9146:	29 f0       	breq	.+10     	; 0x9152 <_Z12frequencyValPcPm+0x152>
    9148:	f7 01       	movw	r30, r14
    914a:	40 82       	st	Z, r4
    914c:	51 82       	std	Z+1, r5	; 0x01
    914e:	62 82       	std	Z+2, r6	; 0x02
    9150:	73 82       	std	Z+3, r7	; 0x03
			sprintf(str, "%4.1f kHz", (double)f);
    9152:	df 93       	push	r29
    9154:	cf 93       	push	r28
    9156:	1f 93       	push	r17
    9158:	0f 93       	push	r16
    915a:	82 ee       	ldi	r24, 0xE2	; 226
    915c:	94 e4       	ldi	r25, 0x44	; 68
    915e:	9f 93       	push	r25
    9160:	8f 93       	push	r24
    9162:	df 92       	push	r13
    9164:	cf 92       	push	r12
    9166:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    916a:	8d b7       	in	r24, 0x3d	; 61
    916c:	9e b7       	in	r25, 0x3e	; 62
    916e:	08 96       	adiw	r24, 0x08	; 8
    9170:	8d bf       	out	0x3d, r24	; 61
    9172:	9e bf       	out	0x3e, r25	; 62
    9174:	69 c0       	rjmp	.+210    	; 0x9248 <_Z12frequencyValPcPm+0x248>
		}
	}
	else
	{
		Frequency_Hz f = (Frequency_Hz)atol(str);
    9176:	c6 01       	movw	r24, r12
    9178:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <atol>
    917c:	2b 01       	movw	r4, r22
    917e:	3c 01       	movw	r6, r24
		
		if((f > 3500) && (f < 4000))
    9180:	dc 01       	movw	r26, r24
    9182:	cb 01       	movw	r24, r22
    9184:	8d 5a       	subi	r24, 0xAD	; 173
    9186:	9d 40       	sbci	r25, 0x0D	; 13
    9188:	a1 09       	sbc	r26, r1
    918a:	b1 09       	sbc	r27, r1
    918c:	83 3f       	cpi	r24, 0xF3	; 243
    918e:	91 40       	sbci	r25, 0x01	; 1
    9190:	a1 05       	cpc	r26, r1
    9192:	b1 05       	cpc	r27, r1
    9194:	50 f4       	brcc	.+20     	; 0x91aa <_Z12frequencyValPcPm+0x1aa>
		{
			f *= 1000;
    9196:	a8 ee       	ldi	r26, 0xE8	; 232
    9198:	b3 e0       	ldi	r27, 0x03	; 3
    919a:	a3 01       	movw	r20, r6
    919c:	92 01       	movw	r18, r4
    919e:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <__muluhisi3>
    91a2:	2b 01       	movw	r4, r22
    91a4:	3c 01       	movw	r6, r24
			failure = false;
    91a6:	b1 2c       	mov	r11, r1
    91a8:	1b c0       	rjmp	.+54     	; 0x91e0 <_Z12frequencyValPcPm+0x1e0>
		}
		else if((f > 3500000) && (f < 4000000))
    91aa:	d3 01       	movw	r26, r6
    91ac:	c2 01       	movw	r24, r4
    91ae:	81 5e       	subi	r24, 0xE1	; 225
    91b0:	97 46       	sbci	r25, 0x67	; 103
    91b2:	a5 43       	sbci	r26, 0x35	; 53
    91b4:	b1 09       	sbc	r27, r1
    91b6:	8f 31       	cpi	r24, 0x1F	; 31
    91b8:	91 4a       	sbci	r25, 0xA1	; 161
    91ba:	a7 40       	sbci	r26, 0x07	; 7
    91bc:	b1 05       	cpc	r27, r1
    91be:	70 f4       	brcc	.+28     	; 0x91dc <_Z12frequencyValPcPm+0x1dc>
		{
			f = f - (f % 100);
    91c0:	c3 01       	movw	r24, r6
    91c2:	b2 01       	movw	r22, r4
    91c4:	24 e6       	ldi	r18, 0x64	; 100
    91c6:	30 e0       	ldi	r19, 0x00	; 0
    91c8:	40 e0       	ldi	r20, 0x00	; 0
    91ca:	50 e0       	ldi	r21, 0x00	; 0
    91cc:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    91d0:	46 1a       	sub	r4, r22
    91d2:	57 0a       	sbc	r5, r23
    91d4:	68 0a       	sbc	r6, r24
    91d6:	79 0a       	sbc	r7, r25
			failure = false;
    91d8:	b1 2c       	mov	r11, r1
    91da:	02 c0       	rjmp	.+4      	; 0x91e0 <_Z12frequencyValPcPm+0x1e0>
 * result = pointer to a Frequency_Hz variable to hold the frequency in Hz
 * Returns 1 if an error is detected
 */
bool frequencyVal(char* str, Frequency_Hz* result)
{
	bool failure = true;
    91dc:	bb 24       	eor	r11, r11
    91de:	b3 94       	inc	r11
		{
			f = f - (f % 100);
			failure = false;
		}
		
		if(!failure)
    91e0:	b1 10       	cpse	r11, r1
    91e2:	32 c0       	rjmp	.+100    	; 0x9248 <_Z12frequencyValPcPm+0x248>
		{
			if(result) *result = f;
    91e4:	e1 14       	cp	r14, r1
    91e6:	f1 04       	cpc	r15, r1
    91e8:	29 f0       	breq	.+10     	; 0x91f4 <_Z12frequencyValPcPm+0x1f4>
    91ea:	f7 01       	movw	r30, r14
    91ec:	40 82       	st	Z, r4
    91ee:	51 82       	std	Z+1, r5	; 0x01
    91f0:	62 82       	std	Z+2, r6	; 0x02
    91f2:	73 82       	std	Z+3, r7	; 0x03
			sprintf(str, "%lu.%1lu kHz", f/1000, (f % 1000)/100);
    91f4:	c3 01       	movw	r24, r6
    91f6:	b2 01       	movw	r22, r4
    91f8:	28 ee       	ldi	r18, 0xE8	; 232
    91fa:	33 e0       	ldi	r19, 0x03	; 3
    91fc:	40 e0       	ldi	r20, 0x00	; 0
    91fe:	50 e0       	ldi	r21, 0x00	; 0
    9200:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    9204:	c2 2f       	mov	r28, r18
    9206:	d3 2f       	mov	r29, r19
    9208:	14 2f       	mov	r17, r20
    920a:	05 2f       	mov	r16, r21
    920c:	24 e6       	ldi	r18, 0x64	; 100
    920e:	30 e0       	ldi	r19, 0x00	; 0
    9210:	40 e0       	ldi	r20, 0x00	; 0
    9212:	50 e0       	ldi	r21, 0x00	; 0
    9214:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    9218:	5f 93       	push	r21
    921a:	4f 93       	push	r20
    921c:	3f 93       	push	r19
    921e:	2f 93       	push	r18
    9220:	0f 93       	push	r16
    9222:	1f 93       	push	r17
    9224:	df 93       	push	r29
    9226:	cf 93       	push	r28
    9228:	85 ed       	ldi	r24, 0xD5	; 213
    922a:	94 e4       	ldi	r25, 0x44	; 68
    922c:	9f 93       	push	r25
    922e:	8f 93       	push	r24
    9230:	df 92       	push	r13
    9232:	cf 92       	push	r12
    9234:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <sprintf>
    9238:	8d b7       	in	r24, 0x3d	; 61
    923a:	9e b7       	in	r25, 0x3e	; 62
    923c:	0c 96       	adiw	r24, 0x0c	; 12
    923e:	8d bf       	out	0x3d, r24	; 61
    9240:	9e bf       	out	0x3e, r25	; 62
    9242:	02 c0       	rjmp	.+4      	; 0x9248 <_Z12frequencyValPcPm+0x248>
{
	bool failure = true;
	
	if(!str)
	{
		return(failure);
    9244:	bb 24       	eor	r11, r11
    9246:	b3 94       	inc	r11
			sprintf(str, "%lu.%1lu kHz", f/1000, (f % 1000)/100);
		}
	}
	
	return(failure);	
}
    9248:	8b 2d       	mov	r24, r11
    924a:	df 91       	pop	r29
    924c:	cf 91       	pop	r28
    924e:	1f 91       	pop	r17
    9250:	0f 91       	pop	r16
    9252:	ff 90       	pop	r15
    9254:	ef 90       	pop	r14
    9256:	df 90       	pop	r13
    9258:	cf 90       	pop	r12
    925a:	bf 90       	pop	r11
    925c:	7f 90       	pop	r7
    925e:	6f 90       	pop	r6
    9260:	5f 90       	pop	r5
    9262:	4f 90       	pop	r4
    9264:	08 95       	ret

00009266 <_Z8fox2TextPc5Fox_t>:

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
	
	switch(fox)
    9266:	46 2f       	mov	r20, r22
    9268:	50 e0       	ldi	r21, 0x00	; 0
    926a:	42 31       	cpi	r20, 0x12	; 18
    926c:	51 05       	cpc	r21, r1
    926e:	08 f0       	brcs	.+2      	; 0x9272 <_Z8fox2TextPc5Fox_t+0xc>
    9270:	b9 c0       	rjmp	.+370    	; 0x93e4 <_Z8fox2TextPc5Fox_t+0x17e>
    9272:	fa 01       	movw	r30, r20
    9274:	ea 5e       	subi	r30, 0xEA	; 234
    9276:	fe 4f       	sbci	r31, 0xFE	; 254
    9278:	0c 94 03 4d 	jmp	0x9a06	; 0x9a06 <__tablejump2__>
	{
		case BEACON:
		{
			sprintf(str, "Finish \"MO\"");
    927c:	2c e0       	ldi	r18, 0x0C	; 12
    927e:	ec ee       	ldi	r30, 0xEC	; 236
    9280:	f4 e4       	ldi	r31, 0x44	; 68
    9282:	dc 01       	movw	r26, r24
    9284:	01 90       	ld	r0, Z+
    9286:	0d 92       	st	X+, r0
    9288:	2a 95       	dec	r18
    928a:	e1 f7       	brne	.-8      	; 0x9284 <_Z8fox2TextPc5Fox_t+0x1e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    928c:	80 e0       	ldi	r24, 0x00	; 0
	{
		case BEACON:
		{
			sprintf(str, "Finish \"MO\"");
		}
		break;
    928e:	08 95       	ret
		
		case FOX_1:
		{
			sprintf(str, "Classic Fox 1 \"MOE\"");
    9290:	24 e1       	ldi	r18, 0x14	; 20
    9292:	e8 ef       	ldi	r30, 0xF8	; 248
    9294:	f4 e4       	ldi	r31, 0x44	; 68
    9296:	dc 01       	movw	r26, r24
    9298:	01 90       	ld	r0, Z+
    929a:	0d 92       	st	X+, r0
    929c:	2a 95       	dec	r18
    929e:	e1 f7       	brne	.-8      	; 0x9298 <_Z8fox2TextPc5Fox_t+0x32>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92a0:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_1:
		{
			sprintf(str, "Classic Fox 1 \"MOE\"");
		}
		break;
    92a2:	08 95       	ret
		
		case FOX_2:
		{
			sprintf(str, "Classic Fox 2 \"MOI\"");
    92a4:	24 e1       	ldi	r18, 0x14	; 20
    92a6:	ec e0       	ldi	r30, 0x0C	; 12
    92a8:	f5 e4       	ldi	r31, 0x45	; 69
    92aa:	dc 01       	movw	r26, r24
    92ac:	01 90       	ld	r0, Z+
    92ae:	0d 92       	st	X+, r0
    92b0:	2a 95       	dec	r18
    92b2:	e1 f7       	brne	.-8      	; 0x92ac <_Z8fox2TextPc5Fox_t+0x46>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92b4:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_2:
		{
			sprintf(str, "Classic Fox 2 \"MOI\"");
		}
		break;
    92b6:	08 95       	ret
		
		case FOX_3:
		{
			sprintf(str, "Classic Fox 3 \"MOS\"");
    92b8:	24 e1       	ldi	r18, 0x14	; 20
    92ba:	e0 e2       	ldi	r30, 0x20	; 32
    92bc:	f5 e4       	ldi	r31, 0x45	; 69
    92be:	dc 01       	movw	r26, r24
    92c0:	01 90       	ld	r0, Z+
    92c2:	0d 92       	st	X+, r0
    92c4:	2a 95       	dec	r18
    92c6:	e1 f7       	brne	.-8      	; 0x92c0 <_Z8fox2TextPc5Fox_t+0x5a>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92c8:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_3:
		{
			sprintf(str, "Classic Fox 3 \"MOS\"");
		}
		break;
    92ca:	08 95       	ret
		
		case FOX_4:
		{
			sprintf(str, "Classic Fox 4 \"MOH\"");
    92cc:	24 e1       	ldi	r18, 0x14	; 20
    92ce:	e4 e3       	ldi	r30, 0x34	; 52
    92d0:	f5 e4       	ldi	r31, 0x45	; 69
    92d2:	dc 01       	movw	r26, r24
    92d4:	01 90       	ld	r0, Z+
    92d6:	0d 92       	st	X+, r0
    92d8:	2a 95       	dec	r18
    92da:	e1 f7       	brne	.-8      	; 0x92d4 <_Z8fox2TextPc5Fox_t+0x6e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92dc:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_4:
		{
			sprintf(str, "Classic Fox 4 \"MOH\"");
		}
		break;
    92de:	08 95       	ret
		
		case FOX_5:
		{
			sprintf(str, "Classic Fox 5 \"MO5\"");
    92e0:	24 e1       	ldi	r18, 0x14	; 20
    92e2:	e8 e4       	ldi	r30, 0x48	; 72
    92e4:	f5 e4       	ldi	r31, 0x45	; 69
    92e6:	dc 01       	movw	r26, r24
    92e8:	01 90       	ld	r0, Z+
    92ea:	0d 92       	st	X+, r0
    92ec:	2a 95       	dec	r18
    92ee:	e1 f7       	brne	.-8      	; 0x92e8 <_Z8fox2TextPc5Fox_t+0x82>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    92f0:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOX_5:
		{
			sprintf(str, "Classic Fox 5 \"MO5\"");
		}
		break;
    92f2:	08 95       	ret
		
		case FOXORING:
		{
			sprintf(str, "Foxoring");
    92f4:	29 e0       	ldi	r18, 0x09	; 9
    92f6:	ec e5       	ldi	r30, 0x5C	; 92
    92f8:	f5 e4       	ldi	r31, 0x45	; 69
    92fa:	dc 01       	movw	r26, r24
    92fc:	01 90       	ld	r0, Z+
    92fe:	0d 92       	st	X+, r0
    9300:	2a 95       	dec	r18
    9302:	e1 f7       	brne	.-8      	; 0x92fc <_Z8fox2TextPc5Fox_t+0x96>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9304:	80 e0       	ldi	r24, 0x00	; 0
		
		case FOXORING:
		{
			sprintf(str, "Foxoring");
		}
		break;
    9306:	08 95       	ret
		
		case SPECTATOR:
		{
			sprintf(str, "Spectator \"S\"");
    9308:	2e e0       	ldi	r18, 0x0E	; 14
    930a:	e5 e6       	ldi	r30, 0x65	; 101
    930c:	f5 e4       	ldi	r31, 0x45	; 69
    930e:	dc 01       	movw	r26, r24
    9310:	01 90       	ld	r0, Z+
    9312:	0d 92       	st	X+, r0
    9314:	2a 95       	dec	r18
    9316:	e1 f7       	brne	.-8      	; 0x9310 <_Z8fox2TextPc5Fox_t+0xaa>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9318:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPECTATOR:
		{
			sprintf(str, "Spectator \"S\"");
		}
		break;
    931a:	08 95       	ret
		
		case SPRINT_S1:
		{
			sprintf(str, "Sprint Slow 1 \"ME\"");
    931c:	23 e1       	ldi	r18, 0x13	; 19
    931e:	e3 e7       	ldi	r30, 0x73	; 115
    9320:	f5 e4       	ldi	r31, 0x45	; 69
    9322:	dc 01       	movw	r26, r24
    9324:	01 90       	ld	r0, Z+
    9326:	0d 92       	st	X+, r0
    9328:	2a 95       	dec	r18
    932a:	e1 f7       	brne	.-8      	; 0x9324 <_Z8fox2TextPc5Fox_t+0xbe>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    932c:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S1:
		{
			sprintf(str, "Sprint Slow 1 \"ME\"");
		}
		break;
    932e:	08 95       	ret
		
		case SPRINT_S2:
		{
			sprintf(str, "Sprint Slow 2 \"MI\"");
    9330:	23 e1       	ldi	r18, 0x13	; 19
    9332:	e6 e8       	ldi	r30, 0x86	; 134
    9334:	f5 e4       	ldi	r31, 0x45	; 69
    9336:	dc 01       	movw	r26, r24
    9338:	01 90       	ld	r0, Z+
    933a:	0d 92       	st	X+, r0
    933c:	2a 95       	dec	r18
    933e:	e1 f7       	brne	.-8      	; 0x9338 <_Z8fox2TextPc5Fox_t+0xd2>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9340:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S2:
		{
			sprintf(str, "Sprint Slow 2 \"MI\"");
		}
		break;
    9342:	08 95       	ret
		
		case SPRINT_S3:
		{
			sprintf(str, "Sprint Slow 3 \"MS\"");
    9344:	23 e1       	ldi	r18, 0x13	; 19
    9346:	e9 e9       	ldi	r30, 0x99	; 153
    9348:	f5 e4       	ldi	r31, 0x45	; 69
    934a:	dc 01       	movw	r26, r24
    934c:	01 90       	ld	r0, Z+
    934e:	0d 92       	st	X+, r0
    9350:	2a 95       	dec	r18
    9352:	e1 f7       	brne	.-8      	; 0x934c <_Z8fox2TextPc5Fox_t+0xe6>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9354:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S3:
		{
			sprintf(str, "Sprint Slow 3 \"MS\"");
		}
		break;
    9356:	08 95       	ret
		
		case SPRINT_S4:
		{
			sprintf(str, "Sprint Slow 4 \"MH\"");
    9358:	23 e1       	ldi	r18, 0x13	; 19
    935a:	ec ea       	ldi	r30, 0xAC	; 172
    935c:	f5 e4       	ldi	r31, 0x45	; 69
    935e:	dc 01       	movw	r26, r24
    9360:	01 90       	ld	r0, Z+
    9362:	0d 92       	st	X+, r0
    9364:	2a 95       	dec	r18
    9366:	e1 f7       	brne	.-8      	; 0x9360 <_Z8fox2TextPc5Fox_t+0xfa>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9368:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S4:
		{
			sprintf(str, "Sprint Slow 4 \"MH\"");
		}
		break;
    936a:	08 95       	ret
		
		case SPRINT_S5:
		{
			sprintf(str, "Sprint Slow 5 \"M5\"");
    936c:	23 e1       	ldi	r18, 0x13	; 19
    936e:	ef eb       	ldi	r30, 0xBF	; 191
    9370:	f5 e4       	ldi	r31, 0x45	; 69
    9372:	dc 01       	movw	r26, r24
    9374:	01 90       	ld	r0, Z+
    9376:	0d 92       	st	X+, r0
    9378:	2a 95       	dec	r18
    937a:	e1 f7       	brne	.-8      	; 0x9374 <_Z8fox2TextPc5Fox_t+0x10e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    937c:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_S5:
		{
			sprintf(str, "Sprint Slow 5 \"M5\"");
		}
		break;
    937e:	08 95       	ret
		
		case SPRINT_F1:
		{
			sprintf(str, "Sprint Fast 1 \"OE\"");
    9380:	23 e1       	ldi	r18, 0x13	; 19
    9382:	e2 ed       	ldi	r30, 0xD2	; 210
    9384:	f5 e4       	ldi	r31, 0x45	; 69
    9386:	dc 01       	movw	r26, r24
    9388:	01 90       	ld	r0, Z+
    938a:	0d 92       	st	X+, r0
    938c:	2a 95       	dec	r18
    938e:	e1 f7       	brne	.-8      	; 0x9388 <_Z8fox2TextPc5Fox_t+0x122>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    9390:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F1:
		{
			sprintf(str, "Sprint Fast 1 \"OE\"");
		}
		break;
    9392:	08 95       	ret
		
		case SPRINT_F2:
		{
			sprintf(str, "Sprint Fast 2 \"OI\"");
    9394:	23 e1       	ldi	r18, 0x13	; 19
    9396:	e5 ee       	ldi	r30, 0xE5	; 229
    9398:	f5 e4       	ldi	r31, 0x45	; 69
    939a:	dc 01       	movw	r26, r24
    939c:	01 90       	ld	r0, Z+
    939e:	0d 92       	st	X+, r0
    93a0:	2a 95       	dec	r18
    93a2:	e1 f7       	brne	.-8      	; 0x939c <_Z8fox2TextPc5Fox_t+0x136>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    93a4:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F2:
		{
			sprintf(str, "Sprint Fast 2 \"OI\"");
		}
		break;
    93a6:	08 95       	ret
		
		case SPRINT_F3:
		{
			sprintf(str, "Sprint Fast 3 \"OS\"");
    93a8:	23 e1       	ldi	r18, 0x13	; 19
    93aa:	e8 ef       	ldi	r30, 0xF8	; 248
    93ac:	f5 e4       	ldi	r31, 0x45	; 69
    93ae:	dc 01       	movw	r26, r24
    93b0:	01 90       	ld	r0, Z+
    93b2:	0d 92       	st	X+, r0
    93b4:	2a 95       	dec	r18
    93b6:	e1 f7       	brne	.-8      	; 0x93b0 <_Z8fox2TextPc5Fox_t+0x14a>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    93b8:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F3:
		{
			sprintf(str, "Sprint Fast 3 \"OS\"");
		}
		break;
    93ba:	08 95       	ret
		
		case SPRINT_F4:
		{
			sprintf(str, "Sprint Fast 4 \"OH\"");
    93bc:	23 e1       	ldi	r18, 0x13	; 19
    93be:	eb e0       	ldi	r30, 0x0B	; 11
    93c0:	f6 e4       	ldi	r31, 0x46	; 70
    93c2:	dc 01       	movw	r26, r24
    93c4:	01 90       	ld	r0, Z+
    93c6:	0d 92       	st	X+, r0
    93c8:	2a 95       	dec	r18
    93ca:	e1 f7       	brne	.-8      	; 0x93c4 <_Z8fox2TextPc5Fox_t+0x15e>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    93cc:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F4:
		{
			sprintf(str, "Sprint Fast 4 \"OH\"");
		}
		break;
    93ce:	08 95       	ret
		
		case SPRINT_F5:
		{
			sprintf(str, "Sprint Fast 5 \"O5\"");
    93d0:	23 e1       	ldi	r18, 0x13	; 19
    93d2:	ee e1       	ldi	r30, 0x1E	; 30
    93d4:	f6 e4       	ldi	r31, 0x46	; 70
    93d6:	dc 01       	movw	r26, r24
    93d8:	01 90       	ld	r0, Z+
    93da:	0d 92       	st	X+, r0
    93dc:	2a 95       	dec	r18
    93de:	e1 f7       	brne	.-8      	; 0x93d8 <_Z8fox2TextPc5Fox_t+0x172>
	return(failure);	
}

bool fox2Text(char* str, Fox_t fox)
{
	bool failure = false;
    93e0:	80 e0       	ldi	r24, 0x00	; 0
		
		case SPRINT_F5:
		{
			sprintf(str, "Sprint Fast 5 \"O5\"");
		}
		break;
    93e2:	08 95       	ret
		
		default:
		{
			failure = true;
    93e4:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	}
	
	return(failure);
    93e6:	08 95       	ret

000093e8 <__subsf3>:
    93e8:	50 58       	subi	r21, 0x80	; 128

000093ea <__addsf3>:
    93ea:	bb 27       	eor	r27, r27
    93ec:	aa 27       	eor	r26, r26
    93ee:	0e 94 0c 4a 	call	0x9418	; 0x9418 <__addsf3x>
    93f2:	0c 94 c6 4b 	jmp	0x978c	; 0x978c <__fp_round>
    93f6:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__fp_pscA>
    93fa:	38 f0       	brcs	.+14     	; 0x940a <__addsf3+0x20>
    93fc:	0e 94 bf 4b 	call	0x977e	; 0x977e <__fp_pscB>
    9400:	20 f0       	brcs	.+8      	; 0x940a <__addsf3+0x20>
    9402:	39 f4       	brne	.+14     	; 0x9412 <__addsf3+0x28>
    9404:	9f 3f       	cpi	r25, 0xFF	; 255
    9406:	19 f4       	brne	.+6      	; 0x940e <__addsf3+0x24>
    9408:	26 f4       	brtc	.+8      	; 0x9412 <__addsf3+0x28>
    940a:	0c 94 b5 4b 	jmp	0x976a	; 0x976a <__fp_nan>
    940e:	0e f4       	brtc	.+2      	; 0x9412 <__addsf3+0x28>
    9410:	e0 95       	com	r30
    9412:	e7 fb       	bst	r30, 7
    9414:	0c 94 86 4b 	jmp	0x970c	; 0x970c <__fp_inf>

00009418 <__addsf3x>:
    9418:	e9 2f       	mov	r30, r25
    941a:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <__fp_split3>
    941e:	58 f3       	brcs	.-42     	; 0x93f6 <__addsf3+0xc>
    9420:	ba 17       	cp	r27, r26
    9422:	62 07       	cpc	r22, r18
    9424:	73 07       	cpc	r23, r19
    9426:	84 07       	cpc	r24, r20
    9428:	95 07       	cpc	r25, r21
    942a:	20 f0       	brcs	.+8      	; 0x9434 <__addsf3x+0x1c>
    942c:	79 f4       	brne	.+30     	; 0x944c <__addsf3x+0x34>
    942e:	a6 f5       	brtc	.+104    	; 0x9498 <__addsf3x+0x80>
    9430:	0c 94 11 4c 	jmp	0x9822	; 0x9822 <__fp_zero>
    9434:	0e f4       	brtc	.+2      	; 0x9438 <__addsf3x+0x20>
    9436:	e0 95       	com	r30
    9438:	0b 2e       	mov	r0, r27
    943a:	ba 2f       	mov	r27, r26
    943c:	a0 2d       	mov	r26, r0
    943e:	0b 01       	movw	r0, r22
    9440:	b9 01       	movw	r22, r18
    9442:	90 01       	movw	r18, r0
    9444:	0c 01       	movw	r0, r24
    9446:	ca 01       	movw	r24, r20
    9448:	a0 01       	movw	r20, r0
    944a:	11 24       	eor	r1, r1
    944c:	ff 27       	eor	r31, r31
    944e:	59 1b       	sub	r21, r25
    9450:	99 f0       	breq	.+38     	; 0x9478 <__addsf3x+0x60>
    9452:	59 3f       	cpi	r21, 0xF9	; 249
    9454:	50 f4       	brcc	.+20     	; 0x946a <__addsf3x+0x52>
    9456:	50 3e       	cpi	r21, 0xE0	; 224
    9458:	68 f1       	brcs	.+90     	; 0x94b4 <__addsf3x+0x9c>
    945a:	1a 16       	cp	r1, r26
    945c:	f0 40       	sbci	r31, 0x00	; 0
    945e:	a2 2f       	mov	r26, r18
    9460:	23 2f       	mov	r18, r19
    9462:	34 2f       	mov	r19, r20
    9464:	44 27       	eor	r20, r20
    9466:	58 5f       	subi	r21, 0xF8	; 248
    9468:	f3 cf       	rjmp	.-26     	; 0x9450 <__addsf3x+0x38>
    946a:	46 95       	lsr	r20
    946c:	37 95       	ror	r19
    946e:	27 95       	ror	r18
    9470:	a7 95       	ror	r26
    9472:	f0 40       	sbci	r31, 0x00	; 0
    9474:	53 95       	inc	r21
    9476:	c9 f7       	brne	.-14     	; 0x946a <__addsf3x+0x52>
    9478:	7e f4       	brtc	.+30     	; 0x9498 <__addsf3x+0x80>
    947a:	1f 16       	cp	r1, r31
    947c:	ba 0b       	sbc	r27, r26
    947e:	62 0b       	sbc	r22, r18
    9480:	73 0b       	sbc	r23, r19
    9482:	84 0b       	sbc	r24, r20
    9484:	ba f0       	brmi	.+46     	; 0x94b4 <__addsf3x+0x9c>
    9486:	91 50       	subi	r25, 0x01	; 1
    9488:	a1 f0       	breq	.+40     	; 0x94b2 <__addsf3x+0x9a>
    948a:	ff 0f       	add	r31, r31
    948c:	bb 1f       	adc	r27, r27
    948e:	66 1f       	adc	r22, r22
    9490:	77 1f       	adc	r23, r23
    9492:	88 1f       	adc	r24, r24
    9494:	c2 f7       	brpl	.-16     	; 0x9486 <__addsf3x+0x6e>
    9496:	0e c0       	rjmp	.+28     	; 0x94b4 <__addsf3x+0x9c>
    9498:	ba 0f       	add	r27, r26
    949a:	62 1f       	adc	r22, r18
    949c:	73 1f       	adc	r23, r19
    949e:	84 1f       	adc	r24, r20
    94a0:	48 f4       	brcc	.+18     	; 0x94b4 <__addsf3x+0x9c>
    94a2:	87 95       	ror	r24
    94a4:	77 95       	ror	r23
    94a6:	67 95       	ror	r22
    94a8:	b7 95       	ror	r27
    94aa:	f7 95       	ror	r31
    94ac:	9e 3f       	cpi	r25, 0xFE	; 254
    94ae:	08 f0       	brcs	.+2      	; 0x94b2 <__addsf3x+0x9a>
    94b0:	b0 cf       	rjmp	.-160    	; 0x9412 <__addsf3+0x28>
    94b2:	93 95       	inc	r25
    94b4:	88 0f       	add	r24, r24
    94b6:	08 f0       	brcs	.+2      	; 0x94ba <__addsf3x+0xa2>
    94b8:	99 27       	eor	r25, r25
    94ba:	ee 0f       	add	r30, r30
    94bc:	97 95       	ror	r25
    94be:	87 95       	ror	r24
    94c0:	08 95       	ret

000094c2 <ceil>:
    94c2:	0e 94 f9 4b 	call	0x97f2	; 0x97f2 <__fp_trunc>
    94c6:	90 f0       	brcs	.+36     	; 0x94ec <ceil+0x2a>
    94c8:	9f 37       	cpi	r25, 0x7F	; 127
    94ca:	48 f4       	brcc	.+18     	; 0x94de <ceil+0x1c>
    94cc:	91 11       	cpse	r25, r1
    94ce:	16 f4       	brtc	.+4      	; 0x94d4 <ceil+0x12>
    94d0:	0c 94 12 4c 	jmp	0x9824	; 0x9824 <__fp_szero>
    94d4:	60 e0       	ldi	r22, 0x00	; 0
    94d6:	70 e0       	ldi	r23, 0x00	; 0
    94d8:	80 e8       	ldi	r24, 0x80	; 128
    94da:	9f e3       	ldi	r25, 0x3F	; 63
    94dc:	08 95       	ret
    94de:	26 f0       	brts	.+8      	; 0x94e8 <ceil+0x26>
    94e0:	1b 16       	cp	r1, r27
    94e2:	61 1d       	adc	r22, r1
    94e4:	71 1d       	adc	r23, r1
    94e6:	81 1d       	adc	r24, r1
    94e8:	0c 94 8c 4b 	jmp	0x9718	; 0x9718 <__fp_mintl>
    94ec:	0c 94 a7 4b 	jmp	0x974e	; 0x974e <__fp_mpack>

000094f0 <__cmpsf2>:
    94f0:	0e 94 62 4b 	call	0x96c4	; 0x96c4 <__fp_cmp>
    94f4:	08 f4       	brcc	.+2      	; 0x94f8 <__cmpsf2+0x8>
    94f6:	81 e0       	ldi	r24, 0x01	; 1
    94f8:	08 95       	ret

000094fa <__divsf3>:
    94fa:	0e 94 91 4a 	call	0x9522	; 0x9522 <__divsf3x>
    94fe:	0c 94 c6 4b 	jmp	0x978c	; 0x978c <__fp_round>
    9502:	0e 94 bf 4b 	call	0x977e	; 0x977e <__fp_pscB>
    9506:	58 f0       	brcs	.+22     	; 0x951e <__divsf3+0x24>
    9508:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__fp_pscA>
    950c:	40 f0       	brcs	.+16     	; 0x951e <__divsf3+0x24>
    950e:	29 f4       	brne	.+10     	; 0x951a <__divsf3+0x20>
    9510:	5f 3f       	cpi	r21, 0xFF	; 255
    9512:	29 f0       	breq	.+10     	; 0x951e <__divsf3+0x24>
    9514:	0c 94 86 4b 	jmp	0x970c	; 0x970c <__fp_inf>
    9518:	51 11       	cpse	r21, r1
    951a:	0c 94 12 4c 	jmp	0x9824	; 0x9824 <__fp_szero>
    951e:	0c 94 b5 4b 	jmp	0x976a	; 0x976a <__fp_nan>

00009522 <__divsf3x>:
    9522:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <__fp_split3>
    9526:	68 f3       	brcs	.-38     	; 0x9502 <__divsf3+0x8>

00009528 <__divsf3_pse>:
    9528:	99 23       	and	r25, r25
    952a:	b1 f3       	breq	.-20     	; 0x9518 <__divsf3+0x1e>
    952c:	55 23       	and	r21, r21
    952e:	91 f3       	breq	.-28     	; 0x9514 <__divsf3+0x1a>
    9530:	95 1b       	sub	r25, r21
    9532:	55 0b       	sbc	r21, r21
    9534:	bb 27       	eor	r27, r27
    9536:	aa 27       	eor	r26, r26
    9538:	62 17       	cp	r22, r18
    953a:	73 07       	cpc	r23, r19
    953c:	84 07       	cpc	r24, r20
    953e:	38 f0       	brcs	.+14     	; 0x954e <__divsf3_pse+0x26>
    9540:	9f 5f       	subi	r25, 0xFF	; 255
    9542:	5f 4f       	sbci	r21, 0xFF	; 255
    9544:	22 0f       	add	r18, r18
    9546:	33 1f       	adc	r19, r19
    9548:	44 1f       	adc	r20, r20
    954a:	aa 1f       	adc	r26, r26
    954c:	a9 f3       	breq	.-22     	; 0x9538 <__divsf3_pse+0x10>
    954e:	35 d0       	rcall	.+106    	; 0x95ba <__divsf3_pse+0x92>
    9550:	0e 2e       	mov	r0, r30
    9552:	3a f0       	brmi	.+14     	; 0x9562 <__divsf3_pse+0x3a>
    9554:	e0 e8       	ldi	r30, 0x80	; 128
    9556:	32 d0       	rcall	.+100    	; 0x95bc <__divsf3_pse+0x94>
    9558:	91 50       	subi	r25, 0x01	; 1
    955a:	50 40       	sbci	r21, 0x00	; 0
    955c:	e6 95       	lsr	r30
    955e:	00 1c       	adc	r0, r0
    9560:	ca f7       	brpl	.-14     	; 0x9554 <__divsf3_pse+0x2c>
    9562:	2b d0       	rcall	.+86     	; 0x95ba <__divsf3_pse+0x92>
    9564:	fe 2f       	mov	r31, r30
    9566:	29 d0       	rcall	.+82     	; 0x95ba <__divsf3_pse+0x92>
    9568:	66 0f       	add	r22, r22
    956a:	77 1f       	adc	r23, r23
    956c:	88 1f       	adc	r24, r24
    956e:	bb 1f       	adc	r27, r27
    9570:	26 17       	cp	r18, r22
    9572:	37 07       	cpc	r19, r23
    9574:	48 07       	cpc	r20, r24
    9576:	ab 07       	cpc	r26, r27
    9578:	b0 e8       	ldi	r27, 0x80	; 128
    957a:	09 f0       	breq	.+2      	; 0x957e <__divsf3_pse+0x56>
    957c:	bb 0b       	sbc	r27, r27
    957e:	80 2d       	mov	r24, r0
    9580:	bf 01       	movw	r22, r30
    9582:	ff 27       	eor	r31, r31
    9584:	93 58       	subi	r25, 0x83	; 131
    9586:	5f 4f       	sbci	r21, 0xFF	; 255
    9588:	3a f0       	brmi	.+14     	; 0x9598 <__divsf3_pse+0x70>
    958a:	9e 3f       	cpi	r25, 0xFE	; 254
    958c:	51 05       	cpc	r21, r1
    958e:	78 f0       	brcs	.+30     	; 0x95ae <__divsf3_pse+0x86>
    9590:	0c 94 86 4b 	jmp	0x970c	; 0x970c <__fp_inf>
    9594:	0c 94 12 4c 	jmp	0x9824	; 0x9824 <__fp_szero>
    9598:	5f 3f       	cpi	r21, 0xFF	; 255
    959a:	e4 f3       	brlt	.-8      	; 0x9594 <__divsf3_pse+0x6c>
    959c:	98 3e       	cpi	r25, 0xE8	; 232
    959e:	d4 f3       	brlt	.-12     	; 0x9594 <__divsf3_pse+0x6c>
    95a0:	86 95       	lsr	r24
    95a2:	77 95       	ror	r23
    95a4:	67 95       	ror	r22
    95a6:	b7 95       	ror	r27
    95a8:	f7 95       	ror	r31
    95aa:	9f 5f       	subi	r25, 0xFF	; 255
    95ac:	c9 f7       	brne	.-14     	; 0x95a0 <__divsf3_pse+0x78>
    95ae:	88 0f       	add	r24, r24
    95b0:	91 1d       	adc	r25, r1
    95b2:	96 95       	lsr	r25
    95b4:	87 95       	ror	r24
    95b6:	97 f9       	bld	r25, 7
    95b8:	08 95       	ret
    95ba:	e1 e0       	ldi	r30, 0x01	; 1
    95bc:	66 0f       	add	r22, r22
    95be:	77 1f       	adc	r23, r23
    95c0:	88 1f       	adc	r24, r24
    95c2:	bb 1f       	adc	r27, r27
    95c4:	62 17       	cp	r22, r18
    95c6:	73 07       	cpc	r23, r19
    95c8:	84 07       	cpc	r24, r20
    95ca:	ba 07       	cpc	r27, r26
    95cc:	20 f0       	brcs	.+8      	; 0x95d6 <__divsf3_pse+0xae>
    95ce:	62 1b       	sub	r22, r18
    95d0:	73 0b       	sbc	r23, r19
    95d2:	84 0b       	sbc	r24, r20
    95d4:	ba 0b       	sbc	r27, r26
    95d6:	ee 1f       	adc	r30, r30
    95d8:	88 f7       	brcc	.-30     	; 0x95bc <__divsf3_pse+0x94>
    95da:	e0 95       	com	r30
    95dc:	08 95       	ret

000095de <__fixsfsi>:
    95de:	0e 94 f6 4a 	call	0x95ec	; 0x95ec <__fixunssfsi>
    95e2:	68 94       	set
    95e4:	b1 11       	cpse	r27, r1
    95e6:	0c 94 12 4c 	jmp	0x9824	; 0x9824 <__fp_szero>
    95ea:	08 95       	ret

000095ec <__fixunssfsi>:
    95ec:	0e 94 df 4b 	call	0x97be	; 0x97be <__fp_splitA>
    95f0:	88 f0       	brcs	.+34     	; 0x9614 <__fixunssfsi+0x28>
    95f2:	9f 57       	subi	r25, 0x7F	; 127
    95f4:	98 f0       	brcs	.+38     	; 0x961c <__fixunssfsi+0x30>
    95f6:	b9 2f       	mov	r27, r25
    95f8:	99 27       	eor	r25, r25
    95fa:	b7 51       	subi	r27, 0x17	; 23
    95fc:	b0 f0       	brcs	.+44     	; 0x962a <__fixunssfsi+0x3e>
    95fe:	e1 f0       	breq	.+56     	; 0x9638 <__fixunssfsi+0x4c>
    9600:	66 0f       	add	r22, r22
    9602:	77 1f       	adc	r23, r23
    9604:	88 1f       	adc	r24, r24
    9606:	99 1f       	adc	r25, r25
    9608:	1a f0       	brmi	.+6      	; 0x9610 <__fixunssfsi+0x24>
    960a:	ba 95       	dec	r27
    960c:	c9 f7       	brne	.-14     	; 0x9600 <__fixunssfsi+0x14>
    960e:	14 c0       	rjmp	.+40     	; 0x9638 <__fixunssfsi+0x4c>
    9610:	b1 30       	cpi	r27, 0x01	; 1
    9612:	91 f0       	breq	.+36     	; 0x9638 <__fixunssfsi+0x4c>
    9614:	0e 94 11 4c 	call	0x9822	; 0x9822 <__fp_zero>
    9618:	b1 e0       	ldi	r27, 0x01	; 1
    961a:	08 95       	ret
    961c:	0c 94 11 4c 	jmp	0x9822	; 0x9822 <__fp_zero>
    9620:	67 2f       	mov	r22, r23
    9622:	78 2f       	mov	r23, r24
    9624:	88 27       	eor	r24, r24
    9626:	b8 5f       	subi	r27, 0xF8	; 248
    9628:	39 f0       	breq	.+14     	; 0x9638 <__fixunssfsi+0x4c>
    962a:	b9 3f       	cpi	r27, 0xF9	; 249
    962c:	cc f3       	brlt	.-14     	; 0x9620 <__fixunssfsi+0x34>
    962e:	86 95       	lsr	r24
    9630:	77 95       	ror	r23
    9632:	67 95       	ror	r22
    9634:	b3 95       	inc	r27
    9636:	d9 f7       	brne	.-10     	; 0x962e <__fixunssfsi+0x42>
    9638:	3e f4       	brtc	.+14     	; 0x9648 <__fixunssfsi+0x5c>
    963a:	90 95       	com	r25
    963c:	80 95       	com	r24
    963e:	70 95       	com	r23
    9640:	61 95       	neg	r22
    9642:	7f 4f       	sbci	r23, 0xFF	; 255
    9644:	8f 4f       	sbci	r24, 0xFF	; 255
    9646:	9f 4f       	sbci	r25, 0xFF	; 255
    9648:	08 95       	ret

0000964a <__floatunsisf>:
    964a:	e8 94       	clt
    964c:	09 c0       	rjmp	.+18     	; 0x9660 <__floatsisf+0x12>

0000964e <__floatsisf>:
    964e:	97 fb       	bst	r25, 7
    9650:	3e f4       	brtc	.+14     	; 0x9660 <__floatsisf+0x12>
    9652:	90 95       	com	r25
    9654:	80 95       	com	r24
    9656:	70 95       	com	r23
    9658:	61 95       	neg	r22
    965a:	7f 4f       	sbci	r23, 0xFF	; 255
    965c:	8f 4f       	sbci	r24, 0xFF	; 255
    965e:	9f 4f       	sbci	r25, 0xFF	; 255
    9660:	99 23       	and	r25, r25
    9662:	a9 f0       	breq	.+42     	; 0x968e <__floatsisf+0x40>
    9664:	f9 2f       	mov	r31, r25
    9666:	96 e9       	ldi	r25, 0x96	; 150
    9668:	bb 27       	eor	r27, r27
    966a:	93 95       	inc	r25
    966c:	f6 95       	lsr	r31
    966e:	87 95       	ror	r24
    9670:	77 95       	ror	r23
    9672:	67 95       	ror	r22
    9674:	b7 95       	ror	r27
    9676:	f1 11       	cpse	r31, r1
    9678:	f8 cf       	rjmp	.-16     	; 0x966a <__floatsisf+0x1c>
    967a:	fa f4       	brpl	.+62     	; 0x96ba <__floatsisf+0x6c>
    967c:	bb 0f       	add	r27, r27
    967e:	11 f4       	brne	.+4      	; 0x9684 <__floatsisf+0x36>
    9680:	60 ff       	sbrs	r22, 0
    9682:	1b c0       	rjmp	.+54     	; 0x96ba <__floatsisf+0x6c>
    9684:	6f 5f       	subi	r22, 0xFF	; 255
    9686:	7f 4f       	sbci	r23, 0xFF	; 255
    9688:	8f 4f       	sbci	r24, 0xFF	; 255
    968a:	9f 4f       	sbci	r25, 0xFF	; 255
    968c:	16 c0       	rjmp	.+44     	; 0x96ba <__floatsisf+0x6c>
    968e:	88 23       	and	r24, r24
    9690:	11 f0       	breq	.+4      	; 0x9696 <__floatsisf+0x48>
    9692:	96 e9       	ldi	r25, 0x96	; 150
    9694:	11 c0       	rjmp	.+34     	; 0x96b8 <__floatsisf+0x6a>
    9696:	77 23       	and	r23, r23
    9698:	21 f0       	breq	.+8      	; 0x96a2 <__floatsisf+0x54>
    969a:	9e e8       	ldi	r25, 0x8E	; 142
    969c:	87 2f       	mov	r24, r23
    969e:	76 2f       	mov	r23, r22
    96a0:	05 c0       	rjmp	.+10     	; 0x96ac <__floatsisf+0x5e>
    96a2:	66 23       	and	r22, r22
    96a4:	71 f0       	breq	.+28     	; 0x96c2 <__floatsisf+0x74>
    96a6:	96 e8       	ldi	r25, 0x86	; 134
    96a8:	86 2f       	mov	r24, r22
    96aa:	70 e0       	ldi	r23, 0x00	; 0
    96ac:	60 e0       	ldi	r22, 0x00	; 0
    96ae:	2a f0       	brmi	.+10     	; 0x96ba <__floatsisf+0x6c>
    96b0:	9a 95       	dec	r25
    96b2:	66 0f       	add	r22, r22
    96b4:	77 1f       	adc	r23, r23
    96b6:	88 1f       	adc	r24, r24
    96b8:	da f7       	brpl	.-10     	; 0x96b0 <__floatsisf+0x62>
    96ba:	88 0f       	add	r24, r24
    96bc:	96 95       	lsr	r25
    96be:	87 95       	ror	r24
    96c0:	97 f9       	bld	r25, 7
    96c2:	08 95       	ret

000096c4 <__fp_cmp>:
    96c4:	99 0f       	add	r25, r25
    96c6:	00 08       	sbc	r0, r0
    96c8:	55 0f       	add	r21, r21
    96ca:	aa 0b       	sbc	r26, r26
    96cc:	e0 e8       	ldi	r30, 0x80	; 128
    96ce:	fe ef       	ldi	r31, 0xFE	; 254
    96d0:	16 16       	cp	r1, r22
    96d2:	17 06       	cpc	r1, r23
    96d4:	e8 07       	cpc	r30, r24
    96d6:	f9 07       	cpc	r31, r25
    96d8:	c0 f0       	brcs	.+48     	; 0x970a <__fp_cmp+0x46>
    96da:	12 16       	cp	r1, r18
    96dc:	13 06       	cpc	r1, r19
    96de:	e4 07       	cpc	r30, r20
    96e0:	f5 07       	cpc	r31, r21
    96e2:	98 f0       	brcs	.+38     	; 0x970a <__fp_cmp+0x46>
    96e4:	62 1b       	sub	r22, r18
    96e6:	73 0b       	sbc	r23, r19
    96e8:	84 0b       	sbc	r24, r20
    96ea:	95 0b       	sbc	r25, r21
    96ec:	39 f4       	brne	.+14     	; 0x96fc <__fp_cmp+0x38>
    96ee:	0a 26       	eor	r0, r26
    96f0:	61 f0       	breq	.+24     	; 0x970a <__fp_cmp+0x46>
    96f2:	23 2b       	or	r18, r19
    96f4:	24 2b       	or	r18, r20
    96f6:	25 2b       	or	r18, r21
    96f8:	21 f4       	brne	.+8      	; 0x9702 <__fp_cmp+0x3e>
    96fa:	08 95       	ret
    96fc:	0a 26       	eor	r0, r26
    96fe:	09 f4       	brne	.+2      	; 0x9702 <__fp_cmp+0x3e>
    9700:	a1 40       	sbci	r26, 0x01	; 1
    9702:	a6 95       	lsr	r26
    9704:	8f ef       	ldi	r24, 0xFF	; 255
    9706:	81 1d       	adc	r24, r1
    9708:	81 1d       	adc	r24, r1
    970a:	08 95       	ret

0000970c <__fp_inf>:
    970c:	97 f9       	bld	r25, 7
    970e:	9f 67       	ori	r25, 0x7F	; 127
    9710:	80 e8       	ldi	r24, 0x80	; 128
    9712:	70 e0       	ldi	r23, 0x00	; 0
    9714:	60 e0       	ldi	r22, 0x00	; 0
    9716:	08 95       	ret

00009718 <__fp_mintl>:
    9718:	88 23       	and	r24, r24
    971a:	71 f4       	brne	.+28     	; 0x9738 <__fp_mintl+0x20>
    971c:	77 23       	and	r23, r23
    971e:	21 f0       	breq	.+8      	; 0x9728 <__fp_mintl+0x10>
    9720:	98 50       	subi	r25, 0x08	; 8
    9722:	87 2b       	or	r24, r23
    9724:	76 2f       	mov	r23, r22
    9726:	07 c0       	rjmp	.+14     	; 0x9736 <__fp_mintl+0x1e>
    9728:	66 23       	and	r22, r22
    972a:	11 f4       	brne	.+4      	; 0x9730 <__fp_mintl+0x18>
    972c:	99 27       	eor	r25, r25
    972e:	0d c0       	rjmp	.+26     	; 0x974a <__fp_mintl+0x32>
    9730:	90 51       	subi	r25, 0x10	; 16
    9732:	86 2b       	or	r24, r22
    9734:	70 e0       	ldi	r23, 0x00	; 0
    9736:	60 e0       	ldi	r22, 0x00	; 0
    9738:	2a f0       	brmi	.+10     	; 0x9744 <__fp_mintl+0x2c>
    973a:	9a 95       	dec	r25
    973c:	66 0f       	add	r22, r22
    973e:	77 1f       	adc	r23, r23
    9740:	88 1f       	adc	r24, r24
    9742:	da f7       	brpl	.-10     	; 0x973a <__fp_mintl+0x22>
    9744:	88 0f       	add	r24, r24
    9746:	96 95       	lsr	r25
    9748:	87 95       	ror	r24
    974a:	97 f9       	bld	r25, 7
    974c:	08 95       	ret

0000974e <__fp_mpack>:
    974e:	9f 3f       	cpi	r25, 0xFF	; 255
    9750:	31 f0       	breq	.+12     	; 0x975e <__fp_mpack_finite+0xc>

00009752 <__fp_mpack_finite>:
    9752:	91 50       	subi	r25, 0x01	; 1
    9754:	20 f4       	brcc	.+8      	; 0x975e <__fp_mpack_finite+0xc>
    9756:	87 95       	ror	r24
    9758:	77 95       	ror	r23
    975a:	67 95       	ror	r22
    975c:	b7 95       	ror	r27
    975e:	88 0f       	add	r24, r24
    9760:	91 1d       	adc	r25, r1
    9762:	96 95       	lsr	r25
    9764:	87 95       	ror	r24
    9766:	97 f9       	bld	r25, 7
    9768:	08 95       	ret

0000976a <__fp_nan>:
    976a:	9f ef       	ldi	r25, 0xFF	; 255
    976c:	80 ec       	ldi	r24, 0xC0	; 192
    976e:	08 95       	ret

00009770 <__fp_pscA>:
    9770:	00 24       	eor	r0, r0
    9772:	0a 94       	dec	r0
    9774:	16 16       	cp	r1, r22
    9776:	17 06       	cpc	r1, r23
    9778:	18 06       	cpc	r1, r24
    977a:	09 06       	cpc	r0, r25
    977c:	08 95       	ret

0000977e <__fp_pscB>:
    977e:	00 24       	eor	r0, r0
    9780:	0a 94       	dec	r0
    9782:	12 16       	cp	r1, r18
    9784:	13 06       	cpc	r1, r19
    9786:	14 06       	cpc	r1, r20
    9788:	05 06       	cpc	r0, r21
    978a:	08 95       	ret

0000978c <__fp_round>:
    978c:	09 2e       	mov	r0, r25
    978e:	03 94       	inc	r0
    9790:	00 0c       	add	r0, r0
    9792:	11 f4       	brne	.+4      	; 0x9798 <__fp_round+0xc>
    9794:	88 23       	and	r24, r24
    9796:	52 f0       	brmi	.+20     	; 0x97ac <__fp_round+0x20>
    9798:	bb 0f       	add	r27, r27
    979a:	40 f4       	brcc	.+16     	; 0x97ac <__fp_round+0x20>
    979c:	bf 2b       	or	r27, r31
    979e:	11 f4       	brne	.+4      	; 0x97a4 <__fp_round+0x18>
    97a0:	60 ff       	sbrs	r22, 0
    97a2:	04 c0       	rjmp	.+8      	; 0x97ac <__fp_round+0x20>
    97a4:	6f 5f       	subi	r22, 0xFF	; 255
    97a6:	7f 4f       	sbci	r23, 0xFF	; 255
    97a8:	8f 4f       	sbci	r24, 0xFF	; 255
    97aa:	9f 4f       	sbci	r25, 0xFF	; 255
    97ac:	08 95       	ret

000097ae <__fp_split3>:
    97ae:	57 fd       	sbrc	r21, 7
    97b0:	90 58       	subi	r25, 0x80	; 128
    97b2:	44 0f       	add	r20, r20
    97b4:	55 1f       	adc	r21, r21
    97b6:	59 f0       	breq	.+22     	; 0x97ce <__fp_splitA+0x10>
    97b8:	5f 3f       	cpi	r21, 0xFF	; 255
    97ba:	71 f0       	breq	.+28     	; 0x97d8 <__fp_splitA+0x1a>
    97bc:	47 95       	ror	r20

000097be <__fp_splitA>:
    97be:	88 0f       	add	r24, r24
    97c0:	97 fb       	bst	r25, 7
    97c2:	99 1f       	adc	r25, r25
    97c4:	61 f0       	breq	.+24     	; 0x97de <__fp_splitA+0x20>
    97c6:	9f 3f       	cpi	r25, 0xFF	; 255
    97c8:	79 f0       	breq	.+30     	; 0x97e8 <__fp_splitA+0x2a>
    97ca:	87 95       	ror	r24
    97cc:	08 95       	ret
    97ce:	12 16       	cp	r1, r18
    97d0:	13 06       	cpc	r1, r19
    97d2:	14 06       	cpc	r1, r20
    97d4:	55 1f       	adc	r21, r21
    97d6:	f2 cf       	rjmp	.-28     	; 0x97bc <__fp_split3+0xe>
    97d8:	46 95       	lsr	r20
    97da:	f1 df       	rcall	.-30     	; 0x97be <__fp_splitA>
    97dc:	08 c0       	rjmp	.+16     	; 0x97ee <__fp_splitA+0x30>
    97de:	16 16       	cp	r1, r22
    97e0:	17 06       	cpc	r1, r23
    97e2:	18 06       	cpc	r1, r24
    97e4:	99 1f       	adc	r25, r25
    97e6:	f1 cf       	rjmp	.-30     	; 0x97ca <__fp_splitA+0xc>
    97e8:	86 95       	lsr	r24
    97ea:	71 05       	cpc	r23, r1
    97ec:	61 05       	cpc	r22, r1
    97ee:	08 94       	sec
    97f0:	08 95       	ret

000097f2 <__fp_trunc>:
    97f2:	0e 94 df 4b 	call	0x97be	; 0x97be <__fp_splitA>
    97f6:	a0 f0       	brcs	.+40     	; 0x9820 <__fp_trunc+0x2e>
    97f8:	be e7       	ldi	r27, 0x7E	; 126
    97fa:	b9 17       	cp	r27, r25
    97fc:	88 f4       	brcc	.+34     	; 0x9820 <__fp_trunc+0x2e>
    97fe:	bb 27       	eor	r27, r27
    9800:	9f 38       	cpi	r25, 0x8F	; 143
    9802:	60 f4       	brcc	.+24     	; 0x981c <__fp_trunc+0x2a>
    9804:	16 16       	cp	r1, r22
    9806:	b1 1d       	adc	r27, r1
    9808:	67 2f       	mov	r22, r23
    980a:	78 2f       	mov	r23, r24
    980c:	88 27       	eor	r24, r24
    980e:	98 5f       	subi	r25, 0xF8	; 248
    9810:	f7 cf       	rjmp	.-18     	; 0x9800 <__fp_trunc+0xe>
    9812:	86 95       	lsr	r24
    9814:	77 95       	ror	r23
    9816:	67 95       	ror	r22
    9818:	b1 1d       	adc	r27, r1
    981a:	93 95       	inc	r25
    981c:	96 39       	cpi	r25, 0x96	; 150
    981e:	c8 f3       	brcs	.-14     	; 0x9812 <__fp_trunc+0x20>
    9820:	08 95       	ret

00009822 <__fp_zero>:
    9822:	e8 94       	clt

00009824 <__fp_szero>:
    9824:	bb 27       	eor	r27, r27
    9826:	66 27       	eor	r22, r22
    9828:	77 27       	eor	r23, r23
    982a:	cb 01       	movw	r24, r22
    982c:	97 f9       	bld	r25, 7
    982e:	08 95       	ret

00009830 <__gesf2>:
    9830:	0e 94 62 4b 	call	0x96c4	; 0x96c4 <__fp_cmp>
    9834:	08 f4       	brcc	.+2      	; 0x9838 <__gesf2+0x8>
    9836:	8f ef       	ldi	r24, 0xFF	; 255
    9838:	08 95       	ret

0000983a <__mulsf3>:
    983a:	0e 94 30 4c 	call	0x9860	; 0x9860 <__mulsf3x>
    983e:	0c 94 c6 4b 	jmp	0x978c	; 0x978c <__fp_round>
    9842:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__fp_pscA>
    9846:	38 f0       	brcs	.+14     	; 0x9856 <__mulsf3+0x1c>
    9848:	0e 94 bf 4b 	call	0x977e	; 0x977e <__fp_pscB>
    984c:	20 f0       	brcs	.+8      	; 0x9856 <__mulsf3+0x1c>
    984e:	95 23       	and	r25, r21
    9850:	11 f0       	breq	.+4      	; 0x9856 <__mulsf3+0x1c>
    9852:	0c 94 86 4b 	jmp	0x970c	; 0x970c <__fp_inf>
    9856:	0c 94 b5 4b 	jmp	0x976a	; 0x976a <__fp_nan>
    985a:	11 24       	eor	r1, r1
    985c:	0c 94 12 4c 	jmp	0x9824	; 0x9824 <__fp_szero>

00009860 <__mulsf3x>:
    9860:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <__fp_split3>
    9864:	70 f3       	brcs	.-36     	; 0x9842 <__mulsf3+0x8>

00009866 <__mulsf3_pse>:
    9866:	95 9f       	mul	r25, r21
    9868:	c1 f3       	breq	.-16     	; 0x985a <__mulsf3+0x20>
    986a:	95 0f       	add	r25, r21
    986c:	50 e0       	ldi	r21, 0x00	; 0
    986e:	55 1f       	adc	r21, r21
    9870:	62 9f       	mul	r22, r18
    9872:	f0 01       	movw	r30, r0
    9874:	72 9f       	mul	r23, r18
    9876:	bb 27       	eor	r27, r27
    9878:	f0 0d       	add	r31, r0
    987a:	b1 1d       	adc	r27, r1
    987c:	63 9f       	mul	r22, r19
    987e:	aa 27       	eor	r26, r26
    9880:	f0 0d       	add	r31, r0
    9882:	b1 1d       	adc	r27, r1
    9884:	aa 1f       	adc	r26, r26
    9886:	64 9f       	mul	r22, r20
    9888:	66 27       	eor	r22, r22
    988a:	b0 0d       	add	r27, r0
    988c:	a1 1d       	adc	r26, r1
    988e:	66 1f       	adc	r22, r22
    9890:	82 9f       	mul	r24, r18
    9892:	22 27       	eor	r18, r18
    9894:	b0 0d       	add	r27, r0
    9896:	a1 1d       	adc	r26, r1
    9898:	62 1f       	adc	r22, r18
    989a:	73 9f       	mul	r23, r19
    989c:	b0 0d       	add	r27, r0
    989e:	a1 1d       	adc	r26, r1
    98a0:	62 1f       	adc	r22, r18
    98a2:	83 9f       	mul	r24, r19
    98a4:	a0 0d       	add	r26, r0
    98a6:	61 1d       	adc	r22, r1
    98a8:	22 1f       	adc	r18, r18
    98aa:	74 9f       	mul	r23, r20
    98ac:	33 27       	eor	r19, r19
    98ae:	a0 0d       	add	r26, r0
    98b0:	61 1d       	adc	r22, r1
    98b2:	23 1f       	adc	r18, r19
    98b4:	84 9f       	mul	r24, r20
    98b6:	60 0d       	add	r22, r0
    98b8:	21 1d       	adc	r18, r1
    98ba:	82 2f       	mov	r24, r18
    98bc:	76 2f       	mov	r23, r22
    98be:	6a 2f       	mov	r22, r26
    98c0:	11 24       	eor	r1, r1
    98c2:	9f 57       	subi	r25, 0x7F	; 127
    98c4:	50 40       	sbci	r21, 0x00	; 0
    98c6:	9a f0       	brmi	.+38     	; 0x98ee <__mulsf3_pse+0x88>
    98c8:	f1 f0       	breq	.+60     	; 0x9906 <__mulsf3_pse+0xa0>
    98ca:	88 23       	and	r24, r24
    98cc:	4a f0       	brmi	.+18     	; 0x98e0 <__mulsf3_pse+0x7a>
    98ce:	ee 0f       	add	r30, r30
    98d0:	ff 1f       	adc	r31, r31
    98d2:	bb 1f       	adc	r27, r27
    98d4:	66 1f       	adc	r22, r22
    98d6:	77 1f       	adc	r23, r23
    98d8:	88 1f       	adc	r24, r24
    98da:	91 50       	subi	r25, 0x01	; 1
    98dc:	50 40       	sbci	r21, 0x00	; 0
    98de:	a9 f7       	brne	.-22     	; 0x98ca <__mulsf3_pse+0x64>
    98e0:	9e 3f       	cpi	r25, 0xFE	; 254
    98e2:	51 05       	cpc	r21, r1
    98e4:	80 f0       	brcs	.+32     	; 0x9906 <__mulsf3_pse+0xa0>
    98e6:	0c 94 86 4b 	jmp	0x970c	; 0x970c <__fp_inf>
    98ea:	0c 94 12 4c 	jmp	0x9824	; 0x9824 <__fp_szero>
    98ee:	5f 3f       	cpi	r21, 0xFF	; 255
    98f0:	e4 f3       	brlt	.-8      	; 0x98ea <__mulsf3_pse+0x84>
    98f2:	98 3e       	cpi	r25, 0xE8	; 232
    98f4:	d4 f3       	brlt	.-12     	; 0x98ea <__mulsf3_pse+0x84>
    98f6:	86 95       	lsr	r24
    98f8:	77 95       	ror	r23
    98fa:	67 95       	ror	r22
    98fc:	b7 95       	ror	r27
    98fe:	f7 95       	ror	r31
    9900:	e7 95       	ror	r30
    9902:	9f 5f       	subi	r25, 0xFF	; 255
    9904:	c1 f7       	brne	.-16     	; 0x98f6 <__mulsf3_pse+0x90>
    9906:	fe 2b       	or	r31, r30
    9908:	88 0f       	add	r24, r24
    990a:	91 1d       	adc	r25, r1
    990c:	96 95       	lsr	r25
    990e:	87 95       	ror	r24
    9910:	97 f9       	bld	r25, 7
    9912:	08 95       	ret

00009914 <__mulsi3>:
    9914:	db 01       	movw	r26, r22
    9916:	8f 93       	push	r24
    9918:	9f 93       	push	r25
    991a:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <__muluhisi3>
    991e:	bf 91       	pop	r27
    9920:	af 91       	pop	r26
    9922:	a2 9f       	mul	r26, r18
    9924:	80 0d       	add	r24, r0
    9926:	91 1d       	adc	r25, r1
    9928:	a3 9f       	mul	r26, r19
    992a:	90 0d       	add	r25, r0
    992c:	b2 9f       	mul	r27, r18
    992e:	90 0d       	add	r25, r0
    9930:	11 24       	eor	r1, r1
    9932:	08 95       	ret

00009934 <__udivmodhi4>:
    9934:	aa 1b       	sub	r26, r26
    9936:	bb 1b       	sub	r27, r27
    9938:	51 e1       	ldi	r21, 0x11	; 17
    993a:	07 c0       	rjmp	.+14     	; 0x994a <__udivmodhi4_ep>

0000993c <__udivmodhi4_loop>:
    993c:	aa 1f       	adc	r26, r26
    993e:	bb 1f       	adc	r27, r27
    9940:	a6 17       	cp	r26, r22
    9942:	b7 07       	cpc	r27, r23
    9944:	10 f0       	brcs	.+4      	; 0x994a <__udivmodhi4_ep>
    9946:	a6 1b       	sub	r26, r22
    9948:	b7 0b       	sbc	r27, r23

0000994a <__udivmodhi4_ep>:
    994a:	88 1f       	adc	r24, r24
    994c:	99 1f       	adc	r25, r25
    994e:	5a 95       	dec	r21
    9950:	a9 f7       	brne	.-22     	; 0x993c <__udivmodhi4_loop>
    9952:	80 95       	com	r24
    9954:	90 95       	com	r25
    9956:	bc 01       	movw	r22, r24
    9958:	cd 01       	movw	r24, r26
    995a:	08 95       	ret

0000995c <__divmodhi4>:
    995c:	97 fb       	bst	r25, 7
    995e:	07 2e       	mov	r0, r23
    9960:	16 f4       	brtc	.+4      	; 0x9966 <__divmodhi4+0xa>
    9962:	00 94       	com	r0
    9964:	07 d0       	rcall	.+14     	; 0x9974 <__divmodhi4_neg1>
    9966:	77 fd       	sbrc	r23, 7
    9968:	09 d0       	rcall	.+18     	; 0x997c <__divmodhi4_neg2>
    996a:	0e 94 9a 4c 	call	0x9934	; 0x9934 <__udivmodhi4>
    996e:	07 fc       	sbrc	r0, 7
    9970:	05 d0       	rcall	.+10     	; 0x997c <__divmodhi4_neg2>
    9972:	3e f4       	brtc	.+14     	; 0x9982 <__divmodhi4_exit>

00009974 <__divmodhi4_neg1>:
    9974:	90 95       	com	r25
    9976:	81 95       	neg	r24
    9978:	9f 4f       	sbci	r25, 0xFF	; 255
    997a:	08 95       	ret

0000997c <__divmodhi4_neg2>:
    997c:	70 95       	com	r23
    997e:	61 95       	neg	r22
    9980:	7f 4f       	sbci	r23, 0xFF	; 255

00009982 <__divmodhi4_exit>:
    9982:	08 95       	ret

00009984 <__udivmodsi4>:
    9984:	a1 e2       	ldi	r26, 0x21	; 33
    9986:	1a 2e       	mov	r1, r26
    9988:	aa 1b       	sub	r26, r26
    998a:	bb 1b       	sub	r27, r27
    998c:	fd 01       	movw	r30, r26
    998e:	0d c0       	rjmp	.+26     	; 0x99aa <__udivmodsi4_ep>

00009990 <__udivmodsi4_loop>:
    9990:	aa 1f       	adc	r26, r26
    9992:	bb 1f       	adc	r27, r27
    9994:	ee 1f       	adc	r30, r30
    9996:	ff 1f       	adc	r31, r31
    9998:	a2 17       	cp	r26, r18
    999a:	b3 07       	cpc	r27, r19
    999c:	e4 07       	cpc	r30, r20
    999e:	f5 07       	cpc	r31, r21
    99a0:	20 f0       	brcs	.+8      	; 0x99aa <__udivmodsi4_ep>
    99a2:	a2 1b       	sub	r26, r18
    99a4:	b3 0b       	sbc	r27, r19
    99a6:	e4 0b       	sbc	r30, r20
    99a8:	f5 0b       	sbc	r31, r21

000099aa <__udivmodsi4_ep>:
    99aa:	66 1f       	adc	r22, r22
    99ac:	77 1f       	adc	r23, r23
    99ae:	88 1f       	adc	r24, r24
    99b0:	99 1f       	adc	r25, r25
    99b2:	1a 94       	dec	r1
    99b4:	69 f7       	brne	.-38     	; 0x9990 <__udivmodsi4_loop>
    99b6:	60 95       	com	r22
    99b8:	70 95       	com	r23
    99ba:	80 95       	com	r24
    99bc:	90 95       	com	r25
    99be:	9b 01       	movw	r18, r22
    99c0:	ac 01       	movw	r20, r24
    99c2:	bd 01       	movw	r22, r26
    99c4:	cf 01       	movw	r24, r30
    99c6:	08 95       	ret

000099c8 <__divmodsi4>:
    99c8:	05 2e       	mov	r0, r21
    99ca:	97 fb       	bst	r25, 7
    99cc:	1e f4       	brtc	.+6      	; 0x99d4 <__divmodsi4+0xc>
    99ce:	00 94       	com	r0
    99d0:	0e 94 fb 4c 	call	0x99f6	; 0x99f6 <__negsi2>
    99d4:	57 fd       	sbrc	r21, 7
    99d6:	07 d0       	rcall	.+14     	; 0x99e6 <__divmodsi4_neg2>
    99d8:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__udivmodsi4>
    99dc:	07 fc       	sbrc	r0, 7
    99de:	03 d0       	rcall	.+6      	; 0x99e6 <__divmodsi4_neg2>
    99e0:	4e f4       	brtc	.+18     	; 0x99f4 <__divmodsi4_exit>
    99e2:	0c 94 fb 4c 	jmp	0x99f6	; 0x99f6 <__negsi2>

000099e6 <__divmodsi4_neg2>:
    99e6:	50 95       	com	r21
    99e8:	40 95       	com	r20
    99ea:	30 95       	com	r19
    99ec:	21 95       	neg	r18
    99ee:	3f 4f       	sbci	r19, 0xFF	; 255
    99f0:	4f 4f       	sbci	r20, 0xFF	; 255
    99f2:	5f 4f       	sbci	r21, 0xFF	; 255

000099f4 <__divmodsi4_exit>:
    99f4:	08 95       	ret

000099f6 <__negsi2>:
    99f6:	90 95       	com	r25
    99f8:	80 95       	com	r24
    99fa:	70 95       	com	r23
    99fc:	61 95       	neg	r22
    99fe:	7f 4f       	sbci	r23, 0xFF	; 255
    9a00:	8f 4f       	sbci	r24, 0xFF	; 255
    9a02:	9f 4f       	sbci	r25, 0xFF	; 255
    9a04:	08 95       	ret

00009a06 <__tablejump2__>:
    9a06:	ee 0f       	add	r30, r30
    9a08:	ff 1f       	adc	r31, r31
    9a0a:	00 24       	eor	r0, r0
    9a0c:	00 1c       	adc	r0, r0
    9a0e:	0b be       	out	0x3b, r0	; 59
    9a10:	07 90       	elpm	r0, Z+
    9a12:	f6 91       	elpm	r31, Z
    9a14:	e0 2d       	mov	r30, r0
    9a16:	09 94       	ijmp

00009a18 <__umulhisi3>:
    9a18:	a2 9f       	mul	r26, r18
    9a1a:	b0 01       	movw	r22, r0
    9a1c:	b3 9f       	mul	r27, r19
    9a1e:	c0 01       	movw	r24, r0
    9a20:	a3 9f       	mul	r26, r19
    9a22:	70 0d       	add	r23, r0
    9a24:	81 1d       	adc	r24, r1
    9a26:	11 24       	eor	r1, r1
    9a28:	91 1d       	adc	r25, r1
    9a2a:	b2 9f       	mul	r27, r18
    9a2c:	70 0d       	add	r23, r0
    9a2e:	81 1d       	adc	r24, r1
    9a30:	11 24       	eor	r1, r1
    9a32:	91 1d       	adc	r25, r1
    9a34:	08 95       	ret

00009a36 <__usmulhisi3>:
    9a36:	0e 94 0c 4d 	call	0x9a18	; 0x9a18 <__umulhisi3>

00009a3a <__usmulhisi3_tail>:
    9a3a:	b7 ff       	sbrs	r27, 7
    9a3c:	08 95       	ret
    9a3e:	82 1b       	sub	r24, r18
    9a40:	93 0b       	sbc	r25, r19
    9a42:	08 95       	ret

00009a44 <__muluhisi3>:
    9a44:	0e 94 0c 4d 	call	0x9a18	; 0x9a18 <__umulhisi3>
    9a48:	a5 9f       	mul	r26, r21
    9a4a:	90 0d       	add	r25, r0
    9a4c:	b4 9f       	mul	r27, r20
    9a4e:	90 0d       	add	r25, r0
    9a50:	a4 9f       	mul	r26, r20
    9a52:	80 0d       	add	r24, r0
    9a54:	91 1d       	adc	r25, r1
    9a56:	11 24       	eor	r1, r1
    9a58:	08 95       	ret

00009a5a <__mulshisi3>:
    9a5a:	b7 ff       	sbrs	r27, 7
    9a5c:	0c 94 22 4d 	jmp	0x9a44	; 0x9a44 <__muluhisi3>

00009a60 <__mulohisi3>:
    9a60:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <__muluhisi3>
    9a64:	82 1b       	sub	r24, r18
    9a66:	93 0b       	sbc	r25, r19
    9a68:	08 95       	ret

00009a6a <malloc>:
    9a6a:	0f 93       	push	r16
    9a6c:	1f 93       	push	r17
    9a6e:	cf 93       	push	r28
    9a70:	df 93       	push	r29
    9a72:	82 30       	cpi	r24, 0x02	; 2
    9a74:	91 05       	cpc	r25, r1
    9a76:	10 f4       	brcc	.+4      	; 0x9a7c <malloc+0x12>
    9a78:	82 e0       	ldi	r24, 0x02	; 2
    9a7a:	90 e0       	ldi	r25, 0x00	; 0
    9a7c:	e0 91 97 4a 	lds	r30, 0x4A97	; 0x804a97 <__flp>
    9a80:	f0 91 98 4a 	lds	r31, 0x4A98	; 0x804a98 <__flp+0x1>
    9a84:	20 e0       	ldi	r18, 0x00	; 0
    9a86:	30 e0       	ldi	r19, 0x00	; 0
    9a88:	a0 e0       	ldi	r26, 0x00	; 0
    9a8a:	b0 e0       	ldi	r27, 0x00	; 0
    9a8c:	30 97       	sbiw	r30, 0x00	; 0
    9a8e:	19 f1       	breq	.+70     	; 0x9ad6 <malloc+0x6c>
    9a90:	40 81       	ld	r20, Z
    9a92:	51 81       	ldd	r21, Z+1	; 0x01
    9a94:	02 81       	ldd	r16, Z+2	; 0x02
    9a96:	13 81       	ldd	r17, Z+3	; 0x03
    9a98:	48 17       	cp	r20, r24
    9a9a:	59 07       	cpc	r21, r25
    9a9c:	c8 f0       	brcs	.+50     	; 0x9ad0 <malloc+0x66>
    9a9e:	84 17       	cp	r24, r20
    9aa0:	95 07       	cpc	r25, r21
    9aa2:	69 f4       	brne	.+26     	; 0x9abe <malloc+0x54>
    9aa4:	10 97       	sbiw	r26, 0x00	; 0
    9aa6:	31 f0       	breq	.+12     	; 0x9ab4 <malloc+0x4a>
    9aa8:	12 96       	adiw	r26, 0x02	; 2
    9aaa:	0c 93       	st	X, r16
    9aac:	12 97       	sbiw	r26, 0x02	; 2
    9aae:	13 96       	adiw	r26, 0x03	; 3
    9ab0:	1c 93       	st	X, r17
    9ab2:	27 c0       	rjmp	.+78     	; 0x9b02 <malloc+0x98>
    9ab4:	00 93 97 4a 	sts	0x4A97, r16	; 0x804a97 <__flp>
    9ab8:	10 93 98 4a 	sts	0x4A98, r17	; 0x804a98 <__flp+0x1>
    9abc:	22 c0       	rjmp	.+68     	; 0x9b02 <malloc+0x98>
    9abe:	21 15       	cp	r18, r1
    9ac0:	31 05       	cpc	r19, r1
    9ac2:	19 f0       	breq	.+6      	; 0x9aca <malloc+0x60>
    9ac4:	42 17       	cp	r20, r18
    9ac6:	53 07       	cpc	r21, r19
    9ac8:	18 f4       	brcc	.+6      	; 0x9ad0 <malloc+0x66>
    9aca:	9a 01       	movw	r18, r20
    9acc:	bd 01       	movw	r22, r26
    9ace:	ef 01       	movw	r28, r30
    9ad0:	df 01       	movw	r26, r30
    9ad2:	f8 01       	movw	r30, r16
    9ad4:	db cf       	rjmp	.-74     	; 0x9a8c <malloc+0x22>
    9ad6:	21 15       	cp	r18, r1
    9ad8:	31 05       	cpc	r19, r1
    9ada:	f9 f0       	breq	.+62     	; 0x9b1a <malloc+0xb0>
    9adc:	28 1b       	sub	r18, r24
    9ade:	39 0b       	sbc	r19, r25
    9ae0:	24 30       	cpi	r18, 0x04	; 4
    9ae2:	31 05       	cpc	r19, r1
    9ae4:	80 f4       	brcc	.+32     	; 0x9b06 <malloc+0x9c>
    9ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    9ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    9aea:	61 15       	cp	r22, r1
    9aec:	71 05       	cpc	r23, r1
    9aee:	21 f0       	breq	.+8      	; 0x9af8 <malloc+0x8e>
    9af0:	fb 01       	movw	r30, r22
    9af2:	82 83       	std	Z+2, r24	; 0x02
    9af4:	93 83       	std	Z+3, r25	; 0x03
    9af6:	04 c0       	rjmp	.+8      	; 0x9b00 <malloc+0x96>
    9af8:	80 93 97 4a 	sts	0x4A97, r24	; 0x804a97 <__flp>
    9afc:	90 93 98 4a 	sts	0x4A98, r25	; 0x804a98 <__flp+0x1>
    9b00:	fe 01       	movw	r30, r28
    9b02:	32 96       	adiw	r30, 0x02	; 2
    9b04:	44 c0       	rjmp	.+136    	; 0x9b8e <malloc+0x124>
    9b06:	fe 01       	movw	r30, r28
    9b08:	e2 0f       	add	r30, r18
    9b0a:	f3 1f       	adc	r31, r19
    9b0c:	81 93       	st	Z+, r24
    9b0e:	91 93       	st	Z+, r25
    9b10:	22 50       	subi	r18, 0x02	; 2
    9b12:	31 09       	sbc	r19, r1
    9b14:	28 83       	st	Y, r18
    9b16:	39 83       	std	Y+1, r19	; 0x01
    9b18:	3a c0       	rjmp	.+116    	; 0x9b8e <malloc+0x124>
    9b1a:	20 91 95 4a 	lds	r18, 0x4A95	; 0x804a95 <__brkval>
    9b1e:	30 91 96 4a 	lds	r19, 0x4A96	; 0x804a96 <__brkval+0x1>
    9b22:	23 2b       	or	r18, r19
    9b24:	41 f4       	brne	.+16     	; 0x9b36 <malloc+0xcc>
    9b26:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    9b2a:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    9b2e:	20 93 95 4a 	sts	0x4A95, r18	; 0x804a95 <__brkval>
    9b32:	30 93 96 4a 	sts	0x4A96, r19	; 0x804a96 <__brkval+0x1>
    9b36:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    9b3a:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    9b3e:	21 15       	cp	r18, r1
    9b40:	31 05       	cpc	r19, r1
    9b42:	41 f4       	brne	.+16     	; 0x9b54 <malloc+0xea>
    9b44:	2d b7       	in	r18, 0x3d	; 61
    9b46:	3e b7       	in	r19, 0x3e	; 62
    9b48:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    9b4c:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    9b50:	24 1b       	sub	r18, r20
    9b52:	35 0b       	sbc	r19, r21
    9b54:	e0 91 95 4a 	lds	r30, 0x4A95	; 0x804a95 <__brkval>
    9b58:	f0 91 96 4a 	lds	r31, 0x4A96	; 0x804a96 <__brkval+0x1>
    9b5c:	e2 17       	cp	r30, r18
    9b5e:	f3 07       	cpc	r31, r19
    9b60:	a0 f4       	brcc	.+40     	; 0x9b8a <malloc+0x120>
    9b62:	2e 1b       	sub	r18, r30
    9b64:	3f 0b       	sbc	r19, r31
    9b66:	28 17       	cp	r18, r24
    9b68:	39 07       	cpc	r19, r25
    9b6a:	78 f0       	brcs	.+30     	; 0x9b8a <malloc+0x120>
    9b6c:	ac 01       	movw	r20, r24
    9b6e:	4e 5f       	subi	r20, 0xFE	; 254
    9b70:	5f 4f       	sbci	r21, 0xFF	; 255
    9b72:	24 17       	cp	r18, r20
    9b74:	35 07       	cpc	r19, r21
    9b76:	48 f0       	brcs	.+18     	; 0x9b8a <malloc+0x120>
    9b78:	4e 0f       	add	r20, r30
    9b7a:	5f 1f       	adc	r21, r31
    9b7c:	40 93 95 4a 	sts	0x4A95, r20	; 0x804a95 <__brkval>
    9b80:	50 93 96 4a 	sts	0x4A96, r21	; 0x804a96 <__brkval+0x1>
    9b84:	81 93       	st	Z+, r24
    9b86:	91 93       	st	Z+, r25
    9b88:	02 c0       	rjmp	.+4      	; 0x9b8e <malloc+0x124>
    9b8a:	e0 e0       	ldi	r30, 0x00	; 0
    9b8c:	f0 e0       	ldi	r31, 0x00	; 0
    9b8e:	cf 01       	movw	r24, r30
    9b90:	df 91       	pop	r29
    9b92:	cf 91       	pop	r28
    9b94:	1f 91       	pop	r17
    9b96:	0f 91       	pop	r16
    9b98:	08 95       	ret

00009b9a <free>:
    9b9a:	cf 93       	push	r28
    9b9c:	df 93       	push	r29
    9b9e:	00 97       	sbiw	r24, 0x00	; 0
    9ba0:	09 f4       	brne	.+2      	; 0x9ba4 <free+0xa>
    9ba2:	81 c0       	rjmp	.+258    	; 0x9ca6 <free+0x10c>
    9ba4:	fc 01       	movw	r30, r24
    9ba6:	32 97       	sbiw	r30, 0x02	; 2
    9ba8:	12 82       	std	Z+2, r1	; 0x02
    9baa:	13 82       	std	Z+3, r1	; 0x03
    9bac:	a0 91 97 4a 	lds	r26, 0x4A97	; 0x804a97 <__flp>
    9bb0:	b0 91 98 4a 	lds	r27, 0x4A98	; 0x804a98 <__flp+0x1>
    9bb4:	10 97       	sbiw	r26, 0x00	; 0
    9bb6:	81 f4       	brne	.+32     	; 0x9bd8 <free+0x3e>
    9bb8:	20 81       	ld	r18, Z
    9bba:	31 81       	ldd	r19, Z+1	; 0x01
    9bbc:	82 0f       	add	r24, r18
    9bbe:	93 1f       	adc	r25, r19
    9bc0:	20 91 95 4a 	lds	r18, 0x4A95	; 0x804a95 <__brkval>
    9bc4:	30 91 96 4a 	lds	r19, 0x4A96	; 0x804a96 <__brkval+0x1>
    9bc8:	28 17       	cp	r18, r24
    9bca:	39 07       	cpc	r19, r25
    9bcc:	51 f5       	brne	.+84     	; 0x9c22 <free+0x88>
    9bce:	e0 93 95 4a 	sts	0x4A95, r30	; 0x804a95 <__brkval>
    9bd2:	f0 93 96 4a 	sts	0x4A96, r31	; 0x804a96 <__brkval+0x1>
    9bd6:	67 c0       	rjmp	.+206    	; 0x9ca6 <free+0x10c>
    9bd8:	ed 01       	movw	r28, r26
    9bda:	20 e0       	ldi	r18, 0x00	; 0
    9bdc:	30 e0       	ldi	r19, 0x00	; 0
    9bde:	ce 17       	cp	r28, r30
    9be0:	df 07       	cpc	r29, r31
    9be2:	40 f4       	brcc	.+16     	; 0x9bf4 <free+0x5a>
    9be4:	4a 81       	ldd	r20, Y+2	; 0x02
    9be6:	5b 81       	ldd	r21, Y+3	; 0x03
    9be8:	9e 01       	movw	r18, r28
    9bea:	41 15       	cp	r20, r1
    9bec:	51 05       	cpc	r21, r1
    9bee:	f1 f0       	breq	.+60     	; 0x9c2c <free+0x92>
    9bf0:	ea 01       	movw	r28, r20
    9bf2:	f5 cf       	rjmp	.-22     	; 0x9bde <free+0x44>
    9bf4:	c2 83       	std	Z+2, r28	; 0x02
    9bf6:	d3 83       	std	Z+3, r29	; 0x03
    9bf8:	40 81       	ld	r20, Z
    9bfa:	51 81       	ldd	r21, Z+1	; 0x01
    9bfc:	84 0f       	add	r24, r20
    9bfe:	95 1f       	adc	r25, r21
    9c00:	c8 17       	cp	r28, r24
    9c02:	d9 07       	cpc	r29, r25
    9c04:	59 f4       	brne	.+22     	; 0x9c1c <free+0x82>
    9c06:	88 81       	ld	r24, Y
    9c08:	99 81       	ldd	r25, Y+1	; 0x01
    9c0a:	84 0f       	add	r24, r20
    9c0c:	95 1f       	adc	r25, r21
    9c0e:	02 96       	adiw	r24, 0x02	; 2
    9c10:	80 83       	st	Z, r24
    9c12:	91 83       	std	Z+1, r25	; 0x01
    9c14:	8a 81       	ldd	r24, Y+2	; 0x02
    9c16:	9b 81       	ldd	r25, Y+3	; 0x03
    9c18:	82 83       	std	Z+2, r24	; 0x02
    9c1a:	93 83       	std	Z+3, r25	; 0x03
    9c1c:	21 15       	cp	r18, r1
    9c1e:	31 05       	cpc	r19, r1
    9c20:	29 f4       	brne	.+10     	; 0x9c2c <free+0x92>
    9c22:	e0 93 97 4a 	sts	0x4A97, r30	; 0x804a97 <__flp>
    9c26:	f0 93 98 4a 	sts	0x4A98, r31	; 0x804a98 <__flp+0x1>
    9c2a:	3d c0       	rjmp	.+122    	; 0x9ca6 <free+0x10c>
    9c2c:	e9 01       	movw	r28, r18
    9c2e:	ea 83       	std	Y+2, r30	; 0x02
    9c30:	fb 83       	std	Y+3, r31	; 0x03
    9c32:	49 91       	ld	r20, Y+
    9c34:	59 91       	ld	r21, Y+
    9c36:	c4 0f       	add	r28, r20
    9c38:	d5 1f       	adc	r29, r21
    9c3a:	ec 17       	cp	r30, r28
    9c3c:	fd 07       	cpc	r31, r29
    9c3e:	61 f4       	brne	.+24     	; 0x9c58 <free+0xbe>
    9c40:	80 81       	ld	r24, Z
    9c42:	91 81       	ldd	r25, Z+1	; 0x01
    9c44:	84 0f       	add	r24, r20
    9c46:	95 1f       	adc	r25, r21
    9c48:	02 96       	adiw	r24, 0x02	; 2
    9c4a:	e9 01       	movw	r28, r18
    9c4c:	88 83       	st	Y, r24
    9c4e:	99 83       	std	Y+1, r25	; 0x01
    9c50:	82 81       	ldd	r24, Z+2	; 0x02
    9c52:	93 81       	ldd	r25, Z+3	; 0x03
    9c54:	8a 83       	std	Y+2, r24	; 0x02
    9c56:	9b 83       	std	Y+3, r25	; 0x03
    9c58:	e0 e0       	ldi	r30, 0x00	; 0
    9c5a:	f0 e0       	ldi	r31, 0x00	; 0
    9c5c:	12 96       	adiw	r26, 0x02	; 2
    9c5e:	8d 91       	ld	r24, X+
    9c60:	9c 91       	ld	r25, X
    9c62:	13 97       	sbiw	r26, 0x03	; 3
    9c64:	00 97       	sbiw	r24, 0x00	; 0
    9c66:	19 f0       	breq	.+6      	; 0x9c6e <free+0xd4>
    9c68:	fd 01       	movw	r30, r26
    9c6a:	dc 01       	movw	r26, r24
    9c6c:	f7 cf       	rjmp	.-18     	; 0x9c5c <free+0xc2>
    9c6e:	8d 91       	ld	r24, X+
    9c70:	9c 91       	ld	r25, X
    9c72:	11 97       	sbiw	r26, 0x01	; 1
    9c74:	9d 01       	movw	r18, r26
    9c76:	2e 5f       	subi	r18, 0xFE	; 254
    9c78:	3f 4f       	sbci	r19, 0xFF	; 255
    9c7a:	82 0f       	add	r24, r18
    9c7c:	93 1f       	adc	r25, r19
    9c7e:	20 91 95 4a 	lds	r18, 0x4A95	; 0x804a95 <__brkval>
    9c82:	30 91 96 4a 	lds	r19, 0x4A96	; 0x804a96 <__brkval+0x1>
    9c86:	28 17       	cp	r18, r24
    9c88:	39 07       	cpc	r19, r25
    9c8a:	69 f4       	brne	.+26     	; 0x9ca6 <free+0x10c>
    9c8c:	30 97       	sbiw	r30, 0x00	; 0
    9c8e:	29 f4       	brne	.+10     	; 0x9c9a <free+0x100>
    9c90:	10 92 97 4a 	sts	0x4A97, r1	; 0x804a97 <__flp>
    9c94:	10 92 98 4a 	sts	0x4A98, r1	; 0x804a98 <__flp+0x1>
    9c98:	02 c0       	rjmp	.+4      	; 0x9c9e <free+0x104>
    9c9a:	12 82       	std	Z+2, r1	; 0x02
    9c9c:	13 82       	std	Z+3, r1	; 0x03
    9c9e:	a0 93 95 4a 	sts	0x4A95, r26	; 0x804a95 <__brkval>
    9ca2:	b0 93 96 4a 	sts	0x4A96, r27	; 0x804a96 <__brkval+0x1>
    9ca6:	df 91       	pop	r29
    9ca8:	cf 91       	pop	r28
    9caa:	08 95       	ret

00009cac <atof>:
    9cac:	66 27       	eor	r22, r22
    9cae:	77 27       	eor	r23, r23
    9cb0:	0c 94 26 51 	jmp	0xa24c	; 0xa24c <strtod>

00009cb4 <atoi>:
    9cb4:	fc 01       	movw	r30, r24
    9cb6:	88 27       	eor	r24, r24
    9cb8:	99 27       	eor	r25, r25
    9cba:	e8 94       	clt
    9cbc:	21 91       	ld	r18, Z+
    9cbe:	20 32       	cpi	r18, 0x20	; 32
    9cc0:	e9 f3       	breq	.-6      	; 0x9cbc <atoi+0x8>
    9cc2:	29 30       	cpi	r18, 0x09	; 9
    9cc4:	10 f0       	brcs	.+4      	; 0x9cca <atoi+0x16>
    9cc6:	2e 30       	cpi	r18, 0x0E	; 14
    9cc8:	c8 f3       	brcs	.-14     	; 0x9cbc <atoi+0x8>
    9cca:	2b 32       	cpi	r18, 0x2B	; 43
    9ccc:	41 f0       	breq	.+16     	; 0x9cde <atoi+0x2a>
    9cce:	2d 32       	cpi	r18, 0x2D	; 45
    9cd0:	39 f4       	brne	.+14     	; 0x9ce0 <atoi+0x2c>
    9cd2:	68 94       	set
    9cd4:	04 c0       	rjmp	.+8      	; 0x9cde <atoi+0x2a>
    9cd6:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <__mulhi_const_10>
    9cda:	82 0f       	add	r24, r18
    9cdc:	91 1d       	adc	r25, r1
    9cde:	21 91       	ld	r18, Z+
    9ce0:	20 53       	subi	r18, 0x30	; 48
    9ce2:	2a 30       	cpi	r18, 0x0A	; 10
    9ce4:	c0 f3       	brcs	.-16     	; 0x9cd6 <atoi+0x22>
    9ce6:	1e f4       	brtc	.+6      	; 0x9cee <atoi+0x3a>
    9ce8:	90 95       	com	r25
    9cea:	81 95       	neg	r24
    9cec:	9f 4f       	sbci	r25, 0xFF	; 255
    9cee:	08 95       	ret

00009cf0 <atol>:
    9cf0:	1f 93       	push	r17
    9cf2:	fc 01       	movw	r30, r24
    9cf4:	99 27       	eor	r25, r25
    9cf6:	88 27       	eor	r24, r24
    9cf8:	bc 01       	movw	r22, r24
    9cfa:	e8 94       	clt
    9cfc:	11 91       	ld	r17, Z+
    9cfe:	10 32       	cpi	r17, 0x20	; 32
    9d00:	e9 f3       	breq	.-6      	; 0x9cfc <atol+0xc>
    9d02:	19 30       	cpi	r17, 0x09	; 9
    9d04:	10 f0       	brcs	.+4      	; 0x9d0a <atol+0x1a>
    9d06:	1e 30       	cpi	r17, 0x0E	; 14
    9d08:	c8 f3       	brcs	.-14     	; 0x9cfc <atol+0xc>
    9d0a:	1b 32       	cpi	r17, 0x2B	; 43
    9d0c:	51 f0       	breq	.+20     	; 0x9d22 <atol+0x32>
    9d0e:	1d 32       	cpi	r17, 0x2D	; 45
    9d10:	49 f4       	brne	.+18     	; 0x9d24 <atol+0x34>
    9d12:	68 94       	set
    9d14:	06 c0       	rjmp	.+12     	; 0x9d22 <atol+0x32>
    9d16:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__mulsi_const_10>
    9d1a:	61 0f       	add	r22, r17
    9d1c:	71 1d       	adc	r23, r1
    9d1e:	81 1d       	adc	r24, r1
    9d20:	91 1d       	adc	r25, r1
    9d22:	11 91       	ld	r17, Z+
    9d24:	10 53       	subi	r17, 0x30	; 48
    9d26:	1a 30       	cpi	r17, 0x0A	; 10
    9d28:	b0 f3       	brcs	.-20     	; 0x9d16 <atol+0x26>
    9d2a:	3e f4       	brtc	.+14     	; 0x9d3a <atol+0x4a>
    9d2c:	90 95       	com	r25
    9d2e:	80 95       	com	r24
    9d30:	70 95       	com	r23
    9d32:	61 95       	neg	r22
    9d34:	7f 4f       	sbci	r23, 0xFF	; 255
    9d36:	8f 4f       	sbci	r24, 0xFF	; 255
    9d38:	9f 4f       	sbci	r25, 0xFF	; 255
    9d3a:	1f 91       	pop	r17
    9d3c:	08 95       	ret

00009d3e <toupper>:
    9d3e:	91 11       	cpse	r25, r1
    9d40:	08 95       	ret
    9d42:	81 56       	subi	r24, 0x61	; 97
    9d44:	8a 51       	subi	r24, 0x1A	; 26
    9d46:	08 f4       	brcc	.+2      	; 0x9d4a <toupper+0xc>
    9d48:	80 52       	subi	r24, 0x20	; 32
    9d4a:	85 58       	subi	r24, 0x85	; 133
    9d4c:	08 95       	ret

00009d4e <strcat>:
    9d4e:	fb 01       	movw	r30, r22
    9d50:	dc 01       	movw	r26, r24
    9d52:	0d 90       	ld	r0, X+
    9d54:	00 20       	and	r0, r0
    9d56:	e9 f7       	brne	.-6      	; 0x9d52 <strcat+0x4>
    9d58:	11 97       	sbiw	r26, 0x01	; 1
    9d5a:	01 90       	ld	r0, Z+
    9d5c:	0d 92       	st	X+, r0
    9d5e:	00 20       	and	r0, r0
    9d60:	e1 f7       	brne	.-8      	; 0x9d5a <strcat+0xc>
    9d62:	08 95       	ret

00009d64 <strchr>:
    9d64:	fc 01       	movw	r30, r24
    9d66:	81 91       	ld	r24, Z+
    9d68:	86 17       	cp	r24, r22
    9d6a:	21 f0       	breq	.+8      	; 0x9d74 <strchr+0x10>
    9d6c:	88 23       	and	r24, r24
    9d6e:	d9 f7       	brne	.-10     	; 0x9d66 <strchr+0x2>
    9d70:	99 27       	eor	r25, r25
    9d72:	08 95       	ret
    9d74:	31 97       	sbiw	r30, 0x01	; 1
    9d76:	cf 01       	movw	r24, r30
    9d78:	08 95       	ret

00009d7a <strcpy>:
    9d7a:	fb 01       	movw	r30, r22
    9d7c:	dc 01       	movw	r26, r24
    9d7e:	01 90       	ld	r0, Z+
    9d80:	0d 92       	st	X+, r0
    9d82:	00 20       	and	r0, r0
    9d84:	e1 f7       	brne	.-8      	; 0x9d7e <strcpy+0x4>
    9d86:	08 95       	ret

00009d88 <strlen>:
    9d88:	fc 01       	movw	r30, r24
    9d8a:	01 90       	ld	r0, Z+
    9d8c:	00 20       	and	r0, r0
    9d8e:	e9 f7       	brne	.-6      	; 0x9d8a <strlen+0x2>
    9d90:	80 95       	com	r24
    9d92:	90 95       	com	r25
    9d94:	8e 0f       	add	r24, r30
    9d96:	9f 1f       	adc	r25, r31
    9d98:	08 95       	ret

00009d9a <strncpy>:
    9d9a:	fb 01       	movw	r30, r22
    9d9c:	dc 01       	movw	r26, r24
    9d9e:	41 50       	subi	r20, 0x01	; 1
    9da0:	50 40       	sbci	r21, 0x00	; 0
    9da2:	48 f0       	brcs	.+18     	; 0x9db6 <strncpy+0x1c>
    9da4:	01 90       	ld	r0, Z+
    9da6:	0d 92       	st	X+, r0
    9da8:	00 20       	and	r0, r0
    9daa:	c9 f7       	brne	.-14     	; 0x9d9e <strncpy+0x4>
    9dac:	01 c0       	rjmp	.+2      	; 0x9db0 <strncpy+0x16>
    9dae:	1d 92       	st	X+, r1
    9db0:	41 50       	subi	r20, 0x01	; 1
    9db2:	50 40       	sbci	r21, 0x00	; 0
    9db4:	e0 f7       	brcc	.-8      	; 0x9dae <strncpy+0x14>
    9db6:	08 95       	ret

00009db8 <__mulsi_const_10>:
    9db8:	59 2f       	mov	r21, r25
    9dba:	48 2f       	mov	r20, r24
    9dbc:	37 2f       	mov	r19, r23
    9dbe:	26 2f       	mov	r18, r22
    9dc0:	66 0f       	add	r22, r22
    9dc2:	77 1f       	adc	r23, r23
    9dc4:	88 1f       	adc	r24, r24
    9dc6:	99 1f       	adc	r25, r25
    9dc8:	66 0f       	add	r22, r22
    9dca:	77 1f       	adc	r23, r23
    9dcc:	88 1f       	adc	r24, r24
    9dce:	99 1f       	adc	r25, r25
    9dd0:	62 0f       	add	r22, r18
    9dd2:	73 1f       	adc	r23, r19
    9dd4:	84 1f       	adc	r24, r20
    9dd6:	95 1f       	adc	r25, r21
    9dd8:	66 0f       	add	r22, r22
    9dda:	77 1f       	adc	r23, r23
    9ddc:	88 1f       	adc	r24, r24
    9dde:	99 1f       	adc	r25, r25
    9de0:	08 95       	ret

00009de2 <__mulhi_const_10>:
    9de2:	7a e0       	ldi	r23, 0x0A	; 10
    9de4:	97 9f       	mul	r25, r23
    9de6:	90 2d       	mov	r25, r0
    9de8:	87 9f       	mul	r24, r23
    9dea:	80 2d       	mov	r24, r0
    9dec:	91 0d       	add	r25, r1
    9dee:	11 24       	eor	r1, r1
    9df0:	08 95       	ret

00009df2 <sprintf>:
    9df2:	0f 93       	push	r16
    9df4:	1f 93       	push	r17
    9df6:	cf 93       	push	r28
    9df8:	df 93       	push	r29
    9dfa:	cd b7       	in	r28, 0x3d	; 61
    9dfc:	de b7       	in	r29, 0x3e	; 62
    9dfe:	2e 97       	sbiw	r28, 0x0e	; 14
    9e00:	cd bf       	out	0x3d, r28	; 61
    9e02:	de bf       	out	0x3e, r29	; 62
    9e04:	0d 89       	ldd	r16, Y+21	; 0x15
    9e06:	1e 89       	ldd	r17, Y+22	; 0x16
    9e08:	86 e0       	ldi	r24, 0x06	; 6
    9e0a:	8c 83       	std	Y+4, r24	; 0x04
    9e0c:	09 83       	std	Y+1, r16	; 0x01
    9e0e:	1a 83       	std	Y+2, r17	; 0x02
    9e10:	8f ef       	ldi	r24, 0xFF	; 255
    9e12:	9f e7       	ldi	r25, 0x7F	; 127
    9e14:	8d 83       	std	Y+5, r24	; 0x05
    9e16:	9e 83       	std	Y+6, r25	; 0x06
    9e18:	ae 01       	movw	r20, r28
    9e1a:	47 5e       	subi	r20, 0xE7	; 231
    9e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    9e1e:	6f 89       	ldd	r22, Y+23	; 0x17
    9e20:	78 8d       	ldd	r23, Y+24	; 0x18
    9e22:	ce 01       	movw	r24, r28
    9e24:	01 96       	adiw	r24, 0x01	; 1
    9e26:	0e 94 22 4f 	call	0x9e44	; 0x9e44 <vfprintf>
    9e2a:	ef 81       	ldd	r30, Y+7	; 0x07
    9e2c:	f8 85       	ldd	r31, Y+8	; 0x08
    9e2e:	e0 0f       	add	r30, r16
    9e30:	f1 1f       	adc	r31, r17
    9e32:	10 82       	st	Z, r1
    9e34:	2e 96       	adiw	r28, 0x0e	; 14
    9e36:	cd bf       	out	0x3d, r28	; 61
    9e38:	de bf       	out	0x3e, r29	; 62
    9e3a:	df 91       	pop	r29
    9e3c:	cf 91       	pop	r28
    9e3e:	1f 91       	pop	r17
    9e40:	0f 91       	pop	r16
    9e42:	08 95       	ret

00009e44 <vfprintf>:
    9e44:	2f 92       	push	r2
    9e46:	3f 92       	push	r3
    9e48:	4f 92       	push	r4
    9e4a:	5f 92       	push	r5
    9e4c:	6f 92       	push	r6
    9e4e:	7f 92       	push	r7
    9e50:	8f 92       	push	r8
    9e52:	9f 92       	push	r9
    9e54:	af 92       	push	r10
    9e56:	bf 92       	push	r11
    9e58:	cf 92       	push	r12
    9e5a:	df 92       	push	r13
    9e5c:	ef 92       	push	r14
    9e5e:	ff 92       	push	r15
    9e60:	0f 93       	push	r16
    9e62:	1f 93       	push	r17
    9e64:	cf 93       	push	r28
    9e66:	df 93       	push	r29
    9e68:	cd b7       	in	r28, 0x3d	; 61
    9e6a:	de b7       	in	r29, 0x3e	; 62
    9e6c:	2b 97       	sbiw	r28, 0x0b	; 11
    9e6e:	cd bf       	out	0x3d, r28	; 61
    9e70:	de bf       	out	0x3e, r29	; 62
    9e72:	6c 01       	movw	r12, r24
    9e74:	7b 01       	movw	r14, r22
    9e76:	8a 01       	movw	r16, r20
    9e78:	fc 01       	movw	r30, r24
    9e7a:	16 82       	std	Z+6, r1	; 0x06
    9e7c:	17 82       	std	Z+7, r1	; 0x07
    9e7e:	83 81       	ldd	r24, Z+3	; 0x03
    9e80:	81 ff       	sbrs	r24, 1
    9e82:	cc c1       	rjmp	.+920    	; 0xa21c <vfprintf+0x3d8>
    9e84:	ce 01       	movw	r24, r28
    9e86:	01 96       	adiw	r24, 0x01	; 1
    9e88:	3c 01       	movw	r6, r24
    9e8a:	f6 01       	movw	r30, r12
    9e8c:	93 81       	ldd	r25, Z+3	; 0x03
    9e8e:	f7 01       	movw	r30, r14
    9e90:	93 fd       	sbrc	r25, 3
    9e92:	85 91       	lpm	r24, Z+
    9e94:	93 ff       	sbrs	r25, 3
    9e96:	81 91       	ld	r24, Z+
    9e98:	7f 01       	movw	r14, r30
    9e9a:	88 23       	and	r24, r24
    9e9c:	09 f4       	brne	.+2      	; 0x9ea0 <vfprintf+0x5c>
    9e9e:	ba c1       	rjmp	.+884    	; 0xa214 <vfprintf+0x3d0>
    9ea0:	85 32       	cpi	r24, 0x25	; 37
    9ea2:	39 f4       	brne	.+14     	; 0x9eb2 <vfprintf+0x6e>
    9ea4:	93 fd       	sbrc	r25, 3
    9ea6:	85 91       	lpm	r24, Z+
    9ea8:	93 ff       	sbrs	r25, 3
    9eaa:	81 91       	ld	r24, Z+
    9eac:	7f 01       	movw	r14, r30
    9eae:	85 32       	cpi	r24, 0x25	; 37
    9eb0:	29 f4       	brne	.+10     	; 0x9ebc <vfprintf+0x78>
    9eb2:	b6 01       	movw	r22, r12
    9eb4:	90 e0       	ldi	r25, 0x00	; 0
    9eb6:	0e 94 b9 52 	call	0xa572	; 0xa572 <fputc>
    9eba:	e7 cf       	rjmp	.-50     	; 0x9e8a <vfprintf+0x46>
    9ebc:	91 2c       	mov	r9, r1
    9ebe:	21 2c       	mov	r2, r1
    9ec0:	31 2c       	mov	r3, r1
    9ec2:	ff e1       	ldi	r31, 0x1F	; 31
    9ec4:	f3 15       	cp	r31, r3
    9ec6:	d8 f0       	brcs	.+54     	; 0x9efe <vfprintf+0xba>
    9ec8:	8b 32       	cpi	r24, 0x2B	; 43
    9eca:	79 f0       	breq	.+30     	; 0x9eea <vfprintf+0xa6>
    9ecc:	38 f4       	brcc	.+14     	; 0x9edc <vfprintf+0x98>
    9ece:	80 32       	cpi	r24, 0x20	; 32
    9ed0:	79 f0       	breq	.+30     	; 0x9ef0 <vfprintf+0xac>
    9ed2:	83 32       	cpi	r24, 0x23	; 35
    9ed4:	a1 f4       	brne	.+40     	; 0x9efe <vfprintf+0xba>
    9ed6:	23 2d       	mov	r18, r3
    9ed8:	20 61       	ori	r18, 0x10	; 16
    9eda:	1d c0       	rjmp	.+58     	; 0x9f16 <vfprintf+0xd2>
    9edc:	8d 32       	cpi	r24, 0x2D	; 45
    9ede:	61 f0       	breq	.+24     	; 0x9ef8 <vfprintf+0xb4>
    9ee0:	80 33       	cpi	r24, 0x30	; 48
    9ee2:	69 f4       	brne	.+26     	; 0x9efe <vfprintf+0xba>
    9ee4:	23 2d       	mov	r18, r3
    9ee6:	21 60       	ori	r18, 0x01	; 1
    9ee8:	16 c0       	rjmp	.+44     	; 0x9f16 <vfprintf+0xd2>
    9eea:	83 2d       	mov	r24, r3
    9eec:	82 60       	ori	r24, 0x02	; 2
    9eee:	38 2e       	mov	r3, r24
    9ef0:	e3 2d       	mov	r30, r3
    9ef2:	e4 60       	ori	r30, 0x04	; 4
    9ef4:	3e 2e       	mov	r3, r30
    9ef6:	2a c0       	rjmp	.+84     	; 0x9f4c <vfprintf+0x108>
    9ef8:	f3 2d       	mov	r31, r3
    9efa:	f8 60       	ori	r31, 0x08	; 8
    9efc:	1d c0       	rjmp	.+58     	; 0x9f38 <vfprintf+0xf4>
    9efe:	37 fc       	sbrc	r3, 7
    9f00:	2d c0       	rjmp	.+90     	; 0x9f5c <vfprintf+0x118>
    9f02:	20 ed       	ldi	r18, 0xD0	; 208
    9f04:	28 0f       	add	r18, r24
    9f06:	2a 30       	cpi	r18, 0x0A	; 10
    9f08:	40 f0       	brcs	.+16     	; 0x9f1a <vfprintf+0xd6>
    9f0a:	8e 32       	cpi	r24, 0x2E	; 46
    9f0c:	b9 f4       	brne	.+46     	; 0x9f3c <vfprintf+0xf8>
    9f0e:	36 fc       	sbrc	r3, 6
    9f10:	81 c1       	rjmp	.+770    	; 0xa214 <vfprintf+0x3d0>
    9f12:	23 2d       	mov	r18, r3
    9f14:	20 64       	ori	r18, 0x40	; 64
    9f16:	32 2e       	mov	r3, r18
    9f18:	19 c0       	rjmp	.+50     	; 0x9f4c <vfprintf+0x108>
    9f1a:	36 fe       	sbrs	r3, 6
    9f1c:	06 c0       	rjmp	.+12     	; 0x9f2a <vfprintf+0xe6>
    9f1e:	8a e0       	ldi	r24, 0x0A	; 10
    9f20:	98 9e       	mul	r9, r24
    9f22:	20 0d       	add	r18, r0
    9f24:	11 24       	eor	r1, r1
    9f26:	92 2e       	mov	r9, r18
    9f28:	11 c0       	rjmp	.+34     	; 0x9f4c <vfprintf+0x108>
    9f2a:	ea e0       	ldi	r30, 0x0A	; 10
    9f2c:	2e 9e       	mul	r2, r30
    9f2e:	20 0d       	add	r18, r0
    9f30:	11 24       	eor	r1, r1
    9f32:	22 2e       	mov	r2, r18
    9f34:	f3 2d       	mov	r31, r3
    9f36:	f0 62       	ori	r31, 0x20	; 32
    9f38:	3f 2e       	mov	r3, r31
    9f3a:	08 c0       	rjmp	.+16     	; 0x9f4c <vfprintf+0x108>
    9f3c:	8c 36       	cpi	r24, 0x6C	; 108
    9f3e:	21 f4       	brne	.+8      	; 0x9f48 <vfprintf+0x104>
    9f40:	83 2d       	mov	r24, r3
    9f42:	80 68       	ori	r24, 0x80	; 128
    9f44:	38 2e       	mov	r3, r24
    9f46:	02 c0       	rjmp	.+4      	; 0x9f4c <vfprintf+0x108>
    9f48:	88 36       	cpi	r24, 0x68	; 104
    9f4a:	41 f4       	brne	.+16     	; 0x9f5c <vfprintf+0x118>
    9f4c:	f7 01       	movw	r30, r14
    9f4e:	93 fd       	sbrc	r25, 3
    9f50:	85 91       	lpm	r24, Z+
    9f52:	93 ff       	sbrs	r25, 3
    9f54:	81 91       	ld	r24, Z+
    9f56:	7f 01       	movw	r14, r30
    9f58:	81 11       	cpse	r24, r1
    9f5a:	b3 cf       	rjmp	.-154    	; 0x9ec2 <vfprintf+0x7e>
    9f5c:	98 2f       	mov	r25, r24
    9f5e:	9f 7d       	andi	r25, 0xDF	; 223
    9f60:	95 54       	subi	r25, 0x45	; 69
    9f62:	93 30       	cpi	r25, 0x03	; 3
    9f64:	28 f4       	brcc	.+10     	; 0x9f70 <vfprintf+0x12c>
    9f66:	0c 5f       	subi	r16, 0xFC	; 252
    9f68:	1f 4f       	sbci	r17, 0xFF	; 255
    9f6a:	9f e3       	ldi	r25, 0x3F	; 63
    9f6c:	99 83       	std	Y+1, r25	; 0x01
    9f6e:	0d c0       	rjmp	.+26     	; 0x9f8a <vfprintf+0x146>
    9f70:	83 36       	cpi	r24, 0x63	; 99
    9f72:	31 f0       	breq	.+12     	; 0x9f80 <vfprintf+0x13c>
    9f74:	83 37       	cpi	r24, 0x73	; 115
    9f76:	71 f0       	breq	.+28     	; 0x9f94 <vfprintf+0x150>
    9f78:	83 35       	cpi	r24, 0x53	; 83
    9f7a:	09 f0       	breq	.+2      	; 0x9f7e <vfprintf+0x13a>
    9f7c:	59 c0       	rjmp	.+178    	; 0xa030 <vfprintf+0x1ec>
    9f7e:	21 c0       	rjmp	.+66     	; 0x9fc2 <vfprintf+0x17e>
    9f80:	f8 01       	movw	r30, r16
    9f82:	80 81       	ld	r24, Z
    9f84:	89 83       	std	Y+1, r24	; 0x01
    9f86:	0e 5f       	subi	r16, 0xFE	; 254
    9f88:	1f 4f       	sbci	r17, 0xFF	; 255
    9f8a:	88 24       	eor	r8, r8
    9f8c:	83 94       	inc	r8
    9f8e:	91 2c       	mov	r9, r1
    9f90:	53 01       	movw	r10, r6
    9f92:	13 c0       	rjmp	.+38     	; 0x9fba <vfprintf+0x176>
    9f94:	28 01       	movw	r4, r16
    9f96:	f2 e0       	ldi	r31, 0x02	; 2
    9f98:	4f 0e       	add	r4, r31
    9f9a:	51 1c       	adc	r5, r1
    9f9c:	f8 01       	movw	r30, r16
    9f9e:	a0 80       	ld	r10, Z
    9fa0:	b1 80       	ldd	r11, Z+1	; 0x01
    9fa2:	36 fe       	sbrs	r3, 6
    9fa4:	03 c0       	rjmp	.+6      	; 0x9fac <vfprintf+0x168>
    9fa6:	69 2d       	mov	r22, r9
    9fa8:	70 e0       	ldi	r23, 0x00	; 0
    9faa:	02 c0       	rjmp	.+4      	; 0x9fb0 <vfprintf+0x16c>
    9fac:	6f ef       	ldi	r22, 0xFF	; 255
    9fae:	7f ef       	ldi	r23, 0xFF	; 255
    9fb0:	c5 01       	movw	r24, r10
    9fb2:	0e 94 ae 52 	call	0xa55c	; 0xa55c <strnlen>
    9fb6:	4c 01       	movw	r8, r24
    9fb8:	82 01       	movw	r16, r4
    9fba:	f3 2d       	mov	r31, r3
    9fbc:	ff 77       	andi	r31, 0x7F	; 127
    9fbe:	3f 2e       	mov	r3, r31
    9fc0:	16 c0       	rjmp	.+44     	; 0x9fee <vfprintf+0x1aa>
    9fc2:	28 01       	movw	r4, r16
    9fc4:	22 e0       	ldi	r18, 0x02	; 2
    9fc6:	42 0e       	add	r4, r18
    9fc8:	51 1c       	adc	r5, r1
    9fca:	f8 01       	movw	r30, r16
    9fcc:	a0 80       	ld	r10, Z
    9fce:	b1 80       	ldd	r11, Z+1	; 0x01
    9fd0:	36 fe       	sbrs	r3, 6
    9fd2:	03 c0       	rjmp	.+6      	; 0x9fda <vfprintf+0x196>
    9fd4:	69 2d       	mov	r22, r9
    9fd6:	70 e0       	ldi	r23, 0x00	; 0
    9fd8:	02 c0       	rjmp	.+4      	; 0x9fde <vfprintf+0x19a>
    9fda:	6f ef       	ldi	r22, 0xFF	; 255
    9fdc:	7f ef       	ldi	r23, 0xFF	; 255
    9fde:	c5 01       	movw	r24, r10
    9fe0:	0e 94 a3 52 	call	0xa546	; 0xa546 <strnlen_P>
    9fe4:	4c 01       	movw	r8, r24
    9fe6:	f3 2d       	mov	r31, r3
    9fe8:	f0 68       	ori	r31, 0x80	; 128
    9fea:	3f 2e       	mov	r3, r31
    9fec:	82 01       	movw	r16, r4
    9fee:	33 fc       	sbrc	r3, 3
    9ff0:	1b c0       	rjmp	.+54     	; 0xa028 <vfprintf+0x1e4>
    9ff2:	82 2d       	mov	r24, r2
    9ff4:	90 e0       	ldi	r25, 0x00	; 0
    9ff6:	88 16       	cp	r8, r24
    9ff8:	99 06       	cpc	r9, r25
    9ffa:	b0 f4       	brcc	.+44     	; 0xa028 <vfprintf+0x1e4>
    9ffc:	b6 01       	movw	r22, r12
    9ffe:	80 e2       	ldi	r24, 0x20	; 32
    a000:	90 e0       	ldi	r25, 0x00	; 0
    a002:	0e 94 b9 52 	call	0xa572	; 0xa572 <fputc>
    a006:	2a 94       	dec	r2
    a008:	f4 cf       	rjmp	.-24     	; 0x9ff2 <vfprintf+0x1ae>
    a00a:	f5 01       	movw	r30, r10
    a00c:	37 fc       	sbrc	r3, 7
    a00e:	85 91       	lpm	r24, Z+
    a010:	37 fe       	sbrs	r3, 7
    a012:	81 91       	ld	r24, Z+
    a014:	5f 01       	movw	r10, r30
    a016:	b6 01       	movw	r22, r12
    a018:	90 e0       	ldi	r25, 0x00	; 0
    a01a:	0e 94 b9 52 	call	0xa572	; 0xa572 <fputc>
    a01e:	21 10       	cpse	r2, r1
    a020:	2a 94       	dec	r2
    a022:	21 e0       	ldi	r18, 0x01	; 1
    a024:	82 1a       	sub	r8, r18
    a026:	91 08       	sbc	r9, r1
    a028:	81 14       	cp	r8, r1
    a02a:	91 04       	cpc	r9, r1
    a02c:	71 f7       	brne	.-36     	; 0xa00a <vfprintf+0x1c6>
    a02e:	e8 c0       	rjmp	.+464    	; 0xa200 <vfprintf+0x3bc>
    a030:	84 36       	cpi	r24, 0x64	; 100
    a032:	11 f0       	breq	.+4      	; 0xa038 <vfprintf+0x1f4>
    a034:	89 36       	cpi	r24, 0x69	; 105
    a036:	41 f5       	brne	.+80     	; 0xa088 <vfprintf+0x244>
    a038:	f8 01       	movw	r30, r16
    a03a:	37 fe       	sbrs	r3, 7
    a03c:	07 c0       	rjmp	.+14     	; 0xa04c <vfprintf+0x208>
    a03e:	60 81       	ld	r22, Z
    a040:	71 81       	ldd	r23, Z+1	; 0x01
    a042:	82 81       	ldd	r24, Z+2	; 0x02
    a044:	93 81       	ldd	r25, Z+3	; 0x03
    a046:	0c 5f       	subi	r16, 0xFC	; 252
    a048:	1f 4f       	sbci	r17, 0xFF	; 255
    a04a:	08 c0       	rjmp	.+16     	; 0xa05c <vfprintf+0x218>
    a04c:	60 81       	ld	r22, Z
    a04e:	71 81       	ldd	r23, Z+1	; 0x01
    a050:	07 2e       	mov	r0, r23
    a052:	00 0c       	add	r0, r0
    a054:	88 0b       	sbc	r24, r24
    a056:	99 0b       	sbc	r25, r25
    a058:	0e 5f       	subi	r16, 0xFE	; 254
    a05a:	1f 4f       	sbci	r17, 0xFF	; 255
    a05c:	f3 2d       	mov	r31, r3
    a05e:	ff 76       	andi	r31, 0x6F	; 111
    a060:	3f 2e       	mov	r3, r31
    a062:	97 ff       	sbrs	r25, 7
    a064:	09 c0       	rjmp	.+18     	; 0xa078 <vfprintf+0x234>
    a066:	90 95       	com	r25
    a068:	80 95       	com	r24
    a06a:	70 95       	com	r23
    a06c:	61 95       	neg	r22
    a06e:	7f 4f       	sbci	r23, 0xFF	; 255
    a070:	8f 4f       	sbci	r24, 0xFF	; 255
    a072:	9f 4f       	sbci	r25, 0xFF	; 255
    a074:	f0 68       	ori	r31, 0x80	; 128
    a076:	3f 2e       	mov	r3, r31
    a078:	2a e0       	ldi	r18, 0x0A	; 10
    a07a:	30 e0       	ldi	r19, 0x00	; 0
    a07c:	a3 01       	movw	r20, r6
    a07e:	0e 94 f5 52 	call	0xa5ea	; 0xa5ea <__ultoa_invert>
    a082:	88 2e       	mov	r8, r24
    a084:	86 18       	sub	r8, r6
    a086:	45 c0       	rjmp	.+138    	; 0xa112 <vfprintf+0x2ce>
    a088:	85 37       	cpi	r24, 0x75	; 117
    a08a:	31 f4       	brne	.+12     	; 0xa098 <vfprintf+0x254>
    a08c:	23 2d       	mov	r18, r3
    a08e:	2f 7e       	andi	r18, 0xEF	; 239
    a090:	b2 2e       	mov	r11, r18
    a092:	2a e0       	ldi	r18, 0x0A	; 10
    a094:	30 e0       	ldi	r19, 0x00	; 0
    a096:	25 c0       	rjmp	.+74     	; 0xa0e2 <vfprintf+0x29e>
    a098:	93 2d       	mov	r25, r3
    a09a:	99 7f       	andi	r25, 0xF9	; 249
    a09c:	b9 2e       	mov	r11, r25
    a09e:	8f 36       	cpi	r24, 0x6F	; 111
    a0a0:	c1 f0       	breq	.+48     	; 0xa0d2 <vfprintf+0x28e>
    a0a2:	18 f4       	brcc	.+6      	; 0xa0aa <vfprintf+0x266>
    a0a4:	88 35       	cpi	r24, 0x58	; 88
    a0a6:	79 f0       	breq	.+30     	; 0xa0c6 <vfprintf+0x282>
    a0a8:	b5 c0       	rjmp	.+362    	; 0xa214 <vfprintf+0x3d0>
    a0aa:	80 37       	cpi	r24, 0x70	; 112
    a0ac:	19 f0       	breq	.+6      	; 0xa0b4 <vfprintf+0x270>
    a0ae:	88 37       	cpi	r24, 0x78	; 120
    a0b0:	21 f0       	breq	.+8      	; 0xa0ba <vfprintf+0x276>
    a0b2:	b0 c0       	rjmp	.+352    	; 0xa214 <vfprintf+0x3d0>
    a0b4:	e9 2f       	mov	r30, r25
    a0b6:	e0 61       	ori	r30, 0x10	; 16
    a0b8:	be 2e       	mov	r11, r30
    a0ba:	b4 fe       	sbrs	r11, 4
    a0bc:	0d c0       	rjmp	.+26     	; 0xa0d8 <vfprintf+0x294>
    a0be:	fb 2d       	mov	r31, r11
    a0c0:	f4 60       	ori	r31, 0x04	; 4
    a0c2:	bf 2e       	mov	r11, r31
    a0c4:	09 c0       	rjmp	.+18     	; 0xa0d8 <vfprintf+0x294>
    a0c6:	34 fe       	sbrs	r3, 4
    a0c8:	0a c0       	rjmp	.+20     	; 0xa0de <vfprintf+0x29a>
    a0ca:	29 2f       	mov	r18, r25
    a0cc:	26 60       	ori	r18, 0x06	; 6
    a0ce:	b2 2e       	mov	r11, r18
    a0d0:	06 c0       	rjmp	.+12     	; 0xa0de <vfprintf+0x29a>
    a0d2:	28 e0       	ldi	r18, 0x08	; 8
    a0d4:	30 e0       	ldi	r19, 0x00	; 0
    a0d6:	05 c0       	rjmp	.+10     	; 0xa0e2 <vfprintf+0x29e>
    a0d8:	20 e1       	ldi	r18, 0x10	; 16
    a0da:	30 e0       	ldi	r19, 0x00	; 0
    a0dc:	02 c0       	rjmp	.+4      	; 0xa0e2 <vfprintf+0x29e>
    a0de:	20 e1       	ldi	r18, 0x10	; 16
    a0e0:	32 e0       	ldi	r19, 0x02	; 2
    a0e2:	f8 01       	movw	r30, r16
    a0e4:	b7 fe       	sbrs	r11, 7
    a0e6:	07 c0       	rjmp	.+14     	; 0xa0f6 <vfprintf+0x2b2>
    a0e8:	60 81       	ld	r22, Z
    a0ea:	71 81       	ldd	r23, Z+1	; 0x01
    a0ec:	82 81       	ldd	r24, Z+2	; 0x02
    a0ee:	93 81       	ldd	r25, Z+3	; 0x03
    a0f0:	0c 5f       	subi	r16, 0xFC	; 252
    a0f2:	1f 4f       	sbci	r17, 0xFF	; 255
    a0f4:	06 c0       	rjmp	.+12     	; 0xa102 <vfprintf+0x2be>
    a0f6:	60 81       	ld	r22, Z
    a0f8:	71 81       	ldd	r23, Z+1	; 0x01
    a0fa:	80 e0       	ldi	r24, 0x00	; 0
    a0fc:	90 e0       	ldi	r25, 0x00	; 0
    a0fe:	0e 5f       	subi	r16, 0xFE	; 254
    a100:	1f 4f       	sbci	r17, 0xFF	; 255
    a102:	a3 01       	movw	r20, r6
    a104:	0e 94 f5 52 	call	0xa5ea	; 0xa5ea <__ultoa_invert>
    a108:	88 2e       	mov	r8, r24
    a10a:	86 18       	sub	r8, r6
    a10c:	fb 2d       	mov	r31, r11
    a10e:	ff 77       	andi	r31, 0x7F	; 127
    a110:	3f 2e       	mov	r3, r31
    a112:	36 fe       	sbrs	r3, 6
    a114:	0d c0       	rjmp	.+26     	; 0xa130 <vfprintf+0x2ec>
    a116:	23 2d       	mov	r18, r3
    a118:	2e 7f       	andi	r18, 0xFE	; 254
    a11a:	a2 2e       	mov	r10, r18
    a11c:	89 14       	cp	r8, r9
    a11e:	58 f4       	brcc	.+22     	; 0xa136 <vfprintf+0x2f2>
    a120:	34 fe       	sbrs	r3, 4
    a122:	0b c0       	rjmp	.+22     	; 0xa13a <vfprintf+0x2f6>
    a124:	32 fc       	sbrc	r3, 2
    a126:	09 c0       	rjmp	.+18     	; 0xa13a <vfprintf+0x2f6>
    a128:	83 2d       	mov	r24, r3
    a12a:	8e 7e       	andi	r24, 0xEE	; 238
    a12c:	a8 2e       	mov	r10, r24
    a12e:	05 c0       	rjmp	.+10     	; 0xa13a <vfprintf+0x2f6>
    a130:	b8 2c       	mov	r11, r8
    a132:	a3 2c       	mov	r10, r3
    a134:	03 c0       	rjmp	.+6      	; 0xa13c <vfprintf+0x2f8>
    a136:	b8 2c       	mov	r11, r8
    a138:	01 c0       	rjmp	.+2      	; 0xa13c <vfprintf+0x2f8>
    a13a:	b9 2c       	mov	r11, r9
    a13c:	a4 fe       	sbrs	r10, 4
    a13e:	0f c0       	rjmp	.+30     	; 0xa15e <vfprintf+0x31a>
    a140:	fe 01       	movw	r30, r28
    a142:	e8 0d       	add	r30, r8
    a144:	f1 1d       	adc	r31, r1
    a146:	80 81       	ld	r24, Z
    a148:	80 33       	cpi	r24, 0x30	; 48
    a14a:	21 f4       	brne	.+8      	; 0xa154 <vfprintf+0x310>
    a14c:	9a 2d       	mov	r25, r10
    a14e:	99 7e       	andi	r25, 0xE9	; 233
    a150:	a9 2e       	mov	r10, r25
    a152:	09 c0       	rjmp	.+18     	; 0xa166 <vfprintf+0x322>
    a154:	a2 fe       	sbrs	r10, 2
    a156:	06 c0       	rjmp	.+12     	; 0xa164 <vfprintf+0x320>
    a158:	b3 94       	inc	r11
    a15a:	b3 94       	inc	r11
    a15c:	04 c0       	rjmp	.+8      	; 0xa166 <vfprintf+0x322>
    a15e:	8a 2d       	mov	r24, r10
    a160:	86 78       	andi	r24, 0x86	; 134
    a162:	09 f0       	breq	.+2      	; 0xa166 <vfprintf+0x322>
    a164:	b3 94       	inc	r11
    a166:	a3 fc       	sbrc	r10, 3
    a168:	11 c0       	rjmp	.+34     	; 0xa18c <vfprintf+0x348>
    a16a:	a0 fe       	sbrs	r10, 0
    a16c:	06 c0       	rjmp	.+12     	; 0xa17a <vfprintf+0x336>
    a16e:	b2 14       	cp	r11, r2
    a170:	88 f4       	brcc	.+34     	; 0xa194 <vfprintf+0x350>
    a172:	28 0c       	add	r2, r8
    a174:	92 2c       	mov	r9, r2
    a176:	9b 18       	sub	r9, r11
    a178:	0e c0       	rjmp	.+28     	; 0xa196 <vfprintf+0x352>
    a17a:	b2 14       	cp	r11, r2
    a17c:	60 f4       	brcc	.+24     	; 0xa196 <vfprintf+0x352>
    a17e:	b6 01       	movw	r22, r12
    a180:	80 e2       	ldi	r24, 0x20	; 32
    a182:	90 e0       	ldi	r25, 0x00	; 0
    a184:	0e 94 b9 52 	call	0xa572	; 0xa572 <fputc>
    a188:	b3 94       	inc	r11
    a18a:	f7 cf       	rjmp	.-18     	; 0xa17a <vfprintf+0x336>
    a18c:	b2 14       	cp	r11, r2
    a18e:	18 f4       	brcc	.+6      	; 0xa196 <vfprintf+0x352>
    a190:	2b 18       	sub	r2, r11
    a192:	02 c0       	rjmp	.+4      	; 0xa198 <vfprintf+0x354>
    a194:	98 2c       	mov	r9, r8
    a196:	21 2c       	mov	r2, r1
    a198:	a4 fe       	sbrs	r10, 4
    a19a:	10 c0       	rjmp	.+32     	; 0xa1bc <vfprintf+0x378>
    a19c:	b6 01       	movw	r22, r12
    a19e:	80 e3       	ldi	r24, 0x30	; 48
    a1a0:	90 e0       	ldi	r25, 0x00	; 0
    a1a2:	0e 94 b9 52 	call	0xa572	; 0xa572 <fputc>
    a1a6:	a2 fe       	sbrs	r10, 2
    a1a8:	17 c0       	rjmp	.+46     	; 0xa1d8 <vfprintf+0x394>
    a1aa:	a1 fc       	sbrc	r10, 1
    a1ac:	03 c0       	rjmp	.+6      	; 0xa1b4 <vfprintf+0x370>
    a1ae:	88 e7       	ldi	r24, 0x78	; 120
    a1b0:	90 e0       	ldi	r25, 0x00	; 0
    a1b2:	02 c0       	rjmp	.+4      	; 0xa1b8 <vfprintf+0x374>
    a1b4:	88 e5       	ldi	r24, 0x58	; 88
    a1b6:	90 e0       	ldi	r25, 0x00	; 0
    a1b8:	b6 01       	movw	r22, r12
    a1ba:	0c c0       	rjmp	.+24     	; 0xa1d4 <vfprintf+0x390>
    a1bc:	8a 2d       	mov	r24, r10
    a1be:	86 78       	andi	r24, 0x86	; 134
    a1c0:	59 f0       	breq	.+22     	; 0xa1d8 <vfprintf+0x394>
    a1c2:	a1 fe       	sbrs	r10, 1
    a1c4:	02 c0       	rjmp	.+4      	; 0xa1ca <vfprintf+0x386>
    a1c6:	8b e2       	ldi	r24, 0x2B	; 43
    a1c8:	01 c0       	rjmp	.+2      	; 0xa1cc <vfprintf+0x388>
    a1ca:	80 e2       	ldi	r24, 0x20	; 32
    a1cc:	a7 fc       	sbrc	r10, 7
    a1ce:	8d e2       	ldi	r24, 0x2D	; 45
    a1d0:	b6 01       	movw	r22, r12
    a1d2:	90 e0       	ldi	r25, 0x00	; 0
    a1d4:	0e 94 b9 52 	call	0xa572	; 0xa572 <fputc>
    a1d8:	89 14       	cp	r8, r9
    a1da:	38 f4       	brcc	.+14     	; 0xa1ea <vfprintf+0x3a6>
    a1dc:	b6 01       	movw	r22, r12
    a1de:	80 e3       	ldi	r24, 0x30	; 48
    a1e0:	90 e0       	ldi	r25, 0x00	; 0
    a1e2:	0e 94 b9 52 	call	0xa572	; 0xa572 <fputc>
    a1e6:	9a 94       	dec	r9
    a1e8:	f7 cf       	rjmp	.-18     	; 0xa1d8 <vfprintf+0x394>
    a1ea:	8a 94       	dec	r8
    a1ec:	f3 01       	movw	r30, r6
    a1ee:	e8 0d       	add	r30, r8
    a1f0:	f1 1d       	adc	r31, r1
    a1f2:	80 81       	ld	r24, Z
    a1f4:	b6 01       	movw	r22, r12
    a1f6:	90 e0       	ldi	r25, 0x00	; 0
    a1f8:	0e 94 b9 52 	call	0xa572	; 0xa572 <fputc>
    a1fc:	81 10       	cpse	r8, r1
    a1fe:	f5 cf       	rjmp	.-22     	; 0xa1ea <vfprintf+0x3a6>
    a200:	22 20       	and	r2, r2
    a202:	09 f4       	brne	.+2      	; 0xa206 <vfprintf+0x3c2>
    a204:	42 ce       	rjmp	.-892    	; 0x9e8a <vfprintf+0x46>
    a206:	b6 01       	movw	r22, r12
    a208:	80 e2       	ldi	r24, 0x20	; 32
    a20a:	90 e0       	ldi	r25, 0x00	; 0
    a20c:	0e 94 b9 52 	call	0xa572	; 0xa572 <fputc>
    a210:	2a 94       	dec	r2
    a212:	f6 cf       	rjmp	.-20     	; 0xa200 <vfprintf+0x3bc>
    a214:	f6 01       	movw	r30, r12
    a216:	86 81       	ldd	r24, Z+6	; 0x06
    a218:	97 81       	ldd	r25, Z+7	; 0x07
    a21a:	02 c0       	rjmp	.+4      	; 0xa220 <vfprintf+0x3dc>
    a21c:	8f ef       	ldi	r24, 0xFF	; 255
    a21e:	9f ef       	ldi	r25, 0xFF	; 255
    a220:	2b 96       	adiw	r28, 0x0b	; 11
    a222:	cd bf       	out	0x3d, r28	; 61
    a224:	de bf       	out	0x3e, r29	; 62
    a226:	df 91       	pop	r29
    a228:	cf 91       	pop	r28
    a22a:	1f 91       	pop	r17
    a22c:	0f 91       	pop	r16
    a22e:	ff 90       	pop	r15
    a230:	ef 90       	pop	r14
    a232:	df 90       	pop	r13
    a234:	cf 90       	pop	r12
    a236:	bf 90       	pop	r11
    a238:	af 90       	pop	r10
    a23a:	9f 90       	pop	r9
    a23c:	8f 90       	pop	r8
    a23e:	7f 90       	pop	r7
    a240:	6f 90       	pop	r6
    a242:	5f 90       	pop	r5
    a244:	4f 90       	pop	r4
    a246:	3f 90       	pop	r3
    a248:	2f 90       	pop	r2
    a24a:	08 95       	ret

0000a24c <strtod>:
    a24c:	8f 92       	push	r8
    a24e:	9f 92       	push	r9
    a250:	af 92       	push	r10
    a252:	bf 92       	push	r11
    a254:	cf 92       	push	r12
    a256:	df 92       	push	r13
    a258:	ef 92       	push	r14
    a25a:	ff 92       	push	r15
    a25c:	0f 93       	push	r16
    a25e:	1f 93       	push	r17
    a260:	cf 93       	push	r28
    a262:	df 93       	push	r29
    a264:	ec 01       	movw	r28, r24
    a266:	6b 01       	movw	r12, r22
    a268:	61 15       	cp	r22, r1
    a26a:	71 05       	cpc	r23, r1
    a26c:	19 f0       	breq	.+6      	; 0xa274 <strtod+0x28>
    a26e:	fb 01       	movw	r30, r22
    a270:	80 83       	st	Z, r24
    a272:	91 83       	std	Z+1, r25	; 0x01
    a274:	7e 01       	movw	r14, r28
    a276:	ff ef       	ldi	r31, 0xFF	; 255
    a278:	ef 1a       	sub	r14, r31
    a27a:	ff 0a       	sbc	r15, r31
    a27c:	08 81       	ld	r16, Y
    a27e:	80 2f       	mov	r24, r16
    a280:	90 e0       	ldi	r25, 0x00	; 0
    a282:	0e 94 82 52 	call	0xa504	; 0xa504 <isspace>
    a286:	89 2b       	or	r24, r25
    a288:	11 f0       	breq	.+4      	; 0xa28e <strtod+0x42>
    a28a:	e7 01       	movw	r28, r14
    a28c:	f3 cf       	rjmp	.-26     	; 0xa274 <strtod+0x28>
    a28e:	0d 32       	cpi	r16, 0x2D	; 45
    a290:	39 f4       	brne	.+14     	; 0xa2a0 <strtod+0x54>
    a292:	7e 01       	movw	r14, r28
    a294:	82 e0       	ldi	r24, 0x02	; 2
    a296:	e8 0e       	add	r14, r24
    a298:	f1 1c       	adc	r15, r1
    a29a:	09 81       	ldd	r16, Y+1	; 0x01
    a29c:	11 e0       	ldi	r17, 0x01	; 1
    a29e:	08 c0       	rjmp	.+16     	; 0xa2b0 <strtod+0x64>
    a2a0:	0b 32       	cpi	r16, 0x2B	; 43
    a2a2:	29 f4       	brne	.+10     	; 0xa2ae <strtod+0x62>
    a2a4:	7e 01       	movw	r14, r28
    a2a6:	92 e0       	ldi	r25, 0x02	; 2
    a2a8:	e9 0e       	add	r14, r25
    a2aa:	f1 1c       	adc	r15, r1
    a2ac:	09 81       	ldd	r16, Y+1	; 0x01
    a2ae:	10 e0       	ldi	r17, 0x00	; 0
    a2b0:	e7 01       	movw	r28, r14
    a2b2:	21 97       	sbiw	r28, 0x01	; 1
    a2b4:	43 e0       	ldi	r20, 0x03	; 3
    a2b6:	50 e0       	ldi	r21, 0x00	; 0
    a2b8:	68 e5       	ldi	r22, 0x58	; 88
    a2ba:	72 e0       	ldi	r23, 0x02	; 2
    a2bc:	ce 01       	movw	r24, r28
    a2be:	0e 94 8b 52 	call	0xa516	; 0xa516 <strncasecmp_P>
    a2c2:	89 2b       	or	r24, r25
    a2c4:	c1 f4       	brne	.+48     	; 0xa2f6 <strtod+0xaa>
    a2c6:	23 96       	adiw	r28, 0x03	; 3
    a2c8:	45 e0       	ldi	r20, 0x05	; 5
    a2ca:	50 e0       	ldi	r21, 0x00	; 0
    a2cc:	63 e5       	ldi	r22, 0x53	; 83
    a2ce:	72 e0       	ldi	r23, 0x02	; 2
    a2d0:	ce 01       	movw	r24, r28
    a2d2:	0e 94 8b 52 	call	0xa516	; 0xa516 <strncasecmp_P>
    a2d6:	89 2b       	or	r24, r25
    a2d8:	09 f4       	brne	.+2      	; 0xa2dc <strtod+0x90>
    a2da:	25 96       	adiw	r28, 0x05	; 5
    a2dc:	c1 14       	cp	r12, r1
    a2de:	d1 04       	cpc	r13, r1
    a2e0:	19 f0       	breq	.+6      	; 0xa2e8 <strtod+0x9c>
    a2e2:	f6 01       	movw	r30, r12
    a2e4:	c0 83       	st	Z, r28
    a2e6:	d1 83       	std	Z+1, r29	; 0x01
    a2e8:	11 11       	cpse	r17, r1
    a2ea:	f6 c0       	rjmp	.+492    	; 0xa4d8 <strtod+0x28c>
    a2ec:	60 e0       	ldi	r22, 0x00	; 0
    a2ee:	70 e0       	ldi	r23, 0x00	; 0
    a2f0:	80 e8       	ldi	r24, 0x80	; 128
    a2f2:	9f e7       	ldi	r25, 0x7F	; 127
    a2f4:	fa c0       	rjmp	.+500    	; 0xa4ea <strtod+0x29e>
    a2f6:	43 e0       	ldi	r20, 0x03	; 3
    a2f8:	50 e0       	ldi	r21, 0x00	; 0
    a2fa:	60 e5       	ldi	r22, 0x50	; 80
    a2fc:	72 e0       	ldi	r23, 0x02	; 2
    a2fe:	ce 01       	movw	r24, r28
    a300:	0e 94 8b 52 	call	0xa516	; 0xa516 <strncasecmp_P>
    a304:	89 2b       	or	r24, r25
    a306:	59 f4       	brne	.+22     	; 0xa31e <strtod+0xd2>
    a308:	c1 14       	cp	r12, r1
    a30a:	d1 04       	cpc	r13, r1
    a30c:	09 f4       	brne	.+2      	; 0xa310 <strtod+0xc4>
    a30e:	e9 c0       	rjmp	.+466    	; 0xa4e2 <strtod+0x296>
    a310:	f2 e0       	ldi	r31, 0x02	; 2
    a312:	ef 0e       	add	r14, r31
    a314:	f1 1c       	adc	r15, r1
    a316:	f6 01       	movw	r30, r12
    a318:	e0 82       	st	Z, r14
    a31a:	f1 82       	std	Z+1, r15	; 0x01
    a31c:	e2 c0       	rjmp	.+452    	; 0xa4e2 <strtod+0x296>
    a31e:	20 e0       	ldi	r18, 0x00	; 0
    a320:	30 e0       	ldi	r19, 0x00	; 0
    a322:	a9 01       	movw	r20, r18
    a324:	c0 e0       	ldi	r28, 0x00	; 0
    a326:	d0 e0       	ldi	r29, 0x00	; 0
    a328:	f7 01       	movw	r30, r14
    a32a:	60 ed       	ldi	r22, 0xD0	; 208
    a32c:	a6 2e       	mov	r10, r22
    a32e:	a0 0e       	add	r10, r16
    a330:	89 e0       	ldi	r24, 0x09	; 9
    a332:	8a 15       	cp	r24, r10
    a334:	30 f1       	brcs	.+76     	; 0xa382 <strtod+0x136>
    a336:	91 2f       	mov	r25, r17
    a338:	92 60       	ori	r25, 0x02	; 2
    a33a:	b9 2e       	mov	r11, r25
    a33c:	81 2f       	mov	r24, r17
    a33e:	88 70       	andi	r24, 0x08	; 8
    a340:	12 ff       	sbrs	r17, 2
    a342:	04 c0       	rjmp	.+8      	; 0xa34c <strtod+0x100>
    a344:	81 11       	cpse	r24, r1
    a346:	24 c0       	rjmp	.+72     	; 0xa390 <strtod+0x144>
    a348:	21 96       	adiw	r28, 0x01	; 1
    a34a:	22 c0       	rjmp	.+68     	; 0xa390 <strtod+0x144>
    a34c:	81 11       	cpse	r24, r1
    a34e:	21 97       	sbiw	r28, 0x01	; 1
    a350:	a5 e0       	ldi	r26, 0x05	; 5
    a352:	b0 e0       	ldi	r27, 0x00	; 0
    a354:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <__muluhisi3>
    a358:	dc 01       	movw	r26, r24
    a35a:	cb 01       	movw	r24, r22
    a35c:	88 0f       	add	r24, r24
    a35e:	99 1f       	adc	r25, r25
    a360:	aa 1f       	adc	r26, r26
    a362:	bb 1f       	adc	r27, r27
    a364:	9c 01       	movw	r18, r24
    a366:	ad 01       	movw	r20, r26
    a368:	2a 0d       	add	r18, r10
    a36a:	31 1d       	adc	r19, r1
    a36c:	41 1d       	adc	r20, r1
    a36e:	51 1d       	adc	r21, r1
    a370:	28 39       	cpi	r18, 0x98	; 152
    a372:	89 e9       	ldi	r24, 0x99	; 153
    a374:	38 07       	cpc	r19, r24
    a376:	48 07       	cpc	r20, r24
    a378:	89 e1       	ldi	r24, 0x19	; 25
    a37a:	58 07       	cpc	r21, r24
    a37c:	48 f0       	brcs	.+18     	; 0xa390 <strtod+0x144>
    a37e:	16 60       	ori	r17, 0x06	; 6
    a380:	06 c0       	rjmp	.+12     	; 0xa38e <strtod+0x142>
    a382:	9e ef       	ldi	r25, 0xFE	; 254
    a384:	a9 12       	cpse	r10, r25
    a386:	0a c0       	rjmp	.+20     	; 0xa39c <strtod+0x150>
    a388:	13 fd       	sbrc	r17, 3
    a38a:	40 c0       	rjmp	.+128    	; 0xa40c <strtod+0x1c0>
    a38c:	18 60       	ori	r17, 0x08	; 8
    a38e:	b1 2e       	mov	r11, r17
    a390:	8f ef       	ldi	r24, 0xFF	; 255
    a392:	e8 1a       	sub	r14, r24
    a394:	f8 0a       	sbc	r15, r24
    a396:	00 81       	ld	r16, Z
    a398:	1b 2d       	mov	r17, r11
    a39a:	c6 cf       	rjmp	.-116    	; 0xa328 <strtod+0xdc>
    a39c:	80 2f       	mov	r24, r16
    a39e:	8f 7d       	andi	r24, 0xDF	; 223
    a3a0:	85 34       	cpi	r24, 0x45	; 69
    a3a2:	a1 f5       	brne	.+104    	; 0xa40c <strtod+0x1c0>
    a3a4:	80 81       	ld	r24, Z
    a3a6:	8d 32       	cpi	r24, 0x2D	; 45
    a3a8:	11 f4       	brne	.+4      	; 0xa3ae <strtod+0x162>
    a3aa:	10 61       	ori	r17, 0x10	; 16
    a3ac:	06 c0       	rjmp	.+12     	; 0xa3ba <strtod+0x16e>
    a3ae:	8b 32       	cpi	r24, 0x2B	; 43
    a3b0:	21 f0       	breq	.+8      	; 0xa3ba <strtod+0x16e>
    a3b2:	31 96       	adiw	r30, 0x01	; 1
    a3b4:	61 e0       	ldi	r22, 0x01	; 1
    a3b6:	70 e0       	ldi	r23, 0x00	; 0
    a3b8:	04 c0       	rjmp	.+8      	; 0xa3c2 <strtod+0x176>
    a3ba:	81 81       	ldd	r24, Z+1	; 0x01
    a3bc:	32 96       	adiw	r30, 0x02	; 2
    a3be:	62 e0       	ldi	r22, 0x02	; 2
    a3c0:	70 e0       	ldi	r23, 0x00	; 0
    a3c2:	80 53       	subi	r24, 0x30	; 48
    a3c4:	8a 30       	cpi	r24, 0x0A	; 10
    a3c6:	18 f0       	brcs	.+6      	; 0xa3ce <strtod+0x182>
    a3c8:	e6 1b       	sub	r30, r22
    a3ca:	f7 0b       	sbc	r31, r23
    a3cc:	1f c0       	rjmp	.+62     	; 0xa40c <strtod+0x1c0>
    a3ce:	60 e0       	ldi	r22, 0x00	; 0
    a3d0:	70 e0       	ldi	r23, 0x00	; 0
    a3d2:	60 38       	cpi	r22, 0x80	; 128
    a3d4:	9c e0       	ldi	r25, 0x0C	; 12
    a3d6:	79 07       	cpc	r23, r25
    a3d8:	5c f4       	brge	.+22     	; 0xa3f0 <strtod+0x1a4>
    a3da:	db 01       	movw	r26, r22
    a3dc:	aa 0f       	add	r26, r26
    a3de:	bb 1f       	adc	r27, r27
    a3e0:	aa 0f       	add	r26, r26
    a3e2:	bb 1f       	adc	r27, r27
    a3e4:	6a 0f       	add	r22, r26
    a3e6:	7b 1f       	adc	r23, r27
    a3e8:	66 0f       	add	r22, r22
    a3ea:	77 1f       	adc	r23, r23
    a3ec:	68 0f       	add	r22, r24
    a3ee:	71 1d       	adc	r23, r1
    a3f0:	31 96       	adiw	r30, 0x01	; 1
    a3f2:	df 01       	movw	r26, r30
    a3f4:	11 97       	sbiw	r26, 0x01	; 1
    a3f6:	8c 91       	ld	r24, X
    a3f8:	80 53       	subi	r24, 0x30	; 48
    a3fa:	8a 30       	cpi	r24, 0x0A	; 10
    a3fc:	50 f3       	brcs	.-44     	; 0xa3d2 <strtod+0x186>
    a3fe:	14 ff       	sbrs	r17, 4
    a400:	03 c0       	rjmp	.+6      	; 0xa408 <strtod+0x1bc>
    a402:	71 95       	neg	r23
    a404:	61 95       	neg	r22
    a406:	71 09       	sbc	r23, r1
    a408:	c6 0f       	add	r28, r22
    a40a:	d7 1f       	adc	r29, r23
    a40c:	11 ff       	sbrs	r17, 1
    a40e:	08 c0       	rjmp	.+16     	; 0xa420 <strtod+0x1d4>
    a410:	c1 14       	cp	r12, r1
    a412:	d1 04       	cpc	r13, r1
    a414:	29 f0       	breq	.+10     	; 0xa420 <strtod+0x1d4>
    a416:	cf 01       	movw	r24, r30
    a418:	01 97       	sbiw	r24, 0x01	; 1
    a41a:	f6 01       	movw	r30, r12
    a41c:	80 83       	st	Z, r24
    a41e:	91 83       	std	Z+1, r25	; 0x01
    a420:	ca 01       	movw	r24, r20
    a422:	b9 01       	movw	r22, r18
    a424:	0e 94 25 4b 	call	0x964a	; 0x964a <__floatunsisf>
    a428:	21 2f       	mov	r18, r17
    a42a:	23 70       	andi	r18, 0x03	; 3
    a42c:	23 30       	cpi	r18, 0x03	; 3
    a42e:	19 f0       	breq	.+6      	; 0xa436 <strtod+0x1ea>
    a430:	4b 01       	movw	r8, r22
    a432:	5c 01       	movw	r10, r24
    a434:	06 c0       	rjmp	.+12     	; 0xa442 <strtod+0x1f6>
    a436:	4b 01       	movw	r8, r22
    a438:	5c 01       	movw	r10, r24
    a43a:	b7 fa       	bst	r11, 7
    a43c:	b0 94       	com	r11
    a43e:	b7 f8       	bld	r11, 7
    a440:	b0 94       	com	r11
    a442:	20 e0       	ldi	r18, 0x00	; 0
    a444:	30 e0       	ldi	r19, 0x00	; 0
    a446:	a9 01       	movw	r20, r18
    a448:	c5 01       	movw	r24, r10
    a44a:	b4 01       	movw	r22, r8
    a44c:	0e 94 78 4a 	call	0x94f0	; 0x94f0 <__cmpsf2>
    a450:	88 23       	and	r24, r24
    a452:	09 f4       	brne	.+2      	; 0xa456 <strtod+0x20a>
    a454:	3e c0       	rjmp	.+124    	; 0xa4d2 <strtod+0x286>
    a456:	d7 ff       	sbrs	r29, 7
    a458:	06 c0       	rjmp	.+12     	; 0xa466 <strtod+0x21a>
    a45a:	d1 95       	neg	r29
    a45c:	c1 95       	neg	r28
    a45e:	d1 09       	sbc	r29, r1
    a460:	0f e6       	ldi	r16, 0x6F	; 111
    a462:	12 e0       	ldi	r17, 0x02	; 2
    a464:	02 c0       	rjmp	.+4      	; 0xa46a <strtod+0x21e>
    a466:	07 e8       	ldi	r16, 0x87	; 135
    a468:	12 e0       	ldi	r17, 0x02	; 2
    a46a:	68 01       	movw	r12, r16
    a46c:	f8 e1       	ldi	r31, 0x18	; 24
    a46e:	cf 1a       	sub	r12, r31
    a470:	d1 08       	sbc	r13, r1
    a472:	90 e2       	ldi	r25, 0x20	; 32
    a474:	e9 2e       	mov	r14, r25
    a476:	f1 2c       	mov	r15, r1
    a478:	ce 15       	cp	r28, r14
    a47a:	df 05       	cpc	r29, r15
    a47c:	74 f0       	brlt	.+28     	; 0xa49a <strtod+0x24e>
    a47e:	f8 01       	movw	r30, r16
    a480:	25 91       	lpm	r18, Z+
    a482:	35 91       	lpm	r19, Z+
    a484:	45 91       	lpm	r20, Z+
    a486:	54 91       	lpm	r21, Z
    a488:	c5 01       	movw	r24, r10
    a48a:	b4 01       	movw	r22, r8
    a48c:	0e 94 1d 4c 	call	0x983a	; 0x983a <__mulsf3>
    a490:	4b 01       	movw	r8, r22
    a492:	5c 01       	movw	r10, r24
    a494:	ce 19       	sub	r28, r14
    a496:	df 09       	sbc	r29, r15
    a498:	ef cf       	rjmp	.-34     	; 0xa478 <strtod+0x22c>
    a49a:	04 50       	subi	r16, 0x04	; 4
    a49c:	11 09       	sbc	r17, r1
    a49e:	f5 94       	asr	r15
    a4a0:	e7 94       	ror	r14
    a4a2:	0c 15       	cp	r16, r12
    a4a4:	1d 05       	cpc	r17, r13
    a4a6:	41 f7       	brne	.-48     	; 0xa478 <strtod+0x22c>
    a4a8:	8a 2d       	mov	r24, r10
    a4aa:	88 0f       	add	r24, r24
    a4ac:	8b 2d       	mov	r24, r11
    a4ae:	88 1f       	adc	r24, r24
    a4b0:	8f 3f       	cpi	r24, 0xFF	; 255
    a4b2:	49 f0       	breq	.+18     	; 0xa4c6 <strtod+0x27a>
    a4b4:	20 e0       	ldi	r18, 0x00	; 0
    a4b6:	30 e0       	ldi	r19, 0x00	; 0
    a4b8:	a9 01       	movw	r20, r18
    a4ba:	c5 01       	movw	r24, r10
    a4bc:	b4 01       	movw	r22, r8
    a4be:	0e 94 78 4a 	call	0x94f0	; 0x94f0 <__cmpsf2>
    a4c2:	81 11       	cpse	r24, r1
    a4c4:	06 c0       	rjmp	.+12     	; 0xa4d2 <strtod+0x286>
    a4c6:	82 e2       	ldi	r24, 0x22	; 34
    a4c8:	90 e0       	ldi	r25, 0x00	; 0
    a4ca:	80 93 af 4a 	sts	0x4AAF, r24	; 0x804aaf <errno>
    a4ce:	90 93 b0 4a 	sts	0x4AB0, r25	; 0x804ab0 <errno+0x1>
    a4d2:	c5 01       	movw	r24, r10
    a4d4:	b4 01       	movw	r22, r8
    a4d6:	09 c0       	rjmp	.+18     	; 0xa4ea <strtod+0x29e>
    a4d8:	60 e0       	ldi	r22, 0x00	; 0
    a4da:	70 e0       	ldi	r23, 0x00	; 0
    a4dc:	80 e8       	ldi	r24, 0x80	; 128
    a4de:	9f ef       	ldi	r25, 0xFF	; 255
    a4e0:	04 c0       	rjmp	.+8      	; 0xa4ea <strtod+0x29e>
    a4e2:	60 e0       	ldi	r22, 0x00	; 0
    a4e4:	70 e0       	ldi	r23, 0x00	; 0
    a4e6:	80 ec       	ldi	r24, 0xC0	; 192
    a4e8:	9f e7       	ldi	r25, 0x7F	; 127
    a4ea:	df 91       	pop	r29
    a4ec:	cf 91       	pop	r28
    a4ee:	1f 91       	pop	r17
    a4f0:	0f 91       	pop	r16
    a4f2:	ff 90       	pop	r15
    a4f4:	ef 90       	pop	r14
    a4f6:	df 90       	pop	r13
    a4f8:	cf 90       	pop	r12
    a4fa:	bf 90       	pop	r11
    a4fc:	af 90       	pop	r10
    a4fe:	9f 90       	pop	r9
    a500:	8f 90       	pop	r8
    a502:	08 95       	ret

0000a504 <isspace>:
    a504:	91 11       	cpse	r25, r1
    a506:	0c 94 53 53 	jmp	0xa6a6	; 0xa6a6 <__ctype_isfalse>
    a50a:	80 32       	cpi	r24, 0x20	; 32
    a50c:	19 f0       	breq	.+6      	; 0xa514 <isspace+0x10>
    a50e:	89 50       	subi	r24, 0x09	; 9
    a510:	85 50       	subi	r24, 0x05	; 5
    a512:	c8 f7       	brcc	.-14     	; 0xa506 <isspace+0x2>
    a514:	08 95       	ret

0000a516 <strncasecmp_P>:
    a516:	fb 01       	movw	r30, r22
    a518:	dc 01       	movw	r26, r24
    a51a:	41 50       	subi	r20, 0x01	; 1
    a51c:	50 40       	sbci	r21, 0x00	; 0
    a51e:	88 f0       	brcs	.+34     	; 0xa542 <strncasecmp_P+0x2c>
    a520:	8d 91       	ld	r24, X+
    a522:	81 34       	cpi	r24, 0x41	; 65
    a524:	1c f0       	brlt	.+6      	; 0xa52c <strncasecmp_P+0x16>
    a526:	8b 35       	cpi	r24, 0x5B	; 91
    a528:	0c f4       	brge	.+2      	; 0xa52c <strncasecmp_P+0x16>
    a52a:	80 5e       	subi	r24, 0xE0	; 224
    a52c:	65 91       	lpm	r22, Z+
    a52e:	61 34       	cpi	r22, 0x41	; 65
    a530:	1c f0       	brlt	.+6      	; 0xa538 <strncasecmp_P+0x22>
    a532:	6b 35       	cpi	r22, 0x5B	; 91
    a534:	0c f4       	brge	.+2      	; 0xa538 <strncasecmp_P+0x22>
    a536:	60 5e       	subi	r22, 0xE0	; 224
    a538:	86 1b       	sub	r24, r22
    a53a:	61 11       	cpse	r22, r1
    a53c:	71 f3       	breq	.-36     	; 0xa51a <strncasecmp_P+0x4>
    a53e:	99 0b       	sbc	r25, r25
    a540:	08 95       	ret
    a542:	88 1b       	sub	r24, r24
    a544:	fc cf       	rjmp	.-8      	; 0xa53e <strncasecmp_P+0x28>

0000a546 <strnlen_P>:
    a546:	fc 01       	movw	r30, r24
    a548:	05 90       	lpm	r0, Z+
    a54a:	61 50       	subi	r22, 0x01	; 1
    a54c:	70 40       	sbci	r23, 0x00	; 0
    a54e:	01 10       	cpse	r0, r1
    a550:	d8 f7       	brcc	.-10     	; 0xa548 <strnlen_P+0x2>
    a552:	80 95       	com	r24
    a554:	90 95       	com	r25
    a556:	8e 0f       	add	r24, r30
    a558:	9f 1f       	adc	r25, r31
    a55a:	08 95       	ret

0000a55c <strnlen>:
    a55c:	fc 01       	movw	r30, r24
    a55e:	61 50       	subi	r22, 0x01	; 1
    a560:	70 40       	sbci	r23, 0x00	; 0
    a562:	01 90       	ld	r0, Z+
    a564:	01 10       	cpse	r0, r1
    a566:	d8 f7       	brcc	.-10     	; 0xa55e <strnlen+0x2>
    a568:	80 95       	com	r24
    a56a:	90 95       	com	r25
    a56c:	8e 0f       	add	r24, r30
    a56e:	9f 1f       	adc	r25, r31
    a570:	08 95       	ret

0000a572 <fputc>:
    a572:	0f 93       	push	r16
    a574:	1f 93       	push	r17
    a576:	cf 93       	push	r28
    a578:	df 93       	push	r29
    a57a:	fb 01       	movw	r30, r22
    a57c:	23 81       	ldd	r18, Z+3	; 0x03
    a57e:	21 fd       	sbrc	r18, 1
    a580:	03 c0       	rjmp	.+6      	; 0xa588 <fputc+0x16>
    a582:	8f ef       	ldi	r24, 0xFF	; 255
    a584:	9f ef       	ldi	r25, 0xFF	; 255
    a586:	2c c0       	rjmp	.+88     	; 0xa5e0 <fputc+0x6e>
    a588:	22 ff       	sbrs	r18, 2
    a58a:	16 c0       	rjmp	.+44     	; 0xa5b8 <fputc+0x46>
    a58c:	46 81       	ldd	r20, Z+6	; 0x06
    a58e:	57 81       	ldd	r21, Z+7	; 0x07
    a590:	24 81       	ldd	r18, Z+4	; 0x04
    a592:	35 81       	ldd	r19, Z+5	; 0x05
    a594:	42 17       	cp	r20, r18
    a596:	53 07       	cpc	r21, r19
    a598:	44 f4       	brge	.+16     	; 0xa5aa <fputc+0x38>
    a59a:	a0 81       	ld	r26, Z
    a59c:	b1 81       	ldd	r27, Z+1	; 0x01
    a59e:	9d 01       	movw	r18, r26
    a5a0:	2f 5f       	subi	r18, 0xFF	; 255
    a5a2:	3f 4f       	sbci	r19, 0xFF	; 255
    a5a4:	20 83       	st	Z, r18
    a5a6:	31 83       	std	Z+1, r19	; 0x01
    a5a8:	8c 93       	st	X, r24
    a5aa:	26 81       	ldd	r18, Z+6	; 0x06
    a5ac:	37 81       	ldd	r19, Z+7	; 0x07
    a5ae:	2f 5f       	subi	r18, 0xFF	; 255
    a5b0:	3f 4f       	sbci	r19, 0xFF	; 255
    a5b2:	26 83       	std	Z+6, r18	; 0x06
    a5b4:	37 83       	std	Z+7, r19	; 0x07
    a5b6:	14 c0       	rjmp	.+40     	; 0xa5e0 <fputc+0x6e>
    a5b8:	8b 01       	movw	r16, r22
    a5ba:	ec 01       	movw	r28, r24
    a5bc:	fb 01       	movw	r30, r22
    a5be:	00 84       	ldd	r0, Z+8	; 0x08
    a5c0:	f1 85       	ldd	r31, Z+9	; 0x09
    a5c2:	e0 2d       	mov	r30, r0
    a5c4:	09 95       	icall
    a5c6:	89 2b       	or	r24, r25
    a5c8:	e1 f6       	brne	.-72     	; 0xa582 <fputc+0x10>
    a5ca:	d8 01       	movw	r26, r16
    a5cc:	16 96       	adiw	r26, 0x06	; 6
    a5ce:	8d 91       	ld	r24, X+
    a5d0:	9c 91       	ld	r25, X
    a5d2:	17 97       	sbiw	r26, 0x07	; 7
    a5d4:	01 96       	adiw	r24, 0x01	; 1
    a5d6:	16 96       	adiw	r26, 0x06	; 6
    a5d8:	8d 93       	st	X+, r24
    a5da:	9c 93       	st	X, r25
    a5dc:	17 97       	sbiw	r26, 0x07	; 7
    a5de:	ce 01       	movw	r24, r28
    a5e0:	df 91       	pop	r29
    a5e2:	cf 91       	pop	r28
    a5e4:	1f 91       	pop	r17
    a5e6:	0f 91       	pop	r16
    a5e8:	08 95       	ret

0000a5ea <__ultoa_invert>:
    a5ea:	fa 01       	movw	r30, r20
    a5ec:	aa 27       	eor	r26, r26
    a5ee:	28 30       	cpi	r18, 0x08	; 8
    a5f0:	51 f1       	breq	.+84     	; 0xa646 <__ultoa_invert+0x5c>
    a5f2:	20 31       	cpi	r18, 0x10	; 16
    a5f4:	81 f1       	breq	.+96     	; 0xa656 <__ultoa_invert+0x6c>
    a5f6:	e8 94       	clt
    a5f8:	6f 93       	push	r22
    a5fa:	6e 7f       	andi	r22, 0xFE	; 254
    a5fc:	6e 5f       	subi	r22, 0xFE	; 254
    a5fe:	7f 4f       	sbci	r23, 0xFF	; 255
    a600:	8f 4f       	sbci	r24, 0xFF	; 255
    a602:	9f 4f       	sbci	r25, 0xFF	; 255
    a604:	af 4f       	sbci	r26, 0xFF	; 255
    a606:	b1 e0       	ldi	r27, 0x01	; 1
    a608:	3e d0       	rcall	.+124    	; 0xa686 <__ultoa_invert+0x9c>
    a60a:	b4 e0       	ldi	r27, 0x04	; 4
    a60c:	3c d0       	rcall	.+120    	; 0xa686 <__ultoa_invert+0x9c>
    a60e:	67 0f       	add	r22, r23
    a610:	78 1f       	adc	r23, r24
    a612:	89 1f       	adc	r24, r25
    a614:	9a 1f       	adc	r25, r26
    a616:	a1 1d       	adc	r26, r1
    a618:	68 0f       	add	r22, r24
    a61a:	79 1f       	adc	r23, r25
    a61c:	8a 1f       	adc	r24, r26
    a61e:	91 1d       	adc	r25, r1
    a620:	a1 1d       	adc	r26, r1
    a622:	6a 0f       	add	r22, r26
    a624:	71 1d       	adc	r23, r1
    a626:	81 1d       	adc	r24, r1
    a628:	91 1d       	adc	r25, r1
    a62a:	a1 1d       	adc	r26, r1
    a62c:	20 d0       	rcall	.+64     	; 0xa66e <__ultoa_invert+0x84>
    a62e:	09 f4       	brne	.+2      	; 0xa632 <__ultoa_invert+0x48>
    a630:	68 94       	set
    a632:	3f 91       	pop	r19
    a634:	2a e0       	ldi	r18, 0x0A	; 10
    a636:	26 9f       	mul	r18, r22
    a638:	11 24       	eor	r1, r1
    a63a:	30 19       	sub	r19, r0
    a63c:	30 5d       	subi	r19, 0xD0	; 208
    a63e:	31 93       	st	Z+, r19
    a640:	de f6       	brtc	.-74     	; 0xa5f8 <__ultoa_invert+0xe>
    a642:	cf 01       	movw	r24, r30
    a644:	08 95       	ret
    a646:	46 2f       	mov	r20, r22
    a648:	47 70       	andi	r20, 0x07	; 7
    a64a:	40 5d       	subi	r20, 0xD0	; 208
    a64c:	41 93       	st	Z+, r20
    a64e:	b3 e0       	ldi	r27, 0x03	; 3
    a650:	0f d0       	rcall	.+30     	; 0xa670 <__ultoa_invert+0x86>
    a652:	c9 f7       	brne	.-14     	; 0xa646 <__ultoa_invert+0x5c>
    a654:	f6 cf       	rjmp	.-20     	; 0xa642 <__ultoa_invert+0x58>
    a656:	46 2f       	mov	r20, r22
    a658:	4f 70       	andi	r20, 0x0F	; 15
    a65a:	40 5d       	subi	r20, 0xD0	; 208
    a65c:	4a 33       	cpi	r20, 0x3A	; 58
    a65e:	18 f0       	brcs	.+6      	; 0xa666 <__ultoa_invert+0x7c>
    a660:	49 5d       	subi	r20, 0xD9	; 217
    a662:	31 fd       	sbrc	r19, 1
    a664:	40 52       	subi	r20, 0x20	; 32
    a666:	41 93       	st	Z+, r20
    a668:	02 d0       	rcall	.+4      	; 0xa66e <__ultoa_invert+0x84>
    a66a:	a9 f7       	brne	.-22     	; 0xa656 <__ultoa_invert+0x6c>
    a66c:	ea cf       	rjmp	.-44     	; 0xa642 <__ultoa_invert+0x58>
    a66e:	b4 e0       	ldi	r27, 0x04	; 4
    a670:	a6 95       	lsr	r26
    a672:	97 95       	ror	r25
    a674:	87 95       	ror	r24
    a676:	77 95       	ror	r23
    a678:	67 95       	ror	r22
    a67a:	ba 95       	dec	r27
    a67c:	c9 f7       	brne	.-14     	; 0xa670 <__ultoa_invert+0x86>
    a67e:	00 97       	sbiw	r24, 0x00	; 0
    a680:	61 05       	cpc	r22, r1
    a682:	71 05       	cpc	r23, r1
    a684:	08 95       	ret
    a686:	9b 01       	movw	r18, r22
    a688:	ac 01       	movw	r20, r24
    a68a:	0a 2e       	mov	r0, r26
    a68c:	06 94       	lsr	r0
    a68e:	57 95       	ror	r21
    a690:	47 95       	ror	r20
    a692:	37 95       	ror	r19
    a694:	27 95       	ror	r18
    a696:	ba 95       	dec	r27
    a698:	c9 f7       	brne	.-14     	; 0xa68c <__ultoa_invert+0xa2>
    a69a:	62 0f       	add	r22, r18
    a69c:	73 1f       	adc	r23, r19
    a69e:	84 1f       	adc	r24, r20
    a6a0:	95 1f       	adc	r25, r21
    a6a2:	a0 1d       	adc	r26, r0
    a6a4:	08 95       	ret

0000a6a6 <__ctype_isfalse>:
    a6a6:	99 27       	eor	r25, r25
    a6a8:	88 27       	eor	r24, r24

0000a6aa <__ctype_istrue>:
    a6aa:	08 95       	ret

0000a6ac <eeprom_read_byte>:
    a6ac:	03 d0       	rcall	.+6      	; 0xa6b4 <eeprom_mapen>
    a6ae:	80 81       	ld	r24, Z
    a6b0:	99 27       	eor	r25, r25
    a6b2:	08 95       	ret

0000a6b4 <eeprom_mapen>:
    a6b4:	fc 01       	movw	r30, r24
    a6b6:	e0 50       	subi	r30, 0x00	; 0
    a6b8:	fc 4e       	sbci	r31, 0xEC	; 236
    a6ba:	08 95       	ret

0000a6bc <eeprom_read_dword>:
    a6bc:	0e 94 5a 53 	call	0xa6b4	; 0xa6b4 <eeprom_mapen>
    a6c0:	60 81       	ld	r22, Z
    a6c2:	71 81       	ldd	r23, Z+1	; 0x01
    a6c4:	82 81       	ldd	r24, Z+2	; 0x02
    a6c6:	93 81       	ldd	r25, Z+3	; 0x03
    a6c8:	08 95       	ret

0000a6ca <eeprom_read_word>:
    a6ca:	0e 94 5a 53 	call	0xa6b4	; 0xa6b4 <eeprom_mapen>
    a6ce:	80 81       	ld	r24, Z
    a6d0:	91 81       	ldd	r25, Z+1	; 0x01
    a6d2:	08 95       	ret

0000a6d4 <__divmodqi4>:
    a6d4:	87 fb       	bst	r24, 7
    a6d6:	08 2e       	mov	r0, r24
    a6d8:	06 26       	eor	r0, r22
    a6da:	87 fd       	sbrc	r24, 7
    a6dc:	81 95       	neg	r24
    a6de:	67 fd       	sbrc	r22, 7
    a6e0:	61 95       	neg	r22
    a6e2:	0e 94 7f 53 	call	0xa6fe	; 0xa6fe <__udivmodqi4>
    a6e6:	0e f4       	brtc	.+2      	; 0xa6ea <__divmodqi4_1>
    a6e8:	91 95       	neg	r25

0000a6ea <__divmodqi4_1>:
    a6ea:	07 fc       	sbrc	r0, 7
    a6ec:	81 95       	neg	r24

0000a6ee <__divmodqi4_exit>:
    a6ee:	08 95       	ret

0000a6f0 <__xload_1>:
    a6f0:	57 fd       	sbrc	r21, 7
    a6f2:	03 c0       	rjmp	.+6      	; 0xa6fa <__xload_1+0xa>
    a6f4:	5b bf       	out	0x3b, r21	; 59
    a6f6:	67 91       	elpm	r22, Z+
    a6f8:	08 95       	ret
    a6fa:	60 81       	ld	r22, Z
    a6fc:	08 95       	ret

0000a6fe <__udivmodqi4>:
    a6fe:	99 1b       	sub	r25, r25
    a700:	79 e0       	ldi	r23, 0x09	; 9
    a702:	04 c0       	rjmp	.+8      	; 0xa70c <__udivmodqi4_ep>

0000a704 <__udivmodqi4_loop>:
    a704:	99 1f       	adc	r25, r25
    a706:	96 17       	cp	r25, r22
    a708:	08 f0       	brcs	.+2      	; 0xa70c <__udivmodqi4_ep>
    a70a:	96 1b       	sub	r25, r22

0000a70c <__udivmodqi4_ep>:
    a70c:	88 1f       	adc	r24, r24
    a70e:	7a 95       	dec	r23
    a710:	c9 f7       	brne	.-14     	; 0xa704 <__udivmodqi4_loop>
    a712:	80 95       	com	r24
    a714:	08 95       	ret

0000a716 <__do_global_dtors>:
    a716:	11 e0       	ldi	r17, 0x01	; 1
    a718:	ce ea       	ldi	r28, 0xAE	; 174
    a71a:	d1 e0       	ldi	r29, 0x01	; 1
    a71c:	04 c0       	rjmp	.+8      	; 0xa726 <__do_global_dtors+0x10>
    a71e:	fe 01       	movw	r30, r28
    a720:	0e 94 03 4d 	call	0x9a06	; 0x9a06 <__tablejump2__>
    a724:	21 96       	adiw	r28, 0x01	; 1
    a726:	c0 3b       	cpi	r28, 0xB0	; 176
    a728:	d1 07       	cpc	r29, r17
    a72a:	c9 f7       	brne	.-14     	; 0xa71e <__do_global_dtors+0x8>
    a72c:	f8 94       	cli

0000a72e <__stop_program>:
    a72e:	ff cf       	rjmp	.-2      	; 0xa72e <__stop_program>
