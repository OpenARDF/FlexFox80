
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000053e  00804000  00009b1a  00009bce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009b1a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000415  0080453e  0080453e  0000a10c  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  0000a10c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000a141  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a1a0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000009a8  00000000  00000000  0000a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00012c07  00000000  00000000  0000ab88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005bd2  00000000  00000000  0001d78f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007c73  00000000  00000000  00023361  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001de4  00000000  00000000  0002afd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006004  00000000  00000000  0002cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a933  00000000  00000000  00032dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000930  00000000  00000000  0003d6ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 01 	jmp	0x300	; 0x300 <__dtors_end>
       4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      10:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      18:	0c 94 de 28 	jmp	0x51bc	; 0x51bc <__vector_6>
      1c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      20:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      24:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      30:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__vector_12>
      34:	0c 94 02 43 	jmp	0x8604	; 0x8604 <__vector_13>
      38:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      3c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      40:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      4c:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_19>
      50:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_20>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      5c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      60:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__vector_24>
      64:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      68:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      6c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      70:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      74:	0c 94 b3 28 	jmp	0x5166	; 0x5166 <__vector_29>
      78:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__vector_30>
      7c:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__vector_31>
      80:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_32>
      84:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      88:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      8c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      90:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      94:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      98:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      9c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a4:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_41>
      a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      dc:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_55>
      e0:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_56>
      e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e8:	f3 22       	and	r15, r19
      ea:	ff 22       	and	r15, r31
      ec:	0e 23       	and	r16, r30
      ee:	1d 23       	and	r17, r29
      f0:	2c 23       	and	r18, r28
      f2:	0d 24       	eor	r0, r13
      f4:	0d 24       	eor	r0, r13
      f6:	59 23       	and	r21, r25
      f8:	62 23       	and	r22, r18
      fa:	6e 23       	and	r22, r30
      fc:	7a 23       	and	r23, r26
      fe:	86 23       	and	r24, r22
     100:	b3 23       	and	r27, r19
     102:	bc 23       	and	r27, r28
     104:	c8 23       	and	r28, r24
     106:	d4 23       	and	r29, r20
     108:	e0 23       	and	r30, r16
     10a:	b8 2f       	mov	r27, r24
     10c:	be 2f       	mov	r27, r30
     10e:	a0 2f       	mov	r26, r16
     110:	be 2f       	mov	r27, r30
     112:	be 2f       	mov	r27, r30
     114:	be 2f       	mov	r27, r30
     116:	a9 2f       	mov	r26, r25
     118:	be 2f       	mov	r27, r30
     11a:	be 2f       	mov	r27, r30
     11c:	be 2f       	mov	r27, r30
     11e:	67 2f       	mov	r22, r23
     120:	be 2f       	mov	r27, r30
     122:	be 2f       	mov	r27, r30
     124:	be 2f       	mov	r27, r30
     126:	be 2f       	mov	r27, r30
     128:	be 2f       	mov	r27, r30
     12a:	be 2f       	mov	r27, r30
     12c:	be 2f       	mov	r27, r30
     12e:	be 2f       	mov	r27, r30
     130:	be 2f       	mov	r27, r30
     132:	be 2f       	mov	r27, r30
     134:	be 2f       	mov	r27, r30
     136:	be 2f       	mov	r27, r30
     138:	be 2f       	mov	r27, r30
     13a:	be 2f       	mov	r27, r30
     13c:	be 2f       	mov	r27, r30
     13e:	be 2f       	mov	r27, r30
     140:	be 2f       	mov	r27, r30
     142:	be 2f       	mov	r27, r30
     144:	be 2f       	mov	r27, r30
     146:	be 2f       	mov	r27, r30
     148:	7d 2f       	mov	r23, r29
     14a:	be 2f       	mov	r27, r30
     14c:	be 2f       	mov	r27, r30
     14e:	be 2f       	mov	r27, r30
     150:	be 2f       	mov	r27, r30
     152:	be 2f       	mov	r27, r30
     154:	be 2f       	mov	r27, r30
     156:	be 2f       	mov	r27, r30
     158:	be 2f       	mov	r27, r30
     15a:	94 2f       	mov	r25, r20
     15c:	9a 2f       	mov	r25, r26
     15e:	b2 2f       	mov	r27, r18
     160:	4e 2f       	mov	r20, r30
     162:	be 2f       	mov	r27, r30
     164:	be 2f       	mov	r27, r30
     166:	be 2f       	mov	r27, r30
     168:	57 2f       	mov	r21, r23
     16a:	be 2f       	mov	r27, r30
     16c:	be 2f       	mov	r27, r30
     16e:	be 2f       	mov	r27, r30
     170:	60 2f       	mov	r22, r16
     172:	ee 37       	cpi	r30, 0x7E	; 126
     174:	b2 37       	cpi	r27, 0x72	; 114
     176:	de 37       	cpi	r29, 0x7E	; 126
     178:	f6 37       	cpi	r31, 0x76	; 118
     17a:	e2 37       	cpi	r30, 0x72	; 114
     17c:	f6 37       	cpi	r31, 0x76	; 118
     17e:	c2 37       	cpi	r28, 0x72	; 114
     180:	ae 37       	cpi	r26, 0x7E	; 126
     182:	ba 37       	cpi	r27, 0x7A	; 122
     184:	be 37       	cpi	r27, 0x7E	; 126
     186:	f6 37       	cpi	r31, 0x76	; 118
     188:	d2 37       	cpi	r29, 0x72	; 114
     18a:	a6 37       	cpi	r26, 0x76	; 118
     18c:	d6 37       	cpi	r29, 0x76	; 118
     18e:	a2 37       	cpi	r26, 0x72	; 114
     190:	b6 37       	cpi	r27, 0x76	; 118
     192:	7a 37       	cpi	r23, 0x7A	; 122
     194:	7e 37       	cpi	r23, 0x7E	; 126
     196:	82 37       	cpi	r24, 0x72	; 114
     198:	86 37       	cpi	r24, 0x76	; 118
     19a:	8a 37       	cpi	r24, 0x7A	; 122
     19c:	8e 37       	cpi	r24, 0x7E	; 126
     19e:	92 37       	cpi	r25, 0x72	; 114
     1a0:	96 37       	cpi	r25, 0x76	; 118
     1a2:	9a 37       	cpi	r25, 0x7A	; 122
     1a4:	9e 37       	cpi	r25, 0x7E	; 126
     1a6:	c6 37       	cpi	r28, 0x76	; 118
     1a8:	ca 37       	cpi	r28, 0x7A	; 122
     1aa:	f2 37       	cpi	r31, 0x72	; 114
     1ac:	ce 37       	cpi	r28, 0x7E	; 126
     1ae:	f6 37       	cpi	r31, 0x76	; 118
     1b0:	aa 37       	cpi	r26, 0x7A	; 122
     1b2:	e6 37       	cpi	r30, 0x76	; 118
     1b4:	12 37       	cpi	r17, 0x72	; 114
     1b6:	16 37       	cpi	r17, 0x76	; 118
     1b8:	1a 37       	cpi	r17, 0x7A	; 122
     1ba:	1e 37       	cpi	r17, 0x7E	; 126
     1bc:	22 37       	cpi	r18, 0x72	; 114
     1be:	26 37       	cpi	r18, 0x76	; 118
     1c0:	2a 37       	cpi	r18, 0x7A	; 122
     1c2:	2e 37       	cpi	r18, 0x7E	; 126
     1c4:	32 37       	cpi	r19, 0x72	; 114
     1c6:	36 37       	cpi	r19, 0x76	; 118
     1c8:	3a 37       	cpi	r19, 0x7A	; 122
     1ca:	3e 37       	cpi	r19, 0x7E	; 126
     1cc:	42 37       	cpi	r20, 0x72	; 114
     1ce:	46 37       	cpi	r20, 0x76	; 118
     1d0:	4a 37       	cpi	r20, 0x7A	; 122
     1d2:	4e 37       	cpi	r20, 0x7E	; 126
     1d4:	52 37       	cpi	r21, 0x72	; 114
     1d6:	56 37       	cpi	r21, 0x76	; 118
     1d8:	5a 37       	cpi	r21, 0x7A	; 122
     1da:	5e 37       	cpi	r21, 0x7E	; 126
     1dc:	62 37       	cpi	r22, 0x72	; 114
     1de:	66 37       	cpi	r22, 0x76	; 118
     1e0:	6a 37       	cpi	r22, 0x7A	; 122
     1e2:	6e 37       	cpi	r22, 0x7E	; 126
     1e4:	72 37       	cpi	r23, 0x72	; 114
     1e6:	76 37       	cpi	r23, 0x76	; 118
     1e8:	f6 37       	cpi	r31, 0x76	; 118
     1ea:	f6 37       	cpi	r31, 0x76	; 118
     1ec:	f6 37       	cpi	r31, 0x76	; 118
     1ee:	f6 37       	cpi	r31, 0x76	; 118
     1f0:	da 37       	cpi	r29, 0x7A	; 122
     1f2:	f6 37       	cpi	r31, 0x76	; 118
     1f4:	f6 37       	cpi	r31, 0x76	; 118
     1f6:	f6 37       	cpi	r31, 0x76	; 118
     1f8:	f6 37       	cpi	r31, 0x76	; 118
     1fa:	f6 37       	cpi	r31, 0x76	; 118
     1fc:	f6 37       	cpi	r31, 0x76	; 118
     1fe:	f6 37       	cpi	r31, 0x76	; 118
     200:	f6 37       	cpi	r31, 0x76	; 118
     202:	f6 37       	cpi	r31, 0x76	; 118
     204:	f6 37       	cpi	r31, 0x76	; 118
     206:	f6 37       	cpi	r31, 0x76	; 118
     208:	f6 37       	cpi	r31, 0x76	; 118
     20a:	f6 37       	cpi	r31, 0x76	; 118
     20c:	f6 37       	cpi	r31, 0x76	; 118
     20e:	f6 37       	cpi	r31, 0x76	; 118
     210:	f6 37       	cpi	r31, 0x76	; 118
     212:	f6 37       	cpi	r31, 0x76	; 118
     214:	f6 37       	cpi	r31, 0x76	; 118
     216:	f6 37       	cpi	r31, 0x76	; 118
     218:	f6 37       	cpi	r31, 0x76	; 118
     21a:	f6 37       	cpi	r31, 0x76	; 118
     21c:	f6 37       	cpi	r31, 0x76	; 118
     21e:	f6 37       	cpi	r31, 0x76	; 118
     220:	f6 37       	cpi	r31, 0x76	; 118
     222:	f6 37       	cpi	r31, 0x76	; 118
     224:	f6 37       	cpi	r31, 0x76	; 118
     226:	f6 37       	cpi	r31, 0x76	; 118
     228:	f6 37       	cpi	r31, 0x76	; 118
     22a:	ea 37       	cpi	r30, 0x7A	; 122

0000022c <__trampolines_end>:
     22c:	4a 61       	ori	r20, 0x1A	; 26
     22e:	6e 75       	andi	r22, 0x5E	; 94
     230:	61 72       	andi	r22, 0x21	; 33
     232:	79 20       	and	r7, r9
     234:	46 65       	ori	r20, 0x56	; 86
     236:	62 72       	andi	r22, 0x22	; 34
     238:	75 61       	ori	r23, 0x15	; 21
     23a:	72 79       	andi	r23, 0x92	; 146
     23c:	20 4d       	sbci	r18, 0xD0	; 208
     23e:	61 72       	andi	r22, 0x21	; 33
     240:	63 68       	ori	r22, 0x83	; 131
     242:	20 41       	sbci	r18, 0x10	; 16
     244:	70 72       	andi	r23, 0x20	; 32
     246:	69 6c       	ori	r22, 0xC9	; 201
     248:	20 4d       	sbci	r18, 0xD0	; 208
     24a:	61 79       	andi	r22, 0x91	; 145
     24c:	20 4a       	sbci	r18, 0xA0	; 160
     24e:	75 6e       	ori	r23, 0xE5	; 229
     250:	65 20       	and	r6, r5
     252:	4a 75       	andi	r20, 0x5A	; 90
     254:	6c 79       	andi	r22, 0x9C	; 156
     256:	20 41       	sbci	r18, 0x10	; 16
     258:	75 67       	ori	r23, 0x75	; 117
     25a:	75 73       	andi	r23, 0x35	; 53
     25c:	74 20       	and	r7, r4
     25e:	53 65       	ori	r21, 0x53	; 83
     260:	70 74       	andi	r23, 0x40	; 64
     262:	65 6d       	ori	r22, 0xD5	; 213
     264:	62 65       	ori	r22, 0x52	; 82
     266:	72 20       	and	r7, r2
     268:	4f 63       	ori	r20, 0x3F	; 63
     26a:	74 6f       	ori	r23, 0xF4	; 244
     26c:	62 65       	ori	r22, 0x52	; 82
     26e:	72 20       	and	r7, r2
     270:	4e 6f       	ori	r20, 0xFE	; 254
     272:	76 65       	ori	r23, 0x56	; 86
     274:	6d 62       	ori	r22, 0x2D	; 45
     276:	65 72       	andi	r22, 0x25	; 37
     278:	20 44       	sbci	r18, 0x40	; 64
     27a:	65 63       	ori	r22, 0x35	; 53
     27c:	65 6d       	ori	r22, 0xD5	; 213
     27e:	62 65       	ori	r22, 0x52	; 82
     280:	72 20       	and	r7, r2
	...

00000283 <strfwkdays>:
     283:	53 75 6e 64 61 79 20 4d 6f 6e 64 61 79 20 54 75     Sunday Monday Tu
     293:	65 73 64 61 79 20 57 65 64 6e 65 73 64 61 79 20     esday Wednesday 
     2a3:	54 68 75 72 73 64 61 79 20 46 72 69 64 61 79 20     Thursday Friday 
     2b3:	53 61 74 75 72 64 61 79 20 00                       Saturday .

000002bd <ascdays>:
     2bd:	53 75 6e 4d 6f 6e 54 75 65 57 65 64 54 68 75 46     SunMonTueWedThuF
     2cd:	72 69 53 61 74 00                                   riSat.

000002d3 <ascmonths>:
     2d3:	4a 61 6e 46 65 62 4d 61 72 41 70 72 4d 61 79 4a     JanFebMarAprMayJ
     2e3:	75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f     unJulAugSepOctNo
     2f3:	76 44 65 63 00                                      vDec.

000002f8 <__ctors_start>:
     2f8:	8d 27       	eor	r24, r29
     2fa:	7f 28       	or	r7, r15

000002fc <__ctors_end>:
     2fc:	94 27       	eor	r25, r20
     2fe:	86 28       	or	r8, r6

00000300 <__dtors_end>:
     300:	11 24       	eor	r1, r1
     302:	1f be       	out	0x3f, r1	; 63
     304:	cf ef       	ldi	r28, 0xFF	; 255
     306:	cd bf       	out	0x3d, r28	; 61
     308:	df e7       	ldi	r29, 0x7F	; 127
     30a:	de bf       	out	0x3e, r29	; 62

0000030c <__do_copy_data>:
     30c:	15 e4       	ldi	r17, 0x45	; 69
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b0 e4       	ldi	r27, 0x40	; 64
     312:	ea e1       	ldi	r30, 0x1A	; 26
     314:	fb e9       	ldi	r31, 0x9B	; 155
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0b bf       	out	0x3b, r16	; 59
     31a:	02 c0       	rjmp	.+4      	; 0x320 <__do_copy_data+0x14>
     31c:	07 90       	elpm	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	ae 33       	cpi	r26, 0x3E	; 62
     322:	b1 07       	cpc	r27, r17
     324:	d9 f7       	brne	.-10     	; 0x31c <__do_copy_data+0x10>

00000326 <__do_clear_bss>:
     326:	29 e4       	ldi	r18, 0x49	; 73
     328:	ae e3       	ldi	r26, 0x3E	; 62
     32a:	b5 e4       	ldi	r27, 0x45	; 69
     32c:	01 c0       	rjmp	.+2      	; 0x330 <.do_clear_bss_start>

0000032e <.do_clear_bss_loop>:
     32e:	1d 92       	st	X+, r1

00000330 <.do_clear_bss_start>:
     330:	a3 35       	cpi	r26, 0x53	; 83
     332:	b2 07       	cpc	r27, r18
     334:	e1 f7       	brne	.-8      	; 0x32e <.do_clear_bss_loop>

00000336 <__do_global_ctors>:
     336:	11 e0       	ldi	r17, 0x01	; 1
     338:	ce e7       	ldi	r28, 0x7E	; 126
     33a:	d1 e0       	ldi	r29, 0x01	; 1
     33c:	04 c0       	rjmp	.+8      	; 0x346 <__do_global_ctors+0x10>
     33e:	21 97       	sbiw	r28, 0x01	; 1
     340:	fe 01       	movw	r30, r28
     342:	0e 94 87 48 	call	0x910e	; 0x910e <__tablejump2__>
     346:	cc 37       	cpi	r28, 0x7C	; 124
     348:	d1 07       	cpc	r29, r17
     34a:	c9 f7       	brne	.-14     	; 0x33e <__do_global_ctors+0x8>
     34c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <main>
     350:	0c 94 80 4d 	jmp	0x9b00	; 0x9b00 <__do_global_dtors>

00000354 <__bad_interrupt>:
     354:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000358 <is_leap_year>:
     358:	9c 01       	movw	r18, r24
     35a:	23 70       	andi	r18, 0x03	; 3
     35c:	33 27       	eor	r19, r19
     35e:	23 2b       	or	r18, r19
     360:	59 f4       	brne	.+22     	; 0x378 <is_leap_year+0x20>
     362:	64 e6       	ldi	r22, 0x64	; 100
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     36a:	89 2b       	or	r24, r25
     36c:	39 f4       	brne	.+14     	; 0x37c <is_leap_year+0x24>
     36e:	63 70       	andi	r22, 0x03	; 3
     370:	77 27       	eor	r23, r23
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	67 2b       	or	r22, r23
     376:	19 f0       	breq	.+6      	; 0x37e <is_leap_year+0x26>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	08 95       	ret
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	08 95       	ret

00000380 <localtime>:
     380:	61 e4       	ldi	r22, 0x41	; 65
     382:	79 e4       	ldi	r23, 0x49	; 73
     384:	0e 94 c7 01 	call	0x38e	; 0x38e <localtime_r>
     388:	81 e4       	ldi	r24, 0x41	; 65
     38a:	99 e4       	ldi	r25, 0x49	; 73
     38c:	08 95       	ret

0000038e <localtime_r>:
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <localtime_r+0x12>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <localtime_r+0x14>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	6c 01       	movw	r12, r24
     3a8:	7b 01       	movw	r14, r22
     3aa:	e0 91 51 49 	lds	r30, 0x4951	; 0x804951 <__dst_ptr>
     3ae:	f0 91 52 49 	lds	r31, 0x4952	; 0x804952 <__dst_ptr+0x1>
     3b2:	30 97       	sbiw	r30, 0x00	; 0
     3b4:	29 f0       	breq	.+10     	; 0x3c0 <localtime_r+0x32>
     3b6:	6d e4       	ldi	r22, 0x4D	; 77
     3b8:	79 e4       	ldi	r23, 0x49	; 73
     3ba:	09 95       	icall
     3bc:	8c 01       	movw	r16, r24
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <localtime_r+0x36>
     3c0:	0f ef       	ldi	r16, 0xFF	; 255
     3c2:	1f ef       	ldi	r17, 0xFF	; 255
     3c4:	f6 01       	movw	r30, r12
     3c6:	40 81       	ld	r20, Z
     3c8:	51 81       	ldd	r21, Z+1	; 0x01
     3ca:	62 81       	ldd	r22, Z+2	; 0x02
     3cc:	73 81       	ldd	r23, Z+3	; 0x03
     3ce:	80 91 4d 49 	lds	r24, 0x494D	; 0x80494d <__utc_offset>
     3d2:	90 91 4e 49 	lds	r25, 0x494E	; 0x80494e <__utc_offset+0x1>
     3d6:	a0 91 4f 49 	lds	r26, 0x494F	; 0x80494f <__utc_offset+0x2>
     3da:	b0 91 50 49 	lds	r27, 0x4950	; 0x804950 <__utc_offset+0x3>
     3de:	84 0f       	add	r24, r20
     3e0:	95 1f       	adc	r25, r21
     3e2:	a6 1f       	adc	r26, r22
     3e4:	b7 1f       	adc	r27, r23
     3e6:	10 16       	cp	r1, r16
     3e8:	11 06       	cpc	r1, r17
     3ea:	4c f4       	brge	.+18     	; 0x3fe <localtime_r+0x70>
     3ec:	a8 01       	movw	r20, r16
     3ee:	01 2e       	mov	r0, r17
     3f0:	00 0c       	add	r0, r0
     3f2:	66 0b       	sbc	r22, r22
     3f4:	77 0b       	sbc	r23, r23
     3f6:	84 0f       	add	r24, r20
     3f8:	95 1f       	adc	r25, r21
     3fa:	a6 1f       	adc	r26, r22
     3fc:	b7 1f       	adc	r27, r23
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	9a 83       	std	Y+2, r25	; 0x02
     402:	ab 83       	std	Y+3, r26	; 0x03
     404:	bc 83       	std	Y+4, r27	; 0x04
     406:	b7 01       	movw	r22, r14
     408:	ce 01       	movw	r24, r28
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gmtime_r>
     410:	f7 01       	movw	r30, r14
     412:	02 87       	std	Z+10, r16	; 0x0a
     414:	13 87       	std	Z+11, r17	; 0x0b
     416:	24 96       	adiw	r28, 0x04	; 4
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	08 95       	ret

0000042e <month_length>:
     42e:	62 30       	cpi	r22, 0x02	; 2
     430:	21 f4       	brne	.+8      	; 0x43a <month_length+0xc>
     432:	0e 94 ac 01 	call	0x358	; 0x358 <is_leap_year>
     436:	84 5e       	subi	r24, 0xE4	; 228
     438:	08 95       	ret
     43a:	68 30       	cpi	r22, 0x08	; 8
     43c:	08 f0       	brcs	.+2      	; 0x440 <month_length+0x12>
     43e:	6f 5f       	subi	r22, 0xFF	; 255
     440:	61 70       	andi	r22, 0x01	; 1
     442:	8e e1       	ldi	r24, 0x1E	; 30
     444:	86 0f       	add	r24, r22
     446:	08 95       	ret

00000448 <set_system_time>:
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	60 93 3d 49 	sts	0x493D, r22	; 0x80493d <__system_time>
     450:	70 93 3e 49 	sts	0x493E, r23	; 0x80493e <__system_time+0x1>
     454:	80 93 3f 49 	sts	0x493F, r24	; 0x80493f <__system_time+0x2>
     458:	90 93 40 49 	sts	0x4940, r25	; 0x804940 <__system_time+0x3>
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	08 95       	ret

00000460 <pgm_copystring>:
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	0f 93       	push	r16
     468:	6b 01       	movw	r12, r22
     46a:	e8 2e       	mov	r14, r24
     46c:	7c 2d       	mov	r23, r12
     46e:	6d 2d       	mov	r22, r13
     470:	5e 2d       	mov	r21, r14
     472:	ae 2d       	mov	r26, r14
     474:	c6 01       	movw	r24, r12
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	a1 1d       	adc	r26, r1
     47a:	44 23       	and	r20, r20
     47c:	51 f0       	breq	.+20     	; 0x492 <pgm_copystring+0x32>
     47e:	6c 01       	movw	r12, r24
     480:	ea 2e       	mov	r14, r26
     482:	e7 2f       	mov	r30, r23
     484:	f6 2f       	mov	r31, r22
     486:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <__xload_1>
     48a:	60 32       	cpi	r22, 0x20	; 32
     48c:	79 f7       	brne	.-34     	; 0x46c <pgm_copystring+0xc>
     48e:	41 50       	subi	r20, 0x01	; 1
     490:	ed cf       	rjmp	.-38     	; 0x46c <pgm_copystring+0xc>
     492:	f6 01       	movw	r30, r12
     494:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <__xload_1>
     498:	6c 01       	movw	r12, r24
     49a:	ea 2e       	mov	r14, r26
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	60 32       	cpi	r22, 0x20	; 32
     4a0:	39 f4       	brne	.+14     	; 0x4b0 <pgm_copystring+0x50>
     4a2:	f9 01       	movw	r30, r18
     4a4:	10 82       	st	Z, r1
     4a6:	0f 91       	pop	r16
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	08 95       	ret
     4b0:	80 17       	cp	r24, r16
     4b2:	b9 f3       	breq	.-18     	; 0x4a2 <pgm_copystring+0x42>
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	f9 01       	movw	r30, r18
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	60 83       	st	Z, r22
     4be:	8f 5f       	subi	r24, 0xFF	; 255
     4c0:	f6 01       	movw	r30, r12
     4c2:	5e 2d       	mov	r21, r14
     4c4:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <__xload_1>
     4c8:	9f ef       	ldi	r25, 0xFF	; 255
     4ca:	c9 1a       	sub	r12, r25
     4cc:	d9 0a       	sbc	r13, r25
     4ce:	e9 0a       	sbc	r14, r25
     4d0:	e6 cf       	rjmp	.-52     	; 0x49e <pgm_copystring+0x3e>

000004d2 <strftime>:
     4d2:	2f 92       	push	r2
     4d4:	3f 92       	push	r3
     4d6:	4f 92       	push	r4
     4d8:	5f 92       	push	r5
     4da:	6f 92       	push	r6
     4dc:	7f 92       	push	r7
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	a2 97       	sbiw	r28, 0x22	; 34
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	2c 01       	movw	r4, r24
     502:	69 a3       	std	Y+33, r22	; 0x21
     504:	7a a3       	std	Y+34, r23	; 0x22
     506:	4a 01       	movw	r8, r20
     508:	79 01       	movw	r14, r18
     50a:	61 2c       	mov	r6, r1
     50c:	71 2c       	mov	r7, r1
     50e:	9e 01       	movw	r18, r28
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	3f 4f       	sbci	r19, 0xFF	; 255
     514:	69 01       	movw	r12, r18
     516:	84 e6       	ldi	r24, 0x64	; 100
     518:	28 2e       	mov	r2, r24
     51a:	31 2c       	mov	r3, r1
     51c:	90 ee       	ldi	r25, 0xE0	; 224
     51e:	a9 2e       	mov	r10, r25
     520:	94 e4       	ldi	r25, 0x44	; 68
     522:	b9 2e       	mov	r11, r25
     524:	29 a1       	ldd	r18, Y+33	; 0x21
     526:	3a a1       	ldd	r19, Y+34	; 0x22
     528:	62 16       	cp	r6, r18
     52a:	73 06       	cpc	r7, r19
     52c:	08 f0       	brcs	.+2      	; 0x530 <strftime+0x5e>
     52e:	cd c2       	rjmp	.+1434   	; 0xaca <strftime+0x5f8>
     530:	d4 01       	movw	r26, r8
     532:	8c 91       	ld	r24, X
     534:	85 32       	cpi	r24, 0x25	; 37
     536:	09 f0       	breq	.+2      	; 0x53a <strftime+0x68>
     538:	bc c2       	rjmp	.+1400   	; 0xab2 <strftime+0x5e0>
     53a:	11 96       	adiw	r26, 0x01	; 1
     53c:	1c 91       	ld	r17, X
     53e:	15 34       	cpi	r17, 0x45	; 69
     540:	31 f0       	breq	.+12     	; 0x54e <strftime+0x7c>
     542:	1f 34       	cpi	r17, 0x4F	; 79
     544:	21 f0       	breq	.+8      	; 0x54e <strftime+0x7c>
     546:	b2 e0       	ldi	r27, 0x02	; 2
     548:	8b 0e       	add	r8, r27
     54a:	91 1c       	adc	r9, r1
     54c:	06 c0       	rjmp	.+12     	; 0x55a <strftime+0x88>
     54e:	f4 01       	movw	r30, r8
     550:	12 81       	ldd	r17, Z+2	; 0x02
     552:	94 01       	movw	r18, r8
     554:	2d 5f       	subi	r18, 0xFD	; 253
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	49 01       	movw	r8, r18
     55a:	19 35       	cpi	r17, 0x59	; 89
     55c:	09 f4       	brne	.+2      	; 0x560 <strftime+0x8e>
     55e:	32 c2       	rjmp	.+1124   	; 0x9c4 <strftime+0x4f2>
     560:	0c f0       	brlt	.+2      	; 0x564 <strftime+0x92>
     562:	60 c0       	rjmp	.+192    	; 0x624 <strftime+0x152>
     564:	19 34       	cpi	r17, 0x49	; 73
     566:	09 f4       	brne	.+2      	; 0x56a <strftime+0x98>
     568:	3f c1       	rjmp	.+638    	; 0x7e8 <strftime+0x316>
     56a:	44 f5       	brge	.+80     	; 0x5bc <strftime+0xea>
     56c:	13 34       	cpi	r17, 0x43	; 67
     56e:	09 f4       	brne	.+2      	; 0x572 <strftime+0xa0>
     570:	e7 c0       	rjmp	.+462    	; 0x740 <strftime+0x26e>
     572:	54 f4       	brge	.+20     	; 0x588 <strftime+0xb6>
     574:	11 34       	cpi	r17, 0x41	; 65
     576:	09 f4       	brne	.+2      	; 0x57a <strftime+0xa8>
     578:	be c0       	rjmp	.+380    	; 0x6f6 <strftime+0x224>
     57a:	0c f0       	brlt	.+2      	; 0x57e <strftime+0xac>
     57c:	ca c0       	rjmp	.+404    	; 0x712 <strftime+0x240>
     57e:	15 32       	cpi	r17, 0x25	; 37
     580:	09 f0       	breq	.+2      	; 0x584 <strftime+0xb2>
     582:	74 c2       	rjmp	.+1256   	; 0xa6c <strftime+0x59a>
     584:	19 83       	std	Y+1, r17	; 0x01
     586:	75 c2       	rjmp	.+1258   	; 0xa72 <strftime+0x5a0>
     588:	16 34       	cpi	r17, 0x46	; 70
     58a:	09 f4       	brne	.+2      	; 0x58e <strftime+0xbc>
     58c:	ea c0       	rjmp	.+468    	; 0x762 <strftime+0x290>
     58e:	64 f4       	brge	.+24     	; 0x5a8 <strftime+0xd6>
     590:	14 34       	cpi	r17, 0x44	; 68
     592:	09 f0       	breq	.+2      	; 0x596 <strftime+0xc4>
     594:	6b c2       	rjmp	.+1238   	; 0xa6c <strftime+0x59a>
     596:	f7 01       	movw	r30, r14
     598:	86 81       	ldd	r24, Z+6	; 0x06
     59a:	97 81       	ldd	r25, Z+7	; 0x07
     59c:	b1 01       	movw	r22, r2
     59e:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	e7 c1       	rjmp	.+974    	; 0x976 <strftime+0x4a4>
     5a8:	17 34       	cpi	r17, 0x47	; 71
     5aa:	09 f4       	brne	.+2      	; 0x5ae <strftime+0xdc>
     5ac:	f8 c0       	rjmp	.+496    	; 0x79e <strftime+0x2cc>
     5ae:	18 34       	cpi	r17, 0x48	; 72
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <strftime+0xe2>
     5b2:	5c c2       	rjmp	.+1208   	; 0xa6c <strftime+0x59a>
     5b4:	d7 01       	movw	r26, r14
     5b6:	12 96       	adiw	r26, 0x02	; 2
     5b8:	8c 91       	ld	r24, X
     5ba:	30 c1       	rjmp	.+608    	; 0x81c <strftime+0x34a>
     5bc:	14 35       	cpi	r17, 0x54	; 84
     5be:	09 f4       	brne	.+2      	; 0x5c2 <strftime+0xf0>
     5c0:	89 c1       	rjmp	.+786    	; 0x8d4 <strftime+0x402>
     5c2:	64 f4       	brge	.+24     	; 0x5dc <strftime+0x10a>
     5c4:	12 35       	cpi	r17, 0x52	; 82
     5c6:	09 f4       	brne	.+2      	; 0x5ca <strftime+0xf8>
     5c8:	6e c1       	rjmp	.+732    	; 0x8a6 <strftime+0x3d4>
     5ca:	0c f0       	brlt	.+2      	; 0x5ce <strftime+0xfc>
     5cc:	25 c1       	rjmp	.+586    	; 0x818 <strftime+0x346>
     5ce:	1d 34       	cpi	r17, 0x4D	; 77
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <strftime+0x102>
     5d2:	4c c2       	rjmp	.+1176   	; 0xa6c <strftime+0x59a>
     5d4:	d7 01       	movw	r26, r14
     5d6:	11 96       	adiw	r26, 0x01	; 1
     5d8:	8c 91       	ld	r24, X
     5da:	20 c1       	rjmp	.+576    	; 0x81c <strftime+0x34a>
     5dc:	16 35       	cpi	r17, 0x56	; 86
     5de:	09 f4       	brne	.+2      	; 0x5e2 <strftime+0x110>
     5e0:	a5 c1       	rjmp	.+842    	; 0x92c <strftime+0x45a>
     5e2:	0c f4       	brge	.+2      	; 0x5e6 <strftime+0x114>
     5e4:	a1 c1       	rjmp	.+834    	; 0x928 <strftime+0x456>
     5e6:	17 35       	cpi	r17, 0x57	; 87
     5e8:	09 f4       	brne	.+2      	; 0x5ec <strftime+0x11a>
     5ea:	b4 c1       	rjmp	.+872    	; 0x954 <strftime+0x482>
     5ec:	18 35       	cpi	r17, 0x58	; 88
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <strftime+0x120>
     5f0:	3d c2       	rjmp	.+1146   	; 0xa6c <strftime+0x59a>
     5f2:	f7 01       	movw	r30, r14
     5f4:	80 81       	ld	r24, Z
     5f6:	28 2f       	mov	r18, r24
     5f8:	08 2e       	mov	r0, r24
     5fa:	00 0c       	add	r0, r0
     5fc:	33 0b       	sbc	r19, r19
     5fe:	3f 93       	push	r19
     600:	8f 93       	push	r24
     602:	81 81       	ldd	r24, Z+1	; 0x01
     604:	28 2f       	mov	r18, r24
     606:	08 2e       	mov	r0, r24
     608:	00 0c       	add	r0, r0
     60a:	33 0b       	sbc	r19, r19
     60c:	3f 93       	push	r19
     60e:	8f 93       	push	r24
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	28 2f       	mov	r18, r24
     614:	08 2e       	mov	r0, r24
     616:	00 0c       	add	r0, r0
     618:	33 0b       	sbc	r19, r19
     61a:	3f 93       	push	r19
     61c:	8f 93       	push	r24
     61e:	85 e2       	ldi	r24, 0x25	; 37
     620:	95 e4       	ldi	r25, 0x45	; 69
     622:	c0 c1       	rjmp	.+896    	; 0x9a4 <strftime+0x4d2>
     624:	1d 36       	cpi	r17, 0x6D	; 109
     626:	09 f4       	brne	.+2      	; 0x62a <strftime+0x158>
     628:	f0 c0       	rjmp	.+480    	; 0x80a <strftime+0x338>
     62a:	ac f5       	brge	.+106    	; 0x696 <strftime+0x1c4>
     62c:	14 36       	cpi	r17, 0x64	; 100
     62e:	09 f4       	brne	.+2      	; 0x632 <strftime+0x160>
     630:	94 c0       	rjmp	.+296    	; 0x75a <strftime+0x288>
     632:	74 f4       	brge	.+28     	; 0x650 <strftime+0x17e>
     634:	12 36       	cpi	r17, 0x62	; 98
     636:	09 f4       	brne	.+2      	; 0x63a <strftime+0x168>
     638:	66 c0       	rjmp	.+204    	; 0x706 <strftime+0x234>
     63a:	0c f0       	brlt	.+2      	; 0x63e <strftime+0x16c>
     63c:	75 c0       	rjmp	.+234    	; 0x728 <strftime+0x256>
     63e:	11 36       	cpi	r17, 0x61	; 97
     640:	09 f0       	breq	.+2      	; 0x644 <strftime+0x172>
     642:	14 c2       	rjmp	.+1064   	; 0xa6c <strftime+0x59a>
     644:	03 e0       	ldi	r16, 0x03	; 3
     646:	96 01       	movw	r18, r12
     648:	d7 01       	movw	r26, r14
     64a:	14 96       	adiw	r26, 0x04	; 4
     64c:	4c 91       	ld	r20, X
     64e:	57 c0       	rjmp	.+174    	; 0x6fe <strftime+0x22c>
     650:	17 36       	cpi	r17, 0x67	; 103
     652:	09 f4       	brne	.+2      	; 0x656 <strftime+0x184>
     654:	a4 c0       	rjmp	.+328    	; 0x79e <strftime+0x2cc>
     656:	74 f4       	brge	.+28     	; 0x674 <strftime+0x1a2>
     658:	15 36       	cpi	r17, 0x65	; 101
     65a:	09 f0       	breq	.+2      	; 0x65e <strftime+0x18c>
     65c:	07 c2       	rjmp	.+1038   	; 0xa6c <strftime+0x59a>
     65e:	f7 01       	movw	r30, r14
     660:	83 81       	ldd	r24, Z+3	; 0x03
     662:	28 2f       	mov	r18, r24
     664:	08 2e       	mov	r0, r24
     666:	00 0c       	add	r0, r0
     668:	33 0b       	sbc	r19, r19
     66a:	3f 93       	push	r19
     66c:	8f 93       	push	r24
     66e:	85 ee       	ldi	r24, 0xE5	; 229
     670:	94 e4       	ldi	r25, 0x44	; 68
     672:	c8 c0       	rjmp	.+400    	; 0x804 <strftime+0x332>
     674:	18 36       	cpi	r17, 0x68	; 104
     676:	09 f4       	brne	.+2      	; 0x67a <strftime+0x1a8>
     678:	46 c0       	rjmp	.+140    	; 0x706 <strftime+0x234>
     67a:	1a 36       	cpi	r17, 0x6A	; 106
     67c:	09 f0       	breq	.+2      	; 0x680 <strftime+0x1ae>
     67e:	f6 c1       	rjmp	.+1004   	; 0xa6c <strftime+0x59a>
     680:	d7 01       	movw	r26, r14
     682:	18 96       	adiw	r26, 0x08	; 8
     684:	8d 91       	ld	r24, X+
     686:	9c 91       	ld	r25, X
     688:	19 97       	sbiw	r26, 0x09	; 9
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	8b ef       	ldi	r24, 0xFB	; 251
     692:	94 e4       	ldi	r25, 0x44	; 68
     694:	b7 c0       	rjmp	.+366    	; 0x804 <strftime+0x332>
     696:	15 37       	cpi	r17, 0x75	; 117
     698:	09 f4       	brne	.+2      	; 0x69c <strftime+0x1ca>
     69a:	35 c1       	rjmp	.+618    	; 0x906 <strftime+0x434>
     69c:	b4 f4       	brge	.+44     	; 0x6ca <strftime+0x1f8>
     69e:	10 37       	cpi	r17, 0x70	; 112
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <strftime+0x1d2>
     6a2:	c2 c0       	rjmp	.+388    	; 0x828 <strftime+0x356>
     6a4:	34 f4       	brge	.+12     	; 0x6b2 <strftime+0x1e0>
     6a6:	1e 36       	cpi	r17, 0x6E	; 110
     6a8:	09 f0       	breq	.+2      	; 0x6ac <strftime+0x1da>
     6aa:	e0 c1       	rjmp	.+960    	; 0xa6c <strftime+0x59a>
     6ac:	8a e0       	ldi	r24, 0x0A	; 10
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	e0 c1       	rjmp	.+960    	; 0xa72 <strftime+0x5a0>
     6b2:	12 37       	cpi	r17, 0x72	; 114
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <strftime+0x1e6>
     6b6:	c6 c0       	rjmp	.+396    	; 0x844 <strftime+0x372>
     6b8:	14 37       	cpi	r17, 0x74	; 116
     6ba:	09 f0       	breq	.+2      	; 0x6be <strftime+0x1ec>
     6bc:	d7 c1       	rjmp	.+942    	; 0xa6c <strftime+0x59a>
     6be:	61 e1       	ldi	r22, 0x11	; 17
     6c0:	75 e4       	ldi	r23, 0x45	; 69
     6c2:	c6 01       	movw	r24, r12
     6c4:	0e 94 32 4a 	call	0x9464	; 0x9464 <strcpy>
     6c8:	d4 c1       	rjmp	.+936    	; 0xa72 <strftime+0x5a0>
     6ca:	18 37       	cpi	r17, 0x78	; 120
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <strftime+0x1fe>
     6ce:	48 c1       	rjmp	.+656    	; 0x960 <strftime+0x48e>
     6d0:	5c f4       	brge	.+22     	; 0x6e8 <strftime+0x216>
     6d2:	17 37       	cpi	r17, 0x77	; 119
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <strftime+0x206>
     6d6:	ca c1       	rjmp	.+916    	; 0xa6c <strftime+0x59a>
     6d8:	f7 01       	movw	r30, r14
     6da:	84 81       	ldd	r24, Z+4	; 0x04
     6dc:	28 2f       	mov	r18, r24
     6de:	08 2e       	mov	r0, r24
     6e0:	00 0c       	add	r0, r0
     6e2:	33 0b       	sbc	r19, r19
     6e4:	3f 93       	push	r19
     6e6:	74 c1       	rjmp	.+744    	; 0x9d0 <strftime+0x4fe>
     6e8:	19 37       	cpi	r17, 0x79	; 121
     6ea:	09 f4       	brne	.+2      	; 0x6ee <strftime+0x21c>
     6ec:	5e c1       	rjmp	.+700    	; 0x9aa <strftime+0x4d8>
     6ee:	1a 37       	cpi	r17, 0x7A	; 122
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <strftime+0x222>
     6f2:	7e c1       	rjmp	.+764    	; 0x9f0 <strftime+0x51e>
     6f4:	bb c1       	rjmp	.+886    	; 0xa6c <strftime+0x59a>
     6f6:	0f ef       	ldi	r16, 0xFF	; 255
     6f8:	96 01       	movw	r18, r12
     6fa:	f7 01       	movw	r30, r14
     6fc:	44 81       	ldd	r20, Z+4	; 0x04
     6fe:	63 e8       	ldi	r22, 0x83	; 131
     700:	72 e0       	ldi	r23, 0x02	; 2
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0d c0       	rjmp	.+26     	; 0x720 <strftime+0x24e>
     706:	03 e0       	ldi	r16, 0x03	; 3
     708:	96 01       	movw	r18, r12
     70a:	d7 01       	movw	r26, r14
     70c:	15 96       	adiw	r26, 0x05	; 5
     70e:	4c 91       	ld	r20, X
     710:	04 c0       	rjmp	.+8      	; 0x71a <strftime+0x248>
     712:	0f ef       	ldi	r16, 0xFF	; 255
     714:	96 01       	movw	r18, r12
     716:	f7 01       	movw	r30, r14
     718:	45 81       	ldd	r20, Z+5	; 0x05
     71a:	6c e2       	ldi	r22, 0x2C	; 44
     71c:	72 e0       	ldi	r23, 0x02	; 2
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 30 02 	call	0x460	; 0x460 <pgm_copystring>
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	a7 c1       	rjmp	.+846    	; 0xa76 <strftime+0x5a4>
     728:	b6 01       	movw	r22, r12
     72a:	c7 01       	movw	r24, r14
     72c:	0e 94 cc 05 	call	0xb98	; 0xb98 <asctime_r>
     730:	f6 01       	movw	r30, r12
     732:	cf 01       	movw	r24, r30
     734:	8c 19       	sub	r24, r12
     736:	9d 09       	sbc	r25, r13
     738:	21 91       	ld	r18, Z+
     73a:	21 11       	cpse	r18, r1
     73c:	fa cf       	rjmp	.-12     	; 0x732 <strftime+0x260>
     73e:	9b c1       	rjmp	.+822    	; 0xa76 <strftime+0x5a4>
     740:	d7 01       	movw	r26, r14
     742:	16 96       	adiw	r26, 0x06	; 6
     744:	8d 91       	ld	r24, X+
     746:	9c 91       	ld	r25, X
     748:	17 97       	sbiw	r26, 0x07	; 7
     74a:	84 59       	subi	r24, 0x94	; 148
     74c:	98 4f       	sbci	r25, 0xF8	; 248
     74e:	b1 01       	movw	r22, r2
     750:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     754:	7f 93       	push	r23
     756:	6f 93       	push	r22
     758:	3b c0       	rjmp	.+118    	; 0x7d0 <strftime+0x2fe>
     75a:	d7 01       	movw	r26, r14
     75c:	13 96       	adiw	r26, 0x03	; 3
     75e:	8c 91       	ld	r24, X
     760:	5d c0       	rjmp	.+186    	; 0x81c <strftime+0x34a>
     762:	d7 01       	movw	r26, r14
     764:	13 96       	adiw	r26, 0x03	; 3
     766:	8c 91       	ld	r24, X
     768:	13 97       	sbiw	r26, 0x03	; 3
     76a:	28 2f       	mov	r18, r24
     76c:	08 2e       	mov	r0, r24
     76e:	00 0c       	add	r0, r0
     770:	33 0b       	sbc	r19, r19
     772:	3f 93       	push	r19
     774:	8f 93       	push	r24
     776:	15 96       	adiw	r26, 0x05	; 5
     778:	8c 91       	ld	r24, X
     77a:	15 97       	sbiw	r26, 0x05	; 5
     77c:	08 2e       	mov	r0, r24
     77e:	00 0c       	add	r0, r0
     780:	99 0b       	sbc	r25, r25
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	16 96       	adiw	r26, 0x06	; 6
     78a:	8d 91       	ld	r24, X+
     78c:	9c 91       	ld	r25, X
     78e:	17 97       	sbiw	r26, 0x07	; 7
     790:	84 59       	subi	r24, 0x94	; 148
     792:	98 4f       	sbci	r25, 0xF8	; 248
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	89 ee       	ldi	r24, 0xE9	; 233
     79a:	94 e4       	ldi	r25, 0x44	; 68
     79c:	03 c1       	rjmp	.+518    	; 0x9a4 <strftime+0x4d2>
     79e:	d7 01       	movw	r26, r14
     7a0:	18 96       	adiw	r26, 0x08	; 8
     7a2:	6d 91       	ld	r22, X+
     7a4:	7c 91       	ld	r23, X
     7a6:	19 97       	sbiw	r26, 0x09	; 9
     7a8:	16 96       	adiw	r26, 0x06	; 6
     7aa:	8d 91       	ld	r24, X+
     7ac:	9c 91       	ld	r25, X
     7ae:	17 97       	sbiw	r26, 0x07	; 7
     7b0:	ae 01       	movw	r20, r28
     7b2:	45 5e       	subi	r20, 0xE5	; 229
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	84 59       	subi	r24, 0x94	; 148
     7b8:	98 4f       	sbci	r25, 0xF8	; 248
     7ba:	0e 94 25 07 	call	0xe4a	; 0xe4a <iso_week_date_r>
     7be:	17 36       	cpi	r17, 0x67	; 103
     7c0:	51 f4       	brne	.+20     	; 0x7d6 <strftime+0x304>
     7c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7c6:	b1 01       	movw	r22, r2
     7c8:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     7cc:	9f 93       	push	r25
     7ce:	8f 93       	push	r24
     7d0:	e1 ef       	ldi	r30, 0xF1	; 241
     7d2:	f4 e4       	ldi	r31, 0x44	; 68
     7d4:	a6 c0       	rjmp	.+332    	; 0x922 <strftime+0x450>
     7d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7d8:	8f 93       	push	r24
     7da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7dc:	8f 93       	push	r24
     7de:	46 ef       	ldi	r20, 0xF6	; 246
     7e0:	54 e4       	ldi	r21, 0x44	; 68
     7e2:	5f 93       	push	r21
     7e4:	4f 93       	push	r20
     7e6:	f9 c0       	rjmp	.+498    	; 0x9da <strftime+0x508>
     7e8:	f7 01       	movw	r30, r14
     7ea:	82 81       	ldd	r24, Z+2	; 0x02
     7ec:	6c e0       	ldi	r22, 0x0C	; 12
     7ee:	0e 94 5f 4d 	call	0x9abe	; 0x9abe <__divmodqi4>
     7f2:	99 23       	and	r25, r25
     7f4:	21 f0       	breq	.+8      	; 0x7fe <strftime+0x32c>
     7f6:	89 2f       	mov	r24, r25
     7f8:	99 0f       	add	r25, r25
     7fa:	99 0b       	sbc	r25, r25
     7fc:	de c0       	rjmp	.+444    	; 0x9ba <strftime+0x4e8>
     7fe:	8c e0       	ldi	r24, 0x0C	; 12
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	db c0       	rjmp	.+438    	; 0x9ba <strftime+0x4e8>
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	e8 c0       	rjmp	.+464    	; 0x9da <strftime+0x508>
     80a:	f7 01       	movw	r30, r14
     80c:	85 81       	ldd	r24, Z+5	; 0x05
     80e:	08 2e       	mov	r0, r24
     810:	00 0c       	add	r0, r0
     812:	99 0b       	sbc	r25, r25
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	d1 c0       	rjmp	.+418    	; 0x9ba <strftime+0x4e8>
     818:	d7 01       	movw	r26, r14
     81a:	8c 91       	ld	r24, X
     81c:	28 2f       	mov	r18, r24
     81e:	08 2e       	mov	r0, r24
     820:	00 0c       	add	r0, r0
     822:	33 0b       	sbc	r19, r19
     824:	3f 93       	push	r19
     826:	ca c0       	rjmp	.+404    	; 0x9bc <strftime+0x4ea>
     828:	81 e4       	ldi	r24, 0x41	; 65
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	f7 01       	movw	r30, r14
     82e:	82 81       	ldd	r24, Z+2	; 0x02
     830:	8c 30       	cpi	r24, 0x0C	; 12
     832:	14 f0       	brlt	.+4      	; 0x838 <strftime+0x366>
     834:	80 e5       	ldi	r24, 0x50	; 80
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	8d e4       	ldi	r24, 0x4D	; 77
     83a:	8a 83       	std	Y+2, r24	; 0x02
     83c:	1b 82       	std	Y+3, r1	; 0x03
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	19 c1       	rjmp	.+562    	; 0xa76 <strftime+0x5a4>
     844:	d7 01       	movw	r26, r14
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	8c 91       	ld	r24, X
     84a:	6c e0       	ldi	r22, 0x0C	; 12
     84c:	0e 94 5f 4d 	call	0x9abe	; 0x9abe <__divmodqi4>
     850:	99 23       	and	r25, r25
     852:	21 f0       	breq	.+8      	; 0x85c <strftime+0x38a>
     854:	89 2f       	mov	r24, r25
     856:	99 0f       	add	r25, r25
     858:	99 0b       	sbc	r25, r25
     85a:	02 c0       	rjmp	.+4      	; 0x860 <strftime+0x38e>
     85c:	8c e0       	ldi	r24, 0x0C	; 12
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	f7 01       	movw	r30, r14
     862:	20 81       	ld	r18, Z
     864:	42 2f       	mov	r20, r18
     866:	02 2e       	mov	r0, r18
     868:	00 0c       	add	r0, r0
     86a:	55 0b       	sbc	r21, r21
     86c:	5f 93       	push	r21
     86e:	2f 93       	push	r18
     870:	21 81       	ldd	r18, Z+1	; 0x01
     872:	42 2f       	mov	r20, r18
     874:	02 2e       	mov	r0, r18
     876:	00 0c       	add	r0, r0
     878:	55 0b       	sbc	r21, r21
     87a:	5f 93       	push	r21
     87c:	2f 93       	push	r18
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	35 e4       	ldi	r19, 0x45	; 69
     886:	3f 93       	push	r19
     888:	2f 93       	push	r18
     88a:	df 92       	push	r13
     88c:	cf 92       	push	r12
     88e:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
     892:	cd bf       	out	0x3d, r28	; 61
     894:	de bf       	out	0x3e, r29	; 62
     896:	f7 01       	movw	r30, r14
     898:	22 81       	ldd	r18, Z+2	; 0x02
     89a:	2c 30       	cpi	r18, 0x0C	; 12
     89c:	0c f4       	brge	.+2      	; 0x8a0 <strftime+0x3ce>
     89e:	eb c0       	rjmp	.+470    	; 0xa76 <strftime+0x5a4>
     8a0:	20 e5       	ldi	r18, 0x50	; 80
     8a2:	2b 87       	std	Y+11, r18	; 0x0b
     8a4:	e8 c0       	rjmp	.+464    	; 0xa76 <strftime+0x5a4>
     8a6:	d7 01       	movw	r26, r14
     8a8:	11 96       	adiw	r26, 0x01	; 1
     8aa:	8c 91       	ld	r24, X
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	28 2f       	mov	r18, r24
     8b0:	08 2e       	mov	r0, r24
     8b2:	00 0c       	add	r0, r0
     8b4:	33 0b       	sbc	r19, r19
     8b6:	3f 93       	push	r19
     8b8:	8f 93       	push	r24
     8ba:	12 96       	adiw	r26, 0x02	; 2
     8bc:	8c 91       	ld	r24, X
     8be:	28 2f       	mov	r18, r24
     8c0:	08 2e       	mov	r0, r24
     8c2:	00 0c       	add	r0, r0
     8c4:	33 0b       	sbc	r19, r19
     8c6:	3f 93       	push	r19
     8c8:	8f 93       	push	r24
     8ca:	88 e1       	ldi	r24, 0x18	; 24
     8cc:	95 e4       	ldi	r25, 0x45	; 69
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	c5 c0       	rjmp	.+394    	; 0xa5e <strftime+0x58c>
     8d4:	f7 01       	movw	r30, r14
     8d6:	80 81       	ld	r24, Z
     8d8:	28 2f       	mov	r18, r24
     8da:	08 2e       	mov	r0, r24
     8dc:	00 0c       	add	r0, r0
     8de:	33 0b       	sbc	r19, r19
     8e0:	3f 93       	push	r19
     8e2:	8f 93       	push	r24
     8e4:	81 81       	ldd	r24, Z+1	; 0x01
     8e6:	28 2f       	mov	r18, r24
     8e8:	08 2e       	mov	r0, r24
     8ea:	00 0c       	add	r0, r0
     8ec:	33 0b       	sbc	r19, r19
     8ee:	3f 93       	push	r19
     8f0:	8f 93       	push	r24
     8f2:	82 81       	ldd	r24, Z+2	; 0x02
     8f4:	28 2f       	mov	r18, r24
     8f6:	08 2e       	mov	r0, r24
     8f8:	00 0c       	add	r0, r0
     8fa:	33 0b       	sbc	r19, r19
     8fc:	3f 93       	push	r19
     8fe:	8f 93       	push	r24
     900:	83 e1       	ldi	r24, 0x13	; 19
     902:	95 e4       	ldi	r25, 0x45	; 69
     904:	4f c0       	rjmp	.+158    	; 0x9a4 <strftime+0x4d2>
     906:	d7 01       	movw	r26, r14
     908:	14 96       	adiw	r26, 0x04	; 4
     90a:	8c 91       	ld	r24, X
     90c:	08 2e       	mov	r0, r24
     90e:	00 0c       	add	r0, r0
     910:	99 0b       	sbc	r25, r25
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	11 f4       	brne	.+4      	; 0x91a <strftime+0x448>
     916:	87 e0       	ldi	r24, 0x07	; 7
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	e2 e2       	ldi	r30, 0x22	; 34
     920:	f5 e4       	ldi	r31, 0x45	; 69
     922:	ff 93       	push	r31
     924:	ef 93       	push	r30
     926:	59 c0       	rjmp	.+178    	; 0x9da <strftime+0x508>
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	15 c0       	rjmp	.+42     	; 0x956 <strftime+0x484>
     92c:	d7 01       	movw	r26, r14
     92e:	18 96       	adiw	r26, 0x08	; 8
     930:	6d 91       	ld	r22, X+
     932:	7c 91       	ld	r23, X
     934:	19 97       	sbiw	r26, 0x09	; 9
     936:	16 96       	adiw	r26, 0x06	; 6
     938:	8d 91       	ld	r24, X+
     93a:	9c 91       	ld	r25, X
     93c:	17 97       	sbiw	r26, 0x07	; 7
     93e:	ae 01       	movw	r20, r28
     940:	45 5e       	subi	r20, 0xE5	; 229
     942:	5f 4f       	sbci	r21, 0xFF	; 255
     944:	84 59       	subi	r24, 0x94	; 148
     946:	98 4f       	sbci	r25, 0xF8	; 248
     948:	0e 94 25 07 	call	0xe4a	; 0xe4a <iso_week_date_r>
     94c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     94e:	8f 93       	push	r24
     950:	8d 8d       	ldd	r24, Y+29	; 0x1d
     952:	34 c0       	rjmp	.+104    	; 0x9bc <strftime+0x4ea>
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	c7 01       	movw	r24, r14
     958:	0e 94 91 05 	call	0xb22	; 0xb22 <week_of_year>
     95c:	1f 92       	push	r1
     95e:	2e c0       	rjmp	.+92     	; 0x9bc <strftime+0x4ea>
     960:	d7 01       	movw	r26, r14
     962:	16 96       	adiw	r26, 0x06	; 6
     964:	8d 91       	ld	r24, X+
     966:	9c 91       	ld	r25, X
     968:	17 97       	sbiw	r26, 0x07	; 7
     96a:	b1 01       	movw	r22, r2
     96c:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	f7 01       	movw	r30, r14
     976:	83 81       	ldd	r24, Z+3	; 0x03
     978:	28 2f       	mov	r18, r24
     97a:	08 2e       	mov	r0, r24
     97c:	00 0c       	add	r0, r0
     97e:	33 0b       	sbc	r19, r19
     980:	3f 93       	push	r19
     982:	8f 93       	push	r24
     984:	85 81       	ldd	r24, Z+5	; 0x05
     986:	08 2e       	mov	r0, r24
     988:	00 0c       	add	r0, r0
     98a:	99 0b       	sbc	r25, r25
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	9f 93       	push	r25
     990:	8f 93       	push	r24
     992:	26 ed       	ldi	r18, 0xD6	; 214
     994:	34 e4       	ldi	r19, 0x44	; 68
     996:	3f 93       	push	r19
     998:	2f 93       	push	r18
     99a:	df 92       	push	r13
     99c:	cf 92       	push	r12
     99e:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
     9a2:	61 c0       	rjmp	.+194    	; 0xa66 <strftime+0x594>
     9a4:	9f 93       	push	r25
     9a6:	8f 93       	push	r24
     9a8:	f8 cf       	rjmp	.-16     	; 0x99a <strftime+0x4c8>
     9aa:	d7 01       	movw	r26, r14
     9ac:	16 96       	adiw	r26, 0x06	; 6
     9ae:	8d 91       	ld	r24, X+
     9b0:	9c 91       	ld	r25, X
     9b2:	17 97       	sbiw	r26, 0x07	; 7
     9b4:	b1 01       	movw	r22, r2
     9b6:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	bf 92       	push	r11
     9c0:	af 92       	push	r10
     9c2:	0b c0       	rjmp	.+22     	; 0x9da <strftime+0x508>
     9c4:	f7 01       	movw	r30, r14
     9c6:	86 81       	ldd	r24, Z+6	; 0x06
     9c8:	97 81       	ldd	r25, Z+7	; 0x07
     9ca:	84 59       	subi	r24, 0x94	; 148
     9cc:	98 4f       	sbci	r25, 0xF8	; 248
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	27 ec       	ldi	r18, 0xC7	; 199
     9d4:	34 e4       	ldi	r19, 0x44	; 68
     9d6:	3f 93       	push	r19
     9d8:	2f 93       	push	r18
     9da:	df 92       	push	r13
     9dc:	cf 92       	push	r12
     9de:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	43 c0       	rjmp	.+134    	; 0xa76 <strftime+0x5a4>
     9f0:	60 91 4d 49 	lds	r22, 0x494D	; 0x80494d <__utc_offset>
     9f4:	70 91 4e 49 	lds	r23, 0x494E	; 0x80494e <__utc_offset+0x1>
     9f8:	80 91 4f 49 	lds	r24, 0x494F	; 0x80494f <__utc_offset+0x2>
     9fc:	90 91 50 49 	lds	r25, 0x4950	; 0x804950 <__utc_offset+0x3>
     a00:	2c e3       	ldi	r18, 0x3C	; 60
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	0e 94 68 48 	call	0x90d0	; 0x90d0 <__divmodsi4>
     a0c:	89 01       	movw	r16, r18
     a0e:	9a 01       	movw	r18, r20
     a10:	f8 01       	movw	r30, r16
     a12:	d7 01       	movw	r26, r14
     a14:	1a 96       	adiw	r26, 0x0a	; 10
     a16:	8d 91       	ld	r24, X+
     a18:	9c 91       	ld	r25, X
     a1a:	1b 97       	sbiw	r26, 0x0b	; 11
     a1c:	6c e3       	ldi	r22, 0x3C	; 60
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     a24:	16 16       	cp	r1, r22
     a26:	17 06       	cpc	r1, r23
     a28:	1c f4       	brge	.+6      	; 0xa30 <strftime+0x55e>
     a2a:	fb 01       	movw	r30, r22
     a2c:	e0 0f       	add	r30, r16
     a2e:	f1 1f       	adc	r31, r17
     a30:	cf 01       	movw	r24, r30
     a32:	6c e3       	ldi	r22, 0x3C	; 60
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     a3a:	97 ff       	sbrs	r25, 7
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <strftime+0x572>
     a3e:	91 95       	neg	r25
     a40:	81 95       	neg	r24
     a42:	91 09       	sbc	r25, r1
     a44:	9f 93       	push	r25
     a46:	8f 93       	push	r24
     a48:	cf 01       	movw	r24, r30
     a4a:	6c e3       	ldi	r22, 0x3C	; 60
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     a52:	7f 93       	push	r23
     a54:	6f 93       	push	r22
     a56:	e4 e3       	ldi	r30, 0x34	; 52
     a58:	f5 e4       	ldi	r31, 0x45	; 69
     a5a:	ff 93       	push	r31
     a5c:	ef 93       	push	r30
     a5e:	df 92       	push	r13
     a60:	cf 92       	push	r12
     a62:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <strftime+0x5a4>
     a6c:	8f e3       	ldi	r24, 0x3F	; 63
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	1a 82       	std	Y+2, r1	; 0x02
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	93 01       	movw	r18, r6
     a78:	28 0f       	add	r18, r24
     a7a:	39 1f       	adc	r19, r25
     a7c:	a9 a1       	ldd	r26, Y+33	; 0x21
     a7e:	ba a1       	ldd	r27, Y+34	; 0x22
     a80:	2a 17       	cp	r18, r26
     a82:	3b 07       	cpc	r19, r27
     a84:	98 f4       	brcc	.+38     	; 0xaac <strftime+0x5da>
     a86:	d2 01       	movw	r26, r4
     a88:	f6 01       	movw	r30, r12
     a8a:	af 01       	movw	r20, r30
     a8c:	4c 19       	sub	r20, r12
     a8e:	5d 09       	sbc	r21, r13
     a90:	48 17       	cp	r20, r24
     a92:	59 07       	cpc	r21, r25
     a94:	1c f4       	brge	.+6      	; 0xa9c <strftime+0x5ca>
     a96:	41 91       	ld	r20, Z+
     a98:	4d 93       	st	X+, r20
     a9a:	f7 cf       	rjmp	.-18     	; 0xa8a <strftime+0x5b8>
     a9c:	97 ff       	sbrs	r25, 7
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <strftime+0x5d2>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	48 0e       	add	r4, r24
     aa6:	59 1e       	adc	r5, r25
     aa8:	39 01       	movw	r6, r18
     aaa:	3c cd       	rjmp	.-1416   	; 0x524 <strftime+0x52>
     aac:	f2 01       	movw	r30, r4
     aae:	10 82       	st	Z, r1
     ab0:	0e c0       	rjmp	.+28     	; 0xace <strftime+0x5fc>
     ab2:	d2 01       	movw	r26, r4
     ab4:	8d 93       	st	X+, r24
     ab6:	2d 01       	movw	r4, r26
     ab8:	bf ef       	ldi	r27, 0xFF	; 255
     aba:	6b 1a       	sub	r6, r27
     abc:	7b 0a       	sbc	r7, r27
     abe:	88 23       	and	r24, r24
     ac0:	31 f0       	breq	.+12     	; 0xace <strftime+0x5fc>
     ac2:	ef ef       	ldi	r30, 0xFF	; 255
     ac4:	8e 1a       	sub	r8, r30
     ac6:	9e 0a       	sbc	r9, r30
     ac8:	2d cd       	rjmp	.-1446   	; 0x524 <strftime+0x52>
     aca:	d2 01       	movw	r26, r4
     acc:	1c 92       	st	X, r1
     ace:	c3 01       	movw	r24, r6
     ad0:	a2 96       	adiw	r28, 0x22	; 34
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	9f 90       	pop	r9
     aec:	8f 90       	pop	r8
     aee:	7f 90       	pop	r7
     af0:	6f 90       	pop	r6
     af2:	5f 90       	pop	r5
     af4:	4f 90       	pop	r4
     af6:	3f 90       	pop	r3
     af8:	2f 90       	pop	r2
     afa:	08 95       	ret

00000afc <time>:
     afc:	fc 01       	movw	r30, r24
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	60 91 3d 49 	lds	r22, 0x493D	; 0x80493d <__system_time>
     b06:	70 91 3e 49 	lds	r23, 0x493E	; 0x80493e <__system_time+0x1>
     b0a:	80 91 3f 49 	lds	r24, 0x493F	; 0x80493f <__system_time+0x2>
     b0e:	90 91 40 49 	lds	r25, 0x4940	; 0x804940 <__system_time+0x3>
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	30 97       	sbiw	r30, 0x00	; 0
     b16:	21 f0       	breq	.+8      	; 0xb20 <time+0x24>
     b18:	60 83       	st	Z, r22
     b1a:	71 83       	std	Z+1, r23	; 0x01
     b1c:	82 83       	std	Z+2, r24	; 0x02
     b1e:	93 83       	std	Z+3, r25	; 0x03
     b20:	08 95       	ret

00000b22 <week_of_year>:
     b22:	fc 01       	movw	r30, r24
     b24:	20 85       	ldd	r18, Z+8	; 0x08
     b26:	31 85       	ldd	r19, Z+9	; 0x09
     b28:	c9 01       	movw	r24, r18
     b2a:	07 96       	adiw	r24, 0x07	; 7
     b2c:	44 81       	ldd	r20, Z+4	; 0x04
     b2e:	84 1b       	sub	r24, r20
     b30:	91 09       	sbc	r25, r1
     b32:	47 fd       	sbrc	r20, 7
     b34:	93 95       	inc	r25
     b36:	86 0f       	add	r24, r22
     b38:	91 1d       	adc	r25, r1
     b3a:	e7 e0       	ldi	r30, 0x07	; 7
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	bf 01       	movw	r22, r30
     b40:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     b44:	a9 01       	movw	r20, r18
     b46:	48 1b       	sub	r20, r24
     b48:	59 0b       	sbc	r21, r25
     b4a:	ca 01       	movw	r24, r20
     b4c:	57 fd       	sbrc	r21, 7
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <week_of_year+0x3a>
     b50:	bf 01       	movw	r22, r30
     b52:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	86 0f       	add	r24, r22
     b5a:	08 95       	ret
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 95       	ret

00000b60 <system_tick>:
     b60:	8f 93       	push	r24
     b62:	8f b7       	in	r24, 0x3f	; 63
     b64:	8f 93       	push	r24
     b66:	f8 94       	cli
     b68:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <__system_time>
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	80 93 3d 49 	sts	0x493D, r24	; 0x80493d <__system_time>
     b72:	80 91 3e 49 	lds	r24, 0x493E	; 0x80493e <__system_time+0x1>
     b76:	8f 4f       	sbci	r24, 0xFF	; 255
     b78:	80 93 3e 49 	sts	0x493E, r24	; 0x80493e <__system_time+0x1>
     b7c:	80 91 3f 49 	lds	r24, 0x493F	; 0x80493f <__system_time+0x2>
     b80:	8f 4f       	sbci	r24, 0xFF	; 255
     b82:	80 93 3f 49 	sts	0x493F, r24	; 0x80493f <__system_time+0x2>
     b86:	80 91 40 49 	lds	r24, 0x4940	; 0x804940 <__system_time+0x3>
     b8a:	8f 4f       	sbci	r24, 0xFF	; 255
     b8c:	80 93 40 49 	sts	0x4940, r24	; 0x804940 <__system_time+0x3>
     b90:	8f 91       	pop	r24
     b92:	8f bf       	out	0x3f, r24	; 63
     b94:	8f 91       	pop	r24
     b96:	08 95       	ret

00000b98 <asctime_r>:
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	8c 01       	movw	r16, r24
     baa:	eb 01       	movw	r28, r22
     bac:	fc 01       	movw	r30, r24
     bae:	84 81       	ldd	r24, Z+4	; 0x04
     bb0:	b8 2f       	mov	r27, r24
     bb2:	bb 0f       	add	r27, r27
     bb4:	b8 0f       	add	r27, r24
     bb6:	85 81       	ldd	r24, Z+5	; 0x05
     bb8:	78 2f       	mov	r23, r24
     bba:	77 0f       	add	r23, r23
     bbc:	78 0f       	add	r23, r24
     bbe:	9e 01       	movw	r18, r28
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	8b 2f       	mov	r24, r27
     bc4:	84 0f       	add	r24, r20
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	83 54       	subi	r24, 0x43	; 67
     bcc:	9d 4f       	sbci	r25, 0xFD	; 253
     bce:	af 4f       	sbci	r26, 0xFF	; 255
     bd0:	fc 01       	movw	r30, r24
     bd2:	5a 2f       	mov	r21, r26
     bd4:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <__xload_1>
     bd8:	f9 01       	movw	r30, r18
     bda:	61 93       	st	Z+, r22
     bdc:	9f 01       	movw	r18, r30
     bde:	87 2f       	mov	r24, r23
     be0:	84 0f       	add	r24, r20
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	8d 52       	subi	r24, 0x2D	; 45
     be8:	9d 4f       	sbci	r25, 0xFD	; 253
     bea:	af 4f       	sbci	r26, 0xFF	; 255
     bec:	fc 01       	movw	r30, r24
     bee:	5a 2f       	mov	r21, r26
     bf0:	0e 94 6d 4d 	call	0x9ada	; 0x9ada <__xload_1>
     bf4:	f9 01       	movw	r30, r18
     bf6:	63 83       	std	Z+3, r22	; 0x03
     bf8:	4f 5f       	subi	r20, 0xFF	; 255
     bfa:	43 30       	cpi	r20, 0x03	; 3
     bfc:	11 f7       	brne	.-60     	; 0xbc2 <asctime_r+0x2a>
     bfe:	80 e2       	ldi	r24, 0x20	; 32
     c00:	8f 83       	std	Y+7, r24	; 0x07
     c02:	8b 83       	std	Y+3, r24	; 0x03
     c04:	be 01       	movw	r22, r28
     c06:	68 5f       	subi	r22, 0xF8	; 248
     c08:	7f 4f       	sbci	r23, 0xFF	; 255
     c0a:	f8 01       	movw	r30, r16
     c0c:	83 81       	ldd	r24, Z+3	; 0x03
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	08 2e       	mov	r0, r24
     c12:	00 0c       	add	r0, r0
     c14:	99 0b       	sbc	r25, r25
     c16:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c1a:	be 01       	movw	r22, r28
     c1c:	65 5f       	subi	r22, 0xF5	; 245
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	f8 01       	movw	r30, r16
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	4a e3       	ldi	r20, 0x3A	; 58
     c26:	08 2e       	mov	r0, r24
     c28:	00 0c       	add	r0, r0
     c2a:	99 0b       	sbc	r25, r25
     c2c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c30:	be 01       	movw	r22, r28
     c32:	62 5f       	subi	r22, 0xF2	; 242
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	f8 01       	movw	r30, r16
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	4a e3       	ldi	r20, 0x3A	; 58
     c3c:	08 2e       	mov	r0, r24
     c3e:	00 0c       	add	r0, r0
     c40:	99 0b       	sbc	r25, r25
     c42:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c46:	be 01       	movw	r22, r28
     c48:	6f 5e       	subi	r22, 0xEF	; 239
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	f8 01       	movw	r30, r16
     c4e:	80 81       	ld	r24, Z
     c50:	40 e2       	ldi	r20, 0x20	; 32
     c52:	08 2e       	mov	r0, r24
     c54:	00 0c       	add	r0, r0
     c56:	99 0b       	sbc	r25, r25
     c58:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c5c:	f8 01       	movw	r30, r16
     c5e:	86 81       	ldd	r24, Z+6	; 0x06
     c60:	97 81       	ldd	r25, Z+7	; 0x07
     c62:	64 e6       	ldi	r22, 0x64	; 100
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	84 59       	subi	r24, 0x94	; 148
     c68:	98 4f       	sbci	r25, 0xF8	; 248
     c6a:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     c6e:	6b 01       	movw	r12, r22
     c70:	7c 01       	movw	r14, r24
     c72:	be 01       	movw	r22, r28
     c74:	6c 5e       	subi	r22, 0xEC	; 236
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	40 e2       	ldi	r20, 0x20	; 32
     c7a:	c6 01       	movw	r24, r12
     c7c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c80:	be 01       	movw	r22, r28
     c82:	6a 5e       	subi	r22, 0xEA	; 234
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	c7 01       	movw	r24, r14
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__print_lz>

00000c9e <gmtime_r>:
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	28 97       	sbiw	r28, 0x08	; 8
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	8b 01       	movw	r16, r22
     cba:	fc 01       	movw	r30, r24
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	20 e8       	ldi	r18, 0x80	; 128
     cc6:	31 e5       	ldi	r19, 0x51	; 81
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
     cd0:	69 01       	movw	r12, r18
     cd2:	7a 01       	movw	r14, r20
     cd4:	2c e3       	ldi	r18, 0x3C	; 60
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	0e 94 68 48 	call	0x90d0	; 0x90d0 <__divmodsi4>
     ce0:	29 83       	std	Y+1, r18	; 0x01
     ce2:	3a 83       	std	Y+2, r19	; 0x02
     ce4:	4b 83       	std	Y+3, r20	; 0x03
     ce6:	5c 83       	std	Y+4, r21	; 0x04
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	ab 81       	ldd	r26, Y+3	; 0x03
     cee:	bc 81       	ldd	r27, Y+4	; 0x04
     cf0:	f8 01       	movw	r30, r16
     cf2:	60 83       	st	Z, r22
     cf4:	6c e3       	ldi	r22, 0x3C	; 60
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	f8 01       	movw	r30, r16
     d02:	a1 83       	std	Z+1, r26	; 0x01
     d04:	82 83       	std	Z+2, r24	; 0x02
     d06:	c6 01       	movw	r24, r12
     d08:	06 96       	adiw	r24, 0x06	; 6
     d0a:	67 e0       	ldi	r22, 0x07	; 7
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	0e 94 1e 48 	call	0x903c	; 0x903c <__udivmodhi4>
     d12:	84 83       	std	Z+4, r24	; 0x04
     d14:	2d ea       	ldi	r18, 0xAD	; 173
     d16:	3e e8       	ldi	r19, 0x8E	; 142
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	c7 01       	movw	r24, r14
     d1e:	b6 01       	movw	r22, r12
     d20:	0e 94 68 48 	call	0x90d0	; 0x90d0 <__divmodsi4>
     d24:	29 83       	std	Y+1, r18	; 0x01
     d26:	3a 83       	std	Y+2, r19	; 0x02
     d28:	6d 83       	std	Y+5, r22	; 0x05
     d2a:	7e 83       	std	Y+6, r23	; 0x06
     d2c:	8f 83       	std	Y+7, r24	; 0x07
     d2e:	98 87       	std	Y+8, r25	; 0x08
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	24 e6       	ldi	r18, 0x64	; 100
     d36:	28 9f       	mul	r18, r24
     d38:	60 01       	movw	r12, r0
     d3a:	29 9f       	mul	r18, r25
     d3c:	d0 0c       	add	r13, r0
     d3e:	11 24       	eor	r1, r1
     d40:	6d 81       	ldd	r22, Y+5	; 0x05
     d42:	7e 81       	ldd	r23, Y+6	; 0x06
     d44:	8f 81       	ldd	r24, Y+7	; 0x07
     d46:	98 85       	ldd	r25, Y+8	; 0x08
     d48:	25 eb       	ldi	r18, 0xB5	; 181
     d4a:	35 e0       	ldi	r19, 0x05	; 5
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 68 48 	call	0x90d0	; 0x90d0 <__divmodsi4>
     d54:	29 83       	std	Y+1, r18	; 0x01
     d56:	3a 83       	std	Y+2, r19	; 0x02
     d58:	6d 83       	std	Y+5, r22	; 0x05
     d5a:	7e 83       	std	Y+6, r23	; 0x06
     d5c:	e9 80       	ldd	r14, Y+1	; 0x01
     d5e:	fa 80       	ldd	r15, Y+2	; 0x02
     d60:	ee 0c       	add	r14, r14
     d62:	ff 1c       	adc	r15, r15
     d64:	ee 0c       	add	r14, r14
     d66:	ff 1c       	adc	r15, r15
     d68:	ec 0c       	add	r14, r12
     d6a:	fd 1c       	adc	r15, r13
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	f5 e6       	ldi	r31, 0x65	; 101
     d72:	ef 16       	cp	r14, r31
     d74:	f1 04       	cpc	r15, r1
     d76:	10 f0       	brcs	.+4      	; 0xd7c <gmtime_r+0xde>
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <gmtime_r+0xe6>
     d7c:	24 e6       	ldi	r18, 0x64	; 100
     d7e:	e2 16       	cp	r14, r18
     d80:	f1 04       	cpc	r15, r1
     d82:	19 f0       	breq	.+6      	; 0xd8a <gmtime_r+0xec>
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <gmtime_r+0xf0>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	a9 01       	movw	r20, r18
     d90:	44 59       	subi	r20, 0x94	; 148
     d92:	5e 4f       	sbci	r21, 0xFE	; 254
     d94:	48 17       	cp	r20, r24
     d96:	59 07       	cpc	r21, r25
     d98:	68 f4       	brcc	.+26     	; 0xdb4 <gmtime_r+0x116>
     d9a:	6d e6       	ldi	r22, 0x6D	; 109
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	82 1b       	sub	r24, r18
     da0:	93 0b       	sbc	r25, r19
     da2:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	cd 01       	movw	r24, r26
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	44 e6       	ldi	r20, 0x64	; 100
     db6:	e4 0e       	add	r14, r20
     db8:	f1 1c       	adc	r15, r1
     dba:	f8 01       	movw	r30, r16
     dbc:	e6 82       	std	Z+6, r14	; 0x06
     dbe:	f7 82       	std	Z+7, r15	; 0x07
     dc0:	80 87       	std	Z+8, r24	; 0x08
     dc2:	91 87       	std	Z+9, r25	; 0x09
     dc4:	25 5c       	subi	r18, 0xC5	; 197
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	82 17       	cp	r24, r18
     dca:	93 07       	cpc	r25, r19
     dcc:	48 f4       	brcc	.+18     	; 0xde0 <gmtime_r+0x142>
     dce:	6f e1       	ldi	r22, 0x1F	; 31
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	f8 01       	movw	r30, r16
     ddc:	85 83       	std	Z+5, r24	; 0x05
     dde:	22 c0       	rjmp	.+68     	; 0xe24 <gmtime_r+0x186>
     de0:	69 e9       	ldi	r22, 0x99	; 153
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	82 1b       	sub	r24, r18
     de6:	93 0b       	sbc	r25, r19
     de8:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	f8 2e       	mov	r15, r24
     df2:	ff 0c       	add	r15, r15
     df4:	ff 0c       	add	r15, r15
     df6:	f8 0e       	add	r15, r24
     df8:	6d e3       	ldi	r22, 0x3D	; 61
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	e8 2e       	mov	r14, r24
     e08:	ee 0c       	add	r14, r14
     e0a:	6f e1       	ldi	r22, 0x1F	; 31
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	22 e0       	ldi	r18, 0x02	; 2
     e1a:	28 0f       	add	r18, r24
     e1c:	f2 0e       	add	r15, r18
     e1e:	fe 0c       	add	r15, r14
     e20:	f8 01       	movw	r30, r16
     e22:	f5 82       	std	Z+5, r15	; 0x05
     e24:	a3 83       	std	Z+3, r26	; 0x03
     e26:	f8 01       	movw	r30, r16
     e28:	12 86       	std	Z+10, r1	; 0x0a
     e2a:	13 86       	std	Z+11, r1	; 0x0b
     e2c:	83 81       	ldd	r24, Z+3	; 0x03
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	83 83       	std	Z+3, r24	; 0x03
     e32:	28 96       	adiw	r28, 0x08	; 8
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	08 95       	ret

00000e4a <iso_week_date_r>:
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	8c 01       	movw	r16, r24
     e5c:	7b 01       	movw	r14, r22
     e5e:	ea 01       	movw	r28, r20
     e60:	88 83       	st	Y, r24
     e62:	99 83       	std	Y+1, r25	; 0x01
     e64:	0e 94 ac 01 	call	0x358	; 0x358 <is_leap_year>
     e68:	28 2f       	mov	r18, r24
     e6a:	a8 01       	movw	r20, r16
     e6c:	40 5d       	subi	r20, 0xD0	; 208
     e6e:	57 40       	sbci	r21, 0x07	; 7
     e70:	6d e6       	ldi	r22, 0x6D	; 109
     e72:	71 e0       	ldi	r23, 0x01	; 1
     e74:	46 9f       	mul	r20, r22
     e76:	c0 01       	movw	r24, r0
     e78:	47 9f       	mul	r20, r23
     e7a:	90 0d       	add	r25, r0
     e7c:	56 9f       	mul	r21, r22
     e7e:	90 0d       	add	r25, r0
     e80:	11 24       	eor	r1, r1
     e82:	8e 0d       	add	r24, r14
     e84:	9f 1d       	adc	r25, r15
     e86:	41 15       	cp	r20, r1
     e88:	51 05       	cpc	r21, r1
     e8a:	79 f0       	breq	.+30     	; 0xeaa <iso_week_date_r+0x60>
     e8c:	ba 01       	movw	r22, r20
     e8e:	76 95       	lsr	r23
     e90:	67 95       	ror	r22
     e92:	76 95       	lsr	r23
     e94:	67 95       	ror	r22
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	86 0f       	add	r24, r22
     e9c:	97 1f       	adc	r25, r23
     e9e:	82 1b       	sub	r24, r18
     ea0:	91 09       	sbc	r25, r1
     ea2:	45 36       	cpi	r20, 0x65	; 101
     ea4:	51 05       	cpc	r21, r1
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <iso_week_date_r+0x60>
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	06 96       	adiw	r24, 0x06	; 6
     eac:	67 e0       	ldi	r22, 0x07	; 7
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	0e 94 1e 48 	call	0x903c	; 0x903c <__udivmodhi4>
     eb4:	6c 01       	movw	r12, r24
     eb6:	89 2b       	or	r24, r25
     eb8:	19 f4       	brne	.+6      	; 0xec0 <iso_week_date_r+0x76>
     eba:	87 e0       	ldi	r24, 0x07	; 7
     ebc:	c8 2e       	mov	r12, r24
     ebe:	d1 2c       	mov	r13, r1
     ec0:	cc 82       	std	Y+4, r12	; 0x04
     ec2:	dd 82       	std	Y+5, r13	; 0x05
     ec4:	c7 01       	movw	r24, r14
     ec6:	0b 96       	adiw	r24, 0x0b	; 11
     ec8:	8c 19       	sub	r24, r12
     eca:	9d 09       	sbc	r25, r13
     ecc:	67 e0       	ldi	r22, 0x07	; 7
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     ed4:	65 33       	cpi	r22, 0x35	; 53
     ed6:	71 05       	cpc	r23, r1
     ed8:	b1 f4       	brne	.+44     	; 0xf06 <iso_week_date_r+0xbc>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	c8 1a       	sub	r12, r24
     ede:	d1 08       	sbc	r13, r1
     ee0:	ec 18       	sub	r14, r12
     ee2:	fd 08       	sbc	r15, r13
     ee4:	82 2f       	mov	r24, r18
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	84 59       	subi	r24, 0x94	; 148
     eea:	9e 4f       	sbci	r25, 0xFE	; 254
     eec:	23 e0       	ldi	r18, 0x03	; 3
     eee:	e2 0e       	add	r14, r18
     ef0:	f1 1c       	adc	r15, r1
     ef2:	8e 15       	cp	r24, r14
     ef4:	9f 05       	cpc	r25, r15
     ef6:	3c f4       	brge	.+14     	; 0xf06 <iso_week_date_r+0xbc>
     ef8:	88 81       	ld	r24, Y
     efa:	99 81       	ldd	r25, Y+1	; 0x01
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	88 83       	st	Y, r24
     f00:	99 83       	std	Y+1, r25	; 0x01
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	6a 83       	std	Y+2, r22	; 0x02
     f08:	7b 83       	std	Y+3, r23	; 0x03
     f0a:	67 2b       	or	r22, r23
     f0c:	79 f4       	brne	.+30     	; 0xf2c <iso_week_date_r+0xe2>
     f0e:	01 50       	subi	r16, 0x01	; 1
     f10:	11 09       	sbc	r17, r1
     f12:	c8 01       	movw	r24, r16
     f14:	0e 94 ac 01 	call	0x358	; 0x358 <is_leap_year>
     f18:	68 2f       	mov	r22, r24
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	64 59       	subi	r22, 0x94	; 148
     f1e:	7e 4f       	sbci	r23, 0xFE	; 254
     f20:	ae 01       	movw	r20, r28
     f22:	c8 01       	movw	r24, r16
     f24:	0e 94 25 07 	call	0xe4a	; 0xe4a <iso_week_date_r>
     f28:	cc 82       	std	Y+4, r12	; 0x04
     f2a:	dd 82       	std	Y+5, r13	; 0x05
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	08 95       	ret

00000f3e <__print_lz>:
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	eb 01       	movw	r28, r22
     f46:	14 2f       	mov	r17, r20
     f48:	6a e0       	ldi	r22, 0x0A	; 10
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
     f50:	60 5d       	subi	r22, 0xD0	; 208
     f52:	68 83       	st	Y, r22
     f54:	80 5d       	subi	r24, 0xD0	; 208
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	1a 83       	std	Y+2, r17	; 0x02
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	08 95       	ret

00000f62 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     f62:	0e 94 2e 2a 	call	0x545c	; 0x545c <system_init>
     f66:	08 95       	ret

00000f68 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     f74:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     f78:	80 ff       	sbrs	r24, 0
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     f82:	8f 91       	pop	r24
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static BOOL receiving_msg = FALSE;

	if(!buff)
     f96:	80 91 93 45 	lds	r24, 0x4593	; 0x804593 <_ZZ9serial_RxhE4buff>
     f9a:	90 91 94 45 	lds	r25, 0x4594	; 0x804594 <_ZZ9serial_RxhE4buff+0x1>
     f9e:	89 2b       	or	r24, r25
     fa0:	31 f4       	brne	.+12     	; 0xfae <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
     fa2:	0e 94 a1 39 	call	0x7342	; 0x7342 <nextEmptySBRxBuffer>
     fa6:	80 93 93 45 	sts	0x4593, r24	; 0x804593 <_ZZ9serial_RxhE4buff>
     faa:	90 93 94 45 	sts	0x4594, r25	; 0x804594 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
     fae:	c0 91 93 45 	lds	r28, 0x4593	; 0x804593 <_ZZ9serial_RxhE4buff>
     fb2:	d0 91 94 45 	lds	r29, 0x4594	; 0x804594 <_ZZ9serial_RxhE4buff+0x1>
     fb6:	20 97       	sbiw	r28, 0x00	; 0
     fb8:	09 f4       	brne	.+2      	; 0xfbc <_Z9serial_Rxh+0x2e>
     fba:	73 c1       	rjmp	.+742    	; 0x12a2 <_Z9serial_Rxh+0x314>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
     fbc:	81 2f       	mov	r24, r17
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 1f 4a 	call	0x943e	; 0x943e <toupper>
     fc4:	ac 01       	movw	r20, r24
     fc6:	28 2f       	mov	r18, r24

		if(ignoreCount)
     fc8:	90 91 92 45 	lds	r25, 0x4592	; 0x804592 <_ZZ9serial_RxhE11ignoreCount>
     fcc:	99 23       	and	r25, r25
     fce:	21 f0       	breq	.+8      	; 0xfd8 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
     fd0:	91 50       	subi	r25, 0x01	; 1
     fd2:	90 93 92 45 	sts	0x4592, r25	; 0x804592 <_ZZ9serial_RxhE11ignoreCount>
     fd6:	65 c1       	rjmp	.+714    	; 0x12a2 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
     fd8:	4b 31       	cpi	r20, 0x1B	; 27
     fda:	21 f4       	brne	.+8      	; 0xfe4 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	80 93 92 45 	sts	0x4592, r24	; 0x804592 <_ZZ9serial_RxhE11ignoreCount>
     fe2:	5f c1       	rjmp	.+702    	; 0x12a2 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     fe4:	4d 30       	cpi	r20, 0x0D	; 13
     fe6:	09 f0       	breq	.+2      	; 0xfea <_Z9serial_Rxh+0x5c>
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <_Z9serial_Rxh+0xda>
		{
			if(receiving_msg)
     fea:	80 91 5e 45 	lds	r24, 0x455E	; 0x80455e <_ZZ9serial_RxhE13receiving_msg>
     fee:	88 23       	and	r24, r24
     ff0:	31 f1       	breq	.+76     	; 0x103e <_Z9serial_Rxh+0xb0>
			{
				if(charIndex > 0)
     ff2:	e0 91 91 45 	lds	r30, 0x4591	; 0x804591 <_ZZ9serial_RxhE9charIndex>
     ff6:	ee 23       	and	r30, r30
     ff8:	f9 f0       	breq	.+62     	; 0x1038 <_Z9serial_Rxh+0xaa>
				{
					buff->type = SERIALBUS_MSG_QUERY;
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
     ffe:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <_ZZ9serial_RxhE6msg_ID>
    1002:	90 91 5d 45 	lds	r25, 0x455D	; 0x80455d <_ZZ9serial_RxhE6msg_ID+0x1>
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
    100a:	80 91 5b 45 	lds	r24, 0x455B	; 0x80455b <_ZZ9serial_RxhE11field_index>
    100e:	88 23       	and	r24, r24
    1010:	79 f0       	breq	.+30     	; 0x1030 <_Z9serial_Rxh+0xa2>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	40 91 5a 45 	lds	r20, 0x455A	; 0x80455a <_ZZ9serial_RxhE9field_len>
    101a:	54 e1       	ldi	r21, 0x14	; 20
    101c:	58 9f       	mul	r21, r24
    101e:	90 01       	movw	r18, r0
    1020:	59 9f       	mul	r21, r25
    1022:	30 0d       	add	r19, r0
    1024:	11 24       	eor	r1, r1
    1026:	c2 0f       	add	r28, r18
    1028:	d3 1f       	adc	r29, r19
    102a:	c4 0f       	add	r28, r20
    102c:	d1 1d       	adc	r29, r1
    102e:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	e1 5a       	subi	r30, 0xA1	; 161
    1034:	fa 4b       	sbci	r31, 0xBA	; 186
    1036:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
    1038:	0e 94 a3 3a 	call	0x7546	; 0x7546 <sb_send_NewLine>
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <_Z9serial_Rxh+0xb8>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	9f ef       	ldi	r25, 0xFF	; 255
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
    1046:	10 92 91 45 	sts	0x4591, r1	; 0x804591 <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
    104a:	10 92 5a 45 	sts	0x455A, r1	; 0x80455a <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
    104e:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <_ZZ9serial_RxhE6msg_ID>
    1052:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
    1056:	10 92 5b 45 	sts	0x455B, r1	; 0x80455b <_ZZ9serial_RxhE11field_index>
			buff = NULL;
    105a:	10 92 93 45 	sts	0x4593, r1	; 0x804593 <_ZZ9serial_RxhE4buff>
    105e:	10 92 94 45 	sts	0x4594, r1	; 0x804594 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = FALSE;
    1062:	10 92 5e 45 	sts	0x455E, r1	; 0x80455e <_ZZ9serial_RxhE13receiving_msg>
    1066:	1d c1       	rjmp	.+570    	; 0x12a2 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char)
    1068:	44 23       	and	r20, r20
    106a:	09 f4       	brne	.+2      	; 0x106e <_Z9serial_Rxh+0xe0>
    106c:	1a c1       	rjmp	.+564    	; 0x12a2 <_Z9serial_Rxh+0x314>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    106e:	e0 91 91 45 	lds	r30, 0x4591	; 0x804591 <_ZZ9serial_RxhE9charIndex>
    1072:	8e 2f       	mov	r24, r30
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	dc 01       	movw	r26, r24
    1078:	a1 5a       	subi	r26, 0xA1	; 161
    107a:	ba 4b       	sbci	r27, 0xBA	; 186
    107c:	4c 93       	st	X, r20

			if(charIndex)
    107e:	ee 23       	and	r30, r30
    1080:	09 f4       	brne	.+2      	; 0x1084 <_Z9serial_Rxh+0xf6>
    1082:	d7 c0       	rjmp	.+430    	; 0x1232 <_Z9serial_Rxh+0x2a4>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
    1084:	4f 37       	cpi	r20, 0x7F	; 127
    1086:	09 f0       	breq	.+2      	; 0x108a <_Z9serial_Rxh+0xfc>
    1088:	5f c0       	rjmp	.+190    	; 0x1148 <_Z9serial_Rxh+0x1ba>
				{
					charIndex--;
    108a:	e1 50       	subi	r30, 0x01	; 1
    108c:	e0 93 91 45 	sts	0x4591, r30	; 0x804591 <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
    1090:	80 91 5b 45 	lds	r24, 0x455B	; 0x80455b <_ZZ9serial_RxhE11field_index>
    1094:	81 11       	cpse	r24, r1
    1096:	13 c0       	rjmp	.+38     	; 0x10be <_Z9serial_Rxh+0x130>
					{
						msg_ID -= textBuff[charIndex];
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	e1 5a       	subi	r30, 0xA1	; 161
    109c:	fa 4b       	sbci	r31, 0xBA	; 186
    109e:	30 81       	ld	r19, Z
    10a0:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <_ZZ9serial_RxhE6msg_ID>
    10a4:	90 91 5d 45 	lds	r25, 0x455D	; 0x80455d <_ZZ9serial_RxhE6msg_ID+0x1>
    10a8:	83 1b       	sub	r24, r19
    10aa:	91 09       	sbc	r25, r1
						msg_ID /= 10;
    10ac:	6a e0       	ldi	r22, 0x0A	; 10
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
    10b4:	60 93 5c 45 	sts	0x455C, r22	; 0x80455c <_ZZ9serial_RxhE6msg_ID>
    10b8:	70 93 5d 45 	sts	0x455D, r23	; 0x80455d <_ZZ9serial_RxhE6msg_ID+0x1>
    10bc:	39 c0       	rjmp	.+114    	; 0x1130 <_Z9serial_Rxh+0x1a2>
					}
					else if(field_len)
    10be:	90 91 5a 45 	lds	r25, 0x455A	; 0x80455a <_ZZ9serial_RxhE9field_len>
    10c2:	99 23       	and	r25, r25
    10c4:	91 f0       	breq	.+36     	; 0x10ea <_Z9serial_Rxh+0x15c>
					{
						field_len--;
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	39 0f       	add	r19, r25
    10ca:	30 93 5a 45 	sts	0x455A, r19	; 0x80455a <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	64 e1       	ldi	r22, 0x14	; 20
    10d4:	68 9f       	mul	r22, r24
    10d6:	a0 01       	movw	r20, r0
    10d8:	69 9f       	mul	r22, r25
    10da:	50 0d       	add	r21, r0
    10dc:	11 24       	eor	r1, r1
    10de:	c4 0f       	add	r28, r20
    10e0:	d5 1f       	adc	r29, r21
    10e2:	c3 0f       	add	r28, r19
    10e4:	d1 1d       	adc	r29, r1
    10e6:	1b 82       	std	Y+3, r1	; 0x03
    10e8:	23 c0       	rjmp	.+70     	; 0x1130 <_Z9serial_Rxh+0x1a2>
					}
					else if(textBuff[charIndex] == ' ')
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	e1 5a       	subi	r30, 0xA1	; 161
    10ee:	fa 4b       	sbci	r31, 0xBA	; 186
    10f0:	90 81       	ld	r25, Z
    10f2:	90 32       	cpi	r25, 0x20	; 32
    10f4:	a1 f4       	brne	.+40     	; 0x111e <_Z9serial_Rxh+0x190>
					{
						field_index--;
    10f6:	81 50       	subi	r24, 0x01	; 1
    10f8:	80 93 5b 45 	sts	0x455B, r24	; 0x80455b <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
    10fc:	34 e1       	ldi	r19, 0x14	; 20
    10fe:	83 9f       	mul	r24, r19
    1100:	c0 01       	movw	r24, r0
    1102:	11 24       	eor	r1, r1
    1104:	03 96       	adiw	r24, 0x03	; 3
    1106:	c8 0f       	add	r28, r24
    1108:	d9 1f       	adc	r29, r25
    110a:	fe 01       	movw	r30, r28
    110c:	01 90       	ld	r0, Z+
    110e:	00 20       	and	r0, r0
    1110:	e9 f7       	brne	.-6      	; 0x110c <_Z9serial_Rxh+0x17e>
    1112:	31 97       	sbiw	r30, 0x01	; 1
    1114:	ec 1b       	sub	r30, r28
    1116:	fd 0b       	sbc	r31, r29
    1118:	e0 93 5a 45 	sts	0x455A, r30	; 0x80455a <_ZZ9serial_RxhE9field_len>
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <_Z9serial_Rxh+0x1a2>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
    111e:	94 e1       	ldi	r25, 0x14	; 20
    1120:	89 9f       	mul	r24, r25
    1122:	c0 0d       	add	r28, r0
    1124:	d1 1d       	adc	r29, r1
    1126:	11 24       	eor	r1, r1
    1128:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
    112a:	81 50       	subi	r24, 0x01	; 1
    112c:	80 93 5b 45 	sts	0x455B, r24	; 0x80455b <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
    1130:	80 91 91 45 	lds	r24, 0x4591	; 0x804591 <_ZZ9serial_RxhE9charIndex>
    1134:	e8 2f       	mov	r30, r24
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	e1 5a       	subi	r30, 0xA1	; 161
    113a:	fa 4b       	sbci	r31, 0xBA	; 186
    113c:	10 82       	st	Z, r1

					if(charIndex == 0)
    113e:	81 11       	cpse	r24, r1
    1140:	ab c0       	rjmp	.+342    	; 0x1298 <_Z9serial_Rxh+0x30a>
					{
						receiving_msg = FALSE;
    1142:	10 92 5e 45 	sts	0x455E, r1	; 0x80455e <_ZZ9serial_RxhE13receiving_msg>
    1146:	a8 c0       	rjmp	.+336    	; 0x1298 <_Z9serial_Rxh+0x30a>
					}
				}
				else
				{
					if(rx_char == ' ')
    1148:	40 32       	cpi	r20, 0x20	; 32
    114a:	81 f5       	brne	.+96     	; 0x11ac <_Z9serial_Rxh+0x21e>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
    114c:	fc 01       	movw	r30, r24
    114e:	e2 5a       	subi	r30, 0xA2	; 162
    1150:	fa 4b       	sbci	r31, 0xBA	; 186
    1152:	30 81       	ld	r19, Z
    1154:	30 32       	cpi	r19, 0x20	; 32
    1156:	09 f4       	brne	.+2      	; 0x115a <_Z9serial_Rxh+0x1cc>
    1158:	98 c0       	rjmp	.+304    	; 0x128a <_Z9serial_Rxh+0x2fc>
    115a:	30 91 5b 45 	lds	r19, 0x455B	; 0x80455b <_ZZ9serial_RxhE11field_index>
    115e:	43 2f       	mov	r20, r19
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	ba 01       	movw	r22, r20
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	63 30       	cpi	r22, 0x03	; 3
    116a:	71 05       	cpc	r23, r1
    116c:	0c f0       	brlt	.+2      	; 0x1170 <_Z9serial_Rxh+0x1e2>
    116e:	8f c0       	rjmp	.+286    	; 0x128e <_Z9serial_Rxh+0x300>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
    1170:	33 23       	and	r19, r19
    1172:	79 f0       	breq	.+30     	; 0x1192 <_Z9serial_Rxh+0x204>
							{
								buff->fields[field_index - 1][field_len] = '\0';
    1174:	41 50       	subi	r20, 0x01	; 1
    1176:	51 09       	sbc	r21, r1
    1178:	e0 91 5a 45 	lds	r30, 0x455A	; 0x80455a <_ZZ9serial_RxhE9field_len>
    117c:	f4 e1       	ldi	r31, 0x14	; 20
    117e:	f4 9f       	mul	r31, r20
    1180:	b0 01       	movw	r22, r0
    1182:	f5 9f       	mul	r31, r21
    1184:	70 0d       	add	r23, r0
    1186:	11 24       	eor	r1, r1
    1188:	c6 0f       	add	r28, r22
    118a:	d7 1f       	adc	r29, r23
    118c:	ce 0f       	add	r28, r30
    118e:	d1 1d       	adc	r29, r1
    1190:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
    1192:	3f 5f       	subi	r19, 0xFF	; 255
    1194:	30 93 5b 45 	sts	0x455B, r19	; 0x80455b <_ZZ9serial_RxhE11field_index>
							field_len = 0;
    1198:	10 92 5a 45 	sts	0x455A, r1	; 0x80455a <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	81 33       	cpi	r24, 0x31	; 49
    11a0:	91 05       	cpc	r25, r1
    11a2:	0c f0       	brlt	.+2      	; 0x11a6 <_Z9serial_Rxh+0x218>
    11a4:	81 e3       	ldi	r24, 0x31	; 49
    11a6:	80 93 91 45 	sts	0x4591, r24	; 0x804591 <_ZZ9serial_RxhE9charIndex>
    11aa:	76 c0       	rjmp	.+236    	; 0x1298 <_Z9serial_Rxh+0x30a>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
    11ac:	80 91 5a 45 	lds	r24, 0x455A	; 0x80455a <_ZZ9serial_RxhE9field_len>
    11b0:	85 31       	cpi	r24, 0x15	; 21
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <_Z9serial_Rxh+0x228>
    11b4:	6e c0       	rjmp	.+220    	; 0x1292 <_Z9serial_Rxh+0x304>
					{
						if(field_index == 0)    /* message ID received */
    11b6:	60 91 5b 45 	lds	r22, 0x455B	; 0x80455b <_ZZ9serial_RxhE11field_index>
    11ba:	61 11       	cpse	r22, r1
    11bc:	19 c0       	rjmp	.+50     	; 0x11f0 <_Z9serial_Rxh+0x262>
						{
							msg_ID = msg_ID * 10 + rx_char;
    11be:	60 91 5c 45 	lds	r22, 0x455C	; 0x80455c <_ZZ9serial_RxhE6msg_ID>
    11c2:	70 91 5d 45 	lds	r23, 0x455D	; 0x80455d <_ZZ9serial_RxhE6msg_ID+0x1>
    11c6:	fb 01       	movw	r30, r22
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	6e 0f       	add	r22, r30
    11da:	7f 1f       	adc	r23, r31
    11dc:	64 0f       	add	r22, r20
    11de:	71 1d       	adc	r23, r1
    11e0:	60 93 5c 45 	sts	0x455C, r22	; 0x80455c <_ZZ9serial_RxhE6msg_ID>
    11e4:	70 93 5d 45 	sts	0x455D, r23	; 0x80455d <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	80 93 5a 45 	sts	0x455A, r24	; 0x80455a <_ZZ9serial_RxhE9field_len>
    11ee:	16 c0       	rjmp	.+44     	; 0x121c <_Z9serial_Rxh+0x28e>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	61 50       	subi	r22, 0x01	; 1
    11f4:	71 09       	sbc	r23, r1
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	98 0f       	add	r25, r24
    11fa:	90 93 5a 45 	sts	0x455A, r25	; 0x80455a <_ZZ9serial_RxhE9field_len>
    11fe:	34 e1       	ldi	r19, 0x14	; 20
    1200:	36 9f       	mul	r19, r22
    1202:	f0 01       	movw	r30, r0
    1204:	37 9f       	mul	r19, r23
    1206:	f0 0d       	add	r31, r0
    1208:	11 24       	eor	r1, r1
    120a:	ce 0f       	add	r28, r30
    120c:	df 1f       	adc	r29, r31
    120e:	fe 01       	movw	r30, r28
    1210:	e8 0f       	add	r30, r24
    1212:	f1 1d       	adc	r31, r1
    1214:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
    1216:	c9 0f       	add	r28, r25
    1218:	d1 1d       	adc	r29, r1
    121a:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    121c:	80 91 91 45 	lds	r24, 0x4591	; 0x804591 <_ZZ9serial_RxhE9charIndex>
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	81 33       	cpi	r24, 0x31	; 49
    1226:	91 05       	cpc	r25, r1
    1228:	0c f0       	brlt	.+2      	; 0x122c <_Z9serial_Rxh+0x29e>
    122a:	81 e3       	ldi	r24, 0x31	; 49
    122c:	80 93 91 45 	sts	0x4591, r24	; 0x804591 <_ZZ9serial_RxhE9charIndex>
    1230:	33 c0       	rjmp	.+102    	; 0x1298 <_Z9serial_Rxh+0x30a>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
    1232:	4f 37       	cpi	r20, 0x7F	; 127
    1234:	69 f4       	brne	.+26     	; 0x1250 <_Z9serial_Rxh+0x2c2>
				{
					if(msg_ID <= 0)
    1236:	80 91 5c 45 	lds	r24, 0x455C	; 0x80455c <_ZZ9serial_RxhE6msg_ID>
    123a:	90 91 5d 45 	lds	r25, 0x455D	; 0x80455d <_ZZ9serial_RxhE6msg_ID+0x1>
    123e:	18 16       	cp	r1, r24
    1240:	19 06       	cpc	r1, r25
    1242:	0c f0       	brlt	.+2      	; 0x1246 <_Z9serial_Rxh+0x2b8>
					{
						rx_char = '\0';
    1244:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
    1246:	10 92 5c 45 	sts	0x455C, r1	; 0x80455c <_ZZ9serial_RxhE6msg_ID>
    124a:	10 92 5d 45 	sts	0x455D, r1	; 0x80455d <_ZZ9serial_RxhE6msg_ID+0x1>
    124e:	24 c0       	rjmp	.+72     	; 0x1298 <_Z9serial_Rxh+0x30a>
				}
				else if(rx_char == ' ') /* Handle Space */
    1250:	40 32       	cpi	r20, 0x20	; 32
    1252:	09 f1       	breq	.+66     	; 0x1296 <_Z9serial_Rxh+0x308>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
    1254:	10 92 5b 45 	sts	0x455B, r1	; 0x80455b <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
    1258:	55 27       	eor	r21, r21
    125a:	40 93 5c 45 	sts	0x455C, r20	; 0x80455c <_ZZ9serial_RxhE6msg_ID>
    125e:	50 93 5d 45 	sts	0x455D, r21	; 0x80455d <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	50 f4       	brcc	.+20     	; 0x127c <_Z9serial_Rxh+0x2ee>
					{
						buff->fields[i][0] = '\0';
    1268:	de 01       	movw	r26, r28
    126a:	34 e1       	ldi	r19, 0x14	; 20
    126c:	83 9f       	mul	r24, r19
    126e:	a0 0d       	add	r26, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	11 24       	eor	r1, r1
    1274:	13 96       	adiw	r26, 0x03	; 3
    1276:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	f4 cf       	rjmp	.-24     	; 0x1264 <_Z9serial_Rxh+0x2d6>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = TRUE;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 5e 45 	sts	0x455E, r24	; 0x80455e <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
    1282:	ef 5f       	subi	r30, 0xFF	; 255
    1284:	e0 93 91 45 	sts	0x4591, r30	; 0x804591 <_ZZ9serial_RxhE9charIndex>
    1288:	07 c0       	rjmp	.+14     	; 0x1298 <_Z9serial_Rxh+0x30a>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <_Z9serial_Rxh+0x30a>
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <_Z9serial_Rxh+0x30a>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <_Z9serial_Rxh+0x30a>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
    1296:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = TRUE;
					charIndex++;
				}
			}

			if(rx_char)
    1298:	22 23       	and	r18, r18
    129a:	19 f0       	breq	.+6      	; 0x12a2 <_Z9serial_Rxh+0x314>
			{
				sb_echo_char(rx_char);
    129c:	82 2f       	mov	r24, r18
    129e:	0e 94 ac 3a 	call	0x7558	; 0x7558 <sb_echo_char>
			}
		}
	}	
}
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	08 95       	ret

000012aa <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
    12d0:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    12d4:	81 11       	cpse	r24, r1
    12d6:	2b c0       	rjmp	.+86     	; 0x132e <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    12d8:	80 91 58 45 	lds	r24, 0x4558	; 0x804558 <_ZZ11__vector_20E4buff>
    12dc:	90 91 59 45 	lds	r25, 0x4559	; 0x804559 <_ZZ11__vector_20E4buff+0x1>
    12e0:	89 2b       	or	r24, r25
    12e2:	31 f4       	brne	.+12     	; 0x12f0 <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
    12e4:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <_Z18nextFullLBTxBufferv>
    12e8:	80 93 58 45 	sts	0x4558, r24	; 0x804558 <_ZZ11__vector_20E4buff>
    12ec:	90 93 59 45 	sts	0x4559, r25	; 0x804559 <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
    12f0:	e0 91 58 45 	lds	r30, 0x4558	; 0x804558 <_ZZ11__vector_20E4buff>
    12f4:	f0 91 59 45 	lds	r31, 0x4559	; 0x804559 <_ZZ11__vector_20E4buff+0x1>
    12f8:	80 91 57 45 	lds	r24, 0x4557	; 0x804557 <_ZZ11__vector_20E9charIndex>
    12fc:	df 01       	movw	r26, r30
    12fe:	a8 0f       	add	r26, r24
    1300:	b1 1d       	adc	r27, r1
    1302:	9c 91       	ld	r25, X
    1304:	99 23       	and	r25, r25
    1306:	31 f0       	breq	.+12     	; 0x1314 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	80 93 57 45 	sts	0x4557, r24	; 0x804557 <_ZZ11__vector_20E9charIndex>
    130e:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    1312:	0d c0       	rjmp	.+26     	; 0x132e <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
    1314:	10 92 57 45 	sts	0x4557, r1	; 0x804557 <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
    1318:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    131a:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <_Z18nextFullLBTxBufferv>
    131e:	80 93 58 45 	sts	0x4558, r24	; 0x804558 <_ZZ11__vector_20E4buff>
    1322:	90 93 59 45 	sts	0x4559, r25	; 0x804559 <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
    1326:	89 2b       	or	r24, r25
    1328:	11 f4       	brne	.+4      	; 0x132e <__vector_20+0x84>
			{
				linkbus_end_tx();
    132a:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
    132e:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    1332:	81 11       	cpse	r24, r1
    1334:	2b c0       	rjmp	.+86     	; 0x138c <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1336:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <_ZZ11__vector_20E4buff_0>
    133a:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <_ZZ11__vector_20E4buff_0+0x1>
    133e:	89 2b       	or	r24, r25
    1340:	31 f4       	brne	.+12     	; 0x134e <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
    1342:	0e 94 49 39 	call	0x7292	; 0x7292 <nextFullSBTxBuffer>
    1346:	80 93 55 45 	sts	0x4555, r24	; 0x804555 <_ZZ11__vector_20E4buff_0>
    134a:	90 93 56 45 	sts	0x4556, r25	; 0x804556 <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    134e:	e0 91 55 45 	lds	r30, 0x4555	; 0x804555 <_ZZ11__vector_20E4buff_0>
    1352:	f0 91 56 45 	lds	r31, 0x4556	; 0x804556 <_ZZ11__vector_20E4buff_0+0x1>
    1356:	80 91 54 45 	lds	r24, 0x4554	; 0x804554 <_ZZ11__vector_20E9charIndex_0>
    135a:	df 01       	movw	r26, r30
    135c:	a8 0f       	add	r26, r24
    135e:	b1 1d       	adc	r27, r1
    1360:	9c 91       	ld	r25, X
    1362:	99 23       	and	r25, r25
    1364:	31 f0       	breq	.+12     	; 0x1372 <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 54 45 	sts	0x4554, r24	; 0x804554 <_ZZ11__vector_20E9charIndex_0>
    136c:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    1370:	0d c0       	rjmp	.+26     	; 0x138c <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
    1372:	10 92 54 45 	sts	0x4554, r1	; 0x804554 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
    1376:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    1378:	0e 94 49 39 	call	0x7292	; 0x7292 <nextFullSBTxBuffer>
    137c:	80 93 55 45 	sts	0x4555, r24	; 0x804555 <_ZZ11__vector_20E4buff_0>
    1380:	90 93 56 45 	sts	0x4556, r25	; 0x804556 <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
    1384:	89 2b       	or	r24, r25
    1386:	11 f4       	brne	.+4      	; 0x138c <__vector_20+0xe2>
			{
				serialbus_end_tx();
    1388:	0e 94 15 3a 	call	0x742a	; 0x742a <serialbus_end_tx>
			}
		}
	}
}
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0b be       	out	0x3b, r0	; 59
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti

000013b2 <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	0b b6       	in	r0, 0x3b	; 59
    13be:	0f 92       	push	r0
    13c0:	2f 93       	push	r18
    13c2:	3f 93       	push	r19
    13c4:	4f 93       	push	r20
    13c6:	5f 93       	push	r21
    13c8:	6f 93       	push	r22
    13ca:	7f 93       	push	r23
    13cc:	8f 93       	push	r24
    13ce:	9f 93       	push	r25
    13d0:	af 93       	push	r26
    13d2:	bf 93       	push	r27
    13d4:	ef 93       	push	r30
    13d6:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
    13d8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	59 f5       	brne	.+86     	; 0x1436 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    13e0:	80 91 52 45 	lds	r24, 0x4552	; 0x804552 <_ZZ11__vector_56E4buff>
    13e4:	90 91 53 45 	lds	r25, 0x4553	; 0x804553 <_ZZ11__vector_56E4buff+0x1>
    13e8:	89 2b       	or	r24, r25
    13ea:	31 f4       	brne	.+12     	; 0x13f8 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
    13ec:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <_Z18nextFullLBTxBufferv>
    13f0:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <_ZZ11__vector_56E4buff>
    13f4:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
    13f8:	e0 91 52 45 	lds	r30, 0x4552	; 0x804552 <_ZZ11__vector_56E4buff>
    13fc:	f0 91 53 45 	lds	r31, 0x4553	; 0x804553 <_ZZ11__vector_56E4buff+0x1>
    1400:	80 91 51 45 	lds	r24, 0x4551	; 0x804551 <_ZZ11__vector_56E9charIndex>
    1404:	df 01       	movw	r26, r30
    1406:	a8 0f       	add	r26, r24
    1408:	b1 1d       	adc	r27, r1
    140a:	9c 91       	ld	r25, X
    140c:	99 23       	and	r25, r25
    140e:	31 f0       	breq	.+12     	; 0x141c <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	80 93 51 45 	sts	0x4551, r24	; 0x804551 <_ZZ11__vector_56E9charIndex>
    1416:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    141a:	0d c0       	rjmp	.+26     	; 0x1436 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
    141c:	10 92 51 45 	sts	0x4551, r1	; 0x804551 <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
    1420:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    1422:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <_Z18nextFullLBTxBufferv>
    1426:	80 93 52 45 	sts	0x4552, r24	; 0x804552 <_ZZ11__vector_56E4buff>
    142a:	90 93 53 45 	sts	0x4553, r25	; 0x804553 <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
    142e:	89 2b       	or	r24, r25
    1430:	11 f4       	brne	.+4      	; 0x1436 <__vector_56+0x84>
			{
				linkbus_end_tx();
    1432:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
    1436:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	59 f5       	brne	.+86     	; 0x1494 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    143e:	80 91 4f 45 	lds	r24, 0x454F	; 0x80454f <_ZZ11__vector_56E4buff_0>
    1442:	90 91 50 45 	lds	r25, 0x4550	; 0x804550 <_ZZ11__vector_56E4buff_0+0x1>
    1446:	89 2b       	or	r24, r25
    1448:	31 f4       	brne	.+12     	; 0x1456 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
    144a:	0e 94 49 39 	call	0x7292	; 0x7292 <nextFullSBTxBuffer>
    144e:	80 93 4f 45 	sts	0x454F, r24	; 0x80454f <_ZZ11__vector_56E4buff_0>
    1452:	90 93 50 45 	sts	0x4550, r25	; 0x804550 <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    1456:	e0 91 4f 45 	lds	r30, 0x454F	; 0x80454f <_ZZ11__vector_56E4buff_0>
    145a:	f0 91 50 45 	lds	r31, 0x4550	; 0x804550 <_ZZ11__vector_56E4buff_0+0x1>
    145e:	80 91 4e 45 	lds	r24, 0x454E	; 0x80454e <_ZZ11__vector_56E9charIndex_0>
    1462:	df 01       	movw	r26, r30
    1464:	a8 0f       	add	r26, r24
    1466:	b1 1d       	adc	r27, r1
    1468:	9c 91       	ld	r25, X
    146a:	99 23       	and	r25, r25
    146c:	31 f0       	breq	.+12     	; 0x147a <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	80 93 4e 45 	sts	0x454E, r24	; 0x80454e <_ZZ11__vector_56E9charIndex_0>
    1474:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    1478:	0d c0       	rjmp	.+26     	; 0x1494 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
    147a:	10 92 4e 45 	sts	0x454E, r1	; 0x80454e <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
    147e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    1480:	0e 94 49 39 	call	0x7292	; 0x7292 <nextFullSBTxBuffer>
    1484:	80 93 4f 45 	sts	0x454F, r24	; 0x80454f <_ZZ11__vector_56E4buff_0>
    1488:	90 93 50 45 	sts	0x4550, r25	; 0x804550 <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
    148c:	89 2b       	or	r24, r25
    148e:	11 f4       	brne	.+4      	; 0x1494 <__vector_56+0xe2>
			{
				serialbus_end_tx();
    1490:	0e 94 15 3a 	call	0x742a	; 0x742a <serialbus_end_tx>
			}
		}
	}
}
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0b be       	out	0x3b, r0	; 59
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f 90       	pop	r0
    14b6:	1f 90       	pop	r1
    14b8:	18 95       	reti

000014ba <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static BOOL receiving_msg = FALSE;

	if(!buff)
    14c4:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <_ZZ10linkbus_RxhE4buff>
    14c8:	90 91 4d 45 	lds	r25, 0x454D	; 0x80454d <_ZZ10linkbus_RxhE4buff+0x1>
    14cc:	89 2b       	or	r24, r25
    14ce:	31 f4       	brne	.+12     	; 0x14dc <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
    14d0:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <_Z19nextEmptyLBRxBufferv>
    14d4:	80 93 4c 45 	sts	0x454C, r24	; 0x80454c <_ZZ10linkbus_RxhE4buff>
    14d8:	90 93 4d 45 	sts	0x454D, r25	; 0x80454d <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
    14dc:	c0 91 4c 45 	lds	r28, 0x454C	; 0x80454c <_ZZ10linkbus_RxhE4buff>
    14e0:	d0 91 4d 45 	lds	r29, 0x454D	; 0x80454d <_ZZ10linkbus_RxhE4buff+0x1>
    14e4:	20 97       	sbiw	r28, 0x00	; 0
    14e6:	09 f4       	brne	.+2      	; 0x14ea <_Z10linkbus_Rxh+0x30>
    14e8:	e3 c0       	rjmp	.+454    	; 0x16b0 <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
    14ea:	81 2f       	mov	r24, r17
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 1f 4a 	call	0x943e	; 0x943e <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    14f2:	84 32       	cpi	r24, 0x24	; 36
    14f4:	11 f0       	breq	.+4      	; 0x14fa <_Z10linkbus_Rxh+0x40>
    14f6:	81 32       	cpi	r24, 0x21	; 33
    14f8:	49 f5       	brne	.+82     	; 0x154c <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
    14fa:	10 92 4b 45 	sts	0x454B, r1	; 0x80454b <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    14fe:	81 32       	cpi	r24, 0x21	; 33
    1500:	11 f4       	brne	.+4      	; 0x1506 <_Z10linkbus_Rxh+0x4c>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <_Z10linkbus_Rxh+0x4e>
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	88 83       	st	Y, r24
			field_len = 0;
    150a:	10 92 4a 45 	sts	0x454A, r1	; 0x80454a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    150e:	10 92 46 45 	sts	0x4546, r1	; 0x804546 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1512:	10 92 47 45 	sts	0x4547, r1	; 0x804547 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1516:	10 92 48 45 	sts	0x4548, r1	; 0x804548 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    151a:	10 92 49 45 	sts	0x4549, r1	; 0x804549 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = TRUE;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 45 45 	sts	0x4545, r24	; 0x804545 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1524:	10 92 44 45 	sts	0x4544, r1	; 0x804544 <_ZZ10linkbus_RxhE11field_index>
    1528:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <_ZZ10linkbus_RxhE11field_index>
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	58 f4       	brcc	.+22     	; 0x1546 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
    1530:	fe 01       	movw	r30, r28
    1532:	05 e1       	ldi	r16, 0x15	; 21
    1534:	80 9f       	mul	r24, r16
    1536:	e0 0d       	add	r30, r0
    1538:	f1 1d       	adc	r31, r1
    153a:	11 24       	eor	r1, r1
    153c:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = TRUE;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	80 93 44 45 	sts	0x4544, r24	; 0x804544 <_ZZ10linkbus_RxhE11field_index>
    1544:	f1 cf       	rjmp	.-30     	; 0x1528 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
    1546:	10 92 44 45 	sts	0x4544, r1	; 0x804544 <_ZZ10linkbus_RxhE11field_index>
    154a:	a7 c0       	rjmp	.+334    	; 0x169a <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
    154c:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <_ZZ10linkbus_RxhE13receiving_msg>
    1550:	99 23       	and	r25, r25
    1552:	09 f4       	brne	.+2      	; 0x1556 <_Z10linkbus_Rxh+0x9c>
    1554:	8b c0       	rjmp	.+278    	; 0x166c <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    1556:	8c 32       	cpi	r24, 0x2C	; 44
    1558:	29 f0       	breq	.+10     	; 0x1564 <_Z10linkbus_Rxh+0xaa>
    155a:	8b 33       	cpi	r24, 0x3B	; 59
    155c:	19 f0       	breq	.+6      	; 0x1564 <_Z10linkbus_Rxh+0xaa>
    155e:	8f 33       	cpi	r24, 0x3F	; 63
    1560:	09 f0       	breq	.+2      	; 0x1564 <_Z10linkbus_Rxh+0xaa>
    1562:	42 c0       	rjmp	.+132    	; 0x15e8 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    1564:	90 91 44 45 	lds	r25, 0x4544	; 0x804544 <_ZZ10linkbus_RxhE11field_index>
    1568:	99 23       	and	r25, r25
    156a:	89 f0       	breq	.+34     	; 0x158e <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
    156c:	29 2f       	mov	r18, r25
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	21 50       	subi	r18, 0x01	; 1
    1572:	31 09       	sbc	r19, r1
    1574:	40 91 4a 45 	lds	r20, 0x454A	; 0x80454a <_ZZ10linkbus_RxhE9field_len>
    1578:	55 e1       	ldi	r21, 0x15	; 21
    157a:	52 9f       	mul	r21, r18
    157c:	f0 01       	movw	r30, r0
    157e:	53 9f       	mul	r21, r19
    1580:	f0 0d       	add	r31, r0
    1582:	11 24       	eor	r1, r1
    1584:	ec 0f       	add	r30, r28
    1586:	fd 1f       	adc	r31, r29
    1588:	e4 0f       	add	r30, r20
    158a:	f1 1d       	adc	r31, r1
    158c:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
    158e:	9f 5f       	subi	r25, 0xFF	; 255
    1590:	90 93 44 45 	sts	0x4544, r25	; 0x804544 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
    1594:	10 92 4a 45 	sts	0x454A, r1	; 0x80454a <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
    1598:	8b 33       	cpi	r24, 0x3B	; 59
    159a:	69 f4       	brne	.+26     	; 0x15b6 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    159c:	80 91 4b 45 	lds	r24, 0x454B	; 0x80454b <_ZZ10linkbus_RxhE9charIndex>
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	30 f0       	brcs	.+12     	; 0x15b0 <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    15a4:	80 91 46 45 	lds	r24, 0x4546	; 0x804546 <_ZZ10linkbus_RxhE10tempMsg_ID>
    15a8:	90 91 47 45 	lds	r25, 0x4547	; 0x804547 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
    15b0:	10 92 45 45 	sts	0x4545, r1	; 0x804545 <_ZZ10linkbus_RxhE13receiving_msg>
    15b4:	10 c0       	rjmp	.+32     	; 0x15d6 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
    15b6:	8f 33       	cpi	r24, 0x3F	; 63
    15b8:	71 f4       	brne	.+28     	; 0x15d6 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
    15be:	80 91 4b 45 	lds	r24, 0x454B	; 0x80454b <_ZZ10linkbus_RxhE9charIndex>
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	30 f0       	brcs	.+12     	; 0x15d2 <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    15c6:	80 91 46 45 	lds	r24, 0x4546	; 0x804546 <_ZZ10linkbus_RxhE10tempMsg_ID>
    15ca:	90 91 47 45 	lds	r25, 0x4547	; 0x804547 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
    15d2:	10 92 45 45 	sts	0x4545, r1	; 0x804545 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
    15d6:	80 91 45 45 	lds	r24, 0x4545	; 0x804545 <_ZZ10linkbus_RxhE13receiving_msg>
    15da:	81 11       	cpse	r24, r1
    15dc:	5e c0       	rjmp	.+188    	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
    15de:	10 92 4c 45 	sts	0x454C, r1	; 0x80454c <_ZZ10linkbus_RxhE4buff>
    15e2:	10 92 4d 45 	sts	0x454D, r1	; 0x80454d <_ZZ10linkbus_RxhE4buff+0x1>
    15e6:	59 c0       	rjmp	.+178    	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
    15e8:	20 91 44 45 	lds	r18, 0x4544	; 0x804544 <_ZZ10linkbus_RxhE11field_index>
    15ec:	21 11       	cpse	r18, r1
    15ee:	29 c0       	rjmp	.+82     	; 0x1642 <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
    15f0:	40 91 46 45 	lds	r20, 0x4546	; 0x804546 <_ZZ10linkbus_RxhE10tempMsg_ID>
    15f4:	50 91 47 45 	lds	r21, 0x4547	; 0x804547 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15f8:	60 91 48 45 	lds	r22, 0x4548	; 0x804548 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    15fc:	70 91 49 45 	lds	r23, 0x4549	; 0x804549 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    1600:	44 0f       	add	r20, r20
    1602:	55 1f       	adc	r21, r21
    1604:	66 1f       	adc	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	8a 01       	movw	r16, r20
    160a:	9b 01       	movw	r18, r22
    160c:	00 0f       	add	r16, r16
    160e:	11 1f       	adc	r17, r17
    1610:	22 1f       	adc	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	00 0f       	add	r16, r16
    1616:	11 1f       	adc	r17, r17
    1618:	22 1f       	adc	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	40 0f       	add	r20, r16
    161e:	51 1f       	adc	r21, r17
    1620:	62 1f       	adc	r22, r18
    1622:	73 1f       	adc	r23, r19
    1624:	8a 01       	movw	r16, r20
    1626:	9b 01       	movw	r18, r22
    1628:	08 0f       	add	r16, r24
    162a:	11 1d       	adc	r17, r1
    162c:	21 1d       	adc	r18, r1
    162e:	31 1d       	adc	r19, r1
    1630:	00 93 46 45 	sts	0x4546, r16	; 0x804546 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1634:	10 93 47 45 	sts	0x4547, r17	; 0x804547 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1638:	20 93 48 45 	sts	0x4548, r18	; 0x804548 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    163c:	30 93 49 45 	sts	0x4549, r19	; 0x804549 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    1640:	2c c0       	rjmp	.+88     	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	21 50       	subi	r18, 0x01	; 1
    1646:	31 09       	sbc	r19, r1
    1648:	90 91 4a 45 	lds	r25, 0x454A	; 0x80454a <_ZZ10linkbus_RxhE9field_len>
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	49 0f       	add	r20, r25
    1650:	40 93 4a 45 	sts	0x454A, r20	; 0x80454a <_ZZ10linkbus_RxhE9field_len>
    1654:	65 e1       	ldi	r22, 0x15	; 21
    1656:	62 9f       	mul	r22, r18
    1658:	a0 01       	movw	r20, r0
    165a:	63 9f       	mul	r22, r19
    165c:	50 0d       	add	r21, r0
    165e:	11 24       	eor	r1, r1
    1660:	c4 0f       	add	r28, r20
    1662:	d5 1f       	adc	r29, r21
    1664:	c9 0f       	add	r28, r25
    1666:	d1 1d       	adc	r29, r1
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	17 c0       	rjmp	.+46     	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
    166c:	8d 30       	cpi	r24, 0x0D	; 13
    166e:	a9 f4       	brne	.+42     	; 0x169a <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
    1670:	19 82       	std	Y+1, r1	; 0x01
    1672:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
    1674:	82 e3       	ldi	r24, 0x32	; 50
    1676:	80 93 4b 45 	sts	0x454B, r24	; 0x80454b <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
    167a:	10 92 4a 45 	sts	0x454A, r1	; 0x80454a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    167e:	10 92 46 45 	sts	0x4546, r1	; 0x804546 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1682:	10 92 47 45 	sts	0x4547, r1	; 0x804547 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1686:	10 92 48 45 	sts	0x4548, r1	; 0x804548 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    168a:	10 92 49 45 	sts	0x4549, r1	; 0x804549 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
    168e:	10 92 44 45 	sts	0x4544, r1	; 0x804544 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
    1692:	10 92 4c 45 	sts	0x454C, r1	; 0x80454c <_ZZ10linkbus_RxhE4buff>
    1696:	10 92 4d 45 	sts	0x454D, r1	; 0x80454d <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    169a:	80 91 4b 45 	lds	r24, 0x454B	; 0x80454b <_ZZ10linkbus_RxhE9charIndex>
    169e:	8f 5f       	subi	r24, 0xFF	; 255
    16a0:	80 93 4b 45 	sts	0x454B, r24	; 0x80454b <_ZZ10linkbus_RxhE9charIndex>
    16a4:	82 33       	cpi	r24, 0x32	; 50
    16a6:	20 f0       	brcs	.+8      	; 0x16b0 <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = FALSE;
    16a8:	10 92 45 45 	sts	0x4545, r1	; 0x804545 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
    16ac:	10 92 4b 45 	sts	0x454B, r1	; 0x80454b <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	0b b6       	in	r0, 0x3b	; 59
    16c6:	0f 92       	push	r0
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	cf 93       	push	r28
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
    16e2:	0e 94 47 45 	call	0x8a8e	; 0x8a8e <USART0_get_data>
    16e6:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
    16e8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    16ec:	81 11       	cpse	r24, r1
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
    16f0:	8c 2f       	mov	r24, r28
    16f2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
    16f6:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    16fa:	81 11       	cpse	r24, r1
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
    16fe:	8c 2f       	mov	r24, r28
    1700:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z9serial_Rxh>
	}
}
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	cf 91       	pop	r28
    170a:	bf 91       	pop	r27
    170c:	af 91       	pop	r26
    170e:	9f 91       	pop	r25
    1710:	8f 91       	pop	r24
    1712:	7f 91       	pop	r23
    1714:	6f 91       	pop	r22
    1716:	5f 91       	pop	r21
    1718:	4f 91       	pop	r20
    171a:	3f 91       	pop	r19
    171c:	2f 91       	pop	r18
    171e:	0f 90       	pop	r0
    1720:	0b be       	out	0x3b, r0	; 59
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	0f 90       	pop	r0
    1728:	1f 90       	pop	r1
    172a:	18 95       	reti

0000172c <__vector_55>:

ISR(USART4_RXC_vect)
{
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	0f 92       	push	r0
    1734:	11 24       	eor	r1, r1
    1736:	0b b6       	in	r0, 0x3b	; 59
    1738:	0f 92       	push	r0
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	cf 93       	push	r28
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
    1754:	0e 94 af 45 	call	0x8b5e	; 0x8b5e <USART4_get_data>
    1758:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
    175a:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	19 f4       	brne	.+6      	; 0x1768 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
    1762:	8c 2f       	mov	r24, r28
    1764:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
    1768:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    176c:	84 30       	cpi	r24, 0x04	; 4
    176e:	19 f4       	brne	.+6      	; 0x1776 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
    1770:	8c 2f       	mov	r24, r28
    1772:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z9serial_Rxh>
	}
}
    1776:	ff 91       	pop	r31
    1778:	ef 91       	pop	r30
    177a:	cf 91       	pop	r28
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	0f 90       	pop	r0
    1792:	0b be       	out	0x3b, r0	; 59
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	0b b6       	in	r0, 0x3b	; 59
    17aa:	0f 92       	push	r0
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	cf 93       	push	r28
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
    17c6:	0e 94 7b 45 	call	0x8af6	; 0x8af6 <USART1_get_data>
    17ca:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
    17cc:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	19 f4       	brne	.+6      	; 0x17da <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
    17d4:	8c 2f       	mov	r24, r28
    17d6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
    17da:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	19 f4       	brne	.+6      	; 0x17e8 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
    17e2:	8c 2f       	mov	r24, r28
    17e4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z9serial_Rxh>
	}
}
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	cf 91       	pop	r28
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0b be       	out	0x3b, r0	; 59
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	0b b6       	in	r0, 0x3b	; 59
    181c:	0f 92       	push	r0
    181e:	2f 93       	push	r18
    1820:	3f 93       	push	r19
    1822:	4f 93       	push	r20
    1824:	5f 93       	push	r21
    1826:	6f 93       	push	r22
    1828:	7f 93       	push	r23
    182a:	8f 93       	push	r24
    182c:	9f 93       	push	r25
    182e:	af 93       	push	r26
    1830:	bf 93       	push	r27
    1832:	ef 93       	push	r30
    1834:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
    1836:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	59 f5       	brne	.+86     	; 0x1894 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    183e:	80 91 42 45 	lds	r24, 0x4542	; 0x804542 <_ZZ11__vector_32E4buff>
    1842:	90 91 43 45 	lds	r25, 0x4543	; 0x804543 <_ZZ11__vector_32E4buff+0x1>
    1846:	89 2b       	or	r24, r25
    1848:	31 f4       	brne	.+12     	; 0x1856 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
    184a:	0e 94 49 39 	call	0x7292	; 0x7292 <nextFullSBTxBuffer>
    184e:	80 93 42 45 	sts	0x4542, r24	; 0x804542 <_ZZ11__vector_32E4buff>
    1852:	90 93 43 45 	sts	0x4543, r25	; 0x804543 <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
    1856:	e0 91 42 45 	lds	r30, 0x4542	; 0x804542 <_ZZ11__vector_32E4buff>
    185a:	f0 91 43 45 	lds	r31, 0x4543	; 0x804543 <_ZZ11__vector_32E4buff+0x1>
    185e:	80 91 41 45 	lds	r24, 0x4541	; 0x804541 <_ZZ11__vector_32E9charIndex>
    1862:	df 01       	movw	r26, r30
    1864:	a8 0f       	add	r26, r24
    1866:	b1 1d       	adc	r27, r1
    1868:	9c 91       	ld	r25, X
    186a:	99 23       	and	r25, r25
    186c:	31 f0       	breq	.+12     	; 0x187a <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    186e:	8f 5f       	subi	r24, 0xFF	; 255
    1870:	80 93 41 45 	sts	0x4541, r24	; 0x804541 <_ZZ11__vector_32E9charIndex>
    1874:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
    187a:	10 92 41 45 	sts	0x4541, r1	; 0x804541 <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
    187e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    1880:	0e 94 49 39 	call	0x7292	; 0x7292 <nextFullSBTxBuffer>
    1884:	80 93 42 45 	sts	0x4542, r24	; 0x804542 <_ZZ11__vector_32E4buff>
    1888:	90 93 43 45 	sts	0x4543, r25	; 0x804543 <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
    188c:	89 2b       	or	r24, r25
    188e:	11 f4       	brne	.+4      	; 0x1894 <__vector_32+0x84>
			{
				serialbus_end_tx();
    1890:	0e 94 15 3a 	call	0x742a	; 0x742a <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
    1894:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	59 f5       	brne	.+86     	; 0x18f2 <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    189c:	80 91 3f 45 	lds	r24, 0x453F	; 0x80453f <_ZZ11__vector_32E4buff_0>
    18a0:	90 91 40 45 	lds	r25, 0x4540	; 0x804540 <_ZZ11__vector_32E4buff_0+0x1>
    18a4:	89 2b       	or	r24, r25
    18a6:	31 f4       	brne	.+12     	; 0x18b4 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
    18a8:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <_Z18nextFullLBTxBufferv>
    18ac:	80 93 3f 45 	sts	0x453F, r24	; 0x80453f <_ZZ11__vector_32E4buff_0>
    18b0:	90 93 40 45 	sts	0x4540, r25	; 0x804540 <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    18b4:	e0 91 3f 45 	lds	r30, 0x453F	; 0x80453f <_ZZ11__vector_32E4buff_0>
    18b8:	f0 91 40 45 	lds	r31, 0x4540	; 0x804540 <_ZZ11__vector_32E4buff_0+0x1>
    18bc:	80 91 3e 45 	lds	r24, 0x453E	; 0x80453e <__data_end>
    18c0:	df 01       	movw	r26, r30
    18c2:	a8 0f       	add	r26, r24
    18c4:	b1 1d       	adc	r27, r1
    18c6:	9c 91       	ld	r25, X
    18c8:	99 23       	and	r25, r25
    18ca:	31 f0       	breq	.+12     	; 0x18d8 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	80 93 3e 45 	sts	0x453E, r24	; 0x80453e <__data_end>
    18d2:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    18d6:	0d c0       	rjmp	.+26     	; 0x18f2 <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
    18d8:	10 92 3e 45 	sts	0x453E, r1	; 0x80453e <__data_end>
			(*buff)[0] = '\0';
    18dc:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    18de:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <_Z18nextFullLBTxBufferv>
    18e2:	80 93 3f 45 	sts	0x453F, r24	; 0x80453f <_ZZ11__vector_32E4buff_0>
    18e6:	90 93 40 45 	sts	0x4540, r25	; 0x804540 <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
    18ea:	89 2b       	or	r24, r25
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <__vector_32+0xe2>
			{
				linkbus_end_tx();
    18ee:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <_Z14linkbus_end_txv>
			}
		}
	}
}
    18f2:	ff 91       	pop	r31
    18f4:	ef 91       	pop	r30
    18f6:	bf 91       	pop	r27
    18f8:	af 91       	pop	r26
    18fa:	9f 91       	pop	r25
    18fc:	8f 91       	pop	r24
    18fe:	7f 91       	pop	r23
    1900:	6f 91       	pop	r22
    1902:	5f 91       	pop	r21
    1904:	4f 91       	pop	r20
    1906:	3f 91       	pop	r19
    1908:	2f 91       	pop	r18
    190a:	0f 90       	pop	r0
    190c:	0b be       	out	0x3b, r0	; 59
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_41>:
{
	
}

void suspendEvent()
{
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	0b b6       	in	r0, 0x3b	; 59
    1924:	0f 92       	push	r0
    1926:	2f 93       	push	r18
    1928:	3f 93       	push	r19
    192a:	4f 93       	push	r20
    192c:	5f 93       	push	r21
    192e:	6f 93       	push	r22
    1930:	7f 93       	push	r23
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	af 93       	push	r26
    1938:	bf 93       	push	r27
    193a:	ef 93       	push	r30
    193c:	ff 93       	push	r31
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	25 97       	sbiw	r28, 0x05	; 5
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    1950:	80 ff       	sbrs	r24, 0
    1952:	aa c3       	rjmp	.+1876   	; 0x20a8 <__vector_41+0x790>
    1954:	80 91 37 46 	lds	r24, 0x4637	; 0x804637 <_ZZ11__vector_41E3cnt>
    1958:	90 91 38 46 	lds	r25, 0x4638	; 0x804638 <_ZZ11__vector_41E3cnt+0x1>
    195c:	9c 01       	movw	r18, r24
    195e:	2f 5f       	subi	r18, 0xFF	; 255
    1960:	3f 4f       	sbci	r19, 0xFF	; 255
    1962:	20 93 37 46 	sts	0x4637, r18	; 0x804637 <_ZZ11__vector_41E3cnt>
    1966:	30 93 38 46 	sts	0x4638, r19	; 0x804638 <_ZZ11__vector_41E3cnt+0x1>
    196a:	8b 32       	cpi	r24, 0x2B	; 43
    196c:	91 40       	sbci	r25, 0x01	; 1
    196e:	09 f0       	breq	.+2      	; 0x1972 <__vector_41+0x5a>
    1970:	98 c3       	rjmp	.+1840   	; 0x20a2 <__vector_41+0x78a>
    1972:	10 92 37 46 	sts	0x4637, r1	; 0x804637 <_ZZ11__vector_41E3cnt>
    1976:	10 92 38 46 	sts	0x4638, r1	; 0x804638 <_ZZ11__vector_41E3cnt+0x1>
    197a:	80 91 0c 46 	lds	r24, 0x460C	; 0x80460c <g_event_enabled>
    197e:	81 11       	cpse	r24, r1
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <__vector_41+0x70>
    1982:	8a b1       	in	r24, 0x0a	; 10
    1984:	80 64       	ori	r24, 0x40	; 64
    1986:	8a b9       	out	0x0a, r24	; 10
    1988:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <_Z18antennaIsConnectedv>
    198c:	81 11       	cpse	r24, r1
    198e:	0a c0       	rjmp	.+20     	; 0x19a4 <__vector_41+0x8c>
    1990:	90 91 cb 45 	lds	r25, 0x45CB	; 0x8045cb <g_antenna_connect_state>
    1994:	91 30       	cpi	r25, 0x01	; 1
    1996:	19 f1       	breq	.+70     	; 0x19de <__vector_41+0xc6>
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	90 93 cb 45 	sts	0x45CB, r25	; 0x8045cb <g_antenna_connect_state>
    199e:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    19a2:	1d c0       	rjmp	.+58     	; 0x19de <__vector_41+0xc6>
    19a4:	90 91 cb 45 	lds	r25, 0x45CB	; 0x8045cb <g_antenna_connect_state>
    19a8:	91 30       	cpi	r25, 0x01	; 1
    19aa:	c9 f4       	brne	.+50     	; 0x19de <__vector_41+0xc6>
    19ac:	90 91 39 46 	lds	r25, 0x4639	; 0x804639 <_ZZ11__vector_41E26lastAntennaConnectionState>
    19b0:	89 13       	cpse	r24, r25
    19b2:	12 c0       	rjmp	.+36     	; 0x19d8 <__vector_41+0xc0>
    19b4:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19b8:	99 23       	and	r25, r25
    19ba:	89 f0       	breq	.+34     	; 0x19de <__vector_41+0xc6>
    19bc:	91 50       	subi	r25, 0x01	; 1
    19be:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19c2:	91 11       	cpse	r25, r1
    19c4:	0c c0       	rjmp	.+24     	; 0x19de <__vector_41+0xc6>
    19c6:	10 92 cb 45 	sts	0x45CB, r1	; 0x8045cb <g_antenna_connect_state>
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    19d0:	93 e0       	ldi	r25, 0x03	; 3
    19d2:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19d6:	03 c0       	rjmp	.+6      	; 0x19de <__vector_41+0xc6>
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19de:	80 93 39 46 	sts	0x4639, r24	; 0x804639 <_ZZ11__vector_41E26lastAntennaConnectionState>
    19e2:	0e 94 b0 05 	call	0xb60	; 0xb60 <system_tick>
    19e6:	80 91 11 46 	lds	r24, 0x4611	; 0x804611 <_ZL10g_sleeping>
    19ea:	88 23       	and	r24, r24
    19ec:	e1 f1       	breq	.+120    	; 0x1a66 <__vector_41+0x14e>
    19ee:	80 91 12 46 	lds	r24, 0x4612	; 0x804612 <_ZL23g_seconds_left_to_sleep>
    19f2:	90 91 13 46 	lds	r25, 0x4613	; 0x804613 <_ZL23g_seconds_left_to_sleep+0x1>
    19f6:	a0 91 14 46 	lds	r26, 0x4614	; 0x804614 <_ZL23g_seconds_left_to_sleep+0x2>
    19fa:	b0 91 15 46 	lds	r27, 0x4615	; 0x804615 <_ZL23g_seconds_left_to_sleep+0x3>
    19fe:	89 2b       	or	r24, r25
    1a00:	8a 2b       	or	r24, r26
    1a02:	8b 2b       	or	r24, r27
    1a04:	99 f0       	breq	.+38     	; 0x1a2c <__vector_41+0x114>
    1a06:	80 91 12 46 	lds	r24, 0x4612	; 0x804612 <_ZL23g_seconds_left_to_sleep>
    1a0a:	90 91 13 46 	lds	r25, 0x4613	; 0x804613 <_ZL23g_seconds_left_to_sleep+0x1>
    1a0e:	a0 91 14 46 	lds	r26, 0x4614	; 0x804614 <_ZL23g_seconds_left_to_sleep+0x2>
    1a12:	b0 91 15 46 	lds	r27, 0x4615	; 0x804615 <_ZL23g_seconds_left_to_sleep+0x3>
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	a1 09       	sbc	r26, r1
    1a1a:	b1 09       	sbc	r27, r1
    1a1c:	80 93 12 46 	sts	0x4612, r24	; 0x804612 <_ZL23g_seconds_left_to_sleep>
    1a20:	90 93 13 46 	sts	0x4613, r25	; 0x804613 <_ZL23g_seconds_left_to_sleep+0x1>
    1a24:	a0 93 14 46 	sts	0x4614, r26	; 0x804614 <_ZL23g_seconds_left_to_sleep+0x2>
    1a28:	b0 93 15 46 	sts	0x4615, r27	; 0x804615 <_ZL23g_seconds_left_to_sleep+0x3>
    1a2c:	80 91 12 46 	lds	r24, 0x4612	; 0x804612 <_ZL23g_seconds_left_to_sleep>
    1a30:	90 91 13 46 	lds	r25, 0x4613	; 0x804613 <_ZL23g_seconds_left_to_sleep+0x1>
    1a34:	a0 91 14 46 	lds	r26, 0x4614	; 0x804614 <_ZL23g_seconds_left_to_sleep+0x2>
    1a38:	b0 91 15 46 	lds	r27, 0x4615	; 0x804615 <_ZL23g_seconds_left_to_sleep+0x3>
    1a3c:	89 2b       	or	r24, r25
    1a3e:	8a 2b       	or	r24, r26
    1a40:	8b 2b       	or	r24, r27
    1a42:	31 f0       	breq	.+12     	; 0x1a50 <__vector_41+0x138>
    1a44:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a48:	88 23       	and	r24, r24
    1a4a:	21 f0       	breq	.+8      	; 0x1a54 <__vector_41+0x13c>
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <__vector_41+0x13e>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <__vector_41+0x13e>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	88 23       	and	r24, r24
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <__vector_41+0x144>
    1a5a:	23 c3       	rjmp	.+1606   	; 0x20a2 <__vector_41+0x78a>
    1a5c:	10 92 10 46 	sts	0x4610, r1	; 0x804610 <_ZL13g_go_to_sleep>
    1a60:	10 92 11 46 	sts	0x4611, r1	; 0x804611 <_ZL10g_sleeping>
    1a64:	1e c3       	rjmp	.+1596   	; 0x20a2 <__vector_41+0x78a>
    1a66:	19 82       	std	Y+1, r1	; 0x01
    1a68:	1a 82       	std	Y+2, r1	; 0x02
    1a6a:	1b 82       	std	Y+3, r1	; 0x03
    1a6c:	1c 82       	std	Y+4, r1	; 0x04
    1a6e:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1a72:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1a76:	89 2b       	or	r24, r25
    1a78:	49 f0       	breq	.+18     	; 0x1a8c <__vector_41+0x174>
    1a7a:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1a7e:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1a88:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1a8c:	80 91 0d 46 	lds	r24, 0x460D	; 0x80460d <g_event_commenced>
    1a90:	88 23       	and	r24, r24
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <__vector_41+0x17e>
    1a94:	54 c0       	rjmp	.+168    	; 0x1b3e <__vector_41+0x226>
    1a96:	80 91 08 46 	lds	r24, 0x4608	; 0x804608 <g_event_finish_time>
    1a9a:	90 91 09 46 	lds	r25, 0x4609	; 0x804609 <g_event_finish_time+0x1>
    1a9e:	a0 91 0a 46 	lds	r26, 0x460A	; 0x80460a <g_event_finish_time+0x2>
    1aa2:	b0 91 0b 46 	lds	r27, 0x460B	; 0x80460b <g_event_finish_time+0x3>
    1aa6:	89 2b       	or	r24, r25
    1aa8:	8a 2b       	or	r24, r26
    1aaa:	8b 2b       	or	r24, r27
    1aac:	51 f0       	breq	.+20     	; 0x1ac2 <__vector_41+0x1aa>
    1aae:	80 91 0e 46 	lds	r24, 0x460E	; 0x80460e <g_check_for_next_event>
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	08 c0       	rjmp	.+16     	; 0x1ac6 <__vector_41+0x1ae>
    1ab6:	80 91 d4 45 	lds	r24, 0x45D4	; 0x8045d4 <_ZL20g_shutting_down_wifi>
    1aba:	88 23       	and	r24, r24
    1abc:	31 f0       	breq	.+12     	; 0x1aca <__vector_41+0x1b2>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <__vector_41+0x1b4>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <__vector_41+0x1b4>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <__vector_41+0x1b4>
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	88 23       	and	r24, r24
    1ace:	b9 f1       	breq	.+110    	; 0x1b3e <__vector_41+0x226>
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    1ad8:	49 81       	ldd	r20, Y+1	; 0x01
    1ada:	5a 81       	ldd	r21, Y+2	; 0x02
    1adc:	6b 81       	ldd	r22, Y+3	; 0x03
    1ade:	7c 81       	ldd	r23, Y+4	; 0x04
    1ae0:	80 91 08 46 	lds	r24, 0x4608	; 0x804608 <g_event_finish_time>
    1ae4:	90 91 09 46 	lds	r25, 0x4609	; 0x804609 <g_event_finish_time+0x1>
    1ae8:	a0 91 0a 46 	lds	r26, 0x460A	; 0x80460a <g_event_finish_time+0x2>
    1aec:	b0 91 0b 46 	lds	r27, 0x460B	; 0x80460b <g_event_finish_time+0x3>
    1af0:	48 17       	cp	r20, r24
    1af2:	59 07       	cpc	r21, r25
    1af4:	6a 07       	cpc	r22, r26
    1af6:	7b 07       	cpc	r23, r27
    1af8:	10 f1       	brcs	.+68     	; 0x1b3e <__vector_41+0x226>
    1afa:	8c ef       	ldi	r24, 0xFC	; 252
    1afc:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    1b00:	10 92 cc 45 	sts	0x45CC, r1	; 0x8045cc <_ZL12g_on_the_air>
    1b04:	10 92 cd 45 	sts	0x45CD, r1	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1b08:	10 92 ce 45 	sts	0x45CE, r1	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1b0c:	10 92 cf 45 	sts	0x45CF, r1	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	0e 94 79 43 	call	0x86f2	; 0x86f2 <_Z14keyTransmitterh>
    1b16:	10 92 0c 46 	sts	0x460C, r1	; 0x80460c <g_event_enabled>
    1b1a:	10 92 0d 46 	sts	0x460D, r1	; 0x80460d <g_event_commenced>
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	80 93 0e 46 	sts	0x460E, r24	; 0x80460e <g_check_for_next_event>
    1b24:	8a e5       	ldi	r24, 0x5A	; 90
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1b2c:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1b30:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1b34:	88 23       	and	r24, r24
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <__vector_41+0x226>
    1b38:	8c e3       	ldi	r24, 0x3C	; 60
    1b3a:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b3e:	80 91 0c 46 	lds	r24, 0x460C	; 0x80460c <g_event_enabled>
    1b42:	88 23       	and	r24, r24
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <__vector_41+0x230>
    1b46:	36 c2       	rjmp	.+1132   	; 0x1fb4 <__vector_41+0x69c>
    1b48:	80 91 0d 46 	lds	r24, 0x460D	; 0x80460d <g_event_commenced>
    1b4c:	88 23       	and	r24, r24
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <__vector_41+0x23a>
    1b50:	a6 c1       	rjmp	.+844    	; 0x1e9e <__vector_41+0x586>
    1b52:	80 91 d0 45 	lds	r24, 0x45D0	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    1b56:	90 91 d1 45 	lds	r25, 0x45D1	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    1b5a:	89 2b       	or	r24, r25
    1b5c:	49 f0       	breq	.+18     	; 0x1b70 <__vector_41+0x258>
    1b5e:	80 91 d0 45 	lds	r24, 0x45D0	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    1b62:	90 91 d1 45 	lds	r25, 0x45D1	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    1b6c:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    1b70:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    1b74:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1b78:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1b7c:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1b80:	89 2b       	or	r24, r25
    1b82:	8a 2b       	or	r24, r26
    1b84:	8b 2b       	or	r24, r27
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <__vector_41+0x272>
    1b88:	15 c2       	rjmp	.+1066   	; 0x1fb4 <__vector_41+0x69c>
    1b8a:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    1b8e:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1b92:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1b96:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1b9a:	18 16       	cp	r1, r24
    1b9c:	19 06       	cpc	r1, r25
    1b9e:	1a 06       	cpc	r1, r26
    1ba0:	1b 06       	cpc	r1, r27
    1ba2:	0c f0       	brlt	.+2      	; 0x1ba6 <__vector_41+0x28e>
    1ba4:	2a c1       	rjmp	.+596    	; 0x1dfa <__vector_41+0x4e2>
    1ba6:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    1baa:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1bae:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1bb2:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	a1 09       	sbc	r26, r1
    1bba:	b1 09       	sbc	r27, r1
    1bbc:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    1bc0:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1bc4:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1bc8:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1bcc:	80 91 d0 45 	lds	r24, 0x45D0	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    1bd0:	90 91 d1 45 	lds	r25, 0x45D1	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    1bd4:	89 2b       	or	r24, r25
    1bd6:	41 f4       	brne	.+16     	; 0x1be8 <__vector_41+0x2d0>
    1bd8:	80 91 00 46 	lds	r24, 0x4600	; 0x804600 <g_time_needed_for_ID>
    1bdc:	90 91 01 46 	lds	r25, 0x4601	; 0x804601 <g_time_needed_for_ID+0x1>
    1be0:	89 2b       	or	r24, r25
    1be2:	21 f4       	brne	.+8      	; 0x1bec <__vector_41+0x2d4>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <__vector_41+0x2d6>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <__vector_41+0x2d6>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	88 23       	and	r24, r24
    1bf0:	81 f1       	breq	.+96     	; 0x1c52 <__vector_41+0x33a>
    1bf2:	80 91 00 46 	lds	r24, 0x4600	; 0x804600 <g_time_needed_for_ID>
    1bf6:	90 91 01 46 	lds	r25, 0x4601	; 0x804601 <g_time_needed_for_ID+0x1>
    1bfa:	a0 e0       	ldi	r26, 0x00	; 0
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	40 91 cc 45 	lds	r20, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    1c02:	50 91 cd 45 	lds	r21, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1c06:	60 91 ce 45 	lds	r22, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1c0a:	70 91 cf 45 	lds	r23, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1c0e:	84 17       	cp	r24, r20
    1c10:	95 07       	cpc	r25, r21
    1c12:	a6 07       	cpc	r26, r22
    1c14:	b7 07       	cpc	r27, r23
    1c16:	e9 f4       	brne	.+58     	; 0x1c52 <__vector_41+0x33a>
    1c18:	8f ee       	ldi	r24, 0xEF	; 239
    1c1a:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    1c1e:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1c22:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1c26:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    1c2a:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    1c2e:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1c32:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    1c36:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1c3a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1c3e:	1d 82       	std	Y+5, r1	; 0x05
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	be 01       	movw	r22, r28
    1c46:	6b 5f       	subi	r22, 0xFB	; 251
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	8b ee       	ldi	r24, 0xEB	; 235
    1c4c:	95 e4       	ldi	r25, 0x45	; 69
    1c4e:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
    1c52:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    1c56:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1c5a:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1c5e:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1c62:	89 2b       	or	r24, r25
    1c64:	8a 2b       	or	r24, r26
    1c66:	8b 2b       	or	r24, r27
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <__vector_41+0x354>
    1c6a:	a4 c1       	rjmp	.+840    	; 0x1fb4 <__vector_41+0x69c>
    1c6c:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1c70:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1c74:	89 2b       	or	r24, r25
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <__vector_41+0x362>
    1c78:	a7 c0       	rjmp	.+334    	; 0x1dc8 <__vector_41+0x4b0>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	0e 94 79 43 	call	0x86f2	; 0x86f2 <_Z14keyTransmitterh>
    1c80:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1c84:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1c88:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    1c8c:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1c90:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1c94:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1c98:	05 2e       	mov	r0, r21
    1c9a:	00 0c       	add	r0, r0
    1c9c:	66 0b       	sbc	r22, r22
    1c9e:	77 0b       	sbc	r23, r23
    1ca0:	84 1b       	sub	r24, r20
    1ca2:	95 0b       	sbc	r25, r21
    1ca4:	a6 0b       	sbc	r26, r22
    1ca6:	b7 0b       	sbc	r27, r23
    1ca8:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    1cac:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1cb0:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1cb4:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	be 01       	movw	r22, r28
    1cc2:	6b 5f       	subi	r22, 0xFB	; 251
    1cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc6:	86 ed       	ldi	r24, 0xD6	; 214
    1cc8:	95 e4       	ldi	r25, 0x45	; 69
    1cca:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
    1cce:	8e ef       	ldi	r24, 0xFE	; 254
    1cd0:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    1cdc:	29 81       	ldd	r18, Y+1	; 0x01
    1cde:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce0:	4b 81       	ldd	r20, Y+3	; 0x03
    1ce2:	5c 81       	ldd	r21, Y+4	; 0x04
    1ce4:	80 91 08 46 	lds	r24, 0x4608	; 0x804608 <g_event_finish_time>
    1ce8:	90 91 09 46 	lds	r25, 0x4609	; 0x804609 <g_event_finish_time+0x1>
    1cec:	a0 91 0a 46 	lds	r26, 0x460A	; 0x80460a <g_event_finish_time+0x2>
    1cf0:	b0 91 0b 46 	lds	r27, 0x460B	; 0x80460b <g_event_finish_time+0x3>
    1cf4:	28 17       	cp	r18, r24
    1cf6:	39 07       	cpc	r19, r25
    1cf8:	4a 07       	cpc	r20, r26
    1cfa:	5b 07       	cpc	r21, r27
    1cfc:	58 f4       	brcc	.+22     	; 0x1d14 <__vector_41+0x3fc>
    1cfe:	60 91 08 46 	lds	r22, 0x4608	; 0x804608 <g_event_finish_time>
    1d02:	70 91 09 46 	lds	r23, 0x4609	; 0x804609 <g_event_finish_time+0x1>
    1d06:	80 91 0a 46 	lds	r24, 0x460A	; 0x80460a <g_event_finish_time+0x2>
    1d0a:	90 91 0b 46 	lds	r25, 0x460B	; 0x80460b <g_event_finish_time+0x3>
    1d0e:	0e 94 b2 45 	call	0x8b64	; 0x8b64 <_Z7timeDifmm>
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <__vector_41+0x402>
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	cb 01       	movw	r24, r22
    1d1a:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    1d1e:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d22:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    1d26:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1d2a:	24 0f       	add	r18, r20
    1d2c:	35 1f       	adc	r19, r21
    1d2e:	21 5f       	subi	r18, 0xF1	; 241
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	03 2e       	mov	r0, r19
    1d34:	00 0c       	add	r0, r0
    1d36:	44 0b       	sbc	r20, r20
    1d38:	55 0b       	sbc	r21, r21
    1d3a:	26 17       	cp	r18, r22
    1d3c:	37 07       	cpc	r19, r23
    1d3e:	48 07       	cpc	r20, r24
    1d40:	59 07       	cpc	r21, r25
    1d42:	0c f0       	brlt	.+2      	; 0x1d46 <__vector_41+0x42e>
    1d44:	37 c1       	rjmp	.+622    	; 0x1fb4 <__vector_41+0x69c>
    1d46:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d4a:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d4e:	40 97       	sbiw	r24, 0x10	; 16
    1d50:	34 f0       	brlt	.+12     	; 0x1d5e <__vector_41+0x446>
    1d52:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1d56:	88 23       	and	r24, r24
    1d58:	21 f0       	breq	.+8      	; 0x1d62 <__vector_41+0x44a>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	03 c0       	rjmp	.+6      	; 0x1d64 <__vector_41+0x44c>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <__vector_41+0x44c>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	88 23       	and	r24, r24
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <__vector_41+0x452>
    1d68:	25 c1       	rjmp	.+586    	; 0x1fb4 <__vector_41+0x69c>
    1d6a:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d6e:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d72:	0a 97       	sbiw	r24, 0x0a	; 10
    1d74:	09 2e       	mov	r0, r25
    1d76:	00 0c       	add	r0, r0
    1d78:	aa 0b       	sbc	r26, r26
    1d7a:	bb 0b       	sbc	r27, r27
    1d7c:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1d80:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1d84:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1d88:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	80 93 d5 45 	sts	0x45D5, r24	; 0x8045d5 <_ZL11g_sleepType>
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	80 93 10 46 	sts	0x4610, r24	; 0x804610 <_ZL13g_go_to_sleep>
    1d98:	80 91 d0 45 	lds	r24, 0x45D0	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    1d9c:	90 91 d1 45 	lds	r25, 0x45D1	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    1da0:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep>
    1da4:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1da8:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1dac:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1db0:	84 1b       	sub	r24, r20
    1db2:	95 0b       	sbc	r25, r21
    1db4:	18 16       	cp	r1, r24
    1db6:	19 06       	cpc	r1, r25
    1db8:	14 f0       	brlt	.+4      	; 0x1dbe <__vector_41+0x4a6>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    1dc2:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    1dc6:	f6 c0       	rjmp	.+492    	; 0x1fb4 <__vector_41+0x69c>
    1dc8:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1dcc:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1dd0:	09 2e       	mov	r0, r25
    1dd2:	00 0c       	add	r0, r0
    1dd4:	aa 0b       	sbc	r26, r26
    1dd6:	bb 0b       	sbc	r27, r27
    1dd8:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    1ddc:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1de0:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1de4:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1de8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1dec:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    1df0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1df4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1df8:	dd c0       	rjmp	.+442    	; 0x1fb4 <__vector_41+0x69c>
    1dfa:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    1dfe:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1e02:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1e06:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1e0a:	bb 23       	and	r27, r27
    1e0c:	0c f0       	brlt	.+2      	; 0x1e10 <__vector_41+0x4f8>
    1e0e:	d2 c0       	rjmp	.+420    	; 0x1fb4 <__vector_41+0x69c>
    1e10:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    1e14:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1e18:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1e1c:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	a1 1d       	adc	r26, r1
    1e24:	b1 1d       	adc	r27, r1
    1e26:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    1e2a:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1e2e:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1e32:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1e36:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    1e3a:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1e3e:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1e42:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1e46:	89 2b       	or	r24, r25
    1e48:	8a 2b       	or	r24, r26
    1e4a:	8b 2b       	or	r24, r27
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <__vector_41+0x538>
    1e4e:	b2 c0       	rjmp	.+356    	; 0x1fb4 <__vector_41+0x69c>
    1e50:	8d ef       	ldi	r24, 0xFD	; 253
    1e52:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    1e56:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1e5a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1e5e:	09 2e       	mov	r0, r25
    1e60:	00 0c       	add	r0, r0
    1e62:	aa 0b       	sbc	r26, r26
    1e64:	bb 0b       	sbc	r27, r27
    1e66:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    1e6a:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1e6e:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1e72:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1e76:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1e7a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    1e7e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1e82:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	be 01       	movw	r22, r28
    1e90:	6b 5f       	subi	r22, 0xFB	; 251
    1e92:	7f 4f       	sbci	r23, 0xFF	; 255
    1e94:	86 ed       	ldi	r24, 0xD6	; 214
    1e96:	95 e4       	ldi	r25, 0x45	; 69
    1e98:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
    1e9c:	8b c0       	rjmp	.+278    	; 0x1fb4 <__vector_41+0x69c>
    1e9e:	80 91 04 46 	lds	r24, 0x4604	; 0x804604 <g_event_start_time>
    1ea2:	90 91 05 46 	lds	r25, 0x4605	; 0x804605 <g_event_start_time+0x1>
    1ea6:	a0 91 06 46 	lds	r26, 0x4606	; 0x804606 <g_event_start_time+0x2>
    1eaa:	b0 91 07 46 	lds	r27, 0x4607	; 0x804607 <g_event_start_time+0x3>
    1eae:	89 2b       	or	r24, r25
    1eb0:	8a 2b       	or	r24, r26
    1eb2:	8b 2b       	or	r24, r27
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <__vector_41+0x5a0>
    1eb6:	7e c0       	rjmp	.+252    	; 0x1fb4 <__vector_41+0x69c>
    1eb8:	ce 01       	movw	r24, r28
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    1ec0:	49 81       	ldd	r20, Y+1	; 0x01
    1ec2:	5a 81       	ldd	r21, Y+2	; 0x02
    1ec4:	6b 81       	ldd	r22, Y+3	; 0x03
    1ec6:	7c 81       	ldd	r23, Y+4	; 0x04
    1ec8:	80 91 04 46 	lds	r24, 0x4604	; 0x804604 <g_event_start_time>
    1ecc:	90 91 05 46 	lds	r25, 0x4605	; 0x804605 <g_event_start_time+0x1>
    1ed0:	a0 91 06 46 	lds	r26, 0x4606	; 0x804606 <g_event_start_time+0x2>
    1ed4:	b0 91 07 46 	lds	r27, 0x4607	; 0x804607 <g_event_start_time+0x3>
    1ed8:	48 17       	cp	r20, r24
    1eda:	59 07       	cpc	r21, r25
    1edc:	6a 07       	cpc	r22, r26
    1ede:	7b 07       	cpc	r23, r27
    1ee0:	08 f4       	brcc	.+2      	; 0x1ee4 <__vector_41+0x5cc>
    1ee2:	68 c0       	rjmp	.+208    	; 0x1fb4 <__vector_41+0x69c>
    1ee4:	80 91 02 46 	lds	r24, 0x4602	; 0x804602 <g_intra_cycle_delay_time>
    1ee8:	90 91 03 46 	lds	r25, 0x4603	; 0x804603 <g_intra_cycle_delay_time+0x1>
    1eec:	89 2b       	or	r24, r25
    1eee:	59 f1       	breq	.+86     	; 0x1f46 <__vector_41+0x62e>
    1ef0:	8e ef       	ldi	r24, 0xFE	; 254
    1ef2:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    1ef6:	80 91 02 46 	lds	r24, 0x4602	; 0x804602 <g_intra_cycle_delay_time>
    1efa:	90 91 03 46 	lds	r25, 0x4603	; 0x804603 <g_intra_cycle_delay_time+0x1>
    1efe:	91 95       	neg	r25
    1f00:	81 95       	neg	r24
    1f02:	91 09       	sbc	r25, r1
    1f04:	09 2e       	mov	r0, r25
    1f06:	00 0c       	add	r0, r0
    1f08:	aa 0b       	sbc	r26, r26
    1f0a:	bb 0b       	sbc	r27, r27
    1f0c:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    1f10:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1f14:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1f18:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1f1c:	20 91 02 46 	lds	r18, 0x4602	; 0x804602 <g_intra_cycle_delay_time>
    1f20:	30 91 03 46 	lds	r19, 0x4603	; 0x804603 <g_intra_cycle_delay_time+0x1>
    1f24:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f28:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f2c:	82 0f       	add	r24, r18
    1f2e:	93 1f       	adc	r25, r19
    1f30:	20 91 00 46 	lds	r18, 0x4600	; 0x804600 <g_time_needed_for_ID>
    1f34:	30 91 01 46 	lds	r19, 0x4601	; 0x804601 <g_time_needed_for_ID+0x1>
    1f38:	82 1b       	sub	r24, r18
    1f3a:	93 0b       	sbc	r25, r19
    1f3c:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    1f40:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    1f44:	34 c0       	rjmp	.+104    	; 0x1fae <__vector_41+0x696>
    1f46:	8d ef       	ldi	r24, 0xFD	; 253
    1f48:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    1f4c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f50:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f54:	09 2e       	mov	r0, r25
    1f56:	00 0c       	add	r0, r0
    1f58:	aa 0b       	sbc	r26, r26
    1f5a:	bb 0b       	sbc	r27, r27
    1f5c:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    1f60:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    1f64:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    1f68:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    1f6c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f70:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f74:	20 91 00 46 	lds	r18, 0x4600	; 0x804600 <g_time_needed_for_ID>
    1f78:	30 91 01 46 	lds	r19, 0x4601	; 0x804601 <g_time_needed_for_ID+0x1>
    1f7c:	82 1b       	sub	r24, r18
    1f7e:	93 0b       	sbc	r25, r19
    1f80:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    1f84:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    1f88:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1f8c:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    1f90:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1f94:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	be 01       	movw	r22, r28
    1fa2:	6b 5f       	subi	r22, 0xFB	; 251
    1fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa6:	86 ed       	ldi	r24, 0xD6	; 214
    1fa8:	95 e4       	ldi	r25, 0x45	; 69
    1faa:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	80 93 0d 46 	sts	0x460D, r24	; 0x80460d <g_event_commenced>
    1fb4:	80 91 d3 45 	lds	r24, 0x45D3	; 0x8045d3 <_ZL19g_wifi_enable_delay>
    1fb8:	88 23       	and	r24, r24
    1fba:	e1 f0       	breq	.+56     	; 0x1ff4 <__vector_41+0x6dc>
    1fbc:	80 91 d3 45 	lds	r24, 0x45D3	; 0x8045d3 <_ZL19g_wifi_enable_delay>
    1fc0:	81 50       	subi	r24, 0x01	; 1
    1fc2:	80 93 d3 45 	sts	0x45D3, r24	; 0x8045d3 <_ZL19g_wifi_enable_delay>
    1fc6:	80 91 d3 45 	lds	r24, 0x45D3	; 0x8045d3 <_ZL19g_wifi_enable_delay>
    1fca:	85 30       	cpi	r24, 0x05	; 5
    1fcc:	39 f4       	brne	.+14     	; 0x1fdc <__vector_41+0x6c4>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	0e 94 97 28 	call	0x512e	; 0x512e <_Z10wifi_powerb>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	0e 94 a1 28 	call	0x5142	; 0x5142 <_Z10wifi_resetb>
    1fda:	63 c0       	rjmp	.+198    	; 0x20a2 <__vector_41+0x78a>
    1fdc:	80 91 d3 45 	lds	r24, 0x45D3	; 0x8045d3 <_ZL19g_wifi_enable_delay>
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	5f c0       	rjmp	.+190    	; 0x20a2 <__vector_41+0x78a>
    1fe4:	46 e0       	ldi	r20, 0x06	; 6
    1fe6:	60 e8       	ldi	r22, 0x80	; 128
    1fe8:	75 e2       	ldi	r23, 0x25	; 37
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <_Z12linkbus_initm14USART_Number_t>
    1ff2:	57 c0       	rjmp	.+174    	; 0x20a2 <__vector_41+0x78a>
    1ff4:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1ff8:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1ffc:	89 2b       	or	r24, r25
    1ffe:	71 f0       	breq	.+28     	; 0x201c <__vector_41+0x704>
    2000:	80 91 d4 45 	lds	r24, 0x45D4	; 0x8045d4 <_ZL20g_shutting_down_wifi>
    2004:	81 11       	cpse	r24, r1
    2006:	0c c0       	rjmp	.+24     	; 0x2020 <__vector_41+0x708>
    2008:	80 91 0e 46 	lds	r24, 0x460E	; 0x80460e <g_check_for_next_event>
    200c:	81 11       	cpse	r24, r1
    200e:	0a c0       	rjmp	.+20     	; 0x2024 <__vector_41+0x70c>
    2010:	80 91 0f 46 	lds	r24, 0x460F	; 0x80460f <g_waiting_for_next_event>
    2014:	88 23       	and	r24, r24
    2016:	41 f0       	breq	.+16     	; 0x2028 <__vector_41+0x710>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	07 c0       	rjmp	.+14     	; 0x202a <__vector_41+0x712>
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	05 c0       	rjmp	.+10     	; 0x202a <__vector_41+0x712>
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	03 c0       	rjmp	.+6      	; 0x202a <__vector_41+0x712>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	01 c0       	rjmp	.+2      	; 0x202a <__vector_41+0x712>
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	88 23       	and	r24, r24
    202c:	99 f1       	breq	.+102    	; 0x2094 <__vector_41+0x77c>
    202e:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2032:	88 23       	and	r24, r24
    2034:	79 f1       	breq	.+94     	; 0x2094 <__vector_41+0x77c>
    2036:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    203a:	81 50       	subi	r24, 0x01	; 1
    203c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2040:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2044:	81 11       	cpse	r24, r1
    2046:	26 c0       	rjmp	.+76     	; 0x2094 <__vector_41+0x77c>
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	0e 94 a1 28 	call	0x5142	; 0x5142 <_Z10wifi_resetb>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	0e 94 97 28 	call	0x512e	; 0x512e <_Z10wifi_powerb>
    2054:	10 92 d4 45 	sts	0x45D4, r1	; 0x8045d4 <_ZL20g_shutting_down_wifi>
    2058:	80 91 0c 46 	lds	r24, 0x460C	; 0x80460c <g_event_enabled>
    205c:	81 11       	cpse	r24, r1
    205e:	12 c0       	rjmp	.+36     	; 0x2084 <__vector_41+0x76c>
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	80 93 d5 45 	sts	0x45D5, r24	; 0x8045d5 <_ZL11g_sleepType>
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	80 93 10 46 	sts	0x4610, r24	; 0x804610 <_ZL13g_go_to_sleep>
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	9f ef       	ldi	r25, 0xFF	; 255
    2070:	dc 01       	movw	r26, r24
    2072:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    2076:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    207a:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    207e:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    2082:	06 c0       	rjmp	.+12     	; 0x2090 <__vector_41+0x778>
    2084:	80 91 d5 45 	lds	r24, 0x45D5	; 0x8045d5 <_ZL11g_sleepType>
    2088:	83 30       	cpi	r24, 0x03	; 3
    208a:	11 f4       	brne	.+4      	; 0x2090 <__vector_41+0x778>
    208c:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_Z12eventEnabledv>
    2090:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    2094:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    2098:	88 23       	and	r24, r24
    209a:	19 f0       	breq	.+6      	; 0x20a2 <__vector_41+0x78a>
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	80 93 d2 45 	sts	0x45D2, r24	; 0x8045d2 <_ZL16g_report_seconds>
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    20a8:	25 96       	adiw	r28, 0x05	; 5
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	ff 91       	pop	r31
    20b4:	ef 91       	pop	r30
    20b6:	bf 91       	pop	r27
    20b8:	af 91       	pop	r26
    20ba:	9f 91       	pop	r25
    20bc:	8f 91       	pop	r24
    20be:	7f 91       	pop	r23
    20c0:	6f 91       	pop	r22
    20c2:	5f 91       	pop	r21
    20c4:	4f 91       	pop	r20
    20c6:	3f 91       	pop	r19
    20c8:	2f 91       	pop	r18
    20ca:	0f 90       	pop	r0
    20cc:	0b be       	out	0x3b, r0	; 59
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <__vector_12>:
    20d8:	1f 92       	push	r1
    20da:	0f 92       	push	r0
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	0f 92       	push	r0
    20e0:	11 24       	eor	r1, r1
    20e2:	0b b6       	in	r0, 0x3b	; 59
    20e4:	0f 92       	push	r0
    20e6:	2f 93       	push	r18
    20e8:	3f 93       	push	r19
    20ea:	4f 93       	push	r20
    20ec:	5f 93       	push	r21
    20ee:	6f 93       	push	r22
    20f0:	7f 93       	push	r23
    20f2:	8f 93       	push	r24
    20f4:	9f 93       	push	r25
    20f6:	af 93       	push	r26
    20f8:	bf 93       	push	r27
    20fa:	ef 93       	push	r30
    20fc:	ff 93       	push	r31
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	00 d0       	rcall	.+0      	; 0x2104 <__vector_12+0x2c>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    210c:	80 ff       	sbrs	r24, 0
    210e:	d1 c0       	rjmp	.+418    	; 0x22b2 <__vector_12+0x1da>
    2110:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2114:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2118:	89 2b       	or	r24, r25
    211a:	49 f0       	breq	.+18     	; 0x212e <__vector_12+0x56>
    211c:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2120:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    212a:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    212e:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2132:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2136:	89 2b       	or	r24, r25
    2138:	49 f0       	breq	.+18     	; 0x214c <__vector_12+0x74>
    213a:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    213e:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    2148:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    214c:	80 91 c9 45 	lds	r24, 0x45C9	; 0x8045c9 <_ZL21g_util_tick_countdown>
    2150:	90 91 ca 45 	lds	r25, 0x45CA	; 0x8045ca <_ZL21g_util_tick_countdown+0x1>
    2154:	89 2b       	or	r24, r25
    2156:	49 f0       	breq	.+18     	; 0x216a <__vector_12+0x92>
    2158:	80 91 c9 45 	lds	r24, 0x45C9	; 0x8045c9 <_ZL21g_util_tick_countdown>
    215c:	90 91 ca 45 	lds	r25, 0x45CA	; 0x8045ca <_ZL21g_util_tick_countdown+0x1>
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	80 93 c9 45 	sts	0x45C9, r24	; 0x8045c9 <_ZL21g_util_tick_countdown>
    2166:	90 93 ca 45 	sts	0x45CA, r25	; 0x8045ca <_ZL21g_util_tick_countdown+0x1>
    216a:	80 91 0c 46 	lds	r24, 0x460C	; 0x80460c <g_event_enabled>
    216e:	88 23       	and	r24, r24
    2170:	29 f0       	breq	.+10     	; 0x217c <__vector_12+0xa4>
    2172:	80 91 0d 46 	lds	r24, 0x460D	; 0x80460d <g_event_commenced>
    2176:	81 11       	cpse	r24, r1
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <__vector_12+0xa8>
    217a:	03 c0       	rjmp	.+6      	; 0x2182 <__vector_12+0xaa>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <__vector_12+0xaa>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	88 23       	and	r24, r24
    2184:	09 f4       	brne	.+2      	; 0x2188 <__vector_12+0xb0>
    2186:	92 c0       	rjmp	.+292    	; 0x22ac <__vector_12+0x1d4>
    2188:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    218c:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    2190:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    2194:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    2198:	18 16       	cp	r1, r24
    219a:	19 06       	cpc	r1, r25
    219c:	1a 06       	cpc	r1, r26
    219e:	1b 06       	cpc	r1, r27
    21a0:	0c f0       	brlt	.+2      	; 0x21a4 <__vector_12+0xcc>
    21a2:	66 c0       	rjmp	.+204    	; 0x2270 <__vector_12+0x198>
    21a4:	80 91 3a 46 	lds	r24, 0x463A	; 0x80463a <_ZZ11__vector_12E7codeInc>
    21a8:	90 91 3b 46 	lds	r25, 0x463B	; 0x80463b <_ZZ11__vector_12E7codeInc+0x1>
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <__vector_12+0xda>
    21b0:	47 c0       	rjmp	.+142    	; 0x2240 <__vector_12+0x168>
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	80 93 3a 46 	sts	0x463A, r24	; 0x80463a <_ZZ11__vector_12E7codeInc>
    21b8:	90 93 3b 46 	sts	0x463B, r25	; 0x80463b <_ZZ11__vector_12E7codeInc+0x1>
    21bc:	89 2b       	or	r24, r25
    21be:	09 f0       	breq	.+2      	; 0x21c2 <__vector_12+0xea>
    21c0:	75 c0       	rjmp	.+234    	; 0x22ac <__vector_12+0x1d4>
    21c2:	ae 01       	movw	r20, r28
    21c4:	4f 5f       	subi	r20, 0xFF	; 255
    21c6:	5f 4f       	sbci	r21, 0xFF	; 255
    21c8:	be 01       	movw	r22, r28
    21ca:	6e 5f       	subi	r22, 0xFE	; 254
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
    21d6:	80 93 3c 46 	sts	0x463C, r24	; 0x80463c <_ZZ11__vector_12E3key>
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	81 11       	cpse	r24, r1
    21de:	25 c0       	rjmp	.+74     	; 0x222a <__vector_12+0x152>
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	88 23       	and	r24, r24
    21e4:	11 f1       	breq	.+68     	; 0x222a <__vector_12+0x152>
    21e6:	8d ef       	ldi	r24, 0xFD	; 253
    21e8:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    21ec:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    21f0:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    21f4:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    21f8:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	8a 83       	std	Y+2, r24	; 0x02
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	be 01       	movw	r22, r28
    2206:	6e 5f       	subi	r22, 0xFE	; 254
    2208:	7f 4f       	sbci	r23, 0xFF	; 255
    220a:	86 ed       	ldi	r24, 0xD6	; 214
    220c:	95 e4       	ldi	r25, 0x45	; 69
    220e:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
    2212:	ae 01       	movw	r20, r28
    2214:	4f 5f       	subi	r20, 0xFF	; 255
    2216:	5f 4f       	sbci	r21, 0xFF	; 255
    2218:	be 01       	movw	r22, r28
    221a:	6e 5f       	subi	r22, 0xFE	; 254
    221c:	7f 4f       	sbci	r23, 0xFF	; 255
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
    2226:	80 93 3c 46 	sts	0x463C, r24	; 0x80463c <_ZZ11__vector_12E3key>
    222a:	80 91 3c 46 	lds	r24, 0x463C	; 0x80463c <_ZZ11__vector_12E3key>
    222e:	88 23       	and	r24, r24
    2230:	e9 f1       	breq	.+122    	; 0x22ac <__vector_12+0x1d4>
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	0e 94 70 43 	call	0x86e0	; 0x86e0 <_Z18powerToTransmitterh>
    2238:	89 b1       	in	r24, 0x09	; 9
    223a:	8f 7b       	andi	r24, 0xBF	; 191
    223c:	89 b9       	out	0x09, r24	; 9
    223e:	36 c0       	rjmp	.+108    	; 0x22ac <__vector_12+0x1d4>
    2240:	80 91 3c 46 	lds	r24, 0x463C	; 0x80463c <_ZZ11__vector_12E3key>
    2244:	0e 94 79 43 	call	0x86f2	; 0x86f2 <_Z14keyTransmitterh>
    2248:	80 91 3c 46 	lds	r24, 0x463C	; 0x80463c <_ZZ11__vector_12E3key>
    224c:	81 11       	cpse	r24, r1
    224e:	04 c0       	rjmp	.+8      	; 0x2258 <__vector_12+0x180>
    2250:	89 b1       	in	r24, 0x09	; 9
    2252:	80 64       	ori	r24, 0x40	; 64
    2254:	89 b9       	out	0x09, r24	; 9
    2256:	03 c0       	rjmp	.+6      	; 0x225e <__vector_12+0x186>
    2258:	89 b1       	in	r24, 0x09	; 9
    225a:	8f 7b       	andi	r24, 0xBF	; 191
    225c:	89 b9       	out	0x09, r24	; 9
    225e:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    2262:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    2266:	80 93 3a 46 	sts	0x463A, r24	; 0x80463a <_ZZ11__vector_12E7codeInc>
    226a:	90 93 3b 46 	sts	0x463B, r25	; 0x80463b <_ZZ11__vector_12E7codeInc+0x1>
    226e:	1e c0       	rjmp	.+60     	; 0x22ac <__vector_12+0x1d4>
    2270:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    2274:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    2278:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    227c:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    2280:	89 2b       	or	r24, r25
    2282:	8a 2b       	or	r24, r26
    2284:	8b 2b       	or	r24, r27
    2286:	91 f4       	brne	.+36     	; 0x22ac <__vector_12+0x1d4>
    2288:	80 91 3c 46 	lds	r24, 0x463C	; 0x80463c <_ZZ11__vector_12E3key>
    228c:	88 23       	and	r24, r24
    228e:	71 f0       	breq	.+28     	; 0x22ac <__vector_12+0x1d4>
    2290:	10 92 3c 46 	sts	0x463C, r1	; 0x80463c <_ZZ11__vector_12E3key>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	0e 94 79 43 	call	0x86f2	; 0x86f2 <_Z14keyTransmitterh>
    229a:	89 b1       	in	r24, 0x09	; 9
    229c:	80 64       	ori	r24, 0x40	; 64
    229e:	89 b9       	out	0x09, r24	; 9
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	0e 94 70 43 	call	0x86e0	; 0x86e0 <_Z18powerToTransmitterh>
    22a6:	8e ef       	ldi	r24, 0xFE	; 254
    22a8:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	ff 91       	pop	r31
    22bc:	ef 91       	pop	r30
    22be:	bf 91       	pop	r27
    22c0:	af 91       	pop	r26
    22c2:	9f 91       	pop	r25
    22c4:	8f 91       	pop	r24
    22c6:	7f 91       	pop	r23
    22c8:	6f 91       	pop	r22
    22ca:	5f 91       	pop	r21
    22cc:	4f 91       	pop	r20
    22ce:	3f 91       	pop	r19
    22d0:	2f 91       	pop	r18
    22d2:	0f 90       	pop	r0
    22d4:	0b be       	out	0x3b, r0	; 59
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	0f 90       	pop	r0
    22dc:	1f 90       	pop	r1
    22de:	18 95       	reti

000022e0 <main>:
    22e0:	0e 94 b1 07 	call	0xf62	; 0xf62 <atmel_start_init>
    22e4:	89 b1       	in	r24, 0x09	; 9
    22e6:	80 64       	ori	r24, 0x40	; 64
    22e8:	89 b9       	out	0x09, r24	; 9
    22ea:	80 e2       	ldi	r24, 0x20	; 32
    22ec:	96 e4       	ldi	r25, 0x46	; 70
    22ee:	0e 94 8b 31 	call	0x6316	; 0x6316 <_ZN13EepromManager20initializeEEPROMVarsEv>
    22f2:	80 e2       	ldi	r24, 0x20	; 32
    22f4:	96 e4       	ldi	r25, 0x46	; 70
    22f6:	0e 94 9f 30 	call	0x613e	; 0x613e <_ZN13EepromManager11readNonVolsEv>
    22fa:	0e 94 a3 3a 	call	0x7546	; 0x7546 <sb_send_NewLine>
    22fe:	87 e4       	ldi	r24, 0x47	; 71
    2300:	90 e4       	ldi	r25, 0x40	; 64
    2302:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2306:	84 e6       	ldi	r24, 0x64	; 100
    2308:	90 e4       	ldi	r25, 0x40	; 64
    230a:	9f 93       	push	r25
    230c:	8f 93       	push	r24
    230e:	88 e6       	ldi	r24, 0x68	; 104
    2310:	90 e4       	ldi	r25, 0x40	; 64
    2312:	9f 93       	push	r25
    2314:	8f 93       	push	r24
    2316:	85 e9       	ldi	r24, 0x95	; 149
    2318:	95 e4       	ldi	r25, 0x45	; 69
    231a:	9f 93       	push	r25
    231c:	8f 93       	push	r24
    231e:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    2322:	85 e9       	ldi	r24, 0x95	; 149
    2324:	95 e4       	ldi	r25, 0x45	; 69
    2326:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    232a:	85 e7       	ldi	r24, 0x75	; 117
    232c:	90 e4       	ldi	r25, 0x40	; 64
    232e:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	0e 94 17 28 	call	0x502e	; 0x502e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
    2338:	0e 94 2b 44 	call	0x8856	; 0x8856 <_Z16init_transmitterv>
    233c:	80 93 c7 45 	sts	0x45C7, r24	; 0x8045c7 <_ZL17g_last_error_code>
    2340:	80 91 c7 45 	lds	r24, 0x45C7	; 0x8045c7 <_ZL17g_last_error_code>
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	88 23       	and	r24, r24
    2352:	31 f0       	breq	.+12     	; 0x2360 <main+0x80>
    2354:	0e 94 a3 3a 	call	0x7546	; 0x7546 <sb_send_NewLine>
    2358:	88 eb       	ldi	r24, 0xB8	; 184
    235a:	91 e4       	ldi	r25, 0x41	; 65
    235c:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2360:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <ds3231_init>
    2364:	88 23       	and	r24, r24
    2366:	31 f0       	breq	.+12     	; 0x2374 <main+0x94>
    2368:	0e 94 a3 3a 	call	0x7546	; 0x7546 <sb_send_NewLine>
    236c:	83 ee       	ldi	r24, 0xE3	; 227
    236e:	91 e4       	ldi	r25, 0x41	; 65
    2370:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2374:	0e 94 ab 28 	call	0x5156	; 0x5156 <_Z11wifiPresentv>
    2378:	81 11       	cpse	r24, r1
    237a:	06 c0       	rjmp	.+12     	; 0x2388 <main+0xa8>
    237c:	0e 94 a3 3a 	call	0x7546	; 0x7546 <sb_send_NewLine>
    2380:	8b e0       	ldi	r24, 0x0B	; 11
    2382:	92 e4       	ldi	r25, 0x42	; 66
    2384:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2388:	0e 94 a3 3a 	call	0x7546	; 0x7546 <sb_send_NewLine>
    238c:	0e 94 98 3a 	call	0x7530	; 0x7530 <sb_send_NewPrompt>
    2390:	6a ef       	ldi	r22, 0xFA	; 250
    2392:	70 e0       	ldi	r23, 0x00	; 0
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 77 42 	call	0x84ee	; 0x84ee <util_delay_ms>
    239c:	88 23       	and	r24, r24
    239e:	c1 f3       	breq	.-16     	; 0x2390 <main+0xb0>
    23a0:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_Z17handleLinkBusMsgsv>
    23a4:	0e 94 d5 11 	call	0x23aa	; 0x23aa <_Z19handleSerialBusMsgsv>
    23a8:	f3 cf       	rjmp	.-26     	; 0x2390 <main+0xb0>

000023aa <_Z19handleSerialBusMsgsv>:
    23aa:	cf 92       	push	r12
    23ac:	df 92       	push	r13
    23ae:	ef 92       	push	r14
    23b0:	ff 92       	push	r15
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	cd 56       	subi	r28, 0x6D	; 109
    23c0:	d1 09       	sbc	r29, r1
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0e 94 ce 39 	call	0x739c	; 0x739c <nextFullSBRxBuffer>
    23ca:	8a 87       	std	Y+10, r24	; 0x0a
    23cc:	9b 87       	std	Y+11, r25	; 0x0b
    23ce:	21 e0       	ldi	r18, 0x01	; 1
    23d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d4:	89 2b       	or	r24, r25
    23d6:	09 f4       	brne	.+2      	; 0x23da <_Z19handleSerialBusMsgsv+0x30>
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	22 23       	and	r18, r18
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <_Z19handleSerialBusMsgsv+0x36>
    23de:	73 c6       	rjmp	.+3302   	; 0x30c6 <_Z19handleSerialBusMsgsv+0xd1c>
    23e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e4:	fc 01       	movw	r30, r24
    23e6:	81 81       	ldd	r24, Z+1	; 0x01
    23e8:	92 81       	ldd	r25, Z+2	; 0x02
    23ea:	8c 87       	std	Y+12, r24	; 0x0c
    23ec:	9d 87       	std	Y+13, r25	; 0x0d
    23ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    23f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    23f2:	8a 3e       	cpi	r24, 0xEA	; 234
    23f4:	f2 e2       	ldi	r31, 0x22	; 34
    23f6:	9f 07       	cpc	r25, r31
    23f8:	09 f4       	brne	.+2      	; 0x23fc <_Z19handleSerialBusMsgsv+0x52>
    23fa:	51 c3       	rjmp	.+1698   	; 0x2a9e <_Z19handleSerialBusMsgsv+0x6f4>
    23fc:	8b 3e       	cpi	r24, 0xEB	; 235
    23fe:	22 e2       	ldi	r18, 0x22	; 34
    2400:	92 07       	cpc	r25, r18
    2402:	b8 f4       	brcc	.+46     	; 0x2432 <_Z19handleSerialBusMsgsv+0x88>
    2404:	8f 36       	cpi	r24, 0x6F	; 111
    2406:	ed e1       	ldi	r30, 0x1D	; 29
    2408:	9e 07       	cpc	r25, r30
    240a:	09 f4       	brne	.+2      	; 0x240e <_Z19handleSerialBusMsgsv+0x64>
    240c:	9a c3       	rjmp	.+1844   	; 0x2b42 <_Z19handleSerialBusMsgsv+0x798>
    240e:	80 37       	cpi	r24, 0x70	; 112
    2410:	fd e1       	ldi	r31, 0x1D	; 29
    2412:	9f 07       	cpc	r25, r31
    2414:	28 f4       	brcc	.+10     	; 0x2420 <_Z19handleSerialBusMsgsv+0x76>
    2416:	8e 31       	cpi	r24, 0x1E	; 30
    2418:	93 40       	sbci	r25, 0x03	; 3
    241a:	09 f4       	brne	.+2      	; 0x241e <_Z19handleSerialBusMsgsv+0x74>
    241c:	2e c2       	rjmp	.+1116   	; 0x287a <_Z19handleSerialBusMsgsv+0x4d0>
    241e:	41 c6       	rjmp	.+3202   	; 0x30a2 <_Z19handleSerialBusMsgsv+0xcf8>
    2420:	86 3c       	cpi	r24, 0xC6	; 198
    2422:	ee e1       	ldi	r30, 0x1E	; 30
    2424:	9e 07       	cpc	r25, r30
    2426:	e9 f0       	breq	.+58     	; 0x2462 <_Z19handleSerialBusMsgsv+0xb8>
    2428:	81 3d       	cpi	r24, 0xD1	; 209
    242a:	9e 41       	sbci	r25, 0x1E	; 30
    242c:	09 f4       	brne	.+2      	; 0x2430 <_Z19handleSerialBusMsgsv+0x86>
    242e:	7b c1       	rjmp	.+758    	; 0x2726 <_Z19handleSerialBusMsgsv+0x37c>
    2430:	38 c6       	rjmp	.+3184   	; 0x30a2 <_Z19handleSerialBusMsgsv+0xcf8>
    2432:	82 37       	cpi	r24, 0x72	; 114
    2434:	23 e2       	ldi	r18, 0x23	; 35
    2436:	92 07       	cpc	r25, r18
    2438:	09 f4       	brne	.+2      	; 0x243c <_Z19handleSerialBusMsgsv+0x92>
    243a:	ad c2       	rjmp	.+1370   	; 0x2996 <_Z19handleSerialBusMsgsv+0x5ec>
    243c:	83 37       	cpi	r24, 0x73	; 115
    243e:	e3 e2       	ldi	r30, 0x23	; 35
    2440:	9e 07       	cpc	r25, r30
    2442:	28 f4       	brcc	.+10     	; 0x244e <_Z19handleSerialBusMsgsv+0xa4>
    2444:	88 3f       	cpi	r24, 0xF8	; 248
    2446:	92 42       	sbci	r25, 0x22	; 34
    2448:	09 f4       	brne	.+2      	; 0x244c <_Z19handleSerialBusMsgsv+0xa2>
    244a:	0a c1       	rjmp	.+532    	; 0x2660 <_Z19handleSerialBusMsgsv+0x2b6>
    244c:	2a c6       	rjmp	.+3156   	; 0x30a2 <_Z19handleSerialBusMsgsv+0xcf8>
    244e:	84 33       	cpi	r24, 0x34	; 52
    2450:	24 e2       	ldi	r18, 0x24	; 36
    2452:	92 07       	cpc	r25, r18
    2454:	09 f4       	brne	.+2      	; 0x2458 <_Z19handleSerialBusMsgsv+0xae>
    2456:	d5 c1       	rjmp	.+938    	; 0x2802 <_Z19handleSerialBusMsgsv+0x458>
    2458:	85 3c       	cpi	r24, 0xC5	; 197
    245a:	94 42       	sbci	r25, 0x24	; 36
    245c:	09 f4       	brne	.+2      	; 0x2460 <_Z19handleSerialBusMsgsv+0xb6>
    245e:	0d c6       	rjmp	.+3098   	; 0x307a <_Z19handleSerialBusMsgsv+0xcd0>
    2460:	20 c6       	rjmp	.+3136   	; 0x30a2 <_Z19handleSerialBusMsgsv+0xcf8>
    2462:	8a 85       	ldd	r24, Y+10	; 0x0a
    2464:	9b 85       	ldd	r25, Y+11	; 0x0b
    2466:	fc 01       	movw	r30, r24
    2468:	83 81       	ldd	r24, Z+3	; 0x03
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	89 2b       	or	r24, r25
    2478:	09 f4       	brne	.+2      	; 0x247c <_Z19handleSerialBusMsgsv+0xd2>
    247a:	d0 c0       	rjmp	.+416    	; 0x261c <_Z19handleSerialBusMsgsv+0x272>
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	82 34       	cpi	r24, 0x42	; 66
    2482:	91 05       	cpc	r25, r1
    2484:	19 f4       	brne	.+6      	; 0x248c <_Z19handleSerialBusMsgsv+0xe2>
    2486:	19 82       	std	Y+1, r1	; 0x01
    2488:	1a 82       	std	Y+2, r1	; 0x02
    248a:	ac c0       	rjmp	.+344    	; 0x25e4 <_Z19handleSerialBusMsgsv+0x23a>
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	86 34       	cpi	r24, 0x46	; 70
    2492:	91 05       	cpc	r25, r1
    2494:	29 f4       	brne	.+10     	; 0x24a0 <_Z19handleSerialBusMsgsv+0xf6>
    2496:	86 e0       	ldi	r24, 0x06	; 6
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	a2 c0       	rjmp	.+324    	; 0x25e4 <_Z19handleSerialBusMsgsv+0x23a>
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	83 34       	cpi	r24, 0x43	; 67
    24a6:	91 05       	cpc	r25, r1
    24a8:	b9 f5       	brne	.+110    	; 0x2518 <_Z19handleSerialBusMsgsv+0x16e>
    24aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ae:	fc 01       	movw	r30, r24
    24b0:	87 89       	ldd	r24, Z+23	; 0x17
    24b2:	8b 83       	std	Y+3, r24	; 0x03
    24b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24b8:	fc 01       	movw	r30, r24
    24ba:	10 8e       	std	Z+24, r1	; 0x18
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	82 34       	cpi	r24, 0x42	; 66
    24c0:	11 f4       	brne	.+4      	; 0x24c6 <_Z19handleSerialBusMsgsv+0x11c>
    24c2:	80 e3       	ldi	r24, 0x30	; 48
    24c4:	8b 83       	std	Y+3, r24	; 0x03
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	c0 97       	sbiw	r24, 0x30	; 48
    24ce:	0a 97       	sbiw	r24, 0x0a	; 10
    24d0:	08 f0       	brcs	.+2      	; 0x24d4 <_Z19handleSerialBusMsgsv+0x12a>
    24d2:	88 c0       	rjmp	.+272    	; 0x25e4 <_Z19handleSerialBusMsgsv+0x23a>
    24d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24d8:	47 96       	adiw	r24, 0x17	; 23
    24da:	0e 94 da 49 	call	0x93b4	; 0x93b4 <atoi>
    24de:	8e 87       	std	Y+14, r24	; 0x0e
    24e0:	9f 87       	std	Y+15, r25	; 0x0f
    24e2:	18 8a       	std	Y+16, r1	; 0x10
    24e4:	85 e0       	ldi	r24, 0x05	; 5
    24e6:	89 8b       	std	Y+17, r24	; 0x11
    24e8:	89 89       	ldd	r24, Y+17	; 0x11
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    24f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24f2:	28 17       	cp	r18, r24
    24f4:	39 07       	cpc	r19, r25
    24f6:	24 f4       	brge	.+8      	; 0x2500 <_Z19handleSerialBusMsgsv+0x156>
    24f8:	89 89       	ldd	r24, Y+17	; 0x11
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	09 c0       	rjmp	.+18     	; 0x2512 <_Z19handleSerialBusMsgsv+0x168>
    2500:	88 89       	ldd	r24, Y+16	; 0x10
    2502:	88 2f       	mov	r24, r24
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	2e 85       	ldd	r18, Y+14	; 0x0e
    2508:	3f 85       	ldd	r19, Y+15	; 0x0f
    250a:	82 17       	cp	r24, r18
    250c:	93 07       	cpc	r25, r19
    250e:	0c f4       	brge	.+2      	; 0x2512 <_Z19handleSerialBusMsgsv+0x168>
    2510:	c9 01       	movw	r24, r18
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	9a 83       	std	Y+2, r25	; 0x02
    2516:	66 c0       	rjmp	.+204    	; 0x25e4 <_Z19handleSerialBusMsgsv+0x23a>
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	83 35       	cpi	r24, 0x53	; 83
    251e:	91 05       	cpc	r25, r1
    2520:	09 f0       	breq	.+2      	; 0x2524 <_Z19handleSerialBusMsgsv+0x17a>
    2522:	59 c0       	rjmp	.+178    	; 0x25d6 <_Z19handleSerialBusMsgsv+0x22c>
    2524:	1c 82       	std	Y+4, r1	; 0x04
    2526:	8a 85       	ldd	r24, Y+10	; 0x0a
    2528:	9b 85       	ldd	r25, Y+11	; 0x0b
    252a:	fc 01       	movw	r30, r24
    252c:	87 89       	ldd	r24, Z+23	; 0x17
    252e:	8a 8b       	std	Y+18, r24	; 0x12
    2530:	8a 85       	ldd	r24, Y+10	; 0x0a
    2532:	9b 85       	ldd	r25, Y+11	; 0x0b
    2534:	fc 01       	movw	r30, r24
    2536:	80 8d       	ldd	r24, Z+24	; 0x18
    2538:	8b 8b       	std	Y+19, r24	; 0x13
    253a:	8a 85       	ldd	r24, Y+10	; 0x0a
    253c:	9b 85       	ldd	r25, Y+11	; 0x0b
    253e:	fc 01       	movw	r30, r24
    2540:	11 8e       	std	Z+25, r1	; 0x19
    2542:	8a 89       	ldd	r24, Y+18	; 0x12
    2544:	82 34       	cpi	r24, 0x42	; 66
    2546:	11 f4       	brne	.+4      	; 0x254c <_Z19handleSerialBusMsgsv+0x1a2>
    2548:	1c 82       	std	Y+4, r1	; 0x04
    254a:	36 c0       	rjmp	.+108    	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    254c:	8a 89       	ldd	r24, Y+18	; 0x12
    254e:	86 34       	cpi	r24, 0x46	; 70
    2550:	51 f4       	brne	.+20     	; 0x2566 <_Z19handleSerialBusMsgsv+0x1bc>
    2552:	8b 89       	ldd	r24, Y+19	; 0x13
    2554:	81 33       	cpi	r24, 0x31	; 49
    2556:	80 f1       	brcs	.+96     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    2558:	8b 89       	ldd	r24, Y+19	; 0x13
    255a:	86 33       	cpi	r24, 0x36	; 54
    255c:	68 f5       	brcc	.+90     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    255e:	8b 89       	ldd	r24, Y+19	; 0x13
    2560:	84 52       	subi	r24, 0x24	; 36
    2562:	8c 83       	std	Y+4, r24	; 0x04
    2564:	29 c0       	rjmp	.+82     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    2566:	8a 89       	ldd	r24, Y+18	; 0x12
    2568:	83 35       	cpi	r24, 0x53	; 83
    256a:	69 f4       	brne	.+26     	; 0x2586 <_Z19handleSerialBusMsgsv+0x1dc>
    256c:	8b 89       	ldd	r24, Y+19	; 0x13
    256e:	81 33       	cpi	r24, 0x31	; 49
    2570:	38 f0       	brcs	.+14     	; 0x2580 <_Z19handleSerialBusMsgsv+0x1d6>
    2572:	8b 89       	ldd	r24, Y+19	; 0x13
    2574:	86 33       	cpi	r24, 0x36	; 54
    2576:	20 f4       	brcc	.+8      	; 0x2580 <_Z19handleSerialBusMsgsv+0x1d6>
    2578:	8b 89       	ldd	r24, Y+19	; 0x13
    257a:	89 52       	subi	r24, 0x29	; 41
    257c:	8c 83       	std	Y+4, r24	; 0x04
    257e:	1c c0       	rjmp	.+56     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    2580:	87 e0       	ldi	r24, 0x07	; 7
    2582:	8c 83       	std	Y+4, r24	; 0x04
    2584:	19 c0       	rjmp	.+50     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    2586:	8b 89       	ldd	r24, Y+19	; 0x13
    2588:	86 34       	cpi	r24, 0x46	; 70
    258a:	51 f4       	brne	.+20     	; 0x25a0 <_Z19handleSerialBusMsgsv+0x1f6>
    258c:	8a 89       	ldd	r24, Y+18	; 0x12
    258e:	81 33       	cpi	r24, 0x31	; 49
    2590:	98 f0       	brcs	.+38     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    2592:	8a 89       	ldd	r24, Y+18	; 0x12
    2594:	86 33       	cpi	r24, 0x36	; 54
    2596:	80 f4       	brcc	.+32     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    2598:	8a 89       	ldd	r24, Y+18	; 0x12
    259a:	84 52       	subi	r24, 0x24	; 36
    259c:	8c 83       	std	Y+4, r24	; 0x04
    259e:	0c c0       	rjmp	.+24     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    25a0:	8b 89       	ldd	r24, Y+19	; 0x13
    25a2:	83 35       	cpi	r24, 0x53	; 83
    25a4:	49 f4       	brne	.+18     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    25a6:	8a 89       	ldd	r24, Y+18	; 0x12
    25a8:	81 33       	cpi	r24, 0x31	; 49
    25aa:	30 f0       	brcs	.+12     	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    25ac:	8a 89       	ldd	r24, Y+18	; 0x12
    25ae:	86 33       	cpi	r24, 0x36	; 54
    25b0:	18 f4       	brcc	.+6      	; 0x25b8 <_Z19handleSerialBusMsgsv+0x20e>
    25b2:	8a 89       	ldd	r24, Y+18	; 0x12
    25b4:	89 52       	subi	r24, 0x29	; 41
    25b6:	8c 83       	std	Y+4, r24	; 0x04
    25b8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ba:	87 30       	cpi	r24, 0x07	; 7
    25bc:	48 f0       	brcs	.+18     	; 0x25d0 <_Z19handleSerialBusMsgsv+0x226>
    25be:	8c 81       	ldd	r24, Y+4	; 0x04
    25c0:	82 31       	cpi	r24, 0x12	; 18
    25c2:	30 f4       	brcc	.+12     	; 0x25d0 <_Z19handleSerialBusMsgsv+0x226>
    25c4:	8c 81       	ldd	r24, Y+4	; 0x04
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	0a c0       	rjmp	.+20     	; 0x25e4 <_Z19handleSerialBusMsgsv+0x23a>
    25d0:	19 82       	std	Y+1, r1	; 0x01
    25d2:	1a 82       	std	Y+2, r1	; 0x02
    25d4:	07 c0       	rjmp	.+14     	; 0x25e4 <_Z19handleSerialBusMsgsv+0x23a>
    25d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25da:	03 96       	adiw	r24, 0x03	; 3
    25dc:	0e 94 da 49 	call	0x93b4	; 0x93b4 <atoi>
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	99 23       	and	r25, r25
    25ea:	c4 f0       	brlt	.+48     	; 0x261c <_Z19handleSerialBusMsgsv+0x272>
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	42 97       	sbiw	r24, 0x12	; 18
    25f2:	a4 f4       	brge	.+40     	; 0x261c <_Z19handleSerialBusMsgsv+0x272>
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	8e ab       	std	Y+54, r24	; 0x36
    25f8:	ce 01       	movw	r24, r28
    25fa:	c6 96       	adiw	r24, 0x36	; 54
    25fc:	ac 01       	movw	r20, r24
    25fe:	69 e2       	ldi	r22, 0x29	; 41
    2600:	80 e2       	ldi	r24, 0x20	; 32
    2602:	96 e4       	ldi	r25, 0x46	; 70
    2604:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2608:	9e a9       	ldd	r25, Y+54	; 0x36
    260a:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    260e:	98 17       	cp	r25, r24
    2610:	29 f0       	breq	.+10     	; 0x261c <_Z19handleSerialBusMsgsv+0x272>
    2612:	ce 01       	movw	r24, r28
    2614:	c6 96       	adiw	r24, 0x36	; 54
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    261c:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    2620:	88 2f       	mov	r24, r24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	29 2f       	mov	r18, r25
    2626:	2f 93       	push	r18
    2628:	8f 93       	push	r24
    262a:	80 e3       	ldi	r24, 0x30	; 48
    262c:	92 e4       	ldi	r25, 0x42	; 66
    262e:	89 2f       	mov	r24, r25
    2630:	8f 93       	push	r24
    2632:	80 e3       	ldi	r24, 0x30	; 48
    2634:	92 e4       	ldi	r25, 0x42	; 66
    2636:	8f 93       	push	r24
    2638:	85 e9       	ldi	r24, 0x95	; 149
    263a:	95 e4       	ldi	r25, 0x45	; 69
    263c:	89 2f       	mov	r24, r25
    263e:	8f 93       	push	r24
    2640:	85 e9       	ldi	r24, 0x95	; 149
    2642:	95 e4       	ldi	r25, 0x45	; 69
    2644:	8f 93       	push	r24
    2646:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	85 e9       	ldi	r24, 0x95	; 149
    2658:	95 e4       	ldi	r25, 0x45	; 69
    265a:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    265e:	2b c5       	rjmp	.+2646   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    2660:	8a 85       	ldd	r24, Y+10	; 0x0a
    2662:	9b 85       	ldd	r25, Y+11	; 0x0b
    2664:	fc 01       	movw	r30, r24
    2666:	83 81       	ldd	r24, Z+3	; 0x03
    2668:	88 23       	and	r24, r24
    266a:	e9 f1       	breq	.+122    	; 0x26e6 <_Z19handleSerialBusMsgsv+0x33c>
    266c:	8a 85       	ldd	r24, Y+10	; 0x0a
    266e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2670:	03 96       	adiw	r24, 0x03	; 3
    2672:	0e 94 da 49 	call	0x93b4	; 0x93b4 <atoi>
    2676:	80 93 3d 46 	sts	0x463D, r24	; 0x80463d <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    267a:	90 93 3e 46 	sts	0x463E, r25	; 0x80463e <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    267e:	80 91 3d 46 	lds	r24, 0x463D	; 0x80463d <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    2682:	90 91 3e 46 	lds	r25, 0x463E	; 0x80463e <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    2686:	89 38       	cpi	r24, 0x89	; 137
    2688:	93 41       	sbci	r25, 0x13	; 19
    268a:	68 f4       	brcc	.+26     	; 0x26a6 <_Z19handleSerialBusMsgsv+0x2fc>
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	8d e3       	ldi	r24, 0x3D	; 61
    2692:	96 e4       	ldi	r25, 0x46	; 70
    2694:	0e 94 9b 43 	call	0x8736	; 0x8736 <_Z15txSetParametersPjPh>
    2698:	8c 8b       	std	Y+20, r24	; 0x14
    269a:	8c 89       	ldd	r24, Y+20	; 0x14
    269c:	88 23       	and	r24, r24
    269e:	19 f0       	breq	.+6      	; 0x26a6 <_Z19handleSerialBusMsgsv+0x2fc>
    26a0:	8c 89       	ldd	r24, Y+20	; 0x14
    26a2:	80 93 c7 45 	sts	0x45C7, r24	; 0x8045c7 <_ZL17g_last_error_code>
    26a6:	0e 94 96 43 	call	0x872c	; 0x872c <_Z12txGetPowerMwv>
    26aa:	29 2f       	mov	r18, r25
    26ac:	2f 93       	push	r18
    26ae:	8f 93       	push	r24
    26b0:	88 e3       	ldi	r24, 0x38	; 56
    26b2:	92 e4       	ldi	r25, 0x42	; 66
    26b4:	89 2f       	mov	r24, r25
    26b6:	8f 93       	push	r24
    26b8:	88 e3       	ldi	r24, 0x38	; 56
    26ba:	92 e4       	ldi	r25, 0x42	; 66
    26bc:	8f 93       	push	r24
    26be:	85 e9       	ldi	r24, 0x95	; 149
    26c0:	95 e4       	ldi	r25, 0x45	; 69
    26c2:	89 2f       	mov	r24, r25
    26c4:	8f 93       	push	r24
    26c6:	85 e9       	ldi	r24, 0x95	; 149
    26c8:	95 e4       	ldi	r25, 0x45	; 69
    26ca:	8f 93       	push	r24
    26cc:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	85 e9       	ldi	r24, 0x95	; 149
    26de:	95 e4       	ldi	r25, 0x45	; 69
    26e0:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    26e4:	e8 c4       	rjmp	.+2512   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    26e6:	0e 94 96 43 	call	0x872c	; 0x872c <_Z12txGetPowerMwv>
    26ea:	29 2f       	mov	r18, r25
    26ec:	2f 93       	push	r18
    26ee:	8f 93       	push	r24
    26f0:	88 e3       	ldi	r24, 0x38	; 56
    26f2:	92 e4       	ldi	r25, 0x42	; 66
    26f4:	89 2f       	mov	r24, r25
    26f6:	8f 93       	push	r24
    26f8:	88 e3       	ldi	r24, 0x38	; 56
    26fa:	92 e4       	ldi	r25, 0x42	; 66
    26fc:	8f 93       	push	r24
    26fe:	85 e9       	ldi	r24, 0x95	; 149
    2700:	95 e4       	ldi	r25, 0x45	; 69
    2702:	89 2f       	mov	r24, r25
    2704:	8f 93       	push	r24
    2706:	85 e9       	ldi	r24, 0x95	; 149
    2708:	95 e4       	ldi	r25, 0x45	; 69
    270a:	8f 93       	push	r24
    270c:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	85 e9       	ldi	r24, 0x95	; 149
    271e:	95 e4       	ldi	r25, 0x45	; 69
    2720:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2724:	c8 c4       	rjmp	.+2448   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    2726:	1d 82       	std	Y+5, r1	; 0x05
    2728:	1e 82       	std	Y+6, r1	; 0x06
    272a:	1f 82       	std	Y+7, r1	; 0x07
    272c:	18 86       	std	Y+8, r1	; 0x08
    272e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2730:	9b 85       	ldd	r25, Y+11	; 0x0b
    2732:	fc 01       	movw	r30, r24
    2734:	83 81       	ldd	r24, Z+3	; 0x03
    2736:	88 23       	and	r24, r24
    2738:	89 f1       	breq	.+98     	; 0x279c <_Z19handleSerialBusMsgsv+0x3f2>
    273a:	8a 85       	ldd	r24, Y+10	; 0x0a
    273c:	9b 85       	ldd	r25, Y+11	; 0x0b
    273e:	03 96       	adiw	r24, 0x03	; 3
    2740:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	8d 8b       	std	Y+21, r24	; 0x15
    274a:	9e 8b       	std	Y+22, r25	; 0x16
    274c:	af 8b       	std	Y+23, r26	; 0x17
    274e:	b8 8f       	std	Y+24, r27	; 0x18
    2750:	8d 89       	ldd	r24, Y+21	; 0x15
    2752:	9e 89       	ldd	r25, Y+22	; 0x16
    2754:	af 89       	ldd	r26, Y+23	; 0x17
    2756:	b8 8d       	ldd	r27, Y+24	; 0x18
    2758:	8f ab       	std	Y+55, r24	; 0x37
    275a:	98 af       	std	Y+56, r25	; 0x38
    275c:	a9 af       	std	Y+57, r26	; 0x39
    275e:	ba af       	std	Y+58, r27	; 0x3a
    2760:	ce 01       	movw	r24, r28
    2762:	c7 96       	adiw	r24, 0x37	; 55
    2764:	61 e0       	ldi	r22, 0x01	; 1
    2766:	0e 94 35 43 	call	0x866a	; 0x866a <_Z14txSetFrequencyPmh>
    276a:	98 2f       	mov	r25, r24
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	99 23       	and	r25, r25
    2770:	09 f0       	breq	.+2      	; 0x2774 <_Z19handleSerialBusMsgsv+0x3ca>
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	88 23       	and	r24, r24
    2776:	69 f0       	breq	.+26     	; 0x2792 <_Z19handleSerialBusMsgsv+0x3e8>
    2778:	8f a9       	ldd	r24, Y+55	; 0x37
    277a:	98 ad       	ldd	r25, Y+56	; 0x38
    277c:	a9 ad       	ldd	r26, Y+57	; 0x39
    277e:	ba ad       	ldd	r27, Y+58	; 0x3a
    2780:	8d 83       	std	Y+5, r24	; 0x05
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	af 83       	std	Y+7, r26	; 0x07
    2786:	b8 87       	std	Y+8, r27	; 0x08
    2788:	80 e2       	ldi	r24, 0x20	; 32
    278a:	96 e4       	ldi	r25, 0x46	; 70
    278c:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <_ZN13EepromManager13saveAllEEPROMEv>
    2790:	0d c0       	rjmp	.+26     	; 0x27ac <_Z19handleSerialBusMsgsv+0x402>
    2792:	88 eb       	ldi	r24, 0xB8	; 184
    2794:	91 e4       	ldi	r25, 0x41	; 65
    2796:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    279a:	08 c0       	rjmp	.+16     	; 0x27ac <_Z19handleSerialBusMsgsv+0x402>
    279c:	0e 94 67 43 	call	0x86ce	; 0x86ce <_Z14txGetFrequencyv>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	af 83       	std	Y+7, r26	; 0x07
    27aa:	b8 87       	std	Y+8, r27	; 0x08
    27ac:	8d 81       	ldd	r24, Y+5	; 0x05
    27ae:	9e 81       	ldd	r25, Y+6	; 0x06
    27b0:	af 81       	ldd	r26, Y+7	; 0x07
    27b2:	b8 85       	ldd	r27, Y+8	; 0x08
    27b4:	89 2b       	or	r24, r25
    27b6:	8a 2b       	or	r24, r26
    27b8:	8b 2b       	or	r24, r27
    27ba:	09 f4       	brne	.+2      	; 0x27be <_Z19handleSerialBusMsgsv+0x414>
    27bc:	77 c4       	rjmp	.+2286   	; 0x30ac <_Z19handleSerialBusMsgsv+0xd02>
    27be:	88 85       	ldd	r24, Y+8	; 0x08
    27c0:	8f 93       	push	r24
    27c2:	8f 81       	ldd	r24, Y+7	; 0x07
    27c4:	8f 93       	push	r24
    27c6:	8e 81       	ldd	r24, Y+6	; 0x06
    27c8:	8f 93       	push	r24
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	8f 93       	push	r24
    27ce:	83 e4       	ldi	r24, 0x43	; 67
    27d0:	92 e4       	ldi	r25, 0x42	; 66
    27d2:	89 2f       	mov	r24, r25
    27d4:	8f 93       	push	r24
    27d6:	83 e4       	ldi	r24, 0x43	; 67
    27d8:	92 e4       	ldi	r25, 0x42	; 66
    27da:	8f 93       	push	r24
    27dc:	85 e9       	ldi	r24, 0x95	; 149
    27de:	95 e4       	ldi	r25, 0x45	; 69
    27e0:	89 2f       	mov	r24, r25
    27e2:	8f 93       	push	r24
    27e4:	85 e9       	ldi	r24, 0x95	; 149
    27e6:	95 e4       	ldi	r25, 0x45	; 69
    27e8:	8f 93       	push	r24
    27ea:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    27ee:	8d b7       	in	r24, 0x3d	; 61
    27f0:	9e b7       	in	r25, 0x3e	; 62
    27f2:	08 96       	adiw	r24, 0x08	; 8
    27f4:	cd bf       	out	0x3d, r28	; 61
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	85 e9       	ldi	r24, 0x95	; 149
    27fa:	95 e4       	ldi	r25, 0x45	; 69
    27fc:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2800:	55 c4       	rjmp	.+2218   	; 0x30ac <_Z19handleSerialBusMsgsv+0xd02>
    2802:	8a 85       	ldd	r24, Y+10	; 0x0a
    2804:	9b 85       	ldd	r25, Y+11	; 0x0b
    2806:	fc 01       	movw	r30, r24
    2808:	83 81       	ldd	r24, Z+3	; 0x03
    280a:	88 23       	and	r24, r24
    280c:	89 f1       	breq	.+98     	; 0x2870 <_Z19handleSerialBusMsgsv+0x4c6>
    280e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2810:	9b 85       	ldd	r25, Y+11	; 0x0b
    2812:	fc 01       	movw	r30, r24
    2814:	83 81       	ldd	r24, Z+3	; 0x03
    2816:	80 33       	cpi	r24, 0x30	; 48
    2818:	21 f4       	brne	.+8      	; 0x2822 <_Z19handleSerialBusMsgsv+0x478>
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	0e 94 27 22 	call	0x444e	; 0x444e <_Z12stopEventNow19EventActionSource_t>
    2820:	4a c4       	rjmp	.+2196   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    2822:	8a 85       	ldd	r24, Y+10	; 0x0a
    2824:	9b 85       	ldd	r25, Y+11	; 0x0b
    2826:	fc 01       	movw	r30, r24
    2828:	83 81       	ldd	r24, Z+3	; 0x03
    282a:	81 33       	cpi	r24, 0x31	; 49
    282c:	21 f4       	brne	.+8      	; 0x2836 <_Z19handleSerialBusMsgsv+0x48c>
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	0e 94 d6 21 	call	0x43ac	; 0x43ac <_Z13startEventNow19EventActionSource_t>
    2834:	40 c4       	rjmp	.+2176   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    2836:	8a 85       	ldd	r24, Y+10	; 0x0a
    2838:	9b 85       	ldd	r25, Y+11	; 0x0b
    283a:	fc 01       	movw	r30, r24
    283c:	83 81       	ldd	r24, Z+3	; 0x03
    283e:	82 33       	cpi	r24, 0x32	; 50
    2840:	31 f4       	brne	.+12     	; 0x284e <_Z19handleSerialBusMsgsv+0x4a4>
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    2848:	0e 94 4d 22 	call	0x449a	; 0x449a <_Z18startEventUsingRTCv>
    284c:	34 c4       	rjmp	.+2152   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    284e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2850:	9b 85       	ldd	r25, Y+11	; 0x0b
    2852:	fc 01       	movw	r30, r24
    2854:	83 81       	ldd	r24, Z+3	; 0x03
    2856:	83 33       	cpi	r24, 0x33	; 51
    2858:	31 f4       	brne	.+12     	; 0x2866 <_Z19handleSerialBusMsgsv+0x4bc>
    285a:	62 e0       	ldi	r22, 0x02	; 2
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2864:	28 c4       	rjmp	.+2128   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    2866:	8f e4       	ldi	r24, 0x4F	; 79
    2868:	92 e4       	ldi	r25, 0x42	; 66
    286a:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    286e:	23 c4       	rjmp	.+2118   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    2870:	8f e4       	ldi	r24, 0x4F	; 79
    2872:	92 e4       	ldi	r25, 0x42	; 66
    2874:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2878:	1e c4       	rjmp	.+2108   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    287a:	8a 85       	ldd	r24, Y+10	; 0x0a
    287c:	9b 85       	ldd	r25, Y+11	; 0x0b
    287e:	fc 01       	movw	r30, r24
    2880:	83 81       	ldd	r24, Z+3	; 0x03
    2882:	88 23       	and	r24, r24
    2884:	09 f4       	brne	.+2      	; 0x2888 <_Z19handleSerialBusMsgsv+0x4de>
    2886:	41 c0       	rjmp	.+130    	; 0x290a <_Z19handleSerialBusMsgsv+0x560>
    2888:	80 e2       	ldi	r24, 0x20	; 32
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	80 93 95 45 	sts	0x4595, r24	; 0x804595 <_ZL9g_tempStr>
    2890:	90 93 96 45 	sts	0x4596, r25	; 0x804596 <_ZL9g_tempStr+0x1>
    2894:	8a 85       	ldd	r24, Y+10	; 0x0a
    2896:	9b 85       	ldd	r25, Y+11	; 0x0b
    2898:	03 96       	adiw	r24, 0x03	; 3
    289a:	bc 01       	movw	r22, r24
    289c:	85 e9       	ldi	r24, 0x95	; 149
    289e:	95 e4       	ldi	r25, 0x45	; 69
    28a0:	0e 94 27 4a 	call	0x944e	; 0x944e <strcat>
    28a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28a8:	fc 01       	movw	r30, r24
    28aa:	87 89       	ldd	r24, Z+23	; 0x17
    28ac:	88 23       	and	r24, r24
    28ae:	d1 f0       	breq	.+52     	; 0x28e4 <_Z19handleSerialBusMsgsv+0x53a>
    28b0:	85 e9       	ldi	r24, 0x95	; 149
    28b2:	95 e4       	ldi	r25, 0x45	; 69
    28b4:	9c 01       	movw	r18, r24
    28b6:	f9 01       	movw	r30, r18
    28b8:	01 90       	ld	r0, Z+
    28ba:	00 20       	and	r0, r0
    28bc:	e9 f7       	brne	.-6      	; 0x28b8 <_Z19handleSerialBusMsgsv+0x50e>
    28be:	cf 01       	movw	r24, r30
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	82 1b       	sub	r24, r18
    28c4:	93 0b       	sbc	r25, r19
    28c6:	8b 56       	subi	r24, 0x6B	; 107
    28c8:	9a 4b       	sbci	r25, 0xBA	; 186
    28ca:	20 e2       	ldi	r18, 0x20	; 32
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	fc 01       	movw	r30, r24
    28d0:	20 83       	st	Z, r18
    28d2:	31 83       	std	Z+1, r19	; 0x01
    28d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28d8:	47 96       	adiw	r24, 0x17	; 23
    28da:	bc 01       	movw	r22, r24
    28dc:	85 e9       	ldi	r24, 0x95	; 149
    28de:	95 e4       	ldi	r25, 0x45	; 69
    28e0:	0e 94 27 4a 	call	0x944e	; 0x944e <strcat>
    28e4:	85 e9       	ldi	r24, 0x95	; 149
    28e6:	95 e4       	ldi	r25, 0x45	; 69
    28e8:	0e 94 39 4a 	call	0x9472	; 0x9472 <strlen>
    28ec:	45 97       	sbiw	r24, 0x15	; 21
    28ee:	68 f4       	brcc	.+26     	; 0x290a <_Z19handleSerialBusMsgsv+0x560>
    28f0:	65 e9       	ldi	r22, 0x95	; 149
    28f2:	75 e4       	ldi	r23, 0x45	; 69
    28f4:	8b ee       	ldi	r24, 0xEB	; 235
    28f6:	95 e4       	ldi	r25, 0x45	; 69
    28f8:	0e 94 32 4a 	call	0x9464	; 0x9464 <strcpy>
    28fc:	45 e9       	ldi	r20, 0x95	; 149
    28fe:	55 e4       	ldi	r21, 0x45	; 69
    2900:	6a e0       	ldi	r22, 0x0A	; 10
    2902:	80 e2       	ldi	r24, 0x20	; 32
    2904:	96 e4       	ldi	r25, 0x46	; 70
    2906:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    290a:	80 91 eb 45 	lds	r24, 0x45EB	; 0x8045eb <g_messages_text+0x15>
    290e:	88 23       	and	r24, r24
    2910:	01 f1       	breq	.+64     	; 0x2952 <_Z19handleSerialBusMsgsv+0x5a8>
    2912:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	bc 01       	movw	r22, r24
    291c:	8b ee       	ldi	r24, 0xEB	; 235
    291e:	95 e4       	ldi	r25, 0x45	; 69
    2920:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <_Z26timeRequiredToSendStrAtWPMPcj>
    2924:	88 5a       	subi	r24, 0xA8	; 168
    2926:	9d 4f       	sbci	r25, 0xFD	; 253
    2928:	96 95       	lsr	r25
    292a:	87 95       	ror	r24
    292c:	96 95       	lsr	r25
    292e:	87 95       	ror	r24
    2930:	96 95       	lsr	r25
    2932:	87 95       	ror	r24
    2934:	9c 01       	movw	r18, r24
    2936:	a5 ec       	ldi	r26, 0xC5	; 197
    2938:	b0 e2       	ldi	r27, 0x20	; 32
    293a:	0e 94 90 48 	call	0x9120	; 0x9120 <__umulhisi3>
    293e:	92 95       	swap	r25
    2940:	82 95       	swap	r24
    2942:	8f 70       	andi	r24, 0x0F	; 15
    2944:	89 27       	eor	r24, r25
    2946:	9f 70       	andi	r25, 0x0F	; 15
    2948:	89 27       	eor	r24, r25
    294a:	80 93 00 46 	sts	0x4600, r24	; 0x804600 <g_time_needed_for_ID>
    294e:	90 93 01 46 	sts	0x4601, r25	; 0x804601 <g_time_needed_for_ID+0x1>
    2952:	8b ee       	ldi	r24, 0xEB	; 235
    2954:	95 e4       	ldi	r25, 0x45	; 69
    2956:	89 2f       	mov	r24, r25
    2958:	8f 93       	push	r24
    295a:	8b ee       	ldi	r24, 0xEB	; 235
    295c:	95 e4       	ldi	r25, 0x45	; 69
    295e:	8f 93       	push	r24
    2960:	84 e5       	ldi	r24, 0x54	; 84
    2962:	92 e4       	ldi	r25, 0x42	; 66
    2964:	89 2f       	mov	r24, r25
    2966:	8f 93       	push	r24
    2968:	84 e5       	ldi	r24, 0x54	; 84
    296a:	92 e4       	ldi	r25, 0x42	; 66
    296c:	8f 93       	push	r24
    296e:	85 e9       	ldi	r24, 0x95	; 149
    2970:	95 e4       	ldi	r25, 0x45	; 69
    2972:	89 2f       	mov	r24, r25
    2974:	8f 93       	push	r24
    2976:	85 e9       	ldi	r24, 0x95	; 149
    2978:	95 e4       	ldi	r25, 0x45	; 69
    297a:	8f 93       	push	r24
    297c:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	85 e9       	ldi	r24, 0x95	; 149
    298e:	95 e4       	ldi	r25, 0x45	; 69
    2990:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2994:	90 c3       	rjmp	.+1824   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    2996:	8a 85       	ldd	r24, Y+10	; 0x0a
    2998:	9b 85       	ldd	r25, Y+11	; 0x0b
    299a:	fc 01       	movw	r30, r24
    299c:	83 81       	ldd	r24, Z+3	; 0x03
    299e:	83 35       	cpi	r24, 0x53	; 83
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <_Z19handleSerialBusMsgsv+0x5fa>
    29a2:	6f c0       	rjmp	.+222    	; 0x2a82 <_Z19handleSerialBusMsgsv+0x6d8>
    29a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    29a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    29a8:	fc 01       	movw	r30, r24
    29aa:	87 89       	ldd	r24, Z+23	; 0x17
    29ac:	89 8f       	std	Y+25, r24	; 0x19
    29ae:	89 8d       	ldd	r24, Y+25	; 0x19
    29b0:	88 23       	and	r24, r24
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <_Z19handleSerialBusMsgsv+0x60c>
    29b4:	48 c0       	rjmp	.+144    	; 0x2a46 <_Z19handleSerialBusMsgsv+0x69c>
    29b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    29b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ba:	47 96       	adiw	r24, 0x17	; 23
    29bc:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8a 8f       	std	Y+26, r24	; 0x1a
    29c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29c8:	8b 8f       	std	Y+27, r24	; 0x1b
    29ca:	85 e0       	ldi	r24, 0x05	; 5
    29cc:	8c 8f       	std	Y+28, r24	; 0x1c
    29ce:	84 e1       	ldi	r24, 0x14	; 20
    29d0:	8d 8f       	std	Y+29, r24	; 0x1d
    29d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d6:	89 17       	cp	r24, r25
    29d8:	40 f0       	brcs	.+16     	; 0x29ea <_Z19handleSerialBusMsgsv+0x640>
    29da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29de:	98 17       	cp	r25, r24
    29e0:	10 f4       	brcc	.+4      	; 0x29e6 <_Z19handleSerialBusMsgsv+0x63c>
    29e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29e4:	03 c0       	rjmp	.+6      	; 0x29ec <_Z19handleSerialBusMsgsv+0x642>
    29e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29e8:	01 c0       	rjmp	.+2      	; 0x29ec <_Z19handleSerialBusMsgsv+0x642>
    29ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ec:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    29f0:	4b e0       	ldi	r20, 0x0B	; 11
    29f2:	50 e4       	ldi	r21, 0x40	; 64
    29f4:	68 e2       	ldi	r22, 0x28	; 40
    29f6:	80 e2       	ldi	r24, 0x20	; 32
    29f8:	96 e4       	ldi	r25, 0x46	; 70
    29fa:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    29fe:	80 91 eb 45 	lds	r24, 0x45EB	; 0x8045eb <g_messages_text+0x15>
    2a02:	88 23       	and	r24, r24
    2a04:	01 f1       	breq	.+64     	; 0x2a46 <_Z19handleSerialBusMsgsv+0x69c>
    2a06:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2a0a:	88 2f       	mov	r24, r24
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	bc 01       	movw	r22, r24
    2a10:	8b ee       	ldi	r24, 0xEB	; 235
    2a12:	95 e4       	ldi	r25, 0x45	; 69
    2a14:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <_Z26timeRequiredToSendStrAtWPMPcj>
    2a18:	88 5a       	subi	r24, 0xA8	; 168
    2a1a:	9d 4f       	sbci	r25, 0xFD	; 253
    2a1c:	96 95       	lsr	r25
    2a1e:	87 95       	ror	r24
    2a20:	96 95       	lsr	r25
    2a22:	87 95       	ror	r24
    2a24:	96 95       	lsr	r25
    2a26:	87 95       	ror	r24
    2a28:	9c 01       	movw	r18, r24
    2a2a:	a5 ec       	ldi	r26, 0xC5	; 197
    2a2c:	b0 e2       	ldi	r27, 0x20	; 32
    2a2e:	0e 94 90 48 	call	0x9120	; 0x9120 <__umulhisi3>
    2a32:	92 95       	swap	r25
    2a34:	82 95       	swap	r24
    2a36:	8f 70       	andi	r24, 0x0F	; 15
    2a38:	89 27       	eor	r24, r25
    2a3a:	9f 70       	andi	r25, 0x0F	; 15
    2a3c:	89 27       	eor	r24, r25
    2a3e:	80 93 00 46 	sts	0x4600, r24	; 0x804600 <g_time_needed_for_ID>
    2a42:	90 93 01 46 	sts	0x4601, r25	; 0x804601 <g_time_needed_for_ID+0x1>
    2a46:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2a4a:	88 2f       	mov	r24, r24
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	29 2f       	mov	r18, r25
    2a50:	2f 93       	push	r18
    2a52:	8f 93       	push	r24
    2a54:	8b e5       	ldi	r24, 0x5B	; 91
    2a56:	92 e4       	ldi	r25, 0x42	; 66
    2a58:	89 2f       	mov	r24, r25
    2a5a:	8f 93       	push	r24
    2a5c:	8b e5       	ldi	r24, 0x5B	; 91
    2a5e:	92 e4       	ldi	r25, 0x42	; 66
    2a60:	8f 93       	push	r24
    2a62:	85 e9       	ldi	r24, 0x95	; 149
    2a64:	95 e4       	ldi	r25, 0x45	; 69
    2a66:	89 2f       	mov	r24, r25
    2a68:	8f 93       	push	r24
    2a6a:	85 e9       	ldi	r24, 0x95	; 149
    2a6c:	95 e4       	ldi	r25, 0x45	; 69
    2a6e:	8f 93       	push	r24
    2a70:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	09 c0       	rjmp	.+18     	; 0x2a94 <_Z19handleSerialBusMsgsv+0x6ea>
    2a82:	85 e0       	ldi	r24, 0x05	; 5
    2a84:	ef e4       	ldi	r30, 0x4F	; 79
    2a86:	f2 e4       	ldi	r31, 0x42	; 66
    2a88:	a5 e9       	ldi	r26, 0x95	; 149
    2a8a:	b5 e4       	ldi	r27, 0x45	; 69
    2a8c:	01 90       	ld	r0, Z+
    2a8e:	0d 92       	st	X+, r0
    2a90:	8a 95       	dec	r24
    2a92:	e1 f7       	brne	.-8      	; 0x2a8c <_Z19handleSerialBusMsgsv+0x6e2>
    2a94:	85 e9       	ldi	r24, 0x95	; 149
    2a96:	95 e4       	ldi	r25, 0x45	; 69
    2a98:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2a9c:	0c c3       	rjmp	.+1560   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    2a9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	83 81       	ldd	r24, Z+3	; 0x03
    2aa6:	88 23       	and	r24, r24
    2aa8:	51 f1       	breq	.+84     	; 0x2afe <_Z19handleSerialBusMsgsv+0x754>
    2aaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aac:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aae:	03 96       	adiw	r24, 0x03	; 3
    2ab0:	48 e0       	ldi	r20, 0x08	; 8
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	bc 01       	movw	r22, r24
    2ab6:	85 e9       	ldi	r24, 0x95	; 149
    2ab8:	95 e4       	ldi	r25, 0x45	; 69
    2aba:	0e 94 42 4a 	call	0x9484	; 0x9484 <strncpy>
    2abe:	10 92 9d 45 	sts	0x459D, r1	; 0x80459d <_ZL9g_tempStr+0x8>
    2ac2:	85 e9       	ldi	r24, 0x95	; 149
    2ac4:	95 e4       	ldi	r25, 0x45	; 69
    2ac6:	0e 94 c1 45 	call	0x8b82	; 0x8b82 <_Z11only_digitsPc>
    2aca:	88 23       	and	r24, r24
    2acc:	41 f0       	breq	.+16     	; 0x2ade <_Z19handleSerialBusMsgsv+0x734>
    2ace:	85 e9       	ldi	r24, 0x95	; 149
    2ad0:	95 e4       	ldi	r25, 0x45	; 69
    2ad2:	0e 94 39 4a 	call	0x9472	; 0x9472 <strlen>
    2ad6:	04 97       	sbiw	r24, 0x04	; 4
    2ad8:	10 f0       	brcs	.+4      	; 0x2ade <_Z19handleSerialBusMsgsv+0x734>
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	01 c0       	rjmp	.+2      	; 0x2ae0 <_Z19handleSerialBusMsgsv+0x736>
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	88 23       	and	r24, r24
    2ae2:	69 f0       	breq	.+26     	; 0x2afe <_Z19handleSerialBusMsgsv+0x754>
    2ae4:	65 e9       	ldi	r22, 0x95	; 149
    2ae6:	75 e4       	ldi	r23, 0x45	; 69
    2ae8:	8a e2       	ldi	r24, 0x2A	; 42
    2aea:	96 e4       	ldi	r25, 0x46	; 70
    2aec:	0e 94 32 4a 	call	0x9464	; 0x9464 <strcpy>
    2af0:	4a e2       	ldi	r20, 0x2A	; 42
    2af2:	56 e4       	ldi	r21, 0x46	; 70
    2af4:	6f e1       	ldi	r22, 0x1F	; 31
    2af6:	80 e2       	ldi	r24, 0x20	; 32
    2af8:	96 e4       	ldi	r25, 0x46	; 70
    2afa:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2afe:	8a e2       	ldi	r24, 0x2A	; 42
    2b00:	96 e4       	ldi	r25, 0x46	; 70
    2b02:	89 2f       	mov	r24, r25
    2b04:	8f 93       	push	r24
    2b06:	8a e2       	ldi	r24, 0x2A	; 42
    2b08:	96 e4       	ldi	r25, 0x46	; 70
    2b0a:	8f 93       	push	r24
    2b0c:	8d e6       	ldi	r24, 0x6D	; 109
    2b0e:	92 e4       	ldi	r25, 0x42	; 66
    2b10:	89 2f       	mov	r24, r25
    2b12:	8f 93       	push	r24
    2b14:	8d e6       	ldi	r24, 0x6D	; 109
    2b16:	92 e4       	ldi	r25, 0x42	; 66
    2b18:	8f 93       	push	r24
    2b1a:	85 e9       	ldi	r24, 0x95	; 149
    2b1c:	95 e4       	ldi	r25, 0x45	; 69
    2b1e:	89 2f       	mov	r24, r25
    2b20:	8f 93       	push	r24
    2b22:	85 e9       	ldi	r24, 0x95	; 149
    2b24:	95 e4       	ldi	r25, 0x45	; 69
    2b26:	8f 93       	push	r24
    2b28:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	85 e9       	ldi	r24, 0x95	; 149
    2b3a:	95 e4       	ldi	r25, 0x45	; 69
    2b3c:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2b40:	ba c2       	rjmp	.+1396   	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    2b42:	19 86       	std	Y+9, r1	; 0x09
    2b44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b48:	fc 01       	movw	r30, r24
    2b4a:	83 81       	ldd	r24, Z+3	; 0x03
    2b4c:	84 35       	cpi	r24, 0x54	; 84
    2b4e:	09 f0       	breq	.+2      	; 0x2b52 <_Z19handleSerialBusMsgsv+0x7a8>
    2b50:	de c0       	rjmp	.+444    	; 0x2d0e <_Z19handleSerialBusMsgsv+0x964>
    2b52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b56:	fc 01       	movw	r30, r24
    2b58:	87 89       	ldd	r24, Z+23	; 0x17
    2b5a:	88 23       	and	r24, r24
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <_Z19handleSerialBusMsgsv+0x7b6>
    2b5e:	85 c0       	rjmp	.+266    	; 0x2c6a <_Z19handleSerialBusMsgsv+0x8c0>
    2b60:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b62:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b64:	47 96       	adiw	r24, 0x17	; 23
    2b66:	4c e0       	ldi	r20, 0x0C	; 12
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	85 e9       	ldi	r24, 0x95	; 149
    2b6e:	95 e4       	ldi	r25, 0x45	; 69
    2b70:	0e 94 42 4a 	call	0x9484	; 0x9484 <strncpy>
    2b74:	10 92 a1 45 	sts	0x45A1, r1	; 0x8045a1 <_ZL9g_tempStr+0xc>
    2b78:	80 91 29 46 	lds	r24, 0x4629	; 0x804629 <g_utc_offset>
    2b7c:	81 95       	neg	r24
    2b7e:	48 2f       	mov	r20, r24
    2b80:	62 e3       	ldi	r22, 0x32	; 50
    2b82:	76 e4       	ldi	r23, 0x46	; 70
    2b84:	85 e9       	ldi	r24, 0x95	; 149
    2b86:	95 e4       	ldi	r25, 0x45	; 69
    2b88:	0e 94 87 24 	call	0x490e	; 0x490e <_Z18validateTimeStringPcPma>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8e 8f       	std	Y+30, r24	; 0x1e
    2b92:	9f 8f       	std	Y+31, r25	; 0x1f
    2b94:	a8 a3       	std	Y+32, r26	; 0x20
    2b96:	b9 a3       	std	Y+33, r27	; 0x21
    2b98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b9c:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b9e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2ba0:	89 2b       	or	r24, r25
    2ba2:	8a 2b       	or	r24, r26
    2ba4:	8b 2b       	or	r24, r27
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <_Z19handleSerialBusMsgsv+0x800>
    2ba8:	af c0       	rjmp	.+350    	; 0x2d08 <_Z19handleSerialBusMsgsv+0x95e>
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	85 e9       	ldi	r24, 0x95	; 149
    2bae:	95 e4       	ldi	r25, 0x45	; 69
    2bb0:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <ds3231_set_date_time_arducon>
    2bb4:	98 2f       	mov	r25, r24
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	99 23       	and	r25, r25
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <_Z19handleSerialBusMsgsv+0x814>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	8a a3       	std	Y+34, r24	; 0x22
    2bc0:	8a a1       	ldd	r24, Y+34	; 0x22
    2bc2:	88 23       	and	r24, r24
    2bc4:	29 f0       	breq	.+10     	; 0x2bd0 <_Z19handleSerialBusMsgsv+0x826>
    2bc6:	83 ee       	ldi	r24, 0xE3	; 227
    2bc8:	91 e4       	ldi	r25, 0x41	; 65
    2bca:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2bce:	9c c0       	rjmp	.+312    	; 0x2d08 <_Z19handleSerialBusMsgsv+0x95e>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	80 93 32 46 	sts	0x4632, r24	; 0x804632 <g_current_epoch>
    2be0:	90 93 33 46 	sts	0x4633, r25	; 0x804633 <g_current_epoch+0x1>
    2be4:	a0 93 34 46 	sts	0x4634, r26	; 0x804634 <g_current_epoch+0x2>
    2be8:	b0 93 35 46 	sts	0x4635, r27	; 0x804635 <g_current_epoch+0x3>
    2bec:	c0 90 32 46 	lds	r12, 0x4632	; 0x804632 <g_current_epoch>
    2bf0:	d0 90 33 46 	lds	r13, 0x4633	; 0x804633 <g_current_epoch+0x1>
    2bf4:	e0 90 34 46 	lds	r14, 0x4634	; 0x804634 <g_current_epoch+0x2>
    2bf8:	f0 90 35 46 	lds	r15, 0x4635	; 0x804635 <g_current_epoch+0x3>
    2bfc:	80 91 32 46 	lds	r24, 0x4632	; 0x804632 <g_current_epoch>
    2c00:	90 91 33 46 	lds	r25, 0x4633	; 0x804633 <g_current_epoch+0x1>
    2c04:	a0 91 34 46 	lds	r26, 0x4634	; 0x804634 <g_current_epoch+0x2>
    2c08:	b0 91 35 46 	lds	r27, 0x4635	; 0x804635 <g_current_epoch+0x3>
    2c0c:	ae 01       	movw	r20, r28
    2c0e:	44 5c       	subi	r20, 0xC4	; 196
    2c10:	5f 4f       	sbci	r21, 0xFF	; 255
    2c12:	22 e3       	ldi	r18, 0x32	; 50
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <convertEpochToTimeString>
    2c1e:	2f 2d       	mov	r18, r15
    2c20:	2f 93       	push	r18
    2c22:	2e 2d       	mov	r18, r14
    2c24:	2f 93       	push	r18
    2c26:	2d 2d       	mov	r18, r13
    2c28:	2f 93       	push	r18
    2c2a:	2c 2d       	mov	r18, r12
    2c2c:	2f 93       	push	r18
    2c2e:	29 2f       	mov	r18, r25
    2c30:	2f 93       	push	r18
    2c32:	8f 93       	push	r24
    2c34:	85 e7       	ldi	r24, 0x75	; 117
    2c36:	92 e4       	ldi	r25, 0x42	; 66
    2c38:	89 2f       	mov	r24, r25
    2c3a:	8f 93       	push	r24
    2c3c:	85 e7       	ldi	r24, 0x75	; 117
    2c3e:	92 e4       	ldi	r25, 0x42	; 66
    2c40:	8f 93       	push	r24
    2c42:	85 e9       	ldi	r24, 0x95	; 149
    2c44:	95 e4       	ldi	r25, 0x45	; 69
    2c46:	89 2f       	mov	r24, r25
    2c48:	8f 93       	push	r24
    2c4a:	85 e9       	ldi	r24, 0x95	; 149
    2c4c:	95 e4       	ldi	r25, 0x45	; 69
    2c4e:	8f 93       	push	r24
    2c50:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    2c54:	8d b7       	in	r24, 0x3d	; 61
    2c56:	9e b7       	in	r25, 0x3e	; 62
    2c58:	0a 96       	adiw	r24, 0x0a	; 10
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	60 e0       	ldi	r22, 0x00	; 0
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2c68:	4f c0       	rjmp	.+158    	; 0x2d08 <_Z19handleSerialBusMsgsv+0x95e>
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	cb 96       	adiw	r24, 0x3b	; 59
    2c6e:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	80 93 32 46 	sts	0x4632, r24	; 0x804632 <g_current_epoch>
    2c7a:	90 93 33 46 	sts	0x4633, r25	; 0x804633 <g_current_epoch+0x1>
    2c7e:	a0 93 34 46 	sts	0x4634, r26	; 0x804634 <g_current_epoch+0x2>
    2c82:	b0 93 35 46 	sts	0x4635, r27	; 0x804635 <g_current_epoch+0x3>
    2c86:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c88:	88 23       	and	r24, r24
    2c8a:	d1 f5       	brne	.+116    	; 0x2d00 <_Z19handleSerialBusMsgsv+0x956>
    2c8c:	c0 90 32 46 	lds	r12, 0x4632	; 0x804632 <g_current_epoch>
    2c90:	d0 90 33 46 	lds	r13, 0x4633	; 0x804633 <g_current_epoch+0x1>
    2c94:	e0 90 34 46 	lds	r14, 0x4634	; 0x804634 <g_current_epoch+0x2>
    2c98:	f0 90 35 46 	lds	r15, 0x4635	; 0x804635 <g_current_epoch+0x3>
    2c9c:	80 91 32 46 	lds	r24, 0x4632	; 0x804632 <g_current_epoch>
    2ca0:	90 91 33 46 	lds	r25, 0x4633	; 0x804633 <g_current_epoch+0x1>
    2ca4:	a0 91 34 46 	lds	r26, 0x4634	; 0x804634 <g_current_epoch+0x2>
    2ca8:	b0 91 35 46 	lds	r27, 0x4635	; 0x804635 <g_current_epoch+0x3>
    2cac:	ae 01       	movw	r20, r28
    2cae:	44 5c       	subi	r20, 0xC4	; 196
    2cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb2:	22 e3       	ldi	r18, 0x32	; 50
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <convertEpochToTimeString>
    2cbe:	2f 2d       	mov	r18, r15
    2cc0:	2f 93       	push	r18
    2cc2:	2e 2d       	mov	r18, r14
    2cc4:	2f 93       	push	r18
    2cc6:	2d 2d       	mov	r18, r13
    2cc8:	2f 93       	push	r18
    2cca:	2c 2d       	mov	r18, r12
    2ccc:	2f 93       	push	r18
    2cce:	29 2f       	mov	r18, r25
    2cd0:	2f 93       	push	r18
    2cd2:	8f 93       	push	r24
    2cd4:	85 e7       	ldi	r24, 0x75	; 117
    2cd6:	92 e4       	ldi	r25, 0x42	; 66
    2cd8:	89 2f       	mov	r24, r25
    2cda:	8f 93       	push	r24
    2cdc:	85 e7       	ldi	r24, 0x75	; 117
    2cde:	92 e4       	ldi	r25, 0x42	; 66
    2ce0:	8f 93       	push	r24
    2ce2:	85 e9       	ldi	r24, 0x95	; 149
    2ce4:	95 e4       	ldi	r25, 0x45	; 69
    2ce6:	89 2f       	mov	r24, r25
    2ce8:	8f 93       	push	r24
    2cea:	85 e9       	ldi	r24, 0x95	; 149
    2cec:	95 e4       	ldi	r25, 0x45	; 69
    2cee:	8f 93       	push	r24
    2cf0:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    2cf4:	ed b7       	in	r30, 0x3d	; 61
    2cf6:	fe b7       	in	r31, 0x3e	; 62
    2cf8:	3a 96       	adiw	r30, 0x0a	; 10
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	04 c0       	rjmp	.+8      	; 0x2d08 <_Z19handleSerialBusMsgsv+0x95e>
    2d00:	83 ee       	ldi	r24, 0xE3	; 227
    2d02:	91 e4       	ldi	r25, 0x41	; 65
    2d04:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	89 87       	std	Y+9, r24	; 0x09
    2d0c:	ae c1       	rjmp	.+860    	; 0x306a <_Z19handleSerialBusMsgsv+0xcc0>
    2d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d12:	fc 01       	movw	r30, r24
    2d14:	83 81       	ldd	r24, Z+3	; 0x03
    2d16:	83 35       	cpi	r24, 0x53	; 83
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <_Z19handleSerialBusMsgsv+0x972>
    2d1a:	b6 c0       	rjmp	.+364    	; 0x2e88 <_Z19handleSerialBusMsgsv+0xade>
    2d1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d20:	47 96       	adiw	r24, 0x17	; 23
    2d22:	bc 01       	movw	r22, r24
    2d24:	85 e9       	ldi	r24, 0x95	; 149
    2d26:	95 e4       	ldi	r25, 0x45	; 69
    2d28:	0e 94 32 4a 	call	0x9464	; 0x9464 <strcpy>
    2d2c:	80 91 29 46 	lds	r24, 0x4629	; 0x804629 <g_utc_offset>
    2d30:	81 95       	neg	r24
    2d32:	48 2f       	mov	r20, r24
    2d34:	61 e2       	ldi	r22, 0x21	; 33
    2d36:	76 e4       	ldi	r23, 0x46	; 70
    2d38:	85 e9       	ldi	r24, 0x95	; 149
    2d3a:	95 e4       	ldi	r25, 0x45	; 69
    2d3c:	0e 94 87 24 	call	0x490e	; 0x490e <_Z18validateTimeStringPcPma>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	8b a3       	std	Y+35, r24	; 0x23
    2d46:	9c a3       	std	Y+36, r25	; 0x24
    2d48:	ad a3       	std	Y+37, r26	; 0x25
    2d4a:	be a3       	std	Y+38, r27	; 0x26
    2d4c:	8b a1       	ldd	r24, Y+35	; 0x23
    2d4e:	9c a1       	ldd	r25, Y+36	; 0x24
    2d50:	ad a1       	ldd	r26, Y+37	; 0x25
    2d52:	be a1       	ldd	r27, Y+38	; 0x26
    2d54:	89 2b       	or	r24, r25
    2d56:	8a 2b       	or	r24, r26
    2d58:	8b 2b       	or	r24, r27
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <_Z19handleSerialBusMsgsv+0x9b4>
    2d5c:	59 c0       	rjmp	.+178    	; 0x2e10 <_Z19handleSerialBusMsgsv+0xa66>
    2d5e:	8b a1       	ldd	r24, Y+35	; 0x23
    2d60:	9c a1       	ldd	r25, Y+36	; 0x24
    2d62:	ad a1       	ldd	r26, Y+37	; 0x25
    2d64:	be a1       	ldd	r27, Y+38	; 0x26
    2d66:	80 93 21 46 	sts	0x4621, r24	; 0x804621 <g_event_start_epoch>
    2d6a:	90 93 22 46 	sts	0x4622, r25	; 0x804622 <g_event_start_epoch+0x1>
    2d6e:	a0 93 23 46 	sts	0x4623, r26	; 0x804623 <g_event_start_epoch+0x2>
    2d72:	b0 93 24 46 	sts	0x4624, r27	; 0x804624 <g_event_start_epoch+0x3>
    2d76:	41 e2       	ldi	r20, 0x21	; 33
    2d78:	56 e4       	ldi	r21, 0x46	; 70
    2d7a:	62 e0       	ldi	r22, 0x02	; 2
    2d7c:	80 e2       	ldi	r24, 0x20	; 32
    2d7e:	96 e4       	ldi	r25, 0x46	; 70
    2d80:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2d84:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_event_finish_epoch>
    2d88:	90 91 26 46 	lds	r25, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    2d8c:	a0 91 27 46 	lds	r26, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    2d90:	b0 91 28 46 	lds	r27, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    2d94:	8f a3       	std	Y+39, r24	; 0x27
    2d96:	98 a7       	std	Y+40, r25	; 0x28
    2d98:	a9 a7       	std	Y+41, r26	; 0x29
    2d9a:	ba a7       	std	Y+42, r27	; 0x2a
    2d9c:	80 91 21 46 	lds	r24, 0x4621	; 0x804621 <g_event_start_epoch>
    2da0:	90 91 22 46 	lds	r25, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    2da4:	a0 91 23 46 	lds	r26, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    2da8:	b0 91 24 46 	lds	r27, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    2dac:	80 58       	subi	r24, 0x80	; 128
    2dae:	9e 4a       	sbci	r25, 0xAE	; 174
    2db0:	ae 4f       	sbci	r26, 0xFE	; 254
    2db2:	bf 4f       	sbci	r27, 0xFF	; 255
    2db4:	8b a7       	std	Y+43, r24	; 0x2b
    2db6:	9c a7       	std	Y+44, r25	; 0x2c
    2db8:	ad a7       	std	Y+45, r26	; 0x2d
    2dba:	be a7       	std	Y+46, r27	; 0x2e
    2dbc:	2f a1       	ldd	r18, Y+39	; 0x27
    2dbe:	38 a5       	ldd	r19, Y+40	; 0x28
    2dc0:	49 a5       	ldd	r20, Y+41	; 0x29
    2dc2:	5a a5       	ldd	r21, Y+42	; 0x2a
    2dc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dc8:	ad a5       	ldd	r26, Y+45	; 0x2d
    2dca:	be a5       	ldd	r27, Y+46	; 0x2e
    2dcc:	28 17       	cp	r18, r24
    2dce:	39 07       	cpc	r19, r25
    2dd0:	4a 07       	cpc	r20, r26
    2dd2:	5b 07       	cpc	r21, r27
    2dd4:	28 f4       	brcc	.+10     	; 0x2de0 <_Z19handleSerialBusMsgsv+0xa36>
    2dd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dda:	ad a5       	ldd	r26, Y+45	; 0x2d
    2ddc:	be a5       	ldd	r27, Y+46	; 0x2e
    2dde:	04 c0       	rjmp	.+8      	; 0x2de8 <_Z19handleSerialBusMsgsv+0xa3e>
    2de0:	8f a1       	ldd	r24, Y+39	; 0x27
    2de2:	98 a5       	ldd	r25, Y+40	; 0x28
    2de4:	a9 a5       	ldd	r26, Y+41	; 0x29
    2de6:	ba a5       	ldd	r27, Y+42	; 0x2a
    2de8:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_event_finish_epoch>
    2dec:	90 93 26 46 	sts	0x4626, r25	; 0x804626 <g_event_finish_epoch+0x1>
    2df0:	a0 93 27 46 	sts	0x4627, r26	; 0x804627 <g_event_finish_epoch+0x2>
    2df4:	b0 93 28 46 	sts	0x4628, r27	; 0x804628 <g_event_finish_epoch+0x3>
    2df8:	45 e2       	ldi	r20, 0x25	; 37
    2dfa:	56 e4       	ldi	r21, 0x46	; 70
    2dfc:	66 e0       	ldi	r22, 0x06	; 6
    2dfe:	80 e2       	ldi	r24, 0x20	; 32
    2e00:	96 e4       	ldi	r25, 0x46	; 70
    2e02:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2e06:	63 e0       	ldi	r22, 0x03	; 3
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2e10:	c0 90 21 46 	lds	r12, 0x4621	; 0x804621 <g_event_start_epoch>
    2e14:	d0 90 22 46 	lds	r13, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    2e18:	e0 90 23 46 	lds	r14, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    2e1c:	f0 90 24 46 	lds	r15, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    2e20:	80 91 21 46 	lds	r24, 0x4621	; 0x804621 <g_event_start_epoch>
    2e24:	90 91 22 46 	lds	r25, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    2e28:	a0 91 23 46 	lds	r26, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    2e2c:	b0 91 24 46 	lds	r27, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    2e30:	ae 01       	movw	r20, r28
    2e32:	44 5c       	subi	r20, 0xC4	; 196
    2e34:	5f 4f       	sbci	r21, 0xFF	; 255
    2e36:	22 e3       	ldi	r18, 0x32	; 50
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <convertEpochToTimeString>
    2e42:	2f 2d       	mov	r18, r15
    2e44:	2f 93       	push	r18
    2e46:	2e 2d       	mov	r18, r14
    2e48:	2f 93       	push	r18
    2e4a:	2d 2d       	mov	r18, r13
    2e4c:	2f 93       	push	r18
    2e4e:	2c 2d       	mov	r18, r12
    2e50:	2f 93       	push	r18
    2e52:	29 2f       	mov	r18, r25
    2e54:	2f 93       	push	r18
    2e56:	8f 93       	push	r24
    2e58:	85 e8       	ldi	r24, 0x85	; 133
    2e5a:	92 e4       	ldi	r25, 0x42	; 66
    2e5c:	89 2f       	mov	r24, r25
    2e5e:	8f 93       	push	r24
    2e60:	85 e8       	ldi	r24, 0x85	; 133
    2e62:	92 e4       	ldi	r25, 0x42	; 66
    2e64:	8f 93       	push	r24
    2e66:	85 e9       	ldi	r24, 0x95	; 149
    2e68:	95 e4       	ldi	r25, 0x45	; 69
    2e6a:	89 2f       	mov	r24, r25
    2e6c:	8f 93       	push	r24
    2e6e:	85 e9       	ldi	r24, 0x95	; 149
    2e70:	95 e4       	ldi	r25, 0x45	; 69
    2e72:	8f 93       	push	r24
    2e74:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    2e78:	8d b7       	in	r24, 0x3d	; 61
    2e7a:	9e b7       	in	r25, 0x3e	; 62
    2e7c:	0a 96       	adiw	r24, 0x0a	; 10
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	89 87       	std	Y+9, r24	; 0x09
    2e86:	f1 c0       	rjmp	.+482    	; 0x306a <_Z19handleSerialBusMsgsv+0xcc0>
    2e88:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	83 81       	ldd	r24, Z+3	; 0x03
    2e90:	86 34       	cpi	r24, 0x46	; 70
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <_Z19handleSerialBusMsgsv+0xaec>
    2e94:	74 c0       	rjmp	.+232    	; 0x2f7e <_Z19handleSerialBusMsgsv+0xbd4>
    2e96:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e98:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e9a:	47 96       	adiw	r24, 0x17	; 23
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	85 e9       	ldi	r24, 0x95	; 149
    2ea0:	95 e4       	ldi	r25, 0x45	; 69
    2ea2:	0e 94 32 4a 	call	0x9464	; 0x9464 <strcpy>
    2ea6:	80 91 29 46 	lds	r24, 0x4629	; 0x804629 <g_utc_offset>
    2eaa:	81 95       	neg	r24
    2eac:	48 2f       	mov	r20, r24
    2eae:	65 e2       	ldi	r22, 0x25	; 37
    2eb0:	76 e4       	ldi	r23, 0x46	; 70
    2eb2:	85 e9       	ldi	r24, 0x95	; 149
    2eb4:	95 e4       	ldi	r25, 0x45	; 69
    2eb6:	0e 94 87 24 	call	0x490e	; 0x490e <_Z18validateTimeStringPcPma>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	8f a7       	std	Y+47, r24	; 0x2f
    2ec0:	98 ab       	std	Y+48, r25	; 0x30
    2ec2:	a9 ab       	std	Y+49, r26	; 0x31
    2ec4:	ba ab       	std	Y+50, r27	; 0x32
    2ec6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eca:	a9 a9       	ldd	r26, Y+49	; 0x31
    2ecc:	ba a9       	ldd	r27, Y+50	; 0x32
    2ece:	89 2b       	or	r24, r25
    2ed0:	8a 2b       	or	r24, r26
    2ed2:	8b 2b       	or	r24, r27
    2ed4:	c1 f0       	breq	.+48     	; 0x2f06 <_Z19handleSerialBusMsgsv+0xb5c>
    2ed6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eda:	a9 a9       	ldd	r26, Y+49	; 0x31
    2edc:	ba a9       	ldd	r27, Y+50	; 0x32
    2ede:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_event_finish_epoch>
    2ee2:	90 93 26 46 	sts	0x4626, r25	; 0x804626 <g_event_finish_epoch+0x1>
    2ee6:	a0 93 27 46 	sts	0x4627, r26	; 0x804627 <g_event_finish_epoch+0x2>
    2eea:	b0 93 28 46 	sts	0x4628, r27	; 0x804628 <g_event_finish_epoch+0x3>
    2eee:	45 e2       	ldi	r20, 0x25	; 37
    2ef0:	56 e4       	ldi	r21, 0x46	; 70
    2ef2:	66 e0       	ldi	r22, 0x06	; 6
    2ef4:	80 e2       	ldi	r24, 0x20	; 32
    2ef6:	96 e4       	ldi	r25, 0x46	; 70
    2ef8:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2efc:	63 e0       	ldi	r22, 0x03	; 3
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2f06:	c0 90 25 46 	lds	r12, 0x4625	; 0x804625 <g_event_finish_epoch>
    2f0a:	d0 90 26 46 	lds	r13, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    2f0e:	e0 90 27 46 	lds	r14, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    2f12:	f0 90 28 46 	lds	r15, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    2f16:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_event_finish_epoch>
    2f1a:	90 91 26 46 	lds	r25, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    2f1e:	a0 91 27 46 	lds	r26, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    2f22:	b0 91 28 46 	lds	r27, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    2f26:	ae 01       	movw	r20, r28
    2f28:	44 5c       	subi	r20, 0xC4	; 196
    2f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2c:	22 e3       	ldi	r18, 0x32	; 50
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	bc 01       	movw	r22, r24
    2f32:	cd 01       	movw	r24, r26
    2f34:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <convertEpochToTimeString>
    2f38:	2f 2d       	mov	r18, r15
    2f3a:	2f 93       	push	r18
    2f3c:	2e 2d       	mov	r18, r14
    2f3e:	2f 93       	push	r18
    2f40:	2d 2d       	mov	r18, r13
    2f42:	2f 93       	push	r18
    2f44:	2c 2d       	mov	r18, r12
    2f46:	2f 93       	push	r18
    2f48:	29 2f       	mov	r18, r25
    2f4a:	2f 93       	push	r18
    2f4c:	8f 93       	push	r24
    2f4e:	86 e9       	ldi	r24, 0x96	; 150
    2f50:	92 e4       	ldi	r25, 0x42	; 66
    2f52:	89 2f       	mov	r24, r25
    2f54:	8f 93       	push	r24
    2f56:	86 e9       	ldi	r24, 0x96	; 150
    2f58:	92 e4       	ldi	r25, 0x42	; 66
    2f5a:	8f 93       	push	r24
    2f5c:	85 e9       	ldi	r24, 0x95	; 149
    2f5e:	95 e4       	ldi	r25, 0x45	; 69
    2f60:	89 2f       	mov	r24, r25
    2f62:	8f 93       	push	r24
    2f64:	85 e9       	ldi	r24, 0x95	; 149
    2f66:	95 e4       	ldi	r25, 0x45	; 69
    2f68:	8f 93       	push	r24
    2f6a:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    2f6e:	8d b7       	in	r24, 0x3d	; 61
    2f70:	9e b7       	in	r25, 0x3e	; 62
    2f72:	0a 96       	adiw	r24, 0x0a	; 10
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	89 87       	std	Y+9, r24	; 0x09
    2f7c:	76 c0       	rjmp	.+236    	; 0x306a <_Z19handleSerialBusMsgsv+0xcc0>
    2f7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f80:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f82:	fc 01       	movw	r30, r24
    2f84:	83 81       	ldd	r24, Z+3	; 0x03
    2f86:	8a 32       	cpi	r24, 0x2A	; 42
    2f88:	19 f4       	brne	.+6      	; 0x2f90 <_Z19handleSerialBusMsgsv+0xbe6>
    2f8a:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <ds3231_sync2nearestMinute>
    2f8e:	6d c0       	rjmp	.+218    	; 0x306a <_Z19handleSerialBusMsgsv+0xcc0>
    2f90:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <_Z23clockConfigurationCheckv>
    2f94:	8b ab       	std	Y+51, r24	; 0x33
    2f96:	8b a9       	ldd	r24, Y+51	; 0x33
    2f98:	81 30       	cpi	r24, 0x01	; 1
    2f9a:	31 f0       	breq	.+12     	; 0x2fa8 <_Z19handleSerialBusMsgsv+0xbfe>
    2f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f9e:	85 30       	cpi	r24, 0x05	; 5
    2fa0:	19 f0       	breq	.+6      	; 0x2fa8 <_Z19handleSerialBusMsgsv+0xbfe>
    2fa2:	0e 94 04 27 	call	0x4e08	; 0x4e08 <_Z18reportConfigErrorsv>
    2fa6:	61 c0       	rjmp	.+194    	; 0x306a <_Z19handleSerialBusMsgsv+0xcc0>
    2fa8:	20 91 21 46 	lds	r18, 0x4621	; 0x804621 <g_event_start_epoch>
    2fac:	30 91 22 46 	lds	r19, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    2fb0:	40 91 23 46 	lds	r20, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    2fb4:	50 91 24 46 	lds	r21, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    2fb8:	80 91 32 46 	lds	r24, 0x4632	; 0x804632 <g_current_epoch>
    2fbc:	90 91 33 46 	lds	r25, 0x4633	; 0x804633 <g_current_epoch+0x1>
    2fc0:	a0 91 34 46 	lds	r26, 0x4634	; 0x804634 <g_current_epoch+0x2>
    2fc4:	b0 91 35 46 	lds	r27, 0x4635	; 0x804635 <g_current_epoch+0x3>
    2fc8:	0f 2e       	mov	r0, r31
    2fca:	f8 ea       	ldi	r31, 0xA8	; 168
    2fcc:	ef 2e       	mov	r14, r31
    2fce:	f2 e4       	ldi	r31, 0x42	; 66
    2fd0:	ff 2e       	mov	r15, r31
    2fd2:	f0 2d       	mov	r31, r0
    2fd4:	05 eb       	ldi	r16, 0xB5	; 181
    2fd6:	12 e4       	ldi	r17, 0x42	; 66
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z14reportTimeTillmmPKcS0_>
    2fe0:	20 91 25 46 	lds	r18, 0x4625	; 0x804625 <g_event_finish_epoch>
    2fe4:	30 91 26 46 	lds	r19, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    2fe8:	40 91 27 46 	lds	r20, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    2fec:	50 91 28 46 	lds	r21, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    2ff0:	80 91 21 46 	lds	r24, 0x4621	; 0x804621 <g_event_start_epoch>
    2ff4:	90 91 22 46 	lds	r25, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    2ff8:	a0 91 23 46 	lds	r26, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    2ffc:	b0 91 24 46 	lds	r27, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    3000:	e1 2c       	mov	r14, r1
    3002:	f1 2c       	mov	r15, r1
    3004:	01 ec       	ldi	r16, 0xC1	; 193
    3006:	12 e4       	ldi	r17, 0x42	; 66
    3008:	bc 01       	movw	r22, r24
    300a:	cd 01       	movw	r24, r26
    300c:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z14reportTimeTillmmPKcS0_>
    3010:	20 91 21 46 	lds	r18, 0x4621	; 0x804621 <g_event_start_epoch>
    3014:	30 91 22 46 	lds	r19, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    3018:	40 91 23 46 	lds	r20, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    301c:	50 91 24 46 	lds	r21, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    3020:	80 91 32 46 	lds	r24, 0x4632	; 0x804632 <g_current_epoch>
    3024:	90 91 33 46 	lds	r25, 0x4633	; 0x804633 <g_current_epoch+0x1>
    3028:	a0 91 34 46 	lds	r26, 0x4634	; 0x804634 <g_current_epoch+0x2>
    302c:	b0 91 35 46 	lds	r27, 0x4635	; 0x804635 <g_current_epoch+0x3>
    3030:	28 17       	cp	r18, r24
    3032:	39 07       	cpc	r19, r25
    3034:	4a 07       	cpc	r20, r26
    3036:	5b 07       	cpc	r21, r27
    3038:	c0 f4       	brcc	.+48     	; 0x306a <_Z19handleSerialBusMsgsv+0xcc0>
    303a:	20 91 25 46 	lds	r18, 0x4625	; 0x804625 <g_event_finish_epoch>
    303e:	30 91 26 46 	lds	r19, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    3042:	40 91 27 46 	lds	r20, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    3046:	50 91 28 46 	lds	r21, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    304a:	80 91 32 46 	lds	r24, 0x4632	; 0x804632 <g_current_epoch>
    304e:	90 91 33 46 	lds	r25, 0x4633	; 0x804633 <g_current_epoch+0x1>
    3052:	a0 91 34 46 	lds	r26, 0x4634	; 0x804634 <g_current_epoch+0x2>
    3056:	b0 91 35 46 	lds	r27, 0x4635	; 0x804635 <g_current_epoch+0x3>
    305a:	e1 2c       	mov	r14, r1
    305c:	f1 2c       	mov	r15, r1
    305e:	09 ec       	ldi	r16, 0xC9	; 201
    3060:	12 e4       	ldi	r17, 0x42	; 66
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z14reportTimeTillmmPKcS0_>
    306a:	89 85       	ldd	r24, Y+9	; 0x09
    306c:	88 23       	and	r24, r24
    306e:	01 f1       	breq	.+64     	; 0x30b0 <_Z19handleSerialBusMsgsv+0xd06>
    3070:	85 e9       	ldi	r24, 0x95	; 149
    3072:	95 e4       	ldi	r25, 0x45	; 69
    3074:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    3078:	1b c0       	rjmp	.+54     	; 0x30b0 <_Z19handleSerialBusMsgsv+0xd06>
    307a:	8a 85       	ldd	r24, Y+10	; 0x0a
    307c:	9b 85       	ldd	r25, Y+11	; 0x0b
    307e:	fc 01       	movw	r30, r24
    3080:	83 81       	ldd	r24, Z+3	; 0x03
    3082:	83 34       	cpi	r24, 0x43	; 67
    3084:	b9 f4       	brne	.+46     	; 0x30b4 <_Z19handleSerialBusMsgsv+0xd0a>
    3086:	8a 85       	ldd	r24, Y+10	; 0x0a
    3088:	9b 85       	ldd	r25, Y+11	; 0x0b
    308a:	fc 01       	movw	r30, r24
    308c:	87 89       	ldd	r24, Z+23	; 0x17
    308e:	88 23       	and	r24, r24
    3090:	89 f0       	breq	.+34     	; 0x30b4 <_Z19handleSerialBusMsgsv+0xd0a>
    3092:	8a 85       	ldd	r24, Y+10	; 0x0a
    3094:	9b 85       	ldd	r25, Y+11	; 0x0b
    3096:	47 96       	adiw	r24, 0x17	; 23
    3098:	0e 94 da 49 	call	0x93b4	; 0x93b4 <atoi>
    309c:	8c ab       	std	Y+52, r24	; 0x34
    309e:	9d ab       	std	Y+53, r25	; 0x35
    30a0:	09 c0       	rjmp	.+18     	; 0x30b4 <_Z19handleSerialBusMsgsv+0xd0a>
    30a2:	85 e7       	ldi	r24, 0x75	; 117
    30a4:	90 e4       	ldi	r25, 0x40	; 64
    30a6:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    30aa:	05 c0       	rjmp	.+10     	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    30ac:	00 00       	nop
    30ae:	03 c0       	rjmp	.+6      	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    30b0:	00 00       	nop
    30b2:	01 c0       	rjmp	.+2      	; 0x30b6 <_Z19handleSerialBusMsgsv+0xd0c>
    30b4:	00 00       	nop
    30b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ba:	fc 01       	movw	r30, r24
    30bc:	11 82       	std	Z+1, r1	; 0x01
    30be:	12 82       	std	Z+2, r1	; 0x02
    30c0:	0e 94 98 3a 	call	0x7530	; 0x7530 <sb_send_NewPrompt>
    30c4:	80 c9       	rjmp	.-3328   	; 0x23c6 <_Z19handleSerialBusMsgsv+0x1c>
    30c6:	00 00       	nop
    30c8:	c3 59       	subi	r28, 0x93	; 147
    30ca:	df 4f       	sbci	r29, 0xFF	; 255
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	ff 90       	pop	r15
    30da:	ef 90       	pop	r14
    30dc:	df 90       	pop	r13
    30de:	cf 90       	pop	r12
    30e0:	08 95       	ret

000030e2 <_Z17handleLinkBusMsgsv>:
    30e2:	ef 92       	push	r14
    30e4:	ff 92       	push	r15
    30e6:	0f 93       	push	r16
    30e8:	1f 93       	push	r17
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	e3 97       	sbiw	r28, 0x33	; 51
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	89 83       	std	Y+1, r24	; 0x01
    30fc:	0e 94 7e 35 	call	0x6afc	; 0x6afc <_Z18nextFullLBRxBufferv>
    3100:	8c 87       	std	Y+12, r24	; 0x0c
    3102:	9d 87       	std	Y+13, r25	; 0x0d
    3104:	21 e0       	ldi	r18, 0x01	; 1
    3106:	8c 85       	ldd	r24, Y+12	; 0x0c
    3108:	9d 85       	ldd	r25, Y+13	; 0x0d
    310a:	89 2b       	or	r24, r25
    310c:	09 f4       	brne	.+2      	; 0x3110 <_Z17handleLinkBusMsgsv+0x2e>
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	22 23       	and	r18, r18
    3112:	09 f4       	brne	.+2      	; 0x3116 <_Z17handleLinkBusMsgsv+0x34>
    3114:	89 c6       	rjmp	.+3346   	; 0x3e28 <_Z17handleLinkBusMsgsv+0xd46>
    3116:	8c 85       	ldd	r24, Y+12	; 0x0c
    3118:	9d 85       	ldd	r25, Y+13	; 0x0d
    311a:	fc 01       	movw	r30, r24
    311c:	81 81       	ldd	r24, Z+1	; 0x01
    311e:	92 81       	ldd	r25, Z+2	; 0x02
    3120:	8e 87       	std	Y+14, r24	; 0x0e
    3122:	9f 87       	std	Y+15, r25	; 0x0f
    3124:	8e 85       	ldd	r24, Y+14	; 0x0e
    3126:	9f 85       	ldd	r25, Y+15	; 0x0f
    3128:	82 38       	cpi	r24, 0x82	; 130
    312a:	fe e1       	ldi	r31, 0x1E	; 30
    312c:	9f 07       	cpc	r25, r31
    312e:	09 f4       	brne	.+2      	; 0x3132 <_Z17handleLinkBusMsgsv+0x50>
    3130:	6c c0       	rjmp	.+216    	; 0x320a <_Z17handleLinkBusMsgsv+0x128>
    3132:	83 38       	cpi	r24, 0x83	; 131
    3134:	2e e1       	ldi	r18, 0x1E	; 30
    3136:	92 07       	cpc	r25, r18
    3138:	30 f5       	brcc	.+76     	; 0x3186 <_Z17handleLinkBusMsgsv+0xa4>
    313a:	81 36       	cpi	r24, 0x61	; 97
    313c:	33 e0       	ldi	r19, 0x03	; 3
    313e:	93 07       	cpc	r25, r19
    3140:	09 f4       	brne	.+2      	; 0x3144 <_Z17handleLinkBusMsgsv+0x62>
    3142:	d8 c4       	rjmp	.+2480   	; 0x3af4 <_Z17handleLinkBusMsgsv+0xa12>
    3144:	82 36       	cpi	r24, 0x62	; 98
    3146:	e3 e0       	ldi	r30, 0x03	; 3
    3148:	9e 07       	cpc	r25, r30
    314a:	78 f4       	brcc	.+30     	; 0x316a <_Z17handleLinkBusMsgsv+0x88>
    314c:	85 31       	cpi	r24, 0x15	; 21
    314e:	f3 e0       	ldi	r31, 0x03	; 3
    3150:	9f 07       	cpc	r25, r31
    3152:	09 f4       	brne	.+2      	; 0x3156 <_Z17handleLinkBusMsgsv+0x74>
    3154:	1d c1       	rjmp	.+570    	; 0x3390 <_Z17handleLinkBusMsgsv+0x2ae>
    3156:	8e 31       	cpi	r24, 0x1E	; 30
    3158:	23 e0       	ldi	r18, 0x03	; 3
    315a:	92 07       	cpc	r25, r18
    315c:	09 f4       	brne	.+2      	; 0x3160 <_Z17handleLinkBusMsgsv+0x7e>
    315e:	3f c3       	rjmp	.+1662   	; 0x37de <_Z17handleLinkBusMsgsv+0x6fc>
    3160:	84 35       	cpi	r24, 0x54	; 84
    3162:	91 05       	cpc	r25, r1
    3164:	09 f4       	brne	.+2      	; 0x3168 <_Z17handleLinkBusMsgsv+0x86>
    3166:	3b c4       	rjmp	.+2166   	; 0x39de <_Z17handleLinkBusMsgsv+0x8fc>
    3168:	34 c6       	rjmp	.+3176   	; 0x3dd2 <_Z17handleLinkBusMsgsv+0xcf0>
    316a:	8f 3a       	cpi	r24, 0xAF	; 175
    316c:	33 e0       	ldi	r19, 0x03	; 3
    316e:	93 07       	cpc	r25, r19
    3170:	c9 f1       	breq	.+114    	; 0x31e4 <_Z17handleLinkBusMsgsv+0x102>
    3172:	86 3a       	cpi	r24, 0xA6	; 166
    3174:	ec e1       	ldi	r30, 0x1C	; 28
    3176:	9e 07       	cpc	r25, r30
    3178:	09 f4       	brne	.+2      	; 0x317c <_Z17handleLinkBusMsgsv+0x9a>
    317a:	49 c5       	rjmp	.+2706   	; 0x3c0e <_Z17handleLinkBusMsgsv+0xb2c>
    317c:	84 38       	cpi	r24, 0x84	; 132
    317e:	93 40       	sbci	r25, 0x03	; 3
    3180:	09 f4       	brne	.+2      	; 0x3184 <_Z17handleLinkBusMsgsv+0xa2>
    3182:	c7 c1       	rjmp	.+910    	; 0x3512 <_Z17handleLinkBusMsgsv+0x430>
    3184:	26 c6       	rjmp	.+3148   	; 0x3dd2 <_Z17handleLinkBusMsgsv+0xcf0>
    3186:	8a 39       	cpi	r24, 0x9A	; 154
    3188:	23 e2       	ldi	r18, 0x23	; 35
    318a:	92 07       	cpc	r25, r18
    318c:	e9 f1       	breq	.+122    	; 0x3208 <_Z17handleLinkBusMsgsv+0x126>
    318e:	8b 39       	cpi	r24, 0x9B	; 155
    3190:	33 e2       	ldi	r19, 0x23	; 35
    3192:	93 07       	cpc	r25, r19
    3194:	78 f4       	brcc	.+30     	; 0x31b4 <_Z17handleLinkBusMsgsv+0xd2>
    3196:	8d 3a       	cpi	r24, 0xAD	; 173
    3198:	e2 e2       	ldi	r30, 0x22	; 34
    319a:	9e 07       	cpc	r25, r30
    319c:	09 f4       	brne	.+2      	; 0x31a0 <_Z17handleLinkBusMsgsv+0xbe>
    319e:	96 c0       	rjmp	.+300    	; 0x32cc <_Z17handleLinkBusMsgsv+0x1ea>
    31a0:	81 3c       	cpi	r24, 0xC1	; 193
    31a2:	f2 e2       	ldi	r31, 0x22	; 34
    31a4:	9f 07       	cpc	r25, r31
    31a6:	09 f4       	brne	.+2      	; 0x31aa <_Z17handleLinkBusMsgsv+0xc8>
    31a8:	ee c0       	rjmp	.+476    	; 0x3386 <_Z17handleLinkBusMsgsv+0x2a4>
    31aa:	81 3d       	cpi	r24, 0xD1	; 209
    31ac:	9e 41       	sbci	r25, 0x1E	; 30
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <_Z17handleLinkBusMsgsv+0xd0>
    31b0:	b8 c4       	rjmp	.+2416   	; 0x3b22 <_Z17handleLinkBusMsgsv+0xa40>
    31b2:	0f c6       	rjmp	.+3102   	; 0x3dd2 <_Z17handleLinkBusMsgsv+0xcf0>
    31b4:	80 3d       	cpi	r24, 0xD0	; 208
    31b6:	33 e2       	ldi	r19, 0x23	; 35
    31b8:	93 07       	cpc	r25, r19
    31ba:	09 f4       	brne	.+2      	; 0x31be <_Z17handleLinkBusMsgsv+0xdc>
    31bc:	73 c3       	rjmp	.+1766   	; 0x38a4 <_Z17handleLinkBusMsgsv+0x7c2>
    31be:	81 3d       	cpi	r24, 0xD1	; 209
    31c0:	e3 e2       	ldi	r30, 0x23	; 35
    31c2:	9e 07       	cpc	r25, r30
    31c4:	28 f4       	brcc	.+10     	; 0x31d0 <_Z17handleLinkBusMsgsv+0xee>
    31c6:	8f 3c       	cpi	r24, 0xCF	; 207
    31c8:	93 42       	sbci	r25, 0x23	; 35
    31ca:	09 f4       	brne	.+2      	; 0x31ce <_Z17handleLinkBusMsgsv+0xec>
    31cc:	e8 c5       	rjmp	.+3024   	; 0x3d9e <_Z17handleLinkBusMsgsv+0xcbc>
    31ce:	01 c6       	rjmp	.+3074   	; 0x3dd2 <_Z17handleLinkBusMsgsv+0xcf0>
    31d0:	87 3f       	cpi	r24, 0xF7	; 247
    31d2:	23 e2       	ldi	r18, 0x23	; 35
    31d4:	92 07       	cpc	r25, r18
    31d6:	09 f4       	brne	.+2      	; 0x31da <_Z17handleLinkBusMsgsv+0xf8>
    31d8:	11 c2       	rjmp	.+1058   	; 0x35fc <_Z17handleLinkBusMsgsv+0x51a>
    31da:	8c 39       	cpi	r24, 0x9C	; 156
    31dc:	94 42       	sbci	r25, 0x24	; 36
    31de:	09 f4       	brne	.+2      	; 0x31e2 <_Z17handleLinkBusMsgsv+0x100>
    31e0:	f0 c5       	rjmp	.+3040   	; 0x3dc2 <_Z17handleLinkBusMsgsv+0xce0>
    31e2:	f7 c5       	rjmp	.+3054   	; 0x3dd2 <_Z17handleLinkBusMsgsv+0xcf0>
    31e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    31e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    31e8:	fc 01       	movw	r30, r24
    31ea:	83 81       	ldd	r24, Z+3	; 0x03
    31ec:	88 23       	and	r24, r24
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <_Z17handleLinkBusMsgsv+0x110>
    31f0:	f6 c5       	rjmp	.+3052   	; 0x3dde <_Z17handleLinkBusMsgsv+0xcfc>
    31f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    31f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    31f6:	03 96       	adiw	r24, 0x03	; 3
    31f8:	0e 94 da 49 	call	0x93b4	; 0x93b4 <atoi>
    31fc:	88 8b       	std	Y+16, r24	; 0x10
    31fe:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <_Z15linkbus_disablev>
    3202:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3206:	eb c5       	rjmp	.+3030   	; 0x3dde <_Z17handleLinkBusMsgsv+0xcfc>
    3208:	ff cf       	rjmp	.-2      	; 0x3208 <_Z17handleLinkBusMsgsv+0x126>
    320a:	8c 85       	ldd	r24, Y+12	; 0x0c
    320c:	9d 85       	ldd	r25, Y+13	; 0x0d
    320e:	fc 01       	movw	r30, r24
    3210:	83 81       	ldd	r24, Z+3	; 0x03
    3212:	89 8b       	std	Y+17, r24	; 0x11
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    321a:	89 89       	ldd	r24, Y+17	; 0x11
    321c:	8a 35       	cpi	r24, 0x5A	; 90
    321e:	21 f4       	brne	.+8      	; 0x3228 <_Z17handleLinkBusMsgsv+0x146>
    3220:	88 e7       	ldi	r24, 0x78	; 120
    3222:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3226:	dd c5       	rjmp	.+3002   	; 0x3de2 <_Z17handleLinkBusMsgsv+0xd00>
    3228:	89 89       	ldd	r24, Y+17	; 0x11
    322a:	80 33       	cpi	r24, 0x30	; 48
    322c:	d1 f5       	brne	.+116    	; 0x32a2 <_Z17handleLinkBusMsgsv+0x1c0>
    322e:	90 91 0f 46 	lds	r25, 0x460F	; 0x80460f <g_waiting_for_next_event>
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	99 23       	and	r25, r25
    3236:	09 f4       	brne	.+2      	; 0x323a <_Z17handleLinkBusMsgsv+0x158>
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	88 23       	and	r24, r24
    323c:	39 f0       	breq	.+14     	; 0x324c <_Z17handleLinkBusMsgsv+0x16a>
    323e:	4a ed       	ldi	r20, 0xDA	; 218
    3240:	52 e4       	ldi	r21, 0x42	; 66
    3242:	6c ed       	ldi	r22, 0xDC	; 220
    3244:	72 e4       	ldi	r23, 0x42	; 66
    3246:	83 e0       	ldi	r24, 0x03	; 3
    3248:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <_Z11lb_send_msg13LBMessageTypePKcPc>
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	2b 2f       	mov	r18, r27
    325a:	2f 93       	push	r18
    325c:	2a 2f       	mov	r18, r26
    325e:	2f 93       	push	r18
    3260:	29 2f       	mov	r18, r25
    3262:	2f 93       	push	r18
    3264:	8f 93       	push	r24
    3266:	80 ee       	ldi	r24, 0xE0	; 224
    3268:	92 e4       	ldi	r25, 0x42	; 66
    326a:	89 2f       	mov	r24, r25
    326c:	8f 93       	push	r24
    326e:	80 ee       	ldi	r24, 0xE0	; 224
    3270:	92 e4       	ldi	r25, 0x42	; 66
    3272:	8f 93       	push	r24
    3274:	85 e9       	ldi	r24, 0x95	; 149
    3276:	95 e4       	ldi	r25, 0x45	; 69
    3278:	89 2f       	mov	r24, r25
    327a:	8f 93       	push	r24
    327c:	85 e9       	ldi	r24, 0x95	; 149
    327e:	95 e4       	ldi	r25, 0x45	; 69
    3280:	8f 93       	push	r24
    3282:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    3286:	2d b7       	in	r18, 0x3d	; 61
    3288:	3e b7       	in	r19, 0x3e	; 62
    328a:	28 5f       	subi	r18, 0xF8	; 248
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	cd bf       	out	0x3d, r28	; 61
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	45 e9       	ldi	r20, 0x95	; 149
    3294:	55 e4       	ldi	r21, 0x45	; 69
    3296:	64 ee       	ldi	r22, 0xE4	; 228
    3298:	72 e4       	ldi	r23, 0x42	; 66
    329a:	83 e0       	ldi	r24, 0x03	; 3
    329c:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <_Z11lb_send_msg13LBMessageTypePKcPc>
    32a0:	a0 c5       	rjmp	.+2880   	; 0x3de2 <_Z17handleLinkBusMsgsv+0xd00>
    32a2:	89 89       	ldd	r24, Y+17	; 0x11
    32a4:	83 33       	cpi	r24, 0x33	; 51
    32a6:	09 f0       	breq	.+2      	; 0x32aa <_Z17handleLinkBusMsgsv+0x1c8>
    32a8:	9c c5       	rjmp	.+2872   	; 0x3de2 <_Z17handleLinkBusMsgsv+0xd00>
    32aa:	f8 94       	cli
    32ac:	10 92 d3 45 	sts	0x45D3, r1	; 0x8045d3 <_ZL19g_wifi_enable_delay>
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    32b6:	10 92 0f 46 	sts	0x460F, r1	; 0x80460f <g_waiting_for_next_event>
    32ba:	10 92 0e 46 	sts	0x460E, r1	; 0x80460e <g_check_for_next_event>
    32be:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	80 93 d4 45 	sts	0x45D4, r24	; 0x8045d4 <_ZL20g_shutting_down_wifi>
    32c8:	78 94       	sei
    32ca:	8b c5       	rjmp	.+2838   	; 0x3de2 <_Z17handleLinkBusMsgsv+0xd00>
    32cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    32d0:	fc 01       	movw	r30, r24
    32d2:	83 81       	ldd	r24, Z+3	; 0x03
    32d4:	88 23       	and	r24, r24
    32d6:	09 f4       	brne	.+2      	; 0x32da <_Z17handleLinkBusMsgsv+0x1f8>
    32d8:	86 c5       	rjmp	.+2828   	; 0x3de6 <_Z17handleLinkBusMsgsv+0xd04>
    32da:	8c 85       	ldd	r24, Y+12	; 0x0c
    32dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    32de:	fc 01       	movw	r30, r24
    32e0:	83 81       	ldd	r24, Z+3	; 0x03
    32e2:	8d 34       	cpi	r24, 0x4D	; 77
    32e4:	a9 f4       	brne	.+42     	; 0x3310 <_Z17handleLinkBusMsgsv+0x22e>
    32e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    32e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    32ea:	fc 01       	movw	r30, r24
    32ec:	80 8d       	ldd	r24, Z+24	; 0x18
    32ee:	88 23       	and	r24, r24
    32f0:	79 f0       	breq	.+30     	; 0x3310 <_Z17handleLinkBusMsgsv+0x22e>
    32f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    32f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    32f6:	48 96       	adiw	r24, 0x18	; 24
    32f8:	0e 94 da 49 	call	0x93b4	; 0x93b4 <atoi>
    32fc:	80 93 3f 46 	sts	0x463F, r24	; 0x80463f <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    3300:	90 93 40 46 	sts	0x4640, r25	; 0x804640 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    3304:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3308:	8f 5f       	subi	r24, 0xFF	; 255
    330a:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    330e:	09 c0       	rjmp	.+18     	; 0x3322 <_Z17handleLinkBusMsgsv+0x240>
    3310:	8c 85       	ldd	r24, Y+12	; 0x0c
    3312:	9d 85       	ldd	r25, Y+13	; 0x0d
    3314:	03 96       	adiw	r24, 0x03	; 3
    3316:	0e 94 da 49 	call	0x93b4	; 0x93b4 <atoi>
    331a:	80 93 3f 46 	sts	0x463F, r24	; 0x80463f <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    331e:	90 93 40 46 	sts	0x4640, r25	; 0x804640 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	70 e0       	ldi	r23, 0x00	; 0
    3326:	8f e3       	ldi	r24, 0x3F	; 63
    3328:	96 e4       	ldi	r25, 0x46	; 70
    332a:	0e 94 9b 43 	call	0x8736	; 0x8736 <_Z15txSetParametersPjPh>
    332e:	8a 8b       	std	Y+18, r24	; 0x12
    3330:	8a 89       	ldd	r24, Y+18	; 0x12
    3332:	88 23       	and	r24, r24
    3334:	19 f0       	breq	.+6      	; 0x333c <_Z17handleLinkBusMsgsv+0x25a>
    3336:	8a 89       	ldd	r24, Y+18	; 0x12
    3338:	80 93 c7 45 	sts	0x45C7, r24	; 0x8045c7 <_ZL17g_last_error_code>
    333c:	80 91 3f 46 	lds	r24, 0x463F	; 0x80463f <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    3340:	90 91 40 46 	lds	r25, 0x4640	; 0x804640 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    3344:	29 2f       	mov	r18, r25
    3346:	2f 93       	push	r18
    3348:	8f 93       	push	r24
    334a:	88 ee       	ldi	r24, 0xE8	; 232
    334c:	92 e4       	ldi	r25, 0x42	; 66
    334e:	89 2f       	mov	r24, r25
    3350:	8f 93       	push	r24
    3352:	88 ee       	ldi	r24, 0xE8	; 232
    3354:	92 e4       	ldi	r25, 0x42	; 66
    3356:	8f 93       	push	r24
    3358:	85 e9       	ldi	r24, 0x95	; 149
    335a:	95 e4       	ldi	r25, 0x45	; 69
    335c:	89 2f       	mov	r24, r25
    335e:	8f 93       	push	r24
    3360:	85 e9       	ldi	r24, 0x95	; 149
    3362:	95 e4       	ldi	r25, 0x45	; 69
    3364:	8f 93       	push	r24
    3366:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	45 e9       	ldi	r20, 0x95	; 149
    3378:	55 e4       	ldi	r21, 0x45	; 69
    337a:	6d ee       	ldi	r22, 0xED	; 237
    337c:	72 e4       	ldi	r23, 0x42	; 66
    337e:	83 e0       	ldi	r24, 0x03	; 3
    3380:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <_Z11lb_send_msg13LBMessageTypePKcPc>
    3384:	30 c5       	rjmp	.+2656   	; 0x3de6 <_Z17handleLinkBusMsgsv+0xd04>
    3386:	80 e2       	ldi	r24, 0x20	; 32
    3388:	96 e4       	ldi	r25, 0x46	; 70
    338a:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <_ZN13EepromManager13saveAllEEPROMEv>
    338e:	3e c5       	rjmp	.+2684   	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3390:	8c 85       	ldd	r24, Y+12	; 0x0c
    3392:	9d 85       	ldd	r25, Y+13	; 0x0d
    3394:	fc 01       	movw	r30, r24
    3396:	83 81       	ldd	r24, Z+3	; 0x03
    3398:	8b 8b       	std	Y+19, r24	; 0x13
    339a:	8b 89       	ldd	r24, Y+19	; 0x13
    339c:	81 33       	cpi	r24, 0x31	; 49
    339e:	21 f0       	breq	.+8      	; 0x33a8 <_Z17handleLinkBusMsgsv+0x2c6>
    33a0:	8b 89       	ldd	r24, Y+19	; 0x13
    33a2:	82 33       	cpi	r24, 0x32	; 50
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <_Z17handleLinkBusMsgsv+0x2c6>
    33a6:	a9 c0       	rjmp	.+338    	; 0x34fa <_Z17handleLinkBusMsgsv+0x418>
    33a8:	0e 94 32 45 	call	0x8a64	; 0x8a64 <_Z18txIsAntennaForBandv>
    33ac:	88 23       	and	r24, r24
    33ae:	31 f4       	brne	.+12     	; 0x33bc <_Z17handleLinkBusMsgsv+0x2da>
    33b0:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    33b4:	88 23       	and	r24, r24
    33b6:	11 f4       	brne	.+4      	; 0x33bc <_Z17handleLinkBusMsgsv+0x2da>
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	01 c0       	rjmp	.+2      	; 0x33be <_Z17handleLinkBusMsgsv+0x2dc>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	88 23       	and	r24, r24
    33c0:	21 f0       	breq	.+8      	; 0x33ca <_Z17handleLinkBusMsgsv+0x2e8>
    33c2:	87 ef       	ldi	r24, 0xF7	; 247
    33c4:	80 93 c7 45 	sts	0x45C7, r24	; 0x8045c7 <_ZL17g_last_error_code>
    33c8:	a2 c0       	rjmp	.+324    	; 0x350e <_Z17handleLinkBusMsgsv+0x42c>
    33ca:	8b 89       	ldd	r24, Y+19	; 0x13
    33cc:	81 33       	cpi	r24, 0x31	; 49
    33ce:	09 f0       	breq	.+2      	; 0x33d2 <_Z17handleLinkBusMsgsv+0x2f0>
    33d0:	64 c0       	rjmp	.+200    	; 0x349a <_Z17handleLinkBusMsgsv+0x3b8>
    33d2:	0e 94 32 45 	call	0x8a64	; 0x8a64 <_Z18txIsAntennaForBandv>
    33d6:	88 23       	and	r24, r24
    33d8:	21 f4       	brne	.+8      	; 0x33e2 <_Z17handleLinkBusMsgsv+0x300>
    33da:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    33de:	88 23       	and	r24, r24
    33e0:	11 f0       	breq	.+4      	; 0x33e6 <_Z17handleLinkBusMsgsv+0x304>
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	01 c0       	rjmp	.+2      	; 0x33e8 <_Z17handleLinkBusMsgsv+0x306>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	88 23       	and	r24, r24
    33ea:	09 f4       	brne	.+2      	; 0x33ee <_Z17handleLinkBusMsgsv+0x30c>
    33ec:	52 c0       	rjmp	.+164    	; 0x3492 <_Z17handleLinkBusMsgsv+0x3b0>
    33ee:	f8 94       	cli
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	8c a7       	std	Y+44, r24	; 0x2c
    33f4:	ce 01       	movw	r24, r28
    33f6:	8c 96       	adiw	r24, 0x2c	; 44
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	bc 01       	movw	r22, r24
    33fe:	86 ed       	ldi	r24, 0xD6	; 214
    3400:	95 e4       	ldi	r25, 0x45	; 69
    3402:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
    3406:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    340a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    340e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    3412:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    3416:	78 94       	sei
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	a0 e0       	ldi	r26, 0x00	; 0
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	80 93 04 46 	sts	0x4604, r24	; 0x804604 <g_event_start_time>
    3424:	90 93 05 46 	sts	0x4605, r25	; 0x804605 <g_event_start_time+0x1>
    3428:	a0 93 06 46 	sts	0x4606, r26	; 0x804606 <g_event_start_time+0x2>
    342c:	b0 93 07 46 	sts	0x4607, r27	; 0x804607 <g_event_start_time+0x3>
    3430:	8f ef       	ldi	r24, 0xFF	; 255
    3432:	9f ef       	ldi	r25, 0xFF	; 255
    3434:	dc 01       	movw	r26, r24
    3436:	80 93 08 46 	sts	0x4608, r24	; 0x804608 <g_event_finish_time>
    343a:	90 93 09 46 	sts	0x4609, r25	; 0x804609 <g_event_finish_time+0x1>
    343e:	a0 93 0a 46 	sts	0x460A, r26	; 0x80460a <g_event_finish_time+0x2>
    3442:	b0 93 0b 46 	sts	0x460B, r27	; 0x80460b <g_event_finish_time+0x3>
    3446:	8f e0       	ldi	r24, 0x0F	; 15
    3448:	97 e2       	ldi	r25, 0x27	; 39
    344a:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    344e:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3452:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    3456:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    345a:	8f e0       	ldi	r24, 0x0F	; 15
    345c:	97 e2       	ldi	r25, 0x27	; 39
    345e:	a0 e0       	ldi	r26, 0x00	; 0
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    3466:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    346a:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    346e:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    3472:	8f ef       	ldi	r24, 0xFF	; 255
    3474:	9f ef       	ldi	r25, 0xFF	; 255
    3476:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    347a:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	80 93 0d 46 	sts	0x460D, r24	; 0x80460d <g_event_commenced>
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	80 93 0c 46 	sts	0x460C, r24	; 0x80460c <g_event_enabled>
    348a:	8d ef       	ldi	r24, 0xFD	; 253
    348c:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    3490:	3e c0       	rjmp	.+124    	; 0x350e <_Z17handleLinkBusMsgsv+0x42c>
    3492:	87 ef       	ldi	r24, 0xF7	; 247
    3494:	80 93 c7 45 	sts	0x45C7, r24	; 0x8045c7 <_ZL17g_last_error_code>
    3498:	3a c0       	rjmp	.+116    	; 0x350e <_Z17handleLinkBusMsgsv+0x42c>
    349a:	8b 89       	ldd	r24, Y+19	; 0x13
    349c:	82 33       	cpi	r24, 0x32	; 50
    349e:	b9 f5       	brne	.+110    	; 0x350e <_Z17handleLinkBusMsgsv+0x42c>
    34a0:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    34a4:	8e 30       	cpi	r24, 0x0E	; 14
    34a6:	20 f4       	brcc	.+8      	; 0x34b0 <_Z17handleLinkBusMsgsv+0x3ce>
    34a8:	8d ec       	ldi	r24, 0xCD	; 205
    34aa:	80 93 c7 45 	sts	0x45C7, r24	; 0x8045c7 <_ZL17g_last_error_code>
    34ae:	2f c0       	rjmp	.+94     	; 0x350e <_Z17handleLinkBusMsgsv+0x42c>
    34b0:	1d a6       	std	Y+45, r1	; 0x2d
    34b2:	ce 01       	movw	r24, r28
    34b4:	8d 96       	adiw	r24, 0x2d	; 45
    34b6:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <_Z11launchEventP2SC>
    34ba:	80 93 42 46 	sts	0x4642, r24	; 0x804642 <_ZZ17handleLinkBusMsgsvE2ec>
    34be:	80 91 10 46 	lds	r24, 0x4610	; 0x804610 <_ZL13g_go_to_sleep>
    34c2:	88 23       	and	r24, r24
    34c4:	31 f0       	breq	.+12     	; 0x34d2 <_Z17handleLinkBusMsgsv+0x3f0>
    34c6:	80 91 d5 45 	lds	r24, 0x45D5	; 0x8045d5 <_ZL11g_sleepType>
    34ca:	88 23       	and	r24, r24
    34cc:	11 f0       	breq	.+4      	; 0x34d2 <_Z17handleLinkBusMsgsv+0x3f0>
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	01 c0       	rjmp	.+2      	; 0x34d4 <_Z17handleLinkBusMsgsv+0x3f2>
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	88 23       	and	r24, r24
    34d6:	29 f0       	breq	.+10     	; 0x34e2 <_Z17handleLinkBusMsgsv+0x400>
    34d8:	83 e0       	ldi	r24, 0x03	; 3
    34da:	80 93 d5 45 	sts	0x45D5, r24	; 0x8045d5 <_ZL11g_sleepType>
    34de:	10 92 10 46 	sts	0x4610, r1	; 0x804610 <_ZL13g_go_to_sleep>
    34e2:	8c e3       	ldi	r24, 0x3C	; 60
    34e4:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    34e8:	80 91 42 46 	lds	r24, 0x4642	; 0x804642 <_ZZ17handleLinkBusMsgsvE2ec>
    34ec:	88 23       	and	r24, r24
    34ee:	79 f4       	brne	.+30     	; 0x350e <_Z17handleLinkBusMsgsv+0x42c>
    34f0:	80 e2       	ldi	r24, 0x20	; 32
    34f2:	96 e4       	ldi	r25, 0x46	; 70
    34f4:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <_ZN13EepromManager13saveAllEEPROMEv>
    34f8:	0a c0       	rjmp	.+20     	; 0x350e <_Z17handleLinkBusMsgsv+0x42c>
    34fa:	8b 89       	ldd	r24, Y+19	; 0x13
    34fc:	80 33       	cpi	r24, 0x30	; 48
    34fe:	09 f0       	breq	.+2      	; 0x3502 <_Z17handleLinkBusMsgsv+0x420>
    3500:	74 c4       	rjmp	.+2280   	; 0x3dea <_Z17handleLinkBusMsgsv+0xd08>
    3502:	10 92 41 46 	sts	0x4641, r1	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3506:	8c ee       	ldi	r24, 0xEC	; 236
    3508:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    350c:	6e c4       	rjmp	.+2268   	; 0x3dea <_Z17handleLinkBusMsgsv+0xd08>
    350e:	00 00       	nop
    3510:	6c c4       	rjmp	.+2264   	; 0x3dea <_Z17handleLinkBusMsgsv+0xd08>
    3512:	1a 82       	std	Y+2, r1	; 0x02
    3514:	1b 82       	std	Y+3, r1	; 0x03
    3516:	1c 82       	std	Y+4, r1	; 0x04
    3518:	1d 82       	std	Y+5, r1	; 0x05
    351a:	8c 85       	ldd	r24, Y+12	; 0x0c
    351c:	9d 85       	ldd	r25, Y+13	; 0x0d
    351e:	fc 01       	movw	r30, r24
    3520:	83 81       	ldd	r24, Z+3	; 0x03
    3522:	83 35       	cpi	r24, 0x53	; 83
    3524:	c1 f5       	brne	.+112    	; 0x3596 <_Z17handleLinkBusMsgsv+0x4b4>
    3526:	8c 85       	ldd	r24, Y+12	; 0x0c
    3528:	9d 85       	ldd	r25, Y+13	; 0x0d
    352a:	fc 01       	movw	r30, r24
    352c:	80 8d       	ldd	r24, Z+24	; 0x18
    352e:	88 23       	and	r24, r24
    3530:	59 f0       	breq	.+22     	; 0x3548 <_Z17handleLinkBusMsgsv+0x466>
    3532:	8c 85       	ldd	r24, Y+12	; 0x0c
    3534:	9d 85       	ldd	r25, Y+13	; 0x0d
    3536:	48 96       	adiw	r24, 0x18	; 24
    3538:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	8a 83       	std	Y+2, r24	; 0x02
    3542:	9b 83       	std	Y+3, r25	; 0x03
    3544:	ac 83       	std	Y+4, r26	; 0x04
    3546:	bd 83       	std	Y+5, r27	; 0x05
    3548:	8a 81       	ldd	r24, Y+2	; 0x02
    354a:	9b 81       	ldd	r25, Y+3	; 0x03
    354c:	ac 81       	ldd	r26, Y+4	; 0x04
    354e:	bd 81       	ldd	r27, Y+5	; 0x05
    3550:	89 2b       	or	r24, r25
    3552:	8a 2b       	or	r24, r26
    3554:	8b 2b       	or	r24, r27
    3556:	09 f4       	brne	.+2      	; 0x355a <_Z17handleLinkBusMsgsv+0x478>
    3558:	4a c4       	rjmp	.+2196   	; 0x3dee <_Z17handleLinkBusMsgsv+0xd0c>
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	9b 81       	ldd	r25, Y+3	; 0x03
    355e:	ac 81       	ldd	r26, Y+4	; 0x04
    3560:	bd 81       	ldd	r27, Y+5	; 0x05
    3562:	80 93 04 46 	sts	0x4604, r24	; 0x804604 <g_event_start_time>
    3566:	90 93 05 46 	sts	0x4605, r25	; 0x804605 <g_event_start_time+0x1>
    356a:	a0 93 06 46 	sts	0x4606, r26	; 0x804606 <g_event_start_time+0x2>
    356e:	b0 93 07 46 	sts	0x4607, r27	; 0x804607 <g_event_start_time+0x3>
    3572:	f8 94       	cli
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    3588:	78 94       	sei
    358a:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    358e:	8f 5f       	subi	r24, 0xFF	; 255
    3590:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3594:	2c c4       	rjmp	.+2136   	; 0x3dee <_Z17handleLinkBusMsgsv+0xd0c>
    3596:	8c 85       	ldd	r24, Y+12	; 0x0c
    3598:	9d 85       	ldd	r25, Y+13	; 0x0d
    359a:	fc 01       	movw	r30, r24
    359c:	83 81       	ldd	r24, Z+3	; 0x03
    359e:	86 34       	cpi	r24, 0x46	; 70
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <_Z17handleLinkBusMsgsv+0x4c2>
    35a2:	25 c4       	rjmp	.+2122   	; 0x3dee <_Z17handleLinkBusMsgsv+0xd0c>
    35a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    35a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    35a8:	fc 01       	movw	r30, r24
    35aa:	80 8d       	ldd	r24, Z+24	; 0x18
    35ac:	88 23       	and	r24, r24
    35ae:	59 f0       	breq	.+22     	; 0x35c6 <_Z17handleLinkBusMsgsv+0x4e4>
    35b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    35b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    35b4:	48 96       	adiw	r24, 0x18	; 24
    35b6:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	8a 83       	std	Y+2, r24	; 0x02
    35c0:	9b 83       	std	Y+3, r25	; 0x03
    35c2:	ac 83       	std	Y+4, r26	; 0x04
    35c4:	bd 83       	std	Y+5, r27	; 0x05
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	9b 81       	ldd	r25, Y+3	; 0x03
    35ca:	ac 81       	ldd	r26, Y+4	; 0x04
    35cc:	bd 81       	ldd	r27, Y+5	; 0x05
    35ce:	89 2b       	or	r24, r25
    35d0:	8a 2b       	or	r24, r26
    35d2:	8b 2b       	or	r24, r27
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <_Z17handleLinkBusMsgsv+0x4f6>
    35d6:	0b c4       	rjmp	.+2070   	; 0x3dee <_Z17handleLinkBusMsgsv+0xd0c>
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	9b 81       	ldd	r25, Y+3	; 0x03
    35dc:	ac 81       	ldd	r26, Y+4	; 0x04
    35de:	bd 81       	ldd	r27, Y+5	; 0x05
    35e0:	80 93 08 46 	sts	0x4608, r24	; 0x804608 <g_event_finish_time>
    35e4:	90 93 09 46 	sts	0x4609, r25	; 0x804609 <g_event_finish_time+0x1>
    35e8:	a0 93 0a 46 	sts	0x460A, r26	; 0x80460a <g_event_finish_time+0x2>
    35ec:	b0 93 0b 46 	sts	0x460B, r27	; 0x80460b <g_event_finish_time+0x3>
    35f0:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35f4:	8f 5f       	subi	r24, 0xFF	; 255
    35f6:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35fa:	f9 c3       	rjmp	.+2034   	; 0x3dee <_Z17handleLinkBusMsgsv+0xd0c>
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    3602:	8c 85       	ldd	r24, Y+12	; 0x0c
    3604:	9d 85       	ldd	r25, Y+13	; 0x0d
    3606:	fc 01       	movw	r30, r24
    3608:	80 81       	ld	r24, Z
    360a:	81 30       	cpi	r24, 0x01	; 1
    360c:	09 f0       	breq	.+2      	; 0x3610 <_Z17handleLinkBusMsgsv+0x52e>
    360e:	4b c0       	rjmp	.+150    	; 0x36a6 <_Z17handleLinkBusMsgsv+0x5c4>
    3610:	8c 85       	ldd	r24, Y+12	; 0x0c
    3612:	9d 85       	ldd	r25, Y+13	; 0x0d
    3614:	fc 01       	movw	r30, r24
    3616:	83 81       	ldd	r24, Z+3	; 0x03
    3618:	88 23       	and	r24, r24
    361a:	d1 f0       	breq	.+52     	; 0x3650 <_Z17handleLinkBusMsgsv+0x56e>
    361c:	8c 85       	ldd	r24, Y+12	; 0x0c
    361e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3620:	03 96       	adiw	r24, 0x03	; 3
    3622:	44 e1       	ldi	r20, 0x14	; 20
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	bc 01       	movw	r22, r24
    3628:	85 e9       	ldi	r24, 0x95	; 149
    362a:	95 e4       	ldi	r25, 0x45	; 69
    362c:	0e 94 42 4a 	call	0x9484	; 0x9484 <strncpy>
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	85 e9       	ldi	r24, 0x95	; 149
    3634:	95 e4       	ldi	r25, 0x45	; 69
    3636:	0e 94 65 2d 	call	0x5aca	; 0x5aca <ds3231_set_date_time>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	bc 01       	movw	r22, r24
    3648:	cd 01       	movw	r24, r26
    364a:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    364e:	d1 c3       	rjmp	.+1954   	; 0x3df2 <_Z17handleLinkBusMsgsv+0xd10>
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	2b 2f       	mov	r18, r27
    365e:	2f 93       	push	r18
    3660:	2a 2f       	mov	r18, r26
    3662:	2f 93       	push	r18
    3664:	29 2f       	mov	r18, r25
    3666:	2f 93       	push	r18
    3668:	8f 93       	push	r24
    366a:	80 ee       	ldi	r24, 0xE0	; 224
    366c:	92 e4       	ldi	r25, 0x42	; 66
    366e:	89 2f       	mov	r24, r25
    3670:	8f 93       	push	r24
    3672:	80 ee       	ldi	r24, 0xE0	; 224
    3674:	92 e4       	ldi	r25, 0x42	; 66
    3676:	8f 93       	push	r24
    3678:	85 e9       	ldi	r24, 0x95	; 149
    367a:	95 e4       	ldi	r25, 0x45	; 69
    367c:	89 2f       	mov	r24, r25
    367e:	8f 93       	push	r24
    3680:	85 e9       	ldi	r24, 0x95	; 149
    3682:	95 e4       	ldi	r25, 0x45	; 69
    3684:	8f 93       	push	r24
    3686:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    368a:	2d b7       	in	r18, 0x3d	; 61
    368c:	3e b7       	in	r19, 0x3e	; 62
    368e:	28 5f       	subi	r18, 0xF8	; 248
    3690:	3f 4f       	sbci	r19, 0xFF	; 255
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	45 e9       	ldi	r20, 0x95	; 149
    3698:	55 e4       	ldi	r21, 0x45	; 69
    369a:	64 ee       	ldi	r22, 0xE4	; 228
    369c:	72 e4       	ldi	r23, 0x42	; 66
    369e:	83 e0       	ldi	r24, 0x03	; 3
    36a0:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <_Z11lb_send_msg13LBMessageTypePKcPc>
    36a4:	a6 c3       	rjmp	.+1868   	; 0x3df2 <_Z17handleLinkBusMsgsv+0xd10>
    36a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    36a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    36aa:	fc 01       	movw	r30, r24
    36ac:	80 81       	ld	r24, Z
    36ae:	82 30       	cpi	r24, 0x02	; 2
    36b0:	09 f0       	breq	.+2      	; 0x36b4 <_Z17handleLinkBusMsgsv+0x5d2>
    36b2:	9f c3       	rjmp	.+1854   	; 0x3df2 <_Z17handleLinkBusMsgsv+0xd10>
    36b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    36b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    36b8:	fc 01       	movw	r30, r24
    36ba:	83 81       	ldd	r24, Z+3	; 0x03
    36bc:	88 35       	cpi	r24, 0x58	; 88
    36be:	c9 f5       	brne	.+114    	; 0x3732 <_Z17handleLinkBusMsgsv+0x650>
    36c0:	1c 8a       	std	Y+20, r1	; 0x14
    36c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    36c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    36c6:	fc 01       	movw	r30, r24
    36c8:	80 8d       	ldd	r24, Z+24	; 0x18
    36ca:	88 23       	and	r24, r24
    36cc:	51 f0       	breq	.+20     	; 0x36e2 <_Z17handleLinkBusMsgsv+0x600>
    36ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    36d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    36d2:	48 96       	adiw	r24, 0x18	; 24
    36d4:	0e 94 da 49 	call	0x93b4	; 0x93b4 <atoi>
    36d8:	8c 8b       	std	Y+20, r24	; 0x14
    36da:	8c 89       	ldd	r24, Y+20	; 0x14
    36dc:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <ds3231_set_aging>
    36e0:	88 c3       	rjmp	.+1808   	; 0x3df2 <_Z17handleLinkBusMsgsv+0xd10>
    36e2:	0e 94 ee 2d 	call	0x5bdc	; 0x5bdc <ds3231_get_aging>
    36e6:	8c 8b       	std	Y+20, r24	; 0x14
    36e8:	8c 89       	ldd	r24, Y+20	; 0x14
    36ea:	08 2e       	mov	r0, r24
    36ec:	00 0c       	add	r0, r0
    36ee:	99 0b       	sbc	r25, r25
    36f0:	29 2f       	mov	r18, r25
    36f2:	2f 93       	push	r18
    36f4:	8f 93       	push	r24
    36f6:	81 ef       	ldi	r24, 0xF1	; 241
    36f8:	92 e4       	ldi	r25, 0x42	; 66
    36fa:	89 2f       	mov	r24, r25
    36fc:	8f 93       	push	r24
    36fe:	81 ef       	ldi	r24, 0xF1	; 241
    3700:	92 e4       	ldi	r25, 0x42	; 66
    3702:	8f 93       	push	r24
    3704:	85 e9       	ldi	r24, 0x95	; 149
    3706:	95 e4       	ldi	r25, 0x45	; 69
    3708:	89 2f       	mov	r24, r25
    370a:	8f 93       	push	r24
    370c:	85 e9       	ldi	r24, 0x95	; 149
    370e:	95 e4       	ldi	r25, 0x45	; 69
    3710:	8f 93       	push	r24
    3712:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	45 e9       	ldi	r20, 0x95	; 149
    3724:	55 e4       	ldi	r21, 0x45	; 69
    3726:	64 ee       	ldi	r22, 0xE4	; 228
    3728:	72 e4       	ldi	r23, 0x42	; 66
    372a:	83 e0       	ldi	r24, 0x03	; 3
    372c:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <_Z11lb_send_msg13LBMessageTypePKcPc>
    3730:	60 c3       	rjmp	.+1728   	; 0x3df2 <_Z17handleLinkBusMsgsv+0xd10>
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	8d 8b       	std	Y+21, r24	; 0x15
    3740:	9e 8b       	std	Y+22, r25	; 0x16
    3742:	af 8b       	std	Y+23, r26	; 0x17
    3744:	b8 8f       	std	Y+24, r27	; 0x18
    3746:	8d 89       	ldd	r24, Y+21	; 0x15
    3748:	9e 89       	ldd	r25, Y+22	; 0x16
    374a:	af 89       	ldd	r26, Y+23	; 0x17
    374c:	b8 8d       	ldd	r27, Y+24	; 0x18
    374e:	bc 01       	movw	r22, r24
    3750:	cd 01       	movw	r24, r26
    3752:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    3756:	80 91 43 46 	lds	r24, 0x4643	; 0x804643 <_ZZ17handleLinkBusMsgsvE8lastTime>
    375a:	90 91 44 46 	lds	r25, 0x4644	; 0x804644 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    375e:	a0 91 45 46 	lds	r26, 0x4645	; 0x804645 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    3762:	b0 91 46 46 	lds	r27, 0x4646	; 0x804646 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    3766:	2d 89       	ldd	r18, Y+21	; 0x15
    3768:	3e 89       	ldd	r19, Y+22	; 0x16
    376a:	4f 89       	ldd	r20, Y+23	; 0x17
    376c:	58 8d       	ldd	r21, Y+24	; 0x18
    376e:	28 17       	cp	r18, r24
    3770:	39 07       	cpc	r19, r25
    3772:	4a 07       	cpc	r20, r26
    3774:	5b 07       	cpc	r21, r27
    3776:	09 f4       	brne	.+2      	; 0x377a <_Z17handleLinkBusMsgsv+0x698>
    3778:	3c c3       	rjmp	.+1656   	; 0x3df2 <_Z17handleLinkBusMsgsv+0xd10>
    377a:	88 8d       	ldd	r24, Y+24	; 0x18
    377c:	8f 93       	push	r24
    377e:	8f 89       	ldd	r24, Y+23	; 0x17
    3780:	8f 93       	push	r24
    3782:	8e 89       	ldd	r24, Y+22	; 0x16
    3784:	8f 93       	push	r24
    3786:	8d 89       	ldd	r24, Y+21	; 0x15
    3788:	8f 93       	push	r24
    378a:	80 ee       	ldi	r24, 0xE0	; 224
    378c:	92 e4       	ldi	r25, 0x42	; 66
    378e:	89 2f       	mov	r24, r25
    3790:	8f 93       	push	r24
    3792:	80 ee       	ldi	r24, 0xE0	; 224
    3794:	92 e4       	ldi	r25, 0x42	; 66
    3796:	8f 93       	push	r24
    3798:	85 e9       	ldi	r24, 0x95	; 149
    379a:	95 e4       	ldi	r25, 0x45	; 69
    379c:	89 2f       	mov	r24, r25
    379e:	8f 93       	push	r24
    37a0:	85 e9       	ldi	r24, 0x95	; 149
    37a2:	95 e4       	ldi	r25, 0x45	; 69
    37a4:	8f 93       	push	r24
    37a6:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    37aa:	2d b7       	in	r18, 0x3d	; 61
    37ac:	3e b7       	in	r19, 0x3e	; 62
    37ae:	28 5f       	subi	r18, 0xF8	; 248
    37b0:	3f 4f       	sbci	r19, 0xFF	; 255
    37b2:	cd bf       	out	0x3d, r28	; 61
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	45 e9       	ldi	r20, 0x95	; 149
    37b8:	55 e4       	ldi	r21, 0x45	; 69
    37ba:	64 ee       	ldi	r22, 0xE4	; 228
    37bc:	72 e4       	ldi	r23, 0x42	; 66
    37be:	83 e0       	ldi	r24, 0x03	; 3
    37c0:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <_Z11lb_send_msg13LBMessageTypePKcPc>
    37c4:	8d 89       	ldd	r24, Y+21	; 0x15
    37c6:	9e 89       	ldd	r25, Y+22	; 0x16
    37c8:	af 89       	ldd	r26, Y+23	; 0x17
    37ca:	b8 8d       	ldd	r27, Y+24	; 0x18
    37cc:	80 93 43 46 	sts	0x4643, r24	; 0x804643 <_ZZ17handleLinkBusMsgsvE8lastTime>
    37d0:	90 93 44 46 	sts	0x4644, r25	; 0x804644 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    37d4:	a0 93 45 46 	sts	0x4645, r26	; 0x804645 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    37d8:	b0 93 46 46 	sts	0x4646, r27	; 0x804646 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    37dc:	0a c3       	rjmp	.+1556   	; 0x3df2 <_Z17handleLinkBusMsgsv+0xd10>
    37de:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    37e2:	8f 5f       	subi	r24, 0xFF	; 255
    37e4:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    37e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    37ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    37ec:	fc 01       	movw	r30, r24
    37ee:	83 81       	ldd	r24, Z+3	; 0x03
    37f0:	88 23       	and	r24, r24
    37f2:	81 f1       	breq	.+96     	; 0x3854 <_Z17handleLinkBusMsgsv+0x772>
    37f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    37f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    37f8:	03 96       	adiw	r24, 0x03	; 3
    37fa:	44 e1       	ldi	r20, 0x14	; 20
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	bc 01       	movw	r22, r24
    3800:	8b ee       	ldi	r24, 0xEB	; 235
    3802:	95 e4       	ldi	r25, 0x45	; 69
    3804:	0e 94 42 4a 	call	0x9484	; 0x9484 <strncpy>
    3808:	80 91 eb 45 	lds	r24, 0x45EB	; 0x8045eb <g_messages_text+0x15>
    380c:	88 23       	and	r24, r24
    380e:	09 f4       	brne	.+2      	; 0x3812 <_Z17handleLinkBusMsgsv+0x730>
    3810:	f2 c2       	rjmp	.+1508   	; 0x3df6 <_Z17handleLinkBusMsgsv+0xd14>
    3812:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    3816:	88 2f       	mov	r24, r24
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	bc 01       	movw	r22, r24
    381c:	8b ee       	ldi	r24, 0xEB	; 235
    381e:	95 e4       	ldi	r25, 0x45	; 69
    3820:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <_Z26timeRequiredToSendStrAtWPMPcj>
    3824:	8c 50       	subi	r24, 0x0C	; 12
    3826:	9e 4f       	sbci	r25, 0xFE	; 254
    3828:	96 95       	lsr	r25
    382a:	87 95       	ror	r24
    382c:	96 95       	lsr	r25
    382e:	87 95       	ror	r24
    3830:	96 95       	lsr	r25
    3832:	87 95       	ror	r24
    3834:	9c 01       	movw	r18, r24
    3836:	a5 ec       	ldi	r26, 0xC5	; 197
    3838:	b0 e2       	ldi	r27, 0x20	; 32
    383a:	0e 94 90 48 	call	0x9120	; 0x9120 <__umulhisi3>
    383e:	92 95       	swap	r25
    3840:	82 95       	swap	r24
    3842:	8f 70       	andi	r24, 0x0F	; 15
    3844:	89 27       	eor	r24, r25
    3846:	9f 70       	andi	r25, 0x0F	; 15
    3848:	89 27       	eor	r24, r25
    384a:	80 93 00 46 	sts	0x4600, r24	; 0x804600 <g_time_needed_for_ID>
    384e:	90 93 01 46 	sts	0x4601, r25	; 0x804601 <g_time_needed_for_ID+0x1>
    3852:	d1 c2       	rjmp	.+1442   	; 0x3df6 <_Z17handleLinkBusMsgsv+0xd14>
    3854:	80 91 eb 45 	lds	r24, 0x45EB	; 0x8045eb <g_messages_text+0x15>
    3858:	88 23       	and	r24, r24
    385a:	09 f4       	brne	.+2      	; 0x385e <_Z17handleLinkBusMsgsv+0x77c>
    385c:	cc c2       	rjmp	.+1432   	; 0x3df6 <_Z17handleLinkBusMsgsv+0xd14>
    385e:	8b ee       	ldi	r24, 0xEB	; 235
    3860:	95 e4       	ldi	r25, 0x45	; 69
    3862:	89 2f       	mov	r24, r25
    3864:	8f 93       	push	r24
    3866:	8b ee       	ldi	r24, 0xEB	; 235
    3868:	95 e4       	ldi	r25, 0x45	; 69
    386a:	8f 93       	push	r24
    386c:	86 ef       	ldi	r24, 0xF6	; 246
    386e:	92 e4       	ldi	r25, 0x42	; 66
    3870:	89 2f       	mov	r24, r25
    3872:	8f 93       	push	r24
    3874:	86 ef       	ldi	r24, 0xF6	; 246
    3876:	92 e4       	ldi	r25, 0x42	; 66
    3878:	8f 93       	push	r24
    387a:	85 e9       	ldi	r24, 0x95	; 149
    387c:	95 e4       	ldi	r25, 0x45	; 69
    387e:	89 2f       	mov	r24, r25
    3880:	8f 93       	push	r24
    3882:	85 e9       	ldi	r24, 0x95	; 149
    3884:	95 e4       	ldi	r25, 0x45	; 69
    3886:	8f 93       	push	r24
    3888:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	85 e9       	ldi	r24, 0x95	; 149
    389a:	95 e4       	ldi	r25, 0x45	; 69
    389c:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_Z12lb_send_textPc>
    38a0:	19 82       	std	Y+1, r1	; 0x01
    38a2:	a9 c2       	rjmp	.+1362   	; 0x3df6 <_Z17handleLinkBusMsgsv+0xd14>
    38a4:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    38a8:	89 8f       	std	Y+25, r24	; 0x19
    38aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    38ae:	fc 01       	movw	r30, r24
    38b0:	83 81       	ldd	r24, Z+3	; 0x03
    38b2:	89 34       	cpi	r24, 0x49	; 73
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <_Z17handleLinkBusMsgsv+0x7d6>
    38b6:	4f c0       	rjmp	.+158    	; 0x3956 <_Z17handleLinkBusMsgsv+0x874>
    38b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    38bc:	fc 01       	movw	r30, r24
    38be:	80 8d       	ldd	r24, Z+24	; 0x18
    38c0:	88 23       	and	r24, r24
    38c2:	09 f4       	brne	.+2      	; 0x38c6 <_Z17handleLinkBusMsgsv+0x7e4>
    38c4:	9a c2       	rjmp	.+1332   	; 0x3dfa <_Z17handleLinkBusMsgsv+0xd18>
    38c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    38c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    38ca:	48 96       	adiw	r24, 0x18	; 24
    38cc:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	89 8f       	std	Y+25, r24	; 0x19
    38d6:	89 8d       	ldd	r24, Y+25	; 0x19
    38d8:	8a 8f       	std	Y+26, r24	; 0x1a
    38da:	85 e0       	ldi	r24, 0x05	; 5
    38dc:	8b 8f       	std	Y+27, r24	; 0x1b
    38de:	84 e1       	ldi	r24, 0x14	; 20
    38e0:	8c 8f       	std	Y+28, r24	; 0x1c
    38e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38e6:	89 17       	cp	r24, r25
    38e8:	40 f0       	brcs	.+16     	; 0x38fa <_Z17handleLinkBusMsgsv+0x818>
    38ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ee:	98 17       	cp	r25, r24
    38f0:	10 f4       	brcc	.+4      	; 0x38f6 <_Z17handleLinkBusMsgsv+0x814>
    38f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38f4:	03 c0       	rjmp	.+6      	; 0x38fc <_Z17handleLinkBusMsgsv+0x81a>
    38f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38f8:	01 c0       	rjmp	.+2      	; 0x38fc <_Z17handleLinkBusMsgsv+0x81a>
    38fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38fc:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    3900:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3904:	8f 5f       	subi	r24, 0xFF	; 255
    3906:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    390a:	80 91 eb 45 	lds	r24, 0x45EB	; 0x8045eb <g_messages_text+0x15>
    390e:	88 23       	and	r24, r24
    3910:	09 f4       	brne	.+2      	; 0x3914 <_Z17handleLinkBusMsgsv+0x832>
    3912:	73 c2       	rjmp	.+1254   	; 0x3dfa <_Z17handleLinkBusMsgsv+0xd18>
    3914:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    3918:	88 2f       	mov	r24, r24
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	bc 01       	movw	r22, r24
    391e:	8b ee       	ldi	r24, 0xEB	; 235
    3920:	95 e4       	ldi	r25, 0x45	; 69
    3922:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <_Z26timeRequiredToSendStrAtWPMPcj>
    3926:	8c 50       	subi	r24, 0x0C	; 12
    3928:	9e 4f       	sbci	r25, 0xFE	; 254
    392a:	96 95       	lsr	r25
    392c:	87 95       	ror	r24
    392e:	96 95       	lsr	r25
    3930:	87 95       	ror	r24
    3932:	96 95       	lsr	r25
    3934:	87 95       	ror	r24
    3936:	9c 01       	movw	r18, r24
    3938:	a5 ec       	ldi	r26, 0xC5	; 197
    393a:	b0 e2       	ldi	r27, 0x20	; 32
    393c:	0e 94 90 48 	call	0x9120	; 0x9120 <__umulhisi3>
    3940:	92 95       	swap	r25
    3942:	82 95       	swap	r24
    3944:	8f 70       	andi	r24, 0x0F	; 15
    3946:	89 27       	eor	r24, r25
    3948:	9f 70       	andi	r25, 0x0F	; 15
    394a:	89 27       	eor	r24, r25
    394c:	80 93 00 46 	sts	0x4600, r24	; 0x804600 <g_time_needed_for_ID>
    3950:	90 93 01 46 	sts	0x4601, r25	; 0x804601 <g_time_needed_for_ID+0x1>
    3954:	52 c2       	rjmp	.+1188   	; 0x3dfa <_Z17handleLinkBusMsgsv+0xd18>
    3956:	8c 85       	ldd	r24, Y+12	; 0x0c
    3958:	9d 85       	ldd	r25, Y+13	; 0x0d
    395a:	fc 01       	movw	r30, r24
    395c:	83 81       	ldd	r24, Z+3	; 0x03
    395e:	80 35       	cpi	r24, 0x50	; 80
    3960:	09 f0       	breq	.+2      	; 0x3964 <_Z17handleLinkBusMsgsv+0x882>
    3962:	4b c2       	rjmp	.+1174   	; 0x3dfa <_Z17handleLinkBusMsgsv+0xd18>
    3964:	8c 85       	ldd	r24, Y+12	; 0x0c
    3966:	9d 85       	ldd	r25, Y+13	; 0x0d
    3968:	fc 01       	movw	r30, r24
    396a:	80 8d       	ldd	r24, Z+24	; 0x18
    396c:	88 23       	and	r24, r24
    396e:	09 f4       	brne	.+2      	; 0x3972 <_Z17handleLinkBusMsgsv+0x890>
    3970:	44 c2       	rjmp	.+1160   	; 0x3dfa <_Z17handleLinkBusMsgsv+0xd18>
    3972:	8c 85       	ldd	r24, Y+12	; 0x0c
    3974:	9d 85       	ldd	r25, Y+13	; 0x0d
    3976:	48 96       	adiw	r24, 0x18	; 24
    3978:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	89 8f       	std	Y+25, r24	; 0x19
    3982:	89 8d       	ldd	r24, Y+25	; 0x19
    3984:	8d 8f       	std	Y+29, r24	; 0x1d
    3986:	85 e0       	ldi	r24, 0x05	; 5
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	8e 8f       	std	Y+30, r24	; 0x1e
    398c:	9f 8f       	std	Y+31, r25	; 0x1f
    398e:	84 e1       	ldi	r24, 0x14	; 20
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	88 a3       	std	Y+32, r24	; 0x20
    3994:	99 a3       	std	Y+33, r25	; 0x21
    3996:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3998:	28 2f       	mov	r18, r24
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	88 a1       	ldd	r24, Y+32	; 0x20
    399e:	99 a1       	ldd	r25, Y+33	; 0x21
    39a0:	82 17       	cp	r24, r18
    39a2:	93 07       	cpc	r25, r19
    39a4:	54 f0       	brlt	.+20     	; 0x39ba <_Z17handleLinkBusMsgsv+0x8d8>
    39a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39a8:	88 2f       	mov	r24, r24
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	2e 8d       	ldd	r18, Y+30	; 0x1e
    39ae:	3f 8d       	ldd	r19, Y+31	; 0x1f
    39b0:	82 17       	cp	r24, r18
    39b2:	93 07       	cpc	r25, r19
    39b4:	24 f4       	brge	.+8      	; 0x39be <_Z17handleLinkBusMsgsv+0x8dc>
    39b6:	c9 01       	movw	r24, r18
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <_Z17handleLinkBusMsgsv+0x8dc>
    39ba:	88 a1       	ldd	r24, Y+32	; 0x20
    39bc:	99 a1       	ldd	r25, Y+33	; 0x21
    39be:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    39c2:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39c6:	8f 5f       	subi	r24, 0xFF	; 255
    39c8:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39cc:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    39d0:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    39d4:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    39d8:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    39dc:	0e c2       	rjmp	.+1052   	; 0x3dfa <_Z17handleLinkBusMsgsv+0xd18>
    39de:	1a a2       	std	Y+34, r1	; 0x22
    39e0:	1b a2       	std	Y+35, r1	; 0x23
    39e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    39e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    39e6:	fc 01       	movw	r30, r24
    39e8:	83 81       	ldd	r24, Z+3	; 0x03
    39ea:	80 33       	cpi	r24, 0x30	; 48
    39ec:	e1 f4       	brne	.+56     	; 0x3a26 <_Z17handleLinkBusMsgsv+0x944>
    39ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    39f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    39f2:	fc 01       	movw	r30, r24
    39f4:	80 8d       	ldd	r24, Z+24	; 0x18
    39f6:	88 23       	and	r24, r24
    39f8:	09 f4       	brne	.+2      	; 0x39fc <_Z17handleLinkBusMsgsv+0x91a>
    39fa:	01 c2       	rjmp	.+1026   	; 0x3dfe <_Z17handleLinkBusMsgsv+0xd1c>
    39fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    39fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a00:	48 96       	adiw	r24, 0x18	; 24
    3a02:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	8a a3       	std	Y+34, r24	; 0x22
    3a0c:	9b a3       	std	Y+35, r25	; 0x23
    3a0e:	8a a1       	ldd	r24, Y+34	; 0x22
    3a10:	9b a1       	ldd	r25, Y+35	; 0x23
    3a12:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    3a16:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    3a1a:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a1e:	8f 5f       	subi	r24, 0xFF	; 255
    3a20:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a24:	ec c1       	rjmp	.+984    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xd1c>
    3a26:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a28:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	83 81       	ldd	r24, Z+3	; 0x03
    3a2e:	81 33       	cpi	r24, 0x31	; 49
    3a30:	e1 f4       	brne	.+56     	; 0x3a6a <_Z17handleLinkBusMsgsv+0x988>
    3a32:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a34:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a36:	fc 01       	movw	r30, r24
    3a38:	80 8d       	ldd	r24, Z+24	; 0x18
    3a3a:	88 23       	and	r24, r24
    3a3c:	09 f4       	brne	.+2      	; 0x3a40 <_Z17handleLinkBusMsgsv+0x95e>
    3a3e:	df c1       	rjmp	.+958    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xd1c>
    3a40:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a42:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a44:	48 96       	adiw	r24, 0x18	; 24
    3a46:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	8a a3       	std	Y+34, r24	; 0x22
    3a50:	9b a3       	std	Y+35, r25	; 0x23
    3a52:	8a a1       	ldd	r24, Y+34	; 0x22
    3a54:	9b a1       	ldd	r25, Y+35	; 0x23
    3a56:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3a5a:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3a5e:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a62:	8f 5f       	subi	r24, 0xFF	; 255
    3a64:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a68:	ca c1       	rjmp	.+916    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xd1c>
    3a6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a6c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a6e:	fc 01       	movw	r30, r24
    3a70:	83 81       	ldd	r24, Z+3	; 0x03
    3a72:	89 34       	cpi	r24, 0x49	; 73
    3a74:	e1 f4       	brne	.+56     	; 0x3aae <_Z17handleLinkBusMsgsv+0x9cc>
    3a76:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a78:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	80 8d       	ldd	r24, Z+24	; 0x18
    3a7e:	88 23       	and	r24, r24
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <_Z17handleLinkBusMsgsv+0x9a2>
    3a82:	bd c1       	rjmp	.+890    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xd1c>
    3a84:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a86:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a88:	48 96       	adiw	r24, 0x18	; 24
    3a8a:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	8a a3       	std	Y+34, r24	; 0x22
    3a94:	9b a3       	std	Y+35, r25	; 0x23
    3a96:	8a a1       	ldd	r24, Y+34	; 0x22
    3a98:	9b a1       	ldd	r25, Y+35	; 0x23
    3a9a:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <g_ID_period_seconds>
    3a9e:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <g_ID_period_seconds+0x1>
    3aa2:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3aa6:	8f 5f       	subi	r24, 0xFF	; 255
    3aa8:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3aac:	a8 c1       	rjmp	.+848    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xd1c>
    3aae:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ab0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	83 81       	ldd	r24, Z+3	; 0x03
    3ab6:	84 34       	cpi	r24, 0x44	; 68
    3ab8:	09 f0       	breq	.+2      	; 0x3abc <_Z17handleLinkBusMsgsv+0x9da>
    3aba:	a1 c1       	rjmp	.+834    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xd1c>
    3abc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3abe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	80 8d       	ldd	r24, Z+24	; 0x18
    3ac4:	88 23       	and	r24, r24
    3ac6:	09 f4       	brne	.+2      	; 0x3aca <_Z17handleLinkBusMsgsv+0x9e8>
    3ac8:	9a c1       	rjmp	.+820    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xd1c>
    3aca:	8c 85       	ldd	r24, Y+12	; 0x0c
    3acc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ace:	48 96       	adiw	r24, 0x18	; 24
    3ad0:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	8a a3       	std	Y+34, r24	; 0x22
    3ada:	9b a3       	std	Y+35, r25	; 0x23
    3adc:	8a a1       	ldd	r24, Y+34	; 0x22
    3ade:	9b a1       	ldd	r25, Y+35	; 0x23
    3ae0:	80 93 02 46 	sts	0x4602, r24	; 0x804602 <g_intra_cycle_delay_time>
    3ae4:	90 93 03 46 	sts	0x4603, r25	; 0x804603 <g_intra_cycle_delay_time+0x1>
    3ae8:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3aec:	8f 5f       	subi	r24, 0xFF	; 255
    3aee:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3af2:	85 c1       	rjmp	.+778    	; 0x3dfe <_Z17handleLinkBusMsgsv+0xd1c>
    3af4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3af6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3af8:	fc 01       	movw	r30, r24
    3afa:	83 81       	ldd	r24, Z+3	; 0x03
    3afc:	88 23       	and	r24, r24
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <_Z17handleLinkBusMsgsv+0xa20>
    3b00:	80 c1       	rjmp	.+768    	; 0x3e02 <_Z17handleLinkBusMsgsv+0xd20>
    3b02:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b04:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b06:	03 96       	adiw	r24, 0x03	; 3
    3b08:	44 e1       	ldi	r20, 0x14	; 20
    3b0a:	50 e0       	ldi	r21, 0x00	; 0
    3b0c:	bc 01       	movw	r22, r24
    3b0e:	86 ed       	ldi	r24, 0xD6	; 214
    3b10:	95 e4       	ldi	r25, 0x45	; 69
    3b12:	0e 94 42 4a 	call	0x9484	; 0x9484 <strncpy>
    3b16:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b1a:	8f 5f       	subi	r24, 0xFF	; 255
    3b1c:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b20:	70 c1       	rjmp	.+736    	; 0x3e02 <_Z17handleLinkBusMsgsv+0xd20>
    3b22:	1e 82       	std	Y+6, r1	; 0x06
    3b24:	1f 82       	std	Y+7, r1	; 0x07
    3b26:	18 86       	std	Y+8, r1	; 0x08
    3b28:	19 86       	std	Y+9, r1	; 0x09
    3b2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b2e:	fc 01       	movw	r30, r24
    3b30:	83 81       	ldd	r24, Z+3	; 0x03
    3b32:	88 23       	and	r24, r24
    3b34:	a9 f1       	breq	.+106    	; 0x3ba0 <_Z17handleLinkBusMsgsv+0xabe>
    3b36:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b38:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b3a:	03 96       	adiw	r24, 0x03	; 3
    3b3c:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <atol>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	80 93 47 46 	sts	0x4647, r24	; 0x804647 <_ZZ17handleLinkBusMsgsvE1f>
    3b48:	90 93 48 46 	sts	0x4648, r25	; 0x804648 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3b4c:	a0 93 49 46 	sts	0x4649, r26	; 0x804649 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3b50:	b0 93 4a 46 	sts	0x464A, r27	; 0x80464a <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3b54:	80 91 47 46 	lds	r24, 0x4647	; 0x804647 <_ZZ17handleLinkBusMsgsvE1f>
    3b58:	90 91 48 46 	lds	r25, 0x4648	; 0x804648 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3b5c:	a0 91 49 46 	lds	r26, 0x4649	; 0x804649 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3b60:	b0 91 4a 46 	lds	r27, 0x464A	; 0x80464a <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3b64:	8e a7       	std	Y+46, r24	; 0x2e
    3b66:	9f a7       	std	Y+47, r25	; 0x2f
    3b68:	a8 ab       	std	Y+48, r26	; 0x30
    3b6a:	b9 ab       	std	Y+49, r27	; 0x31
    3b6c:	ce 01       	movw	r24, r28
    3b6e:	8e 96       	adiw	r24, 0x2e	; 46
    3b70:	61 e0       	ldi	r22, 0x01	; 1
    3b72:	0e 94 35 43 	call	0x866a	; 0x866a <_Z14txSetFrequencyPmh>
    3b76:	98 2f       	mov	r25, r24
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	99 23       	and	r25, r25
    3b7c:	09 f0       	breq	.+2      	; 0x3b80 <_Z17handleLinkBusMsgsv+0xa9e>
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	88 23       	and	r24, r24
    3b82:	b1 f0       	breq	.+44     	; 0x3bb0 <_Z17handleLinkBusMsgsv+0xace>
    3b84:	8e a5       	ldd	r24, Y+46	; 0x2e
    3b86:	9f a5       	ldd	r25, Y+47	; 0x2f
    3b88:	a8 a9       	ldd	r26, Y+48	; 0x30
    3b8a:	b9 a9       	ldd	r27, Y+49	; 0x31
    3b8c:	8e 83       	std	Y+6, r24	; 0x06
    3b8e:	9f 83       	std	Y+7, r25	; 0x07
    3b90:	a8 87       	std	Y+8, r26	; 0x08
    3b92:	b9 87       	std	Y+9, r27	; 0x09
    3b94:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b98:	8f 5f       	subi	r24, 0xFF	; 255
    3b9a:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b9e:	08 c0       	rjmp	.+16     	; 0x3bb0 <_Z17handleLinkBusMsgsv+0xace>
    3ba0:	0e 94 67 43 	call	0x86ce	; 0x86ce <_Z14txGetFrequencyv>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	8e 83       	std	Y+6, r24	; 0x06
    3baa:	9f 83       	std	Y+7, r25	; 0x07
    3bac:	a8 87       	std	Y+8, r26	; 0x08
    3bae:	b9 87       	std	Y+9, r27	; 0x09
    3bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    3bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    3bb4:	a8 85       	ldd	r26, Y+8	; 0x08
    3bb6:	b9 85       	ldd	r27, Y+9	; 0x09
    3bb8:	89 2b       	or	r24, r25
    3bba:	8a 2b       	or	r24, r26
    3bbc:	8b 2b       	or	r24, r27
    3bbe:	09 f4       	brne	.+2      	; 0x3bc2 <_Z17handleLinkBusMsgsv+0xae0>
    3bc0:	22 c1       	rjmp	.+580    	; 0x3e06 <_Z17handleLinkBusMsgsv+0xd24>
    3bc2:	89 85       	ldd	r24, Y+9	; 0x09
    3bc4:	8f 93       	push	r24
    3bc6:	88 85       	ldd	r24, Y+8	; 0x08
    3bc8:	8f 93       	push	r24
    3bca:	8f 81       	ldd	r24, Y+7	; 0x07
    3bcc:	8f 93       	push	r24
    3bce:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd0:	8f 93       	push	r24
    3bd2:	8f ef       	ldi	r24, 0xFF	; 255
    3bd4:	92 e4       	ldi	r25, 0x42	; 66
    3bd6:	89 2f       	mov	r24, r25
    3bd8:	8f 93       	push	r24
    3bda:	8f ef       	ldi	r24, 0xFF	; 255
    3bdc:	92 e4       	ldi	r25, 0x42	; 66
    3bde:	8f 93       	push	r24
    3be0:	85 e9       	ldi	r24, 0x95	; 149
    3be2:	95 e4       	ldi	r25, 0x45	; 69
    3be4:	89 2f       	mov	r24, r25
    3be6:	8f 93       	push	r24
    3be8:	85 e9       	ldi	r24, 0x95	; 149
    3bea:	95 e4       	ldi	r25, 0x45	; 69
    3bec:	8f 93       	push	r24
    3bee:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    3bf2:	2d b7       	in	r18, 0x3d	; 61
    3bf4:	3e b7       	in	r19, 0x3e	; 62
    3bf6:	28 5f       	subi	r18, 0xF8	; 248
    3bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfa:	cd bf       	out	0x3d, r28	; 61
    3bfc:	de bf       	out	0x3e, r29	; 62
    3bfe:	45 e9       	ldi	r20, 0x95	; 149
    3c00:	55 e4       	ldi	r21, 0x45	; 69
    3c02:	64 e0       	ldi	r22, 0x04	; 4
    3c04:	73 e4       	ldi	r23, 0x43	; 67
    3c06:	83 e0       	ldi	r24, 0x03	; 3
    3c08:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <_Z11lb_send_msg13LBMessageTypePKcPc>
    3c0c:	fc c0       	rjmp	.+504    	; 0x3e06 <_Z17handleLinkBusMsgsv+0xd24>
    3c0e:	80 91 16 46 	lds	r24, 0x4616	; 0x804616 <_ZL22g_lastConversionResult>
    3c12:	90 91 17 46 	lds	r25, 0x4617	; 0x804617 <_ZL22g_lastConversionResult+0x1>
    3c16:	21 e0       	ldi	r18, 0x01	; 1
    3c18:	8d 38       	cpi	r24, 0x8D	; 141
    3c1a:	92 40       	sbci	r25, 0x02	; 2
    3c1c:	08 f4       	brcc	.+2      	; 0x3c20 <_Z17handleLinkBusMsgsv+0xb3e>
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	22 23       	and	r18, r18
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <_Z17handleLinkBusMsgsv+0xb44>
    3c24:	7c c0       	rjmp	.+248    	; 0x3d1e <_Z17handleLinkBusMsgsv+0xc3c>
    3c26:	80 91 16 46 	lds	r24, 0x4616	; 0x804616 <_ZL22g_lastConversionResult>
    3c2a:	90 91 17 46 	lds	r25, 0x4617	; 0x804617 <_ZL22g_lastConversionResult+0x1>
    3c2e:	cc 01       	movw	r24, r24
    3c30:	a0 e0       	ldi	r26, 0x00	; 0
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	9c 01       	movw	r18, r24
    3c36:	ad 01       	movw	r20, r26
    3c38:	60 ea       	ldi	r22, 0xA0	; 160
    3c3a:	78 e6       	ldi	r23, 0x68	; 104
    3c3c:	86 e0       	ldi	r24, 0x06	; 6
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	7c 01       	movw	r14, r24
    3c4a:	8d 01       	movw	r16, r26
    3c4c:	ed e7       	ldi	r30, 0x7D	; 125
    3c4e:	fe 1a       	sub	r15, r30
    3c50:	0c 40       	sbci	r16, 0x0C	; 12
    3c52:	1e 4f       	sbci	r17, 0xFE	; 254
    3c54:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3c58:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3c5c:	cc 01       	movw	r24, r24
    3c5e:	a0 e0       	ldi	r26, 0x00	; 0
    3c60:	b0 e0       	ldi	r27, 0x00	; 0
    3c62:	9c 01       	movw	r18, r24
    3c64:	ad 01       	movw	r20, r26
    3c66:	64 e6       	ldi	r22, 0x64	; 100
    3c68:	70 e7       	ldi	r23, 0x70	; 112
    3c6a:	8e ef       	ldi	r24, 0xFE	; 254
    3c6c:	9f ef       	ldi	r25, 0xFF	; 255
    3c6e:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	e8 0e       	add	r14, r24
    3c78:	f9 1e       	adc	r15, r25
    3c7a:	0a 1f       	adc	r16, r26
    3c7c:	1b 1f       	adc	r17, r27
    3c7e:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3c82:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3c86:	cc 01       	movw	r24, r24
    3c88:	a0 e0       	ldi	r26, 0x00	; 0
    3c8a:	b0 e0       	ldi	r27, 0x00	; 0
    3c8c:	28 e6       	ldi	r18, 0x68	; 104
    3c8e:	30 e1       	ldi	r19, 0x10	; 16
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	28 1b       	sub	r18, r24
    3c96:	39 0b       	sbc	r19, r25
    3c98:	4a 0b       	sbc	r20, r26
    3c9a:	5b 0b       	sbc	r21, r27
    3c9c:	8f ef       	ldi	r24, 0xFF	; 255
    3c9e:	93 e0       	ldi	r25, 0x03	; 3
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	0e 94 a6 48 	call	0x914c	; 0x914c <__muluhisi3>
    3ca6:	9b 01       	movw	r18, r22
    3ca8:	ac 01       	movw	r20, r24
    3caa:	c8 01       	movw	r24, r16
    3cac:	b7 01       	movw	r22, r14
    3cae:	0e 94 68 48 	call	0x90d0	; 0x90d0 <__divmodsi4>
    3cb2:	da 01       	movw	r26, r20
    3cb4:	c9 01       	movw	r24, r18
    3cb6:	8c a3       	std	Y+36, r24	; 0x24
    3cb8:	9d a3       	std	Y+37, r25	; 0x25
    3cba:	ae a3       	std	Y+38, r26	; 0x26
    3cbc:	bf a3       	std	Y+39, r27	; 0x27
    3cbe:	18 a6       	std	Y+40, r1	; 0x28
    3cc0:	19 a6       	std	Y+41, r1	; 0x29
    3cc2:	84 e6       	ldi	r24, 0x64	; 100
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	8a a7       	std	Y+42, r24	; 0x2a
    3cc8:	9b a7       	std	Y+43, r25	; 0x2b
    3cca:	8a a5       	ldd	r24, Y+42	; 0x2a
    3ccc:	9b a5       	ldd	r25, Y+43	; 0x2b
    3cce:	9c 01       	movw	r18, r24
    3cd0:	99 0f       	add	r25, r25
    3cd2:	44 0b       	sbc	r20, r20
    3cd4:	55 0b       	sbc	r21, r21
    3cd6:	8c a1       	ldd	r24, Y+36	; 0x24
    3cd8:	9d a1       	ldd	r25, Y+37	; 0x25
    3cda:	ae a1       	ldd	r26, Y+38	; 0x26
    3cdc:	bf a1       	ldd	r27, Y+39	; 0x27
    3cde:	28 17       	cp	r18, r24
    3ce0:	39 07       	cpc	r19, r25
    3ce2:	4a 07       	cpc	r20, r26
    3ce4:	5b 07       	cpc	r21, r27
    3ce6:	3c f4       	brge	.+14     	; 0x3cf6 <_Z17handleLinkBusMsgsv+0xc14>
    3ce8:	8a a5       	ldd	r24, Y+42	; 0x2a
    3cea:	9b a5       	ldd	r25, Y+43	; 0x2b
    3cec:	09 2e       	mov	r0, r25
    3cee:	00 0c       	add	r0, r0
    3cf0:	aa 0b       	sbc	r26, r26
    3cf2:	bb 0b       	sbc	r27, r27
    3cf4:	11 c0       	rjmp	.+34     	; 0x3d18 <_Z17handleLinkBusMsgsv+0xc36>
    3cf6:	88 a5       	ldd	r24, Y+40	; 0x28
    3cf8:	99 a5       	ldd	r25, Y+41	; 0x29
    3cfa:	09 2e       	mov	r0, r25
    3cfc:	00 0c       	add	r0, r0
    3cfe:	aa 0b       	sbc	r26, r26
    3d00:	bb 0b       	sbc	r27, r27
    3d02:	2c a1       	ldd	r18, Y+36	; 0x24
    3d04:	3d a1       	ldd	r19, Y+37	; 0x25
    3d06:	4e a1       	ldd	r20, Y+38	; 0x26
    3d08:	5f a1       	ldd	r21, Y+39	; 0x27
    3d0a:	82 17       	cp	r24, r18
    3d0c:	93 07       	cpc	r25, r19
    3d0e:	a4 07       	cpc	r26, r20
    3d10:	b5 07       	cpc	r27, r21
    3d12:	14 f4       	brge	.+4      	; 0x3d18 <_Z17handleLinkBusMsgsv+0xc36>
    3d14:	da 01       	movw	r26, r20
    3d16:	c9 01       	movw	r24, r18
    3d18:	8a 87       	std	Y+10, r24	; 0x0a
    3d1a:	9b 87       	std	Y+11, r25	; 0x0b
    3d1c:	2f c0       	rjmp	.+94     	; 0x3d7c <_Z17handleLinkBusMsgsv+0xc9a>
    3d1e:	80 91 1a 46 	lds	r24, 0x461A	; 0x80461a <_ZL22g_lastConversionResult+0x4>
    3d22:	90 91 1b 46 	lds	r25, 0x461B	; 0x80461b <_ZL22g_lastConversionResult+0x5>
    3d26:	9c 01       	movw	r18, r24
    3d28:	40 e0       	ldi	r20, 0x00	; 0
    3d2a:	50 e0       	ldi	r21, 0x00	; 0
    3d2c:	da 01       	movw	r26, r20
    3d2e:	c9 01       	movw	r24, r18
    3d30:	88 0f       	add	r24, r24
    3d32:	99 1f       	adc	r25, r25
    3d34:	aa 1f       	adc	r26, r26
    3d36:	bb 1f       	adc	r27, r27
    3d38:	88 0f       	add	r24, r24
    3d3a:	99 1f       	adc	r25, r25
    3d3c:	aa 1f       	adc	r26, r26
    3d3e:	bb 1f       	adc	r27, r27
    3d40:	88 0f       	add	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	aa 1f       	adc	r26, r26
    3d46:	bb 1f       	adc	r27, r27
    3d48:	82 1b       	sub	r24, r18
    3d4a:	93 0b       	sbc	r25, r19
    3d4c:	a4 0b       	sbc	r26, r20
    3d4e:	b5 0b       	sbc	r27, r21
    3d50:	88 0f       	add	r24, r24
    3d52:	99 1f       	adc	r25, r25
    3d54:	aa 1f       	adc	r26, r26
    3d56:	bb 1f       	adc	r27, r27
    3d58:	8a 5c       	subi	r24, 0xCA	; 202
    3d5a:	9e 4f       	sbci	r25, 0xFE	; 254
    3d5c:	af 4f       	sbci	r26, 0xFF	; 255
    3d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d60:	24 e6       	ldi	r18, 0x64	; 100
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	50 e0       	ldi	r21, 0x00	; 0
    3d68:	bc 01       	movw	r22, r24
    3d6a:	cd 01       	movw	r24, r26
    3d6c:	0e 94 68 48 	call	0x90d0	; 0x90d0 <__divmodsi4>
    3d70:	da 01       	movw	r26, r20
    3d72:	c9 01       	movw	r24, r18
    3d74:	80 5f       	subi	r24, 0xF0	; 240
    3d76:	98 4d       	sbci	r25, 0xD8	; 216
    3d78:	8a 87       	std	Y+10, r24	; 0x0a
    3d7a:	9b 87       	std	Y+11, r25	; 0x0b
    3d7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d80:	68 e0       	ldi	r22, 0x08	; 8
    3d82:	73 e4       	ldi	r23, 0x43	; 67
    3d84:	0e 94 b7 36 	call	0x6d6e	; 0x6d6e <_Z16lb_broadcast_numjPKc>
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	bc 01       	movw	r22, r24
    3d96:	cd 01       	movw	r24, r26
    3d98:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    3d9c:	37 c0       	rjmp	.+110    	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3d9e:	ce 01       	movw	r24, r28
    3da0:	c2 96       	adiw	r24, 0x32	; 50
    3da2:	0e 94 ef 2c 	call	0x59de	; 0x59de <ds3231_get_temp>
    3da6:	98 2f       	mov	r25, r24
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	99 23       	and	r25, r25
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <_Z17handleLinkBusMsgsv+0xcce>
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	88 23       	and	r24, r24
    3db2:	59 f1       	breq	.+86     	; 0x3e0a <_Z17handleLinkBusMsgsv+0xd28>
    3db4:	8a a9       	ldd	r24, Y+50	; 0x32
    3db6:	9b a9       	ldd	r25, Y+51	; 0x33
    3db8:	6d e0       	ldi	r22, 0x0D	; 13
    3dba:	73 e4       	ldi	r23, 0x43	; 67
    3dbc:	0e 94 b7 36 	call	0x6d6e	; 0x6d6e <_Z16lb_broadcast_numjPKc>
    3dc0:	24 c0       	rjmp	.+72     	; 0x3e0a <_Z17handleLinkBusMsgsv+0xd28>
    3dc2:	44 e6       	ldi	r20, 0x64	; 100
    3dc4:	50 e4       	ldi	r21, 0x40	; 64
    3dc6:	62 e1       	ldi	r22, 0x12	; 18
    3dc8:	73 e4       	ldi	r23, 0x43	; 67
    3dca:	83 e0       	ldi	r24, 0x03	; 3
    3dcc:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <_Z11lb_send_msg13LBMessageTypePKcPc>
    3dd0:	1d c0       	rjmp	.+58     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3dd2:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <_Z16linkbus_reset_rxv>
    3dd6:	8e ec       	ldi	r24, 0xCE	; 206
    3dd8:	80 93 c7 45 	sts	0x45C7, r24	; 0x8045c7 <_ZL17g_last_error_code>
    3ddc:	17 c0       	rjmp	.+46     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3dde:	00 00       	nop
    3de0:	15 c0       	rjmp	.+42     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3de2:	00 00       	nop
    3de4:	13 c0       	rjmp	.+38     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3de6:	00 00       	nop
    3de8:	11 c0       	rjmp	.+34     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3dea:	00 00       	nop
    3dec:	0f c0       	rjmp	.+30     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3dee:	00 00       	nop
    3df0:	0d c0       	rjmp	.+26     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3df2:	00 00       	nop
    3df4:	0b c0       	rjmp	.+22     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3df6:	00 00       	nop
    3df8:	09 c0       	rjmp	.+18     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3dfa:	00 00       	nop
    3dfc:	07 c0       	rjmp	.+14     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3dfe:	00 00       	nop
    3e00:	05 c0       	rjmp	.+10     	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3e02:	00 00       	nop
    3e04:	03 c0       	rjmp	.+6      	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3e06:	00 00       	nop
    3e08:	01 c0       	rjmp	.+2      	; 0x3e0c <_Z17handleLinkBusMsgsv+0xd2a>
    3e0a:	00 00       	nop
    3e0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e10:	fc 01       	movw	r30, r24
    3e12:	11 82       	std	Z+1, r1	; 0x01
    3e14:	12 82       	std	Z+2, r1	; 0x02
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
    3e18:	88 23       	and	r24, r24
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <_Z17handleLinkBusMsgsv+0xd3c>
    3e1c:	6f c9       	rjmp	.-3362   	; 0x30fc <_Z17handleLinkBusMsgsv+0x1a>
    3e1e:	86 e1       	ldi	r24, 0x16	; 22
    3e20:	93 e4       	ldi	r25, 0x43	; 67
    3e22:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_Z12lb_send_textPc>
    3e26:	6a c9       	rjmp	.-3372   	; 0x30fc <_Z17handleLinkBusMsgsv+0x1a>
    3e28:	00 00       	nop
    3e2a:	e3 96       	adiw	r28, 0x33	; 51
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	df 91       	pop	r29
    3e32:	cf 91       	pop	r28
    3e34:	1f 91       	pop	r17
    3e36:	0f 91       	pop	r16
    3e38:	ff 90       	pop	r15
    3e3a:	ef 90       	pop	r14
    3e3c:	08 95       	ret

00003e3e <_Z12eventEnabledv>:
    3e3e:	ef 92       	push	r14
    3e40:	ff 92       	push	r15
    3e42:	0f 93       	push	r16
    3e44:	1f 93       	push	r17
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
    3e4e:	29 97       	sbiw	r28, 0x09	; 9
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	20 91 04 46 	lds	r18, 0x4604	; 0x804604 <g_event_start_time>
    3e58:	30 91 05 46 	lds	r19, 0x4605	; 0x804605 <g_event_start_time+0x1>
    3e5c:	40 91 06 46 	lds	r20, 0x4606	; 0x804606 <g_event_start_time+0x2>
    3e60:	50 91 07 46 	lds	r21, 0x4607	; 0x804607 <g_event_start_time+0x3>
    3e64:	80 91 08 46 	lds	r24, 0x4608	; 0x804608 <g_event_finish_time>
    3e68:	90 91 09 46 	lds	r25, 0x4609	; 0x804609 <g_event_finish_time+0x1>
    3e6c:	a0 91 0a 46 	lds	r26, 0x460A	; 0x80460a <g_event_finish_time+0x2>
    3e70:	b0 91 0b 46 	lds	r27, 0x460B	; 0x80460b <g_event_finish_time+0x3>
    3e74:	bc 01       	movw	r22, r24
    3e76:	cd 01       	movw	r24, r26
    3e78:	0e 94 b2 45 	call	0x8b64	; 0x8b64 <_Z7timeDifmm>
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	cb 01       	movw	r24, r22
    3e80:	89 83       	std	Y+1, r24	; 0x01
    3e82:	9a 83       	std	Y+2, r25	; 0x02
    3e84:	ab 83       	std	Y+3, r26	; 0x03
    3e86:	bc 83       	std	Y+4, r27	; 0x04
    3e88:	21 e0       	ldi	r18, 0x01	; 1
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e8e:	ab 81       	ldd	r26, Y+3	; 0x03
    3e90:	bc 81       	ldd	r27, Y+4	; 0x04
    3e92:	18 16       	cp	r1, r24
    3e94:	19 06       	cpc	r1, r25
    3e96:	1a 06       	cpc	r1, r26
    3e98:	1b 06       	cpc	r1, r27
    3e9a:	0c f0       	brlt	.+2      	; 0x3e9e <_Z12eventEnabledv+0x60>
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	2d 83       	std	Y+5, r18	; 0x05
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	06 96       	adiw	r24, 0x06	; 6
    3ea4:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    3ea8:	20 91 08 46 	lds	r18, 0x4608	; 0x804608 <g_event_finish_time>
    3eac:	30 91 09 46 	lds	r19, 0x4609	; 0x804609 <g_event_finish_time+0x1>
    3eb0:	40 91 0a 46 	lds	r20, 0x460A	; 0x80460a <g_event_finish_time+0x2>
    3eb4:	50 91 0b 46 	lds	r21, 0x460B	; 0x80460b <g_event_finish_time+0x3>
    3eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    3eba:	9f 81       	ldd	r25, Y+7	; 0x07
    3ebc:	a8 85       	ldd	r26, Y+8	; 0x08
    3ebe:	b9 85       	ldd	r27, Y+9	; 0x09
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 b2 45 	call	0x8b64	; 0x8b64 <_Z7timeDifmm>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	89 83       	std	Y+1, r24	; 0x01
    3ece:	9a 83       	std	Y+2, r25	; 0x02
    3ed0:	ab 83       	std	Y+3, r26	; 0x03
    3ed2:	bc 83       	std	Y+4, r27	; 0x04
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed8:	ab 81       	ldd	r26, Y+3	; 0x03
    3eda:	bc 81       	ldd	r27, Y+4	; 0x04
    3edc:	bb 23       	and	r27, r27
    3ede:	2c f0       	brlt	.+10     	; 0x3eea <_Z12eventEnabledv+0xac>
    3ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee2:	88 23       	and	r24, r24
    3ee4:	11 f0       	breq	.+4      	; 0x3eea <_Z12eventEnabledv+0xac>
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	4a c0       	rjmp	.+148    	; 0x3f7e <_Z12eventEnabledv+0x140>
    3eea:	20 91 04 46 	lds	r18, 0x4604	; 0x804604 <g_event_start_time>
    3eee:	30 91 05 46 	lds	r19, 0x4605	; 0x804605 <g_event_start_time+0x1>
    3ef2:	40 91 06 46 	lds	r20, 0x4606	; 0x804606 <g_event_start_time+0x2>
    3ef6:	50 91 07 46 	lds	r21, 0x4607	; 0x804607 <g_event_start_time+0x3>
    3efa:	8e 81       	ldd	r24, Y+6	; 0x06
    3efc:	9f 81       	ldd	r25, Y+7	; 0x07
    3efe:	a8 85       	ldd	r26, Y+8	; 0x08
    3f00:	b9 85       	ldd	r27, Y+9	; 0x09
    3f02:	bc 01       	movw	r22, r24
    3f04:	cd 01       	movw	r24, r26
    3f06:	0e 94 b2 45 	call	0x8b64	; 0x8b64 <_Z7timeDifmm>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	89 83       	std	Y+1, r24	; 0x01
    3f10:	9a 83       	std	Y+2, r25	; 0x02
    3f12:	ab 83       	std	Y+3, r26	; 0x03
    3f14:	bc 83       	std	Y+4, r27	; 0x04
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1a:	ab 81       	ldd	r26, Y+3	; 0x03
    3f1c:	bc 81       	ldd	r27, Y+4	; 0x04
    3f1e:	84 3c       	cpi	r24, 0xC4	; 196
    3f20:	9f 4f       	sbci	r25, 0xFF	; 255
    3f22:	af 4f       	sbci	r26, 0xFF	; 255
    3f24:	bf 4f       	sbci	r27, 0xFF	; 255
    3f26:	64 f0       	brlt	.+24     	; 0x3f40 <_Z12eventEnabledv+0x102>
    3f28:	10 92 d5 45 	sts	0x45D5, r1	; 0x8045d5 <_ZL11g_sleepType>
    3f2c:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep>
    3f30:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    3f34:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    3f38:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    3f3c:	81 e0       	ldi	r24, 0x01	; 1
    3f3e:	1f c0       	rjmp	.+62     	; 0x3f7e <_Z12eventEnabledv+0x140>
    3f40:	24 ec       	ldi	r18, 0xC4	; 196
    3f42:	3f ef       	ldi	r19, 0xFF	; 255
    3f44:	4f ef       	ldi	r20, 0xFF	; 255
    3f46:	5f ef       	ldi	r21, 0xFF	; 255
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4c:	ab 81       	ldd	r26, Y+3	; 0x03
    3f4e:	bc 81       	ldd	r27, Y+4	; 0x04
    3f50:	79 01       	movw	r14, r18
    3f52:	8a 01       	movw	r16, r20
    3f54:	e8 1a       	sub	r14, r24
    3f56:	f9 0a       	sbc	r15, r25
    3f58:	0a 0b       	sbc	r16, r26
    3f5a:	1b 0b       	sbc	r17, r27
    3f5c:	d8 01       	movw	r26, r16
    3f5e:	c7 01       	movw	r24, r14
    3f60:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    3f64:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    3f68:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    3f6c:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	80 93 d5 45 	sts	0x45D5, r24	; 0x8045d5 <_ZL11g_sleepType>
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	80 93 10 46 	sts	0x4610, r24	; 0x804610 <_ZL13g_go_to_sleep>
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	29 96       	adiw	r28, 0x09	; 9
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	de bf       	out	0x3e, r29	; 62
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	1f 91       	pop	r17
    3f8a:	0f 91       	pop	r16
    3f8c:	ff 90       	pop	r15
    3f8e:	ef 90       	pop	r14
    3f90:	08 95       	ret

00003f92 <_Z13throttleValueh>:
    3f92:	85 31       	cpi	r24, 0x15	; 21
    3f94:	4c f4       	brge	.+18     	; 0x3fa8 <_Z13throttleValueh+0x16>
    3f96:	28 2f       	mov	r18, r24
    3f98:	88 0f       	add	r24, r24
    3f9a:	33 0b       	sbc	r19, r19
    3f9c:	25 30       	cpi	r18, 0x05	; 5
    3f9e:	31 05       	cpc	r19, r1
    3fa0:	2c f4       	brge	.+10     	; 0x3fac <_Z13throttleValueh+0x1a>
    3fa2:	25 e0       	ldi	r18, 0x05	; 5
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	02 c0       	rjmp	.+4      	; 0x3fac <_Z13throttleValueh+0x1a>
    3fa8:	24 e1       	ldi	r18, 0x14	; 20
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	40 e0       	ldi	r20, 0x00	; 0
    3fb0:	50 e0       	ldi	r21, 0x00	; 0
    3fb2:	62 ec       	ldi	r22, 0xC2	; 194
    3fb4:	71 e0       	ldi	r23, 0x01	; 1
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	0e 94 68 48 	call	0x90d0	; 0x90d0 <__divmodsi4>
    3fbe:	ca 01       	movw	r24, r20
    3fc0:	b9 01       	movw	r22, r18
    3fc2:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <__floatsisf>
    3fc6:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <__fixunssfsi>
    3fca:	cb 01       	movw	r24, r22
    3fcc:	08 95       	ret

00003fce <_Z11launchEventP2SC>:
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	00 d0       	rcall	.+0      	; 0x3fd4 <_Z11launchEventP2SC+0x6>
    3fd4:	1f 92       	push	r1
    3fd6:	cd b7       	in	r28, 0x3d	; 61
    3fd8:	de b7       	in	r29, 0x3e	; 62
    3fda:	8a 83       	std	Y+2, r24	; 0x02
    3fdc:	9b 83       	std	Y+3, r25	; 0x03
    3fde:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fe2:	0e 94 12 20 	call	0x4024	; 0x4024 <_Z33activateEventUsingCurrentSettingsP2SC>
    3fe6:	89 83       	std	Y+1, r24	; 0x01
    3fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fea:	9b 81       	ldd	r25, Y+3	; 0x03
    3fec:	fc 01       	movw	r30, r24
    3fee:	80 81       	ld	r24, Z
    3ff0:	88 23       	and	r24, r24
    3ff2:	31 f0       	breq	.+12     	; 0x4000 <__DATA_REGION_LENGTH__>
    3ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	80 81       	ld	r24, Z
    3ffc:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	88 23       	and	r24, r24
    4004:	21 f0       	breq	.+8      	; 0x400e <__DATA_REGION_LENGTH__+0xe>
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	80 93 c7 45 	sts	0x45C7, r24	; 0x8045c7 <_ZL17g_last_error_code>
    400c:	04 c0       	rjmp	.+8      	; 0x4016 <__DATA_REGION_LENGTH__+0x16>
    400e:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_Z12eventEnabledv>
    4012:	80 93 0c 46 	sts	0x460C, r24	; 0x80460c <g_event_enabled>
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	23 96       	adiw	r28, 0x03	; 3
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	08 95       	ret

00004024 <_Z33activateEventUsingCurrentSettingsP2SC>:
    4024:	cf 92       	push	r12
    4026:	df 92       	push	r13
    4028:	ef 92       	push	r14
    402a:	ff 92       	push	r15
    402c:	0f 93       	push	r16
    402e:	1f 93       	push	r17
    4030:	cf 93       	push	r28
    4032:	df 93       	push	r29
    4034:	1f 92       	push	r1
    4036:	cd b7       	in	r28, 0x3d	; 61
    4038:	de b7       	in	r29, 0x3e	; 62
    403a:	40 91 04 46 	lds	r20, 0x4604	; 0x804604 <g_event_start_time>
    403e:	50 91 05 46 	lds	r21, 0x4605	; 0x804605 <g_event_start_time+0x1>
    4042:	60 91 06 46 	lds	r22, 0x4606	; 0x804606 <g_event_start_time+0x2>
    4046:	70 91 07 46 	lds	r23, 0x4607	; 0x804607 <g_event_start_time+0x3>
    404a:	45 2b       	or	r20, r21
    404c:	46 2b       	or	r20, r22
    404e:	47 2b       	or	r20, r23
    4050:	09 f4       	brne	.+2      	; 0x4054 <_Z33activateEventUsingCurrentSettingsP2SC+0x30>
    4052:	91 c1       	rjmp	.+802    	; 0x4376 <_Z33activateEventUsingCurrentSettingsP2SC+0x352>
    4054:	00 91 04 46 	lds	r16, 0x4604	; 0x804604 <g_event_start_time>
    4058:	10 91 05 46 	lds	r17, 0x4605	; 0x804605 <g_event_start_time+0x1>
    405c:	20 91 06 46 	lds	r18, 0x4606	; 0x804606 <g_event_start_time+0x2>
    4060:	30 91 07 46 	lds	r19, 0x4607	; 0x804607 <g_event_start_time+0x3>
    4064:	40 91 08 46 	lds	r20, 0x4608	; 0x804608 <g_event_finish_time>
    4068:	50 91 09 46 	lds	r21, 0x4609	; 0x804609 <g_event_finish_time+0x1>
    406c:	60 91 0a 46 	lds	r22, 0x460A	; 0x80460a <g_event_finish_time+0x2>
    4070:	70 91 0b 46 	lds	r23, 0x460B	; 0x80460b <g_event_finish_time+0x3>
    4074:	04 17       	cp	r16, r20
    4076:	15 07       	cpc	r17, r21
    4078:	26 07       	cpc	r18, r22
    407a:	37 07       	cpc	r19, r23
    407c:	08 f0       	brcs	.+2      	; 0x4080 <_Z33activateEventUsingCurrentSettingsP2SC+0x5c>
    407e:	7d c1       	rjmp	.+762    	; 0x437a <_Z33activateEventUsingCurrentSettingsP2SC+0x356>
    4080:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4084:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4088:	23 2b       	or	r18, r19
    408a:	09 f4       	brne	.+2      	; 0x408e <_Z33activateEventUsingCurrentSettingsP2SC+0x6a>
    408c:	78 c1       	rjmp	.+752    	; 0x437e <_Z33activateEventUsingCurrentSettingsP2SC+0x35a>
    408e:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    4092:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    4096:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    409a:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    409e:	24 0f       	add	r18, r20
    40a0:	35 1f       	adc	r19, r21
    40a2:	40 91 02 46 	lds	r20, 0x4602	; 0x804602 <g_intra_cycle_delay_time>
    40a6:	50 91 03 46 	lds	r21, 0x4603	; 0x804603 <g_intra_cycle_delay_time+0x1>
    40aa:	24 17       	cp	r18, r20
    40ac:	35 07       	cpc	r19, r21
    40ae:	0c f4       	brge	.+2      	; 0x40b2 <_Z33activateEventUsingCurrentSettingsP2SC+0x8e>
    40b0:	68 c1       	rjmp	.+720    	; 0x4382 <_Z33activateEventUsingCurrentSettingsP2SC+0x35e>
    40b2:	20 91 d6 45 	lds	r18, 0x45D6	; 0x8045d6 <g_messages_text>
    40b6:	22 23       	and	r18, r18
    40b8:	09 f4       	brne	.+2      	; 0x40bc <_Z33activateEventUsingCurrentSettingsP2SC+0x98>
    40ba:	65 c1       	rjmp	.+714    	; 0x4386 <_Z33activateEventUsingCurrentSettingsP2SC+0x362>
    40bc:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    40c0:	22 23       	and	r18, r18
    40c2:	09 f4       	brne	.+2      	; 0x40c6 <_Z33activateEventUsingCurrentSettingsP2SC+0xa2>
    40c4:	62 c1       	rjmp	.+708    	; 0x438a <_Z33activateEventUsingCurrentSettingsP2SC+0x366>
    40c6:	8c 01       	movw	r16, r24
    40c8:	80 91 eb 45 	lds	r24, 0x45EB	; 0x8045eb <g_messages_text+0x15>
    40cc:	88 23       	and	r24, r24
    40ce:	19 f1       	breq	.+70     	; 0x4116 <_Z33activateEventUsingCurrentSettingsP2SC+0xf2>
    40d0:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    40d4:	88 23       	and	r24, r24
    40d6:	41 f0       	breq	.+16     	; 0x40e8 <_Z33activateEventUsingCurrentSettingsP2SC+0xc4>
    40d8:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    40dc:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    40e0:	89 2b       	or	r24, r25
    40e2:	21 f4       	brne	.+8      	; 0x40ec <_Z33activateEventUsingCurrentSettingsP2SC+0xc8>
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	03 c0       	rjmp	.+6      	; 0x40ee <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	01 c0       	rjmp	.+2      	; 0x40ee <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    40ec:	80 e0       	ldi	r24, 0x00	; 0
    40ee:	81 11       	cpse	r24, r1
    40f0:	4e c1       	rjmp	.+668    	; 0x438e <_Z33activateEventUsingCurrentSettingsP2SC+0x36a>
    40f2:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    40f6:	70 e0       	ldi	r23, 0x00	; 0
    40f8:	8b ee       	ldi	r24, 0xEB	; 235
    40fa:	95 e4       	ldi	r25, 0x45	; 69
    40fc:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <_Z26timeRequiredToSendStrAtWPMPcj>
    4100:	8c 50       	subi	r24, 0x0C	; 12
    4102:	9e 4f       	sbci	r25, 0xFE	; 254
    4104:	68 ee       	ldi	r22, 0xE8	; 232
    4106:	73 e0       	ldi	r23, 0x03	; 3
    4108:	0e 94 1e 48 	call	0x903c	; 0x903c <__udivmodhi4>
    410c:	60 93 00 46 	sts	0x4600, r22	; 0x804600 <g_time_needed_for_ID>
    4110:	70 93 01 46 	sts	0x4601, r23	; 0x804601 <g_time_needed_for_ID+0x1>
    4114:	04 c0       	rjmp	.+8      	; 0x411e <_Z33activateEventUsingCurrentSettingsP2SC+0xfa>
    4116:	10 92 00 46 	sts	0x4600, r1	; 0x804600 <g_time_needed_for_ID>
    411a:	10 92 01 46 	sts	0x4601, r1	; 0x804601 <g_time_needed_for_ID+0x1>
    411e:	80 e0       	ldi	r24, 0x00	; 0
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    4126:	c0 90 08 46 	lds	r12, 0x4608	; 0x804608 <g_event_finish_time>
    412a:	d0 90 09 46 	lds	r13, 0x4609	; 0x804609 <g_event_finish_time+0x1>
    412e:	e0 90 0a 46 	lds	r14, 0x460A	; 0x80460a <g_event_finish_time+0x2>
    4132:	f0 90 0b 46 	lds	r15, 0x460B	; 0x80460b <g_event_finish_time+0x3>
    4136:	c6 16       	cp	r12, r22
    4138:	d7 06       	cpc	r13, r23
    413a:	e8 06       	cpc	r14, r24
    413c:	f9 06       	cpc	r15, r25
    413e:	48 f4       	brcc	.+18     	; 0x4152 <_Z33activateEventUsingCurrentSettingsP2SC+0x12e>
    4140:	01 15       	cp	r16, r1
    4142:	11 05       	cpc	r17, r1
    4144:	09 f4       	brne	.+2      	; 0x4148 <_Z33activateEventUsingCurrentSettingsP2SC+0x124>
    4146:	25 c1       	rjmp	.+586    	; 0x4392 <_Z33activateEventUsingCurrentSettingsP2SC+0x36e>
    4148:	8a ef       	ldi	r24, 0xFA	; 250
    414a:	f8 01       	movw	r30, r16
    414c:	80 83       	st	Z, r24
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	21 c1       	rjmp	.+578    	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4152:	20 91 04 46 	lds	r18, 0x4604	; 0x804604 <g_event_start_time>
    4156:	30 91 05 46 	lds	r19, 0x4605	; 0x804605 <g_event_start_time+0x1>
    415a:	40 91 06 46 	lds	r20, 0x4606	; 0x804606 <g_event_start_time+0x2>
    415e:	50 91 07 46 	lds	r21, 0x4607	; 0x804607 <g_event_start_time+0x3>
    4162:	0e 94 b2 45 	call	0x8b64	; 0x8b64 <_Z7timeDifmm>
    4166:	99 23       	and	r25, r25
    4168:	0c f4       	brge	.+2      	; 0x416c <_Z33activateEventUsingCurrentSettingsP2SC+0x148>
    416a:	f2 c0       	rjmp	.+484    	; 0x4350 <_Z33activateEventUsingCurrentSettingsP2SC+0x32c>
    416c:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    4170:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4174:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    4178:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    417c:	e2 0e       	add	r14, r18
    417e:	f3 1e       	adc	r15, r19
    4180:	97 01       	movw	r18, r14
    4182:	0f 2c       	mov	r0, r15
    4184:	00 0c       	add	r0, r0
    4186:	44 0b       	sbc	r20, r20
    4188:	55 0b       	sbc	r21, r21
    418a:	0e 94 68 48 	call	0x90d0	; 0x90d0 <__divmodsi4>
    418e:	20 91 02 46 	lds	r18, 0x4602	; 0x804602 <g_intra_cycle_delay_time>
    4192:	30 91 03 46 	lds	r19, 0x4603	; 0x804603 <g_intra_cycle_delay_time+0x1>
    4196:	c9 01       	movw	r24, r18
    4198:	86 1b       	sub	r24, r22
    419a:	97 0b       	sbc	r25, r23
    419c:	18 16       	cp	r1, r24
    419e:	19 06       	cpc	r1, r25
    41a0:	0c f4       	brge	.+2      	; 0x41a4 <_Z33activateEventUsingCurrentSettingsP2SC+0x180>
    41a2:	84 c0       	rjmp	.+264    	; 0x42ac <_Z33activateEventUsingCurrentSettingsP2SC+0x288>
    41a4:	22 27       	eor	r18, r18
    41a6:	33 27       	eor	r19, r19
    41a8:	28 1b       	sub	r18, r24
    41aa:	39 0b       	sbc	r19, r25
    41ac:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    41b0:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    41b4:	24 17       	cp	r18, r20
    41b6:	35 07       	cpc	r19, r21
    41b8:	ac f1       	brlt	.+106    	; 0x4224 <_Z33activateEventUsingCurrentSettingsP2SC+0x200>
    41ba:	8e 0d       	add	r24, r14
    41bc:	9f 1d       	adc	r25, r15
    41be:	91 95       	neg	r25
    41c0:	81 95       	neg	r24
    41c2:	91 09       	sbc	r25, r1
    41c4:	09 2e       	mov	r0, r25
    41c6:	00 0c       	add	r0, r0
    41c8:	aa 0b       	sbc	r26, r26
    41ca:	bb 0b       	sbc	r27, r27
    41cc:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    41d0:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    41d4:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    41d8:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    41dc:	01 15       	cp	r16, r1
    41de:	11 05       	cpc	r17, r1
    41e0:	19 f0       	breq	.+6      	; 0x41e8 <_Z33activateEventUsingCurrentSettingsP2SC+0x1c4>
    41e2:	8e ef       	ldi	r24, 0xFE	; 254
    41e4:	f8 01       	movw	r30, r16
    41e6:	80 83       	st	Z, r24
    41e8:	80 91 0c 46 	lds	r24, 0x460C	; 0x80460c <g_event_enabled>
    41ec:	81 11       	cpse	r24, r1
    41ee:	8a c0       	rjmp	.+276    	; 0x4304 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e0>
    41f0:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    41f4:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    41f8:	40 91 cc 45 	lds	r20, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    41fc:	50 91 cd 45 	lds	r21, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    4200:	60 91 ce 45 	lds	r22, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    4204:	70 91 cf 45 	lds	r23, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    4208:	20 91 00 46 	lds	r18, 0x4600	; 0x804600 <g_time_needed_for_ID>
    420c:	30 91 01 46 	lds	r19, 0x4601	; 0x804601 <g_time_needed_for_ID+0x1>
    4210:	84 1b       	sub	r24, r20
    4212:	95 0b       	sbc	r25, r21
    4214:	82 1b       	sub	r24, r18
    4216:	93 0b       	sbc	r25, r19
    4218:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    421c:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    4220:	80 e0       	ldi	r24, 0x00	; 0
    4222:	77 c0       	rjmp	.+238    	; 0x4312 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4224:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4228:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    422c:	82 0f       	add	r24, r18
    422e:	93 1f       	adc	r25, r19
    4230:	09 2e       	mov	r0, r25
    4232:	00 0c       	add	r0, r0
    4234:	aa 0b       	sbc	r26, r26
    4236:	bb 0b       	sbc	r27, r27
    4238:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    423c:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    4240:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    4244:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
    4248:	01 15       	cp	r16, r1
    424a:	11 05       	cpc	r17, r1
    424c:	19 f0       	breq	.+6      	; 0x4254 <_Z33activateEventUsingCurrentSettingsP2SC+0x230>
    424e:	8d ef       	ldi	r24, 0xFD	; 253
    4250:	f8 01       	movw	r30, r16
    4252:	80 83       	st	Z, r24
    4254:	80 91 0c 46 	lds	r24, 0x460C	; 0x80460c <g_event_enabled>
    4258:	81 11       	cpse	r24, r1
    425a:	56 c0       	rjmp	.+172    	; 0x4308 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e4>
    425c:	80 91 00 46 	lds	r24, 0x4600	; 0x804600 <g_time_needed_for_ID>
    4260:	90 91 01 46 	lds	r25, 0x4601	; 0x804601 <g_time_needed_for_ID+0x1>
    4264:	a0 e0       	ldi	r26, 0x00	; 0
    4266:	b0 e0       	ldi	r27, 0x00	; 0
    4268:	40 91 cc 45 	lds	r20, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    426c:	50 91 cd 45 	lds	r21, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    4270:	60 91 ce 45 	lds	r22, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    4274:	70 91 cf 45 	lds	r23, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    4278:	84 17       	cp	r24, r20
    427a:	95 07       	cpc	r25, r21
    427c:	a6 07       	cpc	r26, r22
    427e:	b7 07       	cpc	r27, r23
    4280:	0c f0       	brlt	.+2      	; 0x4284 <_Z33activateEventUsingCurrentSettingsP2SC+0x260>
    4282:	44 c0       	rjmp	.+136    	; 0x430c <_Z33activateEventUsingCurrentSettingsP2SC+0x2e8>
    4284:	80 91 cc 45 	lds	r24, 0x45CC	; 0x8045cc <_ZL12g_on_the_air>
    4288:	90 91 cd 45 	lds	r25, 0x45CD	; 0x8045cd <_ZL12g_on_the_air+0x1>
    428c:	a0 91 ce 45 	lds	r26, 0x45CE	; 0x8045ce <_ZL12g_on_the_air+0x2>
    4290:	b0 91 cf 45 	lds	r27, 0x45CF	; 0x8045cf <_ZL12g_on_the_air+0x3>
    4294:	20 91 00 46 	lds	r18, 0x4600	; 0x804600 <g_time_needed_for_ID>
    4298:	30 91 01 46 	lds	r19, 0x4601	; 0x804601 <g_time_needed_for_ID+0x1>
    429c:	82 1b       	sub	r24, r18
    429e:	93 0b       	sbc	r25, r19
    42a0:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    42a4:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	33 c0       	rjmp	.+102    	; 0x4312 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    42ac:	44 27       	eor	r20, r20
    42ae:	55 27       	eor	r21, r21
    42b0:	48 1b       	sub	r20, r24
    42b2:	59 0b       	sbc	r21, r25
    42b4:	05 2e       	mov	r0, r21
    42b6:	00 0c       	add	r0, r0
    42b8:	66 0b       	sbc	r22, r22
    42ba:	77 0b       	sbc	r23, r23
    42bc:	40 93 cc 45 	sts	0x45CC, r20	; 0x8045cc <_ZL12g_on_the_air>
    42c0:	50 93 cd 45 	sts	0x45CD, r21	; 0x8045cd <_ZL12g_on_the_air+0x1>
    42c4:	60 93 ce 45 	sts	0x45CE, r22	; 0x8045ce <_ZL12g_on_the_air+0x2>
    42c8:	70 93 cf 45 	sts	0x45CF, r23	; 0x8045cf <_ZL12g_on_the_air+0x3>
    42cc:	01 15       	cp	r16, r1
    42ce:	11 05       	cpc	r17, r1
    42d0:	19 f0       	breq	.+6      	; 0x42d8 <_Z33activateEventUsingCurrentSettingsP2SC+0x2b4>
    42d2:	2e ef       	ldi	r18, 0xFE	; 254
    42d4:	f8 01       	movw	r30, r16
    42d6:	20 83       	st	Z, r18
    42d8:	20 91 0c 46 	lds	r18, 0x460C	; 0x80460c <g_event_enabled>
    42dc:	21 11       	cpse	r18, r1
    42de:	18 c0       	rjmp	.+48     	; 0x4310 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ec>
    42e0:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    42e4:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    42e8:	82 0f       	add	r24, r18
    42ea:	93 1f       	adc	r25, r19
    42ec:	20 91 00 46 	lds	r18, 0x4600	; 0x804600 <g_time_needed_for_ID>
    42f0:	30 91 01 46 	lds	r19, 0x4601	; 0x804601 <g_time_needed_for_ID+0x1>
    42f4:	82 1b       	sub	r24, r18
    42f6:	93 0b       	sbc	r25, r19
    42f8:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    42fc:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
    4300:	80 e0       	ldi	r24, 0x00	; 0
    4302:	07 c0       	rjmp	.+14     	; 0x4312 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	05 c0       	rjmp	.+10     	; 0x4312 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	03 c0       	rjmp	.+6      	; 0x4312 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	01 c0       	rjmp	.+2      	; 0x4312 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	88 23       	and	r24, r24
    4314:	b1 f0       	breq	.+44     	; 0x4342 <_Z33activateEventUsingCurrentSettingsP2SC+0x31e>
    4316:	f8 94       	cli
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	89 83       	std	Y+1, r24	; 0x01
    431c:	40 e0       	ldi	r20, 0x00	; 0
    431e:	50 e0       	ldi	r21, 0x00	; 0
    4320:	be 01       	movw	r22, r28
    4322:	6f 5f       	subi	r22, 0xFF	; 255
    4324:	7f 4f       	sbci	r23, 0xFF	; 255
    4326:	86 ed       	ldi	r24, 0xD6	; 214
    4328:	95 e4       	ldi	r25, 0x45	; 69
    432a:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
    432e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4332:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    4336:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    433a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    433e:	78 94       	sei
    4340:	03 c0       	rjmp	.+6      	; 0x4348 <_Z33activateEventUsingCurrentSettingsP2SC+0x324>
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	0e 94 79 43 	call	0x86f2	; 0x86f2 <_Z14keyTransmitterh>
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	80 93 0d 46 	sts	0x460D, r24	; 0x80460d <g_event_commenced>
    434e:	09 c0       	rjmp	.+18     	; 0x4362 <_Z33activateEventUsingCurrentSettingsP2SC+0x33e>
    4350:	01 15       	cp	r16, r1
    4352:	11 05       	cpc	r17, r1
    4354:	19 f0       	breq	.+6      	; 0x435c <_Z33activateEventUsingCurrentSettingsP2SC+0x338>
    4356:	8f ef       	ldi	r24, 0xFF	; 255
    4358:	f8 01       	movw	r30, r16
    435a:	80 83       	st	Z, r24
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	0e 94 79 43 	call	0x86f2	; 0x86f2 <_Z14keyTransmitterh>
    4362:	10 92 0f 46 	sts	0x460F, r1	; 0x80460f <g_waiting_for_next_event>
    4366:	8a e5       	ldi	r24, 0x5A	; 90
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    436e:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	0f c0       	rjmp	.+30     	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4376:	8c ec       	ldi	r24, 0xCC	; 204
    4378:	0d c0       	rjmp	.+26     	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    437a:	8d ec       	ldi	r24, 0xCD	; 205
    437c:	0b c0       	rjmp	.+22     	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    437e:	8b ec       	ldi	r24, 0xCB	; 203
    4380:	09 c0       	rjmp	.+18     	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4382:	8a ec       	ldi	r24, 0xCA	; 202
    4384:	07 c0       	rjmp	.+14     	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4386:	89 ec       	ldi	r24, 0xC9	; 201
    4388:	05 c0       	rjmp	.+10     	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    438a:	88 ec       	ldi	r24, 0xC8	; 200
    438c:	03 c0       	rjmp	.+6      	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    438e:	87 ec       	ldi	r24, 0xC7	; 199
    4390:	01 c0       	rjmp	.+2      	; 0x4394 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	0f 90       	pop	r0
    4396:	df 91       	pop	r29
    4398:	cf 91       	pop	r28
    439a:	1f 91       	pop	r17
    439c:	0f 91       	pop	r16
    439e:	ff 90       	pop	r15
    43a0:	ef 90       	pop	r14
    43a2:	df 90       	pop	r13
    43a4:	cf 90       	pop	r12
    43a6:	08 95       	ret

000043a8 <_Z18antennaIsConnectedv>:
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	08 95       	ret

000043ac <_Z13startEventNow19EventActionSource_t>:
	
}


void startEventNow(EventActionSource_t activationSource)
{
    43ac:	cf 93       	push	r28
    43ae:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    43b0:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <_Z23clockConfigurationCheckv>

	cli();
    43b4:	f8 94       	cli
	if(activationSource == POWER_UP)
    43b6:	c1 11       	cpse	r28, r1
    43b8:	0e c0       	rjmp	.+28     	; 0x43d6 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    43ba:	82 30       	cpi	r24, 0x02	; 2
    43bc:	31 f4       	brne	.+12     	; 0x43ca <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    43be:	60 e0       	ldi	r22, 0x00	; 0
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    43c8:	3f c0       	rjmp	.+126    	; 0x4448 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    43ca:	63 e0       	ldi	r22, 0x03	; 3
    43cc:	80 e0       	ldi	r24, 0x00	; 0
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    43d4:	39 c0       	rjmp	.+114    	; 0x4448 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    43d6:	c2 30       	cpi	r28, 0x02	; 2
    43d8:	d1 f4       	brne	.+52     	; 0x440e <_Z13startEventNow19EventActionSource_t+0x62>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    43da:	82 30       	cpi	r24, 0x02	; 2
    43dc:	31 f4       	brne	.+12     	; 0x43ea <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    43de:	61 e0       	ldi	r22, 0x01	; 1
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    43e8:	2f c0       	rjmp	.+94     	; 0x4448 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    43ea:	81 30       	cpi	r24, 0x01	; 1
    43ec:	21 f0       	breq	.+8      	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x4a>
    43ee:	84 30       	cpi	r24, 0x04	; 4
    43f0:	11 f0       	breq	.+4      	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x4a>
    43f2:	83 30       	cpi	r24, 0x03	; 3
    43f4:	31 f4       	brne	.+12     	; 0x4402 <_Z13startEventNow19EventActionSource_t+0x56>
		{
			setupForFox(NULL, START_EVENT_NOW);
    43f6:	61 e0       	ldi	r22, 0x01	; 1
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    4400:	23 c0       	rjmp	.+70     	; 0x4448 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    4402:	63 e0       	ldi	r22, 0x03	; 3
    4404:	80 e0       	ldi	r24, 0x00	; 0
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    440c:	1d c0       	rjmp	.+58     	; 0x4448 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    440e:	82 30       	cpi	r24, 0x02	; 2
    4410:	31 f4       	brne	.+12     	; 0x441e <_Z13startEventNow19EventActionSource_t+0x72>
		{
			setupForFox(NULL, START_EVENT_NOW);
    4412:	61 e0       	ldi	r22, 0x01	; 1
    4414:	80 e0       	ldi	r24, 0x00	; 0
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    441c:	15 c0       	rjmp	.+42     	; 0x4448 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    441e:	81 30       	cpi	r24, 0x01	; 1
    4420:	31 f4       	brne	.+12     	; 0x442e <_Z13startEventNow19EventActionSource_t+0x82>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    4422:	62 e0       	ldi	r22, 0x02	; 2
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    442c:	0d c0       	rjmp	.+26     	; 0x4448 <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    442e:	84 30       	cpi	r24, 0x04	; 4
    4430:	31 f4       	brne	.+12     	; 0x443e <_Z13startEventNow19EventActionSource_t+0x92>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    4432:	63 e0       	ldi	r22, 0x03	; 3
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    443c:	05 c0       	rjmp	.+10     	; 0x4448 <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    443e:	63 e0       	ldi	r22, 0x03	; 3
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

// 	g_LED_enunciating = FALSE;
	sei();
    4448:	78 94       	sei
}
    444a:	cf 91       	pop	r28
    444c:	08 95       	ret

0000444e <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    444e:	cf 93       	push	r28
    4450:	df 93       	push	r29
    4452:	d8 2f       	mov	r29, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    4454:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <_Z23clockConfigurationCheckv>
    4458:	c8 2f       	mov	r28, r24

	cli();
    445a:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    445c:	d2 30       	cpi	r29, 0x02	; 2
    445e:	31 f4       	brne	.+12     	; 0x446c <_Z12stopEventNow19EventActionSource_t+0x1e>
	{
		setupForFox(NULL, START_NOTHING);
    4460:	60 e0       	ldi	r22, 0x00	; 0
    4462:	80 e0       	ldi	r24, 0x00	; 0
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    446a:	14 c0       	rjmp	.+40     	; 0x4494 <_Z12stopEventNow19EventActionSource_t+0x46>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    446c:	81 30       	cpi	r24, 0x01	; 1
    446e:	29 f4       	brne	.+10     	; 0x447a <_Z12stopEventNow19EventActionSource_t+0x2c>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    4470:	62 e0       	ldi	r22, 0x02	; 2
    4472:	80 e0       	ldi	r24, 0x00	; 0
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    447a:	c4 30       	cpi	r28, 0x04	; 4
    447c:	31 f4       	brne	.+12     	; 0x448a <_Z12stopEventNow19EventActionSource_t+0x3c>
		{
			setupForFox(NULL, START_NOTHING);
    447e:	60 e0       	ldi	r22, 0x00	; 0
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
    4488:	05 c0       	rjmp	.+10     	; 0x4494 <_Z12stopEventNow19EventActionSource_t+0x46>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    448a:	60 e0       	ldi	r22, 0x00	; 0
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>

// 	if(g_sync_pin_stable == STABLE_LOW)
// 	{
// 		digitalWrite(PIN_LED, OFF); /*  LED Off */
// 	}
}
    4494:	df 91       	pop	r29
    4496:	cf 91       	pop	r28
    4498:	08 95       	ret

0000449a <_Z18startEventUsingRTCv>:

void startEventUsingRTC(void)
{
    449a:	8f 92       	push	r8
    449c:	9f 92       	push	r9
    449e:	af 92       	push	r10
    44a0:	bf 92       	push	r11
    44a2:	ef 92       	push	r14
    44a4:	ff 92       	push	r15
    44a6:	0f 93       	push	r16
    44a8:	1f 93       	push	r17
	g_current_epoch = ds3231_get_epoch(null);
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    44b2:	60 93 32 46 	sts	0x4632, r22	; 0x804632 <g_current_epoch>
    44b6:	70 93 33 46 	sts	0x4633, r23	; 0x804633 <g_current_epoch+0x1>
    44ba:	80 93 34 46 	sts	0x4634, r24	; 0x804634 <g_current_epoch+0x2>
    44be:	90 93 35 46 	sts	0x4635, r25	; 0x804635 <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    44c2:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    44c6:	82 30       	cpi	r24, 0x02	; 2
    44c8:	09 f4       	brne	.+2      	; 0x44cc <_Z18startEventUsingRTCv+0x32>
    44ca:	54 c0       	rjmp	.+168    	; 0x4574 <_Z18startEventUsingRTCv+0xda>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    44cc:	63 e0       	ldi	r22, 0x03	; 3
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    44d6:	20 91 21 46 	lds	r18, 0x4621	; 0x804621 <g_event_start_epoch>
    44da:	30 91 22 46 	lds	r19, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    44de:	40 91 23 46 	lds	r20, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    44e2:	50 91 24 46 	lds	r21, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    44e6:	60 91 32 46 	lds	r22, 0x4632	; 0x804632 <g_current_epoch>
    44ea:	70 91 33 46 	lds	r23, 0x4633	; 0x804633 <g_current_epoch+0x1>
    44ee:	80 91 34 46 	lds	r24, 0x4634	; 0x804634 <g_current_epoch+0x2>
    44f2:	90 91 35 46 	lds	r25, 0x4635	; 0x804635 <g_current_epoch+0x3>
    44f6:	0f 2e       	mov	r0, r31
    44f8:	f8 ea       	ldi	r31, 0xA8	; 168
    44fa:	ef 2e       	mov	r14, r31
    44fc:	f2 e4       	ldi	r31, 0x42	; 66
    44fe:	ff 2e       	mov	r15, r31
    4500:	f0 2d       	mov	r31, r0
    4502:	05 eb       	ldi	r16, 0xB5	; 181
    4504:	12 e4       	ldi	r17, 0x42	; 66
    4506:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    450a:	60 91 21 46 	lds	r22, 0x4621	; 0x804621 <g_event_start_epoch>
    450e:	70 91 22 46 	lds	r23, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    4512:	80 91 23 46 	lds	r24, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    4516:	90 91 24 46 	lds	r25, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    451a:	80 90 32 46 	lds	r8, 0x4632	; 0x804632 <g_current_epoch>
    451e:	90 90 33 46 	lds	r9, 0x4633	; 0x804633 <g_current_epoch+0x1>
    4522:	a0 90 34 46 	lds	r10, 0x4634	; 0x804634 <g_current_epoch+0x2>
    4526:	b0 90 35 46 	lds	r11, 0x4635	; 0x804635 <g_current_epoch+0x3>
    452a:	68 15       	cp	r22, r8
    452c:	79 05       	cpc	r23, r9
    452e:	8a 05       	cpc	r24, r10
    4530:	9b 05       	cpc	r25, r11
    4532:	88 f4       	brcc	.+34     	; 0x4556 <_Z18startEventUsingRTCv+0xbc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    4534:	20 91 25 46 	lds	r18, 0x4625	; 0x804625 <g_event_finish_epoch>
    4538:	30 91 26 46 	lds	r19, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    453c:	40 91 27 46 	lds	r20, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    4540:	50 91 28 46 	lds	r21, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    4544:	e1 2c       	mov	r14, r1
    4546:	f1 2c       	mov	r15, r1
    4548:	09 ec       	ldi	r16, 0xC9	; 201
    454a:	12 e4       	ldi	r17, 0x42	; 66
    454c:	c5 01       	movw	r24, r10
    454e:	b4 01       	movw	r22, r8
    4550:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z14reportTimeTillmmPKcS0_>
    4554:	11 c0       	rjmp	.+34     	; 0x4578 <_Z18startEventUsingRTCv+0xde>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    4556:	20 91 25 46 	lds	r18, 0x4625	; 0x804625 <g_event_finish_epoch>
    455a:	30 91 26 46 	lds	r19, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    455e:	40 91 27 46 	lds	r20, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    4562:	50 91 28 46 	lds	r21, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    4566:	e1 2c       	mov	r14, r1
    4568:	f1 2c       	mov	r15, r1
    456a:	01 ec       	ldi	r16, 0xC1	; 193
    456c:	12 e4       	ldi	r17, 0x42	; 66
    456e:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z14reportTimeTillmmPKcS0_>
    4572:	02 c0       	rjmp	.+4      	; 0x4578 <_Z18startEventUsingRTCv+0xde>
		}
	}
	else
	{
		reportConfigErrors();
    4574:	0e 94 04 27 	call	0x4e08	; 0x4e08 <_Z18reportConfigErrorsv>
	}
}
    4578:	1f 91       	pop	r17
    457a:	0f 91       	pop	r16
    457c:	ff 90       	pop	r15
    457e:	ef 90       	pop	r14
    4580:	bf 90       	pop	r11
    4582:	af 90       	pop	r10
    4584:	9f 90       	pop	r9
    4586:	8f 90       	pop	r8
    4588:	08 95       	ret

0000458a <_Z11setupForFoxP5Fox_t13EventAction_t>:



void setupForFox(Fox_t* fox, EventAction_t action)
{
    458a:	1f 93       	push	r17
    458c:	cf 93       	push	r28
    458e:	df 93       	push	r29
    4590:	1f 92       	push	r1
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
    4596:	16 2f       	mov	r17, r22
	bool patternNotSet = true;
	
	if(fox)
    4598:	00 97       	sbiw	r24, 0x00	; 0
    459a:	31 f0       	breq	.+12     	; 0x45a8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    459c:	fc 01       	movw	r30, r24
    459e:	80 81       	ld	r24, Z
    45a0:	82 31       	cpi	r24, 0x12	; 18
    45a2:	11 f0       	breq	.+4      	; 0x45a8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    45a4:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		}
	}

 	g_current_epoch = ds3231_get_epoch(null);
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    45b0:	60 93 32 46 	sts	0x4632, r22	; 0x804632 <g_current_epoch>
    45b4:	70 93 33 46 	sts	0x4633, r23	; 0x804633 <g_current_epoch+0x1>
    45b8:	80 93 34 46 	sts	0x4634, r24	; 0x804634 <g_current_epoch+0x2>
    45bc:	90 93 35 46 	sts	0x4635, r25	; 0x804635 <g_current_epoch+0x3>

	cli();
    45c0:	f8 94       	cli
	
	g_event_commenced = FALSE;					/* get things running immediately */
    45c2:	10 92 0d 46 	sts	0x460D, r1	; 0x80460d <g_event_commenced>
	g_event_enabled = FALSE;					/* get things running immediately */
    45c6:	10 92 0c 46 	sts	0x460C, r1	; 0x80460c <g_event_enabled>

	switch(g_fox)
    45ca:	e0 91 1b 40 	lds	r30, 0x401B	; 0x80401b <g_fox>
    45ce:	8e 2f       	mov	r24, r30
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	fc 01       	movw	r30, r24
    45d4:	31 97       	sbiw	r30, 0x01	; 1
    45d6:	e1 31       	cpi	r30, 0x11	; 17
    45d8:	f1 05       	cpc	r31, r1
    45da:	08 f0       	brcs	.+2      	; 0x45de <_Z11setupForFoxP5Fox_t13EventAction_t+0x54>
    45dc:	1e c1       	rjmp	.+572    	; 0x481a <_Z11setupForFoxP5Fox_t13EventAction_t+0x290>
    45de:	ec 58       	subi	r30, 0x8C	; 140
    45e0:	ff 4f       	sbci	r31, 0xFF	; 255
    45e2:	0c 94 87 48 	jmp	0x910e	; 0x910e <__tablejump2__>
	{
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
    45e6:	e6 ed       	ldi	r30, 0xD6	; 214
    45e8:	f5 e4       	ldi	r31, 0x45	; 69
    45ea:	8d e4       	ldi	r24, 0x4D	; 77
    45ec:	9f e4       	ldi	r25, 0x4F	; 79
    45ee:	80 83       	st	Z, r24
    45f0:	91 83       	std	Z+1, r25	; 0x01
    45f2:	85 e4       	ldi	r24, 0x45	; 69
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	82 83       	std	Z+2, r24	; 0x02
    45f8:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	01 c0       	rjmp	.+2      	; 0x4600 <_Z11setupForFoxP5Fox_t13EventAction_t+0x76>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    45fe:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_2:
		{
			if(patternNotSet)
    4600:	88 23       	and	r24, r24
    4602:	69 f0       	breq	.+26     	; 0x461e <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
    4604:	e6 ed       	ldi	r30, 0xD6	; 214
    4606:	f5 e4       	ldi	r31, 0x45	; 69
    4608:	8d e4       	ldi	r24, 0x4D	; 77
    460a:	9f e4       	ldi	r25, 0x4F	; 79
    460c:	80 83       	st	Z, r24
    460e:	91 83       	std	Z+1, r25	; 0x01
    4610:	89 e4       	ldi	r24, 0x49	; 73
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	82 83       	std	Z+2, r24	; 0x02
    4616:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	01 c0       	rjmp	.+2      	; 0x461e <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    461c:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_3:
		{
			if(patternNotSet)
    461e:	88 23       	and	r24, r24
    4620:	69 f0       	breq	.+26     	; 0x463c <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
    4622:	e6 ed       	ldi	r30, 0xD6	; 214
    4624:	f5 e4       	ldi	r31, 0x45	; 69
    4626:	8d e4       	ldi	r24, 0x4D	; 77
    4628:	9f e4       	ldi	r25, 0x4F	; 79
    462a:	80 83       	st	Z, r24
    462c:	91 83       	std	Z+1, r25	; 0x01
    462e:	83 e5       	ldi	r24, 0x53	; 83
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	82 83       	std	Z+2, r24	; 0x02
    4634:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	01 c0       	rjmp	.+2      	; 0x463c <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    463a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_4:
		{
			if(patternNotSet)
    463c:	88 23       	and	r24, r24
    463e:	69 f0       	breq	.+26     	; 0x465a <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
    4640:	e6 ed       	ldi	r30, 0xD6	; 214
    4642:	f5 e4       	ldi	r31, 0x45	; 69
    4644:	8d e4       	ldi	r24, 0x4D	; 77
    4646:	9f e4       	ldi	r25, 0x4F	; 79
    4648:	80 83       	st	Z, r24
    464a:	91 83       	std	Z+1, r25	; 0x01
    464c:	88 e4       	ldi	r24, 0x48	; 72
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	82 83       	std	Z+2, r24	; 0x02
    4652:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4654:	80 e0       	ldi	r24, 0x00	; 0
    4656:	01 c0       	rjmp	.+2      	; 0x465a <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4658:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case FOX_5:
		{
			/* Set the Morse code pattern and speed */
			if(patternNotSet)
    465a:	88 23       	and	r24, r24
    465c:	51 f0       	breq	.+20     	; 0x4672 <_Z11setupForFoxP5Fox_t13EventAction_t+0xe8>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO5");
    465e:	e6 ed       	ldi	r30, 0xD6	; 214
    4660:	f5 e4       	ldi	r31, 0x45	; 69
    4662:	8d e4       	ldi	r24, 0x4D	; 77
    4664:	9f e4       	ldi	r25, 0x4F	; 79
    4666:	80 83       	st	Z, r24
    4668:	91 83       	std	Z+1, r25	; 0x01
    466a:	85 e3       	ldi	r24, 0x35	; 53
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	82 83       	std	Z+2, r24	; 0x02
    4670:	93 83       	std	Z+3, r25	; 0x03
			}
			
			BOOL repeat = TRUE;
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4676:	40 e0       	ldi	r20, 0x00	; 0
    4678:	50 e0       	ldi	r21, 0x00	; 0
    467a:	be 01       	movw	r22, r28
    467c:	6f 5f       	subi	r22, 0xFF	; 255
    467e:	7f 4f       	sbci	r23, 0xFF	; 255
    4680:	86 ed       	ldi	r24, 0xD6	; 214
    4682:	95 e4       	ldi	r25, 0x45	; 69
    4684:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4688:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    468c:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    4690:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4694:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 60;						/* on period is very long */
    4698:	8c e3       	ldi	r24, 0x3C	; 60
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    46a0:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 240;                    /* off period is very short */
    46a4:	80 ef       	ldi	r24, 0xF0	; 240
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    46ac:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    46b0:	d4 c0       	rjmp	.+424    	; 0x485a <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d0>

		case SPRINT_S1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "ME");
    46b2:	e6 ed       	ldi	r30, 0xD6	; 214
    46b4:	f5 e4       	ldi	r31, 0x45	; 69
    46b6:	8d e4       	ldi	r24, 0x4D	; 77
    46b8:	95 e4       	ldi	r25, 0x45	; 69
    46ba:	80 83       	st	Z, r24
    46bc:	91 83       	std	Z+1, r25	; 0x01
    46be:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	01 c0       	rjmp	.+2      	; 0x46c6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x13c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46c4:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S2:
		{
			if(patternNotSet)
    46c6:	88 23       	and	r24, r24
    46c8:	51 f0       	breq	.+20     	; 0x46de <_Z11setupForFoxP5Fox_t13EventAction_t+0x154>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MI");
    46ca:	e6 ed       	ldi	r30, 0xD6	; 214
    46cc:	f5 e4       	ldi	r31, 0x45	; 69
    46ce:	8d e4       	ldi	r24, 0x4D	; 77
    46d0:	99 e4       	ldi	r25, 0x49	; 73
    46d2:	80 83       	st	Z, r24
    46d4:	91 83       	std	Z+1, r25	; 0x01
    46d6:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	01 c0       	rjmp	.+2      	; 0x46de <_Z11setupForFoxP5Fox_t13EventAction_t+0x154>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46dc:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S3:
		{
			if(patternNotSet)
    46de:	88 23       	and	r24, r24
    46e0:	51 f0       	breq	.+20     	; 0x46f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x16c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MS");
    46e2:	e6 ed       	ldi	r30, 0xD6	; 214
    46e4:	f5 e4       	ldi	r31, 0x45	; 69
    46e6:	8d e4       	ldi	r24, 0x4D	; 77
    46e8:	93 e5       	ldi	r25, 0x53	; 83
    46ea:	80 83       	st	Z, r24
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    46f0:	80 e0       	ldi	r24, 0x00	; 0
    46f2:	01 c0       	rjmp	.+2      	; 0x46f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x16c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46f4:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S4:
		{
			if(patternNotSet)
    46f6:	88 23       	and	r24, r24
    46f8:	51 f0       	breq	.+20     	; 0x470e <_Z11setupForFoxP5Fox_t13EventAction_t+0x184>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MH");
    46fa:	e6 ed       	ldi	r30, 0xD6	; 214
    46fc:	f5 e4       	ldi	r31, 0x45	; 69
    46fe:	8d e4       	ldi	r24, 0x4D	; 77
    4700:	98 e4       	ldi	r25, 0x48	; 72
    4702:	80 83       	st	Z, r24
    4704:	91 83       	std	Z+1, r25	; 0x01
    4706:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4708:	80 e0       	ldi	r24, 0x00	; 0
    470a:	01 c0       	rjmp	.+2      	; 0x470e <_Z11setupForFoxP5Fox_t13EventAction_t+0x184>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    470c:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case SPRINT_S5:
		{
			{
				if(patternNotSet)
    470e:	88 23       	and	r24, r24
    4710:	39 f0       	breq	.+14     	; 0x4720 <_Z11setupForFoxP5Fox_t13EventAction_t+0x196>
				{
					sprintf(g_messages_text[PATTERN_TEXT], "M5");
    4712:	e6 ed       	ldi	r30, 0xD6	; 214
    4714:	f5 e4       	ldi	r31, 0x45	; 69
    4716:	8d e4       	ldi	r24, 0x4D	; 77
    4718:	95 e3       	ldi	r25, 0x35	; 53
    471a:	80 83       	st	Z, r24
    471c:	91 83       	std	Z+1, r25	; 0x01
    471e:	12 82       	std	Z+2, r1	; 0x02
				}
			}
			
			BOOL repeat = TRUE;
    4720:	81 e0       	ldi	r24, 0x01	; 1
    4722:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4724:	40 e0       	ldi	r20, 0x00	; 0
    4726:	50 e0       	ldi	r21, 0x00	; 0
    4728:	be 01       	movw	r22, r28
    472a:	6f 5f       	subi	r22, 0xFF	; 255
    472c:	7f 4f       	sbci	r23, 0xFF	; 255
    472e:	86 ed       	ldi	r24, 0xD6	; 214
    4730:	95 e4       	ldi	r25, 0x45	; 69
    4732:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
			g_pattern_codespeed = 8;
    4736:	88 e0       	ldi	r24, 0x08	; 8
    4738:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    473c:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4740:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    4744:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4748:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 12;						/* on period is very long */
    474c:	8c e0       	ldi	r24, 0x0C	; 12
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4754:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    4758:	80 e3       	ldi	r24, 0x30	; 48
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4760:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4764:	7a c0       	rjmp	.+244    	; 0x485a <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d0>

		case SPRINT_F1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OE");
    4766:	e6 ed       	ldi	r30, 0xD6	; 214
    4768:	f5 e4       	ldi	r31, 0x45	; 69
    476a:	8f e4       	ldi	r24, 0x4F	; 79
    476c:	95 e4       	ldi	r25, 0x45	; 69
    476e:	80 83       	st	Z, r24
    4770:	91 83       	std	Z+1, r25	; 0x01
    4772:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	01 c0       	rjmp	.+2      	; 0x477a <_Z11setupForFoxP5Fox_t13EventAction_t+0x1f0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4778:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F2:
		{
			if(patternNotSet)
    477a:	88 23       	and	r24, r24
    477c:	51 f0       	breq	.+20     	; 0x4792 <_Z11setupForFoxP5Fox_t13EventAction_t+0x208>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OI");
    477e:	e6 ed       	ldi	r30, 0xD6	; 214
    4780:	f5 e4       	ldi	r31, 0x45	; 69
    4782:	8f e4       	ldi	r24, 0x4F	; 79
    4784:	99 e4       	ldi	r25, 0x49	; 73
    4786:	80 83       	st	Z, r24
    4788:	91 83       	std	Z+1, r25	; 0x01
    478a:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    478c:	80 e0       	ldi	r24, 0x00	; 0
    478e:	01 c0       	rjmp	.+2      	; 0x4792 <_Z11setupForFoxP5Fox_t13EventAction_t+0x208>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4790:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F3:
		{
			if(patternNotSet)
    4792:	88 23       	and	r24, r24
    4794:	51 f0       	breq	.+20     	; 0x47aa <_Z11setupForFoxP5Fox_t13EventAction_t+0x220>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OS");
    4796:	e6 ed       	ldi	r30, 0xD6	; 214
    4798:	f5 e4       	ldi	r31, 0x45	; 69
    479a:	8f e4       	ldi	r24, 0x4F	; 79
    479c:	93 e5       	ldi	r25, 0x53	; 83
    479e:	80 83       	st	Z, r24
    47a0:	91 83       	std	Z+1, r25	; 0x01
    47a2:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	01 c0       	rjmp	.+2      	; 0x47aa <_Z11setupForFoxP5Fox_t13EventAction_t+0x220>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    47a8:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F4:
		{
			if(patternNotSet)
    47aa:	88 23       	and	r24, r24
    47ac:	51 f0       	breq	.+20     	; 0x47c2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x238>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OH");
    47ae:	e6 ed       	ldi	r30, 0xD6	; 214
    47b0:	f5 e4       	ldi	r31, 0x45	; 69
    47b2:	8f e4       	ldi	r24, 0x4F	; 79
    47b4:	98 e4       	ldi	r25, 0x48	; 72
    47b6:	80 83       	st	Z, r24
    47b8:	91 83       	std	Z+1, r25	; 0x01
    47ba:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    47bc:	80 e0       	ldi	r24, 0x00	; 0
    47be:	01 c0       	rjmp	.+2      	; 0x47c2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x238>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    47c0:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case SPRINT_F5:
		{
			{
				if(patternNotSet)
    47c2:	88 23       	and	r24, r24
    47c4:	39 f0       	breq	.+14     	; 0x47d4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24a>
				{
					sprintf(g_messages_text[PATTERN_TEXT], "O5");
    47c6:	e6 ed       	ldi	r30, 0xD6	; 214
    47c8:	f5 e4       	ldi	r31, 0x45	; 69
    47ca:	8f e4       	ldi	r24, 0x4F	; 79
    47cc:	95 e3       	ldi	r25, 0x35	; 53
    47ce:	80 83       	st	Z, r24
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	12 82       	std	Z+2, r1	; 0x02
				}
			}
			
			BOOL repeat = TRUE;
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    47d8:	40 e0       	ldi	r20, 0x00	; 0
    47da:	50 e0       	ldi	r21, 0x00	; 0
    47dc:	be 01       	movw	r22, r28
    47de:	6f 5f       	subi	r22, 0xFF	; 255
    47e0:	7f 4f       	sbci	r23, 0xFF	; 255
    47e2:	86 ed       	ldi	r24, 0xD6	; 214
    47e4:	95 e4       	ldi	r25, 0x45	; 69
    47e6:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
			g_pattern_codespeed = 15;
    47ea:	8f e0       	ldi	r24, 0x0F	; 15
    47ec:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    47f0:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    47f4:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    47f8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    47fc:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 12;						/* on period is very long */
    4800:	8c e0       	ldi	r24, 0x0C	; 12
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4808:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    480c:	80 e3       	ldi	r24, 0x30	; 48
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4814:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4818:	20 c0       	rjmp	.+64     	; 0x485a <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d0>

		/* case BEACON:
		 * case SPECTATOR: */
		default:
		{
			BOOL repeat = TRUE;
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    481e:	40 e0       	ldi	r20, 0x00	; 0
    4820:	50 e0       	ldi	r21, 0x00	; 0
    4822:	be 01       	movw	r22, r28
    4824:	6f 5f       	subi	r22, 0xFF	; 255
    4826:	7f 4f       	sbci	r23, 0xFF	; 255
    4828:	86 ed       	ldi	r24, 0xD6	; 214
    482a:	95 e4       	ldi	r25, 0x45	; 69
    482c:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
			g_pattern_codespeed = 8;
    4830:	88 e0       	ldi	r24, 0x08	; 8
    4832:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4836:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    483a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    483e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4842:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 60;						/* on period is very long */
    4846:	8c e3       	ldi	r24, 0x3C	; 60
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    484e:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 0;						/* off period is very short */
    4852:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    4856:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
	}

	if(action == START_NOTHING)
    485a:	11 11       	cpse	r17, r1
    485c:	0a c0       	rjmp	.+20     	; 0x4872 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2e8>
	{
		g_event_commenced = FALSE;                   /* get things running immediately */
    485e:	10 92 0d 46 	sts	0x460D, r1	; 0x80460d <g_event_commenced>
		g_event_enabled = FALSE;                     /* get things running immediately */
    4862:	10 92 0c 46 	sts	0x460C, r1	; 0x80460c <g_event_enabled>

 		g_use_rtc_for_startstop = FALSE;
    4866:	10 92 36 46 	sts	0x4636, r1	; 0x804636 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = TRUE;
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    4870:	48 c0       	rjmp	.+144    	; 0x4902 <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
	}
	else if(action == START_EVENT_NOW)
    4872:	11 30       	cpi	r17, 0x01	; 1
    4874:	51 f4       	brne	.+20     	; 0x488a <_Z11setupForFoxP5Fox_t13EventAction_t+0x300>
	{
// 		g_seconds_since_sync = 0;                   /* Total elapsed time since synchronization */
 		g_use_rtc_for_startstop = FALSE;
    4876:	10 92 36 46 	sts	0x4636, r1	; 0x804636 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = FALSE;
    487a:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
		g_event_commenced = TRUE;					/* get things running immediately */
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	80 93 0d 46 	sts	0x460D, r24	; 0x80460d <g_event_commenced>
		g_event_enabled = TRUE;						/* get things running immediately */
    4884:	80 93 0c 46 	sts	0x460C, r24	; 0x80460c <g_event_enabled>
    4888:	3c c0       	rjmp	.+120    	; 0x4902 <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    488a:	12 30       	cpi	r17, 0x02	; 2
    488c:	a9 f5       	brne	.+106    	; 0x48f8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x36e>
	{
		BOOL repeat = TRUE;
    488e:	11 e0       	ldi	r17, 0x01	; 1
    4890:	19 83       	std	Y+1, r17	; 0x01
		makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4892:	40 e0       	ldi	r20, 0x00	; 0
    4894:	50 e0       	ldi	r21, 0x00	; 0
    4896:	be 01       	movw	r22, r28
    4898:	6f 5f       	subi	r22, 0xFF	; 255
    489a:	7f 4f       	sbci	r23, 0xFF	; 255
    489c:	86 ed       	ldi	r24, 0xD6	; 214
    489e:	95 e4       	ldi	r25, 0x45	; 69
    48a0:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z9makeMorsePcPhS0_>
		g_code_throttle = throttleValue(g_pattern_codespeed);
    48a4:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    48a8:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_Z13throttleValueh>
    48ac:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    48b0:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

// 		g_event_start_time = 1;                     /* have it start a long time ago */
// 		g_event_finish_time = MAX_TIME;             /* run for a long long time */
		g_on_the_air = g_on_air_seconds;			/* start out transmitting */
    48b4:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    48b8:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    48bc:	09 2e       	mov	r0, r25
    48be:	00 0c       	add	r0, r0
    48c0:	aa 0b       	sbc	r26, r26
    48c2:	bb 0b       	sbc	r27, r27
    48c4:	80 93 cc 45 	sts	0x45CC, r24	; 0x8045cc <_ZL12g_on_the_air>
    48c8:	90 93 cd 45 	sts	0x45CD, r25	; 0x8045cd <_ZL12g_on_the_air+0x1>
    48cc:	a0 93 ce 45 	sts	0x45CE, r26	; 0x8045ce <_ZL12g_on_the_air+0x2>
    48d0:	b0 93 cf 45 	sts	0x45CF, r27	; 0x8045cf <_ZL12g_on_the_air+0x3>
		g_sendID_seconds_countdown = 60;			/* wait a long time to send the ID */
    48d4:	8c e3       	ldi	r24, 0x3C	; 60
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	80 93 d0 45 	sts	0x45D0, r24	; 0x8045d0 <_ZL26g_sendID_seconds_countdown>
    48dc:	90 93 d1 45 	sts	0x45D1, r25	; 0x8045d1 <_ZL26g_sendID_seconds_countdown+0x1>
		g_event_commenced = TRUE;                   /* get things running immediately */
    48e0:	10 93 0d 46 	sts	0x460D, r17	; 0x80460d <g_event_commenced>
		g_event_enabled = TRUE;                     /* get things running immediately */
    48e4:	10 93 0c 46 	sts	0x460C, r17	; 0x80460c <g_event_enabled>
		g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    48e8:	8d ef       	ldi	r24, 0xFD	; 253
    48ea:	80 93 c8 45 	sts	0x45C8, r24	; 0x8045c8 <_ZL18g_last_status_code>
		
// 		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
 		g_use_rtc_for_startstop = FALSE;
    48ee:	10 92 36 46 	sts	0x4636, r1	; 0x804636 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = FALSE;
    48f2:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    48f6:	05 c0       	rjmp	.+10     	; 0x4902 <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
 		}
 		else                                                                /* event starts in the future */
 		{
 		}
 
 		g_use_rtc_for_startstop = TRUE;
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	80 93 36 46 	sts	0x4636, r24	; 0x804636 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = TRUE;
    48fe:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
// 	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
// 	g_sendAMmodulation = FALSE;
// 	g_LED_enunciating = FALSE;
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */

	sei();
    4902:	78 94       	sei
}
    4904:	0f 90       	pop	r0
    4906:	df 91       	pop	r29
    4908:	cf 91       	pop	r28
    490a:	1f 91       	pop	r17
    490c:	08 95       	ret

0000490e <_Z18validateTimeStringPcPma>:

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    490e:	4f 92       	push	r4
    4910:	5f 92       	push	r5
    4912:	6f 92       	push	r6
    4914:	7f 92       	push	r7
    4916:	af 92       	push	r10
    4918:	bf 92       	push	r11
    491a:	cf 92       	push	r12
    491c:	df 92       	push	r13
    491e:	ef 92       	push	r14
    4920:	ff 92       	push	r15
    4922:	0f 93       	push	r16
    4924:	1f 93       	push	r17
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	8c 01       	movw	r16, r24
    492c:	a4 2e       	mov	r10, r20
	time_t valid = 0;
	int len = strlen(str);
    492e:	fc 01       	movw	r30, r24
    4930:	01 90       	ld	r0, Z+
    4932:	00 20       	and	r0, r0
    4934:	e9 f7       	brne	.-6      	; 0x4930 <_Z18validateTimeStringPcPma+0x22>
    4936:	31 97       	sbiw	r30, 0x01	; 1
    4938:	ef 01       	movw	r28, r30
    493a:	c8 1b       	sub	r28, r24
    493c:	d9 0b       	sbc	r29, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    493e:	26 e4       	ldi	r18, 0x46	; 70
    4940:	61 32       	cpi	r22, 0x21	; 33
    4942:	72 07       	cpc	r23, r18
    4944:	e1 f4       	brne	.+56     	; 0x497e <_Z18validateTimeStringPcPma+0x70>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4946:	c0 90 32 46 	lds	r12, 0x4632	; 0x804632 <g_current_epoch>
    494a:	d0 90 33 46 	lds	r13, 0x4633	; 0x804633 <g_current_epoch+0x1>
    494e:	e0 90 34 46 	lds	r14, 0x4634	; 0x804634 <g_current_epoch+0x2>
    4952:	f0 90 35 46 	lds	r15, 0x4635	; 0x804635 <g_current_epoch+0x3>
    4956:	c1 14       	cp	r12, r1
    4958:	86 e6       	ldi	r24, 0x66	; 102
    495a:	d8 06       	cpc	r13, r24
    495c:	8e ee       	ldi	r24, 0xEE	; 238
    495e:	e8 06       	cpc	r14, r24
    4960:	8f e5       	ldi	r24, 0x5F	; 95
    4962:	f8 06       	cpc	r15, r24
    4964:	50 f5       	brcc	.+84     	; 0x49ba <_Z18validateTimeStringPcPma+0xac>
		validationType = 1;
    4966:	bb 24       	eor	r11, r11
    4968:	b3 94       	inc	r11
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    496a:	0f 2e       	mov	r0, r31
    496c:	c1 2c       	mov	r12, r1
    496e:	f6 e6       	ldi	r31, 0x66	; 102
    4970:	df 2e       	mov	r13, r31
    4972:	fe ee       	ldi	r31, 0xEE	; 238
    4974:	ef 2e       	mov	r14, r31
    4976:	ff e5       	ldi	r31, 0x5F	; 95
    4978:	ff 2e       	mov	r15, r31
    497a:	f0 2d       	mov	r31, r0
    497c:	2f c0       	rjmp	.+94     	; 0x49dc <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
    497e:	65 52       	subi	r22, 0x25	; 37
    4980:	76 44       	sbci	r23, 0x46	; 70
    4982:	f1 f4       	brne	.+60     	; 0x49c0 <_Z18validateTimeStringPcPma+0xb2>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    4984:	c0 90 21 46 	lds	r12, 0x4621	; 0x804621 <g_event_start_epoch>
    4988:	d0 90 22 46 	lds	r13, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    498c:	e0 90 23 46 	lds	r14, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    4990:	f0 90 24 46 	lds	r15, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    4994:	80 91 32 46 	lds	r24, 0x4632	; 0x804632 <g_current_epoch>
    4998:	90 91 33 46 	lds	r25, 0x4633	; 0x804633 <g_current_epoch+0x1>
    499c:	a0 91 34 46 	lds	r26, 0x4634	; 0x804634 <g_current_epoch+0x2>
    49a0:	b0 91 35 46 	lds	r27, 0x4635	; 0x804635 <g_current_epoch+0x3>
    49a4:	c8 16       	cp	r12, r24
    49a6:	d9 06       	cpc	r13, r25
    49a8:	ea 06       	cpc	r14, r26
    49aa:	fb 06       	cpc	r15, r27
    49ac:	a0 f4       	brcc	.+40     	; 0x49d6 <_Z18validateTimeStringPcPma+0xc8>
    49ae:	6c 01       	movw	r12, r24
    49b0:	7d 01       	movw	r14, r26
		validationType = 2;
    49b2:	68 94       	set
    49b4:	bb 24       	eor	r11, r11
    49b6:	b1 f8       	bld	r11, 1
    49b8:	11 c0       	rjmp	.+34     	; 0x49dc <_Z18validateTimeStringPcPma+0xce>
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
    49ba:	bb 24       	eor	r11, r11
    49bc:	b3 94       	inc	r11
    49be:	0e c0       	rjmp	.+28     	; 0x49dc <_Z18validateTimeStringPcPma+0xce>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    49c0:	b1 2c       	mov	r11, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    49c2:	0f 2e       	mov	r0, r31
    49c4:	c1 2c       	mov	r12, r1
    49c6:	f6 e6       	ldi	r31, 0x66	; 102
    49c8:	df 2e       	mov	r13, r31
    49ca:	fe ee       	ldi	r31, 0xEE	; 238
    49cc:	ef 2e       	mov	r14, r31
    49ce:	ff e5       	ldi	r31, 0x5F	; 95
    49d0:	ff 2e       	mov	r15, r31
    49d2:	f0 2d       	mov	r31, r0
    49d4:	03 c0       	rjmp	.+6      	; 0x49dc <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
    49d6:	68 94       	set
    49d8:	bb 24       	eor	r11, r11
    49da:	b1 f8       	bld	r11, 1
	}
	
	if(len == 10)
    49dc:	ca 30       	cpi	r28, 0x0A	; 10
    49de:	d1 05       	cpc	r29, r1
    49e0:	39 f4       	brne	.+14     	; 0x49f0 <_Z18validateTimeStringPcPma+0xe2>
	{
		str[10] = '0';
    49e2:	80 e3       	ldi	r24, 0x30	; 48
    49e4:	f8 01       	movw	r30, r16
    49e6:	82 87       	std	Z+10, r24	; 0x0a
		str[11] = '0';
    49e8:	83 87       	std	Z+11, r24	; 0x0b
		str[12] = '\0';
    49ea:	14 86       	std	Z+12, r1	; 0x0c
		len = 12;
    49ec:	cc e0       	ldi	r28, 0x0C	; 12
    49ee:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if((len == 12) && (only_digits(str)))
    49f0:	cc 30       	cpi	r28, 0x0C	; 12
    49f2:	d1 05       	cpc	r29, r1
    49f4:	39 f4       	brne	.+14     	; 0x4a04 <_Z18validateTimeStringPcPma+0xf6>
    49f6:	c8 01       	movw	r24, r16
    49f8:	0e 94 c1 45 	call	0x8b82	; 0x8b82 <_Z11only_digitsPc>
    49fc:	88 23       	and	r24, r24
    49fe:	21 f0       	breq	.+8      	; 0x4a08 <_Z18validateTimeStringPcPma+0xfa>
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	03 c0       	rjmp	.+6      	; 0x4a0a <_Z18validateTimeStringPcPma+0xfc>
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	01 c0       	rjmp	.+2      	; 0x4a0a <_Z18validateTimeStringPcPma+0xfc>
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	88 23       	and	r24, r24
    4a0c:	09 f4       	brne	.+2      	; 0x4a10 <_Z18validateTimeStringPcPma+0x102>
    4a0e:	4b c0       	rjmp	.+150    	; 0x4aa6 <_Z18validateTimeStringPcPma+0x198>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    4a10:	b8 01       	movw	r22, r16
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	0e 94 4c 2c 	call	0x5898	; 0x5898 <RTC_String2Epoch>
    4a1a:	2b 01       	movw	r4, r22
    4a1c:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    4a1e:	aa 2d       	mov	r26, r10
    4a20:	aa 0c       	add	r10, r10
    4a22:	bb 0b       	sbc	r27, r27
    4a24:	20 e1       	ldi	r18, 0x10	; 16
    4a26:	3e e0       	ldi	r19, 0x0E	; 14
    4a28:	0e 94 9f 48 	call	0x913e	; 0x913e <__usmulhisi3>
    4a2c:	64 0d       	add	r22, r4
    4a2e:	75 1d       	adc	r23, r5
    4a30:	86 1d       	adc	r24, r6
    4a32:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    4a34:	c6 16       	cp	r12, r22
    4a36:	d7 06       	cpc	r13, r23
    4a38:	e8 06       	cpc	r14, r24
    4a3a:	f9 06       	cpc	r15, r25
    4a3c:	08 f4       	brcc	.+2      	; 0x4a40 <_Z18validateTimeStringPcPma+0x132>
    4a3e:	40 c0       	rjmp	.+128    	; 0x4ac0 <_Z18validateTimeStringPcPma+0x1b2>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    4a40:	f1 e0       	ldi	r31, 0x01	; 1
    4a42:	bf 12       	cpse	r11, r31
    4a44:	08 c0       	rjmp	.+16     	; 0x4a56 <_Z18validateTimeStringPcPma+0x148>
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
    4a46:	8c e1       	ldi	r24, 0x1C	; 28
    4a48:	93 e4       	ldi	r25, 0x43	; 67
    4a4a:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a4e:	60 e0       	ldi	r22, 0x00	; 0
    4a50:	70 e0       	ldi	r23, 0x00	; 0
    4a52:	cb 01       	movw	r24, r22
    4a54:	35 c0       	rjmp	.+106    	; 0x4ac0 <_Z18validateTimeStringPcPma+0x1b2>
		{
			if(validationType == 1)         /* start time validation */
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
			}
			else if(validationType == 2)    /* finish time validation */
    4a56:	22 e0       	ldi	r18, 0x02	; 2
    4a58:	b2 12       	cpse	r11, r18
    4a5a:	1d c0       	rjmp	.+58     	; 0x4a96 <_Z18validateTimeStringPcPma+0x188>
			{
				if(ep < g_current_epoch)
    4a5c:	00 91 32 46 	lds	r16, 0x4632	; 0x804632 <g_current_epoch>
    4a60:	10 91 33 46 	lds	r17, 0x4633	; 0x804633 <g_current_epoch+0x1>
    4a64:	20 91 34 46 	lds	r18, 0x4634	; 0x804634 <g_current_epoch+0x2>
    4a68:	30 91 35 46 	lds	r19, 0x4635	; 0x804635 <g_current_epoch+0x3>
    4a6c:	60 17       	cp	r22, r16
    4a6e:	71 07       	cpc	r23, r17
    4a70:	82 07       	cpc	r24, r18
    4a72:	93 07       	cpc	r25, r19
    4a74:	40 f4       	brcc	.+16     	; 0x4a86 <_Z18validateTimeStringPcPma+0x178>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
    4a76:	81 e3       	ldi	r24, 0x31	; 49
    4a78:	93 e4       	ldi	r25, 0x43	; 67
    4a7a:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a7e:	60 e0       	ldi	r22, 0x00	; 0
    4a80:	70 e0       	ldi	r23, 0x00	; 0
    4a82:	cb 01       	movw	r24, r22
    4a84:	1d c0       	rjmp	.+58     	; 0x4ac0 <_Z18validateTimeStringPcPma+0x1b2>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
				}
				else
				{
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
    4a86:	87 e4       	ldi	r24, 0x47	; 71
    4a88:	93 e4       	ldi	r25, 0x43	; 67
    4a8a:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a8e:	60 e0       	ldi	r22, 0x00	; 0
    4a90:	70 e0       	ldi	r23, 0x00	; 0
    4a92:	cb 01       	movw	r24, r22
    4a94:	15 c0       	rjmp	.+42     	; 0x4ac0 <_Z18validateTimeStringPcPma+0x1b2>
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
				}
			}
			else    /* current time validation */
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
    4a96:	82 e6       	ldi	r24, 0x62	; 98
    4a98:	93 e4       	ldi	r25, 0x43	; 67
    4a9a:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a9e:	60 e0       	ldi	r22, 0x00	; 0
    4aa0:	70 e0       	ldi	r23, 0x00	; 0
    4aa2:	cb 01       	movw	r24, r22
    4aa4:	0d c0       	rjmp	.+26     	; 0x4ac0 <_Z18validateTimeStringPcPma+0x1b2>
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
			}
		}
	}
	else if(len)
    4aa6:	cd 2b       	or	r28, r29
    4aa8:	41 f0       	breq	.+16     	; 0x4aba <_Z18validateTimeStringPcPma+0x1ac>
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
    4aaa:	86 e7       	ldi	r24, 0x76	; 118
    4aac:	93 e4       	ldi	r25, 0x43	; 67
    4aae:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4ab2:	60 e0       	ldi	r22, 0x00	; 0
    4ab4:	70 e0       	ldi	r23, 0x00	; 0
    4ab6:	cb 01       	movw	r24, r22
    4ab8:	03 c0       	rjmp	.+6      	; 0x4ac0 <_Z18validateTimeStringPcPma+0x1b2>
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	70 e0       	ldi	r23, 0x00	; 0
    4abe:	cb 01       	movw	r24, r22
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
	}

	return(valid);
}
    4ac0:	df 91       	pop	r29
    4ac2:	cf 91       	pop	r28
    4ac4:	1f 91       	pop	r17
    4ac6:	0f 91       	pop	r16
    4ac8:	ff 90       	pop	r15
    4aca:	ef 90       	pop	r14
    4acc:	df 90       	pop	r13
    4ace:	cf 90       	pop	r12
    4ad0:	bf 90       	pop	r11
    4ad2:	af 90       	pop	r10
    4ad4:	7f 90       	pop	r7
    4ad6:	6f 90       	pop	r6
    4ad8:	5f 90       	pop	r5
    4ada:	4f 90       	pop	r4
    4adc:	08 95       	ret

00004ade <_Z14reportTimeTillmmPKcS0_>:


BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    4ade:	2f 92       	push	r2
    4ae0:	3f 92       	push	r3
    4ae2:	4f 92       	push	r4
    4ae4:	5f 92       	push	r5
    4ae6:	6f 92       	push	r6
    4ae8:	7f 92       	push	r7
    4aea:	8f 92       	push	r8
    4aec:	9f 92       	push	r9
    4aee:	af 92       	push	r10
    4af0:	bf 92       	push	r11
    4af2:	cf 92       	push	r12
    4af4:	df 92       	push	r13
    4af6:	ef 92       	push	r14
    4af8:	ff 92       	push	r15
    4afa:	0f 93       	push	r16
    4afc:	1f 93       	push	r17
    4afe:	cf 93       	push	r28
    4b00:	df 93       	push	r29
    4b02:	cd b7       	in	r28, 0x3d	; 61
    4b04:	de b7       	in	r29, 0x3e	; 62
    4b06:	2c 97       	sbiw	r28, 0x0c	; 12
    4b08:	cd bf       	out	0x3d, r28	; 61
    4b0a:	de bf       	out	0x3e, r29	; 62
    4b0c:	2b 01       	movw	r4, r22
    4b0e:	3c 01       	movw	r6, r24
    4b10:	49 01       	movw	r8, r18
    4b12:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    4b14:	62 17       	cp	r22, r18
    4b16:	73 07       	cpc	r23, r19
    4b18:	84 07       	cpc	r24, r20
    4b1a:	95 07       	cpc	r25, r21
    4b1c:	48 f0       	brcs	.+18     	; 0x4b30 <_Z14reportTimeTillmmPKcS0_+0x52>
	{
		failure = TRUE;
		if(failMsg)
    4b1e:	e1 14       	cp	r14, r1
    4b20:	f1 04       	cpc	r15, r1
    4b22:	09 f4       	brne	.+2      	; 0x4b26 <_Z14reportTimeTillmmPKcS0_+0x48>
    4b24:	fd c0       	rjmp	.+506    	; 0x4d20 <_Z14reportTimeTillmmPKcS0_+0x242>
		{
			sb_send_string((char*)failMsg);
    4b26:	c7 01       	movw	r24, r14
    4b28:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    4b2c:	81 e0       	ldi	r24, 0x01	; 1
    4b2e:	f9 c0       	rjmp	.+498    	; 0x4d22 <_Z14reportTimeTillmmPKcS0_+0x244>
			sb_send_string((char*)failMsg);
		}
	}
	else
	{
		if(prefix)
    4b30:	01 15       	cp	r16, r1
    4b32:	11 05       	cpc	r17, r1
    4b34:	19 f0       	breq	.+6      	; 0x4b3c <_Z14reportTimeTillmmPKcS0_+0x5e>
		{
			sb_send_string((char*)prefix);
    4b36:	c8 01       	movw	r24, r16
    4b38:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
		}
		time_t dif = until - from;
    4b3c:	75 01       	movw	r14, r10
    4b3e:	64 01       	movw	r12, r8
    4b40:	c4 18       	sub	r12, r4
    4b42:	d5 08       	sbc	r13, r5
    4b44:	e6 08       	sbc	r14, r6
    4b46:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    4b48:	c7 01       	movw	r24, r14
    4b4a:	b6 01       	movw	r22, r12
    4b4c:	20 e8       	ldi	r18, 0x80	; 128
    4b4e:	33 e3       	ldi	r19, 0x33	; 51
    4b50:	41 ee       	ldi	r20, 0xE1	; 225
    4b52:	51 e0       	ldi	r21, 0x01	; 1
    4b54:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    4b58:	29 01       	movw	r4, r18
    4b5a:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    4b5c:	44 27       	eor	r20, r20
    4b5e:	55 27       	eor	r21, r21
    4b60:	60 e8       	ldi	r22, 0x80	; 128
    4b62:	73 e3       	ldi	r23, 0x33	; 51
    4b64:	81 ee       	ldi	r24, 0xE1	; 225
    4b66:	91 e0       	ldi	r25, 0x01	; 1
    4b68:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    4b6c:	c6 1a       	sub	r12, r22
    4b6e:	d7 0a       	sbc	r13, r23
    4b70:	e8 0a       	sbc	r14, r24
    4b72:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    4b74:	c7 01       	movw	r24, r14
    4b76:	b6 01       	movw	r22, r12
    4b78:	20 e8       	ldi	r18, 0x80	; 128
    4b7a:	31 e5       	ldi	r19, 0x51	; 81
    4b7c:	41 e0       	ldi	r20, 0x01	; 1
    4b7e:	50 e0       	ldi	r21, 0x00	; 0
    4b80:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    4b84:	49 01       	movw	r8, r18
    4b86:	5a 01       	movw	r10, r20
    4b88:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    4b8a:	44 27       	eor	r20, r20
    4b8c:	55 27       	eor	r21, r21
    4b8e:	60 e8       	ldi	r22, 0x80	; 128
    4b90:	71 e5       	ldi	r23, 0x51	; 81
    4b92:	81 e0       	ldi	r24, 0x01	; 1
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    4b9a:	c6 1a       	sub	r12, r22
    4b9c:	d7 0a       	sbc	r13, r23
    4b9e:	e8 0a       	sbc	r14, r24
    4ba0:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    4ba2:	c7 01       	movw	r24, r14
    4ba4:	b6 01       	movw	r22, r12
    4ba6:	20 e1       	ldi	r18, 0x10	; 16
    4ba8:	3e e0       	ldi	r19, 0x0E	; 14
    4baa:	40 e0       	ldi	r20, 0x00	; 0
    4bac:	50 e0       	ldi	r21, 0x00	; 0
    4bae:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    4bb2:	29 83       	std	Y+1, r18	; 0x01
    4bb4:	3a 83       	std	Y+2, r19	; 0x02
    4bb6:	4b 83       	std	Y+3, r20	; 0x03
    4bb8:	5c 83       	std	Y+4, r21	; 0x04
    4bba:	29 81       	ldd	r18, Y+1	; 0x01
    4bbc:	3a 81       	ldd	r19, Y+2	; 0x02
    4bbe:	29 87       	std	Y+9, r18	; 0x09
    4bc0:	3a 87       	std	Y+10, r19	; 0x0a
		hold -= (hours * HOUR);
    4bc2:	29 81       	ldd	r18, Y+1	; 0x01
    4bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    4bc6:	4b 81       	ldd	r20, Y+3	; 0x03
    4bc8:	5c 81       	ldd	r21, Y+4	; 0x04
    4bca:	44 27       	eor	r20, r20
    4bcc:	55 27       	eor	r21, r21
    4bce:	a0 e1       	ldi	r26, 0x10	; 16
    4bd0:	be e0       	ldi	r27, 0x0E	; 14
    4bd2:	0e 94 a6 48 	call	0x914c	; 0x914c <__muluhisi3>
    4bd6:	c6 1a       	sub	r12, r22
    4bd8:	d7 0a       	sbc	r13, r23
    4bda:	e8 0a       	sbc	r14, r24
    4bdc:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    4bde:	c7 01       	movw	r24, r14
    4be0:	b6 01       	movw	r22, r12
    4be2:	2c e3       	ldi	r18, 0x3C	; 60
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	40 e0       	ldi	r20, 0x00	; 0
    4be8:	50 e0       	ldi	r21, 0x00	; 0
    4bea:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    4bee:	2d 83       	std	Y+5, r18	; 0x05
    4bf0:	3e 83       	std	Y+6, r19	; 0x06
    4bf2:	4f 83       	std	Y+7, r20	; 0x07
    4bf4:	58 87       	std	Y+8, r21	; 0x08
    4bf6:	0d 81       	ldd	r16, Y+5	; 0x05
    4bf8:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    4bfa:	2c e3       	ldi	r18, 0x3C	; 60
    4bfc:	20 9f       	mul	r18, r16
    4bfe:	c0 01       	movw	r24, r0
    4c00:	21 9f       	mul	r18, r17
    4c02:	90 0d       	add	r25, r0
    4c04:	11 24       	eor	r1, r1
    4c06:	a6 01       	movw	r20, r12
    4c08:	48 1b       	sub	r20, r24
    4c0a:	59 0b       	sbc	r21, r25
    4c0c:	4b 87       	std	Y+11, r20	; 0x0b
    4c0e:	5c 87       	std	Y+12, r21	; 0x0c

		g_tempStr[0] = '\0';
    4c10:	10 92 95 45 	sts	0x4595, r1	; 0x804595 <_ZL9g_tempStr>

		if(years)
    4c14:	41 14       	cp	r4, r1
    4c16:	51 04       	cpc	r5, r1
    4c18:	b1 f0       	breq	.+44     	; 0x4c46 <_Z14reportTimeTillmmPKcS0_+0x168>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    4c1a:	5f 92       	push	r5
    4c1c:	4f 92       	push	r4
    4c1e:	8a e8       	ldi	r24, 0x8A	; 138
    4c20:	93 e4       	ldi	r25, 0x43	; 67
    4c22:	9f 93       	push	r25
    4c24:	8f 93       	push	r24
    4c26:	85 e9       	ldi	r24, 0x95	; 149
    4c28:	95 e4       	ldi	r25, 0x45	; 69
    4c2a:	9f 93       	push	r25
    4c2c:	8f 93       	push	r24
    4c2e:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
			sb_send_string(g_tempStr);
    4c32:	85 e9       	ldi	r24, 0x95	; 149
    4c34:	95 e4       	ldi	r25, 0x45	; 69
    4c36:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    4c3a:	0f 90       	pop	r0
    4c3c:	0f 90       	pop	r0
    4c3e:	0f 90       	pop	r0
    4c40:	0f 90       	pop	r0
    4c42:	0f 90       	pop	r0
    4c44:	0f 90       	pop	r0
		}

		if(days)
    4c46:	23 28       	or	r2, r3
    4c48:	b1 f0       	breq	.+44     	; 0x4c76 <_Z14reportTimeTillmmPKcS0_+0x198>
		{
			sprintf(g_tempStr, "%d days ", days);
    4c4a:	9f 92       	push	r9
    4c4c:	8f 92       	push	r8
    4c4e:	82 e9       	ldi	r24, 0x92	; 146
    4c50:	93 e4       	ldi	r25, 0x43	; 67
    4c52:	9f 93       	push	r25
    4c54:	8f 93       	push	r24
    4c56:	85 e9       	ldi	r24, 0x95	; 149
    4c58:	95 e4       	ldi	r25, 0x45	; 69
    4c5a:	9f 93       	push	r25
    4c5c:	8f 93       	push	r24
    4c5e:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
			sb_send_string(g_tempStr);
    4c62:	85 e9       	ldi	r24, 0x95	; 149
    4c64:	95 e4       	ldi	r25, 0x45	; 69
    4c66:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    4c6a:	0f 90       	pop	r0
    4c6c:	0f 90       	pop	r0
    4c6e:	0f 90       	pop	r0
    4c70:	0f 90       	pop	r0
    4c72:	0f 90       	pop	r0
    4c74:	0f 90       	pop	r0
		}

		if(hours)
    4c76:	89 85       	ldd	r24, Y+9	; 0x09
    4c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c7a:	89 2b       	or	r24, r25
    4c7c:	c1 f0       	breq	.+48     	; 0x4cae <_Z14reportTimeTillmmPKcS0_+0x1d0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    4c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c80:	9f 93       	push	r25
    4c82:	e9 81       	ldd	r30, Y+1	; 0x01
    4c84:	ef 93       	push	r30
    4c86:	8b e9       	ldi	r24, 0x9B	; 155
    4c88:	93 e4       	ldi	r25, 0x43	; 67
    4c8a:	9f 93       	push	r25
    4c8c:	8f 93       	push	r24
    4c8e:	85 e9       	ldi	r24, 0x95	; 149
    4c90:	95 e4       	ldi	r25, 0x45	; 69
    4c92:	9f 93       	push	r25
    4c94:	8f 93       	push	r24
    4c96:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
			sb_send_string(g_tempStr);
    4c9a:	85 e9       	ldi	r24, 0x95	; 149
    4c9c:	95 e4       	ldi	r25, 0x45	; 69
    4c9e:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    4ca2:	0f 90       	pop	r0
    4ca4:	0f 90       	pop	r0
    4ca6:	0f 90       	pop	r0
    4ca8:	0f 90       	pop	r0
    4caa:	0f 90       	pop	r0
    4cac:	0f 90       	pop	r0
		}

		if(minutes)
    4cae:	01 2b       	or	r16, r17
    4cb0:	c1 f0       	breq	.+48     	; 0x4ce2 <_Z14reportTimeTillmmPKcS0_+0x204>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    4cb2:	fe 81       	ldd	r31, Y+6	; 0x06
    4cb4:	ff 93       	push	r31
    4cb6:	2d 81       	ldd	r18, Y+5	; 0x05
    4cb8:	2f 93       	push	r18
    4cba:	83 ea       	ldi	r24, 0xA3	; 163
    4cbc:	93 e4       	ldi	r25, 0x43	; 67
    4cbe:	9f 93       	push	r25
    4cc0:	8f 93       	push	r24
    4cc2:	85 e9       	ldi	r24, 0x95	; 149
    4cc4:	95 e4       	ldi	r25, 0x45	; 69
    4cc6:	9f 93       	push	r25
    4cc8:	8f 93       	push	r24
    4cca:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
			sb_send_string(g_tempStr);
    4cce:	85 e9       	ldi	r24, 0x95	; 149
    4cd0:	95 e4       	ldi	r25, 0x45	; 69
    4cd2:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    4cd6:	0f 90       	pop	r0
    4cd8:	0f 90       	pop	r0
    4cda:	0f 90       	pop	r0
    4cdc:	0f 90       	pop	r0
    4cde:	0f 90       	pop	r0
    4ce0:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    4ce2:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ce4:	3f 93       	push	r19
    4ce6:	4b 85       	ldd	r20, Y+11	; 0x0b
    4ce8:	4f 93       	push	r20
    4cea:	8b ea       	ldi	r24, 0xAB	; 171
    4cec:	93 e4       	ldi	r25, 0x43	; 67
    4cee:	9f 93       	push	r25
    4cf0:	8f 93       	push	r24
    4cf2:	85 e9       	ldi	r24, 0x95	; 149
    4cf4:	95 e4       	ldi	r25, 0x45	; 69
    4cf6:	9f 93       	push	r25
    4cf8:	8f 93       	push	r24
    4cfa:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
		sb_send_string(g_tempStr);
    4cfe:	85 e9       	ldi	r24, 0x95	; 149
    4d00:	95 e4       	ldi	r25, 0x45	; 69
    4d02:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>

		sb_send_NewLine();
    4d06:	0e 94 a3 3a 	call	0x7546	; 0x7546 <sb_send_NewLine>
		g_tempStr[0] = '\0';
    4d0a:	e5 e9       	ldi	r30, 0x95	; 149
    4d0c:	f5 e4       	ldi	r31, 0x45	; 69
    4d0e:	10 82       	st	Z, r1
    4d10:	0f 90       	pop	r0
    4d12:	0f 90       	pop	r0
    4d14:	0f 90       	pop	r0
    4d16:	0f 90       	pop	r0
    4d18:	0f 90       	pop	r0
    4d1a:	0f 90       	pop	r0
}


BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	01 c0       	rjmp	.+2      	; 0x4d22 <_Z14reportTimeTillmmPKcS0_+0x244>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    4d20:	81 e0       	ldi	r24, 0x01	; 1
		sb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    4d22:	2c 96       	adiw	r28, 0x0c	; 12
    4d24:	cd bf       	out	0x3d, r28	; 61
    4d26:	de bf       	out	0x3e, r29	; 62
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	1f 91       	pop	r17
    4d2e:	0f 91       	pop	r16
    4d30:	ff 90       	pop	r15
    4d32:	ef 90       	pop	r14
    4d34:	df 90       	pop	r13
    4d36:	cf 90       	pop	r12
    4d38:	bf 90       	pop	r11
    4d3a:	af 90       	pop	r10
    4d3c:	9f 90       	pop	r9
    4d3e:	8f 90       	pop	r8
    4d40:	7f 90       	pop	r7
    4d42:	6f 90       	pop	r6
    4d44:	5f 90       	pop	r5
    4d46:	4f 90       	pop	r4
    4d48:	3f 90       	pop	r3
    4d4a:	2f 90       	pop	r2
    4d4c:	08 95       	ret

00004d4e <_Z23clockConfigurationCheckv>:



ConfigurationState_t clockConfigurationCheck(void)
{
    4d4e:	0f 93       	push	r16
    4d50:	1f 93       	push	r17
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
    4d52:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_event_finish_epoch>
    4d56:	90 91 26 46 	lds	r25, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    4d5a:	a0 91 27 46 	lds	r26, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    4d5e:	b0 91 28 46 	lds	r27, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    4d62:	81 15       	cp	r24, r1
    4d64:	26 e6       	ldi	r18, 0x66	; 102
    4d66:	92 07       	cpc	r25, r18
    4d68:	2e ee       	ldi	r18, 0xEE	; 238
    4d6a:	a2 07       	cpc	r26, r18
    4d6c:	2f e5       	ldi	r18, 0x5F	; 95
    4d6e:	b2 07       	cpc	r27, r18
    4d70:	d8 f1       	brcs	.+118    	; 0x4de8 <_Z23clockConfigurationCheckv+0x9a>
    4d72:	40 91 21 46 	lds	r20, 0x4621	; 0x804621 <g_event_start_epoch>
    4d76:	50 91 22 46 	lds	r21, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    4d7a:	60 91 23 46 	lds	r22, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    4d7e:	70 91 24 46 	lds	r23, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    4d82:	41 15       	cp	r20, r1
    4d84:	e6 e6       	ldi	r30, 0x66	; 102
    4d86:	5e 07       	cpc	r21, r30
    4d88:	ee ee       	ldi	r30, 0xEE	; 238
    4d8a:	6e 07       	cpc	r22, r30
    4d8c:	ef e5       	ldi	r30, 0x5F	; 95
    4d8e:	7e 07       	cpc	r23, r30
    4d90:	68 f1       	brcs	.+90     	; 0x4dec <_Z23clockConfigurationCheckv+0x9e>
    4d92:	00 91 32 46 	lds	r16, 0x4632	; 0x804632 <g_current_epoch>
    4d96:	10 91 33 46 	lds	r17, 0x4633	; 0x804633 <g_current_epoch+0x1>
    4d9a:	20 91 34 46 	lds	r18, 0x4634	; 0x804634 <g_current_epoch+0x2>
    4d9e:	30 91 35 46 	lds	r19, 0x4635	; 0x804635 <g_current_epoch+0x3>
    4da2:	01 15       	cp	r16, r1
    4da4:	e6 e6       	ldi	r30, 0x66	; 102
    4da6:	1e 07       	cpc	r17, r30
    4da8:	ee ee       	ldi	r30, 0xEE	; 238
    4daa:	2e 07       	cpc	r18, r30
    4dac:	ef e5       	ldi	r30, 0x5F	; 95
    4dae:	3e 07       	cpc	r19, r30
    4db0:	f8 f0       	brcs	.+62     	; 0x4df0 <_Z23clockConfigurationCheckv+0xa2>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
    4db2:	48 17       	cp	r20, r24
    4db4:	59 07       	cpc	r21, r25
    4db6:	6a 07       	cpc	r22, r26
    4db8:	7b 07       	cpc	r23, r27
    4dba:	e0 f4       	brcc	.+56     	; 0x4df4 <_Z23clockConfigurationCheckv+0xa6>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
    4dbc:	80 17       	cp	r24, r16
    4dbe:	91 07       	cpc	r25, r17
    4dc0:	a2 07       	cpc	r26, r18
    4dc2:	b3 07       	cpc	r27, r19
    4dc4:	c8 f0       	brcs	.+50     	; 0x4df8 <_Z23clockConfigurationCheckv+0xaa>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_start_epoch)       /* Event should be running */
    4dc6:	40 17       	cp	r20, r16
    4dc8:	51 07       	cpc	r21, r17
    4dca:	62 07       	cpc	r22, r18
    4dcc:	73 07       	cpc	r23, r19
    4dce:	30 f4       	brcc	.+12     	; 0x4ddc <_Z23clockConfigurationCheckv+0x8e>
	{
		if(g_transmissions_disabled)
    4dd0:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <g_transmissions_disabled>
    4dd4:	88 23       	and	r24, r24
    4dd6:	91 f0       	breq	.+36     	; 0x4dfc <_Z23clockConfigurationCheckv+0xae>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
    4dd8:	83 e0       	ldi	r24, 0x03	; 3
    4dda:	13 c0       	rjmp	.+38     	; 0x4e02 <_Z23clockConfigurationCheckv+0xb4>
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
		}
	}
	else if(!g_use_rtc_for_startstop)
    4ddc:	80 91 36 46 	lds	r24, 0x4636	; 0x804636 <g_use_rtc_for_startstop>
    4de0:	81 11       	cpse	r24, r1
    4de2:	0e c0       	rjmp	.+28     	; 0x4e00 <_Z23clockConfigurationCheckv+0xb2>
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
    4de4:	84 e0       	ldi	r24, 0x04	; 4
    4de6:	0d c0       	rjmp	.+26     	; 0x4e02 <_Z23clockConfigurationCheckv+0xb4>

ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
	{
		return(CONFIGURATION_ERROR);
    4de8:	82 e0       	ldi	r24, 0x02	; 2
    4dea:	0b c0       	rjmp	.+22     	; 0x4e02 <_Z23clockConfigurationCheckv+0xb4>
    4dec:	82 e0       	ldi	r24, 0x02	; 2
    4dee:	09 c0       	rjmp	.+18     	; 0x4e02 <_Z23clockConfigurationCheckv+0xb4>
    4df0:	82 e0       	ldi	r24, 0x02	; 2
    4df2:	07 c0       	rjmp	.+14     	; 0x4e02 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
	{
		return(CONFIGURATION_ERROR);
    4df4:	82 e0       	ldi	r24, 0x02	; 2
    4df6:	05 c0       	rjmp	.+10     	; 0x4e02 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
	{
		return(CONFIGURATION_ERROR);
    4df8:	82 e0       	ldi	r24, 0x02	; 2
    4dfa:	03 c0       	rjmp	.+6      	; 0x4e02 <_Z23clockConfigurationCheckv+0xb4>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
		}
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
    4dfc:	85 e0       	ldi	r24, 0x05	; 5
    4dfe:	01 c0       	rjmp	.+2      	; 0x4e02 <_Z23clockConfigurationCheckv+0xb4>
	else if(!g_use_rtc_for_startstop)
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
	}

	return(WAITING_FOR_START);  /* Future event hasn't started yet */
    4e00:	81 e0       	ldi	r24, 0x01	; 1
}
    4e02:	1f 91       	pop	r17
    4e04:	0f 91       	pop	r16
    4e06:	08 95       	ret

00004e08 <_Z18reportConfigErrorsv>:

void reportConfigErrors(void)
{
	g_current_epoch = ds3231_get_epoch(null);
    4e08:	80 e0       	ldi	r24, 0x00	; 0
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    4e10:	60 93 32 46 	sts	0x4632, r22	; 0x804632 <g_current_epoch>
    4e14:	70 93 33 46 	sts	0x4633, r23	; 0x804633 <g_current_epoch+0x1>
    4e18:	80 93 34 46 	sts	0x4634, r24	; 0x804634 <g_current_epoch+0x2>
    4e1c:	90 93 35 46 	sts	0x4635, r25	; 0x804635 <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    4e20:	80 91 eb 45 	lds	r24, 0x45EB	; 0x8045eb <g_messages_text+0x15>
    4e24:	81 11       	cpse	r24, r1
    4e26:	04 c0       	rjmp	.+8      	; 0x4e30 <_Z18reportConfigErrorsv+0x28>
	{
		sb_send_string(TEXT_SET_ID_TXT);
    4e28:	82 eb       	ldi	r24, 0xB2	; 178
    4e2a:	93 e4       	ldi	r25, 0x43	; 67
    4e2c:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    4e30:	80 91 32 46 	lds	r24, 0x4632	; 0x804632 <g_current_epoch>
    4e34:	90 91 33 46 	lds	r25, 0x4633	; 0x804633 <g_current_epoch+0x1>
    4e38:	a0 91 34 46 	lds	r26, 0x4634	; 0x804634 <g_current_epoch+0x2>
    4e3c:	b0 91 35 46 	lds	r27, 0x4635	; 0x804635 <g_current_epoch+0x3>
    4e40:	81 15       	cp	r24, r1
    4e42:	96 46       	sbci	r25, 0x66	; 102
    4e44:	ae 4e       	sbci	r26, 0xEE	; 238
    4e46:	bf 45       	sbci	r27, 0x5F	; 95
    4e48:	20 f4       	brcc	.+8      	; 0x4e52 <_Z18reportConfigErrorsv+0x4a>
	{
		sb_send_string(TEXT_SET_TIME_TXT);
    4e4a:	83 ed       	ldi	r24, 0xD3	; 211
    4e4c:	93 e4       	ldi	r25, 0x43	; 67
    4e4e:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    4e52:	40 91 25 46 	lds	r20, 0x4625	; 0x804625 <g_event_finish_epoch>
    4e56:	50 91 26 46 	lds	r21, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    4e5a:	60 91 27 46 	lds	r22, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    4e5e:	70 91 28 46 	lds	r23, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    4e62:	80 91 32 46 	lds	r24, 0x4632	; 0x804632 <g_current_epoch>
    4e66:	90 91 33 46 	lds	r25, 0x4633	; 0x804633 <g_current_epoch+0x1>
    4e6a:	a0 91 34 46 	lds	r26, 0x4634	; 0x804634 <g_current_epoch+0x2>
    4e6e:	b0 91 35 46 	lds	r27, 0x4635	; 0x804635 <g_current_epoch+0x3>
    4e72:	48 17       	cp	r20, r24
    4e74:	59 07       	cpc	r21, r25
    4e76:	6a 07       	cpc	r22, r26
    4e78:	7b 07       	cpc	r23, r27
    4e7a:	b0 f4       	brcc	.+44     	; 0x4ea8 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    4e7c:	40 91 21 46 	lds	r20, 0x4621	; 0x804621 <g_event_start_epoch>
    4e80:	50 91 22 46 	lds	r21, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    4e84:	60 91 23 46 	lds	r22, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    4e88:	70 91 24 46 	lds	r23, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    4e8c:	48 17       	cp	r20, r24
    4e8e:	59 07       	cpc	r21, r25
    4e90:	6a 07       	cpc	r22, r26
    4e92:	7b 07       	cpc	r23, r27
    4e94:	20 f4       	brcc	.+8      	; 0x4e9e <_Z18reportConfigErrorsv+0x96>
		{
			sb_send_string(TEXT_SET_START_TXT);
    4e96:	8b ef       	ldi	r24, 0xFB	; 251
    4e98:	93 e4       	ldi	r25, 0x43	; 67
    4e9a:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
		}

		sb_send_string(TEXT_SET_FINISH_TXT);
    4e9e:	81 e2       	ldi	r24, 0x21	; 33
    4ea0:	94 e4       	ldi	r25, 0x44	; 68
    4ea2:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    4ea6:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    4ea8:	40 91 21 46 	lds	r20, 0x4621	; 0x804621 <g_event_start_epoch>
    4eac:	50 91 22 46 	lds	r21, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    4eb0:	60 91 23 46 	lds	r22, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    4eb4:	70 91 24 46 	lds	r23, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    4eb8:	48 17       	cp	r20, r24
    4eba:	59 07       	cpc	r21, r25
    4ebc:	6a 07       	cpc	r22, r26
    4ebe:	7b 07       	cpc	r23, r27
    4ec0:	70 f4       	brcc	.+28     	; 0x4ede <_Z18reportConfigErrorsv+0xd6>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    4ec2:	41 15       	cp	r20, r1
    4ec4:	56 46       	sbci	r21, 0x66	; 102
    4ec6:	6e 4e       	sbci	r22, 0xEE	; 238
    4ec8:	7f 45       	sbci	r23, 0x5F	; 95
    4eca:	28 f4       	brcc	.+10     	; 0x4ed6 <_Z18reportConfigErrorsv+0xce>
		{
			sb_send_string(TEXT_SET_START_TXT);
    4ecc:	8b ef       	ldi	r24, 0xFB	; 251
    4ece:	93 e4       	ldi	r25, 0x43	; 67
    4ed0:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    4ed4:	08 95       	ret
		}
		else
		{
			sb_send_string((char*)"Event running...\n");
    4ed6:	88 e4       	ldi	r24, 0x48	; 72
    4ed8:	94 e4       	ldi	r25, 0x44	; 68
    4eda:	0e 94 b8 3a 	call	0x7570	; 0x7570 <sb_send_string>
    4ede:	08 95       	ret

00004ee0 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
    4ee0:	0f 93       	push	r16
    4ee2:	1f 93       	push	r17
    4ee4:	cf 93       	push	r28
    4ee6:	df 93       	push	r29
    4ee8:	ec 01       	movw	r28, r24
    4eea:	8b 01       	movw	r16, r22
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	39 f4       	brne	.+14     	; 0x4efe <_Z41__static_initialization_and_destruction_0ii+0x1e>
    4ef0:	6f 3f       	cpi	r22, 0xFF	; 255
    4ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef4:	21 f4       	brne	.+8      	; 0x4efe <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile BOOL g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { FALSE, FALSE, FALSE, FALSE, FALSE };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    4ef6:	80 e2       	ldi	r24, 0x20	; 32
    4ef8:	96 e4       	ldi	r25, 0x46	; 70
    4efa:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <_ZN13EepromManagerC1Ev>
    4efe:	cd 2b       	or	r28, r29
    4f00:	39 f4       	brne	.+14     	; 0x4f10 <_Z41__static_initialization_and_destruction_0ii+0x30>
    4f02:	0f 3f       	cpi	r16, 0xFF	; 255
    4f04:	1f 4f       	sbci	r17, 0xFF	; 255
    4f06:	21 f4       	brne	.+8      	; 0x4f10 <_Z41__static_initialization_and_destruction_0ii+0x30>
    4f08:	80 e2       	ldi	r24, 0x20	; 32
    4f0a:	96 e4       	ldi	r25, 0x46	; 70
    4f0c:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    4f10:	df 91       	pop	r29
    4f12:	cf 91       	pop	r28
    4f14:	1f 91       	pop	r17
    4f16:	0f 91       	pop	r16
    4f18:	08 95       	ret

00004f1a <_GLOBAL__sub_I_g_battery_type>:
    4f1a:	6f ef       	ldi	r22, 0xFF	; 255
    4f1c:	7f ef       	ldi	r23, 0xFF	; 255
    4f1e:	81 e0       	ldi	r24, 0x01	; 1
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <_Z41__static_initialization_and_destruction_0ii>
    4f26:	08 95       	ret

00004f28 <_GLOBAL__sub_D_g_battery_type>:
    4f28:	6f ef       	ldi	r22, 0xFF	; 255
    4f2a:	7f ef       	ldi	r23, 0xFF	; 255
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <_Z41__static_initialization_and_destruction_0ii>
    4f34:	08 95       	ret

00004f36 <_ZL9PORT_initv>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    4f36:	e0 e6       	ldi	r30, 0x60	; 96
    4f38:	f4 e0       	ldi	r31, 0x04	; 4
    4f3a:	82 89       	ldd	r24, Z+18	; 0x12
    4f3c:	88 7f       	andi	r24, 0xF8	; 248
    4f3e:	82 8b       	std	Z+18, r24	; 0x12
    4f40:	82 89       	ldd	r24, Z+18	; 0x12
    4f42:	84 60       	ori	r24, 0x04	; 4
    4f44:	82 8b       	std	Z+18, r24	; 0x12
    4f46:	83 89       	ldd	r24, Z+19	; 0x13
    4f48:	88 7f       	andi	r24, 0xF8	; 248
    4f4a:	83 8b       	std	Z+19, r24	; 0x13
    4f4c:	83 89       	ldd	r24, Z+19	; 0x13
    4f4e:	84 60       	ori	r24, 0x04	; 4
    4f50:	83 8b       	std	Z+19, r24	; 0x13
    4f52:	84 89       	ldd	r24, Z+20	; 0x14
    4f54:	88 7f       	andi	r24, 0xF8	; 248
    4f56:	84 8b       	std	Z+20, r24	; 0x14
    4f58:	84 89       	ldd	r24, Z+20	; 0x14
    4f5a:	84 60       	ori	r24, 0x04	; 4
    4f5c:	84 8b       	std	Z+20, r24	; 0x14
    4f5e:	85 89       	ldd	r24, Z+21	; 0x15
    4f60:	88 7f       	andi	r24, 0xF8	; 248
    4f62:	85 8b       	std	Z+21, r24	; 0x15
    4f64:	85 89       	ldd	r24, Z+21	; 0x15
    4f66:	84 60       	ori	r24, 0x04	; 4
    4f68:	85 8b       	std	Z+21, r24	; 0x15
    4f6a:	82 89       	ldd	r24, Z+18	; 0x12
    4f6c:	87 7f       	andi	r24, 0xF7	; 247
    4f6e:	82 8b       	std	Z+18, r24	; 0x12
    4f70:	83 89       	ldd	r24, Z+19	; 0x13
    4f72:	87 7f       	andi	r24, 0xF7	; 247
    4f74:	83 8b       	std	Z+19, r24	; 0x13
    4f76:	84 89       	ldd	r24, Z+20	; 0x14
    4f78:	87 7f       	andi	r24, 0xF7	; 247
    4f7a:	84 8b       	std	Z+20, r24	; 0x14
    4f7c:	85 89       	ldd	r24, Z+21	; 0x15
    4f7e:	87 7f       	andi	r24, 0xF7	; 247
    4f80:	85 8b       	std	Z+21, r24	; 0x15
    4f82:	08 95       	ret

00004f84 <_ZL10VREF0_initv>:
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    4f8a:	08 95       	ret

00004f8c <_ZL9ADC0_initb>:
    4f8c:	9a e0       	ldi	r25, 0x0A	; 10
    4f8e:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
    4f92:	88 23       	and	r24, r24
    4f94:	41 f0       	breq	.+16     	; 0x4fa6 <_ZL9ADC0_initb+0x1a>
    4f96:	e0 e0       	ldi	r30, 0x00	; 0
    4f98:	f6 e0       	ldi	r31, 0x06	; 6
    4f9a:	83 e0       	ldi	r24, 0x03	; 3
    4f9c:	80 83       	st	Z, r24
    4f9e:	81 e0       	ldi	r24, 0x01	; 1
    4fa0:	84 87       	std	Z+12, r24	; 0x0c
    4fa2:	82 87       	std	Z+10, r24	; 0x0a
    4fa4:	08 95       	ret
    4fa6:	e0 e0       	ldi	r30, 0x00	; 0
    4fa8:	f6 e0       	ldi	r31, 0x06	; 6
    4faa:	81 e0       	ldi	r24, 0x01	; 1
    4fac:	80 83       	st	Z, r24
    4fae:	14 86       	std	Z+12, r1	; 0x0c
    4fb0:	08 95       	ret

00004fb2 <_ZL16ADC0_SYSTEM_initb>:
    4fb2:	cf 93       	push	r28
    4fb4:	c8 2f       	mov	r28, r24
    4fb6:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZL9PORT_initv>
    4fba:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <_ZL10VREF0_initv>
    4fbe:	8c 2f       	mov	r24, r28
    4fc0:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <_ZL9ADC0_initb>
    4fc4:	81 e0       	ldi	r24, 0x01	; 1
    4fc6:	80 93 4c 46 	sts	0x464C, r24	; 0x80464c <_ZL17g_adc_initialized>
    4fca:	cf 91       	pop	r28
    4fcc:	08 95       	ret

00004fce <_ZL20ADC0_SYSTEM_shutdownv>:
    4fce:	e0 e0       	ldi	r30, 0x00	; 0
    4fd0:	f6 e0       	ldi	r31, 0x06	; 6
    4fd2:	14 86       	std	Z+12, r1	; 0x0c
    4fd4:	10 82       	st	Z, r1
    4fd6:	10 92 4c 46 	sts	0x464C, r1	; 0x80464c <_ZL17g_adc_initialized>
    4fda:	08 95       	ret

00004fdc <_Z41__static_initialization_and_destruction_0ii>:
    4fdc:	ef 92       	push	r14
    4fde:	ff 92       	push	r15
    4fe0:	0f 93       	push	r16
    4fe2:	1f 93       	push	r17
    4fe4:	cf 93       	push	r28
    4fe6:	df 93       	push	r29
    4fe8:	ec 01       	movw	r28, r24
    4fea:	7b 01       	movw	r14, r22
    4fec:	01 97       	sbiw	r24, 0x01	; 1
    4fee:	79 f4       	brne	.+30     	; 0x500e <_Z41__static_initialization_and_destruction_0ii+0x32>
    4ff0:	6f 3f       	cpi	r22, 0xFF	; 255
    4ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff4:	61 f4       	brne	.+24     	; 0x500e <_Z41__static_initialization_and_destruction_0ii+0x32>
    4ff6:	00 e0       	ldi	r16, 0x00	; 0
    4ff8:	10 e4       	ldi	r17, 0x40	; 64
    4ffa:	2c eb       	ldi	r18, 0xBC	; 188
    4ffc:	36 e4       	ldi	r19, 0x46	; 70
    4ffe:	40 e0       	ldi	r20, 0x00	; 0
    5000:	50 e0       	ldi	r21, 0x00	; 0
    5002:	69 e4       	ldi	r22, 0x49	; 73
    5004:	73 e4       	ldi	r23, 0x43	; 67
    5006:	8b e4       	ldi	r24, 0x4B	; 75
    5008:	96 e4       	ldi	r25, 0x46	; 70
    500a:	0e 94 4b 32 	call	0x6496	; 0x6496 <_ZN8GoertzelC1Eff>
    500e:	cd 2b       	or	r28, r29
    5010:	39 f4       	brne	.+14     	; 0x5020 <_Z41__static_initialization_and_destruction_0ii+0x44>
    5012:	ef 20       	and	r14, r15
    5014:	e0 94       	com	r14
    5016:	21 f4       	brne	.+8      	; 0x5020 <_Z41__static_initialization_and_destruction_0ii+0x44>
    5018:	8b e4       	ldi	r24, 0x4B	; 75
    501a:	96 e4       	ldi	r25, 0x46	; 70
    501c:	0e 94 9b 32 	call	0x6536	; 0x6536 <_ZN8GoertzelD1Ev>
    5020:	df 91       	pop	r29
    5022:	cf 91       	pop	r28
    5024:	1f 91       	pop	r17
    5026:	0f 91       	pop	r16
    5028:	ff 90       	pop	r15
    502a:	ef 90       	pop	r14
    502c:	08 95       	ret

0000502e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
    502e:	83 30       	cpi	r24, 0x03	; 3
    5030:	c9 f0       	breq	.+50     	; 0x5064 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
    5032:	28 f4       	brcc	.+10     	; 0x503e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x10>
    5034:	81 30       	cpi	r24, 0x01	; 1
    5036:	41 f0       	breq	.+16     	; 0x5048 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x1a>
    5038:	82 30       	cpi	r24, 0x02	; 2
    503a:	69 f0       	breq	.+26     	; 0x5056 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x28>
    503c:	28 c0       	rjmp	.+80     	; 0x508e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    503e:	84 30       	cpi	r24, 0x04	; 4
    5040:	c1 f0       	breq	.+48     	; 0x5072 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x44>
    5042:	85 30       	cpi	r24, 0x05	; 5
    5044:	e9 f0       	breq	.+58     	; 0x5080 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x52>
    5046:	23 c0       	rjmp	.+70     	; 0x508e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZL16ADC0_SYSTEM_initb>
    504e:	82 e0       	ldi	r24, 0x02	; 2
    5050:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5054:	08 95       	ret
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZL16ADC0_SYSTEM_initb>
    505c:	83 e0       	ldi	r24, 0x03	; 3
    505e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5062:	08 95       	ret
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZL16ADC0_SYSTEM_initb>
    506a:	84 e0       	ldi	r24, 0x04	; 4
    506c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5070:	08 95       	ret
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZL16ADC0_SYSTEM_initb>
    5078:	85 e0       	ldi	r24, 0x05	; 5
    507a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    507e:	08 95       	ret
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZL16ADC0_SYSTEM_initb>
    5086:	82 e4       	ldi	r24, 0x42	; 66
    5088:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    508c:	08 95       	ret
    508e:	0e 94 e7 27 	call	0x4fce	; 0x4fce <_ZL20ADC0_SYSTEM_shutdownv>
    5092:	08 95       	ret

00005094 <_Z9ADC0_readv>:
    5094:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    5098:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    509c:	08 95       	ret

0000509e <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    509e:	1f 92       	push	r1
    50a0:	0f 92       	push	r0
    50a2:	0f b6       	in	r0, 0x3f	; 63
    50a4:	0f 92       	push	r0
    50a6:	11 24       	eor	r1, r1
    50a8:	0b b6       	in	r0, 0x3b	; 59
    50aa:	0f 92       	push	r0
    50ac:	2f 93       	push	r18
    50ae:	3f 93       	push	r19
    50b0:	4f 93       	push	r20
    50b2:	5f 93       	push	r21
    50b4:	6f 93       	push	r22
    50b6:	7f 93       	push	r23
    50b8:	8f 93       	push	r24
    50ba:	9f 93       	push	r25
    50bc:	af 93       	push	r26
    50be:	bf 93       	push	r27
    50c0:	ef 93       	push	r30
    50c2:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    50c4:	0e 94 4a 28 	call	0x5094	; 0x5094 <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    50c8:	bc 01       	movw	r22, r24
    50ca:	8b e4       	ldi	r24, 0x4B	; 75
    50cc:	96 e4       	ldi	r25, 0x46	; 70
    50ce:	0e 94 a2 32 	call	0x6544	; 0x6544 <_ZN8Goertzel9DataPointEi>
    50d2:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    50d4:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    50d8:	ff 91       	pop	r31
    50da:	ef 91       	pop	r30
    50dc:	bf 91       	pop	r27
    50de:	af 91       	pop	r26
    50e0:	9f 91       	pop	r25
    50e2:	8f 91       	pop	r24
    50e4:	7f 91       	pop	r23
    50e6:	6f 91       	pop	r22
    50e8:	5f 91       	pop	r21
    50ea:	4f 91       	pop	r20
    50ec:	3f 91       	pop	r19
    50ee:	2f 91       	pop	r18
    50f0:	0f 90       	pop	r0
    50f2:	0b be       	out	0x3b, r0	; 59
    50f4:	0f 90       	pop	r0
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	0f 90       	pop	r0
    50fa:	1f 90       	pop	r1
    50fc:	18 95       	reti

000050fe <_GLOBAL__sub_I_g_activeADCChannel>:
    50fe:	6f ef       	ldi	r22, 0xFF	; 255
    5100:	7f ef       	ldi	r23, 0xFF	; 255
    5102:	81 e0       	ldi	r24, 0x01	; 1
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <_Z41__static_initialization_and_destruction_0ii>
    510a:	08 95       	ret

0000510c <_GLOBAL__sub_D_g_activeADCChannel>:
    510c:	6f ef       	ldi	r22, 0xFF	; 255
    510e:	7f ef       	ldi	r23, 0xFF	; 255
    5110:	80 e0       	ldi	r24, 0x00	; 0
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <_Z41__static_initialization_and_destruction_0ii>
    5118:	08 95       	ret

0000511a <_Z10fet_driverb>:
{
} //~binio

void fet_driver(bool state)
{
	if(state == ON)
    511a:	88 23       	and	r24, r24
    511c:	21 f0       	breq	.+8      	; 0x5126 <_Z10fet_driverb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    511e:	81 b1       	in	r24, 0x01	; 1
    5120:	88 60       	ori	r24, 0x08	; 8
    5122:	81 b9       	out	0x01, r24	; 1
    5124:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5126:	81 b1       	in	r24, 0x01	; 1
    5128:	87 7f       	andi	r24, 0xF7	; 247
    512a:	81 b9       	out	0x01, r24	; 1
    512c:	08 95       	ret

0000512e <_Z10wifi_powerb>:
}


void wifi_power(bool state)
{
	if(state == ON)
    512e:	88 23       	and	r24, r24
    5130:	21 f0       	breq	.+8      	; 0x513a <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    5132:	81 b1       	in	r24, 0x01	; 1
    5134:	80 62       	ori	r24, 0x20	; 32
    5136:	81 b9       	out	0x01, r24	; 1
    5138:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    513a:	81 b1       	in	r24, 0x01	; 1
    513c:	8f 7d       	andi	r24, 0xDF	; 223
    513e:	81 b9       	out	0x01, r24	; 1
    5140:	08 95       	ret

00005142 <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    5142:	88 23       	and	r24, r24
    5144:	21 f0       	breq	.+8      	; 0x514e <_Z10wifi_resetb+0xc>
    5146:	81 b1       	in	r24, 0x01	; 1
    5148:	8f 7b       	andi	r24, 0xBF	; 191
    514a:	81 b9       	out	0x01, r24	; 1
    514c:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    514e:	81 b1       	in	r24, 0x01	; 1
    5150:	80 64       	ori	r24, 0x40	; 64
    5152:	81 b9       	out	0x01, r24	; 1
    5154:	08 95       	ret

00005156 <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    5156:	8e b1       	in	r24, 0x0e	; 14
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	88 0f       	add	r24, r24
    515c:	89 2f       	mov	r24, r25
    515e:	88 1f       	adc	r24, r24
    5160:	99 0b       	sbc	r25, r25
}

bool wifiPresent(void)
{
	return(PORTD_get_pin_level(WIFI_MODULE_DETECT));
}
    5162:	81 70       	andi	r24, 0x01	; 1
    5164:	08 95       	ret

00005166 <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    5166:	1f 92       	push	r1
    5168:	0f 92       	push	r0
    516a:	0f b6       	in	r0, 0x3f	; 63
    516c:	0f 92       	push	r0
    516e:	11 24       	eor	r1, r1
    5170:	8f 93       	push	r24
    5172:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    5174:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    5178:	88 23       	and	r24, r24
    517a:	4c f4       	brge	.+18     	; 0x518e <__vector_29+0x28>
	{
		count++;
    517c:	80 91 4f 46 	lds	r24, 0x464F	; 0x80464f <_ZZ11__vector_29E5count>
    5180:	90 91 50 46 	lds	r25, 0x4650	; 0x804650 <_ZZ11__vector_29E5count+0x1>
    5184:	01 96       	adiw	r24, 0x01	; 1
    5186:	80 93 4f 46 	sts	0x464F, r24	; 0x80464f <_ZZ11__vector_29E5count>
    518a:	90 93 50 46 	sts	0x4650, r25	; 0x804650 <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    518e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    5192:	84 ff       	sbrs	r24, 4
    5194:	09 c0       	rjmp	.+18     	; 0x51a8 <__vector_29+0x42>
	{
		count++;
    5196:	80 91 4f 46 	lds	r24, 0x464F	; 0x80464f <_ZZ11__vector_29E5count>
    519a:	90 91 50 46 	lds	r25, 0x4650	; 0x804650 <_ZZ11__vector_29E5count+0x1>
    519e:	01 96       	adiw	r24, 0x01	; 1
    51a0:	80 93 4f 46 	sts	0x464F, r24	; 0x80464f <_ZZ11__vector_29E5count>
    51a4:	90 93 50 46 	sts	0x4650, r25	; 0x804650 <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    51a8:	8f ef       	ldi	r24, 0xFF	; 255
    51aa:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    51ae:	9f 91       	pop	r25
    51b0:	8f 91       	pop	r24
    51b2:	0f 90       	pop	r0
    51b4:	0f be       	out	0x3f, r0	; 63
    51b6:	0f 90       	pop	r0
    51b8:	1f 90       	pop	r1
    51ba:	18 95       	reti

000051bc <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    51bc:	1f 92       	push	r1
    51be:	0f 92       	push	r0
    51c0:	0f b6       	in	r0, 0x3f	; 63
    51c2:	0f 92       	push	r0
    51c4:	11 24       	eor	r1, r1
    51c6:	8f 93       	push	r24
    51c8:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    51ca:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    51ce:	82 ff       	sbrs	r24, 2
    51d0:	09 c0       	rjmp	.+18     	; 0x51e4 <__vector_6+0x28>
	{
		count++;
    51d2:	80 91 4d 46 	lds	r24, 0x464D	; 0x80464d <_ZZ10__vector_6E5count>
    51d6:	90 91 4e 46 	lds	r25, 0x464E	; 0x80464e <_ZZ10__vector_6E5count+0x1>
    51da:	01 96       	adiw	r24, 0x01	; 1
    51dc:	80 93 4d 46 	sts	0x464D, r24	; 0x80464d <_ZZ10__vector_6E5count>
    51e0:	90 93 4e 46 	sts	0x464E, r25	; 0x80464e <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    51e4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    51e8:	84 ff       	sbrs	r24, 4
    51ea:	09 c0       	rjmp	.+18     	; 0x51fe <__vector_6+0x42>
	{
		count++;
    51ec:	80 91 4d 46 	lds	r24, 0x464D	; 0x80464d <_ZZ10__vector_6E5count>
    51f0:	90 91 4e 46 	lds	r25, 0x464E	; 0x80464e <_ZZ10__vector_6E5count+0x1>
    51f4:	01 96       	adiw	r24, 0x01	; 1
    51f6:	80 93 4d 46 	sts	0x464D, r24	; 0x80464d <_ZZ10__vector_6E5count>
    51fa:	90 93 4e 46 	sts	0x464E, r25	; 0x80464e <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    51fe:	8f ef       	ldi	r24, 0xFF	; 255
    5200:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    5204:	9f 91       	pop	r25
    5206:	8f 91       	pop	r24
    5208:	0f 90       	pop	r0
    520a:	0f be       	out	0x3f, r0	; 63
    520c:	0f 90       	pop	r0
    520e:	1f 90       	pop	r1
    5210:	18 95       	reti

00005212 <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    5212:	80 b1       	in	r24, 0x00	; 0
    5214:	8b 7f       	andi	r24, 0xFB	; 251
    5216:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5218:	e2 e1       	ldi	r30, 0x12	; 18
    521a:	f4 e0       	ldi	r31, 0x04	; 4
    521c:	80 81       	ld	r24, Z
    521e:	88 7f       	andi	r24, 0xF8	; 248
    5220:	82 60       	ori	r24, 0x02	; 2
    5222:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5224:	80 b1       	in	r24, 0x00	; 0
    5226:	88 60       	ori	r24, 0x08	; 8
    5228:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    522a:	81 b1       	in	r24, 0x01	; 1
    522c:	87 7f       	andi	r24, 0xF7	; 247
    522e:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    5230:	80 b1       	in	r24, 0x00	; 0
    5232:	8f 7e       	andi	r24, 0xEF	; 239
    5234:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5236:	e4 e1       	ldi	r30, 0x14	; 20
    5238:	f4 e0       	ldi	r31, 0x04	; 4
    523a:	80 81       	ld	r24, Z
    523c:	88 60       	ori	r24, 0x08	; 8
    523e:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5240:	80 81       	ld	r24, Z
    5242:	88 7f       	andi	r24, 0xF8	; 248
    5244:	83 60       	ori	r24, 0x03	; 3
    5246:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5248:	80 b1       	in	r24, 0x00	; 0
    524a:	80 62       	ori	r24, 0x20	; 32
    524c:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    524e:	81 b1       	in	r24, 0x01	; 1
    5250:	8f 7d       	andi	r24, 0xDF	; 223
    5252:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5254:	80 b1       	in	r24, 0x00	; 0
    5256:	80 64       	ori	r24, 0x40	; 64
    5258:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    525a:	81 b1       	in	r24, 0x01	; 1
    525c:	8f 7b       	andi	r24, 0xBF	; 191
    525e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5260:	80 b1       	in	r24, 0x00	; 0
    5262:	80 68       	ori	r24, 0x80	; 128
    5264:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5266:	81 b1       	in	r24, 0x01	; 1
    5268:	8f 77       	andi	r24, 0x7F	; 127
    526a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    526c:	84 b1       	in	r24, 0x04	; 4
    526e:	81 60       	ori	r24, 0x01	; 1
    5270:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5272:	85 b1       	in	r24, 0x05	; 5
    5274:	8e 7f       	andi	r24, 0xFE	; 254
    5276:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5278:	84 b1       	in	r24, 0x04	; 4
    527a:	82 60       	ori	r24, 0x02	; 2
    527c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    527e:	85 b1       	in	r24, 0x05	; 5
    5280:	8d 7f       	andi	r24, 0xFD	; 253
    5282:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5284:	84 b1       	in	r24, 0x04	; 4
    5286:	80 61       	ori	r24, 0x10	; 16
    5288:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    528a:	85 b1       	in	r24, 0x05	; 5
    528c:	8f 7e       	andi	r24, 0xEF	; 239
    528e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5290:	84 b1       	in	r24, 0x04	; 4
    5292:	80 62       	ori	r24, 0x20	; 32
    5294:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5296:	85 b1       	in	r24, 0x05	; 5
    5298:	8f 7d       	andi	r24, 0xDF	; 223
    529a:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    529c:	88 b1       	in	r24, 0x08	; 8
    529e:	8f 7e       	andi	r24, 0xEF	; 239
    52a0:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    52a2:	88 b1       	in	r24, 0x08	; 8
    52a4:	80 62       	ori	r24, 0x20	; 32
    52a6:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    52a8:	89 b1       	in	r24, 0x09	; 9
    52aa:	8f 7d       	andi	r24, 0xDF	; 223
    52ac:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    52ae:	88 b1       	in	r24, 0x08	; 8
    52b0:	80 64       	ori	r24, 0x40	; 64
    52b2:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    52b4:	89 b1       	in	r24, 0x09	; 9
    52b6:	8f 7b       	andi	r24, 0xBF	; 191
    52b8:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    52ba:	88 b1       	in	r24, 0x08	; 8
    52bc:	8f 77       	andi	r24, 0x7F	; 127
    52be:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    52c0:	e7 e5       	ldi	r30, 0x57	; 87
    52c2:	f4 e0       	ldi	r31, 0x04	; 4
    52c4:	80 81       	ld	r24, Z
    52c6:	88 60       	ori	r24, 0x08	; 8
    52c8:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    52ca:	80 81       	ld	r24, Z
    52cc:	88 7f       	andi	r24, 0xF8	; 248
    52ce:	83 60       	ori	r24, 0x03	; 3
    52d0:	80 83       	st	Z, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    52d2:	8c b1       	in	r24, 0x0c	; 12
    52d4:	8e 7f       	andi	r24, 0xFE	; 254
    52d6:	8c b9       	out	0x0c, r24	; 12
    52d8:	8c b1       	in	r24, 0x0c	; 12
    52da:	8d 7f       	andi	r24, 0xFD	; 253
    52dc:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    52de:	a1 e7       	ldi	r26, 0x71	; 113
    52e0:	b4 e0       	ldi	r27, 0x04	; 4
    52e2:	8c 91       	ld	r24, X
    52e4:	88 60       	ori	r24, 0x08	; 8
    52e6:	8c 93       	st	X, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    52e8:	8c 91       	ld	r24, X
    52ea:	88 7f       	andi	r24, 0xF8	; 248
    52ec:	83 60       	ori	r24, 0x03	; 3
    52ee:	8c 93       	st	X, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    52f0:	8c b1       	in	r24, 0x0c	; 12
    52f2:	8f 77       	andi	r24, 0x7F	; 127
    52f4:	8c b9       	out	0x0c, r24	; 12
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    52f6:	80 81       	ld	r24, Z
    52f8:	87 7f       	andi	r24, 0xF7	; 247
    52fa:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    52fc:	e0 e9       	ldi	r30, 0x90	; 144
    52fe:	f4 e0       	ldi	r31, 0x04	; 4
    5300:	80 81       	ld	r24, Z
    5302:	88 60       	ori	r24, 0x08	; 8
    5304:	80 83       	st	Z, r24
    5306:	e1 e9       	ldi	r30, 0x91	; 145
    5308:	f4 e0       	ldi	r31, 0x04	; 4
    530a:	80 81       	ld	r24, Z
    530c:	88 60       	ori	r24, 0x08	; 8
    530e:	80 83       	st	Z, r24
    5310:	e2 e9       	ldi	r30, 0x92	; 146
    5312:	f4 e0       	ldi	r31, 0x04	; 4
    5314:	80 81       	ld	r24, Z
    5316:	88 60       	ori	r24, 0x08	; 8
    5318:	80 83       	st	Z, r24
    531a:	e3 e9       	ldi	r30, 0x93	; 147
    531c:	f4 e0       	ldi	r31, 0x04	; 4
    531e:	80 81       	ld	r24, Z
    5320:	88 60       	ori	r24, 0x08	; 8
    5322:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    5324:	e2 eb       	ldi	r30, 0xB2	; 178
    5326:	f4 e0       	ldi	r31, 0x04	; 4
    5328:	80 81       	ld	r24, Z
    532a:	88 60       	ori	r24, 0x08	; 8
    532c:	80 83       	st	Z, r24
    532e:	e3 eb       	ldi	r30, 0xB3	; 179
    5330:	f4 e0       	ldi	r31, 0x04	; 4
    5332:	80 81       	ld	r24, Z
    5334:	88 60       	ori	r24, 0x08	; 8
    5336:	80 83       	st	Z, r24
    5338:	e4 eb       	ldi	r30, 0xB4	; 180
    533a:	f4 e0       	ldi	r31, 0x04	; 4
    533c:	80 81       	ld	r24, Z
    533e:	88 60       	ori	r24, 0x08	; 8
    5340:	80 83       	st	Z, r24
    5342:	e5 eb       	ldi	r30, 0xB5	; 181
    5344:	f4 e0       	ldi	r31, 0x04	; 4
    5346:	80 81       	ld	r24, Z
    5348:	88 60       	ori	r24, 0x08	; 8
    534a:	80 83       	st	Z, r24
    534c:	08 95       	ret

0000534e <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    534e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    5352:	80 e0       	ldi	r24, 0x00	; 0
    5354:	08 95       	ret

00005356 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    5356:	44 e2       	ldi	r20, 0x24	; 36
    5358:	68 ed       	ldi	r22, 0xD8	; 216
    535a:	88 e6       	ldi	r24, 0x68	; 104
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	0e 94 22 39 	call	0x7244	; 0x7244 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    5362:	80 e0       	ldi	r24, 0x00	; 0
    5364:	08 95       	ret

00005366 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    5366:	78 94       	sei

	return 0;
}
    5368:	80 e0       	ldi	r24, 0x00	; 0
    536a:	08 95       	ret

0000536c <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    536c:	83 e0       	ldi	r24, 0x03	; 3
    536e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
    5372:	6a e0       	ldi	r22, 0x0A	; 10
    5374:	70 e0       	ldi	r23, 0x00	; 0
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	0e 94 77 42 	call	0x84ee	; 0x84ee <util_delay_ms>
    537e:	81 11       	cpse	r24, r1
    5380:	f8 cf       	rjmp	.-16     	; 0x5372 <_ZL9VREF_initv+0x6>
}
    5382:	08 95       	ret

00005384 <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    5384:	28 2f       	mov	r18, r24
    5386:	22 95       	swap	r18
    5388:	22 0f       	add	r18, r18
    538a:	22 0f       	add	r18, r18
    538c:	20 7c       	andi	r18, 0xC0	; 192
    538e:	e0 ea       	ldi	r30, 0xA0	; 160
    5390:	f6 e0       	ldi	r31, 0x06	; 6
    5392:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    5394:	96 95       	lsr	r25
    5396:	87 95       	ror	r24
    5398:	96 95       	lsr	r25
    539a:	87 95       	ror	r24
    539c:	83 83       	std	Z+3, r24	; 0x03
    539e:	08 95       	ret

000053a0 <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    53a0:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    53a4:	e0 e6       	ldi	r30, 0x60	; 96
    53a6:	f4 e0       	ldi	r31, 0x04	; 4
    53a8:	86 89       	ldd	r24, Z+22	; 0x16
    53aa:	88 7f       	andi	r24, 0xF8	; 248
    53ac:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    53ae:	86 89       	ldd	r24, Z+22	; 0x16
    53b0:	84 60       	ori	r24, 0x04	; 4
    53b2:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    53b4:	86 89       	ldd	r24, Z+22	; 0x16
    53b6:	87 7f       	andi	r24, 0xF7	; 247
    53b8:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    53ba:	81 ec       	ldi	r24, 0xC1	; 193
    53bc:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    53c0:	80 e0       	ldi	r24, 0x00	; 0
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	0e 94 c2 29 	call	0x5384	; 0x5384 <_Z11DAC0_setValj>
    53c8:	08 95       	ret

000053ca <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	88 30       	cpi	r24, 0x08	; 8
    53ce:	48 f4       	brcc	.+18     	; 0x53e2 <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    53d0:	e8 2f       	mov	r30, r24
    53d2:	f0 e0       	ldi	r31, 0x00	; 0
    53d4:	e0 5f       	subi	r30, 0xF0	; 240
    53d6:	fb 4f       	sbci	r31, 0xFB	; 251
    53d8:	90 81       	ld	r25, Z
    53da:	98 60       	ori	r25, 0x08	; 8
    53dc:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    53de:	8f 5f       	subi	r24, 0xFF	; 255
    53e0:	f5 cf       	rjmp	.-22     	; 0x53cc <mcu_init+0x2>
    53e2:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53e4:	88 30       	cpi	r24, 0x08	; 8
    53e6:	48 f4       	brcc	.+18     	; 0x53fa <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    53e8:	e8 2f       	mov	r30, r24
    53ea:	f0 e0       	ldi	r31, 0x00	; 0
    53ec:	e0 5d       	subi	r30, 0xD0	; 208
    53ee:	fb 4f       	sbci	r31, 0xFB	; 251
    53f0:	90 81       	ld	r25, Z
    53f2:	98 60       	ori	r25, 0x08	; 8
    53f4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53f6:	8f 5f       	subi	r24, 0xFF	; 255
    53f8:	f5 cf       	rjmp	.-22     	; 0x53e4 <mcu_init+0x1a>
    53fa:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53fc:	88 30       	cpi	r24, 0x08	; 8
    53fe:	48 f4       	brcc	.+18     	; 0x5412 <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5400:	e8 2f       	mov	r30, r24
    5402:	f0 e0       	ldi	r31, 0x00	; 0
    5404:	e0 5b       	subi	r30, 0xB0	; 176
    5406:	fb 4f       	sbci	r31, 0xFB	; 251
    5408:	90 81       	ld	r25, Z
    540a:	98 60       	ori	r25, 0x08	; 8
    540c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    540e:	8f 5f       	subi	r24, 0xFF	; 255
    5410:	f5 cf       	rjmp	.-22     	; 0x53fc <mcu_init+0x32>
    5412:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5414:	88 30       	cpi	r24, 0x08	; 8
    5416:	48 f4       	brcc	.+18     	; 0x542a <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5418:	e8 2f       	mov	r30, r24
    541a:	f0 e0       	ldi	r31, 0x00	; 0
    541c:	e0 59       	subi	r30, 0x90	; 144
    541e:	fb 4f       	sbci	r31, 0xFB	; 251
    5420:	90 81       	ld	r25, Z
    5422:	98 60       	ori	r25, 0x08	; 8
    5424:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5426:	8f 5f       	subi	r24, 0xFF	; 255
    5428:	f5 cf       	rjmp	.-22     	; 0x5414 <mcu_init+0x4a>
    542a:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    542c:	88 30       	cpi	r24, 0x08	; 8
    542e:	48 f4       	brcc	.+18     	; 0x5442 <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5430:	e8 2f       	mov	r30, r24
    5432:	f0 e0       	ldi	r31, 0x00	; 0
    5434:	e0 57       	subi	r30, 0x70	; 112
    5436:	fb 4f       	sbci	r31, 0xFB	; 251
    5438:	90 81       	ld	r25, Z
    543a:	98 60       	ori	r25, 0x08	; 8
    543c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    543e:	8f 5f       	subi	r24, 0xFF	; 255
    5440:	f5 cf       	rjmp	.-22     	; 0x542c <mcu_init+0x62>
    5442:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5444:	88 30       	cpi	r24, 0x08	; 8
    5446:	48 f4       	brcc	.+18     	; 0x545a <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5448:	e8 2f       	mov	r30, r24
    544a:	f0 e0       	ldi	r31, 0x00	; 0
    544c:	e0 55       	subi	r30, 0x50	; 80
    544e:	fb 4f       	sbci	r31, 0xFB	; 251
    5450:	90 81       	ld	r25, Z
    5452:	98 60       	ori	r25, 0x08	; 8
    5454:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5456:	8f 5f       	subi	r24, 0xFF	; 255
    5458:	f5 cf       	rjmp	.-22     	; 0x5444 <mcu_init+0x7a>
    545a:	08 95       	ret

0000545c <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    545c:	0e 94 e5 29 	call	0x53ca	; 0x53ca <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    5460:	0e 94 ab 29 	call	0x5356	; 0x5356 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
    5464:	0e 94 5a 42 	call	0x84b4	; 0x84b4 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    5468:	0e 94 b3 29 	call	0x5366	; 0x5366 <CPUINT_init>
	BINIO_init();
    546c:	0e 94 09 29 	call	0x5212	; 0x5212 <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5470:	88 b1       	in	r24, 0x08	; 8
    5472:	80 64       	ori	r24, 0x40	; 64
    5474:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    5476:	89 b1       	in	r24, 0x09	; 9
    5478:	80 64       	ori	r24, 0x40	; 64
    547a:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    547c:	0e 94 58 42 	call	0x84b0	; 0x84b0 <SLPCTRL_init>
	
	DAC0_init();
    5480:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <_Z9DAC0_initv>

	linkbus_init(LB_BAUD, LINKBUS_USART);
    5484:	44 e0       	ldi	r20, 0x04	; 4
    5486:	60 e8       	ldi	r22, 0x80	; 128
    5488:	75 e2       	ldi	r23, 0x25	; 37
    548a:	80 e0       	ldi	r24, 0x00	; 0
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <_Z12linkbus_initm14USART_Number_t>
	serialbus_init(SB_BAUD, SERIALBUS_USART);
    5492:	41 e0       	ldi	r20, 0x01	; 1
    5494:	60 e8       	ldi	r22, 0x80	; 128
    5496:	75 e2       	ldi	r23, 0x25	; 37
    5498:	80 e0       	ldi	r24, 0x00	; 0
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	0e 94 2b 3a 	call	0x7456	; 0x7456 <serialbus_init>

	BOD_init();
    54a0:	0e 94 a7 29 	call	0x534e	; 0x534e <BOD_init>
    54a4:	08 95       	ret

000054a6 <_Z7bcd2dech>:
		else
		{
			data[0] = 0x04;
			I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, data, 1);
		}
	}
    54a6:	28 2f       	mov	r18, r24
    54a8:	30 e0       	ldi	r19, 0x00	; 0
    54aa:	35 95       	asr	r19
    54ac:	27 95       	ror	r18
    54ae:	35 95       	asr	r19
    54b0:	27 95       	ror	r18
    54b2:	35 95       	asr	r19
    54b4:	27 95       	ror	r18
    54b6:	35 95       	asr	r19
    54b8:	27 95       	ror	r18
    54ba:	22 0f       	add	r18, r18
    54bc:	92 2f       	mov	r25, r18
    54be:	99 0f       	add	r25, r25
    54c0:	99 0f       	add	r25, r25
    54c2:	29 0f       	add	r18, r25
    54c4:	8f 70       	andi	r24, 0x0F	; 15
    54c6:	82 0f       	add	r24, r18
    54c8:	08 95       	ret

000054ca <_Z7dec2bcdh>:
    54ca:	2d ec       	ldi	r18, 0xCD	; 205
    54cc:	82 9f       	mul	r24, r18
    54ce:	21 2d       	mov	r18, r1
    54d0:	11 24       	eor	r1, r1
    54d2:	92 2f       	mov	r25, r18
    54d4:	96 95       	lsr	r25
    54d6:	96 95       	lsr	r25
    54d8:	96 95       	lsr	r25
    54da:	99 0f       	add	r25, r25
    54dc:	39 2f       	mov	r19, r25
    54de:	33 0f       	add	r19, r19
    54e0:	33 0f       	add	r19, r19
    54e2:	93 0f       	add	r25, r19
    54e4:	89 1b       	sub	r24, r25
    54e6:	98 2f       	mov	r25, r24
    54e8:	26 95       	lsr	r18
    54ea:	26 95       	lsr	r18
    54ec:	26 95       	lsr	r18
    54ee:	80 e1       	ldi	r24, 0x10	; 16
    54f0:	28 9f       	mul	r18, r24
    54f2:	90 01       	movw	r18, r0
    54f4:	11 24       	eor	r1, r1
    54f6:	89 2f       	mov	r24, r25
    54f8:	82 2b       	or	r24, r18
    54fa:	08 95       	ret

000054fc <_Z8char2bcdPc>:
    54fc:	fc 01       	movw	r30, r24
    54fe:	20 81       	ld	r18, Z
    5500:	81 81       	ldd	r24, Z+1	; 0x01
    5502:	f0 e1       	ldi	r31, 0x10	; 16
    5504:	2f 9f       	mul	r18, r31
    5506:	80 0d       	add	r24, r0
    5508:	11 24       	eor	r1, r1
    550a:	80 53       	subi	r24, 0x30	; 48
    550c:	08 95       	ret

0000550e <_Z14epoch_from_ltmP2tm>:
    550e:	cf 92       	push	r12
    5510:	df 92       	push	r13
    5512:	ef 92       	push	r14
    5514:	ff 92       	push	r15
    5516:	fc 01       	movw	r30, r24
    5518:	80 81       	ld	r24, Z
    551a:	21 81       	ldd	r18, Z+1	; 0x01
    551c:	08 2e       	mov	r0, r24
    551e:	00 0c       	add	r0, r0
    5520:	99 0b       	sbc	r25, r25
    5522:	ac 01       	movw	r20, r24
    5524:	3c e3       	ldi	r19, 0x3C	; 60
    5526:	23 02       	muls	r18, r19
    5528:	40 0d       	add	r20, r0
    552a:	51 1d       	adc	r21, r1
    552c:	11 24       	eor	r1, r1
    552e:	a2 81       	ldd	r26, Z+2	; 0x02
    5530:	0a 2e       	mov	r0, r26
    5532:	00 0c       	add	r0, r0
    5534:	bb 0b       	sbc	r27, r27
    5536:	20 e1       	ldi	r18, 0x10	; 16
    5538:	3e e0       	ldi	r19, 0x0E	; 14
    553a:	0e 94 9f 48 	call	0x913e	; 0x913e <__usmulhisi3>
    553e:	6a 01       	movw	r12, r20
    5540:	55 0f       	add	r21, r21
    5542:	ee 08       	sbc	r14, r14
    5544:	ff 08       	sbc	r15, r15
    5546:	c6 0e       	add	r12, r22
    5548:	d7 1e       	adc	r13, r23
    554a:	e8 1e       	adc	r14, r24
    554c:	f9 1e       	adc	r15, r25
    554e:	a0 85       	ldd	r26, Z+8	; 0x08
    5550:	b1 85       	ldd	r27, Z+9	; 0x09
    5552:	20 e8       	ldi	r18, 0x80	; 128
    5554:	31 e5       	ldi	r19, 0x51	; 81
    5556:	41 e0       	ldi	r20, 0x01	; 1
    5558:	50 e0       	ldi	r21, 0x00	; 0
    555a:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    555e:	c6 0e       	add	r12, r22
    5560:	d7 1e       	adc	r13, r23
    5562:	e8 1e       	adc	r14, r24
    5564:	f9 1e       	adc	r15, r25
    5566:	06 80       	ldd	r0, Z+6	; 0x06
    5568:	f7 81       	ldd	r31, Z+7	; 0x07
    556a:	e0 2d       	mov	r30, r0
    556c:	df 01       	movw	r26, r30
    556e:	a6 54       	subi	r26, 0x46	; 70
    5570:	b1 09       	sbc	r27, r1
    5572:	20 e8       	ldi	r18, 0x80	; 128
    5574:	33 e3       	ldi	r19, 0x33	; 51
    5576:	41 ee       	ldi	r20, 0xE1	; 225
    5578:	51 e0       	ldi	r21, 0x01	; 1
    557a:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    557e:	c6 0e       	add	r12, r22
    5580:	d7 1e       	adc	r13, r23
    5582:	e8 1e       	adc	r14, r24
    5584:	f9 1e       	adc	r15, r25
    5586:	cf 01       	movw	r24, r30
    5588:	85 54       	subi	r24, 0x45	; 69
    558a:	91 09       	sbc	r25, r1
    558c:	dc 01       	movw	r26, r24
    558e:	0a f4       	brpl	.+2      	; 0x5592 <_Z14epoch_from_ltmP2tm+0x84>
    5590:	13 96       	adiw	r26, 0x03	; 3
    5592:	b5 95       	asr	r27
    5594:	a7 95       	ror	r26
    5596:	b5 95       	asr	r27
    5598:	a7 95       	ror	r26
    559a:	20 e8       	ldi	r18, 0x80	; 128
    559c:	31 e5       	ldi	r19, 0x51	; 81
    559e:	41 e0       	ldi	r20, 0x01	; 1
    55a0:	50 e0       	ldi	r21, 0x00	; 0
    55a2:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    55a6:	c6 0e       	add	r12, r22
    55a8:	d7 1e       	adc	r13, r23
    55aa:	e8 1e       	adc	r14, r24
    55ac:	f9 1e       	adc	r15, r25
    55ae:	cf 01       	movw	r24, r30
    55b0:	01 97       	sbiw	r24, 0x01	; 1
    55b2:	64 e6       	ldi	r22, 0x64	; 100
    55b4:	70 e0       	ldi	r23, 0x00	; 0
    55b6:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
    55ba:	db 01       	movw	r26, r22
    55bc:	20 e8       	ldi	r18, 0x80	; 128
    55be:	3e ea       	ldi	r19, 0xAE	; 174
    55c0:	4e ef       	ldi	r20, 0xFE	; 254
    55c2:	5f ef       	ldi	r21, 0xFF	; 255
    55c4:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    55c8:	c6 0e       	add	r12, r22
    55ca:	d7 1e       	adc	r13, r23
    55cc:	e8 1e       	adc	r14, r24
    55ce:	f9 1e       	adc	r15, r25
    55d0:	cf 01       	movw	r24, r30
    55d2:	85 5d       	subi	r24, 0xD5	; 213
    55d4:	9e 4f       	sbci	r25, 0xFE	; 254
    55d6:	60 e9       	ldi	r22, 0x90	; 144
    55d8:	71 e0       	ldi	r23, 0x01	; 1
    55da:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
    55de:	db 01       	movw	r26, r22
    55e0:	20 e8       	ldi	r18, 0x80	; 128
    55e2:	31 e5       	ldi	r19, 0x51	; 81
    55e4:	41 e0       	ldi	r20, 0x01	; 1
    55e6:	50 e0       	ldi	r21, 0x00	; 0
    55e8:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    55ec:	6c 0d       	add	r22, r12
    55ee:	7d 1d       	adc	r23, r13
    55f0:	8e 1d       	adc	r24, r14
    55f2:	9f 1d       	adc	r25, r15
    55f4:	ff 90       	pop	r15
    55f6:	ef 90       	pop	r14
    55f8:	df 90       	pop	r13
    55fa:	cf 90       	pop	r12
    55fc:	08 95       	ret

000055fe <ds3231_get_epoch>:
    55fe:	4f 92       	push	r4
    5600:	5f 92       	push	r5
    5602:	6f 92       	push	r6
    5604:	7f 92       	push	r7
    5606:	8f 92       	push	r8
    5608:	9f 92       	push	r9
    560a:	af 92       	push	r10
    560c:	bf 92       	push	r11
    560e:	cf 92       	push	r12
    5610:	df 92       	push	r13
    5612:	ef 92       	push	r14
    5614:	ff 92       	push	r15
    5616:	0f 93       	push	r16
    5618:	1f 93       	push	r17
    561a:	cf 93       	push	r28
    561c:	df 93       	push	r29
    561e:	cd b7       	in	r28, 0x3d	; 61
    5620:	de b7       	in	r29, 0x3e	; 62
    5622:	63 97       	sbiw	r28, 0x13	; 19
    5624:	cd bf       	out	0x3d, r28	; 61
    5626:	de bf       	out	0x3e, r29	; 62
    5628:	5c 01       	movw	r10, r24
    562a:	ae 01       	movw	r20, r28
    562c:	4f 5f       	subi	r20, 0xFF	; 255
    562e:	5f 4f       	sbci	r21, 0xFF	; 255
    5630:	87 e0       	ldi	r24, 0x07	; 7
    5632:	da 01       	movw	r26, r20
    5634:	1d 92       	st	X+, r1
    5636:	8a 95       	dec	r24
    5638:	e9 f7       	brne	.-6      	; 0x5634 <ds3231_get_epoch+0x36>
    563a:	27 e0       	ldi	r18, 0x07	; 7
    563c:	60 e0       	ldi	r22, 0x00	; 0
    563e:	80 ed       	ldi	r24, 0xD0	; 208
    5640:	0e 94 ca 33 	call	0x6794	; 0x6794 <I2C_0_GetData>
    5644:	98 2e       	mov	r9, r24
    5646:	b7 e0       	ldi	r27, 0x07	; 7
    5648:	8b 13       	cpse	r24, r27
    564a:	04 c1       	rjmp	.+520    	; 0x5854 <ds3231_get_epoch+0x256>
    564c:	fe 01       	movw	r30, r28
    564e:	38 96       	adiw	r30, 0x08	; 8
    5650:	8c e0       	ldi	r24, 0x0C	; 12
    5652:	df 01       	movw	r26, r30
    5654:	1d 92       	st	X+, r1
    5656:	8a 95       	dec	r24
    5658:	e9 f7       	brne	.-6      	; 0x5654 <ds3231_get_epoch+0x56>
    565a:	2f 81       	ldd	r18, Y+7	; 0x07
    565c:	82 2f       	mov	r24, r18
    565e:	8f 70       	andi	r24, 0x0F	; 15
    5660:	e8 2e       	mov	r14, r24
    5662:	f1 2c       	mov	r15, r1
    5664:	c7 01       	movw	r24, r14
    5666:	8c 59       	subi	r24, 0x9C	; 156
    5668:	9f 4f       	sbci	r25, 0xFF	; 255
    566a:	22 95       	swap	r18
    566c:	2f 70       	andi	r18, 0x0F	; 15
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	79 01       	movw	r14, r18
    5672:	ee 0c       	add	r14, r14
    5674:	ff 1c       	adc	r15, r15
    5676:	22 0f       	add	r18, r18
    5678:	33 1f       	adc	r19, r19
    567a:	22 0f       	add	r18, r18
    567c:	33 1f       	adc	r19, r19
    567e:	22 0f       	add	r18, r18
    5680:	33 1f       	adc	r19, r19
    5682:	2e 0d       	add	r18, r14
    5684:	3f 1d       	adc	r19, r15
    5686:	7c 01       	movw	r14, r24
    5688:	e2 0e       	add	r14, r18
    568a:	f3 1e       	adc	r15, r19
    568c:	67 01       	movw	r12, r14
    568e:	b4 e9       	ldi	r27, 0x94	; 148
    5690:	cb 1a       	sub	r12, r27
    5692:	b8 ef       	ldi	r27, 0xF8	; 248
    5694:	db 0a       	sbc	r13, r27
    5696:	8e 81       	ldd	r24, Y+6	; 0x06
    5698:	98 2f       	mov	r25, r24
    569a:	9f 70       	andi	r25, 0x0F	; 15
    569c:	82 95       	swap	r24
    569e:	8f 70       	andi	r24, 0x0F	; 15
    56a0:	88 0f       	add	r24, r24
    56a2:	08 2f       	mov	r16, r24
    56a4:	00 0f       	add	r16, r16
    56a6:	00 0f       	add	r16, r16
    56a8:	80 0f       	add	r24, r16
    56aa:	08 2f       	mov	r16, r24
    56ac:	09 0f       	add	r16, r25
    56ae:	ed 81       	ldd	r30, Y+5	; 0x05
    56b0:	8e 2f       	mov	r24, r30
    56b2:	8f 70       	andi	r24, 0x0F	; 15
    56b4:	e2 95       	swap	r30
    56b6:	ef 70       	andi	r30, 0x0F	; 15
    56b8:	ee 0f       	add	r30, r30
    56ba:	8e 2e       	mov	r8, r30
    56bc:	88 0c       	add	r8, r8
    56be:	88 0c       	add	r8, r8
    56c0:	e8 0d       	add	r30, r8
    56c2:	8e 2e       	mov	r8, r30
    56c4:	88 0e       	add	r8, r24
    56c6:	11 e0       	ldi	r17, 0x01	; 1
    56c8:	10 17       	cp	r17, r16
    56ca:	60 f4       	brcc	.+24     	; 0x56e4 <ds3231_get_epoch+0xe6>
    56cc:	61 2f       	mov	r22, r17
    56ce:	c6 01       	movw	r24, r12
    56d0:	0e 94 17 02 	call	0x42e	; 0x42e <month_length>
    56d4:	28 89       	ldd	r18, Y+16	; 0x10
    56d6:	39 89       	ldd	r19, Y+17	; 0x11
    56d8:	28 0f       	add	r18, r24
    56da:	31 1d       	adc	r19, r1
    56dc:	28 8b       	std	Y+16, r18	; 0x10
    56de:	39 8b       	std	Y+17, r19	; 0x11
    56e0:	1f 5f       	subi	r17, 0xFF	; 255
    56e2:	f2 cf       	rjmp	.-28     	; 0x56c8 <ds3231_get_epoch+0xca>
    56e4:	e8 2d       	mov	r30, r8
    56e6:	88 0c       	add	r8, r8
    56e8:	ff 0b       	sbc	r31, r31
    56ea:	31 97       	sbiw	r30, 0x01	; 1
    56ec:	88 89       	ldd	r24, Y+16	; 0x10
    56ee:	99 89       	ldd	r25, Y+17	; 0x11
    56f0:	e8 0f       	add	r30, r24
    56f2:	f9 1f       	adc	r31, r25
    56f4:	89 81       	ldd	r24, Y+1	; 0x01
    56f6:	98 2f       	mov	r25, r24
    56f8:	92 95       	swap	r25
    56fa:	9f 70       	andi	r25, 0x0F	; 15
    56fc:	99 0f       	add	r25, r25
    56fe:	49 2f       	mov	r20, r25
    5700:	44 0f       	add	r20, r20
    5702:	44 0f       	add	r20, r20
    5704:	49 0f       	add	r20, r25
    5706:	8f 70       	andi	r24, 0x0F	; 15
    5708:	48 0f       	add	r20, r24
    570a:	3a 81       	ldd	r19, Y+2	; 0x02
    570c:	23 2f       	mov	r18, r19
    570e:	22 95       	swap	r18
    5710:	2f 70       	andi	r18, 0x0F	; 15
    5712:	22 0f       	add	r18, r18
    5714:	92 2f       	mov	r25, r18
    5716:	99 0f       	add	r25, r25
    5718:	99 0f       	add	r25, r25
    571a:	82 2f       	mov	r24, r18
    571c:	89 0f       	add	r24, r25
    571e:	23 2f       	mov	r18, r19
    5720:	2f 70       	andi	r18, 0x0F	; 15
    5722:	28 0f       	add	r18, r24
    5724:	ab 81       	ldd	r26, Y+3	; 0x03
    5726:	6a 2f       	mov	r22, r26
    5728:	70 e0       	ldi	r23, 0x00	; 0
    572a:	cb 01       	movw	r24, r22
    572c:	95 95       	asr	r25
    572e:	87 95       	ror	r24
    5730:	95 95       	asr	r25
    5732:	87 95       	ror	r24
    5734:	95 95       	asr	r25
    5736:	87 95       	ror	r24
    5738:	95 95       	asr	r25
    573a:	87 95       	ror	r24
    573c:	95 95       	asr	r25
    573e:	87 95       	ror	r24
    5740:	38 2f       	mov	r19, r24
    5742:	31 70       	andi	r19, 0x01	; 1
    5744:	cb 01       	movw	r24, r22
    5746:	95 95       	asr	r25
    5748:	87 95       	ror	r24
    574a:	95 95       	asr	r25
    574c:	87 95       	ror	r24
    574e:	95 95       	asr	r25
    5750:	87 95       	ror	r24
    5752:	95 95       	asr	r25
    5754:	87 95       	ror	r24
    5756:	81 70       	andi	r24, 0x01	; 1
    5758:	88 0f       	add	r24, r24
    575a:	98 2f       	mov	r25, r24
    575c:	99 0f       	add	r25, r25
    575e:	99 0f       	add	r25, r25
    5760:	89 0f       	add	r24, r25
    5762:	af 70       	andi	r26, 0x0F	; 15
    5764:	a8 0f       	add	r26, r24
    5766:	06 2e       	mov	r0, r22
    5768:	67 2f       	mov	r22, r23
    576a:	00 0c       	add	r0, r0
    576c:	66 1f       	adc	r22, r22
    576e:	77 0b       	sbc	r23, r23
    5770:	00 0c       	add	r0, r0
    5772:	66 1f       	adc	r22, r22
    5774:	77 1f       	adc	r23, r23
    5776:	60 ff       	sbrs	r22, 0
    5778:	04 c0       	rjmp	.+8      	; 0x5782 <ds3231_get_epoch+0x184>
    577a:	33 23       	and	r19, r19
    577c:	21 f0       	breq	.+8      	; 0x5786 <ds3231_get_epoch+0x188>
    577e:	a4 5f       	subi	r26, 0xF4	; 244
    5780:	02 c0       	rjmp	.+4      	; 0x5786 <ds3231_get_epoch+0x188>
    5782:	31 11       	cpse	r19, r1
    5784:	ac 5e       	subi	r26, 0xEC	; 236
    5786:	04 2e       	mov	r0, r20
    5788:	00 0c       	add	r0, r0
    578a:	55 0b       	sbc	r21, r21
    578c:	8c e3       	ldi	r24, 0x3C	; 60
    578e:	28 02       	muls	r18, r24
    5790:	40 0d       	add	r20, r0
    5792:	51 1d       	adc	r21, r1
    5794:	11 24       	eor	r1, r1
    5796:	0a 2e       	mov	r0, r26
    5798:	00 0c       	add	r0, r0
    579a:	bb 0b       	sbc	r27, r27
    579c:	20 e1       	ldi	r18, 0x10	; 16
    579e:	3e e0       	ldi	r19, 0x0E	; 14
    57a0:	0e 94 9f 48 	call	0x913e	; 0x913e <__usmulhisi3>
    57a4:	2a 01       	movw	r4, r20
    57a6:	55 0f       	add	r21, r21
    57a8:	66 08       	sbc	r6, r6
    57aa:	77 08       	sbc	r7, r7
    57ac:	46 0e       	add	r4, r22
    57ae:	57 1e       	adc	r5, r23
    57b0:	68 1e       	adc	r6, r24
    57b2:	79 1e       	adc	r7, r25
    57b4:	df 01       	movw	r26, r30
    57b6:	20 e8       	ldi	r18, 0x80	; 128
    57b8:	31 e5       	ldi	r19, 0x51	; 81
    57ba:	41 e0       	ldi	r20, 0x01	; 1
    57bc:	50 e0       	ldi	r21, 0x00	; 0
    57be:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    57c2:	46 0e       	add	r4, r22
    57c4:	57 1e       	adc	r5, r23
    57c6:	68 1e       	adc	r6, r24
    57c8:	79 1e       	adc	r7, r25
    57ca:	d7 01       	movw	r26, r14
    57cc:	a6 54       	subi	r26, 0x46	; 70
    57ce:	b1 09       	sbc	r27, r1
    57d0:	20 e8       	ldi	r18, 0x80	; 128
    57d2:	33 e3       	ldi	r19, 0x33	; 51
    57d4:	41 ee       	ldi	r20, 0xE1	; 225
    57d6:	51 e0       	ldi	r21, 0x01	; 1
    57d8:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    57dc:	46 0e       	add	r4, r22
    57de:	57 1e       	adc	r5, r23
    57e0:	68 1e       	adc	r6, r24
    57e2:	79 1e       	adc	r7, r25
    57e4:	c7 01       	movw	r24, r14
    57e6:	85 54       	subi	r24, 0x45	; 69
    57e8:	91 09       	sbc	r25, r1
    57ea:	dc 01       	movw	r26, r24
    57ec:	0a f4       	brpl	.+2      	; 0x57f0 <ds3231_get_epoch+0x1f2>
    57ee:	13 96       	adiw	r26, 0x03	; 3
    57f0:	b5 95       	asr	r27
    57f2:	a7 95       	ror	r26
    57f4:	b5 95       	asr	r27
    57f6:	a7 95       	ror	r26
    57f8:	20 e8       	ldi	r18, 0x80	; 128
    57fa:	31 e5       	ldi	r19, 0x51	; 81
    57fc:	41 e0       	ldi	r20, 0x01	; 1
    57fe:	50 e0       	ldi	r21, 0x00	; 0
    5800:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    5804:	46 0e       	add	r4, r22
    5806:	57 1e       	adc	r5, r23
    5808:	68 1e       	adc	r6, r24
    580a:	79 1e       	adc	r7, r25
    580c:	c7 01       	movw	r24, r14
    580e:	01 97       	sbiw	r24, 0x01	; 1
    5810:	64 e6       	ldi	r22, 0x64	; 100
    5812:	70 e0       	ldi	r23, 0x00	; 0
    5814:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
    5818:	db 01       	movw	r26, r22
    581a:	20 e8       	ldi	r18, 0x80	; 128
    581c:	3e ea       	ldi	r19, 0xAE	; 174
    581e:	4e ef       	ldi	r20, 0xFE	; 254
    5820:	5f ef       	ldi	r21, 0xFF	; 255
    5822:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    5826:	46 0e       	add	r4, r22
    5828:	57 1e       	adc	r5, r23
    582a:	68 1e       	adc	r6, r24
    582c:	79 1e       	adc	r7, r25
    582e:	c7 01       	movw	r24, r14
    5830:	85 5d       	subi	r24, 0xD5	; 213
    5832:	9e 4f       	sbci	r25, 0xFE	; 254
    5834:	60 e9       	ldi	r22, 0x90	; 144
    5836:	71 e0       	ldi	r23, 0x01	; 1
    5838:	0e 94 32 48 	call	0x9064	; 0x9064 <__divmodhi4>
    583c:	db 01       	movw	r26, r22
    583e:	20 e8       	ldi	r18, 0x80	; 128
    5840:	31 e5       	ldi	r19, 0x51	; 81
    5842:	41 e0       	ldi	r20, 0x01	; 1
    5844:	50 e0       	ldi	r21, 0x00	; 0
    5846:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulshisi3>
    584a:	64 0d       	add	r22, r4
    584c:	75 1d       	adc	r23, r5
    584e:	86 1d       	adc	r24, r6
    5850:	97 1d       	adc	r25, r7
    5852:	03 c0       	rjmp	.+6      	; 0x585a <ds3231_get_epoch+0x25c>
    5854:	60 e0       	ldi	r22, 0x00	; 0
    5856:	70 e0       	ldi	r23, 0x00	; 0
    5858:	cb 01       	movw	r24, r22
    585a:	a1 14       	cp	r10, r1
    585c:	b1 04       	cpc	r11, r1
    585e:	41 f0       	breq	.+16     	; 0x5870 <ds3231_get_epoch+0x272>
    5860:	a7 e0       	ldi	r26, 0x07	; 7
    5862:	9a 16       	cp	r9, r26
    5864:	11 f0       	breq	.+4      	; 0x586a <ds3231_get_epoch+0x26c>
    5866:	2c ef       	ldi	r18, 0xFC	; 252
    5868:	01 c0       	rjmp	.+2      	; 0x586c <ds3231_get_epoch+0x26e>
    586a:	20 e0       	ldi	r18, 0x00	; 0
    586c:	f5 01       	movw	r30, r10
    586e:	20 83       	st	Z, r18
    5870:	63 96       	adiw	r28, 0x13	; 19
    5872:	cd bf       	out	0x3d, r28	; 61
    5874:	de bf       	out	0x3e, r29	; 62
    5876:	df 91       	pop	r29
    5878:	cf 91       	pop	r28
    587a:	1f 91       	pop	r17
    587c:	0f 91       	pop	r16
    587e:	ff 90       	pop	r15
    5880:	ef 90       	pop	r14
    5882:	df 90       	pop	r13
    5884:	cf 90       	pop	r12
    5886:	bf 90       	pop	r11
    5888:	af 90       	pop	r10
    588a:	9f 90       	pop	r9
    588c:	8f 90       	pop	r8
    588e:	7f 90       	pop	r7
    5890:	6f 90       	pop	r6
    5892:	5f 90       	pop	r5
    5894:	4f 90       	pop	r4
    5896:	08 95       	ret

00005898 <RTC_String2Epoch>:
    5898:	7f 92       	push	r7
    589a:	8f 92       	push	r8
    589c:	9f 92       	push	r9
    589e:	af 92       	push	r10
    58a0:	bf 92       	push	r11
    58a2:	cf 92       	push	r12
    58a4:	df 92       	push	r13
    58a6:	ef 92       	push	r14
    58a8:	ff 92       	push	r15
    58aa:	0f 93       	push	r16
    58ac:	1f 93       	push	r17
    58ae:	cf 93       	push	r28
    58b0:	df 93       	push	r29
    58b2:	cd b7       	in	r28, 0x3d	; 61
    58b4:	de b7       	in	r29, 0x3e	; 62
    58b6:	2c 97       	sbiw	r28, 0x0c	; 12
    58b8:	cd bf       	out	0x3d, r28	; 61
    58ba:	de bf       	out	0x3e, r29	; 62
    58bc:	6c 01       	movw	r12, r24
    58be:	8b 01       	movw	r16, r22
    58c0:	fe 01       	movw	r30, r28
    58c2:	31 96       	adiw	r30, 0x01	; 1
    58c4:	8c e0       	ldi	r24, 0x0C	; 12
    58c6:	df 01       	movw	r26, r30
    58c8:	1d 92       	st	X+, r1
    58ca:	8a 95       	dec	r24
    58cc:	e9 f7       	brne	.-6      	; 0x58c8 <RTC_String2Epoch+0x30>
    58ce:	61 15       	cp	r22, r1
    58d0:	71 05       	cpc	r23, r1
    58d2:	09 f4       	brne	.+2      	; 0x58d6 <RTC_String2Epoch+0x3e>
    58d4:	63 c0       	rjmp	.+198    	; 0x599c <RTC_String2Epoch+0x104>
    58d6:	cb 01       	movw	r24, r22
    58d8:	0a 96       	adiw	r24, 0x0a	; 10
    58da:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    58de:	a8 2e       	mov	r10, r24
    58e0:	c8 01       	movw	r24, r16
    58e2:	08 96       	adiw	r24, 0x08	; 8
    58e4:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    58e8:	b8 2e       	mov	r11, r24
    58ea:	c8 01       	movw	r24, r16
    58ec:	06 96       	adiw	r24, 0x06	; 6
    58ee:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    58f2:	f8 2e       	mov	r15, r24
    58f4:	c8 01       	movw	r24, r16
    58f6:	04 96       	adiw	r24, 0x04	; 4
    58f8:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    58fc:	88 2e       	mov	r8, r24
    58fe:	c8 01       	movw	r24, r16
    5900:	02 96       	adiw	r24, 0x02	; 2
    5902:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    5906:	78 2e       	mov	r7, r24
    5908:	c8 01       	movw	r24, r16
    590a:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    590e:	18 2f       	mov	r17, r24
    5910:	8f 2d       	mov	r24, r15
    5912:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <_Z7bcd2dech>
    5916:	98 2e       	mov	r9, r24
    5918:	81 2f       	mov	r24, r17
    591a:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <_Z7bcd2dech>
    591e:	e8 2e       	mov	r14, r24
    5920:	f1 2c       	mov	r15, r1
    5922:	c7 01       	movw	r24, r14
    5924:	8c 59       	subi	r24, 0x9C	; 156
    5926:	9f 4f       	sbci	r25, 0xFF	; 255
    5928:	8f 83       	std	Y+7, r24	; 0x07
    592a:	98 87       	std	Y+8, r25	; 0x08
    592c:	b0 e3       	ldi	r27, 0x30	; 48
    592e:	eb 1a       	sub	r14, r27
    5930:	b8 ef       	ldi	r27, 0xF8	; 248
    5932:	fb 0a       	sbc	r15, r27
    5934:	87 2d       	mov	r24, r7
    5936:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <_Z7bcd2dech>
    593a:	08 2f       	mov	r16, r24
    593c:	8f ef       	ldi	r24, 0xFF	; 255
    593e:	80 0f       	add	r24, r16
    5940:	8e 83       	std	Y+6, r24	; 0x06
    5942:	88 2d       	mov	r24, r8
    5944:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <_Z7bcd2dech>
    5948:	8c 83       	std	Y+4, r24	; 0x04
    594a:	11 e0       	ldi	r17, 0x01	; 1
    594c:	10 17       	cp	r17, r16
    594e:	60 f4       	brcc	.+24     	; 0x5968 <RTC_String2Epoch+0xd0>
    5950:	61 2f       	mov	r22, r17
    5952:	c7 01       	movw	r24, r14
    5954:	0e 94 17 02 	call	0x42e	; 0x42e <month_length>
    5958:	29 85       	ldd	r18, Y+9	; 0x09
    595a:	3a 85       	ldd	r19, Y+10	; 0x0a
    595c:	28 0f       	add	r18, r24
    595e:	31 1d       	adc	r19, r1
    5960:	29 87       	std	Y+9, r18	; 0x09
    5962:	3a 87       	std	Y+10, r19	; 0x0a
    5964:	1f 5f       	subi	r17, 0xFF	; 255
    5966:	f2 cf       	rjmp	.-28     	; 0x594c <RTC_String2Epoch+0xb4>
    5968:	8c 81       	ldd	r24, Y+4	; 0x04
    596a:	08 2e       	mov	r0, r24
    596c:	00 0c       	add	r0, r0
    596e:	99 0b       	sbc	r25, r25
    5970:	01 97       	sbiw	r24, 0x01	; 1
    5972:	29 85       	ldd	r18, Y+9	; 0x09
    5974:	3a 85       	ldd	r19, Y+10	; 0x0a
    5976:	82 0f       	add	r24, r18
    5978:	93 1f       	adc	r25, r19
    597a:	89 87       	std	Y+9, r24	; 0x09
    597c:	9a 87       	std	Y+10, r25	; 0x0a
    597e:	8a 2d       	mov	r24, r10
    5980:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <_Z7bcd2dech>
    5984:	18 2f       	mov	r17, r24
    5986:	8b 2d       	mov	r24, r11
    5988:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <_Z7bcd2dech>
    598c:	9b 82       	std	Y+3, r9	; 0x03
    598e:	8a 83       	std	Y+2, r24	; 0x02
    5990:	19 83       	std	Y+1, r17	; 0x01
    5992:	ce 01       	movw	r24, r28
    5994:	01 96       	adiw	r24, 0x01	; 1
    5996:	0e 94 87 2a 	call	0x550e	; 0x550e <_Z14epoch_from_ltmP2tm>
    599a:	04 c0       	rjmp	.+8      	; 0x59a4 <RTC_String2Epoch+0x10c>
    599c:	80 e0       	ldi	r24, 0x00	; 0
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <ds3231_get_epoch>
    59a4:	c1 14       	cp	r12, r1
    59a6:	d1 04       	cpc	r13, r1
    59a8:	49 f0       	breq	.+18     	; 0x59bc <RTC_String2Epoch+0x124>
    59aa:	21 e0       	ldi	r18, 0x01	; 1
    59ac:	61 15       	cp	r22, r1
    59ae:	71 05       	cpc	r23, r1
    59b0:	81 05       	cpc	r24, r1
    59b2:	91 05       	cpc	r25, r1
    59b4:	09 f0       	breq	.+2      	; 0x59b8 <RTC_String2Epoch+0x120>
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	f6 01       	movw	r30, r12
    59ba:	20 83       	st	Z, r18
    59bc:	2c 96       	adiw	r28, 0x0c	; 12
    59be:	cd bf       	out	0x3d, r28	; 61
    59c0:	de bf       	out	0x3e, r29	; 62
    59c2:	df 91       	pop	r29
    59c4:	cf 91       	pop	r28
    59c6:	1f 91       	pop	r17
    59c8:	0f 91       	pop	r16
    59ca:	ff 90       	pop	r15
    59cc:	ef 90       	pop	r14
    59ce:	df 90       	pop	r13
    59d0:	cf 90       	pop	r12
    59d2:	bf 90       	pop	r11
    59d4:	af 90       	pop	r10
    59d6:	9f 90       	pop	r9
    59d8:	8f 90       	pop	r8
    59da:	7f 90       	pop	r7
    59dc:	08 95       	ret

000059de <ds3231_get_temp>:
    59de:	0f 93       	push	r16
    59e0:	1f 93       	push	r17
    59e2:	cf 93       	push	r28
    59e4:	df 93       	push	r29
    59e6:	00 d0       	rcall	.+0      	; 0x59e8 <ds3231_get_temp+0xa>
    59e8:	cd b7       	in	r28, 0x3d	; 61
    59ea:	de b7       	in	r29, 0x3e	; 62
    59ec:	8c 01       	movw	r16, r24
    59ee:	19 82       	std	Y+1, r1	; 0x01
    59f0:	1a 82       	std	Y+2, r1	; 0x02
    59f2:	22 e0       	ldi	r18, 0x02	; 2
    59f4:	ae 01       	movw	r20, r28
    59f6:	4f 5f       	subi	r20, 0xFF	; 255
    59f8:	5f 4f       	sbci	r21, 0xFF	; 255
    59fa:	61 e1       	ldi	r22, 0x11	; 17
    59fc:	80 ed       	ldi	r24, 0xD0	; 208
    59fe:	0e 94 ca 33 	call	0x6794	; 0x6794 <I2C_0_GetData>
    5a02:	91 e0       	ldi	r25, 0x01	; 1
    5a04:	82 30       	cpi	r24, 0x02	; 2
    5a06:	09 f4       	brne	.+2      	; 0x5a0a <ds3231_get_temp+0x2c>
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	82 30       	cpi	r24, 0x02	; 2
    5a0c:	49 f4       	brne	.+18     	; 0x5a20 <ds3231_get_temp+0x42>
    5a0e:	29 81       	ldd	r18, Y+1	; 0x01
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	32 2f       	mov	r19, r18
    5a14:	22 27       	eor	r18, r18
    5a16:	8a 81       	ldd	r24, Y+2	; 0x02
    5a18:	28 2b       	or	r18, r24
    5a1a:	f8 01       	movw	r30, r16
    5a1c:	20 83       	st	Z, r18
    5a1e:	31 83       	std	Z+1, r19	; 0x01
    5a20:	89 2f       	mov	r24, r25
    5a22:	0f 90       	pop	r0
    5a24:	0f 90       	pop	r0
    5a26:	df 91       	pop	r29
    5a28:	cf 91       	pop	r28
    5a2a:	1f 91       	pop	r17
    5a2c:	0f 91       	pop	r16
    5a2e:	08 95       	ret

00005a30 <ds3231_set_date_time_arducon>:
    5a30:	ff 92       	push	r15
    5a32:	0f 93       	push	r16
    5a34:	1f 93       	push	r17
    5a36:	cf 93       	push	r28
    5a38:	df 93       	push	r29
    5a3a:	cd b7       	in	r28, 0x3d	; 61
    5a3c:	de b7       	in	r29, 0x3e	; 62
    5a3e:	27 97       	sbiw	r28, 0x07	; 7
    5a40:	cd bf       	out	0x3d, r28	; 61
    5a42:	de bf       	out	0x3e, r29	; 62
    5a44:	fe 01       	movw	r30, r28
    5a46:	31 96       	adiw	r30, 0x01	; 1
    5a48:	27 e0       	ldi	r18, 0x07	; 7
    5a4a:	df 01       	movw	r26, r30
    5a4c:	1d 92       	st	X+, r1
    5a4e:	2a 95       	dec	r18
    5a50:	e9 f7       	brne	.-6      	; 0x5a4c <ds3231_set_date_time_arducon+0x1c>
    5a52:	00 97       	sbiw	r24, 0x00	; 0
    5a54:	81 f1       	breq	.+96     	; 0x5ab6 <ds3231_set_date_time_arducon+0x86>
    5a56:	f6 2e       	mov	r15, r22
    5a58:	8c 01       	movw	r16, r24
    5a5a:	0a 96       	adiw	r24, 0x0a	; 10
    5a5c:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    5a60:	89 83       	std	Y+1, r24	; 0x01
    5a62:	c8 01       	movw	r24, r16
    5a64:	08 96       	adiw	r24, 0x08	; 8
    5a66:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    5a6a:	8a 83       	std	Y+2, r24	; 0x02
    5a6c:	c8 01       	movw	r24, r16
    5a6e:	06 96       	adiw	r24, 0x06	; 6
    5a70:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    5a74:	8b 83       	std	Y+3, r24	; 0x03
    5a76:	c8 01       	movw	r24, r16
    5a78:	04 96       	adiw	r24, 0x04	; 4
    5a7a:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    5a7e:	8d 83       	std	Y+5, r24	; 0x05
    5a80:	c8 01       	movw	r24, r16
    5a82:	02 96       	adiw	r24, 0x02	; 2
    5a84:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    5a88:	8e 83       	std	Y+6, r24	; 0x06
    5a8a:	c8 01       	movw	r24, r16
    5a8c:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_Z8char2bcdPc>
    5a90:	8f 83       	std	Y+7, r24	; 0x07
    5a92:	6f 2d       	mov	r22, r15
    5a94:	66 0f       	add	r22, r22
    5a96:	66 0f       	add	r22, r22
    5a98:	66 0f       	add	r22, r22
    5a9a:	6f 19       	sub	r22, r15
    5a9c:	27 e0       	ldi	r18, 0x07	; 7
    5a9e:	ae 01       	movw	r20, r28
    5aa0:	4f 5f       	subi	r20, 0xFF	; 255
    5aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa4:	80 ed       	ldi	r24, 0xD0	; 208
    5aa6:	0e 94 8d 33 	call	0x671a	; 0x671a <I2C_0_SendData>
    5aaa:	91 e0       	ldi	r25, 0x01	; 1
    5aac:	87 30       	cpi	r24, 0x07	; 7
    5aae:	09 f4       	brne	.+2      	; 0x5ab2 <ds3231_set_date_time_arducon+0x82>
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	89 2f       	mov	r24, r25
    5ab4:	01 c0       	rjmp	.+2      	; 0x5ab8 <ds3231_set_date_time_arducon+0x88>
    5ab6:	81 e0       	ldi	r24, 0x01	; 1
    5ab8:	27 96       	adiw	r28, 0x07	; 7
    5aba:	cd bf       	out	0x3d, r28	; 61
    5abc:	de bf       	out	0x3e, r29	; 62
    5abe:	df 91       	pop	r29
    5ac0:	cf 91       	pop	r28
    5ac2:	1f 91       	pop	r17
    5ac4:	0f 91       	pop	r16
    5ac6:	ff 90       	pop	r15
    5ac8:	08 95       	ret

00005aca <ds3231_set_date_time>:
    5aca:	cf 93       	push	r28
    5acc:	df 93       	push	r29
    5ace:	cd b7       	in	r28, 0x3d	; 61
    5ad0:	de b7       	in	r29, 0x3e	; 62
    5ad2:	27 97       	sbiw	r28, 0x07	; 7
    5ad4:	cd bf       	out	0x3d, r28	; 61
    5ad6:	de bf       	out	0x3e, r29	; 62
    5ad8:	fc 01       	movw	r30, r24
    5ada:	81 e0       	ldi	r24, 0x01	; 1
    5adc:	8c 83       	std	Y+4, r24	; 0x04
    5ade:	82 89       	ldd	r24, Z+18	; 0x12
    5ae0:	20 ed       	ldi	r18, 0xD0	; 208
    5ae2:	28 0f       	add	r18, r24
    5ae4:	91 89       	ldd	r25, Z+17	; 0x11
    5ae6:	89 2f       	mov	r24, r25
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	c0 97       	sbiw	r24, 0x30	; 48
    5aec:	82 95       	swap	r24
    5aee:	92 95       	swap	r25
    5af0:	90 7f       	andi	r25, 0xF0	; 240
    5af2:	98 27       	eor	r25, r24
    5af4:	80 7f       	andi	r24, 0xF0	; 240
    5af6:	98 27       	eor	r25, r24
    5af8:	82 2b       	or	r24, r18
    5afa:	89 83       	std	Y+1, r24	; 0x01
    5afc:	87 85       	ldd	r24, Z+15	; 0x0f
    5afe:	20 ed       	ldi	r18, 0xD0	; 208
    5b00:	28 0f       	add	r18, r24
    5b02:	96 85       	ldd	r25, Z+14	; 0x0e
    5b04:	89 2f       	mov	r24, r25
    5b06:	90 e0       	ldi	r25, 0x00	; 0
    5b08:	c0 97       	sbiw	r24, 0x30	; 48
    5b0a:	82 95       	swap	r24
    5b0c:	92 95       	swap	r25
    5b0e:	90 7f       	andi	r25, 0xF0	; 240
    5b10:	98 27       	eor	r25, r24
    5b12:	80 7f       	andi	r24, 0xF0	; 240
    5b14:	98 27       	eor	r25, r24
    5b16:	82 2b       	or	r24, r18
    5b18:	8a 83       	std	Y+2, r24	; 0x02
    5b1a:	84 85       	ldd	r24, Z+12	; 0x0c
    5b1c:	20 ed       	ldi	r18, 0xD0	; 208
    5b1e:	28 0f       	add	r18, r24
    5b20:	93 85       	ldd	r25, Z+11	; 0x0b
    5b22:	89 2f       	mov	r24, r25
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	c0 97       	sbiw	r24, 0x30	; 48
    5b28:	82 95       	swap	r24
    5b2a:	92 95       	swap	r25
    5b2c:	90 7f       	andi	r25, 0xF0	; 240
    5b2e:	98 27       	eor	r25, r24
    5b30:	80 7f       	andi	r24, 0xF0	; 240
    5b32:	98 27       	eor	r25, r24
    5b34:	82 2b       	or	r24, r18
    5b36:	8b 83       	std	Y+3, r24	; 0x03
    5b38:	81 85       	ldd	r24, Z+9	; 0x09
    5b3a:	20 ed       	ldi	r18, 0xD0	; 208
    5b3c:	28 0f       	add	r18, r24
    5b3e:	90 85       	ldd	r25, Z+8	; 0x08
    5b40:	89 2f       	mov	r24, r25
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	c0 97       	sbiw	r24, 0x30	; 48
    5b46:	82 95       	swap	r24
    5b48:	92 95       	swap	r25
    5b4a:	90 7f       	andi	r25, 0xF0	; 240
    5b4c:	98 27       	eor	r25, r24
    5b4e:	80 7f       	andi	r24, 0xF0	; 240
    5b50:	98 27       	eor	r25, r24
    5b52:	82 2b       	or	r24, r18
    5b54:	8d 83       	std	Y+5, r24	; 0x05
    5b56:	86 81       	ldd	r24, Z+6	; 0x06
    5b58:	20 ed       	ldi	r18, 0xD0	; 208
    5b5a:	28 0f       	add	r18, r24
    5b5c:	95 81       	ldd	r25, Z+5	; 0x05
    5b5e:	89 2f       	mov	r24, r25
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	c0 97       	sbiw	r24, 0x30	; 48
    5b64:	82 95       	swap	r24
    5b66:	92 95       	swap	r25
    5b68:	90 7f       	andi	r25, 0xF0	; 240
    5b6a:	98 27       	eor	r25, r24
    5b6c:	80 7f       	andi	r24, 0xF0	; 240
    5b6e:	98 27       	eor	r25, r24
    5b70:	82 2b       	or	r24, r18
    5b72:	8e 83       	std	Y+6, r24	; 0x06
    5b74:	83 81       	ldd	r24, Z+3	; 0x03
    5b76:	20 ed       	ldi	r18, 0xD0	; 208
    5b78:	28 0f       	add	r18, r24
    5b7a:	92 81       	ldd	r25, Z+2	; 0x02
    5b7c:	89 2f       	mov	r24, r25
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	c0 97       	sbiw	r24, 0x30	; 48
    5b82:	82 95       	swap	r24
    5b84:	92 95       	swap	r25
    5b86:	90 7f       	andi	r25, 0xF0	; 240
    5b88:	98 27       	eor	r25, r24
    5b8a:	80 7f       	andi	r24, 0xF0	; 240
    5b8c:	98 27       	eor	r25, r24
    5b8e:	82 2b       	or	r24, r18
    5b90:	8f 83       	std	Y+7, r24	; 0x07
    5b92:	86 2f       	mov	r24, r22
    5b94:	88 0f       	add	r24, r24
    5b96:	88 0f       	add	r24, r24
    5b98:	88 0f       	add	r24, r24
    5b9a:	86 1b       	sub	r24, r22
    5b9c:	68 2f       	mov	r22, r24
    5b9e:	27 e0       	ldi	r18, 0x07	; 7
    5ba0:	ae 01       	movw	r20, r28
    5ba2:	4f 5f       	subi	r20, 0xFF	; 255
    5ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba6:	80 ed       	ldi	r24, 0xD0	; 208
    5ba8:	0e 94 8d 33 	call	0x671a	; 0x671a <I2C_0_SendData>
    5bac:	27 96       	adiw	r28, 0x07	; 7
    5bae:	cd bf       	out	0x3d, r28	; 61
    5bb0:	de bf       	out	0x3e, r29	; 62
    5bb2:	df 91       	pop	r29
    5bb4:	cf 91       	pop	r28
    5bb6:	08 95       	ret

00005bb8 <ds3231_set_aging>:


	void ds3231_set_aging(int8_t data_in)
	{
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
    5bbc:	1f 92       	push	r1
    5bbe:	cd b7       	in	r28, 0x3d	; 61
    5bc0:	de b7       	in	r29, 0x3e	; 62
		int8_t data[1];
		
		data[0] = data_in;
    5bc2:	89 83       	std	Y+1, r24	; 0x01
		I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1);
    5bc4:	21 e0       	ldi	r18, 0x01	; 1
    5bc6:	ae 01       	movw	r20, r28
    5bc8:	4f 5f       	subi	r20, 0xFF	; 255
    5bca:	5f 4f       	sbci	r21, 0xFF	; 255
    5bcc:	60 e1       	ldi	r22, 0x10	; 16
    5bce:	80 ed       	ldi	r24, 0xD0	; 208
    5bd0:	0e 94 8d 33 	call	0x671a	; 0x671a <I2C_0_SendData>
	}
    5bd4:	0f 90       	pop	r0
    5bd6:	df 91       	pop	r29
    5bd8:	cf 91       	pop	r28
    5bda:	08 95       	ret

00005bdc <ds3231_get_aging>:


	int8_t ds3231_get_aging()
	{
    5bdc:	cf 93       	push	r28
    5bde:	df 93       	push	r29
    5be0:	1f 92       	push	r1
    5be2:	cd b7       	in	r28, 0x3d	; 61
    5be4:	de b7       	in	r29, 0x3e	; 62
		int8_t data[1];
		
		I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1);
    5be6:	21 e0       	ldi	r18, 0x01	; 1
    5be8:	ae 01       	movw	r20, r28
    5bea:	4f 5f       	subi	r20, 0xFF	; 255
    5bec:	5f 4f       	sbci	r21, 0xFF	; 255
    5bee:	60 e1       	ldi	r22, 0x10	; 16
    5bf0:	80 ed       	ldi	r24, 0xD0	; 208
    5bf2:	0e 94 ca 33 	call	0x6794	; 0x6794 <I2C_0_GetData>
		return(data[0]);
	}
    5bf6:	89 81       	ldd	r24, Y+1	; 0x01
    5bf8:	0f 90       	pop	r0
    5bfa:	df 91       	pop	r29
    5bfc:	cf 91       	pop	r28
    5bfe:	08 95       	ret

00005c00 <ds3231_responding>:

	bool ds3231_responding()
	{
    5c00:	cf 93       	push	r28
    5c02:	df 93       	push	r29
    5c04:	1f 92       	push	r1
    5c06:	cd b7       	in	r28, 0x3d	; 61
    5c08:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
		int8_t data[1];		
		responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1);
    5c0a:	21 e0       	ldi	r18, 0x01	; 1
    5c0c:	ae 01       	movw	r20, r28
    5c0e:	4f 5f       	subi	r20, 0xFF	; 255
    5c10:	5f 4f       	sbci	r21, 0xFF	; 255
    5c12:	60 e1       	ldi	r22, 0x10	; 16
    5c14:	80 ed       	ldi	r24, 0xD0	; 208
    5c16:	0e 94 ca 33 	call	0x6794	; 0x6794 <I2C_0_GetData>
    5c1a:	91 e0       	ldi	r25, 0x01	; 1
    5c1c:	81 30       	cpi	r24, 0x01	; 1
    5c1e:	09 f0       	breq	.+2      	; 0x5c22 <ds3231_responding+0x22>
    5c20:	90 e0       	ldi	r25, 0x00	; 0
		return(responseReceived);
	}
    5c22:	89 2f       	mov	r24, r25
    5c24:	0f 90       	pop	r0
    5c26:	df 91       	pop	r29
    5c28:	cf 91       	pop	r28
    5c2a:	08 95       	ret

00005c2c <ds3231_init>:

time_t epoch_from_ltm(tm *ltm);

bool ds3231_init()
{
	I2C_0_Init();
    5c2c:	0e 94 71 33 	call	0x66e2	; 0x66e2 <I2C_0_Init>
	return (!ds3231_responding());
    5c30:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <ds3231_responding>
}
    5c34:	91 e0       	ldi	r25, 0x01	; 1
    5c36:	89 27       	eor	r24, r25
    5c38:	08 95       	ret

00005c3a <ds3231_sync2nearestMinute>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
    5c3a:	ff 92       	push	r15
    5c3c:	0f 93       	push	r16
    5c3e:	1f 93       	push	r17
    5c40:	cf 93       	push	r28
    5c42:	df 93       	push	r29
    5c44:	cd b7       	in	r28, 0x3d	; 61
    5c46:	de b7       	in	r29, 0x3e	; 62
    5c48:	28 97       	sbiw	r28, 0x08	; 8
    5c4a:	cd bf       	out	0x3d, r28	; 61
    5c4c:	de bf       	out	0x3e, r29	; 62
	BOOL err = FALSE;
	uint8_t data[8] = { 0, 0, 0 };
    5c4e:	ae 01       	movw	r20, r28
    5c50:	4f 5f       	subi	r20, 0xFF	; 255
    5c52:	5f 4f       	sbci	r21, 0xFF	; 255
    5c54:	88 e0       	ldi	r24, 0x08	; 8
    5c56:	fa 01       	movw	r30, r20
    5c58:	11 92       	st	Z+, r1
    5c5a:	8a 95       	dec	r24
    5c5c:	e9 f7       	brne	.-6      	; 0x5c58 <ds3231_sync2nearestMinute+0x1e>

	if(I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 3) == 3)
    5c5e:	23 e0       	ldi	r18, 0x03	; 3
    5c60:	60 e0       	ldi	r22, 0x00	; 0
    5c62:	80 ed       	ldi	r24, 0xD0	; 208
    5c64:	0e 94 ca 33 	call	0x6794	; 0x6794 <I2C_0_GetData>
    5c68:	83 30       	cpi	r24, 0x03	; 3
    5c6a:	09 f0       	breq	.+2      	; 0x5c6e <ds3231_sync2nearestMinute+0x34>
    5c6c:	86 c0       	rjmp	.+268    	; 0x5d7a <ds3231_sync2nearestMinute+0x140>
		uint8_t hour10;
		uint8_t hour;
		BOOL am_pm;
		BOOL twelvehour;

		seconds = bcd2dec(data[0]);
    5c6e:	89 81       	ldd	r24, Y+1	; 0x01
    5c70:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <_Z7bcd2dech>
    5c74:	08 2f       	mov	r16, r24
		minutes = bcd2dec(data[1]);
    5c76:	8a 81       	ldd	r24, Y+2	; 0x02
    5c78:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <_Z7bcd2dech>
    5c7c:	68 2f       	mov	r22, r24
		am_pm = ((data[2] >> 5) & 0x01);
    5c7e:	1b 81       	ldd	r17, Y+3	; 0x03
    5c80:	41 2f       	mov	r20, r17
    5c82:	50 e0       	ldi	r21, 0x00	; 0
    5c84:	9a 01       	movw	r18, r20
    5c86:	35 95       	asr	r19
    5c88:	27 95       	ror	r18
    5c8a:	35 95       	asr	r19
    5c8c:	27 95       	ror	r18
    5c8e:	35 95       	asr	r19
    5c90:	27 95       	ror	r18
    5c92:	35 95       	asr	r19
    5c94:	27 95       	ror	r18
    5c96:	35 95       	asr	r19
    5c98:	27 95       	ror	r18
    5c9a:	92 2f       	mov	r25, r18
    5c9c:	91 70       	andi	r25, 0x01	; 1
		hour10 = ((data[2] >> 4) & 0x01);
    5c9e:	9a 01       	movw	r18, r20
    5ca0:	35 95       	asr	r19
    5ca2:	27 95       	ror	r18
    5ca4:	35 95       	asr	r19
    5ca6:	27 95       	ror	r18
    5ca8:	35 95       	asr	r19
    5caa:	27 95       	ror	r18
    5cac:	35 95       	asr	r19
    5cae:	27 95       	ror	r18
    5cb0:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
    5cb2:	1f 70       	andi	r17, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);
    5cb4:	04 2e       	mov	r0, r20
    5cb6:	45 2f       	mov	r20, r21
    5cb8:	00 0c       	add	r0, r0
    5cba:	44 1f       	adc	r20, r20
    5cbc:	55 0b       	sbc	r21, r21
    5cbe:	00 0c       	add	r0, r0
    5cc0:	44 1f       	adc	r20, r20
    5cc2:	55 1f       	adc	r21, r21

		if(!twelvehour && am_pm)
    5cc4:	f4 2f       	mov	r31, r20
    5cc6:	f1 70       	andi	r31, 0x01	; 1
    5cc8:	ff 2e       	mov	r15, r31
    5cca:	40 fd       	sbrc	r20, 0
    5ccc:	02 c0       	rjmp	.+4      	; 0x5cd2 <ds3231_sync2nearestMinute+0x98>
    5cce:	91 11       	cpse	r25, r1
		{
			hour10 = 2;
    5cd0:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
    5cd2:	22 0f       	add	r18, r18
    5cd4:	92 2f       	mov	r25, r18
    5cd6:	99 0f       	add	r25, r25
    5cd8:	99 0f       	add	r25, r25
    5cda:	29 0f       	add	r18, r25
    5cdc:	12 0f       	add	r17, r18

		if(seconds > 30)
    5cde:	0f 31       	cpi	r16, 0x1F	; 31
    5ce0:	48 f0       	brcs	.+18     	; 0x5cf4 <ds3231_sync2nearestMinute+0xba>
		{
			minutes++;
    5ce2:	6f 5f       	subi	r22, 0xFF	; 255

			if(minutes > 59)
    5ce4:	6c 33       	cpi	r22, 0x3C	; 60
    5ce6:	40 f0       	brcs	.+16     	; 0x5cf8 <ds3231_sync2nearestMinute+0xbe>
			{
				minutes = 0;
				hours++;
    5ce8:	1f 5f       	subi	r17, 0xFF	; 255

				if(hours > 23) /* Don't attempt to synchronize at midnight */
    5cea:	18 31       	cpi	r17, 0x18	; 24
    5cec:	38 f4       	brcc	.+14     	; 0x5cfc <ds3231_sync2nearestMinute+0xc2>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    5cee:	60 e0       	ldi	r22, 0x00	; 0
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
	BOOL err = FALSE;
    5cf0:	80 e0       	ldi	r24, 0x00	; 0
    5cf2:	06 c0       	rjmp	.+12     	; 0x5d00 <ds3231_sync2nearestMinute+0xc6>
    5cf4:	80 e0       	ldi	r24, 0x00	; 0
    5cf6:	04 c0       	rjmp	.+8      	; 0x5d00 <ds3231_sync2nearestMinute+0xc6>
    5cf8:	80 e0       	ldi	r24, 0x00	; 0
    5cfa:	02 c0       	rjmp	.+4      	; 0x5d00 <ds3231_sync2nearestMinute+0xc6>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    5cfc:	60 e0       	ldi	r22, 0x00	; 0
				hours++;

				if(hours > 23) /* Don't attempt to synchronize at midnight */
				{
					err = TRUE;
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}

		if(!err)
    5d00:	81 11       	cpse	r24, r1
    5d02:	3c c0       	rjmp	.+120    	; 0x5d7c <ds3231_sync2nearestMinute+0x142>
		{
			data[0] = 0; /* seconds = 00 */
    5d04:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
    5d06:	86 2f       	mov	r24, r22
    5d08:	0e 94 65 2a 	call	0x54ca	; 0x54ca <_Z7dec2bcdh>
    5d0c:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;
    5d0e:	1b 82       	std	Y+3, r1	; 0x03

			if(twelvehour)
    5d10:	ff 20       	and	r15, r15
    5d12:	61 f0       	breq	.+24     	; 0x5d2c <ds3231_sync2nearestMinute+0xf2>
			{
				data[2] |= 0x40; /* set  12-hour bit */
    5d14:	80 e4       	ldi	r24, 0x40	; 64
    5d16:	8b 83       	std	Y+3, r24	; 0x03

				if(hours >= 12)
    5d18:	1c 30       	cpi	r17, 0x0C	; 12
    5d1a:	10 f0       	brcs	.+4      	; 0x5d20 <ds3231_sync2nearestMinute+0xe6>
				{
					data[2] |= 0x20; /* set pm bit */
    5d1c:	80 e6       	ldi	r24, 0x60	; 96
    5d1e:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
    5d20:	1a 30       	cpi	r17, 0x0A	; 10
    5d22:	68 f0       	brcs	.+26     	; 0x5d3e <ds3231_sync2nearestMinute+0x104>
				{
					data[2] |= 0x10;
    5d24:	8b 81       	ldd	r24, Y+3	; 0x03
    5d26:	80 61       	ori	r24, 0x10	; 16
    5d28:	8b 83       	std	Y+3, r24	; 0x03
    5d2a:	09 c0       	rjmp	.+18     	; 0x5d3e <ds3231_sync2nearestMinute+0x104>
				}
			}
			else
			{
				if(hours >= 20)
    5d2c:	14 31       	cpi	r17, 0x14	; 20
    5d2e:	18 f0       	brcs	.+6      	; 0x5d36 <ds3231_sync2nearestMinute+0xfc>
				{
					data[2] |= 0x20; /* set 20 bit */
    5d30:	80 e2       	ldi	r24, 0x20	; 32
    5d32:	8b 83       	std	Y+3, r24	; 0x03
    5d34:	04 c0       	rjmp	.+8      	; 0x5d3e <ds3231_sync2nearestMinute+0x104>
				}
				else if(hours >= 10)
    5d36:	1a 30       	cpi	r17, 0x0A	; 10
    5d38:	10 f0       	brcs	.+4      	; 0x5d3e <ds3231_sync2nearestMinute+0x104>
				{
					data[2] |= 0x10; /* set 10 bit */
    5d3a:	80 e1       	ldi	r24, 0x10	; 16
    5d3c:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
    5d3e:	8d ec       	ldi	r24, 0xCD	; 205
    5d40:	18 9f       	mul	r17, r24
    5d42:	81 2d       	mov	r24, r1
    5d44:	11 24       	eor	r1, r1
    5d46:	86 95       	lsr	r24
    5d48:	86 95       	lsr	r24
    5d4a:	86 95       	lsr	r24
    5d4c:	88 0f       	add	r24, r24
    5d4e:	98 2f       	mov	r25, r24
    5d50:	99 0f       	add	r25, r25
    5d52:	99 0f       	add	r25, r25
    5d54:	89 0f       	add	r24, r25
    5d56:	18 1b       	sub	r17, r24
    5d58:	8b 81       	ldd	r24, Y+3	; 0x03
    5d5a:	18 2b       	or	r17, r24
    5d5c:	1b 83       	std	Y+3, r17	; 0x03
			
			err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4);
    5d5e:	24 e0       	ldi	r18, 0x04	; 4
    5d60:	ae 01       	movw	r20, r28
    5d62:	4f 5f       	subi	r20, 0xFF	; 255
    5d64:	5f 4f       	sbci	r21, 0xFF	; 255
    5d66:	60 e0       	ldi	r22, 0x00	; 0
    5d68:	80 ed       	ldi	r24, 0xD0	; 208
    5d6a:	0e 94 8d 33 	call	0x671a	; 0x671a <I2C_0_SendData>
    5d6e:	91 e0       	ldi	r25, 0x01	; 1
    5d70:	84 30       	cpi	r24, 0x04	; 4
    5d72:	09 f4       	brne	.+2      	; 0x5d76 <ds3231_sync2nearestMinute+0x13c>
    5d74:	90 e0       	ldi	r25, 0x00	; 0
    5d76:	89 2f       	mov	r24, r25
    5d78:	01 c0       	rjmp	.+2      	; 0x5d7c <ds3231_sync2nearestMinute+0x142>
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
	BOOL err = FALSE;
    5d7a:	80 e0       	ldi	r24, 0x00	; 0
			err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4);
		}
	}

	return err;
}
    5d7c:	28 96       	adiw	r28, 0x08	; 8
    5d7e:	cd bf       	out	0x3d, r28	; 61
    5d80:	de bf       	out	0x3e, r29	; 62
    5d82:	df 91       	pop	r29
    5d84:	cf 91       	pop	r28
    5d86:	1f 91       	pop	r17
    5d88:	0f 91       	pop	r16
    5d8a:	ff 90       	pop	r15
    5d8c:	08 95       	ret

00005d8e <convertEpochToTimeString>:
/**
 *   Converts an epoch (seconds since 1900)  into a string with format "yymmddhhmmss"
 */
#define THIRTY_YEARS 946684800
char* convertEpochToTimeString(time_t epoch, char* buf, size_t size)
 {
    5d8e:	ef 92       	push	r14
    5d90:	ff 92       	push	r15
    5d92:	0f 93       	push	r16
    5d94:	1f 93       	push	r17
    5d96:	cf 93       	push	r28
    5d98:	df 93       	push	r29
    5d9a:	cd b7       	in	r28, 0x3d	; 61
    5d9c:	de b7       	in	r29, 0x3e	; 62
    5d9e:	60 97       	sbiw	r28, 0x10	; 16
    5da0:	cd bf       	out	0x3d, r28	; 61
    5da2:	de bf       	out	0x3e, r29	; 62
    5da4:	8a 01       	movw	r16, r20
    5da6:	79 01       	movw	r14, r18
    struct tm  ts;
	time_t t = epoch - THIRTY_YEARS;
    5da8:	dc 01       	movw	r26, r24
    5daa:	cb 01       	movw	r24, r22
    5dac:	80 58       	subi	r24, 0x80	; 128
    5dae:	93 44       	sbci	r25, 0x43	; 67
    5db0:	ad 46       	sbci	r26, 0x6D	; 109
    5db2:	b8 43       	sbci	r27, 0x38	; 56
    5db4:	8d 87       	std	Y+13, r24	; 0x0d
    5db6:	9e 87       	std	Y+14, r25	; 0x0e
    5db8:	af 87       	std	Y+15, r26	; 0x0f
    5dba:	b8 8b       	std	Y+16, r27	; 0x10

    // Format time, "ddd yyyy-mm-dd hh:mm:ss zzz"
    ts = *localtime(&t);
    5dbc:	ce 01       	movw	r24, r28
    5dbe:	0d 96       	adiw	r24, 0x0d	; 13
    5dc0:	0e 94 c0 01 	call	0x380	; 0x380 <localtime>
    5dc4:	fc 01       	movw	r30, r24
    5dc6:	9c e0       	ldi	r25, 0x0C	; 12
    5dc8:	de 01       	movw	r26, r28
    5dca:	11 96       	adiw	r26, 0x01	; 1
    5dcc:	01 90       	ld	r0, Z+
    5dce:	0d 92       	st	X+, r0
    5dd0:	9a 95       	dec	r25
    5dd2:	e1 f7       	brne	.-8      	; 0x5dcc <convertEpochToTimeString+0x3e>
    strftime(buf, size, "%a %Y-%m-%d %H:%M:%S", &ts);
    5dd4:	9e 01       	movw	r18, r28
    5dd6:	2f 5f       	subi	r18, 0xFF	; 255
    5dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    5dda:	4d e9       	ldi	r20, 0x9D	; 157
    5ddc:	54 e4       	ldi	r21, 0x44	; 68
    5dde:	b7 01       	movw	r22, r14
    5de0:	c8 01       	movw	r24, r16
    5de2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <strftime>
   return buf;
 }
    5de6:	c8 01       	movw	r24, r16
    5de8:	60 96       	adiw	r28, 0x10	; 16
    5dea:	cd bf       	out	0x3d, r28	; 61
    5dec:	de bf       	out	0x3e, r29	; 62
    5dee:	df 91       	pop	r29
    5df0:	cf 91       	pop	r28
    5df2:	1f 91       	pop	r17
    5df4:	0f 91       	pop	r16
    5df6:	ff 90       	pop	r15
    5df8:	ef 90       	pop	r14
    5dfa:	08 95       	ret

00005dfc <_ZN13EepromManagerC1Ev>:
extern uint16_t g_80m_power_level_mW;

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
    5dfc:	08 95       	ret

00005dfe <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
    5dfe:	08 95       	ret

00005e00 <_Z21avr_eeprom_write_bytejh>:
#include <avr/io.h>

typedef uint16_t eeprom_addr_t;

// to write
void avr_eeprom_write_byte(eeprom_addr_t index, uint8_t in) {
    5e00:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    5e02:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    5e06:	91 fd       	sbrc	r25, 1
    5e08:	fc cf       	rjmp	.-8      	; 0x5e02 <_Z21avr_eeprom_write_bytejh+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    5e0a:	8d e9       	ldi	r24, 0x9D	; 157
    5e0c:	93 e1       	ldi	r25, 0x13	; 19
    5e0e:	84 bf       	out	0x34, r24	; 52
    5e10:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    5e14:	f9 01       	movw	r30, r18
    5e16:	fc 5e       	subi	r31, 0xEC	; 236
    5e18:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    5e1a:	90 e0       	ldi	r25, 0x00	; 0
    5e1c:	84 bf       	out	0x34, r24	; 52
    5e1e:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    5e22:	08 95       	ret

00005e24 <_Z21avr_eeprom_write_wordjj>:
}

void avr_eeprom_write_word(eeprom_addr_t index, uint16_t in) {
    5e24:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    5e26:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    5e2a:	91 fd       	sbrc	r25, 1
    5e2c:	fc cf       	rjmp	.-8      	; 0x5e26 <_Z21avr_eeprom_write_wordjj+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    5e2e:	8d e9       	ldi	r24, 0x9D	; 157
    5e30:	93 e1       	ldi	r25, 0x13	; 19
    5e32:	84 bf       	out	0x34, r24	; 52
    5e34:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint16_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    5e38:	f9 01       	movw	r30, r18
    5e3a:	fc 5e       	subi	r31, 0xEC	; 236
    5e3c:	60 83       	st	Z, r22
    5e3e:	71 83       	std	Z+1, r23	; 0x01
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    5e40:	90 e0       	ldi	r25, 0x00	; 0
    5e42:	84 bf       	out	0x34, r24	; 52
    5e44:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    5e48:	08 95       	ret

00005e4a <_Z22avr_eeprom_write_dwordjm>:
}

void avr_eeprom_write_dword(eeprom_addr_t index, uint32_t in) {
    5e4a:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    5e4c:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    5e50:	91 fd       	sbrc	r25, 1
    5e52:	fc cf       	rjmp	.-8      	; 0x5e4c <_Z22avr_eeprom_write_dwordjm+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    5e54:	8d e9       	ldi	r24, 0x9D	; 157
    5e56:	93 e1       	ldi	r25, 0x13	; 19
    5e58:	84 bf       	out	0x34, r24	; 52
    5e5a:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint32_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    5e5e:	f9 01       	movw	r30, r18
    5e60:	fc 5e       	subi	r31, 0xEC	; 236
    5e62:	40 83       	st	Z, r20
    5e64:	51 83       	std	Z+1, r21	; 0x01
    5e66:	62 83       	std	Z+2, r22	; 0x02
    5e68:	73 83       	std	Z+3, r23	; 0x03
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	84 bf       	out	0x34, r24	; 52
    5e6e:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    5e72:	08 95       	ret

00005e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
}

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
    5e74:	0f 93       	push	r16
    5e76:	1f 93       	push	r17
    5e78:	cf 93       	push	r28
    5e7a:	df 93       	push	r29
	if(!val)
    5e7c:	41 15       	cp	r20, r1
    5e7e:	51 05       	cpc	r21, r1
    5e80:	09 f4       	brne	.+2      	; 0x5e84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
    5e82:	7c c0       	rjmp	.+248    	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
	{
		return;
	}

	switch(v)
    5e84:	86 2f       	mov	r24, r22
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	84 33       	cpi	r24, 0x34	; 52
    5e8a:	91 05       	cpc	r25, r1
    5e8c:	08 f0       	brcs	.+2      	; 0x5e90 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x1c>
    5e8e:	76 c0       	rjmp	.+236    	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
    5e90:	ea 01       	movw	r28, r20
    5e92:	fc 01       	movw	r30, r24
    5e94:	eb 57       	subi	r30, 0x7B	; 123
    5e96:	ff 4f       	sbci	r31, 0xFF	; 255
    5e98:	0c 94 87 48 	jmp	0x910e	; 0x910e <__tablejump2__>
	{
		case Frequency:
		{
			avr_eeprom_write_dword(Frequency, *(uint32_t*)val);
    5e9c:	48 81       	ld	r20, Y
    5e9e:	59 81       	ldd	r21, Y+1	; 0x01
    5ea0:	6a 81       	ldd	r22, Y+2	; 0x02
    5ea2:	7b 81       	ldd	r23, Y+3	; 0x03
    5ea4:	8b e2       	ldi	r24, 0x2B	; 43
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
    5ea8:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    5eac:	67 c0       	rjmp	.+206    	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RTTY_offset:
		{
			avr_eeprom_write_dword(RTTY_offset, *(uint32_t*)val);
    5eae:	48 81       	ld	r20, Y
    5eb0:	59 81       	ldd	r21, Y+1	; 0x01
    5eb2:	6a 81       	ldd	r22, Y+2	; 0x02
    5eb4:	7b 81       	ldd	r23, Y+3	; 0x03
    5eb6:	8f e2       	ldi	r24, 0x2F	; 47
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    5ebe:	5e c0       	rjmp	.+188    	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RF_Power:
		{
			avr_eeprom_write_word(RF_Power, *(uint32_t*)val);			
    5ec0:	68 81       	ld	r22, Y
    5ec2:	79 81       	ldd	r23, Y+1	; 0x01
    5ec4:	83 e3       	ldi	r24, 0x33	; 51
    5ec6:	90 e0       	ldi	r25, 0x00	; 0
    5ec8:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_Z21avr_eeprom_write_wordjj>
		}
		break;
    5ecc:	57 c0       	rjmp	.+174    	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
    5ece:	8a 01       	movw	r16, r20
    5ed0:	0f 5f       	subi	r16, 0xFF	; 255
    5ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ed4:	68 81       	ld	r22, Y
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;
    5ed6:	8a e0       	ldi	r24, 0x0A	; 10
    5ed8:	90 e0       	ldi	r25, 0x00	; 0

			while(c)
    5eda:	66 23       	and	r22, r22
    5edc:	51 f0       	breq	.+20     	; 0x5ef2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x7e>
			{
				avr_eeprom_write_byte(j++, c);
    5ede:	ec 01       	movw	r28, r24
    5ee0:	21 96       	adiw	r28, 0x01	; 1
    5ee2:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>
				c = *char_addr++;
    5ee6:	f8 01       	movw	r30, r16
    5ee8:	60 81       	ld	r22, Z
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
			{
				avr_eeprom_write_byte(j++, c);
    5eea:	ce 01       	movw	r24, r28
				c = *char_addr++;
    5eec:	0f 5f       	subi	r16, 0xFF	; 255
    5eee:	1f 4f       	sbci	r17, 0xFF	; 255
			char* char_addr = (char*)val;
			char c = *char_addr++;
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
    5ef0:	f4 cf       	rjmp	.-24     	; 0x5eda <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x66>
			{
				avr_eeprom_write_byte(j++, c);
				c = *char_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    5ef2:	60 e0       	ldi	r22, 0x00	; 0
    5ef4:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    5ef8:	41 c0       	rjmp	.+130    	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
    5efa:	8a 01       	movw	r16, r20
    5efc:	0f 5f       	subi	r16, 0xFF	; 255
    5efe:	1f 4f       	sbci	r17, 0xFF	; 255
    5f00:	68 81       	ld	r22, Y
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
    5f02:	8f e1       	ldi	r24, 0x1F	; 31
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    5f04:	66 23       	and	r22, r22
    5f06:	59 f0       	breq	.+22     	; 0x5f1e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				avr_eeprom_write_byte(j++, c);
    5f08:	c1 e0       	ldi	r28, 0x01	; 1
    5f0a:	c8 0f       	add	r28, r24
    5f0c:	90 e0       	ldi	r25, 0x00	; 0
    5f0e:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>
				c = *uint8_addr++;
    5f12:	f8 01       	movw	r30, r16
    5f14:	60 81       	ld	r22, Z
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
			{
				avr_eeprom_write_byte(j++, c);
    5f16:	8c 2f       	mov	r24, r28
				c = *uint8_addr++;
    5f18:	0f 5f       	subi	r16, 0xFF	; 255
    5f1a:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    5f1c:	f3 cf       	rjmp	.-26     	; 0x5f04 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x90>
			{
				avr_eeprom_write_byte(j++, c);
				c = *uint8_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    5f1e:	60 e0       	ldi	r22, 0x00	; 0
    5f20:	90 e0       	ldi	r25, 0x00	; 0
    5f22:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    5f26:	2a c0       	rjmp	.+84     	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Id_codespeed:
		{
			avr_eeprom_write_byte(Id_codespeed, *(uint8_t*)val);
    5f28:	68 81       	ld	r22, Y
    5f2a:	88 e2       	ldi	r24, 0x28	; 40
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    5f32:	24 c0       	rjmp	.+72     	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Fox_setting:
		{
			avr_eeprom_write_byte(Fox_setting, *(uint8_t*)val);
    5f34:	68 81       	ld	r22, Y
    5f36:	89 e2       	ldi	r24, 0x29	; 41
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    5f3e:	1e c0       	rjmp	.+60     	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_start_epoch:
		{
			avr_eeprom_write_dword(Event_start_epoch, *(uint32_t*)val);
    5f40:	48 81       	ld	r20, Y
    5f42:	59 81       	ldd	r21, Y+1	; 0x01
    5f44:	6a 81       	ldd	r22, Y+2	; 0x02
    5f46:	7b 81       	ldd	r23, Y+3	; 0x03
    5f48:	82 e0       	ldi	r24, 0x02	; 2
    5f4a:	90 e0       	ldi	r25, 0x00	; 0
    5f4c:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    5f50:	15 c0       	rjmp	.+42     	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_finish_epoch:
		{
			avr_eeprom_write_dword(Event_finish_epoch, *(uint32_t*)val);
    5f52:	48 81       	ld	r20, Y
    5f54:	59 81       	ldd	r21, Y+1	; 0x01
    5f56:	6a 81       	ldd	r22, Y+2	; 0x02
    5f58:	7b 81       	ldd	r23, Y+3	; 0x03
    5f5a:	86 e0       	ldi	r24, 0x06	; 6
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    5f62:	0c c0       	rjmp	.+24     	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Utc_offset:
		{
			avr_eeprom_write_byte(Utc_offset, *(uint8_t*)val);
    5f64:	68 81       	ld	r22, Y
    5f66:	8a e2       	ldi	r24, 0x2A	; 42
    5f68:	90 e0       	ldi	r25, 0x00	; 0
    5f6a:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    5f6e:	06 c0       	rjmp	.+12     	; 0x5f7c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Eeprom_initialization_flag:
		{
			avr_eeprom_write_word(Eeprom_initialization_flag, *(uint16_t*)val);
    5f70:	68 81       	ld	r22, Y
    5f72:	79 81       	ldd	r23, Y+1	; 0x01
    5f74:	80 e0       	ldi	r24, 0x00	; 0
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_Z21avr_eeprom_write_wordjj>
		{

		}
		break;
	}
}
    5f7c:	df 91       	pop	r29
    5f7e:	cf 91       	pop	r28
    5f80:	1f 91       	pop	r17
    5f82:	0f 91       	pop	r16
    5f84:	08 95       	ret

00005f86 <_ZN13EepromManager13saveAllEEPROMEv>:

/** 
 * Store any changed EEPROM variables
 */
void EepromManager::saveAllEEPROM(void)
{
    5f86:	ef 92       	push	r14
    5f88:	ff 92       	push	r15
    5f8a:	0f 93       	push	r16
    5f8c:	1f 93       	push	r17
    5f8e:	cf 93       	push	r28
    5f90:	df 93       	push	r29
    5f92:	7c 01       	movw	r14, r24
	uint16_t i;
	
	if(g_id_codespeed != eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)))
    5f94:	88 e2       	ldi	r24, 0x28	; 40
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    5f9c:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <g_id_codespeed>
    5fa0:	89 17       	cp	r24, r25
    5fa2:	31 f0       	breq	.+12     	; 0x5fb0 <_ZN13EepromManager13saveAllEEPROMEv+0x2a>
	{
		updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    5fa4:	4b e0       	ldi	r20, 0x0B	; 11
    5fa6:	50 e4       	ldi	r21, 0x40	; 64
    5fa8:	68 e2       	ldi	r22, 0x28	; 40
    5faa:	c7 01       	movw	r24, r14
    5fac:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_fox != eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)))
    5fb0:	89 e2       	ldi	r24, 0x29	; 41
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    5fb8:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <g_fox>
    5fbc:	89 17       	cp	r24, r25
    5fbe:	31 f0       	breq	.+12     	; 0x5fcc <_ZN13EepromManager13saveAllEEPROMEv+0x46>
	{
		updateEEPROMVar(Fox_setting, (void*)&g_fox);
    5fc0:	4b e1       	ldi	r20, 0x1B	; 27
    5fc2:	50 e4       	ldi	r21, 0x40	; 64
    5fc4:	69 e2       	ldi	r22, 0x29	; 41
    5fc6:	c7 01       	movw	r24, r14
    5fc8:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_start_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch)))
    5fcc:	82 e0       	ldi	r24, 0x02	; 2
    5fce:	90 e0       	ldi	r25, 0x00	; 0
    5fd0:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <eeprom_read_dword>
    5fd4:	00 91 21 46 	lds	r16, 0x4621	; 0x804621 <g_event_start_epoch>
    5fd8:	10 91 22 46 	lds	r17, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    5fdc:	20 91 23 46 	lds	r18, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    5fe0:	30 91 24 46 	lds	r19, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    5fe4:	60 17       	cp	r22, r16
    5fe6:	71 07       	cpc	r23, r17
    5fe8:	82 07       	cpc	r24, r18
    5fea:	93 07       	cpc	r25, r19
    5fec:	31 f0       	breq	.+12     	; 0x5ffa <_ZN13EepromManager13saveAllEEPROMEv+0x74>
	{
		updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    5fee:	41 e2       	ldi	r20, 0x21	; 33
    5ff0:	56 e4       	ldi	r21, 0x46	; 70
    5ff2:	62 e0       	ldi	r22, 0x02	; 2
    5ff4:	c7 01       	movw	r24, r14
    5ff6:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_finish_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch)))
    5ffa:	86 e0       	ldi	r24, 0x06	; 6
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <eeprom_read_dword>
    6002:	00 91 25 46 	lds	r16, 0x4625	; 0x804625 <g_event_finish_epoch>
    6006:	10 91 26 46 	lds	r17, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    600a:	20 91 27 46 	lds	r18, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    600e:	30 91 28 46 	lds	r19, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    6012:	60 17       	cp	r22, r16
    6014:	71 07       	cpc	r23, r17
    6016:	82 07       	cpc	r24, r18
    6018:	93 07       	cpc	r25, r19
    601a:	31 f0       	breq	.+12     	; 0x6028 <_ZN13EepromManager13saveAllEEPROMEv+0xa2>
	{
		updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    601c:	45 e2       	ldi	r20, 0x25	; 37
    601e:	56 e4       	ldi	r21, 0x46	; 70
    6020:	66 e0       	ldi	r22, 0x06	; 6
    6022:	c7 01       	movw	r24, r14
    6024:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
    6028:	c0 91 29 46 	lds	r28, 0x4629	; 0x804629 <g_utc_offset>
    602c:	0c 2e       	mov	r0, r28
    602e:	00 0c       	add	r0, r0
    6030:	dd 0b       	sbc	r29, r29
    6032:	8a e2       	ldi	r24, 0x2A	; 42
    6034:	90 e0       	ldi	r25, 0x00	; 0
    6036:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    603a:	90 e0       	ldi	r25, 0x00	; 0
    603c:	c8 17       	cp	r28, r24
    603e:	d9 07       	cpc	r29, r25
    6040:	31 f0       	breq	.+12     	; 0x604e <_ZN13EepromManager13saveAllEEPROMEv+0xc8>
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    6042:	49 e2       	ldi	r20, 0x29	; 41
    6044:	56 e4       	ldi	r21, 0x46	; 70
    6046:	6a e2       	ldi	r22, 0x2A	; 42
    6048:	c7 01       	movw	r24, r14
    604a:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    604e:	c0 e0       	ldi	r28, 0x00	; 0
    6050:	d0 e0       	ldi	r29, 0x00	; 0
    6052:	c4 31       	cpi	r28, 0x14	; 20
    6054:	d1 05       	cpc	r29, r1
    6056:	a0 f4       	brcc	.+40     	; 0x6080 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	{
		if(g_messages_text[STATION_ID][i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i]))))
    6058:	fe 01       	movw	r30, r28
    605a:	ea 52       	subi	r30, 0x2A	; 42
    605c:	fa 4b       	sbci	r31, 0xBA	; 186
    605e:	15 89       	ldd	r17, Z+21	; 0x15
    6060:	ce 01       	movw	r24, r28
    6062:	86 5f       	subi	r24, 0xF6	; 246
    6064:	9f 4f       	sbci	r25, 0xFF	; 255
    6066:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    606a:	18 17       	cp	r17, r24
    606c:	39 f0       	breq	.+14     	; 0x607c <_ZN13EepromManager13saveAllEEPROMEv+0xf6>
		{
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    606e:	4b ee       	ldi	r20, 0xEB	; 235
    6070:	55 e4       	ldi	r21, 0x45	; 69
    6072:	6a e0       	ldi	r22, 0x0A	; 10
    6074:	c7 01       	movw	r24, r14
    6076:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    607a:	02 c0       	rjmp	.+4      	; 0x6080 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    607c:	21 96       	adiw	r28, 0x01	; 1
    607e:	e9 cf       	rjmp	.-46     	; 0x6052 <_ZN13EepromManager13saveAllEEPROMEv+0xcc>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6080:	c0 e0       	ldi	r28, 0x00	; 0
    6082:	d0 e0       	ldi	r29, 0x00	; 0
    6084:	c8 30       	cpi	r28, 0x08	; 8
    6086:	d1 05       	cpc	r29, r1
    6088:	a0 f4       	brcc	.+40     	; 0x60b2 <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
	{
		if(g_unlockCode[i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i]))))
    608a:	fe 01       	movw	r30, r28
    608c:	e6 5d       	subi	r30, 0xD6	; 214
    608e:	f9 4b       	sbci	r31, 0xB9	; 185
    6090:	10 81       	ld	r17, Z
    6092:	ce 01       	movw	r24, r28
    6094:	81 5e       	subi	r24, 0xE1	; 225
    6096:	9f 4f       	sbci	r25, 0xFF	; 255
    6098:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    609c:	18 17       	cp	r17, r24
    609e:	39 f0       	breq	.+14     	; 0x60ae <_ZN13EepromManager13saveAllEEPROMEv+0x128>
		{
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    60a0:	4a e2       	ldi	r20, 0x2A	; 42
    60a2:	56 e4       	ldi	r21, 0x46	; 70
    60a4:	6f e1       	ldi	r22, 0x1F	; 31
    60a6:	c7 01       	movw	r24, r14
    60a8:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    60ac:	02 c0       	rjmp	.+4      	; 0x60b2 <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    60ae:	21 96       	adiw	r28, 0x01	; 1
    60b0:	e9 cf       	rjmp	.-46     	; 0x6084 <_ZN13EepromManager13saveAllEEPROMEv+0xfe>
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
			break;
		}
	}
	
	if(g_80m_frequency != eeprom_read_dword(&(EepromManager::ee_vars.frequency)))
    60b2:	8b e2       	ldi	r24, 0x2B	; 43
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <eeprom_read_dword>
    60ba:	00 91 2c 40 	lds	r16, 0x402C	; 0x80402c <g_80m_frequency>
    60be:	10 91 2d 40 	lds	r17, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    60c2:	20 91 2e 40 	lds	r18, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    60c6:	30 91 2f 40 	lds	r19, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    60ca:	60 17       	cp	r22, r16
    60cc:	71 07       	cpc	r23, r17
    60ce:	82 07       	cpc	r24, r18
    60d0:	93 07       	cpc	r25, r19
    60d2:	31 f0       	breq	.+12     	; 0x60e0 <_ZN13EepromManager13saveAllEEPROMEv+0x15a>
	{
		updateEEPROMVar(Frequency, (void*)&g_80m_frequency);
    60d4:	4c e2       	ldi	r20, 0x2C	; 44
    60d6:	50 e4       	ldi	r21, 0x40	; 64
    60d8:	6b e2       	ldi	r22, 0x2B	; 43
    60da:	c7 01       	movw	r24, r14
    60dc:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_rtty_offset != eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset)))
    60e0:	8f e2       	ldi	r24, 0x2F	; 47
    60e2:	90 e0       	ldi	r25, 0x00	; 0
    60e4:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <eeprom_read_dword>
    60e8:	00 91 32 40 	lds	r16, 0x4032	; 0x804032 <g_rtty_offset>
    60ec:	10 91 33 40 	lds	r17, 0x4033	; 0x804033 <g_rtty_offset+0x1>
    60f0:	20 91 34 40 	lds	r18, 0x4034	; 0x804034 <g_rtty_offset+0x2>
    60f4:	30 91 35 40 	lds	r19, 0x4035	; 0x804035 <g_rtty_offset+0x3>
    60f8:	60 17       	cp	r22, r16
    60fa:	71 07       	cpc	r23, r17
    60fc:	82 07       	cpc	r24, r18
    60fe:	93 07       	cpc	r25, r19
    6100:	31 f0       	breq	.+12     	; 0x610e <_ZN13EepromManager13saveAllEEPROMEv+0x188>
	{
		updateEEPROMVar(RTTY_offset, (void*)&g_rtty_offset);
    6102:	42 e3       	ldi	r20, 0x32	; 50
    6104:	50 e4       	ldi	r21, 0x40	; 64
    6106:	6f e2       	ldi	r22, 0x2F	; 47
    6108:	c7 01       	movw	r24, r14
    610a:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
    610e:	83 e3       	ldi	r24, 0x33	; 51
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <eeprom_read_word>
    6116:	20 91 30 40 	lds	r18, 0x4030	; 0x804030 <g_80m_power_level_mW>
    611a:	30 91 31 40 	lds	r19, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    611e:	82 17       	cp	r24, r18
    6120:	93 07       	cpc	r25, r19
    6122:	31 f0       	breq	.+12     	; 0x6130 <_ZN13EepromManager13saveAllEEPROMEv+0x1aa>
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
    6124:	40 e3       	ldi	r20, 0x30	; 48
    6126:	50 e4       	ldi	r21, 0x40	; 64
    6128:	63 e3       	ldi	r22, 0x33	; 51
    612a:	c7 01       	movw	r24, r14
    612c:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
}
    6130:	df 91       	pop	r29
    6132:	cf 91       	pop	r28
    6134:	1f 91       	pop	r17
    6136:	0f 91       	pop	r16
    6138:	ff 90       	pop	r15
    613a:	ef 90       	pop	r14
    613c:	08 95       	ret

0000613e <_ZN13EepromManager11readNonVolsEv>:


BOOL EepromManager::readNonVols(void)
{
    613e:	cf 93       	push	r28
    6140:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    6142:	80 e0       	ldi	r24, 0x00	; 0
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    614a:	8e 3c       	cpi	r24, 0xCE	; 206
    614c:	91 05       	cpc	r25, r1
    614e:	09 f0       	breq	.+2      	; 0x6152 <_ZN13EepromManager11readNonVolsEv+0x14>
    6150:	dc c0       	rjmp	.+440    	; 0x630a <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    6152:	88 e2       	ldi	r24, 0x28	; 40
    6154:	90 e0       	ldi	r25, 0x00	; 0
    6156:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    615a:	85 31       	cpi	r24, 0x15	; 21
    615c:	20 f4       	brcc	.+8      	; 0x6166 <_ZN13EepromManager11readNonVolsEv+0x28>
    615e:	85 30       	cpi	r24, 0x05	; 5
    6160:	18 f4       	brcc	.+6      	; 0x6168 <_ZN13EepromManager11readNonVolsEv+0x2a>
    6162:	85 e0       	ldi	r24, 0x05	; 5
    6164:	01 c0       	rjmp	.+2      	; 0x6168 <_ZN13EepromManager11readNonVolsEv+0x2a>
    6166:	84 e1       	ldi	r24, 0x14	; 20
    6168:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    616c:	89 e2       	ldi	r24, 0x29	; 41
    616e:	90 e0       	ldi	r25, 0x00	; 0
    6170:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    6174:	82 31       	cpi	r24, 0x12	; 18
    6176:	08 f0       	brcs	.+2      	; 0x617a <_ZN13EepromManager11readNonVolsEv+0x3c>
    6178:	81 e1       	ldi	r24, 0x11	; 17
    617a:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    617e:	82 e0       	ldi	r24, 0x02	; 2
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <eeprom_read_dword>
    6186:	60 93 21 46 	sts	0x4621, r22	; 0x804621 <g_event_start_epoch>
    618a:	70 93 22 46 	sts	0x4622, r23	; 0x804622 <g_event_start_epoch+0x1>
    618e:	80 93 23 46 	sts	0x4623, r24	; 0x804623 <g_event_start_epoch+0x2>
    6192:	90 93 24 46 	sts	0x4624, r25	; 0x804624 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    6196:	86 e0       	ldi	r24, 0x06	; 6
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <eeprom_read_dword>
    619e:	60 93 25 46 	sts	0x4625, r22	; 0x804625 <g_event_finish_epoch>
    61a2:	70 93 26 46 	sts	0x4626, r23	; 0x804626 <g_event_finish_epoch+0x1>
    61a6:	80 93 27 46 	sts	0x4627, r24	; 0x804627 <g_event_finish_epoch+0x2>
    61aa:	90 93 28 46 	sts	0x4628, r25	; 0x804628 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    61ae:	8a e2       	ldi	r24, 0x2A	; 42
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    61b6:	80 93 29 46 	sts	0x4629, r24	; 0x804629 <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    61ba:	c0 e0       	ldi	r28, 0x00	; 0
    61bc:	d0 e0       	ldi	r29, 0x00	; 0
    61be:	c4 31       	cpi	r28, 0x14	; 20
    61c0:	d1 05       	cpc	r29, r1
    61c2:	58 f4       	brcc	.+22     	; 0x61da <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    61c4:	ce 01       	movw	r24, r28
    61c6:	86 5f       	subi	r24, 0xF6	; 246
    61c8:	9f 4f       	sbci	r25, 0xFF	; 255
    61ca:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    61ce:	fe 01       	movw	r30, r28
    61d0:	ea 52       	subi	r30, 0x2A	; 42
    61d2:	fa 4b       	sbci	r31, 0xBA	; 186
    61d4:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    61d6:	81 11       	cpse	r24, r1
    61d8:	03 c0       	rjmp	.+6      	; 0x61e0 <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    61da:	c0 e0       	ldi	r28, 0x00	; 0
    61dc:	d0 e0       	ldi	r29, 0x00	; 0
    61de:	02 c0       	rjmp	.+4      	; 0x61e4 <_ZN13EepromManager11readNonVolsEv+0xa6>
    61e0:	21 96       	adiw	r28, 0x01	; 1
    61e2:	ed cf       	rjmp	.-38     	; 0x61be <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    61e4:	c8 30       	cpi	r28, 0x08	; 8
    61e6:	d1 05       	cpc	r29, r1
    61e8:	68 f4       	brcc	.+26     	; 0x6204 <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    61ea:	ce 01       	movw	r24, r28
    61ec:	81 5e       	subi	r24, 0xE1	; 225
    61ee:	9f 4f       	sbci	r25, 0xFF	; 255
    61f0:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <eeprom_read_byte>
    61f4:	fe 01       	movw	r30, r28
    61f6:	e6 5d       	subi	r30, 0xD6	; 214
    61f8:	f9 4b       	sbci	r31, 0xB9	; 185
    61fa:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    61fc:	88 23       	and	r24, r24
    61fe:	11 f0       	breq	.+4      	; 0x6204 <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6200:	21 96       	adiw	r28, 0x01	; 1
    6202:	f0 cf       	rjmp	.-32     	; 0x61e4 <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    6204:	8b e2       	ldi	r24, 0x2B	; 43
    6206:	90 e0       	ldi	r25, 0x00	; 0
    6208:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <eeprom_read_dword>
    620c:	61 30       	cpi	r22, 0x01	; 1
    620e:	29 e0       	ldi	r18, 0x09	; 9
    6210:	72 07       	cpc	r23, r18
    6212:	2d e3       	ldi	r18, 0x3D	; 61
    6214:	82 07       	cpc	r24, r18
    6216:	91 05       	cpc	r25, r1
    6218:	60 f4       	brcc	.+24     	; 0x6232 <_ZN13EepromManager11readNonVolsEv+0xf4>
    621a:	60 3e       	cpi	r22, 0xE0	; 224
    621c:	27 e6       	ldi	r18, 0x67	; 103
    621e:	72 07       	cpc	r23, r18
    6220:	25 e3       	ldi	r18, 0x35	; 53
    6222:	82 07       	cpc	r24, r18
    6224:	91 05       	cpc	r25, r1
    6226:	50 f4       	brcc	.+20     	; 0x623c <_ZN13EepromManager11readNonVolsEv+0xfe>
    6228:	40 ee       	ldi	r20, 0xE0	; 224
    622a:	37 e6       	ldi	r19, 0x67	; 103
    622c:	25 e3       	ldi	r18, 0x35	; 53
    622e:	80 e0       	ldi	r24, 0x00	; 0
    6230:	09 c0       	rjmp	.+18     	; 0x6244 <_ZN13EepromManager11readNonVolsEv+0x106>
    6232:	40 e0       	ldi	r20, 0x00	; 0
    6234:	39 e0       	ldi	r19, 0x09	; 9
    6236:	2d e3       	ldi	r18, 0x3D	; 61
    6238:	80 e0       	ldi	r24, 0x00	; 0
    623a:	04 c0       	rjmp	.+8      	; 0x6244 <_ZN13EepromManager11readNonVolsEv+0x106>
    623c:	46 2f       	mov	r20, r22
    623e:	37 2f       	mov	r19, r23
    6240:	28 2f       	mov	r18, r24
    6242:	89 2f       	mov	r24, r25
    6244:	40 93 2c 40 	sts	0x402C, r20	; 0x80402c <g_80m_frequency>
    6248:	30 93 2d 40 	sts	0x402D, r19	; 0x80402d <g_80m_frequency+0x1>
    624c:	20 93 2e 40 	sts	0x402E, r18	; 0x80402e <g_80m_frequency+0x2>
    6250:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    6254:	8f e2       	ldi	r24, 0x2F	; 47
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <eeprom_read_dword>
    625c:	60 93 32 40 	sts	0x4032, r22	; 0x804032 <g_rtty_offset>
    6260:	70 93 33 40 	sts	0x4033, r23	; 0x804033 <g_rtty_offset+0x1>
    6264:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <g_rtty_offset+0x2>
    6268:	90 93 35 40 	sts	0x4035, r25	; 0x804035 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    626c:	83 e3       	ldi	r24, 0x33	; 51
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <eeprom_read_word>
    6274:	89 38       	cpi	r24, 0x89	; 137
    6276:	23 e1       	ldi	r18, 0x13	; 19
    6278:	92 07       	cpc	r25, r18
    627a:	18 f0       	brcs	.+6      	; 0x6282 <_ZN13EepromManager11readNonVolsEv+0x144>
    627c:	28 e8       	ldi	r18, 0x88	; 136
    627e:	83 e1       	ldi	r24, 0x13	; 19
    6280:	02 c0       	rjmp	.+4      	; 0x6286 <_ZN13EepromManager11readNonVolsEv+0x148>
    6282:	28 2f       	mov	r18, r24
    6284:	89 2f       	mov	r24, r25
    6286:	20 93 30 40 	sts	0x4030, r18	; 0x804030 <g_80m_power_level_mW>
    628a:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    628e:	80 91 21 46 	lds	r24, 0x4621	; 0x804621 <g_event_start_epoch>
    6292:	90 91 22 46 	lds	r25, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    6296:	a0 91 23 46 	lds	r26, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    629a:	b0 91 24 46 	lds	r27, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    629e:	89 2b       	or	r24, r25
    62a0:	8a 2b       	or	r24, r26
    62a2:	8b 2b       	or	r24, r27
    62a4:	b9 f0       	breq	.+46     	; 0x62d4 <_ZN13EepromManager11readNonVolsEv+0x196>
    62a6:	40 91 25 46 	lds	r20, 0x4625	; 0x804625 <g_event_finish_epoch>
    62aa:	50 91 26 46 	lds	r21, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    62ae:	60 91 27 46 	lds	r22, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    62b2:	70 91 28 46 	lds	r23, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    62b6:	80 91 21 46 	lds	r24, 0x4621	; 0x804621 <g_event_start_epoch>
    62ba:	90 91 22 46 	lds	r25, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    62be:	a0 91 23 46 	lds	r26, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    62c2:	b0 91 24 46 	lds	r27, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    62c6:	84 17       	cp	r24, r20
    62c8:	95 07       	cpc	r25, r21
    62ca:	a6 07       	cpc	r26, r22
    62cc:	b7 07       	cpc	r27, r23
    62ce:	20 f4       	brcc	.+8      	; 0x62d8 <_ZN13EepromManager11readNonVolsEv+0x19a>
    62d0:	80 e0       	ldi	r24, 0x00	; 0
    62d2:	03 c0       	rjmp	.+6      	; 0x62da <_ZN13EepromManager11readNonVolsEv+0x19c>
    62d4:	80 e0       	ldi	r24, 0x00	; 0
    62d6:	01 c0       	rjmp	.+2      	; 0x62da <_ZN13EepromManager11readNonVolsEv+0x19c>
    62d8:	81 e0       	ldi	r24, 0x01	; 1
    62da:	88 23       	and	r24, r24
    62dc:	c1 f0       	breq	.+48     	; 0x630e <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    62de:	80 91 21 46 	lds	r24, 0x4621	; 0x804621 <g_event_start_epoch>
    62e2:	90 91 22 46 	lds	r25, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    62e6:	a0 91 23 46 	lds	r26, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    62ea:	b0 91 24 46 	lds	r27, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    62ee:	80 58       	subi	r24, 0x80	; 128
    62f0:	9e 4a       	sbci	r25, 0xAE	; 174
    62f2:	ae 4f       	sbci	r26, 0xFE	; 254
    62f4:	bf 4f       	sbci	r27, 0xFF	; 255
    62f6:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_event_finish_epoch>
    62fa:	90 93 26 46 	sts	0x4626, r25	; 0x804626 <g_event_finish_epoch+0x1>
    62fe:	a0 93 27 46 	sts	0x4627, r26	; 0x804627 <g_event_finish_epoch+0x2>
    6302:	b0 93 28 46 	sts	0x4628, r27	; 0x804628 <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
    6306:	80 e0       	ldi	r24, 0x00	; 0
    6308:	03 c0       	rjmp	.+6      	; 0x6310 <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
    630a:	81 e0       	ldi	r24, 0x01	; 1
    630c:	01 c0       	rjmp	.+2      	; 0x6310 <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
    630e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    6310:	df 91       	pop	r29
    6312:	cf 91       	pop	r28
    6314:	08 95       	ret

00006316 <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	BOOL EepromManager::initializeEEPROMVars(void)
	{
    6316:	ef 92       	push	r14
    6318:	ff 92       	push	r15
    631a:	0f 93       	push	r16
    631c:	1f 93       	push	r17
    631e:	cf 93       	push	r28
    6320:	df 93       	push	r29
		BOOL err = FALSE;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    6322:	80 e0       	ldi	r24, 0x00	; 0
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    632a:	8e 3c       	cpi	r24, 0xCE	; 206
    632c:	91 05       	cpc	r25, r1
    632e:	09 f4       	brne	.+2      	; 0x6332 <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    6330:	aa c0       	rjmp	.+340    	; 0x6486 <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    6332:	84 e1       	ldi	r24, 0x14	; 20
    6334:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    6338:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    633c:	88 e2       	ldi	r24, 0x28	; 40
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    6344:	81 e0       	ldi	r24, 0x01	; 1
    6346:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    634a:	60 91 1b 40 	lds	r22, 0x401B	; 0x80401b <g_fox>
    634e:	89 e2       	ldi	r24, 0x29	; 41
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    6356:	10 92 21 46 	sts	0x4621, r1	; 0x804621 <g_event_start_epoch>
    635a:	10 92 22 46 	sts	0x4622, r1	; 0x804622 <g_event_start_epoch+0x1>
    635e:	10 92 23 46 	sts	0x4623, r1	; 0x804623 <g_event_start_epoch+0x2>
    6362:	10 92 24 46 	sts	0x4624, r1	; 0x804624 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    6366:	40 91 21 46 	lds	r20, 0x4621	; 0x804621 <g_event_start_epoch>
    636a:	50 91 22 46 	lds	r21, 0x4622	; 0x804622 <g_event_start_epoch+0x1>
    636e:	60 91 23 46 	lds	r22, 0x4623	; 0x804623 <g_event_start_epoch+0x2>
    6372:	70 91 24 46 	lds	r23, 0x4624	; 0x804624 <g_event_start_epoch+0x3>
    6376:	82 e0       	ldi	r24, 0x02	; 2
    6378:	90 e0       	ldi	r25, 0x00	; 0
    637a:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    637e:	10 92 25 46 	sts	0x4625, r1	; 0x804625 <g_event_finish_epoch>
    6382:	10 92 26 46 	sts	0x4626, r1	; 0x804626 <g_event_finish_epoch+0x1>
    6386:	10 92 27 46 	sts	0x4627, r1	; 0x804627 <g_event_finish_epoch+0x2>
    638a:	10 92 28 46 	sts	0x4628, r1	; 0x804628 <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    638e:	40 91 25 46 	lds	r20, 0x4625	; 0x804625 <g_event_finish_epoch>
    6392:	50 91 26 46 	lds	r21, 0x4626	; 0x804626 <g_event_finish_epoch+0x1>
    6396:	60 91 27 46 	lds	r22, 0x4627	; 0x804627 <g_event_finish_epoch+0x2>
    639a:	70 91 28 46 	lds	r23, 0x4628	; 0x804628 <g_event_finish_epoch+0x3>
    639e:	86 e0       	ldi	r24, 0x06	; 6
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    63a6:	10 92 29 46 	sts	0x4629, r1	; 0x804629 <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    63aa:	60 91 29 46 	lds	r22, 0x4629	; 0x804629 <g_utc_offset>
    63ae:	8a e2       	ldi	r24, 0x2A	; 42
    63b0:	90 e0       	ldi	r25, 0x00	; 0
    63b2:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    63b6:	10 92 eb 45 	sts	0x45EB, r1	; 0x8045eb <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    63ba:	60 e0       	ldi	r22, 0x00	; 0
    63bc:	8a e0       	ldi	r24, 0x0A	; 10
    63be:	90 e0       	ldi	r25, 0x00	; 0
    63c0:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    63c4:	e2 eb       	ldi	r30, 0xB2	; 178
    63c6:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    63c8:	c0 e0       	ldi	r28, 0x00	; 0
    63ca:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    63cc:	8f e1       	ldi	r24, 0x1F	; 31
    63ce:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    63d0:	c4 30       	cpi	r28, 0x04	; 4
    63d2:	d1 05       	cpc	r29, r1
    63d4:	90 f4       	brcc	.+36     	; 0x63fa <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    63d6:	df 01       	movw	r26, r30
    63d8:	2d 91       	ld	r18, X+
    63da:	8d 01       	movw	r16, r26
    63dc:	de 01       	movw	r26, r28
    63de:	a6 5d       	subi	r26, 0xD6	; 214
    63e0:	b9 4b       	sbci	r27, 0xB9	; 185
    63e2:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    63e4:	60 81       	ld	r22, Z
    63e6:	7c 01       	movw	r14, r24
    63e8:	bf ef       	ldi	r27, 0xFF	; 255
    63ea:	eb 1a       	sub	r14, r27
    63ec:	fb 0a       	sbc	r15, r27
    63ee:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    63f2:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    63f4:	f8 01       	movw	r30, r16
    63f6:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    63f8:	eb cf       	rjmp	.-42     	; 0x63d0 <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    63fa:	60 e0       	ldi	r22, 0x00	; 0
    63fc:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    6400:	c6 5d       	subi	r28, 0xD6	; 214
    6402:	d9 4b       	sbci	r29, 0xB9	; 185
    6404:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    6406:	80 e2       	ldi	r24, 0x20	; 32
    6408:	94 e0       	ldi	r25, 0x04	; 4
    640a:	a6 e3       	ldi	r26, 0x36	; 54
    640c:	b0 e0       	ldi	r27, 0x00	; 0
    640e:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    6412:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    6416:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    641a:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    641e:	40 e2       	ldi	r20, 0x20	; 32
    6420:	54 e0       	ldi	r21, 0x04	; 4
    6422:	66 e3       	ldi	r22, 0x36	; 54
    6424:	70 e0       	ldi	r23, 0x00	; 0
    6426:	8b e2       	ldi	r24, 0x2B	; 43
    6428:	90 e0       	ldi	r25, 0x00	; 0
    642a:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    642e:	8a ea       	ldi	r24, 0xAA	; 170
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	a0 e0       	ldi	r26, 0x00	; 0
    6434:	b0 e0       	ldi	r27, 0x00	; 0
    6436:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <g_rtty_offset>
    643a:	90 93 33 40 	sts	0x4033, r25	; 0x804033 <g_rtty_offset+0x1>
    643e:	a0 93 34 40 	sts	0x4034, r26	; 0x804034 <g_rtty_offset+0x2>
    6442:	b0 93 35 40 	sts	0x4035, r27	; 0x804035 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    6446:	40 91 2c 40 	lds	r20, 0x402C	; 0x80402c <g_80m_frequency>
    644a:	50 91 2d 40 	lds	r21, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    644e:	60 91 2e 40 	lds	r22, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    6452:	70 91 2f 40 	lds	r23, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    6456:	8b e2       	ldi	r24, 0x2B	; 43
    6458:	90 e0       	ldi	r25, 0x00	; 0
    645a:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    645e:	84 ef       	ldi	r24, 0xF4	; 244
    6460:	91 e0       	ldi	r25, 0x01	; 1
    6462:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    6466:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    646a:	44 ef       	ldi	r20, 0xF4	; 244
    646c:	51 e0       	ldi	r21, 0x01	; 1
    646e:	60 e0       	ldi	r22, 0x00	; 0
    6470:	70 e0       	ldi	r23, 0x00	; 0
    6472:	83 e3       	ldi	r24, 0x33	; 51
    6474:	90 e0       	ldi	r25, 0x00	; 0
    6476:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    647a:	6e ec       	ldi	r22, 0xCE	; 206
    647c:	70 e0       	ldi	r23, 0x00	; 0
    647e:	80 e0       	ldi	r24, 0x00	; 0
    6480:	90 e0       	ldi	r25, 0x00	; 0
    6482:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    6486:	80 e0       	ldi	r24, 0x00	; 0
    6488:	df 91       	pop	r29
    648a:	cf 91       	pop	r28
    648c:	1f 91       	pop	r17
    648e:	0f 91       	pop	r16
    6490:	ff 90       	pop	r15
    6492:	ef 90       	pop	r14
    6494:	08 95       	ret

00006496 <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    6496:	ef 92       	push	r14
    6498:	ff 92       	push	r15
    649a:	0f 93       	push	r16
    649c:	1f 93       	push	r17
    649e:	cf 93       	push	r28
    64a0:	df 93       	push	r29
    64a2:	e4 2e       	mov	r14, r20
    64a4:	f5 2e       	mov	r15, r21
    64a6:	d6 2f       	mov	r29, r22
    64a8:	c7 2f       	mov	r28, r23
    64aa:	00 93 58 46 	sts	0x4658, r16	; 0x804658 <_SAMPLING_FREQUENCY>
    64ae:	10 93 59 46 	sts	0x4659, r17	; 0x804659 <_SAMPLING_FREQUENCY+0x1>
    64b2:	20 93 5a 46 	sts	0x465A, r18	; 0x80465a <_SAMPLING_FREQUENCY+0x2>
    64b6:	30 93 5b 46 	sts	0x465B, r19	; 0x80465b <_SAMPLING_FREQUENCY+0x3>
    64ba:	20 e0       	ldi	r18, 0x00	; 0
    64bc:	30 e0       	ldi	r19, 0x00	; 0
    64be:	41 e5       	ldi	r20, 0x51	; 81
    64c0:	53 e4       	ldi	r21, 0x43	; 67
    64c2:	6e 2d       	mov	r22, r14
    64c4:	7f 2d       	mov	r23, r15
    64c6:	8d 2f       	mov	r24, r29
    64c8:	9c 2f       	mov	r25, r28
    64ca:	0e 94 9c 47 	call	0x8f38	; 0x8f38 <__gesf2>
    64ce:	18 16       	cp	r1, r24
    64d0:	8c f0       	brlt	.+34     	; 0x64f4 <_ZN8GoertzelC1Eff+0x5e>
    64d2:	20 e0       	ldi	r18, 0x00	; 0
    64d4:	30 e0       	ldi	r19, 0x00	; 0
    64d6:	48 ec       	ldi	r20, 0xC8	; 200
    64d8:	52 e4       	ldi	r21, 0x42	; 66
    64da:	6e 2d       	mov	r22, r14
    64dc:	7f 2d       	mov	r23, r15
    64de:	8d 2f       	mov	r24, r29
    64e0:	9c 2f       	mov	r25, r28
    64e2:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <__cmpsf2>
    64e6:	88 23       	and	r24, r24
    64e8:	4c f4       	brge	.+18     	; 0x64fc <_ZN8GoertzelC1Eff+0x66>
    64ea:	e1 2c       	mov	r14, r1
    64ec:	f1 2c       	mov	r15, r1
    64ee:	d8 ec       	ldi	r29, 0xC8	; 200
    64f0:	c2 e4       	ldi	r28, 0x42	; 66
    64f2:	04 c0       	rjmp	.+8      	; 0x64fc <_ZN8GoertzelC1Eff+0x66>
    64f4:	e1 2c       	mov	r14, r1
    64f6:	f1 2c       	mov	r15, r1
    64f8:	d1 e5       	ldi	r29, 0x51	; 81
    64fa:	c3 e4       	ldi	r28, 0x43	; 67
    64fc:	6e 2d       	mov	r22, r14
    64fe:	7f 2d       	mov	r23, r15
    6500:	8d 2f       	mov	r24, r29
    6502:	9c 2f       	mov	r25, r28
    6504:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    6508:	60 93 56 46 	sts	0x4656, r22	; 0x804656 <_N>
    650c:	70 93 57 46 	sts	0x4657, r23	; 0x804657 <_N+0x1>
    6510:	80 91 56 46 	lds	r24, 0x4656	; 0x804656 <_N>
    6514:	90 91 57 46 	lds	r25, 0x4657	; 0x804657 <_N+0x1>
    6518:	88 0f       	add	r24, r24
    651a:	99 1f       	adc	r25, r25
    651c:	0e 94 b9 48 	call	0x9172	; 0x9172 <malloc>
    6520:	80 93 51 46 	sts	0x4651, r24	; 0x804651 <testData>
    6524:	90 93 52 46 	sts	0x4652, r25	; 0x804652 <testData+0x1>
    6528:	df 91       	pop	r29
    652a:	cf 91       	pop	r28
    652c:	1f 91       	pop	r17
    652e:	0f 91       	pop	r16
    6530:	ff 90       	pop	r15
    6532:	ef 90       	pop	r14
    6534:	08 95       	ret

00006536 <_ZN8GoertzelD1Ev>:
    6536:	80 91 51 46 	lds	r24, 0x4651	; 0x804651 <testData>
    653a:	90 91 52 46 	lds	r25, 0x4652	; 0x804652 <testData+0x1>
    653e:	0e 94 51 49 	call	0x92a2	; 0x92a2 <free>
    6542:	08 95       	ret

00006544 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    6544:	80 91 53 46 	lds	r24, 0x4653	; 0x804653 <_samplesReady>
    6548:	88 23       	and	r24, r24
    654a:	19 f0       	breq	.+6      	; 0x6552 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    654c:	80 91 53 46 	lds	r24, 0x4653	; 0x804653 <_samplesReady>
    6550:	08 95       	ret
	}

	testData[_index] = data;
    6552:	e0 91 54 46 	lds	r30, 0x4654	; 0x804654 <_index>
    6556:	f0 91 55 46 	lds	r31, 0x4655	; 0x804655 <_index+0x1>
    655a:	ee 0f       	add	r30, r30
    655c:	ff 1f       	adc	r31, r31
    655e:	80 91 51 46 	lds	r24, 0x4651	; 0x804651 <testData>
    6562:	90 91 52 46 	lds	r25, 0x4652	; 0x804652 <testData+0x1>
    6566:	e8 0f       	add	r30, r24
    6568:	f9 1f       	adc	r31, r25
    656a:	60 83       	st	Z, r22
    656c:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    656e:	80 91 54 46 	lds	r24, 0x4654	; 0x804654 <_index>
    6572:	90 91 55 46 	lds	r25, 0x4655	; 0x804655 <_index+0x1>
    6576:	01 96       	adiw	r24, 0x01	; 1
    6578:	80 93 54 46 	sts	0x4654, r24	; 0x804654 <_index>
    657c:	90 93 55 46 	sts	0x4655, r25	; 0x804655 <_index+0x1>
	if(_index >= _N)
    6580:	20 91 54 46 	lds	r18, 0x4654	; 0x804654 <_index>
    6584:	30 91 55 46 	lds	r19, 0x4655	; 0x804655 <_index+0x1>
    6588:	80 91 56 46 	lds	r24, 0x4656	; 0x804656 <_N>
    658c:	90 91 57 46 	lds	r25, 0x4657	; 0x804657 <_N+0x1>
    6590:	28 17       	cp	r18, r24
    6592:	39 07       	cpc	r19, r25
    6594:	3c f0       	brlt	.+14     	; 0x65a4 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    6596:	10 92 54 46 	sts	0x4654, r1	; 0x804654 <_index>
    659a:	10 92 55 46 	sts	0x4655, r1	; 0x804655 <_index+0x1>
		_samplesReady = true;
    659e:	81 e0       	ldi	r24, 0x01	; 1
    65a0:	80 93 53 46 	sts	0x4653, r24	; 0x804653 <_samplesReady>
	}

	return(_samplesReady);
    65a4:	80 91 53 46 	lds	r24, 0x4653	; 0x804653 <_samplesReady>
}
    65a8:	08 95       	ret

000065aa <_ZL11i2c_0_WaitWv>:
	return retVal;
}

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    65aa:	8c e2       	ldi	r24, 0x2C	; 44
    65ac:	91 e0       	ldi	r25, 0x01	; 1
    65ae:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    65b2:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    65b6:	80 e0       	ldi	r24, 0x00	; 0
    65b8:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    65bc:	90 7c       	andi	r25, 0xC0	; 192
    65be:	31 f0       	breq	.+12     	; 0x65cc <_ZL11i2c_0_WaitWv+0x22>
    65c0:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    65c4:	84 fd       	sbrc	r24, 4
    65c6:	07 c0       	rjmp	.+14     	; 0x65d6 <_ZL11i2c_0_WaitWv+0x2c>
    65c8:	81 e0       	ldi	r24, 0x01	; 1
    65ca:	08 c0       	rjmp	.+16     	; 0x65dc <_ZL11i2c_0_WaitWv+0x32>
    65cc:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    65d0:	9c 70       	andi	r25, 0x0C	; 12
    65d2:	19 f4       	brne	.+6      	; 0x65da <_ZL11i2c_0_WaitWv+0x30>
    65d4:	03 c0       	rjmp	.+6      	; 0x65dc <_ZL11i2c_0_WaitWv+0x32>
    65d6:	82 e0       	ldi	r24, 0x02	; 2
    65d8:	01 c0       	rjmp	.+2      	; 0x65dc <_ZL11i2c_0_WaitWv+0x32>
    65da:	84 e0       	ldi	r24, 0x04	; 4
    65dc:	81 11       	cpse	r24, r1
    65de:	08 c0       	rjmp	.+16     	; 0x65f0 <_ZL11i2c_0_WaitWv+0x46>
    65e0:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    65e4:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    65e8:	23 2b       	or	r18, r19
    65ea:	21 f4       	brne	.+8      	; 0x65f4 <_ZL11i2c_0_WaitWv+0x4a>
    65ec:	90 e0       	ldi	r25, 0x00	; 0
    65ee:	03 c0       	rjmp	.+6      	; 0x65f6 <_ZL11i2c_0_WaitWv+0x4c>
    65f0:	90 e0       	ldi	r25, 0x00	; 0
    65f2:	01 c0       	rjmp	.+2      	; 0x65f6 <_ZL11i2c_0_WaitWv+0x4c>
    65f4:	91 e0       	ldi	r25, 0x01	; 1
    65f6:	91 11       	cpse	r25, r1
    65f8:	df cf       	rjmp	.-66     	; 0x65b8 <_ZL11i2c_0_WaitWv+0xe>
    65fa:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    65fe:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6602:	23 2b       	or	r18, r19
    6604:	09 f4       	brne	.+2      	; 0x6608 <_ZL11i2c_0_WaitWv+0x5e>
    6606:	84 e0       	ldi	r24, 0x04	; 4
    6608:	08 95       	ret

0000660a <_ZL11i2c_0_WaitRv>:
    660a:	88 ec       	ldi	r24, 0xC8	; 200
    660c:	90 e0       	ldi	r25, 0x00	; 0
    660e:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    6612:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6616:	80 e0       	ldi	r24, 0x00	; 0
    6618:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    661c:	90 7c       	andi	r25, 0xC0	; 192
    661e:	29 f4       	brne	.+10     	; 0x662a <_ZL11i2c_0_WaitRv+0x20>
    6620:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6624:	9c 70       	andi	r25, 0x0C	; 12
    6626:	19 f4       	brne	.+6      	; 0x662e <_ZL11i2c_0_WaitRv+0x24>
    6628:	03 c0       	rjmp	.+6      	; 0x6630 <_ZL11i2c_0_WaitRv+0x26>
    662a:	83 e0       	ldi	r24, 0x03	; 3
    662c:	01 c0       	rjmp	.+2      	; 0x6630 <_ZL11i2c_0_WaitRv+0x26>
    662e:	84 e0       	ldi	r24, 0x04	; 4
    6630:	81 11       	cpse	r24, r1
    6632:	08 c0       	rjmp	.+16     	; 0x6644 <_ZL11i2c_0_WaitRv+0x3a>
    6634:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    6638:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    663c:	23 2b       	or	r18, r19
    663e:	21 f4       	brne	.+8      	; 0x6648 <_ZL11i2c_0_WaitRv+0x3e>
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	03 c0       	rjmp	.+6      	; 0x664a <_ZL11i2c_0_WaitRv+0x40>
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	01 c0       	rjmp	.+2      	; 0x664a <_ZL11i2c_0_WaitRv+0x40>
    6648:	91 e0       	ldi	r25, 0x01	; 1
    664a:	91 11       	cpse	r25, r1
    664c:	e5 cf       	rjmp	.-54     	; 0x6618 <_ZL11i2c_0_WaitRv+0xe>
    664e:	08 95       	ret

00006650 <_ZL11i2c_1_WaitWv>:
    6650:	88 ec       	ldi	r24, 0xC8	; 200
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    6658:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    665c:	80 e0       	ldi	r24, 0x00	; 0
    665e:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    6662:	29 2f       	mov	r18, r25
    6664:	20 7c       	andi	r18, 0xC0	; 192
    6666:	21 f0       	breq	.+8      	; 0x6670 <_ZL11i2c_1_WaitWv+0x20>
    6668:	94 fd       	sbrc	r25, 4
    666a:	05 c0       	rjmp	.+10     	; 0x6676 <_ZL11i2c_1_WaitWv+0x26>
    666c:	81 e0       	ldi	r24, 0x01	; 1
    666e:	06 c0       	rjmp	.+12     	; 0x667c <_ZL11i2c_1_WaitWv+0x2c>
    6670:	9c 70       	andi	r25, 0x0C	; 12
    6672:	19 f4       	brne	.+6      	; 0x667a <_ZL11i2c_1_WaitWv+0x2a>
    6674:	03 c0       	rjmp	.+6      	; 0x667c <_ZL11i2c_1_WaitWv+0x2c>
    6676:	82 e0       	ldi	r24, 0x02	; 2
    6678:	01 c0       	rjmp	.+2      	; 0x667c <_ZL11i2c_1_WaitWv+0x2c>
    667a:	84 e0       	ldi	r24, 0x04	; 4
    667c:	81 11       	cpse	r24, r1
    667e:	08 c0       	rjmp	.+16     	; 0x6690 <_ZL11i2c_1_WaitWv+0x40>
    6680:	20 91 1e 40 	lds	r18, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    6684:	30 91 1f 40 	lds	r19, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    6688:	23 2b       	or	r18, r19
    668a:	21 f4       	brne	.+8      	; 0x6694 <_ZL11i2c_1_WaitWv+0x44>
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	03 c0       	rjmp	.+6      	; 0x6696 <_ZL11i2c_1_WaitWv+0x46>
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	01 c0       	rjmp	.+2      	; 0x6696 <_ZL11i2c_1_WaitWv+0x46>
    6694:	91 e0       	ldi	r25, 0x01	; 1
    6696:	91 11       	cpse	r25, r1
    6698:	e2 cf       	rjmp	.-60     	; 0x665e <_ZL11i2c_1_WaitWv+0xe>
    669a:	08 95       	ret

0000669c <_ZL11I2C_1_WaitRv>:
    669c:	88 ec       	ldi	r24, 0xC8	; 200
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    66a4:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    66a8:	80 e0       	ldi	r24, 0x00	; 0
    66aa:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    66ae:	90 7c       	andi	r25, 0xC0	; 192
    66b0:	29 f4       	brne	.+10     	; 0x66bc <_ZL11I2C_1_WaitRv+0x20>
    66b2:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    66b6:	9c 70       	andi	r25, 0x0C	; 12
    66b8:	19 f4       	brne	.+6      	; 0x66c0 <_ZL11I2C_1_WaitRv+0x24>
    66ba:	03 c0       	rjmp	.+6      	; 0x66c2 <_ZL11I2C_1_WaitRv+0x26>
    66bc:	83 e0       	ldi	r24, 0x03	; 3
    66be:	01 c0       	rjmp	.+2      	; 0x66c2 <_ZL11I2C_1_WaitRv+0x26>
    66c0:	84 e0       	ldi	r24, 0x04	; 4
    66c2:	81 11       	cpse	r24, r1
    66c4:	08 c0       	rjmp	.+16     	; 0x66d6 <_ZL11I2C_1_WaitRv+0x3a>
    66c6:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    66ca:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    66ce:	23 2b       	or	r18, r19
    66d0:	21 f4       	brne	.+8      	; 0x66da <_ZL11I2C_1_WaitRv+0x3e>
    66d2:	90 e0       	ldi	r25, 0x00	; 0
    66d4:	03 c0       	rjmp	.+6      	; 0x66dc <_ZL11I2C_1_WaitRv+0x40>
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	01 c0       	rjmp	.+2      	; 0x66dc <_ZL11I2C_1_WaitRv+0x40>
    66da:	91 e0       	ldi	r25, 0x01	; 1
    66dc:	91 11       	cpse	r25, r1
    66de:	e5 cf       	rjmp	.-54     	; 0x66aa <_ZL11I2C_1_WaitRv+0xe>
    66e0:	08 95       	ret

000066e2 <I2C_0_Init>:
    66e2:	e0 ee       	ldi	r30, 0xE0	; 224
    66e4:	f5 e0       	ldi	r31, 0x05	; 5
    66e6:	85 81       	ldd	r24, Z+5	; 0x05
    66e8:	8a 70       	andi	r24, 0x0A	; 10
    66ea:	85 83       	std	Z+5, r24	; 0x05
    66ec:	85 81       	ldd	r24, Z+5	; 0x05
    66ee:	82 60       	ori	r24, 0x02	; 2
    66f0:	85 83       	std	Z+5, r24	; 0x05
    66f2:	e0 e0       	ldi	r30, 0x00	; 0
    66f4:	f9 e0       	ldi	r31, 0x09	; 9
    66f6:	8f e6       	ldi	r24, 0x6F	; 111
    66f8:	86 83       	std	Z+6, r24	; 0x06
    66fa:	81 e0       	ldi	r24, 0x01	; 1
    66fc:	83 83       	std	Z+3, r24	; 0x03
    66fe:	17 82       	std	Z+7, r1	; 0x07
    6700:	10 86       	std	Z+8, r1	; 0x08
    6702:	85 83       	std	Z+5, r24	; 0x05
    6704:	e2 e5       	ldi	r30, 0x52	; 82
    6706:	f4 e0       	ldi	r31, 0x04	; 4
    6708:	80 81       	ld	r24, Z
    670a:	88 60       	ori	r24, 0x08	; 8
    670c:	80 83       	st	Z, r24
    670e:	e3 e5       	ldi	r30, 0x53	; 83
    6710:	f4 e0       	ldi	r31, 0x04	; 4
    6712:	80 81       	ld	r24, Z
    6714:	88 60       	ori	r24, 0x08	; 8
    6716:	80 83       	st	Z, r24
    6718:	08 95       	ret

0000671a <I2C_0_SendData>:
    671a:	ff 92       	push	r15
    671c:	0f 93       	push	r16
    671e:	1f 93       	push	r17
    6720:	cf 93       	push	r28
    6722:	df 93       	push	r29
    6724:	c6 2f       	mov	r28, r22
    6726:	8a 01       	movw	r16, r20
    6728:	d2 2f       	mov	r29, r18
    672a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    672e:	0e 94 d5 32 	call	0x65aa	; 0x65aa <_ZL11i2c_0_WaitWv>
    6732:	81 30       	cpi	r24, 0x01	; 1
    6734:	f1 f4       	brne	.+60     	; 0x6772 <I2C_0_SendData+0x58>
    6736:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    673a:	0e 94 d5 32 	call	0x65aa	; 0x65aa <_ZL11i2c_0_WaitWv>
    673e:	81 30       	cpi	r24, 0x01	; 1
    6740:	d1 f4       	brne	.+52     	; 0x6776 <I2C_0_SendData+0x5c>
    6742:	dd 23       	and	r29, r29
    6744:	d1 f0       	breq	.+52     	; 0x677a <I2C_0_SendData+0x60>
    6746:	01 15       	cp	r16, r1
    6748:	11 05       	cpc	r17, r1
    674a:	c9 f0       	breq	.+50     	; 0x677e <I2C_0_SendData+0x64>
    674c:	c0 e0       	ldi	r28, 0x00	; 0
    674e:	ff 24       	eor	r15, r15
    6750:	fa 94       	dec	r15
    6752:	fd 0e       	add	r15, r29
    6754:	dd 23       	and	r29, r29
    6756:	a9 f0       	breq	.+42     	; 0x6782 <I2C_0_SendData+0x68>
    6758:	f8 01       	movw	r30, r16
    675a:	80 81       	ld	r24, Z
    675c:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    6760:	0e 94 d5 32 	call	0x65aa	; 0x65aa <_ZL11i2c_0_WaitWv>
    6764:	81 30       	cpi	r24, 0x01	; 1
    6766:	79 f4       	brne	.+30     	; 0x6786 <I2C_0_SendData+0x6c>
    6768:	cf 5f       	subi	r28, 0xFF	; 255
    676a:	0f 5f       	subi	r16, 0xFF	; 255
    676c:	1f 4f       	sbci	r17, 0xFF	; 255
    676e:	df 2d       	mov	r29, r15
    6770:	ee cf       	rjmp	.-36     	; 0x674e <I2C_0_SendData+0x34>
    6772:	8f ef       	ldi	r24, 0xFF	; 255
    6774:	09 c0       	rjmp	.+18     	; 0x6788 <I2C_0_SendData+0x6e>
    6776:	8f ef       	ldi	r24, 0xFF	; 255
    6778:	07 c0       	rjmp	.+14     	; 0x6788 <I2C_0_SendData+0x6e>
    677a:	80 e0       	ldi	r24, 0x00	; 0
    677c:	05 c0       	rjmp	.+10     	; 0x6788 <I2C_0_SendData+0x6e>
    677e:	80 e0       	ldi	r24, 0x00	; 0
    6780:	03 c0       	rjmp	.+6      	; 0x6788 <I2C_0_SendData+0x6e>
    6782:	8c 2f       	mov	r24, r28
    6784:	01 c0       	rjmp	.+2      	; 0x6788 <I2C_0_SendData+0x6e>
    6786:	8c 2f       	mov	r24, r28
    6788:	df 91       	pop	r29
    678a:	cf 91       	pop	r28
    678c:	1f 91       	pop	r17
    678e:	0f 91       	pop	r16
    6790:	ff 90       	pop	r15
    6792:	08 95       	ret

00006794 <I2C_0_GetData>:
    6794:	ef 92       	push	r14
    6796:	ff 92       	push	r15
    6798:	1f 93       	push	r17
    679a:	cf 93       	push	r28
    679c:	df 93       	push	r29
    679e:	c8 2f       	mov	r28, r24
    67a0:	d6 2f       	mov	r29, r22
    67a2:	7a 01       	movw	r14, r20
    67a4:	12 2f       	mov	r17, r18
    67a6:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    67aa:	0e 94 d5 32 	call	0x65aa	; 0x65aa <_ZL11i2c_0_WaitWv>
    67ae:	81 30       	cpi	r24, 0x01	; 1
    67b0:	61 f5       	brne	.+88     	; 0x680a <I2C_0_GetData+0x76>
    67b2:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    67b6:	0e 94 d5 32 	call	0x65aa	; 0x65aa <_ZL11i2c_0_WaitWv>
    67ba:	81 30       	cpi	r24, 0x01	; 1
    67bc:	41 f5       	brne	.+80     	; 0x680e <I2C_0_GetData+0x7a>
    67be:	c1 60       	ori	r28, 0x01	; 1
    67c0:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    67c4:	0e 94 d5 32 	call	0x65aa	; 0x65aa <_ZL11i2c_0_WaitWv>
    67c8:	81 30       	cpi	r24, 0x01	; 1
    67ca:	19 f5       	brne	.+70     	; 0x6812 <I2C_0_GetData+0x7e>
    67cc:	11 23       	and	r17, r17
    67ce:	19 f1       	breq	.+70     	; 0x6816 <I2C_0_GetData+0x82>
    67d0:	e1 14       	cp	r14, r1
    67d2:	f1 04       	cpc	r15, r1
    67d4:	11 f1       	breq	.+68     	; 0x681a <I2C_0_GetData+0x86>
    67d6:	c0 e0       	ldi	r28, 0x00	; 0
    67d8:	df ef       	ldi	r29, 0xFF	; 255
    67da:	d1 0f       	add	r29, r17
    67dc:	11 23       	and	r17, r17
    67de:	f9 f0       	breq	.+62     	; 0x681e <I2C_0_GetData+0x8a>
    67e0:	0e 94 05 33 	call	0x660a	; 0x660a <_ZL11i2c_0_WaitRv>
    67e4:	83 30       	cpi	r24, 0x03	; 3
    67e6:	e9 f4       	brne	.+58     	; 0x6822 <I2C_0_GetData+0x8e>
    67e8:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    67ec:	f7 01       	movw	r30, r14
    67ee:	80 83       	st	Z, r24
    67f0:	d1 11       	cpse	r29, r1
    67f2:	02 c0       	rjmp	.+4      	; 0x67f8 <I2C_0_GetData+0x64>
    67f4:	87 e0       	ldi	r24, 0x07	; 7
    67f6:	01 c0       	rjmp	.+2      	; 0x67fa <I2C_0_GetData+0x66>
    67f8:	82 e0       	ldi	r24, 0x02	; 2
    67fa:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    67fe:	cf 5f       	subi	r28, 0xFF	; 255
    6800:	ff ef       	ldi	r31, 0xFF	; 255
    6802:	ef 1a       	sub	r14, r31
    6804:	ff 0a       	sbc	r15, r31
    6806:	1d 2f       	mov	r17, r29
    6808:	e7 cf       	rjmp	.-50     	; 0x67d8 <I2C_0_GetData+0x44>
    680a:	8f ef       	ldi	r24, 0xFF	; 255
    680c:	0b c0       	rjmp	.+22     	; 0x6824 <I2C_0_GetData+0x90>
    680e:	8f ef       	ldi	r24, 0xFF	; 255
    6810:	09 c0       	rjmp	.+18     	; 0x6824 <I2C_0_GetData+0x90>
    6812:	8f ef       	ldi	r24, 0xFF	; 255
    6814:	07 c0       	rjmp	.+14     	; 0x6824 <I2C_0_GetData+0x90>
    6816:	80 e0       	ldi	r24, 0x00	; 0
    6818:	05 c0       	rjmp	.+10     	; 0x6824 <I2C_0_GetData+0x90>
    681a:	80 e0       	ldi	r24, 0x00	; 0
    681c:	03 c0       	rjmp	.+6      	; 0x6824 <I2C_0_GetData+0x90>
    681e:	8c 2f       	mov	r24, r28
    6820:	01 c0       	rjmp	.+2      	; 0x6824 <I2C_0_GetData+0x90>
    6822:	8c 2f       	mov	r24, r28
    6824:	df 91       	pop	r29
    6826:	cf 91       	pop	r28
    6828:	1f 91       	pop	r17
    682a:	ff 90       	pop	r15
    682c:	ef 90       	pop	r14
    682e:	08 95       	ret

00006830 <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    6830:	e0 ee       	ldi	r30, 0xE0	; 224
    6832:	f5 e0       	ldi	r31, 0x05	; 5
    6834:	85 81       	ldd	r24, Z+5	; 0x05
    6836:	83 70       	andi	r24, 0x03	; 3
    6838:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    683a:	85 81       	ldd	r24, Z+5	; 0x05
    683c:	88 60       	ori	r24, 0x08	; 8
    683e:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    6840:	e0 e2       	ldi	r30, 0x20	; 32
    6842:	f9 e0       	ldi	r31, 0x09	; 9
    6844:	8f e6       	ldi	r24, 0x6F	; 111
    6846:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    6848:	81 e0       	ldi	r24, 0x01	; 1
    684a:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    684c:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    684e:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6850:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6852:	e2 e3       	ldi	r30, 0x32	; 50
    6854:	f4 e0       	ldi	r31, 0x04	; 4
    6856:	80 81       	ld	r24, Z
    6858:	88 60       	ori	r24, 0x08	; 8
    685a:	80 83       	st	Z, r24
    685c:	e3 e3       	ldi	r30, 0x33	; 51
    685e:	f4 e0       	ldi	r31, 0x04	; 4
    6860:	80 81       	ld	r24, Z
    6862:	88 60       	ori	r24, 0x08	; 8
    6864:	80 83       	st	Z, r24
    6866:	08 95       	ret

00006868 <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6868:	ff 92       	push	r15
    686a:	0f 93       	push	r16
    686c:	1f 93       	push	r17
    686e:	cf 93       	push	r28
    6870:	df 93       	push	r29
    6872:	c6 2f       	mov	r28, r22
    6874:	8a 01       	movw	r16, r20
    6876:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    6878:	8e 7f       	andi	r24, 0xFE	; 254
    687a:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    687e:	0e 94 28 33 	call	0x6650	; 0x6650 <_ZL11i2c_1_WaitWv>
    6882:	81 30       	cpi	r24, 0x01	; 1
    6884:	f1 f4       	brne	.+60     	; 0x68c2 <I2C_1_SendData+0x5a>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6886:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    688a:	0e 94 28 33 	call	0x6650	; 0x6650 <_ZL11i2c_1_WaitWv>
    688e:	81 30       	cpi	r24, 0x01	; 1
    6890:	d1 f4       	brne	.+52     	; 0x68c6 <I2C_1_SendData+0x5e>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
    6892:	dd 23       	and	r29, r29
    6894:	d1 f0       	breq	.+52     	; 0x68ca <I2C_1_SendData+0x62>
    6896:	01 15       	cp	r16, r1
    6898:	11 05       	cpc	r17, r1
    689a:	c9 f0       	breq	.+50     	; 0x68ce <I2C_1_SendData+0x66>
    689c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    689e:	ff 24       	eor	r15, r15
    68a0:	fa 94       	dec	r15
    68a2:	fd 0e       	add	r15, r29
    68a4:	dd 23       	and	r29, r29
    68a6:	a9 f0       	breq	.+42     	; 0x68d2 <I2C_1_SendData+0x6a>
		{
			TWI1.MDATA = *pData;
    68a8:	f8 01       	movw	r30, r16
    68aa:	80 81       	ld	r24, Z
    68ac:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    68b0:	0e 94 28 33 	call	0x6650	; 0x6650 <_ZL11i2c_1_WaitWv>
    68b4:	81 30       	cpi	r24, 0x01	; 1
    68b6:	79 f4       	brne	.+30     	; 0x68d6 <I2C_1_SendData+0x6e>
			{
				retVal++;
    68b8:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    68ba:	0f 5f       	subi	r16, 0xFF	; 255
    68bc:	1f 4f       	sbci	r17, 0xFF	; 255
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
    68be:	df 2d       	mov	r29, r15
    68c0:	ee cf       	rjmp	.-36     	; 0x689e <I2C_1_SendData+0x36>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    68c2:	8f ef       	ldi	r24, 0xFF	; 255
    68c4:	09 c0       	rjmp	.+18     	; 0x68d8 <I2C_1_SendData+0x70>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    68c6:	8f ef       	ldi	r24, 0xFF	; 255
    68c8:	07 c0       	rjmp	.+14     	; 0x68d8 <I2C_1_SendData+0x70>
	}	

	retVal = 0;
    68ca:	80 e0       	ldi	r24, 0x00	; 0
    68cc:	05 c0       	rjmp	.+10     	; 0x68d8 <I2C_1_SendData+0x70>
    68ce:	80 e0       	ldi	r24, 0x00	; 0
    68d0:	03 c0       	rjmp	.+6      	; 0x68d8 <I2C_1_SendData+0x70>
    68d2:	8c 2f       	mov	r24, r28
    68d4:	01 c0       	rjmp	.+2      	; 0x68d8 <I2C_1_SendData+0x70>
    68d6:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    68d8:	df 91       	pop	r29
    68da:	cf 91       	pop	r28
    68dc:	1f 91       	pop	r17
    68de:	0f 91       	pop	r16
    68e0:	ff 90       	pop	r15
    68e2:	08 95       	ret

000068e4 <I2C_1_GetData>:


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    68e4:	ef 92       	push	r14
    68e6:	ff 92       	push	r15
    68e8:	1f 93       	push	r17
    68ea:	cf 93       	push	r28
    68ec:	df 93       	push	r29
    68ee:	c8 2f       	mov	r28, r24
    68f0:	d6 2f       	mov	r29, r22
    68f2:	7a 01       	movw	r14, r20
    68f4:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    68f6:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    68fa:	0e 94 28 33 	call	0x6650	; 0x6650 <_ZL11i2c_1_WaitWv>
    68fe:	81 30       	cpi	r24, 0x01	; 1
    6900:	61 f5       	brne	.+88     	; 0x695a <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6902:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    6906:	0e 94 28 33 	call	0x6650	; 0x6650 <_ZL11i2c_1_WaitWv>
    690a:	81 30       	cpi	r24, 0x01	; 1
    690c:	41 f5       	brne	.+80     	; 0x695e <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    690e:	c1 60       	ori	r28, 0x01	; 1
    6910:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6914:	0e 94 28 33 	call	0x6650	; 0x6650 <_ZL11i2c_1_WaitWv>
    6918:	81 30       	cpi	r24, 0x01	; 1
    691a:	19 f5       	brne	.+70     	; 0x6962 <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    691c:	11 23       	and	r17, r17
    691e:	19 f1       	breq	.+70     	; 0x6966 <I2C_1_GetData+0x82>
    6920:	e1 14       	cp	r14, r1
    6922:	f1 04       	cpc	r15, r1
    6924:	11 f1       	breq	.+68     	; 0x696a <I2C_1_GetData+0x86>
    6926:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6928:	df ef       	ldi	r29, 0xFF	; 255
    692a:	d1 0f       	add	r29, r17
    692c:	11 23       	and	r17, r17
    692e:	f9 f0       	breq	.+62     	; 0x696e <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    6930:	0e 94 4e 33 	call	0x669c	; 0x669c <_ZL11I2C_1_WaitRv>
    6934:	83 30       	cpi	r24, 0x03	; 3
    6936:	e9 f4       	brne	.+58     	; 0x6972 <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    6938:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    693c:	f7 01       	movw	r30, r14
    693e:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    6940:	d1 11       	cpse	r29, r1
    6942:	02 c0       	rjmp	.+4      	; 0x6948 <I2C_1_GetData+0x64>
    6944:	87 e0       	ldi	r24, 0x07	; 7
    6946:	01 c0       	rjmp	.+2      	; 0x694a <I2C_1_GetData+0x66>
    6948:	82 e0       	ldi	r24, 0x02	; 2
    694a:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    694e:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6950:	ff ef       	ldi	r31, 0xFF	; 255
    6952:	ef 1a       	sub	r14, r31
    6954:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6956:	1d 2f       	mov	r17, r29
    6958:	e7 cf       	rjmp	.-50     	; 0x6928 <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    695a:	8f ef       	ldi	r24, 0xFF	; 255
    695c:	0b c0       	rjmp	.+22     	; 0x6974 <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    695e:	8f ef       	ldi	r24, 0xFF	; 255
    6960:	09 c0       	rjmp	.+18     	; 0x6974 <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    6962:	8f ef       	ldi	r24, 0xFF	; 255
    6964:	07 c0       	rjmp	.+14     	; 0x6974 <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    6966:	80 e0       	ldi	r24, 0x00	; 0
    6968:	05 c0       	rjmp	.+10     	; 0x6974 <I2C_1_GetData+0x90>
    696a:	80 e0       	ldi	r24, 0x00	; 0
    696c:	03 c0       	rjmp	.+6      	; 0x6974 <I2C_1_GetData+0x90>
    696e:	8c 2f       	mov	r24, r28
    6970:	01 c0       	rjmp	.+2      	; 0x6974 <I2C_1_GetData+0x90>
    6972:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6974:	df 91       	pop	r29
    6976:	cf 91       	pop	r28
    6978:	1f 91       	pop	r17
    697a:	ff 90       	pop	r15
    697c:	ef 90       	pop	r14
    697e:	08 95       	ret

00006980 <_ZL21USART4_initializationm>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
	lb_send_text(g_tempMsgBuff);
    6980:	20 b3       	in	r18, 0x10	; 16
    6982:	2d 7f       	andi	r18, 0xFD	; 253
    6984:	20 bb       	out	0x10, r18	; 16
    6986:	e1 e9       	ldi	r30, 0x91	; 145
    6988:	f4 e0       	ldi	r31, 0x04	; 4
    698a:	20 81       	ld	r18, Z
    698c:	27 7f       	andi	r18, 0xF7	; 247
    698e:	20 83       	st	Z, r18
    6990:	20 b3       	in	r18, 0x10	; 16
    6992:	21 60       	ori	r18, 0x01	; 1
    6994:	20 bb       	out	0x10, r18	; 16
    6996:	21 b3       	in	r18, 0x11	; 17
    6998:	21 60       	ori	r18, 0x01	; 1
    699a:	21 bb       	out	0x11, r18	; 17
    699c:	0e 94 7e 45 	call	0x8afc	; 0x8afc <USART4_init>
    69a0:	08 95       	ret

000069a2 <_ZL21USART1_initializationm>:
    69a2:	28 b1       	in	r18, 0x08	; 8
    69a4:	2d 7f       	andi	r18, 0xFD	; 253
    69a6:	28 b9       	out	0x08, r18	; 8
    69a8:	e1 e5       	ldi	r30, 0x51	; 81
    69aa:	f4 e0       	ldi	r31, 0x04	; 4
    69ac:	20 81       	ld	r18, Z
    69ae:	27 7f       	andi	r18, 0xF7	; 247
    69b0:	20 83       	st	Z, r18
    69b2:	28 b1       	in	r18, 0x08	; 8
    69b4:	21 60       	ori	r18, 0x01	; 1
    69b6:	28 b9       	out	0x08, r18	; 8
    69b8:	29 b1       	in	r18, 0x09	; 9
    69ba:	21 60       	ori	r18, 0x01	; 1
    69bc:	29 b9       	out	0x09, r18	; 9
    69be:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <USART1_init>
    69c2:	08 95       	ret

000069c4 <_ZL16linkbus_start_txv>:
    69c4:	cf 93       	push	r28
    69c6:	80 91 ac 47 	lds	r24, 0x47AC	; 0x8047ac <_ZL17linkbus_tx_active>
    69ca:	c1 e0       	ldi	r28, 0x01	; 1
    69cc:	81 11       	cpse	r24, r1
    69ce:	c0 e0       	ldi	r28, 0x00	; 0
    69d0:	81 11       	cpse	r24, r1
    69d2:	0c c0       	rjmp	.+24     	; 0x69ec <_ZL16linkbus_start_txv+0x28>
    69d4:	81 e0       	ldi	r24, 0x01	; 1
    69d6:	80 93 ac 47 	sts	0x47AC, r24	; 0x8047ac <_ZL17linkbus_tx_active>
    69da:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    69de:	81 11       	cpse	r24, r1
    69e0:	03 c0       	rjmp	.+6      	; 0x69e8 <_ZL16linkbus_start_txv+0x24>
    69e2:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <USART4_enable_tx>
    69e6:	02 c0       	rjmp	.+4      	; 0x69ec <_ZL16linkbus_start_txv+0x28>
    69e8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <USART1_enable_tx>
    69ec:	8c 2f       	mov	r24, r28
    69ee:	cf 91       	pop	r28
    69f0:	08 95       	ret

000069f2 <_Z18nextFullLBTxBufferv>:
    69f2:	90 e0       	ldi	r25, 0x00	; 0
    69f4:	80 91 5f 46 	lds	r24, 0x465F	; 0x80465f <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    69f8:	28 2f       	mov	r18, r24
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	42 e3       	ldi	r20, 0x32	; 50
    69fe:	42 9f       	mul	r20, r18
    6a00:	f0 01       	movw	r30, r0
    6a02:	43 9f       	mul	r20, r19
    6a04:	f0 0d       	add	r31, r0
    6a06:	11 24       	eor	r1, r1
    6a08:	ec 51       	subi	r30, 0x1C	; 28
    6a0a:	f9 4b       	sbci	r31, 0xB9	; 185
    6a0c:	40 81       	ld	r20, Z
    6a0e:	41 11       	cpse	r20, r1
    6a10:	0b c0       	rjmp	.+22     	; 0x6a28 <_Z18nextFullLBTxBufferv+0x36>
    6a12:	9f 5f       	subi	r25, 0xFF	; 255
    6a14:	94 30       	cpi	r25, 0x04	; 4
    6a16:	50 f4       	brcc	.+20     	; 0x6a2c <_Z18nextFullLBTxBufferv+0x3a>
    6a18:	8f 5f       	subi	r24, 0xFF	; 255
    6a1a:	80 93 5f 46 	sts	0x465F, r24	; 0x80465f <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6a1e:	84 30       	cpi	r24, 0x04	; 4
    6a20:	48 f3       	brcs	.-46     	; 0x69f4 <_Z18nextFullLBTxBufferv+0x2>
    6a22:	10 92 5f 46 	sts	0x465F, r1	; 0x80465f <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6a26:	e6 cf       	rjmp	.-52     	; 0x69f4 <_Z18nextFullLBTxBufferv+0x2>
    6a28:	81 e0       	ldi	r24, 0x01	; 1
    6a2a:	01 c0       	rjmp	.+2      	; 0x6a2e <_Z18nextFullLBTxBufferv+0x3c>
    6a2c:	80 e0       	ldi	r24, 0x00	; 0
    6a2e:	88 23       	and	r24, r24
    6a30:	49 f0       	breq	.+18     	; 0x6a44 <_Z18nextFullLBTxBufferv+0x52>
    6a32:	42 e3       	ldi	r20, 0x32	; 50
    6a34:	42 9f       	mul	r20, r18
    6a36:	c0 01       	movw	r24, r0
    6a38:	43 9f       	mul	r20, r19
    6a3a:	90 0d       	add	r25, r0
    6a3c:	11 24       	eor	r1, r1
    6a3e:	8c 51       	subi	r24, 0x1C	; 28
    6a40:	99 4b       	sbci	r25, 0xB9	; 185
    6a42:	08 95       	ret
    6a44:	80 e0       	ldi	r24, 0x00	; 0
    6a46:	90 e0       	ldi	r25, 0x00	; 0
    6a48:	08 95       	ret

00006a4a <_Z19nextEmptyLBTxBufferv>:
    6a4a:	90 e0       	ldi	r25, 0x00	; 0
    6a4c:	80 91 5e 46 	lds	r24, 0x465E	; 0x80465e <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6a50:	28 2f       	mov	r18, r24
    6a52:	30 e0       	ldi	r19, 0x00	; 0
    6a54:	42 e3       	ldi	r20, 0x32	; 50
    6a56:	42 9f       	mul	r20, r18
    6a58:	f0 01       	movw	r30, r0
    6a5a:	43 9f       	mul	r20, r19
    6a5c:	f0 0d       	add	r31, r0
    6a5e:	11 24       	eor	r1, r1
    6a60:	ec 51       	subi	r30, 0x1C	; 28
    6a62:	f9 4b       	sbci	r31, 0xB9	; 185
    6a64:	40 81       	ld	r20, Z
    6a66:	44 23       	and	r20, r20
    6a68:	59 f0       	breq	.+22     	; 0x6a80 <_Z19nextEmptyLBTxBufferv+0x36>
    6a6a:	9f 5f       	subi	r25, 0xFF	; 255
    6a6c:	94 30       	cpi	r25, 0x04	; 4
    6a6e:	50 f4       	brcc	.+20     	; 0x6a84 <_Z19nextEmptyLBTxBufferv+0x3a>
    6a70:	8f 5f       	subi	r24, 0xFF	; 255
    6a72:	80 93 5e 46 	sts	0x465E, r24	; 0x80465e <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6a76:	84 30       	cpi	r24, 0x04	; 4
    6a78:	48 f3       	brcs	.-46     	; 0x6a4c <_Z19nextEmptyLBTxBufferv+0x2>
    6a7a:	10 92 5e 46 	sts	0x465E, r1	; 0x80465e <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6a7e:	e6 cf       	rjmp	.-52     	; 0x6a4c <_Z19nextEmptyLBTxBufferv+0x2>
    6a80:	81 e0       	ldi	r24, 0x01	; 1
    6a82:	01 c0       	rjmp	.+2      	; 0x6a86 <_Z19nextEmptyLBTxBufferv+0x3c>
    6a84:	80 e0       	ldi	r24, 0x00	; 0
    6a86:	88 23       	and	r24, r24
    6a88:	49 f0       	breq	.+18     	; 0x6a9c <_Z19nextEmptyLBTxBufferv+0x52>
    6a8a:	42 e3       	ldi	r20, 0x32	; 50
    6a8c:	42 9f       	mul	r20, r18
    6a8e:	c0 01       	movw	r24, r0
    6a90:	43 9f       	mul	r20, r19
    6a92:	90 0d       	add	r25, r0
    6a94:	11 24       	eor	r1, r1
    6a96:	8c 51       	subi	r24, 0x1C	; 28
    6a98:	99 4b       	sbci	r25, 0xB9	; 185
    6a9a:	08 95       	ret
    6a9c:	80 e0       	ldi	r24, 0x00	; 0
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	08 95       	ret

00006aa2 <_Z19nextEmptyLBRxBufferv>:
    6aa2:	90 e0       	ldi	r25, 0x00	; 0
    6aa4:	80 91 5d 46 	lds	r24, 0x465D	; 0x80465d <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6aa8:	28 2f       	mov	r18, r24
    6aaa:	30 e0       	ldi	r19, 0x00	; 0
    6aac:	42 e4       	ldi	r20, 0x42	; 66
    6aae:	42 9f       	mul	r20, r18
    6ab0:	f0 01       	movw	r30, r0
    6ab2:	43 9f       	mul	r20, r19
    6ab4:	f0 0d       	add	r31, r0
    6ab6:	11 24       	eor	r1, r1
    6ab8:	e0 5a       	subi	r30, 0xA0	; 160
    6aba:	f9 4b       	sbci	r31, 0xB9	; 185
    6abc:	41 81       	ldd	r20, Z+1	; 0x01
    6abe:	52 81       	ldd	r21, Z+2	; 0x02
    6ac0:	45 2b       	or	r20, r21
    6ac2:	59 f0       	breq	.+22     	; 0x6ada <_Z19nextEmptyLBRxBufferv+0x38>
    6ac4:	9f 5f       	subi	r25, 0xFF	; 255
    6ac6:	92 30       	cpi	r25, 0x02	; 2
    6ac8:	50 f4       	brcc	.+20     	; 0x6ade <_Z19nextEmptyLBRxBufferv+0x3c>
    6aca:	8f 5f       	subi	r24, 0xFF	; 255
    6acc:	80 93 5d 46 	sts	0x465D, r24	; 0x80465d <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6ad0:	82 30       	cpi	r24, 0x02	; 2
    6ad2:	40 f3       	brcs	.-48     	; 0x6aa4 <_Z19nextEmptyLBRxBufferv+0x2>
    6ad4:	10 92 5d 46 	sts	0x465D, r1	; 0x80465d <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6ad8:	e5 cf       	rjmp	.-54     	; 0x6aa4 <_Z19nextEmptyLBRxBufferv+0x2>
    6ada:	81 e0       	ldi	r24, 0x01	; 1
    6adc:	01 c0       	rjmp	.+2      	; 0x6ae0 <_Z19nextEmptyLBRxBufferv+0x3e>
    6ade:	80 e0       	ldi	r24, 0x00	; 0
    6ae0:	88 23       	and	r24, r24
    6ae2:	49 f0       	breq	.+18     	; 0x6af6 <_Z19nextEmptyLBRxBufferv+0x54>
    6ae4:	42 e4       	ldi	r20, 0x42	; 66
    6ae6:	42 9f       	mul	r20, r18
    6ae8:	c0 01       	movw	r24, r0
    6aea:	43 9f       	mul	r20, r19
    6aec:	90 0d       	add	r25, r0
    6aee:	11 24       	eor	r1, r1
    6af0:	80 5a       	subi	r24, 0xA0	; 160
    6af2:	99 4b       	sbci	r25, 0xB9	; 185
    6af4:	08 95       	ret
    6af6:	80 e0       	ldi	r24, 0x00	; 0
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	08 95       	ret

00006afc <_Z18nextFullLBRxBufferv>:
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	80 91 5c 46 	lds	r24, 0x465C	; 0x80465c <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6b02:	28 2f       	mov	r18, r24
    6b04:	30 e0       	ldi	r19, 0x00	; 0
    6b06:	42 e4       	ldi	r20, 0x42	; 66
    6b08:	42 9f       	mul	r20, r18
    6b0a:	f0 01       	movw	r30, r0
    6b0c:	43 9f       	mul	r20, r19
    6b0e:	f0 0d       	add	r31, r0
    6b10:	11 24       	eor	r1, r1
    6b12:	e0 5a       	subi	r30, 0xA0	; 160
    6b14:	f9 4b       	sbci	r31, 0xB9	; 185
    6b16:	41 81       	ldd	r20, Z+1	; 0x01
    6b18:	52 81       	ldd	r21, Z+2	; 0x02
    6b1a:	45 2b       	or	r20, r21
    6b1c:	59 f4       	brne	.+22     	; 0x6b34 <_Z18nextFullLBRxBufferv+0x38>
    6b1e:	9f 5f       	subi	r25, 0xFF	; 255
    6b20:	92 30       	cpi	r25, 0x02	; 2
    6b22:	50 f4       	brcc	.+20     	; 0x6b38 <_Z18nextFullLBRxBufferv+0x3c>
    6b24:	8f 5f       	subi	r24, 0xFF	; 255
    6b26:	80 93 5c 46 	sts	0x465C, r24	; 0x80465c <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6b2a:	82 30       	cpi	r24, 0x02	; 2
    6b2c:	40 f3       	brcs	.-48     	; 0x6afe <_Z18nextFullLBRxBufferv+0x2>
    6b2e:	10 92 5c 46 	sts	0x465C, r1	; 0x80465c <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6b32:	e5 cf       	rjmp	.-54     	; 0x6afe <_Z18nextFullLBRxBufferv+0x2>
    6b34:	81 e0       	ldi	r24, 0x01	; 1
    6b36:	01 c0       	rjmp	.+2      	; 0x6b3a <_Z18nextFullLBRxBufferv+0x3e>
    6b38:	80 e0       	ldi	r24, 0x00	; 0
    6b3a:	88 23       	and	r24, r24
    6b3c:	49 f0       	breq	.+18     	; 0x6b50 <_Z18nextFullLBRxBufferv+0x54>
    6b3e:	42 e4       	ldi	r20, 0x42	; 66
    6b40:	42 9f       	mul	r20, r18
    6b42:	c0 01       	movw	r24, r0
    6b44:	43 9f       	mul	r20, r19
    6b46:	90 0d       	add	r25, r0
    6b48:	11 24       	eor	r1, r1
    6b4a:	80 5a       	subi	r24, 0xA0	; 160
    6b4c:	99 4b       	sbci	r25, 0xB9	; 185
    6b4e:	08 95       	ret
    6b50:	80 e0       	ldi	r24, 0x00	; 0
    6b52:	90 e0       	ldi	r25, 0x00	; 0
    6b54:	08 95       	ret

00006b56 <_Z19linkbusTxInProgressv>:
    6b56:	80 91 ac 47 	lds	r24, 0x47AC	; 0x8047ac <_ZL17linkbus_tx_active>
    6b5a:	08 95       	ret

00006b5c <_Z14linkbus_end_txv>:
    6b5c:	80 91 ac 47 	lds	r24, 0x47AC	; 0x8047ac <_ZL17linkbus_tx_active>
    6b60:	88 23       	and	r24, r24
    6b62:	89 f0       	breq	.+34     	; 0x6b86 <_Z14linkbus_end_txv+0x2a>
    6b64:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6b68:	81 11       	cpse	r24, r1
    6b6a:	06 c0       	rjmp	.+12     	; 0x6b78 <_Z14linkbus_end_txv+0x1c>
    6b6c:	e0 e8       	ldi	r30, 0x80	; 128
    6b6e:	f8 e0       	ldi	r31, 0x08	; 8
    6b70:	85 81       	ldd	r24, Z+5	; 0x05
    6b72:	8f 7d       	andi	r24, 0xDF	; 223
    6b74:	85 83       	std	Z+5, r24	; 0x05
    6b76:	05 c0       	rjmp	.+10     	; 0x6b82 <_Z14linkbus_end_txv+0x26>
    6b78:	e0 e2       	ldi	r30, 0x20	; 32
    6b7a:	f8 e0       	ldi	r31, 0x08	; 8
    6b7c:	85 81       	ldd	r24, Z+5	; 0x05
    6b7e:	8f 7d       	andi	r24, 0xDF	; 223
    6b80:	85 83       	std	Z+5, r24	; 0x05
    6b82:	10 92 ac 47 	sts	0x47AC, r1	; 0x8047ac <_ZL17linkbus_tx_active>
    6b86:	08 95       	ret

00006b88 <_Z16linkbus_reset_rxv>:
    6b88:	cf 93       	push	r28
    6b8a:	df 93       	push	r29
    6b8c:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6b90:	81 11       	cpse	r24, r1
    6b92:	14 c0       	rjmp	.+40     	; 0x6bbc <_Z16linkbus_reset_rxv+0x34>
    6b94:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <__TEXT_REGION_LENGTH__+0x7e0886>
    6b98:	88 23       	and	r24, r24
    6b9a:	1c f5       	brge	.+70     	; 0x6be2 <_Z16linkbus_reset_rxv+0x5a>
    6b9c:	e0 e8       	ldi	r30, 0x80	; 128
    6b9e:	f8 e0       	ldi	r31, 0x08	; 8
    6ba0:	86 81       	ldd	r24, Z+6	; 0x06
    6ba2:	8f 77       	andi	r24, 0x7F	; 127
    6ba4:	86 83       	std	Z+6, r24	; 0x06
    6ba6:	84 e8       	ldi	r24, 0x84	; 132
    6ba8:	a0 e6       	ldi	r26, 0x60	; 96
    6baa:	b6 e4       	ldi	r27, 0x46	; 70
    6bac:	ed 01       	movw	r28, r26
    6bae:	19 92       	st	Y+, r1
    6bb0:	8a 95       	dec	r24
    6bb2:	e9 f7       	brne	.-6      	; 0x6bae <_Z16linkbus_reset_rxv+0x26>
    6bb4:	86 81       	ldd	r24, Z+6	; 0x06
    6bb6:	80 68       	ori	r24, 0x80	; 128
    6bb8:	86 83       	std	Z+6, r24	; 0x06
    6bba:	13 c0       	rjmp	.+38     	; 0x6be2 <_Z16linkbus_reset_rxv+0x5a>
    6bbc:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    6bc0:	88 23       	and	r24, r24
    6bc2:	7c f4       	brge	.+30     	; 0x6be2 <_Z16linkbus_reset_rxv+0x5a>
    6bc4:	e0 e2       	ldi	r30, 0x20	; 32
    6bc6:	f8 e0       	ldi	r31, 0x08	; 8
    6bc8:	86 81       	ldd	r24, Z+6	; 0x06
    6bca:	8f 77       	andi	r24, 0x7F	; 127
    6bcc:	86 83       	std	Z+6, r24	; 0x06
    6bce:	84 e8       	ldi	r24, 0x84	; 132
    6bd0:	a0 e6       	ldi	r26, 0x60	; 96
    6bd2:	b6 e4       	ldi	r27, 0x46	; 70
    6bd4:	ed 01       	movw	r28, r26
    6bd6:	19 92       	st	Y+, r1
    6bd8:	8a 95       	dec	r24
    6bda:	e9 f7       	brne	.-6      	; 0x6bd6 <_Z16linkbus_reset_rxv+0x4e>
    6bdc:	86 81       	ldd	r24, Z+6	; 0x06
    6bde:	80 68       	ori	r24, 0x80	; 128
    6be0:	86 83       	std	Z+6, r24	; 0x06
    6be2:	df 91       	pop	r29
    6be4:	cf 91       	pop	r28
    6be6:	08 95       	ret

00006be8 <_Z12linkbus_initm14USART_Number_t>:
    6be8:	cf 92       	push	r12
    6bea:	df 92       	push	r13
    6bec:	ef 92       	push	r14
    6bee:	ff 92       	push	r15
    6bf0:	cf 93       	push	r28
    6bf2:	6b 01       	movw	r12, r22
    6bf4:	7c 01       	movw	r14, r24
    6bf6:	84 e8       	ldi	r24, 0x84	; 132
    6bf8:	e0 e6       	ldi	r30, 0x60	; 96
    6bfa:	f6 e4       	ldi	r31, 0x46	; 70
    6bfc:	df 01       	movw	r26, r30
    6bfe:	1d 92       	st	X+, r1
    6c00:	8a 95       	dec	r24
    6c02:	e9 f7       	brne	.-6      	; 0x6bfe <_Z12linkbus_initm14USART_Number_t+0x16>
    6c04:	80 e0       	ldi	r24, 0x00	; 0
    6c06:	90 e0       	ldi	r25, 0x00	; 0
    6c08:	84 30       	cpi	r24, 0x04	; 4
    6c0a:	91 05       	cpc	r25, r1
    6c0c:	5c f4       	brge	.+22     	; 0x6c24 <_Z12linkbus_initm14USART_Number_t+0x3c>
    6c0e:	22 e3       	ldi	r18, 0x32	; 50
    6c10:	28 9f       	mul	r18, r24
    6c12:	f0 01       	movw	r30, r0
    6c14:	29 9f       	mul	r18, r25
    6c16:	f0 0d       	add	r31, r0
    6c18:	11 24       	eor	r1, r1
    6c1a:	ec 51       	subi	r30, 0x1C	; 28
    6c1c:	f9 4b       	sbci	r31, 0xB9	; 185
    6c1e:	10 82       	st	Z, r1
    6c20:	01 96       	adiw	r24, 0x01	; 1
    6c22:	f2 cf       	rjmp	.-28     	; 0x6c08 <_Z12linkbus_initm14USART_Number_t+0x20>
    6c24:	46 30       	cpi	r20, 0x06	; 6
    6c26:	21 f4       	brne	.+8      	; 0x6c30 <_Z12linkbus_initm14USART_Number_t+0x48>
    6c28:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6c2c:	87 30       	cpi	r24, 0x07	; 7
    6c2e:	61 f4       	brne	.+24     	; 0x6c48 <_Z12linkbus_initm14USART_Number_t+0x60>
    6c30:	c4 2f       	mov	r28, r20
    6c32:	c7 01       	movw	r24, r14
    6c34:	b6 01       	movw	r22, r12
    6c36:	41 11       	cpse	r20, r1
    6c38:	03 c0       	rjmp	.+6      	; 0x6c40 <_Z12linkbus_initm14USART_Number_t+0x58>
    6c3a:	0e 94 c0 34 	call	0x6980	; 0x6980 <_ZL21USART4_initializationm>
    6c3e:	02 c0       	rjmp	.+4      	; 0x6c44 <_Z12linkbus_initm14USART_Number_t+0x5c>
    6c40:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <_ZL21USART1_initializationm>
    6c44:	c0 93 22 40 	sts	0x4022, r28	; 0x804022 <g_linkbus_usart_number>
    6c48:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <_ZL14g_bus_disabled>
    6c4c:	cf 91       	pop	r28
    6c4e:	ff 90       	pop	r15
    6c50:	ef 90       	pop	r14
    6c52:	df 90       	pop	r13
    6c54:	cf 90       	pop	r12
    6c56:	08 95       	ret

00006c58 <_Z15linkbus_disablev>:
    6c58:	81 e0       	ldi	r24, 0x01	; 1
    6c5a:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZL14g_bus_disabled>
    6c5e:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6c62:	84 30       	cpi	r24, 0x04	; 4
    6c64:	19 f4       	brne	.+6      	; 0x6c6c <_Z15linkbus_disablev+0x14>
    6c66:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <USART4_disable>
    6c6a:	02 c0       	rjmp	.+4      	; 0x6c70 <_Z15linkbus_disablev+0x18>
    6c6c:	0e 94 75 45 	call	0x8aea	; 0x8aea <USART1_disable>
    6c70:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <_Z14linkbus_end_txv>
    6c74:	84 e8       	ldi	r24, 0x84	; 132
    6c76:	e0 e6       	ldi	r30, 0x60	; 96
    6c78:	f6 e4       	ldi	r31, 0x46	; 70
    6c7a:	df 01       	movw	r26, r30
    6c7c:	1d 92       	st	X+, r1
    6c7e:	8a 95       	dec	r24
    6c80:	e9 f7       	brne	.-6      	; 0x6c7c <_Z15linkbus_disablev+0x24>
    6c82:	80 e0       	ldi	r24, 0x00	; 0
    6c84:	84 30       	cpi	r24, 0x04	; 4
    6c86:	48 f4       	brcc	.+18     	; 0x6c9a <_Z15linkbus_disablev+0x42>
    6c88:	b2 e3       	ldi	r27, 0x32	; 50
    6c8a:	8b 9f       	mul	r24, r27
    6c8c:	f0 01       	movw	r30, r0
    6c8e:	11 24       	eor	r1, r1
    6c90:	ec 51       	subi	r30, 0x1C	; 28
    6c92:	f9 4b       	sbci	r31, 0xB9	; 185
    6c94:	10 82       	st	Z, r1
    6c96:	8f 5f       	subi	r24, 0xFF	; 255
    6c98:	f5 cf       	rjmp	.-22     	; 0x6c84 <_Z15linkbus_disablev+0x2c>
    6c9a:	08 95       	ret

00006c9c <_Z12lb_send_textPc>:
    6c9c:	0f 93       	push	r16
    6c9e:	1f 93       	push	r17
    6ca0:	cf 93       	push	r28
    6ca2:	df 93       	push	r29
    6ca4:	20 91 23 40 	lds	r18, 0x4023	; 0x804023 <_ZL14g_bus_disabled>
    6ca8:	21 11       	cpse	r18, r1
    6caa:	2f c0       	rjmp	.+94     	; 0x6d0a <_Z12lb_send_textPc+0x6e>
    6cac:	00 97       	sbiw	r24, 0x00	; 0
    6cae:	79 f1       	breq	.+94     	; 0x6d0e <_Z12lb_send_textPc+0x72>
    6cb0:	8c 01       	movw	r16, r24
    6cb2:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <_Z19nextEmptyLBTxBufferv>
    6cb6:	c8 ec       	ldi	r28, 0xC8	; 200
    6cb8:	d0 e0       	ldi	r29, 0x00	; 0
    6cba:	00 97       	sbiw	r24, 0x00	; 0
    6cbc:	b1 f4       	brne	.+44     	; 0x6cea <_Z12lb_send_textPc+0x4e>
    6cbe:	20 97       	sbiw	r28, 0x00	; 0
    6cc0:	a1 f0       	breq	.+40     	; 0x6cea <_Z12lb_send_textPc+0x4e>
    6cc2:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <_Z19linkbusTxInProgressv>
    6cc6:	88 23       	and	r24, r24
    6cc8:	21 f0       	breq	.+8      	; 0x6cd2 <_Z12lb_send_textPc+0x36>
    6cca:	20 97       	sbiw	r28, 0x00	; 0
    6ccc:	21 f4       	brne	.+8      	; 0x6cd6 <_Z12lb_send_textPc+0x3a>
    6cce:	90 e0       	ldi	r25, 0x00	; 0
    6cd0:	03 c0       	rjmp	.+6      	; 0x6cd8 <_Z12lb_send_textPc+0x3c>
    6cd2:	90 e0       	ldi	r25, 0x00	; 0
    6cd4:	01 c0       	rjmp	.+2      	; 0x6cd8 <_Z12lb_send_textPc+0x3c>
    6cd6:	91 e0       	ldi	r25, 0x01	; 1
    6cd8:	99 23       	and	r25, r25
    6cda:	21 f0       	breq	.+8      	; 0x6ce4 <_Z12lb_send_textPc+0x48>
    6cdc:	20 97       	sbiw	r28, 0x00	; 0
    6cde:	89 f3       	breq	.-30     	; 0x6cc2 <_Z12lb_send_textPc+0x26>
    6ce0:	21 97       	sbiw	r28, 0x01	; 1
    6ce2:	ef cf       	rjmp	.-34     	; 0x6cc2 <_Z12lb_send_textPc+0x26>
    6ce4:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <_Z19nextEmptyLBTxBufferv>
    6ce8:	e8 cf       	rjmp	.-48     	; 0x6cba <_Z12lb_send_textPc+0x1e>
    6cea:	00 97       	sbiw	r24, 0x00	; 0
    6cec:	91 f0       	breq	.+36     	; 0x6d12 <_Z12lb_send_textPc+0x76>
    6cee:	1f 93       	push	r17
    6cf0:	0f 93       	push	r16
    6cf2:	9f 93       	push	r25
    6cf4:	8f 93       	push	r24
    6cf6:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    6cfa:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <_ZL16linkbus_start_txv>
    6cfe:	0f 90       	pop	r0
    6d00:	0f 90       	pop	r0
    6d02:	0f 90       	pop	r0
    6d04:	0f 90       	pop	r0
    6d06:	80 e0       	ldi	r24, 0x00	; 0
    6d08:	05 c0       	rjmp	.+10     	; 0x6d14 <_Z12lb_send_textPc+0x78>
    6d0a:	81 e0       	ldi	r24, 0x01	; 1
    6d0c:	03 c0       	rjmp	.+6      	; 0x6d14 <_Z12lb_send_textPc+0x78>
    6d0e:	81 e0       	ldi	r24, 0x01	; 1
    6d10:	01 c0       	rjmp	.+2      	; 0x6d14 <_Z12lb_send_textPc+0x78>
    6d12:	81 e0       	ldi	r24, 0x01	; 1
    6d14:	df 91       	pop	r29
    6d16:	cf 91       	pop	r28
    6d18:	1f 91       	pop	r17
    6d1a:	0f 91       	pop	r16
    6d1c:	08 95       	ret

00006d1e <_Z11lb_send_msg13LBMessageTypePKcPc>:
    6d1e:	83 30       	cpi	r24, 0x03	; 3
    6d20:	29 f0       	breq	.+10     	; 0x6d2c <_Z11lb_send_msg13LBMessageTypePKcPc+0xe>
    6d22:	82 30       	cpi	r24, 0x02	; 2
    6d24:	31 f0       	breq	.+12     	; 0x6d32 <_Z11lb_send_msg13LBMessageTypePKcPc+0x14>
    6d26:	9b e3       	ldi	r25, 0x3B	; 59
    6d28:	84 e2       	ldi	r24, 0x24	; 36
    6d2a:	05 c0       	rjmp	.+10     	; 0x6d36 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    6d2c:	9b e3       	ldi	r25, 0x3B	; 59
    6d2e:	81 e2       	ldi	r24, 0x21	; 33
    6d30:	02 c0       	rjmp	.+4      	; 0x6d36 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    6d32:	9f e3       	ldi	r25, 0x3F	; 63
    6d34:	84 e2       	ldi	r24, 0x24	; 36
    6d36:	1f 92       	push	r1
    6d38:	9f 93       	push	r25
    6d3a:	5f 93       	push	r21
    6d3c:	4f 93       	push	r20
    6d3e:	7f 93       	push	r23
    6d40:	6f 93       	push	r22
    6d42:	1f 92       	push	r1
    6d44:	8f 93       	push	r24
    6d46:	87 eb       	ldi	r24, 0xB7	; 183
    6d48:	94 e4       	ldi	r25, 0x44	; 68
    6d4a:	9f 93       	push	r25
    6d4c:	8f 93       	push	r24
    6d4e:	8d ea       	ldi	r24, 0xAD	; 173
    6d50:	97 e4       	ldi	r25, 0x47	; 71
    6d52:	9f 93       	push	r25
    6d54:	8f 93       	push	r24
    6d56:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    6d5a:	8d ea       	ldi	r24, 0xAD	; 173
    6d5c:	97 e4       	ldi	r25, 0x47	; 71
    6d5e:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_Z12lb_send_textPc>
    6d62:	8d b7       	in	r24, 0x3d	; 61
    6d64:	9e b7       	in	r25, 0x3e	; 62
    6d66:	0c 96       	adiw	r24, 0x0c	; 12
    6d68:	8d bf       	out	0x3d, r24	; 61
    6d6a:	9e bf       	out	0x3e, r25	; 62
    6d6c:	08 95       	ret

00006d6e <_Z16lb_broadcast_numjPKc>:
}


void lb_broadcast_num(uint16_t data, const char* str)
{
    6d6e:	0f 93       	push	r16
    6d70:	1f 93       	push	r17
    6d72:	cf 93       	push	r28
    6d74:	df 93       	push	r29
    6d76:	cd b7       	in	r28, 0x3d	; 61
    6d78:	de b7       	in	r29, 0x3e	; 62
    6d7a:	26 97       	sbiw	r28, 0x06	; 6
    6d7c:	cd bf       	out	0x3d, r28	; 61
    6d7e:	de bf       	out	0x3e, r29	; 62
    6d80:	8b 01       	movw	r16, r22
	char t[6] = "\0";
    6d82:	20 91 5a 44 	lds	r18, 0x445A	; 0x80445a <g_80m_power_table+0x423>
    6d86:	30 91 5b 44 	lds	r19, 0x445B	; 0x80445b <g_80m_power_table+0x424>
    6d8a:	29 83       	std	Y+1, r18	; 0x01
    6d8c:	3a 83       	std	Y+2, r19	; 0x02
    6d8e:	fe 01       	movw	r30, r28
    6d90:	33 96       	adiw	r30, 0x03	; 3
    6d92:	24 e0       	ldi	r18, 0x04	; 4
    6d94:	df 01       	movw	r26, r30
    6d96:	1d 92       	st	X+, r1
    6d98:	2a 95       	dec	r18
    6d9a:	e9 f7       	brne	.-6      	; 0x6d96 <_Z16lb_broadcast_numjPKc+0x28>

	sprintf(t, "%u", data);
    6d9c:	9f 93       	push	r25
    6d9e:	8f 93       	push	r24
    6da0:	87 ec       	ldi	r24, 0xC7	; 199
    6da2:	94 e4       	ldi	r25, 0x44	; 68
    6da4:	9f 93       	push	r25
    6da6:	8f 93       	push	r24
    6da8:	ce 01       	movw	r24, r28
    6daa:	01 96       	adiw	r24, 0x01	; 1
    6dac:	9f 93       	push	r25
    6dae:	8f 93       	push	r24
    6db0:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
	g_tempMsgBuff[0] = '\0';
    6db4:	10 92 ad 47 	sts	0x47AD, r1	; 0x8047ad <_ZL13g_tempMsgBuff>

	if(str)
    6db8:	0f 90       	pop	r0
    6dba:	0f 90       	pop	r0
    6dbc:	0f 90       	pop	r0
    6dbe:	0f 90       	pop	r0
    6dc0:	0f 90       	pop	r0
    6dc2:	0f 90       	pop	r0
    6dc4:	01 15       	cp	r16, r1
    6dc6:	11 05       	cpc	r17, r1
    6dc8:	91 f0       	breq	.+36     	; 0x6dee <_Z16lb_broadcast_numjPKc+0x80>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
    6dca:	ce 01       	movw	r24, r28
    6dcc:	01 96       	adiw	r24, 0x01	; 1
    6dce:	9f 93       	push	r25
    6dd0:	8f 93       	push	r24
    6dd2:	1f 93       	push	r17
    6dd4:	0f 93       	push	r16
    6dd6:	8a ec       	ldi	r24, 0xCA	; 202
    6dd8:	94 e4       	ldi	r25, 0x44	; 68
    6dda:	9f 93       	push	r25
    6ddc:	8f 93       	push	r24
    6dde:	8d ea       	ldi	r24, 0xAD	; 173
    6de0:	97 e4       	ldi	r25, 0x47	; 71
    6de2:	9f 93       	push	r25
    6de4:	8f 93       	push	r24
    6de6:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>
    6dea:	cd bf       	out	0x3d, r28	; 61
    6dec:	de bf       	out	0x3e, r29	; 62
	}

	if(g_tempMsgBuff[0]) lb_send_text(g_tempMsgBuff);
    6dee:	80 91 ad 47 	lds	r24, 0x47AD	; 0x8047ad <_ZL13g_tempMsgBuff>
    6df2:	88 23       	and	r24, r24
    6df4:	21 f0       	breq	.+8      	; 0x6dfe <_Z16lb_broadcast_numjPKc+0x90>
    6df6:	8d ea       	ldi	r24, 0xAD	; 173
    6df8:	97 e4       	ldi	r25, 0x47	; 71
    6dfa:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_Z12lb_send_textPc>
}
    6dfe:	26 96       	adiw	r28, 0x06	; 6
    6e00:	cd bf       	out	0x3d, r28	; 61
    6e02:	de bf       	out	0x3e, r29	; 62
    6e04:	df 91       	pop	r29
    6e06:	cf 91       	pop	r28
    6e08:	1f 91       	pop	r17
    6e0a:	0f 91       	pop	r16
    6e0c:	08 95       	ret

00006e0e <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    6e0e:	90 e0       	ldi	r25, 0x00	; 0
    6e10:	fc 01       	movw	r30, r24
    6e12:	b0 97       	sbiw	r30, 0x20	; 32
    6e14:	ed 35       	cpi	r30, 0x5D	; 93
    6e16:	f1 05       	cpc	r31, r1
    6e18:	08 f0       	brcs	.+2      	; 0x6e1c <_Z12getMorseCharc+0xe>
    6e1a:	e8 c0       	rjmp	.+464    	; 0x6fec <_Z12getMorseCharc+0x1de>
    6e1c:	e7 54       	subi	r30, 0x47	; 71
    6e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    6e20:	0c 94 87 48 	jmp	0x910e	; 0x910e <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6e24:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    6e26:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    6e28:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    6e2a:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6e2c:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    6e2e:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6e30:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6e32:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    6e34:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    6e36:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6e38:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6e3a:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6e3c:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    6e3e:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    6e40:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6e42:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6e44:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    6e46:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    6e48:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    6e4a:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    6e4c:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    6e4e:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6e50:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6e52:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6e54:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    6e56:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    6e58:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6e5a:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6e5c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    6e5e:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    6e60:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6e62:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6e64:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    6e66:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    6e68:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    6e6a:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    6e6c:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    6e6e:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    6e70:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6e72:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    6e74:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    6e76:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    6e78:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6e7a:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6e7c:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    6e7e:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6e80:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6e82:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6e84:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    6e86:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    6e88:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6e8a:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6e8c:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    6e8e:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    6e90:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    6e92:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    6e94:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    6e96:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    6e98:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6e9a:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    6e9c:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    6e9e:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6ea0:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6ea2:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    6ea4:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    6ea6:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    6ea8:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6eaa:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6eac:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    6eae:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    6eb0:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6eb2:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6eb4:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    6eb6:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    6eb8:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    6eba:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6ebc:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    6ebe:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    6ec0:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    6ec2:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    6ec4:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    6ec6:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    6ec8:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6eca:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    6ecc:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    6ece:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6ed0:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6ed2:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    6ed4:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    6ed6:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    6ed8:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6eda:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    6edc:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    6ede:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6ee0:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6ee2:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    6ee4:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    6ee6:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    6ee8:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6eea:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6eec:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    6eee:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6ef0:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6ef2:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    6ef4:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    6ef6:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    6ef8:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    6efa:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    6efc:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    6efe:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    6f00:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6f02:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    6f04:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    6f06:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    6f08:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    6f0a:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    6f0c:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    6f0e:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    6f10:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6f12:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    6f14:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    6f16:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    6f18:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f1a:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6f1c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    6f1e:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    6f20:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f22:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6f24:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    6f26:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    6f28:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f2a:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6f2c:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    6f2e:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    6f30:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6f32:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    6f34:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    6f36:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    6f38:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    6f3a:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    6f3c:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    6f3e:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    6f40:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6f42:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    6f44:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    6f46:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    6f48:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6f4a:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    6f4c:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    6f4e:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    6f50:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    6f52:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    6f54:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    6f56:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    6f58:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    6f5a:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    6f5c:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    6f5e:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    6f60:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    6f62:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    6f64:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    6f66:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    6f68:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    6f6a:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    6f6c:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    6f6e:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    6f70:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6f72:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    6f74:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    6f76:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    6f78:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    6f7a:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    6f7c:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    6f7e:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    6f80:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    6f82:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6f84:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    6f86:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    6f88:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f8a:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    6f8c:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    6f8e:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    6f90:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6f92:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    6f94:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    6f96:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    6f98:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    6f9a:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    6f9c:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    6f9e:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    6fa0:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6fa2:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    6fa4:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    6fa6:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    6fa8:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6faa:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    6fac:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    6fae:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    6fb0:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    6fb2:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    6fb4:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    6fb6:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    6fb8:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6fba:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    6fbc:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    6fbe:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    6fc0:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    6fc2:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    6fc4:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    6fc6:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    6fc8:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6fca:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    6fcc:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    6fce:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    6fd0:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6fd2:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    6fd4:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    6fd6:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    6fd8:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    6fda:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    6fdc:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    6fde:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    6fe0:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6fe2:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    6fe4:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    6fe6:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    6fe8:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    6fea:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    6fec:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    6fee:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    6ff0:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    6ff2:	08 95       	ret

00006ff4 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    6ff4:	cf 93       	push	r28
    6ff6:	df 93       	push	r29
    6ff8:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    6ffa:	00 97       	sbiw	r24, 0x00	; 0
    6ffc:	b1 f1       	breq	.+108    	; 0x706a <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    6ffe:	10 92 ea 47 	sts	0x47EA, r1	; 0x8047ea <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    7002:	61 15       	cp	r22, r1
    7004:	71 05       	cpc	r23, r1
    7006:	21 f0       	breq	.+8      	; 0x7010 <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    7008:	db 01       	movw	r26, r22
    700a:	2c 91       	ld	r18, X
    700c:	20 93 25 40 	sts	0x4025, r18	; 0x804025 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    7010:	fc 01       	movw	r30, r24
    7012:	20 81       	ld	r18, Z
    7014:	22 23       	and	r18, r18
    7016:	d9 f0       	breq	.+54     	; 0x704e <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    7018:	80 93 e8 47 	sts	0x47E8, r24	; 0x8047e8 <_ZZ9makeMorsePcPhS0_E3str>
    701c:	90 93 e9 47 	sts	0x47E9, r25	; 0x8047e9 <_ZZ9makeMorsePcPhS0_E3str+0x1>
			c = ' ';
    7020:	80 e2       	ldi	r24, 0x20	; 32
    7022:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    7026:	82 2f       	mov	r24, r18
    7028:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <_Z12getMorseCharc>
    702c:	60 93 e5 47 	sts	0x47E5, r22	; 0x8047e5 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    7030:	70 93 e6 47 	sts	0x47E6, r23	; 0x8047e6 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    7034:	80 93 e7 47 	sts	0x47E7, r24	; 0x8047e7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    7038:	10 92 e4 47 	sts	0x47E4, r1	; 0x8047e4 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    703c:	10 92 e3 47 	sts	0x47E3, r1	; 0x8047e3 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    7040:	10 92 e2 47 	sts	0x47E2, r1	; 0x8047e2 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    7044:	10 92 e1 47 	sts	0x47E1, r1	; 0x8047e1 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    7048:	10 92 e0 47 	sts	0x47E0, r1	; 0x8047e0 <_ZZ9makeMorsePcPhS0_E15completedString>
    704c:	0a c0       	rjmp	.+20     	; 0x7062 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    704e:	10 92 e8 47 	sts	0x47E8, r1	; 0x8047e8 <_ZZ9makeMorsePcPhS0_E3str>
    7052:	10 92 e9 47 	sts	0x47E9, r1	; 0x8047e9 <_ZZ9makeMorsePcPhS0_E3str+0x1>
			completedString = TRUE;
    7056:	81 e0       	ldi	r24, 0x01	; 1
    7058:	80 93 e0 47 	sts	0x47E0, r24	; 0x8047e0 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    705c:	20 97       	sbiw	r28, 0x00	; 0
    705e:	09 f0       	breq	.+2      	; 0x7062 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    7060:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    7062:	10 92 df 47 	sts	0x47DF, r1	; 0x8047df <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    7066:	80 e0       	ldi	r24, 0x00	; 0
    7068:	bb c0       	rjmp	.+374    	; 0x71e0 <_Z9makeMorsePcPhS0_+0x1ec>
	}
	else if(str)
    706a:	e0 91 e8 47 	lds	r30, 0x47E8	; 0x8047e8 <_ZZ9makeMorsePcPhS0_E3str>
    706e:	f0 91 e9 47 	lds	r31, 0x47E9	; 0x8047e9 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    7072:	30 97       	sbiw	r30, 0x00	; 0
    7074:	09 f4       	brne	.+2      	; 0x7078 <_Z9makeMorsePcPhS0_+0x84>
    7076:	a5 c0       	rjmp	.+330    	; 0x71c2 <_Z9makeMorsePcPhS0_+0x1ce>
	{
		if(repeating)
    7078:	61 15       	cp	r22, r1
    707a:	71 05       	cpc	r23, r1
    707c:	21 f0       	breq	.+8      	; 0x7086 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    707e:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPhS0_E6repeat>
    7082:	db 01       	movw	r26, r22
    7084:	8c 93       	st	X, r24
		}

		if(completedString)
    7086:	80 91 e0 47 	lds	r24, 0x47E0	; 0x8047e0 <_ZZ9makeMorsePcPhS0_E15completedString>
    708a:	88 23       	and	r24, r24
    708c:	49 f0       	breq	.+18     	; 0x70a0 <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    708e:	20 97       	sbiw	r28, 0x00	; 0
    7090:	09 f4       	brne	.+2      	; 0x7094 <_Z9makeMorsePcPhS0_+0xa0>
    7092:	a3 c0       	rjmp	.+326    	; 0x71da <_Z9makeMorsePcPhS0_+0x1e6>
			{
				*finished = TRUE;
    7094:	81 e0       	ldi	r24, 0x01	; 1
    7096:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    7098:	10 92 ea 47 	sts	0x47EA, r1	; 0x8047ea <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    709c:	80 e0       	ldi	r24, 0x00	; 0
    709e:	a0 c0       	rjmp	.+320    	; 0x71e0 <_Z9makeMorsePcPhS0_+0x1ec>
		}

		if(elementIndex)
    70a0:	80 91 e2 47 	lds	r24, 0x47E2	; 0x8047e2 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    70a4:	88 23       	and	r24, r24
    70a6:	21 f0       	breq	.+8      	; 0x70b0 <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    70a8:	81 50       	subi	r24, 0x01	; 1
    70aa:	80 93 e2 47 	sts	0x47E2, r24	; 0x8047e2 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    70ae:	7f c0       	rjmp	.+254    	; 0x71ae <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    70b0:	80 91 df 47 	lds	r24, 0x47DF	; 0x8047df <_ZZ9makeMorsePcPhS0_E9carrierOn>
    70b4:	88 23       	and	r24, r24
    70b6:	81 f0       	breq	.+32     	; 0x70d8 <_Z9makeMorsePcPhS0_+0xe4>
    70b8:	80 91 ea 47 	lds	r24, 0x47EA	; 0x8047ea <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    70bc:	81 11       	cpse	r24, r1
    70be:	0c c0       	rjmp	.+24     	; 0x70d8 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    70c0:	10 92 df 47 	sts	0x47DF, r1	; 0x8047df <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    70c4:	80 91 e1 47 	lds	r24, 0x47E1	; 0x8047e1 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    70c8:	88 23       	and	r24, r24
    70ca:	09 f4       	brne	.+2      	; 0x70ce <_Z9makeMorsePcPhS0_+0xda>
    70cc:	70 c0       	rjmp	.+224    	; 0x71ae <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    70ce:	80 93 e2 47 	sts	0x47E2, r24	; 0x8047e2 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    70d2:	10 92 e1 47 	sts	0x47E1, r1	; 0x8047e1 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    70d6:	6b c0       	rjmp	.+214    	; 0x71ae <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    70d8:	90 91 e6 47 	lds	r25, 0x47E6	; 0x8047e6 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    70dc:	80 91 e3 47 	lds	r24, 0x47E3	; 0x8047e3 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    70e0:	89 17       	cp	r24, r25
    70e2:	90 f1       	brcs	.+100    	; 0x7148 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    70e4:	80 91 e4 47 	lds	r24, 0x47E4	; 0x8047e4 <_ZZ9makeMorsePcPhS0_E9charIndex>
    70e8:	8f 5f       	subi	r24, 0xFF	; 255
    70ea:	80 93 e4 47 	sts	0x47E4, r24	; 0x8047e4 <_ZZ9makeMorsePcPhS0_E9charIndex>
    70ee:	df 01       	movw	r26, r30
    70f0:	a8 0f       	add	r26, r24
    70f2:	b1 1d       	adc	r27, r1
    70f4:	8c 91       	ld	r24, X
    70f6:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    70fa:	81 11       	cpse	r24, r1
    70fc:	19 c0       	rjmp	.+50     	; 0x7130 <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    70fe:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPhS0_E6repeat>
    7102:	88 23       	and	r24, r24
    7104:	31 f0       	breq	.+12     	; 0x7112 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    7106:	80 81       	ld	r24, Z
    7108:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    710c:	10 92 e4 47 	sts	0x47E4, r1	; 0x8047e4 <_ZZ9makeMorsePcPhS0_E9charIndex>
    7110:	0f c0       	rjmp	.+30     	; 0x7130 <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    7112:	10 92 e8 47 	sts	0x47E8, r1	; 0x8047e8 <_ZZ9makeMorsePcPhS0_E3str>
    7116:	10 92 e9 47 	sts	0x47E9, r1	; 0x8047e9 <_ZZ9makeMorsePcPhS0_E3str+0x1>
						carrierOn = OFF;
    711a:	10 92 df 47 	sts	0x47DF, r1	; 0x8047df <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    711e:	91 e0       	ldi	r25, 0x01	; 1
    7120:	90 93 e0 47 	sts	0x47E0, r25	; 0x8047e0 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    7124:	20 97       	sbiw	r28, 0x00	; 0
    7126:	09 f0       	breq	.+2      	; 0x712a <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    7128:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    712a:	10 92 ea 47 	sts	0x47EA, r1	; 0x8047ea <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    712e:	58 c0       	rjmp	.+176    	; 0x71e0 <_Z9makeMorsePcPhS0_+0x1ec>
					}
				}

				morseInProgress = getMorseChar(c);
    7130:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
    7134:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <_Z12getMorseCharc>
    7138:	60 93 e5 47 	sts	0x47E5, r22	; 0x8047e5 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    713c:	70 93 e6 47 	sts	0x47E6, r23	; 0x8047e6 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    7140:	80 93 e7 47 	sts	0x47E7, r24	; 0x8047e7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    7144:	10 92 e3 47 	sts	0x47E3, r1	; 0x8047e3 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    7148:	20 91 e5 47 	lds	r18, 0x47E5	; 0x8047e5 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    714c:	2d 3f       	cpi	r18, 0xFD	; 253
    714e:	00 f5       	brcc	.+64     	; 0x7190 <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    7150:	40 91 e3 47 	lds	r20, 0x47E3	; 0x8047e3 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    7154:	31 e0       	ldi	r19, 0x01	; 1
    7156:	34 0f       	add	r19, r20
    7158:	30 93 e3 47 	sts	0x47E3, r19	; 0x8047e3 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    715c:	81 e0       	ldi	r24, 0x01	; 1
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	02 c0       	rjmp	.+4      	; 0x7166 <_Z9makeMorsePcPhS0_+0x172>
    7162:	88 0f       	add	r24, r24
    7164:	99 1f       	adc	r25, r25
    7166:	4a 95       	dec	r20
    7168:	e2 f7       	brpl	.-8      	; 0x7162 <_Z9makeMorsePcPhS0_+0x16e>
    716a:	82 23       	and	r24, r18

				if(isDah)
    716c:	21 f0       	breq	.+8      	; 0x7176 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    716e:	82 e0       	ldi	r24, 0x02	; 2
    7170:	80 93 e2 47 	sts	0x47E2, r24	; 0x8047e2 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    7174:	02 c0       	rjmp	.+4      	; 0x717a <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    7176:	10 92 e2 47 	sts	0x47E2, r1	; 0x8047e2 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    717a:	81 e0       	ldi	r24, 0x01	; 1
    717c:	80 93 df 47 	sts	0x47DF, r24	; 0x8047df <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    7180:	80 91 e6 47 	lds	r24, 0x47E6	; 0x8047e6 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    7184:	38 17       	cp	r19, r24
    7186:	98 f0       	brcs	.+38     	; 0x71ae <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    7188:	82 e0       	ldi	r24, 0x02	; 2
    718a:	80 93 e1 47 	sts	0x47E1, r24	; 0x8047e1 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    718e:	0f c0       	rjmp	.+30     	; 0x71ae <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    7190:	80 91 e6 47 	lds	r24, 0x47E6	; 0x8047e6 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    7194:	9f ef       	ldi	r25, 0xFF	; 255
    7196:	90 93 e3 47 	sts	0x47E3, r25	; 0x8047e3 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    719a:	10 92 df 47 	sts	0x47DF, r1	; 0x8047df <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    719e:	84 30       	cpi	r24, 0x04	; 4
    71a0:	20 f0       	brcs	.+8      	; 0x71aa <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    71a2:	84 50       	subi	r24, 0x04	; 4
    71a4:	80 93 e2 47 	sts	0x47E2, r24	; 0x8047e2 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    71a8:	02 c0       	rjmp	.+4      	; 0x71ae <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    71aa:	10 92 e2 47 	sts	0x47E2, r1	; 0x8047e2 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    71ae:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
    71b2:	8c 33       	cpi	r24, 0x3C	; 60
    71b4:	21 f4       	brne	.+8      	; 0x71be <_Z9makeMorsePcPhS0_+0x1ca>
		{
			holdKeyDown = TRUE;
    71b6:	81 e0       	ldi	r24, 0x01	; 1
    71b8:	80 93 ea 47 	sts	0x47EA, r24	; 0x8047ea <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    71bc:	02 c0       	rjmp	.+4      	; 0x71c2 <_Z9makeMorsePcPhS0_+0x1ce>
		}
		else
		{
			holdKeyDown = FALSE;
    71be:	10 92 ea 47 	sts	0x47EA, r1	; 0x8047ea <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    71c2:	20 97       	sbiw	r28, 0x00	; 0
    71c4:	19 f0       	breq	.+6      	; 0x71cc <_Z9makeMorsePcPhS0_+0x1d8>
	{
		*finished = completedString;
    71c6:	80 91 e0 47 	lds	r24, 0x47E0	; 0x8047e0 <_ZZ9makeMorsePcPhS0_E15completedString>
    71ca:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    71cc:	80 91 ea 47 	lds	r24, 0x47EA	; 0x8047ea <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    71d0:	81 11       	cpse	r24, r1
    71d2:	05 c0       	rjmp	.+10     	; 0x71de <_Z9makeMorsePcPhS0_+0x1ea>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    71d4:	80 91 df 47 	lds	r24, 0x47DF	; 0x8047df <_ZZ9makeMorsePcPhS0_E9carrierOn>
    71d8:	03 c0       	rjmp	.+6      	; 0x71e0 <_Z9makeMorsePcPhS0_+0x1ec>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    71da:	80 e0       	ldi	r24, 0x00	; 0
    71dc:	01 c0       	rjmp	.+2      	; 0x71e0 <_Z9makeMorsePcPhS0_+0x1ec>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    71de:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    71e0:	df 91       	pop	r29
    71e2:	cf 91       	pop	r28
    71e4:	08 95       	ret

000071e6 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    71e6:	cf 92       	push	r12
    71e8:	df 92       	push	r13
    71ea:	ef 92       	push	r14
    71ec:	ff 92       	push	r15
    71ee:	1f 93       	push	r17
    71f0:	cf 93       	push	r28
    71f2:	df 93       	push	r29
    71f4:	6c 01       	movw	r12, r24
    71f6:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    71f8:	c0 e0       	ldi	r28, 0x00	; 0
    71fa:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    71fc:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    71fe:	c4 31       	cpi	r28, 0x14	; 20
    7200:	d1 05       	cpc	r29, r1
    7202:	74 f4       	brge	.+28     	; 0x7220 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    7204:	f6 01       	movw	r30, r12
    7206:	ec 0f       	add	r30, r28
    7208:	fd 1f       	adc	r31, r29
    720a:	80 81       	ld	r24, Z
		if(!c)
    720c:	88 23       	and	r24, r24
    720e:	41 f0       	breq	.+16     	; 0x7220 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    7210:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    7214:	6d 3f       	cpi	r22, 0xFD	; 253
    7216:	08 f4       	brcc	.+2      	; 0x721a <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    7218:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    721a:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    721c:	21 96       	adiw	r28, 0x01	; 1
    721e:	ef cf       	rjmp	.-34     	; 0x71fe <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    7220:	80 eb       	ldi	r24, 0xB0	; 176
    7222:	94 e0       	ldi	r25, 0x04	; 4
    7224:	b7 01       	movw	r22, r14
    7226:	0e 94 1e 48 	call	0x903c	; 0x903c <__udivmodhi4>
}
    722a:	16 9f       	mul	r17, r22
    722c:	c0 01       	movw	r24, r0
    722e:	17 9f       	mul	r17, r23
    7230:	90 0d       	add	r25, r0
    7232:	11 24       	eor	r1, r1
    7234:	df 91       	pop	r29
    7236:	cf 91       	pop	r28
    7238:	1f 91       	pop	r17
    723a:	ff 90       	pop	r15
    723c:	ef 90       	pop	r14
    723e:	df 90       	pop	r13
    7240:	cf 90       	pop	r12
    7242:	08 95       	ret

00007244 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    7244:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    7246:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    7248:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    724a:	40 83       	st	Z, r20
	ret                             // Return to caller
    724c:	08 95       	ret

0000724e <_ZL21USART4_initializationm>:
	}
	
	serialbus_end_tx();
	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    724e:	20 b3       	in	r18, 0x10	; 16
    7250:	2d 7f       	andi	r18, 0xFD	; 253
    7252:	20 bb       	out	0x10, r18	; 16
    7254:	e1 e9       	ldi	r30, 0x91	; 145
    7256:	f4 e0       	ldi	r31, 0x04	; 4
    7258:	20 81       	ld	r18, Z
    725a:	27 7f       	andi	r18, 0xF7	; 247
    725c:	20 83       	st	Z, r18
    725e:	20 b3       	in	r18, 0x10	; 16
    7260:	21 60       	ori	r18, 0x01	; 1
    7262:	20 bb       	out	0x10, r18	; 16
    7264:	21 b3       	in	r18, 0x11	; 17
    7266:	21 60       	ori	r18, 0x01	; 1
    7268:	21 bb       	out	0x11, r18	; 17
    726a:	0e 94 7e 45 	call	0x8afc	; 0x8afc <USART4_init>
    726e:	08 95       	ret

00007270 <_ZL21USART1_initializationm>:
    7270:	28 b1       	in	r18, 0x08	; 8
    7272:	2d 7f       	andi	r18, 0xFD	; 253
    7274:	28 b9       	out	0x08, r18	; 8
    7276:	e1 e5       	ldi	r30, 0x51	; 81
    7278:	f4 e0       	ldi	r31, 0x04	; 4
    727a:	20 81       	ld	r18, Z
    727c:	27 7f       	andi	r18, 0xF7	; 247
    727e:	20 83       	st	Z, r18
    7280:	28 b1       	in	r18, 0x08	; 8
    7282:	21 60       	ori	r18, 0x01	; 1
    7284:	28 b9       	out	0x08, r18	; 8
    7286:	29 b1       	in	r18, 0x09	; 9
    7288:	21 60       	ori	r18, 0x01	; 1
    728a:	29 b9       	out	0x09, r18	; 9
    728c:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <USART1_init>
    7290:	08 95       	ret

00007292 <nextFullSBTxBuffer>:
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	80 91 ee 47 	lds	r24, 0x47EE	; 0x8047ee <_ZZ18nextFullSBTxBufferE11bufferIndex>
    7298:	28 2f       	mov	r18, r24
    729a:	30 e0       	ldi	r19, 0x00	; 0
    729c:	49 e2       	ldi	r20, 0x29	; 41
    729e:	42 9f       	mul	r20, r18
    72a0:	f0 01       	movw	r30, r0
    72a2:	43 9f       	mul	r20, r19
    72a4:	f0 0d       	add	r31, r0
    72a6:	11 24       	eor	r1, r1
    72a8:	e3 59       	subi	r30, 0x93	; 147
    72aa:	f7 4b       	sbci	r31, 0xB7	; 183
    72ac:	40 81       	ld	r20, Z
    72ae:	41 11       	cpse	r20, r1
    72b0:	0b c0       	rjmp	.+22     	; 0x72c8 <nextFullSBTxBuffer+0x36>
    72b2:	9f 5f       	subi	r25, 0xFF	; 255
    72b4:	93 30       	cpi	r25, 0x03	; 3
    72b6:	50 f4       	brcc	.+20     	; 0x72cc <nextFullSBTxBuffer+0x3a>
    72b8:	8f 5f       	subi	r24, 0xFF	; 255
    72ba:	80 93 ee 47 	sts	0x47EE, r24	; 0x8047ee <_ZZ18nextFullSBTxBufferE11bufferIndex>
    72be:	83 30       	cpi	r24, 0x03	; 3
    72c0:	48 f3       	brcs	.-46     	; 0x7294 <nextFullSBTxBuffer+0x2>
    72c2:	10 92 ee 47 	sts	0x47EE, r1	; 0x8047ee <_ZZ18nextFullSBTxBufferE11bufferIndex>
    72c6:	e6 cf       	rjmp	.-52     	; 0x7294 <nextFullSBTxBuffer+0x2>
    72c8:	81 e0       	ldi	r24, 0x01	; 1
    72ca:	01 c0       	rjmp	.+2      	; 0x72ce <nextFullSBTxBuffer+0x3c>
    72cc:	80 e0       	ldi	r24, 0x00	; 0
    72ce:	88 23       	and	r24, r24
    72d0:	49 f0       	breq	.+18     	; 0x72e4 <nextFullSBTxBuffer+0x52>
    72d2:	49 e2       	ldi	r20, 0x29	; 41
    72d4:	42 9f       	mul	r20, r18
    72d6:	c0 01       	movw	r24, r0
    72d8:	43 9f       	mul	r20, r19
    72da:	90 0d       	add	r25, r0
    72dc:	11 24       	eor	r1, r1
    72de:	83 59       	subi	r24, 0x93	; 147
    72e0:	97 4b       	sbci	r25, 0xB7	; 183
    72e2:	08 95       	ret
    72e4:	80 e0       	ldi	r24, 0x00	; 0
    72e6:	90 e0       	ldi	r25, 0x00	; 0
    72e8:	08 95       	ret

000072ea <nextEmptySBTxBuffer>:
    72ea:	90 e0       	ldi	r25, 0x00	; 0
    72ec:	80 91 ed 47 	lds	r24, 0x47ED	; 0x8047ed <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    72f0:	28 2f       	mov	r18, r24
    72f2:	30 e0       	ldi	r19, 0x00	; 0
    72f4:	49 e2       	ldi	r20, 0x29	; 41
    72f6:	42 9f       	mul	r20, r18
    72f8:	f0 01       	movw	r30, r0
    72fa:	43 9f       	mul	r20, r19
    72fc:	f0 0d       	add	r31, r0
    72fe:	11 24       	eor	r1, r1
    7300:	e3 59       	subi	r30, 0x93	; 147
    7302:	f7 4b       	sbci	r31, 0xB7	; 183
    7304:	40 81       	ld	r20, Z
    7306:	44 23       	and	r20, r20
    7308:	59 f0       	breq	.+22     	; 0x7320 <nextEmptySBTxBuffer+0x36>
    730a:	9f 5f       	subi	r25, 0xFF	; 255
    730c:	93 30       	cpi	r25, 0x03	; 3
    730e:	50 f4       	brcc	.+20     	; 0x7324 <nextEmptySBTxBuffer+0x3a>
    7310:	8f 5f       	subi	r24, 0xFF	; 255
    7312:	80 93 ed 47 	sts	0x47ED, r24	; 0x8047ed <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    7316:	83 30       	cpi	r24, 0x03	; 3
    7318:	48 f3       	brcs	.-46     	; 0x72ec <nextEmptySBTxBuffer+0x2>
    731a:	10 92 ed 47 	sts	0x47ED, r1	; 0x8047ed <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    731e:	e6 cf       	rjmp	.-52     	; 0x72ec <nextEmptySBTxBuffer+0x2>
    7320:	81 e0       	ldi	r24, 0x01	; 1
    7322:	01 c0       	rjmp	.+2      	; 0x7326 <nextEmptySBTxBuffer+0x3c>
    7324:	80 e0       	ldi	r24, 0x00	; 0
    7326:	88 23       	and	r24, r24
    7328:	49 f0       	breq	.+18     	; 0x733c <nextEmptySBTxBuffer+0x52>
    732a:	49 e2       	ldi	r20, 0x29	; 41
    732c:	42 9f       	mul	r20, r18
    732e:	c0 01       	movw	r24, r0
    7330:	43 9f       	mul	r20, r19
    7332:	90 0d       	add	r25, r0
    7334:	11 24       	eor	r1, r1
    7336:	83 59       	subi	r24, 0x93	; 147
    7338:	97 4b       	sbci	r25, 0xB7	; 183
    733a:	08 95       	ret
    733c:	80 e0       	ldi	r24, 0x00	; 0
    733e:	90 e0       	ldi	r25, 0x00	; 0
    7340:	08 95       	ret

00007342 <nextEmptySBRxBuffer>:
    7342:	90 e0       	ldi	r25, 0x00	; 0
    7344:	80 91 ec 47 	lds	r24, 0x47EC	; 0x8047ec <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    7348:	28 2f       	mov	r18, r24
    734a:	30 e0       	ldi	r19, 0x00	; 0
    734c:	4f e3       	ldi	r20, 0x3F	; 63
    734e:	42 9f       	mul	r20, r18
    7350:	f0 01       	movw	r30, r0
    7352:	43 9f       	mul	r20, r19
    7354:	f0 0d       	add	r31, r0
    7356:	11 24       	eor	r1, r1
    7358:	e1 51       	subi	r30, 0x11	; 17
    735a:	f8 4b       	sbci	r31, 0xB8	; 184
    735c:	41 81       	ldd	r20, Z+1	; 0x01
    735e:	52 81       	ldd	r21, Z+2	; 0x02
    7360:	45 2b       	or	r20, r21
    7362:	59 f0       	breq	.+22     	; 0x737a <nextEmptySBRxBuffer+0x38>
    7364:	9f 5f       	subi	r25, 0xFF	; 255
    7366:	92 30       	cpi	r25, 0x02	; 2
    7368:	50 f4       	brcc	.+20     	; 0x737e <nextEmptySBRxBuffer+0x3c>
    736a:	8f 5f       	subi	r24, 0xFF	; 255
    736c:	80 93 ec 47 	sts	0x47EC, r24	; 0x8047ec <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    7370:	82 30       	cpi	r24, 0x02	; 2
    7372:	40 f3       	brcs	.-48     	; 0x7344 <nextEmptySBRxBuffer+0x2>
    7374:	10 92 ec 47 	sts	0x47EC, r1	; 0x8047ec <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    7378:	e5 cf       	rjmp	.-54     	; 0x7344 <nextEmptySBRxBuffer+0x2>
    737a:	81 e0       	ldi	r24, 0x01	; 1
    737c:	01 c0       	rjmp	.+2      	; 0x7380 <nextEmptySBRxBuffer+0x3e>
    737e:	80 e0       	ldi	r24, 0x00	; 0
    7380:	88 23       	and	r24, r24
    7382:	49 f0       	breq	.+18     	; 0x7396 <nextEmptySBRxBuffer+0x54>
    7384:	4f e3       	ldi	r20, 0x3F	; 63
    7386:	42 9f       	mul	r20, r18
    7388:	c0 01       	movw	r24, r0
    738a:	43 9f       	mul	r20, r19
    738c:	90 0d       	add	r25, r0
    738e:	11 24       	eor	r1, r1
    7390:	81 51       	subi	r24, 0x11	; 17
    7392:	98 4b       	sbci	r25, 0xB8	; 184
    7394:	08 95       	ret
    7396:	80 e0       	ldi	r24, 0x00	; 0
    7398:	90 e0       	ldi	r25, 0x00	; 0
    739a:	08 95       	ret

0000739c <nextFullSBRxBuffer>:
    739c:	90 e0       	ldi	r25, 0x00	; 0
    739e:	80 91 eb 47 	lds	r24, 0x47EB	; 0x8047eb <_ZZ18nextFullSBRxBufferE11bufferIndex>
    73a2:	28 2f       	mov	r18, r24
    73a4:	30 e0       	ldi	r19, 0x00	; 0
    73a6:	4f e3       	ldi	r20, 0x3F	; 63
    73a8:	42 9f       	mul	r20, r18
    73aa:	f0 01       	movw	r30, r0
    73ac:	43 9f       	mul	r20, r19
    73ae:	f0 0d       	add	r31, r0
    73b0:	11 24       	eor	r1, r1
    73b2:	e1 51       	subi	r30, 0x11	; 17
    73b4:	f8 4b       	sbci	r31, 0xB8	; 184
    73b6:	41 81       	ldd	r20, Z+1	; 0x01
    73b8:	52 81       	ldd	r21, Z+2	; 0x02
    73ba:	45 2b       	or	r20, r21
    73bc:	59 f4       	brne	.+22     	; 0x73d4 <nextFullSBRxBuffer+0x38>
    73be:	9f 5f       	subi	r25, 0xFF	; 255
    73c0:	92 30       	cpi	r25, 0x02	; 2
    73c2:	50 f4       	brcc	.+20     	; 0x73d8 <nextFullSBRxBuffer+0x3c>
    73c4:	8f 5f       	subi	r24, 0xFF	; 255
    73c6:	80 93 eb 47 	sts	0x47EB, r24	; 0x8047eb <_ZZ18nextFullSBRxBufferE11bufferIndex>
    73ca:	82 30       	cpi	r24, 0x02	; 2
    73cc:	40 f3       	brcs	.-48     	; 0x739e <nextFullSBRxBuffer+0x2>
    73ce:	10 92 eb 47 	sts	0x47EB, r1	; 0x8047eb <_ZZ18nextFullSBRxBufferE11bufferIndex>
    73d2:	e5 cf       	rjmp	.-54     	; 0x739e <nextFullSBRxBuffer+0x2>
    73d4:	81 e0       	ldi	r24, 0x01	; 1
    73d6:	01 c0       	rjmp	.+2      	; 0x73da <nextFullSBRxBuffer+0x3e>
    73d8:	80 e0       	ldi	r24, 0x00	; 0
    73da:	88 23       	and	r24, r24
    73dc:	49 f0       	breq	.+18     	; 0x73f0 <nextFullSBRxBuffer+0x54>
    73de:	4f e3       	ldi	r20, 0x3F	; 63
    73e0:	42 9f       	mul	r20, r18
    73e2:	c0 01       	movw	r24, r0
    73e4:	43 9f       	mul	r20, r19
    73e6:	90 0d       	add	r25, r0
    73e8:	11 24       	eor	r1, r1
    73ea:	81 51       	subi	r24, 0x11	; 17
    73ec:	98 4b       	sbci	r25, 0xB8	; 184
    73ee:	08 95       	ret
    73f0:	80 e0       	ldi	r24, 0x00	; 0
    73f2:	90 e0       	ldi	r25, 0x00	; 0
    73f4:	08 95       	ret

000073f6 <serialbusTxInProgress>:
    73f6:	80 91 e8 48 	lds	r24, 0x48E8	; 0x8048e8 <_ZL19serialbus_tx_active>
    73fa:	08 95       	ret

000073fc <_Z18serialbus_start_txv>:
    73fc:	cf 93       	push	r28
    73fe:	80 91 e8 48 	lds	r24, 0x48E8	; 0x8048e8 <_ZL19serialbus_tx_active>
    7402:	c1 e0       	ldi	r28, 0x01	; 1
    7404:	81 11       	cpse	r24, r1
    7406:	c0 e0       	ldi	r28, 0x00	; 0
    7408:	81 11       	cpse	r24, r1
    740a:	0c c0       	rjmp	.+24     	; 0x7424 <_Z18serialbus_start_txv+0x28>
    740c:	81 e0       	ldi	r24, 0x01	; 1
    740e:	80 93 e8 48 	sts	0x48E8, r24	; 0x8048e8 <_ZL19serialbus_tx_active>
    7412:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    7416:	81 11       	cpse	r24, r1
    7418:	03 c0       	rjmp	.+6      	; 0x7420 <_Z18serialbus_start_txv+0x24>
    741a:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <USART4_enable_tx>
    741e:	02 c0       	rjmp	.+4      	; 0x7424 <_Z18serialbus_start_txv+0x28>
    7420:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <USART1_enable_tx>
    7424:	8c 2f       	mov	r24, r28
    7426:	cf 91       	pop	r28
    7428:	08 95       	ret

0000742a <serialbus_end_tx>:
    742a:	80 91 e8 48 	lds	r24, 0x48E8	; 0x8048e8 <_ZL19serialbus_tx_active>
    742e:	88 23       	and	r24, r24
    7430:	89 f0       	breq	.+34     	; 0x7454 <serialbus_end_tx+0x2a>
    7432:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    7436:	84 30       	cpi	r24, 0x04	; 4
    7438:	31 f4       	brne	.+12     	; 0x7446 <serialbus_end_tx+0x1c>
    743a:	e0 e8       	ldi	r30, 0x80	; 128
    743c:	f8 e0       	ldi	r31, 0x08	; 8
    743e:	85 81       	ldd	r24, Z+5	; 0x05
    7440:	8f 7d       	andi	r24, 0xDF	; 223
    7442:	85 83       	std	Z+5, r24	; 0x05
    7444:	05 c0       	rjmp	.+10     	; 0x7450 <serialbus_end_tx+0x26>
    7446:	e0 e2       	ldi	r30, 0x20	; 32
    7448:	f8 e0       	ldi	r31, 0x08	; 8
    744a:	85 81       	ldd	r24, Z+5	; 0x05
    744c:	8f 7d       	andi	r24, 0xDF	; 223
    744e:	85 83       	std	Z+5, r24	; 0x05
    7450:	10 92 e8 48 	sts	0x48E8, r1	; 0x8048e8 <_ZL19serialbus_tx_active>
    7454:	08 95       	ret

00007456 <serialbus_init>:
    7456:	cf 93       	push	r28
    7458:	2e e7       	ldi	r18, 0x7E	; 126
    745a:	ef ee       	ldi	r30, 0xEF	; 239
    745c:	f7 e4       	ldi	r31, 0x47	; 71
    745e:	df 01       	movw	r26, r30
    7460:	1d 92       	st	X+, r1
    7462:	2a 95       	dec	r18
    7464:	e9 f7       	brne	.-6      	; 0x7460 <serialbus_init+0xa>
    7466:	a0 e0       	ldi	r26, 0x00	; 0
    7468:	b0 e0       	ldi	r27, 0x00	; 0
    746a:	a3 30       	cpi	r26, 0x03	; 3
    746c:	b1 05       	cpc	r27, r1
    746e:	5c f4       	brge	.+22     	; 0x7486 <serialbus_init+0x30>
    7470:	29 e2       	ldi	r18, 0x29	; 41
    7472:	2a 9f       	mul	r18, r26
    7474:	f0 01       	movw	r30, r0
    7476:	2b 9f       	mul	r18, r27
    7478:	f0 0d       	add	r31, r0
    747a:	11 24       	eor	r1, r1
    747c:	e3 59       	subi	r30, 0x93	; 147
    747e:	f7 4b       	sbci	r31, 0xB7	; 183
    7480:	10 82       	st	Z, r1
    7482:	11 96       	adiw	r26, 0x01	; 1
    7484:	f2 cf       	rjmp	.-28     	; 0x746a <serialbus_init+0x14>
    7486:	46 30       	cpi	r20, 0x06	; 6
    7488:	21 f4       	brne	.+8      	; 0x7492 <serialbus_init+0x3c>
    748a:	20 91 27 40 	lds	r18, 0x4027	; 0x804027 <g_serialbus_usart_number>
    748e:	27 30       	cpi	r18, 0x07	; 7
    7490:	51 f4       	brne	.+20     	; 0x74a6 <serialbus_init+0x50>
    7492:	c4 2f       	mov	r28, r20
    7494:	44 30       	cpi	r20, 0x04	; 4
    7496:	19 f4       	brne	.+6      	; 0x749e <serialbus_init+0x48>
    7498:	0e 94 27 39 	call	0x724e	; 0x724e <_ZL21USART4_initializationm>
    749c:	02 c0       	rjmp	.+4      	; 0x74a2 <serialbus_init+0x4c>
    749e:	0e 94 38 39 	call	0x7270	; 0x7270 <_ZL21USART1_initializationm>
    74a2:	c0 93 27 40 	sts	0x4027, r28	; 0x804027 <g_serialbus_usart_number>
    74a6:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <_ZL14g_bus_disabled>
    74aa:	cf 91       	pop	r28
    74ac:	08 95       	ret

000074ae <_Z19serialbus_send_textPc>:
	}
}


BOOL serialbus_send_text(char* text)
{
    74ae:	0f 93       	push	r16
    74b0:	1f 93       	push	r17
    74b2:	cf 93       	push	r28
    74b4:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
    74b6:	20 91 26 40 	lds	r18, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    74ba:	21 11       	cpse	r18, r1
    74bc:	2f c0       	rjmp	.+94     	; 0x751c <_Z19serialbus_send_textPc+0x6e>
	{
		return( err);
	}

	if(text)
    74be:	00 97       	sbiw	r24, 0x00	; 0
    74c0:	79 f1       	breq	.+94     	; 0x7520 <_Z19serialbus_send_textPc+0x72>
    74c2:	8c 01       	movw	r16, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    74c4:	0e 94 75 39 	call	0x72ea	; 0x72ea <nextEmptySBTxBuffer>


BOOL serialbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;
    74c8:	c8 ec       	ldi	r28, 0xC8	; 200
    74ca:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    74cc:	00 97       	sbiw	r24, 0x00	; 0
    74ce:	b1 f4       	brne	.+44     	; 0x74fc <_Z19serialbus_send_textPc+0x4e>
    74d0:	20 97       	sbiw	r28, 0x00	; 0
    74d2:	a1 f0       	breq	.+40     	; 0x74fc <_Z19serialbus_send_textPc+0x4e>
		{
			while(serialbusTxInProgress() && tries)
    74d4:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <serialbusTxInProgress>
    74d8:	88 23       	and	r24, r24
    74da:	21 f0       	breq	.+8      	; 0x74e4 <_Z19serialbus_send_textPc+0x36>
    74dc:	20 97       	sbiw	r28, 0x00	; 0
    74de:	21 f4       	brne	.+8      	; 0x74e8 <_Z19serialbus_send_textPc+0x3a>
    74e0:	90 e0       	ldi	r25, 0x00	; 0
    74e2:	03 c0       	rjmp	.+6      	; 0x74ea <_Z19serialbus_send_textPc+0x3c>
    74e4:	90 e0       	ldi	r25, 0x00	; 0
    74e6:	01 c0       	rjmp	.+2      	; 0x74ea <_Z19serialbus_send_textPc+0x3c>
    74e8:	91 e0       	ldi	r25, 0x01	; 1
    74ea:	99 23       	and	r25, r25
    74ec:	21 f0       	breq	.+8      	; 0x74f6 <_Z19serialbus_send_textPc+0x48>
			{
				if(tries)
    74ee:	20 97       	sbiw	r28, 0x00	; 0
    74f0:	89 f3       	breq	.-30     	; 0x74d4 <_Z19serialbus_send_textPc+0x26>
				{
					tries--;    /* wait until transmit finishes */
    74f2:	21 97       	sbiw	r28, 0x01	; 1
    74f4:	ef cf       	rjmp	.-34     	; 0x74d4 <_Z19serialbus_send_textPc+0x26>
				}
			}
			buff = nextEmptySBTxBuffer();
    74f6:	0e 94 75 39 	call	0x72ea	; 0x72ea <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    74fa:	e8 cf       	rjmp	.-48     	; 0x74cc <_Z19serialbus_send_textPc+0x1e>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    74fc:	00 97       	sbiw	r24, 0x00	; 0
    74fe:	91 f0       	breq	.+36     	; 0x7524 <_Z19serialbus_send_textPc+0x76>
		{
			sprintf(*buff, text);
    7500:	1f 93       	push	r17
    7502:	0f 93       	push	r16
    7504:	9f 93       	push	r25
    7506:	8f 93       	push	r24
    7508:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <sprintf>

			serialbus_start_tx();
    750c:	0e 94 fe 39 	call	0x73fc	; 0x73fc <_Z18serialbus_start_txv>
    7510:	0f 90       	pop	r0
    7512:	0f 90       	pop	r0
    7514:	0f 90       	pop	r0
    7516:	0f 90       	pop	r0
			err = FALSE;
    7518:	80 e0       	ldi	r24, 0x00	; 0
    751a:	05 c0       	rjmp	.+10     	; 0x7526 <_Z19serialbus_send_textPc+0x78>
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    751c:	81 e0       	ldi	r24, 0x01	; 1
    751e:	03 c0       	rjmp	.+6      	; 0x7526 <_Z19serialbus_send_textPc+0x78>
}


BOOL serialbus_send_text(char* text)
{
	BOOL err = TRUE;
    7520:	81 e0       	ldi	r24, 0x01	; 1
    7522:	01 c0       	rjmp	.+2      	; 0x7526 <_Z19serialbus_send_textPc+0x78>
    7524:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
    7526:	df 91       	pop	r29
    7528:	cf 91       	pop	r28
    752a:	1f 91       	pop	r17
    752c:	0f 91       	pop	r16
    752e:	08 95       	ret

00007530 <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    7530:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7534:	81 11       	cpse	r24, r1
    7536:	06 c0       	rjmp	.+12     	; 0x7544 <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    7538:	81 ed       	ldi	r24, 0xD1	; 209
    753a:	94 e4       	ldi	r25, 0x44	; 68
    753c:	0e 94 57 3a 	call	0x74ae	; 0x74ae <_Z19serialbus_send_textPc>
    7540:	81 11       	cpse	r24, r1
    7542:	fa cf       	rjmp	.-12     	; 0x7538 <sb_send_NewPrompt+0x8>
    7544:	08 95       	ret

00007546 <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    7546:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    754a:	81 11       	cpse	r24, r1
    754c:	04 c0       	rjmp	.+8      	; 0x7556 <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    754e:	84 ed       	ldi	r24, 0xD4	; 212
    7550:	94 e4       	ldi	r25, 0x44	; 68
    7552:	0e 94 57 3a 	call	0x74ae	; 0x74ae <_Z19serialbus_send_textPc>
    7556:	08 95       	ret

00007558 <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    7558:	90 91 26 40 	lds	r25, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    755c:	91 11       	cpse	r25, r1
    755e:	07 c0       	rjmp	.+14     	; 0x756e <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    7560:	e9 ee       	ldi	r30, 0xE9	; 233
    7562:	f8 e4       	ldi	r31, 0x48	; 72
    7564:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    7566:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    7568:	cf 01       	movw	r24, r30
    756a:	0e 94 57 3a 	call	0x74ae	; 0x74ae <_Z19serialbus_send_textPc>
    756e:	08 95       	ret

00007570 <sb_send_string>:
}

BOOL sb_send_string(char* str)
{
    7570:	af 92       	push	r10
    7572:	bf 92       	push	r11
    7574:	cf 92       	push	r12
    7576:	df 92       	push	r13
    7578:	ef 92       	push	r14
    757a:	ff 92       	push	r15
    757c:	0f 93       	push	r16
    757e:	1f 93       	push	r17
    7580:	cf 93       	push	r28
	BOOL err = FALSE;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    7582:	20 91 26 40 	lds	r18, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7586:	21 11       	cpse	r18, r1
    7588:	44 c0       	rjmp	.+136    	; 0x7612 <sb_send_string+0xa2>
	{
		return( TRUE);
	}

	if(str == NULL)
    758a:	00 97       	sbiw	r24, 0x00	; 0
    758c:	09 f4       	brne	.+2      	; 0x7590 <sb_send_string+0x20>
    758e:	43 c0       	rjmp	.+134    	; 0x7616 <sb_send_string+0xa6>
	{
		return( TRUE);
	}

	if(!*str)
    7590:	fc 01       	movw	r30, r24
    7592:	20 81       	ld	r18, Z
    7594:	22 23       	and	r18, r18
    7596:	09 f4       	brne	.+2      	; 0x759a <sb_send_string+0x2a>
    7598:	40 c0       	rjmp	.+128    	; 0x761a <sb_send_string+0xaa>
    759a:	5c 01       	movw	r10, r24
	{
		return(TRUE);
	}

	length = strlen(str);
    759c:	01 90       	ld	r0, Z+
    759e:	00 20       	and	r0, r0
    75a0:	e9 f7       	brne	.-6      	; 0x759c <sb_send_string+0x2c>
    75a2:	31 97       	sbiw	r30, 0x01	; 1
    75a4:	6f 01       	movw	r12, r30
    75a6:	c8 1a       	sub	r12, r24
    75a8:	d9 0a       	sbc	r13, r25
}

BOOL sb_send_string(char* str)
{
	BOOL err = FALSE;
	uint16_t length, lengthToSend, lengthSent=0;
    75aa:	e1 2c       	mov	r14, r1
    75ac:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH);
    75ae:	86 01       	movw	r16, r12
    75b0:	0e 19       	sub	r16, r14
    75b2:	1f 09       	sbc	r17, r15
    75b4:	09 32       	cpi	r16, 0x29	; 41
    75b6:	11 05       	cpc	r17, r1
    75b8:	10 f0       	brcs	.+4      	; 0x75be <sb_send_string+0x4e>
    75ba:	09 e2       	ldi	r16, 0x29	; 41
    75bc:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(g_tempMsgBuff, &str[lengthSent], lengthToSend);
    75be:	a8 01       	movw	r20, r16
    75c0:	b5 01       	movw	r22, r10
    75c2:	6e 0d       	add	r22, r14
    75c4:	7f 1d       	adc	r23, r15
    75c6:	89 ee       	ldi	r24, 0xE9	; 233
    75c8:	98 e4       	ldi	r25, 0x48	; 72
    75ca:	0e 94 42 4a 	call	0x9484	; 0x9484 <strncpy>
		if(lengthToSend < SERIALBUS_MAX_TX_MSG_LENGTH)
    75ce:	09 32       	cpi	r16, 0x29	; 41
    75d0:	11 05       	cpc	r17, r1
    75d2:	20 f4       	brcc	.+8      	; 0x75dc <sb_send_string+0x6c>
		{
			g_tempMsgBuff[lengthToSend] = '\0';
    75d4:	f8 01       	movw	r30, r16
    75d6:	e7 51       	subi	r30, 0x17	; 23
    75d8:	f7 4b       	sbci	r31, 0xB7	; 183
    75da:	10 82       	st	Z, r1
		}
		while((err = serialbus_send_text(g_tempMsgBuff)))
    75dc:	89 ee       	ldi	r24, 0xE9	; 233
    75de:	98 e4       	ldi	r25, 0x48	; 72
    75e0:	0e 94 57 3a 	call	0x74ae	; 0x74ae <_Z19serialbus_send_textPc>
    75e4:	c8 2f       	mov	r28, r24
    75e6:	81 11       	cpse	r24, r1
    75e8:	f9 cf       	rjmp	.-14     	; 0x75dc <sb_send_string+0x6c>
		{
			;
		}
		while(!err && serialbusTxInProgress())
    75ea:	c1 11       	cpse	r28, r1
    75ec:	06 c0       	rjmp	.+12     	; 0x75fa <sb_send_string+0x8a>
    75ee:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <serialbusTxInProgress>
    75f2:	88 23       	and	r24, r24
    75f4:	21 f0       	breq	.+8      	; 0x75fe <sb_send_string+0x8e>
    75f6:	91 e0       	ldi	r25, 0x01	; 1
    75f8:	03 c0       	rjmp	.+6      	; 0x7600 <sb_send_string+0x90>
    75fa:	90 e0       	ldi	r25, 0x00	; 0
    75fc:	01 c0       	rjmp	.+2      	; 0x7600 <sb_send_string+0x90>
    75fe:	90 e0       	ldi	r25, 0x00	; 0
    7600:	91 11       	cpse	r25, r1
    7602:	f3 cf       	rjmp	.-26     	; 0x75ea <sb_send_string+0x7a>
		{
			;
		}
		
		lengthSent += lengthToSend;
    7604:	e0 0e       	add	r14, r16
    7606:	f1 1e       	adc	r15, r17
		done = lengthSent >= length;
	}while(!done);
    7608:	ec 14       	cp	r14, r12
    760a:	fd 04       	cpc	r15, r13
    760c:	80 f2       	brcs	.-96     	; 0x75ae <sb_send_string+0x3e>

	return( err);
    760e:	8c 2f       	mov	r24, r28
    7610:	05 c0       	rjmp	.+10     	; 0x761c <sb_send_string+0xac>
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
	{
		return( TRUE);
    7612:	81 e0       	ldi	r24, 0x01	; 1
    7614:	03 c0       	rjmp	.+6      	; 0x761c <sb_send_string+0xac>
	}

	if(str == NULL)
	{
		return( TRUE);
    7616:	81 e0       	ldi	r24, 0x01	; 1
    7618:	01 c0       	rjmp	.+2      	; 0x761c <sb_send_string+0xac>
	}

	if(!*str)
	{
		return(TRUE);
    761a:	81 e0       	ldi	r24, 0x01	; 1
		lengthSent += lengthToSend;
		done = lengthSent >= length;
	}while(!done);

	return( err);
}
    761c:	cf 91       	pop	r28
    761e:	1f 91       	pop	r17
    7620:	0f 91       	pop	r16
    7622:	ff 90       	pop	r15
    7624:	ef 90       	pop	r14
    7626:	df 90       	pop	r13
    7628:	cf 90       	pop	r12
    762a:	bf 90       	pop	r11
    762c:	af 90       	pop	r10
    762e:	08 95       	ret

00007630 <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    7630:	4f 92       	push	r4
    7632:	5f 92       	push	r5
    7634:	6f 92       	push	r6
    7636:	7f 92       	push	r7
    7638:	8f 92       	push	r8
    763a:	9f 92       	push	r9
    763c:	af 92       	push	r10
    763e:	bf 92       	push	r11
    7640:	cf 92       	push	r12
    7642:	df 92       	push	r13
    7644:	ef 92       	push	r14
    7646:	ff 92       	push	r15
    7648:	0f 93       	push	r16
    764a:	1f 93       	push	r17
    764c:	cf 93       	push	r28
    764e:	df 93       	push	r29
    7650:	8c 01       	movw	r16, r24
    7652:	eb 01       	movw	r28, r22
    7654:	fc 01       	movw	r30, r24
    7656:	40 80       	ld	r4, Z
    7658:	51 80       	ldd	r5, Z+1	; 0x01
    765a:	62 80       	ldd	r6, Z+2	; 0x02
    765c:	73 80       	ldd	r7, Z+3	; 0x03
    765e:	88 80       	ld	r8, Y
    7660:	99 80       	ldd	r9, Y+1	; 0x01
    7662:	aa 80       	ldd	r10, Y+2	; 0x02
    7664:	bb 80       	ldd	r11, Y+3	; 0x03
    7666:	41 14       	cp	r4, r1
    7668:	51 04       	cpc	r5, r1
    766a:	61 04       	cpc	r6, r1
    766c:	71 04       	cpc	r7, r1
    766e:	e1 f1       	breq	.+120    	; 0x76e8 <_Z13reduce_by_gcdPmS_+0xb8>
    7670:	81 14       	cp	r8, r1
    7672:	91 04       	cpc	r9, r1
    7674:	a1 04       	cpc	r10, r1
    7676:	b1 04       	cpc	r11, r1
    7678:	b9 f1       	breq	.+110    	; 0x76e8 <_Z13reduce_by_gcdPmS_+0xb8>
    767a:	c3 01       	movw	r24, r6
    767c:	b2 01       	movw	r22, r4
    767e:	a5 01       	movw	r20, r10
    7680:	94 01       	movw	r18, r8
    7682:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    7686:	6b 01       	movw	r12, r22
    7688:	7c 01       	movw	r14, r24
    768a:	c1 14       	cp	r12, r1
    768c:	d1 04       	cpc	r13, r1
    768e:	e1 04       	cpc	r14, r1
    7690:	f1 04       	cpc	r15, r1
    7692:	69 f0       	breq	.+26     	; 0x76ae <_Z13reduce_by_gcdPmS_+0x7e>
    7694:	c5 01       	movw	r24, r10
    7696:	b4 01       	movw	r22, r8
    7698:	a7 01       	movw	r20, r14
    769a:	96 01       	movw	r18, r12
    769c:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    76a0:	46 01       	movw	r8, r12
    76a2:	57 01       	movw	r10, r14
    76a4:	c6 2e       	mov	r12, r22
    76a6:	d7 2e       	mov	r13, r23
    76a8:	e8 2e       	mov	r14, r24
    76aa:	f9 2e       	mov	r15, r25
    76ac:	ee cf       	rjmp	.-36     	; 0x768a <_Z13reduce_by_gcdPmS_+0x5a>
    76ae:	f2 e0       	ldi	r31, 0x02	; 2
    76b0:	8f 16       	cp	r8, r31
    76b2:	91 04       	cpc	r9, r1
    76b4:	a1 04       	cpc	r10, r1
    76b6:	b1 04       	cpc	r11, r1
    76b8:	b8 f0       	brcs	.+46     	; 0x76e8 <_Z13reduce_by_gcdPmS_+0xb8>
    76ba:	c3 01       	movw	r24, r6
    76bc:	b2 01       	movw	r22, r4
    76be:	a5 01       	movw	r20, r10
    76c0:	94 01       	movw	r18, r8
    76c2:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    76c6:	f8 01       	movw	r30, r16
    76c8:	20 83       	st	Z, r18
    76ca:	31 83       	std	Z+1, r19	; 0x01
    76cc:	42 83       	std	Z+2, r20	; 0x02
    76ce:	53 83       	std	Z+3, r21	; 0x03
    76d0:	68 81       	ld	r22, Y
    76d2:	79 81       	ldd	r23, Y+1	; 0x01
    76d4:	8a 81       	ldd	r24, Y+2	; 0x02
    76d6:	9b 81       	ldd	r25, Y+3	; 0x03
    76d8:	a5 01       	movw	r20, r10
    76da:	94 01       	movw	r18, r8
    76dc:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    76e0:	28 83       	st	Y, r18
    76e2:	39 83       	std	Y+1, r19	; 0x01
    76e4:	4a 83       	std	Y+2, r20	; 0x02
    76e6:	5b 83       	std	Y+3, r21	; 0x03
    76e8:	df 91       	pop	r29
    76ea:	cf 91       	pop	r28
    76ec:	1f 91       	pop	r17
    76ee:	0f 91       	pop	r16
    76f0:	ff 90       	pop	r15
    76f2:	ef 90       	pop	r14
    76f4:	df 90       	pop	r13
    76f6:	cf 90       	pop	r12
    76f8:	bf 90       	pop	r11
    76fa:	af 90       	pop	r10
    76fc:	9f 90       	pop	r9
    76fe:	8f 90       	pop	r8
    7700:	7f 90       	pop	r7
    7702:	6f 90       	pop	r6
    7704:	5f 90       	pop	r5
    7706:	4f 90       	pop	r4
    7708:	08 95       	ret

0000770a <_Z8pll_calcmP13u_si5351_regs>:
    770a:	4f 92       	push	r4
    770c:	5f 92       	push	r5
    770e:	6f 92       	push	r6
    7710:	7f 92       	push	r7
    7712:	8f 92       	push	r8
    7714:	9f 92       	push	r9
    7716:	af 92       	push	r10
    7718:	bf 92       	push	r11
    771a:	cf 92       	push	r12
    771c:	df 92       	push	r13
    771e:	ef 92       	push	r14
    7720:	ff 92       	push	r15
    7722:	0f 93       	push	r16
    7724:	1f 93       	push	r17
    7726:	cf 93       	push	r28
    7728:	df 93       	push	r29
    772a:	cd b7       	in	r28, 0x3d	; 61
    772c:	de b7       	in	r29, 0x3e	; 62
    772e:	28 97       	sbiw	r28, 0x08	; 8
    7730:	cd bf       	out	0x3d, r28	; 61
    7732:	de bf       	out	0x3e, r29	; 62
    7734:	8a 01       	movw	r16, r20
    7736:	80 90 28 40 	lds	r8, 0x4028	; 0x804028 <_ZL9xtal_freq>
    773a:	90 90 29 40 	lds	r9, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    773e:	a0 90 2a 40 	lds	r10, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    7742:	b0 90 2b 40 	lds	r11, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    7746:	a5 01       	movw	r20, r10
    7748:	94 01       	movw	r18, r8
    774a:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    774e:	69 01       	movw	r12, r18
    7750:	7a 01       	movw	r14, r20
    7752:	69 83       	std	Y+1, r22	; 0x01
    7754:	7a 83       	std	Y+2, r23	; 0x02
    7756:	8b 83       	std	Y+3, r24	; 0x03
    7758:	9c 83       	std	Y+4, r25	; 0x04
    775a:	8d 82       	std	Y+5, r8	; 0x05
    775c:	9e 82       	std	Y+6, r9	; 0x06
    775e:	af 82       	std	Y+7, r10	; 0x07
    7760:	b8 86       	std	Y+8, r11	; 0x08
    7762:	be 01       	movw	r22, r28
    7764:	6b 5f       	subi	r22, 0xFB	; 251
    7766:	7f 4f       	sbci	r23, 0xFF	; 255
    7768:	ce 01       	movw	r24, r28
    776a:	01 96       	adiw	r24, 0x01	; 1
    776c:	0e 94 18 3b 	call	0x7630	; 0x7630 <_Z13reduce_by_gcdPmS_>
    7770:	89 80       	ldd	r8, Y+1	; 0x01
    7772:	9a 80       	ldd	r9, Y+2	; 0x02
    7774:	ab 80       	ldd	r10, Y+3	; 0x03
    7776:	bc 80       	ldd	r11, Y+4	; 0x04
    7778:	88 0c       	add	r8, r8
    777a:	99 1c       	adc	r9, r9
    777c:	aa 1c       	adc	r10, r10
    777e:	bb 1c       	adc	r11, r11
    7780:	88 0c       	add	r8, r8
    7782:	99 1c       	adc	r9, r9
    7784:	aa 1c       	adc	r10, r10
    7786:	bb 1c       	adc	r11, r11
    7788:	88 0c       	add	r8, r8
    778a:	99 1c       	adc	r9, r9
    778c:	aa 1c       	adc	r10, r10
    778e:	bb 1c       	adc	r11, r11
    7790:	88 0c       	add	r8, r8
    7792:	99 1c       	adc	r9, r9
    7794:	aa 1c       	adc	r10, r10
    7796:	bb 1c       	adc	r11, r11
    7798:	88 0c       	add	r8, r8
    779a:	99 1c       	adc	r9, r9
    779c:	aa 1c       	adc	r10, r10
    779e:	bb 1c       	adc	r11, r11
    77a0:	88 0c       	add	r8, r8
    77a2:	99 1c       	adc	r9, r9
    77a4:	aa 1c       	adc	r10, r10
    77a6:	bb 1c       	adc	r11, r11
    77a8:	88 0c       	add	r8, r8
    77aa:	99 1c       	adc	r9, r9
    77ac:	aa 1c       	adc	r10, r10
    77ae:	bb 1c       	adc	r11, r11
    77b0:	4d 80       	ldd	r4, Y+5	; 0x05
    77b2:	5e 80       	ldd	r5, Y+6	; 0x06
    77b4:	6f 80       	ldd	r6, Y+7	; 0x07
    77b6:	78 84       	ldd	r7, Y+8	; 0x08
    77b8:	c5 01       	movw	r24, r10
    77ba:	b4 01       	movw	r22, r8
    77bc:	a3 01       	movw	r20, r6
    77be:	92 01       	movw	r18, r4
    77c0:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    77c4:	cc 0c       	add	r12, r12
    77c6:	dd 1c       	adc	r13, r13
    77c8:	ee 1c       	adc	r14, r14
    77ca:	ff 1c       	adc	r15, r15
    77cc:	cc 0c       	add	r12, r12
    77ce:	dd 1c       	adc	r13, r13
    77d0:	ee 1c       	adc	r14, r14
    77d2:	ff 1c       	adc	r15, r15
    77d4:	cc 0c       	add	r12, r12
    77d6:	dd 1c       	adc	r13, r13
    77d8:	ee 1c       	adc	r14, r14
    77da:	ff 1c       	adc	r15, r15
    77dc:	cc 0c       	add	r12, r12
    77de:	dd 1c       	adc	r13, r13
    77e0:	ee 1c       	adc	r14, r14
    77e2:	ff 1c       	adc	r15, r15
    77e4:	cc 0c       	add	r12, r12
    77e6:	dd 1c       	adc	r13, r13
    77e8:	ee 1c       	adc	r14, r14
    77ea:	ff 1c       	adc	r15, r15
    77ec:	cc 0c       	add	r12, r12
    77ee:	dd 1c       	adc	r13, r13
    77f0:	ee 1c       	adc	r14, r14
    77f2:	ff 1c       	adc	r15, r15
    77f4:	cc 0c       	add	r12, r12
    77f6:	dd 1c       	adc	r13, r13
    77f8:	ee 1c       	adc	r14, r14
    77fa:	ff 1c       	adc	r15, r15
    77fc:	c2 0e       	add	r12, r18
    77fe:	d3 1e       	adc	r13, r19
    7800:	e4 1e       	adc	r14, r20
    7802:	f5 1e       	adc	r15, r21
    7804:	82 e0       	ldi	r24, 0x02	; 2
    7806:	d8 1a       	sub	r13, r24
    7808:	e1 08       	sbc	r14, r1
    780a:	f1 08       	sbc	r15, r1
    780c:	f8 01       	movw	r30, r16
    780e:	c0 82       	st	Z, r12
    7810:	d1 82       	std	Z+1, r13	; 0x01
    7812:	e2 82       	std	Z+2, r14	; 0x02
    7814:	f3 82       	std	Z+3, r15	; 0x03
    7816:	c3 01       	movw	r24, r6
    7818:	b2 01       	movw	r22, r4
    781a:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    781e:	86 1a       	sub	r8, r22
    7820:	97 0a       	sbc	r9, r23
    7822:	a8 0a       	sbc	r10, r24
    7824:	b9 0a       	sbc	r11, r25
    7826:	84 82       	std	Z+4, r8	; 0x04
    7828:	95 82       	std	Z+5, r9	; 0x05
    782a:	a6 82       	std	Z+6, r10	; 0x06
    782c:	b7 82       	std	Z+7, r11	; 0x07
    782e:	40 86       	std	Z+8, r4	; 0x08
    7830:	51 86       	std	Z+9, r5	; 0x09
    7832:	62 86       	std	Z+10, r6	; 0x0a
    7834:	73 86       	std	Z+11, r7	; 0x0b
    7836:	80 e0       	ldi	r24, 0x00	; 0
    7838:	28 96       	adiw	r28, 0x08	; 8
    783a:	cd bf       	out	0x3d, r28	; 61
    783c:	de bf       	out	0x3e, r29	; 62
    783e:	df 91       	pop	r29
    7840:	cf 91       	pop	r28
    7842:	1f 91       	pop	r17
    7844:	0f 91       	pop	r16
    7846:	ff 90       	pop	r15
    7848:	ef 90       	pop	r14
    784a:	df 90       	pop	r13
    784c:	cf 90       	pop	r12
    784e:	bf 90       	pop	r11
    7850:	af 90       	pop	r10
    7852:	9f 90       	pop	r9
    7854:	8f 90       	pop	r8
    7856:	7f 90       	pop	r7
    7858:	6f 90       	pop	r6
    785a:	5f 90       	pop	r5
    785c:	4f 90       	pop	r4
    785e:	08 95       	ret

00007860 <_Z15multisynth_calcmP13u_si5351_regsPhS1_>:
    7860:	2f 92       	push	r2
    7862:	3f 92       	push	r3
    7864:	4f 92       	push	r4
    7866:	5f 92       	push	r5
    7868:	6f 92       	push	r6
    786a:	7f 92       	push	r7
    786c:	8f 92       	push	r8
    786e:	9f 92       	push	r9
    7870:	af 92       	push	r10
    7872:	bf 92       	push	r11
    7874:	cf 92       	push	r12
    7876:	df 92       	push	r13
    7878:	ef 92       	push	r14
    787a:	ff 92       	push	r15
    787c:	0f 93       	push	r16
    787e:	1f 93       	push	r17
    7880:	cf 93       	push	r28
    7882:	df 93       	push	r29
    7884:	cd b7       	in	r28, 0x3d	; 61
    7886:	de b7       	in	r29, 0x3e	; 62
    7888:	25 97       	sbiw	r28, 0x05	; 5
    788a:	cd bf       	out	0x3d, r28	; 61
    788c:	de bf       	out	0x3e, r29	; 62
    788e:	2b 01       	movw	r4, r22
    7890:	3c 01       	movw	r6, r24
    7892:	4a 83       	std	Y+2, r20	; 0x02
    7894:	5b 83       	std	Y+3, r21	; 0x03
    7896:	18 01       	movw	r2, r16
    7898:	81 e0       	ldi	r24, 0x01	; 1
    789a:	f9 01       	movw	r30, r18
    789c:	80 83       	st	Z, r24
    789e:	f0 e8       	ldi	r31, 0x80	; 128
    78a0:	4f 16       	cp	r4, r31
    78a2:	f1 ed       	ldi	r31, 0xD1	; 209
    78a4:	5f 06       	cpc	r5, r31
    78a6:	f0 ef       	ldi	r31, 0xF0	; 240
    78a8:	6f 06       	cpc	r6, r31
    78aa:	f8 e0       	ldi	r31, 0x08	; 8
    78ac:	7f 06       	cpc	r7, r31
    78ae:	d0 f0       	brcs	.+52     	; 0x78e4 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x84>
    78b0:	c3 01       	movw	r24, r6
    78b2:	b2 01       	movw	r22, r4
    78b4:	66 0f       	add	r22, r22
    78b6:	77 1f       	adc	r23, r23
    78b8:	88 1f       	adc	r24, r24
    78ba:	99 1f       	adc	r25, r25
    78bc:	66 0f       	add	r22, r22
    78be:	77 1f       	adc	r23, r23
    78c0:	88 1f       	adc	r24, r24
    78c2:	99 1f       	adc	r25, r25
    78c4:	c1 2c       	mov	r12, r1
    78c6:	d1 2c       	mov	r13, r1
    78c8:	76 01       	movw	r14, r12
    78ca:	68 94       	set
    78cc:	c2 f8       	bld	r12, 2
    78ce:	48 c0       	rjmp	.+144    	; 0x7960 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x100>
    78d0:	21 e0       	ldi	r18, 0x01	; 1
    78d2:	2d 83       	std	Y+5, r18	; 0x05
    78d4:	0d c0       	rjmp	.+26     	; 0x78f0 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x90>
    78d6:	69 01       	movw	r12, r18
    78d8:	7a 01       	movw	r14, r20
    78da:	31 e0       	ldi	r19, 0x01	; 1
    78dc:	39 83       	std	Y+1, r19	; 0x01
    78de:	81 e0       	ldi	r24, 0x01	; 1
    78e0:	8d 83       	std	Y+5, r24	; 0x05
    78e2:	06 c0       	rjmp	.+12     	; 0x78f0 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x90>
    78e4:	1c 82       	std	Y+4, r1	; 0x04
    78e6:	19 82       	std	Y+1, r1	; 0x01
    78e8:	1d 82       	std	Y+5, r1	; 0x05
    78ea:	c1 2c       	mov	r12, r1
    78ec:	d1 2c       	mov	r13, r1
    78ee:	76 01       	movw	r14, r12
    78f0:	8d 80       	ldd	r8, Y+5	; 0x05
    78f2:	81 10       	cpse	r8, r1
    78f4:	28 c0       	rjmp	.+80     	; 0x7946 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0xe6>
    78f6:	9c 80       	ldd	r9, Y+4	; 0x04
    78f8:	a9 2d       	mov	r26, r9
    78fa:	b0 e0       	ldi	r27, 0x00	; 0
    78fc:	a3 01       	movw	r20, r6
    78fe:	92 01       	movw	r18, r4
    7900:	0e 94 a6 48 	call	0x914c	; 0x914c <__muluhisi3>
    7904:	00 e0       	ldi	r16, 0x00	; 0
    7906:	19 ee       	ldi	r17, 0xE9	; 233
    7908:	24 ea       	ldi	r18, 0xA4	; 164
    790a:	35 e3       	ldi	r19, 0x35	; 53
    790c:	48 01       	movw	r8, r16
    790e:	59 01       	movw	r10, r18
    7910:	86 1a       	sub	r8, r22
    7912:	97 0a       	sbc	r9, r23
    7914:	a8 0a       	sbc	r10, r24
    7916:	b9 0a       	sbc	r11, r25
    7918:	c5 01       	movw	r24, r10
    791a:	b4 01       	movw	r22, r8
    791c:	2c 81       	ldd	r18, Y+4	; 0x04
    791e:	2e 5f       	subi	r18, 0xFE	; 254
    7920:	2c 83       	std	Y+4, r18	; 0x04
    7922:	81 14       	cp	r8, r1
    7924:	36 e4       	ldi	r19, 0x46	; 70
    7926:	93 06       	cpc	r9, r19
    7928:	33 ec       	ldi	r19, 0xC3	; 195
    792a:	a3 06       	cpc	r10, r19
    792c:	33 e2       	ldi	r19, 0x23	; 35
    792e:	b3 06       	cpc	r11, r19
    7930:	78 f2       	brcs	.-98     	; 0x78d0 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x70>
    7932:	a3 01       	movw	r20, r6
    7934:	92 01       	movw	r18, r4
    7936:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    793a:	24 30       	cpi	r18, 0x04	; 4
    793c:	31 05       	cpc	r19, r1
    793e:	41 05       	cpc	r20, r1
    7940:	51 05       	cpc	r21, r1
    7942:	48 f6       	brcc	.-110    	; 0x78d6 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x76>
    7944:	d5 cf       	rjmp	.-86     	; 0x78f0 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x90>
    7946:	89 80       	ldd	r8, Y+1	; 0x01
    7948:	88 20       	and	r8, r8
    794a:	39 f0       	breq	.+14     	; 0x795a <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0xfa>
    794c:	a7 01       	movw	r20, r14
    794e:	96 01       	movw	r18, r12
    7950:	c3 01       	movw	r24, r6
    7952:	b2 01       	movw	r22, r4
    7954:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    7958:	03 c0       	rjmp	.+6      	; 0x7960 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x100>
    795a:	60 e0       	ldi	r22, 0x00	; 0
    795c:	70 e0       	ldi	r23, 0x00	; 0
    795e:	cb 01       	movw	r24, r22
    7960:	21 e0       	ldi	r18, 0x01	; 1
    7962:	34 e0       	ldi	r19, 0x04	; 4
    7964:	c3 16       	cp	r12, r19
    7966:	d1 04       	cpc	r13, r1
    7968:	e1 04       	cpc	r14, r1
    796a:	f1 04       	cpc	r15, r1
    796c:	09 f0       	breq	.+2      	; 0x7970 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x110>
    796e:	20 e0       	ldi	r18, 0x00	; 0
    7970:	f1 01       	movw	r30, r2
    7972:	20 83       	st	Z, r18
    7974:	cc 0c       	add	r12, r12
    7976:	dd 1c       	adc	r13, r13
    7978:	ee 1c       	adc	r14, r14
    797a:	ff 1c       	adc	r15, r15
    797c:	cc 0c       	add	r12, r12
    797e:	dd 1c       	adc	r13, r13
    7980:	ee 1c       	adc	r14, r14
    7982:	ff 1c       	adc	r15, r15
    7984:	cc 0c       	add	r12, r12
    7986:	dd 1c       	adc	r13, r13
    7988:	ee 1c       	adc	r14, r14
    798a:	ff 1c       	adc	r15, r15
    798c:	cc 0c       	add	r12, r12
    798e:	dd 1c       	adc	r13, r13
    7990:	ee 1c       	adc	r14, r14
    7992:	ff 1c       	adc	r15, r15
    7994:	cc 0c       	add	r12, r12
    7996:	dd 1c       	adc	r13, r13
    7998:	ee 1c       	adc	r14, r14
    799a:	ff 1c       	adc	r15, r15
    799c:	cc 0c       	add	r12, r12
    799e:	dd 1c       	adc	r13, r13
    79a0:	ee 1c       	adc	r14, r14
    79a2:	ff 1c       	adc	r15, r15
    79a4:	cc 0c       	add	r12, r12
    79a6:	dd 1c       	adc	r13, r13
    79a8:	ee 1c       	adc	r14, r14
    79aa:	ff 1c       	adc	r15, r15
    79ac:	f2 e0       	ldi	r31, 0x02	; 2
    79ae:	df 1a       	sub	r13, r31
    79b0:	e1 08       	sbc	r14, r1
    79b2:	f1 08       	sbc	r15, r1
    79b4:	ea 81       	ldd	r30, Y+2	; 0x02
    79b6:	fb 81       	ldd	r31, Y+3	; 0x03
    79b8:	c0 82       	st	Z, r12
    79ba:	d1 82       	std	Z+1, r13	; 0x01
    79bc:	e2 82       	std	Z+2, r14	; 0x02
    79be:	f3 82       	std	Z+3, r15	; 0x03
    79c0:	14 82       	std	Z+4, r1	; 0x04
    79c2:	15 82       	std	Z+5, r1	; 0x05
    79c4:	16 82       	std	Z+6, r1	; 0x06
    79c6:	17 82       	std	Z+7, r1	; 0x07
    79c8:	01 e0       	ldi	r16, 0x01	; 1
    79ca:	10 e0       	ldi	r17, 0x00	; 0
    79cc:	20 e0       	ldi	r18, 0x00	; 0
    79ce:	30 e0       	ldi	r19, 0x00	; 0
    79d0:	00 87       	std	Z+8, r16	; 0x08
    79d2:	11 87       	std	Z+9, r17	; 0x09
    79d4:	22 87       	std	Z+10, r18	; 0x0a
    79d6:	33 87       	std	Z+11, r19	; 0x0b
    79d8:	25 96       	adiw	r28, 0x05	; 5
    79da:	cd bf       	out	0x3d, r28	; 61
    79dc:	de bf       	out	0x3e, r29	; 62
    79de:	df 91       	pop	r29
    79e0:	cf 91       	pop	r28
    79e2:	1f 91       	pop	r17
    79e4:	0f 91       	pop	r16
    79e6:	ff 90       	pop	r15
    79e8:	ef 90       	pop	r14
    79ea:	df 90       	pop	r13
    79ec:	cf 90       	pop	r12
    79ee:	bf 90       	pop	r11
    79f0:	af 90       	pop	r10
    79f2:	9f 90       	pop	r9
    79f4:	8f 90       	pop	r8
    79f6:	7f 90       	pop	r7
    79f8:	6f 90       	pop	r6
    79fa:	5f 90       	pop	r5
    79fc:	4f 90       	pop	r4
    79fe:	3f 90       	pop	r3
    7a00:	2f 90       	pop	r2
    7a02:	08 95       	ret

00007a04 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_>:
    7a04:	2f 92       	push	r2
    7a06:	3f 92       	push	r3
    7a08:	4f 92       	push	r4
    7a0a:	5f 92       	push	r5
    7a0c:	6f 92       	push	r6
    7a0e:	7f 92       	push	r7
    7a10:	8f 92       	push	r8
    7a12:	9f 92       	push	r9
    7a14:	af 92       	push	r10
    7a16:	bf 92       	push	r11
    7a18:	cf 92       	push	r12
    7a1a:	df 92       	push	r13
    7a1c:	ef 92       	push	r14
    7a1e:	ff 92       	push	r15
    7a20:	0f 93       	push	r16
    7a22:	1f 93       	push	r17
    7a24:	cf 93       	push	r28
    7a26:	df 93       	push	r29
    7a28:	cd b7       	in	r28, 0x3d	; 61
    7a2a:	de b7       	in	r29, 0x3e	; 62
    7a2c:	62 97       	sbiw	r28, 0x12	; 18
    7a2e:	cd bf       	out	0x3d, r28	; 61
    7a30:	de bf       	out	0x3e, r29	; 62
    7a32:	4b 01       	movw	r8, r22
    7a34:	5c 01       	movw	r10, r24
    7a36:	1a 01       	movw	r2, r20
    7a38:	29 8b       	std	Y+17, r18	; 0x11
    7a3a:	3a 8b       	std	Y+18, r19	; 0x12
    7a3c:	60 91 2a 49 	lds	r22, 0x492A	; 0x80492a <_ZL8freqVCOB>
    7a40:	70 91 2b 49 	lds	r23, 0x492B	; 0x80492b <_ZL8freqVCOB+0x1>
    7a44:	80 91 2c 49 	lds	r24, 0x492C	; 0x80492c <_ZL8freqVCOB+0x2>
    7a48:	90 91 2d 49 	lds	r25, 0x492D	; 0x80492d <_ZL8freqVCOB+0x3>
    7a4c:	a5 01       	movw	r20, r10
    7a4e:	94 01       	movw	r18, r8
    7a50:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    7a54:	29 87       	std	Y+9, r18	; 0x09
    7a56:	3a 87       	std	Y+10, r19	; 0x0a
    7a58:	4b 87       	std	Y+11, r20	; 0x0b
    7a5a:	5c 87       	std	Y+12, r21	; 0x0c
    7a5c:	69 01       	movw	r12, r18
    7a5e:	7a 01       	movw	r14, r20
    7a60:	69 83       	std	Y+1, r22	; 0x01
    7a62:	7a 83       	std	Y+2, r23	; 0x02
    7a64:	8b 83       	std	Y+3, r24	; 0x03
    7a66:	9c 83       	std	Y+4, r25	; 0x04
    7a68:	8d 82       	std	Y+5, r8	; 0x05
    7a6a:	9e 82       	std	Y+6, r9	; 0x06
    7a6c:	af 82       	std	Y+7, r10	; 0x07
    7a6e:	b8 86       	std	Y+8, r11	; 0x08
    7a70:	be 01       	movw	r22, r28
    7a72:	6b 5f       	subi	r22, 0xFB	; 251
    7a74:	7f 4f       	sbci	r23, 0xFF	; 255
    7a76:	ce 01       	movw	r24, r28
    7a78:	01 96       	adiw	r24, 0x01	; 1
    7a7a:	0e 94 18 3b 	call	0x7630	; 0x7630 <_Z13reduce_by_gcdPmS_>
    7a7e:	80 91 2a 49 	lds	r24, 0x492A	; 0x80492a <_ZL8freqVCOB>
    7a82:	90 91 2b 49 	lds	r25, 0x492B	; 0x80492b <_ZL8freqVCOB+0x1>
    7a86:	a0 91 2c 49 	lds	r26, 0x492C	; 0x80492c <_ZL8freqVCOB+0x2>
    7a8a:	b0 91 2d 49 	lds	r27, 0x492D	; 0x80492d <_ZL8freqVCOB+0x3>
    7a8e:	8d 87       	std	Y+13, r24	; 0x0d
    7a90:	9e 87       	std	Y+14, r25	; 0x0e
    7a92:	af 87       	std	Y+15, r26	; 0x0f
    7a94:	b8 8b       	std	Y+16, r27	; 0x10
    7a96:	4d 80       	ldd	r4, Y+5	; 0x05
    7a98:	5e 80       	ldd	r5, Y+6	; 0x06
    7a9a:	6f 80       	ldd	r6, Y+7	; 0x07
    7a9c:	78 84       	ldd	r7, Y+8	; 0x08
    7a9e:	29 85       	ldd	r18, Y+9	; 0x09
    7aa0:	3a 85       	ldd	r19, Y+10	; 0x0a
    7aa2:	4b 85       	ldd	r20, Y+11	; 0x0b
    7aa4:	5c 85       	ldd	r21, Y+12	; 0x0c
    7aa6:	c3 01       	movw	r24, r6
    7aa8:	b2 01       	movw	r22, r4
    7aaa:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    7aae:	89 80       	ldd	r8, Y+1	; 0x01
    7ab0:	9a 80       	ldd	r9, Y+2	; 0x02
    7ab2:	ab 80       	ldd	r10, Y+3	; 0x03
    7ab4:	bc 80       	ldd	r11, Y+4	; 0x04
    7ab6:	9b 01       	movw	r18, r22
    7ab8:	ac 01       	movw	r20, r24
    7aba:	28 0d       	add	r18, r8
    7abc:	39 1d       	adc	r19, r9
    7abe:	4a 1d       	adc	r20, r10
    7ac0:	5b 1d       	adc	r21, r11
    7ac2:	6d 85       	ldd	r22, Y+13	; 0x0d
    7ac4:	7e 85       	ldd	r23, Y+14	; 0x0e
    7ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    7ac8:	98 89       	ldd	r25, Y+16	; 0x10
    7aca:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    7ace:	ca 01       	movw	r24, r20
    7ad0:	b9 01       	movw	r22, r18
    7ad2:	a3 01       	movw	r20, r6
    7ad4:	92 01       	movw	r18, r4
    7ad6:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    7ada:	6d 87       	std	Y+13, r22	; 0x0d
    7adc:	7e 87       	std	Y+14, r23	; 0x0e
    7ade:	8f 87       	std	Y+15, r24	; 0x0f
    7ae0:	98 8b       	std	Y+16, r25	; 0x10
    7ae2:	89 28       	or	r8, r9
    7ae4:	8a 28       	or	r8, r10
    7ae6:	8b 28       	or	r8, r11
    7ae8:	29 f4       	brne	.+10     	; 0x7af4 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf0>
    7aea:	99 85       	ldd	r25, Y+9	; 0x09
    7aec:	90 ff       	sbrs	r25, 0
    7aee:	04 c0       	rjmp	.+8      	; 0x7af8 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf4>
    7af0:	80 e0       	ldi	r24, 0x00	; 0
    7af2:	03 c0       	rjmp	.+6      	; 0x7afa <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf6>
    7af4:	80 e0       	ldi	r24, 0x00	; 0
    7af6:	01 c0       	rjmp	.+2      	; 0x7afa <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf6>
    7af8:	81 e0       	ldi	r24, 0x01	; 1
    7afa:	a9 89       	ldd	r26, Y+17	; 0x11
    7afc:	ba 89       	ldd	r27, Y+18	; 0x12
    7afe:	8c 93       	st	X, r24
    7b00:	b4 e0       	ldi	r27, 0x04	; 4
    7b02:	cb 16       	cp	r12, r27
    7b04:	d1 04       	cpc	r13, r1
    7b06:	e1 04       	cpc	r14, r1
    7b08:	f1 04       	cpc	r15, r1
    7b0a:	21 f4       	brne	.+8      	; 0x7b14 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x110>
    7b0c:	81 11       	cpse	r24, r1
    7b0e:	04 c0       	rjmp	.+8      	; 0x7b18 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x114>
    7b10:	80 e0       	ldi	r24, 0x00	; 0
    7b12:	03 c0       	rjmp	.+6      	; 0x7b1a <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x116>
    7b14:	80 e0       	ldi	r24, 0x00	; 0
    7b16:	01 c0       	rjmp	.+2      	; 0x7b1a <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x116>
    7b18:	81 e0       	ldi	r24, 0x01	; 1
    7b1a:	f8 01       	movw	r30, r16
    7b1c:	80 83       	st	Z, r24
    7b1e:	88 23       	and	r24, r24
    7b20:	a1 f0       	breq	.+40     	; 0x7b4a <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x146>
    7b22:	d1 01       	movw	r26, r2
    7b24:	1d 92       	st	X+, r1
    7b26:	1d 92       	st	X+, r1
    7b28:	1d 92       	st	X+, r1
    7b2a:	1c 92       	st	X, r1
    7b2c:	13 97       	sbiw	r26, 0x03	; 3
    7b2e:	f1 01       	movw	r30, r2
    7b30:	14 82       	std	Z+4, r1	; 0x04
    7b32:	15 82       	std	Z+5, r1	; 0x05
    7b34:	16 82       	std	Z+6, r1	; 0x06
    7b36:	17 82       	std	Z+7, r1	; 0x07
    7b38:	81 e0       	ldi	r24, 0x01	; 1
    7b3a:	90 e0       	ldi	r25, 0x00	; 0
    7b3c:	a0 e0       	ldi	r26, 0x00	; 0
    7b3e:	b0 e0       	ldi	r27, 0x00	; 0
    7b40:	80 87       	std	Z+8, r24	; 0x08
    7b42:	91 87       	std	Z+9, r25	; 0x09
    7b44:	a2 87       	std	Z+10, r26	; 0x0a
    7b46:	b3 87       	std	Z+11, r27	; 0x0b
    7b48:	69 c0       	rjmp	.+210    	; 0x7c1c <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x218>
    7b4a:	89 80       	ldd	r8, Y+1	; 0x01
    7b4c:	9a 80       	ldd	r9, Y+2	; 0x02
    7b4e:	ab 80       	ldd	r10, Y+3	; 0x03
    7b50:	bc 80       	ldd	r11, Y+4	; 0x04
    7b52:	88 0c       	add	r8, r8
    7b54:	99 1c       	adc	r9, r9
    7b56:	aa 1c       	adc	r10, r10
    7b58:	bb 1c       	adc	r11, r11
    7b5a:	88 0c       	add	r8, r8
    7b5c:	99 1c       	adc	r9, r9
    7b5e:	aa 1c       	adc	r10, r10
    7b60:	bb 1c       	adc	r11, r11
    7b62:	88 0c       	add	r8, r8
    7b64:	99 1c       	adc	r9, r9
    7b66:	aa 1c       	adc	r10, r10
    7b68:	bb 1c       	adc	r11, r11
    7b6a:	88 0c       	add	r8, r8
    7b6c:	99 1c       	adc	r9, r9
    7b6e:	aa 1c       	adc	r10, r10
    7b70:	bb 1c       	adc	r11, r11
    7b72:	88 0c       	add	r8, r8
    7b74:	99 1c       	adc	r9, r9
    7b76:	aa 1c       	adc	r10, r10
    7b78:	bb 1c       	adc	r11, r11
    7b7a:	88 0c       	add	r8, r8
    7b7c:	99 1c       	adc	r9, r9
    7b7e:	aa 1c       	adc	r10, r10
    7b80:	bb 1c       	adc	r11, r11
    7b82:	88 0c       	add	r8, r8
    7b84:	99 1c       	adc	r9, r9
    7b86:	aa 1c       	adc	r10, r10
    7b88:	bb 1c       	adc	r11, r11
    7b8a:	4d 80       	ldd	r4, Y+5	; 0x05
    7b8c:	5e 80       	ldd	r5, Y+6	; 0x06
    7b8e:	6f 80       	ldd	r6, Y+7	; 0x07
    7b90:	78 84       	ldd	r7, Y+8	; 0x08
    7b92:	c5 01       	movw	r24, r10
    7b94:	b4 01       	movw	r22, r8
    7b96:	a3 01       	movw	r20, r6
    7b98:	92 01       	movw	r18, r4
    7b9a:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    7b9e:	c9 84       	ldd	r12, Y+9	; 0x09
    7ba0:	da 84       	ldd	r13, Y+10	; 0x0a
    7ba2:	eb 84       	ldd	r14, Y+11	; 0x0b
    7ba4:	fc 84       	ldd	r15, Y+12	; 0x0c
    7ba6:	cc 0c       	add	r12, r12
    7ba8:	dd 1c       	adc	r13, r13
    7baa:	ee 1c       	adc	r14, r14
    7bac:	ff 1c       	adc	r15, r15
    7bae:	cc 0c       	add	r12, r12
    7bb0:	dd 1c       	adc	r13, r13
    7bb2:	ee 1c       	adc	r14, r14
    7bb4:	ff 1c       	adc	r15, r15
    7bb6:	cc 0c       	add	r12, r12
    7bb8:	dd 1c       	adc	r13, r13
    7bba:	ee 1c       	adc	r14, r14
    7bbc:	ff 1c       	adc	r15, r15
    7bbe:	cc 0c       	add	r12, r12
    7bc0:	dd 1c       	adc	r13, r13
    7bc2:	ee 1c       	adc	r14, r14
    7bc4:	ff 1c       	adc	r15, r15
    7bc6:	cc 0c       	add	r12, r12
    7bc8:	dd 1c       	adc	r13, r13
    7bca:	ee 1c       	adc	r14, r14
    7bcc:	ff 1c       	adc	r15, r15
    7bce:	cc 0c       	add	r12, r12
    7bd0:	dd 1c       	adc	r13, r13
    7bd2:	ee 1c       	adc	r14, r14
    7bd4:	ff 1c       	adc	r15, r15
    7bd6:	cc 0c       	add	r12, r12
    7bd8:	dd 1c       	adc	r13, r13
    7bda:	ee 1c       	adc	r14, r14
    7bdc:	ff 1c       	adc	r15, r15
    7bde:	c2 0e       	add	r12, r18
    7be0:	d3 1e       	adc	r13, r19
    7be2:	e4 1e       	adc	r14, r20
    7be4:	f5 1e       	adc	r15, r21
    7be6:	f2 e0       	ldi	r31, 0x02	; 2
    7be8:	df 1a       	sub	r13, r31
    7bea:	e1 08       	sbc	r14, r1
    7bec:	f1 08       	sbc	r15, r1
    7bee:	d1 01       	movw	r26, r2
    7bf0:	cd 92       	st	X+, r12
    7bf2:	dd 92       	st	X+, r13
    7bf4:	ed 92       	st	X+, r14
    7bf6:	fc 92       	st	X, r15
    7bf8:	13 97       	sbiw	r26, 0x03	; 3
    7bfa:	c3 01       	movw	r24, r6
    7bfc:	b2 01       	movw	r22, r4
    7bfe:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    7c02:	86 1a       	sub	r8, r22
    7c04:	97 0a       	sbc	r9, r23
    7c06:	a8 0a       	sbc	r10, r24
    7c08:	b9 0a       	sbc	r11, r25
    7c0a:	f1 01       	movw	r30, r2
    7c0c:	84 82       	std	Z+4, r8	; 0x04
    7c0e:	95 82       	std	Z+5, r9	; 0x05
    7c10:	a6 82       	std	Z+6, r10	; 0x06
    7c12:	b7 82       	std	Z+7, r11	; 0x07
    7c14:	40 86       	std	Z+8, r4	; 0x08
    7c16:	51 86       	std	Z+9, r5	; 0x09
    7c18:	62 86       	std	Z+10, r6	; 0x0a
    7c1a:	73 86       	std	Z+11, r7	; 0x0b
    7c1c:	6d 85       	ldd	r22, Y+13	; 0x0d
    7c1e:	7e 85       	ldd	r23, Y+14	; 0x0e
    7c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    7c22:	98 89       	ldd	r25, Y+16	; 0x10
    7c24:	62 96       	adiw	r28, 0x12	; 18
    7c26:	cd bf       	out	0x3d, r28	; 61
    7c28:	de bf       	out	0x3e, r29	; 62
    7c2a:	df 91       	pop	r29
    7c2c:	cf 91       	pop	r28
    7c2e:	1f 91       	pop	r17
    7c30:	0f 91       	pop	r16
    7c32:	ff 90       	pop	r15
    7c34:	ef 90       	pop	r14
    7c36:	df 90       	pop	r13
    7c38:	cf 90       	pop	r12
    7c3a:	bf 90       	pop	r11
    7c3c:	af 90       	pop	r10
    7c3e:	9f 90       	pop	r9
    7c40:	8f 90       	pop	r8
    7c42:	7f 90       	pop	r7
    7c44:	6f 90       	pop	r6
    7c46:	5f 90       	pop	r5
    7c48:	4f 90       	pop	r4
    7c4a:	3f 90       	pop	r3
    7c4c:	2f 90       	pop	r2
    7c4e:	08 95       	ret

00007c50 <_Z17si5351_write_bulkhPhh>:
    7c50:	cf 93       	push	r28
    7c52:	c4 2f       	mov	r28, r20
    7c54:	24 2f       	mov	r18, r20
    7c56:	ab 01       	movw	r20, r22
    7c58:	68 2f       	mov	r22, r24
    7c5a:	80 ec       	ldi	r24, 0xC0	; 192
    7c5c:	0e 94 34 34 	call	0x6868	; 0x6868 <I2C_1_SendData>
    7c60:	91 e0       	ldi	r25, 0x01	; 1
    7c62:	c8 13       	cpse	r28, r24
    7c64:	01 c0       	rjmp	.+2      	; 0x7c68 <_Z17si5351_write_bulkhPhh+0x18>
    7c66:	90 e0       	ldi	r25, 0x00	; 0
    7c68:	89 2f       	mov	r24, r25
    7c6a:	cf 91       	pop	r28
    7c6c:	08 95       	ret

00007c6e <_Z7set_pllm10si5351_pll>:
    7c6e:	1f 93       	push	r17
    7c70:	cf 93       	push	r28
    7c72:	df 93       	push	r29
    7c74:	cd b7       	in	r28, 0x3d	; 61
    7c76:	de b7       	in	r29, 0x3e	; 62
    7c78:	66 97       	sbiw	r28, 0x16	; 22
    7c7a:	cd bf       	out	0x3d, r28	; 61
    7c7c:	de bf       	out	0x3e, r29	; 62
    7c7e:	14 2f       	mov	r17, r20
    7c80:	ae 01       	movw	r20, r28
    7c82:	4f 5f       	subi	r20, 0xFF	; 255
    7c84:	5f 4f       	sbci	r21, 0xFF	; 255
    7c86:	0e 94 85 3b 	call	0x770a	; 0x770a <_Z8pll_calcmP13u_si5351_regs>
    7c8a:	81 11       	cpse	r24, r1
    7c8c:	2f c0       	rjmp	.+94     	; 0x7cec <_Z7set_pllm10si5351_pll+0x7e>
    7c8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7c90:	8d 87       	std	Y+13, r24	; 0x0d
    7c92:	89 85       	ldd	r24, Y+9	; 0x09
    7c94:	8e 87       	std	Y+14, r24	; 0x0e
    7c96:	8b 81       	ldd	r24, Y+3	; 0x03
    7c98:	83 70       	andi	r24, 0x03	; 3
    7c9a:	8f 87       	std	Y+15, r24	; 0x0f
    7c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    7c9e:	88 8b       	std	Y+16, r24	; 0x10
    7ca0:	89 81       	ldd	r24, Y+1	; 0x01
    7ca2:	89 8b       	std	Y+17, r24	; 0x11
    7ca4:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    7ca8:	8f 70       	andi	r24, 0x0F	; 15
    7caa:	20 e1       	ldi	r18, 0x10	; 16
    7cac:	92 9f       	mul	r25, r18
    7cae:	80 0d       	add	r24, r0
    7cb0:	11 24       	eor	r1, r1
    7cb2:	8a 8b       	std	Y+18, r24	; 0x12
    7cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    7cb6:	8b 8b       	std	Y+19, r24	; 0x13
    7cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    7cba:	8c 8b       	std	Y+20, r24	; 0x14
    7cbc:	11 30       	cpi	r17, 0x01	; 1
    7cbe:	59 f4       	brne	.+22     	; 0x7cd6 <_Z7set_pllm10si5351_pll+0x68>
    7cc0:	48 e0       	ldi	r20, 0x08	; 8
    7cc2:	be 01       	movw	r22, r28
    7cc4:	63 5f       	subi	r22, 0xF3	; 243
    7cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    7cc8:	8a e1       	ldi	r24, 0x1A	; 26
    7cca:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7cce:	88 23       	and	r24, r24
    7cd0:	79 f0       	breq	.+30     	; 0x7cf0 <_Z7set_pllm10si5351_pll+0x82>
    7cd2:	81 e0       	ldi	r24, 0x01	; 1
    7cd4:	10 c0       	rjmp	.+32     	; 0x7cf6 <_Z7set_pllm10si5351_pll+0x88>
    7cd6:	48 e0       	ldi	r20, 0x08	; 8
    7cd8:	be 01       	movw	r22, r28
    7cda:	63 5f       	subi	r22, 0xF3	; 243
    7cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    7cde:	82 e2       	ldi	r24, 0x22	; 34
    7ce0:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7ce4:	88 23       	and	r24, r24
    7ce6:	31 f0       	breq	.+12     	; 0x7cf4 <_Z7set_pllm10si5351_pll+0x86>
    7ce8:	81 e0       	ldi	r24, 0x01	; 1
    7cea:	05 c0       	rjmp	.+10     	; 0x7cf6 <_Z7set_pllm10si5351_pll+0x88>
    7cec:	81 e0       	ldi	r24, 0x01	; 1
    7cee:	03 c0       	rjmp	.+6      	; 0x7cf6 <_Z7set_pllm10si5351_pll+0x88>
    7cf0:	80 e0       	ldi	r24, 0x00	; 0
    7cf2:	01 c0       	rjmp	.+2      	; 0x7cf6 <_Z7set_pllm10si5351_pll+0x88>
    7cf4:	80 e0       	ldi	r24, 0x00	; 0
    7cf6:	66 96       	adiw	r28, 0x16	; 22
    7cf8:	cd bf       	out	0x3d, r28	; 61
    7cfa:	de bf       	out	0x3e, r29	; 62
    7cfc:	df 91       	pop	r29
    7cfe:	cf 91       	pop	r28
    7d00:	1f 91       	pop	r17
    7d02:	08 95       	ret

00007d04 <_Z16si5351_read_bulkhPhh>:
	{
		return( I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes);
	}

	BOOL si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    7d04:	cf 93       	push	r28
    7d06:	c4 2f       	mov	r28, r20
		return( I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes);
    7d08:	24 2f       	mov	r18, r20
    7d0a:	ab 01       	movw	r20, r22
    7d0c:	68 2f       	mov	r22, r24
    7d0e:	80 ec       	ldi	r24, 0xC0	; 192
    7d10:	0e 94 72 34 	call	0x68e4	; 0x68e4 <I2C_1_GetData>
    7d14:	91 e0       	ldi	r25, 0x01	; 1
    7d16:	c8 13       	cpse	r28, r24
    7d18:	01 c0       	rjmp	.+2      	; 0x7d1c <_Z16si5351_read_bulkhPhh+0x18>
    7d1a:	90 e0       	ldi	r25, 0x00	; 0
	}
    7d1c:	89 2f       	mov	r24, r25
    7d1e:	cf 91       	pop	r28
    7d20:	08 95       	ret

00007d22 <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	BOOL si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    7d22:	cf 92       	push	r12
    7d24:	df 92       	push	r13
    7d26:	ef 92       	push	r14
    7d28:	ff 92       	push	r15
    7d2a:	1f 93       	push	r17
    7d2c:	cf 93       	push	r28
    7d2e:	df 93       	push	r29
    7d30:	00 d0       	rcall	.+0      	; 0x7d32 <si5351_init+0x10>
    7d32:	cd b7       	in	r28, 0x3d	; 61
    7d34:	de b7       	in	r29, 0x3e	; 62
    7d36:	18 2f       	mov	r17, r24
    7d38:	6a 01       	movw	r12, r20
    7d3a:	7b 01       	movw	r14, r22
//		static BOOL err = FALSE;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    7d3c:	0e 94 18 34 	call	0x6830	; 0x6830 <I2C_1_Init>
			uint8_t result_val = 0x00;
			BOOL result = FALSE;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    7d40:	10 92 2a 49 	sts	0x492A, r1	; 0x80492a <_ZL8freqVCOB>
    7d44:	10 92 2b 49 	sts	0x492B, r1	; 0x80492b <_ZL8freqVCOB+0x1>
    7d48:	10 92 2c 49 	sts	0x492C, r1	; 0x80492c <_ZL8freqVCOB+0x2>
    7d4c:	10 92 2d 49 	sts	0x492D, r1	; 0x80492d <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    7d50:	80 e4       	ldi	r24, 0x40	; 64
    7d52:	98 e7       	ldi	r25, 0x78	; 120
    7d54:	ad e7       	ldi	r26, 0x7D	; 125
    7d56:	b1 e0       	ldi	r27, 0x01	; 1
    7d58:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    7d5c:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    7d60:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    7d64:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    7d68:	10 92 29 49 	sts	0x4929, r1	; 0x804929 <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    7d6c:	8f ef       	ldi	r24, 0xFF	; 255
    7d6e:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    7d70:	41 e0       	ldi	r20, 0x01	; 1
    7d72:	be 01       	movw	r22, r28
    7d74:	6f 5f       	subi	r22, 0xFF	; 255
    7d76:	7f 4f       	sbci	r23, 0xFF	; 255
    7d78:	83 e0       	ldi	r24, 0x03	; 3
    7d7a:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7d7e:	80 93 1b 49 	sts	0x491B, r24	; 0x80491b <err>
		
		if(err) return err;
    7d82:	81 11       	cpse	r24, r1
    7d84:	79 c0       	rjmp	.+242    	; 0x7e78 <si5351_init+0x156>
		/* Power down clocks */
		data[0] = 0xCC;
    7d86:	8c ec       	ldi	r24, 0xCC	; 204
    7d88:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    7d8a:	41 e0       	ldi	r20, 0x01	; 1
    7d8c:	be 01       	movw	r22, r28
    7d8e:	6f 5f       	subi	r22, 0xFF	; 255
    7d90:	7f 4f       	sbci	r23, 0xFF	; 255
    7d92:	80 e1       	ldi	r24, 0x10	; 16
    7d94:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7d98:	90 91 1b 49 	lds	r25, 0x491B	; 0x80491b <err>
    7d9c:	89 2b       	or	r24, r25
    7d9e:	80 93 1b 49 	sts	0x491B, r24	; 0x80491b <err>
		err |= si5351_write_bulk(0x11, data, 1);
    7da2:	41 e0       	ldi	r20, 0x01	; 1
    7da4:	be 01       	movw	r22, r28
    7da6:	6f 5f       	subi	r22, 0xFF	; 255
    7da8:	7f 4f       	sbci	r23, 0xFF	; 255
    7daa:	81 e1       	ldi	r24, 0x11	; 17
    7dac:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7db0:	90 91 1b 49 	lds	r25, 0x491B	; 0x80491b <err>
    7db4:	89 2b       	or	r24, r25
    7db6:	80 93 1b 49 	sts	0x491B, r24	; 0x80491b <err>
		err |= si5351_write_bulk(0x12, data, 1);
    7dba:	41 e0       	ldi	r20, 0x01	; 1
    7dbc:	be 01       	movw	r22, r28
    7dbe:	6f 5f       	subi	r22, 0xFF	; 255
    7dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    7dc2:	82 e1       	ldi	r24, 0x12	; 18
    7dc4:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7dc8:	90 91 1b 49 	lds	r25, 0x491B	; 0x80491b <err>
    7dcc:	89 2b       	or	r24, r25
    7dce:	80 93 1b 49 	sts	0x491B, r24	; 0x80491b <err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    7dd2:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    7dd4:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    7dd6:	41 e0       	ldi	r20, 0x01	; 1
    7dd8:	be 01       	movw	r22, r28
    7dda:	6f 5f       	subi	r22, 0xFF	; 255
    7ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    7dde:	87 eb       	ldi	r24, 0xB7	; 183
    7de0:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7de4:	90 91 1b 49 	lds	r25, 0x491B	; 0x80491b <err>
    7de8:	89 2b       	or	r24, r25
    7dea:	80 93 1b 49 	sts	0x491B, r24	; 0x80491b <err>

		if(!ref_osc_freq)
    7dee:	c1 14       	cp	r12, r1
    7df0:	d1 04       	cpc	r13, r1
    7df2:	e1 04       	cpc	r14, r1
    7df4:	f1 04       	cpc	r15, r1
    7df6:	51 f4       	brne	.+20     	; 0x7e0c <si5351_init+0xea>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    7df8:	0f 2e       	mov	r0, r31
    7dfa:	f0 e4       	ldi	r31, 0x40	; 64
    7dfc:	cf 2e       	mov	r12, r31
    7dfe:	f8 e7       	ldi	r31, 0x78	; 120
    7e00:	df 2e       	mov	r13, r31
    7e02:	fd e7       	ldi	r31, 0x7D	; 125
    7e04:	ef 2e       	mov	r14, r31
    7e06:	ff 24       	eor	r15, r15
    7e08:	f3 94       	inc	r15
    7e0a:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    7e0c:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    7e10:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    7e14:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    7e18:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    7e1c:	c8 16       	cp	r12, r24
    7e1e:	d9 06       	cpc	r13, r25
    7e20:	ea 06       	cpc	r14, r26
    7e22:	fb 06       	cpc	r15, r27
    7e24:	01 f1       	breq	.+64     	; 0x7e66 <si5351_init+0x144>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    7e26:	41 e0       	ldi	r20, 0x01	; 1
    7e28:	be 01       	movw	r22, r28
    7e2a:	6f 5f       	subi	r22, 0xFF	; 255
    7e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e2e:	8f e0       	ldi	r24, 0x0F	; 15
    7e30:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <_Z16si5351_read_bulkhPhh>
    7e34:	81 11       	cpse	r24, r1
    7e36:	1f c0       	rjmp	.+62     	; 0x7e76 <si5351_init+0x154>
			{
				return TRUE;
			}
			
			reg_val = data[0];
    7e38:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    7e3a:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    7e3c:	c0 92 28 40 	sts	0x4028, r12	; 0x804028 <_ZL9xtal_freq>
    7e40:	d0 92 29 40 	sts	0x4029, r13	; 0x804029 <_ZL9xtal_freq+0x1>
    7e44:	e0 92 2a 40 	sts	0x402A, r14	; 0x80402a <_ZL9xtal_freq+0x2>
    7e48:	f0 92 2b 40 	sts	0x402B, r15	; 0x80402b <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    7e4c:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    7e4e:	41 e0       	ldi	r20, 0x01	; 1
    7e50:	be 01       	movw	r22, r28
    7e52:	6f 5f       	subi	r22, 0xFF	; 255
    7e54:	7f 4f       	sbci	r23, 0xFF	; 255
    7e56:	8f e0       	ldi	r24, 0x0F	; 15
    7e58:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7e5c:	90 91 1b 49 	lds	r25, 0x491B	; 0x80491b <err>
    7e60:	89 2b       	or	r24, r25
    7e62:	80 93 1b 49 	sts	0x491B, r24	; 0x80491b <err>
		}
		
		g_si5351_initialized = !err;
    7e66:	80 91 1b 49 	lds	r24, 0x491B	; 0x80491b <err>
    7e6a:	91 e0       	ldi	r25, 0x01	; 1
    7e6c:	81 11       	cpse	r24, r1
    7e6e:	90 e0       	ldi	r25, 0x00	; 0
    7e70:	90 93 1c 49 	sts	0x491C, r25	; 0x80491c <g_si5351_initialized>

		return err;
    7e74:	01 c0       	rjmp	.+2      	; 0x7e78 <si5351_init+0x156>
		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
			{
				return TRUE;
    7e76:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		g_si5351_initialized = !err;

		return err;
	}
    7e78:	0f 90       	pop	r0
    7e7a:	0f 90       	pop	r0
    7e7c:	df 91       	pop	r29
    7e7e:	cf 91       	pop	r28
    7e80:	1f 91       	pop	r17
    7e82:	ff 90       	pop	r15
    7e84:	ef 90       	pop	r14
    7e86:	df 90       	pop	r13
    7e88:	cf 90       	pop	r12
    7e8a:	08 95       	ret

00007e8c <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    7e8c:	0f 93       	push	r16
    7e8e:	1f 93       	push	r17
    7e90:	cf 93       	push	r28
    7e92:	df 93       	push	r29
    7e94:	00 d0       	rcall	.+0      	; 0x7e96 <si5351_clock_enable+0xa>
    7e96:	cd b7       	in	r28, 0x3d	; 61
    7e98:	de b7       	in	r29, 0x3e	; 62
    7e9a:	18 2f       	mov	r17, r24
    7e9c:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    7e9e:	41 e0       	ldi	r20, 0x01	; 1
    7ea0:	be 01       	movw	r22, r28
    7ea2:	6f 5f       	subi	r22, 0xFF	; 255
    7ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ea6:	83 e0       	ldi	r24, 0x03	; 3
    7ea8:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <_Z16si5351_read_bulkhPhh>
    7eac:	81 11       	cpse	r24, r1
    7eae:	23 c0       	rjmp	.+70     	; 0x7ef6 <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    7eb0:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    7eb2:	00 23       	and	r16, r16
    7eb4:	59 f0       	breq	.+22     	; 0x7ecc <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    7eb6:	21 e0       	ldi	r18, 0x01	; 1
    7eb8:	30 e0       	ldi	r19, 0x00	; 0
    7eba:	02 c0       	rjmp	.+4      	; 0x7ec0 <si5351_clock_enable+0x34>
    7ebc:	22 0f       	add	r18, r18
    7ebe:	33 1f       	adc	r19, r19
    7ec0:	1a 95       	dec	r17
    7ec2:	e2 f7       	brpl	.-8      	; 0x7ebc <si5351_clock_enable+0x30>
    7ec4:	82 2f       	mov	r24, r18
    7ec6:	80 95       	com	r24
    7ec8:	89 23       	and	r24, r25
    7eca:	09 c0       	rjmp	.+18     	; 0x7ede <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    7ecc:	21 e0       	ldi	r18, 0x01	; 1
    7ece:	30 e0       	ldi	r19, 0x00	; 0
    7ed0:	02 c0       	rjmp	.+4      	; 0x7ed6 <si5351_clock_enable+0x4a>
    7ed2:	22 0f       	add	r18, r18
    7ed4:	33 1f       	adc	r19, r19
    7ed6:	1a 95       	dec	r17
    7ed8:	e2 f7       	brpl	.-8      	; 0x7ed2 <si5351_clock_enable+0x46>
    7eda:	89 2f       	mov	r24, r25
    7edc:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    7ede:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    7ee0:	41 e0       	ldi	r20, 0x01	; 1
    7ee2:	be 01       	movw	r22, r28
    7ee4:	6f 5f       	subi	r22, 0xFF	; 255
    7ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    7ee8:	83 e0       	ldi	r24, 0x03	; 3
    7eea:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7eee:	88 23       	and	r24, r24
    7ef0:	21 f0       	breq	.+8      	; 0x7efa <si5351_clock_enable+0x6e>
    7ef2:	8c ef       	ldi	r24, 0xFC	; 252
    7ef4:	03 c0       	rjmp	.+6      	; 0x7efc <si5351_clock_enable+0x70>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    7ef6:	8c ef       	ldi	r24, 0xFC	; 252
    7ef8:	01 c0       	rjmp	.+2      	; 0x7efc <si5351_clock_enable+0x70>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    7efa:	80 e0       	ldi	r24, 0x00	; 0
	}
    7efc:	0f 90       	pop	r0
    7efe:	0f 90       	pop	r0
    7f00:	df 91       	pop	r29
    7f02:	cf 91       	pop	r28
    7f04:	1f 91       	pop	r17
    7f06:	0f 91       	pop	r16
    7f08:	08 95       	ret

00007f0a <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    7f0a:	0f 93       	push	r16
    7f0c:	1f 93       	push	r17
    7f0e:	cf 93       	push	r28
    7f10:	df 93       	push	r29
    7f12:	00 d0       	rcall	.+0      	; 0x7f14 <si5351_drive_strength+0xa>
    7f14:	cd b7       	in	r28, 0x3d	; 61
    7f16:	de b7       	in	r29, 0x3e	; 62
    7f18:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    7f1a:	10 e1       	ldi	r17, 0x10	; 16
    7f1c:	18 0f       	add	r17, r24
    7f1e:	41 e0       	ldi	r20, 0x01	; 1
    7f20:	be 01       	movw	r22, r28
    7f22:	6f 5f       	subi	r22, 0xFF	; 255
    7f24:	7f 4f       	sbci	r23, 0xFF	; 255
    7f26:	81 2f       	mov	r24, r17
    7f28:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <_Z16si5351_read_bulkhPhh>
    7f2c:	81 11       	cpse	r24, r1
    7f2e:	1e c0       	rjmp	.+60     	; 0x7f6c <si5351_drive_strength+0x62>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    7f30:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    7f32:	01 30       	cpi	r16, 0x01	; 1
    7f34:	41 f0       	breq	.+16     	; 0x7f46 <si5351_drive_strength+0x3c>
    7f36:	28 f0       	brcs	.+10     	; 0x7f42 <si5351_drive_strength+0x38>
    7f38:	02 30       	cpi	r16, 0x02	; 2
    7f3a:	41 f0       	breq	.+16     	; 0x7f4c <si5351_drive_strength+0x42>
    7f3c:	03 30       	cpi	r16, 0x03	; 3
    7f3e:	49 f0       	breq	.+18     	; 0x7f52 <si5351_drive_strength+0x48>
    7f40:	09 c0       	rjmp	.+18     	; 0x7f54 <si5351_drive_strength+0x4a>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    7f42:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    7f44:	07 c0       	rjmp	.+14     	; 0x7f54 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    7f46:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    7f48:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    7f4a:	04 c0       	rjmp	.+8      	; 0x7f54 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    7f4c:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    7f4e:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    7f50:	01 c0       	rjmp	.+2      	; 0x7f54 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    7f52:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    7f54:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    7f56:	41 e0       	ldi	r20, 0x01	; 1
    7f58:	be 01       	movw	r22, r28
    7f5a:	6f 5f       	subi	r22, 0xFF	; 255
    7f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    7f5e:	81 2f       	mov	r24, r17
    7f60:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7f64:	88 23       	and	r24, r24
    7f66:	21 f0       	breq	.+8      	; 0x7f70 <si5351_drive_strength+0x66>
    7f68:	8b ef       	ldi	r24, 0xFB	; 251
    7f6a:	03 c0       	rjmp	.+6      	; 0x7f72 <si5351_drive_strength+0x68>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    7f6c:	8b ef       	ldi	r24, 0xFB	; 251
    7f6e:	01 c0       	rjmp	.+2      	; 0x7f72 <si5351_drive_strength+0x68>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    7f70:	80 e0       	ldi	r24, 0x00	; 0
	}
    7f72:	0f 90       	pop	r0
    7f74:	0f 90       	pop	r0
    7f76:	df 91       	pop	r29
    7f78:	cf 91       	pop	r28
    7f7a:	1f 91       	pop	r17
    7f7c:	0f 91       	pop	r16
    7f7e:	08 95       	ret

00007f80 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    7f80:	0f 93       	push	r16
    7f82:	1f 93       	push	r17
    7f84:	cf 93       	push	r28
    7f86:	df 93       	push	r29
    7f88:	00 d0       	rcall	.+0      	; 0x7f8a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    7f8a:	cd b7       	in	r28, 0x3d	; 61
    7f8c:	de b7       	in	r29, 0x3e	; 62
    7f8e:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    7f90:	10 e1       	ldi	r17, 0x10	; 16
    7f92:	18 0f       	add	r17, r24
    7f94:	41 e0       	ldi	r20, 0x01	; 1
    7f96:	be 01       	movw	r22, r28
    7f98:	6f 5f       	subi	r22, 0xFF	; 255
    7f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    7f9c:	81 2f       	mov	r24, r17
    7f9e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <_Z16si5351_read_bulkhPhh>
    7fa2:	81 11       	cpse	r24, r1
    7fa4:	14 c0       	rjmp	.+40     	; 0x7fce <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x4e>
		{
			return(true);
		}
		
		reg_val = data[0];
    7fa6:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    7fa8:	01 30       	cpi	r16, 0x01	; 1
    7faa:	11 f4       	brne	.+4      	; 0x7fb0 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    7fac:	8f 7d       	andi	r24, 0xDF	; 223
    7fae:	03 c0       	rjmp	.+6      	; 0x7fb6 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    7fb0:	02 30       	cpi	r16, 0x02	; 2
    7fb2:	09 f4       	brne	.+2      	; 0x7fb6 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    7fb4:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    7fb6:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    7fb8:	41 e0       	ldi	r20, 0x01	; 1
    7fba:	be 01       	movw	r22, r28
    7fbc:	6f 5f       	subi	r22, 0xFF	; 255
    7fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    7fc0:	81 2f       	mov	r24, r17
    7fc2:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    7fc6:	88 23       	and	r24, r24
    7fc8:	21 f0       	breq	.+8      	; 0x7fd2 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x52>
		{
			return(true);
    7fca:	81 e0       	ldi	r24, 0x01	; 1
    7fcc:	03 c0       	rjmp	.+6      	; 0x7fd4 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x54>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return(true);
    7fce:	81 e0       	ldi	r24, 0x01	; 1
    7fd0:	01 c0       	rjmp	.+2      	; 0x7fd4 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x54>
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return(true);
		}
		
		return(false);
    7fd2:	80 e0       	ldi	r24, 0x00	; 0
	}
    7fd4:	0f 90       	pop	r0
    7fd6:	0f 90       	pop	r0
    7fd8:	df 91       	pop	r29
    7fda:	cf 91       	pop	r28
    7fdc:	1f 91       	pop	r17
    7fde:	0f 91       	pop	r16
    7fe0:	08 95       	ret

00007fe2 <_Z16set_integer_mode12si5351_clockh>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, BOOL enable)
	{
    7fe2:	0f 93       	push	r16
    7fe4:	1f 93       	push	r17
    7fe6:	cf 93       	push	r28
    7fe8:	df 93       	push	r29
    7fea:	00 d0       	rcall	.+0      	; 0x7fec <_Z16set_integer_mode12si5351_clockh+0xa>
    7fec:	cd b7       	in	r28, 0x3d	; 61
    7fee:	de b7       	in	r29, 0x3e	; 62
    7ff0:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    7ff2:	10 e1       	ldi	r17, 0x10	; 16
    7ff4:	18 0f       	add	r17, r24
    7ff6:	41 e0       	ldi	r20, 0x01	; 1
    7ff8:	be 01       	movw	r22, r28
    7ffa:	6f 5f       	subi	r22, 0xFF	; 255
    7ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    7ffe:	81 2f       	mov	r24, r17
    8000:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <_Z16si5351_read_bulkhPhh>
    8004:	81 11       	cpse	r24, r1
    8006:	13 c0       	rjmp	.+38     	; 0x802e <__RODATA_PM_OFFSET__+0x2e>
		{
			return(true);
		}
		
		reg_val = data[0];
    8008:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    800a:	00 23       	and	r16, r16
    800c:	11 f0       	breq	.+4      	; 0x8012 <__RODATA_PM_OFFSET__+0x12>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    800e:	80 64       	ori	r24, 0x40	; 64
    8010:	01 c0       	rjmp	.+2      	; 0x8014 <__RODATA_PM_OFFSET__+0x14>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    8012:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    8014:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    8016:	41 e0       	ldi	r20, 0x01	; 1
    8018:	be 01       	movw	r22, r28
    801a:	6f 5f       	subi	r22, 0xFF	; 255
    801c:	7f 4f       	sbci	r23, 0xFF	; 255
    801e:	81 2f       	mov	r24, r17
    8020:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    8024:	91 e0       	ldi	r25, 0x01	; 1
    8026:	81 11       	cpse	r24, r1
    8028:	03 c0       	rjmp	.+6      	; 0x8030 <__RODATA_PM_OFFSET__+0x30>
    802a:	90 e0       	ldi	r25, 0x00	; 0
    802c:	01 c0       	rjmp	.+2      	; 0x8030 <__RODATA_PM_OFFSET__+0x30>
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return(true);
    802e:	91 e0       	ldi	r25, 0x01	; 1
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
		}

		data[0] = reg_val;
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
	}
    8030:	89 2f       	mov	r24, r25
    8032:	0f 90       	pop	r0
    8034:	0f 90       	pop	r0
    8036:	df 91       	pop	r29
    8038:	cf 91       	pop	r28
    803a:	1f 91       	pop	r17
    803c:	0f 91       	pop	r16
    803e:	08 95       	ret

00008040 <_Z6ms_div12si5351_clockhh>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, BOOL div_by_4)
	{
    8040:	ff 92       	push	r15
    8042:	0f 93       	push	r16
    8044:	1f 93       	push	r17
    8046:	cf 93       	push	r28
    8048:	df 93       	push	r29
    804a:	00 d0       	rcall	.+0      	; 0x804c <_Z6ms_div12si5351_clockhh+0xc>
    804c:	cd b7       	in	r28, 0x3d	; 61
    804e:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    8050:	81 30       	cpi	r24, 0x01	; 1
    8052:	71 f0       	breq	.+28     	; 0x8070 <_Z6ms_div12si5351_clockhh+0x30>
    8054:	18 f0       	brcs	.+6      	; 0x805c <_Z6ms_div12si5351_clockhh+0x1c>
    8056:	82 30       	cpi	r24, 0x02	; 2
    8058:	31 f0       	breq	.+12     	; 0x8066 <_Z6ms_div12si5351_clockhh+0x26>
    805a:	30 c0       	rjmp	.+96     	; 0x80bc <_Z6ms_div12si5351_clockhh+0x7c>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    805c:	0f 2e       	mov	r0, r31
    805e:	fc e2       	ldi	r31, 0x2C	; 44
    8060:	ff 2e       	mov	r15, r31
    8062:	f0 2d       	mov	r31, r0
    8064:	09 c0       	rjmp	.+18     	; 0x8078 <_Z6ms_div12si5351_clockhh+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    8066:	0f 2e       	mov	r0, r31
    8068:	fc e3       	ldi	r31, 0x3C	; 60
    806a:	ff 2e       	mov	r15, r31
    806c:	f0 2d       	mov	r31, r0
			}
			break;
    806e:	04 c0       	rjmp	.+8      	; 0x8078 <_Z6ms_div12si5351_clockhh+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    8070:	0f 2e       	mov	r0, r31
    8072:	f4 e3       	ldi	r31, 0x34	; 52
    8074:	ff 2e       	mov	r15, r31
    8076:	f0 2d       	mov	r31, r0
    8078:	04 2f       	mov	r16, r20
    807a:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    807c:	41 e0       	ldi	r20, 0x01	; 1
    807e:	be 01       	movw	r22, r28
    8080:	6f 5f       	subi	r22, 0xFF	; 255
    8082:	7f 4f       	sbci	r23, 0xFF	; 255
    8084:	8f 2d       	mov	r24, r15
    8086:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <_Z16si5351_read_bulkhPhh>
    808a:	81 11       	cpse	r24, r1
    808c:	19 c0       	rjmp	.+50     	; 0x80c0 <_Z6ms_div12si5351_clockhh+0x80>
		{
			return(true);
		}
		
		reg_val = data[0];
    808e:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    8090:	86 2f       	mov	r24, r22
    8092:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    8094:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    8096:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    8098:	90 e1       	ldi	r25, 0x10	; 16
    809a:	19 9f       	mul	r17, r25
    809c:	b0 01       	movw	r22, r0
    809e:	11 24       	eor	r1, r1
    80a0:	68 2b       	or	r22, r24

		data[0] = reg_val;
    80a2:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    80a4:	41 e0       	ldi	r20, 0x01	; 1
    80a6:	be 01       	movw	r22, r28
    80a8:	6f 5f       	subi	r22, 0xFF	; 255
    80aa:	7f 4f       	sbci	r23, 0xFF	; 255
    80ac:	8f 2d       	mov	r24, r15
    80ae:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    80b2:	91 e0       	ldi	r25, 0x01	; 1
    80b4:	81 11       	cpse	r24, r1
    80b6:	05 c0       	rjmp	.+10     	; 0x80c2 <_Z6ms_div12si5351_clockhh+0x82>
    80b8:	90 e0       	ldi	r25, 0x00	; 0
    80ba:	03 c0       	rjmp	.+6      	; 0x80c2 <_Z6ms_div12si5351_clockhh+0x82>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    80bc:	91 e0       	ldi	r25, 0x01	; 1
    80be:	01 c0       	rjmp	.+2      	; 0x80c2 <_Z6ms_div12si5351_clockhh+0x82>
		}

		if(si5351_read_bulk(reg_addr, data, 1))
		{
			return(true);
    80c0:	91 e0       	ldi	r25, 0x01	; 1

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		data[0] = reg_val;
		return(si5351_write_bulk(reg_addr, data, 1));
	}
    80c2:	89 2f       	mov	r24, r25
    80c4:	0f 90       	pop	r0
    80c6:	0f 90       	pop	r0
    80c8:	df 91       	pop	r29
    80ca:	cf 91       	pop	r28
    80cc:	1f 91       	pop	r17
    80ce:	0f 91       	pop	r16
    80d0:	ff 90       	pop	r15
    80d2:	08 95       	ret

000080d4 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, BOOL int_mode, uint8_t r_div, BOOL div_by_4)
	{
    80d4:	8f 92       	push	r8
    80d6:	af 92       	push	r10
    80d8:	cf 92       	push	r12
    80da:	df 92       	push	r13
    80dc:	ef 92       	push	r14
    80de:	ff 92       	push	r15
    80e0:	0f 93       	push	r16
    80e2:	1f 93       	push	r17
    80e4:	cf 93       	push	r28
    80e6:	df 93       	push	r29
    80e8:	cd b7       	in	r28, 0x3d	; 61
    80ea:	de b7       	in	r29, 0x3e	; 62
    80ec:	69 97       	sbiw	r28, 0x19	; 25
    80ee:	cd bf       	out	0x3d, r28	; 61
    80f0:	de bf       	out	0x3e, r29	; 62
    80f2:	f8 2e       	mov	r15, r24
    80f4:	ce 86       	std	Y+14, r12	; 0x0e
    80f6:	df 86       	std	Y+15, r13	; 0x0f
    80f8:	e8 8a       	std	Y+16, r14	; 0x10
    80fa:	0a 8b       	std	Y+18, r16	; 0x12
    80fc:	1b 8b       	std	Y+19, r17	; 0x13
    80fe:	2c 8b       	std	Y+20, r18	; 0x14
    8100:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    8102:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    8104:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    8106:	88 0f       	add	r24, r24
    8108:	88 0f       	add	r24, r24
    810a:	88 0f       	add	r24, r24
    810c:	41 e0       	ldi	r20, 0x01	; 1
    810e:	be 01       	movw	r22, r28
    8110:	64 5f       	subi	r22, 0xF4	; 244
    8112:	7f 4f       	sbci	r23, 0xFF	; 255
    8114:	84 5d       	subi	r24, 0xD4	; 212
    8116:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <_Z16si5351_read_bulkhPhh>
    811a:	81 11       	cpse	r24, r1
    811c:	49 c0       	rjmp	.+146    	; 0x81b0 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xdc>
		{
			return(true);
		}
		
		reg_val = data[0];
    811e:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    8120:	98 2f       	mov	r25, r24
    8122:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    8124:	88 89       	ldd	r24, Y+16	; 0x10
    8126:	83 70       	andi	r24, 0x03	; 3
    8128:	89 2b       	or	r24, r25
    812a:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    812c:	8f 85       	ldd	r24, Y+15	; 0x0f
    812e:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    8130:	8e 85       	ldd	r24, Y+14	; 0x0e
    8132:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    8134:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    8136:	8c 89       	ldd	r24, Y+20	; 0x14
    8138:	8f 70       	andi	r24, 0x0F	; 15
    813a:	20 e1       	ldi	r18, 0x10	; 16
    813c:	92 9f       	mul	r25, r18
    813e:	80 0d       	add	r24, r0
    8140:	11 24       	eor	r1, r1
    8142:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    8144:	8b 89       	ldd	r24, Y+19	; 0x13
    8146:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    8148:	8a 89       	ldd	r24, Y+18	; 0x12
    814a:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    814c:	81 e0       	ldi	r24, 0x01	; 1
    814e:	f8 16       	cp	r15, r24
    8150:	81 f0       	breq	.+32     	; 0x8172 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0x9e>
    8152:	f8 16       	cp	r15, r24
    8154:	20 f0       	brcs	.+8      	; 0x815e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0x8a>
    8156:	22 e0       	ldi	r18, 0x02	; 2
    8158:	f2 16       	cp	r15, r18
    815a:	a9 f0       	breq	.+42     	; 0x8186 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xb2>
    815c:	1d c0       	rjmp	.+58     	; 0x8198 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xc4>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    815e:	48 e0       	ldi	r20, 0x08	; 8
    8160:	be 01       	movw	r22, r28
    8162:	6f 5f       	subi	r22, 0xFF	; 255
    8164:	7f 4f       	sbci	r23, 0xFF	; 255
    8166:	8a e2       	ldi	r24, 0x2A	; 42
    8168:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    816c:	88 23       	and	r24, r24
    816e:	a1 f0       	breq	.+40     	; 0x8198 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xc4>
    8170:	21 c0       	rjmp	.+66     	; 0x81b4 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xe0>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    8172:	48 e0       	ldi	r20, 0x08	; 8
    8174:	be 01       	movw	r22, r28
    8176:	6f 5f       	subi	r22, 0xFF	; 255
    8178:	7f 4f       	sbci	r23, 0xFF	; 255
    817a:	82 e3       	ldi	r24, 0x32	; 50
    817c:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    8180:	88 23       	and	r24, r24
    8182:	51 f0       	breq	.+20     	; 0x8198 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xc4>
    8184:	19 c0       	rjmp	.+50     	; 0x81b8 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xe4>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    8186:	48 e0       	ldi	r20, 0x08	; 8
    8188:	be 01       	movw	r22, r28
    818a:	6f 5f       	subi	r22, 0xFF	; 255
    818c:	7f 4f       	sbci	r23, 0xFF	; 255
    818e:	8a e3       	ldi	r24, 0x3A	; 58
    8190:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    8194:	81 11       	cpse	r24, r1
    8196:	12 c0       	rjmp	.+36     	; 0x81bc <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xe8>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    8198:	6a 2d       	mov	r22, r10
    819a:	8f 2d       	mov	r24, r15
    819c:	0e 94 f1 3f 	call	0x7fe2	; 0x7fe2 <_Z16set_integer_mode12si5351_clockh>
    81a0:	81 11       	cpse	r24, r1
    81a2:	0d c0       	rjmp	.+26     	; 0x81be <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    81a4:	4e a1       	ldd	r20, Y+38	; 0x26
    81a6:	68 2d       	mov	r22, r8
    81a8:	8f 2d       	mov	r24, r15
    81aa:	0e 94 20 40 	call	0x8040	; 0x8040 <_Z6ms_div12si5351_clockhh>
    81ae:	07 c0       	rjmp	.+14     	; 0x81be <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>
		params[i++] = ms_reg.reg.p3_0;

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
		{
			return(true);
    81b0:	81 e0       	ldi	r24, 0x01	; 1
    81b2:	05 c0       	rjmp	.+10     	; 0x81be <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
				{
					return(true);
    81b4:	81 e0       	ldi	r24, 0x01	; 1
    81b6:	03 c0       	rjmp	.+6      	; 0x81be <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
				{
					return(true);
    81b8:	81 e0       	ldi	r24, 0x01	; 1
    81ba:	01 c0       	rjmp	.+2      	; 0x81be <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
				{
					return(true);
    81bc:	81 e0       	ldi	r24, 0x01	; 1
		{
			return(true);
		}
		
		return(false);
	}
    81be:	69 96       	adiw	r28, 0x19	; 25
    81c0:	cd bf       	out	0x3d, r28	; 61
    81c2:	de bf       	out	0x3e, r29	; 62
    81c4:	df 91       	pop	r29
    81c6:	cf 91       	pop	r28
    81c8:	1f 91       	pop	r17
    81ca:	0f 91       	pop	r16
    81cc:	ff 90       	pop	r15
    81ce:	ef 90       	pop	r14
    81d0:	df 90       	pop	r13
    81d2:	cf 90       	pop	r12
    81d4:	af 90       	pop	r10
    81d6:	8f 90       	pop	r8
    81d8:	08 95       	ret

000081da <si5351_set_freq>:
 *
 * Returns TRUE on failure
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, BOOL clocksOff)
	{
    81da:	2f 92       	push	r2
    81dc:	3f 92       	push	r3
    81de:	4f 92       	push	r4
    81e0:	5f 92       	push	r5
    81e2:	6f 92       	push	r6
    81e4:	7f 92       	push	r7
    81e6:	8f 92       	push	r8
    81e8:	9f 92       	push	r9
    81ea:	af 92       	push	r10
    81ec:	bf 92       	push	r11
    81ee:	cf 92       	push	r12
    81f0:	df 92       	push	r13
    81f2:	ef 92       	push	r14
    81f4:	ff 92       	push	r15
    81f6:	0f 93       	push	r16
    81f8:	1f 93       	push	r17
    81fa:	cf 93       	push	r28
    81fc:	df 93       	push	r29
    81fe:	cd b7       	in	r28, 0x3d	; 61
    8200:	de b7       	in	r29, 0x3e	; 62
    8202:	60 97       	sbiw	r28, 0x10	; 16
    8204:	cd bf       	out	0x3d, r28	; 61
    8206:	de bf       	out	0x3e, r29	; 62
    8208:	6b 01       	movw	r12, r22
    820a:	7c 01       	movw	r14, r24
    820c:	b4 2e       	mov	r11, r20
    820e:	92 2e       	mov	r9, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		BOOL int_mode = FALSE;
    8210:	1d 86       	std	Y+13, r1	; 0x0d
		BOOL div_by_4 = FALSE;
    8212:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    8214:	80 91 1c 49 	lds	r24, 0x491C	; 0x80491c <g_si5351_initialized>
    8218:	88 23       	and	r24, r24
    821a:	09 f4       	brne	.+2      	; 0x821e <si5351_set_freq+0x44>
    821c:	1e c1       	rjmp	.+572    	; 0x845a <si5351_set_freq+0x280>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    821e:	80 e4       	ldi	r24, 0x40	; 64
    8220:	c8 16       	cp	r12, r24
    8222:	82 e4       	ldi	r24, 0x42	; 66
    8224:	d8 06       	cpc	r13, r24
    8226:	8f e0       	ldi	r24, 0x0F	; 15
    8228:	e8 06       	cpc	r14, r24
    822a:	f1 04       	cpc	r15, r1
    822c:	70 f0       	brcs	.+28     	; 0x824a <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    822e:	c7 01       	movw	r24, r14
    8230:	b6 01       	movw	r22, r12
    8232:	24 e6       	ldi	r18, 0x64	; 100
    8234:	30 e0       	ldi	r19, 0x00	; 0
    8236:	40 e0       	ldi	r20, 0x00	; 0
    8238:	50 e0       	ldi	r21, 0x00	; 0
    823a:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
				freq_Fout *= 100;
    823e:	a4 e6       	ldi	r26, 0x64	; 100
    8240:	b0 e0       	ldi	r27, 0x00	; 0
    8242:	0e 94 a6 48 	call	0x914c	; 0x914c <__muluhisi3>
    8246:	6b 01       	movw	r12, r22
    8248:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    824a:	81 e0       	ldi	r24, 0x01	; 1
    824c:	b8 16       	cp	r11, r24
    824e:	c9 f0       	breq	.+50     	; 0x8282 <si5351_set_freq+0xa8>
    8250:	b8 16       	cp	r11, r24
    8252:	20 f0       	brcs	.+8      	; 0x825c <si5351_set_freq+0x82>
    8254:	82 e0       	ldi	r24, 0x02	; 2
    8256:	b8 16       	cp	r11, r24
    8258:	a9 f1       	breq	.+106    	; 0x82c4 <si5351_set_freq+0xea>
    825a:	01 c1       	rjmp	.+514    	; 0x845e <si5351_set_freq+0x284>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    825c:	80 91 29 49 	lds	r24, 0x4929	; 0x804929 <_ZL17enabledClocksMask>
    8260:	81 60       	ori	r24, 0x01	; 1
    8262:	80 93 29 49 	sts	0x4929, r24	; 0x804929 <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    8266:	c0 92 1d 49 	sts	0x491D, r12	; 0x80491d <_ZL9clock_out>
    826a:	d0 92 1e 49 	sts	0x491E, r13	; 0x80491e <_ZL9clock_out+0x1>
    826e:	e0 92 1f 49 	sts	0x491F, r14	; 0x80491f <_ZL9clock_out+0x2>
    8272:	f0 92 20 49 	sts	0x4920, r15	; 0x804920 <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    8276:	68 94       	set
    8278:	33 24       	eor	r3, r3
    827a:	34 f8       	bld	r3, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    827c:	22 24       	eor	r2, r2
    827e:	23 94       	inc	r2
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    8280:	41 c0       	rjmp	.+130    	; 0x8304 <si5351_set_freq+0x12a>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    8282:	80 91 29 49 	lds	r24, 0x4929	; 0x804929 <_ZL17enabledClocksMask>
    8286:	82 60       	ori	r24, 0x02	; 2
    8288:	80 93 29 49 	sts	0x4929, r24	; 0x804929 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    828c:	80 95       	com	r24
    828e:	8a 6f       	ori	r24, 0xFA	; 250
    8290:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    8292:	41 e0       	ldi	r20, 0x01	; 1
    8294:	be 01       	movw	r22, r28
    8296:	61 5f       	subi	r22, 0xF1	; 241
    8298:	7f 4f       	sbci	r23, 0xFF	; 255
    829a:	83 e0       	ldi	r24, 0x03	; 3
    829c:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    82a0:	81 11       	cpse	r24, r1
    82a2:	df c0       	rjmp	.+446    	; 0x8462 <si5351_set_freq+0x288>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    82a4:	c0 92 21 49 	sts	0x4921, r12	; 0x804921 <_ZL9clock_out+0x4>
    82a8:	d0 92 22 49 	sts	0x4922, r13	; 0x804922 <_ZL9clock_out+0x5>
    82ac:	e0 92 23 49 	sts	0x4923, r14	; 0x804923 <_ZL9clock_out+0x6>
    82b0:	f0 92 24 49 	sts	0x4924, r15	; 0x804924 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    82b4:	0f 2e       	mov	r0, r31
    82b6:	f1 e1       	ldi	r31, 0x11	; 17
    82b8:	3f 2e       	mov	r3, r31
    82ba:	f0 2d       	mov	r31, r0
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    82bc:	68 94       	set
    82be:	22 24       	eor	r2, r2
    82c0:	21 f8       	bld	r2, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    82c2:	20 c0       	rjmp	.+64     	; 0x8304 <si5351_set_freq+0x12a>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    82c4:	80 91 29 49 	lds	r24, 0x4929	; 0x804929 <_ZL17enabledClocksMask>
    82c8:	84 60       	ori	r24, 0x04	; 4
    82ca:	80 93 29 49 	sts	0x4929, r24	; 0x804929 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    82ce:	80 95       	com	r24
    82d0:	8c 6f       	ori	r24, 0xFC	; 252
    82d2:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    82d4:	41 e0       	ldi	r20, 0x01	; 1
    82d6:	be 01       	movw	r22, r28
    82d8:	61 5f       	subi	r22, 0xF1	; 241
    82da:	7f 4f       	sbci	r23, 0xFF	; 255
    82dc:	83 e0       	ldi	r24, 0x03	; 3
    82de:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    82e2:	81 11       	cpse	r24, r1
    82e4:	c0 c0       	rjmp	.+384    	; 0x8466 <si5351_set_freq+0x28c>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    82e6:	c0 92 25 49 	sts	0x4925, r12	; 0x804925 <_ZL9clock_out+0x8>
    82ea:	d0 92 26 49 	sts	0x4926, r13	; 0x804926 <_ZL9clock_out+0x9>
    82ee:	e0 92 27 49 	sts	0x4927, r14	; 0x804927 <_ZL9clock_out+0xa>
    82f2:	f0 92 28 49 	sts	0x4928, r15	; 0x804928 <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    82f6:	0f 2e       	mov	r0, r31
    82f8:	f2 e1       	ldi	r31, 0x12	; 18
    82fa:	3f 2e       	mov	r3, r31
    82fc:	f0 2d       	mov	r31, r0
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    82fe:	68 94       	set
    8300:	22 24       	eor	r2, r2
    8302:	21 f8       	bld	r2, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    8304:	81 e0       	ldi	r24, 0x01	; 1
    8306:	28 16       	cp	r2, r24
    8308:	61 f0       	breq	.+24     	; 0x8322 <si5351_set_freq+0x148>
    830a:	80 91 2a 49 	lds	r24, 0x492A	; 0x80492a <_ZL8freqVCOB>
    830e:	90 91 2b 49 	lds	r25, 0x492B	; 0x80492b <_ZL8freqVCOB+0x1>
    8312:	a0 91 2c 49 	lds	r26, 0x492C	; 0x80492c <_ZL8freqVCOB+0x2>
    8316:	b0 91 2d 49 	lds	r27, 0x492D	; 0x80492d <_ZL8freqVCOB+0x3>
    831a:	89 2b       	or	r24, r25
    831c:	8a 2b       	or	r24, r26
    831e:	8b 2b       	or	r24, r27
    8320:	81 f4       	brne	.+32     	; 0x8342 <si5351_set_freq+0x168>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    8322:	8e 01       	movw	r16, r28
    8324:	02 5f       	subi	r16, 0xF2	; 242
    8326:	1f 4f       	sbci	r17, 0xFF	; 255
    8328:	9e 01       	movw	r18, r28
    832a:	23 5f       	subi	r18, 0xF3	; 243
    832c:	3f 4f       	sbci	r19, 0xFF	; 255
    832e:	ae 01       	movw	r20, r28
    8330:	4f 5f       	subi	r20, 0xFF	; 255
    8332:	5f 4f       	sbci	r21, 0xFF	; 255
    8334:	c7 01       	movw	r24, r14
    8336:	b6 01       	movw	r22, r12
    8338:	0e 94 30 3c 	call	0x7860	; 0x7860 <_Z15multisynth_calcmP13u_si5351_regsPhS1_>
    833c:	2b 01       	movw	r4, r22
    833e:	3c 01       	movw	r6, r24
    8340:	10 c0       	rjmp	.+32     	; 0x8362 <si5351_set_freq+0x188>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    8342:	8e 01       	movw	r16, r28
    8344:	02 5f       	subi	r16, 0xF2	; 242
    8346:	1f 4f       	sbci	r17, 0xFF	; 255
    8348:	9e 01       	movw	r18, r28
    834a:	23 5f       	subi	r18, 0xF3	; 243
    834c:	3f 4f       	sbci	r19, 0xFF	; 255
    834e:	ae 01       	movw	r20, r28
    8350:	4f 5f       	subi	r20, 0xFF	; 255
    8352:	5f 4f       	sbci	r21, 0xFF	; 255
    8354:	c7 01       	movw	r24, r14
    8356:	b6 01       	movw	r22, r12
    8358:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_>
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, BOOL clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    835c:	41 2c       	mov	r4, r1
    835e:	51 2c       	mov	r5, r1
    8360:	32 01       	movw	r6, r4
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    8362:	62 2d       	mov	r22, r2
    8364:	8b 2d       	mov	r24, r11
    8366:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    836a:	81 11       	cpse	r24, r1
    836c:	7e c0       	rjmp	.+252    	; 0x846a <si5351_set_freq+0x290>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    836e:	8e 85       	ldd	r24, Y+14	; 0x0e
    8370:	ad 84       	ldd	r10, Y+13	; 0x0d
    8372:	8f 93       	push	r24
    8374:	81 2c       	mov	r8, r1
    8376:	c9 80       	ldd	r12, Y+1	; 0x01
    8378:	da 80       	ldd	r13, Y+2	; 0x02
    837a:	eb 80       	ldd	r14, Y+3	; 0x03
    837c:	fc 80       	ldd	r15, Y+4	; 0x04
    837e:	0d 81       	ldd	r16, Y+5	; 0x05
    8380:	1e 81       	ldd	r17, Y+6	; 0x06
    8382:	2f 81       	ldd	r18, Y+7	; 0x07
    8384:	38 85       	ldd	r19, Y+8	; 0x08
    8386:	49 85       	ldd	r20, Y+9	; 0x09
    8388:	5a 85       	ldd	r21, Y+10	; 0x0a
    838a:	6b 85       	ldd	r22, Y+11	; 0x0b
    838c:	7c 85       	ldd	r23, Y+12	; 0x0c
    838e:	8b 2d       	mov	r24, r11
    8390:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh>
    8394:	0f 90       	pop	r0
    8396:	81 11       	cpse	r24, r1
    8398:	6a c0       	rjmp	.+212    	; 0x846e <si5351_set_freq+0x294>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    839a:	41 14       	cp	r4, r1
    839c:	51 04       	cpc	r5, r1
    839e:	61 04       	cpc	r6, r1
    83a0:	71 04       	cpc	r7, r1
    83a2:	29 f0       	breq	.+10     	; 0x83ae <si5351_set_freq+0x1d4>
			{
				set_pll(freq_VCO, target_pll);
    83a4:	42 2d       	mov	r20, r2
    83a6:	c3 01       	movw	r24, r6
    83a8:	b2 01       	movw	r22, r4
    83aa:	0e 94 37 3e 	call	0x7c6e	; 0x7c6e <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    83ae:	99 20       	and	r9, r9
    83b0:	69 f0       	breq	.+26     	; 0x83cc <si5351_set_freq+0x1f2>
		{
 			data[0] = enabledClocksMask;
    83b2:	80 91 29 49 	lds	r24, 0x4929	; 0x804929 <_ZL17enabledClocksMask>
    83b6:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    83b8:	41 e0       	ldi	r20, 0x01	; 1
    83ba:	be 01       	movw	r22, r28
    83bc:	61 5f       	subi	r22, 0xF1	; 241
    83be:	7f 4f       	sbci	r23, 0xFF	; 255
    83c0:	83 e0       	ldi	r24, 0x03	; 3
    83c2:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    83c6:	88 23       	and	r24, r24
    83c8:	71 f0       	breq	.+28     	; 0x83e6 <si5351_set_freq+0x20c>
    83ca:	53 c0       	rjmp	.+166    	; 0x8472 <si5351_set_freq+0x298>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    83cc:	80 91 29 49 	lds	r24, 0x4929	; 0x804929 <_ZL17enabledClocksMask>
    83d0:	80 95       	com	r24
    83d2:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    83d4:	41 e0       	ldi	r20, 0x01	; 1
    83d6:	be 01       	movw	r22, r28
    83d8:	61 5f       	subi	r22, 0xF1	; 241
    83da:	7f 4f       	sbci	r23, 0xFF	; 255
    83dc:	83 e0       	ldi	r24, 0x03	; 3
    83de:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    83e2:	81 11       	cpse	r24, r1
    83e4:	48 c0       	rjmp	.+144    	; 0x8476 <si5351_set_freq+0x29c>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    83e6:	81 e0       	ldi	r24, 0x01	; 1
    83e8:	28 12       	cpse	r2, r24
    83ea:	0e c0       	rjmp	.+28     	; 0x8408 <si5351_set_freq+0x22e>
		{
 			data[0] = 0x4C;
    83ec:	8c e4       	ldi	r24, 0x4C	; 76
    83ee:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    83f0:	41 e0       	ldi	r20, 0x01	; 1
    83f2:	be 01       	movw	r22, r28
    83f4:	61 5f       	subi	r22, 0xF1	; 241
    83f6:	7f 4f       	sbci	r23, 0xFF	; 255
    83f8:	83 2d       	mov	r24, r3
    83fa:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    83fe:	88 23       	and	r24, r24
    8400:	09 f4       	brne	.+2      	; 0x8404 <si5351_set_freq+0x22a>
    8402:	40 c0       	rjmp	.+128    	; 0x8484 <si5351_set_freq+0x2aa>
			{
				return true;
    8404:	81 e0       	ldi	r24, 0x01	; 1
    8406:	3e c0       	rjmp	.+124    	; 0x8484 <si5351_set_freq+0x2aa>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    8408:	8d 85       	ldd	r24, Y+13	; 0x0d
    840a:	88 23       	and	r24, r24
    840c:	61 f0       	breq	.+24     	; 0x8426 <si5351_set_freq+0x24c>
			{
 				data[0] = 0x6C;
    840e:	8c e6       	ldi	r24, 0x6C	; 108
    8410:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    8412:	41 e0       	ldi	r20, 0x01	; 1
    8414:	be 01       	movw	r22, r28
    8416:	61 5f       	subi	r22, 0xF1	; 241
    8418:	7f 4f       	sbci	r23, 0xFF	; 255
    841a:	83 2d       	mov	r24, r3
    841c:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    8420:	88 23       	and	r24, r24
    8422:	61 f0       	breq	.+24     	; 0x843c <si5351_set_freq+0x262>
    8424:	2a c0       	rjmp	.+84     	; 0x847a <si5351_set_freq+0x2a0>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    8426:	8c e2       	ldi	r24, 0x2C	; 44
    8428:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    842a:	41 e0       	ldi	r20, 0x01	; 1
    842c:	be 01       	movw	r22, r28
    842e:	61 5f       	subi	r22, 0xF1	; 241
    8430:	7f 4f       	sbci	r23, 0xFF	; 255
    8432:	83 2d       	mov	r24, r3
    8434:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_Z17si5351_write_bulkhPhh>
    8438:	81 11       	cpse	r24, r1
    843a:	21 c0       	rjmp	.+66     	; 0x847e <si5351_set_freq+0x2a4>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    843c:	41 14       	cp	r4, r1
    843e:	51 04       	cpc	r5, r1
    8440:	61 04       	cpc	r6, r1
    8442:	71 04       	cpc	r7, r1
    8444:	f1 f0       	breq	.+60     	; 0x8482 <si5351_set_freq+0x2a8>
			{
				freqVCOB = freq_VCO;
    8446:	40 92 2a 49 	sts	0x492A, r4	; 0x80492a <_ZL8freqVCOB>
    844a:	50 92 2b 49 	sts	0x492B, r5	; 0x80492b <_ZL8freqVCOB+0x1>
    844e:	60 92 2c 49 	sts	0x492C, r6	; 0x80492c <_ZL8freqVCOB+0x2>
    8452:	70 92 2d 49 	sts	0x492D, r7	; 0x80492d <_ZL8freqVCOB+0x3>
			}
		}

		return(FALSE);
    8456:	80 e0       	ldi	r24, 0x00	; 0
    8458:	15 c0       	rjmp	.+42     	; 0x8484 <si5351_set_freq+0x2aa>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    845a:	81 e0       	ldi	r24, 0x01	; 1
    845c:	13 c0       	rjmp	.+38     	; 0x8484 <si5351_set_freq+0x2aa>
			}
			break;

			default:
			{
				return(TRUE);
    845e:	81 e0       	ldi	r24, 0x01	; 1
    8460:	11 c0       	rjmp	.+34     	; 0x8484 <si5351_set_freq+0x2aa>
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
    8462:	81 e0       	ldi	r24, 0x01	; 1
    8464:	0f c0       	rjmp	.+30     	; 0x8484 <si5351_set_freq+0x2aa>
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
    8466:	81 e0       	ldi	r24, 0x01	; 1
    8468:	0d c0       	rjmp	.+26     	; 0x8484 <si5351_set_freq+0x2aa>
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
		{
			return(true);
    846a:	81 e0       	ldi	r24, 0x01	; 1
    846c:	0b c0       	rjmp	.+22     	; 0x8484 <si5351_set_freq+0x2aa>
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
		{
			return(true);
    846e:	81 e0       	ldi	r24, 0x01	; 1
    8470:	09 c0       	rjmp	.+18     	; 0x8484 <si5351_set_freq+0x2aa>
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    8472:	81 e0       	ldi	r24, 0x01	; 1
    8474:	07 c0       	rjmp	.+14     	; 0x8484 <si5351_set_freq+0x2aa>
		else
		{
 			data[0] = ~enabledClocksMask;
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
			{
				return true;
    8476:	81 e0       	ldi	r24, 0x01	; 1
    8478:	05 c0       	rjmp	.+10     	; 0x8484 <si5351_set_freq+0x2aa>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    847a:	81 e0       	ldi	r24, 0x01	; 1
    847c:	03 c0       	rjmp	.+6      	; 0x8484 <si5351_set_freq+0x2aa>
			else
			{
 				data[0] = 0x2C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    847e:	81 e0       	ldi	r24, 0x01	; 1
    8480:	01 c0       	rjmp	.+2      	; 0x8484 <si5351_set_freq+0x2aa>
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    8482:	80 e0       	ldi	r24, 0x00	; 0
	}
    8484:	60 96       	adiw	r28, 0x10	; 16
    8486:	cd bf       	out	0x3d, r28	; 61
    8488:	de bf       	out	0x3e, r29	; 62
    848a:	df 91       	pop	r29
    848c:	cf 91       	pop	r28
    848e:	1f 91       	pop	r17
    8490:	0f 91       	pop	r16
    8492:	ff 90       	pop	r15
    8494:	ef 90       	pop	r14
    8496:	df 90       	pop	r13
    8498:	cf 90       	pop	r12
    849a:	bf 90       	pop	r11
    849c:	af 90       	pop	r10
    849e:	9f 90       	pop	r9
    84a0:	8f 90       	pop	r8
    84a2:	7f 90       	pop	r7
    84a4:	6f 90       	pop	r6
    84a6:	5f 90       	pop	r5
    84a8:	4f 90       	pop	r4
    84aa:	3f 90       	pop	r3
    84ac:	2f 90       	pop	r2
    84ae:	08 95       	ret

000084b0 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    84b0:	80 e0       	ldi	r24, 0x00	; 0
    84b2:	08 95       	ret

000084b4 <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    84b4:	e0 e0       	ldi	r30, 0x00	; 0
    84b6:	fb e0       	ldi	r31, 0x0B	; 11
    84b8:	81 e0       	ldi	r24, 0x01	; 1
    84ba:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    84bc:	20 e4       	ldi	r18, 0x40	; 64
    84be:	3c e9       	ldi	r19, 0x9C	; 156
    84c0:	24 87       	std	Z+12, r18	; 0x0c
    84c2:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    84c4:	93 e0       	ldi	r25, 0x03	; 3
    84c6:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    84c8:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    84ca:	e0 e1       	ldi	r30, 0x10	; 16
    84cc:	fb e0       	ldi	r31, 0x0B	; 11
    84ce:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    84d0:	40 ec       	ldi	r20, 0xC0	; 192
    84d2:	5d e5       	ldi	r21, 0x5D	; 93
    84d4:	44 87       	std	Z+12, r20	; 0x0c
    84d6:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    84d8:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    84da:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    84dc:	e0 e3       	ldi	r30, 0x30	; 48
    84de:	fb e0       	ldi	r31, 0x0B	; 11
    84e0:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    84e2:	24 87       	std	Z+12, r18	; 0x0c
    84e4:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    84e6:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    84e8:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    84ea:	80 e0       	ldi	r24, 0x00	; 0
    84ec:	08 95       	ret

000084ee <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    84ee:	0f 93       	push	r16
    84f0:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    84f2:	61 15       	cp	r22, r1
    84f4:	71 05       	cpc	r23, r1
    84f6:	81 05       	cpc	r24, r1
    84f8:	91 05       	cpc	r25, r1
    84fa:	09 f4       	brne	.+2      	; 0x84fe <util_delay_ms+0x10>
    84fc:	67 c0       	rjmp	.+206    	; 0x85cc <util_delay_ms+0xde>
	{
		if(counting)
    84fe:	20 91 32 49 	lds	r18, 0x4932	; 0x804932 <_ZZ13util_delay_msE8counting>
    8502:	22 23       	and	r18, r18
    8504:	f1 f1       	breq	.+124    	; 0x8582 <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    8506:	00 91 33 49 	lds	r16, 0x4933	; 0x804933 <_ZL12g_ms_counter>
    850a:	10 91 34 49 	lds	r17, 0x4934	; 0x804934 <_ZL12g_ms_counter+0x1>
    850e:	20 91 35 49 	lds	r18, 0x4935	; 0x804935 <_ZL12g_ms_counter+0x2>
    8512:	30 91 36 49 	lds	r19, 0x4936	; 0x804936 <_ZL12g_ms_counter+0x3>
    8516:	01 2b       	or	r16, r17
    8518:	02 2b       	or	r16, r18
    851a:	03 2b       	or	r16, r19
    851c:	71 f4       	brne	.+28     	; 0x853a <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    851e:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    8522:	10 92 32 49 	sts	0x4932, r1	; 0x804932 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    8526:	10 92 2e 49 	sts	0x492E, r1	; 0x80492e <_ZZ13util_delay_msE14countdownValue>
    852a:	10 92 2f 49 	sts	0x492F, r1	; 0x80492f <_ZZ13util_delay_msE14countdownValue+0x1>
    852e:	10 92 30 49 	sts	0x4930, r1	; 0x804930 <_ZZ13util_delay_msE14countdownValue+0x2>
    8532:	10 92 31 49 	sts	0x4931, r1	; 0x804931 <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    8536:	80 e0       	ldi	r24, 0x00	; 0
    8538:	62 c0       	rjmp	.+196    	; 0x85fe <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    853a:	00 91 2e 49 	lds	r16, 0x492E	; 0x80492e <_ZZ13util_delay_msE14countdownValue>
    853e:	10 91 2f 49 	lds	r17, 0x492F	; 0x80492f <_ZZ13util_delay_msE14countdownValue+0x1>
    8542:	20 91 30 49 	lds	r18, 0x4930	; 0x804930 <_ZZ13util_delay_msE14countdownValue+0x2>
    8546:	30 91 31 49 	lds	r19, 0x4931	; 0x804931 <_ZZ13util_delay_msE14countdownValue+0x3>
    854a:	60 17       	cp	r22, r16
    854c:	71 07       	cpc	r23, r17
    854e:	82 07       	cpc	r24, r18
    8550:	93 07       	cpc	r25, r19
    8552:	09 f4       	brne	.+2      	; 0x8556 <util_delay_ms+0x68>
    8554:	51 c0       	rjmp	.+162    	; 0x85f8 <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    8556:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    855a:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    855e:	60 93 2e 49 	sts	0x492E, r22	; 0x80492e <_ZZ13util_delay_msE14countdownValue>
    8562:	70 93 2f 49 	sts	0x492F, r23	; 0x80492f <_ZZ13util_delay_msE14countdownValue+0x1>
    8566:	80 93 30 49 	sts	0x4930, r24	; 0x804930 <_ZZ13util_delay_msE14countdownValue+0x2>
    856a:	90 93 31 49 	sts	0x4931, r25	; 0x804931 <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    856e:	60 93 33 49 	sts	0x4933, r22	; 0x804933 <_ZL12g_ms_counter>
    8572:	70 93 34 49 	sts	0x4934, r23	; 0x804934 <_ZL12g_ms_counter+0x1>
    8576:	80 93 35 49 	sts	0x4935, r24	; 0x804935 <_ZL12g_ms_counter+0x2>
    857a:	90 93 36 49 	sts	0x4936, r25	; 0x804936 <_ZL12g_ms_counter+0x3>
				return(false);
    857e:	80 e0       	ldi	r24, 0x00	; 0
    8580:	3e c0       	rjmp	.+124    	; 0x85fe <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    8582:	00 91 2e 49 	lds	r16, 0x492E	; 0x80492e <_ZZ13util_delay_msE14countdownValue>
    8586:	10 91 2f 49 	lds	r17, 0x492F	; 0x80492f <_ZZ13util_delay_msE14countdownValue+0x1>
    858a:	20 91 30 49 	lds	r18, 0x4930	; 0x804930 <_ZZ13util_delay_msE14countdownValue+0x2>
    858e:	30 91 31 49 	lds	r19, 0x4931	; 0x804931 <_ZZ13util_delay_msE14countdownValue+0x3>
    8592:	60 17       	cp	r22, r16
    8594:	71 07       	cpc	r23, r17
    8596:	82 07       	cpc	r24, r18
    8598:	93 07       	cpc	r25, r19
    859a:	71 f1       	breq	.+92     	; 0x85f8 <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    859c:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    85a0:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    85a4:	60 93 2e 49 	sts	0x492E, r22	; 0x80492e <_ZZ13util_delay_msE14countdownValue>
    85a8:	70 93 2f 49 	sts	0x492F, r23	; 0x80492f <_ZZ13util_delay_msE14countdownValue+0x1>
    85ac:	80 93 30 49 	sts	0x4930, r24	; 0x804930 <_ZZ13util_delay_msE14countdownValue+0x2>
    85b0:	90 93 31 49 	sts	0x4931, r25	; 0x804931 <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    85b4:	60 93 33 49 	sts	0x4933, r22	; 0x804933 <_ZL12g_ms_counter>
    85b8:	70 93 34 49 	sts	0x4934, r23	; 0x804934 <_ZL12g_ms_counter+0x1>
    85bc:	80 93 35 49 	sts	0x4935, r24	; 0x804935 <_ZL12g_ms_counter+0x2>
    85c0:	90 93 36 49 	sts	0x4936, r25	; 0x804936 <_ZL12g_ms_counter+0x3>
			counting = true;
    85c4:	81 e0       	ldi	r24, 0x01	; 1
    85c6:	80 93 32 49 	sts	0x4932, r24	; 0x804932 <_ZZ13util_delay_msE8counting>
    85ca:	16 c0       	rjmp	.+44     	; 0x85f8 <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    85cc:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    85d0:	10 92 32 49 	sts	0x4932, r1	; 0x804932 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    85d4:	10 92 2e 49 	sts	0x492E, r1	; 0x80492e <_ZZ13util_delay_msE14countdownValue>
    85d8:	10 92 2f 49 	sts	0x492F, r1	; 0x80492f <_ZZ13util_delay_msE14countdownValue+0x1>
    85dc:	10 92 30 49 	sts	0x4930, r1	; 0x804930 <_ZZ13util_delay_msE14countdownValue+0x2>
    85e0:	10 92 31 49 	sts	0x4931, r1	; 0x804931 <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    85e4:	10 92 33 49 	sts	0x4933, r1	; 0x804933 <_ZL12g_ms_counter>
    85e8:	10 92 34 49 	sts	0x4934, r1	; 0x804934 <_ZL12g_ms_counter+0x1>
    85ec:	10 92 35 49 	sts	0x4935, r1	; 0x804935 <_ZL12g_ms_counter+0x2>
    85f0:	10 92 36 49 	sts	0x4936, r1	; 0x804936 <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    85f4:	80 e0       	ldi	r24, 0x00	; 0
    85f6:	03 c0       	rjmp	.+6      	; 0x85fe <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    85f8:	81 e0       	ldi	r24, 0x01	; 1
    85fa:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    85fe:	1f 91       	pop	r17
    8600:	0f 91       	pop	r16
    8602:	08 95       	ret

00008604 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    8604:	1f 92       	push	r1
    8606:	0f 92       	push	r0
    8608:	0f b6       	in	r0, 0x3f	; 63
    860a:	0f 92       	push	r0
    860c:	11 24       	eor	r1, r1
    860e:	8f 93       	push	r24
    8610:	9f 93       	push	r25
    8612:	af 93       	push	r26
    8614:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    8616:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    861a:	80 ff       	sbrs	r24, 0
    861c:	1d c0       	rjmp	.+58     	; 0x8658 <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    861e:	80 91 33 49 	lds	r24, 0x4933	; 0x804933 <_ZL12g_ms_counter>
    8622:	90 91 34 49 	lds	r25, 0x4934	; 0x804934 <_ZL12g_ms_counter+0x1>
    8626:	a0 91 35 49 	lds	r26, 0x4935	; 0x804935 <_ZL12g_ms_counter+0x2>
    862a:	b0 91 36 49 	lds	r27, 0x4936	; 0x804936 <_ZL12g_ms_counter+0x3>
    862e:	00 97       	sbiw	r24, 0x00	; 0
    8630:	a1 05       	cpc	r26, r1
    8632:	b1 05       	cpc	r27, r1
    8634:	61 f0       	breq	.+24     	; 0x864e <__vector_13+0x4a>
		{
			g_ms_counter--;	
    8636:	01 97       	sbiw	r24, 0x01	; 1
    8638:	a1 09       	sbc	r26, r1
    863a:	b1 09       	sbc	r27, r1
    863c:	80 93 33 49 	sts	0x4933, r24	; 0x804933 <_ZL12g_ms_counter>
    8640:	90 93 34 49 	sts	0x4934, r25	; 0x804934 <_ZL12g_ms_counter+0x1>
    8644:	a0 93 35 49 	sts	0x4935, r26	; 0x804935 <_ZL12g_ms_counter+0x2>
    8648:	b0 93 36 49 	sts	0x4936, r27	; 0x804936 <_ZL12g_ms_counter+0x3>
    864c:	02 c0       	rjmp	.+4      	; 0x8652 <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    864e:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    8652:	81 e0       	ldi	r24, 0x01	; 1
    8654:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    8658:	bf 91       	pop	r27
    865a:	af 91       	pop	r26
    865c:	9f 91       	pop	r25
    865e:	8f 91       	pop	r24
    8660:	0f 90       	pop	r0
    8662:	0f be       	out	0x3f, r0	; 63
    8664:	0f 90       	pop	r0
    8666:	1f 90       	pop	r1
    8668:	18 95       	reti

0000866a <_Z14txSetFrequencyPmh>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
    866a:	0f 93       	push	r16
    866c:	1f 93       	push	r17
    866e:	cf 93       	push	r28
    8670:	df 93       	push	r29
    8672:	fc 01       	movw	r30, r24
    8674:	46 2f       	mov	r20, r22
		BOOL err = FALSE;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    8676:	60 81       	ld	r22, Z
    8678:	71 81       	ldd	r23, Z+1	; 0x01
    867a:	82 81       	ldd	r24, Z+2	; 0x02
    867c:	93 81       	ldd	r25, Z+3	; 0x03
    867e:	8b 01       	movw	r16, r22
    8680:	9c 01       	movw	r18, r24
    8682:	01 5e       	subi	r16, 0xE1	; 225
    8684:	17 46       	sbci	r17, 0x67	; 103
    8686:	25 43       	sbci	r18, 0x35	; 53
    8688:	31 09       	sbc	r19, r1
    868a:	0f 31       	cpi	r16, 0x1F	; 31
    868c:	11 4a       	sbci	r17, 0xA1	; 161
    868e:	27 40       	sbci	r18, 0x07	; 7
    8690:	31 05       	cpc	r19, r1
    8692:	a8 f4       	brcc	.+42     	; 0x86be <_Z14txSetFrequencyPmh+0x54>
    8694:	24 2f       	mov	r18, r20
    8696:	ef 01       	movw	r28, r30
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
    8698:	41 e0       	ldi	r20, 0x01	; 1
    869a:	0e 94 ed 40 	call	0x81da	; 0x81da <si5351_set_freq>
    869e:	81 11       	cpse	r24, r1
    86a0:	10 c0       	rjmp	.+32     	; 0x86c2 <_Z14txSetFrequencyPmh+0x58>
			{
				err = true; 
			}
			else
			{
				g_80m_frequency = *freq;
    86a2:	88 81       	ld	r24, Y
    86a4:	99 81       	ldd	r25, Y+1	; 0x01
    86a6:	aa 81       	ldd	r26, Y+2	; 0x02
    86a8:	bb 81       	ldd	r27, Y+3	; 0x03
    86aa:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    86ae:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    86b2:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    86b6:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
		BOOL err = FALSE;
    86ba:	80 e0       	ldi	r24, 0x00	; 0
    86bc:	03 c0       	rjmp	.+6      	; 0x86c4 <_Z14txSetFrequencyPmh+0x5a>
    86be:	80 e0       	ldi	r24, 0x00	; 0
    86c0:	01 c0       	rjmp	.+2      	; 0x86c4 <_Z14txSetFrequencyPmh+0x5a>

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
			{
				err = true; 
    86c2:	81 e0       	ldi	r24, 0x01	; 1
				g_80m_frequency = *freq;
			}
		}

		return(err);
	}
    86c4:	df 91       	pop	r29
    86c6:	cf 91       	pop	r28
    86c8:	1f 91       	pop	r17
    86ca:	0f 91       	pop	r16
    86cc:	08 95       	ret

000086ce <_Z14txGetFrequencyv>:

	Frequency_Hz txGetFrequency(void)
	{
		return( g_80m_frequency);
    86ce:	60 91 2c 40 	lds	r22, 0x402C	; 0x80402c <g_80m_frequency>
    86d2:	70 91 2d 40 	lds	r23, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    86d6:	80 91 2e 40 	lds	r24, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    86da:	90 91 2f 40 	lds	r25, 0x402F	; 0x80402f <g_80m_frequency+0x3>
	}
    86de:	08 95       	ret

000086e0 <_Z18powerToTransmitterh>:

	EC powerToTransmitter(BOOL on)
	{
		fet_driver(on);
    86e0:	91 e0       	ldi	r25, 0x01	; 1
    86e2:	81 11       	cpse	r24, r1
    86e4:	01 c0       	rjmp	.+2      	; 0x86e8 <_Z18powerToTransmitterh+0x8>
    86e6:	90 e0       	ldi	r25, 0x00	; 0
    86e8:	89 2f       	mov	r24, r25
    86ea:	0e 94 8d 28 	call	0x511a	; 0x511a <_Z10fet_driverb>

		return(ERROR_CODE_NO_ERROR);
	}
    86ee:	80 e0       	ldi	r24, 0x00	; 0
    86f0:	08 95       	ret

000086f2 <_Z14keyTransmitterh>:

	void keyTransmitter(BOOL on)
	{
		if(g_tx_initialized)
    86f2:	90 91 37 49 	lds	r25, 0x4937	; 0x804937 <_ZL16g_tx_initialized>
    86f6:	99 23       	and	r25, r25
    86f8:	c1 f0       	breq	.+48     	; 0x872a <_Z14keyTransmitterh+0x38>
		{			
			if(on)
    86fa:	88 23       	and	r24, r24
    86fc:	71 f0       	breq	.+28     	; 0x871a <_Z14keyTransmitterh+0x28>
			{
				if(!g_transmitter_keyed)
    86fe:	80 91 38 49 	lds	r24, 0x4938	; 0x804938 <_ZL19g_transmitter_keyed>
    8702:	81 11       	cpse	r24, r1
    8704:	12 c0       	rjmp	.+36     	; 0x872a <_Z14keyTransmitterh+0x38>
				{
					if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED) == ERROR_CODE_NO_ERROR)
    8706:	61 e0       	ldi	r22, 0x01	; 1
    8708:	81 e0       	ldi	r24, 0x01	; 1
    870a:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <si5351_clock_enable>
    870e:	81 11       	cpse	r24, r1
    8710:	0c c0       	rjmp	.+24     	; 0x872a <_Z14keyTransmitterh+0x38>
					{
						g_transmitter_keyed = TRUE;
    8712:	81 e0       	ldi	r24, 0x01	; 1
    8714:	80 93 38 49 	sts	0x4938, r24	; 0x804938 <_ZL19g_transmitter_keyed>
    8718:	08 95       	ret
					}
				}
			}
			else
			{
				if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED) == ERROR_CODE_NO_ERROR)
    871a:	60 e0       	ldi	r22, 0x00	; 0
    871c:	81 e0       	ldi	r24, 0x01	; 1
    871e:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <si5351_clock_enable>
    8722:	81 11       	cpse	r24, r1
    8724:	02 c0       	rjmp	.+4      	; 0x872a <_Z14keyTransmitterh+0x38>
				{
					g_transmitter_keyed = FALSE;
    8726:	10 92 38 49 	sts	0x4938, r1	; 0x804938 <_ZL19g_transmitter_keyed>
    872a:	08 95       	ret

0000872c <_Z12txGetPowerMwv>:
		}
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
    872c:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    8730:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
	}
    8734:	08 95       	ret

00008736 <_Z15txSetParametersPjPh>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, BOOL* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, BOOL* enableDriverPwr) */
	{
    8736:	cf 93       	push	r28
    8738:	df 93       	push	r29
    873a:	cd b7       	in	r28, 0x3d	; 61
    873c:	de b7       	in	r29, 0x3e	; 62
    873e:	2b 97       	sbiw	r28, 0x0b	; 11
    8740:	cd bf       	out	0x3d, r28	; 61
    8742:	de bf       	out	0x3e, r29	; 62
    8744:	88 87       	std	Y+8, r24	; 0x08
    8746:	99 87       	std	Y+9, r25	; 0x09
    8748:	6a 87       	std	Y+10, r22	; 0x0a
    874a:	7b 87       	std	Y+11, r23	; 0x0b
		BOOL err = FALSE;
    874c:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    874e:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    8750:	1b 82       	std	Y+3, r1	; 0x03
    8752:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW != null)
    8754:	88 85       	ldd	r24, Y+8	; 0x08
    8756:	99 85       	ldd	r25, Y+9	; 0x09
    8758:	89 2b       	or	r24, r25
    875a:	09 f4       	brne	.+2      	; 0x875e <_Z15txSetParametersPjPh+0x28>
    875c:	68 c0       	rjmp	.+208    	; 0x882e <_Z15txSetParametersPjPh+0xf8>
		{
			power = *power_mW;
    875e:	88 85       	ldd	r24, Y+8	; 0x08
    8760:	99 85       	ldd	r25, Y+9	; 0x09
    8762:	fc 01       	movw	r30, r24
    8764:	80 81       	ld	r24, Z
    8766:	91 81       	ldd	r25, Z+1	; 0x01
    8768:	8b 83       	std	Y+3, r24	; 0x03
    876a:	9c 83       	std	Y+4, r25	; 0x04

			if(power <= MAX_TX_POWER_80M_MW)
    876c:	8b 81       	ldd	r24, Y+3	; 0x03
    876e:	9c 81       	ldd	r25, Y+4	; 0x04
    8770:	89 38       	cpi	r24, 0x89	; 137
    8772:	93 41       	sbci	r25, 0x13	; 19
    8774:	08 f0       	brcs	.+2      	; 0x8778 <_Z15txSetParametersPjPh+0x42>
    8776:	57 c0       	rjmp	.+174    	; 0x8826 <_Z15txSetParametersPjPh+0xf0>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    8778:	9e 01       	movw	r18, r28
    877a:	29 5f       	subi	r18, 0xF9	; 249
    877c:	3f 4f       	sbci	r19, 0xFF	; 255
    877e:	ae 01       	movw	r20, r28
    8780:	4a 5f       	subi	r20, 0xFA	; 250
    8782:	5f 4f       	sbci	r21, 0xFF	; 255
    8784:	be 01       	movw	r22, r28
    8786:	6b 5f       	subi	r22, 0xFB	; 251
    8788:	7f 4f       	sbci	r23, 0xFF	; 255
    878a:	ce 01       	movw	r24, r28
    878c:	03 96       	adiw	r24, 0x03	; 3
    878e:	0e 94 70 44 	call	0x88e0	; 0x88e0 <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    8792:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    8794:	81 e0       	ldi	r24, 0x01	; 1
    8796:	9a 81       	ldd	r25, Y+2	; 0x02
    8798:	9f 3c       	cpi	r25, 0xCF	; 207
    879a:	09 f0       	breq	.+2      	; 0x879e <_Z15txSetParametersPjPh+0x68>
    879c:	80 e0       	ldi	r24, 0x00	; 0
    879e:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    87a0:	8b 81       	ldd	r24, Y+3	; 0x03
    87a2:	9c 81       	ldd	r25, Y+4	; 0x04
    87a4:	21 e0       	ldi	r18, 0x01	; 1
    87a6:	89 2b       	or	r24, r25
    87a8:	09 f0       	breq	.+2      	; 0x87ac <_Z15txSetParametersPjPh+0x76>
    87aa:	20 e0       	ldi	r18, 0x00	; 0
    87ac:	82 2f       	mov	r24, r18
    87ae:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>

				if(!err)
    87b2:	89 81       	ldd	r24, Y+1	; 0x01
    87b4:	88 23       	and	r24, r24
    87b6:	79 f5       	brne	.+94     	; 0x8816 <_Z15txSetParametersPjPh+0xe0>
				{
					g_80m_power_level_mW = power;
    87b8:	8b 81       	ldd	r24, Y+3	; 0x03
    87ba:	9c 81       	ldd	r25, Y+4	; 0x04
    87bc:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    87c0:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    87c4:	0e 94 32 45 	call	0x8a64	; 0x8a64 <_Z18txIsAntennaForBandv>
    87c8:	98 2f       	mov	r25, r24
    87ca:	81 e0       	ldi	r24, 0x01	; 1
    87cc:	99 23       	and	r25, r25
    87ce:	09 f4       	brne	.+2      	; 0x87d2 <_Z15txSetParametersPjPh+0x9c>
    87d0:	80 e0       	ldi	r24, 0x00	; 0
    87d2:	88 23       	and	r24, r24
    87d4:	31 f0       	breq	.+12     	; 0x87e2 <_Z15txSetParametersPjPh+0xac>
					{
						DAC0_setVal(drainVoltageDAC);
    87d6:	8d 81       	ldd	r24, Y+5	; 0x05
    87d8:	88 2f       	mov	r24, r24
    87da:	90 e0       	ldi	r25, 0x00	; 0
    87dc:	0e 94 c2 29 	call	0x5384	; 0x5384 <_Z11DAC0_setValj>
    87e0:	07 c0       	rjmp	.+14     	; 0x87f0 <_Z15txSetParametersPjPh+0xba>
					}
					else
					{
						g_tx_power_is_zero = TRUE;
    87e2:	81 e0       	ldi	r24, 0x01	; 1
    87e4:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>
						err = TRUE;
    87e8:	81 e0       	ldi	r24, 0x01	; 1
    87ea:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    87ec:	86 ef       	ldi	r24, 0xF6	; 246
    87ee:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || (drainVoltageDAC == 0))
    87f0:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    87f4:	88 23       	and	r24, r24
    87f6:	19 f4       	brne	.+6      	; 0x87fe <_Z15txSetParametersPjPh+0xc8>
    87f8:	8d 81       	ldd	r24, Y+5	; 0x05
    87fa:	88 23       	and	r24, r24
    87fc:	11 f4       	brne	.+4      	; 0x8802 <_Z15txSetParametersPjPh+0xcc>
    87fe:	81 e0       	ldi	r24, 0x01	; 1
    8800:	01 c0       	rjmp	.+2      	; 0x8804 <_Z15txSetParametersPjPh+0xce>
    8802:	80 e0       	ldi	r24, 0x00	; 0
    8804:	88 23       	and	r24, r24
    8806:	21 f0       	breq	.+8      	; 0x8810 <_Z15txSetParametersPjPh+0xda>
					{
						powerToTransmitter(OFF); /* Turn off FET driver */
    8808:	80 e0       	ldi	r24, 0x00	; 0
    880a:	0e 94 70 43 	call	0x86e0	; 0x86e0 <_Z18powerToTransmitterh>
    880e:	03 c0       	rjmp	.+6      	; 0x8816 <_Z15txSetParametersPjPh+0xe0>
					}
					else
					{
						powerToTransmitter(ON); /* Turn on FET driver */
    8810:	81 e0       	ldi	r24, 0x01	; 1
    8812:	0e 94 70 43 	call	0x86e0	; 0x86e0 <_Z18powerToTransmitterh>
					}
				}

				*power_mW = power;
    8816:	2b 81       	ldd	r18, Y+3	; 0x03
    8818:	3c 81       	ldd	r19, Y+4	; 0x04
    881a:	88 85       	ldd	r24, Y+8	; 0x08
    881c:	99 85       	ldd	r25, Y+9	; 0x09
    881e:	fc 01       	movw	r30, r24
    8820:	20 83       	st	Z, r18
    8822:	31 83       	std	Z+1, r19	; 0x01
    8824:	04 c0       	rjmp	.+8      	; 0x882e <_Z15txSetParametersPjPh+0xf8>
			}
			else
			{
				err = TRUE;
    8826:	81 e0       	ldi	r24, 0x01	; 1
    8828:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    882a:	85 ef       	ldi	r24, 0xF5	; 245
    882c:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    882e:	89 81       	ldd	r24, Y+1	; 0x01
    8830:	88 23       	and	r24, r24
    8832:	51 f4       	brne	.+20     	; 0x8848 <_Z15txSetParametersPjPh+0x112>
		{
			if(enableDriverPwr != NULL)
    8834:	8a 85       	ldd	r24, Y+10	; 0x0a
    8836:	9b 85       	ldd	r25, Y+11	; 0x0b
    8838:	89 2b       	or	r24, r25
    883a:	31 f0       	breq	.+12     	; 0x8848 <_Z15txSetParametersPjPh+0x112>
			{
				powerToTransmitter(*enableDriverPwr);
    883c:	8a 85       	ldd	r24, Y+10	; 0x0a
    883e:	9b 85       	ldd	r25, Y+11	; 0x0b
    8840:	fc 01       	movw	r30, r24
    8842:	80 81       	ld	r24, Z
    8844:	0e 94 70 43 	call	0x86e0	; 0x86e0 <_Z18powerToTransmitterh>
			}
		}

		return(code);
    8848:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    884a:	2b 96       	adiw	r28, 0x0b	; 11
    884c:	cd bf       	out	0x3d, r28	; 61
    884e:	de bf       	out	0x3e, r29	; 62
    8850:	df 91       	pop	r29
    8852:	cf 91       	pop	r28
    8854:	08 95       	ret

00008856 <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    8856:	1f 93       	push	r17
    8858:	cf 93       	push	r28
    885a:	df 93       	push	r29
    885c:	00 d0       	rcall	.+0      	; 0x885e <_Z16init_transmitterv+0x8>
    885e:	cd b7       	in	r28, 0x3d	; 61
    8860:	de b7       	in	r29, 0x3e	; 62
		EC code;
		
		DAC0_init();
    8862:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <_Z9DAC0_initv>

		if((code = (EC)si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    8866:	40 e0       	ldi	r20, 0x00	; 0
    8868:	50 e0       	ldi	r21, 0x00	; 0
    886a:	ba 01       	movw	r22, r20
    886c:	80 e4       	ldi	r24, 0x40	; 64
    886e:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <si5351_init>
    8872:	81 11       	cpse	r24, r1
    8874:	2f c0       	rjmp	.+94     	; 0x88d4 <_Z16init_transmitterv+0x7e>
		{
			return( code);
		}

		if((code = txSetParameters(NULL, NULL)))
    8876:	60 e0       	ldi	r22, 0x00	; 0
    8878:	70 e0       	ldi	r23, 0x00	; 0
    887a:	80 e0       	ldi	r24, 0x00	; 0
    887c:	90 e0       	ldi	r25, 0x00	; 0
    887e:	0e 94 9b 43 	call	0x8736	; 0x8736 <_Z15txSetParametersPjPh>
    8882:	81 11       	cpse	r24, r1
    8884:	27 c0       	rjmp	.+78     	; 0x88d4 <_Z16init_transmitterv+0x7e>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    8886:	63 e0       	ldi	r22, 0x03	; 3
    8888:	81 e0       	ldi	r24, 0x01	; 1
    888a:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <si5351_drive_strength>
    888e:	81 11       	cpse	r24, r1
    8890:	21 c0       	rjmp	.+66     	; 0x88d4 <_Z16init_transmitterv+0x7e>
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8892:	60 e0       	ldi	r22, 0x00	; 0
    8894:	81 e0       	ldi	r24, 0x01	; 1
    8896:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <si5351_clock_enable>
    889a:	18 2f       	mov	r17, r24
    889c:	81 11       	cpse	r24, r1
    889e:	18 c0       	rjmp	.+48     	; 0x88d0 <_Z16init_transmitterv+0x7a>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    88a0:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    88a4:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    88a8:	89 83       	std	Y+1, r24	; 0x01
    88aa:	9a 83       	std	Y+2, r25	; 0x02
		if(txSetFrequency((Frequency_Hz*)&g_80m_frequency, TRUE))
    88ac:	61 e0       	ldi	r22, 0x01	; 1
    88ae:	8c e2       	ldi	r24, 0x2C	; 44
    88b0:	90 e4       	ldi	r25, 0x40	; 64
    88b2:	0e 94 35 43 	call	0x866a	; 0x866a <_Z14txSetFrequencyPmh>
    88b6:	81 11       	cpse	r24, r1
    88b8:	0c c0       	rjmp	.+24     	; 0x88d2 <_Z16init_transmitterv+0x7c>
		{
			code = ERROR_CODE_RF_OSCILLATOR_ERROR;
		}
		else
		{
			txSetParameters(&pwr_mW, NULL);
    88ba:	60 e0       	ldi	r22, 0x00	; 0
    88bc:	70 e0       	ldi	r23, 0x00	; 0
    88be:	ce 01       	movw	r24, r28
    88c0:	01 96       	adiw	r24, 0x01	; 1
    88c2:	0e 94 9b 43 	call	0x8736	; 0x8736 <_Z15txSetParametersPjPh>
			g_tx_initialized = TRUE;
    88c6:	81 e0       	ldi	r24, 0x01	; 1
    88c8:	80 93 37 49 	sts	0x4937, r24	; 0x804937 <_ZL16g_tx_initialized>
		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    88cc:	81 2f       	mov	r24, r17
    88ce:	02 c0       	rjmp	.+4      	; 0x88d4 <_Z16init_transmitterv+0x7e>
    88d0:	01 c0       	rjmp	.+2      	; 0x88d4 <_Z16init_transmitterv+0x7e>
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
		if(txSetFrequency((Frequency_Hz*)&g_80m_frequency, TRUE))
		{
			code = ERROR_CODE_RF_OSCILLATOR_ERROR;
    88d2:	82 ed       	ldi	r24, 0xD2	; 210
			txSetParameters(&pwr_mW, NULL);
			g_tx_initialized = TRUE;
		}

		return( code);
	}
    88d4:	0f 90       	pop	r0
    88d6:	0f 90       	pop	r0
    88d8:	df 91       	pop	r29
    88da:	cf 91       	pop	r28
    88dc:	1f 91       	pop	r17
    88de:	08 95       	ret

000088e0 <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    88e0:	cf 93       	push	r28
    88e2:	df 93       	push	r29
    88e4:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    88e6:	89 2b       	or	r24, r25
    88e8:	09 f4       	brne	.+2      	; 0x88ec <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    88ea:	b8 c0       	rjmp	.+368    	; 0x8a5c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    88ec:	ed 91       	ld	r30, X+
    88ee:	fc 91       	ld	r31, X
    88f0:	11 97       	sbiw	r26, 0x01	; 1
    88f2:	e9 38       	cpi	r30, 0x89	; 137
    88f4:	83 e1       	ldi	r24, 0x13	; 19
    88f6:	f8 07       	cpc	r31, r24
    88f8:	14 f4       	brge	.+4      	; 0x88fe <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    88fa:	80 e0       	ldi	r24, 0x00	; 0
    88fc:	01 c0       	rjmp	.+2      	; 0x8900 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    88fe:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    8900:	e9 38       	cpi	r30, 0x89	; 137
    8902:	93 e1       	ldi	r25, 0x13	; 19
    8904:	f9 07       	cpc	r31, r25
    8906:	2c f4       	brge	.+10     	; 0x8912 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    8908:	ff 23       	and	r31, r31
    890a:	2c f4       	brge	.+10     	; 0x8916 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    890c:	e0 e0       	ldi	r30, 0x00	; 0
    890e:	f0 e0       	ldi	r31, 0x00	; 0
    8910:	02 c0       	rjmp	.+4      	; 0x8916 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8912:	e8 e8       	ldi	r30, 0x88	; 136
    8914:	f3 e1       	ldi	r31, 0x13	; 19
    8916:	ef 01       	movw	r28, r30
    8918:	ed 93       	st	X+, r30
    891a:	fc 93       	st	X, r31
    891c:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    891e:	e5 30       	cpi	r30, 0x05	; 5
    8920:	f1 05       	cpc	r31, r1
    8922:	20 f4       	brcc	.+8      	; 0x892c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    8924:	1d 92       	st	X+, r1
    8926:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    8928:	e0 e0       	ldi	r30, 0x00	; 0
    892a:	8d c0       	rjmp	.+282    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    892c:	e2 33       	cpi	r30, 0x32	; 50
    892e:	f1 05       	cpc	r31, r1
    8930:	30 f4       	brcc	.+12     	; 0x893e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    8932:	ea e0       	ldi	r30, 0x0A	; 10
    8934:	f0 e0       	ldi	r31, 0x00	; 0
    8936:	ed 93       	st	X+, r30
    8938:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    893a:	e1 e0       	ldi	r30, 0x01	; 1
    893c:	84 c0       	rjmp	.+264    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    893e:	e6 39       	cpi	r30, 0x96	; 150
    8940:	f1 05       	cpc	r31, r1
    8942:	30 f4       	brcc	.+12     	; 0x8950 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    8944:	e4 e6       	ldi	r30, 0x64	; 100
    8946:	f0 e0       	ldi	r31, 0x00	; 0
    8948:	ed 93       	st	X+, r30
    894a:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    894c:	e2 e0       	ldi	r30, 0x02	; 2
    894e:	7b c0       	rjmp	.+246    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    8950:	ea 3f       	cpi	r30, 0xFA	; 250
    8952:	f1 05       	cpc	r31, r1
    8954:	30 f4       	brcc	.+12     	; 0x8962 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    8956:	e8 ec       	ldi	r30, 0xC8	; 200
    8958:	f0 e0       	ldi	r31, 0x00	; 0
    895a:	ed 93       	st	X+, r30
    895c:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    895e:	e3 e0       	ldi	r30, 0x03	; 3
    8960:	72 c0       	rjmp	.+228    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    8962:	ce 35       	cpi	r28, 0x5E	; 94
    8964:	e1 e0       	ldi	r30, 0x01	; 1
    8966:	de 07       	cpc	r29, r30
    8968:	30 f4       	brcc	.+12     	; 0x8976 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    896a:	ec e2       	ldi	r30, 0x2C	; 44
    896c:	f1 e0       	ldi	r31, 0x01	; 1
    896e:	ed 93       	st	X+, r30
    8970:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    8972:	e4 e0       	ldi	r30, 0x04	; 4
    8974:	68 c0       	rjmp	.+208    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    8976:	c2 3c       	cpi	r28, 0xC2	; 194
    8978:	f1 e0       	ldi	r31, 0x01	; 1
    897a:	df 07       	cpc	r29, r31
    897c:	30 f4       	brcc	.+12     	; 0x898a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    897e:	e0 e9       	ldi	r30, 0x90	; 144
    8980:	f1 e0       	ldi	r31, 0x01	; 1
    8982:	ed 93       	st	X+, r30
    8984:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    8986:	e5 e0       	ldi	r30, 0x05	; 5
    8988:	5e c0       	rjmp	.+188    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    898a:	c6 32       	cpi	r28, 0x26	; 38
    898c:	92 e0       	ldi	r25, 0x02	; 2
    898e:	d9 07       	cpc	r29, r25
    8990:	30 f4       	brcc	.+12     	; 0x899e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    8992:	e4 ef       	ldi	r30, 0xF4	; 244
    8994:	f1 e0       	ldi	r31, 0x01	; 1
    8996:	ed 93       	st	X+, r30
    8998:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    899a:	e6 e0       	ldi	r30, 0x06	; 6
    899c:	54 c0       	rjmp	.+168    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    899e:	ca 38       	cpi	r28, 0x8A	; 138
    89a0:	e2 e0       	ldi	r30, 0x02	; 2
    89a2:	de 07       	cpc	r29, r30
    89a4:	30 f4       	brcc	.+12     	; 0x89b2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    89a6:	e8 e5       	ldi	r30, 0x58	; 88
    89a8:	f2 e0       	ldi	r31, 0x02	; 2
    89aa:	ed 93       	st	X+, r30
    89ac:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    89ae:	e7 e0       	ldi	r30, 0x07	; 7
    89b0:	4a c0       	rjmp	.+148    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    89b2:	c4 38       	cpi	r28, 0x84	; 132
    89b4:	f3 e0       	ldi	r31, 0x03	; 3
    89b6:	df 07       	cpc	r29, r31
    89b8:	30 f4       	brcc	.+12     	; 0x89c6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    89ba:	e0 e2       	ldi	r30, 0x20	; 32
    89bc:	f3 e0       	ldi	r31, 0x03	; 3
    89be:	ed 93       	st	X+, r30
    89c0:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    89c2:	e8 e0       	ldi	r30, 0x08	; 8
    89c4:	40 c0       	rjmp	.+128    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    89c6:	c2 3e       	cpi	r28, 0xE2	; 226
    89c8:	94 e0       	ldi	r25, 0x04	; 4
    89ca:	d9 07       	cpc	r29, r25
    89cc:	30 f4       	brcc	.+12     	; 0x89da <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    89ce:	e8 ee       	ldi	r30, 0xE8	; 232
    89d0:	f3 e0       	ldi	r31, 0x03	; 3
    89d2:	ed 93       	st	X+, r30
    89d4:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    89d6:	e9 e0       	ldi	r30, 0x09	; 9
    89d8:	36 c0       	rjmp	.+108    	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    89da:	c6 3d       	cpi	r28, 0xD6	; 214
    89dc:	e6 e0       	ldi	r30, 0x06	; 6
    89de:	de 07       	cpc	r29, r30
    89e0:	30 f4       	brcc	.+12     	; 0x89ee <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    89e2:	ec ed       	ldi	r30, 0xDC	; 220
    89e4:	f5 e0       	ldi	r31, 0x05	; 5
    89e6:	ed 93       	st	X+, r30
    89e8:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    89ea:	ea e0       	ldi	r30, 0x0A	; 10
    89ec:	2c c0       	rjmp	.+88     	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    89ee:	ca 3c       	cpi	r28, 0xCA	; 202
    89f0:	f8 e0       	ldi	r31, 0x08	; 8
    89f2:	df 07       	cpc	r29, r31
    89f4:	30 f4       	brcc	.+12     	; 0x8a02 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    89f6:	e0 ed       	ldi	r30, 0xD0	; 208
    89f8:	f7 e0       	ldi	r31, 0x07	; 7
    89fa:	ed 93       	st	X+, r30
    89fc:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    89fe:	eb e0       	ldi	r30, 0x0B	; 11
    8a00:	22 c0       	rjmp	.+68     	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    8a02:	ce 3b       	cpi	r28, 0xBE	; 190
    8a04:	9a e0       	ldi	r25, 0x0A	; 10
    8a06:	d9 07       	cpc	r29, r25
    8a08:	30 f4       	brcc	.+12     	; 0x8a16 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    8a0a:	e4 ec       	ldi	r30, 0xC4	; 196
    8a0c:	f9 e0       	ldi	r31, 0x09	; 9
    8a0e:	ed 93       	st	X+, r30
    8a10:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    8a12:	ec e0       	ldi	r30, 0x0C	; 12
    8a14:	18 c0       	rjmp	.+48     	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    8a16:	cc 3a       	cpi	r28, 0xAC	; 172
    8a18:	ed e0       	ldi	r30, 0x0D	; 13
    8a1a:	de 07       	cpc	r29, r30
    8a1c:	30 f4       	brcc	.+12     	; 0x8a2a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    8a1e:	e8 eb       	ldi	r30, 0xB8	; 184
    8a20:	fb e0       	ldi	r31, 0x0B	; 11
    8a22:	ed 93       	st	X+, r30
    8a24:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    8a26:	ed e0       	ldi	r30, 0x0D	; 13
    8a28:	0e c0       	rjmp	.+28     	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    8a2a:	c4 39       	cpi	r28, 0x94	; 148
    8a2c:	d1 41       	sbci	r29, 0x11	; 17
    8a2e:	30 f4       	brcc	.+12     	; 0x8a3c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    8a30:	e0 ea       	ldi	r30, 0xA0	; 160
    8a32:	ff e0       	ldi	r31, 0x0F	; 15
    8a34:	ed 93       	st	X+, r30
    8a36:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    8a38:	ee e0       	ldi	r30, 0x0E	; 14
    8a3a:	05 c0       	rjmp	.+10     	; 0x8a46 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    8a3c:	e8 e8       	ldi	r30, 0x88	; 136
    8a3e:	f3 e1       	ldi	r31, 0x13	; 19
    8a40:	ed 93       	st	X+, r30
    8a42:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    8a44:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    8a46:	f0 e0       	ldi	r31, 0x00	; 0
    8a48:	e9 5c       	subi	r30, 0xC9	; 201
    8a4a:	ff 4b       	sbci	r31, 0xBF	; 191
    8a4c:	90 81       	ld	r25, Z
    8a4e:	fb 01       	movw	r30, r22
    8a50:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    8a52:	fa 01       	movw	r30, r20
    8a54:	10 82       	st	Z, r1
	*modLevelLow = 0;
    8a56:	f9 01       	movw	r30, r18
    8a58:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    8a5a:	01 c0       	rjmp	.+2      	; 0x8a5e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    8a5c:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    8a5e:	df 91       	pop	r29
    8a60:	cf 91       	pop	r28
    8a62:	08 95       	ret

00008a64 <_Z18txIsAntennaForBandv>:

/**
 */
BOOL __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    8a64:	cf 93       	push	r28
    8a66:	df 93       	push	r29
    8a68:	1f 92       	push	r1
    8a6a:	cd b7       	in	r28, 0x3d	; 61
    8a6c:	de b7       	in	r29, 0x3e	; 62
	BOOL result = FALSE;
    8a6e:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    8a70:	80 91 cb 45 	lds	r24, 0x45CB	; 0x8045cb <g_antenna_connect_state>
    8a74:	88 2f       	mov	r24, r24
    8a76:	90 e0       	ldi	r25, 0x00	; 0
    8a78:	02 97       	sbiw	r24, 0x02	; 2
    8a7a:	09 f0       	breq	.+2      	; 0x8a7e <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    8a7c:	03 c0       	rjmp	.+6      	; 0x8a84 <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = TRUE;
    8a7e:	81 e0       	ldi	r24, 0x01	; 1
    8a80:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    8a82:	00 00       	nop

		}
		break;
	}

	return( result);
    8a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    8a86:	0f 90       	pop	r0
    8a88:	df 91       	pop	r29
    8a8a:	cf 91       	pop	r28
    8a8c:	08 95       	ret

00008a8e <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_enable_rx()
{
	USART4.CTRLB |= USART_RXEN_bm;
    8a8e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    8a92:	08 95       	ret

00008a94 <USART1_init>:
    8a94:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <__floatunsisf>
    8a98:	20 e0       	ldi	r18, 0x00	; 0
    8a9a:	30 e0       	ldi	r19, 0x00	; 0
    8a9c:	40 e8       	ldi	r20, 0x80	; 128
    8a9e:	51 e4       	ldi	r21, 0x41	; 65
    8aa0:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <__mulsf3>
    8aa4:	9b 01       	movw	r18, r22
    8aa6:	ac 01       	movw	r20, r24
    8aa8:	60 e0       	ldi	r22, 0x00	; 0
    8aaa:	74 e2       	ldi	r23, 0x24	; 36
    8aac:	84 e7       	ldi	r24, 0x74	; 116
    8aae:	9d e4       	ldi	r25, 0x4D	; 77
    8ab0:	0e 94 42 46 	call	0x8c84	; 0x8c84 <__divsf3>
    8ab4:	20 e0       	ldi	r18, 0x00	; 0
    8ab6:	30 e0       	ldi	r19, 0x00	; 0
    8ab8:	40 e0       	ldi	r20, 0x00	; 0
    8aba:	5f e3       	ldi	r21, 0x3F	; 63
    8abc:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <__addsf3>
    8ac0:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <__fixunssfsi>
    8ac4:	e0 e2       	ldi	r30, 0x20	; 32
    8ac6:	f8 e0       	ldi	r31, 0x08	; 8
    8ac8:	60 87       	std	Z+8, r22	; 0x08
    8aca:	71 87       	std	Z+9, r23	; 0x09
    8acc:	80 e8       	ldi	r24, 0x80	; 128
    8ace:	85 83       	std	Z+5, r24	; 0x05
    8ad0:	80 ec       	ldi	r24, 0xC0	; 192
    8ad2:	86 83       	std	Z+6, r24	; 0x06
    8ad4:	80 e0       	ldi	r24, 0x00	; 0
    8ad6:	08 95       	ret

00008ad8 <USART1_enable_tx>:
    8ad8:	e0 e2       	ldi	r30, 0x20	; 32
    8ada:	f8 e0       	ldi	r31, 0x08	; 8
    8adc:	86 81       	ldd	r24, Z+6	; 0x06
    8ade:	80 64       	ori	r24, 0x40	; 64
    8ae0:	86 83       	std	Z+6, r24	; 0x06
    8ae2:	85 81       	ldd	r24, Z+5	; 0x05
    8ae4:	80 62       	ori	r24, 0x20	; 32
    8ae6:	85 83       	std	Z+5, r24	; 0x05
    8ae8:	08 95       	ret

00008aea <USART1_disable>:
    8aea:	e0 e2       	ldi	r30, 0x20	; 32
    8aec:	f8 e0       	ldi	r31, 0x08	; 8
    8aee:	86 81       	ldd	r24, Z+6	; 0x06
    8af0:	8f 73       	andi	r24, 0x3F	; 63
    8af2:	86 83       	std	Z+6, r24	; 0x06
    8af4:	08 95       	ret

00008af6 <USART1_get_data>:
    8af6:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    8afa:	08 95       	ret

00008afc <USART4_init>:
    8afc:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <__floatunsisf>
    8b00:	20 e0       	ldi	r18, 0x00	; 0
    8b02:	30 e0       	ldi	r19, 0x00	; 0
    8b04:	40 e8       	ldi	r20, 0x80	; 128
    8b06:	51 e4       	ldi	r21, 0x41	; 65
    8b08:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <__mulsf3>
    8b0c:	9b 01       	movw	r18, r22
    8b0e:	ac 01       	movw	r20, r24
    8b10:	60 e0       	ldi	r22, 0x00	; 0
    8b12:	74 e2       	ldi	r23, 0x24	; 36
    8b14:	84 e7       	ldi	r24, 0x74	; 116
    8b16:	9d e4       	ldi	r25, 0x4D	; 77
    8b18:	0e 94 42 46 	call	0x8c84	; 0x8c84 <__divsf3>
    8b1c:	20 e0       	ldi	r18, 0x00	; 0
    8b1e:	30 e0       	ldi	r19, 0x00	; 0
    8b20:	40 e0       	ldi	r20, 0x00	; 0
    8b22:	5f e3       	ldi	r21, 0x3F	; 63
    8b24:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <__addsf3>
    8b28:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <__fixunssfsi>
    8b2c:	e0 e8       	ldi	r30, 0x80	; 128
    8b2e:	f8 e0       	ldi	r31, 0x08	; 8
    8b30:	60 87       	std	Z+8, r22	; 0x08
    8b32:	71 87       	std	Z+9, r23	; 0x09
    8b34:	80 e8       	ldi	r24, 0x80	; 128
    8b36:	85 83       	std	Z+5, r24	; 0x05
    8b38:	80 ec       	ldi	r24, 0xC0	; 192
    8b3a:	86 83       	std	Z+6, r24	; 0x06
    8b3c:	80 e0       	ldi	r24, 0x00	; 0
    8b3e:	08 95       	ret

00008b40 <USART4_enable_tx>:
 *
 * \return Nothing
 */
void USART4_enable_tx()
{
	USART4.CTRLB |= USART_TXEN_bm;
    8b40:	e0 e8       	ldi	r30, 0x80	; 128
    8b42:	f8 e0       	ldi	r31, 0x08	; 8
    8b44:	86 81       	ldd	r24, Z+6	; 0x06
    8b46:	80 64       	ori	r24, 0x40	; 64
    8b48:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLA |= 1 << USART_DREIE_bp; /* Transmit Data Ready Interrupt Enable: enable */
    8b4a:	85 81       	ldd	r24, Z+5	; 0x05
    8b4c:	80 62       	ori	r24, 0x20	; 32
    8b4e:	85 83       	std	Z+5, r24	; 0x05
    8b50:	08 95       	ret

00008b52 <USART4_disable>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    8b52:	e0 e8       	ldi	r30, 0x80	; 128
    8b54:	f8 e0       	ldi	r31, 0x08	; 8
    8b56:	86 81       	ldd	r24, Z+6	; 0x06
    8b58:	8f 73       	andi	r24, 0x3F	; 63
    8b5a:	86 83       	std	Z+6, r24	; 0x06
    8b5c:	08 95       	ret

00008b5e <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    8b5e:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    8b62:	08 95       	ret

00008b64 <_Z7timeDifmm>:
    (ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    ((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
  }

  return result;
}
    8b64:	26 17       	cp	r18, r22
    8b66:	37 07       	cpc	r19, r23
    8b68:	48 07       	cpc	r20, r24
    8b6a:	59 07       	cpc	r21, r25
    8b6c:	28 f4       	brcc	.+10     	; 0x8b78 <_Z7timeDifmm+0x14>
    8b6e:	62 1b       	sub	r22, r18
    8b70:	73 0b       	sbc	r23, r19
    8b72:	84 0b       	sbc	r24, r20
    8b74:	95 0b       	sbc	r25, r21
    8b76:	08 95       	ret
    8b78:	62 1b       	sub	r22, r18
    8b7a:	73 0b       	sbc	r23, r19
    8b7c:	84 0b       	sbc	r24, r20
    8b7e:	95 0b       	sbc	r25, r21
    8b80:	08 95       	ret

00008b82 <_Z11only_digitsPc>:

/** 
 * Checks a string to see if it contains only numerical characters
 */
BOOL only_digits(char *s)
{
    8b82:	fc 01       	movw	r30, r24
	while(*s)
    8b84:	20 81       	ld	r18, Z
    8b86:	22 23       	and	r18, r18
    8b88:	49 f0       	breq	.+18     	; 0x8b9c <_Z11only_digitsPc+0x1a>
	{
		if(isdigit(*s++) == 0)
    8b8a:	31 96       	adiw	r30, 0x01	; 1
    8b8c:	30 e0       	ldi	r19, 0x00	; 0
    8b8e:	20 53       	subi	r18, 0x30	; 48
    8b90:	31 09       	sbc	r19, r1
    8b92:	2a 30       	cpi	r18, 0x0A	; 10
    8b94:	31 05       	cpc	r19, r1
    8b96:	b0 f3       	brcs	.-20     	; 0x8b84 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    8b98:	80 e0       	ldi	r24, 0x00	; 0
    8b9a:	08 95       	ret
		}
	}

	return( TRUE);
    8b9c:	81 e0       	ldi	r24, 0x01	; 1
}
    8b9e:	08 95       	ret

00008ba0 <__subsf3>:
    8ba0:	50 58       	subi	r21, 0x80	; 128

00008ba2 <__addsf3>:
    8ba2:	bb 27       	eor	r27, r27
    8ba4:	aa 27       	eor	r26, r26
    8ba6:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <__addsf3x>
    8baa:	0c 94 62 47 	jmp	0x8ec4	; 0x8ec4 <__fp_round>
    8bae:	0e 94 54 47 	call	0x8ea8	; 0x8ea8 <__fp_pscA>
    8bb2:	38 f0       	brcs	.+14     	; 0x8bc2 <__addsf3+0x20>
    8bb4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <__fp_pscB>
    8bb8:	20 f0       	brcs	.+8      	; 0x8bc2 <__addsf3+0x20>
    8bba:	39 f4       	brne	.+14     	; 0x8bca <__addsf3+0x28>
    8bbc:	9f 3f       	cpi	r25, 0xFF	; 255
    8bbe:	19 f4       	brne	.+6      	; 0x8bc6 <__addsf3+0x24>
    8bc0:	26 f4       	brtc	.+8      	; 0x8bca <__addsf3+0x28>
    8bc2:	0c 94 51 47 	jmp	0x8ea2	; 0x8ea2 <__fp_nan>
    8bc6:	0e f4       	brtc	.+2      	; 0x8bca <__addsf3+0x28>
    8bc8:	e0 95       	com	r30
    8bca:	e7 fb       	bst	r30, 7
    8bcc:	0c 94 4b 47 	jmp	0x8e96	; 0x8e96 <__fp_inf>

00008bd0 <__addsf3x>:
    8bd0:	e9 2f       	mov	r30, r25
    8bd2:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <__fp_split3>
    8bd6:	58 f3       	brcs	.-42     	; 0x8bae <__addsf3+0xc>
    8bd8:	ba 17       	cp	r27, r26
    8bda:	62 07       	cpc	r22, r18
    8bdc:	73 07       	cpc	r23, r19
    8bde:	84 07       	cpc	r24, r20
    8be0:	95 07       	cpc	r25, r21
    8be2:	20 f0       	brcs	.+8      	; 0x8bec <__addsf3x+0x1c>
    8be4:	79 f4       	brne	.+30     	; 0x8c04 <__addsf3x+0x34>
    8be6:	a6 f5       	brtc	.+104    	; 0x8c50 <__addsf3x+0x80>
    8be8:	0c 94 95 47 	jmp	0x8f2a	; 0x8f2a <__fp_zero>
    8bec:	0e f4       	brtc	.+2      	; 0x8bf0 <__addsf3x+0x20>
    8bee:	e0 95       	com	r30
    8bf0:	0b 2e       	mov	r0, r27
    8bf2:	ba 2f       	mov	r27, r26
    8bf4:	a0 2d       	mov	r26, r0
    8bf6:	0b 01       	movw	r0, r22
    8bf8:	b9 01       	movw	r22, r18
    8bfa:	90 01       	movw	r18, r0
    8bfc:	0c 01       	movw	r0, r24
    8bfe:	ca 01       	movw	r24, r20
    8c00:	a0 01       	movw	r20, r0
    8c02:	11 24       	eor	r1, r1
    8c04:	ff 27       	eor	r31, r31
    8c06:	59 1b       	sub	r21, r25
    8c08:	99 f0       	breq	.+38     	; 0x8c30 <__addsf3x+0x60>
    8c0a:	59 3f       	cpi	r21, 0xF9	; 249
    8c0c:	50 f4       	brcc	.+20     	; 0x8c22 <__addsf3x+0x52>
    8c0e:	50 3e       	cpi	r21, 0xE0	; 224
    8c10:	68 f1       	brcs	.+90     	; 0x8c6c <__addsf3x+0x9c>
    8c12:	1a 16       	cp	r1, r26
    8c14:	f0 40       	sbci	r31, 0x00	; 0
    8c16:	a2 2f       	mov	r26, r18
    8c18:	23 2f       	mov	r18, r19
    8c1a:	34 2f       	mov	r19, r20
    8c1c:	44 27       	eor	r20, r20
    8c1e:	58 5f       	subi	r21, 0xF8	; 248
    8c20:	f3 cf       	rjmp	.-26     	; 0x8c08 <__addsf3x+0x38>
    8c22:	46 95       	lsr	r20
    8c24:	37 95       	ror	r19
    8c26:	27 95       	ror	r18
    8c28:	a7 95       	ror	r26
    8c2a:	f0 40       	sbci	r31, 0x00	; 0
    8c2c:	53 95       	inc	r21
    8c2e:	c9 f7       	brne	.-14     	; 0x8c22 <__addsf3x+0x52>
    8c30:	7e f4       	brtc	.+30     	; 0x8c50 <__addsf3x+0x80>
    8c32:	1f 16       	cp	r1, r31
    8c34:	ba 0b       	sbc	r27, r26
    8c36:	62 0b       	sbc	r22, r18
    8c38:	73 0b       	sbc	r23, r19
    8c3a:	84 0b       	sbc	r24, r20
    8c3c:	ba f0       	brmi	.+46     	; 0x8c6c <__addsf3x+0x9c>
    8c3e:	91 50       	subi	r25, 0x01	; 1
    8c40:	a1 f0       	breq	.+40     	; 0x8c6a <__addsf3x+0x9a>
    8c42:	ff 0f       	add	r31, r31
    8c44:	bb 1f       	adc	r27, r27
    8c46:	66 1f       	adc	r22, r22
    8c48:	77 1f       	adc	r23, r23
    8c4a:	88 1f       	adc	r24, r24
    8c4c:	c2 f7       	brpl	.-16     	; 0x8c3e <__addsf3x+0x6e>
    8c4e:	0e c0       	rjmp	.+28     	; 0x8c6c <__addsf3x+0x9c>
    8c50:	ba 0f       	add	r27, r26
    8c52:	62 1f       	adc	r22, r18
    8c54:	73 1f       	adc	r23, r19
    8c56:	84 1f       	adc	r24, r20
    8c58:	48 f4       	brcc	.+18     	; 0x8c6c <__addsf3x+0x9c>
    8c5a:	87 95       	ror	r24
    8c5c:	77 95       	ror	r23
    8c5e:	67 95       	ror	r22
    8c60:	b7 95       	ror	r27
    8c62:	f7 95       	ror	r31
    8c64:	9e 3f       	cpi	r25, 0xFE	; 254
    8c66:	08 f0       	brcs	.+2      	; 0x8c6a <__addsf3x+0x9a>
    8c68:	b0 cf       	rjmp	.-160    	; 0x8bca <__addsf3+0x28>
    8c6a:	93 95       	inc	r25
    8c6c:	88 0f       	add	r24, r24
    8c6e:	08 f0       	brcs	.+2      	; 0x8c72 <__addsf3x+0xa2>
    8c70:	99 27       	eor	r25, r25
    8c72:	ee 0f       	add	r30, r30
    8c74:	97 95       	ror	r25
    8c76:	87 95       	ror	r24
    8c78:	08 95       	ret

00008c7a <__cmpsf2>:
    8c7a:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <__fp_cmp>
    8c7e:	08 f4       	brcc	.+2      	; 0x8c82 <__cmpsf2+0x8>
    8c80:	81 e0       	ldi	r24, 0x01	; 1
    8c82:	08 95       	ret

00008c84 <__divsf3>:
    8c84:	0e 94 56 46 	call	0x8cac	; 0x8cac <__divsf3x>
    8c88:	0c 94 62 47 	jmp	0x8ec4	; 0x8ec4 <__fp_round>
    8c8c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <__fp_pscB>
    8c90:	58 f0       	brcs	.+22     	; 0x8ca8 <__divsf3+0x24>
    8c92:	0e 94 54 47 	call	0x8ea8	; 0x8ea8 <__fp_pscA>
    8c96:	40 f0       	brcs	.+16     	; 0x8ca8 <__divsf3+0x24>
    8c98:	29 f4       	brne	.+10     	; 0x8ca4 <__divsf3+0x20>
    8c9a:	5f 3f       	cpi	r21, 0xFF	; 255
    8c9c:	29 f0       	breq	.+10     	; 0x8ca8 <__divsf3+0x24>
    8c9e:	0c 94 4b 47 	jmp	0x8e96	; 0x8e96 <__fp_inf>
    8ca2:	51 11       	cpse	r21, r1
    8ca4:	0c 94 96 47 	jmp	0x8f2c	; 0x8f2c <__fp_szero>
    8ca8:	0c 94 51 47 	jmp	0x8ea2	; 0x8ea2 <__fp_nan>

00008cac <__divsf3x>:
    8cac:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <__fp_split3>
    8cb0:	68 f3       	brcs	.-38     	; 0x8c8c <__divsf3+0x8>

00008cb2 <__divsf3_pse>:
    8cb2:	99 23       	and	r25, r25
    8cb4:	b1 f3       	breq	.-20     	; 0x8ca2 <__divsf3+0x1e>
    8cb6:	55 23       	and	r21, r21
    8cb8:	91 f3       	breq	.-28     	; 0x8c9e <__divsf3+0x1a>
    8cba:	95 1b       	sub	r25, r21
    8cbc:	55 0b       	sbc	r21, r21
    8cbe:	bb 27       	eor	r27, r27
    8cc0:	aa 27       	eor	r26, r26
    8cc2:	62 17       	cp	r22, r18
    8cc4:	73 07       	cpc	r23, r19
    8cc6:	84 07       	cpc	r24, r20
    8cc8:	38 f0       	brcs	.+14     	; 0x8cd8 <__divsf3_pse+0x26>
    8cca:	9f 5f       	subi	r25, 0xFF	; 255
    8ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    8cce:	22 0f       	add	r18, r18
    8cd0:	33 1f       	adc	r19, r19
    8cd2:	44 1f       	adc	r20, r20
    8cd4:	aa 1f       	adc	r26, r26
    8cd6:	a9 f3       	breq	.-22     	; 0x8cc2 <__divsf3_pse+0x10>
    8cd8:	35 d0       	rcall	.+106    	; 0x8d44 <__divsf3_pse+0x92>
    8cda:	0e 2e       	mov	r0, r30
    8cdc:	3a f0       	brmi	.+14     	; 0x8cec <__divsf3_pse+0x3a>
    8cde:	e0 e8       	ldi	r30, 0x80	; 128
    8ce0:	32 d0       	rcall	.+100    	; 0x8d46 <__divsf3_pse+0x94>
    8ce2:	91 50       	subi	r25, 0x01	; 1
    8ce4:	50 40       	sbci	r21, 0x00	; 0
    8ce6:	e6 95       	lsr	r30
    8ce8:	00 1c       	adc	r0, r0
    8cea:	ca f7       	brpl	.-14     	; 0x8cde <__divsf3_pse+0x2c>
    8cec:	2b d0       	rcall	.+86     	; 0x8d44 <__divsf3_pse+0x92>
    8cee:	fe 2f       	mov	r31, r30
    8cf0:	29 d0       	rcall	.+82     	; 0x8d44 <__divsf3_pse+0x92>
    8cf2:	66 0f       	add	r22, r22
    8cf4:	77 1f       	adc	r23, r23
    8cf6:	88 1f       	adc	r24, r24
    8cf8:	bb 1f       	adc	r27, r27
    8cfa:	26 17       	cp	r18, r22
    8cfc:	37 07       	cpc	r19, r23
    8cfe:	48 07       	cpc	r20, r24
    8d00:	ab 07       	cpc	r26, r27
    8d02:	b0 e8       	ldi	r27, 0x80	; 128
    8d04:	09 f0       	breq	.+2      	; 0x8d08 <__divsf3_pse+0x56>
    8d06:	bb 0b       	sbc	r27, r27
    8d08:	80 2d       	mov	r24, r0
    8d0a:	bf 01       	movw	r22, r30
    8d0c:	ff 27       	eor	r31, r31
    8d0e:	93 58       	subi	r25, 0x83	; 131
    8d10:	5f 4f       	sbci	r21, 0xFF	; 255
    8d12:	3a f0       	brmi	.+14     	; 0x8d22 <__divsf3_pse+0x70>
    8d14:	9e 3f       	cpi	r25, 0xFE	; 254
    8d16:	51 05       	cpc	r21, r1
    8d18:	78 f0       	brcs	.+30     	; 0x8d38 <__divsf3_pse+0x86>
    8d1a:	0c 94 4b 47 	jmp	0x8e96	; 0x8e96 <__fp_inf>
    8d1e:	0c 94 96 47 	jmp	0x8f2c	; 0x8f2c <__fp_szero>
    8d22:	5f 3f       	cpi	r21, 0xFF	; 255
    8d24:	e4 f3       	brlt	.-8      	; 0x8d1e <__divsf3_pse+0x6c>
    8d26:	98 3e       	cpi	r25, 0xE8	; 232
    8d28:	d4 f3       	brlt	.-12     	; 0x8d1e <__divsf3_pse+0x6c>
    8d2a:	86 95       	lsr	r24
    8d2c:	77 95       	ror	r23
    8d2e:	67 95       	ror	r22
    8d30:	b7 95       	ror	r27
    8d32:	f7 95       	ror	r31
    8d34:	9f 5f       	subi	r25, 0xFF	; 255
    8d36:	c9 f7       	brne	.-14     	; 0x8d2a <__divsf3_pse+0x78>
    8d38:	88 0f       	add	r24, r24
    8d3a:	91 1d       	adc	r25, r1
    8d3c:	96 95       	lsr	r25
    8d3e:	87 95       	ror	r24
    8d40:	97 f9       	bld	r25, 7
    8d42:	08 95       	ret
    8d44:	e1 e0       	ldi	r30, 0x01	; 1
    8d46:	66 0f       	add	r22, r22
    8d48:	77 1f       	adc	r23, r23
    8d4a:	88 1f       	adc	r24, r24
    8d4c:	bb 1f       	adc	r27, r27
    8d4e:	62 17       	cp	r22, r18
    8d50:	73 07       	cpc	r23, r19
    8d52:	84 07       	cpc	r24, r20
    8d54:	ba 07       	cpc	r27, r26
    8d56:	20 f0       	brcs	.+8      	; 0x8d60 <__divsf3_pse+0xae>
    8d58:	62 1b       	sub	r22, r18
    8d5a:	73 0b       	sbc	r23, r19
    8d5c:	84 0b       	sbc	r24, r20
    8d5e:	ba 0b       	sbc	r27, r26
    8d60:	ee 1f       	adc	r30, r30
    8d62:	88 f7       	brcc	.-30     	; 0x8d46 <__divsf3_pse+0x94>
    8d64:	e0 95       	com	r30
    8d66:	08 95       	ret

00008d68 <__fixsfsi>:
    8d68:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <__fixunssfsi>
    8d6c:	68 94       	set
    8d6e:	b1 11       	cpse	r27, r1
    8d70:	0c 94 96 47 	jmp	0x8f2c	; 0x8f2c <__fp_szero>
    8d74:	08 95       	ret

00008d76 <__fixunssfsi>:
    8d76:	0e 94 7b 47 	call	0x8ef6	; 0x8ef6 <__fp_splitA>
    8d7a:	88 f0       	brcs	.+34     	; 0x8d9e <__fixunssfsi+0x28>
    8d7c:	9f 57       	subi	r25, 0x7F	; 127
    8d7e:	98 f0       	brcs	.+38     	; 0x8da6 <__fixunssfsi+0x30>
    8d80:	b9 2f       	mov	r27, r25
    8d82:	99 27       	eor	r25, r25
    8d84:	b7 51       	subi	r27, 0x17	; 23
    8d86:	b0 f0       	brcs	.+44     	; 0x8db4 <__fixunssfsi+0x3e>
    8d88:	e1 f0       	breq	.+56     	; 0x8dc2 <__fixunssfsi+0x4c>
    8d8a:	66 0f       	add	r22, r22
    8d8c:	77 1f       	adc	r23, r23
    8d8e:	88 1f       	adc	r24, r24
    8d90:	99 1f       	adc	r25, r25
    8d92:	1a f0       	brmi	.+6      	; 0x8d9a <__fixunssfsi+0x24>
    8d94:	ba 95       	dec	r27
    8d96:	c9 f7       	brne	.-14     	; 0x8d8a <__fixunssfsi+0x14>
    8d98:	14 c0       	rjmp	.+40     	; 0x8dc2 <__fixunssfsi+0x4c>
    8d9a:	b1 30       	cpi	r27, 0x01	; 1
    8d9c:	91 f0       	breq	.+36     	; 0x8dc2 <__fixunssfsi+0x4c>
    8d9e:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <__fp_zero>
    8da2:	b1 e0       	ldi	r27, 0x01	; 1
    8da4:	08 95       	ret
    8da6:	0c 94 95 47 	jmp	0x8f2a	; 0x8f2a <__fp_zero>
    8daa:	67 2f       	mov	r22, r23
    8dac:	78 2f       	mov	r23, r24
    8dae:	88 27       	eor	r24, r24
    8db0:	b8 5f       	subi	r27, 0xF8	; 248
    8db2:	39 f0       	breq	.+14     	; 0x8dc2 <__fixunssfsi+0x4c>
    8db4:	b9 3f       	cpi	r27, 0xF9	; 249
    8db6:	cc f3       	brlt	.-14     	; 0x8daa <__fixunssfsi+0x34>
    8db8:	86 95       	lsr	r24
    8dba:	77 95       	ror	r23
    8dbc:	67 95       	ror	r22
    8dbe:	b3 95       	inc	r27
    8dc0:	d9 f7       	brne	.-10     	; 0x8db8 <__fixunssfsi+0x42>
    8dc2:	3e f4       	brtc	.+14     	; 0x8dd2 <__fixunssfsi+0x5c>
    8dc4:	90 95       	com	r25
    8dc6:	80 95       	com	r24
    8dc8:	70 95       	com	r23
    8dca:	61 95       	neg	r22
    8dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    8dce:	8f 4f       	sbci	r24, 0xFF	; 255
    8dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    8dd2:	08 95       	ret

00008dd4 <__floatunsisf>:
    8dd4:	e8 94       	clt
    8dd6:	09 c0       	rjmp	.+18     	; 0x8dea <__floatsisf+0x12>

00008dd8 <__floatsisf>:
    8dd8:	97 fb       	bst	r25, 7
    8dda:	3e f4       	brtc	.+14     	; 0x8dea <__floatsisf+0x12>
    8ddc:	90 95       	com	r25
    8dde:	80 95       	com	r24
    8de0:	70 95       	com	r23
    8de2:	61 95       	neg	r22
    8de4:	7f 4f       	sbci	r23, 0xFF	; 255
    8de6:	8f 4f       	sbci	r24, 0xFF	; 255
    8de8:	9f 4f       	sbci	r25, 0xFF	; 255
    8dea:	99 23       	and	r25, r25
    8dec:	a9 f0       	breq	.+42     	; 0x8e18 <__floatsisf+0x40>
    8dee:	f9 2f       	mov	r31, r25
    8df0:	96 e9       	ldi	r25, 0x96	; 150
    8df2:	bb 27       	eor	r27, r27
    8df4:	93 95       	inc	r25
    8df6:	f6 95       	lsr	r31
    8df8:	87 95       	ror	r24
    8dfa:	77 95       	ror	r23
    8dfc:	67 95       	ror	r22
    8dfe:	b7 95       	ror	r27
    8e00:	f1 11       	cpse	r31, r1
    8e02:	f8 cf       	rjmp	.-16     	; 0x8df4 <__floatsisf+0x1c>
    8e04:	fa f4       	brpl	.+62     	; 0x8e44 <__floatsisf+0x6c>
    8e06:	bb 0f       	add	r27, r27
    8e08:	11 f4       	brne	.+4      	; 0x8e0e <__floatsisf+0x36>
    8e0a:	60 ff       	sbrs	r22, 0
    8e0c:	1b c0       	rjmp	.+54     	; 0x8e44 <__floatsisf+0x6c>
    8e0e:	6f 5f       	subi	r22, 0xFF	; 255
    8e10:	7f 4f       	sbci	r23, 0xFF	; 255
    8e12:	8f 4f       	sbci	r24, 0xFF	; 255
    8e14:	9f 4f       	sbci	r25, 0xFF	; 255
    8e16:	16 c0       	rjmp	.+44     	; 0x8e44 <__floatsisf+0x6c>
    8e18:	88 23       	and	r24, r24
    8e1a:	11 f0       	breq	.+4      	; 0x8e20 <__floatsisf+0x48>
    8e1c:	96 e9       	ldi	r25, 0x96	; 150
    8e1e:	11 c0       	rjmp	.+34     	; 0x8e42 <__floatsisf+0x6a>
    8e20:	77 23       	and	r23, r23
    8e22:	21 f0       	breq	.+8      	; 0x8e2c <__floatsisf+0x54>
    8e24:	9e e8       	ldi	r25, 0x8E	; 142
    8e26:	87 2f       	mov	r24, r23
    8e28:	76 2f       	mov	r23, r22
    8e2a:	05 c0       	rjmp	.+10     	; 0x8e36 <__floatsisf+0x5e>
    8e2c:	66 23       	and	r22, r22
    8e2e:	71 f0       	breq	.+28     	; 0x8e4c <__floatsisf+0x74>
    8e30:	96 e8       	ldi	r25, 0x86	; 134
    8e32:	86 2f       	mov	r24, r22
    8e34:	70 e0       	ldi	r23, 0x00	; 0
    8e36:	60 e0       	ldi	r22, 0x00	; 0
    8e38:	2a f0       	brmi	.+10     	; 0x8e44 <__floatsisf+0x6c>
    8e3a:	9a 95       	dec	r25
    8e3c:	66 0f       	add	r22, r22
    8e3e:	77 1f       	adc	r23, r23
    8e40:	88 1f       	adc	r24, r24
    8e42:	da f7       	brpl	.-10     	; 0x8e3a <__floatsisf+0x62>
    8e44:	88 0f       	add	r24, r24
    8e46:	96 95       	lsr	r25
    8e48:	87 95       	ror	r24
    8e4a:	97 f9       	bld	r25, 7
    8e4c:	08 95       	ret

00008e4e <__fp_cmp>:
    8e4e:	99 0f       	add	r25, r25
    8e50:	00 08       	sbc	r0, r0
    8e52:	55 0f       	add	r21, r21
    8e54:	aa 0b       	sbc	r26, r26
    8e56:	e0 e8       	ldi	r30, 0x80	; 128
    8e58:	fe ef       	ldi	r31, 0xFE	; 254
    8e5a:	16 16       	cp	r1, r22
    8e5c:	17 06       	cpc	r1, r23
    8e5e:	e8 07       	cpc	r30, r24
    8e60:	f9 07       	cpc	r31, r25
    8e62:	c0 f0       	brcs	.+48     	; 0x8e94 <__fp_cmp+0x46>
    8e64:	12 16       	cp	r1, r18
    8e66:	13 06       	cpc	r1, r19
    8e68:	e4 07       	cpc	r30, r20
    8e6a:	f5 07       	cpc	r31, r21
    8e6c:	98 f0       	brcs	.+38     	; 0x8e94 <__fp_cmp+0x46>
    8e6e:	62 1b       	sub	r22, r18
    8e70:	73 0b       	sbc	r23, r19
    8e72:	84 0b       	sbc	r24, r20
    8e74:	95 0b       	sbc	r25, r21
    8e76:	39 f4       	brne	.+14     	; 0x8e86 <__fp_cmp+0x38>
    8e78:	0a 26       	eor	r0, r26
    8e7a:	61 f0       	breq	.+24     	; 0x8e94 <__fp_cmp+0x46>
    8e7c:	23 2b       	or	r18, r19
    8e7e:	24 2b       	or	r18, r20
    8e80:	25 2b       	or	r18, r21
    8e82:	21 f4       	brne	.+8      	; 0x8e8c <__fp_cmp+0x3e>
    8e84:	08 95       	ret
    8e86:	0a 26       	eor	r0, r26
    8e88:	09 f4       	brne	.+2      	; 0x8e8c <__fp_cmp+0x3e>
    8e8a:	a1 40       	sbci	r26, 0x01	; 1
    8e8c:	a6 95       	lsr	r26
    8e8e:	8f ef       	ldi	r24, 0xFF	; 255
    8e90:	81 1d       	adc	r24, r1
    8e92:	81 1d       	adc	r24, r1
    8e94:	08 95       	ret

00008e96 <__fp_inf>:
    8e96:	97 f9       	bld	r25, 7
    8e98:	9f 67       	ori	r25, 0x7F	; 127
    8e9a:	80 e8       	ldi	r24, 0x80	; 128
    8e9c:	70 e0       	ldi	r23, 0x00	; 0
    8e9e:	60 e0       	ldi	r22, 0x00	; 0
    8ea0:	08 95       	ret

00008ea2 <__fp_nan>:
    8ea2:	9f ef       	ldi	r25, 0xFF	; 255
    8ea4:	80 ec       	ldi	r24, 0xC0	; 192
    8ea6:	08 95       	ret

00008ea8 <__fp_pscA>:
    8ea8:	00 24       	eor	r0, r0
    8eaa:	0a 94       	dec	r0
    8eac:	16 16       	cp	r1, r22
    8eae:	17 06       	cpc	r1, r23
    8eb0:	18 06       	cpc	r1, r24
    8eb2:	09 06       	cpc	r0, r25
    8eb4:	08 95       	ret

00008eb6 <__fp_pscB>:
    8eb6:	00 24       	eor	r0, r0
    8eb8:	0a 94       	dec	r0
    8eba:	12 16       	cp	r1, r18
    8ebc:	13 06       	cpc	r1, r19
    8ebe:	14 06       	cpc	r1, r20
    8ec0:	05 06       	cpc	r0, r21
    8ec2:	08 95       	ret

00008ec4 <__fp_round>:
    8ec4:	09 2e       	mov	r0, r25
    8ec6:	03 94       	inc	r0
    8ec8:	00 0c       	add	r0, r0
    8eca:	11 f4       	brne	.+4      	; 0x8ed0 <__fp_round+0xc>
    8ecc:	88 23       	and	r24, r24
    8ece:	52 f0       	brmi	.+20     	; 0x8ee4 <__fp_round+0x20>
    8ed0:	bb 0f       	add	r27, r27
    8ed2:	40 f4       	brcc	.+16     	; 0x8ee4 <__fp_round+0x20>
    8ed4:	bf 2b       	or	r27, r31
    8ed6:	11 f4       	brne	.+4      	; 0x8edc <__fp_round+0x18>
    8ed8:	60 ff       	sbrs	r22, 0
    8eda:	04 c0       	rjmp	.+8      	; 0x8ee4 <__fp_round+0x20>
    8edc:	6f 5f       	subi	r22, 0xFF	; 255
    8ede:	7f 4f       	sbci	r23, 0xFF	; 255
    8ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    8ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ee4:	08 95       	ret

00008ee6 <__fp_split3>:
    8ee6:	57 fd       	sbrc	r21, 7
    8ee8:	90 58       	subi	r25, 0x80	; 128
    8eea:	44 0f       	add	r20, r20
    8eec:	55 1f       	adc	r21, r21
    8eee:	59 f0       	breq	.+22     	; 0x8f06 <__fp_splitA+0x10>
    8ef0:	5f 3f       	cpi	r21, 0xFF	; 255
    8ef2:	71 f0       	breq	.+28     	; 0x8f10 <__fp_splitA+0x1a>
    8ef4:	47 95       	ror	r20

00008ef6 <__fp_splitA>:
    8ef6:	88 0f       	add	r24, r24
    8ef8:	97 fb       	bst	r25, 7
    8efa:	99 1f       	adc	r25, r25
    8efc:	61 f0       	breq	.+24     	; 0x8f16 <__fp_splitA+0x20>
    8efe:	9f 3f       	cpi	r25, 0xFF	; 255
    8f00:	79 f0       	breq	.+30     	; 0x8f20 <__fp_splitA+0x2a>
    8f02:	87 95       	ror	r24
    8f04:	08 95       	ret
    8f06:	12 16       	cp	r1, r18
    8f08:	13 06       	cpc	r1, r19
    8f0a:	14 06       	cpc	r1, r20
    8f0c:	55 1f       	adc	r21, r21
    8f0e:	f2 cf       	rjmp	.-28     	; 0x8ef4 <__fp_split3+0xe>
    8f10:	46 95       	lsr	r20
    8f12:	f1 df       	rcall	.-30     	; 0x8ef6 <__fp_splitA>
    8f14:	08 c0       	rjmp	.+16     	; 0x8f26 <__fp_splitA+0x30>
    8f16:	16 16       	cp	r1, r22
    8f18:	17 06       	cpc	r1, r23
    8f1a:	18 06       	cpc	r1, r24
    8f1c:	99 1f       	adc	r25, r25
    8f1e:	f1 cf       	rjmp	.-30     	; 0x8f02 <__fp_splitA+0xc>
    8f20:	86 95       	lsr	r24
    8f22:	71 05       	cpc	r23, r1
    8f24:	61 05       	cpc	r22, r1
    8f26:	08 94       	sec
    8f28:	08 95       	ret

00008f2a <__fp_zero>:
    8f2a:	e8 94       	clt

00008f2c <__fp_szero>:
    8f2c:	bb 27       	eor	r27, r27
    8f2e:	66 27       	eor	r22, r22
    8f30:	77 27       	eor	r23, r23
    8f32:	cb 01       	movw	r24, r22
    8f34:	97 f9       	bld	r25, 7
    8f36:	08 95       	ret

00008f38 <__gesf2>:
    8f38:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <__fp_cmp>
    8f3c:	08 f4       	brcc	.+2      	; 0x8f40 <__gesf2+0x8>
    8f3e:	8f ef       	ldi	r24, 0xFF	; 255
    8f40:	08 95       	ret

00008f42 <__mulsf3>:
    8f42:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <__mulsf3x>
    8f46:	0c 94 62 47 	jmp	0x8ec4	; 0x8ec4 <__fp_round>
    8f4a:	0e 94 54 47 	call	0x8ea8	; 0x8ea8 <__fp_pscA>
    8f4e:	38 f0       	brcs	.+14     	; 0x8f5e <__mulsf3+0x1c>
    8f50:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <__fp_pscB>
    8f54:	20 f0       	brcs	.+8      	; 0x8f5e <__mulsf3+0x1c>
    8f56:	95 23       	and	r25, r21
    8f58:	11 f0       	breq	.+4      	; 0x8f5e <__mulsf3+0x1c>
    8f5a:	0c 94 4b 47 	jmp	0x8e96	; 0x8e96 <__fp_inf>
    8f5e:	0c 94 51 47 	jmp	0x8ea2	; 0x8ea2 <__fp_nan>
    8f62:	11 24       	eor	r1, r1
    8f64:	0c 94 96 47 	jmp	0x8f2c	; 0x8f2c <__fp_szero>

00008f68 <__mulsf3x>:
    8f68:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <__fp_split3>
    8f6c:	70 f3       	brcs	.-36     	; 0x8f4a <__mulsf3+0x8>

00008f6e <__mulsf3_pse>:
    8f6e:	95 9f       	mul	r25, r21
    8f70:	c1 f3       	breq	.-16     	; 0x8f62 <__mulsf3+0x20>
    8f72:	95 0f       	add	r25, r21
    8f74:	50 e0       	ldi	r21, 0x00	; 0
    8f76:	55 1f       	adc	r21, r21
    8f78:	62 9f       	mul	r22, r18
    8f7a:	f0 01       	movw	r30, r0
    8f7c:	72 9f       	mul	r23, r18
    8f7e:	bb 27       	eor	r27, r27
    8f80:	f0 0d       	add	r31, r0
    8f82:	b1 1d       	adc	r27, r1
    8f84:	63 9f       	mul	r22, r19
    8f86:	aa 27       	eor	r26, r26
    8f88:	f0 0d       	add	r31, r0
    8f8a:	b1 1d       	adc	r27, r1
    8f8c:	aa 1f       	adc	r26, r26
    8f8e:	64 9f       	mul	r22, r20
    8f90:	66 27       	eor	r22, r22
    8f92:	b0 0d       	add	r27, r0
    8f94:	a1 1d       	adc	r26, r1
    8f96:	66 1f       	adc	r22, r22
    8f98:	82 9f       	mul	r24, r18
    8f9a:	22 27       	eor	r18, r18
    8f9c:	b0 0d       	add	r27, r0
    8f9e:	a1 1d       	adc	r26, r1
    8fa0:	62 1f       	adc	r22, r18
    8fa2:	73 9f       	mul	r23, r19
    8fa4:	b0 0d       	add	r27, r0
    8fa6:	a1 1d       	adc	r26, r1
    8fa8:	62 1f       	adc	r22, r18
    8faa:	83 9f       	mul	r24, r19
    8fac:	a0 0d       	add	r26, r0
    8fae:	61 1d       	adc	r22, r1
    8fb0:	22 1f       	adc	r18, r18
    8fb2:	74 9f       	mul	r23, r20
    8fb4:	33 27       	eor	r19, r19
    8fb6:	a0 0d       	add	r26, r0
    8fb8:	61 1d       	adc	r22, r1
    8fba:	23 1f       	adc	r18, r19
    8fbc:	84 9f       	mul	r24, r20
    8fbe:	60 0d       	add	r22, r0
    8fc0:	21 1d       	adc	r18, r1
    8fc2:	82 2f       	mov	r24, r18
    8fc4:	76 2f       	mov	r23, r22
    8fc6:	6a 2f       	mov	r22, r26
    8fc8:	11 24       	eor	r1, r1
    8fca:	9f 57       	subi	r25, 0x7F	; 127
    8fcc:	50 40       	sbci	r21, 0x00	; 0
    8fce:	9a f0       	brmi	.+38     	; 0x8ff6 <__mulsf3_pse+0x88>
    8fd0:	f1 f0       	breq	.+60     	; 0x900e <__mulsf3_pse+0xa0>
    8fd2:	88 23       	and	r24, r24
    8fd4:	4a f0       	brmi	.+18     	; 0x8fe8 <__mulsf3_pse+0x7a>
    8fd6:	ee 0f       	add	r30, r30
    8fd8:	ff 1f       	adc	r31, r31
    8fda:	bb 1f       	adc	r27, r27
    8fdc:	66 1f       	adc	r22, r22
    8fde:	77 1f       	adc	r23, r23
    8fe0:	88 1f       	adc	r24, r24
    8fe2:	91 50       	subi	r25, 0x01	; 1
    8fe4:	50 40       	sbci	r21, 0x00	; 0
    8fe6:	a9 f7       	brne	.-22     	; 0x8fd2 <__mulsf3_pse+0x64>
    8fe8:	9e 3f       	cpi	r25, 0xFE	; 254
    8fea:	51 05       	cpc	r21, r1
    8fec:	80 f0       	brcs	.+32     	; 0x900e <__mulsf3_pse+0xa0>
    8fee:	0c 94 4b 47 	jmp	0x8e96	; 0x8e96 <__fp_inf>
    8ff2:	0c 94 96 47 	jmp	0x8f2c	; 0x8f2c <__fp_szero>
    8ff6:	5f 3f       	cpi	r21, 0xFF	; 255
    8ff8:	e4 f3       	brlt	.-8      	; 0x8ff2 <__mulsf3_pse+0x84>
    8ffa:	98 3e       	cpi	r25, 0xE8	; 232
    8ffc:	d4 f3       	brlt	.-12     	; 0x8ff2 <__mulsf3_pse+0x84>
    8ffe:	86 95       	lsr	r24
    9000:	77 95       	ror	r23
    9002:	67 95       	ror	r22
    9004:	b7 95       	ror	r27
    9006:	f7 95       	ror	r31
    9008:	e7 95       	ror	r30
    900a:	9f 5f       	subi	r25, 0xFF	; 255
    900c:	c1 f7       	brne	.-16     	; 0x8ffe <__mulsf3_pse+0x90>
    900e:	fe 2b       	or	r31, r30
    9010:	88 0f       	add	r24, r24
    9012:	91 1d       	adc	r25, r1
    9014:	96 95       	lsr	r25
    9016:	87 95       	ror	r24
    9018:	97 f9       	bld	r25, 7
    901a:	08 95       	ret

0000901c <__mulsi3>:
    901c:	db 01       	movw	r26, r22
    901e:	8f 93       	push	r24
    9020:	9f 93       	push	r25
    9022:	0e 94 a6 48 	call	0x914c	; 0x914c <__muluhisi3>
    9026:	bf 91       	pop	r27
    9028:	af 91       	pop	r26
    902a:	a2 9f       	mul	r26, r18
    902c:	80 0d       	add	r24, r0
    902e:	91 1d       	adc	r25, r1
    9030:	a3 9f       	mul	r26, r19
    9032:	90 0d       	add	r25, r0
    9034:	b2 9f       	mul	r27, r18
    9036:	90 0d       	add	r25, r0
    9038:	11 24       	eor	r1, r1
    903a:	08 95       	ret

0000903c <__udivmodhi4>:
    903c:	aa 1b       	sub	r26, r26
    903e:	bb 1b       	sub	r27, r27
    9040:	51 e1       	ldi	r21, 0x11	; 17
    9042:	07 c0       	rjmp	.+14     	; 0x9052 <__udivmodhi4_ep>

00009044 <__udivmodhi4_loop>:
    9044:	aa 1f       	adc	r26, r26
    9046:	bb 1f       	adc	r27, r27
    9048:	a6 17       	cp	r26, r22
    904a:	b7 07       	cpc	r27, r23
    904c:	10 f0       	brcs	.+4      	; 0x9052 <__udivmodhi4_ep>
    904e:	a6 1b       	sub	r26, r22
    9050:	b7 0b       	sbc	r27, r23

00009052 <__udivmodhi4_ep>:
    9052:	88 1f       	adc	r24, r24
    9054:	99 1f       	adc	r25, r25
    9056:	5a 95       	dec	r21
    9058:	a9 f7       	brne	.-22     	; 0x9044 <__udivmodhi4_loop>
    905a:	80 95       	com	r24
    905c:	90 95       	com	r25
    905e:	bc 01       	movw	r22, r24
    9060:	cd 01       	movw	r24, r26
    9062:	08 95       	ret

00009064 <__divmodhi4>:
    9064:	97 fb       	bst	r25, 7
    9066:	07 2e       	mov	r0, r23
    9068:	16 f4       	brtc	.+4      	; 0x906e <__divmodhi4+0xa>
    906a:	00 94       	com	r0
    906c:	07 d0       	rcall	.+14     	; 0x907c <__divmodhi4_neg1>
    906e:	77 fd       	sbrc	r23, 7
    9070:	09 d0       	rcall	.+18     	; 0x9084 <__divmodhi4_neg2>
    9072:	0e 94 1e 48 	call	0x903c	; 0x903c <__udivmodhi4>
    9076:	07 fc       	sbrc	r0, 7
    9078:	05 d0       	rcall	.+10     	; 0x9084 <__divmodhi4_neg2>
    907a:	3e f4       	brtc	.+14     	; 0x908a <__divmodhi4_exit>

0000907c <__divmodhi4_neg1>:
    907c:	90 95       	com	r25
    907e:	81 95       	neg	r24
    9080:	9f 4f       	sbci	r25, 0xFF	; 255
    9082:	08 95       	ret

00009084 <__divmodhi4_neg2>:
    9084:	70 95       	com	r23
    9086:	61 95       	neg	r22
    9088:	7f 4f       	sbci	r23, 0xFF	; 255

0000908a <__divmodhi4_exit>:
    908a:	08 95       	ret

0000908c <__udivmodsi4>:
    908c:	a1 e2       	ldi	r26, 0x21	; 33
    908e:	1a 2e       	mov	r1, r26
    9090:	aa 1b       	sub	r26, r26
    9092:	bb 1b       	sub	r27, r27
    9094:	fd 01       	movw	r30, r26
    9096:	0d c0       	rjmp	.+26     	; 0x90b2 <__udivmodsi4_ep>

00009098 <__udivmodsi4_loop>:
    9098:	aa 1f       	adc	r26, r26
    909a:	bb 1f       	adc	r27, r27
    909c:	ee 1f       	adc	r30, r30
    909e:	ff 1f       	adc	r31, r31
    90a0:	a2 17       	cp	r26, r18
    90a2:	b3 07       	cpc	r27, r19
    90a4:	e4 07       	cpc	r30, r20
    90a6:	f5 07       	cpc	r31, r21
    90a8:	20 f0       	brcs	.+8      	; 0x90b2 <__udivmodsi4_ep>
    90aa:	a2 1b       	sub	r26, r18
    90ac:	b3 0b       	sbc	r27, r19
    90ae:	e4 0b       	sbc	r30, r20
    90b0:	f5 0b       	sbc	r31, r21

000090b2 <__udivmodsi4_ep>:
    90b2:	66 1f       	adc	r22, r22
    90b4:	77 1f       	adc	r23, r23
    90b6:	88 1f       	adc	r24, r24
    90b8:	99 1f       	adc	r25, r25
    90ba:	1a 94       	dec	r1
    90bc:	69 f7       	brne	.-38     	; 0x9098 <__udivmodsi4_loop>
    90be:	60 95       	com	r22
    90c0:	70 95       	com	r23
    90c2:	80 95       	com	r24
    90c4:	90 95       	com	r25
    90c6:	9b 01       	movw	r18, r22
    90c8:	ac 01       	movw	r20, r24
    90ca:	bd 01       	movw	r22, r26
    90cc:	cf 01       	movw	r24, r30
    90ce:	08 95       	ret

000090d0 <__divmodsi4>:
    90d0:	05 2e       	mov	r0, r21
    90d2:	97 fb       	bst	r25, 7
    90d4:	1e f4       	brtc	.+6      	; 0x90dc <__divmodsi4+0xc>
    90d6:	00 94       	com	r0
    90d8:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__negsi2>
    90dc:	57 fd       	sbrc	r21, 7
    90de:	07 d0       	rcall	.+14     	; 0x90ee <__divmodsi4_neg2>
    90e0:	0e 94 46 48 	call	0x908c	; 0x908c <__udivmodsi4>
    90e4:	07 fc       	sbrc	r0, 7
    90e6:	03 d0       	rcall	.+6      	; 0x90ee <__divmodsi4_neg2>
    90e8:	4e f4       	brtc	.+18     	; 0x90fc <__divmodsi4_exit>
    90ea:	0c 94 7f 48 	jmp	0x90fe	; 0x90fe <__negsi2>

000090ee <__divmodsi4_neg2>:
    90ee:	50 95       	com	r21
    90f0:	40 95       	com	r20
    90f2:	30 95       	com	r19
    90f4:	21 95       	neg	r18
    90f6:	3f 4f       	sbci	r19, 0xFF	; 255
    90f8:	4f 4f       	sbci	r20, 0xFF	; 255
    90fa:	5f 4f       	sbci	r21, 0xFF	; 255

000090fc <__divmodsi4_exit>:
    90fc:	08 95       	ret

000090fe <__negsi2>:
    90fe:	90 95       	com	r25
    9100:	80 95       	com	r24
    9102:	70 95       	com	r23
    9104:	61 95       	neg	r22
    9106:	7f 4f       	sbci	r23, 0xFF	; 255
    9108:	8f 4f       	sbci	r24, 0xFF	; 255
    910a:	9f 4f       	sbci	r25, 0xFF	; 255
    910c:	08 95       	ret

0000910e <__tablejump2__>:
    910e:	ee 0f       	add	r30, r30
    9110:	ff 1f       	adc	r31, r31
    9112:	00 24       	eor	r0, r0
    9114:	00 1c       	adc	r0, r0
    9116:	0b be       	out	0x3b, r0	; 59
    9118:	07 90       	elpm	r0, Z+
    911a:	f6 91       	elpm	r31, Z
    911c:	e0 2d       	mov	r30, r0
    911e:	09 94       	ijmp

00009120 <__umulhisi3>:
    9120:	a2 9f       	mul	r26, r18
    9122:	b0 01       	movw	r22, r0
    9124:	b3 9f       	mul	r27, r19
    9126:	c0 01       	movw	r24, r0
    9128:	a3 9f       	mul	r26, r19
    912a:	70 0d       	add	r23, r0
    912c:	81 1d       	adc	r24, r1
    912e:	11 24       	eor	r1, r1
    9130:	91 1d       	adc	r25, r1
    9132:	b2 9f       	mul	r27, r18
    9134:	70 0d       	add	r23, r0
    9136:	81 1d       	adc	r24, r1
    9138:	11 24       	eor	r1, r1
    913a:	91 1d       	adc	r25, r1
    913c:	08 95       	ret

0000913e <__usmulhisi3>:
    913e:	0e 94 90 48 	call	0x9120	; 0x9120 <__umulhisi3>

00009142 <__usmulhisi3_tail>:
    9142:	b7 ff       	sbrs	r27, 7
    9144:	08 95       	ret
    9146:	82 1b       	sub	r24, r18
    9148:	93 0b       	sbc	r25, r19
    914a:	08 95       	ret

0000914c <__muluhisi3>:
    914c:	0e 94 90 48 	call	0x9120	; 0x9120 <__umulhisi3>
    9150:	a5 9f       	mul	r26, r21
    9152:	90 0d       	add	r25, r0
    9154:	b4 9f       	mul	r27, r20
    9156:	90 0d       	add	r25, r0
    9158:	a4 9f       	mul	r26, r20
    915a:	80 0d       	add	r24, r0
    915c:	91 1d       	adc	r25, r1
    915e:	11 24       	eor	r1, r1
    9160:	08 95       	ret

00009162 <__mulshisi3>:
    9162:	b7 ff       	sbrs	r27, 7
    9164:	0c 94 a6 48 	jmp	0x914c	; 0x914c <__muluhisi3>

00009168 <__mulohisi3>:
    9168:	0e 94 a6 48 	call	0x914c	; 0x914c <__muluhisi3>
    916c:	82 1b       	sub	r24, r18
    916e:	93 0b       	sbc	r25, r19
    9170:	08 95       	ret

00009172 <malloc>:
    9172:	0f 93       	push	r16
    9174:	1f 93       	push	r17
    9176:	cf 93       	push	r28
    9178:	df 93       	push	r29
    917a:	82 30       	cpi	r24, 0x02	; 2
    917c:	91 05       	cpc	r25, r1
    917e:	10 f4       	brcc	.+4      	; 0x9184 <malloc+0x12>
    9180:	82 e0       	ldi	r24, 0x02	; 2
    9182:	90 e0       	ldi	r25, 0x00	; 0
    9184:	e0 91 3b 49 	lds	r30, 0x493B	; 0x80493b <__flp>
    9188:	f0 91 3c 49 	lds	r31, 0x493C	; 0x80493c <__flp+0x1>
    918c:	20 e0       	ldi	r18, 0x00	; 0
    918e:	30 e0       	ldi	r19, 0x00	; 0
    9190:	a0 e0       	ldi	r26, 0x00	; 0
    9192:	b0 e0       	ldi	r27, 0x00	; 0
    9194:	30 97       	sbiw	r30, 0x00	; 0
    9196:	19 f1       	breq	.+70     	; 0x91de <malloc+0x6c>
    9198:	40 81       	ld	r20, Z
    919a:	51 81       	ldd	r21, Z+1	; 0x01
    919c:	02 81       	ldd	r16, Z+2	; 0x02
    919e:	13 81       	ldd	r17, Z+3	; 0x03
    91a0:	48 17       	cp	r20, r24
    91a2:	59 07       	cpc	r21, r25
    91a4:	c8 f0       	brcs	.+50     	; 0x91d8 <malloc+0x66>
    91a6:	84 17       	cp	r24, r20
    91a8:	95 07       	cpc	r25, r21
    91aa:	69 f4       	brne	.+26     	; 0x91c6 <malloc+0x54>
    91ac:	10 97       	sbiw	r26, 0x00	; 0
    91ae:	31 f0       	breq	.+12     	; 0x91bc <malloc+0x4a>
    91b0:	12 96       	adiw	r26, 0x02	; 2
    91b2:	0c 93       	st	X, r16
    91b4:	12 97       	sbiw	r26, 0x02	; 2
    91b6:	13 96       	adiw	r26, 0x03	; 3
    91b8:	1c 93       	st	X, r17
    91ba:	27 c0       	rjmp	.+78     	; 0x920a <malloc+0x98>
    91bc:	00 93 3b 49 	sts	0x493B, r16	; 0x80493b <__flp>
    91c0:	10 93 3c 49 	sts	0x493C, r17	; 0x80493c <__flp+0x1>
    91c4:	22 c0       	rjmp	.+68     	; 0x920a <malloc+0x98>
    91c6:	21 15       	cp	r18, r1
    91c8:	31 05       	cpc	r19, r1
    91ca:	19 f0       	breq	.+6      	; 0x91d2 <malloc+0x60>
    91cc:	42 17       	cp	r20, r18
    91ce:	53 07       	cpc	r21, r19
    91d0:	18 f4       	brcc	.+6      	; 0x91d8 <malloc+0x66>
    91d2:	9a 01       	movw	r18, r20
    91d4:	bd 01       	movw	r22, r26
    91d6:	ef 01       	movw	r28, r30
    91d8:	df 01       	movw	r26, r30
    91da:	f8 01       	movw	r30, r16
    91dc:	db cf       	rjmp	.-74     	; 0x9194 <malloc+0x22>
    91de:	21 15       	cp	r18, r1
    91e0:	31 05       	cpc	r19, r1
    91e2:	f9 f0       	breq	.+62     	; 0x9222 <malloc+0xb0>
    91e4:	28 1b       	sub	r18, r24
    91e6:	39 0b       	sbc	r19, r25
    91e8:	24 30       	cpi	r18, 0x04	; 4
    91ea:	31 05       	cpc	r19, r1
    91ec:	80 f4       	brcc	.+32     	; 0x920e <malloc+0x9c>
    91ee:	8a 81       	ldd	r24, Y+2	; 0x02
    91f0:	9b 81       	ldd	r25, Y+3	; 0x03
    91f2:	61 15       	cp	r22, r1
    91f4:	71 05       	cpc	r23, r1
    91f6:	21 f0       	breq	.+8      	; 0x9200 <malloc+0x8e>
    91f8:	fb 01       	movw	r30, r22
    91fa:	82 83       	std	Z+2, r24	; 0x02
    91fc:	93 83       	std	Z+3, r25	; 0x03
    91fe:	04 c0       	rjmp	.+8      	; 0x9208 <malloc+0x96>
    9200:	80 93 3b 49 	sts	0x493B, r24	; 0x80493b <__flp>
    9204:	90 93 3c 49 	sts	0x493C, r25	; 0x80493c <__flp+0x1>
    9208:	fe 01       	movw	r30, r28
    920a:	32 96       	adiw	r30, 0x02	; 2
    920c:	44 c0       	rjmp	.+136    	; 0x9296 <malloc+0x124>
    920e:	fe 01       	movw	r30, r28
    9210:	e2 0f       	add	r30, r18
    9212:	f3 1f       	adc	r31, r19
    9214:	81 93       	st	Z+, r24
    9216:	91 93       	st	Z+, r25
    9218:	22 50       	subi	r18, 0x02	; 2
    921a:	31 09       	sbc	r19, r1
    921c:	28 83       	st	Y, r18
    921e:	39 83       	std	Y+1, r19	; 0x01
    9220:	3a c0       	rjmp	.+116    	; 0x9296 <malloc+0x124>
    9222:	20 91 39 49 	lds	r18, 0x4939	; 0x804939 <__brkval>
    9226:	30 91 3a 49 	lds	r19, 0x493A	; 0x80493a <__brkval+0x1>
    922a:	23 2b       	or	r18, r19
    922c:	41 f4       	brne	.+16     	; 0x923e <malloc+0xcc>
    922e:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    9232:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    9236:	20 93 39 49 	sts	0x4939, r18	; 0x804939 <__brkval>
    923a:	30 93 3a 49 	sts	0x493A, r19	; 0x80493a <__brkval+0x1>
    923e:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    9242:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    9246:	21 15       	cp	r18, r1
    9248:	31 05       	cpc	r19, r1
    924a:	41 f4       	brne	.+16     	; 0x925c <malloc+0xea>
    924c:	2d b7       	in	r18, 0x3d	; 61
    924e:	3e b7       	in	r19, 0x3e	; 62
    9250:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    9254:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    9258:	24 1b       	sub	r18, r20
    925a:	35 0b       	sbc	r19, r21
    925c:	e0 91 39 49 	lds	r30, 0x4939	; 0x804939 <__brkval>
    9260:	f0 91 3a 49 	lds	r31, 0x493A	; 0x80493a <__brkval+0x1>
    9264:	e2 17       	cp	r30, r18
    9266:	f3 07       	cpc	r31, r19
    9268:	a0 f4       	brcc	.+40     	; 0x9292 <malloc+0x120>
    926a:	2e 1b       	sub	r18, r30
    926c:	3f 0b       	sbc	r19, r31
    926e:	28 17       	cp	r18, r24
    9270:	39 07       	cpc	r19, r25
    9272:	78 f0       	brcs	.+30     	; 0x9292 <malloc+0x120>
    9274:	ac 01       	movw	r20, r24
    9276:	4e 5f       	subi	r20, 0xFE	; 254
    9278:	5f 4f       	sbci	r21, 0xFF	; 255
    927a:	24 17       	cp	r18, r20
    927c:	35 07       	cpc	r19, r21
    927e:	48 f0       	brcs	.+18     	; 0x9292 <malloc+0x120>
    9280:	4e 0f       	add	r20, r30
    9282:	5f 1f       	adc	r21, r31
    9284:	40 93 39 49 	sts	0x4939, r20	; 0x804939 <__brkval>
    9288:	50 93 3a 49 	sts	0x493A, r21	; 0x80493a <__brkval+0x1>
    928c:	81 93       	st	Z+, r24
    928e:	91 93       	st	Z+, r25
    9290:	02 c0       	rjmp	.+4      	; 0x9296 <malloc+0x124>
    9292:	e0 e0       	ldi	r30, 0x00	; 0
    9294:	f0 e0       	ldi	r31, 0x00	; 0
    9296:	cf 01       	movw	r24, r30
    9298:	df 91       	pop	r29
    929a:	cf 91       	pop	r28
    929c:	1f 91       	pop	r17
    929e:	0f 91       	pop	r16
    92a0:	08 95       	ret

000092a2 <free>:
    92a2:	cf 93       	push	r28
    92a4:	df 93       	push	r29
    92a6:	00 97       	sbiw	r24, 0x00	; 0
    92a8:	09 f4       	brne	.+2      	; 0x92ac <free+0xa>
    92aa:	81 c0       	rjmp	.+258    	; 0x93ae <free+0x10c>
    92ac:	fc 01       	movw	r30, r24
    92ae:	32 97       	sbiw	r30, 0x02	; 2
    92b0:	12 82       	std	Z+2, r1	; 0x02
    92b2:	13 82       	std	Z+3, r1	; 0x03
    92b4:	a0 91 3b 49 	lds	r26, 0x493B	; 0x80493b <__flp>
    92b8:	b0 91 3c 49 	lds	r27, 0x493C	; 0x80493c <__flp+0x1>
    92bc:	10 97       	sbiw	r26, 0x00	; 0
    92be:	81 f4       	brne	.+32     	; 0x92e0 <free+0x3e>
    92c0:	20 81       	ld	r18, Z
    92c2:	31 81       	ldd	r19, Z+1	; 0x01
    92c4:	82 0f       	add	r24, r18
    92c6:	93 1f       	adc	r25, r19
    92c8:	20 91 39 49 	lds	r18, 0x4939	; 0x804939 <__brkval>
    92cc:	30 91 3a 49 	lds	r19, 0x493A	; 0x80493a <__brkval+0x1>
    92d0:	28 17       	cp	r18, r24
    92d2:	39 07       	cpc	r19, r25
    92d4:	51 f5       	brne	.+84     	; 0x932a <free+0x88>
    92d6:	e0 93 39 49 	sts	0x4939, r30	; 0x804939 <__brkval>
    92da:	f0 93 3a 49 	sts	0x493A, r31	; 0x80493a <__brkval+0x1>
    92de:	67 c0       	rjmp	.+206    	; 0x93ae <free+0x10c>
    92e0:	ed 01       	movw	r28, r26
    92e2:	20 e0       	ldi	r18, 0x00	; 0
    92e4:	30 e0       	ldi	r19, 0x00	; 0
    92e6:	ce 17       	cp	r28, r30
    92e8:	df 07       	cpc	r29, r31
    92ea:	40 f4       	brcc	.+16     	; 0x92fc <free+0x5a>
    92ec:	4a 81       	ldd	r20, Y+2	; 0x02
    92ee:	5b 81       	ldd	r21, Y+3	; 0x03
    92f0:	9e 01       	movw	r18, r28
    92f2:	41 15       	cp	r20, r1
    92f4:	51 05       	cpc	r21, r1
    92f6:	f1 f0       	breq	.+60     	; 0x9334 <free+0x92>
    92f8:	ea 01       	movw	r28, r20
    92fa:	f5 cf       	rjmp	.-22     	; 0x92e6 <free+0x44>
    92fc:	c2 83       	std	Z+2, r28	; 0x02
    92fe:	d3 83       	std	Z+3, r29	; 0x03
    9300:	40 81       	ld	r20, Z
    9302:	51 81       	ldd	r21, Z+1	; 0x01
    9304:	84 0f       	add	r24, r20
    9306:	95 1f       	adc	r25, r21
    9308:	c8 17       	cp	r28, r24
    930a:	d9 07       	cpc	r29, r25
    930c:	59 f4       	brne	.+22     	; 0x9324 <free+0x82>
    930e:	88 81       	ld	r24, Y
    9310:	99 81       	ldd	r25, Y+1	; 0x01
    9312:	84 0f       	add	r24, r20
    9314:	95 1f       	adc	r25, r21
    9316:	02 96       	adiw	r24, 0x02	; 2
    9318:	80 83       	st	Z, r24
    931a:	91 83       	std	Z+1, r25	; 0x01
    931c:	8a 81       	ldd	r24, Y+2	; 0x02
    931e:	9b 81       	ldd	r25, Y+3	; 0x03
    9320:	82 83       	std	Z+2, r24	; 0x02
    9322:	93 83       	std	Z+3, r25	; 0x03
    9324:	21 15       	cp	r18, r1
    9326:	31 05       	cpc	r19, r1
    9328:	29 f4       	brne	.+10     	; 0x9334 <free+0x92>
    932a:	e0 93 3b 49 	sts	0x493B, r30	; 0x80493b <__flp>
    932e:	f0 93 3c 49 	sts	0x493C, r31	; 0x80493c <__flp+0x1>
    9332:	3d c0       	rjmp	.+122    	; 0x93ae <free+0x10c>
    9334:	e9 01       	movw	r28, r18
    9336:	ea 83       	std	Y+2, r30	; 0x02
    9338:	fb 83       	std	Y+3, r31	; 0x03
    933a:	49 91       	ld	r20, Y+
    933c:	59 91       	ld	r21, Y+
    933e:	c4 0f       	add	r28, r20
    9340:	d5 1f       	adc	r29, r21
    9342:	ec 17       	cp	r30, r28
    9344:	fd 07       	cpc	r31, r29
    9346:	61 f4       	brne	.+24     	; 0x9360 <free+0xbe>
    9348:	80 81       	ld	r24, Z
    934a:	91 81       	ldd	r25, Z+1	; 0x01
    934c:	84 0f       	add	r24, r20
    934e:	95 1f       	adc	r25, r21
    9350:	02 96       	adiw	r24, 0x02	; 2
    9352:	e9 01       	movw	r28, r18
    9354:	88 83       	st	Y, r24
    9356:	99 83       	std	Y+1, r25	; 0x01
    9358:	82 81       	ldd	r24, Z+2	; 0x02
    935a:	93 81       	ldd	r25, Z+3	; 0x03
    935c:	8a 83       	std	Y+2, r24	; 0x02
    935e:	9b 83       	std	Y+3, r25	; 0x03
    9360:	e0 e0       	ldi	r30, 0x00	; 0
    9362:	f0 e0       	ldi	r31, 0x00	; 0
    9364:	12 96       	adiw	r26, 0x02	; 2
    9366:	8d 91       	ld	r24, X+
    9368:	9c 91       	ld	r25, X
    936a:	13 97       	sbiw	r26, 0x03	; 3
    936c:	00 97       	sbiw	r24, 0x00	; 0
    936e:	19 f0       	breq	.+6      	; 0x9376 <free+0xd4>
    9370:	fd 01       	movw	r30, r26
    9372:	dc 01       	movw	r26, r24
    9374:	f7 cf       	rjmp	.-18     	; 0x9364 <free+0xc2>
    9376:	8d 91       	ld	r24, X+
    9378:	9c 91       	ld	r25, X
    937a:	11 97       	sbiw	r26, 0x01	; 1
    937c:	9d 01       	movw	r18, r26
    937e:	2e 5f       	subi	r18, 0xFE	; 254
    9380:	3f 4f       	sbci	r19, 0xFF	; 255
    9382:	82 0f       	add	r24, r18
    9384:	93 1f       	adc	r25, r19
    9386:	20 91 39 49 	lds	r18, 0x4939	; 0x804939 <__brkval>
    938a:	30 91 3a 49 	lds	r19, 0x493A	; 0x80493a <__brkval+0x1>
    938e:	28 17       	cp	r18, r24
    9390:	39 07       	cpc	r19, r25
    9392:	69 f4       	brne	.+26     	; 0x93ae <free+0x10c>
    9394:	30 97       	sbiw	r30, 0x00	; 0
    9396:	29 f4       	brne	.+10     	; 0x93a2 <free+0x100>
    9398:	10 92 3b 49 	sts	0x493B, r1	; 0x80493b <__flp>
    939c:	10 92 3c 49 	sts	0x493C, r1	; 0x80493c <__flp+0x1>
    93a0:	02 c0       	rjmp	.+4      	; 0x93a6 <free+0x104>
    93a2:	12 82       	std	Z+2, r1	; 0x02
    93a4:	13 82       	std	Z+3, r1	; 0x03
    93a6:	a0 93 39 49 	sts	0x4939, r26	; 0x804939 <__brkval>
    93aa:	b0 93 3a 49 	sts	0x493A, r27	; 0x80493a <__brkval+0x1>
    93ae:	df 91       	pop	r29
    93b0:	cf 91       	pop	r28
    93b2:	08 95       	ret

000093b4 <atoi>:
    93b4:	fc 01       	movw	r30, r24
    93b6:	88 27       	eor	r24, r24
    93b8:	99 27       	eor	r25, r25
    93ba:	e8 94       	clt
    93bc:	21 91       	ld	r18, Z+
    93be:	20 32       	cpi	r18, 0x20	; 32
    93c0:	e9 f3       	breq	.-6      	; 0x93bc <atoi+0x8>
    93c2:	29 30       	cpi	r18, 0x09	; 9
    93c4:	10 f0       	brcs	.+4      	; 0x93ca <atoi+0x16>
    93c6:	2e 30       	cpi	r18, 0x0E	; 14
    93c8:	c8 f3       	brcs	.-14     	; 0x93bc <atoi+0x8>
    93ca:	2b 32       	cpi	r18, 0x2B	; 43
    93cc:	41 f0       	breq	.+16     	; 0x93de <atoi+0x2a>
    93ce:	2d 32       	cpi	r18, 0x2D	; 45
    93d0:	39 f4       	brne	.+14     	; 0x93e0 <atoi+0x2c>
    93d2:	68 94       	set
    93d4:	04 c0       	rjmp	.+8      	; 0x93de <atoi+0x2a>
    93d6:	0e 94 66 4a 	call	0x94cc	; 0x94cc <__mulhi_const_10>
    93da:	82 0f       	add	r24, r18
    93dc:	91 1d       	adc	r25, r1
    93de:	21 91       	ld	r18, Z+
    93e0:	20 53       	subi	r18, 0x30	; 48
    93e2:	2a 30       	cpi	r18, 0x0A	; 10
    93e4:	c0 f3       	brcs	.-16     	; 0x93d6 <atoi+0x22>
    93e6:	1e f4       	brtc	.+6      	; 0x93ee <atoi+0x3a>
    93e8:	90 95       	com	r25
    93ea:	81 95       	neg	r24
    93ec:	9f 4f       	sbci	r25, 0xFF	; 255
    93ee:	08 95       	ret

000093f0 <atol>:
    93f0:	1f 93       	push	r17
    93f2:	fc 01       	movw	r30, r24
    93f4:	99 27       	eor	r25, r25
    93f6:	88 27       	eor	r24, r24
    93f8:	bc 01       	movw	r22, r24
    93fa:	e8 94       	clt
    93fc:	11 91       	ld	r17, Z+
    93fe:	10 32       	cpi	r17, 0x20	; 32
    9400:	e9 f3       	breq	.-6      	; 0x93fc <atol+0xc>
    9402:	19 30       	cpi	r17, 0x09	; 9
    9404:	10 f0       	brcs	.+4      	; 0x940a <atol+0x1a>
    9406:	1e 30       	cpi	r17, 0x0E	; 14
    9408:	c8 f3       	brcs	.-14     	; 0x93fc <atol+0xc>
    940a:	1b 32       	cpi	r17, 0x2B	; 43
    940c:	51 f0       	breq	.+20     	; 0x9422 <atol+0x32>
    940e:	1d 32       	cpi	r17, 0x2D	; 45
    9410:	49 f4       	brne	.+18     	; 0x9424 <atol+0x34>
    9412:	68 94       	set
    9414:	06 c0       	rjmp	.+12     	; 0x9422 <atol+0x32>
    9416:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <__mulsi_const_10>
    941a:	61 0f       	add	r22, r17
    941c:	71 1d       	adc	r23, r1
    941e:	81 1d       	adc	r24, r1
    9420:	91 1d       	adc	r25, r1
    9422:	11 91       	ld	r17, Z+
    9424:	10 53       	subi	r17, 0x30	; 48
    9426:	1a 30       	cpi	r17, 0x0A	; 10
    9428:	b0 f3       	brcs	.-20     	; 0x9416 <atol+0x26>
    942a:	3e f4       	brtc	.+14     	; 0x943a <atol+0x4a>
    942c:	90 95       	com	r25
    942e:	80 95       	com	r24
    9430:	70 95       	com	r23
    9432:	61 95       	neg	r22
    9434:	7f 4f       	sbci	r23, 0xFF	; 255
    9436:	8f 4f       	sbci	r24, 0xFF	; 255
    9438:	9f 4f       	sbci	r25, 0xFF	; 255
    943a:	1f 91       	pop	r17
    943c:	08 95       	ret

0000943e <toupper>:
    943e:	91 11       	cpse	r25, r1
    9440:	08 95       	ret
    9442:	81 56       	subi	r24, 0x61	; 97
    9444:	8a 51       	subi	r24, 0x1A	; 26
    9446:	08 f4       	brcc	.+2      	; 0x944a <toupper+0xc>
    9448:	80 52       	subi	r24, 0x20	; 32
    944a:	85 58       	subi	r24, 0x85	; 133
    944c:	08 95       	ret

0000944e <strcat>:
    944e:	fb 01       	movw	r30, r22
    9450:	dc 01       	movw	r26, r24
    9452:	0d 90       	ld	r0, X+
    9454:	00 20       	and	r0, r0
    9456:	e9 f7       	brne	.-6      	; 0x9452 <strcat+0x4>
    9458:	11 97       	sbiw	r26, 0x01	; 1
    945a:	01 90       	ld	r0, Z+
    945c:	0d 92       	st	X+, r0
    945e:	00 20       	and	r0, r0
    9460:	e1 f7       	brne	.-8      	; 0x945a <strcat+0xc>
    9462:	08 95       	ret

00009464 <strcpy>:
    9464:	fb 01       	movw	r30, r22
    9466:	dc 01       	movw	r26, r24
    9468:	01 90       	ld	r0, Z+
    946a:	0d 92       	st	X+, r0
    946c:	00 20       	and	r0, r0
    946e:	e1 f7       	brne	.-8      	; 0x9468 <strcpy+0x4>
    9470:	08 95       	ret

00009472 <strlen>:
    9472:	fc 01       	movw	r30, r24
    9474:	01 90       	ld	r0, Z+
    9476:	00 20       	and	r0, r0
    9478:	e9 f7       	brne	.-6      	; 0x9474 <strlen+0x2>
    947a:	80 95       	com	r24
    947c:	90 95       	com	r25
    947e:	8e 0f       	add	r24, r30
    9480:	9f 1f       	adc	r25, r31
    9482:	08 95       	ret

00009484 <strncpy>:
    9484:	fb 01       	movw	r30, r22
    9486:	dc 01       	movw	r26, r24
    9488:	41 50       	subi	r20, 0x01	; 1
    948a:	50 40       	sbci	r21, 0x00	; 0
    948c:	48 f0       	brcs	.+18     	; 0x94a0 <strncpy+0x1c>
    948e:	01 90       	ld	r0, Z+
    9490:	0d 92       	st	X+, r0
    9492:	00 20       	and	r0, r0
    9494:	c9 f7       	brne	.-14     	; 0x9488 <strncpy+0x4>
    9496:	01 c0       	rjmp	.+2      	; 0x949a <strncpy+0x16>
    9498:	1d 92       	st	X+, r1
    949a:	41 50       	subi	r20, 0x01	; 1
    949c:	50 40       	sbci	r21, 0x00	; 0
    949e:	e0 f7       	brcc	.-8      	; 0x9498 <strncpy+0x14>
    94a0:	08 95       	ret

000094a2 <__mulsi_const_10>:
    94a2:	59 2f       	mov	r21, r25
    94a4:	48 2f       	mov	r20, r24
    94a6:	37 2f       	mov	r19, r23
    94a8:	26 2f       	mov	r18, r22
    94aa:	66 0f       	add	r22, r22
    94ac:	77 1f       	adc	r23, r23
    94ae:	88 1f       	adc	r24, r24
    94b0:	99 1f       	adc	r25, r25
    94b2:	66 0f       	add	r22, r22
    94b4:	77 1f       	adc	r23, r23
    94b6:	88 1f       	adc	r24, r24
    94b8:	99 1f       	adc	r25, r25
    94ba:	62 0f       	add	r22, r18
    94bc:	73 1f       	adc	r23, r19
    94be:	84 1f       	adc	r24, r20
    94c0:	95 1f       	adc	r25, r21
    94c2:	66 0f       	add	r22, r22
    94c4:	77 1f       	adc	r23, r23
    94c6:	88 1f       	adc	r24, r24
    94c8:	99 1f       	adc	r25, r25
    94ca:	08 95       	ret

000094cc <__mulhi_const_10>:
    94cc:	7a e0       	ldi	r23, 0x0A	; 10
    94ce:	97 9f       	mul	r25, r23
    94d0:	90 2d       	mov	r25, r0
    94d2:	87 9f       	mul	r24, r23
    94d4:	80 2d       	mov	r24, r0
    94d6:	91 0d       	add	r25, r1
    94d8:	11 24       	eor	r1, r1
    94da:	08 95       	ret

000094dc <sprintf>:
    94dc:	0f 93       	push	r16
    94de:	1f 93       	push	r17
    94e0:	cf 93       	push	r28
    94e2:	df 93       	push	r29
    94e4:	cd b7       	in	r28, 0x3d	; 61
    94e6:	de b7       	in	r29, 0x3e	; 62
    94e8:	2e 97       	sbiw	r28, 0x0e	; 14
    94ea:	cd bf       	out	0x3d, r28	; 61
    94ec:	de bf       	out	0x3e, r29	; 62
    94ee:	0d 89       	ldd	r16, Y+21	; 0x15
    94f0:	1e 89       	ldd	r17, Y+22	; 0x16
    94f2:	86 e0       	ldi	r24, 0x06	; 6
    94f4:	8c 83       	std	Y+4, r24	; 0x04
    94f6:	09 83       	std	Y+1, r16	; 0x01
    94f8:	1a 83       	std	Y+2, r17	; 0x02
    94fa:	8f ef       	ldi	r24, 0xFF	; 255
    94fc:	9f e7       	ldi	r25, 0x7F	; 127
    94fe:	8d 83       	std	Y+5, r24	; 0x05
    9500:	9e 83       	std	Y+6, r25	; 0x06
    9502:	ae 01       	movw	r20, r28
    9504:	47 5e       	subi	r20, 0xE7	; 231
    9506:	5f 4f       	sbci	r21, 0xFF	; 255
    9508:	6f 89       	ldd	r22, Y+23	; 0x17
    950a:	78 8d       	ldd	r23, Y+24	; 0x18
    950c:	ce 01       	movw	r24, r28
    950e:	01 96       	adiw	r24, 0x01	; 1
    9510:	0e 94 97 4a 	call	0x952e	; 0x952e <vfprintf>
    9514:	ef 81       	ldd	r30, Y+7	; 0x07
    9516:	f8 85       	ldd	r31, Y+8	; 0x08
    9518:	e0 0f       	add	r30, r16
    951a:	f1 1f       	adc	r31, r17
    951c:	10 82       	st	Z, r1
    951e:	2e 96       	adiw	r28, 0x0e	; 14
    9520:	cd bf       	out	0x3d, r28	; 61
    9522:	de bf       	out	0x3e, r29	; 62
    9524:	df 91       	pop	r29
    9526:	cf 91       	pop	r28
    9528:	1f 91       	pop	r17
    952a:	0f 91       	pop	r16
    952c:	08 95       	ret

0000952e <vfprintf>:
    952e:	2f 92       	push	r2
    9530:	3f 92       	push	r3
    9532:	4f 92       	push	r4
    9534:	5f 92       	push	r5
    9536:	6f 92       	push	r6
    9538:	7f 92       	push	r7
    953a:	8f 92       	push	r8
    953c:	9f 92       	push	r9
    953e:	af 92       	push	r10
    9540:	bf 92       	push	r11
    9542:	cf 92       	push	r12
    9544:	df 92       	push	r13
    9546:	ef 92       	push	r14
    9548:	ff 92       	push	r15
    954a:	0f 93       	push	r16
    954c:	1f 93       	push	r17
    954e:	cf 93       	push	r28
    9550:	df 93       	push	r29
    9552:	cd b7       	in	r28, 0x3d	; 61
    9554:	de b7       	in	r29, 0x3e	; 62
    9556:	2b 97       	sbiw	r28, 0x0b	; 11
    9558:	cd bf       	out	0x3d, r28	; 61
    955a:	de bf       	out	0x3e, r29	; 62
    955c:	6c 01       	movw	r12, r24
    955e:	7b 01       	movw	r14, r22
    9560:	8a 01       	movw	r16, r20
    9562:	fc 01       	movw	r30, r24
    9564:	16 82       	std	Z+6, r1	; 0x06
    9566:	17 82       	std	Z+7, r1	; 0x07
    9568:	83 81       	ldd	r24, Z+3	; 0x03
    956a:	81 ff       	sbrs	r24, 1
    956c:	cc c1       	rjmp	.+920    	; 0x9906 <vfprintf+0x3d8>
    956e:	ce 01       	movw	r24, r28
    9570:	01 96       	adiw	r24, 0x01	; 1
    9572:	3c 01       	movw	r6, r24
    9574:	f6 01       	movw	r30, r12
    9576:	93 81       	ldd	r25, Z+3	; 0x03
    9578:	f7 01       	movw	r30, r14
    957a:	93 fd       	sbrc	r25, 3
    957c:	85 91       	lpm	r24, Z+
    957e:	93 ff       	sbrs	r25, 3
    9580:	81 91       	ld	r24, Z+
    9582:	7f 01       	movw	r14, r30
    9584:	88 23       	and	r24, r24
    9586:	09 f4       	brne	.+2      	; 0x958a <vfprintf+0x5c>
    9588:	ba c1       	rjmp	.+884    	; 0x98fe <vfprintf+0x3d0>
    958a:	85 32       	cpi	r24, 0x25	; 37
    958c:	39 f4       	brne	.+14     	; 0x959c <vfprintf+0x6e>
    958e:	93 fd       	sbrc	r25, 3
    9590:	85 91       	lpm	r24, Z+
    9592:	93 ff       	sbrs	r25, 3
    9594:	81 91       	ld	r24, Z+
    9596:	7f 01       	movw	r14, r30
    9598:	85 32       	cpi	r24, 0x25	; 37
    959a:	29 f4       	brne	.+10     	; 0x95a6 <vfprintf+0x78>
    959c:	b6 01       	movw	r22, r12
    959e:	90 e0       	ldi	r25, 0x00	; 0
    95a0:	0e 94 b1 4c 	call	0x9962	; 0x9962 <fputc>
    95a4:	e7 cf       	rjmp	.-50     	; 0x9574 <vfprintf+0x46>
    95a6:	91 2c       	mov	r9, r1
    95a8:	21 2c       	mov	r2, r1
    95aa:	31 2c       	mov	r3, r1
    95ac:	ff e1       	ldi	r31, 0x1F	; 31
    95ae:	f3 15       	cp	r31, r3
    95b0:	d8 f0       	brcs	.+54     	; 0x95e8 <vfprintf+0xba>
    95b2:	8b 32       	cpi	r24, 0x2B	; 43
    95b4:	79 f0       	breq	.+30     	; 0x95d4 <vfprintf+0xa6>
    95b6:	38 f4       	brcc	.+14     	; 0x95c6 <vfprintf+0x98>
    95b8:	80 32       	cpi	r24, 0x20	; 32
    95ba:	79 f0       	breq	.+30     	; 0x95da <vfprintf+0xac>
    95bc:	83 32       	cpi	r24, 0x23	; 35
    95be:	a1 f4       	brne	.+40     	; 0x95e8 <vfprintf+0xba>
    95c0:	23 2d       	mov	r18, r3
    95c2:	20 61       	ori	r18, 0x10	; 16
    95c4:	1d c0       	rjmp	.+58     	; 0x9600 <vfprintf+0xd2>
    95c6:	8d 32       	cpi	r24, 0x2D	; 45
    95c8:	61 f0       	breq	.+24     	; 0x95e2 <vfprintf+0xb4>
    95ca:	80 33       	cpi	r24, 0x30	; 48
    95cc:	69 f4       	brne	.+26     	; 0x95e8 <vfprintf+0xba>
    95ce:	23 2d       	mov	r18, r3
    95d0:	21 60       	ori	r18, 0x01	; 1
    95d2:	16 c0       	rjmp	.+44     	; 0x9600 <vfprintf+0xd2>
    95d4:	83 2d       	mov	r24, r3
    95d6:	82 60       	ori	r24, 0x02	; 2
    95d8:	38 2e       	mov	r3, r24
    95da:	e3 2d       	mov	r30, r3
    95dc:	e4 60       	ori	r30, 0x04	; 4
    95de:	3e 2e       	mov	r3, r30
    95e0:	2a c0       	rjmp	.+84     	; 0x9636 <vfprintf+0x108>
    95e2:	f3 2d       	mov	r31, r3
    95e4:	f8 60       	ori	r31, 0x08	; 8
    95e6:	1d c0       	rjmp	.+58     	; 0x9622 <vfprintf+0xf4>
    95e8:	37 fc       	sbrc	r3, 7
    95ea:	2d c0       	rjmp	.+90     	; 0x9646 <vfprintf+0x118>
    95ec:	20 ed       	ldi	r18, 0xD0	; 208
    95ee:	28 0f       	add	r18, r24
    95f0:	2a 30       	cpi	r18, 0x0A	; 10
    95f2:	40 f0       	brcs	.+16     	; 0x9604 <vfprintf+0xd6>
    95f4:	8e 32       	cpi	r24, 0x2E	; 46
    95f6:	b9 f4       	brne	.+46     	; 0x9626 <vfprintf+0xf8>
    95f8:	36 fc       	sbrc	r3, 6
    95fa:	81 c1       	rjmp	.+770    	; 0x98fe <vfprintf+0x3d0>
    95fc:	23 2d       	mov	r18, r3
    95fe:	20 64       	ori	r18, 0x40	; 64
    9600:	32 2e       	mov	r3, r18
    9602:	19 c0       	rjmp	.+50     	; 0x9636 <vfprintf+0x108>
    9604:	36 fe       	sbrs	r3, 6
    9606:	06 c0       	rjmp	.+12     	; 0x9614 <vfprintf+0xe6>
    9608:	8a e0       	ldi	r24, 0x0A	; 10
    960a:	98 9e       	mul	r9, r24
    960c:	20 0d       	add	r18, r0
    960e:	11 24       	eor	r1, r1
    9610:	92 2e       	mov	r9, r18
    9612:	11 c0       	rjmp	.+34     	; 0x9636 <vfprintf+0x108>
    9614:	ea e0       	ldi	r30, 0x0A	; 10
    9616:	2e 9e       	mul	r2, r30
    9618:	20 0d       	add	r18, r0
    961a:	11 24       	eor	r1, r1
    961c:	22 2e       	mov	r2, r18
    961e:	f3 2d       	mov	r31, r3
    9620:	f0 62       	ori	r31, 0x20	; 32
    9622:	3f 2e       	mov	r3, r31
    9624:	08 c0       	rjmp	.+16     	; 0x9636 <vfprintf+0x108>
    9626:	8c 36       	cpi	r24, 0x6C	; 108
    9628:	21 f4       	brne	.+8      	; 0x9632 <vfprintf+0x104>
    962a:	83 2d       	mov	r24, r3
    962c:	80 68       	ori	r24, 0x80	; 128
    962e:	38 2e       	mov	r3, r24
    9630:	02 c0       	rjmp	.+4      	; 0x9636 <vfprintf+0x108>
    9632:	88 36       	cpi	r24, 0x68	; 104
    9634:	41 f4       	brne	.+16     	; 0x9646 <vfprintf+0x118>
    9636:	f7 01       	movw	r30, r14
    9638:	93 fd       	sbrc	r25, 3
    963a:	85 91       	lpm	r24, Z+
    963c:	93 ff       	sbrs	r25, 3
    963e:	81 91       	ld	r24, Z+
    9640:	7f 01       	movw	r14, r30
    9642:	81 11       	cpse	r24, r1
    9644:	b3 cf       	rjmp	.-154    	; 0x95ac <vfprintf+0x7e>
    9646:	98 2f       	mov	r25, r24
    9648:	9f 7d       	andi	r25, 0xDF	; 223
    964a:	95 54       	subi	r25, 0x45	; 69
    964c:	93 30       	cpi	r25, 0x03	; 3
    964e:	28 f4       	brcc	.+10     	; 0x965a <vfprintf+0x12c>
    9650:	0c 5f       	subi	r16, 0xFC	; 252
    9652:	1f 4f       	sbci	r17, 0xFF	; 255
    9654:	9f e3       	ldi	r25, 0x3F	; 63
    9656:	99 83       	std	Y+1, r25	; 0x01
    9658:	0d c0       	rjmp	.+26     	; 0x9674 <vfprintf+0x146>
    965a:	83 36       	cpi	r24, 0x63	; 99
    965c:	31 f0       	breq	.+12     	; 0x966a <vfprintf+0x13c>
    965e:	83 37       	cpi	r24, 0x73	; 115
    9660:	71 f0       	breq	.+28     	; 0x967e <vfprintf+0x150>
    9662:	83 35       	cpi	r24, 0x53	; 83
    9664:	09 f0       	breq	.+2      	; 0x9668 <vfprintf+0x13a>
    9666:	59 c0       	rjmp	.+178    	; 0x971a <vfprintf+0x1ec>
    9668:	21 c0       	rjmp	.+66     	; 0x96ac <vfprintf+0x17e>
    966a:	f8 01       	movw	r30, r16
    966c:	80 81       	ld	r24, Z
    966e:	89 83       	std	Y+1, r24	; 0x01
    9670:	0e 5f       	subi	r16, 0xFE	; 254
    9672:	1f 4f       	sbci	r17, 0xFF	; 255
    9674:	88 24       	eor	r8, r8
    9676:	83 94       	inc	r8
    9678:	91 2c       	mov	r9, r1
    967a:	53 01       	movw	r10, r6
    967c:	13 c0       	rjmp	.+38     	; 0x96a4 <vfprintf+0x176>
    967e:	28 01       	movw	r4, r16
    9680:	f2 e0       	ldi	r31, 0x02	; 2
    9682:	4f 0e       	add	r4, r31
    9684:	51 1c       	adc	r5, r1
    9686:	f8 01       	movw	r30, r16
    9688:	a0 80       	ld	r10, Z
    968a:	b1 80       	ldd	r11, Z+1	; 0x01
    968c:	36 fe       	sbrs	r3, 6
    968e:	03 c0       	rjmp	.+6      	; 0x9696 <vfprintf+0x168>
    9690:	69 2d       	mov	r22, r9
    9692:	70 e0       	ldi	r23, 0x00	; 0
    9694:	02 c0       	rjmp	.+4      	; 0x969a <vfprintf+0x16c>
    9696:	6f ef       	ldi	r22, 0xFF	; 255
    9698:	7f ef       	ldi	r23, 0xFF	; 255
    969a:	c5 01       	movw	r24, r10
    969c:	0e 94 a6 4c 	call	0x994c	; 0x994c <strnlen>
    96a0:	4c 01       	movw	r8, r24
    96a2:	82 01       	movw	r16, r4
    96a4:	f3 2d       	mov	r31, r3
    96a6:	ff 77       	andi	r31, 0x7F	; 127
    96a8:	3f 2e       	mov	r3, r31
    96aa:	16 c0       	rjmp	.+44     	; 0x96d8 <vfprintf+0x1aa>
    96ac:	28 01       	movw	r4, r16
    96ae:	22 e0       	ldi	r18, 0x02	; 2
    96b0:	42 0e       	add	r4, r18
    96b2:	51 1c       	adc	r5, r1
    96b4:	f8 01       	movw	r30, r16
    96b6:	a0 80       	ld	r10, Z
    96b8:	b1 80       	ldd	r11, Z+1	; 0x01
    96ba:	36 fe       	sbrs	r3, 6
    96bc:	03 c0       	rjmp	.+6      	; 0x96c4 <vfprintf+0x196>
    96be:	69 2d       	mov	r22, r9
    96c0:	70 e0       	ldi	r23, 0x00	; 0
    96c2:	02 c0       	rjmp	.+4      	; 0x96c8 <vfprintf+0x19a>
    96c4:	6f ef       	ldi	r22, 0xFF	; 255
    96c6:	7f ef       	ldi	r23, 0xFF	; 255
    96c8:	c5 01       	movw	r24, r10
    96ca:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strnlen_P>
    96ce:	4c 01       	movw	r8, r24
    96d0:	f3 2d       	mov	r31, r3
    96d2:	f0 68       	ori	r31, 0x80	; 128
    96d4:	3f 2e       	mov	r3, r31
    96d6:	82 01       	movw	r16, r4
    96d8:	33 fc       	sbrc	r3, 3
    96da:	1b c0       	rjmp	.+54     	; 0x9712 <vfprintf+0x1e4>
    96dc:	82 2d       	mov	r24, r2
    96de:	90 e0       	ldi	r25, 0x00	; 0
    96e0:	88 16       	cp	r8, r24
    96e2:	99 06       	cpc	r9, r25
    96e4:	b0 f4       	brcc	.+44     	; 0x9712 <vfprintf+0x1e4>
    96e6:	b6 01       	movw	r22, r12
    96e8:	80 e2       	ldi	r24, 0x20	; 32
    96ea:	90 e0       	ldi	r25, 0x00	; 0
    96ec:	0e 94 b1 4c 	call	0x9962	; 0x9962 <fputc>
    96f0:	2a 94       	dec	r2
    96f2:	f4 cf       	rjmp	.-24     	; 0x96dc <vfprintf+0x1ae>
    96f4:	f5 01       	movw	r30, r10
    96f6:	37 fc       	sbrc	r3, 7
    96f8:	85 91       	lpm	r24, Z+
    96fa:	37 fe       	sbrs	r3, 7
    96fc:	81 91       	ld	r24, Z+
    96fe:	5f 01       	movw	r10, r30
    9700:	b6 01       	movw	r22, r12
    9702:	90 e0       	ldi	r25, 0x00	; 0
    9704:	0e 94 b1 4c 	call	0x9962	; 0x9962 <fputc>
    9708:	21 10       	cpse	r2, r1
    970a:	2a 94       	dec	r2
    970c:	21 e0       	ldi	r18, 0x01	; 1
    970e:	82 1a       	sub	r8, r18
    9710:	91 08       	sbc	r9, r1
    9712:	81 14       	cp	r8, r1
    9714:	91 04       	cpc	r9, r1
    9716:	71 f7       	brne	.-36     	; 0x96f4 <vfprintf+0x1c6>
    9718:	e8 c0       	rjmp	.+464    	; 0x98ea <vfprintf+0x3bc>
    971a:	84 36       	cpi	r24, 0x64	; 100
    971c:	11 f0       	breq	.+4      	; 0x9722 <vfprintf+0x1f4>
    971e:	89 36       	cpi	r24, 0x69	; 105
    9720:	41 f5       	brne	.+80     	; 0x9772 <vfprintf+0x244>
    9722:	f8 01       	movw	r30, r16
    9724:	37 fe       	sbrs	r3, 7
    9726:	07 c0       	rjmp	.+14     	; 0x9736 <vfprintf+0x208>
    9728:	60 81       	ld	r22, Z
    972a:	71 81       	ldd	r23, Z+1	; 0x01
    972c:	82 81       	ldd	r24, Z+2	; 0x02
    972e:	93 81       	ldd	r25, Z+3	; 0x03
    9730:	0c 5f       	subi	r16, 0xFC	; 252
    9732:	1f 4f       	sbci	r17, 0xFF	; 255
    9734:	08 c0       	rjmp	.+16     	; 0x9746 <vfprintf+0x218>
    9736:	60 81       	ld	r22, Z
    9738:	71 81       	ldd	r23, Z+1	; 0x01
    973a:	07 2e       	mov	r0, r23
    973c:	00 0c       	add	r0, r0
    973e:	88 0b       	sbc	r24, r24
    9740:	99 0b       	sbc	r25, r25
    9742:	0e 5f       	subi	r16, 0xFE	; 254
    9744:	1f 4f       	sbci	r17, 0xFF	; 255
    9746:	f3 2d       	mov	r31, r3
    9748:	ff 76       	andi	r31, 0x6F	; 111
    974a:	3f 2e       	mov	r3, r31
    974c:	97 ff       	sbrs	r25, 7
    974e:	09 c0       	rjmp	.+18     	; 0x9762 <vfprintf+0x234>
    9750:	90 95       	com	r25
    9752:	80 95       	com	r24
    9754:	70 95       	com	r23
    9756:	61 95       	neg	r22
    9758:	7f 4f       	sbci	r23, 0xFF	; 255
    975a:	8f 4f       	sbci	r24, 0xFF	; 255
    975c:	9f 4f       	sbci	r25, 0xFF	; 255
    975e:	f0 68       	ori	r31, 0x80	; 128
    9760:	3f 2e       	mov	r3, r31
    9762:	2a e0       	ldi	r18, 0x0A	; 10
    9764:	30 e0       	ldi	r19, 0x00	; 0
    9766:	a3 01       	movw	r20, r6
    9768:	0e 94 ed 4c 	call	0x99da	; 0x99da <__ultoa_invert>
    976c:	88 2e       	mov	r8, r24
    976e:	86 18       	sub	r8, r6
    9770:	45 c0       	rjmp	.+138    	; 0x97fc <vfprintf+0x2ce>
    9772:	85 37       	cpi	r24, 0x75	; 117
    9774:	31 f4       	brne	.+12     	; 0x9782 <vfprintf+0x254>
    9776:	23 2d       	mov	r18, r3
    9778:	2f 7e       	andi	r18, 0xEF	; 239
    977a:	b2 2e       	mov	r11, r18
    977c:	2a e0       	ldi	r18, 0x0A	; 10
    977e:	30 e0       	ldi	r19, 0x00	; 0
    9780:	25 c0       	rjmp	.+74     	; 0x97cc <vfprintf+0x29e>
    9782:	93 2d       	mov	r25, r3
    9784:	99 7f       	andi	r25, 0xF9	; 249
    9786:	b9 2e       	mov	r11, r25
    9788:	8f 36       	cpi	r24, 0x6F	; 111
    978a:	c1 f0       	breq	.+48     	; 0x97bc <vfprintf+0x28e>
    978c:	18 f4       	brcc	.+6      	; 0x9794 <vfprintf+0x266>
    978e:	88 35       	cpi	r24, 0x58	; 88
    9790:	79 f0       	breq	.+30     	; 0x97b0 <vfprintf+0x282>
    9792:	b5 c0       	rjmp	.+362    	; 0x98fe <vfprintf+0x3d0>
    9794:	80 37       	cpi	r24, 0x70	; 112
    9796:	19 f0       	breq	.+6      	; 0x979e <vfprintf+0x270>
    9798:	88 37       	cpi	r24, 0x78	; 120
    979a:	21 f0       	breq	.+8      	; 0x97a4 <vfprintf+0x276>
    979c:	b0 c0       	rjmp	.+352    	; 0x98fe <vfprintf+0x3d0>
    979e:	e9 2f       	mov	r30, r25
    97a0:	e0 61       	ori	r30, 0x10	; 16
    97a2:	be 2e       	mov	r11, r30
    97a4:	b4 fe       	sbrs	r11, 4
    97a6:	0d c0       	rjmp	.+26     	; 0x97c2 <vfprintf+0x294>
    97a8:	fb 2d       	mov	r31, r11
    97aa:	f4 60       	ori	r31, 0x04	; 4
    97ac:	bf 2e       	mov	r11, r31
    97ae:	09 c0       	rjmp	.+18     	; 0x97c2 <vfprintf+0x294>
    97b0:	34 fe       	sbrs	r3, 4
    97b2:	0a c0       	rjmp	.+20     	; 0x97c8 <vfprintf+0x29a>
    97b4:	29 2f       	mov	r18, r25
    97b6:	26 60       	ori	r18, 0x06	; 6
    97b8:	b2 2e       	mov	r11, r18
    97ba:	06 c0       	rjmp	.+12     	; 0x97c8 <vfprintf+0x29a>
    97bc:	28 e0       	ldi	r18, 0x08	; 8
    97be:	30 e0       	ldi	r19, 0x00	; 0
    97c0:	05 c0       	rjmp	.+10     	; 0x97cc <vfprintf+0x29e>
    97c2:	20 e1       	ldi	r18, 0x10	; 16
    97c4:	30 e0       	ldi	r19, 0x00	; 0
    97c6:	02 c0       	rjmp	.+4      	; 0x97cc <vfprintf+0x29e>
    97c8:	20 e1       	ldi	r18, 0x10	; 16
    97ca:	32 e0       	ldi	r19, 0x02	; 2
    97cc:	f8 01       	movw	r30, r16
    97ce:	b7 fe       	sbrs	r11, 7
    97d0:	07 c0       	rjmp	.+14     	; 0x97e0 <vfprintf+0x2b2>
    97d2:	60 81       	ld	r22, Z
    97d4:	71 81       	ldd	r23, Z+1	; 0x01
    97d6:	82 81       	ldd	r24, Z+2	; 0x02
    97d8:	93 81       	ldd	r25, Z+3	; 0x03
    97da:	0c 5f       	subi	r16, 0xFC	; 252
    97dc:	1f 4f       	sbci	r17, 0xFF	; 255
    97de:	06 c0       	rjmp	.+12     	; 0x97ec <vfprintf+0x2be>
    97e0:	60 81       	ld	r22, Z
    97e2:	71 81       	ldd	r23, Z+1	; 0x01
    97e4:	80 e0       	ldi	r24, 0x00	; 0
    97e6:	90 e0       	ldi	r25, 0x00	; 0
    97e8:	0e 5f       	subi	r16, 0xFE	; 254
    97ea:	1f 4f       	sbci	r17, 0xFF	; 255
    97ec:	a3 01       	movw	r20, r6
    97ee:	0e 94 ed 4c 	call	0x99da	; 0x99da <__ultoa_invert>
    97f2:	88 2e       	mov	r8, r24
    97f4:	86 18       	sub	r8, r6
    97f6:	fb 2d       	mov	r31, r11
    97f8:	ff 77       	andi	r31, 0x7F	; 127
    97fa:	3f 2e       	mov	r3, r31
    97fc:	36 fe       	sbrs	r3, 6
    97fe:	0d c0       	rjmp	.+26     	; 0x981a <vfprintf+0x2ec>
    9800:	23 2d       	mov	r18, r3
    9802:	2e 7f       	andi	r18, 0xFE	; 254
    9804:	a2 2e       	mov	r10, r18
    9806:	89 14       	cp	r8, r9
    9808:	58 f4       	brcc	.+22     	; 0x9820 <vfprintf+0x2f2>
    980a:	34 fe       	sbrs	r3, 4
    980c:	0b c0       	rjmp	.+22     	; 0x9824 <vfprintf+0x2f6>
    980e:	32 fc       	sbrc	r3, 2
    9810:	09 c0       	rjmp	.+18     	; 0x9824 <vfprintf+0x2f6>
    9812:	83 2d       	mov	r24, r3
    9814:	8e 7e       	andi	r24, 0xEE	; 238
    9816:	a8 2e       	mov	r10, r24
    9818:	05 c0       	rjmp	.+10     	; 0x9824 <vfprintf+0x2f6>
    981a:	b8 2c       	mov	r11, r8
    981c:	a3 2c       	mov	r10, r3
    981e:	03 c0       	rjmp	.+6      	; 0x9826 <vfprintf+0x2f8>
    9820:	b8 2c       	mov	r11, r8
    9822:	01 c0       	rjmp	.+2      	; 0x9826 <vfprintf+0x2f8>
    9824:	b9 2c       	mov	r11, r9
    9826:	a4 fe       	sbrs	r10, 4
    9828:	0f c0       	rjmp	.+30     	; 0x9848 <vfprintf+0x31a>
    982a:	fe 01       	movw	r30, r28
    982c:	e8 0d       	add	r30, r8
    982e:	f1 1d       	adc	r31, r1
    9830:	80 81       	ld	r24, Z
    9832:	80 33       	cpi	r24, 0x30	; 48
    9834:	21 f4       	brne	.+8      	; 0x983e <vfprintf+0x310>
    9836:	9a 2d       	mov	r25, r10
    9838:	99 7e       	andi	r25, 0xE9	; 233
    983a:	a9 2e       	mov	r10, r25
    983c:	09 c0       	rjmp	.+18     	; 0x9850 <vfprintf+0x322>
    983e:	a2 fe       	sbrs	r10, 2
    9840:	06 c0       	rjmp	.+12     	; 0x984e <vfprintf+0x320>
    9842:	b3 94       	inc	r11
    9844:	b3 94       	inc	r11
    9846:	04 c0       	rjmp	.+8      	; 0x9850 <vfprintf+0x322>
    9848:	8a 2d       	mov	r24, r10
    984a:	86 78       	andi	r24, 0x86	; 134
    984c:	09 f0       	breq	.+2      	; 0x9850 <vfprintf+0x322>
    984e:	b3 94       	inc	r11
    9850:	a3 fc       	sbrc	r10, 3
    9852:	11 c0       	rjmp	.+34     	; 0x9876 <vfprintf+0x348>
    9854:	a0 fe       	sbrs	r10, 0
    9856:	06 c0       	rjmp	.+12     	; 0x9864 <vfprintf+0x336>
    9858:	b2 14       	cp	r11, r2
    985a:	88 f4       	brcc	.+34     	; 0x987e <vfprintf+0x350>
    985c:	28 0c       	add	r2, r8
    985e:	92 2c       	mov	r9, r2
    9860:	9b 18       	sub	r9, r11
    9862:	0e c0       	rjmp	.+28     	; 0x9880 <vfprintf+0x352>
    9864:	b2 14       	cp	r11, r2
    9866:	60 f4       	brcc	.+24     	; 0x9880 <vfprintf+0x352>
    9868:	b6 01       	movw	r22, r12
    986a:	80 e2       	ldi	r24, 0x20	; 32
    986c:	90 e0       	ldi	r25, 0x00	; 0
    986e:	0e 94 b1 4c 	call	0x9962	; 0x9962 <fputc>
    9872:	b3 94       	inc	r11
    9874:	f7 cf       	rjmp	.-18     	; 0x9864 <vfprintf+0x336>
    9876:	b2 14       	cp	r11, r2
    9878:	18 f4       	brcc	.+6      	; 0x9880 <vfprintf+0x352>
    987a:	2b 18       	sub	r2, r11
    987c:	02 c0       	rjmp	.+4      	; 0x9882 <vfprintf+0x354>
    987e:	98 2c       	mov	r9, r8
    9880:	21 2c       	mov	r2, r1
    9882:	a4 fe       	sbrs	r10, 4
    9884:	10 c0       	rjmp	.+32     	; 0x98a6 <vfprintf+0x378>
    9886:	b6 01       	movw	r22, r12
    9888:	80 e3       	ldi	r24, 0x30	; 48
    988a:	90 e0       	ldi	r25, 0x00	; 0
    988c:	0e 94 b1 4c 	call	0x9962	; 0x9962 <fputc>
    9890:	a2 fe       	sbrs	r10, 2
    9892:	17 c0       	rjmp	.+46     	; 0x98c2 <vfprintf+0x394>
    9894:	a1 fc       	sbrc	r10, 1
    9896:	03 c0       	rjmp	.+6      	; 0x989e <vfprintf+0x370>
    9898:	88 e7       	ldi	r24, 0x78	; 120
    989a:	90 e0       	ldi	r25, 0x00	; 0
    989c:	02 c0       	rjmp	.+4      	; 0x98a2 <vfprintf+0x374>
    989e:	88 e5       	ldi	r24, 0x58	; 88
    98a0:	90 e0       	ldi	r25, 0x00	; 0
    98a2:	b6 01       	movw	r22, r12
    98a4:	0c c0       	rjmp	.+24     	; 0x98be <vfprintf+0x390>
    98a6:	8a 2d       	mov	r24, r10
    98a8:	86 78       	andi	r24, 0x86	; 134
    98aa:	59 f0       	breq	.+22     	; 0x98c2 <vfprintf+0x394>
    98ac:	a1 fe       	sbrs	r10, 1
    98ae:	02 c0       	rjmp	.+4      	; 0x98b4 <vfprintf+0x386>
    98b0:	8b e2       	ldi	r24, 0x2B	; 43
    98b2:	01 c0       	rjmp	.+2      	; 0x98b6 <vfprintf+0x388>
    98b4:	80 e2       	ldi	r24, 0x20	; 32
    98b6:	a7 fc       	sbrc	r10, 7
    98b8:	8d e2       	ldi	r24, 0x2D	; 45
    98ba:	b6 01       	movw	r22, r12
    98bc:	90 e0       	ldi	r25, 0x00	; 0
    98be:	0e 94 b1 4c 	call	0x9962	; 0x9962 <fputc>
    98c2:	89 14       	cp	r8, r9
    98c4:	38 f4       	brcc	.+14     	; 0x98d4 <vfprintf+0x3a6>
    98c6:	b6 01       	movw	r22, r12
    98c8:	80 e3       	ldi	r24, 0x30	; 48
    98ca:	90 e0       	ldi	r25, 0x00	; 0
    98cc:	0e 94 b1 4c 	call	0x9962	; 0x9962 <fputc>
    98d0:	9a 94       	dec	r9
    98d2:	f7 cf       	rjmp	.-18     	; 0x98c2 <vfprintf+0x394>
    98d4:	8a 94       	dec	r8
    98d6:	f3 01       	movw	r30, r6
    98d8:	e8 0d       	add	r30, r8
    98da:	f1 1d       	adc	r31, r1
    98dc:	80 81       	ld	r24, Z
    98de:	b6 01       	movw	r22, r12
    98e0:	90 e0       	ldi	r25, 0x00	; 0
    98e2:	0e 94 b1 4c 	call	0x9962	; 0x9962 <fputc>
    98e6:	81 10       	cpse	r8, r1
    98e8:	f5 cf       	rjmp	.-22     	; 0x98d4 <vfprintf+0x3a6>
    98ea:	22 20       	and	r2, r2
    98ec:	09 f4       	brne	.+2      	; 0x98f0 <vfprintf+0x3c2>
    98ee:	42 ce       	rjmp	.-892    	; 0x9574 <vfprintf+0x46>
    98f0:	b6 01       	movw	r22, r12
    98f2:	80 e2       	ldi	r24, 0x20	; 32
    98f4:	90 e0       	ldi	r25, 0x00	; 0
    98f6:	0e 94 b1 4c 	call	0x9962	; 0x9962 <fputc>
    98fa:	2a 94       	dec	r2
    98fc:	f6 cf       	rjmp	.-20     	; 0x98ea <vfprintf+0x3bc>
    98fe:	f6 01       	movw	r30, r12
    9900:	86 81       	ldd	r24, Z+6	; 0x06
    9902:	97 81       	ldd	r25, Z+7	; 0x07
    9904:	02 c0       	rjmp	.+4      	; 0x990a <vfprintf+0x3dc>
    9906:	8f ef       	ldi	r24, 0xFF	; 255
    9908:	9f ef       	ldi	r25, 0xFF	; 255
    990a:	2b 96       	adiw	r28, 0x0b	; 11
    990c:	cd bf       	out	0x3d, r28	; 61
    990e:	de bf       	out	0x3e, r29	; 62
    9910:	df 91       	pop	r29
    9912:	cf 91       	pop	r28
    9914:	1f 91       	pop	r17
    9916:	0f 91       	pop	r16
    9918:	ff 90       	pop	r15
    991a:	ef 90       	pop	r14
    991c:	df 90       	pop	r13
    991e:	cf 90       	pop	r12
    9920:	bf 90       	pop	r11
    9922:	af 90       	pop	r10
    9924:	9f 90       	pop	r9
    9926:	8f 90       	pop	r8
    9928:	7f 90       	pop	r7
    992a:	6f 90       	pop	r6
    992c:	5f 90       	pop	r5
    992e:	4f 90       	pop	r4
    9930:	3f 90       	pop	r3
    9932:	2f 90       	pop	r2
    9934:	08 95       	ret

00009936 <strnlen_P>:
    9936:	fc 01       	movw	r30, r24
    9938:	05 90       	lpm	r0, Z+
    993a:	61 50       	subi	r22, 0x01	; 1
    993c:	70 40       	sbci	r23, 0x00	; 0
    993e:	01 10       	cpse	r0, r1
    9940:	d8 f7       	brcc	.-10     	; 0x9938 <strnlen_P+0x2>
    9942:	80 95       	com	r24
    9944:	90 95       	com	r25
    9946:	8e 0f       	add	r24, r30
    9948:	9f 1f       	adc	r25, r31
    994a:	08 95       	ret

0000994c <strnlen>:
    994c:	fc 01       	movw	r30, r24
    994e:	61 50       	subi	r22, 0x01	; 1
    9950:	70 40       	sbci	r23, 0x00	; 0
    9952:	01 90       	ld	r0, Z+
    9954:	01 10       	cpse	r0, r1
    9956:	d8 f7       	brcc	.-10     	; 0x994e <strnlen+0x2>
    9958:	80 95       	com	r24
    995a:	90 95       	com	r25
    995c:	8e 0f       	add	r24, r30
    995e:	9f 1f       	adc	r25, r31
    9960:	08 95       	ret

00009962 <fputc>:
    9962:	0f 93       	push	r16
    9964:	1f 93       	push	r17
    9966:	cf 93       	push	r28
    9968:	df 93       	push	r29
    996a:	fb 01       	movw	r30, r22
    996c:	23 81       	ldd	r18, Z+3	; 0x03
    996e:	21 fd       	sbrc	r18, 1
    9970:	03 c0       	rjmp	.+6      	; 0x9978 <fputc+0x16>
    9972:	8f ef       	ldi	r24, 0xFF	; 255
    9974:	9f ef       	ldi	r25, 0xFF	; 255
    9976:	2c c0       	rjmp	.+88     	; 0x99d0 <fputc+0x6e>
    9978:	22 ff       	sbrs	r18, 2
    997a:	16 c0       	rjmp	.+44     	; 0x99a8 <fputc+0x46>
    997c:	46 81       	ldd	r20, Z+6	; 0x06
    997e:	57 81       	ldd	r21, Z+7	; 0x07
    9980:	24 81       	ldd	r18, Z+4	; 0x04
    9982:	35 81       	ldd	r19, Z+5	; 0x05
    9984:	42 17       	cp	r20, r18
    9986:	53 07       	cpc	r21, r19
    9988:	44 f4       	brge	.+16     	; 0x999a <fputc+0x38>
    998a:	a0 81       	ld	r26, Z
    998c:	b1 81       	ldd	r27, Z+1	; 0x01
    998e:	9d 01       	movw	r18, r26
    9990:	2f 5f       	subi	r18, 0xFF	; 255
    9992:	3f 4f       	sbci	r19, 0xFF	; 255
    9994:	20 83       	st	Z, r18
    9996:	31 83       	std	Z+1, r19	; 0x01
    9998:	8c 93       	st	X, r24
    999a:	26 81       	ldd	r18, Z+6	; 0x06
    999c:	37 81       	ldd	r19, Z+7	; 0x07
    999e:	2f 5f       	subi	r18, 0xFF	; 255
    99a0:	3f 4f       	sbci	r19, 0xFF	; 255
    99a2:	26 83       	std	Z+6, r18	; 0x06
    99a4:	37 83       	std	Z+7, r19	; 0x07
    99a6:	14 c0       	rjmp	.+40     	; 0x99d0 <fputc+0x6e>
    99a8:	8b 01       	movw	r16, r22
    99aa:	ec 01       	movw	r28, r24
    99ac:	fb 01       	movw	r30, r22
    99ae:	00 84       	ldd	r0, Z+8	; 0x08
    99b0:	f1 85       	ldd	r31, Z+9	; 0x09
    99b2:	e0 2d       	mov	r30, r0
    99b4:	09 95       	icall
    99b6:	89 2b       	or	r24, r25
    99b8:	e1 f6       	brne	.-72     	; 0x9972 <fputc+0x10>
    99ba:	d8 01       	movw	r26, r16
    99bc:	16 96       	adiw	r26, 0x06	; 6
    99be:	8d 91       	ld	r24, X+
    99c0:	9c 91       	ld	r25, X
    99c2:	17 97       	sbiw	r26, 0x07	; 7
    99c4:	01 96       	adiw	r24, 0x01	; 1
    99c6:	16 96       	adiw	r26, 0x06	; 6
    99c8:	8d 93       	st	X+, r24
    99ca:	9c 93       	st	X, r25
    99cc:	17 97       	sbiw	r26, 0x07	; 7
    99ce:	ce 01       	movw	r24, r28
    99d0:	df 91       	pop	r29
    99d2:	cf 91       	pop	r28
    99d4:	1f 91       	pop	r17
    99d6:	0f 91       	pop	r16
    99d8:	08 95       	ret

000099da <__ultoa_invert>:
    99da:	fa 01       	movw	r30, r20
    99dc:	aa 27       	eor	r26, r26
    99de:	28 30       	cpi	r18, 0x08	; 8
    99e0:	51 f1       	breq	.+84     	; 0x9a36 <__ultoa_invert+0x5c>
    99e2:	20 31       	cpi	r18, 0x10	; 16
    99e4:	81 f1       	breq	.+96     	; 0x9a46 <__ultoa_invert+0x6c>
    99e6:	e8 94       	clt
    99e8:	6f 93       	push	r22
    99ea:	6e 7f       	andi	r22, 0xFE	; 254
    99ec:	6e 5f       	subi	r22, 0xFE	; 254
    99ee:	7f 4f       	sbci	r23, 0xFF	; 255
    99f0:	8f 4f       	sbci	r24, 0xFF	; 255
    99f2:	9f 4f       	sbci	r25, 0xFF	; 255
    99f4:	af 4f       	sbci	r26, 0xFF	; 255
    99f6:	b1 e0       	ldi	r27, 0x01	; 1
    99f8:	3e d0       	rcall	.+124    	; 0x9a76 <__ultoa_invert+0x9c>
    99fa:	b4 e0       	ldi	r27, 0x04	; 4
    99fc:	3c d0       	rcall	.+120    	; 0x9a76 <__ultoa_invert+0x9c>
    99fe:	67 0f       	add	r22, r23
    9a00:	78 1f       	adc	r23, r24
    9a02:	89 1f       	adc	r24, r25
    9a04:	9a 1f       	adc	r25, r26
    9a06:	a1 1d       	adc	r26, r1
    9a08:	68 0f       	add	r22, r24
    9a0a:	79 1f       	adc	r23, r25
    9a0c:	8a 1f       	adc	r24, r26
    9a0e:	91 1d       	adc	r25, r1
    9a10:	a1 1d       	adc	r26, r1
    9a12:	6a 0f       	add	r22, r26
    9a14:	71 1d       	adc	r23, r1
    9a16:	81 1d       	adc	r24, r1
    9a18:	91 1d       	adc	r25, r1
    9a1a:	a1 1d       	adc	r26, r1
    9a1c:	20 d0       	rcall	.+64     	; 0x9a5e <__ultoa_invert+0x84>
    9a1e:	09 f4       	brne	.+2      	; 0x9a22 <__ultoa_invert+0x48>
    9a20:	68 94       	set
    9a22:	3f 91       	pop	r19
    9a24:	2a e0       	ldi	r18, 0x0A	; 10
    9a26:	26 9f       	mul	r18, r22
    9a28:	11 24       	eor	r1, r1
    9a2a:	30 19       	sub	r19, r0
    9a2c:	30 5d       	subi	r19, 0xD0	; 208
    9a2e:	31 93       	st	Z+, r19
    9a30:	de f6       	brtc	.-74     	; 0x99e8 <__ultoa_invert+0xe>
    9a32:	cf 01       	movw	r24, r30
    9a34:	08 95       	ret
    9a36:	46 2f       	mov	r20, r22
    9a38:	47 70       	andi	r20, 0x07	; 7
    9a3a:	40 5d       	subi	r20, 0xD0	; 208
    9a3c:	41 93       	st	Z+, r20
    9a3e:	b3 e0       	ldi	r27, 0x03	; 3
    9a40:	0f d0       	rcall	.+30     	; 0x9a60 <__ultoa_invert+0x86>
    9a42:	c9 f7       	brne	.-14     	; 0x9a36 <__ultoa_invert+0x5c>
    9a44:	f6 cf       	rjmp	.-20     	; 0x9a32 <__ultoa_invert+0x58>
    9a46:	46 2f       	mov	r20, r22
    9a48:	4f 70       	andi	r20, 0x0F	; 15
    9a4a:	40 5d       	subi	r20, 0xD0	; 208
    9a4c:	4a 33       	cpi	r20, 0x3A	; 58
    9a4e:	18 f0       	brcs	.+6      	; 0x9a56 <__ultoa_invert+0x7c>
    9a50:	49 5d       	subi	r20, 0xD9	; 217
    9a52:	31 fd       	sbrc	r19, 1
    9a54:	40 52       	subi	r20, 0x20	; 32
    9a56:	41 93       	st	Z+, r20
    9a58:	02 d0       	rcall	.+4      	; 0x9a5e <__ultoa_invert+0x84>
    9a5a:	a9 f7       	brne	.-22     	; 0x9a46 <__ultoa_invert+0x6c>
    9a5c:	ea cf       	rjmp	.-44     	; 0x9a32 <__ultoa_invert+0x58>
    9a5e:	b4 e0       	ldi	r27, 0x04	; 4
    9a60:	a6 95       	lsr	r26
    9a62:	97 95       	ror	r25
    9a64:	87 95       	ror	r24
    9a66:	77 95       	ror	r23
    9a68:	67 95       	ror	r22
    9a6a:	ba 95       	dec	r27
    9a6c:	c9 f7       	brne	.-14     	; 0x9a60 <__ultoa_invert+0x86>
    9a6e:	00 97       	sbiw	r24, 0x00	; 0
    9a70:	61 05       	cpc	r22, r1
    9a72:	71 05       	cpc	r23, r1
    9a74:	08 95       	ret
    9a76:	9b 01       	movw	r18, r22
    9a78:	ac 01       	movw	r20, r24
    9a7a:	0a 2e       	mov	r0, r26
    9a7c:	06 94       	lsr	r0
    9a7e:	57 95       	ror	r21
    9a80:	47 95       	ror	r20
    9a82:	37 95       	ror	r19
    9a84:	27 95       	ror	r18
    9a86:	ba 95       	dec	r27
    9a88:	c9 f7       	brne	.-14     	; 0x9a7c <__ultoa_invert+0xa2>
    9a8a:	62 0f       	add	r22, r18
    9a8c:	73 1f       	adc	r23, r19
    9a8e:	84 1f       	adc	r24, r20
    9a90:	95 1f       	adc	r25, r21
    9a92:	a0 1d       	adc	r26, r0
    9a94:	08 95       	ret

00009a96 <eeprom_read_byte>:
    9a96:	03 d0       	rcall	.+6      	; 0x9a9e <eeprom_mapen>
    9a98:	80 81       	ld	r24, Z
    9a9a:	99 27       	eor	r25, r25
    9a9c:	08 95       	ret

00009a9e <eeprom_mapen>:
    9a9e:	fc 01       	movw	r30, r24
    9aa0:	e0 50       	subi	r30, 0x00	; 0
    9aa2:	fc 4e       	sbci	r31, 0xEC	; 236
    9aa4:	08 95       	ret

00009aa6 <eeprom_read_dword>:
    9aa6:	0e 94 4f 4d 	call	0x9a9e	; 0x9a9e <eeprom_mapen>
    9aaa:	60 81       	ld	r22, Z
    9aac:	71 81       	ldd	r23, Z+1	; 0x01
    9aae:	82 81       	ldd	r24, Z+2	; 0x02
    9ab0:	93 81       	ldd	r25, Z+3	; 0x03
    9ab2:	08 95       	ret

00009ab4 <eeprom_read_word>:
    9ab4:	0e 94 4f 4d 	call	0x9a9e	; 0x9a9e <eeprom_mapen>
    9ab8:	80 81       	ld	r24, Z
    9aba:	91 81       	ldd	r25, Z+1	; 0x01
    9abc:	08 95       	ret

00009abe <__divmodqi4>:
    9abe:	87 fb       	bst	r24, 7
    9ac0:	08 2e       	mov	r0, r24
    9ac2:	06 26       	eor	r0, r22
    9ac4:	87 fd       	sbrc	r24, 7
    9ac6:	81 95       	neg	r24
    9ac8:	67 fd       	sbrc	r22, 7
    9aca:	61 95       	neg	r22
    9acc:	0e 94 74 4d 	call	0x9ae8	; 0x9ae8 <__udivmodqi4>
    9ad0:	0e f4       	brtc	.+2      	; 0x9ad4 <__divmodqi4_1>
    9ad2:	91 95       	neg	r25

00009ad4 <__divmodqi4_1>:
    9ad4:	07 fc       	sbrc	r0, 7
    9ad6:	81 95       	neg	r24

00009ad8 <__divmodqi4_exit>:
    9ad8:	08 95       	ret

00009ada <__xload_1>:
    9ada:	57 fd       	sbrc	r21, 7
    9adc:	03 c0       	rjmp	.+6      	; 0x9ae4 <__xload_1+0xa>
    9ade:	5b bf       	out	0x3b, r21	; 59
    9ae0:	67 91       	elpm	r22, Z+
    9ae2:	08 95       	ret
    9ae4:	60 81       	ld	r22, Z
    9ae6:	08 95       	ret

00009ae8 <__udivmodqi4>:
    9ae8:	99 1b       	sub	r25, r25
    9aea:	79 e0       	ldi	r23, 0x09	; 9
    9aec:	04 c0       	rjmp	.+8      	; 0x9af6 <__udivmodqi4_ep>

00009aee <__udivmodqi4_loop>:
    9aee:	99 1f       	adc	r25, r25
    9af0:	96 17       	cp	r25, r22
    9af2:	08 f0       	brcs	.+2      	; 0x9af6 <__udivmodqi4_ep>
    9af4:	96 1b       	sub	r25, r22

00009af6 <__udivmodqi4_ep>:
    9af6:	88 1f       	adc	r24, r24
    9af8:	7a 95       	dec	r23
    9afa:	c9 f7       	brne	.-14     	; 0x9aee <__udivmodqi4_loop>
    9afc:	80 95       	com	r24
    9afe:	08 95       	ret

00009b00 <__do_global_dtors>:
    9b00:	11 e0       	ldi	r17, 0x01	; 1
    9b02:	ce e7       	ldi	r28, 0x7E	; 126
    9b04:	d1 e0       	ldi	r29, 0x01	; 1
    9b06:	04 c0       	rjmp	.+8      	; 0x9b10 <__do_global_dtors+0x10>
    9b08:	fe 01       	movw	r30, r28
    9b0a:	0e 94 87 48 	call	0x910e	; 0x910e <__tablejump2__>
    9b0e:	21 96       	adiw	r28, 0x01	; 1
    9b10:	c0 38       	cpi	r28, 0x80	; 128
    9b12:	d1 07       	cpc	r29, r17
    9b14:	c9 f7       	brne	.-14     	; 0x9b08 <__do_global_dtors+0x8>
    9b16:	f8 94       	cli

00009b18 <__stop_program>:
    9b18:	ff cf       	rjmp	.-2      	; 0x9b18 <__stop_program>
