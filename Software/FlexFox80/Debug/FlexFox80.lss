
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000047e  00804000  000087c6  0000887a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000087c6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003e6  0080447e  0080447e  00008cf8  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  00008cf8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00008d2d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008d8c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000988  00000000  00000000  00008dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00012308  00000000  00000000  00009758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005bf5  00000000  00000000  0001ba60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000077d3  00000000  00000000  00021655  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001d34  00000000  00000000  00028e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005f44  00000000  00000000  0002ab5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a32e  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000910  00000000  00000000  0003adce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 01 	jmp	0x212	; 0x212 <__dtors_end>
       4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      18:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__vector_6>
      1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      28:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      2c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      30:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_12>
      34:	0c 94 a5 39 	jmp	0x734a	; 0x734a <__vector_13>
      38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      4c:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__vector_19>
      50:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_20>
      54:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      58:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      60:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__vector_24>
      64:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      68:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      6c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      70:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      74:	0c 94 bf 20 	jmp	0x417e	; 0x417e <__vector_29>
      78:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_30>
      7c:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_31>
      80:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_32>
      84:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      88:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      8c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      90:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      94:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      98:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      9c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a4:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__vector_41>
      a8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      ac:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      b0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      b4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      b8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      bc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      c0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      c4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      c8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      cc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      d0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      d4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      d8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      dc:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_55>
      e0:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_56>
      e4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      e8:	8d 27       	eor	r24, r29
      ea:	93 27       	eor	r25, r19
      ec:	75 27       	eor	r23, r21
      ee:	93 27       	eor	r25, r19
      f0:	93 27       	eor	r25, r19
      f2:	93 27       	eor	r25, r19
      f4:	7e 27       	eor	r23, r30
      f6:	93 27       	eor	r25, r19
      f8:	93 27       	eor	r25, r19
      fa:	93 27       	eor	r25, r19
      fc:	3c 27       	eor	r19, r28
      fe:	93 27       	eor	r25, r19
     100:	93 27       	eor	r25, r19
     102:	93 27       	eor	r25, r19
     104:	93 27       	eor	r25, r19
     106:	93 27       	eor	r25, r19
     108:	93 27       	eor	r25, r19
     10a:	93 27       	eor	r25, r19
     10c:	93 27       	eor	r25, r19
     10e:	93 27       	eor	r25, r19
     110:	93 27       	eor	r25, r19
     112:	93 27       	eor	r25, r19
     114:	93 27       	eor	r25, r19
     116:	93 27       	eor	r25, r19
     118:	93 27       	eor	r25, r19
     11a:	93 27       	eor	r25, r19
     11c:	93 27       	eor	r25, r19
     11e:	93 27       	eor	r25, r19
     120:	93 27       	eor	r25, r19
     122:	93 27       	eor	r25, r19
     124:	93 27       	eor	r25, r19
     126:	52 27       	eor	r21, r18
     128:	93 27       	eor	r25, r19
     12a:	93 27       	eor	r25, r19
     12c:	93 27       	eor	r25, r19
     12e:	93 27       	eor	r25, r19
     130:	93 27       	eor	r25, r19
     132:	93 27       	eor	r25, r19
     134:	93 27       	eor	r25, r19
     136:	93 27       	eor	r25, r19
     138:	69 27       	eor	r22, r25
     13a:	6f 27       	eor	r22, r31
     13c:	87 27       	eor	r24, r23
     13e:	23 27       	eor	r18, r19
     140:	93 27       	eor	r25, r19
     142:	93 27       	eor	r25, r19
     144:	93 27       	eor	r25, r19
     146:	2c 27       	eor	r18, r28
     148:	93 27       	eor	r25, r19
     14a:	93 27       	eor	r25, r19
     14c:	93 27       	eor	r25, r19
     14e:	35 27       	eor	r19, r21
     150:	e9 2e       	mov	r14, r25
     152:	ad 2e       	mov	r10, r29
     154:	d9 2e       	mov	r13, r25
     156:	f1 2e       	mov	r15, r17
     158:	dd 2e       	mov	r13, r29
     15a:	f1 2e       	mov	r15, r17
     15c:	bd 2e       	mov	r11, r29
     15e:	a9 2e       	mov	r10, r25
     160:	b5 2e       	mov	r11, r21
     162:	b9 2e       	mov	r11, r25
     164:	f1 2e       	mov	r15, r17
     166:	cd 2e       	mov	r12, r29
     168:	a1 2e       	mov	r10, r17
     16a:	d1 2e       	mov	r13, r17
     16c:	9d 2e       	mov	r9, r29
     16e:	b1 2e       	mov	r11, r17
     170:	75 2e       	mov	r7, r21
     172:	79 2e       	mov	r7, r25
     174:	7d 2e       	mov	r7, r29
     176:	81 2e       	mov	r8, r17
     178:	85 2e       	mov	r8, r21
     17a:	89 2e       	mov	r8, r25
     17c:	8d 2e       	mov	r8, r29
     17e:	91 2e       	mov	r9, r17
     180:	95 2e       	mov	r9, r21
     182:	99 2e       	mov	r9, r25
     184:	c1 2e       	mov	r12, r17
     186:	c5 2e       	mov	r12, r21
     188:	ed 2e       	mov	r14, r29
     18a:	c9 2e       	mov	r12, r25
     18c:	f1 2e       	mov	r15, r17
     18e:	a5 2e       	mov	r10, r21
     190:	e1 2e       	mov	r14, r17
     192:	0d 2e       	mov	r0, r29
     194:	11 2e       	mov	r1, r17
     196:	15 2e       	mov	r1, r21
     198:	19 2e       	mov	r1, r25
     19a:	1d 2e       	mov	r1, r29
     19c:	21 2e       	mov	r2, r17
     19e:	25 2e       	mov	r2, r21
     1a0:	29 2e       	mov	r2, r25
     1a2:	2d 2e       	mov	r2, r29
     1a4:	31 2e       	mov	r3, r17
     1a6:	35 2e       	mov	r3, r21
     1a8:	39 2e       	mov	r3, r25
     1aa:	3d 2e       	mov	r3, r29
     1ac:	41 2e       	mov	r4, r17
     1ae:	45 2e       	mov	r4, r21
     1b0:	49 2e       	mov	r4, r25
     1b2:	4d 2e       	mov	r4, r29
     1b4:	51 2e       	mov	r5, r17
     1b6:	55 2e       	mov	r5, r21
     1b8:	59 2e       	mov	r5, r25
     1ba:	5d 2e       	mov	r5, r29
     1bc:	61 2e       	mov	r6, r17
     1be:	65 2e       	mov	r6, r21
     1c0:	69 2e       	mov	r6, r25
     1c2:	6d 2e       	mov	r6, r29
     1c4:	71 2e       	mov	r7, r17
     1c6:	f1 2e       	mov	r15, r17
     1c8:	f1 2e       	mov	r15, r17
     1ca:	f1 2e       	mov	r15, r17
     1cc:	f1 2e       	mov	r15, r17
     1ce:	d5 2e       	mov	r13, r21
     1d0:	f1 2e       	mov	r15, r17
     1d2:	f1 2e       	mov	r15, r17
     1d4:	f1 2e       	mov	r15, r17
     1d6:	f1 2e       	mov	r15, r17
     1d8:	f1 2e       	mov	r15, r17
     1da:	f1 2e       	mov	r15, r17
     1dc:	f1 2e       	mov	r15, r17
     1de:	f1 2e       	mov	r15, r17
     1e0:	f1 2e       	mov	r15, r17
     1e2:	f1 2e       	mov	r15, r17
     1e4:	f1 2e       	mov	r15, r17
     1e6:	f1 2e       	mov	r15, r17
     1e8:	f1 2e       	mov	r15, r17
     1ea:	f1 2e       	mov	r15, r17
     1ec:	f1 2e       	mov	r15, r17
     1ee:	f1 2e       	mov	r15, r17
     1f0:	f1 2e       	mov	r15, r17
     1f2:	f1 2e       	mov	r15, r17
     1f4:	f1 2e       	mov	r15, r17
     1f6:	f1 2e       	mov	r15, r17
     1f8:	f1 2e       	mov	r15, r17
     1fa:	f1 2e       	mov	r15, r17
     1fc:	f1 2e       	mov	r15, r17
     1fe:	f1 2e       	mov	r15, r17
     200:	f1 2e       	mov	r15, r17
     202:	f1 2e       	mov	r15, r17
     204:	f1 2e       	mov	r15, r17
     206:	f1 2e       	mov	r15, r17
     208:	e5 2e       	mov	r14, r21

0000020a <__ctors_start>:
     20a:	a3 1f       	adc	r26, r19
     20c:	95 20       	and	r9, r5

0000020e <__ctors_end>:
     20e:	aa 1f       	adc	r26, r26
     210:	9c 20       	and	r9, r12

00000212 <__dtors_end>:
     212:	11 24       	eor	r1, r1
     214:	1f be       	out	0x3f, r1	; 63
     216:	cf ef       	ldi	r28, 0xFF	; 255
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	df e7       	ldi	r29, 0x7F	; 127
     21c:	de bf       	out	0x3e, r29	; 62

0000021e <__do_copy_data>:
     21e:	14 e4       	ldi	r17, 0x44	; 68
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e4       	ldi	r27, 0x40	; 64
     224:	e6 ec       	ldi	r30, 0xC6	; 198
     226:	f7 e8       	ldi	r31, 0x87	; 135
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0b bf       	out	0x3b, r16	; 59
     22c:	02 c0       	rjmp	.+4      	; 0x232 <__do_copy_data+0x14>
     22e:	07 90       	elpm	r0, Z+
     230:	0d 92       	st	X+, r0
     232:	ae 37       	cpi	r26, 0x7E	; 126
     234:	b1 07       	cpc	r27, r17
     236:	d9 f7       	brne	.-10     	; 0x22e <__do_copy_data+0x10>

00000238 <__do_clear_bss>:
     238:	28 e4       	ldi	r18, 0x48	; 72
     23a:	ae e7       	ldi	r26, 0x7E	; 126
     23c:	b4 e4       	ldi	r27, 0x44	; 68
     23e:	01 c0       	rjmp	.+2      	; 0x242 <.do_clear_bss_start>

00000240 <.do_clear_bss_loop>:
     240:	1d 92       	st	X+, r1

00000242 <.do_clear_bss_start>:
     242:	a4 36       	cpi	r26, 0x64	; 100
     244:	b2 07       	cpc	r27, r18
     246:	e1 f7       	brne	.-8      	; 0x240 <.do_clear_bss_loop>

00000248 <__do_global_ctors>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	c7 e0       	ldi	r28, 0x07	; 7
     24c:	d1 e0       	ldi	r29, 0x01	; 1
     24e:	04 c0       	rjmp	.+8      	; 0x258 <__do_global_ctors+0x10>
     250:	21 97       	sbiw	r28, 0x01	; 1
     252:	fe 01       	movw	r30, r28
     254:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <__tablejump2__>
     258:	c5 30       	cpi	r28, 0x05	; 5
     25a:	d1 07       	cpc	r29, r17
     25c:	c9 f7       	brne	.-14     	; 0x250 <__do_global_ctors+0x8>
     25e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <main>
     262:	0c 94 d6 43 	jmp	0x87ac	; 0x87ac <__do_global_dtors>

00000266 <__bad_interrupt>:
     266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026a <is_leap_year>:
     26a:	9c 01       	movw	r18, r24
     26c:	23 70       	andi	r18, 0x03	; 3
     26e:	33 27       	eor	r19, r19
     270:	23 2b       	or	r18, r19
     272:	59 f4       	brne	.+22     	; 0x28a <is_leap_year+0x20>
     274:	64 e6       	ldi	r22, 0x64	; 100
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0e 94 a9 3e 	call	0x7d52	; 0x7d52 <__divmodhi4>
     27c:	89 2b       	or	r24, r25
     27e:	39 f4       	brne	.+14     	; 0x28e <is_leap_year+0x24>
     280:	63 70       	andi	r22, 0x03	; 3
     282:	77 27       	eor	r23, r23
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	67 2b       	or	r22, r23
     288:	19 f0       	breq	.+6      	; 0x290 <is_leap_year+0x26>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	08 95       	ret
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	08 95       	ret

00000292 <month_length>:
     292:	62 30       	cpi	r22, 0x02	; 2
     294:	21 f4       	brne	.+8      	; 0x29e <month_length+0xc>
     296:	0e 94 35 01 	call	0x26a	; 0x26a <is_leap_year>
     29a:	84 5e       	subi	r24, 0xE4	; 228
     29c:	08 95       	ret
     29e:	68 30       	cpi	r22, 0x08	; 8
     2a0:	08 f0       	brcs	.+2      	; 0x2a4 <month_length+0x12>
     2a2:	6f 5f       	subi	r22, 0xFF	; 255
     2a4:	61 70       	andi	r22, 0x01	; 1
     2a6:	8e e1       	ldi	r24, 0x1E	; 30
     2a8:	86 0f       	add	r24, r22
     2aa:	08 95       	ret

000002ac <set_system_time>:
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	60 93 60 48 	sts	0x4860, r22	; 0x804860 <__system_time>
     2b4:	70 93 61 48 	sts	0x4861, r23	; 0x804861 <__system_time+0x1>
     2b8:	80 93 62 48 	sts	0x4862, r24	; 0x804862 <__system_time+0x2>
     2bc:	90 93 63 48 	sts	0x4863, r25	; 0x804863 <__system_time+0x3>
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	08 95       	ret

000002c4 <time>:
     2c4:	fc 01       	movw	r30, r24
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	60 91 60 48 	lds	r22, 0x4860	; 0x804860 <__system_time>
     2ce:	70 91 61 48 	lds	r23, 0x4861	; 0x804861 <__system_time+0x1>
     2d2:	80 91 62 48 	lds	r24, 0x4862	; 0x804862 <__system_time+0x2>
     2d6:	90 91 63 48 	lds	r25, 0x4863	; 0x804863 <__system_time+0x3>
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	30 97       	sbiw	r30, 0x00	; 0
     2de:	21 f0       	breq	.+8      	; 0x2e8 <time+0x24>
     2e0:	60 83       	st	Z, r22
     2e2:	71 83       	std	Z+1, r23	; 0x01
     2e4:	82 83       	std	Z+2, r24	; 0x02
     2e6:	93 83       	std	Z+3, r25	; 0x03
     2e8:	08 95       	ret

000002ea <system_tick>:
     2ea:	8f 93       	push	r24
     2ec:	8f b7       	in	r24, 0x3f	; 63
     2ee:	8f 93       	push	r24
     2f0:	f8 94       	cli
     2f2:	80 91 60 48 	lds	r24, 0x4860	; 0x804860 <__system_time>
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	80 93 60 48 	sts	0x4860, r24	; 0x804860 <__system_time>
     2fc:	80 91 61 48 	lds	r24, 0x4861	; 0x804861 <__system_time+0x1>
     300:	8f 4f       	sbci	r24, 0xFF	; 255
     302:	80 93 61 48 	sts	0x4861, r24	; 0x804861 <__system_time+0x1>
     306:	80 91 62 48 	lds	r24, 0x4862	; 0x804862 <__system_time+0x2>
     30a:	8f 4f       	sbci	r24, 0xFF	; 255
     30c:	80 93 62 48 	sts	0x4862, r24	; 0x804862 <__system_time+0x2>
     310:	80 91 63 48 	lds	r24, 0x4863	; 0x804863 <__system_time+0x3>
     314:	8f 4f       	sbci	r24, 0xFF	; 255
     316:	80 93 63 48 	sts	0x4863, r24	; 0x804863 <__system_time+0x3>
     31a:	8f 91       	pop	r24
     31c:	8f bf       	out	0x3f, r24	; 63
     31e:	8f 91       	pop	r24
     320:	08 95       	ret

00000322 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     322:	0e 94 3a 22 	call	0x4474	; 0x4474 <system_init>
     326:	08 95       	ret

00000328 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     334:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     338:	80 ff       	sbrs	r24, 0
     33a:	03 c0       	rjmp	.+6      	; 0x342 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     342:	8f 91       	pop	r24
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static BOOL receiving_msg = FALSE;

	if(!buff)
     356:	80 91 d3 44 	lds	r24, 0x44D3	; 0x8044d3 <_ZZ9serial_RxhE4buff>
     35a:	90 91 d4 44 	lds	r25, 0x44D4	; 0x8044d4 <_ZZ9serial_RxhE4buff+0x1>
     35e:	89 2b       	or	r24, r25
     360:	31 f4       	brne	.+12     	; 0x36e <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
     362:	0e 94 9c 30 	call	0x6138	; 0x6138 <nextEmptySBRxBuffer>
     366:	80 93 d3 44 	sts	0x44D3, r24	; 0x8044d3 <_ZZ9serial_RxhE4buff>
     36a:	90 93 d4 44 	sts	0x44D4, r25	; 0x8044d4 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
     36e:	c0 91 d3 44 	lds	r28, 0x44D3	; 0x8044d3 <_ZZ9serial_RxhE4buff>
     372:	d0 91 d4 44 	lds	r29, 0x44D4	; 0x8044d4 <_ZZ9serial_RxhE4buff+0x1>
     376:	20 97       	sbiw	r28, 0x00	; 0
     378:	09 f4       	brne	.+2      	; 0x37c <_Z9serial_Rxh+0x2e>
     37a:	73 c1       	rjmp	.+742    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
     37c:	81 2f       	mov	r24, r17
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 96 40 	call	0x812c	; 0x812c <toupper>
     384:	ac 01       	movw	r20, r24
     386:	28 2f       	mov	r18, r24

		if(ignoreCount)
     388:	90 91 d2 44 	lds	r25, 0x44D2	; 0x8044d2 <_ZZ9serial_RxhE11ignoreCount>
     38c:	99 23       	and	r25, r25
     38e:	21 f0       	breq	.+8      	; 0x398 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
     390:	91 50       	subi	r25, 0x01	; 1
     392:	90 93 d2 44 	sts	0x44D2, r25	; 0x8044d2 <_ZZ9serial_RxhE11ignoreCount>
     396:	65 c1       	rjmp	.+714    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
     398:	4b 31       	cpi	r20, 0x1B	; 27
     39a:	21 f4       	brne	.+8      	; 0x3a4 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	80 93 d2 44 	sts	0x44D2, r24	; 0x8044d2 <_ZZ9serial_RxhE11ignoreCount>
     3a2:	5f c1       	rjmp	.+702    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     3a4:	4d 30       	cpi	r20, 0x0D	; 13
     3a6:	09 f0       	breq	.+2      	; 0x3aa <_Z9serial_Rxh+0x5c>
     3a8:	3f c0       	rjmp	.+126    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			if(receiving_msg)
     3aa:	80 91 9e 44 	lds	r24, 0x449E	; 0x80449e <_ZZ9serial_RxhE13receiving_msg>
     3ae:	88 23       	and	r24, r24
     3b0:	31 f1       	breq	.+76     	; 0x3fe <_Z9serial_Rxh+0xb0>
			{
				if(charIndex > 0)
     3b2:	e0 91 d1 44 	lds	r30, 0x44D1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     3b6:	ee 23       	and	r30, r30
     3b8:	f9 f0       	breq	.+62     	; 0x3f8 <_Z9serial_Rxh+0xaa>
				{
					buff->type = SERIALBUS_MSG_QUERY;
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
     3be:	80 91 9c 44 	lds	r24, 0x449C	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     3c2:	90 91 9d 44 	lds	r25, 0x449D	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
     3ca:	80 91 9b 44 	lds	r24, 0x449B	; 0x80449b <_ZZ9serial_RxhE11field_index>
     3ce:	88 23       	and	r24, r24
     3d0:	79 f0       	breq	.+30     	; 0x3f0 <_Z9serial_Rxh+0xa2>
					{
						buff->fields[field_index - 1][field_len] = 0;
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	40 91 9a 44 	lds	r20, 0x449A	; 0x80449a <_ZZ9serial_RxhE9field_len>
     3da:	54 e1       	ldi	r21, 0x14	; 20
     3dc:	58 9f       	mul	r21, r24
     3de:	90 01       	movw	r18, r0
     3e0:	59 9f       	mul	r21, r25
     3e2:	30 0d       	add	r19, r0
     3e4:	11 24       	eor	r1, r1
     3e6:	c2 0f       	add	r28, r18
     3e8:	d3 1f       	adc	r29, r19
     3ea:	c4 0f       	add	r28, r20
     3ec:	d1 1d       	adc	r29, r1
     3ee:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	e1 56       	subi	r30, 0x61	; 97
     3f4:	fb 4b       	sbci	r31, 0xBB	; 187
     3f6:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
     3f8:	0e 94 9e 31 	call	0x633c	; 0x633c <sb_send_NewLine>
     3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	9f ef       	ldi	r25, 0xFF	; 255
     402:	89 83       	std	Y+1, r24	; 0x01
     404:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
     406:	10 92 d1 44 	sts	0x44D1, r1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
     40a:	10 92 9a 44 	sts	0x449A, r1	; 0x80449a <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
     40e:	10 92 9c 44 	sts	0x449C, r1	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     412:	10 92 9d 44 	sts	0x449D, r1	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
     416:	10 92 9b 44 	sts	0x449B, r1	; 0x80449b <_ZZ9serial_RxhE11field_index>
			buff = NULL;
     41a:	10 92 d3 44 	sts	0x44D3, r1	; 0x8044d3 <_ZZ9serial_RxhE4buff>
     41e:	10 92 d4 44 	sts	0x44D4, r1	; 0x8044d4 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = FALSE;
     422:	10 92 9e 44 	sts	0x449E, r1	; 0x80449e <_ZZ9serial_RxhE13receiving_msg>
     426:	1d c1       	rjmp	.+570    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
		}
		else if(rx_char)
     428:	44 23       	and	r20, r20
     42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	1a c1       	rjmp	.+564    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
     42e:	e0 91 d1 44 	lds	r30, 0x44D1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     432:	8e 2f       	mov	r24, r30
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	dc 01       	movw	r26, r24
     438:	a1 56       	subi	r26, 0x61	; 97
     43a:	bb 4b       	sbci	r27, 0xBB	; 187
     43c:	4c 93       	st	X, r20

			if(charIndex)
     43e:	ee 23       	and	r30, r30
     440:	09 f4       	brne	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	d7 c0       	rjmp	.+430    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
     444:	4f 37       	cpi	r20, 0x7F	; 127
     446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	5f c0       	rjmp	.+190    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
				{
					charIndex--;
     44a:	e1 50       	subi	r30, 0x01	; 1
     44c:	e0 93 d1 44 	sts	0x44D1, r30	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
     450:	80 91 9b 44 	lds	r24, 0x449B	; 0x80449b <_ZZ9serial_RxhE11field_index>
     454:	81 11       	cpse	r24, r1
     456:	13 c0       	rjmp	.+38     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
					{
						msg_ID -= textBuff[charIndex];
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	e1 56       	subi	r30, 0x61	; 97
     45c:	fb 4b       	sbci	r31, 0xBB	; 187
     45e:	30 81       	ld	r19, Z
     460:	80 91 9c 44 	lds	r24, 0x449C	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     464:	90 91 9d 44 	lds	r25, 0x449D	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     468:	83 1b       	sub	r24, r19
     46a:	91 09       	sbc	r25, r1
						msg_ID /= 10;
     46c:	6a e0       	ldi	r22, 0x0A	; 10
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	0e 94 a9 3e 	call	0x7d52	; 0x7d52 <__divmodhi4>
     474:	60 93 9c 44 	sts	0x449C, r22	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     478:	70 93 9d 44 	sts	0x449D, r23	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     47c:	39 c0       	rjmp	.+114    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					}
					else if(field_len)
     47e:	90 91 9a 44 	lds	r25, 0x449A	; 0x80449a <_ZZ9serial_RxhE9field_len>
     482:	99 23       	and	r25, r25
     484:	91 f0       	breq	.+36     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
					{
						field_len--;
     486:	3f ef       	ldi	r19, 0xFF	; 255
     488:	39 0f       	add	r19, r25
     48a:	30 93 9a 44 	sts	0x449A, r19	; 0x80449a <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	64 e1       	ldi	r22, 0x14	; 20
     494:	68 9f       	mul	r22, r24
     496:	a0 01       	movw	r20, r0
     498:	69 9f       	mul	r22, r25
     49a:	50 0d       	add	r21, r0
     49c:	11 24       	eor	r1, r1
     49e:	c4 0f       	add	r28, r20
     4a0:	d5 1f       	adc	r29, r21
     4a2:	c3 0f       	add	r28, r19
     4a4:	d1 1d       	adc	r29, r1
     4a6:	1b 82       	std	Y+3, r1	; 0x03
     4a8:	23 c0       	rjmp	.+70     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					}
					else if(textBuff[charIndex] == ' ')
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	e1 56       	subi	r30, 0x61	; 97
     4ae:	fb 4b       	sbci	r31, 0xBB	; 187
     4b0:	90 81       	ld	r25, Z
     4b2:	90 32       	cpi	r25, 0x20	; 32
     4b4:	a1 f4       	brne	.+40     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					{
						field_index--;
     4b6:	81 50       	subi	r24, 0x01	; 1
     4b8:	80 93 9b 44 	sts	0x449B, r24	; 0x80449b <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
     4bc:	34 e1       	ldi	r19, 0x14	; 20
     4be:	83 9f       	mul	r24, r19
     4c0:	c0 01       	movw	r24, r0
     4c2:	11 24       	eor	r1, r1
     4c4:	03 96       	adiw	r24, 0x03	; 3
     4c6:	c8 0f       	add	r28, r24
     4c8:	d9 1f       	adc	r29, r25
     4ca:	fe 01       	movw	r30, r28
     4cc:	01 90       	ld	r0, Z+
     4ce:	00 20       	and	r0, r0
     4d0:	e9 f7       	brne	.-6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4d2:	31 97       	sbiw	r30, 0x01	; 1
     4d4:	ec 1b       	sub	r30, r28
     4d6:	fd 0b       	sbc	r31, r29
     4d8:	e0 93 9a 44 	sts	0x449A, r30	; 0x80449a <_ZZ9serial_RxhE9field_len>
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
     4de:	94 e1       	ldi	r25, 0x14	; 20
     4e0:	89 9f       	mul	r24, r25
     4e2:	c0 0d       	add	r28, r0
     4e4:	d1 1d       	adc	r29, r1
     4e6:	11 24       	eor	r1, r1
     4e8:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
     4ea:	81 50       	subi	r24, 0x01	; 1
     4ec:	80 93 9b 44 	sts	0x449B, r24	; 0x80449b <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
     4f0:	80 91 d1 44 	lds	r24, 0x44D1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     4f4:	e8 2f       	mov	r30, r24
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	e1 56       	subi	r30, 0x61	; 97
     4fa:	fb 4b       	sbci	r31, 0xBB	; 187
     4fc:	10 82       	st	Z, r1

					if(charIndex == 0)
     4fe:	81 11       	cpse	r24, r1
     500:	ab c0       	rjmp	.+342    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
					{
						receiving_msg = FALSE;
     502:	10 92 9e 44 	sts	0x449E, r1	; 0x80449e <_ZZ9serial_RxhE13receiving_msg>
     506:	a8 c0       	rjmp	.+336    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
					}
				}
				else
				{
					if(rx_char == ' ')
     508:	40 32       	cpi	r20, 0x20	; 32
     50a:	81 f5       	brne	.+96     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
     50c:	fc 01       	movw	r30, r24
     50e:	e2 56       	subi	r30, 0x62	; 98
     510:	fb 4b       	sbci	r31, 0xBB	; 187
     512:	30 81       	ld	r19, Z
     514:	30 32       	cpi	r19, 0x20	; 32
     516:	09 f4       	brne	.+2      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     518:	98 c0       	rjmp	.+304    	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     51a:	30 91 9b 44 	lds	r19, 0x449B	; 0x80449b <_ZZ9serial_RxhE11field_index>
     51e:	43 2f       	mov	r20, r19
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	ba 01       	movw	r22, r20
     524:	6f 5f       	subi	r22, 0xFF	; 255
     526:	7f 4f       	sbci	r23, 0xFF	; 255
     528:	63 30       	cpi	r22, 0x03	; 3
     52a:	71 05       	cpc	r23, r1
     52c:	0c f0       	brlt	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     52e:	8f c0       	rjmp	.+286    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
     530:	33 23       	and	r19, r19
     532:	79 f0       	breq	.+30     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
							{
								buff->fields[field_index - 1][field_len] = '\0';
     534:	41 50       	subi	r20, 0x01	; 1
     536:	51 09       	sbc	r21, r1
     538:	e0 91 9a 44 	lds	r30, 0x449A	; 0x80449a <_ZZ9serial_RxhE9field_len>
     53c:	f4 e1       	ldi	r31, 0x14	; 20
     53e:	f4 9f       	mul	r31, r20
     540:	b0 01       	movw	r22, r0
     542:	f5 9f       	mul	r31, r21
     544:	70 0d       	add	r23, r0
     546:	11 24       	eor	r1, r1
     548:	c6 0f       	add	r28, r22
     54a:	d7 1f       	adc	r29, r23
     54c:	ce 0f       	add	r28, r30
     54e:	d1 1d       	adc	r29, r1
     550:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
     552:	3f 5f       	subi	r19, 0xFF	; 255
     554:	30 93 9b 44 	sts	0x449B, r19	; 0x80449b <_ZZ9serial_RxhE11field_index>
							field_len = 0;
     558:	10 92 9a 44 	sts	0x449A, r1	; 0x80449a <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	81 33       	cpi	r24, 0x31	; 49
     560:	91 05       	cpc	r25, r1
     562:	0c f0       	brlt	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     564:	81 e3       	ldi	r24, 0x31	; 49
     566:	80 93 d1 44 	sts	0x44D1, r24	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     56a:	76 c0       	rjmp	.+236    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
     56c:	80 91 9a 44 	lds	r24, 0x449A	; 0x80449a <_ZZ9serial_RxhE9field_len>
     570:	85 31       	cpi	r24, 0x15	; 21
     572:	08 f0       	brcs	.+2      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     574:	6e c0       	rjmp	.+220    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
					{
						if(field_index == 0)    /* message ID received */
     576:	60 91 9b 44 	lds	r22, 0x449B	; 0x80449b <_ZZ9serial_RxhE11field_index>
     57a:	61 11       	cpse	r22, r1
     57c:	19 c0       	rjmp	.+50     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
						{
							msg_ID = msg_ID * 10 + rx_char;
     57e:	60 91 9c 44 	lds	r22, 0x449C	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     582:	70 91 9d 44 	lds	r23, 0x449D	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     586:	fb 01       	movw	r30, r22
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	66 0f       	add	r22, r22
     58e:	77 1f       	adc	r23, r23
     590:	66 0f       	add	r22, r22
     592:	77 1f       	adc	r23, r23
     594:	66 0f       	add	r22, r22
     596:	77 1f       	adc	r23, r23
     598:	6e 0f       	add	r22, r30
     59a:	7f 1f       	adc	r23, r31
     59c:	64 0f       	add	r22, r20
     59e:	71 1d       	adc	r23, r1
     5a0:	60 93 9c 44 	sts	0x449C, r22	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     5a4:	70 93 9d 44 	sts	0x449D, r23	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
     5a8:	8f 5f       	subi	r24, 0xFF	; 255
     5aa:	80 93 9a 44 	sts	0x449A, r24	; 0x80449a <_ZZ9serial_RxhE9field_len>
     5ae:	16 c0       	rjmp	.+44     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	61 50       	subi	r22, 0x01	; 1
     5b4:	71 09       	sbc	r23, r1
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	98 0f       	add	r25, r24
     5ba:	90 93 9a 44 	sts	0x449A, r25	; 0x80449a <_ZZ9serial_RxhE9field_len>
     5be:	34 e1       	ldi	r19, 0x14	; 20
     5c0:	36 9f       	mul	r19, r22
     5c2:	f0 01       	movw	r30, r0
     5c4:	37 9f       	mul	r19, r23
     5c6:	f0 0d       	add	r31, r0
     5c8:	11 24       	eor	r1, r1
     5ca:	ce 0f       	add	r28, r30
     5cc:	df 1f       	adc	r29, r31
     5ce:	fe 01       	movw	r30, r28
     5d0:	e8 0f       	add	r30, r24
     5d2:	f1 1d       	adc	r31, r1
     5d4:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
     5d6:	c9 0f       	add	r28, r25
     5d8:	d1 1d       	adc	r29, r1
     5da:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
     5dc:	80 91 d1 44 	lds	r24, 0x44D1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	81 33       	cpi	r24, 0x31	; 49
     5e6:	91 05       	cpc	r25, r1
     5e8:	0c f0       	brlt	.+2      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5ea:	81 e3       	ldi	r24, 0x31	; 49
     5ec:	80 93 d1 44 	sts	0x44D1, r24	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     5f0:	33 c0       	rjmp	.+102    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
     5f2:	4f 37       	cpi	r20, 0x7F	; 127
     5f4:	69 f4       	brne	.+26     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
				{
					if(msg_ID <= 0)
     5f6:	80 91 9c 44 	lds	r24, 0x449C	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     5fa:	90 91 9d 44 	lds	r25, 0x449D	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     5fe:	18 16       	cp	r1, r24
     600:	19 06       	cpc	r1, r25
     602:	0c f0       	brlt	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
					{
						rx_char = '\0';
     604:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
     606:	10 92 9c 44 	sts	0x449C, r1	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     60a:	10 92 9d 44 	sts	0x449D, r1	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     60e:	24 c0       	rjmp	.+72     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
				}
				else if(rx_char == ' ') /* Handle Space */
     610:	40 32       	cpi	r20, 0x20	; 32
     612:	09 f1       	breq	.+66     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
     614:	10 92 9b 44 	sts	0x449B, r1	; 0x80449b <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
     618:	55 27       	eor	r21, r21
     61a:	40 93 9c 44 	sts	0x449C, r20	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     61e:	50 93 9d 44 	sts	0x449D, r21	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	83 30       	cpi	r24, 0x03	; 3
     626:	50 f4       	brcc	.+20     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
					{
						buff->fields[i][0] = '\0';
     628:	de 01       	movw	r26, r28
     62a:	34 e1       	ldi	r19, 0x14	; 20
     62c:	83 9f       	mul	r24, r19
     62e:	a0 0d       	add	r26, r0
     630:	b1 1d       	adc	r27, r1
     632:	11 24       	eor	r1, r1
     634:	13 96       	adiw	r26, 0x03	; 3
     636:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	f4 cf       	rjmp	.-24     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = TRUE;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 9e 44 	sts	0x449E, r24	; 0x80449e <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
     642:	ef 5f       	subi	r30, 0xFF	; 255
     644:	e0 93 d1 44 	sts	0x44D1, r30	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     648:	07 c0       	rjmp	.+14     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	05 c0       	rjmp	.+10     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	03 c0       	rjmp	.+6      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	01 c0       	rjmp	.+2      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
     656:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = TRUE;
					charIndex++;
				}
			}

			if(rx_char)
     658:	22 23       	and	r18, r18
     65a:	19 f0       	breq	.+6      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
			{
				sb_echo_char(rx_char);
     65c:	82 2f       	mov	r24, r18
     65e:	0e 94 a7 31 	call	0x634e	; 0x634e <sb_echo_char>
			}
		}
	}	
}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	08 95       	ret

0000066a <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	0b b6       	in	r0, 0x3b	; 59
     676:	0f 92       	push	r0
     678:	2f 93       	push	r18
     67a:	3f 93       	push	r19
     67c:	4f 93       	push	r20
     67e:	5f 93       	push	r21
     680:	6f 93       	push	r22
     682:	7f 93       	push	r23
     684:	8f 93       	push	r24
     686:	9f 93       	push	r25
     688:	af 93       	push	r26
     68a:	bf 93       	push	r27
     68c:	ef 93       	push	r30
     68e:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
     690:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     694:	81 11       	cpse	r24, r1
     696:	2b c0       	rjmp	.+86     	; 0x6ee <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     698:	80 91 98 44 	lds	r24, 0x4498	; 0x804498 <_ZZ11__vector_20E4buff>
     69c:	90 91 99 44 	lds	r25, 0x4499	; 0x804499 <_ZZ11__vector_20E4buff+0x1>
     6a0:	89 2b       	or	r24, r25
     6a2:	31 f4       	brne	.+12     	; 0x6b0 <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
     6a4:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <_Z18nextFullLBTxBufferv>
     6a8:	80 93 98 44 	sts	0x4498, r24	; 0x804498 <_ZZ11__vector_20E4buff>
     6ac:	90 93 99 44 	sts	0x4499, r25	; 0x804499 <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
     6b0:	e0 91 98 44 	lds	r30, 0x4498	; 0x804498 <_ZZ11__vector_20E4buff>
     6b4:	f0 91 99 44 	lds	r31, 0x4499	; 0x804499 <_ZZ11__vector_20E4buff+0x1>
     6b8:	80 91 97 44 	lds	r24, 0x4497	; 0x804497 <_ZZ11__vector_20E9charIndex>
     6bc:	df 01       	movw	r26, r30
     6be:	a8 0f       	add	r26, r24
     6c0:	b1 1d       	adc	r27, r1
     6c2:	9c 91       	ld	r25, X
     6c4:	99 23       	and	r25, r25
     6c6:	31 f0       	breq	.+12     	; 0x6d4 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	80 93 97 44 	sts	0x4497, r24	; 0x804497 <_ZZ11__vector_20E9charIndex>
     6ce:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
     6d2:	0d c0       	rjmp	.+26     	; 0x6ee <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
     6d4:	10 92 97 44 	sts	0x4497, r1	; 0x804497 <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
     6d8:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     6da:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <_Z18nextFullLBTxBufferv>
     6de:	80 93 98 44 	sts	0x4498, r24	; 0x804498 <_ZZ11__vector_20E4buff>
     6e2:	90 93 99 44 	sts	0x4499, r25	; 0x804499 <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
     6e6:	89 2b       	or	r24, r25
     6e8:	11 f4       	brne	.+4      	; 0x6ee <__vector_20+0x84>
			{
				linkbus_end_tx();
     6ea:	0e 94 a9 2c 	call	0x5952	; 0x5952 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
     6ee:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     6f2:	81 11       	cpse	r24, r1
     6f4:	2b c0       	rjmp	.+86     	; 0x74c <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     6f6:	80 91 95 44 	lds	r24, 0x4495	; 0x804495 <_ZZ11__vector_20E4buff_0>
     6fa:	90 91 96 44 	lds	r25, 0x4496	; 0x804496 <_ZZ11__vector_20E4buff_0+0x1>
     6fe:	89 2b       	or	r24, r25
     700:	31 f4       	brne	.+12     	; 0x70e <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
     702:	0e 94 44 30 	call	0x6088	; 0x6088 <nextFullSBTxBuffer>
     706:	80 93 95 44 	sts	0x4495, r24	; 0x804495 <_ZZ11__vector_20E4buff_0>
     70a:	90 93 96 44 	sts	0x4496, r25	; 0x804496 <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     70e:	e0 91 95 44 	lds	r30, 0x4495	; 0x804495 <_ZZ11__vector_20E4buff_0>
     712:	f0 91 96 44 	lds	r31, 0x4496	; 0x804496 <_ZZ11__vector_20E4buff_0+0x1>
     716:	80 91 94 44 	lds	r24, 0x4494	; 0x804494 <_ZZ11__vector_20E9charIndex_0>
     71a:	df 01       	movw	r26, r30
     71c:	a8 0f       	add	r26, r24
     71e:	b1 1d       	adc	r27, r1
     720:	9c 91       	ld	r25, X
     722:	99 23       	and	r25, r25
     724:	31 f0       	breq	.+12     	; 0x732 <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	80 93 94 44 	sts	0x4494, r24	; 0x804494 <_ZZ11__vector_20E9charIndex_0>
     72c:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
     730:	0d c0       	rjmp	.+26     	; 0x74c <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
     732:	10 92 94 44 	sts	0x4494, r1	; 0x804494 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
     736:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     738:	0e 94 44 30 	call	0x6088	; 0x6088 <nextFullSBTxBuffer>
     73c:	80 93 95 44 	sts	0x4495, r24	; 0x804495 <_ZZ11__vector_20E4buff_0>
     740:	90 93 96 44 	sts	0x4496, r25	; 0x804496 <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
     744:	89 2b       	or	r24, r25
     746:	11 f4       	brne	.+4      	; 0x74c <__vector_20+0xe2>
			{
				serialbus_end_tx();
     748:	0e 94 10 31 	call	0x6220	; 0x6220 <serialbus_end_tx>
			}
		}
	}
}
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	7f 91       	pop	r23
     75a:	6f 91       	pop	r22
     75c:	5f 91       	pop	r21
     75e:	4f 91       	pop	r20
     760:	3f 91       	pop	r19
     762:	2f 91       	pop	r18
     764:	0f 90       	pop	r0
     766:	0b be       	out	0x3b, r0	; 59
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	0b b6       	in	r0, 0x3b	; 59
     77e:	0f 92       	push	r0
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	4f 93       	push	r20
     786:	5f 93       	push	r21
     788:	6f 93       	push	r22
     78a:	7f 93       	push	r23
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
     790:	af 93       	push	r26
     792:	bf 93       	push	r27
     794:	ef 93       	push	r30
     796:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
     798:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     79c:	84 30       	cpi	r24, 0x04	; 4
     79e:	59 f5       	brne	.+86     	; 0x7f6 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     7a0:	80 91 92 44 	lds	r24, 0x4492	; 0x804492 <_ZZ11__vector_56E4buff>
     7a4:	90 91 93 44 	lds	r25, 0x4493	; 0x804493 <_ZZ11__vector_56E4buff+0x1>
     7a8:	89 2b       	or	r24, r25
     7aa:	31 f4       	brne	.+12     	; 0x7b8 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
     7ac:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <_Z18nextFullLBTxBufferv>
     7b0:	80 93 92 44 	sts	0x4492, r24	; 0x804492 <_ZZ11__vector_56E4buff>
     7b4:	90 93 93 44 	sts	0x4493, r25	; 0x804493 <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
     7b8:	e0 91 92 44 	lds	r30, 0x4492	; 0x804492 <_ZZ11__vector_56E4buff>
     7bc:	f0 91 93 44 	lds	r31, 0x4493	; 0x804493 <_ZZ11__vector_56E4buff+0x1>
     7c0:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ11__vector_56E9charIndex>
     7c4:	df 01       	movw	r26, r30
     7c6:	a8 0f       	add	r26, r24
     7c8:	b1 1d       	adc	r27, r1
     7ca:	9c 91       	ld	r25, X
     7cc:	99 23       	and	r25, r25
     7ce:	31 f0       	breq	.+12     	; 0x7dc <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
     7d0:	8f 5f       	subi	r24, 0xFF	; 255
     7d2:	80 93 91 44 	sts	0x4491, r24	; 0x804491 <_ZZ11__vector_56E9charIndex>
     7d6:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
     7da:	0d c0       	rjmp	.+26     	; 0x7f6 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
     7dc:	10 92 91 44 	sts	0x4491, r1	; 0x804491 <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
     7e0:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     7e2:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <_Z18nextFullLBTxBufferv>
     7e6:	80 93 92 44 	sts	0x4492, r24	; 0x804492 <_ZZ11__vector_56E4buff>
     7ea:	90 93 93 44 	sts	0x4493, r25	; 0x804493 <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
     7ee:	89 2b       	or	r24, r25
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <__vector_56+0x84>
			{
				linkbus_end_tx();
     7f2:	0e 94 a9 2c 	call	0x5952	; 0x5952 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
     7f6:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     7fa:	84 30       	cpi	r24, 0x04	; 4
     7fc:	59 f5       	brne	.+86     	; 0x854 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     7fe:	80 91 8f 44 	lds	r24, 0x448F	; 0x80448f <_ZZ11__vector_56E4buff_0>
     802:	90 91 90 44 	lds	r25, 0x4490	; 0x804490 <_ZZ11__vector_56E4buff_0+0x1>
     806:	89 2b       	or	r24, r25
     808:	31 f4       	brne	.+12     	; 0x816 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
     80a:	0e 94 44 30 	call	0x6088	; 0x6088 <nextFullSBTxBuffer>
     80e:	80 93 8f 44 	sts	0x448F, r24	; 0x80448f <_ZZ11__vector_56E4buff_0>
     812:	90 93 90 44 	sts	0x4490, r25	; 0x804490 <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     816:	e0 91 8f 44 	lds	r30, 0x448F	; 0x80448f <_ZZ11__vector_56E4buff_0>
     81a:	f0 91 90 44 	lds	r31, 0x4490	; 0x804490 <_ZZ11__vector_56E4buff_0+0x1>
     81e:	80 91 8e 44 	lds	r24, 0x448E	; 0x80448e <_ZZ11__vector_56E9charIndex_0>
     822:	df 01       	movw	r26, r30
     824:	a8 0f       	add	r26, r24
     826:	b1 1d       	adc	r27, r1
     828:	9c 91       	ld	r25, X
     82a:	99 23       	and	r25, r25
     82c:	31 f0       	breq	.+12     	; 0x83a <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 93 8e 44 	sts	0x448E, r24	; 0x80448e <_ZZ11__vector_56E9charIndex_0>
     834:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
     838:	0d c0       	rjmp	.+26     	; 0x854 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
     83a:	10 92 8e 44 	sts	0x448E, r1	; 0x80448e <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
     83e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     840:	0e 94 44 30 	call	0x6088	; 0x6088 <nextFullSBTxBuffer>
     844:	80 93 8f 44 	sts	0x448F, r24	; 0x80448f <_ZZ11__vector_56E4buff_0>
     848:	90 93 90 44 	sts	0x4490, r25	; 0x804490 <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
     84c:	89 2b       	or	r24, r25
     84e:	11 f4       	brne	.+4      	; 0x854 <__vector_56+0xe2>
			{
				serialbus_end_tx();
     850:	0e 94 10 31 	call	0x6220	; 0x6220 <serialbus_end_tx>
			}
		}
	}
}
     854:	ff 91       	pop	r31
     856:	ef 91       	pop	r30
     858:	bf 91       	pop	r27
     85a:	af 91       	pop	r26
     85c:	9f 91       	pop	r25
     85e:	8f 91       	pop	r24
     860:	7f 91       	pop	r23
     862:	6f 91       	pop	r22
     864:	5f 91       	pop	r21
     866:	4f 91       	pop	r20
     868:	3f 91       	pop	r19
     86a:	2f 91       	pop	r18
     86c:	0f 90       	pop	r0
     86e:	0b be       	out	0x3b, r0	; 59
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static BOOL receiving_msg = FALSE;

	if(!buff)
     884:	80 91 8c 44 	lds	r24, 0x448C	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     888:	90 91 8d 44 	lds	r25, 0x448D	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
     88c:	89 2b       	or	r24, r25
     88e:	31 f4       	brne	.+12     	; 0x89c <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
     890:	0e 94 4c 2c 	call	0x5898	; 0x5898 <_Z19nextEmptyLBRxBufferv>
     894:	80 93 8c 44 	sts	0x448C, r24	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     898:	90 93 8d 44 	sts	0x448D, r25	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
     89c:	c0 91 8c 44 	lds	r28, 0x448C	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     8a0:	d0 91 8d 44 	lds	r29, 0x448D	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
     8a4:	20 97       	sbiw	r28, 0x00	; 0
     8a6:	09 f4       	brne	.+2      	; 0x8aa <_Z10linkbus_Rxh+0x30>
     8a8:	e3 c0       	rjmp	.+454    	; 0xa70 <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
     8aa:	81 2f       	mov	r24, r17
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 96 40 	call	0x812c	; 0x812c <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
     8b2:	84 32       	cpi	r24, 0x24	; 36
     8b4:	11 f0       	breq	.+4      	; 0x8ba <_Z10linkbus_Rxh+0x40>
     8b6:	81 32       	cpi	r24, 0x21	; 33
     8b8:	49 f5       	brne	.+82     	; 0x90c <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
     8ba:	10 92 8b 44 	sts	0x448B, r1	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
     8be:	81 32       	cpi	r24, 0x21	; 33
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <_Z10linkbus_Rxh+0x4c>
     8c2:	83 e0       	ldi	r24, 0x03	; 3
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <_Z10linkbus_Rxh+0x4e>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	88 83       	st	Y, r24
			field_len = 0;
     8ca:	10 92 8a 44 	sts	0x448A, r1	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
     8ce:	10 92 86 44 	sts	0x4486, r1	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     8d2:	10 92 87 44 	sts	0x4487, r1	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     8d6:	10 92 88 44 	sts	0x4488, r1	; 0x804488 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     8da:	10 92 89 44 	sts	0x4489, r1	; 0x804489 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = TRUE;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 85 44 	sts	0x4485, r24	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     8e4:	10 92 84 44 	sts	0x4484, r1	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     8e8:	80 91 84 44 	lds	r24, 0x4484	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	58 f4       	brcc	.+22     	; 0x906 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
     8f0:	fe 01       	movw	r30, r28
     8f2:	05 e1       	ldi	r16, 0x15	; 21
     8f4:	80 9f       	mul	r24, r16
     8f6:	e0 0d       	add	r30, r0
     8f8:	f1 1d       	adc	r31, r1
     8fa:	11 24       	eor	r1, r1
     8fc:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = TRUE;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	80 93 84 44 	sts	0x4484, r24	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     904:	f1 cf       	rjmp	.-30     	; 0x8e8 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
     906:	10 92 84 44 	sts	0x4484, r1	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     90a:	a7 c0       	rjmp	.+334    	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
     90c:	90 91 85 44 	lds	r25, 0x4485	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
     910:	99 23       	and	r25, r25
     912:	09 f4       	brne	.+2      	; 0x916 <_Z10linkbus_Rxh+0x9c>
     914:	8b c0       	rjmp	.+278    	; 0xa2c <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
     916:	8c 32       	cpi	r24, 0x2C	; 44
     918:	29 f0       	breq	.+10     	; 0x924 <_Z10linkbus_Rxh+0xaa>
     91a:	8b 33       	cpi	r24, 0x3B	; 59
     91c:	19 f0       	breq	.+6      	; 0x924 <_Z10linkbus_Rxh+0xaa>
     91e:	8f 33       	cpi	r24, 0x3F	; 63
     920:	09 f0       	breq	.+2      	; 0x924 <_Z10linkbus_Rxh+0xaa>
     922:	42 c0       	rjmp	.+132    	; 0x9a8 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
     924:	90 91 84 44 	lds	r25, 0x4484	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     928:	99 23       	and	r25, r25
     92a:	89 f0       	breq	.+34     	; 0x94e <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
     92c:	29 2f       	mov	r18, r25
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	21 50       	subi	r18, 0x01	; 1
     932:	31 09       	sbc	r19, r1
     934:	40 91 8a 44 	lds	r20, 0x448A	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
     938:	55 e1       	ldi	r21, 0x15	; 21
     93a:	52 9f       	mul	r21, r18
     93c:	f0 01       	movw	r30, r0
     93e:	53 9f       	mul	r21, r19
     940:	f0 0d       	add	r31, r0
     942:	11 24       	eor	r1, r1
     944:	ec 0f       	add	r30, r28
     946:	fd 1f       	adc	r31, r29
     948:	e4 0f       	add	r30, r20
     94a:	f1 1d       	adc	r31, r1
     94c:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
     94e:	9f 5f       	subi	r25, 0xFF	; 255
     950:	90 93 84 44 	sts	0x4484, r25	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
     954:	10 92 8a 44 	sts	0x448A, r1	; 0x80448a <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
     958:	8b 33       	cpi	r24, 0x3B	; 59
     95a:	69 f4       	brne	.+26     	; 0x976 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     95c:	80 91 8b 44 	lds	r24, 0x448B	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
     960:	84 30       	cpi	r24, 0x04	; 4
     962:	30 f0       	brcs	.+12     	; 0x970 <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     964:	80 91 86 44 	lds	r24, 0x4486	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     968:	90 91 87 44 	lds	r25, 0x4487	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     970:	10 92 85 44 	sts	0x4485, r1	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
     974:	10 c0       	rjmp	.+32     	; 0x996 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
     976:	8f 33       	cpi	r24, 0x3F	; 63
     978:	71 f4       	brne	.+28     	; 0x996 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
     97e:	80 91 8b 44 	lds	r24, 0x448B	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
     982:	83 30       	cpi	r24, 0x03	; 3
     984:	30 f0       	brcs	.+12     	; 0x992 <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     986:	80 91 86 44 	lds	r24, 0x4486	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     98a:	90 91 87 44 	lds	r25, 0x4487	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     992:	10 92 85 44 	sts	0x4485, r1	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
     996:	80 91 85 44 	lds	r24, 0x4485	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
     99a:	81 11       	cpse	r24, r1
     99c:	5e c0       	rjmp	.+188    	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
     99e:	10 92 8c 44 	sts	0x448C, r1	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     9a2:	10 92 8d 44 	sts	0x448D, r1	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
     9a6:	59 c0       	rjmp	.+178    	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
     9a8:	20 91 84 44 	lds	r18, 0x4484	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     9ac:	21 11       	cpse	r18, r1
     9ae:	29 c0       	rjmp	.+82     	; 0xa02 <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
     9b0:	40 91 86 44 	lds	r20, 0x4486	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     9b4:	50 91 87 44 	lds	r21, 0x4487	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     9b8:	60 91 88 44 	lds	r22, 0x4488	; 0x804488 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     9bc:	70 91 89 44 	lds	r23, 0x4489	; 0x804489 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     9c0:	44 0f       	add	r20, r20
     9c2:	55 1f       	adc	r21, r21
     9c4:	66 1f       	adc	r22, r22
     9c6:	77 1f       	adc	r23, r23
     9c8:	8a 01       	movw	r16, r20
     9ca:	9b 01       	movw	r18, r22
     9cc:	00 0f       	add	r16, r16
     9ce:	11 1f       	adc	r17, r17
     9d0:	22 1f       	adc	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	00 0f       	add	r16, r16
     9d6:	11 1f       	adc	r17, r17
     9d8:	22 1f       	adc	r18, r18
     9da:	33 1f       	adc	r19, r19
     9dc:	40 0f       	add	r20, r16
     9de:	51 1f       	adc	r21, r17
     9e0:	62 1f       	adc	r22, r18
     9e2:	73 1f       	adc	r23, r19
     9e4:	8a 01       	movw	r16, r20
     9e6:	9b 01       	movw	r18, r22
     9e8:	08 0f       	add	r16, r24
     9ea:	11 1d       	adc	r17, r1
     9ec:	21 1d       	adc	r18, r1
     9ee:	31 1d       	adc	r19, r1
     9f0:	00 93 86 44 	sts	0x4486, r16	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     9f4:	10 93 87 44 	sts	0x4487, r17	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     9f8:	20 93 88 44 	sts	0x4488, r18	; 0x804488 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     9fc:	30 93 89 44 	sts	0x4489, r19	; 0x804489 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     a00:	2c c0       	rjmp	.+88     	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	21 50       	subi	r18, 0x01	; 1
     a06:	31 09       	sbc	r19, r1
     a08:	90 91 8a 44 	lds	r25, 0x448A	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	49 0f       	add	r20, r25
     a10:	40 93 8a 44 	sts	0x448A, r20	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
     a14:	65 e1       	ldi	r22, 0x15	; 21
     a16:	62 9f       	mul	r22, r18
     a18:	a0 01       	movw	r20, r0
     a1a:	63 9f       	mul	r22, r19
     a1c:	50 0d       	add	r21, r0
     a1e:	11 24       	eor	r1, r1
     a20:	c4 0f       	add	r28, r20
     a22:	d5 1f       	adc	r29, r21
     a24:	c9 0f       	add	r28, r25
     a26:	d1 1d       	adc	r29, r1
     a28:	8b 83       	std	Y+3, r24	; 0x03
     a2a:	17 c0       	rjmp	.+46     	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
     a2c:	8d 30       	cpi	r24, 0x0D	; 13
     a2e:	a9 f4       	brne	.+42     	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
     a30:	19 82       	std	Y+1, r1	; 0x01
     a32:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
     a34:	82 e3       	ldi	r24, 0x32	; 50
     a36:	80 93 8b 44 	sts	0x448B, r24	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
     a3a:	10 92 8a 44 	sts	0x448A, r1	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
     a3e:	10 92 86 44 	sts	0x4486, r1	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     a42:	10 92 87 44 	sts	0x4487, r1	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     a46:	10 92 88 44 	sts	0x4488, r1	; 0x804488 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     a4a:	10 92 89 44 	sts	0x4489, r1	; 0x804489 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
     a4e:	10 92 84 44 	sts	0x4484, r1	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
     a52:	10 92 8c 44 	sts	0x448C, r1	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     a56:	10 92 8d 44 	sts	0x448D, r1	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
     a5a:	80 91 8b 44 	lds	r24, 0x448B	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
     a5e:	8f 5f       	subi	r24, 0xFF	; 255
     a60:	80 93 8b 44 	sts	0x448B, r24	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
     a64:	82 33       	cpi	r24, 0x32	; 50
     a66:	20 f0       	brcs	.+8      	; 0xa70 <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = FALSE;
     a68:	10 92 85 44 	sts	0x4485, r1	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
     a6c:	10 92 8b 44 	sts	0x448B, r1	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	11 24       	eor	r1, r1
     a84:	0b b6       	in	r0, 0x3b	; 59
     a86:	0f 92       	push	r0
     a88:	2f 93       	push	r18
     a8a:	3f 93       	push	r19
     a8c:	4f 93       	push	r20
     a8e:	5f 93       	push	r21
     a90:	6f 93       	push	r22
     a92:	7f 93       	push	r23
     a94:	8f 93       	push	r24
     a96:	9f 93       	push	r25
     a98:	af 93       	push	r26
     a9a:	bf 93       	push	r27
     a9c:	cf 93       	push	r28
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
     aa2:	0e 94 be 3b 	call	0x777c	; 0x777c <USART0_get_data>
     aa6:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
     aa8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     aac:	81 11       	cpse	r24, r1
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
     ab0:	8c 2f       	mov	r24, r28
     ab2:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
     ab6:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     aba:	81 11       	cpse	r24, r1
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
     abe:	8c 2f       	mov	r24, r28
     ac0:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z9serial_Rxh>
	}
}
     ac4:	ff 91       	pop	r31
     ac6:	ef 91       	pop	r30
     ac8:	cf 91       	pop	r28
     aca:	bf 91       	pop	r27
     acc:	af 91       	pop	r26
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	7f 91       	pop	r23
     ad4:	6f 91       	pop	r22
     ad6:	5f 91       	pop	r21
     ad8:	4f 91       	pop	r20
     ada:	3f 91       	pop	r19
     adc:	2f 91       	pop	r18
     ade:	0f 90       	pop	r0
     ae0:	0b be       	out	0x3b, r0	; 59
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_55>:

ISR(USART4_RXC_vect)
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	0b b6       	in	r0, 0x3b	; 59
     af8:	0f 92       	push	r0
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	cf 93       	push	r28
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
     b14:	0e 94 26 3c 	call	0x784c	; 0x784c <USART4_get_data>
     b18:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
     b1a:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	19 f4       	brne	.+6      	; 0xb28 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
     b22:	8c 2f       	mov	r24, r28
     b24:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
     b28:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     b2c:	84 30       	cpi	r24, 0x04	; 4
     b2e:	19 f4       	brne	.+6      	; 0xb36 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
     b30:	8c 2f       	mov	r24, r28
     b32:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z9serial_Rxh>
	}
}
     b36:	ff 91       	pop	r31
     b38:	ef 91       	pop	r30
     b3a:	cf 91       	pop	r28
     b3c:	bf 91       	pop	r27
     b3e:	af 91       	pop	r26
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	7f 91       	pop	r23
     b46:	6f 91       	pop	r22
     b48:	5f 91       	pop	r21
     b4a:	4f 91       	pop	r20
     b4c:	3f 91       	pop	r19
     b4e:	2f 91       	pop	r18
     b50:	0f 90       	pop	r0
     b52:	0b be       	out	0x3b, r0	; 59
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	0b b6       	in	r0, 0x3b	; 59
     b6a:	0f 92       	push	r0
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	cf 93       	push	r28
     b82:	ef 93       	push	r30
     b84:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
     b86:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <USART1_get_data>
     b8a:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
     b8c:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	19 f4       	brne	.+6      	; 0xb9a <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
     b94:	8c 2f       	mov	r24, r28
     b96:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
     b9a:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	19 f4       	brne	.+6      	; 0xba8 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
     ba2:	8c 2f       	mov	r24, r28
     ba4:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z9serial_Rxh>
	}
}
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	cf 91       	pop	r28
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	0b be       	out	0x3b, r0	; 59
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	0b b6       	in	r0, 0x3b	; 59
     bdc:	0f 92       	push	r0
     bde:	2f 93       	push	r18
     be0:	3f 93       	push	r19
     be2:	4f 93       	push	r20
     be4:	5f 93       	push	r21
     be6:	6f 93       	push	r22
     be8:	7f 93       	push	r23
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	ef 93       	push	r30
     bf4:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
     bf6:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	59 f5       	brne	.+86     	; 0xc54 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     bfe:	80 91 82 44 	lds	r24, 0x4482	; 0x804482 <_ZZ11__vector_32E4buff>
     c02:	90 91 83 44 	lds	r25, 0x4483	; 0x804483 <_ZZ11__vector_32E4buff+0x1>
     c06:	89 2b       	or	r24, r25
     c08:	31 f4       	brne	.+12     	; 0xc16 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
     c0a:	0e 94 44 30 	call	0x6088	; 0x6088 <nextFullSBTxBuffer>
     c0e:	80 93 82 44 	sts	0x4482, r24	; 0x804482 <_ZZ11__vector_32E4buff>
     c12:	90 93 83 44 	sts	0x4483, r25	; 0x804483 <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
     c16:	e0 91 82 44 	lds	r30, 0x4482	; 0x804482 <_ZZ11__vector_32E4buff>
     c1a:	f0 91 83 44 	lds	r31, 0x4483	; 0x804483 <_ZZ11__vector_32E4buff+0x1>
     c1e:	80 91 81 44 	lds	r24, 0x4481	; 0x804481 <_ZZ11__vector_32E9charIndex>
     c22:	df 01       	movw	r26, r30
     c24:	a8 0f       	add	r26, r24
     c26:	b1 1d       	adc	r27, r1
     c28:	9c 91       	ld	r25, X
     c2a:	99 23       	and	r25, r25
     c2c:	31 f0       	breq	.+12     	; 0xc3a <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	80 93 81 44 	sts	0x4481, r24	; 0x804481 <_ZZ11__vector_32E9charIndex>
     c34:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     c38:	0d c0       	rjmp	.+26     	; 0xc54 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
     c3a:	10 92 81 44 	sts	0x4481, r1	; 0x804481 <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
     c3e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     c40:	0e 94 44 30 	call	0x6088	; 0x6088 <nextFullSBTxBuffer>
     c44:	80 93 82 44 	sts	0x4482, r24	; 0x804482 <_ZZ11__vector_32E4buff>
     c48:	90 93 83 44 	sts	0x4483, r25	; 0x804483 <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
     c4c:	89 2b       	or	r24, r25
     c4e:	11 f4       	brne	.+4      	; 0xc54 <__vector_32+0x84>
			{
				serialbus_end_tx();
     c50:	0e 94 10 31 	call	0x6220	; 0x6220 <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
     c54:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	59 f5       	brne	.+86     	; 0xcb2 <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     c5c:	80 91 7f 44 	lds	r24, 0x447F	; 0x80447f <_ZZ11__vector_32E4buff_0>
     c60:	90 91 80 44 	lds	r25, 0x4480	; 0x804480 <_ZZ11__vector_32E4buff_0+0x1>
     c64:	89 2b       	or	r24, r25
     c66:	31 f4       	brne	.+12     	; 0xc74 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
     c68:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <_Z18nextFullLBTxBufferv>
     c6c:	80 93 7f 44 	sts	0x447F, r24	; 0x80447f <_ZZ11__vector_32E4buff_0>
     c70:	90 93 80 44 	sts	0x4480, r25	; 0x804480 <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     c74:	e0 91 7f 44 	lds	r30, 0x447F	; 0x80447f <_ZZ11__vector_32E4buff_0>
     c78:	f0 91 80 44 	lds	r31, 0x4480	; 0x804480 <_ZZ11__vector_32E4buff_0+0x1>
     c7c:	80 91 7e 44 	lds	r24, 0x447E	; 0x80447e <__data_end>
     c80:	df 01       	movw	r26, r30
     c82:	a8 0f       	add	r26, r24
     c84:	b1 1d       	adc	r27, r1
     c86:	9c 91       	ld	r25, X
     c88:	99 23       	and	r25, r25
     c8a:	31 f0       	breq	.+12     	; 0xc98 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	80 93 7e 44 	sts	0x447E, r24	; 0x80447e <__data_end>
     c92:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     c96:	0d c0       	rjmp	.+26     	; 0xcb2 <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
     c98:	10 92 7e 44 	sts	0x447E, r1	; 0x80447e <__data_end>
			(*buff)[0] = '\0';
     c9c:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     c9e:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <_Z18nextFullLBTxBufferv>
     ca2:	80 93 7f 44 	sts	0x447F, r24	; 0x80447f <_ZZ11__vector_32E4buff_0>
     ca6:	90 93 80 44 	sts	0x4480, r25	; 0x804480 <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
     caa:	89 2b       	or	r24, r25
     cac:	11 f4       	brne	.+4      	; 0xcb2 <__vector_32+0xe2>
			{
				linkbus_end_tx();
     cae:	0e 94 a9 2c 	call	0x5952	; 0x5952 <_Z14linkbus_end_txv>
			}
		}
	}
}
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	bf 91       	pop	r27
     cb8:	af 91       	pop	r26
     cba:	9f 91       	pop	r25
     cbc:	8f 91       	pop	r24
     cbe:	7f 91       	pop	r23
     cc0:	6f 91       	pop	r22
     cc2:	5f 91       	pop	r21
     cc4:	4f 91       	pop	r20
     cc6:	3f 91       	pop	r19
     cc8:	2f 91       	pop	r18
     cca:	0f 90       	pop	r0
     ccc:	0b be       	out	0x3b, r0	; 59
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <__vector_41>:
{
	
}

void suspendEvent()
{
     cd8:	1f 92       	push	r1
     cda:	0f 92       	push	r0
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	0f 92       	push	r0
     ce0:	11 24       	eor	r1, r1
     ce2:	0b b6       	in	r0, 0x3b	; 59
     ce4:	0f 92       	push	r0
     ce6:	2f 93       	push	r18
     ce8:	3f 93       	push	r19
     cea:	4f 93       	push	r20
     cec:	5f 93       	push	r21
     cee:	6f 93       	push	r22
     cf0:	7f 93       	push	r23
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	af 93       	push	r26
     cf8:	bf 93       	push	r27
     cfa:	ef 93       	push	r30
     cfc:	ff 93       	push	r31
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	25 97       	sbiw	r28, 0x05	; 5
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     d10:	80 ff       	sbrs	r24, 0
     d12:	aa c3       	rjmp	.+1876   	; 0x1468 <__vector_41+0x790>
     d14:	80 91 5a 45 	lds	r24, 0x455A	; 0x80455a <_ZZ11__vector_41E3cnt>
     d18:	90 91 5b 45 	lds	r25, 0x455B	; 0x80455b <_ZZ11__vector_41E3cnt+0x1>
     d1c:	9c 01       	movw	r18, r24
     d1e:	2f 5f       	subi	r18, 0xFF	; 255
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	20 93 5a 45 	sts	0x455A, r18	; 0x80455a <_ZZ11__vector_41E3cnt>
     d26:	30 93 5b 45 	sts	0x455B, r19	; 0x80455b <_ZZ11__vector_41E3cnt+0x1>
     d2a:	8b 32       	cpi	r24, 0x2B	; 43
     d2c:	91 40       	sbci	r25, 0x01	; 1
     d2e:	09 f0       	breq	.+2      	; 0xd32 <__vector_41+0x5a>
     d30:	98 c3       	rjmp	.+1840   	; 0x1462 <__vector_41+0x78a>
     d32:	10 92 5a 45 	sts	0x455A, r1	; 0x80455a <_ZZ11__vector_41E3cnt>
     d36:	10 92 5b 45 	sts	0x455B, r1	; 0x80455b <_ZZ11__vector_41E3cnt+0x1>
     d3a:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
     d3e:	81 11       	cpse	r24, r1
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <__vector_41+0x70>
     d42:	8a b1       	in	r24, 0x0a	; 10
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8a b9       	out	0x0a, r24	; 10
     d48:	0e 94 94 1b 	call	0x3728	; 0x3728 <_Z18antennaIsConnectedv>
     d4c:	81 11       	cpse	r24, r1
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <__vector_41+0x8c>
     d50:	90 91 ee 44 	lds	r25, 0x44EE	; 0x8044ee <g_antenna_connect_state>
     d54:	91 30       	cpi	r25, 0x01	; 1
     d56:	19 f1       	breq	.+70     	; 0xd9e <__vector_41+0xc6>
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	90 93 ee 44 	sts	0x44EE, r25	; 0x8044ee <g_antenna_connect_state>
     d5e:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
     d62:	1d c0       	rjmp	.+58     	; 0xd9e <__vector_41+0xc6>
     d64:	90 91 ee 44 	lds	r25, 0x44EE	; 0x8044ee <g_antenna_connect_state>
     d68:	91 30       	cpi	r25, 0x01	; 1
     d6a:	c9 f4       	brne	.+50     	; 0xd9e <__vector_41+0xc6>
     d6c:	90 91 5c 45 	lds	r25, 0x455C	; 0x80455c <_ZZ11__vector_41E26lastAntennaConnectionState>
     d70:	89 13       	cpse	r24, r25
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__vector_41+0xc0>
     d74:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
     d78:	99 23       	and	r25, r25
     d7a:	89 f0       	breq	.+34     	; 0xd9e <__vector_41+0xc6>
     d7c:	91 50       	subi	r25, 0x01	; 1
     d7e:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
     d82:	91 11       	cpse	r25, r1
     d84:	0c c0       	rjmp	.+24     	; 0xd9e <__vector_41+0xc6>
     d86:	10 92 ee 44 	sts	0x44EE, r1	; 0x8044ee <g_antenna_connect_state>
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <__vector_41+0xc6>
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
     d9e:	80 93 5c 45 	sts	0x455C, r24	; 0x80455c <_ZZ11__vector_41E26lastAntennaConnectionState>
     da2:	0e 94 75 01 	call	0x2ea	; 0x2ea <system_tick>
     da6:	80 91 34 45 	lds	r24, 0x4534	; 0x804534 <_ZL10g_sleeping>
     daa:	88 23       	and	r24, r24
     dac:	e1 f1       	breq	.+120    	; 0xe26 <__vector_41+0x14e>
     dae:	80 91 35 45 	lds	r24, 0x4535	; 0x804535 <_ZL23g_seconds_left_to_sleep>
     db2:	90 91 36 45 	lds	r25, 0x4536	; 0x804536 <_ZL23g_seconds_left_to_sleep+0x1>
     db6:	a0 91 37 45 	lds	r26, 0x4537	; 0x804537 <_ZL23g_seconds_left_to_sleep+0x2>
     dba:	b0 91 38 45 	lds	r27, 0x4538	; 0x804538 <_ZL23g_seconds_left_to_sleep+0x3>
     dbe:	89 2b       	or	r24, r25
     dc0:	8a 2b       	or	r24, r26
     dc2:	8b 2b       	or	r24, r27
     dc4:	99 f0       	breq	.+38     	; 0xdec <__vector_41+0x114>
     dc6:	80 91 35 45 	lds	r24, 0x4535	; 0x804535 <_ZL23g_seconds_left_to_sleep>
     dca:	90 91 36 45 	lds	r25, 0x4536	; 0x804536 <_ZL23g_seconds_left_to_sleep+0x1>
     dce:	a0 91 37 45 	lds	r26, 0x4537	; 0x804537 <_ZL23g_seconds_left_to_sleep+0x2>
     dd2:	b0 91 38 45 	lds	r27, 0x4538	; 0x804538 <_ZL23g_seconds_left_to_sleep+0x3>
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	a1 09       	sbc	r26, r1
     dda:	b1 09       	sbc	r27, r1
     ddc:	80 93 35 45 	sts	0x4535, r24	; 0x804535 <_ZL23g_seconds_left_to_sleep>
     de0:	90 93 36 45 	sts	0x4536, r25	; 0x804536 <_ZL23g_seconds_left_to_sleep+0x1>
     de4:	a0 93 37 45 	sts	0x4537, r26	; 0x804537 <_ZL23g_seconds_left_to_sleep+0x2>
     de8:	b0 93 38 45 	sts	0x4538, r27	; 0x804538 <_ZL23g_seconds_left_to_sleep+0x3>
     dec:	80 91 35 45 	lds	r24, 0x4535	; 0x804535 <_ZL23g_seconds_left_to_sleep>
     df0:	90 91 36 45 	lds	r25, 0x4536	; 0x804536 <_ZL23g_seconds_left_to_sleep+0x1>
     df4:	a0 91 37 45 	lds	r26, 0x4537	; 0x804537 <_ZL23g_seconds_left_to_sleep+0x2>
     df8:	b0 91 38 45 	lds	r27, 0x4538	; 0x804538 <_ZL23g_seconds_left_to_sleep+0x3>
     dfc:	89 2b       	or	r24, r25
     dfe:	8a 2b       	or	r24, r26
     e00:	8b 2b       	or	r24, r27
     e02:	31 f0       	breq	.+12     	; 0xe10 <__vector_41+0x138>
     e04:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
     e08:	88 23       	and	r24, r24
     e0a:	21 f0       	breq	.+8      	; 0xe14 <__vector_41+0x13c>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <__vector_41+0x13e>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <__vector_41+0x13e>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	88 23       	and	r24, r24
     e18:	09 f4       	brne	.+2      	; 0xe1c <__vector_41+0x144>
     e1a:	23 c3       	rjmp	.+1606   	; 0x1462 <__vector_41+0x78a>
     e1c:	10 92 33 45 	sts	0x4533, r1	; 0x804533 <_ZL13g_go_to_sleep>
     e20:	10 92 34 45 	sts	0x4534, r1	; 0x804534 <_ZL10g_sleeping>
     e24:	1e c3       	rjmp	.+1596   	; 0x1462 <__vector_41+0x78a>
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	1a 82       	std	Y+2, r1	; 0x02
     e2a:	1b 82       	std	Y+3, r1	; 0x03
     e2c:	1c 82       	std	Y+4, r1	; 0x04
     e2e:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
     e32:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
     e36:	89 2b       	or	r24, r25
     e38:	49 f0       	breq	.+18     	; 0xe4c <__vector_41+0x174>
     e3a:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
     e3e:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
     e48:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
     e4c:	80 91 30 45 	lds	r24, 0x4530	; 0x804530 <g_event_commenced>
     e50:	88 23       	and	r24, r24
     e52:	09 f4       	brne	.+2      	; 0xe56 <__vector_41+0x17e>
     e54:	54 c0       	rjmp	.+168    	; 0xefe <__vector_41+0x226>
     e56:	80 91 2b 45 	lds	r24, 0x452B	; 0x80452b <g_event_finish_time>
     e5a:	90 91 2c 45 	lds	r25, 0x452C	; 0x80452c <g_event_finish_time+0x1>
     e5e:	a0 91 2d 45 	lds	r26, 0x452D	; 0x80452d <g_event_finish_time+0x2>
     e62:	b0 91 2e 45 	lds	r27, 0x452E	; 0x80452e <g_event_finish_time+0x3>
     e66:	89 2b       	or	r24, r25
     e68:	8a 2b       	or	r24, r26
     e6a:	8b 2b       	or	r24, r27
     e6c:	51 f0       	breq	.+20     	; 0xe82 <__vector_41+0x1aa>
     e6e:	80 91 31 45 	lds	r24, 0x4531	; 0x804531 <g_check_for_next_event>
     e72:	81 11       	cpse	r24, r1
     e74:	08 c0       	rjmp	.+16     	; 0xe86 <__vector_41+0x1ae>
     e76:	80 91 f7 44 	lds	r24, 0x44F7	; 0x8044f7 <_ZL20g_shutting_down_wifi>
     e7a:	88 23       	and	r24, r24
     e7c:	31 f0       	breq	.+12     	; 0xe8a <__vector_41+0x1b2>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <__vector_41+0x1b4>
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <__vector_41+0x1b4>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <__vector_41+0x1b4>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	88 23       	and	r24, r24
     e8e:	b9 f1       	breq	.+110    	; 0xefe <__vector_41+0x226>
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
     e98:	49 81       	ldd	r20, Y+1	; 0x01
     e9a:	5a 81       	ldd	r21, Y+2	; 0x02
     e9c:	6b 81       	ldd	r22, Y+3	; 0x03
     e9e:	7c 81       	ldd	r23, Y+4	; 0x04
     ea0:	80 91 2b 45 	lds	r24, 0x452B	; 0x80452b <g_event_finish_time>
     ea4:	90 91 2c 45 	lds	r25, 0x452C	; 0x80452c <g_event_finish_time+0x1>
     ea8:	a0 91 2d 45 	lds	r26, 0x452D	; 0x80452d <g_event_finish_time+0x2>
     eac:	b0 91 2e 45 	lds	r27, 0x452E	; 0x80452e <g_event_finish_time+0x3>
     eb0:	48 17       	cp	r20, r24
     eb2:	59 07       	cpc	r21, r25
     eb4:	6a 07       	cpc	r22, r26
     eb6:	7b 07       	cpc	r23, r27
     eb8:	10 f1       	brcs	.+68     	; 0xefe <__vector_41+0x226>
     eba:	8c ef       	ldi	r24, 0xFC	; 252
     ebc:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
     ec0:	10 92 ef 44 	sts	0x44EF, r1	; 0x8044ef <_ZL12g_on_the_air>
     ec4:	10 92 f0 44 	sts	0x44F0, r1	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     ec8:	10 92 f1 44 	sts	0x44F1, r1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     ecc:	10 92 f2 44 	sts	0x44F2, r1	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0e 94 11 3a 	call	0x7422	; 0x7422 <_Z14keyTransmitterh>
     ed6:	10 92 2f 45 	sts	0x452F, r1	; 0x80452f <g_event_enabled>
     eda:	10 92 30 45 	sts	0x4530, r1	; 0x804530 <g_event_commenced>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 31 45 	sts	0x4531, r24	; 0x804531 <g_check_for_next_event>
     ee4:	8a e5       	ldi	r24, 0x5A	; 90
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
     eec:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
     ef0:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
     ef4:	88 23       	and	r24, r24
     ef6:	19 f0       	breq	.+6      	; 0xefe <__vector_41+0x226>
     ef8:	8c e3       	ldi	r24, 0x3C	; 60
     efa:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
     efe:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
     f02:	88 23       	and	r24, r24
     f04:	09 f4       	brne	.+2      	; 0xf08 <__vector_41+0x230>
     f06:	36 c2       	rjmp	.+1132   	; 0x1374 <__vector_41+0x69c>
     f08:	80 91 30 45 	lds	r24, 0x4530	; 0x804530 <g_event_commenced>
     f0c:	88 23       	and	r24, r24
     f0e:	09 f4       	brne	.+2      	; 0xf12 <__vector_41+0x23a>
     f10:	a6 c1       	rjmp	.+844    	; 0x125e <__vector_41+0x586>
     f12:	80 91 f3 44 	lds	r24, 0x44F3	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     f16:	90 91 f4 44 	lds	r25, 0x44F4	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     f1a:	89 2b       	or	r24, r25
     f1c:	49 f0       	breq	.+18     	; 0xf30 <__vector_41+0x258>
     f1e:	80 91 f3 44 	lds	r24, 0x44F3	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     f22:	90 91 f4 44 	lds	r25, 0x44F4	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     f2c:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     f30:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
     f34:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     f38:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     f3c:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     f40:	89 2b       	or	r24, r25
     f42:	8a 2b       	or	r24, r26
     f44:	8b 2b       	or	r24, r27
     f46:	09 f4       	brne	.+2      	; 0xf4a <__vector_41+0x272>
     f48:	15 c2       	rjmp	.+1066   	; 0x1374 <__vector_41+0x69c>
     f4a:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
     f4e:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     f52:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     f56:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     f5a:	18 16       	cp	r1, r24
     f5c:	19 06       	cpc	r1, r25
     f5e:	1a 06       	cpc	r1, r26
     f60:	1b 06       	cpc	r1, r27
     f62:	0c f0       	brlt	.+2      	; 0xf66 <__vector_41+0x28e>
     f64:	2a c1       	rjmp	.+596    	; 0x11ba <__vector_41+0x4e2>
     f66:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
     f6a:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     f6e:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     f72:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	a1 09       	sbc	r26, r1
     f7a:	b1 09       	sbc	r27, r1
     f7c:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
     f80:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     f84:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     f88:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     f8c:	80 91 f3 44 	lds	r24, 0x44F3	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     f90:	90 91 f4 44 	lds	r25, 0x44F4	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     f94:	89 2b       	or	r24, r25
     f96:	41 f4       	brne	.+16     	; 0xfa8 <__vector_41+0x2d0>
     f98:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <g_time_needed_for_ID>
     f9c:	90 91 24 45 	lds	r25, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
     fa0:	89 2b       	or	r24, r25
     fa2:	21 f4       	brne	.+8      	; 0xfac <__vector_41+0x2d4>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <__vector_41+0x2d6>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	01 c0       	rjmp	.+2      	; 0xfae <__vector_41+0x2d6>
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	88 23       	and	r24, r24
     fb0:	81 f1       	breq	.+96     	; 0x1012 <__vector_41+0x33a>
     fb2:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <g_time_needed_for_ID>
     fb6:	90 91 24 45 	lds	r25, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	40 91 ef 44 	lds	r20, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
     fc2:	50 91 f0 44 	lds	r21, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     fc6:	60 91 f1 44 	lds	r22, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     fca:	70 91 f2 44 	lds	r23, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     fce:	84 17       	cp	r24, r20
     fd0:	95 07       	cpc	r25, r21
     fd2:	a6 07       	cpc	r26, r22
     fd4:	b7 07       	cpc	r27, r23
     fd6:	e9 f4       	brne	.+58     	; 0x1012 <__vector_41+0x33a>
     fd8:	8f ee       	ldi	r24, 0xEF	; 239
     fda:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
     fde:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
     fe2:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
     fe6:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     fea:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     fee:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
     ff2:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
     ff6:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
     ffa:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
     ffe:	1d 82       	std	Y+5, r1	; 0x05
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	be 01       	movw	r22, r28
    1006:	6b 5f       	subi	r22, 0xFB	; 251
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8e e0       	ldi	r24, 0x0E	; 14
    100c:	95 e4       	ldi	r25, 0x45	; 69
    100e:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
    1012:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    1016:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    101a:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    101e:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1022:	89 2b       	or	r24, r25
    1024:	8a 2b       	or	r24, r26
    1026:	8b 2b       	or	r24, r27
    1028:	09 f0       	breq	.+2      	; 0x102c <__vector_41+0x354>
    102a:	a4 c1       	rjmp	.+840    	; 0x1374 <__vector_41+0x69c>
    102c:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1030:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1034:	89 2b       	or	r24, r25
    1036:	09 f4       	brne	.+2      	; 0x103a <__vector_41+0x362>
    1038:	a7 c0       	rjmp	.+334    	; 0x1188 <__vector_41+0x4b0>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	0e 94 11 3a 	call	0x7422	; 0x7422 <_Z14keyTransmitterh>
    1040:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1044:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1048:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    104c:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1050:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1054:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1058:	05 2e       	mov	r0, r21
    105a:	00 0c       	add	r0, r0
    105c:	66 0b       	sbc	r22, r22
    105e:	77 0b       	sbc	r23, r23
    1060:	84 1b       	sub	r24, r20
    1062:	95 0b       	sbc	r25, r21
    1064:	a6 0b       	sbc	r26, r22
    1066:	b7 0b       	sbc	r27, r23
    1068:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    106c:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1070:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1074:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	8d 83       	std	Y+5, r24	; 0x05
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	be 01       	movw	r22, r28
    1082:	6b 5f       	subi	r22, 0xFB	; 251
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	89 ef       	ldi	r24, 0xF9	; 249
    1088:	94 e4       	ldi	r25, 0x44	; 68
    108a:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
    108e:	8e ef       	ldi	r24, 0xFE	; 254
    1090:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    109c:	29 81       	ldd	r18, Y+1	; 0x01
    109e:	3a 81       	ldd	r19, Y+2	; 0x02
    10a0:	4b 81       	ldd	r20, Y+3	; 0x03
    10a2:	5c 81       	ldd	r21, Y+4	; 0x04
    10a4:	80 91 2b 45 	lds	r24, 0x452B	; 0x80452b <g_event_finish_time>
    10a8:	90 91 2c 45 	lds	r25, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    10ac:	a0 91 2d 45 	lds	r26, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    10b0:	b0 91 2e 45 	lds	r27, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    10b4:	28 17       	cp	r18, r24
    10b6:	39 07       	cpc	r19, r25
    10b8:	4a 07       	cpc	r20, r26
    10ba:	5b 07       	cpc	r21, r27
    10bc:	58 f4       	brcc	.+22     	; 0x10d4 <__vector_41+0x3fc>
    10be:	60 91 2b 45 	lds	r22, 0x452B	; 0x80452b <g_event_finish_time>
    10c2:	70 91 2c 45 	lds	r23, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    10c6:	80 91 2d 45 	lds	r24, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    10ca:	90 91 2e 45 	lds	r25, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    10ce:	0e 94 29 3c 	call	0x7852	; 0x7852 <_Z7timeDifmm>
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <__vector_41+0x402>
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	cb 01       	movw	r24, r22
    10da:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    10de:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    10e2:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    10e6:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    10ea:	24 0f       	add	r18, r20
    10ec:	35 1f       	adc	r19, r21
    10ee:	21 5f       	subi	r18, 0xF1	; 241
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	03 2e       	mov	r0, r19
    10f4:	00 0c       	add	r0, r0
    10f6:	44 0b       	sbc	r20, r20
    10f8:	55 0b       	sbc	r21, r21
    10fa:	26 17       	cp	r18, r22
    10fc:	37 07       	cpc	r19, r23
    10fe:	48 07       	cpc	r20, r24
    1100:	59 07       	cpc	r21, r25
    1102:	0c f0       	brlt	.+2      	; 0x1106 <__vector_41+0x42e>
    1104:	37 c1       	rjmp	.+622    	; 0x1374 <__vector_41+0x69c>
    1106:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    110a:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    110e:	40 97       	sbiw	r24, 0x10	; 16
    1110:	34 f0       	brlt	.+12     	; 0x111e <__vector_41+0x446>
    1112:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1116:	88 23       	and	r24, r24
    1118:	21 f0       	breq	.+8      	; 0x1122 <__vector_41+0x44a>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <__vector_41+0x44c>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <__vector_41+0x44c>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <__vector_41+0x452>
    1128:	25 c1       	rjmp	.+586    	; 0x1374 <__vector_41+0x69c>
    112a:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    112e:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1132:	0a 97       	sbiw	r24, 0x0a	; 10
    1134:	09 2e       	mov	r0, r25
    1136:	00 0c       	add	r0, r0
    1138:	aa 0b       	sbc	r26, r26
    113a:	bb 0b       	sbc	r27, r27
    113c:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1140:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1144:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1148:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	80 93 f8 44 	sts	0x44F8, r24	; 0x8044f8 <_ZL11g_sleepType>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 33 45 	sts	0x4533, r24	; 0x804533 <_ZL13g_go_to_sleep>
    1158:	80 91 f3 44 	lds	r24, 0x44F3	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    115c:	90 91 f4 44 	lds	r25, 0x44F4	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    1160:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep>
    1164:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1168:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    116c:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1170:	84 1b       	sub	r24, r20
    1172:	95 0b       	sbc	r25, r21
    1174:	18 16       	cp	r1, r24
    1176:	19 06       	cpc	r1, r25
    1178:	14 f0       	brlt	.+4      	; 0x117e <__vector_41+0x4a6>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    1182:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    1186:	f6 c0       	rjmp	.+492    	; 0x1374 <__vector_41+0x69c>
    1188:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    118c:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1190:	09 2e       	mov	r0, r25
    1192:	00 0c       	add	r0, r0
    1194:	aa 0b       	sbc	r26, r26
    1196:	bb 0b       	sbc	r27, r27
    1198:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    119c:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11a0:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    11a4:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    11a8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    11ac:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
    11b0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    11b4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    11b8:	dd c0       	rjmp	.+442    	; 0x1374 <__vector_41+0x69c>
    11ba:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    11be:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11c2:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    11c6:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    11ca:	bb 23       	and	r27, r27
    11cc:	0c f0       	brlt	.+2      	; 0x11d0 <__vector_41+0x4f8>
    11ce:	d2 c0       	rjmp	.+420    	; 0x1374 <__vector_41+0x69c>
    11d0:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    11d4:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11d8:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    11dc:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	a1 1d       	adc	r26, r1
    11e4:	b1 1d       	adc	r27, r1
    11e6:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    11ea:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11ee:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    11f2:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    11f6:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    11fa:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11fe:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1202:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1206:	89 2b       	or	r24, r25
    1208:	8a 2b       	or	r24, r26
    120a:	8b 2b       	or	r24, r27
    120c:	09 f0       	breq	.+2      	; 0x1210 <__vector_41+0x538>
    120e:	b2 c0       	rjmp	.+356    	; 0x1374 <__vector_41+0x69c>
    1210:	8d ef       	ldi	r24, 0xFD	; 253
    1212:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    1216:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    121a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    121e:	09 2e       	mov	r0, r25
    1220:	00 0c       	add	r0, r0
    1222:	aa 0b       	sbc	r26, r26
    1224:	bb 0b       	sbc	r27, r27
    1226:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    122a:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    122e:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1232:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1236:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    123a:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
    123e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1242:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	8d 83       	std	Y+5, r24	; 0x05
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	be 01       	movw	r22, r28
    1250:	6b 5f       	subi	r22, 0xFB	; 251
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	89 ef       	ldi	r24, 0xF9	; 249
    1256:	94 e4       	ldi	r25, 0x44	; 68
    1258:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
    125c:	8b c0       	rjmp	.+278    	; 0x1374 <__vector_41+0x69c>
    125e:	80 91 27 45 	lds	r24, 0x4527	; 0x804527 <g_event_start_time>
    1262:	90 91 28 45 	lds	r25, 0x4528	; 0x804528 <g_event_start_time+0x1>
    1266:	a0 91 29 45 	lds	r26, 0x4529	; 0x804529 <g_event_start_time+0x2>
    126a:	b0 91 2a 45 	lds	r27, 0x452A	; 0x80452a <g_event_start_time+0x3>
    126e:	89 2b       	or	r24, r25
    1270:	8a 2b       	or	r24, r26
    1272:	8b 2b       	or	r24, r27
    1274:	09 f4       	brne	.+2      	; 0x1278 <__vector_41+0x5a0>
    1276:	7e c0       	rjmp	.+252    	; 0x1374 <__vector_41+0x69c>
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    1280:	49 81       	ldd	r20, Y+1	; 0x01
    1282:	5a 81       	ldd	r21, Y+2	; 0x02
    1284:	6b 81       	ldd	r22, Y+3	; 0x03
    1286:	7c 81       	ldd	r23, Y+4	; 0x04
    1288:	80 91 27 45 	lds	r24, 0x4527	; 0x804527 <g_event_start_time>
    128c:	90 91 28 45 	lds	r25, 0x4528	; 0x804528 <g_event_start_time+0x1>
    1290:	a0 91 29 45 	lds	r26, 0x4529	; 0x804529 <g_event_start_time+0x2>
    1294:	b0 91 2a 45 	lds	r27, 0x452A	; 0x80452a <g_event_start_time+0x3>
    1298:	48 17       	cp	r20, r24
    129a:	59 07       	cpc	r21, r25
    129c:	6a 07       	cpc	r22, r26
    129e:	7b 07       	cpc	r23, r27
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <__vector_41+0x5cc>
    12a2:	68 c0       	rjmp	.+208    	; 0x1374 <__vector_41+0x69c>
    12a4:	80 91 25 45 	lds	r24, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    12a8:	90 91 26 45 	lds	r25, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    12ac:	89 2b       	or	r24, r25
    12ae:	59 f1       	breq	.+86     	; 0x1306 <__vector_41+0x62e>
    12b0:	8e ef       	ldi	r24, 0xFE	; 254
    12b2:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    12b6:	80 91 25 45 	lds	r24, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    12ba:	90 91 26 45 	lds	r25, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    12be:	91 95       	neg	r25
    12c0:	81 95       	neg	r24
    12c2:	91 09       	sbc	r25, r1
    12c4:	09 2e       	mov	r0, r25
    12c6:	00 0c       	add	r0, r0
    12c8:	aa 0b       	sbc	r26, r26
    12ca:	bb 0b       	sbc	r27, r27
    12cc:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    12d0:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    12d4:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    12d8:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    12dc:	20 91 25 45 	lds	r18, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    12e0:	30 91 26 45 	lds	r19, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    12e4:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    12e8:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    12f4:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    12f8:	82 1b       	sub	r24, r18
    12fa:	93 0b       	sbc	r25, r19
    12fc:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    1300:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    1304:	34 c0       	rjmp	.+104    	; 0x136e <__vector_41+0x696>
    1306:	8d ef       	ldi	r24, 0xFD	; 253
    1308:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    130c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1310:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1314:	09 2e       	mov	r0, r25
    1316:	00 0c       	add	r0, r0
    1318:	aa 0b       	sbc	r26, r26
    131a:	bb 0b       	sbc	r27, r27
    131c:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    1320:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1324:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1328:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    132c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1330:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1334:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    1338:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    133c:	82 1b       	sub	r24, r18
    133e:	93 0b       	sbc	r25, r19
    1340:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    1344:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    1348:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    134c:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
    1350:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1354:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	be 01       	movw	r22, r28
    1362:	6b 5f       	subi	r22, 0xFB	; 251
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	89 ef       	ldi	r24, 0xF9	; 249
    1368:	94 e4       	ldi	r25, 0x44	; 68
    136a:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 30 45 	sts	0x4530, r24	; 0x804530 <g_event_commenced>
    1374:	80 91 f6 44 	lds	r24, 0x44F6	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    1378:	88 23       	and	r24, r24
    137a:	e1 f0       	breq	.+56     	; 0x13b4 <__vector_41+0x6dc>
    137c:	80 91 f6 44 	lds	r24, 0x44F6	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    1380:	81 50       	subi	r24, 0x01	; 1
    1382:	80 93 f6 44 	sts	0x44F6, r24	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    1386:	80 91 f6 44 	lds	r24, 0x44F6	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    138a:	85 30       	cpi	r24, 0x05	; 5
    138c:	39 f4       	brne	.+14     	; 0x139c <__vector_41+0x6c4>
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0e 94 a3 20 	call	0x4146	; 0x4146 <_Z10wifi_powerb>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 ad 20 	call	0x415a	; 0x415a <_Z10wifi_resetb>
    139a:	63 c0       	rjmp	.+198    	; 0x1462 <__vector_41+0x78a>
    139c:	80 91 f6 44 	lds	r24, 0x44F6	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    13a0:	81 11       	cpse	r24, r1
    13a2:	5f c0       	rjmp	.+190    	; 0x1462 <__vector_41+0x78a>
    13a4:	46 e0       	ldi	r20, 0x06	; 6
    13a6:	60 e8       	ldi	r22, 0x80	; 128
    13a8:	75 e2       	ldi	r23, 0x25	; 37
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 ef 2c 	call	0x59de	; 0x59de <_Z12linkbus_initm14USART_Number_t>
    13b2:	57 c0       	rjmp	.+174    	; 0x1462 <__vector_41+0x78a>
    13b4:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    13b8:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    13bc:	89 2b       	or	r24, r25
    13be:	71 f0       	breq	.+28     	; 0x13dc <__vector_41+0x704>
    13c0:	80 91 f7 44 	lds	r24, 0x44F7	; 0x8044f7 <_ZL20g_shutting_down_wifi>
    13c4:	81 11       	cpse	r24, r1
    13c6:	0c c0       	rjmp	.+24     	; 0x13e0 <__vector_41+0x708>
    13c8:	80 91 31 45 	lds	r24, 0x4531	; 0x804531 <g_check_for_next_event>
    13cc:	81 11       	cpse	r24, r1
    13ce:	0a c0       	rjmp	.+20     	; 0x13e4 <__vector_41+0x70c>
    13d0:	80 91 32 45 	lds	r24, 0x4532	; 0x804532 <g_waiting_for_next_event>
    13d4:	88 23       	and	r24, r24
    13d6:	41 f0       	breq	.+16     	; 0x13e8 <__vector_41+0x710>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <__vector_41+0x712>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <__vector_41+0x712>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <__vector_41+0x712>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <__vector_41+0x712>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	88 23       	and	r24, r24
    13ec:	99 f1       	breq	.+102    	; 0x1454 <__vector_41+0x77c>
    13ee:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    13f2:	88 23       	and	r24, r24
    13f4:	79 f1       	breq	.+94     	; 0x1454 <__vector_41+0x77c>
    13f6:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    13fa:	81 50       	subi	r24, 0x01	; 1
    13fc:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1400:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1404:	81 11       	cpse	r24, r1
    1406:	26 c0       	rjmp	.+76     	; 0x1454 <__vector_41+0x77c>
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 ad 20 	call	0x415a	; 0x415a <_Z10wifi_resetb>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	0e 94 a3 20 	call	0x4146	; 0x4146 <_Z10wifi_powerb>
    1414:	10 92 f7 44 	sts	0x44F7, r1	; 0x8044f7 <_ZL20g_shutting_down_wifi>
    1418:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
    141c:	81 11       	cpse	r24, r1
    141e:	12 c0       	rjmp	.+36     	; 0x1444 <__vector_41+0x76c>
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	80 93 f8 44 	sts	0x44F8, r24	; 0x8044f8 <_ZL11g_sleepType>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 93 33 45 	sts	0x4533, r24	; 0x804533 <_ZL13g_go_to_sleep>
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	9f ef       	ldi	r25, 0xFF	; 255
    1430:	dc 01       	movw	r26, r24
    1432:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1436:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    143a:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    143e:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1442:	06 c0       	rjmp	.+12     	; 0x1450 <__vector_41+0x778>
    1444:	80 91 f8 44 	lds	r24, 0x44F8	; 0x8044f8 <_ZL11g_sleepType>
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	11 f4       	brne	.+4      	; 0x1450 <__vector_41+0x778>
    144c:	0e 94 df 18 	call	0x31be	; 0x31be <_Z12eventEnabledv>
    1450:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    1454:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1458:	88 23       	and	r24, r24
    145a:	19 f0       	breq	.+6      	; 0x1462 <__vector_41+0x78a>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 f5 44 	sts	0x44F5, r24	; 0x8044f5 <_ZL16g_report_seconds>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    1468:	25 96       	adiw	r28, 0x05	; 5
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0b be       	out	0x3b, r0	; 59
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_12>:
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	0b b6       	in	r0, 0x3b	; 59
    14a4:	0f 92       	push	r0
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <__vector_12+0x2c>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    14cc:	80 ff       	sbrs	r24, 0
    14ce:	d1 c0       	rjmp	.+418    	; 0x1672 <__vector_12+0x1da>
    14d0:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    14d4:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    14d8:	89 2b       	or	r24, r25
    14da:	49 f0       	breq	.+18     	; 0x14ee <__vector_12+0x56>
    14dc:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    14e0:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    14ea:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    14ee:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    14f2:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    14f6:	89 2b       	or	r24, r25
    14f8:	49 f0       	breq	.+18     	; 0x150c <__vector_12+0x74>
    14fa:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    14fe:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    1508:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    150c:	80 91 ec 44 	lds	r24, 0x44EC	; 0x8044ec <_ZL21g_util_tick_countdown>
    1510:	90 91 ed 44 	lds	r25, 0x44ED	; 0x8044ed <_ZL21g_util_tick_countdown+0x1>
    1514:	89 2b       	or	r24, r25
    1516:	49 f0       	breq	.+18     	; 0x152a <__vector_12+0x92>
    1518:	80 91 ec 44 	lds	r24, 0x44EC	; 0x8044ec <_ZL21g_util_tick_countdown>
    151c:	90 91 ed 44 	lds	r25, 0x44ED	; 0x8044ed <_ZL21g_util_tick_countdown+0x1>
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	80 93 ec 44 	sts	0x44EC, r24	; 0x8044ec <_ZL21g_util_tick_countdown>
    1526:	90 93 ed 44 	sts	0x44ED, r25	; 0x8044ed <_ZL21g_util_tick_countdown+0x1>
    152a:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
    152e:	88 23       	and	r24, r24
    1530:	29 f0       	breq	.+10     	; 0x153c <__vector_12+0xa4>
    1532:	80 91 30 45 	lds	r24, 0x4530	; 0x804530 <g_event_commenced>
    1536:	81 11       	cpse	r24, r1
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <__vector_12+0xa8>
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <__vector_12+0xaa>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <__vector_12+0xaa>
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	88 23       	and	r24, r24
    1544:	09 f4       	brne	.+2      	; 0x1548 <__vector_12+0xb0>
    1546:	92 c0       	rjmp	.+292    	; 0x166c <__vector_12+0x1d4>
    1548:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    154c:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1550:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1554:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1558:	18 16       	cp	r1, r24
    155a:	19 06       	cpc	r1, r25
    155c:	1a 06       	cpc	r1, r26
    155e:	1b 06       	cpc	r1, r27
    1560:	0c f0       	brlt	.+2      	; 0x1564 <__vector_12+0xcc>
    1562:	66 c0       	rjmp	.+204    	; 0x1630 <__vector_12+0x198>
    1564:	80 91 5d 45 	lds	r24, 0x455D	; 0x80455d <_ZZ11__vector_12E7codeInc>
    1568:	90 91 5e 45 	lds	r25, 0x455E	; 0x80455e <_ZZ11__vector_12E7codeInc+0x1>
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	09 f4       	brne	.+2      	; 0x1572 <__vector_12+0xda>
    1570:	47 c0       	rjmp	.+142    	; 0x1600 <__vector_12+0x168>
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <_ZZ11__vector_12E7codeInc>
    1578:	90 93 5e 45 	sts	0x455E, r25	; 0x80455e <_ZZ11__vector_12E7codeInc+0x1>
    157c:	89 2b       	or	r24, r25
    157e:	09 f0       	breq	.+2      	; 0x1582 <__vector_12+0xea>
    1580:	75 c0       	rjmp	.+234    	; 0x166c <__vector_12+0x1d4>
    1582:	ae 01       	movw	r20, r28
    1584:	4f 5f       	subi	r20, 0xFF	; 255
    1586:	5f 4f       	sbci	r21, 0xFF	; 255
    1588:	be 01       	movw	r22, r28
    158a:	6e 5f       	subi	r22, 0xFE	; 254
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
    1596:	80 93 5f 45 	sts	0x455F, r24	; 0x80455f <_ZZ11__vector_12E3key>
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	81 11       	cpse	r24, r1
    159e:	25 c0       	rjmp	.+74     	; 0x15ea <__vector_12+0x152>
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	88 23       	and	r24, r24
    15a4:	11 f1       	breq	.+68     	; 0x15ea <__vector_12+0x152>
    15a6:	8d ef       	ldi	r24, 0xFD	; 253
    15a8:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    15ac:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    15b0:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
    15b4:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    15b8:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	8a 83       	std	Y+2, r24	; 0x02
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	be 01       	movw	r22, r28
    15c6:	6e 5f       	subi	r22, 0xFE	; 254
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	89 ef       	ldi	r24, 0xF9	; 249
    15cc:	94 e4       	ldi	r25, 0x44	; 68
    15ce:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
    15d2:	ae 01       	movw	r20, r28
    15d4:	4f 5f       	subi	r20, 0xFF	; 255
    15d6:	5f 4f       	sbci	r21, 0xFF	; 255
    15d8:	be 01       	movw	r22, r28
    15da:	6e 5f       	subi	r22, 0xFE	; 254
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
    15e6:	80 93 5f 45 	sts	0x455F, r24	; 0x80455f <_ZZ11__vector_12E3key>
    15ea:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ11__vector_12E3key>
    15ee:	88 23       	and	r24, r24
    15f0:	e9 f1       	breq	.+122    	; 0x166c <__vector_12+0x1d4>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	0e 94 0f 3a 	call	0x741e	; 0x741e <_Z18powerToTransmitterh>
    15f8:	89 b1       	in	r24, 0x09	; 9
    15fa:	8f 7b       	andi	r24, 0xBF	; 191
    15fc:	89 b9       	out	0x09, r24	; 9
    15fe:	36 c0       	rjmp	.+108    	; 0x166c <__vector_12+0x1d4>
    1600:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ11__vector_12E3key>
    1604:	0e 94 11 3a 	call	0x7422	; 0x7422 <_Z14keyTransmitterh>
    1608:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ11__vector_12E3key>
    160c:	81 11       	cpse	r24, r1
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <__vector_12+0x180>
    1610:	89 b1       	in	r24, 0x09	; 9
    1612:	80 64       	ori	r24, 0x40	; 64
    1614:	89 b9       	out	0x09, r24	; 9
    1616:	03 c0       	rjmp	.+6      	; 0x161e <__vector_12+0x186>
    1618:	89 b1       	in	r24, 0x09	; 9
    161a:	8f 7b       	andi	r24, 0xBF	; 191
    161c:	89 b9       	out	0x09, r24	; 9
    161e:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    1622:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    1626:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <_ZZ11__vector_12E7codeInc>
    162a:	90 93 5e 45 	sts	0x455E, r25	; 0x80455e <_ZZ11__vector_12E7codeInc+0x1>
    162e:	1e c0       	rjmp	.+60     	; 0x166c <__vector_12+0x1d4>
    1630:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    1634:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1638:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    163c:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1640:	89 2b       	or	r24, r25
    1642:	8a 2b       	or	r24, r26
    1644:	8b 2b       	or	r24, r27
    1646:	91 f4       	brne	.+36     	; 0x166c <__vector_12+0x1d4>
    1648:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ11__vector_12E3key>
    164c:	88 23       	and	r24, r24
    164e:	71 f0       	breq	.+28     	; 0x166c <__vector_12+0x1d4>
    1650:	10 92 5f 45 	sts	0x455F, r1	; 0x80455f <_ZZ11__vector_12E3key>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	0e 94 11 3a 	call	0x7422	; 0x7422 <_Z14keyTransmitterh>
    165a:	89 b1       	in	r24, 0x09	; 9
    165c:	80 64       	ori	r24, 0x40	; 64
    165e:	89 b9       	out	0x09, r24	; 9
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	0e 94 0f 3a 	call	0x741e	; 0x741e <_Z18powerToTransmitterh>
    1666:	8e ef       	ldi	r24, 0xFE	; 254
    1668:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	ff 91       	pop	r31
    167c:	ef 91       	pop	r30
    167e:	bf 91       	pop	r27
    1680:	af 91       	pop	r26
    1682:	9f 91       	pop	r25
    1684:	8f 91       	pop	r24
    1686:	7f 91       	pop	r23
    1688:	6f 91       	pop	r22
    168a:	5f 91       	pop	r21
    168c:	4f 91       	pop	r20
    168e:	3f 91       	pop	r19
    1690:	2f 91       	pop	r18
    1692:	0f 90       	pop	r0
    1694:	0b be       	out	0x3b, r0	; 59
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <main>:
    16a0:	0e 94 91 01 	call	0x322	; 0x322 <atmel_start_init>
    16a4:	89 b1       	in	r24, 0x09	; 9
    16a6:	80 64       	ori	r24, 0x40	; 64
    16a8:	89 b9       	out	0x09, r24	; 9
    16aa:	83 e4       	ldi	r24, 0x43	; 67
    16ac:	95 e4       	ldi	r25, 0x45	; 69
    16ae:	0e 94 85 28 	call	0x510a	; 0x510a <_ZN13EepromManager20initializeEEPROMVarsEv>
    16b2:	83 e4       	ldi	r24, 0x43	; 67
    16b4:	95 e4       	ldi	r25, 0x45	; 69
    16b6:	0e 94 99 27 	call	0x4f32	; 0x4f32 <_ZN13EepromManager11readNonVolsEv>
    16ba:	0e 94 9e 31 	call	0x633c	; 0x633c <sb_send_NewLine>
    16be:	87 e4       	ldi	r24, 0x47	; 71
    16c0:	90 e4       	ldi	r25, 0x40	; 64
    16c2:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    16c6:	84 e6       	ldi	r24, 0x64	; 100
    16c8:	90 e4       	ldi	r25, 0x40	; 64
    16ca:	9f 93       	push	r25
    16cc:	8f 93       	push	r24
    16ce:	88 e6       	ldi	r24, 0x68	; 104
    16d0:	90 e4       	ldi	r25, 0x40	; 64
    16d2:	9f 93       	push	r25
    16d4:	8f 93       	push	r24
    16d6:	85 ed       	ldi	r24, 0xD5	; 213
    16d8:	94 e4       	ldi	r25, 0x44	; 68
    16da:	9f 93       	push	r25
    16dc:	8f 93       	push	r24
    16de:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    16e2:	85 ed       	ldi	r24, 0xD5	; 213
    16e4:	94 e4       	ldi	r25, 0x44	; 68
    16e6:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    16ea:	85 e7       	ldi	r24, 0x75	; 117
    16ec:	90 e4       	ldi	r25, 0x40	; 64
    16ee:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	0e 94 2d 20 	call	0x405a	; 0x405a <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
    16f8:	0e 94 a8 3a 	call	0x7550	; 0x7550 <_Z16init_transmitterv>
    16fc:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    1700:	80 91 ea 44 	lds	r24, 0x44EA	; 0x8044ea <_ZL17g_last_error_code>
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	88 23       	and	r24, r24
    1712:	31 f0       	breq	.+12     	; 0x1720 <main+0x80>
    1714:	0e 94 9e 31 	call	0x633c	; 0x633c <sb_send_NewLine>
    1718:	88 eb       	ldi	r24, 0xB8	; 184
    171a:	91 e4       	ldi	r25, 0x41	; 65
    171c:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1720:	0e 94 22 26 	call	0x4c44	; 0x4c44 <ds3231_init>
    1724:	88 23       	and	r24, r24
    1726:	31 f0       	breq	.+12     	; 0x1734 <main+0x94>
    1728:	0e 94 9e 31 	call	0x633c	; 0x633c <sb_send_NewLine>
    172c:	83 ee       	ldi	r24, 0xE3	; 227
    172e:	91 e4       	ldi	r25, 0x41	; 65
    1730:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1734:	0e 94 b7 20 	call	0x416e	; 0x416e <_Z11wifiPresentv>
    1738:	81 11       	cpse	r24, r1
    173a:	06 c0       	rjmp	.+12     	; 0x1748 <main+0xa8>
    173c:	0e 94 9e 31 	call	0x633c	; 0x633c <sb_send_NewLine>
    1740:	8b e0       	ldi	r24, 0x0B	; 11
    1742:	92 e4       	ldi	r25, 0x42	; 66
    1744:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1748:	0e 94 9e 31 	call	0x633c	; 0x633c <sb_send_NewLine>
    174c:	0e 94 93 31 	call	0x6326	; 0x6326 <sb_send_NewPrompt>
    1750:	6a ef       	ldi	r22, 0xFA	; 250
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 1a 39 	call	0x7234	; 0x7234 <util_delay_ms>
    175c:	88 23       	and	r24, r24
    175e:	c1 f3       	breq	.-16     	; 0x1750 <main+0xb0>
    1760:	0e 94 31 12 	call	0x2462	; 0x2462 <_Z17handleLinkBusMsgsv>
    1764:	0e 94 b5 0b 	call	0x176a	; 0x176a <_Z19handleSerialBusMsgsv>
    1768:	f3 cf       	rjmp	.-26     	; 0x1750 <main+0xb0>

0000176a <_Z19handleSerialBusMsgsv>:
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	ec 97       	sbiw	r28, 0x3c	; 60
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0e 94 c9 30 	call	0x6192	; 0x6192 <nextFullSBRxBuffer>
    1784:	8a 87       	std	Y+10, r24	; 0x0a
    1786:	9b 87       	std	Y+11, r25	; 0x0b
    1788:	21 e0       	ldi	r18, 0x01	; 1
    178a:	8a 85       	ldd	r24, Y+10	; 0x0a
    178c:	9b 85       	ldd	r25, Y+11	; 0x0b
    178e:	89 2b       	or	r24, r25
    1790:	09 f4       	brne	.+2      	; 0x1794 <_Z19handleSerialBusMsgsv+0x2a>
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	22 23       	and	r18, r18
    1796:	09 f4       	brne	.+2      	; 0x179a <_Z19handleSerialBusMsgsv+0x30>
    1798:	59 c6       	rjmp	.+3250   	; 0x244c <_Z19handleSerialBusMsgsv+0xce2>
    179a:	8a 85       	ldd	r24, Y+10	; 0x0a
    179c:	9b 85       	ldd	r25, Y+11	; 0x0b
    179e:	fc 01       	movw	r30, r24
    17a0:	81 81       	ldd	r24, Z+1	; 0x01
    17a2:	92 81       	ldd	r25, Z+2	; 0x02
    17a4:	8c 87       	std	Y+12, r24	; 0x0c
    17a6:	9d 87       	std	Y+13, r25	; 0x0d
    17a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ac:	8a 3e       	cpi	r24, 0xEA	; 234
    17ae:	f2 e2       	ldi	r31, 0x22	; 34
    17b0:	9f 07       	cpc	r25, r31
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <_Z19handleSerialBusMsgsv+0x4c>
    17b4:	40 c3       	rjmp	.+1664   	; 0x1e36 <_Z19handleSerialBusMsgsv+0x6cc>
    17b6:	8b 3e       	cpi	r24, 0xEB	; 235
    17b8:	22 e2       	ldi	r18, 0x22	; 34
    17ba:	92 07       	cpc	r25, r18
    17bc:	b8 f4       	brcc	.+46     	; 0x17ec <_Z19handleSerialBusMsgsv+0x82>
    17be:	8f 36       	cpi	r24, 0x6F	; 111
    17c0:	ed e1       	ldi	r30, 0x1D	; 29
    17c2:	9e 07       	cpc	r25, r30
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <_Z19handleSerialBusMsgsv+0x5e>
    17c6:	89 c3       	rjmp	.+1810   	; 0x1eda <_Z19handleSerialBusMsgsv+0x770>
    17c8:	80 37       	cpi	r24, 0x70	; 112
    17ca:	fd e1       	ldi	r31, 0x1D	; 29
    17cc:	9f 07       	cpc	r25, r31
    17ce:	28 f4       	brcc	.+10     	; 0x17da <_Z19handleSerialBusMsgsv+0x70>
    17d0:	8e 31       	cpi	r24, 0x1E	; 30
    17d2:	93 40       	sbci	r25, 0x03	; 3
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <_Z19handleSerialBusMsgsv+0x6e>
    17d6:	1d c2       	rjmp	.+1082   	; 0x1c12 <_Z19handleSerialBusMsgsv+0x4a8>
    17d8:	25 c6       	rjmp	.+3146   	; 0x2424 <_Z19handleSerialBusMsgsv+0xcba>
    17da:	86 3c       	cpi	r24, 0xC6	; 198
    17dc:	ee e1       	ldi	r30, 0x1E	; 30
    17de:	9e 07       	cpc	r25, r30
    17e0:	e9 f0       	breq	.+58     	; 0x181c <_Z19handleSerialBusMsgsv+0xb2>
    17e2:	81 3d       	cpi	r24, 0xD1	; 209
    17e4:	9e 41       	sbci	r25, 0x1E	; 30
    17e6:	09 f4       	brne	.+2      	; 0x17ea <_Z19handleSerialBusMsgsv+0x80>
    17e8:	7b c1       	rjmp	.+758    	; 0x1ae0 <_Z19handleSerialBusMsgsv+0x376>
    17ea:	1c c6       	rjmp	.+3128   	; 0x2424 <_Z19handleSerialBusMsgsv+0xcba>
    17ec:	82 37       	cpi	r24, 0x72	; 114
    17ee:	23 e2       	ldi	r18, 0x23	; 35
    17f0:	92 07       	cpc	r25, r18
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <_Z19handleSerialBusMsgsv+0x8c>
    17f4:	9c c2       	rjmp	.+1336   	; 0x1d2e <_Z19handleSerialBusMsgsv+0x5c4>
    17f6:	83 37       	cpi	r24, 0x73	; 115
    17f8:	e3 e2       	ldi	r30, 0x23	; 35
    17fa:	9e 07       	cpc	r25, r30
    17fc:	28 f4       	brcc	.+10     	; 0x1808 <_Z19handleSerialBusMsgsv+0x9e>
    17fe:	88 3f       	cpi	r24, 0xF8	; 248
    1800:	92 42       	sbci	r25, 0x22	; 34
    1802:	09 f4       	brne	.+2      	; 0x1806 <_Z19handleSerialBusMsgsv+0x9c>
    1804:	0a c1       	rjmp	.+532    	; 0x1a1a <_Z19handleSerialBusMsgsv+0x2b0>
    1806:	0e c6       	rjmp	.+3100   	; 0x2424 <_Z19handleSerialBusMsgsv+0xcba>
    1808:	84 33       	cpi	r24, 0x34	; 52
    180a:	24 e2       	ldi	r18, 0x24	; 36
    180c:	92 07       	cpc	r25, r18
    180e:	09 f4       	brne	.+2      	; 0x1812 <_Z19handleSerialBusMsgsv+0xa8>
    1810:	cc c1       	rjmp	.+920    	; 0x1baa <_Z19handleSerialBusMsgsv+0x440>
    1812:	85 3c       	cpi	r24, 0xC5	; 197
    1814:	94 42       	sbci	r25, 0x24	; 36
    1816:	09 f4       	brne	.+2      	; 0x181a <_Z19handleSerialBusMsgsv+0xb0>
    1818:	f1 c5       	rjmp	.+3042   	; 0x23fc <_Z19handleSerialBusMsgsv+0xc92>
    181a:	04 c6       	rjmp	.+3080   	; 0x2424 <_Z19handleSerialBusMsgsv+0xcba>
    181c:	8a 85       	ldd	r24, Y+10	; 0x0a
    181e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1820:	fc 01       	movw	r30, r24
    1822:	83 81       	ldd	r24, Z+3	; 0x03
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	89 2b       	or	r24, r25
    1832:	09 f4       	brne	.+2      	; 0x1836 <_Z19handleSerialBusMsgsv+0xcc>
    1834:	d0 c0       	rjmp	.+416    	; 0x19d6 <_Z19handleSerialBusMsgsv+0x26c>
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	82 34       	cpi	r24, 0x42	; 66
    183c:	91 05       	cpc	r25, r1
    183e:	19 f4       	brne	.+6      	; 0x1846 <_Z19handleSerialBusMsgsv+0xdc>
    1840:	19 82       	std	Y+1, r1	; 0x01
    1842:	1a 82       	std	Y+2, r1	; 0x02
    1844:	ac c0       	rjmp	.+344    	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	86 34       	cpi	r24, 0x46	; 70
    184c:	91 05       	cpc	r25, r1
    184e:	29 f4       	brne	.+10     	; 0x185a <_Z19handleSerialBusMsgsv+0xf0>
    1850:	86 e0       	ldi	r24, 0x06	; 6
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	a2 c0       	rjmp	.+324    	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	83 34       	cpi	r24, 0x43	; 67
    1860:	91 05       	cpc	r25, r1
    1862:	b9 f5       	brne	.+110    	; 0x18d2 <_Z19handleSerialBusMsgsv+0x168>
    1864:	8a 85       	ldd	r24, Y+10	; 0x0a
    1866:	9b 85       	ldd	r25, Y+11	; 0x0b
    1868:	fc 01       	movw	r30, r24
    186a:	87 89       	ldd	r24, Z+23	; 0x17
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1870:	9b 85       	ldd	r25, Y+11	; 0x0b
    1872:	fc 01       	movw	r30, r24
    1874:	10 8e       	std	Z+24, r1	; 0x18
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	82 34       	cpi	r24, 0x42	; 66
    187a:	11 f4       	brne	.+4      	; 0x1880 <_Z19handleSerialBusMsgsv+0x116>
    187c:	80 e3       	ldi	r24, 0x30	; 48
    187e:	8b 83       	std	Y+3, r24	; 0x03
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	c0 97       	sbiw	r24, 0x30	; 48
    1888:	0a 97       	sbiw	r24, 0x0a	; 10
    188a:	08 f0       	brcs	.+2      	; 0x188e <_Z19handleSerialBusMsgsv+0x124>
    188c:	88 c0       	rjmp	.+272    	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    188e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1890:	9b 85       	ldd	r25, Y+11	; 0x0b
    1892:	47 96       	adiw	r24, 0x17	; 23
    1894:	0e 94 51 40 	call	0x80a2	; 0x80a2 <atoi>
    1898:	8e 87       	std	Y+14, r24	; 0x0e
    189a:	9f 87       	std	Y+15, r25	; 0x0f
    189c:	18 8a       	std	Y+16, r1	; 0x10
    189e:	85 e0       	ldi	r24, 0x05	; 5
    18a0:	89 8b       	std	Y+17, r24	; 0x11
    18a2:	89 89       	ldd	r24, Y+17	; 0x11
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    18ac:	28 17       	cp	r18, r24
    18ae:	39 07       	cpc	r19, r25
    18b0:	24 f4       	brge	.+8      	; 0x18ba <_Z19handleSerialBusMsgsv+0x150>
    18b2:	89 89       	ldd	r24, Y+17	; 0x11
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <_Z19handleSerialBusMsgsv+0x162>
    18ba:	88 89       	ldd	r24, Y+16	; 0x10
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    18c2:	3f 85       	ldd	r19, Y+15	; 0x0f
    18c4:	82 17       	cp	r24, r18
    18c6:	93 07       	cpc	r25, r19
    18c8:	0c f4       	brge	.+2      	; 0x18cc <_Z19handleSerialBusMsgsv+0x162>
    18ca:	c9 01       	movw	r24, r18
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	66 c0       	rjmp	.+204    	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	83 35       	cpi	r24, 0x53	; 83
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f0       	breq	.+2      	; 0x18de <_Z19handleSerialBusMsgsv+0x174>
    18dc:	59 c0       	rjmp	.+178    	; 0x1990 <_Z19handleSerialBusMsgsv+0x226>
    18de:	1c 82       	std	Y+4, r1	; 0x04
    18e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e4:	fc 01       	movw	r30, r24
    18e6:	87 89       	ldd	r24, Z+23	; 0x17
    18e8:	8a 8b       	std	Y+18, r24	; 0x12
    18ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 8d       	ldd	r24, Z+24	; 0x18
    18f2:	8b 8b       	std	Y+19, r24	; 0x13
    18f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18f8:	fc 01       	movw	r30, r24
    18fa:	11 8e       	std	Z+25, r1	; 0x19
    18fc:	8a 89       	ldd	r24, Y+18	; 0x12
    18fe:	82 34       	cpi	r24, 0x42	; 66
    1900:	11 f4       	brne	.+4      	; 0x1906 <_Z19handleSerialBusMsgsv+0x19c>
    1902:	1c 82       	std	Y+4, r1	; 0x04
    1904:	36 c0       	rjmp	.+108    	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1906:	8a 89       	ldd	r24, Y+18	; 0x12
    1908:	86 34       	cpi	r24, 0x46	; 70
    190a:	51 f4       	brne	.+20     	; 0x1920 <_Z19handleSerialBusMsgsv+0x1b6>
    190c:	8b 89       	ldd	r24, Y+19	; 0x13
    190e:	81 33       	cpi	r24, 0x31	; 49
    1910:	80 f1       	brcs	.+96     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1912:	8b 89       	ldd	r24, Y+19	; 0x13
    1914:	86 33       	cpi	r24, 0x36	; 54
    1916:	68 f5       	brcc	.+90     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1918:	8b 89       	ldd	r24, Y+19	; 0x13
    191a:	84 52       	subi	r24, 0x24	; 36
    191c:	8c 83       	std	Y+4, r24	; 0x04
    191e:	29 c0       	rjmp	.+82     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1920:	8a 89       	ldd	r24, Y+18	; 0x12
    1922:	83 35       	cpi	r24, 0x53	; 83
    1924:	69 f4       	brne	.+26     	; 0x1940 <_Z19handleSerialBusMsgsv+0x1d6>
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	81 33       	cpi	r24, 0x31	; 49
    192a:	38 f0       	brcs	.+14     	; 0x193a <_Z19handleSerialBusMsgsv+0x1d0>
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	86 33       	cpi	r24, 0x36	; 54
    1930:	20 f4       	brcc	.+8      	; 0x193a <_Z19handleSerialBusMsgsv+0x1d0>
    1932:	8b 89       	ldd	r24, Y+19	; 0x13
    1934:	89 52       	subi	r24, 0x29	; 41
    1936:	8c 83       	std	Y+4, r24	; 0x04
    1938:	1c c0       	rjmp	.+56     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    193a:	87 e0       	ldi	r24, 0x07	; 7
    193c:	8c 83       	std	Y+4, r24	; 0x04
    193e:	19 c0       	rjmp	.+50     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1940:	8b 89       	ldd	r24, Y+19	; 0x13
    1942:	86 34       	cpi	r24, 0x46	; 70
    1944:	51 f4       	brne	.+20     	; 0x195a <_Z19handleSerialBusMsgsv+0x1f0>
    1946:	8a 89       	ldd	r24, Y+18	; 0x12
    1948:	81 33       	cpi	r24, 0x31	; 49
    194a:	98 f0       	brcs	.+38     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    194c:	8a 89       	ldd	r24, Y+18	; 0x12
    194e:	86 33       	cpi	r24, 0x36	; 54
    1950:	80 f4       	brcc	.+32     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1952:	8a 89       	ldd	r24, Y+18	; 0x12
    1954:	84 52       	subi	r24, 0x24	; 36
    1956:	8c 83       	std	Y+4, r24	; 0x04
    1958:	0c c0       	rjmp	.+24     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    195a:	8b 89       	ldd	r24, Y+19	; 0x13
    195c:	83 35       	cpi	r24, 0x53	; 83
    195e:	49 f4       	brne	.+18     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1960:	8a 89       	ldd	r24, Y+18	; 0x12
    1962:	81 33       	cpi	r24, 0x31	; 49
    1964:	30 f0       	brcs	.+12     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1966:	8a 89       	ldd	r24, Y+18	; 0x12
    1968:	86 33       	cpi	r24, 0x36	; 54
    196a:	18 f4       	brcc	.+6      	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    196c:	8a 89       	ldd	r24, Y+18	; 0x12
    196e:	89 52       	subi	r24, 0x29	; 41
    1970:	8c 83       	std	Y+4, r24	; 0x04
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	87 30       	cpi	r24, 0x07	; 7
    1976:	48 f0       	brcs	.+18     	; 0x198a <_Z19handleSerialBusMsgsv+0x220>
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	82 31       	cpi	r24, 0x12	; 18
    197c:	30 f4       	brcc	.+12     	; 0x198a <_Z19handleSerialBusMsgsv+0x220>
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	0a c0       	rjmp	.+20     	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    198a:	19 82       	std	Y+1, r1	; 0x01
    198c:	1a 82       	std	Y+2, r1	; 0x02
    198e:	07 c0       	rjmp	.+14     	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    1990:	8a 85       	ldd	r24, Y+10	; 0x0a
    1992:	9b 85       	ldd	r25, Y+11	; 0x0b
    1994:	03 96       	adiw	r24, 0x03	; 3
    1996:	0e 94 51 40 	call	0x80a2	; 0x80a2 <atoi>
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	99 23       	and	r25, r25
    19a4:	c4 f0       	brlt	.+48     	; 0x19d6 <_Z19handleSerialBusMsgsv+0x26c>
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	42 97       	sbiw	r24, 0x12	; 18
    19ac:	a4 f4       	brge	.+40     	; 0x19d6 <_Z19handleSerialBusMsgsv+0x26c>
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	8e ab       	std	Y+54, r24	; 0x36
    19b2:	ce 01       	movw	r24, r28
    19b4:	c6 96       	adiw	r24, 0x36	; 54
    19b6:	ac 01       	movw	r20, r24
    19b8:	69 e2       	ldi	r22, 0x29	; 41
    19ba:	83 e4       	ldi	r24, 0x43	; 67
    19bc:	95 e4       	ldi	r25, 0x45	; 69
    19be:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    19c2:	9e a9       	ldd	r25, Y+54	; 0x36
    19c4:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    19c8:	98 17       	cp	r25, r24
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <_Z19handleSerialBusMsgsv+0x26c>
    19cc:	ce 01       	movw	r24, r28
    19ce:	c6 96       	adiw	r24, 0x36	; 54
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	0e 94 96 1b 	call	0x372c	; 0x372c <_Z11setupForFoxP5Fox_t13EventAction_t>
    19d6:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	29 2f       	mov	r18, r25
    19e0:	2f 93       	push	r18
    19e2:	8f 93       	push	r24
    19e4:	80 e3       	ldi	r24, 0x30	; 48
    19e6:	92 e4       	ldi	r25, 0x42	; 66
    19e8:	89 2f       	mov	r24, r25
    19ea:	8f 93       	push	r24
    19ec:	80 e3       	ldi	r24, 0x30	; 48
    19ee:	92 e4       	ldi	r25, 0x42	; 66
    19f0:	8f 93       	push	r24
    19f2:	85 ed       	ldi	r24, 0xD5	; 213
    19f4:	94 e4       	ldi	r25, 0x44	; 68
    19f6:	89 2f       	mov	r24, r25
    19f8:	8f 93       	push	r24
    19fa:	85 ed       	ldi	r24, 0xD5	; 213
    19fc:	94 e4       	ldi	r25, 0x44	; 68
    19fe:	8f 93       	push	r24
    1a00:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	85 ed       	ldi	r24, 0xD5	; 213
    1a12:	94 e4       	ldi	r25, 0x44	; 68
    1a14:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1a18:	11 c5       	rjmp	.+2594   	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    1a1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a1e:	fc 01       	movw	r30, r24
    1a20:	83 81       	ldd	r24, Z+3	; 0x03
    1a22:	88 23       	and	r24, r24
    1a24:	e9 f1       	breq	.+122    	; 0x1aa0 <_Z19handleSerialBusMsgsv+0x336>
    1a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2a:	03 96       	adiw	r24, 0x03	; 3
    1a2c:	0e 94 51 40 	call	0x80a2	; 0x80a2 <atoi>
    1a30:	80 93 60 45 	sts	0x4560, r24	; 0x804560 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    1a34:	90 93 61 45 	sts	0x4561, r25	; 0x804561 <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    1a38:	80 91 60 45 	lds	r24, 0x4560	; 0x804560 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    1a3c:	90 91 61 45 	lds	r25, 0x4561	; 0x804561 <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    1a40:	89 38       	cpi	r24, 0x89	; 137
    1a42:	93 41       	sbci	r25, 0x13	; 19
    1a44:	68 f4       	brcc	.+26     	; 0x1a60 <_Z19handleSerialBusMsgsv+0x2f6>
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	80 e6       	ldi	r24, 0x60	; 96
    1a4c:	95 e4       	ldi	r25, 0x45	; 69
    1a4e:	0e 94 33 3a 	call	0x7466	; 0x7466 <_Z15txSetParametersPjPh>
    1a52:	8c 8b       	std	Y+20, r24	; 0x14
    1a54:	8c 89       	ldd	r24, Y+20	; 0x14
    1a56:	88 23       	and	r24, r24
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <_Z19handleSerialBusMsgsv+0x2f6>
    1a5a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a5c:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    1a60:	0e 94 2e 3a 	call	0x745c	; 0x745c <_Z12txGetPowerMwv>
    1a64:	29 2f       	mov	r18, r25
    1a66:	2f 93       	push	r18
    1a68:	8f 93       	push	r24
    1a6a:	88 e3       	ldi	r24, 0x38	; 56
    1a6c:	92 e4       	ldi	r25, 0x42	; 66
    1a6e:	89 2f       	mov	r24, r25
    1a70:	8f 93       	push	r24
    1a72:	88 e3       	ldi	r24, 0x38	; 56
    1a74:	92 e4       	ldi	r25, 0x42	; 66
    1a76:	8f 93       	push	r24
    1a78:	85 ed       	ldi	r24, 0xD5	; 213
    1a7a:	94 e4       	ldi	r25, 0x44	; 68
    1a7c:	89 2f       	mov	r24, r25
    1a7e:	8f 93       	push	r24
    1a80:	85 ed       	ldi	r24, 0xD5	; 213
    1a82:	94 e4       	ldi	r25, 0x44	; 68
    1a84:	8f 93       	push	r24
    1a86:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	85 ed       	ldi	r24, 0xD5	; 213
    1a98:	94 e4       	ldi	r25, 0x44	; 68
    1a9a:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1a9e:	ce c4       	rjmp	.+2460   	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    1aa0:	0e 94 2e 3a 	call	0x745c	; 0x745c <_Z12txGetPowerMwv>
    1aa4:	29 2f       	mov	r18, r25
    1aa6:	2f 93       	push	r18
    1aa8:	8f 93       	push	r24
    1aaa:	88 e3       	ldi	r24, 0x38	; 56
    1aac:	92 e4       	ldi	r25, 0x42	; 66
    1aae:	89 2f       	mov	r24, r25
    1ab0:	8f 93       	push	r24
    1ab2:	88 e3       	ldi	r24, 0x38	; 56
    1ab4:	92 e4       	ldi	r25, 0x42	; 66
    1ab6:	8f 93       	push	r24
    1ab8:	85 ed       	ldi	r24, 0xD5	; 213
    1aba:	94 e4       	ldi	r25, 0x44	; 68
    1abc:	89 2f       	mov	r24, r25
    1abe:	8f 93       	push	r24
    1ac0:	85 ed       	ldi	r24, 0xD5	; 213
    1ac2:	94 e4       	ldi	r25, 0x44	; 68
    1ac4:	8f 93       	push	r24
    1ac6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	85 ed       	ldi	r24, 0xD5	; 213
    1ad8:	94 e4       	ldi	r25, 0x44	; 68
    1ada:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1ade:	ae c4       	rjmp	.+2396   	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    1ae0:	1d 82       	std	Y+5, r1	; 0x05
    1ae2:	1e 82       	std	Y+6, r1	; 0x06
    1ae4:	1f 82       	std	Y+7, r1	; 0x07
    1ae6:	18 86       	std	Y+8, r1	; 0x08
    1ae8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aec:	fc 01       	movw	r30, r24
    1aee:	83 81       	ldd	r24, Z+3	; 0x03
    1af0:	88 23       	and	r24, r24
    1af2:	41 f1       	breq	.+80     	; 0x1b44 <_Z19handleSerialBusMsgsv+0x3da>
    1af4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af8:	03 96       	adiw	r24, 0x03	; 3
    1afa:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8d 8b       	std	Y+21, r24	; 0x15
    1b04:	9e 8b       	std	Y+22, r25	; 0x16
    1b06:	af 8b       	std	Y+23, r26	; 0x17
    1b08:	b8 8f       	std	Y+24, r27	; 0x18
    1b0a:	8d 89       	ldd	r24, Y+21	; 0x15
    1b0c:	9e 89       	ldd	r25, Y+22	; 0x16
    1b0e:	af 89       	ldd	r26, Y+23	; 0x17
    1b10:	b8 8d       	ldd	r27, Y+24	; 0x18
    1b12:	8f ab       	std	Y+55, r24	; 0x37
    1b14:	98 af       	std	Y+56, r25	; 0x38
    1b16:	a9 af       	std	Y+57, r26	; 0x39
    1b18:	ba af       	std	Y+58, r27	; 0x3a
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	c7 96       	adiw	r24, 0x37	; 55
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <_Z14txSetFrequencyPmh>
    1b24:	98 2f       	mov	r25, r24
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	99 23       	and	r25, r25
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <_Z19handleSerialBusMsgsv+0x3c4>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	88 23       	and	r24, r24
    1b30:	89 f0       	breq	.+34     	; 0x1b54 <_Z19handleSerialBusMsgsv+0x3ea>
    1b32:	8f a9       	ldd	r24, Y+55	; 0x37
    1b34:	98 ad       	ldd	r25, Y+56	; 0x38
    1b36:	a9 ad       	ldd	r26, Y+57	; 0x39
    1b38:	ba ad       	ldd	r27, Y+58	; 0x3a
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	af 83       	std	Y+7, r26	; 0x07
    1b40:	b8 87       	std	Y+8, r27	; 0x08
    1b42:	08 c0       	rjmp	.+16     	; 0x1b54 <_Z19handleSerialBusMsgsv+0x3ea>
    1b44:	0e 94 06 3a 	call	0x740c	; 0x740c <_Z14txGetFrequencyv>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	af 83       	std	Y+7, r26	; 0x07
    1b52:	b8 87       	std	Y+8, r27	; 0x08
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	af 81       	ldd	r26, Y+7	; 0x07
    1b5a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b5c:	89 2b       	or	r24, r25
    1b5e:	8a 2b       	or	r24, r26
    1b60:	8b 2b       	or	r24, r27
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <_Z19handleSerialBusMsgsv+0x3fc>
    1b64:	64 c4       	rjmp	.+2248   	; 0x242e <_Z19handleSerialBusMsgsv+0xcc4>
    1b66:	88 85       	ldd	r24, Y+8	; 0x08
    1b68:	8f 93       	push	r24
    1b6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6c:	8f 93       	push	r24
    1b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b70:	8f 93       	push	r24
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	8f 93       	push	r24
    1b76:	83 e4       	ldi	r24, 0x43	; 67
    1b78:	92 e4       	ldi	r25, 0x42	; 66
    1b7a:	89 2f       	mov	r24, r25
    1b7c:	8f 93       	push	r24
    1b7e:	83 e4       	ldi	r24, 0x43	; 67
    1b80:	92 e4       	ldi	r25, 0x42	; 66
    1b82:	8f 93       	push	r24
    1b84:	85 ed       	ldi	r24, 0xD5	; 213
    1b86:	94 e4       	ldi	r25, 0x44	; 68
    1b88:	89 2f       	mov	r24, r25
    1b8a:	8f 93       	push	r24
    1b8c:	85 ed       	ldi	r24, 0xD5	; 213
    1b8e:	94 e4       	ldi	r25, 0x44	; 68
    1b90:	8f 93       	push	r24
    1b92:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    1b96:	8d b7       	in	r24, 0x3d	; 61
    1b98:	9e b7       	in	r25, 0x3e	; 62
    1b9a:	08 96       	adiw	r24, 0x08	; 8
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	85 ed       	ldi	r24, 0xD5	; 213
    1ba2:	94 e4       	ldi	r25, 0x44	; 68
    1ba4:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1ba8:	42 c4       	rjmp	.+2180   	; 0x242e <_Z19handleSerialBusMsgsv+0xcc4>
    1baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bac:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bae:	fc 01       	movw	r30, r24
    1bb0:	83 81       	ldd	r24, Z+3	; 0x03
    1bb2:	88 23       	and	r24, r24
    1bb4:	49 f1       	breq	.+82     	; 0x1c08 <_Z19handleSerialBusMsgsv+0x49e>
    1bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bba:	fc 01       	movw	r30, r24
    1bbc:	83 81       	ldd	r24, Z+3	; 0x03
    1bbe:	80 33       	cpi	r24, 0x30	; 48
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <_Z19handleSerialBusMsgsv+0x45a>
    1bc2:	37 c4       	rjmp	.+2158   	; 0x2432 <_Z19handleSerialBusMsgsv+0xcc8>
    1bc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc8:	fc 01       	movw	r30, r24
    1bca:	83 81       	ldd	r24, Z+3	; 0x03
    1bcc:	81 33       	cpi	r24, 0x31	; 49
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <_Z19handleSerialBusMsgsv+0x468>
    1bd0:	30 c4       	rjmp	.+2144   	; 0x2432 <_Z19handleSerialBusMsgsv+0xcc8>
    1bd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	83 81       	ldd	r24, Z+3	; 0x03
    1bda:	82 33       	cpi	r24, 0x32	; 50
    1bdc:	21 f4       	brne	.+8      	; 0x1be6 <_Z19handleSerialBusMsgsv+0x47c>
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    1be4:	26 c4       	rjmp	.+2124   	; 0x2432 <_Z19handleSerialBusMsgsv+0xcc8>
    1be6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1be8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bea:	fc 01       	movw	r30, r24
    1bec:	83 81       	ldd	r24, Z+3	; 0x03
    1bee:	83 33       	cpi	r24, 0x33	; 51
    1bf0:	31 f4       	brne	.+12     	; 0x1bfe <_Z19handleSerialBusMsgsv+0x494>
    1bf2:	62 e0       	ldi	r22, 0x02	; 2
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 96 1b 	call	0x372c	; 0x372c <_Z11setupForFoxP5Fox_t13EventAction_t>
    1bfc:	1a c4       	rjmp	.+2100   	; 0x2432 <_Z19handleSerialBusMsgsv+0xcc8>
    1bfe:	8f e4       	ldi	r24, 0x4F	; 79
    1c00:	92 e4       	ldi	r25, 0x42	; 66
    1c02:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1c06:	15 c4       	rjmp	.+2090   	; 0x2432 <_Z19handleSerialBusMsgsv+0xcc8>
    1c08:	8f e4       	ldi	r24, 0x4F	; 79
    1c0a:	92 e4       	ldi	r25, 0x42	; 66
    1c0c:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1c10:	10 c4       	rjmp	.+2080   	; 0x2432 <_Z19handleSerialBusMsgsv+0xcc8>
    1c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c16:	fc 01       	movw	r30, r24
    1c18:	83 81       	ldd	r24, Z+3	; 0x03
    1c1a:	88 23       	and	r24, r24
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <_Z19handleSerialBusMsgsv+0x4b6>
    1c1e:	41 c0       	rjmp	.+130    	; 0x1ca2 <_Z19handleSerialBusMsgsv+0x538>
    1c20:	80 e2       	ldi	r24, 0x20	; 32
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	80 93 d5 44 	sts	0x44D5, r24	; 0x8044d5 <_ZL9g_tempStr>
    1c28:	90 93 d6 44 	sts	0x44D6, r25	; 0x8044d6 <_ZL9g_tempStr+0x1>
    1c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c30:	03 96       	adiw	r24, 0x03	; 3
    1c32:	bc 01       	movw	r22, r24
    1c34:	85 ed       	ldi	r24, 0xD5	; 213
    1c36:	94 e4       	ldi	r25, 0x44	; 68
    1c38:	0e 94 9e 40 	call	0x813c	; 0x813c <strcat>
    1c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c40:	fc 01       	movw	r30, r24
    1c42:	87 89       	ldd	r24, Z+23	; 0x17
    1c44:	88 23       	and	r24, r24
    1c46:	d1 f0       	breq	.+52     	; 0x1c7c <_Z19handleSerialBusMsgsv+0x512>
    1c48:	85 ed       	ldi	r24, 0xD5	; 213
    1c4a:	94 e4       	ldi	r25, 0x44	; 68
    1c4c:	9c 01       	movw	r18, r24
    1c4e:	f9 01       	movw	r30, r18
    1c50:	01 90       	ld	r0, Z+
    1c52:	00 20       	and	r0, r0
    1c54:	e9 f7       	brne	.-6      	; 0x1c50 <_Z19handleSerialBusMsgsv+0x4e6>
    1c56:	cf 01       	movw	r24, r30
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	82 1b       	sub	r24, r18
    1c5c:	93 0b       	sbc	r25, r19
    1c5e:	8b 52       	subi	r24, 0x2B	; 43
    1c60:	9b 4b       	sbci	r25, 0xBB	; 187
    1c62:	20 e2       	ldi	r18, 0x20	; 32
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	fc 01       	movw	r30, r24
    1c68:	20 83       	st	Z, r18
    1c6a:	31 83       	std	Z+1, r19	; 0x01
    1c6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c70:	47 96       	adiw	r24, 0x17	; 23
    1c72:	bc 01       	movw	r22, r24
    1c74:	85 ed       	ldi	r24, 0xD5	; 213
    1c76:	94 e4       	ldi	r25, 0x44	; 68
    1c78:	0e 94 9e 40 	call	0x813c	; 0x813c <strcat>
    1c7c:	85 ed       	ldi	r24, 0xD5	; 213
    1c7e:	94 e4       	ldi	r25, 0x44	; 68
    1c80:	0e 94 b0 40 	call	0x8160	; 0x8160 <strlen>
    1c84:	45 97       	sbiw	r24, 0x15	; 21
    1c86:	68 f4       	brcc	.+26     	; 0x1ca2 <_Z19handleSerialBusMsgsv+0x538>
    1c88:	65 ed       	ldi	r22, 0xD5	; 213
    1c8a:	74 e4       	ldi	r23, 0x44	; 68
    1c8c:	8e e0       	ldi	r24, 0x0E	; 14
    1c8e:	95 e4       	ldi	r25, 0x45	; 69
    1c90:	0e 94 a9 40 	call	0x8152	; 0x8152 <strcpy>
    1c94:	45 ed       	ldi	r20, 0xD5	; 213
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	6a e0       	ldi	r22, 0x0A	; 10
    1c9a:	83 e4       	ldi	r24, 0x43	; 67
    1c9c:	95 e4       	ldi	r25, 0x45	; 69
    1c9e:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    1ca2:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    1ca6:	88 23       	and	r24, r24
    1ca8:	01 f1       	breq	.+64     	; 0x1cea <_Z19handleSerialBusMsgsv+0x580>
    1caa:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	8e e0       	ldi	r24, 0x0E	; 14
    1cb6:	95 e4       	ldi	r25, 0x45	; 69
    1cb8:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <_Z26timeRequiredToSendStrAtWPMPcj>
    1cbc:	88 5a       	subi	r24, 0xA8	; 168
    1cbe:	9d 4f       	sbci	r25, 0xFD	; 253
    1cc0:	96 95       	lsr	r25
    1cc2:	87 95       	ror	r24
    1cc4:	96 95       	lsr	r25
    1cc6:	87 95       	ror	r24
    1cc8:	96 95       	lsr	r25
    1cca:	87 95       	ror	r24
    1ccc:	9c 01       	movw	r18, r24
    1cce:	a5 ec       	ldi	r26, 0xC5	; 197
    1cd0:	b0 e2       	ldi	r27, 0x20	; 32
    1cd2:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__umulhisi3>
    1cd6:	92 95       	swap	r25
    1cd8:	82 95       	swap	r24
    1cda:	8f 70       	andi	r24, 0x0F	; 15
    1cdc:	89 27       	eor	r24, r25
    1cde:	9f 70       	andi	r25, 0x0F	; 15
    1ce0:	89 27       	eor	r24, r25
    1ce2:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <g_time_needed_for_ID>
    1ce6:	90 93 24 45 	sts	0x4524, r25	; 0x804524 <g_time_needed_for_ID+0x1>
    1cea:	8e e0       	ldi	r24, 0x0E	; 14
    1cec:	95 e4       	ldi	r25, 0x45	; 69
    1cee:	89 2f       	mov	r24, r25
    1cf0:	8f 93       	push	r24
    1cf2:	8e e0       	ldi	r24, 0x0E	; 14
    1cf4:	95 e4       	ldi	r25, 0x45	; 69
    1cf6:	8f 93       	push	r24
    1cf8:	84 e5       	ldi	r24, 0x54	; 84
    1cfa:	92 e4       	ldi	r25, 0x42	; 66
    1cfc:	89 2f       	mov	r24, r25
    1cfe:	8f 93       	push	r24
    1d00:	84 e5       	ldi	r24, 0x54	; 84
    1d02:	92 e4       	ldi	r25, 0x42	; 66
    1d04:	8f 93       	push	r24
    1d06:	85 ed       	ldi	r24, 0xD5	; 213
    1d08:	94 e4       	ldi	r25, 0x44	; 68
    1d0a:	89 2f       	mov	r24, r25
    1d0c:	8f 93       	push	r24
    1d0e:	85 ed       	ldi	r24, 0xD5	; 213
    1d10:	94 e4       	ldi	r25, 0x44	; 68
    1d12:	8f 93       	push	r24
    1d14:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	85 ed       	ldi	r24, 0xD5	; 213
    1d26:	94 e4       	ldi	r25, 0x44	; 68
    1d28:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1d2c:	87 c3       	rjmp	.+1806   	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    1d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d32:	fc 01       	movw	r30, r24
    1d34:	83 81       	ldd	r24, Z+3	; 0x03
    1d36:	83 35       	cpi	r24, 0x53	; 83
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <_Z19handleSerialBusMsgsv+0x5d2>
    1d3a:	6f c0       	rjmp	.+222    	; 0x1e1a <_Z19handleSerialBusMsgsv+0x6b0>
    1d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d40:	fc 01       	movw	r30, r24
    1d42:	87 89       	ldd	r24, Z+23	; 0x17
    1d44:	89 8f       	std	Y+25, r24	; 0x19
    1d46:	89 8d       	ldd	r24, Y+25	; 0x19
    1d48:	88 23       	and	r24, r24
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <_Z19handleSerialBusMsgsv+0x5e4>
    1d4c:	48 c0       	rjmp	.+144    	; 0x1dde <_Z19handleSerialBusMsgsv+0x674>
    1d4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d52:	47 96       	adiw	r24, 0x17	; 23
    1d54:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8a 8f       	std	Y+26, r24	; 0x1a
    1d5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d60:	8b 8f       	std	Y+27, r24	; 0x1b
    1d62:	85 e0       	ldi	r24, 0x05	; 5
    1d64:	8c 8f       	std	Y+28, r24	; 0x1c
    1d66:	84 e1       	ldi	r24, 0x14	; 20
    1d68:	8d 8f       	std	Y+29, r24	; 0x1d
    1d6a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6e:	89 17       	cp	r24, r25
    1d70:	40 f0       	brcs	.+16     	; 0x1d82 <_Z19handleSerialBusMsgsv+0x618>
    1d72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d76:	98 17       	cp	r25, r24
    1d78:	10 f4       	brcc	.+4      	; 0x1d7e <_Z19handleSerialBusMsgsv+0x614>
    1d7a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <_Z19handleSerialBusMsgsv+0x61a>
    1d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <_Z19handleSerialBusMsgsv+0x61a>
    1d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d84:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    1d88:	4b e0       	ldi	r20, 0x0B	; 11
    1d8a:	50 e4       	ldi	r21, 0x40	; 64
    1d8c:	68 e2       	ldi	r22, 0x28	; 40
    1d8e:	83 e4       	ldi	r24, 0x43	; 67
    1d90:	95 e4       	ldi	r25, 0x45	; 69
    1d92:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    1d96:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    1d9a:	88 23       	and	r24, r24
    1d9c:	01 f1       	breq	.+64     	; 0x1dde <_Z19handleSerialBusMsgsv+0x674>
    1d9e:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	bc 01       	movw	r22, r24
    1da8:	8e e0       	ldi	r24, 0x0E	; 14
    1daa:	95 e4       	ldi	r25, 0x45	; 69
    1dac:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <_Z26timeRequiredToSendStrAtWPMPcj>
    1db0:	88 5a       	subi	r24, 0xA8	; 168
    1db2:	9d 4f       	sbci	r25, 0xFD	; 253
    1db4:	96 95       	lsr	r25
    1db6:	87 95       	ror	r24
    1db8:	96 95       	lsr	r25
    1dba:	87 95       	ror	r24
    1dbc:	96 95       	lsr	r25
    1dbe:	87 95       	ror	r24
    1dc0:	9c 01       	movw	r18, r24
    1dc2:	a5 ec       	ldi	r26, 0xC5	; 197
    1dc4:	b0 e2       	ldi	r27, 0x20	; 32
    1dc6:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__umulhisi3>
    1dca:	92 95       	swap	r25
    1dcc:	82 95       	swap	r24
    1dce:	8f 70       	andi	r24, 0x0F	; 15
    1dd0:	89 27       	eor	r24, r25
    1dd2:	9f 70       	andi	r25, 0x0F	; 15
    1dd4:	89 27       	eor	r24, r25
    1dd6:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <g_time_needed_for_ID>
    1dda:	90 93 24 45 	sts	0x4524, r25	; 0x804524 <g_time_needed_for_ID+0x1>
    1dde:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	29 2f       	mov	r18, r25
    1de8:	2f 93       	push	r18
    1dea:	8f 93       	push	r24
    1dec:	8b e5       	ldi	r24, 0x5B	; 91
    1dee:	92 e4       	ldi	r25, 0x42	; 66
    1df0:	89 2f       	mov	r24, r25
    1df2:	8f 93       	push	r24
    1df4:	8b e5       	ldi	r24, 0x5B	; 91
    1df6:	92 e4       	ldi	r25, 0x42	; 66
    1df8:	8f 93       	push	r24
    1dfa:	85 ed       	ldi	r24, 0xD5	; 213
    1dfc:	94 e4       	ldi	r25, 0x44	; 68
    1dfe:	89 2f       	mov	r24, r25
    1e00:	8f 93       	push	r24
    1e02:	85 ed       	ldi	r24, 0xD5	; 213
    1e04:	94 e4       	ldi	r25, 0x44	; 68
    1e06:	8f 93       	push	r24
    1e08:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <_Z19handleSerialBusMsgsv+0x6c2>
    1e1a:	85 e0       	ldi	r24, 0x05	; 5
    1e1c:	ef e4       	ldi	r30, 0x4F	; 79
    1e1e:	f2 e4       	ldi	r31, 0x42	; 66
    1e20:	a5 ed       	ldi	r26, 0xD5	; 213
    1e22:	b4 e4       	ldi	r27, 0x44	; 68
    1e24:	01 90       	ld	r0, Z+
    1e26:	0d 92       	st	X+, r0
    1e28:	8a 95       	dec	r24
    1e2a:	e1 f7       	brne	.-8      	; 0x1e24 <_Z19handleSerialBusMsgsv+0x6ba>
    1e2c:	85 ed       	ldi	r24, 0xD5	; 213
    1e2e:	94 e4       	ldi	r25, 0x44	; 68
    1e30:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1e34:	03 c3       	rjmp	.+1542   	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    1e36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	83 81       	ldd	r24, Z+3	; 0x03
    1e3e:	88 23       	and	r24, r24
    1e40:	51 f1       	breq	.+84     	; 0x1e96 <_Z19handleSerialBusMsgsv+0x72c>
    1e42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e46:	03 96       	adiw	r24, 0x03	; 3
    1e48:	48 e0       	ldi	r20, 0x08	; 8
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	85 ed       	ldi	r24, 0xD5	; 213
    1e50:	94 e4       	ldi	r25, 0x44	; 68
    1e52:	0e 94 b9 40 	call	0x8172	; 0x8172 <strncpy>
    1e56:	10 92 dd 44 	sts	0x44DD, r1	; 0x8044dd <_ZL9g_tempStr+0x8>
    1e5a:	85 ed       	ldi	r24, 0xD5	; 213
    1e5c:	94 e4       	ldi	r25, 0x44	; 68
    1e5e:	0e 94 38 3c 	call	0x7870	; 0x7870 <_Z11only_digitsPc>
    1e62:	88 23       	and	r24, r24
    1e64:	41 f0       	breq	.+16     	; 0x1e76 <_Z19handleSerialBusMsgsv+0x70c>
    1e66:	85 ed       	ldi	r24, 0xD5	; 213
    1e68:	94 e4       	ldi	r25, 0x44	; 68
    1e6a:	0e 94 b0 40 	call	0x8160	; 0x8160 <strlen>
    1e6e:	04 97       	sbiw	r24, 0x04	; 4
    1e70:	10 f0       	brcs	.+4      	; 0x1e76 <_Z19handleSerialBusMsgsv+0x70c>
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	01 c0       	rjmp	.+2      	; 0x1e78 <_Z19handleSerialBusMsgsv+0x70e>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	88 23       	and	r24, r24
    1e7a:	69 f0       	breq	.+26     	; 0x1e96 <_Z19handleSerialBusMsgsv+0x72c>
    1e7c:	65 ed       	ldi	r22, 0xD5	; 213
    1e7e:	74 e4       	ldi	r23, 0x44	; 68
    1e80:	8d e4       	ldi	r24, 0x4D	; 77
    1e82:	95 e4       	ldi	r25, 0x45	; 69
    1e84:	0e 94 a9 40 	call	0x8152	; 0x8152 <strcpy>
    1e88:	4d e4       	ldi	r20, 0x4D	; 77
    1e8a:	55 e4       	ldi	r21, 0x45	; 69
    1e8c:	6f e1       	ldi	r22, 0x1F	; 31
    1e8e:	83 e4       	ldi	r24, 0x43	; 67
    1e90:	95 e4       	ldi	r25, 0x45	; 69
    1e92:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    1e96:	8d e4       	ldi	r24, 0x4D	; 77
    1e98:	95 e4       	ldi	r25, 0x45	; 69
    1e9a:	89 2f       	mov	r24, r25
    1e9c:	8f 93       	push	r24
    1e9e:	8d e4       	ldi	r24, 0x4D	; 77
    1ea0:	95 e4       	ldi	r25, 0x45	; 69
    1ea2:	8f 93       	push	r24
    1ea4:	8d e6       	ldi	r24, 0x6D	; 109
    1ea6:	92 e4       	ldi	r25, 0x42	; 66
    1ea8:	89 2f       	mov	r24, r25
    1eaa:	8f 93       	push	r24
    1eac:	8d e6       	ldi	r24, 0x6D	; 109
    1eae:	92 e4       	ldi	r25, 0x42	; 66
    1eb0:	8f 93       	push	r24
    1eb2:	85 ed       	ldi	r24, 0xD5	; 213
    1eb4:	94 e4       	ldi	r25, 0x44	; 68
    1eb6:	89 2f       	mov	r24, r25
    1eb8:	8f 93       	push	r24
    1eba:	85 ed       	ldi	r24, 0xD5	; 213
    1ebc:	94 e4       	ldi	r25, 0x44	; 68
    1ebe:	8f 93       	push	r24
    1ec0:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	85 ed       	ldi	r24, 0xD5	; 213
    1ed2:	94 e4       	ldi	r25, 0x44	; 68
    1ed4:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    1ed8:	b1 c2       	rjmp	.+1378   	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    1eda:	19 86       	std	Y+9, r1	; 0x09
    1edc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ede:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	83 81       	ldd	r24, Z+3	; 0x03
    1ee4:	84 35       	cpi	r24, 0x54	; 84
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <_Z19handleSerialBusMsgsv+0x780>
    1ee8:	fd c0       	rjmp	.+506    	; 0x20e4 <_Z19handleSerialBusMsgsv+0x97a>
    1eea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eee:	fc 01       	movw	r30, r24
    1ef0:	87 89       	ldd	r24, Z+23	; 0x17
    1ef2:	88 23       	and	r24, r24
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <_Z19handleSerialBusMsgsv+0x78e>
    1ef6:	b9 c0       	rjmp	.+370    	; 0x206a <_Z19handleSerialBusMsgsv+0x900>
    1ef8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1efc:	47 96       	adiw	r24, 0x17	; 23
    1efe:	4c e0       	ldi	r20, 0x0C	; 12
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	bc 01       	movw	r22, r24
    1f04:	85 ed       	ldi	r24, 0xD5	; 213
    1f06:	94 e4       	ldi	r25, 0x44	; 68
    1f08:	0e 94 b9 40 	call	0x8172	; 0x8172 <strncpy>
    1f0c:	10 92 e1 44 	sts	0x44E1, r1	; 0x8044e1 <_ZL9g_tempStr+0xc>
    1f10:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <g_utc_offset>
    1f14:	81 95       	neg	r24
    1f16:	48 2f       	mov	r20, r24
    1f18:	65 e5       	ldi	r22, 0x55	; 85
    1f1a:	75 e4       	ldi	r23, 0x45	; 69
    1f1c:	85 ed       	ldi	r24, 0xD5	; 213
    1f1e:	94 e4       	ldi	r25, 0x44	; 68
    1f20:	0e 94 9d 1c 	call	0x393a	; 0x393a <_Z18validateTimeStringPcPma>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8e 8f       	std	Y+30, r24	; 0x1e
    1f2a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f2c:	a8 a3       	std	Y+32, r26	; 0x20
    1f2e:	b9 a3       	std	Y+33, r27	; 0x21
    1f30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f34:	a8 a1       	ldd	r26, Y+32	; 0x20
    1f36:	b9 a1       	ldd	r27, Y+33	; 0x21
    1f38:	89 2b       	or	r24, r25
    1f3a:	8a 2b       	or	r24, r26
    1f3c:	8b 2b       	or	r24, r27
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <_Z19handleSerialBusMsgsv+0x7d8>
    1f40:	41 c0       	rjmp	.+130    	; 0x1fc4 <_Z19handleSerialBusMsgsv+0x85a>
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	85 ed       	ldi	r24, 0xD5	; 213
    1f46:	94 e4       	ldi	r25, 0x44	; 68
    1f48:	0e 94 24 25 	call	0x4a48	; 0x4a48 <ds3231_set_date_time_arducon>
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	99 23       	and	r25, r25
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <_Z19handleSerialBusMsgsv+0x7ec>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	8a a3       	std	Y+34, r24	; 0x22
    1f58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f5c:	a8 a1       	ldd	r26, Y+32	; 0x20
    1f5e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1f60:	80 93 55 45 	sts	0x4555, r24	; 0x804555 <g_current_epoch>
    1f64:	90 93 56 45 	sts	0x4556, r25	; 0x804556 <g_current_epoch+0x1>
    1f68:	a0 93 57 45 	sts	0x4557, r26	; 0x804557 <g_current_epoch+0x2>
    1f6c:	b0 93 58 45 	sts	0x4558, r27	; 0x804558 <g_current_epoch+0x3>
    1f70:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    1f74:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    1f78:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    1f7c:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    1f80:	2b 2f       	mov	r18, r27
    1f82:	2f 93       	push	r18
    1f84:	2a 2f       	mov	r18, r26
    1f86:	2f 93       	push	r18
    1f88:	29 2f       	mov	r18, r25
    1f8a:	2f 93       	push	r18
    1f8c:	8f 93       	push	r24
    1f8e:	85 e7       	ldi	r24, 0x75	; 117
    1f90:	92 e4       	ldi	r25, 0x42	; 66
    1f92:	89 2f       	mov	r24, r25
    1f94:	8f 93       	push	r24
    1f96:	85 e7       	ldi	r24, 0x75	; 117
    1f98:	92 e4       	ldi	r25, 0x42	; 66
    1f9a:	8f 93       	push	r24
    1f9c:	85 ed       	ldi	r24, 0xD5	; 213
    1f9e:	94 e4       	ldi	r25, 0x44	; 68
    1fa0:	89 2f       	mov	r24, r25
    1fa2:	8f 93       	push	r24
    1fa4:	85 ed       	ldi	r24, 0xD5	; 213
    1fa6:	94 e4       	ldi	r25, 0x44	; 68
    1fa8:	8f 93       	push	r24
    1faa:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    1fae:	8d b7       	in	r24, 0x3d	; 61
    1fb0:	9e b7       	in	r25, 0x3e	; 62
    1fb2:	08 96       	adiw	r24, 0x08	; 8
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	60 e0       	ldi	r22, 0x00	; 0
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 96 1b 	call	0x372c	; 0x372c <_Z11setupForFoxP5Fox_t13EventAction_t>
    1fc2:	8d c0       	rjmp	.+282    	; 0x20de <_Z19handleSerialBusMsgsv+0x974>
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	cb 96       	adiw	r24, 0x3b	; 59
    1fc8:	0e 94 0b 23 	call	0x4616	; 0x4616 <ds3231_get_epoch>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	80 93 55 45 	sts	0x4555, r24	; 0x804555 <g_current_epoch>
    1fd4:	90 93 56 45 	sts	0x4556, r25	; 0x804556 <g_current_epoch+0x1>
    1fd8:	a0 93 57 45 	sts	0x4557, r26	; 0x804557 <g_current_epoch+0x2>
    1fdc:	b0 93 58 45 	sts	0x4558, r27	; 0x804558 <g_current_epoch+0x3>
    1fe0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fe2:	88 23       	and	r24, r24
    1fe4:	c9 f4       	brne	.+50     	; 0x2018 <_Z19handleSerialBusMsgsv+0x8ae>
    1fe6:	20 91 44 45 	lds	r18, 0x4544	; 0x804544 <g_event_start_epoch>
    1fea:	30 91 45 45 	lds	r19, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    1fee:	40 91 46 45 	lds	r20, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    1ff2:	50 91 47 45 	lds	r21, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    1ff6:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    1ffa:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    1ffe:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    2002:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    2006:	e1 2c       	mov	r14, r1
    2008:	f1 2c       	mov	r15, r1
    200a:	0f e7       	ldi	r16, 0x7F	; 127
    200c:	12 e4       	ldi	r17, 0x42	; 66
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_Z14reportTimeTillmmPKcS0_>
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <_Z19handleSerialBusMsgsv+0x8b6>
    2018:	83 ee       	ldi	r24, 0xE3	; 227
    201a:	91 e4       	ldi	r25, 0x41	; 65
    201c:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    2020:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    2024:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    2028:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    202c:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    2030:	2b 2f       	mov	r18, r27
    2032:	2f 93       	push	r18
    2034:	2a 2f       	mov	r18, r26
    2036:	2f 93       	push	r18
    2038:	29 2f       	mov	r18, r25
    203a:	2f 93       	push	r18
    203c:	8f 93       	push	r24
    203e:	8b e8       	ldi	r24, 0x8B	; 139
    2040:	92 e4       	ldi	r25, 0x42	; 66
    2042:	89 2f       	mov	r24, r25
    2044:	8f 93       	push	r24
    2046:	8b e8       	ldi	r24, 0x8B	; 139
    2048:	92 e4       	ldi	r25, 0x42	; 66
    204a:	8f 93       	push	r24
    204c:	85 ed       	ldi	r24, 0xD5	; 213
    204e:	94 e4       	ldi	r25, 0x44	; 68
    2050:	89 2f       	mov	r24, r25
    2052:	8f 93       	push	r24
    2054:	85 ed       	ldi	r24, 0xD5	; 213
    2056:	94 e4       	ldi	r25, 0x44	; 68
    2058:	8f 93       	push	r24
    205a:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    205e:	ed b7       	in	r30, 0x3d	; 61
    2060:	fe b7       	in	r31, 0x3e	; 62
    2062:	38 96       	adiw	r30, 0x08	; 8
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	3a c0       	rjmp	.+116    	; 0x20de <_Z19handleSerialBusMsgsv+0x974>
    206a:	ce 01       	movw	r24, r28
    206c:	cc 96       	adiw	r24, 0x3c	; 60
    206e:	0e 94 0b 23 	call	0x4616	; 0x4616 <ds3231_get_epoch>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	80 93 55 45 	sts	0x4555, r24	; 0x804555 <g_current_epoch>
    207a:	90 93 56 45 	sts	0x4556, r25	; 0x804556 <g_current_epoch+0x1>
    207e:	a0 93 57 45 	sts	0x4557, r26	; 0x804557 <g_current_epoch+0x2>
    2082:	b0 93 58 45 	sts	0x4558, r27	; 0x804558 <g_current_epoch+0x3>
    2086:	8c ad       	ldd	r24, Y+60	; 0x3c
    2088:	88 23       	and	r24, r24
    208a:	29 f5       	brne	.+74     	; 0x20d6 <_Z19handleSerialBusMsgsv+0x96c>
    208c:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    2090:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    2094:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    2098:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    209c:	2b 2f       	mov	r18, r27
    209e:	2f 93       	push	r18
    20a0:	2a 2f       	mov	r18, r26
    20a2:	2f 93       	push	r18
    20a4:	29 2f       	mov	r18, r25
    20a6:	2f 93       	push	r18
    20a8:	8f 93       	push	r24
    20aa:	8b e8       	ldi	r24, 0x8B	; 139
    20ac:	92 e4       	ldi	r25, 0x42	; 66
    20ae:	89 2f       	mov	r24, r25
    20b0:	8f 93       	push	r24
    20b2:	8b e8       	ldi	r24, 0x8B	; 139
    20b4:	92 e4       	ldi	r25, 0x42	; 66
    20b6:	8f 93       	push	r24
    20b8:	85 ed       	ldi	r24, 0xD5	; 213
    20ba:	94 e4       	ldi	r25, 0x44	; 68
    20bc:	89 2f       	mov	r24, r25
    20be:	8f 93       	push	r24
    20c0:	85 ed       	ldi	r24, 0xD5	; 213
    20c2:	94 e4       	ldi	r25, 0x44	; 68
    20c4:	8f 93       	push	r24
    20c6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    20ca:	8d b7       	in	r24, 0x3d	; 61
    20cc:	9e b7       	in	r25, 0x3e	; 62
    20ce:	08 96       	adiw	r24, 0x08	; 8
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	04 c0       	rjmp	.+8      	; 0x20de <_Z19handleSerialBusMsgsv+0x974>
    20d6:	83 ee       	ldi	r24, 0xE3	; 227
    20d8:	91 e4       	ldi	r25, 0x41	; 65
    20da:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	89 87       	std	Y+9, r24	; 0x09
    20e2:	84 c1       	rjmp	.+776    	; 0x23ec <_Z19handleSerialBusMsgsv+0xc82>
    20e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e8:	fc 01       	movw	r30, r24
    20ea:	83 81       	ldd	r24, Z+3	; 0x03
    20ec:	83 35       	cpi	r24, 0x53	; 83
    20ee:	09 f0       	breq	.+2      	; 0x20f2 <_Z19handleSerialBusMsgsv+0x988>
    20f0:	a1 c0       	rjmp	.+322    	; 0x2234 <_Z19handleSerialBusMsgsv+0xaca>
    20f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20f6:	47 96       	adiw	r24, 0x17	; 23
    20f8:	bc 01       	movw	r22, r24
    20fa:	85 ed       	ldi	r24, 0xD5	; 213
    20fc:	94 e4       	ldi	r25, 0x44	; 68
    20fe:	0e 94 a9 40 	call	0x8152	; 0x8152 <strcpy>
    2102:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <g_utc_offset>
    2106:	81 95       	neg	r24
    2108:	48 2f       	mov	r20, r24
    210a:	64 e4       	ldi	r22, 0x44	; 68
    210c:	75 e4       	ldi	r23, 0x45	; 69
    210e:	85 ed       	ldi	r24, 0xD5	; 213
    2110:	94 e4       	ldi	r25, 0x44	; 68
    2112:	0e 94 9d 1c 	call	0x393a	; 0x393a <_Z18validateTimeStringPcPma>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8b a3       	std	Y+35, r24	; 0x23
    211c:	9c a3       	std	Y+36, r25	; 0x24
    211e:	ad a3       	std	Y+37, r26	; 0x25
    2120:	be a3       	std	Y+38, r27	; 0x26
    2122:	8b a1       	ldd	r24, Y+35	; 0x23
    2124:	9c a1       	ldd	r25, Y+36	; 0x24
    2126:	ad a1       	ldd	r26, Y+37	; 0x25
    2128:	be a1       	ldd	r27, Y+38	; 0x26
    212a:	89 2b       	or	r24, r25
    212c:	8a 2b       	or	r24, r26
    212e:	8b 2b       	or	r24, r27
    2130:	09 f4       	brne	.+2      	; 0x2134 <_Z19handleSerialBusMsgsv+0x9ca>
    2132:	59 c0       	rjmp	.+178    	; 0x21e6 <_Z19handleSerialBusMsgsv+0xa7c>
    2134:	8b a1       	ldd	r24, Y+35	; 0x23
    2136:	9c a1       	ldd	r25, Y+36	; 0x24
    2138:	ad a1       	ldd	r26, Y+37	; 0x25
    213a:	be a1       	ldd	r27, Y+38	; 0x26
    213c:	80 93 44 45 	sts	0x4544, r24	; 0x804544 <g_event_start_epoch>
    2140:	90 93 45 45 	sts	0x4545, r25	; 0x804545 <g_event_start_epoch+0x1>
    2144:	a0 93 46 45 	sts	0x4546, r26	; 0x804546 <g_event_start_epoch+0x2>
    2148:	b0 93 47 45 	sts	0x4547, r27	; 0x804547 <g_event_start_epoch+0x3>
    214c:	44 e4       	ldi	r20, 0x44	; 68
    214e:	55 e4       	ldi	r21, 0x45	; 69
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	83 e4       	ldi	r24, 0x43	; 67
    2154:	95 e4       	ldi	r25, 0x45	; 69
    2156:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    215a:	80 91 48 45 	lds	r24, 0x4548	; 0x804548 <g_event_finish_epoch>
    215e:	90 91 49 45 	lds	r25, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    2162:	a0 91 4a 45 	lds	r26, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    2166:	b0 91 4b 45 	lds	r27, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    216a:	8f a3       	std	Y+39, r24	; 0x27
    216c:	98 a7       	std	Y+40, r25	; 0x28
    216e:	a9 a7       	std	Y+41, r26	; 0x29
    2170:	ba a7       	std	Y+42, r27	; 0x2a
    2172:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    2176:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    217a:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    217e:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    2182:	80 58       	subi	r24, 0x80	; 128
    2184:	9e 4a       	sbci	r25, 0xAE	; 174
    2186:	ae 4f       	sbci	r26, 0xFE	; 254
    2188:	bf 4f       	sbci	r27, 0xFF	; 255
    218a:	8b a7       	std	Y+43, r24	; 0x2b
    218c:	9c a7       	std	Y+44, r25	; 0x2c
    218e:	ad a7       	std	Y+45, r26	; 0x2d
    2190:	be a7       	std	Y+46, r27	; 0x2e
    2192:	2f a1       	ldd	r18, Y+39	; 0x27
    2194:	38 a5       	ldd	r19, Y+40	; 0x28
    2196:	49 a5       	ldd	r20, Y+41	; 0x29
    2198:	5a a5       	ldd	r21, Y+42	; 0x2a
    219a:	8b a5       	ldd	r24, Y+43	; 0x2b
    219c:	9c a5       	ldd	r25, Y+44	; 0x2c
    219e:	ad a5       	ldd	r26, Y+45	; 0x2d
    21a0:	be a5       	ldd	r27, Y+46	; 0x2e
    21a2:	28 17       	cp	r18, r24
    21a4:	39 07       	cpc	r19, r25
    21a6:	4a 07       	cpc	r20, r26
    21a8:	5b 07       	cpc	r21, r27
    21aa:	28 f4       	brcc	.+10     	; 0x21b6 <_Z19handleSerialBusMsgsv+0xa4c>
    21ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b0:	ad a5       	ldd	r26, Y+45	; 0x2d
    21b2:	be a5       	ldd	r27, Y+46	; 0x2e
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <_Z19handleSerialBusMsgsv+0xa54>
    21b6:	8f a1       	ldd	r24, Y+39	; 0x27
    21b8:	98 a5       	ldd	r25, Y+40	; 0x28
    21ba:	a9 a5       	ldd	r26, Y+41	; 0x29
    21bc:	ba a5       	ldd	r27, Y+42	; 0x2a
    21be:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <g_event_finish_epoch>
    21c2:	90 93 49 45 	sts	0x4549, r25	; 0x804549 <g_event_finish_epoch+0x1>
    21c6:	a0 93 4a 45 	sts	0x454A, r26	; 0x80454a <g_event_finish_epoch+0x2>
    21ca:	b0 93 4b 45 	sts	0x454B, r27	; 0x80454b <g_event_finish_epoch+0x3>
    21ce:	48 e4       	ldi	r20, 0x48	; 72
    21d0:	55 e4       	ldi	r21, 0x45	; 69
    21d2:	66 e0       	ldi	r22, 0x06	; 6
    21d4:	83 e4       	ldi	r24, 0x43	; 67
    21d6:	95 e4       	ldi	r25, 0x45	; 69
    21d8:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    21dc:	63 e0       	ldi	r22, 0x03	; 3
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 96 1b 	call	0x372c	; 0x372c <_Z11setupForFoxP5Fox_t13EventAction_t>
    21e6:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    21ea:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    21ee:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    21f2:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    21f6:	2b 2f       	mov	r18, r27
    21f8:	2f 93       	push	r18
    21fa:	2a 2f       	mov	r18, r26
    21fc:	2f 93       	push	r18
    21fe:	29 2f       	mov	r18, r25
    2200:	2f 93       	push	r18
    2202:	8f 93       	push	r24
    2204:	86 e9       	ldi	r24, 0x96	; 150
    2206:	92 e4       	ldi	r25, 0x42	; 66
    2208:	89 2f       	mov	r24, r25
    220a:	8f 93       	push	r24
    220c:	86 e9       	ldi	r24, 0x96	; 150
    220e:	92 e4       	ldi	r25, 0x42	; 66
    2210:	8f 93       	push	r24
    2212:	85 ed       	ldi	r24, 0xD5	; 213
    2214:	94 e4       	ldi	r25, 0x44	; 68
    2216:	89 2f       	mov	r24, r25
    2218:	8f 93       	push	r24
    221a:	85 ed       	ldi	r24, 0xD5	; 213
    221c:	94 e4       	ldi	r25, 0x44	; 68
    221e:	8f 93       	push	r24
    2220:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    2224:	8d b7       	in	r24, 0x3d	; 61
    2226:	9e b7       	in	r25, 0x3e	; 62
    2228:	08 96       	adiw	r24, 0x08	; 8
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	89 87       	std	Y+9, r24	; 0x09
    2232:	dc c0       	rjmp	.+440    	; 0x23ec <_Z19handleSerialBusMsgsv+0xc82>
    2234:	8a 85       	ldd	r24, Y+10	; 0x0a
    2236:	9b 85       	ldd	r25, Y+11	; 0x0b
    2238:	fc 01       	movw	r30, r24
    223a:	83 81       	ldd	r24, Z+3	; 0x03
    223c:	86 34       	cpi	r24, 0x46	; 70
    223e:	09 f0       	breq	.+2      	; 0x2242 <_Z19handleSerialBusMsgsv+0xad8>
    2240:	5f c0       	rjmp	.+190    	; 0x2300 <_Z19handleSerialBusMsgsv+0xb96>
    2242:	8a 85       	ldd	r24, Y+10	; 0x0a
    2244:	9b 85       	ldd	r25, Y+11	; 0x0b
    2246:	47 96       	adiw	r24, 0x17	; 23
    2248:	bc 01       	movw	r22, r24
    224a:	85 ed       	ldi	r24, 0xD5	; 213
    224c:	94 e4       	ldi	r25, 0x44	; 68
    224e:	0e 94 a9 40 	call	0x8152	; 0x8152 <strcpy>
    2252:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <g_utc_offset>
    2256:	81 95       	neg	r24
    2258:	48 2f       	mov	r20, r24
    225a:	68 e4       	ldi	r22, 0x48	; 72
    225c:	75 e4       	ldi	r23, 0x45	; 69
    225e:	85 ed       	ldi	r24, 0xD5	; 213
    2260:	94 e4       	ldi	r25, 0x44	; 68
    2262:	0e 94 9d 1c 	call	0x393a	; 0x393a <_Z18validateTimeStringPcPma>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	98 ab       	std	Y+48, r25	; 0x30
    226e:	a9 ab       	std	Y+49, r26	; 0x31
    2270:	ba ab       	std	Y+50, r27	; 0x32
    2272:	8f a5       	ldd	r24, Y+47	; 0x2f
    2274:	98 a9       	ldd	r25, Y+48	; 0x30
    2276:	a9 a9       	ldd	r26, Y+49	; 0x31
    2278:	ba a9       	ldd	r27, Y+50	; 0x32
    227a:	89 2b       	or	r24, r25
    227c:	8a 2b       	or	r24, r26
    227e:	8b 2b       	or	r24, r27
    2280:	c1 f0       	breq	.+48     	; 0x22b2 <_Z19handleSerialBusMsgsv+0xb48>
    2282:	8f a5       	ldd	r24, Y+47	; 0x2f
    2284:	98 a9       	ldd	r25, Y+48	; 0x30
    2286:	a9 a9       	ldd	r26, Y+49	; 0x31
    2288:	ba a9       	ldd	r27, Y+50	; 0x32
    228a:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <g_event_finish_epoch>
    228e:	90 93 49 45 	sts	0x4549, r25	; 0x804549 <g_event_finish_epoch+0x1>
    2292:	a0 93 4a 45 	sts	0x454A, r26	; 0x80454a <g_event_finish_epoch+0x2>
    2296:	b0 93 4b 45 	sts	0x454B, r27	; 0x80454b <g_event_finish_epoch+0x3>
    229a:	48 e4       	ldi	r20, 0x48	; 72
    229c:	55 e4       	ldi	r21, 0x45	; 69
    229e:	66 e0       	ldi	r22, 0x06	; 6
    22a0:	83 e4       	ldi	r24, 0x43	; 67
    22a2:	95 e4       	ldi	r25, 0x45	; 69
    22a4:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    22a8:	63 e0       	ldi	r22, 0x03	; 3
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	0e 94 96 1b 	call	0x372c	; 0x372c <_Z11setupForFoxP5Fox_t13EventAction_t>
    22b2:	80 91 48 45 	lds	r24, 0x4548	; 0x804548 <g_event_finish_epoch>
    22b6:	90 91 49 45 	lds	r25, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    22ba:	a0 91 4a 45 	lds	r26, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    22be:	b0 91 4b 45 	lds	r27, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    22c2:	2b 2f       	mov	r18, r27
    22c4:	2f 93       	push	r18
    22c6:	2a 2f       	mov	r18, r26
    22c8:	2f 93       	push	r18
    22ca:	29 2f       	mov	r18, r25
    22cc:	2f 93       	push	r18
    22ce:	8f 93       	push	r24
    22d0:	81 ea       	ldi	r24, 0xA1	; 161
    22d2:	92 e4       	ldi	r25, 0x42	; 66
    22d4:	89 2f       	mov	r24, r25
    22d6:	8f 93       	push	r24
    22d8:	81 ea       	ldi	r24, 0xA1	; 161
    22da:	92 e4       	ldi	r25, 0x42	; 66
    22dc:	8f 93       	push	r24
    22de:	85 ed       	ldi	r24, 0xD5	; 213
    22e0:	94 e4       	ldi	r25, 0x44	; 68
    22e2:	89 2f       	mov	r24, r25
    22e4:	8f 93       	push	r24
    22e6:	85 ed       	ldi	r24, 0xD5	; 213
    22e8:	94 e4       	ldi	r25, 0x44	; 68
    22ea:	8f 93       	push	r24
    22ec:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    22f0:	8d b7       	in	r24, 0x3d	; 61
    22f2:	9e b7       	in	r25, 0x3e	; 62
    22f4:	08 96       	adiw	r24, 0x08	; 8
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	89 87       	std	Y+9, r24	; 0x09
    22fe:	76 c0       	rjmp	.+236    	; 0x23ec <_Z19handleSerialBusMsgsv+0xc82>
    2300:	8a 85       	ldd	r24, Y+10	; 0x0a
    2302:	9b 85       	ldd	r25, Y+11	; 0x0b
    2304:	fc 01       	movw	r30, r24
    2306:	83 81       	ldd	r24, Z+3	; 0x03
    2308:	8a 32       	cpi	r24, 0x2A	; 42
    230a:	19 f4       	brne	.+6      	; 0x2312 <_Z19handleSerialBusMsgsv+0xba8>
    230c:	0e 94 29 26 	call	0x4c52	; 0x4c52 <ds3231_sync2nearestMinute>
    2310:	6d c0       	rjmp	.+218    	; 0x23ec <_Z19handleSerialBusMsgsv+0xc82>
    2312:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <_Z23clockConfigurationCheckv>
    2316:	8b ab       	std	Y+51, r24	; 0x33
    2318:	8b a9       	ldd	r24, Y+51	; 0x33
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	31 f0       	breq	.+12     	; 0x232a <_Z19handleSerialBusMsgsv+0xbc0>
    231e:	8b a9       	ldd	r24, Y+51	; 0x33
    2320:	85 30       	cpi	r24, 0x05	; 5
    2322:	19 f0       	breq	.+6      	; 0x232a <_Z19handleSerialBusMsgsv+0xbc0>
    2324:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <_Z18reportConfigErrorsv>
    2328:	61 c0       	rjmp	.+194    	; 0x23ec <_Z19handleSerialBusMsgsv+0xc82>
    232a:	20 91 44 45 	lds	r18, 0x4544	; 0x804544 <g_event_start_epoch>
    232e:	30 91 45 45 	lds	r19, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    2332:	40 91 46 45 	lds	r20, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    2336:	50 91 47 45 	lds	r21, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    233a:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    233e:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    2342:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    2346:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    234a:	0f 2e       	mov	r0, r31
    234c:	fd ea       	ldi	r31, 0xAD	; 173
    234e:	ef 2e       	mov	r14, r31
    2350:	f2 e4       	ldi	r31, 0x42	; 66
    2352:	ff 2e       	mov	r15, r31
    2354:	f0 2d       	mov	r31, r0
    2356:	0f e7       	ldi	r16, 0x7F	; 127
    2358:	12 e4       	ldi	r17, 0x42	; 66
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_Z14reportTimeTillmmPKcS0_>
    2362:	20 91 48 45 	lds	r18, 0x4548	; 0x804548 <g_event_finish_epoch>
    2366:	30 91 49 45 	lds	r19, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    236a:	40 91 4a 45 	lds	r20, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    236e:	50 91 4b 45 	lds	r21, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    2372:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    2376:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    237a:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    237e:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    2382:	e1 2c       	mov	r14, r1
    2384:	f1 2c       	mov	r15, r1
    2386:	0a eb       	ldi	r16, 0xBA	; 186
    2388:	12 e4       	ldi	r17, 0x42	; 66
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_Z14reportTimeTillmmPKcS0_>
    2392:	20 91 44 45 	lds	r18, 0x4544	; 0x804544 <g_event_start_epoch>
    2396:	30 91 45 45 	lds	r19, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    239a:	40 91 46 45 	lds	r20, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    239e:	50 91 47 45 	lds	r21, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    23a2:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    23a6:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    23aa:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    23ae:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    23b2:	28 17       	cp	r18, r24
    23b4:	39 07       	cpc	r19, r25
    23b6:	4a 07       	cpc	r20, r26
    23b8:	5b 07       	cpc	r21, r27
    23ba:	c0 f4       	brcc	.+48     	; 0x23ec <_Z19handleSerialBusMsgsv+0xc82>
    23bc:	20 91 48 45 	lds	r18, 0x4548	; 0x804548 <g_event_finish_epoch>
    23c0:	30 91 49 45 	lds	r19, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    23c4:	40 91 4a 45 	lds	r20, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    23c8:	50 91 4b 45 	lds	r21, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    23cc:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    23d0:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    23d4:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    23d8:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    23dc:	e1 2c       	mov	r14, r1
    23de:	f1 2c       	mov	r15, r1
    23e0:	02 ec       	ldi	r16, 0xC2	; 194
    23e2:	12 e4       	ldi	r17, 0x42	; 66
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_Z14reportTimeTillmmPKcS0_>
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	88 23       	and	r24, r24
    23f0:	11 f1       	breq	.+68     	; 0x2436 <_Z19handleSerialBusMsgsv+0xccc>
    23f2:	85 ed       	ldi	r24, 0xD5	; 213
    23f4:	94 e4       	ldi	r25, 0x44	; 68
    23f6:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    23fa:	1d c0       	rjmp	.+58     	; 0x2436 <_Z19handleSerialBusMsgsv+0xccc>
    23fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2400:	fc 01       	movw	r30, r24
    2402:	83 81       	ldd	r24, Z+3	; 0x03
    2404:	83 34       	cpi	r24, 0x43	; 67
    2406:	c9 f4       	brne	.+50     	; 0x243a <_Z19handleSerialBusMsgsv+0xcd0>
    2408:	8a 85       	ldd	r24, Y+10	; 0x0a
    240a:	9b 85       	ldd	r25, Y+11	; 0x0b
    240c:	fc 01       	movw	r30, r24
    240e:	87 89       	ldd	r24, Z+23	; 0x17
    2410:	88 23       	and	r24, r24
    2412:	99 f0       	breq	.+38     	; 0x243a <_Z19handleSerialBusMsgsv+0xcd0>
    2414:	8a 85       	ldd	r24, Y+10	; 0x0a
    2416:	9b 85       	ldd	r25, Y+11	; 0x0b
    2418:	47 96       	adiw	r24, 0x17	; 23
    241a:	0e 94 51 40 	call	0x80a2	; 0x80a2 <atoi>
    241e:	8c ab       	std	Y+52, r24	; 0x34
    2420:	9d ab       	std	Y+53, r25	; 0x35
    2422:	0b c0       	rjmp	.+22     	; 0x243a <_Z19handleSerialBusMsgsv+0xcd0>
    2424:	85 e7       	ldi	r24, 0x75	; 117
    2426:	90 e4       	ldi	r25, 0x40	; 64
    2428:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    242c:	07 c0       	rjmp	.+14     	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    242e:	00 00       	nop
    2430:	05 c0       	rjmp	.+10     	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    2432:	00 00       	nop
    2434:	03 c0       	rjmp	.+6      	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    2436:	00 00       	nop
    2438:	01 c0       	rjmp	.+2      	; 0x243c <_Z19handleSerialBusMsgsv+0xcd2>
    243a:	00 00       	nop
    243c:	8a 85       	ldd	r24, Y+10	; 0x0a
    243e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2440:	fc 01       	movw	r30, r24
    2442:	11 82       	std	Z+1, r1	; 0x01
    2444:	12 82       	std	Z+2, r1	; 0x02
    2446:	0e 94 93 31 	call	0x6326	; 0x6326 <sb_send_NewPrompt>
    244a:	9a c9       	rjmp	.-3276   	; 0x1780 <_Z19handleSerialBusMsgsv+0x16>
    244c:	00 00       	nop
    244e:	ec 96       	adiw	r28, 0x3c	; 60
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	ff 90       	pop	r15
    245e:	ef 90       	pop	r14
    2460:	08 95       	ret

00002462 <_Z17handleLinkBusMsgsv>:
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	e3 97       	sbiw	r28, 0x33	; 51
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_Z18nextFullLBRxBufferv>
    2480:	8c 87       	std	Y+12, r24	; 0x0c
    2482:	9d 87       	std	Y+13, r25	; 0x0d
    2484:	21 e0       	ldi	r18, 0x01	; 1
    2486:	8c 85       	ldd	r24, Y+12	; 0x0c
    2488:	9d 85       	ldd	r25, Y+13	; 0x0d
    248a:	89 2b       	or	r24, r25
    248c:	09 f4       	brne	.+2      	; 0x2490 <_Z17handleLinkBusMsgsv+0x2e>
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	22 23       	and	r18, r18
    2492:	09 f4       	brne	.+2      	; 0x2496 <_Z17handleLinkBusMsgsv+0x34>
    2494:	89 c6       	rjmp	.+3346   	; 0x31a8 <_Z17handleLinkBusMsgsv+0xd46>
    2496:	8c 85       	ldd	r24, Y+12	; 0x0c
    2498:	9d 85       	ldd	r25, Y+13	; 0x0d
    249a:	fc 01       	movw	r30, r24
    249c:	81 81       	ldd	r24, Z+1	; 0x01
    249e:	92 81       	ldd	r25, Z+2	; 0x02
    24a0:	8e 87       	std	Y+14, r24	; 0x0e
    24a2:	9f 87       	std	Y+15, r25	; 0x0f
    24a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24a8:	82 38       	cpi	r24, 0x82	; 130
    24aa:	fe e1       	ldi	r31, 0x1E	; 30
    24ac:	9f 07       	cpc	r25, r31
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <_Z17handleLinkBusMsgsv+0x50>
    24b0:	6c c0       	rjmp	.+216    	; 0x258a <_Z17handleLinkBusMsgsv+0x128>
    24b2:	83 38       	cpi	r24, 0x83	; 131
    24b4:	2e e1       	ldi	r18, 0x1E	; 30
    24b6:	92 07       	cpc	r25, r18
    24b8:	30 f5       	brcc	.+76     	; 0x2506 <_Z17handleLinkBusMsgsv+0xa4>
    24ba:	81 36       	cpi	r24, 0x61	; 97
    24bc:	33 e0       	ldi	r19, 0x03	; 3
    24be:	93 07       	cpc	r25, r19
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <_Z17handleLinkBusMsgsv+0x62>
    24c2:	d8 c4       	rjmp	.+2480   	; 0x2e74 <_Z17handleLinkBusMsgsv+0xa12>
    24c4:	82 36       	cpi	r24, 0x62	; 98
    24c6:	e3 e0       	ldi	r30, 0x03	; 3
    24c8:	9e 07       	cpc	r25, r30
    24ca:	78 f4       	brcc	.+30     	; 0x24ea <_Z17handleLinkBusMsgsv+0x88>
    24cc:	85 31       	cpi	r24, 0x15	; 21
    24ce:	f3 e0       	ldi	r31, 0x03	; 3
    24d0:	9f 07       	cpc	r25, r31
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <_Z17handleLinkBusMsgsv+0x74>
    24d4:	1d c1       	rjmp	.+570    	; 0x2710 <_Z17handleLinkBusMsgsv+0x2ae>
    24d6:	8e 31       	cpi	r24, 0x1E	; 30
    24d8:	23 e0       	ldi	r18, 0x03	; 3
    24da:	92 07       	cpc	r25, r18
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <_Z17handleLinkBusMsgsv+0x7e>
    24de:	3f c3       	rjmp	.+1662   	; 0x2b5e <_Z17handleLinkBusMsgsv+0x6fc>
    24e0:	84 35       	cpi	r24, 0x54	; 84
    24e2:	91 05       	cpc	r25, r1
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <_Z17handleLinkBusMsgsv+0x86>
    24e6:	3b c4       	rjmp	.+2166   	; 0x2d5e <_Z17handleLinkBusMsgsv+0x8fc>
    24e8:	34 c6       	rjmp	.+3176   	; 0x3152 <_Z17handleLinkBusMsgsv+0xcf0>
    24ea:	8f 3a       	cpi	r24, 0xAF	; 175
    24ec:	33 e0       	ldi	r19, 0x03	; 3
    24ee:	93 07       	cpc	r25, r19
    24f0:	c9 f1       	breq	.+114    	; 0x2564 <_Z17handleLinkBusMsgsv+0x102>
    24f2:	86 3a       	cpi	r24, 0xA6	; 166
    24f4:	ec e1       	ldi	r30, 0x1C	; 28
    24f6:	9e 07       	cpc	r25, r30
    24f8:	09 f4       	brne	.+2      	; 0x24fc <_Z17handleLinkBusMsgsv+0x9a>
    24fa:	49 c5       	rjmp	.+2706   	; 0x2f8e <_Z17handleLinkBusMsgsv+0xb2c>
    24fc:	84 38       	cpi	r24, 0x84	; 132
    24fe:	93 40       	sbci	r25, 0x03	; 3
    2500:	09 f4       	brne	.+2      	; 0x2504 <_Z17handleLinkBusMsgsv+0xa2>
    2502:	c7 c1       	rjmp	.+910    	; 0x2892 <_Z17handleLinkBusMsgsv+0x430>
    2504:	26 c6       	rjmp	.+3148   	; 0x3152 <_Z17handleLinkBusMsgsv+0xcf0>
    2506:	8a 39       	cpi	r24, 0x9A	; 154
    2508:	23 e2       	ldi	r18, 0x23	; 35
    250a:	92 07       	cpc	r25, r18
    250c:	e9 f1       	breq	.+122    	; 0x2588 <_Z17handleLinkBusMsgsv+0x126>
    250e:	8b 39       	cpi	r24, 0x9B	; 155
    2510:	33 e2       	ldi	r19, 0x23	; 35
    2512:	93 07       	cpc	r25, r19
    2514:	78 f4       	brcc	.+30     	; 0x2534 <_Z17handleLinkBusMsgsv+0xd2>
    2516:	8d 3a       	cpi	r24, 0xAD	; 173
    2518:	e2 e2       	ldi	r30, 0x22	; 34
    251a:	9e 07       	cpc	r25, r30
    251c:	09 f4       	brne	.+2      	; 0x2520 <_Z17handleLinkBusMsgsv+0xbe>
    251e:	96 c0       	rjmp	.+300    	; 0x264c <_Z17handleLinkBusMsgsv+0x1ea>
    2520:	81 3c       	cpi	r24, 0xC1	; 193
    2522:	f2 e2       	ldi	r31, 0x22	; 34
    2524:	9f 07       	cpc	r25, r31
    2526:	09 f4       	brne	.+2      	; 0x252a <_Z17handleLinkBusMsgsv+0xc8>
    2528:	ee c0       	rjmp	.+476    	; 0x2706 <_Z17handleLinkBusMsgsv+0x2a4>
    252a:	81 3d       	cpi	r24, 0xD1	; 209
    252c:	9e 41       	sbci	r25, 0x1E	; 30
    252e:	09 f4       	brne	.+2      	; 0x2532 <_Z17handleLinkBusMsgsv+0xd0>
    2530:	b8 c4       	rjmp	.+2416   	; 0x2ea2 <_Z17handleLinkBusMsgsv+0xa40>
    2532:	0f c6       	rjmp	.+3102   	; 0x3152 <_Z17handleLinkBusMsgsv+0xcf0>
    2534:	80 3d       	cpi	r24, 0xD0	; 208
    2536:	33 e2       	ldi	r19, 0x23	; 35
    2538:	93 07       	cpc	r25, r19
    253a:	09 f4       	brne	.+2      	; 0x253e <_Z17handleLinkBusMsgsv+0xdc>
    253c:	73 c3       	rjmp	.+1766   	; 0x2c24 <_Z17handleLinkBusMsgsv+0x7c2>
    253e:	81 3d       	cpi	r24, 0xD1	; 209
    2540:	e3 e2       	ldi	r30, 0x23	; 35
    2542:	9e 07       	cpc	r25, r30
    2544:	28 f4       	brcc	.+10     	; 0x2550 <_Z17handleLinkBusMsgsv+0xee>
    2546:	8f 3c       	cpi	r24, 0xCF	; 207
    2548:	93 42       	sbci	r25, 0x23	; 35
    254a:	09 f4       	brne	.+2      	; 0x254e <_Z17handleLinkBusMsgsv+0xec>
    254c:	e8 c5       	rjmp	.+3024   	; 0x311e <_Z17handleLinkBusMsgsv+0xcbc>
    254e:	01 c6       	rjmp	.+3074   	; 0x3152 <_Z17handleLinkBusMsgsv+0xcf0>
    2550:	87 3f       	cpi	r24, 0xF7	; 247
    2552:	23 e2       	ldi	r18, 0x23	; 35
    2554:	92 07       	cpc	r25, r18
    2556:	09 f4       	brne	.+2      	; 0x255a <_Z17handleLinkBusMsgsv+0xf8>
    2558:	11 c2       	rjmp	.+1058   	; 0x297c <_Z17handleLinkBusMsgsv+0x51a>
    255a:	8c 39       	cpi	r24, 0x9C	; 156
    255c:	94 42       	sbci	r25, 0x24	; 36
    255e:	09 f4       	brne	.+2      	; 0x2562 <_Z17handleLinkBusMsgsv+0x100>
    2560:	f0 c5       	rjmp	.+3040   	; 0x3142 <_Z17handleLinkBusMsgsv+0xce0>
    2562:	f7 c5       	rjmp	.+3054   	; 0x3152 <_Z17handleLinkBusMsgsv+0xcf0>
    2564:	8c 85       	ldd	r24, Y+12	; 0x0c
    2566:	9d 85       	ldd	r25, Y+13	; 0x0d
    2568:	fc 01       	movw	r30, r24
    256a:	83 81       	ldd	r24, Z+3	; 0x03
    256c:	88 23       	and	r24, r24
    256e:	09 f4       	brne	.+2      	; 0x2572 <_Z17handleLinkBusMsgsv+0x110>
    2570:	f6 c5       	rjmp	.+3052   	; 0x315e <_Z17handleLinkBusMsgsv+0xcfc>
    2572:	8c 85       	ldd	r24, Y+12	; 0x0c
    2574:	9d 85       	ldd	r25, Y+13	; 0x0d
    2576:	03 96       	adiw	r24, 0x03	; 3
    2578:	0e 94 51 40 	call	0x80a2	; 0x80a2 <atoi>
    257c:	88 8b       	std	Y+16, r24	; 0x10
    257e:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <_Z15linkbus_disablev>
    2582:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2586:	eb c5       	rjmp	.+3030   	; 0x315e <_Z17handleLinkBusMsgsv+0xcfc>
    2588:	ff cf       	rjmp	.-2      	; 0x2588 <_Z17handleLinkBusMsgsv+0x126>
    258a:	8c 85       	ldd	r24, Y+12	; 0x0c
    258c:	9d 85       	ldd	r25, Y+13	; 0x0d
    258e:	fc 01       	movw	r30, r24
    2590:	83 81       	ldd	r24, Z+3	; 0x03
    2592:	89 8b       	std	Y+17, r24	; 0x11
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    259a:	89 89       	ldd	r24, Y+17	; 0x11
    259c:	8a 35       	cpi	r24, 0x5A	; 90
    259e:	21 f4       	brne	.+8      	; 0x25a8 <_Z17handleLinkBusMsgsv+0x146>
    25a0:	88 e7       	ldi	r24, 0x78	; 120
    25a2:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    25a6:	dd c5       	rjmp	.+3002   	; 0x3162 <_Z17handleLinkBusMsgsv+0xd00>
    25a8:	89 89       	ldd	r24, Y+17	; 0x11
    25aa:	80 33       	cpi	r24, 0x30	; 48
    25ac:	d1 f5       	brne	.+116    	; 0x2622 <_Z17handleLinkBusMsgsv+0x1c0>
    25ae:	90 91 32 45 	lds	r25, 0x4532	; 0x804532 <g_waiting_for_next_event>
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	99 23       	and	r25, r25
    25b6:	09 f4       	brne	.+2      	; 0x25ba <_Z17handleLinkBusMsgsv+0x158>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	88 23       	and	r24, r24
    25bc:	39 f0       	breq	.+14     	; 0x25cc <_Z17handleLinkBusMsgsv+0x16a>
    25be:	43 ed       	ldi	r20, 0xD3	; 211
    25c0:	52 e4       	ldi	r21, 0x42	; 66
    25c2:	65 ed       	ldi	r22, 0xD5	; 213
    25c4:	72 e4       	ldi	r23, 0x42	; 66
    25c6:	83 e0       	ldi	r24, 0x03	; 3
    25c8:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_Z11lb_send_msg13LBMessageTypePKcPc>
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	2b 2f       	mov	r18, r27
    25da:	2f 93       	push	r18
    25dc:	2a 2f       	mov	r18, r26
    25de:	2f 93       	push	r18
    25e0:	29 2f       	mov	r18, r25
    25e2:	2f 93       	push	r18
    25e4:	8f 93       	push	r24
    25e6:	89 ed       	ldi	r24, 0xD9	; 217
    25e8:	92 e4       	ldi	r25, 0x42	; 66
    25ea:	89 2f       	mov	r24, r25
    25ec:	8f 93       	push	r24
    25ee:	89 ed       	ldi	r24, 0xD9	; 217
    25f0:	92 e4       	ldi	r25, 0x42	; 66
    25f2:	8f 93       	push	r24
    25f4:	85 ed       	ldi	r24, 0xD5	; 213
    25f6:	94 e4       	ldi	r25, 0x44	; 68
    25f8:	89 2f       	mov	r24, r25
    25fa:	8f 93       	push	r24
    25fc:	85 ed       	ldi	r24, 0xD5	; 213
    25fe:	94 e4       	ldi	r25, 0x44	; 68
    2600:	8f 93       	push	r24
    2602:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    2606:	2d b7       	in	r18, 0x3d	; 61
    2608:	3e b7       	in	r19, 0x3e	; 62
    260a:	28 5f       	subi	r18, 0xF8	; 248
    260c:	3f 4f       	sbci	r19, 0xFF	; 255
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	45 ed       	ldi	r20, 0xD5	; 213
    2614:	54 e4       	ldi	r21, 0x44	; 68
    2616:	6d ed       	ldi	r22, 0xDD	; 221
    2618:	72 e4       	ldi	r23, 0x42	; 66
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_Z11lb_send_msg13LBMessageTypePKcPc>
    2620:	a0 c5       	rjmp	.+2880   	; 0x3162 <_Z17handleLinkBusMsgsv+0xd00>
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	83 33       	cpi	r24, 0x33	; 51
    2626:	09 f0       	breq	.+2      	; 0x262a <_Z17handleLinkBusMsgsv+0x1c8>
    2628:	9c c5       	rjmp	.+2872   	; 0x3162 <_Z17handleLinkBusMsgsv+0xd00>
    262a:	f8 94       	cli
    262c:	10 92 f6 44 	sts	0x44F6, r1	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2636:	10 92 32 45 	sts	0x4532, r1	; 0x804532 <g_waiting_for_next_event>
    263a:	10 92 31 45 	sts	0x4531, r1	; 0x804531 <g_check_for_next_event>
    263e:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	80 93 f7 44 	sts	0x44F7, r24	; 0x8044f7 <_ZL20g_shutting_down_wifi>
    2648:	78 94       	sei
    264a:	8b c5       	rjmp	.+2838   	; 0x3162 <_Z17handleLinkBusMsgsv+0xd00>
    264c:	8c 85       	ldd	r24, Y+12	; 0x0c
    264e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2650:	fc 01       	movw	r30, r24
    2652:	83 81       	ldd	r24, Z+3	; 0x03
    2654:	88 23       	and	r24, r24
    2656:	09 f4       	brne	.+2      	; 0x265a <_Z17handleLinkBusMsgsv+0x1f8>
    2658:	86 c5       	rjmp	.+2828   	; 0x3166 <_Z17handleLinkBusMsgsv+0xd04>
    265a:	8c 85       	ldd	r24, Y+12	; 0x0c
    265c:	9d 85       	ldd	r25, Y+13	; 0x0d
    265e:	fc 01       	movw	r30, r24
    2660:	83 81       	ldd	r24, Z+3	; 0x03
    2662:	8d 34       	cpi	r24, 0x4D	; 77
    2664:	a9 f4       	brne	.+42     	; 0x2690 <_Z17handleLinkBusMsgsv+0x22e>
    2666:	8c 85       	ldd	r24, Y+12	; 0x0c
    2668:	9d 85       	ldd	r25, Y+13	; 0x0d
    266a:	fc 01       	movw	r30, r24
    266c:	80 8d       	ldd	r24, Z+24	; 0x18
    266e:	88 23       	and	r24, r24
    2670:	79 f0       	breq	.+30     	; 0x2690 <_Z17handleLinkBusMsgsv+0x22e>
    2672:	8c 85       	ldd	r24, Y+12	; 0x0c
    2674:	9d 85       	ldd	r25, Y+13	; 0x0d
    2676:	48 96       	adiw	r24, 0x18	; 24
    2678:	0e 94 51 40 	call	0x80a2	; 0x80a2 <atoi>
    267c:	80 93 62 45 	sts	0x4562, r24	; 0x804562 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    2680:	90 93 63 45 	sts	0x4563, r25	; 0x804563 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    2684:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    268e:	09 c0       	rjmp	.+18     	; 0x26a2 <_Z17handleLinkBusMsgsv+0x240>
    2690:	8c 85       	ldd	r24, Y+12	; 0x0c
    2692:	9d 85       	ldd	r25, Y+13	; 0x0d
    2694:	03 96       	adiw	r24, 0x03	; 3
    2696:	0e 94 51 40 	call	0x80a2	; 0x80a2 <atoi>
    269a:	80 93 62 45 	sts	0x4562, r24	; 0x804562 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    269e:	90 93 63 45 	sts	0x4563, r25	; 0x804563 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	82 e6       	ldi	r24, 0x62	; 98
    26a8:	95 e4       	ldi	r25, 0x45	; 69
    26aa:	0e 94 33 3a 	call	0x7466	; 0x7466 <_Z15txSetParametersPjPh>
    26ae:	8a 8b       	std	Y+18, r24	; 0x12
    26b0:	8a 89       	ldd	r24, Y+18	; 0x12
    26b2:	88 23       	and	r24, r24
    26b4:	19 f0       	breq	.+6      	; 0x26bc <_Z17handleLinkBusMsgsv+0x25a>
    26b6:	8a 89       	ldd	r24, Y+18	; 0x12
    26b8:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    26bc:	80 91 62 45 	lds	r24, 0x4562	; 0x804562 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    26c0:	90 91 63 45 	lds	r25, 0x4563	; 0x804563 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    26c4:	29 2f       	mov	r18, r25
    26c6:	2f 93       	push	r18
    26c8:	8f 93       	push	r24
    26ca:	81 ee       	ldi	r24, 0xE1	; 225
    26cc:	92 e4       	ldi	r25, 0x42	; 66
    26ce:	89 2f       	mov	r24, r25
    26d0:	8f 93       	push	r24
    26d2:	81 ee       	ldi	r24, 0xE1	; 225
    26d4:	92 e4       	ldi	r25, 0x42	; 66
    26d6:	8f 93       	push	r24
    26d8:	85 ed       	ldi	r24, 0xD5	; 213
    26da:	94 e4       	ldi	r25, 0x44	; 68
    26dc:	89 2f       	mov	r24, r25
    26de:	8f 93       	push	r24
    26e0:	85 ed       	ldi	r24, 0xD5	; 213
    26e2:	94 e4       	ldi	r25, 0x44	; 68
    26e4:	8f 93       	push	r24
    26e6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	45 ed       	ldi	r20, 0xD5	; 213
    26f8:	54 e4       	ldi	r21, 0x44	; 68
    26fa:	66 ee       	ldi	r22, 0xE6	; 230
    26fc:	72 e4       	ldi	r23, 0x42	; 66
    26fe:	83 e0       	ldi	r24, 0x03	; 3
    2700:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_Z11lb_send_msg13LBMessageTypePKcPc>
    2704:	30 c5       	rjmp	.+2656   	; 0x3166 <_Z17handleLinkBusMsgsv+0xd04>
    2706:	83 e4       	ldi	r24, 0x43	; 67
    2708:	95 e4       	ldi	r25, 0x45	; 69
    270a:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN13EepromManager13saveAllEEPROMEv>
    270e:	3e c5       	rjmp	.+2684   	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    2710:	8c 85       	ldd	r24, Y+12	; 0x0c
    2712:	9d 85       	ldd	r25, Y+13	; 0x0d
    2714:	fc 01       	movw	r30, r24
    2716:	83 81       	ldd	r24, Z+3	; 0x03
    2718:	8b 8b       	std	Y+19, r24	; 0x13
    271a:	8b 89       	ldd	r24, Y+19	; 0x13
    271c:	81 33       	cpi	r24, 0x31	; 49
    271e:	21 f0       	breq	.+8      	; 0x2728 <_Z17handleLinkBusMsgsv+0x2c6>
    2720:	8b 89       	ldd	r24, Y+19	; 0x13
    2722:	82 33       	cpi	r24, 0x32	; 50
    2724:	09 f0       	breq	.+2      	; 0x2728 <_Z17handleLinkBusMsgsv+0x2c6>
    2726:	a9 c0       	rjmp	.+338    	; 0x287a <_Z17handleLinkBusMsgsv+0x418>
    2728:	0e 94 a9 3b 	call	0x7752	; 0x7752 <_Z18txIsAntennaForBandv>
    272c:	88 23       	and	r24, r24
    272e:	31 f4       	brne	.+12     	; 0x273c <_Z17handleLinkBusMsgsv+0x2da>
    2730:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    2734:	88 23       	and	r24, r24
    2736:	11 f4       	brne	.+4      	; 0x273c <_Z17handleLinkBusMsgsv+0x2da>
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	01 c0       	rjmp	.+2      	; 0x273e <_Z17handleLinkBusMsgsv+0x2dc>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	88 23       	and	r24, r24
    2740:	21 f0       	breq	.+8      	; 0x274a <_Z17handleLinkBusMsgsv+0x2e8>
    2742:	87 ef       	ldi	r24, 0xF7	; 247
    2744:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    2748:	a2 c0       	rjmp	.+324    	; 0x288e <_Z17handleLinkBusMsgsv+0x42c>
    274a:	8b 89       	ldd	r24, Y+19	; 0x13
    274c:	81 33       	cpi	r24, 0x31	; 49
    274e:	09 f0       	breq	.+2      	; 0x2752 <_Z17handleLinkBusMsgsv+0x2f0>
    2750:	64 c0       	rjmp	.+200    	; 0x281a <_Z17handleLinkBusMsgsv+0x3b8>
    2752:	0e 94 a9 3b 	call	0x7752	; 0x7752 <_Z18txIsAntennaForBandv>
    2756:	88 23       	and	r24, r24
    2758:	21 f4       	brne	.+8      	; 0x2762 <_Z17handleLinkBusMsgsv+0x300>
    275a:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    275e:	88 23       	and	r24, r24
    2760:	11 f0       	breq	.+4      	; 0x2766 <_Z17handleLinkBusMsgsv+0x304>
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	01 c0       	rjmp	.+2      	; 0x2768 <_Z17handleLinkBusMsgsv+0x306>
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	88 23       	and	r24, r24
    276a:	09 f4       	brne	.+2      	; 0x276e <_Z17handleLinkBusMsgsv+0x30c>
    276c:	52 c0       	rjmp	.+164    	; 0x2812 <_Z17handleLinkBusMsgsv+0x3b0>
    276e:	f8 94       	cli
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	8c a7       	std	Y+44, r24	; 0x2c
    2774:	ce 01       	movw	r24, r28
    2776:	8c 96       	adiw	r24, 0x2c	; 44
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	bc 01       	movw	r22, r24
    277e:	89 ef       	ldi	r24, 0xF9	; 249
    2780:	94 e4       	ldi	r25, 0x44	; 68
    2782:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
    2786:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    278a:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
    278e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2792:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2796:	78 94       	sei
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	a0 e0       	ldi	r26, 0x00	; 0
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	80 93 27 45 	sts	0x4527, r24	; 0x804527 <g_event_start_time>
    27a4:	90 93 28 45 	sts	0x4528, r25	; 0x804528 <g_event_start_time+0x1>
    27a8:	a0 93 29 45 	sts	0x4529, r26	; 0x804529 <g_event_start_time+0x2>
    27ac:	b0 93 2a 45 	sts	0x452A, r27	; 0x80452a <g_event_start_time+0x3>
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	9f ef       	ldi	r25, 0xFF	; 255
    27b4:	dc 01       	movw	r26, r24
    27b6:	80 93 2b 45 	sts	0x452B, r24	; 0x80452b <g_event_finish_time>
    27ba:	90 93 2c 45 	sts	0x452C, r25	; 0x80452c <g_event_finish_time+0x1>
    27be:	a0 93 2d 45 	sts	0x452D, r26	; 0x80452d <g_event_finish_time+0x2>
    27c2:	b0 93 2e 45 	sts	0x452E, r27	; 0x80452e <g_event_finish_time+0x3>
    27c6:	8f e0       	ldi	r24, 0x0F	; 15
    27c8:	97 e2       	ldi	r25, 0x27	; 39
    27ca:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    27ce:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    27d2:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    27d6:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    27da:	8f e0       	ldi	r24, 0x0F	; 15
    27dc:	97 e2       	ldi	r25, 0x27	; 39
    27de:	a0 e0       	ldi	r26, 0x00	; 0
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    27e6:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    27ea:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    27ee:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	9f ef       	ldi	r25, 0xFF	; 255
    27f6:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    27fa:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	80 93 30 45 	sts	0x4530, r24	; 0x804530 <g_event_commenced>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 2f 45 	sts	0x452F, r24	; 0x80452f <g_event_enabled>
    280a:	8d ef       	ldi	r24, 0xFD	; 253
    280c:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    2810:	3e c0       	rjmp	.+124    	; 0x288e <_Z17handleLinkBusMsgsv+0x42c>
    2812:	87 ef       	ldi	r24, 0xF7	; 247
    2814:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    2818:	3a c0       	rjmp	.+116    	; 0x288e <_Z17handleLinkBusMsgsv+0x42c>
    281a:	8b 89       	ldd	r24, Y+19	; 0x13
    281c:	82 33       	cpi	r24, 0x32	; 50
    281e:	b9 f5       	brne	.+110    	; 0x288e <_Z17handleLinkBusMsgsv+0x42c>
    2820:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2824:	8e 30       	cpi	r24, 0x0E	; 14
    2826:	20 f4       	brcc	.+8      	; 0x2830 <_Z17handleLinkBusMsgsv+0x3ce>
    2828:	8d ec       	ldi	r24, 0xCD	; 205
    282a:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    282e:	2f c0       	rjmp	.+94     	; 0x288e <_Z17handleLinkBusMsgsv+0x42c>
    2830:	1d a6       	std	Y+45, r1	; 0x2d
    2832:	ce 01       	movw	r24, r28
    2834:	8d 96       	adiw	r24, 0x2d	; 45
    2836:	0e 94 a7 19 	call	0x334e	; 0x334e <_Z11launchEventP2SC>
    283a:	80 93 65 45 	sts	0x4565, r24	; 0x804565 <_ZZ17handleLinkBusMsgsvE2ec>
    283e:	80 91 33 45 	lds	r24, 0x4533	; 0x804533 <_ZL13g_go_to_sleep>
    2842:	88 23       	and	r24, r24
    2844:	31 f0       	breq	.+12     	; 0x2852 <_Z17handleLinkBusMsgsv+0x3f0>
    2846:	80 91 f8 44 	lds	r24, 0x44F8	; 0x8044f8 <_ZL11g_sleepType>
    284a:	88 23       	and	r24, r24
    284c:	11 f0       	breq	.+4      	; 0x2852 <_Z17handleLinkBusMsgsv+0x3f0>
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <_Z17handleLinkBusMsgsv+0x3f2>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	88 23       	and	r24, r24
    2856:	29 f0       	breq	.+10     	; 0x2862 <_Z17handleLinkBusMsgsv+0x400>
    2858:	83 e0       	ldi	r24, 0x03	; 3
    285a:	80 93 f8 44 	sts	0x44F8, r24	; 0x8044f8 <_ZL11g_sleepType>
    285e:	10 92 33 45 	sts	0x4533, r1	; 0x804533 <_ZL13g_go_to_sleep>
    2862:	8c e3       	ldi	r24, 0x3C	; 60
    2864:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2868:	80 91 65 45 	lds	r24, 0x4565	; 0x804565 <_ZZ17handleLinkBusMsgsvE2ec>
    286c:	88 23       	and	r24, r24
    286e:	79 f4       	brne	.+30     	; 0x288e <_Z17handleLinkBusMsgsv+0x42c>
    2870:	83 e4       	ldi	r24, 0x43	; 67
    2872:	95 e4       	ldi	r25, 0x45	; 69
    2874:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN13EepromManager13saveAllEEPROMEv>
    2878:	0a c0       	rjmp	.+20     	; 0x288e <_Z17handleLinkBusMsgsv+0x42c>
    287a:	8b 89       	ldd	r24, Y+19	; 0x13
    287c:	80 33       	cpi	r24, 0x30	; 48
    287e:	09 f0       	breq	.+2      	; 0x2882 <_Z17handleLinkBusMsgsv+0x420>
    2880:	74 c4       	rjmp	.+2280   	; 0x316a <_Z17handleLinkBusMsgsv+0xd08>
    2882:	10 92 64 45 	sts	0x4564, r1	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2886:	8c ee       	ldi	r24, 0xEC	; 236
    2888:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    288c:	6e c4       	rjmp	.+2268   	; 0x316a <_Z17handleLinkBusMsgsv+0xd08>
    288e:	00 00       	nop
    2890:	6c c4       	rjmp	.+2264   	; 0x316a <_Z17handleLinkBusMsgsv+0xd08>
    2892:	1a 82       	std	Y+2, r1	; 0x02
    2894:	1b 82       	std	Y+3, r1	; 0x03
    2896:	1c 82       	std	Y+4, r1	; 0x04
    2898:	1d 82       	std	Y+5, r1	; 0x05
    289a:	8c 85       	ldd	r24, Y+12	; 0x0c
    289c:	9d 85       	ldd	r25, Y+13	; 0x0d
    289e:	fc 01       	movw	r30, r24
    28a0:	83 81       	ldd	r24, Z+3	; 0x03
    28a2:	83 35       	cpi	r24, 0x53	; 83
    28a4:	c1 f5       	brne	.+112    	; 0x2916 <_Z17handleLinkBusMsgsv+0x4b4>
    28a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    28a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    28aa:	fc 01       	movw	r30, r24
    28ac:	80 8d       	ldd	r24, Z+24	; 0x18
    28ae:	88 23       	and	r24, r24
    28b0:	59 f0       	breq	.+22     	; 0x28c8 <_Z17handleLinkBusMsgsv+0x466>
    28b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    28b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    28b6:	48 96       	adiw	r24, 0x18	; 24
    28b8:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	9b 83       	std	Y+3, r25	; 0x03
    28c4:	ac 83       	std	Y+4, r26	; 0x04
    28c6:	bd 83       	std	Y+5, r27	; 0x05
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	ac 81       	ldd	r26, Y+4	; 0x04
    28ce:	bd 81       	ldd	r27, Y+5	; 0x05
    28d0:	89 2b       	or	r24, r25
    28d2:	8a 2b       	or	r24, r26
    28d4:	8b 2b       	or	r24, r27
    28d6:	09 f4       	brne	.+2      	; 0x28da <_Z17handleLinkBusMsgsv+0x478>
    28d8:	4a c4       	rjmp	.+2196   	; 0x316e <_Z17handleLinkBusMsgsv+0xd0c>
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	9b 81       	ldd	r25, Y+3	; 0x03
    28de:	ac 81       	ldd	r26, Y+4	; 0x04
    28e0:	bd 81       	ldd	r27, Y+5	; 0x05
    28e2:	80 93 27 45 	sts	0x4527, r24	; 0x804527 <g_event_start_time>
    28e6:	90 93 28 45 	sts	0x4528, r25	; 0x804528 <g_event_start_time+0x1>
    28ea:	a0 93 29 45 	sts	0x4529, r26	; 0x804529 <g_event_start_time+0x2>
    28ee:	b0 93 2a 45 	sts	0x452A, r27	; 0x80452a <g_event_start_time+0x3>
    28f2:	f8 94       	cli
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 0b 23 	call	0x4616	; 0x4616 <ds3231_get_epoch>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_system_time>
    2908:	78 94       	sei
    290a:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2914:	2c c4       	rjmp	.+2136   	; 0x316e <_Z17handleLinkBusMsgsv+0xd0c>
    2916:	8c 85       	ldd	r24, Y+12	; 0x0c
    2918:	9d 85       	ldd	r25, Y+13	; 0x0d
    291a:	fc 01       	movw	r30, r24
    291c:	83 81       	ldd	r24, Z+3	; 0x03
    291e:	86 34       	cpi	r24, 0x46	; 70
    2920:	09 f0       	breq	.+2      	; 0x2924 <_Z17handleLinkBusMsgsv+0x4c2>
    2922:	25 c4       	rjmp	.+2122   	; 0x316e <_Z17handleLinkBusMsgsv+0xd0c>
    2924:	8c 85       	ldd	r24, Y+12	; 0x0c
    2926:	9d 85       	ldd	r25, Y+13	; 0x0d
    2928:	fc 01       	movw	r30, r24
    292a:	80 8d       	ldd	r24, Z+24	; 0x18
    292c:	88 23       	and	r24, r24
    292e:	59 f0       	breq	.+22     	; 0x2946 <_Z17handleLinkBusMsgsv+0x4e4>
    2930:	8c 85       	ldd	r24, Y+12	; 0x0c
    2932:	9d 85       	ldd	r25, Y+13	; 0x0d
    2934:	48 96       	adiw	r24, 0x18	; 24
    2936:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	8a 83       	std	Y+2, r24	; 0x02
    2940:	9b 83       	std	Y+3, r25	; 0x03
    2942:	ac 83       	std	Y+4, r26	; 0x04
    2944:	bd 83       	std	Y+5, r27	; 0x05
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	9b 81       	ldd	r25, Y+3	; 0x03
    294a:	ac 81       	ldd	r26, Y+4	; 0x04
    294c:	bd 81       	ldd	r27, Y+5	; 0x05
    294e:	89 2b       	or	r24, r25
    2950:	8a 2b       	or	r24, r26
    2952:	8b 2b       	or	r24, r27
    2954:	09 f4       	brne	.+2      	; 0x2958 <_Z17handleLinkBusMsgsv+0x4f6>
    2956:	0b c4       	rjmp	.+2070   	; 0x316e <_Z17handleLinkBusMsgsv+0xd0c>
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	9b 81       	ldd	r25, Y+3	; 0x03
    295c:	ac 81       	ldd	r26, Y+4	; 0x04
    295e:	bd 81       	ldd	r27, Y+5	; 0x05
    2960:	80 93 2b 45 	sts	0x452B, r24	; 0x80452b <g_event_finish_time>
    2964:	90 93 2c 45 	sts	0x452C, r25	; 0x80452c <g_event_finish_time+0x1>
    2968:	a0 93 2d 45 	sts	0x452D, r26	; 0x80452d <g_event_finish_time+0x2>
    296c:	b0 93 2e 45 	sts	0x452E, r27	; 0x80452e <g_event_finish_time+0x3>
    2970:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2974:	8f 5f       	subi	r24, 0xFF	; 255
    2976:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    297a:	f9 c3       	rjmp	.+2034   	; 0x316e <_Z17handleLinkBusMsgsv+0xd0c>
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    2982:	8c 85       	ldd	r24, Y+12	; 0x0c
    2984:	9d 85       	ldd	r25, Y+13	; 0x0d
    2986:	fc 01       	movw	r30, r24
    2988:	80 81       	ld	r24, Z
    298a:	81 30       	cpi	r24, 0x01	; 1
    298c:	09 f0       	breq	.+2      	; 0x2990 <_Z17handleLinkBusMsgsv+0x52e>
    298e:	4b c0       	rjmp	.+150    	; 0x2a26 <_Z17handleLinkBusMsgsv+0x5c4>
    2990:	8c 85       	ldd	r24, Y+12	; 0x0c
    2992:	9d 85       	ldd	r25, Y+13	; 0x0d
    2994:	fc 01       	movw	r30, r24
    2996:	83 81       	ldd	r24, Z+3	; 0x03
    2998:	88 23       	and	r24, r24
    299a:	d1 f0       	breq	.+52     	; 0x29d0 <_Z17handleLinkBusMsgsv+0x56e>
    299c:	8c 85       	ldd	r24, Y+12	; 0x0c
    299e:	9d 85       	ldd	r25, Y+13	; 0x0d
    29a0:	03 96       	adiw	r24, 0x03	; 3
    29a2:	44 e1       	ldi	r20, 0x14	; 20
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	bc 01       	movw	r22, r24
    29a8:	85 ed       	ldi	r24, 0xD5	; 213
    29aa:	94 e4       	ldi	r25, 0x44	; 68
    29ac:	0e 94 b9 40 	call	0x8172	; 0x8172 <strncpy>
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	85 ed       	ldi	r24, 0xD5	; 213
    29b4:	94 e4       	ldi	r25, 0x44	; 68
    29b6:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <ds3231_set_date_time>
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 94 0b 23 	call	0x4616	; 0x4616 <ds3231_get_epoch>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_system_time>
    29ce:	d1 c3       	rjmp	.+1954   	; 0x3172 <_Z17handleLinkBusMsgsv+0xd10>
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	2b 2f       	mov	r18, r27
    29de:	2f 93       	push	r18
    29e0:	2a 2f       	mov	r18, r26
    29e2:	2f 93       	push	r18
    29e4:	29 2f       	mov	r18, r25
    29e6:	2f 93       	push	r18
    29e8:	8f 93       	push	r24
    29ea:	89 ed       	ldi	r24, 0xD9	; 217
    29ec:	92 e4       	ldi	r25, 0x42	; 66
    29ee:	89 2f       	mov	r24, r25
    29f0:	8f 93       	push	r24
    29f2:	89 ed       	ldi	r24, 0xD9	; 217
    29f4:	92 e4       	ldi	r25, 0x42	; 66
    29f6:	8f 93       	push	r24
    29f8:	85 ed       	ldi	r24, 0xD5	; 213
    29fa:	94 e4       	ldi	r25, 0x44	; 68
    29fc:	89 2f       	mov	r24, r25
    29fe:	8f 93       	push	r24
    2a00:	85 ed       	ldi	r24, 0xD5	; 213
    2a02:	94 e4       	ldi	r25, 0x44	; 68
    2a04:	8f 93       	push	r24
    2a06:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    2a0a:	2d b7       	in	r18, 0x3d	; 61
    2a0c:	3e b7       	in	r19, 0x3e	; 62
    2a0e:	28 5f       	subi	r18, 0xF8	; 248
    2a10:	3f 4f       	sbci	r19, 0xFF	; 255
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	45 ed       	ldi	r20, 0xD5	; 213
    2a18:	54 e4       	ldi	r21, 0x44	; 68
    2a1a:	6d ed       	ldi	r22, 0xDD	; 221
    2a1c:	72 e4       	ldi	r23, 0x42	; 66
    2a1e:	83 e0       	ldi	r24, 0x03	; 3
    2a20:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_Z11lb_send_msg13LBMessageTypePKcPc>
    2a24:	a6 c3       	rjmp	.+1868   	; 0x3172 <_Z17handleLinkBusMsgsv+0xd10>
    2a26:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a28:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	80 81       	ld	r24, Z
    2a2e:	82 30       	cpi	r24, 0x02	; 2
    2a30:	09 f0       	breq	.+2      	; 0x2a34 <_Z17handleLinkBusMsgsv+0x5d2>
    2a32:	9f c3       	rjmp	.+1854   	; 0x3172 <_Z17handleLinkBusMsgsv+0xd10>
    2a34:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a36:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a38:	fc 01       	movw	r30, r24
    2a3a:	83 81       	ldd	r24, Z+3	; 0x03
    2a3c:	88 35       	cpi	r24, 0x58	; 88
    2a3e:	c9 f5       	brne	.+114    	; 0x2ab2 <_Z17handleLinkBusMsgsv+0x650>
    2a40:	1c 8a       	std	Y+20, r1	; 0x14
    2a42:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a44:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a46:	fc 01       	movw	r30, r24
    2a48:	80 8d       	ldd	r24, Z+24	; 0x18
    2a4a:	88 23       	and	r24, r24
    2a4c:	51 f0       	breq	.+20     	; 0x2a62 <_Z17handleLinkBusMsgsv+0x600>
    2a4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a50:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a52:	48 96       	adiw	r24, 0x18	; 24
    2a54:	0e 94 51 40 	call	0x80a2	; 0x80a2 <atoi>
    2a58:	8c 8b       	std	Y+20, r24	; 0x14
    2a5a:	8c 89       	ldd	r24, Y+20	; 0x14
    2a5c:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <ds3231_set_aging>
    2a60:	88 c3       	rjmp	.+1808   	; 0x3172 <_Z17handleLinkBusMsgsv+0xd10>
    2a62:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <ds3231_get_aging>
    2a66:	8c 8b       	std	Y+20, r24	; 0x14
    2a68:	8c 89       	ldd	r24, Y+20	; 0x14
    2a6a:	08 2e       	mov	r0, r24
    2a6c:	00 0c       	add	r0, r0
    2a6e:	99 0b       	sbc	r25, r25
    2a70:	29 2f       	mov	r18, r25
    2a72:	2f 93       	push	r18
    2a74:	8f 93       	push	r24
    2a76:	8a ee       	ldi	r24, 0xEA	; 234
    2a78:	92 e4       	ldi	r25, 0x42	; 66
    2a7a:	89 2f       	mov	r24, r25
    2a7c:	8f 93       	push	r24
    2a7e:	8a ee       	ldi	r24, 0xEA	; 234
    2a80:	92 e4       	ldi	r25, 0x42	; 66
    2a82:	8f 93       	push	r24
    2a84:	85 ed       	ldi	r24, 0xD5	; 213
    2a86:	94 e4       	ldi	r25, 0x44	; 68
    2a88:	89 2f       	mov	r24, r25
    2a8a:	8f 93       	push	r24
    2a8c:	85 ed       	ldi	r24, 0xD5	; 213
    2a8e:	94 e4       	ldi	r25, 0x44	; 68
    2a90:	8f 93       	push	r24
    2a92:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	45 ed       	ldi	r20, 0xD5	; 213
    2aa4:	54 e4       	ldi	r21, 0x44	; 68
    2aa6:	6d ed       	ldi	r22, 0xDD	; 221
    2aa8:	72 e4       	ldi	r23, 0x42	; 66
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_Z11lb_send_msg13LBMessageTypePKcPc>
    2ab0:	60 c3       	rjmp	.+1728   	; 0x3172 <_Z17handleLinkBusMsgsv+0xd10>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	0e 94 0b 23 	call	0x4616	; 0x4616 <ds3231_get_epoch>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8d 8b       	std	Y+21, r24	; 0x15
    2ac0:	9e 8b       	std	Y+22, r25	; 0x16
    2ac2:	af 8b       	std	Y+23, r26	; 0x17
    2ac4:	b8 8f       	std	Y+24, r27	; 0x18
    2ac6:	8d 89       	ldd	r24, Y+21	; 0x15
    2ac8:	9e 89       	ldd	r25, Y+22	; 0x16
    2aca:	af 89       	ldd	r26, Y+23	; 0x17
    2acc:	b8 8d       	ldd	r27, Y+24	; 0x18
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_system_time>
    2ad6:	80 91 66 45 	lds	r24, 0x4566	; 0x804566 <_ZZ17handleLinkBusMsgsvE8lastTime>
    2ada:	90 91 67 45 	lds	r25, 0x4567	; 0x804567 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    2ade:	a0 91 68 45 	lds	r26, 0x4568	; 0x804568 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    2ae2:	b0 91 69 45 	lds	r27, 0x4569	; 0x804569 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    2ae6:	2d 89       	ldd	r18, Y+21	; 0x15
    2ae8:	3e 89       	ldd	r19, Y+22	; 0x16
    2aea:	4f 89       	ldd	r20, Y+23	; 0x17
    2aec:	58 8d       	ldd	r21, Y+24	; 0x18
    2aee:	28 17       	cp	r18, r24
    2af0:	39 07       	cpc	r19, r25
    2af2:	4a 07       	cpc	r20, r26
    2af4:	5b 07       	cpc	r21, r27
    2af6:	09 f4       	brne	.+2      	; 0x2afa <_Z17handleLinkBusMsgsv+0x698>
    2af8:	3c c3       	rjmp	.+1656   	; 0x3172 <_Z17handleLinkBusMsgsv+0xd10>
    2afa:	88 8d       	ldd	r24, Y+24	; 0x18
    2afc:	8f 93       	push	r24
    2afe:	8f 89       	ldd	r24, Y+23	; 0x17
    2b00:	8f 93       	push	r24
    2b02:	8e 89       	ldd	r24, Y+22	; 0x16
    2b04:	8f 93       	push	r24
    2b06:	8d 89       	ldd	r24, Y+21	; 0x15
    2b08:	8f 93       	push	r24
    2b0a:	89 ed       	ldi	r24, 0xD9	; 217
    2b0c:	92 e4       	ldi	r25, 0x42	; 66
    2b0e:	89 2f       	mov	r24, r25
    2b10:	8f 93       	push	r24
    2b12:	89 ed       	ldi	r24, 0xD9	; 217
    2b14:	92 e4       	ldi	r25, 0x42	; 66
    2b16:	8f 93       	push	r24
    2b18:	85 ed       	ldi	r24, 0xD5	; 213
    2b1a:	94 e4       	ldi	r25, 0x44	; 68
    2b1c:	89 2f       	mov	r24, r25
    2b1e:	8f 93       	push	r24
    2b20:	85 ed       	ldi	r24, 0xD5	; 213
    2b22:	94 e4       	ldi	r25, 0x44	; 68
    2b24:	8f 93       	push	r24
    2b26:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    2b2a:	2d b7       	in	r18, 0x3d	; 61
    2b2c:	3e b7       	in	r19, 0x3e	; 62
    2b2e:	28 5f       	subi	r18, 0xF8	; 248
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	45 ed       	ldi	r20, 0xD5	; 213
    2b38:	54 e4       	ldi	r21, 0x44	; 68
    2b3a:	6d ed       	ldi	r22, 0xDD	; 221
    2b3c:	72 e4       	ldi	r23, 0x42	; 66
    2b3e:	83 e0       	ldi	r24, 0x03	; 3
    2b40:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_Z11lb_send_msg13LBMessageTypePKcPc>
    2b44:	8d 89       	ldd	r24, Y+21	; 0x15
    2b46:	9e 89       	ldd	r25, Y+22	; 0x16
    2b48:	af 89       	ldd	r26, Y+23	; 0x17
    2b4a:	b8 8d       	ldd	r27, Y+24	; 0x18
    2b4c:	80 93 66 45 	sts	0x4566, r24	; 0x804566 <_ZZ17handleLinkBusMsgsvE8lastTime>
    2b50:	90 93 67 45 	sts	0x4567, r25	; 0x804567 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    2b54:	a0 93 68 45 	sts	0x4568, r26	; 0x804568 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    2b58:	b0 93 69 45 	sts	0x4569, r27	; 0x804569 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    2b5c:	0a c3       	rjmp	.+1556   	; 0x3172 <_Z17handleLinkBusMsgsv+0xd10>
    2b5e:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2b62:	8f 5f       	subi	r24, 0xFF	; 255
    2b64:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2b68:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	83 81       	ldd	r24, Z+3	; 0x03
    2b70:	88 23       	and	r24, r24
    2b72:	81 f1       	breq	.+96     	; 0x2bd4 <_Z17handleLinkBusMsgsv+0x772>
    2b74:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b76:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b78:	03 96       	adiw	r24, 0x03	; 3
    2b7a:	44 e1       	ldi	r20, 0x14	; 20
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	bc 01       	movw	r22, r24
    2b80:	8e e0       	ldi	r24, 0x0E	; 14
    2b82:	95 e4       	ldi	r25, 0x45	; 69
    2b84:	0e 94 b9 40 	call	0x8172	; 0x8172 <strncpy>
    2b88:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    2b8c:	88 23       	and	r24, r24
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <_Z17handleLinkBusMsgsv+0x730>
    2b90:	f2 c2       	rjmp	.+1508   	; 0x3176 <_Z17handleLinkBusMsgsv+0xd14>
    2b92:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2b96:	88 2f       	mov	r24, r24
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	8e e0       	ldi	r24, 0x0E	; 14
    2b9e:	95 e4       	ldi	r25, 0x45	; 69
    2ba0:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <_Z26timeRequiredToSendStrAtWPMPcj>
    2ba4:	8c 50       	subi	r24, 0x0C	; 12
    2ba6:	9e 4f       	sbci	r25, 0xFE	; 254
    2ba8:	96 95       	lsr	r25
    2baa:	87 95       	ror	r24
    2bac:	96 95       	lsr	r25
    2bae:	87 95       	ror	r24
    2bb0:	96 95       	lsr	r25
    2bb2:	87 95       	ror	r24
    2bb4:	9c 01       	movw	r18, r24
    2bb6:	a5 ec       	ldi	r26, 0xC5	; 197
    2bb8:	b0 e2       	ldi	r27, 0x20	; 32
    2bba:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__umulhisi3>
    2bbe:	92 95       	swap	r25
    2bc0:	82 95       	swap	r24
    2bc2:	8f 70       	andi	r24, 0x0F	; 15
    2bc4:	89 27       	eor	r24, r25
    2bc6:	9f 70       	andi	r25, 0x0F	; 15
    2bc8:	89 27       	eor	r24, r25
    2bca:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <g_time_needed_for_ID>
    2bce:	90 93 24 45 	sts	0x4524, r25	; 0x804524 <g_time_needed_for_ID+0x1>
    2bd2:	d1 c2       	rjmp	.+1442   	; 0x3176 <_Z17handleLinkBusMsgsv+0xd14>
    2bd4:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    2bd8:	88 23       	and	r24, r24
    2bda:	09 f4       	brne	.+2      	; 0x2bde <_Z17handleLinkBusMsgsv+0x77c>
    2bdc:	cc c2       	rjmp	.+1432   	; 0x3176 <_Z17handleLinkBusMsgsv+0xd14>
    2bde:	8e e0       	ldi	r24, 0x0E	; 14
    2be0:	95 e4       	ldi	r25, 0x45	; 69
    2be2:	89 2f       	mov	r24, r25
    2be4:	8f 93       	push	r24
    2be6:	8e e0       	ldi	r24, 0x0E	; 14
    2be8:	95 e4       	ldi	r25, 0x45	; 69
    2bea:	8f 93       	push	r24
    2bec:	8f ee       	ldi	r24, 0xEF	; 239
    2bee:	92 e4       	ldi	r25, 0x42	; 66
    2bf0:	89 2f       	mov	r24, r25
    2bf2:	8f 93       	push	r24
    2bf4:	8f ee       	ldi	r24, 0xEF	; 239
    2bf6:	92 e4       	ldi	r25, 0x42	; 66
    2bf8:	8f 93       	push	r24
    2bfa:	85 ed       	ldi	r24, 0xD5	; 213
    2bfc:	94 e4       	ldi	r25, 0x44	; 68
    2bfe:	89 2f       	mov	r24, r25
    2c00:	8f 93       	push	r24
    2c02:	85 ed       	ldi	r24, 0xD5	; 213
    2c04:	94 e4       	ldi	r25, 0x44	; 68
    2c06:	8f 93       	push	r24
    2c08:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	85 ed       	ldi	r24, 0xD5	; 213
    2c1a:	94 e4       	ldi	r25, 0x44	; 68
    2c1c:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_Z12lb_send_textPc>
    2c20:	19 82       	std	Y+1, r1	; 0x01
    2c22:	a9 c2       	rjmp	.+1362   	; 0x3176 <_Z17handleLinkBusMsgsv+0xd14>
    2c24:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2c28:	89 8f       	std	Y+25, r24	; 0x19
    2c2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c2e:	fc 01       	movw	r30, r24
    2c30:	83 81       	ldd	r24, Z+3	; 0x03
    2c32:	89 34       	cpi	r24, 0x49	; 73
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <_Z17handleLinkBusMsgsv+0x7d6>
    2c36:	4f c0       	rjmp	.+158    	; 0x2cd6 <_Z17handleLinkBusMsgsv+0x874>
    2c38:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	80 8d       	ldd	r24, Z+24	; 0x18
    2c40:	88 23       	and	r24, r24
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <_Z17handleLinkBusMsgsv+0x7e4>
    2c44:	9a c2       	rjmp	.+1332   	; 0x317a <_Z17handleLinkBusMsgsv+0xd18>
    2c46:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c48:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c4a:	48 96       	adiw	r24, 0x18	; 24
    2c4c:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	89 8f       	std	Y+25, r24	; 0x19
    2c56:	89 8d       	ldd	r24, Y+25	; 0x19
    2c58:	8a 8f       	std	Y+26, r24	; 0x1a
    2c5a:	85 e0       	ldi	r24, 0x05	; 5
    2c5c:	8b 8f       	std	Y+27, r24	; 0x1b
    2c5e:	84 e1       	ldi	r24, 0x14	; 20
    2c60:	8c 8f       	std	Y+28, r24	; 0x1c
    2c62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c66:	89 17       	cp	r24, r25
    2c68:	40 f0       	brcs	.+16     	; 0x2c7a <_Z17handleLinkBusMsgsv+0x818>
    2c6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c6e:	98 17       	cp	r25, r24
    2c70:	10 f4       	brcc	.+4      	; 0x2c76 <_Z17handleLinkBusMsgsv+0x814>
    2c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c74:	03 c0       	rjmp	.+6      	; 0x2c7c <_Z17handleLinkBusMsgsv+0x81a>
    2c76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c78:	01 c0       	rjmp	.+2      	; 0x2c7c <_Z17handleLinkBusMsgsv+0x81a>
    2c7a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c7c:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    2c80:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2c84:	8f 5f       	subi	r24, 0xFF	; 255
    2c86:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2c8a:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    2c8e:	88 23       	and	r24, r24
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <_Z17handleLinkBusMsgsv+0x832>
    2c92:	73 c2       	rjmp	.+1254   	; 0x317a <_Z17handleLinkBusMsgsv+0xd18>
    2c94:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2c98:	88 2f       	mov	r24, r24
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	8e e0       	ldi	r24, 0x0E	; 14
    2ca0:	95 e4       	ldi	r25, 0x45	; 69
    2ca2:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <_Z26timeRequiredToSendStrAtWPMPcj>
    2ca6:	8c 50       	subi	r24, 0x0C	; 12
    2ca8:	9e 4f       	sbci	r25, 0xFE	; 254
    2caa:	96 95       	lsr	r25
    2cac:	87 95       	ror	r24
    2cae:	96 95       	lsr	r25
    2cb0:	87 95       	ror	r24
    2cb2:	96 95       	lsr	r25
    2cb4:	87 95       	ror	r24
    2cb6:	9c 01       	movw	r18, r24
    2cb8:	a5 ec       	ldi	r26, 0xC5	; 197
    2cba:	b0 e2       	ldi	r27, 0x20	; 32
    2cbc:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__umulhisi3>
    2cc0:	92 95       	swap	r25
    2cc2:	82 95       	swap	r24
    2cc4:	8f 70       	andi	r24, 0x0F	; 15
    2cc6:	89 27       	eor	r24, r25
    2cc8:	9f 70       	andi	r25, 0x0F	; 15
    2cca:	89 27       	eor	r24, r25
    2ccc:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <g_time_needed_for_ID>
    2cd0:	90 93 24 45 	sts	0x4524, r25	; 0x804524 <g_time_needed_for_ID+0x1>
    2cd4:	52 c2       	rjmp	.+1188   	; 0x317a <_Z17handleLinkBusMsgsv+0xd18>
    2cd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cda:	fc 01       	movw	r30, r24
    2cdc:	83 81       	ldd	r24, Z+3	; 0x03
    2cde:	80 35       	cpi	r24, 0x50	; 80
    2ce0:	09 f0       	breq	.+2      	; 0x2ce4 <_Z17handleLinkBusMsgsv+0x882>
    2ce2:	4b c2       	rjmp	.+1174   	; 0x317a <_Z17handleLinkBusMsgsv+0xd18>
    2ce4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ce6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ce8:	fc 01       	movw	r30, r24
    2cea:	80 8d       	ldd	r24, Z+24	; 0x18
    2cec:	88 23       	and	r24, r24
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <_Z17handleLinkBusMsgsv+0x890>
    2cf0:	44 c2       	rjmp	.+1160   	; 0x317a <_Z17handleLinkBusMsgsv+0xd18>
    2cf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cf4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cf6:	48 96       	adiw	r24, 0x18	; 24
    2cf8:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	89 8f       	std	Y+25, r24	; 0x19
    2d02:	89 8d       	ldd	r24, Y+25	; 0x19
    2d04:	8d 8f       	std	Y+29, r24	; 0x1d
    2d06:	85 e0       	ldi	r24, 0x05	; 5
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	8e 8f       	std	Y+30, r24	; 0x1e
    2d0c:	9f 8f       	std	Y+31, r25	; 0x1f
    2d0e:	84 e1       	ldi	r24, 0x14	; 20
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	88 a3       	std	Y+32, r24	; 0x20
    2d14:	99 a3       	std	Y+33, r25	; 0x21
    2d16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	88 a1       	ldd	r24, Y+32	; 0x20
    2d1e:	99 a1       	ldd	r25, Y+33	; 0x21
    2d20:	82 17       	cp	r24, r18
    2d22:	93 07       	cpc	r25, r19
    2d24:	54 f0       	brlt	.+20     	; 0x2d3a <_Z17handleLinkBusMsgsv+0x8d8>
    2d26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d28:	88 2f       	mov	r24, r24
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2d2e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2d30:	82 17       	cp	r24, r18
    2d32:	93 07       	cpc	r25, r19
    2d34:	24 f4       	brge	.+8      	; 0x2d3e <_Z17handleLinkBusMsgsv+0x8dc>
    2d36:	c9 01       	movw	r24, r18
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <_Z17handleLinkBusMsgsv+0x8dc>
    2d3a:	88 a1       	ldd	r24, Y+32	; 0x20
    2d3c:	99 a1       	ldd	r25, Y+33	; 0x21
    2d3e:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    2d42:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2d46:	8f 5f       	subi	r24, 0xFF	; 255
    2d48:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2d4c:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2d50:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
    2d54:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2d58:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2d5c:	0e c2       	rjmp	.+1052   	; 0x317a <_Z17handleLinkBusMsgsv+0xd18>
    2d5e:	1a a2       	std	Y+34, r1	; 0x22
    2d60:	1b a2       	std	Y+35, r1	; 0x23
    2d62:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d64:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d66:	fc 01       	movw	r30, r24
    2d68:	83 81       	ldd	r24, Z+3	; 0x03
    2d6a:	80 33       	cpi	r24, 0x30	; 48
    2d6c:	e1 f4       	brne	.+56     	; 0x2da6 <_Z17handleLinkBusMsgsv+0x944>
    2d6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d70:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d72:	fc 01       	movw	r30, r24
    2d74:	80 8d       	ldd	r24, Z+24	; 0x18
    2d76:	88 23       	and	r24, r24
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <_Z17handleLinkBusMsgsv+0x91a>
    2d7a:	01 c2       	rjmp	.+1026   	; 0x317e <_Z17handleLinkBusMsgsv+0xd1c>
    2d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d80:	48 96       	adiw	r24, 0x18	; 24
    2d82:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8a a3       	std	Y+34, r24	; 0x22
    2d8c:	9b a3       	std	Y+35, r25	; 0x23
    2d8e:	8a a1       	ldd	r24, Y+34	; 0x22
    2d90:	9b a1       	ldd	r25, Y+35	; 0x23
    2d92:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    2d96:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    2d9a:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2da4:	ec c1       	rjmp	.+984    	; 0x317e <_Z17handleLinkBusMsgsv+0xd1c>
    2da6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2da8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2daa:	fc 01       	movw	r30, r24
    2dac:	83 81       	ldd	r24, Z+3	; 0x03
    2dae:	81 33       	cpi	r24, 0x31	; 49
    2db0:	e1 f4       	brne	.+56     	; 0x2dea <_Z17handleLinkBusMsgsv+0x988>
    2db2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2db4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2db6:	fc 01       	movw	r30, r24
    2db8:	80 8d       	ldd	r24, Z+24	; 0x18
    2dba:	88 23       	and	r24, r24
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <_Z17handleLinkBusMsgsv+0x95e>
    2dbe:	df c1       	rjmp	.+958    	; 0x317e <_Z17handleLinkBusMsgsv+0xd1c>
    2dc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dc4:	48 96       	adiw	r24, 0x18	; 24
    2dc6:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	8a a3       	std	Y+34, r24	; 0x22
    2dd0:	9b a3       	std	Y+35, r25	; 0x23
    2dd2:	8a a1       	ldd	r24, Y+34	; 0x22
    2dd4:	9b a1       	ldd	r25, Y+35	; 0x23
    2dd6:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    2dda:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    2dde:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2de2:	8f 5f       	subi	r24, 0xFF	; 255
    2de4:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2de8:	ca c1       	rjmp	.+916    	; 0x317e <_Z17handleLinkBusMsgsv+0xd1c>
    2dea:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dec:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dee:	fc 01       	movw	r30, r24
    2df0:	83 81       	ldd	r24, Z+3	; 0x03
    2df2:	89 34       	cpi	r24, 0x49	; 73
    2df4:	e1 f4       	brne	.+56     	; 0x2e2e <_Z17handleLinkBusMsgsv+0x9cc>
    2df6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2df8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	80 8d       	ldd	r24, Z+24	; 0x18
    2dfe:	88 23       	and	r24, r24
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <_Z17handleLinkBusMsgsv+0x9a2>
    2e02:	bd c1       	rjmp	.+890    	; 0x317e <_Z17handleLinkBusMsgsv+0xd1c>
    2e04:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e06:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e08:	48 96       	adiw	r24, 0x18	; 24
    2e0a:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	8a a3       	std	Y+34, r24	; 0x22
    2e14:	9b a3       	std	Y+35, r25	; 0x23
    2e16:	8a a1       	ldd	r24, Y+34	; 0x22
    2e18:	9b a1       	ldd	r25, Y+35	; 0x23
    2e1a:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <g_ID_period_seconds>
    2e1e:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <g_ID_period_seconds+0x1>
    2e22:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e26:	8f 5f       	subi	r24, 0xFF	; 255
    2e28:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e2c:	a8 c1       	rjmp	.+848    	; 0x317e <_Z17handleLinkBusMsgsv+0xd1c>
    2e2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e30:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e32:	fc 01       	movw	r30, r24
    2e34:	83 81       	ldd	r24, Z+3	; 0x03
    2e36:	84 34       	cpi	r24, 0x44	; 68
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <_Z17handleLinkBusMsgsv+0x9da>
    2e3a:	a1 c1       	rjmp	.+834    	; 0x317e <_Z17handleLinkBusMsgsv+0xd1c>
    2e3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e40:	fc 01       	movw	r30, r24
    2e42:	80 8d       	ldd	r24, Z+24	; 0x18
    2e44:	88 23       	and	r24, r24
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <_Z17handleLinkBusMsgsv+0x9e8>
    2e48:	9a c1       	rjmp	.+820    	; 0x317e <_Z17handleLinkBusMsgsv+0xd1c>
    2e4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e4c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e4e:	48 96       	adiw	r24, 0x18	; 24
    2e50:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	8a a3       	std	Y+34, r24	; 0x22
    2e5a:	9b a3       	std	Y+35, r25	; 0x23
    2e5c:	8a a1       	ldd	r24, Y+34	; 0x22
    2e5e:	9b a1       	ldd	r25, Y+35	; 0x23
    2e60:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <g_intra_cycle_delay_time>
    2e64:	90 93 26 45 	sts	0x4526, r25	; 0x804526 <g_intra_cycle_delay_time+0x1>
    2e68:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e6c:	8f 5f       	subi	r24, 0xFF	; 255
    2e6e:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e72:	85 c1       	rjmp	.+778    	; 0x317e <_Z17handleLinkBusMsgsv+0xd1c>
    2e74:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e76:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e78:	fc 01       	movw	r30, r24
    2e7a:	83 81       	ldd	r24, Z+3	; 0x03
    2e7c:	88 23       	and	r24, r24
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <_Z17handleLinkBusMsgsv+0xa20>
    2e80:	80 c1       	rjmp	.+768    	; 0x3182 <_Z17handleLinkBusMsgsv+0xd20>
    2e82:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e84:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e86:	03 96       	adiw	r24, 0x03	; 3
    2e88:	44 e1       	ldi	r20, 0x14	; 20
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	bc 01       	movw	r22, r24
    2e8e:	89 ef       	ldi	r24, 0xF9	; 249
    2e90:	94 e4       	ldi	r25, 0x44	; 68
    2e92:	0e 94 b9 40 	call	0x8172	; 0x8172 <strncpy>
    2e96:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e9a:	8f 5f       	subi	r24, 0xFF	; 255
    2e9c:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2ea0:	70 c1       	rjmp	.+736    	; 0x3182 <_Z17handleLinkBusMsgsv+0xd20>
    2ea2:	1e 82       	std	Y+6, r1	; 0x06
    2ea4:	1f 82       	std	Y+7, r1	; 0x07
    2ea6:	18 86       	std	Y+8, r1	; 0x08
    2ea8:	19 86       	std	Y+9, r1	; 0x09
    2eaa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eac:	9d 85       	ldd	r25, Y+13	; 0x0d
    2eae:	fc 01       	movw	r30, r24
    2eb0:	83 81       	ldd	r24, Z+3	; 0x03
    2eb2:	88 23       	and	r24, r24
    2eb4:	a9 f1       	breq	.+106    	; 0x2f20 <_Z17handleLinkBusMsgsv+0xabe>
    2eb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eb8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2eba:	03 96       	adiw	r24, 0x03	; 3
    2ebc:	0e 94 6f 40 	call	0x80de	; 0x80de <atol>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	80 93 6a 45 	sts	0x456A, r24	; 0x80456a <_ZZ17handleLinkBusMsgsvE1f>
    2ec8:	90 93 6b 45 	sts	0x456B, r25	; 0x80456b <_ZZ17handleLinkBusMsgsvE1f+0x1>
    2ecc:	a0 93 6c 45 	sts	0x456C, r26	; 0x80456c <_ZZ17handleLinkBusMsgsvE1f+0x2>
    2ed0:	b0 93 6d 45 	sts	0x456D, r27	; 0x80456d <_ZZ17handleLinkBusMsgsvE1f+0x3>
    2ed4:	80 91 6a 45 	lds	r24, 0x456A	; 0x80456a <_ZZ17handleLinkBusMsgsvE1f>
    2ed8:	90 91 6b 45 	lds	r25, 0x456B	; 0x80456b <_ZZ17handleLinkBusMsgsvE1f+0x1>
    2edc:	a0 91 6c 45 	lds	r26, 0x456C	; 0x80456c <_ZZ17handleLinkBusMsgsvE1f+0x2>
    2ee0:	b0 91 6d 45 	lds	r27, 0x456D	; 0x80456d <_ZZ17handleLinkBusMsgsvE1f+0x3>
    2ee4:	8e a7       	std	Y+46, r24	; 0x2e
    2ee6:	9f a7       	std	Y+47, r25	; 0x2f
    2ee8:	a8 ab       	std	Y+48, r26	; 0x30
    2eea:	b9 ab       	std	Y+49, r27	; 0x31
    2eec:	ce 01       	movw	r24, r28
    2eee:	8e 96       	adiw	r24, 0x2e	; 46
    2ef0:	61 e0       	ldi	r22, 0x01	; 1
    2ef2:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <_Z14txSetFrequencyPmh>
    2ef6:	98 2f       	mov	r25, r24
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	99 23       	and	r25, r25
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <_Z17handleLinkBusMsgsv+0xa9e>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	88 23       	and	r24, r24
    2f02:	b1 f0       	breq	.+44     	; 0x2f30 <_Z17handleLinkBusMsgsv+0xace>
    2f04:	8e a5       	ldd	r24, Y+46	; 0x2e
    2f06:	9f a5       	ldd	r25, Y+47	; 0x2f
    2f08:	a8 a9       	ldd	r26, Y+48	; 0x30
    2f0a:	b9 a9       	ldd	r27, Y+49	; 0x31
    2f0c:	8e 83       	std	Y+6, r24	; 0x06
    2f0e:	9f 83       	std	Y+7, r25	; 0x07
    2f10:	a8 87       	std	Y+8, r26	; 0x08
    2f12:	b9 87       	std	Y+9, r27	; 0x09
    2f14:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2f18:	8f 5f       	subi	r24, 0xFF	; 255
    2f1a:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2f1e:	08 c0       	rjmp	.+16     	; 0x2f30 <_Z17handleLinkBusMsgsv+0xace>
    2f20:	0e 94 06 3a 	call	0x740c	; 0x740c <_Z14txGetFrequencyv>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	8e 83       	std	Y+6, r24	; 0x06
    2f2a:	9f 83       	std	Y+7, r25	; 0x07
    2f2c:	a8 87       	std	Y+8, r26	; 0x08
    2f2e:	b9 87       	std	Y+9, r27	; 0x09
    2f30:	8e 81       	ldd	r24, Y+6	; 0x06
    2f32:	9f 81       	ldd	r25, Y+7	; 0x07
    2f34:	a8 85       	ldd	r26, Y+8	; 0x08
    2f36:	b9 85       	ldd	r27, Y+9	; 0x09
    2f38:	89 2b       	or	r24, r25
    2f3a:	8a 2b       	or	r24, r26
    2f3c:	8b 2b       	or	r24, r27
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <_Z17handleLinkBusMsgsv+0xae0>
    2f40:	22 c1       	rjmp	.+580    	; 0x3186 <_Z17handleLinkBusMsgsv+0xd24>
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	8f 93       	push	r24
    2f46:	88 85       	ldd	r24, Y+8	; 0x08
    2f48:	8f 93       	push	r24
    2f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f4c:	8f 93       	push	r24
    2f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f50:	8f 93       	push	r24
    2f52:	88 ef       	ldi	r24, 0xF8	; 248
    2f54:	92 e4       	ldi	r25, 0x42	; 66
    2f56:	89 2f       	mov	r24, r25
    2f58:	8f 93       	push	r24
    2f5a:	88 ef       	ldi	r24, 0xF8	; 248
    2f5c:	92 e4       	ldi	r25, 0x42	; 66
    2f5e:	8f 93       	push	r24
    2f60:	85 ed       	ldi	r24, 0xD5	; 213
    2f62:	94 e4       	ldi	r25, 0x44	; 68
    2f64:	89 2f       	mov	r24, r25
    2f66:	8f 93       	push	r24
    2f68:	85 ed       	ldi	r24, 0xD5	; 213
    2f6a:	94 e4       	ldi	r25, 0x44	; 68
    2f6c:	8f 93       	push	r24
    2f6e:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    2f72:	2d b7       	in	r18, 0x3d	; 61
    2f74:	3e b7       	in	r19, 0x3e	; 62
    2f76:	28 5f       	subi	r18, 0xF8	; 248
    2f78:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	45 ed       	ldi	r20, 0xD5	; 213
    2f80:	54 e4       	ldi	r21, 0x44	; 68
    2f82:	6d ef       	ldi	r22, 0xFD	; 253
    2f84:	72 e4       	ldi	r23, 0x42	; 66
    2f86:	83 e0       	ldi	r24, 0x03	; 3
    2f88:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_Z11lb_send_msg13LBMessageTypePKcPc>
    2f8c:	fc c0       	rjmp	.+504    	; 0x3186 <_Z17handleLinkBusMsgsv+0xd24>
    2f8e:	80 91 39 45 	lds	r24, 0x4539	; 0x804539 <_ZL22g_lastConversionResult>
    2f92:	90 91 3a 45 	lds	r25, 0x453A	; 0x80453a <_ZL22g_lastConversionResult+0x1>
    2f96:	21 e0       	ldi	r18, 0x01	; 1
    2f98:	8d 38       	cpi	r24, 0x8D	; 141
    2f9a:	92 40       	sbci	r25, 0x02	; 2
    2f9c:	08 f4       	brcc	.+2      	; 0x2fa0 <_Z17handleLinkBusMsgsv+0xb3e>
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	22 23       	and	r18, r18
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <_Z17handleLinkBusMsgsv+0xb44>
    2fa4:	7c c0       	rjmp	.+248    	; 0x309e <_Z17handleLinkBusMsgsv+0xc3c>
    2fa6:	80 91 39 45 	lds	r24, 0x4539	; 0x804539 <_ZL22g_lastConversionResult>
    2faa:	90 91 3a 45 	lds	r25, 0x453A	; 0x80453a <_ZL22g_lastConversionResult+0x1>
    2fae:	cc 01       	movw	r24, r24
    2fb0:	a0 e0       	ldi	r26, 0x00	; 0
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	9c 01       	movw	r18, r24
    2fb6:	ad 01       	movw	r20, r26
    2fb8:	60 ea       	ldi	r22, 0xA0	; 160
    2fba:	78 e6       	ldi	r23, 0x68	; 104
    2fbc:	86 e0       	ldi	r24, 0x06	; 6
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <__mulsi3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	7c 01       	movw	r14, r24
    2fca:	8d 01       	movw	r16, r26
    2fcc:	ed e7       	ldi	r30, 0x7D	; 125
    2fce:	fe 1a       	sub	r15, r30
    2fd0:	0c 40       	sbci	r16, 0x0C	; 12
    2fd2:	1e 4f       	sbci	r17, 0xFE	; 254
    2fd4:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    2fd8:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    2fdc:	cc 01       	movw	r24, r24
    2fde:	a0 e0       	ldi	r26, 0x00	; 0
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	9c 01       	movw	r18, r24
    2fe4:	ad 01       	movw	r20, r26
    2fe6:	64 e6       	ldi	r22, 0x64	; 100
    2fe8:	70 e7       	ldi	r23, 0x70	; 112
    2fea:	8e ef       	ldi	r24, 0xFE	; 254
    2fec:	9f ef       	ldi	r25, 0xFF	; 255
    2fee:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <__mulsi3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	e8 0e       	add	r14, r24
    2ff8:	f9 1e       	adc	r15, r25
    2ffa:	0a 1f       	adc	r16, r26
    2ffc:	1b 1f       	adc	r17, r27
    2ffe:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3002:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3006:	cc 01       	movw	r24, r24
    3008:	a0 e0       	ldi	r26, 0x00	; 0
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	28 e6       	ldi	r18, 0x68	; 104
    300e:	30 e1       	ldi	r19, 0x10	; 16
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	28 1b       	sub	r18, r24
    3016:	39 0b       	sbc	r19, r25
    3018:	4a 0b       	sbc	r20, r26
    301a:	5b 0b       	sbc	r21, r27
    301c:	8f ef       	ldi	r24, 0xFF	; 255
    301e:	93 e0       	ldi	r25, 0x03	; 3
    3020:	dc 01       	movw	r26, r24
    3022:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__muluhisi3>
    3026:	9b 01       	movw	r18, r22
    3028:	ac 01       	movw	r20, r24
    302a:	c8 01       	movw	r24, r16
    302c:	b7 01       	movw	r22, r14
    302e:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <__divmodsi4>
    3032:	da 01       	movw	r26, r20
    3034:	c9 01       	movw	r24, r18
    3036:	8c a3       	std	Y+36, r24	; 0x24
    3038:	9d a3       	std	Y+37, r25	; 0x25
    303a:	ae a3       	std	Y+38, r26	; 0x26
    303c:	bf a3       	std	Y+39, r27	; 0x27
    303e:	18 a6       	std	Y+40, r1	; 0x28
    3040:	19 a6       	std	Y+41, r1	; 0x29
    3042:	84 e6       	ldi	r24, 0x64	; 100
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	8a a7       	std	Y+42, r24	; 0x2a
    3048:	9b a7       	std	Y+43, r25	; 0x2b
    304a:	8a a5       	ldd	r24, Y+42	; 0x2a
    304c:	9b a5       	ldd	r25, Y+43	; 0x2b
    304e:	9c 01       	movw	r18, r24
    3050:	99 0f       	add	r25, r25
    3052:	44 0b       	sbc	r20, r20
    3054:	55 0b       	sbc	r21, r21
    3056:	8c a1       	ldd	r24, Y+36	; 0x24
    3058:	9d a1       	ldd	r25, Y+37	; 0x25
    305a:	ae a1       	ldd	r26, Y+38	; 0x26
    305c:	bf a1       	ldd	r27, Y+39	; 0x27
    305e:	28 17       	cp	r18, r24
    3060:	39 07       	cpc	r19, r25
    3062:	4a 07       	cpc	r20, r26
    3064:	5b 07       	cpc	r21, r27
    3066:	3c f4       	brge	.+14     	; 0x3076 <_Z17handleLinkBusMsgsv+0xc14>
    3068:	8a a5       	ldd	r24, Y+42	; 0x2a
    306a:	9b a5       	ldd	r25, Y+43	; 0x2b
    306c:	09 2e       	mov	r0, r25
    306e:	00 0c       	add	r0, r0
    3070:	aa 0b       	sbc	r26, r26
    3072:	bb 0b       	sbc	r27, r27
    3074:	11 c0       	rjmp	.+34     	; 0x3098 <_Z17handleLinkBusMsgsv+0xc36>
    3076:	88 a5       	ldd	r24, Y+40	; 0x28
    3078:	99 a5       	ldd	r25, Y+41	; 0x29
    307a:	09 2e       	mov	r0, r25
    307c:	00 0c       	add	r0, r0
    307e:	aa 0b       	sbc	r26, r26
    3080:	bb 0b       	sbc	r27, r27
    3082:	2c a1       	ldd	r18, Y+36	; 0x24
    3084:	3d a1       	ldd	r19, Y+37	; 0x25
    3086:	4e a1       	ldd	r20, Y+38	; 0x26
    3088:	5f a1       	ldd	r21, Y+39	; 0x27
    308a:	82 17       	cp	r24, r18
    308c:	93 07       	cpc	r25, r19
    308e:	a4 07       	cpc	r26, r20
    3090:	b5 07       	cpc	r27, r21
    3092:	14 f4       	brge	.+4      	; 0x3098 <_Z17handleLinkBusMsgsv+0xc36>
    3094:	da 01       	movw	r26, r20
    3096:	c9 01       	movw	r24, r18
    3098:	8a 87       	std	Y+10, r24	; 0x0a
    309a:	9b 87       	std	Y+11, r25	; 0x0b
    309c:	2f c0       	rjmp	.+94     	; 0x30fc <_Z17handleLinkBusMsgsv+0xc9a>
    309e:	80 91 3d 45 	lds	r24, 0x453D	; 0x80453d <_ZL22g_lastConversionResult+0x4>
    30a2:	90 91 3e 45 	lds	r25, 0x453E	; 0x80453e <_ZL22g_lastConversionResult+0x5>
    30a6:	9c 01       	movw	r18, r24
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	da 01       	movw	r26, r20
    30ae:	c9 01       	movw	r24, r18
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	aa 1f       	adc	r26, r26
    30b6:	bb 1f       	adc	r27, r27
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	aa 1f       	adc	r26, r26
    30be:	bb 1f       	adc	r27, r27
    30c0:	88 0f       	add	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	aa 1f       	adc	r26, r26
    30c6:	bb 1f       	adc	r27, r27
    30c8:	82 1b       	sub	r24, r18
    30ca:	93 0b       	sbc	r25, r19
    30cc:	a4 0b       	sbc	r26, r20
    30ce:	b5 0b       	sbc	r27, r21
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	aa 1f       	adc	r26, r26
    30d6:	bb 1f       	adc	r27, r27
    30d8:	8a 5c       	subi	r24, 0xCA	; 202
    30da:	9e 4f       	sbci	r25, 0xFE	; 254
    30dc:	af 4f       	sbci	r26, 0xFF	; 255
    30de:	bf 4f       	sbci	r27, 0xFF	; 255
    30e0:	24 e6       	ldi	r18, 0x64	; 100
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	bc 01       	movw	r22, r24
    30ea:	cd 01       	movw	r24, r26
    30ec:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <__divmodsi4>
    30f0:	da 01       	movw	r26, r20
    30f2:	c9 01       	movw	r24, r18
    30f4:	80 5f       	subi	r24, 0xF0	; 240
    30f6:	98 4d       	sbci	r25, 0xD8	; 216
    30f8:	8a 87       	std	Y+10, r24	; 0x0a
    30fa:	9b 87       	std	Y+11, r25	; 0x0b
    30fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    30fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3100:	61 e0       	ldi	r22, 0x01	; 1
    3102:	73 e4       	ldi	r23, 0x43	; 67
    3104:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_Z16lb_broadcast_numjPKc>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	0e 94 0b 23 	call	0x4616	; 0x4616 <ds3231_get_epoch>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	bc 01       	movw	r22, r24
    3116:	cd 01       	movw	r24, r26
    3118:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_system_time>
    311c:	37 c0       	rjmp	.+110    	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    311e:	ce 01       	movw	r24, r28
    3120:	c2 96       	adiw	r24, 0x32	; 50
    3122:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <ds3231_get_temp>
    3126:	98 2f       	mov	r25, r24
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	99 23       	and	r25, r25
    312c:	09 f0       	breq	.+2      	; 0x3130 <_Z17handleLinkBusMsgsv+0xcce>
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	88 23       	and	r24, r24
    3132:	59 f1       	breq	.+86     	; 0x318a <_Z17handleLinkBusMsgsv+0xd28>
    3134:	8a a9       	ldd	r24, Y+50	; 0x32
    3136:	9b a9       	ldd	r25, Y+51	; 0x33
    3138:	66 e0       	ldi	r22, 0x06	; 6
    313a:	73 e4       	ldi	r23, 0x43	; 67
    313c:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_Z16lb_broadcast_numjPKc>
    3140:	24 c0       	rjmp	.+72     	; 0x318a <_Z17handleLinkBusMsgsv+0xd28>
    3142:	44 e6       	ldi	r20, 0x64	; 100
    3144:	50 e4       	ldi	r21, 0x40	; 64
    3146:	6b e0       	ldi	r22, 0x0B	; 11
    3148:	73 e4       	ldi	r23, 0x43	; 67
    314a:	83 e0       	ldi	r24, 0x03	; 3
    314c:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3150:	1d c0       	rjmp	.+58     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    3152:	0e 94 bf 2c 	call	0x597e	; 0x597e <_Z16linkbus_reset_rxv>
    3156:	8e ec       	ldi	r24, 0xCE	; 206
    3158:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    315c:	17 c0       	rjmp	.+46     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    315e:	00 00       	nop
    3160:	15 c0       	rjmp	.+42     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    3162:	00 00       	nop
    3164:	13 c0       	rjmp	.+38     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    3166:	00 00       	nop
    3168:	11 c0       	rjmp	.+34     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    316a:	00 00       	nop
    316c:	0f c0       	rjmp	.+30     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    316e:	00 00       	nop
    3170:	0d c0       	rjmp	.+26     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    3172:	00 00       	nop
    3174:	0b c0       	rjmp	.+22     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    3176:	00 00       	nop
    3178:	09 c0       	rjmp	.+18     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    317a:	00 00       	nop
    317c:	07 c0       	rjmp	.+14     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    317e:	00 00       	nop
    3180:	05 c0       	rjmp	.+10     	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    3182:	00 00       	nop
    3184:	03 c0       	rjmp	.+6      	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    3186:	00 00       	nop
    3188:	01 c0       	rjmp	.+2      	; 0x318c <_Z17handleLinkBusMsgsv+0xd2a>
    318a:	00 00       	nop
    318c:	8c 85       	ldd	r24, Y+12	; 0x0c
    318e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3190:	fc 01       	movw	r30, r24
    3192:	11 82       	std	Z+1, r1	; 0x01
    3194:	12 82       	std	Z+2, r1	; 0x02
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	88 23       	and	r24, r24
    319a:	09 f4       	brne	.+2      	; 0x319e <_Z17handleLinkBusMsgsv+0xd3c>
    319c:	6f c9       	rjmp	.-3362   	; 0x247c <_Z17handleLinkBusMsgsv+0x1a>
    319e:	8f e0       	ldi	r24, 0x0F	; 15
    31a0:	93 e4       	ldi	r25, 0x43	; 67
    31a2:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_Z12lb_send_textPc>
    31a6:	6a c9       	rjmp	.-3372   	; 0x247c <_Z17handleLinkBusMsgsv+0x1a>
    31a8:	00 00       	nop
    31aa:	e3 96       	adiw	r28, 0x33	; 51
    31ac:	cd bf       	out	0x3d, r28	; 61
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	ff 90       	pop	r15
    31ba:	ef 90       	pop	r14
    31bc:	08 95       	ret

000031be <_Z12eventEnabledv>:
    31be:	ef 92       	push	r14
    31c0:	ff 92       	push	r15
    31c2:	0f 93       	push	r16
    31c4:	1f 93       	push	r17
    31c6:	cf 93       	push	r28
    31c8:	df 93       	push	r29
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	29 97       	sbiw	r28, 0x09	; 9
    31d0:	cd bf       	out	0x3d, r28	; 61
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	20 91 27 45 	lds	r18, 0x4527	; 0x804527 <g_event_start_time>
    31d8:	30 91 28 45 	lds	r19, 0x4528	; 0x804528 <g_event_start_time+0x1>
    31dc:	40 91 29 45 	lds	r20, 0x4529	; 0x804529 <g_event_start_time+0x2>
    31e0:	50 91 2a 45 	lds	r21, 0x452A	; 0x80452a <g_event_start_time+0x3>
    31e4:	80 91 2b 45 	lds	r24, 0x452B	; 0x80452b <g_event_finish_time>
    31e8:	90 91 2c 45 	lds	r25, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    31ec:	a0 91 2d 45 	lds	r26, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    31f0:	b0 91 2e 45 	lds	r27, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    31f4:	bc 01       	movw	r22, r24
    31f6:	cd 01       	movw	r24, r26
    31f8:	0e 94 29 3c 	call	0x7852	; 0x7852 <_Z7timeDifmm>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	9a 83       	std	Y+2, r25	; 0x02
    3204:	ab 83       	std	Y+3, r26	; 0x03
    3206:	bc 83       	std	Y+4, r27	; 0x04
    3208:	21 e0       	ldi	r18, 0x01	; 1
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	9a 81       	ldd	r25, Y+2	; 0x02
    320e:	ab 81       	ldd	r26, Y+3	; 0x03
    3210:	bc 81       	ldd	r27, Y+4	; 0x04
    3212:	18 16       	cp	r1, r24
    3214:	19 06       	cpc	r1, r25
    3216:	1a 06       	cpc	r1, r26
    3218:	1b 06       	cpc	r1, r27
    321a:	0c f0       	brlt	.+2      	; 0x321e <_Z12eventEnabledv+0x60>
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	2d 83       	std	Y+5, r18	; 0x05
    3220:	ce 01       	movw	r24, r28
    3222:	06 96       	adiw	r24, 0x06	; 6
    3224:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    3228:	20 91 2b 45 	lds	r18, 0x452B	; 0x80452b <g_event_finish_time>
    322c:	30 91 2c 45 	lds	r19, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    3230:	40 91 2d 45 	lds	r20, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    3234:	50 91 2e 45 	lds	r21, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    3238:	8e 81       	ldd	r24, Y+6	; 0x06
    323a:	9f 81       	ldd	r25, Y+7	; 0x07
    323c:	a8 85       	ldd	r26, Y+8	; 0x08
    323e:	b9 85       	ldd	r27, Y+9	; 0x09
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 29 3c 	call	0x7852	; 0x7852 <_Z7timeDifmm>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	9a 83       	std	Y+2, r25	; 0x02
    3250:	ab 83       	std	Y+3, r26	; 0x03
    3252:	bc 83       	std	Y+4, r27	; 0x04
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	ab 81       	ldd	r26, Y+3	; 0x03
    325a:	bc 81       	ldd	r27, Y+4	; 0x04
    325c:	bb 23       	and	r27, r27
    325e:	2c f0       	brlt	.+10     	; 0x326a <_Z12eventEnabledv+0xac>
    3260:	8d 81       	ldd	r24, Y+5	; 0x05
    3262:	88 23       	and	r24, r24
    3264:	11 f0       	breq	.+4      	; 0x326a <_Z12eventEnabledv+0xac>
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	4a c0       	rjmp	.+148    	; 0x32fe <_Z12eventEnabledv+0x140>
    326a:	20 91 27 45 	lds	r18, 0x4527	; 0x804527 <g_event_start_time>
    326e:	30 91 28 45 	lds	r19, 0x4528	; 0x804528 <g_event_start_time+0x1>
    3272:	40 91 29 45 	lds	r20, 0x4529	; 0x804529 <g_event_start_time+0x2>
    3276:	50 91 2a 45 	lds	r21, 0x452A	; 0x80452a <g_event_start_time+0x3>
    327a:	8e 81       	ldd	r24, Y+6	; 0x06
    327c:	9f 81       	ldd	r25, Y+7	; 0x07
    327e:	a8 85       	ldd	r26, Y+8	; 0x08
    3280:	b9 85       	ldd	r27, Y+9	; 0x09
    3282:	bc 01       	movw	r22, r24
    3284:	cd 01       	movw	r24, r26
    3286:	0e 94 29 3c 	call	0x7852	; 0x7852 <_Z7timeDifmm>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	ab 83       	std	Y+3, r26	; 0x03
    3294:	bc 83       	std	Y+4, r27	; 0x04
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	ab 81       	ldd	r26, Y+3	; 0x03
    329c:	bc 81       	ldd	r27, Y+4	; 0x04
    329e:	84 3c       	cpi	r24, 0xC4	; 196
    32a0:	9f 4f       	sbci	r25, 0xFF	; 255
    32a2:	af 4f       	sbci	r26, 0xFF	; 255
    32a4:	bf 4f       	sbci	r27, 0xFF	; 255
    32a6:	64 f0       	brlt	.+24     	; 0x32c0 <_Z12eventEnabledv+0x102>
    32a8:	10 92 f8 44 	sts	0x44F8, r1	; 0x8044f8 <_ZL11g_sleepType>
    32ac:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep>
    32b0:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    32b4:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    32b8:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	1f c0       	rjmp	.+62     	; 0x32fe <_Z12eventEnabledv+0x140>
    32c0:	24 ec       	ldi	r18, 0xC4	; 196
    32c2:	3f ef       	ldi	r19, 0xFF	; 255
    32c4:	4f ef       	ldi	r20, 0xFF	; 255
    32c6:	5f ef       	ldi	r21, 0xFF	; 255
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	9a 81       	ldd	r25, Y+2	; 0x02
    32cc:	ab 81       	ldd	r26, Y+3	; 0x03
    32ce:	bc 81       	ldd	r27, Y+4	; 0x04
    32d0:	79 01       	movw	r14, r18
    32d2:	8a 01       	movw	r16, r20
    32d4:	e8 1a       	sub	r14, r24
    32d6:	f9 0a       	sbc	r15, r25
    32d8:	0a 0b       	sbc	r16, r26
    32da:	1b 0b       	sbc	r17, r27
    32dc:	d8 01       	movw	r26, r16
    32de:	c7 01       	movw	r24, r14
    32e0:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    32e4:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    32e8:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    32ec:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	80 93 f8 44 	sts	0x44F8, r24	; 0x8044f8 <_ZL11g_sleepType>
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	80 93 33 45 	sts	0x4533, r24	; 0x804533 <_ZL13g_go_to_sleep>
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	29 96       	adiw	r28, 0x09	; 9
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	1f 91       	pop	r17
    330a:	0f 91       	pop	r16
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	08 95       	ret

00003312 <_Z13throttleValueh>:
    3312:	85 31       	cpi	r24, 0x15	; 21
    3314:	4c f4       	brge	.+18     	; 0x3328 <_Z13throttleValueh+0x16>
    3316:	28 2f       	mov	r18, r24
    3318:	88 0f       	add	r24, r24
    331a:	33 0b       	sbc	r19, r19
    331c:	25 30       	cpi	r18, 0x05	; 5
    331e:	31 05       	cpc	r19, r1
    3320:	2c f4       	brge	.+10     	; 0x332c <_Z13throttleValueh+0x1a>
    3322:	25 e0       	ldi	r18, 0x05	; 5
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	02 c0       	rjmp	.+4      	; 0x332c <_Z13throttleValueh+0x1a>
    3328:	24 e1       	ldi	r18, 0x14	; 20
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e0       	ldi	r20, 0x00	; 0
    3330:	50 e0       	ldi	r21, 0x00	; 0
    3332:	62 ec       	ldi	r22, 0xC2	; 194
    3334:	71 e0       	ldi	r23, 0x01	; 1
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <__divmodsi4>
    333e:	ca 01       	movw	r24, r20
    3340:	b9 01       	movw	r22, r18
    3342:	0e 94 63 3d 	call	0x7ac6	; 0x7ac6 <__floatsisf>
    3346:	0e 94 32 3d 	call	0x7a64	; 0x7a64 <__fixunssfsi>
    334a:	cb 01       	movw	r24, r22
    334c:	08 95       	ret

0000334e <_Z11launchEventP2SC>:
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	00 d0       	rcall	.+0      	; 0x3354 <_Z11launchEventP2SC+0x6>
    3354:	1f 92       	push	r1
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	8a 83       	std	Y+2, r24	; 0x02
    335c:	9b 83       	std	Y+3, r25	; 0x03
    335e:	8a 81       	ldd	r24, Y+2	; 0x02
    3360:	9b 81       	ldd	r25, Y+3	; 0x03
    3362:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_Z33activateEventUsingCurrentSettingsP2SC>
    3366:	89 83       	std	Y+1, r24	; 0x01
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	9b 81       	ldd	r25, Y+3	; 0x03
    336c:	fc 01       	movw	r30, r24
    336e:	80 81       	ld	r24, Z
    3370:	88 23       	and	r24, r24
    3372:	31 f0       	breq	.+12     	; 0x3380 <_Z11launchEventP2SC+0x32>
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	9b 81       	ldd	r25, Y+3	; 0x03
    3378:	fc 01       	movw	r30, r24
    337a:	80 81       	ld	r24, Z
    337c:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	88 23       	and	r24, r24
    3384:	21 f0       	breq	.+8      	; 0x338e <_Z11launchEventP2SC+0x40>
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    338c:	04 c0       	rjmp	.+8      	; 0x3396 <_Z11launchEventP2SC+0x48>
    338e:	0e 94 df 18 	call	0x31be	; 0x31be <_Z12eventEnabledv>
    3392:	80 93 2f 45 	sts	0x452F, r24	; 0x80452f <g_event_enabled>
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	23 96       	adiw	r28, 0x03	; 3
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	08 95       	ret

000033a4 <_Z33activateEventUsingCurrentSettingsP2SC>:
    33a4:	cf 92       	push	r12
    33a6:	df 92       	push	r13
    33a8:	ef 92       	push	r14
    33aa:	ff 92       	push	r15
    33ac:	0f 93       	push	r16
    33ae:	1f 93       	push	r17
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	1f 92       	push	r1
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	40 91 27 45 	lds	r20, 0x4527	; 0x804527 <g_event_start_time>
    33be:	50 91 28 45 	lds	r21, 0x4528	; 0x804528 <g_event_start_time+0x1>
    33c2:	60 91 29 45 	lds	r22, 0x4529	; 0x804529 <g_event_start_time+0x2>
    33c6:	70 91 2a 45 	lds	r23, 0x452A	; 0x80452a <g_event_start_time+0x3>
    33ca:	45 2b       	or	r20, r21
    33cc:	46 2b       	or	r20, r22
    33ce:	47 2b       	or	r20, r23
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <_Z33activateEventUsingCurrentSettingsP2SC+0x30>
    33d2:	91 c1       	rjmp	.+802    	; 0x36f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x352>
    33d4:	00 91 27 45 	lds	r16, 0x4527	; 0x804527 <g_event_start_time>
    33d8:	10 91 28 45 	lds	r17, 0x4528	; 0x804528 <g_event_start_time+0x1>
    33dc:	20 91 29 45 	lds	r18, 0x4529	; 0x804529 <g_event_start_time+0x2>
    33e0:	30 91 2a 45 	lds	r19, 0x452A	; 0x80452a <g_event_start_time+0x3>
    33e4:	40 91 2b 45 	lds	r20, 0x452B	; 0x80452b <g_event_finish_time>
    33e8:	50 91 2c 45 	lds	r21, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    33ec:	60 91 2d 45 	lds	r22, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    33f0:	70 91 2e 45 	lds	r23, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    33f4:	04 17       	cp	r16, r20
    33f6:	15 07       	cpc	r17, r21
    33f8:	26 07       	cpc	r18, r22
    33fa:	37 07       	cpc	r19, r23
    33fc:	08 f0       	brcs	.+2      	; 0x3400 <_Z33activateEventUsingCurrentSettingsP2SC+0x5c>
    33fe:	7d c1       	rjmp	.+762    	; 0x36fa <_Z33activateEventUsingCurrentSettingsP2SC+0x356>
    3400:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    3404:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    3408:	23 2b       	or	r18, r19
    340a:	09 f4       	brne	.+2      	; 0x340e <_Z33activateEventUsingCurrentSettingsP2SC+0x6a>
    340c:	78 c1       	rjmp	.+752    	; 0x36fe <_Z33activateEventUsingCurrentSettingsP2SC+0x35a>
    340e:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    3412:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    3416:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    341a:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    341e:	24 0f       	add	r18, r20
    3420:	35 1f       	adc	r19, r21
    3422:	40 91 25 45 	lds	r20, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    3426:	50 91 26 45 	lds	r21, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    342a:	24 17       	cp	r18, r20
    342c:	35 07       	cpc	r19, r21
    342e:	0c f4       	brge	.+2      	; 0x3432 <_Z33activateEventUsingCurrentSettingsP2SC+0x8e>
    3430:	68 c1       	rjmp	.+720    	; 0x3702 <_Z33activateEventUsingCurrentSettingsP2SC+0x35e>
    3432:	20 91 f9 44 	lds	r18, 0x44F9	; 0x8044f9 <g_messages_text>
    3436:	22 23       	and	r18, r18
    3438:	09 f4       	brne	.+2      	; 0x343c <_Z33activateEventUsingCurrentSettingsP2SC+0x98>
    343a:	65 c1       	rjmp	.+714    	; 0x3706 <_Z33activateEventUsingCurrentSettingsP2SC+0x362>
    343c:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    3440:	22 23       	and	r18, r18
    3442:	09 f4       	brne	.+2      	; 0x3446 <_Z33activateEventUsingCurrentSettingsP2SC+0xa2>
    3444:	62 c1       	rjmp	.+708    	; 0x370a <_Z33activateEventUsingCurrentSettingsP2SC+0x366>
    3446:	8c 01       	movw	r16, r24
    3448:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    344c:	88 23       	and	r24, r24
    344e:	19 f1       	breq	.+70     	; 0x3496 <_Z33activateEventUsingCurrentSettingsP2SC+0xf2>
    3450:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    3454:	88 23       	and	r24, r24
    3456:	41 f0       	breq	.+16     	; 0x3468 <_Z33activateEventUsingCurrentSettingsP2SC+0xc4>
    3458:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    345c:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    3460:	89 2b       	or	r24, r25
    3462:	21 f4       	brne	.+8      	; 0x346c <_Z33activateEventUsingCurrentSettingsP2SC+0xc8>
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	03 c0       	rjmp	.+6      	; 0x346e <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	01 c0       	rjmp	.+2      	; 0x346e <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	81 11       	cpse	r24, r1
    3470:	4e c1       	rjmp	.+668    	; 0x370e <_Z33activateEventUsingCurrentSettingsP2SC+0x36a>
    3472:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    3476:	70 e0       	ldi	r23, 0x00	; 0
    3478:	8e e0       	ldi	r24, 0x0E	; 14
    347a:	95 e4       	ldi	r25, 0x45	; 69
    347c:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <_Z26timeRequiredToSendStrAtWPMPcj>
    3480:	8c 50       	subi	r24, 0x0C	; 12
    3482:	9e 4f       	sbci	r25, 0xFE	; 254
    3484:	68 ee       	ldi	r22, 0xE8	; 232
    3486:	73 e0       	ldi	r23, 0x03	; 3
    3488:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <__udivmodhi4>
    348c:	60 93 23 45 	sts	0x4523, r22	; 0x804523 <g_time_needed_for_ID>
    3490:	70 93 24 45 	sts	0x4524, r23	; 0x804524 <g_time_needed_for_ID+0x1>
    3494:	04 c0       	rjmp	.+8      	; 0x349e <_Z33activateEventUsingCurrentSettingsP2SC+0xfa>
    3496:	10 92 23 45 	sts	0x4523, r1	; 0x804523 <g_time_needed_for_ID>
    349a:	10 92 24 45 	sts	0x4524, r1	; 0x804524 <g_time_needed_for_ID+0x1>
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    34a6:	c0 90 2b 45 	lds	r12, 0x452B	; 0x80452b <g_event_finish_time>
    34aa:	d0 90 2c 45 	lds	r13, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    34ae:	e0 90 2d 45 	lds	r14, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    34b2:	f0 90 2e 45 	lds	r15, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    34b6:	c6 16       	cp	r12, r22
    34b8:	d7 06       	cpc	r13, r23
    34ba:	e8 06       	cpc	r14, r24
    34bc:	f9 06       	cpc	r15, r25
    34be:	48 f4       	brcc	.+18     	; 0x34d2 <_Z33activateEventUsingCurrentSettingsP2SC+0x12e>
    34c0:	01 15       	cp	r16, r1
    34c2:	11 05       	cpc	r17, r1
    34c4:	09 f4       	brne	.+2      	; 0x34c8 <_Z33activateEventUsingCurrentSettingsP2SC+0x124>
    34c6:	25 c1       	rjmp	.+586    	; 0x3712 <_Z33activateEventUsingCurrentSettingsP2SC+0x36e>
    34c8:	8a ef       	ldi	r24, 0xFA	; 250
    34ca:	f8 01       	movw	r30, r16
    34cc:	80 83       	st	Z, r24
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	21 c1       	rjmp	.+578    	; 0x3714 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    34d2:	20 91 27 45 	lds	r18, 0x4527	; 0x804527 <g_event_start_time>
    34d6:	30 91 28 45 	lds	r19, 0x4528	; 0x804528 <g_event_start_time+0x1>
    34da:	40 91 29 45 	lds	r20, 0x4529	; 0x804529 <g_event_start_time+0x2>
    34de:	50 91 2a 45 	lds	r21, 0x452A	; 0x80452a <g_event_start_time+0x3>
    34e2:	0e 94 29 3c 	call	0x7852	; 0x7852 <_Z7timeDifmm>
    34e6:	99 23       	and	r25, r25
    34e8:	0c f4       	brge	.+2      	; 0x34ec <_Z33activateEventUsingCurrentSettingsP2SC+0x148>
    34ea:	f2 c0       	rjmp	.+484    	; 0x36d0 <_Z33activateEventUsingCurrentSettingsP2SC+0x32c>
    34ec:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    34f0:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    34f4:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    34f8:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    34fc:	e2 0e       	add	r14, r18
    34fe:	f3 1e       	adc	r15, r19
    3500:	97 01       	movw	r18, r14
    3502:	0f 2c       	mov	r0, r15
    3504:	00 0c       	add	r0, r0
    3506:	44 0b       	sbc	r20, r20
    3508:	55 0b       	sbc	r21, r21
    350a:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <__divmodsi4>
    350e:	20 91 25 45 	lds	r18, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    3512:	30 91 26 45 	lds	r19, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    3516:	c9 01       	movw	r24, r18
    3518:	86 1b       	sub	r24, r22
    351a:	97 0b       	sbc	r25, r23
    351c:	18 16       	cp	r1, r24
    351e:	19 06       	cpc	r1, r25
    3520:	0c f4       	brge	.+2      	; 0x3524 <_Z33activateEventUsingCurrentSettingsP2SC+0x180>
    3522:	84 c0       	rjmp	.+264    	; 0x362c <_Z33activateEventUsingCurrentSettingsP2SC+0x288>
    3524:	22 27       	eor	r18, r18
    3526:	33 27       	eor	r19, r19
    3528:	28 1b       	sub	r18, r24
    352a:	39 0b       	sbc	r19, r25
    352c:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    3530:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    3534:	24 17       	cp	r18, r20
    3536:	35 07       	cpc	r19, r21
    3538:	ac f1       	brlt	.+106    	; 0x35a4 <_Z33activateEventUsingCurrentSettingsP2SC+0x200>
    353a:	8e 0d       	add	r24, r14
    353c:	9f 1d       	adc	r25, r15
    353e:	91 95       	neg	r25
    3540:	81 95       	neg	r24
    3542:	91 09       	sbc	r25, r1
    3544:	09 2e       	mov	r0, r25
    3546:	00 0c       	add	r0, r0
    3548:	aa 0b       	sbc	r26, r26
    354a:	bb 0b       	sbc	r27, r27
    354c:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    3550:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    3554:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    3558:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    355c:	01 15       	cp	r16, r1
    355e:	11 05       	cpc	r17, r1
    3560:	19 f0       	breq	.+6      	; 0x3568 <_Z33activateEventUsingCurrentSettingsP2SC+0x1c4>
    3562:	8e ef       	ldi	r24, 0xFE	; 254
    3564:	f8 01       	movw	r30, r16
    3566:	80 83       	st	Z, r24
    3568:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
    356c:	81 11       	cpse	r24, r1
    356e:	8a c0       	rjmp	.+276    	; 0x3684 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e0>
    3570:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    3574:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    3578:	40 91 ef 44 	lds	r20, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    357c:	50 91 f0 44 	lds	r21, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    3580:	60 91 f1 44 	lds	r22, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    3584:	70 91 f2 44 	lds	r23, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    3588:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    358c:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    3590:	84 1b       	sub	r24, r20
    3592:	95 0b       	sbc	r25, r21
    3594:	82 1b       	sub	r24, r18
    3596:	93 0b       	sbc	r25, r19
    3598:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    359c:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	77 c0       	rjmp	.+238    	; 0x3692 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    35a4:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    35a8:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    35ac:	82 0f       	add	r24, r18
    35ae:	93 1f       	adc	r25, r19
    35b0:	09 2e       	mov	r0, r25
    35b2:	00 0c       	add	r0, r0
    35b4:	aa 0b       	sbc	r26, r26
    35b6:	bb 0b       	sbc	r27, r27
    35b8:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    35bc:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    35c0:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    35c4:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    35c8:	01 15       	cp	r16, r1
    35ca:	11 05       	cpc	r17, r1
    35cc:	19 f0       	breq	.+6      	; 0x35d4 <_Z33activateEventUsingCurrentSettingsP2SC+0x230>
    35ce:	8d ef       	ldi	r24, 0xFD	; 253
    35d0:	f8 01       	movw	r30, r16
    35d2:	80 83       	st	Z, r24
    35d4:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
    35d8:	81 11       	cpse	r24, r1
    35da:	56 c0       	rjmp	.+172    	; 0x3688 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e4>
    35dc:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <g_time_needed_for_ID>
    35e0:	90 91 24 45 	lds	r25, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    35e4:	a0 e0       	ldi	r26, 0x00	; 0
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	40 91 ef 44 	lds	r20, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    35ec:	50 91 f0 44 	lds	r21, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    35f0:	60 91 f1 44 	lds	r22, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    35f4:	70 91 f2 44 	lds	r23, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    35f8:	84 17       	cp	r24, r20
    35fa:	95 07       	cpc	r25, r21
    35fc:	a6 07       	cpc	r26, r22
    35fe:	b7 07       	cpc	r27, r23
    3600:	0c f0       	brlt	.+2      	; 0x3604 <_Z33activateEventUsingCurrentSettingsP2SC+0x260>
    3602:	44 c0       	rjmp	.+136    	; 0x368c <_Z33activateEventUsingCurrentSettingsP2SC+0x2e8>
    3604:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    3608:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    360c:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    3610:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    3614:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    3618:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    361c:	82 1b       	sub	r24, r18
    361e:	93 0b       	sbc	r25, r19
    3620:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    3624:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	33 c0       	rjmp	.+102    	; 0x3692 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    362c:	44 27       	eor	r20, r20
    362e:	55 27       	eor	r21, r21
    3630:	48 1b       	sub	r20, r24
    3632:	59 0b       	sbc	r21, r25
    3634:	05 2e       	mov	r0, r21
    3636:	00 0c       	add	r0, r0
    3638:	66 0b       	sbc	r22, r22
    363a:	77 0b       	sbc	r23, r23
    363c:	40 93 ef 44 	sts	0x44EF, r20	; 0x8044ef <_ZL12g_on_the_air>
    3640:	50 93 f0 44 	sts	0x44F0, r21	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    3644:	60 93 f1 44 	sts	0x44F1, r22	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    3648:	70 93 f2 44 	sts	0x44F2, r23	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    364c:	01 15       	cp	r16, r1
    364e:	11 05       	cpc	r17, r1
    3650:	19 f0       	breq	.+6      	; 0x3658 <_Z33activateEventUsingCurrentSettingsP2SC+0x2b4>
    3652:	2e ef       	ldi	r18, 0xFE	; 254
    3654:	f8 01       	movw	r30, r16
    3656:	20 83       	st	Z, r18
    3658:	20 91 2f 45 	lds	r18, 0x452F	; 0x80452f <g_event_enabled>
    365c:	21 11       	cpse	r18, r1
    365e:	18 c0       	rjmp	.+48     	; 0x3690 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ec>
    3660:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    3664:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    3668:	82 0f       	add	r24, r18
    366a:	93 1f       	adc	r25, r19
    366c:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    3670:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    3674:	82 1b       	sub	r24, r18
    3676:	93 0b       	sbc	r25, r19
    3678:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    367c:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	07 c0       	rjmp	.+14     	; 0x3692 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	05 c0       	rjmp	.+10     	; 0x3692 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	03 c0       	rjmp	.+6      	; 0x3692 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	01 c0       	rjmp	.+2      	; 0x3692 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	88 23       	and	r24, r24
    3694:	b1 f0       	breq	.+44     	; 0x36c2 <_Z33activateEventUsingCurrentSettingsP2SC+0x31e>
    3696:	f8 94       	cli
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	89 83       	std	Y+1, r24	; 0x01
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	be 01       	movw	r22, r28
    36a2:	6f 5f       	subi	r22, 0xFF	; 255
    36a4:	7f 4f       	sbci	r23, 0xFF	; 255
    36a6:	89 ef       	ldi	r24, 0xF9	; 249
    36a8:	94 e4       	ldi	r25, 0x44	; 68
    36aa:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
    36ae:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    36b2:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
    36b6:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    36ba:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    36be:	78 94       	sei
    36c0:	03 c0       	rjmp	.+6      	; 0x36c8 <_Z33activateEventUsingCurrentSettingsP2SC+0x324>
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	0e 94 11 3a 	call	0x7422	; 0x7422 <_Z14keyTransmitterh>
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	80 93 30 45 	sts	0x4530, r24	; 0x804530 <g_event_commenced>
    36ce:	09 c0       	rjmp	.+18     	; 0x36e2 <_Z33activateEventUsingCurrentSettingsP2SC+0x33e>
    36d0:	01 15       	cp	r16, r1
    36d2:	11 05       	cpc	r17, r1
    36d4:	19 f0       	breq	.+6      	; 0x36dc <_Z33activateEventUsingCurrentSettingsP2SC+0x338>
    36d6:	8f ef       	ldi	r24, 0xFF	; 255
    36d8:	f8 01       	movw	r30, r16
    36da:	80 83       	st	Z, r24
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	0e 94 11 3a 	call	0x7422	; 0x7422 <_Z14keyTransmitterh>
    36e2:	10 92 32 45 	sts	0x4532, r1	; 0x804532 <g_waiting_for_next_event>
    36e6:	8a e5       	ldi	r24, 0x5A	; 90
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    36ee:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	0f c0       	rjmp	.+30     	; 0x3714 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    36f6:	8c ec       	ldi	r24, 0xCC	; 204
    36f8:	0d c0       	rjmp	.+26     	; 0x3714 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    36fa:	8d ec       	ldi	r24, 0xCD	; 205
    36fc:	0b c0       	rjmp	.+22     	; 0x3714 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    36fe:	8b ec       	ldi	r24, 0xCB	; 203
    3700:	09 c0       	rjmp	.+18     	; 0x3714 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    3702:	8a ec       	ldi	r24, 0xCA	; 202
    3704:	07 c0       	rjmp	.+14     	; 0x3714 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    3706:	89 ec       	ldi	r24, 0xC9	; 201
    3708:	05 c0       	rjmp	.+10     	; 0x3714 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    370a:	88 ec       	ldi	r24, 0xC8	; 200
    370c:	03 c0       	rjmp	.+6      	; 0x3714 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    370e:	87 ec       	ldi	r24, 0xC7	; 199
    3710:	01 c0       	rjmp	.+2      	; 0x3714 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	0f 90       	pop	r0
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	ff 90       	pop	r15
    3720:	ef 90       	pop	r14
    3722:	df 90       	pop	r13
    3724:	cf 90       	pop	r12
    3726:	08 95       	ret

00003728 <_Z18antennaIsConnectedv>:
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	08 95       	ret

0000372c <_Z11setupForFoxP5Fox_t13EventAction_t>:
	
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
    372c:	1f 93       	push	r17
    372e:	cf 93       	push	r28
    3730:	df 93       	push	r29
    3732:	1f 92       	push	r1
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	16 2f       	mov	r17, r22
	bool patternNotSet = true;
	
	if(fox)
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	31 f0       	breq	.+12     	; 0x374a <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    373e:	fc 01       	movw	r30, r24
    3740:	80 81       	ld	r24, Z
    3742:	82 31       	cpi	r24, 0x12	; 18
    3744:	11 f0       	breq	.+4      	; 0x374a <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    3746:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		}
	}

 	g_current_epoch = ds3231_get_epoch(null);
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	0e 94 0b 23 	call	0x4616	; 0x4616 <ds3231_get_epoch>
    3752:	60 93 55 45 	sts	0x4555, r22	; 0x804555 <g_current_epoch>
    3756:	70 93 56 45 	sts	0x4556, r23	; 0x804556 <g_current_epoch+0x1>
    375a:	80 93 57 45 	sts	0x4557, r24	; 0x804557 <g_current_epoch+0x2>
    375e:	90 93 58 45 	sts	0x4558, r25	; 0x804558 <g_current_epoch+0x3>

	cli();
    3762:	f8 94       	cli

	switch(g_fox)
    3764:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    3768:	83 30       	cpi	r24, 0x03	; 3
    376a:	31 f1       	breq	.+76     	; 0x37b8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x8c>
    376c:	28 f4       	brcc	.+10     	; 0x3778 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4c>
    376e:	81 30       	cpi	r24, 0x01	; 1
    3770:	41 f0       	breq	.+16     	; 0x3782 <_Z11setupForFoxP5Fox_t13EventAction_t+0x56>
    3772:	82 30       	cpi	r24, 0x02	; 2
    3774:	91 f0       	breq	.+36     	; 0x379a <_Z11setupForFoxP5Fox_t13EventAction_t+0x6e>
    3776:	6e c0       	rjmp	.+220    	; 0x3854 <_Z11setupForFoxP5Fox_t13EventAction_t+0x128>
    3778:	84 30       	cpi	r24, 0x04	; 4
    377a:	69 f1       	breq	.+90     	; 0x37d6 <_Z11setupForFoxP5Fox_t13EventAction_t+0xaa>
    377c:	85 30       	cpi	r24, 0x05	; 5
    377e:	d1 f1       	breq	.+116    	; 0x37f4 <_Z11setupForFoxP5Fox_t13EventAction_t+0xc8>
    3780:	69 c0       	rjmp	.+210    	; 0x3854 <_Z11setupForFoxP5Fox_t13EventAction_t+0x128>
	{
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
    3782:	e9 ef       	ldi	r30, 0xF9	; 249
    3784:	f4 e4       	ldi	r31, 0x44	; 68
    3786:	8d e4       	ldi	r24, 0x4D	; 77
    3788:	9f e4       	ldi	r25, 0x4F	; 79
    378a:	80 83       	st	Z, r24
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	85 e4       	ldi	r24, 0x45	; 69
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	82 83       	std	Z+2, r24	; 0x02
    3794:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	01 c0       	rjmp	.+2      	; 0x379c <_Z11setupForFoxP5Fox_t13EventAction_t+0x70>
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    379a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_2:
		{
			if(patternNotSet)
    379c:	88 23       	and	r24, r24
    379e:	69 f0       	breq	.+26     	; 0x37ba <_Z11setupForFoxP5Fox_t13EventAction_t+0x8e>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
    37a0:	e9 ef       	ldi	r30, 0xF9	; 249
    37a2:	f4 e4       	ldi	r31, 0x44	; 68
    37a4:	8d e4       	ldi	r24, 0x4D	; 77
    37a6:	9f e4       	ldi	r25, 0x4F	; 79
    37a8:	80 83       	st	Z, r24
    37aa:	91 83       	std	Z+1, r25	; 0x01
    37ac:	89 e4       	ldi	r24, 0x49	; 73
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	82 83       	std	Z+2, r24	; 0x02
    37b2:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	01 c0       	rjmp	.+2      	; 0x37ba <_Z11setupForFoxP5Fox_t13EventAction_t+0x8e>
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    37b8:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_3:
		{
			if(patternNotSet)
    37ba:	88 23       	and	r24, r24
    37bc:	69 f0       	breq	.+26     	; 0x37d8 <_Z11setupForFoxP5Fox_t13EventAction_t+0xac>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
    37be:	e9 ef       	ldi	r30, 0xF9	; 249
    37c0:	f4 e4       	ldi	r31, 0x44	; 68
    37c2:	8d e4       	ldi	r24, 0x4D	; 77
    37c4:	9f e4       	ldi	r25, 0x4F	; 79
    37c6:	80 83       	st	Z, r24
    37c8:	91 83       	std	Z+1, r25	; 0x01
    37ca:	83 e5       	ldi	r24, 0x53	; 83
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	82 83       	std	Z+2, r24	; 0x02
    37d0:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <_Z11setupForFoxP5Fox_t13EventAction_t+0xac>
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    37d6:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_4:
		{
			if(patternNotSet)
    37d8:	88 23       	and	r24, r24
    37da:	69 f0       	breq	.+26     	; 0x37f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0xca>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
    37dc:	e9 ef       	ldi	r30, 0xF9	; 249
    37de:	f4 e4       	ldi	r31, 0x44	; 68
    37e0:	8d e4       	ldi	r24, 0x4D	; 77
    37e2:	9f e4       	ldi	r25, 0x4F	; 79
    37e4:	80 83       	st	Z, r24
    37e6:	91 83       	std	Z+1, r25	; 0x01
    37e8:	88 e4       	ldi	r24, 0x48	; 72
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	82 83       	std	Z+2, r24	; 0x02
    37ee:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	01 c0       	rjmp	.+2      	; 0x37f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0xca>
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case FOX_5:
		{
			/* Set the Morse code pattern and speed */
			if(patternNotSet)
    37f6:	88 23       	and	r24, r24
    37f8:	51 f0       	breq	.+20     	; 0x380e <_Z11setupForFoxP5Fox_t13EventAction_t+0xe2>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO5");
    37fa:	e9 ef       	ldi	r30, 0xF9	; 249
    37fc:	f4 e4       	ldi	r31, 0x44	; 68
    37fe:	8d e4       	ldi	r24, 0x4D	; 77
    3800:	9f e4       	ldi	r25, 0x4F	; 79
    3802:	80 83       	st	Z, r24
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	85 e3       	ldi	r24, 0x35	; 53
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	82 83       	std	Z+2, r24	; 0x02
    380c:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
			}
			
			BOOL repeat = TRUE;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    3812:	40 e0       	ldi	r20, 0x00	; 0
    3814:	50 e0       	ldi	r21, 0x00	; 0
    3816:	be 01       	movw	r22, r28
    3818:	6f 5f       	subi	r22, 0xFF	; 255
    381a:	7f 4f       	sbci	r23, 0xFF	; 255
    381c:	89 ef       	ldi	r24, 0xF9	; 249
    381e:	94 e4       	ldi	r25, 0x44	; 68
    3820:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    3824:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3828:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
    382c:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    3830:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 60;						/* on period is very long */
    3834:	8c e3       	ldi	r24, 0x3C	; 60
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    383c:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 240;                    /* off period is very short */
    3840:	80 ef       	ldi	r24, 0xF0	; 240
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    3848:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
			g_event_commenced = FALSE;                   /* get things running immediately */
    384c:	10 92 30 45 	sts	0x4530, r1	; 0x804530 <g_event_commenced>
			g_event_enabled = FALSE;                     /* get things running immediately */
    3850:	10 92 2f 45 	sts	0x452F, r1	; 0x80452f <g_event_enabled>
// 			g_cycle_period_seconds = g_id_interval_seconds;
		}
		break;
	}

	if(action == START_NOTHING)
    3854:	11 11       	cpse	r17, r1
    3856:	0a c0       	rjmp	.+20     	; 0x386c <_Z11setupForFoxP5Fox_t13EventAction_t+0x140>
	{
		g_event_commenced = FALSE;                   /* get things running immediately */
    3858:	10 92 30 45 	sts	0x4530, r1	; 0x804530 <g_event_commenced>
		g_event_enabled = FALSE;                     /* get things running immediately */
    385c:	10 92 2f 45 	sts	0x452F, r1	; 0x80452f <g_event_enabled>

 		g_use_rtc_for_startstop = FALSE;
    3860:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = TRUE;
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    386a:	61 c0       	rjmp	.+194    	; 0x392e <_Z11setupForFoxP5Fox_t13EventAction_t+0x202>
	}
	else if(action == START_EVENT_NOW)
    386c:	11 30       	cpi	r17, 0x01	; 1
    386e:	29 f4       	brne	.+10     	; 0x387a <_Z11setupForFoxP5Fox_t13EventAction_t+0x14e>
	{
// 		g_seconds_since_sync = 0;                                               /* Total elapsed time since synchronization */
 		g_use_rtc_for_startstop = FALSE;
    3870:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = FALSE;
    3874:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    3878:	5a c0       	rjmp	.+180    	; 0x392e <_Z11setupForFoxP5Fox_t13EventAction_t+0x202>
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    387a:	12 30       	cpi	r17, 0x02	; 2
    387c:	09 f0       	breq	.+2      	; 0x3880 <_Z11setupForFoxP5Fox_t13EventAction_t+0x154>
    387e:	52 c0       	rjmp	.+164    	; 0x3924 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1f8>
	{
		BOOL repeat = TRUE;
    3880:	11 e0       	ldi	r17, 0x01	; 1
    3882:	19 83       	std	Y+1, r17	; 0x01
		makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    3884:	40 e0       	ldi	r20, 0x00	; 0
    3886:	50 e0       	ldi	r21, 0x00	; 0
    3888:	be 01       	movw	r22, r28
    388a:	6f 5f       	subi	r22, 0xFF	; 255
    388c:	7f 4f       	sbci	r23, 0xFF	; 255
    388e:	89 ef       	ldi	r24, 0xF9	; 249
    3890:	94 e4       	ldi	r25, 0x44	; 68
    3892:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_Z9makeMorsePcPhS0_>
		g_code_throttle = throttleValue(g_pattern_codespeed);
    3896:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    389a:	0e 94 89 19 	call	0x3312	; 0x3312 <_Z13throttleValueh>
    389e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    38a2:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

		g_event_start_time = 1;                     /* have it start a long time ago */
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	a0 e0       	ldi	r26, 0x00	; 0
    38ac:	b0 e0       	ldi	r27, 0x00	; 0
    38ae:	80 93 27 45 	sts	0x4527, r24	; 0x804527 <g_event_start_time>
    38b2:	90 93 28 45 	sts	0x4528, r25	; 0x804528 <g_event_start_time+0x1>
    38b6:	a0 93 29 45 	sts	0x4529, r26	; 0x804529 <g_event_start_time+0x2>
    38ba:	b0 93 2a 45 	sts	0x452A, r27	; 0x80452a <g_event_start_time+0x3>
		g_event_finish_time = MAX_TIME;             /* run for a long long time */
    38be:	8f ef       	ldi	r24, 0xFF	; 255
    38c0:	9f ef       	ldi	r25, 0xFF	; 255
    38c2:	dc 01       	movw	r26, r24
    38c4:	80 93 2b 45 	sts	0x452B, r24	; 0x80452b <g_event_finish_time>
    38c8:	90 93 2c 45 	sts	0x452C, r25	; 0x80452c <g_event_finish_time+0x1>
    38cc:	a0 93 2d 45 	sts	0x452D, r26	; 0x80452d <g_event_finish_time+0x2>
    38d0:	b0 93 2e 45 	sts	0x452E, r27	; 0x80452e <g_event_finish_time+0x3>
		g_on_air_seconds = 60;						/* on period is very long */
    38d4:	8c e3       	ldi	r24, 0x3C	; 60
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    38dc:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
		g_off_air_seconds = 240;                    /* off period is very short */
    38e0:	20 ef       	ldi	r18, 0xF0	; 240
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	20 93 0f 40 	sts	0x400F, r18	; 0x80400f <g_off_air_seconds>
    38e8:	30 93 10 40 	sts	0x4010, r19	; 0x804010 <g_off_air_seconds+0x1>
		g_on_the_air = 9999;                        /* start out transmitting */
    38ec:	4f e0       	ldi	r20, 0x0F	; 15
    38ee:	57 e2       	ldi	r21, 0x27	; 39
    38f0:	60 e0       	ldi	r22, 0x00	; 0
    38f2:	70 e0       	ldi	r23, 0x00	; 0
    38f4:	40 93 ef 44 	sts	0x44EF, r20	; 0x8044ef <_ZL12g_on_the_air>
    38f8:	50 93 f0 44 	sts	0x44F0, r21	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    38fc:	60 93 f1 44 	sts	0x44F1, r22	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    3900:	70 93 f2 44 	sts	0x44F2, r23	; 0x8044f2 <_ZL12g_on_the_air+0x3>
		g_sendID_seconds_countdown = 60;			/* wait a long time to send the ID */
    3904:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    3908:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
		g_event_commenced = TRUE;                   /* get things running immediately */
    390c:	10 93 30 45 	sts	0x4530, r17	; 0x804530 <g_event_commenced>
		g_event_enabled = TRUE;                     /* get things running immediately */
    3910:	10 93 2f 45 	sts	0x452F, r17	; 0x80452f <g_event_enabled>
		g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    3914:	8d ef       	ldi	r24, 0xFD	; 253
    3916:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
		
// 		g_fox_counter = MAX(1, g_fox - g_fox_id_offset);
// 		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
 		g_use_rtc_for_startstop = FALSE;
    391a:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = FALSE;
    391e:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    3922:	05 c0       	rjmp	.+10     	; 0x392e <_Z11setupForFoxP5Fox_t13EventAction_t+0x202>
// 			{
// 				digitalWrite(PIN_PWDN, OFF); /* Turn off the radio until close to start time */
// 			}
 		}
 
 		g_use_rtc_for_startstop = TRUE;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	80 93 59 45 	sts	0x4559, r24	; 0x804559 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = TRUE;
    392a:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
// 	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
// 	g_sendAMmodulation = FALSE;
// 	g_LED_enunciating = FALSE;
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */

	sei();
    392e:	78 94       	sei
}
    3930:	0f 90       	pop	r0
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	08 95       	ret

0000393a <_Z18validateTimeStringPcPma>:

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    393a:	4f 92       	push	r4
    393c:	5f 92       	push	r5
    393e:	6f 92       	push	r6
    3940:	7f 92       	push	r7
    3942:	af 92       	push	r10
    3944:	bf 92       	push	r11
    3946:	cf 92       	push	r12
    3948:	df 92       	push	r13
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	8c 01       	movw	r16, r24
    3958:	a4 2e       	mov	r10, r20
	time_t valid = 0;
	int len = strlen(str);
    395a:	fc 01       	movw	r30, r24
    395c:	01 90       	ld	r0, Z+
    395e:	00 20       	and	r0, r0
    3960:	e9 f7       	brne	.-6      	; 0x395c <_Z18validateTimeStringPcPma+0x22>
    3962:	31 97       	sbiw	r30, 0x01	; 1
    3964:	ef 01       	movw	r28, r30
    3966:	c8 1b       	sub	r28, r24
    3968:	d9 0b       	sbc	r29, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    396a:	25 e4       	ldi	r18, 0x45	; 69
    396c:	64 34       	cpi	r22, 0x44	; 68
    396e:	72 07       	cpc	r23, r18
    3970:	e1 f4       	brne	.+56     	; 0x39aa <_Z18validateTimeStringPcPma+0x70>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    3972:	c0 90 55 45 	lds	r12, 0x4555	; 0x804555 <g_current_epoch>
    3976:	d0 90 56 45 	lds	r13, 0x4556	; 0x804556 <g_current_epoch+0x1>
    397a:	e0 90 57 45 	lds	r14, 0x4557	; 0x804557 <g_current_epoch+0x2>
    397e:	f0 90 58 45 	lds	r15, 0x4558	; 0x804558 <g_current_epoch+0x3>
    3982:	c1 14       	cp	r12, r1
    3984:	86 e6       	ldi	r24, 0x66	; 102
    3986:	d8 06       	cpc	r13, r24
    3988:	8e ee       	ldi	r24, 0xEE	; 238
    398a:	e8 06       	cpc	r14, r24
    398c:	8f e5       	ldi	r24, 0x5F	; 95
    398e:	f8 06       	cpc	r15, r24
    3990:	50 f5       	brcc	.+84     	; 0x39e6 <_Z18validateTimeStringPcPma+0xac>
		validationType = 1;
    3992:	bb 24       	eor	r11, r11
    3994:	b3 94       	inc	r11
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    3996:	0f 2e       	mov	r0, r31
    3998:	c1 2c       	mov	r12, r1
    399a:	f6 e6       	ldi	r31, 0x66	; 102
    399c:	df 2e       	mov	r13, r31
    399e:	fe ee       	ldi	r31, 0xEE	; 238
    39a0:	ef 2e       	mov	r14, r31
    39a2:	ff e5       	ldi	r31, 0x5F	; 95
    39a4:	ff 2e       	mov	r15, r31
    39a6:	f0 2d       	mov	r31, r0
    39a8:	2f c0       	rjmp	.+94     	; 0x3a08 <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
    39aa:	68 54       	subi	r22, 0x48	; 72
    39ac:	75 44       	sbci	r23, 0x45	; 69
    39ae:	f1 f4       	brne	.+60     	; 0x39ec <_Z18validateTimeStringPcPma+0xb2>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    39b0:	c0 90 44 45 	lds	r12, 0x4544	; 0x804544 <g_event_start_epoch>
    39b4:	d0 90 45 45 	lds	r13, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    39b8:	e0 90 46 45 	lds	r14, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    39bc:	f0 90 47 45 	lds	r15, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    39c0:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    39c4:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    39c8:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    39cc:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    39d0:	c8 16       	cp	r12, r24
    39d2:	d9 06       	cpc	r13, r25
    39d4:	ea 06       	cpc	r14, r26
    39d6:	fb 06       	cpc	r15, r27
    39d8:	a0 f4       	brcc	.+40     	; 0x3a02 <_Z18validateTimeStringPcPma+0xc8>
    39da:	6c 01       	movw	r12, r24
    39dc:	7d 01       	movw	r14, r26
		validationType = 2;
    39de:	68 94       	set
    39e0:	bb 24       	eor	r11, r11
    39e2:	b1 f8       	bld	r11, 1
    39e4:	11 c0       	rjmp	.+34     	; 0x3a08 <_Z18validateTimeStringPcPma+0xce>
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
    39e6:	bb 24       	eor	r11, r11
    39e8:	b3 94       	inc	r11
    39ea:	0e c0       	rjmp	.+28     	; 0x3a08 <_Z18validateTimeStringPcPma+0xce>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    39ec:	b1 2c       	mov	r11, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    39ee:	0f 2e       	mov	r0, r31
    39f0:	c1 2c       	mov	r12, r1
    39f2:	f6 e6       	ldi	r31, 0x66	; 102
    39f4:	df 2e       	mov	r13, r31
    39f6:	fe ee       	ldi	r31, 0xEE	; 238
    39f8:	ef 2e       	mov	r14, r31
    39fa:	ff e5       	ldi	r31, 0x5F	; 95
    39fc:	ff 2e       	mov	r15, r31
    39fe:	f0 2d       	mov	r31, r0
    3a00:	03 c0       	rjmp	.+6      	; 0x3a08 <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
    3a02:	68 94       	set
    3a04:	bb 24       	eor	r11, r11
    3a06:	b1 f8       	bld	r11, 1
	}
	
	if(len == 10)
    3a08:	ca 30       	cpi	r28, 0x0A	; 10
    3a0a:	d1 05       	cpc	r29, r1
    3a0c:	39 f4       	brne	.+14     	; 0x3a1c <_Z18validateTimeStringPcPma+0xe2>
	{
		str[10] = '0';
    3a0e:	80 e3       	ldi	r24, 0x30	; 48
    3a10:	f8 01       	movw	r30, r16
    3a12:	82 87       	std	Z+10, r24	; 0x0a
		str[11] = '0';
    3a14:	83 87       	std	Z+11, r24	; 0x0b
		str[12] = '\0';
    3a16:	14 86       	std	Z+12, r1	; 0x0c
		len = 12;
    3a18:	cc e0       	ldi	r28, 0x0C	; 12
    3a1a:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if((len == 12) && (only_digits(str)))
    3a1c:	cc 30       	cpi	r28, 0x0C	; 12
    3a1e:	d1 05       	cpc	r29, r1
    3a20:	39 f4       	brne	.+14     	; 0x3a30 <_Z18validateTimeStringPcPma+0xf6>
    3a22:	c8 01       	movw	r24, r16
    3a24:	0e 94 38 3c 	call	0x7870	; 0x7870 <_Z11only_digitsPc>
    3a28:	88 23       	and	r24, r24
    3a2a:	21 f0       	breq	.+8      	; 0x3a34 <_Z18validateTimeStringPcPma+0xfa>
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	03 c0       	rjmp	.+6      	; 0x3a36 <_Z18validateTimeStringPcPma+0xfc>
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	01 c0       	rjmp	.+2      	; 0x3a36 <_Z18validateTimeStringPcPma+0xfc>
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	88 23       	and	r24, r24
    3a38:	09 f4       	brne	.+2      	; 0x3a3c <_Z18validateTimeStringPcPma+0x102>
    3a3a:	4b c0       	rjmp	.+150    	; 0x3ad2 <_Z18validateTimeStringPcPma+0x198>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    3a3c:	b8 01       	movw	r22, r16
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	0e 94 58 24 	call	0x48b0	; 0x48b0 <RTC_String2Epoch>
    3a46:	2b 01       	movw	r4, r22
    3a48:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    3a4a:	aa 2d       	mov	r26, r10
    3a4c:	aa 0c       	add	r10, r10
    3a4e:	bb 0b       	sbc	r27, r27
    3a50:	20 e1       	ldi	r18, 0x10	; 16
    3a52:	3e e0       	ldi	r19, 0x0E	; 14
    3a54:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <__usmulhisi3>
    3a58:	64 0d       	add	r22, r4
    3a5a:	75 1d       	adc	r23, r5
    3a5c:	86 1d       	adc	r24, r6
    3a5e:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    3a60:	c6 16       	cp	r12, r22
    3a62:	d7 06       	cpc	r13, r23
    3a64:	e8 06       	cpc	r14, r24
    3a66:	f9 06       	cpc	r15, r25
    3a68:	08 f4       	brcc	.+2      	; 0x3a6c <_Z18validateTimeStringPcPma+0x132>
    3a6a:	40 c0       	rjmp	.+128    	; 0x3aec <_Z18validateTimeStringPcPma+0x1b2>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    3a6c:	f1 e0       	ldi	r31, 0x01	; 1
    3a6e:	bf 12       	cpse	r11, r31
    3a70:	08 c0       	rjmp	.+16     	; 0x3a82 <_Z18validateTimeStringPcPma+0x148>
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
    3a72:	85 e1       	ldi	r24, 0x15	; 21
    3a74:	93 e4       	ldi	r25, 0x43	; 67
    3a76:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	70 e0       	ldi	r23, 0x00	; 0
    3a7e:	cb 01       	movw	r24, r22
    3a80:	35 c0       	rjmp	.+106    	; 0x3aec <_Z18validateTimeStringPcPma+0x1b2>
		{
			if(validationType == 1)         /* start time validation */
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
			}
			else if(validationType == 2)    /* finish time validation */
    3a82:	22 e0       	ldi	r18, 0x02	; 2
    3a84:	b2 12       	cpse	r11, r18
    3a86:	1d c0       	rjmp	.+58     	; 0x3ac2 <_Z18validateTimeStringPcPma+0x188>
			{
				if(ep < g_current_epoch)
    3a88:	00 91 55 45 	lds	r16, 0x4555	; 0x804555 <g_current_epoch>
    3a8c:	10 91 56 45 	lds	r17, 0x4556	; 0x804556 <g_current_epoch+0x1>
    3a90:	20 91 57 45 	lds	r18, 0x4557	; 0x804557 <g_current_epoch+0x2>
    3a94:	30 91 58 45 	lds	r19, 0x4558	; 0x804558 <g_current_epoch+0x3>
    3a98:	60 17       	cp	r22, r16
    3a9a:	71 07       	cpc	r23, r17
    3a9c:	82 07       	cpc	r24, r18
    3a9e:	93 07       	cpc	r25, r19
    3aa0:	40 f4       	brcc	.+16     	; 0x3ab2 <_Z18validateTimeStringPcPma+0x178>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
    3aa2:	8a e2       	ldi	r24, 0x2A	; 42
    3aa4:	93 e4       	ldi	r25, 0x43	; 67
    3aa6:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3aaa:	60 e0       	ldi	r22, 0x00	; 0
    3aac:	70 e0       	ldi	r23, 0x00	; 0
    3aae:	cb 01       	movw	r24, r22
    3ab0:	1d c0       	rjmp	.+58     	; 0x3aec <_Z18validateTimeStringPcPma+0x1b2>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
				}
				else
				{
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
    3ab2:	80 e4       	ldi	r24, 0x40	; 64
    3ab4:	93 e4       	ldi	r25, 0x43	; 67
    3ab6:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3aba:	60 e0       	ldi	r22, 0x00	; 0
    3abc:	70 e0       	ldi	r23, 0x00	; 0
    3abe:	cb 01       	movw	r24, r22
    3ac0:	15 c0       	rjmp	.+42     	; 0x3aec <_Z18validateTimeStringPcPma+0x1b2>
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
				}
			}
			else    /* current time validation */
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
    3ac2:	8b e5       	ldi	r24, 0x5B	; 91
    3ac4:	93 e4       	ldi	r25, 0x43	; 67
    3ac6:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	cb 01       	movw	r24, r22
    3ad0:	0d c0       	rjmp	.+26     	; 0x3aec <_Z18validateTimeStringPcPma+0x1b2>
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
			}
		}
	}
	else if(len)
    3ad2:	cd 2b       	or	r28, r29
    3ad4:	41 f0       	breq	.+16     	; 0x3ae6 <_Z18validateTimeStringPcPma+0x1ac>
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
    3ad6:	8f e6       	ldi	r24, 0x6F	; 111
    3ad8:	93 e4       	ldi	r25, 0x43	; 67
    3ada:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	70 e0       	ldi	r23, 0x00	; 0
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	03 c0       	rjmp	.+6      	; 0x3aec <_Z18validateTimeStringPcPma+0x1b2>
    3ae6:	60 e0       	ldi	r22, 0x00	; 0
    3ae8:	70 e0       	ldi	r23, 0x00	; 0
    3aea:	cb 01       	movw	r24, r22
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
	}

	return(valid);
}
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	1f 91       	pop	r17
    3af2:	0f 91       	pop	r16
    3af4:	ff 90       	pop	r15
    3af6:	ef 90       	pop	r14
    3af8:	df 90       	pop	r13
    3afa:	cf 90       	pop	r12
    3afc:	bf 90       	pop	r11
    3afe:	af 90       	pop	r10
    3b00:	7f 90       	pop	r7
    3b02:	6f 90       	pop	r6
    3b04:	5f 90       	pop	r5
    3b06:	4f 90       	pop	r4
    3b08:	08 95       	ret

00003b0a <_Z14reportTimeTillmmPKcS0_>:


BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    3b0a:	2f 92       	push	r2
    3b0c:	3f 92       	push	r3
    3b0e:	4f 92       	push	r4
    3b10:	5f 92       	push	r5
    3b12:	6f 92       	push	r6
    3b14:	7f 92       	push	r7
    3b16:	8f 92       	push	r8
    3b18:	9f 92       	push	r9
    3b1a:	af 92       	push	r10
    3b1c:	bf 92       	push	r11
    3b1e:	cf 92       	push	r12
    3b20:	df 92       	push	r13
    3b22:	ef 92       	push	r14
    3b24:	ff 92       	push	r15
    3b26:	0f 93       	push	r16
    3b28:	1f 93       	push	r17
    3b2a:	cf 93       	push	r28
    3b2c:	df 93       	push	r29
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	2c 97       	sbiw	r28, 0x0c	; 12
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	de bf       	out	0x3e, r29	; 62
    3b38:	2b 01       	movw	r4, r22
    3b3a:	3c 01       	movw	r6, r24
    3b3c:	49 01       	movw	r8, r18
    3b3e:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    3b40:	62 17       	cp	r22, r18
    3b42:	73 07       	cpc	r23, r19
    3b44:	84 07       	cpc	r24, r20
    3b46:	95 07       	cpc	r25, r21
    3b48:	48 f0       	brcs	.+18     	; 0x3b5c <_Z14reportTimeTillmmPKcS0_+0x52>
	{
		failure = TRUE;
		if(failMsg)
    3b4a:	e1 14       	cp	r14, r1
    3b4c:	f1 04       	cpc	r15, r1
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <_Z14reportTimeTillmmPKcS0_+0x48>
    3b50:	fd c0       	rjmp	.+506    	; 0x3d4c <_Z14reportTimeTillmmPKcS0_+0x242>
		{
			sb_send_string((char*)failMsg);
    3b52:	c7 01       	movw	r24, r14
    3b54:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	f9 c0       	rjmp	.+498    	; 0x3d4e <_Z14reportTimeTillmmPKcS0_+0x244>
			sb_send_string((char*)failMsg);
		}
	}
	else
	{
		if(prefix)
    3b5c:	01 15       	cp	r16, r1
    3b5e:	11 05       	cpc	r17, r1
    3b60:	19 f0       	breq	.+6      	; 0x3b68 <_Z14reportTimeTillmmPKcS0_+0x5e>
		{
			sb_send_string((char*)prefix);
    3b62:	c8 01       	movw	r24, r16
    3b64:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
		}
		time_t dif = until - from;
    3b68:	75 01       	movw	r14, r10
    3b6a:	64 01       	movw	r12, r8
    3b6c:	c4 18       	sub	r12, r4
    3b6e:	d5 08       	sbc	r13, r5
    3b70:	e6 08       	sbc	r14, r6
    3b72:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    3b74:	c7 01       	movw	r24, r14
    3b76:	b6 01       	movw	r22, r12
    3b78:	20 e8       	ldi	r18, 0x80	; 128
    3b7a:	33 e3       	ldi	r19, 0x33	; 51
    3b7c:	41 ee       	ldi	r20, 0xE1	; 225
    3b7e:	51 e0       	ldi	r21, 0x01	; 1
    3b80:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    3b84:	29 01       	movw	r4, r18
    3b86:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    3b88:	44 27       	eor	r20, r20
    3b8a:	55 27       	eor	r21, r21
    3b8c:	60 e8       	ldi	r22, 0x80	; 128
    3b8e:	73 e3       	ldi	r23, 0x33	; 51
    3b90:	81 ee       	ldi	r24, 0xE1	; 225
    3b92:	91 e0       	ldi	r25, 0x01	; 1
    3b94:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <__mulsi3>
    3b98:	c6 1a       	sub	r12, r22
    3b9a:	d7 0a       	sbc	r13, r23
    3b9c:	e8 0a       	sbc	r14, r24
    3b9e:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    3ba0:	c7 01       	movw	r24, r14
    3ba2:	b6 01       	movw	r22, r12
    3ba4:	20 e8       	ldi	r18, 0x80	; 128
    3ba6:	31 e5       	ldi	r19, 0x51	; 81
    3ba8:	41 e0       	ldi	r20, 0x01	; 1
    3baa:	50 e0       	ldi	r21, 0x00	; 0
    3bac:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    3bb0:	49 01       	movw	r8, r18
    3bb2:	5a 01       	movw	r10, r20
    3bb4:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    3bb6:	44 27       	eor	r20, r20
    3bb8:	55 27       	eor	r21, r21
    3bba:	60 e8       	ldi	r22, 0x80	; 128
    3bbc:	71 e5       	ldi	r23, 0x51	; 81
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <__mulsi3>
    3bc6:	c6 1a       	sub	r12, r22
    3bc8:	d7 0a       	sbc	r13, r23
    3bca:	e8 0a       	sbc	r14, r24
    3bcc:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    3bce:	c7 01       	movw	r24, r14
    3bd0:	b6 01       	movw	r22, r12
    3bd2:	20 e1       	ldi	r18, 0x10	; 16
    3bd4:	3e e0       	ldi	r19, 0x0E	; 14
    3bd6:	40 e0       	ldi	r20, 0x00	; 0
    3bd8:	50 e0       	ldi	r21, 0x00	; 0
    3bda:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    3bde:	29 83       	std	Y+1, r18	; 0x01
    3be0:	3a 83       	std	Y+2, r19	; 0x02
    3be2:	4b 83       	std	Y+3, r20	; 0x03
    3be4:	5c 83       	std	Y+4, r21	; 0x04
    3be6:	29 81       	ldd	r18, Y+1	; 0x01
    3be8:	3a 81       	ldd	r19, Y+2	; 0x02
    3bea:	29 87       	std	Y+9, r18	; 0x09
    3bec:	3a 87       	std	Y+10, r19	; 0x0a
		hold -= (hours * HOUR);
    3bee:	29 81       	ldd	r18, Y+1	; 0x01
    3bf0:	3a 81       	ldd	r19, Y+2	; 0x02
    3bf2:	4b 81       	ldd	r20, Y+3	; 0x03
    3bf4:	5c 81       	ldd	r21, Y+4	; 0x04
    3bf6:	44 27       	eor	r20, r20
    3bf8:	55 27       	eor	r21, r21
    3bfa:	a0 e1       	ldi	r26, 0x10	; 16
    3bfc:	be e0       	ldi	r27, 0x0E	; 14
    3bfe:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__muluhisi3>
    3c02:	c6 1a       	sub	r12, r22
    3c04:	d7 0a       	sbc	r13, r23
    3c06:	e8 0a       	sbc	r14, r24
    3c08:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    3c0a:	c7 01       	movw	r24, r14
    3c0c:	b6 01       	movw	r22, r12
    3c0e:	2c e3       	ldi	r18, 0x3C	; 60
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e0       	ldi	r20, 0x00	; 0
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    3c1a:	2d 83       	std	Y+5, r18	; 0x05
    3c1c:	3e 83       	std	Y+6, r19	; 0x06
    3c1e:	4f 83       	std	Y+7, r20	; 0x07
    3c20:	58 87       	std	Y+8, r21	; 0x08
    3c22:	0d 81       	ldd	r16, Y+5	; 0x05
    3c24:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    3c26:	2c e3       	ldi	r18, 0x3C	; 60
    3c28:	20 9f       	mul	r18, r16
    3c2a:	c0 01       	movw	r24, r0
    3c2c:	21 9f       	mul	r18, r17
    3c2e:	90 0d       	add	r25, r0
    3c30:	11 24       	eor	r1, r1
    3c32:	a6 01       	movw	r20, r12
    3c34:	48 1b       	sub	r20, r24
    3c36:	59 0b       	sbc	r21, r25
    3c38:	4b 87       	std	Y+11, r20	; 0x0b
    3c3a:	5c 87       	std	Y+12, r21	; 0x0c

		g_tempStr[0] = '\0';
    3c3c:	10 92 d5 44 	sts	0x44D5, r1	; 0x8044d5 <_ZL9g_tempStr>

		if(years)
    3c40:	41 14       	cp	r4, r1
    3c42:	51 04       	cpc	r5, r1
    3c44:	b1 f0       	breq	.+44     	; 0x3c72 <_Z14reportTimeTillmmPKcS0_+0x168>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    3c46:	5f 92       	push	r5
    3c48:	4f 92       	push	r4
    3c4a:	83 e8       	ldi	r24, 0x83	; 131
    3c4c:	93 e4       	ldi	r25, 0x43	; 67
    3c4e:	9f 93       	push	r25
    3c50:	8f 93       	push	r24
    3c52:	85 ed       	ldi	r24, 0xD5	; 213
    3c54:	94 e4       	ldi	r25, 0x44	; 68
    3c56:	9f 93       	push	r25
    3c58:	8f 93       	push	r24
    3c5a:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
			sb_send_string(g_tempStr);
    3c5e:	85 ed       	ldi	r24, 0xD5	; 213
    3c60:	94 e4       	ldi	r25, 0x44	; 68
    3c62:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
		}

		if(days)
    3c72:	23 28       	or	r2, r3
    3c74:	b1 f0       	breq	.+44     	; 0x3ca2 <_Z14reportTimeTillmmPKcS0_+0x198>
		{
			sprintf(g_tempStr, "%d days ", days);
    3c76:	9f 92       	push	r9
    3c78:	8f 92       	push	r8
    3c7a:	8b e8       	ldi	r24, 0x8B	; 139
    3c7c:	93 e4       	ldi	r25, 0x43	; 67
    3c7e:	9f 93       	push	r25
    3c80:	8f 93       	push	r24
    3c82:	85 ed       	ldi	r24, 0xD5	; 213
    3c84:	94 e4       	ldi	r25, 0x44	; 68
    3c86:	9f 93       	push	r25
    3c88:	8f 93       	push	r24
    3c8a:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
			sb_send_string(g_tempStr);
    3c8e:	85 ed       	ldi	r24, 0xD5	; 213
    3c90:	94 e4       	ldi	r25, 0x44	; 68
    3c92:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
		}

		if(hours)
    3ca2:	89 85       	ldd	r24, Y+9	; 0x09
    3ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca6:	89 2b       	or	r24, r25
    3ca8:	c1 f0       	breq	.+48     	; 0x3cda <_Z14reportTimeTillmmPKcS0_+0x1d0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    3caa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cac:	9f 93       	push	r25
    3cae:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb0:	ef 93       	push	r30
    3cb2:	84 e9       	ldi	r24, 0x94	; 148
    3cb4:	93 e4       	ldi	r25, 0x43	; 67
    3cb6:	9f 93       	push	r25
    3cb8:	8f 93       	push	r24
    3cba:	85 ed       	ldi	r24, 0xD5	; 213
    3cbc:	94 e4       	ldi	r25, 0x44	; 68
    3cbe:	9f 93       	push	r25
    3cc0:	8f 93       	push	r24
    3cc2:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
			sb_send_string(g_tempStr);
    3cc6:	85 ed       	ldi	r24, 0xD5	; 213
    3cc8:	94 e4       	ldi	r25, 0x44	; 68
    3cca:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
		}

		if(minutes)
    3cda:	01 2b       	or	r16, r17
    3cdc:	c1 f0       	breq	.+48     	; 0x3d0e <_Z14reportTimeTillmmPKcS0_+0x204>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    3cde:	fe 81       	ldd	r31, Y+6	; 0x06
    3ce0:	ff 93       	push	r31
    3ce2:	2d 81       	ldd	r18, Y+5	; 0x05
    3ce4:	2f 93       	push	r18
    3ce6:	8c e9       	ldi	r24, 0x9C	; 156
    3ce8:	93 e4       	ldi	r25, 0x43	; 67
    3cea:	9f 93       	push	r25
    3cec:	8f 93       	push	r24
    3cee:	85 ed       	ldi	r24, 0xD5	; 213
    3cf0:	94 e4       	ldi	r25, 0x44	; 68
    3cf2:	9f 93       	push	r25
    3cf4:	8f 93       	push	r24
    3cf6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
			sb_send_string(g_tempStr);
    3cfa:	85 ed       	ldi	r24, 0xD5	; 213
    3cfc:	94 e4       	ldi	r25, 0x44	; 68
    3cfe:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    3d02:	0f 90       	pop	r0
    3d04:	0f 90       	pop	r0
    3d06:	0f 90       	pop	r0
    3d08:	0f 90       	pop	r0
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    3d0e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d10:	3f 93       	push	r19
    3d12:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d14:	4f 93       	push	r20
    3d16:	84 ea       	ldi	r24, 0xA4	; 164
    3d18:	93 e4       	ldi	r25, 0x43	; 67
    3d1a:	9f 93       	push	r25
    3d1c:	8f 93       	push	r24
    3d1e:	85 ed       	ldi	r24, 0xD5	; 213
    3d20:	94 e4       	ldi	r25, 0x44	; 68
    3d22:	9f 93       	push	r25
    3d24:	8f 93       	push	r24
    3d26:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
		sb_send_string(g_tempStr);
    3d2a:	85 ed       	ldi	r24, 0xD5	; 213
    3d2c:	94 e4       	ldi	r25, 0x44	; 68
    3d2e:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>

		sb_send_NewLine();
    3d32:	0e 94 9e 31 	call	0x633c	; 0x633c <sb_send_NewLine>
		g_tempStr[0] = '\0';
    3d36:	e5 ed       	ldi	r30, 0xD5	; 213
    3d38:	f4 e4       	ldi	r31, 0x44	; 68
    3d3a:	10 82       	st	Z, r1
    3d3c:	0f 90       	pop	r0
    3d3e:	0f 90       	pop	r0
    3d40:	0f 90       	pop	r0
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
}


BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	01 c0       	rjmp	.+2      	; 0x3d4e <_Z14reportTimeTillmmPKcS0_+0x244>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
		sb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    3d4e:	2c 96       	adiw	r28, 0x0c	; 12
    3d50:	cd bf       	out	0x3d, r28	; 61
    3d52:	de bf       	out	0x3e, r29	; 62
    3d54:	df 91       	pop	r29
    3d56:	cf 91       	pop	r28
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	ff 90       	pop	r15
    3d5e:	ef 90       	pop	r14
    3d60:	df 90       	pop	r13
    3d62:	cf 90       	pop	r12
    3d64:	bf 90       	pop	r11
    3d66:	af 90       	pop	r10
    3d68:	9f 90       	pop	r9
    3d6a:	8f 90       	pop	r8
    3d6c:	7f 90       	pop	r7
    3d6e:	6f 90       	pop	r6
    3d70:	5f 90       	pop	r5
    3d72:	4f 90       	pop	r4
    3d74:	3f 90       	pop	r3
    3d76:	2f 90       	pop	r2
    3d78:	08 95       	ret

00003d7a <_Z23clockConfigurationCheckv>:



ConfigurationState_t clockConfigurationCheck(void)
{
    3d7a:	0f 93       	push	r16
    3d7c:	1f 93       	push	r17
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
    3d7e:	80 91 48 45 	lds	r24, 0x4548	; 0x804548 <g_event_finish_epoch>
    3d82:	90 91 49 45 	lds	r25, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    3d86:	a0 91 4a 45 	lds	r26, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    3d8a:	b0 91 4b 45 	lds	r27, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    3d8e:	81 15       	cp	r24, r1
    3d90:	26 e6       	ldi	r18, 0x66	; 102
    3d92:	92 07       	cpc	r25, r18
    3d94:	2e ee       	ldi	r18, 0xEE	; 238
    3d96:	a2 07       	cpc	r26, r18
    3d98:	2f e5       	ldi	r18, 0x5F	; 95
    3d9a:	b2 07       	cpc	r27, r18
    3d9c:	d8 f1       	brcs	.+118    	; 0x3e14 <_Z23clockConfigurationCheckv+0x9a>
    3d9e:	40 91 44 45 	lds	r20, 0x4544	; 0x804544 <g_event_start_epoch>
    3da2:	50 91 45 45 	lds	r21, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    3da6:	60 91 46 45 	lds	r22, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    3daa:	70 91 47 45 	lds	r23, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    3dae:	41 15       	cp	r20, r1
    3db0:	e6 e6       	ldi	r30, 0x66	; 102
    3db2:	5e 07       	cpc	r21, r30
    3db4:	ee ee       	ldi	r30, 0xEE	; 238
    3db6:	6e 07       	cpc	r22, r30
    3db8:	ef e5       	ldi	r30, 0x5F	; 95
    3dba:	7e 07       	cpc	r23, r30
    3dbc:	68 f1       	brcs	.+90     	; 0x3e18 <_Z23clockConfigurationCheckv+0x9e>
    3dbe:	00 91 55 45 	lds	r16, 0x4555	; 0x804555 <g_current_epoch>
    3dc2:	10 91 56 45 	lds	r17, 0x4556	; 0x804556 <g_current_epoch+0x1>
    3dc6:	20 91 57 45 	lds	r18, 0x4557	; 0x804557 <g_current_epoch+0x2>
    3dca:	30 91 58 45 	lds	r19, 0x4558	; 0x804558 <g_current_epoch+0x3>
    3dce:	01 15       	cp	r16, r1
    3dd0:	e6 e6       	ldi	r30, 0x66	; 102
    3dd2:	1e 07       	cpc	r17, r30
    3dd4:	ee ee       	ldi	r30, 0xEE	; 238
    3dd6:	2e 07       	cpc	r18, r30
    3dd8:	ef e5       	ldi	r30, 0x5F	; 95
    3dda:	3e 07       	cpc	r19, r30
    3ddc:	f8 f0       	brcs	.+62     	; 0x3e1c <_Z23clockConfigurationCheckv+0xa2>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
    3dde:	48 17       	cp	r20, r24
    3de0:	59 07       	cpc	r21, r25
    3de2:	6a 07       	cpc	r22, r26
    3de4:	7b 07       	cpc	r23, r27
    3de6:	e0 f4       	brcc	.+56     	; 0x3e20 <_Z23clockConfigurationCheckv+0xa6>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
    3de8:	80 17       	cp	r24, r16
    3dea:	91 07       	cpc	r25, r17
    3dec:	a2 07       	cpc	r26, r18
    3dee:	b3 07       	cpc	r27, r19
    3df0:	c8 f0       	brcs	.+50     	; 0x3e24 <_Z23clockConfigurationCheckv+0xaa>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_start_epoch)       /* Event should be running */
    3df2:	40 17       	cp	r20, r16
    3df4:	51 07       	cpc	r21, r17
    3df6:	62 07       	cpc	r22, r18
    3df8:	73 07       	cpc	r23, r19
    3dfa:	30 f4       	brcc	.+12     	; 0x3e08 <_Z23clockConfigurationCheckv+0x8e>
	{
		if(g_transmissions_disabled)
    3dfc:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <g_transmissions_disabled>
    3e00:	88 23       	and	r24, r24
    3e02:	91 f0       	breq	.+36     	; 0x3e28 <_Z23clockConfigurationCheckv+0xae>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
    3e04:	83 e0       	ldi	r24, 0x03	; 3
    3e06:	13 c0       	rjmp	.+38     	; 0x3e2e <_Z23clockConfigurationCheckv+0xb4>
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
		}
	}
	else if(!g_use_rtc_for_startstop)
    3e08:	80 91 59 45 	lds	r24, 0x4559	; 0x804559 <g_use_rtc_for_startstop>
    3e0c:	81 11       	cpse	r24, r1
    3e0e:	0e c0       	rjmp	.+28     	; 0x3e2c <_Z23clockConfigurationCheckv+0xb2>
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
    3e10:	84 e0       	ldi	r24, 0x04	; 4
    3e12:	0d c0       	rjmp	.+26     	; 0x3e2e <_Z23clockConfigurationCheckv+0xb4>

ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
	{
		return(CONFIGURATION_ERROR);
    3e14:	82 e0       	ldi	r24, 0x02	; 2
    3e16:	0b c0       	rjmp	.+22     	; 0x3e2e <_Z23clockConfigurationCheckv+0xb4>
    3e18:	82 e0       	ldi	r24, 0x02	; 2
    3e1a:	09 c0       	rjmp	.+18     	; 0x3e2e <_Z23clockConfigurationCheckv+0xb4>
    3e1c:	82 e0       	ldi	r24, 0x02	; 2
    3e1e:	07 c0       	rjmp	.+14     	; 0x3e2e <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
	{
		return(CONFIGURATION_ERROR);
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	05 c0       	rjmp	.+10     	; 0x3e2e <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
	{
		return(CONFIGURATION_ERROR);
    3e24:	82 e0       	ldi	r24, 0x02	; 2
    3e26:	03 c0       	rjmp	.+6      	; 0x3e2e <_Z23clockConfigurationCheckv+0xb4>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
		}
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
    3e28:	85 e0       	ldi	r24, 0x05	; 5
    3e2a:	01 c0       	rjmp	.+2      	; 0x3e2e <_Z23clockConfigurationCheckv+0xb4>
	else if(!g_use_rtc_for_startstop)
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
	}

	return(WAITING_FOR_START);  /* Future event hasn't started yet */
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
}
    3e2e:	1f 91       	pop	r17
    3e30:	0f 91       	pop	r16
    3e32:	08 95       	ret

00003e34 <_Z18reportConfigErrorsv>:

void reportConfigErrors(void)
{
	g_current_epoch = ds3231_get_epoch(null);
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	0e 94 0b 23 	call	0x4616	; 0x4616 <ds3231_get_epoch>
    3e3c:	60 93 55 45 	sts	0x4555, r22	; 0x804555 <g_current_epoch>
    3e40:	70 93 56 45 	sts	0x4556, r23	; 0x804556 <g_current_epoch+0x1>
    3e44:	80 93 57 45 	sts	0x4557, r24	; 0x804557 <g_current_epoch+0x2>
    3e48:	90 93 58 45 	sts	0x4558, r25	; 0x804558 <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    3e4c:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    3e50:	81 11       	cpse	r24, r1
    3e52:	04 c0       	rjmp	.+8      	; 0x3e5c <_Z18reportConfigErrorsv+0x28>
	{
		sb_send_string(TEXT_SET_ID_TXT);
    3e54:	8b ea       	ldi	r24, 0xAB	; 171
    3e56:	93 e4       	ldi	r25, 0x43	; 67
    3e58:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    3e5c:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    3e60:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    3e64:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    3e68:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    3e6c:	81 15       	cp	r24, r1
    3e6e:	96 46       	sbci	r25, 0x66	; 102
    3e70:	ae 4e       	sbci	r26, 0xEE	; 238
    3e72:	bf 45       	sbci	r27, 0x5F	; 95
    3e74:	20 f4       	brcc	.+8      	; 0x3e7e <_Z18reportConfigErrorsv+0x4a>
	{
		sb_send_string(TEXT_SET_TIME_TXT);
    3e76:	8c ec       	ldi	r24, 0xCC	; 204
    3e78:	93 e4       	ldi	r25, 0x43	; 67
    3e7a:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    3e7e:	40 91 48 45 	lds	r20, 0x4548	; 0x804548 <g_event_finish_epoch>
    3e82:	50 91 49 45 	lds	r21, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    3e86:	60 91 4a 45 	lds	r22, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    3e8a:	70 91 4b 45 	lds	r23, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    3e8e:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    3e92:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    3e96:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    3e9a:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    3e9e:	48 17       	cp	r20, r24
    3ea0:	59 07       	cpc	r21, r25
    3ea2:	6a 07       	cpc	r22, r26
    3ea4:	7b 07       	cpc	r23, r27
    3ea6:	b0 f4       	brcc	.+44     	; 0x3ed4 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    3ea8:	40 91 44 45 	lds	r20, 0x4544	; 0x804544 <g_event_start_epoch>
    3eac:	50 91 45 45 	lds	r21, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    3eb0:	60 91 46 45 	lds	r22, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    3eb4:	70 91 47 45 	lds	r23, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    3eb8:	48 17       	cp	r20, r24
    3eba:	59 07       	cpc	r21, r25
    3ebc:	6a 07       	cpc	r22, r26
    3ebe:	7b 07       	cpc	r23, r27
    3ec0:	20 f4       	brcc	.+8      	; 0x3eca <_Z18reportConfigErrorsv+0x96>
		{
			sb_send_string(TEXT_SET_START_TXT);
    3ec2:	84 ef       	ldi	r24, 0xF4	; 244
    3ec4:	93 e4       	ldi	r25, 0x43	; 67
    3ec6:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
		}

		sb_send_string(TEXT_SET_FINISH_TXT);
    3eca:	8a e1       	ldi	r24, 0x1A	; 26
    3ecc:	94 e4       	ldi	r25, 0x44	; 68
    3ece:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    3ed2:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    3ed4:	40 91 44 45 	lds	r20, 0x4544	; 0x804544 <g_event_start_epoch>
    3ed8:	50 91 45 45 	lds	r21, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    3edc:	60 91 46 45 	lds	r22, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    3ee0:	70 91 47 45 	lds	r23, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    3ee4:	48 17       	cp	r20, r24
    3ee6:	59 07       	cpc	r21, r25
    3ee8:	6a 07       	cpc	r22, r26
    3eea:	7b 07       	cpc	r23, r27
    3eec:	70 f4       	brcc	.+28     	; 0x3f0a <_Z18reportConfigErrorsv+0xd6>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    3eee:	41 15       	cp	r20, r1
    3ef0:	56 46       	sbci	r21, 0x66	; 102
    3ef2:	6e 4e       	sbci	r22, 0xEE	; 238
    3ef4:	7f 45       	sbci	r23, 0x5F	; 95
    3ef6:	28 f4       	brcc	.+10     	; 0x3f02 <_Z18reportConfigErrorsv+0xce>
		{
			sb_send_string(TEXT_SET_START_TXT);
    3ef8:	84 ef       	ldi	r24, 0xF4	; 244
    3efa:	93 e4       	ldi	r25, 0x43	; 67
    3efc:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    3f00:	08 95       	ret
		}
		else
		{
			sb_send_string((char*)"Event running...\n");
    3f02:	81 e4       	ldi	r24, 0x41	; 65
    3f04:	94 e4       	ldi	r25, 0x44	; 68
    3f06:	0e 94 b3 31 	call	0x6366	; 0x6366 <sb_send_string>
    3f0a:	08 95       	ret

00003f0c <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
    3f0c:	0f 93       	push	r16
    3f0e:	1f 93       	push	r17
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	ec 01       	movw	r28, r24
    3f16:	8b 01       	movw	r16, r22
    3f18:	01 97       	sbiw	r24, 0x01	; 1
    3f1a:	39 f4       	brne	.+14     	; 0x3f2a <_Z41__static_initialization_and_destruction_0ii+0x1e>
    3f1c:	6f 3f       	cpi	r22, 0xFF	; 255
    3f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f20:	21 f4       	brne	.+8      	; 0x3f2a <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile BOOL g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { FALSE, FALSE, FALSE, FALSE, FALSE };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    3f22:	83 e4       	ldi	r24, 0x43	; 67
    3f24:	95 e4       	ldi	r25, 0x45	; 69
    3f26:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN13EepromManagerC1Ev>
    3f2a:	cd 2b       	or	r28, r29
    3f2c:	39 f4       	brne	.+14     	; 0x3f3c <_Z41__static_initialization_and_destruction_0ii+0x30>
    3f2e:	0f 3f       	cpi	r16, 0xFF	; 255
    3f30:	1f 4f       	sbci	r17, 0xFF	; 255
    3f32:	21 f4       	brne	.+8      	; 0x3f3c <_Z41__static_initialization_and_destruction_0ii+0x30>
    3f34:	83 e4       	ldi	r24, 0x43	; 67
    3f36:	95 e4       	ldi	r25, 0x45	; 69
    3f38:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	1f 91       	pop	r17
    3f42:	0f 91       	pop	r16
    3f44:	08 95       	ret

00003f46 <_GLOBAL__sub_I_g_battery_type>:
    3f46:	6f ef       	ldi	r22, 0xFF	; 255
    3f48:	7f ef       	ldi	r23, 0xFF	; 255
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <_Z41__static_initialization_and_destruction_0ii>
    3f52:	08 95       	ret

00003f54 <_GLOBAL__sub_D_g_battery_type>:
    3f54:	6f ef       	ldi	r22, 0xFF	; 255
    3f56:	7f ef       	ldi	r23, 0xFF	; 255
    3f58:	80 e0       	ldi	r24, 0x00	; 0
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <_Z41__static_initialization_and_destruction_0ii>
    3f60:	08 95       	ret

00003f62 <_ZL9PORT_initv>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    3f62:	e0 e6       	ldi	r30, 0x60	; 96
    3f64:	f4 e0       	ldi	r31, 0x04	; 4
    3f66:	82 89       	ldd	r24, Z+18	; 0x12
    3f68:	88 7f       	andi	r24, 0xF8	; 248
    3f6a:	82 8b       	std	Z+18, r24	; 0x12
    3f6c:	82 89       	ldd	r24, Z+18	; 0x12
    3f6e:	84 60       	ori	r24, 0x04	; 4
    3f70:	82 8b       	std	Z+18, r24	; 0x12
    3f72:	83 89       	ldd	r24, Z+19	; 0x13
    3f74:	88 7f       	andi	r24, 0xF8	; 248
    3f76:	83 8b       	std	Z+19, r24	; 0x13
    3f78:	83 89       	ldd	r24, Z+19	; 0x13
    3f7a:	84 60       	ori	r24, 0x04	; 4
    3f7c:	83 8b       	std	Z+19, r24	; 0x13
    3f7e:	84 89       	ldd	r24, Z+20	; 0x14
    3f80:	88 7f       	andi	r24, 0xF8	; 248
    3f82:	84 8b       	std	Z+20, r24	; 0x14
    3f84:	84 89       	ldd	r24, Z+20	; 0x14
    3f86:	84 60       	ori	r24, 0x04	; 4
    3f88:	84 8b       	std	Z+20, r24	; 0x14
    3f8a:	85 89       	ldd	r24, Z+21	; 0x15
    3f8c:	88 7f       	andi	r24, 0xF8	; 248
    3f8e:	85 8b       	std	Z+21, r24	; 0x15
    3f90:	85 89       	ldd	r24, Z+21	; 0x15
    3f92:	84 60       	ori	r24, 0x04	; 4
    3f94:	85 8b       	std	Z+21, r24	; 0x15
    3f96:	82 89       	ldd	r24, Z+18	; 0x12
    3f98:	87 7f       	andi	r24, 0xF7	; 247
    3f9a:	82 8b       	std	Z+18, r24	; 0x12
    3f9c:	83 89       	ldd	r24, Z+19	; 0x13
    3f9e:	87 7f       	andi	r24, 0xF7	; 247
    3fa0:	83 8b       	std	Z+19, r24	; 0x13
    3fa2:	84 89       	ldd	r24, Z+20	; 0x14
    3fa4:	87 7f       	andi	r24, 0xF7	; 247
    3fa6:	84 8b       	std	Z+20, r24	; 0x14
    3fa8:	85 89       	ldd	r24, Z+21	; 0x15
    3faa:	87 7f       	andi	r24, 0xF7	; 247
    3fac:	85 8b       	std	Z+21, r24	; 0x15
    3fae:	08 95       	ret

00003fb0 <_ZL10VREF0_initv>:
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    3fb6:	08 95       	ret

00003fb8 <_ZL9ADC0_initb>:
    3fb8:	9a e0       	ldi	r25, 0x0A	; 10
    3fba:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
    3fbe:	88 23       	and	r24, r24
    3fc0:	41 f0       	breq	.+16     	; 0x3fd2 <_ZL9ADC0_initb+0x1a>
    3fc2:	e0 e0       	ldi	r30, 0x00	; 0
    3fc4:	f6 e0       	ldi	r31, 0x06	; 6
    3fc6:	83 e0       	ldi	r24, 0x03	; 3
    3fc8:	80 83       	st	Z, r24
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	84 87       	std	Z+12, r24	; 0x0c
    3fce:	82 87       	std	Z+10, r24	; 0x0a
    3fd0:	08 95       	ret
    3fd2:	e0 e0       	ldi	r30, 0x00	; 0
    3fd4:	f6 e0       	ldi	r31, 0x06	; 6
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	80 83       	st	Z, r24
    3fda:	14 86       	std	Z+12, r1	; 0x0c
    3fdc:	08 95       	ret

00003fde <_ZL16ADC0_SYSTEM_initb>:
    3fde:	cf 93       	push	r28
    3fe0:	c8 2f       	mov	r28, r24
    3fe2:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_ZL9PORT_initv>
    3fe6:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZL10VREF0_initv>
    3fea:	8c 2f       	mov	r24, r28
    3fec:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <_ZL9ADC0_initb>
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	80 93 6f 45 	sts	0x456F, r24	; 0x80456f <_ZL17g_adc_initialized>
    3ff6:	cf 91       	pop	r28
    3ff8:	08 95       	ret

00003ffa <_ZL20ADC0_SYSTEM_shutdownv>:
    3ffa:	e0 e0       	ldi	r30, 0x00	; 0
    3ffc:	f6 e0       	ldi	r31, 0x06	; 6
    3ffe:	14 86       	std	Z+12, r1	; 0x0c
    4000:	10 82       	st	Z, r1
    4002:	10 92 6f 45 	sts	0x456F, r1	; 0x80456f <_ZL17g_adc_initialized>
    4006:	08 95       	ret

00004008 <_Z41__static_initialization_and_destruction_0ii>:
    4008:	ef 92       	push	r14
    400a:	ff 92       	push	r15
    400c:	0f 93       	push	r16
    400e:	1f 93       	push	r17
    4010:	cf 93       	push	r28
    4012:	df 93       	push	r29
    4014:	ec 01       	movw	r28, r24
    4016:	7b 01       	movw	r14, r22
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	79 f4       	brne	.+30     	; 0x403a <_Z41__static_initialization_and_destruction_0ii+0x32>
    401c:	6f 3f       	cpi	r22, 0xFF	; 255
    401e:	7f 4f       	sbci	r23, 0xFF	; 255
    4020:	61 f4       	brne	.+24     	; 0x403a <_Z41__static_initialization_and_destruction_0ii+0x32>
    4022:	00 e0       	ldi	r16, 0x00	; 0
    4024:	10 e4       	ldi	r17, 0x40	; 64
    4026:	2c eb       	ldi	r18, 0xBC	; 188
    4028:	36 e4       	ldi	r19, 0x46	; 70
    402a:	40 e0       	ldi	r20, 0x00	; 0
    402c:	50 e0       	ldi	r21, 0x00	; 0
    402e:	69 e4       	ldi	r22, 0x49	; 73
    4030:	73 e4       	ldi	r23, 0x43	; 67
    4032:	8e e6       	ldi	r24, 0x6E	; 110
    4034:	95 e4       	ldi	r25, 0x45	; 69
    4036:	0e 94 45 29 	call	0x528a	; 0x528a <_ZN8GoertzelC1Eff>
    403a:	cd 2b       	or	r28, r29
    403c:	39 f4       	brne	.+14     	; 0x404c <_Z41__static_initialization_and_destruction_0ii+0x44>
    403e:	ef 20       	and	r14, r15
    4040:	e0 94       	com	r14
    4042:	21 f4       	brne	.+8      	; 0x404c <_Z41__static_initialization_and_destruction_0ii+0x44>
    4044:	8e e6       	ldi	r24, 0x6E	; 110
    4046:	95 e4       	ldi	r25, 0x45	; 69
    4048:	0e 94 95 29 	call	0x532a	; 0x532a <_ZN8GoertzelD1Ev>
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	ff 90       	pop	r15
    4056:	ef 90       	pop	r14
    4058:	08 95       	ret

0000405a <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
    405a:	83 30       	cpi	r24, 0x03	; 3
    405c:	c9 f0       	breq	.+50     	; 0x4090 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
    405e:	28 f4       	brcc	.+10     	; 0x406a <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x10>
    4060:	81 30       	cpi	r24, 0x01	; 1
    4062:	41 f0       	breq	.+16     	; 0x4074 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x1a>
    4064:	82 30       	cpi	r24, 0x02	; 2
    4066:	69 f0       	breq	.+26     	; 0x4082 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x28>
    4068:	28 c0       	rjmp	.+80     	; 0x40ba <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    406a:	84 30       	cpi	r24, 0x04	; 4
    406c:	c1 f0       	breq	.+48     	; 0x409e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x44>
    406e:	85 30       	cpi	r24, 0x05	; 5
    4070:	e9 f0       	breq	.+58     	; 0x40ac <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x52>
    4072:	23 c0       	rjmp	.+70     	; 0x40ba <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZL16ADC0_SYSTEM_initb>
    407a:	82 e0       	ldi	r24, 0x02	; 2
    407c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    4080:	08 95       	ret
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZL16ADC0_SYSTEM_initb>
    4088:	83 e0       	ldi	r24, 0x03	; 3
    408a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    408e:	08 95       	ret
    4090:	80 e0       	ldi	r24, 0x00	; 0
    4092:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZL16ADC0_SYSTEM_initb>
    4096:	84 e0       	ldi	r24, 0x04	; 4
    4098:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    409c:	08 95       	ret
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZL16ADC0_SYSTEM_initb>
    40a4:	85 e0       	ldi	r24, 0x05	; 5
    40a6:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    40aa:	08 95       	ret
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZL16ADC0_SYSTEM_initb>
    40b2:	82 e4       	ldi	r24, 0x42	; 66
    40b4:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    40b8:	08 95       	ret
    40ba:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <_ZL20ADC0_SYSTEM_shutdownv>
    40be:	08 95       	ret

000040c0 <_Z9ADC0_readv>:
    40c0:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    40c4:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    40c8:	08 95       	ret

000040ca <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    40ca:	1f 92       	push	r1
    40cc:	0f 92       	push	r0
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	0f 92       	push	r0
    40d2:	11 24       	eor	r1, r1
    40d4:	0b b6       	in	r0, 0x3b	; 59
    40d6:	0f 92       	push	r0
    40d8:	2f 93       	push	r18
    40da:	3f 93       	push	r19
    40dc:	4f 93       	push	r20
    40de:	5f 93       	push	r21
    40e0:	6f 93       	push	r22
    40e2:	7f 93       	push	r23
    40e4:	8f 93       	push	r24
    40e6:	9f 93       	push	r25
    40e8:	af 93       	push	r26
    40ea:	bf 93       	push	r27
    40ec:	ef 93       	push	r30
    40ee:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    40f0:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    40f4:	bc 01       	movw	r22, r24
    40f6:	8e e6       	ldi	r24, 0x6E	; 110
    40f8:	95 e4       	ldi	r25, 0x45	; 69
    40fa:	0e 94 9c 29 	call	0x5338	; 0x5338 <_ZN8Goertzel9DataPointEi>
    40fe:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    4100:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    4104:	ff 91       	pop	r31
    4106:	ef 91       	pop	r30
    4108:	bf 91       	pop	r27
    410a:	af 91       	pop	r26
    410c:	9f 91       	pop	r25
    410e:	8f 91       	pop	r24
    4110:	7f 91       	pop	r23
    4112:	6f 91       	pop	r22
    4114:	5f 91       	pop	r21
    4116:	4f 91       	pop	r20
    4118:	3f 91       	pop	r19
    411a:	2f 91       	pop	r18
    411c:	0f 90       	pop	r0
    411e:	0b be       	out	0x3b, r0	; 59
    4120:	0f 90       	pop	r0
    4122:	0f be       	out	0x3f, r0	; 63
    4124:	0f 90       	pop	r0
    4126:	1f 90       	pop	r1
    4128:	18 95       	reti

0000412a <_GLOBAL__sub_I_g_activeADCChannel>:
    412a:	6f ef       	ldi	r22, 0xFF	; 255
    412c:	7f ef       	ldi	r23, 0xFF	; 255
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	0e 94 04 20 	call	0x4008	; 0x4008 <_Z41__static_initialization_and_destruction_0ii>
    4136:	08 95       	ret

00004138 <_GLOBAL__sub_D_g_activeADCChannel>:
    4138:	6f ef       	ldi	r22, 0xFF	; 255
    413a:	7f ef       	ldi	r23, 0xFF	; 255
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	0e 94 04 20 	call	0x4008	; 0x4008 <_Z41__static_initialization_and_destruction_0ii>
    4144:	08 95       	ret

00004146 <_Z10wifi_powerb>:
} //~binio


void wifi_power(bool state)
{
	if(state == ON)
    4146:	88 23       	and	r24, r24
    4148:	21 f0       	breq	.+8      	; 0x4152 <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    414a:	81 b1       	in	r24, 0x01	; 1
    414c:	80 62       	ori	r24, 0x20	; 32
    414e:	81 b9       	out	0x01, r24	; 1
    4150:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    4152:	81 b1       	in	r24, 0x01	; 1
    4154:	8f 7d       	andi	r24, 0xDF	; 223
    4156:	81 b9       	out	0x01, r24	; 1
    4158:	08 95       	ret

0000415a <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    415a:	88 23       	and	r24, r24
    415c:	21 f0       	breq	.+8      	; 0x4166 <_Z10wifi_resetb+0xc>
    415e:	81 b1       	in	r24, 0x01	; 1
    4160:	8f 7b       	andi	r24, 0xBF	; 191
    4162:	81 b9       	out	0x01, r24	; 1
    4164:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    4166:	81 b1       	in	r24, 0x01	; 1
    4168:	80 64       	ori	r24, 0x40	; 64
    416a:	81 b9       	out	0x01, r24	; 1
    416c:	08 95       	ret

0000416e <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    416e:	8e b1       	in	r24, 0x0e	; 14
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	88 0f       	add	r24, r24
    4174:	89 2f       	mov	r24, r25
    4176:	88 1f       	adc	r24, r24
    4178:	99 0b       	sbc	r25, r25
}

bool wifiPresent(void)
{
	return(PORTD_get_pin_level(WIFI_MODULE_DETECT));
}
    417a:	81 70       	andi	r24, 0x01	; 1
    417c:	08 95       	ret

0000417e <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    417e:	1f 92       	push	r1
    4180:	0f 92       	push	r0
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	0f 92       	push	r0
    4186:	11 24       	eor	r1, r1
    4188:	8f 93       	push	r24
    418a:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    418c:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    4190:	88 23       	and	r24, r24
    4192:	4c f4       	brge	.+18     	; 0x41a6 <__vector_29+0x28>
	{
		count++;
    4194:	80 91 72 45 	lds	r24, 0x4572	; 0x804572 <_ZZ11__vector_29E5count>
    4198:	90 91 73 45 	lds	r25, 0x4573	; 0x804573 <_ZZ11__vector_29E5count+0x1>
    419c:	01 96       	adiw	r24, 0x01	; 1
    419e:	80 93 72 45 	sts	0x4572, r24	; 0x804572 <_ZZ11__vector_29E5count>
    41a2:	90 93 73 45 	sts	0x4573, r25	; 0x804573 <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    41a6:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    41aa:	84 ff       	sbrs	r24, 4
    41ac:	09 c0       	rjmp	.+18     	; 0x41c0 <__vector_29+0x42>
	{
		count++;
    41ae:	80 91 72 45 	lds	r24, 0x4572	; 0x804572 <_ZZ11__vector_29E5count>
    41b2:	90 91 73 45 	lds	r25, 0x4573	; 0x804573 <_ZZ11__vector_29E5count+0x1>
    41b6:	01 96       	adiw	r24, 0x01	; 1
    41b8:	80 93 72 45 	sts	0x4572, r24	; 0x804572 <_ZZ11__vector_29E5count>
    41bc:	90 93 73 45 	sts	0x4573, r25	; 0x804573 <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    41c0:	8f ef       	ldi	r24, 0xFF	; 255
    41c2:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    41c6:	9f 91       	pop	r25
    41c8:	8f 91       	pop	r24
    41ca:	0f 90       	pop	r0
    41cc:	0f be       	out	0x3f, r0	; 63
    41ce:	0f 90       	pop	r0
    41d0:	1f 90       	pop	r1
    41d2:	18 95       	reti

000041d4 <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    41d4:	1f 92       	push	r1
    41d6:	0f 92       	push	r0
    41d8:	0f b6       	in	r0, 0x3f	; 63
    41da:	0f 92       	push	r0
    41dc:	11 24       	eor	r1, r1
    41de:	8f 93       	push	r24
    41e0:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    41e2:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    41e6:	82 ff       	sbrs	r24, 2
    41e8:	09 c0       	rjmp	.+18     	; 0x41fc <__vector_6+0x28>
	{
		count++;
    41ea:	80 91 70 45 	lds	r24, 0x4570	; 0x804570 <_ZZ10__vector_6E5count>
    41ee:	90 91 71 45 	lds	r25, 0x4571	; 0x804571 <_ZZ10__vector_6E5count+0x1>
    41f2:	01 96       	adiw	r24, 0x01	; 1
    41f4:	80 93 70 45 	sts	0x4570, r24	; 0x804570 <_ZZ10__vector_6E5count>
    41f8:	90 93 71 45 	sts	0x4571, r25	; 0x804571 <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    41fc:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    4200:	84 ff       	sbrs	r24, 4
    4202:	09 c0       	rjmp	.+18     	; 0x4216 <__vector_6+0x42>
	{
		count++;
    4204:	80 91 70 45 	lds	r24, 0x4570	; 0x804570 <_ZZ10__vector_6E5count>
    4208:	90 91 71 45 	lds	r25, 0x4571	; 0x804571 <_ZZ10__vector_6E5count+0x1>
    420c:	01 96       	adiw	r24, 0x01	; 1
    420e:	80 93 70 45 	sts	0x4570, r24	; 0x804570 <_ZZ10__vector_6E5count>
    4212:	90 93 71 45 	sts	0x4571, r25	; 0x804571 <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    4216:	8f ef       	ldi	r24, 0xFF	; 255
    4218:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    421c:	9f 91       	pop	r25
    421e:	8f 91       	pop	r24
    4220:	0f 90       	pop	r0
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	0f 90       	pop	r0
    4226:	1f 90       	pop	r1
    4228:	18 95       	reti

0000422a <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    422a:	80 b1       	in	r24, 0x00	; 0
    422c:	8b 7f       	andi	r24, 0xFB	; 251
    422e:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    4230:	e2 e1       	ldi	r30, 0x12	; 18
    4232:	f4 e0       	ldi	r31, 0x04	; 4
    4234:	80 81       	ld	r24, Z
    4236:	88 7f       	andi	r24, 0xF8	; 248
    4238:	82 60       	ori	r24, 0x02	; 2
    423a:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    423c:	80 b1       	in	r24, 0x00	; 0
    423e:	88 60       	ori	r24, 0x08	; 8
    4240:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    4242:	81 b1       	in	r24, 0x01	; 1
    4244:	87 7f       	andi	r24, 0xF7	; 247
    4246:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    4248:	80 b1       	in	r24, 0x00	; 0
    424a:	8f 7e       	andi	r24, 0xEF	; 239
    424c:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    424e:	e4 e1       	ldi	r30, 0x14	; 20
    4250:	f4 e0       	ldi	r31, 0x04	; 4
    4252:	80 81       	ld	r24, Z
    4254:	88 60       	ori	r24, 0x08	; 8
    4256:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    4258:	80 81       	ld	r24, Z
    425a:	88 7f       	andi	r24, 0xF8	; 248
    425c:	83 60       	ori	r24, 0x03	; 3
    425e:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    4260:	80 b1       	in	r24, 0x00	; 0
    4262:	80 62       	ori	r24, 0x20	; 32
    4264:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    4266:	81 b1       	in	r24, 0x01	; 1
    4268:	8f 7d       	andi	r24, 0xDF	; 223
    426a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    426c:	80 b1       	in	r24, 0x00	; 0
    426e:	80 64       	ori	r24, 0x40	; 64
    4270:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    4272:	81 b1       	in	r24, 0x01	; 1
    4274:	8f 7b       	andi	r24, 0xBF	; 191
    4276:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    4278:	80 b1       	in	r24, 0x00	; 0
    427a:	80 68       	ori	r24, 0x80	; 128
    427c:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    427e:	81 b1       	in	r24, 0x01	; 1
    4280:	8f 77       	andi	r24, 0x7F	; 127
    4282:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    4284:	84 b1       	in	r24, 0x04	; 4
    4286:	81 60       	ori	r24, 0x01	; 1
    4288:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    428a:	85 b1       	in	r24, 0x05	; 5
    428c:	8e 7f       	andi	r24, 0xFE	; 254
    428e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    4290:	84 b1       	in	r24, 0x04	; 4
    4292:	82 60       	ori	r24, 0x02	; 2
    4294:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    4296:	85 b1       	in	r24, 0x05	; 5
    4298:	8d 7f       	andi	r24, 0xFD	; 253
    429a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    429c:	84 b1       	in	r24, 0x04	; 4
    429e:	80 61       	ori	r24, 0x10	; 16
    42a0:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    42a2:	85 b1       	in	r24, 0x05	; 5
    42a4:	8f 7e       	andi	r24, 0xEF	; 239
    42a6:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    42a8:	84 b1       	in	r24, 0x04	; 4
    42aa:	80 62       	ori	r24, 0x20	; 32
    42ac:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    42ae:	85 b1       	in	r24, 0x05	; 5
    42b0:	8f 7d       	andi	r24, 0xDF	; 223
    42b2:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    42b4:	88 b1       	in	r24, 0x08	; 8
    42b6:	8f 7e       	andi	r24, 0xEF	; 239
    42b8:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    42ba:	88 b1       	in	r24, 0x08	; 8
    42bc:	80 62       	ori	r24, 0x20	; 32
    42be:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    42c0:	89 b1       	in	r24, 0x09	; 9
    42c2:	8f 7d       	andi	r24, 0xDF	; 223
    42c4:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    42c6:	88 b1       	in	r24, 0x08	; 8
    42c8:	80 64       	ori	r24, 0x40	; 64
    42ca:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    42cc:	89 b1       	in	r24, 0x09	; 9
    42ce:	8f 7b       	andi	r24, 0xBF	; 191
    42d0:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    42d2:	88 b1       	in	r24, 0x08	; 8
    42d4:	8f 77       	andi	r24, 0x7F	; 127
    42d6:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    42d8:	e7 e5       	ldi	r30, 0x57	; 87
    42da:	f4 e0       	ldi	r31, 0x04	; 4
    42dc:	80 81       	ld	r24, Z
    42de:	88 60       	ori	r24, 0x08	; 8
    42e0:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    42e2:	80 81       	ld	r24, Z
    42e4:	88 7f       	andi	r24, 0xF8	; 248
    42e6:	83 60       	ori	r24, 0x03	; 3
    42e8:	80 83       	st	Z, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    42ea:	8c b1       	in	r24, 0x0c	; 12
    42ec:	8e 7f       	andi	r24, 0xFE	; 254
    42ee:	8c b9       	out	0x0c, r24	; 12
    42f0:	8c b1       	in	r24, 0x0c	; 12
    42f2:	8d 7f       	andi	r24, 0xFD	; 253
    42f4:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    42f6:	a1 e7       	ldi	r26, 0x71	; 113
    42f8:	b4 e0       	ldi	r27, 0x04	; 4
    42fa:	8c 91       	ld	r24, X
    42fc:	88 60       	ori	r24, 0x08	; 8
    42fe:	8c 93       	st	X, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    4300:	8c 91       	ld	r24, X
    4302:	88 7f       	andi	r24, 0xF8	; 248
    4304:	83 60       	ori	r24, 0x03	; 3
    4306:	8c 93       	st	X, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    4308:	8c b1       	in	r24, 0x0c	; 12
    430a:	8f 77       	andi	r24, 0x7F	; 127
    430c:	8c b9       	out	0x0c, r24	; 12
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    430e:	80 81       	ld	r24, Z
    4310:	87 7f       	andi	r24, 0xF7	; 247
    4312:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    4314:	e0 e9       	ldi	r30, 0x90	; 144
    4316:	f4 e0       	ldi	r31, 0x04	; 4
    4318:	80 81       	ld	r24, Z
    431a:	88 60       	ori	r24, 0x08	; 8
    431c:	80 83       	st	Z, r24
    431e:	e1 e9       	ldi	r30, 0x91	; 145
    4320:	f4 e0       	ldi	r31, 0x04	; 4
    4322:	80 81       	ld	r24, Z
    4324:	88 60       	ori	r24, 0x08	; 8
    4326:	80 83       	st	Z, r24
    4328:	e2 e9       	ldi	r30, 0x92	; 146
    432a:	f4 e0       	ldi	r31, 0x04	; 4
    432c:	80 81       	ld	r24, Z
    432e:	88 60       	ori	r24, 0x08	; 8
    4330:	80 83       	st	Z, r24
    4332:	e3 e9       	ldi	r30, 0x93	; 147
    4334:	f4 e0       	ldi	r31, 0x04	; 4
    4336:	80 81       	ld	r24, Z
    4338:	88 60       	ori	r24, 0x08	; 8
    433a:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    433c:	e2 eb       	ldi	r30, 0xB2	; 178
    433e:	f4 e0       	ldi	r31, 0x04	; 4
    4340:	80 81       	ld	r24, Z
    4342:	88 60       	ori	r24, 0x08	; 8
    4344:	80 83       	st	Z, r24
    4346:	e3 eb       	ldi	r30, 0xB3	; 179
    4348:	f4 e0       	ldi	r31, 0x04	; 4
    434a:	80 81       	ld	r24, Z
    434c:	88 60       	ori	r24, 0x08	; 8
    434e:	80 83       	st	Z, r24
    4350:	e4 eb       	ldi	r30, 0xB4	; 180
    4352:	f4 e0       	ldi	r31, 0x04	; 4
    4354:	80 81       	ld	r24, Z
    4356:	88 60       	ori	r24, 0x08	; 8
    4358:	80 83       	st	Z, r24
    435a:	e5 eb       	ldi	r30, 0xB5	; 181
    435c:	f4 e0       	ldi	r31, 0x04	; 4
    435e:	80 81       	ld	r24, Z
    4360:	88 60       	ori	r24, 0x08	; 8
    4362:	80 83       	st	Z, r24
    4364:	08 95       	ret

00004366 <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    4366:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	08 95       	ret

0000436e <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    436e:	44 e2       	ldi	r20, 0x24	; 36
    4370:	68 ed       	ldi	r22, 0xD8	; 216
    4372:	88 e6       	ldi	r24, 0x68	; 104
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	0e 94 1d 30 	call	0x603a	; 0x603a <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	08 95       	ret

0000437e <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    437e:	78 94       	sei

	return 0;
}
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	08 95       	ret

00004384 <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    4384:	83 e0       	ldi	r24, 0x03	; 3
    4386:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
    438a:	6a e0       	ldi	r22, 0x0A	; 10
    438c:	70 e0       	ldi	r23, 0x00	; 0
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	0e 94 1a 39 	call	0x7234	; 0x7234 <util_delay_ms>
    4396:	81 11       	cpse	r24, r1
    4398:	f8 cf       	rjmp	.-16     	; 0x438a <_ZL9VREF_initv+0x6>
}
    439a:	08 95       	ret

0000439c <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    439c:	28 2f       	mov	r18, r24
    439e:	22 95       	swap	r18
    43a0:	22 0f       	add	r18, r18
    43a2:	22 0f       	add	r18, r18
    43a4:	20 7c       	andi	r18, 0xC0	; 192
    43a6:	e0 ea       	ldi	r30, 0xA0	; 160
    43a8:	f6 e0       	ldi	r31, 0x06	; 6
    43aa:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    43ac:	96 95       	lsr	r25
    43ae:	87 95       	ror	r24
    43b0:	96 95       	lsr	r25
    43b2:	87 95       	ror	r24
    43b4:	83 83       	std	Z+3, r24	; 0x03
    43b6:	08 95       	ret

000043b8 <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    43b8:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    43bc:	e0 e6       	ldi	r30, 0x60	; 96
    43be:	f4 e0       	ldi	r31, 0x04	; 4
    43c0:	86 89       	ldd	r24, Z+22	; 0x16
    43c2:	88 7f       	andi	r24, 0xF8	; 248
    43c4:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    43c6:	86 89       	ldd	r24, Z+22	; 0x16
    43c8:	84 60       	ori	r24, 0x04	; 4
    43ca:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    43cc:	86 89       	ldd	r24, Z+22	; 0x16
    43ce:	87 7f       	andi	r24, 0xF7	; 247
    43d0:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    43d2:	81 ec       	ldi	r24, 0xC1	; 193
    43d4:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z11DAC0_setValj>
    43e0:	08 95       	ret

000043e2 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	88 30       	cpi	r24, 0x08	; 8
    43e6:	48 f4       	brcc	.+18     	; 0x43fa <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    43e8:	e8 2f       	mov	r30, r24
    43ea:	f0 e0       	ldi	r31, 0x00	; 0
    43ec:	e0 5f       	subi	r30, 0xF0	; 240
    43ee:	fb 4f       	sbci	r31, 0xFB	; 251
    43f0:	90 81       	ld	r25, Z
    43f2:	98 60       	ori	r25, 0x08	; 8
    43f4:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    43f6:	8f 5f       	subi	r24, 0xFF	; 255
    43f8:	f5 cf       	rjmp	.-22     	; 0x43e4 <mcu_init+0x2>
    43fa:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    43fc:	88 30       	cpi	r24, 0x08	; 8
    43fe:	48 f4       	brcc	.+18     	; 0x4412 <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    4400:	e8 2f       	mov	r30, r24
    4402:	f0 e0       	ldi	r31, 0x00	; 0
    4404:	e0 5d       	subi	r30, 0xD0	; 208
    4406:	fb 4f       	sbci	r31, 0xFB	; 251
    4408:	90 81       	ld	r25, Z
    440a:	98 60       	ori	r25, 0x08	; 8
    440c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    440e:	8f 5f       	subi	r24, 0xFF	; 255
    4410:	f5 cf       	rjmp	.-22     	; 0x43fc <mcu_init+0x1a>
    4412:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4414:	88 30       	cpi	r24, 0x08	; 8
    4416:	48 f4       	brcc	.+18     	; 0x442a <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    4418:	e8 2f       	mov	r30, r24
    441a:	f0 e0       	ldi	r31, 0x00	; 0
    441c:	e0 5b       	subi	r30, 0xB0	; 176
    441e:	fb 4f       	sbci	r31, 0xFB	; 251
    4420:	90 81       	ld	r25, Z
    4422:	98 60       	ori	r25, 0x08	; 8
    4424:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4426:	8f 5f       	subi	r24, 0xFF	; 255
    4428:	f5 cf       	rjmp	.-22     	; 0x4414 <mcu_init+0x32>
    442a:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    442c:	88 30       	cpi	r24, 0x08	; 8
    442e:	48 f4       	brcc	.+18     	; 0x4442 <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    4430:	e8 2f       	mov	r30, r24
    4432:	f0 e0       	ldi	r31, 0x00	; 0
    4434:	e0 59       	subi	r30, 0x90	; 144
    4436:	fb 4f       	sbci	r31, 0xFB	; 251
    4438:	90 81       	ld	r25, Z
    443a:	98 60       	ori	r25, 0x08	; 8
    443c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    443e:	8f 5f       	subi	r24, 0xFF	; 255
    4440:	f5 cf       	rjmp	.-22     	; 0x442c <mcu_init+0x4a>
    4442:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4444:	88 30       	cpi	r24, 0x08	; 8
    4446:	48 f4       	brcc	.+18     	; 0x445a <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    4448:	e8 2f       	mov	r30, r24
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	e0 57       	subi	r30, 0x70	; 112
    444e:	fb 4f       	sbci	r31, 0xFB	; 251
    4450:	90 81       	ld	r25, Z
    4452:	98 60       	ori	r25, 0x08	; 8
    4454:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4456:	8f 5f       	subi	r24, 0xFF	; 255
    4458:	f5 cf       	rjmp	.-22     	; 0x4444 <mcu_init+0x62>
    445a:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    445c:	88 30       	cpi	r24, 0x08	; 8
    445e:	48 f4       	brcc	.+18     	; 0x4472 <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    4460:	e8 2f       	mov	r30, r24
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	e0 55       	subi	r30, 0x50	; 80
    4466:	fb 4f       	sbci	r31, 0xFB	; 251
    4468:	90 81       	ld	r25, Z
    446a:	98 60       	ori	r25, 0x08	; 8
    446c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    446e:	8f 5f       	subi	r24, 0xFF	; 255
    4470:	f5 cf       	rjmp	.-22     	; 0x445c <mcu_init+0x7a>
    4472:	08 95       	ret

00004474 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    4474:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    4478:	0e 94 b7 21 	call	0x436e	; 0x436e <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
    447c:	0e 94 fd 38 	call	0x71fa	; 0x71fa <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    4480:	0e 94 bf 21 	call	0x437e	; 0x437e <CPUINT_init>
	BINIO_init();
    4484:	0e 94 15 21 	call	0x422a	; 0x422a <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    4488:	88 b1       	in	r24, 0x08	; 8
    448a:	80 64       	ori	r24, 0x40	; 64
    448c:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    448e:	89 b1       	in	r24, 0x09	; 9
    4490:	80 64       	ori	r24, 0x40	; 64
    4492:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    4494:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <SLPCTRL_init>
	
	DAC0_init();
    4498:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <_Z9DAC0_initv>

	linkbus_init(LB_BAUD, LINKBUS_USART);
    449c:	44 e0       	ldi	r20, 0x04	; 4
    449e:	60 e8       	ldi	r22, 0x80	; 128
    44a0:	75 e2       	ldi	r23, 0x25	; 37
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	0e 94 ef 2c 	call	0x59de	; 0x59de <_Z12linkbus_initm14USART_Number_t>
	serialbus_init(SB_BAUD, SERIALBUS_USART);
    44aa:	41 e0       	ldi	r20, 0x01	; 1
    44ac:	60 e8       	ldi	r22, 0x80	; 128
    44ae:	75 e2       	ldi	r23, 0x25	; 37
    44b0:	80 e0       	ldi	r24, 0x00	; 0
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	0e 94 26 31 	call	0x624c	; 0x624c <serialbus_init>

	BOD_init();
    44b8:	0e 94 b3 21 	call	0x4366	; 0x4366 <BOD_init>
    44bc:	08 95       	ret

000044be <_Z7bcd2dech>:
		else
		{
			data[0] = 0x04;
			I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, data, 1);
		}
	}
    44be:	28 2f       	mov	r18, r24
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	35 95       	asr	r19
    44c4:	27 95       	ror	r18
    44c6:	35 95       	asr	r19
    44c8:	27 95       	ror	r18
    44ca:	35 95       	asr	r19
    44cc:	27 95       	ror	r18
    44ce:	35 95       	asr	r19
    44d0:	27 95       	ror	r18
    44d2:	22 0f       	add	r18, r18
    44d4:	92 2f       	mov	r25, r18
    44d6:	99 0f       	add	r25, r25
    44d8:	99 0f       	add	r25, r25
    44da:	29 0f       	add	r18, r25
    44dc:	8f 70       	andi	r24, 0x0F	; 15
    44de:	82 0f       	add	r24, r18
    44e0:	08 95       	ret

000044e2 <_Z7dec2bcdh>:
    44e2:	2d ec       	ldi	r18, 0xCD	; 205
    44e4:	82 9f       	mul	r24, r18
    44e6:	21 2d       	mov	r18, r1
    44e8:	11 24       	eor	r1, r1
    44ea:	92 2f       	mov	r25, r18
    44ec:	96 95       	lsr	r25
    44ee:	96 95       	lsr	r25
    44f0:	96 95       	lsr	r25
    44f2:	99 0f       	add	r25, r25
    44f4:	39 2f       	mov	r19, r25
    44f6:	33 0f       	add	r19, r19
    44f8:	33 0f       	add	r19, r19
    44fa:	93 0f       	add	r25, r19
    44fc:	89 1b       	sub	r24, r25
    44fe:	98 2f       	mov	r25, r24
    4500:	26 95       	lsr	r18
    4502:	26 95       	lsr	r18
    4504:	26 95       	lsr	r18
    4506:	80 e1       	ldi	r24, 0x10	; 16
    4508:	28 9f       	mul	r18, r24
    450a:	90 01       	movw	r18, r0
    450c:	11 24       	eor	r1, r1
    450e:	89 2f       	mov	r24, r25
    4510:	82 2b       	or	r24, r18
    4512:	08 95       	ret

00004514 <_Z8char2bcdPc>:
    4514:	fc 01       	movw	r30, r24
    4516:	20 81       	ld	r18, Z
    4518:	81 81       	ldd	r24, Z+1	; 0x01
    451a:	f0 e1       	ldi	r31, 0x10	; 16
    451c:	2f 9f       	mul	r18, r31
    451e:	80 0d       	add	r24, r0
    4520:	11 24       	eor	r1, r1
    4522:	80 53       	subi	r24, 0x30	; 48
    4524:	08 95       	ret

00004526 <_Z14epoch_from_ltmP2tm>:
    4526:	cf 92       	push	r12
    4528:	df 92       	push	r13
    452a:	ef 92       	push	r14
    452c:	ff 92       	push	r15
    452e:	fc 01       	movw	r30, r24
    4530:	80 81       	ld	r24, Z
    4532:	21 81       	ldd	r18, Z+1	; 0x01
    4534:	08 2e       	mov	r0, r24
    4536:	00 0c       	add	r0, r0
    4538:	99 0b       	sbc	r25, r25
    453a:	ac 01       	movw	r20, r24
    453c:	3c e3       	ldi	r19, 0x3C	; 60
    453e:	23 02       	muls	r18, r19
    4540:	40 0d       	add	r20, r0
    4542:	51 1d       	adc	r21, r1
    4544:	11 24       	eor	r1, r1
    4546:	a2 81       	ldd	r26, Z+2	; 0x02
    4548:	0a 2e       	mov	r0, r26
    454a:	00 0c       	add	r0, r0
    454c:	bb 0b       	sbc	r27, r27
    454e:	20 e1       	ldi	r18, 0x10	; 16
    4550:	3e e0       	ldi	r19, 0x0E	; 14
    4552:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <__usmulhisi3>
    4556:	6a 01       	movw	r12, r20
    4558:	55 0f       	add	r21, r21
    455a:	ee 08       	sbc	r14, r14
    455c:	ff 08       	sbc	r15, r15
    455e:	c6 0e       	add	r12, r22
    4560:	d7 1e       	adc	r13, r23
    4562:	e8 1e       	adc	r14, r24
    4564:	f9 1e       	adc	r15, r25
    4566:	a0 85       	ldd	r26, Z+8	; 0x08
    4568:	b1 85       	ldd	r27, Z+9	; 0x09
    456a:	20 e8       	ldi	r18, 0x80	; 128
    456c:	31 e5       	ldi	r19, 0x51	; 81
    456e:	41 e0       	ldi	r20, 0x01	; 1
    4570:	50 e0       	ldi	r21, 0x00	; 0
    4572:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    4576:	c6 0e       	add	r12, r22
    4578:	d7 1e       	adc	r13, r23
    457a:	e8 1e       	adc	r14, r24
    457c:	f9 1e       	adc	r15, r25
    457e:	06 80       	ldd	r0, Z+6	; 0x06
    4580:	f7 81       	ldd	r31, Z+7	; 0x07
    4582:	e0 2d       	mov	r30, r0
    4584:	df 01       	movw	r26, r30
    4586:	a6 54       	subi	r26, 0x46	; 70
    4588:	b1 09       	sbc	r27, r1
    458a:	20 e8       	ldi	r18, 0x80	; 128
    458c:	33 e3       	ldi	r19, 0x33	; 51
    458e:	41 ee       	ldi	r20, 0xE1	; 225
    4590:	51 e0       	ldi	r21, 0x01	; 1
    4592:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    4596:	c6 0e       	add	r12, r22
    4598:	d7 1e       	adc	r13, r23
    459a:	e8 1e       	adc	r14, r24
    459c:	f9 1e       	adc	r15, r25
    459e:	cf 01       	movw	r24, r30
    45a0:	85 54       	subi	r24, 0x45	; 69
    45a2:	91 09       	sbc	r25, r1
    45a4:	dc 01       	movw	r26, r24
    45a6:	0a f4       	brpl	.+2      	; 0x45aa <_Z14epoch_from_ltmP2tm+0x84>
    45a8:	13 96       	adiw	r26, 0x03	; 3
    45aa:	b5 95       	asr	r27
    45ac:	a7 95       	ror	r26
    45ae:	b5 95       	asr	r27
    45b0:	a7 95       	ror	r26
    45b2:	20 e8       	ldi	r18, 0x80	; 128
    45b4:	31 e5       	ldi	r19, 0x51	; 81
    45b6:	41 e0       	ldi	r20, 0x01	; 1
    45b8:	50 e0       	ldi	r21, 0x00	; 0
    45ba:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    45be:	c6 0e       	add	r12, r22
    45c0:	d7 1e       	adc	r13, r23
    45c2:	e8 1e       	adc	r14, r24
    45c4:	f9 1e       	adc	r15, r25
    45c6:	cf 01       	movw	r24, r30
    45c8:	01 97       	sbiw	r24, 0x01	; 1
    45ca:	64 e6       	ldi	r22, 0x64	; 100
    45cc:	70 e0       	ldi	r23, 0x00	; 0
    45ce:	0e 94 a9 3e 	call	0x7d52	; 0x7d52 <__divmodhi4>
    45d2:	db 01       	movw	r26, r22
    45d4:	20 e8       	ldi	r18, 0x80	; 128
    45d6:	3e ea       	ldi	r19, 0xAE	; 174
    45d8:	4e ef       	ldi	r20, 0xFE	; 254
    45da:	5f ef       	ldi	r21, 0xFF	; 255
    45dc:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    45e0:	c6 0e       	add	r12, r22
    45e2:	d7 1e       	adc	r13, r23
    45e4:	e8 1e       	adc	r14, r24
    45e6:	f9 1e       	adc	r15, r25
    45e8:	cf 01       	movw	r24, r30
    45ea:	85 5d       	subi	r24, 0xD5	; 213
    45ec:	9e 4f       	sbci	r25, 0xFE	; 254
    45ee:	60 e9       	ldi	r22, 0x90	; 144
    45f0:	71 e0       	ldi	r23, 0x01	; 1
    45f2:	0e 94 a9 3e 	call	0x7d52	; 0x7d52 <__divmodhi4>
    45f6:	db 01       	movw	r26, r22
    45f8:	20 e8       	ldi	r18, 0x80	; 128
    45fa:	31 e5       	ldi	r19, 0x51	; 81
    45fc:	41 e0       	ldi	r20, 0x01	; 1
    45fe:	50 e0       	ldi	r21, 0x00	; 0
    4600:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    4604:	6c 0d       	add	r22, r12
    4606:	7d 1d       	adc	r23, r13
    4608:	8e 1d       	adc	r24, r14
    460a:	9f 1d       	adc	r25, r15
    460c:	ff 90       	pop	r15
    460e:	ef 90       	pop	r14
    4610:	df 90       	pop	r13
    4612:	cf 90       	pop	r12
    4614:	08 95       	ret

00004616 <ds3231_get_epoch>:
    4616:	4f 92       	push	r4
    4618:	5f 92       	push	r5
    461a:	6f 92       	push	r6
    461c:	7f 92       	push	r7
    461e:	8f 92       	push	r8
    4620:	9f 92       	push	r9
    4622:	af 92       	push	r10
    4624:	bf 92       	push	r11
    4626:	cf 92       	push	r12
    4628:	df 92       	push	r13
    462a:	ef 92       	push	r14
    462c:	ff 92       	push	r15
    462e:	0f 93       	push	r16
    4630:	1f 93       	push	r17
    4632:	cf 93       	push	r28
    4634:	df 93       	push	r29
    4636:	cd b7       	in	r28, 0x3d	; 61
    4638:	de b7       	in	r29, 0x3e	; 62
    463a:	63 97       	sbiw	r28, 0x13	; 19
    463c:	cd bf       	out	0x3d, r28	; 61
    463e:	de bf       	out	0x3e, r29	; 62
    4640:	5c 01       	movw	r10, r24
    4642:	ae 01       	movw	r20, r28
    4644:	4f 5f       	subi	r20, 0xFF	; 255
    4646:	5f 4f       	sbci	r21, 0xFF	; 255
    4648:	87 e0       	ldi	r24, 0x07	; 7
    464a:	da 01       	movw	r26, r20
    464c:	1d 92       	st	X+, r1
    464e:	8a 95       	dec	r24
    4650:	e9 f7       	brne	.-6      	; 0x464c <ds3231_get_epoch+0x36>
    4652:	27 e0       	ldi	r18, 0x07	; 7
    4654:	60 e0       	ldi	r22, 0x00	; 0
    4656:	80 ed       	ldi	r24, 0xD0	; 208
    4658:	0e 94 c5 2a 	call	0x558a	; 0x558a <I2C_0_GetData>
    465c:	98 2e       	mov	r9, r24
    465e:	b7 e0       	ldi	r27, 0x07	; 7
    4660:	8b 13       	cpse	r24, r27
    4662:	04 c1       	rjmp	.+520    	; 0x486c <ds3231_get_epoch+0x256>
    4664:	fe 01       	movw	r30, r28
    4666:	38 96       	adiw	r30, 0x08	; 8
    4668:	8c e0       	ldi	r24, 0x0C	; 12
    466a:	df 01       	movw	r26, r30
    466c:	1d 92       	st	X+, r1
    466e:	8a 95       	dec	r24
    4670:	e9 f7       	brne	.-6      	; 0x466c <ds3231_get_epoch+0x56>
    4672:	2f 81       	ldd	r18, Y+7	; 0x07
    4674:	82 2f       	mov	r24, r18
    4676:	8f 70       	andi	r24, 0x0F	; 15
    4678:	e8 2e       	mov	r14, r24
    467a:	f1 2c       	mov	r15, r1
    467c:	c7 01       	movw	r24, r14
    467e:	8c 59       	subi	r24, 0x9C	; 156
    4680:	9f 4f       	sbci	r25, 0xFF	; 255
    4682:	22 95       	swap	r18
    4684:	2f 70       	andi	r18, 0x0F	; 15
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	79 01       	movw	r14, r18
    468a:	ee 0c       	add	r14, r14
    468c:	ff 1c       	adc	r15, r15
    468e:	22 0f       	add	r18, r18
    4690:	33 1f       	adc	r19, r19
    4692:	22 0f       	add	r18, r18
    4694:	33 1f       	adc	r19, r19
    4696:	22 0f       	add	r18, r18
    4698:	33 1f       	adc	r19, r19
    469a:	2e 0d       	add	r18, r14
    469c:	3f 1d       	adc	r19, r15
    469e:	7c 01       	movw	r14, r24
    46a0:	e2 0e       	add	r14, r18
    46a2:	f3 1e       	adc	r15, r19
    46a4:	67 01       	movw	r12, r14
    46a6:	b4 e9       	ldi	r27, 0x94	; 148
    46a8:	cb 1a       	sub	r12, r27
    46aa:	b8 ef       	ldi	r27, 0xF8	; 248
    46ac:	db 0a       	sbc	r13, r27
    46ae:	8e 81       	ldd	r24, Y+6	; 0x06
    46b0:	98 2f       	mov	r25, r24
    46b2:	9f 70       	andi	r25, 0x0F	; 15
    46b4:	82 95       	swap	r24
    46b6:	8f 70       	andi	r24, 0x0F	; 15
    46b8:	88 0f       	add	r24, r24
    46ba:	08 2f       	mov	r16, r24
    46bc:	00 0f       	add	r16, r16
    46be:	00 0f       	add	r16, r16
    46c0:	80 0f       	add	r24, r16
    46c2:	08 2f       	mov	r16, r24
    46c4:	09 0f       	add	r16, r25
    46c6:	ed 81       	ldd	r30, Y+5	; 0x05
    46c8:	8e 2f       	mov	r24, r30
    46ca:	8f 70       	andi	r24, 0x0F	; 15
    46cc:	e2 95       	swap	r30
    46ce:	ef 70       	andi	r30, 0x0F	; 15
    46d0:	ee 0f       	add	r30, r30
    46d2:	8e 2e       	mov	r8, r30
    46d4:	88 0c       	add	r8, r8
    46d6:	88 0c       	add	r8, r8
    46d8:	e8 0d       	add	r30, r8
    46da:	8e 2e       	mov	r8, r30
    46dc:	88 0e       	add	r8, r24
    46de:	11 e0       	ldi	r17, 0x01	; 1
    46e0:	10 17       	cp	r17, r16
    46e2:	60 f4       	brcc	.+24     	; 0x46fc <ds3231_get_epoch+0xe6>
    46e4:	61 2f       	mov	r22, r17
    46e6:	c6 01       	movw	r24, r12
    46e8:	0e 94 49 01 	call	0x292	; 0x292 <month_length>
    46ec:	28 89       	ldd	r18, Y+16	; 0x10
    46ee:	39 89       	ldd	r19, Y+17	; 0x11
    46f0:	28 0f       	add	r18, r24
    46f2:	31 1d       	adc	r19, r1
    46f4:	28 8b       	std	Y+16, r18	; 0x10
    46f6:	39 8b       	std	Y+17, r19	; 0x11
    46f8:	1f 5f       	subi	r17, 0xFF	; 255
    46fa:	f2 cf       	rjmp	.-28     	; 0x46e0 <ds3231_get_epoch+0xca>
    46fc:	e8 2d       	mov	r30, r8
    46fe:	88 0c       	add	r8, r8
    4700:	ff 0b       	sbc	r31, r31
    4702:	31 97       	sbiw	r30, 0x01	; 1
    4704:	88 89       	ldd	r24, Y+16	; 0x10
    4706:	99 89       	ldd	r25, Y+17	; 0x11
    4708:	e8 0f       	add	r30, r24
    470a:	f9 1f       	adc	r31, r25
    470c:	89 81       	ldd	r24, Y+1	; 0x01
    470e:	98 2f       	mov	r25, r24
    4710:	92 95       	swap	r25
    4712:	9f 70       	andi	r25, 0x0F	; 15
    4714:	99 0f       	add	r25, r25
    4716:	49 2f       	mov	r20, r25
    4718:	44 0f       	add	r20, r20
    471a:	44 0f       	add	r20, r20
    471c:	49 0f       	add	r20, r25
    471e:	8f 70       	andi	r24, 0x0F	; 15
    4720:	48 0f       	add	r20, r24
    4722:	3a 81       	ldd	r19, Y+2	; 0x02
    4724:	23 2f       	mov	r18, r19
    4726:	22 95       	swap	r18
    4728:	2f 70       	andi	r18, 0x0F	; 15
    472a:	22 0f       	add	r18, r18
    472c:	92 2f       	mov	r25, r18
    472e:	99 0f       	add	r25, r25
    4730:	99 0f       	add	r25, r25
    4732:	82 2f       	mov	r24, r18
    4734:	89 0f       	add	r24, r25
    4736:	23 2f       	mov	r18, r19
    4738:	2f 70       	andi	r18, 0x0F	; 15
    473a:	28 0f       	add	r18, r24
    473c:	ab 81       	ldd	r26, Y+3	; 0x03
    473e:	6a 2f       	mov	r22, r26
    4740:	70 e0       	ldi	r23, 0x00	; 0
    4742:	cb 01       	movw	r24, r22
    4744:	95 95       	asr	r25
    4746:	87 95       	ror	r24
    4748:	95 95       	asr	r25
    474a:	87 95       	ror	r24
    474c:	95 95       	asr	r25
    474e:	87 95       	ror	r24
    4750:	95 95       	asr	r25
    4752:	87 95       	ror	r24
    4754:	95 95       	asr	r25
    4756:	87 95       	ror	r24
    4758:	38 2f       	mov	r19, r24
    475a:	31 70       	andi	r19, 0x01	; 1
    475c:	cb 01       	movw	r24, r22
    475e:	95 95       	asr	r25
    4760:	87 95       	ror	r24
    4762:	95 95       	asr	r25
    4764:	87 95       	ror	r24
    4766:	95 95       	asr	r25
    4768:	87 95       	ror	r24
    476a:	95 95       	asr	r25
    476c:	87 95       	ror	r24
    476e:	81 70       	andi	r24, 0x01	; 1
    4770:	88 0f       	add	r24, r24
    4772:	98 2f       	mov	r25, r24
    4774:	99 0f       	add	r25, r25
    4776:	99 0f       	add	r25, r25
    4778:	89 0f       	add	r24, r25
    477a:	af 70       	andi	r26, 0x0F	; 15
    477c:	a8 0f       	add	r26, r24
    477e:	06 2e       	mov	r0, r22
    4780:	67 2f       	mov	r22, r23
    4782:	00 0c       	add	r0, r0
    4784:	66 1f       	adc	r22, r22
    4786:	77 0b       	sbc	r23, r23
    4788:	00 0c       	add	r0, r0
    478a:	66 1f       	adc	r22, r22
    478c:	77 1f       	adc	r23, r23
    478e:	60 ff       	sbrs	r22, 0
    4790:	04 c0       	rjmp	.+8      	; 0x479a <ds3231_get_epoch+0x184>
    4792:	33 23       	and	r19, r19
    4794:	21 f0       	breq	.+8      	; 0x479e <ds3231_get_epoch+0x188>
    4796:	a4 5f       	subi	r26, 0xF4	; 244
    4798:	02 c0       	rjmp	.+4      	; 0x479e <ds3231_get_epoch+0x188>
    479a:	31 11       	cpse	r19, r1
    479c:	ac 5e       	subi	r26, 0xEC	; 236
    479e:	04 2e       	mov	r0, r20
    47a0:	00 0c       	add	r0, r0
    47a2:	55 0b       	sbc	r21, r21
    47a4:	8c e3       	ldi	r24, 0x3C	; 60
    47a6:	28 02       	muls	r18, r24
    47a8:	40 0d       	add	r20, r0
    47aa:	51 1d       	adc	r21, r1
    47ac:	11 24       	eor	r1, r1
    47ae:	0a 2e       	mov	r0, r26
    47b0:	00 0c       	add	r0, r0
    47b2:	bb 0b       	sbc	r27, r27
    47b4:	20 e1       	ldi	r18, 0x10	; 16
    47b6:	3e e0       	ldi	r19, 0x0E	; 14
    47b8:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <__usmulhisi3>
    47bc:	2a 01       	movw	r4, r20
    47be:	55 0f       	add	r21, r21
    47c0:	66 08       	sbc	r6, r6
    47c2:	77 08       	sbc	r7, r7
    47c4:	46 0e       	add	r4, r22
    47c6:	57 1e       	adc	r5, r23
    47c8:	68 1e       	adc	r6, r24
    47ca:	79 1e       	adc	r7, r25
    47cc:	df 01       	movw	r26, r30
    47ce:	20 e8       	ldi	r18, 0x80	; 128
    47d0:	31 e5       	ldi	r19, 0x51	; 81
    47d2:	41 e0       	ldi	r20, 0x01	; 1
    47d4:	50 e0       	ldi	r21, 0x00	; 0
    47d6:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    47da:	46 0e       	add	r4, r22
    47dc:	57 1e       	adc	r5, r23
    47de:	68 1e       	adc	r6, r24
    47e0:	79 1e       	adc	r7, r25
    47e2:	d7 01       	movw	r26, r14
    47e4:	a6 54       	subi	r26, 0x46	; 70
    47e6:	b1 09       	sbc	r27, r1
    47e8:	20 e8       	ldi	r18, 0x80	; 128
    47ea:	33 e3       	ldi	r19, 0x33	; 51
    47ec:	41 ee       	ldi	r20, 0xE1	; 225
    47ee:	51 e0       	ldi	r21, 0x01	; 1
    47f0:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    47f4:	46 0e       	add	r4, r22
    47f6:	57 1e       	adc	r5, r23
    47f8:	68 1e       	adc	r6, r24
    47fa:	79 1e       	adc	r7, r25
    47fc:	c7 01       	movw	r24, r14
    47fe:	85 54       	subi	r24, 0x45	; 69
    4800:	91 09       	sbc	r25, r1
    4802:	dc 01       	movw	r26, r24
    4804:	0a f4       	brpl	.+2      	; 0x4808 <ds3231_get_epoch+0x1f2>
    4806:	13 96       	adiw	r26, 0x03	; 3
    4808:	b5 95       	asr	r27
    480a:	a7 95       	ror	r26
    480c:	b5 95       	asr	r27
    480e:	a7 95       	ror	r26
    4810:	20 e8       	ldi	r18, 0x80	; 128
    4812:	31 e5       	ldi	r19, 0x51	; 81
    4814:	41 e0       	ldi	r20, 0x01	; 1
    4816:	50 e0       	ldi	r21, 0x00	; 0
    4818:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    481c:	46 0e       	add	r4, r22
    481e:	57 1e       	adc	r5, r23
    4820:	68 1e       	adc	r6, r24
    4822:	79 1e       	adc	r7, r25
    4824:	c7 01       	movw	r24, r14
    4826:	01 97       	sbiw	r24, 0x01	; 1
    4828:	64 e6       	ldi	r22, 0x64	; 100
    482a:	70 e0       	ldi	r23, 0x00	; 0
    482c:	0e 94 a9 3e 	call	0x7d52	; 0x7d52 <__divmodhi4>
    4830:	db 01       	movw	r26, r22
    4832:	20 e8       	ldi	r18, 0x80	; 128
    4834:	3e ea       	ldi	r19, 0xAE	; 174
    4836:	4e ef       	ldi	r20, 0xFE	; 254
    4838:	5f ef       	ldi	r21, 0xFF	; 255
    483a:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    483e:	46 0e       	add	r4, r22
    4840:	57 1e       	adc	r5, r23
    4842:	68 1e       	adc	r6, r24
    4844:	79 1e       	adc	r7, r25
    4846:	c7 01       	movw	r24, r14
    4848:	85 5d       	subi	r24, 0xD5	; 213
    484a:	9e 4f       	sbci	r25, 0xFE	; 254
    484c:	60 e9       	ldi	r22, 0x90	; 144
    484e:	71 e0       	ldi	r23, 0x01	; 1
    4850:	0e 94 a9 3e 	call	0x7d52	; 0x7d52 <__divmodhi4>
    4854:	db 01       	movw	r26, r22
    4856:	20 e8       	ldi	r18, 0x80	; 128
    4858:	31 e5       	ldi	r19, 0x51	; 81
    485a:	41 e0       	ldi	r20, 0x01	; 1
    485c:	50 e0       	ldi	r21, 0x00	; 0
    485e:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <__mulshisi3>
    4862:	64 0d       	add	r22, r4
    4864:	75 1d       	adc	r23, r5
    4866:	86 1d       	adc	r24, r6
    4868:	97 1d       	adc	r25, r7
    486a:	03 c0       	rjmp	.+6      	; 0x4872 <ds3231_get_epoch+0x25c>
    486c:	60 e0       	ldi	r22, 0x00	; 0
    486e:	70 e0       	ldi	r23, 0x00	; 0
    4870:	cb 01       	movw	r24, r22
    4872:	a1 14       	cp	r10, r1
    4874:	b1 04       	cpc	r11, r1
    4876:	41 f0       	breq	.+16     	; 0x4888 <ds3231_get_epoch+0x272>
    4878:	a7 e0       	ldi	r26, 0x07	; 7
    487a:	9a 16       	cp	r9, r26
    487c:	11 f0       	breq	.+4      	; 0x4882 <ds3231_get_epoch+0x26c>
    487e:	2c ef       	ldi	r18, 0xFC	; 252
    4880:	01 c0       	rjmp	.+2      	; 0x4884 <ds3231_get_epoch+0x26e>
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	f5 01       	movw	r30, r10
    4886:	20 83       	st	Z, r18
    4888:	63 96       	adiw	r28, 0x13	; 19
    488a:	cd bf       	out	0x3d, r28	; 61
    488c:	de bf       	out	0x3e, r29	; 62
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	1f 91       	pop	r17
    4894:	0f 91       	pop	r16
    4896:	ff 90       	pop	r15
    4898:	ef 90       	pop	r14
    489a:	df 90       	pop	r13
    489c:	cf 90       	pop	r12
    489e:	bf 90       	pop	r11
    48a0:	af 90       	pop	r10
    48a2:	9f 90       	pop	r9
    48a4:	8f 90       	pop	r8
    48a6:	7f 90       	pop	r7
    48a8:	6f 90       	pop	r6
    48aa:	5f 90       	pop	r5
    48ac:	4f 90       	pop	r4
    48ae:	08 95       	ret

000048b0 <RTC_String2Epoch>:
    48b0:	7f 92       	push	r7
    48b2:	8f 92       	push	r8
    48b4:	9f 92       	push	r9
    48b6:	af 92       	push	r10
    48b8:	bf 92       	push	r11
    48ba:	cf 92       	push	r12
    48bc:	df 92       	push	r13
    48be:	ef 92       	push	r14
    48c0:	ff 92       	push	r15
    48c2:	0f 93       	push	r16
    48c4:	1f 93       	push	r17
    48c6:	cf 93       	push	r28
    48c8:	df 93       	push	r29
    48ca:	cd b7       	in	r28, 0x3d	; 61
    48cc:	de b7       	in	r29, 0x3e	; 62
    48ce:	2c 97       	sbiw	r28, 0x0c	; 12
    48d0:	cd bf       	out	0x3d, r28	; 61
    48d2:	de bf       	out	0x3e, r29	; 62
    48d4:	6c 01       	movw	r12, r24
    48d6:	8b 01       	movw	r16, r22
    48d8:	fe 01       	movw	r30, r28
    48da:	31 96       	adiw	r30, 0x01	; 1
    48dc:	8c e0       	ldi	r24, 0x0C	; 12
    48de:	df 01       	movw	r26, r30
    48e0:	1d 92       	st	X+, r1
    48e2:	8a 95       	dec	r24
    48e4:	e9 f7       	brne	.-6      	; 0x48e0 <RTC_String2Epoch+0x30>
    48e6:	61 15       	cp	r22, r1
    48e8:	71 05       	cpc	r23, r1
    48ea:	09 f4       	brne	.+2      	; 0x48ee <RTC_String2Epoch+0x3e>
    48ec:	63 c0       	rjmp	.+198    	; 0x49b4 <RTC_String2Epoch+0x104>
    48ee:	cb 01       	movw	r24, r22
    48f0:	0a 96       	adiw	r24, 0x0a	; 10
    48f2:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    48f6:	a8 2e       	mov	r10, r24
    48f8:	c8 01       	movw	r24, r16
    48fa:	08 96       	adiw	r24, 0x08	; 8
    48fc:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    4900:	b8 2e       	mov	r11, r24
    4902:	c8 01       	movw	r24, r16
    4904:	06 96       	adiw	r24, 0x06	; 6
    4906:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    490a:	f8 2e       	mov	r15, r24
    490c:	c8 01       	movw	r24, r16
    490e:	04 96       	adiw	r24, 0x04	; 4
    4910:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    4914:	88 2e       	mov	r8, r24
    4916:	c8 01       	movw	r24, r16
    4918:	02 96       	adiw	r24, 0x02	; 2
    491a:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    491e:	78 2e       	mov	r7, r24
    4920:	c8 01       	movw	r24, r16
    4922:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    4926:	18 2f       	mov	r17, r24
    4928:	8f 2d       	mov	r24, r15
    492a:	0e 94 5f 22 	call	0x44be	; 0x44be <_Z7bcd2dech>
    492e:	98 2e       	mov	r9, r24
    4930:	81 2f       	mov	r24, r17
    4932:	0e 94 5f 22 	call	0x44be	; 0x44be <_Z7bcd2dech>
    4936:	e8 2e       	mov	r14, r24
    4938:	f1 2c       	mov	r15, r1
    493a:	c7 01       	movw	r24, r14
    493c:	8c 59       	subi	r24, 0x9C	; 156
    493e:	9f 4f       	sbci	r25, 0xFF	; 255
    4940:	8f 83       	std	Y+7, r24	; 0x07
    4942:	98 87       	std	Y+8, r25	; 0x08
    4944:	b0 e3       	ldi	r27, 0x30	; 48
    4946:	eb 1a       	sub	r14, r27
    4948:	b8 ef       	ldi	r27, 0xF8	; 248
    494a:	fb 0a       	sbc	r15, r27
    494c:	87 2d       	mov	r24, r7
    494e:	0e 94 5f 22 	call	0x44be	; 0x44be <_Z7bcd2dech>
    4952:	08 2f       	mov	r16, r24
    4954:	8f ef       	ldi	r24, 0xFF	; 255
    4956:	80 0f       	add	r24, r16
    4958:	8e 83       	std	Y+6, r24	; 0x06
    495a:	88 2d       	mov	r24, r8
    495c:	0e 94 5f 22 	call	0x44be	; 0x44be <_Z7bcd2dech>
    4960:	8c 83       	std	Y+4, r24	; 0x04
    4962:	11 e0       	ldi	r17, 0x01	; 1
    4964:	10 17       	cp	r17, r16
    4966:	60 f4       	brcc	.+24     	; 0x4980 <RTC_String2Epoch+0xd0>
    4968:	61 2f       	mov	r22, r17
    496a:	c7 01       	movw	r24, r14
    496c:	0e 94 49 01 	call	0x292	; 0x292 <month_length>
    4970:	29 85       	ldd	r18, Y+9	; 0x09
    4972:	3a 85       	ldd	r19, Y+10	; 0x0a
    4974:	28 0f       	add	r18, r24
    4976:	31 1d       	adc	r19, r1
    4978:	29 87       	std	Y+9, r18	; 0x09
    497a:	3a 87       	std	Y+10, r19	; 0x0a
    497c:	1f 5f       	subi	r17, 0xFF	; 255
    497e:	f2 cf       	rjmp	.-28     	; 0x4964 <RTC_String2Epoch+0xb4>
    4980:	8c 81       	ldd	r24, Y+4	; 0x04
    4982:	08 2e       	mov	r0, r24
    4984:	00 0c       	add	r0, r0
    4986:	99 0b       	sbc	r25, r25
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	29 85       	ldd	r18, Y+9	; 0x09
    498c:	3a 85       	ldd	r19, Y+10	; 0x0a
    498e:	82 0f       	add	r24, r18
    4990:	93 1f       	adc	r25, r19
    4992:	89 87       	std	Y+9, r24	; 0x09
    4994:	9a 87       	std	Y+10, r25	; 0x0a
    4996:	8a 2d       	mov	r24, r10
    4998:	0e 94 5f 22 	call	0x44be	; 0x44be <_Z7bcd2dech>
    499c:	18 2f       	mov	r17, r24
    499e:	8b 2d       	mov	r24, r11
    49a0:	0e 94 5f 22 	call	0x44be	; 0x44be <_Z7bcd2dech>
    49a4:	9b 82       	std	Y+3, r9	; 0x03
    49a6:	8a 83       	std	Y+2, r24	; 0x02
    49a8:	19 83       	std	Y+1, r17	; 0x01
    49aa:	ce 01       	movw	r24, r28
    49ac:	01 96       	adiw	r24, 0x01	; 1
    49ae:	0e 94 93 22 	call	0x4526	; 0x4526 <_Z14epoch_from_ltmP2tm>
    49b2:	04 c0       	rjmp	.+8      	; 0x49bc <RTC_String2Epoch+0x10c>
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	0e 94 0b 23 	call	0x4616	; 0x4616 <ds3231_get_epoch>
    49bc:	c1 14       	cp	r12, r1
    49be:	d1 04       	cpc	r13, r1
    49c0:	49 f0       	breq	.+18     	; 0x49d4 <RTC_String2Epoch+0x124>
    49c2:	21 e0       	ldi	r18, 0x01	; 1
    49c4:	61 15       	cp	r22, r1
    49c6:	71 05       	cpc	r23, r1
    49c8:	81 05       	cpc	r24, r1
    49ca:	91 05       	cpc	r25, r1
    49cc:	09 f0       	breq	.+2      	; 0x49d0 <RTC_String2Epoch+0x120>
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	f6 01       	movw	r30, r12
    49d2:	20 83       	st	Z, r18
    49d4:	2c 96       	adiw	r28, 0x0c	; 12
    49d6:	cd bf       	out	0x3d, r28	; 61
    49d8:	de bf       	out	0x3e, r29	; 62
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	1f 91       	pop	r17
    49e0:	0f 91       	pop	r16
    49e2:	ff 90       	pop	r15
    49e4:	ef 90       	pop	r14
    49e6:	df 90       	pop	r13
    49e8:	cf 90       	pop	r12
    49ea:	bf 90       	pop	r11
    49ec:	af 90       	pop	r10
    49ee:	9f 90       	pop	r9
    49f0:	8f 90       	pop	r8
    49f2:	7f 90       	pop	r7
    49f4:	08 95       	ret

000049f6 <ds3231_get_temp>:
    49f6:	0f 93       	push	r16
    49f8:	1f 93       	push	r17
    49fa:	cf 93       	push	r28
    49fc:	df 93       	push	r29
    49fe:	00 d0       	rcall	.+0      	; 0x4a00 <ds3231_get_temp+0xa>
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	8c 01       	movw	r16, r24
    4a06:	19 82       	std	Y+1, r1	; 0x01
    4a08:	1a 82       	std	Y+2, r1	; 0x02
    4a0a:	22 e0       	ldi	r18, 0x02	; 2
    4a0c:	ae 01       	movw	r20, r28
    4a0e:	4f 5f       	subi	r20, 0xFF	; 255
    4a10:	5f 4f       	sbci	r21, 0xFF	; 255
    4a12:	61 e1       	ldi	r22, 0x11	; 17
    4a14:	80 ed       	ldi	r24, 0xD0	; 208
    4a16:	0e 94 c5 2a 	call	0x558a	; 0x558a <I2C_0_GetData>
    4a1a:	91 e0       	ldi	r25, 0x01	; 1
    4a1c:	82 30       	cpi	r24, 0x02	; 2
    4a1e:	09 f4       	brne	.+2      	; 0x4a22 <ds3231_get_temp+0x2c>
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	82 30       	cpi	r24, 0x02	; 2
    4a24:	49 f4       	brne	.+18     	; 0x4a38 <ds3231_get_temp+0x42>
    4a26:	29 81       	ldd	r18, Y+1	; 0x01
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	32 2f       	mov	r19, r18
    4a2c:	22 27       	eor	r18, r18
    4a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a30:	28 2b       	or	r18, r24
    4a32:	f8 01       	movw	r30, r16
    4a34:	20 83       	st	Z, r18
    4a36:	31 83       	std	Z+1, r19	; 0x01
    4a38:	89 2f       	mov	r24, r25
    4a3a:	0f 90       	pop	r0
    4a3c:	0f 90       	pop	r0
    4a3e:	df 91       	pop	r29
    4a40:	cf 91       	pop	r28
    4a42:	1f 91       	pop	r17
    4a44:	0f 91       	pop	r16
    4a46:	08 95       	ret

00004a48 <ds3231_set_date_time_arducon>:
    4a48:	ff 92       	push	r15
    4a4a:	0f 93       	push	r16
    4a4c:	1f 93       	push	r17
    4a4e:	cf 93       	push	r28
    4a50:	df 93       	push	r29
    4a52:	cd b7       	in	r28, 0x3d	; 61
    4a54:	de b7       	in	r29, 0x3e	; 62
    4a56:	27 97       	sbiw	r28, 0x07	; 7
    4a58:	cd bf       	out	0x3d, r28	; 61
    4a5a:	de bf       	out	0x3e, r29	; 62
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	31 96       	adiw	r30, 0x01	; 1
    4a60:	27 e0       	ldi	r18, 0x07	; 7
    4a62:	df 01       	movw	r26, r30
    4a64:	1d 92       	st	X+, r1
    4a66:	2a 95       	dec	r18
    4a68:	e9 f7       	brne	.-6      	; 0x4a64 <ds3231_set_date_time_arducon+0x1c>
    4a6a:	00 97       	sbiw	r24, 0x00	; 0
    4a6c:	81 f1       	breq	.+96     	; 0x4ace <ds3231_set_date_time_arducon+0x86>
    4a6e:	f6 2e       	mov	r15, r22
    4a70:	8c 01       	movw	r16, r24
    4a72:	0a 96       	adiw	r24, 0x0a	; 10
    4a74:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    4a78:	89 83       	std	Y+1, r24	; 0x01
    4a7a:	c8 01       	movw	r24, r16
    4a7c:	08 96       	adiw	r24, 0x08	; 8
    4a7e:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    4a82:	8a 83       	std	Y+2, r24	; 0x02
    4a84:	c8 01       	movw	r24, r16
    4a86:	06 96       	adiw	r24, 0x06	; 6
    4a88:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    4a8c:	8b 83       	std	Y+3, r24	; 0x03
    4a8e:	c8 01       	movw	r24, r16
    4a90:	04 96       	adiw	r24, 0x04	; 4
    4a92:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    4a96:	8d 83       	std	Y+5, r24	; 0x05
    4a98:	c8 01       	movw	r24, r16
    4a9a:	02 96       	adiw	r24, 0x02	; 2
    4a9c:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    4aa0:	8e 83       	std	Y+6, r24	; 0x06
    4aa2:	c8 01       	movw	r24, r16
    4aa4:	0e 94 8a 22 	call	0x4514	; 0x4514 <_Z8char2bcdPc>
    4aa8:	8f 83       	std	Y+7, r24	; 0x07
    4aaa:	6f 2d       	mov	r22, r15
    4aac:	66 0f       	add	r22, r22
    4aae:	66 0f       	add	r22, r22
    4ab0:	66 0f       	add	r22, r22
    4ab2:	6f 19       	sub	r22, r15
    4ab4:	27 e0       	ldi	r18, 0x07	; 7
    4ab6:	ae 01       	movw	r20, r28
    4ab8:	4f 5f       	subi	r20, 0xFF	; 255
    4aba:	5f 4f       	sbci	r21, 0xFF	; 255
    4abc:	80 ed       	ldi	r24, 0xD0	; 208
    4abe:	0e 94 87 2a 	call	0x550e	; 0x550e <I2C_0_SendData>
    4ac2:	91 e0       	ldi	r25, 0x01	; 1
    4ac4:	87 30       	cpi	r24, 0x07	; 7
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <ds3231_set_date_time_arducon+0x82>
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	89 2f       	mov	r24, r25
    4acc:	01 c0       	rjmp	.+2      	; 0x4ad0 <ds3231_set_date_time_arducon+0x88>
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	27 96       	adiw	r28, 0x07	; 7
    4ad2:	cd bf       	out	0x3d, r28	; 61
    4ad4:	de bf       	out	0x3e, r29	; 62
    4ad6:	df 91       	pop	r29
    4ad8:	cf 91       	pop	r28
    4ada:	1f 91       	pop	r17
    4adc:	0f 91       	pop	r16
    4ade:	ff 90       	pop	r15
    4ae0:	08 95       	ret

00004ae2 <ds3231_set_date_time>:
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
    4aea:	27 97       	sbiw	r28, 0x07	; 7
    4aec:	cd bf       	out	0x3d, r28	; 61
    4aee:	de bf       	out	0x3e, r29	; 62
    4af0:	fc 01       	movw	r30, r24
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	8c 83       	std	Y+4, r24	; 0x04
    4af6:	82 89       	ldd	r24, Z+18	; 0x12
    4af8:	20 ed       	ldi	r18, 0xD0	; 208
    4afa:	28 0f       	add	r18, r24
    4afc:	91 89       	ldd	r25, Z+17	; 0x11
    4afe:	89 2f       	mov	r24, r25
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	c0 97       	sbiw	r24, 0x30	; 48
    4b04:	82 95       	swap	r24
    4b06:	92 95       	swap	r25
    4b08:	90 7f       	andi	r25, 0xF0	; 240
    4b0a:	98 27       	eor	r25, r24
    4b0c:	80 7f       	andi	r24, 0xF0	; 240
    4b0e:	98 27       	eor	r25, r24
    4b10:	82 2b       	or	r24, r18
    4b12:	89 83       	std	Y+1, r24	; 0x01
    4b14:	87 85       	ldd	r24, Z+15	; 0x0f
    4b16:	20 ed       	ldi	r18, 0xD0	; 208
    4b18:	28 0f       	add	r18, r24
    4b1a:	96 85       	ldd	r25, Z+14	; 0x0e
    4b1c:	89 2f       	mov	r24, r25
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	c0 97       	sbiw	r24, 0x30	; 48
    4b22:	82 95       	swap	r24
    4b24:	92 95       	swap	r25
    4b26:	90 7f       	andi	r25, 0xF0	; 240
    4b28:	98 27       	eor	r25, r24
    4b2a:	80 7f       	andi	r24, 0xF0	; 240
    4b2c:	98 27       	eor	r25, r24
    4b2e:	82 2b       	or	r24, r18
    4b30:	8a 83       	std	Y+2, r24	; 0x02
    4b32:	84 85       	ldd	r24, Z+12	; 0x0c
    4b34:	20 ed       	ldi	r18, 0xD0	; 208
    4b36:	28 0f       	add	r18, r24
    4b38:	93 85       	ldd	r25, Z+11	; 0x0b
    4b3a:	89 2f       	mov	r24, r25
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	c0 97       	sbiw	r24, 0x30	; 48
    4b40:	82 95       	swap	r24
    4b42:	92 95       	swap	r25
    4b44:	90 7f       	andi	r25, 0xF0	; 240
    4b46:	98 27       	eor	r25, r24
    4b48:	80 7f       	andi	r24, 0xF0	; 240
    4b4a:	98 27       	eor	r25, r24
    4b4c:	82 2b       	or	r24, r18
    4b4e:	8b 83       	std	Y+3, r24	; 0x03
    4b50:	81 85       	ldd	r24, Z+9	; 0x09
    4b52:	20 ed       	ldi	r18, 0xD0	; 208
    4b54:	28 0f       	add	r18, r24
    4b56:	90 85       	ldd	r25, Z+8	; 0x08
    4b58:	89 2f       	mov	r24, r25
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	c0 97       	sbiw	r24, 0x30	; 48
    4b5e:	82 95       	swap	r24
    4b60:	92 95       	swap	r25
    4b62:	90 7f       	andi	r25, 0xF0	; 240
    4b64:	98 27       	eor	r25, r24
    4b66:	80 7f       	andi	r24, 0xF0	; 240
    4b68:	98 27       	eor	r25, r24
    4b6a:	82 2b       	or	r24, r18
    4b6c:	8d 83       	std	Y+5, r24	; 0x05
    4b6e:	86 81       	ldd	r24, Z+6	; 0x06
    4b70:	20 ed       	ldi	r18, 0xD0	; 208
    4b72:	28 0f       	add	r18, r24
    4b74:	95 81       	ldd	r25, Z+5	; 0x05
    4b76:	89 2f       	mov	r24, r25
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	c0 97       	sbiw	r24, 0x30	; 48
    4b7c:	82 95       	swap	r24
    4b7e:	92 95       	swap	r25
    4b80:	90 7f       	andi	r25, 0xF0	; 240
    4b82:	98 27       	eor	r25, r24
    4b84:	80 7f       	andi	r24, 0xF0	; 240
    4b86:	98 27       	eor	r25, r24
    4b88:	82 2b       	or	r24, r18
    4b8a:	8e 83       	std	Y+6, r24	; 0x06
    4b8c:	83 81       	ldd	r24, Z+3	; 0x03
    4b8e:	20 ed       	ldi	r18, 0xD0	; 208
    4b90:	28 0f       	add	r18, r24
    4b92:	92 81       	ldd	r25, Z+2	; 0x02
    4b94:	89 2f       	mov	r24, r25
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	c0 97       	sbiw	r24, 0x30	; 48
    4b9a:	82 95       	swap	r24
    4b9c:	92 95       	swap	r25
    4b9e:	90 7f       	andi	r25, 0xF0	; 240
    4ba0:	98 27       	eor	r25, r24
    4ba2:	80 7f       	andi	r24, 0xF0	; 240
    4ba4:	98 27       	eor	r25, r24
    4ba6:	82 2b       	or	r24, r18
    4ba8:	8f 83       	std	Y+7, r24	; 0x07
    4baa:	86 2f       	mov	r24, r22
    4bac:	88 0f       	add	r24, r24
    4bae:	88 0f       	add	r24, r24
    4bb0:	88 0f       	add	r24, r24
    4bb2:	86 1b       	sub	r24, r22
    4bb4:	68 2f       	mov	r22, r24
    4bb6:	27 e0       	ldi	r18, 0x07	; 7
    4bb8:	ae 01       	movw	r20, r28
    4bba:	4f 5f       	subi	r20, 0xFF	; 255
    4bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    4bbe:	80 ed       	ldi	r24, 0xD0	; 208
    4bc0:	0e 94 87 2a 	call	0x550e	; 0x550e <I2C_0_SendData>
    4bc4:	27 96       	adiw	r28, 0x07	; 7
    4bc6:	cd bf       	out	0x3d, r28	; 61
    4bc8:	de bf       	out	0x3e, r29	; 62
    4bca:	df 91       	pop	r29
    4bcc:	cf 91       	pop	r28
    4bce:	08 95       	ret

00004bd0 <ds3231_set_aging>:


	void ds3231_set_aging(int8_t data_in)
	{
    4bd0:	cf 93       	push	r28
    4bd2:	df 93       	push	r29
    4bd4:	1f 92       	push	r1
    4bd6:	cd b7       	in	r28, 0x3d	; 61
    4bd8:	de b7       	in	r29, 0x3e	; 62
		int8_t data[1];
		
		data[0] = data_in;
    4bda:	89 83       	std	Y+1, r24	; 0x01
		I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1);
    4bdc:	21 e0       	ldi	r18, 0x01	; 1
    4bde:	ae 01       	movw	r20, r28
    4be0:	4f 5f       	subi	r20, 0xFF	; 255
    4be2:	5f 4f       	sbci	r21, 0xFF	; 255
    4be4:	60 e1       	ldi	r22, 0x10	; 16
    4be6:	80 ed       	ldi	r24, 0xD0	; 208
    4be8:	0e 94 87 2a 	call	0x550e	; 0x550e <I2C_0_SendData>
	}
    4bec:	0f 90       	pop	r0
    4bee:	df 91       	pop	r29
    4bf0:	cf 91       	pop	r28
    4bf2:	08 95       	ret

00004bf4 <ds3231_get_aging>:


	int8_t ds3231_get_aging()
	{
    4bf4:	cf 93       	push	r28
    4bf6:	df 93       	push	r29
    4bf8:	1f 92       	push	r1
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
		int8_t data[1];
		
		I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1);
    4bfe:	21 e0       	ldi	r18, 0x01	; 1
    4c00:	ae 01       	movw	r20, r28
    4c02:	4f 5f       	subi	r20, 0xFF	; 255
    4c04:	5f 4f       	sbci	r21, 0xFF	; 255
    4c06:	60 e1       	ldi	r22, 0x10	; 16
    4c08:	80 ed       	ldi	r24, 0xD0	; 208
    4c0a:	0e 94 c5 2a 	call	0x558a	; 0x558a <I2C_0_GetData>
		return(data[0]);
	}
    4c0e:	89 81       	ldd	r24, Y+1	; 0x01
    4c10:	0f 90       	pop	r0
    4c12:	df 91       	pop	r29
    4c14:	cf 91       	pop	r28
    4c16:	08 95       	ret

00004c18 <ds3231_responding>:

	bool ds3231_responding()
	{
    4c18:	cf 93       	push	r28
    4c1a:	df 93       	push	r29
    4c1c:	1f 92       	push	r1
    4c1e:	cd b7       	in	r28, 0x3d	; 61
    4c20:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
		int8_t data[1];		
		responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1);
    4c22:	21 e0       	ldi	r18, 0x01	; 1
    4c24:	ae 01       	movw	r20, r28
    4c26:	4f 5f       	subi	r20, 0xFF	; 255
    4c28:	5f 4f       	sbci	r21, 0xFF	; 255
    4c2a:	60 e1       	ldi	r22, 0x10	; 16
    4c2c:	80 ed       	ldi	r24, 0xD0	; 208
    4c2e:	0e 94 c5 2a 	call	0x558a	; 0x558a <I2C_0_GetData>
    4c32:	91 e0       	ldi	r25, 0x01	; 1
    4c34:	81 30       	cpi	r24, 0x01	; 1
    4c36:	09 f0       	breq	.+2      	; 0x4c3a <ds3231_responding+0x22>
    4c38:	90 e0       	ldi	r25, 0x00	; 0
		return(responseReceived);
	}
    4c3a:	89 2f       	mov	r24, r25
    4c3c:	0f 90       	pop	r0
    4c3e:	df 91       	pop	r29
    4c40:	cf 91       	pop	r28
    4c42:	08 95       	ret

00004c44 <ds3231_init>:

time_t epoch_from_ltm(tm *ltm);

bool ds3231_init()
{
	I2C_0_Init();
    4c44:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <I2C_0_Init>
	return (!ds3231_responding());
    4c48:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <ds3231_responding>
}
    4c4c:	91 e0       	ldi	r25, 0x01	; 1
    4c4e:	89 27       	eor	r24, r25
    4c50:	08 95       	ret

00004c52 <ds3231_sync2nearestMinute>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
    4c52:	ff 92       	push	r15
    4c54:	0f 93       	push	r16
    4c56:	1f 93       	push	r17
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	cd b7       	in	r28, 0x3d	; 61
    4c5e:	de b7       	in	r29, 0x3e	; 62
    4c60:	28 97       	sbiw	r28, 0x08	; 8
    4c62:	cd bf       	out	0x3d, r28	; 61
    4c64:	de bf       	out	0x3e, r29	; 62
	BOOL err = FALSE;
	uint8_t data[8] = { 0, 0, 0 };
    4c66:	ae 01       	movw	r20, r28
    4c68:	4f 5f       	subi	r20, 0xFF	; 255
    4c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c6c:	88 e0       	ldi	r24, 0x08	; 8
    4c6e:	fa 01       	movw	r30, r20
    4c70:	11 92       	st	Z+, r1
    4c72:	8a 95       	dec	r24
    4c74:	e9 f7       	brne	.-6      	; 0x4c70 <ds3231_sync2nearestMinute+0x1e>

	if(I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 3) == 3)
    4c76:	23 e0       	ldi	r18, 0x03	; 3
    4c78:	60 e0       	ldi	r22, 0x00	; 0
    4c7a:	80 ed       	ldi	r24, 0xD0	; 208
    4c7c:	0e 94 c5 2a 	call	0x558a	; 0x558a <I2C_0_GetData>
    4c80:	83 30       	cpi	r24, 0x03	; 3
    4c82:	09 f0       	breq	.+2      	; 0x4c86 <ds3231_sync2nearestMinute+0x34>
    4c84:	86 c0       	rjmp	.+268    	; 0x4d92 <ds3231_sync2nearestMinute+0x140>
		uint8_t hour10;
		uint8_t hour;
		BOOL am_pm;
		BOOL twelvehour;

		seconds = bcd2dec(data[0]);
    4c86:	89 81       	ldd	r24, Y+1	; 0x01
    4c88:	0e 94 5f 22 	call	0x44be	; 0x44be <_Z7bcd2dech>
    4c8c:	08 2f       	mov	r16, r24
		minutes = bcd2dec(data[1]);
    4c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c90:	0e 94 5f 22 	call	0x44be	; 0x44be <_Z7bcd2dech>
    4c94:	68 2f       	mov	r22, r24
		am_pm = ((data[2] >> 5) & 0x01);
    4c96:	1b 81       	ldd	r17, Y+3	; 0x03
    4c98:	41 2f       	mov	r20, r17
    4c9a:	50 e0       	ldi	r21, 0x00	; 0
    4c9c:	9a 01       	movw	r18, r20
    4c9e:	35 95       	asr	r19
    4ca0:	27 95       	ror	r18
    4ca2:	35 95       	asr	r19
    4ca4:	27 95       	ror	r18
    4ca6:	35 95       	asr	r19
    4ca8:	27 95       	ror	r18
    4caa:	35 95       	asr	r19
    4cac:	27 95       	ror	r18
    4cae:	35 95       	asr	r19
    4cb0:	27 95       	ror	r18
    4cb2:	92 2f       	mov	r25, r18
    4cb4:	91 70       	andi	r25, 0x01	; 1
		hour10 = ((data[2] >> 4) & 0x01);
    4cb6:	9a 01       	movw	r18, r20
    4cb8:	35 95       	asr	r19
    4cba:	27 95       	ror	r18
    4cbc:	35 95       	asr	r19
    4cbe:	27 95       	ror	r18
    4cc0:	35 95       	asr	r19
    4cc2:	27 95       	ror	r18
    4cc4:	35 95       	asr	r19
    4cc6:	27 95       	ror	r18
    4cc8:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
    4cca:	1f 70       	andi	r17, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);
    4ccc:	04 2e       	mov	r0, r20
    4cce:	45 2f       	mov	r20, r21
    4cd0:	00 0c       	add	r0, r0
    4cd2:	44 1f       	adc	r20, r20
    4cd4:	55 0b       	sbc	r21, r21
    4cd6:	00 0c       	add	r0, r0
    4cd8:	44 1f       	adc	r20, r20
    4cda:	55 1f       	adc	r21, r21

		if(!twelvehour && am_pm)
    4cdc:	f4 2f       	mov	r31, r20
    4cde:	f1 70       	andi	r31, 0x01	; 1
    4ce0:	ff 2e       	mov	r15, r31
    4ce2:	40 fd       	sbrc	r20, 0
    4ce4:	02 c0       	rjmp	.+4      	; 0x4cea <ds3231_sync2nearestMinute+0x98>
    4ce6:	91 11       	cpse	r25, r1
		{
			hour10 = 2;
    4ce8:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
    4cea:	22 0f       	add	r18, r18
    4cec:	92 2f       	mov	r25, r18
    4cee:	99 0f       	add	r25, r25
    4cf0:	99 0f       	add	r25, r25
    4cf2:	29 0f       	add	r18, r25
    4cf4:	12 0f       	add	r17, r18

		if(seconds > 30)
    4cf6:	0f 31       	cpi	r16, 0x1F	; 31
    4cf8:	48 f0       	brcs	.+18     	; 0x4d0c <ds3231_sync2nearestMinute+0xba>
		{
			minutes++;
    4cfa:	6f 5f       	subi	r22, 0xFF	; 255

			if(minutes > 59)
    4cfc:	6c 33       	cpi	r22, 0x3C	; 60
    4cfe:	40 f0       	brcs	.+16     	; 0x4d10 <ds3231_sync2nearestMinute+0xbe>
			{
				minutes = 0;
				hours++;
    4d00:	1f 5f       	subi	r17, 0xFF	; 255

				if(hours > 23) /* Don't attempt to synchronize at midnight */
    4d02:	18 31       	cpi	r17, 0x18	; 24
    4d04:	38 f4       	brcc	.+14     	; 0x4d14 <ds3231_sync2nearestMinute+0xc2>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    4d06:	60 e0       	ldi	r22, 0x00	; 0
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
	BOOL err = FALSE;
    4d08:	80 e0       	ldi	r24, 0x00	; 0
    4d0a:	06 c0       	rjmp	.+12     	; 0x4d18 <ds3231_sync2nearestMinute+0xc6>
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
    4d0e:	04 c0       	rjmp	.+8      	; 0x4d18 <ds3231_sync2nearestMinute+0xc6>
    4d10:	80 e0       	ldi	r24, 0x00	; 0
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <ds3231_sync2nearestMinute+0xc6>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    4d14:	60 e0       	ldi	r22, 0x00	; 0
				hours++;

				if(hours > 23) /* Don't attempt to synchronize at midnight */
				{
					err = TRUE;
    4d16:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}

		if(!err)
    4d18:	81 11       	cpse	r24, r1
    4d1a:	3c c0       	rjmp	.+120    	; 0x4d94 <ds3231_sync2nearestMinute+0x142>
		{
			data[0] = 0; /* seconds = 00 */
    4d1c:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
    4d1e:	86 2f       	mov	r24, r22
    4d20:	0e 94 71 22 	call	0x44e2	; 0x44e2 <_Z7dec2bcdh>
    4d24:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;
    4d26:	1b 82       	std	Y+3, r1	; 0x03

			if(twelvehour)
    4d28:	ff 20       	and	r15, r15
    4d2a:	61 f0       	breq	.+24     	; 0x4d44 <ds3231_sync2nearestMinute+0xf2>
			{
				data[2] |= 0x40; /* set  12-hour bit */
    4d2c:	80 e4       	ldi	r24, 0x40	; 64
    4d2e:	8b 83       	std	Y+3, r24	; 0x03

				if(hours >= 12)
    4d30:	1c 30       	cpi	r17, 0x0C	; 12
    4d32:	10 f0       	brcs	.+4      	; 0x4d38 <ds3231_sync2nearestMinute+0xe6>
				{
					data[2] |= 0x20; /* set pm bit */
    4d34:	80 e6       	ldi	r24, 0x60	; 96
    4d36:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
    4d38:	1a 30       	cpi	r17, 0x0A	; 10
    4d3a:	68 f0       	brcs	.+26     	; 0x4d56 <ds3231_sync2nearestMinute+0x104>
				{
					data[2] |= 0x10;
    4d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3e:	80 61       	ori	r24, 0x10	; 16
    4d40:	8b 83       	std	Y+3, r24	; 0x03
    4d42:	09 c0       	rjmp	.+18     	; 0x4d56 <ds3231_sync2nearestMinute+0x104>
				}
			}
			else
			{
				if(hours >= 20)
    4d44:	14 31       	cpi	r17, 0x14	; 20
    4d46:	18 f0       	brcs	.+6      	; 0x4d4e <ds3231_sync2nearestMinute+0xfc>
				{
					data[2] |= 0x20; /* set 20 bit */
    4d48:	80 e2       	ldi	r24, 0x20	; 32
    4d4a:	8b 83       	std	Y+3, r24	; 0x03
    4d4c:	04 c0       	rjmp	.+8      	; 0x4d56 <ds3231_sync2nearestMinute+0x104>
				}
				else if(hours >= 10)
    4d4e:	1a 30       	cpi	r17, 0x0A	; 10
    4d50:	10 f0       	brcs	.+4      	; 0x4d56 <ds3231_sync2nearestMinute+0x104>
				{
					data[2] |= 0x10; /* set 10 bit */
    4d52:	80 e1       	ldi	r24, 0x10	; 16
    4d54:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
    4d56:	8d ec       	ldi	r24, 0xCD	; 205
    4d58:	18 9f       	mul	r17, r24
    4d5a:	81 2d       	mov	r24, r1
    4d5c:	11 24       	eor	r1, r1
    4d5e:	86 95       	lsr	r24
    4d60:	86 95       	lsr	r24
    4d62:	86 95       	lsr	r24
    4d64:	88 0f       	add	r24, r24
    4d66:	98 2f       	mov	r25, r24
    4d68:	99 0f       	add	r25, r25
    4d6a:	99 0f       	add	r25, r25
    4d6c:	89 0f       	add	r24, r25
    4d6e:	18 1b       	sub	r17, r24
    4d70:	8b 81       	ldd	r24, Y+3	; 0x03
    4d72:	18 2b       	or	r17, r24
    4d74:	1b 83       	std	Y+3, r17	; 0x03
			
			err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4);
    4d76:	24 e0       	ldi	r18, 0x04	; 4
    4d78:	ae 01       	movw	r20, r28
    4d7a:	4f 5f       	subi	r20, 0xFF	; 255
    4d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d7e:	60 e0       	ldi	r22, 0x00	; 0
    4d80:	80 ed       	ldi	r24, 0xD0	; 208
    4d82:	0e 94 87 2a 	call	0x550e	; 0x550e <I2C_0_SendData>
    4d86:	91 e0       	ldi	r25, 0x01	; 1
    4d88:	84 30       	cpi	r24, 0x04	; 4
    4d8a:	09 f4       	brne	.+2      	; 0x4d8e <ds3231_sync2nearestMinute+0x13c>
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	89 2f       	mov	r24, r25
    4d90:	01 c0       	rjmp	.+2      	; 0x4d94 <ds3231_sync2nearestMinute+0x142>
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
	BOOL err = FALSE;
    4d92:	80 e0       	ldi	r24, 0x00	; 0
			err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4);
		}
	}

	return err;
}
    4d94:	28 96       	adiw	r28, 0x08	; 8
    4d96:	cd bf       	out	0x3d, r28	; 61
    4d98:	de bf       	out	0x3e, r29	; 62
    4d9a:	df 91       	pop	r29
    4d9c:	cf 91       	pop	r28
    4d9e:	1f 91       	pop	r17
    4da0:	0f 91       	pop	r16
    4da2:	ff 90       	pop	r15
    4da4:	08 95       	ret

00004da6 <_ZN13EepromManagerC1Ev>:
extern uint16_t g_80m_power_level_mW;

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
    4da6:	08 95       	ret

00004da8 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
    4da8:	08 95       	ret

00004daa <_Z21avr_eeprom_write_bytejh>:
#include <avr/io.h>

typedef uint16_t eeprom_addr_t;

// to write
void avr_eeprom_write_byte(eeprom_addr_t index, uint8_t in) {
    4daa:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    4dac:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    4db0:	91 fd       	sbrc	r25, 1
    4db2:	fc cf       	rjmp	.-8      	; 0x4dac <_Z21avr_eeprom_write_bytejh+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    4db4:	8d e9       	ldi	r24, 0x9D	; 157
    4db6:	93 e1       	ldi	r25, 0x13	; 19
    4db8:	84 bf       	out	0x34, r24	; 52
    4dba:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    4dbe:	f9 01       	movw	r30, r18
    4dc0:	fc 5e       	subi	r31, 0xEC	; 236
    4dc2:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	84 bf       	out	0x34, r24	; 52
    4dc8:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    4dcc:	08 95       	ret

00004dce <_Z21avr_eeprom_write_wordjj>:
}

void avr_eeprom_write_word(eeprom_addr_t index, uint16_t in) {
    4dce:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    4dd0:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    4dd4:	91 fd       	sbrc	r25, 1
    4dd6:	fc cf       	rjmp	.-8      	; 0x4dd0 <_Z21avr_eeprom_write_wordjj+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    4dd8:	8d e9       	ldi	r24, 0x9D	; 157
    4dda:	93 e1       	ldi	r25, 0x13	; 19
    4ddc:	84 bf       	out	0x34, r24	; 52
    4dde:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint16_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    4de2:	f9 01       	movw	r30, r18
    4de4:	fc 5e       	subi	r31, 0xEC	; 236
    4de6:	60 83       	st	Z, r22
    4de8:	71 83       	std	Z+1, r23	; 0x01
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	84 bf       	out	0x34, r24	; 52
    4dee:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    4df2:	08 95       	ret

00004df4 <_Z22avr_eeprom_write_dwordjm>:
}

void avr_eeprom_write_dword(eeprom_addr_t index, uint32_t in) {
    4df4:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    4df6:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    4dfa:	91 fd       	sbrc	r25, 1
    4dfc:	fc cf       	rjmp	.-8      	; 0x4df6 <_Z22avr_eeprom_write_dwordjm+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    4dfe:	8d e9       	ldi	r24, 0x9D	; 157
    4e00:	93 e1       	ldi	r25, 0x13	; 19
    4e02:	84 bf       	out	0x34, r24	; 52
    4e04:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint32_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    4e08:	f9 01       	movw	r30, r18
    4e0a:	fc 5e       	subi	r31, 0xEC	; 236
    4e0c:	40 83       	st	Z, r20
    4e0e:	51 83       	std	Z+1, r21	; 0x01
    4e10:	62 83       	std	Z+2, r22	; 0x02
    4e12:	73 83       	std	Z+3, r23	; 0x03
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	84 bf       	out	0x34, r24	; 52
    4e18:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    4e1c:	08 95       	ret

00004e1e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
}

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
    4e1e:	0f 93       	push	r16
    4e20:	1f 93       	push	r17
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
	if(!val)
    4e26:	41 15       	cp	r20, r1
    4e28:	51 05       	cpc	r21, r1
    4e2a:	09 f4       	brne	.+2      	; 0x4e2e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
    4e2c:	7c c0       	rjmp	.+248    	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
	{
		return;
	}

	switch(v)
    4e2e:	86 2f       	mov	r24, r22
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	84 33       	cpi	r24, 0x34	; 52
    4e34:	91 05       	cpc	r25, r1
    4e36:	08 f0       	brcs	.+2      	; 0x4e3a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x1c>
    4e38:	76 c0       	rjmp	.+236    	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
    4e3a:	ea 01       	movw	r28, r20
    4e3c:	fc 01       	movw	r30, r24
    4e3e:	ec 58       	subi	r30, 0x8C	; 140
    4e40:	ff 4f       	sbci	r31, 0xFF	; 255
    4e42:	0c 94 fe 3e 	jmp	0x7dfc	; 0x7dfc <__tablejump2__>
	{
		case Frequency:
		{
			avr_eeprom_write_dword(Frequency, *(uint32_t*)val);
    4e46:	48 81       	ld	r20, Y
    4e48:	59 81       	ldd	r21, Y+1	; 0x01
    4e4a:	6a 81       	ldd	r22, Y+2	; 0x02
    4e4c:	7b 81       	ldd	r23, Y+3	; 0x03
    4e4e:	8b e2       	ldi	r24, 0x2B	; 43
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    4e56:	67 c0       	rjmp	.+206    	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RTTY_offset:
		{
			avr_eeprom_write_dword(RTTY_offset, *(uint32_t*)val);
    4e58:	48 81       	ld	r20, Y
    4e5a:	59 81       	ldd	r21, Y+1	; 0x01
    4e5c:	6a 81       	ldd	r22, Y+2	; 0x02
    4e5e:	7b 81       	ldd	r23, Y+3	; 0x03
    4e60:	8f e2       	ldi	r24, 0x2F	; 47
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    4e68:	5e c0       	rjmp	.+188    	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RF_Power:
		{
			avr_eeprom_write_word(RF_Power, *(uint32_t*)val);			
    4e6a:	68 81       	ld	r22, Y
    4e6c:	79 81       	ldd	r23, Y+1	; 0x01
    4e6e:	83 e3       	ldi	r24, 0x33	; 51
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	0e 94 e7 26 	call	0x4dce	; 0x4dce <_Z21avr_eeprom_write_wordjj>
		}
		break;
    4e76:	57 c0       	rjmp	.+174    	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
    4e78:	8a 01       	movw	r16, r20
    4e7a:	0f 5f       	subi	r16, 0xFF	; 255
    4e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e7e:	68 81       	ld	r22, Y
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;
    4e80:	8a e0       	ldi	r24, 0x0A	; 10
    4e82:	90 e0       	ldi	r25, 0x00	; 0

			while(c)
    4e84:	66 23       	and	r22, r22
    4e86:	51 f0       	breq	.+20     	; 0x4e9c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x7e>
			{
				avr_eeprom_write_byte(j++, c);
    4e88:	ec 01       	movw	r28, r24
    4e8a:	21 96       	adiw	r28, 0x01	; 1
    4e8c:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>
				c = *char_addr++;
    4e90:	f8 01       	movw	r30, r16
    4e92:	60 81       	ld	r22, Z
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
			{
				avr_eeprom_write_byte(j++, c);
    4e94:	ce 01       	movw	r24, r28
				c = *char_addr++;
    4e96:	0f 5f       	subi	r16, 0xFF	; 255
    4e98:	1f 4f       	sbci	r17, 0xFF	; 255
			char* char_addr = (char*)val;
			char c = *char_addr++;
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
    4e9a:	f4 cf       	rjmp	.-24     	; 0x4e84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x66>
			{
				avr_eeprom_write_byte(j++, c);
				c = *char_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    4e9c:	60 e0       	ldi	r22, 0x00	; 0
    4e9e:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4ea2:	41 c0       	rjmp	.+130    	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
    4ea4:	8a 01       	movw	r16, r20
    4ea6:	0f 5f       	subi	r16, 0xFF	; 255
    4ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    4eaa:	68 81       	ld	r22, Y
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
    4eac:	8f e1       	ldi	r24, 0x1F	; 31
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    4eae:	66 23       	and	r22, r22
    4eb0:	59 f0       	breq	.+22     	; 0x4ec8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				avr_eeprom_write_byte(j++, c);
    4eb2:	c1 e0       	ldi	r28, 0x01	; 1
    4eb4:	c8 0f       	add	r28, r24
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>
				c = *uint8_addr++;
    4ebc:	f8 01       	movw	r30, r16
    4ebe:	60 81       	ld	r22, Z
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
			{
				avr_eeprom_write_byte(j++, c);
    4ec0:	8c 2f       	mov	r24, r28
				c = *uint8_addr++;
    4ec2:	0f 5f       	subi	r16, 0xFF	; 255
    4ec4:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    4ec6:	f3 cf       	rjmp	.-26     	; 0x4eae <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x90>
			{
				avr_eeprom_write_byte(j++, c);
				c = *uint8_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    4ec8:	60 e0       	ldi	r22, 0x00	; 0
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4ed0:	2a c0       	rjmp	.+84     	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Id_codespeed:
		{
			avr_eeprom_write_byte(Id_codespeed, *(uint8_t*)val);
    4ed2:	68 81       	ld	r22, Y
    4ed4:	88 e2       	ldi	r24, 0x28	; 40
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4edc:	24 c0       	rjmp	.+72     	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Fox_setting:
		{
			avr_eeprom_write_byte(Fox_setting, *(uint8_t*)val);
    4ede:	68 81       	ld	r22, Y
    4ee0:	89 e2       	ldi	r24, 0x29	; 41
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4ee8:	1e c0       	rjmp	.+60     	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_start_epoch:
		{
			avr_eeprom_write_dword(Event_start_epoch, *(uint32_t*)val);
    4eea:	48 81       	ld	r20, Y
    4eec:	59 81       	ldd	r21, Y+1	; 0x01
    4eee:	6a 81       	ldd	r22, Y+2	; 0x02
    4ef0:	7b 81       	ldd	r23, Y+3	; 0x03
    4ef2:	82 e0       	ldi	r24, 0x02	; 2
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    4efa:	15 c0       	rjmp	.+42     	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_finish_epoch:
		{
			avr_eeprom_write_dword(Event_finish_epoch, *(uint32_t*)val);
    4efc:	48 81       	ld	r20, Y
    4efe:	59 81       	ldd	r21, Y+1	; 0x01
    4f00:	6a 81       	ldd	r22, Y+2	; 0x02
    4f02:	7b 81       	ldd	r23, Y+3	; 0x03
    4f04:	86 e0       	ldi	r24, 0x06	; 6
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    4f0c:	0c c0       	rjmp	.+24     	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Utc_offset:
		{
			avr_eeprom_write_byte(Utc_offset, *(uint8_t*)val);
    4f0e:	68 81       	ld	r22, Y
    4f10:	8a e2       	ldi	r24, 0x2A	; 42
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4f18:	06 c0       	rjmp	.+12     	; 0x4f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Eeprom_initialization_flag:
		{
			avr_eeprom_write_word(Eeprom_initialization_flag, *(uint16_t*)val);
    4f1a:	68 81       	ld	r22, Y
    4f1c:	79 81       	ldd	r23, Y+1	; 0x01
    4f1e:	80 e0       	ldi	r24, 0x00	; 0
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	0e 94 e7 26 	call	0x4dce	; 0x4dce <_Z21avr_eeprom_write_wordjj>
		{

		}
		break;
	}
}
    4f26:	df 91       	pop	r29
    4f28:	cf 91       	pop	r28
    4f2a:	1f 91       	pop	r17
    4f2c:	0f 91       	pop	r16
    4f2e:	08 95       	ret

00004f30 <_ZN13EepromManager13saveAllEEPROMEv>:


void EepromManager::saveAllEEPROM(void)
{
    4f30:	08 95       	ret

00004f32 <_ZN13EepromManager11readNonVolsEv>:
	// TODO: Save all values that have changed
}


BOOL EepromManager::readNonVols(void)
{
    4f32:	cf 93       	push	r28
    4f34:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    4f36:	80 e0       	ldi	r24, 0x00	; 0
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    4f3e:	8e 3c       	cpi	r24, 0xCE	; 206
    4f40:	91 05       	cpc	r25, r1
    4f42:	09 f0       	breq	.+2      	; 0x4f46 <_ZN13EepromManager11readNonVolsEv+0x14>
    4f44:	dc c0       	rjmp	.+440    	; 0x50fe <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    4f46:	88 e2       	ldi	r24, 0x28	; 40
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	0e 94 c2 43 	call	0x8784	; 0x8784 <eeprom_read_byte>
    4f4e:	85 31       	cpi	r24, 0x15	; 21
    4f50:	20 f4       	brcc	.+8      	; 0x4f5a <_ZN13EepromManager11readNonVolsEv+0x28>
    4f52:	85 30       	cpi	r24, 0x05	; 5
    4f54:	18 f4       	brcc	.+6      	; 0x4f5c <_ZN13EepromManager11readNonVolsEv+0x2a>
    4f56:	85 e0       	ldi	r24, 0x05	; 5
    4f58:	01 c0       	rjmp	.+2      	; 0x4f5c <_ZN13EepromManager11readNonVolsEv+0x2a>
    4f5a:	84 e1       	ldi	r24, 0x14	; 20
    4f5c:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    4f60:	89 e2       	ldi	r24, 0x29	; 41
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	0e 94 c2 43 	call	0x8784	; 0x8784 <eeprom_read_byte>
    4f68:	82 31       	cpi	r24, 0x12	; 18
    4f6a:	08 f0       	brcs	.+2      	; 0x4f6e <_ZN13EepromManager11readNonVolsEv+0x3c>
    4f6c:	81 e1       	ldi	r24, 0x11	; 17
    4f6e:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    4f72:	82 e0       	ldi	r24, 0x02	; 2
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	0e 94 ca 43 	call	0x8794	; 0x8794 <eeprom_read_dword>
    4f7a:	60 93 44 45 	sts	0x4544, r22	; 0x804544 <g_event_start_epoch>
    4f7e:	70 93 45 45 	sts	0x4545, r23	; 0x804545 <g_event_start_epoch+0x1>
    4f82:	80 93 46 45 	sts	0x4546, r24	; 0x804546 <g_event_start_epoch+0x2>
    4f86:	90 93 47 45 	sts	0x4547, r25	; 0x804547 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    4f8a:	86 e0       	ldi	r24, 0x06	; 6
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	0e 94 ca 43 	call	0x8794	; 0x8794 <eeprom_read_dword>
    4f92:	60 93 48 45 	sts	0x4548, r22	; 0x804548 <g_event_finish_epoch>
    4f96:	70 93 49 45 	sts	0x4549, r23	; 0x804549 <g_event_finish_epoch+0x1>
    4f9a:	80 93 4a 45 	sts	0x454A, r24	; 0x80454a <g_event_finish_epoch+0x2>
    4f9e:	90 93 4b 45 	sts	0x454B, r25	; 0x80454b <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    4fa2:	8a e2       	ldi	r24, 0x2A	; 42
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	0e 94 c2 43 	call	0x8784	; 0x8784 <eeprom_read_byte>
    4faa:	80 93 4c 45 	sts	0x454C, r24	; 0x80454c <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    4fae:	c0 e0       	ldi	r28, 0x00	; 0
    4fb0:	d0 e0       	ldi	r29, 0x00	; 0
    4fb2:	c4 31       	cpi	r28, 0x14	; 20
    4fb4:	d1 05       	cpc	r29, r1
    4fb6:	58 f4       	brcc	.+22     	; 0x4fce <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    4fb8:	ce 01       	movw	r24, r28
    4fba:	86 5f       	subi	r24, 0xF6	; 246
    4fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4fbe:	0e 94 c2 43 	call	0x8784	; 0x8784 <eeprom_read_byte>
    4fc2:	fe 01       	movw	r30, r28
    4fc4:	e7 50       	subi	r30, 0x07	; 7
    4fc6:	fb 4b       	sbci	r31, 0xBB	; 187
    4fc8:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    4fca:	81 11       	cpse	r24, r1
    4fcc:	03 c0       	rjmp	.+6      	; 0x4fd4 <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    4fce:	c0 e0       	ldi	r28, 0x00	; 0
    4fd0:	d0 e0       	ldi	r29, 0x00	; 0
    4fd2:	02 c0       	rjmp	.+4      	; 0x4fd8 <_ZN13EepromManager11readNonVolsEv+0xa6>
    4fd4:	21 96       	adiw	r28, 0x01	; 1
    4fd6:	ed cf       	rjmp	.-38     	; 0x4fb2 <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    4fd8:	c8 30       	cpi	r28, 0x08	; 8
    4fda:	d1 05       	cpc	r29, r1
    4fdc:	68 f4       	brcc	.+26     	; 0x4ff8 <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    4fde:	ce 01       	movw	r24, r28
    4fe0:	81 5e       	subi	r24, 0xE1	; 225
    4fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe4:	0e 94 c2 43 	call	0x8784	; 0x8784 <eeprom_read_byte>
    4fe8:	fe 01       	movw	r30, r28
    4fea:	e3 5b       	subi	r30, 0xB3	; 179
    4fec:	fa 4b       	sbci	r31, 0xBA	; 186
    4fee:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    4ff0:	88 23       	and	r24, r24
    4ff2:	11 f0       	breq	.+4      	; 0x4ff8 <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    4ff4:	21 96       	adiw	r28, 0x01	; 1
    4ff6:	f0 cf       	rjmp	.-32     	; 0x4fd8 <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    4ff8:	8b e2       	ldi	r24, 0x2B	; 43
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	0e 94 ca 43 	call	0x8794	; 0x8794 <eeprom_read_dword>
    5000:	61 30       	cpi	r22, 0x01	; 1
    5002:	29 e0       	ldi	r18, 0x09	; 9
    5004:	72 07       	cpc	r23, r18
    5006:	2d e3       	ldi	r18, 0x3D	; 61
    5008:	82 07       	cpc	r24, r18
    500a:	91 05       	cpc	r25, r1
    500c:	60 f4       	brcc	.+24     	; 0x5026 <_ZN13EepromManager11readNonVolsEv+0xf4>
    500e:	60 3e       	cpi	r22, 0xE0	; 224
    5010:	27 e6       	ldi	r18, 0x67	; 103
    5012:	72 07       	cpc	r23, r18
    5014:	25 e3       	ldi	r18, 0x35	; 53
    5016:	82 07       	cpc	r24, r18
    5018:	91 05       	cpc	r25, r1
    501a:	50 f4       	brcc	.+20     	; 0x5030 <_ZN13EepromManager11readNonVolsEv+0xfe>
    501c:	40 ee       	ldi	r20, 0xE0	; 224
    501e:	37 e6       	ldi	r19, 0x67	; 103
    5020:	25 e3       	ldi	r18, 0x35	; 53
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	09 c0       	rjmp	.+18     	; 0x5038 <_ZN13EepromManager11readNonVolsEv+0x106>
    5026:	40 e0       	ldi	r20, 0x00	; 0
    5028:	39 e0       	ldi	r19, 0x09	; 9
    502a:	2d e3       	ldi	r18, 0x3D	; 61
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	04 c0       	rjmp	.+8      	; 0x5038 <_ZN13EepromManager11readNonVolsEv+0x106>
    5030:	46 2f       	mov	r20, r22
    5032:	37 2f       	mov	r19, r23
    5034:	28 2f       	mov	r18, r24
    5036:	89 2f       	mov	r24, r25
    5038:	40 93 2c 40 	sts	0x402C, r20	; 0x80402c <g_80m_frequency>
    503c:	30 93 2d 40 	sts	0x402D, r19	; 0x80402d <g_80m_frequency+0x1>
    5040:	20 93 2e 40 	sts	0x402E, r18	; 0x80402e <g_80m_frequency+0x2>
    5044:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    5048:	8f e2       	ldi	r24, 0x2F	; 47
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	0e 94 ca 43 	call	0x8794	; 0x8794 <eeprom_read_dword>
    5050:	60 93 32 40 	sts	0x4032, r22	; 0x804032 <g_rtty_offset>
    5054:	70 93 33 40 	sts	0x4033, r23	; 0x804033 <g_rtty_offset+0x1>
    5058:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <g_rtty_offset+0x2>
    505c:	90 93 35 40 	sts	0x4035, r25	; 0x804035 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    5060:	83 e3       	ldi	r24, 0x33	; 51
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <eeprom_read_word>
    5068:	89 38       	cpi	r24, 0x89	; 137
    506a:	23 e1       	ldi	r18, 0x13	; 19
    506c:	92 07       	cpc	r25, r18
    506e:	18 f0       	brcs	.+6      	; 0x5076 <_ZN13EepromManager11readNonVolsEv+0x144>
    5070:	28 e8       	ldi	r18, 0x88	; 136
    5072:	83 e1       	ldi	r24, 0x13	; 19
    5074:	02 c0       	rjmp	.+4      	; 0x507a <_ZN13EepromManager11readNonVolsEv+0x148>
    5076:	28 2f       	mov	r18, r24
    5078:	89 2f       	mov	r24, r25
    507a:	20 93 30 40 	sts	0x4030, r18	; 0x804030 <g_80m_power_level_mW>
    507e:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    5082:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    5086:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    508a:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    508e:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    5092:	89 2b       	or	r24, r25
    5094:	8a 2b       	or	r24, r26
    5096:	8b 2b       	or	r24, r27
    5098:	b9 f0       	breq	.+46     	; 0x50c8 <_ZN13EepromManager11readNonVolsEv+0x196>
    509a:	40 91 48 45 	lds	r20, 0x4548	; 0x804548 <g_event_finish_epoch>
    509e:	50 91 49 45 	lds	r21, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    50a2:	60 91 4a 45 	lds	r22, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    50a6:	70 91 4b 45 	lds	r23, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    50aa:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    50ae:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    50b2:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    50b6:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    50ba:	84 17       	cp	r24, r20
    50bc:	95 07       	cpc	r25, r21
    50be:	a6 07       	cpc	r26, r22
    50c0:	b7 07       	cpc	r27, r23
    50c2:	20 f4       	brcc	.+8      	; 0x50cc <_ZN13EepromManager11readNonVolsEv+0x19a>
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	03 c0       	rjmp	.+6      	; 0x50ce <_ZN13EepromManager11readNonVolsEv+0x19c>
    50c8:	80 e0       	ldi	r24, 0x00	; 0
    50ca:	01 c0       	rjmp	.+2      	; 0x50ce <_ZN13EepromManager11readNonVolsEv+0x19c>
    50cc:	81 e0       	ldi	r24, 0x01	; 1
    50ce:	88 23       	and	r24, r24
    50d0:	c1 f0       	breq	.+48     	; 0x5102 <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    50d2:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    50d6:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    50da:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    50de:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    50e2:	80 58       	subi	r24, 0x80	; 128
    50e4:	9e 4a       	sbci	r25, 0xAE	; 174
    50e6:	ae 4f       	sbci	r26, 0xFE	; 254
    50e8:	bf 4f       	sbci	r27, 0xFF	; 255
    50ea:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <g_event_finish_epoch>
    50ee:	90 93 49 45 	sts	0x4549, r25	; 0x804549 <g_event_finish_epoch+0x1>
    50f2:	a0 93 4a 45 	sts	0x454A, r26	; 0x80454a <g_event_finish_epoch+0x2>
    50f6:	b0 93 4b 45 	sts	0x454B, r27	; 0x80454b <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
    50fa:	80 e0       	ldi	r24, 0x00	; 0
    50fc:	03 c0       	rjmp	.+6      	; 0x5104 <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	01 c0       	rjmp	.+2      	; 0x5104 <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
    5102:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    5104:	df 91       	pop	r29
    5106:	cf 91       	pop	r28
    5108:	08 95       	ret

0000510a <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	BOOL EepromManager::initializeEEPROMVars(void)
	{
    510a:	ef 92       	push	r14
    510c:	ff 92       	push	r15
    510e:	0f 93       	push	r16
    5110:	1f 93       	push	r17
    5112:	cf 93       	push	r28
    5114:	df 93       	push	r29
		BOOL err = FALSE;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    5116:	80 e0       	ldi	r24, 0x00	; 0
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    511e:	8e 3c       	cpi	r24, 0xCE	; 206
    5120:	91 05       	cpc	r25, r1
    5122:	09 f4       	brne	.+2      	; 0x5126 <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    5124:	aa c0       	rjmp	.+340    	; 0x527a <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    5126:	84 e1       	ldi	r24, 0x14	; 20
    5128:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    512c:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    5130:	88 e2       	ldi	r24, 0x28	; 40
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    5138:	81 e0       	ldi	r24, 0x01	; 1
    513a:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    513e:	60 91 1b 40 	lds	r22, 0x401B	; 0x80401b <g_fox>
    5142:	89 e2       	ldi	r24, 0x29	; 41
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    514a:	10 92 44 45 	sts	0x4544, r1	; 0x804544 <g_event_start_epoch>
    514e:	10 92 45 45 	sts	0x4545, r1	; 0x804545 <g_event_start_epoch+0x1>
    5152:	10 92 46 45 	sts	0x4546, r1	; 0x804546 <g_event_start_epoch+0x2>
    5156:	10 92 47 45 	sts	0x4547, r1	; 0x804547 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    515a:	40 91 44 45 	lds	r20, 0x4544	; 0x804544 <g_event_start_epoch>
    515e:	50 91 45 45 	lds	r21, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    5162:	60 91 46 45 	lds	r22, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    5166:	70 91 47 45 	lds	r23, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    516a:	82 e0       	ldi	r24, 0x02	; 2
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    5172:	10 92 48 45 	sts	0x4548, r1	; 0x804548 <g_event_finish_epoch>
    5176:	10 92 49 45 	sts	0x4549, r1	; 0x804549 <g_event_finish_epoch+0x1>
    517a:	10 92 4a 45 	sts	0x454A, r1	; 0x80454a <g_event_finish_epoch+0x2>
    517e:	10 92 4b 45 	sts	0x454B, r1	; 0x80454b <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    5182:	40 91 48 45 	lds	r20, 0x4548	; 0x804548 <g_event_finish_epoch>
    5186:	50 91 49 45 	lds	r21, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    518a:	60 91 4a 45 	lds	r22, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    518e:	70 91 4b 45 	lds	r23, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    5192:	86 e0       	ldi	r24, 0x06	; 6
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    519a:	10 92 4c 45 	sts	0x454C, r1	; 0x80454c <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    519e:	60 91 4c 45 	lds	r22, 0x454C	; 0x80454c <g_utc_offset>
    51a2:	8a e2       	ldi	r24, 0x2A	; 42
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    51aa:	10 92 0e 45 	sts	0x450E, r1	; 0x80450e <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    51ae:	60 e0       	ldi	r22, 0x00	; 0
    51b0:	8a e0       	ldi	r24, 0x0A	; 10
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    51b8:	e9 e5       	ldi	r30, 0x59	; 89
    51ba:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    51bc:	c0 e0       	ldi	r28, 0x00	; 0
    51be:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    51c0:	8f e1       	ldi	r24, 0x1F	; 31
    51c2:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    51c4:	c4 30       	cpi	r28, 0x04	; 4
    51c6:	d1 05       	cpc	r29, r1
    51c8:	90 f4       	brcc	.+36     	; 0x51ee <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    51ca:	df 01       	movw	r26, r30
    51cc:	2d 91       	ld	r18, X+
    51ce:	8d 01       	movw	r16, r26
    51d0:	de 01       	movw	r26, r28
    51d2:	a3 5b       	subi	r26, 0xB3	; 179
    51d4:	ba 4b       	sbci	r27, 0xBA	; 186
    51d6:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    51d8:	60 81       	ld	r22, Z
    51da:	7c 01       	movw	r14, r24
    51dc:	bf ef       	ldi	r27, 0xFF	; 255
    51de:	eb 1a       	sub	r14, r27
    51e0:	fb 0a       	sbc	r15, r27
    51e2:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    51e6:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    51e8:	f8 01       	movw	r30, r16
    51ea:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    51ec:	eb cf       	rjmp	.-42     	; 0x51c4 <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    51ee:	60 e0       	ldi	r22, 0x00	; 0
    51f0:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    51f4:	c3 5b       	subi	r28, 0xB3	; 179
    51f6:	da 4b       	sbci	r29, 0xBA	; 186
    51f8:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    51fa:	80 e2       	ldi	r24, 0x20	; 32
    51fc:	94 e0       	ldi	r25, 0x04	; 4
    51fe:	a6 e3       	ldi	r26, 0x36	; 54
    5200:	b0 e0       	ldi	r27, 0x00	; 0
    5202:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    5206:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    520a:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    520e:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    5212:	40 e2       	ldi	r20, 0x20	; 32
    5214:	54 e0       	ldi	r21, 0x04	; 4
    5216:	66 e3       	ldi	r22, 0x36	; 54
    5218:	70 e0       	ldi	r23, 0x00	; 0
    521a:	8b e2       	ldi	r24, 0x2B	; 43
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    5222:	8a ea       	ldi	r24, 0xAA	; 170
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	a0 e0       	ldi	r26, 0x00	; 0
    5228:	b0 e0       	ldi	r27, 0x00	; 0
    522a:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <g_rtty_offset>
    522e:	90 93 33 40 	sts	0x4033, r25	; 0x804033 <g_rtty_offset+0x1>
    5232:	a0 93 34 40 	sts	0x4034, r26	; 0x804034 <g_rtty_offset+0x2>
    5236:	b0 93 35 40 	sts	0x4035, r27	; 0x804035 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    523a:	40 91 2c 40 	lds	r20, 0x402C	; 0x80402c <g_80m_frequency>
    523e:	50 91 2d 40 	lds	r21, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    5242:	60 91 2e 40 	lds	r22, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    5246:	70 91 2f 40 	lds	r23, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    524a:	8b e2       	ldi	r24, 0x2B	; 43
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    5252:	84 ef       	ldi	r24, 0xF4	; 244
    5254:	91 e0       	ldi	r25, 0x01	; 1
    5256:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    525a:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    525e:	44 ef       	ldi	r20, 0xF4	; 244
    5260:	51 e0       	ldi	r21, 0x01	; 1
    5262:	60 e0       	ldi	r22, 0x00	; 0
    5264:	70 e0       	ldi	r23, 0x00	; 0
    5266:	83 e3       	ldi	r24, 0x33	; 51
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    526e:	6e ec       	ldi	r22, 0xCE	; 206
    5270:	70 e0       	ldi	r23, 0x00	; 0
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	0e 94 e7 26 	call	0x4dce	; 0x4dce <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    527a:	80 e0       	ldi	r24, 0x00	; 0
    527c:	df 91       	pop	r29
    527e:	cf 91       	pop	r28
    5280:	1f 91       	pop	r17
    5282:	0f 91       	pop	r16
    5284:	ff 90       	pop	r15
    5286:	ef 90       	pop	r14
    5288:	08 95       	ret

0000528a <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    528a:	ef 92       	push	r14
    528c:	ff 92       	push	r15
    528e:	0f 93       	push	r16
    5290:	1f 93       	push	r17
    5292:	cf 93       	push	r28
    5294:	df 93       	push	r29
    5296:	e4 2e       	mov	r14, r20
    5298:	f5 2e       	mov	r15, r21
    529a:	d6 2f       	mov	r29, r22
    529c:	c7 2f       	mov	r28, r23
    529e:	00 93 7b 45 	sts	0x457B, r16	; 0x80457b <_SAMPLING_FREQUENCY>
    52a2:	10 93 7c 45 	sts	0x457C, r17	; 0x80457c <_SAMPLING_FREQUENCY+0x1>
    52a6:	20 93 7d 45 	sts	0x457D, r18	; 0x80457d <_SAMPLING_FREQUENCY+0x2>
    52aa:	30 93 7e 45 	sts	0x457E, r19	; 0x80457e <_SAMPLING_FREQUENCY+0x3>
    52ae:	20 e0       	ldi	r18, 0x00	; 0
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	41 e5       	ldi	r20, 0x51	; 81
    52b4:	53 e4       	ldi	r21, 0x43	; 67
    52b6:	6e 2d       	mov	r22, r14
    52b8:	7f 2d       	mov	r23, r15
    52ba:	8d 2f       	mov	r24, r29
    52bc:	9c 2f       	mov	r25, r28
    52be:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__gesf2>
    52c2:	18 16       	cp	r1, r24
    52c4:	8c f0       	brlt	.+34     	; 0x52e8 <_ZN8GoertzelC1Eff+0x5e>
    52c6:	20 e0       	ldi	r18, 0x00	; 0
    52c8:	30 e0       	ldi	r19, 0x00	; 0
    52ca:	48 ec       	ldi	r20, 0xC8	; 200
    52cc:	52 e4       	ldi	r21, 0x42	; 66
    52ce:	6e 2d       	mov	r22, r14
    52d0:	7f 2d       	mov	r23, r15
    52d2:	8d 2f       	mov	r24, r29
    52d4:	9c 2f       	mov	r25, r28
    52d6:	0e 94 b4 3c 	call	0x7968	; 0x7968 <__cmpsf2>
    52da:	88 23       	and	r24, r24
    52dc:	4c f4       	brge	.+18     	; 0x52f0 <_ZN8GoertzelC1Eff+0x66>
    52de:	e1 2c       	mov	r14, r1
    52e0:	f1 2c       	mov	r15, r1
    52e2:	d8 ec       	ldi	r29, 0xC8	; 200
    52e4:	c2 e4       	ldi	r28, 0x42	; 66
    52e6:	04 c0       	rjmp	.+8      	; 0x52f0 <_ZN8GoertzelC1Eff+0x66>
    52e8:	e1 2c       	mov	r14, r1
    52ea:	f1 2c       	mov	r15, r1
    52ec:	d1 e5       	ldi	r29, 0x51	; 81
    52ee:	c3 e4       	ldi	r28, 0x43	; 67
    52f0:	6e 2d       	mov	r22, r14
    52f2:	7f 2d       	mov	r23, r15
    52f4:	8d 2f       	mov	r24, r29
    52f6:	9c 2f       	mov	r25, r28
    52f8:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <__fixsfsi>
    52fc:	60 93 79 45 	sts	0x4579, r22	; 0x804579 <_N>
    5300:	70 93 7a 45 	sts	0x457A, r23	; 0x80457a <_N+0x1>
    5304:	80 91 79 45 	lds	r24, 0x4579	; 0x804579 <_N>
    5308:	90 91 7a 45 	lds	r25, 0x457A	; 0x80457a <_N+0x1>
    530c:	88 0f       	add	r24, r24
    530e:	99 1f       	adc	r25, r25
    5310:	0e 94 30 3f 	call	0x7e60	; 0x7e60 <malloc>
    5314:	80 93 74 45 	sts	0x4574, r24	; 0x804574 <testData>
    5318:	90 93 75 45 	sts	0x4575, r25	; 0x804575 <testData+0x1>
    531c:	df 91       	pop	r29
    531e:	cf 91       	pop	r28
    5320:	1f 91       	pop	r17
    5322:	0f 91       	pop	r16
    5324:	ff 90       	pop	r15
    5326:	ef 90       	pop	r14
    5328:	08 95       	ret

0000532a <_ZN8GoertzelD1Ev>:
    532a:	80 91 74 45 	lds	r24, 0x4574	; 0x804574 <testData>
    532e:	90 91 75 45 	lds	r25, 0x4575	; 0x804575 <testData+0x1>
    5332:	0e 94 c8 3f 	call	0x7f90	; 0x7f90 <free>
    5336:	08 95       	ret

00005338 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    5338:	80 91 76 45 	lds	r24, 0x4576	; 0x804576 <_samplesReady>
    533c:	88 23       	and	r24, r24
    533e:	19 f0       	breq	.+6      	; 0x5346 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    5340:	80 91 76 45 	lds	r24, 0x4576	; 0x804576 <_samplesReady>
    5344:	08 95       	ret
	}

	testData[_index] = data;
    5346:	e0 91 77 45 	lds	r30, 0x4577	; 0x804577 <_index>
    534a:	f0 91 78 45 	lds	r31, 0x4578	; 0x804578 <_index+0x1>
    534e:	ee 0f       	add	r30, r30
    5350:	ff 1f       	adc	r31, r31
    5352:	80 91 74 45 	lds	r24, 0x4574	; 0x804574 <testData>
    5356:	90 91 75 45 	lds	r25, 0x4575	; 0x804575 <testData+0x1>
    535a:	e8 0f       	add	r30, r24
    535c:	f9 1f       	adc	r31, r25
    535e:	60 83       	st	Z, r22
    5360:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    5362:	80 91 77 45 	lds	r24, 0x4577	; 0x804577 <_index>
    5366:	90 91 78 45 	lds	r25, 0x4578	; 0x804578 <_index+0x1>
    536a:	01 96       	adiw	r24, 0x01	; 1
    536c:	80 93 77 45 	sts	0x4577, r24	; 0x804577 <_index>
    5370:	90 93 78 45 	sts	0x4578, r25	; 0x804578 <_index+0x1>
	if(_index >= _N)
    5374:	20 91 77 45 	lds	r18, 0x4577	; 0x804577 <_index>
    5378:	30 91 78 45 	lds	r19, 0x4578	; 0x804578 <_index+0x1>
    537c:	80 91 79 45 	lds	r24, 0x4579	; 0x804579 <_N>
    5380:	90 91 7a 45 	lds	r25, 0x457A	; 0x80457a <_N+0x1>
    5384:	28 17       	cp	r18, r24
    5386:	39 07       	cpc	r19, r25
    5388:	3c f0       	brlt	.+14     	; 0x5398 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    538a:	10 92 77 45 	sts	0x4577, r1	; 0x804577 <_index>
    538e:	10 92 78 45 	sts	0x4578, r1	; 0x804578 <_index+0x1>
		_samplesReady = true;
    5392:	81 e0       	ldi	r24, 0x01	; 1
    5394:	80 93 76 45 	sts	0x4576, r24	; 0x804576 <_samplesReady>
	}

	return(_samplesReady);
    5398:	80 91 76 45 	lds	r24, 0x4576	; 0x804576 <_samplesReady>
}
    539c:	08 95       	ret

0000539e <_ZL11i2c_0_WaitWv>:
	return retVal;
}

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    539e:	8c e2       	ldi	r24, 0x2C	; 44
    53a0:	91 e0       	ldi	r25, 0x01	; 1
    53a2:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    53a6:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    53aa:	80 e0       	ldi	r24, 0x00	; 0
    53ac:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    53b0:	90 7c       	andi	r25, 0xC0	; 192
    53b2:	31 f0       	breq	.+12     	; 0x53c0 <_ZL11i2c_0_WaitWv+0x22>
    53b4:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    53b8:	84 fd       	sbrc	r24, 4
    53ba:	07 c0       	rjmp	.+14     	; 0x53ca <_ZL11i2c_0_WaitWv+0x2c>
    53bc:	81 e0       	ldi	r24, 0x01	; 1
    53be:	08 c0       	rjmp	.+16     	; 0x53d0 <_ZL11i2c_0_WaitWv+0x32>
    53c0:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    53c4:	9c 70       	andi	r25, 0x0C	; 12
    53c6:	19 f4       	brne	.+6      	; 0x53ce <_ZL11i2c_0_WaitWv+0x30>
    53c8:	03 c0       	rjmp	.+6      	; 0x53d0 <_ZL11i2c_0_WaitWv+0x32>
    53ca:	82 e0       	ldi	r24, 0x02	; 2
    53cc:	01 c0       	rjmp	.+2      	; 0x53d0 <_ZL11i2c_0_WaitWv+0x32>
    53ce:	84 e0       	ldi	r24, 0x04	; 4
    53d0:	81 11       	cpse	r24, r1
    53d2:	08 c0       	rjmp	.+16     	; 0x53e4 <_ZL11i2c_0_WaitWv+0x46>
    53d4:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    53d8:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    53dc:	23 2b       	or	r18, r19
    53de:	21 f4       	brne	.+8      	; 0x53e8 <_ZL11i2c_0_WaitWv+0x4a>
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	03 c0       	rjmp	.+6      	; 0x53ea <_ZL11i2c_0_WaitWv+0x4c>
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	01 c0       	rjmp	.+2      	; 0x53ea <_ZL11i2c_0_WaitWv+0x4c>
    53e8:	91 e0       	ldi	r25, 0x01	; 1
    53ea:	91 11       	cpse	r25, r1
    53ec:	df cf       	rjmp	.-66     	; 0x53ac <_ZL11i2c_0_WaitWv+0xe>
    53ee:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    53f2:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    53f6:	23 2b       	or	r18, r19
    53f8:	09 f4       	brne	.+2      	; 0x53fc <_ZL11i2c_0_WaitWv+0x5e>
    53fa:	84 e0       	ldi	r24, 0x04	; 4
    53fc:	08 95       	ret

000053fe <_ZL11i2c_0_WaitRv>:
    53fe:	88 ec       	ldi	r24, 0xC8	; 200
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    5406:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    540a:	80 e0       	ldi	r24, 0x00	; 0
    540c:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    5410:	90 7c       	andi	r25, 0xC0	; 192
    5412:	29 f4       	brne	.+10     	; 0x541e <_ZL11i2c_0_WaitRv+0x20>
    5414:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    5418:	9c 70       	andi	r25, 0x0C	; 12
    541a:	19 f4       	brne	.+6      	; 0x5422 <_ZL11i2c_0_WaitRv+0x24>
    541c:	03 c0       	rjmp	.+6      	; 0x5424 <_ZL11i2c_0_WaitRv+0x26>
    541e:	83 e0       	ldi	r24, 0x03	; 3
    5420:	01 c0       	rjmp	.+2      	; 0x5424 <_ZL11i2c_0_WaitRv+0x26>
    5422:	84 e0       	ldi	r24, 0x04	; 4
    5424:	81 11       	cpse	r24, r1
    5426:	08 c0       	rjmp	.+16     	; 0x5438 <_ZL11i2c_0_WaitRv+0x3a>
    5428:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    542c:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    5430:	23 2b       	or	r18, r19
    5432:	21 f4       	brne	.+8      	; 0x543c <_ZL11i2c_0_WaitRv+0x3e>
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	03 c0       	rjmp	.+6      	; 0x543e <_ZL11i2c_0_WaitRv+0x40>
    5438:	90 e0       	ldi	r25, 0x00	; 0
    543a:	01 c0       	rjmp	.+2      	; 0x543e <_ZL11i2c_0_WaitRv+0x40>
    543c:	91 e0       	ldi	r25, 0x01	; 1
    543e:	91 11       	cpse	r25, r1
    5440:	e5 cf       	rjmp	.-54     	; 0x540c <_ZL11i2c_0_WaitRv+0xe>
    5442:	08 95       	ret

00005444 <_ZL11i2c_1_WaitWv>:
    5444:	88 ec       	ldi	r24, 0xC8	; 200
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    544c:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    5450:	80 e0       	ldi	r24, 0x00	; 0
    5452:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    5456:	29 2f       	mov	r18, r25
    5458:	20 7c       	andi	r18, 0xC0	; 192
    545a:	21 f0       	breq	.+8      	; 0x5464 <_ZL11i2c_1_WaitWv+0x20>
    545c:	94 fd       	sbrc	r25, 4
    545e:	05 c0       	rjmp	.+10     	; 0x546a <_ZL11i2c_1_WaitWv+0x26>
    5460:	81 e0       	ldi	r24, 0x01	; 1
    5462:	06 c0       	rjmp	.+12     	; 0x5470 <_ZL11i2c_1_WaitWv+0x2c>
    5464:	9c 70       	andi	r25, 0x0C	; 12
    5466:	19 f4       	brne	.+6      	; 0x546e <_ZL11i2c_1_WaitWv+0x2a>
    5468:	03 c0       	rjmp	.+6      	; 0x5470 <_ZL11i2c_1_WaitWv+0x2c>
    546a:	82 e0       	ldi	r24, 0x02	; 2
    546c:	01 c0       	rjmp	.+2      	; 0x5470 <_ZL11i2c_1_WaitWv+0x2c>
    546e:	84 e0       	ldi	r24, 0x04	; 4
    5470:	81 11       	cpse	r24, r1
    5472:	08 c0       	rjmp	.+16     	; 0x5484 <_ZL11i2c_1_WaitWv+0x40>
    5474:	20 91 1e 40 	lds	r18, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    5478:	30 91 1f 40 	lds	r19, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    547c:	23 2b       	or	r18, r19
    547e:	21 f4       	brne	.+8      	; 0x5488 <_ZL11i2c_1_WaitWv+0x44>
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	03 c0       	rjmp	.+6      	; 0x548a <_ZL11i2c_1_WaitWv+0x46>
    5484:	90 e0       	ldi	r25, 0x00	; 0
    5486:	01 c0       	rjmp	.+2      	; 0x548a <_ZL11i2c_1_WaitWv+0x46>
    5488:	91 e0       	ldi	r25, 0x01	; 1
    548a:	91 11       	cpse	r25, r1
    548c:	e2 cf       	rjmp	.-60     	; 0x5452 <_ZL11i2c_1_WaitWv+0xe>
    548e:	08 95       	ret

00005490 <_ZL11I2C_1_WaitRv>:
    5490:	88 ec       	ldi	r24, 0xC8	; 200
    5492:	90 e0       	ldi	r25, 0x00	; 0
    5494:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    5498:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    549c:	80 e0       	ldi	r24, 0x00	; 0
    549e:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    54a2:	90 7c       	andi	r25, 0xC0	; 192
    54a4:	29 f4       	brne	.+10     	; 0x54b0 <_ZL11I2C_1_WaitRv+0x20>
    54a6:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    54aa:	9c 70       	andi	r25, 0x0C	; 12
    54ac:	19 f4       	brne	.+6      	; 0x54b4 <_ZL11I2C_1_WaitRv+0x24>
    54ae:	03 c0       	rjmp	.+6      	; 0x54b6 <_ZL11I2C_1_WaitRv+0x26>
    54b0:	83 e0       	ldi	r24, 0x03	; 3
    54b2:	01 c0       	rjmp	.+2      	; 0x54b6 <_ZL11I2C_1_WaitRv+0x26>
    54b4:	84 e0       	ldi	r24, 0x04	; 4
    54b6:	81 11       	cpse	r24, r1
    54b8:	08 c0       	rjmp	.+16     	; 0x54ca <_ZL11I2C_1_WaitRv+0x3a>
    54ba:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    54be:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    54c2:	23 2b       	or	r18, r19
    54c4:	21 f4       	brne	.+8      	; 0x54ce <_ZL11I2C_1_WaitRv+0x3e>
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	03 c0       	rjmp	.+6      	; 0x54d0 <_ZL11I2C_1_WaitRv+0x40>
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	01 c0       	rjmp	.+2      	; 0x54d0 <_ZL11I2C_1_WaitRv+0x40>
    54ce:	91 e0       	ldi	r25, 0x01	; 1
    54d0:	91 11       	cpse	r25, r1
    54d2:	e5 cf       	rjmp	.-54     	; 0x549e <_ZL11I2C_1_WaitRv+0xe>
    54d4:	08 95       	ret

000054d6 <I2C_0_Init>:
    54d6:	e0 ee       	ldi	r30, 0xE0	; 224
    54d8:	f5 e0       	ldi	r31, 0x05	; 5
    54da:	85 81       	ldd	r24, Z+5	; 0x05
    54dc:	8a 70       	andi	r24, 0x0A	; 10
    54de:	85 83       	std	Z+5, r24	; 0x05
    54e0:	85 81       	ldd	r24, Z+5	; 0x05
    54e2:	82 60       	ori	r24, 0x02	; 2
    54e4:	85 83       	std	Z+5, r24	; 0x05
    54e6:	e0 e0       	ldi	r30, 0x00	; 0
    54e8:	f9 e0       	ldi	r31, 0x09	; 9
    54ea:	8f e6       	ldi	r24, 0x6F	; 111
    54ec:	86 83       	std	Z+6, r24	; 0x06
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	83 83       	std	Z+3, r24	; 0x03
    54f2:	17 82       	std	Z+7, r1	; 0x07
    54f4:	10 86       	std	Z+8, r1	; 0x08
    54f6:	85 83       	std	Z+5, r24	; 0x05
    54f8:	e2 e5       	ldi	r30, 0x52	; 82
    54fa:	f4 e0       	ldi	r31, 0x04	; 4
    54fc:	80 81       	ld	r24, Z
    54fe:	88 60       	ori	r24, 0x08	; 8
    5500:	80 83       	st	Z, r24
    5502:	e3 e5       	ldi	r30, 0x53	; 83
    5504:	f4 e0       	ldi	r31, 0x04	; 4
    5506:	80 81       	ld	r24, Z
    5508:	88 60       	ori	r24, 0x08	; 8
    550a:	80 83       	st	Z, r24
    550c:	08 95       	ret

0000550e <I2C_0_SendData>:
    550e:	ff 92       	push	r15
    5510:	0f 93       	push	r16
    5512:	1f 93       	push	r17
    5514:	cf 93       	push	r28
    5516:	df 93       	push	r29
    5518:	c6 2f       	mov	r28, r22
    551a:	8a 01       	movw	r16, r20
    551c:	d2 2f       	mov	r29, r18
    551e:	8e 7f       	andi	r24, 0xFE	; 254
    5520:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    5524:	0e 94 cf 29 	call	0x539e	; 0x539e <_ZL11i2c_0_WaitWv>
    5528:	81 30       	cpi	r24, 0x01	; 1
    552a:	f1 f4       	brne	.+60     	; 0x5568 <I2C_0_SendData+0x5a>
    552c:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    5530:	0e 94 cf 29 	call	0x539e	; 0x539e <_ZL11i2c_0_WaitWv>
    5534:	81 30       	cpi	r24, 0x01	; 1
    5536:	d1 f4       	brne	.+52     	; 0x556c <I2C_0_SendData+0x5e>
    5538:	dd 23       	and	r29, r29
    553a:	d1 f0       	breq	.+52     	; 0x5570 <I2C_0_SendData+0x62>
    553c:	01 15       	cp	r16, r1
    553e:	11 05       	cpc	r17, r1
    5540:	c9 f0       	breq	.+50     	; 0x5574 <I2C_0_SendData+0x66>
    5542:	c0 e0       	ldi	r28, 0x00	; 0
    5544:	ff 24       	eor	r15, r15
    5546:	fa 94       	dec	r15
    5548:	fd 0e       	add	r15, r29
    554a:	dd 23       	and	r29, r29
    554c:	a9 f0       	breq	.+42     	; 0x5578 <I2C_0_SendData+0x6a>
    554e:	f8 01       	movw	r30, r16
    5550:	80 81       	ld	r24, Z
    5552:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    5556:	0e 94 cf 29 	call	0x539e	; 0x539e <_ZL11i2c_0_WaitWv>
    555a:	81 30       	cpi	r24, 0x01	; 1
    555c:	79 f4       	brne	.+30     	; 0x557c <I2C_0_SendData+0x6e>
    555e:	cf 5f       	subi	r28, 0xFF	; 255
    5560:	0f 5f       	subi	r16, 0xFF	; 255
    5562:	1f 4f       	sbci	r17, 0xFF	; 255
    5564:	df 2d       	mov	r29, r15
    5566:	ee cf       	rjmp	.-36     	; 0x5544 <I2C_0_SendData+0x36>
    5568:	8f ef       	ldi	r24, 0xFF	; 255
    556a:	09 c0       	rjmp	.+18     	; 0x557e <I2C_0_SendData+0x70>
    556c:	8f ef       	ldi	r24, 0xFF	; 255
    556e:	07 c0       	rjmp	.+14     	; 0x557e <I2C_0_SendData+0x70>
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	05 c0       	rjmp	.+10     	; 0x557e <I2C_0_SendData+0x70>
    5574:	80 e0       	ldi	r24, 0x00	; 0
    5576:	03 c0       	rjmp	.+6      	; 0x557e <I2C_0_SendData+0x70>
    5578:	8c 2f       	mov	r24, r28
    557a:	01 c0       	rjmp	.+2      	; 0x557e <I2C_0_SendData+0x70>
    557c:	8c 2f       	mov	r24, r28
    557e:	df 91       	pop	r29
    5580:	cf 91       	pop	r28
    5582:	1f 91       	pop	r17
    5584:	0f 91       	pop	r16
    5586:	ff 90       	pop	r15
    5588:	08 95       	ret

0000558a <I2C_0_GetData>:
    558a:	ef 92       	push	r14
    558c:	ff 92       	push	r15
    558e:	1f 93       	push	r17
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	c8 2f       	mov	r28, r24
    5596:	d6 2f       	mov	r29, r22
    5598:	7a 01       	movw	r14, r20
    559a:	12 2f       	mov	r17, r18
    559c:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    55a0:	0e 94 cf 29 	call	0x539e	; 0x539e <_ZL11i2c_0_WaitWv>
    55a4:	81 30       	cpi	r24, 0x01	; 1
    55a6:	61 f5       	brne	.+88     	; 0x5600 <I2C_0_GetData+0x76>
    55a8:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    55ac:	0e 94 cf 29 	call	0x539e	; 0x539e <_ZL11i2c_0_WaitWv>
    55b0:	81 30       	cpi	r24, 0x01	; 1
    55b2:	41 f5       	brne	.+80     	; 0x5604 <I2C_0_GetData+0x7a>
    55b4:	c1 60       	ori	r28, 0x01	; 1
    55b6:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    55ba:	0e 94 cf 29 	call	0x539e	; 0x539e <_ZL11i2c_0_WaitWv>
    55be:	81 30       	cpi	r24, 0x01	; 1
    55c0:	19 f5       	brne	.+70     	; 0x5608 <I2C_0_GetData+0x7e>
    55c2:	11 23       	and	r17, r17
    55c4:	19 f1       	breq	.+70     	; 0x560c <I2C_0_GetData+0x82>
    55c6:	e1 14       	cp	r14, r1
    55c8:	f1 04       	cpc	r15, r1
    55ca:	11 f1       	breq	.+68     	; 0x5610 <I2C_0_GetData+0x86>
    55cc:	c0 e0       	ldi	r28, 0x00	; 0
    55ce:	df ef       	ldi	r29, 0xFF	; 255
    55d0:	d1 0f       	add	r29, r17
    55d2:	11 23       	and	r17, r17
    55d4:	f9 f0       	breq	.+62     	; 0x5614 <I2C_0_GetData+0x8a>
    55d6:	0e 94 ff 29 	call	0x53fe	; 0x53fe <_ZL11i2c_0_WaitRv>
    55da:	83 30       	cpi	r24, 0x03	; 3
    55dc:	e9 f4       	brne	.+58     	; 0x5618 <I2C_0_GetData+0x8e>
    55de:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    55e2:	f7 01       	movw	r30, r14
    55e4:	80 83       	st	Z, r24
    55e6:	d1 11       	cpse	r29, r1
    55e8:	02 c0       	rjmp	.+4      	; 0x55ee <I2C_0_GetData+0x64>
    55ea:	87 e0       	ldi	r24, 0x07	; 7
    55ec:	01 c0       	rjmp	.+2      	; 0x55f0 <I2C_0_GetData+0x66>
    55ee:	82 e0       	ldi	r24, 0x02	; 2
    55f0:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    55f4:	cf 5f       	subi	r28, 0xFF	; 255
    55f6:	ff ef       	ldi	r31, 0xFF	; 255
    55f8:	ef 1a       	sub	r14, r31
    55fa:	ff 0a       	sbc	r15, r31
    55fc:	1d 2f       	mov	r17, r29
    55fe:	e7 cf       	rjmp	.-50     	; 0x55ce <I2C_0_GetData+0x44>
    5600:	8f ef       	ldi	r24, 0xFF	; 255
    5602:	0b c0       	rjmp	.+22     	; 0x561a <I2C_0_GetData+0x90>
    5604:	8f ef       	ldi	r24, 0xFF	; 255
    5606:	09 c0       	rjmp	.+18     	; 0x561a <I2C_0_GetData+0x90>
    5608:	8f ef       	ldi	r24, 0xFF	; 255
    560a:	07 c0       	rjmp	.+14     	; 0x561a <I2C_0_GetData+0x90>
    560c:	80 e0       	ldi	r24, 0x00	; 0
    560e:	05 c0       	rjmp	.+10     	; 0x561a <I2C_0_GetData+0x90>
    5610:	80 e0       	ldi	r24, 0x00	; 0
    5612:	03 c0       	rjmp	.+6      	; 0x561a <I2C_0_GetData+0x90>
    5614:	8c 2f       	mov	r24, r28
    5616:	01 c0       	rjmp	.+2      	; 0x561a <I2C_0_GetData+0x90>
    5618:	8c 2f       	mov	r24, r28
    561a:	df 91       	pop	r29
    561c:	cf 91       	pop	r28
    561e:	1f 91       	pop	r17
    5620:	ff 90       	pop	r15
    5622:	ef 90       	pop	r14
    5624:	08 95       	ret

00005626 <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    5626:	e0 ee       	ldi	r30, 0xE0	; 224
    5628:	f5 e0       	ldi	r31, 0x05	; 5
    562a:	85 81       	ldd	r24, Z+5	; 0x05
    562c:	83 70       	andi	r24, 0x03	; 3
    562e:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    5630:	85 81       	ldd	r24, Z+5	; 0x05
    5632:	88 60       	ori	r24, 0x08	; 8
    5634:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    5636:	e0 e2       	ldi	r30, 0x20	; 32
    5638:	f9 e0       	ldi	r31, 0x09	; 9
    563a:	8f e6       	ldi	r24, 0x6F	; 111
    563c:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    5642:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    5644:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    5646:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5648:	e2 e3       	ldi	r30, 0x32	; 50
    564a:	f4 e0       	ldi	r31, 0x04	; 4
    564c:	80 81       	ld	r24, Z
    564e:	88 60       	ori	r24, 0x08	; 8
    5650:	80 83       	st	Z, r24
    5652:	e3 e3       	ldi	r30, 0x33	; 51
    5654:	f4 e0       	ldi	r31, 0x04	; 4
    5656:	80 81       	ld	r24, Z
    5658:	88 60       	ori	r24, 0x08	; 8
    565a:	80 83       	st	Z, r24
    565c:	08 95       	ret

0000565e <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    565e:	ff 92       	push	r15
    5660:	0f 93       	push	r16
    5662:	1f 93       	push	r17
    5664:	cf 93       	push	r28
    5666:	df 93       	push	r29
    5668:	c6 2f       	mov	r28, r22
    566a:	8a 01       	movw	r16, r20
    566c:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    566e:	8e 7f       	andi	r24, 0xFE	; 254
    5670:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    5674:	0e 94 22 2a 	call	0x5444	; 0x5444 <_ZL11i2c_1_WaitWv>
    5678:	81 30       	cpi	r24, 0x01	; 1
    567a:	f1 f4       	brne	.+60     	; 0x56b8 <I2C_1_SendData+0x5a>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    567c:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    5680:	0e 94 22 2a 	call	0x5444	; 0x5444 <_ZL11i2c_1_WaitWv>
    5684:	81 30       	cpi	r24, 0x01	; 1
    5686:	d1 f4       	brne	.+52     	; 0x56bc <I2C_1_SendData+0x5e>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
    5688:	dd 23       	and	r29, r29
    568a:	d1 f0       	breq	.+52     	; 0x56c0 <I2C_1_SendData+0x62>
    568c:	01 15       	cp	r16, r1
    568e:	11 05       	cpc	r17, r1
    5690:	c9 f0       	breq	.+50     	; 0x56c4 <I2C_1_SendData+0x66>
    5692:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    5694:	ff 24       	eor	r15, r15
    5696:	fa 94       	dec	r15
    5698:	fd 0e       	add	r15, r29
    569a:	dd 23       	and	r29, r29
    569c:	a9 f0       	breq	.+42     	; 0x56c8 <I2C_1_SendData+0x6a>
		{
			TWI1.MDATA = *pData;
    569e:	f8 01       	movw	r30, r16
    56a0:	80 81       	ld	r24, Z
    56a2:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    56a6:	0e 94 22 2a 	call	0x5444	; 0x5444 <_ZL11i2c_1_WaitWv>
    56aa:	81 30       	cpi	r24, 0x01	; 1
    56ac:	79 f4       	brne	.+30     	; 0x56cc <I2C_1_SendData+0x6e>
			{
				retVal++;
    56ae:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    56b0:	0f 5f       	subi	r16, 0xFF	; 255
    56b2:	1f 4f       	sbci	r17, 0xFF	; 255
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
    56b4:	df 2d       	mov	r29, r15
    56b6:	ee cf       	rjmp	.-36     	; 0x5694 <I2C_1_SendData+0x36>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    56b8:	8f ef       	ldi	r24, 0xFF	; 255
    56ba:	09 c0       	rjmp	.+18     	; 0x56ce <I2C_1_SendData+0x70>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    56bc:	8f ef       	ldi	r24, 0xFF	; 255
    56be:	07 c0       	rjmp	.+14     	; 0x56ce <I2C_1_SendData+0x70>
	}	

	retVal = 0;
    56c0:	80 e0       	ldi	r24, 0x00	; 0
    56c2:	05 c0       	rjmp	.+10     	; 0x56ce <I2C_1_SendData+0x70>
    56c4:	80 e0       	ldi	r24, 0x00	; 0
    56c6:	03 c0       	rjmp	.+6      	; 0x56ce <I2C_1_SendData+0x70>
    56c8:	8c 2f       	mov	r24, r28
    56ca:	01 c0       	rjmp	.+2      	; 0x56ce <I2C_1_SendData+0x70>
    56cc:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    56ce:	df 91       	pop	r29
    56d0:	cf 91       	pop	r28
    56d2:	1f 91       	pop	r17
    56d4:	0f 91       	pop	r16
    56d6:	ff 90       	pop	r15
    56d8:	08 95       	ret

000056da <I2C_1_GetData>:


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    56da:	ef 92       	push	r14
    56dc:	ff 92       	push	r15
    56de:	1f 93       	push	r17
    56e0:	cf 93       	push	r28
    56e2:	df 93       	push	r29
    56e4:	c8 2f       	mov	r28, r24
    56e6:	d6 2f       	mov	r29, r22
    56e8:	7a 01       	movw	r14, r20
    56ea:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    56ec:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    56f0:	0e 94 22 2a 	call	0x5444	; 0x5444 <_ZL11i2c_1_WaitWv>
    56f4:	81 30       	cpi	r24, 0x01	; 1
    56f6:	61 f5       	brne	.+88     	; 0x5750 <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    56f8:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    56fc:	0e 94 22 2a 	call	0x5444	; 0x5444 <_ZL11i2c_1_WaitWv>
    5700:	81 30       	cpi	r24, 0x01	; 1
    5702:	41 f5       	brne	.+80     	; 0x5754 <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    5704:	c1 60       	ori	r28, 0x01	; 1
    5706:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    570a:	0e 94 22 2a 	call	0x5444	; 0x5444 <_ZL11i2c_1_WaitWv>
    570e:	81 30       	cpi	r24, 0x01	; 1
    5710:	19 f5       	brne	.+70     	; 0x5758 <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    5712:	11 23       	and	r17, r17
    5714:	19 f1       	breq	.+70     	; 0x575c <I2C_1_GetData+0x82>
    5716:	e1 14       	cp	r14, r1
    5718:	f1 04       	cpc	r15, r1
    571a:	11 f1       	breq	.+68     	; 0x5760 <I2C_1_GetData+0x86>
    571c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    571e:	df ef       	ldi	r29, 0xFF	; 255
    5720:	d1 0f       	add	r29, r17
    5722:	11 23       	and	r17, r17
    5724:	f9 f0       	breq	.+62     	; 0x5764 <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    5726:	0e 94 48 2a 	call	0x5490	; 0x5490 <_ZL11I2C_1_WaitRv>
    572a:	83 30       	cpi	r24, 0x03	; 3
    572c:	e9 f4       	brne	.+58     	; 0x5768 <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    572e:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    5732:	f7 01       	movw	r30, r14
    5734:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    5736:	d1 11       	cpse	r29, r1
    5738:	02 c0       	rjmp	.+4      	; 0x573e <I2C_1_GetData+0x64>
    573a:	87 e0       	ldi	r24, 0x07	; 7
    573c:	01 c0       	rjmp	.+2      	; 0x5740 <I2C_1_GetData+0x66>
    573e:	82 e0       	ldi	r24, 0x02	; 2
    5740:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    5744:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    5746:	ff ef       	ldi	r31, 0xFF	; 255
    5748:	ef 1a       	sub	r14, r31
    574a:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    574c:	1d 2f       	mov	r17, r29
    574e:	e7 cf       	rjmp	.-50     	; 0x571e <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    5750:	8f ef       	ldi	r24, 0xFF	; 255
    5752:	0b c0       	rjmp	.+22     	; 0x576a <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    5754:	8f ef       	ldi	r24, 0xFF	; 255
    5756:	09 c0       	rjmp	.+18     	; 0x576a <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    5758:	8f ef       	ldi	r24, 0xFF	; 255
    575a:	07 c0       	rjmp	.+14     	; 0x576a <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    575c:	80 e0       	ldi	r24, 0x00	; 0
    575e:	05 c0       	rjmp	.+10     	; 0x576a <I2C_1_GetData+0x90>
    5760:	80 e0       	ldi	r24, 0x00	; 0
    5762:	03 c0       	rjmp	.+6      	; 0x576a <I2C_1_GetData+0x90>
    5764:	8c 2f       	mov	r24, r28
    5766:	01 c0       	rjmp	.+2      	; 0x576a <I2C_1_GetData+0x90>
    5768:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    576a:	df 91       	pop	r29
    576c:	cf 91       	pop	r28
    576e:	1f 91       	pop	r17
    5770:	ff 90       	pop	r15
    5772:	ef 90       	pop	r14
    5774:	08 95       	ret

00005776 <_ZL21USART4_initializationm>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
	lb_send_text(g_tempMsgBuff);
    5776:	20 b3       	in	r18, 0x10	; 16
    5778:	2d 7f       	andi	r18, 0xFD	; 253
    577a:	20 bb       	out	0x10, r18	; 16
    577c:	e1 e9       	ldi	r30, 0x91	; 145
    577e:	f4 e0       	ldi	r31, 0x04	; 4
    5780:	20 81       	ld	r18, Z
    5782:	27 7f       	andi	r18, 0xF7	; 247
    5784:	20 83       	st	Z, r18
    5786:	20 b3       	in	r18, 0x10	; 16
    5788:	21 60       	ori	r18, 0x01	; 1
    578a:	20 bb       	out	0x10, r18	; 16
    578c:	21 b3       	in	r18, 0x11	; 17
    578e:	21 60       	ori	r18, 0x01	; 1
    5790:	21 bb       	out	0x11, r18	; 17
    5792:	0e 94 f5 3b 	call	0x77ea	; 0x77ea <USART4_init>
    5796:	08 95       	ret

00005798 <_ZL21USART1_initializationm>:
    5798:	28 b1       	in	r18, 0x08	; 8
    579a:	2d 7f       	andi	r18, 0xFD	; 253
    579c:	28 b9       	out	0x08, r18	; 8
    579e:	e1 e5       	ldi	r30, 0x51	; 81
    57a0:	f4 e0       	ldi	r31, 0x04	; 4
    57a2:	20 81       	ld	r18, Z
    57a4:	27 7f       	andi	r18, 0xF7	; 247
    57a6:	20 83       	st	Z, r18
    57a8:	28 b1       	in	r18, 0x08	; 8
    57aa:	21 60       	ori	r18, 0x01	; 1
    57ac:	28 b9       	out	0x08, r18	; 8
    57ae:	29 b1       	in	r18, 0x09	; 9
    57b0:	21 60       	ori	r18, 0x01	; 1
    57b2:	29 b9       	out	0x09, r18	; 9
    57b4:	0e 94 c1 3b 	call	0x7782	; 0x7782 <USART1_init>
    57b8:	08 95       	ret

000057ba <_ZL16linkbus_start_txv>:
    57ba:	cf 93       	push	r28
    57bc:	80 91 cf 46 	lds	r24, 0x46CF	; 0x8046cf <_ZL17linkbus_tx_active>
    57c0:	c1 e0       	ldi	r28, 0x01	; 1
    57c2:	81 11       	cpse	r24, r1
    57c4:	c0 e0       	ldi	r28, 0x00	; 0
    57c6:	81 11       	cpse	r24, r1
    57c8:	0c c0       	rjmp	.+24     	; 0x57e2 <_ZL16linkbus_start_txv+0x28>
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	80 93 cf 46 	sts	0x46CF, r24	; 0x8046cf <_ZL17linkbus_tx_active>
    57d0:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    57d4:	81 11       	cpse	r24, r1
    57d6:	03 c0       	rjmp	.+6      	; 0x57de <_ZL16linkbus_start_txv+0x24>
    57d8:	0e 94 17 3c 	call	0x782e	; 0x782e <USART4_enable_tx>
    57dc:	02 c0       	rjmp	.+4      	; 0x57e2 <_ZL16linkbus_start_txv+0x28>
    57de:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <USART1_enable_tx>
    57e2:	8c 2f       	mov	r24, r28
    57e4:	cf 91       	pop	r28
    57e6:	08 95       	ret

000057e8 <_Z18nextFullLBTxBufferv>:
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	80 91 82 45 	lds	r24, 0x4582	; 0x804582 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    57ee:	28 2f       	mov	r18, r24
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	42 e3       	ldi	r20, 0x32	; 50
    57f4:	42 9f       	mul	r20, r18
    57f6:	f0 01       	movw	r30, r0
    57f8:	43 9f       	mul	r20, r19
    57fa:	f0 0d       	add	r31, r0
    57fc:	11 24       	eor	r1, r1
    57fe:	e9 5f       	subi	r30, 0xF9	; 249
    5800:	f9 4b       	sbci	r31, 0xB9	; 185
    5802:	40 81       	ld	r20, Z
    5804:	41 11       	cpse	r20, r1
    5806:	0b c0       	rjmp	.+22     	; 0x581e <_Z18nextFullLBTxBufferv+0x36>
    5808:	9f 5f       	subi	r25, 0xFF	; 255
    580a:	94 30       	cpi	r25, 0x04	; 4
    580c:	50 f4       	brcc	.+20     	; 0x5822 <_Z18nextFullLBTxBufferv+0x3a>
    580e:	8f 5f       	subi	r24, 0xFF	; 255
    5810:	80 93 82 45 	sts	0x4582, r24	; 0x804582 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    5814:	84 30       	cpi	r24, 0x04	; 4
    5816:	48 f3       	brcs	.-46     	; 0x57ea <_Z18nextFullLBTxBufferv+0x2>
    5818:	10 92 82 45 	sts	0x4582, r1	; 0x804582 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    581c:	e6 cf       	rjmp	.-52     	; 0x57ea <_Z18nextFullLBTxBufferv+0x2>
    581e:	81 e0       	ldi	r24, 0x01	; 1
    5820:	01 c0       	rjmp	.+2      	; 0x5824 <_Z18nextFullLBTxBufferv+0x3c>
    5822:	80 e0       	ldi	r24, 0x00	; 0
    5824:	88 23       	and	r24, r24
    5826:	49 f0       	breq	.+18     	; 0x583a <_Z18nextFullLBTxBufferv+0x52>
    5828:	42 e3       	ldi	r20, 0x32	; 50
    582a:	42 9f       	mul	r20, r18
    582c:	c0 01       	movw	r24, r0
    582e:	43 9f       	mul	r20, r19
    5830:	90 0d       	add	r25, r0
    5832:	11 24       	eor	r1, r1
    5834:	89 5f       	subi	r24, 0xF9	; 249
    5836:	99 4b       	sbci	r25, 0xB9	; 185
    5838:	08 95       	ret
    583a:	80 e0       	ldi	r24, 0x00	; 0
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	08 95       	ret

00005840 <_Z19nextEmptyLBTxBufferv>:
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	80 91 81 45 	lds	r24, 0x4581	; 0x804581 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    5846:	28 2f       	mov	r18, r24
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	42 e3       	ldi	r20, 0x32	; 50
    584c:	42 9f       	mul	r20, r18
    584e:	f0 01       	movw	r30, r0
    5850:	43 9f       	mul	r20, r19
    5852:	f0 0d       	add	r31, r0
    5854:	11 24       	eor	r1, r1
    5856:	e9 5f       	subi	r30, 0xF9	; 249
    5858:	f9 4b       	sbci	r31, 0xB9	; 185
    585a:	40 81       	ld	r20, Z
    585c:	44 23       	and	r20, r20
    585e:	59 f0       	breq	.+22     	; 0x5876 <_Z19nextEmptyLBTxBufferv+0x36>
    5860:	9f 5f       	subi	r25, 0xFF	; 255
    5862:	94 30       	cpi	r25, 0x04	; 4
    5864:	50 f4       	brcc	.+20     	; 0x587a <_Z19nextEmptyLBTxBufferv+0x3a>
    5866:	8f 5f       	subi	r24, 0xFF	; 255
    5868:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    586c:	84 30       	cpi	r24, 0x04	; 4
    586e:	48 f3       	brcs	.-46     	; 0x5842 <_Z19nextEmptyLBTxBufferv+0x2>
    5870:	10 92 81 45 	sts	0x4581, r1	; 0x804581 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    5874:	e6 cf       	rjmp	.-52     	; 0x5842 <_Z19nextEmptyLBTxBufferv+0x2>
    5876:	81 e0       	ldi	r24, 0x01	; 1
    5878:	01 c0       	rjmp	.+2      	; 0x587c <_Z19nextEmptyLBTxBufferv+0x3c>
    587a:	80 e0       	ldi	r24, 0x00	; 0
    587c:	88 23       	and	r24, r24
    587e:	49 f0       	breq	.+18     	; 0x5892 <_Z19nextEmptyLBTxBufferv+0x52>
    5880:	42 e3       	ldi	r20, 0x32	; 50
    5882:	42 9f       	mul	r20, r18
    5884:	c0 01       	movw	r24, r0
    5886:	43 9f       	mul	r20, r19
    5888:	90 0d       	add	r25, r0
    588a:	11 24       	eor	r1, r1
    588c:	89 5f       	subi	r24, 0xF9	; 249
    588e:	99 4b       	sbci	r25, 0xB9	; 185
    5890:	08 95       	ret
    5892:	80 e0       	ldi	r24, 0x00	; 0
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	08 95       	ret

00005898 <_Z19nextEmptyLBRxBufferv>:
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	80 91 80 45 	lds	r24, 0x4580	; 0x804580 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    589e:	28 2f       	mov	r18, r24
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	42 e4       	ldi	r20, 0x42	; 66
    58a4:	42 9f       	mul	r20, r18
    58a6:	f0 01       	movw	r30, r0
    58a8:	43 9f       	mul	r20, r19
    58aa:	f0 0d       	add	r31, r0
    58ac:	11 24       	eor	r1, r1
    58ae:	ed 57       	subi	r30, 0x7D	; 125
    58b0:	fa 4b       	sbci	r31, 0xBA	; 186
    58b2:	41 81       	ldd	r20, Z+1	; 0x01
    58b4:	52 81       	ldd	r21, Z+2	; 0x02
    58b6:	45 2b       	or	r20, r21
    58b8:	59 f0       	breq	.+22     	; 0x58d0 <_Z19nextEmptyLBRxBufferv+0x38>
    58ba:	9f 5f       	subi	r25, 0xFF	; 255
    58bc:	92 30       	cpi	r25, 0x02	; 2
    58be:	50 f4       	brcc	.+20     	; 0x58d4 <_Z19nextEmptyLBRxBufferv+0x3c>
    58c0:	8f 5f       	subi	r24, 0xFF	; 255
    58c2:	80 93 80 45 	sts	0x4580, r24	; 0x804580 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    58c6:	82 30       	cpi	r24, 0x02	; 2
    58c8:	40 f3       	brcs	.-48     	; 0x589a <_Z19nextEmptyLBRxBufferv+0x2>
    58ca:	10 92 80 45 	sts	0x4580, r1	; 0x804580 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    58ce:	e5 cf       	rjmp	.-54     	; 0x589a <_Z19nextEmptyLBRxBufferv+0x2>
    58d0:	81 e0       	ldi	r24, 0x01	; 1
    58d2:	01 c0       	rjmp	.+2      	; 0x58d6 <_Z19nextEmptyLBRxBufferv+0x3e>
    58d4:	80 e0       	ldi	r24, 0x00	; 0
    58d6:	88 23       	and	r24, r24
    58d8:	49 f0       	breq	.+18     	; 0x58ec <_Z19nextEmptyLBRxBufferv+0x54>
    58da:	42 e4       	ldi	r20, 0x42	; 66
    58dc:	42 9f       	mul	r20, r18
    58de:	c0 01       	movw	r24, r0
    58e0:	43 9f       	mul	r20, r19
    58e2:	90 0d       	add	r25, r0
    58e4:	11 24       	eor	r1, r1
    58e6:	8d 57       	subi	r24, 0x7D	; 125
    58e8:	9a 4b       	sbci	r25, 0xBA	; 186
    58ea:	08 95       	ret
    58ec:	80 e0       	ldi	r24, 0x00	; 0
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	08 95       	ret

000058f2 <_Z18nextFullLBRxBufferv>:
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	80 91 7f 45 	lds	r24, 0x457F	; 0x80457f <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    58f8:	28 2f       	mov	r18, r24
    58fa:	30 e0       	ldi	r19, 0x00	; 0
    58fc:	42 e4       	ldi	r20, 0x42	; 66
    58fe:	42 9f       	mul	r20, r18
    5900:	f0 01       	movw	r30, r0
    5902:	43 9f       	mul	r20, r19
    5904:	f0 0d       	add	r31, r0
    5906:	11 24       	eor	r1, r1
    5908:	ed 57       	subi	r30, 0x7D	; 125
    590a:	fa 4b       	sbci	r31, 0xBA	; 186
    590c:	41 81       	ldd	r20, Z+1	; 0x01
    590e:	52 81       	ldd	r21, Z+2	; 0x02
    5910:	45 2b       	or	r20, r21
    5912:	59 f4       	brne	.+22     	; 0x592a <_Z18nextFullLBRxBufferv+0x38>
    5914:	9f 5f       	subi	r25, 0xFF	; 255
    5916:	92 30       	cpi	r25, 0x02	; 2
    5918:	50 f4       	brcc	.+20     	; 0x592e <_Z18nextFullLBRxBufferv+0x3c>
    591a:	8f 5f       	subi	r24, 0xFF	; 255
    591c:	80 93 7f 45 	sts	0x457F, r24	; 0x80457f <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    5920:	82 30       	cpi	r24, 0x02	; 2
    5922:	40 f3       	brcs	.-48     	; 0x58f4 <_Z18nextFullLBRxBufferv+0x2>
    5924:	10 92 7f 45 	sts	0x457F, r1	; 0x80457f <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    5928:	e5 cf       	rjmp	.-54     	; 0x58f4 <_Z18nextFullLBRxBufferv+0x2>
    592a:	81 e0       	ldi	r24, 0x01	; 1
    592c:	01 c0       	rjmp	.+2      	; 0x5930 <_Z18nextFullLBRxBufferv+0x3e>
    592e:	80 e0       	ldi	r24, 0x00	; 0
    5930:	88 23       	and	r24, r24
    5932:	49 f0       	breq	.+18     	; 0x5946 <_Z18nextFullLBRxBufferv+0x54>
    5934:	42 e4       	ldi	r20, 0x42	; 66
    5936:	42 9f       	mul	r20, r18
    5938:	c0 01       	movw	r24, r0
    593a:	43 9f       	mul	r20, r19
    593c:	90 0d       	add	r25, r0
    593e:	11 24       	eor	r1, r1
    5940:	8d 57       	subi	r24, 0x7D	; 125
    5942:	9a 4b       	sbci	r25, 0xBA	; 186
    5944:	08 95       	ret
    5946:	80 e0       	ldi	r24, 0x00	; 0
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	08 95       	ret

0000594c <_Z19linkbusTxInProgressv>:
    594c:	80 91 cf 46 	lds	r24, 0x46CF	; 0x8046cf <_ZL17linkbus_tx_active>
    5950:	08 95       	ret

00005952 <_Z14linkbus_end_txv>:
    5952:	80 91 cf 46 	lds	r24, 0x46CF	; 0x8046cf <_ZL17linkbus_tx_active>
    5956:	88 23       	and	r24, r24
    5958:	89 f0       	breq	.+34     	; 0x597c <_Z14linkbus_end_txv+0x2a>
    595a:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    595e:	81 11       	cpse	r24, r1
    5960:	06 c0       	rjmp	.+12     	; 0x596e <_Z14linkbus_end_txv+0x1c>
    5962:	e0 e8       	ldi	r30, 0x80	; 128
    5964:	f8 e0       	ldi	r31, 0x08	; 8
    5966:	85 81       	ldd	r24, Z+5	; 0x05
    5968:	8f 7d       	andi	r24, 0xDF	; 223
    596a:	85 83       	std	Z+5, r24	; 0x05
    596c:	05 c0       	rjmp	.+10     	; 0x5978 <_Z14linkbus_end_txv+0x26>
    596e:	e0 e2       	ldi	r30, 0x20	; 32
    5970:	f8 e0       	ldi	r31, 0x08	; 8
    5972:	85 81       	ldd	r24, Z+5	; 0x05
    5974:	8f 7d       	andi	r24, 0xDF	; 223
    5976:	85 83       	std	Z+5, r24	; 0x05
    5978:	10 92 cf 46 	sts	0x46CF, r1	; 0x8046cf <_ZL17linkbus_tx_active>
    597c:	08 95       	ret

0000597e <_Z16linkbus_reset_rxv>:
    597e:	cf 93       	push	r28
    5980:	df 93       	push	r29
    5982:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    5986:	81 11       	cpse	r24, r1
    5988:	14 c0       	rjmp	.+40     	; 0x59b2 <_Z16linkbus_reset_rxv+0x34>
    598a:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <__TEXT_REGION_LENGTH__+0x7e0886>
    598e:	88 23       	and	r24, r24
    5990:	1c f5       	brge	.+70     	; 0x59d8 <_Z16linkbus_reset_rxv+0x5a>
    5992:	e0 e8       	ldi	r30, 0x80	; 128
    5994:	f8 e0       	ldi	r31, 0x08	; 8
    5996:	86 81       	ldd	r24, Z+6	; 0x06
    5998:	8f 77       	andi	r24, 0x7F	; 127
    599a:	86 83       	std	Z+6, r24	; 0x06
    599c:	84 e8       	ldi	r24, 0x84	; 132
    599e:	a3 e8       	ldi	r26, 0x83	; 131
    59a0:	b5 e4       	ldi	r27, 0x45	; 69
    59a2:	ed 01       	movw	r28, r26
    59a4:	19 92       	st	Y+, r1
    59a6:	8a 95       	dec	r24
    59a8:	e9 f7       	brne	.-6      	; 0x59a4 <_Z16linkbus_reset_rxv+0x26>
    59aa:	86 81       	ldd	r24, Z+6	; 0x06
    59ac:	80 68       	ori	r24, 0x80	; 128
    59ae:	86 83       	std	Z+6, r24	; 0x06
    59b0:	13 c0       	rjmp	.+38     	; 0x59d8 <_Z16linkbus_reset_rxv+0x5a>
    59b2:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    59b6:	88 23       	and	r24, r24
    59b8:	7c f4       	brge	.+30     	; 0x59d8 <_Z16linkbus_reset_rxv+0x5a>
    59ba:	e0 e2       	ldi	r30, 0x20	; 32
    59bc:	f8 e0       	ldi	r31, 0x08	; 8
    59be:	86 81       	ldd	r24, Z+6	; 0x06
    59c0:	8f 77       	andi	r24, 0x7F	; 127
    59c2:	86 83       	std	Z+6, r24	; 0x06
    59c4:	84 e8       	ldi	r24, 0x84	; 132
    59c6:	a3 e8       	ldi	r26, 0x83	; 131
    59c8:	b5 e4       	ldi	r27, 0x45	; 69
    59ca:	ed 01       	movw	r28, r26
    59cc:	19 92       	st	Y+, r1
    59ce:	8a 95       	dec	r24
    59d0:	e9 f7       	brne	.-6      	; 0x59cc <_Z16linkbus_reset_rxv+0x4e>
    59d2:	86 81       	ldd	r24, Z+6	; 0x06
    59d4:	80 68       	ori	r24, 0x80	; 128
    59d6:	86 83       	std	Z+6, r24	; 0x06
    59d8:	df 91       	pop	r29
    59da:	cf 91       	pop	r28
    59dc:	08 95       	ret

000059de <_Z12linkbus_initm14USART_Number_t>:
    59de:	cf 92       	push	r12
    59e0:	df 92       	push	r13
    59e2:	ef 92       	push	r14
    59e4:	ff 92       	push	r15
    59e6:	cf 93       	push	r28
    59e8:	6b 01       	movw	r12, r22
    59ea:	7c 01       	movw	r14, r24
    59ec:	84 e8       	ldi	r24, 0x84	; 132
    59ee:	e3 e8       	ldi	r30, 0x83	; 131
    59f0:	f5 e4       	ldi	r31, 0x45	; 69
    59f2:	df 01       	movw	r26, r30
    59f4:	1d 92       	st	X+, r1
    59f6:	8a 95       	dec	r24
    59f8:	e9 f7       	brne	.-6      	; 0x59f4 <_Z12linkbus_initm14USART_Number_t+0x16>
    59fa:	80 e0       	ldi	r24, 0x00	; 0
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	84 30       	cpi	r24, 0x04	; 4
    5a00:	91 05       	cpc	r25, r1
    5a02:	5c f4       	brge	.+22     	; 0x5a1a <_Z12linkbus_initm14USART_Number_t+0x3c>
    5a04:	22 e3       	ldi	r18, 0x32	; 50
    5a06:	28 9f       	mul	r18, r24
    5a08:	f0 01       	movw	r30, r0
    5a0a:	29 9f       	mul	r18, r25
    5a0c:	f0 0d       	add	r31, r0
    5a0e:	11 24       	eor	r1, r1
    5a10:	e9 5f       	subi	r30, 0xF9	; 249
    5a12:	f9 4b       	sbci	r31, 0xB9	; 185
    5a14:	10 82       	st	Z, r1
    5a16:	01 96       	adiw	r24, 0x01	; 1
    5a18:	f2 cf       	rjmp	.-28     	; 0x59fe <_Z12linkbus_initm14USART_Number_t+0x20>
    5a1a:	46 30       	cpi	r20, 0x06	; 6
    5a1c:	21 f4       	brne	.+8      	; 0x5a26 <_Z12linkbus_initm14USART_Number_t+0x48>
    5a1e:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    5a22:	87 30       	cpi	r24, 0x07	; 7
    5a24:	61 f4       	brne	.+24     	; 0x5a3e <_Z12linkbus_initm14USART_Number_t+0x60>
    5a26:	c4 2f       	mov	r28, r20
    5a28:	c7 01       	movw	r24, r14
    5a2a:	b6 01       	movw	r22, r12
    5a2c:	41 11       	cpse	r20, r1
    5a2e:	03 c0       	rjmp	.+6      	; 0x5a36 <_Z12linkbus_initm14USART_Number_t+0x58>
    5a30:	0e 94 bb 2b 	call	0x5776	; 0x5776 <_ZL21USART4_initializationm>
    5a34:	02 c0       	rjmp	.+4      	; 0x5a3a <_Z12linkbus_initm14USART_Number_t+0x5c>
    5a36:	0e 94 cc 2b 	call	0x5798	; 0x5798 <_ZL21USART1_initializationm>
    5a3a:	c0 93 22 40 	sts	0x4022, r28	; 0x804022 <g_linkbus_usart_number>
    5a3e:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <_ZL14g_bus_disabled>
    5a42:	cf 91       	pop	r28
    5a44:	ff 90       	pop	r15
    5a46:	ef 90       	pop	r14
    5a48:	df 90       	pop	r13
    5a4a:	cf 90       	pop	r12
    5a4c:	08 95       	ret

00005a4e <_Z15linkbus_disablev>:
    5a4e:	81 e0       	ldi	r24, 0x01	; 1
    5a50:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZL14g_bus_disabled>
    5a54:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    5a58:	84 30       	cpi	r24, 0x04	; 4
    5a5a:	19 f4       	brne	.+6      	; 0x5a62 <_Z15linkbus_disablev+0x14>
    5a5c:	0e 94 20 3c 	call	0x7840	; 0x7840 <USART4_disable>
    5a60:	02 c0       	rjmp	.+4      	; 0x5a66 <_Z15linkbus_disablev+0x18>
    5a62:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <USART1_disable>
    5a66:	0e 94 a9 2c 	call	0x5952	; 0x5952 <_Z14linkbus_end_txv>
    5a6a:	84 e8       	ldi	r24, 0x84	; 132
    5a6c:	e3 e8       	ldi	r30, 0x83	; 131
    5a6e:	f5 e4       	ldi	r31, 0x45	; 69
    5a70:	df 01       	movw	r26, r30
    5a72:	1d 92       	st	X+, r1
    5a74:	8a 95       	dec	r24
    5a76:	e9 f7       	brne	.-6      	; 0x5a72 <_Z15linkbus_disablev+0x24>
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	84 30       	cpi	r24, 0x04	; 4
    5a7c:	48 f4       	brcc	.+18     	; 0x5a90 <_Z15linkbus_disablev+0x42>
    5a7e:	b2 e3       	ldi	r27, 0x32	; 50
    5a80:	8b 9f       	mul	r24, r27
    5a82:	f0 01       	movw	r30, r0
    5a84:	11 24       	eor	r1, r1
    5a86:	e9 5f       	subi	r30, 0xF9	; 249
    5a88:	f9 4b       	sbci	r31, 0xB9	; 185
    5a8a:	10 82       	st	Z, r1
    5a8c:	8f 5f       	subi	r24, 0xFF	; 255
    5a8e:	f5 cf       	rjmp	.-22     	; 0x5a7a <_Z15linkbus_disablev+0x2c>
    5a90:	08 95       	ret

00005a92 <_Z12lb_send_textPc>:
    5a92:	0f 93       	push	r16
    5a94:	1f 93       	push	r17
    5a96:	cf 93       	push	r28
    5a98:	df 93       	push	r29
    5a9a:	20 91 23 40 	lds	r18, 0x4023	; 0x804023 <_ZL14g_bus_disabled>
    5a9e:	21 11       	cpse	r18, r1
    5aa0:	2f c0       	rjmp	.+94     	; 0x5b00 <_Z12lb_send_textPc+0x6e>
    5aa2:	00 97       	sbiw	r24, 0x00	; 0
    5aa4:	79 f1       	breq	.+94     	; 0x5b04 <_Z12lb_send_textPc+0x72>
    5aa6:	8c 01       	movw	r16, r24
    5aa8:	0e 94 20 2c 	call	0x5840	; 0x5840 <_Z19nextEmptyLBTxBufferv>
    5aac:	c8 ec       	ldi	r28, 0xC8	; 200
    5aae:	d0 e0       	ldi	r29, 0x00	; 0
    5ab0:	00 97       	sbiw	r24, 0x00	; 0
    5ab2:	b1 f4       	brne	.+44     	; 0x5ae0 <_Z12lb_send_textPc+0x4e>
    5ab4:	20 97       	sbiw	r28, 0x00	; 0
    5ab6:	a1 f0       	breq	.+40     	; 0x5ae0 <_Z12lb_send_textPc+0x4e>
    5ab8:	0e 94 a6 2c 	call	0x594c	; 0x594c <_Z19linkbusTxInProgressv>
    5abc:	88 23       	and	r24, r24
    5abe:	21 f0       	breq	.+8      	; 0x5ac8 <_Z12lb_send_textPc+0x36>
    5ac0:	20 97       	sbiw	r28, 0x00	; 0
    5ac2:	21 f4       	brne	.+8      	; 0x5acc <_Z12lb_send_textPc+0x3a>
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	03 c0       	rjmp	.+6      	; 0x5ace <_Z12lb_send_textPc+0x3c>
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	01 c0       	rjmp	.+2      	; 0x5ace <_Z12lb_send_textPc+0x3c>
    5acc:	91 e0       	ldi	r25, 0x01	; 1
    5ace:	99 23       	and	r25, r25
    5ad0:	21 f0       	breq	.+8      	; 0x5ada <_Z12lb_send_textPc+0x48>
    5ad2:	20 97       	sbiw	r28, 0x00	; 0
    5ad4:	89 f3       	breq	.-30     	; 0x5ab8 <_Z12lb_send_textPc+0x26>
    5ad6:	21 97       	sbiw	r28, 0x01	; 1
    5ad8:	ef cf       	rjmp	.-34     	; 0x5ab8 <_Z12lb_send_textPc+0x26>
    5ada:	0e 94 20 2c 	call	0x5840	; 0x5840 <_Z19nextEmptyLBTxBufferv>
    5ade:	e8 cf       	rjmp	.-48     	; 0x5ab0 <_Z12lb_send_textPc+0x1e>
    5ae0:	00 97       	sbiw	r24, 0x00	; 0
    5ae2:	91 f0       	breq	.+36     	; 0x5b08 <_Z12lb_send_textPc+0x76>
    5ae4:	1f 93       	push	r17
    5ae6:	0f 93       	push	r16
    5ae8:	9f 93       	push	r25
    5aea:	8f 93       	push	r24
    5aec:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    5af0:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <_ZL16linkbus_start_txv>
    5af4:	0f 90       	pop	r0
    5af6:	0f 90       	pop	r0
    5af8:	0f 90       	pop	r0
    5afa:	0f 90       	pop	r0
    5afc:	80 e0       	ldi	r24, 0x00	; 0
    5afe:	05 c0       	rjmp	.+10     	; 0x5b0a <_Z12lb_send_textPc+0x78>
    5b00:	81 e0       	ldi	r24, 0x01	; 1
    5b02:	03 c0       	rjmp	.+6      	; 0x5b0a <_Z12lb_send_textPc+0x78>
    5b04:	81 e0       	ldi	r24, 0x01	; 1
    5b06:	01 c0       	rjmp	.+2      	; 0x5b0a <_Z12lb_send_textPc+0x78>
    5b08:	81 e0       	ldi	r24, 0x01	; 1
    5b0a:	df 91       	pop	r29
    5b0c:	cf 91       	pop	r28
    5b0e:	1f 91       	pop	r17
    5b10:	0f 91       	pop	r16
    5b12:	08 95       	ret

00005b14 <_Z11lb_send_msg13LBMessageTypePKcPc>:
    5b14:	83 30       	cpi	r24, 0x03	; 3
    5b16:	29 f0       	breq	.+10     	; 0x5b22 <_Z11lb_send_msg13LBMessageTypePKcPc+0xe>
    5b18:	82 30       	cpi	r24, 0x02	; 2
    5b1a:	31 f0       	breq	.+12     	; 0x5b28 <_Z11lb_send_msg13LBMessageTypePKcPc+0x14>
    5b1c:	9b e3       	ldi	r25, 0x3B	; 59
    5b1e:	84 e2       	ldi	r24, 0x24	; 36
    5b20:	05 c0       	rjmp	.+10     	; 0x5b2c <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    5b22:	9b e3       	ldi	r25, 0x3B	; 59
    5b24:	81 e2       	ldi	r24, 0x21	; 33
    5b26:	02 c0       	rjmp	.+4      	; 0x5b2c <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    5b28:	9f e3       	ldi	r25, 0x3F	; 63
    5b2a:	84 e2       	ldi	r24, 0x24	; 36
    5b2c:	1f 92       	push	r1
    5b2e:	9f 93       	push	r25
    5b30:	5f 93       	push	r21
    5b32:	4f 93       	push	r20
    5b34:	7f 93       	push	r23
    5b36:	6f 93       	push	r22
    5b38:	1f 92       	push	r1
    5b3a:	8f 93       	push	r24
    5b3c:	8e e5       	ldi	r24, 0x5E	; 94
    5b3e:	94 e4       	ldi	r25, 0x44	; 68
    5b40:	9f 93       	push	r25
    5b42:	8f 93       	push	r24
    5b44:	80 ed       	ldi	r24, 0xD0	; 208
    5b46:	96 e4       	ldi	r25, 0x46	; 70
    5b48:	9f 93       	push	r25
    5b4a:	8f 93       	push	r24
    5b4c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    5b50:	80 ed       	ldi	r24, 0xD0	; 208
    5b52:	96 e4       	ldi	r25, 0x46	; 70
    5b54:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_Z12lb_send_textPc>
    5b58:	8d b7       	in	r24, 0x3d	; 61
    5b5a:	9e b7       	in	r25, 0x3e	; 62
    5b5c:	0c 96       	adiw	r24, 0x0c	; 12
    5b5e:	8d bf       	out	0x3d, r24	; 61
    5b60:	9e bf       	out	0x3e, r25	; 62
    5b62:	08 95       	ret

00005b64 <_Z16lb_broadcast_numjPKc>:
}


void lb_broadcast_num(uint16_t data, const char* str)
{
    5b64:	0f 93       	push	r16
    5b66:	1f 93       	push	r17
    5b68:	cf 93       	push	r28
    5b6a:	df 93       	push	r29
    5b6c:	cd b7       	in	r28, 0x3d	; 61
    5b6e:	de b7       	in	r29, 0x3e	; 62
    5b70:	26 97       	sbiw	r28, 0x06	; 6
    5b72:	cd bf       	out	0x3d, r28	; 61
    5b74:	de bf       	out	0x3e, r29	; 62
    5b76:	8b 01       	movw	r16, r22
	char t[6] = "\0";
    5b78:	20 91 53 44 	lds	r18, 0x4453	; 0x804453 <g_80m_power_table+0x41c>
    5b7c:	30 91 54 44 	lds	r19, 0x4454	; 0x804454 <g_80m_power_table+0x41d>
    5b80:	29 83       	std	Y+1, r18	; 0x01
    5b82:	3a 83       	std	Y+2, r19	; 0x02
    5b84:	fe 01       	movw	r30, r28
    5b86:	33 96       	adiw	r30, 0x03	; 3
    5b88:	24 e0       	ldi	r18, 0x04	; 4
    5b8a:	df 01       	movw	r26, r30
    5b8c:	1d 92       	st	X+, r1
    5b8e:	2a 95       	dec	r18
    5b90:	e9 f7       	brne	.-6      	; 0x5b8c <_Z16lb_broadcast_numjPKc+0x28>

	sprintf(t, "%u", data);
    5b92:	9f 93       	push	r25
    5b94:	8f 93       	push	r24
    5b96:	8e e6       	ldi	r24, 0x6E	; 110
    5b98:	94 e4       	ldi	r25, 0x44	; 68
    5b9a:	9f 93       	push	r25
    5b9c:	8f 93       	push	r24
    5b9e:	ce 01       	movw	r24, r28
    5ba0:	01 96       	adiw	r24, 0x01	; 1
    5ba2:	9f 93       	push	r25
    5ba4:	8f 93       	push	r24
    5ba6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
	g_tempMsgBuff[0] = '\0';
    5baa:	10 92 d0 46 	sts	0x46D0, r1	; 0x8046d0 <_ZL13g_tempMsgBuff>

	if(str)
    5bae:	0f 90       	pop	r0
    5bb0:	0f 90       	pop	r0
    5bb2:	0f 90       	pop	r0
    5bb4:	0f 90       	pop	r0
    5bb6:	0f 90       	pop	r0
    5bb8:	0f 90       	pop	r0
    5bba:	01 15       	cp	r16, r1
    5bbc:	11 05       	cpc	r17, r1
    5bbe:	91 f0       	breq	.+36     	; 0x5be4 <_Z16lb_broadcast_numjPKc+0x80>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
    5bc0:	ce 01       	movw	r24, r28
    5bc2:	01 96       	adiw	r24, 0x01	; 1
    5bc4:	9f 93       	push	r25
    5bc6:	8f 93       	push	r24
    5bc8:	1f 93       	push	r17
    5bca:	0f 93       	push	r16
    5bcc:	81 e7       	ldi	r24, 0x71	; 113
    5bce:	94 e4       	ldi	r25, 0x44	; 68
    5bd0:	9f 93       	push	r25
    5bd2:	8f 93       	push	r24
    5bd4:	80 ed       	ldi	r24, 0xD0	; 208
    5bd6:	96 e4       	ldi	r25, 0x46	; 70
    5bd8:	9f 93       	push	r25
    5bda:	8f 93       	push	r24
    5bdc:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>
    5be0:	cd bf       	out	0x3d, r28	; 61
    5be2:	de bf       	out	0x3e, r29	; 62
	}

	if(g_tempMsgBuff[0]) lb_send_text(g_tempMsgBuff);
    5be4:	80 91 d0 46 	lds	r24, 0x46D0	; 0x8046d0 <_ZL13g_tempMsgBuff>
    5be8:	88 23       	and	r24, r24
    5bea:	21 f0       	breq	.+8      	; 0x5bf4 <_Z16lb_broadcast_numjPKc+0x90>
    5bec:	80 ed       	ldi	r24, 0xD0	; 208
    5bee:	96 e4       	ldi	r25, 0x46	; 70
    5bf0:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_Z12lb_send_textPc>
}
    5bf4:	26 96       	adiw	r28, 0x06	; 6
    5bf6:	cd bf       	out	0x3d, r28	; 61
    5bf8:	de bf       	out	0x3e, r29	; 62
    5bfa:	df 91       	pop	r29
    5bfc:	cf 91       	pop	r28
    5bfe:	1f 91       	pop	r17
    5c00:	0f 91       	pop	r16
    5c02:	08 95       	ret

00005c04 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	fc 01       	movw	r30, r24
    5c08:	b0 97       	sbiw	r30, 0x20	; 32
    5c0a:	ed 35       	cpi	r30, 0x5D	; 93
    5c0c:	f1 05       	cpc	r31, r1
    5c0e:	08 f0       	brcs	.+2      	; 0x5c12 <_Z12getMorseCharc+0xe>
    5c10:	e8 c0       	rjmp	.+464    	; 0x5de2 <_Z12getMorseCharc+0x1de>
    5c12:	e8 55       	subi	r30, 0x58	; 88
    5c14:	ff 4f       	sbci	r31, 0xFF	; 255
    5c16:	0c 94 fe 3e 	jmp	0x7dfc	; 0x7dfc <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5c1a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    5c1c:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    5c1e:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    5c20:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5c22:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    5c24:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    5c26:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5c28:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    5c2a:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    5c2c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    5c2e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5c30:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5c32:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    5c34:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    5c36:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5c38:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5c3a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    5c3c:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    5c40:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    5c42:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    5c44:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    5c46:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5c48:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5c4a:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    5c4c:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    5c4e:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5c50:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5c52:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    5c54:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    5c56:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5c58:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5c5a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    5c5c:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    5c5e:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    5c60:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    5c62:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    5c64:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    5c66:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5c68:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    5c6a:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    5c6c:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    5c6e:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5c70:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5c72:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    5c74:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    5c76:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5c78:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5c7a:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    5c7c:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    5c7e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5c80:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5c82:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    5c84:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    5c86:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    5c88:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5c8a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    5c8c:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    5c8e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5c90:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    5c92:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    5c94:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    5c96:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5c98:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    5c9a:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    5c9c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    5c9e:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5ca0:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5ca2:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    5ca4:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    5ca6:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5ca8:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5caa:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    5cac:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    5cae:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    5cb0:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5cb2:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    5cb4:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    5cb6:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    5cb8:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    5cba:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    5cbc:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    5cbe:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5cc0:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    5cc2:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    5cc4:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    5cc6:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5cc8:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    5cca:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    5ccc:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    5cce:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5cd0:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    5cd2:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    5cd4:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    5cd6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5cd8:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5cda:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    5cdc:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    5cde:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5ce0:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5ce2:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    5ce4:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    5ce6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5ce8:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    5cea:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    5cec:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    5cee:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5cf0:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5cf2:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    5cf4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    5cf6:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5cf8:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    5cfa:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    5cfc:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    5cfe:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5d00:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    5d02:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    5d04:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5d06:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5d08:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    5d0a:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    5d0c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    5d0e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5d10:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5d12:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    5d14:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    5d16:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5d18:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5d1a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    5d1c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    5d1e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5d20:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5d22:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    5d24:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5d26:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5d28:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5d2a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    5d2c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    5d2e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5d30:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    5d32:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    5d34:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    5d36:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5d38:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    5d3a:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    5d3c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    5d3e:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5d40:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    5d42:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    5d44:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    5d46:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5d48:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    5d4a:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    5d4c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    5d4e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5d50:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5d52:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    5d54:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    5d56:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5d58:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    5d5a:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    5d5c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    5d5e:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5d60:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    5d62:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    5d64:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5d66:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5d68:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5d6a:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    5d6c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    5d6e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5d70:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    5d72:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    5d74:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    5d76:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5d78:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5d7a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    5d7c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    5d7e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5d80:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5d82:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    5d84:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    5d86:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5d88:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    5d8a:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    5d8c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    5d8e:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    5d90:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    5d92:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    5d94:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5d96:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5d98:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    5d9a:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    5d9c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5d9e:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5da0:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    5da2:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    5da4:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    5da6:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5da8:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    5daa:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    5dac:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    5dae:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5db0:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    5db2:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    5db4:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    5db6:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5db8:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    5dba:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    5dbc:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    5dbe:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5dc0:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    5dc2:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    5dc4:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    5dc6:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5dc8:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    5dca:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    5dcc:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    5dce:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    5dd0:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    5dd2:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    5dd4:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    5dd6:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5dd8:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    5dda:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    5ddc:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    5dde:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5de0:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    5de2:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    5de4:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    5de6:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    5de8:	08 95       	ret

00005dea <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    5dea:	cf 93       	push	r28
    5dec:	df 93       	push	r29
    5dee:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    5df0:	00 97       	sbiw	r24, 0x00	; 0
    5df2:	b1 f1       	breq	.+108    	; 0x5e60 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    5df4:	10 92 0d 47 	sts	0x470D, r1	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    5df8:	61 15       	cp	r22, r1
    5dfa:	71 05       	cpc	r23, r1
    5dfc:	21 f0       	breq	.+8      	; 0x5e06 <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    5dfe:	db 01       	movw	r26, r22
    5e00:	2c 91       	ld	r18, X
    5e02:	20 93 25 40 	sts	0x4025, r18	; 0x804025 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    5e06:	fc 01       	movw	r30, r24
    5e08:	20 81       	ld	r18, Z
    5e0a:	22 23       	and	r18, r18
    5e0c:	d9 f0       	breq	.+54     	; 0x5e44 <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    5e0e:	80 93 0b 47 	sts	0x470B, r24	; 0x80470b <_ZZ9makeMorsePcPhS0_E3str>
    5e12:	90 93 0c 47 	sts	0x470C, r25	; 0x80470c <_ZZ9makeMorsePcPhS0_E3str+0x1>
			c = ' ';
    5e16:	80 e2       	ldi	r24, 0x20	; 32
    5e18:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    5e1c:	82 2f       	mov	r24, r18
    5e1e:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <_Z12getMorseCharc>
    5e22:	60 93 08 47 	sts	0x4708, r22	; 0x804708 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    5e26:	70 93 09 47 	sts	0x4709, r23	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    5e2a:	80 93 0a 47 	sts	0x470A, r24	; 0x80470a <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    5e2e:	10 92 07 47 	sts	0x4707, r1	; 0x804707 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    5e32:	10 92 06 47 	sts	0x4706, r1	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    5e36:	10 92 05 47 	sts	0x4705, r1	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    5e3a:	10 92 04 47 	sts	0x4704, r1	; 0x804704 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    5e3e:	10 92 03 47 	sts	0x4703, r1	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
    5e42:	0a c0       	rjmp	.+20     	; 0x5e58 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    5e44:	10 92 0b 47 	sts	0x470B, r1	; 0x80470b <_ZZ9makeMorsePcPhS0_E3str>
    5e48:	10 92 0c 47 	sts	0x470C, r1	; 0x80470c <_ZZ9makeMorsePcPhS0_E3str+0x1>
			completedString = TRUE;
    5e4c:	81 e0       	ldi	r24, 0x01	; 1
    5e4e:	80 93 03 47 	sts	0x4703, r24	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    5e52:	20 97       	sbiw	r28, 0x00	; 0
    5e54:	09 f0       	breq	.+2      	; 0x5e58 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    5e56:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    5e58:	10 92 02 47 	sts	0x4702, r1	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    5e5c:	80 e0       	ldi	r24, 0x00	; 0
    5e5e:	bb c0       	rjmp	.+374    	; 0x5fd6 <_Z9makeMorsePcPhS0_+0x1ec>
	}
	else if(str)
    5e60:	e0 91 0b 47 	lds	r30, 0x470B	; 0x80470b <_ZZ9makeMorsePcPhS0_E3str>
    5e64:	f0 91 0c 47 	lds	r31, 0x470C	; 0x80470c <_ZZ9makeMorsePcPhS0_E3str+0x1>
    5e68:	30 97       	sbiw	r30, 0x00	; 0
    5e6a:	09 f4       	brne	.+2      	; 0x5e6e <_Z9makeMorsePcPhS0_+0x84>
    5e6c:	a5 c0       	rjmp	.+330    	; 0x5fb8 <_Z9makeMorsePcPhS0_+0x1ce>
	{
		if(repeating)
    5e6e:	61 15       	cp	r22, r1
    5e70:	71 05       	cpc	r23, r1
    5e72:	21 f0       	breq	.+8      	; 0x5e7c <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    5e74:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPhS0_E6repeat>
    5e78:	db 01       	movw	r26, r22
    5e7a:	8c 93       	st	X, r24
		}

		if(completedString)
    5e7c:	80 91 03 47 	lds	r24, 0x4703	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
    5e80:	88 23       	and	r24, r24
    5e82:	49 f0       	breq	.+18     	; 0x5e96 <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    5e84:	20 97       	sbiw	r28, 0x00	; 0
    5e86:	09 f4       	brne	.+2      	; 0x5e8a <_Z9makeMorsePcPhS0_+0xa0>
    5e88:	a3 c0       	rjmp	.+326    	; 0x5fd0 <_Z9makeMorsePcPhS0_+0x1e6>
			{
				*finished = TRUE;
    5e8a:	81 e0       	ldi	r24, 0x01	; 1
    5e8c:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    5e8e:	10 92 0d 47 	sts	0x470D, r1	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    5e92:	80 e0       	ldi	r24, 0x00	; 0
    5e94:	a0 c0       	rjmp	.+320    	; 0x5fd6 <_Z9makeMorsePcPhS0_+0x1ec>
		}

		if(elementIndex)
    5e96:	80 91 05 47 	lds	r24, 0x4705	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    5e9a:	88 23       	and	r24, r24
    5e9c:	21 f0       	breq	.+8      	; 0x5ea6 <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    5e9e:	81 50       	subi	r24, 0x01	; 1
    5ea0:	80 93 05 47 	sts	0x4705, r24	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    5ea4:	7f c0       	rjmp	.+254    	; 0x5fa4 <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    5ea6:	80 91 02 47 	lds	r24, 0x4702	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    5eaa:	88 23       	and	r24, r24
    5eac:	81 f0       	breq	.+32     	; 0x5ece <_Z9makeMorsePcPhS0_+0xe4>
    5eae:	80 91 0d 47 	lds	r24, 0x470D	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    5eb2:	81 11       	cpse	r24, r1
    5eb4:	0c c0       	rjmp	.+24     	; 0x5ece <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    5eb6:	10 92 02 47 	sts	0x4702, r1	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    5eba:	80 91 04 47 	lds	r24, 0x4704	; 0x804704 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    5ebe:	88 23       	and	r24, r24
    5ec0:	09 f4       	brne	.+2      	; 0x5ec4 <_Z9makeMorsePcPhS0_+0xda>
    5ec2:	70 c0       	rjmp	.+224    	; 0x5fa4 <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    5ec4:	80 93 05 47 	sts	0x4705, r24	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    5ec8:	10 92 04 47 	sts	0x4704, r1	; 0x804704 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    5ecc:	6b c0       	rjmp	.+214    	; 0x5fa4 <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    5ece:	90 91 09 47 	lds	r25, 0x4709	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    5ed2:	80 91 06 47 	lds	r24, 0x4706	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    5ed6:	89 17       	cp	r24, r25
    5ed8:	90 f1       	brcs	.+100    	; 0x5f3e <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    5eda:	80 91 07 47 	lds	r24, 0x4707	; 0x804707 <_ZZ9makeMorsePcPhS0_E9charIndex>
    5ede:	8f 5f       	subi	r24, 0xFF	; 255
    5ee0:	80 93 07 47 	sts	0x4707, r24	; 0x804707 <_ZZ9makeMorsePcPhS0_E9charIndex>
    5ee4:	df 01       	movw	r26, r30
    5ee6:	a8 0f       	add	r26, r24
    5ee8:	b1 1d       	adc	r27, r1
    5eea:	8c 91       	ld	r24, X
    5eec:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    5ef0:	81 11       	cpse	r24, r1
    5ef2:	19 c0       	rjmp	.+50     	; 0x5f26 <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    5ef4:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPhS0_E6repeat>
    5ef8:	88 23       	and	r24, r24
    5efa:	31 f0       	breq	.+12     	; 0x5f08 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    5efc:	80 81       	ld	r24, Z
    5efe:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    5f02:	10 92 07 47 	sts	0x4707, r1	; 0x804707 <_ZZ9makeMorsePcPhS0_E9charIndex>
    5f06:	0f c0       	rjmp	.+30     	; 0x5f26 <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    5f08:	10 92 0b 47 	sts	0x470B, r1	; 0x80470b <_ZZ9makeMorsePcPhS0_E3str>
    5f0c:	10 92 0c 47 	sts	0x470C, r1	; 0x80470c <_ZZ9makeMorsePcPhS0_E3str+0x1>
						carrierOn = OFF;
    5f10:	10 92 02 47 	sts	0x4702, r1	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    5f14:	91 e0       	ldi	r25, 0x01	; 1
    5f16:	90 93 03 47 	sts	0x4703, r25	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    5f1a:	20 97       	sbiw	r28, 0x00	; 0
    5f1c:	09 f0       	breq	.+2      	; 0x5f20 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    5f1e:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    5f20:	10 92 0d 47 	sts	0x470D, r1	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    5f24:	58 c0       	rjmp	.+176    	; 0x5fd6 <_Z9makeMorsePcPhS0_+0x1ec>
					}
				}

				morseInProgress = getMorseChar(c);
    5f26:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
    5f2a:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <_Z12getMorseCharc>
    5f2e:	60 93 08 47 	sts	0x4708, r22	; 0x804708 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    5f32:	70 93 09 47 	sts	0x4709, r23	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    5f36:	80 93 0a 47 	sts	0x470A, r24	; 0x80470a <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    5f3a:	10 92 06 47 	sts	0x4706, r1	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    5f3e:	20 91 08 47 	lds	r18, 0x4708	; 0x804708 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    5f42:	2d 3f       	cpi	r18, 0xFD	; 253
    5f44:	00 f5       	brcc	.+64     	; 0x5f86 <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    5f46:	40 91 06 47 	lds	r20, 0x4706	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    5f4a:	31 e0       	ldi	r19, 0x01	; 1
    5f4c:	34 0f       	add	r19, r20
    5f4e:	30 93 06 47 	sts	0x4706, r19	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    5f52:	81 e0       	ldi	r24, 0x01	; 1
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	02 c0       	rjmp	.+4      	; 0x5f5c <_Z9makeMorsePcPhS0_+0x172>
    5f58:	88 0f       	add	r24, r24
    5f5a:	99 1f       	adc	r25, r25
    5f5c:	4a 95       	dec	r20
    5f5e:	e2 f7       	brpl	.-8      	; 0x5f58 <_Z9makeMorsePcPhS0_+0x16e>
    5f60:	82 23       	and	r24, r18

				if(isDah)
    5f62:	21 f0       	breq	.+8      	; 0x5f6c <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    5f64:	82 e0       	ldi	r24, 0x02	; 2
    5f66:	80 93 05 47 	sts	0x4705, r24	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    5f6a:	02 c0       	rjmp	.+4      	; 0x5f70 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    5f6c:	10 92 05 47 	sts	0x4705, r1	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    5f70:	81 e0       	ldi	r24, 0x01	; 1
    5f72:	80 93 02 47 	sts	0x4702, r24	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    5f76:	80 91 09 47 	lds	r24, 0x4709	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    5f7a:	38 17       	cp	r19, r24
    5f7c:	98 f0       	brcs	.+38     	; 0x5fa4 <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    5f7e:	82 e0       	ldi	r24, 0x02	; 2
    5f80:	80 93 04 47 	sts	0x4704, r24	; 0x804704 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    5f84:	0f c0       	rjmp	.+30     	; 0x5fa4 <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    5f86:	80 91 09 47 	lds	r24, 0x4709	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    5f8a:	9f ef       	ldi	r25, 0xFF	; 255
    5f8c:	90 93 06 47 	sts	0x4706, r25	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    5f90:	10 92 02 47 	sts	0x4702, r1	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    5f94:	84 30       	cpi	r24, 0x04	; 4
    5f96:	20 f0       	brcs	.+8      	; 0x5fa0 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    5f98:	84 50       	subi	r24, 0x04	; 4
    5f9a:	80 93 05 47 	sts	0x4705, r24	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    5f9e:	02 c0       	rjmp	.+4      	; 0x5fa4 <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    5fa0:	10 92 05 47 	sts	0x4705, r1	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    5fa4:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
    5fa8:	8c 33       	cpi	r24, 0x3C	; 60
    5faa:	21 f4       	brne	.+8      	; 0x5fb4 <_Z9makeMorsePcPhS0_+0x1ca>
		{
			holdKeyDown = TRUE;
    5fac:	81 e0       	ldi	r24, 0x01	; 1
    5fae:	80 93 0d 47 	sts	0x470D, r24	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    5fb2:	02 c0       	rjmp	.+4      	; 0x5fb8 <_Z9makeMorsePcPhS0_+0x1ce>
		}
		else
		{
			holdKeyDown = FALSE;
    5fb4:	10 92 0d 47 	sts	0x470D, r1	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    5fb8:	20 97       	sbiw	r28, 0x00	; 0
    5fba:	19 f0       	breq	.+6      	; 0x5fc2 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		*finished = completedString;
    5fbc:	80 91 03 47 	lds	r24, 0x4703	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
    5fc0:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    5fc2:	80 91 0d 47 	lds	r24, 0x470D	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    5fc6:	81 11       	cpse	r24, r1
    5fc8:	05 c0       	rjmp	.+10     	; 0x5fd4 <_Z9makeMorsePcPhS0_+0x1ea>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    5fca:	80 91 02 47 	lds	r24, 0x4702	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    5fce:	03 c0       	rjmp	.+6      	; 0x5fd6 <_Z9makeMorsePcPhS0_+0x1ec>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    5fd0:	80 e0       	ldi	r24, 0x00	; 0
    5fd2:	01 c0       	rjmp	.+2      	; 0x5fd6 <_Z9makeMorsePcPhS0_+0x1ec>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    5fd4:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	08 95       	ret

00005fdc <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    5fdc:	cf 92       	push	r12
    5fde:	df 92       	push	r13
    5fe0:	ef 92       	push	r14
    5fe2:	ff 92       	push	r15
    5fe4:	1f 93       	push	r17
    5fe6:	cf 93       	push	r28
    5fe8:	df 93       	push	r29
    5fea:	6c 01       	movw	r12, r24
    5fec:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    5fee:	c0 e0       	ldi	r28, 0x00	; 0
    5ff0:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    5ff2:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    5ff4:	c4 31       	cpi	r28, 0x14	; 20
    5ff6:	d1 05       	cpc	r29, r1
    5ff8:	74 f4       	brge	.+28     	; 0x6016 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    5ffa:	f6 01       	movw	r30, r12
    5ffc:	ec 0f       	add	r30, r28
    5ffe:	fd 1f       	adc	r31, r29
    6000:	80 81       	ld	r24, Z
		if(!c)
    6002:	88 23       	and	r24, r24
    6004:	41 f0       	breq	.+16     	; 0x6016 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    6006:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    600a:	6d 3f       	cpi	r22, 0xFD	; 253
    600c:	08 f4       	brcc	.+2      	; 0x6010 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    600e:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    6010:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    6012:	21 96       	adiw	r28, 0x01	; 1
    6014:	ef cf       	rjmp	.-34     	; 0x5ff4 <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    6016:	80 eb       	ldi	r24, 0xB0	; 176
    6018:	94 e0       	ldi	r25, 0x04	; 4
    601a:	b7 01       	movw	r22, r14
    601c:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <__udivmodhi4>
}
    6020:	16 9f       	mul	r17, r22
    6022:	c0 01       	movw	r24, r0
    6024:	17 9f       	mul	r17, r23
    6026:	90 0d       	add	r25, r0
    6028:	11 24       	eor	r1, r1
    602a:	df 91       	pop	r29
    602c:	cf 91       	pop	r28
    602e:	1f 91       	pop	r17
    6030:	ff 90       	pop	r15
    6032:	ef 90       	pop	r14
    6034:	df 90       	pop	r13
    6036:	cf 90       	pop	r12
    6038:	08 95       	ret

0000603a <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    603a:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    603c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    603e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    6040:	40 83       	st	Z, r20
	ret                             // Return to caller
    6042:	08 95       	ret

00006044 <_ZL21USART4_initializationm>:
	}
	
	serialbus_end_tx();
	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    6044:	20 b3       	in	r18, 0x10	; 16
    6046:	2d 7f       	andi	r18, 0xFD	; 253
    6048:	20 bb       	out	0x10, r18	; 16
    604a:	e1 e9       	ldi	r30, 0x91	; 145
    604c:	f4 e0       	ldi	r31, 0x04	; 4
    604e:	20 81       	ld	r18, Z
    6050:	27 7f       	andi	r18, 0xF7	; 247
    6052:	20 83       	st	Z, r18
    6054:	20 b3       	in	r18, 0x10	; 16
    6056:	21 60       	ori	r18, 0x01	; 1
    6058:	20 bb       	out	0x10, r18	; 16
    605a:	21 b3       	in	r18, 0x11	; 17
    605c:	21 60       	ori	r18, 0x01	; 1
    605e:	21 bb       	out	0x11, r18	; 17
    6060:	0e 94 f5 3b 	call	0x77ea	; 0x77ea <USART4_init>
    6064:	08 95       	ret

00006066 <_ZL21USART1_initializationm>:
    6066:	28 b1       	in	r18, 0x08	; 8
    6068:	2d 7f       	andi	r18, 0xFD	; 253
    606a:	28 b9       	out	0x08, r18	; 8
    606c:	e1 e5       	ldi	r30, 0x51	; 81
    606e:	f4 e0       	ldi	r31, 0x04	; 4
    6070:	20 81       	ld	r18, Z
    6072:	27 7f       	andi	r18, 0xF7	; 247
    6074:	20 83       	st	Z, r18
    6076:	28 b1       	in	r18, 0x08	; 8
    6078:	21 60       	ori	r18, 0x01	; 1
    607a:	28 b9       	out	0x08, r18	; 8
    607c:	29 b1       	in	r18, 0x09	; 9
    607e:	21 60       	ori	r18, 0x01	; 1
    6080:	29 b9       	out	0x09, r18	; 9
    6082:	0e 94 c1 3b 	call	0x7782	; 0x7782 <USART1_init>
    6086:	08 95       	ret

00006088 <nextFullSBTxBuffer>:
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	80 91 11 47 	lds	r24, 0x4711	; 0x804711 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    608e:	28 2f       	mov	r18, r24
    6090:	30 e0       	ldi	r19, 0x00	; 0
    6092:	49 e2       	ldi	r20, 0x29	; 41
    6094:	42 9f       	mul	r20, r18
    6096:	f0 01       	movw	r30, r0
    6098:	43 9f       	mul	r20, r19
    609a:	f0 0d       	add	r31, r0
    609c:	11 24       	eor	r1, r1
    609e:	e0 57       	subi	r30, 0x70	; 112
    60a0:	f8 4b       	sbci	r31, 0xB8	; 184
    60a2:	40 81       	ld	r20, Z
    60a4:	41 11       	cpse	r20, r1
    60a6:	0b c0       	rjmp	.+22     	; 0x60be <nextFullSBTxBuffer+0x36>
    60a8:	9f 5f       	subi	r25, 0xFF	; 255
    60aa:	93 30       	cpi	r25, 0x03	; 3
    60ac:	50 f4       	brcc	.+20     	; 0x60c2 <nextFullSBTxBuffer+0x3a>
    60ae:	8f 5f       	subi	r24, 0xFF	; 255
    60b0:	80 93 11 47 	sts	0x4711, r24	; 0x804711 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    60b4:	83 30       	cpi	r24, 0x03	; 3
    60b6:	48 f3       	brcs	.-46     	; 0x608a <nextFullSBTxBuffer+0x2>
    60b8:	10 92 11 47 	sts	0x4711, r1	; 0x804711 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    60bc:	e6 cf       	rjmp	.-52     	; 0x608a <nextFullSBTxBuffer+0x2>
    60be:	81 e0       	ldi	r24, 0x01	; 1
    60c0:	01 c0       	rjmp	.+2      	; 0x60c4 <nextFullSBTxBuffer+0x3c>
    60c2:	80 e0       	ldi	r24, 0x00	; 0
    60c4:	88 23       	and	r24, r24
    60c6:	49 f0       	breq	.+18     	; 0x60da <nextFullSBTxBuffer+0x52>
    60c8:	49 e2       	ldi	r20, 0x29	; 41
    60ca:	42 9f       	mul	r20, r18
    60cc:	c0 01       	movw	r24, r0
    60ce:	43 9f       	mul	r20, r19
    60d0:	90 0d       	add	r25, r0
    60d2:	11 24       	eor	r1, r1
    60d4:	80 57       	subi	r24, 0x70	; 112
    60d6:	98 4b       	sbci	r25, 0xB8	; 184
    60d8:	08 95       	ret
    60da:	80 e0       	ldi	r24, 0x00	; 0
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	08 95       	ret

000060e0 <nextEmptySBTxBuffer>:
    60e0:	90 e0       	ldi	r25, 0x00	; 0
    60e2:	80 91 10 47 	lds	r24, 0x4710	; 0x804710 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    60e6:	28 2f       	mov	r18, r24
    60e8:	30 e0       	ldi	r19, 0x00	; 0
    60ea:	49 e2       	ldi	r20, 0x29	; 41
    60ec:	42 9f       	mul	r20, r18
    60ee:	f0 01       	movw	r30, r0
    60f0:	43 9f       	mul	r20, r19
    60f2:	f0 0d       	add	r31, r0
    60f4:	11 24       	eor	r1, r1
    60f6:	e0 57       	subi	r30, 0x70	; 112
    60f8:	f8 4b       	sbci	r31, 0xB8	; 184
    60fa:	40 81       	ld	r20, Z
    60fc:	44 23       	and	r20, r20
    60fe:	59 f0       	breq	.+22     	; 0x6116 <nextEmptySBTxBuffer+0x36>
    6100:	9f 5f       	subi	r25, 0xFF	; 255
    6102:	93 30       	cpi	r25, 0x03	; 3
    6104:	50 f4       	brcc	.+20     	; 0x611a <nextEmptySBTxBuffer+0x3a>
    6106:	8f 5f       	subi	r24, 0xFF	; 255
    6108:	80 93 10 47 	sts	0x4710, r24	; 0x804710 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    610c:	83 30       	cpi	r24, 0x03	; 3
    610e:	48 f3       	brcs	.-46     	; 0x60e2 <nextEmptySBTxBuffer+0x2>
    6110:	10 92 10 47 	sts	0x4710, r1	; 0x804710 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    6114:	e6 cf       	rjmp	.-52     	; 0x60e2 <nextEmptySBTxBuffer+0x2>
    6116:	81 e0       	ldi	r24, 0x01	; 1
    6118:	01 c0       	rjmp	.+2      	; 0x611c <nextEmptySBTxBuffer+0x3c>
    611a:	80 e0       	ldi	r24, 0x00	; 0
    611c:	88 23       	and	r24, r24
    611e:	49 f0       	breq	.+18     	; 0x6132 <nextEmptySBTxBuffer+0x52>
    6120:	49 e2       	ldi	r20, 0x29	; 41
    6122:	42 9f       	mul	r20, r18
    6124:	c0 01       	movw	r24, r0
    6126:	43 9f       	mul	r20, r19
    6128:	90 0d       	add	r25, r0
    612a:	11 24       	eor	r1, r1
    612c:	80 57       	subi	r24, 0x70	; 112
    612e:	98 4b       	sbci	r25, 0xB8	; 184
    6130:	08 95       	ret
    6132:	80 e0       	ldi	r24, 0x00	; 0
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	08 95       	ret

00006138 <nextEmptySBRxBuffer>:
    6138:	90 e0       	ldi	r25, 0x00	; 0
    613a:	80 91 0f 47 	lds	r24, 0x470F	; 0x80470f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    613e:	28 2f       	mov	r18, r24
    6140:	30 e0       	ldi	r19, 0x00	; 0
    6142:	4f e3       	ldi	r20, 0x3F	; 63
    6144:	42 9f       	mul	r20, r18
    6146:	f0 01       	movw	r30, r0
    6148:	43 9f       	mul	r20, r19
    614a:	f0 0d       	add	r31, r0
    614c:	11 24       	eor	r1, r1
    614e:	ee 5e       	subi	r30, 0xEE	; 238
    6150:	f8 4b       	sbci	r31, 0xB8	; 184
    6152:	41 81       	ldd	r20, Z+1	; 0x01
    6154:	52 81       	ldd	r21, Z+2	; 0x02
    6156:	45 2b       	or	r20, r21
    6158:	59 f0       	breq	.+22     	; 0x6170 <nextEmptySBRxBuffer+0x38>
    615a:	9f 5f       	subi	r25, 0xFF	; 255
    615c:	92 30       	cpi	r25, 0x02	; 2
    615e:	50 f4       	brcc	.+20     	; 0x6174 <nextEmptySBRxBuffer+0x3c>
    6160:	8f 5f       	subi	r24, 0xFF	; 255
    6162:	80 93 0f 47 	sts	0x470F, r24	; 0x80470f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    6166:	82 30       	cpi	r24, 0x02	; 2
    6168:	40 f3       	brcs	.-48     	; 0x613a <nextEmptySBRxBuffer+0x2>
    616a:	10 92 0f 47 	sts	0x470F, r1	; 0x80470f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    616e:	e5 cf       	rjmp	.-54     	; 0x613a <nextEmptySBRxBuffer+0x2>
    6170:	81 e0       	ldi	r24, 0x01	; 1
    6172:	01 c0       	rjmp	.+2      	; 0x6176 <nextEmptySBRxBuffer+0x3e>
    6174:	80 e0       	ldi	r24, 0x00	; 0
    6176:	88 23       	and	r24, r24
    6178:	49 f0       	breq	.+18     	; 0x618c <nextEmptySBRxBuffer+0x54>
    617a:	4f e3       	ldi	r20, 0x3F	; 63
    617c:	42 9f       	mul	r20, r18
    617e:	c0 01       	movw	r24, r0
    6180:	43 9f       	mul	r20, r19
    6182:	90 0d       	add	r25, r0
    6184:	11 24       	eor	r1, r1
    6186:	8e 5e       	subi	r24, 0xEE	; 238
    6188:	98 4b       	sbci	r25, 0xB8	; 184
    618a:	08 95       	ret
    618c:	80 e0       	ldi	r24, 0x00	; 0
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	08 95       	ret

00006192 <nextFullSBRxBuffer>:
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	80 91 0e 47 	lds	r24, 0x470E	; 0x80470e <_ZZ18nextFullSBRxBufferE11bufferIndex>
    6198:	28 2f       	mov	r18, r24
    619a:	30 e0       	ldi	r19, 0x00	; 0
    619c:	4f e3       	ldi	r20, 0x3F	; 63
    619e:	42 9f       	mul	r20, r18
    61a0:	f0 01       	movw	r30, r0
    61a2:	43 9f       	mul	r20, r19
    61a4:	f0 0d       	add	r31, r0
    61a6:	11 24       	eor	r1, r1
    61a8:	ee 5e       	subi	r30, 0xEE	; 238
    61aa:	f8 4b       	sbci	r31, 0xB8	; 184
    61ac:	41 81       	ldd	r20, Z+1	; 0x01
    61ae:	52 81       	ldd	r21, Z+2	; 0x02
    61b0:	45 2b       	or	r20, r21
    61b2:	59 f4       	brne	.+22     	; 0x61ca <nextFullSBRxBuffer+0x38>
    61b4:	9f 5f       	subi	r25, 0xFF	; 255
    61b6:	92 30       	cpi	r25, 0x02	; 2
    61b8:	50 f4       	brcc	.+20     	; 0x61ce <nextFullSBRxBuffer+0x3c>
    61ba:	8f 5f       	subi	r24, 0xFF	; 255
    61bc:	80 93 0e 47 	sts	0x470E, r24	; 0x80470e <_ZZ18nextFullSBRxBufferE11bufferIndex>
    61c0:	82 30       	cpi	r24, 0x02	; 2
    61c2:	40 f3       	brcs	.-48     	; 0x6194 <nextFullSBRxBuffer+0x2>
    61c4:	10 92 0e 47 	sts	0x470E, r1	; 0x80470e <_ZZ18nextFullSBRxBufferE11bufferIndex>
    61c8:	e5 cf       	rjmp	.-54     	; 0x6194 <nextFullSBRxBuffer+0x2>
    61ca:	81 e0       	ldi	r24, 0x01	; 1
    61cc:	01 c0       	rjmp	.+2      	; 0x61d0 <nextFullSBRxBuffer+0x3e>
    61ce:	80 e0       	ldi	r24, 0x00	; 0
    61d0:	88 23       	and	r24, r24
    61d2:	49 f0       	breq	.+18     	; 0x61e6 <nextFullSBRxBuffer+0x54>
    61d4:	4f e3       	ldi	r20, 0x3F	; 63
    61d6:	42 9f       	mul	r20, r18
    61d8:	c0 01       	movw	r24, r0
    61da:	43 9f       	mul	r20, r19
    61dc:	90 0d       	add	r25, r0
    61de:	11 24       	eor	r1, r1
    61e0:	8e 5e       	subi	r24, 0xEE	; 238
    61e2:	98 4b       	sbci	r25, 0xB8	; 184
    61e4:	08 95       	ret
    61e6:	80 e0       	ldi	r24, 0x00	; 0
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	08 95       	ret

000061ec <serialbusTxInProgress>:
    61ec:	80 91 0b 48 	lds	r24, 0x480B	; 0x80480b <_ZL19serialbus_tx_active>
    61f0:	08 95       	ret

000061f2 <_Z18serialbus_start_txv>:
    61f2:	cf 93       	push	r28
    61f4:	80 91 0b 48 	lds	r24, 0x480B	; 0x80480b <_ZL19serialbus_tx_active>
    61f8:	c1 e0       	ldi	r28, 0x01	; 1
    61fa:	81 11       	cpse	r24, r1
    61fc:	c0 e0       	ldi	r28, 0x00	; 0
    61fe:	81 11       	cpse	r24, r1
    6200:	0c c0       	rjmp	.+24     	; 0x621a <_Z18serialbus_start_txv+0x28>
    6202:	81 e0       	ldi	r24, 0x01	; 1
    6204:	80 93 0b 48 	sts	0x480B, r24	; 0x80480b <_ZL19serialbus_tx_active>
    6208:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    620c:	81 11       	cpse	r24, r1
    620e:	03 c0       	rjmp	.+6      	; 0x6216 <_Z18serialbus_start_txv+0x24>
    6210:	0e 94 17 3c 	call	0x782e	; 0x782e <USART4_enable_tx>
    6214:	02 c0       	rjmp	.+4      	; 0x621a <_Z18serialbus_start_txv+0x28>
    6216:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <USART1_enable_tx>
    621a:	8c 2f       	mov	r24, r28
    621c:	cf 91       	pop	r28
    621e:	08 95       	ret

00006220 <serialbus_end_tx>:
    6220:	80 91 0b 48 	lds	r24, 0x480B	; 0x80480b <_ZL19serialbus_tx_active>
    6224:	88 23       	and	r24, r24
    6226:	89 f0       	breq	.+34     	; 0x624a <serialbus_end_tx+0x2a>
    6228:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    622c:	84 30       	cpi	r24, 0x04	; 4
    622e:	31 f4       	brne	.+12     	; 0x623c <serialbus_end_tx+0x1c>
    6230:	e0 e8       	ldi	r30, 0x80	; 128
    6232:	f8 e0       	ldi	r31, 0x08	; 8
    6234:	85 81       	ldd	r24, Z+5	; 0x05
    6236:	8f 7d       	andi	r24, 0xDF	; 223
    6238:	85 83       	std	Z+5, r24	; 0x05
    623a:	05 c0       	rjmp	.+10     	; 0x6246 <serialbus_end_tx+0x26>
    623c:	e0 e2       	ldi	r30, 0x20	; 32
    623e:	f8 e0       	ldi	r31, 0x08	; 8
    6240:	85 81       	ldd	r24, Z+5	; 0x05
    6242:	8f 7d       	andi	r24, 0xDF	; 223
    6244:	85 83       	std	Z+5, r24	; 0x05
    6246:	10 92 0b 48 	sts	0x480B, r1	; 0x80480b <_ZL19serialbus_tx_active>
    624a:	08 95       	ret

0000624c <serialbus_init>:
    624c:	cf 93       	push	r28
    624e:	2e e7       	ldi	r18, 0x7E	; 126
    6250:	e2 e1       	ldi	r30, 0x12	; 18
    6252:	f7 e4       	ldi	r31, 0x47	; 71
    6254:	df 01       	movw	r26, r30
    6256:	1d 92       	st	X+, r1
    6258:	2a 95       	dec	r18
    625a:	e9 f7       	brne	.-6      	; 0x6256 <serialbus_init+0xa>
    625c:	a0 e0       	ldi	r26, 0x00	; 0
    625e:	b0 e0       	ldi	r27, 0x00	; 0
    6260:	a3 30       	cpi	r26, 0x03	; 3
    6262:	b1 05       	cpc	r27, r1
    6264:	5c f4       	brge	.+22     	; 0x627c <serialbus_init+0x30>
    6266:	29 e2       	ldi	r18, 0x29	; 41
    6268:	2a 9f       	mul	r18, r26
    626a:	f0 01       	movw	r30, r0
    626c:	2b 9f       	mul	r18, r27
    626e:	f0 0d       	add	r31, r0
    6270:	11 24       	eor	r1, r1
    6272:	e0 57       	subi	r30, 0x70	; 112
    6274:	f8 4b       	sbci	r31, 0xB8	; 184
    6276:	10 82       	st	Z, r1
    6278:	11 96       	adiw	r26, 0x01	; 1
    627a:	f2 cf       	rjmp	.-28     	; 0x6260 <serialbus_init+0x14>
    627c:	46 30       	cpi	r20, 0x06	; 6
    627e:	21 f4       	brne	.+8      	; 0x6288 <serialbus_init+0x3c>
    6280:	20 91 27 40 	lds	r18, 0x4027	; 0x804027 <g_serialbus_usart_number>
    6284:	27 30       	cpi	r18, 0x07	; 7
    6286:	51 f4       	brne	.+20     	; 0x629c <serialbus_init+0x50>
    6288:	c4 2f       	mov	r28, r20
    628a:	44 30       	cpi	r20, 0x04	; 4
    628c:	19 f4       	brne	.+6      	; 0x6294 <serialbus_init+0x48>
    628e:	0e 94 22 30 	call	0x6044	; 0x6044 <_ZL21USART4_initializationm>
    6292:	02 c0       	rjmp	.+4      	; 0x6298 <serialbus_init+0x4c>
    6294:	0e 94 33 30 	call	0x6066	; 0x6066 <_ZL21USART1_initializationm>
    6298:	c0 93 27 40 	sts	0x4027, r28	; 0x804027 <g_serialbus_usart_number>
    629c:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <_ZL14g_bus_disabled>
    62a0:	cf 91       	pop	r28
    62a2:	08 95       	ret

000062a4 <_Z19serialbus_send_textPc>:
	}
}


BOOL serialbus_send_text(char* text)
{
    62a4:	0f 93       	push	r16
    62a6:	1f 93       	push	r17
    62a8:	cf 93       	push	r28
    62aa:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
    62ac:	20 91 26 40 	lds	r18, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    62b0:	21 11       	cpse	r18, r1
    62b2:	2f c0       	rjmp	.+94     	; 0x6312 <_Z19serialbus_send_textPc+0x6e>
	{
		return( err);
	}

	if(text)
    62b4:	00 97       	sbiw	r24, 0x00	; 0
    62b6:	79 f1       	breq	.+94     	; 0x6316 <_Z19serialbus_send_textPc+0x72>
    62b8:	8c 01       	movw	r16, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    62ba:	0e 94 70 30 	call	0x60e0	; 0x60e0 <nextEmptySBTxBuffer>


BOOL serialbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;
    62be:	c8 ec       	ldi	r28, 0xC8	; 200
    62c0:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    62c2:	00 97       	sbiw	r24, 0x00	; 0
    62c4:	b1 f4       	brne	.+44     	; 0x62f2 <_Z19serialbus_send_textPc+0x4e>
    62c6:	20 97       	sbiw	r28, 0x00	; 0
    62c8:	a1 f0       	breq	.+40     	; 0x62f2 <_Z19serialbus_send_textPc+0x4e>
		{
			while(serialbusTxInProgress() && tries)
    62ca:	0e 94 f6 30 	call	0x61ec	; 0x61ec <serialbusTxInProgress>
    62ce:	88 23       	and	r24, r24
    62d0:	21 f0       	breq	.+8      	; 0x62da <_Z19serialbus_send_textPc+0x36>
    62d2:	20 97       	sbiw	r28, 0x00	; 0
    62d4:	21 f4       	brne	.+8      	; 0x62de <_Z19serialbus_send_textPc+0x3a>
    62d6:	90 e0       	ldi	r25, 0x00	; 0
    62d8:	03 c0       	rjmp	.+6      	; 0x62e0 <_Z19serialbus_send_textPc+0x3c>
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	01 c0       	rjmp	.+2      	; 0x62e0 <_Z19serialbus_send_textPc+0x3c>
    62de:	91 e0       	ldi	r25, 0x01	; 1
    62e0:	99 23       	and	r25, r25
    62e2:	21 f0       	breq	.+8      	; 0x62ec <_Z19serialbus_send_textPc+0x48>
			{
				if(tries)
    62e4:	20 97       	sbiw	r28, 0x00	; 0
    62e6:	89 f3       	breq	.-30     	; 0x62ca <_Z19serialbus_send_textPc+0x26>
				{
					tries--;    /* wait until transmit finishes */
    62e8:	21 97       	sbiw	r28, 0x01	; 1
    62ea:	ef cf       	rjmp	.-34     	; 0x62ca <_Z19serialbus_send_textPc+0x26>
				}
			}
			buff = nextEmptySBTxBuffer();
    62ec:	0e 94 70 30 	call	0x60e0	; 0x60e0 <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    62f0:	e8 cf       	rjmp	.-48     	; 0x62c2 <_Z19serialbus_send_textPc+0x1e>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    62f2:	00 97       	sbiw	r24, 0x00	; 0
    62f4:	91 f0       	breq	.+36     	; 0x631a <_Z19serialbus_send_textPc+0x76>
		{
			sprintf(*buff, text);
    62f6:	1f 93       	push	r17
    62f8:	0f 93       	push	r16
    62fa:	9f 93       	push	r25
    62fc:	8f 93       	push	r24
    62fe:	0e 94 e5 40 	call	0x81ca	; 0x81ca <sprintf>

			serialbus_start_tx();
    6302:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <_Z18serialbus_start_txv>
    6306:	0f 90       	pop	r0
    6308:	0f 90       	pop	r0
    630a:	0f 90       	pop	r0
    630c:	0f 90       	pop	r0
			err = FALSE;
    630e:	80 e0       	ldi	r24, 0x00	; 0
    6310:	05 c0       	rjmp	.+10     	; 0x631c <_Z19serialbus_send_textPc+0x78>
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    6312:	81 e0       	ldi	r24, 0x01	; 1
    6314:	03 c0       	rjmp	.+6      	; 0x631c <_Z19serialbus_send_textPc+0x78>
}


BOOL serialbus_send_text(char* text)
{
	BOOL err = TRUE;
    6316:	81 e0       	ldi	r24, 0x01	; 1
    6318:	01 c0       	rjmp	.+2      	; 0x631c <_Z19serialbus_send_textPc+0x78>
    631a:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
    631c:	df 91       	pop	r29
    631e:	cf 91       	pop	r28
    6320:	1f 91       	pop	r17
    6322:	0f 91       	pop	r16
    6324:	08 95       	ret

00006326 <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    6326:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    632a:	81 11       	cpse	r24, r1
    632c:	06 c0       	rjmp	.+12     	; 0x633a <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    632e:	88 e7       	ldi	r24, 0x78	; 120
    6330:	94 e4       	ldi	r25, 0x44	; 68
    6332:	0e 94 52 31 	call	0x62a4	; 0x62a4 <_Z19serialbus_send_textPc>
    6336:	81 11       	cpse	r24, r1
    6338:	fa cf       	rjmp	.-12     	; 0x632e <sb_send_NewPrompt+0x8>
    633a:	08 95       	ret

0000633c <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    633c:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    6340:	81 11       	cpse	r24, r1
    6342:	04 c0       	rjmp	.+8      	; 0x634c <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    6344:	8b e7       	ldi	r24, 0x7B	; 123
    6346:	94 e4       	ldi	r25, 0x44	; 68
    6348:	0e 94 52 31 	call	0x62a4	; 0x62a4 <_Z19serialbus_send_textPc>
    634c:	08 95       	ret

0000634e <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    634e:	90 91 26 40 	lds	r25, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    6352:	91 11       	cpse	r25, r1
    6354:	07 c0       	rjmp	.+14     	; 0x6364 <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    6356:	ec e0       	ldi	r30, 0x0C	; 12
    6358:	f8 e4       	ldi	r31, 0x48	; 72
    635a:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    635c:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    635e:	cf 01       	movw	r24, r30
    6360:	0e 94 52 31 	call	0x62a4	; 0x62a4 <_Z19serialbus_send_textPc>
    6364:	08 95       	ret

00006366 <sb_send_string>:
}

BOOL sb_send_string(char* str)
{
    6366:	af 92       	push	r10
    6368:	bf 92       	push	r11
    636a:	cf 92       	push	r12
    636c:	df 92       	push	r13
    636e:	ef 92       	push	r14
    6370:	ff 92       	push	r15
    6372:	0f 93       	push	r16
    6374:	1f 93       	push	r17
    6376:	cf 93       	push	r28
	BOOL err = FALSE;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    6378:	20 91 26 40 	lds	r18, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    637c:	21 11       	cpse	r18, r1
    637e:	44 c0       	rjmp	.+136    	; 0x6408 <sb_send_string+0xa2>
	{
		return( TRUE);
	}

	if(str == NULL)
    6380:	00 97       	sbiw	r24, 0x00	; 0
    6382:	09 f4       	brne	.+2      	; 0x6386 <sb_send_string+0x20>
    6384:	43 c0       	rjmp	.+134    	; 0x640c <sb_send_string+0xa6>
	{
		return( TRUE);
	}

	if(!*str)
    6386:	fc 01       	movw	r30, r24
    6388:	20 81       	ld	r18, Z
    638a:	22 23       	and	r18, r18
    638c:	09 f4       	brne	.+2      	; 0x6390 <sb_send_string+0x2a>
    638e:	40 c0       	rjmp	.+128    	; 0x6410 <sb_send_string+0xaa>
    6390:	5c 01       	movw	r10, r24
	{
		return(TRUE);
	}

	length = strlen(str);
    6392:	01 90       	ld	r0, Z+
    6394:	00 20       	and	r0, r0
    6396:	e9 f7       	brne	.-6      	; 0x6392 <sb_send_string+0x2c>
    6398:	31 97       	sbiw	r30, 0x01	; 1
    639a:	6f 01       	movw	r12, r30
    639c:	c8 1a       	sub	r12, r24
    639e:	d9 0a       	sbc	r13, r25
}

BOOL sb_send_string(char* str)
{
	BOOL err = FALSE;
	uint16_t length, lengthToSend, lengthSent=0;
    63a0:	e1 2c       	mov	r14, r1
    63a2:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH);
    63a4:	86 01       	movw	r16, r12
    63a6:	0e 19       	sub	r16, r14
    63a8:	1f 09       	sbc	r17, r15
    63aa:	09 32       	cpi	r16, 0x29	; 41
    63ac:	11 05       	cpc	r17, r1
    63ae:	10 f0       	brcs	.+4      	; 0x63b4 <sb_send_string+0x4e>
    63b0:	09 e2       	ldi	r16, 0x29	; 41
    63b2:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(g_tempMsgBuff, &str[lengthSent], lengthToSend);
    63b4:	a8 01       	movw	r20, r16
    63b6:	b5 01       	movw	r22, r10
    63b8:	6e 0d       	add	r22, r14
    63ba:	7f 1d       	adc	r23, r15
    63bc:	8c e0       	ldi	r24, 0x0C	; 12
    63be:	98 e4       	ldi	r25, 0x48	; 72
    63c0:	0e 94 b9 40 	call	0x8172	; 0x8172 <strncpy>
		if(lengthToSend < SERIALBUS_MAX_TX_MSG_LENGTH)
    63c4:	09 32       	cpi	r16, 0x29	; 41
    63c6:	11 05       	cpc	r17, r1
    63c8:	20 f4       	brcc	.+8      	; 0x63d2 <sb_send_string+0x6c>
		{
			g_tempMsgBuff[lengthToSend] = '\0';
    63ca:	f8 01       	movw	r30, r16
    63cc:	e4 5f       	subi	r30, 0xF4	; 244
    63ce:	f7 4b       	sbci	r31, 0xB7	; 183
    63d0:	10 82       	st	Z, r1
		}
		while((err = serialbus_send_text(g_tempMsgBuff)))
    63d2:	8c e0       	ldi	r24, 0x0C	; 12
    63d4:	98 e4       	ldi	r25, 0x48	; 72
    63d6:	0e 94 52 31 	call	0x62a4	; 0x62a4 <_Z19serialbus_send_textPc>
    63da:	c8 2f       	mov	r28, r24
    63dc:	81 11       	cpse	r24, r1
    63de:	f9 cf       	rjmp	.-14     	; 0x63d2 <sb_send_string+0x6c>
		{
			;
		}
		while(!err && serialbusTxInProgress())
    63e0:	c1 11       	cpse	r28, r1
    63e2:	06 c0       	rjmp	.+12     	; 0x63f0 <sb_send_string+0x8a>
    63e4:	0e 94 f6 30 	call	0x61ec	; 0x61ec <serialbusTxInProgress>
    63e8:	88 23       	and	r24, r24
    63ea:	21 f0       	breq	.+8      	; 0x63f4 <sb_send_string+0x8e>
    63ec:	91 e0       	ldi	r25, 0x01	; 1
    63ee:	03 c0       	rjmp	.+6      	; 0x63f6 <sb_send_string+0x90>
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	01 c0       	rjmp	.+2      	; 0x63f6 <sb_send_string+0x90>
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	91 11       	cpse	r25, r1
    63f8:	f3 cf       	rjmp	.-26     	; 0x63e0 <sb_send_string+0x7a>
		{
			;
		}
		
		lengthSent += lengthToSend;
    63fa:	e0 0e       	add	r14, r16
    63fc:	f1 1e       	adc	r15, r17
		done = lengthSent >= length;
	}while(!done);
    63fe:	ec 14       	cp	r14, r12
    6400:	fd 04       	cpc	r15, r13
    6402:	80 f2       	brcs	.-96     	; 0x63a4 <sb_send_string+0x3e>

	return( err);
    6404:	8c 2f       	mov	r24, r28
    6406:	05 c0       	rjmp	.+10     	; 0x6412 <sb_send_string+0xac>
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
	{
		return( TRUE);
    6408:	81 e0       	ldi	r24, 0x01	; 1
    640a:	03 c0       	rjmp	.+6      	; 0x6412 <sb_send_string+0xac>
	}

	if(str == NULL)
	{
		return( TRUE);
    640c:	81 e0       	ldi	r24, 0x01	; 1
    640e:	01 c0       	rjmp	.+2      	; 0x6412 <sb_send_string+0xac>
	}

	if(!*str)
	{
		return(TRUE);
    6410:	81 e0       	ldi	r24, 0x01	; 1
		lengthSent += lengthToSend;
		done = lengthSent >= length;
	}while(!done);

	return( err);
}
    6412:	cf 91       	pop	r28
    6414:	1f 91       	pop	r17
    6416:	0f 91       	pop	r16
    6418:	ff 90       	pop	r15
    641a:	ef 90       	pop	r14
    641c:	df 90       	pop	r13
    641e:	cf 90       	pop	r12
    6420:	bf 90       	pop	r11
    6422:	af 90       	pop	r10
    6424:	08 95       	ret

00006426 <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    6426:	4f 92       	push	r4
    6428:	5f 92       	push	r5
    642a:	6f 92       	push	r6
    642c:	7f 92       	push	r7
    642e:	8f 92       	push	r8
    6430:	9f 92       	push	r9
    6432:	af 92       	push	r10
    6434:	bf 92       	push	r11
    6436:	cf 92       	push	r12
    6438:	df 92       	push	r13
    643a:	ef 92       	push	r14
    643c:	ff 92       	push	r15
    643e:	0f 93       	push	r16
    6440:	1f 93       	push	r17
    6442:	cf 93       	push	r28
    6444:	df 93       	push	r29
    6446:	8c 01       	movw	r16, r24
    6448:	eb 01       	movw	r28, r22
    644a:	fc 01       	movw	r30, r24
    644c:	40 80       	ld	r4, Z
    644e:	51 80       	ldd	r5, Z+1	; 0x01
    6450:	62 80       	ldd	r6, Z+2	; 0x02
    6452:	73 80       	ldd	r7, Z+3	; 0x03
    6454:	88 80       	ld	r8, Y
    6456:	99 80       	ldd	r9, Y+1	; 0x01
    6458:	aa 80       	ldd	r10, Y+2	; 0x02
    645a:	bb 80       	ldd	r11, Y+3	; 0x03
    645c:	41 14       	cp	r4, r1
    645e:	51 04       	cpc	r5, r1
    6460:	61 04       	cpc	r6, r1
    6462:	71 04       	cpc	r7, r1
    6464:	e1 f1       	breq	.+120    	; 0x64de <_Z13reduce_by_gcdPmS_+0xb8>
    6466:	81 14       	cp	r8, r1
    6468:	91 04       	cpc	r9, r1
    646a:	a1 04       	cpc	r10, r1
    646c:	b1 04       	cpc	r11, r1
    646e:	b9 f1       	breq	.+110    	; 0x64de <_Z13reduce_by_gcdPmS_+0xb8>
    6470:	c3 01       	movw	r24, r6
    6472:	b2 01       	movw	r22, r4
    6474:	a5 01       	movw	r20, r10
    6476:	94 01       	movw	r18, r8
    6478:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    647c:	6b 01       	movw	r12, r22
    647e:	7c 01       	movw	r14, r24
    6480:	c1 14       	cp	r12, r1
    6482:	d1 04       	cpc	r13, r1
    6484:	e1 04       	cpc	r14, r1
    6486:	f1 04       	cpc	r15, r1
    6488:	69 f0       	breq	.+26     	; 0x64a4 <_Z13reduce_by_gcdPmS_+0x7e>
    648a:	c5 01       	movw	r24, r10
    648c:	b4 01       	movw	r22, r8
    648e:	a7 01       	movw	r20, r14
    6490:	96 01       	movw	r18, r12
    6492:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    6496:	46 01       	movw	r8, r12
    6498:	57 01       	movw	r10, r14
    649a:	c6 2e       	mov	r12, r22
    649c:	d7 2e       	mov	r13, r23
    649e:	e8 2e       	mov	r14, r24
    64a0:	f9 2e       	mov	r15, r25
    64a2:	ee cf       	rjmp	.-36     	; 0x6480 <_Z13reduce_by_gcdPmS_+0x5a>
    64a4:	f2 e0       	ldi	r31, 0x02	; 2
    64a6:	8f 16       	cp	r8, r31
    64a8:	91 04       	cpc	r9, r1
    64aa:	a1 04       	cpc	r10, r1
    64ac:	b1 04       	cpc	r11, r1
    64ae:	b8 f0       	brcs	.+46     	; 0x64de <_Z13reduce_by_gcdPmS_+0xb8>
    64b0:	c3 01       	movw	r24, r6
    64b2:	b2 01       	movw	r22, r4
    64b4:	a5 01       	movw	r20, r10
    64b6:	94 01       	movw	r18, r8
    64b8:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    64bc:	f8 01       	movw	r30, r16
    64be:	20 83       	st	Z, r18
    64c0:	31 83       	std	Z+1, r19	; 0x01
    64c2:	42 83       	std	Z+2, r20	; 0x02
    64c4:	53 83       	std	Z+3, r21	; 0x03
    64c6:	68 81       	ld	r22, Y
    64c8:	79 81       	ldd	r23, Y+1	; 0x01
    64ca:	8a 81       	ldd	r24, Y+2	; 0x02
    64cc:	9b 81       	ldd	r25, Y+3	; 0x03
    64ce:	a5 01       	movw	r20, r10
    64d0:	94 01       	movw	r18, r8
    64d2:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    64d6:	28 83       	st	Y, r18
    64d8:	39 83       	std	Y+1, r19	; 0x01
    64da:	4a 83       	std	Y+2, r20	; 0x02
    64dc:	5b 83       	std	Y+3, r21	; 0x03
    64de:	df 91       	pop	r29
    64e0:	cf 91       	pop	r28
    64e2:	1f 91       	pop	r17
    64e4:	0f 91       	pop	r16
    64e6:	ff 90       	pop	r15
    64e8:	ef 90       	pop	r14
    64ea:	df 90       	pop	r13
    64ec:	cf 90       	pop	r12
    64ee:	bf 90       	pop	r11
    64f0:	af 90       	pop	r10
    64f2:	9f 90       	pop	r9
    64f4:	8f 90       	pop	r8
    64f6:	7f 90       	pop	r7
    64f8:	6f 90       	pop	r6
    64fa:	5f 90       	pop	r5
    64fc:	4f 90       	pop	r4
    64fe:	08 95       	ret

00006500 <_Z8pll_calcmP13u_si5351_regs>:
    6500:	4f 92       	push	r4
    6502:	5f 92       	push	r5
    6504:	6f 92       	push	r6
    6506:	7f 92       	push	r7
    6508:	8f 92       	push	r8
    650a:	9f 92       	push	r9
    650c:	af 92       	push	r10
    650e:	bf 92       	push	r11
    6510:	cf 92       	push	r12
    6512:	df 92       	push	r13
    6514:	ef 92       	push	r14
    6516:	ff 92       	push	r15
    6518:	0f 93       	push	r16
    651a:	1f 93       	push	r17
    651c:	cf 93       	push	r28
    651e:	df 93       	push	r29
    6520:	cd b7       	in	r28, 0x3d	; 61
    6522:	de b7       	in	r29, 0x3e	; 62
    6524:	28 97       	sbiw	r28, 0x08	; 8
    6526:	cd bf       	out	0x3d, r28	; 61
    6528:	de bf       	out	0x3e, r29	; 62
    652a:	8a 01       	movw	r16, r20
    652c:	80 90 28 40 	lds	r8, 0x4028	; 0x804028 <_ZL9xtal_freq>
    6530:	90 90 29 40 	lds	r9, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    6534:	a0 90 2a 40 	lds	r10, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    6538:	b0 90 2b 40 	lds	r11, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    653c:	a5 01       	movw	r20, r10
    653e:	94 01       	movw	r18, r8
    6540:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    6544:	69 01       	movw	r12, r18
    6546:	7a 01       	movw	r14, r20
    6548:	69 83       	std	Y+1, r22	; 0x01
    654a:	7a 83       	std	Y+2, r23	; 0x02
    654c:	8b 83       	std	Y+3, r24	; 0x03
    654e:	9c 83       	std	Y+4, r25	; 0x04
    6550:	8d 82       	std	Y+5, r8	; 0x05
    6552:	9e 82       	std	Y+6, r9	; 0x06
    6554:	af 82       	std	Y+7, r10	; 0x07
    6556:	b8 86       	std	Y+8, r11	; 0x08
    6558:	be 01       	movw	r22, r28
    655a:	6b 5f       	subi	r22, 0xFB	; 251
    655c:	7f 4f       	sbci	r23, 0xFF	; 255
    655e:	ce 01       	movw	r24, r28
    6560:	01 96       	adiw	r24, 0x01	; 1
    6562:	0e 94 13 32 	call	0x6426	; 0x6426 <_Z13reduce_by_gcdPmS_>
    6566:	89 80       	ldd	r8, Y+1	; 0x01
    6568:	9a 80       	ldd	r9, Y+2	; 0x02
    656a:	ab 80       	ldd	r10, Y+3	; 0x03
    656c:	bc 80       	ldd	r11, Y+4	; 0x04
    656e:	88 0c       	add	r8, r8
    6570:	99 1c       	adc	r9, r9
    6572:	aa 1c       	adc	r10, r10
    6574:	bb 1c       	adc	r11, r11
    6576:	88 0c       	add	r8, r8
    6578:	99 1c       	adc	r9, r9
    657a:	aa 1c       	adc	r10, r10
    657c:	bb 1c       	adc	r11, r11
    657e:	88 0c       	add	r8, r8
    6580:	99 1c       	adc	r9, r9
    6582:	aa 1c       	adc	r10, r10
    6584:	bb 1c       	adc	r11, r11
    6586:	88 0c       	add	r8, r8
    6588:	99 1c       	adc	r9, r9
    658a:	aa 1c       	adc	r10, r10
    658c:	bb 1c       	adc	r11, r11
    658e:	88 0c       	add	r8, r8
    6590:	99 1c       	adc	r9, r9
    6592:	aa 1c       	adc	r10, r10
    6594:	bb 1c       	adc	r11, r11
    6596:	88 0c       	add	r8, r8
    6598:	99 1c       	adc	r9, r9
    659a:	aa 1c       	adc	r10, r10
    659c:	bb 1c       	adc	r11, r11
    659e:	88 0c       	add	r8, r8
    65a0:	99 1c       	adc	r9, r9
    65a2:	aa 1c       	adc	r10, r10
    65a4:	bb 1c       	adc	r11, r11
    65a6:	4d 80       	ldd	r4, Y+5	; 0x05
    65a8:	5e 80       	ldd	r5, Y+6	; 0x06
    65aa:	6f 80       	ldd	r6, Y+7	; 0x07
    65ac:	78 84       	ldd	r7, Y+8	; 0x08
    65ae:	c5 01       	movw	r24, r10
    65b0:	b4 01       	movw	r22, r8
    65b2:	a3 01       	movw	r20, r6
    65b4:	92 01       	movw	r18, r4
    65b6:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    65ba:	cc 0c       	add	r12, r12
    65bc:	dd 1c       	adc	r13, r13
    65be:	ee 1c       	adc	r14, r14
    65c0:	ff 1c       	adc	r15, r15
    65c2:	cc 0c       	add	r12, r12
    65c4:	dd 1c       	adc	r13, r13
    65c6:	ee 1c       	adc	r14, r14
    65c8:	ff 1c       	adc	r15, r15
    65ca:	cc 0c       	add	r12, r12
    65cc:	dd 1c       	adc	r13, r13
    65ce:	ee 1c       	adc	r14, r14
    65d0:	ff 1c       	adc	r15, r15
    65d2:	cc 0c       	add	r12, r12
    65d4:	dd 1c       	adc	r13, r13
    65d6:	ee 1c       	adc	r14, r14
    65d8:	ff 1c       	adc	r15, r15
    65da:	cc 0c       	add	r12, r12
    65dc:	dd 1c       	adc	r13, r13
    65de:	ee 1c       	adc	r14, r14
    65e0:	ff 1c       	adc	r15, r15
    65e2:	cc 0c       	add	r12, r12
    65e4:	dd 1c       	adc	r13, r13
    65e6:	ee 1c       	adc	r14, r14
    65e8:	ff 1c       	adc	r15, r15
    65ea:	cc 0c       	add	r12, r12
    65ec:	dd 1c       	adc	r13, r13
    65ee:	ee 1c       	adc	r14, r14
    65f0:	ff 1c       	adc	r15, r15
    65f2:	c2 0e       	add	r12, r18
    65f4:	d3 1e       	adc	r13, r19
    65f6:	e4 1e       	adc	r14, r20
    65f8:	f5 1e       	adc	r15, r21
    65fa:	82 e0       	ldi	r24, 0x02	; 2
    65fc:	d8 1a       	sub	r13, r24
    65fe:	e1 08       	sbc	r14, r1
    6600:	f1 08       	sbc	r15, r1
    6602:	f8 01       	movw	r30, r16
    6604:	c0 82       	st	Z, r12
    6606:	d1 82       	std	Z+1, r13	; 0x01
    6608:	e2 82       	std	Z+2, r14	; 0x02
    660a:	f3 82       	std	Z+3, r15	; 0x03
    660c:	c3 01       	movw	r24, r6
    660e:	b2 01       	movw	r22, r4
    6610:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <__mulsi3>
    6614:	86 1a       	sub	r8, r22
    6616:	97 0a       	sbc	r9, r23
    6618:	a8 0a       	sbc	r10, r24
    661a:	b9 0a       	sbc	r11, r25
    661c:	84 82       	std	Z+4, r8	; 0x04
    661e:	95 82       	std	Z+5, r9	; 0x05
    6620:	a6 82       	std	Z+6, r10	; 0x06
    6622:	b7 82       	std	Z+7, r11	; 0x07
    6624:	40 86       	std	Z+8, r4	; 0x08
    6626:	51 86       	std	Z+9, r5	; 0x09
    6628:	62 86       	std	Z+10, r6	; 0x0a
    662a:	73 86       	std	Z+11, r7	; 0x0b
    662c:	80 e0       	ldi	r24, 0x00	; 0
    662e:	28 96       	adiw	r28, 0x08	; 8
    6630:	cd bf       	out	0x3d, r28	; 61
    6632:	de bf       	out	0x3e, r29	; 62
    6634:	df 91       	pop	r29
    6636:	cf 91       	pop	r28
    6638:	1f 91       	pop	r17
    663a:	0f 91       	pop	r16
    663c:	ff 90       	pop	r15
    663e:	ef 90       	pop	r14
    6640:	df 90       	pop	r13
    6642:	cf 90       	pop	r12
    6644:	bf 90       	pop	r11
    6646:	af 90       	pop	r10
    6648:	9f 90       	pop	r9
    664a:	8f 90       	pop	r8
    664c:	7f 90       	pop	r7
    664e:	6f 90       	pop	r6
    6650:	5f 90       	pop	r5
    6652:	4f 90       	pop	r4
    6654:	08 95       	ret

00006656 <_Z15multisynth_calcmP13u_si5351_regsPhS1_>:
    6656:	2f 92       	push	r2
    6658:	3f 92       	push	r3
    665a:	4f 92       	push	r4
    665c:	5f 92       	push	r5
    665e:	6f 92       	push	r6
    6660:	7f 92       	push	r7
    6662:	8f 92       	push	r8
    6664:	9f 92       	push	r9
    6666:	af 92       	push	r10
    6668:	bf 92       	push	r11
    666a:	cf 92       	push	r12
    666c:	df 92       	push	r13
    666e:	ef 92       	push	r14
    6670:	ff 92       	push	r15
    6672:	0f 93       	push	r16
    6674:	1f 93       	push	r17
    6676:	cf 93       	push	r28
    6678:	df 93       	push	r29
    667a:	cd b7       	in	r28, 0x3d	; 61
    667c:	de b7       	in	r29, 0x3e	; 62
    667e:	25 97       	sbiw	r28, 0x05	; 5
    6680:	cd bf       	out	0x3d, r28	; 61
    6682:	de bf       	out	0x3e, r29	; 62
    6684:	2b 01       	movw	r4, r22
    6686:	3c 01       	movw	r6, r24
    6688:	4a 83       	std	Y+2, r20	; 0x02
    668a:	5b 83       	std	Y+3, r21	; 0x03
    668c:	18 01       	movw	r2, r16
    668e:	81 e0       	ldi	r24, 0x01	; 1
    6690:	f9 01       	movw	r30, r18
    6692:	80 83       	st	Z, r24
    6694:	f0 e8       	ldi	r31, 0x80	; 128
    6696:	4f 16       	cp	r4, r31
    6698:	f1 ed       	ldi	r31, 0xD1	; 209
    669a:	5f 06       	cpc	r5, r31
    669c:	f0 ef       	ldi	r31, 0xF0	; 240
    669e:	6f 06       	cpc	r6, r31
    66a0:	f8 e0       	ldi	r31, 0x08	; 8
    66a2:	7f 06       	cpc	r7, r31
    66a4:	d0 f0       	brcs	.+52     	; 0x66da <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x84>
    66a6:	c3 01       	movw	r24, r6
    66a8:	b2 01       	movw	r22, r4
    66aa:	66 0f       	add	r22, r22
    66ac:	77 1f       	adc	r23, r23
    66ae:	88 1f       	adc	r24, r24
    66b0:	99 1f       	adc	r25, r25
    66b2:	66 0f       	add	r22, r22
    66b4:	77 1f       	adc	r23, r23
    66b6:	88 1f       	adc	r24, r24
    66b8:	99 1f       	adc	r25, r25
    66ba:	c1 2c       	mov	r12, r1
    66bc:	d1 2c       	mov	r13, r1
    66be:	76 01       	movw	r14, r12
    66c0:	68 94       	set
    66c2:	c2 f8       	bld	r12, 2
    66c4:	48 c0       	rjmp	.+144    	; 0x6756 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x100>
    66c6:	21 e0       	ldi	r18, 0x01	; 1
    66c8:	2d 83       	std	Y+5, r18	; 0x05
    66ca:	0d c0       	rjmp	.+26     	; 0x66e6 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x90>
    66cc:	69 01       	movw	r12, r18
    66ce:	7a 01       	movw	r14, r20
    66d0:	31 e0       	ldi	r19, 0x01	; 1
    66d2:	39 83       	std	Y+1, r19	; 0x01
    66d4:	81 e0       	ldi	r24, 0x01	; 1
    66d6:	8d 83       	std	Y+5, r24	; 0x05
    66d8:	06 c0       	rjmp	.+12     	; 0x66e6 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x90>
    66da:	1c 82       	std	Y+4, r1	; 0x04
    66dc:	19 82       	std	Y+1, r1	; 0x01
    66de:	1d 82       	std	Y+5, r1	; 0x05
    66e0:	c1 2c       	mov	r12, r1
    66e2:	d1 2c       	mov	r13, r1
    66e4:	76 01       	movw	r14, r12
    66e6:	8d 80       	ldd	r8, Y+5	; 0x05
    66e8:	81 10       	cpse	r8, r1
    66ea:	28 c0       	rjmp	.+80     	; 0x673c <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0xe6>
    66ec:	9c 80       	ldd	r9, Y+4	; 0x04
    66ee:	a9 2d       	mov	r26, r9
    66f0:	b0 e0       	ldi	r27, 0x00	; 0
    66f2:	a3 01       	movw	r20, r6
    66f4:	92 01       	movw	r18, r4
    66f6:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__muluhisi3>
    66fa:	00 e0       	ldi	r16, 0x00	; 0
    66fc:	19 ee       	ldi	r17, 0xE9	; 233
    66fe:	24 ea       	ldi	r18, 0xA4	; 164
    6700:	35 e3       	ldi	r19, 0x35	; 53
    6702:	48 01       	movw	r8, r16
    6704:	59 01       	movw	r10, r18
    6706:	86 1a       	sub	r8, r22
    6708:	97 0a       	sbc	r9, r23
    670a:	a8 0a       	sbc	r10, r24
    670c:	b9 0a       	sbc	r11, r25
    670e:	c5 01       	movw	r24, r10
    6710:	b4 01       	movw	r22, r8
    6712:	2c 81       	ldd	r18, Y+4	; 0x04
    6714:	2e 5f       	subi	r18, 0xFE	; 254
    6716:	2c 83       	std	Y+4, r18	; 0x04
    6718:	81 14       	cp	r8, r1
    671a:	36 e4       	ldi	r19, 0x46	; 70
    671c:	93 06       	cpc	r9, r19
    671e:	33 ec       	ldi	r19, 0xC3	; 195
    6720:	a3 06       	cpc	r10, r19
    6722:	33 e2       	ldi	r19, 0x23	; 35
    6724:	b3 06       	cpc	r11, r19
    6726:	78 f2       	brcs	.-98     	; 0x66c6 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x70>
    6728:	a3 01       	movw	r20, r6
    672a:	92 01       	movw	r18, r4
    672c:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    6730:	24 30       	cpi	r18, 0x04	; 4
    6732:	31 05       	cpc	r19, r1
    6734:	41 05       	cpc	r20, r1
    6736:	51 05       	cpc	r21, r1
    6738:	48 f6       	brcc	.-110    	; 0x66cc <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x76>
    673a:	d5 cf       	rjmp	.-86     	; 0x66e6 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x90>
    673c:	89 80       	ldd	r8, Y+1	; 0x01
    673e:	88 20       	and	r8, r8
    6740:	39 f0       	breq	.+14     	; 0x6750 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0xfa>
    6742:	a7 01       	movw	r20, r14
    6744:	96 01       	movw	r18, r12
    6746:	c3 01       	movw	r24, r6
    6748:	b2 01       	movw	r22, r4
    674a:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <__mulsi3>
    674e:	03 c0       	rjmp	.+6      	; 0x6756 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x100>
    6750:	60 e0       	ldi	r22, 0x00	; 0
    6752:	70 e0       	ldi	r23, 0x00	; 0
    6754:	cb 01       	movw	r24, r22
    6756:	21 e0       	ldi	r18, 0x01	; 1
    6758:	34 e0       	ldi	r19, 0x04	; 4
    675a:	c3 16       	cp	r12, r19
    675c:	d1 04       	cpc	r13, r1
    675e:	e1 04       	cpc	r14, r1
    6760:	f1 04       	cpc	r15, r1
    6762:	09 f0       	breq	.+2      	; 0x6766 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x110>
    6764:	20 e0       	ldi	r18, 0x00	; 0
    6766:	f1 01       	movw	r30, r2
    6768:	20 83       	st	Z, r18
    676a:	cc 0c       	add	r12, r12
    676c:	dd 1c       	adc	r13, r13
    676e:	ee 1c       	adc	r14, r14
    6770:	ff 1c       	adc	r15, r15
    6772:	cc 0c       	add	r12, r12
    6774:	dd 1c       	adc	r13, r13
    6776:	ee 1c       	adc	r14, r14
    6778:	ff 1c       	adc	r15, r15
    677a:	cc 0c       	add	r12, r12
    677c:	dd 1c       	adc	r13, r13
    677e:	ee 1c       	adc	r14, r14
    6780:	ff 1c       	adc	r15, r15
    6782:	cc 0c       	add	r12, r12
    6784:	dd 1c       	adc	r13, r13
    6786:	ee 1c       	adc	r14, r14
    6788:	ff 1c       	adc	r15, r15
    678a:	cc 0c       	add	r12, r12
    678c:	dd 1c       	adc	r13, r13
    678e:	ee 1c       	adc	r14, r14
    6790:	ff 1c       	adc	r15, r15
    6792:	cc 0c       	add	r12, r12
    6794:	dd 1c       	adc	r13, r13
    6796:	ee 1c       	adc	r14, r14
    6798:	ff 1c       	adc	r15, r15
    679a:	cc 0c       	add	r12, r12
    679c:	dd 1c       	adc	r13, r13
    679e:	ee 1c       	adc	r14, r14
    67a0:	ff 1c       	adc	r15, r15
    67a2:	f2 e0       	ldi	r31, 0x02	; 2
    67a4:	df 1a       	sub	r13, r31
    67a6:	e1 08       	sbc	r14, r1
    67a8:	f1 08       	sbc	r15, r1
    67aa:	ea 81       	ldd	r30, Y+2	; 0x02
    67ac:	fb 81       	ldd	r31, Y+3	; 0x03
    67ae:	c0 82       	st	Z, r12
    67b0:	d1 82       	std	Z+1, r13	; 0x01
    67b2:	e2 82       	std	Z+2, r14	; 0x02
    67b4:	f3 82       	std	Z+3, r15	; 0x03
    67b6:	14 82       	std	Z+4, r1	; 0x04
    67b8:	15 82       	std	Z+5, r1	; 0x05
    67ba:	16 82       	std	Z+6, r1	; 0x06
    67bc:	17 82       	std	Z+7, r1	; 0x07
    67be:	01 e0       	ldi	r16, 0x01	; 1
    67c0:	10 e0       	ldi	r17, 0x00	; 0
    67c2:	20 e0       	ldi	r18, 0x00	; 0
    67c4:	30 e0       	ldi	r19, 0x00	; 0
    67c6:	00 87       	std	Z+8, r16	; 0x08
    67c8:	11 87       	std	Z+9, r17	; 0x09
    67ca:	22 87       	std	Z+10, r18	; 0x0a
    67cc:	33 87       	std	Z+11, r19	; 0x0b
    67ce:	25 96       	adiw	r28, 0x05	; 5
    67d0:	cd bf       	out	0x3d, r28	; 61
    67d2:	de bf       	out	0x3e, r29	; 62
    67d4:	df 91       	pop	r29
    67d6:	cf 91       	pop	r28
    67d8:	1f 91       	pop	r17
    67da:	0f 91       	pop	r16
    67dc:	ff 90       	pop	r15
    67de:	ef 90       	pop	r14
    67e0:	df 90       	pop	r13
    67e2:	cf 90       	pop	r12
    67e4:	bf 90       	pop	r11
    67e6:	af 90       	pop	r10
    67e8:	9f 90       	pop	r9
    67ea:	8f 90       	pop	r8
    67ec:	7f 90       	pop	r7
    67ee:	6f 90       	pop	r6
    67f0:	5f 90       	pop	r5
    67f2:	4f 90       	pop	r4
    67f4:	3f 90       	pop	r3
    67f6:	2f 90       	pop	r2
    67f8:	08 95       	ret

000067fa <_Z19multisynth_estimatemP13u_si5351_regsPhS1_>:
    67fa:	2f 92       	push	r2
    67fc:	3f 92       	push	r3
    67fe:	4f 92       	push	r4
    6800:	5f 92       	push	r5
    6802:	6f 92       	push	r6
    6804:	7f 92       	push	r7
    6806:	8f 92       	push	r8
    6808:	9f 92       	push	r9
    680a:	af 92       	push	r10
    680c:	bf 92       	push	r11
    680e:	cf 92       	push	r12
    6810:	df 92       	push	r13
    6812:	ef 92       	push	r14
    6814:	ff 92       	push	r15
    6816:	0f 93       	push	r16
    6818:	1f 93       	push	r17
    681a:	cf 93       	push	r28
    681c:	df 93       	push	r29
    681e:	cd b7       	in	r28, 0x3d	; 61
    6820:	de b7       	in	r29, 0x3e	; 62
    6822:	62 97       	sbiw	r28, 0x12	; 18
    6824:	cd bf       	out	0x3d, r28	; 61
    6826:	de bf       	out	0x3e, r29	; 62
    6828:	4b 01       	movw	r8, r22
    682a:	5c 01       	movw	r10, r24
    682c:	1a 01       	movw	r2, r20
    682e:	29 8b       	std	Y+17, r18	; 0x11
    6830:	3a 8b       	std	Y+18, r19	; 0x12
    6832:	60 91 4d 48 	lds	r22, 0x484D	; 0x80484d <_ZL8freqVCOB>
    6836:	70 91 4e 48 	lds	r23, 0x484E	; 0x80484e <_ZL8freqVCOB+0x1>
    683a:	80 91 4f 48 	lds	r24, 0x484F	; 0x80484f <_ZL8freqVCOB+0x2>
    683e:	90 91 50 48 	lds	r25, 0x4850	; 0x804850 <_ZL8freqVCOB+0x3>
    6842:	a5 01       	movw	r20, r10
    6844:	94 01       	movw	r18, r8
    6846:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    684a:	29 87       	std	Y+9, r18	; 0x09
    684c:	3a 87       	std	Y+10, r19	; 0x0a
    684e:	4b 87       	std	Y+11, r20	; 0x0b
    6850:	5c 87       	std	Y+12, r21	; 0x0c
    6852:	69 01       	movw	r12, r18
    6854:	7a 01       	movw	r14, r20
    6856:	69 83       	std	Y+1, r22	; 0x01
    6858:	7a 83       	std	Y+2, r23	; 0x02
    685a:	8b 83       	std	Y+3, r24	; 0x03
    685c:	9c 83       	std	Y+4, r25	; 0x04
    685e:	8d 82       	std	Y+5, r8	; 0x05
    6860:	9e 82       	std	Y+6, r9	; 0x06
    6862:	af 82       	std	Y+7, r10	; 0x07
    6864:	b8 86       	std	Y+8, r11	; 0x08
    6866:	be 01       	movw	r22, r28
    6868:	6b 5f       	subi	r22, 0xFB	; 251
    686a:	7f 4f       	sbci	r23, 0xFF	; 255
    686c:	ce 01       	movw	r24, r28
    686e:	01 96       	adiw	r24, 0x01	; 1
    6870:	0e 94 13 32 	call	0x6426	; 0x6426 <_Z13reduce_by_gcdPmS_>
    6874:	80 91 4d 48 	lds	r24, 0x484D	; 0x80484d <_ZL8freqVCOB>
    6878:	90 91 4e 48 	lds	r25, 0x484E	; 0x80484e <_ZL8freqVCOB+0x1>
    687c:	a0 91 4f 48 	lds	r26, 0x484F	; 0x80484f <_ZL8freqVCOB+0x2>
    6880:	b0 91 50 48 	lds	r27, 0x4850	; 0x804850 <_ZL8freqVCOB+0x3>
    6884:	8d 87       	std	Y+13, r24	; 0x0d
    6886:	9e 87       	std	Y+14, r25	; 0x0e
    6888:	af 87       	std	Y+15, r26	; 0x0f
    688a:	b8 8b       	std	Y+16, r27	; 0x10
    688c:	4d 80       	ldd	r4, Y+5	; 0x05
    688e:	5e 80       	ldd	r5, Y+6	; 0x06
    6890:	6f 80       	ldd	r6, Y+7	; 0x07
    6892:	78 84       	ldd	r7, Y+8	; 0x08
    6894:	29 85       	ldd	r18, Y+9	; 0x09
    6896:	3a 85       	ldd	r19, Y+10	; 0x0a
    6898:	4b 85       	ldd	r20, Y+11	; 0x0b
    689a:	5c 85       	ldd	r21, Y+12	; 0x0c
    689c:	c3 01       	movw	r24, r6
    689e:	b2 01       	movw	r22, r4
    68a0:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <__mulsi3>
    68a4:	89 80       	ldd	r8, Y+1	; 0x01
    68a6:	9a 80       	ldd	r9, Y+2	; 0x02
    68a8:	ab 80       	ldd	r10, Y+3	; 0x03
    68aa:	bc 80       	ldd	r11, Y+4	; 0x04
    68ac:	9b 01       	movw	r18, r22
    68ae:	ac 01       	movw	r20, r24
    68b0:	28 0d       	add	r18, r8
    68b2:	39 1d       	adc	r19, r9
    68b4:	4a 1d       	adc	r20, r10
    68b6:	5b 1d       	adc	r21, r11
    68b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    68ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    68bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    68be:	98 89       	ldd	r25, Y+16	; 0x10
    68c0:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    68c4:	ca 01       	movw	r24, r20
    68c6:	b9 01       	movw	r22, r18
    68c8:	a3 01       	movw	r20, r6
    68ca:	92 01       	movw	r18, r4
    68cc:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <__mulsi3>
    68d0:	6d 87       	std	Y+13, r22	; 0x0d
    68d2:	7e 87       	std	Y+14, r23	; 0x0e
    68d4:	8f 87       	std	Y+15, r24	; 0x0f
    68d6:	98 8b       	std	Y+16, r25	; 0x10
    68d8:	89 28       	or	r8, r9
    68da:	8a 28       	or	r8, r10
    68dc:	8b 28       	or	r8, r11
    68de:	29 f4       	brne	.+10     	; 0x68ea <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf0>
    68e0:	99 85       	ldd	r25, Y+9	; 0x09
    68e2:	90 ff       	sbrs	r25, 0
    68e4:	04 c0       	rjmp	.+8      	; 0x68ee <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf4>
    68e6:	80 e0       	ldi	r24, 0x00	; 0
    68e8:	03 c0       	rjmp	.+6      	; 0x68f0 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf6>
    68ea:	80 e0       	ldi	r24, 0x00	; 0
    68ec:	01 c0       	rjmp	.+2      	; 0x68f0 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf6>
    68ee:	81 e0       	ldi	r24, 0x01	; 1
    68f0:	a9 89       	ldd	r26, Y+17	; 0x11
    68f2:	ba 89       	ldd	r27, Y+18	; 0x12
    68f4:	8c 93       	st	X, r24
    68f6:	b4 e0       	ldi	r27, 0x04	; 4
    68f8:	cb 16       	cp	r12, r27
    68fa:	d1 04       	cpc	r13, r1
    68fc:	e1 04       	cpc	r14, r1
    68fe:	f1 04       	cpc	r15, r1
    6900:	21 f4       	brne	.+8      	; 0x690a <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x110>
    6902:	81 11       	cpse	r24, r1
    6904:	04 c0       	rjmp	.+8      	; 0x690e <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x114>
    6906:	80 e0       	ldi	r24, 0x00	; 0
    6908:	03 c0       	rjmp	.+6      	; 0x6910 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x116>
    690a:	80 e0       	ldi	r24, 0x00	; 0
    690c:	01 c0       	rjmp	.+2      	; 0x6910 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x116>
    690e:	81 e0       	ldi	r24, 0x01	; 1
    6910:	f8 01       	movw	r30, r16
    6912:	80 83       	st	Z, r24
    6914:	88 23       	and	r24, r24
    6916:	a1 f0       	breq	.+40     	; 0x6940 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x146>
    6918:	d1 01       	movw	r26, r2
    691a:	1d 92       	st	X+, r1
    691c:	1d 92       	st	X+, r1
    691e:	1d 92       	st	X+, r1
    6920:	1c 92       	st	X, r1
    6922:	13 97       	sbiw	r26, 0x03	; 3
    6924:	f1 01       	movw	r30, r2
    6926:	14 82       	std	Z+4, r1	; 0x04
    6928:	15 82       	std	Z+5, r1	; 0x05
    692a:	16 82       	std	Z+6, r1	; 0x06
    692c:	17 82       	std	Z+7, r1	; 0x07
    692e:	81 e0       	ldi	r24, 0x01	; 1
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	a0 e0       	ldi	r26, 0x00	; 0
    6934:	b0 e0       	ldi	r27, 0x00	; 0
    6936:	80 87       	std	Z+8, r24	; 0x08
    6938:	91 87       	std	Z+9, r25	; 0x09
    693a:	a2 87       	std	Z+10, r26	; 0x0a
    693c:	b3 87       	std	Z+11, r27	; 0x0b
    693e:	69 c0       	rjmp	.+210    	; 0x6a12 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x218>
    6940:	89 80       	ldd	r8, Y+1	; 0x01
    6942:	9a 80       	ldd	r9, Y+2	; 0x02
    6944:	ab 80       	ldd	r10, Y+3	; 0x03
    6946:	bc 80       	ldd	r11, Y+4	; 0x04
    6948:	88 0c       	add	r8, r8
    694a:	99 1c       	adc	r9, r9
    694c:	aa 1c       	adc	r10, r10
    694e:	bb 1c       	adc	r11, r11
    6950:	88 0c       	add	r8, r8
    6952:	99 1c       	adc	r9, r9
    6954:	aa 1c       	adc	r10, r10
    6956:	bb 1c       	adc	r11, r11
    6958:	88 0c       	add	r8, r8
    695a:	99 1c       	adc	r9, r9
    695c:	aa 1c       	adc	r10, r10
    695e:	bb 1c       	adc	r11, r11
    6960:	88 0c       	add	r8, r8
    6962:	99 1c       	adc	r9, r9
    6964:	aa 1c       	adc	r10, r10
    6966:	bb 1c       	adc	r11, r11
    6968:	88 0c       	add	r8, r8
    696a:	99 1c       	adc	r9, r9
    696c:	aa 1c       	adc	r10, r10
    696e:	bb 1c       	adc	r11, r11
    6970:	88 0c       	add	r8, r8
    6972:	99 1c       	adc	r9, r9
    6974:	aa 1c       	adc	r10, r10
    6976:	bb 1c       	adc	r11, r11
    6978:	88 0c       	add	r8, r8
    697a:	99 1c       	adc	r9, r9
    697c:	aa 1c       	adc	r10, r10
    697e:	bb 1c       	adc	r11, r11
    6980:	4d 80       	ldd	r4, Y+5	; 0x05
    6982:	5e 80       	ldd	r5, Y+6	; 0x06
    6984:	6f 80       	ldd	r6, Y+7	; 0x07
    6986:	78 84       	ldd	r7, Y+8	; 0x08
    6988:	c5 01       	movw	r24, r10
    698a:	b4 01       	movw	r22, r8
    698c:	a3 01       	movw	r20, r6
    698e:	92 01       	movw	r18, r4
    6990:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    6994:	c9 84       	ldd	r12, Y+9	; 0x09
    6996:	da 84       	ldd	r13, Y+10	; 0x0a
    6998:	eb 84       	ldd	r14, Y+11	; 0x0b
    699a:	fc 84       	ldd	r15, Y+12	; 0x0c
    699c:	cc 0c       	add	r12, r12
    699e:	dd 1c       	adc	r13, r13
    69a0:	ee 1c       	adc	r14, r14
    69a2:	ff 1c       	adc	r15, r15
    69a4:	cc 0c       	add	r12, r12
    69a6:	dd 1c       	adc	r13, r13
    69a8:	ee 1c       	adc	r14, r14
    69aa:	ff 1c       	adc	r15, r15
    69ac:	cc 0c       	add	r12, r12
    69ae:	dd 1c       	adc	r13, r13
    69b0:	ee 1c       	adc	r14, r14
    69b2:	ff 1c       	adc	r15, r15
    69b4:	cc 0c       	add	r12, r12
    69b6:	dd 1c       	adc	r13, r13
    69b8:	ee 1c       	adc	r14, r14
    69ba:	ff 1c       	adc	r15, r15
    69bc:	cc 0c       	add	r12, r12
    69be:	dd 1c       	adc	r13, r13
    69c0:	ee 1c       	adc	r14, r14
    69c2:	ff 1c       	adc	r15, r15
    69c4:	cc 0c       	add	r12, r12
    69c6:	dd 1c       	adc	r13, r13
    69c8:	ee 1c       	adc	r14, r14
    69ca:	ff 1c       	adc	r15, r15
    69cc:	cc 0c       	add	r12, r12
    69ce:	dd 1c       	adc	r13, r13
    69d0:	ee 1c       	adc	r14, r14
    69d2:	ff 1c       	adc	r15, r15
    69d4:	c2 0e       	add	r12, r18
    69d6:	d3 1e       	adc	r13, r19
    69d8:	e4 1e       	adc	r14, r20
    69da:	f5 1e       	adc	r15, r21
    69dc:	f2 e0       	ldi	r31, 0x02	; 2
    69de:	df 1a       	sub	r13, r31
    69e0:	e1 08       	sbc	r14, r1
    69e2:	f1 08       	sbc	r15, r1
    69e4:	d1 01       	movw	r26, r2
    69e6:	cd 92       	st	X+, r12
    69e8:	dd 92       	st	X+, r13
    69ea:	ed 92       	st	X+, r14
    69ec:	fc 92       	st	X, r15
    69ee:	13 97       	sbiw	r26, 0x03	; 3
    69f0:	c3 01       	movw	r24, r6
    69f2:	b2 01       	movw	r22, r4
    69f4:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <__mulsi3>
    69f8:	86 1a       	sub	r8, r22
    69fa:	97 0a       	sbc	r9, r23
    69fc:	a8 0a       	sbc	r10, r24
    69fe:	b9 0a       	sbc	r11, r25
    6a00:	f1 01       	movw	r30, r2
    6a02:	84 82       	std	Z+4, r8	; 0x04
    6a04:	95 82       	std	Z+5, r9	; 0x05
    6a06:	a6 82       	std	Z+6, r10	; 0x06
    6a08:	b7 82       	std	Z+7, r11	; 0x07
    6a0a:	40 86       	std	Z+8, r4	; 0x08
    6a0c:	51 86       	std	Z+9, r5	; 0x09
    6a0e:	62 86       	std	Z+10, r6	; 0x0a
    6a10:	73 86       	std	Z+11, r7	; 0x0b
    6a12:	6d 85       	ldd	r22, Y+13	; 0x0d
    6a14:	7e 85       	ldd	r23, Y+14	; 0x0e
    6a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a18:	98 89       	ldd	r25, Y+16	; 0x10
    6a1a:	62 96       	adiw	r28, 0x12	; 18
    6a1c:	cd bf       	out	0x3d, r28	; 61
    6a1e:	de bf       	out	0x3e, r29	; 62
    6a20:	df 91       	pop	r29
    6a22:	cf 91       	pop	r28
    6a24:	1f 91       	pop	r17
    6a26:	0f 91       	pop	r16
    6a28:	ff 90       	pop	r15
    6a2a:	ef 90       	pop	r14
    6a2c:	df 90       	pop	r13
    6a2e:	cf 90       	pop	r12
    6a30:	bf 90       	pop	r11
    6a32:	af 90       	pop	r10
    6a34:	9f 90       	pop	r9
    6a36:	8f 90       	pop	r8
    6a38:	7f 90       	pop	r7
    6a3a:	6f 90       	pop	r6
    6a3c:	5f 90       	pop	r5
    6a3e:	4f 90       	pop	r4
    6a40:	3f 90       	pop	r3
    6a42:	2f 90       	pop	r2
    6a44:	08 95       	ret

00006a46 <_Z17si5351_write_bulkhPhh>:
    6a46:	cf 93       	push	r28
    6a48:	c4 2f       	mov	r28, r20
    6a4a:	24 2f       	mov	r18, r20
    6a4c:	ab 01       	movw	r20, r22
    6a4e:	68 2f       	mov	r22, r24
    6a50:	80 ec       	ldi	r24, 0xC0	; 192
    6a52:	0e 94 2f 2b 	call	0x565e	; 0x565e <I2C_1_SendData>
    6a56:	91 e0       	ldi	r25, 0x01	; 1
    6a58:	c8 13       	cpse	r28, r24
    6a5a:	01 c0       	rjmp	.+2      	; 0x6a5e <_Z17si5351_write_bulkhPhh+0x18>
    6a5c:	90 e0       	ldi	r25, 0x00	; 0
    6a5e:	89 2f       	mov	r24, r25
    6a60:	cf 91       	pop	r28
    6a62:	08 95       	ret

00006a64 <_Z7set_pllm10si5351_pll>:
    6a64:	1f 93       	push	r17
    6a66:	cf 93       	push	r28
    6a68:	df 93       	push	r29
    6a6a:	cd b7       	in	r28, 0x3d	; 61
    6a6c:	de b7       	in	r29, 0x3e	; 62
    6a6e:	66 97       	sbiw	r28, 0x16	; 22
    6a70:	cd bf       	out	0x3d, r28	; 61
    6a72:	de bf       	out	0x3e, r29	; 62
    6a74:	14 2f       	mov	r17, r20
    6a76:	ae 01       	movw	r20, r28
    6a78:	4f 5f       	subi	r20, 0xFF	; 255
    6a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    6a7c:	0e 94 80 32 	call	0x6500	; 0x6500 <_Z8pll_calcmP13u_si5351_regs>
    6a80:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a82:	8d 87       	std	Y+13, r24	; 0x0d
    6a84:	89 85       	ldd	r24, Y+9	; 0x09
    6a86:	8e 87       	std	Y+14, r24	; 0x0e
    6a88:	8b 81       	ldd	r24, Y+3	; 0x03
    6a8a:	83 70       	andi	r24, 0x03	; 3
    6a8c:	8f 87       	std	Y+15, r24	; 0x0f
    6a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    6a90:	88 8b       	std	Y+16, r24	; 0x10
    6a92:	89 81       	ldd	r24, Y+1	; 0x01
    6a94:	89 8b       	std	Y+17, r24	; 0x11
    6a96:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a98:	8f 81       	ldd	r24, Y+7	; 0x07
    6a9a:	8f 70       	andi	r24, 0x0F	; 15
    6a9c:	20 e1       	ldi	r18, 0x10	; 16
    6a9e:	92 9f       	mul	r25, r18
    6aa0:	80 0d       	add	r24, r0
    6aa2:	11 24       	eor	r1, r1
    6aa4:	8a 8b       	std	Y+18, r24	; 0x12
    6aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    6aa8:	8b 8b       	std	Y+19, r24	; 0x13
    6aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    6aac:	8c 8b       	std	Y+20, r24	; 0x14
    6aae:	11 30       	cpi	r17, 0x01	; 1
    6ab0:	41 f4       	brne	.+16     	; 0x6ac2 <_Z7set_pllm10si5351_pll+0x5e>
    6ab2:	48 e0       	ldi	r20, 0x08	; 8
    6ab4:	be 01       	movw	r22, r28
    6ab6:	63 5f       	subi	r22, 0xF3	; 243
    6ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    6aba:	8a e1       	ldi	r24, 0x1A	; 26
    6abc:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6ac0:	07 c0       	rjmp	.+14     	; 0x6ad0 <_Z7set_pllm10si5351_pll+0x6c>
    6ac2:	48 e0       	ldi	r20, 0x08	; 8
    6ac4:	be 01       	movw	r22, r28
    6ac6:	63 5f       	subi	r22, 0xF3	; 243
    6ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    6aca:	82 e2       	ldi	r24, 0x22	; 34
    6acc:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6ad0:	66 96       	adiw	r28, 0x16	; 22
    6ad2:	cd bf       	out	0x3d, r28	; 61
    6ad4:	de bf       	out	0x3e, r29	; 62
    6ad6:	df 91       	pop	r29
    6ad8:	cf 91       	pop	r28
    6ada:	1f 91       	pop	r17
    6adc:	08 95       	ret

00006ade <_Z16si5351_read_bulkhPhh>:
	{
		return( I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes);
	}

	BOOL si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    6ade:	cf 93       	push	r28
    6ae0:	c4 2f       	mov	r28, r20
		return( I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes);
    6ae2:	24 2f       	mov	r18, r20
    6ae4:	ab 01       	movw	r20, r22
    6ae6:	68 2f       	mov	r22, r24
    6ae8:	80 ec       	ldi	r24, 0xC0	; 192
    6aea:	0e 94 6d 2b 	call	0x56da	; 0x56da <I2C_1_GetData>
    6aee:	91 e0       	ldi	r25, 0x01	; 1
    6af0:	c8 13       	cpse	r28, r24
    6af2:	01 c0       	rjmp	.+2      	; 0x6af6 <_Z16si5351_read_bulkhPhh+0x18>
    6af4:	90 e0       	ldi	r25, 0x00	; 0
	}
    6af6:	89 2f       	mov	r24, r25
    6af8:	cf 91       	pop	r28
    6afa:	08 95       	ret

00006afc <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	BOOL si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    6afc:	cf 92       	push	r12
    6afe:	df 92       	push	r13
    6b00:	ef 92       	push	r14
    6b02:	ff 92       	push	r15
    6b04:	1f 93       	push	r17
    6b06:	cf 93       	push	r28
    6b08:	df 93       	push	r29
    6b0a:	00 d0       	rcall	.+0      	; 0x6b0c <si5351_init+0x10>
    6b0c:	cd b7       	in	r28, 0x3d	; 61
    6b0e:	de b7       	in	r29, 0x3e	; 62
    6b10:	18 2f       	mov	r17, r24
    6b12:	6a 01       	movw	r12, r20
    6b14:	7b 01       	movw	r14, r22
//		static BOOL err = FALSE;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    6b16:	0e 94 13 2b 	call	0x5626	; 0x5626 <I2C_1_Init>
			uint8_t result_val = 0x00;
			BOOL result = FALSE;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    6b1a:	10 92 4d 48 	sts	0x484D, r1	; 0x80484d <_ZL8freqVCOB>
    6b1e:	10 92 4e 48 	sts	0x484E, r1	; 0x80484e <_ZL8freqVCOB+0x1>
    6b22:	10 92 4f 48 	sts	0x484F, r1	; 0x80484f <_ZL8freqVCOB+0x2>
    6b26:	10 92 50 48 	sts	0x4850, r1	; 0x804850 <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    6b2a:	80 e4       	ldi	r24, 0x40	; 64
    6b2c:	98 e7       	ldi	r25, 0x78	; 120
    6b2e:	ad e7       	ldi	r26, 0x7D	; 125
    6b30:	b1 e0       	ldi	r27, 0x01	; 1
    6b32:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    6b36:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    6b3a:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    6b3e:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    6b42:	10 92 4c 48 	sts	0x484C, r1	; 0x80484c <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    6b46:	8f ef       	ldi	r24, 0xFF	; 255
    6b48:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    6b4a:	41 e0       	ldi	r20, 0x01	; 1
    6b4c:	be 01       	movw	r22, r28
    6b4e:	6f 5f       	subi	r22, 0xFF	; 255
    6b50:	7f 4f       	sbci	r23, 0xFF	; 255
    6b52:	83 e0       	ldi	r24, 0x03	; 3
    6b54:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6b58:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>
		
		if(err) return err;
    6b5c:	81 11       	cpse	r24, r1
    6b5e:	79 c0       	rjmp	.+242    	; 0x6c52 <si5351_init+0x156>
		/* Power down clocks */
		data[0] = 0xCC;
    6b60:	8c ec       	ldi	r24, 0xCC	; 204
    6b62:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    6b64:	41 e0       	ldi	r20, 0x01	; 1
    6b66:	be 01       	movw	r22, r28
    6b68:	6f 5f       	subi	r22, 0xFF	; 255
    6b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b6c:	80 e1       	ldi	r24, 0x10	; 16
    6b6e:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6b72:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6b76:	89 2b       	or	r24, r25
    6b78:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>
		err |= si5351_write_bulk(0x11, data, 1);
    6b7c:	41 e0       	ldi	r20, 0x01	; 1
    6b7e:	be 01       	movw	r22, r28
    6b80:	6f 5f       	subi	r22, 0xFF	; 255
    6b82:	7f 4f       	sbci	r23, 0xFF	; 255
    6b84:	81 e1       	ldi	r24, 0x11	; 17
    6b86:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6b8a:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6b8e:	89 2b       	or	r24, r25
    6b90:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>
		err |= si5351_write_bulk(0x12, data, 1);
    6b94:	41 e0       	ldi	r20, 0x01	; 1
    6b96:	be 01       	movw	r22, r28
    6b98:	6f 5f       	subi	r22, 0xFF	; 255
    6b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b9c:	82 e1       	ldi	r24, 0x12	; 18
    6b9e:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6ba2:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6ba6:	89 2b       	or	r24, r25
    6ba8:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    6bac:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    6bae:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    6bb0:	41 e0       	ldi	r20, 0x01	; 1
    6bb2:	be 01       	movw	r22, r28
    6bb4:	6f 5f       	subi	r22, 0xFF	; 255
    6bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    6bb8:	87 eb       	ldi	r24, 0xB7	; 183
    6bba:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6bbe:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6bc2:	89 2b       	or	r24, r25
    6bc4:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>

		if(!ref_osc_freq)
    6bc8:	c1 14       	cp	r12, r1
    6bca:	d1 04       	cpc	r13, r1
    6bcc:	e1 04       	cpc	r14, r1
    6bce:	f1 04       	cpc	r15, r1
    6bd0:	51 f4       	brne	.+20     	; 0x6be6 <si5351_init+0xea>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    6bd2:	0f 2e       	mov	r0, r31
    6bd4:	f0 e4       	ldi	r31, 0x40	; 64
    6bd6:	cf 2e       	mov	r12, r31
    6bd8:	f8 e7       	ldi	r31, 0x78	; 120
    6bda:	df 2e       	mov	r13, r31
    6bdc:	fd e7       	ldi	r31, 0x7D	; 125
    6bde:	ef 2e       	mov	r14, r31
    6be0:	ff 24       	eor	r15, r15
    6be2:	f3 94       	inc	r15
    6be4:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    6be6:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    6bea:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    6bee:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    6bf2:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    6bf6:	c8 16       	cp	r12, r24
    6bf8:	d9 06       	cpc	r13, r25
    6bfa:	ea 06       	cpc	r14, r26
    6bfc:	fb 06       	cpc	r15, r27
    6bfe:	01 f1       	breq	.+64     	; 0x6c40 <si5351_init+0x144>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    6c00:	41 e0       	ldi	r20, 0x01	; 1
    6c02:	be 01       	movw	r22, r28
    6c04:	6f 5f       	subi	r22, 0xFF	; 255
    6c06:	7f 4f       	sbci	r23, 0xFF	; 255
    6c08:	8f e0       	ldi	r24, 0x0F	; 15
    6c0a:	0e 94 6f 35 	call	0x6ade	; 0x6ade <_Z16si5351_read_bulkhPhh>
    6c0e:	81 11       	cpse	r24, r1
    6c10:	1f c0       	rjmp	.+62     	; 0x6c50 <si5351_init+0x154>
			{
				return TRUE;
			}
			
			reg_val = data[0];
    6c12:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    6c14:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    6c16:	c0 92 28 40 	sts	0x4028, r12	; 0x804028 <_ZL9xtal_freq>
    6c1a:	d0 92 29 40 	sts	0x4029, r13	; 0x804029 <_ZL9xtal_freq+0x1>
    6c1e:	e0 92 2a 40 	sts	0x402A, r14	; 0x80402a <_ZL9xtal_freq+0x2>
    6c22:	f0 92 2b 40 	sts	0x402B, r15	; 0x80402b <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    6c26:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    6c28:	41 e0       	ldi	r20, 0x01	; 1
    6c2a:	be 01       	movw	r22, r28
    6c2c:	6f 5f       	subi	r22, 0xFF	; 255
    6c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c30:	8f e0       	ldi	r24, 0x0F	; 15
    6c32:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6c36:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6c3a:	89 2b       	or	r24, r25
    6c3c:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>
		}
		
		g_si5351_initialized = !err;
    6c40:	80 91 3e 48 	lds	r24, 0x483E	; 0x80483e <err>
    6c44:	91 e0       	ldi	r25, 0x01	; 1
    6c46:	81 11       	cpse	r24, r1
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	90 93 3f 48 	sts	0x483F, r25	; 0x80483f <g_si5351_initialized>

		return err;
    6c4e:	01 c0       	rjmp	.+2      	; 0x6c52 <si5351_init+0x156>
		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
			{
				return TRUE;
    6c50:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		g_si5351_initialized = !err;

		return err;
	}
    6c52:	0f 90       	pop	r0
    6c54:	0f 90       	pop	r0
    6c56:	df 91       	pop	r29
    6c58:	cf 91       	pop	r28
    6c5a:	1f 91       	pop	r17
    6c5c:	ff 90       	pop	r15
    6c5e:	ef 90       	pop	r14
    6c60:	df 90       	pop	r13
    6c62:	cf 90       	pop	r12
    6c64:	08 95       	ret

00006c66 <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    6c66:	0f 93       	push	r16
    6c68:	1f 93       	push	r17
    6c6a:	cf 93       	push	r28
    6c6c:	df 93       	push	r29
    6c6e:	00 d0       	rcall	.+0      	; 0x6c70 <si5351_clock_enable+0xa>
    6c70:	cd b7       	in	r28, 0x3d	; 61
    6c72:	de b7       	in	r29, 0x3e	; 62
    6c74:	18 2f       	mov	r17, r24
    6c76:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    6c78:	41 e0       	ldi	r20, 0x01	; 1
    6c7a:	be 01       	movw	r22, r28
    6c7c:	6f 5f       	subi	r22, 0xFF	; 255
    6c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c80:	83 e0       	ldi	r24, 0x03	; 3
    6c82:	0e 94 6f 35 	call	0x6ade	; 0x6ade <_Z16si5351_read_bulkhPhh>
    6c86:	81 11       	cpse	r24, r1
    6c88:	23 c0       	rjmp	.+70     	; 0x6cd0 <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    6c8a:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    6c8c:	00 23       	and	r16, r16
    6c8e:	59 f0       	breq	.+22     	; 0x6ca6 <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    6c90:	21 e0       	ldi	r18, 0x01	; 1
    6c92:	30 e0       	ldi	r19, 0x00	; 0
    6c94:	02 c0       	rjmp	.+4      	; 0x6c9a <si5351_clock_enable+0x34>
    6c96:	22 0f       	add	r18, r18
    6c98:	33 1f       	adc	r19, r19
    6c9a:	1a 95       	dec	r17
    6c9c:	e2 f7       	brpl	.-8      	; 0x6c96 <si5351_clock_enable+0x30>
    6c9e:	82 2f       	mov	r24, r18
    6ca0:	80 95       	com	r24
    6ca2:	89 23       	and	r24, r25
    6ca4:	09 c0       	rjmp	.+18     	; 0x6cb8 <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    6ca6:	21 e0       	ldi	r18, 0x01	; 1
    6ca8:	30 e0       	ldi	r19, 0x00	; 0
    6caa:	02 c0       	rjmp	.+4      	; 0x6cb0 <si5351_clock_enable+0x4a>
    6cac:	22 0f       	add	r18, r18
    6cae:	33 1f       	adc	r19, r19
    6cb0:	1a 95       	dec	r17
    6cb2:	e2 f7       	brpl	.-8      	; 0x6cac <si5351_clock_enable+0x46>
    6cb4:	89 2f       	mov	r24, r25
    6cb6:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    6cb8:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    6cba:	41 e0       	ldi	r20, 0x01	; 1
    6cbc:	be 01       	movw	r22, r28
    6cbe:	6f 5f       	subi	r22, 0xFF	; 255
    6cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    6cc2:	83 e0       	ldi	r24, 0x03	; 3
    6cc4:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6cc8:	88 23       	and	r24, r24
    6cca:	21 f0       	breq	.+8      	; 0x6cd4 <si5351_clock_enable+0x6e>
    6ccc:	8c ef       	ldi	r24, 0xFC	; 252
    6cce:	03 c0       	rjmp	.+6      	; 0x6cd6 <si5351_clock_enable+0x70>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    6cd0:	8c ef       	ldi	r24, 0xFC	; 252
    6cd2:	01 c0       	rjmp	.+2      	; 0x6cd6 <si5351_clock_enable+0x70>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    6cd4:	80 e0       	ldi	r24, 0x00	; 0
	}
    6cd6:	0f 90       	pop	r0
    6cd8:	0f 90       	pop	r0
    6cda:	df 91       	pop	r29
    6cdc:	cf 91       	pop	r28
    6cde:	1f 91       	pop	r17
    6ce0:	0f 91       	pop	r16
    6ce2:	08 95       	ret

00006ce4 <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    6ce4:	0f 93       	push	r16
    6ce6:	1f 93       	push	r17
    6ce8:	cf 93       	push	r28
    6cea:	df 93       	push	r29
    6cec:	00 d0       	rcall	.+0      	; 0x6cee <si5351_drive_strength+0xa>
    6cee:	cd b7       	in	r28, 0x3d	; 61
    6cf0:	de b7       	in	r29, 0x3e	; 62
    6cf2:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    6cf4:	10 e1       	ldi	r17, 0x10	; 16
    6cf6:	18 0f       	add	r17, r24
    6cf8:	41 e0       	ldi	r20, 0x01	; 1
    6cfa:	be 01       	movw	r22, r28
    6cfc:	6f 5f       	subi	r22, 0xFF	; 255
    6cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    6d00:	81 2f       	mov	r24, r17
    6d02:	0e 94 6f 35 	call	0x6ade	; 0x6ade <_Z16si5351_read_bulkhPhh>
    6d06:	81 11       	cpse	r24, r1
    6d08:	1e c0       	rjmp	.+60     	; 0x6d46 <si5351_drive_strength+0x62>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    6d0a:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    6d0c:	01 30       	cpi	r16, 0x01	; 1
    6d0e:	41 f0       	breq	.+16     	; 0x6d20 <si5351_drive_strength+0x3c>
    6d10:	28 f0       	brcs	.+10     	; 0x6d1c <si5351_drive_strength+0x38>
    6d12:	02 30       	cpi	r16, 0x02	; 2
    6d14:	41 f0       	breq	.+16     	; 0x6d26 <si5351_drive_strength+0x42>
    6d16:	03 30       	cpi	r16, 0x03	; 3
    6d18:	49 f0       	breq	.+18     	; 0x6d2c <si5351_drive_strength+0x48>
    6d1a:	09 c0       	rjmp	.+18     	; 0x6d2e <si5351_drive_strength+0x4a>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    6d1c:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    6d1e:	07 c0       	rjmp	.+14     	; 0x6d2e <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    6d20:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    6d22:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    6d24:	04 c0       	rjmp	.+8      	; 0x6d2e <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    6d26:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    6d28:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    6d2a:	01 c0       	rjmp	.+2      	; 0x6d2e <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    6d2c:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    6d2e:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    6d30:	41 e0       	ldi	r20, 0x01	; 1
    6d32:	be 01       	movw	r22, r28
    6d34:	6f 5f       	subi	r22, 0xFF	; 255
    6d36:	7f 4f       	sbci	r23, 0xFF	; 255
    6d38:	81 2f       	mov	r24, r17
    6d3a:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    6d3e:	88 23       	and	r24, r24
    6d40:	21 f0       	breq	.+8      	; 0x6d4a <si5351_drive_strength+0x66>
    6d42:	8b ef       	ldi	r24, 0xFB	; 251
    6d44:	03 c0       	rjmp	.+6      	; 0x6d4c <si5351_drive_strength+0x68>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    6d46:	8b ef       	ldi	r24, 0xFB	; 251
    6d48:	01 c0       	rjmp	.+2      	; 0x6d4c <si5351_drive_strength+0x68>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    6d4a:	80 e0       	ldi	r24, 0x00	; 0
	}
    6d4c:	0f 90       	pop	r0
    6d4e:	0f 90       	pop	r0
    6d50:	df 91       	pop	r29
    6d52:	cf 91       	pop	r28
    6d54:	1f 91       	pop	r17
    6d56:	0f 91       	pop	r16
    6d58:	08 95       	ret

00006d5a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	void set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    6d5a:	0f 93       	push	r16
    6d5c:	1f 93       	push	r17
    6d5e:	cf 93       	push	r28
    6d60:	df 93       	push	r29
    6d62:	00 d0       	rcall	.+0      	; 0x6d64 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    6d64:	cd b7       	in	r28, 0x3d	; 61
    6d66:	de b7       	in	r29, 0x3e	; 62
    6d68:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    6d6a:	10 e1       	ldi	r17, 0x10	; 16
    6d6c:	18 0f       	add	r17, r24
    6d6e:	41 e0       	ldi	r20, 0x01	; 1
    6d70:	be 01       	movw	r22, r28
    6d72:	6f 5f       	subi	r22, 0xFF	; 255
    6d74:	7f 4f       	sbci	r23, 0xFF	; 255
    6d76:	81 2f       	mov	r24, r17
    6d78:	0e 94 6f 35 	call	0x6ade	; 0x6ade <_Z16si5351_read_bulkhPhh>
    6d7c:	81 11       	cpse	r24, r1
    6d7e:	10 c0       	rjmp	.+32     	; 0x6da0 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x46>
		{
			return;
		}
		
		reg_val = data[0];
    6d80:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    6d82:	01 30       	cpi	r16, 0x01	; 1
    6d84:	11 f4       	brne	.+4      	; 0x6d8a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    6d86:	8f 7d       	andi	r24, 0xDF	; 223
    6d88:	03 c0       	rjmp	.+6      	; 0x6d90 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    6d8a:	02 30       	cpi	r16, 0x02	; 2
    6d8c:	09 f4       	brne	.+2      	; 0x6d90 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    6d8e:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    6d90:	89 83       	std	Y+1, r24	; 0x01
		si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1);
    6d92:	41 e0       	ldi	r20, 0x01	; 1
    6d94:	be 01       	movw	r22, r28
    6d96:	6f 5f       	subi	r22, 0xFF	; 255
    6d98:	7f 4f       	sbci	r23, 0xFF	; 255
    6d9a:	81 2f       	mov	r24, r17
    6d9c:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
	}
    6da0:	0f 90       	pop	r0
    6da2:	0f 90       	pop	r0
    6da4:	df 91       	pop	r29
    6da6:	cf 91       	pop	r28
    6da8:	1f 91       	pop	r17
    6daa:	0f 91       	pop	r16
    6dac:	08 95       	ret

00006dae <_Z16set_integer_mode12si5351_clockh>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	void set_integer_mode(Si5351_clock clk, BOOL enable)
	{
    6dae:	0f 93       	push	r16
    6db0:	1f 93       	push	r17
    6db2:	cf 93       	push	r28
    6db4:	df 93       	push	r29
    6db6:	00 d0       	rcall	.+0      	; 0x6db8 <_Z16set_integer_mode12si5351_clockh+0xa>
    6db8:	cd b7       	in	r28, 0x3d	; 61
    6dba:	de b7       	in	r29, 0x3e	; 62
    6dbc:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    6dbe:	10 e1       	ldi	r17, 0x10	; 16
    6dc0:	18 0f       	add	r17, r24
    6dc2:	41 e0       	ldi	r20, 0x01	; 1
    6dc4:	be 01       	movw	r22, r28
    6dc6:	6f 5f       	subi	r22, 0xFF	; 255
    6dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    6dca:	81 2f       	mov	r24, r17
    6dcc:	0e 94 6f 35 	call	0x6ade	; 0x6ade <_Z16si5351_read_bulkhPhh>
    6dd0:	81 11       	cpse	r24, r1
    6dd2:	0e c0       	rjmp	.+28     	; 0x6df0 <_Z16set_integer_mode12si5351_clockh+0x42>
		{
			return;
		}
		
		reg_val = data[0];
    6dd4:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    6dd6:	00 23       	and	r16, r16
    6dd8:	11 f0       	breq	.+4      	; 0x6dde <_Z16set_integer_mode12si5351_clockh+0x30>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    6dda:	80 64       	ori	r24, 0x40	; 64
    6ddc:	01 c0       	rjmp	.+2      	; 0x6de0 <_Z16set_integer_mode12si5351_clockh+0x32>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    6dde:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    6de0:	89 83       	std	Y+1, r24	; 0x01
		si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1);
    6de2:	41 e0       	ldi	r20, 0x01	; 1
    6de4:	be 01       	movw	r22, r28
    6de6:	6f 5f       	subi	r22, 0xFF	; 255
    6de8:	7f 4f       	sbci	r23, 0xFF	; 255
    6dea:	81 2f       	mov	r24, r17
    6dec:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
	}
    6df0:	0f 90       	pop	r0
    6df2:	0f 90       	pop	r0
    6df4:	df 91       	pop	r29
    6df6:	cf 91       	pop	r28
    6df8:	1f 91       	pop	r17
    6dfa:	0f 91       	pop	r16
    6dfc:	08 95       	ret

00006dfe <_Z6ms_div12si5351_clockhh>:


	void ms_div(Si5351_clock clk, uint8_t r_div, BOOL div_by_4)
	{
    6dfe:	ff 92       	push	r15
    6e00:	0f 93       	push	r16
    6e02:	1f 93       	push	r17
    6e04:	cf 93       	push	r28
    6e06:	df 93       	push	r29
    6e08:	00 d0       	rcall	.+0      	; 0x6e0a <_Z6ms_div12si5351_clockhh+0xc>
    6e0a:	cd b7       	in	r28, 0x3d	; 61
    6e0c:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    6e0e:	81 30       	cpi	r24, 0x01	; 1
    6e10:	71 f0       	breq	.+28     	; 0x6e2e <_Z6ms_div12si5351_clockhh+0x30>
    6e12:	18 f0       	brcs	.+6      	; 0x6e1a <_Z6ms_div12si5351_clockhh+0x1c>
    6e14:	82 30       	cpi	r24, 0x02	; 2
    6e16:	31 f0       	breq	.+12     	; 0x6e24 <_Z6ms_div12si5351_clockhh+0x26>
    6e18:	2b c0       	rjmp	.+86     	; 0x6e70 <_Z6ms_div12si5351_clockhh+0x72>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    6e1a:	0f 2e       	mov	r0, r31
    6e1c:	fc e2       	ldi	r31, 0x2C	; 44
    6e1e:	ff 2e       	mov	r15, r31
    6e20:	f0 2d       	mov	r31, r0
    6e22:	09 c0       	rjmp	.+18     	; 0x6e36 <_Z6ms_div12si5351_clockhh+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    6e24:	0f 2e       	mov	r0, r31
    6e26:	fc e3       	ldi	r31, 0x3C	; 60
    6e28:	ff 2e       	mov	r15, r31
    6e2a:	f0 2d       	mov	r31, r0
			}
			break;
    6e2c:	04 c0       	rjmp	.+8      	; 0x6e36 <_Z6ms_div12si5351_clockhh+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    6e2e:	0f 2e       	mov	r0, r31
    6e30:	f4 e3       	ldi	r31, 0x34	; 52
    6e32:	ff 2e       	mov	r15, r31
    6e34:	f0 2d       	mov	r31, r0
    6e36:	04 2f       	mov	r16, r20
    6e38:	16 2f       	mov	r17, r22

			default:
				return;
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    6e3a:	41 e0       	ldi	r20, 0x01	; 1
    6e3c:	be 01       	movw	r22, r28
    6e3e:	6f 5f       	subi	r22, 0xFF	; 255
    6e40:	7f 4f       	sbci	r23, 0xFF	; 255
    6e42:	8f 2d       	mov	r24, r15
    6e44:	0e 94 6f 35 	call	0x6ade	; 0x6ade <_Z16si5351_read_bulkhPhh>
    6e48:	81 11       	cpse	r24, r1
    6e4a:	12 c0       	rjmp	.+36     	; 0x6e70 <_Z6ms_div12si5351_clockhh+0x72>
		{
			return;
		}
		
		reg_val = data[0];
    6e4c:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    6e4e:	86 2f       	mov	r24, r22
    6e50:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    6e52:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    6e54:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    6e56:	90 e1       	ldi	r25, 0x10	; 16
    6e58:	19 9f       	mul	r17, r25
    6e5a:	b0 01       	movw	r22, r0
    6e5c:	11 24       	eor	r1, r1
    6e5e:	68 2b       	or	r22, r24

		data[0] = reg_val;
    6e60:	69 83       	std	Y+1, r22	; 0x01
		si5351_write_bulk(reg_addr, data, 1);
    6e62:	41 e0       	ldi	r20, 0x01	; 1
    6e64:	be 01       	movw	r22, r28
    6e66:	6f 5f       	subi	r22, 0xFF	; 255
    6e68:	7f 4f       	sbci	r23, 0xFF	; 255
    6e6a:	8f 2d       	mov	r24, r15
    6e6c:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
	}
    6e70:	0f 90       	pop	r0
    6e72:	0f 90       	pop	r0
    6e74:	df 91       	pop	r29
    6e76:	cf 91       	pop	r28
    6e78:	1f 91       	pop	r17
    6e7a:	0f 91       	pop	r16
    6e7c:	ff 90       	pop	r15
    6e7e:	08 95       	ret

00006e80 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	void set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, BOOL int_mode, uint8_t r_div, BOOL div_by_4)
	{
    6e80:	8f 92       	push	r8
    6e82:	af 92       	push	r10
    6e84:	cf 92       	push	r12
    6e86:	df 92       	push	r13
    6e88:	ef 92       	push	r14
    6e8a:	ff 92       	push	r15
    6e8c:	0f 93       	push	r16
    6e8e:	1f 93       	push	r17
    6e90:	cf 93       	push	r28
    6e92:	df 93       	push	r29
    6e94:	cd b7       	in	r28, 0x3d	; 61
    6e96:	de b7       	in	r29, 0x3e	; 62
    6e98:	69 97       	sbiw	r28, 0x19	; 25
    6e9a:	cd bf       	out	0x3d, r28	; 61
    6e9c:	de bf       	out	0x3e, r29	; 62
    6e9e:	f8 2e       	mov	r15, r24
    6ea0:	ce 86       	std	Y+14, r12	; 0x0e
    6ea2:	df 86       	std	Y+15, r13	; 0x0f
    6ea4:	e8 8a       	std	Y+16, r14	; 0x10
    6ea6:	0a 8b       	std	Y+18, r16	; 0x12
    6ea8:	1b 8b       	std	Y+19, r17	; 0x13
    6eaa:	2c 8b       	std	Y+20, r18	; 0x14
    6eac:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    6eae:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    6eb0:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    6eb2:	88 0f       	add	r24, r24
    6eb4:	88 0f       	add	r24, r24
    6eb6:	88 0f       	add	r24, r24
    6eb8:	41 e0       	ldi	r20, 0x01	; 1
    6eba:	be 01       	movw	r22, r28
    6ebc:	64 5f       	subi	r22, 0xF4	; 244
    6ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    6ec0:	84 5d       	subi	r24, 0xD4	; 212
    6ec2:	0e 94 6f 35 	call	0x6ade	; 0x6ade <_Z16si5351_read_bulkhPhh>
    6ec6:	81 11       	cpse	r24, r1
    6ec8:	40 c0       	rjmp	.+128    	; 0x6f4a <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xca>
		{
			return;
		}
		
		reg_val = data[0];
    6eca:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    6ecc:	98 2f       	mov	r25, r24
    6ece:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    6ed0:	88 89       	ldd	r24, Y+16	; 0x10
    6ed2:	83 70       	andi	r24, 0x03	; 3
    6ed4:	89 2b       	or	r24, r25
    6ed6:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    6ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
    6eda:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    6edc:	8e 85       	ldd	r24, Y+14	; 0x0e
    6ede:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    6ee0:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    6ee2:	8c 89       	ldd	r24, Y+20	; 0x14
    6ee4:	8f 70       	andi	r24, 0x0F	; 15
    6ee6:	20 e1       	ldi	r18, 0x10	; 16
    6ee8:	92 9f       	mul	r25, r18
    6eea:	80 0d       	add	r24, r0
    6eec:	11 24       	eor	r1, r1
    6eee:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    6ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    6ef2:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    6ef4:	8a 89       	ldd	r24, Y+18	; 0x12
    6ef6:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    6ef8:	81 e0       	ldi	r24, 0x01	; 1
    6efa:	f8 16       	cp	r15, r24
    6efc:	71 f0       	breq	.+28     	; 0x6f1a <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0x9a>
    6efe:	f8 16       	cp	r15, r24
    6f00:	20 f0       	brcs	.+8      	; 0x6f0a <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0x8a>
    6f02:	22 e0       	ldi	r18, 0x02	; 2
    6f04:	f2 16       	cp	r15, r18
    6f06:	89 f0       	breq	.+34     	; 0x6f2a <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xaa>
    6f08:	17 c0       	rjmp	.+46     	; 0x6f38 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xb8>
		{
			case SI5351_CLK0:
			{
				si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i);
    6f0a:	48 e0       	ldi	r20, 0x08	; 8
    6f0c:	be 01       	movw	r22, r28
    6f0e:	6f 5f       	subi	r22, 0xFF	; 255
    6f10:	7f 4f       	sbci	r23, 0xFF	; 255
    6f12:	8a e2       	ldi	r24, 0x2A	; 42
    6f14:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
			}
			break;
    6f18:	0f c0       	rjmp	.+30     	; 0x6f38 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xb8>

			case SI5351_CLK1:
			{
				si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i);
    6f1a:	48 e0       	ldi	r20, 0x08	; 8
    6f1c:	be 01       	movw	r22, r28
    6f1e:	6f 5f       	subi	r22, 0xFF	; 255
    6f20:	7f 4f       	sbci	r23, 0xFF	; 255
    6f22:	82 e3       	ldi	r24, 0x32	; 50
    6f24:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
			}
			break;
    6f28:	07 c0       	rjmp	.+14     	; 0x6f38 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xb8>

			case SI5351_CLK2:
			{
				si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i);
    6f2a:	48 e0       	ldi	r20, 0x08	; 8
    6f2c:	be 01       	movw	r22, r28
    6f2e:	6f 5f       	subi	r22, 0xFF	; 255
    6f30:	7f 4f       	sbci	r23, 0xFF	; 255
    6f32:	8a e3       	ldi	r24, 0x3A	; 58
    6f34:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
			{
			}
			break;
		}

		set_integer_mode(clk, int_mode);
    6f38:	6a 2d       	mov	r22, r10
    6f3a:	8f 2d       	mov	r24, r15
    6f3c:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_Z16set_integer_mode12si5351_clockh>
		ms_div(clk, r_div, div_by_4);
    6f40:	4e a1       	ldd	r20, Y+38	; 0x26
    6f42:	68 2d       	mov	r22, r8
    6f44:	8f 2d       	mov	r24, r15
    6f46:	0e 94 ff 36 	call	0x6dfe	; 0x6dfe <_Z6ms_div12si5351_clockhh>
	}
    6f4a:	69 96       	adiw	r28, 0x19	; 25
    6f4c:	cd bf       	out	0x3d, r28	; 61
    6f4e:	de bf       	out	0x3e, r29	; 62
    6f50:	df 91       	pop	r29
    6f52:	cf 91       	pop	r28
    6f54:	1f 91       	pop	r17
    6f56:	0f 91       	pop	r16
    6f58:	ff 90       	pop	r15
    6f5a:	ef 90       	pop	r14
    6f5c:	df 90       	pop	r13
    6f5e:	cf 90       	pop	r12
    6f60:	af 90       	pop	r10
    6f62:	8f 90       	pop	r8
    6f64:	08 95       	ret

00006f66 <si5351_set_freq>:
 *
 * Returns TRUE on failure
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, BOOL clocksOff)
	{
    6f66:	2f 92       	push	r2
    6f68:	3f 92       	push	r3
    6f6a:	4f 92       	push	r4
    6f6c:	5f 92       	push	r5
    6f6e:	6f 92       	push	r6
    6f70:	7f 92       	push	r7
    6f72:	8f 92       	push	r8
    6f74:	9f 92       	push	r9
    6f76:	af 92       	push	r10
    6f78:	bf 92       	push	r11
    6f7a:	cf 92       	push	r12
    6f7c:	df 92       	push	r13
    6f7e:	ef 92       	push	r14
    6f80:	ff 92       	push	r15
    6f82:	0f 93       	push	r16
    6f84:	1f 93       	push	r17
    6f86:	cf 93       	push	r28
    6f88:	df 93       	push	r29
    6f8a:	cd b7       	in	r28, 0x3d	; 61
    6f8c:	de b7       	in	r29, 0x3e	; 62
    6f8e:	60 97       	sbiw	r28, 0x10	; 16
    6f90:	cd bf       	out	0x3d, r28	; 61
    6f92:	de bf       	out	0x3e, r29	; 62
    6f94:	6b 01       	movw	r12, r22
    6f96:	7c 01       	movw	r14, r24
    6f98:	b4 2e       	mov	r11, r20
    6f9a:	72 2e       	mov	r7, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		BOOL int_mode = FALSE;
    6f9c:	1d 86       	std	Y+13, r1	; 0x0d
		BOOL div_by_4 = FALSE;
    6f9e:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    6fa0:	80 91 3f 48 	lds	r24, 0x483F	; 0x80483f <g_si5351_initialized>
    6fa4:	88 23       	and	r24, r24
    6fa6:	09 f4       	brne	.+2      	; 0x6faa <si5351_set_freq+0x44>
    6fa8:	0b c1       	rjmp	.+534    	; 0x71c0 <si5351_set_freq+0x25a>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    6faa:	80 e4       	ldi	r24, 0x40	; 64
    6fac:	c8 16       	cp	r12, r24
    6fae:	82 e4       	ldi	r24, 0x42	; 66
    6fb0:	d8 06       	cpc	r13, r24
    6fb2:	8f e0       	ldi	r24, 0x0F	; 15
    6fb4:	e8 06       	cpc	r14, r24
    6fb6:	f1 04       	cpc	r15, r1
    6fb8:	70 f0       	brcs	.+28     	; 0x6fd6 <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    6fba:	c7 01       	movw	r24, r14
    6fbc:	b6 01       	movw	r22, r12
    6fbe:	24 e6       	ldi	r18, 0x64	; 100
    6fc0:	30 e0       	ldi	r19, 0x00	; 0
    6fc2:	40 e0       	ldi	r20, 0x00	; 0
    6fc4:	50 e0       	ldi	r21, 0x00	; 0
    6fc6:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
				freq_Fout *= 100;
    6fca:	a4 e6       	ldi	r26, 0x64	; 100
    6fcc:	b0 e0       	ldi	r27, 0x00	; 0
    6fce:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__muluhisi3>
    6fd2:	6b 01       	movw	r12, r22
    6fd4:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    6fd6:	81 e0       	ldi	r24, 0x01	; 1
    6fd8:	b8 16       	cp	r11, r24
    6fda:	c9 f0       	breq	.+50     	; 0x700e <si5351_set_freq+0xa8>
    6fdc:	b8 16       	cp	r11, r24
    6fde:	20 f0       	brcs	.+8      	; 0x6fe8 <si5351_set_freq+0x82>
    6fe0:	82 e0       	ldi	r24, 0x02	; 2
    6fe2:	b8 16       	cp	r11, r24
    6fe4:	99 f1       	breq	.+102    	; 0x704c <si5351_set_freq+0xe6>
    6fe6:	ee c0       	rjmp	.+476    	; 0x71c4 <si5351_set_freq+0x25e>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    6fe8:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    6fec:	81 60       	ori	r24, 0x01	; 1
    6fee:	80 93 4c 48 	sts	0x484C, r24	; 0x80484c <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    6ff2:	c0 92 40 48 	sts	0x4840, r12	; 0x804840 <_ZL9clock_out>
    6ff6:	d0 92 41 48 	sts	0x4841, r13	; 0x804841 <_ZL9clock_out+0x1>
    6ffa:	e0 92 42 48 	sts	0x4842, r14	; 0x804842 <_ZL9clock_out+0x2>
    6ffe:	f0 92 43 48 	sts	0x4843, r15	; 0x804843 <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    7002:	68 94       	set
    7004:	66 24       	eor	r6, r6
    7006:	64 f8       	bld	r6, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    7008:	99 24       	eor	r9, r9
    700a:	93 94       	inc	r9
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    700c:	3d c0       	rjmp	.+122    	; 0x7088 <si5351_set_freq+0x122>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    700e:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    7012:	82 60       	ori	r24, 0x02	; 2
    7014:	80 93 4c 48 	sts	0x484C, r24	; 0x80484c <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    7018:	80 95       	com	r24
    701a:	8a 6f       	ori	r24, 0xFA	; 250
    701c:	8f 87       	std	Y+15, r24	; 0x0f
				si5351_write_bulk(0x03, data, 1); /* only disable CLK1 */
    701e:	41 e0       	ldi	r20, 0x01	; 1
    7020:	be 01       	movw	r22, r28
    7022:	61 5f       	subi	r22, 0xF1	; 241
    7024:	7f 4f       	sbci	r23, 0xFF	; 255
    7026:	83 e0       	ldi	r24, 0x03	; 3
    7028:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    702c:	c0 92 44 48 	sts	0x4844, r12	; 0x804844 <_ZL9clock_out+0x4>
    7030:	d0 92 45 48 	sts	0x4845, r13	; 0x804845 <_ZL9clock_out+0x5>
    7034:	e0 92 46 48 	sts	0x4846, r14	; 0x804846 <_ZL9clock_out+0x6>
    7038:	f0 92 47 48 	sts	0x4847, r15	; 0x804847 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    703c:	0f 2e       	mov	r0, r31
    703e:	f1 e1       	ldi	r31, 0x11	; 17
    7040:	6f 2e       	mov	r6, r31
    7042:	f0 2d       	mov	r31, r0
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
				si5351_write_bulk(0x03, data, 1); /* only disable CLK1 */

				target_pll = SI5351_PLLB;
    7044:	68 94       	set
    7046:	99 24       	eor	r9, r9
    7048:	91 f8       	bld	r9, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    704a:	1e c0       	rjmp	.+60     	; 0x7088 <si5351_set_freq+0x122>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    704c:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    7050:	84 60       	ori	r24, 0x04	; 4
    7052:	80 93 4c 48 	sts	0x484C, r24	; 0x80484c <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    7056:	80 95       	com	r24
    7058:	8c 6f       	ori	r24, 0xFC	; 252
    705a:	8f 87       	std	Y+15, r24	; 0x0f
 				si5351_write_bulk(0x03, data, 1); /* only disable CLK1 */
    705c:	41 e0       	ldi	r20, 0x01	; 1
    705e:	be 01       	movw	r22, r28
    7060:	61 5f       	subi	r22, 0xF1	; 241
    7062:	7f 4f       	sbci	r23, 0xFF	; 255
    7064:	83 e0       	ldi	r24, 0x03	; 3
    7066:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    706a:	c0 92 48 48 	sts	0x4848, r12	; 0x804848 <_ZL9clock_out+0x8>
    706e:	d0 92 49 48 	sts	0x4849, r13	; 0x804849 <_ZL9clock_out+0x9>
    7072:	e0 92 4a 48 	sts	0x484A, r14	; 0x80484a <_ZL9clock_out+0xa>
    7076:	f0 92 4b 48 	sts	0x484B, r15	; 0x80484b <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    707a:	0f 2e       	mov	r0, r31
    707c:	f2 e1       	ldi	r31, 0x12	; 18
    707e:	6f 2e       	mov	r6, r31
    7080:	f0 2d       	mov	r31, r0
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
 				si5351_write_bulk(0x03, data, 1); /* only disable CLK1 */

				target_pll = SI5351_PLLB;
    7082:	68 94       	set
    7084:	99 24       	eor	r9, r9
    7086:	91 f8       	bld	r9, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    7088:	81 e0       	ldi	r24, 0x01	; 1
    708a:	98 16       	cp	r9, r24
    708c:	61 f0       	breq	.+24     	; 0x70a6 <si5351_set_freq+0x140>
    708e:	80 91 4d 48 	lds	r24, 0x484D	; 0x80484d <_ZL8freqVCOB>
    7092:	90 91 4e 48 	lds	r25, 0x484E	; 0x80484e <_ZL8freqVCOB+0x1>
    7096:	a0 91 4f 48 	lds	r26, 0x484F	; 0x80484f <_ZL8freqVCOB+0x2>
    709a:	b0 91 50 48 	lds	r27, 0x4850	; 0x804850 <_ZL8freqVCOB+0x3>
    709e:	89 2b       	or	r24, r25
    70a0:	8a 2b       	or	r24, r26
    70a2:	8b 2b       	or	r24, r27
    70a4:	81 f4       	brne	.+32     	; 0x70c6 <si5351_set_freq+0x160>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    70a6:	8e 01       	movw	r16, r28
    70a8:	02 5f       	subi	r16, 0xF2	; 242
    70aa:	1f 4f       	sbci	r17, 0xFF	; 255
    70ac:	9e 01       	movw	r18, r28
    70ae:	23 5f       	subi	r18, 0xF3	; 243
    70b0:	3f 4f       	sbci	r19, 0xFF	; 255
    70b2:	ae 01       	movw	r20, r28
    70b4:	4f 5f       	subi	r20, 0xFF	; 255
    70b6:	5f 4f       	sbci	r21, 0xFF	; 255
    70b8:	c7 01       	movw	r24, r14
    70ba:	b6 01       	movw	r22, r12
    70bc:	0e 94 2b 33 	call	0x6656	; 0x6656 <_Z15multisynth_calcmP13u_si5351_regsPhS1_>
    70c0:	1b 01       	movw	r2, r22
    70c2:	2c 01       	movw	r4, r24
    70c4:	10 c0       	rjmp	.+32     	; 0x70e6 <si5351_set_freq+0x180>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    70c6:	8e 01       	movw	r16, r28
    70c8:	02 5f       	subi	r16, 0xF2	; 242
    70ca:	1f 4f       	sbci	r17, 0xFF	; 255
    70cc:	9e 01       	movw	r18, r28
    70ce:	23 5f       	subi	r18, 0xF3	; 243
    70d0:	3f 4f       	sbci	r19, 0xFF	; 255
    70d2:	ae 01       	movw	r20, r28
    70d4:	4f 5f       	subi	r20, 0xFF	; 255
    70d6:	5f 4f       	sbci	r21, 0xFF	; 255
    70d8:	c7 01       	movw	r24, r14
    70da:	b6 01       	movw	r22, r12
    70dc:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_Z19multisynth_estimatemP13u_si5351_regsPhS1_>
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, BOOL clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    70e0:	21 2c       	mov	r2, r1
    70e2:	31 2c       	mov	r3, r1
    70e4:	21 01       	movw	r4, r2
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		set_multisynth_registers_source(clk, target_pll);
    70e6:	69 2d       	mov	r22, r9
    70e8:	8b 2d       	mov	r24, r11
    70ea:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
		set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
    70ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    70f0:	8f 93       	push	r24
    70f2:	81 2c       	mov	r8, r1
    70f4:	ad 84       	ldd	r10, Y+13	; 0x0d
    70f6:	c9 80       	ldd	r12, Y+1	; 0x01
    70f8:	da 80       	ldd	r13, Y+2	; 0x02
    70fa:	eb 80       	ldd	r14, Y+3	; 0x03
    70fc:	fc 80       	ldd	r15, Y+4	; 0x04
    70fe:	0d 81       	ldd	r16, Y+5	; 0x05
    7100:	1e 81       	ldd	r17, Y+6	; 0x06
    7102:	2f 81       	ldd	r18, Y+7	; 0x07
    7104:	38 85       	ldd	r19, Y+8	; 0x08
    7106:	49 85       	ldd	r20, Y+9	; 0x09
    7108:	5a 85       	ldd	r21, Y+10	; 0x0a
    710a:	6b 85       	ldd	r22, Y+11	; 0x0b
    710c:	7c 85       	ldd	r23, Y+12	; 0x0c
    710e:	8b 2d       	mov	r24, r11
    7110:	0e 94 40 37 	call	0x6e80	; 0x6e80 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    7114:	0f 90       	pop	r0
    7116:	21 14       	cp	r2, r1
    7118:	31 04       	cpc	r3, r1
    711a:	41 04       	cpc	r4, r1
    711c:	51 04       	cpc	r5, r1
    711e:	29 f0       	breq	.+10     	; 0x712a <si5351_set_freq+0x1c4>
			{
				set_pll(freq_VCO, target_pll);
    7120:	49 2d       	mov	r20, r9
    7122:	c2 01       	movw	r24, r4
    7124:	b1 01       	movw	r22, r2
    7126:	0e 94 32 35 	call	0x6a64	; 0x6a64 <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    712a:	77 20       	and	r7, r7
    712c:	59 f0       	breq	.+22     	; 0x7144 <si5351_set_freq+0x1de>
		{
 			data[0] = enabledClocksMask;
    712e:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    7132:	8f 87       	std	Y+15, r24	; 0x0f
			si5351_write_bulk(0x03, data, 1);    /* disable clock(s) in use */
    7134:	41 e0       	ldi	r20, 0x01	; 1
    7136:	be 01       	movw	r22, r28
    7138:	61 5f       	subi	r22, 0xF1	; 241
    713a:	7f 4f       	sbci	r23, 0xFF	; 255
    713c:	83 e0       	ldi	r24, 0x03	; 3
    713e:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    7142:	0b c0       	rjmp	.+22     	; 0x715a <si5351_set_freq+0x1f4>
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    7144:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    7148:	80 95       	com	r24
    714a:	8f 87       	std	Y+15, r24	; 0x0f
 			si5351_write_bulk(0x03, data, 1);  /* only enable clock(s) in use */
    714c:	41 e0       	ldi	r20, 0x01	; 1
    714e:	be 01       	movw	r22, r28
    7150:	61 5f       	subi	r22, 0xF1	; 241
    7152:	7f 4f       	sbci	r23, 0xFF	; 255
    7154:	83 e0       	ldi	r24, 0x03	; 3
    7156:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    715a:	81 e0       	ldi	r24, 0x01	; 1
    715c:	98 12       	cpse	r9, r24
    715e:	0b c0       	rjmp	.+22     	; 0x7176 <si5351_set_freq+0x210>
		{
 			data[0] = 0x4C;
    7160:	8c e4       	ldi	r24, 0x4C	; 76
    7162:	8f 87       	std	Y+15, r24	; 0x0f
 			si5351_write_bulk(clock_ctrl_addr, data, 1);  /* power up only clock being set, leaving that clock configured as follows: */
    7164:	41 e0       	ldi	r20, 0x01	; 1
    7166:	be 01       	movw	r22, r28
    7168:	61 5f       	subi	r22, 0xF1	; 241
    716a:	7f 4f       	sbci	r23, 0xFF	; 255
    716c:	86 2d       	mov	r24, r6
    716e:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    7172:	80 e0       	ldi	r24, 0x00	; 0
    7174:	2a c0       	rjmp	.+84     	; 0x71ca <si5351_set_freq+0x264>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    7176:	8d 85       	ldd	r24, Y+13	; 0x0d
    7178:	88 23       	and	r24, r24
    717a:	51 f0       	breq	.+20     	; 0x7190 <si5351_set_freq+0x22a>
			{
 				data[0] = 0x6C;
    717c:	8c e6       	ldi	r24, 0x6C	; 108
    717e:	8f 87       	std	Y+15, r24	; 0x0f
 				si5351_write_bulk(clock_ctrl_addr, data, 1);  /* power up only clock being set, leaving that clock configured as follows: */
    7180:	41 e0       	ldi	r20, 0x01	; 1
    7182:	be 01       	movw	r22, r28
    7184:	61 5f       	subi	r22, 0xF1	; 241
    7186:	7f 4f       	sbci	r23, 0xFF	; 255
    7188:	86 2d       	mov	r24, r6
    718a:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
    718e:	09 c0       	rjmp	.+18     	; 0x71a2 <si5351_set_freq+0x23c>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    7190:	8c e2       	ldi	r24, 0x2C	; 44
    7192:	8f 87       	std	Y+15, r24	; 0x0f
 				si5351_write_bulk(clock_ctrl_addr, data, 1);  /* power up only clock being set, leaving that clock configured as follows: */
    7194:	41 e0       	ldi	r20, 0x01	; 1
    7196:	be 01       	movw	r22, r28
    7198:	61 5f       	subi	r22, 0xF1	; 241
    719a:	7f 4f       	sbci	r23, 0xFF	; 255
    719c:	86 2d       	mov	r24, r6
    719e:	0e 94 23 35 	call	0x6a46	; 0x6a46 <_Z17si5351_write_bulkhPhh>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    71a2:	21 14       	cp	r2, r1
    71a4:	31 04       	cpc	r3, r1
    71a6:	41 04       	cpc	r4, r1
    71a8:	51 04       	cpc	r5, r1
    71aa:	71 f0       	breq	.+28     	; 0x71c8 <si5351_set_freq+0x262>
			{
				freqVCOB = freq_VCO;
    71ac:	20 92 4d 48 	sts	0x484D, r2	; 0x80484d <_ZL8freqVCOB>
    71b0:	30 92 4e 48 	sts	0x484E, r3	; 0x80484e <_ZL8freqVCOB+0x1>
    71b4:	40 92 4f 48 	sts	0x484F, r4	; 0x80484f <_ZL8freqVCOB+0x2>
    71b8:	50 92 50 48 	sts	0x4850, r5	; 0x804850 <_ZL8freqVCOB+0x3>
			}
		}

		return(FALSE);
    71bc:	80 e0       	ldi	r24, 0x00	; 0
    71be:	05 c0       	rjmp	.+10     	; 0x71ca <si5351_set_freq+0x264>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    71c0:	81 e0       	ldi	r24, 0x01	; 1
    71c2:	03 c0       	rjmp	.+6      	; 0x71ca <si5351_set_freq+0x264>
			}
			break;

			default:
			{
				return(TRUE);
    71c4:	81 e0       	ldi	r24, 0x01	; 1
    71c6:	01 c0       	rjmp	.+2      	; 0x71ca <si5351_set_freq+0x264>
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    71c8:	80 e0       	ldi	r24, 0x00	; 0
	}
    71ca:	60 96       	adiw	r28, 0x10	; 16
    71cc:	cd bf       	out	0x3d, r28	; 61
    71ce:	de bf       	out	0x3e, r29	; 62
    71d0:	df 91       	pop	r29
    71d2:	cf 91       	pop	r28
    71d4:	1f 91       	pop	r17
    71d6:	0f 91       	pop	r16
    71d8:	ff 90       	pop	r15
    71da:	ef 90       	pop	r14
    71dc:	df 90       	pop	r13
    71de:	cf 90       	pop	r12
    71e0:	bf 90       	pop	r11
    71e2:	af 90       	pop	r10
    71e4:	9f 90       	pop	r9
    71e6:	8f 90       	pop	r8
    71e8:	7f 90       	pop	r7
    71ea:	6f 90       	pop	r6
    71ec:	5f 90       	pop	r5
    71ee:	4f 90       	pop	r4
    71f0:	3f 90       	pop	r3
    71f2:	2f 90       	pop	r2
    71f4:	08 95       	ret

000071f6 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    71f6:	80 e0       	ldi	r24, 0x00	; 0
    71f8:	08 95       	ret

000071fa <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    71fa:	e0 e0       	ldi	r30, 0x00	; 0
    71fc:	fb e0       	ldi	r31, 0x0B	; 11
    71fe:	81 e0       	ldi	r24, 0x01	; 1
    7200:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    7202:	20 e4       	ldi	r18, 0x40	; 64
    7204:	3c e9       	ldi	r19, 0x9C	; 156
    7206:	24 87       	std	Z+12, r18	; 0x0c
    7208:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    720a:	93 e0       	ldi	r25, 0x03	; 3
    720c:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    720e:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    7210:	e0 e1       	ldi	r30, 0x10	; 16
    7212:	fb e0       	ldi	r31, 0x0B	; 11
    7214:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    7216:	40 ec       	ldi	r20, 0xC0	; 192
    7218:	5d e5       	ldi	r21, 0x5D	; 93
    721a:	44 87       	std	Z+12, r20	; 0x0c
    721c:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    721e:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    7220:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    7222:	e0 e3       	ldi	r30, 0x30	; 48
    7224:	fb e0       	ldi	r31, 0x0B	; 11
    7226:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    7228:	24 87       	std	Z+12, r18	; 0x0c
    722a:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    722c:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    722e:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    7230:	80 e0       	ldi	r24, 0x00	; 0
    7232:	08 95       	ret

00007234 <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    7234:	0f 93       	push	r16
    7236:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    7238:	61 15       	cp	r22, r1
    723a:	71 05       	cpc	r23, r1
    723c:	81 05       	cpc	r24, r1
    723e:	91 05       	cpc	r25, r1
    7240:	09 f4       	brne	.+2      	; 0x7244 <util_delay_ms+0x10>
    7242:	67 c0       	rjmp	.+206    	; 0x7312 <util_delay_ms+0xde>
	{
		if(counting)
    7244:	20 91 55 48 	lds	r18, 0x4855	; 0x804855 <_ZZ13util_delay_msE8counting>
    7248:	22 23       	and	r18, r18
    724a:	f1 f1       	breq	.+124    	; 0x72c8 <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    724c:	00 91 56 48 	lds	r16, 0x4856	; 0x804856 <_ZL12g_ms_counter>
    7250:	10 91 57 48 	lds	r17, 0x4857	; 0x804857 <_ZL12g_ms_counter+0x1>
    7254:	20 91 58 48 	lds	r18, 0x4858	; 0x804858 <_ZL12g_ms_counter+0x2>
    7258:	30 91 59 48 	lds	r19, 0x4859	; 0x804859 <_ZL12g_ms_counter+0x3>
    725c:	01 2b       	or	r16, r17
    725e:	02 2b       	or	r16, r18
    7260:	03 2b       	or	r16, r19
    7262:	71 f4       	brne	.+28     	; 0x7280 <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    7264:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    7268:	10 92 55 48 	sts	0x4855, r1	; 0x804855 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    726c:	10 92 51 48 	sts	0x4851, r1	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    7270:	10 92 52 48 	sts	0x4852, r1	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    7274:	10 92 53 48 	sts	0x4853, r1	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    7278:	10 92 54 48 	sts	0x4854, r1	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    727c:	80 e0       	ldi	r24, 0x00	; 0
    727e:	62 c0       	rjmp	.+196    	; 0x7344 <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    7280:	00 91 51 48 	lds	r16, 0x4851	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    7284:	10 91 52 48 	lds	r17, 0x4852	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    7288:	20 91 53 48 	lds	r18, 0x4853	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    728c:	30 91 54 48 	lds	r19, 0x4854	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
    7290:	60 17       	cp	r22, r16
    7292:	71 07       	cpc	r23, r17
    7294:	82 07       	cpc	r24, r18
    7296:	93 07       	cpc	r25, r19
    7298:	09 f4       	brne	.+2      	; 0x729c <util_delay_ms+0x68>
    729a:	51 c0       	rjmp	.+162    	; 0x733e <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    729c:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    72a0:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    72a4:	60 93 51 48 	sts	0x4851, r22	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    72a8:	70 93 52 48 	sts	0x4852, r23	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    72ac:	80 93 53 48 	sts	0x4853, r24	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    72b0:	90 93 54 48 	sts	0x4854, r25	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    72b4:	60 93 56 48 	sts	0x4856, r22	; 0x804856 <_ZL12g_ms_counter>
    72b8:	70 93 57 48 	sts	0x4857, r23	; 0x804857 <_ZL12g_ms_counter+0x1>
    72bc:	80 93 58 48 	sts	0x4858, r24	; 0x804858 <_ZL12g_ms_counter+0x2>
    72c0:	90 93 59 48 	sts	0x4859, r25	; 0x804859 <_ZL12g_ms_counter+0x3>
				return(false);
    72c4:	80 e0       	ldi	r24, 0x00	; 0
    72c6:	3e c0       	rjmp	.+124    	; 0x7344 <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    72c8:	00 91 51 48 	lds	r16, 0x4851	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    72cc:	10 91 52 48 	lds	r17, 0x4852	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    72d0:	20 91 53 48 	lds	r18, 0x4853	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    72d4:	30 91 54 48 	lds	r19, 0x4854	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
    72d8:	60 17       	cp	r22, r16
    72da:	71 07       	cpc	r23, r17
    72dc:	82 07       	cpc	r24, r18
    72de:	93 07       	cpc	r25, r19
    72e0:	71 f1       	breq	.+92     	; 0x733e <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    72e2:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    72e6:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    72ea:	60 93 51 48 	sts	0x4851, r22	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    72ee:	70 93 52 48 	sts	0x4852, r23	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    72f2:	80 93 53 48 	sts	0x4853, r24	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    72f6:	90 93 54 48 	sts	0x4854, r25	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    72fa:	60 93 56 48 	sts	0x4856, r22	; 0x804856 <_ZL12g_ms_counter>
    72fe:	70 93 57 48 	sts	0x4857, r23	; 0x804857 <_ZL12g_ms_counter+0x1>
    7302:	80 93 58 48 	sts	0x4858, r24	; 0x804858 <_ZL12g_ms_counter+0x2>
    7306:	90 93 59 48 	sts	0x4859, r25	; 0x804859 <_ZL12g_ms_counter+0x3>
			counting = true;
    730a:	81 e0       	ldi	r24, 0x01	; 1
    730c:	80 93 55 48 	sts	0x4855, r24	; 0x804855 <_ZZ13util_delay_msE8counting>
    7310:	16 c0       	rjmp	.+44     	; 0x733e <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    7312:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    7316:	10 92 55 48 	sts	0x4855, r1	; 0x804855 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    731a:	10 92 51 48 	sts	0x4851, r1	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    731e:	10 92 52 48 	sts	0x4852, r1	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    7322:	10 92 53 48 	sts	0x4853, r1	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    7326:	10 92 54 48 	sts	0x4854, r1	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    732a:	10 92 56 48 	sts	0x4856, r1	; 0x804856 <_ZL12g_ms_counter>
    732e:	10 92 57 48 	sts	0x4857, r1	; 0x804857 <_ZL12g_ms_counter+0x1>
    7332:	10 92 58 48 	sts	0x4858, r1	; 0x804858 <_ZL12g_ms_counter+0x2>
    7336:	10 92 59 48 	sts	0x4859, r1	; 0x804859 <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    733a:	80 e0       	ldi	r24, 0x00	; 0
    733c:	03 c0       	rjmp	.+6      	; 0x7344 <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    733e:	81 e0       	ldi	r24, 0x01	; 1
    7340:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    7344:	1f 91       	pop	r17
    7346:	0f 91       	pop	r16
    7348:	08 95       	ret

0000734a <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    734a:	1f 92       	push	r1
    734c:	0f 92       	push	r0
    734e:	0f b6       	in	r0, 0x3f	; 63
    7350:	0f 92       	push	r0
    7352:	11 24       	eor	r1, r1
    7354:	8f 93       	push	r24
    7356:	9f 93       	push	r25
    7358:	af 93       	push	r26
    735a:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    735c:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    7360:	80 ff       	sbrs	r24, 0
    7362:	1d c0       	rjmp	.+58     	; 0x739e <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    7364:	80 91 56 48 	lds	r24, 0x4856	; 0x804856 <_ZL12g_ms_counter>
    7368:	90 91 57 48 	lds	r25, 0x4857	; 0x804857 <_ZL12g_ms_counter+0x1>
    736c:	a0 91 58 48 	lds	r26, 0x4858	; 0x804858 <_ZL12g_ms_counter+0x2>
    7370:	b0 91 59 48 	lds	r27, 0x4859	; 0x804859 <_ZL12g_ms_counter+0x3>
    7374:	00 97       	sbiw	r24, 0x00	; 0
    7376:	a1 05       	cpc	r26, r1
    7378:	b1 05       	cpc	r27, r1
    737a:	61 f0       	breq	.+24     	; 0x7394 <__vector_13+0x4a>
		{
			g_ms_counter--;	
    737c:	01 97       	sbiw	r24, 0x01	; 1
    737e:	a1 09       	sbc	r26, r1
    7380:	b1 09       	sbc	r27, r1
    7382:	80 93 56 48 	sts	0x4856, r24	; 0x804856 <_ZL12g_ms_counter>
    7386:	90 93 57 48 	sts	0x4857, r25	; 0x804857 <_ZL12g_ms_counter+0x1>
    738a:	a0 93 58 48 	sts	0x4858, r26	; 0x804858 <_ZL12g_ms_counter+0x2>
    738e:	b0 93 59 48 	sts	0x4859, r27	; 0x804859 <_ZL12g_ms_counter+0x3>
    7392:	02 c0       	rjmp	.+4      	; 0x7398 <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    7394:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    7398:	81 e0       	ldi	r24, 0x01	; 1
    739a:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    739e:	bf 91       	pop	r27
    73a0:	af 91       	pop	r26
    73a2:	9f 91       	pop	r25
    73a4:	8f 91       	pop	r24
    73a6:	0f 90       	pop	r0
    73a8:	0f be       	out	0x3f, r0	; 63
    73aa:	0f 90       	pop	r0
    73ac:	1f 90       	pop	r1
    73ae:	18 95       	reti

000073b0 <_Z14txSetFrequencyPmh>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
    73b0:	0f 93       	push	r16
    73b2:	1f 93       	push	r17
    73b4:	cf 93       	push	r28
    73b6:	df 93       	push	r29
    73b8:	fc 01       	movw	r30, r24
    73ba:	46 2f       	mov	r20, r22
		BOOL activeBandSet = FALSE;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    73bc:	60 81       	ld	r22, Z
    73be:	71 81       	ldd	r23, Z+1	; 0x01
    73c0:	82 81       	ldd	r24, Z+2	; 0x02
    73c2:	93 81       	ldd	r25, Z+3	; 0x03
    73c4:	8b 01       	movw	r16, r22
    73c6:	9c 01       	movw	r18, r24
    73c8:	01 5e       	subi	r16, 0xE1	; 225
    73ca:	17 46       	sbci	r17, 0x67	; 103
    73cc:	25 43       	sbci	r18, 0x35	; 53
    73ce:	31 09       	sbc	r19, r1
    73d0:	0f 31       	cpi	r16, 0x1F	; 31
    73d2:	11 4a       	sbci	r17, 0xA1	; 161
    73d4:	27 40       	sbci	r18, 0x07	; 7
    73d6:	31 05       	cpc	r19, r1
    73d8:	98 f4       	brcc	.+38     	; 0x7400 <_Z14txSetFrequencyPmh+0x50>
    73da:	24 2f       	mov	r18, r20
    73dc:	ef 01       	movw	r28, r30
		{
			si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff);
    73de:	41 e0       	ldi	r20, 0x01	; 1
    73e0:	0e 94 b3 37 	call	0x6f66	; 0x6f66 <si5351_set_freq>
			g_80m_frequency = *freq;
    73e4:	88 81       	ld	r24, Y
    73e6:	99 81       	ldd	r25, Y+1	; 0x01
    73e8:	aa 81       	ldd	r26, Y+2	; 0x02
    73ea:	bb 81       	ldd	r27, Y+3	; 0x03
    73ec:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    73f0:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    73f4:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    73f8:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
			activeBandSet = TRUE;
    73fc:	81 e0       	ldi	r24, 0x01	; 1
    73fe:	01 c0       	rjmp	.+2      	; 0x7402 <_Z14txSetFrequencyPmh+0x52>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
		BOOL activeBandSet = FALSE;
    7400:	80 e0       	ldi	r24, 0x00	; 0
			g_80m_frequency = *freq;
			activeBandSet = TRUE;
		}

		return( activeBandSet);
	}
    7402:	df 91       	pop	r29
    7404:	cf 91       	pop	r28
    7406:	1f 91       	pop	r17
    7408:	0f 91       	pop	r16
    740a:	08 95       	ret

0000740c <_Z14txGetFrequencyv>:

	Frequency_Hz txGetFrequency(void)
	{
		return( g_80m_frequency);
    740c:	60 91 2c 40 	lds	r22, 0x402C	; 0x80402c <g_80m_frequency>
    7410:	70 91 2d 40 	lds	r23, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    7414:	80 91 2e 40 	lds	r24, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    7418:	90 91 2f 40 	lds	r25, 0x402F	; 0x80402f <g_80m_frequency+0x3>
	}
    741c:	08 95       	ret

0000741e <_Z18powerToTransmitterh>:
		{
// 			PORTB &= ~(1 << PORTB1);  /* Turn off 80m band */
		}

		return(result);
	}
    741e:	80 e0       	ldi	r24, 0x00	; 0
    7420:	08 95       	ret

00007422 <_Z14keyTransmitterh>:

	void keyTransmitter(BOOL on)
	{
		if(g_tx_initialized)
    7422:	90 91 5a 48 	lds	r25, 0x485A	; 0x80485a <_ZL16g_tx_initialized>
    7426:	99 23       	and	r25, r25
    7428:	c1 f0       	breq	.+48     	; 0x745a <_Z14keyTransmitterh+0x38>
		{			
			if(on)
    742a:	88 23       	and	r24, r24
    742c:	71 f0       	breq	.+28     	; 0x744a <_Z14keyTransmitterh+0x28>
			{
				if(!g_transmitter_keyed)
    742e:	80 91 5b 48 	lds	r24, 0x485B	; 0x80485b <_ZL19g_transmitter_keyed>
    7432:	81 11       	cpse	r24, r1
    7434:	12 c0       	rjmp	.+36     	; 0x745a <_Z14keyTransmitterh+0x38>
				{
					if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED) == ERROR_CODE_NO_ERROR)
    7436:	61 e0       	ldi	r22, 0x01	; 1
    7438:	81 e0       	ldi	r24, 0x01	; 1
    743a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <si5351_clock_enable>
    743e:	81 11       	cpse	r24, r1
    7440:	0c c0       	rjmp	.+24     	; 0x745a <_Z14keyTransmitterh+0x38>
					{
						g_transmitter_keyed = TRUE;
    7442:	81 e0       	ldi	r24, 0x01	; 1
    7444:	80 93 5b 48 	sts	0x485B, r24	; 0x80485b <_ZL19g_transmitter_keyed>
    7448:	08 95       	ret
					}
				}
			}
			else
			{
				if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED) == ERROR_CODE_NO_ERROR)
    744a:	60 e0       	ldi	r22, 0x00	; 0
    744c:	81 e0       	ldi	r24, 0x01	; 1
    744e:	0e 94 33 36 	call	0x6c66	; 0x6c66 <si5351_clock_enable>
    7452:	81 11       	cpse	r24, r1
    7454:	02 c0       	rjmp	.+4      	; 0x745a <_Z14keyTransmitterh+0x38>
				{
					g_transmitter_keyed = FALSE;
    7456:	10 92 5b 48 	sts	0x485B, r1	; 0x80485b <_ZL19g_transmitter_keyed>
    745a:	08 95       	ret

0000745c <_Z12txGetPowerMwv>:
		}
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
    745c:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    7460:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
	}
    7464:	08 95       	ret

00007466 <_Z15txSetParametersPjPh>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, BOOL* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, BOOL* enableDriverPwr) */
	{
    7466:	cf 93       	push	r28
    7468:	df 93       	push	r29
    746a:	cd b7       	in	r28, 0x3d	; 61
    746c:	de b7       	in	r29, 0x3e	; 62
    746e:	2b 97       	sbiw	r28, 0x0b	; 11
    7470:	cd bf       	out	0x3d, r28	; 61
    7472:	de bf       	out	0x3e, r29	; 62
    7474:	88 87       	std	Y+8, r24	; 0x08
    7476:	99 87       	std	Y+9, r25	; 0x09
    7478:	6a 87       	std	Y+10, r22	; 0x0a
    747a:	7b 87       	std	Y+11, r23	; 0x0b
		BOOL err = FALSE;
    747c:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    747e:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    7480:	1b 82       	std	Y+3, r1	; 0x03
    7482:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW)
    7484:	88 85       	ldd	r24, Y+8	; 0x08
    7486:	99 85       	ldd	r25, Y+9	; 0x09
    7488:	89 2b       	or	r24, r25
    748a:	39 f0       	breq	.+14     	; 0x749a <_Z15txSetParametersPjPh+0x34>
		{
			power = *power_mW;
    748c:	88 85       	ldd	r24, Y+8	; 0x08
    748e:	99 85       	ldd	r25, Y+9	; 0x09
    7490:	fc 01       	movw	r30, r24
    7492:	80 81       	ld	r24, Z
    7494:	91 81       	ldd	r25, Z+1	; 0x01
    7496:	8b 83       	std	Y+3, r24	; 0x03
    7498:	9c 83       	std	Y+4, r25	; 0x04
		}

		if(power_mW != NULL)
    749a:	88 85       	ldd	r24, Y+8	; 0x08
    749c:	99 85       	ldd	r25, Y+9	; 0x09
    749e:	89 2b       	or	r24, r25
    74a0:	09 f4       	brne	.+2      	; 0x74a4 <_Z15txSetParametersPjPh+0x3e>
    74a2:	4e c0       	rjmp	.+156    	; 0x7540 <_Z15txSetParametersPjPh+0xda>
		{
			if(power <= MAX_TX_POWER_80M_MW)
    74a4:	8b 81       	ldd	r24, Y+3	; 0x03
    74a6:	9c 81       	ldd	r25, Y+4	; 0x04
    74a8:	89 38       	cpi	r24, 0x89	; 137
    74aa:	93 41       	sbci	r25, 0x13	; 19
    74ac:	08 f0       	brcs	.+2      	; 0x74b0 <_Z15txSetParametersPjPh+0x4a>
    74ae:	44 c0       	rjmp	.+136    	; 0x7538 <_Z15txSetParametersPjPh+0xd2>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    74b0:	9e 01       	movw	r18, r28
    74b2:	29 5f       	subi	r18, 0xF9	; 249
    74b4:	3f 4f       	sbci	r19, 0xFF	; 255
    74b6:	ae 01       	movw	r20, r28
    74b8:	4a 5f       	subi	r20, 0xFA	; 250
    74ba:	5f 4f       	sbci	r21, 0xFF	; 255
    74bc:	be 01       	movw	r22, r28
    74be:	6b 5f       	subi	r22, 0xFB	; 251
    74c0:	7f 4f       	sbci	r23, 0xFF	; 255
    74c2:	ce 01       	movw	r24, r28
    74c4:	03 96       	adiw	r24, 0x03	; 3
    74c6:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    74ca:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    74cc:	81 e0       	ldi	r24, 0x01	; 1
    74ce:	9a 81       	ldd	r25, Y+2	; 0x02
    74d0:	9f 3c       	cpi	r25, 0xCF	; 207
    74d2:	09 f0       	breq	.+2      	; 0x74d6 <_Z15txSetParametersPjPh+0x70>
    74d4:	80 e0       	ldi	r24, 0x00	; 0
    74d6:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    74d8:	8b 81       	ldd	r24, Y+3	; 0x03
    74da:	9c 81       	ldd	r25, Y+4	; 0x04
    74dc:	21 e0       	ldi	r18, 0x01	; 1
    74de:	89 2b       	or	r24, r25
    74e0:	09 f0       	breq	.+2      	; 0x74e4 <_Z15txSetParametersPjPh+0x7e>
    74e2:	20 e0       	ldi	r18, 0x00	; 0
    74e4:	82 2f       	mov	r24, r18
    74e6:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>

				if(!err)
    74ea:	89 81       	ldd	r24, Y+1	; 0x01
    74ec:	88 23       	and	r24, r24
    74ee:	e1 f4       	brne	.+56     	; 0x7528 <_Z15txSetParametersPjPh+0xc2>
				{
					g_80m_power_level_mW = power;
    74f0:	8b 81       	ldd	r24, Y+3	; 0x03
    74f2:	9c 81       	ldd	r25, Y+4	; 0x04
    74f4:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    74f8:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    74fc:	0e 94 a9 3b 	call	0x7752	; 0x7752 <_Z18txIsAntennaForBandv>
    7500:	98 2f       	mov	r25, r24
    7502:	81 e0       	ldi	r24, 0x01	; 1
    7504:	99 23       	and	r25, r25
    7506:	09 f4       	brne	.+2      	; 0x750a <_Z15txSetParametersPjPh+0xa4>
    7508:	80 e0       	ldi	r24, 0x00	; 0
    750a:	88 23       	and	r24, r24
    750c:	39 f4       	brne	.+14     	; 0x751c <_Z15txSetParametersPjPh+0xb6>
// 							code = ERROR_CODE_DAC1_NONRESPONSIVE;
// 						}
					}
					else
					{
						g_tx_power_is_zero = TRUE;
    750e:	81 e0       	ldi	r24, 0x01	; 1
    7510:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>
						err = TRUE;
    7514:	81 e0       	ldi	r24, 0x01	; 1
    7516:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    7518:	86 ef       	ldi	r24, 0xF6	; 246
    751a:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || err || (drainVoltageDAC == 0))
    751c:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    7520:	88 23       	and	r24, r24
    7522:	09 f4       	brne	.+2      	; 0x7526 <_Z15txSetParametersPjPh+0xc0>
    7524:	89 81       	ldd	r24, Y+1	; 0x01
    7526:	00 00       	nop
					{
// 							PORTB |= (1 << PORTB6);     /* Turn on Tx power */
					}
				}

				*power_mW = power;
    7528:	2b 81       	ldd	r18, Y+3	; 0x03
    752a:	3c 81       	ldd	r19, Y+4	; 0x04
    752c:	88 85       	ldd	r24, Y+8	; 0x08
    752e:	99 85       	ldd	r25, Y+9	; 0x09
    7530:	fc 01       	movw	r30, r24
    7532:	20 83       	st	Z, r18
    7534:	31 83       	std	Z+1, r19	; 0x01
    7536:	04 c0       	rjmp	.+8      	; 0x7540 <_Z15txSetParametersPjPh+0xda>
			}
			else
			{
				err = TRUE;
    7538:	81 e0       	ldi	r24, 0x01	; 1
    753a:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    753c:	85 ef       	ldi	r24, 0xF5	; 245
    753e:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    7540:	89 81       	ldd	r24, Y+1	; 0x01
			{
				powerToTransmitter(*enableDriverPwr);
			}
		}

		return(code);
    7542:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    7544:	2b 96       	adiw	r28, 0x0b	; 11
    7546:	cd bf       	out	0x3d, r28	; 61
    7548:	de bf       	out	0x3e, r29	; 62
    754a:	df 91       	pop	r29
    754c:	cf 91       	pop	r28
    754e:	08 95       	ret

00007550 <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    7550:	1f 93       	push	r17
    7552:	cf 93       	push	r28
    7554:	df 93       	push	r29
    7556:	00 d0       	rcall	.+0      	; 0x7558 <_Z16init_transmitterv+0x8>
    7558:	cd b7       	in	r28, 0x3d	; 61
    755a:	de b7       	in	r29, 0x3e	; 62
		EC code;

		if((code = (EC)si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    755c:	40 e0       	ldi	r20, 0x00	; 0
    755e:	50 e0       	ldi	r21, 0x00	; 0
    7560:	ba 01       	movw	r22, r20
    7562:	80 e4       	ldi	r24, 0x40	; 64
    7564:	0e 94 7e 35 	call	0x6afc	; 0x6afc <si5351_init>
    7568:	81 11       	cpse	r24, r1
    756a:	2b c0       	rjmp	.+86     	; 0x75c2 <_Z16init_transmitterv+0x72>
		{
			return( code);
		}

		if((code = txSetParameters(NULL, NULL)))
    756c:	60 e0       	ldi	r22, 0x00	; 0
    756e:	70 e0       	ldi	r23, 0x00	; 0
    7570:	80 e0       	ldi	r24, 0x00	; 0
    7572:	90 e0       	ldi	r25, 0x00	; 0
    7574:	0e 94 33 3a 	call	0x7466	; 0x7466 <_Z15txSetParametersPjPh>
    7578:	81 11       	cpse	r24, r1
    757a:	23 c0       	rjmp	.+70     	; 0x75c2 <_Z16init_transmitterv+0x72>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    757c:	63 e0       	ldi	r22, 0x03	; 3
    757e:	81 e0       	ldi	r24, 0x01	; 1
    7580:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <si5351_drive_strength>
    7584:	81 11       	cpse	r24, r1
    7586:	1d c0       	rjmp	.+58     	; 0x75c2 <_Z16init_transmitterv+0x72>
		{
			return( code);
		}
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    7588:	60 e0       	ldi	r22, 0x00	; 0
    758a:	81 e0       	ldi	r24, 0x01	; 1
    758c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <si5351_clock_enable>
    7590:	18 2f       	mov	r17, r24
    7592:	81 11       	cpse	r24, r1
    7594:	16 c0       	rjmp	.+44     	; 0x75c2 <_Z16init_transmitterv+0x72>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    7596:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    759a:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    759e:	89 83       	std	Y+1, r24	; 0x01
    75a0:	9a 83       	std	Y+2, r25	; 0x02
		txSetFrequency((Frequency_Hz*)&g_80m_frequency, TRUE);
    75a2:	61 e0       	ldi	r22, 0x01	; 1
    75a4:	8c e2       	ldi	r24, 0x2C	; 44
    75a6:	90 e4       	ldi	r25, 0x40	; 64
    75a8:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <_Z14txSetFrequencyPmh>
		txSetParameters(&pwr_mW, NULL);
    75ac:	60 e0       	ldi	r22, 0x00	; 0
    75ae:	70 e0       	ldi	r23, 0x00	; 0
    75b0:	ce 01       	movw	r24, r28
    75b2:	01 96       	adiw	r24, 0x01	; 1
    75b4:	0e 94 33 3a 	call	0x7466	; 0x7466 <_Z15txSetParametersPjPh>

		g_tx_initialized = TRUE;
    75b8:	81 e0       	ldi	r24, 0x01	; 1
    75ba:	80 93 5a 48 	sts	0x485A, r24	; 0x80485a <_ZL16g_tx_initialized>

		return( code);
    75be:	81 2f       	mov	r24, r17
    75c0:	00 c0       	rjmp	.+0      	; 0x75c2 <_Z16init_transmitterv+0x72>
	}
    75c2:	0f 90       	pop	r0
    75c4:	0f 90       	pop	r0
    75c6:	df 91       	pop	r29
    75c8:	cf 91       	pop	r28
    75ca:	1f 91       	pop	r17
    75cc:	08 95       	ret

000075ce <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    75ce:	cf 93       	push	r28
    75d0:	df 93       	push	r29
    75d2:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    75d4:	89 2b       	or	r24, r25
    75d6:	09 f4       	brne	.+2      	; 0x75da <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    75d8:	b8 c0       	rjmp	.+368    	; 0x774a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    75da:	ed 91       	ld	r30, X+
    75dc:	fc 91       	ld	r31, X
    75de:	11 97       	sbiw	r26, 0x01	; 1
    75e0:	e9 38       	cpi	r30, 0x89	; 137
    75e2:	83 e1       	ldi	r24, 0x13	; 19
    75e4:	f8 07       	cpc	r31, r24
    75e6:	14 f4       	brge	.+4      	; 0x75ec <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    75e8:	80 e0       	ldi	r24, 0x00	; 0
    75ea:	01 c0       	rjmp	.+2      	; 0x75ee <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    75ec:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    75ee:	e9 38       	cpi	r30, 0x89	; 137
    75f0:	93 e1       	ldi	r25, 0x13	; 19
    75f2:	f9 07       	cpc	r31, r25
    75f4:	2c f4       	brge	.+10     	; 0x7600 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    75f6:	ff 23       	and	r31, r31
    75f8:	2c f4       	brge	.+10     	; 0x7604 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    75fa:	e0 e0       	ldi	r30, 0x00	; 0
    75fc:	f0 e0       	ldi	r31, 0x00	; 0
    75fe:	02 c0       	rjmp	.+4      	; 0x7604 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    7600:	e8 e8       	ldi	r30, 0x88	; 136
    7602:	f3 e1       	ldi	r31, 0x13	; 19
    7604:	ef 01       	movw	r28, r30
    7606:	ed 93       	st	X+, r30
    7608:	fc 93       	st	X, r31
    760a:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    760c:	e5 30       	cpi	r30, 0x05	; 5
    760e:	f1 05       	cpc	r31, r1
    7610:	20 f4       	brcc	.+8      	; 0x761a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    7612:	1d 92       	st	X+, r1
    7614:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    7616:	e0 e0       	ldi	r30, 0x00	; 0
    7618:	8d c0       	rjmp	.+282    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    761a:	e2 33       	cpi	r30, 0x32	; 50
    761c:	f1 05       	cpc	r31, r1
    761e:	30 f4       	brcc	.+12     	; 0x762c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    7620:	ea e0       	ldi	r30, 0x0A	; 10
    7622:	f0 e0       	ldi	r31, 0x00	; 0
    7624:	ed 93       	st	X+, r30
    7626:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    7628:	e1 e0       	ldi	r30, 0x01	; 1
    762a:	84 c0       	rjmp	.+264    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    762c:	e6 39       	cpi	r30, 0x96	; 150
    762e:	f1 05       	cpc	r31, r1
    7630:	30 f4       	brcc	.+12     	; 0x763e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    7632:	e4 e6       	ldi	r30, 0x64	; 100
    7634:	f0 e0       	ldi	r31, 0x00	; 0
    7636:	ed 93       	st	X+, r30
    7638:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    763a:	e2 e0       	ldi	r30, 0x02	; 2
    763c:	7b c0       	rjmp	.+246    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    763e:	ea 3f       	cpi	r30, 0xFA	; 250
    7640:	f1 05       	cpc	r31, r1
    7642:	30 f4       	brcc	.+12     	; 0x7650 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    7644:	e8 ec       	ldi	r30, 0xC8	; 200
    7646:	f0 e0       	ldi	r31, 0x00	; 0
    7648:	ed 93       	st	X+, r30
    764a:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    764c:	e3 e0       	ldi	r30, 0x03	; 3
    764e:	72 c0       	rjmp	.+228    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    7650:	ce 35       	cpi	r28, 0x5E	; 94
    7652:	e1 e0       	ldi	r30, 0x01	; 1
    7654:	de 07       	cpc	r29, r30
    7656:	30 f4       	brcc	.+12     	; 0x7664 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    7658:	ec e2       	ldi	r30, 0x2C	; 44
    765a:	f1 e0       	ldi	r31, 0x01	; 1
    765c:	ed 93       	st	X+, r30
    765e:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    7660:	e4 e0       	ldi	r30, 0x04	; 4
    7662:	68 c0       	rjmp	.+208    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    7664:	c2 3c       	cpi	r28, 0xC2	; 194
    7666:	f1 e0       	ldi	r31, 0x01	; 1
    7668:	df 07       	cpc	r29, r31
    766a:	30 f4       	brcc	.+12     	; 0x7678 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    766c:	e0 e9       	ldi	r30, 0x90	; 144
    766e:	f1 e0       	ldi	r31, 0x01	; 1
    7670:	ed 93       	st	X+, r30
    7672:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    7674:	e5 e0       	ldi	r30, 0x05	; 5
    7676:	5e c0       	rjmp	.+188    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    7678:	c6 32       	cpi	r28, 0x26	; 38
    767a:	92 e0       	ldi	r25, 0x02	; 2
    767c:	d9 07       	cpc	r29, r25
    767e:	30 f4       	brcc	.+12     	; 0x768c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    7680:	e4 ef       	ldi	r30, 0xF4	; 244
    7682:	f1 e0       	ldi	r31, 0x01	; 1
    7684:	ed 93       	st	X+, r30
    7686:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    7688:	e6 e0       	ldi	r30, 0x06	; 6
    768a:	54 c0       	rjmp	.+168    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    768c:	ca 38       	cpi	r28, 0x8A	; 138
    768e:	e2 e0       	ldi	r30, 0x02	; 2
    7690:	de 07       	cpc	r29, r30
    7692:	30 f4       	brcc	.+12     	; 0x76a0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    7694:	e8 e5       	ldi	r30, 0x58	; 88
    7696:	f2 e0       	ldi	r31, 0x02	; 2
    7698:	ed 93       	st	X+, r30
    769a:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    769c:	e7 e0       	ldi	r30, 0x07	; 7
    769e:	4a c0       	rjmp	.+148    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    76a0:	c4 38       	cpi	r28, 0x84	; 132
    76a2:	f3 e0       	ldi	r31, 0x03	; 3
    76a4:	df 07       	cpc	r29, r31
    76a6:	30 f4       	brcc	.+12     	; 0x76b4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    76a8:	e0 e2       	ldi	r30, 0x20	; 32
    76aa:	f3 e0       	ldi	r31, 0x03	; 3
    76ac:	ed 93       	st	X+, r30
    76ae:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    76b0:	e8 e0       	ldi	r30, 0x08	; 8
    76b2:	40 c0       	rjmp	.+128    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    76b4:	c2 3e       	cpi	r28, 0xE2	; 226
    76b6:	94 e0       	ldi	r25, 0x04	; 4
    76b8:	d9 07       	cpc	r29, r25
    76ba:	30 f4       	brcc	.+12     	; 0x76c8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    76bc:	e8 ee       	ldi	r30, 0xE8	; 232
    76be:	f3 e0       	ldi	r31, 0x03	; 3
    76c0:	ed 93       	st	X+, r30
    76c2:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    76c4:	e9 e0       	ldi	r30, 0x09	; 9
    76c6:	36 c0       	rjmp	.+108    	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    76c8:	c6 3d       	cpi	r28, 0xD6	; 214
    76ca:	e6 e0       	ldi	r30, 0x06	; 6
    76cc:	de 07       	cpc	r29, r30
    76ce:	30 f4       	brcc	.+12     	; 0x76dc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    76d0:	ec ed       	ldi	r30, 0xDC	; 220
    76d2:	f5 e0       	ldi	r31, 0x05	; 5
    76d4:	ed 93       	st	X+, r30
    76d6:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    76d8:	ea e0       	ldi	r30, 0x0A	; 10
    76da:	2c c0       	rjmp	.+88     	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    76dc:	ca 3c       	cpi	r28, 0xCA	; 202
    76de:	f8 e0       	ldi	r31, 0x08	; 8
    76e0:	df 07       	cpc	r29, r31
    76e2:	30 f4       	brcc	.+12     	; 0x76f0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    76e4:	e0 ed       	ldi	r30, 0xD0	; 208
    76e6:	f7 e0       	ldi	r31, 0x07	; 7
    76e8:	ed 93       	st	X+, r30
    76ea:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    76ec:	eb e0       	ldi	r30, 0x0B	; 11
    76ee:	22 c0       	rjmp	.+68     	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    76f0:	ce 3b       	cpi	r28, 0xBE	; 190
    76f2:	9a e0       	ldi	r25, 0x0A	; 10
    76f4:	d9 07       	cpc	r29, r25
    76f6:	30 f4       	brcc	.+12     	; 0x7704 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    76f8:	e4 ec       	ldi	r30, 0xC4	; 196
    76fa:	f9 e0       	ldi	r31, 0x09	; 9
    76fc:	ed 93       	st	X+, r30
    76fe:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    7700:	ec e0       	ldi	r30, 0x0C	; 12
    7702:	18 c0       	rjmp	.+48     	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    7704:	cc 3a       	cpi	r28, 0xAC	; 172
    7706:	ed e0       	ldi	r30, 0x0D	; 13
    7708:	de 07       	cpc	r29, r30
    770a:	30 f4       	brcc	.+12     	; 0x7718 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    770c:	e8 eb       	ldi	r30, 0xB8	; 184
    770e:	fb e0       	ldi	r31, 0x0B	; 11
    7710:	ed 93       	st	X+, r30
    7712:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    7714:	ed e0       	ldi	r30, 0x0D	; 13
    7716:	0e c0       	rjmp	.+28     	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    7718:	c4 39       	cpi	r28, 0x94	; 148
    771a:	d1 41       	sbci	r29, 0x11	; 17
    771c:	30 f4       	brcc	.+12     	; 0x772a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    771e:	e0 ea       	ldi	r30, 0xA0	; 160
    7720:	ff e0       	ldi	r31, 0x0F	; 15
    7722:	ed 93       	st	X+, r30
    7724:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    7726:	ee e0       	ldi	r30, 0x0E	; 14
    7728:	05 c0       	rjmp	.+10     	; 0x7734 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    772a:	e8 e8       	ldi	r30, 0x88	; 136
    772c:	f3 e1       	ldi	r31, 0x13	; 19
    772e:	ed 93       	st	X+, r30
    7730:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    7732:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    7734:	f0 e0       	ldi	r31, 0x00	; 0
    7736:	e9 5c       	subi	r30, 0xC9	; 201
    7738:	ff 4b       	sbci	r31, 0xBF	; 191
    773a:	90 81       	ld	r25, Z
    773c:	fb 01       	movw	r30, r22
    773e:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    7740:	fa 01       	movw	r30, r20
    7742:	10 82       	st	Z, r1
	*modLevelLow = 0;
    7744:	f9 01       	movw	r30, r18
    7746:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    7748:	01 c0       	rjmp	.+2      	; 0x774c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    774a:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    774c:	df 91       	pop	r29
    774e:	cf 91       	pop	r28
    7750:	08 95       	ret

00007752 <_Z18txIsAntennaForBandv>:

/**
 */
BOOL __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    7752:	cf 93       	push	r28
    7754:	df 93       	push	r29
    7756:	1f 92       	push	r1
    7758:	cd b7       	in	r28, 0x3d	; 61
    775a:	de b7       	in	r29, 0x3e	; 62
	BOOL result = FALSE;
    775c:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    775e:	80 91 ee 44 	lds	r24, 0x44EE	; 0x8044ee <g_antenna_connect_state>
    7762:	88 2f       	mov	r24, r24
    7764:	90 e0       	ldi	r25, 0x00	; 0
    7766:	02 97       	sbiw	r24, 0x02	; 2
    7768:	09 f0       	breq	.+2      	; 0x776c <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    776a:	03 c0       	rjmp	.+6      	; 0x7772 <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = TRUE;
    776c:	81 e0       	ldi	r24, 0x01	; 1
    776e:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    7770:	00 00       	nop

		}
		break;
	}

	return( result);
    7772:	89 81       	ldd	r24, Y+1	; 0x01
}
    7774:	0f 90       	pop	r0
    7776:	df 91       	pop	r29
    7778:	cf 91       	pop	r28
    777a:	08 95       	ret

0000777c <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_enable_rx()
{
	USART4.CTRLB |= USART_RXEN_bm;
    777c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    7780:	08 95       	ret

00007782 <USART1_init>:
    7782:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <__floatunsisf>
    7786:	20 e0       	ldi	r18, 0x00	; 0
    7788:	30 e0       	ldi	r19, 0x00	; 0
    778a:	40 e8       	ldi	r20, 0x80	; 128
    778c:	51 e4       	ldi	r21, 0x41	; 65
    778e:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__mulsf3>
    7792:	9b 01       	movw	r18, r22
    7794:	ac 01       	movw	r20, r24
    7796:	60 e0       	ldi	r22, 0x00	; 0
    7798:	74 e2       	ldi	r23, 0x24	; 36
    779a:	84 e7       	ldi	r24, 0x74	; 116
    779c:	9d e4       	ldi	r25, 0x4D	; 77
    779e:	0e 94 b9 3c 	call	0x7972	; 0x7972 <__divsf3>
    77a2:	20 e0       	ldi	r18, 0x00	; 0
    77a4:	30 e0       	ldi	r19, 0x00	; 0
    77a6:	40 e0       	ldi	r20, 0x00	; 0
    77a8:	5f e3       	ldi	r21, 0x3F	; 63
    77aa:	0e 94 48 3c 	call	0x7890	; 0x7890 <__addsf3>
    77ae:	0e 94 32 3d 	call	0x7a64	; 0x7a64 <__fixunssfsi>
    77b2:	e0 e2       	ldi	r30, 0x20	; 32
    77b4:	f8 e0       	ldi	r31, 0x08	; 8
    77b6:	60 87       	std	Z+8, r22	; 0x08
    77b8:	71 87       	std	Z+9, r23	; 0x09
    77ba:	80 e8       	ldi	r24, 0x80	; 128
    77bc:	85 83       	std	Z+5, r24	; 0x05
    77be:	80 ec       	ldi	r24, 0xC0	; 192
    77c0:	86 83       	std	Z+6, r24	; 0x06
    77c2:	80 e0       	ldi	r24, 0x00	; 0
    77c4:	08 95       	ret

000077c6 <USART1_enable_tx>:
    77c6:	e0 e2       	ldi	r30, 0x20	; 32
    77c8:	f8 e0       	ldi	r31, 0x08	; 8
    77ca:	86 81       	ldd	r24, Z+6	; 0x06
    77cc:	80 64       	ori	r24, 0x40	; 64
    77ce:	86 83       	std	Z+6, r24	; 0x06
    77d0:	85 81       	ldd	r24, Z+5	; 0x05
    77d2:	80 62       	ori	r24, 0x20	; 32
    77d4:	85 83       	std	Z+5, r24	; 0x05
    77d6:	08 95       	ret

000077d8 <USART1_disable>:
    77d8:	e0 e2       	ldi	r30, 0x20	; 32
    77da:	f8 e0       	ldi	r31, 0x08	; 8
    77dc:	86 81       	ldd	r24, Z+6	; 0x06
    77de:	8f 73       	andi	r24, 0x3F	; 63
    77e0:	86 83       	std	Z+6, r24	; 0x06
    77e2:	08 95       	ret

000077e4 <USART1_get_data>:
    77e4:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    77e8:	08 95       	ret

000077ea <USART4_init>:
    77ea:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <__floatunsisf>
    77ee:	20 e0       	ldi	r18, 0x00	; 0
    77f0:	30 e0       	ldi	r19, 0x00	; 0
    77f2:	40 e8       	ldi	r20, 0x80	; 128
    77f4:	51 e4       	ldi	r21, 0x41	; 65
    77f6:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__mulsf3>
    77fa:	9b 01       	movw	r18, r22
    77fc:	ac 01       	movw	r20, r24
    77fe:	60 e0       	ldi	r22, 0x00	; 0
    7800:	74 e2       	ldi	r23, 0x24	; 36
    7802:	84 e7       	ldi	r24, 0x74	; 116
    7804:	9d e4       	ldi	r25, 0x4D	; 77
    7806:	0e 94 b9 3c 	call	0x7972	; 0x7972 <__divsf3>
    780a:	20 e0       	ldi	r18, 0x00	; 0
    780c:	30 e0       	ldi	r19, 0x00	; 0
    780e:	40 e0       	ldi	r20, 0x00	; 0
    7810:	5f e3       	ldi	r21, 0x3F	; 63
    7812:	0e 94 48 3c 	call	0x7890	; 0x7890 <__addsf3>
    7816:	0e 94 32 3d 	call	0x7a64	; 0x7a64 <__fixunssfsi>
    781a:	e0 e8       	ldi	r30, 0x80	; 128
    781c:	f8 e0       	ldi	r31, 0x08	; 8
    781e:	60 87       	std	Z+8, r22	; 0x08
    7820:	71 87       	std	Z+9, r23	; 0x09
    7822:	80 e8       	ldi	r24, 0x80	; 128
    7824:	85 83       	std	Z+5, r24	; 0x05
    7826:	80 ec       	ldi	r24, 0xC0	; 192
    7828:	86 83       	std	Z+6, r24	; 0x06
    782a:	80 e0       	ldi	r24, 0x00	; 0
    782c:	08 95       	ret

0000782e <USART4_enable_tx>:
 *
 * \return Nothing
 */
void USART4_enable_tx()
{
	USART4.CTRLB |= USART_TXEN_bm;
    782e:	e0 e8       	ldi	r30, 0x80	; 128
    7830:	f8 e0       	ldi	r31, 0x08	; 8
    7832:	86 81       	ldd	r24, Z+6	; 0x06
    7834:	80 64       	ori	r24, 0x40	; 64
    7836:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLA |= 1 << USART_DREIE_bp; /* Transmit Data Ready Interrupt Enable: enable */
    7838:	85 81       	ldd	r24, Z+5	; 0x05
    783a:	80 62       	ori	r24, 0x20	; 32
    783c:	85 83       	std	Z+5, r24	; 0x05
    783e:	08 95       	ret

00007840 <USART4_disable>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    7840:	e0 e8       	ldi	r30, 0x80	; 128
    7842:	f8 e0       	ldi	r31, 0x08	; 8
    7844:	86 81       	ldd	r24, Z+6	; 0x06
    7846:	8f 73       	andi	r24, 0x3F	; 63
    7848:	86 83       	std	Z+6, r24	; 0x06
    784a:	08 95       	ret

0000784c <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    784c:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    7850:	08 95       	ret

00007852 <_Z7timeDifmm>:
    (ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    ((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
  }

  return result;
}
    7852:	26 17       	cp	r18, r22
    7854:	37 07       	cpc	r19, r23
    7856:	48 07       	cpc	r20, r24
    7858:	59 07       	cpc	r21, r25
    785a:	28 f4       	brcc	.+10     	; 0x7866 <_Z7timeDifmm+0x14>
    785c:	62 1b       	sub	r22, r18
    785e:	73 0b       	sbc	r23, r19
    7860:	84 0b       	sbc	r24, r20
    7862:	95 0b       	sbc	r25, r21
    7864:	08 95       	ret
    7866:	62 1b       	sub	r22, r18
    7868:	73 0b       	sbc	r23, r19
    786a:	84 0b       	sbc	r24, r20
    786c:	95 0b       	sbc	r25, r21
    786e:	08 95       	ret

00007870 <_Z11only_digitsPc>:

/** 
 * Checks a string to see if it contains only numerical characters
 */
BOOL only_digits(char *s)
{
    7870:	fc 01       	movw	r30, r24
	while(*s)
    7872:	20 81       	ld	r18, Z
    7874:	22 23       	and	r18, r18
    7876:	49 f0       	breq	.+18     	; 0x788a <_Z11only_digitsPc+0x1a>
	{
		if(isdigit(*s++) == 0)
    7878:	31 96       	adiw	r30, 0x01	; 1
    787a:	30 e0       	ldi	r19, 0x00	; 0
    787c:	20 53       	subi	r18, 0x30	; 48
    787e:	31 09       	sbc	r19, r1
    7880:	2a 30       	cpi	r18, 0x0A	; 10
    7882:	31 05       	cpc	r19, r1
    7884:	b0 f3       	brcs	.-20     	; 0x7872 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    7886:	80 e0       	ldi	r24, 0x00	; 0
    7888:	08 95       	ret
		}
	}

	return( TRUE);
    788a:	81 e0       	ldi	r24, 0x01	; 1
}
    788c:	08 95       	ret

0000788e <__subsf3>:
    788e:	50 58       	subi	r21, 0x80	; 128

00007890 <__addsf3>:
    7890:	bb 27       	eor	r27, r27
    7892:	aa 27       	eor	r26, r26
    7894:	0e 94 5f 3c 	call	0x78be	; 0x78be <__addsf3x>
    7898:	0c 94 d9 3d 	jmp	0x7bb2	; 0x7bb2 <__fp_round>
    789c:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <__fp_pscA>
    78a0:	38 f0       	brcs	.+14     	; 0x78b0 <__addsf3+0x20>
    78a2:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <__fp_pscB>
    78a6:	20 f0       	brcs	.+8      	; 0x78b0 <__addsf3+0x20>
    78a8:	39 f4       	brne	.+14     	; 0x78b8 <__addsf3+0x28>
    78aa:	9f 3f       	cpi	r25, 0xFF	; 255
    78ac:	19 f4       	brne	.+6      	; 0x78b4 <__addsf3+0x24>
    78ae:	26 f4       	brtc	.+8      	; 0x78b8 <__addsf3+0x28>
    78b0:	0c 94 c8 3d 	jmp	0x7b90	; 0x7b90 <__fp_nan>
    78b4:	0e f4       	brtc	.+2      	; 0x78b8 <__addsf3+0x28>
    78b6:	e0 95       	com	r30
    78b8:	e7 fb       	bst	r30, 7
    78ba:	0c 94 c2 3d 	jmp	0x7b84	; 0x7b84 <__fp_inf>

000078be <__addsf3x>:
    78be:	e9 2f       	mov	r30, r25
    78c0:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__fp_split3>
    78c4:	58 f3       	brcs	.-42     	; 0x789c <__addsf3+0xc>
    78c6:	ba 17       	cp	r27, r26
    78c8:	62 07       	cpc	r22, r18
    78ca:	73 07       	cpc	r23, r19
    78cc:	84 07       	cpc	r24, r20
    78ce:	95 07       	cpc	r25, r21
    78d0:	20 f0       	brcs	.+8      	; 0x78da <__addsf3x+0x1c>
    78d2:	79 f4       	brne	.+30     	; 0x78f2 <__addsf3x+0x34>
    78d4:	a6 f5       	brtc	.+104    	; 0x793e <__addsf3x+0x80>
    78d6:	0c 94 0c 3e 	jmp	0x7c18	; 0x7c18 <__fp_zero>
    78da:	0e f4       	brtc	.+2      	; 0x78de <__addsf3x+0x20>
    78dc:	e0 95       	com	r30
    78de:	0b 2e       	mov	r0, r27
    78e0:	ba 2f       	mov	r27, r26
    78e2:	a0 2d       	mov	r26, r0
    78e4:	0b 01       	movw	r0, r22
    78e6:	b9 01       	movw	r22, r18
    78e8:	90 01       	movw	r18, r0
    78ea:	0c 01       	movw	r0, r24
    78ec:	ca 01       	movw	r24, r20
    78ee:	a0 01       	movw	r20, r0
    78f0:	11 24       	eor	r1, r1
    78f2:	ff 27       	eor	r31, r31
    78f4:	59 1b       	sub	r21, r25
    78f6:	99 f0       	breq	.+38     	; 0x791e <__addsf3x+0x60>
    78f8:	59 3f       	cpi	r21, 0xF9	; 249
    78fa:	50 f4       	brcc	.+20     	; 0x7910 <__addsf3x+0x52>
    78fc:	50 3e       	cpi	r21, 0xE0	; 224
    78fe:	68 f1       	brcs	.+90     	; 0x795a <__addsf3x+0x9c>
    7900:	1a 16       	cp	r1, r26
    7902:	f0 40       	sbci	r31, 0x00	; 0
    7904:	a2 2f       	mov	r26, r18
    7906:	23 2f       	mov	r18, r19
    7908:	34 2f       	mov	r19, r20
    790a:	44 27       	eor	r20, r20
    790c:	58 5f       	subi	r21, 0xF8	; 248
    790e:	f3 cf       	rjmp	.-26     	; 0x78f6 <__addsf3x+0x38>
    7910:	46 95       	lsr	r20
    7912:	37 95       	ror	r19
    7914:	27 95       	ror	r18
    7916:	a7 95       	ror	r26
    7918:	f0 40       	sbci	r31, 0x00	; 0
    791a:	53 95       	inc	r21
    791c:	c9 f7       	brne	.-14     	; 0x7910 <__addsf3x+0x52>
    791e:	7e f4       	brtc	.+30     	; 0x793e <__addsf3x+0x80>
    7920:	1f 16       	cp	r1, r31
    7922:	ba 0b       	sbc	r27, r26
    7924:	62 0b       	sbc	r22, r18
    7926:	73 0b       	sbc	r23, r19
    7928:	84 0b       	sbc	r24, r20
    792a:	ba f0       	brmi	.+46     	; 0x795a <__addsf3x+0x9c>
    792c:	91 50       	subi	r25, 0x01	; 1
    792e:	a1 f0       	breq	.+40     	; 0x7958 <__addsf3x+0x9a>
    7930:	ff 0f       	add	r31, r31
    7932:	bb 1f       	adc	r27, r27
    7934:	66 1f       	adc	r22, r22
    7936:	77 1f       	adc	r23, r23
    7938:	88 1f       	adc	r24, r24
    793a:	c2 f7       	brpl	.-16     	; 0x792c <__addsf3x+0x6e>
    793c:	0e c0       	rjmp	.+28     	; 0x795a <__addsf3x+0x9c>
    793e:	ba 0f       	add	r27, r26
    7940:	62 1f       	adc	r22, r18
    7942:	73 1f       	adc	r23, r19
    7944:	84 1f       	adc	r24, r20
    7946:	48 f4       	brcc	.+18     	; 0x795a <__addsf3x+0x9c>
    7948:	87 95       	ror	r24
    794a:	77 95       	ror	r23
    794c:	67 95       	ror	r22
    794e:	b7 95       	ror	r27
    7950:	f7 95       	ror	r31
    7952:	9e 3f       	cpi	r25, 0xFE	; 254
    7954:	08 f0       	brcs	.+2      	; 0x7958 <__addsf3x+0x9a>
    7956:	b0 cf       	rjmp	.-160    	; 0x78b8 <__addsf3+0x28>
    7958:	93 95       	inc	r25
    795a:	88 0f       	add	r24, r24
    795c:	08 f0       	brcs	.+2      	; 0x7960 <__addsf3x+0xa2>
    795e:	99 27       	eor	r25, r25
    7960:	ee 0f       	add	r30, r30
    7962:	97 95       	ror	r25
    7964:	87 95       	ror	r24
    7966:	08 95       	ret

00007968 <__cmpsf2>:
    7968:	0e 94 9e 3d 	call	0x7b3c	; 0x7b3c <__fp_cmp>
    796c:	08 f4       	brcc	.+2      	; 0x7970 <__cmpsf2+0x8>
    796e:	81 e0       	ldi	r24, 0x01	; 1
    7970:	08 95       	ret

00007972 <__divsf3>:
    7972:	0e 94 cd 3c 	call	0x799a	; 0x799a <__divsf3x>
    7976:	0c 94 d9 3d 	jmp	0x7bb2	; 0x7bb2 <__fp_round>
    797a:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <__fp_pscB>
    797e:	58 f0       	brcs	.+22     	; 0x7996 <__divsf3+0x24>
    7980:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <__fp_pscA>
    7984:	40 f0       	brcs	.+16     	; 0x7996 <__divsf3+0x24>
    7986:	29 f4       	brne	.+10     	; 0x7992 <__divsf3+0x20>
    7988:	5f 3f       	cpi	r21, 0xFF	; 255
    798a:	29 f0       	breq	.+10     	; 0x7996 <__divsf3+0x24>
    798c:	0c 94 c2 3d 	jmp	0x7b84	; 0x7b84 <__fp_inf>
    7990:	51 11       	cpse	r21, r1
    7992:	0c 94 0d 3e 	jmp	0x7c1a	; 0x7c1a <__fp_szero>
    7996:	0c 94 c8 3d 	jmp	0x7b90	; 0x7b90 <__fp_nan>

0000799a <__divsf3x>:
    799a:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__fp_split3>
    799e:	68 f3       	brcs	.-38     	; 0x797a <__divsf3+0x8>

000079a0 <__divsf3_pse>:
    79a0:	99 23       	and	r25, r25
    79a2:	b1 f3       	breq	.-20     	; 0x7990 <__divsf3+0x1e>
    79a4:	55 23       	and	r21, r21
    79a6:	91 f3       	breq	.-28     	; 0x798c <__divsf3+0x1a>
    79a8:	95 1b       	sub	r25, r21
    79aa:	55 0b       	sbc	r21, r21
    79ac:	bb 27       	eor	r27, r27
    79ae:	aa 27       	eor	r26, r26
    79b0:	62 17       	cp	r22, r18
    79b2:	73 07       	cpc	r23, r19
    79b4:	84 07       	cpc	r24, r20
    79b6:	38 f0       	brcs	.+14     	; 0x79c6 <__divsf3_pse+0x26>
    79b8:	9f 5f       	subi	r25, 0xFF	; 255
    79ba:	5f 4f       	sbci	r21, 0xFF	; 255
    79bc:	22 0f       	add	r18, r18
    79be:	33 1f       	adc	r19, r19
    79c0:	44 1f       	adc	r20, r20
    79c2:	aa 1f       	adc	r26, r26
    79c4:	a9 f3       	breq	.-22     	; 0x79b0 <__divsf3_pse+0x10>
    79c6:	35 d0       	rcall	.+106    	; 0x7a32 <__divsf3_pse+0x92>
    79c8:	0e 2e       	mov	r0, r30
    79ca:	3a f0       	brmi	.+14     	; 0x79da <__divsf3_pse+0x3a>
    79cc:	e0 e8       	ldi	r30, 0x80	; 128
    79ce:	32 d0       	rcall	.+100    	; 0x7a34 <__divsf3_pse+0x94>
    79d0:	91 50       	subi	r25, 0x01	; 1
    79d2:	50 40       	sbci	r21, 0x00	; 0
    79d4:	e6 95       	lsr	r30
    79d6:	00 1c       	adc	r0, r0
    79d8:	ca f7       	brpl	.-14     	; 0x79cc <__divsf3_pse+0x2c>
    79da:	2b d0       	rcall	.+86     	; 0x7a32 <__divsf3_pse+0x92>
    79dc:	fe 2f       	mov	r31, r30
    79de:	29 d0       	rcall	.+82     	; 0x7a32 <__divsf3_pse+0x92>
    79e0:	66 0f       	add	r22, r22
    79e2:	77 1f       	adc	r23, r23
    79e4:	88 1f       	adc	r24, r24
    79e6:	bb 1f       	adc	r27, r27
    79e8:	26 17       	cp	r18, r22
    79ea:	37 07       	cpc	r19, r23
    79ec:	48 07       	cpc	r20, r24
    79ee:	ab 07       	cpc	r26, r27
    79f0:	b0 e8       	ldi	r27, 0x80	; 128
    79f2:	09 f0       	breq	.+2      	; 0x79f6 <__divsf3_pse+0x56>
    79f4:	bb 0b       	sbc	r27, r27
    79f6:	80 2d       	mov	r24, r0
    79f8:	bf 01       	movw	r22, r30
    79fa:	ff 27       	eor	r31, r31
    79fc:	93 58       	subi	r25, 0x83	; 131
    79fe:	5f 4f       	sbci	r21, 0xFF	; 255
    7a00:	3a f0       	brmi	.+14     	; 0x7a10 <__divsf3_pse+0x70>
    7a02:	9e 3f       	cpi	r25, 0xFE	; 254
    7a04:	51 05       	cpc	r21, r1
    7a06:	78 f0       	brcs	.+30     	; 0x7a26 <__divsf3_pse+0x86>
    7a08:	0c 94 c2 3d 	jmp	0x7b84	; 0x7b84 <__fp_inf>
    7a0c:	0c 94 0d 3e 	jmp	0x7c1a	; 0x7c1a <__fp_szero>
    7a10:	5f 3f       	cpi	r21, 0xFF	; 255
    7a12:	e4 f3       	brlt	.-8      	; 0x7a0c <__divsf3_pse+0x6c>
    7a14:	98 3e       	cpi	r25, 0xE8	; 232
    7a16:	d4 f3       	brlt	.-12     	; 0x7a0c <__divsf3_pse+0x6c>
    7a18:	86 95       	lsr	r24
    7a1a:	77 95       	ror	r23
    7a1c:	67 95       	ror	r22
    7a1e:	b7 95       	ror	r27
    7a20:	f7 95       	ror	r31
    7a22:	9f 5f       	subi	r25, 0xFF	; 255
    7a24:	c9 f7       	brne	.-14     	; 0x7a18 <__divsf3_pse+0x78>
    7a26:	88 0f       	add	r24, r24
    7a28:	91 1d       	adc	r25, r1
    7a2a:	96 95       	lsr	r25
    7a2c:	87 95       	ror	r24
    7a2e:	97 f9       	bld	r25, 7
    7a30:	08 95       	ret
    7a32:	e1 e0       	ldi	r30, 0x01	; 1
    7a34:	66 0f       	add	r22, r22
    7a36:	77 1f       	adc	r23, r23
    7a38:	88 1f       	adc	r24, r24
    7a3a:	bb 1f       	adc	r27, r27
    7a3c:	62 17       	cp	r22, r18
    7a3e:	73 07       	cpc	r23, r19
    7a40:	84 07       	cpc	r24, r20
    7a42:	ba 07       	cpc	r27, r26
    7a44:	20 f0       	brcs	.+8      	; 0x7a4e <__divsf3_pse+0xae>
    7a46:	62 1b       	sub	r22, r18
    7a48:	73 0b       	sbc	r23, r19
    7a4a:	84 0b       	sbc	r24, r20
    7a4c:	ba 0b       	sbc	r27, r26
    7a4e:	ee 1f       	adc	r30, r30
    7a50:	88 f7       	brcc	.-30     	; 0x7a34 <__divsf3_pse+0x94>
    7a52:	e0 95       	com	r30
    7a54:	08 95       	ret

00007a56 <__fixsfsi>:
    7a56:	0e 94 32 3d 	call	0x7a64	; 0x7a64 <__fixunssfsi>
    7a5a:	68 94       	set
    7a5c:	b1 11       	cpse	r27, r1
    7a5e:	0c 94 0d 3e 	jmp	0x7c1a	; 0x7c1a <__fp_szero>
    7a62:	08 95       	ret

00007a64 <__fixunssfsi>:
    7a64:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__fp_splitA>
    7a68:	88 f0       	brcs	.+34     	; 0x7a8c <__fixunssfsi+0x28>
    7a6a:	9f 57       	subi	r25, 0x7F	; 127
    7a6c:	98 f0       	brcs	.+38     	; 0x7a94 <__fixunssfsi+0x30>
    7a6e:	b9 2f       	mov	r27, r25
    7a70:	99 27       	eor	r25, r25
    7a72:	b7 51       	subi	r27, 0x17	; 23
    7a74:	b0 f0       	brcs	.+44     	; 0x7aa2 <__fixunssfsi+0x3e>
    7a76:	e1 f0       	breq	.+56     	; 0x7ab0 <__fixunssfsi+0x4c>
    7a78:	66 0f       	add	r22, r22
    7a7a:	77 1f       	adc	r23, r23
    7a7c:	88 1f       	adc	r24, r24
    7a7e:	99 1f       	adc	r25, r25
    7a80:	1a f0       	brmi	.+6      	; 0x7a88 <__fixunssfsi+0x24>
    7a82:	ba 95       	dec	r27
    7a84:	c9 f7       	brne	.-14     	; 0x7a78 <__fixunssfsi+0x14>
    7a86:	14 c0       	rjmp	.+40     	; 0x7ab0 <__fixunssfsi+0x4c>
    7a88:	b1 30       	cpi	r27, 0x01	; 1
    7a8a:	91 f0       	breq	.+36     	; 0x7ab0 <__fixunssfsi+0x4c>
    7a8c:	0e 94 0c 3e 	call	0x7c18	; 0x7c18 <__fp_zero>
    7a90:	b1 e0       	ldi	r27, 0x01	; 1
    7a92:	08 95       	ret
    7a94:	0c 94 0c 3e 	jmp	0x7c18	; 0x7c18 <__fp_zero>
    7a98:	67 2f       	mov	r22, r23
    7a9a:	78 2f       	mov	r23, r24
    7a9c:	88 27       	eor	r24, r24
    7a9e:	b8 5f       	subi	r27, 0xF8	; 248
    7aa0:	39 f0       	breq	.+14     	; 0x7ab0 <__fixunssfsi+0x4c>
    7aa2:	b9 3f       	cpi	r27, 0xF9	; 249
    7aa4:	cc f3       	brlt	.-14     	; 0x7a98 <__fixunssfsi+0x34>
    7aa6:	86 95       	lsr	r24
    7aa8:	77 95       	ror	r23
    7aaa:	67 95       	ror	r22
    7aac:	b3 95       	inc	r27
    7aae:	d9 f7       	brne	.-10     	; 0x7aa6 <__fixunssfsi+0x42>
    7ab0:	3e f4       	brtc	.+14     	; 0x7ac0 <__fixunssfsi+0x5c>
    7ab2:	90 95       	com	r25
    7ab4:	80 95       	com	r24
    7ab6:	70 95       	com	r23
    7ab8:	61 95       	neg	r22
    7aba:	7f 4f       	sbci	r23, 0xFF	; 255
    7abc:	8f 4f       	sbci	r24, 0xFF	; 255
    7abe:	9f 4f       	sbci	r25, 0xFF	; 255
    7ac0:	08 95       	ret

00007ac2 <__floatunsisf>:
    7ac2:	e8 94       	clt
    7ac4:	09 c0       	rjmp	.+18     	; 0x7ad8 <__floatsisf+0x12>

00007ac6 <__floatsisf>:
    7ac6:	97 fb       	bst	r25, 7
    7ac8:	3e f4       	brtc	.+14     	; 0x7ad8 <__floatsisf+0x12>
    7aca:	90 95       	com	r25
    7acc:	80 95       	com	r24
    7ace:	70 95       	com	r23
    7ad0:	61 95       	neg	r22
    7ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    7ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    7ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad8:	99 23       	and	r25, r25
    7ada:	a9 f0       	breq	.+42     	; 0x7b06 <__floatsisf+0x40>
    7adc:	f9 2f       	mov	r31, r25
    7ade:	96 e9       	ldi	r25, 0x96	; 150
    7ae0:	bb 27       	eor	r27, r27
    7ae2:	93 95       	inc	r25
    7ae4:	f6 95       	lsr	r31
    7ae6:	87 95       	ror	r24
    7ae8:	77 95       	ror	r23
    7aea:	67 95       	ror	r22
    7aec:	b7 95       	ror	r27
    7aee:	f1 11       	cpse	r31, r1
    7af0:	f8 cf       	rjmp	.-16     	; 0x7ae2 <__floatsisf+0x1c>
    7af2:	fa f4       	brpl	.+62     	; 0x7b32 <__floatsisf+0x6c>
    7af4:	bb 0f       	add	r27, r27
    7af6:	11 f4       	brne	.+4      	; 0x7afc <__floatsisf+0x36>
    7af8:	60 ff       	sbrs	r22, 0
    7afa:	1b c0       	rjmp	.+54     	; 0x7b32 <__floatsisf+0x6c>
    7afc:	6f 5f       	subi	r22, 0xFF	; 255
    7afe:	7f 4f       	sbci	r23, 0xFF	; 255
    7b00:	8f 4f       	sbci	r24, 0xFF	; 255
    7b02:	9f 4f       	sbci	r25, 0xFF	; 255
    7b04:	16 c0       	rjmp	.+44     	; 0x7b32 <__floatsisf+0x6c>
    7b06:	88 23       	and	r24, r24
    7b08:	11 f0       	breq	.+4      	; 0x7b0e <__floatsisf+0x48>
    7b0a:	96 e9       	ldi	r25, 0x96	; 150
    7b0c:	11 c0       	rjmp	.+34     	; 0x7b30 <__floatsisf+0x6a>
    7b0e:	77 23       	and	r23, r23
    7b10:	21 f0       	breq	.+8      	; 0x7b1a <__floatsisf+0x54>
    7b12:	9e e8       	ldi	r25, 0x8E	; 142
    7b14:	87 2f       	mov	r24, r23
    7b16:	76 2f       	mov	r23, r22
    7b18:	05 c0       	rjmp	.+10     	; 0x7b24 <__floatsisf+0x5e>
    7b1a:	66 23       	and	r22, r22
    7b1c:	71 f0       	breq	.+28     	; 0x7b3a <__floatsisf+0x74>
    7b1e:	96 e8       	ldi	r25, 0x86	; 134
    7b20:	86 2f       	mov	r24, r22
    7b22:	70 e0       	ldi	r23, 0x00	; 0
    7b24:	60 e0       	ldi	r22, 0x00	; 0
    7b26:	2a f0       	brmi	.+10     	; 0x7b32 <__floatsisf+0x6c>
    7b28:	9a 95       	dec	r25
    7b2a:	66 0f       	add	r22, r22
    7b2c:	77 1f       	adc	r23, r23
    7b2e:	88 1f       	adc	r24, r24
    7b30:	da f7       	brpl	.-10     	; 0x7b28 <__floatsisf+0x62>
    7b32:	88 0f       	add	r24, r24
    7b34:	96 95       	lsr	r25
    7b36:	87 95       	ror	r24
    7b38:	97 f9       	bld	r25, 7
    7b3a:	08 95       	ret

00007b3c <__fp_cmp>:
    7b3c:	99 0f       	add	r25, r25
    7b3e:	00 08       	sbc	r0, r0
    7b40:	55 0f       	add	r21, r21
    7b42:	aa 0b       	sbc	r26, r26
    7b44:	e0 e8       	ldi	r30, 0x80	; 128
    7b46:	fe ef       	ldi	r31, 0xFE	; 254
    7b48:	16 16       	cp	r1, r22
    7b4a:	17 06       	cpc	r1, r23
    7b4c:	e8 07       	cpc	r30, r24
    7b4e:	f9 07       	cpc	r31, r25
    7b50:	c0 f0       	brcs	.+48     	; 0x7b82 <__fp_cmp+0x46>
    7b52:	12 16       	cp	r1, r18
    7b54:	13 06       	cpc	r1, r19
    7b56:	e4 07       	cpc	r30, r20
    7b58:	f5 07       	cpc	r31, r21
    7b5a:	98 f0       	brcs	.+38     	; 0x7b82 <__fp_cmp+0x46>
    7b5c:	62 1b       	sub	r22, r18
    7b5e:	73 0b       	sbc	r23, r19
    7b60:	84 0b       	sbc	r24, r20
    7b62:	95 0b       	sbc	r25, r21
    7b64:	39 f4       	brne	.+14     	; 0x7b74 <__fp_cmp+0x38>
    7b66:	0a 26       	eor	r0, r26
    7b68:	61 f0       	breq	.+24     	; 0x7b82 <__fp_cmp+0x46>
    7b6a:	23 2b       	or	r18, r19
    7b6c:	24 2b       	or	r18, r20
    7b6e:	25 2b       	or	r18, r21
    7b70:	21 f4       	brne	.+8      	; 0x7b7a <__fp_cmp+0x3e>
    7b72:	08 95       	ret
    7b74:	0a 26       	eor	r0, r26
    7b76:	09 f4       	brne	.+2      	; 0x7b7a <__fp_cmp+0x3e>
    7b78:	a1 40       	sbci	r26, 0x01	; 1
    7b7a:	a6 95       	lsr	r26
    7b7c:	8f ef       	ldi	r24, 0xFF	; 255
    7b7e:	81 1d       	adc	r24, r1
    7b80:	81 1d       	adc	r24, r1
    7b82:	08 95       	ret

00007b84 <__fp_inf>:
    7b84:	97 f9       	bld	r25, 7
    7b86:	9f 67       	ori	r25, 0x7F	; 127
    7b88:	80 e8       	ldi	r24, 0x80	; 128
    7b8a:	70 e0       	ldi	r23, 0x00	; 0
    7b8c:	60 e0       	ldi	r22, 0x00	; 0
    7b8e:	08 95       	ret

00007b90 <__fp_nan>:
    7b90:	9f ef       	ldi	r25, 0xFF	; 255
    7b92:	80 ec       	ldi	r24, 0xC0	; 192
    7b94:	08 95       	ret

00007b96 <__fp_pscA>:
    7b96:	00 24       	eor	r0, r0
    7b98:	0a 94       	dec	r0
    7b9a:	16 16       	cp	r1, r22
    7b9c:	17 06       	cpc	r1, r23
    7b9e:	18 06       	cpc	r1, r24
    7ba0:	09 06       	cpc	r0, r25
    7ba2:	08 95       	ret

00007ba4 <__fp_pscB>:
    7ba4:	00 24       	eor	r0, r0
    7ba6:	0a 94       	dec	r0
    7ba8:	12 16       	cp	r1, r18
    7baa:	13 06       	cpc	r1, r19
    7bac:	14 06       	cpc	r1, r20
    7bae:	05 06       	cpc	r0, r21
    7bb0:	08 95       	ret

00007bb2 <__fp_round>:
    7bb2:	09 2e       	mov	r0, r25
    7bb4:	03 94       	inc	r0
    7bb6:	00 0c       	add	r0, r0
    7bb8:	11 f4       	brne	.+4      	; 0x7bbe <__fp_round+0xc>
    7bba:	88 23       	and	r24, r24
    7bbc:	52 f0       	brmi	.+20     	; 0x7bd2 <__fp_round+0x20>
    7bbe:	bb 0f       	add	r27, r27
    7bc0:	40 f4       	brcc	.+16     	; 0x7bd2 <__fp_round+0x20>
    7bc2:	bf 2b       	or	r27, r31
    7bc4:	11 f4       	brne	.+4      	; 0x7bca <__fp_round+0x18>
    7bc6:	60 ff       	sbrs	r22, 0
    7bc8:	04 c0       	rjmp	.+8      	; 0x7bd2 <__fp_round+0x20>
    7bca:	6f 5f       	subi	r22, 0xFF	; 255
    7bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    7bce:	8f 4f       	sbci	r24, 0xFF	; 255
    7bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    7bd2:	08 95       	ret

00007bd4 <__fp_split3>:
    7bd4:	57 fd       	sbrc	r21, 7
    7bd6:	90 58       	subi	r25, 0x80	; 128
    7bd8:	44 0f       	add	r20, r20
    7bda:	55 1f       	adc	r21, r21
    7bdc:	59 f0       	breq	.+22     	; 0x7bf4 <__fp_splitA+0x10>
    7bde:	5f 3f       	cpi	r21, 0xFF	; 255
    7be0:	71 f0       	breq	.+28     	; 0x7bfe <__fp_splitA+0x1a>
    7be2:	47 95       	ror	r20

00007be4 <__fp_splitA>:
    7be4:	88 0f       	add	r24, r24
    7be6:	97 fb       	bst	r25, 7
    7be8:	99 1f       	adc	r25, r25
    7bea:	61 f0       	breq	.+24     	; 0x7c04 <__fp_splitA+0x20>
    7bec:	9f 3f       	cpi	r25, 0xFF	; 255
    7bee:	79 f0       	breq	.+30     	; 0x7c0e <__fp_splitA+0x2a>
    7bf0:	87 95       	ror	r24
    7bf2:	08 95       	ret
    7bf4:	12 16       	cp	r1, r18
    7bf6:	13 06       	cpc	r1, r19
    7bf8:	14 06       	cpc	r1, r20
    7bfa:	55 1f       	adc	r21, r21
    7bfc:	f2 cf       	rjmp	.-28     	; 0x7be2 <__fp_split3+0xe>
    7bfe:	46 95       	lsr	r20
    7c00:	f1 df       	rcall	.-30     	; 0x7be4 <__fp_splitA>
    7c02:	08 c0       	rjmp	.+16     	; 0x7c14 <__fp_splitA+0x30>
    7c04:	16 16       	cp	r1, r22
    7c06:	17 06       	cpc	r1, r23
    7c08:	18 06       	cpc	r1, r24
    7c0a:	99 1f       	adc	r25, r25
    7c0c:	f1 cf       	rjmp	.-30     	; 0x7bf0 <__fp_splitA+0xc>
    7c0e:	86 95       	lsr	r24
    7c10:	71 05       	cpc	r23, r1
    7c12:	61 05       	cpc	r22, r1
    7c14:	08 94       	sec
    7c16:	08 95       	ret

00007c18 <__fp_zero>:
    7c18:	e8 94       	clt

00007c1a <__fp_szero>:
    7c1a:	bb 27       	eor	r27, r27
    7c1c:	66 27       	eor	r22, r22
    7c1e:	77 27       	eor	r23, r23
    7c20:	cb 01       	movw	r24, r22
    7c22:	97 f9       	bld	r25, 7
    7c24:	08 95       	ret

00007c26 <__gesf2>:
    7c26:	0e 94 9e 3d 	call	0x7b3c	; 0x7b3c <__fp_cmp>
    7c2a:	08 f4       	brcc	.+2      	; 0x7c2e <__gesf2+0x8>
    7c2c:	8f ef       	ldi	r24, 0xFF	; 255
    7c2e:	08 95       	ret

00007c30 <__mulsf3>:
    7c30:	0e 94 2b 3e 	call	0x7c56	; 0x7c56 <__mulsf3x>
    7c34:	0c 94 d9 3d 	jmp	0x7bb2	; 0x7bb2 <__fp_round>
    7c38:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <__fp_pscA>
    7c3c:	38 f0       	brcs	.+14     	; 0x7c4c <__mulsf3+0x1c>
    7c3e:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <__fp_pscB>
    7c42:	20 f0       	brcs	.+8      	; 0x7c4c <__mulsf3+0x1c>
    7c44:	95 23       	and	r25, r21
    7c46:	11 f0       	breq	.+4      	; 0x7c4c <__mulsf3+0x1c>
    7c48:	0c 94 c2 3d 	jmp	0x7b84	; 0x7b84 <__fp_inf>
    7c4c:	0c 94 c8 3d 	jmp	0x7b90	; 0x7b90 <__fp_nan>
    7c50:	11 24       	eor	r1, r1
    7c52:	0c 94 0d 3e 	jmp	0x7c1a	; 0x7c1a <__fp_szero>

00007c56 <__mulsf3x>:
    7c56:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <__fp_split3>
    7c5a:	70 f3       	brcs	.-36     	; 0x7c38 <__mulsf3+0x8>

00007c5c <__mulsf3_pse>:
    7c5c:	95 9f       	mul	r25, r21
    7c5e:	c1 f3       	breq	.-16     	; 0x7c50 <__mulsf3+0x20>
    7c60:	95 0f       	add	r25, r21
    7c62:	50 e0       	ldi	r21, 0x00	; 0
    7c64:	55 1f       	adc	r21, r21
    7c66:	62 9f       	mul	r22, r18
    7c68:	f0 01       	movw	r30, r0
    7c6a:	72 9f       	mul	r23, r18
    7c6c:	bb 27       	eor	r27, r27
    7c6e:	f0 0d       	add	r31, r0
    7c70:	b1 1d       	adc	r27, r1
    7c72:	63 9f       	mul	r22, r19
    7c74:	aa 27       	eor	r26, r26
    7c76:	f0 0d       	add	r31, r0
    7c78:	b1 1d       	adc	r27, r1
    7c7a:	aa 1f       	adc	r26, r26
    7c7c:	64 9f       	mul	r22, r20
    7c7e:	66 27       	eor	r22, r22
    7c80:	b0 0d       	add	r27, r0
    7c82:	a1 1d       	adc	r26, r1
    7c84:	66 1f       	adc	r22, r22
    7c86:	82 9f       	mul	r24, r18
    7c88:	22 27       	eor	r18, r18
    7c8a:	b0 0d       	add	r27, r0
    7c8c:	a1 1d       	adc	r26, r1
    7c8e:	62 1f       	adc	r22, r18
    7c90:	73 9f       	mul	r23, r19
    7c92:	b0 0d       	add	r27, r0
    7c94:	a1 1d       	adc	r26, r1
    7c96:	62 1f       	adc	r22, r18
    7c98:	83 9f       	mul	r24, r19
    7c9a:	a0 0d       	add	r26, r0
    7c9c:	61 1d       	adc	r22, r1
    7c9e:	22 1f       	adc	r18, r18
    7ca0:	74 9f       	mul	r23, r20
    7ca2:	33 27       	eor	r19, r19
    7ca4:	a0 0d       	add	r26, r0
    7ca6:	61 1d       	adc	r22, r1
    7ca8:	23 1f       	adc	r18, r19
    7caa:	84 9f       	mul	r24, r20
    7cac:	60 0d       	add	r22, r0
    7cae:	21 1d       	adc	r18, r1
    7cb0:	82 2f       	mov	r24, r18
    7cb2:	76 2f       	mov	r23, r22
    7cb4:	6a 2f       	mov	r22, r26
    7cb6:	11 24       	eor	r1, r1
    7cb8:	9f 57       	subi	r25, 0x7F	; 127
    7cba:	50 40       	sbci	r21, 0x00	; 0
    7cbc:	9a f0       	brmi	.+38     	; 0x7ce4 <__mulsf3_pse+0x88>
    7cbe:	f1 f0       	breq	.+60     	; 0x7cfc <__mulsf3_pse+0xa0>
    7cc0:	88 23       	and	r24, r24
    7cc2:	4a f0       	brmi	.+18     	; 0x7cd6 <__mulsf3_pse+0x7a>
    7cc4:	ee 0f       	add	r30, r30
    7cc6:	ff 1f       	adc	r31, r31
    7cc8:	bb 1f       	adc	r27, r27
    7cca:	66 1f       	adc	r22, r22
    7ccc:	77 1f       	adc	r23, r23
    7cce:	88 1f       	adc	r24, r24
    7cd0:	91 50       	subi	r25, 0x01	; 1
    7cd2:	50 40       	sbci	r21, 0x00	; 0
    7cd4:	a9 f7       	brne	.-22     	; 0x7cc0 <__mulsf3_pse+0x64>
    7cd6:	9e 3f       	cpi	r25, 0xFE	; 254
    7cd8:	51 05       	cpc	r21, r1
    7cda:	80 f0       	brcs	.+32     	; 0x7cfc <__mulsf3_pse+0xa0>
    7cdc:	0c 94 c2 3d 	jmp	0x7b84	; 0x7b84 <__fp_inf>
    7ce0:	0c 94 0d 3e 	jmp	0x7c1a	; 0x7c1a <__fp_szero>
    7ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    7ce6:	e4 f3       	brlt	.-8      	; 0x7ce0 <__mulsf3_pse+0x84>
    7ce8:	98 3e       	cpi	r25, 0xE8	; 232
    7cea:	d4 f3       	brlt	.-12     	; 0x7ce0 <__mulsf3_pse+0x84>
    7cec:	86 95       	lsr	r24
    7cee:	77 95       	ror	r23
    7cf0:	67 95       	ror	r22
    7cf2:	b7 95       	ror	r27
    7cf4:	f7 95       	ror	r31
    7cf6:	e7 95       	ror	r30
    7cf8:	9f 5f       	subi	r25, 0xFF	; 255
    7cfa:	c1 f7       	brne	.-16     	; 0x7cec <__mulsf3_pse+0x90>
    7cfc:	fe 2b       	or	r31, r30
    7cfe:	88 0f       	add	r24, r24
    7d00:	91 1d       	adc	r25, r1
    7d02:	96 95       	lsr	r25
    7d04:	87 95       	ror	r24
    7d06:	97 f9       	bld	r25, 7
    7d08:	08 95       	ret

00007d0a <__mulsi3>:
    7d0a:	db 01       	movw	r26, r22
    7d0c:	8f 93       	push	r24
    7d0e:	9f 93       	push	r25
    7d10:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__muluhisi3>
    7d14:	bf 91       	pop	r27
    7d16:	af 91       	pop	r26
    7d18:	a2 9f       	mul	r26, r18
    7d1a:	80 0d       	add	r24, r0
    7d1c:	91 1d       	adc	r25, r1
    7d1e:	a3 9f       	mul	r26, r19
    7d20:	90 0d       	add	r25, r0
    7d22:	b2 9f       	mul	r27, r18
    7d24:	90 0d       	add	r25, r0
    7d26:	11 24       	eor	r1, r1
    7d28:	08 95       	ret

00007d2a <__udivmodhi4>:
    7d2a:	aa 1b       	sub	r26, r26
    7d2c:	bb 1b       	sub	r27, r27
    7d2e:	51 e1       	ldi	r21, 0x11	; 17
    7d30:	07 c0       	rjmp	.+14     	; 0x7d40 <__udivmodhi4_ep>

00007d32 <__udivmodhi4_loop>:
    7d32:	aa 1f       	adc	r26, r26
    7d34:	bb 1f       	adc	r27, r27
    7d36:	a6 17       	cp	r26, r22
    7d38:	b7 07       	cpc	r27, r23
    7d3a:	10 f0       	brcs	.+4      	; 0x7d40 <__udivmodhi4_ep>
    7d3c:	a6 1b       	sub	r26, r22
    7d3e:	b7 0b       	sbc	r27, r23

00007d40 <__udivmodhi4_ep>:
    7d40:	88 1f       	adc	r24, r24
    7d42:	99 1f       	adc	r25, r25
    7d44:	5a 95       	dec	r21
    7d46:	a9 f7       	brne	.-22     	; 0x7d32 <__udivmodhi4_loop>
    7d48:	80 95       	com	r24
    7d4a:	90 95       	com	r25
    7d4c:	bc 01       	movw	r22, r24
    7d4e:	cd 01       	movw	r24, r26
    7d50:	08 95       	ret

00007d52 <__divmodhi4>:
    7d52:	97 fb       	bst	r25, 7
    7d54:	07 2e       	mov	r0, r23
    7d56:	16 f4       	brtc	.+4      	; 0x7d5c <__divmodhi4+0xa>
    7d58:	00 94       	com	r0
    7d5a:	07 d0       	rcall	.+14     	; 0x7d6a <__divmodhi4_neg1>
    7d5c:	77 fd       	sbrc	r23, 7
    7d5e:	09 d0       	rcall	.+18     	; 0x7d72 <__divmodhi4_neg2>
    7d60:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <__udivmodhi4>
    7d64:	07 fc       	sbrc	r0, 7
    7d66:	05 d0       	rcall	.+10     	; 0x7d72 <__divmodhi4_neg2>
    7d68:	3e f4       	brtc	.+14     	; 0x7d78 <__divmodhi4_exit>

00007d6a <__divmodhi4_neg1>:
    7d6a:	90 95       	com	r25
    7d6c:	81 95       	neg	r24
    7d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    7d70:	08 95       	ret

00007d72 <__divmodhi4_neg2>:
    7d72:	70 95       	com	r23
    7d74:	61 95       	neg	r22
    7d76:	7f 4f       	sbci	r23, 0xFF	; 255

00007d78 <__divmodhi4_exit>:
    7d78:	08 95       	ret

00007d7a <__udivmodsi4>:
    7d7a:	a1 e2       	ldi	r26, 0x21	; 33
    7d7c:	1a 2e       	mov	r1, r26
    7d7e:	aa 1b       	sub	r26, r26
    7d80:	bb 1b       	sub	r27, r27
    7d82:	fd 01       	movw	r30, r26
    7d84:	0d c0       	rjmp	.+26     	; 0x7da0 <__udivmodsi4_ep>

00007d86 <__udivmodsi4_loop>:
    7d86:	aa 1f       	adc	r26, r26
    7d88:	bb 1f       	adc	r27, r27
    7d8a:	ee 1f       	adc	r30, r30
    7d8c:	ff 1f       	adc	r31, r31
    7d8e:	a2 17       	cp	r26, r18
    7d90:	b3 07       	cpc	r27, r19
    7d92:	e4 07       	cpc	r30, r20
    7d94:	f5 07       	cpc	r31, r21
    7d96:	20 f0       	brcs	.+8      	; 0x7da0 <__udivmodsi4_ep>
    7d98:	a2 1b       	sub	r26, r18
    7d9a:	b3 0b       	sbc	r27, r19
    7d9c:	e4 0b       	sbc	r30, r20
    7d9e:	f5 0b       	sbc	r31, r21

00007da0 <__udivmodsi4_ep>:
    7da0:	66 1f       	adc	r22, r22
    7da2:	77 1f       	adc	r23, r23
    7da4:	88 1f       	adc	r24, r24
    7da6:	99 1f       	adc	r25, r25
    7da8:	1a 94       	dec	r1
    7daa:	69 f7       	brne	.-38     	; 0x7d86 <__udivmodsi4_loop>
    7dac:	60 95       	com	r22
    7dae:	70 95       	com	r23
    7db0:	80 95       	com	r24
    7db2:	90 95       	com	r25
    7db4:	9b 01       	movw	r18, r22
    7db6:	ac 01       	movw	r20, r24
    7db8:	bd 01       	movw	r22, r26
    7dba:	cf 01       	movw	r24, r30
    7dbc:	08 95       	ret

00007dbe <__divmodsi4>:
    7dbe:	05 2e       	mov	r0, r21
    7dc0:	97 fb       	bst	r25, 7
    7dc2:	1e f4       	brtc	.+6      	; 0x7dca <__divmodsi4+0xc>
    7dc4:	00 94       	com	r0
    7dc6:	0e 94 f6 3e 	call	0x7dec	; 0x7dec <__negsi2>
    7dca:	57 fd       	sbrc	r21, 7
    7dcc:	07 d0       	rcall	.+14     	; 0x7ddc <__divmodsi4_neg2>
    7dce:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__udivmodsi4>
    7dd2:	07 fc       	sbrc	r0, 7
    7dd4:	03 d0       	rcall	.+6      	; 0x7ddc <__divmodsi4_neg2>
    7dd6:	4e f4       	brtc	.+18     	; 0x7dea <__divmodsi4_exit>
    7dd8:	0c 94 f6 3e 	jmp	0x7dec	; 0x7dec <__negsi2>

00007ddc <__divmodsi4_neg2>:
    7ddc:	50 95       	com	r21
    7dde:	40 95       	com	r20
    7de0:	30 95       	com	r19
    7de2:	21 95       	neg	r18
    7de4:	3f 4f       	sbci	r19, 0xFF	; 255
    7de6:	4f 4f       	sbci	r20, 0xFF	; 255
    7de8:	5f 4f       	sbci	r21, 0xFF	; 255

00007dea <__divmodsi4_exit>:
    7dea:	08 95       	ret

00007dec <__negsi2>:
    7dec:	90 95       	com	r25
    7dee:	80 95       	com	r24
    7df0:	70 95       	com	r23
    7df2:	61 95       	neg	r22
    7df4:	7f 4f       	sbci	r23, 0xFF	; 255
    7df6:	8f 4f       	sbci	r24, 0xFF	; 255
    7df8:	9f 4f       	sbci	r25, 0xFF	; 255
    7dfa:	08 95       	ret

00007dfc <__tablejump2__>:
    7dfc:	ee 0f       	add	r30, r30
    7dfe:	ff 1f       	adc	r31, r31
    7e00:	00 24       	eor	r0, r0
    7e02:	00 1c       	adc	r0, r0
    7e04:	0b be       	out	0x3b, r0	; 59
    7e06:	07 90       	elpm	r0, Z+
    7e08:	f6 91       	elpm	r31, Z
    7e0a:	e0 2d       	mov	r30, r0
    7e0c:	09 94       	ijmp

00007e0e <__umulhisi3>:
    7e0e:	a2 9f       	mul	r26, r18
    7e10:	b0 01       	movw	r22, r0
    7e12:	b3 9f       	mul	r27, r19
    7e14:	c0 01       	movw	r24, r0
    7e16:	a3 9f       	mul	r26, r19
    7e18:	70 0d       	add	r23, r0
    7e1a:	81 1d       	adc	r24, r1
    7e1c:	11 24       	eor	r1, r1
    7e1e:	91 1d       	adc	r25, r1
    7e20:	b2 9f       	mul	r27, r18
    7e22:	70 0d       	add	r23, r0
    7e24:	81 1d       	adc	r24, r1
    7e26:	11 24       	eor	r1, r1
    7e28:	91 1d       	adc	r25, r1
    7e2a:	08 95       	ret

00007e2c <__usmulhisi3>:
    7e2c:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__umulhisi3>

00007e30 <__usmulhisi3_tail>:
    7e30:	b7 ff       	sbrs	r27, 7
    7e32:	08 95       	ret
    7e34:	82 1b       	sub	r24, r18
    7e36:	93 0b       	sbc	r25, r19
    7e38:	08 95       	ret

00007e3a <__muluhisi3>:
    7e3a:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__umulhisi3>
    7e3e:	a5 9f       	mul	r26, r21
    7e40:	90 0d       	add	r25, r0
    7e42:	b4 9f       	mul	r27, r20
    7e44:	90 0d       	add	r25, r0
    7e46:	a4 9f       	mul	r26, r20
    7e48:	80 0d       	add	r24, r0
    7e4a:	91 1d       	adc	r25, r1
    7e4c:	11 24       	eor	r1, r1
    7e4e:	08 95       	ret

00007e50 <__mulshisi3>:
    7e50:	b7 ff       	sbrs	r27, 7
    7e52:	0c 94 1d 3f 	jmp	0x7e3a	; 0x7e3a <__muluhisi3>

00007e56 <__mulohisi3>:
    7e56:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__muluhisi3>
    7e5a:	82 1b       	sub	r24, r18
    7e5c:	93 0b       	sbc	r25, r19
    7e5e:	08 95       	ret

00007e60 <malloc>:
    7e60:	0f 93       	push	r16
    7e62:	1f 93       	push	r17
    7e64:	cf 93       	push	r28
    7e66:	df 93       	push	r29
    7e68:	82 30       	cpi	r24, 0x02	; 2
    7e6a:	91 05       	cpc	r25, r1
    7e6c:	10 f4       	brcc	.+4      	; 0x7e72 <malloc+0x12>
    7e6e:	82 e0       	ldi	r24, 0x02	; 2
    7e70:	90 e0       	ldi	r25, 0x00	; 0
    7e72:	e0 91 5e 48 	lds	r30, 0x485E	; 0x80485e <__flp>
    7e76:	f0 91 5f 48 	lds	r31, 0x485F	; 0x80485f <__flp+0x1>
    7e7a:	20 e0       	ldi	r18, 0x00	; 0
    7e7c:	30 e0       	ldi	r19, 0x00	; 0
    7e7e:	a0 e0       	ldi	r26, 0x00	; 0
    7e80:	b0 e0       	ldi	r27, 0x00	; 0
    7e82:	30 97       	sbiw	r30, 0x00	; 0
    7e84:	19 f1       	breq	.+70     	; 0x7ecc <malloc+0x6c>
    7e86:	40 81       	ld	r20, Z
    7e88:	51 81       	ldd	r21, Z+1	; 0x01
    7e8a:	02 81       	ldd	r16, Z+2	; 0x02
    7e8c:	13 81       	ldd	r17, Z+3	; 0x03
    7e8e:	48 17       	cp	r20, r24
    7e90:	59 07       	cpc	r21, r25
    7e92:	c8 f0       	brcs	.+50     	; 0x7ec6 <malloc+0x66>
    7e94:	84 17       	cp	r24, r20
    7e96:	95 07       	cpc	r25, r21
    7e98:	69 f4       	brne	.+26     	; 0x7eb4 <malloc+0x54>
    7e9a:	10 97       	sbiw	r26, 0x00	; 0
    7e9c:	31 f0       	breq	.+12     	; 0x7eaa <malloc+0x4a>
    7e9e:	12 96       	adiw	r26, 0x02	; 2
    7ea0:	0c 93       	st	X, r16
    7ea2:	12 97       	sbiw	r26, 0x02	; 2
    7ea4:	13 96       	adiw	r26, 0x03	; 3
    7ea6:	1c 93       	st	X, r17
    7ea8:	27 c0       	rjmp	.+78     	; 0x7ef8 <malloc+0x98>
    7eaa:	00 93 5e 48 	sts	0x485E, r16	; 0x80485e <__flp>
    7eae:	10 93 5f 48 	sts	0x485F, r17	; 0x80485f <__flp+0x1>
    7eb2:	22 c0       	rjmp	.+68     	; 0x7ef8 <malloc+0x98>
    7eb4:	21 15       	cp	r18, r1
    7eb6:	31 05       	cpc	r19, r1
    7eb8:	19 f0       	breq	.+6      	; 0x7ec0 <malloc+0x60>
    7eba:	42 17       	cp	r20, r18
    7ebc:	53 07       	cpc	r21, r19
    7ebe:	18 f4       	brcc	.+6      	; 0x7ec6 <malloc+0x66>
    7ec0:	9a 01       	movw	r18, r20
    7ec2:	bd 01       	movw	r22, r26
    7ec4:	ef 01       	movw	r28, r30
    7ec6:	df 01       	movw	r26, r30
    7ec8:	f8 01       	movw	r30, r16
    7eca:	db cf       	rjmp	.-74     	; 0x7e82 <malloc+0x22>
    7ecc:	21 15       	cp	r18, r1
    7ece:	31 05       	cpc	r19, r1
    7ed0:	f9 f0       	breq	.+62     	; 0x7f10 <malloc+0xb0>
    7ed2:	28 1b       	sub	r18, r24
    7ed4:	39 0b       	sbc	r19, r25
    7ed6:	24 30       	cpi	r18, 0x04	; 4
    7ed8:	31 05       	cpc	r19, r1
    7eda:	80 f4       	brcc	.+32     	; 0x7efc <malloc+0x9c>
    7edc:	8a 81       	ldd	r24, Y+2	; 0x02
    7ede:	9b 81       	ldd	r25, Y+3	; 0x03
    7ee0:	61 15       	cp	r22, r1
    7ee2:	71 05       	cpc	r23, r1
    7ee4:	21 f0       	breq	.+8      	; 0x7eee <malloc+0x8e>
    7ee6:	fb 01       	movw	r30, r22
    7ee8:	82 83       	std	Z+2, r24	; 0x02
    7eea:	93 83       	std	Z+3, r25	; 0x03
    7eec:	04 c0       	rjmp	.+8      	; 0x7ef6 <malloc+0x96>
    7eee:	80 93 5e 48 	sts	0x485E, r24	; 0x80485e <__flp>
    7ef2:	90 93 5f 48 	sts	0x485F, r25	; 0x80485f <__flp+0x1>
    7ef6:	fe 01       	movw	r30, r28
    7ef8:	32 96       	adiw	r30, 0x02	; 2
    7efa:	44 c0       	rjmp	.+136    	; 0x7f84 <malloc+0x124>
    7efc:	fe 01       	movw	r30, r28
    7efe:	e2 0f       	add	r30, r18
    7f00:	f3 1f       	adc	r31, r19
    7f02:	81 93       	st	Z+, r24
    7f04:	91 93       	st	Z+, r25
    7f06:	22 50       	subi	r18, 0x02	; 2
    7f08:	31 09       	sbc	r19, r1
    7f0a:	28 83       	st	Y, r18
    7f0c:	39 83       	std	Y+1, r19	; 0x01
    7f0e:	3a c0       	rjmp	.+116    	; 0x7f84 <malloc+0x124>
    7f10:	20 91 5c 48 	lds	r18, 0x485C	; 0x80485c <__brkval>
    7f14:	30 91 5d 48 	lds	r19, 0x485D	; 0x80485d <__brkval+0x1>
    7f18:	23 2b       	or	r18, r19
    7f1a:	41 f4       	brne	.+16     	; 0x7f2c <malloc+0xcc>
    7f1c:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    7f20:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    7f24:	20 93 5c 48 	sts	0x485C, r18	; 0x80485c <__brkval>
    7f28:	30 93 5d 48 	sts	0x485D, r19	; 0x80485d <__brkval+0x1>
    7f2c:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    7f30:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    7f34:	21 15       	cp	r18, r1
    7f36:	31 05       	cpc	r19, r1
    7f38:	41 f4       	brne	.+16     	; 0x7f4a <malloc+0xea>
    7f3a:	2d b7       	in	r18, 0x3d	; 61
    7f3c:	3e b7       	in	r19, 0x3e	; 62
    7f3e:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    7f42:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    7f46:	24 1b       	sub	r18, r20
    7f48:	35 0b       	sbc	r19, r21
    7f4a:	e0 91 5c 48 	lds	r30, 0x485C	; 0x80485c <__brkval>
    7f4e:	f0 91 5d 48 	lds	r31, 0x485D	; 0x80485d <__brkval+0x1>
    7f52:	e2 17       	cp	r30, r18
    7f54:	f3 07       	cpc	r31, r19
    7f56:	a0 f4       	brcc	.+40     	; 0x7f80 <malloc+0x120>
    7f58:	2e 1b       	sub	r18, r30
    7f5a:	3f 0b       	sbc	r19, r31
    7f5c:	28 17       	cp	r18, r24
    7f5e:	39 07       	cpc	r19, r25
    7f60:	78 f0       	brcs	.+30     	; 0x7f80 <malloc+0x120>
    7f62:	ac 01       	movw	r20, r24
    7f64:	4e 5f       	subi	r20, 0xFE	; 254
    7f66:	5f 4f       	sbci	r21, 0xFF	; 255
    7f68:	24 17       	cp	r18, r20
    7f6a:	35 07       	cpc	r19, r21
    7f6c:	48 f0       	brcs	.+18     	; 0x7f80 <malloc+0x120>
    7f6e:	4e 0f       	add	r20, r30
    7f70:	5f 1f       	adc	r21, r31
    7f72:	40 93 5c 48 	sts	0x485C, r20	; 0x80485c <__brkval>
    7f76:	50 93 5d 48 	sts	0x485D, r21	; 0x80485d <__brkval+0x1>
    7f7a:	81 93       	st	Z+, r24
    7f7c:	91 93       	st	Z+, r25
    7f7e:	02 c0       	rjmp	.+4      	; 0x7f84 <malloc+0x124>
    7f80:	e0 e0       	ldi	r30, 0x00	; 0
    7f82:	f0 e0       	ldi	r31, 0x00	; 0
    7f84:	cf 01       	movw	r24, r30
    7f86:	df 91       	pop	r29
    7f88:	cf 91       	pop	r28
    7f8a:	1f 91       	pop	r17
    7f8c:	0f 91       	pop	r16
    7f8e:	08 95       	ret

00007f90 <free>:
    7f90:	cf 93       	push	r28
    7f92:	df 93       	push	r29
    7f94:	00 97       	sbiw	r24, 0x00	; 0
    7f96:	09 f4       	brne	.+2      	; 0x7f9a <free+0xa>
    7f98:	81 c0       	rjmp	.+258    	; 0x809c <__RODATA_PM_OFFSET__+0x9c>
    7f9a:	fc 01       	movw	r30, r24
    7f9c:	32 97       	sbiw	r30, 0x02	; 2
    7f9e:	12 82       	std	Z+2, r1	; 0x02
    7fa0:	13 82       	std	Z+3, r1	; 0x03
    7fa2:	a0 91 5e 48 	lds	r26, 0x485E	; 0x80485e <__flp>
    7fa6:	b0 91 5f 48 	lds	r27, 0x485F	; 0x80485f <__flp+0x1>
    7faa:	10 97       	sbiw	r26, 0x00	; 0
    7fac:	81 f4       	brne	.+32     	; 0x7fce <free+0x3e>
    7fae:	20 81       	ld	r18, Z
    7fb0:	31 81       	ldd	r19, Z+1	; 0x01
    7fb2:	82 0f       	add	r24, r18
    7fb4:	93 1f       	adc	r25, r19
    7fb6:	20 91 5c 48 	lds	r18, 0x485C	; 0x80485c <__brkval>
    7fba:	30 91 5d 48 	lds	r19, 0x485D	; 0x80485d <__brkval+0x1>
    7fbe:	28 17       	cp	r18, r24
    7fc0:	39 07       	cpc	r19, r25
    7fc2:	51 f5       	brne	.+84     	; 0x8018 <__RODATA_PM_OFFSET__+0x18>
    7fc4:	e0 93 5c 48 	sts	0x485C, r30	; 0x80485c <__brkval>
    7fc8:	f0 93 5d 48 	sts	0x485D, r31	; 0x80485d <__brkval+0x1>
    7fcc:	67 c0       	rjmp	.+206    	; 0x809c <__RODATA_PM_OFFSET__+0x9c>
    7fce:	ed 01       	movw	r28, r26
    7fd0:	20 e0       	ldi	r18, 0x00	; 0
    7fd2:	30 e0       	ldi	r19, 0x00	; 0
    7fd4:	ce 17       	cp	r28, r30
    7fd6:	df 07       	cpc	r29, r31
    7fd8:	40 f4       	brcc	.+16     	; 0x7fea <free+0x5a>
    7fda:	4a 81       	ldd	r20, Y+2	; 0x02
    7fdc:	5b 81       	ldd	r21, Y+3	; 0x03
    7fde:	9e 01       	movw	r18, r28
    7fe0:	41 15       	cp	r20, r1
    7fe2:	51 05       	cpc	r21, r1
    7fe4:	f1 f0       	breq	.+60     	; 0x8022 <__RODATA_PM_OFFSET__+0x22>
    7fe6:	ea 01       	movw	r28, r20
    7fe8:	f5 cf       	rjmp	.-22     	; 0x7fd4 <free+0x44>
    7fea:	c2 83       	std	Z+2, r28	; 0x02
    7fec:	d3 83       	std	Z+3, r29	; 0x03
    7fee:	40 81       	ld	r20, Z
    7ff0:	51 81       	ldd	r21, Z+1	; 0x01
    7ff2:	84 0f       	add	r24, r20
    7ff4:	95 1f       	adc	r25, r21
    7ff6:	c8 17       	cp	r28, r24
    7ff8:	d9 07       	cpc	r29, r25
    7ffa:	59 f4       	brne	.+22     	; 0x8012 <__RODATA_PM_OFFSET__+0x12>
    7ffc:	88 81       	ld	r24, Y
    7ffe:	99 81       	ldd	r25, Y+1	; 0x01
    8000:	84 0f       	add	r24, r20
    8002:	95 1f       	adc	r25, r21
    8004:	02 96       	adiw	r24, 0x02	; 2
    8006:	80 83       	st	Z, r24
    8008:	91 83       	std	Z+1, r25	; 0x01
    800a:	8a 81       	ldd	r24, Y+2	; 0x02
    800c:	9b 81       	ldd	r25, Y+3	; 0x03
    800e:	82 83       	std	Z+2, r24	; 0x02
    8010:	93 83       	std	Z+3, r25	; 0x03
    8012:	21 15       	cp	r18, r1
    8014:	31 05       	cpc	r19, r1
    8016:	29 f4       	brne	.+10     	; 0x8022 <__RODATA_PM_OFFSET__+0x22>
    8018:	e0 93 5e 48 	sts	0x485E, r30	; 0x80485e <__flp>
    801c:	f0 93 5f 48 	sts	0x485F, r31	; 0x80485f <__flp+0x1>
    8020:	3d c0       	rjmp	.+122    	; 0x809c <__RODATA_PM_OFFSET__+0x9c>
    8022:	e9 01       	movw	r28, r18
    8024:	ea 83       	std	Y+2, r30	; 0x02
    8026:	fb 83       	std	Y+3, r31	; 0x03
    8028:	49 91       	ld	r20, Y+
    802a:	59 91       	ld	r21, Y+
    802c:	c4 0f       	add	r28, r20
    802e:	d5 1f       	adc	r29, r21
    8030:	ec 17       	cp	r30, r28
    8032:	fd 07       	cpc	r31, r29
    8034:	61 f4       	brne	.+24     	; 0x804e <__RODATA_PM_OFFSET__+0x4e>
    8036:	80 81       	ld	r24, Z
    8038:	91 81       	ldd	r25, Z+1	; 0x01
    803a:	84 0f       	add	r24, r20
    803c:	95 1f       	adc	r25, r21
    803e:	02 96       	adiw	r24, 0x02	; 2
    8040:	e9 01       	movw	r28, r18
    8042:	88 83       	st	Y, r24
    8044:	99 83       	std	Y+1, r25	; 0x01
    8046:	82 81       	ldd	r24, Z+2	; 0x02
    8048:	93 81       	ldd	r25, Z+3	; 0x03
    804a:	8a 83       	std	Y+2, r24	; 0x02
    804c:	9b 83       	std	Y+3, r25	; 0x03
    804e:	e0 e0       	ldi	r30, 0x00	; 0
    8050:	f0 e0       	ldi	r31, 0x00	; 0
    8052:	12 96       	adiw	r26, 0x02	; 2
    8054:	8d 91       	ld	r24, X+
    8056:	9c 91       	ld	r25, X
    8058:	13 97       	sbiw	r26, 0x03	; 3
    805a:	00 97       	sbiw	r24, 0x00	; 0
    805c:	19 f0       	breq	.+6      	; 0x8064 <__RODATA_PM_OFFSET__+0x64>
    805e:	fd 01       	movw	r30, r26
    8060:	dc 01       	movw	r26, r24
    8062:	f7 cf       	rjmp	.-18     	; 0x8052 <__RODATA_PM_OFFSET__+0x52>
    8064:	8d 91       	ld	r24, X+
    8066:	9c 91       	ld	r25, X
    8068:	11 97       	sbiw	r26, 0x01	; 1
    806a:	9d 01       	movw	r18, r26
    806c:	2e 5f       	subi	r18, 0xFE	; 254
    806e:	3f 4f       	sbci	r19, 0xFF	; 255
    8070:	82 0f       	add	r24, r18
    8072:	93 1f       	adc	r25, r19
    8074:	20 91 5c 48 	lds	r18, 0x485C	; 0x80485c <__brkval>
    8078:	30 91 5d 48 	lds	r19, 0x485D	; 0x80485d <__brkval+0x1>
    807c:	28 17       	cp	r18, r24
    807e:	39 07       	cpc	r19, r25
    8080:	69 f4       	brne	.+26     	; 0x809c <__RODATA_PM_OFFSET__+0x9c>
    8082:	30 97       	sbiw	r30, 0x00	; 0
    8084:	29 f4       	brne	.+10     	; 0x8090 <__RODATA_PM_OFFSET__+0x90>
    8086:	10 92 5e 48 	sts	0x485E, r1	; 0x80485e <__flp>
    808a:	10 92 5f 48 	sts	0x485F, r1	; 0x80485f <__flp+0x1>
    808e:	02 c0       	rjmp	.+4      	; 0x8094 <__RODATA_PM_OFFSET__+0x94>
    8090:	12 82       	std	Z+2, r1	; 0x02
    8092:	13 82       	std	Z+3, r1	; 0x03
    8094:	a0 93 5c 48 	sts	0x485C, r26	; 0x80485c <__brkval>
    8098:	b0 93 5d 48 	sts	0x485D, r27	; 0x80485d <__brkval+0x1>
    809c:	df 91       	pop	r29
    809e:	cf 91       	pop	r28
    80a0:	08 95       	ret

000080a2 <atoi>:
    80a2:	fc 01       	movw	r30, r24
    80a4:	88 27       	eor	r24, r24
    80a6:	99 27       	eor	r25, r25
    80a8:	e8 94       	clt
    80aa:	21 91       	ld	r18, Z+
    80ac:	20 32       	cpi	r18, 0x20	; 32
    80ae:	e9 f3       	breq	.-6      	; 0x80aa <atoi+0x8>
    80b0:	29 30       	cpi	r18, 0x09	; 9
    80b2:	10 f0       	brcs	.+4      	; 0x80b8 <atoi+0x16>
    80b4:	2e 30       	cpi	r18, 0x0E	; 14
    80b6:	c8 f3       	brcs	.-14     	; 0x80aa <atoi+0x8>
    80b8:	2b 32       	cpi	r18, 0x2B	; 43
    80ba:	41 f0       	breq	.+16     	; 0x80cc <atoi+0x2a>
    80bc:	2d 32       	cpi	r18, 0x2D	; 45
    80be:	39 f4       	brne	.+14     	; 0x80ce <atoi+0x2c>
    80c0:	68 94       	set
    80c2:	04 c0       	rjmp	.+8      	; 0x80cc <atoi+0x2a>
    80c4:	0e 94 dd 40 	call	0x81ba	; 0x81ba <__mulhi_const_10>
    80c8:	82 0f       	add	r24, r18
    80ca:	91 1d       	adc	r25, r1
    80cc:	21 91       	ld	r18, Z+
    80ce:	20 53       	subi	r18, 0x30	; 48
    80d0:	2a 30       	cpi	r18, 0x0A	; 10
    80d2:	c0 f3       	brcs	.-16     	; 0x80c4 <atoi+0x22>
    80d4:	1e f4       	brtc	.+6      	; 0x80dc <atoi+0x3a>
    80d6:	90 95       	com	r25
    80d8:	81 95       	neg	r24
    80da:	9f 4f       	sbci	r25, 0xFF	; 255
    80dc:	08 95       	ret

000080de <atol>:
    80de:	1f 93       	push	r17
    80e0:	fc 01       	movw	r30, r24
    80e2:	99 27       	eor	r25, r25
    80e4:	88 27       	eor	r24, r24
    80e6:	bc 01       	movw	r22, r24
    80e8:	e8 94       	clt
    80ea:	11 91       	ld	r17, Z+
    80ec:	10 32       	cpi	r17, 0x20	; 32
    80ee:	e9 f3       	breq	.-6      	; 0x80ea <atol+0xc>
    80f0:	19 30       	cpi	r17, 0x09	; 9
    80f2:	10 f0       	brcs	.+4      	; 0x80f8 <atol+0x1a>
    80f4:	1e 30       	cpi	r17, 0x0E	; 14
    80f6:	c8 f3       	brcs	.-14     	; 0x80ea <atol+0xc>
    80f8:	1b 32       	cpi	r17, 0x2B	; 43
    80fa:	51 f0       	breq	.+20     	; 0x8110 <atol+0x32>
    80fc:	1d 32       	cpi	r17, 0x2D	; 45
    80fe:	49 f4       	brne	.+18     	; 0x8112 <atol+0x34>
    8100:	68 94       	set
    8102:	06 c0       	rjmp	.+12     	; 0x8110 <atol+0x32>
    8104:	0e 94 c8 40 	call	0x8190	; 0x8190 <__mulsi_const_10>
    8108:	61 0f       	add	r22, r17
    810a:	71 1d       	adc	r23, r1
    810c:	81 1d       	adc	r24, r1
    810e:	91 1d       	adc	r25, r1
    8110:	11 91       	ld	r17, Z+
    8112:	10 53       	subi	r17, 0x30	; 48
    8114:	1a 30       	cpi	r17, 0x0A	; 10
    8116:	b0 f3       	brcs	.-20     	; 0x8104 <atol+0x26>
    8118:	3e f4       	brtc	.+14     	; 0x8128 <atol+0x4a>
    811a:	90 95       	com	r25
    811c:	80 95       	com	r24
    811e:	70 95       	com	r23
    8120:	61 95       	neg	r22
    8122:	7f 4f       	sbci	r23, 0xFF	; 255
    8124:	8f 4f       	sbci	r24, 0xFF	; 255
    8126:	9f 4f       	sbci	r25, 0xFF	; 255
    8128:	1f 91       	pop	r17
    812a:	08 95       	ret

0000812c <toupper>:
    812c:	91 11       	cpse	r25, r1
    812e:	08 95       	ret
    8130:	81 56       	subi	r24, 0x61	; 97
    8132:	8a 51       	subi	r24, 0x1A	; 26
    8134:	08 f4       	brcc	.+2      	; 0x8138 <toupper+0xc>
    8136:	80 52       	subi	r24, 0x20	; 32
    8138:	85 58       	subi	r24, 0x85	; 133
    813a:	08 95       	ret

0000813c <strcat>:
    813c:	fb 01       	movw	r30, r22
    813e:	dc 01       	movw	r26, r24
    8140:	0d 90       	ld	r0, X+
    8142:	00 20       	and	r0, r0
    8144:	e9 f7       	brne	.-6      	; 0x8140 <strcat+0x4>
    8146:	11 97       	sbiw	r26, 0x01	; 1
    8148:	01 90       	ld	r0, Z+
    814a:	0d 92       	st	X+, r0
    814c:	00 20       	and	r0, r0
    814e:	e1 f7       	brne	.-8      	; 0x8148 <strcat+0xc>
    8150:	08 95       	ret

00008152 <strcpy>:
    8152:	fb 01       	movw	r30, r22
    8154:	dc 01       	movw	r26, r24
    8156:	01 90       	ld	r0, Z+
    8158:	0d 92       	st	X+, r0
    815a:	00 20       	and	r0, r0
    815c:	e1 f7       	brne	.-8      	; 0x8156 <strcpy+0x4>
    815e:	08 95       	ret

00008160 <strlen>:
    8160:	fc 01       	movw	r30, r24
    8162:	01 90       	ld	r0, Z+
    8164:	00 20       	and	r0, r0
    8166:	e9 f7       	brne	.-6      	; 0x8162 <strlen+0x2>
    8168:	80 95       	com	r24
    816a:	90 95       	com	r25
    816c:	8e 0f       	add	r24, r30
    816e:	9f 1f       	adc	r25, r31
    8170:	08 95       	ret

00008172 <strncpy>:
    8172:	fb 01       	movw	r30, r22
    8174:	dc 01       	movw	r26, r24
    8176:	41 50       	subi	r20, 0x01	; 1
    8178:	50 40       	sbci	r21, 0x00	; 0
    817a:	48 f0       	brcs	.+18     	; 0x818e <strncpy+0x1c>
    817c:	01 90       	ld	r0, Z+
    817e:	0d 92       	st	X+, r0
    8180:	00 20       	and	r0, r0
    8182:	c9 f7       	brne	.-14     	; 0x8176 <strncpy+0x4>
    8184:	01 c0       	rjmp	.+2      	; 0x8188 <strncpy+0x16>
    8186:	1d 92       	st	X+, r1
    8188:	41 50       	subi	r20, 0x01	; 1
    818a:	50 40       	sbci	r21, 0x00	; 0
    818c:	e0 f7       	brcc	.-8      	; 0x8186 <strncpy+0x14>
    818e:	08 95       	ret

00008190 <__mulsi_const_10>:
    8190:	59 2f       	mov	r21, r25
    8192:	48 2f       	mov	r20, r24
    8194:	37 2f       	mov	r19, r23
    8196:	26 2f       	mov	r18, r22
    8198:	66 0f       	add	r22, r22
    819a:	77 1f       	adc	r23, r23
    819c:	88 1f       	adc	r24, r24
    819e:	99 1f       	adc	r25, r25
    81a0:	66 0f       	add	r22, r22
    81a2:	77 1f       	adc	r23, r23
    81a4:	88 1f       	adc	r24, r24
    81a6:	99 1f       	adc	r25, r25
    81a8:	62 0f       	add	r22, r18
    81aa:	73 1f       	adc	r23, r19
    81ac:	84 1f       	adc	r24, r20
    81ae:	95 1f       	adc	r25, r21
    81b0:	66 0f       	add	r22, r22
    81b2:	77 1f       	adc	r23, r23
    81b4:	88 1f       	adc	r24, r24
    81b6:	99 1f       	adc	r25, r25
    81b8:	08 95       	ret

000081ba <__mulhi_const_10>:
    81ba:	7a e0       	ldi	r23, 0x0A	; 10
    81bc:	97 9f       	mul	r25, r23
    81be:	90 2d       	mov	r25, r0
    81c0:	87 9f       	mul	r24, r23
    81c2:	80 2d       	mov	r24, r0
    81c4:	91 0d       	add	r25, r1
    81c6:	11 24       	eor	r1, r1
    81c8:	08 95       	ret

000081ca <sprintf>:
    81ca:	0f 93       	push	r16
    81cc:	1f 93       	push	r17
    81ce:	cf 93       	push	r28
    81d0:	df 93       	push	r29
    81d2:	cd b7       	in	r28, 0x3d	; 61
    81d4:	de b7       	in	r29, 0x3e	; 62
    81d6:	2e 97       	sbiw	r28, 0x0e	; 14
    81d8:	cd bf       	out	0x3d, r28	; 61
    81da:	de bf       	out	0x3e, r29	; 62
    81dc:	0d 89       	ldd	r16, Y+21	; 0x15
    81de:	1e 89       	ldd	r17, Y+22	; 0x16
    81e0:	86 e0       	ldi	r24, 0x06	; 6
    81e2:	8c 83       	std	Y+4, r24	; 0x04
    81e4:	09 83       	std	Y+1, r16	; 0x01
    81e6:	1a 83       	std	Y+2, r17	; 0x02
    81e8:	8f ef       	ldi	r24, 0xFF	; 255
    81ea:	9f e7       	ldi	r25, 0x7F	; 127
    81ec:	8d 83       	std	Y+5, r24	; 0x05
    81ee:	9e 83       	std	Y+6, r25	; 0x06
    81f0:	ae 01       	movw	r20, r28
    81f2:	47 5e       	subi	r20, 0xE7	; 231
    81f4:	5f 4f       	sbci	r21, 0xFF	; 255
    81f6:	6f 89       	ldd	r22, Y+23	; 0x17
    81f8:	78 8d       	ldd	r23, Y+24	; 0x18
    81fa:	ce 01       	movw	r24, r28
    81fc:	01 96       	adiw	r24, 0x01	; 1
    81fe:	0e 94 0e 41 	call	0x821c	; 0x821c <vfprintf>
    8202:	ef 81       	ldd	r30, Y+7	; 0x07
    8204:	f8 85       	ldd	r31, Y+8	; 0x08
    8206:	e0 0f       	add	r30, r16
    8208:	f1 1f       	adc	r31, r17
    820a:	10 82       	st	Z, r1
    820c:	2e 96       	adiw	r28, 0x0e	; 14
    820e:	cd bf       	out	0x3d, r28	; 61
    8210:	de bf       	out	0x3e, r29	; 62
    8212:	df 91       	pop	r29
    8214:	cf 91       	pop	r28
    8216:	1f 91       	pop	r17
    8218:	0f 91       	pop	r16
    821a:	08 95       	ret

0000821c <vfprintf>:
    821c:	2f 92       	push	r2
    821e:	3f 92       	push	r3
    8220:	4f 92       	push	r4
    8222:	5f 92       	push	r5
    8224:	6f 92       	push	r6
    8226:	7f 92       	push	r7
    8228:	8f 92       	push	r8
    822a:	9f 92       	push	r9
    822c:	af 92       	push	r10
    822e:	bf 92       	push	r11
    8230:	cf 92       	push	r12
    8232:	df 92       	push	r13
    8234:	ef 92       	push	r14
    8236:	ff 92       	push	r15
    8238:	0f 93       	push	r16
    823a:	1f 93       	push	r17
    823c:	cf 93       	push	r28
    823e:	df 93       	push	r29
    8240:	cd b7       	in	r28, 0x3d	; 61
    8242:	de b7       	in	r29, 0x3e	; 62
    8244:	2b 97       	sbiw	r28, 0x0b	; 11
    8246:	cd bf       	out	0x3d, r28	; 61
    8248:	de bf       	out	0x3e, r29	; 62
    824a:	6c 01       	movw	r12, r24
    824c:	7b 01       	movw	r14, r22
    824e:	8a 01       	movw	r16, r20
    8250:	fc 01       	movw	r30, r24
    8252:	16 82       	std	Z+6, r1	; 0x06
    8254:	17 82       	std	Z+7, r1	; 0x07
    8256:	83 81       	ldd	r24, Z+3	; 0x03
    8258:	81 ff       	sbrs	r24, 1
    825a:	cc c1       	rjmp	.+920    	; 0x85f4 <vfprintf+0x3d8>
    825c:	ce 01       	movw	r24, r28
    825e:	01 96       	adiw	r24, 0x01	; 1
    8260:	3c 01       	movw	r6, r24
    8262:	f6 01       	movw	r30, r12
    8264:	93 81       	ldd	r25, Z+3	; 0x03
    8266:	f7 01       	movw	r30, r14
    8268:	93 fd       	sbrc	r25, 3
    826a:	85 91       	lpm	r24, Z+
    826c:	93 ff       	sbrs	r25, 3
    826e:	81 91       	ld	r24, Z+
    8270:	7f 01       	movw	r14, r30
    8272:	88 23       	and	r24, r24
    8274:	09 f4       	brne	.+2      	; 0x8278 <vfprintf+0x5c>
    8276:	ba c1       	rjmp	.+884    	; 0x85ec <vfprintf+0x3d0>
    8278:	85 32       	cpi	r24, 0x25	; 37
    827a:	39 f4       	brne	.+14     	; 0x828a <vfprintf+0x6e>
    827c:	93 fd       	sbrc	r25, 3
    827e:	85 91       	lpm	r24, Z+
    8280:	93 ff       	sbrs	r25, 3
    8282:	81 91       	ld	r24, Z+
    8284:	7f 01       	movw	r14, r30
    8286:	85 32       	cpi	r24, 0x25	; 37
    8288:	29 f4       	brne	.+10     	; 0x8294 <vfprintf+0x78>
    828a:	b6 01       	movw	r22, r12
    828c:	90 e0       	ldi	r25, 0x00	; 0
    828e:	0e 94 28 43 	call	0x8650	; 0x8650 <fputc>
    8292:	e7 cf       	rjmp	.-50     	; 0x8262 <vfprintf+0x46>
    8294:	91 2c       	mov	r9, r1
    8296:	21 2c       	mov	r2, r1
    8298:	31 2c       	mov	r3, r1
    829a:	ff e1       	ldi	r31, 0x1F	; 31
    829c:	f3 15       	cp	r31, r3
    829e:	d8 f0       	brcs	.+54     	; 0x82d6 <vfprintf+0xba>
    82a0:	8b 32       	cpi	r24, 0x2B	; 43
    82a2:	79 f0       	breq	.+30     	; 0x82c2 <vfprintf+0xa6>
    82a4:	38 f4       	brcc	.+14     	; 0x82b4 <vfprintf+0x98>
    82a6:	80 32       	cpi	r24, 0x20	; 32
    82a8:	79 f0       	breq	.+30     	; 0x82c8 <vfprintf+0xac>
    82aa:	83 32       	cpi	r24, 0x23	; 35
    82ac:	a1 f4       	brne	.+40     	; 0x82d6 <vfprintf+0xba>
    82ae:	23 2d       	mov	r18, r3
    82b0:	20 61       	ori	r18, 0x10	; 16
    82b2:	1d c0       	rjmp	.+58     	; 0x82ee <vfprintf+0xd2>
    82b4:	8d 32       	cpi	r24, 0x2D	; 45
    82b6:	61 f0       	breq	.+24     	; 0x82d0 <vfprintf+0xb4>
    82b8:	80 33       	cpi	r24, 0x30	; 48
    82ba:	69 f4       	brne	.+26     	; 0x82d6 <vfprintf+0xba>
    82bc:	23 2d       	mov	r18, r3
    82be:	21 60       	ori	r18, 0x01	; 1
    82c0:	16 c0       	rjmp	.+44     	; 0x82ee <vfprintf+0xd2>
    82c2:	83 2d       	mov	r24, r3
    82c4:	82 60       	ori	r24, 0x02	; 2
    82c6:	38 2e       	mov	r3, r24
    82c8:	e3 2d       	mov	r30, r3
    82ca:	e4 60       	ori	r30, 0x04	; 4
    82cc:	3e 2e       	mov	r3, r30
    82ce:	2a c0       	rjmp	.+84     	; 0x8324 <vfprintf+0x108>
    82d0:	f3 2d       	mov	r31, r3
    82d2:	f8 60       	ori	r31, 0x08	; 8
    82d4:	1d c0       	rjmp	.+58     	; 0x8310 <vfprintf+0xf4>
    82d6:	37 fc       	sbrc	r3, 7
    82d8:	2d c0       	rjmp	.+90     	; 0x8334 <vfprintf+0x118>
    82da:	20 ed       	ldi	r18, 0xD0	; 208
    82dc:	28 0f       	add	r18, r24
    82de:	2a 30       	cpi	r18, 0x0A	; 10
    82e0:	40 f0       	brcs	.+16     	; 0x82f2 <vfprintf+0xd6>
    82e2:	8e 32       	cpi	r24, 0x2E	; 46
    82e4:	b9 f4       	brne	.+46     	; 0x8314 <vfprintf+0xf8>
    82e6:	36 fc       	sbrc	r3, 6
    82e8:	81 c1       	rjmp	.+770    	; 0x85ec <vfprintf+0x3d0>
    82ea:	23 2d       	mov	r18, r3
    82ec:	20 64       	ori	r18, 0x40	; 64
    82ee:	32 2e       	mov	r3, r18
    82f0:	19 c0       	rjmp	.+50     	; 0x8324 <vfprintf+0x108>
    82f2:	36 fe       	sbrs	r3, 6
    82f4:	06 c0       	rjmp	.+12     	; 0x8302 <vfprintf+0xe6>
    82f6:	8a e0       	ldi	r24, 0x0A	; 10
    82f8:	98 9e       	mul	r9, r24
    82fa:	20 0d       	add	r18, r0
    82fc:	11 24       	eor	r1, r1
    82fe:	92 2e       	mov	r9, r18
    8300:	11 c0       	rjmp	.+34     	; 0x8324 <vfprintf+0x108>
    8302:	ea e0       	ldi	r30, 0x0A	; 10
    8304:	2e 9e       	mul	r2, r30
    8306:	20 0d       	add	r18, r0
    8308:	11 24       	eor	r1, r1
    830a:	22 2e       	mov	r2, r18
    830c:	f3 2d       	mov	r31, r3
    830e:	f0 62       	ori	r31, 0x20	; 32
    8310:	3f 2e       	mov	r3, r31
    8312:	08 c0       	rjmp	.+16     	; 0x8324 <vfprintf+0x108>
    8314:	8c 36       	cpi	r24, 0x6C	; 108
    8316:	21 f4       	brne	.+8      	; 0x8320 <vfprintf+0x104>
    8318:	83 2d       	mov	r24, r3
    831a:	80 68       	ori	r24, 0x80	; 128
    831c:	38 2e       	mov	r3, r24
    831e:	02 c0       	rjmp	.+4      	; 0x8324 <vfprintf+0x108>
    8320:	88 36       	cpi	r24, 0x68	; 104
    8322:	41 f4       	brne	.+16     	; 0x8334 <vfprintf+0x118>
    8324:	f7 01       	movw	r30, r14
    8326:	93 fd       	sbrc	r25, 3
    8328:	85 91       	lpm	r24, Z+
    832a:	93 ff       	sbrs	r25, 3
    832c:	81 91       	ld	r24, Z+
    832e:	7f 01       	movw	r14, r30
    8330:	81 11       	cpse	r24, r1
    8332:	b3 cf       	rjmp	.-154    	; 0x829a <vfprintf+0x7e>
    8334:	98 2f       	mov	r25, r24
    8336:	9f 7d       	andi	r25, 0xDF	; 223
    8338:	95 54       	subi	r25, 0x45	; 69
    833a:	93 30       	cpi	r25, 0x03	; 3
    833c:	28 f4       	brcc	.+10     	; 0x8348 <vfprintf+0x12c>
    833e:	0c 5f       	subi	r16, 0xFC	; 252
    8340:	1f 4f       	sbci	r17, 0xFF	; 255
    8342:	9f e3       	ldi	r25, 0x3F	; 63
    8344:	99 83       	std	Y+1, r25	; 0x01
    8346:	0d c0       	rjmp	.+26     	; 0x8362 <vfprintf+0x146>
    8348:	83 36       	cpi	r24, 0x63	; 99
    834a:	31 f0       	breq	.+12     	; 0x8358 <vfprintf+0x13c>
    834c:	83 37       	cpi	r24, 0x73	; 115
    834e:	71 f0       	breq	.+28     	; 0x836c <vfprintf+0x150>
    8350:	83 35       	cpi	r24, 0x53	; 83
    8352:	09 f0       	breq	.+2      	; 0x8356 <vfprintf+0x13a>
    8354:	59 c0       	rjmp	.+178    	; 0x8408 <vfprintf+0x1ec>
    8356:	21 c0       	rjmp	.+66     	; 0x839a <vfprintf+0x17e>
    8358:	f8 01       	movw	r30, r16
    835a:	80 81       	ld	r24, Z
    835c:	89 83       	std	Y+1, r24	; 0x01
    835e:	0e 5f       	subi	r16, 0xFE	; 254
    8360:	1f 4f       	sbci	r17, 0xFF	; 255
    8362:	88 24       	eor	r8, r8
    8364:	83 94       	inc	r8
    8366:	91 2c       	mov	r9, r1
    8368:	53 01       	movw	r10, r6
    836a:	13 c0       	rjmp	.+38     	; 0x8392 <vfprintf+0x176>
    836c:	28 01       	movw	r4, r16
    836e:	f2 e0       	ldi	r31, 0x02	; 2
    8370:	4f 0e       	add	r4, r31
    8372:	51 1c       	adc	r5, r1
    8374:	f8 01       	movw	r30, r16
    8376:	a0 80       	ld	r10, Z
    8378:	b1 80       	ldd	r11, Z+1	; 0x01
    837a:	36 fe       	sbrs	r3, 6
    837c:	03 c0       	rjmp	.+6      	; 0x8384 <vfprintf+0x168>
    837e:	69 2d       	mov	r22, r9
    8380:	70 e0       	ldi	r23, 0x00	; 0
    8382:	02 c0       	rjmp	.+4      	; 0x8388 <vfprintf+0x16c>
    8384:	6f ef       	ldi	r22, 0xFF	; 255
    8386:	7f ef       	ldi	r23, 0xFF	; 255
    8388:	c5 01       	movw	r24, r10
    838a:	0e 94 1d 43 	call	0x863a	; 0x863a <strnlen>
    838e:	4c 01       	movw	r8, r24
    8390:	82 01       	movw	r16, r4
    8392:	f3 2d       	mov	r31, r3
    8394:	ff 77       	andi	r31, 0x7F	; 127
    8396:	3f 2e       	mov	r3, r31
    8398:	16 c0       	rjmp	.+44     	; 0x83c6 <vfprintf+0x1aa>
    839a:	28 01       	movw	r4, r16
    839c:	22 e0       	ldi	r18, 0x02	; 2
    839e:	42 0e       	add	r4, r18
    83a0:	51 1c       	adc	r5, r1
    83a2:	f8 01       	movw	r30, r16
    83a4:	a0 80       	ld	r10, Z
    83a6:	b1 80       	ldd	r11, Z+1	; 0x01
    83a8:	36 fe       	sbrs	r3, 6
    83aa:	03 c0       	rjmp	.+6      	; 0x83b2 <vfprintf+0x196>
    83ac:	69 2d       	mov	r22, r9
    83ae:	70 e0       	ldi	r23, 0x00	; 0
    83b0:	02 c0       	rjmp	.+4      	; 0x83b6 <vfprintf+0x19a>
    83b2:	6f ef       	ldi	r22, 0xFF	; 255
    83b4:	7f ef       	ldi	r23, 0xFF	; 255
    83b6:	c5 01       	movw	r24, r10
    83b8:	0e 94 12 43 	call	0x8624	; 0x8624 <strnlen_P>
    83bc:	4c 01       	movw	r8, r24
    83be:	f3 2d       	mov	r31, r3
    83c0:	f0 68       	ori	r31, 0x80	; 128
    83c2:	3f 2e       	mov	r3, r31
    83c4:	82 01       	movw	r16, r4
    83c6:	33 fc       	sbrc	r3, 3
    83c8:	1b c0       	rjmp	.+54     	; 0x8400 <vfprintf+0x1e4>
    83ca:	82 2d       	mov	r24, r2
    83cc:	90 e0       	ldi	r25, 0x00	; 0
    83ce:	88 16       	cp	r8, r24
    83d0:	99 06       	cpc	r9, r25
    83d2:	b0 f4       	brcc	.+44     	; 0x8400 <vfprintf+0x1e4>
    83d4:	b6 01       	movw	r22, r12
    83d6:	80 e2       	ldi	r24, 0x20	; 32
    83d8:	90 e0       	ldi	r25, 0x00	; 0
    83da:	0e 94 28 43 	call	0x8650	; 0x8650 <fputc>
    83de:	2a 94       	dec	r2
    83e0:	f4 cf       	rjmp	.-24     	; 0x83ca <vfprintf+0x1ae>
    83e2:	f5 01       	movw	r30, r10
    83e4:	37 fc       	sbrc	r3, 7
    83e6:	85 91       	lpm	r24, Z+
    83e8:	37 fe       	sbrs	r3, 7
    83ea:	81 91       	ld	r24, Z+
    83ec:	5f 01       	movw	r10, r30
    83ee:	b6 01       	movw	r22, r12
    83f0:	90 e0       	ldi	r25, 0x00	; 0
    83f2:	0e 94 28 43 	call	0x8650	; 0x8650 <fputc>
    83f6:	21 10       	cpse	r2, r1
    83f8:	2a 94       	dec	r2
    83fa:	21 e0       	ldi	r18, 0x01	; 1
    83fc:	82 1a       	sub	r8, r18
    83fe:	91 08       	sbc	r9, r1
    8400:	81 14       	cp	r8, r1
    8402:	91 04       	cpc	r9, r1
    8404:	71 f7       	brne	.-36     	; 0x83e2 <vfprintf+0x1c6>
    8406:	e8 c0       	rjmp	.+464    	; 0x85d8 <vfprintf+0x3bc>
    8408:	84 36       	cpi	r24, 0x64	; 100
    840a:	11 f0       	breq	.+4      	; 0x8410 <vfprintf+0x1f4>
    840c:	89 36       	cpi	r24, 0x69	; 105
    840e:	41 f5       	brne	.+80     	; 0x8460 <vfprintf+0x244>
    8410:	f8 01       	movw	r30, r16
    8412:	37 fe       	sbrs	r3, 7
    8414:	07 c0       	rjmp	.+14     	; 0x8424 <vfprintf+0x208>
    8416:	60 81       	ld	r22, Z
    8418:	71 81       	ldd	r23, Z+1	; 0x01
    841a:	82 81       	ldd	r24, Z+2	; 0x02
    841c:	93 81       	ldd	r25, Z+3	; 0x03
    841e:	0c 5f       	subi	r16, 0xFC	; 252
    8420:	1f 4f       	sbci	r17, 0xFF	; 255
    8422:	08 c0       	rjmp	.+16     	; 0x8434 <vfprintf+0x218>
    8424:	60 81       	ld	r22, Z
    8426:	71 81       	ldd	r23, Z+1	; 0x01
    8428:	07 2e       	mov	r0, r23
    842a:	00 0c       	add	r0, r0
    842c:	88 0b       	sbc	r24, r24
    842e:	99 0b       	sbc	r25, r25
    8430:	0e 5f       	subi	r16, 0xFE	; 254
    8432:	1f 4f       	sbci	r17, 0xFF	; 255
    8434:	f3 2d       	mov	r31, r3
    8436:	ff 76       	andi	r31, 0x6F	; 111
    8438:	3f 2e       	mov	r3, r31
    843a:	97 ff       	sbrs	r25, 7
    843c:	09 c0       	rjmp	.+18     	; 0x8450 <vfprintf+0x234>
    843e:	90 95       	com	r25
    8440:	80 95       	com	r24
    8442:	70 95       	com	r23
    8444:	61 95       	neg	r22
    8446:	7f 4f       	sbci	r23, 0xFF	; 255
    8448:	8f 4f       	sbci	r24, 0xFF	; 255
    844a:	9f 4f       	sbci	r25, 0xFF	; 255
    844c:	f0 68       	ori	r31, 0x80	; 128
    844e:	3f 2e       	mov	r3, r31
    8450:	2a e0       	ldi	r18, 0x0A	; 10
    8452:	30 e0       	ldi	r19, 0x00	; 0
    8454:	a3 01       	movw	r20, r6
    8456:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__ultoa_invert>
    845a:	88 2e       	mov	r8, r24
    845c:	86 18       	sub	r8, r6
    845e:	45 c0       	rjmp	.+138    	; 0x84ea <vfprintf+0x2ce>
    8460:	85 37       	cpi	r24, 0x75	; 117
    8462:	31 f4       	brne	.+12     	; 0x8470 <vfprintf+0x254>
    8464:	23 2d       	mov	r18, r3
    8466:	2f 7e       	andi	r18, 0xEF	; 239
    8468:	b2 2e       	mov	r11, r18
    846a:	2a e0       	ldi	r18, 0x0A	; 10
    846c:	30 e0       	ldi	r19, 0x00	; 0
    846e:	25 c0       	rjmp	.+74     	; 0x84ba <vfprintf+0x29e>
    8470:	93 2d       	mov	r25, r3
    8472:	99 7f       	andi	r25, 0xF9	; 249
    8474:	b9 2e       	mov	r11, r25
    8476:	8f 36       	cpi	r24, 0x6F	; 111
    8478:	c1 f0       	breq	.+48     	; 0x84aa <vfprintf+0x28e>
    847a:	18 f4       	brcc	.+6      	; 0x8482 <vfprintf+0x266>
    847c:	88 35       	cpi	r24, 0x58	; 88
    847e:	79 f0       	breq	.+30     	; 0x849e <vfprintf+0x282>
    8480:	b5 c0       	rjmp	.+362    	; 0x85ec <vfprintf+0x3d0>
    8482:	80 37       	cpi	r24, 0x70	; 112
    8484:	19 f0       	breq	.+6      	; 0x848c <vfprintf+0x270>
    8486:	88 37       	cpi	r24, 0x78	; 120
    8488:	21 f0       	breq	.+8      	; 0x8492 <vfprintf+0x276>
    848a:	b0 c0       	rjmp	.+352    	; 0x85ec <vfprintf+0x3d0>
    848c:	e9 2f       	mov	r30, r25
    848e:	e0 61       	ori	r30, 0x10	; 16
    8490:	be 2e       	mov	r11, r30
    8492:	b4 fe       	sbrs	r11, 4
    8494:	0d c0       	rjmp	.+26     	; 0x84b0 <vfprintf+0x294>
    8496:	fb 2d       	mov	r31, r11
    8498:	f4 60       	ori	r31, 0x04	; 4
    849a:	bf 2e       	mov	r11, r31
    849c:	09 c0       	rjmp	.+18     	; 0x84b0 <vfprintf+0x294>
    849e:	34 fe       	sbrs	r3, 4
    84a0:	0a c0       	rjmp	.+20     	; 0x84b6 <vfprintf+0x29a>
    84a2:	29 2f       	mov	r18, r25
    84a4:	26 60       	ori	r18, 0x06	; 6
    84a6:	b2 2e       	mov	r11, r18
    84a8:	06 c0       	rjmp	.+12     	; 0x84b6 <vfprintf+0x29a>
    84aa:	28 e0       	ldi	r18, 0x08	; 8
    84ac:	30 e0       	ldi	r19, 0x00	; 0
    84ae:	05 c0       	rjmp	.+10     	; 0x84ba <vfprintf+0x29e>
    84b0:	20 e1       	ldi	r18, 0x10	; 16
    84b2:	30 e0       	ldi	r19, 0x00	; 0
    84b4:	02 c0       	rjmp	.+4      	; 0x84ba <vfprintf+0x29e>
    84b6:	20 e1       	ldi	r18, 0x10	; 16
    84b8:	32 e0       	ldi	r19, 0x02	; 2
    84ba:	f8 01       	movw	r30, r16
    84bc:	b7 fe       	sbrs	r11, 7
    84be:	07 c0       	rjmp	.+14     	; 0x84ce <vfprintf+0x2b2>
    84c0:	60 81       	ld	r22, Z
    84c2:	71 81       	ldd	r23, Z+1	; 0x01
    84c4:	82 81       	ldd	r24, Z+2	; 0x02
    84c6:	93 81       	ldd	r25, Z+3	; 0x03
    84c8:	0c 5f       	subi	r16, 0xFC	; 252
    84ca:	1f 4f       	sbci	r17, 0xFF	; 255
    84cc:	06 c0       	rjmp	.+12     	; 0x84da <vfprintf+0x2be>
    84ce:	60 81       	ld	r22, Z
    84d0:	71 81       	ldd	r23, Z+1	; 0x01
    84d2:	80 e0       	ldi	r24, 0x00	; 0
    84d4:	90 e0       	ldi	r25, 0x00	; 0
    84d6:	0e 5f       	subi	r16, 0xFE	; 254
    84d8:	1f 4f       	sbci	r17, 0xFF	; 255
    84da:	a3 01       	movw	r20, r6
    84dc:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__ultoa_invert>
    84e0:	88 2e       	mov	r8, r24
    84e2:	86 18       	sub	r8, r6
    84e4:	fb 2d       	mov	r31, r11
    84e6:	ff 77       	andi	r31, 0x7F	; 127
    84e8:	3f 2e       	mov	r3, r31
    84ea:	36 fe       	sbrs	r3, 6
    84ec:	0d c0       	rjmp	.+26     	; 0x8508 <vfprintf+0x2ec>
    84ee:	23 2d       	mov	r18, r3
    84f0:	2e 7f       	andi	r18, 0xFE	; 254
    84f2:	a2 2e       	mov	r10, r18
    84f4:	89 14       	cp	r8, r9
    84f6:	58 f4       	brcc	.+22     	; 0x850e <vfprintf+0x2f2>
    84f8:	34 fe       	sbrs	r3, 4
    84fa:	0b c0       	rjmp	.+22     	; 0x8512 <vfprintf+0x2f6>
    84fc:	32 fc       	sbrc	r3, 2
    84fe:	09 c0       	rjmp	.+18     	; 0x8512 <vfprintf+0x2f6>
    8500:	83 2d       	mov	r24, r3
    8502:	8e 7e       	andi	r24, 0xEE	; 238
    8504:	a8 2e       	mov	r10, r24
    8506:	05 c0       	rjmp	.+10     	; 0x8512 <vfprintf+0x2f6>
    8508:	b8 2c       	mov	r11, r8
    850a:	a3 2c       	mov	r10, r3
    850c:	03 c0       	rjmp	.+6      	; 0x8514 <vfprintf+0x2f8>
    850e:	b8 2c       	mov	r11, r8
    8510:	01 c0       	rjmp	.+2      	; 0x8514 <vfprintf+0x2f8>
    8512:	b9 2c       	mov	r11, r9
    8514:	a4 fe       	sbrs	r10, 4
    8516:	0f c0       	rjmp	.+30     	; 0x8536 <vfprintf+0x31a>
    8518:	fe 01       	movw	r30, r28
    851a:	e8 0d       	add	r30, r8
    851c:	f1 1d       	adc	r31, r1
    851e:	80 81       	ld	r24, Z
    8520:	80 33       	cpi	r24, 0x30	; 48
    8522:	21 f4       	brne	.+8      	; 0x852c <vfprintf+0x310>
    8524:	9a 2d       	mov	r25, r10
    8526:	99 7e       	andi	r25, 0xE9	; 233
    8528:	a9 2e       	mov	r10, r25
    852a:	09 c0       	rjmp	.+18     	; 0x853e <vfprintf+0x322>
    852c:	a2 fe       	sbrs	r10, 2
    852e:	06 c0       	rjmp	.+12     	; 0x853c <vfprintf+0x320>
    8530:	b3 94       	inc	r11
    8532:	b3 94       	inc	r11
    8534:	04 c0       	rjmp	.+8      	; 0x853e <vfprintf+0x322>
    8536:	8a 2d       	mov	r24, r10
    8538:	86 78       	andi	r24, 0x86	; 134
    853a:	09 f0       	breq	.+2      	; 0x853e <vfprintf+0x322>
    853c:	b3 94       	inc	r11
    853e:	a3 fc       	sbrc	r10, 3
    8540:	11 c0       	rjmp	.+34     	; 0x8564 <vfprintf+0x348>
    8542:	a0 fe       	sbrs	r10, 0
    8544:	06 c0       	rjmp	.+12     	; 0x8552 <vfprintf+0x336>
    8546:	b2 14       	cp	r11, r2
    8548:	88 f4       	brcc	.+34     	; 0x856c <vfprintf+0x350>
    854a:	28 0c       	add	r2, r8
    854c:	92 2c       	mov	r9, r2
    854e:	9b 18       	sub	r9, r11
    8550:	0e c0       	rjmp	.+28     	; 0x856e <vfprintf+0x352>
    8552:	b2 14       	cp	r11, r2
    8554:	60 f4       	brcc	.+24     	; 0x856e <vfprintf+0x352>
    8556:	b6 01       	movw	r22, r12
    8558:	80 e2       	ldi	r24, 0x20	; 32
    855a:	90 e0       	ldi	r25, 0x00	; 0
    855c:	0e 94 28 43 	call	0x8650	; 0x8650 <fputc>
    8560:	b3 94       	inc	r11
    8562:	f7 cf       	rjmp	.-18     	; 0x8552 <vfprintf+0x336>
    8564:	b2 14       	cp	r11, r2
    8566:	18 f4       	brcc	.+6      	; 0x856e <vfprintf+0x352>
    8568:	2b 18       	sub	r2, r11
    856a:	02 c0       	rjmp	.+4      	; 0x8570 <vfprintf+0x354>
    856c:	98 2c       	mov	r9, r8
    856e:	21 2c       	mov	r2, r1
    8570:	a4 fe       	sbrs	r10, 4
    8572:	10 c0       	rjmp	.+32     	; 0x8594 <vfprintf+0x378>
    8574:	b6 01       	movw	r22, r12
    8576:	80 e3       	ldi	r24, 0x30	; 48
    8578:	90 e0       	ldi	r25, 0x00	; 0
    857a:	0e 94 28 43 	call	0x8650	; 0x8650 <fputc>
    857e:	a2 fe       	sbrs	r10, 2
    8580:	17 c0       	rjmp	.+46     	; 0x85b0 <vfprintf+0x394>
    8582:	a1 fc       	sbrc	r10, 1
    8584:	03 c0       	rjmp	.+6      	; 0x858c <vfprintf+0x370>
    8586:	88 e7       	ldi	r24, 0x78	; 120
    8588:	90 e0       	ldi	r25, 0x00	; 0
    858a:	02 c0       	rjmp	.+4      	; 0x8590 <vfprintf+0x374>
    858c:	88 e5       	ldi	r24, 0x58	; 88
    858e:	90 e0       	ldi	r25, 0x00	; 0
    8590:	b6 01       	movw	r22, r12
    8592:	0c c0       	rjmp	.+24     	; 0x85ac <vfprintf+0x390>
    8594:	8a 2d       	mov	r24, r10
    8596:	86 78       	andi	r24, 0x86	; 134
    8598:	59 f0       	breq	.+22     	; 0x85b0 <vfprintf+0x394>
    859a:	a1 fe       	sbrs	r10, 1
    859c:	02 c0       	rjmp	.+4      	; 0x85a2 <vfprintf+0x386>
    859e:	8b e2       	ldi	r24, 0x2B	; 43
    85a0:	01 c0       	rjmp	.+2      	; 0x85a4 <vfprintf+0x388>
    85a2:	80 e2       	ldi	r24, 0x20	; 32
    85a4:	a7 fc       	sbrc	r10, 7
    85a6:	8d e2       	ldi	r24, 0x2D	; 45
    85a8:	b6 01       	movw	r22, r12
    85aa:	90 e0       	ldi	r25, 0x00	; 0
    85ac:	0e 94 28 43 	call	0x8650	; 0x8650 <fputc>
    85b0:	89 14       	cp	r8, r9
    85b2:	38 f4       	brcc	.+14     	; 0x85c2 <vfprintf+0x3a6>
    85b4:	b6 01       	movw	r22, r12
    85b6:	80 e3       	ldi	r24, 0x30	; 48
    85b8:	90 e0       	ldi	r25, 0x00	; 0
    85ba:	0e 94 28 43 	call	0x8650	; 0x8650 <fputc>
    85be:	9a 94       	dec	r9
    85c0:	f7 cf       	rjmp	.-18     	; 0x85b0 <vfprintf+0x394>
    85c2:	8a 94       	dec	r8
    85c4:	f3 01       	movw	r30, r6
    85c6:	e8 0d       	add	r30, r8
    85c8:	f1 1d       	adc	r31, r1
    85ca:	80 81       	ld	r24, Z
    85cc:	b6 01       	movw	r22, r12
    85ce:	90 e0       	ldi	r25, 0x00	; 0
    85d0:	0e 94 28 43 	call	0x8650	; 0x8650 <fputc>
    85d4:	81 10       	cpse	r8, r1
    85d6:	f5 cf       	rjmp	.-22     	; 0x85c2 <vfprintf+0x3a6>
    85d8:	22 20       	and	r2, r2
    85da:	09 f4       	brne	.+2      	; 0x85de <vfprintf+0x3c2>
    85dc:	42 ce       	rjmp	.-892    	; 0x8262 <vfprintf+0x46>
    85de:	b6 01       	movw	r22, r12
    85e0:	80 e2       	ldi	r24, 0x20	; 32
    85e2:	90 e0       	ldi	r25, 0x00	; 0
    85e4:	0e 94 28 43 	call	0x8650	; 0x8650 <fputc>
    85e8:	2a 94       	dec	r2
    85ea:	f6 cf       	rjmp	.-20     	; 0x85d8 <vfprintf+0x3bc>
    85ec:	f6 01       	movw	r30, r12
    85ee:	86 81       	ldd	r24, Z+6	; 0x06
    85f0:	97 81       	ldd	r25, Z+7	; 0x07
    85f2:	02 c0       	rjmp	.+4      	; 0x85f8 <vfprintf+0x3dc>
    85f4:	8f ef       	ldi	r24, 0xFF	; 255
    85f6:	9f ef       	ldi	r25, 0xFF	; 255
    85f8:	2b 96       	adiw	r28, 0x0b	; 11
    85fa:	cd bf       	out	0x3d, r28	; 61
    85fc:	de bf       	out	0x3e, r29	; 62
    85fe:	df 91       	pop	r29
    8600:	cf 91       	pop	r28
    8602:	1f 91       	pop	r17
    8604:	0f 91       	pop	r16
    8606:	ff 90       	pop	r15
    8608:	ef 90       	pop	r14
    860a:	df 90       	pop	r13
    860c:	cf 90       	pop	r12
    860e:	bf 90       	pop	r11
    8610:	af 90       	pop	r10
    8612:	9f 90       	pop	r9
    8614:	8f 90       	pop	r8
    8616:	7f 90       	pop	r7
    8618:	6f 90       	pop	r6
    861a:	5f 90       	pop	r5
    861c:	4f 90       	pop	r4
    861e:	3f 90       	pop	r3
    8620:	2f 90       	pop	r2
    8622:	08 95       	ret

00008624 <strnlen_P>:
    8624:	fc 01       	movw	r30, r24
    8626:	05 90       	lpm	r0, Z+
    8628:	61 50       	subi	r22, 0x01	; 1
    862a:	70 40       	sbci	r23, 0x00	; 0
    862c:	01 10       	cpse	r0, r1
    862e:	d8 f7       	brcc	.-10     	; 0x8626 <strnlen_P+0x2>
    8630:	80 95       	com	r24
    8632:	90 95       	com	r25
    8634:	8e 0f       	add	r24, r30
    8636:	9f 1f       	adc	r25, r31
    8638:	08 95       	ret

0000863a <strnlen>:
    863a:	fc 01       	movw	r30, r24
    863c:	61 50       	subi	r22, 0x01	; 1
    863e:	70 40       	sbci	r23, 0x00	; 0
    8640:	01 90       	ld	r0, Z+
    8642:	01 10       	cpse	r0, r1
    8644:	d8 f7       	brcc	.-10     	; 0x863c <strnlen+0x2>
    8646:	80 95       	com	r24
    8648:	90 95       	com	r25
    864a:	8e 0f       	add	r24, r30
    864c:	9f 1f       	adc	r25, r31
    864e:	08 95       	ret

00008650 <fputc>:
    8650:	0f 93       	push	r16
    8652:	1f 93       	push	r17
    8654:	cf 93       	push	r28
    8656:	df 93       	push	r29
    8658:	fb 01       	movw	r30, r22
    865a:	23 81       	ldd	r18, Z+3	; 0x03
    865c:	21 fd       	sbrc	r18, 1
    865e:	03 c0       	rjmp	.+6      	; 0x8666 <fputc+0x16>
    8660:	8f ef       	ldi	r24, 0xFF	; 255
    8662:	9f ef       	ldi	r25, 0xFF	; 255
    8664:	2c c0       	rjmp	.+88     	; 0x86be <fputc+0x6e>
    8666:	22 ff       	sbrs	r18, 2
    8668:	16 c0       	rjmp	.+44     	; 0x8696 <fputc+0x46>
    866a:	46 81       	ldd	r20, Z+6	; 0x06
    866c:	57 81       	ldd	r21, Z+7	; 0x07
    866e:	24 81       	ldd	r18, Z+4	; 0x04
    8670:	35 81       	ldd	r19, Z+5	; 0x05
    8672:	42 17       	cp	r20, r18
    8674:	53 07       	cpc	r21, r19
    8676:	44 f4       	brge	.+16     	; 0x8688 <fputc+0x38>
    8678:	a0 81       	ld	r26, Z
    867a:	b1 81       	ldd	r27, Z+1	; 0x01
    867c:	9d 01       	movw	r18, r26
    867e:	2f 5f       	subi	r18, 0xFF	; 255
    8680:	3f 4f       	sbci	r19, 0xFF	; 255
    8682:	20 83       	st	Z, r18
    8684:	31 83       	std	Z+1, r19	; 0x01
    8686:	8c 93       	st	X, r24
    8688:	26 81       	ldd	r18, Z+6	; 0x06
    868a:	37 81       	ldd	r19, Z+7	; 0x07
    868c:	2f 5f       	subi	r18, 0xFF	; 255
    868e:	3f 4f       	sbci	r19, 0xFF	; 255
    8690:	26 83       	std	Z+6, r18	; 0x06
    8692:	37 83       	std	Z+7, r19	; 0x07
    8694:	14 c0       	rjmp	.+40     	; 0x86be <fputc+0x6e>
    8696:	8b 01       	movw	r16, r22
    8698:	ec 01       	movw	r28, r24
    869a:	fb 01       	movw	r30, r22
    869c:	00 84       	ldd	r0, Z+8	; 0x08
    869e:	f1 85       	ldd	r31, Z+9	; 0x09
    86a0:	e0 2d       	mov	r30, r0
    86a2:	09 95       	icall
    86a4:	89 2b       	or	r24, r25
    86a6:	e1 f6       	brne	.-72     	; 0x8660 <fputc+0x10>
    86a8:	d8 01       	movw	r26, r16
    86aa:	16 96       	adiw	r26, 0x06	; 6
    86ac:	8d 91       	ld	r24, X+
    86ae:	9c 91       	ld	r25, X
    86b0:	17 97       	sbiw	r26, 0x07	; 7
    86b2:	01 96       	adiw	r24, 0x01	; 1
    86b4:	16 96       	adiw	r26, 0x06	; 6
    86b6:	8d 93       	st	X+, r24
    86b8:	9c 93       	st	X, r25
    86ba:	17 97       	sbiw	r26, 0x07	; 7
    86bc:	ce 01       	movw	r24, r28
    86be:	df 91       	pop	r29
    86c0:	cf 91       	pop	r28
    86c2:	1f 91       	pop	r17
    86c4:	0f 91       	pop	r16
    86c6:	08 95       	ret

000086c8 <__ultoa_invert>:
    86c8:	fa 01       	movw	r30, r20
    86ca:	aa 27       	eor	r26, r26
    86cc:	28 30       	cpi	r18, 0x08	; 8
    86ce:	51 f1       	breq	.+84     	; 0x8724 <__ultoa_invert+0x5c>
    86d0:	20 31       	cpi	r18, 0x10	; 16
    86d2:	81 f1       	breq	.+96     	; 0x8734 <__ultoa_invert+0x6c>
    86d4:	e8 94       	clt
    86d6:	6f 93       	push	r22
    86d8:	6e 7f       	andi	r22, 0xFE	; 254
    86da:	6e 5f       	subi	r22, 0xFE	; 254
    86dc:	7f 4f       	sbci	r23, 0xFF	; 255
    86de:	8f 4f       	sbci	r24, 0xFF	; 255
    86e0:	9f 4f       	sbci	r25, 0xFF	; 255
    86e2:	af 4f       	sbci	r26, 0xFF	; 255
    86e4:	b1 e0       	ldi	r27, 0x01	; 1
    86e6:	3e d0       	rcall	.+124    	; 0x8764 <__ultoa_invert+0x9c>
    86e8:	b4 e0       	ldi	r27, 0x04	; 4
    86ea:	3c d0       	rcall	.+120    	; 0x8764 <__ultoa_invert+0x9c>
    86ec:	67 0f       	add	r22, r23
    86ee:	78 1f       	adc	r23, r24
    86f0:	89 1f       	adc	r24, r25
    86f2:	9a 1f       	adc	r25, r26
    86f4:	a1 1d       	adc	r26, r1
    86f6:	68 0f       	add	r22, r24
    86f8:	79 1f       	adc	r23, r25
    86fa:	8a 1f       	adc	r24, r26
    86fc:	91 1d       	adc	r25, r1
    86fe:	a1 1d       	adc	r26, r1
    8700:	6a 0f       	add	r22, r26
    8702:	71 1d       	adc	r23, r1
    8704:	81 1d       	adc	r24, r1
    8706:	91 1d       	adc	r25, r1
    8708:	a1 1d       	adc	r26, r1
    870a:	20 d0       	rcall	.+64     	; 0x874c <__ultoa_invert+0x84>
    870c:	09 f4       	brne	.+2      	; 0x8710 <__ultoa_invert+0x48>
    870e:	68 94       	set
    8710:	3f 91       	pop	r19
    8712:	2a e0       	ldi	r18, 0x0A	; 10
    8714:	26 9f       	mul	r18, r22
    8716:	11 24       	eor	r1, r1
    8718:	30 19       	sub	r19, r0
    871a:	30 5d       	subi	r19, 0xD0	; 208
    871c:	31 93       	st	Z+, r19
    871e:	de f6       	brtc	.-74     	; 0x86d6 <__ultoa_invert+0xe>
    8720:	cf 01       	movw	r24, r30
    8722:	08 95       	ret
    8724:	46 2f       	mov	r20, r22
    8726:	47 70       	andi	r20, 0x07	; 7
    8728:	40 5d       	subi	r20, 0xD0	; 208
    872a:	41 93       	st	Z+, r20
    872c:	b3 e0       	ldi	r27, 0x03	; 3
    872e:	0f d0       	rcall	.+30     	; 0x874e <__ultoa_invert+0x86>
    8730:	c9 f7       	brne	.-14     	; 0x8724 <__ultoa_invert+0x5c>
    8732:	f6 cf       	rjmp	.-20     	; 0x8720 <__ultoa_invert+0x58>
    8734:	46 2f       	mov	r20, r22
    8736:	4f 70       	andi	r20, 0x0F	; 15
    8738:	40 5d       	subi	r20, 0xD0	; 208
    873a:	4a 33       	cpi	r20, 0x3A	; 58
    873c:	18 f0       	brcs	.+6      	; 0x8744 <__ultoa_invert+0x7c>
    873e:	49 5d       	subi	r20, 0xD9	; 217
    8740:	31 fd       	sbrc	r19, 1
    8742:	40 52       	subi	r20, 0x20	; 32
    8744:	41 93       	st	Z+, r20
    8746:	02 d0       	rcall	.+4      	; 0x874c <__ultoa_invert+0x84>
    8748:	a9 f7       	brne	.-22     	; 0x8734 <__ultoa_invert+0x6c>
    874a:	ea cf       	rjmp	.-44     	; 0x8720 <__ultoa_invert+0x58>
    874c:	b4 e0       	ldi	r27, 0x04	; 4
    874e:	a6 95       	lsr	r26
    8750:	97 95       	ror	r25
    8752:	87 95       	ror	r24
    8754:	77 95       	ror	r23
    8756:	67 95       	ror	r22
    8758:	ba 95       	dec	r27
    875a:	c9 f7       	brne	.-14     	; 0x874e <__ultoa_invert+0x86>
    875c:	00 97       	sbiw	r24, 0x00	; 0
    875e:	61 05       	cpc	r22, r1
    8760:	71 05       	cpc	r23, r1
    8762:	08 95       	ret
    8764:	9b 01       	movw	r18, r22
    8766:	ac 01       	movw	r20, r24
    8768:	0a 2e       	mov	r0, r26
    876a:	06 94       	lsr	r0
    876c:	57 95       	ror	r21
    876e:	47 95       	ror	r20
    8770:	37 95       	ror	r19
    8772:	27 95       	ror	r18
    8774:	ba 95       	dec	r27
    8776:	c9 f7       	brne	.-14     	; 0x876a <__ultoa_invert+0xa2>
    8778:	62 0f       	add	r22, r18
    877a:	73 1f       	adc	r23, r19
    877c:	84 1f       	adc	r24, r20
    877e:	95 1f       	adc	r25, r21
    8780:	a0 1d       	adc	r26, r0
    8782:	08 95       	ret

00008784 <eeprom_read_byte>:
    8784:	03 d0       	rcall	.+6      	; 0x878c <eeprom_mapen>
    8786:	80 81       	ld	r24, Z
    8788:	99 27       	eor	r25, r25
    878a:	08 95       	ret

0000878c <eeprom_mapen>:
    878c:	fc 01       	movw	r30, r24
    878e:	e0 50       	subi	r30, 0x00	; 0
    8790:	fc 4e       	sbci	r31, 0xEC	; 236
    8792:	08 95       	ret

00008794 <eeprom_read_dword>:
    8794:	0e 94 c6 43 	call	0x878c	; 0x878c <eeprom_mapen>
    8798:	60 81       	ld	r22, Z
    879a:	71 81       	ldd	r23, Z+1	; 0x01
    879c:	82 81       	ldd	r24, Z+2	; 0x02
    879e:	93 81       	ldd	r25, Z+3	; 0x03
    87a0:	08 95       	ret

000087a2 <eeprom_read_word>:
    87a2:	0e 94 c6 43 	call	0x878c	; 0x878c <eeprom_mapen>
    87a6:	80 81       	ld	r24, Z
    87a8:	91 81       	ldd	r25, Z+1	; 0x01
    87aa:	08 95       	ret

000087ac <__do_global_dtors>:
    87ac:	11 e0       	ldi	r17, 0x01	; 1
    87ae:	c7 e0       	ldi	r28, 0x07	; 7
    87b0:	d1 e0       	ldi	r29, 0x01	; 1
    87b2:	04 c0       	rjmp	.+8      	; 0x87bc <__do_global_dtors+0x10>
    87b4:	fe 01       	movw	r30, r28
    87b6:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <__tablejump2__>
    87ba:	21 96       	adiw	r28, 0x01	; 1
    87bc:	c9 30       	cpi	r28, 0x09	; 9
    87be:	d1 07       	cpc	r29, r17
    87c0:	c9 f7       	brne	.-14     	; 0x87b4 <__do_global_dtors+0x8>
    87c2:	f8 94       	cli

000087c4 <__stop_program>:
    87c4:	ff cf       	rjmp	.-2      	; 0x87c4 <__stop_program>
