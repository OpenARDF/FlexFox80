
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000052e  00804000  00009bdc  00009c90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009bdc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000415  0080452e  0080452e  0000a1be  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  0000a1be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000a1f3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a250  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000009a8  00000000  00000000  0000a290  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00012cd6  00000000  00000000  0000ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005be6  00000000  00000000  0001d90e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007ddf  00000000  00000000  000234f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001e64  00000000  00000000  0002b2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006004  00000000  00000000  0002d138  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ae18  00000000  00000000  0003313c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000918  00000000  00000000  0003df54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 01 	jmp	0x300	; 0x300 <__dtors_end>
       4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      10:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      18:	0c 94 e5 28 	jmp	0x51ca	; 0x51ca <__vector_6>
      1c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      20:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      24:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      30:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__vector_12>
      34:	0c 94 67 43 	jmp	0x86ce	; 0x86ce <__vector_13>
      38:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      3c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      40:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      4c:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_19>
      50:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_20>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      5c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      60:	0c 94 56 28 	jmp	0x50ac	; 0x50ac <__vector_24>
      64:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      68:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      6c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      70:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      74:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <__vector_29>
      78:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__vector_30>
      7c:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__vector_31>
      80:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_32>
      84:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      88:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      8c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      90:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      94:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      98:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      9c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a4:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_41>
      a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      dc:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_55>
      e0:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_56>
      e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e8:	d9 22       	and	r13, r25
      ea:	e5 22       	and	r14, r21
      ec:	f4 22       	and	r15, r20
      ee:	03 23       	and	r16, r19
      f0:	12 23       	and	r17, r18
      f2:	0b 24       	eor	r0, r11
      f4:	03 24       	eor	r0, r3
      f6:	43 23       	and	r20, r19
      f8:	4c 23       	and	r20, r28
      fa:	58 23       	and	r21, r24
      fc:	64 23       	and	r22, r20
      fe:	70 23       	and	r23, r16
     100:	a3 23       	and	r26, r19
     102:	ac 23       	and	r26, r28
     104:	b8 23       	and	r27, r24
     106:	c4 23       	and	r28, r20
     108:	d0 23       	and	r29, r16
     10a:	44 30       	cpi	r20, 0x04	; 4
     10c:	4a 30       	cpi	r20, 0x0A	; 10
     10e:	2c 30       	cpi	r18, 0x0C	; 12
     110:	4a 30       	cpi	r20, 0x0A	; 10
     112:	4a 30       	cpi	r20, 0x0A	; 10
     114:	4a 30       	cpi	r20, 0x0A	; 10
     116:	35 30       	cpi	r19, 0x05	; 5
     118:	4a 30       	cpi	r20, 0x0A	; 10
     11a:	4a 30       	cpi	r20, 0x0A	; 10
     11c:	4a 30       	cpi	r20, 0x0A	; 10
     11e:	f3 2f       	mov	r31, r19
     120:	4a 30       	cpi	r20, 0x0A	; 10
     122:	4a 30       	cpi	r20, 0x0A	; 10
     124:	4a 30       	cpi	r20, 0x0A	; 10
     126:	4a 30       	cpi	r20, 0x0A	; 10
     128:	4a 30       	cpi	r20, 0x0A	; 10
     12a:	4a 30       	cpi	r20, 0x0A	; 10
     12c:	4a 30       	cpi	r20, 0x0A	; 10
     12e:	4a 30       	cpi	r20, 0x0A	; 10
     130:	4a 30       	cpi	r20, 0x0A	; 10
     132:	4a 30       	cpi	r20, 0x0A	; 10
     134:	4a 30       	cpi	r20, 0x0A	; 10
     136:	4a 30       	cpi	r20, 0x0A	; 10
     138:	4a 30       	cpi	r20, 0x0A	; 10
     13a:	4a 30       	cpi	r20, 0x0A	; 10
     13c:	4a 30       	cpi	r20, 0x0A	; 10
     13e:	4a 30       	cpi	r20, 0x0A	; 10
     140:	4a 30       	cpi	r20, 0x0A	; 10
     142:	4a 30       	cpi	r20, 0x0A	; 10
     144:	4a 30       	cpi	r20, 0x0A	; 10
     146:	4a 30       	cpi	r20, 0x0A	; 10
     148:	09 30       	cpi	r16, 0x09	; 9
     14a:	4a 30       	cpi	r20, 0x0A	; 10
     14c:	4a 30       	cpi	r20, 0x0A	; 10
     14e:	4a 30       	cpi	r20, 0x0A	; 10
     150:	4a 30       	cpi	r20, 0x0A	; 10
     152:	4a 30       	cpi	r20, 0x0A	; 10
     154:	4a 30       	cpi	r20, 0x0A	; 10
     156:	4a 30       	cpi	r20, 0x0A	; 10
     158:	4a 30       	cpi	r20, 0x0A	; 10
     15a:	20 30       	cpi	r18, 0x00	; 0
     15c:	26 30       	cpi	r18, 0x06	; 6
     15e:	3e 30       	cpi	r19, 0x0E	; 14
     160:	da 2f       	mov	r29, r26
     162:	4a 30       	cpi	r20, 0x0A	; 10
     164:	4a 30       	cpi	r20, 0x0A	; 10
     166:	4a 30       	cpi	r20, 0x0A	; 10
     168:	e3 2f       	mov	r30, r19
     16a:	4a 30       	cpi	r20, 0x0A	; 10
     16c:	4a 30       	cpi	r20, 0x0A	; 10
     16e:	4a 30       	cpi	r20, 0x0A	; 10
     170:	ec 2f       	mov	r30, r28
     172:	5b 38       	cpi	r21, 0x8B	; 139
     174:	1f 38       	cpi	r17, 0x8F	; 143
     176:	4b 38       	cpi	r20, 0x8B	; 139
     178:	63 38       	cpi	r22, 0x83	; 131
     17a:	4f 38       	cpi	r20, 0x8F	; 143
     17c:	63 38       	cpi	r22, 0x83	; 131
     17e:	2f 38       	cpi	r18, 0x8F	; 143
     180:	1b 38       	cpi	r17, 0x8B	; 139
     182:	27 38       	cpi	r18, 0x87	; 135
     184:	2b 38       	cpi	r18, 0x8B	; 139
     186:	63 38       	cpi	r22, 0x83	; 131
     188:	3f 38       	cpi	r19, 0x8F	; 143
     18a:	13 38       	cpi	r17, 0x83	; 131
     18c:	43 38       	cpi	r20, 0x83	; 131
     18e:	0f 38       	cpi	r16, 0x8F	; 143
     190:	23 38       	cpi	r18, 0x83	; 131
     192:	e7 37       	cpi	r30, 0x77	; 119
     194:	eb 37       	cpi	r30, 0x7B	; 123
     196:	ef 37       	cpi	r30, 0x7F	; 127
     198:	f3 37       	cpi	r31, 0x73	; 115
     19a:	f7 37       	cpi	r31, 0x77	; 119
     19c:	fb 37       	cpi	r31, 0x7B	; 123
     19e:	ff 37       	cpi	r31, 0x7F	; 127
     1a0:	03 38       	cpi	r16, 0x83	; 131
     1a2:	07 38       	cpi	r16, 0x87	; 135
     1a4:	0b 38       	cpi	r16, 0x8B	; 139
     1a6:	33 38       	cpi	r19, 0x83	; 131
     1a8:	37 38       	cpi	r19, 0x87	; 135
     1aa:	5f 38       	cpi	r21, 0x8F	; 143
     1ac:	3b 38       	cpi	r19, 0x8B	; 139
     1ae:	63 38       	cpi	r22, 0x83	; 131
     1b0:	17 38       	cpi	r17, 0x87	; 135
     1b2:	53 38       	cpi	r21, 0x83	; 131
     1b4:	7f 37       	cpi	r23, 0x7F	; 127
     1b6:	83 37       	cpi	r24, 0x73	; 115
     1b8:	87 37       	cpi	r24, 0x77	; 119
     1ba:	8b 37       	cpi	r24, 0x7B	; 123
     1bc:	8f 37       	cpi	r24, 0x7F	; 127
     1be:	93 37       	cpi	r25, 0x73	; 115
     1c0:	97 37       	cpi	r25, 0x77	; 119
     1c2:	9b 37       	cpi	r25, 0x7B	; 123
     1c4:	9f 37       	cpi	r25, 0x7F	; 127
     1c6:	a3 37       	cpi	r26, 0x73	; 115
     1c8:	a7 37       	cpi	r26, 0x77	; 119
     1ca:	ab 37       	cpi	r26, 0x7B	; 123
     1cc:	af 37       	cpi	r26, 0x7F	; 127
     1ce:	b3 37       	cpi	r27, 0x73	; 115
     1d0:	b7 37       	cpi	r27, 0x77	; 119
     1d2:	bb 37       	cpi	r27, 0x7B	; 123
     1d4:	bf 37       	cpi	r27, 0x7F	; 127
     1d6:	c3 37       	cpi	r28, 0x73	; 115
     1d8:	c7 37       	cpi	r28, 0x77	; 119
     1da:	cb 37       	cpi	r28, 0x7B	; 123
     1dc:	cf 37       	cpi	r28, 0x7F	; 127
     1de:	d3 37       	cpi	r29, 0x73	; 115
     1e0:	d7 37       	cpi	r29, 0x77	; 119
     1e2:	db 37       	cpi	r29, 0x7B	; 123
     1e4:	df 37       	cpi	r29, 0x7F	; 127
     1e6:	e3 37       	cpi	r30, 0x73	; 115
     1e8:	63 38       	cpi	r22, 0x83	; 131
     1ea:	63 38       	cpi	r22, 0x83	; 131
     1ec:	63 38       	cpi	r22, 0x83	; 131
     1ee:	63 38       	cpi	r22, 0x83	; 131
     1f0:	47 38       	cpi	r20, 0x87	; 135
     1f2:	63 38       	cpi	r22, 0x83	; 131
     1f4:	63 38       	cpi	r22, 0x83	; 131
     1f6:	63 38       	cpi	r22, 0x83	; 131
     1f8:	63 38       	cpi	r22, 0x83	; 131
     1fa:	63 38       	cpi	r22, 0x83	; 131
     1fc:	63 38       	cpi	r22, 0x83	; 131
     1fe:	63 38       	cpi	r22, 0x83	; 131
     200:	63 38       	cpi	r22, 0x83	; 131
     202:	63 38       	cpi	r22, 0x83	; 131
     204:	63 38       	cpi	r22, 0x83	; 131
     206:	63 38       	cpi	r22, 0x83	; 131
     208:	63 38       	cpi	r22, 0x83	; 131
     20a:	63 38       	cpi	r22, 0x83	; 131
     20c:	63 38       	cpi	r22, 0x83	; 131
     20e:	63 38       	cpi	r22, 0x83	; 131
     210:	63 38       	cpi	r22, 0x83	; 131
     212:	63 38       	cpi	r22, 0x83	; 131
     214:	63 38       	cpi	r22, 0x83	; 131
     216:	63 38       	cpi	r22, 0x83	; 131
     218:	63 38       	cpi	r22, 0x83	; 131
     21a:	63 38       	cpi	r22, 0x83	; 131
     21c:	63 38       	cpi	r22, 0x83	; 131
     21e:	63 38       	cpi	r22, 0x83	; 131
     220:	63 38       	cpi	r22, 0x83	; 131
     222:	63 38       	cpi	r22, 0x83	; 131
     224:	63 38       	cpi	r22, 0x83	; 131
     226:	63 38       	cpi	r22, 0x83	; 131
     228:	63 38       	cpi	r22, 0x83	; 131
     22a:	57 38       	cpi	r21, 0x87	; 135

0000022c <__trampolines_end>:
     22c:	4a 61       	ori	r20, 0x1A	; 26
     22e:	6e 75       	andi	r22, 0x5E	; 94
     230:	61 72       	andi	r22, 0x21	; 33
     232:	79 20       	and	r7, r9
     234:	46 65       	ori	r20, 0x56	; 86
     236:	62 72       	andi	r22, 0x22	; 34
     238:	75 61       	ori	r23, 0x15	; 21
     23a:	72 79       	andi	r23, 0x92	; 146
     23c:	20 4d       	sbci	r18, 0xD0	; 208
     23e:	61 72       	andi	r22, 0x21	; 33
     240:	63 68       	ori	r22, 0x83	; 131
     242:	20 41       	sbci	r18, 0x10	; 16
     244:	70 72       	andi	r23, 0x20	; 32
     246:	69 6c       	ori	r22, 0xC9	; 201
     248:	20 4d       	sbci	r18, 0xD0	; 208
     24a:	61 79       	andi	r22, 0x91	; 145
     24c:	20 4a       	sbci	r18, 0xA0	; 160
     24e:	75 6e       	ori	r23, 0xE5	; 229
     250:	65 20       	and	r6, r5
     252:	4a 75       	andi	r20, 0x5A	; 90
     254:	6c 79       	andi	r22, 0x9C	; 156
     256:	20 41       	sbci	r18, 0x10	; 16
     258:	75 67       	ori	r23, 0x75	; 117
     25a:	75 73       	andi	r23, 0x35	; 53
     25c:	74 20       	and	r7, r4
     25e:	53 65       	ori	r21, 0x53	; 83
     260:	70 74       	andi	r23, 0x40	; 64
     262:	65 6d       	ori	r22, 0xD5	; 213
     264:	62 65       	ori	r22, 0x52	; 82
     266:	72 20       	and	r7, r2
     268:	4f 63       	ori	r20, 0x3F	; 63
     26a:	74 6f       	ori	r23, 0xF4	; 244
     26c:	62 65       	ori	r22, 0x52	; 82
     26e:	72 20       	and	r7, r2
     270:	4e 6f       	ori	r20, 0xFE	; 254
     272:	76 65       	ori	r23, 0x56	; 86
     274:	6d 62       	ori	r22, 0x2D	; 45
     276:	65 72       	andi	r22, 0x25	; 37
     278:	20 44       	sbci	r18, 0x40	; 64
     27a:	65 63       	ori	r22, 0x35	; 53
     27c:	65 6d       	ori	r22, 0xD5	; 213
     27e:	62 65       	ori	r22, 0x52	; 82
     280:	72 20       	and	r7, r2
	...

00000283 <strfwkdays>:
     283:	53 75 6e 64 61 79 20 4d 6f 6e 64 61 79 20 54 75     Sunday Monday Tu
     293:	65 73 64 61 79 20 57 65 64 6e 65 73 64 61 79 20     esday Wednesday 
     2a3:	54 68 75 72 73 64 61 79 20 46 72 69 64 61 79 20     Thursday Friday 
     2b3:	53 61 74 75 72 64 61 79 20 00                       Saturday .

000002bd <ascdays>:
     2bd:	53 75 6e 4d 6f 6e 54 75 65 57 65 64 54 68 75 46     SunMonTueWedThuF
     2cd:	72 69 53 61 74 00                                   riSat.

000002d3 <ascmonths>:
     2d3:	4a 61 6e 46 65 62 4d 61 72 41 70 72 4d 61 79 4a     JanFebMarAprMayJ
     2e3:	75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f     unJulAugSepOctNo
     2f3:	76 44 65 63 00                                      vDec.

000002f8 <__ctors_start>:
     2f8:	94 27       	eor	r25, r20
     2fa:	86 28       	or	r8, r6

000002fc <__ctors_end>:
     2fc:	9b 27       	eor	r25, r27
     2fe:	8d 28       	or	r8, r13

00000300 <__dtors_end>:
     300:	11 24       	eor	r1, r1
     302:	1f be       	out	0x3f, r1	; 63
     304:	cf ef       	ldi	r28, 0xFF	; 255
     306:	cd bf       	out	0x3d, r28	; 61
     308:	df e7       	ldi	r29, 0x7F	; 127
     30a:	de bf       	out	0x3e, r29	; 62

0000030c <__do_copy_data>:
     30c:	15 e4       	ldi	r17, 0x45	; 69
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b0 e4       	ldi	r27, 0x40	; 64
     312:	ec ed       	ldi	r30, 0xDC	; 220
     314:	fb e9       	ldi	r31, 0x9B	; 155
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0b bf       	out	0x3b, r16	; 59
     31a:	02 c0       	rjmp	.+4      	; 0x320 <__do_copy_data+0x14>
     31c:	07 90       	elpm	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	ae 32       	cpi	r26, 0x2E	; 46
     322:	b1 07       	cpc	r27, r17
     324:	d9 f7       	brne	.-10     	; 0x31c <__do_copy_data+0x10>

00000326 <__do_clear_bss>:
     326:	29 e4       	ldi	r18, 0x49	; 73
     328:	ae e2       	ldi	r26, 0x2E	; 46
     32a:	b5 e4       	ldi	r27, 0x45	; 69
     32c:	01 c0       	rjmp	.+2      	; 0x330 <.do_clear_bss_start>

0000032e <.do_clear_bss_loop>:
     32e:	1d 92       	st	X+, r1

00000330 <.do_clear_bss_start>:
     330:	a3 34       	cpi	r26, 0x43	; 67
     332:	b2 07       	cpc	r27, r18
     334:	e1 f7       	brne	.-8      	; 0x32e <.do_clear_bss_loop>

00000336 <__do_global_ctors>:
     336:	11 e0       	ldi	r17, 0x01	; 1
     338:	ce e7       	ldi	r28, 0x7E	; 126
     33a:	d1 e0       	ldi	r29, 0x01	; 1
     33c:	04 c0       	rjmp	.+8      	; 0x346 <__do_global_ctors+0x10>
     33e:	21 97       	sbiw	r28, 0x01	; 1
     340:	fe 01       	movw	r30, r28
     342:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__tablejump2__>
     346:	cc 37       	cpi	r28, 0x7C	; 124
     348:	d1 07       	cpc	r29, r17
     34a:	c9 f7       	brne	.-14     	; 0x33e <__do_global_ctors+0x8>
     34c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <main>
     350:	0c 94 e1 4d 	jmp	0x9bc2	; 0x9bc2 <__do_global_dtors>

00000354 <__bad_interrupt>:
     354:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000358 <is_leap_year>:
     358:	9c 01       	movw	r18, r24
     35a:	23 70       	andi	r18, 0x03	; 3
     35c:	33 27       	eor	r19, r19
     35e:	23 2b       	or	r18, r19
     360:	59 f4       	brne	.+22     	; 0x378 <is_leap_year+0x20>
     362:	64 e6       	ldi	r22, 0x64	; 100
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     36a:	89 2b       	or	r24, r25
     36c:	39 f4       	brne	.+14     	; 0x37c <is_leap_year+0x24>
     36e:	63 70       	andi	r22, 0x03	; 3
     370:	77 27       	eor	r23, r23
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	67 2b       	or	r22, r23
     376:	19 f0       	breq	.+6      	; 0x37e <is_leap_year+0x26>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	08 95       	ret
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	08 95       	ret

00000380 <localtime>:
     380:	61 e3       	ldi	r22, 0x31	; 49
     382:	79 e4       	ldi	r23, 0x49	; 73
     384:	0e 94 c7 01 	call	0x38e	; 0x38e <localtime_r>
     388:	81 e3       	ldi	r24, 0x31	; 49
     38a:	99 e4       	ldi	r25, 0x49	; 73
     38c:	08 95       	ret

0000038e <localtime_r>:
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <localtime_r+0x12>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <localtime_r+0x14>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	6c 01       	movw	r12, r24
     3a8:	7b 01       	movw	r14, r22
     3aa:	e0 91 41 49 	lds	r30, 0x4941	; 0x804941 <__dst_ptr>
     3ae:	f0 91 42 49 	lds	r31, 0x4942	; 0x804942 <__dst_ptr+0x1>
     3b2:	30 97       	sbiw	r30, 0x00	; 0
     3b4:	29 f0       	breq	.+10     	; 0x3c0 <localtime_r+0x32>
     3b6:	6d e3       	ldi	r22, 0x3D	; 61
     3b8:	79 e4       	ldi	r23, 0x49	; 73
     3ba:	09 95       	icall
     3bc:	8c 01       	movw	r16, r24
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <localtime_r+0x36>
     3c0:	0f ef       	ldi	r16, 0xFF	; 255
     3c2:	1f ef       	ldi	r17, 0xFF	; 255
     3c4:	f6 01       	movw	r30, r12
     3c6:	40 81       	ld	r20, Z
     3c8:	51 81       	ldd	r21, Z+1	; 0x01
     3ca:	62 81       	ldd	r22, Z+2	; 0x02
     3cc:	73 81       	ldd	r23, Z+3	; 0x03
     3ce:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <__utc_offset>
     3d2:	90 91 3e 49 	lds	r25, 0x493E	; 0x80493e <__utc_offset+0x1>
     3d6:	a0 91 3f 49 	lds	r26, 0x493F	; 0x80493f <__utc_offset+0x2>
     3da:	b0 91 40 49 	lds	r27, 0x4940	; 0x804940 <__utc_offset+0x3>
     3de:	84 0f       	add	r24, r20
     3e0:	95 1f       	adc	r25, r21
     3e2:	a6 1f       	adc	r26, r22
     3e4:	b7 1f       	adc	r27, r23
     3e6:	10 16       	cp	r1, r16
     3e8:	11 06       	cpc	r1, r17
     3ea:	4c f4       	brge	.+18     	; 0x3fe <localtime_r+0x70>
     3ec:	a8 01       	movw	r20, r16
     3ee:	01 2e       	mov	r0, r17
     3f0:	00 0c       	add	r0, r0
     3f2:	66 0b       	sbc	r22, r22
     3f4:	77 0b       	sbc	r23, r23
     3f6:	84 0f       	add	r24, r20
     3f8:	95 1f       	adc	r25, r21
     3fa:	a6 1f       	adc	r26, r22
     3fc:	b7 1f       	adc	r27, r23
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	9a 83       	std	Y+2, r25	; 0x02
     402:	ab 83       	std	Y+3, r26	; 0x03
     404:	bc 83       	std	Y+4, r27	; 0x04
     406:	b7 01       	movw	r22, r14
     408:	ce 01       	movw	r24, r28
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gmtime_r>
     410:	f7 01       	movw	r30, r14
     412:	02 87       	std	Z+10, r16	; 0x0a
     414:	13 87       	std	Z+11, r17	; 0x0b
     416:	24 96       	adiw	r28, 0x04	; 4
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	08 95       	ret

0000042e <month_length>:
     42e:	62 30       	cpi	r22, 0x02	; 2
     430:	21 f4       	brne	.+8      	; 0x43a <month_length+0xc>
     432:	0e 94 ac 01 	call	0x358	; 0x358 <is_leap_year>
     436:	84 5e       	subi	r24, 0xE4	; 228
     438:	08 95       	ret
     43a:	68 30       	cpi	r22, 0x08	; 8
     43c:	08 f0       	brcs	.+2      	; 0x440 <month_length+0x12>
     43e:	6f 5f       	subi	r22, 0xFF	; 255
     440:	61 70       	andi	r22, 0x01	; 1
     442:	8e e1       	ldi	r24, 0x1E	; 30
     444:	86 0f       	add	r24, r22
     446:	08 95       	ret

00000448 <set_system_time>:
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	60 93 2d 49 	sts	0x492D, r22	; 0x80492d <__system_time>
     450:	70 93 2e 49 	sts	0x492E, r23	; 0x80492e <__system_time+0x1>
     454:	80 93 2f 49 	sts	0x492F, r24	; 0x80492f <__system_time+0x2>
     458:	90 93 30 49 	sts	0x4930, r25	; 0x804930 <__system_time+0x3>
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	08 95       	ret

00000460 <pgm_copystring>:
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	0f 93       	push	r16
     468:	6b 01       	movw	r12, r22
     46a:	e8 2e       	mov	r14, r24
     46c:	7c 2d       	mov	r23, r12
     46e:	6d 2d       	mov	r22, r13
     470:	5e 2d       	mov	r21, r14
     472:	ae 2d       	mov	r26, r14
     474:	c6 01       	movw	r24, r12
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	a1 1d       	adc	r26, r1
     47a:	44 23       	and	r20, r20
     47c:	51 f0       	breq	.+20     	; 0x492 <pgm_copystring+0x32>
     47e:	6c 01       	movw	r12, r24
     480:	ea 2e       	mov	r14, r26
     482:	e7 2f       	mov	r30, r23
     484:	f6 2f       	mov	r31, r22
     486:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <__xload_1>
     48a:	60 32       	cpi	r22, 0x20	; 32
     48c:	79 f7       	brne	.-34     	; 0x46c <pgm_copystring+0xc>
     48e:	41 50       	subi	r20, 0x01	; 1
     490:	ed cf       	rjmp	.-38     	; 0x46c <pgm_copystring+0xc>
     492:	f6 01       	movw	r30, r12
     494:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <__xload_1>
     498:	6c 01       	movw	r12, r24
     49a:	ea 2e       	mov	r14, r26
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	60 32       	cpi	r22, 0x20	; 32
     4a0:	39 f4       	brne	.+14     	; 0x4b0 <pgm_copystring+0x50>
     4a2:	f9 01       	movw	r30, r18
     4a4:	10 82       	st	Z, r1
     4a6:	0f 91       	pop	r16
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	08 95       	ret
     4b0:	80 17       	cp	r24, r16
     4b2:	b9 f3       	breq	.-18     	; 0x4a2 <pgm_copystring+0x42>
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	f9 01       	movw	r30, r18
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	60 83       	st	Z, r22
     4be:	8f 5f       	subi	r24, 0xFF	; 255
     4c0:	f6 01       	movw	r30, r12
     4c2:	5e 2d       	mov	r21, r14
     4c4:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <__xload_1>
     4c8:	9f ef       	ldi	r25, 0xFF	; 255
     4ca:	c9 1a       	sub	r12, r25
     4cc:	d9 0a       	sbc	r13, r25
     4ce:	e9 0a       	sbc	r14, r25
     4d0:	e6 cf       	rjmp	.-52     	; 0x49e <pgm_copystring+0x3e>

000004d2 <strftime>:
     4d2:	2f 92       	push	r2
     4d4:	3f 92       	push	r3
     4d6:	4f 92       	push	r4
     4d8:	5f 92       	push	r5
     4da:	6f 92       	push	r6
     4dc:	7f 92       	push	r7
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	a2 97       	sbiw	r28, 0x22	; 34
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	2c 01       	movw	r4, r24
     502:	69 a3       	std	Y+33, r22	; 0x21
     504:	7a a3       	std	Y+34, r23	; 0x22
     506:	4a 01       	movw	r8, r20
     508:	79 01       	movw	r14, r18
     50a:	61 2c       	mov	r6, r1
     50c:	71 2c       	mov	r7, r1
     50e:	9e 01       	movw	r18, r28
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	3f 4f       	sbci	r19, 0xFF	; 255
     514:	69 01       	movw	r12, r18
     516:	84 e6       	ldi	r24, 0x64	; 100
     518:	28 2e       	mov	r2, r24
     51a:	31 2c       	mov	r3, r1
     51c:	9f ec       	ldi	r25, 0xCF	; 207
     51e:	a9 2e       	mov	r10, r25
     520:	94 e4       	ldi	r25, 0x44	; 68
     522:	b9 2e       	mov	r11, r25
     524:	29 a1       	ldd	r18, Y+33	; 0x21
     526:	3a a1       	ldd	r19, Y+34	; 0x22
     528:	62 16       	cp	r6, r18
     52a:	73 06       	cpc	r7, r19
     52c:	08 f0       	brcs	.+2      	; 0x530 <strftime+0x5e>
     52e:	cd c2       	rjmp	.+1434   	; 0xaca <strftime+0x5f8>
     530:	d4 01       	movw	r26, r8
     532:	8c 91       	ld	r24, X
     534:	85 32       	cpi	r24, 0x25	; 37
     536:	09 f0       	breq	.+2      	; 0x53a <strftime+0x68>
     538:	bc c2       	rjmp	.+1400   	; 0xab2 <strftime+0x5e0>
     53a:	11 96       	adiw	r26, 0x01	; 1
     53c:	1c 91       	ld	r17, X
     53e:	15 34       	cpi	r17, 0x45	; 69
     540:	31 f0       	breq	.+12     	; 0x54e <strftime+0x7c>
     542:	1f 34       	cpi	r17, 0x4F	; 79
     544:	21 f0       	breq	.+8      	; 0x54e <strftime+0x7c>
     546:	b2 e0       	ldi	r27, 0x02	; 2
     548:	8b 0e       	add	r8, r27
     54a:	91 1c       	adc	r9, r1
     54c:	06 c0       	rjmp	.+12     	; 0x55a <strftime+0x88>
     54e:	f4 01       	movw	r30, r8
     550:	12 81       	ldd	r17, Z+2	; 0x02
     552:	94 01       	movw	r18, r8
     554:	2d 5f       	subi	r18, 0xFD	; 253
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	49 01       	movw	r8, r18
     55a:	19 35       	cpi	r17, 0x59	; 89
     55c:	09 f4       	brne	.+2      	; 0x560 <strftime+0x8e>
     55e:	32 c2       	rjmp	.+1124   	; 0x9c4 <strftime+0x4f2>
     560:	0c f0       	brlt	.+2      	; 0x564 <strftime+0x92>
     562:	60 c0       	rjmp	.+192    	; 0x624 <strftime+0x152>
     564:	19 34       	cpi	r17, 0x49	; 73
     566:	09 f4       	brne	.+2      	; 0x56a <strftime+0x98>
     568:	3f c1       	rjmp	.+638    	; 0x7e8 <strftime+0x316>
     56a:	44 f5       	brge	.+80     	; 0x5bc <strftime+0xea>
     56c:	13 34       	cpi	r17, 0x43	; 67
     56e:	09 f4       	brne	.+2      	; 0x572 <strftime+0xa0>
     570:	e7 c0       	rjmp	.+462    	; 0x740 <strftime+0x26e>
     572:	54 f4       	brge	.+20     	; 0x588 <strftime+0xb6>
     574:	11 34       	cpi	r17, 0x41	; 65
     576:	09 f4       	brne	.+2      	; 0x57a <strftime+0xa8>
     578:	be c0       	rjmp	.+380    	; 0x6f6 <strftime+0x224>
     57a:	0c f0       	brlt	.+2      	; 0x57e <strftime+0xac>
     57c:	ca c0       	rjmp	.+404    	; 0x712 <strftime+0x240>
     57e:	15 32       	cpi	r17, 0x25	; 37
     580:	09 f0       	breq	.+2      	; 0x584 <strftime+0xb2>
     582:	74 c2       	rjmp	.+1256   	; 0xa6c <strftime+0x59a>
     584:	19 83       	std	Y+1, r17	; 0x01
     586:	75 c2       	rjmp	.+1258   	; 0xa72 <strftime+0x5a0>
     588:	16 34       	cpi	r17, 0x46	; 70
     58a:	09 f4       	brne	.+2      	; 0x58e <strftime+0xbc>
     58c:	ea c0       	rjmp	.+468    	; 0x762 <strftime+0x290>
     58e:	64 f4       	brge	.+24     	; 0x5a8 <strftime+0xd6>
     590:	14 34       	cpi	r17, 0x44	; 68
     592:	09 f0       	breq	.+2      	; 0x596 <strftime+0xc4>
     594:	6b c2       	rjmp	.+1238   	; 0xa6c <strftime+0x59a>
     596:	f7 01       	movw	r30, r14
     598:	86 81       	ldd	r24, Z+6	; 0x06
     59a:	97 81       	ldd	r25, Z+7	; 0x07
     59c:	b1 01       	movw	r22, r2
     59e:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	e7 c1       	rjmp	.+974    	; 0x976 <strftime+0x4a4>
     5a8:	17 34       	cpi	r17, 0x47	; 71
     5aa:	09 f4       	brne	.+2      	; 0x5ae <strftime+0xdc>
     5ac:	f8 c0       	rjmp	.+496    	; 0x79e <strftime+0x2cc>
     5ae:	18 34       	cpi	r17, 0x48	; 72
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <strftime+0xe2>
     5b2:	5c c2       	rjmp	.+1208   	; 0xa6c <strftime+0x59a>
     5b4:	d7 01       	movw	r26, r14
     5b6:	12 96       	adiw	r26, 0x02	; 2
     5b8:	8c 91       	ld	r24, X
     5ba:	30 c1       	rjmp	.+608    	; 0x81c <strftime+0x34a>
     5bc:	14 35       	cpi	r17, 0x54	; 84
     5be:	09 f4       	brne	.+2      	; 0x5c2 <strftime+0xf0>
     5c0:	89 c1       	rjmp	.+786    	; 0x8d4 <strftime+0x402>
     5c2:	64 f4       	brge	.+24     	; 0x5dc <strftime+0x10a>
     5c4:	12 35       	cpi	r17, 0x52	; 82
     5c6:	09 f4       	brne	.+2      	; 0x5ca <strftime+0xf8>
     5c8:	6e c1       	rjmp	.+732    	; 0x8a6 <strftime+0x3d4>
     5ca:	0c f0       	brlt	.+2      	; 0x5ce <strftime+0xfc>
     5cc:	25 c1       	rjmp	.+586    	; 0x818 <strftime+0x346>
     5ce:	1d 34       	cpi	r17, 0x4D	; 77
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <strftime+0x102>
     5d2:	4c c2       	rjmp	.+1176   	; 0xa6c <strftime+0x59a>
     5d4:	d7 01       	movw	r26, r14
     5d6:	11 96       	adiw	r26, 0x01	; 1
     5d8:	8c 91       	ld	r24, X
     5da:	20 c1       	rjmp	.+576    	; 0x81c <strftime+0x34a>
     5dc:	16 35       	cpi	r17, 0x56	; 86
     5de:	09 f4       	brne	.+2      	; 0x5e2 <strftime+0x110>
     5e0:	a5 c1       	rjmp	.+842    	; 0x92c <strftime+0x45a>
     5e2:	0c f4       	brge	.+2      	; 0x5e6 <strftime+0x114>
     5e4:	a1 c1       	rjmp	.+834    	; 0x928 <strftime+0x456>
     5e6:	17 35       	cpi	r17, 0x57	; 87
     5e8:	09 f4       	brne	.+2      	; 0x5ec <strftime+0x11a>
     5ea:	b4 c1       	rjmp	.+872    	; 0x954 <strftime+0x482>
     5ec:	18 35       	cpi	r17, 0x58	; 88
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <strftime+0x120>
     5f0:	3d c2       	rjmp	.+1146   	; 0xa6c <strftime+0x59a>
     5f2:	f7 01       	movw	r30, r14
     5f4:	80 81       	ld	r24, Z
     5f6:	28 2f       	mov	r18, r24
     5f8:	08 2e       	mov	r0, r24
     5fa:	00 0c       	add	r0, r0
     5fc:	33 0b       	sbc	r19, r19
     5fe:	3f 93       	push	r19
     600:	8f 93       	push	r24
     602:	81 81       	ldd	r24, Z+1	; 0x01
     604:	28 2f       	mov	r18, r24
     606:	08 2e       	mov	r0, r24
     608:	00 0c       	add	r0, r0
     60a:	33 0b       	sbc	r19, r19
     60c:	3f 93       	push	r19
     60e:	8f 93       	push	r24
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	28 2f       	mov	r18, r24
     614:	08 2e       	mov	r0, r24
     616:	00 0c       	add	r0, r0
     618:	33 0b       	sbc	r19, r19
     61a:	3f 93       	push	r19
     61c:	8f 93       	push	r24
     61e:	84 e1       	ldi	r24, 0x14	; 20
     620:	95 e4       	ldi	r25, 0x45	; 69
     622:	c0 c1       	rjmp	.+896    	; 0x9a4 <strftime+0x4d2>
     624:	1d 36       	cpi	r17, 0x6D	; 109
     626:	09 f4       	brne	.+2      	; 0x62a <strftime+0x158>
     628:	f0 c0       	rjmp	.+480    	; 0x80a <strftime+0x338>
     62a:	ac f5       	brge	.+106    	; 0x696 <strftime+0x1c4>
     62c:	14 36       	cpi	r17, 0x64	; 100
     62e:	09 f4       	brne	.+2      	; 0x632 <strftime+0x160>
     630:	94 c0       	rjmp	.+296    	; 0x75a <strftime+0x288>
     632:	74 f4       	brge	.+28     	; 0x650 <strftime+0x17e>
     634:	12 36       	cpi	r17, 0x62	; 98
     636:	09 f4       	brne	.+2      	; 0x63a <strftime+0x168>
     638:	66 c0       	rjmp	.+204    	; 0x706 <strftime+0x234>
     63a:	0c f0       	brlt	.+2      	; 0x63e <strftime+0x16c>
     63c:	75 c0       	rjmp	.+234    	; 0x728 <strftime+0x256>
     63e:	11 36       	cpi	r17, 0x61	; 97
     640:	09 f0       	breq	.+2      	; 0x644 <strftime+0x172>
     642:	14 c2       	rjmp	.+1064   	; 0xa6c <strftime+0x59a>
     644:	03 e0       	ldi	r16, 0x03	; 3
     646:	96 01       	movw	r18, r12
     648:	d7 01       	movw	r26, r14
     64a:	14 96       	adiw	r26, 0x04	; 4
     64c:	4c 91       	ld	r20, X
     64e:	57 c0       	rjmp	.+174    	; 0x6fe <strftime+0x22c>
     650:	17 36       	cpi	r17, 0x67	; 103
     652:	09 f4       	brne	.+2      	; 0x656 <strftime+0x184>
     654:	a4 c0       	rjmp	.+328    	; 0x79e <strftime+0x2cc>
     656:	74 f4       	brge	.+28     	; 0x674 <strftime+0x1a2>
     658:	15 36       	cpi	r17, 0x65	; 101
     65a:	09 f0       	breq	.+2      	; 0x65e <strftime+0x18c>
     65c:	07 c2       	rjmp	.+1038   	; 0xa6c <strftime+0x59a>
     65e:	f7 01       	movw	r30, r14
     660:	83 81       	ldd	r24, Z+3	; 0x03
     662:	28 2f       	mov	r18, r24
     664:	08 2e       	mov	r0, r24
     666:	00 0c       	add	r0, r0
     668:	33 0b       	sbc	r19, r19
     66a:	3f 93       	push	r19
     66c:	8f 93       	push	r24
     66e:	84 ed       	ldi	r24, 0xD4	; 212
     670:	94 e4       	ldi	r25, 0x44	; 68
     672:	c8 c0       	rjmp	.+400    	; 0x804 <strftime+0x332>
     674:	18 36       	cpi	r17, 0x68	; 104
     676:	09 f4       	brne	.+2      	; 0x67a <strftime+0x1a8>
     678:	46 c0       	rjmp	.+140    	; 0x706 <strftime+0x234>
     67a:	1a 36       	cpi	r17, 0x6A	; 106
     67c:	09 f0       	breq	.+2      	; 0x680 <strftime+0x1ae>
     67e:	f6 c1       	rjmp	.+1004   	; 0xa6c <strftime+0x59a>
     680:	d7 01       	movw	r26, r14
     682:	18 96       	adiw	r26, 0x08	; 8
     684:	8d 91       	ld	r24, X+
     686:	9c 91       	ld	r25, X
     688:	19 97       	sbiw	r26, 0x09	; 9
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	8a ee       	ldi	r24, 0xEA	; 234
     692:	94 e4       	ldi	r25, 0x44	; 68
     694:	b7 c0       	rjmp	.+366    	; 0x804 <strftime+0x332>
     696:	15 37       	cpi	r17, 0x75	; 117
     698:	09 f4       	brne	.+2      	; 0x69c <strftime+0x1ca>
     69a:	35 c1       	rjmp	.+618    	; 0x906 <strftime+0x434>
     69c:	b4 f4       	brge	.+44     	; 0x6ca <strftime+0x1f8>
     69e:	10 37       	cpi	r17, 0x70	; 112
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <strftime+0x1d2>
     6a2:	c2 c0       	rjmp	.+388    	; 0x828 <strftime+0x356>
     6a4:	34 f4       	brge	.+12     	; 0x6b2 <strftime+0x1e0>
     6a6:	1e 36       	cpi	r17, 0x6E	; 110
     6a8:	09 f0       	breq	.+2      	; 0x6ac <strftime+0x1da>
     6aa:	e0 c1       	rjmp	.+960    	; 0xa6c <strftime+0x59a>
     6ac:	8a e0       	ldi	r24, 0x0A	; 10
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	e0 c1       	rjmp	.+960    	; 0xa72 <strftime+0x5a0>
     6b2:	12 37       	cpi	r17, 0x72	; 114
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <strftime+0x1e6>
     6b6:	c6 c0       	rjmp	.+396    	; 0x844 <strftime+0x372>
     6b8:	14 37       	cpi	r17, 0x74	; 116
     6ba:	09 f0       	breq	.+2      	; 0x6be <strftime+0x1ec>
     6bc:	d7 c1       	rjmp	.+942    	; 0xa6c <strftime+0x59a>
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	75 e4       	ldi	r23, 0x45	; 69
     6c2:	c6 01       	movw	r24, r12
     6c4:	0e 94 93 4a 	call	0x9526	; 0x9526 <strcpy>
     6c8:	d4 c1       	rjmp	.+936    	; 0xa72 <strftime+0x5a0>
     6ca:	18 37       	cpi	r17, 0x78	; 120
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <strftime+0x1fe>
     6ce:	48 c1       	rjmp	.+656    	; 0x960 <strftime+0x48e>
     6d0:	5c f4       	brge	.+22     	; 0x6e8 <strftime+0x216>
     6d2:	17 37       	cpi	r17, 0x77	; 119
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <strftime+0x206>
     6d6:	ca c1       	rjmp	.+916    	; 0xa6c <strftime+0x59a>
     6d8:	f7 01       	movw	r30, r14
     6da:	84 81       	ldd	r24, Z+4	; 0x04
     6dc:	28 2f       	mov	r18, r24
     6de:	08 2e       	mov	r0, r24
     6e0:	00 0c       	add	r0, r0
     6e2:	33 0b       	sbc	r19, r19
     6e4:	3f 93       	push	r19
     6e6:	74 c1       	rjmp	.+744    	; 0x9d0 <strftime+0x4fe>
     6e8:	19 37       	cpi	r17, 0x79	; 121
     6ea:	09 f4       	brne	.+2      	; 0x6ee <strftime+0x21c>
     6ec:	5e c1       	rjmp	.+700    	; 0x9aa <strftime+0x4d8>
     6ee:	1a 37       	cpi	r17, 0x7A	; 122
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <strftime+0x222>
     6f2:	7e c1       	rjmp	.+764    	; 0x9f0 <strftime+0x51e>
     6f4:	bb c1       	rjmp	.+886    	; 0xa6c <strftime+0x59a>
     6f6:	0f ef       	ldi	r16, 0xFF	; 255
     6f8:	96 01       	movw	r18, r12
     6fa:	f7 01       	movw	r30, r14
     6fc:	44 81       	ldd	r20, Z+4	; 0x04
     6fe:	63 e8       	ldi	r22, 0x83	; 131
     700:	72 e0       	ldi	r23, 0x02	; 2
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0d c0       	rjmp	.+26     	; 0x720 <strftime+0x24e>
     706:	03 e0       	ldi	r16, 0x03	; 3
     708:	96 01       	movw	r18, r12
     70a:	d7 01       	movw	r26, r14
     70c:	15 96       	adiw	r26, 0x05	; 5
     70e:	4c 91       	ld	r20, X
     710:	04 c0       	rjmp	.+8      	; 0x71a <strftime+0x248>
     712:	0f ef       	ldi	r16, 0xFF	; 255
     714:	96 01       	movw	r18, r12
     716:	f7 01       	movw	r30, r14
     718:	45 81       	ldd	r20, Z+5	; 0x05
     71a:	6c e2       	ldi	r22, 0x2C	; 44
     71c:	72 e0       	ldi	r23, 0x02	; 2
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 30 02 	call	0x460	; 0x460 <pgm_copystring>
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	a7 c1       	rjmp	.+846    	; 0xa76 <strftime+0x5a4>
     728:	b6 01       	movw	r22, r12
     72a:	c7 01       	movw	r24, r14
     72c:	0e 94 cc 05 	call	0xb98	; 0xb98 <asctime_r>
     730:	f6 01       	movw	r30, r12
     732:	cf 01       	movw	r24, r30
     734:	8c 19       	sub	r24, r12
     736:	9d 09       	sbc	r25, r13
     738:	21 91       	ld	r18, Z+
     73a:	21 11       	cpse	r18, r1
     73c:	fa cf       	rjmp	.-12     	; 0x732 <strftime+0x260>
     73e:	9b c1       	rjmp	.+822    	; 0xa76 <strftime+0x5a4>
     740:	d7 01       	movw	r26, r14
     742:	16 96       	adiw	r26, 0x06	; 6
     744:	8d 91       	ld	r24, X+
     746:	9c 91       	ld	r25, X
     748:	17 97       	sbiw	r26, 0x07	; 7
     74a:	84 59       	subi	r24, 0x94	; 148
     74c:	98 4f       	sbci	r25, 0xF8	; 248
     74e:	b1 01       	movw	r22, r2
     750:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     754:	7f 93       	push	r23
     756:	6f 93       	push	r22
     758:	3b c0       	rjmp	.+118    	; 0x7d0 <strftime+0x2fe>
     75a:	d7 01       	movw	r26, r14
     75c:	13 96       	adiw	r26, 0x03	; 3
     75e:	8c 91       	ld	r24, X
     760:	5d c0       	rjmp	.+186    	; 0x81c <strftime+0x34a>
     762:	d7 01       	movw	r26, r14
     764:	13 96       	adiw	r26, 0x03	; 3
     766:	8c 91       	ld	r24, X
     768:	13 97       	sbiw	r26, 0x03	; 3
     76a:	28 2f       	mov	r18, r24
     76c:	08 2e       	mov	r0, r24
     76e:	00 0c       	add	r0, r0
     770:	33 0b       	sbc	r19, r19
     772:	3f 93       	push	r19
     774:	8f 93       	push	r24
     776:	15 96       	adiw	r26, 0x05	; 5
     778:	8c 91       	ld	r24, X
     77a:	15 97       	sbiw	r26, 0x05	; 5
     77c:	08 2e       	mov	r0, r24
     77e:	00 0c       	add	r0, r0
     780:	99 0b       	sbc	r25, r25
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	16 96       	adiw	r26, 0x06	; 6
     78a:	8d 91       	ld	r24, X+
     78c:	9c 91       	ld	r25, X
     78e:	17 97       	sbiw	r26, 0x07	; 7
     790:	84 59       	subi	r24, 0x94	; 148
     792:	98 4f       	sbci	r25, 0xF8	; 248
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	88 ed       	ldi	r24, 0xD8	; 216
     79a:	94 e4       	ldi	r25, 0x44	; 68
     79c:	03 c1       	rjmp	.+518    	; 0x9a4 <strftime+0x4d2>
     79e:	d7 01       	movw	r26, r14
     7a0:	18 96       	adiw	r26, 0x08	; 8
     7a2:	6d 91       	ld	r22, X+
     7a4:	7c 91       	ld	r23, X
     7a6:	19 97       	sbiw	r26, 0x09	; 9
     7a8:	16 96       	adiw	r26, 0x06	; 6
     7aa:	8d 91       	ld	r24, X+
     7ac:	9c 91       	ld	r25, X
     7ae:	17 97       	sbiw	r26, 0x07	; 7
     7b0:	ae 01       	movw	r20, r28
     7b2:	45 5e       	subi	r20, 0xE5	; 229
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	84 59       	subi	r24, 0x94	; 148
     7b8:	98 4f       	sbci	r25, 0xF8	; 248
     7ba:	0e 94 25 07 	call	0xe4a	; 0xe4a <iso_week_date_r>
     7be:	17 36       	cpi	r17, 0x67	; 103
     7c0:	51 f4       	brne	.+20     	; 0x7d6 <strftime+0x304>
     7c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7c6:	b1 01       	movw	r22, r2
     7c8:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     7cc:	9f 93       	push	r25
     7ce:	8f 93       	push	r24
     7d0:	e0 ee       	ldi	r30, 0xE0	; 224
     7d2:	f4 e4       	ldi	r31, 0x44	; 68
     7d4:	a6 c0       	rjmp	.+332    	; 0x922 <strftime+0x450>
     7d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7d8:	8f 93       	push	r24
     7da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7dc:	8f 93       	push	r24
     7de:	45 ee       	ldi	r20, 0xE5	; 229
     7e0:	54 e4       	ldi	r21, 0x44	; 68
     7e2:	5f 93       	push	r21
     7e4:	4f 93       	push	r20
     7e6:	f9 c0       	rjmp	.+498    	; 0x9da <strftime+0x508>
     7e8:	f7 01       	movw	r30, r14
     7ea:	82 81       	ldd	r24, Z+2	; 0x02
     7ec:	6c e0       	ldi	r22, 0x0C	; 12
     7ee:	0e 94 c0 4d 	call	0x9b80	; 0x9b80 <__divmodqi4>
     7f2:	99 23       	and	r25, r25
     7f4:	21 f0       	breq	.+8      	; 0x7fe <strftime+0x32c>
     7f6:	89 2f       	mov	r24, r25
     7f8:	99 0f       	add	r25, r25
     7fa:	99 0b       	sbc	r25, r25
     7fc:	de c0       	rjmp	.+444    	; 0x9ba <strftime+0x4e8>
     7fe:	8c e0       	ldi	r24, 0x0C	; 12
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	db c0       	rjmp	.+438    	; 0x9ba <strftime+0x4e8>
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	e8 c0       	rjmp	.+464    	; 0x9da <strftime+0x508>
     80a:	f7 01       	movw	r30, r14
     80c:	85 81       	ldd	r24, Z+5	; 0x05
     80e:	08 2e       	mov	r0, r24
     810:	00 0c       	add	r0, r0
     812:	99 0b       	sbc	r25, r25
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	d1 c0       	rjmp	.+418    	; 0x9ba <strftime+0x4e8>
     818:	d7 01       	movw	r26, r14
     81a:	8c 91       	ld	r24, X
     81c:	28 2f       	mov	r18, r24
     81e:	08 2e       	mov	r0, r24
     820:	00 0c       	add	r0, r0
     822:	33 0b       	sbc	r19, r19
     824:	3f 93       	push	r19
     826:	ca c0       	rjmp	.+404    	; 0x9bc <strftime+0x4ea>
     828:	81 e4       	ldi	r24, 0x41	; 65
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	f7 01       	movw	r30, r14
     82e:	82 81       	ldd	r24, Z+2	; 0x02
     830:	8c 30       	cpi	r24, 0x0C	; 12
     832:	14 f0       	brlt	.+4      	; 0x838 <strftime+0x366>
     834:	80 e5       	ldi	r24, 0x50	; 80
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	8d e4       	ldi	r24, 0x4D	; 77
     83a:	8a 83       	std	Y+2, r24	; 0x02
     83c:	1b 82       	std	Y+3, r1	; 0x03
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	19 c1       	rjmp	.+562    	; 0xa76 <strftime+0x5a4>
     844:	d7 01       	movw	r26, r14
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	8c 91       	ld	r24, X
     84a:	6c e0       	ldi	r22, 0x0C	; 12
     84c:	0e 94 c0 4d 	call	0x9b80	; 0x9b80 <__divmodqi4>
     850:	99 23       	and	r25, r25
     852:	21 f0       	breq	.+8      	; 0x85c <strftime+0x38a>
     854:	89 2f       	mov	r24, r25
     856:	99 0f       	add	r25, r25
     858:	99 0b       	sbc	r25, r25
     85a:	02 c0       	rjmp	.+4      	; 0x860 <strftime+0x38e>
     85c:	8c e0       	ldi	r24, 0x0C	; 12
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	f7 01       	movw	r30, r14
     862:	20 81       	ld	r18, Z
     864:	42 2f       	mov	r20, r18
     866:	02 2e       	mov	r0, r18
     868:	00 0c       	add	r0, r0
     86a:	55 0b       	sbc	r21, r21
     86c:	5f 93       	push	r21
     86e:	2f 93       	push	r18
     870:	21 81       	ldd	r18, Z+1	; 0x01
     872:	42 2f       	mov	r20, r18
     874:	02 2e       	mov	r0, r18
     876:	00 0c       	add	r0, r0
     878:	55 0b       	sbc	r21, r21
     87a:	5f 93       	push	r21
     87c:	2f 93       	push	r18
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	2f ee       	ldi	r18, 0xEF	; 239
     884:	34 e4       	ldi	r19, 0x44	; 68
     886:	3f 93       	push	r19
     888:	2f 93       	push	r18
     88a:	df 92       	push	r13
     88c:	cf 92       	push	r12
     88e:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
     892:	cd bf       	out	0x3d, r28	; 61
     894:	de bf       	out	0x3e, r29	; 62
     896:	f7 01       	movw	r30, r14
     898:	22 81       	ldd	r18, Z+2	; 0x02
     89a:	2c 30       	cpi	r18, 0x0C	; 12
     89c:	0c f4       	brge	.+2      	; 0x8a0 <strftime+0x3ce>
     89e:	eb c0       	rjmp	.+470    	; 0xa76 <strftime+0x5a4>
     8a0:	20 e5       	ldi	r18, 0x50	; 80
     8a2:	2b 87       	std	Y+11, r18	; 0x0b
     8a4:	e8 c0       	rjmp	.+464    	; 0xa76 <strftime+0x5a4>
     8a6:	d7 01       	movw	r26, r14
     8a8:	11 96       	adiw	r26, 0x01	; 1
     8aa:	8c 91       	ld	r24, X
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	28 2f       	mov	r18, r24
     8b0:	08 2e       	mov	r0, r24
     8b2:	00 0c       	add	r0, r0
     8b4:	33 0b       	sbc	r19, r19
     8b6:	3f 93       	push	r19
     8b8:	8f 93       	push	r24
     8ba:	12 96       	adiw	r26, 0x02	; 2
     8bc:	8c 91       	ld	r24, X
     8be:	28 2f       	mov	r18, r24
     8c0:	08 2e       	mov	r0, r24
     8c2:	00 0c       	add	r0, r0
     8c4:	33 0b       	sbc	r19, r19
     8c6:	3f 93       	push	r19
     8c8:	8f 93       	push	r24
     8ca:	87 e0       	ldi	r24, 0x07	; 7
     8cc:	95 e4       	ldi	r25, 0x45	; 69
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	c5 c0       	rjmp	.+394    	; 0xa5e <strftime+0x58c>
     8d4:	f7 01       	movw	r30, r14
     8d6:	80 81       	ld	r24, Z
     8d8:	28 2f       	mov	r18, r24
     8da:	08 2e       	mov	r0, r24
     8dc:	00 0c       	add	r0, r0
     8de:	33 0b       	sbc	r19, r19
     8e0:	3f 93       	push	r19
     8e2:	8f 93       	push	r24
     8e4:	81 81       	ldd	r24, Z+1	; 0x01
     8e6:	28 2f       	mov	r18, r24
     8e8:	08 2e       	mov	r0, r24
     8ea:	00 0c       	add	r0, r0
     8ec:	33 0b       	sbc	r19, r19
     8ee:	3f 93       	push	r19
     8f0:	8f 93       	push	r24
     8f2:	82 81       	ldd	r24, Z+2	; 0x02
     8f4:	28 2f       	mov	r18, r24
     8f6:	08 2e       	mov	r0, r24
     8f8:	00 0c       	add	r0, r0
     8fa:	33 0b       	sbc	r19, r19
     8fc:	3f 93       	push	r19
     8fe:	8f 93       	push	r24
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	95 e4       	ldi	r25, 0x45	; 69
     904:	4f c0       	rjmp	.+158    	; 0x9a4 <strftime+0x4d2>
     906:	d7 01       	movw	r26, r14
     908:	14 96       	adiw	r26, 0x04	; 4
     90a:	8c 91       	ld	r24, X
     90c:	08 2e       	mov	r0, r24
     90e:	00 0c       	add	r0, r0
     910:	99 0b       	sbc	r25, r25
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	11 f4       	brne	.+4      	; 0x91a <strftime+0x448>
     916:	87 e0       	ldi	r24, 0x07	; 7
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	e1 e1       	ldi	r30, 0x11	; 17
     920:	f5 e4       	ldi	r31, 0x45	; 69
     922:	ff 93       	push	r31
     924:	ef 93       	push	r30
     926:	59 c0       	rjmp	.+178    	; 0x9da <strftime+0x508>
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	15 c0       	rjmp	.+42     	; 0x956 <strftime+0x484>
     92c:	d7 01       	movw	r26, r14
     92e:	18 96       	adiw	r26, 0x08	; 8
     930:	6d 91       	ld	r22, X+
     932:	7c 91       	ld	r23, X
     934:	19 97       	sbiw	r26, 0x09	; 9
     936:	16 96       	adiw	r26, 0x06	; 6
     938:	8d 91       	ld	r24, X+
     93a:	9c 91       	ld	r25, X
     93c:	17 97       	sbiw	r26, 0x07	; 7
     93e:	ae 01       	movw	r20, r28
     940:	45 5e       	subi	r20, 0xE5	; 229
     942:	5f 4f       	sbci	r21, 0xFF	; 255
     944:	84 59       	subi	r24, 0x94	; 148
     946:	98 4f       	sbci	r25, 0xF8	; 248
     948:	0e 94 25 07 	call	0xe4a	; 0xe4a <iso_week_date_r>
     94c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     94e:	8f 93       	push	r24
     950:	8d 8d       	ldd	r24, Y+29	; 0x1d
     952:	34 c0       	rjmp	.+104    	; 0x9bc <strftime+0x4ea>
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	c7 01       	movw	r24, r14
     958:	0e 94 91 05 	call	0xb22	; 0xb22 <week_of_year>
     95c:	1f 92       	push	r1
     95e:	2e c0       	rjmp	.+92     	; 0x9bc <strftime+0x4ea>
     960:	d7 01       	movw	r26, r14
     962:	16 96       	adiw	r26, 0x06	; 6
     964:	8d 91       	ld	r24, X+
     966:	9c 91       	ld	r25, X
     968:	17 97       	sbiw	r26, 0x07	; 7
     96a:	b1 01       	movw	r22, r2
     96c:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	f7 01       	movw	r30, r14
     976:	83 81       	ldd	r24, Z+3	; 0x03
     978:	28 2f       	mov	r18, r24
     97a:	08 2e       	mov	r0, r24
     97c:	00 0c       	add	r0, r0
     97e:	33 0b       	sbc	r19, r19
     980:	3f 93       	push	r19
     982:	8f 93       	push	r24
     984:	85 81       	ldd	r24, Z+5	; 0x05
     986:	08 2e       	mov	r0, r24
     988:	00 0c       	add	r0, r0
     98a:	99 0b       	sbc	r25, r25
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	9f 93       	push	r25
     990:	8f 93       	push	r24
     992:	25 ec       	ldi	r18, 0xC5	; 197
     994:	34 e4       	ldi	r19, 0x44	; 68
     996:	3f 93       	push	r19
     998:	2f 93       	push	r18
     99a:	df 92       	push	r13
     99c:	cf 92       	push	r12
     99e:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
     9a2:	61 c0       	rjmp	.+194    	; 0xa66 <strftime+0x594>
     9a4:	9f 93       	push	r25
     9a6:	8f 93       	push	r24
     9a8:	f8 cf       	rjmp	.-16     	; 0x99a <strftime+0x4c8>
     9aa:	d7 01       	movw	r26, r14
     9ac:	16 96       	adiw	r26, 0x06	; 6
     9ae:	8d 91       	ld	r24, X+
     9b0:	9c 91       	ld	r25, X
     9b2:	17 97       	sbiw	r26, 0x07	; 7
     9b4:	b1 01       	movw	r22, r2
     9b6:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	bf 92       	push	r11
     9c0:	af 92       	push	r10
     9c2:	0b c0       	rjmp	.+22     	; 0x9da <strftime+0x508>
     9c4:	f7 01       	movw	r30, r14
     9c6:	86 81       	ldd	r24, Z+6	; 0x06
     9c8:	97 81       	ldd	r25, Z+7	; 0x07
     9ca:	84 59       	subi	r24, 0x94	; 148
     9cc:	98 4f       	sbci	r25, 0xF8	; 248
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	26 eb       	ldi	r18, 0xB6	; 182
     9d4:	34 e4       	ldi	r19, 0x44	; 68
     9d6:	3f 93       	push	r19
     9d8:	2f 93       	push	r18
     9da:	df 92       	push	r13
     9dc:	cf 92       	push	r12
     9de:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	43 c0       	rjmp	.+134    	; 0xa76 <strftime+0x5a4>
     9f0:	60 91 3d 49 	lds	r22, 0x493D	; 0x80493d <__utc_offset>
     9f4:	70 91 3e 49 	lds	r23, 0x493E	; 0x80493e <__utc_offset+0x1>
     9f8:	80 91 3f 49 	lds	r24, 0x493F	; 0x80493f <__utc_offset+0x2>
     9fc:	90 91 40 49 	lds	r25, 0x4940	; 0x804940 <__utc_offset+0x3>
     a00:	2c e3       	ldi	r18, 0x3C	; 60
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	0e 94 c9 48 	call	0x9192	; 0x9192 <__divmodsi4>
     a0c:	89 01       	movw	r16, r18
     a0e:	9a 01       	movw	r18, r20
     a10:	f8 01       	movw	r30, r16
     a12:	d7 01       	movw	r26, r14
     a14:	1a 96       	adiw	r26, 0x0a	; 10
     a16:	8d 91       	ld	r24, X+
     a18:	9c 91       	ld	r25, X
     a1a:	1b 97       	sbiw	r26, 0x0b	; 11
     a1c:	6c e3       	ldi	r22, 0x3C	; 60
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     a24:	16 16       	cp	r1, r22
     a26:	17 06       	cpc	r1, r23
     a28:	1c f4       	brge	.+6      	; 0xa30 <strftime+0x55e>
     a2a:	fb 01       	movw	r30, r22
     a2c:	e0 0f       	add	r30, r16
     a2e:	f1 1f       	adc	r31, r17
     a30:	cf 01       	movw	r24, r30
     a32:	6c e3       	ldi	r22, 0x3C	; 60
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     a3a:	97 ff       	sbrs	r25, 7
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <strftime+0x572>
     a3e:	91 95       	neg	r25
     a40:	81 95       	neg	r24
     a42:	91 09       	sbc	r25, r1
     a44:	9f 93       	push	r25
     a46:	8f 93       	push	r24
     a48:	cf 01       	movw	r24, r30
     a4a:	6c e3       	ldi	r22, 0x3C	; 60
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     a52:	7f 93       	push	r23
     a54:	6f 93       	push	r22
     a56:	e3 e2       	ldi	r30, 0x23	; 35
     a58:	f5 e4       	ldi	r31, 0x45	; 69
     a5a:	ff 93       	push	r31
     a5c:	ef 93       	push	r30
     a5e:	df 92       	push	r13
     a60:	cf 92       	push	r12
     a62:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <strftime+0x5a4>
     a6c:	8f e3       	ldi	r24, 0x3F	; 63
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	1a 82       	std	Y+2, r1	; 0x02
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	93 01       	movw	r18, r6
     a78:	28 0f       	add	r18, r24
     a7a:	39 1f       	adc	r19, r25
     a7c:	a9 a1       	ldd	r26, Y+33	; 0x21
     a7e:	ba a1       	ldd	r27, Y+34	; 0x22
     a80:	2a 17       	cp	r18, r26
     a82:	3b 07       	cpc	r19, r27
     a84:	98 f4       	brcc	.+38     	; 0xaac <strftime+0x5da>
     a86:	d2 01       	movw	r26, r4
     a88:	f6 01       	movw	r30, r12
     a8a:	af 01       	movw	r20, r30
     a8c:	4c 19       	sub	r20, r12
     a8e:	5d 09       	sbc	r21, r13
     a90:	48 17       	cp	r20, r24
     a92:	59 07       	cpc	r21, r25
     a94:	1c f4       	brge	.+6      	; 0xa9c <strftime+0x5ca>
     a96:	41 91       	ld	r20, Z+
     a98:	4d 93       	st	X+, r20
     a9a:	f7 cf       	rjmp	.-18     	; 0xa8a <strftime+0x5b8>
     a9c:	97 ff       	sbrs	r25, 7
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <strftime+0x5d2>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	48 0e       	add	r4, r24
     aa6:	59 1e       	adc	r5, r25
     aa8:	39 01       	movw	r6, r18
     aaa:	3c cd       	rjmp	.-1416   	; 0x524 <strftime+0x52>
     aac:	f2 01       	movw	r30, r4
     aae:	10 82       	st	Z, r1
     ab0:	0e c0       	rjmp	.+28     	; 0xace <strftime+0x5fc>
     ab2:	d2 01       	movw	r26, r4
     ab4:	8d 93       	st	X+, r24
     ab6:	2d 01       	movw	r4, r26
     ab8:	bf ef       	ldi	r27, 0xFF	; 255
     aba:	6b 1a       	sub	r6, r27
     abc:	7b 0a       	sbc	r7, r27
     abe:	88 23       	and	r24, r24
     ac0:	31 f0       	breq	.+12     	; 0xace <strftime+0x5fc>
     ac2:	ef ef       	ldi	r30, 0xFF	; 255
     ac4:	8e 1a       	sub	r8, r30
     ac6:	9e 0a       	sbc	r9, r30
     ac8:	2d cd       	rjmp	.-1446   	; 0x524 <strftime+0x52>
     aca:	d2 01       	movw	r26, r4
     acc:	1c 92       	st	X, r1
     ace:	c3 01       	movw	r24, r6
     ad0:	a2 96       	adiw	r28, 0x22	; 34
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	9f 90       	pop	r9
     aec:	8f 90       	pop	r8
     aee:	7f 90       	pop	r7
     af0:	6f 90       	pop	r6
     af2:	5f 90       	pop	r5
     af4:	4f 90       	pop	r4
     af6:	3f 90       	pop	r3
     af8:	2f 90       	pop	r2
     afa:	08 95       	ret

00000afc <time>:
     afc:	fc 01       	movw	r30, r24
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	60 91 2d 49 	lds	r22, 0x492D	; 0x80492d <__system_time>
     b06:	70 91 2e 49 	lds	r23, 0x492E	; 0x80492e <__system_time+0x1>
     b0a:	80 91 2f 49 	lds	r24, 0x492F	; 0x80492f <__system_time+0x2>
     b0e:	90 91 30 49 	lds	r25, 0x4930	; 0x804930 <__system_time+0x3>
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	30 97       	sbiw	r30, 0x00	; 0
     b16:	21 f0       	breq	.+8      	; 0xb20 <time+0x24>
     b18:	60 83       	st	Z, r22
     b1a:	71 83       	std	Z+1, r23	; 0x01
     b1c:	82 83       	std	Z+2, r24	; 0x02
     b1e:	93 83       	std	Z+3, r25	; 0x03
     b20:	08 95       	ret

00000b22 <week_of_year>:
     b22:	fc 01       	movw	r30, r24
     b24:	20 85       	ldd	r18, Z+8	; 0x08
     b26:	31 85       	ldd	r19, Z+9	; 0x09
     b28:	c9 01       	movw	r24, r18
     b2a:	07 96       	adiw	r24, 0x07	; 7
     b2c:	44 81       	ldd	r20, Z+4	; 0x04
     b2e:	84 1b       	sub	r24, r20
     b30:	91 09       	sbc	r25, r1
     b32:	47 fd       	sbrc	r20, 7
     b34:	93 95       	inc	r25
     b36:	86 0f       	add	r24, r22
     b38:	91 1d       	adc	r25, r1
     b3a:	e7 e0       	ldi	r30, 0x07	; 7
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	bf 01       	movw	r22, r30
     b40:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     b44:	a9 01       	movw	r20, r18
     b46:	48 1b       	sub	r20, r24
     b48:	59 0b       	sbc	r21, r25
     b4a:	ca 01       	movw	r24, r20
     b4c:	57 fd       	sbrc	r21, 7
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <week_of_year+0x3a>
     b50:	bf 01       	movw	r22, r30
     b52:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	86 0f       	add	r24, r22
     b5a:	08 95       	ret
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 95       	ret

00000b60 <system_tick>:
     b60:	8f 93       	push	r24
     b62:	8f b7       	in	r24, 0x3f	; 63
     b64:	8f 93       	push	r24
     b66:	f8 94       	cli
     b68:	80 91 2d 49 	lds	r24, 0x492D	; 0x80492d <__system_time>
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	80 93 2d 49 	sts	0x492D, r24	; 0x80492d <__system_time>
     b72:	80 91 2e 49 	lds	r24, 0x492E	; 0x80492e <__system_time+0x1>
     b76:	8f 4f       	sbci	r24, 0xFF	; 255
     b78:	80 93 2e 49 	sts	0x492E, r24	; 0x80492e <__system_time+0x1>
     b7c:	80 91 2f 49 	lds	r24, 0x492F	; 0x80492f <__system_time+0x2>
     b80:	8f 4f       	sbci	r24, 0xFF	; 255
     b82:	80 93 2f 49 	sts	0x492F, r24	; 0x80492f <__system_time+0x2>
     b86:	80 91 30 49 	lds	r24, 0x4930	; 0x804930 <__system_time+0x3>
     b8a:	8f 4f       	sbci	r24, 0xFF	; 255
     b8c:	80 93 30 49 	sts	0x4930, r24	; 0x804930 <__system_time+0x3>
     b90:	8f 91       	pop	r24
     b92:	8f bf       	out	0x3f, r24	; 63
     b94:	8f 91       	pop	r24
     b96:	08 95       	ret

00000b98 <asctime_r>:
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	8c 01       	movw	r16, r24
     baa:	eb 01       	movw	r28, r22
     bac:	fc 01       	movw	r30, r24
     bae:	84 81       	ldd	r24, Z+4	; 0x04
     bb0:	b8 2f       	mov	r27, r24
     bb2:	bb 0f       	add	r27, r27
     bb4:	b8 0f       	add	r27, r24
     bb6:	85 81       	ldd	r24, Z+5	; 0x05
     bb8:	78 2f       	mov	r23, r24
     bba:	77 0f       	add	r23, r23
     bbc:	78 0f       	add	r23, r24
     bbe:	9e 01       	movw	r18, r28
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	8b 2f       	mov	r24, r27
     bc4:	84 0f       	add	r24, r20
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	83 54       	subi	r24, 0x43	; 67
     bcc:	9d 4f       	sbci	r25, 0xFD	; 253
     bce:	af 4f       	sbci	r26, 0xFF	; 255
     bd0:	fc 01       	movw	r30, r24
     bd2:	5a 2f       	mov	r21, r26
     bd4:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <__xload_1>
     bd8:	f9 01       	movw	r30, r18
     bda:	61 93       	st	Z+, r22
     bdc:	9f 01       	movw	r18, r30
     bde:	87 2f       	mov	r24, r23
     be0:	84 0f       	add	r24, r20
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	8d 52       	subi	r24, 0x2D	; 45
     be8:	9d 4f       	sbci	r25, 0xFD	; 253
     bea:	af 4f       	sbci	r26, 0xFF	; 255
     bec:	fc 01       	movw	r30, r24
     bee:	5a 2f       	mov	r21, r26
     bf0:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <__xload_1>
     bf4:	f9 01       	movw	r30, r18
     bf6:	63 83       	std	Z+3, r22	; 0x03
     bf8:	4f 5f       	subi	r20, 0xFF	; 255
     bfa:	43 30       	cpi	r20, 0x03	; 3
     bfc:	11 f7       	brne	.-60     	; 0xbc2 <asctime_r+0x2a>
     bfe:	80 e2       	ldi	r24, 0x20	; 32
     c00:	8f 83       	std	Y+7, r24	; 0x07
     c02:	8b 83       	std	Y+3, r24	; 0x03
     c04:	be 01       	movw	r22, r28
     c06:	68 5f       	subi	r22, 0xF8	; 248
     c08:	7f 4f       	sbci	r23, 0xFF	; 255
     c0a:	f8 01       	movw	r30, r16
     c0c:	83 81       	ldd	r24, Z+3	; 0x03
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	08 2e       	mov	r0, r24
     c12:	00 0c       	add	r0, r0
     c14:	99 0b       	sbc	r25, r25
     c16:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c1a:	be 01       	movw	r22, r28
     c1c:	65 5f       	subi	r22, 0xF5	; 245
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	f8 01       	movw	r30, r16
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	4a e3       	ldi	r20, 0x3A	; 58
     c26:	08 2e       	mov	r0, r24
     c28:	00 0c       	add	r0, r0
     c2a:	99 0b       	sbc	r25, r25
     c2c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c30:	be 01       	movw	r22, r28
     c32:	62 5f       	subi	r22, 0xF2	; 242
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	f8 01       	movw	r30, r16
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	4a e3       	ldi	r20, 0x3A	; 58
     c3c:	08 2e       	mov	r0, r24
     c3e:	00 0c       	add	r0, r0
     c40:	99 0b       	sbc	r25, r25
     c42:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c46:	be 01       	movw	r22, r28
     c48:	6f 5e       	subi	r22, 0xEF	; 239
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	f8 01       	movw	r30, r16
     c4e:	80 81       	ld	r24, Z
     c50:	40 e2       	ldi	r20, 0x20	; 32
     c52:	08 2e       	mov	r0, r24
     c54:	00 0c       	add	r0, r0
     c56:	99 0b       	sbc	r25, r25
     c58:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c5c:	f8 01       	movw	r30, r16
     c5e:	86 81       	ldd	r24, Z+6	; 0x06
     c60:	97 81       	ldd	r25, Z+7	; 0x07
     c62:	64 e6       	ldi	r22, 0x64	; 100
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	84 59       	subi	r24, 0x94	; 148
     c68:	98 4f       	sbci	r25, 0xF8	; 248
     c6a:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     c6e:	6b 01       	movw	r12, r22
     c70:	7c 01       	movw	r14, r24
     c72:	be 01       	movw	r22, r28
     c74:	6c 5e       	subi	r22, 0xEC	; 236
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	40 e2       	ldi	r20, 0x20	; 32
     c7a:	c6 01       	movw	r24, r12
     c7c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c80:	be 01       	movw	r22, r28
     c82:	6a 5e       	subi	r22, 0xEA	; 234
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	c7 01       	movw	r24, r14
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__print_lz>

00000c9e <gmtime_r>:
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	28 97       	sbiw	r28, 0x08	; 8
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	8b 01       	movw	r16, r22
     cba:	fc 01       	movw	r30, r24
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	20 e8       	ldi	r18, 0x80	; 128
     cc6:	31 e5       	ldi	r19, 0x51	; 81
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
     cd0:	69 01       	movw	r12, r18
     cd2:	7a 01       	movw	r14, r20
     cd4:	2c e3       	ldi	r18, 0x3C	; 60
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	0e 94 c9 48 	call	0x9192	; 0x9192 <__divmodsi4>
     ce0:	29 83       	std	Y+1, r18	; 0x01
     ce2:	3a 83       	std	Y+2, r19	; 0x02
     ce4:	4b 83       	std	Y+3, r20	; 0x03
     ce6:	5c 83       	std	Y+4, r21	; 0x04
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	ab 81       	ldd	r26, Y+3	; 0x03
     cee:	bc 81       	ldd	r27, Y+4	; 0x04
     cf0:	f8 01       	movw	r30, r16
     cf2:	60 83       	st	Z, r22
     cf4:	6c e3       	ldi	r22, 0x3C	; 60
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	f8 01       	movw	r30, r16
     d02:	a1 83       	std	Z+1, r26	; 0x01
     d04:	82 83       	std	Z+2, r24	; 0x02
     d06:	c6 01       	movw	r24, r12
     d08:	06 96       	adiw	r24, 0x06	; 6
     d0a:	67 e0       	ldi	r22, 0x07	; 7
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__udivmodhi4>
     d12:	84 83       	std	Z+4, r24	; 0x04
     d14:	2d ea       	ldi	r18, 0xAD	; 173
     d16:	3e e8       	ldi	r19, 0x8E	; 142
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	c7 01       	movw	r24, r14
     d1e:	b6 01       	movw	r22, r12
     d20:	0e 94 c9 48 	call	0x9192	; 0x9192 <__divmodsi4>
     d24:	29 83       	std	Y+1, r18	; 0x01
     d26:	3a 83       	std	Y+2, r19	; 0x02
     d28:	6d 83       	std	Y+5, r22	; 0x05
     d2a:	7e 83       	std	Y+6, r23	; 0x06
     d2c:	8f 83       	std	Y+7, r24	; 0x07
     d2e:	98 87       	std	Y+8, r25	; 0x08
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	24 e6       	ldi	r18, 0x64	; 100
     d36:	28 9f       	mul	r18, r24
     d38:	60 01       	movw	r12, r0
     d3a:	29 9f       	mul	r18, r25
     d3c:	d0 0c       	add	r13, r0
     d3e:	11 24       	eor	r1, r1
     d40:	6d 81       	ldd	r22, Y+5	; 0x05
     d42:	7e 81       	ldd	r23, Y+6	; 0x06
     d44:	8f 81       	ldd	r24, Y+7	; 0x07
     d46:	98 85       	ldd	r25, Y+8	; 0x08
     d48:	25 eb       	ldi	r18, 0xB5	; 181
     d4a:	35 e0       	ldi	r19, 0x05	; 5
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 c9 48 	call	0x9192	; 0x9192 <__divmodsi4>
     d54:	29 83       	std	Y+1, r18	; 0x01
     d56:	3a 83       	std	Y+2, r19	; 0x02
     d58:	6d 83       	std	Y+5, r22	; 0x05
     d5a:	7e 83       	std	Y+6, r23	; 0x06
     d5c:	e9 80       	ldd	r14, Y+1	; 0x01
     d5e:	fa 80       	ldd	r15, Y+2	; 0x02
     d60:	ee 0c       	add	r14, r14
     d62:	ff 1c       	adc	r15, r15
     d64:	ee 0c       	add	r14, r14
     d66:	ff 1c       	adc	r15, r15
     d68:	ec 0c       	add	r14, r12
     d6a:	fd 1c       	adc	r15, r13
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	f5 e6       	ldi	r31, 0x65	; 101
     d72:	ef 16       	cp	r14, r31
     d74:	f1 04       	cpc	r15, r1
     d76:	10 f0       	brcs	.+4      	; 0xd7c <gmtime_r+0xde>
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <gmtime_r+0xe6>
     d7c:	24 e6       	ldi	r18, 0x64	; 100
     d7e:	e2 16       	cp	r14, r18
     d80:	f1 04       	cpc	r15, r1
     d82:	19 f0       	breq	.+6      	; 0xd8a <gmtime_r+0xec>
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <gmtime_r+0xf0>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	a9 01       	movw	r20, r18
     d90:	44 59       	subi	r20, 0x94	; 148
     d92:	5e 4f       	sbci	r21, 0xFE	; 254
     d94:	48 17       	cp	r20, r24
     d96:	59 07       	cpc	r21, r25
     d98:	68 f4       	brcc	.+26     	; 0xdb4 <gmtime_r+0x116>
     d9a:	6d e6       	ldi	r22, 0x6D	; 109
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	82 1b       	sub	r24, r18
     da0:	93 0b       	sbc	r25, r19
     da2:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	cd 01       	movw	r24, r26
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	44 e6       	ldi	r20, 0x64	; 100
     db6:	e4 0e       	add	r14, r20
     db8:	f1 1c       	adc	r15, r1
     dba:	f8 01       	movw	r30, r16
     dbc:	e6 82       	std	Z+6, r14	; 0x06
     dbe:	f7 82       	std	Z+7, r15	; 0x07
     dc0:	80 87       	std	Z+8, r24	; 0x08
     dc2:	91 87       	std	Z+9, r25	; 0x09
     dc4:	25 5c       	subi	r18, 0xC5	; 197
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	82 17       	cp	r24, r18
     dca:	93 07       	cpc	r25, r19
     dcc:	48 f4       	brcc	.+18     	; 0xde0 <gmtime_r+0x142>
     dce:	6f e1       	ldi	r22, 0x1F	; 31
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	f8 01       	movw	r30, r16
     ddc:	85 83       	std	Z+5, r24	; 0x05
     dde:	22 c0       	rjmp	.+68     	; 0xe24 <gmtime_r+0x186>
     de0:	69 e9       	ldi	r22, 0x99	; 153
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	82 1b       	sub	r24, r18
     de6:	93 0b       	sbc	r25, r19
     de8:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	f8 2e       	mov	r15, r24
     df2:	ff 0c       	add	r15, r15
     df4:	ff 0c       	add	r15, r15
     df6:	f8 0e       	add	r15, r24
     df8:	6d e3       	ldi	r22, 0x3D	; 61
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	e8 2e       	mov	r14, r24
     e08:	ee 0c       	add	r14, r14
     e0a:	6f e1       	ldi	r22, 0x1F	; 31
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	22 e0       	ldi	r18, 0x02	; 2
     e1a:	28 0f       	add	r18, r24
     e1c:	f2 0e       	add	r15, r18
     e1e:	fe 0c       	add	r15, r14
     e20:	f8 01       	movw	r30, r16
     e22:	f5 82       	std	Z+5, r15	; 0x05
     e24:	a3 83       	std	Z+3, r26	; 0x03
     e26:	f8 01       	movw	r30, r16
     e28:	12 86       	std	Z+10, r1	; 0x0a
     e2a:	13 86       	std	Z+11, r1	; 0x0b
     e2c:	83 81       	ldd	r24, Z+3	; 0x03
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	83 83       	std	Z+3, r24	; 0x03
     e32:	28 96       	adiw	r28, 0x08	; 8
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	08 95       	ret

00000e4a <iso_week_date_r>:
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	8c 01       	movw	r16, r24
     e5c:	7b 01       	movw	r14, r22
     e5e:	ea 01       	movw	r28, r20
     e60:	88 83       	st	Y, r24
     e62:	99 83       	std	Y+1, r25	; 0x01
     e64:	0e 94 ac 01 	call	0x358	; 0x358 <is_leap_year>
     e68:	28 2f       	mov	r18, r24
     e6a:	a8 01       	movw	r20, r16
     e6c:	40 5d       	subi	r20, 0xD0	; 208
     e6e:	57 40       	sbci	r21, 0x07	; 7
     e70:	6d e6       	ldi	r22, 0x6D	; 109
     e72:	71 e0       	ldi	r23, 0x01	; 1
     e74:	46 9f       	mul	r20, r22
     e76:	c0 01       	movw	r24, r0
     e78:	47 9f       	mul	r20, r23
     e7a:	90 0d       	add	r25, r0
     e7c:	56 9f       	mul	r21, r22
     e7e:	90 0d       	add	r25, r0
     e80:	11 24       	eor	r1, r1
     e82:	8e 0d       	add	r24, r14
     e84:	9f 1d       	adc	r25, r15
     e86:	41 15       	cp	r20, r1
     e88:	51 05       	cpc	r21, r1
     e8a:	79 f0       	breq	.+30     	; 0xeaa <iso_week_date_r+0x60>
     e8c:	ba 01       	movw	r22, r20
     e8e:	76 95       	lsr	r23
     e90:	67 95       	ror	r22
     e92:	76 95       	lsr	r23
     e94:	67 95       	ror	r22
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	86 0f       	add	r24, r22
     e9c:	97 1f       	adc	r25, r23
     e9e:	82 1b       	sub	r24, r18
     ea0:	91 09       	sbc	r25, r1
     ea2:	45 36       	cpi	r20, 0x65	; 101
     ea4:	51 05       	cpc	r21, r1
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <iso_week_date_r+0x60>
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	06 96       	adiw	r24, 0x06	; 6
     eac:	67 e0       	ldi	r22, 0x07	; 7
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__udivmodhi4>
     eb4:	6c 01       	movw	r12, r24
     eb6:	89 2b       	or	r24, r25
     eb8:	19 f4       	brne	.+6      	; 0xec0 <iso_week_date_r+0x76>
     eba:	87 e0       	ldi	r24, 0x07	; 7
     ebc:	c8 2e       	mov	r12, r24
     ebe:	d1 2c       	mov	r13, r1
     ec0:	cc 82       	std	Y+4, r12	; 0x04
     ec2:	dd 82       	std	Y+5, r13	; 0x05
     ec4:	c7 01       	movw	r24, r14
     ec6:	0b 96       	adiw	r24, 0x0b	; 11
     ec8:	8c 19       	sub	r24, r12
     eca:	9d 09       	sbc	r25, r13
     ecc:	67 e0       	ldi	r22, 0x07	; 7
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     ed4:	65 33       	cpi	r22, 0x35	; 53
     ed6:	71 05       	cpc	r23, r1
     ed8:	b1 f4       	brne	.+44     	; 0xf06 <iso_week_date_r+0xbc>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	c8 1a       	sub	r12, r24
     ede:	d1 08       	sbc	r13, r1
     ee0:	ec 18       	sub	r14, r12
     ee2:	fd 08       	sbc	r15, r13
     ee4:	82 2f       	mov	r24, r18
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	84 59       	subi	r24, 0x94	; 148
     eea:	9e 4f       	sbci	r25, 0xFE	; 254
     eec:	23 e0       	ldi	r18, 0x03	; 3
     eee:	e2 0e       	add	r14, r18
     ef0:	f1 1c       	adc	r15, r1
     ef2:	8e 15       	cp	r24, r14
     ef4:	9f 05       	cpc	r25, r15
     ef6:	3c f4       	brge	.+14     	; 0xf06 <iso_week_date_r+0xbc>
     ef8:	88 81       	ld	r24, Y
     efa:	99 81       	ldd	r25, Y+1	; 0x01
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	88 83       	st	Y, r24
     f00:	99 83       	std	Y+1, r25	; 0x01
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	6a 83       	std	Y+2, r22	; 0x02
     f08:	7b 83       	std	Y+3, r23	; 0x03
     f0a:	67 2b       	or	r22, r23
     f0c:	79 f4       	brne	.+30     	; 0xf2c <iso_week_date_r+0xe2>
     f0e:	01 50       	subi	r16, 0x01	; 1
     f10:	11 09       	sbc	r17, r1
     f12:	c8 01       	movw	r24, r16
     f14:	0e 94 ac 01 	call	0x358	; 0x358 <is_leap_year>
     f18:	68 2f       	mov	r22, r24
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	64 59       	subi	r22, 0x94	; 148
     f1e:	7e 4f       	sbci	r23, 0xFE	; 254
     f20:	ae 01       	movw	r20, r28
     f22:	c8 01       	movw	r24, r16
     f24:	0e 94 25 07 	call	0xe4a	; 0xe4a <iso_week_date_r>
     f28:	cc 82       	std	Y+4, r12	; 0x04
     f2a:	dd 82       	std	Y+5, r13	; 0x05
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	08 95       	ret

00000f3e <__print_lz>:
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	eb 01       	movw	r28, r22
     f46:	14 2f       	mov	r17, r20
     f48:	6a e0       	ldi	r22, 0x0A	; 10
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
     f50:	60 5d       	subi	r22, 0xD0	; 208
     f52:	68 83       	st	Y, r22
     f54:	80 5d       	subi	r24, 0xD0	; 208
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	1a 83       	std	Y+2, r17	; 0x02
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	08 95       	ret

00000f62 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     f62:	0e 94 35 2a 	call	0x546a	; 0x546a <system_init>
     f66:	08 95       	ret

00000f68 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     f74:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     f78:	80 ff       	sbrs	r24, 0
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     f82:	8f 91       	pop	r24
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     f96:	80 91 83 45 	lds	r24, 0x4583	; 0x804583 <_ZZ9serial_RxhE4buff>
     f9a:	90 91 84 45 	lds	r25, 0x4584	; 0x804584 <_ZZ9serial_RxhE4buff+0x1>
     f9e:	89 2b       	or	r24, r25
     fa0:	31 f4       	brne	.+12     	; 0xfae <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
     fa2:	0e 94 0b 3a 	call	0x7416	; 0x7416 <nextEmptySBRxBuffer>
     fa6:	80 93 83 45 	sts	0x4583, r24	; 0x804583 <_ZZ9serial_RxhE4buff>
     faa:	90 93 84 45 	sts	0x4584, r25	; 0x804584 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
     fae:	c0 91 83 45 	lds	r28, 0x4583	; 0x804583 <_ZZ9serial_RxhE4buff>
     fb2:	d0 91 84 45 	lds	r29, 0x4584	; 0x804584 <_ZZ9serial_RxhE4buff+0x1>
     fb6:	20 97       	sbiw	r28, 0x00	; 0
     fb8:	09 f4       	brne	.+2      	; 0xfbc <_Z9serial_Rxh+0x2e>
     fba:	73 c1       	rjmp	.+742    	; 0x12a2 <_Z9serial_Rxh+0x314>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
     fbc:	81 2f       	mov	r24, r17
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 80 4a 	call	0x9500	; 0x9500 <toupper>
     fc4:	ac 01       	movw	r20, r24
     fc6:	28 2f       	mov	r18, r24

		if(ignoreCount)
     fc8:	90 91 82 45 	lds	r25, 0x4582	; 0x804582 <_ZZ9serial_RxhE11ignoreCount>
     fcc:	99 23       	and	r25, r25
     fce:	21 f0       	breq	.+8      	; 0xfd8 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
     fd0:	91 50       	subi	r25, 0x01	; 1
     fd2:	90 93 82 45 	sts	0x4582, r25	; 0x804582 <_ZZ9serial_RxhE11ignoreCount>
     fd6:	65 c1       	rjmp	.+714    	; 0x12a2 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
     fd8:	4b 31       	cpi	r20, 0x1B	; 27
     fda:	21 f4       	brne	.+8      	; 0xfe4 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	80 93 82 45 	sts	0x4582, r24	; 0x804582 <_ZZ9serial_RxhE11ignoreCount>
     fe2:	5f c1       	rjmp	.+702    	; 0x12a2 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     fe4:	4d 30       	cpi	r20, 0x0D	; 13
     fe6:	09 f0       	breq	.+2      	; 0xfea <_Z9serial_Rxh+0x5c>
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <_Z9serial_Rxh+0xda>
		{
			if(receiving_msg)
     fea:	80 91 4e 45 	lds	r24, 0x454E	; 0x80454e <_ZZ9serial_RxhE13receiving_msg>
     fee:	88 23       	and	r24, r24
     ff0:	31 f1       	breq	.+76     	; 0x103e <_Z9serial_Rxh+0xb0>
			{
				if(charIndex > 0)
     ff2:	e0 91 81 45 	lds	r30, 0x4581	; 0x804581 <_ZZ9serial_RxhE9charIndex>
     ff6:	ee 23       	and	r30, r30
     ff8:	f9 f0       	breq	.+62     	; 0x1038 <_Z9serial_Rxh+0xaa>
				{
					buff->type = SERIALBUS_MSG_QUERY;
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
     ffe:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <_ZZ9serial_RxhE6msg_ID>
    1002:	90 91 4d 45 	lds	r25, 0x454D	; 0x80454d <_ZZ9serial_RxhE6msg_ID+0x1>
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
    100a:	80 91 4b 45 	lds	r24, 0x454B	; 0x80454b <_ZZ9serial_RxhE11field_index>
    100e:	88 23       	and	r24, r24
    1010:	79 f0       	breq	.+30     	; 0x1030 <_Z9serial_Rxh+0xa2>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	40 91 4a 45 	lds	r20, 0x454A	; 0x80454a <_ZZ9serial_RxhE9field_len>
    101a:	54 e1       	ldi	r21, 0x14	; 20
    101c:	58 9f       	mul	r21, r24
    101e:	90 01       	movw	r18, r0
    1020:	59 9f       	mul	r21, r25
    1022:	30 0d       	add	r19, r0
    1024:	11 24       	eor	r1, r1
    1026:	c2 0f       	add	r28, r18
    1028:	d3 1f       	adc	r29, r19
    102a:	c4 0f       	add	r28, r20
    102c:	d1 1d       	adc	r29, r1
    102e:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	e1 5b       	subi	r30, 0xB1	; 177
    1034:	fa 4b       	sbci	r31, 0xBA	; 186
    1036:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
    1038:	0e 94 0a 3b 	call	0x7614	; 0x7614 <sb_send_NewLine>
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <_Z9serial_Rxh+0xb8>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	9f ef       	ldi	r25, 0xFF	; 255
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
    1046:	10 92 81 45 	sts	0x4581, r1	; 0x804581 <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
    104a:	10 92 4a 45 	sts	0x454A, r1	; 0x80454a <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
    104e:	10 92 4c 45 	sts	0x454C, r1	; 0x80454c <_ZZ9serial_RxhE6msg_ID>
    1052:	10 92 4d 45 	sts	0x454D, r1	; 0x80454d <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
    1056:	10 92 4b 45 	sts	0x454B, r1	; 0x80454b <_ZZ9serial_RxhE11field_index>
			buff = NULL;
    105a:	10 92 83 45 	sts	0x4583, r1	; 0x804583 <_ZZ9serial_RxhE4buff>
    105e:	10 92 84 45 	sts	0x4584, r1	; 0x804584 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = false;
    1062:	10 92 4e 45 	sts	0x454E, r1	; 0x80454e <_ZZ9serial_RxhE13receiving_msg>
    1066:	1d c1       	rjmp	.+570    	; 0x12a2 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char)
    1068:	44 23       	and	r20, r20
    106a:	09 f4       	brne	.+2      	; 0x106e <_Z9serial_Rxh+0xe0>
    106c:	1a c1       	rjmp	.+564    	; 0x12a2 <_Z9serial_Rxh+0x314>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    106e:	e0 91 81 45 	lds	r30, 0x4581	; 0x804581 <_ZZ9serial_RxhE9charIndex>
    1072:	8e 2f       	mov	r24, r30
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	dc 01       	movw	r26, r24
    1078:	a1 5b       	subi	r26, 0xB1	; 177
    107a:	ba 4b       	sbci	r27, 0xBA	; 186
    107c:	4c 93       	st	X, r20

			if(charIndex)
    107e:	ee 23       	and	r30, r30
    1080:	09 f4       	brne	.+2      	; 0x1084 <_Z9serial_Rxh+0xf6>
    1082:	d7 c0       	rjmp	.+430    	; 0x1232 <_Z9serial_Rxh+0x2a4>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
    1084:	4f 37       	cpi	r20, 0x7F	; 127
    1086:	09 f0       	breq	.+2      	; 0x108a <_Z9serial_Rxh+0xfc>
    1088:	5f c0       	rjmp	.+190    	; 0x1148 <_Z9serial_Rxh+0x1ba>
				{
					charIndex--;
    108a:	e1 50       	subi	r30, 0x01	; 1
    108c:	e0 93 81 45 	sts	0x4581, r30	; 0x804581 <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
    1090:	80 91 4b 45 	lds	r24, 0x454B	; 0x80454b <_ZZ9serial_RxhE11field_index>
    1094:	81 11       	cpse	r24, r1
    1096:	13 c0       	rjmp	.+38     	; 0x10be <_Z9serial_Rxh+0x130>
					{
						msg_ID -= textBuff[charIndex];
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	e1 5b       	subi	r30, 0xB1	; 177
    109c:	fa 4b       	sbci	r31, 0xBA	; 186
    109e:	30 81       	ld	r19, Z
    10a0:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <_ZZ9serial_RxhE6msg_ID>
    10a4:	90 91 4d 45 	lds	r25, 0x454D	; 0x80454d <_ZZ9serial_RxhE6msg_ID+0x1>
    10a8:	83 1b       	sub	r24, r19
    10aa:	91 09       	sbc	r25, r1
						msg_ID /= 10;
    10ac:	6a e0       	ldi	r22, 0x0A	; 10
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
    10b4:	60 93 4c 45 	sts	0x454C, r22	; 0x80454c <_ZZ9serial_RxhE6msg_ID>
    10b8:	70 93 4d 45 	sts	0x454D, r23	; 0x80454d <_ZZ9serial_RxhE6msg_ID+0x1>
    10bc:	39 c0       	rjmp	.+114    	; 0x1130 <_Z9serial_Rxh+0x1a2>
					}
					else if(field_len)
    10be:	90 91 4a 45 	lds	r25, 0x454A	; 0x80454a <_ZZ9serial_RxhE9field_len>
    10c2:	99 23       	and	r25, r25
    10c4:	91 f0       	breq	.+36     	; 0x10ea <_Z9serial_Rxh+0x15c>
					{
						field_len--;
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	39 0f       	add	r19, r25
    10ca:	30 93 4a 45 	sts	0x454A, r19	; 0x80454a <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	64 e1       	ldi	r22, 0x14	; 20
    10d4:	68 9f       	mul	r22, r24
    10d6:	a0 01       	movw	r20, r0
    10d8:	69 9f       	mul	r22, r25
    10da:	50 0d       	add	r21, r0
    10dc:	11 24       	eor	r1, r1
    10de:	c4 0f       	add	r28, r20
    10e0:	d5 1f       	adc	r29, r21
    10e2:	c3 0f       	add	r28, r19
    10e4:	d1 1d       	adc	r29, r1
    10e6:	1b 82       	std	Y+3, r1	; 0x03
    10e8:	23 c0       	rjmp	.+70     	; 0x1130 <_Z9serial_Rxh+0x1a2>
					}
					else if(textBuff[charIndex] == ' ')
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	e1 5b       	subi	r30, 0xB1	; 177
    10ee:	fa 4b       	sbci	r31, 0xBA	; 186
    10f0:	90 81       	ld	r25, Z
    10f2:	90 32       	cpi	r25, 0x20	; 32
    10f4:	a1 f4       	brne	.+40     	; 0x111e <_Z9serial_Rxh+0x190>
					{
						field_index--;
    10f6:	81 50       	subi	r24, 0x01	; 1
    10f8:	80 93 4b 45 	sts	0x454B, r24	; 0x80454b <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
    10fc:	34 e1       	ldi	r19, 0x14	; 20
    10fe:	83 9f       	mul	r24, r19
    1100:	c0 01       	movw	r24, r0
    1102:	11 24       	eor	r1, r1
    1104:	03 96       	adiw	r24, 0x03	; 3
    1106:	c8 0f       	add	r28, r24
    1108:	d9 1f       	adc	r29, r25
    110a:	fe 01       	movw	r30, r28
    110c:	01 90       	ld	r0, Z+
    110e:	00 20       	and	r0, r0
    1110:	e9 f7       	brne	.-6      	; 0x110c <_Z9serial_Rxh+0x17e>
    1112:	31 97       	sbiw	r30, 0x01	; 1
    1114:	ec 1b       	sub	r30, r28
    1116:	fd 0b       	sbc	r31, r29
    1118:	e0 93 4a 45 	sts	0x454A, r30	; 0x80454a <_ZZ9serial_RxhE9field_len>
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <_Z9serial_Rxh+0x1a2>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
    111e:	94 e1       	ldi	r25, 0x14	; 20
    1120:	89 9f       	mul	r24, r25
    1122:	c0 0d       	add	r28, r0
    1124:	d1 1d       	adc	r29, r1
    1126:	11 24       	eor	r1, r1
    1128:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
    112a:	81 50       	subi	r24, 0x01	; 1
    112c:	80 93 4b 45 	sts	0x454B, r24	; 0x80454b <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
    1130:	80 91 81 45 	lds	r24, 0x4581	; 0x804581 <_ZZ9serial_RxhE9charIndex>
    1134:	e8 2f       	mov	r30, r24
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	e1 5b       	subi	r30, 0xB1	; 177
    113a:	fa 4b       	sbci	r31, 0xBA	; 186
    113c:	10 82       	st	Z, r1

					if(charIndex == 0)
    113e:	81 11       	cpse	r24, r1
    1140:	ab c0       	rjmp	.+342    	; 0x1298 <_Z9serial_Rxh+0x30a>
					{
						receiving_msg = false;
    1142:	10 92 4e 45 	sts	0x454E, r1	; 0x80454e <_ZZ9serial_RxhE13receiving_msg>
    1146:	a8 c0       	rjmp	.+336    	; 0x1298 <_Z9serial_Rxh+0x30a>
					}
				}
				else
				{
					if(rx_char == ' ')
    1148:	40 32       	cpi	r20, 0x20	; 32
    114a:	81 f5       	brne	.+96     	; 0x11ac <_Z9serial_Rxh+0x21e>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
    114c:	fc 01       	movw	r30, r24
    114e:	e2 5b       	subi	r30, 0xB2	; 178
    1150:	fa 4b       	sbci	r31, 0xBA	; 186
    1152:	30 81       	ld	r19, Z
    1154:	30 32       	cpi	r19, 0x20	; 32
    1156:	09 f4       	brne	.+2      	; 0x115a <_Z9serial_Rxh+0x1cc>
    1158:	98 c0       	rjmp	.+304    	; 0x128a <_Z9serial_Rxh+0x2fc>
    115a:	30 91 4b 45 	lds	r19, 0x454B	; 0x80454b <_ZZ9serial_RxhE11field_index>
    115e:	43 2f       	mov	r20, r19
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	ba 01       	movw	r22, r20
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	63 30       	cpi	r22, 0x03	; 3
    116a:	71 05       	cpc	r23, r1
    116c:	0c f0       	brlt	.+2      	; 0x1170 <_Z9serial_Rxh+0x1e2>
    116e:	8f c0       	rjmp	.+286    	; 0x128e <_Z9serial_Rxh+0x300>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
    1170:	33 23       	and	r19, r19
    1172:	79 f0       	breq	.+30     	; 0x1192 <_Z9serial_Rxh+0x204>
							{
								buff->fields[field_index - 1][field_len] = '\0';
    1174:	41 50       	subi	r20, 0x01	; 1
    1176:	51 09       	sbc	r21, r1
    1178:	e0 91 4a 45 	lds	r30, 0x454A	; 0x80454a <_ZZ9serial_RxhE9field_len>
    117c:	f4 e1       	ldi	r31, 0x14	; 20
    117e:	f4 9f       	mul	r31, r20
    1180:	b0 01       	movw	r22, r0
    1182:	f5 9f       	mul	r31, r21
    1184:	70 0d       	add	r23, r0
    1186:	11 24       	eor	r1, r1
    1188:	c6 0f       	add	r28, r22
    118a:	d7 1f       	adc	r29, r23
    118c:	ce 0f       	add	r28, r30
    118e:	d1 1d       	adc	r29, r1
    1190:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
    1192:	3f 5f       	subi	r19, 0xFF	; 255
    1194:	30 93 4b 45 	sts	0x454B, r19	; 0x80454b <_ZZ9serial_RxhE11field_index>
							field_len = 0;
    1198:	10 92 4a 45 	sts	0x454A, r1	; 0x80454a <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	81 33       	cpi	r24, 0x31	; 49
    11a0:	91 05       	cpc	r25, r1
    11a2:	0c f0       	brlt	.+2      	; 0x11a6 <_Z9serial_Rxh+0x218>
    11a4:	81 e3       	ldi	r24, 0x31	; 49
    11a6:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <_ZZ9serial_RxhE9charIndex>
    11aa:	76 c0       	rjmp	.+236    	; 0x1298 <_Z9serial_Rxh+0x30a>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
    11ac:	80 91 4a 45 	lds	r24, 0x454A	; 0x80454a <_ZZ9serial_RxhE9field_len>
    11b0:	85 31       	cpi	r24, 0x15	; 21
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <_Z9serial_Rxh+0x228>
    11b4:	6e c0       	rjmp	.+220    	; 0x1292 <_Z9serial_Rxh+0x304>
					{
						if(field_index == 0)    /* message ID received */
    11b6:	60 91 4b 45 	lds	r22, 0x454B	; 0x80454b <_ZZ9serial_RxhE11field_index>
    11ba:	61 11       	cpse	r22, r1
    11bc:	19 c0       	rjmp	.+50     	; 0x11f0 <_Z9serial_Rxh+0x262>
						{
							msg_ID = msg_ID * 10 + rx_char;
    11be:	60 91 4c 45 	lds	r22, 0x454C	; 0x80454c <_ZZ9serial_RxhE6msg_ID>
    11c2:	70 91 4d 45 	lds	r23, 0x454D	; 0x80454d <_ZZ9serial_RxhE6msg_ID+0x1>
    11c6:	fb 01       	movw	r30, r22
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	6e 0f       	add	r22, r30
    11da:	7f 1f       	adc	r23, r31
    11dc:	64 0f       	add	r22, r20
    11de:	71 1d       	adc	r23, r1
    11e0:	60 93 4c 45 	sts	0x454C, r22	; 0x80454c <_ZZ9serial_RxhE6msg_ID>
    11e4:	70 93 4d 45 	sts	0x454D, r23	; 0x80454d <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	80 93 4a 45 	sts	0x454A, r24	; 0x80454a <_ZZ9serial_RxhE9field_len>
    11ee:	16 c0       	rjmp	.+44     	; 0x121c <_Z9serial_Rxh+0x28e>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	61 50       	subi	r22, 0x01	; 1
    11f4:	71 09       	sbc	r23, r1
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	98 0f       	add	r25, r24
    11fa:	90 93 4a 45 	sts	0x454A, r25	; 0x80454a <_ZZ9serial_RxhE9field_len>
    11fe:	34 e1       	ldi	r19, 0x14	; 20
    1200:	36 9f       	mul	r19, r22
    1202:	f0 01       	movw	r30, r0
    1204:	37 9f       	mul	r19, r23
    1206:	f0 0d       	add	r31, r0
    1208:	11 24       	eor	r1, r1
    120a:	ce 0f       	add	r28, r30
    120c:	df 1f       	adc	r29, r31
    120e:	fe 01       	movw	r30, r28
    1210:	e8 0f       	add	r30, r24
    1212:	f1 1d       	adc	r31, r1
    1214:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
    1216:	c9 0f       	add	r28, r25
    1218:	d1 1d       	adc	r29, r1
    121a:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    121c:	80 91 81 45 	lds	r24, 0x4581	; 0x804581 <_ZZ9serial_RxhE9charIndex>
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	81 33       	cpi	r24, 0x31	; 49
    1226:	91 05       	cpc	r25, r1
    1228:	0c f0       	brlt	.+2      	; 0x122c <_Z9serial_Rxh+0x29e>
    122a:	81 e3       	ldi	r24, 0x31	; 49
    122c:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <_ZZ9serial_RxhE9charIndex>
    1230:	33 c0       	rjmp	.+102    	; 0x1298 <_Z9serial_Rxh+0x30a>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
    1232:	4f 37       	cpi	r20, 0x7F	; 127
    1234:	69 f4       	brne	.+26     	; 0x1250 <_Z9serial_Rxh+0x2c2>
				{
					if(msg_ID <= 0)
    1236:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <_ZZ9serial_RxhE6msg_ID>
    123a:	90 91 4d 45 	lds	r25, 0x454D	; 0x80454d <_ZZ9serial_RxhE6msg_ID+0x1>
    123e:	18 16       	cp	r1, r24
    1240:	19 06       	cpc	r1, r25
    1242:	0c f0       	brlt	.+2      	; 0x1246 <_Z9serial_Rxh+0x2b8>
					{
						rx_char = '\0';
    1244:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
    1246:	10 92 4c 45 	sts	0x454C, r1	; 0x80454c <_ZZ9serial_RxhE6msg_ID>
    124a:	10 92 4d 45 	sts	0x454D, r1	; 0x80454d <_ZZ9serial_RxhE6msg_ID+0x1>
    124e:	24 c0       	rjmp	.+72     	; 0x1298 <_Z9serial_Rxh+0x30a>
				}
				else if(rx_char == ' ') /* Handle Space */
    1250:	40 32       	cpi	r20, 0x20	; 32
    1252:	09 f1       	breq	.+66     	; 0x1296 <_Z9serial_Rxh+0x308>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
    1254:	10 92 4b 45 	sts	0x454B, r1	; 0x80454b <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
    1258:	55 27       	eor	r21, r21
    125a:	40 93 4c 45 	sts	0x454C, r20	; 0x80454c <_ZZ9serial_RxhE6msg_ID>
    125e:	50 93 4d 45 	sts	0x454D, r21	; 0x80454d <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	50 f4       	brcc	.+20     	; 0x127c <_Z9serial_Rxh+0x2ee>
					{
						buff->fields[i][0] = '\0';
    1268:	de 01       	movw	r26, r28
    126a:	34 e1       	ldi	r19, 0x14	; 20
    126c:	83 9f       	mul	r24, r19
    126e:	a0 0d       	add	r26, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	11 24       	eor	r1, r1
    1274:	13 96       	adiw	r26, 0x03	; 3
    1276:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	f4 cf       	rjmp	.-24     	; 0x1264 <_Z9serial_Rxh+0x2d6>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = true;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 4e 45 	sts	0x454E, r24	; 0x80454e <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
    1282:	ef 5f       	subi	r30, 0xFF	; 255
    1284:	e0 93 81 45 	sts	0x4581, r30	; 0x804581 <_ZZ9serial_RxhE9charIndex>
    1288:	07 c0       	rjmp	.+14     	; 0x1298 <_Z9serial_Rxh+0x30a>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <_Z9serial_Rxh+0x30a>
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <_Z9serial_Rxh+0x30a>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <_Z9serial_Rxh+0x30a>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
    1296:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = true;
					charIndex++;
				}
			}

			if(rx_char)
    1298:	22 23       	and	r18, r18
    129a:	19 f0       	breq	.+6      	; 0x12a2 <_Z9serial_Rxh+0x314>
			{
				sb_echo_char(rx_char);
    129c:	82 2f       	mov	r24, r18
    129e:	0e 94 13 3b 	call	0x7626	; 0x7626 <sb_echo_char>
			}
		}
	}	
}
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	08 95       	ret

000012aa <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
    12d0:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    12d4:	81 11       	cpse	r24, r1
    12d6:	2b c0       	rjmp	.+86     	; 0x132e <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    12d8:	80 91 48 45 	lds	r24, 0x4548	; 0x804548 <_ZZ11__vector_20E4buff>
    12dc:	90 91 49 45 	lds	r25, 0x4549	; 0x804549 <_ZZ11__vector_20E4buff+0x1>
    12e0:	89 2b       	or	r24, r25
    12e2:	31 f4       	brne	.+12     	; 0x12f0 <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
    12e4:	0e 94 66 35 	call	0x6acc	; 0x6acc <_Z18nextFullLBTxBufferv>
    12e8:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <_ZZ11__vector_20E4buff>
    12ec:	90 93 49 45 	sts	0x4549, r25	; 0x804549 <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
    12f0:	e0 91 48 45 	lds	r30, 0x4548	; 0x804548 <_ZZ11__vector_20E4buff>
    12f4:	f0 91 49 45 	lds	r31, 0x4549	; 0x804549 <_ZZ11__vector_20E4buff+0x1>
    12f8:	80 91 47 45 	lds	r24, 0x4547	; 0x804547 <_ZZ11__vector_20E9charIndex>
    12fc:	df 01       	movw	r26, r30
    12fe:	a8 0f       	add	r26, r24
    1300:	b1 1d       	adc	r27, r1
    1302:	9c 91       	ld	r25, X
    1304:	99 23       	and	r25, r25
    1306:	31 f0       	breq	.+12     	; 0x1314 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	80 93 47 45 	sts	0x4547, r24	; 0x804547 <_ZZ11__vector_20E9charIndex>
    130e:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    1312:	0d c0       	rjmp	.+26     	; 0x132e <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
    1314:	10 92 47 45 	sts	0x4547, r1	; 0x804547 <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
    1318:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    131a:	0e 94 66 35 	call	0x6acc	; 0x6acc <_Z18nextFullLBTxBufferv>
    131e:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <_ZZ11__vector_20E4buff>
    1322:	90 93 49 45 	sts	0x4549, r25	; 0x804549 <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
    1326:	89 2b       	or	r24, r25
    1328:	11 f4       	brne	.+4      	; 0x132e <__vector_20+0x84>
			{
				linkbus_end_tx();
    132a:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
    132e:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    1332:	81 11       	cpse	r24, r1
    1334:	2b c0       	rjmp	.+86     	; 0x138c <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1336:	80 91 45 45 	lds	r24, 0x4545	; 0x804545 <_ZZ11__vector_20E4buff_0>
    133a:	90 91 46 45 	lds	r25, 0x4546	; 0x804546 <_ZZ11__vector_20E4buff_0+0x1>
    133e:	89 2b       	or	r24, r25
    1340:	31 f4       	brne	.+12     	; 0x134e <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
    1342:	0e 94 b3 39 	call	0x7366	; 0x7366 <nextFullSBTxBuffer>
    1346:	80 93 45 45 	sts	0x4545, r24	; 0x804545 <_ZZ11__vector_20E4buff_0>
    134a:	90 93 46 45 	sts	0x4546, r25	; 0x804546 <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    134e:	e0 91 45 45 	lds	r30, 0x4545	; 0x804545 <_ZZ11__vector_20E4buff_0>
    1352:	f0 91 46 45 	lds	r31, 0x4546	; 0x804546 <_ZZ11__vector_20E4buff_0+0x1>
    1356:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <_ZZ11__vector_20E9charIndex_0>
    135a:	df 01       	movw	r26, r30
    135c:	a8 0f       	add	r26, r24
    135e:	b1 1d       	adc	r27, r1
    1360:	9c 91       	ld	r25, X
    1362:	99 23       	and	r25, r25
    1364:	31 f0       	breq	.+12     	; 0x1372 <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 44 45 	sts	0x4544, r24	; 0x804544 <_ZZ11__vector_20E9charIndex_0>
    136c:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    1370:	0d c0       	rjmp	.+26     	; 0x138c <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
    1372:	10 92 44 45 	sts	0x4544, r1	; 0x804544 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
    1376:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    1378:	0e 94 b3 39 	call	0x7366	; 0x7366 <nextFullSBTxBuffer>
    137c:	80 93 45 45 	sts	0x4545, r24	; 0x804545 <_ZZ11__vector_20E4buff_0>
    1380:	90 93 46 45 	sts	0x4546, r25	; 0x804546 <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
    1384:	89 2b       	or	r24, r25
    1386:	11 f4       	brne	.+4      	; 0x138c <__vector_20+0xe2>
			{
				serialbus_end_tx();
    1388:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <serialbus_end_tx>
			}
		}
	}
}
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0b be       	out	0x3b, r0	; 59
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti

000013b2 <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	0b b6       	in	r0, 0x3b	; 59
    13be:	0f 92       	push	r0
    13c0:	2f 93       	push	r18
    13c2:	3f 93       	push	r19
    13c4:	4f 93       	push	r20
    13c6:	5f 93       	push	r21
    13c8:	6f 93       	push	r22
    13ca:	7f 93       	push	r23
    13cc:	8f 93       	push	r24
    13ce:	9f 93       	push	r25
    13d0:	af 93       	push	r26
    13d2:	bf 93       	push	r27
    13d4:	ef 93       	push	r30
    13d6:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
    13d8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	59 f5       	brne	.+86     	; 0x1436 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    13e0:	80 91 42 45 	lds	r24, 0x4542	; 0x804542 <_ZZ11__vector_56E4buff>
    13e4:	90 91 43 45 	lds	r25, 0x4543	; 0x804543 <_ZZ11__vector_56E4buff+0x1>
    13e8:	89 2b       	or	r24, r25
    13ea:	31 f4       	brne	.+12     	; 0x13f8 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
    13ec:	0e 94 66 35 	call	0x6acc	; 0x6acc <_Z18nextFullLBTxBufferv>
    13f0:	80 93 42 45 	sts	0x4542, r24	; 0x804542 <_ZZ11__vector_56E4buff>
    13f4:	90 93 43 45 	sts	0x4543, r25	; 0x804543 <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
    13f8:	e0 91 42 45 	lds	r30, 0x4542	; 0x804542 <_ZZ11__vector_56E4buff>
    13fc:	f0 91 43 45 	lds	r31, 0x4543	; 0x804543 <_ZZ11__vector_56E4buff+0x1>
    1400:	80 91 41 45 	lds	r24, 0x4541	; 0x804541 <_ZZ11__vector_56E9charIndex>
    1404:	df 01       	movw	r26, r30
    1406:	a8 0f       	add	r26, r24
    1408:	b1 1d       	adc	r27, r1
    140a:	9c 91       	ld	r25, X
    140c:	99 23       	and	r25, r25
    140e:	31 f0       	breq	.+12     	; 0x141c <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	80 93 41 45 	sts	0x4541, r24	; 0x804541 <_ZZ11__vector_56E9charIndex>
    1416:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    141a:	0d c0       	rjmp	.+26     	; 0x1436 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
    141c:	10 92 41 45 	sts	0x4541, r1	; 0x804541 <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
    1420:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    1422:	0e 94 66 35 	call	0x6acc	; 0x6acc <_Z18nextFullLBTxBufferv>
    1426:	80 93 42 45 	sts	0x4542, r24	; 0x804542 <_ZZ11__vector_56E4buff>
    142a:	90 93 43 45 	sts	0x4543, r25	; 0x804543 <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
    142e:	89 2b       	or	r24, r25
    1430:	11 f4       	brne	.+4      	; 0x1436 <__vector_56+0x84>
			{
				linkbus_end_tx();
    1432:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
    1436:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	59 f5       	brne	.+86     	; 0x1494 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    143e:	80 91 3f 45 	lds	r24, 0x453F	; 0x80453f <_ZZ11__vector_56E4buff_0>
    1442:	90 91 40 45 	lds	r25, 0x4540	; 0x804540 <_ZZ11__vector_56E4buff_0+0x1>
    1446:	89 2b       	or	r24, r25
    1448:	31 f4       	brne	.+12     	; 0x1456 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
    144a:	0e 94 b3 39 	call	0x7366	; 0x7366 <nextFullSBTxBuffer>
    144e:	80 93 3f 45 	sts	0x453F, r24	; 0x80453f <_ZZ11__vector_56E4buff_0>
    1452:	90 93 40 45 	sts	0x4540, r25	; 0x804540 <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    1456:	e0 91 3f 45 	lds	r30, 0x453F	; 0x80453f <_ZZ11__vector_56E4buff_0>
    145a:	f0 91 40 45 	lds	r31, 0x4540	; 0x804540 <_ZZ11__vector_56E4buff_0+0x1>
    145e:	80 91 3e 45 	lds	r24, 0x453E	; 0x80453e <_ZZ11__vector_56E9charIndex_0>
    1462:	df 01       	movw	r26, r30
    1464:	a8 0f       	add	r26, r24
    1466:	b1 1d       	adc	r27, r1
    1468:	9c 91       	ld	r25, X
    146a:	99 23       	and	r25, r25
    146c:	31 f0       	breq	.+12     	; 0x147a <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	80 93 3e 45 	sts	0x453E, r24	; 0x80453e <_ZZ11__vector_56E9charIndex_0>
    1474:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    1478:	0d c0       	rjmp	.+26     	; 0x1494 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
    147a:	10 92 3e 45 	sts	0x453E, r1	; 0x80453e <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
    147e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    1480:	0e 94 b3 39 	call	0x7366	; 0x7366 <nextFullSBTxBuffer>
    1484:	80 93 3f 45 	sts	0x453F, r24	; 0x80453f <_ZZ11__vector_56E4buff_0>
    1488:	90 93 40 45 	sts	0x4540, r25	; 0x804540 <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
    148c:	89 2b       	or	r24, r25
    148e:	11 f4       	brne	.+4      	; 0x1494 <__vector_56+0xe2>
			{
				serialbus_end_tx();
    1490:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <serialbus_end_tx>
			}
		}
	}
}
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0b be       	out	0x3b, r0	; 59
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f 90       	pop	r0
    14b6:	1f 90       	pop	r1
    14b8:	18 95       	reti

000014ba <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
    14c4:	80 91 3c 45 	lds	r24, 0x453C	; 0x80453c <_ZZ10linkbus_RxhE4buff>
    14c8:	90 91 3d 45 	lds	r25, 0x453D	; 0x80453d <_ZZ10linkbus_RxhE4buff+0x1>
    14cc:	89 2b       	or	r24, r25
    14ce:	31 f4       	brne	.+12     	; 0x14dc <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
    14d0:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_Z19nextEmptyLBRxBufferv>
    14d4:	80 93 3c 45 	sts	0x453C, r24	; 0x80453c <_ZZ10linkbus_RxhE4buff>
    14d8:	90 93 3d 45 	sts	0x453D, r25	; 0x80453d <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
    14dc:	c0 91 3c 45 	lds	r28, 0x453C	; 0x80453c <_ZZ10linkbus_RxhE4buff>
    14e0:	d0 91 3d 45 	lds	r29, 0x453D	; 0x80453d <_ZZ10linkbus_RxhE4buff+0x1>
    14e4:	20 97       	sbiw	r28, 0x00	; 0
    14e6:	09 f4       	brne	.+2      	; 0x14ea <_Z10linkbus_Rxh+0x30>
    14e8:	e3 c0       	rjmp	.+454    	; 0x16b0 <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
    14ea:	81 2f       	mov	r24, r17
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 80 4a 	call	0x9500	; 0x9500 <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    14f2:	84 32       	cpi	r24, 0x24	; 36
    14f4:	11 f0       	breq	.+4      	; 0x14fa <_Z10linkbus_Rxh+0x40>
    14f6:	81 32       	cpi	r24, 0x21	; 33
    14f8:	49 f5       	brne	.+82     	; 0x154c <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
    14fa:	10 92 3b 45 	sts	0x453B, r1	; 0x80453b <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    14fe:	81 32       	cpi	r24, 0x21	; 33
    1500:	11 f4       	brne	.+4      	; 0x1506 <_Z10linkbus_Rxh+0x4c>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <_Z10linkbus_Rxh+0x4e>
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	88 83       	st	Y, r24
			field_len = 0;
    150a:	10 92 3a 45 	sts	0x453A, r1	; 0x80453a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    150e:	10 92 36 45 	sts	0x4536, r1	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1512:	10 92 37 45 	sts	0x4537, r1	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1516:	10 92 38 45 	sts	0x4538, r1	; 0x804538 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    151a:	10 92 39 45 	sts	0x4539, r1	; 0x804539 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = true;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 35 45 	sts	0x4535, r24	; 0x804535 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1524:	10 92 34 45 	sts	0x4534, r1	; 0x804534 <_ZZ10linkbus_RxhE11field_index>
    1528:	80 91 34 45 	lds	r24, 0x4534	; 0x804534 <_ZZ10linkbus_RxhE11field_index>
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	58 f4       	brcc	.+22     	; 0x1546 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
    1530:	fe 01       	movw	r30, r28
    1532:	05 e1       	ldi	r16, 0x15	; 21
    1534:	80 9f       	mul	r24, r16
    1536:	e0 0d       	add	r30, r0
    1538:	f1 1d       	adc	r31, r1
    153a:	11 24       	eor	r1, r1
    153c:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = true;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	80 93 34 45 	sts	0x4534, r24	; 0x804534 <_ZZ10linkbus_RxhE11field_index>
    1544:	f1 cf       	rjmp	.-30     	; 0x1528 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
    1546:	10 92 34 45 	sts	0x4534, r1	; 0x804534 <_ZZ10linkbus_RxhE11field_index>
    154a:	a7 c0       	rjmp	.+334    	; 0x169a <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
    154c:	90 91 35 45 	lds	r25, 0x4535	; 0x804535 <_ZZ10linkbus_RxhE13receiving_msg>
    1550:	99 23       	and	r25, r25
    1552:	09 f4       	brne	.+2      	; 0x1556 <_Z10linkbus_Rxh+0x9c>
    1554:	8b c0       	rjmp	.+278    	; 0x166c <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    1556:	8c 32       	cpi	r24, 0x2C	; 44
    1558:	29 f0       	breq	.+10     	; 0x1564 <_Z10linkbus_Rxh+0xaa>
    155a:	8b 33       	cpi	r24, 0x3B	; 59
    155c:	19 f0       	breq	.+6      	; 0x1564 <_Z10linkbus_Rxh+0xaa>
    155e:	8f 33       	cpi	r24, 0x3F	; 63
    1560:	09 f0       	breq	.+2      	; 0x1564 <_Z10linkbus_Rxh+0xaa>
    1562:	42 c0       	rjmp	.+132    	; 0x15e8 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    1564:	90 91 34 45 	lds	r25, 0x4534	; 0x804534 <_ZZ10linkbus_RxhE11field_index>
    1568:	99 23       	and	r25, r25
    156a:	89 f0       	breq	.+34     	; 0x158e <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
    156c:	29 2f       	mov	r18, r25
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	21 50       	subi	r18, 0x01	; 1
    1572:	31 09       	sbc	r19, r1
    1574:	40 91 3a 45 	lds	r20, 0x453A	; 0x80453a <_ZZ10linkbus_RxhE9field_len>
    1578:	55 e1       	ldi	r21, 0x15	; 21
    157a:	52 9f       	mul	r21, r18
    157c:	f0 01       	movw	r30, r0
    157e:	53 9f       	mul	r21, r19
    1580:	f0 0d       	add	r31, r0
    1582:	11 24       	eor	r1, r1
    1584:	ec 0f       	add	r30, r28
    1586:	fd 1f       	adc	r31, r29
    1588:	e4 0f       	add	r30, r20
    158a:	f1 1d       	adc	r31, r1
    158c:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
    158e:	9f 5f       	subi	r25, 0xFF	; 255
    1590:	90 93 34 45 	sts	0x4534, r25	; 0x804534 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
    1594:	10 92 3a 45 	sts	0x453A, r1	; 0x80453a <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
    1598:	8b 33       	cpi	r24, 0x3B	; 59
    159a:	69 f4       	brne	.+26     	; 0x15b6 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    159c:	80 91 3b 45 	lds	r24, 0x453B	; 0x80453b <_ZZ10linkbus_RxhE9charIndex>
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	30 f0       	brcs	.+12     	; 0x15b0 <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    15a4:	80 91 36 45 	lds	r24, 0x4536	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID>
    15a8:	90 91 37 45 	lds	r25, 0x4537	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    15b0:	10 92 35 45 	sts	0x4535, r1	; 0x804535 <_ZZ10linkbus_RxhE13receiving_msg>
    15b4:	10 c0       	rjmp	.+32     	; 0x15d6 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
    15b6:	8f 33       	cpi	r24, 0x3F	; 63
    15b8:	71 f4       	brne	.+28     	; 0x15d6 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
    15be:	80 91 3b 45 	lds	r24, 0x453B	; 0x80453b <_ZZ10linkbus_RxhE9charIndex>
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	30 f0       	brcs	.+12     	; 0x15d2 <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    15c6:	80 91 36 45 	lds	r24, 0x4536	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID>
    15ca:	90 91 37 45 	lds	r25, 0x4537	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    15d2:	10 92 35 45 	sts	0x4535, r1	; 0x804535 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
    15d6:	80 91 35 45 	lds	r24, 0x4535	; 0x804535 <_ZZ10linkbus_RxhE13receiving_msg>
    15da:	81 11       	cpse	r24, r1
    15dc:	5e c0       	rjmp	.+188    	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
    15de:	10 92 3c 45 	sts	0x453C, r1	; 0x80453c <_ZZ10linkbus_RxhE4buff>
    15e2:	10 92 3d 45 	sts	0x453D, r1	; 0x80453d <_ZZ10linkbus_RxhE4buff+0x1>
    15e6:	59 c0       	rjmp	.+178    	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
    15e8:	20 91 34 45 	lds	r18, 0x4534	; 0x804534 <_ZZ10linkbus_RxhE11field_index>
    15ec:	21 11       	cpse	r18, r1
    15ee:	29 c0       	rjmp	.+82     	; 0x1642 <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
    15f0:	40 91 36 45 	lds	r20, 0x4536	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID>
    15f4:	50 91 37 45 	lds	r21, 0x4537	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15f8:	60 91 38 45 	lds	r22, 0x4538	; 0x804538 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    15fc:	70 91 39 45 	lds	r23, 0x4539	; 0x804539 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    1600:	44 0f       	add	r20, r20
    1602:	55 1f       	adc	r21, r21
    1604:	66 1f       	adc	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	8a 01       	movw	r16, r20
    160a:	9b 01       	movw	r18, r22
    160c:	00 0f       	add	r16, r16
    160e:	11 1f       	adc	r17, r17
    1610:	22 1f       	adc	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	00 0f       	add	r16, r16
    1616:	11 1f       	adc	r17, r17
    1618:	22 1f       	adc	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	40 0f       	add	r20, r16
    161e:	51 1f       	adc	r21, r17
    1620:	62 1f       	adc	r22, r18
    1622:	73 1f       	adc	r23, r19
    1624:	8a 01       	movw	r16, r20
    1626:	9b 01       	movw	r18, r22
    1628:	08 0f       	add	r16, r24
    162a:	11 1d       	adc	r17, r1
    162c:	21 1d       	adc	r18, r1
    162e:	31 1d       	adc	r19, r1
    1630:	00 93 36 45 	sts	0x4536, r16	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1634:	10 93 37 45 	sts	0x4537, r17	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1638:	20 93 38 45 	sts	0x4538, r18	; 0x804538 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    163c:	30 93 39 45 	sts	0x4539, r19	; 0x804539 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    1640:	2c c0       	rjmp	.+88     	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	21 50       	subi	r18, 0x01	; 1
    1646:	31 09       	sbc	r19, r1
    1648:	90 91 3a 45 	lds	r25, 0x453A	; 0x80453a <_ZZ10linkbus_RxhE9field_len>
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	49 0f       	add	r20, r25
    1650:	40 93 3a 45 	sts	0x453A, r20	; 0x80453a <_ZZ10linkbus_RxhE9field_len>
    1654:	65 e1       	ldi	r22, 0x15	; 21
    1656:	62 9f       	mul	r22, r18
    1658:	a0 01       	movw	r20, r0
    165a:	63 9f       	mul	r22, r19
    165c:	50 0d       	add	r21, r0
    165e:	11 24       	eor	r1, r1
    1660:	c4 0f       	add	r28, r20
    1662:	d5 1f       	adc	r29, r21
    1664:	c9 0f       	add	r28, r25
    1666:	d1 1d       	adc	r29, r1
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	17 c0       	rjmp	.+46     	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
    166c:	8d 30       	cpi	r24, 0x0D	; 13
    166e:	a9 f4       	brne	.+42     	; 0x169a <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
    1670:	19 82       	std	Y+1, r1	; 0x01
    1672:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
    1674:	82 e3       	ldi	r24, 0x32	; 50
    1676:	80 93 3b 45 	sts	0x453B, r24	; 0x80453b <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
    167a:	10 92 3a 45 	sts	0x453A, r1	; 0x80453a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    167e:	10 92 36 45 	sts	0x4536, r1	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1682:	10 92 37 45 	sts	0x4537, r1	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1686:	10 92 38 45 	sts	0x4538, r1	; 0x804538 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    168a:	10 92 39 45 	sts	0x4539, r1	; 0x804539 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
    168e:	10 92 34 45 	sts	0x4534, r1	; 0x804534 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
    1692:	10 92 3c 45 	sts	0x453C, r1	; 0x80453c <_ZZ10linkbus_RxhE4buff>
    1696:	10 92 3d 45 	sts	0x453D, r1	; 0x80453d <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    169a:	80 91 3b 45 	lds	r24, 0x453B	; 0x80453b <_ZZ10linkbus_RxhE9charIndex>
    169e:	8f 5f       	subi	r24, 0xFF	; 255
    16a0:	80 93 3b 45 	sts	0x453B, r24	; 0x80453b <_ZZ10linkbus_RxhE9charIndex>
    16a4:	82 33       	cpi	r24, 0x32	; 50
    16a6:	20 f0       	brcs	.+8      	; 0x16b0 <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = false;
    16a8:	10 92 35 45 	sts	0x4535, r1	; 0x804535 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
    16ac:	10 92 3b 45 	sts	0x453B, r1	; 0x80453b <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	0b b6       	in	r0, 0x3b	; 59
    16c6:	0f 92       	push	r0
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	cf 93       	push	r28
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
    16e2:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <USART0_get_data>
    16e6:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
    16e8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    16ec:	81 11       	cpse	r24, r1
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
    16f0:	8c 2f       	mov	r24, r28
    16f2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
    16f6:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    16fa:	81 11       	cpse	r24, r1
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
    16fe:	8c 2f       	mov	r24, r28
    1700:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z9serial_Rxh>
	}
}
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	cf 91       	pop	r28
    170a:	bf 91       	pop	r27
    170c:	af 91       	pop	r26
    170e:	9f 91       	pop	r25
    1710:	8f 91       	pop	r24
    1712:	7f 91       	pop	r23
    1714:	6f 91       	pop	r22
    1716:	5f 91       	pop	r21
    1718:	4f 91       	pop	r20
    171a:	3f 91       	pop	r19
    171c:	2f 91       	pop	r18
    171e:	0f 90       	pop	r0
    1720:	0b be       	out	0x3b, r0	; 59
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	0f 90       	pop	r0
    1728:	1f 90       	pop	r1
    172a:	18 95       	reti

0000172c <__vector_55>:

ISR(USART4_RXC_vect)
{
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	0f 92       	push	r0
    1734:	11 24       	eor	r1, r1
    1736:	0b b6       	in	r0, 0x3b	; 59
    1738:	0f 92       	push	r0
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	cf 93       	push	r28
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
    1754:	0e 94 10 46 	call	0x8c20	; 0x8c20 <USART4_get_data>
    1758:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
    175a:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	19 f4       	brne	.+6      	; 0x1768 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
    1762:	8c 2f       	mov	r24, r28
    1764:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
    1768:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    176c:	84 30       	cpi	r24, 0x04	; 4
    176e:	19 f4       	brne	.+6      	; 0x1776 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
    1770:	8c 2f       	mov	r24, r28
    1772:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z9serial_Rxh>
	}
}
    1776:	ff 91       	pop	r31
    1778:	ef 91       	pop	r30
    177a:	cf 91       	pop	r28
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	0f 90       	pop	r0
    1792:	0b be       	out	0x3b, r0	; 59
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	0b b6       	in	r0, 0x3b	; 59
    17aa:	0f 92       	push	r0
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	cf 93       	push	r28
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
    17c6:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <USART1_get_data>
    17ca:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
    17cc:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	19 f4       	brne	.+6      	; 0x17da <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
    17d4:	8c 2f       	mov	r24, r28
    17d6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
    17da:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	19 f4       	brne	.+6      	; 0x17e8 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
    17e2:	8c 2f       	mov	r24, r28
    17e4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z9serial_Rxh>
	}
}
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	cf 91       	pop	r28
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0b be       	out	0x3b, r0	; 59
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	0b b6       	in	r0, 0x3b	; 59
    181c:	0f 92       	push	r0
    181e:	2f 93       	push	r18
    1820:	3f 93       	push	r19
    1822:	4f 93       	push	r20
    1824:	5f 93       	push	r21
    1826:	6f 93       	push	r22
    1828:	7f 93       	push	r23
    182a:	8f 93       	push	r24
    182c:	9f 93       	push	r25
    182e:	af 93       	push	r26
    1830:	bf 93       	push	r27
    1832:	ef 93       	push	r30
    1834:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
    1836:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	59 f5       	brne	.+86     	; 0x1894 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    183e:	80 91 32 45 	lds	r24, 0x4532	; 0x804532 <_ZZ11__vector_32E4buff>
    1842:	90 91 33 45 	lds	r25, 0x4533	; 0x804533 <_ZZ11__vector_32E4buff+0x1>
    1846:	89 2b       	or	r24, r25
    1848:	31 f4       	brne	.+12     	; 0x1856 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
    184a:	0e 94 b3 39 	call	0x7366	; 0x7366 <nextFullSBTxBuffer>
    184e:	80 93 32 45 	sts	0x4532, r24	; 0x804532 <_ZZ11__vector_32E4buff>
    1852:	90 93 33 45 	sts	0x4533, r25	; 0x804533 <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
    1856:	e0 91 32 45 	lds	r30, 0x4532	; 0x804532 <_ZZ11__vector_32E4buff>
    185a:	f0 91 33 45 	lds	r31, 0x4533	; 0x804533 <_ZZ11__vector_32E4buff+0x1>
    185e:	80 91 31 45 	lds	r24, 0x4531	; 0x804531 <_ZZ11__vector_32E9charIndex>
    1862:	df 01       	movw	r26, r30
    1864:	a8 0f       	add	r26, r24
    1866:	b1 1d       	adc	r27, r1
    1868:	9c 91       	ld	r25, X
    186a:	99 23       	and	r25, r25
    186c:	31 f0       	breq	.+12     	; 0x187a <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    186e:	8f 5f       	subi	r24, 0xFF	; 255
    1870:	80 93 31 45 	sts	0x4531, r24	; 0x804531 <_ZZ11__vector_32E9charIndex>
    1874:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
    187a:	10 92 31 45 	sts	0x4531, r1	; 0x804531 <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
    187e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    1880:	0e 94 b3 39 	call	0x7366	; 0x7366 <nextFullSBTxBuffer>
    1884:	80 93 32 45 	sts	0x4532, r24	; 0x804532 <_ZZ11__vector_32E4buff>
    1888:	90 93 33 45 	sts	0x4533, r25	; 0x804533 <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
    188c:	89 2b       	or	r24, r25
    188e:	11 f4       	brne	.+4      	; 0x1894 <__vector_32+0x84>
			{
				serialbus_end_tx();
    1890:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
    1894:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	59 f5       	brne	.+86     	; 0x18f2 <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    189c:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <_ZZ11__vector_32E4buff_0>
    18a0:	90 91 30 45 	lds	r25, 0x4530	; 0x804530 <_ZZ11__vector_32E4buff_0+0x1>
    18a4:	89 2b       	or	r24, r25
    18a6:	31 f4       	brne	.+12     	; 0x18b4 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
    18a8:	0e 94 66 35 	call	0x6acc	; 0x6acc <_Z18nextFullLBTxBufferv>
    18ac:	80 93 2f 45 	sts	0x452F, r24	; 0x80452f <_ZZ11__vector_32E4buff_0>
    18b0:	90 93 30 45 	sts	0x4530, r25	; 0x804530 <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    18b4:	e0 91 2f 45 	lds	r30, 0x452F	; 0x80452f <_ZZ11__vector_32E4buff_0>
    18b8:	f0 91 30 45 	lds	r31, 0x4530	; 0x804530 <_ZZ11__vector_32E4buff_0+0x1>
    18bc:	80 91 2e 45 	lds	r24, 0x452E	; 0x80452e <__data_end>
    18c0:	df 01       	movw	r26, r30
    18c2:	a8 0f       	add	r26, r24
    18c4:	b1 1d       	adc	r27, r1
    18c6:	9c 91       	ld	r25, X
    18c8:	99 23       	and	r25, r25
    18ca:	31 f0       	breq	.+12     	; 0x18d8 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	80 93 2e 45 	sts	0x452E, r24	; 0x80452e <__data_end>
    18d2:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    18d6:	0d c0       	rjmp	.+26     	; 0x18f2 <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
    18d8:	10 92 2e 45 	sts	0x452E, r1	; 0x80452e <__data_end>
			(*buff)[0] = '\0';
    18dc:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    18de:	0e 94 66 35 	call	0x6acc	; 0x6acc <_Z18nextFullLBTxBufferv>
    18e2:	80 93 2f 45 	sts	0x452F, r24	; 0x80452f <_ZZ11__vector_32E4buff_0>
    18e6:	90 93 30 45 	sts	0x4530, r25	; 0x804530 <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
    18ea:	89 2b       	or	r24, r25
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <__vector_32+0xe2>
			{
				linkbus_end_tx();
    18ee:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <_Z14linkbus_end_txv>
			}
		}
	}
}
    18f2:	ff 91       	pop	r31
    18f4:	ef 91       	pop	r30
    18f6:	bf 91       	pop	r27
    18f8:	af 91       	pop	r26
    18fa:	9f 91       	pop	r25
    18fc:	8f 91       	pop	r24
    18fe:	7f 91       	pop	r23
    1900:	6f 91       	pop	r22
    1902:	5f 91       	pop	r21
    1904:	4f 91       	pop	r20
    1906:	3f 91       	pop	r19
    1908:	2f 91       	pop	r18
    190a:	0f 90       	pop	r0
    190c:	0b be       	out	0x3b, r0	; 59
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_41>:
{
	
}

void suspendEvent()
{
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	0b b6       	in	r0, 0x3b	; 59
    1924:	0f 92       	push	r0
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	2f 93       	push	r18
    192c:	3f 93       	push	r19
    192e:	4f 93       	push	r20
    1930:	5f 93       	push	r21
    1932:	6f 93       	push	r22
    1934:	7f 93       	push	r23
    1936:	8f 93       	push	r24
    1938:	9f 93       	push	r25
    193a:	af 93       	push	r26
    193c:	bf 93       	push	r27
    193e:	ef 93       	push	r30
    1940:	ff 93       	push	r31
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	25 97       	sbiw	r28, 0x05	; 5
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    1954:	80 ff       	sbrs	r24, 0
    1956:	98 c3       	rjmp	.+1840   	; 0x2088 <__vector_41+0x770>
    1958:	80 91 27 46 	lds	r24, 0x4627	; 0x804627 <_ZZ11__vector_41E3cnt>
    195c:	90 91 28 46 	lds	r25, 0x4628	; 0x804628 <_ZZ11__vector_41E3cnt+0x1>
    1960:	9c 01       	movw	r18, r24
    1962:	2f 5f       	subi	r18, 0xFF	; 255
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	20 93 27 46 	sts	0x4627, r18	; 0x804627 <_ZZ11__vector_41E3cnt>
    196a:	30 93 28 46 	sts	0x4628, r19	; 0x804628 <_ZZ11__vector_41E3cnt+0x1>
    196e:	8b 32       	cpi	r24, 0x2B	; 43
    1970:	91 40       	sbci	r25, 0x01	; 1
    1972:	09 f0       	breq	.+2      	; 0x1976 <__vector_41+0x5e>
    1974:	86 c3       	rjmp	.+1804   	; 0x2082 <__vector_41+0x76a>
    1976:	10 92 27 46 	sts	0x4627, r1	; 0x804627 <_ZZ11__vector_41E3cnt>
    197a:	10 92 28 46 	sts	0x4628, r1	; 0x804628 <_ZZ11__vector_41E3cnt+0x1>
    197e:	80 91 fc 45 	lds	r24, 0x45FC	; 0x8045fc <g_event_enabled>
    1982:	81 11       	cpse	r24, r1
    1984:	03 c0       	rjmp	.+6      	; 0x198c <__vector_41+0x74>
    1986:	8a b1       	in	r24, 0x0a	; 10
    1988:	80 64       	ori	r24, 0x40	; 64
    198a:	8a b9       	out	0x0a, r24	; 10
    198c:	0e 94 ba 21 	call	0x4374	; 0x4374 <_Z18antennaIsConnectedv>
    1990:	81 11       	cpse	r24, r1
    1992:	0a c0       	rjmp	.+20     	; 0x19a8 <__vector_41+0x90>
    1994:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <g_antenna_connect_state>
    1998:	91 30       	cpi	r25, 0x01	; 1
    199a:	19 f1       	breq	.+70     	; 0x19e2 <__vector_41+0xca>
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <g_antenna_connect_state>
    19a2:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    19a6:	1d c0       	rjmp	.+58     	; 0x19e2 <__vector_41+0xca>
    19a8:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <g_antenna_connect_state>
    19ac:	91 30       	cpi	r25, 0x01	; 1
    19ae:	c9 f4       	brne	.+50     	; 0x19e2 <__vector_41+0xca>
    19b0:	90 91 29 46 	lds	r25, 0x4629	; 0x804629 <_ZZ11__vector_41E26lastAntennaConnectionState>
    19b4:	89 13       	cpse	r24, r25
    19b6:	12 c0       	rjmp	.+36     	; 0x19dc <__vector_41+0xc4>
    19b8:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19bc:	99 23       	and	r25, r25
    19be:	89 f0       	breq	.+34     	; 0x19e2 <__vector_41+0xca>
    19c0:	91 50       	subi	r25, 0x01	; 1
    19c2:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19c6:	91 11       	cpse	r25, r1
    19c8:	0c c0       	rjmp	.+24     	; 0x19e2 <__vector_41+0xca>
    19ca:	10 92 bb 45 	sts	0x45BB, r1	; 0x8045bb <g_antenna_connect_state>
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    19d4:	93 e0       	ldi	r25, 0x03	; 3
    19d6:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <__vector_41+0xca>
    19dc:	93 e0       	ldi	r25, 0x03	; 3
    19de:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19e2:	80 93 29 46 	sts	0x4629, r24	; 0x804629 <_ZZ11__vector_41E26lastAntennaConnectionState>
    19e6:	0e 94 b0 05 	call	0xb60	; 0xb60 <system_tick>
    19ea:	10 91 01 46 	lds	r17, 0x4601	; 0x804601 <_ZL10g_sleeping>
    19ee:	11 23       	and	r17, r17
    19f0:	a9 f1       	breq	.+106    	; 0x1a5c <__vector_41+0x144>
    19f2:	80 91 02 46 	lds	r24, 0x4602	; 0x804602 <_ZL23g_seconds_left_to_sleep>
    19f6:	90 91 03 46 	lds	r25, 0x4603	; 0x804603 <_ZL23g_seconds_left_to_sleep+0x1>
    19fa:	a0 91 04 46 	lds	r26, 0x4604	; 0x804604 <_ZL23g_seconds_left_to_sleep+0x2>
    19fe:	b0 91 05 46 	lds	r27, 0x4605	; 0x804605 <_ZL23g_seconds_left_to_sleep+0x3>
    1a02:	89 2b       	or	r24, r25
    1a04:	8a 2b       	or	r24, r26
    1a06:	8b 2b       	or	r24, r27
    1a08:	99 f0       	breq	.+38     	; 0x1a30 <__vector_41+0x118>
    1a0a:	80 91 02 46 	lds	r24, 0x4602	; 0x804602 <_ZL23g_seconds_left_to_sleep>
    1a0e:	90 91 03 46 	lds	r25, 0x4603	; 0x804603 <_ZL23g_seconds_left_to_sleep+0x1>
    1a12:	a0 91 04 46 	lds	r26, 0x4604	; 0x804604 <_ZL23g_seconds_left_to_sleep+0x2>
    1a16:	b0 91 05 46 	lds	r27, 0x4605	; 0x804605 <_ZL23g_seconds_left_to_sleep+0x3>
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	a1 09       	sbc	r26, r1
    1a1e:	b1 09       	sbc	r27, r1
    1a20:	80 93 02 46 	sts	0x4602, r24	; 0x804602 <_ZL23g_seconds_left_to_sleep>
    1a24:	90 93 03 46 	sts	0x4603, r25	; 0x804603 <_ZL23g_seconds_left_to_sleep+0x1>
    1a28:	a0 93 04 46 	sts	0x4604, r26	; 0x804604 <_ZL23g_seconds_left_to_sleep+0x2>
    1a2c:	b0 93 05 46 	sts	0x4605, r27	; 0x804605 <_ZL23g_seconds_left_to_sleep+0x3>
    1a30:	80 91 02 46 	lds	r24, 0x4602	; 0x804602 <_ZL23g_seconds_left_to_sleep>
    1a34:	90 91 03 46 	lds	r25, 0x4603	; 0x804603 <_ZL23g_seconds_left_to_sleep+0x1>
    1a38:	a0 91 04 46 	lds	r26, 0x4604	; 0x804604 <_ZL23g_seconds_left_to_sleep+0x2>
    1a3c:	b0 91 05 46 	lds	r27, 0x4605	; 0x804605 <_ZL23g_seconds_left_to_sleep+0x3>
    1a40:	89 2b       	or	r24, r25
    1a42:	8a 2b       	or	r24, r26
    1a44:	8b 2b       	or	r24, r27
    1a46:	11 f0       	breq	.+4      	; 0x1a4c <__vector_41+0x134>
    1a48:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a4c:	11 23       	and	r17, r17
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <__vector_41+0x13a>
    1a50:	18 c3       	rjmp	.+1584   	; 0x2082 <__vector_41+0x76a>
    1a52:	10 92 00 46 	sts	0x4600, r1	; 0x804600 <_ZL13g_go_to_sleep>
    1a56:	10 92 01 46 	sts	0x4601, r1	; 0x804601 <_ZL10g_sleeping>
    1a5a:	13 c3       	rjmp	.+1574   	; 0x2082 <__vector_41+0x76a>
    1a5c:	19 82       	std	Y+1, r1	; 0x01
    1a5e:	1a 82       	std	Y+2, r1	; 0x02
    1a60:	1b 82       	std	Y+3, r1	; 0x03
    1a62:	1c 82       	std	Y+4, r1	; 0x04
    1a64:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1a68:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1a6c:	89 2b       	or	r24, r25
    1a6e:	49 f0       	breq	.+18     	; 0x1a82 <__vector_41+0x16a>
    1a70:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1a74:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1a7e:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1a82:	80 91 fd 45 	lds	r24, 0x45FD	; 0x8045fd <g_event_commenced>
    1a86:	88 23       	and	r24, r24
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <__vector_41+0x174>
    1a8a:	52 c0       	rjmp	.+164    	; 0x1b30 <__vector_41+0x218>
    1a8c:	40 91 f8 45 	lds	r20, 0x45F8	; 0x8045f8 <g_event_finish_time>
    1a90:	50 91 f9 45 	lds	r21, 0x45F9	; 0x8045f9 <g_event_finish_time+0x1>
    1a94:	60 91 fa 45 	lds	r22, 0x45FA	; 0x8045fa <g_event_finish_time+0x2>
    1a98:	70 91 fb 45 	lds	r23, 0x45FB	; 0x8045fb <g_event_finish_time+0x3>
    1a9c:	45 2b       	or	r20, r21
    1a9e:	46 2b       	or	r20, r22
    1aa0:	47 2b       	or	r20, r23
    1aa2:	51 f0       	breq	.+20     	; 0x1ab8 <__vector_41+0x1a0>
    1aa4:	90 91 fe 45 	lds	r25, 0x45FE	; 0x8045fe <g_check_for_next_event>
    1aa8:	91 11       	cpse	r25, r1
    1aaa:	08 c0       	rjmp	.+16     	; 0x1abc <__vector_41+0x1a4>
    1aac:	90 91 c4 45 	lds	r25, 0x45C4	; 0x8045c4 <_ZL20g_shutting_down_wifi>
    1ab0:	99 23       	and	r25, r25
    1ab2:	29 f0       	breq	.+10     	; 0x1abe <__vector_41+0x1a6>
    1ab4:	81 2f       	mov	r24, r17
    1ab6:	03 c0       	rjmp	.+6      	; 0x1abe <__vector_41+0x1a6>
    1ab8:	81 2f       	mov	r24, r17
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <__vector_41+0x1a6>
    1abc:	81 2f       	mov	r24, r17
    1abe:	88 23       	and	r24, r24
    1ac0:	b9 f1       	breq	.+110    	; 0x1b30 <__vector_41+0x218>
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    1aca:	49 81       	ldd	r20, Y+1	; 0x01
    1acc:	5a 81       	ldd	r21, Y+2	; 0x02
    1ace:	6b 81       	ldd	r22, Y+3	; 0x03
    1ad0:	7c 81       	ldd	r23, Y+4	; 0x04
    1ad2:	80 91 f8 45 	lds	r24, 0x45F8	; 0x8045f8 <g_event_finish_time>
    1ad6:	90 91 f9 45 	lds	r25, 0x45F9	; 0x8045f9 <g_event_finish_time+0x1>
    1ada:	a0 91 fa 45 	lds	r26, 0x45FA	; 0x8045fa <g_event_finish_time+0x2>
    1ade:	b0 91 fb 45 	lds	r27, 0x45FB	; 0x8045fb <g_event_finish_time+0x3>
    1ae2:	48 17       	cp	r20, r24
    1ae4:	59 07       	cpc	r21, r25
    1ae6:	6a 07       	cpc	r22, r26
    1ae8:	7b 07       	cpc	r23, r27
    1aea:	10 f1       	brcs	.+68     	; 0x1b30 <__vector_41+0x218>
    1aec:	8c ef       	ldi	r24, 0xFC	; 252
    1aee:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    1af2:	10 92 bc 45 	sts	0x45BC, r1	; 0x8045bc <_ZL12g_on_the_air>
    1af6:	10 92 bd 45 	sts	0x45BD, r1	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1afa:	10 92 be 45 	sts	0x45BE, r1	; 0x8045be <_ZL12g_on_the_air+0x2>
    1afe:	10 92 bf 45 	sts	0x45BF, r1	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <_Z14keyTransmitterb>
    1b08:	10 92 fc 45 	sts	0x45FC, r1	; 0x8045fc <g_event_enabled>
    1b0c:	10 92 fd 45 	sts	0x45FD, r1	; 0x8045fd <g_event_commenced>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	80 93 fe 45 	sts	0x45FE, r24	; 0x8045fe <g_check_for_next_event>
    1b16:	8a e5       	ldi	r24, 0x5A	; 90
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1b1e:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1b22:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1b26:	88 23       	and	r24, r24
    1b28:	19 f0       	breq	.+6      	; 0x1b30 <__vector_41+0x218>
    1b2a:	8c e3       	ldi	r24, 0x3C	; 60
    1b2c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b30:	80 91 fc 45 	lds	r24, 0x45FC	; 0x8045fc <g_event_enabled>
    1b34:	88 23       	and	r24, r24
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__vector_41+0x222>
    1b38:	32 c2       	rjmp	.+1124   	; 0x1f9e <__vector_41+0x686>
    1b3a:	00 91 fd 45 	lds	r16, 0x45FD	; 0x8045fd <g_event_commenced>
    1b3e:	00 23       	and	r16, r16
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <__vector_41+0x22c>
    1b42:	a2 c1       	rjmp	.+836    	; 0x1e88 <__vector_41+0x570>
    1b44:	80 91 c0 45 	lds	r24, 0x45C0	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    1b48:	90 91 c1 45 	lds	r25, 0x45C1	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    1b4c:	89 2b       	or	r24, r25
    1b4e:	49 f0       	breq	.+18     	; 0x1b62 <__vector_41+0x24a>
    1b50:	80 91 c0 45 	lds	r24, 0x45C0	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    1b54:	90 91 c1 45 	lds	r25, 0x45C1	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    1b5e:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    1b62:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    1b66:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1b6a:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    1b6e:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1b72:	89 2b       	or	r24, r25
    1b74:	8a 2b       	or	r24, r26
    1b76:	8b 2b       	or	r24, r27
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <__vector_41+0x264>
    1b7a:	11 c2       	rjmp	.+1058   	; 0x1f9e <__vector_41+0x686>
    1b7c:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    1b80:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1b84:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    1b88:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	19 06       	cpc	r1, r25
    1b90:	1a 06       	cpc	r1, r26
    1b92:	1b 06       	cpc	r1, r27
    1b94:	0c f0       	brlt	.+2      	; 0x1b98 <__vector_41+0x280>
    1b96:	26 c1       	rjmp	.+588    	; 0x1de4 <__vector_41+0x4cc>
    1b98:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    1b9c:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1ba0:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    1ba4:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	a1 09       	sbc	r26, r1
    1bac:	b1 09       	sbc	r27, r1
    1bae:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    1bb2:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1bb6:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    1bba:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1bbe:	80 91 c0 45 	lds	r24, 0x45C0	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    1bc2:	90 91 c1 45 	lds	r25, 0x45C1	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    1bc6:	89 2b       	or	r24, r25
    1bc8:	41 f4       	brne	.+16     	; 0x1bda <__vector_41+0x2c2>
    1bca:	80 91 f0 45 	lds	r24, 0x45F0	; 0x8045f0 <g_time_needed_for_ID>
    1bce:	90 91 f1 45 	lds	r25, 0x45F1	; 0x8045f1 <g_time_needed_for_ID+0x1>
    1bd2:	89 2b       	or	r24, r25
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <__vector_41+0x2c6>
    1bd6:	81 2f       	mov	r24, r17
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <__vector_41+0x2c8>
    1bda:	81 2f       	mov	r24, r17
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <__vector_41+0x2c8>
    1bde:	80 2f       	mov	r24, r16
    1be0:	88 23       	and	r24, r24
    1be2:	81 f1       	breq	.+96     	; 0x1c44 <__vector_41+0x32c>
    1be4:	80 91 f0 45 	lds	r24, 0x45F0	; 0x8045f0 <g_time_needed_for_ID>
    1be8:	90 91 f1 45 	lds	r25, 0x45F1	; 0x8045f1 <g_time_needed_for_ID+0x1>
    1bec:	a0 e0       	ldi	r26, 0x00	; 0
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	40 91 bc 45 	lds	r20, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    1bf4:	50 91 bd 45 	lds	r21, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1bf8:	60 91 be 45 	lds	r22, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    1bfc:	70 91 bf 45 	lds	r23, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1c00:	84 17       	cp	r24, r20
    1c02:	95 07       	cpc	r25, r21
    1c04:	a6 07       	cpc	r26, r22
    1c06:	b7 07       	cpc	r27, r23
    1c08:	e9 f4       	brne	.+58     	; 0x1c44 <__vector_41+0x32c>
    1c0a:	8f ee       	ldi	r24, 0xEF	; 239
    1c0c:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    1c10:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1c14:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1c18:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    1c1c:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    1c20:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1c24:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    1c28:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1c2c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1c30:	1d 82       	std	Y+5, r1	; 0x05
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	be 01       	movw	r22, r28
    1c38:	6b 5f       	subi	r22, 0xFB	; 251
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	8b ed       	ldi	r24, 0xDB	; 219
    1c3e:	95 e4       	ldi	r25, 0x45	; 69
    1c40:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
    1c44:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    1c48:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1c4c:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    1c50:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1c54:	89 2b       	or	r24, r25
    1c56:	8a 2b       	or	r24, r26
    1c58:	8b 2b       	or	r24, r27
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <__vector_41+0x346>
    1c5c:	a0 c1       	rjmp	.+832    	; 0x1f9e <__vector_41+0x686>
    1c5e:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1c62:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1c66:	89 2b       	or	r24, r25
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <__vector_41+0x354>
    1c6a:	a3 c0       	rjmp	.+326    	; 0x1db2 <__vector_41+0x49a>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <_Z14keyTransmitterb>
    1c72:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1c76:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1c7a:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    1c7e:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1c82:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    1c86:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1c8a:	05 2e       	mov	r0, r21
    1c8c:	00 0c       	add	r0, r0
    1c8e:	66 0b       	sbc	r22, r22
    1c90:	77 0b       	sbc	r23, r23
    1c92:	84 1b       	sub	r24, r20
    1c94:	95 0b       	sbc	r25, r21
    1c96:	a6 0b       	sbc	r26, r22
    1c98:	b7 0b       	sbc	r27, r23
    1c9a:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    1c9e:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1ca2:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    1ca6:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	be 01       	movw	r22, r28
    1cb4:	6b 5f       	subi	r22, 0xFB	; 251
    1cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb8:	86 ec       	ldi	r24, 0xC6	; 198
    1cba:	95 e4       	ldi	r25, 0x45	; 69
    1cbc:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
    1cc0:	8e ef       	ldi	r24, 0xFE	; 254
    1cc2:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	01 96       	adiw	r24, 0x01	; 1
    1cca:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    1cce:	29 81       	ldd	r18, Y+1	; 0x01
    1cd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cd4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cd6:	80 91 f8 45 	lds	r24, 0x45F8	; 0x8045f8 <g_event_finish_time>
    1cda:	90 91 f9 45 	lds	r25, 0x45F9	; 0x8045f9 <g_event_finish_time+0x1>
    1cde:	a0 91 fa 45 	lds	r26, 0x45FA	; 0x8045fa <g_event_finish_time+0x2>
    1ce2:	b0 91 fb 45 	lds	r27, 0x45FB	; 0x8045fb <g_event_finish_time+0x3>
    1ce6:	28 17       	cp	r18, r24
    1ce8:	39 07       	cpc	r19, r25
    1cea:	4a 07       	cpc	r20, r26
    1cec:	5b 07       	cpc	r21, r27
    1cee:	58 f4       	brcc	.+22     	; 0x1d06 <__vector_41+0x3ee>
    1cf0:	60 91 f8 45 	lds	r22, 0x45F8	; 0x8045f8 <g_event_finish_time>
    1cf4:	70 91 f9 45 	lds	r23, 0x45F9	; 0x8045f9 <g_event_finish_time+0x1>
    1cf8:	80 91 fa 45 	lds	r24, 0x45FA	; 0x8045fa <g_event_finish_time+0x2>
    1cfc:	90 91 fb 45 	lds	r25, 0x45FB	; 0x8045fb <g_event_finish_time+0x3>
    1d00:	0e 94 13 46 	call	0x8c26	; 0x8c26 <_Z7timeDifmm>
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <__vector_41+0x3f4>
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    1d10:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d14:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    1d18:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1d1c:	24 0f       	add	r18, r20
    1d1e:	35 1f       	adc	r19, r21
    1d20:	21 5f       	subi	r18, 0xF1	; 241
    1d22:	3f 4f       	sbci	r19, 0xFF	; 255
    1d24:	03 2e       	mov	r0, r19
    1d26:	00 0c       	add	r0, r0
    1d28:	44 0b       	sbc	r20, r20
    1d2a:	55 0b       	sbc	r21, r21
    1d2c:	26 17       	cp	r18, r22
    1d2e:	37 07       	cpc	r19, r23
    1d30:	48 07       	cpc	r20, r24
    1d32:	59 07       	cpc	r21, r25
    1d34:	0c f0       	brlt	.+2      	; 0x1d38 <__vector_41+0x420>
    1d36:	33 c1       	rjmp	.+614    	; 0x1f9e <__vector_41+0x686>
    1d38:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d3c:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d40:	40 97       	sbiw	r24, 0x10	; 16
    1d42:	2c f0       	brlt	.+10     	; 0x1d4e <__vector_41+0x436>
    1d44:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1d48:	81 11       	cpse	r24, r1
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <__vector_41+0x436>
    1d4c:	10 2f       	mov	r17, r16
    1d4e:	11 23       	and	r17, r17
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <__vector_41+0x43c>
    1d52:	25 c1       	rjmp	.+586    	; 0x1f9e <__vector_41+0x686>
    1d54:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d58:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d5c:	0a 97       	sbiw	r24, 0x0a	; 10
    1d5e:	09 2e       	mov	r0, r25
    1d60:	00 0c       	add	r0, r0
    1d62:	aa 0b       	sbc	r26, r26
    1d64:	bb 0b       	sbc	r27, r27
    1d66:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1d6a:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1d6e:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1d72:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	80 93 c5 45 	sts	0x45C5, r24	; 0x8045c5 <_ZL11g_sleepType>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	80 93 00 46 	sts	0x4600, r24	; 0x804600 <_ZL13g_go_to_sleep>
    1d82:	80 91 c0 45 	lds	r24, 0x45C0	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    1d86:	90 91 c1 45 	lds	r25, 0x45C1	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    1d8a:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep>
    1d8e:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1d92:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1d96:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1d9a:	84 1b       	sub	r24, r20
    1d9c:	95 0b       	sbc	r25, r21
    1d9e:	18 16       	cp	r1, r24
    1da0:	19 06       	cpc	r1, r25
    1da2:	14 f0       	brlt	.+4      	; 0x1da8 <__vector_41+0x490>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    1dac:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    1db0:	f6 c0       	rjmp	.+492    	; 0x1f9e <__vector_41+0x686>
    1db2:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1db6:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1dba:	09 2e       	mov	r0, r25
    1dbc:	00 0c       	add	r0, r0
    1dbe:	aa 0b       	sbc	r26, r26
    1dc0:	bb 0b       	sbc	r27, r27
    1dc2:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    1dc6:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1dca:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    1dce:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1dd2:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1dd6:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    1dda:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1dde:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1de2:	dd c0       	rjmp	.+442    	; 0x1f9e <__vector_41+0x686>
    1de4:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    1de8:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1dec:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    1df0:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1df4:	bb 23       	and	r27, r27
    1df6:	0c f0       	brlt	.+2      	; 0x1dfa <__vector_41+0x4e2>
    1df8:	d2 c0       	rjmp	.+420    	; 0x1f9e <__vector_41+0x686>
    1dfa:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    1dfe:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1e02:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    1e06:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	a1 1d       	adc	r26, r1
    1e0e:	b1 1d       	adc	r27, r1
    1e10:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    1e14:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1e18:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    1e1c:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1e20:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    1e24:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1e28:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    1e2c:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1e30:	89 2b       	or	r24, r25
    1e32:	8a 2b       	or	r24, r26
    1e34:	8b 2b       	or	r24, r27
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <__vector_41+0x522>
    1e38:	b2 c0       	rjmp	.+356    	; 0x1f9e <__vector_41+0x686>
    1e3a:	8d ef       	ldi	r24, 0xFD	; 253
    1e3c:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    1e40:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1e44:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1e48:	09 2e       	mov	r0, r25
    1e4a:	00 0c       	add	r0, r0
    1e4c:	aa 0b       	sbc	r26, r26
    1e4e:	bb 0b       	sbc	r27, r27
    1e50:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    1e54:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1e58:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    1e5c:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1e60:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1e64:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    1e68:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1e6c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	be 01       	movw	r22, r28
    1e7a:	6b 5f       	subi	r22, 0xFB	; 251
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	86 ec       	ldi	r24, 0xC6	; 198
    1e80:	95 e4       	ldi	r25, 0x45	; 69
    1e82:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
    1e86:	8b c0       	rjmp	.+278    	; 0x1f9e <__vector_41+0x686>
    1e88:	80 91 f4 45 	lds	r24, 0x45F4	; 0x8045f4 <g_event_start_time>
    1e8c:	90 91 f5 45 	lds	r25, 0x45F5	; 0x8045f5 <g_event_start_time+0x1>
    1e90:	a0 91 f6 45 	lds	r26, 0x45F6	; 0x8045f6 <g_event_start_time+0x2>
    1e94:	b0 91 f7 45 	lds	r27, 0x45F7	; 0x8045f7 <g_event_start_time+0x3>
    1e98:	89 2b       	or	r24, r25
    1e9a:	8a 2b       	or	r24, r26
    1e9c:	8b 2b       	or	r24, r27
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <__vector_41+0x58a>
    1ea0:	7e c0       	rjmp	.+252    	; 0x1f9e <__vector_41+0x686>
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    1eaa:	49 81       	ldd	r20, Y+1	; 0x01
    1eac:	5a 81       	ldd	r21, Y+2	; 0x02
    1eae:	6b 81       	ldd	r22, Y+3	; 0x03
    1eb0:	7c 81       	ldd	r23, Y+4	; 0x04
    1eb2:	80 91 f4 45 	lds	r24, 0x45F4	; 0x8045f4 <g_event_start_time>
    1eb6:	90 91 f5 45 	lds	r25, 0x45F5	; 0x8045f5 <g_event_start_time+0x1>
    1eba:	a0 91 f6 45 	lds	r26, 0x45F6	; 0x8045f6 <g_event_start_time+0x2>
    1ebe:	b0 91 f7 45 	lds	r27, 0x45F7	; 0x8045f7 <g_event_start_time+0x3>
    1ec2:	48 17       	cp	r20, r24
    1ec4:	59 07       	cpc	r21, r25
    1ec6:	6a 07       	cpc	r22, r26
    1ec8:	7b 07       	cpc	r23, r27
    1eca:	08 f4       	brcc	.+2      	; 0x1ece <__vector_41+0x5b6>
    1ecc:	68 c0       	rjmp	.+208    	; 0x1f9e <__vector_41+0x686>
    1ece:	80 91 f2 45 	lds	r24, 0x45F2	; 0x8045f2 <g_intra_cycle_delay_time>
    1ed2:	90 91 f3 45 	lds	r25, 0x45F3	; 0x8045f3 <g_intra_cycle_delay_time+0x1>
    1ed6:	89 2b       	or	r24, r25
    1ed8:	59 f1       	breq	.+86     	; 0x1f30 <__vector_41+0x618>
    1eda:	8e ef       	ldi	r24, 0xFE	; 254
    1edc:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    1ee0:	80 91 f2 45 	lds	r24, 0x45F2	; 0x8045f2 <g_intra_cycle_delay_time>
    1ee4:	90 91 f3 45 	lds	r25, 0x45F3	; 0x8045f3 <g_intra_cycle_delay_time+0x1>
    1ee8:	91 95       	neg	r25
    1eea:	81 95       	neg	r24
    1eec:	91 09       	sbc	r25, r1
    1eee:	09 2e       	mov	r0, r25
    1ef0:	00 0c       	add	r0, r0
    1ef2:	aa 0b       	sbc	r26, r26
    1ef4:	bb 0b       	sbc	r27, r27
    1ef6:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    1efa:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1efe:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    1f02:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1f06:	20 91 f2 45 	lds	r18, 0x45F2	; 0x8045f2 <g_intra_cycle_delay_time>
    1f0a:	30 91 f3 45 	lds	r19, 0x45F3	; 0x8045f3 <g_intra_cycle_delay_time+0x1>
    1f0e:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f12:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f16:	82 0f       	add	r24, r18
    1f18:	93 1f       	adc	r25, r19
    1f1a:	20 91 f0 45 	lds	r18, 0x45F0	; 0x8045f0 <g_time_needed_for_ID>
    1f1e:	30 91 f1 45 	lds	r19, 0x45F1	; 0x8045f1 <g_time_needed_for_ID+0x1>
    1f22:	82 1b       	sub	r24, r18
    1f24:	93 0b       	sbc	r25, r19
    1f26:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    1f2a:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    1f2e:	34 c0       	rjmp	.+104    	; 0x1f98 <__vector_41+0x680>
    1f30:	8d ef       	ldi	r24, 0xFD	; 253
    1f32:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    1f36:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f3a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f3e:	09 2e       	mov	r0, r25
    1f40:	00 0c       	add	r0, r0
    1f42:	aa 0b       	sbc	r26, r26
    1f44:	bb 0b       	sbc	r27, r27
    1f46:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    1f4a:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    1f4e:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    1f52:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    1f56:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f5a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f5e:	20 91 f0 45 	lds	r18, 0x45F0	; 0x8045f0 <g_time_needed_for_ID>
    1f62:	30 91 f1 45 	lds	r19, 0x45F1	; 0x8045f1 <g_time_needed_for_ID+0x1>
    1f66:	82 1b       	sub	r24, r18
    1f68:	93 0b       	sbc	r25, r19
    1f6a:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    1f6e:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    1f72:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1f76:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    1f7a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1f7e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	8d 83       	std	Y+5, r24	; 0x05
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	be 01       	movw	r22, r28
    1f8c:	6b 5f       	subi	r22, 0xFB	; 251
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	86 ec       	ldi	r24, 0xC6	; 198
    1f92:	95 e4       	ldi	r25, 0x45	; 69
    1f94:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	80 93 fd 45 	sts	0x45FD, r24	; 0x8045fd <g_event_commenced>
    1f9e:	80 91 c3 45 	lds	r24, 0x45C3	; 0x8045c3 <_ZL19g_wifi_enable_delay>
    1fa2:	88 23       	and	r24, r24
    1fa4:	e1 f0       	breq	.+56     	; 0x1fde <__vector_41+0x6c6>
    1fa6:	80 91 c3 45 	lds	r24, 0x45C3	; 0x8045c3 <_ZL19g_wifi_enable_delay>
    1faa:	81 50       	subi	r24, 0x01	; 1
    1fac:	80 93 c3 45 	sts	0x45C3, r24	; 0x8045c3 <_ZL19g_wifi_enable_delay>
    1fb0:	80 91 c3 45 	lds	r24, 0x45C3	; 0x8045c3 <_ZL19g_wifi_enable_delay>
    1fb4:	85 30       	cpi	r24, 0x05	; 5
    1fb6:	39 f4       	brne	.+14     	; 0x1fc6 <__vector_41+0x6ae>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	0e 94 9e 28 	call	0x513c	; 0x513c <_Z10wifi_powerb>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	0e 94 a8 28 	call	0x5150	; 0x5150 <_Z10wifi_resetb>
    1fc4:	5e c0       	rjmp	.+188    	; 0x2082 <__vector_41+0x76a>
    1fc6:	80 91 c3 45 	lds	r24, 0x45C3	; 0x8045c3 <_ZL19g_wifi_enable_delay>
    1fca:	81 11       	cpse	r24, r1
    1fcc:	5a c0       	rjmp	.+180    	; 0x2082 <__vector_41+0x76a>
    1fce:	46 e0       	ldi	r20, 0x06	; 6
    1fd0:	60 e8       	ldi	r22, 0x80	; 128
    1fd2:	75 e2       	ldi	r23, 0x25	; 37
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <_Z12linkbus_initm14USART_Number_t>
    1fdc:	52 c0       	rjmp	.+164    	; 0x2082 <__vector_41+0x76a>
    1fde:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1fe2:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1fe6:	89 2b       	or	r24, r25
    1fe8:	69 f0       	breq	.+26     	; 0x2004 <__vector_41+0x6ec>
    1fea:	80 91 c4 45 	lds	r24, 0x45C4	; 0x8045c4 <_ZL20g_shutting_down_wifi>
    1fee:	81 11       	cpse	r24, r1
    1ff0:	0c c0       	rjmp	.+24     	; 0x200a <__vector_41+0x6f2>
    1ff2:	90 91 fe 45 	lds	r25, 0x45FE	; 0x8045fe <g_check_for_next_event>
    1ff6:	91 11       	cpse	r25, r1
    1ff8:	08 c0       	rjmp	.+16     	; 0x200a <__vector_41+0x6f2>
    1ffa:	90 91 ff 45 	lds	r25, 0x45FF	; 0x8045ff <g_waiting_for_next_event>
    1ffe:	99 23       	and	r25, r25
    2000:	19 f0       	breq	.+6      	; 0x2008 <__vector_41+0x6f0>
    2002:	03 c0       	rjmp	.+6      	; 0x200a <__vector_41+0x6f2>
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	01 c0       	rjmp	.+2      	; 0x200a <__vector_41+0x6f2>
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	88 23       	and	r24, r24
    200c:	99 f1       	breq	.+102    	; 0x2074 <__vector_41+0x75c>
    200e:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2012:	88 23       	and	r24, r24
    2014:	79 f1       	breq	.+94     	; 0x2074 <__vector_41+0x75c>
    2016:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    201a:	81 50       	subi	r24, 0x01	; 1
    201c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2020:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2024:	81 11       	cpse	r24, r1
    2026:	26 c0       	rjmp	.+76     	; 0x2074 <__vector_41+0x75c>
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	0e 94 a8 28 	call	0x5150	; 0x5150 <_Z10wifi_resetb>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	0e 94 9e 28 	call	0x513c	; 0x513c <_Z10wifi_powerb>
    2034:	10 92 c4 45 	sts	0x45C4, r1	; 0x8045c4 <_ZL20g_shutting_down_wifi>
    2038:	80 91 fc 45 	lds	r24, 0x45FC	; 0x8045fc <g_event_enabled>
    203c:	81 11       	cpse	r24, r1
    203e:	12 c0       	rjmp	.+36     	; 0x2064 <__vector_41+0x74c>
    2040:	84 e0       	ldi	r24, 0x04	; 4
    2042:	80 93 c5 45 	sts	0x45C5, r24	; 0x8045c5 <_ZL11g_sleepType>
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	80 93 00 46 	sts	0x4600, r24	; 0x804600 <_ZL13g_go_to_sleep>
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	dc 01       	movw	r26, r24
    2052:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    2056:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    205a:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    205e:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <__vector_41+0x758>
    2064:	80 91 c5 45 	lds	r24, 0x45C5	; 0x8045c5 <_ZL11g_sleepType>
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	11 f4       	brne	.+4      	; 0x2070 <__vector_41+0x758>
    206c:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_Z12eventEnabledv>
    2070:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    2074:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    2078:	88 23       	and	r24, r24
    207a:	19 f0       	breq	.+6      	; 0x2082 <__vector_41+0x76a>
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	80 93 c2 45 	sts	0x45C2, r24	; 0x8045c2 <_ZL16g_report_seconds>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    2088:	25 96       	adiw	r28, 0x05	; 5
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	ff 91       	pop	r31
    2094:	ef 91       	pop	r30
    2096:	bf 91       	pop	r27
    2098:	af 91       	pop	r26
    209a:	9f 91       	pop	r25
    209c:	8f 91       	pop	r24
    209e:	7f 91       	pop	r23
    20a0:	6f 91       	pop	r22
    20a2:	5f 91       	pop	r21
    20a4:	4f 91       	pop	r20
    20a6:	3f 91       	pop	r19
    20a8:	2f 91       	pop	r18
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	0f 90       	pop	r0
    20b0:	0b be       	out	0x3b, r0	; 59
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	0f 90       	pop	r0
    20b8:	1f 90       	pop	r1
    20ba:	18 95       	reti

000020bc <__vector_12>:
    20bc:	1f 92       	push	r1
    20be:	0f 92       	push	r0
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	0f 92       	push	r0
    20c4:	11 24       	eor	r1, r1
    20c6:	0b b6       	in	r0, 0x3b	; 59
    20c8:	0f 92       	push	r0
    20ca:	2f 93       	push	r18
    20cc:	3f 93       	push	r19
    20ce:	4f 93       	push	r20
    20d0:	5f 93       	push	r21
    20d2:	6f 93       	push	r22
    20d4:	7f 93       	push	r23
    20d6:	8f 93       	push	r24
    20d8:	9f 93       	push	r25
    20da:	af 93       	push	r26
    20dc:	bf 93       	push	r27
    20de:	ef 93       	push	r30
    20e0:	ff 93       	push	r31
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <__vector_12+0x2c>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    20f0:	80 ff       	sbrs	r24, 0
    20f2:	cd c0       	rjmp	.+410    	; 0x228e <__vector_12+0x1d2>
    20f4:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    20f8:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    20fc:	89 2b       	or	r24, r25
    20fe:	49 f0       	breq	.+18     	; 0x2112 <__vector_12+0x56>
    2100:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2104:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    210e:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2112:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2116:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    211a:	89 2b       	or	r24, r25
    211c:	49 f0       	breq	.+18     	; 0x2130 <__vector_12+0x74>
    211e:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2122:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    212c:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2130:	80 91 b9 45 	lds	r24, 0x45B9	; 0x8045b9 <_ZL21g_util_tick_countdown>
    2134:	90 91 ba 45 	lds	r25, 0x45BA	; 0x8045ba <_ZL21g_util_tick_countdown+0x1>
    2138:	89 2b       	or	r24, r25
    213a:	49 f0       	breq	.+18     	; 0x214e <__vector_12+0x92>
    213c:	80 91 b9 45 	lds	r24, 0x45B9	; 0x8045b9 <_ZL21g_util_tick_countdown>
    2140:	90 91 ba 45 	lds	r25, 0x45BA	; 0x8045ba <_ZL21g_util_tick_countdown+0x1>
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	80 93 b9 45 	sts	0x45B9, r24	; 0x8045b9 <_ZL21g_util_tick_countdown>
    214a:	90 93 ba 45 	sts	0x45BA, r25	; 0x8045ba <_ZL21g_util_tick_countdown+0x1>
    214e:	80 91 fc 45 	lds	r24, 0x45FC	; 0x8045fc <g_event_enabled>
    2152:	88 23       	and	r24, r24
    2154:	19 f0       	breq	.+6      	; 0x215c <__vector_12+0xa0>
    2156:	80 91 fd 45 	lds	r24, 0x45FD	; 0x8045fd <g_event_commenced>
    215a:	01 c0       	rjmp	.+2      	; 0x215e <__vector_12+0xa2>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	88 23       	and	r24, r24
    2160:	09 f4       	brne	.+2      	; 0x2164 <__vector_12+0xa8>
    2162:	92 c0       	rjmp	.+292    	; 0x2288 <__vector_12+0x1cc>
    2164:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    2168:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    216c:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    2170:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    2174:	18 16       	cp	r1, r24
    2176:	19 06       	cpc	r1, r25
    2178:	1a 06       	cpc	r1, r26
    217a:	1b 06       	cpc	r1, r27
    217c:	0c f0       	brlt	.+2      	; 0x2180 <__vector_12+0xc4>
    217e:	66 c0       	rjmp	.+204    	; 0x224c <__vector_12+0x190>
    2180:	80 91 2a 46 	lds	r24, 0x462A	; 0x80462a <_ZZ11__vector_12E7codeInc>
    2184:	90 91 2b 46 	lds	r25, 0x462B	; 0x80462b <_ZZ11__vector_12E7codeInc+0x1>
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	09 f4       	brne	.+2      	; 0x218e <__vector_12+0xd2>
    218c:	47 c0       	rjmp	.+142    	; 0x221c <__vector_12+0x160>
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	80 93 2a 46 	sts	0x462A, r24	; 0x80462a <_ZZ11__vector_12E7codeInc>
    2194:	90 93 2b 46 	sts	0x462B, r25	; 0x80462b <_ZZ11__vector_12E7codeInc+0x1>
    2198:	89 2b       	or	r24, r25
    219a:	09 f0       	breq	.+2      	; 0x219e <__vector_12+0xe2>
    219c:	75 c0       	rjmp	.+234    	; 0x2288 <__vector_12+0x1cc>
    219e:	ae 01       	movw	r20, r28
    21a0:	4f 5f       	subi	r20, 0xFF	; 255
    21a2:	5f 4f       	sbci	r21, 0xFF	; 255
    21a4:	be 01       	movw	r22, r28
    21a6:	6e 5f       	subi	r22, 0xFE	; 254
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
    21b2:	80 93 2c 46 	sts	0x462C, r24	; 0x80462c <_ZZ11__vector_12E3key>
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	81 11       	cpse	r24, r1
    21ba:	25 c0       	rjmp	.+74     	; 0x2206 <__vector_12+0x14a>
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	88 23       	and	r24, r24
    21c0:	11 f1       	breq	.+68     	; 0x2206 <__vector_12+0x14a>
    21c2:	8d ef       	ldi	r24, 0xFD	; 253
    21c4:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    21c8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    21cc:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    21d0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    21d4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	be 01       	movw	r22, r28
    21e2:	6e 5f       	subi	r22, 0xFE	; 254
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	86 ec       	ldi	r24, 0xC6	; 198
    21e8:	95 e4       	ldi	r25, 0x45	; 69
    21ea:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
    21ee:	ae 01       	movw	r20, r28
    21f0:	4f 5f       	subi	r20, 0xFF	; 255
    21f2:	5f 4f       	sbci	r21, 0xFF	; 255
    21f4:	be 01       	movw	r22, r28
    21f6:	6e 5f       	subi	r22, 0xFE	; 254
    21f8:	7f 4f       	sbci	r23, 0xFF	; 255
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
    2202:	80 93 2c 46 	sts	0x462C, r24	; 0x80462c <_ZZ11__vector_12E3key>
    2206:	80 91 2c 46 	lds	r24, 0x462C	; 0x80462c <_ZZ11__vector_12E3key>
    220a:	88 23       	and	r24, r24
    220c:	e9 f1       	breq	.+122    	; 0x2288 <__vector_12+0x1cc>
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	0e 94 d5 43 	call	0x87aa	; 0x87aa <_Z18powerToTransmitterb>
    2214:	89 b1       	in	r24, 0x09	; 9
    2216:	8f 7b       	andi	r24, 0xBF	; 191
    2218:	89 b9       	out	0x09, r24	; 9
    221a:	36 c0       	rjmp	.+108    	; 0x2288 <__vector_12+0x1cc>
    221c:	80 91 2c 46 	lds	r24, 0x462C	; 0x80462c <_ZZ11__vector_12E3key>
    2220:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <_Z14keyTransmitterb>
    2224:	80 91 2c 46 	lds	r24, 0x462C	; 0x80462c <_ZZ11__vector_12E3key>
    2228:	81 11       	cpse	r24, r1
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <__vector_12+0x178>
    222c:	89 b1       	in	r24, 0x09	; 9
    222e:	80 64       	ori	r24, 0x40	; 64
    2230:	89 b9       	out	0x09, r24	; 9
    2232:	03 c0       	rjmp	.+6      	; 0x223a <__vector_12+0x17e>
    2234:	89 b1       	in	r24, 0x09	; 9
    2236:	8f 7b       	andi	r24, 0xBF	; 191
    2238:	89 b9       	out	0x09, r24	; 9
    223a:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    223e:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    2242:	80 93 2a 46 	sts	0x462A, r24	; 0x80462a <_ZZ11__vector_12E7codeInc>
    2246:	90 93 2b 46 	sts	0x462B, r25	; 0x80462b <_ZZ11__vector_12E7codeInc+0x1>
    224a:	1e c0       	rjmp	.+60     	; 0x2288 <__vector_12+0x1cc>
    224c:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    2250:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    2254:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    2258:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    225c:	89 2b       	or	r24, r25
    225e:	8a 2b       	or	r24, r26
    2260:	8b 2b       	or	r24, r27
    2262:	91 f4       	brne	.+36     	; 0x2288 <__vector_12+0x1cc>
    2264:	80 91 2c 46 	lds	r24, 0x462C	; 0x80462c <_ZZ11__vector_12E3key>
    2268:	88 23       	and	r24, r24
    226a:	71 f0       	breq	.+28     	; 0x2288 <__vector_12+0x1cc>
    226c:	10 92 2c 46 	sts	0x462C, r1	; 0x80462c <_ZZ11__vector_12E3key>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <_Z14keyTransmitterb>
    2276:	89 b1       	in	r24, 0x09	; 9
    2278:	80 64       	ori	r24, 0x40	; 64
    227a:	89 b9       	out	0x09, r24	; 9
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	0e 94 d5 43 	call	0x87aa	; 0x87aa <_Z18powerToTransmitterb>
    2282:	8e ef       	ldi	r24, 0xFE	; 254
    2284:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	ff 91       	pop	r31
    2298:	ef 91       	pop	r30
    229a:	bf 91       	pop	r27
    229c:	af 91       	pop	r26
    229e:	9f 91       	pop	r25
    22a0:	8f 91       	pop	r24
    22a2:	7f 91       	pop	r23
    22a4:	6f 91       	pop	r22
    22a6:	5f 91       	pop	r21
    22a8:	4f 91       	pop	r20
    22aa:	3f 91       	pop	r19
    22ac:	2f 91       	pop	r18
    22ae:	0f 90       	pop	r0
    22b0:	0b be       	out	0x3b, r0	; 59
    22b2:	0f 90       	pop	r0
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	0f 90       	pop	r0
    22b8:	1f 90       	pop	r1
    22ba:	18 95       	reti

000022bc <main>:
    22bc:	0e 94 b1 07 	call	0xf62	; 0xf62 <atmel_start_init>
    22c0:	89 b1       	in	r24, 0x09	; 9
    22c2:	80 64       	ori	r24, 0x40	; 64
    22c4:	89 b9       	out	0x09, r24	; 9
    22c6:	80 e1       	ldi	r24, 0x10	; 16
    22c8:	96 e4       	ldi	r25, 0x46	; 70
    22ca:	0e 94 17 32 	call	0x642e	; 0x642e <_ZN13EepromManager20initializeEEPROMVarsEv>
    22ce:	80 e1       	ldi	r24, 0x10	; 16
    22d0:	96 e4       	ldi	r25, 0x46	; 70
    22d2:	0e 94 2b 31 	call	0x6256	; 0x6256 <_ZN13EepromManager11readNonVolsEv>
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	0e 94 1e 28 	call	0x503c	; 0x503c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
    22dc:	0e 94 89 44 	call	0x8912	; 0x8912 <_Z16init_transmitterv>
    22e0:	82 3d       	cpi	r24, 0xD2	; 210
    22e2:	31 f4       	brne	.+12     	; 0x22f0 <main+0x34>
    22e4:	0e 94 0a 3b 	call	0x7614	; 0x7614 <sb_send_NewLine>
    22e8:	87 e4       	ldi	r24, 0x47	; 71
    22ea:	90 e4       	ldi	r25, 0x40	; 64
    22ec:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    22f0:	0e 94 b1 21 	call	0x4362	; 0x4362 <_Z8rtc_initv>
    22f4:	8c 3f       	cpi	r24, 0xFC	; 252
    22f6:	31 f4       	brne	.+12     	; 0x2304 <main+0x48>
    22f8:	0e 94 0a 3b 	call	0x7614	; 0x7614 <sb_send_NewLine>
    22fc:	82 e7       	ldi	r24, 0x72	; 114
    22fe:	90 e4       	ldi	r25, 0x40	; 64
    2300:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2304:	0e 94 b2 28 	call	0x5164	; 0x5164 <_Z11wifiPresentv>
    2308:	81 11       	cpse	r24, r1
    230a:	06 c0       	rjmp	.+12     	; 0x2318 <main+0x5c>
    230c:	0e 94 0a 3b 	call	0x7614	; 0x7614 <sb_send_NewLine>
    2310:	8b e9       	ldi	r24, 0x9B	; 155
    2312:	90 e4       	ldi	r25, 0x40	; 64
    2314:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2318:	0e 94 0a 3b 	call	0x7614	; 0x7614 <sb_send_NewLine>
    231c:	80 ec       	ldi	r24, 0xC0	; 192
    231e:	90 e4       	ldi	r25, 0x40	; 64
    2320:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2324:	8d ed       	ldi	r24, 0xDD	; 221
    2326:	90 e4       	ldi	r25, 0x40	; 64
    2328:	9f 93       	push	r25
    232a:	8f 93       	push	r24
    232c:	81 ee       	ldi	r24, 0xE1	; 225
    232e:	90 e4       	ldi	r25, 0x40	; 64
    2330:	9f 93       	push	r25
    2332:	8f 93       	push	r24
    2334:	85 e8       	ldi	r24, 0x85	; 133
    2336:	95 e4       	ldi	r25, 0x45	; 69
    2338:	9f 93       	push	r25
    233a:	8f 93       	push	r24
    233c:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    2340:	85 e8       	ldi	r24, 0x85	; 133
    2342:	95 e4       	ldi	r25, 0x45	; 69
    2344:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2348:	8e ee       	ldi	r24, 0xEE	; 238
    234a:	90 e4       	ldi	r25, 0x40	; 64
    234c:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2350:	0e 94 0a 3b 	call	0x7614	; 0x7614 <sb_send_NewLine>
    2354:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <sb_send_NewPrompt>
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	6a ef       	ldi	r22, 0xFA	; 250
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <util_delay_ms>
    2370:	88 23       	and	r24, r24
    2372:	c1 f3       	breq	.-16     	; 0x2364 <main+0xa8>
    2374:	0e 94 4c 18 	call	0x3098	; 0x3098 <_Z17handleLinkBusMsgsv>
    2378:	0e 94 bf 11 	call	0x237e	; 0x237e <_Z19handleSerialBusMsgsv>
    237c:	f3 cf       	rjmp	.-26     	; 0x2364 <main+0xa8>

0000237e <_Z19handleSerialBusMsgsv>:
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	cd 56       	subi	r28, 0x6D	; 109
    2390:	d1 09       	sbc	r29, r1
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0e 94 38 3a 	call	0x7470	; 0x7470 <nextFullSBRxBuffer>
    239a:	8a 87       	std	Y+10, r24	; 0x0a
    239c:	9b 87       	std	Y+11, r25	; 0x0b
    239e:	21 e0       	ldi	r18, 0x01	; 1
    23a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a4:	89 2b       	or	r24, r25
    23a6:	09 f4       	brne	.+2      	; 0x23aa <_Z19handleSerialBusMsgsv+0x2c>
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	22 23       	and	r18, r18
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <_Z19handleSerialBusMsgsv+0x32>
    23ae:	68 c6       	rjmp	.+3280   	; 0x3080 <_Z19handleSerialBusMsgsv+0xd02>
    23b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b4:	fc 01       	movw	r30, r24
    23b6:	81 81       	ldd	r24, Z+1	; 0x01
    23b8:	92 81       	ldd	r25, Z+2	; 0x02
    23ba:	8c 87       	std	Y+12, r24	; 0x0c
    23bc:	9d 87       	std	Y+13, r25	; 0x0d
    23be:	8c 85       	ldd	r24, Y+12	; 0x0c
    23c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    23c2:	8a 3e       	cpi	r24, 0xEA	; 234
    23c4:	f2 e2       	ldi	r31, 0x22	; 34
    23c6:	9f 07       	cpc	r25, r31
    23c8:	09 f4       	brne	.+2      	; 0x23cc <_Z19handleSerialBusMsgsv+0x4e>
    23ca:	4f c3       	rjmp	.+1694   	; 0x2a6a <_Z19handleSerialBusMsgsv+0x6ec>
    23cc:	8b 3e       	cpi	r24, 0xEB	; 235
    23ce:	22 e2       	ldi	r18, 0x22	; 34
    23d0:	92 07       	cpc	r25, r18
    23d2:	b8 f4       	brcc	.+46     	; 0x2402 <_Z19handleSerialBusMsgsv+0x84>
    23d4:	8f 36       	cpi	r24, 0x6F	; 111
    23d6:	ed e1       	ldi	r30, 0x1D	; 29
    23d8:	9e 07       	cpc	r25, r30
    23da:	09 f4       	brne	.+2      	; 0x23de <_Z19handleSerialBusMsgsv+0x60>
    23dc:	98 c3       	rjmp	.+1840   	; 0x2b0e <_Z19handleSerialBusMsgsv+0x790>
    23de:	80 37       	cpi	r24, 0x70	; 112
    23e0:	fd e1       	ldi	r31, 0x1D	; 29
    23e2:	9f 07       	cpc	r25, r31
    23e4:	28 f4       	brcc	.+10     	; 0x23f0 <_Z19handleSerialBusMsgsv+0x72>
    23e6:	8e 31       	cpi	r24, 0x1E	; 30
    23e8:	93 40       	sbci	r25, 0x03	; 3
    23ea:	09 f4       	brne	.+2      	; 0x23ee <_Z19handleSerialBusMsgsv+0x70>
    23ec:	2c c2       	rjmp	.+1112   	; 0x2846 <_Z19handleSerialBusMsgsv+0x4c8>
    23ee:	36 c6       	rjmp	.+3180   	; 0x305c <_Z19handleSerialBusMsgsv+0xcde>
    23f0:	86 3c       	cpi	r24, 0xC6	; 198
    23f2:	ee e1       	ldi	r30, 0x1E	; 30
    23f4:	9e 07       	cpc	r25, r30
    23f6:	e9 f0       	breq	.+58     	; 0x2432 <_Z19handleSerialBusMsgsv+0xb4>
    23f8:	81 3d       	cpi	r24, 0xD1	; 209
    23fa:	9e 41       	sbci	r25, 0x1E	; 30
    23fc:	09 f4       	brne	.+2      	; 0x2400 <_Z19handleSerialBusMsgsv+0x82>
    23fe:	7b c1       	rjmp	.+758    	; 0x26f6 <_Z19handleSerialBusMsgsv+0x378>
    2400:	2d c6       	rjmp	.+3162   	; 0x305c <_Z19handleSerialBusMsgsv+0xcde>
    2402:	82 37       	cpi	r24, 0x72	; 114
    2404:	23 e2       	ldi	r18, 0x23	; 35
    2406:	92 07       	cpc	r25, r18
    2408:	09 f4       	brne	.+2      	; 0x240c <_Z19handleSerialBusMsgsv+0x8e>
    240a:	ab c2       	rjmp	.+1366   	; 0x2962 <_Z19handleSerialBusMsgsv+0x5e4>
    240c:	83 37       	cpi	r24, 0x73	; 115
    240e:	e3 e2       	ldi	r30, 0x23	; 35
    2410:	9e 07       	cpc	r25, r30
    2412:	28 f4       	brcc	.+10     	; 0x241e <_Z19handleSerialBusMsgsv+0xa0>
    2414:	88 3f       	cpi	r24, 0xF8	; 248
    2416:	92 42       	sbci	r25, 0x22	; 34
    2418:	09 f4       	brne	.+2      	; 0x241c <_Z19handleSerialBusMsgsv+0x9e>
    241a:	0a c1       	rjmp	.+532    	; 0x2630 <_Z19handleSerialBusMsgsv+0x2b2>
    241c:	1f c6       	rjmp	.+3134   	; 0x305c <_Z19handleSerialBusMsgsv+0xcde>
    241e:	84 33       	cpi	r24, 0x34	; 52
    2420:	24 e2       	ldi	r18, 0x24	; 36
    2422:	92 07       	cpc	r25, r18
    2424:	09 f4       	brne	.+2      	; 0x2428 <_Z19handleSerialBusMsgsv+0xaa>
    2426:	d3 c1       	rjmp	.+934    	; 0x27ce <_Z19handleSerialBusMsgsv+0x450>
    2428:	85 3c       	cpi	r24, 0xC5	; 197
    242a:	94 42       	sbci	r25, 0x24	; 36
    242c:	09 f4       	brne	.+2      	; 0x2430 <_Z19handleSerialBusMsgsv+0xb2>
    242e:	02 c6       	rjmp	.+3076   	; 0x3034 <_Z19handleSerialBusMsgsv+0xcb6>
    2430:	15 c6       	rjmp	.+3114   	; 0x305c <_Z19handleSerialBusMsgsv+0xcde>
    2432:	8a 85       	ldd	r24, Y+10	; 0x0a
    2434:	9b 85       	ldd	r25, Y+11	; 0x0b
    2436:	fc 01       	movw	r30, r24
    2438:	83 81       	ldd	r24, Z+3	; 0x03
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	89 2b       	or	r24, r25
    2448:	09 f4       	brne	.+2      	; 0x244c <_Z19handleSerialBusMsgsv+0xce>
    244a:	d0 c0       	rjmp	.+416    	; 0x25ec <_Z19handleSerialBusMsgsv+0x26e>
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	82 34       	cpi	r24, 0x42	; 66
    2452:	91 05       	cpc	r25, r1
    2454:	19 f4       	brne	.+6      	; 0x245c <_Z19handleSerialBusMsgsv+0xde>
    2456:	19 82       	std	Y+1, r1	; 0x01
    2458:	1a 82       	std	Y+2, r1	; 0x02
    245a:	ac c0       	rjmp	.+344    	; 0x25b4 <_Z19handleSerialBusMsgsv+0x236>
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	86 34       	cpi	r24, 0x46	; 70
    2462:	91 05       	cpc	r25, r1
    2464:	29 f4       	brne	.+10     	; 0x2470 <_Z19handleSerialBusMsgsv+0xf2>
    2466:	86 e0       	ldi	r24, 0x06	; 6
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	a2 c0       	rjmp	.+324    	; 0x25b4 <_Z19handleSerialBusMsgsv+0x236>
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	83 34       	cpi	r24, 0x43	; 67
    2476:	91 05       	cpc	r25, r1
    2478:	b9 f5       	brne	.+110    	; 0x24e8 <_Z19handleSerialBusMsgsv+0x16a>
    247a:	8a 85       	ldd	r24, Y+10	; 0x0a
    247c:	9b 85       	ldd	r25, Y+11	; 0x0b
    247e:	fc 01       	movw	r30, r24
    2480:	87 89       	ldd	r24, Z+23	; 0x17
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	8a 85       	ldd	r24, Y+10	; 0x0a
    2486:	9b 85       	ldd	r25, Y+11	; 0x0b
    2488:	fc 01       	movw	r30, r24
    248a:	10 8e       	std	Z+24, r1	; 0x18
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	82 34       	cpi	r24, 0x42	; 66
    2490:	11 f4       	brne	.+4      	; 0x2496 <_Z19handleSerialBusMsgsv+0x118>
    2492:	80 e3       	ldi	r24, 0x30	; 48
    2494:	8b 83       	std	Y+3, r24	; 0x03
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	c0 97       	sbiw	r24, 0x30	; 48
    249e:	0a 97       	sbiw	r24, 0x0a	; 10
    24a0:	08 f0       	brcs	.+2      	; 0x24a4 <_Z19handleSerialBusMsgsv+0x126>
    24a2:	88 c0       	rjmp	.+272    	; 0x25b4 <_Z19handleSerialBusMsgsv+0x236>
    24a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a8:	47 96       	adiw	r24, 0x17	; 23
    24aa:	0e 94 3b 4a 	call	0x9476	; 0x9476 <atoi>
    24ae:	8e 87       	std	Y+14, r24	; 0x0e
    24b0:	9f 87       	std	Y+15, r25	; 0x0f
    24b2:	18 8a       	std	Y+16, r1	; 0x10
    24b4:	85 e0       	ldi	r24, 0x05	; 5
    24b6:	89 8b       	std	Y+17, r24	; 0x11
    24b8:	89 89       	ldd	r24, Y+17	; 0x11
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24c2:	28 17       	cp	r18, r24
    24c4:	39 07       	cpc	r19, r25
    24c6:	24 f4       	brge	.+8      	; 0x24d0 <_Z19handleSerialBusMsgsv+0x152>
    24c8:	89 89       	ldd	r24, Y+17	; 0x11
    24ca:	88 2f       	mov	r24, r24
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	09 c0       	rjmp	.+18     	; 0x24e2 <_Z19handleSerialBusMsgsv+0x164>
    24d0:	88 89       	ldd	r24, Y+16	; 0x10
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	2e 85       	ldd	r18, Y+14	; 0x0e
    24d8:	3f 85       	ldd	r19, Y+15	; 0x0f
    24da:	82 17       	cp	r24, r18
    24dc:	93 07       	cpc	r25, r19
    24de:	0c f4       	brge	.+2      	; 0x24e2 <_Z19handleSerialBusMsgsv+0x164>
    24e0:	c9 01       	movw	r24, r18
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	66 c0       	rjmp	.+204    	; 0x25b4 <_Z19handleSerialBusMsgsv+0x236>
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	83 35       	cpi	r24, 0x53	; 83
    24ee:	91 05       	cpc	r25, r1
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <_Z19handleSerialBusMsgsv+0x176>
    24f2:	59 c0       	rjmp	.+178    	; 0x25a6 <_Z19handleSerialBusMsgsv+0x228>
    24f4:	1c 82       	std	Y+4, r1	; 0x04
    24f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24fa:	fc 01       	movw	r30, r24
    24fc:	87 89       	ldd	r24, Z+23	; 0x17
    24fe:	8a 8b       	std	Y+18, r24	; 0x12
    2500:	8a 85       	ldd	r24, Y+10	; 0x0a
    2502:	9b 85       	ldd	r25, Y+11	; 0x0b
    2504:	fc 01       	movw	r30, r24
    2506:	80 8d       	ldd	r24, Z+24	; 0x18
    2508:	8b 8b       	std	Y+19, r24	; 0x13
    250a:	8a 85       	ldd	r24, Y+10	; 0x0a
    250c:	9b 85       	ldd	r25, Y+11	; 0x0b
    250e:	fc 01       	movw	r30, r24
    2510:	11 8e       	std	Z+25, r1	; 0x19
    2512:	8a 89       	ldd	r24, Y+18	; 0x12
    2514:	82 34       	cpi	r24, 0x42	; 66
    2516:	11 f4       	brne	.+4      	; 0x251c <_Z19handleSerialBusMsgsv+0x19e>
    2518:	1c 82       	std	Y+4, r1	; 0x04
    251a:	36 c0       	rjmp	.+108    	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    251c:	8a 89       	ldd	r24, Y+18	; 0x12
    251e:	86 34       	cpi	r24, 0x46	; 70
    2520:	51 f4       	brne	.+20     	; 0x2536 <_Z19handleSerialBusMsgsv+0x1b8>
    2522:	8b 89       	ldd	r24, Y+19	; 0x13
    2524:	81 33       	cpi	r24, 0x31	; 49
    2526:	80 f1       	brcs	.+96     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    2528:	8b 89       	ldd	r24, Y+19	; 0x13
    252a:	86 33       	cpi	r24, 0x36	; 54
    252c:	68 f5       	brcc	.+90     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    252e:	8b 89       	ldd	r24, Y+19	; 0x13
    2530:	84 52       	subi	r24, 0x24	; 36
    2532:	8c 83       	std	Y+4, r24	; 0x04
    2534:	29 c0       	rjmp	.+82     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    2536:	8a 89       	ldd	r24, Y+18	; 0x12
    2538:	83 35       	cpi	r24, 0x53	; 83
    253a:	69 f4       	brne	.+26     	; 0x2556 <_Z19handleSerialBusMsgsv+0x1d8>
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	81 33       	cpi	r24, 0x31	; 49
    2540:	38 f0       	brcs	.+14     	; 0x2550 <_Z19handleSerialBusMsgsv+0x1d2>
    2542:	8b 89       	ldd	r24, Y+19	; 0x13
    2544:	86 33       	cpi	r24, 0x36	; 54
    2546:	20 f4       	brcc	.+8      	; 0x2550 <_Z19handleSerialBusMsgsv+0x1d2>
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	89 52       	subi	r24, 0x29	; 41
    254c:	8c 83       	std	Y+4, r24	; 0x04
    254e:	1c c0       	rjmp	.+56     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    2550:	87 e0       	ldi	r24, 0x07	; 7
    2552:	8c 83       	std	Y+4, r24	; 0x04
    2554:	19 c0       	rjmp	.+50     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	86 34       	cpi	r24, 0x46	; 70
    255a:	51 f4       	brne	.+20     	; 0x2570 <_Z19handleSerialBusMsgsv+0x1f2>
    255c:	8a 89       	ldd	r24, Y+18	; 0x12
    255e:	81 33       	cpi	r24, 0x31	; 49
    2560:	98 f0       	brcs	.+38     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    2562:	8a 89       	ldd	r24, Y+18	; 0x12
    2564:	86 33       	cpi	r24, 0x36	; 54
    2566:	80 f4       	brcc	.+32     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    2568:	8a 89       	ldd	r24, Y+18	; 0x12
    256a:	84 52       	subi	r24, 0x24	; 36
    256c:	8c 83       	std	Y+4, r24	; 0x04
    256e:	0c c0       	rjmp	.+24     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	83 35       	cpi	r24, 0x53	; 83
    2574:	49 f4       	brne	.+18     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    2576:	8a 89       	ldd	r24, Y+18	; 0x12
    2578:	81 33       	cpi	r24, 0x31	; 49
    257a:	30 f0       	brcs	.+12     	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    257c:	8a 89       	ldd	r24, Y+18	; 0x12
    257e:	86 33       	cpi	r24, 0x36	; 54
    2580:	18 f4       	brcc	.+6      	; 0x2588 <_Z19handleSerialBusMsgsv+0x20a>
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	89 52       	subi	r24, 0x29	; 41
    2586:	8c 83       	std	Y+4, r24	; 0x04
    2588:	8c 81       	ldd	r24, Y+4	; 0x04
    258a:	87 30       	cpi	r24, 0x07	; 7
    258c:	48 f0       	brcs	.+18     	; 0x25a0 <_Z19handleSerialBusMsgsv+0x222>
    258e:	8c 81       	ldd	r24, Y+4	; 0x04
    2590:	82 31       	cpi	r24, 0x12	; 18
    2592:	30 f4       	brcc	.+12     	; 0x25a0 <_Z19handleSerialBusMsgsv+0x222>
    2594:	8c 81       	ldd	r24, Y+4	; 0x04
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	0a c0       	rjmp	.+20     	; 0x25b4 <_Z19handleSerialBusMsgsv+0x236>
    25a0:	19 82       	std	Y+1, r1	; 0x01
    25a2:	1a 82       	std	Y+2, r1	; 0x02
    25a4:	07 c0       	rjmp	.+14     	; 0x25b4 <_Z19handleSerialBusMsgsv+0x236>
    25a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25aa:	03 96       	adiw	r24, 0x03	; 3
    25ac:	0e 94 3b 4a 	call	0x9476	; 0x9476 <atoi>
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	9a 83       	std	Y+2, r25	; 0x02
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	99 23       	and	r25, r25
    25ba:	c4 f0       	brlt	.+48     	; 0x25ec <_Z19handleSerialBusMsgsv+0x26e>
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	42 97       	sbiw	r24, 0x12	; 18
    25c2:	a4 f4       	brge	.+40     	; 0x25ec <_Z19handleSerialBusMsgsv+0x26e>
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	8e ab       	std	Y+54, r24	; 0x36
    25c8:	ce 01       	movw	r24, r28
    25ca:	c6 96       	adiw	r24, 0x36	; 54
    25cc:	ac 01       	movw	r20, r24
    25ce:	69 e2       	ldi	r22, 0x29	; 41
    25d0:	80 e1       	ldi	r24, 0x10	; 16
    25d2:	96 e4       	ldi	r25, 0x46	; 70
    25d4:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    25d8:	9e a9       	ldd	r25, Y+54	; 0x36
    25da:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    25de:	98 17       	cp	r25, r24
    25e0:	29 f0       	breq	.+10     	; 0x25ec <_Z19handleSerialBusMsgsv+0x26e>
    25e2:	ce 01       	movw	r24, r28
    25e4:	c6 96       	adiw	r24, 0x36	; 54
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    25ec:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    25f0:	88 2f       	mov	r24, r24
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	29 2f       	mov	r18, r25
    25f6:	2f 93       	push	r18
    25f8:	8f 93       	push	r24
    25fa:	81 e3       	ldi	r24, 0x31	; 49
    25fc:	92 e4       	ldi	r25, 0x42	; 66
    25fe:	89 2f       	mov	r24, r25
    2600:	8f 93       	push	r24
    2602:	81 e3       	ldi	r24, 0x31	; 49
    2604:	92 e4       	ldi	r25, 0x42	; 66
    2606:	8f 93       	push	r24
    2608:	85 e8       	ldi	r24, 0x85	; 133
    260a:	95 e4       	ldi	r25, 0x45	; 69
    260c:	89 2f       	mov	r24, r25
    260e:	8f 93       	push	r24
    2610:	85 e8       	ldi	r24, 0x85	; 133
    2612:	95 e4       	ldi	r25, 0x45	; 69
    2614:	8f 93       	push	r24
    2616:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	85 e8       	ldi	r24, 0x85	; 133
    2628:	95 e4       	ldi	r25, 0x45	; 69
    262a:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    262e:	20 c5       	rjmp	.+2624   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    2630:	8a 85       	ldd	r24, Y+10	; 0x0a
    2632:	9b 85       	ldd	r25, Y+11	; 0x0b
    2634:	fc 01       	movw	r30, r24
    2636:	83 81       	ldd	r24, Z+3	; 0x03
    2638:	88 23       	and	r24, r24
    263a:	e9 f1       	breq	.+122    	; 0x26b6 <_Z19handleSerialBusMsgsv+0x338>
    263c:	8a 85       	ldd	r24, Y+10	; 0x0a
    263e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2640:	03 96       	adiw	r24, 0x03	; 3
    2642:	0e 94 3b 4a 	call	0x9476	; 0x9476 <atoi>
    2646:	80 93 2d 46 	sts	0x462D, r24	; 0x80462d <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    264a:	90 93 2e 46 	sts	0x462E, r25	; 0x80462e <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    264e:	80 91 2d 46 	lds	r24, 0x462D	; 0x80462d <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    2652:	90 91 2e 46 	lds	r25, 0x462E	; 0x80462e <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    2656:	89 38       	cpi	r24, 0x89	; 137
    2658:	93 41       	sbci	r25, 0x13	; 19
    265a:	68 f4       	brcc	.+26     	; 0x2676 <_Z19handleSerialBusMsgsv+0x2f8>
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	70 e0       	ldi	r23, 0x00	; 0
    2660:	8d e2       	ldi	r24, 0x2D	; 45
    2662:	96 e4       	ldi	r25, 0x46	; 70
    2664:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <_Z15txSetParametersPjPb>
    2668:	8c 8b       	std	Y+20, r24	; 0x14
    266a:	8c 89       	ldd	r24, Y+20	; 0x14
    266c:	88 23       	and	r24, r24
    266e:	19 f0       	breq	.+6      	; 0x2676 <_Z19handleSerialBusMsgsv+0x2f8>
    2670:	8c 89       	ldd	r24, Y+20	; 0x14
    2672:	80 93 b7 45 	sts	0x45B7, r24	; 0x8045b7 <_ZL17g_last_error_code>
    2676:	0e 94 f6 43 	call	0x87ec	; 0x87ec <_Z12txGetPowerMwv>
    267a:	29 2f       	mov	r18, r25
    267c:	2f 93       	push	r18
    267e:	8f 93       	push	r24
    2680:	89 e3       	ldi	r24, 0x39	; 57
    2682:	92 e4       	ldi	r25, 0x42	; 66
    2684:	89 2f       	mov	r24, r25
    2686:	8f 93       	push	r24
    2688:	89 e3       	ldi	r24, 0x39	; 57
    268a:	92 e4       	ldi	r25, 0x42	; 66
    268c:	8f 93       	push	r24
    268e:	85 e8       	ldi	r24, 0x85	; 133
    2690:	95 e4       	ldi	r25, 0x45	; 69
    2692:	89 2f       	mov	r24, r25
    2694:	8f 93       	push	r24
    2696:	85 e8       	ldi	r24, 0x85	; 133
    2698:	95 e4       	ldi	r25, 0x45	; 69
    269a:	8f 93       	push	r24
    269c:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	85 e8       	ldi	r24, 0x85	; 133
    26ae:	95 e4       	ldi	r25, 0x45	; 69
    26b0:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    26b4:	dd c4       	rjmp	.+2490   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    26b6:	0e 94 f6 43 	call	0x87ec	; 0x87ec <_Z12txGetPowerMwv>
    26ba:	29 2f       	mov	r18, r25
    26bc:	2f 93       	push	r18
    26be:	8f 93       	push	r24
    26c0:	89 e3       	ldi	r24, 0x39	; 57
    26c2:	92 e4       	ldi	r25, 0x42	; 66
    26c4:	89 2f       	mov	r24, r25
    26c6:	8f 93       	push	r24
    26c8:	89 e3       	ldi	r24, 0x39	; 57
    26ca:	92 e4       	ldi	r25, 0x42	; 66
    26cc:	8f 93       	push	r24
    26ce:	85 e8       	ldi	r24, 0x85	; 133
    26d0:	95 e4       	ldi	r25, 0x45	; 69
    26d2:	89 2f       	mov	r24, r25
    26d4:	8f 93       	push	r24
    26d6:	85 e8       	ldi	r24, 0x85	; 133
    26d8:	95 e4       	ldi	r25, 0x45	; 69
    26da:	8f 93       	push	r24
    26dc:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	85 e8       	ldi	r24, 0x85	; 133
    26ee:	95 e4       	ldi	r25, 0x45	; 69
    26f0:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    26f4:	bd c4       	rjmp	.+2426   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    26f6:	1d 82       	std	Y+5, r1	; 0x05
    26f8:	1e 82       	std	Y+6, r1	; 0x06
    26fa:	1f 82       	std	Y+7, r1	; 0x07
    26fc:	18 86       	std	Y+8, r1	; 0x08
    26fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2700:	9b 85       	ldd	r25, Y+11	; 0x0b
    2702:	fc 01       	movw	r30, r24
    2704:	83 81       	ldd	r24, Z+3	; 0x03
    2706:	88 23       	and	r24, r24
    2708:	79 f1       	breq	.+94     	; 0x2768 <_Z19handleSerialBusMsgsv+0x3ea>
    270a:	8a 85       	ldd	r24, Y+10	; 0x0a
    270c:	9b 85       	ldd	r25, Y+11	; 0x0b
    270e:	03 96       	adiw	r24, 0x03	; 3
    2710:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	8d 8b       	std	Y+21, r24	; 0x15
    271a:	9e 8b       	std	Y+22, r25	; 0x16
    271c:	af 8b       	std	Y+23, r26	; 0x17
    271e:	b8 8f       	std	Y+24, r27	; 0x18
    2720:	8d 89       	ldd	r24, Y+21	; 0x15
    2722:	9e 89       	ldd	r25, Y+22	; 0x16
    2724:	af 89       	ldd	r26, Y+23	; 0x17
    2726:	b8 8d       	ldd	r27, Y+24	; 0x18
    2728:	8f ab       	std	Y+55, r24	; 0x37
    272a:	98 af       	std	Y+56, r25	; 0x38
    272c:	a9 af       	std	Y+57, r26	; 0x39
    272e:	ba af       	std	Y+58, r27	; 0x3a
    2730:	ce 01       	movw	r24, r28
    2732:	c7 96       	adiw	r24, 0x37	; 55
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	0e 94 9a 43 	call	0x8734	; 0x8734 <_Z14txSetFrequencyPmb>
    273a:	98 2f       	mov	r25, r24
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	89 27       	eor	r24, r25
    2740:	88 23       	and	r24, r24
    2742:	69 f0       	breq	.+26     	; 0x275e <_Z19handleSerialBusMsgsv+0x3e0>
    2744:	8f a9       	ldd	r24, Y+55	; 0x37
    2746:	98 ad       	ldd	r25, Y+56	; 0x38
    2748:	a9 ad       	ldd	r26, Y+57	; 0x39
    274a:	ba ad       	ldd	r27, Y+58	; 0x3a
    274c:	8d 83       	std	Y+5, r24	; 0x05
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	af 83       	std	Y+7, r26	; 0x07
    2752:	b8 87       	std	Y+8, r27	; 0x08
    2754:	80 e1       	ldi	r24, 0x10	; 16
    2756:	96 e4       	ldi	r25, 0x46	; 70
    2758:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN13EepromManager13saveAllEEPROMEv>
    275c:	0d c0       	rjmp	.+26     	; 0x2778 <_Z19handleSerialBusMsgsv+0x3fa>
    275e:	87 e4       	ldi	r24, 0x47	; 71
    2760:	90 e4       	ldi	r25, 0x40	; 64
    2762:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2766:	08 c0       	rjmp	.+16     	; 0x2778 <_Z19handleSerialBusMsgsv+0x3fa>
    2768:	0e 94 cc 43 	call	0x8798	; 0x8798 <_Z14txGetFrequencyv>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8d 83       	std	Y+5, r24	; 0x05
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	af 83       	std	Y+7, r26	; 0x07
    2776:	b8 87       	std	Y+8, r27	; 0x08
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	af 81       	ldd	r26, Y+7	; 0x07
    277e:	b8 85       	ldd	r27, Y+8	; 0x08
    2780:	89 2b       	or	r24, r25
    2782:	8a 2b       	or	r24, r26
    2784:	8b 2b       	or	r24, r27
    2786:	09 f4       	brne	.+2      	; 0x278a <_Z19handleSerialBusMsgsv+0x40c>
    2788:	6e c4       	rjmp	.+2268   	; 0x3066 <_Z19handleSerialBusMsgsv+0xce8>
    278a:	88 85       	ldd	r24, Y+8	; 0x08
    278c:	8f 93       	push	r24
    278e:	8f 81       	ldd	r24, Y+7	; 0x07
    2790:	8f 93       	push	r24
    2792:	8e 81       	ldd	r24, Y+6	; 0x06
    2794:	8f 93       	push	r24
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	8f 93       	push	r24
    279a:	84 e4       	ldi	r24, 0x44	; 68
    279c:	92 e4       	ldi	r25, 0x42	; 66
    279e:	89 2f       	mov	r24, r25
    27a0:	8f 93       	push	r24
    27a2:	84 e4       	ldi	r24, 0x44	; 68
    27a4:	92 e4       	ldi	r25, 0x42	; 66
    27a6:	8f 93       	push	r24
    27a8:	85 e8       	ldi	r24, 0x85	; 133
    27aa:	95 e4       	ldi	r25, 0x45	; 69
    27ac:	89 2f       	mov	r24, r25
    27ae:	8f 93       	push	r24
    27b0:	85 e8       	ldi	r24, 0x85	; 133
    27b2:	95 e4       	ldi	r25, 0x45	; 69
    27b4:	8f 93       	push	r24
    27b6:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    27ba:	8d b7       	in	r24, 0x3d	; 61
    27bc:	9e b7       	in	r25, 0x3e	; 62
    27be:	08 96       	adiw	r24, 0x08	; 8
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	85 e8       	ldi	r24, 0x85	; 133
    27c6:	95 e4       	ldi	r25, 0x45	; 69
    27c8:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    27cc:	4c c4       	rjmp	.+2200   	; 0x3066 <_Z19handleSerialBusMsgsv+0xce8>
    27ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27d2:	fc 01       	movw	r30, r24
    27d4:	83 81       	ldd	r24, Z+3	; 0x03
    27d6:	88 23       	and	r24, r24
    27d8:	89 f1       	breq	.+98     	; 0x283c <_Z19handleSerialBusMsgsv+0x4be>
    27da:	8a 85       	ldd	r24, Y+10	; 0x0a
    27dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    27de:	fc 01       	movw	r30, r24
    27e0:	83 81       	ldd	r24, Z+3	; 0x03
    27e2:	80 33       	cpi	r24, 0x30	; 48
    27e4:	21 f4       	brne	.+8      	; 0x27ee <_Z19handleSerialBusMsgsv+0x470>
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	0e 94 0d 22 	call	0x441a	; 0x441a <_Z12stopEventNow19EventActionSource_t>
    27ec:	41 c4       	rjmp	.+2178   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    27ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    27f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27f2:	fc 01       	movw	r30, r24
    27f4:	83 81       	ldd	r24, Z+3	; 0x03
    27f6:	81 33       	cpi	r24, 0x31	; 49
    27f8:	21 f4       	brne	.+8      	; 0x2802 <_Z19handleSerialBusMsgsv+0x484>
    27fa:	82 e0       	ldi	r24, 0x02	; 2
    27fc:	0e 94 bc 21 	call	0x4378	; 0x4378 <_Z13startEventNow19EventActionSource_t>
    2800:	37 c4       	rjmp	.+2158   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    2802:	8a 85       	ldd	r24, Y+10	; 0x0a
    2804:	9b 85       	ldd	r25, Y+11	; 0x0b
    2806:	fc 01       	movw	r30, r24
    2808:	83 81       	ldd	r24, Z+3	; 0x03
    280a:	82 33       	cpi	r24, 0x32	; 50
    280c:	31 f4       	brne	.+12     	; 0x281a <_Z19handleSerialBusMsgsv+0x49c>
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    2814:	0e 94 33 22 	call	0x4466	; 0x4466 <_Z18startEventUsingRTCv>
    2818:	2b c4       	rjmp	.+2134   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    281a:	8a 85       	ldd	r24, Y+10	; 0x0a
    281c:	9b 85       	ldd	r25, Y+11	; 0x0b
    281e:	fc 01       	movw	r30, r24
    2820:	83 81       	ldd	r24, Z+3	; 0x03
    2822:	83 33       	cpi	r24, 0x33	; 51
    2824:	31 f4       	brne	.+12     	; 0x2832 <_Z19handleSerialBusMsgsv+0x4b4>
    2826:	62 e0       	ldi	r22, 0x02	; 2
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2830:	1f c4       	rjmp	.+2110   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    2832:	80 e5       	ldi	r24, 0x50	; 80
    2834:	92 e4       	ldi	r25, 0x42	; 66
    2836:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    283a:	1a c4       	rjmp	.+2100   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    283c:	80 e5       	ldi	r24, 0x50	; 80
    283e:	92 e4       	ldi	r25, 0x42	; 66
    2840:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2844:	15 c4       	rjmp	.+2090   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    2846:	8a 85       	ldd	r24, Y+10	; 0x0a
    2848:	9b 85       	ldd	r25, Y+11	; 0x0b
    284a:	fc 01       	movw	r30, r24
    284c:	83 81       	ldd	r24, Z+3	; 0x03
    284e:	88 23       	and	r24, r24
    2850:	09 f4       	brne	.+2      	; 0x2854 <_Z19handleSerialBusMsgsv+0x4d6>
    2852:	41 c0       	rjmp	.+130    	; 0x28d6 <_Z19handleSerialBusMsgsv+0x558>
    2854:	80 e2       	ldi	r24, 0x20	; 32
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	80 93 85 45 	sts	0x4585, r24	; 0x804585 <_ZL9g_tempStr>
    285c:	90 93 86 45 	sts	0x4586, r25	; 0x804586 <_ZL9g_tempStr+0x1>
    2860:	8a 85       	ldd	r24, Y+10	; 0x0a
    2862:	9b 85       	ldd	r25, Y+11	; 0x0b
    2864:	03 96       	adiw	r24, 0x03	; 3
    2866:	bc 01       	movw	r22, r24
    2868:	85 e8       	ldi	r24, 0x85	; 133
    286a:	95 e4       	ldi	r25, 0x45	; 69
    286c:	0e 94 88 4a 	call	0x9510	; 0x9510 <strcat>
    2870:	8a 85       	ldd	r24, Y+10	; 0x0a
    2872:	9b 85       	ldd	r25, Y+11	; 0x0b
    2874:	fc 01       	movw	r30, r24
    2876:	87 89       	ldd	r24, Z+23	; 0x17
    2878:	88 23       	and	r24, r24
    287a:	d1 f0       	breq	.+52     	; 0x28b0 <_Z19handleSerialBusMsgsv+0x532>
    287c:	85 e8       	ldi	r24, 0x85	; 133
    287e:	95 e4       	ldi	r25, 0x45	; 69
    2880:	9c 01       	movw	r18, r24
    2882:	f9 01       	movw	r30, r18
    2884:	01 90       	ld	r0, Z+
    2886:	00 20       	and	r0, r0
    2888:	e9 f7       	brne	.-6      	; 0x2884 <_Z19handleSerialBusMsgsv+0x506>
    288a:	cf 01       	movw	r24, r30
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	82 1b       	sub	r24, r18
    2890:	93 0b       	sbc	r25, r19
    2892:	8b 57       	subi	r24, 0x7B	; 123
    2894:	9a 4b       	sbci	r25, 0xBA	; 186
    2896:	20 e2       	ldi	r18, 0x20	; 32
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	fc 01       	movw	r30, r24
    289c:	20 83       	st	Z, r18
    289e:	31 83       	std	Z+1, r19	; 0x01
    28a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28a4:	47 96       	adiw	r24, 0x17	; 23
    28a6:	bc 01       	movw	r22, r24
    28a8:	85 e8       	ldi	r24, 0x85	; 133
    28aa:	95 e4       	ldi	r25, 0x45	; 69
    28ac:	0e 94 88 4a 	call	0x9510	; 0x9510 <strcat>
    28b0:	85 e8       	ldi	r24, 0x85	; 133
    28b2:	95 e4       	ldi	r25, 0x45	; 69
    28b4:	0e 94 9a 4a 	call	0x9534	; 0x9534 <strlen>
    28b8:	45 97       	sbiw	r24, 0x15	; 21
    28ba:	68 f4       	brcc	.+26     	; 0x28d6 <_Z19handleSerialBusMsgsv+0x558>
    28bc:	65 e8       	ldi	r22, 0x85	; 133
    28be:	75 e4       	ldi	r23, 0x45	; 69
    28c0:	8b ed       	ldi	r24, 0xDB	; 219
    28c2:	95 e4       	ldi	r25, 0x45	; 69
    28c4:	0e 94 93 4a 	call	0x9526	; 0x9526 <strcpy>
    28c8:	45 e8       	ldi	r20, 0x85	; 133
    28ca:	55 e4       	ldi	r21, 0x45	; 69
    28cc:	6a e0       	ldi	r22, 0x0A	; 10
    28ce:	80 e1       	ldi	r24, 0x10	; 16
    28d0:	96 e4       	ldi	r25, 0x46	; 70
    28d2:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    28d6:	80 91 db 45 	lds	r24, 0x45DB	; 0x8045db <g_messages_text+0x15>
    28da:	88 23       	and	r24, r24
    28dc:	01 f1       	breq	.+64     	; 0x291e <_Z19handleSerialBusMsgsv+0x5a0>
    28de:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    28e2:	88 2f       	mov	r24, r24
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	bc 01       	movw	r22, r24
    28e8:	8b ed       	ldi	r24, 0xDB	; 219
    28ea:	95 e4       	ldi	r25, 0x45	; 69
    28ec:	0e 94 5d 39 	call	0x72ba	; 0x72ba <_Z26timeRequiredToSendStrAtWPMPcj>
    28f0:	88 5a       	subi	r24, 0xA8	; 168
    28f2:	9d 4f       	sbci	r25, 0xFD	; 253
    28f4:	96 95       	lsr	r25
    28f6:	87 95       	ror	r24
    28f8:	96 95       	lsr	r25
    28fa:	87 95       	ror	r24
    28fc:	96 95       	lsr	r25
    28fe:	87 95       	ror	r24
    2900:	9c 01       	movw	r18, r24
    2902:	a5 ec       	ldi	r26, 0xC5	; 197
    2904:	b0 e2       	ldi	r27, 0x20	; 32
    2906:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <__umulhisi3>
    290a:	92 95       	swap	r25
    290c:	82 95       	swap	r24
    290e:	8f 70       	andi	r24, 0x0F	; 15
    2910:	89 27       	eor	r24, r25
    2912:	9f 70       	andi	r25, 0x0F	; 15
    2914:	89 27       	eor	r24, r25
    2916:	80 93 f0 45 	sts	0x45F0, r24	; 0x8045f0 <g_time_needed_for_ID>
    291a:	90 93 f1 45 	sts	0x45F1, r25	; 0x8045f1 <g_time_needed_for_ID+0x1>
    291e:	8b ed       	ldi	r24, 0xDB	; 219
    2920:	95 e4       	ldi	r25, 0x45	; 69
    2922:	89 2f       	mov	r24, r25
    2924:	8f 93       	push	r24
    2926:	8b ed       	ldi	r24, 0xDB	; 219
    2928:	95 e4       	ldi	r25, 0x45	; 69
    292a:	8f 93       	push	r24
    292c:	85 e5       	ldi	r24, 0x55	; 85
    292e:	92 e4       	ldi	r25, 0x42	; 66
    2930:	89 2f       	mov	r24, r25
    2932:	8f 93       	push	r24
    2934:	85 e5       	ldi	r24, 0x55	; 85
    2936:	92 e4       	ldi	r25, 0x42	; 66
    2938:	8f 93       	push	r24
    293a:	85 e8       	ldi	r24, 0x85	; 133
    293c:	95 e4       	ldi	r25, 0x45	; 69
    293e:	89 2f       	mov	r24, r25
    2940:	8f 93       	push	r24
    2942:	85 e8       	ldi	r24, 0x85	; 133
    2944:	95 e4       	ldi	r25, 0x45	; 69
    2946:	8f 93       	push	r24
    2948:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	85 e8       	ldi	r24, 0x85	; 133
    295a:	95 e4       	ldi	r25, 0x45	; 69
    295c:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2960:	87 c3       	rjmp	.+1806   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    2962:	8a 85       	ldd	r24, Y+10	; 0x0a
    2964:	9b 85       	ldd	r25, Y+11	; 0x0b
    2966:	fc 01       	movw	r30, r24
    2968:	83 81       	ldd	r24, Z+3	; 0x03
    296a:	83 35       	cpi	r24, 0x53	; 83
    296c:	09 f0       	breq	.+2      	; 0x2970 <_Z19handleSerialBusMsgsv+0x5f2>
    296e:	6f c0       	rjmp	.+222    	; 0x2a4e <_Z19handleSerialBusMsgsv+0x6d0>
    2970:	8a 85       	ldd	r24, Y+10	; 0x0a
    2972:	9b 85       	ldd	r25, Y+11	; 0x0b
    2974:	fc 01       	movw	r30, r24
    2976:	87 89       	ldd	r24, Z+23	; 0x17
    2978:	89 8f       	std	Y+25, r24	; 0x19
    297a:	89 8d       	ldd	r24, Y+25	; 0x19
    297c:	88 23       	and	r24, r24
    297e:	09 f4       	brne	.+2      	; 0x2982 <_Z19handleSerialBusMsgsv+0x604>
    2980:	48 c0       	rjmp	.+144    	; 0x2a12 <_Z19handleSerialBusMsgsv+0x694>
    2982:	8a 85       	ldd	r24, Y+10	; 0x0a
    2984:	9b 85       	ldd	r25, Y+11	; 0x0b
    2986:	47 96       	adiw	r24, 0x17	; 23
    2988:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	8a 8f       	std	Y+26, r24	; 0x1a
    2992:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2994:	8b 8f       	std	Y+27, r24	; 0x1b
    2996:	85 e0       	ldi	r24, 0x05	; 5
    2998:	8c 8f       	std	Y+28, r24	; 0x1c
    299a:	84 e1       	ldi	r24, 0x14	; 20
    299c:	8d 8f       	std	Y+29, r24	; 0x1d
    299e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a2:	89 17       	cp	r24, r25
    29a4:	40 f0       	brcs	.+16     	; 0x29b6 <_Z19handleSerialBusMsgsv+0x638>
    29a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29aa:	98 17       	cp	r25, r24
    29ac:	10 f4       	brcc	.+4      	; 0x29b2 <_Z19handleSerialBusMsgsv+0x634>
    29ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29b0:	03 c0       	rjmp	.+6      	; 0x29b8 <_Z19handleSerialBusMsgsv+0x63a>
    29b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b4:	01 c0       	rjmp	.+2      	; 0x29b8 <_Z19handleSerialBusMsgsv+0x63a>
    29b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29b8:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    29bc:	4b e0       	ldi	r20, 0x0B	; 11
    29be:	50 e4       	ldi	r21, 0x40	; 64
    29c0:	68 e2       	ldi	r22, 0x28	; 40
    29c2:	80 e1       	ldi	r24, 0x10	; 16
    29c4:	96 e4       	ldi	r25, 0x46	; 70
    29c6:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    29ca:	80 91 db 45 	lds	r24, 0x45DB	; 0x8045db <g_messages_text+0x15>
    29ce:	88 23       	and	r24, r24
    29d0:	01 f1       	breq	.+64     	; 0x2a12 <_Z19handleSerialBusMsgsv+0x694>
    29d2:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	bc 01       	movw	r22, r24
    29dc:	8b ed       	ldi	r24, 0xDB	; 219
    29de:	95 e4       	ldi	r25, 0x45	; 69
    29e0:	0e 94 5d 39 	call	0x72ba	; 0x72ba <_Z26timeRequiredToSendStrAtWPMPcj>
    29e4:	88 5a       	subi	r24, 0xA8	; 168
    29e6:	9d 4f       	sbci	r25, 0xFD	; 253
    29e8:	96 95       	lsr	r25
    29ea:	87 95       	ror	r24
    29ec:	96 95       	lsr	r25
    29ee:	87 95       	ror	r24
    29f0:	96 95       	lsr	r25
    29f2:	87 95       	ror	r24
    29f4:	9c 01       	movw	r18, r24
    29f6:	a5 ec       	ldi	r26, 0xC5	; 197
    29f8:	b0 e2       	ldi	r27, 0x20	; 32
    29fa:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <__umulhisi3>
    29fe:	92 95       	swap	r25
    2a00:	82 95       	swap	r24
    2a02:	8f 70       	andi	r24, 0x0F	; 15
    2a04:	89 27       	eor	r24, r25
    2a06:	9f 70       	andi	r25, 0x0F	; 15
    2a08:	89 27       	eor	r24, r25
    2a0a:	80 93 f0 45 	sts	0x45F0, r24	; 0x8045f0 <g_time_needed_for_ID>
    2a0e:	90 93 f1 45 	sts	0x45F1, r25	; 0x8045f1 <g_time_needed_for_ID+0x1>
    2a12:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2a16:	88 2f       	mov	r24, r24
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	29 2f       	mov	r18, r25
    2a1c:	2f 93       	push	r18
    2a1e:	8f 93       	push	r24
    2a20:	8c e5       	ldi	r24, 0x5C	; 92
    2a22:	92 e4       	ldi	r25, 0x42	; 66
    2a24:	89 2f       	mov	r24, r25
    2a26:	8f 93       	push	r24
    2a28:	8c e5       	ldi	r24, 0x5C	; 92
    2a2a:	92 e4       	ldi	r25, 0x42	; 66
    2a2c:	8f 93       	push	r24
    2a2e:	85 e8       	ldi	r24, 0x85	; 133
    2a30:	95 e4       	ldi	r25, 0x45	; 69
    2a32:	89 2f       	mov	r24, r25
    2a34:	8f 93       	push	r24
    2a36:	85 e8       	ldi	r24, 0x85	; 133
    2a38:	95 e4       	ldi	r25, 0x45	; 69
    2a3a:	8f 93       	push	r24
    2a3c:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	09 c0       	rjmp	.+18     	; 0x2a60 <_Z19handleSerialBusMsgsv+0x6e2>
    2a4e:	85 e0       	ldi	r24, 0x05	; 5
    2a50:	e0 e5       	ldi	r30, 0x50	; 80
    2a52:	f2 e4       	ldi	r31, 0x42	; 66
    2a54:	a5 e8       	ldi	r26, 0x85	; 133
    2a56:	b5 e4       	ldi	r27, 0x45	; 69
    2a58:	01 90       	ld	r0, Z+
    2a5a:	0d 92       	st	X+, r0
    2a5c:	8a 95       	dec	r24
    2a5e:	e1 f7       	brne	.-8      	; 0x2a58 <_Z19handleSerialBusMsgsv+0x6da>
    2a60:	85 e8       	ldi	r24, 0x85	; 133
    2a62:	95 e4       	ldi	r25, 0x45	; 69
    2a64:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2a68:	03 c3       	rjmp	.+1542   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    2a6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a6e:	fc 01       	movw	r30, r24
    2a70:	83 81       	ldd	r24, Z+3	; 0x03
    2a72:	88 23       	and	r24, r24
    2a74:	51 f1       	breq	.+84     	; 0x2aca <_Z19handleSerialBusMsgsv+0x74c>
    2a76:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a78:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a7a:	03 96       	adiw	r24, 0x03	; 3
    2a7c:	48 e0       	ldi	r20, 0x08	; 8
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	bc 01       	movw	r22, r24
    2a82:	85 e8       	ldi	r24, 0x85	; 133
    2a84:	95 e4       	ldi	r25, 0x45	; 69
    2a86:	0e 94 a3 4a 	call	0x9546	; 0x9546 <strncpy>
    2a8a:	10 92 8d 45 	sts	0x458D, r1	; 0x80458d <_ZL9g_tempStr+0x8>
    2a8e:	85 e8       	ldi	r24, 0x85	; 133
    2a90:	95 e4       	ldi	r25, 0x45	; 69
    2a92:	0e 94 22 46 	call	0x8c44	; 0x8c44 <_Z11only_digitsPc>
    2a96:	88 23       	and	r24, r24
    2a98:	41 f0       	breq	.+16     	; 0x2aaa <_Z19handleSerialBusMsgsv+0x72c>
    2a9a:	85 e8       	ldi	r24, 0x85	; 133
    2a9c:	95 e4       	ldi	r25, 0x45	; 69
    2a9e:	0e 94 9a 4a 	call	0x9534	; 0x9534 <strlen>
    2aa2:	04 97       	sbiw	r24, 0x04	; 4
    2aa4:	10 f0       	brcs	.+4      	; 0x2aaa <_Z19handleSerialBusMsgsv+0x72c>
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	01 c0       	rjmp	.+2      	; 0x2aac <_Z19handleSerialBusMsgsv+0x72e>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	88 23       	and	r24, r24
    2aae:	69 f0       	breq	.+26     	; 0x2aca <_Z19handleSerialBusMsgsv+0x74c>
    2ab0:	65 e8       	ldi	r22, 0x85	; 133
    2ab2:	75 e4       	ldi	r23, 0x45	; 69
    2ab4:	8a e1       	ldi	r24, 0x1A	; 26
    2ab6:	96 e4       	ldi	r25, 0x46	; 70
    2ab8:	0e 94 93 4a 	call	0x9526	; 0x9526 <strcpy>
    2abc:	4a e1       	ldi	r20, 0x1A	; 26
    2abe:	56 e4       	ldi	r21, 0x46	; 70
    2ac0:	6f e1       	ldi	r22, 0x1F	; 31
    2ac2:	80 e1       	ldi	r24, 0x10	; 16
    2ac4:	96 e4       	ldi	r25, 0x46	; 70
    2ac6:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2aca:	8a e1       	ldi	r24, 0x1A	; 26
    2acc:	96 e4       	ldi	r25, 0x46	; 70
    2ace:	89 2f       	mov	r24, r25
    2ad0:	8f 93       	push	r24
    2ad2:	8a e1       	ldi	r24, 0x1A	; 26
    2ad4:	96 e4       	ldi	r25, 0x46	; 70
    2ad6:	8f 93       	push	r24
    2ad8:	8e e6       	ldi	r24, 0x6E	; 110
    2ada:	92 e4       	ldi	r25, 0x42	; 66
    2adc:	89 2f       	mov	r24, r25
    2ade:	8f 93       	push	r24
    2ae0:	8e e6       	ldi	r24, 0x6E	; 110
    2ae2:	92 e4       	ldi	r25, 0x42	; 66
    2ae4:	8f 93       	push	r24
    2ae6:	85 e8       	ldi	r24, 0x85	; 133
    2ae8:	95 e4       	ldi	r25, 0x45	; 69
    2aea:	89 2f       	mov	r24, r25
    2aec:	8f 93       	push	r24
    2aee:	85 e8       	ldi	r24, 0x85	; 133
    2af0:	95 e4       	ldi	r25, 0x45	; 69
    2af2:	8f 93       	push	r24
    2af4:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	85 e8       	ldi	r24, 0x85	; 133
    2b06:	95 e4       	ldi	r25, 0x45	; 69
    2b08:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    2b0c:	b1 c2       	rjmp	.+1378   	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    2b0e:	19 86       	std	Y+9, r1	; 0x09
    2b10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b12:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b14:	fc 01       	movw	r30, r24
    2b16:	83 81       	ldd	r24, Z+3	; 0x03
    2b18:	84 35       	cpi	r24, 0x54	; 84
    2b1a:	09 f0       	breq	.+2      	; 0x2b1e <_Z19handleSerialBusMsgsv+0x7a0>
    2b1c:	c5 c0       	rjmp	.+394    	; 0x2ca8 <_Z19handleSerialBusMsgsv+0x92a>
    2b1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b22:	fc 01       	movw	r30, r24
    2b24:	87 89       	ldd	r24, Z+23	; 0x17
    2b26:	88 23       	and	r24, r24
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <_Z19handleSerialBusMsgsv+0x7ae>
    2b2a:	76 c0       	rjmp	.+236    	; 0x2c18 <_Z19handleSerialBusMsgsv+0x89a>
    2b2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b30:	47 96       	adiw	r24, 0x17	; 23
    2b32:	4c e0       	ldi	r20, 0x0C	; 12
    2b34:	50 e0       	ldi	r21, 0x00	; 0
    2b36:	bc 01       	movw	r22, r24
    2b38:	85 e8       	ldi	r24, 0x85	; 133
    2b3a:	95 e4       	ldi	r25, 0x45	; 69
    2b3c:	0e 94 a3 4a 	call	0x9546	; 0x9546 <strncpy>
    2b40:	10 92 91 45 	sts	0x4591, r1	; 0x804591 <_ZL9g_tempStr+0xc>
    2b44:	80 91 19 46 	lds	r24, 0x4619	; 0x804619 <g_utc_offset>
    2b48:	81 95       	neg	r24
    2b4a:	48 2f       	mov	r20, r24
    2b4c:	62 e2       	ldi	r22, 0x22	; 34
    2b4e:	76 e4       	ldi	r23, 0x46	; 70
    2b50:	85 e8       	ldi	r24, 0x85	; 133
    2b52:	95 e4       	ldi	r25, 0x45	; 69
    2b54:	0e 94 93 24 	call	0x4926	; 0x4926 <_Z18validateTimeStringPcPma>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	8e 8f       	std	Y+30, r24	; 0x1e
    2b5e:	9f 8f       	std	Y+31, r25	; 0x1f
    2b60:	a8 a3       	std	Y+32, r26	; 0x20
    2b62:	b9 a3       	std	Y+33, r27	; 0x21
    2b64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b66:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b68:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b6a:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b6c:	89 2b       	or	r24, r25
    2b6e:	8a 2b       	or	r24, r26
    2b70:	8b 2b       	or	r24, r27
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <_Z19handleSerialBusMsgsv+0x7f8>
    2b74:	96 c0       	rjmp	.+300    	; 0x2ca2 <_Z19handleSerialBusMsgsv+0x924>
    2b76:	60 e0       	ldi	r22, 0x00	; 0
    2b78:	85 e8       	ldi	r24, 0x85	; 133
    2b7a:	95 e4       	ldi	r25, 0x45	; 69
    2b7c:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <ds3231_set_date_time_arducon>
    2b80:	8a a3       	std	Y+34, r24	; 0x22
    2b82:	8a a1       	ldd	r24, Y+34	; 0x22
    2b84:	88 23       	and	r24, r24
    2b86:	51 f0       	breq	.+20     	; 0x2b9c <_Z19handleSerialBusMsgsv+0x81e>
    2b88:	88 e2       	ldi	r24, 0x28	; 40
    2b8a:	e2 e7       	ldi	r30, 0x72	; 114
    2b8c:	f0 e4       	ldi	r31, 0x40	; 64
    2b8e:	a5 e8       	ldi	r26, 0x85	; 133
    2b90:	b5 e4       	ldi	r27, 0x45	; 69
    2b92:	01 90       	ld	r0, Z+
    2b94:	0d 92       	st	X+, r0
    2b96:	8a 95       	dec	r24
    2b98:	e1 f7       	brne	.-8      	; 0x2b92 <_Z19handleSerialBusMsgsv+0x814>
    2b9a:	83 c0       	rjmp	.+262    	; 0x2ca2 <_Z19handleSerialBusMsgsv+0x924>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	80 93 22 46 	sts	0x4622, r24	; 0x804622 <g_current_epoch>
    2bac:	90 93 23 46 	sts	0x4623, r25	; 0x804623 <g_current_epoch+0x1>
    2bb0:	a0 93 24 46 	sts	0x4624, r26	; 0x804624 <g_current_epoch+0x2>
    2bb4:	b0 93 25 46 	sts	0x4625, r27	; 0x804625 <g_current_epoch+0x3>
    2bb8:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    2bbc:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    2bc0:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    2bc4:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    2bc8:	ae 01       	movw	r20, r28
    2bca:	44 5c       	subi	r20, 0xC4	; 196
    2bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bce:	22 e3       	ldi	r18, 0x32	; 50
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <convertEpochToTimeString>
    2bda:	29 2f       	mov	r18, r25
    2bdc:	2f 93       	push	r18
    2bde:	8f 93       	push	r24
    2be0:	86 e7       	ldi	r24, 0x76	; 118
    2be2:	92 e4       	ldi	r25, 0x42	; 66
    2be4:	89 2f       	mov	r24, r25
    2be6:	8f 93       	push	r24
    2be8:	86 e7       	ldi	r24, 0x76	; 118
    2bea:	92 e4       	ldi	r25, 0x42	; 66
    2bec:	8f 93       	push	r24
    2bee:	85 e8       	ldi	r24, 0x85	; 133
    2bf0:	95 e4       	ldi	r25, 0x45	; 69
    2bf2:	89 2f       	mov	r24, r25
    2bf4:	8f 93       	push	r24
    2bf6:	85 e8       	ldi	r24, 0x85	; 133
    2bf8:	95 e4       	ldi	r25, 0x45	; 69
    2bfa:	8f 93       	push	r24
    2bfc:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2c16:	45 c0       	rjmp	.+138    	; 0x2ca2 <_Z19handleSerialBusMsgsv+0x924>
    2c18:	ce 01       	movw	r24, r28
    2c1a:	cb 96       	adiw	r24, 0x3b	; 59
    2c1c:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	80 93 22 46 	sts	0x4622, r24	; 0x804622 <g_current_epoch>
    2c28:	90 93 23 46 	sts	0x4623, r25	; 0x804623 <g_current_epoch+0x1>
    2c2c:	a0 93 24 46 	sts	0x4624, r26	; 0x804624 <g_current_epoch+0x2>
    2c30:	b0 93 25 46 	sts	0x4625, r27	; 0x804625 <g_current_epoch+0x3>
    2c34:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c36:	88 23       	and	r24, r24
    2c38:	51 f0       	breq	.+20     	; 0x2c4e <_Z19handleSerialBusMsgsv+0x8d0>
    2c3a:	88 e2       	ldi	r24, 0x28	; 40
    2c3c:	e2 e7       	ldi	r30, 0x72	; 114
    2c3e:	f0 e4       	ldi	r31, 0x40	; 64
    2c40:	a5 e8       	ldi	r26, 0x85	; 133
    2c42:	b5 e4       	ldi	r27, 0x45	; 69
    2c44:	01 90       	ld	r0, Z+
    2c46:	0d 92       	st	X+, r0
    2c48:	8a 95       	dec	r24
    2c4a:	e1 f7       	brne	.-8      	; 0x2c44 <_Z19handleSerialBusMsgsv+0x8c6>
    2c4c:	2a c0       	rjmp	.+84     	; 0x2ca2 <_Z19handleSerialBusMsgsv+0x924>
    2c4e:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    2c52:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    2c56:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    2c5a:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    2c5e:	ae 01       	movw	r20, r28
    2c60:	44 5c       	subi	r20, 0xC4	; 196
    2c62:	5f 4f       	sbci	r21, 0xFF	; 255
    2c64:	22 e3       	ldi	r18, 0x32	; 50
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	bc 01       	movw	r22, r24
    2c6a:	cd 01       	movw	r24, r26
    2c6c:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <convertEpochToTimeString>
    2c70:	29 2f       	mov	r18, r25
    2c72:	2f 93       	push	r18
    2c74:	8f 93       	push	r24
    2c76:	86 e7       	ldi	r24, 0x76	; 118
    2c78:	92 e4       	ldi	r25, 0x42	; 66
    2c7a:	89 2f       	mov	r24, r25
    2c7c:	8f 93       	push	r24
    2c7e:	86 e7       	ldi	r24, 0x76	; 118
    2c80:	92 e4       	ldi	r25, 0x42	; 66
    2c82:	8f 93       	push	r24
    2c84:	85 e8       	ldi	r24, 0x85	; 133
    2c86:	95 e4       	ldi	r25, 0x45	; 69
    2c88:	89 2f       	mov	r24, r25
    2c8a:	8f 93       	push	r24
    2c8c:	85 e8       	ldi	r24, 0x85	; 133
    2c8e:	95 e4       	ldi	r25, 0x45	; 69
    2c90:	8f 93       	push	r24
    2c92:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	89 87       	std	Y+9, r24	; 0x09
    2ca6:	be c1       	rjmp	.+892    	; 0x3024 <_Z19handleSerialBusMsgsv+0xca6>
    2ca8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2caa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cac:	fc 01       	movw	r30, r24
    2cae:	83 81       	ldd	r24, Z+3	; 0x03
    2cb0:	83 35       	cpi	r24, 0x53	; 83
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <_Z19handleSerialBusMsgsv+0x938>
    2cb4:	be c0       	rjmp	.+380    	; 0x2e32 <_Z19handleSerialBusMsgsv+0xab4>
    2cb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cba:	47 96       	adiw	r24, 0x17	; 23
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	85 e8       	ldi	r24, 0x85	; 133
    2cc0:	95 e4       	ldi	r25, 0x45	; 69
    2cc2:	0e 94 93 4a 	call	0x9526	; 0x9526 <strcpy>
    2cc6:	80 91 19 46 	lds	r24, 0x4619	; 0x804619 <g_utc_offset>
    2cca:	81 95       	neg	r24
    2ccc:	48 2f       	mov	r20, r24
    2cce:	61 e1       	ldi	r22, 0x11	; 17
    2cd0:	76 e4       	ldi	r23, 0x46	; 70
    2cd2:	85 e8       	ldi	r24, 0x85	; 133
    2cd4:	95 e4       	ldi	r25, 0x45	; 69
    2cd6:	0e 94 93 24 	call	0x4926	; 0x4926 <_Z18validateTimeStringPcPma>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	8b a3       	std	Y+35, r24	; 0x23
    2ce0:	9c a3       	std	Y+36, r25	; 0x24
    2ce2:	ad a3       	std	Y+37, r26	; 0x25
    2ce4:	be a3       	std	Y+38, r27	; 0x26
    2ce6:	8b a1       	ldd	r24, Y+35	; 0x23
    2ce8:	9c a1       	ldd	r25, Y+36	; 0x24
    2cea:	ad a1       	ldd	r26, Y+37	; 0x25
    2cec:	be a1       	ldd	r27, Y+38	; 0x26
    2cee:	89 2b       	or	r24, r25
    2cf0:	8a 2b       	or	r24, r26
    2cf2:	8b 2b       	or	r24, r27
    2cf4:	09 f4       	brne	.+2      	; 0x2cf8 <_Z19handleSerialBusMsgsv+0x97a>
    2cf6:	70 c0       	rjmp	.+224    	; 0x2dd8 <_Z19handleSerialBusMsgsv+0xa5a>
    2cf8:	8b a1       	ldd	r24, Y+35	; 0x23
    2cfa:	9c a1       	ldd	r25, Y+36	; 0x24
    2cfc:	ad a1       	ldd	r26, Y+37	; 0x25
    2cfe:	be a1       	ldd	r27, Y+38	; 0x26
    2d00:	80 93 11 46 	sts	0x4611, r24	; 0x804611 <g_event_start_epoch>
    2d04:	90 93 12 46 	sts	0x4612, r25	; 0x804612 <g_event_start_epoch+0x1>
    2d08:	a0 93 13 46 	sts	0x4613, r26	; 0x804613 <g_event_start_epoch+0x2>
    2d0c:	b0 93 14 46 	sts	0x4614, r27	; 0x804614 <g_event_start_epoch+0x3>
    2d10:	41 e1       	ldi	r20, 0x11	; 17
    2d12:	56 e4       	ldi	r21, 0x46	; 70
    2d14:	62 e0       	ldi	r22, 0x02	; 2
    2d16:	80 e1       	ldi	r24, 0x10	; 16
    2d18:	96 e4       	ldi	r25, 0x46	; 70
    2d1a:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2d1e:	80 91 15 46 	lds	r24, 0x4615	; 0x804615 <g_event_finish_epoch>
    2d22:	90 91 16 46 	lds	r25, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    2d26:	a0 91 17 46 	lds	r26, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    2d2a:	b0 91 18 46 	lds	r27, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    2d2e:	8f a3       	std	Y+39, r24	; 0x27
    2d30:	98 a7       	std	Y+40, r25	; 0x28
    2d32:	a9 a7       	std	Y+41, r26	; 0x29
    2d34:	ba a7       	std	Y+42, r27	; 0x2a
    2d36:	80 91 11 46 	lds	r24, 0x4611	; 0x804611 <g_event_start_epoch>
    2d3a:	90 91 12 46 	lds	r25, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    2d3e:	a0 91 13 46 	lds	r26, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    2d42:	b0 91 14 46 	lds	r27, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    2d46:	80 58       	subi	r24, 0x80	; 128
    2d48:	9e 4a       	sbci	r25, 0xAE	; 174
    2d4a:	ae 4f       	sbci	r26, 0xFE	; 254
    2d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4e:	8b a7       	std	Y+43, r24	; 0x2b
    2d50:	9c a7       	std	Y+44, r25	; 0x2c
    2d52:	ad a7       	std	Y+45, r26	; 0x2d
    2d54:	be a7       	std	Y+46, r27	; 0x2e
    2d56:	2f a1       	ldd	r18, Y+39	; 0x27
    2d58:	38 a5       	ldd	r19, Y+40	; 0x28
    2d5a:	49 a5       	ldd	r20, Y+41	; 0x29
    2d5c:	5a a5       	ldd	r21, Y+42	; 0x2a
    2d5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d60:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d62:	ad a5       	ldd	r26, Y+45	; 0x2d
    2d64:	be a5       	ldd	r27, Y+46	; 0x2e
    2d66:	28 17       	cp	r18, r24
    2d68:	39 07       	cpc	r19, r25
    2d6a:	4a 07       	cpc	r20, r26
    2d6c:	5b 07       	cpc	r21, r27
    2d6e:	28 f4       	brcc	.+10     	; 0x2d7a <_Z19handleSerialBusMsgsv+0x9fc>
    2d70:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d72:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d74:	ad a5       	ldd	r26, Y+45	; 0x2d
    2d76:	be a5       	ldd	r27, Y+46	; 0x2e
    2d78:	04 c0       	rjmp	.+8      	; 0x2d82 <_Z19handleSerialBusMsgsv+0xa04>
    2d7a:	8f a1       	ldd	r24, Y+39	; 0x27
    2d7c:	98 a5       	ldd	r25, Y+40	; 0x28
    2d7e:	a9 a5       	ldd	r26, Y+41	; 0x29
    2d80:	ba a5       	ldd	r27, Y+42	; 0x2a
    2d82:	80 93 15 46 	sts	0x4615, r24	; 0x804615 <g_event_finish_epoch>
    2d86:	90 93 16 46 	sts	0x4616, r25	; 0x804616 <g_event_finish_epoch+0x1>
    2d8a:	a0 93 17 46 	sts	0x4617, r26	; 0x804617 <g_event_finish_epoch+0x2>
    2d8e:	b0 93 18 46 	sts	0x4618, r27	; 0x804618 <g_event_finish_epoch+0x3>
    2d92:	45 e1       	ldi	r20, 0x15	; 21
    2d94:	56 e4       	ldi	r21, 0x46	; 70
    2d96:	66 e0       	ldi	r22, 0x06	; 6
    2d98:	80 e1       	ldi	r24, 0x10	; 16
    2d9a:	96 e4       	ldi	r25, 0x46	; 70
    2d9c:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2da0:	63 e0       	ldi	r22, 0x03	; 3
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2daa:	20 91 11 46 	lds	r18, 0x4611	; 0x804611 <g_event_start_epoch>
    2dae:	30 91 12 46 	lds	r19, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    2db2:	40 91 13 46 	lds	r20, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    2db6:	50 91 14 46 	lds	r21, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    2dba:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    2dbe:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    2dc2:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    2dc6:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    2dca:	82 17       	cp	r24, r18
    2dcc:	93 07       	cpc	r25, r19
    2dce:	a4 07       	cpc	r26, r20
    2dd0:	b5 07       	cpc	r27, r21
    2dd2:	10 f4       	brcc	.+4      	; 0x2dd8 <_Z19handleSerialBusMsgsv+0xa5a>
    2dd4:	0e 94 33 22 	call	0x4466	; 0x4466 <_Z18startEventUsingRTCv>
    2dd8:	80 91 11 46 	lds	r24, 0x4611	; 0x804611 <g_event_start_epoch>
    2ddc:	90 91 12 46 	lds	r25, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    2de0:	a0 91 13 46 	lds	r26, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    2de4:	b0 91 14 46 	lds	r27, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    2de8:	ae 01       	movw	r20, r28
    2dea:	44 5c       	subi	r20, 0xC4	; 196
    2dec:	5f 4f       	sbci	r21, 0xFF	; 255
    2dee:	22 e3       	ldi	r18, 0x32	; 50
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	bc 01       	movw	r22, r24
    2df4:	cd 01       	movw	r24, r26
    2df6:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <convertEpochToTimeString>
    2dfa:	29 2f       	mov	r18, r25
    2dfc:	2f 93       	push	r18
    2dfe:	8f 93       	push	r24
    2e00:	80 e8       	ldi	r24, 0x80	; 128
    2e02:	92 e4       	ldi	r25, 0x42	; 66
    2e04:	89 2f       	mov	r24, r25
    2e06:	8f 93       	push	r24
    2e08:	80 e8       	ldi	r24, 0x80	; 128
    2e0a:	92 e4       	ldi	r25, 0x42	; 66
    2e0c:	8f 93       	push	r24
    2e0e:	85 e8       	ldi	r24, 0x85	; 133
    2e10:	95 e4       	ldi	r25, 0x45	; 69
    2e12:	89 2f       	mov	r24, r25
    2e14:	8f 93       	push	r24
    2e16:	85 e8       	ldi	r24, 0x85	; 133
    2e18:	95 e4       	ldi	r25, 0x45	; 69
    2e1a:	8f 93       	push	r24
    2e1c:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	89 87       	std	Y+9, r24	; 0x09
    2e30:	f9 c0       	rjmp	.+498    	; 0x3024 <_Z19handleSerialBusMsgsv+0xca6>
    2e32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e36:	fc 01       	movw	r30, r24
    2e38:	83 81       	ldd	r24, Z+3	; 0x03
    2e3a:	86 34       	cpi	r24, 0x46	; 70
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <_Z19handleSerialBusMsgsv+0xac2>
    2e3e:	7c c0       	rjmp	.+248    	; 0x2f38 <_Z19handleSerialBusMsgsv+0xbba>
    2e40:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e42:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e44:	47 96       	adiw	r24, 0x17	; 23
    2e46:	bc 01       	movw	r22, r24
    2e48:	85 e8       	ldi	r24, 0x85	; 133
    2e4a:	95 e4       	ldi	r25, 0x45	; 69
    2e4c:	0e 94 93 4a 	call	0x9526	; 0x9526 <strcpy>
    2e50:	80 91 19 46 	lds	r24, 0x4619	; 0x804619 <g_utc_offset>
    2e54:	81 95       	neg	r24
    2e56:	48 2f       	mov	r20, r24
    2e58:	65 e1       	ldi	r22, 0x15	; 21
    2e5a:	76 e4       	ldi	r23, 0x46	; 70
    2e5c:	85 e8       	ldi	r24, 0x85	; 133
    2e5e:	95 e4       	ldi	r25, 0x45	; 69
    2e60:	0e 94 93 24 	call	0x4926	; 0x4926 <_Z18validateTimeStringPcPma>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	8f a7       	std	Y+47, r24	; 0x2f
    2e6a:	98 ab       	std	Y+48, r25	; 0x30
    2e6c:	a9 ab       	std	Y+49, r26	; 0x31
    2e6e:	ba ab       	std	Y+50, r27	; 0x32
    2e70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e72:	98 a9       	ldd	r25, Y+48	; 0x30
    2e74:	a9 a9       	ldd	r26, Y+49	; 0x31
    2e76:	ba a9       	ldd	r27, Y+50	; 0x32
    2e78:	89 2b       	or	r24, r25
    2e7a:	8a 2b       	or	r24, r26
    2e7c:	8b 2b       	or	r24, r27
    2e7e:	79 f1       	breq	.+94     	; 0x2ede <_Z19handleSerialBusMsgsv+0xb60>
    2e80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e82:	98 a9       	ldd	r25, Y+48	; 0x30
    2e84:	a9 a9       	ldd	r26, Y+49	; 0x31
    2e86:	ba a9       	ldd	r27, Y+50	; 0x32
    2e88:	80 93 15 46 	sts	0x4615, r24	; 0x804615 <g_event_finish_epoch>
    2e8c:	90 93 16 46 	sts	0x4616, r25	; 0x804616 <g_event_finish_epoch+0x1>
    2e90:	a0 93 17 46 	sts	0x4617, r26	; 0x804617 <g_event_finish_epoch+0x2>
    2e94:	b0 93 18 46 	sts	0x4618, r27	; 0x804618 <g_event_finish_epoch+0x3>
    2e98:	45 e1       	ldi	r20, 0x15	; 21
    2e9a:	56 e4       	ldi	r21, 0x46	; 70
    2e9c:	66 e0       	ldi	r22, 0x06	; 6
    2e9e:	80 e1       	ldi	r24, 0x10	; 16
    2ea0:	96 e4       	ldi	r25, 0x46	; 70
    2ea2:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2ea6:	63 e0       	ldi	r22, 0x03	; 3
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2eb0:	20 91 11 46 	lds	r18, 0x4611	; 0x804611 <g_event_start_epoch>
    2eb4:	30 91 12 46 	lds	r19, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    2eb8:	40 91 13 46 	lds	r20, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    2ebc:	50 91 14 46 	lds	r21, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    2ec0:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    2ec4:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    2ec8:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    2ecc:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    2ed0:	82 17       	cp	r24, r18
    2ed2:	93 07       	cpc	r25, r19
    2ed4:	a4 07       	cpc	r26, r20
    2ed6:	b5 07       	cpc	r27, r21
    2ed8:	10 f4       	brcc	.+4      	; 0x2ede <_Z19handleSerialBusMsgsv+0xb60>
    2eda:	0e 94 33 22 	call	0x4466	; 0x4466 <_Z18startEventUsingRTCv>
    2ede:	80 91 15 46 	lds	r24, 0x4615	; 0x804615 <g_event_finish_epoch>
    2ee2:	90 91 16 46 	lds	r25, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    2ee6:	a0 91 17 46 	lds	r26, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    2eea:	b0 91 18 46 	lds	r27, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    2eee:	ae 01       	movw	r20, r28
    2ef0:	44 5c       	subi	r20, 0xC4	; 196
    2ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef4:	22 e3       	ldi	r18, 0x32	; 50
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <convertEpochToTimeString>
    2f00:	29 2f       	mov	r18, r25
    2f02:	2f 93       	push	r18
    2f04:	8f 93       	push	r24
    2f06:	8b e8       	ldi	r24, 0x8B	; 139
    2f08:	92 e4       	ldi	r25, 0x42	; 66
    2f0a:	89 2f       	mov	r24, r25
    2f0c:	8f 93       	push	r24
    2f0e:	8b e8       	ldi	r24, 0x8B	; 139
    2f10:	92 e4       	ldi	r25, 0x42	; 66
    2f12:	8f 93       	push	r24
    2f14:	85 e8       	ldi	r24, 0x85	; 133
    2f16:	95 e4       	ldi	r25, 0x45	; 69
    2f18:	89 2f       	mov	r24, r25
    2f1a:	8f 93       	push	r24
    2f1c:	85 e8       	ldi	r24, 0x85	; 133
    2f1e:	95 e4       	ldi	r25, 0x45	; 69
    2f20:	8f 93       	push	r24
    2f22:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	89 87       	std	Y+9, r24	; 0x09
    2f36:	76 c0       	rjmp	.+236    	; 0x3024 <_Z19handleSerialBusMsgsv+0xca6>
    2f38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	83 81       	ldd	r24, Z+3	; 0x03
    2f40:	8a 32       	cpi	r24, 0x2A	; 42
    2f42:	19 f4       	brne	.+6      	; 0x2f4a <_Z19handleSerialBusMsgsv+0xbcc>
    2f44:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <ds3231_sync2nearestMinute>
    2f48:	6d c0       	rjmp	.+218    	; 0x3024 <_Z19handleSerialBusMsgsv+0xca6>
    2f4a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <_Z23clockConfigurationCheckv>
    2f4e:	8b ab       	std	Y+51, r24	; 0x33
    2f50:	8b a9       	ldd	r24, Y+51	; 0x33
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	31 f0       	breq	.+12     	; 0x2f62 <_Z19handleSerialBusMsgsv+0xbe4>
    2f56:	8b a9       	ldd	r24, Y+51	; 0x33
    2f58:	85 30       	cpi	r24, 0x05	; 5
    2f5a:	19 f0       	breq	.+6      	; 0x2f62 <_Z19handleSerialBusMsgsv+0xbe4>
    2f5c:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z18reportConfigErrorsv>
    2f60:	61 c0       	rjmp	.+194    	; 0x3024 <_Z19handleSerialBusMsgsv+0xca6>
    2f62:	20 91 11 46 	lds	r18, 0x4611	; 0x804611 <g_event_start_epoch>
    2f66:	30 91 12 46 	lds	r19, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    2f6a:	40 91 13 46 	lds	r20, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    2f6e:	50 91 14 46 	lds	r21, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    2f72:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    2f76:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    2f7a:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    2f7e:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    2f82:	0f 2e       	mov	r0, r31
    2f84:	f7 e9       	ldi	r31, 0x97	; 151
    2f86:	ef 2e       	mov	r14, r31
    2f88:	f2 e4       	ldi	r31, 0x42	; 66
    2f8a:	ff 2e       	mov	r15, r31
    2f8c:	f0 2d       	mov	r31, r0
    2f8e:	04 ea       	ldi	r16, 0xA4	; 164
    2f90:	12 e4       	ldi	r17, 0x42	; 66
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z14reportTimeTillmmPKcS0_>
    2f9a:	20 91 15 46 	lds	r18, 0x4615	; 0x804615 <g_event_finish_epoch>
    2f9e:	30 91 16 46 	lds	r19, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    2fa2:	40 91 17 46 	lds	r20, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    2fa6:	50 91 18 46 	lds	r21, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    2faa:	80 91 11 46 	lds	r24, 0x4611	; 0x804611 <g_event_start_epoch>
    2fae:	90 91 12 46 	lds	r25, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    2fb2:	a0 91 13 46 	lds	r26, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    2fb6:	b0 91 14 46 	lds	r27, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    2fba:	e1 2c       	mov	r14, r1
    2fbc:	f1 2c       	mov	r15, r1
    2fbe:	00 eb       	ldi	r16, 0xB0	; 176
    2fc0:	12 e4       	ldi	r17, 0x42	; 66
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z14reportTimeTillmmPKcS0_>
    2fca:	20 91 11 46 	lds	r18, 0x4611	; 0x804611 <g_event_start_epoch>
    2fce:	30 91 12 46 	lds	r19, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    2fd2:	40 91 13 46 	lds	r20, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    2fd6:	50 91 14 46 	lds	r21, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    2fda:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    2fde:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    2fe2:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    2fe6:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    2fea:	28 17       	cp	r18, r24
    2fec:	39 07       	cpc	r19, r25
    2fee:	4a 07       	cpc	r20, r26
    2ff0:	5b 07       	cpc	r21, r27
    2ff2:	c0 f4       	brcc	.+48     	; 0x3024 <_Z19handleSerialBusMsgsv+0xca6>
    2ff4:	20 91 15 46 	lds	r18, 0x4615	; 0x804615 <g_event_finish_epoch>
    2ff8:	30 91 16 46 	lds	r19, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    2ffc:	40 91 17 46 	lds	r20, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    3000:	50 91 18 46 	lds	r21, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    3004:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    3008:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    300c:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    3010:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    3014:	e1 2c       	mov	r14, r1
    3016:	f1 2c       	mov	r15, r1
    3018:	08 eb       	ldi	r16, 0xB8	; 184
    301a:	12 e4       	ldi	r17, 0x42	; 66
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z14reportTimeTillmmPKcS0_>
    3024:	89 85       	ldd	r24, Y+9	; 0x09
    3026:	88 23       	and	r24, r24
    3028:	01 f1       	breq	.+64     	; 0x306a <_Z19handleSerialBusMsgsv+0xcec>
    302a:	85 e8       	ldi	r24, 0x85	; 133
    302c:	95 e4       	ldi	r25, 0x45	; 69
    302e:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    3032:	1b c0       	rjmp	.+54     	; 0x306a <_Z19handleSerialBusMsgsv+0xcec>
    3034:	8a 85       	ldd	r24, Y+10	; 0x0a
    3036:	9b 85       	ldd	r25, Y+11	; 0x0b
    3038:	fc 01       	movw	r30, r24
    303a:	83 81       	ldd	r24, Z+3	; 0x03
    303c:	83 34       	cpi	r24, 0x43	; 67
    303e:	b9 f4       	brne	.+46     	; 0x306e <_Z19handleSerialBusMsgsv+0xcf0>
    3040:	8a 85       	ldd	r24, Y+10	; 0x0a
    3042:	9b 85       	ldd	r25, Y+11	; 0x0b
    3044:	fc 01       	movw	r30, r24
    3046:	87 89       	ldd	r24, Z+23	; 0x17
    3048:	88 23       	and	r24, r24
    304a:	89 f0       	breq	.+34     	; 0x306e <_Z19handleSerialBusMsgsv+0xcf0>
    304c:	8a 85       	ldd	r24, Y+10	; 0x0a
    304e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3050:	47 96       	adiw	r24, 0x17	; 23
    3052:	0e 94 3b 4a 	call	0x9476	; 0x9476 <atoi>
    3056:	8c ab       	std	Y+52, r24	; 0x34
    3058:	9d ab       	std	Y+53, r25	; 0x35
    305a:	09 c0       	rjmp	.+18     	; 0x306e <_Z19handleSerialBusMsgsv+0xcf0>
    305c:	8e ee       	ldi	r24, 0xEE	; 238
    305e:	90 e4       	ldi	r25, 0x40	; 64
    3060:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    3064:	05 c0       	rjmp	.+10     	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    3066:	00 00       	nop
    3068:	03 c0       	rjmp	.+6      	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    306a:	00 00       	nop
    306c:	01 c0       	rjmp	.+2      	; 0x3070 <_Z19handleSerialBusMsgsv+0xcf2>
    306e:	00 00       	nop
    3070:	8a 85       	ldd	r24, Y+10	; 0x0a
    3072:	9b 85       	ldd	r25, Y+11	; 0x0b
    3074:	fc 01       	movw	r30, r24
    3076:	11 82       	std	Z+1, r1	; 0x01
    3078:	12 82       	std	Z+2, r1	; 0x02
    307a:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <sb_send_NewPrompt>
    307e:	8b c9       	rjmp	.-3306   	; 0x2396 <_Z19handleSerialBusMsgsv+0x18>
    3080:	00 00       	nop
    3082:	c3 59       	subi	r28, 0x93	; 147
    3084:	df 4f       	sbci	r29, 0xFF	; 255
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	de bf       	out	0x3e, r29	; 62
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	ff 90       	pop	r15
    3094:	ef 90       	pop	r14
    3096:	08 95       	ret

00003098 <_Z17handleLinkBusMsgsv>:
    3098:	ef 92       	push	r14
    309a:	ff 92       	push	r15
    309c:	0f 93       	push	r16
    309e:	1f 93       	push	r17
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	e3 97       	sbiw	r28, 0x33	; 51
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	89 83       	std	Y+1, r24	; 0x01
    30b2:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <_Z18nextFullLBRxBufferv>
    30b6:	8c 87       	std	Y+12, r24	; 0x0c
    30b8:	9d 87       	std	Y+13, r25	; 0x0d
    30ba:	21 e0       	ldi	r18, 0x01	; 1
    30bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    30be:	9d 85       	ldd	r25, Y+13	; 0x0d
    30c0:	89 2b       	or	r24, r25
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <_Z17handleLinkBusMsgsv+0x2e>
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	22 23       	and	r18, r18
    30c8:	09 f4       	brne	.+2      	; 0x30cc <_Z17handleLinkBusMsgsv+0x34>
    30ca:	8b c6       	rjmp	.+3350   	; 0x3de2 <_Z17handleLinkBusMsgsv+0xd4a>
    30cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    30ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    30d0:	fc 01       	movw	r30, r24
    30d2:	81 81       	ldd	r24, Z+1	; 0x01
    30d4:	92 81       	ldd	r25, Z+2	; 0x02
    30d6:	8e 87       	std	Y+14, r24	; 0x0e
    30d8:	9f 87       	std	Y+15, r25	; 0x0f
    30da:	8e 85       	ldd	r24, Y+14	; 0x0e
    30dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    30de:	82 38       	cpi	r24, 0x82	; 130
    30e0:	fe e1       	ldi	r31, 0x1E	; 30
    30e2:	9f 07       	cpc	r25, r31
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <_Z17handleLinkBusMsgsv+0x50>
    30e6:	71 c0       	rjmp	.+226    	; 0x31ca <_Z17handleLinkBusMsgsv+0x132>
    30e8:	83 38       	cpi	r24, 0x83	; 131
    30ea:	2e e1       	ldi	r18, 0x1E	; 30
    30ec:	92 07       	cpc	r25, r18
    30ee:	30 f5       	brcc	.+76     	; 0x313c <_Z17handleLinkBusMsgsv+0xa4>
    30f0:	81 36       	cpi	r24, 0x61	; 97
    30f2:	33 e0       	ldi	r19, 0x03	; 3
    30f4:	93 07       	cpc	r25, r19
    30f6:	09 f4       	brne	.+2      	; 0x30fa <_Z17handleLinkBusMsgsv+0x62>
    30f8:	de c4       	rjmp	.+2492   	; 0x3ab6 <_Z17handleLinkBusMsgsv+0xa1e>
    30fa:	82 36       	cpi	r24, 0x62	; 98
    30fc:	e3 e0       	ldi	r30, 0x03	; 3
    30fe:	9e 07       	cpc	r25, r30
    3100:	78 f4       	brcc	.+30     	; 0x3120 <_Z17handleLinkBusMsgsv+0x88>
    3102:	85 31       	cpi	r24, 0x15	; 21
    3104:	f3 e0       	ldi	r31, 0x03	; 3
    3106:	9f 07       	cpc	r25, r31
    3108:	09 f4       	brne	.+2      	; 0x310c <_Z17handleLinkBusMsgsv+0x74>
    310a:	1e c1       	rjmp	.+572    	; 0x3348 <_Z17handleLinkBusMsgsv+0x2b0>
    310c:	8e 31       	cpi	r24, 0x1E	; 30
    310e:	23 e0       	ldi	r18, 0x03	; 3
    3110:	92 07       	cpc	r25, r18
    3112:	09 f4       	brne	.+2      	; 0x3116 <_Z17handleLinkBusMsgsv+0x7e>
    3114:	45 c3       	rjmp	.+1674   	; 0x37a0 <_Z17handleLinkBusMsgsv+0x708>
    3116:	84 35       	cpi	r24, 0x54	; 84
    3118:	91 05       	cpc	r25, r1
    311a:	09 f4       	brne	.+2      	; 0x311e <_Z17handleLinkBusMsgsv+0x86>
    311c:	41 c4       	rjmp	.+2178   	; 0x39a0 <_Z17handleLinkBusMsgsv+0x908>
    311e:	36 c6       	rjmp	.+3180   	; 0x3d8c <_Z17handleLinkBusMsgsv+0xcf4>
    3120:	8f 3a       	cpi	r24, 0xAF	; 175
    3122:	33 e0       	ldi	r19, 0x03	; 3
    3124:	93 07       	cpc	r25, r19
    3126:	d1 f1       	breq	.+116    	; 0x319c <_Z17handleLinkBusMsgsv+0x104>
    3128:	86 3a       	cpi	r24, 0xA6	; 166
    312a:	ec e1       	ldi	r30, 0x1C	; 28
    312c:	9e 07       	cpc	r25, r30
    312e:	09 f4       	brne	.+2      	; 0x3132 <_Z17handleLinkBusMsgsv+0x9a>
    3130:	4d c5       	rjmp	.+2714   	; 0x3bcc <_Z17handleLinkBusMsgsv+0xb34>
    3132:	84 38       	cpi	r24, 0x84	; 132
    3134:	93 40       	sbci	r25, 0x03	; 3
    3136:	09 f4       	brne	.+2      	; 0x313a <_Z17handleLinkBusMsgsv+0xa2>
    3138:	cd c1       	rjmp	.+922    	; 0x34d4 <_Z17handleLinkBusMsgsv+0x43c>
    313a:	28 c6       	rjmp	.+3152   	; 0x3d8c <_Z17handleLinkBusMsgsv+0xcf4>
    313c:	8a 39       	cpi	r24, 0x9A	; 154
    313e:	23 e2       	ldi	r18, 0x23	; 35
    3140:	92 07       	cpc	r25, r18
    3142:	09 f4       	brne	.+2      	; 0x3146 <_Z17handleLinkBusMsgsv+0xae>
    3144:	41 c0       	rjmp	.+130    	; 0x31c8 <_Z17handleLinkBusMsgsv+0x130>
    3146:	8b 39       	cpi	r24, 0x9B	; 155
    3148:	33 e2       	ldi	r19, 0x23	; 35
    314a:	93 07       	cpc	r25, r19
    314c:	78 f4       	brcc	.+30     	; 0x316c <_Z17handleLinkBusMsgsv+0xd4>
    314e:	8d 3a       	cpi	r24, 0xAD	; 173
    3150:	e2 e2       	ldi	r30, 0x22	; 34
    3152:	9e 07       	cpc	r25, r30
    3154:	09 f4       	brne	.+2      	; 0x3158 <_Z17handleLinkBusMsgsv+0xc0>
    3156:	96 c0       	rjmp	.+300    	; 0x3284 <_Z17handleLinkBusMsgsv+0x1ec>
    3158:	81 3c       	cpi	r24, 0xC1	; 193
    315a:	f2 e2       	ldi	r31, 0x22	; 34
    315c:	9f 07       	cpc	r25, r31
    315e:	09 f4       	brne	.+2      	; 0x3162 <_Z17handleLinkBusMsgsv+0xca>
    3160:	ee c0       	rjmp	.+476    	; 0x333e <_Z17handleLinkBusMsgsv+0x2a6>
    3162:	81 3d       	cpi	r24, 0xD1	; 209
    3164:	9e 41       	sbci	r25, 0x1E	; 30
    3166:	09 f4       	brne	.+2      	; 0x316a <_Z17handleLinkBusMsgsv+0xd2>
    3168:	bd c4       	rjmp	.+2426   	; 0x3ae4 <_Z17handleLinkBusMsgsv+0xa4c>
    316a:	10 c6       	rjmp	.+3104   	; 0x3d8c <_Z17handleLinkBusMsgsv+0xcf4>
    316c:	80 3d       	cpi	r24, 0xD0	; 208
    316e:	33 e2       	ldi	r19, 0x23	; 35
    3170:	93 07       	cpc	r25, r19
    3172:	09 f4       	brne	.+2      	; 0x3176 <_Z17handleLinkBusMsgsv+0xde>
    3174:	78 c3       	rjmp	.+1776   	; 0x3866 <_Z17handleLinkBusMsgsv+0x7ce>
    3176:	81 3d       	cpi	r24, 0xD1	; 209
    3178:	e3 e2       	ldi	r30, 0x23	; 35
    317a:	9e 07       	cpc	r25, r30
    317c:	28 f4       	brcc	.+10     	; 0x3188 <_Z17handleLinkBusMsgsv+0xf0>
    317e:	8f 3c       	cpi	r24, 0xCF	; 207
    3180:	93 42       	sbci	r25, 0x23	; 35
    3182:	09 f4       	brne	.+2      	; 0x3186 <_Z17handleLinkBusMsgsv+0xee>
    3184:	eb c5       	rjmp	.+3030   	; 0x3d5c <_Z17handleLinkBusMsgsv+0xcc4>
    3186:	02 c6       	rjmp	.+3076   	; 0x3d8c <_Z17handleLinkBusMsgsv+0xcf4>
    3188:	87 3f       	cpi	r24, 0xF7	; 247
    318a:	23 e2       	ldi	r18, 0x23	; 35
    318c:	92 07       	cpc	r25, r18
    318e:	09 f4       	brne	.+2      	; 0x3192 <_Z17handleLinkBusMsgsv+0xfa>
    3190:	16 c2       	rjmp	.+1068   	; 0x35be <_Z17handleLinkBusMsgsv+0x526>
    3192:	8c 39       	cpi	r24, 0x9C	; 156
    3194:	94 42       	sbci	r25, 0x24	; 36
    3196:	09 f4       	brne	.+2      	; 0x319a <_Z17handleLinkBusMsgsv+0x102>
    3198:	f1 c5       	rjmp	.+3042   	; 0x3d7c <_Z17handleLinkBusMsgsv+0xce4>
    319a:	f8 c5       	rjmp	.+3056   	; 0x3d8c <_Z17handleLinkBusMsgsv+0xcf4>
    319c:	8c 85       	ldd	r24, Y+12	; 0x0c
    319e:	9d 85       	ldd	r25, Y+13	; 0x0d
    31a0:	fc 01       	movw	r30, r24
    31a2:	83 81       	ldd	r24, Z+3	; 0x03
    31a4:	88 23       	and	r24, r24
    31a6:	09 f4       	brne	.+2      	; 0x31aa <_Z17handleLinkBusMsgsv+0x112>
    31a8:	f7 c5       	rjmp	.+3054   	; 0x3d98 <_Z17handleLinkBusMsgsv+0xd00>
    31aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    31ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    31ae:	03 96       	adiw	r24, 0x03	; 3
    31b0:	0e 94 3b 4a 	call	0x9476	; 0x9476 <atoi>
    31b4:	21 e0       	ldi	r18, 0x01	; 1
    31b6:	89 2b       	or	r24, r25
    31b8:	09 f4       	brne	.+2      	; 0x31bc <_Z17handleLinkBusMsgsv+0x124>
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	28 8b       	std	Y+16, r18	; 0x10
    31be:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_Z15linkbus_disablev>
    31c2:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    31c6:	e8 c5       	rjmp	.+3024   	; 0x3d98 <_Z17handleLinkBusMsgsv+0xd00>
    31c8:	ff cf       	rjmp	.-2      	; 0x31c8 <_Z17handleLinkBusMsgsv+0x130>
    31ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    31cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    31ce:	fc 01       	movw	r30, r24
    31d0:	83 81       	ldd	r24, Z+3	; 0x03
    31d2:	89 8b       	std	Y+17, r24	; 0x11
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    31da:	89 89       	ldd	r24, Y+17	; 0x11
    31dc:	8a 35       	cpi	r24, 0x5A	; 90
    31de:	21 f4       	brne	.+8      	; 0x31e8 <_Z17handleLinkBusMsgsv+0x150>
    31e0:	88 e7       	ldi	r24, 0x78	; 120
    31e2:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    31e6:	da c5       	rjmp	.+2996   	; 0x3d9c <_Z17handleLinkBusMsgsv+0xd04>
    31e8:	89 89       	ldd	r24, Y+17	; 0x11
    31ea:	80 33       	cpi	r24, 0x30	; 48
    31ec:	b1 f5       	brne	.+108    	; 0x325a <_Z17handleLinkBusMsgsv+0x1c2>
    31ee:	80 91 ff 45 	lds	r24, 0x45FF	; 0x8045ff <g_waiting_for_next_event>
    31f2:	88 23       	and	r24, r24
    31f4:	39 f0       	breq	.+14     	; 0x3204 <_Z17handleLinkBusMsgsv+0x16c>
    31f6:	49 ec       	ldi	r20, 0xC9	; 201
    31f8:	52 e4       	ldi	r21, 0x42	; 66
    31fa:	6b ec       	ldi	r22, 0xCB	; 203
    31fc:	72 e4       	ldi	r23, 0x42	; 66
    31fe:	83 e0       	ldi	r24, 0x03	; 3
    3200:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	2b 2f       	mov	r18, r27
    3212:	2f 93       	push	r18
    3214:	2a 2f       	mov	r18, r26
    3216:	2f 93       	push	r18
    3218:	29 2f       	mov	r18, r25
    321a:	2f 93       	push	r18
    321c:	8f 93       	push	r24
    321e:	8f ec       	ldi	r24, 0xCF	; 207
    3220:	92 e4       	ldi	r25, 0x42	; 66
    3222:	89 2f       	mov	r24, r25
    3224:	8f 93       	push	r24
    3226:	8f ec       	ldi	r24, 0xCF	; 207
    3228:	92 e4       	ldi	r25, 0x42	; 66
    322a:	8f 93       	push	r24
    322c:	85 e8       	ldi	r24, 0x85	; 133
    322e:	95 e4       	ldi	r25, 0x45	; 69
    3230:	89 2f       	mov	r24, r25
    3232:	8f 93       	push	r24
    3234:	85 e8       	ldi	r24, 0x85	; 133
    3236:	95 e4       	ldi	r25, 0x45	; 69
    3238:	8f 93       	push	r24
    323a:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    323e:	2d b7       	in	r18, 0x3d	; 61
    3240:	3e b7       	in	r19, 0x3e	; 62
    3242:	28 5f       	subi	r18, 0xF8	; 248
    3244:	3f 4f       	sbci	r19, 0xFF	; 255
    3246:	cd bf       	out	0x3d, r28	; 61
    3248:	de bf       	out	0x3e, r29	; 62
    324a:	45 e8       	ldi	r20, 0x85	; 133
    324c:	55 e4       	ldi	r21, 0x45	; 69
    324e:	63 ed       	ldi	r22, 0xD3	; 211
    3250:	72 e4       	ldi	r23, 0x42	; 66
    3252:	83 e0       	ldi	r24, 0x03	; 3
    3254:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3258:	a1 c5       	rjmp	.+2882   	; 0x3d9c <_Z17handleLinkBusMsgsv+0xd04>
    325a:	89 89       	ldd	r24, Y+17	; 0x11
    325c:	83 33       	cpi	r24, 0x33	; 51
    325e:	09 f0       	breq	.+2      	; 0x3262 <_Z17handleLinkBusMsgsv+0x1ca>
    3260:	9d c5       	rjmp	.+2874   	; 0x3d9c <_Z17handleLinkBusMsgsv+0xd04>
    3262:	f8 94       	cli
    3264:	10 92 c3 45 	sts	0x45C3, r1	; 0x8045c3 <_ZL19g_wifi_enable_delay>
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    326e:	10 92 ff 45 	sts	0x45FF, r1	; 0x8045ff <g_waiting_for_next_event>
    3272:	10 92 fe 45 	sts	0x45FE, r1	; 0x8045fe <g_check_for_next_event>
    3276:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	80 93 c4 45 	sts	0x45C4, r24	; 0x8045c4 <_ZL20g_shutting_down_wifi>
    3280:	78 94       	sei
    3282:	8c c5       	rjmp	.+2840   	; 0x3d9c <_Z17handleLinkBusMsgsv+0xd04>
    3284:	8c 85       	ldd	r24, Y+12	; 0x0c
    3286:	9d 85       	ldd	r25, Y+13	; 0x0d
    3288:	fc 01       	movw	r30, r24
    328a:	83 81       	ldd	r24, Z+3	; 0x03
    328c:	88 23       	and	r24, r24
    328e:	09 f4       	brne	.+2      	; 0x3292 <_Z17handleLinkBusMsgsv+0x1fa>
    3290:	87 c5       	rjmp	.+2830   	; 0x3da0 <_Z17handleLinkBusMsgsv+0xd08>
    3292:	8c 85       	ldd	r24, Y+12	; 0x0c
    3294:	9d 85       	ldd	r25, Y+13	; 0x0d
    3296:	fc 01       	movw	r30, r24
    3298:	83 81       	ldd	r24, Z+3	; 0x03
    329a:	8d 34       	cpi	r24, 0x4D	; 77
    329c:	a9 f4       	brne	.+42     	; 0x32c8 <_Z17handleLinkBusMsgsv+0x230>
    329e:	8c 85       	ldd	r24, Y+12	; 0x0c
    32a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    32a2:	fc 01       	movw	r30, r24
    32a4:	80 8d       	ldd	r24, Z+24	; 0x18
    32a6:	88 23       	and	r24, r24
    32a8:	79 f0       	breq	.+30     	; 0x32c8 <_Z17handleLinkBusMsgsv+0x230>
    32aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    32ae:	48 96       	adiw	r24, 0x18	; 24
    32b0:	0e 94 3b 4a 	call	0x9476	; 0x9476 <atoi>
    32b4:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    32b8:	90 93 30 46 	sts	0x4630, r25	; 0x804630 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    32bc:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    32c0:	8f 5f       	subi	r24, 0xFF	; 255
    32c2:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    32c6:	09 c0       	rjmp	.+18     	; 0x32da <_Z17handleLinkBusMsgsv+0x242>
    32c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    32cc:	03 96       	adiw	r24, 0x03	; 3
    32ce:	0e 94 3b 4a 	call	0x9476	; 0x9476 <atoi>
    32d2:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    32d6:	90 93 30 46 	sts	0x4630, r25	; 0x804630 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    32da:	60 e0       	ldi	r22, 0x00	; 0
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	8f e2       	ldi	r24, 0x2F	; 47
    32e0:	96 e4       	ldi	r25, 0x46	; 70
    32e2:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <_Z15txSetParametersPjPb>
    32e6:	8a 8b       	std	Y+18, r24	; 0x12
    32e8:	8a 89       	ldd	r24, Y+18	; 0x12
    32ea:	88 23       	and	r24, r24
    32ec:	19 f0       	breq	.+6      	; 0x32f4 <_Z17handleLinkBusMsgsv+0x25c>
    32ee:	8a 89       	ldd	r24, Y+18	; 0x12
    32f0:	80 93 b7 45 	sts	0x45B7, r24	; 0x8045b7 <_ZL17g_last_error_code>
    32f4:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    32f8:	90 91 30 46 	lds	r25, 0x4630	; 0x804630 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    32fc:	29 2f       	mov	r18, r25
    32fe:	2f 93       	push	r18
    3300:	8f 93       	push	r24
    3302:	87 ed       	ldi	r24, 0xD7	; 215
    3304:	92 e4       	ldi	r25, 0x42	; 66
    3306:	89 2f       	mov	r24, r25
    3308:	8f 93       	push	r24
    330a:	87 ed       	ldi	r24, 0xD7	; 215
    330c:	92 e4       	ldi	r25, 0x42	; 66
    330e:	8f 93       	push	r24
    3310:	85 e8       	ldi	r24, 0x85	; 133
    3312:	95 e4       	ldi	r25, 0x45	; 69
    3314:	89 2f       	mov	r24, r25
    3316:	8f 93       	push	r24
    3318:	85 e8       	ldi	r24, 0x85	; 133
    331a:	95 e4       	ldi	r25, 0x45	; 69
    331c:	8f 93       	push	r24
    331e:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	45 e8       	ldi	r20, 0x85	; 133
    3330:	55 e4       	ldi	r21, 0x45	; 69
    3332:	6c ed       	ldi	r22, 0xDC	; 220
    3334:	72 e4       	ldi	r23, 0x42	; 66
    3336:	83 e0       	ldi	r24, 0x03	; 3
    3338:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_Z11lb_send_msg13LBMessageTypePKcPc>
    333c:	31 c5       	rjmp	.+2658   	; 0x3da0 <_Z17handleLinkBusMsgsv+0xd08>
    333e:	80 e1       	ldi	r24, 0x10	; 16
    3340:	96 e4       	ldi	r25, 0x46	; 70
    3342:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN13EepromManager13saveAllEEPROMEv>
    3346:	3f c5       	rjmp	.+2686   	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3348:	8c 85       	ldd	r24, Y+12	; 0x0c
    334a:	9d 85       	ldd	r25, Y+13	; 0x0d
    334c:	fc 01       	movw	r30, r24
    334e:	83 81       	ldd	r24, Z+3	; 0x03
    3350:	8b 8b       	std	Y+19, r24	; 0x13
    3352:	8b 89       	ldd	r24, Y+19	; 0x13
    3354:	81 33       	cpi	r24, 0x31	; 49
    3356:	21 f0       	breq	.+8      	; 0x3360 <_Z17handleLinkBusMsgsv+0x2c8>
    3358:	8b 89       	ldd	r24, Y+19	; 0x13
    335a:	82 33       	cpi	r24, 0x32	; 50
    335c:	09 f0       	breq	.+2      	; 0x3360 <_Z17handleLinkBusMsgsv+0x2c8>
    335e:	ae c0       	rjmp	.+348    	; 0x34bc <_Z17handleLinkBusMsgsv+0x424>
    3360:	0e 94 93 45 	call	0x8b26	; 0x8b26 <_Z18txIsAntennaForBandv>
    3364:	98 2f       	mov	r25, r24
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	89 27       	eor	r24, r25
    336a:	88 23       	and	r24, r24
    336c:	41 f0       	breq	.+16     	; 0x337e <_Z17handleLinkBusMsgsv+0x2e6>
    336e:	90 91 36 40 	lds	r25, 0x4036	; 0x804036 <g_tx_power_is_zero>
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	89 27       	eor	r24, r25
    3376:	88 23       	and	r24, r24
    3378:	11 f0       	breq	.+4      	; 0x337e <_Z17handleLinkBusMsgsv+0x2e6>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	01 c0       	rjmp	.+2      	; 0x3380 <_Z17handleLinkBusMsgsv+0x2e8>
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	88 23       	and	r24, r24
    3382:	21 f0       	breq	.+8      	; 0x338c <_Z17handleLinkBusMsgsv+0x2f4>
    3384:	87 ef       	ldi	r24, 0xF7	; 247
    3386:	80 93 b7 45 	sts	0x45B7, r24	; 0x8045b7 <_ZL17g_last_error_code>
    338a:	a2 c0       	rjmp	.+324    	; 0x34d0 <_Z17handleLinkBusMsgsv+0x438>
    338c:	8b 89       	ldd	r24, Y+19	; 0x13
    338e:	81 33       	cpi	r24, 0x31	; 49
    3390:	09 f0       	breq	.+2      	; 0x3394 <_Z17handleLinkBusMsgsv+0x2fc>
    3392:	64 c0       	rjmp	.+200    	; 0x345c <_Z17handleLinkBusMsgsv+0x3c4>
    3394:	0e 94 93 45 	call	0x8b26	; 0x8b26 <_Z18txIsAntennaForBandv>
    3398:	88 23       	and	r24, r24
    339a:	21 f4       	brne	.+8      	; 0x33a4 <_Z17handleLinkBusMsgsv+0x30c>
    339c:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    33a0:	88 23       	and	r24, r24
    33a2:	11 f0       	breq	.+4      	; 0x33a8 <_Z17handleLinkBusMsgsv+0x310>
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	01 c0       	rjmp	.+2      	; 0x33aa <_Z17handleLinkBusMsgsv+0x312>
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	88 23       	and	r24, r24
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <_Z17handleLinkBusMsgsv+0x318>
    33ae:	52 c0       	rjmp	.+164    	; 0x3454 <_Z17handleLinkBusMsgsv+0x3bc>
    33b0:	f8 94       	cli
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	8c a7       	std	Y+44, r24	; 0x2c
    33b6:	ce 01       	movw	r24, r28
    33b8:	8c 96       	adiw	r24, 0x2c	; 44
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	bc 01       	movw	r22, r24
    33c0:	86 ec       	ldi	r24, 0xC6	; 198
    33c2:	95 e4       	ldi	r25, 0x45	; 69
    33c4:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
    33c8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    33cc:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    33d0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    33d4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    33d8:	78 94       	sei
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	a0 e0       	ldi	r26, 0x00	; 0
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	80 93 f4 45 	sts	0x45F4, r24	; 0x8045f4 <g_event_start_time>
    33e6:	90 93 f5 45 	sts	0x45F5, r25	; 0x8045f5 <g_event_start_time+0x1>
    33ea:	a0 93 f6 45 	sts	0x45F6, r26	; 0x8045f6 <g_event_start_time+0x2>
    33ee:	b0 93 f7 45 	sts	0x45F7, r27	; 0x8045f7 <g_event_start_time+0x3>
    33f2:	8f ef       	ldi	r24, 0xFF	; 255
    33f4:	9f ef       	ldi	r25, 0xFF	; 255
    33f6:	dc 01       	movw	r26, r24
    33f8:	80 93 f8 45 	sts	0x45F8, r24	; 0x8045f8 <g_event_finish_time>
    33fc:	90 93 f9 45 	sts	0x45F9, r25	; 0x8045f9 <g_event_finish_time+0x1>
    3400:	a0 93 fa 45 	sts	0x45FA, r26	; 0x8045fa <g_event_finish_time+0x2>
    3404:	b0 93 fb 45 	sts	0x45FB, r27	; 0x8045fb <g_event_finish_time+0x3>
    3408:	8f e0       	ldi	r24, 0x0F	; 15
    340a:	97 e2       	ldi	r25, 0x27	; 39
    340c:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3410:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3414:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    3418:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    341c:	8f e0       	ldi	r24, 0x0F	; 15
    341e:	97 e2       	ldi	r25, 0x27	; 39
    3420:	a0 e0       	ldi	r26, 0x00	; 0
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    3428:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    342c:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    3430:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    3434:	8f ef       	ldi	r24, 0xFF	; 255
    3436:	9f ef       	ldi	r25, 0xFF	; 255
    3438:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    343c:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	80 93 fd 45 	sts	0x45FD, r24	; 0x8045fd <g_event_commenced>
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	80 93 fc 45 	sts	0x45FC, r24	; 0x8045fc <g_event_enabled>
    344c:	8d ef       	ldi	r24, 0xFD	; 253
    344e:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    3452:	3e c0       	rjmp	.+124    	; 0x34d0 <_Z17handleLinkBusMsgsv+0x438>
    3454:	87 ef       	ldi	r24, 0xF7	; 247
    3456:	80 93 b7 45 	sts	0x45B7, r24	; 0x8045b7 <_ZL17g_last_error_code>
    345a:	3a c0       	rjmp	.+116    	; 0x34d0 <_Z17handleLinkBusMsgsv+0x438>
    345c:	8b 89       	ldd	r24, Y+19	; 0x13
    345e:	82 33       	cpi	r24, 0x32	; 50
    3460:	b9 f5       	brne	.+110    	; 0x34d0 <_Z17handleLinkBusMsgsv+0x438>
    3462:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3466:	8e 30       	cpi	r24, 0x0E	; 14
    3468:	20 f4       	brcc	.+8      	; 0x3472 <_Z17handleLinkBusMsgsv+0x3da>
    346a:	8d ec       	ldi	r24, 0xCD	; 205
    346c:	80 93 b7 45 	sts	0x45B7, r24	; 0x8045b7 <_ZL17g_last_error_code>
    3470:	2f c0       	rjmp	.+94     	; 0x34d0 <_Z17handleLinkBusMsgsv+0x438>
    3472:	1d a6       	std	Y+45, r1	; 0x2d
    3474:	ce 01       	movw	r24, r28
    3476:	8d 96       	adiw	r24, 0x2d	; 45
    3478:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <_Z11launchEventP2SC>
    347c:	80 93 32 46 	sts	0x4632, r24	; 0x804632 <_ZZ17handleLinkBusMsgsvE2ec>
    3480:	80 91 00 46 	lds	r24, 0x4600	; 0x804600 <_ZL13g_go_to_sleep>
    3484:	88 23       	and	r24, r24
    3486:	31 f0       	breq	.+12     	; 0x3494 <_Z17handleLinkBusMsgsv+0x3fc>
    3488:	80 91 c5 45 	lds	r24, 0x45C5	; 0x8045c5 <_ZL11g_sleepType>
    348c:	88 23       	and	r24, r24
    348e:	11 f0       	breq	.+4      	; 0x3494 <_Z17handleLinkBusMsgsv+0x3fc>
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	01 c0       	rjmp	.+2      	; 0x3496 <_Z17handleLinkBusMsgsv+0x3fe>
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	88 23       	and	r24, r24
    3498:	29 f0       	breq	.+10     	; 0x34a4 <_Z17handleLinkBusMsgsv+0x40c>
    349a:	83 e0       	ldi	r24, 0x03	; 3
    349c:	80 93 c5 45 	sts	0x45C5, r24	; 0x8045c5 <_ZL11g_sleepType>
    34a0:	10 92 00 46 	sts	0x4600, r1	; 0x804600 <_ZL13g_go_to_sleep>
    34a4:	8c e3       	ldi	r24, 0x3C	; 60
    34a6:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    34aa:	80 91 32 46 	lds	r24, 0x4632	; 0x804632 <_ZZ17handleLinkBusMsgsvE2ec>
    34ae:	88 23       	and	r24, r24
    34b0:	79 f4       	brne	.+30     	; 0x34d0 <_Z17handleLinkBusMsgsv+0x438>
    34b2:	80 e1       	ldi	r24, 0x10	; 16
    34b4:	96 e4       	ldi	r25, 0x46	; 70
    34b6:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN13EepromManager13saveAllEEPROMEv>
    34ba:	0a c0       	rjmp	.+20     	; 0x34d0 <_Z17handleLinkBusMsgsv+0x438>
    34bc:	8b 89       	ldd	r24, Y+19	; 0x13
    34be:	80 33       	cpi	r24, 0x30	; 48
    34c0:	09 f0       	breq	.+2      	; 0x34c4 <_Z17handleLinkBusMsgsv+0x42c>
    34c2:	70 c4       	rjmp	.+2272   	; 0x3da4 <_Z17handleLinkBusMsgsv+0xd0c>
    34c4:	10 92 31 46 	sts	0x4631, r1	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    34c8:	8c ee       	ldi	r24, 0xEC	; 236
    34ca:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    34ce:	6a c4       	rjmp	.+2260   	; 0x3da4 <_Z17handleLinkBusMsgsv+0xd0c>
    34d0:	00 00       	nop
    34d2:	68 c4       	rjmp	.+2256   	; 0x3da4 <_Z17handleLinkBusMsgsv+0xd0c>
    34d4:	1a 82       	std	Y+2, r1	; 0x02
    34d6:	1b 82       	std	Y+3, r1	; 0x03
    34d8:	1c 82       	std	Y+4, r1	; 0x04
    34da:	1d 82       	std	Y+5, r1	; 0x05
    34dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    34de:	9d 85       	ldd	r25, Y+13	; 0x0d
    34e0:	fc 01       	movw	r30, r24
    34e2:	83 81       	ldd	r24, Z+3	; 0x03
    34e4:	83 35       	cpi	r24, 0x53	; 83
    34e6:	c1 f5       	brne	.+112    	; 0x3558 <_Z17handleLinkBusMsgsv+0x4c0>
    34e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    34ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    34ec:	fc 01       	movw	r30, r24
    34ee:	80 8d       	ldd	r24, Z+24	; 0x18
    34f0:	88 23       	and	r24, r24
    34f2:	59 f0       	breq	.+22     	; 0x350a <_Z17handleLinkBusMsgsv+0x472>
    34f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    34f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    34f8:	48 96       	adiw	r24, 0x18	; 24
    34fa:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	8a 83       	std	Y+2, r24	; 0x02
    3504:	9b 83       	std	Y+3, r25	; 0x03
    3506:	ac 83       	std	Y+4, r26	; 0x04
    3508:	bd 83       	std	Y+5, r27	; 0x05
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	9b 81       	ldd	r25, Y+3	; 0x03
    350e:	ac 81       	ldd	r26, Y+4	; 0x04
    3510:	bd 81       	ldd	r27, Y+5	; 0x05
    3512:	89 2b       	or	r24, r25
    3514:	8a 2b       	or	r24, r26
    3516:	8b 2b       	or	r24, r27
    3518:	09 f4       	brne	.+2      	; 0x351c <_Z17handleLinkBusMsgsv+0x484>
    351a:	46 c4       	rjmp	.+2188   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd10>
    351c:	8a 81       	ldd	r24, Y+2	; 0x02
    351e:	9b 81       	ldd	r25, Y+3	; 0x03
    3520:	ac 81       	ldd	r26, Y+4	; 0x04
    3522:	bd 81       	ldd	r27, Y+5	; 0x05
    3524:	80 93 f4 45 	sts	0x45F4, r24	; 0x8045f4 <g_event_start_time>
    3528:	90 93 f5 45 	sts	0x45F5, r25	; 0x8045f5 <g_event_start_time+0x1>
    352c:	a0 93 f6 45 	sts	0x45F6, r26	; 0x8045f6 <g_event_start_time+0x2>
    3530:	b0 93 f7 45 	sts	0x45F7, r27	; 0x8045f7 <g_event_start_time+0x3>
    3534:	f8 94       	cli
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	bc 01       	movw	r22, r24
    3544:	cd 01       	movw	r24, r26
    3546:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    354a:	78 94       	sei
    354c:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3550:	8f 5f       	subi	r24, 0xFF	; 255
    3552:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3556:	28 c4       	rjmp	.+2128   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd10>
    3558:	8c 85       	ldd	r24, Y+12	; 0x0c
    355a:	9d 85       	ldd	r25, Y+13	; 0x0d
    355c:	fc 01       	movw	r30, r24
    355e:	83 81       	ldd	r24, Z+3	; 0x03
    3560:	86 34       	cpi	r24, 0x46	; 70
    3562:	09 f0       	breq	.+2      	; 0x3566 <_Z17handleLinkBusMsgsv+0x4ce>
    3564:	21 c4       	rjmp	.+2114   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd10>
    3566:	8c 85       	ldd	r24, Y+12	; 0x0c
    3568:	9d 85       	ldd	r25, Y+13	; 0x0d
    356a:	fc 01       	movw	r30, r24
    356c:	80 8d       	ldd	r24, Z+24	; 0x18
    356e:	88 23       	and	r24, r24
    3570:	59 f0       	breq	.+22     	; 0x3588 <_Z17handleLinkBusMsgsv+0x4f0>
    3572:	8c 85       	ldd	r24, Y+12	; 0x0c
    3574:	9d 85       	ldd	r25, Y+13	; 0x0d
    3576:	48 96       	adiw	r24, 0x18	; 24
    3578:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	8a 83       	std	Y+2, r24	; 0x02
    3582:	9b 83       	std	Y+3, r25	; 0x03
    3584:	ac 83       	std	Y+4, r26	; 0x04
    3586:	bd 83       	std	Y+5, r27	; 0x05
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	9b 81       	ldd	r25, Y+3	; 0x03
    358c:	ac 81       	ldd	r26, Y+4	; 0x04
    358e:	bd 81       	ldd	r27, Y+5	; 0x05
    3590:	89 2b       	or	r24, r25
    3592:	8a 2b       	or	r24, r26
    3594:	8b 2b       	or	r24, r27
    3596:	09 f4       	brne	.+2      	; 0x359a <_Z17handleLinkBusMsgsv+0x502>
    3598:	07 c4       	rjmp	.+2062   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd10>
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	9b 81       	ldd	r25, Y+3	; 0x03
    359e:	ac 81       	ldd	r26, Y+4	; 0x04
    35a0:	bd 81       	ldd	r27, Y+5	; 0x05
    35a2:	80 93 f8 45 	sts	0x45F8, r24	; 0x8045f8 <g_event_finish_time>
    35a6:	90 93 f9 45 	sts	0x45F9, r25	; 0x8045f9 <g_event_finish_time+0x1>
    35aa:	a0 93 fa 45 	sts	0x45FA, r26	; 0x8045fa <g_event_finish_time+0x2>
    35ae:	b0 93 fb 45 	sts	0x45FB, r27	; 0x8045fb <g_event_finish_time+0x3>
    35b2:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35b6:	8f 5f       	subi	r24, 0xFF	; 255
    35b8:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35bc:	f5 c3       	rjmp	.+2026   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd10>
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    35c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    35c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    35c8:	fc 01       	movw	r30, r24
    35ca:	80 81       	ld	r24, Z
    35cc:	81 30       	cpi	r24, 0x01	; 1
    35ce:	09 f0       	breq	.+2      	; 0x35d2 <_Z17handleLinkBusMsgsv+0x53a>
    35d0:	4b c0       	rjmp	.+150    	; 0x3668 <_Z17handleLinkBusMsgsv+0x5d0>
    35d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    35d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    35d6:	fc 01       	movw	r30, r24
    35d8:	83 81       	ldd	r24, Z+3	; 0x03
    35da:	88 23       	and	r24, r24
    35dc:	d1 f0       	breq	.+52     	; 0x3612 <_Z17handleLinkBusMsgsv+0x57a>
    35de:	8c 85       	ldd	r24, Y+12	; 0x0c
    35e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    35e2:	03 96       	adiw	r24, 0x03	; 3
    35e4:	44 e1       	ldi	r20, 0x14	; 20
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	bc 01       	movw	r22, r24
    35ea:	85 e8       	ldi	r24, 0x85	; 133
    35ec:	95 e4       	ldi	r25, 0x45	; 69
    35ee:	0e 94 a3 4a 	call	0x9546	; 0x9546 <strncpy>
    35f2:	60 e0       	ldi	r22, 0x00	; 0
    35f4:	85 e8       	ldi	r24, 0x85	; 133
    35f6:	95 e4       	ldi	r25, 0x45	; 69
    35f8:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <ds3231_set_date_time>
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    3610:	cd c3       	rjmp	.+1946   	; 0x3dac <_Z17handleLinkBusMsgsv+0xd14>
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	2b 2f       	mov	r18, r27
    3620:	2f 93       	push	r18
    3622:	2a 2f       	mov	r18, r26
    3624:	2f 93       	push	r18
    3626:	29 2f       	mov	r18, r25
    3628:	2f 93       	push	r18
    362a:	8f 93       	push	r24
    362c:	8f ec       	ldi	r24, 0xCF	; 207
    362e:	92 e4       	ldi	r25, 0x42	; 66
    3630:	89 2f       	mov	r24, r25
    3632:	8f 93       	push	r24
    3634:	8f ec       	ldi	r24, 0xCF	; 207
    3636:	92 e4       	ldi	r25, 0x42	; 66
    3638:	8f 93       	push	r24
    363a:	85 e8       	ldi	r24, 0x85	; 133
    363c:	95 e4       	ldi	r25, 0x45	; 69
    363e:	89 2f       	mov	r24, r25
    3640:	8f 93       	push	r24
    3642:	85 e8       	ldi	r24, 0x85	; 133
    3644:	95 e4       	ldi	r25, 0x45	; 69
    3646:	8f 93       	push	r24
    3648:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    364c:	2d b7       	in	r18, 0x3d	; 61
    364e:	3e b7       	in	r19, 0x3e	; 62
    3650:	28 5f       	subi	r18, 0xF8	; 248
    3652:	3f 4f       	sbci	r19, 0xFF	; 255
    3654:	cd bf       	out	0x3d, r28	; 61
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	45 e8       	ldi	r20, 0x85	; 133
    365a:	55 e4       	ldi	r21, 0x45	; 69
    365c:	63 ed       	ldi	r22, 0xD3	; 211
    365e:	72 e4       	ldi	r23, 0x42	; 66
    3660:	83 e0       	ldi	r24, 0x03	; 3
    3662:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3666:	a2 c3       	rjmp	.+1860   	; 0x3dac <_Z17handleLinkBusMsgsv+0xd14>
    3668:	8c 85       	ldd	r24, Y+12	; 0x0c
    366a:	9d 85       	ldd	r25, Y+13	; 0x0d
    366c:	fc 01       	movw	r30, r24
    366e:	80 81       	ld	r24, Z
    3670:	82 30       	cpi	r24, 0x02	; 2
    3672:	09 f0       	breq	.+2      	; 0x3676 <_Z17handleLinkBusMsgsv+0x5de>
    3674:	9b c3       	rjmp	.+1846   	; 0x3dac <_Z17handleLinkBusMsgsv+0xd14>
    3676:	8c 85       	ldd	r24, Y+12	; 0x0c
    3678:	9d 85       	ldd	r25, Y+13	; 0x0d
    367a:	fc 01       	movw	r30, r24
    367c:	83 81       	ldd	r24, Z+3	; 0x03
    367e:	88 35       	cpi	r24, 0x58	; 88
    3680:	c9 f5       	brne	.+114    	; 0x36f4 <_Z17handleLinkBusMsgsv+0x65c>
    3682:	1c 8a       	std	Y+20, r1	; 0x14
    3684:	8c 85       	ldd	r24, Y+12	; 0x0c
    3686:	9d 85       	ldd	r25, Y+13	; 0x0d
    3688:	fc 01       	movw	r30, r24
    368a:	80 8d       	ldd	r24, Z+24	; 0x18
    368c:	88 23       	and	r24, r24
    368e:	51 f0       	breq	.+20     	; 0x36a4 <_Z17handleLinkBusMsgsv+0x60c>
    3690:	8c 85       	ldd	r24, Y+12	; 0x0c
    3692:	9d 85       	ldd	r25, Y+13	; 0x0d
    3694:	48 96       	adiw	r24, 0x18	; 24
    3696:	0e 94 3b 4a 	call	0x9476	; 0x9476 <atoi>
    369a:	8c 8b       	std	Y+20, r24	; 0x14
    369c:	8c 89       	ldd	r24, Y+20	; 0x14
    369e:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <ds3231_set_aging>
    36a2:	84 c3       	rjmp	.+1800   	; 0x3dac <_Z17handleLinkBusMsgsv+0xd14>
    36a4:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <ds3231_get_aging>
    36a8:	8c 8b       	std	Y+20, r24	; 0x14
    36aa:	8c 89       	ldd	r24, Y+20	; 0x14
    36ac:	08 2e       	mov	r0, r24
    36ae:	00 0c       	add	r0, r0
    36b0:	99 0b       	sbc	r25, r25
    36b2:	29 2f       	mov	r18, r25
    36b4:	2f 93       	push	r18
    36b6:	8f 93       	push	r24
    36b8:	80 ee       	ldi	r24, 0xE0	; 224
    36ba:	92 e4       	ldi	r25, 0x42	; 66
    36bc:	89 2f       	mov	r24, r25
    36be:	8f 93       	push	r24
    36c0:	80 ee       	ldi	r24, 0xE0	; 224
    36c2:	92 e4       	ldi	r25, 0x42	; 66
    36c4:	8f 93       	push	r24
    36c6:	85 e8       	ldi	r24, 0x85	; 133
    36c8:	95 e4       	ldi	r25, 0x45	; 69
    36ca:	89 2f       	mov	r24, r25
    36cc:	8f 93       	push	r24
    36ce:	85 e8       	ldi	r24, 0x85	; 133
    36d0:	95 e4       	ldi	r25, 0x45	; 69
    36d2:	8f 93       	push	r24
    36d4:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	45 e8       	ldi	r20, 0x85	; 133
    36e6:	55 e4       	ldi	r21, 0x45	; 69
    36e8:	63 ed       	ldi	r22, 0xD3	; 211
    36ea:	72 e4       	ldi	r23, 0x42	; 66
    36ec:	83 e0       	ldi	r24, 0x03	; 3
    36ee:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_Z11lb_send_msg13LBMessageTypePKcPc>
    36f2:	5c c3       	rjmp	.+1720   	; 0x3dac <_Z17handleLinkBusMsgsv+0xd14>
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	8d 8b       	std	Y+21, r24	; 0x15
    3702:	9e 8b       	std	Y+22, r25	; 0x16
    3704:	af 8b       	std	Y+23, r26	; 0x17
    3706:	b8 8f       	std	Y+24, r27	; 0x18
    3708:	8d 89       	ldd	r24, Y+21	; 0x15
    370a:	9e 89       	ldd	r25, Y+22	; 0x16
    370c:	af 89       	ldd	r26, Y+23	; 0x17
    370e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    3718:	80 91 33 46 	lds	r24, 0x4633	; 0x804633 <_ZZ17handleLinkBusMsgsvE8lastTime>
    371c:	90 91 34 46 	lds	r25, 0x4634	; 0x804634 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    3720:	a0 91 35 46 	lds	r26, 0x4635	; 0x804635 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    3724:	b0 91 36 46 	lds	r27, 0x4636	; 0x804636 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    3728:	2d 89       	ldd	r18, Y+21	; 0x15
    372a:	3e 89       	ldd	r19, Y+22	; 0x16
    372c:	4f 89       	ldd	r20, Y+23	; 0x17
    372e:	58 8d       	ldd	r21, Y+24	; 0x18
    3730:	28 17       	cp	r18, r24
    3732:	39 07       	cpc	r19, r25
    3734:	4a 07       	cpc	r20, r26
    3736:	5b 07       	cpc	r21, r27
    3738:	09 f4       	brne	.+2      	; 0x373c <_Z17handleLinkBusMsgsv+0x6a4>
    373a:	38 c3       	rjmp	.+1648   	; 0x3dac <_Z17handleLinkBusMsgsv+0xd14>
    373c:	88 8d       	ldd	r24, Y+24	; 0x18
    373e:	8f 93       	push	r24
    3740:	8f 89       	ldd	r24, Y+23	; 0x17
    3742:	8f 93       	push	r24
    3744:	8e 89       	ldd	r24, Y+22	; 0x16
    3746:	8f 93       	push	r24
    3748:	8d 89       	ldd	r24, Y+21	; 0x15
    374a:	8f 93       	push	r24
    374c:	8f ec       	ldi	r24, 0xCF	; 207
    374e:	92 e4       	ldi	r25, 0x42	; 66
    3750:	89 2f       	mov	r24, r25
    3752:	8f 93       	push	r24
    3754:	8f ec       	ldi	r24, 0xCF	; 207
    3756:	92 e4       	ldi	r25, 0x42	; 66
    3758:	8f 93       	push	r24
    375a:	85 e8       	ldi	r24, 0x85	; 133
    375c:	95 e4       	ldi	r25, 0x45	; 69
    375e:	89 2f       	mov	r24, r25
    3760:	8f 93       	push	r24
    3762:	85 e8       	ldi	r24, 0x85	; 133
    3764:	95 e4       	ldi	r25, 0x45	; 69
    3766:	8f 93       	push	r24
    3768:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    376c:	2d b7       	in	r18, 0x3d	; 61
    376e:	3e b7       	in	r19, 0x3e	; 62
    3770:	28 5f       	subi	r18, 0xF8	; 248
    3772:	3f 4f       	sbci	r19, 0xFF	; 255
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	45 e8       	ldi	r20, 0x85	; 133
    377a:	55 e4       	ldi	r21, 0x45	; 69
    377c:	63 ed       	ldi	r22, 0xD3	; 211
    377e:	72 e4       	ldi	r23, 0x42	; 66
    3780:	83 e0       	ldi	r24, 0x03	; 3
    3782:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3786:	8d 89       	ldd	r24, Y+21	; 0x15
    3788:	9e 89       	ldd	r25, Y+22	; 0x16
    378a:	af 89       	ldd	r26, Y+23	; 0x17
    378c:	b8 8d       	ldd	r27, Y+24	; 0x18
    378e:	80 93 33 46 	sts	0x4633, r24	; 0x804633 <_ZZ17handleLinkBusMsgsvE8lastTime>
    3792:	90 93 34 46 	sts	0x4634, r25	; 0x804634 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    3796:	a0 93 35 46 	sts	0x4635, r26	; 0x804635 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    379a:	b0 93 36 46 	sts	0x4636, r27	; 0x804636 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    379e:	06 c3       	rjmp	.+1548   	; 0x3dac <_Z17handleLinkBusMsgsv+0xd14>
    37a0:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    37a4:	8f 5f       	subi	r24, 0xFF	; 255
    37a6:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    37aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    37ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    37ae:	fc 01       	movw	r30, r24
    37b0:	83 81       	ldd	r24, Z+3	; 0x03
    37b2:	88 23       	and	r24, r24
    37b4:	81 f1       	breq	.+96     	; 0x3816 <_Z17handleLinkBusMsgsv+0x77e>
    37b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    37b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    37ba:	03 96       	adiw	r24, 0x03	; 3
    37bc:	44 e1       	ldi	r20, 0x14	; 20
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	bc 01       	movw	r22, r24
    37c2:	8b ed       	ldi	r24, 0xDB	; 219
    37c4:	95 e4       	ldi	r25, 0x45	; 69
    37c6:	0e 94 a3 4a 	call	0x9546	; 0x9546 <strncpy>
    37ca:	80 91 db 45 	lds	r24, 0x45DB	; 0x8045db <g_messages_text+0x15>
    37ce:	88 23       	and	r24, r24
    37d0:	09 f4       	brne	.+2      	; 0x37d4 <_Z17handleLinkBusMsgsv+0x73c>
    37d2:	ee c2       	rjmp	.+1500   	; 0x3db0 <_Z17handleLinkBusMsgsv+0xd18>
    37d4:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    37d8:	88 2f       	mov	r24, r24
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	bc 01       	movw	r22, r24
    37de:	8b ed       	ldi	r24, 0xDB	; 219
    37e0:	95 e4       	ldi	r25, 0x45	; 69
    37e2:	0e 94 5d 39 	call	0x72ba	; 0x72ba <_Z26timeRequiredToSendStrAtWPMPcj>
    37e6:	8c 50       	subi	r24, 0x0C	; 12
    37e8:	9e 4f       	sbci	r25, 0xFE	; 254
    37ea:	96 95       	lsr	r25
    37ec:	87 95       	ror	r24
    37ee:	96 95       	lsr	r25
    37f0:	87 95       	ror	r24
    37f2:	96 95       	lsr	r25
    37f4:	87 95       	ror	r24
    37f6:	9c 01       	movw	r18, r24
    37f8:	a5 ec       	ldi	r26, 0xC5	; 197
    37fa:	b0 e2       	ldi	r27, 0x20	; 32
    37fc:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <__umulhisi3>
    3800:	92 95       	swap	r25
    3802:	82 95       	swap	r24
    3804:	8f 70       	andi	r24, 0x0F	; 15
    3806:	89 27       	eor	r24, r25
    3808:	9f 70       	andi	r25, 0x0F	; 15
    380a:	89 27       	eor	r24, r25
    380c:	80 93 f0 45 	sts	0x45F0, r24	; 0x8045f0 <g_time_needed_for_ID>
    3810:	90 93 f1 45 	sts	0x45F1, r25	; 0x8045f1 <g_time_needed_for_ID+0x1>
    3814:	cd c2       	rjmp	.+1434   	; 0x3db0 <_Z17handleLinkBusMsgsv+0xd18>
    3816:	80 91 db 45 	lds	r24, 0x45DB	; 0x8045db <g_messages_text+0x15>
    381a:	88 23       	and	r24, r24
    381c:	09 f4       	brne	.+2      	; 0x3820 <_Z17handleLinkBusMsgsv+0x788>
    381e:	c8 c2       	rjmp	.+1424   	; 0x3db0 <_Z17handleLinkBusMsgsv+0xd18>
    3820:	8b ed       	ldi	r24, 0xDB	; 219
    3822:	95 e4       	ldi	r25, 0x45	; 69
    3824:	89 2f       	mov	r24, r25
    3826:	8f 93       	push	r24
    3828:	8b ed       	ldi	r24, 0xDB	; 219
    382a:	95 e4       	ldi	r25, 0x45	; 69
    382c:	8f 93       	push	r24
    382e:	85 ee       	ldi	r24, 0xE5	; 229
    3830:	92 e4       	ldi	r25, 0x42	; 66
    3832:	89 2f       	mov	r24, r25
    3834:	8f 93       	push	r24
    3836:	85 ee       	ldi	r24, 0xE5	; 229
    3838:	92 e4       	ldi	r25, 0x42	; 66
    383a:	8f 93       	push	r24
    383c:	85 e8       	ldi	r24, 0x85	; 133
    383e:	95 e4       	ldi	r25, 0x45	; 69
    3840:	89 2f       	mov	r24, r25
    3842:	8f 93       	push	r24
    3844:	85 e8       	ldi	r24, 0x85	; 133
    3846:	95 e4       	ldi	r25, 0x45	; 69
    3848:	8f 93       	push	r24
    384a:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    384e:	0f 90       	pop	r0
    3850:	0f 90       	pop	r0
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	85 e8       	ldi	r24, 0x85	; 133
    385c:	95 e4       	ldi	r25, 0x45	; 69
    385e:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <_Z12lb_send_textPc>
    3862:	19 82       	std	Y+1, r1	; 0x01
    3864:	a5 c2       	rjmp	.+1354   	; 0x3db0 <_Z17handleLinkBusMsgsv+0xd18>
    3866:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    386a:	89 8f       	std	Y+25, r24	; 0x19
    386c:	8c 85       	ldd	r24, Y+12	; 0x0c
    386e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3870:	fc 01       	movw	r30, r24
    3872:	83 81       	ldd	r24, Z+3	; 0x03
    3874:	89 34       	cpi	r24, 0x49	; 73
    3876:	09 f0       	breq	.+2      	; 0x387a <_Z17handleLinkBusMsgsv+0x7e2>
    3878:	4f c0       	rjmp	.+158    	; 0x3918 <_Z17handleLinkBusMsgsv+0x880>
    387a:	8c 85       	ldd	r24, Y+12	; 0x0c
    387c:	9d 85       	ldd	r25, Y+13	; 0x0d
    387e:	fc 01       	movw	r30, r24
    3880:	80 8d       	ldd	r24, Z+24	; 0x18
    3882:	88 23       	and	r24, r24
    3884:	09 f4       	brne	.+2      	; 0x3888 <_Z17handleLinkBusMsgsv+0x7f0>
    3886:	96 c2       	rjmp	.+1324   	; 0x3db4 <_Z17handleLinkBusMsgsv+0xd1c>
    3888:	8c 85       	ldd	r24, Y+12	; 0x0c
    388a:	9d 85       	ldd	r25, Y+13	; 0x0d
    388c:	48 96       	adiw	r24, 0x18	; 24
    388e:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    3892:	dc 01       	movw	r26, r24
    3894:	cb 01       	movw	r24, r22
    3896:	89 8f       	std	Y+25, r24	; 0x19
    3898:	89 8d       	ldd	r24, Y+25	; 0x19
    389a:	8a 8f       	std	Y+26, r24	; 0x1a
    389c:	85 e0       	ldi	r24, 0x05	; 5
    389e:	8b 8f       	std	Y+27, r24	; 0x1b
    38a0:	84 e1       	ldi	r24, 0x14	; 20
    38a2:	8c 8f       	std	Y+28, r24	; 0x1c
    38a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38a8:	89 17       	cp	r24, r25
    38aa:	40 f0       	brcs	.+16     	; 0x38bc <_Z17handleLinkBusMsgsv+0x824>
    38ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b0:	98 17       	cp	r25, r24
    38b2:	10 f4       	brcc	.+4      	; 0x38b8 <_Z17handleLinkBusMsgsv+0x820>
    38b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b6:	03 c0       	rjmp	.+6      	; 0x38be <_Z17handleLinkBusMsgsv+0x826>
    38b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38ba:	01 c0       	rjmp	.+2      	; 0x38be <_Z17handleLinkBusMsgsv+0x826>
    38bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38be:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    38c2:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    38c6:	8f 5f       	subi	r24, 0xFF	; 255
    38c8:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    38cc:	80 91 db 45 	lds	r24, 0x45DB	; 0x8045db <g_messages_text+0x15>
    38d0:	88 23       	and	r24, r24
    38d2:	09 f4       	brne	.+2      	; 0x38d6 <_Z17handleLinkBusMsgsv+0x83e>
    38d4:	6f c2       	rjmp	.+1246   	; 0x3db4 <_Z17handleLinkBusMsgsv+0xd1c>
    38d6:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    38da:	88 2f       	mov	r24, r24
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	bc 01       	movw	r22, r24
    38e0:	8b ed       	ldi	r24, 0xDB	; 219
    38e2:	95 e4       	ldi	r25, 0x45	; 69
    38e4:	0e 94 5d 39 	call	0x72ba	; 0x72ba <_Z26timeRequiredToSendStrAtWPMPcj>
    38e8:	8c 50       	subi	r24, 0x0C	; 12
    38ea:	9e 4f       	sbci	r25, 0xFE	; 254
    38ec:	96 95       	lsr	r25
    38ee:	87 95       	ror	r24
    38f0:	96 95       	lsr	r25
    38f2:	87 95       	ror	r24
    38f4:	96 95       	lsr	r25
    38f6:	87 95       	ror	r24
    38f8:	9c 01       	movw	r18, r24
    38fa:	a5 ec       	ldi	r26, 0xC5	; 197
    38fc:	b0 e2       	ldi	r27, 0x20	; 32
    38fe:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <__umulhisi3>
    3902:	92 95       	swap	r25
    3904:	82 95       	swap	r24
    3906:	8f 70       	andi	r24, 0x0F	; 15
    3908:	89 27       	eor	r24, r25
    390a:	9f 70       	andi	r25, 0x0F	; 15
    390c:	89 27       	eor	r24, r25
    390e:	80 93 f0 45 	sts	0x45F0, r24	; 0x8045f0 <g_time_needed_for_ID>
    3912:	90 93 f1 45 	sts	0x45F1, r25	; 0x8045f1 <g_time_needed_for_ID+0x1>
    3916:	4e c2       	rjmp	.+1180   	; 0x3db4 <_Z17handleLinkBusMsgsv+0xd1c>
    3918:	8c 85       	ldd	r24, Y+12	; 0x0c
    391a:	9d 85       	ldd	r25, Y+13	; 0x0d
    391c:	fc 01       	movw	r30, r24
    391e:	83 81       	ldd	r24, Z+3	; 0x03
    3920:	80 35       	cpi	r24, 0x50	; 80
    3922:	09 f0       	breq	.+2      	; 0x3926 <_Z17handleLinkBusMsgsv+0x88e>
    3924:	47 c2       	rjmp	.+1166   	; 0x3db4 <_Z17handleLinkBusMsgsv+0xd1c>
    3926:	8c 85       	ldd	r24, Y+12	; 0x0c
    3928:	9d 85       	ldd	r25, Y+13	; 0x0d
    392a:	fc 01       	movw	r30, r24
    392c:	80 8d       	ldd	r24, Z+24	; 0x18
    392e:	88 23       	and	r24, r24
    3930:	09 f4       	brne	.+2      	; 0x3934 <_Z17handleLinkBusMsgsv+0x89c>
    3932:	40 c2       	rjmp	.+1152   	; 0x3db4 <_Z17handleLinkBusMsgsv+0xd1c>
    3934:	8c 85       	ldd	r24, Y+12	; 0x0c
    3936:	9d 85       	ldd	r25, Y+13	; 0x0d
    3938:	48 96       	adiw	r24, 0x18	; 24
    393a:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	89 8f       	std	Y+25, r24	; 0x19
    3944:	89 8d       	ldd	r24, Y+25	; 0x19
    3946:	8d 8f       	std	Y+29, r24	; 0x1d
    3948:	85 e0       	ldi	r24, 0x05	; 5
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	8e 8f       	std	Y+30, r24	; 0x1e
    394e:	9f 8f       	std	Y+31, r25	; 0x1f
    3950:	84 e1       	ldi	r24, 0x14	; 20
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	88 a3       	std	Y+32, r24	; 0x20
    3956:	99 a3       	std	Y+33, r25	; 0x21
    3958:	8d 8d       	ldd	r24, Y+29	; 0x1d
    395a:	28 2f       	mov	r18, r24
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	88 a1       	ldd	r24, Y+32	; 0x20
    3960:	99 a1       	ldd	r25, Y+33	; 0x21
    3962:	82 17       	cp	r24, r18
    3964:	93 07       	cpc	r25, r19
    3966:	54 f0       	brlt	.+20     	; 0x397c <_Z17handleLinkBusMsgsv+0x8e4>
    3968:	8d 8d       	ldd	r24, Y+29	; 0x1d
    396a:	88 2f       	mov	r24, r24
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3970:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3972:	82 17       	cp	r24, r18
    3974:	93 07       	cpc	r25, r19
    3976:	24 f4       	brge	.+8      	; 0x3980 <_Z17handleLinkBusMsgsv+0x8e8>
    3978:	c9 01       	movw	r24, r18
    397a:	02 c0       	rjmp	.+4      	; 0x3980 <_Z17handleLinkBusMsgsv+0x8e8>
    397c:	88 a1       	ldd	r24, Y+32	; 0x20
    397e:	99 a1       	ldd	r25, Y+33	; 0x21
    3980:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    3984:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3988:	8f 5f       	subi	r24, 0xFF	; 255
    398a:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    398e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3992:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    3996:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    399a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    399e:	0a c2       	rjmp	.+1044   	; 0x3db4 <_Z17handleLinkBusMsgsv+0xd1c>
    39a0:	1a a2       	std	Y+34, r1	; 0x22
    39a2:	1b a2       	std	Y+35, r1	; 0x23
    39a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    39a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    39a8:	fc 01       	movw	r30, r24
    39aa:	83 81       	ldd	r24, Z+3	; 0x03
    39ac:	80 33       	cpi	r24, 0x30	; 48
    39ae:	e1 f4       	brne	.+56     	; 0x39e8 <_Z17handleLinkBusMsgsv+0x950>
    39b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    39b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    39b4:	fc 01       	movw	r30, r24
    39b6:	80 8d       	ldd	r24, Z+24	; 0x18
    39b8:	88 23       	and	r24, r24
    39ba:	09 f4       	brne	.+2      	; 0x39be <_Z17handleLinkBusMsgsv+0x926>
    39bc:	fd c1       	rjmp	.+1018   	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd20>
    39be:	8c 85       	ldd	r24, Y+12	; 0x0c
    39c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    39c2:	48 96       	adiw	r24, 0x18	; 24
    39c4:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	8a a3       	std	Y+34, r24	; 0x22
    39ce:	9b a3       	std	Y+35, r25	; 0x23
    39d0:	8a a1       	ldd	r24, Y+34	; 0x22
    39d2:	9b a1       	ldd	r25, Y+35	; 0x23
    39d4:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    39d8:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    39dc:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39e0:	8f 5f       	subi	r24, 0xFF	; 255
    39e2:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39e6:	e8 c1       	rjmp	.+976    	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd20>
    39e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    39ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    39ec:	fc 01       	movw	r30, r24
    39ee:	83 81       	ldd	r24, Z+3	; 0x03
    39f0:	81 33       	cpi	r24, 0x31	; 49
    39f2:	e1 f4       	brne	.+56     	; 0x3a2c <_Z17handleLinkBusMsgsv+0x994>
    39f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    39f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    39f8:	fc 01       	movw	r30, r24
    39fa:	80 8d       	ldd	r24, Z+24	; 0x18
    39fc:	88 23       	and	r24, r24
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <_Z17handleLinkBusMsgsv+0x96a>
    3a00:	db c1       	rjmp	.+950    	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd20>
    3a02:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a04:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a06:	48 96       	adiw	r24, 0x18	; 24
    3a08:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	8a a3       	std	Y+34, r24	; 0x22
    3a12:	9b a3       	std	Y+35, r25	; 0x23
    3a14:	8a a1       	ldd	r24, Y+34	; 0x22
    3a16:	9b a1       	ldd	r25, Y+35	; 0x23
    3a18:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3a1c:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3a20:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a24:	8f 5f       	subi	r24, 0xFF	; 255
    3a26:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a2a:	c6 c1       	rjmp	.+908    	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd20>
    3a2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a30:	fc 01       	movw	r30, r24
    3a32:	83 81       	ldd	r24, Z+3	; 0x03
    3a34:	89 34       	cpi	r24, 0x49	; 73
    3a36:	e1 f4       	brne	.+56     	; 0x3a70 <_Z17handleLinkBusMsgsv+0x9d8>
    3a38:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	80 8d       	ldd	r24, Z+24	; 0x18
    3a40:	88 23       	and	r24, r24
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <_Z17handleLinkBusMsgsv+0x9ae>
    3a44:	b9 c1       	rjmp	.+882    	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd20>
    3a46:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a48:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a4a:	48 96       	adiw	r24, 0x18	; 24
    3a4c:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	8a a3       	std	Y+34, r24	; 0x22
    3a56:	9b a3       	std	Y+35, r25	; 0x23
    3a58:	8a a1       	ldd	r24, Y+34	; 0x22
    3a5a:	9b a1       	ldd	r25, Y+35	; 0x23
    3a5c:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <g_ID_period_seconds>
    3a60:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <g_ID_period_seconds+0x1>
    3a64:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a68:	8f 5f       	subi	r24, 0xFF	; 255
    3a6a:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a6e:	a4 c1       	rjmp	.+840    	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd20>
    3a70:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a72:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a74:	fc 01       	movw	r30, r24
    3a76:	83 81       	ldd	r24, Z+3	; 0x03
    3a78:	84 34       	cpi	r24, 0x44	; 68
    3a7a:	09 f0       	breq	.+2      	; 0x3a7e <_Z17handleLinkBusMsgsv+0x9e6>
    3a7c:	9d c1       	rjmp	.+826    	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd20>
    3a7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a80:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a82:	fc 01       	movw	r30, r24
    3a84:	80 8d       	ldd	r24, Z+24	; 0x18
    3a86:	88 23       	and	r24, r24
    3a88:	09 f4       	brne	.+2      	; 0x3a8c <_Z17handleLinkBusMsgsv+0x9f4>
    3a8a:	96 c1       	rjmp	.+812    	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd20>
    3a8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a90:	48 96       	adiw	r24, 0x18	; 24
    3a92:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	8a a3       	std	Y+34, r24	; 0x22
    3a9c:	9b a3       	std	Y+35, r25	; 0x23
    3a9e:	8a a1       	ldd	r24, Y+34	; 0x22
    3aa0:	9b a1       	ldd	r25, Y+35	; 0x23
    3aa2:	80 93 f2 45 	sts	0x45F2, r24	; 0x8045f2 <g_intra_cycle_delay_time>
    3aa6:	90 93 f3 45 	sts	0x45F3, r25	; 0x8045f3 <g_intra_cycle_delay_time+0x1>
    3aaa:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3aae:	8f 5f       	subi	r24, 0xFF	; 255
    3ab0:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3ab4:	81 c1       	rjmp	.+770    	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd20>
    3ab6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ab8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aba:	fc 01       	movw	r30, r24
    3abc:	83 81       	ldd	r24, Z+3	; 0x03
    3abe:	88 23       	and	r24, r24
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <_Z17handleLinkBusMsgsv+0xa2c>
    3ac2:	7c c1       	rjmp	.+760    	; 0x3dbc <_Z17handleLinkBusMsgsv+0xd24>
    3ac4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ac6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ac8:	03 96       	adiw	r24, 0x03	; 3
    3aca:	44 e1       	ldi	r20, 0x14	; 20
    3acc:	50 e0       	ldi	r21, 0x00	; 0
    3ace:	bc 01       	movw	r22, r24
    3ad0:	86 ec       	ldi	r24, 0xC6	; 198
    3ad2:	95 e4       	ldi	r25, 0x45	; 69
    3ad4:	0e 94 a3 4a 	call	0x9546	; 0x9546 <strncpy>
    3ad8:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3adc:	8f 5f       	subi	r24, 0xFF	; 255
    3ade:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3ae2:	6c c1       	rjmp	.+728    	; 0x3dbc <_Z17handleLinkBusMsgsv+0xd24>
    3ae4:	1e 82       	std	Y+6, r1	; 0x06
    3ae6:	1f 82       	std	Y+7, r1	; 0x07
    3ae8:	18 86       	std	Y+8, r1	; 0x08
    3aea:	19 86       	std	Y+9, r1	; 0x09
    3aec:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aee:	9d 85       	ldd	r25, Y+13	; 0x0d
    3af0:	fc 01       	movw	r30, r24
    3af2:	83 81       	ldd	r24, Z+3	; 0x03
    3af4:	88 23       	and	r24, r24
    3af6:	99 f1       	breq	.+102    	; 0x3b5e <_Z17handleLinkBusMsgsv+0xac6>
    3af8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3afa:	9d 85       	ldd	r25, Y+13	; 0x0d
    3afc:	03 96       	adiw	r24, 0x03	; 3
    3afe:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <atol>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	80 93 37 46 	sts	0x4637, r24	; 0x804637 <_ZZ17handleLinkBusMsgsvE1f>
    3b0a:	90 93 38 46 	sts	0x4638, r25	; 0x804638 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3b0e:	a0 93 39 46 	sts	0x4639, r26	; 0x804639 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3b12:	b0 93 3a 46 	sts	0x463A, r27	; 0x80463a <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3b16:	80 91 37 46 	lds	r24, 0x4637	; 0x804637 <_ZZ17handleLinkBusMsgsvE1f>
    3b1a:	90 91 38 46 	lds	r25, 0x4638	; 0x804638 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3b1e:	a0 91 39 46 	lds	r26, 0x4639	; 0x804639 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3b22:	b0 91 3a 46 	lds	r27, 0x463A	; 0x80463a <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3b26:	8e a7       	std	Y+46, r24	; 0x2e
    3b28:	9f a7       	std	Y+47, r25	; 0x2f
    3b2a:	a8 ab       	std	Y+48, r26	; 0x30
    3b2c:	b9 ab       	std	Y+49, r27	; 0x31
    3b2e:	ce 01       	movw	r24, r28
    3b30:	8e 96       	adiw	r24, 0x2e	; 46
    3b32:	61 e0       	ldi	r22, 0x01	; 1
    3b34:	0e 94 9a 43 	call	0x8734	; 0x8734 <_Z14txSetFrequencyPmb>
    3b38:	98 2f       	mov	r25, r24
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	89 27       	eor	r24, r25
    3b3e:	88 23       	and	r24, r24
    3b40:	b1 f0       	breq	.+44     	; 0x3b6e <_Z17handleLinkBusMsgsv+0xad6>
    3b42:	8e a5       	ldd	r24, Y+46	; 0x2e
    3b44:	9f a5       	ldd	r25, Y+47	; 0x2f
    3b46:	a8 a9       	ldd	r26, Y+48	; 0x30
    3b48:	b9 a9       	ldd	r27, Y+49	; 0x31
    3b4a:	8e 83       	std	Y+6, r24	; 0x06
    3b4c:	9f 83       	std	Y+7, r25	; 0x07
    3b4e:	a8 87       	std	Y+8, r26	; 0x08
    3b50:	b9 87       	std	Y+9, r27	; 0x09
    3b52:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b56:	8f 5f       	subi	r24, 0xFF	; 255
    3b58:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b5c:	08 c0       	rjmp	.+16     	; 0x3b6e <_Z17handleLinkBusMsgsv+0xad6>
    3b5e:	0e 94 cc 43 	call	0x8798	; 0x8798 <_Z14txGetFrequencyv>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	8e 83       	std	Y+6, r24	; 0x06
    3b68:	9f 83       	std	Y+7, r25	; 0x07
    3b6a:	a8 87       	std	Y+8, r26	; 0x08
    3b6c:	b9 87       	std	Y+9, r27	; 0x09
    3b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b70:	9f 81       	ldd	r25, Y+7	; 0x07
    3b72:	a8 85       	ldd	r26, Y+8	; 0x08
    3b74:	b9 85       	ldd	r27, Y+9	; 0x09
    3b76:	89 2b       	or	r24, r25
    3b78:	8a 2b       	or	r24, r26
    3b7a:	8b 2b       	or	r24, r27
    3b7c:	09 f4       	brne	.+2      	; 0x3b80 <_Z17handleLinkBusMsgsv+0xae8>
    3b7e:	20 c1       	rjmp	.+576    	; 0x3dc0 <_Z17handleLinkBusMsgsv+0xd28>
    3b80:	89 85       	ldd	r24, Y+9	; 0x09
    3b82:	8f 93       	push	r24
    3b84:	88 85       	ldd	r24, Y+8	; 0x08
    3b86:	8f 93       	push	r24
    3b88:	8f 81       	ldd	r24, Y+7	; 0x07
    3b8a:	8f 93       	push	r24
    3b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b8e:	8f 93       	push	r24
    3b90:	8e ee       	ldi	r24, 0xEE	; 238
    3b92:	92 e4       	ldi	r25, 0x42	; 66
    3b94:	89 2f       	mov	r24, r25
    3b96:	8f 93       	push	r24
    3b98:	8e ee       	ldi	r24, 0xEE	; 238
    3b9a:	92 e4       	ldi	r25, 0x42	; 66
    3b9c:	8f 93       	push	r24
    3b9e:	85 e8       	ldi	r24, 0x85	; 133
    3ba0:	95 e4       	ldi	r25, 0x45	; 69
    3ba2:	89 2f       	mov	r24, r25
    3ba4:	8f 93       	push	r24
    3ba6:	85 e8       	ldi	r24, 0x85	; 133
    3ba8:	95 e4       	ldi	r25, 0x45	; 69
    3baa:	8f 93       	push	r24
    3bac:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    3bb0:	2d b7       	in	r18, 0x3d	; 61
    3bb2:	3e b7       	in	r19, 0x3e	; 62
    3bb4:	28 5f       	subi	r18, 0xF8	; 248
    3bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	de bf       	out	0x3e, r29	; 62
    3bbc:	45 e8       	ldi	r20, 0x85	; 133
    3bbe:	55 e4       	ldi	r21, 0x45	; 69
    3bc0:	63 ef       	ldi	r22, 0xF3	; 243
    3bc2:	72 e4       	ldi	r23, 0x42	; 66
    3bc4:	83 e0       	ldi	r24, 0x03	; 3
    3bc6:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3bca:	fa c0       	rjmp	.+500    	; 0x3dc0 <_Z17handleLinkBusMsgsv+0xd28>
    3bcc:	80 91 06 46 	lds	r24, 0x4606	; 0x804606 <_ZL22g_lastConversionResult>
    3bd0:	90 91 07 46 	lds	r25, 0x4607	; 0x804607 <_ZL22g_lastConversionResult+0x1>
    3bd4:	21 e0       	ldi	r18, 0x01	; 1
    3bd6:	8d 38       	cpi	r24, 0x8D	; 141
    3bd8:	92 40       	sbci	r25, 0x02	; 2
    3bda:	08 f4       	brcc	.+2      	; 0x3bde <_Z17handleLinkBusMsgsv+0xb46>
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	22 23       	and	r18, r18
    3be0:	09 f4       	brne	.+2      	; 0x3be4 <_Z17handleLinkBusMsgsv+0xb4c>
    3be2:	7c c0       	rjmp	.+248    	; 0x3cdc <_Z17handleLinkBusMsgsv+0xc44>
    3be4:	80 91 06 46 	lds	r24, 0x4606	; 0x804606 <_ZL22g_lastConversionResult>
    3be8:	90 91 07 46 	lds	r25, 0x4607	; 0x804607 <_ZL22g_lastConversionResult+0x1>
    3bec:	cc 01       	movw	r24, r24
    3bee:	a0 e0       	ldi	r26, 0x00	; 0
    3bf0:	b0 e0       	ldi	r27, 0x00	; 0
    3bf2:	9c 01       	movw	r18, r24
    3bf4:	ad 01       	movw	r20, r26
    3bf6:	60 ea       	ldi	r22, 0xA0	; 160
    3bf8:	78 e6       	ldi	r23, 0x68	; 104
    3bfa:	86 e0       	ldi	r24, 0x06	; 6
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0e 94 6f 48 	call	0x90de	; 0x90de <__mulsi3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	7c 01       	movw	r14, r24
    3c08:	8d 01       	movw	r16, r26
    3c0a:	ed e7       	ldi	r30, 0x7D	; 125
    3c0c:	fe 1a       	sub	r15, r30
    3c0e:	0c 40       	sbci	r16, 0x0C	; 12
    3c10:	1e 4f       	sbci	r17, 0xFE	; 254
    3c12:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3c16:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3c1a:	cc 01       	movw	r24, r24
    3c1c:	a0 e0       	ldi	r26, 0x00	; 0
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	9c 01       	movw	r18, r24
    3c22:	ad 01       	movw	r20, r26
    3c24:	64 e6       	ldi	r22, 0x64	; 100
    3c26:	70 e7       	ldi	r23, 0x70	; 112
    3c28:	8e ef       	ldi	r24, 0xFE	; 254
    3c2a:	9f ef       	ldi	r25, 0xFF	; 255
    3c2c:	0e 94 6f 48 	call	0x90de	; 0x90de <__mulsi3>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	e8 0e       	add	r14, r24
    3c36:	f9 1e       	adc	r15, r25
    3c38:	0a 1f       	adc	r16, r26
    3c3a:	1b 1f       	adc	r17, r27
    3c3c:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3c40:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3c44:	cc 01       	movw	r24, r24
    3c46:	a0 e0       	ldi	r26, 0x00	; 0
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	28 e6       	ldi	r18, 0x68	; 104
    3c4c:	30 e1       	ldi	r19, 0x10	; 16
    3c4e:	40 e0       	ldi	r20, 0x00	; 0
    3c50:	50 e0       	ldi	r21, 0x00	; 0
    3c52:	28 1b       	sub	r18, r24
    3c54:	39 0b       	sbc	r19, r25
    3c56:	4a 0b       	sbc	r20, r26
    3c58:	5b 0b       	sbc	r21, r27
    3c5a:	8f ef       	ldi	r24, 0xFF	; 255
    3c5c:	93 e0       	ldi	r25, 0x03	; 3
    3c5e:	dc 01       	movw	r26, r24
    3c60:	0e 94 07 49 	call	0x920e	; 0x920e <__muluhisi3>
    3c64:	9b 01       	movw	r18, r22
    3c66:	ac 01       	movw	r20, r24
    3c68:	c8 01       	movw	r24, r16
    3c6a:	b7 01       	movw	r22, r14
    3c6c:	0e 94 c9 48 	call	0x9192	; 0x9192 <__divmodsi4>
    3c70:	da 01       	movw	r26, r20
    3c72:	c9 01       	movw	r24, r18
    3c74:	8c a3       	std	Y+36, r24	; 0x24
    3c76:	9d a3       	std	Y+37, r25	; 0x25
    3c78:	ae a3       	std	Y+38, r26	; 0x26
    3c7a:	bf a3       	std	Y+39, r27	; 0x27
    3c7c:	18 a6       	std	Y+40, r1	; 0x28
    3c7e:	19 a6       	std	Y+41, r1	; 0x29
    3c80:	84 e6       	ldi	r24, 0x64	; 100
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	8a a7       	std	Y+42, r24	; 0x2a
    3c86:	9b a7       	std	Y+43, r25	; 0x2b
    3c88:	8a a5       	ldd	r24, Y+42	; 0x2a
    3c8a:	9b a5       	ldd	r25, Y+43	; 0x2b
    3c8c:	9c 01       	movw	r18, r24
    3c8e:	99 0f       	add	r25, r25
    3c90:	44 0b       	sbc	r20, r20
    3c92:	55 0b       	sbc	r21, r21
    3c94:	8c a1       	ldd	r24, Y+36	; 0x24
    3c96:	9d a1       	ldd	r25, Y+37	; 0x25
    3c98:	ae a1       	ldd	r26, Y+38	; 0x26
    3c9a:	bf a1       	ldd	r27, Y+39	; 0x27
    3c9c:	28 17       	cp	r18, r24
    3c9e:	39 07       	cpc	r19, r25
    3ca0:	4a 07       	cpc	r20, r26
    3ca2:	5b 07       	cpc	r21, r27
    3ca4:	3c f4       	brge	.+14     	; 0x3cb4 <_Z17handleLinkBusMsgsv+0xc1c>
    3ca6:	8a a5       	ldd	r24, Y+42	; 0x2a
    3ca8:	9b a5       	ldd	r25, Y+43	; 0x2b
    3caa:	09 2e       	mov	r0, r25
    3cac:	00 0c       	add	r0, r0
    3cae:	aa 0b       	sbc	r26, r26
    3cb0:	bb 0b       	sbc	r27, r27
    3cb2:	11 c0       	rjmp	.+34     	; 0x3cd6 <_Z17handleLinkBusMsgsv+0xc3e>
    3cb4:	88 a5       	ldd	r24, Y+40	; 0x28
    3cb6:	99 a5       	ldd	r25, Y+41	; 0x29
    3cb8:	09 2e       	mov	r0, r25
    3cba:	00 0c       	add	r0, r0
    3cbc:	aa 0b       	sbc	r26, r26
    3cbe:	bb 0b       	sbc	r27, r27
    3cc0:	2c a1       	ldd	r18, Y+36	; 0x24
    3cc2:	3d a1       	ldd	r19, Y+37	; 0x25
    3cc4:	4e a1       	ldd	r20, Y+38	; 0x26
    3cc6:	5f a1       	ldd	r21, Y+39	; 0x27
    3cc8:	82 17       	cp	r24, r18
    3cca:	93 07       	cpc	r25, r19
    3ccc:	a4 07       	cpc	r26, r20
    3cce:	b5 07       	cpc	r27, r21
    3cd0:	14 f4       	brge	.+4      	; 0x3cd6 <_Z17handleLinkBusMsgsv+0xc3e>
    3cd2:	da 01       	movw	r26, r20
    3cd4:	c9 01       	movw	r24, r18
    3cd6:	8a 87       	std	Y+10, r24	; 0x0a
    3cd8:	9b 87       	std	Y+11, r25	; 0x0b
    3cda:	2f c0       	rjmp	.+94     	; 0x3d3a <_Z17handleLinkBusMsgsv+0xca2>
    3cdc:	80 91 0a 46 	lds	r24, 0x460A	; 0x80460a <_ZL22g_lastConversionResult+0x4>
    3ce0:	90 91 0b 46 	lds	r25, 0x460B	; 0x80460b <_ZL22g_lastConversionResult+0x5>
    3ce4:	9c 01       	movw	r18, r24
    3ce6:	40 e0       	ldi	r20, 0x00	; 0
    3ce8:	50 e0       	ldi	r21, 0x00	; 0
    3cea:	da 01       	movw	r26, r20
    3cec:	c9 01       	movw	r24, r18
    3cee:	88 0f       	add	r24, r24
    3cf0:	99 1f       	adc	r25, r25
    3cf2:	aa 1f       	adc	r26, r26
    3cf4:	bb 1f       	adc	r27, r27
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	aa 1f       	adc	r26, r26
    3cfc:	bb 1f       	adc	r27, r27
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	aa 1f       	adc	r26, r26
    3d04:	bb 1f       	adc	r27, r27
    3d06:	82 1b       	sub	r24, r18
    3d08:	93 0b       	sbc	r25, r19
    3d0a:	a4 0b       	sbc	r26, r20
    3d0c:	b5 0b       	sbc	r27, r21
    3d0e:	88 0f       	add	r24, r24
    3d10:	99 1f       	adc	r25, r25
    3d12:	aa 1f       	adc	r26, r26
    3d14:	bb 1f       	adc	r27, r27
    3d16:	8a 5c       	subi	r24, 0xCA	; 202
    3d18:	9e 4f       	sbci	r25, 0xFE	; 254
    3d1a:	af 4f       	sbci	r26, 0xFF	; 255
    3d1c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d1e:	24 e6       	ldi	r18, 0x64	; 100
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	50 e0       	ldi	r21, 0x00	; 0
    3d26:	bc 01       	movw	r22, r24
    3d28:	cd 01       	movw	r24, r26
    3d2a:	0e 94 c9 48 	call	0x9192	; 0x9192 <__divmodsi4>
    3d2e:	da 01       	movw	r26, r20
    3d30:	c9 01       	movw	r24, r18
    3d32:	80 5f       	subi	r24, 0xF0	; 240
    3d34:	98 4d       	sbci	r25, 0xD8	; 216
    3d36:	8a 87       	std	Y+10, r24	; 0x0a
    3d38:	9b 87       	std	Y+11, r25	; 0x0b
    3d3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d3e:	67 ef       	ldi	r22, 0xF7	; 247
    3d40:	72 e4       	ldi	r23, 0x42	; 66
    3d42:	0e 94 24 37 	call	0x6e48	; 0x6e48 <_Z16lb_broadcast_numjPKc>
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    3d5a:	35 c0       	rjmp	.+106    	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3d5c:	ce 01       	movw	r24, r28
    3d5e:	c2 96       	adiw	r24, 0x32	; 50
    3d60:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <ds3231_get_temp>
    3d64:	98 2f       	mov	r25, r24
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	89 27       	eor	r24, r25
    3d6a:	88 23       	and	r24, r24
    3d6c:	59 f1       	breq	.+86     	; 0x3dc4 <_Z17handleLinkBusMsgsv+0xd2c>
    3d6e:	8a a9       	ldd	r24, Y+50	; 0x32
    3d70:	9b a9       	ldd	r25, Y+51	; 0x33
    3d72:	6c ef       	ldi	r22, 0xFC	; 252
    3d74:	72 e4       	ldi	r23, 0x42	; 66
    3d76:	0e 94 24 37 	call	0x6e48	; 0x6e48 <_Z16lb_broadcast_numjPKc>
    3d7a:	24 c0       	rjmp	.+72     	; 0x3dc4 <_Z17handleLinkBusMsgsv+0xd2c>
    3d7c:	4d ed       	ldi	r20, 0xDD	; 221
    3d7e:	50 e4       	ldi	r21, 0x40	; 64
    3d80:	61 e0       	ldi	r22, 0x01	; 1
    3d82:	73 e4       	ldi	r23, 0x43	; 67
    3d84:	83 e0       	ldi	r24, 0x03	; 3
    3d86:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_Z11lb_send_msg13LBMessageTypePKcPc>
    3d8a:	1d c0       	rjmp	.+58     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3d8c:	0e 94 31 36 	call	0x6c62	; 0x6c62 <_Z16linkbus_reset_rxv>
    3d90:	8e ec       	ldi	r24, 0xCE	; 206
    3d92:	80 93 b7 45 	sts	0x45B7, r24	; 0x8045b7 <_ZL17g_last_error_code>
    3d96:	17 c0       	rjmp	.+46     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3d98:	00 00       	nop
    3d9a:	15 c0       	rjmp	.+42     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3d9c:	00 00       	nop
    3d9e:	13 c0       	rjmp	.+38     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3da0:	00 00       	nop
    3da2:	11 c0       	rjmp	.+34     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3da4:	00 00       	nop
    3da6:	0f c0       	rjmp	.+30     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3da8:	00 00       	nop
    3daa:	0d c0       	rjmp	.+26     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3dac:	00 00       	nop
    3dae:	0b c0       	rjmp	.+22     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3db0:	00 00       	nop
    3db2:	09 c0       	rjmp	.+18     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3db4:	00 00       	nop
    3db6:	07 c0       	rjmp	.+14     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3db8:	00 00       	nop
    3dba:	05 c0       	rjmp	.+10     	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3dbc:	00 00       	nop
    3dbe:	03 c0       	rjmp	.+6      	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3dc0:	00 00       	nop
    3dc2:	01 c0       	rjmp	.+2      	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xd2e>
    3dc4:	00 00       	nop
    3dc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3dca:	fc 01       	movw	r30, r24
    3dcc:	11 82       	std	Z+1, r1	; 0x01
    3dce:	12 82       	std	Z+2, r1	; 0x02
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	88 23       	and	r24, r24
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <_Z17handleLinkBusMsgsv+0xd40>
    3dd6:	6d c9       	rjmp	.-3366   	; 0x30b2 <_Z17handleLinkBusMsgsv+0x1a>
    3dd8:	85 e0       	ldi	r24, 0x05	; 5
    3dda:	93 e4       	ldi	r25, 0x43	; 67
    3ddc:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <_Z12lb_send_textPc>
    3de0:	68 c9       	rjmp	.-3376   	; 0x30b2 <_Z17handleLinkBusMsgsv+0x1a>
    3de2:	00 00       	nop
    3de4:	e3 96       	adiw	r28, 0x33	; 51
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	df 91       	pop	r29
    3dec:	cf 91       	pop	r28
    3dee:	1f 91       	pop	r17
    3df0:	0f 91       	pop	r16
    3df2:	ff 90       	pop	r15
    3df4:	ef 90       	pop	r14
    3df6:	08 95       	ret

00003df8 <_Z12eventEnabledv>:
    3df8:	ef 92       	push	r14
    3dfa:	ff 92       	push	r15
    3dfc:	0f 93       	push	r16
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	29 97       	sbiw	r28, 0x09	; 9
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	de bf       	out	0x3e, r29	; 62
    3e0e:	20 91 f4 45 	lds	r18, 0x45F4	; 0x8045f4 <g_event_start_time>
    3e12:	30 91 f5 45 	lds	r19, 0x45F5	; 0x8045f5 <g_event_start_time+0x1>
    3e16:	40 91 f6 45 	lds	r20, 0x45F6	; 0x8045f6 <g_event_start_time+0x2>
    3e1a:	50 91 f7 45 	lds	r21, 0x45F7	; 0x8045f7 <g_event_start_time+0x3>
    3e1e:	80 91 f8 45 	lds	r24, 0x45F8	; 0x8045f8 <g_event_finish_time>
    3e22:	90 91 f9 45 	lds	r25, 0x45F9	; 0x8045f9 <g_event_finish_time+0x1>
    3e26:	a0 91 fa 45 	lds	r26, 0x45FA	; 0x8045fa <g_event_finish_time+0x2>
    3e2a:	b0 91 fb 45 	lds	r27, 0x45FB	; 0x8045fb <g_event_finish_time+0x3>
    3e2e:	bc 01       	movw	r22, r24
    3e30:	cd 01       	movw	r24, r26
    3e32:	0e 94 13 46 	call	0x8c26	; 0x8c26 <_Z7timeDifmm>
    3e36:	dc 01       	movw	r26, r24
    3e38:	cb 01       	movw	r24, r22
    3e3a:	89 83       	std	Y+1, r24	; 0x01
    3e3c:	9a 83       	std	Y+2, r25	; 0x02
    3e3e:	ab 83       	std	Y+3, r26	; 0x03
    3e40:	bc 83       	std	Y+4, r27	; 0x04
    3e42:	21 e0       	ldi	r18, 0x01	; 1
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	9a 81       	ldd	r25, Y+2	; 0x02
    3e48:	ab 81       	ldd	r26, Y+3	; 0x03
    3e4a:	bc 81       	ldd	r27, Y+4	; 0x04
    3e4c:	18 16       	cp	r1, r24
    3e4e:	19 06       	cpc	r1, r25
    3e50:	1a 06       	cpc	r1, r26
    3e52:	1b 06       	cpc	r1, r27
    3e54:	0c f0       	brlt	.+2      	; 0x3e58 <_Z12eventEnabledv+0x60>
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	2d 83       	std	Y+5, r18	; 0x05
    3e5a:	ce 01       	movw	r24, r28
    3e5c:	06 96       	adiw	r24, 0x06	; 6
    3e5e:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    3e62:	20 91 f8 45 	lds	r18, 0x45F8	; 0x8045f8 <g_event_finish_time>
    3e66:	30 91 f9 45 	lds	r19, 0x45F9	; 0x8045f9 <g_event_finish_time+0x1>
    3e6a:	40 91 fa 45 	lds	r20, 0x45FA	; 0x8045fa <g_event_finish_time+0x2>
    3e6e:	50 91 fb 45 	lds	r21, 0x45FB	; 0x8045fb <g_event_finish_time+0x3>
    3e72:	8e 81       	ldd	r24, Y+6	; 0x06
    3e74:	9f 81       	ldd	r25, Y+7	; 0x07
    3e76:	a8 85       	ldd	r26, Y+8	; 0x08
    3e78:	b9 85       	ldd	r27, Y+9	; 0x09
    3e7a:	bc 01       	movw	r22, r24
    3e7c:	cd 01       	movw	r24, r26
    3e7e:	0e 94 13 46 	call	0x8c26	; 0x8c26 <_Z7timeDifmm>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	89 83       	std	Y+1, r24	; 0x01
    3e88:	9a 83       	std	Y+2, r25	; 0x02
    3e8a:	ab 83       	std	Y+3, r26	; 0x03
    3e8c:	bc 83       	std	Y+4, r27	; 0x04
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	9a 81       	ldd	r25, Y+2	; 0x02
    3e92:	ab 81       	ldd	r26, Y+3	; 0x03
    3e94:	bc 81       	ldd	r27, Y+4	; 0x04
    3e96:	bb 23       	and	r27, r27
    3e98:	2c f0       	brlt	.+10     	; 0x3ea4 <_Z12eventEnabledv+0xac>
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	88 23       	and	r24, r24
    3e9e:	11 f0       	breq	.+4      	; 0x3ea4 <_Z12eventEnabledv+0xac>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	4a c0       	rjmp	.+148    	; 0x3f38 <_Z12eventEnabledv+0x140>
    3ea4:	20 91 f4 45 	lds	r18, 0x45F4	; 0x8045f4 <g_event_start_time>
    3ea8:	30 91 f5 45 	lds	r19, 0x45F5	; 0x8045f5 <g_event_start_time+0x1>
    3eac:	40 91 f6 45 	lds	r20, 0x45F6	; 0x8045f6 <g_event_start_time+0x2>
    3eb0:	50 91 f7 45 	lds	r21, 0x45F7	; 0x8045f7 <g_event_start_time+0x3>
    3eb4:	8e 81       	ldd	r24, Y+6	; 0x06
    3eb6:	9f 81       	ldd	r25, Y+7	; 0x07
    3eb8:	a8 85       	ldd	r26, Y+8	; 0x08
    3eba:	b9 85       	ldd	r27, Y+9	; 0x09
    3ebc:	bc 01       	movw	r22, r24
    3ebe:	cd 01       	movw	r24, r26
    3ec0:	0e 94 13 46 	call	0x8c26	; 0x8c26 <_Z7timeDifmm>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	89 83       	std	Y+1, r24	; 0x01
    3eca:	9a 83       	std	Y+2, r25	; 0x02
    3ecc:	ab 83       	std	Y+3, r26	; 0x03
    3ece:	bc 83       	std	Y+4, r27	; 0x04
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed4:	ab 81       	ldd	r26, Y+3	; 0x03
    3ed6:	bc 81       	ldd	r27, Y+4	; 0x04
    3ed8:	84 3c       	cpi	r24, 0xC4	; 196
    3eda:	9f 4f       	sbci	r25, 0xFF	; 255
    3edc:	af 4f       	sbci	r26, 0xFF	; 255
    3ede:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee0:	64 f0       	brlt	.+24     	; 0x3efa <_Z12eventEnabledv+0x102>
    3ee2:	10 92 c5 45 	sts	0x45C5, r1	; 0x8045c5 <_ZL11g_sleepType>
    3ee6:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep>
    3eea:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    3eee:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    3ef2:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	1f c0       	rjmp	.+62     	; 0x3f38 <_Z12eventEnabledv+0x140>
    3efa:	24 ec       	ldi	r18, 0xC4	; 196
    3efc:	3f ef       	ldi	r19, 0xFF	; 255
    3efe:	4f ef       	ldi	r20, 0xFF	; 255
    3f00:	5f ef       	ldi	r21, 0xFF	; 255
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	9a 81       	ldd	r25, Y+2	; 0x02
    3f06:	ab 81       	ldd	r26, Y+3	; 0x03
    3f08:	bc 81       	ldd	r27, Y+4	; 0x04
    3f0a:	79 01       	movw	r14, r18
    3f0c:	8a 01       	movw	r16, r20
    3f0e:	e8 1a       	sub	r14, r24
    3f10:	f9 0a       	sbc	r15, r25
    3f12:	0a 0b       	sbc	r16, r26
    3f14:	1b 0b       	sbc	r17, r27
    3f16:	d8 01       	movw	r26, r16
    3f18:	c7 01       	movw	r24, r14
    3f1a:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    3f1e:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    3f22:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    3f26:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	80 93 c5 45 	sts	0x45C5, r24	; 0x8045c5 <_ZL11g_sleepType>
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	80 93 00 46 	sts	0x4600, r24	; 0x804600 <_ZL13g_go_to_sleep>
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	29 96       	adiw	r28, 0x09	; 9
    3f3a:	cd bf       	out	0x3d, r28	; 61
    3f3c:	de bf       	out	0x3e, r29	; 62
    3f3e:	df 91       	pop	r29
    3f40:	cf 91       	pop	r28
    3f42:	1f 91       	pop	r17
    3f44:	0f 91       	pop	r16
    3f46:	ff 90       	pop	r15
    3f48:	ef 90       	pop	r14
    3f4a:	08 95       	ret

00003f4c <_Z13throttleValueh>:
    3f4c:	85 31       	cpi	r24, 0x15	; 21
    3f4e:	4c f4       	brge	.+18     	; 0x3f62 <_Z13throttleValueh+0x16>
    3f50:	28 2f       	mov	r18, r24
    3f52:	88 0f       	add	r24, r24
    3f54:	33 0b       	sbc	r19, r19
    3f56:	25 30       	cpi	r18, 0x05	; 5
    3f58:	31 05       	cpc	r19, r1
    3f5a:	2c f4       	brge	.+10     	; 0x3f66 <_Z13throttleValueh+0x1a>
    3f5c:	25 e0       	ldi	r18, 0x05	; 5
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	02 c0       	rjmp	.+4      	; 0x3f66 <_Z13throttleValueh+0x1a>
    3f62:	24 e1       	ldi	r18, 0x14	; 20
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	40 e0       	ldi	r20, 0x00	; 0
    3f6a:	50 e0       	ldi	r21, 0x00	; 0
    3f6c:	62 ec       	ldi	r22, 0xC2	; 194
    3f6e:	71 e0       	ldi	r23, 0x01	; 1
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	0e 94 c9 48 	call	0x9192	; 0x9192 <__divmodsi4>
    3f78:	ca 01       	movw	r24, r20
    3f7a:	b9 01       	movw	r22, r18
    3f7c:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    3f80:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <__fixunssfsi>
    3f84:	cb 01       	movw	r24, r22
    3f86:	08 95       	ret

00003f88 <_Z11launchEventP2SC>:
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	00 d0       	rcall	.+0      	; 0x3f8e <_Z11launchEventP2SC+0x6>
    3f8e:	1f 92       	push	r1
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
    3f94:	8a 83       	std	Y+2, r24	; 0x02
    3f96:	9b 83       	std	Y+3, r25	; 0x03
    3f98:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f9c:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_Z33activateEventUsingCurrentSettingsP2SC>
    3fa0:	89 83       	std	Y+1, r24	; 0x01
    3fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	80 81       	ld	r24, Z
    3faa:	88 23       	and	r24, r24
    3fac:	31 f0       	breq	.+12     	; 0x3fba <_Z11launchEventP2SC+0x32>
    3fae:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	80 81       	ld	r24, Z
    3fb6:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	88 23       	and	r24, r24
    3fbe:	21 f0       	breq	.+8      	; 0x3fc8 <_Z11launchEventP2SC+0x40>
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	80 93 b7 45 	sts	0x45B7, r24	; 0x8045b7 <_ZL17g_last_error_code>
    3fc6:	04 c0       	rjmp	.+8      	; 0x3fd0 <_Z11launchEventP2SC+0x48>
    3fc8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_Z12eventEnabledv>
    3fcc:	80 93 fc 45 	sts	0x45FC, r24	; 0x8045fc <g_event_enabled>
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	23 96       	adiw	r28, 0x03	; 3
    3fd4:	cd bf       	out	0x3d, r28	; 61
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	08 95       	ret

00003fde <_Z33activateEventUsingCurrentSettingsP2SC>:
    3fde:	cf 92       	push	r12
    3fe0:	df 92       	push	r13
    3fe2:	ef 92       	push	r14
    3fe4:	ff 92       	push	r15
    3fe6:	0f 93       	push	r16
    3fe8:	1f 93       	push	r17
    3fea:	cf 93       	push	r28
    3fec:	df 93       	push	r29
    3fee:	1f 92       	push	r1
    3ff0:	cd b7       	in	r28, 0x3d	; 61
    3ff2:	de b7       	in	r29, 0x3e	; 62
    3ff4:	40 91 f4 45 	lds	r20, 0x45F4	; 0x8045f4 <g_event_start_time>
    3ff8:	50 91 f5 45 	lds	r21, 0x45F5	; 0x8045f5 <g_event_start_time+0x1>
    3ffc:	60 91 f6 45 	lds	r22, 0x45F6	; 0x8045f6 <g_event_start_time+0x2>
    4000:	70 91 f7 45 	lds	r23, 0x45F7	; 0x8045f7 <g_event_start_time+0x3>
    4004:	45 2b       	or	r20, r21
    4006:	46 2b       	or	r20, r22
    4008:	47 2b       	or	r20, r23
    400a:	09 f4       	brne	.+2      	; 0x400e <__DATA_REGION_LENGTH__+0xe>
    400c:	91 c1       	rjmp	.+802    	; 0x4330 <__DATA_REGION_LENGTH__+0x330>
    400e:	00 91 f4 45 	lds	r16, 0x45F4	; 0x8045f4 <g_event_start_time>
    4012:	10 91 f5 45 	lds	r17, 0x45F5	; 0x8045f5 <g_event_start_time+0x1>
    4016:	20 91 f6 45 	lds	r18, 0x45F6	; 0x8045f6 <g_event_start_time+0x2>
    401a:	30 91 f7 45 	lds	r19, 0x45F7	; 0x8045f7 <g_event_start_time+0x3>
    401e:	40 91 f8 45 	lds	r20, 0x45F8	; 0x8045f8 <g_event_finish_time>
    4022:	50 91 f9 45 	lds	r21, 0x45F9	; 0x8045f9 <g_event_finish_time+0x1>
    4026:	60 91 fa 45 	lds	r22, 0x45FA	; 0x8045fa <g_event_finish_time+0x2>
    402a:	70 91 fb 45 	lds	r23, 0x45FB	; 0x8045fb <g_event_finish_time+0x3>
    402e:	04 17       	cp	r16, r20
    4030:	15 07       	cpc	r17, r21
    4032:	26 07       	cpc	r18, r22
    4034:	37 07       	cpc	r19, r23
    4036:	08 f0       	brcs	.+2      	; 0x403a <__DATA_REGION_LENGTH__+0x3a>
    4038:	7d c1       	rjmp	.+762    	; 0x4334 <__DATA_REGION_LENGTH__+0x334>
    403a:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    403e:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4042:	23 2b       	or	r18, r19
    4044:	09 f4       	brne	.+2      	; 0x4048 <__DATA_REGION_LENGTH__+0x48>
    4046:	78 c1       	rjmp	.+752    	; 0x4338 <__DATA_REGION_LENGTH__+0x338>
    4048:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    404c:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    4050:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4054:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4058:	24 0f       	add	r18, r20
    405a:	35 1f       	adc	r19, r21
    405c:	40 91 f2 45 	lds	r20, 0x45F2	; 0x8045f2 <g_intra_cycle_delay_time>
    4060:	50 91 f3 45 	lds	r21, 0x45F3	; 0x8045f3 <g_intra_cycle_delay_time+0x1>
    4064:	24 17       	cp	r18, r20
    4066:	35 07       	cpc	r19, r21
    4068:	0c f4       	brge	.+2      	; 0x406c <__DATA_REGION_LENGTH__+0x6c>
    406a:	68 c1       	rjmp	.+720    	; 0x433c <__DATA_REGION_LENGTH__+0x33c>
    406c:	20 91 c6 45 	lds	r18, 0x45C6	; 0x8045c6 <g_messages_text>
    4070:	22 23       	and	r18, r18
    4072:	09 f4       	brne	.+2      	; 0x4076 <__DATA_REGION_LENGTH__+0x76>
    4074:	65 c1       	rjmp	.+714    	; 0x4340 <__DATA_REGION_LENGTH__+0x340>
    4076:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    407a:	22 23       	and	r18, r18
    407c:	09 f4       	brne	.+2      	; 0x4080 <__DATA_REGION_LENGTH__+0x80>
    407e:	62 c1       	rjmp	.+708    	; 0x4344 <__DATA_REGION_LENGTH__+0x344>
    4080:	8c 01       	movw	r16, r24
    4082:	80 91 db 45 	lds	r24, 0x45DB	; 0x8045db <g_messages_text+0x15>
    4086:	88 23       	and	r24, r24
    4088:	19 f1       	breq	.+70     	; 0x40d0 <__DATA_REGION_LENGTH__+0xd0>
    408a:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    408e:	88 23       	and	r24, r24
    4090:	41 f0       	breq	.+16     	; 0x40a2 <__DATA_REGION_LENGTH__+0xa2>
    4092:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    4096:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    409a:	89 2b       	or	r24, r25
    409c:	21 f4       	brne	.+8      	; 0x40a6 <__DATA_REGION_LENGTH__+0xa6>
    409e:	81 e0       	ldi	r24, 0x01	; 1
    40a0:	03 c0       	rjmp	.+6      	; 0x40a8 <__DATA_REGION_LENGTH__+0xa8>
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	01 c0       	rjmp	.+2      	; 0x40a8 <__DATA_REGION_LENGTH__+0xa8>
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	81 11       	cpse	r24, r1
    40aa:	4e c1       	rjmp	.+668    	; 0x4348 <__DATA_REGION_LENGTH__+0x348>
    40ac:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    40b0:	70 e0       	ldi	r23, 0x00	; 0
    40b2:	8b ed       	ldi	r24, 0xDB	; 219
    40b4:	95 e4       	ldi	r25, 0x45	; 69
    40b6:	0e 94 5d 39 	call	0x72ba	; 0x72ba <_Z26timeRequiredToSendStrAtWPMPcj>
    40ba:	8c 50       	subi	r24, 0x0C	; 12
    40bc:	9e 4f       	sbci	r25, 0xFE	; 254
    40be:	68 ee       	ldi	r22, 0xE8	; 232
    40c0:	73 e0       	ldi	r23, 0x03	; 3
    40c2:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__udivmodhi4>
    40c6:	60 93 f0 45 	sts	0x45F0, r22	; 0x8045f0 <g_time_needed_for_ID>
    40ca:	70 93 f1 45 	sts	0x45F1, r23	; 0x8045f1 <g_time_needed_for_ID+0x1>
    40ce:	04 c0       	rjmp	.+8      	; 0x40d8 <__DATA_REGION_LENGTH__+0xd8>
    40d0:	10 92 f0 45 	sts	0x45F0, r1	; 0x8045f0 <g_time_needed_for_ID>
    40d4:	10 92 f1 45 	sts	0x45F1, r1	; 0x8045f1 <g_time_needed_for_ID+0x1>
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    40e0:	c0 90 f8 45 	lds	r12, 0x45F8	; 0x8045f8 <g_event_finish_time>
    40e4:	d0 90 f9 45 	lds	r13, 0x45F9	; 0x8045f9 <g_event_finish_time+0x1>
    40e8:	e0 90 fa 45 	lds	r14, 0x45FA	; 0x8045fa <g_event_finish_time+0x2>
    40ec:	f0 90 fb 45 	lds	r15, 0x45FB	; 0x8045fb <g_event_finish_time+0x3>
    40f0:	c6 16       	cp	r12, r22
    40f2:	d7 06       	cpc	r13, r23
    40f4:	e8 06       	cpc	r14, r24
    40f6:	f9 06       	cpc	r15, r25
    40f8:	48 f4       	brcc	.+18     	; 0x410c <__DATA_REGION_LENGTH__+0x10c>
    40fa:	01 15       	cp	r16, r1
    40fc:	11 05       	cpc	r17, r1
    40fe:	09 f4       	brne	.+2      	; 0x4102 <__DATA_REGION_LENGTH__+0x102>
    4100:	25 c1       	rjmp	.+586    	; 0x434c <__DATA_REGION_LENGTH__+0x34c>
    4102:	8a ef       	ldi	r24, 0xFA	; 250
    4104:	f8 01       	movw	r30, r16
    4106:	80 83       	st	Z, r24
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	21 c1       	rjmp	.+578    	; 0x434e <__DATA_REGION_LENGTH__+0x34e>
    410c:	20 91 f4 45 	lds	r18, 0x45F4	; 0x8045f4 <g_event_start_time>
    4110:	30 91 f5 45 	lds	r19, 0x45F5	; 0x8045f5 <g_event_start_time+0x1>
    4114:	40 91 f6 45 	lds	r20, 0x45F6	; 0x8045f6 <g_event_start_time+0x2>
    4118:	50 91 f7 45 	lds	r21, 0x45F7	; 0x8045f7 <g_event_start_time+0x3>
    411c:	0e 94 13 46 	call	0x8c26	; 0x8c26 <_Z7timeDifmm>
    4120:	99 23       	and	r25, r25
    4122:	0c f4       	brge	.+2      	; 0x4126 <__DATA_REGION_LENGTH__+0x126>
    4124:	f2 c0       	rjmp	.+484    	; 0x430a <__DATA_REGION_LENGTH__+0x30a>
    4126:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    412a:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    412e:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    4132:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    4136:	e2 0e       	add	r14, r18
    4138:	f3 1e       	adc	r15, r19
    413a:	97 01       	movw	r18, r14
    413c:	0f 2c       	mov	r0, r15
    413e:	00 0c       	add	r0, r0
    4140:	44 0b       	sbc	r20, r20
    4142:	55 0b       	sbc	r21, r21
    4144:	0e 94 c9 48 	call	0x9192	; 0x9192 <__divmodsi4>
    4148:	20 91 f2 45 	lds	r18, 0x45F2	; 0x8045f2 <g_intra_cycle_delay_time>
    414c:	30 91 f3 45 	lds	r19, 0x45F3	; 0x8045f3 <g_intra_cycle_delay_time+0x1>
    4150:	c9 01       	movw	r24, r18
    4152:	86 1b       	sub	r24, r22
    4154:	97 0b       	sbc	r25, r23
    4156:	18 16       	cp	r1, r24
    4158:	19 06       	cpc	r1, r25
    415a:	0c f4       	brge	.+2      	; 0x415e <__DATA_REGION_LENGTH__+0x15e>
    415c:	84 c0       	rjmp	.+264    	; 0x4266 <__DATA_REGION_LENGTH__+0x266>
    415e:	22 27       	eor	r18, r18
    4160:	33 27       	eor	r19, r19
    4162:	28 1b       	sub	r18, r24
    4164:	39 0b       	sbc	r19, r25
    4166:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    416a:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    416e:	24 17       	cp	r18, r20
    4170:	35 07       	cpc	r19, r21
    4172:	ac f1       	brlt	.+106    	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    4174:	8e 0d       	add	r24, r14
    4176:	9f 1d       	adc	r25, r15
    4178:	91 95       	neg	r25
    417a:	81 95       	neg	r24
    417c:	91 09       	sbc	r25, r1
    417e:	09 2e       	mov	r0, r25
    4180:	00 0c       	add	r0, r0
    4182:	aa 0b       	sbc	r26, r26
    4184:	bb 0b       	sbc	r27, r27
    4186:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    418a:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    418e:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    4192:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    4196:	01 15       	cp	r16, r1
    4198:	11 05       	cpc	r17, r1
    419a:	19 f0       	breq	.+6      	; 0x41a2 <__DATA_REGION_LENGTH__+0x1a2>
    419c:	8e ef       	ldi	r24, 0xFE	; 254
    419e:	f8 01       	movw	r30, r16
    41a0:	80 83       	st	Z, r24
    41a2:	80 91 fc 45 	lds	r24, 0x45FC	; 0x8045fc <g_event_enabled>
    41a6:	81 11       	cpse	r24, r1
    41a8:	8a c0       	rjmp	.+276    	; 0x42be <__DATA_REGION_LENGTH__+0x2be>
    41aa:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    41ae:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    41b2:	40 91 bc 45 	lds	r20, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    41b6:	50 91 bd 45 	lds	r21, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    41ba:	60 91 be 45 	lds	r22, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    41be:	70 91 bf 45 	lds	r23, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    41c2:	20 91 f0 45 	lds	r18, 0x45F0	; 0x8045f0 <g_time_needed_for_ID>
    41c6:	30 91 f1 45 	lds	r19, 0x45F1	; 0x8045f1 <g_time_needed_for_ID+0x1>
    41ca:	84 1b       	sub	r24, r20
    41cc:	95 0b       	sbc	r25, r21
    41ce:	82 1b       	sub	r24, r18
    41d0:	93 0b       	sbc	r25, r19
    41d2:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    41d6:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	77 c0       	rjmp	.+238    	; 0x42cc <__DATA_REGION_LENGTH__+0x2cc>
    41de:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    41e2:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    41e6:	82 0f       	add	r24, r18
    41e8:	93 1f       	adc	r25, r19
    41ea:	09 2e       	mov	r0, r25
    41ec:	00 0c       	add	r0, r0
    41ee:	aa 0b       	sbc	r26, r26
    41f0:	bb 0b       	sbc	r27, r27
    41f2:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    41f6:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    41fa:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    41fe:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
    4202:	01 15       	cp	r16, r1
    4204:	11 05       	cpc	r17, r1
    4206:	19 f0       	breq	.+6      	; 0x420e <__DATA_REGION_LENGTH__+0x20e>
    4208:	8d ef       	ldi	r24, 0xFD	; 253
    420a:	f8 01       	movw	r30, r16
    420c:	80 83       	st	Z, r24
    420e:	80 91 fc 45 	lds	r24, 0x45FC	; 0x8045fc <g_event_enabled>
    4212:	81 11       	cpse	r24, r1
    4214:	56 c0       	rjmp	.+172    	; 0x42c2 <__DATA_REGION_LENGTH__+0x2c2>
    4216:	80 91 f0 45 	lds	r24, 0x45F0	; 0x8045f0 <g_time_needed_for_ID>
    421a:	90 91 f1 45 	lds	r25, 0x45F1	; 0x8045f1 <g_time_needed_for_ID+0x1>
    421e:	a0 e0       	ldi	r26, 0x00	; 0
    4220:	b0 e0       	ldi	r27, 0x00	; 0
    4222:	40 91 bc 45 	lds	r20, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    4226:	50 91 bd 45 	lds	r21, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    422a:	60 91 be 45 	lds	r22, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    422e:	70 91 bf 45 	lds	r23, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    4232:	84 17       	cp	r24, r20
    4234:	95 07       	cpc	r25, r21
    4236:	a6 07       	cpc	r26, r22
    4238:	b7 07       	cpc	r27, r23
    423a:	0c f0       	brlt	.+2      	; 0x423e <__DATA_REGION_LENGTH__+0x23e>
    423c:	44 c0       	rjmp	.+136    	; 0x42c6 <__DATA_REGION_LENGTH__+0x2c6>
    423e:	80 91 bc 45 	lds	r24, 0x45BC	; 0x8045bc <_ZL12g_on_the_air>
    4242:	90 91 bd 45 	lds	r25, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x1>
    4246:	a0 91 be 45 	lds	r26, 0x45BE	; 0x8045be <_ZL12g_on_the_air+0x2>
    424a:	b0 91 bf 45 	lds	r27, 0x45BF	; 0x8045bf <_ZL12g_on_the_air+0x3>
    424e:	20 91 f0 45 	lds	r18, 0x45F0	; 0x8045f0 <g_time_needed_for_ID>
    4252:	30 91 f1 45 	lds	r19, 0x45F1	; 0x8045f1 <g_time_needed_for_ID+0x1>
    4256:	82 1b       	sub	r24, r18
    4258:	93 0b       	sbc	r25, r19
    425a:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    425e:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	33 c0       	rjmp	.+102    	; 0x42cc <__DATA_REGION_LENGTH__+0x2cc>
    4266:	44 27       	eor	r20, r20
    4268:	55 27       	eor	r21, r21
    426a:	48 1b       	sub	r20, r24
    426c:	59 0b       	sbc	r21, r25
    426e:	05 2e       	mov	r0, r21
    4270:	00 0c       	add	r0, r0
    4272:	66 0b       	sbc	r22, r22
    4274:	77 0b       	sbc	r23, r23
    4276:	40 93 bc 45 	sts	0x45BC, r20	; 0x8045bc <_ZL12g_on_the_air>
    427a:	50 93 bd 45 	sts	0x45BD, r21	; 0x8045bd <_ZL12g_on_the_air+0x1>
    427e:	60 93 be 45 	sts	0x45BE, r22	; 0x8045be <_ZL12g_on_the_air+0x2>
    4282:	70 93 bf 45 	sts	0x45BF, r23	; 0x8045bf <_ZL12g_on_the_air+0x3>
    4286:	01 15       	cp	r16, r1
    4288:	11 05       	cpc	r17, r1
    428a:	19 f0       	breq	.+6      	; 0x4292 <__DATA_REGION_LENGTH__+0x292>
    428c:	2e ef       	ldi	r18, 0xFE	; 254
    428e:	f8 01       	movw	r30, r16
    4290:	20 83       	st	Z, r18
    4292:	20 91 fc 45 	lds	r18, 0x45FC	; 0x8045fc <g_event_enabled>
    4296:	21 11       	cpse	r18, r1
    4298:	18 c0       	rjmp	.+48     	; 0x42ca <__DATA_REGION_LENGTH__+0x2ca>
    429a:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    429e:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    42a2:	82 0f       	add	r24, r18
    42a4:	93 1f       	adc	r25, r19
    42a6:	20 91 f0 45 	lds	r18, 0x45F0	; 0x8045f0 <g_time_needed_for_ID>
    42aa:	30 91 f1 45 	lds	r19, 0x45F1	; 0x8045f1 <g_time_needed_for_ID+0x1>
    42ae:	82 1b       	sub	r24, r18
    42b0:	93 0b       	sbc	r25, r19
    42b2:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    42b6:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
    42ba:	80 e0       	ldi	r24, 0x00	; 0
    42bc:	07 c0       	rjmp	.+14     	; 0x42cc <__DATA_REGION_LENGTH__+0x2cc>
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	05 c0       	rjmp	.+10     	; 0x42cc <__DATA_REGION_LENGTH__+0x2cc>
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	03 c0       	rjmp	.+6      	; 0x42cc <__DATA_REGION_LENGTH__+0x2cc>
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	01 c0       	rjmp	.+2      	; 0x42cc <__DATA_REGION_LENGTH__+0x2cc>
    42ca:	80 e0       	ldi	r24, 0x00	; 0
    42cc:	88 23       	and	r24, r24
    42ce:	b1 f0       	breq	.+44     	; 0x42fc <__DATA_REGION_LENGTH__+0x2fc>
    42d0:	f8 94       	cli
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	89 83       	std	Y+1, r24	; 0x01
    42d6:	40 e0       	ldi	r20, 0x00	; 0
    42d8:	50 e0       	ldi	r21, 0x00	; 0
    42da:	be 01       	movw	r22, r28
    42dc:	6f 5f       	subi	r22, 0xFF	; 255
    42de:	7f 4f       	sbci	r23, 0xFF	; 255
    42e0:	86 ec       	ldi	r24, 0xC6	; 198
    42e2:	95 e4       	ldi	r25, 0x45	; 69
    42e4:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
    42e8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    42ec:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    42f0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    42f4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    42f8:	78 94       	sei
    42fa:	03 c0       	rjmp	.+6      	; 0x4302 <__DATA_REGION_LENGTH__+0x302>
    42fc:	80 e0       	ldi	r24, 0x00	; 0
    42fe:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <_Z14keyTransmitterb>
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	80 93 fd 45 	sts	0x45FD, r24	; 0x8045fd <g_event_commenced>
    4308:	09 c0       	rjmp	.+18     	; 0x431c <__DATA_REGION_LENGTH__+0x31c>
    430a:	01 15       	cp	r16, r1
    430c:	11 05       	cpc	r17, r1
    430e:	19 f0       	breq	.+6      	; 0x4316 <__DATA_REGION_LENGTH__+0x316>
    4310:	8f ef       	ldi	r24, 0xFF	; 255
    4312:	f8 01       	movw	r30, r16
    4314:	80 83       	st	Z, r24
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <_Z14keyTransmitterb>
    431c:	10 92 ff 45 	sts	0x45FF, r1	; 0x8045ff <g_waiting_for_next_event>
    4320:	8a e5       	ldi	r24, 0x5A	; 90
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    4328:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	0f c0       	rjmp	.+30     	; 0x434e <__DATA_REGION_LENGTH__+0x34e>
    4330:	8c ec       	ldi	r24, 0xCC	; 204
    4332:	0d c0       	rjmp	.+26     	; 0x434e <__DATA_REGION_LENGTH__+0x34e>
    4334:	8d ec       	ldi	r24, 0xCD	; 205
    4336:	0b c0       	rjmp	.+22     	; 0x434e <__DATA_REGION_LENGTH__+0x34e>
    4338:	8b ec       	ldi	r24, 0xCB	; 203
    433a:	09 c0       	rjmp	.+18     	; 0x434e <__DATA_REGION_LENGTH__+0x34e>
    433c:	8a ec       	ldi	r24, 0xCA	; 202
    433e:	07 c0       	rjmp	.+14     	; 0x434e <__DATA_REGION_LENGTH__+0x34e>
    4340:	89 ec       	ldi	r24, 0xC9	; 201
    4342:	05 c0       	rjmp	.+10     	; 0x434e <__DATA_REGION_LENGTH__+0x34e>
    4344:	88 ec       	ldi	r24, 0xC8	; 200
    4346:	03 c0       	rjmp	.+6      	; 0x434e <__DATA_REGION_LENGTH__+0x34e>
    4348:	87 ec       	ldi	r24, 0xC7	; 199
    434a:	01 c0       	rjmp	.+2      	; 0x434e <__DATA_REGION_LENGTH__+0x34e>
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	0f 90       	pop	r0
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	1f 91       	pop	r17
    4356:	0f 91       	pop	r16
    4358:	ff 90       	pop	r15
    435a:	ef 90       	pop	r14
    435c:	df 90       	pop	r13
    435e:	cf 90       	pop	r12
    4360:	08 95       	ret

00004362 <_Z8rtc_initv>:
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <ds3231_1s_sqw>
    4368:	88 23       	and	r24, r24
    436a:	11 f0       	breq	.+4      	; 0x4370 <_Z8rtc_initv+0xe>
    436c:	8c ef       	ldi	r24, 0xFC	; 252
    436e:	08 95       	ret
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	08 95       	ret

00004374 <_Z18antennaIsConnectedv>:
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	08 95       	ret

00004378 <_Z13startEventNow19EventActionSource_t>:
	
}


void startEventNow(EventActionSource_t activationSource)
{
    4378:	cf 93       	push	r28
    437a:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    437c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <_Z23clockConfigurationCheckv>

	cli();
    4380:	f8 94       	cli
	if(activationSource == POWER_UP)
    4382:	c1 11       	cpse	r28, r1
    4384:	0e c0       	rjmp	.+28     	; 0x43a2 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    4386:	82 30       	cpi	r24, 0x02	; 2
    4388:	31 f4       	brne	.+12     	; 0x4396 <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    438a:	60 e0       	ldi	r22, 0x00	; 0
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4394:	3f c0       	rjmp	.+126    	; 0x4414 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4396:	63 e0       	ldi	r22, 0x03	; 3
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43a0:	39 c0       	rjmp	.+114    	; 0x4414 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    43a2:	c2 30       	cpi	r28, 0x02	; 2
    43a4:	d1 f4       	brne	.+52     	; 0x43da <_Z13startEventNow19EventActionSource_t+0x62>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    43a6:	82 30       	cpi	r24, 0x02	; 2
    43a8:	31 f4       	brne	.+12     	; 0x43b6 <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    43aa:	61 e0       	ldi	r22, 0x01	; 1
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43b4:	2f c0       	rjmp	.+94     	; 0x4414 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    43b6:	81 30       	cpi	r24, 0x01	; 1
    43b8:	21 f0       	breq	.+8      	; 0x43c2 <_Z13startEventNow19EventActionSource_t+0x4a>
    43ba:	84 30       	cpi	r24, 0x04	; 4
    43bc:	11 f0       	breq	.+4      	; 0x43c2 <_Z13startEventNow19EventActionSource_t+0x4a>
    43be:	83 30       	cpi	r24, 0x03	; 3
    43c0:	31 f4       	brne	.+12     	; 0x43ce <_Z13startEventNow19EventActionSource_t+0x56>
		{
			setupForFox(NULL, START_EVENT_NOW);
    43c2:	61 e0       	ldi	r22, 0x01	; 1
    43c4:	80 e0       	ldi	r24, 0x00	; 0
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43cc:	23 c0       	rjmp	.+70     	; 0x4414 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    43ce:	63 e0       	ldi	r22, 0x03	; 3
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43d8:	1d c0       	rjmp	.+58     	; 0x4414 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    43da:	82 30       	cpi	r24, 0x02	; 2
    43dc:	31 f4       	brne	.+12     	; 0x43ea <_Z13startEventNow19EventActionSource_t+0x72>
		{
			setupForFox(NULL, START_EVENT_NOW);
    43de:	61 e0       	ldi	r22, 0x01	; 1
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43e8:	15 c0       	rjmp	.+42     	; 0x4414 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    43ea:	81 30       	cpi	r24, 0x01	; 1
    43ec:	31 f4       	brne	.+12     	; 0x43fa <_Z13startEventNow19EventActionSource_t+0x82>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    43ee:	62 e0       	ldi	r22, 0x02	; 2
    43f0:	80 e0       	ldi	r24, 0x00	; 0
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43f8:	0d c0       	rjmp	.+26     	; 0x4414 <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    43fa:	84 30       	cpi	r24, 0x04	; 4
    43fc:	31 f4       	brne	.+12     	; 0x440a <_Z13startEventNow19EventActionSource_t+0x92>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    43fe:	63 e0       	ldi	r22, 0x03	; 3
    4400:	80 e0       	ldi	r24, 0x00	; 0
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4408:	05 c0       	rjmp	.+10     	; 0x4414 <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    440a:	63 e0       	ldi	r22, 0x03	; 3
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

// 	g_LED_enunciating = false;
	sei();
    4414:	78 94       	sei
}
    4416:	cf 91       	pop	r28
    4418:	08 95       	ret

0000441a <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    441a:	cf 93       	push	r28
    441c:	df 93       	push	r29
    441e:	d8 2f       	mov	r29, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    4420:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <_Z23clockConfigurationCheckv>
    4424:	c8 2f       	mov	r28, r24

	cli();
    4426:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    4428:	d2 30       	cpi	r29, 0x02	; 2
    442a:	31 f4       	brne	.+12     	; 0x4438 <_Z12stopEventNow19EventActionSource_t+0x1e>
	{
		setupForFox(NULL, START_NOTHING);
    442c:	60 e0       	ldi	r22, 0x00	; 0
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4436:	14 c0       	rjmp	.+40     	; 0x4460 <_Z12stopEventNow19EventActionSource_t+0x46>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    4438:	81 30       	cpi	r24, 0x01	; 1
    443a:	29 f4       	brne	.+10     	; 0x4446 <_Z12stopEventNow19EventActionSource_t+0x2c>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    443c:	62 e0       	ldi	r22, 0x02	; 2
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    4446:	c4 30       	cpi	r28, 0x04	; 4
    4448:	31 f4       	brne	.+12     	; 0x4456 <_Z12stopEventNow19EventActionSource_t+0x3c>
		{
			setupForFox(NULL, START_NOTHING);
    444a:	60 e0       	ldi	r22, 0x00	; 0
    444c:	80 e0       	ldi	r24, 0x00	; 0
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4454:	05 c0       	rjmp	.+10     	; 0x4460 <_Z12stopEventNow19EventActionSource_t+0x46>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    4456:	60 e0       	ldi	r22, 0x00	; 0
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>

// 	if(g_sync_pin_stable == STABLE_LOW)
// 	{
// 		digitalWrite(PIN_LED, OFF); /*  LED Off */
// 	}
}
    4460:	df 91       	pop	r29
    4462:	cf 91       	pop	r28
    4464:	08 95       	ret

00004466 <_Z18startEventUsingRTCv>:

void startEventUsingRTC(void)
{
    4466:	8f 92       	push	r8
    4468:	9f 92       	push	r9
    446a:	af 92       	push	r10
    446c:	bf 92       	push	r11
    446e:	ef 92       	push	r14
    4470:	ff 92       	push	r15
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
	g_current_epoch = ds3231_get_epoch(null);
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    447e:	60 93 22 46 	sts	0x4622, r22	; 0x804622 <g_current_epoch>
    4482:	70 93 23 46 	sts	0x4623, r23	; 0x804623 <g_current_epoch+0x1>
    4486:	80 93 24 46 	sts	0x4624, r24	; 0x804624 <g_current_epoch+0x2>
    448a:	90 93 25 46 	sts	0x4625, r25	; 0x804625 <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    448e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    4492:	82 30       	cpi	r24, 0x02	; 2
    4494:	09 f4       	brne	.+2      	; 0x4498 <_Z18startEventUsingRTCv+0x32>
    4496:	54 c0       	rjmp	.+168    	; 0x4540 <_Z18startEventUsingRTCv+0xda>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4498:	63 e0       	ldi	r22, 0x03	; 3
    449a:	80 e0       	ldi	r24, 0x00	; 0
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    44a2:	20 91 11 46 	lds	r18, 0x4611	; 0x804611 <g_event_start_epoch>
    44a6:	30 91 12 46 	lds	r19, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    44aa:	40 91 13 46 	lds	r20, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    44ae:	50 91 14 46 	lds	r21, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    44b2:	60 91 22 46 	lds	r22, 0x4622	; 0x804622 <g_current_epoch>
    44b6:	70 91 23 46 	lds	r23, 0x4623	; 0x804623 <g_current_epoch+0x1>
    44ba:	80 91 24 46 	lds	r24, 0x4624	; 0x804624 <g_current_epoch+0x2>
    44be:	90 91 25 46 	lds	r25, 0x4625	; 0x804625 <g_current_epoch+0x3>
    44c2:	0f 2e       	mov	r0, r31
    44c4:	f7 e9       	ldi	r31, 0x97	; 151
    44c6:	ef 2e       	mov	r14, r31
    44c8:	f2 e4       	ldi	r31, 0x42	; 66
    44ca:	ff 2e       	mov	r15, r31
    44cc:	f0 2d       	mov	r31, r0
    44ce:	04 ea       	ldi	r16, 0xA4	; 164
    44d0:	12 e4       	ldi	r17, 0x42	; 66
    44d2:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    44d6:	60 91 11 46 	lds	r22, 0x4611	; 0x804611 <g_event_start_epoch>
    44da:	70 91 12 46 	lds	r23, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    44de:	80 91 13 46 	lds	r24, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    44e2:	90 91 14 46 	lds	r25, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    44e6:	80 90 22 46 	lds	r8, 0x4622	; 0x804622 <g_current_epoch>
    44ea:	90 90 23 46 	lds	r9, 0x4623	; 0x804623 <g_current_epoch+0x1>
    44ee:	a0 90 24 46 	lds	r10, 0x4624	; 0x804624 <g_current_epoch+0x2>
    44f2:	b0 90 25 46 	lds	r11, 0x4625	; 0x804625 <g_current_epoch+0x3>
    44f6:	68 15       	cp	r22, r8
    44f8:	79 05       	cpc	r23, r9
    44fa:	8a 05       	cpc	r24, r10
    44fc:	9b 05       	cpc	r25, r11
    44fe:	88 f4       	brcc	.+34     	; 0x4522 <_Z18startEventUsingRTCv+0xbc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    4500:	20 91 15 46 	lds	r18, 0x4615	; 0x804615 <g_event_finish_epoch>
    4504:	30 91 16 46 	lds	r19, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    4508:	40 91 17 46 	lds	r20, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    450c:	50 91 18 46 	lds	r21, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    4510:	e1 2c       	mov	r14, r1
    4512:	f1 2c       	mov	r15, r1
    4514:	08 eb       	ldi	r16, 0xB8	; 184
    4516:	12 e4       	ldi	r17, 0x42	; 66
    4518:	c5 01       	movw	r24, r10
    451a:	b4 01       	movw	r22, r8
    451c:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z14reportTimeTillmmPKcS0_>
    4520:	11 c0       	rjmp	.+34     	; 0x4544 <_Z18startEventUsingRTCv+0xde>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    4522:	20 91 15 46 	lds	r18, 0x4615	; 0x804615 <g_event_finish_epoch>
    4526:	30 91 16 46 	lds	r19, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    452a:	40 91 17 46 	lds	r20, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    452e:	50 91 18 46 	lds	r21, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    4532:	e1 2c       	mov	r14, r1
    4534:	f1 2c       	mov	r15, r1
    4536:	00 eb       	ldi	r16, 0xB0	; 176
    4538:	12 e4       	ldi	r17, 0x42	; 66
    453a:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z14reportTimeTillmmPKcS0_>
    453e:	02 c0       	rjmp	.+4      	; 0x4544 <_Z18startEventUsingRTCv+0xde>
		}
	}
	else
	{
		reportConfigErrors();
    4540:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z18reportConfigErrorsv>
	}
}
    4544:	1f 91       	pop	r17
    4546:	0f 91       	pop	r16
    4548:	ff 90       	pop	r15
    454a:	ef 90       	pop	r14
    454c:	bf 90       	pop	r11
    454e:	af 90       	pop	r10
    4550:	9f 90       	pop	r9
    4552:	8f 90       	pop	r8
    4554:	08 95       	ret

00004556 <_Z11setupForFoxP5Fox_t13EventAction_t>:



void setupForFox(Fox_t* fox, EventAction_t action)
{
    4556:	1f 93       	push	r17
    4558:	cf 93       	push	r28
    455a:	df 93       	push	r29
    455c:	1f 92       	push	r1
    455e:	cd b7       	in	r28, 0x3d	; 61
    4560:	de b7       	in	r29, 0x3e	; 62
    4562:	16 2f       	mov	r17, r22
	bool patternNotSet = true;
	
	if(fox)
    4564:	00 97       	sbiw	r24, 0x00	; 0
    4566:	31 f0       	breq	.+12     	; 0x4574 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    4568:	fc 01       	movw	r30, r24
    456a:	80 81       	ld	r24, Z
    456c:	82 31       	cpi	r24, 0x12	; 18
    456e:	11 f0       	breq	.+4      	; 0x4574 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    4570:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		}
	}

 	g_current_epoch = ds3231_get_epoch(null);
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    457c:	60 93 22 46 	sts	0x4622, r22	; 0x804622 <g_current_epoch>
    4580:	70 93 23 46 	sts	0x4623, r23	; 0x804623 <g_current_epoch+0x1>
    4584:	80 93 24 46 	sts	0x4624, r24	; 0x804624 <g_current_epoch+0x2>
    4588:	90 93 25 46 	sts	0x4625, r25	; 0x804625 <g_current_epoch+0x3>

	cli();
    458c:	f8 94       	cli
	
	g_event_commenced = false;					/* get things running immediately */
    458e:	10 92 fd 45 	sts	0x45FD, r1	; 0x8045fd <g_event_commenced>
	g_event_enabled = false;					/* get things running immediately */
    4592:	10 92 fc 45 	sts	0x45FC, r1	; 0x8045fc <g_event_enabled>

	switch(g_fox)
    4596:	e0 91 1b 40 	lds	r30, 0x401B	; 0x80401b <g_fox>
    459a:	8e 2f       	mov	r24, r30
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	fc 01       	movw	r30, r24
    45a0:	31 97       	sbiw	r30, 0x01	; 1
    45a2:	e1 31       	cpi	r30, 0x11	; 17
    45a4:	f1 05       	cpc	r31, r1
    45a6:	08 f0       	brcs	.+2      	; 0x45aa <_Z11setupForFoxP5Fox_t13EventAction_t+0x54>
    45a8:	36 c1       	rjmp	.+620    	; 0x4816 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c0>
    45aa:	ec 58       	subi	r30, 0x8C	; 140
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	0c 94 e8 48 	jmp	0x91d0	; 0x91d0 <__tablejump2__>
	{
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
    45b2:	e6 ec       	ldi	r30, 0xC6	; 198
    45b4:	f5 e4       	ldi	r31, 0x45	; 69
    45b6:	8d e4       	ldi	r24, 0x4D	; 77
    45b8:	9f e4       	ldi	r25, 0x4F	; 79
    45ba:	80 83       	st	Z, r24
    45bc:	91 83       	std	Z+1, r25	; 0x01
    45be:	85 e4       	ldi	r24, 0x45	; 69
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	82 83       	std	Z+2, r24	; 0x02
    45c4:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    45c6:	80 e0       	ldi	r24, 0x00	; 0
    45c8:	01 c0       	rjmp	.+2      	; 0x45cc <_Z11setupForFoxP5Fox_t13EventAction_t+0x76>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    45ca:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_2:
		{
			if(patternNotSet)
    45cc:	88 23       	and	r24, r24
    45ce:	69 f0       	breq	.+26     	; 0x45ea <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
    45d0:	e6 ec       	ldi	r30, 0xC6	; 198
    45d2:	f5 e4       	ldi	r31, 0x45	; 69
    45d4:	8d e4       	ldi	r24, 0x4D	; 77
    45d6:	9f e4       	ldi	r25, 0x4F	; 79
    45d8:	80 83       	st	Z, r24
    45da:	91 83       	std	Z+1, r25	; 0x01
    45dc:	89 e4       	ldi	r24, 0x49	; 73
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	82 83       	std	Z+2, r24	; 0x02
    45e2:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	01 c0       	rjmp	.+2      	; 0x45ea <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    45e8:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_3:
		{
			if(patternNotSet)
    45ea:	88 23       	and	r24, r24
    45ec:	69 f0       	breq	.+26     	; 0x4608 <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
    45ee:	e6 ec       	ldi	r30, 0xC6	; 198
    45f0:	f5 e4       	ldi	r31, 0x45	; 69
    45f2:	8d e4       	ldi	r24, 0x4D	; 77
    45f4:	9f e4       	ldi	r25, 0x4F	; 79
    45f6:	80 83       	st	Z, r24
    45f8:	91 83       	std	Z+1, r25	; 0x01
    45fa:	83 e5       	ldi	r24, 0x53	; 83
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	82 83       	std	Z+2, r24	; 0x02
    4600:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	01 c0       	rjmp	.+2      	; 0x4608 <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4606:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_4:
		{
			if(patternNotSet)
    4608:	88 23       	and	r24, r24
    460a:	69 f0       	breq	.+26     	; 0x4626 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
    460c:	e6 ec       	ldi	r30, 0xC6	; 198
    460e:	f5 e4       	ldi	r31, 0x45	; 69
    4610:	8d e4       	ldi	r24, 0x4D	; 77
    4612:	9f e4       	ldi	r25, 0x4F	; 79
    4614:	80 83       	st	Z, r24
    4616:	91 83       	std	Z+1, r25	; 0x01
    4618:	88 e4       	ldi	r24, 0x48	; 72
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	82 83       	std	Z+2, r24	; 0x02
    461e:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4620:	80 e0       	ldi	r24, 0x00	; 0
    4622:	01 c0       	rjmp	.+2      	; 0x4626 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4624:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case FOX_5:
		{
			/* Set the Morse code pattern and speed */
			if(patternNotSet)
    4626:	88 23       	and	r24, r24
    4628:	51 f0       	breq	.+20     	; 0x463e <_Z11setupForFoxP5Fox_t13EventAction_t+0xe8>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO5");
    462a:	e6 ec       	ldi	r30, 0xC6	; 198
    462c:	f5 e4       	ldi	r31, 0x45	; 69
    462e:	8d e4       	ldi	r24, 0x4D	; 77
    4630:	9f e4       	ldi	r25, 0x4F	; 79
    4632:	80 83       	st	Z, r24
    4634:	91 83       	std	Z+1, r25	; 0x01
    4636:	85 e3       	ldi	r24, 0x35	; 53
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	82 83       	std	Z+2, r24	; 0x02
    463c:	93 83       	std	Z+3, r25	; 0x03
			}
			
			bool repeat = true;
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4642:	40 e0       	ldi	r20, 0x00	; 0
    4644:	50 e0       	ldi	r21, 0x00	; 0
    4646:	be 01       	movw	r22, r28
    4648:	6f 5f       	subi	r22, 0xFF	; 255
    464a:	7f 4f       	sbci	r23, 0xFF	; 255
    464c:	86 ec       	ldi	r24, 0xC6	; 198
    464e:	95 e4       	ldi	r25, 0x45	; 69
    4650:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4654:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4658:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    465c:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4660:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 60;			/* wait 10 minutes send the ID */
    4664:	8c e3       	ldi	r24, 0x3C	; 60
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    466c:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    4670:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4674:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 240;                    /* off period is very short */
    4678:	80 ef       	ldi	r24, 0xF0	; 240
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4680:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4684:	f8 c0       	rjmp	.+496    	; 0x4876 <_Z11setupForFoxP5Fox_t13EventAction_t+0x320>

		case SPRINT_S1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "ME");
    4686:	e6 ec       	ldi	r30, 0xC6	; 198
    4688:	f5 e4       	ldi	r31, 0x45	; 69
    468a:	8d e4       	ldi	r24, 0x4D	; 77
    468c:	95 e4       	ldi	r25, 0x45	; 69
    468e:	80 83       	st	Z, r24
    4690:	91 83       	std	Z+1, r25	; 0x01
    4692:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	01 c0       	rjmp	.+2      	; 0x469a <_Z11setupForFoxP5Fox_t13EventAction_t+0x144>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4698:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S2:
		{
			if(patternNotSet)
    469a:	88 23       	and	r24, r24
    469c:	51 f0       	breq	.+20     	; 0x46b2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x15c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MI");
    469e:	e6 ec       	ldi	r30, 0xC6	; 198
    46a0:	f5 e4       	ldi	r31, 0x45	; 69
    46a2:	8d e4       	ldi	r24, 0x4D	; 77
    46a4:	99 e4       	ldi	r25, 0x49	; 73
    46a6:	80 83       	st	Z, r24
    46a8:	91 83       	std	Z+1, r25	; 0x01
    46aa:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    46ac:	80 e0       	ldi	r24, 0x00	; 0
    46ae:	01 c0       	rjmp	.+2      	; 0x46b2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x15c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46b0:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S3:
		{
			if(patternNotSet)
    46b2:	88 23       	and	r24, r24
    46b4:	51 f0       	breq	.+20     	; 0x46ca <_Z11setupForFoxP5Fox_t13EventAction_t+0x174>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MS");
    46b6:	e6 ec       	ldi	r30, 0xC6	; 198
    46b8:	f5 e4       	ldi	r31, 0x45	; 69
    46ba:	8d e4       	ldi	r24, 0x4D	; 77
    46bc:	93 e5       	ldi	r25, 0x53	; 83
    46be:	80 83       	st	Z, r24
    46c0:	91 83       	std	Z+1, r25	; 0x01
    46c2:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	01 c0       	rjmp	.+2      	; 0x46ca <_Z11setupForFoxP5Fox_t13EventAction_t+0x174>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46c8:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S4:
		{
			if(patternNotSet)
    46ca:	88 23       	and	r24, r24
    46cc:	51 f0       	breq	.+20     	; 0x46e2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x18c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MH");
    46ce:	e6 ec       	ldi	r30, 0xC6	; 198
    46d0:	f5 e4       	ldi	r31, 0x45	; 69
    46d2:	8d e4       	ldi	r24, 0x4D	; 77
    46d4:	98 e4       	ldi	r25, 0x48	; 72
    46d6:	80 83       	st	Z, r24
    46d8:	91 83       	std	Z+1, r25	; 0x01
    46da:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	01 c0       	rjmp	.+2      	; 0x46e2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x18c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46e0:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case SPRINT_S5:
		{
			{
				if(patternNotSet)
    46e2:	88 23       	and	r24, r24
    46e4:	39 f0       	breq	.+14     	; 0x46f4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x19e>
				{
					sprintf(g_messages_text[PATTERN_TEXT], "M5");
    46e6:	e6 ec       	ldi	r30, 0xC6	; 198
    46e8:	f5 e4       	ldi	r31, 0x45	; 69
    46ea:	8d e4       	ldi	r24, 0x4D	; 77
    46ec:	95 e3       	ldi	r25, 0x35	; 53
    46ee:	80 83       	st	Z, r24
    46f0:	91 83       	std	Z+1, r25	; 0x01
    46f2:	12 82       	std	Z+2, r1	; 0x02
				}
			}
			
			bool repeat = true;
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    46f8:	40 e0       	ldi	r20, 0x00	; 0
    46fa:	50 e0       	ldi	r21, 0x00	; 0
    46fc:	be 01       	movw	r22, r28
    46fe:	6f 5f       	subi	r22, 0xFF	; 255
    4700:	7f 4f       	sbci	r23, 0xFF	; 255
    4702:	86 ec       	ldi	r24, 0xC6	; 198
    4704:	95 e4       	ldi	r25, 0x45	; 69
    4706:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    470a:	88 e0       	ldi	r24, 0x08	; 8
    470c:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4710:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4714:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    4718:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    471c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    4720:	88 e5       	ldi	r24, 0x58	; 88
    4722:	92 e0       	ldi	r25, 0x02	; 2
    4724:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    4728:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    472c:	8c e0       	ldi	r24, 0x0C	; 12
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4734:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    4738:	80 e3       	ldi	r24, 0x30	; 48
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4740:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4744:	98 c0       	rjmp	.+304    	; 0x4876 <_Z11setupForFoxP5Fox_t13EventAction_t+0x320>

		case SPRINT_F1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OE");
    4746:	e6 ec       	ldi	r30, 0xC6	; 198
    4748:	f5 e4       	ldi	r31, 0x45	; 69
    474a:	8f e4       	ldi	r24, 0x4F	; 79
    474c:	95 e4       	ldi	r25, 0x45	; 69
    474e:	80 83       	st	Z, r24
    4750:	91 83       	std	Z+1, r25	; 0x01
    4752:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	01 c0       	rjmp	.+2      	; 0x475a <_Z11setupForFoxP5Fox_t13EventAction_t+0x204>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4758:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F2:
		{
			if(patternNotSet)
    475a:	88 23       	and	r24, r24
    475c:	51 f0       	breq	.+20     	; 0x4772 <_Z11setupForFoxP5Fox_t13EventAction_t+0x21c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OI");
    475e:	e6 ec       	ldi	r30, 0xC6	; 198
    4760:	f5 e4       	ldi	r31, 0x45	; 69
    4762:	8f e4       	ldi	r24, 0x4F	; 79
    4764:	99 e4       	ldi	r25, 0x49	; 73
    4766:	80 83       	st	Z, r24
    4768:	91 83       	std	Z+1, r25	; 0x01
    476a:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	01 c0       	rjmp	.+2      	; 0x4772 <_Z11setupForFoxP5Fox_t13EventAction_t+0x21c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4770:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F3:
		{
			if(patternNotSet)
    4772:	88 23       	and	r24, r24
    4774:	51 f0       	breq	.+20     	; 0x478a <_Z11setupForFoxP5Fox_t13EventAction_t+0x234>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OS");
    4776:	e6 ec       	ldi	r30, 0xC6	; 198
    4778:	f5 e4       	ldi	r31, 0x45	; 69
    477a:	8f e4       	ldi	r24, 0x4F	; 79
    477c:	93 e5       	ldi	r25, 0x53	; 83
    477e:	80 83       	st	Z, r24
    4780:	91 83       	std	Z+1, r25	; 0x01
    4782:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	01 c0       	rjmp	.+2      	; 0x478a <_Z11setupForFoxP5Fox_t13EventAction_t+0x234>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4788:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F4:
		{
			if(patternNotSet)
    478a:	88 23       	and	r24, r24
    478c:	51 f0       	breq	.+20     	; 0x47a2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OH");
    478e:	e6 ec       	ldi	r30, 0xC6	; 198
    4790:	f5 e4       	ldi	r31, 0x45	; 69
    4792:	8f e4       	ldi	r24, 0x4F	; 79
    4794:	98 e4       	ldi	r25, 0x48	; 72
    4796:	80 83       	st	Z, r24
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    479c:	80 e0       	ldi	r24, 0x00	; 0
    479e:	01 c0       	rjmp	.+2      	; 0x47a2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    47a0:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F5:
		{
			if(patternNotSet)
    47a2:	88 23       	and	r24, r24
    47a4:	39 f0       	breq	.+14     	; 0x47b4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x25e>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "O5");
    47a6:	e6 ec       	ldi	r30, 0xC6	; 198
    47a8:	f5 e4       	ldi	r31, 0x45	; 69
    47aa:	8f e4       	ldi	r24, 0x4F	; 79
    47ac:	95 e3       	ldi	r25, 0x35	; 53
    47ae:	80 83       	st	Z, r24
    47b0:	91 83       	std	Z+1, r25	; 0x01
    47b2:	12 82       	std	Z+2, r1	; 0x02
			}
			
			bool repeat = true;
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    47b8:	40 e0       	ldi	r20, 0x00	; 0
    47ba:	50 e0       	ldi	r21, 0x00	; 0
    47bc:	be 01       	movw	r22, r28
    47be:	6f 5f       	subi	r22, 0xFF	; 255
    47c0:	7f 4f       	sbci	r23, 0xFF	; 255
    47c2:	86 ec       	ldi	r24, 0xC6	; 198
    47c4:	95 e4       	ldi	r25, 0x45	; 69
    47c6:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 15;
    47ca:	8f e0       	ldi	r24, 0x0F	; 15
    47cc:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    47d0:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    47d4:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    47d8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    47dc:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    47e0:	88 e5       	ldi	r24, 0x58	; 88
    47e2:	92 e0       	ldi	r25, 0x02	; 2
    47e4:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    47e8:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 12;						/* on period is very long */
    47ec:	8c e0       	ldi	r24, 0x0C	; 12
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    47f4:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    47f8:	80 e3       	ldi	r24, 0x30	; 48
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    4800:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4804:	38 c0       	rjmp	.+112    	; 0x4876 <_Z11setupForFoxP5Fox_t13EventAction_t+0x320>
#endif // SUPPORT_TEMP_AND_VOLTAGE_REPORTING


		case SPECTATOR:
		{
			sprintf(g_messages_text[PATTERN_TEXT], "S");
    4806:	83 e5       	ldi	r24, 0x53	; 83
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	80 93 c6 45 	sts	0x45C6, r24	; 0x8045c6 <g_messages_text>
    480e:	90 93 c7 45 	sts	0x45C7, r25	; 0x8045c7 <g_messages_text+0x1>
			patternNotSet = false;
    4812:	80 e0       	ldi	r24, 0x00	; 0
    4814:	01 c0       	rjmp	.+2      	; 0x4818 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c2>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4816:	81 e0       	ldi	r24, 0x01	; 1
			patternNotSet = false;
		}
		case BEACON:
		default:
		{
			if(patternNotSet)
    4818:	88 23       	and	r24, r24
    481a:	39 f0       	breq	.+14     	; 0x482a <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d4>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO");
    481c:	e6 ec       	ldi	r30, 0xC6	; 198
    481e:	f5 e4       	ldi	r31, 0x45	; 69
    4820:	8d e4       	ldi	r24, 0x4D	; 77
    4822:	9f e4       	ldi	r25, 0x4F	; 79
    4824:	80 83       	st	Z, r24
    4826:	91 83       	std	Z+1, r25	; 0x01
    4828:	12 82       	std	Z+2, r1	; 0x02
			}
			
			bool repeat = true;
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    482e:	40 e0       	ldi	r20, 0x00	; 0
    4830:	50 e0       	ldi	r21, 0x00	; 0
    4832:	be 01       	movw	r22, r28
    4834:	6f 5f       	subi	r22, 0xFF	; 255
    4836:	7f 4f       	sbci	r23, 0xFF	; 255
    4838:	86 ec       	ldi	r24, 0xC6	; 198
    483a:	95 e4       	ldi	r25, 0x45	; 69
    483c:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    4840:	88 e0       	ldi	r24, 0x08	; 8
    4842:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4846:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    484a:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    484e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4852:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_sendID_seconds_countdown = 600;			/* wait 10 minutes send the ID */
    4856:	88 e5       	ldi	r24, 0x58	; 88
    4858:	92 e0       	ldi	r25, 0x02	; 2
    485a:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL26g_sendID_seconds_countdown>
    485e:	90 93 c1 45 	sts	0x45C1, r25	; 0x8045c1 <_ZL26g_sendID_seconds_countdown+0x1>
			g_on_air_seconds = 60;						/* on period is very long */
    4862:	8c e3       	ldi	r24, 0x3C	; 60
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    486a:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 0;						/* off period is very short */
    486e:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    4872:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
	}

	if(action == START_NOTHING)
    4876:	11 11       	cpse	r17, r1
    4878:	0a c0       	rjmp	.+20     	; 0x488e <_Z11setupForFoxP5Fox_t13EventAction_t+0x338>
	{
		g_event_commenced = false;                   /* get things running immediately */
    487a:	10 92 fd 45 	sts	0x45FD, r1	; 0x8045fd <g_event_commenced>
		g_event_enabled = false;                     /* get things running immediately */
    487e:	10 92 fc 45 	sts	0x45FC, r1	; 0x8045fc <g_event_enabled>

 		g_use_rtc_for_startstop = false;
    4882:	10 92 26 46 	sts	0x4626, r1	; 0x804626 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    4886:	81 e0       	ldi	r24, 0x01	; 1
    4888:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    488c:	46 c0       	rjmp	.+140    	; 0x491a <_Z11setupForFoxP5Fox_t13EventAction_t+0x3c4>
	}
	else if(action == START_EVENT_NOW)
    488e:	11 30       	cpi	r17, 0x01	; 1
    4890:	51 f4       	brne	.+20     	; 0x48a6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x350>
	{
// 		g_seconds_since_sync = 0;                   /* Total elapsed time since synchronization */
 		g_use_rtc_for_startstop = false;
    4892:	10 92 26 46 	sts	0x4626, r1	; 0x804626 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = false;
    4896:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
		g_event_commenced = true;					/* get things running immediately */
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	80 93 fd 45 	sts	0x45FD, r24	; 0x8045fd <g_event_commenced>
		g_event_enabled = true;						/* get things running immediately */
    48a0:	80 93 fc 45 	sts	0x45FC, r24	; 0x8045fc <g_event_enabled>
    48a4:	3a c0       	rjmp	.+116    	; 0x491a <_Z11setupForFoxP5Fox_t13EventAction_t+0x3c4>
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    48a6:	12 30       	cpi	r17, 0x02	; 2
    48a8:	79 f5       	brne	.+94     	; 0x4908 <_Z11setupForFoxP5Fox_t13EventAction_t+0x3b2>
	{
		bool repeat = true;
    48aa:	11 e0       	ldi	r17, 0x01	; 1
    48ac:	19 83       	std	Y+1, r17	; 0x01
		makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    48ae:	40 e0       	ldi	r20, 0x00	; 0
    48b0:	50 e0       	ldi	r21, 0x00	; 0
    48b2:	be 01       	movw	r22, r28
    48b4:	6f 5f       	subi	r22, 0xFF	; 255
    48b6:	7f 4f       	sbci	r23, 0xFF	; 255
    48b8:	86 ec       	ldi	r24, 0xC6	; 198
    48ba:	95 e4       	ldi	r25, 0x45	; 69
    48bc:	0e 94 67 38 	call	0x70ce	; 0x70ce <_Z9makeMorsePcPbS0_>
		g_code_throttle = throttleValue(g_pattern_codespeed);
    48c0:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    48c4:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_Z13throttleValueh>
    48c8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    48cc:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

// 		g_event_start_time = 1;                     /* have it start a long time ago */
// 		g_event_finish_time = MAX_TIME;             /* run for a long long time */
		g_on_the_air = g_on_air_seconds;			/* start out transmitting */
    48d0:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    48d4:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    48d8:	09 2e       	mov	r0, r25
    48da:	00 0c       	add	r0, r0
    48dc:	aa 0b       	sbc	r26, r26
    48de:	bb 0b       	sbc	r27, r27
    48e0:	80 93 bc 45 	sts	0x45BC, r24	; 0x8045bc <_ZL12g_on_the_air>
    48e4:	90 93 bd 45 	sts	0x45BD, r25	; 0x8045bd <_ZL12g_on_the_air+0x1>
    48e8:	a0 93 be 45 	sts	0x45BE, r26	; 0x8045be <_ZL12g_on_the_air+0x2>
    48ec:	b0 93 bf 45 	sts	0x45BF, r27	; 0x8045bf <_ZL12g_on_the_air+0x3>
		g_event_commenced = true;                   /* get things running immediately */
    48f0:	10 93 fd 45 	sts	0x45FD, r17	; 0x8045fd <g_event_commenced>
		g_event_enabled = true;                     /* get things running immediately */
    48f4:	10 93 fc 45 	sts	0x45FC, r17	; 0x8045fc <g_event_enabled>
		g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    48f8:	8d ef       	ldi	r24, 0xFD	; 253
    48fa:	80 93 b8 45 	sts	0x45B8, r24	; 0x8045b8 <_ZL18g_last_status_code>
		
// 		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
 		g_use_rtc_for_startstop = false;
    48fe:	10 92 26 46 	sts	0x4626, r1	; 0x804626 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = false;
    4902:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    4906:	09 c0       	rjmp	.+18     	; 0x491a <_Z11setupForFoxP5Fox_t13EventAction_t+0x3c4>
// 		g_initialize_fox_transmissions = INIT_EVENT_STARTING_NOW;
	}
	else         /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		SC sc;
 		EC ec = activateEventUsingCurrentSettings(&sc);
    4908:	ce 01       	movw	r24, r28
    490a:	01 96       	adiw	r24, 0x01	; 1
    490c:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_Z33activateEventUsingCurrentSettingsP2SC>
 
 		g_use_rtc_for_startstop = true;
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	80 93 26 46 	sts	0x4626, r24	; 0x804626 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    4916:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
// 	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
// 	g_sendAMmodulation = false;
// 	g_LED_enunciating = false;
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */

	sei();
    491a:	78 94       	sei
}
    491c:	0f 90       	pop	r0
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	1f 91       	pop	r17
    4924:	08 95       	ret

00004926 <_Z18validateTimeStringPcPma>:

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    4926:	4f 92       	push	r4
    4928:	5f 92       	push	r5
    492a:	6f 92       	push	r6
    492c:	7f 92       	push	r7
    492e:	af 92       	push	r10
    4930:	bf 92       	push	r11
    4932:	cf 92       	push	r12
    4934:	df 92       	push	r13
    4936:	ef 92       	push	r14
    4938:	ff 92       	push	r15
    493a:	0f 93       	push	r16
    493c:	1f 93       	push	r17
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	8c 01       	movw	r16, r24
    4944:	a4 2e       	mov	r10, r20
	time_t valid = 0;
	int len = strlen(str);
    4946:	fc 01       	movw	r30, r24
    4948:	01 90       	ld	r0, Z+
    494a:	00 20       	and	r0, r0
    494c:	e9 f7       	brne	.-6      	; 0x4948 <_Z18validateTimeStringPcPma+0x22>
    494e:	31 97       	sbiw	r30, 0x01	; 1
    4950:	ef 01       	movw	r28, r30
    4952:	c8 1b       	sub	r28, r24
    4954:	d9 0b       	sbc	r29, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    4956:	26 e4       	ldi	r18, 0x46	; 70
    4958:	61 31       	cpi	r22, 0x11	; 17
    495a:	72 07       	cpc	r23, r18
    495c:	e1 f4       	brne	.+56     	; 0x4996 <_Z18validateTimeStringPcPma+0x70>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    495e:	c0 90 22 46 	lds	r12, 0x4622	; 0x804622 <g_current_epoch>
    4962:	d0 90 23 46 	lds	r13, 0x4623	; 0x804623 <g_current_epoch+0x1>
    4966:	e0 90 24 46 	lds	r14, 0x4624	; 0x804624 <g_current_epoch+0x2>
    496a:	f0 90 25 46 	lds	r15, 0x4625	; 0x804625 <g_current_epoch+0x3>
    496e:	c1 14       	cp	r12, r1
    4970:	86 e6       	ldi	r24, 0x66	; 102
    4972:	d8 06       	cpc	r13, r24
    4974:	8e ee       	ldi	r24, 0xEE	; 238
    4976:	e8 06       	cpc	r14, r24
    4978:	8f e5       	ldi	r24, 0x5F	; 95
    497a:	f8 06       	cpc	r15, r24
    497c:	50 f5       	brcc	.+84     	; 0x49d2 <_Z18validateTimeStringPcPma+0xac>
		validationType = 1;
    497e:	bb 24       	eor	r11, r11
    4980:	b3 94       	inc	r11
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4982:	0f 2e       	mov	r0, r31
    4984:	c1 2c       	mov	r12, r1
    4986:	f6 e6       	ldi	r31, 0x66	; 102
    4988:	df 2e       	mov	r13, r31
    498a:	fe ee       	ldi	r31, 0xEE	; 238
    498c:	ef 2e       	mov	r14, r31
    498e:	ff e5       	ldi	r31, 0x5F	; 95
    4990:	ff 2e       	mov	r15, r31
    4992:	f0 2d       	mov	r31, r0
    4994:	2f c0       	rjmp	.+94     	; 0x49f4 <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
    4996:	65 51       	subi	r22, 0x15	; 21
    4998:	76 44       	sbci	r23, 0x46	; 70
    499a:	f1 f4       	brne	.+60     	; 0x49d8 <_Z18validateTimeStringPcPma+0xb2>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    499c:	c0 90 11 46 	lds	r12, 0x4611	; 0x804611 <g_event_start_epoch>
    49a0:	d0 90 12 46 	lds	r13, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    49a4:	e0 90 13 46 	lds	r14, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    49a8:	f0 90 14 46 	lds	r15, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    49ac:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    49b0:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    49b4:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    49b8:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    49bc:	c8 16       	cp	r12, r24
    49be:	d9 06       	cpc	r13, r25
    49c0:	ea 06       	cpc	r14, r26
    49c2:	fb 06       	cpc	r15, r27
    49c4:	a0 f4       	brcc	.+40     	; 0x49ee <_Z18validateTimeStringPcPma+0xc8>
    49c6:	6c 01       	movw	r12, r24
    49c8:	7d 01       	movw	r14, r26
		validationType = 2;
    49ca:	68 94       	set
    49cc:	bb 24       	eor	r11, r11
    49ce:	b1 f8       	bld	r11, 1
    49d0:	11 c0       	rjmp	.+34     	; 0x49f4 <_Z18validateTimeStringPcPma+0xce>
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
    49d2:	bb 24       	eor	r11, r11
    49d4:	b3 94       	inc	r11
    49d6:	0e c0       	rjmp	.+28     	; 0x49f4 <_Z18validateTimeStringPcPma+0xce>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    49d8:	b1 2c       	mov	r11, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    49da:	0f 2e       	mov	r0, r31
    49dc:	c1 2c       	mov	r12, r1
    49de:	f6 e6       	ldi	r31, 0x66	; 102
    49e0:	df 2e       	mov	r13, r31
    49e2:	fe ee       	ldi	r31, 0xEE	; 238
    49e4:	ef 2e       	mov	r14, r31
    49e6:	ff e5       	ldi	r31, 0x5F	; 95
    49e8:	ff 2e       	mov	r15, r31
    49ea:	f0 2d       	mov	r31, r0
    49ec:	03 c0       	rjmp	.+6      	; 0x49f4 <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
    49ee:	68 94       	set
    49f0:	bb 24       	eor	r11, r11
    49f2:	b1 f8       	bld	r11, 1
	}
	
	if(len == 10)
    49f4:	ca 30       	cpi	r28, 0x0A	; 10
    49f6:	d1 05       	cpc	r29, r1
    49f8:	39 f4       	brne	.+14     	; 0x4a08 <_Z18validateTimeStringPcPma+0xe2>
	{
		str[10] = '0';
    49fa:	80 e3       	ldi	r24, 0x30	; 48
    49fc:	f8 01       	movw	r30, r16
    49fe:	82 87       	std	Z+10, r24	; 0x0a
		str[11] = '0';
    4a00:	83 87       	std	Z+11, r24	; 0x0b
		str[12] = '\0';
    4a02:	14 86       	std	Z+12, r1	; 0x0c
		len = 12;
    4a04:	cc e0       	ldi	r28, 0x0C	; 12
    4a06:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if((len == 12) && (only_digits(str)))
    4a08:	cc 30       	cpi	r28, 0x0C	; 12
    4a0a:	d1 05       	cpc	r29, r1
    4a0c:	21 f4       	brne	.+8      	; 0x4a16 <_Z18validateTimeStringPcPma+0xf0>
    4a0e:	c8 01       	movw	r24, r16
    4a10:	0e 94 22 46 	call	0x8c44	; 0x8c44 <_Z11only_digitsPc>
    4a14:	01 c0       	rjmp	.+2      	; 0x4a18 <_Z18validateTimeStringPcPma+0xf2>
    4a16:	80 e0       	ldi	r24, 0x00	; 0
    4a18:	88 23       	and	r24, r24
    4a1a:	09 f4       	brne	.+2      	; 0x4a1e <_Z18validateTimeStringPcPma+0xf8>
    4a1c:	4b c0       	rjmp	.+150    	; 0x4ab4 <_Z18validateTimeStringPcPma+0x18e>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    4a1e:	b8 01       	movw	r22, r16
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <RTC_String2Epoch>
    4a28:	2b 01       	movw	r4, r22
    4a2a:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    4a2c:	aa 2d       	mov	r26, r10
    4a2e:	aa 0c       	add	r10, r10
    4a30:	bb 0b       	sbc	r27, r27
    4a32:	20 e1       	ldi	r18, 0x10	; 16
    4a34:	3e e0       	ldi	r19, 0x0E	; 14
    4a36:	0e 94 00 49 	call	0x9200	; 0x9200 <__usmulhisi3>
    4a3a:	64 0d       	add	r22, r4
    4a3c:	75 1d       	adc	r23, r5
    4a3e:	86 1d       	adc	r24, r6
    4a40:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    4a42:	c6 16       	cp	r12, r22
    4a44:	d7 06       	cpc	r13, r23
    4a46:	e8 06       	cpc	r14, r24
    4a48:	f9 06       	cpc	r15, r25
    4a4a:	08 f4       	brcc	.+2      	; 0x4a4e <_Z18validateTimeStringPcPma+0x128>
    4a4c:	40 c0       	rjmp	.+128    	; 0x4ace <_Z18validateTimeStringPcPma+0x1a8>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    4a4e:	f1 e0       	ldi	r31, 0x01	; 1
    4a50:	bf 12       	cpse	r11, r31
    4a52:	08 c0       	rjmp	.+16     	; 0x4a64 <_Z18validateTimeStringPcPma+0x13e>
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
    4a54:	8b e0       	ldi	r24, 0x0B	; 11
    4a56:	93 e4       	ldi	r25, 0x43	; 67
    4a58:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a5c:	60 e0       	ldi	r22, 0x00	; 0
    4a5e:	70 e0       	ldi	r23, 0x00	; 0
    4a60:	cb 01       	movw	r24, r22
    4a62:	35 c0       	rjmp	.+106    	; 0x4ace <_Z18validateTimeStringPcPma+0x1a8>
		{
			if(validationType == 1)         /* start time validation */
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
			}
			else if(validationType == 2)    /* finish time validation */
    4a64:	22 e0       	ldi	r18, 0x02	; 2
    4a66:	b2 12       	cpse	r11, r18
    4a68:	1d c0       	rjmp	.+58     	; 0x4aa4 <_Z18validateTimeStringPcPma+0x17e>
			{
				if(ep < g_current_epoch)
    4a6a:	00 91 22 46 	lds	r16, 0x4622	; 0x804622 <g_current_epoch>
    4a6e:	10 91 23 46 	lds	r17, 0x4623	; 0x804623 <g_current_epoch+0x1>
    4a72:	20 91 24 46 	lds	r18, 0x4624	; 0x804624 <g_current_epoch+0x2>
    4a76:	30 91 25 46 	lds	r19, 0x4625	; 0x804625 <g_current_epoch+0x3>
    4a7a:	60 17       	cp	r22, r16
    4a7c:	71 07       	cpc	r23, r17
    4a7e:	82 07       	cpc	r24, r18
    4a80:	93 07       	cpc	r25, r19
    4a82:	40 f4       	brcc	.+16     	; 0x4a94 <_Z18validateTimeStringPcPma+0x16e>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
    4a84:	80 e2       	ldi	r24, 0x20	; 32
    4a86:	93 e4       	ldi	r25, 0x43	; 67
    4a88:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a8c:	60 e0       	ldi	r22, 0x00	; 0
    4a8e:	70 e0       	ldi	r23, 0x00	; 0
    4a90:	cb 01       	movw	r24, r22
    4a92:	1d c0       	rjmp	.+58     	; 0x4ace <_Z18validateTimeStringPcPma+0x1a8>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
				}
				else
				{
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
    4a94:	86 e3       	ldi	r24, 0x36	; 54
    4a96:	93 e4       	ldi	r25, 0x43	; 67
    4a98:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	70 e0       	ldi	r23, 0x00	; 0
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	15 c0       	rjmp	.+42     	; 0x4ace <_Z18validateTimeStringPcPma+0x1a8>
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
				}
			}
			else    /* current time validation */
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
    4aa4:	81 e5       	ldi	r24, 0x51	; 81
    4aa6:	93 e4       	ldi	r25, 0x43	; 67
    4aa8:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4aac:	60 e0       	ldi	r22, 0x00	; 0
    4aae:	70 e0       	ldi	r23, 0x00	; 0
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	0d c0       	rjmp	.+26     	; 0x4ace <_Z18validateTimeStringPcPma+0x1a8>
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
			}
		}
	}
	else if(len)
    4ab4:	cd 2b       	or	r28, r29
    4ab6:	41 f0       	breq	.+16     	; 0x4ac8 <_Z18validateTimeStringPcPma+0x1a2>
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
    4ab8:	85 e6       	ldi	r24, 0x65	; 101
    4aba:	93 e4       	ldi	r25, 0x43	; 67
    4abc:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4ac0:	60 e0       	ldi	r22, 0x00	; 0
    4ac2:	70 e0       	ldi	r23, 0x00	; 0
    4ac4:	cb 01       	movw	r24, r22
    4ac6:	03 c0       	rjmp	.+6      	; 0x4ace <_Z18validateTimeStringPcPma+0x1a8>
    4ac8:	60 e0       	ldi	r22, 0x00	; 0
    4aca:	70 e0       	ldi	r23, 0x00	; 0
    4acc:	cb 01       	movw	r24, r22
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
	}

	return(valid);
}
    4ace:	df 91       	pop	r29
    4ad0:	cf 91       	pop	r28
    4ad2:	1f 91       	pop	r17
    4ad4:	0f 91       	pop	r16
    4ad6:	ff 90       	pop	r15
    4ad8:	ef 90       	pop	r14
    4ada:	df 90       	pop	r13
    4adc:	cf 90       	pop	r12
    4ade:	bf 90       	pop	r11
    4ae0:	af 90       	pop	r10
    4ae2:	7f 90       	pop	r7
    4ae4:	6f 90       	pop	r6
    4ae6:	5f 90       	pop	r5
    4ae8:	4f 90       	pop	r4
    4aea:	08 95       	ret

00004aec <_Z14reportTimeTillmmPKcS0_>:


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    4aec:	2f 92       	push	r2
    4aee:	3f 92       	push	r3
    4af0:	4f 92       	push	r4
    4af2:	5f 92       	push	r5
    4af4:	6f 92       	push	r6
    4af6:	7f 92       	push	r7
    4af8:	8f 92       	push	r8
    4afa:	9f 92       	push	r9
    4afc:	af 92       	push	r10
    4afe:	bf 92       	push	r11
    4b00:	cf 92       	push	r12
    4b02:	df 92       	push	r13
    4b04:	ef 92       	push	r14
    4b06:	ff 92       	push	r15
    4b08:	0f 93       	push	r16
    4b0a:	1f 93       	push	r17
    4b0c:	cf 93       	push	r28
    4b0e:	df 93       	push	r29
    4b10:	cd b7       	in	r28, 0x3d	; 61
    4b12:	de b7       	in	r29, 0x3e	; 62
    4b14:	2c 97       	sbiw	r28, 0x0c	; 12
    4b16:	cd bf       	out	0x3d, r28	; 61
    4b18:	de bf       	out	0x3e, r29	; 62
    4b1a:	2b 01       	movw	r4, r22
    4b1c:	3c 01       	movw	r6, r24
    4b1e:	49 01       	movw	r8, r18
    4b20:	5a 01       	movw	r10, r20
	bool failure = false;

	if(from >= until)   /* Negative time */
    4b22:	62 17       	cp	r22, r18
    4b24:	73 07       	cpc	r23, r19
    4b26:	84 07       	cpc	r24, r20
    4b28:	95 07       	cpc	r25, r21
    4b2a:	48 f0       	brcs	.+18     	; 0x4b3e <_Z14reportTimeTillmmPKcS0_+0x52>
	{
		failure = true;
		if(failMsg)
    4b2c:	e1 14       	cp	r14, r1
    4b2e:	f1 04       	cpc	r15, r1
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <_Z14reportTimeTillmmPKcS0_+0x48>
    4b32:	fd c0       	rjmp	.+506    	; 0x4d2e <_Z14reportTimeTillmmPKcS0_+0x242>
		{
			sb_send_string((char*)failMsg);
    4b34:	c7 01       	movw	r24, r14
    4b36:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
{
	bool failure = false;

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4b3a:	81 e0       	ldi	r24, 0x01	; 1
    4b3c:	f9 c0       	rjmp	.+498    	; 0x4d30 <_Z14reportTimeTillmmPKcS0_+0x244>
			sb_send_string((char*)failMsg);
		}
	}
	else
	{
		if(prefix)
    4b3e:	01 15       	cp	r16, r1
    4b40:	11 05       	cpc	r17, r1
    4b42:	19 f0       	breq	.+6      	; 0x4b4a <_Z14reportTimeTillmmPKcS0_+0x5e>
		{
			sb_send_string((char*)prefix);
    4b44:	c8 01       	movw	r24, r16
    4b46:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
		}
		time_t dif = until - from;
    4b4a:	75 01       	movw	r14, r10
    4b4c:	64 01       	movw	r12, r8
    4b4e:	c4 18       	sub	r12, r4
    4b50:	d5 08       	sbc	r13, r5
    4b52:	e6 08       	sbc	r14, r6
    4b54:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    4b56:	c7 01       	movw	r24, r14
    4b58:	b6 01       	movw	r22, r12
    4b5a:	20 e8       	ldi	r18, 0x80	; 128
    4b5c:	33 e3       	ldi	r19, 0x33	; 51
    4b5e:	41 ee       	ldi	r20, 0xE1	; 225
    4b60:	51 e0       	ldi	r21, 0x01	; 1
    4b62:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    4b66:	29 01       	movw	r4, r18
    4b68:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    4b6a:	44 27       	eor	r20, r20
    4b6c:	55 27       	eor	r21, r21
    4b6e:	60 e8       	ldi	r22, 0x80	; 128
    4b70:	73 e3       	ldi	r23, 0x33	; 51
    4b72:	81 ee       	ldi	r24, 0xE1	; 225
    4b74:	91 e0       	ldi	r25, 0x01	; 1
    4b76:	0e 94 6f 48 	call	0x90de	; 0x90de <__mulsi3>
    4b7a:	c6 1a       	sub	r12, r22
    4b7c:	d7 0a       	sbc	r13, r23
    4b7e:	e8 0a       	sbc	r14, r24
    4b80:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    4b82:	c7 01       	movw	r24, r14
    4b84:	b6 01       	movw	r22, r12
    4b86:	20 e8       	ldi	r18, 0x80	; 128
    4b88:	31 e5       	ldi	r19, 0x51	; 81
    4b8a:	41 e0       	ldi	r20, 0x01	; 1
    4b8c:	50 e0       	ldi	r21, 0x00	; 0
    4b8e:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    4b92:	49 01       	movw	r8, r18
    4b94:	5a 01       	movw	r10, r20
    4b96:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    4b98:	44 27       	eor	r20, r20
    4b9a:	55 27       	eor	r21, r21
    4b9c:	60 e8       	ldi	r22, 0x80	; 128
    4b9e:	71 e5       	ldi	r23, 0x51	; 81
    4ba0:	81 e0       	ldi	r24, 0x01	; 1
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	0e 94 6f 48 	call	0x90de	; 0x90de <__mulsi3>
    4ba8:	c6 1a       	sub	r12, r22
    4baa:	d7 0a       	sbc	r13, r23
    4bac:	e8 0a       	sbc	r14, r24
    4bae:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    4bb0:	c7 01       	movw	r24, r14
    4bb2:	b6 01       	movw	r22, r12
    4bb4:	20 e1       	ldi	r18, 0x10	; 16
    4bb6:	3e e0       	ldi	r19, 0x0E	; 14
    4bb8:	40 e0       	ldi	r20, 0x00	; 0
    4bba:	50 e0       	ldi	r21, 0x00	; 0
    4bbc:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    4bc0:	29 83       	std	Y+1, r18	; 0x01
    4bc2:	3a 83       	std	Y+2, r19	; 0x02
    4bc4:	4b 83       	std	Y+3, r20	; 0x03
    4bc6:	5c 83       	std	Y+4, r21	; 0x04
    4bc8:	29 81       	ldd	r18, Y+1	; 0x01
    4bca:	3a 81       	ldd	r19, Y+2	; 0x02
    4bcc:	29 87       	std	Y+9, r18	; 0x09
    4bce:	3a 87       	std	Y+10, r19	; 0x0a
		hold -= (hours * HOUR);
    4bd0:	29 81       	ldd	r18, Y+1	; 0x01
    4bd2:	3a 81       	ldd	r19, Y+2	; 0x02
    4bd4:	4b 81       	ldd	r20, Y+3	; 0x03
    4bd6:	5c 81       	ldd	r21, Y+4	; 0x04
    4bd8:	44 27       	eor	r20, r20
    4bda:	55 27       	eor	r21, r21
    4bdc:	a0 e1       	ldi	r26, 0x10	; 16
    4bde:	be e0       	ldi	r27, 0x0E	; 14
    4be0:	0e 94 07 49 	call	0x920e	; 0x920e <__muluhisi3>
    4be4:	c6 1a       	sub	r12, r22
    4be6:	d7 0a       	sbc	r13, r23
    4be8:	e8 0a       	sbc	r14, r24
    4bea:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    4bec:	c7 01       	movw	r24, r14
    4bee:	b6 01       	movw	r22, r12
    4bf0:	2c e3       	ldi	r18, 0x3C	; 60
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	40 e0       	ldi	r20, 0x00	; 0
    4bf6:	50 e0       	ldi	r21, 0x00	; 0
    4bf8:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    4bfc:	2d 83       	std	Y+5, r18	; 0x05
    4bfe:	3e 83       	std	Y+6, r19	; 0x06
    4c00:	4f 83       	std	Y+7, r20	; 0x07
    4c02:	58 87       	std	Y+8, r21	; 0x08
    4c04:	0d 81       	ldd	r16, Y+5	; 0x05
    4c06:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    4c08:	2c e3       	ldi	r18, 0x3C	; 60
    4c0a:	20 9f       	mul	r18, r16
    4c0c:	c0 01       	movw	r24, r0
    4c0e:	21 9f       	mul	r18, r17
    4c10:	90 0d       	add	r25, r0
    4c12:	11 24       	eor	r1, r1
    4c14:	a6 01       	movw	r20, r12
    4c16:	48 1b       	sub	r20, r24
    4c18:	59 0b       	sbc	r21, r25
    4c1a:	4b 87       	std	Y+11, r20	; 0x0b
    4c1c:	5c 87       	std	Y+12, r21	; 0x0c

		g_tempStr[0] = '\0';
    4c1e:	10 92 85 45 	sts	0x4585, r1	; 0x804585 <_ZL9g_tempStr>

		if(years)
    4c22:	41 14       	cp	r4, r1
    4c24:	51 04       	cpc	r5, r1
    4c26:	b1 f0       	breq	.+44     	; 0x4c54 <_Z14reportTimeTillmmPKcS0_+0x168>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    4c28:	5f 92       	push	r5
    4c2a:	4f 92       	push	r4
    4c2c:	89 e7       	ldi	r24, 0x79	; 121
    4c2e:	93 e4       	ldi	r25, 0x43	; 67
    4c30:	9f 93       	push	r25
    4c32:	8f 93       	push	r24
    4c34:	85 e8       	ldi	r24, 0x85	; 133
    4c36:	95 e4       	ldi	r25, 0x45	; 69
    4c38:	9f 93       	push	r25
    4c3a:	8f 93       	push	r24
    4c3c:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
			sb_send_string(g_tempStr);
    4c40:	85 e8       	ldi	r24, 0x85	; 133
    4c42:	95 e4       	ldi	r25, 0x45	; 69
    4c44:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    4c48:	0f 90       	pop	r0
    4c4a:	0f 90       	pop	r0
    4c4c:	0f 90       	pop	r0
    4c4e:	0f 90       	pop	r0
    4c50:	0f 90       	pop	r0
    4c52:	0f 90       	pop	r0
		}

		if(days)
    4c54:	23 28       	or	r2, r3
    4c56:	b1 f0       	breq	.+44     	; 0x4c84 <_Z14reportTimeTillmmPKcS0_+0x198>
		{
			sprintf(g_tempStr, "%d days ", days);
    4c58:	9f 92       	push	r9
    4c5a:	8f 92       	push	r8
    4c5c:	81 e8       	ldi	r24, 0x81	; 129
    4c5e:	93 e4       	ldi	r25, 0x43	; 67
    4c60:	9f 93       	push	r25
    4c62:	8f 93       	push	r24
    4c64:	85 e8       	ldi	r24, 0x85	; 133
    4c66:	95 e4       	ldi	r25, 0x45	; 69
    4c68:	9f 93       	push	r25
    4c6a:	8f 93       	push	r24
    4c6c:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
			sb_send_string(g_tempStr);
    4c70:	85 e8       	ldi	r24, 0x85	; 133
    4c72:	95 e4       	ldi	r25, 0x45	; 69
    4c74:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    4c78:	0f 90       	pop	r0
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	0f 90       	pop	r0
    4c82:	0f 90       	pop	r0
		}

		if(hours)
    4c84:	89 85       	ldd	r24, Y+9	; 0x09
    4c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c88:	89 2b       	or	r24, r25
    4c8a:	c1 f0       	breq	.+48     	; 0x4cbc <_Z14reportTimeTillmmPKcS0_+0x1d0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    4c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8e:	9f 93       	push	r25
    4c90:	e9 81       	ldd	r30, Y+1	; 0x01
    4c92:	ef 93       	push	r30
    4c94:	8a e8       	ldi	r24, 0x8A	; 138
    4c96:	93 e4       	ldi	r25, 0x43	; 67
    4c98:	9f 93       	push	r25
    4c9a:	8f 93       	push	r24
    4c9c:	85 e8       	ldi	r24, 0x85	; 133
    4c9e:	95 e4       	ldi	r25, 0x45	; 69
    4ca0:	9f 93       	push	r25
    4ca2:	8f 93       	push	r24
    4ca4:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
			sb_send_string(g_tempStr);
    4ca8:	85 e8       	ldi	r24, 0x85	; 133
    4caa:	95 e4       	ldi	r25, 0x45	; 69
    4cac:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    4cb0:	0f 90       	pop	r0
    4cb2:	0f 90       	pop	r0
    4cb4:	0f 90       	pop	r0
    4cb6:	0f 90       	pop	r0
    4cb8:	0f 90       	pop	r0
    4cba:	0f 90       	pop	r0
		}

		if(minutes)
    4cbc:	01 2b       	or	r16, r17
    4cbe:	c1 f0       	breq	.+48     	; 0x4cf0 <_Z14reportTimeTillmmPKcS0_+0x204>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    4cc0:	fe 81       	ldd	r31, Y+6	; 0x06
    4cc2:	ff 93       	push	r31
    4cc4:	2d 81       	ldd	r18, Y+5	; 0x05
    4cc6:	2f 93       	push	r18
    4cc8:	82 e9       	ldi	r24, 0x92	; 146
    4cca:	93 e4       	ldi	r25, 0x43	; 67
    4ccc:	9f 93       	push	r25
    4cce:	8f 93       	push	r24
    4cd0:	85 e8       	ldi	r24, 0x85	; 133
    4cd2:	95 e4       	ldi	r25, 0x45	; 69
    4cd4:	9f 93       	push	r25
    4cd6:	8f 93       	push	r24
    4cd8:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
			sb_send_string(g_tempStr);
    4cdc:	85 e8       	ldi	r24, 0x85	; 133
    4cde:	95 e4       	ldi	r25, 0x45	; 69
    4ce0:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    4ce4:	0f 90       	pop	r0
    4ce6:	0f 90       	pop	r0
    4ce8:	0f 90       	pop	r0
    4cea:	0f 90       	pop	r0
    4cec:	0f 90       	pop	r0
    4cee:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    4cf0:	3c 85       	ldd	r19, Y+12	; 0x0c
    4cf2:	3f 93       	push	r19
    4cf4:	4b 85       	ldd	r20, Y+11	; 0x0b
    4cf6:	4f 93       	push	r20
    4cf8:	8a e9       	ldi	r24, 0x9A	; 154
    4cfa:	93 e4       	ldi	r25, 0x43	; 67
    4cfc:	9f 93       	push	r25
    4cfe:	8f 93       	push	r24
    4d00:	85 e8       	ldi	r24, 0x85	; 133
    4d02:	95 e4       	ldi	r25, 0x45	; 69
    4d04:	9f 93       	push	r25
    4d06:	8f 93       	push	r24
    4d08:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
		sb_send_string(g_tempStr);
    4d0c:	85 e8       	ldi	r24, 0x85	; 133
    4d0e:	95 e4       	ldi	r25, 0x45	; 69
    4d10:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>

		sb_send_NewLine();
    4d14:	0e 94 0a 3b 	call	0x7614	; 0x7614 <sb_send_NewLine>
		g_tempStr[0] = '\0';
    4d18:	e5 e8       	ldi	r30, 0x85	; 133
    4d1a:	f5 e4       	ldi	r31, 0x45	; 69
    4d1c:	10 82       	st	Z, r1
    4d1e:	0f 90       	pop	r0
    4d20:	0f 90       	pop	r0
    4d22:	0f 90       	pop	r0
    4d24:	0f 90       	pop	r0
    4d26:	0f 90       	pop	r0
    4d28:	0f 90       	pop	r0
}


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	bool failure = false;
    4d2a:	80 e0       	ldi	r24, 0x00	; 0
    4d2c:	01 c0       	rjmp	.+2      	; 0x4d30 <_Z14reportTimeTillmmPKcS0_+0x244>

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
		sb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    4d30:	2c 96       	adiw	r28, 0x0c	; 12
    4d32:	cd bf       	out	0x3d, r28	; 61
    4d34:	de bf       	out	0x3e, r29	; 62
    4d36:	df 91       	pop	r29
    4d38:	cf 91       	pop	r28
    4d3a:	1f 91       	pop	r17
    4d3c:	0f 91       	pop	r16
    4d3e:	ff 90       	pop	r15
    4d40:	ef 90       	pop	r14
    4d42:	df 90       	pop	r13
    4d44:	cf 90       	pop	r12
    4d46:	bf 90       	pop	r11
    4d48:	af 90       	pop	r10
    4d4a:	9f 90       	pop	r9
    4d4c:	8f 90       	pop	r8
    4d4e:	7f 90       	pop	r7
    4d50:	6f 90       	pop	r6
    4d52:	5f 90       	pop	r5
    4d54:	4f 90       	pop	r4
    4d56:	3f 90       	pop	r3
    4d58:	2f 90       	pop	r2
    4d5a:	08 95       	ret

00004d5c <_Z23clockConfigurationCheckv>:



ConfigurationState_t clockConfigurationCheck(void)
{
    4d5c:	0f 93       	push	r16
    4d5e:	1f 93       	push	r17
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
    4d60:	80 91 15 46 	lds	r24, 0x4615	; 0x804615 <g_event_finish_epoch>
    4d64:	90 91 16 46 	lds	r25, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    4d68:	a0 91 17 46 	lds	r26, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    4d6c:	b0 91 18 46 	lds	r27, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    4d70:	81 15       	cp	r24, r1
    4d72:	26 e6       	ldi	r18, 0x66	; 102
    4d74:	92 07       	cpc	r25, r18
    4d76:	2e ee       	ldi	r18, 0xEE	; 238
    4d78:	a2 07       	cpc	r26, r18
    4d7a:	2f e5       	ldi	r18, 0x5F	; 95
    4d7c:	b2 07       	cpc	r27, r18
    4d7e:	d8 f1       	brcs	.+118    	; 0x4df6 <_Z23clockConfigurationCheckv+0x9a>
    4d80:	40 91 11 46 	lds	r20, 0x4611	; 0x804611 <g_event_start_epoch>
    4d84:	50 91 12 46 	lds	r21, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    4d88:	60 91 13 46 	lds	r22, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    4d8c:	70 91 14 46 	lds	r23, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    4d90:	41 15       	cp	r20, r1
    4d92:	e6 e6       	ldi	r30, 0x66	; 102
    4d94:	5e 07       	cpc	r21, r30
    4d96:	ee ee       	ldi	r30, 0xEE	; 238
    4d98:	6e 07       	cpc	r22, r30
    4d9a:	ef e5       	ldi	r30, 0x5F	; 95
    4d9c:	7e 07       	cpc	r23, r30
    4d9e:	68 f1       	brcs	.+90     	; 0x4dfa <_Z23clockConfigurationCheckv+0x9e>
    4da0:	00 91 22 46 	lds	r16, 0x4622	; 0x804622 <g_current_epoch>
    4da4:	10 91 23 46 	lds	r17, 0x4623	; 0x804623 <g_current_epoch+0x1>
    4da8:	20 91 24 46 	lds	r18, 0x4624	; 0x804624 <g_current_epoch+0x2>
    4dac:	30 91 25 46 	lds	r19, 0x4625	; 0x804625 <g_current_epoch+0x3>
    4db0:	01 15       	cp	r16, r1
    4db2:	e6 e6       	ldi	r30, 0x66	; 102
    4db4:	1e 07       	cpc	r17, r30
    4db6:	ee ee       	ldi	r30, 0xEE	; 238
    4db8:	2e 07       	cpc	r18, r30
    4dba:	ef e5       	ldi	r30, 0x5F	; 95
    4dbc:	3e 07       	cpc	r19, r30
    4dbe:	f8 f0       	brcs	.+62     	; 0x4dfe <_Z23clockConfigurationCheckv+0xa2>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
    4dc0:	48 17       	cp	r20, r24
    4dc2:	59 07       	cpc	r21, r25
    4dc4:	6a 07       	cpc	r22, r26
    4dc6:	7b 07       	cpc	r23, r27
    4dc8:	e0 f4       	brcc	.+56     	; 0x4e02 <_Z23clockConfigurationCheckv+0xa6>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
    4dca:	80 17       	cp	r24, r16
    4dcc:	91 07       	cpc	r25, r17
    4dce:	a2 07       	cpc	r26, r18
    4dd0:	b3 07       	cpc	r27, r19
    4dd2:	c8 f0       	brcs	.+50     	; 0x4e06 <_Z23clockConfigurationCheckv+0xaa>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_start_epoch)       /* Event should be running */
    4dd4:	40 17       	cp	r20, r16
    4dd6:	51 07       	cpc	r21, r17
    4dd8:	62 07       	cpc	r22, r18
    4dda:	73 07       	cpc	r23, r19
    4ddc:	30 f4       	brcc	.+12     	; 0x4dea <_Z23clockConfigurationCheckv+0x8e>
	{
		if(g_transmissions_disabled)
    4dde:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <g_transmissions_disabled>
    4de2:	88 23       	and	r24, r24
    4de4:	91 f0       	breq	.+36     	; 0x4e0a <_Z23clockConfigurationCheckv+0xae>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
    4de6:	83 e0       	ldi	r24, 0x03	; 3
    4de8:	13 c0       	rjmp	.+38     	; 0x4e10 <_Z23clockConfigurationCheckv+0xb4>
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
		}
	}
	else if(!g_use_rtc_for_startstop)
    4dea:	80 91 26 46 	lds	r24, 0x4626	; 0x804626 <g_use_rtc_for_startstop>
    4dee:	81 11       	cpse	r24, r1
    4df0:	0e c0       	rjmp	.+28     	; 0x4e0e <_Z23clockConfigurationCheckv+0xb2>
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
    4df2:	84 e0       	ldi	r24, 0x04	; 4
    4df4:	0d c0       	rjmp	.+26     	; 0x4e10 <_Z23clockConfigurationCheckv+0xb4>

ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
	{
		return(CONFIGURATION_ERROR);
    4df6:	82 e0       	ldi	r24, 0x02	; 2
    4df8:	0b c0       	rjmp	.+22     	; 0x4e10 <_Z23clockConfigurationCheckv+0xb4>
    4dfa:	82 e0       	ldi	r24, 0x02	; 2
    4dfc:	09 c0       	rjmp	.+18     	; 0x4e10 <_Z23clockConfigurationCheckv+0xb4>
    4dfe:	82 e0       	ldi	r24, 0x02	; 2
    4e00:	07 c0       	rjmp	.+14     	; 0x4e10 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
	{
		return(CONFIGURATION_ERROR);
    4e02:	82 e0       	ldi	r24, 0x02	; 2
    4e04:	05 c0       	rjmp	.+10     	; 0x4e10 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
	{
		return(CONFIGURATION_ERROR);
    4e06:	82 e0       	ldi	r24, 0x02	; 2
    4e08:	03 c0       	rjmp	.+6      	; 0x4e10 <_Z23clockConfigurationCheckv+0xb4>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
		}
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
    4e0a:	85 e0       	ldi	r24, 0x05	; 5
    4e0c:	01 c0       	rjmp	.+2      	; 0x4e10 <_Z23clockConfigurationCheckv+0xb4>
	else if(!g_use_rtc_for_startstop)
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
	}

	return(WAITING_FOR_START);  /* Future event hasn't started yet */
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
}
    4e10:	1f 91       	pop	r17
    4e12:	0f 91       	pop	r16
    4e14:	08 95       	ret

00004e16 <_Z18reportConfigErrorsv>:

void reportConfigErrors(void)
{
	g_current_epoch = ds3231_get_epoch(null);
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    4e1e:	60 93 22 46 	sts	0x4622, r22	; 0x804622 <g_current_epoch>
    4e22:	70 93 23 46 	sts	0x4623, r23	; 0x804623 <g_current_epoch+0x1>
    4e26:	80 93 24 46 	sts	0x4624, r24	; 0x804624 <g_current_epoch+0x2>
    4e2a:	90 93 25 46 	sts	0x4625, r25	; 0x804625 <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    4e2e:	80 91 db 45 	lds	r24, 0x45DB	; 0x8045db <g_messages_text+0x15>
    4e32:	81 11       	cpse	r24, r1
    4e34:	04 c0       	rjmp	.+8      	; 0x4e3e <_Z18reportConfigErrorsv+0x28>
	{
		sb_send_string(TEXT_SET_ID_TXT);
    4e36:	81 ea       	ldi	r24, 0xA1	; 161
    4e38:	93 e4       	ldi	r25, 0x43	; 67
    4e3a:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    4e3e:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    4e42:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    4e46:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    4e4a:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    4e4e:	81 15       	cp	r24, r1
    4e50:	96 46       	sbci	r25, 0x66	; 102
    4e52:	ae 4e       	sbci	r26, 0xEE	; 238
    4e54:	bf 45       	sbci	r27, 0x5F	; 95
    4e56:	20 f4       	brcc	.+8      	; 0x4e60 <_Z18reportConfigErrorsv+0x4a>
	{
		sb_send_string(TEXT_SET_TIME_TXT);
    4e58:	82 ec       	ldi	r24, 0xC2	; 194
    4e5a:	93 e4       	ldi	r25, 0x43	; 67
    4e5c:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    4e60:	40 91 15 46 	lds	r20, 0x4615	; 0x804615 <g_event_finish_epoch>
    4e64:	50 91 16 46 	lds	r21, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    4e68:	60 91 17 46 	lds	r22, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    4e6c:	70 91 18 46 	lds	r23, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    4e70:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch>
    4e74:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x1>
    4e78:	a0 91 24 46 	lds	r26, 0x4624	; 0x804624 <g_current_epoch+0x2>
    4e7c:	b0 91 25 46 	lds	r27, 0x4625	; 0x804625 <g_current_epoch+0x3>
    4e80:	48 17       	cp	r20, r24
    4e82:	59 07       	cpc	r21, r25
    4e84:	6a 07       	cpc	r22, r26
    4e86:	7b 07       	cpc	r23, r27
    4e88:	b0 f4       	brcc	.+44     	; 0x4eb6 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    4e8a:	40 91 11 46 	lds	r20, 0x4611	; 0x804611 <g_event_start_epoch>
    4e8e:	50 91 12 46 	lds	r21, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    4e92:	60 91 13 46 	lds	r22, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    4e96:	70 91 14 46 	lds	r23, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    4e9a:	48 17       	cp	r20, r24
    4e9c:	59 07       	cpc	r21, r25
    4e9e:	6a 07       	cpc	r22, r26
    4ea0:	7b 07       	cpc	r23, r27
    4ea2:	20 f4       	brcc	.+8      	; 0x4eac <_Z18reportConfigErrorsv+0x96>
		{
			sb_send_string(TEXT_SET_START_TXT);
    4ea4:	8a ee       	ldi	r24, 0xEA	; 234
    4ea6:	93 e4       	ldi	r25, 0x43	; 67
    4ea8:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
		}

		sb_send_string(TEXT_SET_FINISH_TXT);
    4eac:	80 e1       	ldi	r24, 0x10	; 16
    4eae:	94 e4       	ldi	r25, 0x44	; 68
    4eb0:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    4eb4:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    4eb6:	40 91 11 46 	lds	r20, 0x4611	; 0x804611 <g_event_start_epoch>
    4eba:	50 91 12 46 	lds	r21, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    4ebe:	60 91 13 46 	lds	r22, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    4ec2:	70 91 14 46 	lds	r23, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    4ec6:	48 17       	cp	r20, r24
    4ec8:	59 07       	cpc	r21, r25
    4eca:	6a 07       	cpc	r22, r26
    4ecc:	7b 07       	cpc	r23, r27
    4ece:	70 f4       	brcc	.+28     	; 0x4eec <_Z18reportConfigErrorsv+0xd6>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    4ed0:	41 15       	cp	r20, r1
    4ed2:	56 46       	sbci	r21, 0x66	; 102
    4ed4:	6e 4e       	sbci	r22, 0xEE	; 238
    4ed6:	7f 45       	sbci	r23, 0x5F	; 95
    4ed8:	28 f4       	brcc	.+10     	; 0x4ee4 <_Z18reportConfigErrorsv+0xce>
		{
			sb_send_string(TEXT_SET_START_TXT);
    4eda:	8a ee       	ldi	r24, 0xEA	; 234
    4edc:	93 e4       	ldi	r25, 0x43	; 67
    4ede:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    4ee2:	08 95       	ret
		}
		else
		{
			sb_send_string((char*)"Event running...\n");
    4ee4:	87 e3       	ldi	r24, 0x37	; 55
    4ee6:	94 e4       	ldi	r25, 0x44	; 68
    4ee8:	0e 94 1f 3b 	call	0x763e	; 0x763e <sb_send_string>
    4eec:	08 95       	ret

00004eee <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
    4eee:	0f 93       	push	r16
    4ef0:	1f 93       	push	r17
    4ef2:	cf 93       	push	r28
    4ef4:	df 93       	push	r29
    4ef6:	ec 01       	movw	r28, r24
    4ef8:	8b 01       	movw	r16, r22
    4efa:	01 97       	sbiw	r24, 0x01	; 1
    4efc:	39 f4       	brne	.+14     	; 0x4f0c <_Z41__static_initialization_and_destruction_0ii+0x1e>
    4efe:	6f 3f       	cpi	r22, 0xFF	; 255
    4f00:	7f 4f       	sbci	r23, 0xFF	; 255
    4f02:	21 f4       	brne	.+8      	; 0x4f0c <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile bool g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { false, false, false, false, false };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    4f04:	80 e1       	ldi	r24, 0x10	; 16
    4f06:	96 e4       	ldi	r25, 0x46	; 70
    4f08:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <_ZN13EepromManagerC1Ev>
    4f0c:	cd 2b       	or	r28, r29
    4f0e:	39 f4       	brne	.+14     	; 0x4f1e <_Z41__static_initialization_and_destruction_0ii+0x30>
    4f10:	0f 3f       	cpi	r16, 0xFF	; 255
    4f12:	1f 4f       	sbci	r17, 0xFF	; 255
    4f14:	21 f4       	brne	.+8      	; 0x4f1e <_Z41__static_initialization_and_destruction_0ii+0x30>
    4f16:	80 e1       	ldi	r24, 0x10	; 16
    4f18:	96 e4       	ldi	r25, 0x46	; 70
    4f1a:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    4f1e:	df 91       	pop	r29
    4f20:	cf 91       	pop	r28
    4f22:	1f 91       	pop	r17
    4f24:	0f 91       	pop	r16
    4f26:	08 95       	ret

00004f28 <_GLOBAL__sub_I_g_battery_type>:
    4f28:	6f ef       	ldi	r22, 0xFF	; 255
    4f2a:	7f ef       	ldi	r23, 0xFF	; 255
    4f2c:	81 e0       	ldi	r24, 0x01	; 1
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	0e 94 77 27 	call	0x4eee	; 0x4eee <_Z41__static_initialization_and_destruction_0ii>
    4f34:	08 95       	ret

00004f36 <_GLOBAL__sub_D_g_battery_type>:
    4f36:	6f ef       	ldi	r22, 0xFF	; 255
    4f38:	7f ef       	ldi	r23, 0xFF	; 255
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	0e 94 77 27 	call	0x4eee	; 0x4eee <_Z41__static_initialization_and_destruction_0ii>
    4f42:	08 95       	ret

00004f44 <_ZL9PORT_initv>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    4f44:	e0 e6       	ldi	r30, 0x60	; 96
    4f46:	f4 e0       	ldi	r31, 0x04	; 4
    4f48:	82 89       	ldd	r24, Z+18	; 0x12
    4f4a:	88 7f       	andi	r24, 0xF8	; 248
    4f4c:	82 8b       	std	Z+18, r24	; 0x12
    4f4e:	82 89       	ldd	r24, Z+18	; 0x12
    4f50:	84 60       	ori	r24, 0x04	; 4
    4f52:	82 8b       	std	Z+18, r24	; 0x12
    4f54:	83 89       	ldd	r24, Z+19	; 0x13
    4f56:	88 7f       	andi	r24, 0xF8	; 248
    4f58:	83 8b       	std	Z+19, r24	; 0x13
    4f5a:	83 89       	ldd	r24, Z+19	; 0x13
    4f5c:	84 60       	ori	r24, 0x04	; 4
    4f5e:	83 8b       	std	Z+19, r24	; 0x13
    4f60:	84 89       	ldd	r24, Z+20	; 0x14
    4f62:	88 7f       	andi	r24, 0xF8	; 248
    4f64:	84 8b       	std	Z+20, r24	; 0x14
    4f66:	84 89       	ldd	r24, Z+20	; 0x14
    4f68:	84 60       	ori	r24, 0x04	; 4
    4f6a:	84 8b       	std	Z+20, r24	; 0x14
    4f6c:	85 89       	ldd	r24, Z+21	; 0x15
    4f6e:	88 7f       	andi	r24, 0xF8	; 248
    4f70:	85 8b       	std	Z+21, r24	; 0x15
    4f72:	85 89       	ldd	r24, Z+21	; 0x15
    4f74:	84 60       	ori	r24, 0x04	; 4
    4f76:	85 8b       	std	Z+21, r24	; 0x15
    4f78:	82 89       	ldd	r24, Z+18	; 0x12
    4f7a:	87 7f       	andi	r24, 0xF7	; 247
    4f7c:	82 8b       	std	Z+18, r24	; 0x12
    4f7e:	83 89       	ldd	r24, Z+19	; 0x13
    4f80:	87 7f       	andi	r24, 0xF7	; 247
    4f82:	83 8b       	std	Z+19, r24	; 0x13
    4f84:	84 89       	ldd	r24, Z+20	; 0x14
    4f86:	87 7f       	andi	r24, 0xF7	; 247
    4f88:	84 8b       	std	Z+20, r24	; 0x14
    4f8a:	85 89       	ldd	r24, Z+21	; 0x15
    4f8c:	87 7f       	andi	r24, 0xF7	; 247
    4f8e:	85 8b       	std	Z+21, r24	; 0x15
    4f90:	08 95       	ret

00004f92 <_ZL10VREF0_initv>:
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    4f98:	08 95       	ret

00004f9a <_ZL9ADC0_initb>:
    4f9a:	9a e0       	ldi	r25, 0x0A	; 10
    4f9c:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
    4fa0:	88 23       	and	r24, r24
    4fa2:	41 f0       	breq	.+16     	; 0x4fb4 <_ZL9ADC0_initb+0x1a>
    4fa4:	e0 e0       	ldi	r30, 0x00	; 0
    4fa6:	f6 e0       	ldi	r31, 0x06	; 6
    4fa8:	83 e0       	ldi	r24, 0x03	; 3
    4faa:	80 83       	st	Z, r24
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	84 87       	std	Z+12, r24	; 0x0c
    4fb0:	82 87       	std	Z+10, r24	; 0x0a
    4fb2:	08 95       	ret
    4fb4:	e0 e0       	ldi	r30, 0x00	; 0
    4fb6:	f6 e0       	ldi	r31, 0x06	; 6
    4fb8:	81 e0       	ldi	r24, 0x01	; 1
    4fba:	80 83       	st	Z, r24
    4fbc:	14 86       	std	Z+12, r1	; 0x0c
    4fbe:	08 95       	ret

00004fc0 <_ZL16ADC0_SYSTEM_initb>:
    4fc0:	cf 93       	push	r28
    4fc2:	c8 2f       	mov	r28, r24
    4fc4:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <_ZL9PORT_initv>
    4fc8:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <_ZL10VREF0_initv>
    4fcc:	8c 2f       	mov	r24, r28
    4fce:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <_ZL9ADC0_initb>
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	80 93 3c 46 	sts	0x463C, r24	; 0x80463c <_ZL17g_adc_initialized>
    4fd8:	cf 91       	pop	r28
    4fda:	08 95       	ret

00004fdc <_ZL20ADC0_SYSTEM_shutdownv>:
    4fdc:	e0 e0       	ldi	r30, 0x00	; 0
    4fde:	f6 e0       	ldi	r31, 0x06	; 6
    4fe0:	14 86       	std	Z+12, r1	; 0x0c
    4fe2:	10 82       	st	Z, r1
    4fe4:	10 92 3c 46 	sts	0x463C, r1	; 0x80463c <_ZL17g_adc_initialized>
    4fe8:	08 95       	ret

00004fea <_Z41__static_initialization_and_destruction_0ii>:
    4fea:	ef 92       	push	r14
    4fec:	ff 92       	push	r15
    4fee:	0f 93       	push	r16
    4ff0:	1f 93       	push	r17
    4ff2:	cf 93       	push	r28
    4ff4:	df 93       	push	r29
    4ff6:	ec 01       	movw	r28, r24
    4ff8:	7b 01       	movw	r14, r22
    4ffa:	01 97       	sbiw	r24, 0x01	; 1
    4ffc:	79 f4       	brne	.+30     	; 0x501c <_Z41__static_initialization_and_destruction_0ii+0x32>
    4ffe:	6f 3f       	cpi	r22, 0xFF	; 255
    5000:	7f 4f       	sbci	r23, 0xFF	; 255
    5002:	61 f4       	brne	.+24     	; 0x501c <_Z41__static_initialization_and_destruction_0ii+0x32>
    5004:	00 e0       	ldi	r16, 0x00	; 0
    5006:	10 e4       	ldi	r17, 0x40	; 64
    5008:	2c eb       	ldi	r18, 0xBC	; 188
    500a:	36 e4       	ldi	r19, 0x46	; 70
    500c:	40 e0       	ldi	r20, 0x00	; 0
    500e:	50 e0       	ldi	r21, 0x00	; 0
    5010:	69 e4       	ldi	r22, 0x49	; 73
    5012:	73 e4       	ldi	r23, 0x43	; 67
    5014:	8b e3       	ldi	r24, 0x3B	; 59
    5016:	96 e4       	ldi	r25, 0x46	; 70
    5018:	0e 94 d7 32 	call	0x65ae	; 0x65ae <_ZN8GoertzelC1Eff>
    501c:	cd 2b       	or	r28, r29
    501e:	39 f4       	brne	.+14     	; 0x502e <_Z41__static_initialization_and_destruction_0ii+0x44>
    5020:	ef 20       	and	r14, r15
    5022:	e0 94       	com	r14
    5024:	21 f4       	brne	.+8      	; 0x502e <_Z41__static_initialization_and_destruction_0ii+0x44>
    5026:	8b e3       	ldi	r24, 0x3B	; 59
    5028:	96 e4       	ldi	r25, 0x46	; 70
    502a:	0e 94 27 33 	call	0x664e	; 0x664e <_ZN8GoertzelD1Ev>
    502e:	df 91       	pop	r29
    5030:	cf 91       	pop	r28
    5032:	1f 91       	pop	r17
    5034:	0f 91       	pop	r16
    5036:	ff 90       	pop	r15
    5038:	ef 90       	pop	r14
    503a:	08 95       	ret

0000503c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
    503c:	83 30       	cpi	r24, 0x03	; 3
    503e:	c9 f0       	breq	.+50     	; 0x5072 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
    5040:	28 f4       	brcc	.+10     	; 0x504c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x10>
    5042:	81 30       	cpi	r24, 0x01	; 1
    5044:	41 f0       	breq	.+16     	; 0x5056 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x1a>
    5046:	82 30       	cpi	r24, 0x02	; 2
    5048:	69 f0       	breq	.+26     	; 0x5064 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x28>
    504a:	28 c0       	rjmp	.+80     	; 0x509c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    504c:	84 30       	cpi	r24, 0x04	; 4
    504e:	c1 f0       	breq	.+48     	; 0x5080 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x44>
    5050:	85 30       	cpi	r24, 0x05	; 5
    5052:	e9 f0       	breq	.+58     	; 0x508e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x52>
    5054:	23 c0       	rjmp	.+70     	; 0x509c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <_ZL16ADC0_SYSTEM_initb>
    505c:	82 e0       	ldi	r24, 0x02	; 2
    505e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5062:	08 95       	ret
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <_ZL16ADC0_SYSTEM_initb>
    506a:	83 e0       	ldi	r24, 0x03	; 3
    506c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5070:	08 95       	ret
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <_ZL16ADC0_SYSTEM_initb>
    5078:	84 e0       	ldi	r24, 0x04	; 4
    507a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    507e:	08 95       	ret
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <_ZL16ADC0_SYSTEM_initb>
    5086:	85 e0       	ldi	r24, 0x05	; 5
    5088:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    508c:	08 95       	ret
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <_ZL16ADC0_SYSTEM_initb>
    5094:	82 e4       	ldi	r24, 0x42	; 66
    5096:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    509a:	08 95       	ret
    509c:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <_ZL20ADC0_SYSTEM_shutdownv>
    50a0:	08 95       	ret

000050a2 <_Z9ADC0_readv>:
    50a2:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    50a6:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    50aa:	08 95       	ret

000050ac <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    50ac:	1f 92       	push	r1
    50ae:	0f 92       	push	r0
    50b0:	0f b6       	in	r0, 0x3f	; 63
    50b2:	0f 92       	push	r0
    50b4:	11 24       	eor	r1, r1
    50b6:	0b b6       	in	r0, 0x3b	; 59
    50b8:	0f 92       	push	r0
    50ba:	2f 93       	push	r18
    50bc:	3f 93       	push	r19
    50be:	4f 93       	push	r20
    50c0:	5f 93       	push	r21
    50c2:	6f 93       	push	r22
    50c4:	7f 93       	push	r23
    50c6:	8f 93       	push	r24
    50c8:	9f 93       	push	r25
    50ca:	af 93       	push	r26
    50cc:	bf 93       	push	r27
    50ce:	ef 93       	push	r30
    50d0:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    50d2:	0e 94 51 28 	call	0x50a2	; 0x50a2 <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    50d6:	bc 01       	movw	r22, r24
    50d8:	8b e3       	ldi	r24, 0x3B	; 59
    50da:	96 e4       	ldi	r25, 0x46	; 70
    50dc:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZN8Goertzel9DataPointEi>
    50e0:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    50e2:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    50e6:	ff 91       	pop	r31
    50e8:	ef 91       	pop	r30
    50ea:	bf 91       	pop	r27
    50ec:	af 91       	pop	r26
    50ee:	9f 91       	pop	r25
    50f0:	8f 91       	pop	r24
    50f2:	7f 91       	pop	r23
    50f4:	6f 91       	pop	r22
    50f6:	5f 91       	pop	r21
    50f8:	4f 91       	pop	r20
    50fa:	3f 91       	pop	r19
    50fc:	2f 91       	pop	r18
    50fe:	0f 90       	pop	r0
    5100:	0b be       	out	0x3b, r0	; 59
    5102:	0f 90       	pop	r0
    5104:	0f be       	out	0x3f, r0	; 63
    5106:	0f 90       	pop	r0
    5108:	1f 90       	pop	r1
    510a:	18 95       	reti

0000510c <_GLOBAL__sub_I_g_activeADCChannel>:
    510c:	6f ef       	ldi	r22, 0xFF	; 255
    510e:	7f ef       	ldi	r23, 0xFF	; 255
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	0e 94 f5 27 	call	0x4fea	; 0x4fea <_Z41__static_initialization_and_destruction_0ii>
    5118:	08 95       	ret

0000511a <_GLOBAL__sub_D_g_activeADCChannel>:
    511a:	6f ef       	ldi	r22, 0xFF	; 255
    511c:	7f ef       	ldi	r23, 0xFF	; 255
    511e:	80 e0       	ldi	r24, 0x00	; 0
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	0e 94 f5 27 	call	0x4fea	; 0x4fea <_Z41__static_initialization_and_destruction_0ii>
    5126:	08 95       	ret

00005128 <_Z10fet_driverb>:
{
} //~binio

void fet_driver(bool state)
{
	if(state == ON)
    5128:	88 23       	and	r24, r24
    512a:	21 f0       	breq	.+8      	; 0x5134 <_Z10fet_driverb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    512c:	81 b1       	in	r24, 0x01	; 1
    512e:	88 60       	ori	r24, 0x08	; 8
    5130:	81 b9       	out	0x01, r24	; 1
    5132:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5134:	81 b1       	in	r24, 0x01	; 1
    5136:	87 7f       	andi	r24, 0xF7	; 247
    5138:	81 b9       	out	0x01, r24	; 1
    513a:	08 95       	ret

0000513c <_Z10wifi_powerb>:
}


void wifi_power(bool state)
{
	if(state == ON)
    513c:	88 23       	and	r24, r24
    513e:	21 f0       	breq	.+8      	; 0x5148 <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    5140:	81 b1       	in	r24, 0x01	; 1
    5142:	80 62       	ori	r24, 0x20	; 32
    5144:	81 b9       	out	0x01, r24	; 1
    5146:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5148:	81 b1       	in	r24, 0x01	; 1
    514a:	8f 7d       	andi	r24, 0xDF	; 223
    514c:	81 b9       	out	0x01, r24	; 1
    514e:	08 95       	ret

00005150 <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    5150:	88 23       	and	r24, r24
    5152:	21 f0       	breq	.+8      	; 0x515c <_Z10wifi_resetb+0xc>
    5154:	81 b1       	in	r24, 0x01	; 1
    5156:	8f 7b       	andi	r24, 0xBF	; 191
    5158:	81 b9       	out	0x01, r24	; 1
    515a:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    515c:	81 b1       	in	r24, 0x01	; 1
    515e:	80 64       	ori	r24, 0x40	; 64
    5160:	81 b9       	out	0x01, r24	; 1
    5162:	08 95       	ret

00005164 <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    5164:	8e b1       	in	r24, 0x0e	; 14
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	88 0f       	add	r24, r24
    516a:	89 2f       	mov	r24, r25
    516c:	88 1f       	adc	r24, r24
    516e:	99 0b       	sbc	r25, r25
}

bool wifiPresent(void)
{
	return(PORTD_get_pin_level(WIFI_MODULE_DETECT));
}
    5170:	81 70       	andi	r24, 0x01	; 1
    5172:	08 95       	ret

00005174 <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    5174:	1f 92       	push	r1
    5176:	0f 92       	push	r0
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	0f 92       	push	r0
    517c:	11 24       	eor	r1, r1
    517e:	8f 93       	push	r24
    5180:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    5182:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    5186:	88 23       	and	r24, r24
    5188:	4c f4       	brge	.+18     	; 0x519c <__vector_29+0x28>
	{
		count++;
    518a:	80 91 3f 46 	lds	r24, 0x463F	; 0x80463f <_ZZ11__vector_29E5count>
    518e:	90 91 40 46 	lds	r25, 0x4640	; 0x804640 <_ZZ11__vector_29E5count+0x1>
    5192:	01 96       	adiw	r24, 0x01	; 1
    5194:	80 93 3f 46 	sts	0x463F, r24	; 0x80463f <_ZZ11__vector_29E5count>
    5198:	90 93 40 46 	sts	0x4640, r25	; 0x804640 <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    519c:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    51a0:	84 ff       	sbrs	r24, 4
    51a2:	09 c0       	rjmp	.+18     	; 0x51b6 <__vector_29+0x42>
	{
		count++;
    51a4:	80 91 3f 46 	lds	r24, 0x463F	; 0x80463f <_ZZ11__vector_29E5count>
    51a8:	90 91 40 46 	lds	r25, 0x4640	; 0x804640 <_ZZ11__vector_29E5count+0x1>
    51ac:	01 96       	adiw	r24, 0x01	; 1
    51ae:	80 93 3f 46 	sts	0x463F, r24	; 0x80463f <_ZZ11__vector_29E5count>
    51b2:	90 93 40 46 	sts	0x4640, r25	; 0x804640 <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    51b6:	8f ef       	ldi	r24, 0xFF	; 255
    51b8:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    51bc:	9f 91       	pop	r25
    51be:	8f 91       	pop	r24
    51c0:	0f 90       	pop	r0
    51c2:	0f be       	out	0x3f, r0	; 63
    51c4:	0f 90       	pop	r0
    51c6:	1f 90       	pop	r1
    51c8:	18 95       	reti

000051ca <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    51ca:	1f 92       	push	r1
    51cc:	0f 92       	push	r0
    51ce:	0f b6       	in	r0, 0x3f	; 63
    51d0:	0f 92       	push	r0
    51d2:	11 24       	eor	r1, r1
    51d4:	8f 93       	push	r24
    51d6:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    51d8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    51dc:	82 ff       	sbrs	r24, 2
    51de:	09 c0       	rjmp	.+18     	; 0x51f2 <__vector_6+0x28>
	{
		count++;
    51e0:	80 91 3d 46 	lds	r24, 0x463D	; 0x80463d <_ZZ10__vector_6E5count>
    51e4:	90 91 3e 46 	lds	r25, 0x463E	; 0x80463e <_ZZ10__vector_6E5count+0x1>
    51e8:	01 96       	adiw	r24, 0x01	; 1
    51ea:	80 93 3d 46 	sts	0x463D, r24	; 0x80463d <_ZZ10__vector_6E5count>
    51ee:	90 93 3e 46 	sts	0x463E, r25	; 0x80463e <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    51f2:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    51f6:	84 ff       	sbrs	r24, 4
    51f8:	09 c0       	rjmp	.+18     	; 0x520c <__vector_6+0x42>
	{
		count++;
    51fa:	80 91 3d 46 	lds	r24, 0x463D	; 0x80463d <_ZZ10__vector_6E5count>
    51fe:	90 91 3e 46 	lds	r25, 0x463E	; 0x80463e <_ZZ10__vector_6E5count+0x1>
    5202:	01 96       	adiw	r24, 0x01	; 1
    5204:	80 93 3d 46 	sts	0x463D, r24	; 0x80463d <_ZZ10__vector_6E5count>
    5208:	90 93 3e 46 	sts	0x463E, r25	; 0x80463e <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    520c:	8f ef       	ldi	r24, 0xFF	; 255
    520e:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    5212:	9f 91       	pop	r25
    5214:	8f 91       	pop	r24
    5216:	0f 90       	pop	r0
    5218:	0f be       	out	0x3f, r0	; 63
    521a:	0f 90       	pop	r0
    521c:	1f 90       	pop	r1
    521e:	18 95       	reti

00005220 <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    5220:	80 b1       	in	r24, 0x00	; 0
    5222:	8b 7f       	andi	r24, 0xFB	; 251
    5224:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5226:	e2 e1       	ldi	r30, 0x12	; 18
    5228:	f4 e0       	ldi	r31, 0x04	; 4
    522a:	80 81       	ld	r24, Z
    522c:	88 7f       	andi	r24, 0xF8	; 248
    522e:	82 60       	ori	r24, 0x02	; 2
    5230:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5232:	80 b1       	in	r24, 0x00	; 0
    5234:	88 60       	ori	r24, 0x08	; 8
    5236:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5238:	81 b1       	in	r24, 0x01	; 1
    523a:	87 7f       	andi	r24, 0xF7	; 247
    523c:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    523e:	80 b1       	in	r24, 0x00	; 0
    5240:	8f 7e       	andi	r24, 0xEF	; 239
    5242:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5244:	e4 e1       	ldi	r30, 0x14	; 20
    5246:	f4 e0       	ldi	r31, 0x04	; 4
    5248:	80 81       	ld	r24, Z
    524a:	88 60       	ori	r24, 0x08	; 8
    524c:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    524e:	80 81       	ld	r24, Z
    5250:	88 7f       	andi	r24, 0xF8	; 248
    5252:	83 60       	ori	r24, 0x03	; 3
    5254:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5256:	80 b1       	in	r24, 0x00	; 0
    5258:	80 62       	ori	r24, 0x20	; 32
    525a:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    525c:	81 b1       	in	r24, 0x01	; 1
    525e:	8f 7d       	andi	r24, 0xDF	; 223
    5260:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5262:	80 b1       	in	r24, 0x00	; 0
    5264:	80 64       	ori	r24, 0x40	; 64
    5266:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5268:	81 b1       	in	r24, 0x01	; 1
    526a:	8f 7b       	andi	r24, 0xBF	; 191
    526c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    526e:	80 b1       	in	r24, 0x00	; 0
    5270:	80 68       	ori	r24, 0x80	; 128
    5272:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5274:	81 b1       	in	r24, 0x01	; 1
    5276:	8f 77       	andi	r24, 0x7F	; 127
    5278:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    527a:	84 b1       	in	r24, 0x04	; 4
    527c:	81 60       	ori	r24, 0x01	; 1
    527e:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5280:	85 b1       	in	r24, 0x05	; 5
    5282:	8e 7f       	andi	r24, 0xFE	; 254
    5284:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5286:	84 b1       	in	r24, 0x04	; 4
    5288:	82 60       	ori	r24, 0x02	; 2
    528a:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    528c:	85 b1       	in	r24, 0x05	; 5
    528e:	8d 7f       	andi	r24, 0xFD	; 253
    5290:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5292:	84 b1       	in	r24, 0x04	; 4
    5294:	80 61       	ori	r24, 0x10	; 16
    5296:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5298:	85 b1       	in	r24, 0x05	; 5
    529a:	8f 7e       	andi	r24, 0xEF	; 239
    529c:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    529e:	84 b1       	in	r24, 0x04	; 4
    52a0:	80 62       	ori	r24, 0x20	; 32
    52a2:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    52a4:	85 b1       	in	r24, 0x05	; 5
    52a6:	8f 7d       	andi	r24, 0xDF	; 223
    52a8:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    52aa:	88 b1       	in	r24, 0x08	; 8
    52ac:	8f 7e       	andi	r24, 0xEF	; 239
    52ae:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    52b0:	88 b1       	in	r24, 0x08	; 8
    52b2:	80 62       	ori	r24, 0x20	; 32
    52b4:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    52b6:	89 b1       	in	r24, 0x09	; 9
    52b8:	8f 7d       	andi	r24, 0xDF	; 223
    52ba:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    52bc:	88 b1       	in	r24, 0x08	; 8
    52be:	80 64       	ori	r24, 0x40	; 64
    52c0:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    52c2:	89 b1       	in	r24, 0x09	; 9
    52c4:	8f 7b       	andi	r24, 0xBF	; 191
    52c6:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    52c8:	88 b1       	in	r24, 0x08	; 8
    52ca:	8f 77       	andi	r24, 0x7F	; 127
    52cc:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    52ce:	e7 e5       	ldi	r30, 0x57	; 87
    52d0:	f4 e0       	ldi	r31, 0x04	; 4
    52d2:	80 81       	ld	r24, Z
    52d4:	88 60       	ori	r24, 0x08	; 8
    52d6:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    52d8:	80 81       	ld	r24, Z
    52da:	88 7f       	andi	r24, 0xF8	; 248
    52dc:	83 60       	ori	r24, 0x03	; 3
    52de:	80 83       	st	Z, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    52e0:	8c b1       	in	r24, 0x0c	; 12
    52e2:	8e 7f       	andi	r24, 0xFE	; 254
    52e4:	8c b9       	out	0x0c, r24	; 12
    52e6:	8c b1       	in	r24, 0x0c	; 12
    52e8:	8d 7f       	andi	r24, 0xFD	; 253
    52ea:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    52ec:	a1 e7       	ldi	r26, 0x71	; 113
    52ee:	b4 e0       	ldi	r27, 0x04	; 4
    52f0:	8c 91       	ld	r24, X
    52f2:	88 60       	ori	r24, 0x08	; 8
    52f4:	8c 93       	st	X, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    52f6:	8c 91       	ld	r24, X
    52f8:	88 7f       	andi	r24, 0xF8	; 248
    52fa:	83 60       	ori	r24, 0x03	; 3
    52fc:	8c 93       	st	X, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    52fe:	8c b1       	in	r24, 0x0c	; 12
    5300:	8f 77       	andi	r24, 0x7F	; 127
    5302:	8c b9       	out	0x0c, r24	; 12
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    5304:	80 81       	ld	r24, Z
    5306:	87 7f       	andi	r24, 0xF7	; 247
    5308:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    530a:	e0 e9       	ldi	r30, 0x90	; 144
    530c:	f4 e0       	ldi	r31, 0x04	; 4
    530e:	80 81       	ld	r24, Z
    5310:	88 60       	ori	r24, 0x08	; 8
    5312:	80 83       	st	Z, r24
    5314:	e1 e9       	ldi	r30, 0x91	; 145
    5316:	f4 e0       	ldi	r31, 0x04	; 4
    5318:	80 81       	ld	r24, Z
    531a:	88 60       	ori	r24, 0x08	; 8
    531c:	80 83       	st	Z, r24
    531e:	e2 e9       	ldi	r30, 0x92	; 146
    5320:	f4 e0       	ldi	r31, 0x04	; 4
    5322:	80 81       	ld	r24, Z
    5324:	88 60       	ori	r24, 0x08	; 8
    5326:	80 83       	st	Z, r24
    5328:	e3 e9       	ldi	r30, 0x93	; 147
    532a:	f4 e0       	ldi	r31, 0x04	; 4
    532c:	80 81       	ld	r24, Z
    532e:	88 60       	ori	r24, 0x08	; 8
    5330:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    5332:	e2 eb       	ldi	r30, 0xB2	; 178
    5334:	f4 e0       	ldi	r31, 0x04	; 4
    5336:	80 81       	ld	r24, Z
    5338:	88 60       	ori	r24, 0x08	; 8
    533a:	80 83       	st	Z, r24
    533c:	e3 eb       	ldi	r30, 0xB3	; 179
    533e:	f4 e0       	ldi	r31, 0x04	; 4
    5340:	80 81       	ld	r24, Z
    5342:	88 60       	ori	r24, 0x08	; 8
    5344:	80 83       	st	Z, r24
    5346:	e4 eb       	ldi	r30, 0xB4	; 180
    5348:	f4 e0       	ldi	r31, 0x04	; 4
    534a:	80 81       	ld	r24, Z
    534c:	88 60       	ori	r24, 0x08	; 8
    534e:	80 83       	st	Z, r24
    5350:	e5 eb       	ldi	r30, 0xB5	; 181
    5352:	f4 e0       	ldi	r31, 0x04	; 4
    5354:	80 81       	ld	r24, Z
    5356:	88 60       	ori	r24, 0x08	; 8
    5358:	80 83       	st	Z, r24
    535a:	08 95       	ret

0000535c <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    535c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    5360:	80 e0       	ldi	r24, 0x00	; 0
    5362:	08 95       	ret

00005364 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    5364:	44 e2       	ldi	r20, 0x24	; 36
    5366:	68 ed       	ldi	r22, 0xD8	; 216
    5368:	88 e6       	ldi	r24, 0x68	; 104
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	0e 94 8c 39 	call	0x7318	; 0x7318 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    5370:	80 e0       	ldi	r24, 0x00	; 0
    5372:	08 95       	ret

00005374 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    5374:	78 94       	sei

	return 0;
}
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	08 95       	ret

0000537a <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    537a:	83 e0       	ldi	r24, 0x03	; 3
    537c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
    5380:	6a e0       	ldi	r22, 0x0A	; 10
    5382:	70 e0       	ldi	r23, 0x00	; 0
    5384:	80 e0       	ldi	r24, 0x00	; 0
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <util_delay_ms>
    538c:	81 11       	cpse	r24, r1
    538e:	f8 cf       	rjmp	.-16     	; 0x5380 <_ZL9VREF_initv+0x6>
}
    5390:	08 95       	ret

00005392 <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    5392:	28 2f       	mov	r18, r24
    5394:	22 95       	swap	r18
    5396:	22 0f       	add	r18, r18
    5398:	22 0f       	add	r18, r18
    539a:	20 7c       	andi	r18, 0xC0	; 192
    539c:	e0 ea       	ldi	r30, 0xA0	; 160
    539e:	f6 e0       	ldi	r31, 0x06	; 6
    53a0:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    53a2:	96 95       	lsr	r25
    53a4:	87 95       	ror	r24
    53a6:	96 95       	lsr	r25
    53a8:	87 95       	ror	r24
    53aa:	83 83       	std	Z+3, r24	; 0x03
    53ac:	08 95       	ret

000053ae <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    53ae:	0e 94 bd 29 	call	0x537a	; 0x537a <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    53b2:	e0 e6       	ldi	r30, 0x60	; 96
    53b4:	f4 e0       	ldi	r31, 0x04	; 4
    53b6:	86 89       	ldd	r24, Z+22	; 0x16
    53b8:	88 7f       	andi	r24, 0xF8	; 248
    53ba:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    53bc:	86 89       	ldd	r24, Z+22	; 0x16
    53be:	84 60       	ori	r24, 0x04	; 4
    53c0:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    53c2:	86 89       	ldd	r24, Z+22	; 0x16
    53c4:	87 7f       	andi	r24, 0xF7	; 247
    53c6:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    53c8:	81 ec       	ldi	r24, 0xC1	; 193
    53ca:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	0e 94 c9 29 	call	0x5392	; 0x5392 <_Z11DAC0_setValj>
    53d6:	08 95       	ret

000053d8 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    53d8:	80 e0       	ldi	r24, 0x00	; 0
    53da:	88 30       	cpi	r24, 0x08	; 8
    53dc:	48 f4       	brcc	.+18     	; 0x53f0 <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    53de:	e8 2f       	mov	r30, r24
    53e0:	f0 e0       	ldi	r31, 0x00	; 0
    53e2:	e0 5f       	subi	r30, 0xF0	; 240
    53e4:	fb 4f       	sbci	r31, 0xFB	; 251
    53e6:	90 81       	ld	r25, Z
    53e8:	98 60       	ori	r25, 0x08	; 8
    53ea:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    53ec:	8f 5f       	subi	r24, 0xFF	; 255
    53ee:	f5 cf       	rjmp	.-22     	; 0x53da <mcu_init+0x2>
    53f0:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53f2:	88 30       	cpi	r24, 0x08	; 8
    53f4:	48 f4       	brcc	.+18     	; 0x5408 <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    53f6:	e8 2f       	mov	r30, r24
    53f8:	f0 e0       	ldi	r31, 0x00	; 0
    53fa:	e0 5d       	subi	r30, 0xD0	; 208
    53fc:	fb 4f       	sbci	r31, 0xFB	; 251
    53fe:	90 81       	ld	r25, Z
    5400:	98 60       	ori	r25, 0x08	; 8
    5402:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5404:	8f 5f       	subi	r24, 0xFF	; 255
    5406:	f5 cf       	rjmp	.-22     	; 0x53f2 <mcu_init+0x1a>
    5408:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    540a:	88 30       	cpi	r24, 0x08	; 8
    540c:	48 f4       	brcc	.+18     	; 0x5420 <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    540e:	e8 2f       	mov	r30, r24
    5410:	f0 e0       	ldi	r31, 0x00	; 0
    5412:	e0 5b       	subi	r30, 0xB0	; 176
    5414:	fb 4f       	sbci	r31, 0xFB	; 251
    5416:	90 81       	ld	r25, Z
    5418:	98 60       	ori	r25, 0x08	; 8
    541a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    541c:	8f 5f       	subi	r24, 0xFF	; 255
    541e:	f5 cf       	rjmp	.-22     	; 0x540a <mcu_init+0x32>
    5420:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5422:	88 30       	cpi	r24, 0x08	; 8
    5424:	48 f4       	brcc	.+18     	; 0x5438 <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5426:	e8 2f       	mov	r30, r24
    5428:	f0 e0       	ldi	r31, 0x00	; 0
    542a:	e0 59       	subi	r30, 0x90	; 144
    542c:	fb 4f       	sbci	r31, 0xFB	; 251
    542e:	90 81       	ld	r25, Z
    5430:	98 60       	ori	r25, 0x08	; 8
    5432:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5434:	8f 5f       	subi	r24, 0xFF	; 255
    5436:	f5 cf       	rjmp	.-22     	; 0x5422 <mcu_init+0x4a>
    5438:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    543a:	88 30       	cpi	r24, 0x08	; 8
    543c:	48 f4       	brcc	.+18     	; 0x5450 <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    543e:	e8 2f       	mov	r30, r24
    5440:	f0 e0       	ldi	r31, 0x00	; 0
    5442:	e0 57       	subi	r30, 0x70	; 112
    5444:	fb 4f       	sbci	r31, 0xFB	; 251
    5446:	90 81       	ld	r25, Z
    5448:	98 60       	ori	r25, 0x08	; 8
    544a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    544c:	8f 5f       	subi	r24, 0xFF	; 255
    544e:	f5 cf       	rjmp	.-22     	; 0x543a <mcu_init+0x62>
    5450:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5452:	88 30       	cpi	r24, 0x08	; 8
    5454:	48 f4       	brcc	.+18     	; 0x5468 <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5456:	e8 2f       	mov	r30, r24
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	e0 55       	subi	r30, 0x50	; 80
    545c:	fb 4f       	sbci	r31, 0xFB	; 251
    545e:	90 81       	ld	r25, Z
    5460:	98 60       	ori	r25, 0x08	; 8
    5462:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5464:	8f 5f       	subi	r24, 0xFF	; 255
    5466:	f5 cf       	rjmp	.-22     	; 0x5452 <mcu_init+0x7a>
    5468:	08 95       	ret

0000546a <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    546a:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    546e:	0e 94 b2 29 	call	0x5364	; 0x5364 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
    5472:	0e 94 bf 42 	call	0x857e	; 0x857e <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    5476:	0e 94 ba 29 	call	0x5374	; 0x5374 <CPUINT_init>
	BINIO_init();
    547a:	0e 94 10 29 	call	0x5220	; 0x5220 <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    547e:	88 b1       	in	r24, 0x08	; 8
    5480:	80 64       	ori	r24, 0x40	; 64
    5482:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    5484:	89 b1       	in	r24, 0x09	; 9
    5486:	80 64       	ori	r24, 0x40	; 64
    5488:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    548a:	0e 94 bd 42 	call	0x857a	; 0x857a <SLPCTRL_init>
	
	DAC0_init();
    548e:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_Z9DAC0_initv>

	linkbus_init(LB_BAUD, LINKBUS_USART);
    5492:	44 e0       	ldi	r20, 0x04	; 4
    5494:	60 e8       	ldi	r22, 0x80	; 128
    5496:	75 e2       	ldi	r23, 0x25	; 37
    5498:	80 e0       	ldi	r24, 0x00	; 0
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <_Z12linkbus_initm14USART_Number_t>
	serialbus_init(SB_BAUD, SERIALBUS_USART);
    54a0:	41 e0       	ldi	r20, 0x01	; 1
    54a2:	60 e8       	ldi	r22, 0x80	; 128
    54a4:	75 e2       	ldi	r23, 0x25	; 37
    54a6:	80 e0       	ldi	r24, 0x00	; 0
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	0e 94 92 3a 	call	0x7524	; 0x7524 <serialbus_init>

	BOD_init();
    54ae:	0e 94 ae 29 	call	0x535c	; 0x535c <BOD_init>
    54b2:	08 95       	ret

000054b4 <_Z7bcd2dech>:

bool ds3231_init()
{
	I2C_0_Init();
	return (!ds3231_responding());
}
    54b4:	28 2f       	mov	r18, r24
    54b6:	30 e0       	ldi	r19, 0x00	; 0
    54b8:	35 95       	asr	r19
    54ba:	27 95       	ror	r18
    54bc:	35 95       	asr	r19
    54be:	27 95       	ror	r18
    54c0:	35 95       	asr	r19
    54c2:	27 95       	ror	r18
    54c4:	35 95       	asr	r19
    54c6:	27 95       	ror	r18
    54c8:	22 0f       	add	r18, r18
    54ca:	92 2f       	mov	r25, r18
    54cc:	99 0f       	add	r25, r25
    54ce:	99 0f       	add	r25, r25
    54d0:	29 0f       	add	r18, r25
    54d2:	8f 70       	andi	r24, 0x0F	; 15
    54d4:	82 0f       	add	r24, r18
    54d6:	08 95       	ret

000054d8 <_Z7dec2bcdh>:
    54d8:	2d ec       	ldi	r18, 0xCD	; 205
    54da:	82 9f       	mul	r24, r18
    54dc:	21 2d       	mov	r18, r1
    54de:	11 24       	eor	r1, r1
    54e0:	92 2f       	mov	r25, r18
    54e2:	96 95       	lsr	r25
    54e4:	96 95       	lsr	r25
    54e6:	96 95       	lsr	r25
    54e8:	99 0f       	add	r25, r25
    54ea:	39 2f       	mov	r19, r25
    54ec:	33 0f       	add	r19, r19
    54ee:	33 0f       	add	r19, r19
    54f0:	93 0f       	add	r25, r19
    54f2:	89 1b       	sub	r24, r25
    54f4:	98 2f       	mov	r25, r24
    54f6:	26 95       	lsr	r18
    54f8:	26 95       	lsr	r18
    54fa:	26 95       	lsr	r18
    54fc:	80 e1       	ldi	r24, 0x10	; 16
    54fe:	28 9f       	mul	r18, r24
    5500:	90 01       	movw	r18, r0
    5502:	11 24       	eor	r1, r1
    5504:	89 2f       	mov	r24, r25
    5506:	82 2b       	or	r24, r18
    5508:	08 95       	ret

0000550a <_Z8char2bcdPc>:
    550a:	fc 01       	movw	r30, r24
    550c:	20 81       	ld	r18, Z
    550e:	81 81       	ldd	r24, Z+1	; 0x01
    5510:	f0 e1       	ldi	r31, 0x10	; 16
    5512:	2f 9f       	mul	r18, r31
    5514:	80 0d       	add	r24, r0
    5516:	11 24       	eor	r1, r1
    5518:	80 53       	subi	r24, 0x30	; 48
    551a:	08 95       	ret

0000551c <_Z14epoch_from_ltmP2tm>:
    551c:	cf 92       	push	r12
    551e:	df 92       	push	r13
    5520:	ef 92       	push	r14
    5522:	ff 92       	push	r15
    5524:	fc 01       	movw	r30, r24
    5526:	80 81       	ld	r24, Z
    5528:	21 81       	ldd	r18, Z+1	; 0x01
    552a:	08 2e       	mov	r0, r24
    552c:	00 0c       	add	r0, r0
    552e:	99 0b       	sbc	r25, r25
    5530:	ac 01       	movw	r20, r24
    5532:	3c e3       	ldi	r19, 0x3C	; 60
    5534:	23 02       	muls	r18, r19
    5536:	40 0d       	add	r20, r0
    5538:	51 1d       	adc	r21, r1
    553a:	11 24       	eor	r1, r1
    553c:	a2 81       	ldd	r26, Z+2	; 0x02
    553e:	0a 2e       	mov	r0, r26
    5540:	00 0c       	add	r0, r0
    5542:	bb 0b       	sbc	r27, r27
    5544:	20 e1       	ldi	r18, 0x10	; 16
    5546:	3e e0       	ldi	r19, 0x0E	; 14
    5548:	0e 94 00 49 	call	0x9200	; 0x9200 <__usmulhisi3>
    554c:	6a 01       	movw	r12, r20
    554e:	55 0f       	add	r21, r21
    5550:	ee 08       	sbc	r14, r14
    5552:	ff 08       	sbc	r15, r15
    5554:	c6 0e       	add	r12, r22
    5556:	d7 1e       	adc	r13, r23
    5558:	e8 1e       	adc	r14, r24
    555a:	f9 1e       	adc	r15, r25
    555c:	a0 85       	ldd	r26, Z+8	; 0x08
    555e:	b1 85       	ldd	r27, Z+9	; 0x09
    5560:	20 e8       	ldi	r18, 0x80	; 128
    5562:	31 e5       	ldi	r19, 0x51	; 81
    5564:	41 e0       	ldi	r20, 0x01	; 1
    5566:	50 e0       	ldi	r21, 0x00	; 0
    5568:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    556c:	c6 0e       	add	r12, r22
    556e:	d7 1e       	adc	r13, r23
    5570:	e8 1e       	adc	r14, r24
    5572:	f9 1e       	adc	r15, r25
    5574:	06 80       	ldd	r0, Z+6	; 0x06
    5576:	f7 81       	ldd	r31, Z+7	; 0x07
    5578:	e0 2d       	mov	r30, r0
    557a:	df 01       	movw	r26, r30
    557c:	a6 54       	subi	r26, 0x46	; 70
    557e:	b1 09       	sbc	r27, r1
    5580:	20 e8       	ldi	r18, 0x80	; 128
    5582:	33 e3       	ldi	r19, 0x33	; 51
    5584:	41 ee       	ldi	r20, 0xE1	; 225
    5586:	51 e0       	ldi	r21, 0x01	; 1
    5588:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    558c:	c6 0e       	add	r12, r22
    558e:	d7 1e       	adc	r13, r23
    5590:	e8 1e       	adc	r14, r24
    5592:	f9 1e       	adc	r15, r25
    5594:	cf 01       	movw	r24, r30
    5596:	85 54       	subi	r24, 0x45	; 69
    5598:	91 09       	sbc	r25, r1
    559a:	dc 01       	movw	r26, r24
    559c:	0a f4       	brpl	.+2      	; 0x55a0 <_Z14epoch_from_ltmP2tm+0x84>
    559e:	13 96       	adiw	r26, 0x03	; 3
    55a0:	b5 95       	asr	r27
    55a2:	a7 95       	ror	r26
    55a4:	b5 95       	asr	r27
    55a6:	a7 95       	ror	r26
    55a8:	20 e8       	ldi	r18, 0x80	; 128
    55aa:	31 e5       	ldi	r19, 0x51	; 81
    55ac:	41 e0       	ldi	r20, 0x01	; 1
    55ae:	50 e0       	ldi	r21, 0x00	; 0
    55b0:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    55b4:	c6 0e       	add	r12, r22
    55b6:	d7 1e       	adc	r13, r23
    55b8:	e8 1e       	adc	r14, r24
    55ba:	f9 1e       	adc	r15, r25
    55bc:	cf 01       	movw	r24, r30
    55be:	01 97       	sbiw	r24, 0x01	; 1
    55c0:	64 e6       	ldi	r22, 0x64	; 100
    55c2:	70 e0       	ldi	r23, 0x00	; 0
    55c4:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
    55c8:	db 01       	movw	r26, r22
    55ca:	20 e8       	ldi	r18, 0x80	; 128
    55cc:	3e ea       	ldi	r19, 0xAE	; 174
    55ce:	4e ef       	ldi	r20, 0xFE	; 254
    55d0:	5f ef       	ldi	r21, 0xFF	; 255
    55d2:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    55d6:	c6 0e       	add	r12, r22
    55d8:	d7 1e       	adc	r13, r23
    55da:	e8 1e       	adc	r14, r24
    55dc:	f9 1e       	adc	r15, r25
    55de:	cf 01       	movw	r24, r30
    55e0:	85 5d       	subi	r24, 0xD5	; 213
    55e2:	9e 4f       	sbci	r25, 0xFE	; 254
    55e4:	60 e9       	ldi	r22, 0x90	; 144
    55e6:	71 e0       	ldi	r23, 0x01	; 1
    55e8:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
    55ec:	db 01       	movw	r26, r22
    55ee:	20 e8       	ldi	r18, 0x80	; 128
    55f0:	31 e5       	ldi	r19, 0x51	; 81
    55f2:	41 e0       	ldi	r20, 0x01	; 1
    55f4:	50 e0       	ldi	r21, 0x00	; 0
    55f6:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    55fa:	6c 0d       	add	r22, r12
    55fc:	7d 1d       	adc	r23, r13
    55fe:	8e 1d       	adc	r24, r14
    5600:	9f 1d       	adc	r25, r15
    5602:	ff 90       	pop	r15
    5604:	ef 90       	pop	r14
    5606:	df 90       	pop	r13
    5608:	cf 90       	pop	r12
    560a:	08 95       	ret

0000560c <ds3231_get_epoch>:
    560c:	4f 92       	push	r4
    560e:	5f 92       	push	r5
    5610:	6f 92       	push	r6
    5612:	7f 92       	push	r7
    5614:	8f 92       	push	r8
    5616:	9f 92       	push	r9
    5618:	af 92       	push	r10
    561a:	bf 92       	push	r11
    561c:	cf 92       	push	r12
    561e:	df 92       	push	r13
    5620:	ef 92       	push	r14
    5622:	ff 92       	push	r15
    5624:	0f 93       	push	r16
    5626:	1f 93       	push	r17
    5628:	cf 93       	push	r28
    562a:	df 93       	push	r29
    562c:	cd b7       	in	r28, 0x3d	; 61
    562e:	de b7       	in	r29, 0x3e	; 62
    5630:	63 97       	sbiw	r28, 0x13	; 19
    5632:	cd bf       	out	0x3d, r28	; 61
    5634:	de bf       	out	0x3e, r29	; 62
    5636:	7c 01       	movw	r14, r24
    5638:	fe 01       	movw	r30, r28
    563a:	31 96       	adiw	r30, 0x01	; 1
    563c:	87 e0       	ldi	r24, 0x07	; 7
    563e:	df 01       	movw	r26, r30
    5640:	1d 92       	st	X+, r1
    5642:	8a 95       	dec	r24
    5644:	e9 f7       	brne	.-6      	; 0x5640 <ds3231_get_epoch+0x34>
    5646:	8a e0       	ldi	r24, 0x0A	; 10
    5648:	1f ef       	ldi	r17, 0xFF	; 255
    564a:	18 0f       	add	r17, r24
    564c:	88 23       	and	r24, r24
    564e:	81 f0       	breq	.+32     	; 0x5670 <ds3231_get_epoch+0x64>
    5650:	27 e0       	ldi	r18, 0x07	; 7
    5652:	ae 01       	movw	r20, r28
    5654:	4f 5f       	subi	r20, 0xFF	; 255
    5656:	5f 4f       	sbci	r21, 0xFF	; 255
    5658:	60 e0       	ldi	r22, 0x00	; 0
    565a:	80 ed       	ldi	r24, 0xD0	; 208
    565c:	0e 94 3a 34 	call	0x6874	; 0x6874 <I2C_0_GetData>
    5660:	01 e0       	ldi	r16, 0x01	; 1
    5662:	87 30       	cpi	r24, 0x07	; 7
    5664:	09 f4       	brne	.+2      	; 0x5668 <ds3231_get_epoch+0x5c>
    5666:	00 e0       	ldi	r16, 0x00	; 0
    5668:	87 30       	cpi	r24, 0x07	; 7
    566a:	21 f0       	breq	.+8      	; 0x5674 <ds3231_get_epoch+0x68>
    566c:	91 e0       	ldi	r25, 0x01	; 1
    566e:	03 c0       	rjmp	.+6      	; 0x5676 <ds3231_get_epoch+0x6a>
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	01 c0       	rjmp	.+2      	; 0x5676 <ds3231_get_epoch+0x6a>
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	81 2f       	mov	r24, r17
    5678:	91 11       	cpse	r25, r1
    567a:	e6 cf       	rjmp	.-52     	; 0x5648 <ds3231_get_epoch+0x3c>
    567c:	01 11       	cpse	r16, r1
    567e:	f3 c0       	rjmp	.+486    	; 0x5866 <ds3231_get_epoch+0x25a>
    5680:	fe 01       	movw	r30, r28
    5682:	38 96       	adiw	r30, 0x08	; 8
    5684:	8c e0       	ldi	r24, 0x0C	; 12
    5686:	df 01       	movw	r26, r30
    5688:	1d 92       	st	X+, r1
    568a:	8a 95       	dec	r24
    568c:	e9 f7       	brne	.-6      	; 0x5688 <ds3231_get_epoch+0x7c>
    568e:	2f 81       	ldd	r18, Y+7	; 0x07
    5690:	82 2f       	mov	r24, r18
    5692:	8f 70       	andi	r24, 0x0F	; 15
    5694:	a8 2e       	mov	r10, r24
    5696:	b1 2c       	mov	r11, r1
    5698:	c5 01       	movw	r24, r10
    569a:	8c 59       	subi	r24, 0x9C	; 156
    569c:	9f 4f       	sbci	r25, 0xFF	; 255
    569e:	22 95       	swap	r18
    56a0:	2f 70       	andi	r18, 0x0F	; 15
    56a2:	30 e0       	ldi	r19, 0x00	; 0
    56a4:	59 01       	movw	r10, r18
    56a6:	aa 0c       	add	r10, r10
    56a8:	bb 1c       	adc	r11, r11
    56aa:	22 0f       	add	r18, r18
    56ac:	33 1f       	adc	r19, r19
    56ae:	22 0f       	add	r18, r18
    56b0:	33 1f       	adc	r19, r19
    56b2:	22 0f       	add	r18, r18
    56b4:	33 1f       	adc	r19, r19
    56b6:	2a 0d       	add	r18, r10
    56b8:	3b 1d       	adc	r19, r11
    56ba:	5c 01       	movw	r10, r24
    56bc:	a2 0e       	add	r10, r18
    56be:	b3 1e       	adc	r11, r19
    56c0:	65 01       	movw	r12, r10
    56c2:	b4 e9       	ldi	r27, 0x94	; 148
    56c4:	cb 1a       	sub	r12, r27
    56c6:	b8 ef       	ldi	r27, 0xF8	; 248
    56c8:	db 0a       	sbc	r13, r27
    56ca:	8e 81       	ldd	r24, Y+6	; 0x06
    56cc:	98 2f       	mov	r25, r24
    56ce:	9f 70       	andi	r25, 0x0F	; 15
    56d0:	82 95       	swap	r24
    56d2:	8f 70       	andi	r24, 0x0F	; 15
    56d4:	88 0f       	add	r24, r24
    56d6:	98 2e       	mov	r9, r24
    56d8:	99 0c       	add	r9, r9
    56da:	99 0c       	add	r9, r9
    56dc:	89 0d       	add	r24, r9
    56de:	98 2e       	mov	r9, r24
    56e0:	99 0e       	add	r9, r25
    56e2:	ed 81       	ldd	r30, Y+5	; 0x05
    56e4:	8e 2f       	mov	r24, r30
    56e6:	8f 70       	andi	r24, 0x0F	; 15
    56e8:	e2 95       	swap	r30
    56ea:	ef 70       	andi	r30, 0x0F	; 15
    56ec:	ee 0f       	add	r30, r30
    56ee:	8e 2e       	mov	r8, r30
    56f0:	88 0c       	add	r8, r8
    56f2:	88 0c       	add	r8, r8
    56f4:	e8 0d       	add	r30, r8
    56f6:	8e 2e       	mov	r8, r30
    56f8:	88 0e       	add	r8, r24
    56fa:	11 e0       	ldi	r17, 0x01	; 1
    56fc:	19 15       	cp	r17, r9
    56fe:	60 f4       	brcc	.+24     	; 0x5718 <ds3231_get_epoch+0x10c>
    5700:	61 2f       	mov	r22, r17
    5702:	c6 01       	movw	r24, r12
    5704:	0e 94 17 02 	call	0x42e	; 0x42e <month_length>
    5708:	28 89       	ldd	r18, Y+16	; 0x10
    570a:	39 89       	ldd	r19, Y+17	; 0x11
    570c:	28 0f       	add	r18, r24
    570e:	31 1d       	adc	r19, r1
    5710:	28 8b       	std	Y+16, r18	; 0x10
    5712:	39 8b       	std	Y+17, r19	; 0x11
    5714:	1f 5f       	subi	r17, 0xFF	; 255
    5716:	f2 cf       	rjmp	.-28     	; 0x56fc <ds3231_get_epoch+0xf0>
    5718:	e8 2d       	mov	r30, r8
    571a:	88 0c       	add	r8, r8
    571c:	ff 0b       	sbc	r31, r31
    571e:	31 97       	sbiw	r30, 0x01	; 1
    5720:	88 89       	ldd	r24, Y+16	; 0x10
    5722:	99 89       	ldd	r25, Y+17	; 0x11
    5724:	e8 0f       	add	r30, r24
    5726:	f9 1f       	adc	r31, r25
    5728:	29 81       	ldd	r18, Y+1	; 0x01
    572a:	42 2f       	mov	r20, r18
    572c:	42 95       	swap	r20
    572e:	4f 70       	andi	r20, 0x0F	; 15
    5730:	44 0f       	add	r20, r20
    5732:	94 2f       	mov	r25, r20
    5734:	99 0f       	add	r25, r25
    5736:	99 0f       	add	r25, r25
    5738:	84 2f       	mov	r24, r20
    573a:	89 0f       	add	r24, r25
    573c:	42 2f       	mov	r20, r18
    573e:	4f 70       	andi	r20, 0x0F	; 15
    5740:	48 0f       	add	r20, r24
    5742:	3a 81       	ldd	r19, Y+2	; 0x02
    5744:	23 2f       	mov	r18, r19
    5746:	22 95       	swap	r18
    5748:	2f 70       	andi	r18, 0x0F	; 15
    574a:	22 0f       	add	r18, r18
    574c:	92 2f       	mov	r25, r18
    574e:	99 0f       	add	r25, r25
    5750:	99 0f       	add	r25, r25
    5752:	82 2f       	mov	r24, r18
    5754:	89 0f       	add	r24, r25
    5756:	23 2f       	mov	r18, r19
    5758:	2f 70       	andi	r18, 0x0F	; 15
    575a:	28 0f       	add	r18, r24
    575c:	3b 81       	ldd	r19, Y+3	; 0x03
    575e:	53 2f       	mov	r21, r19
    5760:	50 72       	andi	r21, 0x20	; 32
    5762:	83 2f       	mov	r24, r19
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	95 95       	asr	r25
    5768:	87 95       	ror	r24
    576a:	95 95       	asr	r25
    576c:	87 95       	ror	r24
    576e:	95 95       	asr	r25
    5770:	87 95       	ror	r24
    5772:	95 95       	asr	r25
    5774:	87 95       	ror	r24
    5776:	81 70       	andi	r24, 0x01	; 1
    5778:	88 0f       	add	r24, r24
    577a:	a8 2f       	mov	r26, r24
    577c:	aa 0f       	add	r26, r26
    577e:	aa 0f       	add	r26, r26
    5780:	8a 0f       	add	r24, r26
    5782:	a3 2f       	mov	r26, r19
    5784:	af 70       	andi	r26, 0x0F	; 15
    5786:	a8 0f       	add	r26, r24
    5788:	36 ff       	sbrs	r19, 6
    578a:	04 c0       	rjmp	.+8      	; 0x5794 <ds3231_get_epoch+0x188>
    578c:	55 23       	and	r21, r21
    578e:	21 f0       	breq	.+8      	; 0x5798 <ds3231_get_epoch+0x18c>
    5790:	a4 5f       	subi	r26, 0xF4	; 244
    5792:	02 c0       	rjmp	.+4      	; 0x5798 <ds3231_get_epoch+0x18c>
    5794:	51 11       	cpse	r21, r1
    5796:	ac 5e       	subi	r26, 0xEC	; 236
    5798:	04 2e       	mov	r0, r20
    579a:	00 0c       	add	r0, r0
    579c:	55 0b       	sbc	r21, r21
    579e:	8c e3       	ldi	r24, 0x3C	; 60
    57a0:	28 02       	muls	r18, r24
    57a2:	40 0d       	add	r20, r0
    57a4:	51 1d       	adc	r21, r1
    57a6:	11 24       	eor	r1, r1
    57a8:	0a 2e       	mov	r0, r26
    57aa:	00 0c       	add	r0, r0
    57ac:	bb 0b       	sbc	r27, r27
    57ae:	20 e1       	ldi	r18, 0x10	; 16
    57b0:	3e e0       	ldi	r19, 0x0E	; 14
    57b2:	0e 94 00 49 	call	0x9200	; 0x9200 <__usmulhisi3>
    57b6:	2a 01       	movw	r4, r20
    57b8:	55 0f       	add	r21, r21
    57ba:	66 08       	sbc	r6, r6
    57bc:	77 08       	sbc	r7, r7
    57be:	46 0e       	add	r4, r22
    57c0:	57 1e       	adc	r5, r23
    57c2:	68 1e       	adc	r6, r24
    57c4:	79 1e       	adc	r7, r25
    57c6:	df 01       	movw	r26, r30
    57c8:	20 e8       	ldi	r18, 0x80	; 128
    57ca:	31 e5       	ldi	r19, 0x51	; 81
    57cc:	41 e0       	ldi	r20, 0x01	; 1
    57ce:	50 e0       	ldi	r21, 0x00	; 0
    57d0:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    57d4:	46 0e       	add	r4, r22
    57d6:	57 1e       	adc	r5, r23
    57d8:	68 1e       	adc	r6, r24
    57da:	79 1e       	adc	r7, r25
    57dc:	d5 01       	movw	r26, r10
    57de:	a6 54       	subi	r26, 0x46	; 70
    57e0:	b1 09       	sbc	r27, r1
    57e2:	20 e8       	ldi	r18, 0x80	; 128
    57e4:	33 e3       	ldi	r19, 0x33	; 51
    57e6:	41 ee       	ldi	r20, 0xE1	; 225
    57e8:	51 e0       	ldi	r21, 0x01	; 1
    57ea:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    57ee:	46 0e       	add	r4, r22
    57f0:	57 1e       	adc	r5, r23
    57f2:	68 1e       	adc	r6, r24
    57f4:	79 1e       	adc	r7, r25
    57f6:	c5 01       	movw	r24, r10
    57f8:	85 54       	subi	r24, 0x45	; 69
    57fa:	91 09       	sbc	r25, r1
    57fc:	dc 01       	movw	r26, r24
    57fe:	0a f4       	brpl	.+2      	; 0x5802 <ds3231_get_epoch+0x1f6>
    5800:	13 96       	adiw	r26, 0x03	; 3
    5802:	b5 95       	asr	r27
    5804:	a7 95       	ror	r26
    5806:	b5 95       	asr	r27
    5808:	a7 95       	ror	r26
    580a:	20 e8       	ldi	r18, 0x80	; 128
    580c:	31 e5       	ldi	r19, 0x51	; 81
    580e:	41 e0       	ldi	r20, 0x01	; 1
    5810:	50 e0       	ldi	r21, 0x00	; 0
    5812:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    5816:	46 0e       	add	r4, r22
    5818:	57 1e       	adc	r5, r23
    581a:	68 1e       	adc	r6, r24
    581c:	79 1e       	adc	r7, r25
    581e:	c5 01       	movw	r24, r10
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	64 e6       	ldi	r22, 0x64	; 100
    5824:	70 e0       	ldi	r23, 0x00	; 0
    5826:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
    582a:	db 01       	movw	r26, r22
    582c:	20 e8       	ldi	r18, 0x80	; 128
    582e:	3e ea       	ldi	r19, 0xAE	; 174
    5830:	4e ef       	ldi	r20, 0xFE	; 254
    5832:	5f ef       	ldi	r21, 0xFF	; 255
    5834:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    5838:	46 0e       	add	r4, r22
    583a:	57 1e       	adc	r5, r23
    583c:	68 1e       	adc	r6, r24
    583e:	79 1e       	adc	r7, r25
    5840:	c5 01       	movw	r24, r10
    5842:	85 5d       	subi	r24, 0xD5	; 213
    5844:	9e 4f       	sbci	r25, 0xFE	; 254
    5846:	60 e9       	ldi	r22, 0x90	; 144
    5848:	71 e0       	ldi	r23, 0x01	; 1
    584a:	0e 94 93 48 	call	0x9126	; 0x9126 <__divmodhi4>
    584e:	db 01       	movw	r26, r22
    5850:	20 e8       	ldi	r18, 0x80	; 128
    5852:	31 e5       	ldi	r19, 0x51	; 81
    5854:	41 e0       	ldi	r20, 0x01	; 1
    5856:	50 e0       	ldi	r21, 0x00	; 0
    5858:	0e 94 12 49 	call	0x9224	; 0x9224 <__mulshisi3>
    585c:	64 0d       	add	r22, r4
    585e:	75 1d       	adc	r23, r5
    5860:	86 1d       	adc	r24, r6
    5862:	97 1d       	adc	r25, r7
    5864:	03 c0       	rjmp	.+6      	; 0x586c <ds3231_get_epoch+0x260>
    5866:	60 e0       	ldi	r22, 0x00	; 0
    5868:	70 e0       	ldi	r23, 0x00	; 0
    586a:	cb 01       	movw	r24, r22
    586c:	e1 14       	cp	r14, r1
    586e:	f1 04       	cpc	r15, r1
    5870:	39 f0       	breq	.+14     	; 0x5880 <ds3231_get_epoch+0x274>
    5872:	00 23       	and	r16, r16
    5874:	11 f0       	breq	.+4      	; 0x587a <ds3231_get_epoch+0x26e>
    5876:	2c ef       	ldi	r18, 0xFC	; 252
    5878:	01 c0       	rjmp	.+2      	; 0x587c <ds3231_get_epoch+0x270>
    587a:	20 e0       	ldi	r18, 0x00	; 0
    587c:	d7 01       	movw	r26, r14
    587e:	2c 93       	st	X, r18
    5880:	63 96       	adiw	r28, 0x13	; 19
    5882:	cd bf       	out	0x3d, r28	; 61
    5884:	de bf       	out	0x3e, r29	; 62
    5886:	df 91       	pop	r29
    5888:	cf 91       	pop	r28
    588a:	1f 91       	pop	r17
    588c:	0f 91       	pop	r16
    588e:	ff 90       	pop	r15
    5890:	ef 90       	pop	r14
    5892:	df 90       	pop	r13
    5894:	cf 90       	pop	r12
    5896:	bf 90       	pop	r11
    5898:	af 90       	pop	r10
    589a:	9f 90       	pop	r9
    589c:	8f 90       	pop	r8
    589e:	7f 90       	pop	r7
    58a0:	6f 90       	pop	r6
    58a2:	5f 90       	pop	r5
    58a4:	4f 90       	pop	r4
    58a6:	08 95       	ret

000058a8 <RTC_String2Epoch>:
    58a8:	7f 92       	push	r7
    58aa:	8f 92       	push	r8
    58ac:	9f 92       	push	r9
    58ae:	af 92       	push	r10
    58b0:	bf 92       	push	r11
    58b2:	cf 92       	push	r12
    58b4:	df 92       	push	r13
    58b6:	ef 92       	push	r14
    58b8:	ff 92       	push	r15
    58ba:	0f 93       	push	r16
    58bc:	1f 93       	push	r17
    58be:	cf 93       	push	r28
    58c0:	df 93       	push	r29
    58c2:	cd b7       	in	r28, 0x3d	; 61
    58c4:	de b7       	in	r29, 0x3e	; 62
    58c6:	2c 97       	sbiw	r28, 0x0c	; 12
    58c8:	cd bf       	out	0x3d, r28	; 61
    58ca:	de bf       	out	0x3e, r29	; 62
    58cc:	6c 01       	movw	r12, r24
    58ce:	8b 01       	movw	r16, r22
    58d0:	fe 01       	movw	r30, r28
    58d2:	31 96       	adiw	r30, 0x01	; 1
    58d4:	8c e0       	ldi	r24, 0x0C	; 12
    58d6:	df 01       	movw	r26, r30
    58d8:	1d 92       	st	X+, r1
    58da:	8a 95       	dec	r24
    58dc:	e9 f7       	brne	.-6      	; 0x58d8 <RTC_String2Epoch+0x30>
    58de:	61 15       	cp	r22, r1
    58e0:	71 05       	cpc	r23, r1
    58e2:	09 f4       	brne	.+2      	; 0x58e6 <RTC_String2Epoch+0x3e>
    58e4:	63 c0       	rjmp	.+198    	; 0x59ac <RTC_String2Epoch+0x104>
    58e6:	cb 01       	movw	r24, r22
    58e8:	0a 96       	adiw	r24, 0x0a	; 10
    58ea:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    58ee:	a8 2e       	mov	r10, r24
    58f0:	c8 01       	movw	r24, r16
    58f2:	08 96       	adiw	r24, 0x08	; 8
    58f4:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    58f8:	b8 2e       	mov	r11, r24
    58fa:	c8 01       	movw	r24, r16
    58fc:	06 96       	adiw	r24, 0x06	; 6
    58fe:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    5902:	f8 2e       	mov	r15, r24
    5904:	c8 01       	movw	r24, r16
    5906:	04 96       	adiw	r24, 0x04	; 4
    5908:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    590c:	88 2e       	mov	r8, r24
    590e:	c8 01       	movw	r24, r16
    5910:	02 96       	adiw	r24, 0x02	; 2
    5912:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    5916:	78 2e       	mov	r7, r24
    5918:	c8 01       	movw	r24, r16
    591a:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    591e:	18 2f       	mov	r17, r24
    5920:	8f 2d       	mov	r24, r15
    5922:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_Z7bcd2dech>
    5926:	98 2e       	mov	r9, r24
    5928:	81 2f       	mov	r24, r17
    592a:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_Z7bcd2dech>
    592e:	e8 2e       	mov	r14, r24
    5930:	f1 2c       	mov	r15, r1
    5932:	c7 01       	movw	r24, r14
    5934:	8c 59       	subi	r24, 0x9C	; 156
    5936:	9f 4f       	sbci	r25, 0xFF	; 255
    5938:	8f 83       	std	Y+7, r24	; 0x07
    593a:	98 87       	std	Y+8, r25	; 0x08
    593c:	b0 e3       	ldi	r27, 0x30	; 48
    593e:	eb 1a       	sub	r14, r27
    5940:	b8 ef       	ldi	r27, 0xF8	; 248
    5942:	fb 0a       	sbc	r15, r27
    5944:	87 2d       	mov	r24, r7
    5946:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_Z7bcd2dech>
    594a:	08 2f       	mov	r16, r24
    594c:	8f ef       	ldi	r24, 0xFF	; 255
    594e:	80 0f       	add	r24, r16
    5950:	8e 83       	std	Y+6, r24	; 0x06
    5952:	88 2d       	mov	r24, r8
    5954:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_Z7bcd2dech>
    5958:	8c 83       	std	Y+4, r24	; 0x04
    595a:	11 e0       	ldi	r17, 0x01	; 1
    595c:	10 17       	cp	r17, r16
    595e:	60 f4       	brcc	.+24     	; 0x5978 <RTC_String2Epoch+0xd0>
    5960:	61 2f       	mov	r22, r17
    5962:	c7 01       	movw	r24, r14
    5964:	0e 94 17 02 	call	0x42e	; 0x42e <month_length>
    5968:	29 85       	ldd	r18, Y+9	; 0x09
    596a:	3a 85       	ldd	r19, Y+10	; 0x0a
    596c:	28 0f       	add	r18, r24
    596e:	31 1d       	adc	r19, r1
    5970:	29 87       	std	Y+9, r18	; 0x09
    5972:	3a 87       	std	Y+10, r19	; 0x0a
    5974:	1f 5f       	subi	r17, 0xFF	; 255
    5976:	f2 cf       	rjmp	.-28     	; 0x595c <RTC_String2Epoch+0xb4>
    5978:	8c 81       	ldd	r24, Y+4	; 0x04
    597a:	08 2e       	mov	r0, r24
    597c:	00 0c       	add	r0, r0
    597e:	99 0b       	sbc	r25, r25
    5980:	01 97       	sbiw	r24, 0x01	; 1
    5982:	29 85       	ldd	r18, Y+9	; 0x09
    5984:	3a 85       	ldd	r19, Y+10	; 0x0a
    5986:	82 0f       	add	r24, r18
    5988:	93 1f       	adc	r25, r19
    598a:	89 87       	std	Y+9, r24	; 0x09
    598c:	9a 87       	std	Y+10, r25	; 0x0a
    598e:	8a 2d       	mov	r24, r10
    5990:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_Z7bcd2dech>
    5994:	18 2f       	mov	r17, r24
    5996:	8b 2d       	mov	r24, r11
    5998:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_Z7bcd2dech>
    599c:	9b 82       	std	Y+3, r9	; 0x03
    599e:	8a 83       	std	Y+2, r24	; 0x02
    59a0:	19 83       	std	Y+1, r17	; 0x01
    59a2:	ce 01       	movw	r24, r28
    59a4:	01 96       	adiw	r24, 0x01	; 1
    59a6:	0e 94 8e 2a 	call	0x551c	; 0x551c <_Z14epoch_from_ltmP2tm>
    59aa:	04 c0       	rjmp	.+8      	; 0x59b4 <RTC_String2Epoch+0x10c>
    59ac:	80 e0       	ldi	r24, 0x00	; 0
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	0e 94 06 2b 	call	0x560c	; 0x560c <ds3231_get_epoch>
    59b4:	c1 14       	cp	r12, r1
    59b6:	d1 04       	cpc	r13, r1
    59b8:	49 f0       	breq	.+18     	; 0x59cc <RTC_String2Epoch+0x124>
    59ba:	21 e0       	ldi	r18, 0x01	; 1
    59bc:	61 15       	cp	r22, r1
    59be:	71 05       	cpc	r23, r1
    59c0:	81 05       	cpc	r24, r1
    59c2:	91 05       	cpc	r25, r1
    59c4:	09 f0       	breq	.+2      	; 0x59c8 <RTC_String2Epoch+0x120>
    59c6:	20 e0       	ldi	r18, 0x00	; 0
    59c8:	f6 01       	movw	r30, r12
    59ca:	20 83       	st	Z, r18
    59cc:	2c 96       	adiw	r28, 0x0c	; 12
    59ce:	cd bf       	out	0x3d, r28	; 61
    59d0:	de bf       	out	0x3e, r29	; 62
    59d2:	df 91       	pop	r29
    59d4:	cf 91       	pop	r28
    59d6:	1f 91       	pop	r17
    59d8:	0f 91       	pop	r16
    59da:	ff 90       	pop	r15
    59dc:	ef 90       	pop	r14
    59de:	df 90       	pop	r13
    59e0:	cf 90       	pop	r12
    59e2:	bf 90       	pop	r11
    59e4:	af 90       	pop	r10
    59e6:	9f 90       	pop	r9
    59e8:	8f 90       	pop	r8
    59ea:	7f 90       	pop	r7
    59ec:	08 95       	ret

000059ee <ds3231_get_temp>:
    59ee:	ef 92       	push	r14
    59f0:	ff 92       	push	r15
    59f2:	1f 93       	push	r17
    59f4:	cf 93       	push	r28
    59f6:	df 93       	push	r29
    59f8:	00 d0       	rcall	.+0      	; 0x59fa <ds3231_get_temp+0xc>
    59fa:	cd b7       	in	r28, 0x3d	; 61
    59fc:	de b7       	in	r29, 0x3e	; 62
    59fe:	7c 01       	movw	r14, r24
    5a00:	19 82       	std	Y+1, r1	; 0x01
    5a02:	1a 82       	std	Y+2, r1	; 0x02
    5a04:	8a e0       	ldi	r24, 0x0A	; 10
    5a06:	1f ef       	ldi	r17, 0xFF	; 255
    5a08:	18 0f       	add	r17, r24
    5a0a:	88 23       	and	r24, r24
    5a0c:	81 f0       	breq	.+32     	; 0x5a2e <ds3231_get_temp+0x40>
    5a0e:	22 e0       	ldi	r18, 0x02	; 2
    5a10:	ae 01       	movw	r20, r28
    5a12:	4f 5f       	subi	r20, 0xFF	; 255
    5a14:	5f 4f       	sbci	r21, 0xFF	; 255
    5a16:	61 e1       	ldi	r22, 0x11	; 17
    5a18:	80 ed       	ldi	r24, 0xD0	; 208
    5a1a:	0e 94 3a 34 	call	0x6874	; 0x6874 <I2C_0_GetData>
    5a1e:	21 e0       	ldi	r18, 0x01	; 1
    5a20:	82 30       	cpi	r24, 0x02	; 2
    5a22:	09 f4       	brne	.+2      	; 0x5a26 <ds3231_get_temp+0x38>
    5a24:	20 e0       	ldi	r18, 0x00	; 0
    5a26:	82 30       	cpi	r24, 0x02	; 2
    5a28:	21 f0       	breq	.+8      	; 0x5a32 <ds3231_get_temp+0x44>
    5a2a:	91 e0       	ldi	r25, 0x01	; 1
    5a2c:	03 c0       	rjmp	.+6      	; 0x5a34 <ds3231_get_temp+0x46>
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	01 c0       	rjmp	.+2      	; 0x5a34 <ds3231_get_temp+0x46>
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	81 2f       	mov	r24, r17
    5a36:	91 11       	cpse	r25, r1
    5a38:	e6 cf       	rjmp	.-52     	; 0x5a06 <ds3231_get_temp+0x18>
    5a3a:	21 11       	cpse	r18, r1
    5a3c:	09 c0       	rjmp	.+18     	; 0x5a50 <ds3231_get_temp+0x62>
    5a3e:	89 81       	ldd	r24, Y+1	; 0x01
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	98 2f       	mov	r25, r24
    5a44:	88 27       	eor	r24, r24
    5a46:	3a 81       	ldd	r19, Y+2	; 0x02
    5a48:	83 2b       	or	r24, r19
    5a4a:	f7 01       	movw	r30, r14
    5a4c:	80 83       	st	Z, r24
    5a4e:	91 83       	std	Z+1, r25	; 0x01
    5a50:	82 2f       	mov	r24, r18
    5a52:	0f 90       	pop	r0
    5a54:	0f 90       	pop	r0
    5a56:	df 91       	pop	r29
    5a58:	cf 91       	pop	r28
    5a5a:	1f 91       	pop	r17
    5a5c:	ff 90       	pop	r15
    5a5e:	ef 90       	pop	r14
    5a60:	08 95       	ret

00005a62 <ds3231_set_date_time_arducon>:
    5a62:	ff 92       	push	r15
    5a64:	0f 93       	push	r16
    5a66:	1f 93       	push	r17
    5a68:	cf 93       	push	r28
    5a6a:	df 93       	push	r29
    5a6c:	cd b7       	in	r28, 0x3d	; 61
    5a6e:	de b7       	in	r29, 0x3e	; 62
    5a70:	27 97       	sbiw	r28, 0x07	; 7
    5a72:	cd bf       	out	0x3d, r28	; 61
    5a74:	de bf       	out	0x3e, r29	; 62
    5a76:	fe 01       	movw	r30, r28
    5a78:	31 96       	adiw	r30, 0x01	; 1
    5a7a:	27 e0       	ldi	r18, 0x07	; 7
    5a7c:	df 01       	movw	r26, r30
    5a7e:	1d 92       	st	X+, r1
    5a80:	2a 95       	dec	r18
    5a82:	e9 f7       	brne	.-6      	; 0x5a7e <ds3231_set_date_time_arducon+0x1c>
    5a84:	00 97       	sbiw	r24, 0x00	; 0
    5a86:	09 f4       	brne	.+2      	; 0x5a8a <ds3231_set_date_time_arducon+0x28>
    5a88:	3f c0       	rjmp	.+126    	; 0x5b08 <ds3231_set_date_time_arducon+0xa6>
    5a8a:	f6 2e       	mov	r15, r22
    5a8c:	8c 01       	movw	r16, r24
    5a8e:	0a 96       	adiw	r24, 0x0a	; 10
    5a90:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    5a94:	89 83       	std	Y+1, r24	; 0x01
    5a96:	c8 01       	movw	r24, r16
    5a98:	08 96       	adiw	r24, 0x08	; 8
    5a9a:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    5a9e:	8a 83       	std	Y+2, r24	; 0x02
    5aa0:	c8 01       	movw	r24, r16
    5aa2:	06 96       	adiw	r24, 0x06	; 6
    5aa4:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    5aa8:	8b 83       	std	Y+3, r24	; 0x03
    5aaa:	c8 01       	movw	r24, r16
    5aac:	04 96       	adiw	r24, 0x04	; 4
    5aae:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    5ab2:	8d 83       	std	Y+5, r24	; 0x05
    5ab4:	c8 01       	movw	r24, r16
    5ab6:	02 96       	adiw	r24, 0x02	; 2
    5ab8:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    5abc:	8e 83       	std	Y+6, r24	; 0x06
    5abe:	c8 01       	movw	r24, r16
    5ac0:	0e 94 85 2a 	call	0x550a	; 0x550a <_Z8char2bcdPc>
    5ac4:	8f 83       	std	Y+7, r24	; 0x07
    5ac6:	31 e0       	ldi	r19, 0x01	; 1
    5ac8:	9a e0       	ldi	r25, 0x0A	; 10
    5aca:	1f ef       	ldi	r17, 0xFF	; 255
    5acc:	19 0f       	add	r17, r25
    5ace:	99 23       	and	r25, r25
    5ad0:	a1 f0       	breq	.+40     	; 0x5afa <ds3231_set_date_time_arducon+0x98>
    5ad2:	6f 2d       	mov	r22, r15
    5ad4:	66 0f       	add	r22, r22
    5ad6:	66 0f       	add	r22, r22
    5ad8:	66 0f       	add	r22, r22
    5ada:	6f 19       	sub	r22, r15
    5adc:	27 e0       	ldi	r18, 0x07	; 7
    5ade:	ae 01       	movw	r20, r28
    5ae0:	4f 5f       	subi	r20, 0xFF	; 255
    5ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ae4:	80 ed       	ldi	r24, 0xD0	; 208
    5ae6:	0e 94 fd 33 	call	0x67fa	; 0x67fa <I2C_0_SendData>
    5aea:	31 e0       	ldi	r19, 0x01	; 1
    5aec:	87 30       	cpi	r24, 0x07	; 7
    5aee:	09 f4       	brne	.+2      	; 0x5af2 <ds3231_set_date_time_arducon+0x90>
    5af0:	30 e0       	ldi	r19, 0x00	; 0
    5af2:	87 30       	cpi	r24, 0x07	; 7
    5af4:	21 f0       	breq	.+8      	; 0x5afe <ds3231_set_date_time_arducon+0x9c>
    5af6:	21 e0       	ldi	r18, 0x01	; 1
    5af8:	03 c0       	rjmp	.+6      	; 0x5b00 <ds3231_set_date_time_arducon+0x9e>
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	01 c0       	rjmp	.+2      	; 0x5b00 <ds3231_set_date_time_arducon+0x9e>
    5afe:	20 e0       	ldi	r18, 0x00	; 0
    5b00:	91 2f       	mov	r25, r17
    5b02:	21 11       	cpse	r18, r1
    5b04:	e2 cf       	rjmp	.-60     	; 0x5aca <ds3231_set_date_time_arducon+0x68>
    5b06:	01 c0       	rjmp	.+2      	; 0x5b0a <ds3231_set_date_time_arducon+0xa8>
    5b08:	31 e0       	ldi	r19, 0x01	; 1
    5b0a:	83 2f       	mov	r24, r19
    5b0c:	27 96       	adiw	r28, 0x07	; 7
    5b0e:	cd bf       	out	0x3d, r28	; 61
    5b10:	de bf       	out	0x3e, r29	; 62
    5b12:	df 91       	pop	r29
    5b14:	cf 91       	pop	r28
    5b16:	1f 91       	pop	r17
    5b18:	0f 91       	pop	r16
    5b1a:	ff 90       	pop	r15
    5b1c:	08 95       	ret

00005b1e <ds3231_set_date_time>:
    5b1e:	0f 93       	push	r16
    5b20:	1f 93       	push	r17
    5b22:	cf 93       	push	r28
    5b24:	df 93       	push	r29
    5b26:	cd b7       	in	r28, 0x3d	; 61
    5b28:	de b7       	in	r29, 0x3e	; 62
    5b2a:	27 97       	sbiw	r28, 0x07	; 7
    5b2c:	cd bf       	out	0x3d, r28	; 61
    5b2e:	de bf       	out	0x3e, r29	; 62
    5b30:	fc 01       	movw	r30, r24
    5b32:	06 2f       	mov	r16, r22
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	8c 83       	std	Y+4, r24	; 0x04
    5b38:	82 89       	ldd	r24, Z+18	; 0x12
    5b3a:	20 ed       	ldi	r18, 0xD0	; 208
    5b3c:	28 0f       	add	r18, r24
    5b3e:	91 89       	ldd	r25, Z+17	; 0x11
    5b40:	89 2f       	mov	r24, r25
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	c0 97       	sbiw	r24, 0x30	; 48
    5b46:	82 95       	swap	r24
    5b48:	92 95       	swap	r25
    5b4a:	90 7f       	andi	r25, 0xF0	; 240
    5b4c:	98 27       	eor	r25, r24
    5b4e:	80 7f       	andi	r24, 0xF0	; 240
    5b50:	98 27       	eor	r25, r24
    5b52:	82 2b       	or	r24, r18
    5b54:	89 83       	std	Y+1, r24	; 0x01
    5b56:	87 85       	ldd	r24, Z+15	; 0x0f
    5b58:	20 ed       	ldi	r18, 0xD0	; 208
    5b5a:	28 0f       	add	r18, r24
    5b5c:	96 85       	ldd	r25, Z+14	; 0x0e
    5b5e:	89 2f       	mov	r24, r25
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	c0 97       	sbiw	r24, 0x30	; 48
    5b64:	82 95       	swap	r24
    5b66:	92 95       	swap	r25
    5b68:	90 7f       	andi	r25, 0xF0	; 240
    5b6a:	98 27       	eor	r25, r24
    5b6c:	80 7f       	andi	r24, 0xF0	; 240
    5b6e:	98 27       	eor	r25, r24
    5b70:	82 2b       	or	r24, r18
    5b72:	8a 83       	std	Y+2, r24	; 0x02
    5b74:	84 85       	ldd	r24, Z+12	; 0x0c
    5b76:	20 ed       	ldi	r18, 0xD0	; 208
    5b78:	28 0f       	add	r18, r24
    5b7a:	93 85       	ldd	r25, Z+11	; 0x0b
    5b7c:	89 2f       	mov	r24, r25
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	c0 97       	sbiw	r24, 0x30	; 48
    5b82:	82 95       	swap	r24
    5b84:	92 95       	swap	r25
    5b86:	90 7f       	andi	r25, 0xF0	; 240
    5b88:	98 27       	eor	r25, r24
    5b8a:	80 7f       	andi	r24, 0xF0	; 240
    5b8c:	98 27       	eor	r25, r24
    5b8e:	82 2b       	or	r24, r18
    5b90:	8b 83       	std	Y+3, r24	; 0x03
    5b92:	81 85       	ldd	r24, Z+9	; 0x09
    5b94:	20 ed       	ldi	r18, 0xD0	; 208
    5b96:	28 0f       	add	r18, r24
    5b98:	90 85       	ldd	r25, Z+8	; 0x08
    5b9a:	89 2f       	mov	r24, r25
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	c0 97       	sbiw	r24, 0x30	; 48
    5ba0:	82 95       	swap	r24
    5ba2:	92 95       	swap	r25
    5ba4:	90 7f       	andi	r25, 0xF0	; 240
    5ba6:	98 27       	eor	r25, r24
    5ba8:	80 7f       	andi	r24, 0xF0	; 240
    5baa:	98 27       	eor	r25, r24
    5bac:	82 2b       	or	r24, r18
    5bae:	8d 83       	std	Y+5, r24	; 0x05
    5bb0:	86 81       	ldd	r24, Z+6	; 0x06
    5bb2:	20 ed       	ldi	r18, 0xD0	; 208
    5bb4:	28 0f       	add	r18, r24
    5bb6:	95 81       	ldd	r25, Z+5	; 0x05
    5bb8:	89 2f       	mov	r24, r25
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	c0 97       	sbiw	r24, 0x30	; 48
    5bbe:	82 95       	swap	r24
    5bc0:	92 95       	swap	r25
    5bc2:	90 7f       	andi	r25, 0xF0	; 240
    5bc4:	98 27       	eor	r25, r24
    5bc6:	80 7f       	andi	r24, 0xF0	; 240
    5bc8:	98 27       	eor	r25, r24
    5bca:	82 2b       	or	r24, r18
    5bcc:	8e 83       	std	Y+6, r24	; 0x06
    5bce:	83 81       	ldd	r24, Z+3	; 0x03
    5bd0:	20 ed       	ldi	r18, 0xD0	; 208
    5bd2:	28 0f       	add	r18, r24
    5bd4:	92 81       	ldd	r25, Z+2	; 0x02
    5bd6:	89 2f       	mov	r24, r25
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	c0 97       	sbiw	r24, 0x30	; 48
    5bdc:	82 95       	swap	r24
    5bde:	92 95       	swap	r25
    5be0:	90 7f       	andi	r25, 0xF0	; 240
    5be2:	98 27       	eor	r25, r24
    5be4:	80 7f       	andi	r24, 0xF0	; 240
    5be6:	98 27       	eor	r25, r24
    5be8:	82 2b       	or	r24, r18
    5bea:	8f 83       	std	Y+7, r24	; 0x07
    5bec:	8a e0       	ldi	r24, 0x0A	; 10
    5bee:	1f ef       	ldi	r17, 0xFF	; 255
    5bf0:	18 0f       	add	r17, r24
    5bf2:	88 23       	and	r24, r24
    5bf4:	81 f0       	breq	.+32     	; 0x5c16 <ds3231_set_date_time+0xf8>
    5bf6:	60 2f       	mov	r22, r16
    5bf8:	66 0f       	add	r22, r22
    5bfa:	66 0f       	add	r22, r22
    5bfc:	66 0f       	add	r22, r22
    5bfe:	60 1b       	sub	r22, r16
    5c00:	27 e0       	ldi	r18, 0x07	; 7
    5c02:	ae 01       	movw	r20, r28
    5c04:	4f 5f       	subi	r20, 0xFF	; 255
    5c06:	5f 4f       	sbci	r21, 0xFF	; 255
    5c08:	80 ed       	ldi	r24, 0xD0	; 208
    5c0a:	0e 94 fd 33 	call	0x67fa	; 0x67fa <I2C_0_SendData>
    5c0e:	88 23       	and	r24, r24
    5c10:	21 f0       	breq	.+8      	; 0x5c1a <ds3231_set_date_time+0xfc>
    5c12:	91 e0       	ldi	r25, 0x01	; 1
    5c14:	03 c0       	rjmp	.+6      	; 0x5c1c <ds3231_set_date_time+0xfe>
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	01 c0       	rjmp	.+2      	; 0x5c1c <ds3231_set_date_time+0xfe>
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	81 2f       	mov	r24, r17
    5c1e:	91 11       	cpse	r25, r1
    5c20:	e6 cf       	rjmp	.-52     	; 0x5bee <ds3231_set_date_time+0xd0>
    5c22:	27 96       	adiw	r28, 0x07	; 7
    5c24:	cd bf       	out	0x3d, r28	; 61
    5c26:	de bf       	out	0x3e, r29	; 62
    5c28:	df 91       	pop	r29
    5c2a:	cf 91       	pop	r28
    5c2c:	1f 91       	pop	r17
    5c2e:	0f 91       	pop	r16
    5c30:	08 95       	ret

00005c32 <ds3231_1s_sqw>:
    5c32:	1f 93       	push	r17
    5c34:	cf 93       	push	r28
    5c36:	df 93       	push	r29
    5c38:	1f 92       	push	r1
    5c3a:	cd b7       	in	r28, 0x3d	; 61
    5c3c:	de b7       	in	r29, 0x3e	; 62
    5c3e:	88 23       	and	r24, r24
    5c40:	11 f0       	breq	.+4      	; 0x5c46 <ds3231_1s_sqw+0x14>
    5c42:	80 e0       	ldi	r24, 0x00	; 0
    5c44:	01 c0       	rjmp	.+2      	; 0x5c48 <ds3231_1s_sqw+0x16>
    5c46:	84 e0       	ldi	r24, 0x04	; 4
    5c48:	89 83       	std	Y+1, r24	; 0x01
    5c4a:	8a e0       	ldi	r24, 0x0A	; 10
    5c4c:	1f ef       	ldi	r17, 0xFF	; 255
    5c4e:	18 0f       	add	r17, r24
    5c50:	88 23       	and	r24, r24
    5c52:	81 f0       	breq	.+32     	; 0x5c74 <ds3231_1s_sqw+0x42>
    5c54:	21 e0       	ldi	r18, 0x01	; 1
    5c56:	ae 01       	movw	r20, r28
    5c58:	4f 5f       	subi	r20, 0xFF	; 255
    5c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c5c:	6e e0       	ldi	r22, 0x0E	; 14
    5c5e:	80 ed       	ldi	r24, 0xD0	; 208
    5c60:	0e 94 fd 33 	call	0x67fa	; 0x67fa <I2C_0_SendData>
    5c64:	21 e0       	ldi	r18, 0x01	; 1
    5c66:	81 30       	cpi	r24, 0x01	; 1
    5c68:	09 f4       	brne	.+2      	; 0x5c6c <ds3231_1s_sqw+0x3a>
    5c6a:	20 e0       	ldi	r18, 0x00	; 0
    5c6c:	81 30       	cpi	r24, 0x01	; 1
    5c6e:	21 f0       	breq	.+8      	; 0x5c78 <ds3231_1s_sqw+0x46>
    5c70:	91 e0       	ldi	r25, 0x01	; 1
    5c72:	03 c0       	rjmp	.+6      	; 0x5c7a <ds3231_1s_sqw+0x48>
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	01 c0       	rjmp	.+2      	; 0x5c7a <ds3231_1s_sqw+0x48>
    5c78:	90 e0       	ldi	r25, 0x00	; 0
    5c7a:	81 2f       	mov	r24, r17
    5c7c:	91 11       	cpse	r25, r1
    5c7e:	e6 cf       	rjmp	.-52     	; 0x5c4c <ds3231_1s_sqw+0x1a>
    5c80:	82 2f       	mov	r24, r18
    5c82:	0f 90       	pop	r0
    5c84:	df 91       	pop	r29
    5c86:	cf 91       	pop	r28
    5c88:	1f 91       	pop	r17
    5c8a:	08 95       	ret

00005c8c <ds3231_set_aging>:
    5c8c:	1f 93       	push	r17
    5c8e:	cf 93       	push	r28
    5c90:	df 93       	push	r29
    5c92:	1f 92       	push	r1
    5c94:	cd b7       	in	r28, 0x3d	; 61
    5c96:	de b7       	in	r29, 0x3e	; 62
    5c98:	89 83       	std	Y+1, r24	; 0x01
    5c9a:	8a e0       	ldi	r24, 0x0A	; 10
    5c9c:	1f ef       	ldi	r17, 0xFF	; 255
    5c9e:	18 0f       	add	r17, r24
    5ca0:	88 23       	and	r24, r24
    5ca2:	81 f0       	breq	.+32     	; 0x5cc4 <ds3231_set_aging+0x38>
    5ca4:	21 e0       	ldi	r18, 0x01	; 1
    5ca6:	ae 01       	movw	r20, r28
    5ca8:	4f 5f       	subi	r20, 0xFF	; 255
    5caa:	5f 4f       	sbci	r21, 0xFF	; 255
    5cac:	60 e1       	ldi	r22, 0x10	; 16
    5cae:	80 ed       	ldi	r24, 0xD0	; 208
    5cb0:	0e 94 fd 33 	call	0x67fa	; 0x67fa <I2C_0_SendData>
    5cb4:	21 e0       	ldi	r18, 0x01	; 1
    5cb6:	81 30       	cpi	r24, 0x01	; 1
    5cb8:	09 f4       	brne	.+2      	; 0x5cbc <ds3231_set_aging+0x30>
    5cba:	20 e0       	ldi	r18, 0x00	; 0
    5cbc:	81 30       	cpi	r24, 0x01	; 1
    5cbe:	21 f0       	breq	.+8      	; 0x5cc8 <ds3231_set_aging+0x3c>
    5cc0:	91 e0       	ldi	r25, 0x01	; 1
    5cc2:	03 c0       	rjmp	.+6      	; 0x5cca <ds3231_set_aging+0x3e>
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	01 c0       	rjmp	.+2      	; 0x5cca <ds3231_set_aging+0x3e>
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	81 2f       	mov	r24, r17
    5ccc:	91 11       	cpse	r25, r1
    5cce:	e6 cf       	rjmp	.-52     	; 0x5c9c <ds3231_set_aging+0x10>
    5cd0:	82 2f       	mov	r24, r18
    5cd2:	0f 90       	pop	r0
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	1f 91       	pop	r17
    5cda:	08 95       	ret

00005cdc <ds3231_get_aging>:
    5cdc:	1f 93       	push	r17
    5cde:	cf 93       	push	r28
    5ce0:	df 93       	push	r29
    5ce2:	1f 92       	push	r1
    5ce4:	cd b7       	in	r28, 0x3d	; 61
    5ce6:	de b7       	in	r29, 0x3e	; 62
    5ce8:	8a e0       	ldi	r24, 0x0A	; 10
    5cea:	1f ef       	ldi	r17, 0xFF	; 255
    5cec:	18 0f       	add	r17, r24
    5cee:	88 23       	and	r24, r24
    5cf0:	61 f0       	breq	.+24     	; 0x5d0a <ds3231_get_aging+0x2e>
    5cf2:	21 e0       	ldi	r18, 0x01	; 1
    5cf4:	ae 01       	movw	r20, r28
    5cf6:	4f 5f       	subi	r20, 0xFF	; 255
    5cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    5cfa:	60 e1       	ldi	r22, 0x10	; 16
    5cfc:	80 ed       	ldi	r24, 0xD0	; 208
    5cfe:	0e 94 3a 34 	call	0x6874	; 0x6874 <I2C_0_GetData>
    5d02:	81 30       	cpi	r24, 0x01	; 1
    5d04:	21 f0       	breq	.+8      	; 0x5d0e <ds3231_get_aging+0x32>
    5d06:	91 e0       	ldi	r25, 0x01	; 1
    5d08:	03 c0       	rjmp	.+6      	; 0x5d10 <ds3231_get_aging+0x34>
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	01 c0       	rjmp	.+2      	; 0x5d10 <ds3231_get_aging+0x34>
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	81 2f       	mov	r24, r17
    5d12:	91 11       	cpse	r25, r1
    5d14:	ea cf       	rjmp	.-44     	; 0x5cea <ds3231_get_aging+0xe>
    5d16:	89 81       	ldd	r24, Y+1	; 0x01
    5d18:	0f 90       	pop	r0
    5d1a:	df 91       	pop	r29
    5d1c:	cf 91       	pop	r28
    5d1e:	1f 91       	pop	r17
    5d20:	08 95       	ret

00005d22 <ds3231_sync2nearestMinute>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
    5d22:	cf 92       	push	r12
    5d24:	df 92       	push	r13
    5d26:	ef 92       	push	r14
    5d28:	ff 92       	push	r15
    5d2a:	0f 93       	push	r16
    5d2c:	1f 93       	push	r17
    5d2e:	cf 93       	push	r28
    5d30:	df 93       	push	r29
    5d32:	cd b7       	in	r28, 0x3d	; 61
    5d34:	de b7       	in	r29, 0x3e	; 62
    5d36:	28 97       	sbiw	r28, 0x08	; 8
    5d38:	cd bf       	out	0x3d, r28	; 61
    5d3a:	de bf       	out	0x3e, r29	; 62
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
    5d3c:	fe 01       	movw	r30, r28
    5d3e:	31 96       	adiw	r30, 0x01	; 1
    5d40:	88 e0       	ldi	r24, 0x08	; 8
    5d42:	df 01       	movw	r26, r30
    5d44:	1d 92       	st	X+, r1
    5d46:	8a 95       	dec	r24
    5d48:	e9 f7       	brne	.-6      	; 0x5d44 <ds3231_sync2nearestMinute+0x22>
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
    5d4a:	f1 2c       	mov	r15, r1
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
    5d4c:	8a e0       	ldi	r24, 0x0A	; 10
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
		
	while(tries-- && (err = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 3) != 3)));
    5d4e:	1f ef       	ldi	r17, 0xFF	; 255
    5d50:	18 0f       	add	r17, r24
    5d52:	88 23       	and	r24, r24
    5d54:	89 f0       	breq	.+34     	; 0x5d78 <ds3231_sync2nearestMinute+0x56>
    5d56:	23 e0       	ldi	r18, 0x03	; 3
    5d58:	ae 01       	movw	r20, r28
    5d5a:	4f 5f       	subi	r20, 0xFF	; 255
    5d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d5e:	60 e0       	ldi	r22, 0x00	; 0
    5d60:	80 ed       	ldi	r24, 0xD0	; 208
    5d62:	0e 94 3a 34 	call	0x6874	; 0x6874 <I2C_0_GetData>
    5d66:	ff 24       	eor	r15, r15
    5d68:	f3 94       	inc	r15
    5d6a:	83 30       	cpi	r24, 0x03	; 3
    5d6c:	09 f4       	brne	.+2      	; 0x5d70 <ds3231_sync2nearestMinute+0x4e>
    5d6e:	f1 2c       	mov	r15, r1
    5d70:	83 30       	cpi	r24, 0x03	; 3
    5d72:	21 f0       	breq	.+8      	; 0x5d7c <ds3231_sync2nearestMinute+0x5a>
    5d74:	01 e0       	ldi	r16, 0x01	; 1
    5d76:	03 c0       	rjmp	.+6      	; 0x5d7e <ds3231_sync2nearestMinute+0x5c>
    5d78:	00 e0       	ldi	r16, 0x00	; 0
    5d7a:	01 c0       	rjmp	.+2      	; 0x5d7e <ds3231_sync2nearestMinute+0x5c>
    5d7c:	00 e0       	ldi	r16, 0x00	; 0
    5d7e:	81 2f       	mov	r24, r17
    5d80:	01 11       	cpse	r16, r1
    5d82:	e5 cf       	rjmp	.-54     	; 0x5d4e <ds3231_sync2nearestMinute+0x2c>

	if(!err)
    5d84:	f1 10       	cpse	r15, r1
    5d86:	82 c0       	rjmp	.+260    	; 0x5e8c <ds3231_sync2nearestMinute+0x16a>
		uint8_t hour10;
		uint8_t hour;
		bool am_pm;
		bool twelvehour;

		seconds = bcd2dec(data[0]);
    5d88:	89 81       	ldd	r24, Y+1	; 0x01
    5d8a:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_Z7bcd2dech>
    5d8e:	d8 2e       	mov	r13, r24
		minutes = bcd2dec(data[1]);
    5d90:	8a 81       	ldd	r24, Y+2	; 0x02
    5d92:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_Z7bcd2dech>
		am_pm = ((data[2] >> 5) & 0x01);
    5d96:	9b 81       	ldd	r25, Y+3	; 0x03
    5d98:	49 2f       	mov	r20, r25
    5d9a:	40 72       	andi	r20, 0x20	; 32
		hour10 = ((data[2] >> 4) & 0x01);
    5d9c:	29 2f       	mov	r18, r25
    5d9e:	30 e0       	ldi	r19, 0x00	; 0
    5da0:	35 95       	asr	r19
    5da2:	27 95       	ror	r18
    5da4:	35 95       	asr	r19
    5da6:	27 95       	ror	r18
    5da8:	35 95       	asr	r19
    5daa:	27 95       	ror	r18
    5dac:	35 95       	asr	r19
    5dae:	27 95       	ror	r18
    5db0:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
    5db2:	39 2f       	mov	r19, r25
    5db4:	3f 70       	andi	r19, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);

		if(!twelvehour && am_pm)
    5db6:	b9 2f       	mov	r27, r25
    5db8:	b0 74       	andi	r27, 0x40	; 64
    5dba:	cb 2e       	mov	r12, r27
    5dbc:	96 fd       	sbrc	r25, 6
    5dbe:	02 c0       	rjmp	.+4      	; 0x5dc4 <ds3231_sync2nearestMinute+0xa2>
    5dc0:	41 11       	cpse	r20, r1
		{
			hour10 = 2;
    5dc2:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
    5dc4:	22 0f       	add	r18, r18
    5dc6:	e2 2e       	mov	r14, r18
    5dc8:	ee 0c       	add	r14, r14
    5dca:	ee 0c       	add	r14, r14
    5dcc:	2e 0d       	add	r18, r14
    5dce:	e2 2e       	mov	r14, r18
    5dd0:	e3 0e       	add	r14, r19

		if(seconds > 30)
    5dd2:	5e e1       	ldi	r21, 0x1E	; 30
    5dd4:	5d 15       	cp	r21, r13
    5dd6:	60 f4       	brcc	.+24     	; 0x5df0 <ds3231_sync2nearestMinute+0xce>
		{
			minutes++;
    5dd8:	8f 5f       	subi	r24, 0xFF	; 255

			if(minutes > 59)
    5dda:	8c 33       	cpi	r24, 0x3C	; 60
    5ddc:	48 f0       	brcs	.+18     	; 0x5df0 <ds3231_sync2nearestMinute+0xce>
			{
				minutes = 0;
				hours++;
    5dde:	e3 94       	inc	r14

				if(hours > 23) /* Don't attempt to synchronize at midnight */
    5de0:	87 e1       	ldi	r24, 0x17	; 23
    5de2:	8e 15       	cp	r24, r14
    5de4:	10 f0       	brcs	.+4      	; 0x5dea <ds3231_sync2nearestMinute+0xc8>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    5de6:	80 e0       	ldi	r24, 0x00	; 0
    5de8:	03 c0       	rjmp	.+6      	; 0x5df0 <ds3231_sync2nearestMinute+0xce>
    5dea:	80 e0       	ldi	r24, 0x00	; 0
				hours++;

				if(hours > 23) /* Don't attempt to synchronize at midnight */
				{
					err = true;
    5dec:	ff 24       	eor	r15, r15
    5dee:	f3 94       	inc	r15
				}
			}
		}

		if(!err)
    5df0:	f1 10       	cpse	r15, r1
    5df2:	4c c0       	rjmp	.+152    	; 0x5e8c <ds3231_sync2nearestMinute+0x16a>
		{
			data[0] = 0; /* seconds = 00 */
    5df4:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
    5df6:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <_Z7dec2bcdh>
    5dfa:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;
    5dfc:	1b 82       	std	Y+3, r1	; 0x03

			if(twelvehour)
    5dfe:	cc 20       	and	r12, r12
    5e00:	71 f0       	breq	.+28     	; 0x5e1e <ds3231_sync2nearestMinute+0xfc>
			{
				data[2] |= 0x40; /* set  12-hour bit */
    5e02:	80 e4       	ldi	r24, 0x40	; 64
    5e04:	8b 83       	std	Y+3, r24	; 0x03

				if(hours >= 12)
    5e06:	9b e0       	ldi	r25, 0x0B	; 11
    5e08:	9e 15       	cp	r25, r14
    5e0a:	10 f4       	brcc	.+4      	; 0x5e10 <ds3231_sync2nearestMinute+0xee>
				{
					data[2] |= 0x20; /* set pm bit */
    5e0c:	80 e6       	ldi	r24, 0x60	; 96
    5e0e:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
    5e10:	a9 e0       	ldi	r26, 0x09	; 9
    5e12:	ae 15       	cp	r26, r14
    5e14:	78 f4       	brcc	.+30     	; 0x5e34 <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10;
    5e16:	8b 81       	ldd	r24, Y+3	; 0x03
    5e18:	80 61       	ori	r24, 0x10	; 16
    5e1a:	8b 83       	std	Y+3, r24	; 0x03
    5e1c:	0b c0       	rjmp	.+22     	; 0x5e34 <ds3231_sync2nearestMinute+0x112>
				}
			}
			else
			{
				if(hours >= 20)
    5e1e:	b3 e1       	ldi	r27, 0x13	; 19
    5e20:	be 15       	cp	r27, r14
    5e22:	18 f4       	brcc	.+6      	; 0x5e2a <ds3231_sync2nearestMinute+0x108>
				{
					data[2] |= 0x20; /* set 20 bit */
    5e24:	80 e2       	ldi	r24, 0x20	; 32
    5e26:	8b 83       	std	Y+3, r24	; 0x03
    5e28:	05 c0       	rjmp	.+10     	; 0x5e34 <ds3231_sync2nearestMinute+0x112>
				}
				else if(hours >= 10)
    5e2a:	59 e0       	ldi	r21, 0x09	; 9
    5e2c:	5e 15       	cp	r21, r14
    5e2e:	10 f4       	brcc	.+4      	; 0x5e34 <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10; /* set 10 bit */
    5e30:	80 e1       	ldi	r24, 0x10	; 16
    5e32:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
    5e34:	8d ec       	ldi	r24, 0xCD	; 205
    5e36:	e8 9e       	mul	r14, r24
    5e38:	81 2d       	mov	r24, r1
    5e3a:	11 24       	eor	r1, r1
    5e3c:	86 95       	lsr	r24
    5e3e:	86 95       	lsr	r24
    5e40:	86 95       	lsr	r24
    5e42:	88 0f       	add	r24, r24
    5e44:	98 2f       	mov	r25, r24
    5e46:	99 0f       	add	r25, r25
    5e48:	99 0f       	add	r25, r25
    5e4a:	89 0f       	add	r24, r25
    5e4c:	e8 1a       	sub	r14, r24
    5e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    5e50:	e2 2a       	or	r14, r18
    5e52:	eb 82       	std	Y+3, r14	; 0x03
			
			while(tries-- && (err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4)));
    5e54:	ee 24       	eor	r14, r14
    5e56:	ea 94       	dec	r14
    5e58:	e1 0e       	add	r14, r17
    5e5a:	11 23       	and	r17, r17
    5e5c:	89 f0       	breq	.+34     	; 0x5e80 <ds3231_sync2nearestMinute+0x15e>
    5e5e:	24 e0       	ldi	r18, 0x04	; 4
    5e60:	ae 01       	movw	r20, r28
    5e62:	4f 5f       	subi	r20, 0xFF	; 255
    5e64:	5f 4f       	sbci	r21, 0xFF	; 255
    5e66:	60 e0       	ldi	r22, 0x00	; 0
    5e68:	80 ed       	ldi	r24, 0xD0	; 208
    5e6a:	0e 94 fd 33 	call	0x67fa	; 0x67fa <I2C_0_SendData>
    5e6e:	ff 24       	eor	r15, r15
    5e70:	f3 94       	inc	r15
    5e72:	84 30       	cpi	r24, 0x04	; 4
    5e74:	09 f4       	brne	.+2      	; 0x5e78 <ds3231_sync2nearestMinute+0x156>
    5e76:	f1 2c       	mov	r15, r1
    5e78:	84 30       	cpi	r24, 0x04	; 4
    5e7a:	21 f0       	breq	.+8      	; 0x5e84 <ds3231_sync2nearestMinute+0x162>
    5e7c:	81 e0       	ldi	r24, 0x01	; 1
    5e7e:	03 c0       	rjmp	.+6      	; 0x5e86 <ds3231_sync2nearestMinute+0x164>
    5e80:	80 2f       	mov	r24, r16
    5e82:	01 c0       	rjmp	.+2      	; 0x5e86 <ds3231_sync2nearestMinute+0x164>
    5e84:	80 2f       	mov	r24, r16
    5e86:	1e 2d       	mov	r17, r14
    5e88:	81 11       	cpse	r24, r1
    5e8a:	e4 cf       	rjmp	.-56     	; 0x5e54 <ds3231_sync2nearestMinute+0x132>
		}
	}

	return err;
}
    5e8c:	8f 2d       	mov	r24, r15
    5e8e:	28 96       	adiw	r28, 0x08	; 8
    5e90:	cd bf       	out	0x3d, r28	; 61
    5e92:	de bf       	out	0x3e, r29	; 62
    5e94:	df 91       	pop	r29
    5e96:	cf 91       	pop	r28
    5e98:	1f 91       	pop	r17
    5e9a:	0f 91       	pop	r16
    5e9c:	ff 90       	pop	r15
    5e9e:	ef 90       	pop	r14
    5ea0:	df 90       	pop	r13
    5ea2:	cf 90       	pop	r12
    5ea4:	08 95       	ret

00005ea6 <convertEpochToTimeString>:
/**
 *   Converts an epoch (seconds since 1900)  into a string with format "yymmddhhmmss"
 */
#define THIRTY_YEARS 946684800
char* convertEpochToTimeString(time_t epoch, char* buf, size_t size)
 {
    5ea6:	ef 92       	push	r14
    5ea8:	ff 92       	push	r15
    5eaa:	0f 93       	push	r16
    5eac:	1f 93       	push	r17
    5eae:	cf 93       	push	r28
    5eb0:	df 93       	push	r29
    5eb2:	cd b7       	in	r28, 0x3d	; 61
    5eb4:	de b7       	in	r29, 0x3e	; 62
    5eb6:	60 97       	sbiw	r28, 0x10	; 16
    5eb8:	cd bf       	out	0x3d, r28	; 61
    5eba:	de bf       	out	0x3e, r29	; 62
    5ebc:	8a 01       	movw	r16, r20
    5ebe:	79 01       	movw	r14, r18
    struct tm  ts;
	time_t t = epoch - THIRTY_YEARS;
    5ec0:	dc 01       	movw	r26, r24
    5ec2:	cb 01       	movw	r24, r22
    5ec4:	80 58       	subi	r24, 0x80	; 128
    5ec6:	93 44       	sbci	r25, 0x43	; 67
    5ec8:	ad 46       	sbci	r26, 0x6D	; 109
    5eca:	b8 43       	sbci	r27, 0x38	; 56
    5ecc:	8d 87       	std	Y+13, r24	; 0x0d
    5ece:	9e 87       	std	Y+14, r25	; 0x0e
    5ed0:	af 87       	std	Y+15, r26	; 0x0f
    5ed2:	b8 8b       	std	Y+16, r27	; 0x10

    // Format time, "ddd yyyy-mm-dd hh:mm:ss zzz"
    ts = *localtime(&t);
    5ed4:	ce 01       	movw	r24, r28
    5ed6:	0d 96       	adiw	r24, 0x0d	; 13
    5ed8:	0e 94 c0 01 	call	0x380	; 0x380 <localtime>
    5edc:	fc 01       	movw	r30, r24
    5ede:	9c e0       	ldi	r25, 0x0C	; 12
    5ee0:	de 01       	movw	r26, r28
    5ee2:	11 96       	adiw	r26, 0x01	; 1
    5ee4:	01 90       	ld	r0, Z+
    5ee6:	0d 92       	st	X+, r0
    5ee8:	9a 95       	dec	r25
    5eea:	e1 f7       	brne	.-8      	; 0x5ee4 <convertEpochToTimeString+0x3e>
    strftime(buf, size, "%a %Y-%m-%d %H:%M:%S", &ts);
    5eec:	9e 01       	movw	r18, r28
    5eee:	2f 5f       	subi	r18, 0xFF	; 255
    5ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ef2:	4c e8       	ldi	r20, 0x8C	; 140
    5ef4:	54 e4       	ldi	r21, 0x44	; 68
    5ef6:	b7 01       	movw	r22, r14
    5ef8:	c8 01       	movw	r24, r16
    5efa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <strftime>
   return buf;
 }
    5efe:	c8 01       	movw	r24, r16
    5f00:	60 96       	adiw	r28, 0x10	; 16
    5f02:	cd bf       	out	0x3d, r28	; 61
    5f04:	de bf       	out	0x3e, r29	; 62
    5f06:	df 91       	pop	r29
    5f08:	cf 91       	pop	r28
    5f0a:	1f 91       	pop	r17
    5f0c:	0f 91       	pop	r16
    5f0e:	ff 90       	pop	r15
    5f10:	ef 90       	pop	r14
    5f12:	08 95       	ret

00005f14 <_ZN13EepromManagerC1Ev>:
extern uint16_t g_80m_power_level_mW;

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
    5f14:	08 95       	ret

00005f16 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
    5f16:	08 95       	ret

00005f18 <_Z21avr_eeprom_write_bytejh>:
#include <avr/io.h>

typedef uint16_t eeprom_addr_t;

// to write
void avr_eeprom_write_byte(eeprom_addr_t index, uint8_t in) {
    5f18:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    5f1a:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    5f1e:	91 fd       	sbrc	r25, 1
    5f20:	fc cf       	rjmp	.-8      	; 0x5f1a <_Z21avr_eeprom_write_bytejh+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    5f22:	8d e9       	ldi	r24, 0x9D	; 157
    5f24:	93 e1       	ldi	r25, 0x13	; 19
    5f26:	84 bf       	out	0x34, r24	; 52
    5f28:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    5f2c:	f9 01       	movw	r30, r18
    5f2e:	fc 5e       	subi	r31, 0xEC	; 236
    5f30:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    5f32:	90 e0       	ldi	r25, 0x00	; 0
    5f34:	84 bf       	out	0x34, r24	; 52
    5f36:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    5f3a:	08 95       	ret

00005f3c <_Z21avr_eeprom_write_wordjj>:
}

void avr_eeprom_write_word(eeprom_addr_t index, uint16_t in) {
    5f3c:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    5f3e:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    5f42:	91 fd       	sbrc	r25, 1
    5f44:	fc cf       	rjmp	.-8      	; 0x5f3e <_Z21avr_eeprom_write_wordjj+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    5f46:	8d e9       	ldi	r24, 0x9D	; 157
    5f48:	93 e1       	ldi	r25, 0x13	; 19
    5f4a:	84 bf       	out	0x34, r24	; 52
    5f4c:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint16_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    5f50:	f9 01       	movw	r30, r18
    5f52:	fc 5e       	subi	r31, 0xEC	; 236
    5f54:	60 83       	st	Z, r22
    5f56:	71 83       	std	Z+1, r23	; 0x01
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    5f58:	90 e0       	ldi	r25, 0x00	; 0
    5f5a:	84 bf       	out	0x34, r24	; 52
    5f5c:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    5f60:	08 95       	ret

00005f62 <_Z22avr_eeprom_write_dwordjm>:
}

void avr_eeprom_write_dword(eeprom_addr_t index, uint32_t in) {
    5f62:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    5f64:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    5f68:	91 fd       	sbrc	r25, 1
    5f6a:	fc cf       	rjmp	.-8      	; 0x5f64 <_Z22avr_eeprom_write_dwordjm+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    5f6c:	8d e9       	ldi	r24, 0x9D	; 157
    5f6e:	93 e1       	ldi	r25, 0x13	; 19
    5f70:	84 bf       	out	0x34, r24	; 52
    5f72:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint32_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    5f76:	f9 01       	movw	r30, r18
    5f78:	fc 5e       	subi	r31, 0xEC	; 236
    5f7a:	40 83       	st	Z, r20
    5f7c:	51 83       	std	Z+1, r21	; 0x01
    5f7e:	62 83       	std	Z+2, r22	; 0x02
    5f80:	73 83       	std	Z+3, r23	; 0x03
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	84 bf       	out	0x34, r24	; 52
    5f86:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    5f8a:	08 95       	ret

00005f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
}

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
    5f8c:	0f 93       	push	r16
    5f8e:	1f 93       	push	r17
    5f90:	cf 93       	push	r28
    5f92:	df 93       	push	r29
	if(!val)
    5f94:	41 15       	cp	r20, r1
    5f96:	51 05       	cpc	r21, r1
    5f98:	09 f4       	brne	.+2      	; 0x5f9c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
    5f9a:	7c c0       	rjmp	.+248    	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
	{
		return;
	}

	switch(v)
    5f9c:	86 2f       	mov	r24, r22
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	84 33       	cpi	r24, 0x34	; 52
    5fa2:	91 05       	cpc	r25, r1
    5fa4:	08 f0       	brcs	.+2      	; 0x5fa8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x1c>
    5fa6:	76 c0       	rjmp	.+236    	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
    5fa8:	ea 01       	movw	r28, r20
    5faa:	fc 01       	movw	r30, r24
    5fac:	eb 57       	subi	r30, 0x7B	; 123
    5fae:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb0:	0c 94 e8 48 	jmp	0x91d0	; 0x91d0 <__tablejump2__>
	{
		case Frequency:
		{
			avr_eeprom_write_dword(Frequency, *(uint32_t*)val);
    5fb4:	48 81       	ld	r20, Y
    5fb6:	59 81       	ldd	r21, Y+1	; 0x01
    5fb8:	6a 81       	ldd	r22, Y+2	; 0x02
    5fba:	7b 81       	ldd	r23, Y+3	; 0x03
    5fbc:	8b e2       	ldi	r24, 0x2B	; 43
    5fbe:	90 e0       	ldi	r25, 0x00	; 0
    5fc0:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    5fc4:	67 c0       	rjmp	.+206    	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RTTY_offset:
		{
			avr_eeprom_write_dword(RTTY_offset, *(uint32_t*)val);
    5fc6:	48 81       	ld	r20, Y
    5fc8:	59 81       	ldd	r21, Y+1	; 0x01
    5fca:	6a 81       	ldd	r22, Y+2	; 0x02
    5fcc:	7b 81       	ldd	r23, Y+3	; 0x03
    5fce:	8f e2       	ldi	r24, 0x2F	; 47
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    5fd6:	5e c0       	rjmp	.+188    	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RF_Power:
		{
			avr_eeprom_write_word(RF_Power, *(uint32_t*)val);			
    5fd8:	68 81       	ld	r22, Y
    5fda:	79 81       	ldd	r23, Y+1	; 0x01
    5fdc:	83 e3       	ldi	r24, 0x33	; 51
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <_Z21avr_eeprom_write_wordjj>
		}
		break;
    5fe4:	57 c0       	rjmp	.+174    	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
    5fe6:	8a 01       	movw	r16, r20
    5fe8:	0f 5f       	subi	r16, 0xFF	; 255
    5fea:	1f 4f       	sbci	r17, 0xFF	; 255
    5fec:	68 81       	ld	r22, Y
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;
    5fee:	8a e0       	ldi	r24, 0x0A	; 10
    5ff0:	90 e0       	ldi	r25, 0x00	; 0

			while(c)
    5ff2:	66 23       	and	r22, r22
    5ff4:	51 f0       	breq	.+20     	; 0x600a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x7e>
			{
				avr_eeprom_write_byte(j++, c);
    5ff6:	ec 01       	movw	r28, r24
    5ff8:	21 96       	adiw	r28, 0x01	; 1
    5ffa:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>
				c = *char_addr++;
    5ffe:	f8 01       	movw	r30, r16
    6000:	60 81       	ld	r22, Z
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
			{
				avr_eeprom_write_byte(j++, c);
    6002:	ce 01       	movw	r24, r28
				c = *char_addr++;
    6004:	0f 5f       	subi	r16, 0xFF	; 255
    6006:	1f 4f       	sbci	r17, 0xFF	; 255
			char* char_addr = (char*)val;
			char c = *char_addr++;
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
    6008:	f4 cf       	rjmp	.-24     	; 0x5ff2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x66>
			{
				avr_eeprom_write_byte(j++, c);
				c = *char_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    600a:	60 e0       	ldi	r22, 0x00	; 0
    600c:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6010:	41 c0       	rjmp	.+130    	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
    6012:	8a 01       	movw	r16, r20
    6014:	0f 5f       	subi	r16, 0xFF	; 255
    6016:	1f 4f       	sbci	r17, 0xFF	; 255
    6018:	68 81       	ld	r22, Y
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
    601a:	8f e1       	ldi	r24, 0x1F	; 31
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    601c:	66 23       	and	r22, r22
    601e:	59 f0       	breq	.+22     	; 0x6036 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				avr_eeprom_write_byte(j++, c);
    6020:	c1 e0       	ldi	r28, 0x01	; 1
    6022:	c8 0f       	add	r28, r24
    6024:	90 e0       	ldi	r25, 0x00	; 0
    6026:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>
				c = *uint8_addr++;
    602a:	f8 01       	movw	r30, r16
    602c:	60 81       	ld	r22, Z
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
			{
				avr_eeprom_write_byte(j++, c);
    602e:	8c 2f       	mov	r24, r28
				c = *uint8_addr++;
    6030:	0f 5f       	subi	r16, 0xFF	; 255
    6032:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    6034:	f3 cf       	rjmp	.-26     	; 0x601c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x90>
			{
				avr_eeprom_write_byte(j++, c);
				c = *uint8_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    6036:	60 e0       	ldi	r22, 0x00	; 0
    6038:	90 e0       	ldi	r25, 0x00	; 0
    603a:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    603e:	2a c0       	rjmp	.+84     	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Id_codespeed:
		{
			avr_eeprom_write_byte(Id_codespeed, *(uint8_t*)val);
    6040:	68 81       	ld	r22, Y
    6042:	88 e2       	ldi	r24, 0x28	; 40
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    604a:	24 c0       	rjmp	.+72     	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Fox_setting:
		{
			avr_eeprom_write_byte(Fox_setting, *(uint8_t*)val);
    604c:	68 81       	ld	r22, Y
    604e:	89 e2       	ldi	r24, 0x29	; 41
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6056:	1e c0       	rjmp	.+60     	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_start_epoch:
		{
			avr_eeprom_write_dword(Event_start_epoch, *(uint32_t*)val);
    6058:	48 81       	ld	r20, Y
    605a:	59 81       	ldd	r21, Y+1	; 0x01
    605c:	6a 81       	ldd	r22, Y+2	; 0x02
    605e:	7b 81       	ldd	r23, Y+3	; 0x03
    6060:	82 e0       	ldi	r24, 0x02	; 2
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6068:	15 c0       	rjmp	.+42     	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_finish_epoch:
		{
			avr_eeprom_write_dword(Event_finish_epoch, *(uint32_t*)val);
    606a:	48 81       	ld	r20, Y
    606c:	59 81       	ldd	r21, Y+1	; 0x01
    606e:	6a 81       	ldd	r22, Y+2	; 0x02
    6070:	7b 81       	ldd	r23, Y+3	; 0x03
    6072:	86 e0       	ldi	r24, 0x06	; 6
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    607a:	0c c0       	rjmp	.+24     	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Utc_offset:
		{
			avr_eeprom_write_byte(Utc_offset, *(uint8_t*)val);
    607c:	68 81       	ld	r22, Y
    607e:	8a e2       	ldi	r24, 0x2A	; 42
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6086:	06 c0       	rjmp	.+12     	; 0x6094 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Eeprom_initialization_flag:
		{
			avr_eeprom_write_word(Eeprom_initialization_flag, *(uint16_t*)val);
    6088:	68 81       	ld	r22, Y
    608a:	79 81       	ldd	r23, Y+1	; 0x01
    608c:	80 e0       	ldi	r24, 0x00	; 0
    608e:	90 e0       	ldi	r25, 0x00	; 0
    6090:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <_Z21avr_eeprom_write_wordjj>
		{

		}
		break;
	}
}
    6094:	df 91       	pop	r29
    6096:	cf 91       	pop	r28
    6098:	1f 91       	pop	r17
    609a:	0f 91       	pop	r16
    609c:	08 95       	ret

0000609e <_ZN13EepromManager13saveAllEEPROMEv>:

/** 
 * Store any changed EEPROM variables
 */
void EepromManager::saveAllEEPROM(void)
{
    609e:	ef 92       	push	r14
    60a0:	ff 92       	push	r15
    60a2:	0f 93       	push	r16
    60a4:	1f 93       	push	r17
    60a6:	cf 93       	push	r28
    60a8:	df 93       	push	r29
    60aa:	7c 01       	movw	r14, r24
	uint16_t i;
	
	if(g_id_codespeed != eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)))
    60ac:	88 e2       	ldi	r24, 0x28	; 40
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    60b4:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <g_id_codespeed>
    60b8:	89 17       	cp	r24, r25
    60ba:	31 f0       	breq	.+12     	; 0x60c8 <_ZN13EepromManager13saveAllEEPROMEv+0x2a>
	{
		updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    60bc:	4b e0       	ldi	r20, 0x0B	; 11
    60be:	50 e4       	ldi	r21, 0x40	; 64
    60c0:	68 e2       	ldi	r22, 0x28	; 40
    60c2:	c7 01       	movw	r24, r14
    60c4:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_fox != eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)))
    60c8:	89 e2       	ldi	r24, 0x29	; 41
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    60d0:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <g_fox>
    60d4:	89 17       	cp	r24, r25
    60d6:	31 f0       	breq	.+12     	; 0x60e4 <_ZN13EepromManager13saveAllEEPROMEv+0x46>
	{
		updateEEPROMVar(Fox_setting, (void*)&g_fox);
    60d8:	4b e1       	ldi	r20, 0x1B	; 27
    60da:	50 e4       	ldi	r21, 0x40	; 64
    60dc:	69 e2       	ldi	r22, 0x29	; 41
    60de:	c7 01       	movw	r24, r14
    60e0:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_start_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch)))
    60e4:	82 e0       	ldi	r24, 0x02	; 2
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <eeprom_read_dword>
    60ec:	00 91 11 46 	lds	r16, 0x4611	; 0x804611 <g_event_start_epoch>
    60f0:	10 91 12 46 	lds	r17, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    60f4:	20 91 13 46 	lds	r18, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    60f8:	30 91 14 46 	lds	r19, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    60fc:	60 17       	cp	r22, r16
    60fe:	71 07       	cpc	r23, r17
    6100:	82 07       	cpc	r24, r18
    6102:	93 07       	cpc	r25, r19
    6104:	31 f0       	breq	.+12     	; 0x6112 <_ZN13EepromManager13saveAllEEPROMEv+0x74>
	{
		updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    6106:	41 e1       	ldi	r20, 0x11	; 17
    6108:	56 e4       	ldi	r21, 0x46	; 70
    610a:	62 e0       	ldi	r22, 0x02	; 2
    610c:	c7 01       	movw	r24, r14
    610e:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_finish_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch)))
    6112:	86 e0       	ldi	r24, 0x06	; 6
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <eeprom_read_dword>
    611a:	00 91 15 46 	lds	r16, 0x4615	; 0x804615 <g_event_finish_epoch>
    611e:	10 91 16 46 	lds	r17, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    6122:	20 91 17 46 	lds	r18, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    6126:	30 91 18 46 	lds	r19, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    612a:	60 17       	cp	r22, r16
    612c:	71 07       	cpc	r23, r17
    612e:	82 07       	cpc	r24, r18
    6130:	93 07       	cpc	r25, r19
    6132:	31 f0       	breq	.+12     	; 0x6140 <_ZN13EepromManager13saveAllEEPROMEv+0xa2>
	{
		updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    6134:	45 e1       	ldi	r20, 0x15	; 21
    6136:	56 e4       	ldi	r21, 0x46	; 70
    6138:	66 e0       	ldi	r22, 0x06	; 6
    613a:	c7 01       	movw	r24, r14
    613c:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
    6140:	c0 91 19 46 	lds	r28, 0x4619	; 0x804619 <g_utc_offset>
    6144:	0c 2e       	mov	r0, r28
    6146:	00 0c       	add	r0, r0
    6148:	dd 0b       	sbc	r29, r29
    614a:	8a e2       	ldi	r24, 0x2A	; 42
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	c8 17       	cp	r28, r24
    6156:	d9 07       	cpc	r29, r25
    6158:	31 f0       	breq	.+12     	; 0x6166 <_ZN13EepromManager13saveAllEEPROMEv+0xc8>
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    615a:	49 e1       	ldi	r20, 0x19	; 25
    615c:	56 e4       	ldi	r21, 0x46	; 70
    615e:	6a e2       	ldi	r22, 0x2A	; 42
    6160:	c7 01       	movw	r24, r14
    6162:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    6166:	c0 e0       	ldi	r28, 0x00	; 0
    6168:	d0 e0       	ldi	r29, 0x00	; 0
    616a:	c4 31       	cpi	r28, 0x14	; 20
    616c:	d1 05       	cpc	r29, r1
    616e:	a0 f4       	brcc	.+40     	; 0x6198 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	{
		if(g_messages_text[STATION_ID][i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i]))))
    6170:	fe 01       	movw	r30, r28
    6172:	ea 53       	subi	r30, 0x3A	; 58
    6174:	fa 4b       	sbci	r31, 0xBA	; 186
    6176:	15 89       	ldd	r17, Z+21	; 0x15
    6178:	ce 01       	movw	r24, r28
    617a:	86 5f       	subi	r24, 0xF6	; 246
    617c:	9f 4f       	sbci	r25, 0xFF	; 255
    617e:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    6182:	18 17       	cp	r17, r24
    6184:	39 f0       	breq	.+14     	; 0x6194 <_ZN13EepromManager13saveAllEEPROMEv+0xf6>
		{
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    6186:	4b ed       	ldi	r20, 0xDB	; 219
    6188:	55 e4       	ldi	r21, 0x45	; 69
    618a:	6a e0       	ldi	r22, 0x0A	; 10
    618c:	c7 01       	movw	r24, r14
    618e:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    6192:	02 c0       	rjmp	.+4      	; 0x6198 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    6194:	21 96       	adiw	r28, 0x01	; 1
    6196:	e9 cf       	rjmp	.-46     	; 0x616a <_ZN13EepromManager13saveAllEEPROMEv+0xcc>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6198:	c0 e0       	ldi	r28, 0x00	; 0
    619a:	d0 e0       	ldi	r29, 0x00	; 0
    619c:	c8 30       	cpi	r28, 0x08	; 8
    619e:	d1 05       	cpc	r29, r1
    61a0:	a0 f4       	brcc	.+40     	; 0x61ca <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
	{
		if(g_unlockCode[i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i]))))
    61a2:	fe 01       	movw	r30, r28
    61a4:	e6 5e       	subi	r30, 0xE6	; 230
    61a6:	f9 4b       	sbci	r31, 0xB9	; 185
    61a8:	10 81       	ld	r17, Z
    61aa:	ce 01       	movw	r24, r28
    61ac:	81 5e       	subi	r24, 0xE1	; 225
    61ae:	9f 4f       	sbci	r25, 0xFF	; 255
    61b0:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    61b4:	18 17       	cp	r17, r24
    61b6:	39 f0       	breq	.+14     	; 0x61c6 <_ZN13EepromManager13saveAllEEPROMEv+0x128>
		{
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    61b8:	4a e1       	ldi	r20, 0x1A	; 26
    61ba:	56 e4       	ldi	r21, 0x46	; 70
    61bc:	6f e1       	ldi	r22, 0x1F	; 31
    61be:	c7 01       	movw	r24, r14
    61c0:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    61c4:	02 c0       	rjmp	.+4      	; 0x61ca <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    61c6:	21 96       	adiw	r28, 0x01	; 1
    61c8:	e9 cf       	rjmp	.-46     	; 0x619c <_ZN13EepromManager13saveAllEEPROMEv+0xfe>
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
			break;
		}
	}
	
	if(g_80m_frequency != eeprom_read_dword(&(EepromManager::ee_vars.frequency)))
    61ca:	8b e2       	ldi	r24, 0x2B	; 43
    61cc:	90 e0       	ldi	r25, 0x00	; 0
    61ce:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <eeprom_read_dword>
    61d2:	00 91 2c 40 	lds	r16, 0x402C	; 0x80402c <g_80m_frequency>
    61d6:	10 91 2d 40 	lds	r17, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    61da:	20 91 2e 40 	lds	r18, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    61de:	30 91 2f 40 	lds	r19, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    61e2:	60 17       	cp	r22, r16
    61e4:	71 07       	cpc	r23, r17
    61e6:	82 07       	cpc	r24, r18
    61e8:	93 07       	cpc	r25, r19
    61ea:	31 f0       	breq	.+12     	; 0x61f8 <_ZN13EepromManager13saveAllEEPROMEv+0x15a>
	{
		updateEEPROMVar(Frequency, (void*)&g_80m_frequency);
    61ec:	4c e2       	ldi	r20, 0x2C	; 44
    61ee:	50 e4       	ldi	r21, 0x40	; 64
    61f0:	6b e2       	ldi	r22, 0x2B	; 43
    61f2:	c7 01       	movw	r24, r14
    61f4:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_rtty_offset != eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset)))
    61f8:	8f e2       	ldi	r24, 0x2F	; 47
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <eeprom_read_dword>
    6200:	00 91 32 40 	lds	r16, 0x4032	; 0x804032 <g_rtty_offset>
    6204:	10 91 33 40 	lds	r17, 0x4033	; 0x804033 <g_rtty_offset+0x1>
    6208:	20 91 34 40 	lds	r18, 0x4034	; 0x804034 <g_rtty_offset+0x2>
    620c:	30 91 35 40 	lds	r19, 0x4035	; 0x804035 <g_rtty_offset+0x3>
    6210:	60 17       	cp	r22, r16
    6212:	71 07       	cpc	r23, r17
    6214:	82 07       	cpc	r24, r18
    6216:	93 07       	cpc	r25, r19
    6218:	31 f0       	breq	.+12     	; 0x6226 <_ZN13EepromManager13saveAllEEPROMEv+0x188>
	{
		updateEEPROMVar(RTTY_offset, (void*)&g_rtty_offset);
    621a:	42 e3       	ldi	r20, 0x32	; 50
    621c:	50 e4       	ldi	r21, 0x40	; 64
    621e:	6f e2       	ldi	r22, 0x2F	; 47
    6220:	c7 01       	movw	r24, r14
    6222:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
    6226:	83 e3       	ldi	r24, 0x33	; 51
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <eeprom_read_word>
    622e:	20 91 30 40 	lds	r18, 0x4030	; 0x804030 <g_80m_power_level_mW>
    6232:	30 91 31 40 	lds	r19, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    6236:	82 17       	cp	r24, r18
    6238:	93 07       	cpc	r25, r19
    623a:	31 f0       	breq	.+12     	; 0x6248 <_ZN13EepromManager13saveAllEEPROMEv+0x1aa>
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
    623c:	40 e3       	ldi	r20, 0x30	; 48
    623e:	50 e4       	ldi	r21, 0x40	; 64
    6240:	63 e3       	ldi	r22, 0x33	; 51
    6242:	c7 01       	movw	r24, r14
    6244:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
}
    6248:	df 91       	pop	r29
    624a:	cf 91       	pop	r28
    624c:	1f 91       	pop	r17
    624e:	0f 91       	pop	r16
    6250:	ff 90       	pop	r15
    6252:	ef 90       	pop	r14
    6254:	08 95       	ret

00006256 <_ZN13EepromManager11readNonVolsEv>:


bool EepromManager::readNonVols(void)
{
    6256:	cf 93       	push	r28
    6258:	df 93       	push	r29
	bool failure = true;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    625a:	80 e0       	ldi	r24, 0x00	; 0
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    6262:	8e 3c       	cpi	r24, 0xCE	; 206
    6264:	91 05       	cpc	r25, r1
    6266:	09 f0       	breq	.+2      	; 0x626a <_ZN13EepromManager11readNonVolsEv+0x14>
    6268:	dc c0       	rjmp	.+440    	; 0x6422 <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    626a:	88 e2       	ldi	r24, 0x28	; 40
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    6272:	85 31       	cpi	r24, 0x15	; 21
    6274:	20 f4       	brcc	.+8      	; 0x627e <_ZN13EepromManager11readNonVolsEv+0x28>
    6276:	85 30       	cpi	r24, 0x05	; 5
    6278:	18 f4       	brcc	.+6      	; 0x6280 <_ZN13EepromManager11readNonVolsEv+0x2a>
    627a:	85 e0       	ldi	r24, 0x05	; 5
    627c:	01 c0       	rjmp	.+2      	; 0x6280 <_ZN13EepromManager11readNonVolsEv+0x2a>
    627e:	84 e1       	ldi	r24, 0x14	; 20
    6280:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    6284:	89 e2       	ldi	r24, 0x29	; 41
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    628c:	82 31       	cpi	r24, 0x12	; 18
    628e:	08 f0       	brcs	.+2      	; 0x6292 <_ZN13EepromManager11readNonVolsEv+0x3c>
    6290:	81 e1       	ldi	r24, 0x11	; 17
    6292:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    6296:	82 e0       	ldi	r24, 0x02	; 2
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <eeprom_read_dword>
    629e:	60 93 11 46 	sts	0x4611, r22	; 0x804611 <g_event_start_epoch>
    62a2:	70 93 12 46 	sts	0x4612, r23	; 0x804612 <g_event_start_epoch+0x1>
    62a6:	80 93 13 46 	sts	0x4613, r24	; 0x804613 <g_event_start_epoch+0x2>
    62aa:	90 93 14 46 	sts	0x4614, r25	; 0x804614 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    62ae:	86 e0       	ldi	r24, 0x06	; 6
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <eeprom_read_dword>
    62b6:	60 93 15 46 	sts	0x4615, r22	; 0x804615 <g_event_finish_epoch>
    62ba:	70 93 16 46 	sts	0x4616, r23	; 0x804616 <g_event_finish_epoch+0x1>
    62be:	80 93 17 46 	sts	0x4617, r24	; 0x804617 <g_event_finish_epoch+0x2>
    62c2:	90 93 18 46 	sts	0x4618, r25	; 0x804618 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    62c6:	8a e2       	ldi	r24, 0x2A	; 42
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    62ce:	80 93 19 46 	sts	0x4619, r24	; 0x804619 <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    62d2:	c0 e0       	ldi	r28, 0x00	; 0
    62d4:	d0 e0       	ldi	r29, 0x00	; 0
    62d6:	c4 31       	cpi	r28, 0x14	; 20
    62d8:	d1 05       	cpc	r29, r1
    62da:	58 f4       	brcc	.+22     	; 0x62f2 <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    62dc:	ce 01       	movw	r24, r28
    62de:	86 5f       	subi	r24, 0xF6	; 246
    62e0:	9f 4f       	sbci	r25, 0xFF	; 255
    62e2:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    62e6:	fe 01       	movw	r30, r28
    62e8:	ea 53       	subi	r30, 0x3A	; 58
    62ea:	fa 4b       	sbci	r31, 0xBA	; 186
    62ec:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    62ee:	81 11       	cpse	r24, r1
    62f0:	03 c0       	rjmp	.+6      	; 0x62f8 <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    62f2:	c0 e0       	ldi	r28, 0x00	; 0
    62f4:	d0 e0       	ldi	r29, 0x00	; 0
    62f6:	02 c0       	rjmp	.+4      	; 0x62fc <_ZN13EepromManager11readNonVolsEv+0xa6>
    62f8:	21 96       	adiw	r28, 0x01	; 1
    62fa:	ed cf       	rjmp	.-38     	; 0x62d6 <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    62fc:	c8 30       	cpi	r28, 0x08	; 8
    62fe:	d1 05       	cpc	r29, r1
    6300:	68 f4       	brcc	.+26     	; 0x631c <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    6302:	ce 01       	movw	r24, r28
    6304:	81 5e       	subi	r24, 0xE1	; 225
    6306:	9f 4f       	sbci	r25, 0xFF	; 255
    6308:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <eeprom_read_byte>
    630c:	fe 01       	movw	r30, r28
    630e:	e6 5e       	subi	r30, 0xE6	; 230
    6310:	f9 4b       	sbci	r31, 0xB9	; 185
    6312:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    6314:	88 23       	and	r24, r24
    6316:	11 f0       	breq	.+4      	; 0x631c <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6318:	21 96       	adiw	r28, 0x01	; 1
    631a:	f0 cf       	rjmp	.-32     	; 0x62fc <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    631c:	8b e2       	ldi	r24, 0x2B	; 43
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <eeprom_read_dword>
    6324:	61 30       	cpi	r22, 0x01	; 1
    6326:	29 e0       	ldi	r18, 0x09	; 9
    6328:	72 07       	cpc	r23, r18
    632a:	2d e3       	ldi	r18, 0x3D	; 61
    632c:	82 07       	cpc	r24, r18
    632e:	91 05       	cpc	r25, r1
    6330:	60 f4       	brcc	.+24     	; 0x634a <_ZN13EepromManager11readNonVolsEv+0xf4>
    6332:	60 3e       	cpi	r22, 0xE0	; 224
    6334:	27 e6       	ldi	r18, 0x67	; 103
    6336:	72 07       	cpc	r23, r18
    6338:	25 e3       	ldi	r18, 0x35	; 53
    633a:	82 07       	cpc	r24, r18
    633c:	91 05       	cpc	r25, r1
    633e:	50 f4       	brcc	.+20     	; 0x6354 <_ZN13EepromManager11readNonVolsEv+0xfe>
    6340:	40 ee       	ldi	r20, 0xE0	; 224
    6342:	37 e6       	ldi	r19, 0x67	; 103
    6344:	25 e3       	ldi	r18, 0x35	; 53
    6346:	80 e0       	ldi	r24, 0x00	; 0
    6348:	09 c0       	rjmp	.+18     	; 0x635c <_ZN13EepromManager11readNonVolsEv+0x106>
    634a:	40 e0       	ldi	r20, 0x00	; 0
    634c:	39 e0       	ldi	r19, 0x09	; 9
    634e:	2d e3       	ldi	r18, 0x3D	; 61
    6350:	80 e0       	ldi	r24, 0x00	; 0
    6352:	04 c0       	rjmp	.+8      	; 0x635c <_ZN13EepromManager11readNonVolsEv+0x106>
    6354:	46 2f       	mov	r20, r22
    6356:	37 2f       	mov	r19, r23
    6358:	28 2f       	mov	r18, r24
    635a:	89 2f       	mov	r24, r25
    635c:	40 93 2c 40 	sts	0x402C, r20	; 0x80402c <g_80m_frequency>
    6360:	30 93 2d 40 	sts	0x402D, r19	; 0x80402d <g_80m_frequency+0x1>
    6364:	20 93 2e 40 	sts	0x402E, r18	; 0x80402e <g_80m_frequency+0x2>
    6368:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    636c:	8f e2       	ldi	r24, 0x2F	; 47
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <eeprom_read_dword>
    6374:	60 93 32 40 	sts	0x4032, r22	; 0x804032 <g_rtty_offset>
    6378:	70 93 33 40 	sts	0x4033, r23	; 0x804033 <g_rtty_offset+0x1>
    637c:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <g_rtty_offset+0x2>
    6380:	90 93 35 40 	sts	0x4035, r25	; 0x804035 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    6384:	83 e3       	ldi	r24, 0x33	; 51
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <eeprom_read_word>
    638c:	89 38       	cpi	r24, 0x89	; 137
    638e:	23 e1       	ldi	r18, 0x13	; 19
    6390:	92 07       	cpc	r25, r18
    6392:	18 f0       	brcs	.+6      	; 0x639a <_ZN13EepromManager11readNonVolsEv+0x144>
    6394:	28 e8       	ldi	r18, 0x88	; 136
    6396:	83 e1       	ldi	r24, 0x13	; 19
    6398:	02 c0       	rjmp	.+4      	; 0x639e <_ZN13EepromManager11readNonVolsEv+0x148>
    639a:	28 2f       	mov	r18, r24
    639c:	89 2f       	mov	r24, r25
    639e:	20 93 30 40 	sts	0x4030, r18	; 0x804030 <g_80m_power_level_mW>
    63a2:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    63a6:	80 91 11 46 	lds	r24, 0x4611	; 0x804611 <g_event_start_epoch>
    63aa:	90 91 12 46 	lds	r25, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    63ae:	a0 91 13 46 	lds	r26, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    63b2:	b0 91 14 46 	lds	r27, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    63b6:	89 2b       	or	r24, r25
    63b8:	8a 2b       	or	r24, r26
    63ba:	8b 2b       	or	r24, r27
    63bc:	b9 f0       	breq	.+46     	; 0x63ec <_ZN13EepromManager11readNonVolsEv+0x196>
    63be:	40 91 15 46 	lds	r20, 0x4615	; 0x804615 <g_event_finish_epoch>
    63c2:	50 91 16 46 	lds	r21, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    63c6:	60 91 17 46 	lds	r22, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    63ca:	70 91 18 46 	lds	r23, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    63ce:	80 91 11 46 	lds	r24, 0x4611	; 0x804611 <g_event_start_epoch>
    63d2:	90 91 12 46 	lds	r25, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    63d6:	a0 91 13 46 	lds	r26, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    63da:	b0 91 14 46 	lds	r27, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    63de:	84 17       	cp	r24, r20
    63e0:	95 07       	cpc	r25, r21
    63e2:	a6 07       	cpc	r26, r22
    63e4:	b7 07       	cpc	r27, r23
    63e6:	20 f4       	brcc	.+8      	; 0x63f0 <_ZN13EepromManager11readNonVolsEv+0x19a>
    63e8:	80 e0       	ldi	r24, 0x00	; 0
    63ea:	03 c0       	rjmp	.+6      	; 0x63f2 <_ZN13EepromManager11readNonVolsEv+0x19c>
    63ec:	80 e0       	ldi	r24, 0x00	; 0
    63ee:	01 c0       	rjmp	.+2      	; 0x63f2 <_ZN13EepromManager11readNonVolsEv+0x19c>
    63f0:	81 e0       	ldi	r24, 0x01	; 1
    63f2:	88 23       	and	r24, r24
    63f4:	c1 f0       	breq	.+48     	; 0x6426 <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    63f6:	80 91 11 46 	lds	r24, 0x4611	; 0x804611 <g_event_start_epoch>
    63fa:	90 91 12 46 	lds	r25, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    63fe:	a0 91 13 46 	lds	r26, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    6402:	b0 91 14 46 	lds	r27, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    6406:	80 58       	subi	r24, 0x80	; 128
    6408:	9e 4a       	sbci	r25, 0xAE	; 174
    640a:	ae 4f       	sbci	r26, 0xFE	; 254
    640c:	bf 4f       	sbci	r27, 0xFF	; 255
    640e:	80 93 15 46 	sts	0x4615, r24	; 0x804615 <g_event_finish_epoch>
    6412:	90 93 16 46 	sts	0x4616, r25	; 0x804616 <g_event_finish_epoch+0x1>
    6416:	a0 93 17 46 	sts	0x4617, r26	; 0x804617 <g_event_finish_epoch+0x2>
    641a:	b0 93 18 46 	sts	0x4618, r27	; 0x804618 <g_event_finish_epoch+0x3>
		}

		failure = false;
    641e:	80 e0       	ldi	r24, 0x00	; 0
    6420:	03 c0       	rjmp	.+6      	; 0x6428 <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


bool EepromManager::readNonVols(void)
{
	bool failure = true;
    6422:	81 e0       	ldi	r24, 0x01	; 1
    6424:	01 c0       	rjmp	.+2      	; 0x6428 <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = false;
    6426:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    6428:	df 91       	pop	r29
    642a:	cf 91       	pop	r28
    642c:	08 95       	ret

0000642e <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	bool EepromManager::initializeEEPROMVars(void)
	{
    642e:	ef 92       	push	r14
    6430:	ff 92       	push	r15
    6432:	0f 93       	push	r16
    6434:	1f 93       	push	r17
    6436:	cf 93       	push	r28
    6438:	df 93       	push	r29
		bool err = false;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    643a:	80 e0       	ldi	r24, 0x00	; 0
    643c:	90 e0       	ldi	r25, 0x00	; 0
    643e:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    6442:	8e 3c       	cpi	r24, 0xCE	; 206
    6444:	91 05       	cpc	r25, r1
    6446:	09 f4       	brne	.+2      	; 0x644a <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    6448:	aa c0       	rjmp	.+340    	; 0x659e <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    644a:	84 e1       	ldi	r24, 0x14	; 20
    644c:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    6450:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    6454:	88 e2       	ldi	r24, 0x28	; 40
    6456:	90 e0       	ldi	r25, 0x00	; 0
    6458:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    645c:	81 e0       	ldi	r24, 0x01	; 1
    645e:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    6462:	60 91 1b 40 	lds	r22, 0x401B	; 0x80401b <g_fox>
    6466:	89 e2       	ldi	r24, 0x29	; 41
    6468:	90 e0       	ldi	r25, 0x00	; 0
    646a:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    646e:	10 92 11 46 	sts	0x4611, r1	; 0x804611 <g_event_start_epoch>
    6472:	10 92 12 46 	sts	0x4612, r1	; 0x804612 <g_event_start_epoch+0x1>
    6476:	10 92 13 46 	sts	0x4613, r1	; 0x804613 <g_event_start_epoch+0x2>
    647a:	10 92 14 46 	sts	0x4614, r1	; 0x804614 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    647e:	40 91 11 46 	lds	r20, 0x4611	; 0x804611 <g_event_start_epoch>
    6482:	50 91 12 46 	lds	r21, 0x4612	; 0x804612 <g_event_start_epoch+0x1>
    6486:	60 91 13 46 	lds	r22, 0x4613	; 0x804613 <g_event_start_epoch+0x2>
    648a:	70 91 14 46 	lds	r23, 0x4614	; 0x804614 <g_event_start_epoch+0x3>
    648e:	82 e0       	ldi	r24, 0x02	; 2
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    6496:	10 92 15 46 	sts	0x4615, r1	; 0x804615 <g_event_finish_epoch>
    649a:	10 92 16 46 	sts	0x4616, r1	; 0x804616 <g_event_finish_epoch+0x1>
    649e:	10 92 17 46 	sts	0x4617, r1	; 0x804617 <g_event_finish_epoch+0x2>
    64a2:	10 92 18 46 	sts	0x4618, r1	; 0x804618 <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    64a6:	40 91 15 46 	lds	r20, 0x4615	; 0x804615 <g_event_finish_epoch>
    64aa:	50 91 16 46 	lds	r21, 0x4616	; 0x804616 <g_event_finish_epoch+0x1>
    64ae:	60 91 17 46 	lds	r22, 0x4617	; 0x804617 <g_event_finish_epoch+0x2>
    64b2:	70 91 18 46 	lds	r23, 0x4618	; 0x804618 <g_event_finish_epoch+0x3>
    64b6:	86 e0       	ldi	r24, 0x06	; 6
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    64ba:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    64be:	10 92 19 46 	sts	0x4619, r1	; 0x804619 <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    64c2:	60 91 19 46 	lds	r22, 0x4619	; 0x804619 <g_utc_offset>
    64c6:	8a e2       	ldi	r24, 0x2A	; 42
    64c8:	90 e0       	ldi	r25, 0x00	; 0
    64ca:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    64ce:	10 92 db 45 	sts	0x45DB, r1	; 0x8045db <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    64d2:	60 e0       	ldi	r22, 0x00	; 0
    64d4:	8a e0       	ldi	r24, 0x0A	; 10
    64d6:	90 e0       	ldi	r25, 0x00	; 0
    64d8:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    64dc:	e1 ea       	ldi	r30, 0xA1	; 161
    64de:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    64e0:	c0 e0       	ldi	r28, 0x00	; 0
    64e2:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    64e4:	8f e1       	ldi	r24, 0x1F	; 31
    64e6:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    64e8:	c4 30       	cpi	r28, 0x04	; 4
    64ea:	d1 05       	cpc	r29, r1
    64ec:	90 f4       	brcc	.+36     	; 0x6512 <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    64ee:	df 01       	movw	r26, r30
    64f0:	2d 91       	ld	r18, X+
    64f2:	8d 01       	movw	r16, r26
    64f4:	de 01       	movw	r26, r28
    64f6:	a6 5e       	subi	r26, 0xE6	; 230
    64f8:	b9 4b       	sbci	r27, 0xB9	; 185
    64fa:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    64fc:	60 81       	ld	r22, Z
    64fe:	7c 01       	movw	r14, r24
    6500:	bf ef       	ldi	r27, 0xFF	; 255
    6502:	eb 1a       	sub	r14, r27
    6504:	fb 0a       	sbc	r15, r27
    6506:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    650a:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    650c:	f8 01       	movw	r30, r16
    650e:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6510:	eb cf       	rjmp	.-42     	; 0x64e8 <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    6512:	60 e0       	ldi	r22, 0x00	; 0
    6514:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    6518:	c6 5e       	subi	r28, 0xE6	; 230
    651a:	d9 4b       	sbci	r29, 0xB9	; 185
    651c:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    651e:	80 e2       	ldi	r24, 0x20	; 32
    6520:	94 e0       	ldi	r25, 0x04	; 4
    6522:	a6 e3       	ldi	r26, 0x36	; 54
    6524:	b0 e0       	ldi	r27, 0x00	; 0
    6526:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    652a:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    652e:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    6532:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    6536:	40 e2       	ldi	r20, 0x20	; 32
    6538:	54 e0       	ldi	r21, 0x04	; 4
    653a:	66 e3       	ldi	r22, 0x36	; 54
    653c:	70 e0       	ldi	r23, 0x00	; 0
    653e:	8b e2       	ldi	r24, 0x2B	; 43
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    6546:	8a ea       	ldi	r24, 0xAA	; 170
    6548:	90 e0       	ldi	r25, 0x00	; 0
    654a:	a0 e0       	ldi	r26, 0x00	; 0
    654c:	b0 e0       	ldi	r27, 0x00	; 0
    654e:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <g_rtty_offset>
    6552:	90 93 33 40 	sts	0x4033, r25	; 0x804033 <g_rtty_offset+0x1>
    6556:	a0 93 34 40 	sts	0x4034, r26	; 0x804034 <g_rtty_offset+0x2>
    655a:	b0 93 35 40 	sts	0x4035, r27	; 0x804035 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    655e:	40 91 2c 40 	lds	r20, 0x402C	; 0x80402c <g_80m_frequency>
    6562:	50 91 2d 40 	lds	r21, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    6566:	60 91 2e 40 	lds	r22, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    656a:	70 91 2f 40 	lds	r23, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    656e:	8b e2       	ldi	r24, 0x2B	; 43
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    6576:	84 ef       	ldi	r24, 0xF4	; 244
    6578:	91 e0       	ldi	r25, 0x01	; 1
    657a:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    657e:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    6582:	44 ef       	ldi	r20, 0xF4	; 244
    6584:	51 e0       	ldi	r21, 0x01	; 1
    6586:	60 e0       	ldi	r22, 0x00	; 0
    6588:	70 e0       	ldi	r23, 0x00	; 0
    658a:	83 e3       	ldi	r24, 0x33	; 51
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    6592:	6e ec       	ldi	r22, 0xCE	; 206
    6594:	70 e0       	ldi	r23, 0x00	; 0
    6596:	80 e0       	ldi	r24, 0x00	; 0
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    659e:	80 e0       	ldi	r24, 0x00	; 0
    65a0:	df 91       	pop	r29
    65a2:	cf 91       	pop	r28
    65a4:	1f 91       	pop	r17
    65a6:	0f 91       	pop	r16
    65a8:	ff 90       	pop	r15
    65aa:	ef 90       	pop	r14
    65ac:	08 95       	ret

000065ae <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    65ae:	ef 92       	push	r14
    65b0:	ff 92       	push	r15
    65b2:	0f 93       	push	r16
    65b4:	1f 93       	push	r17
    65b6:	cf 93       	push	r28
    65b8:	df 93       	push	r29
    65ba:	e4 2e       	mov	r14, r20
    65bc:	f5 2e       	mov	r15, r21
    65be:	d6 2f       	mov	r29, r22
    65c0:	c7 2f       	mov	r28, r23
    65c2:	00 93 48 46 	sts	0x4648, r16	; 0x804648 <_SAMPLING_FREQUENCY>
    65c6:	10 93 49 46 	sts	0x4649, r17	; 0x804649 <_SAMPLING_FREQUENCY+0x1>
    65ca:	20 93 4a 46 	sts	0x464A, r18	; 0x80464a <_SAMPLING_FREQUENCY+0x2>
    65ce:	30 93 4b 46 	sts	0x464B, r19	; 0x80464b <_SAMPLING_FREQUENCY+0x3>
    65d2:	20 e0       	ldi	r18, 0x00	; 0
    65d4:	30 e0       	ldi	r19, 0x00	; 0
    65d6:	41 e5       	ldi	r20, 0x51	; 81
    65d8:	53 e4       	ldi	r21, 0x43	; 67
    65da:	6e 2d       	mov	r22, r14
    65dc:	7f 2d       	mov	r23, r15
    65de:	8d 2f       	mov	r24, r29
    65e0:	9c 2f       	mov	r25, r28
    65e2:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__gesf2>
    65e6:	18 16       	cp	r1, r24
    65e8:	8c f0       	brlt	.+34     	; 0x660c <_ZN8GoertzelC1Eff+0x5e>
    65ea:	20 e0       	ldi	r18, 0x00	; 0
    65ec:	30 e0       	ldi	r19, 0x00	; 0
    65ee:	48 ec       	ldi	r20, 0xC8	; 200
    65f0:	52 e4       	ldi	r21, 0x42	; 66
    65f2:	6e 2d       	mov	r22, r14
    65f4:	7f 2d       	mov	r23, r15
    65f6:	8d 2f       	mov	r24, r29
    65f8:	9c 2f       	mov	r25, r28
    65fa:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <__cmpsf2>
    65fe:	88 23       	and	r24, r24
    6600:	4c f4       	brge	.+18     	; 0x6614 <_ZN8GoertzelC1Eff+0x66>
    6602:	e1 2c       	mov	r14, r1
    6604:	f1 2c       	mov	r15, r1
    6606:	d8 ec       	ldi	r29, 0xC8	; 200
    6608:	c2 e4       	ldi	r28, 0x42	; 66
    660a:	04 c0       	rjmp	.+8      	; 0x6614 <_ZN8GoertzelC1Eff+0x66>
    660c:	e1 2c       	mov	r14, r1
    660e:	f1 2c       	mov	r15, r1
    6610:	d1 e5       	ldi	r29, 0x51	; 81
    6612:	c3 e4       	ldi	r28, 0x43	; 67
    6614:	6e 2d       	mov	r22, r14
    6616:	7f 2d       	mov	r23, r15
    6618:	8d 2f       	mov	r24, r29
    661a:	9c 2f       	mov	r25, r28
    661c:	0e 94 15 47 	call	0x8e2a	; 0x8e2a <__fixsfsi>
    6620:	60 93 46 46 	sts	0x4646, r22	; 0x804646 <_N>
    6624:	70 93 47 46 	sts	0x4647, r23	; 0x804647 <_N+0x1>
    6628:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <_N>
    662c:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <_N+0x1>
    6630:	88 0f       	add	r24, r24
    6632:	99 1f       	adc	r25, r25
    6634:	0e 94 1a 49 	call	0x9234	; 0x9234 <malloc>
    6638:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <testData>
    663c:	90 93 42 46 	sts	0x4642, r25	; 0x804642 <testData+0x1>
    6640:	df 91       	pop	r29
    6642:	cf 91       	pop	r28
    6644:	1f 91       	pop	r17
    6646:	0f 91       	pop	r16
    6648:	ff 90       	pop	r15
    664a:	ef 90       	pop	r14
    664c:	08 95       	ret

0000664e <_ZN8GoertzelD1Ev>:
    664e:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <testData>
    6652:	90 91 42 46 	lds	r25, 0x4642	; 0x804642 <testData+0x1>
    6656:	0e 94 b2 49 	call	0x9364	; 0x9364 <free>
    665a:	08 95       	ret

0000665c <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    665c:	80 91 43 46 	lds	r24, 0x4643	; 0x804643 <_samplesReady>
    6660:	88 23       	and	r24, r24
    6662:	19 f0       	breq	.+6      	; 0x666a <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    6664:	80 91 43 46 	lds	r24, 0x4643	; 0x804643 <_samplesReady>
    6668:	08 95       	ret
	}

	testData[_index] = data;
    666a:	e0 91 44 46 	lds	r30, 0x4644	; 0x804644 <_index>
    666e:	f0 91 45 46 	lds	r31, 0x4645	; 0x804645 <_index+0x1>
    6672:	ee 0f       	add	r30, r30
    6674:	ff 1f       	adc	r31, r31
    6676:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <testData>
    667a:	90 91 42 46 	lds	r25, 0x4642	; 0x804642 <testData+0x1>
    667e:	e8 0f       	add	r30, r24
    6680:	f9 1f       	adc	r31, r25
    6682:	60 83       	st	Z, r22
    6684:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    6686:	80 91 44 46 	lds	r24, 0x4644	; 0x804644 <_index>
    668a:	90 91 45 46 	lds	r25, 0x4645	; 0x804645 <_index+0x1>
    668e:	01 96       	adiw	r24, 0x01	; 1
    6690:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <_index>
    6694:	90 93 45 46 	sts	0x4645, r25	; 0x804645 <_index+0x1>
	if(_index >= _N)
    6698:	20 91 44 46 	lds	r18, 0x4644	; 0x804644 <_index>
    669c:	30 91 45 46 	lds	r19, 0x4645	; 0x804645 <_index+0x1>
    66a0:	80 91 46 46 	lds	r24, 0x4646	; 0x804646 <_N>
    66a4:	90 91 47 46 	lds	r25, 0x4647	; 0x804647 <_N+0x1>
    66a8:	28 17       	cp	r18, r24
    66aa:	39 07       	cpc	r19, r25
    66ac:	3c f0       	brlt	.+14     	; 0x66bc <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    66ae:	10 92 44 46 	sts	0x4644, r1	; 0x804644 <_index>
    66b2:	10 92 45 46 	sts	0x4645, r1	; 0x804645 <_index+0x1>
		_samplesReady = true;
    66b6:	81 e0       	ldi	r24, 0x01	; 1
    66b8:	80 93 43 46 	sts	0x4643, r24	; 0x804643 <_samplesReady>
	}

	return(_samplesReady);
    66bc:	80 91 43 46 	lds	r24, 0x4643	; 0x804643 <_samplesReady>
}
    66c0:	08 95       	ret

000066c2 <_ZL11i2c_0_WaitWv>:
	return retVal;
}

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    66c2:	8c e2       	ldi	r24, 0x2C	; 44
    66c4:	91 e0       	ldi	r25, 0x01	; 1
    66c6:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    66ca:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    66ce:	80 e0       	ldi	r24, 0x00	; 0
    66d0:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    66d4:	90 7c       	andi	r25, 0xC0	; 192
    66d6:	31 f0       	breq	.+12     	; 0x66e4 <_ZL11i2c_0_WaitWv+0x22>
    66d8:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    66dc:	84 fd       	sbrc	r24, 4
    66de:	07 c0       	rjmp	.+14     	; 0x66ee <_ZL11i2c_0_WaitWv+0x2c>
    66e0:	81 e0       	ldi	r24, 0x01	; 1
    66e2:	08 c0       	rjmp	.+16     	; 0x66f4 <_ZL11i2c_0_WaitWv+0x32>
    66e4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    66e8:	9c 70       	andi	r25, 0x0C	; 12
    66ea:	19 f4       	brne	.+6      	; 0x66f2 <_ZL11i2c_0_WaitWv+0x30>
    66ec:	03 c0       	rjmp	.+6      	; 0x66f4 <_ZL11i2c_0_WaitWv+0x32>
    66ee:	82 e0       	ldi	r24, 0x02	; 2
    66f0:	01 c0       	rjmp	.+2      	; 0x66f4 <_ZL11i2c_0_WaitWv+0x32>
    66f2:	84 e0       	ldi	r24, 0x04	; 4
    66f4:	81 11       	cpse	r24, r1
    66f6:	08 c0       	rjmp	.+16     	; 0x6708 <_ZL11i2c_0_WaitWv+0x46>
    66f8:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    66fc:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6700:	23 2b       	or	r18, r19
    6702:	21 f4       	brne	.+8      	; 0x670c <_ZL11i2c_0_WaitWv+0x4a>
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	03 c0       	rjmp	.+6      	; 0x670e <_ZL11i2c_0_WaitWv+0x4c>
    6708:	90 e0       	ldi	r25, 0x00	; 0
    670a:	01 c0       	rjmp	.+2      	; 0x670e <_ZL11i2c_0_WaitWv+0x4c>
    670c:	91 e0       	ldi	r25, 0x01	; 1
    670e:	91 11       	cpse	r25, r1
    6710:	df cf       	rjmp	.-66     	; 0x66d0 <_ZL11i2c_0_WaitWv+0xe>
    6712:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    6716:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    671a:	23 2b       	or	r18, r19
    671c:	09 f4       	brne	.+2      	; 0x6720 <_ZL11i2c_0_WaitWv+0x5e>
    671e:	84 e0       	ldi	r24, 0x04	; 4
    6720:	08 95       	ret

00006722 <_ZL11i2c_0_WaitRv>:
    6722:	88 ec       	ldi	r24, 0xC8	; 200
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    672a:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    672e:	80 e0       	ldi	r24, 0x00	; 0
    6730:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6734:	90 7c       	andi	r25, 0xC0	; 192
    6736:	29 f4       	brne	.+10     	; 0x6742 <_ZL11i2c_0_WaitRv+0x20>
    6738:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    673c:	9c 70       	andi	r25, 0x0C	; 12
    673e:	19 f4       	brne	.+6      	; 0x6746 <_ZL11i2c_0_WaitRv+0x24>
    6740:	03 c0       	rjmp	.+6      	; 0x6748 <_ZL11i2c_0_WaitRv+0x26>
    6742:	83 e0       	ldi	r24, 0x03	; 3
    6744:	01 c0       	rjmp	.+2      	; 0x6748 <_ZL11i2c_0_WaitRv+0x26>
    6746:	84 e0       	ldi	r24, 0x04	; 4
    6748:	81 11       	cpse	r24, r1
    674a:	08 c0       	rjmp	.+16     	; 0x675c <_ZL11i2c_0_WaitRv+0x3a>
    674c:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    6750:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6754:	23 2b       	or	r18, r19
    6756:	21 f4       	brne	.+8      	; 0x6760 <_ZL11i2c_0_WaitRv+0x3e>
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	03 c0       	rjmp	.+6      	; 0x6762 <_ZL11i2c_0_WaitRv+0x40>
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	01 c0       	rjmp	.+2      	; 0x6762 <_ZL11i2c_0_WaitRv+0x40>
    6760:	91 e0       	ldi	r25, 0x01	; 1
    6762:	91 11       	cpse	r25, r1
    6764:	e5 cf       	rjmp	.-54     	; 0x6730 <_ZL11i2c_0_WaitRv+0xe>
    6766:	08 95       	ret

00006768 <_ZL11i2c_1_WaitWv>:
    6768:	88 ec       	ldi	r24, 0xC8	; 200
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    6770:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    6774:	80 e0       	ldi	r24, 0x00	; 0
    6776:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    677a:	29 2f       	mov	r18, r25
    677c:	20 7c       	andi	r18, 0xC0	; 192
    677e:	21 f0       	breq	.+8      	; 0x6788 <_ZL11i2c_1_WaitWv+0x20>
    6780:	94 fd       	sbrc	r25, 4
    6782:	05 c0       	rjmp	.+10     	; 0x678e <_ZL11i2c_1_WaitWv+0x26>
    6784:	81 e0       	ldi	r24, 0x01	; 1
    6786:	06 c0       	rjmp	.+12     	; 0x6794 <_ZL11i2c_1_WaitWv+0x2c>
    6788:	9c 70       	andi	r25, 0x0C	; 12
    678a:	19 f4       	brne	.+6      	; 0x6792 <_ZL11i2c_1_WaitWv+0x2a>
    678c:	03 c0       	rjmp	.+6      	; 0x6794 <_ZL11i2c_1_WaitWv+0x2c>
    678e:	82 e0       	ldi	r24, 0x02	; 2
    6790:	01 c0       	rjmp	.+2      	; 0x6794 <_ZL11i2c_1_WaitWv+0x2c>
    6792:	84 e0       	ldi	r24, 0x04	; 4
    6794:	81 11       	cpse	r24, r1
    6796:	08 c0       	rjmp	.+16     	; 0x67a8 <_ZL11i2c_1_WaitWv+0x40>
    6798:	20 91 1e 40 	lds	r18, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    679c:	30 91 1f 40 	lds	r19, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    67a0:	23 2b       	or	r18, r19
    67a2:	21 f4       	brne	.+8      	; 0x67ac <_ZL11i2c_1_WaitWv+0x44>
    67a4:	90 e0       	ldi	r25, 0x00	; 0
    67a6:	03 c0       	rjmp	.+6      	; 0x67ae <_ZL11i2c_1_WaitWv+0x46>
    67a8:	90 e0       	ldi	r25, 0x00	; 0
    67aa:	01 c0       	rjmp	.+2      	; 0x67ae <_ZL11i2c_1_WaitWv+0x46>
    67ac:	91 e0       	ldi	r25, 0x01	; 1
    67ae:	91 11       	cpse	r25, r1
    67b0:	e2 cf       	rjmp	.-60     	; 0x6776 <_ZL11i2c_1_WaitWv+0xe>
    67b2:	08 95       	ret

000067b4 <_ZL11I2C_1_WaitRv>:
    67b4:	88 ec       	ldi	r24, 0xC8	; 200
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    67bc:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    67c0:	80 e0       	ldi	r24, 0x00	; 0
    67c2:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    67c6:	90 7c       	andi	r25, 0xC0	; 192
    67c8:	29 f4       	brne	.+10     	; 0x67d4 <_ZL11I2C_1_WaitRv+0x20>
    67ca:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    67ce:	9c 70       	andi	r25, 0x0C	; 12
    67d0:	19 f4       	brne	.+6      	; 0x67d8 <_ZL11I2C_1_WaitRv+0x24>
    67d2:	03 c0       	rjmp	.+6      	; 0x67da <_ZL11I2C_1_WaitRv+0x26>
    67d4:	83 e0       	ldi	r24, 0x03	; 3
    67d6:	01 c0       	rjmp	.+2      	; 0x67da <_ZL11I2C_1_WaitRv+0x26>
    67d8:	84 e0       	ldi	r24, 0x04	; 4
    67da:	81 11       	cpse	r24, r1
    67dc:	08 c0       	rjmp	.+16     	; 0x67ee <_ZL11I2C_1_WaitRv+0x3a>
    67de:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    67e2:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    67e6:	23 2b       	or	r18, r19
    67e8:	21 f4       	brne	.+8      	; 0x67f2 <_ZL11I2C_1_WaitRv+0x3e>
    67ea:	90 e0       	ldi	r25, 0x00	; 0
    67ec:	03 c0       	rjmp	.+6      	; 0x67f4 <_ZL11I2C_1_WaitRv+0x40>
    67ee:	90 e0       	ldi	r25, 0x00	; 0
    67f0:	01 c0       	rjmp	.+2      	; 0x67f4 <_ZL11I2C_1_WaitRv+0x40>
    67f2:	91 e0       	ldi	r25, 0x01	; 1
    67f4:	91 11       	cpse	r25, r1
    67f6:	e5 cf       	rjmp	.-54     	; 0x67c2 <_ZL11I2C_1_WaitRv+0xe>
    67f8:	08 95       	ret

000067fa <I2C_0_SendData>:
    67fa:	ff 92       	push	r15
    67fc:	0f 93       	push	r16
    67fe:	1f 93       	push	r17
    6800:	cf 93       	push	r28
    6802:	df 93       	push	r29
    6804:	c6 2f       	mov	r28, r22
    6806:	8a 01       	movw	r16, r20
    6808:	d2 2f       	mov	r29, r18
    680a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    680e:	0e 94 61 33 	call	0x66c2	; 0x66c2 <_ZL11i2c_0_WaitWv>
    6812:	81 30       	cpi	r24, 0x01	; 1
    6814:	f1 f4       	brne	.+60     	; 0x6852 <I2C_0_SendData+0x58>
    6816:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    681a:	0e 94 61 33 	call	0x66c2	; 0x66c2 <_ZL11i2c_0_WaitWv>
    681e:	81 30       	cpi	r24, 0x01	; 1
    6820:	d1 f4       	brne	.+52     	; 0x6856 <I2C_0_SendData+0x5c>
    6822:	dd 23       	and	r29, r29
    6824:	d1 f0       	breq	.+52     	; 0x685a <I2C_0_SendData+0x60>
    6826:	01 15       	cp	r16, r1
    6828:	11 05       	cpc	r17, r1
    682a:	c9 f0       	breq	.+50     	; 0x685e <I2C_0_SendData+0x64>
    682c:	c0 e0       	ldi	r28, 0x00	; 0
    682e:	ff 24       	eor	r15, r15
    6830:	fa 94       	dec	r15
    6832:	fd 0e       	add	r15, r29
    6834:	dd 23       	and	r29, r29
    6836:	a9 f0       	breq	.+42     	; 0x6862 <I2C_0_SendData+0x68>
    6838:	f8 01       	movw	r30, r16
    683a:	80 81       	ld	r24, Z
    683c:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    6840:	0e 94 61 33 	call	0x66c2	; 0x66c2 <_ZL11i2c_0_WaitWv>
    6844:	81 30       	cpi	r24, 0x01	; 1
    6846:	79 f4       	brne	.+30     	; 0x6866 <I2C_0_SendData+0x6c>
    6848:	cf 5f       	subi	r28, 0xFF	; 255
    684a:	0f 5f       	subi	r16, 0xFF	; 255
    684c:	1f 4f       	sbci	r17, 0xFF	; 255
    684e:	df 2d       	mov	r29, r15
    6850:	ee cf       	rjmp	.-36     	; 0x682e <I2C_0_SendData+0x34>
    6852:	8f ef       	ldi	r24, 0xFF	; 255
    6854:	09 c0       	rjmp	.+18     	; 0x6868 <I2C_0_SendData+0x6e>
    6856:	8f ef       	ldi	r24, 0xFF	; 255
    6858:	07 c0       	rjmp	.+14     	; 0x6868 <I2C_0_SendData+0x6e>
    685a:	80 e0       	ldi	r24, 0x00	; 0
    685c:	05 c0       	rjmp	.+10     	; 0x6868 <I2C_0_SendData+0x6e>
    685e:	80 e0       	ldi	r24, 0x00	; 0
    6860:	03 c0       	rjmp	.+6      	; 0x6868 <I2C_0_SendData+0x6e>
    6862:	8c 2f       	mov	r24, r28
    6864:	01 c0       	rjmp	.+2      	; 0x6868 <I2C_0_SendData+0x6e>
    6866:	8c 2f       	mov	r24, r28
    6868:	df 91       	pop	r29
    686a:	cf 91       	pop	r28
    686c:	1f 91       	pop	r17
    686e:	0f 91       	pop	r16
    6870:	ff 90       	pop	r15
    6872:	08 95       	ret

00006874 <I2C_0_GetData>:
    6874:	ef 92       	push	r14
    6876:	ff 92       	push	r15
    6878:	1f 93       	push	r17
    687a:	cf 93       	push	r28
    687c:	df 93       	push	r29
    687e:	c8 2f       	mov	r28, r24
    6880:	d6 2f       	mov	r29, r22
    6882:	7a 01       	movw	r14, r20
    6884:	12 2f       	mov	r17, r18
    6886:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    688a:	0e 94 61 33 	call	0x66c2	; 0x66c2 <_ZL11i2c_0_WaitWv>
    688e:	81 30       	cpi	r24, 0x01	; 1
    6890:	61 f5       	brne	.+88     	; 0x68ea <I2C_0_GetData+0x76>
    6892:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    6896:	0e 94 61 33 	call	0x66c2	; 0x66c2 <_ZL11i2c_0_WaitWv>
    689a:	81 30       	cpi	r24, 0x01	; 1
    689c:	41 f5       	brne	.+80     	; 0x68ee <I2C_0_GetData+0x7a>
    689e:	c1 60       	ori	r28, 0x01	; 1
    68a0:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    68a4:	0e 94 61 33 	call	0x66c2	; 0x66c2 <_ZL11i2c_0_WaitWv>
    68a8:	81 30       	cpi	r24, 0x01	; 1
    68aa:	19 f5       	brne	.+70     	; 0x68f2 <I2C_0_GetData+0x7e>
    68ac:	11 23       	and	r17, r17
    68ae:	19 f1       	breq	.+70     	; 0x68f6 <I2C_0_GetData+0x82>
    68b0:	e1 14       	cp	r14, r1
    68b2:	f1 04       	cpc	r15, r1
    68b4:	11 f1       	breq	.+68     	; 0x68fa <I2C_0_GetData+0x86>
    68b6:	c0 e0       	ldi	r28, 0x00	; 0
    68b8:	df ef       	ldi	r29, 0xFF	; 255
    68ba:	d1 0f       	add	r29, r17
    68bc:	11 23       	and	r17, r17
    68be:	f9 f0       	breq	.+62     	; 0x68fe <I2C_0_GetData+0x8a>
    68c0:	0e 94 91 33 	call	0x6722	; 0x6722 <_ZL11i2c_0_WaitRv>
    68c4:	83 30       	cpi	r24, 0x03	; 3
    68c6:	e9 f4       	brne	.+58     	; 0x6902 <I2C_0_GetData+0x8e>
    68c8:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    68cc:	f7 01       	movw	r30, r14
    68ce:	80 83       	st	Z, r24
    68d0:	d1 11       	cpse	r29, r1
    68d2:	02 c0       	rjmp	.+4      	; 0x68d8 <I2C_0_GetData+0x64>
    68d4:	87 e0       	ldi	r24, 0x07	; 7
    68d6:	01 c0       	rjmp	.+2      	; 0x68da <I2C_0_GetData+0x66>
    68d8:	82 e0       	ldi	r24, 0x02	; 2
    68da:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    68de:	cf 5f       	subi	r28, 0xFF	; 255
    68e0:	ff ef       	ldi	r31, 0xFF	; 255
    68e2:	ef 1a       	sub	r14, r31
    68e4:	ff 0a       	sbc	r15, r31
    68e6:	1d 2f       	mov	r17, r29
    68e8:	e7 cf       	rjmp	.-50     	; 0x68b8 <I2C_0_GetData+0x44>
    68ea:	8f ef       	ldi	r24, 0xFF	; 255
    68ec:	0b c0       	rjmp	.+22     	; 0x6904 <I2C_0_GetData+0x90>
    68ee:	8f ef       	ldi	r24, 0xFF	; 255
    68f0:	09 c0       	rjmp	.+18     	; 0x6904 <I2C_0_GetData+0x90>
    68f2:	8f ef       	ldi	r24, 0xFF	; 255
    68f4:	07 c0       	rjmp	.+14     	; 0x6904 <I2C_0_GetData+0x90>
    68f6:	80 e0       	ldi	r24, 0x00	; 0
    68f8:	05 c0       	rjmp	.+10     	; 0x6904 <I2C_0_GetData+0x90>
    68fa:	80 e0       	ldi	r24, 0x00	; 0
    68fc:	03 c0       	rjmp	.+6      	; 0x6904 <I2C_0_GetData+0x90>
    68fe:	8c 2f       	mov	r24, r28
    6900:	01 c0       	rjmp	.+2      	; 0x6904 <I2C_0_GetData+0x90>
    6902:	8c 2f       	mov	r24, r28
    6904:	df 91       	pop	r29
    6906:	cf 91       	pop	r28
    6908:	1f 91       	pop	r17
    690a:	ff 90       	pop	r15
    690c:	ef 90       	pop	r14
    690e:	08 95       	ret

00006910 <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    6910:	e0 ee       	ldi	r30, 0xE0	; 224
    6912:	f5 e0       	ldi	r31, 0x05	; 5
    6914:	85 81       	ldd	r24, Z+5	; 0x05
    6916:	83 70       	andi	r24, 0x03	; 3
    6918:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    691a:	85 81       	ldd	r24, Z+5	; 0x05
    691c:	88 60       	ori	r24, 0x08	; 8
    691e:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    6920:	e0 e2       	ldi	r30, 0x20	; 32
    6922:	f9 e0       	ldi	r31, 0x09	; 9
    6924:	8f e6       	ldi	r24, 0x6F	; 111
    6926:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    6928:	81 e0       	ldi	r24, 0x01	; 1
    692a:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    692c:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    692e:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6930:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6932:	e2 e3       	ldi	r30, 0x32	; 50
    6934:	f4 e0       	ldi	r31, 0x04	; 4
    6936:	80 81       	ld	r24, Z
    6938:	88 60       	ori	r24, 0x08	; 8
    693a:	80 83       	st	Z, r24
    693c:	e3 e3       	ldi	r30, 0x33	; 51
    693e:	f4 e0       	ldi	r31, 0x04	; 4
    6940:	80 81       	ld	r24, Z
    6942:	88 60       	ori	r24, 0x08	; 8
    6944:	80 83       	st	Z, r24
    6946:	08 95       	ret

00006948 <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6948:	ff 92       	push	r15
    694a:	0f 93       	push	r16
    694c:	1f 93       	push	r17
    694e:	cf 93       	push	r28
    6950:	df 93       	push	r29
    6952:	c6 2f       	mov	r28, r22
    6954:	8a 01       	movw	r16, r20
    6956:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    6958:	8e 7f       	andi	r24, 0xFE	; 254
    695a:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    695e:	0e 94 b4 33 	call	0x6768	; 0x6768 <_ZL11i2c_1_WaitWv>
    6962:	81 30       	cpi	r24, 0x01	; 1
    6964:	f1 f4       	brne	.+60     	; 0x69a2 <I2C_1_SendData+0x5a>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6966:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    696a:	0e 94 b4 33 	call	0x6768	; 0x6768 <_ZL11i2c_1_WaitWv>
    696e:	81 30       	cpi	r24, 0x01	; 1
    6970:	d1 f4       	brne	.+52     	; 0x69a6 <I2C_1_SendData+0x5e>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
    6972:	dd 23       	and	r29, r29
    6974:	d1 f0       	breq	.+52     	; 0x69aa <I2C_1_SendData+0x62>
    6976:	01 15       	cp	r16, r1
    6978:	11 05       	cpc	r17, r1
    697a:	c9 f0       	breq	.+50     	; 0x69ae <I2C_1_SendData+0x66>
    697c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    697e:	ff 24       	eor	r15, r15
    6980:	fa 94       	dec	r15
    6982:	fd 0e       	add	r15, r29
    6984:	dd 23       	and	r29, r29
    6986:	a9 f0       	breq	.+42     	; 0x69b2 <I2C_1_SendData+0x6a>
		{
			TWI1.MDATA = *pData;
    6988:	f8 01       	movw	r30, r16
    698a:	80 81       	ld	r24, Z
    698c:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    6990:	0e 94 b4 33 	call	0x6768	; 0x6768 <_ZL11i2c_1_WaitWv>
    6994:	81 30       	cpi	r24, 0x01	; 1
    6996:	79 f4       	brne	.+30     	; 0x69b6 <I2C_1_SendData+0x6e>
			{
				retVal++;
    6998:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    699a:	0f 5f       	subi	r16, 0xFF	; 255
    699c:	1f 4f       	sbci	r17, 0xFF	; 255
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
    699e:	df 2d       	mov	r29, r15
    69a0:	ee cf       	rjmp	.-36     	; 0x697e <I2C_1_SendData+0x36>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    69a2:	8f ef       	ldi	r24, 0xFF	; 255
    69a4:	09 c0       	rjmp	.+18     	; 0x69b8 <I2C_1_SendData+0x70>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    69a6:	8f ef       	ldi	r24, 0xFF	; 255
    69a8:	07 c0       	rjmp	.+14     	; 0x69b8 <I2C_1_SendData+0x70>
	}	

	retVal = 0;
    69aa:	80 e0       	ldi	r24, 0x00	; 0
    69ac:	05 c0       	rjmp	.+10     	; 0x69b8 <I2C_1_SendData+0x70>
    69ae:	80 e0       	ldi	r24, 0x00	; 0
    69b0:	03 c0       	rjmp	.+6      	; 0x69b8 <I2C_1_SendData+0x70>
    69b2:	8c 2f       	mov	r24, r28
    69b4:	01 c0       	rjmp	.+2      	; 0x69b8 <I2C_1_SendData+0x70>
    69b6:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    69b8:	df 91       	pop	r29
    69ba:	cf 91       	pop	r28
    69bc:	1f 91       	pop	r17
    69be:	0f 91       	pop	r16
    69c0:	ff 90       	pop	r15
    69c2:	08 95       	ret

000069c4 <I2C_1_GetData>:


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    69c4:	ef 92       	push	r14
    69c6:	ff 92       	push	r15
    69c8:	1f 93       	push	r17
    69ca:	cf 93       	push	r28
    69cc:	df 93       	push	r29
    69ce:	c8 2f       	mov	r28, r24
    69d0:	d6 2f       	mov	r29, r22
    69d2:	7a 01       	movw	r14, r20
    69d4:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    69d6:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    69da:	0e 94 b4 33 	call	0x6768	; 0x6768 <_ZL11i2c_1_WaitWv>
    69de:	81 30       	cpi	r24, 0x01	; 1
    69e0:	61 f5       	brne	.+88     	; 0x6a3a <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    69e2:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    69e6:	0e 94 b4 33 	call	0x6768	; 0x6768 <_ZL11i2c_1_WaitWv>
    69ea:	81 30       	cpi	r24, 0x01	; 1
    69ec:	41 f5       	brne	.+80     	; 0x6a3e <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    69ee:	c1 60       	ori	r28, 0x01	; 1
    69f0:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    69f4:	0e 94 b4 33 	call	0x6768	; 0x6768 <_ZL11i2c_1_WaitWv>
    69f8:	81 30       	cpi	r24, 0x01	; 1
    69fa:	19 f5       	brne	.+70     	; 0x6a42 <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    69fc:	11 23       	and	r17, r17
    69fe:	19 f1       	breq	.+70     	; 0x6a46 <I2C_1_GetData+0x82>
    6a00:	e1 14       	cp	r14, r1
    6a02:	f1 04       	cpc	r15, r1
    6a04:	11 f1       	breq	.+68     	; 0x6a4a <I2C_1_GetData+0x86>
    6a06:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6a08:	df ef       	ldi	r29, 0xFF	; 255
    6a0a:	d1 0f       	add	r29, r17
    6a0c:	11 23       	and	r17, r17
    6a0e:	f9 f0       	breq	.+62     	; 0x6a4e <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    6a10:	0e 94 da 33 	call	0x67b4	; 0x67b4 <_ZL11I2C_1_WaitRv>
    6a14:	83 30       	cpi	r24, 0x03	; 3
    6a16:	e9 f4       	brne	.+58     	; 0x6a52 <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    6a18:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    6a1c:	f7 01       	movw	r30, r14
    6a1e:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    6a20:	d1 11       	cpse	r29, r1
    6a22:	02 c0       	rjmp	.+4      	; 0x6a28 <I2C_1_GetData+0x64>
    6a24:	87 e0       	ldi	r24, 0x07	; 7
    6a26:	01 c0       	rjmp	.+2      	; 0x6a2a <I2C_1_GetData+0x66>
    6a28:	82 e0       	ldi	r24, 0x02	; 2
    6a2a:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    6a2e:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6a30:	ff ef       	ldi	r31, 0xFF	; 255
    6a32:	ef 1a       	sub	r14, r31
    6a34:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6a36:	1d 2f       	mov	r17, r29
    6a38:	e7 cf       	rjmp	.-50     	; 0x6a08 <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a3a:	8f ef       	ldi	r24, 0xFF	; 255
    6a3c:	0b c0       	rjmp	.+22     	; 0x6a54 <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a3e:	8f ef       	ldi	r24, 0xFF	; 255
    6a40:	09 c0       	rjmp	.+18     	; 0x6a54 <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    6a42:	8f ef       	ldi	r24, 0xFF	; 255
    6a44:	07 c0       	rjmp	.+14     	; 0x6a54 <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    6a46:	80 e0       	ldi	r24, 0x00	; 0
    6a48:	05 c0       	rjmp	.+10     	; 0x6a54 <I2C_1_GetData+0x90>
    6a4a:	80 e0       	ldi	r24, 0x00	; 0
    6a4c:	03 c0       	rjmp	.+6      	; 0x6a54 <I2C_1_GetData+0x90>
    6a4e:	8c 2f       	mov	r24, r28
    6a50:	01 c0       	rjmp	.+2      	; 0x6a54 <I2C_1_GetData+0x90>
    6a52:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6a54:	df 91       	pop	r29
    6a56:	cf 91       	pop	r28
    6a58:	1f 91       	pop	r17
    6a5a:	ff 90       	pop	r15
    6a5c:	ef 90       	pop	r14
    6a5e:	08 95       	ret

00006a60 <_ZL21USART4_initializationm>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
	lb_send_text(g_tempMsgBuff);
    6a60:	20 b3       	in	r18, 0x10	; 16
    6a62:	2d 7f       	andi	r18, 0xFD	; 253
    6a64:	20 bb       	out	0x10, r18	; 16
    6a66:	e1 e9       	ldi	r30, 0x91	; 145
    6a68:	f4 e0       	ldi	r31, 0x04	; 4
    6a6a:	20 81       	ld	r18, Z
    6a6c:	27 7f       	andi	r18, 0xF7	; 247
    6a6e:	20 83       	st	Z, r18
    6a70:	20 b3       	in	r18, 0x10	; 16
    6a72:	21 60       	ori	r18, 0x01	; 1
    6a74:	20 bb       	out	0x10, r18	; 16
    6a76:	21 b3       	in	r18, 0x11	; 17
    6a78:	21 60       	ori	r18, 0x01	; 1
    6a7a:	21 bb       	out	0x11, r18	; 17
    6a7c:	0e 94 df 45 	call	0x8bbe	; 0x8bbe <USART4_init>
    6a80:	08 95       	ret

00006a82 <_ZL21USART1_initializationm>:
    6a82:	28 b1       	in	r18, 0x08	; 8
    6a84:	2d 7f       	andi	r18, 0xFD	; 253
    6a86:	28 b9       	out	0x08, r18	; 8
    6a88:	e1 e5       	ldi	r30, 0x51	; 81
    6a8a:	f4 e0       	ldi	r31, 0x04	; 4
    6a8c:	20 81       	ld	r18, Z
    6a8e:	27 7f       	andi	r18, 0xF7	; 247
    6a90:	20 83       	st	Z, r18
    6a92:	28 b1       	in	r18, 0x08	; 8
    6a94:	21 60       	ori	r18, 0x01	; 1
    6a96:	28 b9       	out	0x08, r18	; 8
    6a98:	29 b1       	in	r18, 0x09	; 9
    6a9a:	21 60       	ori	r18, 0x01	; 1
    6a9c:	29 b9       	out	0x09, r18	; 9
    6a9e:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <USART1_init>
    6aa2:	08 95       	ret

00006aa4 <_ZL16linkbus_start_txv>:
    6aa4:	cf 93       	push	r28
    6aa6:	c0 91 9c 47 	lds	r28, 0x479C	; 0x80479c <_ZL17linkbus_tx_active>
    6aaa:	81 e0       	ldi	r24, 0x01	; 1
    6aac:	c8 27       	eor	r28, r24
    6aae:	59 f0       	breq	.+22     	; 0x6ac6 <_ZL16linkbus_start_txv+0x22>
    6ab0:	80 93 9c 47 	sts	0x479C, r24	; 0x80479c <_ZL17linkbus_tx_active>
    6ab4:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6ab8:	81 11       	cpse	r24, r1
    6aba:	03 c0       	rjmp	.+6      	; 0x6ac2 <_ZL16linkbus_start_txv+0x1e>
    6abc:	0e 94 01 46 	call	0x8c02	; 0x8c02 <USART4_enable_tx>
    6ac0:	02 c0       	rjmp	.+4      	; 0x6ac6 <_ZL16linkbus_start_txv+0x22>
    6ac2:	0e 94 cd 45 	call	0x8b9a	; 0x8b9a <USART1_enable_tx>
    6ac6:	8c 2f       	mov	r24, r28
    6ac8:	cf 91       	pop	r28
    6aca:	08 95       	ret

00006acc <_Z18nextFullLBTxBufferv>:
    6acc:	90 e0       	ldi	r25, 0x00	; 0
    6ace:	80 91 4f 46 	lds	r24, 0x464F	; 0x80464f <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6ad2:	28 2f       	mov	r18, r24
    6ad4:	30 e0       	ldi	r19, 0x00	; 0
    6ad6:	42 e3       	ldi	r20, 0x32	; 50
    6ad8:	42 9f       	mul	r20, r18
    6ada:	f0 01       	movw	r30, r0
    6adc:	43 9f       	mul	r20, r19
    6ade:	f0 0d       	add	r31, r0
    6ae0:	11 24       	eor	r1, r1
    6ae2:	ec 52       	subi	r30, 0x2C	; 44
    6ae4:	f9 4b       	sbci	r31, 0xB9	; 185
    6ae6:	40 81       	ld	r20, Z
    6ae8:	41 11       	cpse	r20, r1
    6aea:	0b c0       	rjmp	.+22     	; 0x6b02 <_Z18nextFullLBTxBufferv+0x36>
    6aec:	9f 5f       	subi	r25, 0xFF	; 255
    6aee:	94 30       	cpi	r25, 0x04	; 4
    6af0:	50 f4       	brcc	.+20     	; 0x6b06 <_Z18nextFullLBTxBufferv+0x3a>
    6af2:	8f 5f       	subi	r24, 0xFF	; 255
    6af4:	80 93 4f 46 	sts	0x464F, r24	; 0x80464f <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6af8:	84 30       	cpi	r24, 0x04	; 4
    6afa:	48 f3       	brcs	.-46     	; 0x6ace <_Z18nextFullLBTxBufferv+0x2>
    6afc:	10 92 4f 46 	sts	0x464F, r1	; 0x80464f <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6b00:	e6 cf       	rjmp	.-52     	; 0x6ace <_Z18nextFullLBTxBufferv+0x2>
    6b02:	81 e0       	ldi	r24, 0x01	; 1
    6b04:	01 c0       	rjmp	.+2      	; 0x6b08 <_Z18nextFullLBTxBufferv+0x3c>
    6b06:	80 e0       	ldi	r24, 0x00	; 0
    6b08:	88 23       	and	r24, r24
    6b0a:	49 f0       	breq	.+18     	; 0x6b1e <_Z18nextFullLBTxBufferv+0x52>
    6b0c:	42 e3       	ldi	r20, 0x32	; 50
    6b0e:	42 9f       	mul	r20, r18
    6b10:	c0 01       	movw	r24, r0
    6b12:	43 9f       	mul	r20, r19
    6b14:	90 0d       	add	r25, r0
    6b16:	11 24       	eor	r1, r1
    6b18:	8c 52       	subi	r24, 0x2C	; 44
    6b1a:	99 4b       	sbci	r25, 0xB9	; 185
    6b1c:	08 95       	ret
    6b1e:	80 e0       	ldi	r24, 0x00	; 0
    6b20:	90 e0       	ldi	r25, 0x00	; 0
    6b22:	08 95       	ret

00006b24 <_Z19nextEmptyLBTxBufferv>:
    6b24:	90 e0       	ldi	r25, 0x00	; 0
    6b26:	80 91 4e 46 	lds	r24, 0x464E	; 0x80464e <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6b2a:	28 2f       	mov	r18, r24
    6b2c:	30 e0       	ldi	r19, 0x00	; 0
    6b2e:	42 e3       	ldi	r20, 0x32	; 50
    6b30:	42 9f       	mul	r20, r18
    6b32:	f0 01       	movw	r30, r0
    6b34:	43 9f       	mul	r20, r19
    6b36:	f0 0d       	add	r31, r0
    6b38:	11 24       	eor	r1, r1
    6b3a:	ec 52       	subi	r30, 0x2C	; 44
    6b3c:	f9 4b       	sbci	r31, 0xB9	; 185
    6b3e:	40 81       	ld	r20, Z
    6b40:	44 23       	and	r20, r20
    6b42:	59 f0       	breq	.+22     	; 0x6b5a <_Z19nextEmptyLBTxBufferv+0x36>
    6b44:	9f 5f       	subi	r25, 0xFF	; 255
    6b46:	94 30       	cpi	r25, 0x04	; 4
    6b48:	50 f4       	brcc	.+20     	; 0x6b5e <_Z19nextEmptyLBTxBufferv+0x3a>
    6b4a:	8f 5f       	subi	r24, 0xFF	; 255
    6b4c:	80 93 4e 46 	sts	0x464E, r24	; 0x80464e <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6b50:	84 30       	cpi	r24, 0x04	; 4
    6b52:	48 f3       	brcs	.-46     	; 0x6b26 <_Z19nextEmptyLBTxBufferv+0x2>
    6b54:	10 92 4e 46 	sts	0x464E, r1	; 0x80464e <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6b58:	e6 cf       	rjmp	.-52     	; 0x6b26 <_Z19nextEmptyLBTxBufferv+0x2>
    6b5a:	81 e0       	ldi	r24, 0x01	; 1
    6b5c:	01 c0       	rjmp	.+2      	; 0x6b60 <_Z19nextEmptyLBTxBufferv+0x3c>
    6b5e:	80 e0       	ldi	r24, 0x00	; 0
    6b60:	88 23       	and	r24, r24
    6b62:	49 f0       	breq	.+18     	; 0x6b76 <_Z19nextEmptyLBTxBufferv+0x52>
    6b64:	42 e3       	ldi	r20, 0x32	; 50
    6b66:	42 9f       	mul	r20, r18
    6b68:	c0 01       	movw	r24, r0
    6b6a:	43 9f       	mul	r20, r19
    6b6c:	90 0d       	add	r25, r0
    6b6e:	11 24       	eor	r1, r1
    6b70:	8c 52       	subi	r24, 0x2C	; 44
    6b72:	99 4b       	sbci	r25, 0xB9	; 185
    6b74:	08 95       	ret
    6b76:	80 e0       	ldi	r24, 0x00	; 0
    6b78:	90 e0       	ldi	r25, 0x00	; 0
    6b7a:	08 95       	ret

00006b7c <_Z19nextEmptyLBRxBufferv>:
    6b7c:	90 e0       	ldi	r25, 0x00	; 0
    6b7e:	80 91 4d 46 	lds	r24, 0x464D	; 0x80464d <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6b82:	28 2f       	mov	r18, r24
    6b84:	30 e0       	ldi	r19, 0x00	; 0
    6b86:	42 e4       	ldi	r20, 0x42	; 66
    6b88:	42 9f       	mul	r20, r18
    6b8a:	f0 01       	movw	r30, r0
    6b8c:	43 9f       	mul	r20, r19
    6b8e:	f0 0d       	add	r31, r0
    6b90:	11 24       	eor	r1, r1
    6b92:	e0 5b       	subi	r30, 0xB0	; 176
    6b94:	f9 4b       	sbci	r31, 0xB9	; 185
    6b96:	41 81       	ldd	r20, Z+1	; 0x01
    6b98:	52 81       	ldd	r21, Z+2	; 0x02
    6b9a:	45 2b       	or	r20, r21
    6b9c:	59 f0       	breq	.+22     	; 0x6bb4 <_Z19nextEmptyLBRxBufferv+0x38>
    6b9e:	9f 5f       	subi	r25, 0xFF	; 255
    6ba0:	92 30       	cpi	r25, 0x02	; 2
    6ba2:	50 f4       	brcc	.+20     	; 0x6bb8 <_Z19nextEmptyLBRxBufferv+0x3c>
    6ba4:	8f 5f       	subi	r24, 0xFF	; 255
    6ba6:	80 93 4d 46 	sts	0x464D, r24	; 0x80464d <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6baa:	82 30       	cpi	r24, 0x02	; 2
    6bac:	40 f3       	brcs	.-48     	; 0x6b7e <_Z19nextEmptyLBRxBufferv+0x2>
    6bae:	10 92 4d 46 	sts	0x464D, r1	; 0x80464d <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6bb2:	e5 cf       	rjmp	.-54     	; 0x6b7e <_Z19nextEmptyLBRxBufferv+0x2>
    6bb4:	81 e0       	ldi	r24, 0x01	; 1
    6bb6:	01 c0       	rjmp	.+2      	; 0x6bba <_Z19nextEmptyLBRxBufferv+0x3e>
    6bb8:	80 e0       	ldi	r24, 0x00	; 0
    6bba:	88 23       	and	r24, r24
    6bbc:	49 f0       	breq	.+18     	; 0x6bd0 <_Z19nextEmptyLBRxBufferv+0x54>
    6bbe:	42 e4       	ldi	r20, 0x42	; 66
    6bc0:	42 9f       	mul	r20, r18
    6bc2:	c0 01       	movw	r24, r0
    6bc4:	43 9f       	mul	r20, r19
    6bc6:	90 0d       	add	r25, r0
    6bc8:	11 24       	eor	r1, r1
    6bca:	80 5b       	subi	r24, 0xB0	; 176
    6bcc:	99 4b       	sbci	r25, 0xB9	; 185
    6bce:	08 95       	ret
    6bd0:	80 e0       	ldi	r24, 0x00	; 0
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
    6bd4:	08 95       	ret

00006bd6 <_Z18nextFullLBRxBufferv>:
    6bd6:	90 e0       	ldi	r25, 0x00	; 0
    6bd8:	80 91 4c 46 	lds	r24, 0x464C	; 0x80464c <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6bdc:	28 2f       	mov	r18, r24
    6bde:	30 e0       	ldi	r19, 0x00	; 0
    6be0:	42 e4       	ldi	r20, 0x42	; 66
    6be2:	42 9f       	mul	r20, r18
    6be4:	f0 01       	movw	r30, r0
    6be6:	43 9f       	mul	r20, r19
    6be8:	f0 0d       	add	r31, r0
    6bea:	11 24       	eor	r1, r1
    6bec:	e0 5b       	subi	r30, 0xB0	; 176
    6bee:	f9 4b       	sbci	r31, 0xB9	; 185
    6bf0:	41 81       	ldd	r20, Z+1	; 0x01
    6bf2:	52 81       	ldd	r21, Z+2	; 0x02
    6bf4:	45 2b       	or	r20, r21
    6bf6:	59 f4       	brne	.+22     	; 0x6c0e <_Z18nextFullLBRxBufferv+0x38>
    6bf8:	9f 5f       	subi	r25, 0xFF	; 255
    6bfa:	92 30       	cpi	r25, 0x02	; 2
    6bfc:	50 f4       	brcc	.+20     	; 0x6c12 <_Z18nextFullLBRxBufferv+0x3c>
    6bfe:	8f 5f       	subi	r24, 0xFF	; 255
    6c00:	80 93 4c 46 	sts	0x464C, r24	; 0x80464c <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6c04:	82 30       	cpi	r24, 0x02	; 2
    6c06:	40 f3       	brcs	.-48     	; 0x6bd8 <_Z18nextFullLBRxBufferv+0x2>
    6c08:	10 92 4c 46 	sts	0x464C, r1	; 0x80464c <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6c0c:	e5 cf       	rjmp	.-54     	; 0x6bd8 <_Z18nextFullLBRxBufferv+0x2>
    6c0e:	81 e0       	ldi	r24, 0x01	; 1
    6c10:	01 c0       	rjmp	.+2      	; 0x6c14 <_Z18nextFullLBRxBufferv+0x3e>
    6c12:	80 e0       	ldi	r24, 0x00	; 0
    6c14:	88 23       	and	r24, r24
    6c16:	49 f0       	breq	.+18     	; 0x6c2a <_Z18nextFullLBRxBufferv+0x54>
    6c18:	42 e4       	ldi	r20, 0x42	; 66
    6c1a:	42 9f       	mul	r20, r18
    6c1c:	c0 01       	movw	r24, r0
    6c1e:	43 9f       	mul	r20, r19
    6c20:	90 0d       	add	r25, r0
    6c22:	11 24       	eor	r1, r1
    6c24:	80 5b       	subi	r24, 0xB0	; 176
    6c26:	99 4b       	sbci	r25, 0xB9	; 185
    6c28:	08 95       	ret
    6c2a:	80 e0       	ldi	r24, 0x00	; 0
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	08 95       	ret

00006c30 <_Z19linkbusTxInProgressv>:
    6c30:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <_ZL17linkbus_tx_active>
    6c34:	08 95       	ret

00006c36 <_Z14linkbus_end_txv>:
    6c36:	80 91 9c 47 	lds	r24, 0x479C	; 0x80479c <_ZL17linkbus_tx_active>
    6c3a:	88 23       	and	r24, r24
    6c3c:	89 f0       	breq	.+34     	; 0x6c60 <_Z14linkbus_end_txv+0x2a>
    6c3e:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6c42:	81 11       	cpse	r24, r1
    6c44:	06 c0       	rjmp	.+12     	; 0x6c52 <_Z14linkbus_end_txv+0x1c>
    6c46:	e0 e8       	ldi	r30, 0x80	; 128
    6c48:	f8 e0       	ldi	r31, 0x08	; 8
    6c4a:	85 81       	ldd	r24, Z+5	; 0x05
    6c4c:	8f 7d       	andi	r24, 0xDF	; 223
    6c4e:	85 83       	std	Z+5, r24	; 0x05
    6c50:	05 c0       	rjmp	.+10     	; 0x6c5c <_Z14linkbus_end_txv+0x26>
    6c52:	e0 e2       	ldi	r30, 0x20	; 32
    6c54:	f8 e0       	ldi	r31, 0x08	; 8
    6c56:	85 81       	ldd	r24, Z+5	; 0x05
    6c58:	8f 7d       	andi	r24, 0xDF	; 223
    6c5a:	85 83       	std	Z+5, r24	; 0x05
    6c5c:	10 92 9c 47 	sts	0x479C, r1	; 0x80479c <_ZL17linkbus_tx_active>
    6c60:	08 95       	ret

00006c62 <_Z16linkbus_reset_rxv>:
    6c62:	cf 93       	push	r28
    6c64:	df 93       	push	r29
    6c66:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6c6a:	81 11       	cpse	r24, r1
    6c6c:	14 c0       	rjmp	.+40     	; 0x6c96 <_Z16linkbus_reset_rxv+0x34>
    6c6e:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <__TEXT_REGION_LENGTH__+0x7e0886>
    6c72:	88 23       	and	r24, r24
    6c74:	1c f5       	brge	.+70     	; 0x6cbc <_Z16linkbus_reset_rxv+0x5a>
    6c76:	e0 e8       	ldi	r30, 0x80	; 128
    6c78:	f8 e0       	ldi	r31, 0x08	; 8
    6c7a:	86 81       	ldd	r24, Z+6	; 0x06
    6c7c:	8f 77       	andi	r24, 0x7F	; 127
    6c7e:	86 83       	std	Z+6, r24	; 0x06
    6c80:	84 e8       	ldi	r24, 0x84	; 132
    6c82:	a0 e5       	ldi	r26, 0x50	; 80
    6c84:	b6 e4       	ldi	r27, 0x46	; 70
    6c86:	ed 01       	movw	r28, r26
    6c88:	19 92       	st	Y+, r1
    6c8a:	8a 95       	dec	r24
    6c8c:	e9 f7       	brne	.-6      	; 0x6c88 <_Z16linkbus_reset_rxv+0x26>
    6c8e:	86 81       	ldd	r24, Z+6	; 0x06
    6c90:	80 68       	ori	r24, 0x80	; 128
    6c92:	86 83       	std	Z+6, r24	; 0x06
    6c94:	13 c0       	rjmp	.+38     	; 0x6cbc <_Z16linkbus_reset_rxv+0x5a>
    6c96:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    6c9a:	88 23       	and	r24, r24
    6c9c:	7c f4       	brge	.+30     	; 0x6cbc <_Z16linkbus_reset_rxv+0x5a>
    6c9e:	e0 e2       	ldi	r30, 0x20	; 32
    6ca0:	f8 e0       	ldi	r31, 0x08	; 8
    6ca2:	86 81       	ldd	r24, Z+6	; 0x06
    6ca4:	8f 77       	andi	r24, 0x7F	; 127
    6ca6:	86 83       	std	Z+6, r24	; 0x06
    6ca8:	84 e8       	ldi	r24, 0x84	; 132
    6caa:	a0 e5       	ldi	r26, 0x50	; 80
    6cac:	b6 e4       	ldi	r27, 0x46	; 70
    6cae:	ed 01       	movw	r28, r26
    6cb0:	19 92       	st	Y+, r1
    6cb2:	8a 95       	dec	r24
    6cb4:	e9 f7       	brne	.-6      	; 0x6cb0 <_Z16linkbus_reset_rxv+0x4e>
    6cb6:	86 81       	ldd	r24, Z+6	; 0x06
    6cb8:	80 68       	ori	r24, 0x80	; 128
    6cba:	86 83       	std	Z+6, r24	; 0x06
    6cbc:	df 91       	pop	r29
    6cbe:	cf 91       	pop	r28
    6cc0:	08 95       	ret

00006cc2 <_Z12linkbus_initm14USART_Number_t>:
    6cc2:	cf 92       	push	r12
    6cc4:	df 92       	push	r13
    6cc6:	ef 92       	push	r14
    6cc8:	ff 92       	push	r15
    6cca:	cf 93       	push	r28
    6ccc:	6b 01       	movw	r12, r22
    6cce:	7c 01       	movw	r14, r24
    6cd0:	84 e8       	ldi	r24, 0x84	; 132
    6cd2:	e0 e5       	ldi	r30, 0x50	; 80
    6cd4:	f6 e4       	ldi	r31, 0x46	; 70
    6cd6:	df 01       	movw	r26, r30
    6cd8:	1d 92       	st	X+, r1
    6cda:	8a 95       	dec	r24
    6cdc:	e9 f7       	brne	.-6      	; 0x6cd8 <_Z12linkbus_initm14USART_Number_t+0x16>
    6cde:	80 e0       	ldi	r24, 0x00	; 0
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	84 30       	cpi	r24, 0x04	; 4
    6ce4:	91 05       	cpc	r25, r1
    6ce6:	5c f4       	brge	.+22     	; 0x6cfe <_Z12linkbus_initm14USART_Number_t+0x3c>
    6ce8:	22 e3       	ldi	r18, 0x32	; 50
    6cea:	28 9f       	mul	r18, r24
    6cec:	f0 01       	movw	r30, r0
    6cee:	29 9f       	mul	r18, r25
    6cf0:	f0 0d       	add	r31, r0
    6cf2:	11 24       	eor	r1, r1
    6cf4:	ec 52       	subi	r30, 0x2C	; 44
    6cf6:	f9 4b       	sbci	r31, 0xB9	; 185
    6cf8:	10 82       	st	Z, r1
    6cfa:	01 96       	adiw	r24, 0x01	; 1
    6cfc:	f2 cf       	rjmp	.-28     	; 0x6ce2 <_Z12linkbus_initm14USART_Number_t+0x20>
    6cfe:	46 30       	cpi	r20, 0x06	; 6
    6d00:	21 f4       	brne	.+8      	; 0x6d0a <_Z12linkbus_initm14USART_Number_t+0x48>
    6d02:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6d06:	87 30       	cpi	r24, 0x07	; 7
    6d08:	61 f4       	brne	.+24     	; 0x6d22 <_Z12linkbus_initm14USART_Number_t+0x60>
    6d0a:	c4 2f       	mov	r28, r20
    6d0c:	c7 01       	movw	r24, r14
    6d0e:	b6 01       	movw	r22, r12
    6d10:	41 11       	cpse	r20, r1
    6d12:	03 c0       	rjmp	.+6      	; 0x6d1a <_Z12linkbus_initm14USART_Number_t+0x58>
    6d14:	0e 94 30 35 	call	0x6a60	; 0x6a60 <_ZL21USART4_initializationm>
    6d18:	02 c0       	rjmp	.+4      	; 0x6d1e <_Z12linkbus_initm14USART_Number_t+0x5c>
    6d1a:	0e 94 41 35 	call	0x6a82	; 0x6a82 <_ZL21USART1_initializationm>
    6d1e:	c0 93 22 40 	sts	0x4022, r28	; 0x804022 <g_linkbus_usart_number>
    6d22:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <_ZL14g_bus_disabled>
    6d26:	cf 91       	pop	r28
    6d28:	ff 90       	pop	r15
    6d2a:	ef 90       	pop	r14
    6d2c:	df 90       	pop	r13
    6d2e:	cf 90       	pop	r12
    6d30:	08 95       	ret

00006d32 <_Z15linkbus_disablev>:
    6d32:	81 e0       	ldi	r24, 0x01	; 1
    6d34:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZL14g_bus_disabled>
    6d38:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6d3c:	84 30       	cpi	r24, 0x04	; 4
    6d3e:	19 f4       	brne	.+6      	; 0x6d46 <_Z15linkbus_disablev+0x14>
    6d40:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <USART4_disable>
    6d44:	02 c0       	rjmp	.+4      	; 0x6d4a <_Z15linkbus_disablev+0x18>
    6d46:	0e 94 d6 45 	call	0x8bac	; 0x8bac <USART1_disable>
    6d4a:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <_Z14linkbus_end_txv>
    6d4e:	84 e8       	ldi	r24, 0x84	; 132
    6d50:	e0 e5       	ldi	r30, 0x50	; 80
    6d52:	f6 e4       	ldi	r31, 0x46	; 70
    6d54:	df 01       	movw	r26, r30
    6d56:	1d 92       	st	X+, r1
    6d58:	8a 95       	dec	r24
    6d5a:	e9 f7       	brne	.-6      	; 0x6d56 <_Z15linkbus_disablev+0x24>
    6d5c:	80 e0       	ldi	r24, 0x00	; 0
    6d5e:	84 30       	cpi	r24, 0x04	; 4
    6d60:	48 f4       	brcc	.+18     	; 0x6d74 <_Z15linkbus_disablev+0x42>
    6d62:	b2 e3       	ldi	r27, 0x32	; 50
    6d64:	8b 9f       	mul	r24, r27
    6d66:	f0 01       	movw	r30, r0
    6d68:	11 24       	eor	r1, r1
    6d6a:	ec 52       	subi	r30, 0x2C	; 44
    6d6c:	f9 4b       	sbci	r31, 0xB9	; 185
    6d6e:	10 82       	st	Z, r1
    6d70:	8f 5f       	subi	r24, 0xFF	; 255
    6d72:	f5 cf       	rjmp	.-22     	; 0x6d5e <_Z15linkbus_disablev+0x2c>
    6d74:	08 95       	ret

00006d76 <_Z12lb_send_textPc>:
    6d76:	ef 92       	push	r14
    6d78:	ff 92       	push	r15
    6d7a:	1f 93       	push	r17
    6d7c:	cf 93       	push	r28
    6d7e:	df 93       	push	r29
    6d80:	10 91 23 40 	lds	r17, 0x4023	; 0x804023 <_ZL14g_bus_disabled>
    6d84:	11 11       	cpse	r17, r1
    6d86:	2d c0       	rjmp	.+90     	; 0x6de2 <_Z12lb_send_textPc+0x6c>
    6d88:	00 97       	sbiw	r24, 0x00	; 0
    6d8a:	69 f1       	breq	.+90     	; 0x6de6 <_Z12lb_send_textPc+0x70>
    6d8c:	7c 01       	movw	r14, r24
    6d8e:	0e 94 92 35 	call	0x6b24	; 0x6b24 <_Z19nextEmptyLBTxBufferv>
    6d92:	c8 ec       	ldi	r28, 0xC8	; 200
    6d94:	d0 e0       	ldi	r29, 0x00	; 0
    6d96:	00 97       	sbiw	r24, 0x00	; 0
    6d98:	a1 f4       	brne	.+40     	; 0x6dc2 <_Z12lb_send_textPc+0x4c>
    6d9a:	20 97       	sbiw	r28, 0x00	; 0
    6d9c:	91 f0       	breq	.+36     	; 0x6dc2 <_Z12lb_send_textPc+0x4c>
    6d9e:	0e 94 18 36 	call	0x6c30	; 0x6c30 <_Z19linkbusTxInProgressv>
    6da2:	88 23       	and	r24, r24
    6da4:	21 f0       	breq	.+8      	; 0x6dae <_Z12lb_send_textPc+0x38>
    6da6:	20 97       	sbiw	r28, 0x00	; 0
    6da8:	19 f4       	brne	.+6      	; 0x6db0 <_Z12lb_send_textPc+0x3a>
    6daa:	81 2f       	mov	r24, r17
    6dac:	01 c0       	rjmp	.+2      	; 0x6db0 <_Z12lb_send_textPc+0x3a>
    6dae:	81 2f       	mov	r24, r17
    6db0:	88 23       	and	r24, r24
    6db2:	21 f0       	breq	.+8      	; 0x6dbc <_Z12lb_send_textPc+0x46>
    6db4:	20 97       	sbiw	r28, 0x00	; 0
    6db6:	99 f3       	breq	.-26     	; 0x6d9e <_Z12lb_send_textPc+0x28>
    6db8:	21 97       	sbiw	r28, 0x01	; 1
    6dba:	f1 cf       	rjmp	.-30     	; 0x6d9e <_Z12lb_send_textPc+0x28>
    6dbc:	0e 94 92 35 	call	0x6b24	; 0x6b24 <_Z19nextEmptyLBTxBufferv>
    6dc0:	ea cf       	rjmp	.-44     	; 0x6d96 <_Z12lb_send_textPc+0x20>
    6dc2:	00 97       	sbiw	r24, 0x00	; 0
    6dc4:	91 f0       	breq	.+36     	; 0x6dea <_Z12lb_send_textPc+0x74>
    6dc6:	ff 92       	push	r15
    6dc8:	ef 92       	push	r14
    6dca:	9f 93       	push	r25
    6dcc:	8f 93       	push	r24
    6dce:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    6dd2:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <_ZL16linkbus_start_txv>
    6dd6:	0f 90       	pop	r0
    6dd8:	0f 90       	pop	r0
    6dda:	0f 90       	pop	r0
    6ddc:	0f 90       	pop	r0
    6dde:	80 e0       	ldi	r24, 0x00	; 0
    6de0:	05 c0       	rjmp	.+10     	; 0x6dec <_Z12lb_send_textPc+0x76>
    6de2:	81 e0       	ldi	r24, 0x01	; 1
    6de4:	03 c0       	rjmp	.+6      	; 0x6dec <_Z12lb_send_textPc+0x76>
    6de6:	81 e0       	ldi	r24, 0x01	; 1
    6de8:	01 c0       	rjmp	.+2      	; 0x6dec <_Z12lb_send_textPc+0x76>
    6dea:	81 e0       	ldi	r24, 0x01	; 1
    6dec:	df 91       	pop	r29
    6dee:	cf 91       	pop	r28
    6df0:	1f 91       	pop	r17
    6df2:	ff 90       	pop	r15
    6df4:	ef 90       	pop	r14
    6df6:	08 95       	ret

00006df8 <_Z11lb_send_msg13LBMessageTypePKcPc>:
    6df8:	83 30       	cpi	r24, 0x03	; 3
    6dfa:	29 f0       	breq	.+10     	; 0x6e06 <_Z11lb_send_msg13LBMessageTypePKcPc+0xe>
    6dfc:	82 30       	cpi	r24, 0x02	; 2
    6dfe:	31 f0       	breq	.+12     	; 0x6e0c <_Z11lb_send_msg13LBMessageTypePKcPc+0x14>
    6e00:	9b e3       	ldi	r25, 0x3B	; 59
    6e02:	84 e2       	ldi	r24, 0x24	; 36
    6e04:	05 c0       	rjmp	.+10     	; 0x6e10 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    6e06:	9b e3       	ldi	r25, 0x3B	; 59
    6e08:	81 e2       	ldi	r24, 0x21	; 33
    6e0a:	02 c0       	rjmp	.+4      	; 0x6e10 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    6e0c:	9f e3       	ldi	r25, 0x3F	; 63
    6e0e:	84 e2       	ldi	r24, 0x24	; 36
    6e10:	1f 92       	push	r1
    6e12:	9f 93       	push	r25
    6e14:	5f 93       	push	r21
    6e16:	4f 93       	push	r20
    6e18:	7f 93       	push	r23
    6e1a:	6f 93       	push	r22
    6e1c:	1f 92       	push	r1
    6e1e:	8f 93       	push	r24
    6e20:	86 ea       	ldi	r24, 0xA6	; 166
    6e22:	94 e4       	ldi	r25, 0x44	; 68
    6e24:	9f 93       	push	r25
    6e26:	8f 93       	push	r24
    6e28:	8d e9       	ldi	r24, 0x9D	; 157
    6e2a:	97 e4       	ldi	r25, 0x47	; 71
    6e2c:	9f 93       	push	r25
    6e2e:	8f 93       	push	r24
    6e30:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    6e34:	8d e9       	ldi	r24, 0x9D	; 157
    6e36:	97 e4       	ldi	r25, 0x47	; 71
    6e38:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <_Z12lb_send_textPc>
    6e3c:	8d b7       	in	r24, 0x3d	; 61
    6e3e:	9e b7       	in	r25, 0x3e	; 62
    6e40:	0c 96       	adiw	r24, 0x0c	; 12
    6e42:	8d bf       	out	0x3d, r24	; 61
    6e44:	9e bf       	out	0x3e, r25	; 62
    6e46:	08 95       	ret

00006e48 <_Z16lb_broadcast_numjPKc>:
}


void lb_broadcast_num(uint16_t data, const char* str)
{
    6e48:	0f 93       	push	r16
    6e4a:	1f 93       	push	r17
    6e4c:	cf 93       	push	r28
    6e4e:	df 93       	push	r29
    6e50:	cd b7       	in	r28, 0x3d	; 61
    6e52:	de b7       	in	r29, 0x3e	; 62
    6e54:	26 97       	sbiw	r28, 0x06	; 6
    6e56:	cd bf       	out	0x3d, r28	; 61
    6e58:	de bf       	out	0x3e, r29	; 62
    6e5a:	8b 01       	movw	r16, r22
	char t[6] = "\0";
    6e5c:	20 91 49 44 	lds	r18, 0x4449	; 0x804449 <g_80m_power_table+0x412>
    6e60:	30 91 4a 44 	lds	r19, 0x444A	; 0x80444a <g_80m_power_table+0x413>
    6e64:	29 83       	std	Y+1, r18	; 0x01
    6e66:	3a 83       	std	Y+2, r19	; 0x02
    6e68:	fe 01       	movw	r30, r28
    6e6a:	33 96       	adiw	r30, 0x03	; 3
    6e6c:	24 e0       	ldi	r18, 0x04	; 4
    6e6e:	df 01       	movw	r26, r30
    6e70:	1d 92       	st	X+, r1
    6e72:	2a 95       	dec	r18
    6e74:	e9 f7       	brne	.-6      	; 0x6e70 <_Z16lb_broadcast_numjPKc+0x28>

	sprintf(t, "%u", data);
    6e76:	9f 93       	push	r25
    6e78:	8f 93       	push	r24
    6e7a:	86 eb       	ldi	r24, 0xB6	; 182
    6e7c:	94 e4       	ldi	r25, 0x44	; 68
    6e7e:	9f 93       	push	r25
    6e80:	8f 93       	push	r24
    6e82:	ce 01       	movw	r24, r28
    6e84:	01 96       	adiw	r24, 0x01	; 1
    6e86:	9f 93       	push	r25
    6e88:	8f 93       	push	r24
    6e8a:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
	g_tempMsgBuff[0] = '\0';
    6e8e:	10 92 9d 47 	sts	0x479D, r1	; 0x80479d <_ZL13g_tempMsgBuff>

	if(str)
    6e92:	0f 90       	pop	r0
    6e94:	0f 90       	pop	r0
    6e96:	0f 90       	pop	r0
    6e98:	0f 90       	pop	r0
    6e9a:	0f 90       	pop	r0
    6e9c:	0f 90       	pop	r0
    6e9e:	01 15       	cp	r16, r1
    6ea0:	11 05       	cpc	r17, r1
    6ea2:	91 f0       	breq	.+36     	; 0x6ec8 <_Z16lb_broadcast_numjPKc+0x80>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
    6ea4:	ce 01       	movw	r24, r28
    6ea6:	01 96       	adiw	r24, 0x01	; 1
    6ea8:	9f 93       	push	r25
    6eaa:	8f 93       	push	r24
    6eac:	1f 93       	push	r17
    6eae:	0f 93       	push	r16
    6eb0:	89 eb       	ldi	r24, 0xB9	; 185
    6eb2:	94 e4       	ldi	r25, 0x44	; 68
    6eb4:	9f 93       	push	r25
    6eb6:	8f 93       	push	r24
    6eb8:	8d e9       	ldi	r24, 0x9D	; 157
    6eba:	97 e4       	ldi	r25, 0x47	; 71
    6ebc:	9f 93       	push	r25
    6ebe:	8f 93       	push	r24
    6ec0:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>
    6ec4:	cd bf       	out	0x3d, r28	; 61
    6ec6:	de bf       	out	0x3e, r29	; 62
	}

	if(g_tempMsgBuff[0]) lb_send_text(g_tempMsgBuff);
    6ec8:	80 91 9d 47 	lds	r24, 0x479D	; 0x80479d <_ZL13g_tempMsgBuff>
    6ecc:	88 23       	and	r24, r24
    6ece:	21 f0       	breq	.+8      	; 0x6ed8 <_Z16lb_broadcast_numjPKc+0x90>
    6ed0:	8d e9       	ldi	r24, 0x9D	; 157
    6ed2:	97 e4       	ldi	r25, 0x47	; 71
    6ed4:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <_Z12lb_send_textPc>
}
    6ed8:	26 96       	adiw	r28, 0x06	; 6
    6eda:	cd bf       	out	0x3d, r28	; 61
    6edc:	de bf       	out	0x3e, r29	; 62
    6ede:	df 91       	pop	r29
    6ee0:	cf 91       	pop	r28
    6ee2:	1f 91       	pop	r17
    6ee4:	0f 91       	pop	r16
    6ee6:	08 95       	ret

00006ee8 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    6ee8:	90 e0       	ldi	r25, 0x00	; 0
    6eea:	fc 01       	movw	r30, r24
    6eec:	b0 97       	sbiw	r30, 0x20	; 32
    6eee:	ed 35       	cpi	r30, 0x5D	; 93
    6ef0:	f1 05       	cpc	r31, r1
    6ef2:	08 f0       	brcs	.+2      	; 0x6ef6 <_Z12getMorseCharc+0xe>
    6ef4:	e8 c0       	rjmp	.+464    	; 0x70c6 <_Z12getMorseCharc+0x1de>
    6ef6:	e7 54       	subi	r30, 0x47	; 71
    6ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    6efa:	0c 94 e8 48 	jmp	0x91d0	; 0x91d0 <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6efe:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    6f00:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    6f02:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    6f04:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6f06:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    6f08:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6f0a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f0c:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    6f0e:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    6f10:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6f12:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f14:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6f16:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    6f18:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    6f1a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6f1c:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6f1e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    6f20:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    6f22:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    6f24:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    6f26:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    6f28:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6f2a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f2c:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6f2e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    6f30:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    6f32:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f34:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6f36:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    6f38:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    6f3a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6f3c:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6f3e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    6f40:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    6f42:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    6f44:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    6f46:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    6f48:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    6f4a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6f4c:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    6f4e:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    6f50:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    6f52:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f54:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6f56:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    6f58:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6f5a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f5c:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6f5e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    6f60:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    6f62:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6f64:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6f66:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    6f68:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    6f6a:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    6f6c:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    6f6e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    6f70:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    6f72:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f74:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    6f76:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    6f78:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6f7a:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f7c:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    6f7e:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    6f80:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    6f82:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6f84:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6f86:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    6f88:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    6f8a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6f8c:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6f8e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    6f90:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    6f92:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    6f94:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6f96:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    6f98:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    6f9a:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    6f9c:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    6f9e:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    6fa0:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    6fa2:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6fa4:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    6fa6:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    6fa8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6faa:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6fac:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    6fae:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    6fb0:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    6fb2:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6fb4:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    6fb6:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    6fb8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6fba:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6fbc:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    6fbe:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    6fc0:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    6fc2:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6fc4:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6fc6:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    6fc8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6fca:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6fcc:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    6fce:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    6fd0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    6fd2:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    6fd4:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    6fd6:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    6fd8:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    6fda:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6fdc:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    6fde:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    6fe0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    6fe2:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    6fe4:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    6fe6:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    6fe8:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    6fea:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6fec:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    6fee:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    6ff0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    6ff2:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6ff4:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6ff6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    6ff8:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    6ffa:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6ffc:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6ffe:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    7000:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    7002:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7004:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    7006:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    7008:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    700a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    700c:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    700e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    7010:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    7012:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7014:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    7016:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    7018:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    701a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    701c:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    701e:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    7020:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    7022:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7024:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    7026:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    7028:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    702a:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    702c:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    702e:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    7030:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    7032:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7034:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    7036:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    7038:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    703a:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    703c:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    703e:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    7040:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    7042:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7044:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    7046:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    7048:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    704a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    704c:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    704e:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    7050:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    7052:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7054:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    7056:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    7058:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    705a:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    705c:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    705e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    7060:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    7062:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7064:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    7066:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    7068:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    706a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    706c:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    706e:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    7070:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    7072:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    7074:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    7076:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    7078:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    707a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    707c:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    707e:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    7080:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    7082:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7084:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    7086:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    7088:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    708a:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    708c:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    708e:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    7090:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    7092:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7094:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    7096:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    7098:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    709a:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    709c:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    709e:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    70a0:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    70a2:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    70a4:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    70a6:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    70a8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    70aa:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    70ac:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    70ae:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    70b0:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    70b2:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    70b4:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    70b6:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    70b8:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    70ba:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    70bc:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    70be:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    70c0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    70c2:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    70c4:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    70c6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    70c8:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    70ca:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    70cc:	08 95       	ret

000070ce <_Z9makeMorsePcPbS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a bool indicating whether a CW carrier should be sent
 *  Pass in a pointer to a bool in the second and third arguments:
 */
bool makeMorse(char* s, bool* repeating, bool* finished)
{
    70ce:	cf 93       	push	r28
    70d0:	df 93       	push	r29
    70d2:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static bool completedString = false;
	static bool carrierOn = false;
	static bool holdKeyDown = false;

	if(s)   /* load a new NULL-terminated string to send */
    70d4:	00 97       	sbiw	r24, 0x00	; 0
    70d6:	b1 f1       	breq	.+108    	; 0x7144 <_Z9makeMorsePcPbS0_+0x76>
	{
		holdKeyDown = false;
    70d8:	10 92 da 47 	sts	0x47DA, r1	; 0x8047da <_ZZ9makeMorsePcPbS0_E11holdKeyDown>

		if(repeating)
    70dc:	61 15       	cp	r22, r1
    70de:	71 05       	cpc	r23, r1
    70e0:	21 f0       	breq	.+8      	; 0x70ea <_Z9makeMorsePcPbS0_+0x1c>
		{
			repeat = *repeating;
    70e2:	db 01       	movw	r26, r22
    70e4:	2c 91       	ld	r18, X
    70e6:	20 93 25 40 	sts	0x4025, r18	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
		}

		if(*s)
    70ea:	fc 01       	movw	r30, r24
    70ec:	20 81       	ld	r18, Z
    70ee:	22 23       	and	r18, r18
    70f0:	d9 f0       	breq	.+54     	; 0x7128 <_Z9makeMorsePcPbS0_+0x5a>
		{
			str = s;
    70f2:	80 93 d8 47 	sts	0x47D8, r24	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E3str>
    70f6:	90 93 d9 47 	sts	0x47D9, r25	; 0x8047d9 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			c = ' ';
    70fa:	80 e2       	ldi	r24, 0x20	; 32
    70fc:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
			morseInProgress = getMorseChar(*str);
    7100:	82 2f       	mov	r24, r18
    7102:	0e 94 74 37 	call	0x6ee8	; 0x6ee8 <_Z12getMorseCharc>
    7106:	60 93 d5 47 	sts	0x47D5, r22	; 0x8047d5 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    710a:	70 93 d6 47 	sts	0x47D6, r23	; 0x8047d6 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    710e:	80 93 d7 47 	sts	0x47D7, r24	; 0x8047d7 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
			charIndex = 0;
    7112:	10 92 d4 47 	sts	0x47D4, r1	; 0x8047d4 <_ZZ9makeMorsePcPbS0_E9charIndex>
			symbolIndex = 0;
    7116:	10 92 d3 47 	sts	0x47D3, r1	; 0x8047d3 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			elementIndex = 0;
    711a:	10 92 d2 47 	sts	0x47D2, r1	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E12elementIndex>
			addedSpace = 0;
    711e:	10 92 d1 47 	sts	0x47D1, r1	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E10addedSpace>
			completedString = false;
    7122:	10 92 d0 47 	sts	0x47D0, r1	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E15completedString>
    7126:	0a c0       	rjmp	.+20     	; 0x713c <_Z9makeMorsePcPbS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    7128:	10 92 d8 47 	sts	0x47D8, r1	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E3str>
    712c:	10 92 d9 47 	sts	0x47D9, r1	; 0x8047d9 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			completedString = true;
    7130:	81 e0       	ldi	r24, 0x01	; 1
    7132:	80 93 d0 47 	sts	0x47D0, r24	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E15completedString>
			if(finished)
    7136:	20 97       	sbiw	r28, 0x00	; 0
    7138:	09 f0       	breq	.+2      	; 0x713c <_Z9makeMorsePcPbS0_+0x6e>
			{
				*finished = true;
    713a:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    713c:	10 92 cf 47 	sts	0x47CF, r1	; 0x8047cf <_ZZ9makeMorsePcPbS0_E9carrierOn>
		return( OFF);
    7140:	80 e0       	ldi	r24, 0x00	; 0
    7142:	b8 c0       	rjmp	.+368    	; 0x72b4 <_Z9makeMorsePcPbS0_+0x1e6>
	}
	else if(str)
    7144:	e0 91 d8 47 	lds	r30, 0x47D8	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E3str>
    7148:	f0 91 d9 47 	lds	r31, 0x47D9	; 0x8047d9 <_ZZ9makeMorsePcPbS0_E3str+0x1>
    714c:	30 97       	sbiw	r30, 0x00	; 0
    714e:	09 f4       	brne	.+2      	; 0x7152 <_Z9makeMorsePcPbS0_+0x84>
    7150:	a4 c0       	rjmp	.+328    	; 0x729a <_Z9makeMorsePcPbS0_+0x1cc>
	{
		if(repeating)
    7152:	61 15       	cp	r22, r1
    7154:	71 05       	cpc	r23, r1
    7156:	21 f0       	breq	.+8      	; 0x7160 <_Z9makeMorsePcPbS0_+0x92>
		{
			*repeating = repeat;
    7158:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    715c:	db 01       	movw	r26, r22
    715e:	8c 93       	st	X, r24
		}

		if(completedString)
    7160:	80 91 d0 47 	lds	r24, 0x47D0	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E15completedString>
    7164:	88 23       	and	r24, r24
    7166:	49 f0       	breq	.+18     	; 0x717a <_Z9makeMorsePcPbS0_+0xac>
		{
			if(finished)
    7168:	20 97       	sbiw	r28, 0x00	; 0
    716a:	09 f4       	brne	.+2      	; 0x716e <_Z9makeMorsePcPbS0_+0xa0>
    716c:	a2 c0       	rjmp	.+324    	; 0x72b2 <_Z9makeMorsePcPbS0_+0x1e4>
			{
				*finished = true;
    716e:	81 e0       	ldi	r24, 0x01	; 1
    7170:	88 83       	st	Y, r24
				holdKeyDown = false;
    7172:	10 92 da 47 	sts	0x47DA, r1	; 0x8047da <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
			}
			return( OFF);
    7176:	80 e0       	ldi	r24, 0x00	; 0
    7178:	9d c0       	rjmp	.+314    	; 0x72b4 <_Z9makeMorsePcPbS0_+0x1e6>
		}

		if(elementIndex)
    717a:	80 91 d2 47 	lds	r24, 0x47D2	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    717e:	88 23       	and	r24, r24
    7180:	21 f0       	breq	.+8      	; 0x718a <_Z9makeMorsePcPbS0_+0xbc>
		{
			elementIndex--;
    7182:	81 50       	subi	r24, 0x01	; 1
    7184:	80 93 d2 47 	sts	0x47D2, r24	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7188:	7e c0       	rjmp	.+252    	; 0x7286 <_Z9makeMorsePcPbS0_+0x1b8>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    718a:	80 91 cf 47 	lds	r24, 0x47CF	; 0x8047cf <_ZZ9makeMorsePcPbS0_E9carrierOn>
    718e:	88 23       	and	r24, r24
    7190:	81 f0       	breq	.+32     	; 0x71b2 <_Z9makeMorsePcPbS0_+0xe4>
    7192:	80 91 da 47 	lds	r24, 0x47DA	; 0x8047da <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    7196:	81 11       	cpse	r24, r1
    7198:	0c c0       	rjmp	.+24     	; 0x71b2 <_Z9makeMorsePcPbS0_+0xe4>
		{
			carrierOn = false;
    719a:	10 92 cf 47 	sts	0x47CF, r1	; 0x8047cf <_ZZ9makeMorsePcPbS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    719e:	80 91 d1 47 	lds	r24, 0x47D1	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E10addedSpace>
    71a2:	88 23       	and	r24, r24
    71a4:	09 f4       	brne	.+2      	; 0x71a8 <_Z9makeMorsePcPbS0_+0xda>
    71a6:	6f c0       	rjmp	.+222    	; 0x7286 <_Z9makeMorsePcPbS0_+0x1b8>
			{
				elementIndex = addedSpace;
    71a8:	80 93 d2 47 	sts	0x47D2, r24	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				addedSpace = 0;
    71ac:	10 92 d1 47 	sts	0x47D1, r1	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E10addedSpace>
    71b0:	6a c0       	rjmp	.+212    	; 0x7286 <_Z9makeMorsePcPbS0_+0x1b8>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    71b2:	90 91 d6 47 	lds	r25, 0x47D6	; 0x8047d6 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    71b6:	80 91 d3 47 	lds	r24, 0x47D3	; 0x8047d3 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    71ba:	89 17       	cp	r24, r25
    71bc:	90 f1       	brcs	.+100    	; 0x7222 <_Z9makeMorsePcPbS0_+0x154>
			{
				c = (*(str + ++charIndex));
    71be:	80 91 d4 47 	lds	r24, 0x47D4	; 0x8047d4 <_ZZ9makeMorsePcPbS0_E9charIndex>
    71c2:	8f 5f       	subi	r24, 0xFF	; 255
    71c4:	80 93 d4 47 	sts	0x47D4, r24	; 0x8047d4 <_ZZ9makeMorsePcPbS0_E9charIndex>
    71c8:	df 01       	movw	r26, r30
    71ca:	a8 0f       	add	r26, r24
    71cc:	b1 1d       	adc	r27, r1
    71ce:	8c 91       	ld	r24, X
    71d0:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>

				if(!c)  /* wrap to beginning of text */
    71d4:	81 11       	cpse	r24, r1
    71d6:	19 c0       	rjmp	.+50     	; 0x720a <_Z9makeMorsePcPbS0_+0x13c>
				{
					if(repeat)
    71d8:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    71dc:	88 23       	and	r24, r24
    71de:	31 f0       	breq	.+12     	; 0x71ec <_Z9makeMorsePcPbS0_+0x11e>
					{
						c = *str;
    71e0:	80 81       	ld	r24, Z
    71e2:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
						charIndex = 0;
    71e6:	10 92 d4 47 	sts	0x47D4, r1	; 0x8047d4 <_ZZ9makeMorsePcPbS0_E9charIndex>
    71ea:	0f c0       	rjmp	.+30     	; 0x720a <_Z9makeMorsePcPbS0_+0x13c>
					}
					else
					{
						str = NULL;
    71ec:	10 92 d8 47 	sts	0x47D8, r1	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E3str>
    71f0:	10 92 d9 47 	sts	0x47D9, r1	; 0x8047d9 <_ZZ9makeMorsePcPbS0_E3str+0x1>
						carrierOn = OFF;
    71f4:	10 92 cf 47 	sts	0x47CF, r1	; 0x8047cf <_ZZ9makeMorsePcPbS0_E9carrierOn>
						completedString = true;
    71f8:	91 e0       	ldi	r25, 0x01	; 1
    71fa:	90 93 d0 47 	sts	0x47D0, r25	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E15completedString>
						if(finished)
    71fe:	20 97       	sbiw	r28, 0x00	; 0
    7200:	09 f0       	breq	.+2      	; 0x7204 <_Z9makeMorsePcPbS0_+0x136>
						{
							*finished = true;
    7202:	98 83       	st	Y, r25
						}
						holdKeyDown = false;
    7204:	10 92 da 47 	sts	0x47DA, r1	; 0x8047da <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
						return( OFF );
    7208:	55 c0       	rjmp	.+170    	; 0x72b4 <_Z9makeMorsePcPbS0_+0x1e6>
					}
				}

				morseInProgress = getMorseChar(c);
    720a:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    720e:	0e 94 74 37 	call	0x6ee8	; 0x6ee8 <_Z12getMorseCharc>
    7212:	60 93 d5 47 	sts	0x47D5, r22	; 0x8047d5 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    7216:	70 93 d6 47 	sts	0x47D6, r23	; 0x8047d6 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    721a:	80 93 d7 47 	sts	0x47D7, r24	; 0x8047d7 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    721e:	10 92 d3 47 	sts	0x47D3, r1	; 0x8047d3 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    7222:	80 91 d5 47 	lds	r24, 0x47D5	; 0x8047d5 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    7226:	8d 3f       	cpi	r24, 0xFD	; 253
    7228:	f8 f4       	brcc	.+62     	; 0x7268 <_Z9makeMorsePcPbS0_+0x19a>
			{
				bool isDah = morseInProgress.pattern & (1 << symbolIndex++);
    722a:	30 91 d3 47 	lds	r19, 0x47D3	; 0x8047d3 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    722e:	21 e0       	ldi	r18, 0x01	; 1
    7230:	23 0f       	add	r18, r19
    7232:	20 93 d3 47 	sts	0x47D3, r18	; 0x8047d3 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    7236:	90 e0       	ldi	r25, 0x00	; 0
    7238:	02 c0       	rjmp	.+4      	; 0x723e <_Z9makeMorsePcPbS0_+0x170>
    723a:	95 95       	asr	r25
    723c:	87 95       	ror	r24
    723e:	3a 95       	dec	r19
    7240:	e2 f7       	brpl	.-8      	; 0x723a <_Z9makeMorsePcPbS0_+0x16c>

				if(isDah)
    7242:	80 ff       	sbrs	r24, 0
    7244:	04 c0       	rjmp	.+8      	; 0x724e <_Z9makeMorsePcPbS0_+0x180>
				{
					elementIndex = 2;
    7246:	82 e0       	ldi	r24, 0x02	; 2
    7248:	80 93 d2 47 	sts	0x47D2, r24	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    724c:	02 c0       	rjmp	.+4      	; 0x7252 <_Z9makeMorsePcPbS0_+0x184>
				}
				else
				{
					elementIndex = 0;
    724e:	10 92 d2 47 	sts	0x47D2, r1	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}

				carrierOn = true;
    7252:	81 e0       	ldi	r24, 0x01	; 1
    7254:	80 93 cf 47 	sts	0x47CF, r24	; 0x8047cf <_ZZ9makeMorsePcPbS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    7258:	80 91 d6 47 	lds	r24, 0x47D6	; 0x8047d6 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    725c:	28 17       	cp	r18, r24
    725e:	98 f0       	brcs	.+38     	; 0x7286 <_Z9makeMorsePcPbS0_+0x1b8>
				{
					addedSpace = 2;
    7260:	82 e0       	ldi	r24, 0x02	; 2
    7262:	80 93 d1 47 	sts	0x47D1, r24	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E10addedSpace>
    7266:	0f c0       	rjmp	.+30     	; 0x7286 <_Z9makeMorsePcPbS0_+0x1b8>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    7268:	80 91 d6 47 	lds	r24, 0x47D6	; 0x8047d6 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    726c:	9f ef       	ldi	r25, 0xFF	; 255
    726e:	90 93 d3 47 	sts	0x47D3, r25	; 0x8047d3 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
				carrierOn = false;
    7272:	10 92 cf 47 	sts	0x47CF, r1	; 0x8047cf <_ZZ9makeMorsePcPbS0_E9carrierOn>
				if(sym >= 4 )
    7276:	84 30       	cpi	r24, 0x04	; 4
    7278:	20 f0       	brcs	.+8      	; 0x7282 <_Z9makeMorsePcPbS0_+0x1b4>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    727a:	84 50       	subi	r24, 0x04	; 4
    727c:	80 93 d2 47 	sts	0x47D2, r24	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7280:	02 c0       	rjmp	.+4      	; 0x7286 <_Z9makeMorsePcPbS0_+0x1b8>
				}
				else
				{
					elementIndex = 0;
    7282:	10 92 d2 47 	sts	0x47D2, r1	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    7286:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    728a:	8c 33       	cpi	r24, 0x3C	; 60
    728c:	21 f4       	brne	.+8      	; 0x7296 <_Z9makeMorsePcPbS0_+0x1c8>
		{
			holdKeyDown = true;
    728e:	81 e0       	ldi	r24, 0x01	; 1
    7290:	80 93 da 47 	sts	0x47DA, r24	; 0x8047da <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    7294:	02 c0       	rjmp	.+4      	; 0x729a <_Z9makeMorsePcPbS0_+0x1cc>
		}
		else
		{
			holdKeyDown = false;
    7296:	10 92 da 47 	sts	0x47DA, r1	; 0x8047da <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
		}
	}

	if(finished)
    729a:	20 97       	sbiw	r28, 0x00	; 0
    729c:	19 f0       	breq	.+6      	; 0x72a4 <_Z9makeMorsePcPbS0_+0x1d6>
	{
		*finished = completedString;
    729e:	80 91 d0 47 	lds	r24, 0x47D0	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E15completedString>
    72a2:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    72a4:	80 91 da 47 	lds	r24, 0x47DA	; 0x8047da <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    72a8:	81 11       	cpse	r24, r1
    72aa:	04 c0       	rjmp	.+8      	; 0x72b4 <_Z9makeMorsePcPbS0_+0x1e6>
	{
		return(true);
	}
	else
	{
		return( carrierOn);
    72ac:	80 91 cf 47 	lds	r24, 0x47CF	; 0x8047cf <_ZZ9makeMorsePcPbS0_E9carrierOn>
    72b0:	01 c0       	rjmp	.+2      	; 0x72b4 <_Z9makeMorsePcPbS0_+0x1e6>
			if(finished)
			{
				*finished = true;
				holdKeyDown = false;
			}
			return( OFF);
    72b2:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return( carrierOn);
	}
}
    72b4:	df 91       	pop	r29
    72b6:	cf 91       	pop	r28
    72b8:	08 95       	ret

000072ba <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    72ba:	cf 92       	push	r12
    72bc:	df 92       	push	r13
    72be:	ef 92       	push	r14
    72c0:	ff 92       	push	r15
    72c2:	1f 93       	push	r17
    72c4:	cf 93       	push	r28
    72c6:	df 93       	push	r29
    72c8:	6c 01       	movw	r12, r24
    72ca:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    72cc:	c0 e0       	ldi	r28, 0x00	; 0
    72ce:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    72d0:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    72d2:	c4 31       	cpi	r28, 0x14	; 20
    72d4:	d1 05       	cpc	r29, r1
    72d6:	74 f4       	brge	.+28     	; 0x72f4 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    72d8:	f6 01       	movw	r30, r12
    72da:	ec 0f       	add	r30, r28
    72dc:	fd 1f       	adc	r31, r29
    72de:	80 81       	ld	r24, Z
		if(!c)
    72e0:	88 23       	and	r24, r24
    72e2:	41 f0       	breq	.+16     	; 0x72f4 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    72e4:	0e 94 74 37 	call	0x6ee8	; 0x6ee8 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    72e8:	6d 3f       	cpi	r22, 0xFD	; 253
    72ea:	08 f4       	brcc	.+2      	; 0x72ee <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    72ec:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    72ee:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    72f0:	21 96       	adiw	r28, 0x01	; 1
    72f2:	ef cf       	rjmp	.-34     	; 0x72d2 <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    72f4:	80 eb       	ldi	r24, 0xB0	; 176
    72f6:	94 e0       	ldi	r25, 0x04	; 4
    72f8:	b7 01       	movw	r22, r14
    72fa:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__udivmodhi4>
}
    72fe:	16 9f       	mul	r17, r22
    7300:	c0 01       	movw	r24, r0
    7302:	17 9f       	mul	r17, r23
    7304:	90 0d       	add	r25, r0
    7306:	11 24       	eor	r1, r1
    7308:	df 91       	pop	r29
    730a:	cf 91       	pop	r28
    730c:	1f 91       	pop	r17
    730e:	ff 90       	pop	r15
    7310:	ef 90       	pop	r14
    7312:	df 90       	pop	r13
    7314:	cf 90       	pop	r12
    7316:	08 95       	ret

00007318 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    7318:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    731a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    731c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    731e:	40 83       	st	Z, r20
	ret                             // Return to caller
    7320:	08 95       	ret

00007322 <_ZL21USART4_initializationm>:
	}
	
	serialbus_end_tx();
	memset((SerialbusRxBuffer*)rx_buffer, 0, sizeof(*(SerialbusRxBuffer*)rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    7322:	20 b3       	in	r18, 0x10	; 16
    7324:	2d 7f       	andi	r18, 0xFD	; 253
    7326:	20 bb       	out	0x10, r18	; 16
    7328:	e1 e9       	ldi	r30, 0x91	; 145
    732a:	f4 e0       	ldi	r31, 0x04	; 4
    732c:	20 81       	ld	r18, Z
    732e:	27 7f       	andi	r18, 0xF7	; 247
    7330:	20 83       	st	Z, r18
    7332:	20 b3       	in	r18, 0x10	; 16
    7334:	21 60       	ori	r18, 0x01	; 1
    7336:	20 bb       	out	0x10, r18	; 16
    7338:	21 b3       	in	r18, 0x11	; 17
    733a:	21 60       	ori	r18, 0x01	; 1
    733c:	21 bb       	out	0x11, r18	; 17
    733e:	0e 94 df 45 	call	0x8bbe	; 0x8bbe <USART4_init>
    7342:	08 95       	ret

00007344 <_ZL21USART1_initializationm>:
    7344:	28 b1       	in	r18, 0x08	; 8
    7346:	2d 7f       	andi	r18, 0xFD	; 253
    7348:	28 b9       	out	0x08, r18	; 8
    734a:	e1 e5       	ldi	r30, 0x51	; 81
    734c:	f4 e0       	ldi	r31, 0x04	; 4
    734e:	20 81       	ld	r18, Z
    7350:	27 7f       	andi	r18, 0xF7	; 247
    7352:	20 83       	st	Z, r18
    7354:	28 b1       	in	r18, 0x08	; 8
    7356:	21 60       	ori	r18, 0x01	; 1
    7358:	28 b9       	out	0x08, r18	; 8
    735a:	29 b1       	in	r18, 0x09	; 9
    735c:	21 60       	ori	r18, 0x01	; 1
    735e:	29 b9       	out	0x09, r18	; 9
    7360:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <USART1_init>
    7364:	08 95       	ret

00007366 <nextFullSBTxBuffer>:
    7366:	90 e0       	ldi	r25, 0x00	; 0
    7368:	80 91 de 47 	lds	r24, 0x47DE	; 0x8047de <_ZZ18nextFullSBTxBufferE11bufferIndex>
    736c:	28 2f       	mov	r18, r24
    736e:	30 e0       	ldi	r19, 0x00	; 0
    7370:	49 e2       	ldi	r20, 0x29	; 41
    7372:	42 9f       	mul	r20, r18
    7374:	f0 01       	movw	r30, r0
    7376:	43 9f       	mul	r20, r19
    7378:	f0 0d       	add	r31, r0
    737a:	11 24       	eor	r1, r1
    737c:	e3 5a       	subi	r30, 0xA3	; 163
    737e:	f7 4b       	sbci	r31, 0xB7	; 183
    7380:	40 81       	ld	r20, Z
    7382:	41 11       	cpse	r20, r1
    7384:	0b c0       	rjmp	.+22     	; 0x739c <nextFullSBTxBuffer+0x36>
    7386:	9f 5f       	subi	r25, 0xFF	; 255
    7388:	93 30       	cpi	r25, 0x03	; 3
    738a:	50 f4       	brcc	.+20     	; 0x73a0 <nextFullSBTxBuffer+0x3a>
    738c:	8f 5f       	subi	r24, 0xFF	; 255
    738e:	80 93 de 47 	sts	0x47DE, r24	; 0x8047de <_ZZ18nextFullSBTxBufferE11bufferIndex>
    7392:	83 30       	cpi	r24, 0x03	; 3
    7394:	48 f3       	brcs	.-46     	; 0x7368 <nextFullSBTxBuffer+0x2>
    7396:	10 92 de 47 	sts	0x47DE, r1	; 0x8047de <_ZZ18nextFullSBTxBufferE11bufferIndex>
    739a:	e6 cf       	rjmp	.-52     	; 0x7368 <nextFullSBTxBuffer+0x2>
    739c:	81 e0       	ldi	r24, 0x01	; 1
    739e:	01 c0       	rjmp	.+2      	; 0x73a2 <nextFullSBTxBuffer+0x3c>
    73a0:	80 e0       	ldi	r24, 0x00	; 0
    73a2:	88 23       	and	r24, r24
    73a4:	49 f0       	breq	.+18     	; 0x73b8 <nextFullSBTxBuffer+0x52>
    73a6:	49 e2       	ldi	r20, 0x29	; 41
    73a8:	42 9f       	mul	r20, r18
    73aa:	c0 01       	movw	r24, r0
    73ac:	43 9f       	mul	r20, r19
    73ae:	90 0d       	add	r25, r0
    73b0:	11 24       	eor	r1, r1
    73b2:	83 5a       	subi	r24, 0xA3	; 163
    73b4:	97 4b       	sbci	r25, 0xB7	; 183
    73b6:	08 95       	ret
    73b8:	80 e0       	ldi	r24, 0x00	; 0
    73ba:	90 e0       	ldi	r25, 0x00	; 0
    73bc:	08 95       	ret

000073be <nextEmptySBTxBuffer>:
    73be:	90 e0       	ldi	r25, 0x00	; 0
    73c0:	80 91 dd 47 	lds	r24, 0x47DD	; 0x8047dd <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    73c4:	28 2f       	mov	r18, r24
    73c6:	30 e0       	ldi	r19, 0x00	; 0
    73c8:	49 e2       	ldi	r20, 0x29	; 41
    73ca:	42 9f       	mul	r20, r18
    73cc:	f0 01       	movw	r30, r0
    73ce:	43 9f       	mul	r20, r19
    73d0:	f0 0d       	add	r31, r0
    73d2:	11 24       	eor	r1, r1
    73d4:	e3 5a       	subi	r30, 0xA3	; 163
    73d6:	f7 4b       	sbci	r31, 0xB7	; 183
    73d8:	40 81       	ld	r20, Z
    73da:	44 23       	and	r20, r20
    73dc:	59 f0       	breq	.+22     	; 0x73f4 <nextEmptySBTxBuffer+0x36>
    73de:	9f 5f       	subi	r25, 0xFF	; 255
    73e0:	93 30       	cpi	r25, 0x03	; 3
    73e2:	50 f4       	brcc	.+20     	; 0x73f8 <nextEmptySBTxBuffer+0x3a>
    73e4:	8f 5f       	subi	r24, 0xFF	; 255
    73e6:	80 93 dd 47 	sts	0x47DD, r24	; 0x8047dd <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    73ea:	83 30       	cpi	r24, 0x03	; 3
    73ec:	48 f3       	brcs	.-46     	; 0x73c0 <nextEmptySBTxBuffer+0x2>
    73ee:	10 92 dd 47 	sts	0x47DD, r1	; 0x8047dd <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    73f2:	e6 cf       	rjmp	.-52     	; 0x73c0 <nextEmptySBTxBuffer+0x2>
    73f4:	81 e0       	ldi	r24, 0x01	; 1
    73f6:	01 c0       	rjmp	.+2      	; 0x73fa <nextEmptySBTxBuffer+0x3c>
    73f8:	80 e0       	ldi	r24, 0x00	; 0
    73fa:	88 23       	and	r24, r24
    73fc:	49 f0       	breq	.+18     	; 0x7410 <nextEmptySBTxBuffer+0x52>
    73fe:	49 e2       	ldi	r20, 0x29	; 41
    7400:	42 9f       	mul	r20, r18
    7402:	c0 01       	movw	r24, r0
    7404:	43 9f       	mul	r20, r19
    7406:	90 0d       	add	r25, r0
    7408:	11 24       	eor	r1, r1
    740a:	83 5a       	subi	r24, 0xA3	; 163
    740c:	97 4b       	sbci	r25, 0xB7	; 183
    740e:	08 95       	ret
    7410:	80 e0       	ldi	r24, 0x00	; 0
    7412:	90 e0       	ldi	r25, 0x00	; 0
    7414:	08 95       	ret

00007416 <nextEmptySBRxBuffer>:
    7416:	90 e0       	ldi	r25, 0x00	; 0
    7418:	80 91 dc 47 	lds	r24, 0x47DC	; 0x8047dc <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    741c:	28 2f       	mov	r18, r24
    741e:	30 e0       	ldi	r19, 0x00	; 0
    7420:	4f e3       	ldi	r20, 0x3F	; 63
    7422:	42 9f       	mul	r20, r18
    7424:	f0 01       	movw	r30, r0
    7426:	43 9f       	mul	r20, r19
    7428:	f0 0d       	add	r31, r0
    742a:	11 24       	eor	r1, r1
    742c:	e1 52       	subi	r30, 0x21	; 33
    742e:	f8 4b       	sbci	r31, 0xB8	; 184
    7430:	41 81       	ldd	r20, Z+1	; 0x01
    7432:	52 81       	ldd	r21, Z+2	; 0x02
    7434:	45 2b       	or	r20, r21
    7436:	59 f0       	breq	.+22     	; 0x744e <nextEmptySBRxBuffer+0x38>
    7438:	9f 5f       	subi	r25, 0xFF	; 255
    743a:	92 30       	cpi	r25, 0x02	; 2
    743c:	50 f4       	brcc	.+20     	; 0x7452 <nextEmptySBRxBuffer+0x3c>
    743e:	8f 5f       	subi	r24, 0xFF	; 255
    7440:	80 93 dc 47 	sts	0x47DC, r24	; 0x8047dc <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    7444:	82 30       	cpi	r24, 0x02	; 2
    7446:	40 f3       	brcs	.-48     	; 0x7418 <nextEmptySBRxBuffer+0x2>
    7448:	10 92 dc 47 	sts	0x47DC, r1	; 0x8047dc <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    744c:	e5 cf       	rjmp	.-54     	; 0x7418 <nextEmptySBRxBuffer+0x2>
    744e:	81 e0       	ldi	r24, 0x01	; 1
    7450:	01 c0       	rjmp	.+2      	; 0x7454 <nextEmptySBRxBuffer+0x3e>
    7452:	80 e0       	ldi	r24, 0x00	; 0
    7454:	88 23       	and	r24, r24
    7456:	49 f0       	breq	.+18     	; 0x746a <nextEmptySBRxBuffer+0x54>
    7458:	4f e3       	ldi	r20, 0x3F	; 63
    745a:	42 9f       	mul	r20, r18
    745c:	c0 01       	movw	r24, r0
    745e:	43 9f       	mul	r20, r19
    7460:	90 0d       	add	r25, r0
    7462:	11 24       	eor	r1, r1
    7464:	81 52       	subi	r24, 0x21	; 33
    7466:	98 4b       	sbci	r25, 0xB8	; 184
    7468:	08 95       	ret
    746a:	80 e0       	ldi	r24, 0x00	; 0
    746c:	90 e0       	ldi	r25, 0x00	; 0
    746e:	08 95       	ret

00007470 <nextFullSBRxBuffer>:
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	80 91 db 47 	lds	r24, 0x47DB	; 0x8047db <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7476:	28 2f       	mov	r18, r24
    7478:	30 e0       	ldi	r19, 0x00	; 0
    747a:	4f e3       	ldi	r20, 0x3F	; 63
    747c:	42 9f       	mul	r20, r18
    747e:	f0 01       	movw	r30, r0
    7480:	43 9f       	mul	r20, r19
    7482:	f0 0d       	add	r31, r0
    7484:	11 24       	eor	r1, r1
    7486:	e1 52       	subi	r30, 0x21	; 33
    7488:	f8 4b       	sbci	r31, 0xB8	; 184
    748a:	41 81       	ldd	r20, Z+1	; 0x01
    748c:	52 81       	ldd	r21, Z+2	; 0x02
    748e:	45 2b       	or	r20, r21
    7490:	59 f4       	brne	.+22     	; 0x74a8 <nextFullSBRxBuffer+0x38>
    7492:	9f 5f       	subi	r25, 0xFF	; 255
    7494:	92 30       	cpi	r25, 0x02	; 2
    7496:	50 f4       	brcc	.+20     	; 0x74ac <nextFullSBRxBuffer+0x3c>
    7498:	8f 5f       	subi	r24, 0xFF	; 255
    749a:	80 93 db 47 	sts	0x47DB, r24	; 0x8047db <_ZZ18nextFullSBRxBufferE11bufferIndex>
    749e:	82 30       	cpi	r24, 0x02	; 2
    74a0:	40 f3       	brcs	.-48     	; 0x7472 <nextFullSBRxBuffer+0x2>
    74a2:	10 92 db 47 	sts	0x47DB, r1	; 0x8047db <_ZZ18nextFullSBRxBufferE11bufferIndex>
    74a6:	e5 cf       	rjmp	.-54     	; 0x7472 <nextFullSBRxBuffer+0x2>
    74a8:	81 e0       	ldi	r24, 0x01	; 1
    74aa:	01 c0       	rjmp	.+2      	; 0x74ae <nextFullSBRxBuffer+0x3e>
    74ac:	80 e0       	ldi	r24, 0x00	; 0
    74ae:	88 23       	and	r24, r24
    74b0:	49 f0       	breq	.+18     	; 0x74c4 <nextFullSBRxBuffer+0x54>
    74b2:	4f e3       	ldi	r20, 0x3F	; 63
    74b4:	42 9f       	mul	r20, r18
    74b6:	c0 01       	movw	r24, r0
    74b8:	43 9f       	mul	r20, r19
    74ba:	90 0d       	add	r25, r0
    74bc:	11 24       	eor	r1, r1
    74be:	81 52       	subi	r24, 0x21	; 33
    74c0:	98 4b       	sbci	r25, 0xB8	; 184
    74c2:	08 95       	ret
    74c4:	80 e0       	ldi	r24, 0x00	; 0
    74c6:	90 e0       	ldi	r25, 0x00	; 0
    74c8:	08 95       	ret

000074ca <serialbusTxInProgress>:
    74ca:	80 91 d8 48 	lds	r24, 0x48D8	; 0x8048d8 <_ZL19serialbus_tx_active>
    74ce:	08 95       	ret

000074d0 <_Z18serialbus_start_txv>:
    74d0:	cf 93       	push	r28
    74d2:	c0 91 d8 48 	lds	r28, 0x48D8	; 0x8048d8 <_ZL19serialbus_tx_active>
    74d6:	81 e0       	ldi	r24, 0x01	; 1
    74d8:	c8 27       	eor	r28, r24
    74da:	59 f0       	breq	.+22     	; 0x74f2 <_Z18serialbus_start_txv+0x22>
    74dc:	80 93 d8 48 	sts	0x48D8, r24	; 0x8048d8 <_ZL19serialbus_tx_active>
    74e0:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    74e4:	81 11       	cpse	r24, r1
    74e6:	03 c0       	rjmp	.+6      	; 0x74ee <_Z18serialbus_start_txv+0x1e>
    74e8:	0e 94 01 46 	call	0x8c02	; 0x8c02 <USART4_enable_tx>
    74ec:	02 c0       	rjmp	.+4      	; 0x74f2 <_Z18serialbus_start_txv+0x22>
    74ee:	0e 94 cd 45 	call	0x8b9a	; 0x8b9a <USART1_enable_tx>
    74f2:	8c 2f       	mov	r24, r28
    74f4:	cf 91       	pop	r28
    74f6:	08 95       	ret

000074f8 <serialbus_end_tx>:
    74f8:	80 91 d8 48 	lds	r24, 0x48D8	; 0x8048d8 <_ZL19serialbus_tx_active>
    74fc:	88 23       	and	r24, r24
    74fe:	89 f0       	breq	.+34     	; 0x7522 <serialbus_end_tx+0x2a>
    7500:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    7504:	84 30       	cpi	r24, 0x04	; 4
    7506:	31 f4       	brne	.+12     	; 0x7514 <serialbus_end_tx+0x1c>
    7508:	e0 e8       	ldi	r30, 0x80	; 128
    750a:	f8 e0       	ldi	r31, 0x08	; 8
    750c:	85 81       	ldd	r24, Z+5	; 0x05
    750e:	8f 7d       	andi	r24, 0xDF	; 223
    7510:	85 83       	std	Z+5, r24	; 0x05
    7512:	05 c0       	rjmp	.+10     	; 0x751e <serialbus_end_tx+0x26>
    7514:	e0 e2       	ldi	r30, 0x20	; 32
    7516:	f8 e0       	ldi	r31, 0x08	; 8
    7518:	85 81       	ldd	r24, Z+5	; 0x05
    751a:	8f 7d       	andi	r24, 0xDF	; 223
    751c:	85 83       	std	Z+5, r24	; 0x05
    751e:	10 92 d8 48 	sts	0x48D8, r1	; 0x8048d8 <_ZL19serialbus_tx_active>
    7522:	08 95       	ret

00007524 <serialbus_init>:
    7524:	cf 93       	push	r28
    7526:	2f e3       	ldi	r18, 0x3F	; 63
    7528:	ef ed       	ldi	r30, 0xDF	; 223
    752a:	f7 e4       	ldi	r31, 0x47	; 71
    752c:	df 01       	movw	r26, r30
    752e:	1d 92       	st	X+, r1
    7530:	2a 95       	dec	r18
    7532:	e9 f7       	brne	.-6      	; 0x752e <serialbus_init+0xa>
    7534:	a0 e0       	ldi	r26, 0x00	; 0
    7536:	b0 e0       	ldi	r27, 0x00	; 0
    7538:	a3 30       	cpi	r26, 0x03	; 3
    753a:	b1 05       	cpc	r27, r1
    753c:	5c f4       	brge	.+22     	; 0x7554 <serialbus_init+0x30>
    753e:	29 e2       	ldi	r18, 0x29	; 41
    7540:	2a 9f       	mul	r18, r26
    7542:	f0 01       	movw	r30, r0
    7544:	2b 9f       	mul	r18, r27
    7546:	f0 0d       	add	r31, r0
    7548:	11 24       	eor	r1, r1
    754a:	e3 5a       	subi	r30, 0xA3	; 163
    754c:	f7 4b       	sbci	r31, 0xB7	; 183
    754e:	10 82       	st	Z, r1
    7550:	11 96       	adiw	r26, 0x01	; 1
    7552:	f2 cf       	rjmp	.-28     	; 0x7538 <serialbus_init+0x14>
    7554:	46 30       	cpi	r20, 0x06	; 6
    7556:	21 f4       	brne	.+8      	; 0x7560 <serialbus_init+0x3c>
    7558:	20 91 27 40 	lds	r18, 0x4027	; 0x804027 <g_serialbus_usart_number>
    755c:	27 30       	cpi	r18, 0x07	; 7
    755e:	51 f4       	brne	.+20     	; 0x7574 <serialbus_init+0x50>
    7560:	c4 2f       	mov	r28, r20
    7562:	44 30       	cpi	r20, 0x04	; 4
    7564:	19 f4       	brne	.+6      	; 0x756c <serialbus_init+0x48>
    7566:	0e 94 91 39 	call	0x7322	; 0x7322 <_ZL21USART4_initializationm>
    756a:	02 c0       	rjmp	.+4      	; 0x7570 <serialbus_init+0x4c>
    756c:	0e 94 a2 39 	call	0x7344	; 0x7344 <_ZL21USART1_initializationm>
    7570:	c0 93 27 40 	sts	0x4027, r28	; 0x804027 <g_serialbus_usart_number>
    7574:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <_ZL14g_bus_disabled>
    7578:	cf 91       	pop	r28
    757a:	08 95       	ret

0000757c <_Z19serialbus_send_textPc>:
	}
}


bool serialbus_send_text(char* text)
{
    757c:	ef 92       	push	r14
    757e:	ff 92       	push	r15
    7580:	1f 93       	push	r17
    7582:	cf 93       	push	r28
    7584:	df 93       	push	r29
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
    7586:	10 91 26 40 	lds	r17, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    758a:	11 11       	cpse	r17, r1
    758c:	2d c0       	rjmp	.+90     	; 0x75e8 <_Z19serialbus_send_textPc+0x6c>
	{
		return( err);
	}

	if(text)
    758e:	00 97       	sbiw	r24, 0x00	; 0
    7590:	69 f1       	breq	.+90     	; 0x75ec <_Z19serialbus_send_textPc+0x70>
    7592:	7c 01       	movw	r14, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    7594:	0e 94 df 39 	call	0x73be	; 0x73be <nextEmptySBTxBuffer>


bool serialbus_send_text(char* text)
{
	bool err = true;
	uint16_t tries = 200;
    7598:	c8 ec       	ldi	r28, 0xC8	; 200
    759a:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    759c:	00 97       	sbiw	r24, 0x00	; 0
    759e:	a1 f4       	brne	.+40     	; 0x75c8 <_Z19serialbus_send_textPc+0x4c>
    75a0:	20 97       	sbiw	r28, 0x00	; 0
    75a2:	91 f0       	breq	.+36     	; 0x75c8 <_Z19serialbus_send_textPc+0x4c>
		{
			while(serialbusTxInProgress() && tries)
    75a4:	0e 94 65 3a 	call	0x74ca	; 0x74ca <serialbusTxInProgress>
    75a8:	88 23       	and	r24, r24
    75aa:	21 f0       	breq	.+8      	; 0x75b4 <_Z19serialbus_send_textPc+0x38>
    75ac:	20 97       	sbiw	r28, 0x00	; 0
    75ae:	19 f4       	brne	.+6      	; 0x75b6 <_Z19serialbus_send_textPc+0x3a>
    75b0:	81 2f       	mov	r24, r17
    75b2:	01 c0       	rjmp	.+2      	; 0x75b6 <_Z19serialbus_send_textPc+0x3a>
    75b4:	81 2f       	mov	r24, r17
    75b6:	88 23       	and	r24, r24
    75b8:	21 f0       	breq	.+8      	; 0x75c2 <_Z19serialbus_send_textPc+0x46>
			{
				if(tries)
    75ba:	20 97       	sbiw	r28, 0x00	; 0
    75bc:	99 f3       	breq	.-26     	; 0x75a4 <_Z19serialbus_send_textPc+0x28>
				{
					tries--;    /* wait until transmit finishes */
    75be:	21 97       	sbiw	r28, 0x01	; 1
    75c0:	f1 cf       	rjmp	.-30     	; 0x75a4 <_Z19serialbus_send_textPc+0x28>
				}
			}
			buff = nextEmptySBTxBuffer();
    75c2:	0e 94 df 39 	call	0x73be	; 0x73be <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    75c6:	ea cf       	rjmp	.-44     	; 0x759c <_Z19serialbus_send_textPc+0x20>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    75c8:	00 97       	sbiw	r24, 0x00	; 0
    75ca:	91 f0       	breq	.+36     	; 0x75f0 <_Z19serialbus_send_textPc+0x74>
		{
			sprintf(*buff, text);
    75cc:	ff 92       	push	r15
    75ce:	ef 92       	push	r14
    75d0:	9f 93       	push	r25
    75d2:	8f 93       	push	r24
    75d4:	0e 94 cf 4a 	call	0x959e	; 0x959e <sprintf>

			serialbus_start_tx();
    75d8:	0e 94 68 3a 	call	0x74d0	; 0x74d0 <_Z18serialbus_start_txv>
    75dc:	0f 90       	pop	r0
    75de:	0f 90       	pop	r0
    75e0:	0f 90       	pop	r0
    75e2:	0f 90       	pop	r0
			err = false;
    75e4:	80 e0       	ldi	r24, 0x00	; 0
    75e6:	05 c0       	rjmp	.+10     	; 0x75f2 <_Z19serialbus_send_textPc+0x76>
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    75e8:	81 e0       	ldi	r24, 0x01	; 1
    75ea:	03 c0       	rjmp	.+6      	; 0x75f2 <_Z19serialbus_send_textPc+0x76>
}


bool serialbus_send_text(char* text)
{
	bool err = true;
    75ec:	81 e0       	ldi	r24, 0x01	; 1
    75ee:	01 c0       	rjmp	.+2      	; 0x75f2 <_Z19serialbus_send_textPc+0x76>
    75f0:	81 e0       	ldi	r24, 0x01	; 1
			err = false;
		}
	}

	return(err);
}
    75f2:	df 91       	pop	r29
    75f4:	cf 91       	pop	r28
    75f6:	1f 91       	pop	r17
    75f8:	ff 90       	pop	r15
    75fa:	ef 90       	pop	r14
    75fc:	08 95       	ret

000075fe <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    75fe:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7602:	81 11       	cpse	r24, r1
    7604:	06 c0       	rjmp	.+12     	; 0x7612 <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    7606:	80 ec       	ldi	r24, 0xC0	; 192
    7608:	94 e4       	ldi	r25, 0x44	; 68
    760a:	0e 94 be 3a 	call	0x757c	; 0x757c <_Z19serialbus_send_textPc>
    760e:	81 11       	cpse	r24, r1
    7610:	fa cf       	rjmp	.-12     	; 0x7606 <sb_send_NewPrompt+0x8>
    7612:	08 95       	ret

00007614 <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    7614:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7618:	81 11       	cpse	r24, r1
    761a:	04 c0       	rjmp	.+8      	; 0x7624 <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    761c:	83 ec       	ldi	r24, 0xC3	; 195
    761e:	94 e4       	ldi	r25, 0x44	; 68
    7620:	0e 94 be 3a 	call	0x757c	; 0x757c <_Z19serialbus_send_textPc>
    7624:	08 95       	ret

00007626 <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    7626:	90 91 26 40 	lds	r25, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    762a:	91 11       	cpse	r25, r1
    762c:	07 c0       	rjmp	.+14     	; 0x763c <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    762e:	e9 ed       	ldi	r30, 0xD9	; 217
    7630:	f8 e4       	ldi	r31, 0x48	; 72
    7632:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    7634:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    7636:	cf 01       	movw	r24, r30
    7638:	0e 94 be 3a 	call	0x757c	; 0x757c <_Z19serialbus_send_textPc>
    763c:	08 95       	ret

0000763e <sb_send_string>:
}

bool sb_send_string(char* str)
{
    763e:	8f 92       	push	r8
    7640:	9f 92       	push	r9
    7642:	af 92       	push	r10
    7644:	bf 92       	push	r11
    7646:	df 92       	push	r13
    7648:	ef 92       	push	r14
    764a:	ff 92       	push	r15
    764c:	0f 93       	push	r16
    764e:	1f 93       	push	r17
    7650:	cf 93       	push	r28
    7652:	df 93       	push	r29
    7654:	cd b7       	in	r28, 0x3d	; 61
    7656:	de b7       	in	r29, 0x3e	; 62
    7658:	aa 97       	sbiw	r28, 0x2a	; 42
    765a:	cd bf       	out	0x3d, r28	; 61
    765c:	de bf       	out	0x3e, r29	; 62
    765e:	fc 01       	movw	r30, r24
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    7660:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7664:	81 11       	cpse	r24, r1
    7666:	45 c0       	rjmp	.+138    	; 0x76f2 <sb_send_string+0xb4>
	{
		return( true);
	}

	if(str == NULL)
    7668:	30 97       	sbiw	r30, 0x00	; 0
    766a:	09 f4       	brne	.+2      	; 0x766e <sb_send_string+0x30>
    766c:	3f c0       	rjmp	.+126    	; 0x76ec <sb_send_string+0xae>
	{
		return( true);
	}

	if(!*str)
    766e:	80 81       	ld	r24, Z
    7670:	88 23       	and	r24, r24
    7672:	f1 f1       	breq	.+124    	; 0x76f0 <sb_send_string+0xb2>
    7674:	4f 01       	movw	r8, r30
	{
		return(true);
	}

	length = strlen(str);
    7676:	01 90       	ld	r0, Z+
    7678:	00 20       	and	r0, r0
    767a:	e9 f7       	brne	.-6      	; 0x7676 <sb_send_string+0x38>
    767c:	31 97       	sbiw	r30, 0x01	; 1
    767e:	5f 01       	movw	r10, r30
    7680:	a8 18       	sub	r10, r8
    7682:	b9 08       	sbc	r11, r9

bool sb_send_string(char* str)
{
	char buf[SERIALBUS_MAX_TX_MSG_LENGTH+1];
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
    7684:	e1 2c       	mov	r14, r1
    7686:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH);
    7688:	85 01       	movw	r16, r10
    768a:	0e 19       	sub	r16, r14
    768c:	1f 09       	sbc	r17, r15
    768e:	09 32       	cpi	r16, 0x29	; 41
    7690:	11 05       	cpc	r17, r1
    7692:	10 f0       	brcs	.+4      	; 0x7698 <sb_send_string+0x5a>
    7694:	09 e2       	ldi	r16, 0x29	; 41
    7696:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(buf, &str[lengthSent], lengthToSend);
    7698:	a8 01       	movw	r20, r16
    769a:	b4 01       	movw	r22, r8
    769c:	6e 0d       	add	r22, r14
    769e:	7f 1d       	adc	r23, r15
    76a0:	ce 01       	movw	r24, r28
    76a2:	01 96       	adiw	r24, 0x01	; 1
    76a4:	0e 94 a3 4a 	call	0x9546	; 0x9546 <strncpy>

		buf[lengthToSend] = '\0';
    76a8:	e1 e0       	ldi	r30, 0x01	; 1
    76aa:	f0 e0       	ldi	r31, 0x00	; 0
    76ac:	ec 0f       	add	r30, r28
    76ae:	fd 1f       	adc	r31, r29
    76b0:	e0 0f       	add	r30, r16
    76b2:	f1 1f       	adc	r31, r17
    76b4:	10 82       	st	Z, r1
		err = serialbus_send_text(buf);
    76b6:	ce 01       	movw	r24, r28
    76b8:	01 96       	adiw	r24, 0x01	; 1
    76ba:	0e 94 be 3a 	call	0x757c	; 0x757c <_Z19serialbus_send_textPc>
    76be:	d8 2e       	mov	r13, r24
		
		if(!err)
    76c0:	81 11       	cpse	r24, r1
    76c2:	04 c0       	rjmp	.+8      	; 0x76cc <sb_send_string+0x8e>
		{
			while(serialbusTxInProgress())
    76c4:	0e 94 65 3a 	call	0x74ca	; 0x74ca <serialbusTxInProgress>
    76c8:	81 11       	cpse	r24, r1
    76ca:	fc cf       	rjmp	.-8      	; 0x76c4 <sb_send_string+0x86>
			{
				;
			}
		}

		lengthSent += lengthToSend;
    76cc:	e0 0e       	add	r14, r16
    76ce:	f1 1e       	adc	r15, r17
		done = err || (lengthSent >= length);
    76d0:	d1 10       	cpse	r13, r1
    76d2:	05 c0       	rjmp	.+10     	; 0x76de <sb_send_string+0xa0>
    76d4:	ea 14       	cp	r14, r10
    76d6:	fb 04       	cpc	r15, r11
    76d8:	20 f0       	brcs	.+8      	; 0x76e2 <sb_send_string+0xa4>
    76da:	81 e0       	ldi	r24, 0x01	; 1
    76dc:	03 c0       	rjmp	.+6      	; 0x76e4 <sb_send_string+0xa6>
    76de:	81 e0       	ldi	r24, 0x01	; 1
    76e0:	01 c0       	rjmp	.+2      	; 0x76e4 <sb_send_string+0xa6>
    76e2:	80 e0       	ldi	r24, 0x00	; 0
	}while(!done);
    76e4:	88 23       	and	r24, r24
    76e6:	81 f2       	breq	.-96     	; 0x7688 <sb_send_string+0x4a>

	return( err);
    76e8:	8d 2d       	mov	r24, r13
    76ea:	03 c0       	rjmp	.+6      	; 0x76f2 <sb_send_string+0xb4>
		return( true);
	}

	if(str == NULL)
	{
		return( true);
    76ec:	81 e0       	ldi	r24, 0x01	; 1
    76ee:	01 c0       	rjmp	.+2      	; 0x76f2 <sb_send_string+0xb4>
	}

	if(!*str)
	{
		return(true);
    76f0:	81 e0       	ldi	r24, 0x01	; 1
		lengthSent += lengthToSend;
		done = err || (lengthSent >= length);
	}while(!done);

	return( err);
}
    76f2:	aa 96       	adiw	r28, 0x2a	; 42
    76f4:	cd bf       	out	0x3d, r28	; 61
    76f6:	de bf       	out	0x3e, r29	; 62
    76f8:	df 91       	pop	r29
    76fa:	cf 91       	pop	r28
    76fc:	1f 91       	pop	r17
    76fe:	0f 91       	pop	r16
    7700:	ff 90       	pop	r15
    7702:	ef 90       	pop	r14
    7704:	df 90       	pop	r13
    7706:	bf 90       	pop	r11
    7708:	af 90       	pop	r10
    770a:	9f 90       	pop	r9
    770c:	8f 90       	pop	r8
    770e:	08 95       	ret

00007710 <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    7710:	4f 92       	push	r4
    7712:	5f 92       	push	r5
    7714:	6f 92       	push	r6
    7716:	7f 92       	push	r7
    7718:	8f 92       	push	r8
    771a:	9f 92       	push	r9
    771c:	af 92       	push	r10
    771e:	bf 92       	push	r11
    7720:	cf 92       	push	r12
    7722:	df 92       	push	r13
    7724:	ef 92       	push	r14
    7726:	ff 92       	push	r15
    7728:	0f 93       	push	r16
    772a:	1f 93       	push	r17
    772c:	cf 93       	push	r28
    772e:	df 93       	push	r29
    7730:	8c 01       	movw	r16, r24
    7732:	eb 01       	movw	r28, r22
    7734:	fc 01       	movw	r30, r24
    7736:	40 80       	ld	r4, Z
    7738:	51 80       	ldd	r5, Z+1	; 0x01
    773a:	62 80       	ldd	r6, Z+2	; 0x02
    773c:	73 80       	ldd	r7, Z+3	; 0x03
    773e:	88 80       	ld	r8, Y
    7740:	99 80       	ldd	r9, Y+1	; 0x01
    7742:	aa 80       	ldd	r10, Y+2	; 0x02
    7744:	bb 80       	ldd	r11, Y+3	; 0x03
    7746:	41 14       	cp	r4, r1
    7748:	51 04       	cpc	r5, r1
    774a:	61 04       	cpc	r6, r1
    774c:	71 04       	cpc	r7, r1
    774e:	e1 f1       	breq	.+120    	; 0x77c8 <_Z13reduce_by_gcdPmS_+0xb8>
    7750:	81 14       	cp	r8, r1
    7752:	91 04       	cpc	r9, r1
    7754:	a1 04       	cpc	r10, r1
    7756:	b1 04       	cpc	r11, r1
    7758:	b9 f1       	breq	.+110    	; 0x77c8 <_Z13reduce_by_gcdPmS_+0xb8>
    775a:	c3 01       	movw	r24, r6
    775c:	b2 01       	movw	r22, r4
    775e:	a5 01       	movw	r20, r10
    7760:	94 01       	movw	r18, r8
    7762:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    7766:	6b 01       	movw	r12, r22
    7768:	7c 01       	movw	r14, r24
    776a:	c1 14       	cp	r12, r1
    776c:	d1 04       	cpc	r13, r1
    776e:	e1 04       	cpc	r14, r1
    7770:	f1 04       	cpc	r15, r1
    7772:	69 f0       	breq	.+26     	; 0x778e <_Z13reduce_by_gcdPmS_+0x7e>
    7774:	c5 01       	movw	r24, r10
    7776:	b4 01       	movw	r22, r8
    7778:	a7 01       	movw	r20, r14
    777a:	96 01       	movw	r18, r12
    777c:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    7780:	46 01       	movw	r8, r12
    7782:	57 01       	movw	r10, r14
    7784:	c6 2e       	mov	r12, r22
    7786:	d7 2e       	mov	r13, r23
    7788:	e8 2e       	mov	r14, r24
    778a:	f9 2e       	mov	r15, r25
    778c:	ee cf       	rjmp	.-36     	; 0x776a <_Z13reduce_by_gcdPmS_+0x5a>
    778e:	f2 e0       	ldi	r31, 0x02	; 2
    7790:	8f 16       	cp	r8, r31
    7792:	91 04       	cpc	r9, r1
    7794:	a1 04       	cpc	r10, r1
    7796:	b1 04       	cpc	r11, r1
    7798:	b8 f0       	brcs	.+46     	; 0x77c8 <_Z13reduce_by_gcdPmS_+0xb8>
    779a:	c3 01       	movw	r24, r6
    779c:	b2 01       	movw	r22, r4
    779e:	a5 01       	movw	r20, r10
    77a0:	94 01       	movw	r18, r8
    77a2:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    77a6:	f8 01       	movw	r30, r16
    77a8:	20 83       	st	Z, r18
    77aa:	31 83       	std	Z+1, r19	; 0x01
    77ac:	42 83       	std	Z+2, r20	; 0x02
    77ae:	53 83       	std	Z+3, r21	; 0x03
    77b0:	68 81       	ld	r22, Y
    77b2:	79 81       	ldd	r23, Y+1	; 0x01
    77b4:	8a 81       	ldd	r24, Y+2	; 0x02
    77b6:	9b 81       	ldd	r25, Y+3	; 0x03
    77b8:	a5 01       	movw	r20, r10
    77ba:	94 01       	movw	r18, r8
    77bc:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    77c0:	28 83       	st	Y, r18
    77c2:	39 83       	std	Y+1, r19	; 0x01
    77c4:	4a 83       	std	Y+2, r20	; 0x02
    77c6:	5b 83       	std	Y+3, r21	; 0x03
    77c8:	df 91       	pop	r29
    77ca:	cf 91       	pop	r28
    77cc:	1f 91       	pop	r17
    77ce:	0f 91       	pop	r16
    77d0:	ff 90       	pop	r15
    77d2:	ef 90       	pop	r14
    77d4:	df 90       	pop	r13
    77d6:	cf 90       	pop	r12
    77d8:	bf 90       	pop	r11
    77da:	af 90       	pop	r10
    77dc:	9f 90       	pop	r9
    77de:	8f 90       	pop	r8
    77e0:	7f 90       	pop	r7
    77e2:	6f 90       	pop	r6
    77e4:	5f 90       	pop	r5
    77e6:	4f 90       	pop	r4
    77e8:	08 95       	ret

000077ea <_Z8pll_calcmP13u_si5351_regs>:
    77ea:	4f 92       	push	r4
    77ec:	5f 92       	push	r5
    77ee:	6f 92       	push	r6
    77f0:	7f 92       	push	r7
    77f2:	8f 92       	push	r8
    77f4:	9f 92       	push	r9
    77f6:	af 92       	push	r10
    77f8:	bf 92       	push	r11
    77fa:	cf 92       	push	r12
    77fc:	df 92       	push	r13
    77fe:	ef 92       	push	r14
    7800:	ff 92       	push	r15
    7802:	0f 93       	push	r16
    7804:	1f 93       	push	r17
    7806:	cf 93       	push	r28
    7808:	df 93       	push	r29
    780a:	cd b7       	in	r28, 0x3d	; 61
    780c:	de b7       	in	r29, 0x3e	; 62
    780e:	28 97       	sbiw	r28, 0x08	; 8
    7810:	cd bf       	out	0x3d, r28	; 61
    7812:	de bf       	out	0x3e, r29	; 62
    7814:	8a 01       	movw	r16, r20
    7816:	80 90 28 40 	lds	r8, 0x4028	; 0x804028 <_ZL9xtal_freq>
    781a:	90 90 29 40 	lds	r9, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    781e:	a0 90 2a 40 	lds	r10, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    7822:	b0 90 2b 40 	lds	r11, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    7826:	a5 01       	movw	r20, r10
    7828:	94 01       	movw	r18, r8
    782a:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    782e:	69 01       	movw	r12, r18
    7830:	7a 01       	movw	r14, r20
    7832:	69 83       	std	Y+1, r22	; 0x01
    7834:	7a 83       	std	Y+2, r23	; 0x02
    7836:	8b 83       	std	Y+3, r24	; 0x03
    7838:	9c 83       	std	Y+4, r25	; 0x04
    783a:	8d 82       	std	Y+5, r8	; 0x05
    783c:	9e 82       	std	Y+6, r9	; 0x06
    783e:	af 82       	std	Y+7, r10	; 0x07
    7840:	b8 86       	std	Y+8, r11	; 0x08
    7842:	be 01       	movw	r22, r28
    7844:	6b 5f       	subi	r22, 0xFB	; 251
    7846:	7f 4f       	sbci	r23, 0xFF	; 255
    7848:	ce 01       	movw	r24, r28
    784a:	01 96       	adiw	r24, 0x01	; 1
    784c:	0e 94 88 3b 	call	0x7710	; 0x7710 <_Z13reduce_by_gcdPmS_>
    7850:	89 80       	ldd	r8, Y+1	; 0x01
    7852:	9a 80       	ldd	r9, Y+2	; 0x02
    7854:	ab 80       	ldd	r10, Y+3	; 0x03
    7856:	bc 80       	ldd	r11, Y+4	; 0x04
    7858:	88 0c       	add	r8, r8
    785a:	99 1c       	adc	r9, r9
    785c:	aa 1c       	adc	r10, r10
    785e:	bb 1c       	adc	r11, r11
    7860:	88 0c       	add	r8, r8
    7862:	99 1c       	adc	r9, r9
    7864:	aa 1c       	adc	r10, r10
    7866:	bb 1c       	adc	r11, r11
    7868:	88 0c       	add	r8, r8
    786a:	99 1c       	adc	r9, r9
    786c:	aa 1c       	adc	r10, r10
    786e:	bb 1c       	adc	r11, r11
    7870:	88 0c       	add	r8, r8
    7872:	99 1c       	adc	r9, r9
    7874:	aa 1c       	adc	r10, r10
    7876:	bb 1c       	adc	r11, r11
    7878:	88 0c       	add	r8, r8
    787a:	99 1c       	adc	r9, r9
    787c:	aa 1c       	adc	r10, r10
    787e:	bb 1c       	adc	r11, r11
    7880:	88 0c       	add	r8, r8
    7882:	99 1c       	adc	r9, r9
    7884:	aa 1c       	adc	r10, r10
    7886:	bb 1c       	adc	r11, r11
    7888:	88 0c       	add	r8, r8
    788a:	99 1c       	adc	r9, r9
    788c:	aa 1c       	adc	r10, r10
    788e:	bb 1c       	adc	r11, r11
    7890:	4d 80       	ldd	r4, Y+5	; 0x05
    7892:	5e 80       	ldd	r5, Y+6	; 0x06
    7894:	6f 80       	ldd	r6, Y+7	; 0x07
    7896:	78 84       	ldd	r7, Y+8	; 0x08
    7898:	c5 01       	movw	r24, r10
    789a:	b4 01       	movw	r22, r8
    789c:	a3 01       	movw	r20, r6
    789e:	92 01       	movw	r18, r4
    78a0:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    78a4:	cc 0c       	add	r12, r12
    78a6:	dd 1c       	adc	r13, r13
    78a8:	ee 1c       	adc	r14, r14
    78aa:	ff 1c       	adc	r15, r15
    78ac:	cc 0c       	add	r12, r12
    78ae:	dd 1c       	adc	r13, r13
    78b0:	ee 1c       	adc	r14, r14
    78b2:	ff 1c       	adc	r15, r15
    78b4:	cc 0c       	add	r12, r12
    78b6:	dd 1c       	adc	r13, r13
    78b8:	ee 1c       	adc	r14, r14
    78ba:	ff 1c       	adc	r15, r15
    78bc:	cc 0c       	add	r12, r12
    78be:	dd 1c       	adc	r13, r13
    78c0:	ee 1c       	adc	r14, r14
    78c2:	ff 1c       	adc	r15, r15
    78c4:	cc 0c       	add	r12, r12
    78c6:	dd 1c       	adc	r13, r13
    78c8:	ee 1c       	adc	r14, r14
    78ca:	ff 1c       	adc	r15, r15
    78cc:	cc 0c       	add	r12, r12
    78ce:	dd 1c       	adc	r13, r13
    78d0:	ee 1c       	adc	r14, r14
    78d2:	ff 1c       	adc	r15, r15
    78d4:	cc 0c       	add	r12, r12
    78d6:	dd 1c       	adc	r13, r13
    78d8:	ee 1c       	adc	r14, r14
    78da:	ff 1c       	adc	r15, r15
    78dc:	c2 0e       	add	r12, r18
    78de:	d3 1e       	adc	r13, r19
    78e0:	e4 1e       	adc	r14, r20
    78e2:	f5 1e       	adc	r15, r21
    78e4:	82 e0       	ldi	r24, 0x02	; 2
    78e6:	d8 1a       	sub	r13, r24
    78e8:	e1 08       	sbc	r14, r1
    78ea:	f1 08       	sbc	r15, r1
    78ec:	f8 01       	movw	r30, r16
    78ee:	c0 82       	st	Z, r12
    78f0:	d1 82       	std	Z+1, r13	; 0x01
    78f2:	e2 82       	std	Z+2, r14	; 0x02
    78f4:	f3 82       	std	Z+3, r15	; 0x03
    78f6:	c3 01       	movw	r24, r6
    78f8:	b2 01       	movw	r22, r4
    78fa:	0e 94 6f 48 	call	0x90de	; 0x90de <__mulsi3>
    78fe:	86 1a       	sub	r8, r22
    7900:	97 0a       	sbc	r9, r23
    7902:	a8 0a       	sbc	r10, r24
    7904:	b9 0a       	sbc	r11, r25
    7906:	84 82       	std	Z+4, r8	; 0x04
    7908:	95 82       	std	Z+5, r9	; 0x05
    790a:	a6 82       	std	Z+6, r10	; 0x06
    790c:	b7 82       	std	Z+7, r11	; 0x07
    790e:	40 86       	std	Z+8, r4	; 0x08
    7910:	51 86       	std	Z+9, r5	; 0x09
    7912:	62 86       	std	Z+10, r6	; 0x0a
    7914:	73 86       	std	Z+11, r7	; 0x0b
    7916:	80 e0       	ldi	r24, 0x00	; 0
    7918:	28 96       	adiw	r28, 0x08	; 8
    791a:	cd bf       	out	0x3d, r28	; 61
    791c:	de bf       	out	0x3e, r29	; 62
    791e:	df 91       	pop	r29
    7920:	cf 91       	pop	r28
    7922:	1f 91       	pop	r17
    7924:	0f 91       	pop	r16
    7926:	ff 90       	pop	r15
    7928:	ef 90       	pop	r14
    792a:	df 90       	pop	r13
    792c:	cf 90       	pop	r12
    792e:	bf 90       	pop	r11
    7930:	af 90       	pop	r10
    7932:	9f 90       	pop	r9
    7934:	8f 90       	pop	r8
    7936:	7f 90       	pop	r7
    7938:	6f 90       	pop	r6
    793a:	5f 90       	pop	r5
    793c:	4f 90       	pop	r4
    793e:	08 95       	ret

00007940 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    7940:	2f 92       	push	r2
    7942:	3f 92       	push	r3
    7944:	4f 92       	push	r4
    7946:	5f 92       	push	r5
    7948:	6f 92       	push	r6
    794a:	7f 92       	push	r7
    794c:	8f 92       	push	r8
    794e:	9f 92       	push	r9
    7950:	af 92       	push	r10
    7952:	bf 92       	push	r11
    7954:	cf 92       	push	r12
    7956:	df 92       	push	r13
    7958:	ef 92       	push	r14
    795a:	ff 92       	push	r15
    795c:	0f 93       	push	r16
    795e:	1f 93       	push	r17
    7960:	cf 93       	push	r28
    7962:	df 93       	push	r29
    7964:	cd b7       	in	r28, 0x3d	; 61
    7966:	de b7       	in	r29, 0x3e	; 62
    7968:	25 97       	sbiw	r28, 0x05	; 5
    796a:	cd bf       	out	0x3d, r28	; 61
    796c:	de bf       	out	0x3e, r29	; 62
    796e:	2b 01       	movw	r4, r22
    7970:	3c 01       	movw	r6, r24
    7972:	4a 83       	std	Y+2, r20	; 0x02
    7974:	5b 83       	std	Y+3, r21	; 0x03
    7976:	18 01       	movw	r2, r16
    7978:	81 e0       	ldi	r24, 0x01	; 1
    797a:	f9 01       	movw	r30, r18
    797c:	80 83       	st	Z, r24
    797e:	f0 e8       	ldi	r31, 0x80	; 128
    7980:	4f 16       	cp	r4, r31
    7982:	f1 ed       	ldi	r31, 0xD1	; 209
    7984:	5f 06       	cpc	r5, r31
    7986:	f0 ef       	ldi	r31, 0xF0	; 240
    7988:	6f 06       	cpc	r6, r31
    798a:	f8 e0       	ldi	r31, 0x08	; 8
    798c:	7f 06       	cpc	r7, r31
    798e:	d0 f0       	brcs	.+52     	; 0x79c4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x84>
    7990:	c3 01       	movw	r24, r6
    7992:	b2 01       	movw	r22, r4
    7994:	66 0f       	add	r22, r22
    7996:	77 1f       	adc	r23, r23
    7998:	88 1f       	adc	r24, r24
    799a:	99 1f       	adc	r25, r25
    799c:	66 0f       	add	r22, r22
    799e:	77 1f       	adc	r23, r23
    79a0:	88 1f       	adc	r24, r24
    79a2:	99 1f       	adc	r25, r25
    79a4:	c1 2c       	mov	r12, r1
    79a6:	d1 2c       	mov	r13, r1
    79a8:	76 01       	movw	r14, r12
    79aa:	68 94       	set
    79ac:	c2 f8       	bld	r12, 2
    79ae:	48 c0       	rjmp	.+144    	; 0x7a40 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    79b0:	21 e0       	ldi	r18, 0x01	; 1
    79b2:	2d 83       	std	Y+5, r18	; 0x05
    79b4:	0d c0       	rjmp	.+26     	; 0x79d0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    79b6:	69 01       	movw	r12, r18
    79b8:	7a 01       	movw	r14, r20
    79ba:	31 e0       	ldi	r19, 0x01	; 1
    79bc:	39 83       	std	Y+1, r19	; 0x01
    79be:	81 e0       	ldi	r24, 0x01	; 1
    79c0:	8d 83       	std	Y+5, r24	; 0x05
    79c2:	06 c0       	rjmp	.+12     	; 0x79d0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    79c4:	1c 82       	std	Y+4, r1	; 0x04
    79c6:	19 82       	std	Y+1, r1	; 0x01
    79c8:	1d 82       	std	Y+5, r1	; 0x05
    79ca:	c1 2c       	mov	r12, r1
    79cc:	d1 2c       	mov	r13, r1
    79ce:	76 01       	movw	r14, r12
    79d0:	8d 80       	ldd	r8, Y+5	; 0x05
    79d2:	81 10       	cpse	r8, r1
    79d4:	28 c0       	rjmp	.+80     	; 0x7a26 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xe6>
    79d6:	9c 80       	ldd	r9, Y+4	; 0x04
    79d8:	a9 2d       	mov	r26, r9
    79da:	b0 e0       	ldi	r27, 0x00	; 0
    79dc:	a3 01       	movw	r20, r6
    79de:	92 01       	movw	r18, r4
    79e0:	0e 94 07 49 	call	0x920e	; 0x920e <__muluhisi3>
    79e4:	00 e0       	ldi	r16, 0x00	; 0
    79e6:	19 ee       	ldi	r17, 0xE9	; 233
    79e8:	24 ea       	ldi	r18, 0xA4	; 164
    79ea:	35 e3       	ldi	r19, 0x35	; 53
    79ec:	48 01       	movw	r8, r16
    79ee:	59 01       	movw	r10, r18
    79f0:	86 1a       	sub	r8, r22
    79f2:	97 0a       	sbc	r9, r23
    79f4:	a8 0a       	sbc	r10, r24
    79f6:	b9 0a       	sbc	r11, r25
    79f8:	c5 01       	movw	r24, r10
    79fa:	b4 01       	movw	r22, r8
    79fc:	2c 81       	ldd	r18, Y+4	; 0x04
    79fe:	2e 5f       	subi	r18, 0xFE	; 254
    7a00:	2c 83       	std	Y+4, r18	; 0x04
    7a02:	81 14       	cp	r8, r1
    7a04:	36 e4       	ldi	r19, 0x46	; 70
    7a06:	93 06       	cpc	r9, r19
    7a08:	33 ec       	ldi	r19, 0xC3	; 195
    7a0a:	a3 06       	cpc	r10, r19
    7a0c:	33 e2       	ldi	r19, 0x23	; 35
    7a0e:	b3 06       	cpc	r11, r19
    7a10:	78 f2       	brcs	.-98     	; 0x79b0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x70>
    7a12:	a3 01       	movw	r20, r6
    7a14:	92 01       	movw	r18, r4
    7a16:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    7a1a:	24 30       	cpi	r18, 0x04	; 4
    7a1c:	31 05       	cpc	r19, r1
    7a1e:	41 05       	cpc	r20, r1
    7a20:	51 05       	cpc	r21, r1
    7a22:	48 f6       	brcc	.-110    	; 0x79b6 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x76>
    7a24:	d5 cf       	rjmp	.-86     	; 0x79d0 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7a26:	89 80       	ldd	r8, Y+1	; 0x01
    7a28:	88 20       	and	r8, r8
    7a2a:	39 f0       	breq	.+14     	; 0x7a3a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xfa>
    7a2c:	a7 01       	movw	r20, r14
    7a2e:	96 01       	movw	r18, r12
    7a30:	c3 01       	movw	r24, r6
    7a32:	b2 01       	movw	r22, r4
    7a34:	0e 94 6f 48 	call	0x90de	; 0x90de <__mulsi3>
    7a38:	03 c0       	rjmp	.+6      	; 0x7a40 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7a3a:	60 e0       	ldi	r22, 0x00	; 0
    7a3c:	70 e0       	ldi	r23, 0x00	; 0
    7a3e:	cb 01       	movw	r24, r22
    7a40:	21 e0       	ldi	r18, 0x01	; 1
    7a42:	34 e0       	ldi	r19, 0x04	; 4
    7a44:	c3 16       	cp	r12, r19
    7a46:	d1 04       	cpc	r13, r1
    7a48:	e1 04       	cpc	r14, r1
    7a4a:	f1 04       	cpc	r15, r1
    7a4c:	09 f0       	breq	.+2      	; 0x7a50 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x110>
    7a4e:	20 e0       	ldi	r18, 0x00	; 0
    7a50:	f1 01       	movw	r30, r2
    7a52:	20 83       	st	Z, r18
    7a54:	cc 0c       	add	r12, r12
    7a56:	dd 1c       	adc	r13, r13
    7a58:	ee 1c       	adc	r14, r14
    7a5a:	ff 1c       	adc	r15, r15
    7a5c:	cc 0c       	add	r12, r12
    7a5e:	dd 1c       	adc	r13, r13
    7a60:	ee 1c       	adc	r14, r14
    7a62:	ff 1c       	adc	r15, r15
    7a64:	cc 0c       	add	r12, r12
    7a66:	dd 1c       	adc	r13, r13
    7a68:	ee 1c       	adc	r14, r14
    7a6a:	ff 1c       	adc	r15, r15
    7a6c:	cc 0c       	add	r12, r12
    7a6e:	dd 1c       	adc	r13, r13
    7a70:	ee 1c       	adc	r14, r14
    7a72:	ff 1c       	adc	r15, r15
    7a74:	cc 0c       	add	r12, r12
    7a76:	dd 1c       	adc	r13, r13
    7a78:	ee 1c       	adc	r14, r14
    7a7a:	ff 1c       	adc	r15, r15
    7a7c:	cc 0c       	add	r12, r12
    7a7e:	dd 1c       	adc	r13, r13
    7a80:	ee 1c       	adc	r14, r14
    7a82:	ff 1c       	adc	r15, r15
    7a84:	cc 0c       	add	r12, r12
    7a86:	dd 1c       	adc	r13, r13
    7a88:	ee 1c       	adc	r14, r14
    7a8a:	ff 1c       	adc	r15, r15
    7a8c:	f2 e0       	ldi	r31, 0x02	; 2
    7a8e:	df 1a       	sub	r13, r31
    7a90:	e1 08       	sbc	r14, r1
    7a92:	f1 08       	sbc	r15, r1
    7a94:	ea 81       	ldd	r30, Y+2	; 0x02
    7a96:	fb 81       	ldd	r31, Y+3	; 0x03
    7a98:	c0 82       	st	Z, r12
    7a9a:	d1 82       	std	Z+1, r13	; 0x01
    7a9c:	e2 82       	std	Z+2, r14	; 0x02
    7a9e:	f3 82       	std	Z+3, r15	; 0x03
    7aa0:	14 82       	std	Z+4, r1	; 0x04
    7aa2:	15 82       	std	Z+5, r1	; 0x05
    7aa4:	16 82       	std	Z+6, r1	; 0x06
    7aa6:	17 82       	std	Z+7, r1	; 0x07
    7aa8:	01 e0       	ldi	r16, 0x01	; 1
    7aaa:	10 e0       	ldi	r17, 0x00	; 0
    7aac:	20 e0       	ldi	r18, 0x00	; 0
    7aae:	30 e0       	ldi	r19, 0x00	; 0
    7ab0:	00 87       	std	Z+8, r16	; 0x08
    7ab2:	11 87       	std	Z+9, r17	; 0x09
    7ab4:	22 87       	std	Z+10, r18	; 0x0a
    7ab6:	33 87       	std	Z+11, r19	; 0x0b
    7ab8:	25 96       	adiw	r28, 0x05	; 5
    7aba:	cd bf       	out	0x3d, r28	; 61
    7abc:	de bf       	out	0x3e, r29	; 62
    7abe:	df 91       	pop	r29
    7ac0:	cf 91       	pop	r28
    7ac2:	1f 91       	pop	r17
    7ac4:	0f 91       	pop	r16
    7ac6:	ff 90       	pop	r15
    7ac8:	ef 90       	pop	r14
    7aca:	df 90       	pop	r13
    7acc:	cf 90       	pop	r12
    7ace:	bf 90       	pop	r11
    7ad0:	af 90       	pop	r10
    7ad2:	9f 90       	pop	r9
    7ad4:	8f 90       	pop	r8
    7ad6:	7f 90       	pop	r7
    7ad8:	6f 90       	pop	r6
    7ada:	5f 90       	pop	r5
    7adc:	4f 90       	pop	r4
    7ade:	3f 90       	pop	r3
    7ae0:	2f 90       	pop	r2
    7ae2:	08 95       	ret

00007ae4 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
    7ae4:	2f 92       	push	r2
    7ae6:	3f 92       	push	r3
    7ae8:	4f 92       	push	r4
    7aea:	5f 92       	push	r5
    7aec:	6f 92       	push	r6
    7aee:	7f 92       	push	r7
    7af0:	8f 92       	push	r8
    7af2:	9f 92       	push	r9
    7af4:	af 92       	push	r10
    7af6:	bf 92       	push	r11
    7af8:	cf 92       	push	r12
    7afa:	df 92       	push	r13
    7afc:	ef 92       	push	r14
    7afe:	ff 92       	push	r15
    7b00:	0f 93       	push	r16
    7b02:	1f 93       	push	r17
    7b04:	cf 93       	push	r28
    7b06:	df 93       	push	r29
    7b08:	cd b7       	in	r28, 0x3d	; 61
    7b0a:	de b7       	in	r29, 0x3e	; 62
    7b0c:	62 97       	sbiw	r28, 0x12	; 18
    7b0e:	cd bf       	out	0x3d, r28	; 61
    7b10:	de bf       	out	0x3e, r29	; 62
    7b12:	4b 01       	movw	r8, r22
    7b14:	5c 01       	movw	r10, r24
    7b16:	1a 01       	movw	r2, r20
    7b18:	29 8b       	std	Y+17, r18	; 0x11
    7b1a:	3a 8b       	std	Y+18, r19	; 0x12
    7b1c:	60 91 1a 49 	lds	r22, 0x491A	; 0x80491a <_ZL8freqVCOB>
    7b20:	70 91 1b 49 	lds	r23, 0x491B	; 0x80491b <_ZL8freqVCOB+0x1>
    7b24:	80 91 1c 49 	lds	r24, 0x491C	; 0x80491c <_ZL8freqVCOB+0x2>
    7b28:	90 91 1d 49 	lds	r25, 0x491D	; 0x80491d <_ZL8freqVCOB+0x3>
    7b2c:	a5 01       	movw	r20, r10
    7b2e:	94 01       	movw	r18, r8
    7b30:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    7b34:	29 87       	std	Y+9, r18	; 0x09
    7b36:	3a 87       	std	Y+10, r19	; 0x0a
    7b38:	4b 87       	std	Y+11, r20	; 0x0b
    7b3a:	5c 87       	std	Y+12, r21	; 0x0c
    7b3c:	69 01       	movw	r12, r18
    7b3e:	7a 01       	movw	r14, r20
    7b40:	69 83       	std	Y+1, r22	; 0x01
    7b42:	7a 83       	std	Y+2, r23	; 0x02
    7b44:	8b 83       	std	Y+3, r24	; 0x03
    7b46:	9c 83       	std	Y+4, r25	; 0x04
    7b48:	8d 82       	std	Y+5, r8	; 0x05
    7b4a:	9e 82       	std	Y+6, r9	; 0x06
    7b4c:	af 82       	std	Y+7, r10	; 0x07
    7b4e:	b8 86       	std	Y+8, r11	; 0x08
    7b50:	be 01       	movw	r22, r28
    7b52:	6b 5f       	subi	r22, 0xFB	; 251
    7b54:	7f 4f       	sbci	r23, 0xFF	; 255
    7b56:	ce 01       	movw	r24, r28
    7b58:	01 96       	adiw	r24, 0x01	; 1
    7b5a:	0e 94 88 3b 	call	0x7710	; 0x7710 <_Z13reduce_by_gcdPmS_>
    7b5e:	80 91 1a 49 	lds	r24, 0x491A	; 0x80491a <_ZL8freqVCOB>
    7b62:	90 91 1b 49 	lds	r25, 0x491B	; 0x80491b <_ZL8freqVCOB+0x1>
    7b66:	a0 91 1c 49 	lds	r26, 0x491C	; 0x80491c <_ZL8freqVCOB+0x2>
    7b6a:	b0 91 1d 49 	lds	r27, 0x491D	; 0x80491d <_ZL8freqVCOB+0x3>
    7b6e:	8d 87       	std	Y+13, r24	; 0x0d
    7b70:	9e 87       	std	Y+14, r25	; 0x0e
    7b72:	af 87       	std	Y+15, r26	; 0x0f
    7b74:	b8 8b       	std	Y+16, r27	; 0x10
    7b76:	4d 80       	ldd	r4, Y+5	; 0x05
    7b78:	5e 80       	ldd	r5, Y+6	; 0x06
    7b7a:	6f 80       	ldd	r6, Y+7	; 0x07
    7b7c:	78 84       	ldd	r7, Y+8	; 0x08
    7b7e:	29 85       	ldd	r18, Y+9	; 0x09
    7b80:	3a 85       	ldd	r19, Y+10	; 0x0a
    7b82:	4b 85       	ldd	r20, Y+11	; 0x0b
    7b84:	5c 85       	ldd	r21, Y+12	; 0x0c
    7b86:	c3 01       	movw	r24, r6
    7b88:	b2 01       	movw	r22, r4
    7b8a:	0e 94 6f 48 	call	0x90de	; 0x90de <__mulsi3>
    7b8e:	89 80       	ldd	r8, Y+1	; 0x01
    7b90:	9a 80       	ldd	r9, Y+2	; 0x02
    7b92:	ab 80       	ldd	r10, Y+3	; 0x03
    7b94:	bc 80       	ldd	r11, Y+4	; 0x04
    7b96:	9b 01       	movw	r18, r22
    7b98:	ac 01       	movw	r20, r24
    7b9a:	28 0d       	add	r18, r8
    7b9c:	39 1d       	adc	r19, r9
    7b9e:	4a 1d       	adc	r20, r10
    7ba0:	5b 1d       	adc	r21, r11
    7ba2:	6d 85       	ldd	r22, Y+13	; 0x0d
    7ba4:	7e 85       	ldd	r23, Y+14	; 0x0e
    7ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
    7ba8:	98 89       	ldd	r25, Y+16	; 0x10
    7baa:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    7bae:	ca 01       	movw	r24, r20
    7bb0:	b9 01       	movw	r22, r18
    7bb2:	a3 01       	movw	r20, r6
    7bb4:	92 01       	movw	r18, r4
    7bb6:	0e 94 6f 48 	call	0x90de	; 0x90de <__mulsi3>
    7bba:	6d 87       	std	Y+13, r22	; 0x0d
    7bbc:	7e 87       	std	Y+14, r23	; 0x0e
    7bbe:	8f 87       	std	Y+15, r24	; 0x0f
    7bc0:	98 8b       	std	Y+16, r25	; 0x10
    7bc2:	89 28       	or	r8, r9
    7bc4:	8a 28       	or	r8, r10
    7bc6:	8b 28       	or	r8, r11
    7bc8:	29 f4       	brne	.+10     	; 0x7bd4 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf0>
    7bca:	99 85       	ldd	r25, Y+9	; 0x09
    7bcc:	90 ff       	sbrs	r25, 0
    7bce:	04 c0       	rjmp	.+8      	; 0x7bd8 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf4>
    7bd0:	80 e0       	ldi	r24, 0x00	; 0
    7bd2:	03 c0       	rjmp	.+6      	; 0x7bda <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7bd4:	80 e0       	ldi	r24, 0x00	; 0
    7bd6:	01 c0       	rjmp	.+2      	; 0x7bda <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7bd8:	81 e0       	ldi	r24, 0x01	; 1
    7bda:	a9 89       	ldd	r26, Y+17	; 0x11
    7bdc:	ba 89       	ldd	r27, Y+18	; 0x12
    7bde:	8c 93       	st	X, r24
    7be0:	b4 e0       	ldi	r27, 0x04	; 4
    7be2:	cb 16       	cp	r12, r27
    7be4:	d1 04       	cpc	r13, r1
    7be6:	e1 04       	cpc	r14, r1
    7be8:	f1 04       	cpc	r15, r1
    7bea:	09 f0       	breq	.+2      	; 0x7bee <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x10a>
    7bec:	80 e0       	ldi	r24, 0x00	; 0
    7bee:	f8 01       	movw	r30, r16
    7bf0:	80 83       	st	Z, r24
    7bf2:	88 23       	and	r24, r24
    7bf4:	a1 f0       	breq	.+40     	; 0x7c1e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x13a>
    7bf6:	d1 01       	movw	r26, r2
    7bf8:	1d 92       	st	X+, r1
    7bfa:	1d 92       	st	X+, r1
    7bfc:	1d 92       	st	X+, r1
    7bfe:	1c 92       	st	X, r1
    7c00:	13 97       	sbiw	r26, 0x03	; 3
    7c02:	f1 01       	movw	r30, r2
    7c04:	14 82       	std	Z+4, r1	; 0x04
    7c06:	15 82       	std	Z+5, r1	; 0x05
    7c08:	16 82       	std	Z+6, r1	; 0x06
    7c0a:	17 82       	std	Z+7, r1	; 0x07
    7c0c:	81 e0       	ldi	r24, 0x01	; 1
    7c0e:	90 e0       	ldi	r25, 0x00	; 0
    7c10:	a0 e0       	ldi	r26, 0x00	; 0
    7c12:	b0 e0       	ldi	r27, 0x00	; 0
    7c14:	80 87       	std	Z+8, r24	; 0x08
    7c16:	91 87       	std	Z+9, r25	; 0x09
    7c18:	a2 87       	std	Z+10, r26	; 0x0a
    7c1a:	b3 87       	std	Z+11, r27	; 0x0b
    7c1c:	69 c0       	rjmp	.+210    	; 0x7cf0 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x20c>
    7c1e:	89 80       	ldd	r8, Y+1	; 0x01
    7c20:	9a 80       	ldd	r9, Y+2	; 0x02
    7c22:	ab 80       	ldd	r10, Y+3	; 0x03
    7c24:	bc 80       	ldd	r11, Y+4	; 0x04
    7c26:	88 0c       	add	r8, r8
    7c28:	99 1c       	adc	r9, r9
    7c2a:	aa 1c       	adc	r10, r10
    7c2c:	bb 1c       	adc	r11, r11
    7c2e:	88 0c       	add	r8, r8
    7c30:	99 1c       	adc	r9, r9
    7c32:	aa 1c       	adc	r10, r10
    7c34:	bb 1c       	adc	r11, r11
    7c36:	88 0c       	add	r8, r8
    7c38:	99 1c       	adc	r9, r9
    7c3a:	aa 1c       	adc	r10, r10
    7c3c:	bb 1c       	adc	r11, r11
    7c3e:	88 0c       	add	r8, r8
    7c40:	99 1c       	adc	r9, r9
    7c42:	aa 1c       	adc	r10, r10
    7c44:	bb 1c       	adc	r11, r11
    7c46:	88 0c       	add	r8, r8
    7c48:	99 1c       	adc	r9, r9
    7c4a:	aa 1c       	adc	r10, r10
    7c4c:	bb 1c       	adc	r11, r11
    7c4e:	88 0c       	add	r8, r8
    7c50:	99 1c       	adc	r9, r9
    7c52:	aa 1c       	adc	r10, r10
    7c54:	bb 1c       	adc	r11, r11
    7c56:	88 0c       	add	r8, r8
    7c58:	99 1c       	adc	r9, r9
    7c5a:	aa 1c       	adc	r10, r10
    7c5c:	bb 1c       	adc	r11, r11
    7c5e:	4d 80       	ldd	r4, Y+5	; 0x05
    7c60:	5e 80       	ldd	r5, Y+6	; 0x06
    7c62:	6f 80       	ldd	r6, Y+7	; 0x07
    7c64:	78 84       	ldd	r7, Y+8	; 0x08
    7c66:	c5 01       	movw	r24, r10
    7c68:	b4 01       	movw	r22, r8
    7c6a:	a3 01       	movw	r20, r6
    7c6c:	92 01       	movw	r18, r4
    7c6e:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    7c72:	c9 84       	ldd	r12, Y+9	; 0x09
    7c74:	da 84       	ldd	r13, Y+10	; 0x0a
    7c76:	eb 84       	ldd	r14, Y+11	; 0x0b
    7c78:	fc 84       	ldd	r15, Y+12	; 0x0c
    7c7a:	cc 0c       	add	r12, r12
    7c7c:	dd 1c       	adc	r13, r13
    7c7e:	ee 1c       	adc	r14, r14
    7c80:	ff 1c       	adc	r15, r15
    7c82:	cc 0c       	add	r12, r12
    7c84:	dd 1c       	adc	r13, r13
    7c86:	ee 1c       	adc	r14, r14
    7c88:	ff 1c       	adc	r15, r15
    7c8a:	cc 0c       	add	r12, r12
    7c8c:	dd 1c       	adc	r13, r13
    7c8e:	ee 1c       	adc	r14, r14
    7c90:	ff 1c       	adc	r15, r15
    7c92:	cc 0c       	add	r12, r12
    7c94:	dd 1c       	adc	r13, r13
    7c96:	ee 1c       	adc	r14, r14
    7c98:	ff 1c       	adc	r15, r15
    7c9a:	cc 0c       	add	r12, r12
    7c9c:	dd 1c       	adc	r13, r13
    7c9e:	ee 1c       	adc	r14, r14
    7ca0:	ff 1c       	adc	r15, r15
    7ca2:	cc 0c       	add	r12, r12
    7ca4:	dd 1c       	adc	r13, r13
    7ca6:	ee 1c       	adc	r14, r14
    7ca8:	ff 1c       	adc	r15, r15
    7caa:	cc 0c       	add	r12, r12
    7cac:	dd 1c       	adc	r13, r13
    7cae:	ee 1c       	adc	r14, r14
    7cb0:	ff 1c       	adc	r15, r15
    7cb2:	c2 0e       	add	r12, r18
    7cb4:	d3 1e       	adc	r13, r19
    7cb6:	e4 1e       	adc	r14, r20
    7cb8:	f5 1e       	adc	r15, r21
    7cba:	f2 e0       	ldi	r31, 0x02	; 2
    7cbc:	df 1a       	sub	r13, r31
    7cbe:	e1 08       	sbc	r14, r1
    7cc0:	f1 08       	sbc	r15, r1
    7cc2:	d1 01       	movw	r26, r2
    7cc4:	cd 92       	st	X+, r12
    7cc6:	dd 92       	st	X+, r13
    7cc8:	ed 92       	st	X+, r14
    7cca:	fc 92       	st	X, r15
    7ccc:	13 97       	sbiw	r26, 0x03	; 3
    7cce:	c3 01       	movw	r24, r6
    7cd0:	b2 01       	movw	r22, r4
    7cd2:	0e 94 6f 48 	call	0x90de	; 0x90de <__mulsi3>
    7cd6:	86 1a       	sub	r8, r22
    7cd8:	97 0a       	sbc	r9, r23
    7cda:	a8 0a       	sbc	r10, r24
    7cdc:	b9 0a       	sbc	r11, r25
    7cde:	f1 01       	movw	r30, r2
    7ce0:	84 82       	std	Z+4, r8	; 0x04
    7ce2:	95 82       	std	Z+5, r9	; 0x05
    7ce4:	a6 82       	std	Z+6, r10	; 0x06
    7ce6:	b7 82       	std	Z+7, r11	; 0x07
    7ce8:	40 86       	std	Z+8, r4	; 0x08
    7cea:	51 86       	std	Z+9, r5	; 0x09
    7cec:	62 86       	std	Z+10, r6	; 0x0a
    7cee:	73 86       	std	Z+11, r7	; 0x0b
    7cf0:	6d 85       	ldd	r22, Y+13	; 0x0d
    7cf2:	7e 85       	ldd	r23, Y+14	; 0x0e
    7cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    7cf6:	98 89       	ldd	r25, Y+16	; 0x10
    7cf8:	62 96       	adiw	r28, 0x12	; 18
    7cfa:	cd bf       	out	0x3d, r28	; 61
    7cfc:	de bf       	out	0x3e, r29	; 62
    7cfe:	df 91       	pop	r29
    7d00:	cf 91       	pop	r28
    7d02:	1f 91       	pop	r17
    7d04:	0f 91       	pop	r16
    7d06:	ff 90       	pop	r15
    7d08:	ef 90       	pop	r14
    7d0a:	df 90       	pop	r13
    7d0c:	cf 90       	pop	r12
    7d0e:	bf 90       	pop	r11
    7d10:	af 90       	pop	r10
    7d12:	9f 90       	pop	r9
    7d14:	8f 90       	pop	r8
    7d16:	7f 90       	pop	r7
    7d18:	6f 90       	pop	r6
    7d1a:	5f 90       	pop	r5
    7d1c:	4f 90       	pop	r4
    7d1e:	3f 90       	pop	r3
    7d20:	2f 90       	pop	r2
    7d22:	08 95       	ret

00007d24 <_Z17si5351_write_bulkhPhh>:
    7d24:	ff 92       	push	r15
    7d26:	0f 93       	push	r16
    7d28:	1f 93       	push	r17
    7d2a:	cf 93       	push	r28
    7d2c:	df 93       	push	r29
    7d2e:	f8 2e       	mov	r15, r24
    7d30:	8b 01       	movw	r16, r22
    7d32:	d4 2f       	mov	r29, r20
    7d34:	8a e0       	ldi	r24, 0x0A	; 10
    7d36:	cf ef       	ldi	r28, 0xFF	; 255
    7d38:	c8 0f       	add	r28, r24
    7d3a:	88 23       	and	r24, r24
    7d3c:	71 f0       	breq	.+28     	; 0x7d5a <_Z17si5351_write_bulkhPhh+0x36>
    7d3e:	2d 2f       	mov	r18, r29
    7d40:	a8 01       	movw	r20, r16
    7d42:	6f 2d       	mov	r22, r15
    7d44:	80 ec       	ldi	r24, 0xC0	; 192
    7d46:	0e 94 a4 34 	call	0x6948	; 0x6948 <I2C_1_SendData>
    7d4a:	21 e0       	ldi	r18, 0x01	; 1
    7d4c:	d8 13       	cpse	r29, r24
    7d4e:	01 c0       	rjmp	.+2      	; 0x7d52 <_Z17si5351_write_bulkhPhh+0x2e>
    7d50:	20 e0       	ldi	r18, 0x00	; 0
    7d52:	d8 17       	cp	r29, r24
    7d54:	21 f0       	breq	.+8      	; 0x7d5e <_Z17si5351_write_bulkhPhh+0x3a>
    7d56:	91 e0       	ldi	r25, 0x01	; 1
    7d58:	03 c0       	rjmp	.+6      	; 0x7d60 <_Z17si5351_write_bulkhPhh+0x3c>
    7d5a:	90 e0       	ldi	r25, 0x00	; 0
    7d5c:	01 c0       	rjmp	.+2      	; 0x7d60 <_Z17si5351_write_bulkhPhh+0x3c>
    7d5e:	90 e0       	ldi	r25, 0x00	; 0
    7d60:	8c 2f       	mov	r24, r28
    7d62:	91 11       	cpse	r25, r1
    7d64:	e8 cf       	rjmp	.-48     	; 0x7d36 <_Z17si5351_write_bulkhPhh+0x12>
    7d66:	82 2f       	mov	r24, r18
    7d68:	df 91       	pop	r29
    7d6a:	cf 91       	pop	r28
    7d6c:	1f 91       	pop	r17
    7d6e:	0f 91       	pop	r16
    7d70:	ff 90       	pop	r15
    7d72:	08 95       	ret

00007d74 <_Z7set_pllm10si5351_pll>:
    7d74:	1f 93       	push	r17
    7d76:	cf 93       	push	r28
    7d78:	df 93       	push	r29
    7d7a:	cd b7       	in	r28, 0x3d	; 61
    7d7c:	de b7       	in	r29, 0x3e	; 62
    7d7e:	66 97       	sbiw	r28, 0x16	; 22
    7d80:	cd bf       	out	0x3d, r28	; 61
    7d82:	de bf       	out	0x3e, r29	; 62
    7d84:	14 2f       	mov	r17, r20
    7d86:	ae 01       	movw	r20, r28
    7d88:	4f 5f       	subi	r20, 0xFF	; 255
    7d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d8c:	0e 94 f5 3b 	call	0x77ea	; 0x77ea <_Z8pll_calcmP13u_si5351_regs>
    7d90:	81 11       	cpse	r24, r1
    7d92:	28 c0       	rjmp	.+80     	; 0x7de4 <_Z7set_pllm10si5351_pll+0x70>
    7d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d96:	8d 87       	std	Y+13, r24	; 0x0d
    7d98:	89 85       	ldd	r24, Y+9	; 0x09
    7d9a:	8e 87       	std	Y+14, r24	; 0x0e
    7d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    7d9e:	83 70       	andi	r24, 0x03	; 3
    7da0:	8f 87       	std	Y+15, r24	; 0x0f
    7da2:	8a 81       	ldd	r24, Y+2	; 0x02
    7da4:	88 8b       	std	Y+16, r24	; 0x10
    7da6:	89 81       	ldd	r24, Y+1	; 0x01
    7da8:	89 8b       	std	Y+17, r24	; 0x11
    7daa:	9b 85       	ldd	r25, Y+11	; 0x0b
    7dac:	8f 81       	ldd	r24, Y+7	; 0x07
    7dae:	8f 70       	andi	r24, 0x0F	; 15
    7db0:	20 e1       	ldi	r18, 0x10	; 16
    7db2:	92 9f       	mul	r25, r18
    7db4:	80 0d       	add	r24, r0
    7db6:	11 24       	eor	r1, r1
    7db8:	8a 8b       	std	Y+18, r24	; 0x12
    7dba:	8e 81       	ldd	r24, Y+6	; 0x06
    7dbc:	8b 8b       	std	Y+19, r24	; 0x13
    7dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    7dc0:	8c 8b       	std	Y+20, r24	; 0x14
    7dc2:	11 30       	cpi	r17, 0x01	; 1
    7dc4:	41 f4       	brne	.+16     	; 0x7dd6 <_Z7set_pllm10si5351_pll+0x62>
    7dc6:	48 e0       	ldi	r20, 0x08	; 8
    7dc8:	be 01       	movw	r22, r28
    7dca:	63 5f       	subi	r22, 0xF3	; 243
    7dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    7dce:	8a e1       	ldi	r24, 0x1A	; 26
    7dd0:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    7dd4:	07 c0       	rjmp	.+14     	; 0x7de4 <_Z7set_pllm10si5351_pll+0x70>
    7dd6:	48 e0       	ldi	r20, 0x08	; 8
    7dd8:	be 01       	movw	r22, r28
    7dda:	63 5f       	subi	r22, 0xF3	; 243
    7ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    7dde:	82 e2       	ldi	r24, 0x22	; 34
    7de0:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    7de4:	66 96       	adiw	r28, 0x16	; 22
    7de6:	cd bf       	out	0x3d, r28	; 61
    7de8:	de bf       	out	0x3e, r29	; 62
    7dea:	df 91       	pop	r29
    7dec:	cf 91       	pop	r28
    7dee:	1f 91       	pop	r17
    7df0:	08 95       	ret

00007df2 <_Z16si5351_read_bulkhPhh>:
		while(tries-- && (fail = I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
		return(fail);
	}

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    7df2:	ff 92       	push	r15
    7df4:	0f 93       	push	r16
    7df6:	1f 93       	push	r17
    7df8:	cf 93       	push	r28
    7dfa:	df 93       	push	r29
    7dfc:	f8 2e       	mov	r15, r24
    7dfe:	8b 01       	movw	r16, r22
    7e00:	d4 2f       	mov	r29, r20
		uint8_t tries = 10;
    7e02:	8a e0       	ldi	r24, 0x0A	; 10
		bool fail;
		while(tries-- && (fail = I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    7e04:	cf ef       	ldi	r28, 0xFF	; 255
    7e06:	c8 0f       	add	r28, r24
    7e08:	88 23       	and	r24, r24
    7e0a:	71 f0       	breq	.+28     	; 0x7e28 <_Z16si5351_read_bulkhPhh+0x36>
    7e0c:	2d 2f       	mov	r18, r29
    7e0e:	a8 01       	movw	r20, r16
    7e10:	6f 2d       	mov	r22, r15
    7e12:	80 ec       	ldi	r24, 0xC0	; 192
    7e14:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <I2C_1_GetData>
    7e18:	21 e0       	ldi	r18, 0x01	; 1
    7e1a:	d8 13       	cpse	r29, r24
    7e1c:	01 c0       	rjmp	.+2      	; 0x7e20 <_Z16si5351_read_bulkhPhh+0x2e>
    7e1e:	20 e0       	ldi	r18, 0x00	; 0
    7e20:	d8 17       	cp	r29, r24
    7e22:	21 f0       	breq	.+8      	; 0x7e2c <_Z16si5351_read_bulkhPhh+0x3a>
    7e24:	91 e0       	ldi	r25, 0x01	; 1
    7e26:	03 c0       	rjmp	.+6      	; 0x7e2e <_Z16si5351_read_bulkhPhh+0x3c>
    7e28:	90 e0       	ldi	r25, 0x00	; 0
    7e2a:	01 c0       	rjmp	.+2      	; 0x7e2e <_Z16si5351_read_bulkhPhh+0x3c>
    7e2c:	90 e0       	ldi	r25, 0x00	; 0
    7e2e:	8c 2f       	mov	r24, r28
    7e30:	91 11       	cpse	r25, r1
    7e32:	e8 cf       	rjmp	.-48     	; 0x7e04 <_Z16si5351_read_bulkhPhh+0x12>
		return(fail);
	}
    7e34:	82 2f       	mov	r24, r18
    7e36:	df 91       	pop	r29
    7e38:	cf 91       	pop	r28
    7e3a:	1f 91       	pop	r17
    7e3c:	0f 91       	pop	r16
    7e3e:	ff 90       	pop	r15
    7e40:	08 95       	ret

00007e42 <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	bool si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    7e42:	cf 92       	push	r12
    7e44:	df 92       	push	r13
    7e46:	ef 92       	push	r14
    7e48:	ff 92       	push	r15
    7e4a:	1f 93       	push	r17
    7e4c:	cf 93       	push	r28
    7e4e:	df 93       	push	r29
    7e50:	00 d0       	rcall	.+0      	; 0x7e52 <si5351_init+0x10>
    7e52:	cd b7       	in	r28, 0x3d	; 61
    7e54:	de b7       	in	r29, 0x3e	; 62
    7e56:	18 2f       	mov	r17, r24
    7e58:	6a 01       	movw	r12, r20
    7e5a:	7b 01       	movw	r14, r22
		static bool err = false;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    7e5c:	0e 94 88 34 	call	0x6910	; 0x6910 <I2C_1_Init>
			uint8_t result_val = 0x00;
			bool result = false;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    7e60:	10 92 1a 49 	sts	0x491A, r1	; 0x80491a <_ZL8freqVCOB>
    7e64:	10 92 1b 49 	sts	0x491B, r1	; 0x80491b <_ZL8freqVCOB+0x1>
    7e68:	10 92 1c 49 	sts	0x491C, r1	; 0x80491c <_ZL8freqVCOB+0x2>
    7e6c:	10 92 1d 49 	sts	0x491D, r1	; 0x80491d <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    7e70:	80 e4       	ldi	r24, 0x40	; 64
    7e72:	98 e7       	ldi	r25, 0x78	; 120
    7e74:	ad e7       	ldi	r26, 0x7D	; 125
    7e76:	b1 e0       	ldi	r27, 0x01	; 1
    7e78:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    7e7c:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    7e80:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    7e84:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    7e88:	10 92 19 49 	sts	0x4919, r1	; 0x804919 <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    7e8c:	8f ef       	ldi	r24, 0xFF	; 255
    7e8e:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    7e90:	41 e0       	ldi	r20, 0x01	; 1
    7e92:	be 01       	movw	r22, r28
    7e94:	6f 5f       	subi	r22, 0xFF	; 255
    7e96:	7f 4f       	sbci	r23, 0xFF	; 255
    7e98:	83 e0       	ldi	r24, 0x03	; 3
    7e9a:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    7e9e:	80 93 0b 49 	sts	0x490B, r24	; 0x80490b <_ZZ11si5351_initE3err>
		
		if(err) return err;
    7ea2:	81 11       	cpse	r24, r1
    7ea4:	76 c0       	rjmp	.+236    	; 0x7f92 <si5351_init+0x150>
		/* Power down clocks */
		data[0] = 0xCC;
    7ea6:	8c ec       	ldi	r24, 0xCC	; 204
    7ea8:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    7eaa:	41 e0       	ldi	r20, 0x01	; 1
    7eac:	be 01       	movw	r22, r28
    7eae:	6f 5f       	subi	r22, 0xFF	; 255
    7eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    7eb2:	80 e1       	ldi	r24, 0x10	; 16
    7eb4:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    7eb8:	90 91 0b 49 	lds	r25, 0x490B	; 0x80490b <_ZZ11si5351_initE3err>
    7ebc:	89 2b       	or	r24, r25
    7ebe:	80 93 0b 49 	sts	0x490B, r24	; 0x80490b <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x11, data, 1);
    7ec2:	41 e0       	ldi	r20, 0x01	; 1
    7ec4:	be 01       	movw	r22, r28
    7ec6:	6f 5f       	subi	r22, 0xFF	; 255
    7ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    7eca:	81 e1       	ldi	r24, 0x11	; 17
    7ecc:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    7ed0:	90 91 0b 49 	lds	r25, 0x490B	; 0x80490b <_ZZ11si5351_initE3err>
    7ed4:	89 2b       	or	r24, r25
    7ed6:	80 93 0b 49 	sts	0x490B, r24	; 0x80490b <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x12, data, 1);
    7eda:	41 e0       	ldi	r20, 0x01	; 1
    7edc:	be 01       	movw	r22, r28
    7ede:	6f 5f       	subi	r22, 0xFF	; 255
    7ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ee2:	82 e1       	ldi	r24, 0x12	; 18
    7ee4:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    7ee8:	90 91 0b 49 	lds	r25, 0x490B	; 0x80490b <_ZZ11si5351_initE3err>
    7eec:	89 2b       	or	r24, r25
    7eee:	80 93 0b 49 	sts	0x490B, r24	; 0x80490b <_ZZ11si5351_initE3err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    7ef2:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    7ef4:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    7ef6:	41 e0       	ldi	r20, 0x01	; 1
    7ef8:	be 01       	movw	r22, r28
    7efa:	6f 5f       	subi	r22, 0xFF	; 255
    7efc:	7f 4f       	sbci	r23, 0xFF	; 255
    7efe:	87 eb       	ldi	r24, 0xB7	; 183
    7f00:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    7f04:	90 91 0b 49 	lds	r25, 0x490B	; 0x80490b <_ZZ11si5351_initE3err>
    7f08:	89 2b       	or	r24, r25
    7f0a:	80 93 0b 49 	sts	0x490B, r24	; 0x80490b <_ZZ11si5351_initE3err>

		if(!ref_osc_freq)
    7f0e:	c1 14       	cp	r12, r1
    7f10:	d1 04       	cpc	r13, r1
    7f12:	e1 04       	cpc	r14, r1
    7f14:	f1 04       	cpc	r15, r1
    7f16:	51 f4       	brne	.+20     	; 0x7f2c <si5351_init+0xea>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    7f18:	0f 2e       	mov	r0, r31
    7f1a:	f0 e4       	ldi	r31, 0x40	; 64
    7f1c:	cf 2e       	mov	r12, r31
    7f1e:	f8 e7       	ldi	r31, 0x78	; 120
    7f20:	df 2e       	mov	r13, r31
    7f22:	fd e7       	ldi	r31, 0x7D	; 125
    7f24:	ef 2e       	mov	r14, r31
    7f26:	ff 24       	eor	r15, r15
    7f28:	f3 94       	inc	r15
    7f2a:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    7f2c:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    7f30:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    7f34:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    7f38:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    7f3c:	c8 16       	cp	r12, r24
    7f3e:	d9 06       	cpc	r13, r25
    7f40:	ea 06       	cpc	r14, r26
    7f42:	fb 06       	cpc	r15, r27
    7f44:	01 f1       	breq	.+64     	; 0x7f86 <si5351_init+0x144>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    7f46:	41 e0       	ldi	r20, 0x01	; 1
    7f48:	be 01       	movw	r22, r28
    7f4a:	6f 5f       	subi	r22, 0xFF	; 255
    7f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    7f4e:	8f e0       	ldi	r24, 0x0F	; 15
    7f50:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <_Z16si5351_read_bulkhPhh>
    7f54:	81 11       	cpse	r24, r1
    7f56:	1d c0       	rjmp	.+58     	; 0x7f92 <si5351_init+0x150>
			{
				return true;
			}
			
			reg_val = data[0];
    7f58:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    7f5a:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    7f5c:	c0 92 28 40 	sts	0x4028, r12	; 0x804028 <_ZL9xtal_freq>
    7f60:	d0 92 29 40 	sts	0x4029, r13	; 0x804029 <_ZL9xtal_freq+0x1>
    7f64:	e0 92 2a 40 	sts	0x402A, r14	; 0x80402a <_ZL9xtal_freq+0x2>
    7f68:	f0 92 2b 40 	sts	0x402B, r15	; 0x80402b <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    7f6c:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    7f6e:	41 e0       	ldi	r20, 0x01	; 1
    7f70:	be 01       	movw	r22, r28
    7f72:	6f 5f       	subi	r22, 0xFF	; 255
    7f74:	7f 4f       	sbci	r23, 0xFF	; 255
    7f76:	8f e0       	ldi	r24, 0x0F	; 15
    7f78:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    7f7c:	90 91 0b 49 	lds	r25, 0x490B	; 0x80490b <_ZZ11si5351_initE3err>
    7f80:	89 2b       	or	r24, r25
    7f82:	80 93 0b 49 	sts	0x490B, r24	; 0x80490b <_ZZ11si5351_initE3err>
		}
		
		g_si5351_initialized = !err;
    7f86:	80 91 0b 49 	lds	r24, 0x490B	; 0x80490b <_ZZ11si5351_initE3err>
    7f8a:	91 e0       	ldi	r25, 0x01	; 1
    7f8c:	98 27       	eor	r25, r24
    7f8e:	90 93 0c 49 	sts	0x490C, r25	; 0x80490c <g_si5351_initialized>

		return err;
	}
    7f92:	0f 90       	pop	r0
    7f94:	0f 90       	pop	r0
    7f96:	df 91       	pop	r29
    7f98:	cf 91       	pop	r28
    7f9a:	1f 91       	pop	r17
    7f9c:	ff 90       	pop	r15
    7f9e:	ef 90       	pop	r14
    7fa0:	df 90       	pop	r13
    7fa2:	cf 90       	pop	r12
    7fa4:	08 95       	ret

00007fa6 <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, bool enable)
	{
    7fa6:	0f 93       	push	r16
    7fa8:	1f 93       	push	r17
    7faa:	cf 93       	push	r28
    7fac:	df 93       	push	r29
    7fae:	00 d0       	rcall	.+0      	; 0x7fb0 <si5351_clock_enable+0xa>
    7fb0:	cd b7       	in	r28, 0x3d	; 61
    7fb2:	de b7       	in	r29, 0x3e	; 62
    7fb4:	18 2f       	mov	r17, r24
    7fb6:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    7fb8:	41 e0       	ldi	r20, 0x01	; 1
    7fba:	be 01       	movw	r22, r28
    7fbc:	6f 5f       	subi	r22, 0xFF	; 255
    7fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    7fc0:	83 e0       	ldi	r24, 0x03	; 3
    7fc2:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <_Z16si5351_read_bulkhPhh>
    7fc6:	81 11       	cpse	r24, r1
    7fc8:	23 c0       	rjmp	.+70     	; 0x8010 <__RODATA_PM_OFFSET__+0x10>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    7fca:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    7fcc:	00 23       	and	r16, r16
    7fce:	59 f0       	breq	.+22     	; 0x7fe6 <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    7fd0:	21 e0       	ldi	r18, 0x01	; 1
    7fd2:	30 e0       	ldi	r19, 0x00	; 0
    7fd4:	02 c0       	rjmp	.+4      	; 0x7fda <si5351_clock_enable+0x34>
    7fd6:	22 0f       	add	r18, r18
    7fd8:	33 1f       	adc	r19, r19
    7fda:	1a 95       	dec	r17
    7fdc:	e2 f7       	brpl	.-8      	; 0x7fd6 <si5351_clock_enable+0x30>
    7fde:	82 2f       	mov	r24, r18
    7fe0:	80 95       	com	r24
    7fe2:	89 23       	and	r24, r25
    7fe4:	09 c0       	rjmp	.+18     	; 0x7ff8 <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    7fe6:	21 e0       	ldi	r18, 0x01	; 1
    7fe8:	30 e0       	ldi	r19, 0x00	; 0
    7fea:	02 c0       	rjmp	.+4      	; 0x7ff0 <si5351_clock_enable+0x4a>
    7fec:	22 0f       	add	r18, r18
    7fee:	33 1f       	adc	r19, r19
    7ff0:	1a 95       	dec	r17
    7ff2:	e2 f7       	brpl	.-8      	; 0x7fec <si5351_clock_enable+0x46>
    7ff4:	89 2f       	mov	r24, r25
    7ff6:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    7ff8:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    7ffa:	41 e0       	ldi	r20, 0x01	; 1
    7ffc:	be 01       	movw	r22, r28
    7ffe:	6f 5f       	subi	r22, 0xFF	; 255
    8000:	7f 4f       	sbci	r23, 0xFF	; 255
    8002:	83 e0       	ldi	r24, 0x03	; 3
    8004:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    8008:	88 23       	and	r24, r24
    800a:	21 f0       	breq	.+8      	; 0x8014 <__RODATA_PM_OFFSET__+0x14>
    800c:	8c ef       	ldi	r24, 0xFC	; 252
    800e:	03 c0       	rjmp	.+6      	; 0x8016 <__RODATA_PM_OFFSET__+0x16>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    8010:	8c ef       	ldi	r24, 0xFC	; 252
    8012:	01 c0       	rjmp	.+2      	; 0x8016 <__RODATA_PM_OFFSET__+0x16>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    8014:	80 e0       	ldi	r24, 0x00	; 0
	}
    8016:	0f 90       	pop	r0
    8018:	0f 90       	pop	r0
    801a:	df 91       	pop	r29
    801c:	cf 91       	pop	r28
    801e:	1f 91       	pop	r17
    8020:	0f 91       	pop	r16
    8022:	08 95       	ret

00008024 <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    8024:	0f 93       	push	r16
    8026:	1f 93       	push	r17
    8028:	cf 93       	push	r28
    802a:	df 93       	push	r29
    802c:	00 d0       	rcall	.+0      	; 0x802e <si5351_drive_strength+0xa>
    802e:	cd b7       	in	r28, 0x3d	; 61
    8030:	de b7       	in	r29, 0x3e	; 62
    8032:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    8034:	10 e1       	ldi	r17, 0x10	; 16
    8036:	18 0f       	add	r17, r24
    8038:	41 e0       	ldi	r20, 0x01	; 1
    803a:	be 01       	movw	r22, r28
    803c:	6f 5f       	subi	r22, 0xFF	; 255
    803e:	7f 4f       	sbci	r23, 0xFF	; 255
    8040:	81 2f       	mov	r24, r17
    8042:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <_Z16si5351_read_bulkhPhh>
    8046:	81 11       	cpse	r24, r1
    8048:	1e c0       	rjmp	.+60     	; 0x8086 <si5351_drive_strength+0x62>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    804a:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    804c:	01 30       	cpi	r16, 0x01	; 1
    804e:	41 f0       	breq	.+16     	; 0x8060 <si5351_drive_strength+0x3c>
    8050:	28 f0       	brcs	.+10     	; 0x805c <si5351_drive_strength+0x38>
    8052:	02 30       	cpi	r16, 0x02	; 2
    8054:	41 f0       	breq	.+16     	; 0x8066 <si5351_drive_strength+0x42>
    8056:	03 30       	cpi	r16, 0x03	; 3
    8058:	49 f0       	breq	.+18     	; 0x806c <si5351_drive_strength+0x48>
    805a:	09 c0       	rjmp	.+18     	; 0x806e <si5351_drive_strength+0x4a>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    805c:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    805e:	07 c0       	rjmp	.+14     	; 0x806e <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    8060:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    8062:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    8064:	04 c0       	rjmp	.+8      	; 0x806e <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    8066:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    8068:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    806a:	01 c0       	rjmp	.+2      	; 0x806e <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    806c:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    806e:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    8070:	41 e0       	ldi	r20, 0x01	; 1
    8072:	be 01       	movw	r22, r28
    8074:	6f 5f       	subi	r22, 0xFF	; 255
    8076:	7f 4f       	sbci	r23, 0xFF	; 255
    8078:	81 2f       	mov	r24, r17
    807a:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    807e:	88 23       	and	r24, r24
    8080:	21 f0       	breq	.+8      	; 0x808a <si5351_drive_strength+0x66>
    8082:	8b ef       	ldi	r24, 0xFB	; 251
    8084:	03 c0       	rjmp	.+6      	; 0x808c <si5351_drive_strength+0x68>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    8086:	8b ef       	ldi	r24, 0xFB	; 251
    8088:	01 c0       	rjmp	.+2      	; 0x808c <si5351_drive_strength+0x68>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    808a:	80 e0       	ldi	r24, 0x00	; 0
	}
    808c:	0f 90       	pop	r0
    808e:	0f 90       	pop	r0
    8090:	df 91       	pop	r29
    8092:	cf 91       	pop	r28
    8094:	1f 91       	pop	r17
    8096:	0f 91       	pop	r16
    8098:	08 95       	ret

0000809a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    809a:	0f 93       	push	r16
    809c:	1f 93       	push	r17
    809e:	cf 93       	push	r28
    80a0:	df 93       	push	r29
    80a2:	00 d0       	rcall	.+0      	; 0x80a4 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    80a4:	cd b7       	in	r28, 0x3d	; 61
    80a6:	de b7       	in	r29, 0x3e	; 62
    80a8:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    80aa:	10 e1       	ldi	r17, 0x10	; 16
    80ac:	18 0f       	add	r17, r24
    80ae:	41 e0       	ldi	r20, 0x01	; 1
    80b0:	be 01       	movw	r22, r28
    80b2:	6f 5f       	subi	r22, 0xFF	; 255
    80b4:	7f 4f       	sbci	r23, 0xFF	; 255
    80b6:	81 2f       	mov	r24, r17
    80b8:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <_Z16si5351_read_bulkhPhh>
    80bc:	81 11       	cpse	r24, r1
    80be:	10 c0       	rjmp	.+32     	; 0x80e0 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x46>
		{
			return(true);
		}
		
		reg_val = data[0];
    80c0:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    80c2:	01 30       	cpi	r16, 0x01	; 1
    80c4:	11 f4       	brne	.+4      	; 0x80ca <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    80c6:	8f 7d       	andi	r24, 0xDF	; 223
    80c8:	03 c0       	rjmp	.+6      	; 0x80d0 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    80ca:	02 30       	cpi	r16, 0x02	; 2
    80cc:	09 f4       	brne	.+2      	; 0x80d0 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    80ce:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    80d0:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    80d2:	41 e0       	ldi	r20, 0x01	; 1
    80d4:	be 01       	movw	r22, r28
    80d6:	6f 5f       	subi	r22, 0xFF	; 255
    80d8:	7f 4f       	sbci	r23, 0xFF	; 255
    80da:	81 2f       	mov	r24, r17
    80dc:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
		{
			return(true);
		}
		
		return(false);
	}
    80e0:	0f 90       	pop	r0
    80e2:	0f 90       	pop	r0
    80e4:	df 91       	pop	r29
    80e6:	cf 91       	pop	r28
    80e8:	1f 91       	pop	r17
    80ea:	0f 91       	pop	r16
    80ec:	08 95       	ret

000080ee <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    80ee:	0f 93       	push	r16
    80f0:	1f 93       	push	r17
    80f2:	cf 93       	push	r28
    80f4:	df 93       	push	r29
    80f6:	00 d0       	rcall	.+0      	; 0x80f8 <_Z16set_integer_mode12si5351_clockb+0xa>
    80f8:	cd b7       	in	r28, 0x3d	; 61
    80fa:	de b7       	in	r29, 0x3e	; 62
    80fc:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    80fe:	10 e1       	ldi	r17, 0x10	; 16
    8100:	18 0f       	add	r17, r24
    8102:	41 e0       	ldi	r20, 0x01	; 1
    8104:	be 01       	movw	r22, r28
    8106:	6f 5f       	subi	r22, 0xFF	; 255
    8108:	7f 4f       	sbci	r23, 0xFF	; 255
    810a:	81 2f       	mov	r24, r17
    810c:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <_Z16si5351_read_bulkhPhh>
    8110:	81 11       	cpse	r24, r1
    8112:	0e c0       	rjmp	.+28     	; 0x8130 <_Z16set_integer_mode12si5351_clockb+0x42>
		{
			return(true);
		}
		
		reg_val = data[0];
    8114:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    8116:	00 23       	and	r16, r16
    8118:	11 f0       	breq	.+4      	; 0x811e <_Z16set_integer_mode12si5351_clockb+0x30>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    811a:	80 64       	ori	r24, 0x40	; 64
    811c:	01 c0       	rjmp	.+2      	; 0x8120 <_Z16set_integer_mode12si5351_clockb+0x32>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    811e:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    8120:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    8122:	41 e0       	ldi	r20, 0x01	; 1
    8124:	be 01       	movw	r22, r28
    8126:	6f 5f       	subi	r22, 0xFF	; 255
    8128:	7f 4f       	sbci	r23, 0xFF	; 255
    812a:	81 2f       	mov	r24, r17
    812c:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
	}
    8130:	0f 90       	pop	r0
    8132:	0f 90       	pop	r0
    8134:	df 91       	pop	r29
    8136:	cf 91       	pop	r28
    8138:	1f 91       	pop	r17
    813a:	0f 91       	pop	r16
    813c:	08 95       	ret

0000813e <_Z6ms_div12si5351_clockhb>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    813e:	ff 92       	push	r15
    8140:	0f 93       	push	r16
    8142:	1f 93       	push	r17
    8144:	cf 93       	push	r28
    8146:	df 93       	push	r29
    8148:	00 d0       	rcall	.+0      	; 0x814a <_Z6ms_div12si5351_clockhb+0xc>
    814a:	cd b7       	in	r28, 0x3d	; 61
    814c:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    814e:	81 30       	cpi	r24, 0x01	; 1
    8150:	71 f0       	breq	.+28     	; 0x816e <_Z6ms_div12si5351_clockhb+0x30>
    8152:	18 f0       	brcs	.+6      	; 0x815a <_Z6ms_div12si5351_clockhb+0x1c>
    8154:	82 30       	cpi	r24, 0x02	; 2
    8156:	31 f0       	breq	.+12     	; 0x8164 <_Z6ms_div12si5351_clockhb+0x26>
    8158:	2c c0       	rjmp	.+88     	; 0x81b2 <_Z6ms_div12si5351_clockhb+0x74>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    815a:	0f 2e       	mov	r0, r31
    815c:	fc e2       	ldi	r31, 0x2C	; 44
    815e:	ff 2e       	mov	r15, r31
    8160:	f0 2d       	mov	r31, r0
    8162:	09 c0       	rjmp	.+18     	; 0x8176 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    8164:	0f 2e       	mov	r0, r31
    8166:	fc e3       	ldi	r31, 0x3C	; 60
    8168:	ff 2e       	mov	r15, r31
    816a:	f0 2d       	mov	r31, r0
			}
			break;
    816c:	04 c0       	rjmp	.+8      	; 0x8176 <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    816e:	0f 2e       	mov	r0, r31
    8170:	f4 e3       	ldi	r31, 0x34	; 52
    8172:	ff 2e       	mov	r15, r31
    8174:	f0 2d       	mov	r31, r0
    8176:	04 2f       	mov	r16, r20
    8178:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    817a:	41 e0       	ldi	r20, 0x01	; 1
    817c:	be 01       	movw	r22, r28
    817e:	6f 5f       	subi	r22, 0xFF	; 255
    8180:	7f 4f       	sbci	r23, 0xFF	; 255
    8182:	8f 2d       	mov	r24, r15
    8184:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <_Z16si5351_read_bulkhPhh>
    8188:	81 11       	cpse	r24, r1
    818a:	14 c0       	rjmp	.+40     	; 0x81b4 <_Z6ms_div12si5351_clockhb+0x76>
		{
			return(true);
		}
		
		reg_val = data[0];
    818c:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    818e:	86 2f       	mov	r24, r22
    8190:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    8192:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    8194:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    8196:	90 e1       	ldi	r25, 0x10	; 16
    8198:	19 9f       	mul	r17, r25
    819a:	b0 01       	movw	r22, r0
    819c:	11 24       	eor	r1, r1
    819e:	68 2b       	or	r22, r24

		data[0] = reg_val;
    81a0:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    81a2:	41 e0       	ldi	r20, 0x01	; 1
    81a4:	be 01       	movw	r22, r28
    81a6:	6f 5f       	subi	r22, 0xFF	; 255
    81a8:	7f 4f       	sbci	r23, 0xFF	; 255
    81aa:	8f 2d       	mov	r24, r15
    81ac:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    81b0:	01 c0       	rjmp	.+2      	; 0x81b4 <_Z6ms_div12si5351_clockhb+0x76>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    81b2:	81 e0       	ldi	r24, 0x01	; 1

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		data[0] = reg_val;
		return(si5351_write_bulk(reg_addr, data, 1));
	}
    81b4:	0f 90       	pop	r0
    81b6:	0f 90       	pop	r0
    81b8:	df 91       	pop	r29
    81ba:	cf 91       	pop	r28
    81bc:	1f 91       	pop	r17
    81be:	0f 91       	pop	r16
    81c0:	ff 90       	pop	r15
    81c2:	08 95       	ret

000081c4 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    81c4:	8f 92       	push	r8
    81c6:	af 92       	push	r10
    81c8:	cf 92       	push	r12
    81ca:	df 92       	push	r13
    81cc:	ef 92       	push	r14
    81ce:	ff 92       	push	r15
    81d0:	0f 93       	push	r16
    81d2:	1f 93       	push	r17
    81d4:	cf 93       	push	r28
    81d6:	df 93       	push	r29
    81d8:	cd b7       	in	r28, 0x3d	; 61
    81da:	de b7       	in	r29, 0x3e	; 62
    81dc:	69 97       	sbiw	r28, 0x19	; 25
    81de:	cd bf       	out	0x3d, r28	; 61
    81e0:	de bf       	out	0x3e, r29	; 62
    81e2:	f8 2e       	mov	r15, r24
    81e4:	ce 86       	std	Y+14, r12	; 0x0e
    81e6:	df 86       	std	Y+15, r13	; 0x0f
    81e8:	e8 8a       	std	Y+16, r14	; 0x10
    81ea:	0a 8b       	std	Y+18, r16	; 0x12
    81ec:	1b 8b       	std	Y+19, r17	; 0x13
    81ee:	2c 8b       	std	Y+20, r18	; 0x14
    81f0:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    81f2:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    81f4:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    81f6:	88 0f       	add	r24, r24
    81f8:	88 0f       	add	r24, r24
    81fa:	88 0f       	add	r24, r24
    81fc:	41 e0       	ldi	r20, 0x01	; 1
    81fe:	be 01       	movw	r22, r28
    8200:	64 5f       	subi	r22, 0xF4	; 244
    8202:	7f 4f       	sbci	r23, 0xFF	; 255
    8204:	84 5d       	subi	r24, 0xD4	; 212
    8206:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <_Z16si5351_read_bulkhPhh>
    820a:	81 11       	cpse	r24, r1
    820c:	48 c0       	rjmp	.+144    	; 0x829e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		reg_val = data[0];
    820e:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    8210:	98 2f       	mov	r25, r24
    8212:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    8214:	88 89       	ldd	r24, Y+16	; 0x10
    8216:	83 70       	andi	r24, 0x03	; 3
    8218:	89 2b       	or	r24, r25
    821a:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    821c:	8f 85       	ldd	r24, Y+15	; 0x0f
    821e:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    8220:	8e 85       	ldd	r24, Y+14	; 0x0e
    8222:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    8224:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    8226:	8c 89       	ldd	r24, Y+20	; 0x14
    8228:	8f 70       	andi	r24, 0x0F	; 15
    822a:	20 e1       	ldi	r18, 0x10	; 16
    822c:	92 9f       	mul	r25, r18
    822e:	80 0d       	add	r24, r0
    8230:	11 24       	eor	r1, r1
    8232:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    8234:	8b 89       	ldd	r24, Y+19	; 0x13
    8236:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    8238:	8a 89       	ldd	r24, Y+18	; 0x12
    823a:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    823c:	81 e0       	ldi	r24, 0x01	; 1
    823e:	f8 16       	cp	r15, r24
    8240:	81 f0       	breq	.+32     	; 0x8262 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x9e>
    8242:	f8 16       	cp	r15, r24
    8244:	20 f0       	brcs	.+8      	; 0x824e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    8246:	22 e0       	ldi	r18, 0x02	; 2
    8248:	f2 16       	cp	r15, r18
    824a:	a9 f0       	breq	.+42     	; 0x8276 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xb2>
    824c:	1d c0       	rjmp	.+58     	; 0x8288 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    824e:	48 e0       	ldi	r20, 0x08	; 8
    8250:	be 01       	movw	r22, r28
    8252:	6f 5f       	subi	r22, 0xFF	; 255
    8254:	7f 4f       	sbci	r23, 0xFF	; 255
    8256:	8a e2       	ldi	r24, 0x2A	; 42
    8258:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    825c:	88 23       	and	r24, r24
    825e:	a1 f0       	breq	.+40     	; 0x8288 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    8260:	1e c0       	rjmp	.+60     	; 0x829e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    8262:	48 e0       	ldi	r20, 0x08	; 8
    8264:	be 01       	movw	r22, r28
    8266:	6f 5f       	subi	r22, 0xFF	; 255
    8268:	7f 4f       	sbci	r23, 0xFF	; 255
    826a:	82 e3       	ldi	r24, 0x32	; 50
    826c:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    8270:	88 23       	and	r24, r24
    8272:	51 f0       	breq	.+20     	; 0x8288 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    8274:	14 c0       	rjmp	.+40     	; 0x829e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    8276:	48 e0       	ldi	r20, 0x08	; 8
    8278:	be 01       	movw	r22, r28
    827a:	6f 5f       	subi	r22, 0xFF	; 255
    827c:	7f 4f       	sbci	r23, 0xFF	; 255
    827e:	8a e3       	ldi	r24, 0x3A	; 58
    8280:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    8284:	81 11       	cpse	r24, r1
    8286:	0b c0       	rjmp	.+22     	; 0x829e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    8288:	6a 2d       	mov	r22, r10
    828a:	8f 2d       	mov	r24, r15
    828c:	0e 94 77 40 	call	0x80ee	; 0x80ee <_Z16set_integer_mode12si5351_clockb>
    8290:	81 11       	cpse	r24, r1
    8292:	05 c0       	rjmp	.+10     	; 0x829e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    8294:	4e a1       	ldd	r20, Y+38	; 0x26
    8296:	68 2d       	mov	r22, r8
    8298:	8f 2d       	mov	r24, r15
    829a:	0e 94 9f 40 	call	0x813e	; 0x813e <_Z6ms_div12si5351_clockhb>
		{
			return(true);
		}
		
		return(false);
	}
    829e:	69 96       	adiw	r28, 0x19	; 25
    82a0:	cd bf       	out	0x3d, r28	; 61
    82a2:	de bf       	out	0x3e, r29	; 62
    82a4:	df 91       	pop	r29
    82a6:	cf 91       	pop	r28
    82a8:	1f 91       	pop	r17
    82aa:	0f 91       	pop	r16
    82ac:	ff 90       	pop	r15
    82ae:	ef 90       	pop	r14
    82b0:	df 90       	pop	r13
    82b2:	cf 90       	pop	r12
    82b4:	af 90       	pop	r10
    82b6:	8f 90       	pop	r8
    82b8:	08 95       	ret

000082ba <si5351_set_freq>:
 *
 * Returns true on failure
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
    82ba:	2f 92       	push	r2
    82bc:	3f 92       	push	r3
    82be:	4f 92       	push	r4
    82c0:	5f 92       	push	r5
    82c2:	6f 92       	push	r6
    82c4:	7f 92       	push	r7
    82c6:	8f 92       	push	r8
    82c8:	9f 92       	push	r9
    82ca:	af 92       	push	r10
    82cc:	bf 92       	push	r11
    82ce:	cf 92       	push	r12
    82d0:	df 92       	push	r13
    82d2:	ef 92       	push	r14
    82d4:	ff 92       	push	r15
    82d6:	0f 93       	push	r16
    82d8:	1f 93       	push	r17
    82da:	cf 93       	push	r28
    82dc:	df 93       	push	r29
    82de:	cd b7       	in	r28, 0x3d	; 61
    82e0:	de b7       	in	r29, 0x3e	; 62
    82e2:	60 97       	sbiw	r28, 0x10	; 16
    82e4:	cd bf       	out	0x3d, r28	; 61
    82e6:	de bf       	out	0x3e, r29	; 62
    82e8:	6b 01       	movw	r12, r22
    82ea:	7c 01       	movw	r14, r24
    82ec:	b4 2e       	mov	r11, r20
    82ee:	72 2e       	mov	r7, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		bool int_mode = false;
    82f0:	1d 86       	std	Y+13, r1	; 0x0d
		bool div_by_4 = false;
    82f2:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    82f4:	10 91 0c 49 	lds	r17, 0x490C	; 0x80490c <g_si5351_initialized>
    82f8:	11 23       	and	r17, r17
    82fa:	09 f4       	brne	.+2      	; 0x82fe <si5351_set_freq+0x44>
    82fc:	1e c1       	rjmp	.+572    	; 0x853a <si5351_set_freq+0x280>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    82fe:	80 e4       	ldi	r24, 0x40	; 64
    8300:	c8 16       	cp	r12, r24
    8302:	82 e4       	ldi	r24, 0x42	; 66
    8304:	d8 06       	cpc	r13, r24
    8306:	8f e0       	ldi	r24, 0x0F	; 15
    8308:	e8 06       	cpc	r14, r24
    830a:	f1 04       	cpc	r15, r1
    830c:	70 f0       	brcs	.+28     	; 0x832a <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    830e:	c7 01       	movw	r24, r14
    8310:	b6 01       	movw	r22, r12
    8312:	24 e6       	ldi	r18, 0x64	; 100
    8314:	30 e0       	ldi	r19, 0x00	; 0
    8316:	40 e0       	ldi	r20, 0x00	; 0
    8318:	50 e0       	ldi	r21, 0x00	; 0
    831a:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
				freq_Fout *= 100;
    831e:	a4 e6       	ldi	r26, 0x64	; 100
    8320:	b0 e0       	ldi	r27, 0x00	; 0
    8322:	0e 94 07 49 	call	0x920e	; 0x920e <__muluhisi3>
    8326:	6b 01       	movw	r12, r22
    8328:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    832a:	81 e0       	ldi	r24, 0x01	; 1
    832c:	b8 16       	cp	r11, r24
    832e:	c9 f0       	breq	.+50     	; 0x8362 <si5351_set_freq+0xa8>
    8330:	b8 16       	cp	r11, r24
    8332:	20 f0       	brcs	.+8      	; 0x833c <si5351_set_freq+0x82>
    8334:	82 e0       	ldi	r24, 0x02	; 2
    8336:	b8 16       	cp	r11, r24
    8338:	b1 f1       	breq	.+108    	; 0x83a6 <si5351_set_freq+0xec>
    833a:	08 c1       	rjmp	.+528    	; 0x854c <si5351_set_freq+0x292>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    833c:	80 91 19 49 	lds	r24, 0x4919	; 0x804919 <_ZL17enabledClocksMask>
    8340:	81 60       	ori	r24, 0x01	; 1
    8342:	80 93 19 49 	sts	0x4919, r24	; 0x804919 <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    8346:	c0 92 0d 49 	sts	0x490D, r12	; 0x80490d <_ZL9clock_out>
    834a:	d0 92 0e 49 	sts	0x490E, r13	; 0x80490e <_ZL9clock_out+0x1>
    834e:	e0 92 0f 49 	sts	0x490F, r14	; 0x80490f <_ZL9clock_out+0x2>
    8352:	f0 92 10 49 	sts	0x4910, r15	; 0x804910 <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    8356:	68 94       	set
    8358:	66 24       	eor	r6, r6
    835a:	64 f8       	bld	r6, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    835c:	99 24       	eor	r9, r9
    835e:	93 94       	inc	r9
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    8360:	43 c0       	rjmp	.+134    	; 0x83e8 <si5351_set_freq+0x12e>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    8362:	80 91 19 49 	lds	r24, 0x4919	; 0x804919 <_ZL17enabledClocksMask>
    8366:	82 60       	ori	r24, 0x02	; 2
    8368:	80 93 19 49 	sts	0x4919, r24	; 0x804919 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    836c:	80 95       	com	r24
    836e:	8a 6f       	ori	r24, 0xFA	; 250
    8370:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    8372:	41 e0       	ldi	r20, 0x01	; 1
    8374:	be 01       	movw	r22, r28
    8376:	61 5f       	subi	r22, 0xF1	; 241
    8378:	7f 4f       	sbci	r23, 0xFF	; 255
    837a:	83 e0       	ldi	r24, 0x03	; 3
    837c:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    8380:	18 2f       	mov	r17, r24
    8382:	81 11       	cpse	r24, r1
    8384:	e3 c0       	rjmp	.+454    	; 0x854c <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    8386:	c0 92 11 49 	sts	0x4911, r12	; 0x804911 <_ZL9clock_out+0x4>
    838a:	d0 92 12 49 	sts	0x4912, r13	; 0x804912 <_ZL9clock_out+0x5>
    838e:	e0 92 13 49 	sts	0x4913, r14	; 0x804913 <_ZL9clock_out+0x6>
    8392:	f0 92 14 49 	sts	0x4914, r15	; 0x804914 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    8396:	0f 2e       	mov	r0, r31
    8398:	f1 e1       	ldi	r31, 0x11	; 17
    839a:	6f 2e       	mov	r6, r31
    839c:	f0 2d       	mov	r31, r0
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    839e:	68 94       	set
    83a0:	99 24       	eor	r9, r9
    83a2:	91 f8       	bld	r9, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    83a4:	21 c0       	rjmp	.+66     	; 0x83e8 <si5351_set_freq+0x12e>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    83a6:	80 91 19 49 	lds	r24, 0x4919	; 0x804919 <_ZL17enabledClocksMask>
    83aa:	84 60       	ori	r24, 0x04	; 4
    83ac:	80 93 19 49 	sts	0x4919, r24	; 0x804919 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    83b0:	80 95       	com	r24
    83b2:	8c 6f       	ori	r24, 0xFC	; 252
    83b4:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    83b6:	41 e0       	ldi	r20, 0x01	; 1
    83b8:	be 01       	movw	r22, r28
    83ba:	61 5f       	subi	r22, 0xF1	; 241
    83bc:	7f 4f       	sbci	r23, 0xFF	; 255
    83be:	83 e0       	ldi	r24, 0x03	; 3
    83c0:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    83c4:	18 2f       	mov	r17, r24
    83c6:	81 11       	cpse	r24, r1
    83c8:	c1 c0       	rjmp	.+386    	; 0x854c <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    83ca:	c0 92 15 49 	sts	0x4915, r12	; 0x804915 <_ZL9clock_out+0x8>
    83ce:	d0 92 16 49 	sts	0x4916, r13	; 0x804916 <_ZL9clock_out+0x9>
    83d2:	e0 92 17 49 	sts	0x4917, r14	; 0x804917 <_ZL9clock_out+0xa>
    83d6:	f0 92 18 49 	sts	0x4918, r15	; 0x804918 <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    83da:	0f 2e       	mov	r0, r31
    83dc:	f2 e1       	ldi	r31, 0x12	; 18
    83de:	6f 2e       	mov	r6, r31
    83e0:	f0 2d       	mov	r31, r0
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    83e2:	68 94       	set
    83e4:	99 24       	eor	r9, r9
    83e6:	91 f8       	bld	r9, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    83e8:	81 e0       	ldi	r24, 0x01	; 1
    83ea:	98 16       	cp	r9, r24
    83ec:	61 f0       	breq	.+24     	; 0x8406 <si5351_set_freq+0x14c>
    83ee:	80 91 1a 49 	lds	r24, 0x491A	; 0x80491a <_ZL8freqVCOB>
    83f2:	90 91 1b 49 	lds	r25, 0x491B	; 0x80491b <_ZL8freqVCOB+0x1>
    83f6:	a0 91 1c 49 	lds	r26, 0x491C	; 0x80491c <_ZL8freqVCOB+0x2>
    83fa:	b0 91 1d 49 	lds	r27, 0x491D	; 0x80491d <_ZL8freqVCOB+0x3>
    83fe:	89 2b       	or	r24, r25
    8400:	8a 2b       	or	r24, r26
    8402:	8b 2b       	or	r24, r27
    8404:	81 f4       	brne	.+32     	; 0x8426 <si5351_set_freq+0x16c>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    8406:	8e 01       	movw	r16, r28
    8408:	02 5f       	subi	r16, 0xF2	; 242
    840a:	1f 4f       	sbci	r17, 0xFF	; 255
    840c:	9e 01       	movw	r18, r28
    840e:	23 5f       	subi	r18, 0xF3	; 243
    8410:	3f 4f       	sbci	r19, 0xFF	; 255
    8412:	ae 01       	movw	r20, r28
    8414:	4f 5f       	subi	r20, 0xFF	; 255
    8416:	5f 4f       	sbci	r21, 0xFF	; 255
    8418:	c7 01       	movw	r24, r14
    841a:	b6 01       	movw	r22, r12
    841c:	0e 94 a0 3c 	call	0x7940	; 0x7940 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    8420:	1b 01       	movw	r2, r22
    8422:	2c 01       	movw	r4, r24
    8424:	10 c0       	rjmp	.+32     	; 0x8446 <si5351_set_freq+0x18c>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    8426:	8e 01       	movw	r16, r28
    8428:	02 5f       	subi	r16, 0xF2	; 242
    842a:	1f 4f       	sbci	r17, 0xFF	; 255
    842c:	9e 01       	movw	r18, r28
    842e:	23 5f       	subi	r18, 0xF3	; 243
    8430:	3f 4f       	sbci	r19, 0xFF	; 255
    8432:	ae 01       	movw	r20, r28
    8434:	4f 5f       	subi	r20, 0xFF	; 255
    8436:	5f 4f       	sbci	r21, 0xFF	; 255
    8438:	c7 01       	movw	r24, r14
    843a:	b6 01       	movw	r22, r12
    843c:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    8440:	21 2c       	mov	r2, r1
    8442:	31 2c       	mov	r3, r1
    8444:	21 01       	movw	r4, r2
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    8446:	69 2d       	mov	r22, r9
    8448:	8b 2d       	mov	r24, r11
    844a:	0e 94 4d 40 	call	0x809a	; 0x809a <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    844e:	18 2f       	mov	r17, r24
    8450:	81 11       	cpse	r24, r1
    8452:	7c c0       	rjmp	.+248    	; 0x854c <si5351_set_freq+0x292>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    8454:	8e 85       	ldd	r24, Y+14	; 0x0e
    8456:	ad 84       	ldd	r10, Y+13	; 0x0d
    8458:	8f 93       	push	r24
    845a:	81 2c       	mov	r8, r1
    845c:	c9 80       	ldd	r12, Y+1	; 0x01
    845e:	da 80       	ldd	r13, Y+2	; 0x02
    8460:	eb 80       	ldd	r14, Y+3	; 0x03
    8462:	fc 80       	ldd	r15, Y+4	; 0x04
    8464:	0d 81       	ldd	r16, Y+5	; 0x05
    8466:	1e 81       	ldd	r17, Y+6	; 0x06
    8468:	2f 81       	ldd	r18, Y+7	; 0x07
    846a:	38 85       	ldd	r19, Y+8	; 0x08
    846c:	49 85       	ldd	r20, Y+9	; 0x09
    846e:	5a 85       	ldd	r21, Y+10	; 0x0a
    8470:	6b 85       	ldd	r22, Y+11	; 0x0b
    8472:	7c 85       	ldd	r23, Y+12	; 0x0c
    8474:	8b 2d       	mov	r24, r11
    8476:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    847a:	18 2f       	mov	r17, r24
    847c:	0f 90       	pop	r0
    847e:	81 11       	cpse	r24, r1
    8480:	65 c0       	rjmp	.+202    	; 0x854c <si5351_set_freq+0x292>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    8482:	21 14       	cp	r2, r1
    8484:	31 04       	cpc	r3, r1
    8486:	41 04       	cpc	r4, r1
    8488:	51 04       	cpc	r5, r1
    848a:	29 f0       	breq	.+10     	; 0x8496 <si5351_set_freq+0x1dc>
			{
				set_pll(freq_VCO, target_pll);
    848c:	49 2d       	mov	r20, r9
    848e:	c2 01       	movw	r24, r4
    8490:	b1 01       	movw	r22, r2
    8492:	0e 94 ba 3e 	call	0x7d74	; 0x7d74 <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    8496:	77 20       	and	r7, r7
    8498:	69 f0       	breq	.+26     	; 0x84b4 <si5351_set_freq+0x1fa>
		{
 			data[0] = enabledClocksMask;
    849a:	80 91 19 49 	lds	r24, 0x4919	; 0x804919 <_ZL17enabledClocksMask>
    849e:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    84a0:	41 e0       	ldi	r20, 0x01	; 1
    84a2:	be 01       	movw	r22, r28
    84a4:	61 5f       	subi	r22, 0xF1	; 241
    84a6:	7f 4f       	sbci	r23, 0xFF	; 255
    84a8:	83 e0       	ldi	r24, 0x03	; 3
    84aa:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    84ae:	88 23       	and	r24, r24
    84b0:	71 f0       	breq	.+28     	; 0x84ce <si5351_set_freq+0x214>
    84b2:	45 c0       	rjmp	.+138    	; 0x853e <si5351_set_freq+0x284>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    84b4:	80 91 19 49 	lds	r24, 0x4919	; 0x804919 <_ZL17enabledClocksMask>
    84b8:	80 95       	com	r24
    84ba:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    84bc:	41 e0       	ldi	r20, 0x01	; 1
    84be:	be 01       	movw	r22, r28
    84c0:	61 5f       	subi	r22, 0xF1	; 241
    84c2:	7f 4f       	sbci	r23, 0xFF	; 255
    84c4:	83 e0       	ldi	r24, 0x03	; 3
    84c6:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    84ca:	81 11       	cpse	r24, r1
    84cc:	3a c0       	rjmp	.+116    	; 0x8542 <si5351_set_freq+0x288>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    84ce:	81 e0       	ldi	r24, 0x01	; 1
    84d0:	98 12       	cpse	r9, r24
    84d2:	0b c0       	rjmp	.+22     	; 0x84ea <si5351_set_freq+0x230>
		{
 			data[0] = 0x4C;
    84d4:	8c e4       	ldi	r24, 0x4C	; 76
    84d6:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    84d8:	41 e0       	ldi	r20, 0x01	; 1
    84da:	be 01       	movw	r22, r28
    84dc:	61 5f       	subi	r22, 0xF1	; 241
    84de:	7f 4f       	sbci	r23, 0xFF	; 255
    84e0:	86 2d       	mov	r24, r6
    84e2:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    84e6:	18 2f       	mov	r17, r24
    84e8:	31 c0       	rjmp	.+98     	; 0x854c <si5351_set_freq+0x292>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    84ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    84ec:	88 23       	and	r24, r24
    84ee:	61 f0       	breq	.+24     	; 0x8508 <si5351_set_freq+0x24e>
			{
 				data[0] = 0x6C;
    84f0:	8c e6       	ldi	r24, 0x6C	; 108
    84f2:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    84f4:	41 e0       	ldi	r20, 0x01	; 1
    84f6:	be 01       	movw	r22, r28
    84f8:	61 5f       	subi	r22, 0xF1	; 241
    84fa:	7f 4f       	sbci	r23, 0xFF	; 255
    84fc:	86 2d       	mov	r24, r6
    84fe:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    8502:	88 23       	and	r24, r24
    8504:	61 f0       	breq	.+24     	; 0x851e <si5351_set_freq+0x264>
    8506:	1f c0       	rjmp	.+62     	; 0x8546 <si5351_set_freq+0x28c>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    8508:	8c e2       	ldi	r24, 0x2C	; 44
    850a:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    850c:	41 e0       	ldi	r20, 0x01	; 1
    850e:	be 01       	movw	r22, r28
    8510:	61 5f       	subi	r22, 0xF1	; 241
    8512:	7f 4f       	sbci	r23, 0xFF	; 255
    8514:	86 2d       	mov	r24, r6
    8516:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <_Z17si5351_write_bulkhPhh>
    851a:	81 11       	cpse	r24, r1
    851c:	16 c0       	rjmp	.+44     	; 0x854a <si5351_set_freq+0x290>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    851e:	21 14       	cp	r2, r1
    8520:	31 04       	cpc	r3, r1
    8522:	41 04       	cpc	r4, r1
    8524:	51 04       	cpc	r5, r1
    8526:	91 f0       	breq	.+36     	; 0x854c <si5351_set_freq+0x292>
			{
				freqVCOB = freq_VCO;
    8528:	20 92 1a 49 	sts	0x491A, r2	; 0x80491a <_ZL8freqVCOB>
    852c:	30 92 1b 49 	sts	0x491B, r3	; 0x80491b <_ZL8freqVCOB+0x1>
    8530:	40 92 1c 49 	sts	0x491C, r4	; 0x80491c <_ZL8freqVCOB+0x2>
    8534:	50 92 1d 49 	sts	0x491D, r5	; 0x80491d <_ZL8freqVCOB+0x3>
    8538:	09 c0       	rjmp	.+18     	; 0x854c <si5351_set_freq+0x292>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    853a:	11 e0       	ldi	r17, 0x01	; 1
    853c:	07 c0       	rjmp	.+14     	; 0x854c <si5351_set_freq+0x292>
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    853e:	18 2f       	mov	r17, r24
    8540:	05 c0       	rjmp	.+10     	; 0x854c <si5351_set_freq+0x292>
		else
		{
 			data[0] = ~enabledClocksMask;
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
			{
				return true;
    8542:	18 2f       	mov	r17, r24
    8544:	03 c0       	rjmp	.+6      	; 0x854c <si5351_set_freq+0x292>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    8546:	18 2f       	mov	r17, r24
    8548:	01 c0       	rjmp	.+2      	; 0x854c <si5351_set_freq+0x292>
			else
			{
 				data[0] = 0x2C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    854a:	18 2f       	mov	r17, r24
				freqVCOB = freq_VCO;
			}
		}

		return(false);
	}
    854c:	81 2f       	mov	r24, r17
    854e:	60 96       	adiw	r28, 0x10	; 16
    8550:	cd bf       	out	0x3d, r28	; 61
    8552:	de bf       	out	0x3e, r29	; 62
    8554:	df 91       	pop	r29
    8556:	cf 91       	pop	r28
    8558:	1f 91       	pop	r17
    855a:	0f 91       	pop	r16
    855c:	ff 90       	pop	r15
    855e:	ef 90       	pop	r14
    8560:	df 90       	pop	r13
    8562:	cf 90       	pop	r12
    8564:	bf 90       	pop	r11
    8566:	af 90       	pop	r10
    8568:	9f 90       	pop	r9
    856a:	8f 90       	pop	r8
    856c:	7f 90       	pop	r7
    856e:	6f 90       	pop	r6
    8570:	5f 90       	pop	r5
    8572:	4f 90       	pop	r4
    8574:	3f 90       	pop	r3
    8576:	2f 90       	pop	r2
    8578:	08 95       	ret

0000857a <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    857a:	80 e0       	ldi	r24, 0x00	; 0
    857c:	08 95       	ret

0000857e <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    857e:	e0 e0       	ldi	r30, 0x00	; 0
    8580:	fb e0       	ldi	r31, 0x0B	; 11
    8582:	81 e0       	ldi	r24, 0x01	; 1
    8584:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    8586:	20 e4       	ldi	r18, 0x40	; 64
    8588:	3c e9       	ldi	r19, 0x9C	; 156
    858a:	24 87       	std	Z+12, r18	; 0x0c
    858c:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    858e:	93 e0       	ldi	r25, 0x03	; 3
    8590:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    8592:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8594:	e0 e1       	ldi	r30, 0x10	; 16
    8596:	fb e0       	ldi	r31, 0x0B	; 11
    8598:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    859a:	40 ec       	ldi	r20, 0xC0	; 192
    859c:	5d e5       	ldi	r21, 0x5D	; 93
    859e:	44 87       	std	Z+12, r20	; 0x0c
    85a0:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    85a2:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    85a4:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    85a6:	e0 e3       	ldi	r30, 0x30	; 48
    85a8:	fb e0       	ldi	r31, 0x0B	; 11
    85aa:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    85ac:	24 87       	std	Z+12, r18	; 0x0c
    85ae:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    85b0:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    85b2:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    85b4:	80 e0       	ldi	r24, 0x00	; 0
    85b6:	08 95       	ret

000085b8 <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    85b8:	0f 93       	push	r16
    85ba:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    85bc:	61 15       	cp	r22, r1
    85be:	71 05       	cpc	r23, r1
    85c0:	81 05       	cpc	r24, r1
    85c2:	91 05       	cpc	r25, r1
    85c4:	09 f4       	brne	.+2      	; 0x85c8 <util_delay_ms+0x10>
    85c6:	67 c0       	rjmp	.+206    	; 0x8696 <util_delay_ms+0xde>
	{
		if(counting)
    85c8:	20 91 22 49 	lds	r18, 0x4922	; 0x804922 <_ZZ13util_delay_msE8counting>
    85cc:	22 23       	and	r18, r18
    85ce:	f1 f1       	breq	.+124    	; 0x864c <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    85d0:	00 91 23 49 	lds	r16, 0x4923	; 0x804923 <_ZL12g_ms_counter>
    85d4:	10 91 24 49 	lds	r17, 0x4924	; 0x804924 <_ZL12g_ms_counter+0x1>
    85d8:	20 91 25 49 	lds	r18, 0x4925	; 0x804925 <_ZL12g_ms_counter+0x2>
    85dc:	30 91 26 49 	lds	r19, 0x4926	; 0x804926 <_ZL12g_ms_counter+0x3>
    85e0:	01 2b       	or	r16, r17
    85e2:	02 2b       	or	r16, r18
    85e4:	03 2b       	or	r16, r19
    85e6:	71 f4       	brne	.+28     	; 0x8604 <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    85e8:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    85ec:	10 92 22 49 	sts	0x4922, r1	; 0x804922 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    85f0:	10 92 1e 49 	sts	0x491E, r1	; 0x80491e <_ZZ13util_delay_msE14countdownValue>
    85f4:	10 92 1f 49 	sts	0x491F, r1	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x1>
    85f8:	10 92 20 49 	sts	0x4920, r1	; 0x804920 <_ZZ13util_delay_msE14countdownValue+0x2>
    85fc:	10 92 21 49 	sts	0x4921, r1	; 0x804921 <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    8600:	80 e0       	ldi	r24, 0x00	; 0
    8602:	62 c0       	rjmp	.+196    	; 0x86c8 <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    8604:	00 91 1e 49 	lds	r16, 0x491E	; 0x80491e <_ZZ13util_delay_msE14countdownValue>
    8608:	10 91 1f 49 	lds	r17, 0x491F	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x1>
    860c:	20 91 20 49 	lds	r18, 0x4920	; 0x804920 <_ZZ13util_delay_msE14countdownValue+0x2>
    8610:	30 91 21 49 	lds	r19, 0x4921	; 0x804921 <_ZZ13util_delay_msE14countdownValue+0x3>
    8614:	60 17       	cp	r22, r16
    8616:	71 07       	cpc	r23, r17
    8618:	82 07       	cpc	r24, r18
    861a:	93 07       	cpc	r25, r19
    861c:	09 f4       	brne	.+2      	; 0x8620 <util_delay_ms+0x68>
    861e:	51 c0       	rjmp	.+162    	; 0x86c2 <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    8620:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    8624:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    8628:	60 93 1e 49 	sts	0x491E, r22	; 0x80491e <_ZZ13util_delay_msE14countdownValue>
    862c:	70 93 1f 49 	sts	0x491F, r23	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x1>
    8630:	80 93 20 49 	sts	0x4920, r24	; 0x804920 <_ZZ13util_delay_msE14countdownValue+0x2>
    8634:	90 93 21 49 	sts	0x4921, r25	; 0x804921 <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    8638:	60 93 23 49 	sts	0x4923, r22	; 0x804923 <_ZL12g_ms_counter>
    863c:	70 93 24 49 	sts	0x4924, r23	; 0x804924 <_ZL12g_ms_counter+0x1>
    8640:	80 93 25 49 	sts	0x4925, r24	; 0x804925 <_ZL12g_ms_counter+0x2>
    8644:	90 93 26 49 	sts	0x4926, r25	; 0x804926 <_ZL12g_ms_counter+0x3>
				return(false);
    8648:	80 e0       	ldi	r24, 0x00	; 0
    864a:	3e c0       	rjmp	.+124    	; 0x86c8 <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    864c:	00 91 1e 49 	lds	r16, 0x491E	; 0x80491e <_ZZ13util_delay_msE14countdownValue>
    8650:	10 91 1f 49 	lds	r17, 0x491F	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x1>
    8654:	20 91 20 49 	lds	r18, 0x4920	; 0x804920 <_ZZ13util_delay_msE14countdownValue+0x2>
    8658:	30 91 21 49 	lds	r19, 0x4921	; 0x804921 <_ZZ13util_delay_msE14countdownValue+0x3>
    865c:	60 17       	cp	r22, r16
    865e:	71 07       	cpc	r23, r17
    8660:	82 07       	cpc	r24, r18
    8662:	93 07       	cpc	r25, r19
    8664:	71 f1       	breq	.+92     	; 0x86c2 <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    8666:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    866a:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    866e:	60 93 1e 49 	sts	0x491E, r22	; 0x80491e <_ZZ13util_delay_msE14countdownValue>
    8672:	70 93 1f 49 	sts	0x491F, r23	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x1>
    8676:	80 93 20 49 	sts	0x4920, r24	; 0x804920 <_ZZ13util_delay_msE14countdownValue+0x2>
    867a:	90 93 21 49 	sts	0x4921, r25	; 0x804921 <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    867e:	60 93 23 49 	sts	0x4923, r22	; 0x804923 <_ZL12g_ms_counter>
    8682:	70 93 24 49 	sts	0x4924, r23	; 0x804924 <_ZL12g_ms_counter+0x1>
    8686:	80 93 25 49 	sts	0x4925, r24	; 0x804925 <_ZL12g_ms_counter+0x2>
    868a:	90 93 26 49 	sts	0x4926, r25	; 0x804926 <_ZL12g_ms_counter+0x3>
			counting = true;
    868e:	81 e0       	ldi	r24, 0x01	; 1
    8690:	80 93 22 49 	sts	0x4922, r24	; 0x804922 <_ZZ13util_delay_msE8counting>
    8694:	16 c0       	rjmp	.+44     	; 0x86c2 <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8696:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    869a:	10 92 22 49 	sts	0x4922, r1	; 0x804922 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    869e:	10 92 1e 49 	sts	0x491E, r1	; 0x80491e <_ZZ13util_delay_msE14countdownValue>
    86a2:	10 92 1f 49 	sts	0x491F, r1	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x1>
    86a6:	10 92 20 49 	sts	0x4920, r1	; 0x804920 <_ZZ13util_delay_msE14countdownValue+0x2>
    86aa:	10 92 21 49 	sts	0x4921, r1	; 0x804921 <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    86ae:	10 92 23 49 	sts	0x4923, r1	; 0x804923 <_ZL12g_ms_counter>
    86b2:	10 92 24 49 	sts	0x4924, r1	; 0x804924 <_ZL12g_ms_counter+0x1>
    86b6:	10 92 25 49 	sts	0x4925, r1	; 0x804925 <_ZL12g_ms_counter+0x2>
    86ba:	10 92 26 49 	sts	0x4926, r1	; 0x804926 <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    86be:	80 e0       	ldi	r24, 0x00	; 0
    86c0:	03 c0       	rjmp	.+6      	; 0x86c8 <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    86c2:	81 e0       	ldi	r24, 0x01	; 1
    86c4:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    86c8:	1f 91       	pop	r17
    86ca:	0f 91       	pop	r16
    86cc:	08 95       	ret

000086ce <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    86ce:	1f 92       	push	r1
    86d0:	0f 92       	push	r0
    86d2:	0f b6       	in	r0, 0x3f	; 63
    86d4:	0f 92       	push	r0
    86d6:	11 24       	eor	r1, r1
    86d8:	8f 93       	push	r24
    86da:	9f 93       	push	r25
    86dc:	af 93       	push	r26
    86de:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    86e0:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    86e4:	80 ff       	sbrs	r24, 0
    86e6:	1d c0       	rjmp	.+58     	; 0x8722 <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    86e8:	80 91 23 49 	lds	r24, 0x4923	; 0x804923 <_ZL12g_ms_counter>
    86ec:	90 91 24 49 	lds	r25, 0x4924	; 0x804924 <_ZL12g_ms_counter+0x1>
    86f0:	a0 91 25 49 	lds	r26, 0x4925	; 0x804925 <_ZL12g_ms_counter+0x2>
    86f4:	b0 91 26 49 	lds	r27, 0x4926	; 0x804926 <_ZL12g_ms_counter+0x3>
    86f8:	00 97       	sbiw	r24, 0x00	; 0
    86fa:	a1 05       	cpc	r26, r1
    86fc:	b1 05       	cpc	r27, r1
    86fe:	61 f0       	breq	.+24     	; 0x8718 <__vector_13+0x4a>
		{
			g_ms_counter--;	
    8700:	01 97       	sbiw	r24, 0x01	; 1
    8702:	a1 09       	sbc	r26, r1
    8704:	b1 09       	sbc	r27, r1
    8706:	80 93 23 49 	sts	0x4923, r24	; 0x804923 <_ZL12g_ms_counter>
    870a:	90 93 24 49 	sts	0x4924, r25	; 0x804924 <_ZL12g_ms_counter+0x1>
    870e:	a0 93 25 49 	sts	0x4925, r26	; 0x804925 <_ZL12g_ms_counter+0x2>
    8712:	b0 93 26 49 	sts	0x4926, r27	; 0x804926 <_ZL12g_ms_counter+0x3>
    8716:	02 c0       	rjmp	.+4      	; 0x871c <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8718:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    871c:	81 e0       	ldi	r24, 0x01	; 1
    871e:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    8722:	bf 91       	pop	r27
    8724:	af 91       	pop	r26
    8726:	9f 91       	pop	r25
    8728:	8f 91       	pop	r24
    872a:	0f 90       	pop	r0
    872c:	0f be       	out	0x3f, r0	; 63
    872e:	0f 90       	pop	r0
    8730:	1f 90       	pop	r1
    8732:	18 95       	reti

00008734 <_Z14txSetFrequencyPmb>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
    8734:	0f 93       	push	r16
    8736:	1f 93       	push	r17
    8738:	cf 93       	push	r28
    873a:	df 93       	push	r29
    873c:	fc 01       	movw	r30, r24
    873e:	46 2f       	mov	r20, r22
		bool err = false;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    8740:	60 81       	ld	r22, Z
    8742:	71 81       	ldd	r23, Z+1	; 0x01
    8744:	82 81       	ldd	r24, Z+2	; 0x02
    8746:	93 81       	ldd	r25, Z+3	; 0x03
    8748:	8b 01       	movw	r16, r22
    874a:	9c 01       	movw	r18, r24
    874c:	01 5e       	subi	r16, 0xE1	; 225
    874e:	17 46       	sbci	r17, 0x67	; 103
    8750:	25 43       	sbci	r18, 0x35	; 53
    8752:	31 09       	sbc	r19, r1
    8754:	0f 31       	cpi	r16, 0x1F	; 31
    8756:	11 4a       	sbci	r17, 0xA1	; 161
    8758:	27 40       	sbci	r18, 0x07	; 7
    875a:	31 05       	cpc	r19, r1
    875c:	a8 f4       	brcc	.+42     	; 0x8788 <_Z14txSetFrequencyPmb+0x54>
    875e:	24 2f       	mov	r18, r20
    8760:	ef 01       	movw	r28, r30
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
    8762:	41 e0       	ldi	r20, 0x01	; 1
    8764:	0e 94 5d 41 	call	0x82ba	; 0x82ba <si5351_set_freq>
    8768:	81 11       	cpse	r24, r1
    876a:	10 c0       	rjmp	.+32     	; 0x878c <_Z14txSetFrequencyPmb+0x58>
			{
				err = true; 
			}
			else
			{
				g_80m_frequency = *freq;
    876c:	88 81       	ld	r24, Y
    876e:	99 81       	ldd	r25, Y+1	; 0x01
    8770:	aa 81       	ldd	r26, Y+2	; 0x02
    8772:	bb 81       	ldd	r27, Y+3	; 0x03
    8774:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    8778:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    877c:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    8780:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
		bool err = false;
    8784:	80 e0       	ldi	r24, 0x00	; 0
    8786:	03 c0       	rjmp	.+6      	; 0x878e <_Z14txSetFrequencyPmb+0x5a>
    8788:	80 e0       	ldi	r24, 0x00	; 0
    878a:	01 c0       	rjmp	.+2      	; 0x878e <_Z14txSetFrequencyPmb+0x5a>

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
			{
				err = true; 
    878c:	81 e0       	ldi	r24, 0x01	; 1
				g_80m_frequency = *freq;
			}
		}

		return(err);
	}
    878e:	df 91       	pop	r29
    8790:	cf 91       	pop	r28
    8792:	1f 91       	pop	r17
    8794:	0f 91       	pop	r16
    8796:	08 95       	ret

00008798 <_Z14txGetFrequencyv>:

	Frequency_Hz txGetFrequency(void)
	{
		return( g_80m_frequency);
    8798:	60 91 2c 40 	lds	r22, 0x402C	; 0x80402c <g_80m_frequency>
    879c:	70 91 2d 40 	lds	r23, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    87a0:	80 91 2e 40 	lds	r24, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    87a4:	90 91 2f 40 	lds	r25, 0x402F	; 0x80402f <g_80m_frequency+0x3>
	}
    87a8:	08 95       	ret

000087aa <_Z18powerToTransmitterb>:

	EC powerToTransmitter(bool on)
	{
		fet_driver(on);
    87aa:	0e 94 94 28 	call	0x5128	; 0x5128 <_Z10fet_driverb>

		return(ERROR_CODE_NO_ERROR);
	}
    87ae:	80 e0       	ldi	r24, 0x00	; 0
    87b0:	08 95       	ret

000087b2 <_Z14keyTransmitterb>:

	void keyTransmitter(bool on)
	{
		if(g_tx_initialized)
    87b2:	90 91 27 49 	lds	r25, 0x4927	; 0x804927 <_ZL16g_tx_initialized>
    87b6:	99 23       	and	r25, r25
    87b8:	c1 f0       	breq	.+48     	; 0x87ea <_Z14keyTransmitterb+0x38>
		{			
			if(on)
    87ba:	88 23       	and	r24, r24
    87bc:	71 f0       	breq	.+28     	; 0x87da <_Z14keyTransmitterb+0x28>
			{
				if(!g_transmitter_keyed)
    87be:	80 91 28 49 	lds	r24, 0x4928	; 0x804928 <_ZL19g_transmitter_keyed>
    87c2:	81 11       	cpse	r24, r1
    87c4:	12 c0       	rjmp	.+36     	; 0x87ea <_Z14keyTransmitterb+0x38>
				{
					if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED) == ERROR_CODE_NO_ERROR)
    87c6:	61 e0       	ldi	r22, 0x01	; 1
    87c8:	81 e0       	ldi	r24, 0x01	; 1
    87ca:	0e 94 d3 3f 	call	0x7fa6	; 0x7fa6 <si5351_clock_enable>
    87ce:	81 11       	cpse	r24, r1
    87d0:	0c c0       	rjmp	.+24     	; 0x87ea <_Z14keyTransmitterb+0x38>
					{
						g_transmitter_keyed = true;
    87d2:	81 e0       	ldi	r24, 0x01	; 1
    87d4:	80 93 28 49 	sts	0x4928, r24	; 0x804928 <_ZL19g_transmitter_keyed>
    87d8:	08 95       	ret
					}
				}
			}
			else
			{
				if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED) == ERROR_CODE_NO_ERROR)
    87da:	60 e0       	ldi	r22, 0x00	; 0
    87dc:	81 e0       	ldi	r24, 0x01	; 1
    87de:	0e 94 d3 3f 	call	0x7fa6	; 0x7fa6 <si5351_clock_enable>
    87e2:	81 11       	cpse	r24, r1
    87e4:	02 c0       	rjmp	.+4      	; 0x87ea <_Z14keyTransmitterb+0x38>
				{
					g_transmitter_keyed = false;
    87e6:	10 92 28 49 	sts	0x4928, r1	; 0x804928 <_ZL19g_transmitter_keyed>
    87ea:	08 95       	ret

000087ec <_Z12txGetPowerMwv>:
		}
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
    87ec:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    87f0:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
	}
    87f4:	08 95       	ret

000087f6 <_Z15txSetParametersPjPb>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, bool* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, bool* enableDriverPwr) */
	{
    87f6:	cf 93       	push	r28
    87f8:	df 93       	push	r29
    87fa:	cd b7       	in	r28, 0x3d	; 61
    87fc:	de b7       	in	r29, 0x3e	; 62
    87fe:	2b 97       	sbiw	r28, 0x0b	; 11
    8800:	cd bf       	out	0x3d, r28	; 61
    8802:	de bf       	out	0x3e, r29	; 62
    8804:	88 87       	std	Y+8, r24	; 0x08
    8806:	99 87       	std	Y+9, r25	; 0x09
    8808:	6a 87       	std	Y+10, r22	; 0x0a
    880a:	7b 87       	std	Y+11, r23	; 0x0b
		bool err = false;
    880c:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    880e:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    8810:	1b 82       	std	Y+3, r1	; 0x03
    8812:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW != null)
    8814:	88 85       	ldd	r24, Y+8	; 0x08
    8816:	99 85       	ldd	r25, Y+9	; 0x09
    8818:	89 2b       	or	r24, r25
    881a:	09 f4       	brne	.+2      	; 0x881e <_Z15txSetParametersPjPb+0x28>
    881c:	64 c0       	rjmp	.+200    	; 0x88e6 <_Z15txSetParametersPjPb+0xf0>
		{
			power = *power_mW;
    881e:	88 85       	ldd	r24, Y+8	; 0x08
    8820:	99 85       	ldd	r25, Y+9	; 0x09
    8822:	fc 01       	movw	r30, r24
    8824:	80 81       	ld	r24, Z
    8826:	91 81       	ldd	r25, Z+1	; 0x01
    8828:	8b 83       	std	Y+3, r24	; 0x03
    882a:	9c 83       	std	Y+4, r25	; 0x04

			if(power <= MAX_TX_POWER_80M_MW)
    882c:	8b 81       	ldd	r24, Y+3	; 0x03
    882e:	9c 81       	ldd	r25, Y+4	; 0x04
    8830:	89 38       	cpi	r24, 0x89	; 137
    8832:	93 41       	sbci	r25, 0x13	; 19
    8834:	08 f0       	brcs	.+2      	; 0x8838 <_Z15txSetParametersPjPb+0x42>
    8836:	53 c0       	rjmp	.+166    	; 0x88de <_Z15txSetParametersPjPb+0xe8>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    8838:	9e 01       	movw	r18, r28
    883a:	29 5f       	subi	r18, 0xF9	; 249
    883c:	3f 4f       	sbci	r19, 0xFF	; 255
    883e:	ae 01       	movw	r20, r28
    8840:	4a 5f       	subi	r20, 0xFA	; 250
    8842:	5f 4f       	sbci	r21, 0xFF	; 255
    8844:	be 01       	movw	r22, r28
    8846:	6b 5f       	subi	r22, 0xFB	; 251
    8848:	7f 4f       	sbci	r23, 0xFF	; 255
    884a:	ce 01       	movw	r24, r28
    884c:	03 96       	adiw	r24, 0x03	; 3
    884e:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    8852:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    8854:	81 e0       	ldi	r24, 0x01	; 1
    8856:	9a 81       	ldd	r25, Y+2	; 0x02
    8858:	9f 3c       	cpi	r25, 0xCF	; 207
    885a:	09 f0       	breq	.+2      	; 0x885e <_Z15txSetParametersPjPb+0x68>
    885c:	80 e0       	ldi	r24, 0x00	; 0
    885e:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    8860:	8b 81       	ldd	r24, Y+3	; 0x03
    8862:	9c 81       	ldd	r25, Y+4	; 0x04
    8864:	21 e0       	ldi	r18, 0x01	; 1
    8866:	89 2b       	or	r24, r25
    8868:	09 f0       	breq	.+2      	; 0x886c <_Z15txSetParametersPjPb+0x76>
    886a:	20 e0       	ldi	r18, 0x00	; 0
    886c:	20 93 36 40 	sts	0x4036, r18	; 0x804036 <g_tx_power_is_zero>

				if(!err)
    8870:	99 81       	ldd	r25, Y+1	; 0x01
    8872:	81 e0       	ldi	r24, 0x01	; 1
    8874:	89 27       	eor	r24, r25
    8876:	88 23       	and	r24, r24
    8878:	51 f1       	breq	.+84     	; 0x88ce <_Z15txSetParametersPjPb+0xd8>
				{
					g_80m_power_level_mW = power;
    887a:	8b 81       	ldd	r24, Y+3	; 0x03
    887c:	9c 81       	ldd	r25, Y+4	; 0x04
    887e:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    8882:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    8886:	0e 94 93 45 	call	0x8b26	; 0x8b26 <_Z18txIsAntennaForBandv>
    888a:	88 23       	and	r24, r24
    888c:	31 f0       	breq	.+12     	; 0x889a <_Z15txSetParametersPjPb+0xa4>
					{
						DAC0_setVal(drainVoltageDAC);
    888e:	8d 81       	ldd	r24, Y+5	; 0x05
    8890:	88 2f       	mov	r24, r24
    8892:	90 e0       	ldi	r25, 0x00	; 0
    8894:	0e 94 c9 29 	call	0x5392	; 0x5392 <_Z11DAC0_setValj>
    8898:	07 c0       	rjmp	.+14     	; 0x88a8 <_Z15txSetParametersPjPb+0xb2>
					}
					else
					{
						g_tx_power_is_zero = true;
    889a:	81 e0       	ldi	r24, 0x01	; 1
    889c:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>
						err = true;
    88a0:	81 e0       	ldi	r24, 0x01	; 1
    88a2:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    88a4:	86 ef       	ldi	r24, 0xF6	; 246
    88a6:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || (drainVoltageDAC == 0))
    88a8:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    88ac:	88 23       	and	r24, r24
    88ae:	19 f4       	brne	.+6      	; 0x88b6 <_Z15txSetParametersPjPb+0xc0>
    88b0:	8d 81       	ldd	r24, Y+5	; 0x05
    88b2:	88 23       	and	r24, r24
    88b4:	11 f4       	brne	.+4      	; 0x88ba <_Z15txSetParametersPjPb+0xc4>
    88b6:	81 e0       	ldi	r24, 0x01	; 1
    88b8:	01 c0       	rjmp	.+2      	; 0x88bc <_Z15txSetParametersPjPb+0xc6>
    88ba:	80 e0       	ldi	r24, 0x00	; 0
    88bc:	88 23       	and	r24, r24
    88be:	21 f0       	breq	.+8      	; 0x88c8 <_Z15txSetParametersPjPb+0xd2>
					{
						powerToTransmitter(OFF); /* Turn off FET driver */
    88c0:	80 e0       	ldi	r24, 0x00	; 0
    88c2:	0e 94 d5 43 	call	0x87aa	; 0x87aa <_Z18powerToTransmitterb>
    88c6:	03 c0       	rjmp	.+6      	; 0x88ce <_Z15txSetParametersPjPb+0xd8>
					}
					else
					{
						powerToTransmitter(ON); /* Turn on FET driver */
    88c8:	81 e0       	ldi	r24, 0x01	; 1
    88ca:	0e 94 d5 43 	call	0x87aa	; 0x87aa <_Z18powerToTransmitterb>
					}
				}

				*power_mW = power;
    88ce:	2b 81       	ldd	r18, Y+3	; 0x03
    88d0:	3c 81       	ldd	r19, Y+4	; 0x04
    88d2:	88 85       	ldd	r24, Y+8	; 0x08
    88d4:	99 85       	ldd	r25, Y+9	; 0x09
    88d6:	fc 01       	movw	r30, r24
    88d8:	20 83       	st	Z, r18
    88da:	31 83       	std	Z+1, r19	; 0x01
    88dc:	04 c0       	rjmp	.+8      	; 0x88e6 <_Z15txSetParametersPjPb+0xf0>
			}
			else
			{
				err = true;
    88de:	81 e0       	ldi	r24, 0x01	; 1
    88e0:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    88e2:	85 ef       	ldi	r24, 0xF5	; 245
    88e4:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    88e6:	99 81       	ldd	r25, Y+1	; 0x01
    88e8:	81 e0       	ldi	r24, 0x01	; 1
    88ea:	89 27       	eor	r24, r25
    88ec:	88 23       	and	r24, r24
    88ee:	51 f0       	breq	.+20     	; 0x8904 <_Z15txSetParametersPjPb+0x10e>
		{
			if(enableDriverPwr != NULL)
    88f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    88f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    88f4:	89 2b       	or	r24, r25
    88f6:	31 f0       	breq	.+12     	; 0x8904 <_Z15txSetParametersPjPb+0x10e>
			{
				powerToTransmitter(*enableDriverPwr);
    88f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    88fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    88fc:	fc 01       	movw	r30, r24
    88fe:	80 81       	ld	r24, Z
    8900:	0e 94 d5 43 	call	0x87aa	; 0x87aa <_Z18powerToTransmitterb>
			}
		}

		return(code);
    8904:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    8906:	2b 96       	adiw	r28, 0x0b	; 11
    8908:	cd bf       	out	0x3d, r28	; 61
    890a:	de bf       	out	0x3e, r29	; 62
    890c:	df 91       	pop	r29
    890e:	cf 91       	pop	r28
    8910:	08 95       	ret

00008912 <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    8912:	1f 93       	push	r17
    8914:	cf 93       	push	r28
    8916:	df 93       	push	r29
    8918:	00 d0       	rcall	.+0      	; 0x891a <_Z16init_transmitterv+0x8>
    891a:	cd b7       	in	r28, 0x3d	; 61
    891c:	de b7       	in	r29, 0x3e	; 62
		EC code;
		bool err;
		
		DAC0_init();
    891e:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_Z9DAC0_initv>

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    8922:	40 e0       	ldi	r20, 0x00	; 0
    8924:	50 e0       	ldi	r21, 0x00	; 0
    8926:	ba 01       	movw	r22, r20
    8928:	80 e4       	ldi	r24, 0x40	; 64
    892a:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <si5351_init>
    892e:	81 11       	cpse	r24, r1
    8930:	2e c0       	rjmp	.+92     	; 0x898e <_Z16init_transmitterv+0x7c>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
		}

		if((code = txSetParameters(NULL, NULL)))
    8932:	60 e0       	ldi	r22, 0x00	; 0
    8934:	70 e0       	ldi	r23, 0x00	; 0
    8936:	80 e0       	ldi	r24, 0x00	; 0
    8938:	90 e0       	ldi	r25, 0x00	; 0
    893a:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <_Z15txSetParametersPjPb>
    893e:	81 11       	cpse	r24, r1
    8940:	2a c0       	rjmp	.+84     	; 0x8996 <_Z16init_transmitterv+0x84>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    8942:	63 e0       	ldi	r22, 0x03	; 3
    8944:	81 e0       	ldi	r24, 0x01	; 1
    8946:	0e 94 12 40 	call	0x8024	; 0x8024 <si5351_drive_strength>
    894a:	81 11       	cpse	r24, r1
    894c:	24 c0       	rjmp	.+72     	; 0x8996 <_Z16init_transmitterv+0x84>
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    894e:	60 e0       	ldi	r22, 0x00	; 0
    8950:	81 e0       	ldi	r24, 0x01	; 1
    8952:	0e 94 d3 3f 	call	0x7fa6	; 0x7fa6 <si5351_clock_enable>
    8956:	18 2f       	mov	r17, r24
    8958:	81 11       	cpse	r24, r1
    895a:	1b c0       	rjmp	.+54     	; 0x8992 <_Z16init_transmitterv+0x80>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    895c:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    8960:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    8964:	89 83       	std	Y+1, r24	; 0x01
    8966:	9a 83       	std	Y+2, r25	; 0x02
		
		err = txSetFrequency((Frequency_Hz*)&g_80m_frequency, true);
    8968:	61 e0       	ldi	r22, 0x01	; 1
    896a:	8c e2       	ldi	r24, 0x2C	; 44
    896c:	90 e4       	ldi	r25, 0x40	; 64
    896e:	0e 94 9a 43 	call	0x8734	; 0x8734 <_Z14txSetFrequencyPmb>
		if(!err)
    8972:	81 11       	cpse	r24, r1
    8974:	0f c0       	rjmp	.+30     	; 0x8994 <_Z16init_transmitterv+0x82>
		{
			code = txSetParameters(&pwr_mW, NULL);
    8976:	60 e0       	ldi	r22, 0x00	; 0
    8978:	70 e0       	ldi	r23, 0x00	; 0
    897a:	ce 01       	movw	r24, r28
    897c:	01 96       	adiw	r24, 0x01	; 1
    897e:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <_Z15txSetParametersPjPb>
			if(code == ERROR_CODE_NO_ERROR)
    8982:	81 11       	cpse	r24, r1
    8984:	08 c0       	rjmp	.+16     	; 0x8996 <_Z16init_transmitterv+0x84>
			{
				g_tx_initialized = true;
    8986:	91 e0       	ldi	r25, 0x01	; 1
    8988:	90 93 27 49 	sts	0x4927, r25	; 0x804927 <_ZL16g_tx_initialized>
    898c:	04 c0       	rjmp	.+8      	; 0x8996 <_Z16init_transmitterv+0x84>
		
		DAC0_init();

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
    898e:	82 ed       	ldi	r24, 0xD2	; 210
    8990:	02 c0       	rjmp	.+4      	; 0x8996 <_Z16init_transmitterv+0x84>
    8992:	01 c0       	rjmp	.+2      	; 0x8996 <_Z16init_transmitterv+0x84>
		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8994:	81 2f       	mov	r24, r17
				g_tx_initialized = true;
			}
		}

		return( code);
	}
    8996:	0f 90       	pop	r0
    8998:	0f 90       	pop	r0
    899a:	df 91       	pop	r29
    899c:	cf 91       	pop	r28
    899e:	1f 91       	pop	r17
    89a0:	08 95       	ret

000089a2 <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    89a2:	cf 93       	push	r28
    89a4:	df 93       	push	r29
    89a6:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    89a8:	89 2b       	or	r24, r25
    89aa:	09 f4       	brne	.+2      	; 0x89ae <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    89ac:	b8 c0       	rjmp	.+368    	; 0x8b1e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    89ae:	ed 91       	ld	r30, X+
    89b0:	fc 91       	ld	r31, X
    89b2:	11 97       	sbiw	r26, 0x01	; 1
    89b4:	e9 38       	cpi	r30, 0x89	; 137
    89b6:	83 e1       	ldi	r24, 0x13	; 19
    89b8:	f8 07       	cpc	r31, r24
    89ba:	14 f4       	brge	.+4      	; 0x89c0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    89bc:	80 e0       	ldi	r24, 0x00	; 0
    89be:	01 c0       	rjmp	.+2      	; 0x89c2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    89c0:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    89c2:	e9 38       	cpi	r30, 0x89	; 137
    89c4:	93 e1       	ldi	r25, 0x13	; 19
    89c6:	f9 07       	cpc	r31, r25
    89c8:	2c f4       	brge	.+10     	; 0x89d4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    89ca:	ff 23       	and	r31, r31
    89cc:	2c f4       	brge	.+10     	; 0x89d8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    89ce:	e0 e0       	ldi	r30, 0x00	; 0
    89d0:	f0 e0       	ldi	r31, 0x00	; 0
    89d2:	02 c0       	rjmp	.+4      	; 0x89d8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    89d4:	e8 e8       	ldi	r30, 0x88	; 136
    89d6:	f3 e1       	ldi	r31, 0x13	; 19
    89d8:	ef 01       	movw	r28, r30
    89da:	ed 93       	st	X+, r30
    89dc:	fc 93       	st	X, r31
    89de:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    89e0:	e5 30       	cpi	r30, 0x05	; 5
    89e2:	f1 05       	cpc	r31, r1
    89e4:	20 f4       	brcc	.+8      	; 0x89ee <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    89e6:	1d 92       	st	X+, r1
    89e8:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    89ea:	e0 e0       	ldi	r30, 0x00	; 0
    89ec:	8d c0       	rjmp	.+282    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    89ee:	e2 33       	cpi	r30, 0x32	; 50
    89f0:	f1 05       	cpc	r31, r1
    89f2:	30 f4       	brcc	.+12     	; 0x8a00 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    89f4:	ea e0       	ldi	r30, 0x0A	; 10
    89f6:	f0 e0       	ldi	r31, 0x00	; 0
    89f8:	ed 93       	st	X+, r30
    89fa:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    89fc:	e1 e0       	ldi	r30, 0x01	; 1
    89fe:	84 c0       	rjmp	.+264    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    8a00:	e6 39       	cpi	r30, 0x96	; 150
    8a02:	f1 05       	cpc	r31, r1
    8a04:	30 f4       	brcc	.+12     	; 0x8a12 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    8a06:	e4 e6       	ldi	r30, 0x64	; 100
    8a08:	f0 e0       	ldi	r31, 0x00	; 0
    8a0a:	ed 93       	st	X+, r30
    8a0c:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    8a0e:	e2 e0       	ldi	r30, 0x02	; 2
    8a10:	7b c0       	rjmp	.+246    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    8a12:	ea 3f       	cpi	r30, 0xFA	; 250
    8a14:	f1 05       	cpc	r31, r1
    8a16:	30 f4       	brcc	.+12     	; 0x8a24 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    8a18:	e8 ec       	ldi	r30, 0xC8	; 200
    8a1a:	f0 e0       	ldi	r31, 0x00	; 0
    8a1c:	ed 93       	st	X+, r30
    8a1e:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    8a20:	e3 e0       	ldi	r30, 0x03	; 3
    8a22:	72 c0       	rjmp	.+228    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    8a24:	ce 35       	cpi	r28, 0x5E	; 94
    8a26:	e1 e0       	ldi	r30, 0x01	; 1
    8a28:	de 07       	cpc	r29, r30
    8a2a:	30 f4       	brcc	.+12     	; 0x8a38 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    8a2c:	ec e2       	ldi	r30, 0x2C	; 44
    8a2e:	f1 e0       	ldi	r31, 0x01	; 1
    8a30:	ed 93       	st	X+, r30
    8a32:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    8a34:	e4 e0       	ldi	r30, 0x04	; 4
    8a36:	68 c0       	rjmp	.+208    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    8a38:	c2 3c       	cpi	r28, 0xC2	; 194
    8a3a:	f1 e0       	ldi	r31, 0x01	; 1
    8a3c:	df 07       	cpc	r29, r31
    8a3e:	30 f4       	brcc	.+12     	; 0x8a4c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    8a40:	e0 e9       	ldi	r30, 0x90	; 144
    8a42:	f1 e0       	ldi	r31, 0x01	; 1
    8a44:	ed 93       	st	X+, r30
    8a46:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    8a48:	e5 e0       	ldi	r30, 0x05	; 5
    8a4a:	5e c0       	rjmp	.+188    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    8a4c:	c6 32       	cpi	r28, 0x26	; 38
    8a4e:	92 e0       	ldi	r25, 0x02	; 2
    8a50:	d9 07       	cpc	r29, r25
    8a52:	30 f4       	brcc	.+12     	; 0x8a60 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    8a54:	e4 ef       	ldi	r30, 0xF4	; 244
    8a56:	f1 e0       	ldi	r31, 0x01	; 1
    8a58:	ed 93       	st	X+, r30
    8a5a:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    8a5c:	e6 e0       	ldi	r30, 0x06	; 6
    8a5e:	54 c0       	rjmp	.+168    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    8a60:	ca 38       	cpi	r28, 0x8A	; 138
    8a62:	e2 e0       	ldi	r30, 0x02	; 2
    8a64:	de 07       	cpc	r29, r30
    8a66:	30 f4       	brcc	.+12     	; 0x8a74 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    8a68:	e8 e5       	ldi	r30, 0x58	; 88
    8a6a:	f2 e0       	ldi	r31, 0x02	; 2
    8a6c:	ed 93       	st	X+, r30
    8a6e:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    8a70:	e7 e0       	ldi	r30, 0x07	; 7
    8a72:	4a c0       	rjmp	.+148    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    8a74:	c4 38       	cpi	r28, 0x84	; 132
    8a76:	f3 e0       	ldi	r31, 0x03	; 3
    8a78:	df 07       	cpc	r29, r31
    8a7a:	30 f4       	brcc	.+12     	; 0x8a88 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    8a7c:	e0 e2       	ldi	r30, 0x20	; 32
    8a7e:	f3 e0       	ldi	r31, 0x03	; 3
    8a80:	ed 93       	st	X+, r30
    8a82:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    8a84:	e8 e0       	ldi	r30, 0x08	; 8
    8a86:	40 c0       	rjmp	.+128    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    8a88:	c2 3e       	cpi	r28, 0xE2	; 226
    8a8a:	94 e0       	ldi	r25, 0x04	; 4
    8a8c:	d9 07       	cpc	r29, r25
    8a8e:	30 f4       	brcc	.+12     	; 0x8a9c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    8a90:	e8 ee       	ldi	r30, 0xE8	; 232
    8a92:	f3 e0       	ldi	r31, 0x03	; 3
    8a94:	ed 93       	st	X+, r30
    8a96:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    8a98:	e9 e0       	ldi	r30, 0x09	; 9
    8a9a:	36 c0       	rjmp	.+108    	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    8a9c:	c6 3d       	cpi	r28, 0xD6	; 214
    8a9e:	e6 e0       	ldi	r30, 0x06	; 6
    8aa0:	de 07       	cpc	r29, r30
    8aa2:	30 f4       	brcc	.+12     	; 0x8ab0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    8aa4:	ec ed       	ldi	r30, 0xDC	; 220
    8aa6:	f5 e0       	ldi	r31, 0x05	; 5
    8aa8:	ed 93       	st	X+, r30
    8aaa:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    8aac:	ea e0       	ldi	r30, 0x0A	; 10
    8aae:	2c c0       	rjmp	.+88     	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    8ab0:	ca 3c       	cpi	r28, 0xCA	; 202
    8ab2:	f8 e0       	ldi	r31, 0x08	; 8
    8ab4:	df 07       	cpc	r29, r31
    8ab6:	30 f4       	brcc	.+12     	; 0x8ac4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    8ab8:	e0 ed       	ldi	r30, 0xD0	; 208
    8aba:	f7 e0       	ldi	r31, 0x07	; 7
    8abc:	ed 93       	st	X+, r30
    8abe:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    8ac0:	eb e0       	ldi	r30, 0x0B	; 11
    8ac2:	22 c0       	rjmp	.+68     	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    8ac4:	ce 3b       	cpi	r28, 0xBE	; 190
    8ac6:	9a e0       	ldi	r25, 0x0A	; 10
    8ac8:	d9 07       	cpc	r29, r25
    8aca:	30 f4       	brcc	.+12     	; 0x8ad8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    8acc:	e4 ec       	ldi	r30, 0xC4	; 196
    8ace:	f9 e0       	ldi	r31, 0x09	; 9
    8ad0:	ed 93       	st	X+, r30
    8ad2:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    8ad4:	ec e0       	ldi	r30, 0x0C	; 12
    8ad6:	18 c0       	rjmp	.+48     	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    8ad8:	cc 3a       	cpi	r28, 0xAC	; 172
    8ada:	ed e0       	ldi	r30, 0x0D	; 13
    8adc:	de 07       	cpc	r29, r30
    8ade:	30 f4       	brcc	.+12     	; 0x8aec <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    8ae0:	e8 eb       	ldi	r30, 0xB8	; 184
    8ae2:	fb e0       	ldi	r31, 0x0B	; 11
    8ae4:	ed 93       	st	X+, r30
    8ae6:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    8ae8:	ed e0       	ldi	r30, 0x0D	; 13
    8aea:	0e c0       	rjmp	.+28     	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    8aec:	c4 39       	cpi	r28, 0x94	; 148
    8aee:	d1 41       	sbci	r29, 0x11	; 17
    8af0:	30 f4       	brcc	.+12     	; 0x8afe <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    8af2:	e0 ea       	ldi	r30, 0xA0	; 160
    8af4:	ff e0       	ldi	r31, 0x0F	; 15
    8af6:	ed 93       	st	X+, r30
    8af8:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    8afa:	ee e0       	ldi	r30, 0x0E	; 14
    8afc:	05 c0       	rjmp	.+10     	; 0x8b08 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    8afe:	e8 e8       	ldi	r30, 0x88	; 136
    8b00:	f3 e1       	ldi	r31, 0x13	; 19
    8b02:	ed 93       	st	X+, r30
    8b04:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    8b06:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    8b08:	f0 e0       	ldi	r31, 0x00	; 0
    8b0a:	e9 5c       	subi	r30, 0xC9	; 201
    8b0c:	ff 4b       	sbci	r31, 0xBF	; 191
    8b0e:	90 81       	ld	r25, Z
    8b10:	fb 01       	movw	r30, r22
    8b12:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    8b14:	fa 01       	movw	r30, r20
    8b16:	10 82       	st	Z, r1
	*modLevelLow = 0;
    8b18:	f9 01       	movw	r30, r18
    8b1a:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    8b1c:	01 c0       	rjmp	.+2      	; 0x8b20 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    8b1e:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    8b20:	df 91       	pop	r29
    8b22:	cf 91       	pop	r28
    8b24:	08 95       	ret

00008b26 <_Z18txIsAntennaForBandv>:

/**
 */
bool __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    8b26:	cf 93       	push	r28
    8b28:	df 93       	push	r29
    8b2a:	1f 92       	push	r1
    8b2c:	cd b7       	in	r28, 0x3d	; 61
    8b2e:	de b7       	in	r29, 0x3e	; 62
	bool result = false;
    8b30:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    8b32:	80 91 bb 45 	lds	r24, 0x45BB	; 0x8045bb <g_antenna_connect_state>
    8b36:	88 2f       	mov	r24, r24
    8b38:	90 e0       	ldi	r25, 0x00	; 0
    8b3a:	02 97       	sbiw	r24, 0x02	; 2
    8b3c:	09 f0       	breq	.+2      	; 0x8b40 <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    8b3e:	03 c0       	rjmp	.+6      	; 0x8b46 <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = true;
    8b40:	81 e0       	ldi	r24, 0x01	; 1
    8b42:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    8b44:	00 00       	nop

		}
		break;
	}

	return( result);
    8b46:	89 81       	ldd	r24, Y+1	; 0x01
}
    8b48:	0f 90       	pop	r0
    8b4a:	df 91       	pop	r29
    8b4c:	cf 91       	pop	r28
    8b4e:	08 95       	ret

00008b50 <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_enable_rx()
{
	USART4.CTRLB |= USART_RXEN_bm;
    8b50:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    8b54:	08 95       	ret

00008b56 <USART1_init>:
    8b56:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <__floatunsisf>
    8b5a:	20 e0       	ldi	r18, 0x00	; 0
    8b5c:	30 e0       	ldi	r19, 0x00	; 0
    8b5e:	40 e8       	ldi	r20, 0x80	; 128
    8b60:	51 e4       	ldi	r21, 0x41	; 65
    8b62:	0e 94 02 48 	call	0x9004	; 0x9004 <__mulsf3>
    8b66:	9b 01       	movw	r18, r22
    8b68:	ac 01       	movw	r20, r24
    8b6a:	60 e0       	ldi	r22, 0x00	; 0
    8b6c:	74 e2       	ldi	r23, 0x24	; 36
    8b6e:	84 e7       	ldi	r24, 0x74	; 116
    8b70:	9d e4       	ldi	r25, 0x4D	; 77
    8b72:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <__divsf3>
    8b76:	20 e0       	ldi	r18, 0x00	; 0
    8b78:	30 e0       	ldi	r19, 0x00	; 0
    8b7a:	40 e0       	ldi	r20, 0x00	; 0
    8b7c:	5f e3       	ldi	r21, 0x3F	; 63
    8b7e:	0e 94 32 46 	call	0x8c64	; 0x8c64 <__addsf3>
    8b82:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <__fixunssfsi>
    8b86:	e0 e2       	ldi	r30, 0x20	; 32
    8b88:	f8 e0       	ldi	r31, 0x08	; 8
    8b8a:	60 87       	std	Z+8, r22	; 0x08
    8b8c:	71 87       	std	Z+9, r23	; 0x09
    8b8e:	80 e8       	ldi	r24, 0x80	; 128
    8b90:	85 83       	std	Z+5, r24	; 0x05
    8b92:	80 ec       	ldi	r24, 0xC0	; 192
    8b94:	86 83       	std	Z+6, r24	; 0x06
    8b96:	80 e0       	ldi	r24, 0x00	; 0
    8b98:	08 95       	ret

00008b9a <USART1_enable_tx>:
    8b9a:	e0 e2       	ldi	r30, 0x20	; 32
    8b9c:	f8 e0       	ldi	r31, 0x08	; 8
    8b9e:	86 81       	ldd	r24, Z+6	; 0x06
    8ba0:	80 64       	ori	r24, 0x40	; 64
    8ba2:	86 83       	std	Z+6, r24	; 0x06
    8ba4:	85 81       	ldd	r24, Z+5	; 0x05
    8ba6:	80 62       	ori	r24, 0x20	; 32
    8ba8:	85 83       	std	Z+5, r24	; 0x05
    8baa:	08 95       	ret

00008bac <USART1_disable>:
    8bac:	e0 e2       	ldi	r30, 0x20	; 32
    8bae:	f8 e0       	ldi	r31, 0x08	; 8
    8bb0:	86 81       	ldd	r24, Z+6	; 0x06
    8bb2:	8f 73       	andi	r24, 0x3F	; 63
    8bb4:	86 83       	std	Z+6, r24	; 0x06
    8bb6:	08 95       	ret

00008bb8 <USART1_get_data>:
    8bb8:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    8bbc:	08 95       	ret

00008bbe <USART4_init>:
    8bbe:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <__floatunsisf>
    8bc2:	20 e0       	ldi	r18, 0x00	; 0
    8bc4:	30 e0       	ldi	r19, 0x00	; 0
    8bc6:	40 e8       	ldi	r20, 0x80	; 128
    8bc8:	51 e4       	ldi	r21, 0x41	; 65
    8bca:	0e 94 02 48 	call	0x9004	; 0x9004 <__mulsf3>
    8bce:	9b 01       	movw	r18, r22
    8bd0:	ac 01       	movw	r20, r24
    8bd2:	60 e0       	ldi	r22, 0x00	; 0
    8bd4:	74 e2       	ldi	r23, 0x24	; 36
    8bd6:	84 e7       	ldi	r24, 0x74	; 116
    8bd8:	9d e4       	ldi	r25, 0x4D	; 77
    8bda:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <__divsf3>
    8bde:	20 e0       	ldi	r18, 0x00	; 0
    8be0:	30 e0       	ldi	r19, 0x00	; 0
    8be2:	40 e0       	ldi	r20, 0x00	; 0
    8be4:	5f e3       	ldi	r21, 0x3F	; 63
    8be6:	0e 94 32 46 	call	0x8c64	; 0x8c64 <__addsf3>
    8bea:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <__fixunssfsi>
    8bee:	e0 e8       	ldi	r30, 0x80	; 128
    8bf0:	f8 e0       	ldi	r31, 0x08	; 8
    8bf2:	60 87       	std	Z+8, r22	; 0x08
    8bf4:	71 87       	std	Z+9, r23	; 0x09
    8bf6:	80 e8       	ldi	r24, 0x80	; 128
    8bf8:	85 83       	std	Z+5, r24	; 0x05
    8bfa:	80 ec       	ldi	r24, 0xC0	; 192
    8bfc:	86 83       	std	Z+6, r24	; 0x06
    8bfe:	80 e0       	ldi	r24, 0x00	; 0
    8c00:	08 95       	ret

00008c02 <USART4_enable_tx>:
 *
 * \return Nothing
 */
void USART4_enable_tx()
{
	USART4.CTRLB |= USART_TXEN_bm;
    8c02:	e0 e8       	ldi	r30, 0x80	; 128
    8c04:	f8 e0       	ldi	r31, 0x08	; 8
    8c06:	86 81       	ldd	r24, Z+6	; 0x06
    8c08:	80 64       	ori	r24, 0x40	; 64
    8c0a:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLA |= 1 << USART_DREIE_bp; /* Transmit Data Ready Interrupt Enable: enable */
    8c0c:	85 81       	ldd	r24, Z+5	; 0x05
    8c0e:	80 62       	ori	r24, 0x20	; 32
    8c10:	85 83       	std	Z+5, r24	; 0x05
    8c12:	08 95       	ret

00008c14 <USART4_disable>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    8c14:	e0 e8       	ldi	r30, 0x80	; 128
    8c16:	f8 e0       	ldi	r31, 0x08	; 8
    8c18:	86 81       	ldd	r24, Z+6	; 0x06
    8c1a:	8f 73       	andi	r24, 0x3F	; 63
    8c1c:	86 83       	std	Z+6, r24	; 0x06
    8c1e:	08 95       	ret

00008c20 <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    8c20:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    8c24:	08 95       	ret

00008c26 <_Z7timeDifmm>:
    (ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    ((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
  }

  return result;
}
    8c26:	26 17       	cp	r18, r22
    8c28:	37 07       	cpc	r19, r23
    8c2a:	48 07       	cpc	r20, r24
    8c2c:	59 07       	cpc	r21, r25
    8c2e:	28 f4       	brcc	.+10     	; 0x8c3a <_Z7timeDifmm+0x14>
    8c30:	62 1b       	sub	r22, r18
    8c32:	73 0b       	sbc	r23, r19
    8c34:	84 0b       	sbc	r24, r20
    8c36:	95 0b       	sbc	r25, r21
    8c38:	08 95       	ret
    8c3a:	62 1b       	sub	r22, r18
    8c3c:	73 0b       	sbc	r23, r19
    8c3e:	84 0b       	sbc	r24, r20
    8c40:	95 0b       	sbc	r25, r21
    8c42:	08 95       	ret

00008c44 <_Z11only_digitsPc>:

/** 
 * Checks a string to see if it contains only numerical characters
 */
bool only_digits(char *s)
{
    8c44:	fc 01       	movw	r30, r24
	while(*s)
    8c46:	20 81       	ld	r18, Z
    8c48:	22 23       	and	r18, r18
    8c4a:	49 f0       	breq	.+18     	; 0x8c5e <_Z11only_digitsPc+0x1a>
	{
		if(isdigit(*s++) == 0)
    8c4c:	31 96       	adiw	r30, 0x01	; 1
    8c4e:	30 e0       	ldi	r19, 0x00	; 0
    8c50:	20 53       	subi	r18, 0x30	; 48
    8c52:	31 09       	sbc	r19, r1
    8c54:	2a 30       	cpi	r18, 0x0A	; 10
    8c56:	31 05       	cpc	r19, r1
    8c58:	b0 f3       	brcs	.-20     	; 0x8c46 <_Z11only_digitsPc+0x2>
		{
			return( false);
    8c5a:	80 e0       	ldi	r24, 0x00	; 0
    8c5c:	08 95       	ret
		}
	}

	return( true);
    8c5e:	81 e0       	ldi	r24, 0x01	; 1
}
    8c60:	08 95       	ret

00008c62 <__subsf3>:
    8c62:	50 58       	subi	r21, 0x80	; 128

00008c64 <__addsf3>:
    8c64:	bb 27       	eor	r27, r27
    8c66:	aa 27       	eor	r26, r26
    8c68:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__addsf3x>
    8c6c:	0c 94 c3 47 	jmp	0x8f86	; 0x8f86 <__fp_round>
    8c70:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <__fp_pscA>
    8c74:	38 f0       	brcs	.+14     	; 0x8c84 <__addsf3+0x20>
    8c76:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <__fp_pscB>
    8c7a:	20 f0       	brcs	.+8      	; 0x8c84 <__addsf3+0x20>
    8c7c:	39 f4       	brne	.+14     	; 0x8c8c <__addsf3+0x28>
    8c7e:	9f 3f       	cpi	r25, 0xFF	; 255
    8c80:	19 f4       	brne	.+6      	; 0x8c88 <__addsf3+0x24>
    8c82:	26 f4       	brtc	.+8      	; 0x8c8c <__addsf3+0x28>
    8c84:	0c 94 b2 47 	jmp	0x8f64	; 0x8f64 <__fp_nan>
    8c88:	0e f4       	brtc	.+2      	; 0x8c8c <__addsf3+0x28>
    8c8a:	e0 95       	com	r30
    8c8c:	e7 fb       	bst	r30, 7
    8c8e:	0c 94 ac 47 	jmp	0x8f58	; 0x8f58 <__fp_inf>

00008c92 <__addsf3x>:
    8c92:	e9 2f       	mov	r30, r25
    8c94:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <__fp_split3>
    8c98:	58 f3       	brcs	.-42     	; 0x8c70 <__addsf3+0xc>
    8c9a:	ba 17       	cp	r27, r26
    8c9c:	62 07       	cpc	r22, r18
    8c9e:	73 07       	cpc	r23, r19
    8ca0:	84 07       	cpc	r24, r20
    8ca2:	95 07       	cpc	r25, r21
    8ca4:	20 f0       	brcs	.+8      	; 0x8cae <__addsf3x+0x1c>
    8ca6:	79 f4       	brne	.+30     	; 0x8cc6 <__addsf3x+0x34>
    8ca8:	a6 f5       	brtc	.+104    	; 0x8d12 <__addsf3x+0x80>
    8caa:	0c 94 f6 47 	jmp	0x8fec	; 0x8fec <__fp_zero>
    8cae:	0e f4       	brtc	.+2      	; 0x8cb2 <__addsf3x+0x20>
    8cb0:	e0 95       	com	r30
    8cb2:	0b 2e       	mov	r0, r27
    8cb4:	ba 2f       	mov	r27, r26
    8cb6:	a0 2d       	mov	r26, r0
    8cb8:	0b 01       	movw	r0, r22
    8cba:	b9 01       	movw	r22, r18
    8cbc:	90 01       	movw	r18, r0
    8cbe:	0c 01       	movw	r0, r24
    8cc0:	ca 01       	movw	r24, r20
    8cc2:	a0 01       	movw	r20, r0
    8cc4:	11 24       	eor	r1, r1
    8cc6:	ff 27       	eor	r31, r31
    8cc8:	59 1b       	sub	r21, r25
    8cca:	99 f0       	breq	.+38     	; 0x8cf2 <__addsf3x+0x60>
    8ccc:	59 3f       	cpi	r21, 0xF9	; 249
    8cce:	50 f4       	brcc	.+20     	; 0x8ce4 <__addsf3x+0x52>
    8cd0:	50 3e       	cpi	r21, 0xE0	; 224
    8cd2:	68 f1       	brcs	.+90     	; 0x8d2e <__addsf3x+0x9c>
    8cd4:	1a 16       	cp	r1, r26
    8cd6:	f0 40       	sbci	r31, 0x00	; 0
    8cd8:	a2 2f       	mov	r26, r18
    8cda:	23 2f       	mov	r18, r19
    8cdc:	34 2f       	mov	r19, r20
    8cde:	44 27       	eor	r20, r20
    8ce0:	58 5f       	subi	r21, 0xF8	; 248
    8ce2:	f3 cf       	rjmp	.-26     	; 0x8cca <__addsf3x+0x38>
    8ce4:	46 95       	lsr	r20
    8ce6:	37 95       	ror	r19
    8ce8:	27 95       	ror	r18
    8cea:	a7 95       	ror	r26
    8cec:	f0 40       	sbci	r31, 0x00	; 0
    8cee:	53 95       	inc	r21
    8cf0:	c9 f7       	brne	.-14     	; 0x8ce4 <__addsf3x+0x52>
    8cf2:	7e f4       	brtc	.+30     	; 0x8d12 <__addsf3x+0x80>
    8cf4:	1f 16       	cp	r1, r31
    8cf6:	ba 0b       	sbc	r27, r26
    8cf8:	62 0b       	sbc	r22, r18
    8cfa:	73 0b       	sbc	r23, r19
    8cfc:	84 0b       	sbc	r24, r20
    8cfe:	ba f0       	brmi	.+46     	; 0x8d2e <__addsf3x+0x9c>
    8d00:	91 50       	subi	r25, 0x01	; 1
    8d02:	a1 f0       	breq	.+40     	; 0x8d2c <__addsf3x+0x9a>
    8d04:	ff 0f       	add	r31, r31
    8d06:	bb 1f       	adc	r27, r27
    8d08:	66 1f       	adc	r22, r22
    8d0a:	77 1f       	adc	r23, r23
    8d0c:	88 1f       	adc	r24, r24
    8d0e:	c2 f7       	brpl	.-16     	; 0x8d00 <__addsf3x+0x6e>
    8d10:	0e c0       	rjmp	.+28     	; 0x8d2e <__addsf3x+0x9c>
    8d12:	ba 0f       	add	r27, r26
    8d14:	62 1f       	adc	r22, r18
    8d16:	73 1f       	adc	r23, r19
    8d18:	84 1f       	adc	r24, r20
    8d1a:	48 f4       	brcc	.+18     	; 0x8d2e <__addsf3x+0x9c>
    8d1c:	87 95       	ror	r24
    8d1e:	77 95       	ror	r23
    8d20:	67 95       	ror	r22
    8d22:	b7 95       	ror	r27
    8d24:	f7 95       	ror	r31
    8d26:	9e 3f       	cpi	r25, 0xFE	; 254
    8d28:	08 f0       	brcs	.+2      	; 0x8d2c <__addsf3x+0x9a>
    8d2a:	b0 cf       	rjmp	.-160    	; 0x8c8c <__addsf3+0x28>
    8d2c:	93 95       	inc	r25
    8d2e:	88 0f       	add	r24, r24
    8d30:	08 f0       	brcs	.+2      	; 0x8d34 <__addsf3x+0xa2>
    8d32:	99 27       	eor	r25, r25
    8d34:	ee 0f       	add	r30, r30
    8d36:	97 95       	ror	r25
    8d38:	87 95       	ror	r24
    8d3a:	08 95       	ret

00008d3c <__cmpsf2>:
    8d3c:	0e 94 88 47 	call	0x8f10	; 0x8f10 <__fp_cmp>
    8d40:	08 f4       	brcc	.+2      	; 0x8d44 <__cmpsf2+0x8>
    8d42:	81 e0       	ldi	r24, 0x01	; 1
    8d44:	08 95       	ret

00008d46 <__divsf3>:
    8d46:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <__divsf3x>
    8d4a:	0c 94 c3 47 	jmp	0x8f86	; 0x8f86 <__fp_round>
    8d4e:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <__fp_pscB>
    8d52:	58 f0       	brcs	.+22     	; 0x8d6a <__divsf3+0x24>
    8d54:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <__fp_pscA>
    8d58:	40 f0       	brcs	.+16     	; 0x8d6a <__divsf3+0x24>
    8d5a:	29 f4       	brne	.+10     	; 0x8d66 <__divsf3+0x20>
    8d5c:	5f 3f       	cpi	r21, 0xFF	; 255
    8d5e:	29 f0       	breq	.+10     	; 0x8d6a <__divsf3+0x24>
    8d60:	0c 94 ac 47 	jmp	0x8f58	; 0x8f58 <__fp_inf>
    8d64:	51 11       	cpse	r21, r1
    8d66:	0c 94 f7 47 	jmp	0x8fee	; 0x8fee <__fp_szero>
    8d6a:	0c 94 b2 47 	jmp	0x8f64	; 0x8f64 <__fp_nan>

00008d6e <__divsf3x>:
    8d6e:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <__fp_split3>
    8d72:	68 f3       	brcs	.-38     	; 0x8d4e <__divsf3+0x8>

00008d74 <__divsf3_pse>:
    8d74:	99 23       	and	r25, r25
    8d76:	b1 f3       	breq	.-20     	; 0x8d64 <__divsf3+0x1e>
    8d78:	55 23       	and	r21, r21
    8d7a:	91 f3       	breq	.-28     	; 0x8d60 <__divsf3+0x1a>
    8d7c:	95 1b       	sub	r25, r21
    8d7e:	55 0b       	sbc	r21, r21
    8d80:	bb 27       	eor	r27, r27
    8d82:	aa 27       	eor	r26, r26
    8d84:	62 17       	cp	r22, r18
    8d86:	73 07       	cpc	r23, r19
    8d88:	84 07       	cpc	r24, r20
    8d8a:	38 f0       	brcs	.+14     	; 0x8d9a <__divsf3_pse+0x26>
    8d8c:	9f 5f       	subi	r25, 0xFF	; 255
    8d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    8d90:	22 0f       	add	r18, r18
    8d92:	33 1f       	adc	r19, r19
    8d94:	44 1f       	adc	r20, r20
    8d96:	aa 1f       	adc	r26, r26
    8d98:	a9 f3       	breq	.-22     	; 0x8d84 <__divsf3_pse+0x10>
    8d9a:	35 d0       	rcall	.+106    	; 0x8e06 <__divsf3_pse+0x92>
    8d9c:	0e 2e       	mov	r0, r30
    8d9e:	3a f0       	brmi	.+14     	; 0x8dae <__divsf3_pse+0x3a>
    8da0:	e0 e8       	ldi	r30, 0x80	; 128
    8da2:	32 d0       	rcall	.+100    	; 0x8e08 <__divsf3_pse+0x94>
    8da4:	91 50       	subi	r25, 0x01	; 1
    8da6:	50 40       	sbci	r21, 0x00	; 0
    8da8:	e6 95       	lsr	r30
    8daa:	00 1c       	adc	r0, r0
    8dac:	ca f7       	brpl	.-14     	; 0x8da0 <__divsf3_pse+0x2c>
    8dae:	2b d0       	rcall	.+86     	; 0x8e06 <__divsf3_pse+0x92>
    8db0:	fe 2f       	mov	r31, r30
    8db2:	29 d0       	rcall	.+82     	; 0x8e06 <__divsf3_pse+0x92>
    8db4:	66 0f       	add	r22, r22
    8db6:	77 1f       	adc	r23, r23
    8db8:	88 1f       	adc	r24, r24
    8dba:	bb 1f       	adc	r27, r27
    8dbc:	26 17       	cp	r18, r22
    8dbe:	37 07       	cpc	r19, r23
    8dc0:	48 07       	cpc	r20, r24
    8dc2:	ab 07       	cpc	r26, r27
    8dc4:	b0 e8       	ldi	r27, 0x80	; 128
    8dc6:	09 f0       	breq	.+2      	; 0x8dca <__divsf3_pse+0x56>
    8dc8:	bb 0b       	sbc	r27, r27
    8dca:	80 2d       	mov	r24, r0
    8dcc:	bf 01       	movw	r22, r30
    8dce:	ff 27       	eor	r31, r31
    8dd0:	93 58       	subi	r25, 0x83	; 131
    8dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    8dd4:	3a f0       	brmi	.+14     	; 0x8de4 <__divsf3_pse+0x70>
    8dd6:	9e 3f       	cpi	r25, 0xFE	; 254
    8dd8:	51 05       	cpc	r21, r1
    8dda:	78 f0       	brcs	.+30     	; 0x8dfa <__divsf3_pse+0x86>
    8ddc:	0c 94 ac 47 	jmp	0x8f58	; 0x8f58 <__fp_inf>
    8de0:	0c 94 f7 47 	jmp	0x8fee	; 0x8fee <__fp_szero>
    8de4:	5f 3f       	cpi	r21, 0xFF	; 255
    8de6:	e4 f3       	brlt	.-8      	; 0x8de0 <__divsf3_pse+0x6c>
    8de8:	98 3e       	cpi	r25, 0xE8	; 232
    8dea:	d4 f3       	brlt	.-12     	; 0x8de0 <__divsf3_pse+0x6c>
    8dec:	86 95       	lsr	r24
    8dee:	77 95       	ror	r23
    8df0:	67 95       	ror	r22
    8df2:	b7 95       	ror	r27
    8df4:	f7 95       	ror	r31
    8df6:	9f 5f       	subi	r25, 0xFF	; 255
    8df8:	c9 f7       	brne	.-14     	; 0x8dec <__divsf3_pse+0x78>
    8dfa:	88 0f       	add	r24, r24
    8dfc:	91 1d       	adc	r25, r1
    8dfe:	96 95       	lsr	r25
    8e00:	87 95       	ror	r24
    8e02:	97 f9       	bld	r25, 7
    8e04:	08 95       	ret
    8e06:	e1 e0       	ldi	r30, 0x01	; 1
    8e08:	66 0f       	add	r22, r22
    8e0a:	77 1f       	adc	r23, r23
    8e0c:	88 1f       	adc	r24, r24
    8e0e:	bb 1f       	adc	r27, r27
    8e10:	62 17       	cp	r22, r18
    8e12:	73 07       	cpc	r23, r19
    8e14:	84 07       	cpc	r24, r20
    8e16:	ba 07       	cpc	r27, r26
    8e18:	20 f0       	brcs	.+8      	; 0x8e22 <__divsf3_pse+0xae>
    8e1a:	62 1b       	sub	r22, r18
    8e1c:	73 0b       	sbc	r23, r19
    8e1e:	84 0b       	sbc	r24, r20
    8e20:	ba 0b       	sbc	r27, r26
    8e22:	ee 1f       	adc	r30, r30
    8e24:	88 f7       	brcc	.-30     	; 0x8e08 <__divsf3_pse+0x94>
    8e26:	e0 95       	com	r30
    8e28:	08 95       	ret

00008e2a <__fixsfsi>:
    8e2a:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <__fixunssfsi>
    8e2e:	68 94       	set
    8e30:	b1 11       	cpse	r27, r1
    8e32:	0c 94 f7 47 	jmp	0x8fee	; 0x8fee <__fp_szero>
    8e36:	08 95       	ret

00008e38 <__fixunssfsi>:
    8e38:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <__fp_splitA>
    8e3c:	88 f0       	brcs	.+34     	; 0x8e60 <__fixunssfsi+0x28>
    8e3e:	9f 57       	subi	r25, 0x7F	; 127
    8e40:	98 f0       	brcs	.+38     	; 0x8e68 <__fixunssfsi+0x30>
    8e42:	b9 2f       	mov	r27, r25
    8e44:	99 27       	eor	r25, r25
    8e46:	b7 51       	subi	r27, 0x17	; 23
    8e48:	b0 f0       	brcs	.+44     	; 0x8e76 <__fixunssfsi+0x3e>
    8e4a:	e1 f0       	breq	.+56     	; 0x8e84 <__fixunssfsi+0x4c>
    8e4c:	66 0f       	add	r22, r22
    8e4e:	77 1f       	adc	r23, r23
    8e50:	88 1f       	adc	r24, r24
    8e52:	99 1f       	adc	r25, r25
    8e54:	1a f0       	brmi	.+6      	; 0x8e5c <__fixunssfsi+0x24>
    8e56:	ba 95       	dec	r27
    8e58:	c9 f7       	brne	.-14     	; 0x8e4c <__fixunssfsi+0x14>
    8e5a:	14 c0       	rjmp	.+40     	; 0x8e84 <__fixunssfsi+0x4c>
    8e5c:	b1 30       	cpi	r27, 0x01	; 1
    8e5e:	91 f0       	breq	.+36     	; 0x8e84 <__fixunssfsi+0x4c>
    8e60:	0e 94 f6 47 	call	0x8fec	; 0x8fec <__fp_zero>
    8e64:	b1 e0       	ldi	r27, 0x01	; 1
    8e66:	08 95       	ret
    8e68:	0c 94 f6 47 	jmp	0x8fec	; 0x8fec <__fp_zero>
    8e6c:	67 2f       	mov	r22, r23
    8e6e:	78 2f       	mov	r23, r24
    8e70:	88 27       	eor	r24, r24
    8e72:	b8 5f       	subi	r27, 0xF8	; 248
    8e74:	39 f0       	breq	.+14     	; 0x8e84 <__fixunssfsi+0x4c>
    8e76:	b9 3f       	cpi	r27, 0xF9	; 249
    8e78:	cc f3       	brlt	.-14     	; 0x8e6c <__fixunssfsi+0x34>
    8e7a:	86 95       	lsr	r24
    8e7c:	77 95       	ror	r23
    8e7e:	67 95       	ror	r22
    8e80:	b3 95       	inc	r27
    8e82:	d9 f7       	brne	.-10     	; 0x8e7a <__fixunssfsi+0x42>
    8e84:	3e f4       	brtc	.+14     	; 0x8e94 <__fixunssfsi+0x5c>
    8e86:	90 95       	com	r25
    8e88:	80 95       	com	r24
    8e8a:	70 95       	com	r23
    8e8c:	61 95       	neg	r22
    8e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    8e90:	8f 4f       	sbci	r24, 0xFF	; 255
    8e92:	9f 4f       	sbci	r25, 0xFF	; 255
    8e94:	08 95       	ret

00008e96 <__floatunsisf>:
    8e96:	e8 94       	clt
    8e98:	09 c0       	rjmp	.+18     	; 0x8eac <__floatsisf+0x12>

00008e9a <__floatsisf>:
    8e9a:	97 fb       	bst	r25, 7
    8e9c:	3e f4       	brtc	.+14     	; 0x8eac <__floatsisf+0x12>
    8e9e:	90 95       	com	r25
    8ea0:	80 95       	com	r24
    8ea2:	70 95       	com	r23
    8ea4:	61 95       	neg	r22
    8ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    8ea8:	8f 4f       	sbci	r24, 0xFF	; 255
    8eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    8eac:	99 23       	and	r25, r25
    8eae:	a9 f0       	breq	.+42     	; 0x8eda <__floatsisf+0x40>
    8eb0:	f9 2f       	mov	r31, r25
    8eb2:	96 e9       	ldi	r25, 0x96	; 150
    8eb4:	bb 27       	eor	r27, r27
    8eb6:	93 95       	inc	r25
    8eb8:	f6 95       	lsr	r31
    8eba:	87 95       	ror	r24
    8ebc:	77 95       	ror	r23
    8ebe:	67 95       	ror	r22
    8ec0:	b7 95       	ror	r27
    8ec2:	f1 11       	cpse	r31, r1
    8ec4:	f8 cf       	rjmp	.-16     	; 0x8eb6 <__floatsisf+0x1c>
    8ec6:	fa f4       	brpl	.+62     	; 0x8f06 <__floatsisf+0x6c>
    8ec8:	bb 0f       	add	r27, r27
    8eca:	11 f4       	brne	.+4      	; 0x8ed0 <__floatsisf+0x36>
    8ecc:	60 ff       	sbrs	r22, 0
    8ece:	1b c0       	rjmp	.+54     	; 0x8f06 <__floatsisf+0x6c>
    8ed0:	6f 5f       	subi	r22, 0xFF	; 255
    8ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    8ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    8ed8:	16 c0       	rjmp	.+44     	; 0x8f06 <__floatsisf+0x6c>
    8eda:	88 23       	and	r24, r24
    8edc:	11 f0       	breq	.+4      	; 0x8ee2 <__floatsisf+0x48>
    8ede:	96 e9       	ldi	r25, 0x96	; 150
    8ee0:	11 c0       	rjmp	.+34     	; 0x8f04 <__floatsisf+0x6a>
    8ee2:	77 23       	and	r23, r23
    8ee4:	21 f0       	breq	.+8      	; 0x8eee <__floatsisf+0x54>
    8ee6:	9e e8       	ldi	r25, 0x8E	; 142
    8ee8:	87 2f       	mov	r24, r23
    8eea:	76 2f       	mov	r23, r22
    8eec:	05 c0       	rjmp	.+10     	; 0x8ef8 <__floatsisf+0x5e>
    8eee:	66 23       	and	r22, r22
    8ef0:	71 f0       	breq	.+28     	; 0x8f0e <__floatsisf+0x74>
    8ef2:	96 e8       	ldi	r25, 0x86	; 134
    8ef4:	86 2f       	mov	r24, r22
    8ef6:	70 e0       	ldi	r23, 0x00	; 0
    8ef8:	60 e0       	ldi	r22, 0x00	; 0
    8efa:	2a f0       	brmi	.+10     	; 0x8f06 <__floatsisf+0x6c>
    8efc:	9a 95       	dec	r25
    8efe:	66 0f       	add	r22, r22
    8f00:	77 1f       	adc	r23, r23
    8f02:	88 1f       	adc	r24, r24
    8f04:	da f7       	brpl	.-10     	; 0x8efc <__floatsisf+0x62>
    8f06:	88 0f       	add	r24, r24
    8f08:	96 95       	lsr	r25
    8f0a:	87 95       	ror	r24
    8f0c:	97 f9       	bld	r25, 7
    8f0e:	08 95       	ret

00008f10 <__fp_cmp>:
    8f10:	99 0f       	add	r25, r25
    8f12:	00 08       	sbc	r0, r0
    8f14:	55 0f       	add	r21, r21
    8f16:	aa 0b       	sbc	r26, r26
    8f18:	e0 e8       	ldi	r30, 0x80	; 128
    8f1a:	fe ef       	ldi	r31, 0xFE	; 254
    8f1c:	16 16       	cp	r1, r22
    8f1e:	17 06       	cpc	r1, r23
    8f20:	e8 07       	cpc	r30, r24
    8f22:	f9 07       	cpc	r31, r25
    8f24:	c0 f0       	brcs	.+48     	; 0x8f56 <__fp_cmp+0x46>
    8f26:	12 16       	cp	r1, r18
    8f28:	13 06       	cpc	r1, r19
    8f2a:	e4 07       	cpc	r30, r20
    8f2c:	f5 07       	cpc	r31, r21
    8f2e:	98 f0       	brcs	.+38     	; 0x8f56 <__fp_cmp+0x46>
    8f30:	62 1b       	sub	r22, r18
    8f32:	73 0b       	sbc	r23, r19
    8f34:	84 0b       	sbc	r24, r20
    8f36:	95 0b       	sbc	r25, r21
    8f38:	39 f4       	brne	.+14     	; 0x8f48 <__fp_cmp+0x38>
    8f3a:	0a 26       	eor	r0, r26
    8f3c:	61 f0       	breq	.+24     	; 0x8f56 <__fp_cmp+0x46>
    8f3e:	23 2b       	or	r18, r19
    8f40:	24 2b       	or	r18, r20
    8f42:	25 2b       	or	r18, r21
    8f44:	21 f4       	brne	.+8      	; 0x8f4e <__fp_cmp+0x3e>
    8f46:	08 95       	ret
    8f48:	0a 26       	eor	r0, r26
    8f4a:	09 f4       	brne	.+2      	; 0x8f4e <__fp_cmp+0x3e>
    8f4c:	a1 40       	sbci	r26, 0x01	; 1
    8f4e:	a6 95       	lsr	r26
    8f50:	8f ef       	ldi	r24, 0xFF	; 255
    8f52:	81 1d       	adc	r24, r1
    8f54:	81 1d       	adc	r24, r1
    8f56:	08 95       	ret

00008f58 <__fp_inf>:
    8f58:	97 f9       	bld	r25, 7
    8f5a:	9f 67       	ori	r25, 0x7F	; 127
    8f5c:	80 e8       	ldi	r24, 0x80	; 128
    8f5e:	70 e0       	ldi	r23, 0x00	; 0
    8f60:	60 e0       	ldi	r22, 0x00	; 0
    8f62:	08 95       	ret

00008f64 <__fp_nan>:
    8f64:	9f ef       	ldi	r25, 0xFF	; 255
    8f66:	80 ec       	ldi	r24, 0xC0	; 192
    8f68:	08 95       	ret

00008f6a <__fp_pscA>:
    8f6a:	00 24       	eor	r0, r0
    8f6c:	0a 94       	dec	r0
    8f6e:	16 16       	cp	r1, r22
    8f70:	17 06       	cpc	r1, r23
    8f72:	18 06       	cpc	r1, r24
    8f74:	09 06       	cpc	r0, r25
    8f76:	08 95       	ret

00008f78 <__fp_pscB>:
    8f78:	00 24       	eor	r0, r0
    8f7a:	0a 94       	dec	r0
    8f7c:	12 16       	cp	r1, r18
    8f7e:	13 06       	cpc	r1, r19
    8f80:	14 06       	cpc	r1, r20
    8f82:	05 06       	cpc	r0, r21
    8f84:	08 95       	ret

00008f86 <__fp_round>:
    8f86:	09 2e       	mov	r0, r25
    8f88:	03 94       	inc	r0
    8f8a:	00 0c       	add	r0, r0
    8f8c:	11 f4       	brne	.+4      	; 0x8f92 <__fp_round+0xc>
    8f8e:	88 23       	and	r24, r24
    8f90:	52 f0       	brmi	.+20     	; 0x8fa6 <__fp_round+0x20>
    8f92:	bb 0f       	add	r27, r27
    8f94:	40 f4       	brcc	.+16     	; 0x8fa6 <__fp_round+0x20>
    8f96:	bf 2b       	or	r27, r31
    8f98:	11 f4       	brne	.+4      	; 0x8f9e <__fp_round+0x18>
    8f9a:	60 ff       	sbrs	r22, 0
    8f9c:	04 c0       	rjmp	.+8      	; 0x8fa6 <__fp_round+0x20>
    8f9e:	6f 5f       	subi	r22, 0xFF	; 255
    8fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    8fa2:	8f 4f       	sbci	r24, 0xFF	; 255
    8fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    8fa6:	08 95       	ret

00008fa8 <__fp_split3>:
    8fa8:	57 fd       	sbrc	r21, 7
    8faa:	90 58       	subi	r25, 0x80	; 128
    8fac:	44 0f       	add	r20, r20
    8fae:	55 1f       	adc	r21, r21
    8fb0:	59 f0       	breq	.+22     	; 0x8fc8 <__fp_splitA+0x10>
    8fb2:	5f 3f       	cpi	r21, 0xFF	; 255
    8fb4:	71 f0       	breq	.+28     	; 0x8fd2 <__fp_splitA+0x1a>
    8fb6:	47 95       	ror	r20

00008fb8 <__fp_splitA>:
    8fb8:	88 0f       	add	r24, r24
    8fba:	97 fb       	bst	r25, 7
    8fbc:	99 1f       	adc	r25, r25
    8fbe:	61 f0       	breq	.+24     	; 0x8fd8 <__fp_splitA+0x20>
    8fc0:	9f 3f       	cpi	r25, 0xFF	; 255
    8fc2:	79 f0       	breq	.+30     	; 0x8fe2 <__fp_splitA+0x2a>
    8fc4:	87 95       	ror	r24
    8fc6:	08 95       	ret
    8fc8:	12 16       	cp	r1, r18
    8fca:	13 06       	cpc	r1, r19
    8fcc:	14 06       	cpc	r1, r20
    8fce:	55 1f       	adc	r21, r21
    8fd0:	f2 cf       	rjmp	.-28     	; 0x8fb6 <__fp_split3+0xe>
    8fd2:	46 95       	lsr	r20
    8fd4:	f1 df       	rcall	.-30     	; 0x8fb8 <__fp_splitA>
    8fd6:	08 c0       	rjmp	.+16     	; 0x8fe8 <__fp_splitA+0x30>
    8fd8:	16 16       	cp	r1, r22
    8fda:	17 06       	cpc	r1, r23
    8fdc:	18 06       	cpc	r1, r24
    8fde:	99 1f       	adc	r25, r25
    8fe0:	f1 cf       	rjmp	.-30     	; 0x8fc4 <__fp_splitA+0xc>
    8fe2:	86 95       	lsr	r24
    8fe4:	71 05       	cpc	r23, r1
    8fe6:	61 05       	cpc	r22, r1
    8fe8:	08 94       	sec
    8fea:	08 95       	ret

00008fec <__fp_zero>:
    8fec:	e8 94       	clt

00008fee <__fp_szero>:
    8fee:	bb 27       	eor	r27, r27
    8ff0:	66 27       	eor	r22, r22
    8ff2:	77 27       	eor	r23, r23
    8ff4:	cb 01       	movw	r24, r22
    8ff6:	97 f9       	bld	r25, 7
    8ff8:	08 95       	ret

00008ffa <__gesf2>:
    8ffa:	0e 94 88 47 	call	0x8f10	; 0x8f10 <__fp_cmp>
    8ffe:	08 f4       	brcc	.+2      	; 0x9002 <__gesf2+0x8>
    9000:	8f ef       	ldi	r24, 0xFF	; 255
    9002:	08 95       	ret

00009004 <__mulsf3>:
    9004:	0e 94 15 48 	call	0x902a	; 0x902a <__mulsf3x>
    9008:	0c 94 c3 47 	jmp	0x8f86	; 0x8f86 <__fp_round>
    900c:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <__fp_pscA>
    9010:	38 f0       	brcs	.+14     	; 0x9020 <__mulsf3+0x1c>
    9012:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <__fp_pscB>
    9016:	20 f0       	brcs	.+8      	; 0x9020 <__mulsf3+0x1c>
    9018:	95 23       	and	r25, r21
    901a:	11 f0       	breq	.+4      	; 0x9020 <__mulsf3+0x1c>
    901c:	0c 94 ac 47 	jmp	0x8f58	; 0x8f58 <__fp_inf>
    9020:	0c 94 b2 47 	jmp	0x8f64	; 0x8f64 <__fp_nan>
    9024:	11 24       	eor	r1, r1
    9026:	0c 94 f7 47 	jmp	0x8fee	; 0x8fee <__fp_szero>

0000902a <__mulsf3x>:
    902a:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <__fp_split3>
    902e:	70 f3       	brcs	.-36     	; 0x900c <__mulsf3+0x8>

00009030 <__mulsf3_pse>:
    9030:	95 9f       	mul	r25, r21
    9032:	c1 f3       	breq	.-16     	; 0x9024 <__mulsf3+0x20>
    9034:	95 0f       	add	r25, r21
    9036:	50 e0       	ldi	r21, 0x00	; 0
    9038:	55 1f       	adc	r21, r21
    903a:	62 9f       	mul	r22, r18
    903c:	f0 01       	movw	r30, r0
    903e:	72 9f       	mul	r23, r18
    9040:	bb 27       	eor	r27, r27
    9042:	f0 0d       	add	r31, r0
    9044:	b1 1d       	adc	r27, r1
    9046:	63 9f       	mul	r22, r19
    9048:	aa 27       	eor	r26, r26
    904a:	f0 0d       	add	r31, r0
    904c:	b1 1d       	adc	r27, r1
    904e:	aa 1f       	adc	r26, r26
    9050:	64 9f       	mul	r22, r20
    9052:	66 27       	eor	r22, r22
    9054:	b0 0d       	add	r27, r0
    9056:	a1 1d       	adc	r26, r1
    9058:	66 1f       	adc	r22, r22
    905a:	82 9f       	mul	r24, r18
    905c:	22 27       	eor	r18, r18
    905e:	b0 0d       	add	r27, r0
    9060:	a1 1d       	adc	r26, r1
    9062:	62 1f       	adc	r22, r18
    9064:	73 9f       	mul	r23, r19
    9066:	b0 0d       	add	r27, r0
    9068:	a1 1d       	adc	r26, r1
    906a:	62 1f       	adc	r22, r18
    906c:	83 9f       	mul	r24, r19
    906e:	a0 0d       	add	r26, r0
    9070:	61 1d       	adc	r22, r1
    9072:	22 1f       	adc	r18, r18
    9074:	74 9f       	mul	r23, r20
    9076:	33 27       	eor	r19, r19
    9078:	a0 0d       	add	r26, r0
    907a:	61 1d       	adc	r22, r1
    907c:	23 1f       	adc	r18, r19
    907e:	84 9f       	mul	r24, r20
    9080:	60 0d       	add	r22, r0
    9082:	21 1d       	adc	r18, r1
    9084:	82 2f       	mov	r24, r18
    9086:	76 2f       	mov	r23, r22
    9088:	6a 2f       	mov	r22, r26
    908a:	11 24       	eor	r1, r1
    908c:	9f 57       	subi	r25, 0x7F	; 127
    908e:	50 40       	sbci	r21, 0x00	; 0
    9090:	9a f0       	brmi	.+38     	; 0x90b8 <__mulsf3_pse+0x88>
    9092:	f1 f0       	breq	.+60     	; 0x90d0 <__mulsf3_pse+0xa0>
    9094:	88 23       	and	r24, r24
    9096:	4a f0       	brmi	.+18     	; 0x90aa <__mulsf3_pse+0x7a>
    9098:	ee 0f       	add	r30, r30
    909a:	ff 1f       	adc	r31, r31
    909c:	bb 1f       	adc	r27, r27
    909e:	66 1f       	adc	r22, r22
    90a0:	77 1f       	adc	r23, r23
    90a2:	88 1f       	adc	r24, r24
    90a4:	91 50       	subi	r25, 0x01	; 1
    90a6:	50 40       	sbci	r21, 0x00	; 0
    90a8:	a9 f7       	brne	.-22     	; 0x9094 <__mulsf3_pse+0x64>
    90aa:	9e 3f       	cpi	r25, 0xFE	; 254
    90ac:	51 05       	cpc	r21, r1
    90ae:	80 f0       	brcs	.+32     	; 0x90d0 <__mulsf3_pse+0xa0>
    90b0:	0c 94 ac 47 	jmp	0x8f58	; 0x8f58 <__fp_inf>
    90b4:	0c 94 f7 47 	jmp	0x8fee	; 0x8fee <__fp_szero>
    90b8:	5f 3f       	cpi	r21, 0xFF	; 255
    90ba:	e4 f3       	brlt	.-8      	; 0x90b4 <__mulsf3_pse+0x84>
    90bc:	98 3e       	cpi	r25, 0xE8	; 232
    90be:	d4 f3       	brlt	.-12     	; 0x90b4 <__mulsf3_pse+0x84>
    90c0:	86 95       	lsr	r24
    90c2:	77 95       	ror	r23
    90c4:	67 95       	ror	r22
    90c6:	b7 95       	ror	r27
    90c8:	f7 95       	ror	r31
    90ca:	e7 95       	ror	r30
    90cc:	9f 5f       	subi	r25, 0xFF	; 255
    90ce:	c1 f7       	brne	.-16     	; 0x90c0 <__mulsf3_pse+0x90>
    90d0:	fe 2b       	or	r31, r30
    90d2:	88 0f       	add	r24, r24
    90d4:	91 1d       	adc	r25, r1
    90d6:	96 95       	lsr	r25
    90d8:	87 95       	ror	r24
    90da:	97 f9       	bld	r25, 7
    90dc:	08 95       	ret

000090de <__mulsi3>:
    90de:	db 01       	movw	r26, r22
    90e0:	8f 93       	push	r24
    90e2:	9f 93       	push	r25
    90e4:	0e 94 07 49 	call	0x920e	; 0x920e <__muluhisi3>
    90e8:	bf 91       	pop	r27
    90ea:	af 91       	pop	r26
    90ec:	a2 9f       	mul	r26, r18
    90ee:	80 0d       	add	r24, r0
    90f0:	91 1d       	adc	r25, r1
    90f2:	a3 9f       	mul	r26, r19
    90f4:	90 0d       	add	r25, r0
    90f6:	b2 9f       	mul	r27, r18
    90f8:	90 0d       	add	r25, r0
    90fa:	11 24       	eor	r1, r1
    90fc:	08 95       	ret

000090fe <__udivmodhi4>:
    90fe:	aa 1b       	sub	r26, r26
    9100:	bb 1b       	sub	r27, r27
    9102:	51 e1       	ldi	r21, 0x11	; 17
    9104:	07 c0       	rjmp	.+14     	; 0x9114 <__udivmodhi4_ep>

00009106 <__udivmodhi4_loop>:
    9106:	aa 1f       	adc	r26, r26
    9108:	bb 1f       	adc	r27, r27
    910a:	a6 17       	cp	r26, r22
    910c:	b7 07       	cpc	r27, r23
    910e:	10 f0       	brcs	.+4      	; 0x9114 <__udivmodhi4_ep>
    9110:	a6 1b       	sub	r26, r22
    9112:	b7 0b       	sbc	r27, r23

00009114 <__udivmodhi4_ep>:
    9114:	88 1f       	adc	r24, r24
    9116:	99 1f       	adc	r25, r25
    9118:	5a 95       	dec	r21
    911a:	a9 f7       	brne	.-22     	; 0x9106 <__udivmodhi4_loop>
    911c:	80 95       	com	r24
    911e:	90 95       	com	r25
    9120:	bc 01       	movw	r22, r24
    9122:	cd 01       	movw	r24, r26
    9124:	08 95       	ret

00009126 <__divmodhi4>:
    9126:	97 fb       	bst	r25, 7
    9128:	07 2e       	mov	r0, r23
    912a:	16 f4       	brtc	.+4      	; 0x9130 <__divmodhi4+0xa>
    912c:	00 94       	com	r0
    912e:	07 d0       	rcall	.+14     	; 0x913e <__divmodhi4_neg1>
    9130:	77 fd       	sbrc	r23, 7
    9132:	09 d0       	rcall	.+18     	; 0x9146 <__divmodhi4_neg2>
    9134:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__udivmodhi4>
    9138:	07 fc       	sbrc	r0, 7
    913a:	05 d0       	rcall	.+10     	; 0x9146 <__divmodhi4_neg2>
    913c:	3e f4       	brtc	.+14     	; 0x914c <__divmodhi4_exit>

0000913e <__divmodhi4_neg1>:
    913e:	90 95       	com	r25
    9140:	81 95       	neg	r24
    9142:	9f 4f       	sbci	r25, 0xFF	; 255
    9144:	08 95       	ret

00009146 <__divmodhi4_neg2>:
    9146:	70 95       	com	r23
    9148:	61 95       	neg	r22
    914a:	7f 4f       	sbci	r23, 0xFF	; 255

0000914c <__divmodhi4_exit>:
    914c:	08 95       	ret

0000914e <__udivmodsi4>:
    914e:	a1 e2       	ldi	r26, 0x21	; 33
    9150:	1a 2e       	mov	r1, r26
    9152:	aa 1b       	sub	r26, r26
    9154:	bb 1b       	sub	r27, r27
    9156:	fd 01       	movw	r30, r26
    9158:	0d c0       	rjmp	.+26     	; 0x9174 <__udivmodsi4_ep>

0000915a <__udivmodsi4_loop>:
    915a:	aa 1f       	adc	r26, r26
    915c:	bb 1f       	adc	r27, r27
    915e:	ee 1f       	adc	r30, r30
    9160:	ff 1f       	adc	r31, r31
    9162:	a2 17       	cp	r26, r18
    9164:	b3 07       	cpc	r27, r19
    9166:	e4 07       	cpc	r30, r20
    9168:	f5 07       	cpc	r31, r21
    916a:	20 f0       	brcs	.+8      	; 0x9174 <__udivmodsi4_ep>
    916c:	a2 1b       	sub	r26, r18
    916e:	b3 0b       	sbc	r27, r19
    9170:	e4 0b       	sbc	r30, r20
    9172:	f5 0b       	sbc	r31, r21

00009174 <__udivmodsi4_ep>:
    9174:	66 1f       	adc	r22, r22
    9176:	77 1f       	adc	r23, r23
    9178:	88 1f       	adc	r24, r24
    917a:	99 1f       	adc	r25, r25
    917c:	1a 94       	dec	r1
    917e:	69 f7       	brne	.-38     	; 0x915a <__udivmodsi4_loop>
    9180:	60 95       	com	r22
    9182:	70 95       	com	r23
    9184:	80 95       	com	r24
    9186:	90 95       	com	r25
    9188:	9b 01       	movw	r18, r22
    918a:	ac 01       	movw	r20, r24
    918c:	bd 01       	movw	r22, r26
    918e:	cf 01       	movw	r24, r30
    9190:	08 95       	ret

00009192 <__divmodsi4>:
    9192:	05 2e       	mov	r0, r21
    9194:	97 fb       	bst	r25, 7
    9196:	1e f4       	brtc	.+6      	; 0x919e <__divmodsi4+0xc>
    9198:	00 94       	com	r0
    919a:	0e 94 e0 48 	call	0x91c0	; 0x91c0 <__negsi2>
    919e:	57 fd       	sbrc	r21, 7
    91a0:	07 d0       	rcall	.+14     	; 0x91b0 <__divmodsi4_neg2>
    91a2:	0e 94 a7 48 	call	0x914e	; 0x914e <__udivmodsi4>
    91a6:	07 fc       	sbrc	r0, 7
    91a8:	03 d0       	rcall	.+6      	; 0x91b0 <__divmodsi4_neg2>
    91aa:	4e f4       	brtc	.+18     	; 0x91be <__divmodsi4_exit>
    91ac:	0c 94 e0 48 	jmp	0x91c0	; 0x91c0 <__negsi2>

000091b0 <__divmodsi4_neg2>:
    91b0:	50 95       	com	r21
    91b2:	40 95       	com	r20
    91b4:	30 95       	com	r19
    91b6:	21 95       	neg	r18
    91b8:	3f 4f       	sbci	r19, 0xFF	; 255
    91ba:	4f 4f       	sbci	r20, 0xFF	; 255
    91bc:	5f 4f       	sbci	r21, 0xFF	; 255

000091be <__divmodsi4_exit>:
    91be:	08 95       	ret

000091c0 <__negsi2>:
    91c0:	90 95       	com	r25
    91c2:	80 95       	com	r24
    91c4:	70 95       	com	r23
    91c6:	61 95       	neg	r22
    91c8:	7f 4f       	sbci	r23, 0xFF	; 255
    91ca:	8f 4f       	sbci	r24, 0xFF	; 255
    91cc:	9f 4f       	sbci	r25, 0xFF	; 255
    91ce:	08 95       	ret

000091d0 <__tablejump2__>:
    91d0:	ee 0f       	add	r30, r30
    91d2:	ff 1f       	adc	r31, r31
    91d4:	00 24       	eor	r0, r0
    91d6:	00 1c       	adc	r0, r0
    91d8:	0b be       	out	0x3b, r0	; 59
    91da:	07 90       	elpm	r0, Z+
    91dc:	f6 91       	elpm	r31, Z
    91de:	e0 2d       	mov	r30, r0
    91e0:	09 94       	ijmp

000091e2 <__umulhisi3>:
    91e2:	a2 9f       	mul	r26, r18
    91e4:	b0 01       	movw	r22, r0
    91e6:	b3 9f       	mul	r27, r19
    91e8:	c0 01       	movw	r24, r0
    91ea:	a3 9f       	mul	r26, r19
    91ec:	70 0d       	add	r23, r0
    91ee:	81 1d       	adc	r24, r1
    91f0:	11 24       	eor	r1, r1
    91f2:	91 1d       	adc	r25, r1
    91f4:	b2 9f       	mul	r27, r18
    91f6:	70 0d       	add	r23, r0
    91f8:	81 1d       	adc	r24, r1
    91fa:	11 24       	eor	r1, r1
    91fc:	91 1d       	adc	r25, r1
    91fe:	08 95       	ret

00009200 <__usmulhisi3>:
    9200:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <__umulhisi3>

00009204 <__usmulhisi3_tail>:
    9204:	b7 ff       	sbrs	r27, 7
    9206:	08 95       	ret
    9208:	82 1b       	sub	r24, r18
    920a:	93 0b       	sbc	r25, r19
    920c:	08 95       	ret

0000920e <__muluhisi3>:
    920e:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <__umulhisi3>
    9212:	a5 9f       	mul	r26, r21
    9214:	90 0d       	add	r25, r0
    9216:	b4 9f       	mul	r27, r20
    9218:	90 0d       	add	r25, r0
    921a:	a4 9f       	mul	r26, r20
    921c:	80 0d       	add	r24, r0
    921e:	91 1d       	adc	r25, r1
    9220:	11 24       	eor	r1, r1
    9222:	08 95       	ret

00009224 <__mulshisi3>:
    9224:	b7 ff       	sbrs	r27, 7
    9226:	0c 94 07 49 	jmp	0x920e	; 0x920e <__muluhisi3>

0000922a <__mulohisi3>:
    922a:	0e 94 07 49 	call	0x920e	; 0x920e <__muluhisi3>
    922e:	82 1b       	sub	r24, r18
    9230:	93 0b       	sbc	r25, r19
    9232:	08 95       	ret

00009234 <malloc>:
    9234:	0f 93       	push	r16
    9236:	1f 93       	push	r17
    9238:	cf 93       	push	r28
    923a:	df 93       	push	r29
    923c:	82 30       	cpi	r24, 0x02	; 2
    923e:	91 05       	cpc	r25, r1
    9240:	10 f4       	brcc	.+4      	; 0x9246 <malloc+0x12>
    9242:	82 e0       	ldi	r24, 0x02	; 2
    9244:	90 e0       	ldi	r25, 0x00	; 0
    9246:	e0 91 2b 49 	lds	r30, 0x492B	; 0x80492b <__flp>
    924a:	f0 91 2c 49 	lds	r31, 0x492C	; 0x80492c <__flp+0x1>
    924e:	20 e0       	ldi	r18, 0x00	; 0
    9250:	30 e0       	ldi	r19, 0x00	; 0
    9252:	a0 e0       	ldi	r26, 0x00	; 0
    9254:	b0 e0       	ldi	r27, 0x00	; 0
    9256:	30 97       	sbiw	r30, 0x00	; 0
    9258:	19 f1       	breq	.+70     	; 0x92a0 <malloc+0x6c>
    925a:	40 81       	ld	r20, Z
    925c:	51 81       	ldd	r21, Z+1	; 0x01
    925e:	02 81       	ldd	r16, Z+2	; 0x02
    9260:	13 81       	ldd	r17, Z+3	; 0x03
    9262:	48 17       	cp	r20, r24
    9264:	59 07       	cpc	r21, r25
    9266:	c8 f0       	brcs	.+50     	; 0x929a <malloc+0x66>
    9268:	84 17       	cp	r24, r20
    926a:	95 07       	cpc	r25, r21
    926c:	69 f4       	brne	.+26     	; 0x9288 <malloc+0x54>
    926e:	10 97       	sbiw	r26, 0x00	; 0
    9270:	31 f0       	breq	.+12     	; 0x927e <malloc+0x4a>
    9272:	12 96       	adiw	r26, 0x02	; 2
    9274:	0c 93       	st	X, r16
    9276:	12 97       	sbiw	r26, 0x02	; 2
    9278:	13 96       	adiw	r26, 0x03	; 3
    927a:	1c 93       	st	X, r17
    927c:	27 c0       	rjmp	.+78     	; 0x92cc <malloc+0x98>
    927e:	00 93 2b 49 	sts	0x492B, r16	; 0x80492b <__flp>
    9282:	10 93 2c 49 	sts	0x492C, r17	; 0x80492c <__flp+0x1>
    9286:	22 c0       	rjmp	.+68     	; 0x92cc <malloc+0x98>
    9288:	21 15       	cp	r18, r1
    928a:	31 05       	cpc	r19, r1
    928c:	19 f0       	breq	.+6      	; 0x9294 <malloc+0x60>
    928e:	42 17       	cp	r20, r18
    9290:	53 07       	cpc	r21, r19
    9292:	18 f4       	brcc	.+6      	; 0x929a <malloc+0x66>
    9294:	9a 01       	movw	r18, r20
    9296:	bd 01       	movw	r22, r26
    9298:	ef 01       	movw	r28, r30
    929a:	df 01       	movw	r26, r30
    929c:	f8 01       	movw	r30, r16
    929e:	db cf       	rjmp	.-74     	; 0x9256 <malloc+0x22>
    92a0:	21 15       	cp	r18, r1
    92a2:	31 05       	cpc	r19, r1
    92a4:	f9 f0       	breq	.+62     	; 0x92e4 <malloc+0xb0>
    92a6:	28 1b       	sub	r18, r24
    92a8:	39 0b       	sbc	r19, r25
    92aa:	24 30       	cpi	r18, 0x04	; 4
    92ac:	31 05       	cpc	r19, r1
    92ae:	80 f4       	brcc	.+32     	; 0x92d0 <malloc+0x9c>
    92b0:	8a 81       	ldd	r24, Y+2	; 0x02
    92b2:	9b 81       	ldd	r25, Y+3	; 0x03
    92b4:	61 15       	cp	r22, r1
    92b6:	71 05       	cpc	r23, r1
    92b8:	21 f0       	breq	.+8      	; 0x92c2 <malloc+0x8e>
    92ba:	fb 01       	movw	r30, r22
    92bc:	82 83       	std	Z+2, r24	; 0x02
    92be:	93 83       	std	Z+3, r25	; 0x03
    92c0:	04 c0       	rjmp	.+8      	; 0x92ca <malloc+0x96>
    92c2:	80 93 2b 49 	sts	0x492B, r24	; 0x80492b <__flp>
    92c6:	90 93 2c 49 	sts	0x492C, r25	; 0x80492c <__flp+0x1>
    92ca:	fe 01       	movw	r30, r28
    92cc:	32 96       	adiw	r30, 0x02	; 2
    92ce:	44 c0       	rjmp	.+136    	; 0x9358 <malloc+0x124>
    92d0:	fe 01       	movw	r30, r28
    92d2:	e2 0f       	add	r30, r18
    92d4:	f3 1f       	adc	r31, r19
    92d6:	81 93       	st	Z+, r24
    92d8:	91 93       	st	Z+, r25
    92da:	22 50       	subi	r18, 0x02	; 2
    92dc:	31 09       	sbc	r19, r1
    92de:	28 83       	st	Y, r18
    92e0:	39 83       	std	Y+1, r19	; 0x01
    92e2:	3a c0       	rjmp	.+116    	; 0x9358 <malloc+0x124>
    92e4:	20 91 29 49 	lds	r18, 0x4929	; 0x804929 <__brkval>
    92e8:	30 91 2a 49 	lds	r19, 0x492A	; 0x80492a <__brkval+0x1>
    92ec:	23 2b       	or	r18, r19
    92ee:	41 f4       	brne	.+16     	; 0x9300 <malloc+0xcc>
    92f0:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    92f4:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    92f8:	20 93 29 49 	sts	0x4929, r18	; 0x804929 <__brkval>
    92fc:	30 93 2a 49 	sts	0x492A, r19	; 0x80492a <__brkval+0x1>
    9300:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    9304:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    9308:	21 15       	cp	r18, r1
    930a:	31 05       	cpc	r19, r1
    930c:	41 f4       	brne	.+16     	; 0x931e <malloc+0xea>
    930e:	2d b7       	in	r18, 0x3d	; 61
    9310:	3e b7       	in	r19, 0x3e	; 62
    9312:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    9316:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    931a:	24 1b       	sub	r18, r20
    931c:	35 0b       	sbc	r19, r21
    931e:	e0 91 29 49 	lds	r30, 0x4929	; 0x804929 <__brkval>
    9322:	f0 91 2a 49 	lds	r31, 0x492A	; 0x80492a <__brkval+0x1>
    9326:	e2 17       	cp	r30, r18
    9328:	f3 07       	cpc	r31, r19
    932a:	a0 f4       	brcc	.+40     	; 0x9354 <malloc+0x120>
    932c:	2e 1b       	sub	r18, r30
    932e:	3f 0b       	sbc	r19, r31
    9330:	28 17       	cp	r18, r24
    9332:	39 07       	cpc	r19, r25
    9334:	78 f0       	brcs	.+30     	; 0x9354 <malloc+0x120>
    9336:	ac 01       	movw	r20, r24
    9338:	4e 5f       	subi	r20, 0xFE	; 254
    933a:	5f 4f       	sbci	r21, 0xFF	; 255
    933c:	24 17       	cp	r18, r20
    933e:	35 07       	cpc	r19, r21
    9340:	48 f0       	brcs	.+18     	; 0x9354 <malloc+0x120>
    9342:	4e 0f       	add	r20, r30
    9344:	5f 1f       	adc	r21, r31
    9346:	40 93 29 49 	sts	0x4929, r20	; 0x804929 <__brkval>
    934a:	50 93 2a 49 	sts	0x492A, r21	; 0x80492a <__brkval+0x1>
    934e:	81 93       	st	Z+, r24
    9350:	91 93       	st	Z+, r25
    9352:	02 c0       	rjmp	.+4      	; 0x9358 <malloc+0x124>
    9354:	e0 e0       	ldi	r30, 0x00	; 0
    9356:	f0 e0       	ldi	r31, 0x00	; 0
    9358:	cf 01       	movw	r24, r30
    935a:	df 91       	pop	r29
    935c:	cf 91       	pop	r28
    935e:	1f 91       	pop	r17
    9360:	0f 91       	pop	r16
    9362:	08 95       	ret

00009364 <free>:
    9364:	cf 93       	push	r28
    9366:	df 93       	push	r29
    9368:	00 97       	sbiw	r24, 0x00	; 0
    936a:	09 f4       	brne	.+2      	; 0x936e <free+0xa>
    936c:	81 c0       	rjmp	.+258    	; 0x9470 <free+0x10c>
    936e:	fc 01       	movw	r30, r24
    9370:	32 97       	sbiw	r30, 0x02	; 2
    9372:	12 82       	std	Z+2, r1	; 0x02
    9374:	13 82       	std	Z+3, r1	; 0x03
    9376:	a0 91 2b 49 	lds	r26, 0x492B	; 0x80492b <__flp>
    937a:	b0 91 2c 49 	lds	r27, 0x492C	; 0x80492c <__flp+0x1>
    937e:	10 97       	sbiw	r26, 0x00	; 0
    9380:	81 f4       	brne	.+32     	; 0x93a2 <free+0x3e>
    9382:	20 81       	ld	r18, Z
    9384:	31 81       	ldd	r19, Z+1	; 0x01
    9386:	82 0f       	add	r24, r18
    9388:	93 1f       	adc	r25, r19
    938a:	20 91 29 49 	lds	r18, 0x4929	; 0x804929 <__brkval>
    938e:	30 91 2a 49 	lds	r19, 0x492A	; 0x80492a <__brkval+0x1>
    9392:	28 17       	cp	r18, r24
    9394:	39 07       	cpc	r19, r25
    9396:	51 f5       	brne	.+84     	; 0x93ec <free+0x88>
    9398:	e0 93 29 49 	sts	0x4929, r30	; 0x804929 <__brkval>
    939c:	f0 93 2a 49 	sts	0x492A, r31	; 0x80492a <__brkval+0x1>
    93a0:	67 c0       	rjmp	.+206    	; 0x9470 <free+0x10c>
    93a2:	ed 01       	movw	r28, r26
    93a4:	20 e0       	ldi	r18, 0x00	; 0
    93a6:	30 e0       	ldi	r19, 0x00	; 0
    93a8:	ce 17       	cp	r28, r30
    93aa:	df 07       	cpc	r29, r31
    93ac:	40 f4       	brcc	.+16     	; 0x93be <free+0x5a>
    93ae:	4a 81       	ldd	r20, Y+2	; 0x02
    93b0:	5b 81       	ldd	r21, Y+3	; 0x03
    93b2:	9e 01       	movw	r18, r28
    93b4:	41 15       	cp	r20, r1
    93b6:	51 05       	cpc	r21, r1
    93b8:	f1 f0       	breq	.+60     	; 0x93f6 <free+0x92>
    93ba:	ea 01       	movw	r28, r20
    93bc:	f5 cf       	rjmp	.-22     	; 0x93a8 <free+0x44>
    93be:	c2 83       	std	Z+2, r28	; 0x02
    93c0:	d3 83       	std	Z+3, r29	; 0x03
    93c2:	40 81       	ld	r20, Z
    93c4:	51 81       	ldd	r21, Z+1	; 0x01
    93c6:	84 0f       	add	r24, r20
    93c8:	95 1f       	adc	r25, r21
    93ca:	c8 17       	cp	r28, r24
    93cc:	d9 07       	cpc	r29, r25
    93ce:	59 f4       	brne	.+22     	; 0x93e6 <free+0x82>
    93d0:	88 81       	ld	r24, Y
    93d2:	99 81       	ldd	r25, Y+1	; 0x01
    93d4:	84 0f       	add	r24, r20
    93d6:	95 1f       	adc	r25, r21
    93d8:	02 96       	adiw	r24, 0x02	; 2
    93da:	80 83       	st	Z, r24
    93dc:	91 83       	std	Z+1, r25	; 0x01
    93de:	8a 81       	ldd	r24, Y+2	; 0x02
    93e0:	9b 81       	ldd	r25, Y+3	; 0x03
    93e2:	82 83       	std	Z+2, r24	; 0x02
    93e4:	93 83       	std	Z+3, r25	; 0x03
    93e6:	21 15       	cp	r18, r1
    93e8:	31 05       	cpc	r19, r1
    93ea:	29 f4       	brne	.+10     	; 0x93f6 <free+0x92>
    93ec:	e0 93 2b 49 	sts	0x492B, r30	; 0x80492b <__flp>
    93f0:	f0 93 2c 49 	sts	0x492C, r31	; 0x80492c <__flp+0x1>
    93f4:	3d c0       	rjmp	.+122    	; 0x9470 <free+0x10c>
    93f6:	e9 01       	movw	r28, r18
    93f8:	ea 83       	std	Y+2, r30	; 0x02
    93fa:	fb 83       	std	Y+3, r31	; 0x03
    93fc:	49 91       	ld	r20, Y+
    93fe:	59 91       	ld	r21, Y+
    9400:	c4 0f       	add	r28, r20
    9402:	d5 1f       	adc	r29, r21
    9404:	ec 17       	cp	r30, r28
    9406:	fd 07       	cpc	r31, r29
    9408:	61 f4       	brne	.+24     	; 0x9422 <free+0xbe>
    940a:	80 81       	ld	r24, Z
    940c:	91 81       	ldd	r25, Z+1	; 0x01
    940e:	84 0f       	add	r24, r20
    9410:	95 1f       	adc	r25, r21
    9412:	02 96       	adiw	r24, 0x02	; 2
    9414:	e9 01       	movw	r28, r18
    9416:	88 83       	st	Y, r24
    9418:	99 83       	std	Y+1, r25	; 0x01
    941a:	82 81       	ldd	r24, Z+2	; 0x02
    941c:	93 81       	ldd	r25, Z+3	; 0x03
    941e:	8a 83       	std	Y+2, r24	; 0x02
    9420:	9b 83       	std	Y+3, r25	; 0x03
    9422:	e0 e0       	ldi	r30, 0x00	; 0
    9424:	f0 e0       	ldi	r31, 0x00	; 0
    9426:	12 96       	adiw	r26, 0x02	; 2
    9428:	8d 91       	ld	r24, X+
    942a:	9c 91       	ld	r25, X
    942c:	13 97       	sbiw	r26, 0x03	; 3
    942e:	00 97       	sbiw	r24, 0x00	; 0
    9430:	19 f0       	breq	.+6      	; 0x9438 <free+0xd4>
    9432:	fd 01       	movw	r30, r26
    9434:	dc 01       	movw	r26, r24
    9436:	f7 cf       	rjmp	.-18     	; 0x9426 <free+0xc2>
    9438:	8d 91       	ld	r24, X+
    943a:	9c 91       	ld	r25, X
    943c:	11 97       	sbiw	r26, 0x01	; 1
    943e:	9d 01       	movw	r18, r26
    9440:	2e 5f       	subi	r18, 0xFE	; 254
    9442:	3f 4f       	sbci	r19, 0xFF	; 255
    9444:	82 0f       	add	r24, r18
    9446:	93 1f       	adc	r25, r19
    9448:	20 91 29 49 	lds	r18, 0x4929	; 0x804929 <__brkval>
    944c:	30 91 2a 49 	lds	r19, 0x492A	; 0x80492a <__brkval+0x1>
    9450:	28 17       	cp	r18, r24
    9452:	39 07       	cpc	r19, r25
    9454:	69 f4       	brne	.+26     	; 0x9470 <free+0x10c>
    9456:	30 97       	sbiw	r30, 0x00	; 0
    9458:	29 f4       	brne	.+10     	; 0x9464 <free+0x100>
    945a:	10 92 2b 49 	sts	0x492B, r1	; 0x80492b <__flp>
    945e:	10 92 2c 49 	sts	0x492C, r1	; 0x80492c <__flp+0x1>
    9462:	02 c0       	rjmp	.+4      	; 0x9468 <free+0x104>
    9464:	12 82       	std	Z+2, r1	; 0x02
    9466:	13 82       	std	Z+3, r1	; 0x03
    9468:	a0 93 29 49 	sts	0x4929, r26	; 0x804929 <__brkval>
    946c:	b0 93 2a 49 	sts	0x492A, r27	; 0x80492a <__brkval+0x1>
    9470:	df 91       	pop	r29
    9472:	cf 91       	pop	r28
    9474:	08 95       	ret

00009476 <atoi>:
    9476:	fc 01       	movw	r30, r24
    9478:	88 27       	eor	r24, r24
    947a:	99 27       	eor	r25, r25
    947c:	e8 94       	clt
    947e:	21 91       	ld	r18, Z+
    9480:	20 32       	cpi	r18, 0x20	; 32
    9482:	e9 f3       	breq	.-6      	; 0x947e <atoi+0x8>
    9484:	29 30       	cpi	r18, 0x09	; 9
    9486:	10 f0       	brcs	.+4      	; 0x948c <atoi+0x16>
    9488:	2e 30       	cpi	r18, 0x0E	; 14
    948a:	c8 f3       	brcs	.-14     	; 0x947e <atoi+0x8>
    948c:	2b 32       	cpi	r18, 0x2B	; 43
    948e:	41 f0       	breq	.+16     	; 0x94a0 <atoi+0x2a>
    9490:	2d 32       	cpi	r18, 0x2D	; 45
    9492:	39 f4       	brne	.+14     	; 0x94a2 <atoi+0x2c>
    9494:	68 94       	set
    9496:	04 c0       	rjmp	.+8      	; 0x94a0 <atoi+0x2a>
    9498:	0e 94 c7 4a 	call	0x958e	; 0x958e <__mulhi_const_10>
    949c:	82 0f       	add	r24, r18
    949e:	91 1d       	adc	r25, r1
    94a0:	21 91       	ld	r18, Z+
    94a2:	20 53       	subi	r18, 0x30	; 48
    94a4:	2a 30       	cpi	r18, 0x0A	; 10
    94a6:	c0 f3       	brcs	.-16     	; 0x9498 <atoi+0x22>
    94a8:	1e f4       	brtc	.+6      	; 0x94b0 <atoi+0x3a>
    94aa:	90 95       	com	r25
    94ac:	81 95       	neg	r24
    94ae:	9f 4f       	sbci	r25, 0xFF	; 255
    94b0:	08 95       	ret

000094b2 <atol>:
    94b2:	1f 93       	push	r17
    94b4:	fc 01       	movw	r30, r24
    94b6:	99 27       	eor	r25, r25
    94b8:	88 27       	eor	r24, r24
    94ba:	bc 01       	movw	r22, r24
    94bc:	e8 94       	clt
    94be:	11 91       	ld	r17, Z+
    94c0:	10 32       	cpi	r17, 0x20	; 32
    94c2:	e9 f3       	breq	.-6      	; 0x94be <atol+0xc>
    94c4:	19 30       	cpi	r17, 0x09	; 9
    94c6:	10 f0       	brcs	.+4      	; 0x94cc <atol+0x1a>
    94c8:	1e 30       	cpi	r17, 0x0E	; 14
    94ca:	c8 f3       	brcs	.-14     	; 0x94be <atol+0xc>
    94cc:	1b 32       	cpi	r17, 0x2B	; 43
    94ce:	51 f0       	breq	.+20     	; 0x94e4 <atol+0x32>
    94d0:	1d 32       	cpi	r17, 0x2D	; 45
    94d2:	49 f4       	brne	.+18     	; 0x94e6 <atol+0x34>
    94d4:	68 94       	set
    94d6:	06 c0       	rjmp	.+12     	; 0x94e4 <atol+0x32>
    94d8:	0e 94 b2 4a 	call	0x9564	; 0x9564 <__mulsi_const_10>
    94dc:	61 0f       	add	r22, r17
    94de:	71 1d       	adc	r23, r1
    94e0:	81 1d       	adc	r24, r1
    94e2:	91 1d       	adc	r25, r1
    94e4:	11 91       	ld	r17, Z+
    94e6:	10 53       	subi	r17, 0x30	; 48
    94e8:	1a 30       	cpi	r17, 0x0A	; 10
    94ea:	b0 f3       	brcs	.-20     	; 0x94d8 <atol+0x26>
    94ec:	3e f4       	brtc	.+14     	; 0x94fc <atol+0x4a>
    94ee:	90 95       	com	r25
    94f0:	80 95       	com	r24
    94f2:	70 95       	com	r23
    94f4:	61 95       	neg	r22
    94f6:	7f 4f       	sbci	r23, 0xFF	; 255
    94f8:	8f 4f       	sbci	r24, 0xFF	; 255
    94fa:	9f 4f       	sbci	r25, 0xFF	; 255
    94fc:	1f 91       	pop	r17
    94fe:	08 95       	ret

00009500 <toupper>:
    9500:	91 11       	cpse	r25, r1
    9502:	08 95       	ret
    9504:	81 56       	subi	r24, 0x61	; 97
    9506:	8a 51       	subi	r24, 0x1A	; 26
    9508:	08 f4       	brcc	.+2      	; 0x950c <toupper+0xc>
    950a:	80 52       	subi	r24, 0x20	; 32
    950c:	85 58       	subi	r24, 0x85	; 133
    950e:	08 95       	ret

00009510 <strcat>:
    9510:	fb 01       	movw	r30, r22
    9512:	dc 01       	movw	r26, r24
    9514:	0d 90       	ld	r0, X+
    9516:	00 20       	and	r0, r0
    9518:	e9 f7       	brne	.-6      	; 0x9514 <strcat+0x4>
    951a:	11 97       	sbiw	r26, 0x01	; 1
    951c:	01 90       	ld	r0, Z+
    951e:	0d 92       	st	X+, r0
    9520:	00 20       	and	r0, r0
    9522:	e1 f7       	brne	.-8      	; 0x951c <strcat+0xc>
    9524:	08 95       	ret

00009526 <strcpy>:
    9526:	fb 01       	movw	r30, r22
    9528:	dc 01       	movw	r26, r24
    952a:	01 90       	ld	r0, Z+
    952c:	0d 92       	st	X+, r0
    952e:	00 20       	and	r0, r0
    9530:	e1 f7       	brne	.-8      	; 0x952a <strcpy+0x4>
    9532:	08 95       	ret

00009534 <strlen>:
    9534:	fc 01       	movw	r30, r24
    9536:	01 90       	ld	r0, Z+
    9538:	00 20       	and	r0, r0
    953a:	e9 f7       	brne	.-6      	; 0x9536 <strlen+0x2>
    953c:	80 95       	com	r24
    953e:	90 95       	com	r25
    9540:	8e 0f       	add	r24, r30
    9542:	9f 1f       	adc	r25, r31
    9544:	08 95       	ret

00009546 <strncpy>:
    9546:	fb 01       	movw	r30, r22
    9548:	dc 01       	movw	r26, r24
    954a:	41 50       	subi	r20, 0x01	; 1
    954c:	50 40       	sbci	r21, 0x00	; 0
    954e:	48 f0       	brcs	.+18     	; 0x9562 <strncpy+0x1c>
    9550:	01 90       	ld	r0, Z+
    9552:	0d 92       	st	X+, r0
    9554:	00 20       	and	r0, r0
    9556:	c9 f7       	brne	.-14     	; 0x954a <strncpy+0x4>
    9558:	01 c0       	rjmp	.+2      	; 0x955c <strncpy+0x16>
    955a:	1d 92       	st	X+, r1
    955c:	41 50       	subi	r20, 0x01	; 1
    955e:	50 40       	sbci	r21, 0x00	; 0
    9560:	e0 f7       	brcc	.-8      	; 0x955a <strncpy+0x14>
    9562:	08 95       	ret

00009564 <__mulsi_const_10>:
    9564:	59 2f       	mov	r21, r25
    9566:	48 2f       	mov	r20, r24
    9568:	37 2f       	mov	r19, r23
    956a:	26 2f       	mov	r18, r22
    956c:	66 0f       	add	r22, r22
    956e:	77 1f       	adc	r23, r23
    9570:	88 1f       	adc	r24, r24
    9572:	99 1f       	adc	r25, r25
    9574:	66 0f       	add	r22, r22
    9576:	77 1f       	adc	r23, r23
    9578:	88 1f       	adc	r24, r24
    957a:	99 1f       	adc	r25, r25
    957c:	62 0f       	add	r22, r18
    957e:	73 1f       	adc	r23, r19
    9580:	84 1f       	adc	r24, r20
    9582:	95 1f       	adc	r25, r21
    9584:	66 0f       	add	r22, r22
    9586:	77 1f       	adc	r23, r23
    9588:	88 1f       	adc	r24, r24
    958a:	99 1f       	adc	r25, r25
    958c:	08 95       	ret

0000958e <__mulhi_const_10>:
    958e:	7a e0       	ldi	r23, 0x0A	; 10
    9590:	97 9f       	mul	r25, r23
    9592:	90 2d       	mov	r25, r0
    9594:	87 9f       	mul	r24, r23
    9596:	80 2d       	mov	r24, r0
    9598:	91 0d       	add	r25, r1
    959a:	11 24       	eor	r1, r1
    959c:	08 95       	ret

0000959e <sprintf>:
    959e:	0f 93       	push	r16
    95a0:	1f 93       	push	r17
    95a2:	cf 93       	push	r28
    95a4:	df 93       	push	r29
    95a6:	cd b7       	in	r28, 0x3d	; 61
    95a8:	de b7       	in	r29, 0x3e	; 62
    95aa:	2e 97       	sbiw	r28, 0x0e	; 14
    95ac:	cd bf       	out	0x3d, r28	; 61
    95ae:	de bf       	out	0x3e, r29	; 62
    95b0:	0d 89       	ldd	r16, Y+21	; 0x15
    95b2:	1e 89       	ldd	r17, Y+22	; 0x16
    95b4:	86 e0       	ldi	r24, 0x06	; 6
    95b6:	8c 83       	std	Y+4, r24	; 0x04
    95b8:	09 83       	std	Y+1, r16	; 0x01
    95ba:	1a 83       	std	Y+2, r17	; 0x02
    95bc:	8f ef       	ldi	r24, 0xFF	; 255
    95be:	9f e7       	ldi	r25, 0x7F	; 127
    95c0:	8d 83       	std	Y+5, r24	; 0x05
    95c2:	9e 83       	std	Y+6, r25	; 0x06
    95c4:	ae 01       	movw	r20, r28
    95c6:	47 5e       	subi	r20, 0xE7	; 231
    95c8:	5f 4f       	sbci	r21, 0xFF	; 255
    95ca:	6f 89       	ldd	r22, Y+23	; 0x17
    95cc:	78 8d       	ldd	r23, Y+24	; 0x18
    95ce:	ce 01       	movw	r24, r28
    95d0:	01 96       	adiw	r24, 0x01	; 1
    95d2:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <vfprintf>
    95d6:	ef 81       	ldd	r30, Y+7	; 0x07
    95d8:	f8 85       	ldd	r31, Y+8	; 0x08
    95da:	e0 0f       	add	r30, r16
    95dc:	f1 1f       	adc	r31, r17
    95de:	10 82       	st	Z, r1
    95e0:	2e 96       	adiw	r28, 0x0e	; 14
    95e2:	cd bf       	out	0x3d, r28	; 61
    95e4:	de bf       	out	0x3e, r29	; 62
    95e6:	df 91       	pop	r29
    95e8:	cf 91       	pop	r28
    95ea:	1f 91       	pop	r17
    95ec:	0f 91       	pop	r16
    95ee:	08 95       	ret

000095f0 <vfprintf>:
    95f0:	2f 92       	push	r2
    95f2:	3f 92       	push	r3
    95f4:	4f 92       	push	r4
    95f6:	5f 92       	push	r5
    95f8:	6f 92       	push	r6
    95fa:	7f 92       	push	r7
    95fc:	8f 92       	push	r8
    95fe:	9f 92       	push	r9
    9600:	af 92       	push	r10
    9602:	bf 92       	push	r11
    9604:	cf 92       	push	r12
    9606:	df 92       	push	r13
    9608:	ef 92       	push	r14
    960a:	ff 92       	push	r15
    960c:	0f 93       	push	r16
    960e:	1f 93       	push	r17
    9610:	cf 93       	push	r28
    9612:	df 93       	push	r29
    9614:	cd b7       	in	r28, 0x3d	; 61
    9616:	de b7       	in	r29, 0x3e	; 62
    9618:	2b 97       	sbiw	r28, 0x0b	; 11
    961a:	cd bf       	out	0x3d, r28	; 61
    961c:	de bf       	out	0x3e, r29	; 62
    961e:	6c 01       	movw	r12, r24
    9620:	7b 01       	movw	r14, r22
    9622:	8a 01       	movw	r16, r20
    9624:	fc 01       	movw	r30, r24
    9626:	16 82       	std	Z+6, r1	; 0x06
    9628:	17 82       	std	Z+7, r1	; 0x07
    962a:	83 81       	ldd	r24, Z+3	; 0x03
    962c:	81 ff       	sbrs	r24, 1
    962e:	cc c1       	rjmp	.+920    	; 0x99c8 <vfprintf+0x3d8>
    9630:	ce 01       	movw	r24, r28
    9632:	01 96       	adiw	r24, 0x01	; 1
    9634:	3c 01       	movw	r6, r24
    9636:	f6 01       	movw	r30, r12
    9638:	93 81       	ldd	r25, Z+3	; 0x03
    963a:	f7 01       	movw	r30, r14
    963c:	93 fd       	sbrc	r25, 3
    963e:	85 91       	lpm	r24, Z+
    9640:	93 ff       	sbrs	r25, 3
    9642:	81 91       	ld	r24, Z+
    9644:	7f 01       	movw	r14, r30
    9646:	88 23       	and	r24, r24
    9648:	09 f4       	brne	.+2      	; 0x964c <vfprintf+0x5c>
    964a:	ba c1       	rjmp	.+884    	; 0x99c0 <vfprintf+0x3d0>
    964c:	85 32       	cpi	r24, 0x25	; 37
    964e:	39 f4       	brne	.+14     	; 0x965e <vfprintf+0x6e>
    9650:	93 fd       	sbrc	r25, 3
    9652:	85 91       	lpm	r24, Z+
    9654:	93 ff       	sbrs	r25, 3
    9656:	81 91       	ld	r24, Z+
    9658:	7f 01       	movw	r14, r30
    965a:	85 32       	cpi	r24, 0x25	; 37
    965c:	29 f4       	brne	.+10     	; 0x9668 <vfprintf+0x78>
    965e:	b6 01       	movw	r22, r12
    9660:	90 e0       	ldi	r25, 0x00	; 0
    9662:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <fputc>
    9666:	e7 cf       	rjmp	.-50     	; 0x9636 <vfprintf+0x46>
    9668:	91 2c       	mov	r9, r1
    966a:	21 2c       	mov	r2, r1
    966c:	31 2c       	mov	r3, r1
    966e:	ff e1       	ldi	r31, 0x1F	; 31
    9670:	f3 15       	cp	r31, r3
    9672:	d8 f0       	brcs	.+54     	; 0x96aa <vfprintf+0xba>
    9674:	8b 32       	cpi	r24, 0x2B	; 43
    9676:	79 f0       	breq	.+30     	; 0x9696 <vfprintf+0xa6>
    9678:	38 f4       	brcc	.+14     	; 0x9688 <vfprintf+0x98>
    967a:	80 32       	cpi	r24, 0x20	; 32
    967c:	79 f0       	breq	.+30     	; 0x969c <vfprintf+0xac>
    967e:	83 32       	cpi	r24, 0x23	; 35
    9680:	a1 f4       	brne	.+40     	; 0x96aa <vfprintf+0xba>
    9682:	23 2d       	mov	r18, r3
    9684:	20 61       	ori	r18, 0x10	; 16
    9686:	1d c0       	rjmp	.+58     	; 0x96c2 <vfprintf+0xd2>
    9688:	8d 32       	cpi	r24, 0x2D	; 45
    968a:	61 f0       	breq	.+24     	; 0x96a4 <vfprintf+0xb4>
    968c:	80 33       	cpi	r24, 0x30	; 48
    968e:	69 f4       	brne	.+26     	; 0x96aa <vfprintf+0xba>
    9690:	23 2d       	mov	r18, r3
    9692:	21 60       	ori	r18, 0x01	; 1
    9694:	16 c0       	rjmp	.+44     	; 0x96c2 <vfprintf+0xd2>
    9696:	83 2d       	mov	r24, r3
    9698:	82 60       	ori	r24, 0x02	; 2
    969a:	38 2e       	mov	r3, r24
    969c:	e3 2d       	mov	r30, r3
    969e:	e4 60       	ori	r30, 0x04	; 4
    96a0:	3e 2e       	mov	r3, r30
    96a2:	2a c0       	rjmp	.+84     	; 0x96f8 <vfprintf+0x108>
    96a4:	f3 2d       	mov	r31, r3
    96a6:	f8 60       	ori	r31, 0x08	; 8
    96a8:	1d c0       	rjmp	.+58     	; 0x96e4 <vfprintf+0xf4>
    96aa:	37 fc       	sbrc	r3, 7
    96ac:	2d c0       	rjmp	.+90     	; 0x9708 <vfprintf+0x118>
    96ae:	20 ed       	ldi	r18, 0xD0	; 208
    96b0:	28 0f       	add	r18, r24
    96b2:	2a 30       	cpi	r18, 0x0A	; 10
    96b4:	40 f0       	brcs	.+16     	; 0x96c6 <vfprintf+0xd6>
    96b6:	8e 32       	cpi	r24, 0x2E	; 46
    96b8:	b9 f4       	brne	.+46     	; 0x96e8 <vfprintf+0xf8>
    96ba:	36 fc       	sbrc	r3, 6
    96bc:	81 c1       	rjmp	.+770    	; 0x99c0 <vfprintf+0x3d0>
    96be:	23 2d       	mov	r18, r3
    96c0:	20 64       	ori	r18, 0x40	; 64
    96c2:	32 2e       	mov	r3, r18
    96c4:	19 c0       	rjmp	.+50     	; 0x96f8 <vfprintf+0x108>
    96c6:	36 fe       	sbrs	r3, 6
    96c8:	06 c0       	rjmp	.+12     	; 0x96d6 <vfprintf+0xe6>
    96ca:	8a e0       	ldi	r24, 0x0A	; 10
    96cc:	98 9e       	mul	r9, r24
    96ce:	20 0d       	add	r18, r0
    96d0:	11 24       	eor	r1, r1
    96d2:	92 2e       	mov	r9, r18
    96d4:	11 c0       	rjmp	.+34     	; 0x96f8 <vfprintf+0x108>
    96d6:	ea e0       	ldi	r30, 0x0A	; 10
    96d8:	2e 9e       	mul	r2, r30
    96da:	20 0d       	add	r18, r0
    96dc:	11 24       	eor	r1, r1
    96de:	22 2e       	mov	r2, r18
    96e0:	f3 2d       	mov	r31, r3
    96e2:	f0 62       	ori	r31, 0x20	; 32
    96e4:	3f 2e       	mov	r3, r31
    96e6:	08 c0       	rjmp	.+16     	; 0x96f8 <vfprintf+0x108>
    96e8:	8c 36       	cpi	r24, 0x6C	; 108
    96ea:	21 f4       	brne	.+8      	; 0x96f4 <vfprintf+0x104>
    96ec:	83 2d       	mov	r24, r3
    96ee:	80 68       	ori	r24, 0x80	; 128
    96f0:	38 2e       	mov	r3, r24
    96f2:	02 c0       	rjmp	.+4      	; 0x96f8 <vfprintf+0x108>
    96f4:	88 36       	cpi	r24, 0x68	; 104
    96f6:	41 f4       	brne	.+16     	; 0x9708 <vfprintf+0x118>
    96f8:	f7 01       	movw	r30, r14
    96fa:	93 fd       	sbrc	r25, 3
    96fc:	85 91       	lpm	r24, Z+
    96fe:	93 ff       	sbrs	r25, 3
    9700:	81 91       	ld	r24, Z+
    9702:	7f 01       	movw	r14, r30
    9704:	81 11       	cpse	r24, r1
    9706:	b3 cf       	rjmp	.-154    	; 0x966e <vfprintf+0x7e>
    9708:	98 2f       	mov	r25, r24
    970a:	9f 7d       	andi	r25, 0xDF	; 223
    970c:	95 54       	subi	r25, 0x45	; 69
    970e:	93 30       	cpi	r25, 0x03	; 3
    9710:	28 f4       	brcc	.+10     	; 0x971c <vfprintf+0x12c>
    9712:	0c 5f       	subi	r16, 0xFC	; 252
    9714:	1f 4f       	sbci	r17, 0xFF	; 255
    9716:	9f e3       	ldi	r25, 0x3F	; 63
    9718:	99 83       	std	Y+1, r25	; 0x01
    971a:	0d c0       	rjmp	.+26     	; 0x9736 <vfprintf+0x146>
    971c:	83 36       	cpi	r24, 0x63	; 99
    971e:	31 f0       	breq	.+12     	; 0x972c <vfprintf+0x13c>
    9720:	83 37       	cpi	r24, 0x73	; 115
    9722:	71 f0       	breq	.+28     	; 0x9740 <vfprintf+0x150>
    9724:	83 35       	cpi	r24, 0x53	; 83
    9726:	09 f0       	breq	.+2      	; 0x972a <vfprintf+0x13a>
    9728:	59 c0       	rjmp	.+178    	; 0x97dc <vfprintf+0x1ec>
    972a:	21 c0       	rjmp	.+66     	; 0x976e <vfprintf+0x17e>
    972c:	f8 01       	movw	r30, r16
    972e:	80 81       	ld	r24, Z
    9730:	89 83       	std	Y+1, r24	; 0x01
    9732:	0e 5f       	subi	r16, 0xFE	; 254
    9734:	1f 4f       	sbci	r17, 0xFF	; 255
    9736:	88 24       	eor	r8, r8
    9738:	83 94       	inc	r8
    973a:	91 2c       	mov	r9, r1
    973c:	53 01       	movw	r10, r6
    973e:	13 c0       	rjmp	.+38     	; 0x9766 <vfprintf+0x176>
    9740:	28 01       	movw	r4, r16
    9742:	f2 e0       	ldi	r31, 0x02	; 2
    9744:	4f 0e       	add	r4, r31
    9746:	51 1c       	adc	r5, r1
    9748:	f8 01       	movw	r30, r16
    974a:	a0 80       	ld	r10, Z
    974c:	b1 80       	ldd	r11, Z+1	; 0x01
    974e:	36 fe       	sbrs	r3, 6
    9750:	03 c0       	rjmp	.+6      	; 0x9758 <vfprintf+0x168>
    9752:	69 2d       	mov	r22, r9
    9754:	70 e0       	ldi	r23, 0x00	; 0
    9756:	02 c0       	rjmp	.+4      	; 0x975c <vfprintf+0x16c>
    9758:	6f ef       	ldi	r22, 0xFF	; 255
    975a:	7f ef       	ldi	r23, 0xFF	; 255
    975c:	c5 01       	movw	r24, r10
    975e:	0e 94 07 4d 	call	0x9a0e	; 0x9a0e <strnlen>
    9762:	4c 01       	movw	r8, r24
    9764:	82 01       	movw	r16, r4
    9766:	f3 2d       	mov	r31, r3
    9768:	ff 77       	andi	r31, 0x7F	; 127
    976a:	3f 2e       	mov	r3, r31
    976c:	16 c0       	rjmp	.+44     	; 0x979a <vfprintf+0x1aa>
    976e:	28 01       	movw	r4, r16
    9770:	22 e0       	ldi	r18, 0x02	; 2
    9772:	42 0e       	add	r4, r18
    9774:	51 1c       	adc	r5, r1
    9776:	f8 01       	movw	r30, r16
    9778:	a0 80       	ld	r10, Z
    977a:	b1 80       	ldd	r11, Z+1	; 0x01
    977c:	36 fe       	sbrs	r3, 6
    977e:	03 c0       	rjmp	.+6      	; 0x9786 <vfprintf+0x196>
    9780:	69 2d       	mov	r22, r9
    9782:	70 e0       	ldi	r23, 0x00	; 0
    9784:	02 c0       	rjmp	.+4      	; 0x978a <vfprintf+0x19a>
    9786:	6f ef       	ldi	r22, 0xFF	; 255
    9788:	7f ef       	ldi	r23, 0xFF	; 255
    978a:	c5 01       	movw	r24, r10
    978c:	0e 94 fc 4c 	call	0x99f8	; 0x99f8 <strnlen_P>
    9790:	4c 01       	movw	r8, r24
    9792:	f3 2d       	mov	r31, r3
    9794:	f0 68       	ori	r31, 0x80	; 128
    9796:	3f 2e       	mov	r3, r31
    9798:	82 01       	movw	r16, r4
    979a:	33 fc       	sbrc	r3, 3
    979c:	1b c0       	rjmp	.+54     	; 0x97d4 <vfprintf+0x1e4>
    979e:	82 2d       	mov	r24, r2
    97a0:	90 e0       	ldi	r25, 0x00	; 0
    97a2:	88 16       	cp	r8, r24
    97a4:	99 06       	cpc	r9, r25
    97a6:	b0 f4       	brcc	.+44     	; 0x97d4 <vfprintf+0x1e4>
    97a8:	b6 01       	movw	r22, r12
    97aa:	80 e2       	ldi	r24, 0x20	; 32
    97ac:	90 e0       	ldi	r25, 0x00	; 0
    97ae:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <fputc>
    97b2:	2a 94       	dec	r2
    97b4:	f4 cf       	rjmp	.-24     	; 0x979e <vfprintf+0x1ae>
    97b6:	f5 01       	movw	r30, r10
    97b8:	37 fc       	sbrc	r3, 7
    97ba:	85 91       	lpm	r24, Z+
    97bc:	37 fe       	sbrs	r3, 7
    97be:	81 91       	ld	r24, Z+
    97c0:	5f 01       	movw	r10, r30
    97c2:	b6 01       	movw	r22, r12
    97c4:	90 e0       	ldi	r25, 0x00	; 0
    97c6:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <fputc>
    97ca:	21 10       	cpse	r2, r1
    97cc:	2a 94       	dec	r2
    97ce:	21 e0       	ldi	r18, 0x01	; 1
    97d0:	82 1a       	sub	r8, r18
    97d2:	91 08       	sbc	r9, r1
    97d4:	81 14       	cp	r8, r1
    97d6:	91 04       	cpc	r9, r1
    97d8:	71 f7       	brne	.-36     	; 0x97b6 <vfprintf+0x1c6>
    97da:	e8 c0       	rjmp	.+464    	; 0x99ac <vfprintf+0x3bc>
    97dc:	84 36       	cpi	r24, 0x64	; 100
    97de:	11 f0       	breq	.+4      	; 0x97e4 <vfprintf+0x1f4>
    97e0:	89 36       	cpi	r24, 0x69	; 105
    97e2:	41 f5       	brne	.+80     	; 0x9834 <vfprintf+0x244>
    97e4:	f8 01       	movw	r30, r16
    97e6:	37 fe       	sbrs	r3, 7
    97e8:	07 c0       	rjmp	.+14     	; 0x97f8 <vfprintf+0x208>
    97ea:	60 81       	ld	r22, Z
    97ec:	71 81       	ldd	r23, Z+1	; 0x01
    97ee:	82 81       	ldd	r24, Z+2	; 0x02
    97f0:	93 81       	ldd	r25, Z+3	; 0x03
    97f2:	0c 5f       	subi	r16, 0xFC	; 252
    97f4:	1f 4f       	sbci	r17, 0xFF	; 255
    97f6:	08 c0       	rjmp	.+16     	; 0x9808 <vfprintf+0x218>
    97f8:	60 81       	ld	r22, Z
    97fa:	71 81       	ldd	r23, Z+1	; 0x01
    97fc:	07 2e       	mov	r0, r23
    97fe:	00 0c       	add	r0, r0
    9800:	88 0b       	sbc	r24, r24
    9802:	99 0b       	sbc	r25, r25
    9804:	0e 5f       	subi	r16, 0xFE	; 254
    9806:	1f 4f       	sbci	r17, 0xFF	; 255
    9808:	f3 2d       	mov	r31, r3
    980a:	ff 76       	andi	r31, 0x6F	; 111
    980c:	3f 2e       	mov	r3, r31
    980e:	97 ff       	sbrs	r25, 7
    9810:	09 c0       	rjmp	.+18     	; 0x9824 <vfprintf+0x234>
    9812:	90 95       	com	r25
    9814:	80 95       	com	r24
    9816:	70 95       	com	r23
    9818:	61 95       	neg	r22
    981a:	7f 4f       	sbci	r23, 0xFF	; 255
    981c:	8f 4f       	sbci	r24, 0xFF	; 255
    981e:	9f 4f       	sbci	r25, 0xFF	; 255
    9820:	f0 68       	ori	r31, 0x80	; 128
    9822:	3f 2e       	mov	r3, r31
    9824:	2a e0       	ldi	r18, 0x0A	; 10
    9826:	30 e0       	ldi	r19, 0x00	; 0
    9828:	a3 01       	movw	r20, r6
    982a:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__ultoa_invert>
    982e:	88 2e       	mov	r8, r24
    9830:	86 18       	sub	r8, r6
    9832:	45 c0       	rjmp	.+138    	; 0x98be <vfprintf+0x2ce>
    9834:	85 37       	cpi	r24, 0x75	; 117
    9836:	31 f4       	brne	.+12     	; 0x9844 <vfprintf+0x254>
    9838:	23 2d       	mov	r18, r3
    983a:	2f 7e       	andi	r18, 0xEF	; 239
    983c:	b2 2e       	mov	r11, r18
    983e:	2a e0       	ldi	r18, 0x0A	; 10
    9840:	30 e0       	ldi	r19, 0x00	; 0
    9842:	25 c0       	rjmp	.+74     	; 0x988e <vfprintf+0x29e>
    9844:	93 2d       	mov	r25, r3
    9846:	99 7f       	andi	r25, 0xF9	; 249
    9848:	b9 2e       	mov	r11, r25
    984a:	8f 36       	cpi	r24, 0x6F	; 111
    984c:	c1 f0       	breq	.+48     	; 0x987e <vfprintf+0x28e>
    984e:	18 f4       	brcc	.+6      	; 0x9856 <vfprintf+0x266>
    9850:	88 35       	cpi	r24, 0x58	; 88
    9852:	79 f0       	breq	.+30     	; 0x9872 <vfprintf+0x282>
    9854:	b5 c0       	rjmp	.+362    	; 0x99c0 <vfprintf+0x3d0>
    9856:	80 37       	cpi	r24, 0x70	; 112
    9858:	19 f0       	breq	.+6      	; 0x9860 <vfprintf+0x270>
    985a:	88 37       	cpi	r24, 0x78	; 120
    985c:	21 f0       	breq	.+8      	; 0x9866 <vfprintf+0x276>
    985e:	b0 c0       	rjmp	.+352    	; 0x99c0 <vfprintf+0x3d0>
    9860:	e9 2f       	mov	r30, r25
    9862:	e0 61       	ori	r30, 0x10	; 16
    9864:	be 2e       	mov	r11, r30
    9866:	b4 fe       	sbrs	r11, 4
    9868:	0d c0       	rjmp	.+26     	; 0x9884 <vfprintf+0x294>
    986a:	fb 2d       	mov	r31, r11
    986c:	f4 60       	ori	r31, 0x04	; 4
    986e:	bf 2e       	mov	r11, r31
    9870:	09 c0       	rjmp	.+18     	; 0x9884 <vfprintf+0x294>
    9872:	34 fe       	sbrs	r3, 4
    9874:	0a c0       	rjmp	.+20     	; 0x988a <vfprintf+0x29a>
    9876:	29 2f       	mov	r18, r25
    9878:	26 60       	ori	r18, 0x06	; 6
    987a:	b2 2e       	mov	r11, r18
    987c:	06 c0       	rjmp	.+12     	; 0x988a <vfprintf+0x29a>
    987e:	28 e0       	ldi	r18, 0x08	; 8
    9880:	30 e0       	ldi	r19, 0x00	; 0
    9882:	05 c0       	rjmp	.+10     	; 0x988e <vfprintf+0x29e>
    9884:	20 e1       	ldi	r18, 0x10	; 16
    9886:	30 e0       	ldi	r19, 0x00	; 0
    9888:	02 c0       	rjmp	.+4      	; 0x988e <vfprintf+0x29e>
    988a:	20 e1       	ldi	r18, 0x10	; 16
    988c:	32 e0       	ldi	r19, 0x02	; 2
    988e:	f8 01       	movw	r30, r16
    9890:	b7 fe       	sbrs	r11, 7
    9892:	07 c0       	rjmp	.+14     	; 0x98a2 <vfprintf+0x2b2>
    9894:	60 81       	ld	r22, Z
    9896:	71 81       	ldd	r23, Z+1	; 0x01
    9898:	82 81       	ldd	r24, Z+2	; 0x02
    989a:	93 81       	ldd	r25, Z+3	; 0x03
    989c:	0c 5f       	subi	r16, 0xFC	; 252
    989e:	1f 4f       	sbci	r17, 0xFF	; 255
    98a0:	06 c0       	rjmp	.+12     	; 0x98ae <vfprintf+0x2be>
    98a2:	60 81       	ld	r22, Z
    98a4:	71 81       	ldd	r23, Z+1	; 0x01
    98a6:	80 e0       	ldi	r24, 0x00	; 0
    98a8:	90 e0       	ldi	r25, 0x00	; 0
    98aa:	0e 5f       	subi	r16, 0xFE	; 254
    98ac:	1f 4f       	sbci	r17, 0xFF	; 255
    98ae:	a3 01       	movw	r20, r6
    98b0:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__ultoa_invert>
    98b4:	88 2e       	mov	r8, r24
    98b6:	86 18       	sub	r8, r6
    98b8:	fb 2d       	mov	r31, r11
    98ba:	ff 77       	andi	r31, 0x7F	; 127
    98bc:	3f 2e       	mov	r3, r31
    98be:	36 fe       	sbrs	r3, 6
    98c0:	0d c0       	rjmp	.+26     	; 0x98dc <vfprintf+0x2ec>
    98c2:	23 2d       	mov	r18, r3
    98c4:	2e 7f       	andi	r18, 0xFE	; 254
    98c6:	a2 2e       	mov	r10, r18
    98c8:	89 14       	cp	r8, r9
    98ca:	58 f4       	brcc	.+22     	; 0x98e2 <vfprintf+0x2f2>
    98cc:	34 fe       	sbrs	r3, 4
    98ce:	0b c0       	rjmp	.+22     	; 0x98e6 <vfprintf+0x2f6>
    98d0:	32 fc       	sbrc	r3, 2
    98d2:	09 c0       	rjmp	.+18     	; 0x98e6 <vfprintf+0x2f6>
    98d4:	83 2d       	mov	r24, r3
    98d6:	8e 7e       	andi	r24, 0xEE	; 238
    98d8:	a8 2e       	mov	r10, r24
    98da:	05 c0       	rjmp	.+10     	; 0x98e6 <vfprintf+0x2f6>
    98dc:	b8 2c       	mov	r11, r8
    98de:	a3 2c       	mov	r10, r3
    98e0:	03 c0       	rjmp	.+6      	; 0x98e8 <vfprintf+0x2f8>
    98e2:	b8 2c       	mov	r11, r8
    98e4:	01 c0       	rjmp	.+2      	; 0x98e8 <vfprintf+0x2f8>
    98e6:	b9 2c       	mov	r11, r9
    98e8:	a4 fe       	sbrs	r10, 4
    98ea:	0f c0       	rjmp	.+30     	; 0x990a <vfprintf+0x31a>
    98ec:	fe 01       	movw	r30, r28
    98ee:	e8 0d       	add	r30, r8
    98f0:	f1 1d       	adc	r31, r1
    98f2:	80 81       	ld	r24, Z
    98f4:	80 33       	cpi	r24, 0x30	; 48
    98f6:	21 f4       	brne	.+8      	; 0x9900 <vfprintf+0x310>
    98f8:	9a 2d       	mov	r25, r10
    98fa:	99 7e       	andi	r25, 0xE9	; 233
    98fc:	a9 2e       	mov	r10, r25
    98fe:	09 c0       	rjmp	.+18     	; 0x9912 <vfprintf+0x322>
    9900:	a2 fe       	sbrs	r10, 2
    9902:	06 c0       	rjmp	.+12     	; 0x9910 <vfprintf+0x320>
    9904:	b3 94       	inc	r11
    9906:	b3 94       	inc	r11
    9908:	04 c0       	rjmp	.+8      	; 0x9912 <vfprintf+0x322>
    990a:	8a 2d       	mov	r24, r10
    990c:	86 78       	andi	r24, 0x86	; 134
    990e:	09 f0       	breq	.+2      	; 0x9912 <vfprintf+0x322>
    9910:	b3 94       	inc	r11
    9912:	a3 fc       	sbrc	r10, 3
    9914:	11 c0       	rjmp	.+34     	; 0x9938 <vfprintf+0x348>
    9916:	a0 fe       	sbrs	r10, 0
    9918:	06 c0       	rjmp	.+12     	; 0x9926 <vfprintf+0x336>
    991a:	b2 14       	cp	r11, r2
    991c:	88 f4       	brcc	.+34     	; 0x9940 <vfprintf+0x350>
    991e:	28 0c       	add	r2, r8
    9920:	92 2c       	mov	r9, r2
    9922:	9b 18       	sub	r9, r11
    9924:	0e c0       	rjmp	.+28     	; 0x9942 <vfprintf+0x352>
    9926:	b2 14       	cp	r11, r2
    9928:	60 f4       	brcc	.+24     	; 0x9942 <vfprintf+0x352>
    992a:	b6 01       	movw	r22, r12
    992c:	80 e2       	ldi	r24, 0x20	; 32
    992e:	90 e0       	ldi	r25, 0x00	; 0
    9930:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <fputc>
    9934:	b3 94       	inc	r11
    9936:	f7 cf       	rjmp	.-18     	; 0x9926 <vfprintf+0x336>
    9938:	b2 14       	cp	r11, r2
    993a:	18 f4       	brcc	.+6      	; 0x9942 <vfprintf+0x352>
    993c:	2b 18       	sub	r2, r11
    993e:	02 c0       	rjmp	.+4      	; 0x9944 <vfprintf+0x354>
    9940:	98 2c       	mov	r9, r8
    9942:	21 2c       	mov	r2, r1
    9944:	a4 fe       	sbrs	r10, 4
    9946:	10 c0       	rjmp	.+32     	; 0x9968 <vfprintf+0x378>
    9948:	b6 01       	movw	r22, r12
    994a:	80 e3       	ldi	r24, 0x30	; 48
    994c:	90 e0       	ldi	r25, 0x00	; 0
    994e:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <fputc>
    9952:	a2 fe       	sbrs	r10, 2
    9954:	17 c0       	rjmp	.+46     	; 0x9984 <vfprintf+0x394>
    9956:	a1 fc       	sbrc	r10, 1
    9958:	03 c0       	rjmp	.+6      	; 0x9960 <vfprintf+0x370>
    995a:	88 e7       	ldi	r24, 0x78	; 120
    995c:	90 e0       	ldi	r25, 0x00	; 0
    995e:	02 c0       	rjmp	.+4      	; 0x9964 <vfprintf+0x374>
    9960:	88 e5       	ldi	r24, 0x58	; 88
    9962:	90 e0       	ldi	r25, 0x00	; 0
    9964:	b6 01       	movw	r22, r12
    9966:	0c c0       	rjmp	.+24     	; 0x9980 <vfprintf+0x390>
    9968:	8a 2d       	mov	r24, r10
    996a:	86 78       	andi	r24, 0x86	; 134
    996c:	59 f0       	breq	.+22     	; 0x9984 <vfprintf+0x394>
    996e:	a1 fe       	sbrs	r10, 1
    9970:	02 c0       	rjmp	.+4      	; 0x9976 <vfprintf+0x386>
    9972:	8b e2       	ldi	r24, 0x2B	; 43
    9974:	01 c0       	rjmp	.+2      	; 0x9978 <vfprintf+0x388>
    9976:	80 e2       	ldi	r24, 0x20	; 32
    9978:	a7 fc       	sbrc	r10, 7
    997a:	8d e2       	ldi	r24, 0x2D	; 45
    997c:	b6 01       	movw	r22, r12
    997e:	90 e0       	ldi	r25, 0x00	; 0
    9980:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <fputc>
    9984:	89 14       	cp	r8, r9
    9986:	38 f4       	brcc	.+14     	; 0x9996 <vfprintf+0x3a6>
    9988:	b6 01       	movw	r22, r12
    998a:	80 e3       	ldi	r24, 0x30	; 48
    998c:	90 e0       	ldi	r25, 0x00	; 0
    998e:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <fputc>
    9992:	9a 94       	dec	r9
    9994:	f7 cf       	rjmp	.-18     	; 0x9984 <vfprintf+0x394>
    9996:	8a 94       	dec	r8
    9998:	f3 01       	movw	r30, r6
    999a:	e8 0d       	add	r30, r8
    999c:	f1 1d       	adc	r31, r1
    999e:	80 81       	ld	r24, Z
    99a0:	b6 01       	movw	r22, r12
    99a2:	90 e0       	ldi	r25, 0x00	; 0
    99a4:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <fputc>
    99a8:	81 10       	cpse	r8, r1
    99aa:	f5 cf       	rjmp	.-22     	; 0x9996 <vfprintf+0x3a6>
    99ac:	22 20       	and	r2, r2
    99ae:	09 f4       	brne	.+2      	; 0x99b2 <vfprintf+0x3c2>
    99b0:	42 ce       	rjmp	.-892    	; 0x9636 <vfprintf+0x46>
    99b2:	b6 01       	movw	r22, r12
    99b4:	80 e2       	ldi	r24, 0x20	; 32
    99b6:	90 e0       	ldi	r25, 0x00	; 0
    99b8:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <fputc>
    99bc:	2a 94       	dec	r2
    99be:	f6 cf       	rjmp	.-20     	; 0x99ac <vfprintf+0x3bc>
    99c0:	f6 01       	movw	r30, r12
    99c2:	86 81       	ldd	r24, Z+6	; 0x06
    99c4:	97 81       	ldd	r25, Z+7	; 0x07
    99c6:	02 c0       	rjmp	.+4      	; 0x99cc <vfprintf+0x3dc>
    99c8:	8f ef       	ldi	r24, 0xFF	; 255
    99ca:	9f ef       	ldi	r25, 0xFF	; 255
    99cc:	2b 96       	adiw	r28, 0x0b	; 11
    99ce:	cd bf       	out	0x3d, r28	; 61
    99d0:	de bf       	out	0x3e, r29	; 62
    99d2:	df 91       	pop	r29
    99d4:	cf 91       	pop	r28
    99d6:	1f 91       	pop	r17
    99d8:	0f 91       	pop	r16
    99da:	ff 90       	pop	r15
    99dc:	ef 90       	pop	r14
    99de:	df 90       	pop	r13
    99e0:	cf 90       	pop	r12
    99e2:	bf 90       	pop	r11
    99e4:	af 90       	pop	r10
    99e6:	9f 90       	pop	r9
    99e8:	8f 90       	pop	r8
    99ea:	7f 90       	pop	r7
    99ec:	6f 90       	pop	r6
    99ee:	5f 90       	pop	r5
    99f0:	4f 90       	pop	r4
    99f2:	3f 90       	pop	r3
    99f4:	2f 90       	pop	r2
    99f6:	08 95       	ret

000099f8 <strnlen_P>:
    99f8:	fc 01       	movw	r30, r24
    99fa:	05 90       	lpm	r0, Z+
    99fc:	61 50       	subi	r22, 0x01	; 1
    99fe:	70 40       	sbci	r23, 0x00	; 0
    9a00:	01 10       	cpse	r0, r1
    9a02:	d8 f7       	brcc	.-10     	; 0x99fa <strnlen_P+0x2>
    9a04:	80 95       	com	r24
    9a06:	90 95       	com	r25
    9a08:	8e 0f       	add	r24, r30
    9a0a:	9f 1f       	adc	r25, r31
    9a0c:	08 95       	ret

00009a0e <strnlen>:
    9a0e:	fc 01       	movw	r30, r24
    9a10:	61 50       	subi	r22, 0x01	; 1
    9a12:	70 40       	sbci	r23, 0x00	; 0
    9a14:	01 90       	ld	r0, Z+
    9a16:	01 10       	cpse	r0, r1
    9a18:	d8 f7       	brcc	.-10     	; 0x9a10 <strnlen+0x2>
    9a1a:	80 95       	com	r24
    9a1c:	90 95       	com	r25
    9a1e:	8e 0f       	add	r24, r30
    9a20:	9f 1f       	adc	r25, r31
    9a22:	08 95       	ret

00009a24 <fputc>:
    9a24:	0f 93       	push	r16
    9a26:	1f 93       	push	r17
    9a28:	cf 93       	push	r28
    9a2a:	df 93       	push	r29
    9a2c:	fb 01       	movw	r30, r22
    9a2e:	23 81       	ldd	r18, Z+3	; 0x03
    9a30:	21 fd       	sbrc	r18, 1
    9a32:	03 c0       	rjmp	.+6      	; 0x9a3a <fputc+0x16>
    9a34:	8f ef       	ldi	r24, 0xFF	; 255
    9a36:	9f ef       	ldi	r25, 0xFF	; 255
    9a38:	2c c0       	rjmp	.+88     	; 0x9a92 <fputc+0x6e>
    9a3a:	22 ff       	sbrs	r18, 2
    9a3c:	16 c0       	rjmp	.+44     	; 0x9a6a <fputc+0x46>
    9a3e:	46 81       	ldd	r20, Z+6	; 0x06
    9a40:	57 81       	ldd	r21, Z+7	; 0x07
    9a42:	24 81       	ldd	r18, Z+4	; 0x04
    9a44:	35 81       	ldd	r19, Z+5	; 0x05
    9a46:	42 17       	cp	r20, r18
    9a48:	53 07       	cpc	r21, r19
    9a4a:	44 f4       	brge	.+16     	; 0x9a5c <fputc+0x38>
    9a4c:	a0 81       	ld	r26, Z
    9a4e:	b1 81       	ldd	r27, Z+1	; 0x01
    9a50:	9d 01       	movw	r18, r26
    9a52:	2f 5f       	subi	r18, 0xFF	; 255
    9a54:	3f 4f       	sbci	r19, 0xFF	; 255
    9a56:	20 83       	st	Z, r18
    9a58:	31 83       	std	Z+1, r19	; 0x01
    9a5a:	8c 93       	st	X, r24
    9a5c:	26 81       	ldd	r18, Z+6	; 0x06
    9a5e:	37 81       	ldd	r19, Z+7	; 0x07
    9a60:	2f 5f       	subi	r18, 0xFF	; 255
    9a62:	3f 4f       	sbci	r19, 0xFF	; 255
    9a64:	26 83       	std	Z+6, r18	; 0x06
    9a66:	37 83       	std	Z+7, r19	; 0x07
    9a68:	14 c0       	rjmp	.+40     	; 0x9a92 <fputc+0x6e>
    9a6a:	8b 01       	movw	r16, r22
    9a6c:	ec 01       	movw	r28, r24
    9a6e:	fb 01       	movw	r30, r22
    9a70:	00 84       	ldd	r0, Z+8	; 0x08
    9a72:	f1 85       	ldd	r31, Z+9	; 0x09
    9a74:	e0 2d       	mov	r30, r0
    9a76:	09 95       	icall
    9a78:	89 2b       	or	r24, r25
    9a7a:	e1 f6       	brne	.-72     	; 0x9a34 <fputc+0x10>
    9a7c:	d8 01       	movw	r26, r16
    9a7e:	16 96       	adiw	r26, 0x06	; 6
    9a80:	8d 91       	ld	r24, X+
    9a82:	9c 91       	ld	r25, X
    9a84:	17 97       	sbiw	r26, 0x07	; 7
    9a86:	01 96       	adiw	r24, 0x01	; 1
    9a88:	16 96       	adiw	r26, 0x06	; 6
    9a8a:	8d 93       	st	X+, r24
    9a8c:	9c 93       	st	X, r25
    9a8e:	17 97       	sbiw	r26, 0x07	; 7
    9a90:	ce 01       	movw	r24, r28
    9a92:	df 91       	pop	r29
    9a94:	cf 91       	pop	r28
    9a96:	1f 91       	pop	r17
    9a98:	0f 91       	pop	r16
    9a9a:	08 95       	ret

00009a9c <__ultoa_invert>:
    9a9c:	fa 01       	movw	r30, r20
    9a9e:	aa 27       	eor	r26, r26
    9aa0:	28 30       	cpi	r18, 0x08	; 8
    9aa2:	51 f1       	breq	.+84     	; 0x9af8 <__ultoa_invert+0x5c>
    9aa4:	20 31       	cpi	r18, 0x10	; 16
    9aa6:	81 f1       	breq	.+96     	; 0x9b08 <__ultoa_invert+0x6c>
    9aa8:	e8 94       	clt
    9aaa:	6f 93       	push	r22
    9aac:	6e 7f       	andi	r22, 0xFE	; 254
    9aae:	6e 5f       	subi	r22, 0xFE	; 254
    9ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    9ab2:	8f 4f       	sbci	r24, 0xFF	; 255
    9ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    9ab6:	af 4f       	sbci	r26, 0xFF	; 255
    9ab8:	b1 e0       	ldi	r27, 0x01	; 1
    9aba:	3e d0       	rcall	.+124    	; 0x9b38 <__ultoa_invert+0x9c>
    9abc:	b4 e0       	ldi	r27, 0x04	; 4
    9abe:	3c d0       	rcall	.+120    	; 0x9b38 <__ultoa_invert+0x9c>
    9ac0:	67 0f       	add	r22, r23
    9ac2:	78 1f       	adc	r23, r24
    9ac4:	89 1f       	adc	r24, r25
    9ac6:	9a 1f       	adc	r25, r26
    9ac8:	a1 1d       	adc	r26, r1
    9aca:	68 0f       	add	r22, r24
    9acc:	79 1f       	adc	r23, r25
    9ace:	8a 1f       	adc	r24, r26
    9ad0:	91 1d       	adc	r25, r1
    9ad2:	a1 1d       	adc	r26, r1
    9ad4:	6a 0f       	add	r22, r26
    9ad6:	71 1d       	adc	r23, r1
    9ad8:	81 1d       	adc	r24, r1
    9ada:	91 1d       	adc	r25, r1
    9adc:	a1 1d       	adc	r26, r1
    9ade:	20 d0       	rcall	.+64     	; 0x9b20 <__ultoa_invert+0x84>
    9ae0:	09 f4       	brne	.+2      	; 0x9ae4 <__ultoa_invert+0x48>
    9ae2:	68 94       	set
    9ae4:	3f 91       	pop	r19
    9ae6:	2a e0       	ldi	r18, 0x0A	; 10
    9ae8:	26 9f       	mul	r18, r22
    9aea:	11 24       	eor	r1, r1
    9aec:	30 19       	sub	r19, r0
    9aee:	30 5d       	subi	r19, 0xD0	; 208
    9af0:	31 93       	st	Z+, r19
    9af2:	de f6       	brtc	.-74     	; 0x9aaa <__ultoa_invert+0xe>
    9af4:	cf 01       	movw	r24, r30
    9af6:	08 95       	ret
    9af8:	46 2f       	mov	r20, r22
    9afa:	47 70       	andi	r20, 0x07	; 7
    9afc:	40 5d       	subi	r20, 0xD0	; 208
    9afe:	41 93       	st	Z+, r20
    9b00:	b3 e0       	ldi	r27, 0x03	; 3
    9b02:	0f d0       	rcall	.+30     	; 0x9b22 <__ultoa_invert+0x86>
    9b04:	c9 f7       	brne	.-14     	; 0x9af8 <__ultoa_invert+0x5c>
    9b06:	f6 cf       	rjmp	.-20     	; 0x9af4 <__ultoa_invert+0x58>
    9b08:	46 2f       	mov	r20, r22
    9b0a:	4f 70       	andi	r20, 0x0F	; 15
    9b0c:	40 5d       	subi	r20, 0xD0	; 208
    9b0e:	4a 33       	cpi	r20, 0x3A	; 58
    9b10:	18 f0       	brcs	.+6      	; 0x9b18 <__ultoa_invert+0x7c>
    9b12:	49 5d       	subi	r20, 0xD9	; 217
    9b14:	31 fd       	sbrc	r19, 1
    9b16:	40 52       	subi	r20, 0x20	; 32
    9b18:	41 93       	st	Z+, r20
    9b1a:	02 d0       	rcall	.+4      	; 0x9b20 <__ultoa_invert+0x84>
    9b1c:	a9 f7       	brne	.-22     	; 0x9b08 <__ultoa_invert+0x6c>
    9b1e:	ea cf       	rjmp	.-44     	; 0x9af4 <__ultoa_invert+0x58>
    9b20:	b4 e0       	ldi	r27, 0x04	; 4
    9b22:	a6 95       	lsr	r26
    9b24:	97 95       	ror	r25
    9b26:	87 95       	ror	r24
    9b28:	77 95       	ror	r23
    9b2a:	67 95       	ror	r22
    9b2c:	ba 95       	dec	r27
    9b2e:	c9 f7       	brne	.-14     	; 0x9b22 <__ultoa_invert+0x86>
    9b30:	00 97       	sbiw	r24, 0x00	; 0
    9b32:	61 05       	cpc	r22, r1
    9b34:	71 05       	cpc	r23, r1
    9b36:	08 95       	ret
    9b38:	9b 01       	movw	r18, r22
    9b3a:	ac 01       	movw	r20, r24
    9b3c:	0a 2e       	mov	r0, r26
    9b3e:	06 94       	lsr	r0
    9b40:	57 95       	ror	r21
    9b42:	47 95       	ror	r20
    9b44:	37 95       	ror	r19
    9b46:	27 95       	ror	r18
    9b48:	ba 95       	dec	r27
    9b4a:	c9 f7       	brne	.-14     	; 0x9b3e <__ultoa_invert+0xa2>
    9b4c:	62 0f       	add	r22, r18
    9b4e:	73 1f       	adc	r23, r19
    9b50:	84 1f       	adc	r24, r20
    9b52:	95 1f       	adc	r25, r21
    9b54:	a0 1d       	adc	r26, r0
    9b56:	08 95       	ret

00009b58 <eeprom_read_byte>:
    9b58:	03 d0       	rcall	.+6      	; 0x9b60 <eeprom_mapen>
    9b5a:	80 81       	ld	r24, Z
    9b5c:	99 27       	eor	r25, r25
    9b5e:	08 95       	ret

00009b60 <eeprom_mapen>:
    9b60:	fc 01       	movw	r30, r24
    9b62:	e0 50       	subi	r30, 0x00	; 0
    9b64:	fc 4e       	sbci	r31, 0xEC	; 236
    9b66:	08 95       	ret

00009b68 <eeprom_read_dword>:
    9b68:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <eeprom_mapen>
    9b6c:	60 81       	ld	r22, Z
    9b6e:	71 81       	ldd	r23, Z+1	; 0x01
    9b70:	82 81       	ldd	r24, Z+2	; 0x02
    9b72:	93 81       	ldd	r25, Z+3	; 0x03
    9b74:	08 95       	ret

00009b76 <eeprom_read_word>:
    9b76:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <eeprom_mapen>
    9b7a:	80 81       	ld	r24, Z
    9b7c:	91 81       	ldd	r25, Z+1	; 0x01
    9b7e:	08 95       	ret

00009b80 <__divmodqi4>:
    9b80:	87 fb       	bst	r24, 7
    9b82:	08 2e       	mov	r0, r24
    9b84:	06 26       	eor	r0, r22
    9b86:	87 fd       	sbrc	r24, 7
    9b88:	81 95       	neg	r24
    9b8a:	67 fd       	sbrc	r22, 7
    9b8c:	61 95       	neg	r22
    9b8e:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <__udivmodqi4>
    9b92:	0e f4       	brtc	.+2      	; 0x9b96 <__divmodqi4_1>
    9b94:	91 95       	neg	r25

00009b96 <__divmodqi4_1>:
    9b96:	07 fc       	sbrc	r0, 7
    9b98:	81 95       	neg	r24

00009b9a <__divmodqi4_exit>:
    9b9a:	08 95       	ret

00009b9c <__xload_1>:
    9b9c:	57 fd       	sbrc	r21, 7
    9b9e:	03 c0       	rjmp	.+6      	; 0x9ba6 <__xload_1+0xa>
    9ba0:	5b bf       	out	0x3b, r21	; 59
    9ba2:	67 91       	elpm	r22, Z+
    9ba4:	08 95       	ret
    9ba6:	60 81       	ld	r22, Z
    9ba8:	08 95       	ret

00009baa <__udivmodqi4>:
    9baa:	99 1b       	sub	r25, r25
    9bac:	79 e0       	ldi	r23, 0x09	; 9
    9bae:	04 c0       	rjmp	.+8      	; 0x9bb8 <__udivmodqi4_ep>

00009bb0 <__udivmodqi4_loop>:
    9bb0:	99 1f       	adc	r25, r25
    9bb2:	96 17       	cp	r25, r22
    9bb4:	08 f0       	brcs	.+2      	; 0x9bb8 <__udivmodqi4_ep>
    9bb6:	96 1b       	sub	r25, r22

00009bb8 <__udivmodqi4_ep>:
    9bb8:	88 1f       	adc	r24, r24
    9bba:	7a 95       	dec	r23
    9bbc:	c9 f7       	brne	.-14     	; 0x9bb0 <__udivmodqi4_loop>
    9bbe:	80 95       	com	r24
    9bc0:	08 95       	ret

00009bc2 <__do_global_dtors>:
    9bc2:	11 e0       	ldi	r17, 0x01	; 1
    9bc4:	ce e7       	ldi	r28, 0x7E	; 126
    9bc6:	d1 e0       	ldi	r29, 0x01	; 1
    9bc8:	04 c0       	rjmp	.+8      	; 0x9bd2 <__do_global_dtors+0x10>
    9bca:	fe 01       	movw	r30, r28
    9bcc:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__tablejump2__>
    9bd0:	21 96       	adiw	r28, 0x01	; 1
    9bd2:	c0 38       	cpi	r28, 0x80	; 128
    9bd4:	d1 07       	cpc	r29, r17
    9bd6:	c9 f7       	brne	.-14     	; 0x9bca <__do_global_dtors+0x8>
    9bd8:	f8 94       	cli

00009bda <__stop_program>:
    9bda:	ff cf       	rjmp	.-2      	; 0x9bda <__stop_program>
